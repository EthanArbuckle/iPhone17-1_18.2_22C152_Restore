void sub_10028EA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028EA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028EA60(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  sub_1002D6AE8(v7, &off_100495300);
  sub_10028D598(a4, a3);
  *(double *)(a4 + 304) = *(double *)(a4 + 304) * a1;
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10028EAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028EAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002D6AE8(v14, &off_100495320);
  double v5 = *(double *)(a2 + 304);
  uint64_t v6 = a2 + 16;
  if (v5 == 1.0)
  {
    sub_10028EC3C(a3, v6);
  }
  else
  {
    LODWORD(v10[0]) = 1124007936;
    memset((char *)v10 + 4, 0, 48);
    v10[3] = 0u;
    v11 = (char *)v10 + 8;
    v12 = v13;
    v13[0] = 0;
    v13[1] = 0;
    memset(v9, 0, sizeof(v9));
    sub_100288DF0(a3, v6, (uint64_t)v10, v9, v5, 0.0);
    if (*((void *)&v10[3] + 1)
      && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v10[3] + 1) + 20), 0xFFFFFFFF) == 1)
    {
      sub_1002932F4((uint64_t)v10);
    }
    *((void *)&v10[3] + 1) = 0;
    memset(&v10[1], 0, 32);
    if (SDWORD1(v10[0]) >= 1)
    {
      uint64_t v7 = 0;
      int v8 = v11;
      do
        *(_DWORD *)&v8[4 * v7++] = 0;
      while (v7 < SDWORD1(v10[0]));
    }
    if (v12 != v13) {
      j__free(v12);
    }
  }
  if (v15) {
    sub_1002D6888(v14);
  }
}

void sub_10028EC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v5 - 32);
  _Unwind_Resume(a1);
}

void sub_10028EC28(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 32);
  _Unwind_Resume(a1);
}

void sub_10028EC3C(uint64_t a1, uint64_t a2)
{
  LODWORD(v21[0]) = 1124007936;
  memset((char *)v21 + 4, 0, 48);
  v21[3] = 0u;
  v22 = (char *)v21 + 8;
  v23 = v24;
  v24[0] = 0;
  v24[1] = 0;
  LODWORD(v17[0]) = 1124007936;
  memset((char *)v17 + 4, 0, 48);
  v17[3] = 0u;
  v18 = (char *)v17 + 8;
  v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  memset(v16, 0, sizeof(v16));
  sub_100290690((uint64_t)&v25, (uint64_t)&qword_1004E09B0, 0, a2, (uint64_t)v21, (uint64_t)v17, v16, 1.0, 0.0);
  *(void *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v26;
  if (&v25 != (uint64_t *)a1)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3 && atomic_fetch_add((atomic_uint *volatile)(v3 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v5 + 4 * v4++) = 0;
      while (v4 < *(int *)(a1 + 20));
    }
    int v6 = *(_DWORD *)&v27[4];
    long long v7 = *(_OWORD *)&v27[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v27;
    *(_OWORD *)(a1 + 32) = v7;
    long long v8 = *(_OWORD *)&v27[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v27[32];
    *(_OWORD *)(a1 + 64) = v8;
    v9 = *(uint64_t **)(a1 + 88);
    if (v9 == (uint64_t *)(a1 + 96))
    {
      v10 = v29;
      if (v6 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v9);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      v9 = (uint64_t *)(a1 + 96);
      v10 = v29;
      if (*(int *)&v27[4] <= 2)
      {
LABEL_10:
        uint64_t *v9 = *v10;
        v9[1] = v10[1];
LABEL_13:
        *(_DWORD *)v27 = 1124007936;
        memset(&v27[4], 0, 60);
        goto LABEL_14;
      }
    }
    *(void *)(a1 + 80) = v28;
    *(void *)(a1 + 88) = v10;
    v28 = &v27[8];
    v29 = &v30;
    goto LABEL_13;
  }
LABEL_14:
  sub_100287094(a1 + 112, (uint64_t)&v31);
  sub_100287094(a1 + 208, (uint64_t)v32);
  long long v11 = v32[7];
  *(_OWORD *)(a1 + 304) = v32[6];
  *(_OWORD *)(a1 + 320) = v11;
  *(_OWORD *)(a1 + 336) = v32[8];
  sub_10000B6BC((uint64_t)&v25);
  if (*((void *)&v17[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v17[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v17);
  }
  *((void *)&v17[3] + 1) = 0;
  memset(&v17[1], 0, 32);
  if (SDWORD1(v17[0]) >= 1)
  {
    uint64_t v12 = 0;
    v13 = v18;
    do
      *(_DWORD *)&v13[4 * v12++] = 0;
    while (v12 < SDWORD1(v17[0]));
  }
  if (v19 != v20) {
    j__free(v19);
  }
  if (*((void *)&v21[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v21[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v21);
  }
  *((void *)&v21[3] + 1) = 0;
  memset(&v21[1], 0, 32);
  if (SDWORD1(v21[0]) >= 1)
  {
    uint64_t v14 = 0;
    int v15 = v22;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < SDWORD1(v21[0]));
  }
  if (v23 != v24) {
    j__free(v23);
  }
}

void sub_10028EF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1000094F4((uint64_t)va);
  sub_1000094F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10028EF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_10028EF60(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v23[0]) = 1124007936;
  memset((char *)v23 + 4, 0, 48);
  v23[3] = 0u;
  v24 = (char *)v23 + 8;
  uint64_t v25 = v26;
  v26[0] = 0;
  v26[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4) {
    uint64_t v6 = (unsigned int *)a3;
  }
  else {
    uint64_t v6 = (unsigned int *)v23;
  }
  uint64_t v22 = 0;
  int v20 = 16842752;
  uint64_t v21 = a2 + 16;
  uint64_t v19 = 0;
  int v17 = 16842752;
  uint64_t v18 = a2 + 112;
  uint64_t v16 = 0;
  int v14 = 16842752;
  uint64_t v15 = a2 + 208;
  double v7 = *(double *)(a2 + 304);
  double v8 = *(double *)(a2 + 312);
  int v11 = 33619968;
  uint64_t v12 = v6;
  uint64_t v13 = 0;
  sub_10026D688((uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, (uint64_t)&v11, *(_DWORD *)(a2 + 8), v7, v8);
  if (*((void *)v6 + 2) != *(void *)(a3 + 16))
  {
    int v20 = 33619968;
    uint64_t v21 = a3;
    uint64_t v22 = 0;
    sub_10024011C(v6, (uint64_t)&v20, a4, 1.0, 0.0);
  }
  if (*((void *)&v23[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v23[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v23);
  }
  *((void *)&v23[3] + 1) = 0;
  memset(&v23[1], 0, 32);
  if (SDWORD1(v23[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v24;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v23[0]));
  }
  if (v25 != v26) {
    j__free(v25);
  }
}

void sub_10028F0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028F0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028F10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1002D6AE8(v14, &off_100495340);
  double v8 = *(uint64_t **)a2;
  uint64_t v9 = *(uint64_t **)a3;
  double v10 = 1.0;
  if (*(uint64_t **)a2 == &qword_1004E09B0) {
    double v11 = 1.0;
  }
  else {
    double v11 = *(double *)(a2 + 304);
  }
  if (v9 != &qword_1004E09B0) {
    double v10 = *(double *)(a3 + 304);
  }
  if (v8 != &qword_1004E09D0 || *(void *)(a2 + 224) && *(double *)(a2 + 312) != 0.0) {
    goto LABEL_9;
  }
  if (v9 == &qword_1004E09B0) {
    goto LABEL_26;
  }
  if (v9 == &qword_1004E09B8)
  {
    if (*(void *)(a3 + 128) && *(double *)(a3 + 312) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 336)))))) & 1) != 0)
    {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
  if (v9 == &qword_1004E09E0)
  {
LABEL_26:
    uint64_t v12 = a2;
    double v13 = v11;
    goto LABEL_31;
  }
LABEL_9:
  if (v9 != &qword_1004E09D0 || *(void *)(a3 + 224) && *(double *)(a3 + 312) != 0.0) {
    goto LABEL_12;
  }
  if (v8 != &qword_1004E09B0)
  {
    if (v8 == &qword_1004E09B8)
    {
      if (*(void *)(a2 + 128) && *(double *)(a2 + 312) != 0.0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) != 0)
      {
        goto LABEL_12;
      }
    }
    else if (v8 != &qword_1004E09E0)
    {
LABEL_12:
      if (v9 == (uint64_t *)a1) {
        sub_1002888FC(a1, (void *)a2, (float64x2_t *)a3, a4);
      }
      else {
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v9 + 104))(v9, a2, a3, a4);
      }
      goto LABEL_32;
    }
  }
  uint64_t v12 = a3;
  uint64_t v9 = *(uint64_t **)a2;
  a3 = a2;
  double v13 = v10;
  double v10 = v11;
LABEL_31:
  sub_10028BDD8(a4, *(_DWORD *)(v12 + 8) & 0xFFFFFFFB | (4 * (v9 == &qword_1004E09E0)), v12 + 16, v12 + 112, a3 + 16, v13, v10);
LABEL_32:
  if (v15) {
    sub_1002D6888(v14);
  }
}

void sub_10028F344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028F358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1002D6AE8(v15, &off_100495360);
  double v8 = *(uint64_t **)a2;
  uint64_t v9 = *(uint64_t **)a3;
  double v10 = 1.0;
  if (*(uint64_t **)a2 == &qword_1004E09B0) {
    double v11 = 1.0;
  }
  else {
    double v11 = *(double *)(a2 + 304);
  }
  if (v9 != &qword_1004E09B0) {
    double v10 = *(double *)(a3 + 304);
  }
  if (v8 != &qword_1004E09D0 || *(void *)(a2 + 224) && *(double *)(a2 + 312) != 0.0) {
    goto LABEL_9;
  }
  if (v9 == &qword_1004E09B0) {
    goto LABEL_26;
  }
  if (v9 == &qword_1004E09B8)
  {
    if (*(void *)(a3 + 128) && *(double *)(a3 + 312) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 336)))))) & 1) != 0)
    {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
  if (v9 == &qword_1004E09E0)
  {
LABEL_26:
    unsigned int v12 = *(_DWORD *)(a2 + 8) & 0xFFFFFFFB | (4 * (v9 == &qword_1004E09E0));
    double v13 = v11;
    double v11 = -v10;
    uint64_t v14 = a2;
    goto LABEL_31;
  }
LABEL_9:
  if (v9 != &qword_1004E09D0 || *(void *)(a3 + 224) && *(double *)(a3 + 312) != 0.0) {
    goto LABEL_12;
  }
  if (v8 != &qword_1004E09B0)
  {
    if (v8 == &qword_1004E09B8)
    {
      if (*(void *)(a2 + 128) && *(double *)(a2 + 312) != 0.0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) != 0)
      {
        goto LABEL_12;
      }
    }
    else if (v8 != &qword_1004E09E0)
    {
LABEL_12:
      if (v9 == (uint64_t *)a1) {
        sub_100289284(a1, (void *)a2, (float64x2_t *)a3, a4);
      }
      else {
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v9 + 120))(v9, a2, a3, a4);
      }
      goto LABEL_32;
    }
  }
  unsigned int v12 = *(_DWORD *)(a3 + 8) & 0xFFFFFFFB | (4 * (v8 == &qword_1004E09E0));
  double v13 = -v10;
  uint64_t v14 = a3;
  a3 = a2;
LABEL_31:
  sub_10028BDD8(a4, v12, v14 + 16, v14 + 112, a3 + 16, v13, v11);
LABEL_32:
  if (v16) {
    sub_1002D6888(v15);
  }
}

void sub_10028F5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028F5B8(double a1, uint64_t a2, uint64_t *a3, float64x2_t *a4)
{
  sub_1002D6AE8(v7, &off_100495380);
  sub_10028D598((uint64_t)a4, a3);
  a4[19] = vmulq_n_f64(a4[19], a1);
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10028F628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028F63C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_1002D6AE8(v5, &off_1004953A0);
  sub_10028D598((uint64_t)a3, (uint64_t *)a2);
  a3[2] = (*(_DWORD *)(a2 + 8) & 4 | (~__rbit32(*(_DWORD *)(a2 + 8)) >> 30)) ^ 4;
  sub_100292414(a3 + 4, a3 + 28);
  if (v6) {
    sub_1002D6888(v5);
  }
}

void sub_10028F6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028F6D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 48);
  v15[3] = 0u;
  int v16 = (char *)v15 + 8;
  int v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4) {
    int v6 = (unsigned int *)a3;
  }
  else {
    int v6 = (unsigned int *)v15;
  }
  uint64_t v13 = a2 + 16;
  uint64_t v14 = 0;
  int v12 = 16842752;
  int v9 = 33619968;
  double v10 = v6;
  uint64_t v11 = 0;
  sub_1002633C0((uint64_t)&v12, (uint64_t)&v9, *(_DWORD *)(a2 + 8));
  if (*((void *)v6 + 2) != *(void *)(a3 + 16))
  {
    int v12 = 33619968;
    uint64_t v13 = a3;
    uint64_t v14 = 0;
    sub_10024011C(v6, (uint64_t)&v12, a4, 1.0, 0.0);
  }
  if (*((void *)&v15[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v15[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v15);
  }
  *((void *)&v15[3] + 1) = 0;
  memset(&v15[1], 0, 32);
  if (SDWORD1(v15[0]) >= 1)
  {
    uint64_t v7 = 0;
    int v8 = v16;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v15[0]));
  }
  if (v17 != v18) {
    j__free(v17);
  }
}

void sub_10028F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028F83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028F850(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v5 = *a3;
  if (*(uint64_t **)a2 == &qword_1004E09D8 && v5 == &qword_1004E09B0)
  {
    sub_10028F8CC(a4, *(_DWORD *)(a2 + 8), a2 + 16, (uint64_t)(a3 + 2));
  }
  else if (v5 == (uint64_t *)a1)
  {
    sub_10028B5E8(a1, a2, (uint64_t)a3, a4);
  }
  else
  {
    (*(void (**)(void))(*v5 + 184))();
  }
}

void sub_10028F8CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  LODWORD(v17[0]) = 1124007936;
  memset((char *)v17 + 4, 0, 48);
  v17[3] = 0u;
  uint64_t v18 = (char *)v17 + 8;
  uint64_t v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  memset(v16, 0, sizeof(v16));
  sub_100290690((uint64_t)&v21, (uint64_t)&qword_1004E09E8, a2, a3, a4, (uint64_t)v17, v16, 1.0, 1.0);
  *(void *)a1 = v21;
  *(_DWORD *)(a1 + 8) = v22;
  if (&v21 != (uint64_t *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5 && atomic_fetch_add((atomic_uint *volatile)(v5 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v7 + 4 * v6++) = 0;
      while (v6 < *(int *)(a1 + 20));
    }
    int v8 = *(_DWORD *)&v23[4];
    long long v9 = *(_OWORD *)&v23[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v23;
    *(_OWORD *)(a1 + 32) = v9;
    long long v10 = *(_OWORD *)&v23[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v23[32];
    *(_OWORD *)(a1 + 64) = v10;
    uint64_t v11 = *(uint64_t **)(a1 + 88);
    if (v11 == (uint64_t *)(a1 + 96))
    {
      int v12 = v25;
      if (v8 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v11);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      uint64_t v11 = (uint64_t *)(a1 + 96);
      int v12 = v25;
      if (*(int *)&v23[4] <= 2)
      {
LABEL_10:
        uint64_t *v11 = *v12;
        v11[1] = v12[1];
LABEL_13:
        *(_DWORD *)v23 = 1124007936;
        memset(&v23[4], 0, 60);
        goto LABEL_14;
      }
    }
    *(void *)(a1 + 80) = v24;
    *(void *)(a1 + 88) = v12;
    v24 = &v23[8];
    uint64_t v25 = &v26;
    goto LABEL_13;
  }
LABEL_14:
  sub_100287094(a1 + 112, (uint64_t)&v27);
  sub_100287094(a1 + 208, (uint64_t)v28);
  long long v13 = v28[7];
  *(_OWORD *)(a1 + 304) = v28[6];
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v28[8];
  sub_10000B6BC((uint64_t)&v21);
  if (*((void *)&v17[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v17[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v17);
  }
  *((void *)&v17[3] + 1) = 0;
  memset(&v17[1], 0, 32);
  if (SDWORD1(v17[0]) >= 1)
  {
    uint64_t v14 = 0;
    int v15 = v18;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < SDWORD1(v17[0]));
  }
  if (v19 != v20) {
    j__free(v19);
  }
}

void sub_10028FB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028FB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_10000B6BC((uint64_t)va1);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028FB44(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v18[0]) = 1124007936;
  memset((char *)v18 + 4, 0, 48);
  v18[3] = 0u;
  uint64_t v19 = (char *)v18 + 8;
  int v20 = v21;
  v21[0] = 0;
  v21[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4) {
    uint64_t v6 = (unsigned int *)a3;
  }
  else {
    uint64_t v6 = (unsigned int *)v18;
  }
  uint64_t v17 = 0;
  int v15 = 16842752;
  uint64_t v16 = a2 + 16;
  uint64_t v14 = 0;
  int v12 = 16842752;
  uint64_t v13 = a2 + 112;
  int v9 = 33619968;
  uint64_t v10 = v6;
  uint64_t v11 = 0;
  sub_100265A34((uint64_t)&v15, (uint64_t)&v12, (uint64_t)&v9, *(_DWORD *)(a2 + 8));
  if (*((void *)v6 + 2) != *(void *)(a3 + 16))
  {
    int v15 = 33619968;
    uint64_t v16 = a3;
    uint64_t v17 = 0;
    sub_10024011C(v6, (uint64_t)&v15, a4, 1.0, 0.0);
  }
  if (*((void *)&v18[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v18[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v18);
  }
  *((void *)&v18[3] + 1) = 0;
  memset(&v18[1], 0, 32);
  if (SDWORD1(v18[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v19;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v18[0]));
  }
  if (v20 != v21) {
    j__free(v20);
  }
}

void sub_10028FCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028FCD8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = *(_DWORD *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 20);
  __int16 v8 = v7 & 0xFFF;
  if (a4 == -1) {
    LOWORD(a4) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 80);
  if (v6 <= 2)
  {
    int v10 = *(_DWORD *)(v9 + 4);
    int v11 = a4 & 0xFFF;
    BOOL v13 = *(int *)(a3 + 4) <= 2 && *(_DWORD *)(a3 + 8) == *(_DWORD *)v9 && *(_DWORD *)(a3 + 12) == v10;
    if (!v13 || ((*(_DWORD *)a3 & 0xFFF) == v11 ? (BOOL v14 = *(void *)(a3 + 16) == 0) : (BOOL v14 = 1), v14))
    {
      LODWORD(__src) = *(_DWORD *)v9;
      DWORD1(__src) = v10;
      sub_100292534((char *)a3, 2, (uint64_t *)&__src, v11);
    }
    int v15 = *(_DWORD *)(a2 + 8);
    if (v15 != 73 || *(_DWORD *)(a2 + 20) > 2) {
      goto LABEL_22;
    }
LABEL_30:
    int v18 = 50397184;
    uint64_t v19 = a3;
    uint64_t v20 = 0;
    long long __src = *(unint64_t *)(a2 + 304);
    long long v22 = 0uLL;
    sub_1002A02D0((uint64_t)&v18, (double *)&__src);
    return;
  }
  sub_100292534((char *)a3, v6, (uint64_t *)v9, a4);
  int v15 = *(_DWORD *)(a2 + 8);
  if (v15 == 73 && *(_DWORD *)(a2 + 20) <= 2) {
    goto LABEL_30;
  }
LABEL_22:
  if (v15 == 49)
  {
    long long __src = *(unint64_t *)(a2 + 304);
    long long v22 = 0uLL;
    sub_100255390(a3, (uint64_t)&__src);
  }
  else
  {
    if (v15 != 48)
    {
      long long __src = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&__src, 31), "Invalid matrix initializer type", 31);
      sub_1002D2278(-2, (uint64_t *)&__src, "assign", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matop.cpp", 1643);
    }
    long long __src = 0u;
    long long v22 = 0u;
    sub_100255390(a3, (uint64_t)&__src);
  }
}

void sub_10028FE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10028FEBC(double a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  sub_1002D6AE8(v7, &off_1004953C0);
  sub_10028D598(a4, a3);
  *(double *)(a4 + 304) = *(double *)(a4 + 304) * a1;
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10028FF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028FF44(int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  sub_1002D6AE8(v9, &off_1004953E0);
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 1124007936;
  *(_OWORD *)(a4 + 20) = 0u;
  *(_OWORD *)(a4 + 36) = 0u;
  *(_OWORD *)(a4 + 52) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(void *)(a4 + 96) = 0;
  *(void *)(a4 + 80) = a4 + 24;
  *(void *)(a4 + 88) = a4 + 96;
  *(void *)(a4 + 104) = 0;
  *(_DWORD *)(a4 + 112) = 1124007936;
  *(_OWORD *)(a4 + 116) = 0u;
  *(_OWORD *)(a4 + 132) = 0u;
  *(_OWORD *)(a4 + 148) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(void *)(a4 + 192) = 0;
  *(void *)(a4 + 176) = a4 + 120;
  *(void *)(a4 + 184) = a4 + 192;
  *(void *)(a4 + 200) = 0;
  *(_DWORD *)(a4 + 208) = 1124007936;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 244) = 0u;
  *(_OWORD *)(a4 + 228) = 0u;
  *(_OWORD *)(a4 + 212) = 0u;
  *(void *)(a4 + 272) = a4 + 216;
  *(void *)(a4 + 280) = a4 + 288;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 320) = 0u;
  *(_OWORD *)(a4 + 336) = 0u;
  v8[0] = a2;
  v8[1] = a1;
  sub_100290064(a4, 48, v8, a3, 1.0);
  if (v10) {
    sub_1002D6888(v9);
  }
}

void sub_100290048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10000B6BC(v3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100290064(uint64_t a1, int a2, int *a3, unsigned int a4, double a5)
{
  uint64_t v10 = sub_1002908A0();
  int v11 = *a3;
  v38[0] = a3[1];
  v38[1] = v11;
  *(void *)&long long v39 = 4008636142;
  *((void *)&v39 + 1) = 4008636142;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  v43 = v38;
  v44 = v45;
  int v36 = a4 & 0xFFF | 0x42FF4000;
  int v37 = 2;
  v45[0] = v11 * (uint64_t)(int)((((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3));
  v45[1] = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3);
  *(void *)&long long v40 = v45[0] * v38[0] + 4008636142;
  *((void *)&v40 + 1) = v40;
  LODWORD(v32[0]) = 1124007936;
  memset((char *)v32 + 4, 0, 48);
  v32[3] = 0u;
  v33 = (char *)v32 + 8;
  v34 = v35;
  v35[0] = 0;
  v35[1] = 0;
  LODWORD(v28[0]) = 1124007936;
  memset((char *)v28 + 4, 0, 48);
  v28[3] = 0u;
  v29 = (char *)v28 + 8;
  uint64_t v30 = v31;
  v31[0] = 0;
  v31[1] = 0;
  memset(v27, 0, sizeof(v27));
  sub_100290690((uint64_t)&v46, v10, a2, (uint64_t)&v36, (uint64_t)v32, (uint64_t)v28, v27, a5, 0.0);
  *(void *)a1 = v46;
  *(_DWORD *)(a1 + 8) = v47;
  if (&v46 != (uint64_t *)a1)
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (v12 && atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v14 + 4 * v13++) = 0;
      while (v13 < *(int *)(a1 + 20));
    }
    int v15 = *(_DWORD *)&v48[4];
    long long v16 = *(_OWORD *)&v48[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v48;
    *(_OWORD *)(a1 + 32) = v16;
    long long v17 = *(_OWORD *)&v48[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v48[32];
    *(_OWORD *)(a1 + 64) = v17;
    int v18 = *(uint64_t **)(a1 + 88);
    if (v18 == (uint64_t *)(a1 + 96))
    {
      uint64_t v19 = v50;
      if (v15 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v18);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      int v18 = (uint64_t *)(a1 + 96);
      uint64_t v19 = v50;
      if (*(int *)&v48[4] <= 2)
      {
LABEL_10:
        uint64_t *v18 = *v19;
        v18[1] = v19[1];
LABEL_13:
        *(_DWORD *)v48 = 1124007936;
        memset(&v48[4], 0, 60);
        goto LABEL_14;
      }
    }
    *(void *)(a1 + 80) = v49;
    *(void *)(a1 + 88) = v19;
    v49 = &v48[8];
    v50 = &v51;
    goto LABEL_13;
  }
LABEL_14:
  sub_100287094(a1 + 112, (uint64_t)&v52);
  sub_100287094(a1 + 208, (uint64_t)v53);
  long long v20 = v53[7];
  *(_OWORD *)(a1 + 304) = v53[6];
  *(_OWORD *)(a1 + 320) = v20;
  *(_OWORD *)(a1 + 336) = v53[8];
  sub_10000B6BC((uint64_t)&v46);
  if (*((void *)&v28[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v28[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v28);
  }
  *((void *)&v28[3] + 1) = 0;
  memset(&v28[1], 0, 32);
  if (SDWORD1(v28[0]) >= 1)
  {
    uint64_t v21 = 0;
    long long v22 = v29;
    do
      *(_DWORD *)&v22[4 * v21++] = 0;
    while (v21 < SDWORD1(v28[0]));
  }
  if (v30 != v31) {
    j__free(v30);
  }
  if (*((void *)&v32[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v32[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v32);
  }
  *((void *)&v32[3] + 1) = 0;
  memset(&v32[1], 0, 32);
  if (SDWORD1(v32[0]) >= 1)
  {
    uint64_t v23 = 0;
    v24 = v33;
    do
      *(_DWORD *)&v24[4 * v23++] = 0;
    while (v23 < SDWORD1(v32[0]));
  }
  if (v34 != v35) {
    j__free(v34);
  }
  if (v42 && atomic_fetch_add((atomic_uint *volatile)(v42 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v36);
  }
  uint64_t v42 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  if (v37 >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = v43;
    do
      v26[v25++] = 0;
    while (v25 < v37);
  }
  if (v44 != v45) {
    j__free(v44);
  }
}

void sub_10029043C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_100290470(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  sub_1002D6AE8(v7, &off_100495400);
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1124007936;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 36) = 0u;
  *(_OWORD *)(a3 + 52) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 80) = a3 + 24;
  *(void *)(a3 + 88) = a3 + 96;
  *(void *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 1124007936;
  *(_OWORD *)(a3 + 116) = 0u;
  *(_OWORD *)(a3 + 132) = 0u;
  *(_OWORD *)(a3 + 148) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 176) = a3 + 120;
  *(void *)(a3 + 184) = a3 + 192;
  *(void *)(a3 + 200) = 0;
  *(_DWORD *)(a3 + 208) = 1124007936;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 244) = 0u;
  *(_OWORD *)(a3 + 228) = 0u;
  *(_OWORD *)(a3 + 212) = 0u;
  *(void *)(a3 + 272) = a3 + 216;
  *(void *)(a3 + 280) = a3 + 288;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  uint64_t v6 = *a1;
  sub_100290064(a3, 48, (int *)&v6, a2, 1.0);
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100290574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10000B6BC(v3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100290590()
{
}

uint64_t sub_1002905A4()
{
  return 1;
}

void sub_1002905AC()
{
}

uint64_t sub_1002905C0()
{
  return 1;
}

void sub_1002905C8()
{
}

uint64_t sub_1002905DC()
{
  return 1;
}

void sub_1002905E4()
{
}

uint64_t sub_1002905F8()
{
  return 1;
}

void sub_100290600()
{
}

uint64_t sub_100290614()
{
  return 0;
}

void sub_10029061C()
{
}

uint64_t sub_100290630()
{
  return 0;
}

void sub_100290638()
{
}

uint64_t sub_10029064C()
{
  return 0;
}

void sub_100290654()
{
}

uint64_t sub_100290668()
{
  return 0;
}

void sub_100290674()
{
}

uint64_t sub_100290688()
{
  return 0;
}

uint64_t sub_100290690(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, double a8, double a9)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  long long v15 = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a4 + 32);
  uint64_t v17 = *(void *)(a4 + 48);
  uint64_t v16 = *(void *)(a4 + 56);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 16) = v15;
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
  }
  if (*(int *)(a4 + 4) > 2)
  {
    *(_DWORD *)(a1 + 20) = 0;
    sub_1002931A8(a1 + 16, a4);
  }
  else
  {
    int v18 = *(void **)(a4 + 72);
    uint64_t v19 = *(void **)(a1 + 88);
    void *v19 = *v18;
    v19[1] = v18[1];
  }
  long long v20 = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a5 + 32);
  uint64_t v22 = *(void *)(a5 + 48);
  uint64_t v21 = *(void *)(a5 + 56);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 160) = v22;
  *(void *)(a1 + 168) = v21;
  *(void *)(a1 + 176) = a1 + 120;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 112) = v20;
  if (v21) {
    atomic_fetch_add((atomic_uint *volatile)(v21 + 20), 1u);
  }
  if (*(int *)(a5 + 4) > 2)
  {
    *(_DWORD *)(a1 + 116) = 0;
    sub_1002931A8(a1 + 112, a5);
  }
  else
  {
    uint64_t v23 = *(void **)(a5 + 72);
    v24 = *(void **)(a1 + 184);
    void *v24 = *v23;
    v24[1] = v23[1];
  }
  long long v25 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)a6;
  *(_OWORD *)(a1 + 224) = v25;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a6 + 32);
  uint64_t v26 = *(void *)(a6 + 56);
  *(void *)(a1 + 256) = *(void *)(a6 + 48);
  *(void *)(a1 + 264) = v26;
  *(void *)(a1 + 272) = a1 + 216;
  *(void *)(a1 + 280) = a1 + 288;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  if (v26) {
    atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
  }
  if (*(int *)(a6 + 4) > 2)
  {
    *(_DWORD *)(a1 + 212) = 0;
    sub_1002931A8(a1 + 208, a6);
  }
  else
  {
    uint64_t v27 = *(void **)(a6 + 72);
    v28 = *(void **)(a1 + 280);
    void *v28 = *v27;
    v28[1] = v27[1];
  }
  *(double *)(a1 + 304) = a8;
  *(double *)(a1 + 312) = a9;
  *(void *)(a1 + 320) = *a7;
  *(void *)(a1 + 328) = a7[1];
  *(void *)(a1 + 336) = a7[2];
  *(void *)(a1 + 344) = a7[3];
  return a1;
}

void sub_100290870(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

void sub_10029088C(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002908A0()
{
  if (!qword_1004E09A8)
  {
    v0 = (pthread_mutex_t **)sub_1002D1A44();
    sub_1002D2EC4(v0);
    if (!qword_1004E09A8) {
      operator new();
    }
    sub_1002D2ECC(v0);
  }
  return qword_1004E09A8;
}

void sub_100290920(_Unwind_Exception *a1)
{
  sub_1002D2ECC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10029093C()
{
  qword_1004E09B0 = (uint64_t)off_100495430;
  __cxa_atexit((void (*)(void *))nullsub_5, &qword_1004E09B0, (void *)&_mh_execute_header);
  qword_1004E09B8 = (uint64_t)off_100495540;
  __cxa_atexit((void (*)(void *))nullsub_6, &qword_1004E09B8, (void *)&_mh_execute_header);
  qword_1004E09C0 = (uint64_t)off_100495640;
  __cxa_atexit((void (*)(void *))nullsub_7, &qword_1004E09C0, (void *)&_mh_execute_header);
  qword_1004E09C8 = (uint64_t)off_100495740;
  __cxa_atexit((void (*)(void *))nullsub_8, &qword_1004E09C8, (void *)&_mh_execute_header);
  qword_1004E09D0 = (uint64_t)off_100495840;
  __cxa_atexit((void (*)(void *))nullsub_9, &qword_1004E09D0, (void *)&_mh_execute_header);
  qword_1004E09D8 = (uint64_t)off_100495940;
  __cxa_atexit((void (*)(void *))nullsub_10, &qword_1004E09D8, (void *)&_mh_execute_header);
  qword_1004E09E0 = (uint64_t)off_100495A40;
  __cxa_atexit((void (*)(void *))nullsub_11, &qword_1004E09E0, (void *)&_mh_execute_header);
  qword_1004E09E8 = (uint64_t)off_100495B40;

  return __cxa_atexit((void (*)(void *))nullsub_12, &qword_1004E09E8, (void *)&_mh_execute_header);
}

uint64_t sub_100290B38(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 16) && !*(_DWORD *)(a2 + 20)) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void sub_100290B70(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (a4 < 1)
  {
LABEL_13:
    memset(&v68[20], 0, 44);
    *(_OWORD *)&v68[4] = 0u;
    v69 = (int *)&v68[8];
    v70 = v71;
    v71[0] = 0;
    v71[1] = 0;
    *(_DWORD *)v68 = 1124007936;
    *(void *)&v68[16] = v8;
    *(void *)&v68[24] = v8;
    sub_100292BB8((uint64_t)v68, a4, (uint64_t)v75, a7, 1);
    uint64_t v12 = v69;
    if (*(int *)&v68[4] < 1)
    {
      int v14 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      while (v69[v13] <= 1)
      {
        if (*(unsigned int *)&v68[4] == ++v13)
        {
          int v14 = *(_DWORD *)&v68[4];
          goto LABEL_20;
        }
      }
      int v14 = v13;
    }
LABEL_20:
    long long v15 = (uint64_t *)v70;
    uint64_t v16 = *(int *)&v68[4] - 1;
    uint64_t v17 = (char *)v70 + 8 * *(int *)&v68[4] - 8;
    while (v16 > v14)
    {
      unint64_t v18 = *v17 * v69[v16];
      unint64_t v19 = *--v17;
      --v16;
      if (v18 < v19)
      {
        *(_DWORD *)v68 &= ~0x4000u;
        if (*(int *)&v68[4] < 3) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
    }
    *(_DWORD *)v68 = *(_DWORD *)v68 & 0xFFFFBFFF | 0x4000;
    if (*(int *)&v68[4] < 3) {
      goto LABEL_27;
    }
LABEL_26:
    *(void *)&v68[8] = -1;
LABEL_27:
    if (*(void *)&v68[56])
    {
      uint64_t v20 = *(void *)(*(void *)&v68[56] + 24);
      *(void *)&v68[16] = v20;
      *(void *)&v68[24] = v20;
      if (v20) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v20 = *(void *)&v68[16];
      if (*(void *)&v68[16])
      {
LABEL_29:
        uint64_t v21 = *v69;
        uint64_t v22 = *(void *)&v68[24] + *(void *)v70 * v21;
        *(void *)&v68[40] = v22;
        if ((int)v21 < 1)
        {
          *(void *)&v68[32] = v22;
        }
        else
        {
          uint64_t v23 = (*(_DWORD *)&v68[4] - 1);
          uint64_t v24 = v20 + *((void *)v70 + (int)v23) * v69[(int)v23];
          *(void *)&v68[32] = v24;
          if (*(int *)&v68[4] >= 2)
          {
            do
            {
              uint64_t v25 = *v12++;
              uint64_t v26 = v25 - 1;
              uint64_t v27 = *v15++;
              v24 += v27 * v26;
              --v23;
            }
            while (v23);
            *(void *)&v68[32] = v24;
          }
        }
LABEL_36:
        memset(&v64[28], 0, 32);
        *(_OWORD *)v64 = 0u;
        v65 = (int *)&v64[4];
        v66 = v67;
        v67[0] = 0;
        v67[1] = 0;
        unsigned int v63 = 1124007936;
        *(void *)&v64[12] = a3;
        *(void *)&v64[20] = a3;
        sub_100292BB8((uint64_t)&v63, a4, (uint64_t)v75, a8, 1);
        v28 = v65;
        if (*(int *)v64 < 1)
        {
          int v30 = 0;
        }
        else
        {
          uint64_t v29 = 0;
          while (v65[v29] <= 1)
          {
            if (*(unsigned int *)v64 == ++v29)
            {
              int v30 = *(_DWORD *)v64;
              goto LABEL_43;
            }
          }
          int v30 = v29;
        }
LABEL_43:
        uint64_t v31 = (uint64_t *)v66;
        uint64_t v32 = *(int *)v64 - 1;
        v33 = (char *)v66 + 8 * *(int *)v64 - 8;
        while (v32 > v30)
        {
          unint64_t v34 = *v33 * v65[v32];
          unint64_t v35 = *--v33;
          --v32;
          if (v34 < v35)
          {
            v63 &= ~0x4000u;
            if (*(int *)v64 < 3) {
              goto LABEL_50;
            }
            goto LABEL_49;
          }
        }
        unsigned int v63 = v63 & 0xFFFFBFFF | 0x4000;
        if (*(int *)v64 < 3) {
          goto LABEL_50;
        }
LABEL_49:
        *(void *)&v64[4] = -1;
LABEL_50:
        if (*(void *)&v64[52])
        {
          uint64_t v36 = *(void *)(*(void *)&v64[52] + 24);
          *(void *)&v64[12] = v36;
          *(void *)&v64[20] = v36;
          if (v36) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v36 = *(void *)&v64[12];
          if (*(void *)&v64[12])
          {
LABEL_52:
            uint64_t v37 = *v65;
            uint64_t v38 = *(void *)&v64[20] + *(void *)v66 * v37;
            *(void *)&v64[36] = v38;
            if ((int)v37 < 1)
            {
              *(void *)&v64[28] = v38;
            }
            else
            {
              uint64_t v39 = (*(_DWORD *)v64 - 1);
              uint64_t v40 = v36 + *((void *)v66 + (int)v39) * v65[(int)v39];
              *(void *)&v64[28] = v40;
              if (*(int *)v64 >= 2)
              {
                do
                {
                  uint64_t v41 = *v28++;
                  uint64_t v42 = v41 - 1;
                  uint64_t v43 = *v31++;
                  v40 += v43 * v42;
                  --v39;
                }
                while (v39);
                *(void *)&v64[28] = v40;
              }
            }
            goto LABEL_59;
          }
        }
        *(void *)&v64[28] = 0;
        *(void *)&v64[36] = 0;
LABEL_59:
        v74[0] = (uint64_t)v68;
        v74[1] = (uint64_t)&v63;
        v72 = 0;
        v73 = 0;
        uint64_t v62 = 0;
        memset(v57, 0, sizeof(v57));
        int v58 = 0;
        unint64_t v59 = 0;
        size_t __n = 0;
        int v61 = 0;
        sub_1002A0C58((uint64_t)v57, v74, 0, (uint64_t)&v72, 2);
        if (v59)
        {
          unint64_t v44 = 0;
          size_t v45 = __n;
          do
          {
            memcpy(v73, v72, v45);
            ++v44;
            sub_1002912C8((uint64_t)v57);
          }
          while (v44 < v59);
        }
        if (*(void *)&v64[52])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v64[52] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v46 = *(void *)&v64[52];
            if (*(void *)&v64[52])
            {
              *(void *)&v64[52] = 0;
              uint64_t v47 = *(void *)(v46 + 8);
              if (!v47)
              {
                uint64_t v47 = *(void *)&v64[44];
                if (!*(void *)&v64[44]) {
                  uint64_t v47 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 48))(v47, v46);
            }
          }
        }
        *(void *)&v64[52] = 0;
        memset(&v64[12], 0, 32);
        if (*(int *)v64 >= 1)
        {
          uint64_t v48 = 0;
          v49 = v65;
          do
            v49[v48++] = 0;
          while (v48 < *(int *)v64);
        }
        if (v66 != v67) {
          j__free(v66);
        }
        if (*(void *)&v68[56])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v68[56] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v50 = *(void *)&v68[56];
            if (*(void *)&v68[56])
            {
              *(void *)&v68[56] = 0;
              uint64_t v51 = *(void *)(v50 + 8);
              if (!v51)
              {
                uint64_t v51 = *(void *)&v68[48];
                if (!*(void *)&v68[48]) {
                  uint64_t v51 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 48))(v51, v50);
            }
          }
        }
        *(void *)&v68[56] = 0;
        memset(&v68[16], 0, 32);
        if (*(int *)&v68[4] >= 1)
        {
          uint64_t v52 = 0;
          v53 = v69;
          do
            v53[v52++] = 0;
          while (v52 < *(int *)&v68[4]);
        }
        if (v70 != v71) {
          j__free(v70);
        }
        return;
      }
    }
    *(void *)&v68[32] = 0;
    *(void *)&v68[40] = 0;
    goto LABEL_36;
  }
  uint64_t v9 = 0;
  while (1)
  {
    unint64_t v11 = *(void *)(a5 + 8 * v9);
    if (v11 >> 31)
    {
      *(void *)v68 = 0;
      *(void *)&v68[8] = 0;
      qmemcpy((void *)sub_1002D19D8(v68, 27), "sz[i] <= (size_t)2147483647", 27);
      sub_1002D2278(-215, (uint64_t *)v68, "download", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 77);
    }
    if (!v11) {
      break;
    }
    if (a6)
    {
      if (v9 <= a4 - 2) {
        uint64_t v10 = *(void *)(a7 + 8 * v9);
      }
      else {
        uint64_t v10 = 1;
      }
      v8 += v10 * *(void *)(a6 + 8 * v9);
    }
    v75[v9++] = v11;
    if (a4 == v9) {
      goto LABEL_13;
    }
  }
}

void sub_1002911A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029120C(uint64_t a1, int a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 8;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)a1 = a4 & 0xFFF | 0x42FF0000;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = a5;
  sub_100292BB8(a1, a2, a3, a6, 1);
  sub_100293064(a1);
  return a1;
}

uint64_t sub_10029127C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  sub_1002A0C58(a1, a2, 0, a3, a4);
  return a1;
}

uint64_t sub_1002912C8(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 56);
  if (v1 < *(void *)(result + 32) - 1)
  {
    unint64_t v2 = v1 + 1;
    *(void *)(result + 56) = v2;
    int v3 = *(_DWORD *)(result + 48);
    if (v3 == 1)
    {
      if (*(void *)(result + 16))
      {
        uint64_t v4 = *(unsigned int *)(result + 24);
        if ((int)v4 >= 1)
        {
          uint64_t v5 = 0;
          uint64_t v6 = 8 * v4;
          do
          {
            uint64_t v7 = *(void *)(result + 16);
            if (*(void *)(v7 + v5)) {
              *(void *)(v7 + v5) = *(void *)(*(void *)(*(void *)result + v5) + 16)
            }
                                   + **(void **)(*(void *)(*(void *)result + v5) + 72) * v2;
            v5 += 8;
          }
          while (v6 != v5);
        }
      }
      uint64_t v25 = *(void *)(result + 8);
      if (v25)
      {
        uint64_t v26 = *(unsigned int *)(result + 24);
        if ((int)v26 >= 1)
        {
          uint64_t v27 = 0;
          v28 = (void *)(v25 + 16);
          uint64_t v29 = 8 * v26;
          do
          {
            if (*v28) {
              void *v28 = *(void *)(*(void *)(*(void *)result + v27) + 16)
            }
                   + **(void **)(*(void *)(*(void *)result + v27) + 72) * v2;
            v27 += 8;
            v28 += 12;
          }
          while (v29 != v27);
        }
      }
    }
    else
    {
      uint64_t v8 = *(unsigned int *)(result + 24);
      if ((int)v8 >= 1)
      {
        if ((int)v2 <= 0 || v3 <= 0)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 8 * v8;
          uint64_t v32 = 16;
          do
          {
            uint64_t v33 = *(void *)(*(void *)(*(void *)result + v30) + 16);
            if (v33)
            {
              uint64_t v34 = *(void *)(result + 16);
              if (v34) {
                *(void *)(v34 + v30) = v33;
              }
              uint64_t v35 = *(void *)(result + 8);
              if (v35) {
                *(void *)(v35 + v32) = v33;
              }
            }
            v30 += 8;
            v32 += 96;
          }
          while (v31 != v30);
        }
        else
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            unint64_t v11 = *(void **)(*(void *)result + 8 * i);
            uint64_t v12 = v11[2];
            if (v12)
            {
              uint64_t v13 = v11[9];
              int v14 = (int *)(v11[8] + 4 * (v3 - 1));
              long long v15 = (uint64_t *)(v13 + 8 * (v3 - 1));
              int v16 = v3;
              int v17 = v2;
              do
              {
                int v18 = *v14--;
                int v19 = v17 / v18;
                uint64_t v20 = v17 % v18;
                uint64_t v21 = *v15--;
                v12 += v21 * v20;
                BOOL v22 = __OFSUB__(v16--, 1);
                if ((v16 < 0) ^ v22 | (v16 == 0)) {
                  break;
                }
                int v17 = v19;
              }
              while (v19 >= 1);
              uint64_t v23 = *(void *)(result + 16);
              if (v23) {
                *(void *)(v23 + 8 * i) = v12;
              }
              uint64_t v24 = *(void *)(result + 8);
              if (v24) {
                *(void *)(v24 + 96 * i + 16) = v12;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10029149C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (a4 < 1)
  {
LABEL_13:
    memset(&v67[20], 0, 44);
    *(_OWORD *)&v67[4] = 0u;
    v68 = (int *)&v67[8];
    v69 = v70;
    v70[0] = 0;
    v70[1] = 0;
    *(_DWORD *)v67 = 1124007936;
    *(void *)&v67[16] = a3;
    *(void *)&v67[24] = a3;
    sub_100292BB8((uint64_t)v67, a4, (uint64_t)v74, a8, 1);
    uint64_t v12 = v68;
    if (*(int *)&v67[4] < 1)
    {
      int v14 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      while (v68[v13] <= 1)
      {
        if (*(unsigned int *)&v67[4] == ++v13)
        {
          int v14 = *(_DWORD *)&v67[4];
          goto LABEL_20;
        }
      }
      int v14 = v13;
    }
LABEL_20:
    long long v15 = (uint64_t *)v69;
    uint64_t v16 = *(int *)&v67[4] - 1;
    int v17 = (char *)v69 + 8 * *(int *)&v67[4] - 8;
    while (v16 > v14)
    {
      unint64_t v18 = *v17 * v68[v16];
      unint64_t v19 = *--v17;
      --v16;
      if (v18 < v19)
      {
        *(_DWORD *)v67 &= ~0x4000u;
        if (*(int *)&v67[4] < 3) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
    }
    *(_DWORD *)v67 = *(_DWORD *)v67 & 0xFFFFBFFF | 0x4000;
    if (*(int *)&v67[4] < 3) {
      goto LABEL_27;
    }
LABEL_26:
    *(void *)&v67[8] = -1;
LABEL_27:
    if (*(void *)&v67[56])
    {
      uint64_t v20 = *(void *)(*(void *)&v67[56] + 24);
      *(void *)&v67[16] = v20;
      *(void *)&v67[24] = v20;
      if (v20) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v20 = *(void *)&v67[16];
      if (*(void *)&v67[16])
      {
LABEL_29:
        uint64_t v21 = *v68;
        uint64_t v22 = *(void *)&v67[24] + *(void *)v69 * v21;
        *(void *)&v67[40] = v22;
        if ((int)v21 < 1)
        {
          *(void *)&v67[32] = v22;
        }
        else
        {
          uint64_t v23 = (*(_DWORD *)&v67[4] - 1);
          uint64_t v24 = v20 + *((void *)v69 + (int)v23) * v68[(int)v23];
          *(void *)&v67[32] = v24;
          if (*(int *)&v67[4] >= 2)
          {
            do
            {
              uint64_t v25 = *v12++;
              uint64_t v26 = v25 - 1;
              uint64_t v27 = *v15++;
              v24 += v27 * v26;
              --v23;
            }
            while (v23);
            *(void *)&v67[32] = v24;
          }
        }
LABEL_36:
        memset(&v63[28], 0, 32);
        *(_OWORD *)unsigned int v63 = 0u;
        v64 = (int *)&v63[4];
        v65 = v66;
        v66[0] = 0;
        v66[1] = 0;
        unsigned int v62 = 1124007936;
        *(void *)&v63[12] = v8;
        *(void *)&v63[20] = v8;
        sub_100292BB8((uint64_t)&v62, a4, (uint64_t)v74, a7, 1);
        v28 = v64;
        if (*(int *)v63 < 1)
        {
          int v30 = 0;
        }
        else
        {
          uint64_t v29 = 0;
          while (v64[v29] <= 1)
          {
            if (*(unsigned int *)v63 == ++v29)
            {
              int v30 = *(_DWORD *)v63;
              goto LABEL_43;
            }
          }
          int v30 = v29;
        }
LABEL_43:
        uint64_t v31 = (uint64_t *)v65;
        uint64_t v32 = *(int *)v63 - 1;
        uint64_t v33 = (char *)v65 + 8 * *(int *)v63 - 8;
        while (v32 > v30)
        {
          unint64_t v34 = *v33 * v64[v32];
          unint64_t v35 = *--v33;
          --v32;
          if (v34 < v35)
          {
            v62 &= ~0x4000u;
            if (*(int *)v63 < 3) {
              goto LABEL_50;
            }
            goto LABEL_49;
          }
        }
        unsigned int v62 = v62 & 0xFFFFBFFF | 0x4000;
        if (*(int *)v63 < 3) {
          goto LABEL_50;
        }
LABEL_49:
        *(void *)&v63[4] = -1;
LABEL_50:
        if (*(void *)&v63[52])
        {
          uint64_t v36 = *(void *)(*(void *)&v63[52] + 24);
          *(void *)&v63[12] = v36;
          *(void *)&v63[20] = v36;
          if (v36) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v36 = *(void *)&v63[12];
          if (*(void *)&v63[12])
          {
LABEL_52:
            uint64_t v37 = *v64;
            uint64_t v38 = *(void *)&v63[20] + *(void *)v65 * v37;
            *(void *)&v63[36] = v38;
            if ((int)v37 < 1)
            {
              *(void *)&v63[28] = v38;
            }
            else
            {
              uint64_t v39 = (*(_DWORD *)v63 - 1);
              uint64_t v40 = v36 + *((void *)v65 + (int)v39) * v64[(int)v39];
              *(void *)&v63[28] = v40;
              if (*(int *)v63 >= 2)
              {
                do
                {
                  uint64_t v41 = *v28++;
                  uint64_t v42 = v41 - 1;
                  uint64_t v43 = *v31++;
                  v40 += v43 * v42;
                  --v39;
                }
                while (v39);
                *(void *)&v63[28] = v40;
              }
            }
            goto LABEL_59;
          }
        }
        *(void *)&v63[28] = 0;
        *(void *)&v63[36] = 0;
LABEL_59:
        v73[0] = (uint64_t)v67;
        v73[1] = (uint64_t)&v62;
        v71 = 0;
        v72 = 0;
        uint64_t v61 = 0;
        memset(v56, 0, sizeof(v56));
        int v57 = 0;
        unint64_t v58 = 0;
        size_t __n = 0;
        int v60 = 0;
        sub_1002A0C58((uint64_t)v56, v73, 0, (uint64_t)&v71, 2);
        if (v58)
        {
          unint64_t v44 = 0;
          size_t v45 = __n;
          do
          {
            memcpy(v72, v71, v45);
            ++v44;
            sub_1002912C8((uint64_t)v56);
          }
          while (v44 < v58);
        }
        if (*(void *)&v63[52])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v63[52] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v46 = *(void *)&v63[52];
            if (*(void *)&v63[52])
            {
              *(void *)&v63[52] = 0;
              uint64_t v47 = *(void *)(v46 + 8);
              if (!v47)
              {
                uint64_t v47 = *(void *)&v63[44];
                if (!*(void *)&v63[44]) {
                  uint64_t v47 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 48))(v47, v46);
            }
          }
        }
        *(void *)&v63[52] = 0;
        memset(&v63[12], 0, 32);
        if (*(int *)v63 >= 1)
        {
          uint64_t v48 = 0;
          v49 = v64;
          do
            v49[v48++] = 0;
          while (v48 < *(int *)v63);
        }
        if (v65 != v66) {
          j__free(v65);
        }
        if (*(void *)&v67[56])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v67[56] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v50 = *(void *)&v67[56];
            if (*(void *)&v67[56])
            {
              *(void *)&v67[56] = 0;
              uint64_t v51 = *(void *)(v50 + 8);
              if (!v51)
              {
                uint64_t v51 = *(void *)&v67[48];
                if (!*(void *)&v67[48]) {
                  uint64_t v51 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 48))(v51, v50);
            }
          }
        }
        *(void *)&v67[56] = 0;
        memset(&v67[16], 0, 32);
        if (*(int *)&v67[4] >= 1)
        {
          uint64_t v52 = 0;
          v53 = v68;
          do
            v53[v52++] = 0;
          while (v52 < *(int *)&v67[4]);
        }
        if (v69 != v70) {
          j__free(v69);
        }
        return;
      }
    }
    *(void *)&v67[32] = 0;
    *(void *)&v67[40] = 0;
    goto LABEL_36;
  }
  uint64_t v9 = 0;
  while (1)
  {
    unint64_t v11 = *(void *)(a5 + 8 * v9);
    if (v11 >> 31)
    {
      *(void *)v67 = 0;
      *(void *)&v67[8] = 0;
      qmemcpy((void *)sub_1002D19D8(v67, 27), "sz[i] <= (size_t)2147483647", 27);
      sub_1002D2278(-215, (uint64_t *)v67, "upload", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 108);
    }
    if (!v11) {
      break;
    }
    if (a6)
    {
      if (v9 <= a4 - 2) {
        uint64_t v10 = *(void *)(a7 + 8 * v9);
      }
      else {
        uint64_t v10 = 1;
      }
      v8 += v10 * *(void *)(a6 + 8 * v9);
    }
    v74[v9++] = v11;
    if (a4 == v9) {
      goto LABEL_13;
    }
  }
}

void sub_100291AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100291B40(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D6AE8(v83, &off_100495D30);
  if (!a2 || !a3) {
    goto LABEL_92;
  }
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a3 + 24);
  int v66 = a4;
  if (a4 < 1)
  {
LABEL_19:
    memset(&v79[20], 0, 44);
    *(_OWORD *)&v79[4] = 0u;
    v80 = (int *)&v79[8];
    v81 = v82;
    v82[0] = 0;
    v82[1] = 0;
    *(_DWORD *)v79 = 1124007936;
    *(void *)&v79[16] = v15;
    *(void *)&v79[24] = v15;
    sub_100292BB8((uint64_t)v79, v66, (uint64_t)v88, a7, 1);
    uint64_t v24 = v80;
    if (*(int *)&v79[4] < 1)
    {
      int v26 = 0;
    }
    else
    {
      uint64_t v25 = 0;
      while (v80[v25] <= 1)
      {
        if (*(unsigned int *)&v79[4] == ++v25)
        {
          int v26 = *(_DWORD *)&v79[4];
          goto LABEL_26;
        }
      }
      int v26 = v25;
    }
LABEL_26:
    uint64_t v27 = (uint64_t *)v81;
    uint64_t v28 = *(int *)&v79[4] - 1;
    uint64_t v29 = (char *)v81 + 8 * *(int *)&v79[4] - 8;
    while (v28 > v26)
    {
      unint64_t v30 = *v29 * v80[v28];
      unint64_t v31 = *--v29;
      --v28;
      if (v30 < v31)
      {
        *(_DWORD *)v79 &= ~0x4000u;
        if (*(int *)&v79[4] < 3) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    *(_DWORD *)v79 = *(_DWORD *)v79 & 0xFFFFBFFF | 0x4000;
    if (*(int *)&v79[4] < 3) {
      goto LABEL_33;
    }
LABEL_32:
    *(void *)&v79[8] = -1;
LABEL_33:
    if (*(void *)&v79[56])
    {
      uint64_t v32 = *(void *)(*(void *)&v79[56] + 24);
      *(void *)&v79[16] = v32;
      *(void *)&v79[24] = v32;
      if (v32) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v32 = *(void *)&v79[16];
      if (*(void *)&v79[16])
      {
LABEL_35:
        uint64_t v33 = *v80;
        uint64_t v34 = *(void *)&v79[24] + *(void *)v81 * v33;
        *(void *)&v79[40] = v34;
        if ((int)v33 < 1)
        {
          *(void *)&v79[32] = v34;
        }
        else
        {
          uint64_t v35 = (*(_DWORD *)&v79[4] - 1);
          uint64_t v36 = v32 + *((void *)v81 + (int)v35) * v80[(int)v35];
          *(void *)&v79[32] = v36;
          if (*(int *)&v79[4] >= 2)
          {
            do
            {
              uint64_t v37 = *v24++;
              uint64_t v38 = v37 - 1;
              uint64_t v39 = *v27++;
              v36 += v39 * v38;
              --v35;
            }
            while (v35);
            *(void *)&v79[32] = v36;
          }
        }
LABEL_42:
        memset(&v75[28], 0, 32);
        *(_OWORD *)v75 = 0u;
        v76 = (int *)&v75[4];
        v77 = v78;
        v78[0] = 0;
        v78[1] = 0;
        unsigned int v74 = 1124007936;
        *(void *)&v75[12] = v16;
        *(void *)&v75[20] = v16;
        sub_100292BB8((uint64_t)&v74, v66, (uint64_t)v88, a9, 1);
        uint64_t v40 = v76;
        if (*(int *)v75 < 1)
        {
          int v42 = 0;
        }
        else
        {
          uint64_t v41 = 0;
          while (v76[v41] <= 1)
          {
            if (*(unsigned int *)v75 == ++v41)
            {
              int v42 = *(_DWORD *)v75;
              goto LABEL_49;
            }
          }
          int v42 = v41;
        }
LABEL_49:
        uint64_t v43 = (uint64_t *)v77;
        uint64_t v44 = *(int *)v75 - 1;
        size_t v45 = (char *)v77 + 8 * *(int *)v75 - 8;
        while (v44 > v42)
        {
          unint64_t v46 = *v45 * v76[v44];
          unint64_t v47 = *--v45;
          --v44;
          if (v46 < v47)
          {
            v74 &= ~0x4000u;
            if (*(int *)v75 < 3) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
        }
        unsigned int v74 = v74 & 0xFFFFBFFF | 0x4000;
        if (*(int *)v75 < 3) {
          goto LABEL_56;
        }
LABEL_55:
        *(void *)&v75[4] = -1;
LABEL_56:
        if (*(void *)&v75[52])
        {
          uint64_t v48 = *(void *)(*(void *)&v75[52] + 24);
          *(void *)&v75[12] = v48;
          *(void *)&v75[20] = v48;
          if (v48) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v48 = *(void *)&v75[12];
          if (*(void *)&v75[12])
          {
LABEL_58:
            uint64_t v49 = *v76;
            uint64_t v50 = *(void *)&v75[20] + *(void *)v77 * v49;
            *(void *)&v75[36] = v50;
            if ((int)v49 < 1)
            {
              *(void *)&v75[28] = v50;
            }
            else
            {
              uint64_t v51 = (*(_DWORD *)v75 - 1);
              uint64_t v52 = v48 + *((void *)v77 + (int)v51) * v76[(int)v51];
              *(void *)&v75[28] = v52;
              if (*(int *)v75 >= 2)
              {
                do
                {
                  uint64_t v53 = *v40++;
                  uint64_t v54 = v53 - 1;
                  uint64_t v55 = *v43++;
                  v52 += v55 * v54;
                  --v51;
                }
                while (v51);
                *(void *)&v75[28] = v52;
              }
            }
            goto LABEL_65;
          }
        }
        *(void *)&v75[28] = 0;
        *(void *)&v75[36] = 0;
LABEL_65:
        v87[0] = (uint64_t)v79;
        v87[1] = (uint64_t)&v74;
        v85 = 0;
        v86 = 0;
        uint64_t v73 = 0;
        memset(v68, 0, sizeof(v68));
        int v69 = 0;
        unint64_t v70 = 0;
        size_t __n = 0;
        int v72 = 0;
        sub_1002A0C58((uint64_t)v68, v87, 0, (uint64_t)&v85, 2);
        if (v70)
        {
          unint64_t v56 = 0;
          size_t v57 = __n;
          do
          {
            memcpy(v86, v85, v57);
            ++v56;
            sub_1002912C8((uint64_t)v68);
          }
          while (v56 < v70);
        }
        if (*(void *)&v75[52])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v75[52] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v58 = *(void *)&v75[52];
            if (*(void *)&v75[52])
            {
              *(void *)&v75[52] = 0;
              uint64_t v59 = *(void *)(v58 + 8);
              if (!v59)
              {
                uint64_t v59 = *(void *)&v75[44];
                if (!*(void *)&v75[44]) {
                  uint64_t v59 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 48))(v59, v58);
            }
          }
        }
        *(void *)&v75[52] = 0;
        memset(&v75[12], 0, 32);
        if (*(int *)v75 >= 1)
        {
          uint64_t v60 = 0;
          uint64_t v61 = v76;
          do
            v61[v60++] = 0;
          while (v60 < *(int *)v75);
        }
        if (v77 != v78) {
          j__free(v77);
        }
        if (*(void *)&v79[56])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v79[56] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v62 = *(void *)&v79[56];
            if (*(void *)&v79[56])
            {
              *(void *)&v79[56] = 0;
              uint64_t v63 = *(void *)(v62 + 8);
              if (!v63)
              {
                uint64_t v63 = *(void *)&v79[48];
                if (!*(void *)&v79[48]) {
                  uint64_t v63 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v63 + 48))(v63, v62);
            }
          }
        }
        *(void *)&v79[56] = 0;
        memset(&v79[16], 0, 32);
        if (*(int *)&v79[4] >= 1)
        {
          uint64_t v64 = 0;
          v65 = v80;
          do
            v65[v64++] = 0;
          while (v64 < *(int *)&v79[4]);
        }
        if (v81 != v82) {
          j__free(v81);
        }
        goto LABEL_92;
      }
    }
    *(void *)&v79[32] = 0;
    *(void *)&v79[40] = 0;
    goto LABEL_42;
  }
  unsigned int v17 = a4;
  uint64_t v18 = 0;
  uint64_t v19 = a4 - 2;
  uint64_t v20 = v17;
  while (1)
  {
    unint64_t v22 = *(void *)(a5 + 8 * v18);
    if (v22 >> 31)
    {
      *(void *)v79 = 0;
      *(void *)&v79[8] = 0;
      qmemcpy((void *)sub_1002D19D8(v79, 27), "sz[i] <= (size_t)2147483647", 27);
      sub_1002D2278(-215, (uint64_t *)v79, "copy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 141);
    }
    if (!v22) {
      break;
    }
    if (a6)
    {
      if (v18 <= v19) {
        uint64_t v23 = *(void *)(a7 + 8 * v18);
      }
      else {
        uint64_t v23 = 1;
      }
      v15 += v23 * *(void *)(a6 + 8 * v18);
    }
    if (a8)
    {
      if (v18 <= v19) {
        uint64_t v21 = *(void *)(a9 + 8 * v18);
      }
      else {
        uint64_t v21 = 1;
      }
      v16 += v21 * *(void *)(a8 + 8 * v18);
    }
    v88[v18++] = v22;
    if (v20 == v18) {
      goto LABEL_19;
    }
  }
LABEL_92:
  if (v84) {
    sub_1002D6888(v83);
  }
}

void sub_1002921D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10000B6A8(exception_object);
}

uint64_t *sub_100292264()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0A48, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_1004E0A48))
  {
    return &qword_1004E0A40;
  }
  qword_1004E0A40 = (uint64_t)off_100496000;
  __cxa_atexit((void (*)(void *))nullsub_15, &qword_1004E0A40, (void *)&_mh_execute_header);
  __cxa_guard_release(&qword_1004E0A48);
  return &qword_1004E0A40;
}

uint64_t sub_10029230C()
{
  if (!qword_1004E09F8)
  {
    v0 = (pthread_mutex_t **)sub_1002D1A44();
    sub_1002D2EC4(v0);
    if (!qword_1004E09F8) {
      qword_1004E09F8 = sub_100292378();
    }
    sub_1002D2ECC(v0);
  }
  return qword_1004E09F8;
}

void sub_10029235C(_Unwind_Exception *a1)
{
  sub_1002D2ECC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100292378()
{
  if (!qword_1004E0A00)
  {
    v0 = (pthread_mutex_t **)sub_1002D1A44();
    sub_1002D2EC4(v0);
    if (!qword_1004E0A00) {
      operator new();
    }
    sub_1002D2ECC(v0);
  }
  return qword_1004E0A00;
}

void sub_1002923F8(_Unwind_Exception *a1)
{
  sub_1002D2ECC(v1);
  _Unwind_Resume(a1);
}

int *sub_100292414(int *result, int *a2)
{
  int v2 = *result;
  *result = *a2;
  *a2 = v2;
  int v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  int v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  int v5 = result[3];
  result[3] = a2[3];
  a2[3] = v5;
  uint64_t v6 = *((void *)result + 2);
  *((void *)result + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)result + 3);
  *((void *)result + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)result + 4);
  *((void *)result + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)result + 5);
  *((void *)result + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)result + 6);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  uint64_t v11 = *((void *)result + 7);
  *((void *)result + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  uint64_t v12 = *((void *)result + 8);
  *((void *)result + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = (int *)*((void *)result + 9);
  *((void *)result + 9) = *((void *)a2 + 9);
  int v14 = result + 20;
  uint64_t v15 = *((void *)result + 10);
  *((void *)a2 + 9) = v13;
  *((void *)result + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v15;
  uint64_t v16 = *((void *)result + 11);
  *((void *)result + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v16;
  if (*((int **)result + 9) != a2 + 20)
  {
    if (v13 != v14) {
      return result;
    }
LABEL_5:
    *((void *)a2 + 8) = a2 + 2;
    *((void *)a2 + 9) = a2 + 20;
    return result;
  }
  *((void *)result + 8) = result + 2;
  *((void *)result + 9) = v14;
  if (*((int **)a2 + 9) == v14) {
    goto LABEL_5;
  }
  return result;
}

char *sub_100292534(char *result, int a2, uint64_t *__src, __int16 a4)
{
  int v4 = __src;
  uint64_t v6 = (uint64_t)result;
  if (a2 > 0x20 || !__src)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    qmemcpy((void *)sub_1002D19D8(__dst, 27), "0 <= d && d <= 32 && _sizes", 27);
    sub_1002D2278(-215, __dst, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 390);
  }
  uint64_t v7 = a4 & 0xFFF;
  if (!*((void *)result + 2)) {
    goto LABEL_25;
  }
  int v8 = *((_DWORD *)result + 1);
  if (v8 == a2)
  {
    if (v7 != (*(_DWORD *)result & 0xFFF)) {
      goto LABEL_25;
    }
    if (a2 == 2)
    {
      if (*((_DWORD *)result + 2) == *(_DWORD *)__src && *((_DWORD *)result + 3) == *((_DWORD *)__src + 1)) {
        return result;
      }
    }
    else if (a2 < 1)
    {
      LODWORD(v10) = 0;
      goto LABEL_22;
    }
  }
  else
  {
    if (a2 != 1 || v8 >= 3) {
      goto LABEL_25;
    }
    if (v7 != (*(_DWORD *)result & 0xFFF))
    {
      uint64_t v9 = result + 64;
      if (*((uint64_t **)result + 8) != __src) {
        goto LABEL_26;
      }
LABEL_29:
      result = (char *)memcpy(__dst, __src, 4 * a2);
      goto LABEL_30;
    }
  }
  uint64_t v10 = 0;
  while (*(_DWORD *)(*((void *)result + 8) + 4 * v10) == *((_DWORD *)__src + v10))
  {
    if (a2 == ++v10) {
      goto LABEL_23;
    }
  }
LABEL_22:
  if (v10 == a2)
  {
LABEL_23:
    if (a2 > 1 || *(_DWORD *)(*((void *)result + 8) + 4) == 1) {
      return result;
    }
  }
LABEL_25:
  uint64_t v9 = result + 64;
  if (*((uint64_t **)result + 8) != __src)
  {
LABEL_26:
    uint64_t v11 = *((void *)result + 7);
    if (!v11) {
      goto LABEL_37;
    }
LABEL_31:
    if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v12 = *(void *)(v6 + 56);
      if (v12)
      {
        *(void *)(v6 + 56) = 0;
        uint64_t v13 = *(void *)(v12 + 8);
        if (!v13)
        {
          uint64_t v13 = *(void *)(v6 + 48);
          if (!v13) {
            uint64_t v13 = sub_10029230C();
          }
        }
        result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, v12);
      }
    }
    goto LABEL_37;
  }
  if (a2 >= 1) {
    goto LABEL_29;
  }
LABEL_30:
  int v4 = __dst;
  uint64_t v11 = *(void *)(v6 + 56);
  if (v11) {
    goto LABEL_31;
  }
LABEL_37:
  *(void *)(v6 + 56) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  if (*(int *)(v6 + 4) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *v9;
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(v6 + 4));
  }
  if (a2)
  {
    *(_DWORD *)uint64_t v6 = v7 | 0x42FF0000;
    sub_1002A7B6C(v6, a2, (uint64_t)v4, 1);
    uint64_t v16 = *(unsigned int *)(v6 + 4);
    if ((int)v16 >= 3)
    {
      uint64_t v18 = (int *)(*v9 + 4);
      uint64_t v19 = 1;
      uint64_t v20 = v16 & 0xFFFFFFFE;
      uint64_t v21 = 1;
      do
      {
        v19 *= *(v18 - 1);
        v21 *= *v18;
        v18 += 2;
        v20 -= 2;
      }
      while (v20);
      uint64_t v17 = v21 * v19;
      uint64_t v22 = v16 - (v16 & 0xFFFFFFFE);
      if (v22)
      {
        uint64_t v23 = (int *)(*v9 + ((4 * v16) & 0x3FFFFFFF8));
        do
        {
          uint64_t v24 = *v23++;
          v17 *= v24;
          --v22;
        }
        while (v22);
      }
    }
    else
    {
      uint64_t v17 = *(int *)(v6 + 12) * (uint64_t)*(int *)(v6 + 8);
    }
    if (v17)
    {
      uint64_t v25 = *(void *)(v6 + 48);
      uint64_t v26 = sub_10029230C();
      if (v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v26;
      }
      uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void, void, void, void))(*(void *)v27 + 16))(v27, *(unsigned int *)(v6 + 4), *(void *)(v6 + 64), v7, 0, *(void *)(v6 + 72), 0, 0);
      *(void *)(v6 + 56) = v28;
      if (!v28)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v29 = sub_1002D19D8(&v31, 6);
        *(_WORD *)(v29 + 4) = 12320;
        *(_DWORD *)uint64_t v29 = 1025581173;
        sub_1002D2278(-215, &v31, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 430);
      }
      if (*(void *)(*(void *)(v6 + 72) + 8 * *(int *)(v6 + 4) - 8) != (((*(_DWORD *)v6 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)v6 & 7))) & 3))
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        qmemcpy((void *)sub_1002D19D8(&v31, 146), "step[dims-1] == (size_t)(((((flags) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((flags) & ((1 << 3) - 1))*2) & 3))", 146);
        sub_1002D2278(-215, &v31, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 438);
      }
    }
    uint64_t v30 = *(void *)(v6 + 56);
    if (v30) {
      atomic_fetch_add((atomic_uint *volatile)(v30 + 20), 1u);
    }
    return (char *)sub_100293064(v6);
  }
  return result;
}

void sub_1002929C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100292B00(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 56);
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v3 = *(void *)(result + 56);
      if (v3)
      {
        *(void *)(result + 56) = 0;
        uint64_t v4 = *(void *)(v3 + 8);
        if (!v4)
        {
          uint64_t v4 = *(void *)(v1 + 48);
          if (!v4) {
            uint64_t v4 = sub_10029230C();
          }
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v3);
      }
    }
  }
  *(void *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  if (*(int *)(v1 + 4) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v1 + 64);
    do
      *(_DWORD *)(v6 + 4 * v5++) = 0;
    while (v5 < *(int *)(v1 + 4));
  }
  return result;
}

void sub_100292BB8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a2 >= 0x21)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    qmemcpy((void *)sub_1002D19D8(&v32, 25), "0 <= _dims && _dims <= 32", 25);
    sub_1002D2278(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 284);
  }
  if (*(_DWORD *)(a1 + 4) != a2)
  {
    uint64_t v10 = *(void **)(a1 + 72);
    if (v10 != (void *)(a1 + 80))
    {
      j__free(v10);
      *(void *)(a1 + 64) = a1 + 8;
      *(void *)(a1 + 72) = a1 + 80;
    }
    if (a2 >= 3)
    {
      uint64_t v11 = 8 * a2;
      uint64_t v12 = (char *)sub_10020FDF8(v11 + 4 * (a2 + 1));
      *(void *)(a1 + 72) = v12;
      *(_DWORD *)&v12[v11] = a2;
      *(void *)(a1 + 64) = &v12[v11 + 4];
      *(void *)(a1 + 8) = -1;
    }
  }
  *(_DWORD *)(a1 + 4) = a2;
  if (a3)
  {
    uint64_t v13 = (a2 - 1);
    if (a2 >= 1)
    {
      int v14 = *(_DWORD *)a1 & 7;
      int v30 = a2;
      uint64_t v31 = (((*(_DWORD *)a1 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * v14)) & 3);
      if (a4)
      {
        int v15 = *(_DWORD *)(a3 + 4 * v13);
        if (v15 < 0)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          uint64_t v16 = sub_1002D19D8(&v32, 6);
          *(_DWORD *)uint64_t v16 = 1027481715;
          *(_WORD *)(v16 + 4) = 12320;
          sub_1002D2278(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
        }
        unint64_t v17 = (0x88442211uLL >> (4 * v14)) & 0xF;
        *(_DWORD *)(*(void *)(a1 + 64) + 4 * v13) = v15;
        if (*(void *)(a4 + 8 * v13) % v17)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          qmemcpy((void *)sub_1002D19D8(&v32, 31), "Step must be a multiple of esz1", 31);
          sub_1002D2278(-13, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 317);
        }
        *(void *)(*(void *)(a1 + 72) + 8 * v13) = v31;
        if (a2 != 1)
        {
          uint64_t v18 = a4 - 8;
          uint64_t v19 = (a2 - 1);
          do
          {
            int v21 = *(_DWORD *)(a3 - 4 + 4 * v19);
            if (v21 < 0)
            {
              uint64_t v32 = 0;
              uint64_t v33 = 0;
              uint64_t v22 = sub_1002D19D8(&v32, 6);
              *(_DWORD *)uint64_t v22 = 1027481715;
              *(_WORD *)(v22 + 4) = 12320;
              sub_1002D2278(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
            }
            *(_DWORD *)(*(void *)(a1 + 64) + 4 * v19 - 4) = v21;
            if (*(void *)(v18 + 8 * v19) % v17)
            {
              uint64_t v32 = 0;
              uint64_t v33 = 0;
              qmemcpy((void *)sub_1002D19D8(&v32, 31), "Step must be a multiple of esz1", 31);
              sub_1002D2278(-13, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 317);
            }
            uint64_t v23 = v31;
            if (v19 <= v13) {
              uint64_t v23 = *(void *)(v18 + 8 * v19);
            }
            uint64_t v20 = *(void *)(a1 + 72) + 8 * v19--;
            *(void *)(v20 - 8) = v23;
          }
          while (v19 + 1 > 1);
        }
      }
      else if (a5)
      {
        uint64_t v24 = (((*(_DWORD *)a1 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * v14)) & 3);
        do
        {
          int v26 = *(_DWORD *)(a3 + 4 * v13);
          if (v26 < 0)
          {
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v27 = sub_1002D19D8(&v32, 6);
            *(_DWORD *)uint64_t v27 = 1027481715;
            *(_WORD *)(v27 + 4) = 12320;
            sub_1002D2278(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
          }
          *(_DWORD *)(*(void *)(a1 + 64) + 4 * v13) = v26;
          *(void *)(*(void *)(a1 + 72) + 8 * v13) = v24;
          v24 *= v26;
          BOOL v25 = v13-- <= 0;
        }
        while (!v25);
      }
      else
      {
        do
        {
          int v28 = *(_DWORD *)(a3 + 4 * v13);
          if (v28 < 0)
          {
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            uint64_t v29 = sub_1002D19D8(&v32, 6);
            *(_DWORD *)uint64_t v29 = 1027481715;
            *(_WORD *)(v29 + 4) = 12320;
            sub_1002D2278(-215, &v32, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
          }
          *(_DWORD *)(*(void *)(a1 + 64) + 4 * v13) = v28;
          BOOL v25 = v13-- <= 0;
        }
        while (!v25);
      }
      if (v30 == 1)
      {
        *(_DWORD *)(a1 + 4) = 2;
        *(_DWORD *)(a1 + 12) = 1;
        *(void *)(*(void *)(a1 + 72) + 8) = v31;
      }
    }
  }
}

void sub_100292FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100293064(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 4);
  uint64_t v2 = *(int **)(result + 64);
  if ((int)v1 < 1)
  {
    int v4 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    while (v2[v3] <= 1)
    {
      if (v1 == ++v3)
      {
        int v4 = *(_DWORD *)(result + 4);
        goto LABEL_8;
      }
    }
    int v4 = v3;
  }
LABEL_8:
  uint64_t v5 = *(uint64_t **)(result + 72);
  uint64_t v6 = (int)v1 - 1;
  uint64_t v7 = &v5[(int)v1 - 1];
  while (v6 > v4)
  {
    unint64_t v8 = *v7 * v2[v6];
    unint64_t v9 = *--v7;
    --v6;
    if (v8 < v9)
    {
      *(_DWORD *)result &= ~0x4000u;
      if ((int)v1 < 3) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFBFFF | 0x4000;
  if ((int)v1 < 3) {
    goto LABEL_15;
  }
LABEL_14:
  *(void *)(result + 8) = -1;
LABEL_15:
  uint64_t v10 = *(void *)(result + 56);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 24);
    *(void *)(result + 16) = v11;
    *(void *)(result + 24) = v11;
    if (v11) {
      goto LABEL_17;
    }
LABEL_22:
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    return result;
  }
  uint64_t v11 = *(void *)(result + 16);
  if (!v11) {
    goto LABEL_22;
  }
LABEL_17:
  uint64_t v12 = *v2;
  uint64_t v13 = *(void *)(result + 24) + *v5 * v12;
  *(void *)(result + 40) = v13;
  if ((int)v12 < 1)
  {
    *(void *)(result + 32) = v13;
  }
  else
  {
    uint64_t v14 = (v1 - 1);
    uint64_t v15 = v11 + v5[(int)v14] * v2[(int)v14];
    *(void *)(result + 32) = v15;
    if ((int)v1 >= 2)
    {
      do
      {
        uint64_t v16 = *v2++;
        uint64_t v17 = v16 - 1;
        uint64_t v18 = *v5++;
        v15 += v18 * v17;
        --v14;
      }
      while (v14);
      *(void *)(result + 32) = v15;
    }
  }
  return result;
}

void sub_1002931A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 4);
  if (v4 >= 0x21)
  {
    v12[0] = 0;
    v12[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v12, 25), "0 <= _dims && _dims <= 32", 25);
    sub_1002D2278(-215, v12, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 284);
  }
  if (*(_DWORD *)(a1 + 4) == v4) {
    goto LABEL_8;
  }
  uint64_t v5 = *(void **)(a1 + 72);
  if (v5 != (void *)(a1 + 80))
  {
    j__free(v5);
    *(void *)(a1 + 64) = a1 + 8;
    *(void *)(a1 + 72) = a1 + 80;
  }
  if ((int)v4 < 3)
  {
LABEL_8:
    *(_DWORD *)(a1 + 4) = v4;
    if ((int)v4 < 1) {
      return;
    }
  }
  else
  {
    uint64_t v6 = sub_10020FDF8(12 * v4 + 4);
    *(void *)(a1 + 72) = v6;
    v6[2 * v4] = v4;
    *(void *)(a1 + 64) = &v6[2 * v4 + 1];
    *(void *)(a1 + 8) = -1;
    *(_DWORD *)(a1 + 4) = v4;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  do
  {
    *(_DWORD *)(v10 + 4 * v7) = *(_DWORD *)(v8 + 4 * v7);
    *(void *)(v11 + 8 * v7) = *(void *)(v9 + 8 * v7);
    ++v7;
  }
  while (v7 < *(int *)(a1 + 4));
}

void sub_1002932DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002932F4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if (v1)
  {
    uint64_t v2 = result;
    *(void *)(result + 56) = 0;
    uint64_t v3 = *(void *)(v1 + 8);
    if (!v3)
    {
      uint64_t v3 = *(void *)(v2 + 48);
      if (!v3) {
        uint64_t v3 = sub_10029230C();
      }
    }
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v4();
  }
  return result;
}

uint64_t sub_100293374(uint64_t a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 4) = 0u;
  uint64_t v8 = (int *)(a1 + 4);
  uint64_t v9 = (_DWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 20) = 0u;
  *(void *)(a1 + 64) = a1 + 8;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  int v10 = a2[1];
  if (v10 < 2)
  {
    size_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v11 = sub_1002D19D8(&v45, 11);
    *(_DWORD *)(v11 + 7) = 840973630;
    *(void *)uint64_t v11 = *(void *)"m.dims >= 2";
    sub_1002D2278(-215, (uint64_t *)&v45, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 474);
  }
  if (v10 > 2)
  {
    bzero(v47, 0x440uLL);
    size_t v45 = v47;
    uint64_t v46 = v10;
    if (v10 > 0x88) {
      operator new[]();
    }
    uint64_t v17 = *a4;
    v47[0] = *(void *)a3;
    v47[1] = v17;
    uint64_t v18 = 2;
    do
      v45[v18++] = 0x7FFFFFFF80000000;
    while (v18 < (int)a2[1]);
    sub_100293AD4((uint64_t)v36, (uint64_t)a2, (uint64_t)v45);
    sub_100287094(a1, (uint64_t)v36);
    if (v41)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v41 + 20), 0xFFFFFFFF) == 1)
      {
        uint64_t v19 = v41;
        if (v41)
        {
          uint64_t v41 = 0;
          uint64_t v20 = *(void *)(v19 + 8);
          if (!v20)
          {
            uint64_t v20 = v40;
            if (!v40) {
              uint64_t v20 = sub_10029230C();
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v19);
        }
      }
    }
    uint64_t v41 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    if (v37 >= 1)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v42;
      do
        *(_DWORD *)(v22 + 4 * v21++) = 0;
      while (v21 < v37);
    }
    if (v43 != &v44) {
      j__free(v43);
    }
    if (v45 != v47 && v45 != 0) {
      operator delete[]();
    }
    return a1;
  }
  sub_100293970(a1, (uint64_t)a2);
  int v12 = *a3;
  int v13 = a3[1];
  if ((*a3 != 0x80000000 || v13 != 0x7FFFFFFF) && (v12 || v13 != *v9))
  {
    if (v12 < 0 || v12 > v13 || v13 > a2[2])
    {
      size_t v45 = 0;
      uint64_t v46 = 0;
      qmemcpy((void *)sub_1002D19D8(&v45, 83), "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", 83);
      sub_1002D2278(-215, (uint64_t *)&v45, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 492);
    }
    *(_DWORD *)(a1 + 8) = v13 - v12;
    *(void *)(a1 + 16) += *(void *)(a1 + 80) * v12;
    *(_DWORD *)a1 |= 0x8000u;
  }
  int v14 = *(_DWORD *)a4;
  int v15 = *((_DWORD *)a4 + 1);
  if (*(_DWORD *)a4 == 0x80000000 && v15 == 0x7FFFFFFF || !v14 && v15 == *(_DWORD *)(a1 + 12))
  {
    BOOL v16 = *v9 < 1;
    if (*v9 == 1)
    {
LABEL_20:
      *(_DWORD *)a1 |= 0x4000u;
      goto LABEL_52;
    }
  }
  else
  {
    if (v14 < 0 || v14 > v15 || v15 > a2[3])
    {
      size_t v45 = 0;
      uint64_t v46 = 0;
      qmemcpy((void *)sub_1002D19D8(&v45, 83), "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", 83);
      sub_1002D2278(-215, (uint64_t *)&v45, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 501);
    }
    int v24 = v15 - v14;
    *(_DWORD *)(a1 + 12) = v24;
    int v25 = *(_DWORD *)(a1 + 4);
    BOOL v26 = __OFSUB__(v25, 1);
    int v27 = v25 - 1;
    if (v27 < 0 != v26) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *(void *)(*(void *)(a1 + 72) + 8 * v27);
    }
    *(void *)(a1 + 16) += v28 * v14;
    if (v24 >= a2[3]) {
      int v29 = -32769;
    }
    else {
      int v29 = -49153;
    }
    *(_DWORD *)a1 = v29 & *(_DWORD *)a1 | 0x8000;
    BOOL v16 = *v9 < 1;
    if (*v9 == 1) {
      goto LABEL_20;
    }
  }
  if (!v16)
  {
LABEL_52:
    if (*(int *)(a1 + 12) > 0) {
      return a1;
    }
  }
  uint64_t v30 = *(void *)(a1 + 56);
  if (v30)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v30 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v31 = *(void *)(a1 + 56);
      if (v31)
      {
        *(void *)(a1 + 56) = 0;
        uint64_t v32 = *(void *)(v31 + 8);
        if (!v32)
        {
          uint64_t v32 = *(void *)(a1 + 48);
          if (!v32) {
            uint64_t v32 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 48))(v32, v31);
      }
    }
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = *(void *)(a1 + 64);
    do
      *(_DWORD *)(v34 + 4 * v33++) = 0;
    while (v33 < *v8);
  }
  *(void *)uint64_t v9 = 0;
  return a1;
}

void sub_1002938B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1002D1A1C((uint64_t *)va);
  __cxa_begin_catch(a1);
  sub_100292B00(v13);
  __cxa_rethrow();
}

void sub_100293900(_Unwind_Exception *a1)
{
}

uint64_t sub_100293970(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    if (v4) {
      atomic_fetch_add((atomic_uint *volatile)(v4 + 20), 1u);
    }
    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v5 + 20), 0xFFFFFFFF) == 1)
      {
        uint64_t v6 = *(void *)(a1 + 56);
        if (v6)
        {
          *(void *)(a1 + 56) = 0;
          uint64_t v7 = *(void *)(v6 + 8);
          if (!v7)
          {
            uint64_t v7 = *(void *)(a1 + 48);
            if (!v7) {
              uint64_t v7 = sub_10029230C();
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v6);
        }
      }
    }
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) <= 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      int v11 = *(_DWORD *)(a2 + 4);
      if (v11 <= 2)
      {
LABEL_16:
        *(_DWORD *)(a1 + 4) = v11;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        int v12 = *(void **)(a2 + 72);
        uint64_t v13 = *(void **)(a1 + 72);
        void *v13 = *v12;
        v13[1] = v12[1];
LABEL_19:
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        return a1;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(a1 + 64);
      do
      {
        *(_DWORD *)(v9 + 4 * v8++) = 0;
        uint64_t v10 = *(int *)(a1 + 4);
      }
      while (v8 < v10);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      if ((int)v10 <= 2)
      {
        int v11 = *(_DWORD *)(a2 + 4);
        if (v11 <= 2) {
          goto LABEL_16;
        }
      }
    }
    sub_1002931A8(a1, a2);
    goto LABEL_19;
  }
  return a1;
}

uint64_t sub_100293AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 8;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 4);
  if (!a3)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v6 = sub_1002D19D8(&v28, 6);
    *(_DWORD *)uint64_t v6 = 1735287154;
    *(_WORD *)(v6 + 4) = 29541;
    sub_1002D2278(-215, &v28, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 582);
  }
  if ((int)v5 <= 0)
  {
    sub_100293970(a1, a2);
  }
  else
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      int v9 = *(_DWORD *)(a3 + 8 * i);
      int v8 = *(_DWORD *)(a3 + 8 * i + 4);
      BOOL v10 = v9 == 0x80000000 && v8 == 0x7FFFFFFF;
      if (!v10 && (v9 < 0 || v9 >= v8 || *(_DWORD *)(*(void *)(a2 + 64) + 4 * i) < v8))
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        qmemcpy((void *)sub_1002D19D8(&v28, 76), "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", 76);
        sub_1002D2278(-215, &v28, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 586);
      }
    }
    sub_100293970(a1, a2);
    for (uint64_t j = 0; j != v5; ++j)
    {
      uint64_t v12 = *(void *)(a3 + 8 * j);
      if (v12 != 0x80000000 || HIDWORD(v12) != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 64);
        if (v12) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = *(_DWORD *)(v14 + 4 * j) == HIDWORD(v12);
        }
        if (!v15)
        {
          *(_DWORD *)(v14 + 4 * j) = HIDWORD(v12) - v12;
          *(void *)(a1 + 16) += *(void *)(*(void *)(a1 + 72) + 8 * j) * (int)v12;
          *(_DWORD *)a1 |= 0x8000u;
        }
      }
    }
  }
  uint64_t v16 = *(unsigned int *)(a1 + 4);
  uint64_t v17 = (int)v16;
  uint64_t v18 = *(void *)(a1 + 64);
  if ((int)v16 < 1)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = 0;
    while (*(int *)(v18 + 4 * v19) <= 1)
    {
      if (v16 == ++v19)
      {
        LODWORD(v19) = *(_DWORD *)(a1 + 4);
        break;
      }
    }
  }
  uint64_t v20 = v18 - 4;
  while (1)
  {
    uint64_t v21 = v17 - 1;
    if (v17 - 1 <= (int)v19) {
      break;
    }
    uint64_t v22 = *(int *)(v20 + 4 * v17);
    uint64_t v23 = *(void *)(a1 + 72) + 8 * v17;
    unint64_t v24 = *(void *)(v23 - 16);
    unint64_t v25 = *(void *)(v23 - 8) * v22;
    uint64_t v17 = v21;
    if (v25 < v24)
    {
      int v26 = 0;
      goto LABEL_37;
    }
  }
  int v26 = 0x4000;
LABEL_37:
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFBFFF | v26;
  return a1;
}

void sub_100293D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100293DB4(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 4);
  if (v6 >= 3)
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v7 = sub_1002D19D8(v21, 9);
    *(unsigned char *)(v7 + 8) = 50;
    *(void *)uint64_t v7 = *(void *)"dims <= 2";
    sub_1002D2278(-215, v21, "diag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 750);
  }
  *(_DWORD *)a3 = *(_DWORD *)a1;
  *(_DWORD *)(a3 + 4) = v6;
  *(void *)(a3 + 8) = *(void *)(a1 + 8);
  long long v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 32) = v8;
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a3 + 48) = *(void *)(a1 + 48);
  *(void *)(a3 + 56) = v9;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 64) = a3 + 8;
  *(void *)(a3 + 72) = a3 + 80;
  *(void *)(a3 + 88) = 0;
  if (v9)
  {
    atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 1u);
    int v6 = *(_DWORD *)(a1 + 4);
  }
  if (v6 > 2)
  {
    *(_DWORD *)(a3 + 4) = 0;
    sub_1002931A8(a3, a1);
    int v17 = *(_DWORD *)(a1 + 4);
    BOOL v12 = __OFSUB__(v17, 1);
    int v13 = v17 - 1;
    if (v13 < 0 == v12) {
      goto LABEL_13;
    }
  }
  else
  {
    BOOL v10 = *(void **)(a1 + 72);
    int v11 = *(void **)(a3 + 72);
    void *v11 = *v10;
    v11[1] = v10[1];
    BOOL v12 = __OFSUB__(v6, 1);
    int v13 = v6 - 1;
    if (v13 < 0 == v12)
    {
LABEL_13:
      uint64_t v14 = *(void *)(*(void *)(a1 + 72) + 8 * v13);
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_9;
    }
  }
  uint64_t v14 = 0;
  if ((a2 & 0x80000000) == 0)
  {
LABEL_14:
    int v15 = *(_DWORD *)(a1 + 12) - a2;
    if (*(_DWORD *)(a1 + 8) < v15) {
      int v15 = *(_DWORD *)(a1 + 8);
    }
    uint64_t v16 = *(void *)(a3 + 16) + v14 * a2;
    goto LABEL_17;
  }
LABEL_9:
  int v15 = *(_DWORD *)(a1 + 8) + a2;
  if (*(_DWORD *)(a1 + 12) < v15) {
    int v15 = *(_DWORD *)(a1 + 12);
  }
  uint64_t v16 = *(void *)(a3 + 16) - **(void **)(a1 + 72) * (int)a2;
LABEL_17:
  *(void *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 8) = v15;
  uint64_t v18 = *(int **)(a3 + 64);
  int *v18 = v15;
  *(_DWORD *)(a3 + 12) = 1;
  v18[1] = 1;
  if (v15 <= 1) {
    uint64_t v14 = 0;
  }
  **(void **)(a3 + 72) += v14;
  unsigned int v19 = *(_DWORD *)a3 & 0xFFFFBFFF | ((*(_DWORD *)(a3 + 8) < 2) << 14);
  *(_DWORD *)a3 = v19;
  uint64_t v20 = *(_DWORD **)(a1 + 64);
  if (v20[1] != 1 || *v20 != 1) {
    *(_DWORD *)a3 = v19 | 0x8000;
  }
}

void sub_100293FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100293FD0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x80000000) != 0)
  {
    *(_OWORD *)long long v38 = 0uLL;
    *(_OWORD *)sub_1002D19D8(v38, 16) = *(_OWORD *)"(int)nelems >= 0";
    sub_1002D2278(-215, (uint64_t *)v38, "reserve", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 821);
  }
  if ((*(unsigned char *)(a1 + 1) & 0x80) != 0 || *(void *)(a1 + 16) + **(void **)(a1 + 72) * a2 > *(void *)(a1 + 40))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 64);
    int v5 = *(_DWORD *)v4;
    if (*(int *)v4 < a2)
    {
      if ((int)a2 <= 1) {
        int v6 = 1;
      }
      else {
        int v6 = a2;
      }
      *(_DWORD *)uint64_t v4 = v6;
      uint64_t v7 = *(unsigned int *)(a1 + 4);
      if ((int)v7 >= 3)
      {
        uint64_t v9 = (int *)v4 + 1;
        uint64_t v10 = 1;
        uint64_t v11 = v7 & 0xFFFFFFFE;
        uint64_t v12 = 1;
        do
        {
          v10 *= *(v9 - 1);
          v12 *= *v9;
          v9 += 2;
          v11 -= 2;
        }
        while (v11);
        uint64_t v8 = v12 * v10;
        uint64_t v13 = v7 - (v7 & 0xFFFFFFFE);
        if (v13)
        {
          uint64_t v14 = (int *)((char *)v4 + ((4 * v7) & 0x3FFFFFFF8));
          do
          {
            uint64_t v15 = *v14++;
            v8 *= v15;
            --v13;
          }
          while (v13);
        }
      }
      else
      {
        uint64_t v8 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
      }
      if ((int)v7 < 1)
      {
        unint64_t v16 = 0;
      }
      else
      {
        unint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8 * (v7 - 1)) * v8;
        if (v16 > 0x3F)
        {
LABEL_19:
          __int16 v17 = *(_DWORD *)a1 & 0xFFF;
          *(_DWORD *)long long v38 = 1124007936;
          memset(&v38[4], 0, 60);
          long long v39 = &v38[8];
          uint64_t v40 = v41;
          v41[0] = 0;
          v41[1] = 0;
          sub_100292534(v38, v7, v4, v17);
          **(_DWORD **)(a1 + 64) = v5;
          if (v5 >= 1)
          {
            v26[0] = 0;
            v26[1] = v5;
            uint64_t v42 = 0x7FFFFFFF80000000;
            sub_100293374((uint64_t)v29, v38, v26, &v42);
            v26[0] = 33619968;
            int v27 = v29;
            uint64_t v28 = 0;
            sub_10025401C(a1, (uint64_t)v26);
            if (v34)
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v34 + 20), 0xFFFFFFFF) == 1)
              {
                uint64_t v18 = v34;
                if (v34)
                {
                  uint64_t v34 = 0;
                  uint64_t v19 = *(void *)(v18 + 8);
                  if (!v19)
                  {
                    uint64_t v19 = v33;
                    if (!v33) {
                      uint64_t v19 = sub_10029230C();
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 48))(v19, v18);
                }
              }
            }
            uint64_t v34 = 0;
            long long v31 = 0u;
            long long v32 = 0u;
            if (v30 >= 1)
            {
              uint64_t v20 = 0;
              uint64_t v21 = v35;
              do
                *(_DWORD *)(v21 + 4 * v20++) = 0;
              while (v20 < v30);
            }
            if (v36 != &v37) {
              j__free(v36);
            }
          }
          sub_100293970(a1, (uint64_t)v38);
          **(_DWORD **)(a1 + 64) = v5;
          *(void *)(a1 + 32) = *(void *)(a1 + 16) + **(void **)(a1 + 72) * v5;
          if (*(void *)&v38[56])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v38[56] + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v22 = *(void *)&v38[56];
              if (*(void *)&v38[56])
              {
                *(void *)&v38[56] = 0;
                uint64_t v23 = *(void *)(v22 + 8);
                if (!v23)
                {
                  uint64_t v23 = *(void *)&v38[48];
                  if (!*(void *)&v38[48]) {
                    uint64_t v23 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 48))(v23, v22);
              }
            }
          }
          *(void *)&v38[56] = 0;
          memset(&v38[16], 0, 32);
          if (*(int *)&v38[4] >= 1)
          {
            uint64_t v24 = 0;
            unint64_t v25 = v39;
            do
              *(_DWORD *)&v25[4 * v24++] = 0;
            while (v24 < *(int *)&v38[4]);
          }
          if (v40 != v41) {
            j__free(v40);
          }
          return;
        }
      }
      *(_DWORD *)uint64_t v4 = (v16 + 63) * a2 / v16;
      LODWORD(v7) = *(_DWORD *)(a1 + 4);
      goto LABEL_19;
    }
  }
}

void sub_100294370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_1000094F4((uint64_t)va);
  sub_1000094F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002943A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1002D1A1C((uint64_t *)va);
  JUMPOUT(0x100294394);
}

void sub_1002943B4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  if (!a1) {
    goto LABEL_48;
  }
  unsigned int v8 = *(_DWORD *)a1;
  unsigned int v9 = *(_DWORD *)a1 & 0xFFFF0000;
  if (v9 != 1111687168)
  {
    if (v9 == 1111621632)
    {
      unsigned int v10 = *(_DWORD *)(a1 + 36);
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v11 = *(unsigned int *)(a1 + 32);
        if ((v11 & 0x80000000) == 0)
        {
          *(_DWORD *)a5 = 1124007936;
          *(_OWORD *)(a5 + 4) = 0u;
          *(_OWORD *)(a5 + 20) = 0u;
          *(_OWORD *)(a5 + 36) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(void *)(a5 + 80) = 0;
          *(void *)(a5 + 64) = a5 + 8;
          *(void *)(a5 + 72) = a5 + 80;
          *(void *)(a5 + 88) = 0;
          if (a2)
          {
            *(void *)(a5 + 16) = 0;
            *(void *)(a5 + 24) = 0;
            *(void *)(a5 + 32) = 0;
            sub_10000CE64((uint64_t)&__src, v11, v10, v8, *(void *)(a1 + 24), *(int *)(a1 + 4));
            LODWORD(v117) = 33619968;
            uint64_t v118 = a5;
            uint64_t v119 = 0;
            sub_10025401C((uint64_t)&__src, (uint64_t)&v117);
            if (v113)
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v113 + 20), 0xFFFFFFFF) == 1)
              {
                uint64_t v12 = v113;
                if (v113)
                {
                  uint64_t v113 = 0;
                  uint64_t v13 = *(void *)(v12 + 8);
                  if (!v13)
                  {
                    uint64_t v13 = v112;
                    if (!v112) {
                      uint64_t v13 = sub_10029230C();
                    }
                  }
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, v12);
                }
              }
            }
            uint64_t v113 = 0;
            long long v110 = 0u;
            long long v111 = 0u;
            if (SHIDWORD(__src) >= 1)
            {
              uint64_t v14 = 0;
              uint64_t v15 = v114;
              do
                *((_DWORD *)v15 + v14++) = 0;
              while (v14 < SHIDWORD(__src));
            }
            if (v115 != v116) {
              j__free(v115);
            }
          }
          else
          {
            *(_DWORD *)a5 = v8 & 0x4FFF | 0x42FF0000;
            *(_DWORD *)(a5 + 4) = 2;
            *(_DWORD *)(a5 + 8) = v11;
            *(_DWORD *)(a5 + 12) = v10;
            uint64_t v36 = *(void *)(a1 + 24);
            *(void *)(a5 + 16) = v36;
            *(void *)(a5 + 24) = v36;
            uint64_t v37 = (((v8 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3);
            unint64_t v38 = v10 * (unint64_t)v37;
            if (*(_DWORD *)(a1 + 4)) {
              unint64_t v38 = *(int *)(a1 + 4);
            }
            uint64_t v39 = v36 + v38 * v11;
            *(void *)(a5 + 32) = v39 - v38 + v10 * (unint64_t)v37;
            *(void *)(a5 + 40) = v39;
            *(void *)(a5 + 80) = v38;
            *(void *)(a5 + 88) = v37;
          }
          return;
        }
      }
LABEL_47:
      uint64_t __src = 0;
      unint64_t v109 = 0;
      uint64_t v35 = sub_1002D19D8(&__src, 18);
      *(_WORD *)(v35 + 16) = 25968;
      *(_OWORD *)uint64_t v35 = *(_OWORD *)"Unknown array type";
      sub_1002D2278(-5, &__src, "cvarrToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 985);
    }
    if (v8 == 144)
    {
      if (!*(void *)(a1 + 88)) {
        goto LABEL_47;
      }
      if (!a3)
      {
        uint64_t v63 = *(int **)(a1 + 48);
        if (v63)
        {
          if (*v63 >= 1)
          {
            sub_10022F344(&__src, "COI is not supported by the function");
            sub_1002D2278(-24, &__src, "cvarrToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 961);
          }
        }
      }
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 24) = 0u;
      *(_OWORD *)(a5 + 8) = 0u;
      *(void *)(a5 + 56) = 0;
      *(void *)(a5 + 64) = a5 + 8;
      uint64_t v20 = *(int *)(a1 + 96);
      *(void *)(a5 + 80) = v20;
      uint64_t v21 = (uint64_t *)(a5 + 80);
      *(void *)(a5 + 72) = a5 + 80;
      *(void *)(a5 + 88) = 0;
      *(void *)a5 = 0x242FF0000;
      unsigned int v22 = (0x43160520u >> (((*(_DWORD *)(a1 + 16) >> 2) & 0x3C) + ((*(int *)(a1 + 16) >> 31) & 0x14))) & 7;
      uint64_t v23 = *(int **)(a1 + 48);
      int v24 = *(_DWORD *)(a1 + 28);
      if (!v23)
      {
        if (v24)
        {
          uint64_t __src = 0;
          unint64_t v109 = 0;
          uint64_t v64 = sub_1002D19D8(&__src, 19);
          *(_DWORD *)(v64 + 15) = 807419197;
          *(_OWORD *)uint64_t v64 = *(_OWORD *)"img->dataOrder == 0";
          sub_1002D2278(-215, &__src, "iplImageToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 706);
        }
        unsigned int v65 = 8 * *(_DWORD *)(a1 + 8) - 8;
        int v58 = (v65 | v22) + 1124007936;
        *(_DWORD *)a5 = v58;
        unsigned int v60 = *(_DWORD *)(a1 + 40);
        unsigned int v59 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a5 + 8) = v59;
        *(_DWORD *)(a5 + 12) = v60;
        uint64_t v66 = *(void *)(a1 + 88);
        *(void *)(a5 + 16) = v66;
        *(void *)(a5 + 24) = v66;
        uint64_t v61 = (((v65 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * v22)) & 3);
        goto LABEL_97;
      }
      if (v24)
      {
        int v25 = *v23;
        if (!*v23)
        {
          uint64_t __src = 0;
          unint64_t v109 = 0;
          qmemcpy((void *)sub_1002D19D8(&__src, 41), "img->dataOrder == 0 || img->roi->coi != 0", 41);
          sub_1002D2278(-215, &__src, "iplImageToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 715);
        }
      }
      else
      {
        int v25 = *v23;
        if (!*v23) {
          goto LABEL_62;
        }
        int v24 = *(_DWORD *)(a1 + 28);
      }
      if (v24 == 1)
      {
        int v26 = 0;
        int v27 = 1;
LABEL_63:
        unsigned int v57 = v26 + v22;
        int v58 = v26 + v22 + 1124007936;
        *(_DWORD *)a5 = v58;
        unsigned int v59 = v23[4];
        *(_DWORD *)(a5 + 8) = v59;
        unsigned int v60 = v23[3];
        *(_DWORD *)(a5 + 12) = v60;
        uint64_t v61 = (((v57 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v57 & 7))) & 3);
        if (v27) {
          uint64_t v62 = *v21 * (v25 - 1) * *(int *)(a1 + 44);
        }
        else {
          uint64_t v62 = 0;
        }
        uint64_t v76 = *(void *)(a1 + 88) + v62;
        uint64_t v21 = *(uint64_t **)(a5 + 72);
        uint64_t v20 = *v21;
        uint64_t v66 = v76 + *v21 * v23[2] + v23[1] * (uint64_t)(int)v61;
        *(void *)(a5 + 16) = v66;
        *(void *)(a5 + 24) = v66;
LABEL_97:
        uint64_t v77 = v66 + v20 * (int)v59;
        uint64_t v78 = v66 + v20 * (int)(v59 - 1) + (int)v61 * (uint64_t)(int)v60;
        *(void *)(a5 + 32) = v78;
        *(void *)(a5 + 40) = v77;
        if (v59 == 1 || (int)v61 * (uint64_t)(int)v60 == v20) {
          int v80 = 0x4000;
        }
        else {
          int v80 = 0;
        }
        int v81 = v80 | v58;
        *(_DWORD *)a5 = v81;
        v21[1] = v61;
        if (a2)
        {
          int v82 = *(_DWORD *)(a5 + 4);
          uint64_t __src = __PAIR64__(v82, v81);
          unint64_t v109 = __PAIR64__(v60, v59);
          *(void *)&long long v110 = v66;
          *((void *)&v110 + 1) = v66;
          *(void *)&long long v111 = v78;
          *((void *)&v111 + 1) = v77;
          uint64_t v83 = *(void *)(a5 + 56);
          uint64_t v112 = *(void *)(a5 + 48);
          uint64_t v113 = v83;
          v114 = &v109;
          v115 = v116;
          v116[0] = 0;
          v116[1] = 0;
          if (v83)
          {
            atomic_fetch_add((atomic_uint *volatile)(v83 + 20), 1u);
            int v82 = *(_DWORD *)(a5 + 4);
          }
          if (v82 > 2)
          {
            HIDWORD(__src) = 0;
            sub_1002931A8((uint64_t)&__src, a5);
          }
          else
          {
            int v84 = *(void **)(a5 + 72);
            v85 = v115;
            *(void *)v115 = *v84;
            v85[1] = v84[1];
          }
          uint64_t v86 = *(void *)(a5 + 56);
          if (v86)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v86 + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v87 = *(void *)(a5 + 56);
              if (v87)
              {
                *(void *)(a5 + 56) = 0;
                uint64_t v88 = *(void *)(v87 + 8);
                if (!v88)
                {
                  uint64_t v88 = *(void *)(a5 + 48);
                  if (!v88) {
                    uint64_t v88 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v88 + 48))(v88, v87);
              }
            }
          }
          *(void *)(a5 + 56) = 0;
          *(_OWORD *)(a5 + 16) = 0u;
          *(_OWORD *)(a5 + 32) = 0u;
          if (*(int *)(a5 + 4) >= 1)
          {
            uint64_t v89 = 0;
            uint64_t v90 = *(void *)(a5 + 64);
            do
              *(_DWORD *)(v90 + 4 * v89++) = 0;
            while (v89 < *(int *)(a5 + 4));
          }
          v91 = *(int **)(a1 + 48);
          if (v91 && (int v92 = *v91) != 0 && *(_DWORD *)(a1 + 28) != 1)
          {
            *(void *)&long long v100 = (v92 - 1);
            unint64_t v117 = v109;
            sub_100292534((char *)a5, 2, (uint64_t *)&v117, __src & 0xFFF);
            sub_100234DCC((unint64_t)&__src, 1uLL, (unsigned int *)a5, 1uLL, (uint64_t)&v100, 1uLL);
          }
          else
          {
            LODWORD(v117) = 33619968;
            uint64_t v118 = a5;
            uint64_t v119 = 0;
            sub_10025401C((uint64_t)&__src, (uint64_t)&v117);
          }
          if (v113)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v113 + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v93 = v113;
              if (v113)
              {
                uint64_t v113 = 0;
                uint64_t v94 = *(void *)(v93 + 8);
                if (!v94)
                {
                  uint64_t v94 = v112;
                  if (!v112) {
                    uint64_t v94 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v94 + 48))(v94, v93);
              }
            }
          }
          uint64_t v113 = 0;
          long long v110 = 0u;
          long long v111 = 0u;
          if (SHIDWORD(__src) >= 1)
          {
            uint64_t v95 = 0;
            v96 = v114;
            do
              *((_DWORD *)v96 + v95++) = 0;
            while (v95 < SHIDWORD(__src));
          }
          if (v115 != v116) {
            j__free(v115);
          }
        }
        return;
      }
LABEL_62:
      int v27 = 0;
      int v26 = 8 * *(_DWORD *)(a1 + 8) - 8;
      goto LABEL_63;
    }
    if (v9 != 1117323264) {
      goto LABEL_47;
    }
    int v28 = *(_DWORD *)(a1 + 40);
    if (v28)
    {
      int v29 = *(_DWORD *)(a1 + 44);
      if (v28 < 1 || (((v8 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3) != v29)
      {
        uint64_t __src = 0;
        unint64_t v109 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 152), "total > 0 && (((((seq->flags) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((seq->flags) & ((1 << 3) - 1))*2) & 3)) == esz", 152);
        sub_1002D2278(-215, &__src, "cvarrToMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 970);
      }
      int v30 = *(_DWORD *)a1 & 0xFFF;
      if ((a2 & 1) == 0 && (uint64_t v31 = *(void *)(a1 + 88), *(void *)(v31 + 8) == v31))
      {
        sub_10000CE64(a5, *(_DWORD *)(a1 + 40), 1, v30, *(void *)(v31 + 24), 0);
      }
      else if (a4)
      {
        unint64_t v32 = v29 * (uint64_t)v28 + 7;
        unint64_t v33 = v32 >> 3;
        if (*(void *)(a4 + 8) >= v32 >> 3)
        {
          *(void *)(a4 + 8) = v33;
          uint64_t v34 = *(char **)a4;
        }
        else
        {
          uint64_t v34 = (char *)(a4 + 16);
          if (*(void *)a4 == a4 + 16)
          {
            uint64_t v34 = *(char **)a4;
          }
          else
          {
            if (*(void *)a4) {
              operator delete[]();
            }
            *(void *)a4 = v34;
          }
          *(void *)(a4 + 8) = v33;
          if (v32 >= 0x448) {
            operator new[]();
          }
        }
        sub_10025ABDC(a1, v34, 0x3FFFFFFF00000000);
        sub_10000CE64(a5, v28, 1, v30, (uint64_t)v34, 0);
      }
      else
      {
        *(_DWORD *)a5 = 1124007936;
        *(_OWORD *)(a5 + 4) = 0u;
        *(_OWORD *)(a5 + 20) = 0u;
        *(_OWORD *)(a5 + 36) = 0u;
        *(_OWORD *)(a5 + 48) = 0u;
        *(void *)(a5 + 80) = 0;
        *(void *)(a5 + 64) = a5 + 8;
        *(void *)(a5 + 72) = a5 + 80;
        *(void *)(a5 + 88) = 0;
        uint64_t __src = v28 | 0x100000000;
        sub_100292534((char *)a5, 2, &__src, v30);
        sub_10025ABDC(a1, *(char **)(a5 + 16), 0x3FFFFFFF00000000);
      }
      return;
    }
LABEL_48:
    *(_DWORD *)a5 = 1124007936;
    *(_OWORD *)(a5 + 4) = 0u;
    *(_OWORD *)(a5 + 20) = 0u;
    *(_OWORD *)(a5 + 36) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(void *)(a5 + 80) = 0;
    *(void *)(a5 + 64) = a5 + 8;
    *(void *)(a5 + 72) = a5 + 80;
    *(void *)(a5 + 88) = 0;
    return;
  }
  uint64_t v16 = *(void *)(a1 + 24);
  if (!v16) {
    goto LABEL_47;
  }
  *(_OWORD *)(a5 + 4) = 0u;
  uint64_t v17 = (int *)(a5 + 4);
  *(_OWORD *)(a5 + 20) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 36) = 0u;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 64) = a5 + 8;
  *(void *)(a5 + 72) = a5 + 80;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 16) = v16;
  *(void *)(a5 + 24) = v16;
  *(_DWORD *)a5 = v8 & 0xFFF | 0x42FF0000;
  uint64_t v18 = *(unsigned int *)(a1 + 4);
  if ((int)v18 >= 1)
  {
    if (v18 < 8)
    {
      uint64_t v19 = 0;
LABEL_56:
      uint64_t v47 = v18 - v19;
      uint64_t v48 = &__src + v19;
      uint64_t v49 = (int *)(8 * v19 + a1 + 36);
      uint64_t v50 = (_DWORD *)&v117 + v19;
      do
      {
        uint64_t v51 = *v49;
        *v50++ = *(v49 - 1);
        *v48++ = v51;
        v49 += 2;
        --v47;
      }
      while (v47);
      goto LABEL_58;
    }
    uint64_t v19 = v18 & 0x7FFFFFF8;
    uint64_t v40 = (const float *)(a1 + 64);
    uint64_t v41 = (float32x4_t *)&v119;
    uint64_t v42 = &v111;
    uint64_t v43 = v18 & 0xFFFFFFF8;
    do
    {
      uint64_t v44 = v40 - 8;
      float32x4x2_t v120 = vld2q_f32(v44);
      float32x4x2_t v121 = vld2q_f32(v40);
      v41[-1] = v120.val[0];
      *uint64_t v41 = v121.val[0];
      v45.i64[0] = v120.val[1].i32[0];
      v45.i64[1] = v120.val[1].i32[1];
      float32x4_t v46 = v45;
      v45.i64[0] = v120.val[1].i32[2];
      v45.i64[1] = v120.val[1].i32[3];
      v120.val[0] = v45;
      v45.i64[0] = v121.val[1].i32[0];
      v45.i64[1] = v121.val[1].i32[1];
      v120.val[1] = v45;
      v45.i64[0] = v121.val[1].i32[2];
      v45.i64[1] = v121.val[1].i32[3];
      *(v42 - 2) = (__int128)v46;
      *(float32x4x2_t *)(v42 - 1) = v120;
      v42[1] = (__int128)v45;
      v42 += 4;
      v40 += 16;
      v41 += 2;
      v43 -= 8;
    }
    while (v43);
    if (v19 != v18) {
      goto LABEL_56;
    }
  }
LABEL_58:
  sub_100292BB8(a5, v18, (uint64_t)&v117, (uint64_t)&__src, 0);
  sub_100293064(a5);
  if (!a2) {
    return;
  }
  long long v52 = *(_OWORD *)a5;
  long long v53 = *(_OWORD *)(a5 + 16);
  long long v100 = *(_OWORD *)a5;
  long long v101 = v53;
  long long v102 = *(_OWORD *)(a5 + 32);
  uint64_t v54 = *(void *)(a5 + 56);
  uint64_t v103 = *(void *)(a5 + 48);
  uint64_t v104 = v54;
  v105 = (char *)&v100 + 8;
  v106 = v107;
  v107[0] = 0;
  v107[1] = 0;
  if (v54)
  {
    atomic_fetch_add((atomic_uint *volatile)(v54 + 20), 1u);
    if (*v17 <= 2)
    {
LABEL_61:
      uint64_t v55 = *(void **)(a5 + 72);
      unint64_t v56 = v106;
      *(void *)v106 = *v55;
      v56[1] = v55[1];
      goto LABEL_73;
    }
  }
  else if (SDWORD1(v52) <= 2)
  {
    goto LABEL_61;
  }
  DWORD1(v100) = 0;
  sub_1002931A8((uint64_t)&v100, a5);
LABEL_73:
  uint64_t v67 = *(void *)(a5 + 56);
  if (v67)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v67 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v68 = *(void *)(a5 + 56);
      if (v68)
      {
        *(void *)(a5 + 56) = 0;
        uint64_t v69 = *(void *)(v68 + 8);
        if (!v69)
        {
          uint64_t v69 = *(void *)(a5 + 48);
          if (!v69) {
            uint64_t v69 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v69 + 48))(v69, v68);
      }
    }
  }
  *(void *)(a5 + 56) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  if (*(int *)(a5 + 4) >= 1)
  {
    uint64_t v70 = 0;
    uint64_t v71 = *(void *)(a5 + 64);
    do
      *(_DWORD *)(v71 + 4 * v70++) = 0;
    while (v70 < *v17);
  }
  int v97 = 33619968;
  uint64_t v98 = a5;
  uint64_t v99 = 0;
  sub_10025401C((uint64_t)&v100, (uint64_t)&v97);
  if (v104)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v104 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v72 = v104;
      if (v104)
      {
        uint64_t v104 = 0;
        uint64_t v73 = *(void *)(v72 + 8);
        if (!v73)
        {
          uint64_t v73 = v103;
          if (!v103) {
            uint64_t v73 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v73 + 48))(v73, v72);
      }
    }
  }
  uint64_t v104 = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  if (SDWORD1(v100) >= 1)
  {
    uint64_t v74 = 0;
    v75 = v105;
    do
      *(_DWORD *)&v75[4 * v74++] = 0;
    while (v74 < SDWORD1(v100));
  }
  if (v106 != v107) {
    j__free(v106);
  }
}

void sub_10029507C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_1000094F4((uint64_t)&a26);
  sub_1000094F4(v26);
  _Unwind_Resume(a1);
}

void sub_1002951B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_1002951C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002951DC(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(result + 4);
  if (v3 > 2 || !**(void **)(result + 72))
  {
    v19[0] = 0;
    v19[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v19, 24), "dims <= 2 && step[0] > 0", 24);
    sub_1002D2278(-215, v19, "locateROI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 991);
  }
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v5 < 0 != v4)
  {
    unint64_t v6 = 0;
    uint64_t v13 = *(void *)(result + 16);
    uint64_t v8 = *(void *)(result + 24);
    uint64_t v9 = *(void *)(result + 32);
    unint64_t v10 = v13 - v8;
    if (v13 != v8) {
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(*(void *)(result + 72) + 8 * v5);
    uint64_t v7 = *(void *)(result + 16);
    uint64_t v8 = *(void *)(result + 24);
    uint64_t v9 = *(void *)(result + 32);
    unint64_t v10 = v7 - v8;
    if (v7 != v8)
    {
LABEL_5:
      unint64_t v11 = **(void **)(result + 72);
      unint64_t v12 = v10 / v11;
      unint64_t v10 = (v10 - (int)(v10 / v11) * v11) / v6;
      goto LABEL_9;
    }
  }
  LODWORD(v12) = 0;
LABEL_9:
  *a3 = v10;
  a3[1] = v12;
  uint64_t v14 = v9 - v8;
  uint64_t v15 = *(int *)(result + 12) + (uint64_t)(int)v10;
  unint64_t v16 = (v14 - v6 * v15) / **(void **)(result + 72);
  int v17 = *(_DWORD *)(result + 8) + v12;
  if ((int)v16 + 1 > v17) {
    int v17 = v16 + 1;
  }
  a2[1] = v17;
  unint64_t v18 = (v14 - *(void *)(result + 80) * (v17 - 1)) / v6;
  if ((int)v15 > (int)v18) {
    LODWORD(v18) = v15;
  }
  *a2 = v18;
  return result;
}

void sub_100295338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100295350(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v10 = *(_DWORD *)(a1 + 4);
  if (v10 > 2 || !**(void **)(a1 + 72))
  {
    v24[0] = 0;
    v24[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v24, 24), "dims <= 2 && step[0] > 0", 24);
    sub_1002D2278(-215, (uint64_t *)v24, "adjustROI", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1012);
  }
  int32x2_t v23 = 0;
  v24[0] = 0;
  BOOL v11 = __OFSUB__(v10, 1);
  int v12 = v10 - 1;
  if (v12 < 0 != v11) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8 * v12);
  }
  sub_1002951DC(a1, v24, &v23);
  int32x2_t v14 = vrev64_s32(v23);
  int32x2_t v15 = vrev64_s32(v24[0]);
  int32x2_t v16 = vmin_s32(v15, vmax_s32(vsub_s32(v14, (int32x2_t)__PAIR64__(a4, a2)), 0));
  int32x2_t v17 = vmax_s32(vmin_s32(v15, vadd_s32(vadd_s32(v14, *(int32x2_t *)(a1 + 8)), (int32x2_t)__PAIR64__(a5, a3))), 0);
  int32x2_t v18 = vsub_s32(vmin_s32(v16, v17), v14);
  *(void *)(a1 + 16) += *(void *)(a1 + 80) * v18.i32[0] + v13 * v18.i32[1];
  int32x2_t v19 = vabd_s32(v16, v17);
  *(int32x2_t *)(a1 + 8) = v19;
  uint64_t v20 = *(_DWORD **)(a1 + 64);
  *uint64_t v20 = v19.i32[0];
  v20[1] = *(_DWORD *)(a1 + 12);
  if (v13 * *(int *)(a1 + 12) == **(void **)(a1 + 72) || *(_DWORD *)(a1 + 8) == 1) {
    unsigned int v21 = *(_DWORD *)a1 | 0x4000;
  }
  else {
    unsigned int v21 = *(_DWORD *)a1 & 0xFFFFBFFF;
  }
  *(_DWORD *)a1 = v21;
  return a1;
}

void sub_100295508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100295520(int *a1, int a2, uint64_t *__src, unsigned __int16 a4, unsigned int a5, int a6, unsigned int a7)
{
  int v12 = *a1;
  unsigned int v13 = *a1 & 0x1F0000;
  int v14 = a4 & 0xFFF;
  if (v13 >= 0xA0000)
  {
    if (v13 == 655360)
    {
      if ((a5 & 0x80000000) == 0)
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v33 = sub_1002D19D8(&v132, 5);
        *(_DWORD *)uint64_t v33 = 540811369;
        *(unsigned char *)(v33 + 4) = 48;
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2506);
      }
      uint64_t v34 = *((void *)a1 + 1);
      if (a6)
      {
        if ((*(unsigned char *)(v34 + 1) & 0x40) == 0)
        {
          if (*a1 >> 30)
          {
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            qmemcpy((void *)sub_1002D19D8(&v132, 28), "!fixedType() && !fixedSize()", 28);
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2512);
          }
          uint64_t v35 = *(void *)(v34 + 32);
          if (v35 && atomic_fetch_add((atomic_uint *volatile)(v35 + 16), 0xFFFFFFFF) == 1) {
            sub_1002DA390(v34);
          }
          if (*(int *)(v34 + 4) >= 1)
          {
            uint64_t v36 = 0;
            uint64_t v37 = *(void *)(v34 + 48);
            do
              *(_DWORD *)(v37 + 4 * v36++) = 0;
            while (v36 < *(int *)(v34 + 4));
          }
          *(void *)(v34 + 32) = 0;
        }
        if (a2 == 2 && *(_DWORD *)(v34 + 4) == 2)
        {
          if (*(void *)(v34 + 32))
          {
            int v39 = *(_DWORD *)(v34 + 8);
            int v38 = *(_DWORD *)(v34 + 12);
            if (v38 * (uint64_t)v39)
            {
              if ((*(_DWORD *)v34 & 0xFFF) == v14 && v39 == *((_DWORD *)__src + 1) && v38 == *(_DWORD *)__src) {
                return;
              }
            }
          }
        }
      }
      int v40 = *a1;
      if (*a1 < 0)
      {
        if ((((unsigned __int16)*(_DWORD *)v34 ^ a4) & 0xFF8) != 0 || ((a7 >> v40) & 1) == 0)
        {
          if (v14 != (*(_DWORD *)v34 & 0xFFF))
          {
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            qmemcpy((void *)sub_1002D19D8(&v132, 42), "((mtype) & ((1 << 3)*512 - 1)) == m.type()", 42);
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2526);
          }
        }
        else
        {
          LOWORD(v14) = *(_DWORD *)v34 & 0xFFF;
        }
      }
      if ((v40 & 0x40000000) != 0)
      {
        if (*(_DWORD *)(v34 + 4) != a2)
        {
          uint64_t v132 = 0;
          uint64_t v133 = 0;
          uint64_t v41 = sub_1002D19D8(&v132, 11);
          *(_DWORD *)(v41 + 7) = 1679834429;
          *(void *)uint64_t v41 = *(void *)"m.dims == d";
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2530);
        }
        if (a2 >= 1)
        {
          uint64_t v42 = 0;
          do
          {
            if (*(_DWORD *)(*(void *)(v34 + 48) + v42) != *(_DWORD *)((char *)__src + v42))
            {
              uint64_t v132 = 0;
              uint64_t v133 = 0;
              qmemcpy((void *)sub_1002D19D8(&v132, 21), "m.size[j] == sizes[j]", 21);
              sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2532);
            }
            v42 += 4;
          }
          while (4 * a2 != v42);
        }
      }
      goto LABEL_186;
    }
    if (v13 == 917504)
    {
      if (v14 != (*a1 & 0xFFF) && ((a4 & 0xFF8) != 0 || ((a7 >> *(unsigned char *)a1) & 1) == 0))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        qmemcpy((void *)sub_1002D19D8(&v132, 106), "mtype == type0 || (((((mtype) & ((512 - 1) << 3)) >> 3) + 1) == 1 && ((1 << type0) & fixedDepthMask) != 0)", 106);
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2551);
      }
      if (a2 != 2 || a1[5] * a1[4] != *((_DWORD *)__src + 1) * *(_DWORD *)__src)
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        qmemcpy((void *)sub_1002D19D8(&v132, 40), "d == 2 && sz.area() == sizes[0]*sizes[1]", 40);
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2552);
      }
      return;
    }
  }
  else
  {
    if (v13 == 0x10000)
    {
      if ((a5 & 0x80000000) == 0)
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v23 = sub_1002D19D8(&v132, 5);
        *(_DWORD *)uint64_t v23 = 540811369;
        *(unsigned char *)(v23 + 4) = 48;
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2472);
      }
      uint64_t v24 = *((void *)a1 + 1);
      if (a6)
      {
        if ((*(unsigned char *)(v24 + 1) & 0x40) == 0)
        {
          if (*a1 >> 30)
          {
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            qmemcpy((void *)sub_1002D19D8(&v132, 28), "!fixedType() && !fixedSize()", 28);
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2478);
          }
          uint64_t v25 = *(void *)(v24 + 56);
          if (v25)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v25 + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v26 = *(void *)(v24 + 56);
              if (v26)
              {
                *(void *)(v24 + 56) = 0;
                uint64_t v27 = *(void *)(v26 + 8);
                if (!v27)
                {
                  uint64_t v27 = *(void *)(v24 + 48);
                  if (!v27) {
                    uint64_t v27 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 48))(v27, v26);
              }
            }
          }
          *(void *)(v24 + 56) = 0;
          *(_OWORD *)(v24 + 16) = 0u;
          *(_OWORD *)(v24 + 32) = 0u;
          if (*(int *)(v24 + 4) >= 1)
          {
            uint64_t v28 = 0;
            uint64_t v29 = *(void *)(v24 + 64);
            do
              *(_DWORD *)(v29 + 4 * v28++) = 0;
            while (v28 < *(int *)(v24 + 4));
          }
        }
        if (a2 == 2
          && *(_DWORD *)(v24 + 4) == 2
          && *(void *)(v24 + 16)
          && (*(_DWORD *)v24 & 0xFFF) == v14
          && *(_DWORD *)(v24 + 8) == *((_DWORD *)__src + 1)
          && *(_DWORD *)(v24 + 12) == *(_DWORD *)__src)
        {
          return;
        }
      }
      int v30 = *a1;
      if (*a1 < 0)
      {
        if ((((unsigned __int16)*(_DWORD *)v24 ^ a4) & 0xFF8) != 0 || ((a7 >> v30) & 1) == 0)
        {
          if (v14 != (*(_DWORD *)v24 & 0xFFF))
          {
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            qmemcpy((void *)sub_1002D19D8(&v132, 42), "((mtype) & ((1 << 3)*512 - 1)) == m.type()", 42);
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2492);
          }
        }
        else
        {
          LOWORD(v14) = *(_DWORD *)v24 & 0xFFF;
        }
      }
      if ((v30 & 0x40000000) != 0)
      {
        if (*(_DWORD *)(v24 + 4) != a2)
        {
          uint64_t v132 = 0;
          uint64_t v133 = 0;
          uint64_t v31 = sub_1002D19D8(&v132, 11);
          *(_DWORD *)(v31 + 7) = 1679834429;
          *(void *)uint64_t v31 = *(void *)"m.dims == d";
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2496);
        }
        if (a2 >= 1)
        {
          uint64_t v32 = 0;
          do
          {
            if (*(_DWORD *)(*(void *)(v24 + 64) + v32) != *(_DWORD *)((char *)__src + v32))
            {
              uint64_t v132 = 0;
              uint64_t v133 = 0;
              qmemcpy((void *)sub_1002D19D8(&v132, 21), "m.size[j] == sizes[j]", 21);
              sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2498);
            }
            v32 += 4;
          }
          while (4 * a2 != v32);
        }
      }
      goto LABEL_160;
    }
    if (v13 == 0x20000)
    {
      if ((a5 & 0x80000000) == 0)
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        uint64_t v15 = sub_1002D19D8(&v132, 5);
        *(_DWORD *)uint64_t v15 = 540811369;
        *(unsigned char *)(v15 + 4) = 48;
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2540);
      }
      if (v14 != (*a1 & 0xFFF) && ((a4 & 0xFF8) != 0 || ((a7 >> *(unsigned char *)a1) & 1) == 0))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        qmemcpy((void *)sub_1002D19D8(&v132, 106), "mtype == type0 || (((((mtype) & ((512 - 1) << 3)) >> 3) + 1) == 1 && ((1 << type0) & fixedDepthMask) != 0)", 106);
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2542);
      }
      if (a2 != 2
        || ((int v46 = a1[5], *(_DWORD *)__src != v46) || *((_DWORD *)__src + 1) != a1[4])
        && (!a6 || *(_DWORD *)__src != a1[4] || *((_DWORD *)__src + 1) != v46))
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
        qmemcpy((void *)sub_1002D19D8(&v132, 129), "d == 2 && ((sizes[0] == sz.height && sizes[1] == sz.width) || (allowTransposed && sizes[0] == sz.width && sizes[1] == sz.height))", 129);
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2544);
      }
      return;
    }
  }
  if ((*a1 & 0x1F0000u) >= 0x50000)
  {
    if (v13 == 327680)
    {
      uint64_t v47 = (uint64_t *)*((void *)a1 + 1);
      if ((a5 & 0x80000000) != 0)
      {
        if (a2 != 2
          || (int v88 = *(_DWORD *)__src, *(_DWORD *)__src != 1) && (v89 = *((_DWORD *)__src + 1), v89 != 1) && v89 * v88)
        {
          sub_10022F344(&v132, "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)");
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2650);
        }
        int v90 = *((_DWORD *)__src + 1);
        int v91 = v90 * v88;
        int v92 = v88 + v90 - 1;
        if (v91 <= 0) {
          int v92 = 0;
        }
        unint64_t v93 = v92;
        unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v47[1] - *v47) >> 5);
        if ((v12 & 0x40000000) != 0 && v94 != v92)
        {
          sub_10022F344(&v132, "!fixedSize() || len == len0");
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2653);
        }
        sub_10029C4D0(*((uint64_t **)a1 + 1), v92);
        if (*a1 < 0 && v94 < v93)
        {
          int v95 = *a1 & 0xFFF;
          uint64_t v96 = *v47;
          do
          {
            if ((*(_DWORD *)(v96 + 96 * v94) & 0xFFF) != v95)
            {
              if (*(void *)(v96 + 96 * v94 + 16))
              {
                uint64_t v97 = *(unsigned int *)(v96 + 96 * v94 + 4);
                uint64_t v98 = v96 + 96 * v94;
                if ((int)v97 >= 3)
                {
                  uint64_t v100 = *(void *)(v98 + 64);
                  long long v101 = (int *)(v100 + 4);
                  uint64_t v102 = v97 & 0xFFFFFFFE;
                  uint64_t v103 = 1;
                  uint64_t v104 = 1;
                  do
                  {
                    v103 *= *(v101 - 1);
                    v104 *= *v101;
                    v101 += 2;
                    v102 -= 2;
                  }
                  while (v102);
                  uint64_t v99 = v104 * v103;
                  uint64_t v105 = v97 - (v97 & 0xFFFFFFFE);
                  if (v105)
                  {
                    v106 = (int *)(v100 + ((4 * v97) & 0x3FFFFFFF8));
                    do
                    {
                      uint64_t v107 = *v106++;
                      v99 *= v107;
                      --v105;
                    }
                    while (v105);
                  }
                }
                else
                {
                  uint64_t v99 = *(int *)(v98 + 12) * (uint64_t)*(int *)(v98 + 8);
                }
                if (v97 && v99)
                {
                  uint64_t v132 = 0;
                  uint64_t v133 = 0;
                  uint64_t v108 = sub_1002D19D8(&v132, 12);
                  *(_DWORD *)(v108 + 8) = 690518388;
                  *(void *)uint64_t v108 = *(void *)"v[j].empty()";
                  sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2662);
                }
              }
              *(_DWORD *)(v96 + 96 * v94) = *(_DWORD *)(v96 + 96 * v94) & 0xFFFFF000 | v95;
            }
            ++v94;
          }
          while (v94 != v93);
        }
        return;
      }
      uint64_t v48 = *v47;
      if ((int)(-1431655765 * ((unint64_t)(v47[1] - *v47) >> 5)) <= (int)a5)
      {
        sub_10022F344(&v132, "i < (int)v.size()");
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2669);
      }
      uint64_t v24 = v48 + 96 * a5;
      if (a6)
      {
        if ((*(unsigned char *)(v24 + 1) & 0x40) == 0)
        {
          if (*a1 >> 30)
          {
            sub_10022F344(&v132, "!fixedType() && !fixedSize()");
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2676);
          }
          sub_100292B00(v48 + 96 * a5);
        }
        if (a2 == 2)
        {
          uint64_t v50 = v48 + 96 * a5;
          int v51 = *(_DWORD *)(v50 + 4);
          uint64_t v52 = *(void *)(v50 + 16);
          BOOL v53 = v51 != 2 || v52 == 0;
          if (!v53
            && (*(_DWORD *)v24 & 0xFFF) == v14
            && *(_DWORD *)(v48 + 96 * a5 + 8) == *((_DWORD *)__src + 1)
            && *(_DWORD *)(v48 + 96 * a5 + 12) == *(_DWORD *)__src)
          {
            return;
          }
        }
      }
      int v54 = *a1;
      if (*a1 < 0)
      {
        if ((((unsigned __int16)*(_DWORD *)v24 ^ a4) & 0xFF8) != 0 || ((a7 >> v54) & 1) == 0)
        {
          if (v14 != (*(_DWORD *)v24 & 0xFFF))
          {
            sub_10022F344(&v132, "((mtype) & ((1 << 3)*512 - 1)) == m.type()");
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2690);
          }
        }
        else
        {
          LOWORD(v14) = *(_DWORD *)v24 & 0xFFF;
        }
      }
      if ((v54 & 0x40000000) != 0)
      {
        if (*(_DWORD *)(v48 + 96 * a5 + 4) != a2)
        {
          sub_10022F344(&v132, "m.dims == d");
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2694);
        }
        if (a2 >= 1)
        {
          uint64_t v55 = 0;
          do
          {
            if (*(_DWORD *)(*(void *)(v48 + 96 * a5 + 64) + v55) != *(_DWORD *)((char *)__src + v55))
            {
              uint64_t v132 = 0;
              uint64_t v133 = 0;
              qmemcpy((void *)sub_1002D19D8(&v132, 21), "m.size[j] == sizes[j]", 21);
              sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2696);
            }
            v55 += 4;
          }
          while (4 * a2 != v55);
        }
      }
      goto LABEL_160;
    }
    if (v13 != 720896)
    {
      if (v13 != 983040) {
        goto LABEL_188;
      }
      uint64_t v43 = *((void *)a1 + 1);
      if ((a5 & 0x80000000) != 0)
      {
        if (a2 != 2
          || (int v67 = *(_DWORD *)__src, *(_DWORD *)__src != 1) && (v68 = *((_DWORD *)__src + 1), v68 != 1) && v68 * v67)
        {
          sub_10022F344(&v132, "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)");
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2709);
        }
        int v69 = *((_DWORD *)__src + 1);
        int v70 = v69 * v67;
        int v71 = v67 + v69 - 1;
        if (v70 <= 0) {
          unsigned int v72 = 0;
        }
        else {
          unsigned int v72 = v71;
        }
        unint64_t v73 = a1[5];
        if (v72 != v73)
        {
          sub_10022F344(&v132, "len == len0");
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2712);
        }
        if (*a1 < 0 && v73 < v72)
        {
          int v74 = *a1 & 0xFFF;
          do
          {
            v75 = (unsigned int *)(v43 + 96 * v73);
            if ((*v75 & 0xFFF) != v74)
            {
              if (*(void *)(v43 + 96 * v73 + 16))
              {
                uint64_t v76 = *(unsigned int *)(v43 + 96 * v73 + 4);
                uint64_t v77 = v43 + 96 * v73;
                if ((int)v76 >= 3)
                {
                  uint64_t v79 = *(void *)(v77 + 64);
                  int v80 = (int *)(v79 + 4);
                  uint64_t v81 = v76 & 0xFFFFFFFE;
                  uint64_t v82 = 1;
                  uint64_t v83 = 1;
                  do
                  {
                    v82 *= *(v80 - 1);
                    v83 *= *v80;
                    v80 += 2;
                    v81 -= 2;
                  }
                  while (v81);
                  uint64_t v78 = v83 * v82;
                  uint64_t v84 = v76 - (v76 & 0xFFFFFFFE);
                  if (v84)
                  {
                    v85 = (int *)(v79 + ((4 * v76) & 0x3FFFFFFF8));
                    do
                    {
                      uint64_t v86 = *v85++;
                      v78 *= v86;
                      --v84;
                    }
                    while (v84);
                  }
                }
                else
                {
                  uint64_t v78 = *(int *)(v77 + 12) * (uint64_t)*(int *)(v77 + 8);
                }
                if (v76 && v78)
                {
                  uint64_t v132 = 0;
                  uint64_t v133 = 0;
                  uint64_t v87 = sub_1002D19D8(&v132, 12);
                  *(_DWORD *)(v87 + 8) = 690518388;
                  *(void *)uint64_t v87 = *(void *)"v[j].empty()";
                  sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2720);
                }
              }
              unsigned int *v75 = *v75 & 0xFFFFF000 | v74;
            }
            ++v73;
          }
          while (v73 < (int)v72);
        }
        return;
      }
      if (a1[5] <= (int)a5)
      {
        sub_10022F344(&v132, "i < sz.height");
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2727);
      }
      uint64_t v24 = v43 + 96 * a5;
      if (a6)
      {
        if ((*(unsigned char *)(v24 + 1) & 0x40) == 0)
        {
          if (*a1 >> 30)
          {
            sub_10022F344(&v132, "!fixedType() && !fixedSize()");
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2734);
          }
          sub_100292B00(v43 + 96 * a5);
        }
        if (a2 == 2
          && *(_DWORD *)(v43 + 96 * a5 + 4) == 2
          && *(void *)(v43 + 96 * a5 + 16)
          && (*(_DWORD *)v24 & 0xFFF) == v14
          && *(_DWORD *)(v43 + 96 * a5 + 8) == *((_DWORD *)__src + 1)
          && *(_DWORD *)(v43 + 96 * a5 + 12) == *(_DWORD *)__src)
        {
          return;
        }
      }
      int v44 = *a1;
      if (*a1 < 0)
      {
        if ((((unsigned __int16)*(_DWORD *)v24 ^ a4) & 0xFF8) != 0 || ((a7 >> v44) & 1) == 0)
        {
          if (v14 != (*(_DWORD *)v24 & 0xFFF))
          {
            sub_10022F344(&v132, "((mtype) & ((1 << 3)*512 - 1)) == m.type()");
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2748);
          }
        }
        else
        {
          LOWORD(v14) = *(_DWORD *)v24 & 0xFFF;
        }
      }
      if ((v44 & 0x40000000) != 0)
      {
        if (*(_DWORD *)(v43 + 96 * a5 + 4) != a2)
        {
          sub_10022F344(&v132, "m.dims == d");
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2753);
        }
        if (a2 >= 1)
        {
          uint64_t v45 = 0;
          do
          {
            if (*(_DWORD *)(*(void *)(v43 + 96 * a5 + 64) + v45) != *(_DWORD *)((char *)__src + v45))
            {
              uint64_t v132 = 0;
              uint64_t v133 = 0;
              qmemcpy((void *)sub_1002D19D8(&v132, 21), "m.size[j] == sizes[j]", 21);
              sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2755);
            }
            v45 += 4;
          }
          while (4 * a2 != v45);
        }
      }
LABEL_160:
      sub_100292534((char *)v24, a2, __src, v14);
      return;
    }
    unint64_t v56 = (uint64_t *)*((void *)a1 + 1);
    if ((a5 & 0x80000000) != 0)
    {
      if (a2 != 2
        || (int v109 = *(_DWORD *)__src, *(_DWORD *)__src != 1) && (v110 = *((_DWORD *)__src + 1), v110 != 1) && v110 * v109)
      {
        sub_10022F344(&v132, "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)");
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2768);
      }
      int v111 = *((_DWORD *)__src + 1);
      int v112 = v111 * v109;
      int v113 = v109 + v111 - 1;
      if (v112 <= 0) {
        int v113 = 0;
      }
      unint64_t v114 = v113;
      unint64_t v115 = 0xCCCCCCCCCCCCCCCDLL * ((v56[1] - *v56) >> 4);
      if ((v12 & 0x40000000) != 0 && v115 != v113)
      {
        sub_10022F344(&v132, "!fixedSize() || len == len0");
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2771);
      }
      sub_10029C574(*((uint64_t **)a1 + 1), v113);
      if (*a1 < 0 && v115 < v114)
      {
        int v116 = *a1 & 0xFFF;
        uint64_t v117 = *v56;
        do
        {
          if ((*(_DWORD *)(v117 + 80 * v115) & 0xFFF) != v116)
          {
            if (*(void *)(v117 + 80 * v115 + 32))
            {
              uint64_t v118 = *(unsigned int *)(v117 + 80 * v115 + 4);
              uint64_t v119 = v117 + 80 * v115;
              if ((int)v118 >= 3)
              {
                uint64_t v121 = *(void *)(v119 + 48);
                v122 = (int *)(v121 + 4);
                uint64_t v123 = v118 & 0xFFFFFFFE;
                uint64_t v124 = 1;
                uint64_t v125 = 1;
                do
                {
                  v124 *= *(v122 - 1);
                  v125 *= *v122;
                  v122 += 2;
                  v123 -= 2;
                }
                while (v123);
                uint64_t v120 = v125 * v124;
                uint64_t v126 = v118 - (v118 & 0xFFFFFFFE);
                if (v126)
                {
                  v127 = (int *)(v121 + ((4 * v118) & 0x3FFFFFFF8));
                  do
                  {
                    uint64_t v128 = *v127++;
                    v120 *= v128;
                    --v126;
                  }
                  while (v126);
                }
              }
              else
              {
                uint64_t v120 = *(int *)(v119 + 12) * (uint64_t)*(int *)(v119 + 8);
              }
              if (v118 && v120)
              {
                uint64_t v132 = 0;
                uint64_t v133 = 0;
                uint64_t v129 = sub_1002D19D8(&v132, 12);
                *(_DWORD *)(v129 + 8) = 690518388;
                *(void *)uint64_t v129 = *(void *)"v[j].empty()";
                sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2780);
              }
            }
            *(_DWORD *)(v117 + 80 * v115) = *(_DWORD *)(v117 + 80 * v115) & 0xFFFFF000 | v116;
          }
          ++v115;
        }
        while (v115 != v114);
      }
      return;
    }
    uint64_t v57 = *v56;
    if ((int)(-858993459 * ((unint64_t)(v56[1] - *v56) >> 4)) <= (int)a5)
    {
      sub_10022F344(&v132, "i < (int)v.size()");
      sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2787);
    }
    uint64_t v34 = v57 + 80 * a5;
    if (a6)
    {
      if ((*(unsigned char *)(v34 + 1) & 0x40) == 0)
      {
        if (*a1 >> 30)
        {
          sub_10022F344(&v132, "!fixedType() && !fixedSize()");
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2794);
        }
        sub_10029F4D8(v57 + 80 * a5);
      }
      if (a2 == 2)
      {
        uint64_t v59 = v57 + 80 * a5;
        int v60 = *(_DWORD *)(v59 + 4);
        uint64_t v61 = *(void *)(v59 + 32);
        BOOL v62 = v60 != 2 || v61 == 0;
        if (!v62
          && (*(_DWORD *)v34 & 0xFFF) == v14
          && *(_DWORD *)(v57 + 80 * a5 + 8) == *((_DWORD *)__src + 1)
          && *(_DWORD *)(v57 + 80 * a5 + 12) == *(_DWORD *)__src)
        {
          return;
        }
      }
    }
    int v63 = *a1;
    if (*a1 < 0)
    {
      if ((((unsigned __int16)*(_DWORD *)v34 ^ a4) & 0xFF8) != 0 || ((a7 >> v63) & 1) == 0)
      {
        if (v14 != (*(_DWORD *)v34 & 0xFFF))
        {
          sub_10022F344(&v132, "((mtype) & ((1 << 3)*512 - 1)) == m.type()");
          sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2808);
        }
      }
      else
      {
        LOWORD(v14) = *(_DWORD *)v34 & 0xFFF;
      }
    }
    if ((v63 & 0x40000000) != 0)
    {
      if (*(_DWORD *)(v57 + 80 * a5 + 4) != a2)
      {
        sub_10022F344(&v132, "m.dims == d");
        sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2812);
      }
      if (a2 >= 1)
      {
        uint64_t v64 = 0;
        do
        {
          if (*(_DWORD *)(*(void *)(v57 + 80 * a5 + 48) + v64) != *(_DWORD *)((char *)__src + v64))
          {
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            qmemcpy((void *)sub_1002D19D8(&v132, 21), "m.size[j] == sizes[j]", 21);
            sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2814);
          }
          v64 += 4;
        }
        while (4 * a2 != v64);
      }
    }
LABEL_186:
    sub_1002D9CB8(v34, a2, __src, v14, 0);
    return;
  }
  if (!v13)
  {
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    qmemcpy((void *)sub_1002D19D8(&v132, 44), "create() called for the missing output array", 44);
    sub_1002D2278(-27, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2640);
  }
  if (v13 != 196608 && v13 != 0x40000)
  {
LABEL_188:
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    qmemcpy((void *)sub_1002D19D8(&v132, 30), "Unknown/unsupported array type", 30);
    sub_1002D2278(-213, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2821);
  }
  if (a2 != 2
    || (int v16 = *(_DWORD *)__src, *(_DWORD *)__src != 1) && (v17 = *((_DWORD *)__src + 1), v17 != 1) && v17 * v16)
  {
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    qmemcpy((void *)sub_1002D19D8(&v132, 68), "d == 2 && (sizes[0] == 1 || sizes[1] == 1 || sizes[0]*sizes[1] == 0)", 68);
    sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2558);
  }
  int v18 = *((_DWORD *)__src + 1);
  int v19 = v18 * v16;
  int v20 = v16 + v18 - 1;
  if (v19 <= 0) {
    int v20 = 0;
  }
  unint64_t v21 = v20;
  unsigned int v22 = (unint64_t *)*((void *)a1 + 1);
  if (v13 != 0x40000)
  {
    if ((a5 & 0x80000000) == 0)
    {
      sub_10022F344(&v132, "i < 0");
      sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2575);
    }
    goto LABEL_191;
  }
  if ((a5 & 0x80000000) == 0)
  {
    if ((int)(-1431655765 * ((v22[1] - *v22) >> 3)) <= (int)a5)
    {
      sub_10022F344(&v132, "i < (int)vv.size()");
      sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2571);
    }
    unsigned int v22 = (unint64_t *)(*v22 + 24 * a5);
LABEL_191:
    unsigned int v65 = *a1;
    if (v14 == (*a1 & 0xFFF))
    {
      int v66 = *a1;
    }
    else if ((((unsigned __int16)v65 ^ a4) & 0xFF8) != 0 || (int v66 = *a1, ((a7 >> *(unsigned char *)a1) & 1) == 0))
    {
      sub_10022F344(&v132, "mtype == type0 || (((((mtype) & ((512 - 1) << 3)) >> 3) + 1) == ((((type0) & ((512 - 1) << 3)) >> 3) + 1) && ((1 << type0) & fixedDepthMask) != 0)");
      sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2578);
    }
    unint64_t v130 = (((v65 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v65 & 7))) & 3);
    if ((v66 & 0x40000000) != 0 && (v22[1] - *v22) / v130 != v21)
    {
      sub_10022F344(&v132, "!fixedSize() || len == ((std::vector<uchar>*)v)->size() / esz");
      sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2581);
    }
    switch((int)v130)
    {
      case 1:
        sub_10029F5F8((uint64_t)v22, v21);
        return;
      case 2:
        sub_10029F7E4(v22, v21);
        return;
      case 3:
        sub_10029F810(v22, v21);
        return;
      case 4:
        sub_10029F848(v22, v21);
        return;
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 33:
      case 34:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_302;
      case 6:
        sub_10029F874(v22, v21);
        return;
      case 8:
        sub_10029F8B0(v22, v21);
        return;
      case 12:
        sub_10029F8DC(v22, v21);
        return;
      case 16:
        sub_10029F918(v22, v21);
        return;
      case 24:
        sub_10029F944(v22, v21);
        return;
      case 32:
        sub_10029F980(v22, v21);
        return;
      case 36:
        sub_10029F9AC(v22, v21);
        return;
      case 48:
        sub_10029F9F0(v22, v21);
        return;
      case 64:
        sub_10029FA2C(v22, v21);
        return;
      case 128:
        sub_10029FA58(v22, v21);
        return;
      default:
        if (v130 == 256)
        {
          sub_10029FA84(v22, v21);
        }
        else
        {
          if (v130 != 512)
          {
LABEL_302:
            sub_1002D1F78(&v132, "Vectors with element size %d are not supported. Please, modify OutputArray::create()\n", v130);
            sub_1002D2278(-5, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2633);
          }
          sub_10029FAB0(v22, v21);
        }
        break;
    }
    return;
  }
  if ((*((unsigned char *)a1 + 3) & 0x40) != 0 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22[1] - *v22) >> 3) != v20)
  {
    sub_10022F344(&v132, "!fixedSize() || len == vv.size()");
    sub_1002D2278(-215, &v132, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2567);
  }
  sub_10029F548(*((void **)a1 + 1), v20);
}

void sub_10029717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002977F4(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  long long v8 = *(_OWORD *)a1;
  long long v9 = *(_OWORD *)(a1 + 16);
  unsigned int v10 = (*(_OWORD *)a1 >> 3) & 0x1FF;
  *(_OWORD *)uint64_t v48 = *(_OWORD *)a1;
  *(_OWORD *)&v48[16] = v9;
  *(_OWORD *)&v48[32] = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)&v48[48] = *(void *)(a1 + 48);
  *(void *)&v48[56] = v11;
  uint64_t v49 = &v48[8];
  uint64_t v50 = v51;
  v51[0] = 0;
  v51[1] = 0;
  if (v11)
  {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 1u);
    int v12 = v10 + 1;
    if (*(int *)(a1 + 4) <= 2)
    {
LABEL_3:
      unsigned int v13 = *(void **)(a1 + 72);
      int v14 = v50;
      *(void *)uint64_t v50 = *v13;
      v14[1] = v13[1];
      goto LABEL_30;
    }
  }
  else
  {
    int v12 = v10 + 1;
    if (SDWORD1(v8) <= 2) {
      goto LABEL_3;
    }
  }
  *(_DWORD *)&v48[4] = 0;
  sub_1002931A8((uint64_t)v48, a1);
  uint64_t v15 = *(unsigned int *)(a1 + 4);
  if ((int)v15 < 3)
  {
LABEL_30:
    if (!a2) {
      a2 = v12;
    }
    int v40 = *(_DWORD *)(a1 + 12) * v12;
    if (a2 <= v40)
    {
      if (a3 || !(v40 % a2))
      {
LABEL_38:
        if (!a3)
        {
LABEL_47:
          if (v40 / a2 * a2 != v40)
          {
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            qmemcpy((void *)sub_1002D19D8(&v52, 62), "The total width is not divisible by the new number of channels", 62);
            sub_1002D2278(-15, &v52, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1121);
          }
          *(_DWORD *)&v48[12] = v40 / a2;
          int v43 = *(_DWORD *)v48;
          unsigned int v44 = 8 * a2 - 8;
          int v20 = v50;
          *((void *)v50 + 1) = (((v44 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v48[0] & 7))) & 3);
          *(_DWORD *)a4 = v43 & 0xFFFFF007 | v44;
          int v45 = *(_DWORD *)&v48[4];
          *(void *)(a4 + 4) = *(void *)&v48[4];
          *(_DWORD *)(a4 + 12) = v40 / a2;
          long long v46 = *(_OWORD *)&v48[32];
          *(_OWORD *)(a4 + 16) = *(_OWORD *)&v48[16];
          *(_OWORD *)(a4 + 32) = v46;
          long long v47 = *(_OWORD *)&v48[48];
          *(void *)(a4 + 80) = 0;
          *(_OWORD *)(a4 + 48) = v47;
          *(void *)(a4 + 64) = a4 + 8;
          *(void *)(a4 + 72) = a4 + 80;
          *(void *)(a4 + 88) = 0;
          if (v45 <= 2) {
            goto LABEL_50;
          }
          *(void *)(a4 + 64) = v49;
          *(void *)(a4 + 72) = v20;
          goto LABEL_52;
        }
LABEL_39:
        int v41 = *(_DWORD *)(a1 + 8);
        if (a3 != v41)
        {
          if ((*(unsigned char *)(a1 + 1) & 0x40) == 0)
          {
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            qmemcpy((void *)sub_1002D19D8(&v52, 72), "The matrix is not continuous, thus its number of rows can not be changed", 72);
            sub_1002D2278(-13, &v52, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1102);
          }
          int v42 = v41 * v40;
          if (a3 > v42)
          {
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            qmemcpy((void *)sub_1002D19D8(&v52, 22), "Bad new number of rows", 22);
            sub_1002D2278(-211, &v52, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1105);
          }
          int v40 = v42 / a3;
          if (v42 / a3 * a3 != v42)
          {
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            qmemcpy((void *)sub_1002D19D8(&v52, 78), "The total number of matrix elements is not divisible by the new number of rows", 78);
            sub_1002D2278(-5, &v52, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1111);
          }
          *(_DWORD *)&v48[8] = a3;
          *(void *)uint64_t v50 = ((0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF) * v40;
        }
        goto LABEL_47;
      }
    }
    else if (a3)
    {
      goto LABEL_39;
    }
    a3 = *(_DWORD *)(a1 + 8) * v40 / a2;
    goto LABEL_38;
  }
  if (a2 && !a3)
  {
    uint64_t v16 = (v15 - 1);
    if (!(*(_DWORD *)(*(void *)(a1 + 64) + 4 * v16) * v12 % a2))
    {
      char v17 = v48[0];
      unsigned int v18 = 8 * a2 - 8;
      *(_DWORD *)uint64_t v48 = *(_DWORD *)v48 & 0xFFFFF007 | v18;
      uint64_t v19 = (((v18 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v17 & 7))) & 3);
      int v20 = v50;
      *((void *)v50 + v16) = v19;
      unint64_t v21 = v49;
      *(_DWORD *)&v49[4 * v16] = *(_DWORD *)&v49[4 * v16] * v12 / a2;
      int v22 = *(_DWORD *)&v48[4];
      long long v23 = *(_OWORD *)&v48[16];
      *(_OWORD *)a4 = *(_OWORD *)v48;
      *(_OWORD *)(a4 + 16) = v23;
      long long v24 = *(_OWORD *)&v48[48];
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&v48[32];
      *(_OWORD *)(a4 + 48) = v24;
      *(void *)(a4 + 80) = 0;
      *(void *)(a4 + 64) = a4 + 8;
      *(void *)(a4 + 72) = a4 + 80;
      *(void *)(a4 + 88) = 0;
      if (v22 <= 2)
      {
LABEL_50:
        *(void *)(a4 + 80) = *v20;
        *(void *)(a4 + 88) = v20[1];
        goto LABEL_53;
      }
      *(void *)(a4 + 64) = v21;
      *(void *)(a4 + 72) = v20;
LABEL_52:
      uint64_t v49 = &v48[8];
      uint64_t v50 = v51;
LABEL_53:
      *(_DWORD *)uint64_t v48 = 1124007936;
      memset(&v48[4], 0, 60);
      int v38 = v50;
      if (v50 == v51) {
        return;
      }
      goto LABEL_54;
    }
LABEL_29:
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v39 = sub_1002D19D8(&v52, 9);
    *(unsigned char *)(v39 + 8) = 50;
    *(void *)uint64_t v39 = *(void *)"dims <= 2";
    sub_1002D2278(-215, &v52, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1087);
  }
  if (a3 < 1) {
    goto LABEL_29;
  }
  LODWORD(v52) = a3;
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v26 = (int *)(v25 + 4);
  uint64_t v27 = 1;
  uint64_t v28 = v15 & 0xFFFFFFFE;
  uint64_t v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  unint64_t v30 = v29 * v27;
  uint64_t v31 = v15 - (v15 & 0xFFFFFFFE);
  if (v31)
  {
    uint64_t v32 = (int *)(v25 + ((4 * v15) & 0x3FFFFFFF8));
    do
    {
      uint64_t v33 = *v32++;
      v30 *= v33;
      --v31;
    }
    while (v31);
  }
  HIDWORD(v52) = v30 / a3;
  sub_100297ED4((unsigned int *)a1, a2, 2, (uint64_t)&v52, a4);
  if (*(void *)&v48[56])
  {
    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v48[56] + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v34 = *(void *)&v48[56];
      if (*(void *)&v48[56])
      {
        *(void *)&v48[56] = 0;
        uint64_t v35 = *(void *)(v34 + 8);
        if (!v35)
        {
          uint64_t v35 = *(void *)&v48[48];
          if (!*(void *)&v48[48]) {
            uint64_t v35 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 48))(v35, v34);
      }
    }
  }
  *(void *)&v48[56] = 0;
  memset(&v48[16], 0, 32);
  if (*(int *)&v48[4] >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = v49;
    do
      *(_DWORD *)&v37[4 * v36++] = 0;
    while (v36 < *(int *)&v48[4]);
  }
  int v38 = v50;
  if (v50 != v51) {
LABEL_54:
  }
    j__free(v38);
}

void sub_100297E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100297ED4@<X0>(unsigned int *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = a2;
  if (a1[1] != a3 || a4 && a3 != 2)
  {
    if ((*((unsigned char *)a1 + 1) & 0x40) == 0)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      qmemcpy((void *)sub_1002D19D8(&v31, 71), "Reshaping of n-dimensional non-continuous matrices is not supported yet", 71);
      sub_1002D2278(-213, (uint64_t *)&v31, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4767);
    }
    if (!a4 || a2 < 0 || (a3 - 1) >= 0x20)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      qmemcpy((void *)sub_1002D19D8(&v31, 54), "_cn >= 0 && _newndims > 0 && _newndims <= 32 && _newsz", 54);
      sub_1002D2278(-215, (uint64_t *)&v31, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4731);
    }
    if (a2)
    {
      if (a2 >= 513)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v7 = sub_1002D19D8(&v31, 10);
        *(_WORD *)(v7 + 8) = 12849;
        *(void *)uint64_t v7 = *(void *)"_cn <= 512";
        sub_1002D2278(-215, (uint64_t *)&v31, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4736);
      }
      uint64_t v8 = a1[1];
      if ((int)v8 < 3) {
        goto LABEL_14;
      }
    }
    else
    {
      int v5 = ((*a1 >> 3) & 0x1FF) + 1;
      uint64_t v8 = a1[1];
      if ((int)v8 < 3)
      {
LABEL_14:
        uint64_t v9 = (int)a1[3] * (uint64_t)(int)a1[2];
        goto LABEL_24;
      }
    }
    uint64_t v11 = *((void *)a1 + 8);
    int v12 = (int *)(v11 + 4);
    uint64_t v13 = 1;
    uint64_t v14 = v8 & 0xFFFFFFFE;
    uint64_t v15 = 1;
    do
    {
      v13 *= *(v12 - 1);
      v15 *= *v12;
      v12 += 2;
      v14 -= 2;
    }
    while (v14);
    uint64_t v9 = v15 * v13;
    uint64_t v16 = v8 - (v8 & 0xFFFFFFFE);
    if (v16)
    {
      char v17 = (int *)(v11 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v18 = *v17++;
        v9 *= v18;
        --v16;
      }
      while (v16);
    }
LABEL_24:
    unint64_t v27 = *a1;
    uint64_t v19 = v5;
    uint64_t v31 = v33;
    uint64_t v32 = a3;
    if (a3 >= 5) {
      operator new[]();
    }
    if (a3 >= 1)
    {
      for (uint64_t i = 0; i != a3; ++i)
      {
        int v21 = *(_DWORD *)(a4 + 4 * i);
        if (v21 < 0)
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          qmemcpy((void *)sub_1002D19D8(&v29, 14), "_newsz[i] >= 0", 14);
          sub_1002D2278(-215, &v29, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4745);
        }
        if (v21 >= 1)
        {
          *(_DWORD *)&v31[4 * i] = v21;
        }
        else
        {
          if (i >= (int)a1[1])
          {
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            qmemcpy((void *)sub_1002D19D8(&v29, 68), "Copy dimension (which has zero size) is not present in source matrix", 68);
            sub_1002D2278(-211, &v29, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4752);
          }
          int v21 = *(_DWORD *)(*((void *)a1 + 8) + 4 * i);
          *(_DWORD *)&v31[4 * i] = v21;
        }
        v19 *= v21;
      }
    }
    if (v19 != v9 + v9 * ((v27 >> 3) & 0x1FF))
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      qmemcpy((void *)sub_1002D19D8(&v29, 62), "Requested and source matrices have different count of elements", 62);
      sub_1002D2278(-209, &v29, "reshape", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4758);
    }
    long long v22 = *(_OWORD *)a1;
    long long v23 = *((_OWORD *)a1 + 1);
    *(_OWORD *)a5 = *(_OWORD *)a1;
    *(_OWORD *)(a5 + 16) = v23;
    *(_OWORD *)(a5 + 32) = *((_OWORD *)a1 + 2);
    uint64_t v24 = *((void *)a1 + 7);
    *(void *)(a5 + 48) = *((void *)a1 + 6);
    *(void *)(a5 + 56) = v24;
    *(void *)(a5 + 80) = 0;
    *(void *)(a5 + 64) = a5 + 8;
    *(void *)(a5 + 72) = a5 + 80;
    *(void *)(a5 + 88) = 0;
    if (v24)
    {
      atomic_fetch_add((atomic_uint *volatile)(v24 + 20), 1u);
      if ((int)a1[1] <= 2)
      {
LABEL_41:
        uint64_t v25 = (void *)*((void *)a1 + 9);
        uint64_t v26 = *(void **)(a5 + 72);
        *uint64_t v26 = *v25;
        v26[1] = v25[1];
        goto LABEL_44;
      }
    }
    else if (SDWORD1(v22) <= 2)
    {
      goto LABEL_41;
    }
    *(_DWORD *)(a5 + 4) = 0;
    sub_1002931A8(a5, (uint64_t)a1);
LABEL_44:
    *(_DWORD *)a5 = *(_DWORD *)a5 & 0xFFFFF007 | (8 * v5 - 8);
    sub_1002A7B6C(a5, a3, (uint64_t)v31, 1);
    uint64_t result = (uint64_t)v31;
    if (v31 != v33)
    {
      if (v31) {
        operator delete[]();
      }
    }
    return result;
  }

  return sub_1002977F4();
}

void sub_100298440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100298524(uint64_t a1, uint64_t a2)
{
  sub_1002D6AE8(v55, &off_100495D90);
  unsigned int v4 = sub_10029AB74((int *)a1, -1);
  uint64_t v5 = (((v4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
  if ((int)sub_10029C9C4(a1, -1) > 2 || v5 >= 0x21)
  {
    long long v47 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v47, 29), "_src.dims() <= 2 && esz <= 32", 29);
    sub_1002D2278(-215, (uint64_t *)&v47, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3591);
  }
  if ((*(_DWORD *)a1 & 0x1F0000) == 0x10000)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v47 = *(_OWORD *)v6;
    long long v48 = v7;
    long long v49 = *(_OWORD *)(v6 + 32);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v50 = *(void *)(v6 + 48);
    uint64_t v51 = v8;
    uint64_t v52 = (_DWORD *)&v47 + 2;
    uint64_t v53 = v54;
    v54[0] = 0;
    v54[1] = 0;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v47) = 0;
      sub_1002931A8((uint64_t)&v47, v6);
    }
    else
    {
      uint64_t v9 = *(void **)(v6 + 72);
      unsigned int v10 = v53;
      *(void *)uint64_t v53 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v47);
  }
  if (!(void)v48) {
    goto LABEL_26;
  }
  if (SDWORD1(v47) >= 3)
  {
    int v12 = v52 + 1;
    uint64_t v13 = 1;
    uint64_t v14 = DWORD1(v47) & 0xFFFFFFFE;
    uint64_t v15 = 1;
    do
    {
      v13 *= *(v12 - 1);
      v15 *= *v12;
      v12 += 2;
      v14 -= 2;
    }
    while (v14);
    uint64_t v11 = v15 * v13;
    unint64_t v16 = DWORD1(v47) - (unint64_t)(DWORD1(v47) & 0xFFFFFFFE);
    if (v16)
    {
      char v17 = (_DWORD *)((char *)v52 + ((4 * DWORD1(v47)) & 0x3FFFFFFF8));
      do
      {
        uint64_t v18 = *v17++;
        v11 *= v18;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    uint64_t v11 = SHIDWORD(v47) * (uint64_t)SDWORD2(v47);
  }
  if (DWORD1(v47) && v11)
  {
    sub_10029EDE8(a2, HIDWORD(v47), DWORD2(v47), v47 & 0xFFF, -1, 0, 0);
    if ((*(_DWORD *)a2 & 0x1F0000) == 0x10000)
    {
      uint64_t v19 = *(void *)(a2 + 8);
      long long v20 = *(_OWORD *)(v19 + 16);
      long long v39 = *(_OWORD *)v19;
      long long v40 = v20;
      long long v41 = *(_OWORD *)(v19 + 32);
      uint64_t v21 = *(void *)(v19 + 56);
      uint64_t v42 = *(void *)(v19 + 48);
      uint64_t v43 = v21;
      unsigned int v44 = (_DWORD *)&v39 + 2;
      int v45 = v46;
      v46[0] = 0;
      v46[1] = 0;
      if (v21) {
        atomic_fetch_add((atomic_uint *volatile)(v21 + 20), 1u);
      }
      if (*(int *)(v19 + 4) > 2)
      {
        DWORD1(v39) = 0;
        sub_1002931A8((uint64_t)&v39, v19);
      }
      else
      {
        long long v22 = *(void **)(v19 + 72);
        long long v23 = v45;
        *(void *)int v45 = *v22;
        v23[1] = v22[1];
      }
    }
    else
    {
      sub_100299554(a2, -1, (uint64_t)&v39);
    }
    if (__PAIR64__(DWORD2(v47), HIDWORD(v47)) == *((void *)&v39 + 1))
    {
      unint64_t v24 = 0xFEFEEEA1uLL >> v5;
      if ((void)v40 == (void)v48)
      {
        if (v24)
        {
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v34 = sub_1002D19D8(&v36, 9);
          *(unsigned char *)(v34 + 8) = 48;
          *(void *)uint64_t v34 = *(void *)"func != 0";
          sub_1002D2278(-215, &v36, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3619);
        }
        if (DWORD2(v47) != HIDWORD(v47))
        {
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v35 = sub_1002D19D8(&v36, 20);
          *(_DWORD *)(v35 + 16) = 1937207154;
          *(_OWORD *)uint64_t v35 = *(_OWORD *)"dst.cols == dst.rows";
          sub_1002D2278(-215, &v36, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3620);
        }
        qword_100495DB0[v5](v40, v46[0]);
      }
      else
      {
        if (v24)
        {
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          uint64_t v25 = sub_1002D19D8(&v36, 9);
          *(unsigned char *)(v25 + 8) = 48;
          *(void *)uint64_t v25 = *(void *)"func != 0";
          sub_1002D2278(-215, &v36, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3626);
        }
        qword_100495EB8[v5](v48);
      }
    }
    else
    {
      if (v52[1] != v44[1] || *v52 != *v44 || DWORD2(v47) != 1 && HIDWORD(v47) != 1)
      {
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        qmemcpy((void *)sub_1002D19D8(&v36, 60), "src.size() == dst.size() && (src.cols == 1 || src.rows == 1)", 60);
        sub_1002D2278(-215, &v36, "transpose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3609);
      }
      LODWORD(v36) = 33619968;
      uint64_t v37 = &v39;
      uint64_t v38 = 0;
      sub_10025401C((uint64_t)&v47, (uint64_t)&v36);
    }
    if (v43)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v43 + 20), 0xFFFFFFFF) == 1)
      {
        uint64_t v26 = v43;
        if (v43)
        {
          uint64_t v43 = 0;
          uint64_t v27 = *(void *)(v26 + 8);
          if (!v27)
          {
            uint64_t v27 = v42;
            if (!v42) {
              uint64_t v27 = sub_10029230C();
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 48))(v27, v26);
        }
      }
    }
    uint64_t v43 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    if (SDWORD1(v39) >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v44;
      do
        v29[v28++] = 0;
      while (v28 < SDWORD1(v39));
    }
    if (v45 != v46) {
      j__free(v45);
    }
  }
  else
  {
LABEL_26:
    sub_10029E05C(a2);
  }
  if (v51)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v51 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v30 = v51;
      if (v51)
      {
        uint64_t v51 = 0;
        uint64_t v31 = *(void *)(v30 + 8);
        if (!v31)
        {
          uint64_t v31 = v50;
          if (!v50) {
            uint64_t v31 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 48))(v31, v30);
      }
    }
  }
  uint64_t v51 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  if (SDWORD1(v47) >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = v52;
    do
      v33[v32++] = 0;
    while (v32 < SDWORD1(v47));
  }
  if (v53 != v54) {
    j__free(v53);
  }
  if (v56) {
    sub_1002D6888(v55);
  }
}

void sub_100298BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1000094F4((uint64_t)va1);
  sub_1000094F4((uint64_t)va2);
  sub_10020FA00(v2 - 48);
  _Unwind_Resume(a1);
}

void sub_100298C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v17 - 48);
  _Unwind_Resume(a1);
}

void sub_100298CAC(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 48);
  _Unwind_Resume(a1);
}

unint64_t sub_100298CD4(unsigned int *a1, int a2, int a3, char a4)
{
  if (!*((void *)a1 + 2)) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = *a1;
  if (a3 >= 1 && (*a1 & 7) != a3) {
    return 0xFFFFFFFFLL;
  }
  if (v4 & 0x4000) == 0 && (a4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = a1[1];
  if (v5 == 3)
  {
    if ((v4 & 0xFF8) == 0)
    {
      uint64_t v10 = (int *)*((void *)a1 + 8);
      if (v10[2] == a2
        && (*v10 == 1 || v10[1] == 1)
        && ((v4 & 0x4000) != 0 || *(void *)(*((void *)a1 + 9) + 8) == *(void *)(*((void *)a1 + 9) + 16) * a2))
      {
        uint64_t v7 = *v10 * (uint64_t)v10[1];
        uint64_t v6 = v10[2];
        return (v7 * v6 + v7 * v6 * ((v4 >> 3) & 0x1FF)) / a2;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (v5 != 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = (int)a1[2];
  if ((v6 == 1 || (LODWORD(v7) = a1[3], v7 == 1))
    && (LODWORD(v7) = a1[3], ((v4 >> 3) & 0x1FF) + 1 == a2)
    || (result = 0xFFFFFFFFLL, (v4 & 0xFF8) == 0) && (BOOL v9 = v7 == a2, LODWORD(v7) = a2, v9))
  {
    uint64_t v7 = (int)v7;
    return (v7 * v6 + v7 * v6 * ((v4 >> 3) & 0x1FF)) / a2;
  }
  return result;
}

void sub_100298DD4(double *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  sub_1002D6AE8(v116, &off_100495D50);
  uint64_t v8 = (a3 >> 3) & 0x1FF;
  if (v8 >= 4)
  {
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    BOOL v9 = (_DWORD *)sub_1002D19D8(&v114, 7);
    *(_DWORD *)((char *)v9 + 3) = 874528060;
    _DWORD *v9 = 1008758371;
    sub_1002D2278(-215, &v114, "scalarToRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1168);
  }
  uint64_t v10 = v8 + 1;
  switch(a3 & 7)
  {
    case 0uLL:
      uint64_t v11 = (unsigned char *)a2;
      uint64_t v12 = v8 + 1;
      do
      {
        double v13 = *a1++;
        double v14 = rint(v13);
        int v15 = (uint64_t)v14 & ~((int)(uint64_t)v14 >> 31);
        if (v15 >= 255) {
          LOBYTE(v15) = -1;
        }
        *v11++ = v15;
        --v12;
      }
      while (v12);
      if ((int)v10 >= (int)a4) {
        goto LABEL_94;
      }
      unint64_t v16 = ~v8 + a4;
      if (v16 < 8 || (unint64_t)(v8 + 1) < 0x20)
      {
        uint64_t v17 = v8 + 1;
        goto LABEL_12;
      }
      if (v16 >= 0x20)
      {
        unint64_t v100 = v16 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v102 = v16 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v103 = (_OWORD *)a2;
        do
        {
          long long v104 = v103[1];
          uint64_t v105 = (char *)v103 + v8;
          *(_OWORD *)(v105 + 1) = *v103;
          *(_OWORD *)(v105 + 17) = v104;
          v103 += 2;
          v102 -= 32;
        }
        while (v102);
        if (v16 == v100) {
          goto LABEL_94;
        }
        if ((v16 & 0x18) == 0)
        {
          uint64_t v17 = v100 + v10;
LABEL_12:
          uint64_t v18 = a4 - v17;
          uint64_t v19 = (unsigned char *)(a2 + v17);
          do
          {
            unsigned char *v19 = v19[~v8];
            ++v19;
            --v18;
          }
          while (v18);
          goto LABEL_94;
        }
      }
      else
      {
        unint64_t v100 = 0;
      }
      uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + v10;
      v106 = (void *)(a2 + v100);
      unint64_t v107 = v100 - (v16 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(void *)((char *)v106 + v10) = *v106;
        ++v106;
        v107 += 8;
      }
      while (v107);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_12;
      }
      goto LABEL_94;
    case 1uLL:
      uint64_t v59 = (unsigned char *)a2;
      uint64_t v60 = v8 + 1;
      do
      {
        double v61 = *a1++;
        uint64_t v62 = (uint64_t)rint(v61);
        if ((int)v62 <= -128) {
          LODWORD(v62) = -128;
        }
        if ((int)v62 >= 127) {
          LOBYTE(v62) = 127;
        }
        *v59++ = v62;
        --v60;
      }
      while (v60);
      if ((int)v10 >= (int)a4) {
        goto LABEL_94;
      }
      unint64_t v63 = ~v8 + a4;
      if (v63 < 8 || (unint64_t)(v8 + 1) < 0x20)
      {
        uint64_t v64 = v8 + 1;
        goto LABEL_65;
      }
      if (v63 >= 0x20)
      {
        unint64_t v101 = v63 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v108 = v63 & 0xFFFFFFFFFFFFFFE0;
        int v109 = (_OWORD *)a2;
        do
        {
          long long v110 = v109[1];
          int v111 = (char *)v109 + v8;
          *(_OWORD *)(v111 + 1) = *v109;
          *(_OWORD *)(v111 + 17) = v110;
          v109 += 2;
          v108 -= 32;
        }
        while (v108);
        if (v63 == v101) {
          goto LABEL_94;
        }
        if ((v63 & 0x18) == 0)
        {
          uint64_t v64 = v101 + v10;
LABEL_65:
          uint64_t v65 = a4 - v64;
          int v66 = (unsigned char *)(a2 + v64);
          do
          {
            unsigned char *v66 = v66[~v8];
            ++v66;
            --v65;
          }
          while (v65);
          goto LABEL_94;
        }
      }
      else
      {
        unint64_t v101 = 0;
      }
      uint64_t v64 = (v63 & 0xFFFFFFFFFFFFFFF8) + v10;
      int v112 = (void *)(a2 + v101);
      unint64_t v113 = v101 - (v63 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(void *)((char *)v112 + v10) = *v112;
        ++v112;
        v113 += 8;
      }
      while (v113);
      if (v63 != (v63 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_65;
      }
LABEL_94:
      if (v117) {
        sub_1002D6888(v116);
      }
      return;
    case 2uLL:
      unint64_t v20 = v10;
      uint64_t v21 = (_WORD *)a2;
      uint64_t v22 = v10;
      do
      {
        double v23 = *a1++;
        double v24 = rint(v23);
        int v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
        if (v25 >= 0xFFFF) {
          LOWORD(v25) = -1;
        }
        *v21++ = v25;
        --v22;
      }
      while (v22);
      if ((int)v10 < (int)a4)
      {
        unint64_t v26 = ~v8 + a4;
        if (v26 < 0x10) {
          goto LABEL_25;
        }
        uint64_t v27 = 2 * ((a3 >> 3) & 0x1FF);
        if ((unint64_t)(v27 + 2) < 0x20) {
          goto LABEL_25;
        }
        unint64_t v20 = (v26 & 0xFFFFFFFFFFFFFFF0) + v10;
        unint64_t v28 = v26 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v29 = (_OWORD *)a2;
        do
        {
          long long v30 = v29[1];
          uint64_t v31 = (char *)v29 + v27;
          *(_OWORD *)(v31 + 2) = *v29;
          *(_OWORD *)(v31 + 18) = v30;
          v29 += 2;
          v28 -= 16;
        }
        while (v28);
        if (v26 != (v26 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_25:
          unint64_t v32 = a4 - v20;
          uint64_t v33 = (_WORD *)(a2 + 2 * v20);
          do
          {
            _WORD *v33 = v33[~v8];
            ++v33;
            --v32;
          }
          while (v32);
        }
      }
      goto LABEL_94;
    case 3uLL:
      unint64_t v34 = v10;
      uint64_t v35 = (_WORD *)a2;
      uint64_t v36 = v10;
      do
      {
        double v37 = *a1++;
        uint64_t v38 = (uint64_t)rint(v37);
        if ((int)v38 <= -32768) {
          LODWORD(v38) = -32768;
        }
        if ((int)v38 >= 0x7FFF) {
          LOWORD(v38) = 0x7FFF;
        }
        *v35++ = v38;
        --v36;
      }
      while (v36);
      if ((int)v10 < (int)a4)
      {
        unint64_t v39 = ~v8 + a4;
        if (v39 < 0x10) {
          goto LABEL_40;
        }
        uint64_t v40 = 2 * ((a3 >> 3) & 0x1FF);
        if ((unint64_t)(v40 + 2) < 0x20) {
          goto LABEL_40;
        }
        unint64_t v34 = (v39 & 0xFFFFFFFFFFFFFFF0) + v10;
        unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v42 = (_OWORD *)a2;
        do
        {
          long long v43 = v42[1];
          unsigned int v44 = (char *)v42 + v40;
          *(_OWORD *)(v44 + 2) = *v42;
          *(_OWORD *)(v44 + 18) = v43;
          v42 += 2;
          v41 -= 16;
        }
        while (v41);
        if (v39 != (v39 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_40:
          unint64_t v45 = a4 - v34;
          long long v46 = (_WORD *)(a2 + 2 * v34);
          do
          {
            *long long v46 = v46[~v8];
            ++v46;
            --v45;
          }
          while (v45);
        }
      }
      goto LABEL_94;
    case 4uLL:
      unint64_t v47 = v10;
      long long v48 = (_DWORD *)a2;
      uint64_t v49 = v10;
      do
      {
        double v50 = *a1++;
        *v48++ = (uint64_t)rint(v50);
        --v49;
      }
      while (v49);
      if ((int)v10 < (int)a4)
      {
        unint64_t v51 = ~v8 + a4;
        if (v51 < 8) {
          goto LABEL_51;
        }
        uint64_t v52 = 4 * ((a3 >> 3) & 0x1FF);
        if ((unint64_t)(v52 + 4) < 0x20) {
          goto LABEL_51;
        }
        unint64_t v47 = (v51 & 0xFFFFFFFFFFFFFFF8) + v10;
        unint64_t v53 = v51 & 0xFFFFFFFFFFFFFFF8;
        int v54 = (_OWORD *)a2;
        do
        {
          long long v55 = v54[1];
          int v56 = (char *)v54 + v52;
          *(_OWORD *)(v56 + 4) = *v54;
          *(_OWORD *)(v56 + 20) = v55;
          v54 += 2;
          v53 -= 8;
        }
        while (v53);
        if (v51 != (v51 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_51:
          unint64_t v57 = a4 - v47;
          int v58 = (_DWORD *)(a2 + 4 * v47);
          do
          {
            *int v58 = v58[~v8];
            ++v58;
            --v57;
          }
          while (v57);
        }
      }
      goto LABEL_94;
    case 5uLL:
      unint64_t v67 = v10;
      uint64_t v87 = ((a3 >> 3) & 0x1FF) + 1;
      int v88 = (float *)a2;
      int v89 = a1;
      do
      {
        double v90 = *v89++;
        float v91 = v90;
        *v88++ = v91;
        --v87;
      }
      while (v87);
      if ((int)v10 < (int)a4)
      {
        unint64_t v92 = ~v8 + a4;
        if (v92 < 8) {
          goto LABEL_92;
        }
        uint64_t v93 = 4 * ((a3 >> 3) & 0x1FF);
        if ((unint64_t)(v93 + 4) < 0x20) {
          goto LABEL_92;
        }
        unint64_t v67 = (v92 & 0xFFFFFFFFFFFFFFF8) + v10;
        unint64_t v94 = v92 & 0xFFFFFFFFFFFFFFF8;
        int v95 = (_OWORD *)a2;
        do
        {
          long long v96 = v95[1];
          uint64_t v97 = (char *)v95 + v93;
          *(_OWORD *)(v97 + 4) = *v95;
          *(_OWORD *)(v97 + 20) = v96;
          v95 += 2;
          v94 -= 8;
        }
        while (v94);
        if (v92 != (v92 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_92:
          unint64_t v98 = a4 - v67;
          uint64_t v99 = (_DWORD *)(a2 + 4 * v67);
          do
          {
            *uint64_t v99 = v99[~v8];
            ++v99;
            --v98;
          }
          while (v98);
        }
      }
      goto LABEL_94;
    case 6uLL:
      uint64_t v68 = 0;
      unint64_t v69 = v10;
      if (v8 < 3) {
        goto LABEL_74;
      }
      if ((unint64_t)(a2 - (void)a1) < 0x20) {
        goto LABEL_74;
      }
      uint64_t v68 = v10 & 0x3FC;
      int v70 = (long long *)(a1 + 2);
      int v71 = (_OWORD *)(a2 + 16);
      uint64_t v72 = v68;
      do
      {
        long long v73 = *v70;
        *(v71 - 1) = *(v70 - 1);
        _OWORD *v71 = v73;
        v70 += 2;
        v71 += 2;
        v72 -= 4;
      }
      while (v72);
      if (v68 != v10)
      {
LABEL_74:
        uint64_t v74 = ((a3 >> 3) & 0x1FF) - v68 + 1;
        uint64_t v75 = v68;
        uint64_t v76 = (void *)(a2 + 8 * v68);
        uint64_t v77 = &a1[v75];
        do
        {
          uint64_t v78 = *(void *)v77++;
          *v76++ = v78;
          --v74;
        }
        while (v74);
      }
      if ((int)v10 < (int)a4)
      {
        unint64_t v79 = ~v8 + a4;
        if (v79 < 8) {
          goto LABEL_82;
        }
        uint64_t v80 = a3 & 0xFF8;
        if ((unint64_t)(v80 + 8) < 0x20) {
          goto LABEL_82;
        }
        unint64_t v69 = (v79 & 0xFFFFFFFFFFFFFFFCLL) + v10;
        unint64_t v81 = v79 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v82 = (_OWORD *)a2;
        do
        {
          long long v83 = v82[1];
          uint64_t v84 = (char *)v82 + v80;
          *(_OWORD *)(v84 + 8) = *v82;
          *(_OWORD *)(v84 + 24) = v83;
          v82 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v79 != (v79 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_82:
          unint64_t v85 = a4 - v69;
          uint64_t v86 = (void *)(a2 + 8 * v69);
          do
          {
            void *v86 = v86[~v8];
            ++v86;
            --v85;
          }
          while (v85);
        }
      }
      goto LABEL_94;
    default:
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      sub_1002D2278(-210, &v114, "scalarToRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1193);
  }
}

void sub_1002994F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_100299554(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)a1;
  switch(HIWORD(*(_DWORD *)a1) & 0x1F)
  {
    case 0:
      goto LABEL_60;
    case 1:
      uint64_t v8 = *(void *)(a1 + 8);
      if ((a2 & 0x80000000) == 0)
      {
        __src.i32[0] = a2;
        __src.i32[1] = a2 + 1;
        uint64_t v45 = 0x7FFFFFFF80000000;
        sub_100293374(a3, (_DWORD *)v8, (int *)&__src, &v45);
        return;
      }
      *(_OWORD *)a3 = *(_OWORD *)v8;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v8 + 32);
      *(void *)(a3 + 48) = *(void *)(v8 + 48);
      uint64_t v39 = *(void *)(v8 + 56);
      *(void *)(a3 + 56) = v39;
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 72) = a3 + 80;
      *(void *)(a3 + 88) = 0;
      if (v39) {
        atomic_fetch_add((atomic_uint *volatile)(v39 + 20), 1u);
      }
      if (*(int *)(v8 + 4) <= 2)
      {
        uint64_t v19 = *(void **)(v8 + 72);
        goto LABEL_74;
      }
      *(_DWORD *)(a3 + 4) = 0;
      sub_1002931A8(a3, v8);
      break;
    case 2:
    case 0xE:
      if ((a2 & 0x80000000) == 0)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        uint64_t v7 = sub_1002D19D8(&__src, 5);
        *(unsigned char *)(v7 + 4) = 48;
        *(_DWORD *)uint64_t v7 = 540811369;
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1231);
      }
      uint64_t v43 = *(void *)(a1 + 16);
      sub_10026BD1C(a3, (int *)&v43, v4, *(void *)(a1 + 8), 0);
      return;
    case 3:
      if ((a2 & 0x80000000) == 0)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        uint64_t v9 = sub_1002D19D8(&__src, 5);
        *(unsigned char *)(v9 + 4) = 48;
        *(_DWORD *)uint64_t v9 = 540811369;
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1237);
      }
      uint64_t v10 = *(uint64_t **)(a1 + 8);
      if (*v10 == v10[1]) {
        goto LABEL_60;
      }
      unsigned int v11 = *(_DWORD *)a1;
      sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)&v42);
      sub_10026BD1C(a3, &v42, v11 & 0xFFF, *v10, 0);
      return;
    case 4:
      unsigned int v12 = sub_10029AB74((int *)a1, a2);
      double v13 = *(void **)(a1 + 8);
      if (a2 < 0 || (int)(-1431655765 * ((v13[1] - *v13) >> 3)) <= a2)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 28), "0 <= i && i < (int)vv.size()", 28);
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1266);
      }
      double v14 = (uint64_t *)(*v13 + 24 * a2);
      if (*v14 == v14[1])
      {
LABEL_60:
        *(_DWORD *)a3 = 1124007936;
        *(_OWORD *)(a3 + 4) = 0u;
        *(_OWORD *)(a3 + 20) = 0u;
        *(_OWORD *)(a3 + 36) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 64) = a3 + 8;
        *(void *)(a3 + 72) = a3 + 80;
        *(void *)(a3 + 88) = 0;
      }
      else
      {
        sub_10029A23C(a1, a2, (uint64_t)&v41);
        sub_10026BD1C(a3, &v41, v12, *v14, 0);
      }
      return;
    case 5:
      int v15 = *(uint64_t **)(a1 + 8);
      if (a2 < 0 || (uint64_t v16 = *v15, (int)(-1431655765 * ((unint64_t)(v15[1] - *v15) >> 5)) <= a2))
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 27), "0 <= i && i < (int)v.size()", 27);
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1275);
      }
      uint64_t v17 = v16 + 96 * a2;
      *(_OWORD *)a3 = *(_OWORD *)v17;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v17 + 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v17 + 32);
      *(void *)(a3 + 48) = *(void *)(v17 + 48);
      uint64_t v18 = *(void *)(v17 + 56);
      *(void *)(a3 + 56) = v18;
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 72) = a3 + 80;
      *(void *)(a3 + 88) = 0;
      if (v18) {
        atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
      }
      if (*(int *)(v17 + 4) > 2) {
        goto LABEL_68;
      }
      uint64_t v19 = *(void **)(v16 + 96 * a2 + 72);
      goto LABEL_74;
    case 6:
      if ((a2 & 0x80000000) == 0)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        uint64_t v20 = sub_1002D19D8(&__src, 5);
        *(unsigned char *)(v20 + 4) = 48;
        *(_DWORD *)uint64_t v20 = 540811369;
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1225);
      }
      uint64_t v21 = *(void **)(a1 + 8);
      *(_DWORD *)a3 = 1124007936;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 36) = 0u;
      *(_OWORD *)(a3 + 20) = 0u;
      *(_OWORD *)(a3 + 4) = 0u;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 72) = a3 + 80;
      *(void *)(a3 + 88) = 0;
      (*(void (**)(void, void *, uint64_t, uint64_t))(*(void *)*v21 + 24))(*v21, v21, a3, 0xFFFFFFFFLL);
      return;
    case 7:
      if ((a2 & 0x80000000) == 0)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        uint64_t v22 = sub_1002D19D8(&__src, 5);
        *(unsigned char *)(v22 + 4) = 48;
        *(_DWORD *)uint64_t v22 = 540811369;
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1298);
      }
      int32x2_t __src = 0;
      uint64_t v47 = 0;
      qmemcpy((void *)sub_1002D19D8(&__src, 75), "You should explicitly call mapHost/unmapHost methods for ogl::Buffer object", 75);
      sub_1002D2278(-213, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1299);
    case 8:
      if ((a2 & 0x80000000) == 0)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        uint64_t v23 = sub_1002D19D8(&__src, 5);
        *(unsigned char *)(v23 + 4) = 48;
        *(_DWORD *)uint64_t v23 = 540811369;
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1312);
      }
      uint64_t v24 = *(void *)(a1 + 8);
      int32x2_t __src = vrev64_s32(*(int32x2_t *)(v24 + 4));
      sub_10026BD1C(a3, (int *)&__src, *(_DWORD *)v24 & 0xFFF, *(void *)(v24 + 24), *(void *)(v24 + 16));
      return;
    case 9:
      if ((a2 & 0x80000000) == 0)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        uint64_t v25 = sub_1002D19D8(&__src, 5);
        *(unsigned char *)(v25 + 4) = 48;
        *(_DWORD *)uint64_t v25 = 540811369;
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1305);
      }
      int32x2_t __src = 0;
      uint64_t v47 = 0;
      qmemcpy((void *)sub_1002D19D8(&__src, 66), "You should explicitly call download method for cuda::GpuMat object", 66);
      sub_1002D2278(-213, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1306);
    case 0xA:
      uint64_t v26 = *(void *)(a1 + 8);
      if (a2 < 0)
      {
        sub_1002DB994(v26, v4 & 0x3000000, a3);
      }
      else
      {
        sub_1002DB994(v26, v4 & 0x3000000, (uint64_t)&__src);
        LODWORD(v45) = a2;
        HIDWORD(v45) = a2 + 1;
        uint64_t v44 = 0x7FFFFFFF80000000;
        sub_100293374(a3, &__src, (int *)&v45, &v44);
        if (v51)
        {
          if (atomic_fetch_add((atomic_uint *volatile)(v51 + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v27 = v51;
            if (v51)
            {
              uint64_t v51 = 0;
              uint64_t v28 = *(void *)(v27 + 8);
              if (!v28)
              {
                uint64_t v28 = v50;
                if (!v50) {
                  uint64_t v28 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 48))(v28, v27);
            }
          }
        }
        uint64_t v51 = 0;
        long long v48 = 0u;
        long long v49 = 0u;
        if (__src.i32[1] >= 1)
        {
          uint64_t v29 = 0;
          uint64_t v30 = v52;
          do
            *(_DWORD *)(v30 + 4 * v29++) = 0;
          while (v29 < __src.i32[1]);
        }
        if (v53 != &v54) {
          j__free(v53);
        }
      }
      return;
    case 0xB:
      uint64_t v31 = *(void **)(a1 + 8);
      if (a2 < 0 || (int)(-858993459 * ((v31[1] - *v31) >> 4)) <= a2)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 27), "0 <= i && i < (int)v.size()", 27);
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1291);
      }
      sub_1002DB994(*v31 + 80 * a2, v4 & 0x3000000, a3);
      return;
    case 0xC:
      if ((a2 & 0x80000000) == 0)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        uint64_t v32 = sub_1002D19D8(&__src, 5);
        *(unsigned char *)(v32 + 4) = 48;
        *(_DWORD *)uint64_t v32 = 540811369;
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1246);
      }
      uint64_t v33 = *(void **)(a1 + 8);
      uint64_t v34 = v33[1];
      *(_DWORD *)a3 = 1124007936;
      *(_OWORD *)(a3 + 4) = 0u;
      *(_OWORD *)(a3 + 20) = 0u;
      *(_OWORD *)(a3 + 36) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 72) = a3 + 80;
      *(void *)(a3 + 88) = 0;
      if (v34)
      {
        __src.i32[0] = 1;
        __src.i32[1] = v34;
        sub_100292534((char *)a3, 2, (uint64_t *)&__src, 0);
        if ((int)v34 >= 1)
        {
          unint64_t v35 = 0;
          uint64_t v36 = *(void *)(a3 + 16);
          do
          {
            *(unsigned char *)(v36 + v35) = (*(void *)(*v33 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1;
            ++v35;
          }
          while (v34 != v35);
        }
      }
      return;
    case 0xF:
      uint64_t v37 = *(void *)(a1 + 8);
      if (a2 < 0 || *(_DWORD *)(a1 + 20) <= a2)
      {
        int32x2_t __src = 0;
        uint64_t v47 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 23), "0 <= i && i < sz.height", 23);
        sub_1002D2278(-215, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1283);
      }
      uint64_t v17 = v37 + 96 * a2;
      *(_OWORD *)a3 = *(_OWORD *)v17;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v17 + 16);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v17 + 32);
      *(void *)(a3 + 48) = *(void *)(v17 + 48);
      uint64_t v38 = *(void *)(v17 + 56);
      *(void *)(a3 + 56) = v38;
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 72) = a3 + 80;
      *(void *)(a3 + 88) = 0;
      if (v38) {
        atomic_fetch_add((atomic_uint *volatile)(v38 + 20), 1u);
      }
      if (*(int *)(v17 + 4) > 2)
      {
LABEL_68:
        *(_DWORD *)(a3 + 4) = 0;
        sub_1002931A8(a3, v17);
      }
      else
      {
        uint64_t v19 = *(void **)(v37 + 96 * a2 + 72);
LABEL_74:
        uint64_t v40 = *(void **)(a3 + 72);
        *uint64_t v40 = *v19;
        v40[1] = v19[1];
      }
      break;
    default:
      int32x2_t __src = 0;
      uint64_t v47 = 0;
      qmemcpy((void *)sub_1002D19D8(&__src, 30), "Unknown/unsupported array type", 30);
      sub_1002D2278(-213, (uint64_t *)&__src, "getMat_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1319);
  }
}

void sub_10029A05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029A230(_DWORD *a1)
{
  return *a1 & 0x1F0000;
}

uint64_t sub_10029A23C@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  switch(*(_WORD *)(result + 2) & 0x1F)
  {
    case 0:
      goto LABEL_54;
    case 1:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v5 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v5 = 540811369;
        *(unsigned char *)(v5 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1592);
      }
      uint64_t v6 = *(void *)(result + 8);
      goto LABEL_50;
    case 2:
    case 0xE:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v4 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v4 = 540811369;
        *(unsigned char *)(v4 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1610);
      }
      *(void *)a3 = *(void *)(result + 16);
      return result;
    case 3:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v7 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v7 = 540811369;
        *(unsigned char *)(v7 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1616);
      }
      int64_t v8 = *(void *)(*(void *)(result + 8) + 8) - **(void **)(result + 8);
      if (v8 != v8 >> 2) {
        v8 /= (unint64_t)((((*(_DWORD *)result >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)result & 7))) & 3));
      }
      goto LABEL_67;
    case 4:
      uint64_t v9 = *(void **)(result + 8);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)(-1431655765 * ((v9[1] - *v9) >> 3)) <= (int)a2)
        {
          sub_10022F344(&v28, "i < (int)vv.size()");
          sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1638);
        }
        uint64_t v10 = *(void *)(*v9 + 24 * a2 + 8) - *(void *)(*v9 + 24 * a2);
        if (v10 == v10 >> 2)
        {
          *(_DWORD *)a3 = v10;
          *(_DWORD *)(a3 + 4) = 1;
          return result;
        }
        int64_t v8 = v10
           / (unint64_t)((((*(_DWORD *)result >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)result & 7))) & 3));
        goto LABEL_67;
      }
      uint64_t v23 = v9[1];
      if (*v9 == v23) {
        goto LABEL_54;
      }
      unint64_t v24 = (unint64_t)(v23 - *v9) >> 3;
      goto LABEL_59;
    case 5:
      unsigned int v11 = *(void **)(result + 8);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)(-1431655765 * ((v11[1] - *v11) >> 5)) <= (int)a2)
        {
          sub_10022F344(&v28, "i < (int)vv.size()");
          sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1650);
        }
        uint64_t v6 = *v11 + 96 * a2;
        goto LABEL_50;
      }
      uint64_t v25 = v11[1];
      if (*v11 == v25) {
        goto LABEL_54;
      }
      unint64_t v24 = (unint64_t)(v25 - *v11) >> 5;
LABEL_59:
      signed int v22 = -1431655765 * v24;
      goto LABEL_65;
    case 6:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v12 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v12 = 540811369;
        *(unsigned char *)(v12 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1598);
      }
      return sub_10028C9AC(*(void *)(result + 8), a3);
    case 7:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v13 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v13 = 540811369;
        *(unsigned char *)(v13 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1686);
      }
      int32x2_t v14 = *(int32x2_t *)(*(void *)(result + 8) + 16);
      goto LABEL_52;
    case 8:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v15 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v15 = 540811369;
        *(unsigned char *)(v15 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1700);
      }
      goto LABEL_31;
    case 9:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v16 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v16 = 540811369;
        *(unsigned char *)(v16 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1693);
      }
LABEL_31:
      int32x2_t v14 = *(int32x2_t *)(*(void *)(result + 8) + 4);
      goto LABEL_52;
    case 0xA:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v17 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v17 = 540811369;
        *(unsigned char *)(v17 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1604);
      }
      uint64_t v18 = *(int32x2_t **)(*(void *)(result + 8) + 48);
      goto LABEL_51;
    case 0xB:
      uint64_t v19 = *(void **)(result + 8);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)(-858993459 * ((v19[1] - *v19) >> 4)) <= (int)a2)
        {
          sub_10022F344(&v28, "i < (int)vv.size()");
          sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1679);
        }
        uint64_t v18 = *(int32x2_t **)(*v19 + 80 * a2 + 48);
        goto LABEL_51;
      }
      uint64_t v26 = v19[1];
      if (*v19 == v26) {
        goto LABEL_54;
      }
      signed int v22 = -858993459 * ((unint64_t)(v26 - *v19) >> 4);
      goto LABEL_65;
    case 0xC:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v20 = sub_1002D19D8(&v28, 5);
        *(_DWORD *)uint64_t v20 = 540811369;
        *(unsigned char *)(v20 + 4) = 48;
        sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1625);
      }
      int64_t v8 = *(void *)(*(void *)(result + 8) + 8);
      goto LABEL_67;
    case 0xD:
      uint64_t v21 = *(void **)(result + 8);
      if ((a2 & 0x80000000) == 0)
      {
        if ((int)((v21[1] - *v21) >> 6) <= (int)a2)
        {
          sub_10022F344(&v28, "i < (int)vv.size()");
          sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1670);
        }
        int32x2_t v14 = *(int32x2_t *)(*v21 + ((unint64_t)a2 << 6) + 4);
        goto LABEL_52;
      }
      uint64_t v27 = v21[1];
      if (*v21 == v27) {
        goto LABEL_54;
      }
      int64_t v8 = (unint64_t)(v27 - *v21) >> 6;
LABEL_67:
      *(_DWORD *)a3 = v8;
      *(_DWORD *)(a3 + 4) = 1;
      break;
    case 0xF:
      signed int v22 = *(_DWORD *)(result + 20);
      if ((a2 & 0x80000000) != 0)
      {
        if (v22)
        {
LABEL_65:
          *(_DWORD *)a3 = v22;
          *(_DWORD *)(a3 + 4) = 1;
        }
        else
        {
LABEL_54:
          *(void *)a3 = 0;
        }
      }
      else
      {
        if (v22 <= (int)a2)
        {
          sub_10022F344(&v28, "i < sz.height");
          sub_1002D2278(-215, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1660);
        }
        uint64_t v6 = *(void *)(result + 8) + 96 * a2;
LABEL_50:
        uint64_t v18 = *(int32x2_t **)(v6 + 64);
LABEL_51:
        int32x2_t v14 = *v18;
LABEL_52:
        *(int32x2_t *)a3 = vrev64_s32(v14);
      }
      break;
    default:
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      qmemcpy((void *)sub_1002D19D8(&v28, 30), "Unknown/unsupported array type", 30);
      sub_1002D2278(-213, &v28, "size", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1705);
  }
  return result;
}

void sub_10029A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029AB74(int *a1, int a2)
{
  int v3 = *a1;
  unsigned int v4 = *a1 & 0x1F0000;
  switch(v4)
  {
    case 0xA0000u:
      return **((_DWORD **)a1 + 1) & 0xFFF;
    case 0x60000u:
      uint64_t v6 = *((void *)a1 + 1);
      return sub_10028CAE8(v6);
    case 0x10000u:
      return **((_DWORD **)a1 + 1) & 0xFFF;
    default:
      if ((v3 & 0x170000) != 0x40000 && (v3 & 0x1E0000) != 0x20000 && v4 != 917504)
      {
        uint64_t result = 0xFFFFFFFFLL;
        switch(HIWORD(v4))
        {
          case 0u:
            return result;
          case 5u:
            uint64_t v7 = (uint64_t *)*((void *)a1 + 1);
            uint64_t v8 = *v7;
            uint64_t v9 = v7[1];
            if (*v7 != v9)
            {
              if ((int)(-1431655765 * ((unint64_t)(v9 - v8) >> 5)) <= a2)
              {
                sub_10022F344(v19, "i < (int)vv.size()");
                sub_1002D2278(-215, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1997);
              }
              unsigned int v10 = a2 & ~(a2 >> 31);
              unsigned int v11 = 96;
              goto LABEL_22;
            }
            if ((v3 & 0x80000000) == 0)
            {
              sub_10022F344(v19, "(flags & FIXED_TYPE) != 0");
              sub_1002D2278(-215, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1994);
            }
            return v3 & 0xFFF;
          case 7u:
            return *(unsigned int *)(*((void *)a1 + 1) + 24);
          case 8u:
          case 9u:
            return **((_DWORD **)a1 + 1) & 0xFFF;
          case 0xBu:
            uint64_t v12 = (uint64_t *)*((void *)a1 + 1);
            uint64_t v8 = *v12;
            uint64_t v13 = v12[1];
            if (*v12 == v13)
            {
              if ((v3 & 0x80000000) == 0)
              {
                sub_10022F344(v19, "(flags & FIXED_TYPE) != 0");
                sub_1002D2278(-215, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1982);
              }
              return v3 & 0xFFF;
            }
            if ((int)(-858993459 * ((unint64_t)(v13 - v8) >> 4)) <= a2)
            {
              sub_10022F344(v19, "i < (int)vv.size()");
              sub_1002D2278(-215, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1985);
            }
            unsigned int v10 = a2 & ~(a2 >> 31);
            unsigned int v11 = 80;
LABEL_22:
            unint64_t v14 = v10 * (unint64_t)v11;
            return *(_DWORD *)(v8 + v14) & 0xFFF;
          case 0xDu:
            uint64_t v15 = (uint64_t *)*((void *)a1 + 1);
            uint64_t v8 = *v15;
            uint64_t v16 = v15[1];
            if (*v15 == v16)
            {
              if ((v3 & 0x80000000) == 0)
              {
                sub_10022F344(v19, "(flags & FIXED_TYPE) != 0");
                sub_1002D2278(-215, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2018);
              }
              return v3 & 0xFFF;
            }
            if ((int)((unint64_t)(v16 - v8) >> 6) <= a2)
            {
              sub_10022F344(v19, "i < (int)vv.size()");
              sub_1002D2278(-215, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2021);
            }
            unint64_t v14 = (unint64_t)(a2 & ~(a2 >> 31)) << 6;
            return *(_DWORD *)(v8 + v14) & 0xFFF;
          case 0xFu:
            int v17 = a1[5];
            if (v17)
            {
              uint64_t v18 = *((void *)a1 + 1);
              if (v17 <= a2)
              {
                sub_10022F344(v19, "i < sz.height");
                sub_1002D2278(-215, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2009);
              }
              return *(_DWORD *)(v18 + 96 * (a2 & ~(a2 >> 31))) & 0xFFF;
            }
            if ((v3 & 0x80000000) == 0)
            {
              sub_10022F344(v19, "(flags & FIXED_TYPE) != 0");
              sub_1002D2278(-215, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2006);
            }
            return result;
          default:
            sub_10022F344(v19, "Unknown/unsupported array type");
            sub_1002D2278(-213, v19, "type", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2034);
        }
      }
      return v3 & 0xFFF;
  }
}

void sub_10029AFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029B0D0(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)a1;
  int v6 = *(_DWORD *)a1 & 0x1F0000;
  uint64_t v7 = *(_DWORD *)a1 & 0x3000000;
  if (v6 == 0x10000)
  {
    uint64_t v9 = *(_DWORD **)(a1 + 8);
    if (a2 < 0)
    {
      uint64_t v22 = *(void *)(a1 + 8);
      sub_1002D94B4(v22, v5 & 0x3000000, 0, a3);
      return;
    }
    LODWORD(v36) = a2;
    HIDWORD(v36) = a2 + 1;
    uint64_t v35 = 0x7FFFFFFF80000000;
    sub_100293374((uint64_t)&v27, v9, (int *)&v36, &v35);
    sub_1002D94B4((uint64_t)&v27, v7, 0, a3);
    if (v31)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v31 + 20), 0xFFFFFFFF) == 1)
      {
        uint64_t v10 = v31;
        if (v31)
        {
          uint64_t v31 = 0;
          uint64_t v11 = *(void *)(v10 + 8);
          if (!v11)
          {
            uint64_t v11 = v30;
            if (!v30) {
              uint64_t v11 = sub_10029230C();
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v10);
        }
      }
    }
    uint64_t v31 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    if (SDWORD1(v27) >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v32;
      do
        *(_DWORD *)(v13 + 4 * v12++) = 0;
      while (v12 < SDWORD1(v27));
    }
    unint64_t v14 = v33;
    if (v33 == &v34) {
      return;
    }
LABEL_19:
    j__free(v14);
    return;
  }
  if (v6 == 720896)
  {
    uint64_t v15 = *(uint64_t **)(a1 + 8);
    if (a2 < 0 || (uint64_t v16 = *v15, (int)(-858993459 * ((unint64_t)(v15[1] - *v15) >> 4)) <= a2))
    {
      long long v27 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&v27, 27), "0 <= i && i < (int)v.size()", 27);
      sub_1002D2278(-215, (uint64_t *)&v27, "getUMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1339);
    }
    uint64_t v17 = v16 + 80 * a2;
    *(_OWORD *)a3 = *(_OWORD *)v17;
    *(void *)(a3 + 16) = *(void *)(v17 + 16);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v17 + 24);
    uint64_t v18 = *(void *)(v17 + 32);
    *(void *)(a3 + 32) = v18;
    *(void *)(a3 + 40) = *(void *)(v17 + 40);
    *(void *)(a3 + 48) = a3 + 8;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 56) = a3 + 64;
    *(void *)(a3 + 72) = 0;
    if (v18) {
      atomic_fetch_add((atomic_uint *volatile)(v18 + 16), 1u);
    }
    if (*(int *)(v17 + 4) > 2)
    {
      *(_DWORD *)(a3 + 4) = 0;
      sub_1002DA318(a3, v17);
      return;
    }
    uint64_t v19 = *(void **)(v16 + 80 * a2 + 56);
    goto LABEL_33;
  }
  if (v6 != 655360)
  {
    sub_100299554(a1, a2, (uint64_t)&v27);
    sub_1002D94B4((uint64_t)&v27, v7, 0, a3);
    if (v31)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v31 + 20), 0xFFFFFFFF) == 1)
      {
        uint64_t v23 = v31;
        if (v31)
        {
          uint64_t v31 = 0;
          uint64_t v24 = *(void *)(v23 + 8);
          if (!v24)
          {
            uint64_t v24 = v30;
            if (!v30) {
              uint64_t v24 = sub_10029230C();
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 48))(v24, v23);
        }
      }
    }
    uint64_t v31 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    if (SDWORD1(v27) >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = v32;
      do
        *(_DWORD *)(v26 + 4 * v25++) = 0;
      while (v25 < SDWORD1(v27));
    }
    unint64_t v14 = v33;
    if (v33 == &v34) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if ((a2 & 0x80000000) == 0)
  {
    LODWORD(v27) = a2;
    DWORD1(v27) = a2 + 1;
    uint64_t v36 = 0x7FFFFFFF80000000;
    sub_1002DAC04(a3, v8, &v27, &v36);
    return;
  }
  *(_OWORD *)a3 = *(_OWORD *)v8;
  *(void *)(a3 + 16) = *(void *)(v8 + 16);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(v8 + 24);
  uint64_t v20 = *(void *)(v8 + 32);
  *(void *)(a3 + 32) = v20;
  *(void *)(a3 + 40) = *(void *)(v8 + 40);
  *(void *)(a3 + 48) = a3 + 8;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 56) = a3 + 64;
  *(void *)(a3 + 72) = 0;
  if (v20) {
    atomic_fetch_add((atomic_uint *volatile)(v20 + 16), 1u);
  }
  if (*(int *)(v8 + 4) <= 2)
  {
    uint64_t v19 = *(void **)(v8 + 56);
LABEL_33:
    uint64_t v21 = *(void **)(a3 + 56);
    *uint64_t v21 = *v19;
    v21[1] = v19[1];
    return;
  }
  *(_DWORD *)(a3 + 4) = 0;

  sub_1002DA318(a3, v8);
}

void sub_10029B594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029B5C8(uint64_t a1, uint64_t *a2)
{
  unsigned int v2 = *(_DWORD *)a1;
  switch(HIWORD(*(_DWORD *)a1) & 0x1F)
  {
    case 0:
      uint64_t v9 = *a2;
      uint64_t v8 = a2[1];
      if (v8 != *a2)
      {
        do
        {
          v8 -= 96;
          sub_1002A5630((uint64_t)(a2 + 2), v8);
        }
        while (v8 != v9);
      }
      a2[1] = v9;
      return;
    case 1:
      uint64_t v10 = *(int **)(a1 + 8);
      unint64_t v11 = **((int **)v10 + 8);
      uint64_t v12 = a2[1];
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a2) >> 5);
      if (v11 <= v13)
      {
        if (v11 < v13)
        {
          uint64_t v49 = *a2 + 96 * (int)v11;
          while (v12 != v49)
          {
            v12 -= 96;
            sub_1002A5630((uint64_t)(a2 + 2), v12);
          }
          a2[1] = v49;
        }
      }
      else
      {
        sub_1002A525C(a2, v11 - v13);
      }
      if ((int)v11 < 1) {
        return;
      }
      uint64_t v50 = 0;
      break;
    case 2:
    case 0xE:
      unint64_t v5 = *(int *)(a1 + 20);
      uint64_t v6 = a2[1];
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 5);
      if (v5 <= v7)
      {
        if (v5 < v7)
        {
          uint64_t v24 = *a2 + 96 * (int)v5;
          while (v6 != v24)
          {
            v6 -= 96;
            sub_1002A5630((uint64_t)(a2 + 2), v6);
          }
          a2[1] = v24;
        }
      }
      else
      {
        sub_1002A525C(a2, v5 - v7);
      }
      if (v5)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          sub_10000CE64((uint64_t)v127, 1, *(_DWORD *)(a1 + 16), *(_DWORD *)a1 & 0xFFF, *(void *)(a1 + 8)+ i * ((((v2 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v2 & 7))) & 3)) * *(int *)(a1 + 16), 0);
          sub_100287094(*a2 + 96 * i, (uint64_t)v127);
          if (*(void *)&v127[56])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v127[56] + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v26 = *(void *)&v127[56];
              if (*(void *)&v127[56])
              {
                *(void *)&v127[56] = 0;
                uint64_t v27 = *(void *)(v26 + 8);
                if (!v27)
                {
                  uint64_t v27 = *(void *)&v127[48];
                  if (!*(void *)&v127[48]) {
                    uint64_t v27 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 48))(v27, v26);
              }
            }
          }
          *(void *)&v127[56] = 0;
          memset(&v127[16], 0, 32);
          if (*(int *)&v127[4] >= 1)
          {
            uint64_t v28 = 0;
            long long v29 = v128;
            do
              v29[v28++] = 0;
            while (v28 < *(int *)&v127[4]);
          }
          if (v129 != &v130) {
            j__free(v129);
          }
        }
      }
      return;
    case 3:
      uint64_t v30 = *(void **)(a1 + 8);
      sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)v127);
      uint64_t v31 = *(int *)v127;
      unsigned int v32 = *(_DWORD *)a1;
      uint64_t v33 = a2[1];
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v33 - *a2) >> 5);
      if (*(int *)v127 <= v34)
      {
        if (*(int *)v127 < v34)
        {
          uint64_t v88 = *a2 + 96 * *(int *)v127;
          while (v33 != v88)
          {
            v33 -= 96;
            sub_1002A5630((uint64_t)(a2 + 2), v33);
          }
          a2[1] = v88;
        }
      }
      else
      {
        sub_1002A525C(a2, *(int *)v127 - v34);
      }
      if (v31)
      {
        uint64_t v89 = 0;
        unsigned int v90 = v32 & 7;
        int v91 = ((v32 >> 3) & 0x1FF) + 1;
        uint64_t v92 = (v91 << ((0xFA50u >> (2 * (v32 & 7))) & 3));
        do
        {
          sub_10000CE64((uint64_t)v127, 1, v91, v90, *v30 + v89 * v92, 0);
          sub_100287094(*a2 + 96 * v89, (uint64_t)v127);
          if (*(void *)&v127[56])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v127[56] + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v93 = *(void *)&v127[56];
              if (*(void *)&v127[56])
              {
                *(void *)&v127[56] = 0;
                uint64_t v94 = *(void *)(v93 + 8);
                if (!v94)
                {
                  uint64_t v94 = *(void *)&v127[48];
                  if (!*(void *)&v127[48]) {
                    uint64_t v94 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v94 + 48))(v94, v93);
              }
            }
          }
          *(void *)&v127[56] = 0;
          memset(&v127[16], 0, 32);
          if (*(int *)&v127[4] >= 1)
          {
            uint64_t v95 = 0;
            long long v96 = v128;
            do
              v96[v95++] = 0;
            while (v95 < *(int *)&v127[4]);
          }
          if (v129 != &v130) {
            j__free(v129);
          }
          ++v89;
        }
        while (v89 != v31);
      }
      return;
    case 4:
      unint64_t v14 = *(uint64_t **)(a1 + 8);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 3);
      uint64_t v16 = a2[1];
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *a2) >> 5);
      if ((int)v15 <= v17)
      {
        if ((int)v15 < v17)
        {
          uint64_t v77 = *a2 + 96 * (int)v15;
          while (v16 != v77)
          {
            v16 -= 96;
            sub_1002A5630((uint64_t)(a2 + 2), v16);
          }
          a2[1] = v77;
        }
      }
      else
      {
        sub_1002A525C(a2, (int)v15 - v17);
      }
      if ((int)v15 >= 1)
      {
        uint64_t v78 = 0;
        uint64_t v79 = v15;
        do
        {
          uint64_t v80 = *v14;
          sub_10029A23C(a1, v78, (uint64_t)&v117);
          sub_10026BD1C((uint64_t)v127, &v117, v2 & 0xFFF, *(void *)(v80 + 24 * v78), 0);
          sub_100287094(*a2 + 96 * v78, (uint64_t)v127);
          if (*(void *)&v127[56])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v127[56] + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v81 = *(void *)&v127[56];
              if (*(void *)&v127[56])
              {
                *(void *)&v127[56] = 0;
                uint64_t v82 = *(void *)(v81 + 8);
                if (!v82)
                {
                  uint64_t v82 = *(void *)&v127[48];
                  if (!*(void *)&v127[48]) {
                    uint64_t v82 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 48))(v82, v81);
              }
            }
          }
          *(void *)&v127[56] = 0;
          memset(&v127[16], 0, 32);
          if (*(int *)&v127[4] >= 1)
          {
            uint64_t v83 = 0;
            uint64_t v84 = v128;
            do
              v84[v83++] = 0;
            while (v83 < *(int *)&v127[4]);
          }
          if (v129 != &v130) {
            j__free(v129);
          }
          ++v78;
        }
        while (v78 != v79);
      }
      return;
    case 5:
      uint64_t v18 = *(uint64_t **)(a1 + 8);
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v19 - *v18) >> 5);
      uint64_t v22 = a2[1];
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v22 - *a2) >> 5);
      if (v21 <= v23)
      {
        if (v21 < v23)
        {
          uint64_t v85 = *a2 + 32 * ((v19 - *v18) >> 5);
          while (v22 != v85)
          {
            v22 -= 96;
            sub_1002A5630((uint64_t)(a2 + 2), v22);
          }
          a2[1] = v85;
        }
      }
      else
      {
        sub_1002A525C(a2, v21 - v23);
      }
      if (v19 != v20)
      {
        uint64_t v86 = 0;
        if (v21 <= 1) {
          uint64_t v87 = 1;
        }
        else {
          uint64_t v87 = v21;
        }
        do
        {
          sub_100293970(*a2 + v86, *v18 + v86);
          v86 += 96;
          --v87;
        }
        while (v87);
      }
      return;
    case 6:
      uint64_t v35 = *(void **)(a1 + 8);
      *(_DWORD *)v127 = 1124007936;
      memset(&v127[4], 0, 60);
      uint64_t v128 = (int *)&v127[8];
      uint64_t v129 = &v130;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      (*(void (**)(void, void *, unsigned char *, uint64_t))(*(void *)*v35 + 24))(*v35, v35, v127, 0xFFFFFFFFLL);
      unint64_t v36 = *v128;
      uint64_t v37 = a2[1];
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v37 - *a2) >> 5);
      if (v36 <= v38)
      {
        if (v36 < v38)
        {
          uint64_t v105 = *a2 + 96 * (int)v36;
          while (v37 != v105)
          {
            v37 -= 96;
            sub_1002A5630((uint64_t)(a2 + 2), v37);
          }
          a2[1] = v105;
        }
      }
      else
      {
        sub_1002A525C(a2, v36 - v38);
      }
      if ((int)v36 >= 1)
      {
        uint64_t v106 = 0;
        uint64_t v107 = v36;
        do
        {
          uint64_t v108 = v106 + 1;
          v133[0] = v106;
          v133[1] = v106 + 1;
          uint64_t v132 = 0x7FFFFFFF80000000;
          sub_100293374((uint64_t)v118, v127, v133, &v132);
          sub_100287094(*a2 + 96 * v106, (uint64_t)v118);
          if (v123)
          {
            if (atomic_fetch_add((atomic_uint *volatile)(v123 + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v109 = v123;
              if (v123)
              {
                uint64_t v123 = 0;
                uint64_t v110 = *(void *)(v109 + 8);
                if (!v110)
                {
                  uint64_t v110 = v122;
                  if (!v122) {
                    uint64_t v110 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v110 + 48))(v110, v109);
              }
            }
          }
          uint64_t v123 = 0;
          long long v120 = 0u;
          long long v121 = 0u;
          if (v119 >= 1)
          {
            uint64_t v111 = 0;
            uint64_t v112 = v124;
            do
              *(_DWORD *)(v112 + 4 * v111++) = 0;
            while (v111 < v119);
          }
          if (v125 != &v126) {
            j__free(v125);
          }
          uint64_t v106 = v108;
        }
        while (v108 != v107);
      }
      if (*(void *)&v127[56])
      {
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v127[56] + 20), 0xFFFFFFFF) == 1)
        {
          uint64_t v113 = *(void *)&v127[56];
          if (*(void *)&v127[56])
          {
            *(void *)&v127[56] = 0;
            uint64_t v114 = *(void *)(v113 + 8);
            if (!v114)
            {
              uint64_t v114 = *(void *)&v127[48];
              if (!*(void *)&v127[48]) {
                uint64_t v114 = sub_10029230C();
              }
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v114 + 48))(v114, v113);
          }
        }
      }
      *(void *)&v127[56] = 0;
      memset(&v127[16], 0, 32);
      if (*(int *)&v127[4] >= 1)
      {
        uint64_t v115 = 0;
        int v116 = v128;
        do
          v116[v115++] = 0;
        while (v115 < *(int *)&v127[4]);
      }
      if (v129 != &v130) {
        j__free(v129);
      }
      return;
    case 0xB:
      uint64_t v39 = *(uint64_t **)(a1 + 8);
      uint64_t v41 = *v39;
      uint64_t v40 = v39[1];
      unint64_t v42 = 0xCCCCCCCCCCCCCCCDLL * ((v40 - *v39) >> 4);
      uint64_t v43 = a2[1];
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v43 - *a2) >> 5);
      if (v42 <= v44)
      {
        if (v42 < v44)
        {
          uint64_t v97 = *a2 - 0x3333333333333320 * ((v40 - *v39) >> 4);
          while (v43 != v97)
          {
            v43 -= 96;
            sub_1002A5630((uint64_t)(a2 + 2), v43);
          }
          a2[1] = v97;
        }
      }
      else
      {
        sub_1002A525C(a2, v42 - v44);
      }
      if (v40 != v41)
      {
        uint64_t v98 = 0;
        if (v42 <= 1) {
          unint64_t v42 = 1;
        }
        do
        {
          sub_1002DB994(*v39 + 80 * v98, v2 & 0x3000000, (uint64_t)v127);
          sub_100287094(*a2 + 96 * v98, (uint64_t)v127);
          if (*(void *)&v127[56])
          {
            if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v127[56] + 20), 0xFFFFFFFF) == 1)
            {
              uint64_t v99 = *(void *)&v127[56];
              if (*(void *)&v127[56])
              {
                *(void *)&v127[56] = 0;
                uint64_t v100 = *(void *)(v99 + 8);
                if (!v100)
                {
                  uint64_t v100 = *(void *)&v127[48];
                  if (!*(void *)&v127[48]) {
                    uint64_t v100 = sub_10029230C();
                  }
                }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v100 + 48))(v100, v99);
              }
            }
          }
          *(void *)&v127[56] = 0;
          memset(&v127[16], 0, 32);
          if (*(int *)&v127[4] >= 1)
          {
            uint64_t v101 = 0;
            unint64_t v102 = v128;
            do
              v102[v101++] = 0;
            while (v101 < *(int *)&v127[4]);
          }
          if (v129 != &v130) {
            j__free(v129);
          }
          ++v98;
        }
        while (v98 != v42);
      }
      return;
    case 0xF:
      uint64_t v45 = *(void *)(a1 + 8);
      unint64_t v46 = *(int *)(a1 + 20);
      uint64_t v47 = a2[1];
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a2) >> 5);
      if (v46 <= v48)
      {
        if (v46 < v48)
        {
          uint64_t v103 = *a2 + 96 * (int)v46;
          while (v47 != v103)
          {
            v47 -= 96;
            sub_1002A5630((uint64_t)(a2 + 2), v47);
          }
          a2[1] = v103;
        }
      }
      else
      {
        sub_1002A525C(a2, v46 - v48);
      }
      if (v46)
      {
        uint64_t v104 = 0;
        do
        {
          sub_100293970(*a2 + v104, v45 + v104);
          v104 += 96;
          --v46;
        }
        while (v46);
      }
      return;
    default:
      *(void *)v127 = 0;
      *(void *)&v127[8] = 0;
      qmemcpy((void *)sub_1002D19D8(v127, 30), "Unknown/unsupported array type", 30);
      sub_1002D2278(-213, (uint64_t *)v127, "getMatVector", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1460);
  }
  do
  {
    int v51 = v10[1];
    if (v51 == 2)
    {
      sub_10000CE64((uint64_t)v127, 1, v10[3], *v10 & 0xFFF, *((void *)v10 + 2) + **((void **)v10 + 9) * v50, 0);
    }
    else
    {
      int v52 = v51 - 1;
      unint64_t v53 = (void *)*((void *)v10 + 9);
      uint64_t v54 = *((void *)v10 + 8) + 4;
      int v55 = *v10;
      uint64_t v56 = *((void *)v10 + 2) + *v53 * v50;
      memset(&v127[20], 0, 44);
      *(_OWORD *)&v127[4] = 0u;
      uint64_t v128 = (int *)&v127[8];
      uint64_t v129 = &v130;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      *(_DWORD *)v127 = v55 & 0xFFF | 0x42FF0000;
      *(void *)&v127[16] = v56;
      *(void *)&v127[24] = v56;
      sub_100292BB8((uint64_t)v127, v52, v54, (uint64_t)(v53 + 1), 1);
      unint64_t v57 = v128;
      if (*(int *)&v127[4] < 1)
      {
        int v59 = 0;
      }
      else
      {
        uint64_t v58 = 0;
        while (v128[v58] <= 1)
        {
          if (*(unsigned int *)&v127[4] == ++v58)
          {
            int v59 = *(_DWORD *)&v127[4];
            goto LABEL_57;
          }
        }
        int v59 = v58;
      }
LABEL_57:
      uint64_t v60 = (uint64_t *)v129;
      uint64_t v61 = *(int *)&v127[4] - 1;
      uint64_t v62 = (char *)v129 + 8 * *(int *)&v127[4] - 8;
      while (v61 > v59)
      {
        unint64_t v63 = *v62 * v128[v61];
        unint64_t v64 = *--v62;
        --v61;
        if (v63 < v64)
        {
          *(_DWORD *)v127 &= ~0x4000u;
          if (*(int *)&v127[4] < 3) {
            goto LABEL_64;
          }
          goto LABEL_63;
        }
      }
      *(_DWORD *)v127 = *(_DWORD *)v127 & 0xFFFFBFFF | 0x4000;
      if (*(int *)&v127[4] < 3) {
        goto LABEL_64;
      }
LABEL_63:
      *(void *)&v127[8] = -1;
LABEL_64:
      if (*(void *)&v127[56])
      {
        uint64_t v65 = *(void *)(*(void *)&v127[56] + 24);
        *(void *)&v127[16] = v65;
        *(void *)&v127[24] = v65;
        if (!v65) {
          goto LABEL_71;
        }
      }
      else
      {
        uint64_t v65 = *(void *)&v127[16];
        if (!*(void *)&v127[16])
        {
LABEL_71:
          *(void *)&v127[32] = 0;
          *(void *)&v127[40] = 0;
          goto LABEL_73;
        }
      }
      uint64_t v66 = *v128;
      uint64_t v67 = *(void *)&v127[24] + *(void *)v129 * v66;
      *(void *)&v127[40] = v67;
      if ((int)v66 < 1)
      {
        *(void *)&v127[32] = v67;
      }
      else
      {
        uint64_t v68 = (*(_DWORD *)&v127[4] - 1);
        uint64_t v69 = v65 + *((void *)v129 + (int)v68) * v128[(int)v68];
        *(void *)&v127[32] = v69;
        if (*(int *)&v127[4] >= 2)
        {
          do
          {
            uint64_t v70 = *v57++;
            uint64_t v71 = v70 - 1;
            uint64_t v72 = *v60++;
            v69 += v72 * v71;
            --v68;
          }
          while (v68);
          *(void *)&v127[32] = v69;
        }
      }
    }
LABEL_73:
    sub_100287094(*a2 + 96 * v50, (uint64_t)v127);
    if (*(void *)&v127[56])
    {
      if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v127[56] + 20), 0xFFFFFFFF) == 1)
      {
        uint64_t v73 = *(void *)&v127[56];
        if (*(void *)&v127[56])
        {
          *(void *)&v127[56] = 0;
          uint64_t v74 = *(void *)(v73 + 8);
          if (!v74)
          {
            uint64_t v74 = *(void *)&v127[48];
            if (!*(void *)&v127[48]) {
              uint64_t v74 = sub_10029230C();
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v74 + 48))(v74, v73);
        }
      }
    }
    *(void *)&v127[56] = 0;
    memset(&v127[16], 0, 32);
    if (*(int *)&v127[4] >= 1)
    {
      uint64_t v75 = 0;
      uint64_t v76 = v128;
      do
        v76[v75++] = 0;
      while (v75 < *(int *)&v127[4]);
    }
    if (v129 != &v130) {
      j__free(v129);
    }
    ++v50;
  }
  while (v50 != v11);
}

void sub_10029C41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029C4D0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1002A525C(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 96 * a2;
    while (v3 != v7)
    {
      v3 -= 96;
      sub_1002A5630((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void sub_10029C574(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1002A5700(a1, v6);
  }
  else if (!v5)
  {
    for (i = *a1 + 80 * a2; v3 != i; uint64_t v3 = sub_1002D9C04(v3 - 80))
      ;
    a1[1] = i;
  }
}

uint64_t sub_10029C604(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)a1 & 0x1F0000;
  int v4 = *(_DWORD *)a2 & 0x1F0000;
  if (v3 == 655360)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    if (v4 == 655360)
    {
      unint64_t v6 = *(_DWORD **)(v10 + 48);
      unint64_t v7 = *(v6 - 1);
      uint64_t v8 = *(_DWORD **)(*(void *)(a2 + 8) + 48);
      if (v7 != *(v8 - 1)) {
        return 0;
      }
      if (v7 == 2)
      {
        if (*v6 == *v8) {
          return v6[1] == v8[1];
        }
        return 0;
      }
      if ((int)v7 >= 1)
      {
        if (*v6 == *v8)
        {
          uint64_t v26 = 1;
          do
          {
            unint64_t v17 = v26;
            if (v7 == v26) {
              break;
            }
            int v27 = v6[v26];
            int v28 = v8[v26++];
          }
          while (v27 == v28);
          return v17 >= v7;
        }
        return 0;
      }
    }
    else
    {
      if (v4 != 0x10000)
      {
        if (*(int *)(v10 + 4) > 2) {
          return 0;
        }
        unint64_t v13 = *(int **)(v10 + 48);
        int v12 = *v13;
        int v11 = v13[1];
        if ((int)sub_10029C9C4(a2, -1) > 2) {
          return 0;
        }
        goto LABEL_31;
      }
      unint64_t v6 = *(_DWORD **)(v10 + 48);
      unint64_t v7 = *(v6 - 1);
      uint64_t v8 = *(_DWORD **)(*(void *)(a2 + 8) + 64);
      if (v7 != *(v8 - 1)) {
        return 0;
      }
      if (v7 == 2)
      {
        if (*v6 != *v8) {
          return 0;
        }
        return v6[1] == v8[1];
      }
      if ((int)v7 >= 1)
      {
        if (*v6 == *v8)
        {
          uint64_t v20 = 1;
          do
          {
            unint64_t v17 = v20;
            if (v7 == v20) {
              break;
            }
            int v21 = v6[v20];
            int v22 = v8[v20++];
          }
          while (v21 == v22);
          return v17 >= v7;
        }
        return 0;
      }
    }
    return 1;
  }
  if (v3 != 0x10000)
  {
    sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)&v29);
    int v11 = v29;
    int v12 = v30;
    if ((int)sub_10029C9C4(a2, -1) > 2) {
      return 0;
    }
    goto LABEL_31;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v4 == 655360)
  {
    unint64_t v6 = *(_DWORD **)(v5 + 64);
    unint64_t v7 = *(v6 - 1);
    uint64_t v8 = *(_DWORD **)(*(void *)(a2 + 8) + 48);
    if (v7 != *(v8 - 1)) {
      return 0;
    }
    if (v7 == 2)
    {
      if (*v6 != *v8) {
        return 0;
      }
      return v6[1] == v8[1];
    }
    if ((int)v7 >= 1)
    {
      if (*v6 == *v8)
      {
        uint64_t v23 = 1;
        do
        {
          unint64_t v17 = v23;
          if (v7 == v23) {
            break;
          }
          int v24 = v6[v23];
          int v25 = v8[v23++];
        }
        while (v24 == v25);
        return v17 >= v7;
      }
      return 0;
    }
    return 1;
  }
  if (v4 == 0x10000)
  {
    unint64_t v6 = *(_DWORD **)(v5 + 64);
    unint64_t v7 = *(v6 - 1);
    uint64_t v8 = *(_DWORD **)(*(void *)(a2 + 8) + 64);
    if (v7 == *(v8 - 1))
    {
      if (v7 == 2)
      {
        if (*v6 != *v8) {
          return 0;
        }
        return v6[1] == v8[1];
      }
      if ((int)v7 >= 1)
      {
        if (*v6 == *v8)
        {
          uint64_t v16 = 1;
          do
          {
            unint64_t v17 = v16;
            if (v7 == v16) {
              break;
            }
            int v18 = v6[v16];
            int v19 = v8[v16++];
          }
          while (v18 == v19);
          return v17 >= v7;
        }
        return 0;
      }
      return 1;
    }
    return 0;
  }
  if (*(int *)(v5 + 4) > 2) {
    return 0;
  }
  unint64_t v14 = *(int **)(v5 + 64);
  int v12 = *v14;
  int v11 = v14[1];
  if ((int)sub_10029C9C4(a2, -1) > 2) {
    return 0;
  }
LABEL_31:
  sub_10029A23C(a2, 0xFFFFFFFF, (uint64_t)&v29);
  return v11 == v29 && v12 == v30;
}

uint64_t sub_10029C9C4(uint64_t a1, signed int a2)
{
  uint64_t result = *(_WORD *)(a1 + 2) & 0x1F;
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v6 = sub_1002D19D8(&v16, 5);
        *(_DWORD *)uint64_t v6 = 540811369;
        *(unsigned char *)(v6 + 4) = 48;
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1817);
      }
      return *(unsigned int *)(*(void *)(a1 + 8) + 4);
    case 2:
    case 14:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v4 = sub_1002D19D8(&v16, 5);
        *(_DWORD *)uint64_t v4 = 540811369;
        *(unsigned char *)(v4 + 4) = 48;
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1835);
      }
      return 2;
    case 3:
    case 12:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v5 = sub_1002D19D8(&v16, 5);
        *(_DWORD *)uint64_t v5 = 540811369;
        *(unsigned char *)(v5 + 4) = 48;
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1841);
      }
      return 2;
    case 4:
      if (a2 < 0) {
        goto LABEL_38;
      }
      if ((int)(-1431655765 * ((*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 3)) <= a2)
      {
        sub_10022F344(&v16, "i < (int)vv.size()");
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1853);
      }
      return 2;
    case 5:
      if (a2 < 0) {
        goto LABEL_38;
      }
      unint64_t v7 = *(uint64_t **)(a1 + 8);
      uint64_t v8 = *v7;
      if ((int)(-1431655765 * ((unint64_t)(v7[1] - *v7) >> 5)) <= a2)
      {
        sub_10022F344(&v16, "i < (int)vv.size()");
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1862);
      }
      unsigned int v9 = 96;
      goto LABEL_32;
    case 6:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v10 = sub_1002D19D8(&v16, 5);
        *(_DWORD *)uint64_t v10 = 540811369;
        *(unsigned char *)(v10 + 4) = 48;
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1823);
      }
      return *(unsigned int *)(*(void *)(a1 + 8) + 20);
    case 7:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v11 = sub_1002D19D8(&v16, 5);
        *(_DWORD *)uint64_t v11 = 540811369;
        *(unsigned char *)(v11 + 4) = 48;
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1889);
      }
      return 2;
    case 8:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v12 = sub_1002D19D8(&v16, 5);
        *(_DWORD *)uint64_t v12 = 540811369;
        *(unsigned char *)(v12 + 4) = 48;
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1901);
      }
      return 2;
    case 9:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v13 = sub_1002D19D8(&v16, 5);
        *(_DWORD *)uint64_t v13 = 540811369;
        *(unsigned char *)(v13 + 4) = 48;
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1895);
      }
      return 2;
    case 10:
      if ((a2 & 0x80000000) == 0)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v14 = sub_1002D19D8(&v16, 5);
        *(_DWORD *)uint64_t v14 = 540811369;
        *(unsigned char *)(v14 + 4) = 48;
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1829);
      }
      return *(unsigned int *)(*(void *)(a1 + 8) + 4);
    case 11:
      if (a2 < 0) {
        goto LABEL_38;
      }
      unint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v8 = *v15;
      if ((int)(-858993459 * ((unint64_t)(v15[1] - *v15) >> 4)) <= a2)
      {
        sub_10022F344(&v16, "i < (int)vv.size()");
        sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1882);
      }
      unsigned int v9 = 80;
LABEL_32:
      uint64_t result = *(unsigned int *)(v8 + a2 * (unint64_t)v9 + 4);
      break;
    case 15:
      if (a2 < 0)
      {
LABEL_38:
        uint64_t result = 1;
      }
      else
      {
        if (*(_DWORD *)(a1 + 20) <= a2)
        {
          sub_10022F344(&v16, "i < sz.height");
          sub_1002D2278(-215, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1872);
        }
        uint64_t result = *(unsigned int *)(*(void *)(a1 + 8) + 96 * a2 + 4);
      }
      break;
    default:
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      qmemcpy((void *)sub_1002D19D8(&v16, 30), "Unknown/unsupported array type", 30);
      sub_1002D2278(-213, &v16, "dims", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1905);
  }
  return result;
}

void sub_10029CF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029D0B8(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = *(_DWORD *)a1 & 0x1F0000;
  if (v3 >= 0xA0000)
  {
    if (v3 != 655360)
    {
      if (v3 != 720896)
      {
        if (v3 == 983040)
        {
          uint64_t result = *(int *)(a1 + 20);
          if ((a2 & 0x80000000) == 0)
          {
            uint64_t v5 = *(void *)(a1 + 8);
            if ((int)result <= (int)a2)
            {
              uint64_t v61 = 0;
              uint64_t v62 = 0;
              qmemcpy((void *)sub_1002D19D8(&v61, 13), "i < sz.height", 13);
              sub_1002D2278(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1941);
            }
            uint64_t v6 = *(unsigned int *)(v5 + 96 * a2 + 4);
            if ((int)v6 >= 3)
            {
              uint64_t v37 = *(void *)(v5 + 96 * a2 + 64);
              unint64_t v38 = (int *)(v37 + 4);
              uint64_t v39 = 1;
              uint64_t v40 = v6 & 0xFFFFFFFE;
              uint64_t v41 = 1;
              do
              {
                v39 *= *(v38 - 1);
                v41 *= *v38;
                v38 += 2;
                v40 -= 2;
              }
              while (v40);
              uint64_t result = v41 * v39;
              uint64_t v42 = v6 - (v6 & 0xFFFFFFFE);
              if (v42)
              {
                uint64_t v43 = (int *)(v37 + ((4 * v6) & 0x3FFFFFFF8));
                do
                {
                  uint64_t v44 = *v43++;
                  result *= v44;
                  --v42;
                }
                while (v42);
              }
            }
            else
            {
              return *(int *)(v5 + 96 * a2 + 12) * (uint64_t)*(int *)(v5 + 96 * a2 + 8);
            }
          }
          return result;
        }
LABEL_36:
        sub_10029A23C(a1, a2, (uint64_t)&v61);
        return SHIDWORD(v61) * (uint64_t)(int)v61;
      }
      int v24 = *(uint64_t **)(a1 + 8);
      uint64_t v8 = *v24;
      uint64_t result = 0xCCCCCCCCCCCCCCCDLL * ((v24[1] - *v24) >> 4);
      if ((a2 & 0x80000000) != 0) {
        return result;
      }
      if ((int)result <= (int)a2)
      {
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v25 = sub_1002D19D8(&v61, 18);
        *(_WORD *)(v25 + 16) = 10536;
        *(_OWORD *)uint64_t v25 = *(_OWORD *)"i < (int)vv.size()";
        sub_1002D2278(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1951);
      }
      unsigned int v10 = a2;
      uint64_t v26 = *(unsigned int *)(v8 + 80 * a2 + 4);
      if ((int)v26 < 3)
      {
        unsigned int v12 = 80;
        return *(int *)(v8 + v10 * (unint64_t)v12 + 12) * (uint64_t)*(int *)(v8 + v10 * (unint64_t)v12 + 8);
      }
      uint64_t v53 = *(void *)(v8 + 80 * a2 + 48);
      uint64_t v54 = (int *)(v53 + 4);
      uint64_t v55 = 1;
      uint64_t v56 = v26 & 0xFFFFFFFE;
      uint64_t v57 = 1;
      do
      {
        v55 *= *(v54 - 1);
        v57 *= *v54;
        v54 += 2;
        v56 -= 2;
      }
      while (v56);
      uint64_t result = v57 * v55;
      uint64_t v58 = v26 - (v26 & 0xFFFFFFFE);
      if (v58)
      {
        int v59 = (int *)(v53 + ((4 * v26) & 0x3FFFFFFF8));
        do
        {
          uint64_t v60 = *v59++;
          result *= v60;
          --v58;
        }
        while (v58);
      }
      return result;
    }
    if ((a2 & 0x80000000) == 0)
    {
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v13 = sub_1002D19D8(&v61, 5);
      *(_DWORD *)uint64_t v13 = 540811369;
      *(unsigned char *)(v13 + 4) = 48;
      sub_1002D2278(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1921);
    }
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = *(unsigned int *)(v14 + 4);
    if ((int)v15 >= 3)
    {
      uint64_t v16 = *(void *)(v14 + 48);
      uint64_t v17 = (int *)(v16 + 4);
      uint64_t v18 = 1;
      uint64_t v19 = v15 & 0xFFFFFFFE;
      uint64_t v20 = 1;
      do
      {
        v18 *= *(v17 - 1);
        v20 *= *v17;
        v17 += 2;
        v19 -= 2;
      }
      while (v19);
      uint64_t result = v20 * v18;
      uint64_t v21 = v15 - (v15 & 0xFFFFFFFE);
      if (v21)
      {
        int v22 = (int *)(v16 + ((4 * v15) & 0x3FFFFFFF8));
        do
        {
          uint64_t v23 = *v22++;
          result *= v23;
          --v21;
        }
        while (v21);
      }
      return result;
    }
    return *(int *)(v14 + 12) * (uint64_t)*(int *)(v14 + 8);
  }
  if (v3 == 0x10000)
  {
    if ((a2 & 0x80000000) == 0)
    {
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v27 = sub_1002D19D8(&v61, 5);
      *(_DWORD *)uint64_t v27 = 540811369;
      *(unsigned char *)(v27 + 4) = 48;
      sub_1002D2278(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1915);
    }
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v28 = *(unsigned int *)(v14 + 4);
    if ((int)v28 >= 3)
    {
      uint64_t v29 = *(void *)(v14 + 64);
      int v30 = (int *)(v29 + 4);
      uint64_t v31 = 1;
      uint64_t v32 = v28 & 0xFFFFFFFE;
      uint64_t v33 = 1;
      do
      {
        v31 *= *(v30 - 1);
        v33 *= *v30;
        v30 += 2;
        v32 -= 2;
      }
      while (v32);
      uint64_t result = v33 * v31;
      uint64_t v34 = v28 - (v28 & 0xFFFFFFFE);
      if (v34)
      {
        uint64_t v35 = (int *)(v29 + ((4 * v28) & 0x3FFFFFFF8));
        do
        {
          uint64_t v36 = *v35++;
          result *= v36;
          --v34;
        }
        while (v34);
      }
      return result;
    }
    return *(int *)(v14 + 12) * (uint64_t)*(int *)(v14 + 8);
  }
  if (v3 != 327680) {
    goto LABEL_36;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  uint64_t result = 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 5);
  if ((a2 & 0x80000000) != 0) {
    return result;
  }
  if ((int)result <= (int)a2)
  {
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v9 = sub_1002D19D8(&v61, 18);
    *(_WORD *)(v9 + 16) = 10536;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)"i < (int)vv.size()";
    sub_1002D2278(-215, &v61, "total", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 1931);
  }
  unsigned int v10 = a2;
  uint64_t v11 = *(unsigned int *)(v8 + 96 * a2 + 4);
  if ((int)v11 < 3)
  {
    unsigned int v12 = 96;
    return *(int *)(v8 + v10 * (unint64_t)v12 + 12) * (uint64_t)*(int *)(v8 + v10 * (unint64_t)v12 + 8);
  }
  uint64_t v45 = *(void *)(v8 + 96 * a2 + 64);
  unint64_t v46 = (int *)(v45 + 4);
  uint64_t v47 = 1;
  uint64_t v48 = v11 & 0xFFFFFFFE;
  uint64_t v49 = 1;
  do
  {
    v47 *= *(v46 - 1);
    v49 *= *v46;
    v46 += 2;
    v48 -= 2;
  }
  while (v48);
  uint64_t result = v49 * v47;
  uint64_t v50 = v11 - (v11 & 0xFFFFFFFE);
  if (v50)
  {
    int v51 = (int *)(v45 + ((4 * v11) & 0x3FFFFFFF8));
    do
    {
      uint64_t v52 = *v51++;
      result *= v52;
      --v50;
    }
    while (v50);
  }
  return result;
}

void sub_10029D5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029D660(int *a1, int a2)
{
  return sub_10029AB74(a1, a2) & 7;
}

uint64_t sub_10029D67C(int *a1, int a2)
{
  return ((sub_10029AB74(a1, a2) >> 3) & 0x1FF) + 1;
}

BOOL sub_10029D69C(uint64_t a1)
{
  int v1 = *(_WORD *)(a1 + 2) & 0x1F;
  uint64_t v2 = a1;
  BOOL result = 0;
  switch(v1)
  {
    case 0:
      return 1;
    case 1:
      uint64_t v6 = *(void *)(v2 + 8);
      if (!*(void *)(v6 + 16)) {
        return 1;
      }
      uint64_t v7 = *(unsigned int *)(v6 + 4);
      if ((int)v7 < 3) {
        goto LABEL_16;
      }
      uint64_t v8 = *(void *)(v6 + 64);
      uint64_t v9 = (int *)(v8 + 4);
      uint64_t v10 = 1;
      uint64_t v11 = v7 & 0xFFFFFFFE;
      uint64_t v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      uint64_t v13 = v12 * v10;
      uint64_t v14 = v7 - (v7 & 0xFFFFFFFE);
      if (v14)
      {
        uint64_t v15 = (int *)(v8 + ((4 * v7) & 0x3FFFFFFF8));
        do
        {
          uint64_t v16 = *v15++;
          v13 *= v16;
          --v14;
        }
        while (v14);
      }
      return !v7 || v13 == 0;
    case 2:
    case 6:
    case 14:
      return result;
    case 3:
    case 4:
    case 5:
    case 11:
    case 13:
      return **(void **)(v2 + 8) == *(void *)(*(void *)(v2 + 8) + 8);
    case 7:
      uint64_t v2 = *(void *)(v2 + 8);
      if (*(_DWORD *)(v2 + 16)) {
        return *(_DWORD *)(v2 + 20) == 0;
      }
      return 1;
    case 8:
    case 9:
      uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 24);
      return v5 == 0;
    case 10:
      uint64_t v6 = *(void *)(v2 + 8);
      if (!*(void *)(v6 + 32)) {
        return 1;
      }
      uint64_t v7 = *(unsigned int *)(v6 + 4);
      if ((int)v7 >= 3)
      {
        uint64_t v17 = *(void *)(v6 + 48);
        uint64_t v18 = (int *)(v17 + 4);
        uint64_t v19 = 1;
        uint64_t v20 = v7 & 0xFFFFFFFE;
        uint64_t v21 = 1;
        do
        {
          v19 *= *(v18 - 1);
          v21 *= *v18;
          v18 += 2;
          v20 -= 2;
        }
        while (v20);
        uint64_t v13 = v21 * v19;
        uint64_t v22 = v7 - (v7 & 0xFFFFFFFE);
        if (v22)
        {
          uint64_t v23 = (int *)(v17 + ((4 * v7) & 0x3FFFFFFF8));
          do
          {
            uint64_t v24 = *v23++;
            v13 *= v24;
            --v22;
          }
          while (v22);
        }
      }
      else
      {
LABEL_16:
        uint64_t v13 = *(int *)(v6 + 12) * (uint64_t)*(int *)(v6 + 8);
      }
      return !v7 || v13 == 0;
    case 12:
      uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 8);
      return v5 == 0;
    case 15:
      return *(_DWORD *)(v2 + 20) == 0;
    default:
      v25[0] = 0;
      v25[1] = 0;
      qmemcpy((void *)sub_1002D19D8(v25, 30), "Unknown/unsupported array type", 30);
      sub_1002D2278(-213, v25, "empty", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2117);
  }
}

void sub_10029D8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029D8F8(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)a1 & 0x1F0000;
  if (v3 == 655360)
  {
    if ((a2 & 0x80000000) == 0) {
      return 1;
    }
    return (*(unsigned __int8 *)(*(void *)(a1 + 8) + 1) >> 6) & 1;
  }
  if (v3 == 0x10000)
  {
    if ((a2 & 0x80000000) == 0) {
      return 1;
    }
    return (*(unsigned __int8 *)(*(void *)(a1 + 8) + 1) >> 6) & 1;
  }
  int v5 = *(_DWORD *)a1 & 0x1B0000;
  uint64_t result = 1;
  BOOL v6 = v3 == 786432 || v5 == 0;
  if (!v6 && v3 != 917504 && v5 != 0x20000 && v3 != 196608)
  {
    HIDWORD(v7) = v3 - 327680;
    LODWORD(v7) = v3 - 327680;
    switch((v7 >> 17))
    {
      case 0u:
        uint64_t v8 = *(uint64_t **)(a1 + 8);
        uint64_t v9 = *v8;
        if (0xAAAAAAAAAAAAAAABLL * ((v8[1] - *v8) >> 5) <= a2)
        {
          sub_10022F344(&v12, "(size_t)i < vv.size()");
          sub_1002D2278(-215, &v12, "isContinuous", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2138);
        }
        int v10 = 96;
        goto LABEL_22;
      case 2u:
        if (a2 < 0) {
          return (*(unsigned __int8 *)(*(void *)(a1 + 8) + 1) >> 6) & 1;
        }
        return result;
      case 3u:
        uint64_t v11 = *(uint64_t **)(a1 + 8);
        uint64_t v9 = *v11;
        if (0xCCCCCCCCCCCCCCCDLL * ((v11[1] - *v11) >> 4) <= a2)
        {
          sub_10022F344(&v12, "(size_t)i < vv.size()");
          sub_1002D2278(-215, &v12, "isContinuous", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2152);
        }
        int v10 = 80;
LABEL_22:
        uint64_t result = (*(unsigned __int8 *)(v9 + a2 * (uint64_t)v10 + 1) >> 6) & 1;
        break;
      case 5u:
        if (a2 < 1 || *(_DWORD *)(a1 + 20) <= a2)
        {
          uint64_t v12 = 0;
          uint64_t v13 = 0;
          qmemcpy((void *)sub_1002D19D8(&v12, 22), "i > 0 && i < sz.height", 22);
          sub_1002D2278(-215, &v12, "isContinuous", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2145);
        }
        uint64_t result = (*(unsigned __int8 *)(*(void *)(a1 + 8) + 96 * a2 + 1) >> 6) & 1;
        break;
      default:
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        qmemcpy((void *)sub_1002D19D8(&v12, 30), "Unknown/unsupported array type", 30);
        sub_1002D2278(-213, &v12, "isContinuous", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2159);
    }
  }
  return result;
}

void sub_10029DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029DC34(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)a1 & 0x1F0000;
  if (!v3)
  {
    sub_10029E05C((uint64_t)a2);
    return;
  }
  if (v3 == 0x20000) {
    goto LABEL_10;
  }
  int v4 = *(_DWORD *)a1 & 0x1D0000;
  if (v4 != 786432 && v4 != 0x10000)
  {
    if (v3 == 655360)
    {
      uint64_t v17 = *(void *)(a1 + 8);
      sub_1002DB1F4(v17, (uint64_t)a2);
    }
    else
    {
      if (v3 != 393216)
      {
        *(_OWORD *)uint64_t v22 = 0uLL;
        sub_1002D2278(-213, (uint64_t *)v22, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2350);
      }
      uint64_t v15 = *(void **)(a1 + 8);
      if ((*a2 & 0x1F0000) == 0x10000)
      {
        sub_10029E454((uint64_t)a2, -1);
        uint64_t v16 = *(void (**)(void))(*(void *)*v15 + 24);
        v16();
      }
      else
      {
        *(_DWORD *)uint64_t v22 = 1124007936;
        memset(&v22[4], 0, 60);
        uint64_t v23 = &v22[8];
        uint64_t v24 = &v25;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        (*(void (**)(void, void *, unsigned char *, uint64_t))(*(void *)*v15 + 24))(*v15, v15, v22, 0xFFFFFFFFLL);
        sub_10025401C((uint64_t)v22, (uint64_t)a2);
        if (*(void *)&v22[56])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v22[56] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v18 = *(void *)&v22[56];
            if (*(void *)&v22[56])
            {
              *(void *)&v22[56] = 0;
              uint64_t v19 = *(void *)(v18 + 8);
              if (!v19)
              {
                uint64_t v19 = *(void *)&v22[48];
                if (!*(void *)&v22[48]) {
                  uint64_t v19 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 48))(v19, v18);
            }
          }
        }
        *(void *)&v22[56] = 0;
        memset(&v22[16], 0, 32);
        if (*(int *)&v22[4] >= 1)
        {
          uint64_t v20 = 0;
          uint64_t v21 = v23;
          do
            *(_DWORD *)&v21[4 * v20++] = 0;
          while (v20 < *(int *)&v22[4]);
        }
        uint64_t v14 = v24;
        if (v24 != &v25) {
          goto LABEL_22;
        }
      }
    }
    return;
  }
  if (v3 != 0x10000)
  {
LABEL_10:
    sub_100299554(a1, -1, (uint64_t)v22);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    long long v6 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v5;
    *(_OWORD *)&v22[16] = v6;
    *(_OWORD *)&v22[32] = *(_OWORD *)(v5 + 32);
    uint64_t v7 = *(void *)(v5 + 56);
    *(void *)&v22[48] = *(void *)(v5 + 48);
    *(void *)&v22[56] = v7;
    uint64_t v23 = &v22[8];
    uint64_t v24 = &v25;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 1u);
    }
    if (*(int *)(v5 + 4) > 2)
    {
      *(_DWORD *)&v22[4] = 0;
      sub_1002931A8((uint64_t)v22, v5);
    }
    else
    {
      uint64_t v8 = *(void **)(v5 + 72);
      uint64_t v9 = v24;
      *(void *)uint64_t v24 = *v8;
      v9[1] = v8[1];
    }
  }
  sub_10025401C((uint64_t)v22, (uint64_t)a2);
  if (*(void *)&v22[56])
  {
    if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v22[56] + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v10 = *(void *)&v22[56];
      if (*(void *)&v22[56])
      {
        *(void *)&v22[56] = 0;
        uint64_t v11 = *(void *)(v10 + 8);
        if (!v11)
        {
          uint64_t v11 = *(void *)&v22[48];
          if (!*(void *)&v22[48]) {
            uint64_t v11 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v10);
      }
    }
  }
  *(void *)&v22[56] = 0;
  memset(&v22[16], 0, 32);
  if (*(int *)&v22[4] >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v23;
    do
      *(_DWORD *)&v13[4 * v12++] = 0;
    while (v12 < *(int *)&v22[4]);
  }
  uint64_t v14 = v24;
  if (v24 != &v25) {
LABEL_22:
  }
    j__free(v14);
}

void sub_10029E000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029E014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029E02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029E048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029E05C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x40000000) != 0)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v2 = sub_1002D19D8(&v27, 12);
    *(_DWORD *)(v2 + 8) = 690513274;
    *(void *)uint64_t v2 = *(void *)"!fixedSize()";
    sub_1002D2278(-215, &v27, "release", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2832);
  }
  switch(HIWORD(v1) & 0x1F)
  {
    case 0:
      return;
    case 1:
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v4 = *(void *)(v3 + 56);
      if (v4)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v4 + 20), 0xFFFFFFFF) == 1)
        {
          uint64_t v5 = *(void *)(v3 + 56);
          if (v5)
          {
            *(void *)(v3 + 56) = 0;
            uint64_t v6 = *(void *)(v5 + 8);
            if (!v6)
            {
              uint64_t v6 = *(void *)(v3 + 48);
              if (!v6) {
                uint64_t v6 = sub_10029230C();
              }
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v5);
          }
        }
      }
      *(void *)(v3 + 56) = 0;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      if (*(int *)(v3 + 4) >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v3 + 64);
        do
          *(_DWORD *)(v8 + 4 * v7++) = 0;
        while (v7 < *(int *)(v3 + 4));
      }
      return;
    case 3:
      int32x2_t v26 = 0;
      sub_10029E6D4(a1, &v26, v1 & 0xFFF, -1, 0, 0);
      return;
    case 4:
      uint64_t v9 = *(uint64_t **)(a1 + 8);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      if (v10 != *v9)
      {
        uint64_t v12 = v9[1];
        do
        {
          uint64_t v14 = *(void **)(v12 - 24);
          v12 -= 24;
          uint64_t v13 = v14;
          if (v14)
          {
            *(void *)(v10 - 16) = v13;
            operator delete(v13);
          }
          uint64_t v10 = v12;
        }
        while (v12 != v11);
      }
      goto LABEL_34;
    case 5:
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      if (v16 != *v15)
      {
        do
        {
          v16 -= 96;
          sub_1002A5630((uint64_t)(v15 + 2), v16);
        }
        while (v16 != v17);
      }
      v15[1] = v17;
      return;
    case 7:
    case 8:
    case 9:
      nullsub_1(*(void *)(a1 + 8));
      return;
    case 0xA:
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = *(void *)(v18 + 32);
      if (v19 && atomic_fetch_add((atomic_uint *volatile)(v19 + 16), 0xFFFFFFFF) == 1) {
        sub_1002DA390(v18);
      }
      if (*(int *)(v18 + 4) >= 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)(v18 + 48);
        do
          *(_DWORD *)(v21 + 4 * v20++) = 0;
        while (v20 < *(int *)(v18 + 4));
      }
      *(void *)(v18 + 32) = 0;
      return;
    case 0xB:
      uint64_t v9 = *(uint64_t **)(a1 + 8);
      uint64_t v11 = *v9;
      uint64_t v22 = v9[1];
      if (v22 != *v9)
      {
        do
          uint64_t v22 = sub_1002D9C04(v22 - 80);
        while (v22 != v11);
      }
LABEL_34:
      v9[1] = v11;
      break;
    case 0xD:
      uint64_t v23 = *(uint64_t **)(a1 + 8);
      uint64_t v25 = *v23;
      for (uint64_t i = v23[1]; i != v25; nullsub_1(i))
        i -= 64;
      v23[1] = v25;
      break;
    default:
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      qmemcpy((void *)sub_1002D19D8(&v27, 30), "Unknown/unsupported array type", 30);
      sub_1002D2278(-213, &v27, "release", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2897);
  }
}

void sub_10029E3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029E454(uint64_t a1, signed int a2)
{
  int v2 = *(_DWORD *)a1 & 0x1F0000;
  if (a2 < 0)
  {
    if (v2 != 0x10000)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      *(void *)sub_1002D19D8(&v6, 8) = 0x54414D203D3D206BLL;
      sub_1002D2278(-215, &v6, "getMatRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2924);
    }
    return *(void *)(a1 + 8);
  }
  else if (v2 == 327680)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    if ((int)(-1431655765 * ((v3[1] - *v3) >> 5)) <= a2)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v4 = sub_1002D19D8(&v6, 17);
      *(unsigned char *)(v4 + 16) = 41;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)"i < (int)v.size()";
      sub_1002D2278(-215, &v6, "getMatRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2933);
    }
    return *v3 + 96 * a2;
  }
  else
  {
    if (v2 != 983040)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      qmemcpy((void *)sub_1002D19D8(&v6, 41), "k == STD_VECTOR_MAT || k == STD_ARRAY_MAT", 41);
      sub_1002D2278(-215, &v6, "getMatRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2928);
    }
    if (*(_DWORD *)(a1 + 20) <= a2)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      qmemcpy((void *)sub_1002D19D8(&v6, 23), "0 <= i && i < sz.height", 23);
      sub_1002D2278(-215, &v6, "getMatRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2939);
    }
    return *(void *)(a1 + 8) + 96 * a2;
  }
}

void sub_10029E66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10029E6C8(_DWORD *a1)
{
  return *a1 >> 31;
}

void sub_10029E6D4(uint64_t a1, int32x2_t *a2, int a3, signed int a4, char a5, unsigned int a6)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 & 0x1F0000;
  if (a6) {
    char v8 = 1;
  }
  else {
    char v8 = a5;
  }
  if ((v8 & 1) == 0 && a4 < 0 && v7 == 0x10000)
  {
    if ((v6 & 0x40000000) != 0
      && (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 4) != a2->i32[0]
       || **(_DWORD **)(*(void *)(a1 + 8) + 64) != a2->i32[1]))
    {
      int32x2_t __src = 0;
      uint64_t v29 = 0;
      qmemcpy((void *)sub_1002D19D8(&__src, 53), "!fixedSize() || ((Mat*)obj)->size.operator()() == _sz", 53);
      sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2385);
    }
    if (v6 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a3)
    {
      int32x2_t __src = 0;
      uint64_t v29 = 0;
      qmemcpy((void *)sub_1002D19D8(&__src, 44), "!fixedType() || ((Mat*)obj)->type() == mtype", 44);
      sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2386);
    }
    uint64_t v10 = *(void *)(a1 + 8);
    __int32 v11 = a2->i32[0];
    int v12 = a3 & 0xFFF;
    if (*(int *)(v10 + 4) > 2
      || *(_DWORD *)(v10 + 8) != a2->i32[1]
      || *(_DWORD *)(v10 + 12) != v11
      || (*(_DWORD *)v10 & 0xFFF) != v12
      || !*(void *)(v10 + 16))
    {
      __src.i32[0] = a2->i32[1];
      __src.i32[1] = v11;
      sub_100292534((char *)v10, 2, (uint64_t *)&__src, v12);
    }
  }
  else
  {
    if (a4 < 0 && v7 == 655360) {
      char v14 = v8;
    }
    else {
      char v14 = 1;
    }
    if (v14)
    {
      if (a4 < 0 && v7 == 589824) {
        char v16 = v8;
      }
      else {
        char v16 = 1;
      }
      if ((v16 & 1) == 0)
      {
        if ((v6 & 0x40000000) != 0
          && (*(_DWORD *)(*(void *)(a1 + 8) + 8) != a2->i32[0]
           || *(_DWORD *)(*(void *)(a1 + 8) + 4) != a2->i32[1]))
        {
          int32x2_t __src = 0;
          uint64_t v29 = 0;
          qmemcpy((void *)sub_1002D19D8(&__src, 51), "!fixedSize() || ((cuda::GpuMat*)obj)->size() == _sz", 51);
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2399);
        }
        if (v6 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a3)
        {
          int32x2_t __src = 0;
          uint64_t v29 = 0;
          qmemcpy((void *)sub_1002D19D8(&__src, 53), "!fixedType() || ((cuda::GpuMat*)obj)->type() == mtype", 53);
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2400);
        }
        sub_100259AD4();
      }
      if (a4 < 0 && v7 == 458752) {
        char v18 = v8;
      }
      else {
        char v18 = 1;
      }
      if ((v18 & 1) == 0)
      {
        if ((v6 & 0x40000000) != 0
          && (*(_DWORD *)(*(void *)(a1 + 8) + 20) != a2->i32[0]
           || *(_DWORD *)(*(void *)(a1 + 8) + 16) != a2->i32[1]))
        {
          sub_10022F344(&__src, "!fixedSize() || ((ogl::Buffer*)obj)->size() == _sz");
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2406);
        }
        if (v6 < 0 && *(_DWORD *)(*(void *)(a1 + 8) + 24) != a3)
        {
          sub_10022F344(&__src, "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype");
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2407);
        }
        sub_1002ABC00();
      }
      if (a4 < 0 && v7 == 0x80000) {
        char v20 = v8;
      }
      else {
        char v20 = 1;
      }
      if ((v20 & 1) == 0)
      {
        if ((v6 & 0x40000000) != 0)
        {
          uint64_t v27 = *(void *)(a1 + 8);
          if (*(_DWORD *)(v27 + 8) != a2->i32[0] || *(_DWORD *)(v27 + 4) != a2->i32[1])
          {
            sub_10022F344(&__src, "!fixedSize() || ((cuda::HostMem*)obj)->size() == _sz");
            sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2413);
          }
        }
        if (v6 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a3)
        {
          sub_10022F344(&__src, "!fixedType() || ((cuda::HostMem*)obj)->type() == mtype");
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2414);
        }
        sub_100259BFC();
      }
      int32x2_t __src = vrev64_s32(*a2);
      sub_100295520((int *)a1, 2, (uint64_t *)&__src, a3, a4, a5, a6);
    }
    else
    {
      if ((v6 & 0x40000000) != 0
        && (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 48) + 4) != a2->i32[0]
         || **(_DWORD **)(*(void *)(a1 + 8) + 48) != a2->i32[1]))
      {
        int32x2_t __src = 0;
        uint64_t v29 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 54), "!fixedSize() || ((UMat*)obj)->size.operator()() == _sz", 54);
        sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2392);
      }
      if (v6 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a3)
      {
        int32x2_t __src = 0;
        uint64_t v29 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 45), "!fixedType() || ((UMat*)obj)->type() == mtype", 45);
        sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2393);
      }
      uint64_t v22 = *(void *)(a1 + 8);
      __int32 v23 = a2->i32[0];
      int v24 = a3 & 0xFFF;
      if (*(int *)(v22 + 4) > 2
        || *(_DWORD *)(v22 + 8) != a2->i32[1]
        || *(_DWORD *)(v22 + 12) != v23
        || (*(_DWORD *)v22 & 0xFFF) != v24
        || !*(void *)(v22 + 32))
      {
        __src.i32[0] = a2->i32[1];
        __src.i32[1] = v23;
        sub_1002D9CB8(v22, 2, (uint64_t *)&__src, v24, 0);
      }
    }
  }
}

void sub_10029ECE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029EDE8(uint64_t a1, unsigned int a2, unsigned int a3, int a4, signed int a5, char a6, unsigned int a7)
{
  int v7 = *(_DWORD *)a1;
  int v8 = *(_DWORD *)a1 & 0x1F0000;
  if (a7) {
    char v9 = 1;
  }
  else {
    char v9 = a6;
  }
  if ((v9 & 1) == 0 && a5 < 0 && v8 == 0x10000)
  {
    if ((v7 & 0x40000000) != 0
      && (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 4) != a3
       || **(_DWORD **)(*(void *)(a1 + 8) + 64) != a2))
    {
      unint64_t __src = 0;
      uint64_t v28 = 0;
      qmemcpy((void *)sub_1002D19D8(&__src, 68), "!fixedSize() || ((Mat*)obj)->size.operator()() == Size(_cols, _rows)", 68);
      sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2427);
    }
    if (v7 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a4)
    {
      unint64_t __src = 0;
      uint64_t v28 = 0;
      qmemcpy((void *)sub_1002D19D8(&__src, 44), "!fixedType() || ((Mat*)obj)->type() == mtype", 44);
      sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2428);
    }
    uint64_t v11 = *(void *)(a1 + 8);
    int v12 = a4 & 0xFFF;
    if (*(int *)(v11 + 4) > 2
      || *(_DWORD *)(v11 + 8) != a2
      || *(_DWORD *)(v11 + 12) != a3
      || (*(_DWORD *)v11 & 0xFFF) != v12
      || !*(void *)(v11 + 16))
    {
      unint64_t __src = __PAIR64__(a3, a2);
      sub_100292534((char *)v11, 2, (uint64_t *)&__src, v12);
    }
  }
  else
  {
    if (a5 < 0 && v8 == 655360) {
      char v14 = v9;
    }
    else {
      char v14 = 1;
    }
    if (v14)
    {
      if (a5 < 0 && v8 == 589824) {
        char v16 = v9;
      }
      else {
        char v16 = 1;
      }
      if ((v16 & 1) == 0)
      {
        if ((v7 & 0x40000000) != 0
          && (*(_DWORD *)(*(void *)(a1 + 8) + 8) != a3 || *(_DWORD *)(*(void *)(a1 + 8) + 4) != a2))
        {
          unint64_t __src = 0;
          uint64_t v28 = 0;
          qmemcpy((void *)sub_1002D19D8(&__src, 66), "!fixedSize() || ((cuda::GpuMat*)obj)->size() == Size(_cols, _rows)", 66);
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2441);
        }
        if (v7 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a4)
        {
          unint64_t __src = 0;
          uint64_t v28 = 0;
          qmemcpy((void *)sub_1002D19D8(&__src, 53), "!fixedType() || ((cuda::GpuMat*)obj)->type() == mtype", 53);
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2442);
        }
        sub_100259AD4();
      }
      if (a5 < 0 && v8 == 458752) {
        char v18 = v9;
      }
      else {
        char v18 = 1;
      }
      if ((v18 & 1) == 0)
      {
        if ((v7 & 0x40000000) != 0
          && (*(_DWORD *)(*(void *)(a1 + 8) + 20) != a3 || *(_DWORD *)(*(void *)(a1 + 8) + 16) != a2))
        {
          sub_10022F344(&__src, "!fixedSize() || ((ogl::Buffer*)obj)->size() == Size(_cols, _rows)");
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2448);
        }
        if (v7 < 0 && *(_DWORD *)(*(void *)(a1 + 8) + 24) != a4)
        {
          sub_10022F344(&__src, "!fixedType() || ((ogl::Buffer*)obj)->type() == mtype");
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2449);
        }
        sub_1002ABC00();
      }
      if (a5 < 0 && v8 == 0x80000) {
        char v20 = v9;
      }
      else {
        char v20 = 1;
      }
      if ((v20 & 1) == 0)
      {
        if ((v7 & 0x40000000) != 0)
        {
          uint64_t v26 = *(void *)(a1 + 8);
          if (*(_DWORD *)(v26 + 8) != a3 || *(_DWORD *)(v26 + 4) != a2)
          {
            sub_10022F344(&__src, "!fixedSize() || ((cuda::HostMem*)obj)->size() == Size(_cols, _rows)");
            sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2455);
          }
        }
        if (v7 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a4)
        {
          sub_10022F344(&__src, "!fixedType() || ((cuda::HostMem*)obj)->type() == mtype");
          sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2456);
        }
        sub_100259BFC();
      }
      unint64_t __src = __PAIR64__(a3, a2);
      sub_100295520((int *)a1, 2, (uint64_t *)&__src, a4, a5, a6, a7);
    }
    else
    {
      if ((v7 & 0x40000000) != 0
        && (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 48) + 4) != a3
         || **(_DWORD **)(*(void *)(a1 + 8) + 48) != a2))
      {
        unint64_t __src = 0;
        uint64_t v28 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 69), "!fixedSize() || ((UMat*)obj)->size.operator()() == Size(_cols, _rows)", 69);
        sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2434);
      }
      if (v7 < 0 && (**(_DWORD **)(a1 + 8) & 0xFFF) != a4)
      {
        unint64_t __src = 0;
        uint64_t v28 = 0;
        qmemcpy((void *)sub_1002D19D8(&__src, 45), "!fixedType() || ((UMat*)obj)->type() == mtype", 45);
        sub_1002D2278(-215, (uint64_t *)&__src, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2435);
      }
      uint64_t v22 = *(void *)(a1 + 8);
      int v23 = a4 & 0xFFF;
      if (*(int *)(v22 + 4) > 2
        || *(_DWORD *)(v22 + 8) != a2
        || *(_DWORD *)(v22 + 12) != a3
        || (*(_DWORD *)v22 & 0xFFF) != v23
        || !*(void *)(v22 + 32))
      {
        unint64_t __src = __PAIR64__(a3, a2);
        sub_1002D9CB8(v22, 2, (uint64_t *)&__src, v23, 0);
      }
    }
  }
}

void sub_10029F3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029F4D8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF) == 1) {
    uint64_t result = sub_1002DA390(result);
  }
  if (*(int *)(v1 + 4) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v1 + 48);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(v1 + 4));
  }
  *(void *)(v1 + 32) = 0;
  return result;
}

void sub_10029F548(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1002A5A78((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        char v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_10029F5F8(uint64_t a1, unint64_t a2)
{
  BOOL v5 = *(char **)a1;
  unint64_t v4 = *(char **)(a1 + 8);
  unint64_t v6 = (unint64_t)&v4[-*(void *)a1];
  size_t v7 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 - (uint64_t)v4 >= v7)
    {
      bzero(*(void **)(a1 + 8), a2 - v6);
      *(void *)(a1 + 8) = &v4[v7];
      return;
    }
    if ((a2 & 0x8000000000000000) != 0) {
      sub_10000B98C();
    }
    unint64_t v9 = v8 - (void)v5;
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= a2) {
      uint64_t v10 = a2;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    int v12 = (char *)operator new(v11);
    uint64_t v13 = &v12[v6];
    char v14 = &v12[v11];
    uint64_t v15 = &v12[a2];
    bzero(&v12[v6], v7);
    if (v4 == v5) {
      goto LABEL_29;
    }
    if (v6 >= 8 && (unint64_t)(v5 - v12) >= 0x20)
    {
      if (v6 < 0x20)
      {
        unint64_t v16 = 0;
        goto LABEL_21;
      }
      unint64_t v16 = v6 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v17 = v4 - 16;
      char v18 = &v12[v4 - 16 - v5];
      unint64_t v19 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)char v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v6 == v16) {
        goto LABEL_28;
      }
      if ((v6 & 0x18) != 0)
      {
LABEL_21:
        v13 -= v6 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v21 = &v4[-v16 - 8];
        uint64_t v22 = (char *)(v21 - v5);
        unint64_t v23 = v16 - (v6 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v24 = *(void *)v21;
          v21 -= 8;
          *(void *)&v22[(void)v12] = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        v4 -= v6 & 0xFFFFFFFFFFFFFFF8;
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
      v13 -= v16;
      v4 -= v16;
    }
LABEL_26:
    uint64_t v25 = v13 - 1;
    do
    {
      char v26 = *--v4;
      *v25-- = v26;
    }
    while (v4 != v5);
LABEL_28:
    unint64_t v4 = v5;
    uint64_t v13 = v12;
LABEL_29:
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (v4)
    {
      operator delete(v4);
    }
    return;
  }
  if (a2 < v6) {
    *(void *)(a1 + 8) = &v5[a2];
  }
}

void sub_10029F7E4(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 1;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A5C80(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 2 * a2;
  }
}

void sub_10029F810(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A5E50(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 3 * a2;
  }
}

void sub_10029F848(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 2;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10025FCA8((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 4 * a2;
  }
}

void sub_10029F874(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 1);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A6098((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 6 * a2;
  }
}

void sub_10029F8B0(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 3;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A62F4((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 8 * a2;
  }
}

void sub_10029F8DC(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A64D8((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void sub_10029F918(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 4;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A6734((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 16 * a2;
  }
}

void sub_10029F944(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A6928((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 24 * a2;
  }
}

void sub_10029F980(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 5;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A6AE8((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 32 * a2;
  }
}

void sub_10029F9AC(void *a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A6C4C((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 36 * a2;
  }
}

void sub_10029F9F0(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A6E58((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 48 * a2;
  }
}

void sub_10029FA2C(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 6;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A7048((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + (a2 << 6);
  }
}

void sub_10029FA58(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 7;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A71EC((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + (a2 << 7);
  }
}

void sub_10029FA84(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 8;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A7478((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + (a2 << 8);
  }
}

void sub_10029FAB0(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 9;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1002A77B8((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + (a2 << 9);
  }
}

void sub_10029FADC(int *a1, char *a2, unsigned __int16 a3)
{
  uint64_t v4 = (uint64_t)a2;
  LODWORD(a2) = *(_DWORD *)a2 & 0x1F0000;
  if (a2)
  {
    if (a2 == 655360)
    {
      uint64_t v18 = *(void *)(v4 + 8);
      a2 = (char *)*(unsigned int *)(v18 + 4);
      if ((int)a2 >= 1)
      {
        unint64_t v19 = 0;
        uint64_t v20 = *(void *)(v18 + 48);
        if (a2 < 8) {
          goto LABEL_19;
        }
        if ((unint64_t)__src - v20 < 0x20) {
          goto LABEL_19;
        }
        unint64_t v19 = (char *)(a2 & 0x7FFFFFF8);
        uint64_t v21 = (long long *)(v20 + 16);
        uint64_t v22 = v32;
        uint64_t v23 = a2 & 0xFFFFFFF8;
        do
        {
          long long v24 = *v21;
          *(v22 - 1) = *(v21 - 1);
          _OWORD *v22 = v24;
          v21 += 2;
          v22 += 2;
          v23 -= 8;
        }
        while (v23);
        if (v19 != a2)
        {
LABEL_19:
          uint64_t v25 = (char *)(a2 - v19);
          uint64_t v26 = 4 * (void)v19;
          uint64_t v27 = (_DWORD *)__src + (void)v19;
          uint64_t v28 = (int *)(v20 + v26);
          do
          {
            int v29 = *v28++;
            *v27++ = v29;
            --v25;
          }
          while (v25);
        }
      }
    }
    else if (a2 == 0x10000)
    {
      uint64_t v6 = *(void *)(v4 + 8);
      a2 = (char *)*(unsigned int *)(v6 + 4);
      if ((int)a2 >= 1)
      {
        size_t v7 = 0;
        uint64_t v8 = *(void *)(v6 + 64);
        if (a2 < 8) {
          goto LABEL_10;
        }
        if ((unint64_t)__src - v8 < 0x20) {
          goto LABEL_10;
        }
        size_t v7 = (char *)(a2 & 0x7FFFFFF8);
        unint64_t v9 = (long long *)(v8 + 16);
        uint64_t v10 = v32;
        uint64_t v11 = a2 & 0xFFFFFFF8;
        do
        {
          long long v12 = *v9;
          *(v10 - 1) = *(v9 - 1);
          _OWORD *v10 = v12;
          v9 += 2;
          v10 += 2;
          v11 -= 8;
        }
        while (v11);
        if (v7 != a2)
        {
LABEL_10:
          uint64_t v13 = (char *)(a2 - v7);
          uint64_t v14 = 4 * (void)v7;
          uint64_t v15 = (_DWORD *)__src + (void)v7;
          unint64_t v16 = (int *)(v8 + v14);
          do
          {
            int v17 = *v16++;
            *v15++ = v17;
            --v13;
          }
          while (v13);
        }
      }
    }
    else
    {
      sub_10029A23C(v4, 0xFFFFFFFF, (uint64_t)&v30);
      __src[0] = (uint64_t)vrev64_s32(v30);
      LODWORD(a2) = 2;
    }
  }
  sub_100295520(a1, (int)a2, __src, a3, 0xFFFFFFFF, 0, 0);
}

void sub_10029FCA4(uint64_t a1)
{
  if ((*(_DWORD *)a1 & 0x1F0000) == 0x10000)
  {
    if ((*(_DWORD *)a1 & 0x40000000) != 0)
    {
      v6[0] = 0;
      v6[1] = 0;
      uint64_t v1 = sub_1002D19D8(v6, 12);
      *(_DWORD *)(v1 + 8) = 690513274;
      *(void *)uint64_t v1 = *(void *)"!fixedSize()";
      sub_1002D2278(-215, v6, "clear", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 2906);
    }
    uint64_t v2 = *(void *)(a1 + 8);
    BOOL v3 = *(int **)(v2 + 64);
    uint64_t v4 = *v3;
    if (v4)
    {
      if ((*(unsigned char *)(v2 + 1) & 0x80) != 0 || *(void *)(v2 + 16) > *(void *)(v2 + 40))
      {
        sub_100293FD0(v2, 0);
        BOOL v3 = *(int **)(v2 + 64);
      }
      uint64_t v5 = **(void **)(v2 + 72);
      *BOOL v3 = 0;
      *(void *)(v2 + 32) -= v4 * v5;
    }
  }
  else
  {
    sub_10029E05C(a1);
  }
}

void sub_10029FDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_10029FDC8(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 2) & 0x1F) != 0;
}

void sub_10029FDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)a1 & 0x1F0000;
  if (!v3) {
    return;
  }
  if ((*(_DWORD *)a1 & 0x1D0000) == 0x10000)
  {
    if (v3 == 0x10000)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      long long v8 = *(_OWORD *)(v7 + 16);
      long long v29 = *(_OWORD *)v7;
      long long v30 = v8;
      long long v31 = *(_OWORD *)(v7 + 32);
      uint64_t v9 = *(void *)(v7 + 56);
      uint64_t v32 = *(void *)(v7 + 48);
      uint64_t v33 = v9;
      uint64_t v34 = (_DWORD *)&v29 + 2;
      uint64_t v35 = &v36;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      if (v9) {
        atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 1u);
      }
      if (*(int *)(v7 + 4) > 2)
      {
        DWORD1(v29) = 0;
        sub_1002931A8((uint64_t)&v29, v7);
      }
      else
      {
        uint64_t v10 = *(void **)(v7 + 72);
        uint64_t v11 = v35;
        *(void *)uint64_t v35 = *v10;
        v11[1] = v10[1];
      }
      goto LABEL_20;
    }
LABEL_18:
    sub_100299554(a1, -1, (uint64_t)&v29);
LABEL_20:
    sub_100255630((uint64_t)&v29, a2, a3);
    if (v33)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v33 + 20), 0xFFFFFFFF) == 1)
      {
        uint64_t v17 = v33;
        if (v33)
        {
          uint64_t v33 = 0;
          uint64_t v18 = *(void *)(v17 + 8);
          if (!v18)
          {
            uint64_t v18 = v32;
            if (!v32) {
              uint64_t v18 = sub_10029230C();
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 48))(v18, v17);
        }
      }
    }
    uint64_t v33 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    if (SDWORD1(v29) >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = v34;
      do
        v20[v19++] = 0;
      while (v19 < SDWORD1(v29));
    }
    if (v35 != &v36) {
      j__free(v35);
    }
    return;
  }
  if ((*(_DWORD *)a1 & 0x1F0000u) < 0xA0000)
  {
    if (v3 == 0x20000) {
      goto LABEL_18;
    }
    if (v3 == 589824)
    {
      if ((*(_DWORD *)a2 & 0x1F0000) == 0x10000)
      {
        uint64_t v12 = *(void *)(a2 + 8);
        long long v13 = *(_OWORD *)(v12 + 16);
        long long v29 = *(_OWORD *)v12;
        long long v30 = v13;
        long long v31 = *(_OWORD *)(v12 + 32);
        uint64_t v14 = *(void *)(v12 + 56);
        uint64_t v32 = *(void *)(v12 + 48);
        uint64_t v33 = v14;
        uint64_t v34 = (_DWORD *)&v29 + 2;
        uint64_t v35 = &v36;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        if (v14) {
          atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
        }
        if (*(int *)(v12 + 4) > 2)
        {
          DWORD1(v29) = 0;
          sub_1002931A8((uint64_t)&v29, v12);
        }
        else
        {
          uint64_t v15 = *(void **)(v12 + 72);
          unint64_t v16 = v35;
          *(void *)uint64_t v35 = *v15;
          v16[1] = v15[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)&v29);
      }
      unsigned int v22 = sub_10029AB74((int *)a1, -1);
      if (SDWORD1(v29) <= 2 && (v29 & 0x4000) != 0)
      {
        int v23 = *v34;
        int v24 = v34[1];
        if (v24 == 1 || v23 == 1)
        {
          unsigned int v26 = (v22 >> 3) & 0x1FF;
          BOOL v27 = v24 == v26 + 1;
          if (v23 != 1) {
            BOOL v27 = 0;
          }
          BOOL v28 = v23 == v26 + 1 || v23 == 1;
          if (v24 != 1) {
            BOOL v28 = 0;
          }
          if (v28 || v27 || v24 == 1 && v23 == 4 && v26 <= 3 && (v29 & 0xFFF) == 6)
          {
            long long v25 = *(_OWORD *)(v30 + 16);
            v38[0] = *(_OWORD *)v30;
            v38[1] = v25;
            sub_100259DA4();
          }
        }
      }
      v38[0] = 0uLL;
      qmemcpy((void *)sub_1002D19D8(v38, 65), "checkScalar(value, type(), arr.kind(), _InputArray::CUDA_GPU_MAT)", 65);
      sub_1002D2278(-215, (uint64_t *)v38, "setTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3004);
    }
LABEL_36:
    long long v29 = 0uLL;
    sub_1002D2278(-213, (uint64_t *)&v29, "setTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3008);
  }
  if (v3 != 655360)
  {
    if (v3 == 917504) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
  uint64_t v21 = *(void *)(a1 + 8);

  sub_1002DC000(v21, a2, a3);
}

void sub_1002A026C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C((uint64_t *)(v9 - 64));
  sub_1000094F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int *sub_1002A02C4()
{
  return &dword_1004E0A10;
}

void sub_1002A02D0(uint64_t a1, double *a2)
{
  sub_1002D6AE8(v70, &off_100495D70);
  if ((int)sub_10029C9C4(a1, -1) >= 3)
  {
    long long v62 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v62, 14), "_m.dims() <= 2", 14);
    sub_1002D2278(-215, (uint64_t *)&v62, "setIdentity", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3277);
  }
  if ((*(_DWORD *)a1 & 0x1F0000) == 0x10000)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    long long v5 = *(_OWORD *)(v4 + 16);
    long long v62 = *(_OWORD *)v4;
    *(_OWORD *)unint64_t v63 = v5;
    long long v64 = *(_OWORD *)(v4 + 32);
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v65 = *(void *)(v4 + 48);
    uint64_t v66 = v6;
    uint64_t v67 = (char *)&v62 + 8;
    uint64_t v68 = v69;
    v69[0] = 0;
    v69[1] = 0;
    if (v6) {
      atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 1u);
    }
    if (*(int *)(v4 + 4) > 2)
    {
      DWORD1(v62) = 0;
      sub_1002931A8((uint64_t)&v62, v4);
    }
    else
    {
      uint64_t v7 = *(void **)(v4 + 72);
      long long v8 = v68;
      *(void *)uint64_t v68 = *v7;
      v8[1] = v7[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v62);
  }
  uint64_t v9 = DWORD2(v62);
  unint64_t v10 = HIDWORD(v62);
  int v11 = v62 & 0xFFF;
  if (v11 == 6)
  {
    if (SDWORD2(v62) >= 1 && SHIDWORD(v62) >= 1)
    {
      double v17 = *a2;
      uint64_t v18 = (double *)v63[0];
      uint64_t v19 = v69[0] >> 3;
      if (HIDWORD(v62) > 3)
      {
        int8x16_t v33 = (int8x16_t)vdupq_lane_s64(*(uint64_t *)&v17, 0);
        if ((HIDWORD(v62) & 0xFFFFFFFC) == (unint64_t)HIDWORD(v62))
        {
          unint64_t v34 = 0;
          uint64_t v35 = (8 * HIDWORD(v62)) & 0x7FFFFFFE0;
          uint64_t v36 = 8 * v19;
          int64x2_t v37 = vdupq_n_s64(2uLL);
          int64x2_t v38 = vdupq_n_s64(4uLL);
          do
          {
            unint64_t v39 = 0;
            int64x2_t v40 = vdupq_n_s64(v34);
            int64x2_t v41 = (int64x2_t)xmmword_1004027B0;
            do
            {
              uint64_t v42 = (int8x16_t *)&v18[v39 / 8];
              *uint64_t v42 = vandq_s8(v33, (int8x16_t)vceqq_s64(v41, v40));
              v42[1] = vandq_s8(v33, (int8x16_t)vceqq_s64(vaddq_s64(v41, v37), v40));
              int64x2_t v41 = vaddq_s64(v41, v38);
              v39 += 32;
            }
            while (v35 != v39);
            ++v34;
            uint64_t v18 = (double *)((char *)v18 + v36);
          }
          while (v34 != v9);
        }
        else
        {
          unint64_t v43 = 0;
          uint64_t v44 = 8 * v19;
          uint64_t v45 = (8 * HIDWORD(v62)) & 0x7FFFFFFE0;
          int64x2_t v46 = vdupq_n_s64(2uLL);
          int64x2_t v47 = vdupq_n_s64(4uLL);
          do
          {
            unint64_t v48 = 0;
            int64x2_t v49 = vdupq_n_s64(v43);
            int64x2_t v50 = (int64x2_t)xmmword_1004027B0;
            do
            {
              int v51 = (int8x16_t *)&v18[v48 / 8];
              *int v51 = vandq_s8(v33, (int8x16_t)vceqq_s64(v50, v49));
              v51[1] = vandq_s8(v33, (int8x16_t)vceqq_s64(vaddq_s64(v50, v46), v49));
              int64x2_t v50 = vaddq_s64(v50, v47);
              v48 += 32;
            }
            while (v45 != v48);
            uint64_t v52 = v10 & 0x7FFFFFFC;
            do
            {
              if (v43 == v52) {
                double v53 = v17;
              }
              else {
                double v53 = 0.0;
              }
              v18[v52++] = v53;
            }
            while (v10 != v52);
            ++v43;
            uint64_t v18 = (double *)((char *)v18 + v44);
          }
          while (v43 != v9);
        }
      }
      else
      {
        *(double *)v63[0] = v17;
        if (v10 != 1)
        {
          v18[1] = 0.0;
          if (v10 != 2) {
            void v18[2] = 0.0;
          }
        }
        if (v9 != 1)
        {
          uint64_t v20 = &v18[v19];
          *uint64_t v20 = 0.0;
          if (v10 != 1)
          {
            v20[1] = v17;
            if (v10 != 2) {
              void v20[2] = 0.0;
            }
          }
          if (v9 != 2)
          {
            uint64_t v21 = (char *)&v20[v19];
            *(void *)uint64_t v21 = 0;
            if (v10 != 1)
            {
              *((void *)v21 + 1) = 0;
              if (v10 != 2) {
                *((double *)v21 + 2) = v17;
              }
            }
            if (v9 != 3)
            {
              uint64_t v22 = v9 - 3;
              int v23 = &v18[3 * v19 + 1];
              uint64_t v24 = 8 * v19;
              do
              {
                *(v23 - 1) = 0.0;
                if (v10 != 1)
                {
                  double *v23 = 0.0;
                  if (v10 != 2) {
                    v23[1] = 0.0;
                  }
                }
                int v23 = (double *)((char *)v23 + v24);
                --v22;
              }
              while (v22);
            }
          }
        }
      }
    }
  }
  else if (v11 == 5)
  {
    if (SDWORD2(v62) >= 1 && SHIDWORD(v62) >= 1)
    {
      unint64_t v12 = 0;
      float v13 = *a2;
      uint64_t v14 = (char *)v63[0];
      uint64_t v15 = 4 * (v69[0] >> 2);
      unint64_t v16 = (float *)v63[0];
      do
      {
        bzero(v14, 4 * v10);
        if (v12 < v10) {
          *unint64_t v16 = v13;
        }
        ++v12;
        unint64_t v16 = (float *)((char *)v16 + v15 + 4);
        v14 += v15;
      }
      while (v9 != v12);
    }
  }
  else
  {
    long long v54 = 0u;
    long long v55 = 0u;
    sub_100255390((uint64_t)&v62, (uint64_t)&v54);
    sub_100293DB4((uint64_t)&v62, 0, (uint64_t)&v54);
    sub_100255390((uint64_t)&v54, (uint64_t)a2);
    if (v58)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v58 + 20), 0xFFFFFFFF) == 1)
      {
        uint64_t v25 = v58;
        if (v58)
        {
          uint64_t v58 = 0;
          uint64_t v26 = *(void *)(v25 + 8);
          if (!v26)
          {
            uint64_t v26 = v57;
            if (!v57) {
              uint64_t v26 = sub_10029230C();
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 48))(v26, v25);
        }
      }
    }
    uint64_t v58 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    if (SDWORD1(v54) >= 1)
    {
      uint64_t v27 = 0;
      uint64_t v28 = v59;
      do
        *(_DWORD *)(v28 + 4 * v27++) = 0;
      while (v27 < SDWORD1(v54));
    }
    if (v60 != &v61) {
      j__free(v60);
    }
  }
  if (v66)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v66 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v29 = v66;
      if (v66)
      {
        uint64_t v66 = 0;
        uint64_t v30 = *(void *)(v29 + 8);
        if (!v30)
        {
          uint64_t v30 = v65;
          if (!v65) {
            uint64_t v30 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 48))(v30, v29);
      }
    }
  }
  uint64_t v66 = 0;
  *(_OWORD *)unint64_t v63 = 0u;
  long long v64 = 0u;
  if (SDWORD1(v62) >= 1)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v67;
    do
      *(_DWORD *)&v32[4 * v31++] = 0;
    while (v31 < SDWORD1(v62));
  }
  if (v68 != v69) {
    j__free(v68);
  }
  if (v71) {
    sub_1002D6888(v70);
  }
}

void sub_1002A0854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 112);
  _Unwind_Resume(a1);
}

void sub_1002A0888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1002D1A1C((uint64_t *)va);
  sub_10020FA00(v13 - 112);
  _Unwind_Resume(a1);
}

void sub_1002A08E0(uint64_t a1, char a2)
{
  sub_1002D6AE8(v38, &off_100495FC0);
  if ((*(_DWORD *)a1 & 0x1F0000) == 0x10000)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    long long v5 = *(_OWORD *)(v4 + 16);
    long long v30 = *(_OWORD *)v4;
    *(_OWORD *)unint64_t __src = v5;
    long long v32 = *(_OWORD *)(v4 + 32);
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v33 = *(void *)(v4 + 48);
    uint64_t v34 = v6;
    uint64_t v35 = (char *)&v30 + 8;
    uint64_t v36 = v37;
    v37[0] = 0;
    v37[1] = 0;
    if (v6) {
      atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 1u);
    }
    if (*(int *)(v4 + 4) > 2)
    {
      DWORD1(v30) = 0;
      sub_1002931A8((uint64_t)&v30, v4);
    }
    else
    {
      uint64_t v7 = *(void **)(v4 + 72);
      long long v8 = v36;
      *(void *)uint64_t v36 = *v7;
      v8[1] = v7[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v30);
  }
  uint64_t v9 = v37[0];
  if (SDWORD1(v30) < 1)
  {
    size_t v10 = 0;
    int v11 = DWORD2(v30);
    if (DWORD2(v30) == HIDWORD(v30)) {
      goto LABEL_11;
    }
LABEL_14:
    v29[0] = 0;
    v29[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v29, 31), "m.dims <= 2 && m.rows == m.cols", 31);
    sub_1002D2278(-215, v29, "completeSymm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 3640);
  }
  size_t v10 = *((void *)v36 + (DWORD1(v30) - 1));
  if (DWORD1(v30) > 2) {
    goto LABEL_14;
  }
  int v11 = DWORD2(v30);
  if (DWORD2(v30) != HIDWORD(v30)) {
    goto LABEL_14;
  }
LABEL_11:
  if (v11 >= 1)
  {
    unint64_t v12 = (char *)__src[0];
    unint64_t v13 = v11;
    unint64_t v14 = 0;
    if (a2)
    {
      uint64_t v15 = (char *)__src[0] + v37[0];
      size_t v28 = v10 + v37[0];
      uint64_t v16 = 1;
      do
      {
        ++v14;
        unint64_t v17 = v13;
        uint64_t v18 = v12;
        uint64_t v19 = v15;
        if (v14 < v13)
        {
          do
          {
            v18 += v10;
            memcpy(v18, v19, v10);
            v19 += v9;
            --v17;
          }
          while (v16 != v17);
        }
        ++v16;
        v15 += v28;
        v12 += v28;
      }
      while (v14 != v13);
    }
    else
    {
      uint64_t v20 = (char *)__src[0];
      do
      {
        if (v14)
        {
          unint64_t v21 = v14;
          uint64_t v22 = v12;
          int v23 = v20;
          do
          {
            memcpy(v22, v23, v10);
            v23 += v9;
            v22 += v10;
            --v21;
          }
          while (v21);
        }
        ++v14;
        v20 += v10;
        v12 += v9;
      }
      while (v14 != v13);
    }
  }
  if (v34)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v34 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v24 = v34;
      if (v34)
      {
        uint64_t v34 = 0;
        uint64_t v25 = *(void *)(v24 + 8);
        if (!v25)
        {
          uint64_t v25 = v33;
          if (!v33) {
            uint64_t v25 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 48))(v25, v24);
      }
    }
  }
  uint64_t v34 = 0;
  *(_OWORD *)unint64_t __src = 0u;
  long long v32 = 0u;
  if (SDWORD1(v30) >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v35;
    do
      *(_DWORD *)&v27[4 * v26++] = 0;
    while (v26 < SDWORD1(v30));
  }
  if (v36 != v37) {
    j__free(v36);
  }
  if (v39) {
    sub_1002D6888(v38);
  }
}

void sub_1002A0C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1000094F4((uint64_t)va1);
  sub_10020FA00(v3 - 96);
  _Unwind_Resume(a1);
}

void sub_1002A0C40(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1002A0C58(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v6 = a2;
  if (!a2 || !(a3 | a4))
  {
    *(void *)long long v64 = 0;
    *(void *)&v64[8] = 0;
    qmemcpy((void *)sub_1002D19D8(v64, 29), "_arrays && (_ptrs || _planes)", 29);
    sub_1002D2278(-215, (uint64_t *)v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4803);
  }
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (a5 < 0)
  {
    LODWORD(v5) = -1;
    do
    {
      uint64_t v8 = *v6++;
      LODWORD(v5) = v5 + 1;
    }
    while (v8);
    *(_DWORD *)(a1 + 24) = v5;
    if (v5 >= 0x3E9)
    {
      *(void *)long long v64 = 0;
      *(void *)&v64[8] = 0;
      qmemcpy((void *)sub_1002D19D8(v64, 15), "narrays <= 1000", 15);
      sub_1002D2278(-215, (uint64_t *)v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4818);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  if ((int)v5 < 1)
  {
LABEL_68:
    *(_DWORD *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    if (*(void *)(a1 + 8)) {
      BOOL v45 = (int)v5 < 1;
    }
    else {
      BOOL v45 = 1;
    }
    if (!v45) {
      goto LABEL_87;
    }
    return;
  }
  uint64_t v9 = 0;
  LODWORD(v10) = 0;
  unsigned int v11 = -1;
  uint64_t v12 = 0xFFFFFFFFLL;
  while (2)
  {
    uint64_t v15 = *(void *)(*(void *)a1 + 8 * v9);
    if (!v15)
    {
      *(void *)long long v64 = 0;
      *(void *)&v64[8] = 0;
      qmemcpy((void *)sub_1002D19D8(v64, 14), "arrays[i] != 0", 14);
      sub_1002D2278(-215, (uint64_t *)v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4825);
    }
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16) {
      *(void *)(v16 + 8 * v9) = *(void *)(v15 + 16);
    }
    if (!*(void *)(v15 + 16)) {
      goto LABEL_15;
    }
    if ((v12 & 0x80000000) == 0)
    {
      unint64_t v17 = *(_DWORD **)(v15 + 64);
      unint64_t v18 = *(v17 - 1);
      uint64_t v19 = *(_DWORD **)(*(void *)(*(void *)a1 + 8 * v12) + 64);
      if (v18 == *(v19 - 1))
      {
        if (v18 == 2)
        {
          if (*v17 == *v19 && v17[1] == v19[1]) {
            goto LABEL_41;
          }
        }
        else
        {
          if ((int)v18 < 1) {
            goto LABEL_41;
          }
          if (*v17 == *v19)
          {
            uint64_t v21 = 1;
            do
            {
              unint64_t v22 = v21;
              if (v18 == v21) {
                break;
              }
              int v23 = v17[v21];
              int v24 = v19[v21++];
            }
            while (v23 == v24);
            if (v22 >= v18)
            {
LABEL_41:
              if ((*(unsigned char *)(v15 + 1) & 0x40) == 0) {
                goto LABEL_42;
              }
              goto LABEL_15;
            }
          }
        }
      }
      *(void *)long long v64 = 0;
      *(void *)&v64[8] = 0;
      qmemcpy((void *)sub_1002D19D8(v64, 26), "A.size == arrays[i0]->size", 26);
      sub_1002D2278(-215, (uint64_t *)v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4845);
    }
    uint64_t v10 = *(unsigned int *)(v15 + 4);
    uint64_t v12 = v9;
    if ((int)v10 <= 0)
    {
      unsigned int v11 = *(_DWORD *)(v15 + 4);
      LODWORD(v10) = 0;
      goto LABEL_41;
    }
    for (uint64_t i = 0; i != v10; ++i)
    {
      if (*(int *)(*(void *)(v15 + 64) + 4 * i) > 1)
      {
        unsigned int v11 = *(_DWORD *)(v15 + 4);
        LODWORD(v10) = i;
        if ((*(unsigned char *)(v15 + 1) & 0x40) != 0) {
          goto LABEL_15;
        }
LABEL_42:
        uint64_t v25 = *(void *)(v15 + 72);
        int v26 = *(_DWORD *)(v15 + 4);
        BOOL v27 = __OFSUB__(v26, 1);
        int v28 = v26 - 1;
        if (v28 < 0 != v27)
        {
          int v29 = v11 - 1;
          if (!*(void *)(v25 + 8 * (int)(v11 - 1))) {
            goto LABEL_47;
          }
        }
        else
        {
          int v29 = v11 - 1;
          if (*(void *)(v25 + 8 * (int)(v11 - 1)) == *(void *)(v25 + 8 * v28))
          {
LABEL_47:
            uint64_t v30 = v29;
            if ((int)v10 >= v29) {
              int v31 = v29;
            }
            else {
              int v31 = v10;
            }
            signed int v13 = v11;
            while (v30 > (int)v10)
            {
              unint64_t v32 = *(void *)(*(void *)(v15 + 72) + 8 * v30 - 8);
              unint64_t v33 = *(void *)(*(void *)(v15 + 72) + 8 * v30) * *(int *)(*(void *)(v15 + 64) + 4 * v30);
              --v30;
              --v13;
              if (v33 < v32) {
                goto LABEL_12;
              }
            }
            signed int v13 = v31;
LABEL_12:
            signed int v14 = *(_DWORD *)(a1 + 48);
            if (v14 <= v13) {
              signed int v14 = v13;
            }
            *(_DWORD *)(a1 + 48) = v14;
            goto LABEL_15;
          }
        }
        *(void *)long long v64 = 0;
        *(void *)&v64[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v64, 27), "A.step[d-1] == A.elemSize()", 27);
        sub_1002D2278(-215, (uint64_t *)v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4849);
      }
    }
    unsigned int v11 = *(_DWORD *)(v15 + 4);
    if ((*(unsigned char *)(v15 + 1) & 0x40) == 0) {
      goto LABEL_42;
    }
LABEL_15:
    ++v9;
    uint64_t v5 = *(int *)(a1 + 24);
    if (v9 < v5) {
      continue;
    }
    break;
  }
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_68;
  }
  LODWORD(v34) = v11 - 1;
  uint64_t v35 = *(void *)(*(void *)(*(void *)a1 + 8 * v12) + 64);
  uint64_t v36 = (int)(v11 - 1);
  uint64_t v37 = *(int *)(v35 + 4 * v36);
  uint64_t v38 = *(int *)(a1 + 48);
  if ((int)v38 < (int)(v11 - 1)) {
    LODWORD(v34) = *(_DWORD *)(a1 + 48);
  }
  while (1)
  {
    uint64_t v39 = v37;
    if (v36 <= v38) {
      break;
    }
    uint64_t v40 = *(int *)(v35 - 4 + 4 * v36--);
    uint64_t v37 = v39 * v40;
    --v11;
    if (v37 != (int)v37)
    {
      *(void *)(a1 + 40) = v39;
      if (v11 == v10) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v11;
      }
      *(_DWORD *)(a1 + 48) = v34;
      uint64_t v42 = (v34 - 1);
      BOOL v41 = v34 == 1;
      if ((int)v34 >= 1) {
        goto LABEL_65;
      }
LABEL_77:
      uint64_t v44 = 1;
      unint64_t v43 = (uint64_t *)(a1 + 32);
      goto LABEL_81;
    }
  }
  *(void *)(a1 + 40) = v37;
  if (v34 == v10) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v34;
  }
  *(_DWORD *)(a1 + 48) = v34;
  uint64_t v42 = (v34 - 1);
  BOOL v41 = v34 == 1;
  if ((int)v34 < 1) {
    goto LABEL_77;
  }
LABEL_65:
  unint64_t v43 = (uint64_t *)(a1 + 32);
  if (v41)
  {
    uint64_t v46 = 0;
    uint64_t v44 = 1;
    goto LABEL_80;
  }
  uint64_t v46 = v42 - (v34 & 0xFFFFFFFE);
  int64x2_t v47 = (int *)(v35 + 4 * v42);
  uint64_t v48 = 1;
  uint64_t v49 = v34 & 0xFFFFFFFE;
  uint64_t v50 = 1;
  do
  {
    v48 *= *v47;
    v50 *= *(v47 - 1);
    v47 -= 2;
    v49 -= 2;
  }
  while (v49);
  uint64_t v44 = v50 * v48;
  if ((v34 & 0xFFFFFFFE) != v34)
  {
    do
LABEL_80:
      v44 *= *(int *)(v35 + 4 * v46--);
    while (v46 != -1);
  }
LABEL_81:
  uint64_t *v43 = v44;
  *(void *)(a1 + 56) = 0;
  if (*(void *)(a1 + 8)) {
    BOOL v51 = (int)v5 < 1;
  }
  else {
    BOOL v51 = 1;
  }
  if (!v51)
  {
LABEL_87:
    for (uint64_t j = 0; j < *(int *)(a1 + 24); ++j)
    {
      uint64_t v53 = *(void *)(*(void *)a1 + 8 * j);
      if (!v53)
      {
        *(void *)long long v64 = 0;
        *(void *)&v64[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v64, 14), "arrays[i] != 0", 14);
        sub_1002D2278(-215, (uint64_t *)v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 4886);
      }
      uint64_t v54 = *(void *)(v53 + 16);
      if (v54)
      {
        sub_10000CE64((uint64_t)v64, 1, *(_DWORD *)(a1 + 40), *(_DWORD *)v53 & 0xFFF, v54, 0);
        sub_100287094(*(void *)(a1 + 8) + 96 * j, (uint64_t)v64);
        if (*(void *)&v64[56])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v64[56] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v55 = *(void *)&v64[56];
            if (*(void *)&v64[56])
            {
              *(void *)&v64[56] = 0;
              uint64_t v56 = *(void *)(v55 + 8);
              if (!v56)
              {
                uint64_t v56 = *(void *)&v64[48];
                if (!*(void *)&v64[48]) {
                  uint64_t v56 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v56 + 48))(v56, v55);
            }
          }
        }
        *(void *)&v64[56] = 0;
        memset(&v64[16], 0, 32);
        if (*(int *)&v64[4] >= 1)
        {
          uint64_t v57 = 0;
          uint64_t v58 = v65;
          do
            *(_DWORD *)&v58[4 * v57++] = 0;
          while (v57 < *(int *)&v64[4]);
        }
        uint64_t v59 = v66;
        if (v66 == v67) {
          continue;
        }
      }
      else
      {
        *(_DWORD *)long long v64 = 1124007936;
        memset(&v64[4], 0, 60);
        uint64_t v65 = &v64[8];
        uint64_t v66 = v67;
        v67[0] = 0;
        v67[1] = 0;
        sub_100287094(*(void *)(a1 + 8) + 96 * j, (uint64_t)v64);
        if (*(void *)&v64[56])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v64[56] + 20), 0xFFFFFFFF) == 1)
          {
            uint64_t v60 = *(void *)&v64[56];
            if (*(void *)&v64[56])
            {
              *(void *)&v64[56] = 0;
              uint64_t v61 = *(void *)(v60 + 8);
              if (!v61)
              {
                uint64_t v61 = *(void *)&v64[48];
                if (!*(void *)&v64[48]) {
                  uint64_t v61 = sub_10029230C();
                }
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 48))(v61, v60);
            }
          }
        }
        *(void *)&v64[56] = 0;
        memset(&v64[16], 0, 32);
        if (*(int *)&v64[4] >= 1)
        {
          uint64_t v62 = 0;
          unint64_t v63 = v65;
          do
            *(_DWORD *)&v63[4 * v62++] = 0;
          while (v62 < *(int *)&v64[4]);
        }
        uint64_t v59 = v66;
        if (v66 == v67) {
          continue;
        }
      }
      j__free(v59);
    }
  }
}

void sub_1002A1404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A14B0(uint64_t result)
{
  uint64_t v1 = *(atomic_uint **)(result + 8);
  if (v1)
  {
    if (atomic_fetch_add(v1, 0xFFFFFFFF) == 1)
    {
      uint64_t v2 = *(void **)(result + 8);
      if (v2)
      {
        uint64_t v3 = (void *)v2[8];
        if (v3)
        {
          v2[9] = v3;
          operator delete(v3);
        }
        uint64_t v4 = (void *)v2[5];
        if (v4)
        {
          v2[6] = v4;
          operator delete(v4);
        }
        operator delete();
      }
    }
  }
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t sub_1002A1530()
{
  return -1;
}

uint64_t sub_1002A1538()
{
  return -1;
}

void sub_1002A1548()
{
}

void sub_1002A1560()
{
}

void sub_1002A1574(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  size_t v6 = (((a4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a4 & 7))) & 3);
  uint64_t v7 = (a2 - 1);
  if (a2 < 1) {
    goto LABEL_18;
  }
  if (a6)
  {
    if (a5)
    {
      do
      {
        size_t v8 = *(void *)(a6 + 8 * v7);
        if (v8 == 0x7FFFFFFF)
        {
          *(void *)(a6 + 8 * v7) = v6;
        }
        else
        {
          BOOL v9 = v6 > v8;
          size_t v6 = *(void *)(a6 + 8 * v7);
          if (v9)
          {
            v15[0] = 0;
            v15[1] = 0;
            *(_OWORD *)sub_1002D19D8(v15, 16) = *(_OWORD *)"total <= step[i]";
            sub_1002D2278(-215, v15, "allocate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 183);
          }
        }
        v6 *= *(int *)(a3 + 4 * v7--);
      }
      while (v7 != -1);
    }
    else
    {
      do
      {
        *(void *)(a6 + 8 * v7) = v6;
        v6 *= *(int *)(a3 + 4 * v7--);
      }
      while (v7 != -1);
    }
  }
  else
  {
    if (a2 >= 2)
    {
      uint64_t v11 = a2 & 0xFFFFFFFE;
      uint64_t v10 = v7 - v11;
      uint64_t v12 = (int *)(a3 + 4 * v7);
      uint64_t v13 = 1;
      uint64_t v14 = v11;
      do
      {
        v6 *= *v12;
        v13 *= *(v12 - 1);
        v12 -= 2;
        v14 -= 2;
      }
      while (v14);
      v6 *= v13;
      if (v11 == a2) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v10 = (a2 - 1);
    }
    do
      v6 *= *(int *)(a3 + 4 * v10--);
    while (v10 != -1);
  }
LABEL_18:
  if (!a5) {
    sub_10020FDF8(v6);
  }
  operator new();
}

void sub_1002A1754()
{
}

void sub_1002A177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1002A1794(uint64_t a1, uint64_t a2)
{
  return a2 != 0;
}

void sub_1002A17A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)(a2 + 16))
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v3 = sub_1002D19D8(&v4, 17);
      *(unsigned char *)(v3 + 16) = 48;
      *(_OWORD *)uint64_t v3 = *(_OWORD *)"u->urefcount == 0";
      sub_1002D2278(-215, &v4, "deallocate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 212);
    }
    if (*(_DWORD *)(a2 + 20))
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      *(_OWORD *)sub_1002D19D8(&v4, 16) = *(_OWORD *)"u->refcount == 0";
      sub_1002D2278(-215, &v4, "deallocate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 213);
    }
    if ((*(unsigned char *)(a2 + 48) & 0x20) == 0)
    {
      j__free(*(void **)(a2 + 32));
      *(void *)(a2 + 32) = 0;
    }
    sub_1002D90E8(a2);
    operator delete();
  }
}

void sub_1002A18A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002A18D8(uint64_t result, uint64_t a2, unsigned int a3)
{
  if ((int)a3 >= 1)
  {
    unint64_t v3 = a3;
    if (a2 == 1)
    {
      uint64_t v4 = 0;
      unint64_t v5 = v3 - 1;
      size_t v6 = (long long *)(result + 17);
      uint64_t v7 = result + 1;
      uint64_t v8 = 1;
      uint64_t v9 = result;
      uint64_t v10 = result + 1;
      uint64_t v11 = (long long *)(result + 17);
      while (1)
      {
        uint64_t v12 = v4 + 1;
        if (v4 + 1 < v3) {
          break;
        }
LABEL_4:
        ++v8;
        --v5;
        uint64_t v11 = (long long *)((char *)v11 + 2);
        size_t v6 = (long long *)((char *)v6 + 2);
        v10 += 2;
        v7 += 2;
        ++v9;
        ++result;
        uint64_t v4 = v12;
        if (v12 == v3) {
          return result;
        }
      }
      unint64_t v13 = ~v4 + v3;
      uint64_t v14 = v8;
      if (v13 > 7)
      {
        if (v13 < 0x20)
        {
          unint64_t v15 = 0;
          goto LABEL_13;
        }
        unint64_t v16 = v5 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v17 = v6;
        unint64_t v18 = v11;
        do
        {
          long long v19 = *(v18 - 1);
          long long v20 = *v18;
          long long v21 = *v17;
          *(v18 - 1) = *(v17 - 1);
          long long *v18 = v21;
          *(v17 - 1) = v19;
          *unint64_t v17 = v20;
          v18 += 2;
          v17 += 2;
          v16 -= 32;
        }
        while (v16);
        if (v13 == v15) {
          goto LABEL_4;
        }
        if ((v13 & 0x18) != 0)
        {
LABEL_13:
          uint64_t v14 = v8 + (v13 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v22 = v15 - (v5 & 0xFFFFFFFFFFFFFFF8);
          int v23 = (uint64_t *)(v10 + v15);
          int v24 = (uint64_t *)(v7 + v15);
          do
          {
            uint64_t v25 = *v24;
            *v24++ = *v23;
            *v23++ = v25;
            v22 += 8;
          }
          while (v22);
          if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_4;
          }
          goto LABEL_18;
        }
        uint64_t v14 = v8 + v15;
      }
LABEL_18:
      unint64_t v26 = v3 - v14;
      BOOL v27 = (char *)(v9 + v14);
      int v28 = (char *)(result + v14);
      do
      {
        char v29 = *v28;
        *v28++ = *v27;
        *v27++ = v29;
        --v26;
      }
      while (v26);
      goto LABEL_4;
    }
    uint64_t v30 = 0;
    int v31 = (unsigned char *)(result + a2);
    uint64_t v32 = a2 + 1;
    unint64_t v33 = (char *)(result + 1);
    uint64_t v34 = 1;
    do
    {
      if (++v30 < (unint64_t)a3)
      {
        uint64_t v35 = v33;
        uint64_t v36 = v31;
        uint64_t v37 = a3;
        do
        {
          char v38 = *v35;
          uint64_t result = *v36;
          *v35++ = result;
          *uint64_t v36 = v38;
          --v37;
          v36 += a2;
        }
        while (v34 != v37);
      }
      ++v34;
      v31 += v32;
      v33 += v32;
    }
    while (v30 != a3);
  }
  return result;
}

uint64_t sub_1002A1A88(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (_WORD *)(result + a2);
    uint64_t v5 = a2 + 2;
    size_t v6 = (__int16 *)(result + 2);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        uint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          __int16 v11 = *v8;
          uint64_t result = (unsigned __int16)*v9;
          *v8++ = result;
          _WORD *v9 = v11;
          --v10;
          uint64_t v9 = (_WORD *)((char *)v9 + a2);
        }
        while (v7 != v10);
      }
      ++v7;
      uint64_t v4 = (_WORD *)((char *)v4 + v5);
      size_t v6 = (__int16 *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002A1B00(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = a3;
    uint64_t v5 = (unsigned char *)(result + 5);
    uint64_t v6 = a2 + 3;
    uint64_t v7 = a2 + result + 1;
    uint64_t v8 = 1;
    do
    {
      if (++v3 < v4)
      {
        uint64_t v9 = v7;
        uint64_t v10 = v5;
        unint64_t v11 = v4;
        do
        {
          __int16 v12 = *((_WORD *)v10 - 1);
          uint64_t result = *v10;
          char v13 = *(unsigned char *)(v9 + 1);
          *((_WORD *)v10 - 1) = *(_WORD *)(v9 - 1);
          unsigned char *v10 = v13;
          v10 += 3;
          *(_WORD *)(v9 - 1) = v12;
          *(unsigned char *)(v9 + 1) = result;
          --v11;
          v9 += a2;
        }
        while (v8 != v11);
      }
      ++v8;
      v5 += v6;
      v7 += v6;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_1002A1B8C(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (_DWORD *)(result + a2);
    uint64_t v5 = a2 + 4;
    uint64_t v6 = (int *)(result + 4);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        uint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          int v11 = *v8;
          uint64_t result = *v9;
          *v8++ = result;
          _DWORD *v9 = v11;
          --v10;
          uint64_t v9 = (_DWORD *)((char *)v9 + a2);
        }
        while (v7 != v10);
      }
      ++v7;
      unint64_t v4 = (_DWORD *)((char *)v4 + v5);
      uint64_t v6 = (int *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002A1C04(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (int *)(result + 6);
    uint64_t v5 = a2 + 6;
    uint64_t v6 = (int *)(result + a2);
    uint64_t v7 = 1;
    unint64_t v8 = a3;
    do
    {
      if (++v3 < v8)
      {
        uint64_t v9 = v6;
        uint64_t v10 = v4;
        unint64_t v11 = v8;
        do
        {
          int v12 = *v10;
          uint64_t result = *((unsigned __int16 *)v10 + 2);
          __int16 v13 = *((_WORD *)v9 + 2);
          int *v10 = *v9;
          *((_WORD *)v10 + 2) = v13;
          int *v9 = v12;
          *((_WORD *)v9 + 2) = result;
          --v11;
          uint64_t v10 = (int *)((char *)v10 + 6);
          uint64_t v9 = (int *)((char *)v9 + a2);
        }
        while (v7 != v11);
      }
      ++v7;
      unint64_t v4 = (int *)((char *)v4 + v5);
      uint64_t v6 = (int *)((char *)v6 + v5);
    }
    while (v3 != v8);
  }
  return result;
}

uint64_t sub_1002A1C90(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (uint64_t *)(result + a2);
    uint64_t v5 = a2 + 8;
    uint64_t v6 = (uint64_t *)(result + 8);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          uint64_t v11 = *v8;
          uint64_t result = *v9;
          *v8++ = *v9;
          uint64_t *v9 = v11;
          --v10;
          uint64_t v9 = (uint64_t *)((char *)v9 + a2);
        }
        while (v7 != v10);
      }
      ++v7;
      unint64_t v4 = (uint64_t *)((char *)v4 + v5);
      uint64_t v6 = (uint64_t *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002A1D08(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (uint64_t *)(result + a2);
    uint64_t v5 = a2 + 12;
    uint64_t v6 = (uint64_t *)(result + 12);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          int v11 = *((_DWORD *)v8 + 2);
          uint64_t v12 = *v8;
          uint64_t result = *((unsigned int *)v9 + 2);
          *unint64_t v8 = *v9;
          *((_DWORD *)v8 + 2) = result;
          uint64_t *v9 = v12;
          *((_DWORD *)v9 + 2) = v11;
          --v10;
          uint64_t v9 = (uint64_t *)((char *)v9 + a2);
          unint64_t v8 = (uint64_t *)((char *)v8 + 12);
        }
        while (v7 != v10);
      }
      ++v7;
      unint64_t v4 = (uint64_t *)((char *)v4 + v5);
      uint64_t v6 = (uint64_t *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002A1D94(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (long long *)(result + a2);
    uint64_t v5 = a2 + 16;
    uint64_t v6 = (long long *)(result + 16);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        int v11 = v6;
        do
        {
          long long v12 = *v11++;
          *unint64_t v8 = *v9;
          long long *v9 = v12;
          --v10;
          uint64_t v9 = (long long *)((char *)v9 + a2);
          unint64_t v8 = v11;
        }
        while (v7 != v10);
      }
      ++v7;
      unint64_t v4 = (long long *)((char *)v4 + v5);
      uint64_t v6 = (long long *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002A1E14(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (long long *)(result + a2);
    uint64_t v5 = a2 + 24;
    uint64_t v6 = (long long *)(result + 24);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          long long v11 = *v8;
          uint64_t v12 = *((void *)v8 + 2);
          uint64_t v13 = *((void *)v9 + 2);
          *unint64_t v8 = *v9;
          *((void *)v8 + 2) = v13;
          long long *v9 = v11;
          *((void *)v9 + 2) = v12;
          --v10;
          uint64_t v9 = (long long *)((char *)v9 + a2);
          unint64_t v8 = (long long *)((char *)v8 + 24);
        }
        while (v7 != v10);
      }
      ++v7;
      unint64_t v4 = (long long *)((char *)v4 + v5);
      uint64_t v6 = (long long *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1002A1EA0(uint64_t result, uint64_t a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (long long *)(result + a2);
    uint64_t v5 = a2 + 32;
    uint64_t v6 = (long long *)(result + 32);
    uint64_t v7 = 1;
    do
    {
      if (++v3 < (unint64_t)a3)
      {
        unint64_t v8 = v6;
        uint64_t v9 = v4;
        uint64_t v10 = a3;
        do
        {
          long long v11 = *v8;
          long long v12 = v8[1];
          long long v13 = v9[1];
          *unint64_t v8 = *v9;
          v8[1] = v13;
          v8 += 2;
          long long *v9 = v11;
          v9[1] = v12;
          --v10;
          uint64_t v9 = (long long *)((char *)v9 + a2);
        }
        while (v7 != v10);
      }
      ++v7;
      unint64_t v4 = (long long *)((char *)v4 + v5);
      uint64_t v6 = (long long *)((char *)v6 + v5);
    }
    while (v3 != a3);
  }
  return result;
}

unint64_t sub_1002A1F18(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  unint64_t v184 = result;
  unint64_t v5 = a5[1];
  int v185 = *a5;
  unint64_t v6 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v7) = 0;
    if (v185 <= 0) {
      return result;
    }
    goto LABEL_192;
  }
  if ((int)v5 >= 4)
  {
    uint64_t v13 = 0;
    unint64_t v7 = 0;
    unint64_t v14 = (v5 - 4);
    uint64_t v15 = v14 & 0xFFFFFFFC;
    unint64_t v16 = v15 + 4;
    uint64_t v17 = 4 * a4;
    if (v15 + 5 <= v5) {
      uint64_t v18 = a5[1];
    }
    else {
      uint64_t v18 = (v14 & 0xFFFFFFFC) + 5;
    }
    uint64_t v19 = v16 + a4;
    uint64_t v20 = v18 + a4;
    uint64_t v21 = v18 + 2 * a4;
    unint64_t v22 = v16 + 3 * a4;
    uint64_t v23 = v18 + 3 * a4;
    uint64_t v164 = v18 + 1;
    uint64_t v165 = v18;
    uint64_t v163 = v15 + 6;
    uint64_t v162 = v18 + 2;
    uint64_t v160 = v18 + 3;
    unint64_t v24 = v18 - v15 - 4;
    unint64_t v136 = v24 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v133 = v16 + (v24 & 0xFFFFFFFFFFFFFFE0);
    unint64_t v132 = v24 & 0x18;
    unint64_t v137 = v24;
    unint64_t v135 = v24 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v134 = v16 + (v24 & 0xFFFFFFFFFFFFFFF8);
    BOOL v26 = v24 < 8 || a2 != 1;
    BOOL v153 = v26;
    uint64_t v27 = 2 * a2 + 3;
    uint64_t v28 = 3 * a2;
    uint64_t v29 = a3 + v16 + 2 * a4;
    uint64_t v189 = v19 + a3;
    uint64_t v30 = a3 + 3 * a4;
    uint64_t v31 = a3 + 2 * a4;
    uint64_t v157 = a3 + v19;
    uint64_t v158 = v29;
    uint64_t v156 = a3 + v20;
    uint64_t v155 = a3 + v21;
    uint64_t v154 = a3 + v23;
    uint64_t v32 = a2 + 3;
    unint64_t v33 = v184;
    uint64_t v161 = v15 + 7;
    unint64_t v188 = v184 + v15 + 7;
    uint64_t v34 = a3 + v15;
    uint64_t v35 = a3 + a4;
    uint64_t v159 = a3 + v22;
    uint64_t v36 = a3 + v22;
    uint64_t v37 = a3;
    while (1)
    {
      unint64_t v38 = 0;
      uint64_t v187 = v13;
      unint64_t v175 = a3 + v16 + v17 * v13;
      unint64_t v173 = a3 + v165 + v17 * v13;
      unint64_t v172 = v157 + v17 * v13;
      unint64_t v171 = v156 + v17 * v13;
      unint64_t v167 = v158 + v17 * v13;
      unint64_t v39 = v155 + v17 * v13;
      unint64_t v170 = v159 + v17 * v13;
      unint64_t v169 = v154 + v17 * v13;
      unint64_t v40 = v16;
      unint64_t v182 = v184 + v16 + v7;
      unint64_t v179 = v184 + v165 + v7;
      unint64_t v174 = v184 + (v14 & 0xFFFFFFFC) + 5 + v7;
      unint64_t v177 = v184 + v164 + v7;
      unint64_t v181 = v184 + v163 + v7;
      unint64_t v176 = v184 + v162 + v7;
      unint64_t v178 = v184 + v161 + v7;
      unint64_t v186 = v184 + v160 + v7;
      uint64_t result = v33;
      do
      {
        BOOL v41 = (unsigned char *)(v37 + v38);
        *BOOL v41 = *(unsigned char *)result;
        v41[1] = *(unsigned char *)(result + a2);
        void v41[2] = *(unsigned char *)(result + 2 * a2);
        v41[3] = *(unsigned char *)(result + 3 * a2);
        uint64_t v42 = (unsigned char *)(v37 + v38 + a4);
        *uint64_t v42 = *(unsigned char *)(result + 1);
        v42[1] = *(unsigned char *)(result + v32 - 2);
        v42[2] = *(unsigned char *)(result + v27 - 2);
        v42[3] = *(unsigned char *)(result + v28 + 1);
        unint64_t v43 = &v42[a4];
        unsigned char *v43 = *(unsigned char *)(result + 2);
        v43[1] = *(unsigned char *)(result + v32 - 1);
        v43[2] = *(unsigned char *)(result + v27 - 1);
        v43[3] = *(unsigned char *)(result + v28 + 2);
        uint64_t v44 = &v43[a4];
        unsigned char *v44 = *(unsigned char *)(result + 3);
        v44[1] = *(unsigned char *)(result + v32);
        v44[2] = *(unsigned char *)(result + v27);
        v44[3] = *(unsigned char *)(result + v28 + 3);
        v38 += 4;
        result += 4 * a2;
      }
      while (v38 <= v14);
      unint64_t v45 = (v185 - 4);
      unint64_t v16 = v40;
      if ((int)v5 <= (int)v38) {
        goto LABEL_21;
      }
      unint64_t v46 = v40;
      if (!v153)
      {
        BOOL v48 = v175 >= v39 || v167 >= v173;
        BOOL v49 = !v48;
        BOOL v138 = v49;
        BOOL v50 = v175 >= v169 || v170 >= v173;
        BOOL v51 = !v50;
        BOOL v52 = v175 >= v179 || v182 >= v173;
        BOOL v53 = !v52;
        BOOL v139 = v51;
        BOOL v140 = v53;
        BOOL v54 = v175 >= v177 || v174 >= v173;
        BOOL v55 = !v54;
        BOOL v56 = v175 >= v176 || v181 >= v173;
        BOOL v57 = !v56;
        BOOL v58 = v175 >= v186 || v178 >= v173;
        BOOL v59 = !v58;
        BOOL v60 = v172 >= v39 || v167 >= v171;
        BOOL v61 = !v60;
        BOOL v141 = v59;
        BOOL v142 = v61;
        BOOL v62 = v172 >= v169 || v170 >= v171;
        BOOL v63 = !v62;
        BOOL v64 = v172 >= v179 || v182 >= v171;
        BOOL v65 = !v64;
        BOOL v143 = v63;
        BOOL v144 = v65;
        BOOL v66 = v172 >= v177 || v174 >= v171;
        BOOL v67 = !v66;
        BOOL v145 = v67;
        BOOL v68 = v172 >= v176 || v181 >= v171;
        BOOL v69 = !v68;
        BOOL v146 = v69;
        BOOL v70 = v172 >= v186 || v178 >= v171;
        uint64_t v147 = v36;
        BOOL v71 = !v70;
        BOOL v148 = v71;
        uint64_t v36 = v147;
        BOOL v72 = v167 >= v169 || v170 >= v39;
        uint64_t v149 = v29;
        BOOL v73 = !v72;
        BOOL v150 = v73;
        uint64_t v29 = v149;
        BOOL v74 = v167 >= v179 || v182 >= v39;
        uint64_t v151 = v34;
        BOOL v75 = !v74;
        BOOL v152 = v75;
        uint64_t v34 = v151;
        BOOL v76 = v167 >= v177 || v174 >= v39;
        BOOL v77 = !v76;
        BOOL v78 = v167 >= v176 || v181 >= v39;
        BOOL v79 = !v78;
        BOOL v80 = v167 >= v186 || v178 >= v39;
        uint64_t v17 = 4 * a4;
        BOOL v81 = !v80;
        BOOL v168 = v81;
        BOOL v82 = v170 >= v179 || v182 >= v169;
        BOOL v83 = !v82;
        BOOL v183 = v83;
        BOOL v84 = v170 >= v177 || v174 >= v169;
        BOOL v85 = !v84;
        BOOL v180 = v85;
        BOOL v86 = v170 >= v176 || v181 >= v169;
        BOOL v87 = !v86;
        uint64_t v13 = v187;
        BOOL v88 = v170 >= v186 || v178 >= v169;
        unint64_t v45 = (v185 - 4);
        BOOL v89 = !v88;
        BOOL v90 = v172 >= v173 || v175 >= v171;
        unint64_t v46 = v16;
        if (v90)
        {
          unint64_t v46 = v16;
          if (!v138)
          {
            unint64_t v46 = v16;
            if (!v139)
            {
              unint64_t v46 = v16;
              if (!v140)
              {
                unint64_t v46 = v16;
                if (!v55)
                {
                  unint64_t v46 = v16;
                  if (!v57)
                  {
                    unint64_t v46 = v16;
                    if (!v141)
                    {
                      unint64_t v46 = v16;
                      if (!v142)
                      {
                        unint64_t v46 = v16;
                        if (!v143)
                        {
                          unint64_t v46 = v16;
                          if (!v144)
                          {
                            unint64_t v46 = v16;
                            if (!v145)
                            {
                              unint64_t v46 = v16;
                              if (!v146)
                              {
                                unint64_t v46 = v16;
                                if (!v148)
                                {
                                  unint64_t v46 = v16;
                                  if (!v150)
                                  {
                                    unint64_t v46 = v16;
                                    if (!v152)
                                    {
                                      unint64_t v46 = v16;
                                      if (!v77)
                                      {
                                        unint64_t v46 = v16;
                                        if (!v79)
                                        {
                                          unint64_t v46 = v16;
                                          if (!v168)
                                          {
                                            unint64_t v46 = v16;
                                            if (!v183)
                                            {
                                              unint64_t v46 = v16;
                                              if (!v180)
                                              {
                                                unint64_t v46 = v16;
                                                if (!v87)
                                                {
                                                  unint64_t v46 = v16;
                                                  if (!v89)
                                                  {
                                                    if (v137 < 0x20)
                                                    {
                                                      unint64_t v91 = 0;
LABEL_187:
                                                      uint64_t result = v135;
                                                      do
                                                      {
                                                        uint64_t v101 = *(void *)(v188 + v91 - 3);
                                                        *(void *)(v189 + v91) = *(void *)(v188 + v91 - 2);
                                                        *(void *)(v149 + v91) = *(void *)(v188 + v91 - 1);
                                                        *(void *)(v151 + v91 + 4) = v101;
                                                        *(void *)(v147 + v91) = *(void *)(v188 + v91);
                                                        v91 += 8;
                                                      }
                                                      while (v135 != v91);
                                                      unint64_t v46 = v134;
                                                      if (v137 == v135) {
                                                        goto LABEL_21;
                                                      }
                                                      goto LABEL_26;
                                                    }
                                                    uint64_t v92 = v14 & 0xFFFFFFFC;
                                                    unint64_t v93 = v136;
                                                    do
                                                    {
                                                      long long v94 = *(_OWORD *)(v33 + v92 + 20);
                                                      *(_OWORD *)(v37 + v92 + 4) = *(_OWORD *)(v33 + v92 + 4);
                                                      uint64_t v95 = v37 + v92 + 4;
                                                      *(_OWORD *)(v95 + 16) = v94;
                                                      long long v96 = *(_OWORD *)(v33 + v92 + 21);
                                                      uint64_t v97 = (_OWORD *)(v95 + a4);
                                                      *uint64_t v97 = *(_OWORD *)(v33 + v92 + 5);
                                                      v97[1] = v96;
                                                      long long v98 = *(_OWORD *)(v33 + v92 + 22);
                                                      uint64_t result = (unint64_t)v97 + a4;
                                                      *(_OWORD *)uint64_t result = *(_OWORD *)(v33 + v92 + 6);
                                                      *(_OWORD *)(result + 16) = v98;
                                                      long long v99 = *(_OWORD *)(v33 + v92 + 23);
                                                      uint64_t v100 = (_OWORD *)(result + a4);
                                                      *uint64_t v100 = *(_OWORD *)(v33 + v92 + 7);
                                                      v100[1] = v99;
                                                      v92 += 32;
                                                      v93 -= 32;
                                                    }
                                                    while (v93);
                                                    if (v137 == v136) {
                                                      goto LABEL_21;
                                                    }
                                                    unint64_t v91 = v136;
                                                    unint64_t v46 = v133;
                                                    if (v132) {
                                                      goto LABEL_187;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_26:
      unint64_t v47 = a2 * v46;
      do
      {
        *(unsigned char *)(v37 + v46) = *(unsigned char *)(v33 + v47);
        *(unsigned char *)(v35 + v46) = *(unsigned char *)(v33 + v47 + 1);
        uint64_t result = *(unsigned __int8 *)(v33 + v47 + 2);
        *(unsigned char *)(v31 + v46) = result;
        *(unsigned char *)(v30 + v46++) = *(unsigned char *)(v33 + v47 + 3);
        v47 += a2;
      }
      while (v46 < v5);
LABEL_21:
      v7 += 4;
      ++v13;
      v37 += v17;
      v33 += 4;
      v36 += v17;
      v188 += 4;
      v29 += v17;
      v189 += v17;
      v34 += v17;
      v30 += v17;
      v31 += v17;
      v35 += v17;
      if (v7 > v45) {
        goto LABEL_191;
      }
    }
  }
  if ((int)v5 <= 0)
  {
    LODWORD(v7) = (v6 & 0xFFFFFFFC) + 4;
    if ((int)v7 >= v185) {
      return result;
    }
    goto LABEL_192;
  }
  unint64_t v7 = 0;
  unint64_t v8 = (unsigned char *)(a3 + 1);
  uint64_t v9 = result + a2;
  uint64_t v10 = 2 * a4;
  uint64_t v11 = 3 * a4;
  unint64_t v12 = result + 2 * a2;
  do
  {
    uint64_t result = (unint64_t)&v8[v11];
    *(v8 - 1) = *(unsigned char *)(v184 + v7);
    v8[a4 - 1] = *(unsigned char *)(v184 + v7 + 1);
    v8[v10 - 1] = *(unsigned char *)(v184 + v7 + 2);
    v8[v11 - 1] = *(unsigned char *)(v184 + v7 + 3);
    if (v5 != 1)
    {
      *unint64_t v8 = *(unsigned char *)(v9 + v7);
      v8[a4] = *(unsigned char *)(v9 + v7 + 1);
      v8[2 * a4] = *(unsigned char *)(v9 + v7 + 2);
      v8[3 * a4] = *(unsigned char *)(v9 + v7 + 3);
      if (v5 != 2)
      {
        v8[1] = *(unsigned char *)(v12 + v7);
        v8[a4 + 1] = *(unsigned char *)(v12 + v7 + 1);
        uint64_t result = (unint64_t)&v8[v10];
        v8[v10 + 1] = *(unsigned char *)(v12 + v7 + 2);
        v8[v11 + 1] = *(unsigned char *)(v12 + v7 + 3);
      }
    }
    v7 += 4;
    v8 += 4 * a4;
  }
  while (v7 <= v6);
LABEL_191:
  if ((int)v7 < v185)
  {
LABEL_192:
    if ((int)v5 < 4)
    {
      if ((int)v5 >= 1)
      {
        unint64_t v102 = (unsigned char *)(v184 + v7);
        uint64_t v103 = (unsigned char *)(a3 + a4 * v7 + 2);
        do
        {
          *(v103 - 2) = *v102;
          if (v5 != 1)
          {
            *(v103 - 1) = v102[a2];
            if (v5 != 2) {
              *uint64_t v103 = v102[2 * a2];
            }
          }
          LODWORD(v7) = v7 + 1;
          ++v102;
          v103 += a4;
        }
        while (v185 > (int)v7);
      }
      return result;
    }
    uint64_t v104 = 0;
    unint64_t v105 = (v5 - 4);
    unint64_t v7 = v7;
    uint64_t v106 = v105 & 0xFFFFFFFC;
    uint64_t v107 = v106 + 4;
    uint64_t v108 = a3 + v7 * a4;
    uint64_t v109 = v106 + 4 + v108;
    uint64_t v110 = (unsigned char *)(v184 + v7);
    uint64_t v111 = &v110[v106 + 4];
    unint64_t v112 = v106 + 5;
    if (v106 + 5 <= v5) {
      unint64_t v112 = v5;
    }
    unint64_t v113 = v112 - v106 - 4;
    uint64_t result = v113 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v114 = v113 & 0xFFFFFFFFFFFFFFF8;
    BOOL v116 = v113 < 8 || a2 != 1;
    uint64_t v117 = v108 + 1;
    uint64_t v118 = v106 + 20;
    do
    {
      unint64_t v119 = 0;
      long long v120 = v110;
      do
      {
        long long v121 = (unsigned char *)(v117 + v119);
        *(v121 - 1) = *v120;
        *long long v121 = v120[a2];
        v121[1] = v120[2 * a2];
        v121[2] = v120[3 * a2];
        v119 += 4;
        v120 += 4 * a2;
      }
      while (v119 <= v105);
      if ((int)v5 <= (int)v119) {
        goto LABEL_208;
      }
      char v122 = (unint64_t)(v109 + v104 * a4 - (void)&v111[v104]) < 0x20 || v116;
      unint64_t v123 = (v105 & 0xFFFFFFFC) + 4;
      if ((v122 & 1) == 0)
      {
        if (v113 < 0x20)
        {
          unint64_t v124 = 0;
LABEL_222:
          unint64_t v129 = v124 - v114;
          uint64_t v130 = v107 + v124;
          do
          {
            *(void *)(v108 + v130) = *(void *)&v110[v130];
            v130 += 8;
            v129 += 8;
          }
          while (v129);
          unint64_t v123 = v107 + (v113 & 0xFFFFFFFFFFFFFFF8);
          if (v113 == v114) {
            goto LABEL_208;
          }
          goto LABEL_225;
        }
        uint64_t v125 = v118;
        unint64_t v126 = v113 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v127 = *(_OWORD *)&v110[v125];
          uint64_t v128 = (_OWORD *)(v108 + v125);
          *(v128 - 1) = *(_OWORD *)&v110[v125 - 16];
          *uint64_t v128 = v127;
          v125 += 32;
          v126 -= 32;
        }
        while (v126);
        if (v113 == result) {
          goto LABEL_208;
        }
        unint64_t v124 = v113 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v123 = v107 + (v113 & 0xFFFFFFFFFFFFFFE0);
        if ((v113 & 0x18) != 0) {
          goto LABEL_222;
        }
      }
LABEL_225:
      unint64_t v131 = a2 * v123;
      do
      {
        *(unsigned char *)(v108 + v123++) = v110[v131];
        v131 += a2;
      }
      while (v123 < v5);
LABEL_208:
      ++v7;
      ++v104;
      ++v110;
      v117 += a4;
      v108 += a4;
    }
    while (v185 > (int)v7);
  }
  return result;
}

uint64_t sub_1002A29C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5 = *a5;
  unint64_t v6 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0) {
      return result;
    }
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    unint64_t v8 = 0;
    unint64_t v14 = (v6 - 4);
    uint64_t v15 = 4 * a4;
    uint64_t v16 = a2 + 6;
    uint64_t v17 = 2 * a2 + 6;
    uint64_t v18 = 3 * a2;
    uint64_t v19 = a3 + a4;
    uint64_t v20 = a3 + a4 + 2 * a4;
    uint64_t v21 = a3 + 2 * a4;
    uint64_t v22 = result + a2 * ((v14 & 0xFFFFFFFC) + 4) + 4;
    uint64_t v23 = (_WORD *)result;
    uint64_t v24 = a3;
    do
    {
      unint64_t v25 = 0;
      BOOL v26 = v23;
      do
      {
        uint64_t v27 = (_WORD *)(v24 + 2 * v25);
        *uint64_t v27 = *v26;
        v27[1] = *(_WORD *)((char *)v26 + a2);
        _OWORD v27[2] = v26[a2];
        v27[3] = *(_WORD *)((char *)v26 + 3 * a2);
        uint64_t v28 = (_WORD *)((char *)v27 + a4);
        _WORD *v28 = v26[1];
        v28[1] = *(_WORD *)((char *)v26 + v16 - 4);
        v28[2] = *(_WORD *)((char *)v26 + v17 - 4);
        v28[3] = *(_WORD *)((char *)v26 + v18 + 2);
        uint64_t v29 = (_WORD *)((char *)v28 + a4);
        _WORD *v29 = v26[2];
        v29[1] = *(_WORD *)((char *)v26 + v16 - 2);
        uint64_t v29[2] = *(_WORD *)((char *)v26 + v17 - 2);
        v29[3] = *(_WORD *)((char *)v26 + v18 + 4);
        uint64_t v30 = (_WORD *)((char *)v29 + a4);
        *uint64_t v30 = v26[3];
        v30[1] = *(_WORD *)((char *)v26 + v16);
        v30[2] = *(_WORD *)((char *)v26 + v17);
        v30[3] = *(_WORD *)((char *)v26 + v18 + 6);
        v25 += 4;
        v26 += 2 * a2;
      }
      while (v25 <= v14);
      uint64_t v31 = (_WORD *)v22;
      unint64_t v32 = (v14 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v25)
      {
        do
        {
          uint64_t v33 = 2 * v32;
          *(_WORD *)(v24 + v33) = *(v31 - 2);
          *(_WORD *)(v19 + v33) = *(v31 - 1);
          *(_WORD *)(v21 + v33) = *v31;
          *(_WORD *)(v20 + v33) = v31[1];
          ++v32;
          uint64_t v31 = (_WORD *)((char *)v31 + a2);
        }
        while (v32 < v6);
      }
      v8 += 4;
      v24 += v15;
      v23 += 4;
      v20 += v15;
      v21 += v15;
      v19 += v15;
      v22 += 8;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5) {
        return result;
      }
      goto LABEL_19;
    }
    unint64_t v8 = 0;
    uint64_t v9 = a2;
    uint64_t v10 = (_WORD *)(a3 + 2);
    uint64_t v11 = a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = (_WORD *)result;
    do
    {
      *(v10 - 1) = *v13;
      *(_WORD *)((char *)v10 + a4 - 2) = v13[1];
      v10[v11 - 1] = v13[2];
      *(_WORD *)((char *)v10 + v12 - 2) = v13[3];
      if (v6 != 1)
      {
        _WORD *v10 = *(_WORD *)((char *)v13 + a2);
        *(_WORD *)((char *)v10 + a4) = *(_WORD *)((char *)v13 + a2 + 2);
        v10[a4] = *(_WORD *)((char *)v13 + a2 + 4);
        *(_WORD *)((char *)v10 + 3 * a4) = *(_WORD *)((char *)v13 + a2 + 6);
        if (v6 != 2)
        {
          v10[1] = v13[a2];
          *(_WORD *)((char *)v10 + a4 + 2) = v13[v9 + 1];
          v10[v11 + 1] = v13[v9 + 2];
          *(_WORD *)((char *)v10 + v12 + 2) = v13[v9 + 3];
        }
      }
      v8 += 4;
      v10 += 2 * a4;
      v13 += 4;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5) {
    return result;
  }
LABEL_19:
  if ((int)v6 >= 4)
  {
    unint64_t v36 = (v6 - 4);
    uint64_t v37 = v8;
    uint64_t v38 = (v36 & 0xFFFFFFFC) + 4;
    unint64_t v39 = (_WORD *)(result + 2 * v8);
    uint64_t v40 = a3 + a4 * v37;
    BOOL v41 = (_WORD *)(v40 + 4);
    uint64_t result = a2 * v38;
    do
    {
      unint64_t v42 = 0;
      unint64_t v43 = v41;
      uint64_t v44 = v39;
      do
      {
        *(v43 - 2) = *v44;
        *(v43 - 1) = *(_WORD *)((char *)v44 + a2);
        _WORD *v43 = v44[a2];
        v43[1] = *(_WORD *)((char *)v44 + 3 * a2);
        v42 += 4;
        v44 += 2 * a2;
        v43 += 4;
      }
      while (v42 <= v36);
      uint64_t v45 = a2 * v38;
      unint64_t v46 = (v36 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v42)
      {
        do
        {
          *(_WORD *)(v40 + 2 * v46++) = *(_WORD *)((char *)v39 + v45);
          v45 += a2;
        }
        while (v46 < v6);
      }
      ++v37;
      ++v39;
      BOOL v41 = (_WORD *)((char *)v41 + a4);
      v40 += a4;
    }
    while (v5 > (int)v37);
  }
  else if ((int)v6 >= 1)
  {
    uint64_t v34 = (_WORD *)(result + 2 * v8);
    uint64_t v35 = (_WORD *)(a3 + a4 * v8 + 4);
    do
    {
      *(v35 - 2) = *v34;
      if (v6 != 1)
      {
        *(v35 - 1) = *(_WORD *)((char *)v34 + a2);
        if (v6 != 2) {
          *uint64_t v35 = v34[a2];
        }
      }
      LODWORD(v8) = v8 + 1;
      ++v34;
      uint64_t v35 = (_WORD *)((char *)v35 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_1002A2D80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v6 = *a5;
  unint64_t v5 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v6 <= 0) {
      return result;
    }
    goto LABEL_20;
  }
  if ((int)v5 >= 4)
  {
    int v88 = *a5;
    unint64_t v8 = 0;
    unint64_t v32 = (v5 - 4);
    uint64_t v33 = 4 * a4;
    uint64_t v34 = a2 + 9;
    uint64_t v35 = 2 * a2 + 9;
    uint64_t v36 = 3 * a2;
    uint64_t v37 = a3 + 12 * ((v5 - 4) >> 2) + 12;
    uint64_t v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 6;
    uint64_t v39 = result;
    uint64_t v40 = a3;
    do
    {
      unint64_t v41 = 0;
      uint64_t v42 = v39;
      uint64_t v43 = v40;
      do
      {
        __int16 v44 = *(_WORD *)v42;
        *(unsigned char *)(v43 + 2) = *(unsigned char *)(v42 + 2);
        *(_WORD *)uint64_t v43 = v44;
        __int16 v45 = *(_WORD *)(v42 + a2);
        *(unsigned char *)(v43 + 5) = *(unsigned char *)(v42 + v34 - 7);
        *(_WORD *)(v43 + 3) = v45;
        __int16 v46 = *(_WORD *)(v42 + 2 * a2);
        *(unsigned char *)(v43 + 8) = *(unsigned char *)(v42 + v35 - 7);
        *(_WORD *)(v43 + 6) = v46;
        __int16 v47 = *(_WORD *)(v42 + 3 * a2);
        *(unsigned char *)(v43 + 11) = *(unsigned char *)(v42 + v36 + 2);
        *(_WORD *)(v43 + 9) = v47;
        uint64_t v48 = v43 + a4;
        __int16 v49 = *(_WORD *)(v42 + 3);
        *(unsigned char *)(v48 + 2) = *(unsigned char *)(v42 + 5);
        *(_WORD *)uint64_t v48 = v49;
        __int16 v50 = *(_WORD *)(v42 + v34 - 6);
        *(unsigned char *)(v48 + 5) = *(unsigned char *)(v42 + v34 - 4);
        *(_WORD *)(v48 + 3) = v50;
        __int16 v51 = *(_WORD *)(v42 + v35 - 6);
        *(unsigned char *)(v48 + 8) = *(unsigned char *)(v42 + v35 - 4);
        *(_WORD *)(v48 + 6) = v51;
        __int16 v52 = *(_WORD *)(v42 + v36 + 3);
        *(unsigned char *)(v48 + 11) = *(unsigned char *)(v42 + v36 + 5);
        *(_WORD *)(v48 + 9) = v52;
        uint64_t v53 = v43 + a4 + a4;
        LOWORD(v48) = *(_WORD *)(v42 + 6);
        *(unsigned char *)(v53 + 2) = *(unsigned char *)(v42 + 8);
        *(_WORD *)uint64_t v53 = v48;
        LOWORD(v48) = *(_WORD *)(v42 + v34 - 3);
        *(unsigned char *)(v53 + 5) = *(unsigned char *)(v42 + v34 - 1);
        *(_WORD *)(v53 + 3) = v48;
        LOWORD(v48) = *(_WORD *)(v42 + v35 - 3);
        *(unsigned char *)(v53 + 8) = *(unsigned char *)(v42 + v35 - 1);
        *(_WORD *)(v53 + 6) = v48;
        LOWORD(v48) = *(_WORD *)(v42 + v36 + 6);
        *(unsigned char *)(v53 + 11) = *(unsigned char *)(v42 + v36 + 8);
        *(_WORD *)(v53 + 9) = v48;
        uint64_t v54 = v53 + a4;
        LOWORD(v48) = *(_WORD *)(v42 + 9);
        *(unsigned char *)(v54 + 2) = *(unsigned char *)(v42 + 11);
        *(_WORD *)uint64_t v54 = v48;
        LOWORD(v48) = *(_WORD *)(v42 + v34);
        *(unsigned char *)(v54 + 5) = *(unsigned char *)(v42 + v34 + 2);
        *(_WORD *)(v54 + 3) = v48;
        __int16 v55 = *(_WORD *)(v42 + v35);
        *(unsigned char *)(v54 + 8) = *(unsigned char *)(v42 + v35 + 2);
        *(_WORD *)(v54 + 6) = v55;
        __int16 v56 = *(_WORD *)(v42 + v36 + 9);
        *(unsigned char *)(v54 + 11) = *(unsigned char *)(v42 + v36 + 11);
        *(_WORD *)(v54 + 9) = v56;
        v41 += 4;
        v43 += 12;
        v42 += 4 * a2;
      }
      while (v41 <= v32);
      uint64_t v57 = v38;
      uint64_t v58 = v37;
      unint64_t v59 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v41)
      {
        do
        {
          __int16 v60 = *(_WORD *)(v57 - 6);
          *(unsigned char *)(v58 + 2) = *(unsigned char *)(v57 - 4);
          *(_WORD *)uint64_t v58 = v60;
          uint64_t v61 = v58 + a4;
          __int16 v62 = *(_WORD *)(v57 - 3);
          *(unsigned char *)(v61 + 2) = *(unsigned char *)(v57 - 1);
          *(_WORD *)uint64_t v61 = v62;
          uint64_t v63 = v58 + 2 * a4;
          __int16 v64 = *(_WORD *)v57;
          *(unsigned char *)(v63 + 2) = *(unsigned char *)(v57 + 2);
          *(_WORD *)uint64_t v63 = v64;
          uint64_t v65 = v58 + 3 * a4;
          __int16 v66 = *(_WORD *)(v57 + 3);
          *(unsigned char *)(v65 + 2) = *(unsigned char *)(v57 + 5);
          *(_WORD *)uint64_t v65 = v66;
          ++v59;
          v58 += 3;
          v57 += a2;
        }
        while (v59 < v5);
      }
      v8 += 4;
      v40 += v33;
      v39 += 12;
      v37 += v33;
      v38 += 12;
    }
    while (v8 <= v7);
    int v6 = v88;
  }
  else
  {
    if ((int)v5 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v6) {
        return result;
      }
      goto LABEL_20;
    }
    unint64_t v8 = 0;
    uint64_t v9 = 2 * a2;
    uint64_t v10 = a3 + 3;
    uint64_t v11 = 2 * a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = result;
    do
    {
      uint64_t v14 = v10 + a4;
      uint64_t v15 = v10 + v11;
      uint64_t v16 = v10 + v12;
      __int16 v17 = *(_WORD *)v13;
      *(unsigned char *)(v10 - 1) = *(unsigned char *)(v13 + 2);
      *(_WORD *)(v10 - 3) = v17;
      __int16 v18 = *(_WORD *)(v13 + 3);
      *(unsigned char *)(v14 - 1) = *(unsigned char *)(v13 + 5);
      *(_WORD *)(v14 - 3) = v18;
      __int16 v19 = *(_WORD *)(v13 + 6);
      *(unsigned char *)(v15 - 1) = *(unsigned char *)(v13 + 8);
      *(_WORD *)(v15 - 3) = v19;
      __int16 v20 = *(_WORD *)(v13 + 9);
      *(unsigned char *)(v16 - 1) = *(unsigned char *)(v13 + 11);
      *(_WORD *)(v16 - 3) = v20;
      if (v5 != 1)
      {
        __int16 v21 = *(_WORD *)(v13 + a2);
        *(unsigned char *)(v10 + 2) = *(unsigned char *)(v13 + a2 + 2);
        *(_WORD *)uint64_t v10 = v21;
        __int16 v22 = *(_WORD *)(v13 + a2 + 3);
        *(unsigned char *)(v14 + 2) = *(unsigned char *)(v13 + a2 + 5);
        *(_WORD *)uint64_t v14 = v22;
        __int16 v23 = *(_WORD *)(v13 + a2 + 6);
        *(unsigned char *)(v15 + 2) = *(unsigned char *)(v13 + a2 + 8);
        *(_WORD *)uint64_t v15 = v23;
        __int16 v24 = *(_WORD *)(v13 + a2 + 9);
        *(unsigned char *)(v16 + 2) = *(unsigned char *)(v13 + a2 + 11);
        *(_WORD *)uint64_t v16 = v24;
        if (v5 != 2)
        {
          __int16 v25 = *(_WORD *)(v13 + 2 * a2);
          *(unsigned char *)(v10 + 5) = *(unsigned char *)(v13 + v9 + 2);
          *(_WORD *)(v10 + 3) = v25;
          uint64_t v26 = v10 + a4;
          __int16 v27 = *(_WORD *)(v13 + v9 + 3);
          *(unsigned char *)(v26 + 5) = *(unsigned char *)(v13 + v9 + 5);
          *(_WORD *)(v26 + 3) = v27;
          uint64_t v28 = v10 + v11;
          __int16 v29 = *(_WORD *)(v13 + v9 + 6);
          *(unsigned char *)(v28 + 5) = *(unsigned char *)(v13 + v9 + 8);
          *(_WORD *)(v28 + 3) = v29;
          uint64_t v30 = v10 + v12;
          __int16 v31 = *(_WORD *)(v13 + v9 + 9);
          *(unsigned char *)(v30 + 5) = *(unsigned char *)(v13 + v9 + 11);
          *(_WORD *)(v30 + 3) = v31;
        }
      }
      v8 += 4;
      v10 += 4 * a4;
      v13 += 12;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v6) {
    return result;
  }
LABEL_20:
  if ((int)v5 >= 4)
  {
    unint64_t v72 = (v5 - 4);
    uint64_t v73 = v8;
    uint64_t v74 = result + 3 * v8;
    uint64_t v75 = a3 + a4 * v73;
    uint64_t v76 = v75 + 6;
    uint64_t result = v75 + 12 * ((v5 - 4) >> 2) + 12;
    do
    {
      unint64_t v77 = 0;
      uint64_t v78 = v76;
      uint64_t v79 = v74;
      do
      {
        __int16 v80 = *(_WORD *)v79;
        *(unsigned char *)(v78 - 4) = *(unsigned char *)(v79 + 2);
        *(_WORD *)(v78 - 6) = v80;
        __int16 v81 = *(_WORD *)(v79 + a2);
        *(unsigned char *)(v78 - 1) = *(unsigned char *)(v79 + a2 + 2);
        *(_WORD *)(v78 - 3) = v81;
        __int16 v82 = *(_WORD *)(v79 + 2 * a2);
        *(unsigned char *)(v78 + 2) = *(unsigned char *)(v79 + 2 * a2 + 2);
        *(_WORD *)uint64_t v78 = v82;
        __int16 v83 = *(_WORD *)(v79 + 3 * a2);
        *(unsigned char *)(v78 + 5) = *(unsigned char *)(v79 + 3 * a2 + 2);
        *(_WORD *)(v78 + 3) = v83;
        v77 += 4;
        v79 += 4 * a2;
        v78 += 12;
      }
      while (v77 <= v72);
      uint64_t v84 = a2 * ((v72 & 0xFFFFFFFC) + 4);
      uint64_t v85 = result;
      unint64_t v86 = (v72 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v77)
      {
        do
        {
          __int16 v87 = *(_WORD *)(v74 + v84);
          *(unsigned char *)(v85 + 2) = *(unsigned char *)(v74 + v84 + 2);
          *(_WORD *)uint64_t v85 = v87;
          v85 += 3;
          ++v86;
          v84 += a2;
        }
        while (v86 < v5);
      }
      ++v73;
      v74 += 3;
      v76 += a4;
      result += a4;
    }
    while (v6 > (int)v73);
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v67 = result + 3 * v8;
    uint64_t v68 = a3 + a4 * v8 + 3;
    do
    {
      __int16 v69 = *(_WORD *)v67;
      *(unsigned char *)(v68 - 1) = *(unsigned char *)(v67 + 2);
      *(_WORD *)(v68 - 3) = v69;
      if (v5 != 1)
      {
        __int16 v70 = *(_WORD *)(v67 + a2);
        *(unsigned char *)(v68 + 2) = *(unsigned char *)(v67 + a2 + 2);
        *(_WORD *)uint64_t v68 = v70;
        if (v5 != 2)
        {
          __int16 v71 = *(_WORD *)(v67 + 2 * a2);
          *(unsigned char *)(v68 + 5) = *(unsigned char *)(v67 + 2 * a2 + 2);
          *(_WORD *)(v68 + 3) = v71;
        }
      }
      LODWORD(v8) = v8 + 1;
      v67 += 3;
      v68 += a4;
    }
    while (v6 > (int)v8);
  }
  return result;
}

_DWORD *sub_1002A32E4(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5 = *a5;
  unint64_t v6 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0) {
      return result;
    }
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    unint64_t v8 = 0;
    unint64_t v14 = (v6 - 4);
    uint64_t v15 = 4 * a4;
    uint64_t v16 = a2 + 12;
    uint64_t v17 = 2 * a2 + 12;
    uint64_t v18 = 3 * a2;
    uint64_t v19 = a3 + a4;
    uint64_t v20 = a3 + a4 + 2 * a4;
    uint64_t v21 = a3 + 2 * a4;
    uint64_t v22 = (uint64_t)result + a2 * ((v14 & 0xFFFFFFFC) + 4) + 8;
    __int16 v23 = result;
    uint64_t v24 = a3;
    do
    {
      unint64_t v25 = 0;
      uint64_t v26 = v23;
      do
      {
        __int16 v27 = (_DWORD *)(v24 + 4 * v25);
        *__int16 v27 = *v26;
        v27[1] = *(_DWORD *)((char *)v26 + a2);
        _OWORD v27[2] = *(_DWORD *)((char *)v26 + 2 * a2);
        v27[3] = *(_DWORD *)((char *)v26 + 3 * a2);
        uint64_t v28 = (_DWORD *)((char *)v27 + a4);
        _DWORD *v28 = v26[1];
        v28[1] = *(_DWORD *)((char *)v26 + v16 - 8);
        v28[2] = *(_DWORD *)((char *)v26 + v17 - 8);
        v28[3] = *(_DWORD *)((char *)v26 + v18 + 4);
        __int16 v29 = (_DWORD *)((char *)v28 + a4);
        _DWORD *v29 = v26[2];
        v29[1] = *(_DWORD *)((char *)v26 + v16 - 4);
        uint64_t v29[2] = *(_DWORD *)((char *)v26 + v17 - 4);
        v29[3] = *(_DWORD *)((char *)v26 + v18 + 8);
        uint64_t v30 = (_DWORD *)((char *)v29 + a4);
        *uint64_t v30 = v26[3];
        v30[1] = *(_DWORD *)((char *)v26 + v16);
        v30[2] = *(_DWORD *)((char *)v26 + v17);
        v30[3] = *(_DWORD *)((char *)v26 + v18 + 12);
        v25 += 4;
        v26 += a2;
      }
      while (v25 <= v14);
      __int16 v31 = (_DWORD *)v22;
      unint64_t v32 = (v14 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v25)
      {
        do
        {
          uint64_t v33 = 4 * v32;
          *(_DWORD *)(v24 + v33) = *(v31 - 2);
          *(_DWORD *)(v19 + v33) = *(v31 - 1);
          *(_DWORD *)(v21 + v33) = *v31;
          *(_DWORD *)(v20 + v33) = v31[1];
          ++v32;
          __int16 v31 = (_DWORD *)((char *)v31 + a2);
        }
        while (v32 < v6);
      }
      v8 += 4;
      v24 += v15;
      v23 += 4;
      v20 += v15;
      v21 += v15;
      v19 += v15;
      v22 += 16;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5) {
        return result;
      }
      goto LABEL_19;
    }
    unint64_t v8 = 0;
    uint64_t v9 = 2 * a2;
    uint64_t v10 = (_DWORD *)(a3 + 4);
    uint64_t v11 = 2 * a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = result;
    do
    {
      *(v10 - 1) = *v13;
      *(_DWORD *)((char *)v10 + a4 - 4) = v13[1];
      *(_DWORD *)((char *)v10 + v11 - 4) = v13[2];
      *(_DWORD *)((char *)v10 + v12 - 4) = v13[3];
      if (v6 != 1)
      {
        _DWORD *v10 = *(_DWORD *)((char *)v13 + a2);
        *(_DWORD *)((char *)v10 + a4) = *(_DWORD *)((char *)v13 + a2 + 4);
        *(_DWORD *)((char *)v10 + 2 * a4) = *(_DWORD *)((char *)v13 + a2 + 8);
        *(_DWORD *)((char *)v10 + 3 * a4) = *(_DWORD *)((char *)v13 + a2 + 12);
        if (v6 != 2)
        {
          v10[1] = *(_DWORD *)((char *)v13 + 2 * a2);
          *(_DWORD *)((char *)v10 + a4 + 4) = *(_DWORD *)((char *)v13 + v9 + 4);
          *(_DWORD *)((char *)v10 + v11 + 4) = *(_DWORD *)((char *)v13 + v9 + 8);
          *(_DWORD *)((char *)v10 + v12 + 4) = *(_DWORD *)((char *)v13 + v9 + 12);
        }
      }
      v8 += 4;
      v10 += a4;
      v13 += 4;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5) {
    return result;
  }
LABEL_19:
  if ((int)v6 >= 4)
  {
    unint64_t v36 = (v6 - 4);
    uint64_t v37 = v8;
    uint64_t v38 = &result[v8];
    uint64_t v39 = a3 + a4 * v37;
    uint64_t result = (_DWORD *)(v39 + 8);
    do
    {
      unint64_t v40 = 0;
      unint64_t v41 = result;
      uint64_t v42 = v38;
      do
      {
        *(v41 - 2) = *v42;
        *(v41 - 1) = *(_DWORD *)((char *)v42 + a2);
        *unint64_t v41 = *(_DWORD *)((char *)v42 + 2 * a2);
        v41[1] = *(_DWORD *)((char *)v42 + 3 * a2);
        v40 += 4;
        v42 += a2;
        v41 += 4;
      }
      while (v40 <= v36);
      uint64_t v43 = a2 * ((v36 & 0xFFFFFFFC) + 4);
      unint64_t v44 = (v36 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v40)
      {
        do
        {
          *(_DWORD *)(v39 + 4 * v44++) = *(_DWORD *)((char *)v38 + v43);
          v43 += a2;
        }
        while (v44 < v6);
      }
      ++v37;
      ++v38;
      uint64_t result = (_DWORD *)((char *)result + a4);
      v39 += a4;
    }
    while (v5 > (int)v37);
  }
  else if ((int)v6 >= 1)
  {
    uint64_t v34 = &result[v8];
    uint64_t v35 = (_DWORD *)(a3 + a4 * v8 + 8);
    do
    {
      *(v35 - 2) = *v34;
      if (v6 != 1)
      {
        *(v35 - 1) = *(_DWORD *)((char *)v34 + a2);
        if (v6 != 2) {
          *uint64_t v35 = *(_DWORD *)((char *)v34 + 2 * a2);
        }
      }
      LODWORD(v8) = v8 + 1;
      ++v34;
      uint64_t v35 = (_DWORD *)((char *)v35 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_1002A36A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v6 = *a5;
  unint64_t v5 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v6 <= 0) {
      return result;
    }
    goto LABEL_20;
  }
  if ((int)v5 >= 4)
  {
    int v88 = *a5;
    unint64_t v8 = 0;
    unint64_t v32 = (v5 - 4);
    uint64_t v33 = 4 * a4;
    uint64_t v34 = a2 + 18;
    uint64_t v35 = 2 * a2 + 18;
    uint64_t v36 = 3 * a2;
    uint64_t v37 = a3 + 24 * ((v5 - 4) >> 2) + 24;
    uint64_t v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 12;
    uint64_t v39 = result;
    uint64_t v40 = a3;
    do
    {
      unint64_t v41 = 0;
      uint64_t v42 = v39;
      uint64_t v43 = v40;
      do
      {
        int v44 = *(_DWORD *)v42;
        *(_WORD *)(v43 + 4) = *(_WORD *)(v42 + 4);
        *(_DWORD *)uint64_t v43 = v44;
        int v45 = *(_DWORD *)(v42 + a2);
        *(_WORD *)(v43 + 10) = *(_WORD *)(v42 + v34 - 14);
        *(_DWORD *)(v43 + 6) = v45;
        int v46 = *(_DWORD *)(v42 + 2 * a2);
        *(_WORD *)(v43 + 16) = *(_WORD *)(v42 + v35 - 14);
        *(_DWORD *)(v43 + 12) = v46;
        int v47 = *(_DWORD *)(v42 + 3 * a2);
        *(_WORD *)(v43 + 22) = *(_WORD *)(v42 + v36 + 4);
        *(_DWORD *)(v43 + 18) = v47;
        uint64_t v48 = v43 + a4;
        int v49 = *(_DWORD *)(v42 + 6);
        *(_WORD *)(v48 + 4) = *(_WORD *)(v42 + 10);
        *(_DWORD *)uint64_t v48 = v49;
        int v50 = *(_DWORD *)(v42 + v34 - 12);
        *(_WORD *)(v48 + 10) = *(_WORD *)(v42 + v34 - 8);
        *(_DWORD *)(v48 + 6) = v50;
        int v51 = *(_DWORD *)(v42 + v35 - 12);
        *(_WORD *)(v48 + 16) = *(_WORD *)(v42 + v35 - 8);
        *(_DWORD *)(v48 + 12) = v51;
        int v52 = *(_DWORD *)(v42 + v36 + 6);
        *(_WORD *)(v48 + 22) = *(_WORD *)(v42 + v36 + 10);
        *(_DWORD *)(v48 + 18) = v52;
        uint64_t v53 = v43 + a4 + a4;
        LODWORD(v48) = *(_DWORD *)(v42 + 12);
        *(_WORD *)(v53 + 4) = *(_WORD *)(v42 + 16);
        *(_DWORD *)uint64_t v53 = v48;
        LODWORD(v48) = *(_DWORD *)(v42 + v34 - 6);
        *(_WORD *)(v53 + 10) = *(_WORD *)(v42 + v34 - 2);
        *(_DWORD *)(v53 + 6) = v48;
        LODWORD(v48) = *(_DWORD *)(v42 + v35 - 6);
        *(_WORD *)(v53 + 16) = *(_WORD *)(v42 + v35 - 2);
        *(_DWORD *)(v53 + 12) = v48;
        LODWORD(v48) = *(_DWORD *)(v42 + v36 + 12);
        *(_WORD *)(v53 + 22) = *(_WORD *)(v42 + v36 + 16);
        *(_DWORD *)(v53 + 18) = v48;
        uint64_t v54 = v53 + a4;
        LODWORD(v48) = *(_DWORD *)(v42 + 18);
        *(_WORD *)(v54 + 4) = *(_WORD *)(v42 + 22);
        *(_DWORD *)uint64_t v54 = v48;
        LODWORD(v48) = *(_DWORD *)(v42 + v34);
        *(_WORD *)(v54 + 10) = *(_WORD *)(v42 + v34 + 4);
        *(_DWORD *)(v54 + 6) = v48;
        int v55 = *(_DWORD *)(v42 + v35);
        *(_WORD *)(v54 + 16) = *(_WORD *)(v42 + v35 + 4);
        *(_DWORD *)(v54 + 12) = v55;
        int v56 = *(_DWORD *)(v42 + v36 + 18);
        *(_WORD *)(v54 + 22) = *(_WORD *)(v42 + v36 + 22);
        *(_DWORD *)(v54 + 18) = v56;
        v41 += 4;
        v43 += 24;
        v42 += 4 * a2;
      }
      while (v41 <= v32);
      uint64_t v57 = v38;
      uint64_t v58 = v37;
      unint64_t v59 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v41)
      {
        do
        {
          int v60 = *(_DWORD *)(v57 - 12);
          *(_WORD *)(v58 + 4) = *(_WORD *)(v57 - 8);
          *(_DWORD *)uint64_t v58 = v60;
          uint64_t v61 = v58 + a4;
          int v62 = *(_DWORD *)(v57 - 6);
          *(_WORD *)(v61 + 4) = *(_WORD *)(v57 - 2);
          *(_DWORD *)uint64_t v61 = v62;
          uint64_t v63 = v58 + 2 * a4;
          int v64 = *(_DWORD *)v57;
          *(_WORD *)(v63 + 4) = *(_WORD *)(v57 + 4);
          *(_DWORD *)uint64_t v63 = v64;
          uint64_t v65 = v58 + 3 * a4;
          int v66 = *(_DWORD *)(v57 + 6);
          *(_WORD *)(v65 + 4) = *(_WORD *)(v57 + 10);
          *(_DWORD *)uint64_t v65 = v66;
          ++v59;
          v58 += 6;
          v57 += a2;
        }
        while (v59 < v5);
      }
      v8 += 4;
      v40 += v33;
      v39 += 24;
      v37 += v33;
      v38 += 24;
    }
    while (v8 <= v7);
    int v6 = v88;
  }
  else
  {
    if ((int)v5 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v6) {
        return result;
      }
      goto LABEL_20;
    }
    unint64_t v8 = 0;
    uint64_t v9 = 2 * a2;
    uint64_t v10 = a3 + 6;
    uint64_t v11 = 2 * a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = result;
    do
    {
      uint64_t v14 = v10 + a4;
      uint64_t v15 = v10 + v11;
      uint64_t v16 = v10 + v12;
      int v17 = *(_DWORD *)v13;
      *(_WORD *)(v10 - 2) = *(_WORD *)(v13 + 4);
      *(_DWORD *)(v10 - 6) = v17;
      int v18 = *(_DWORD *)(v13 + 6);
      *(_WORD *)(v14 - 2) = *(_WORD *)(v13 + 10);
      *(_DWORD *)(v14 - 6) = v18;
      int v19 = *(_DWORD *)(v13 + 12);
      *(_WORD *)(v15 - 2) = *(_WORD *)(v13 + 16);
      *(_DWORD *)(v15 - 6) = v19;
      int v20 = *(_DWORD *)(v13 + 18);
      *(_WORD *)(v16 - 2) = *(_WORD *)(v13 + 22);
      *(_DWORD *)(v16 - 6) = v20;
      if (v5 != 1)
      {
        int v21 = *(_DWORD *)(v13 + a2);
        *(_WORD *)(v10 + 4) = *(_WORD *)(v13 + a2 + 4);
        *(_DWORD *)uint64_t v10 = v21;
        int v22 = *(_DWORD *)(v13 + a2 + 6);
        *(_WORD *)(v14 + 4) = *(_WORD *)(v13 + a2 + 10);
        *(_DWORD *)uint64_t v14 = v22;
        int v23 = *(_DWORD *)(v13 + a2 + 12);
        *(_WORD *)(v15 + 4) = *(_WORD *)(v13 + a2 + 16);
        *(_DWORD *)uint64_t v15 = v23;
        int v24 = *(_DWORD *)(v13 + a2 + 18);
        *(_WORD *)(v16 + 4) = *(_WORD *)(v13 + a2 + 22);
        *(_DWORD *)uint64_t v16 = v24;
        if (v5 != 2)
        {
          int v25 = *(_DWORD *)(v13 + 2 * a2);
          *(_WORD *)(v10 + 10) = *(_WORD *)(v13 + v9 + 4);
          *(_DWORD *)(v10 + 6) = v25;
          uint64_t v26 = v10 + a4;
          int v27 = *(_DWORD *)(v13 + v9 + 6);
          *(_WORD *)(v26 + 10) = *(_WORD *)(v13 + v9 + 10);
          *(_DWORD *)(v26 + 6) = v27;
          uint64_t v28 = v10 + v11;
          int v29 = *(_DWORD *)(v13 + v9 + 12);
          *(_WORD *)(v28 + 10) = *(_WORD *)(v13 + v9 + 16);
          *(_DWORD *)(v28 + 6) = v29;
          uint64_t v30 = v10 + v12;
          int v31 = *(_DWORD *)(v13 + v9 + 18);
          *(_WORD *)(v30 + 10) = *(_WORD *)(v13 + v9 + 22);
          *(_DWORD *)(v30 + 6) = v31;
        }
      }
      v8 += 4;
      v10 += 4 * a4;
      v13 += 24;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v6) {
    return result;
  }
LABEL_20:
  if ((int)v5 >= 4)
  {
    unint64_t v72 = (v5 - 4);
    uint64_t v73 = v8;
    uint64_t v74 = result + 6 * v8;
    uint64_t v75 = a3 + a4 * v73;
    uint64_t v76 = v75 + 12;
    uint64_t result = v75 + 24 * ((v5 - 4) >> 2) + 24;
    do
    {
      unint64_t v77 = 0;
      uint64_t v78 = v76;
      uint64_t v79 = v74;
      do
      {
        int v80 = *(_DWORD *)v79;
        *(_WORD *)(v78 - 8) = *(_WORD *)(v79 + 4);
        *(_DWORD *)(v78 - 12) = v80;
        int v81 = *(_DWORD *)(v79 + a2);
        *(_WORD *)(v78 - 2) = *(_WORD *)(v79 + a2 + 4);
        *(_DWORD *)(v78 - 6) = v81;
        int v82 = *(_DWORD *)(v79 + 2 * a2);
        *(_WORD *)(v78 + 4) = *(_WORD *)(v79 + 2 * a2 + 4);
        *(_DWORD *)uint64_t v78 = v82;
        int v83 = *(_DWORD *)(v79 + 3 * a2);
        *(_WORD *)(v78 + 10) = *(_WORD *)(v79 + 3 * a2 + 4);
        *(_DWORD *)(v78 + 6) = v83;
        v77 += 4;
        v79 += 4 * a2;
        v78 += 24;
      }
      while (v77 <= v72);
      uint64_t v84 = a2 * ((v72 & 0xFFFFFFFC) + 4);
      uint64_t v85 = result;
      unint64_t v86 = (v72 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v77)
      {
        do
        {
          int v87 = *(_DWORD *)(v74 + v84);
          *(_WORD *)(v85 + 4) = *(_WORD *)(v74 + v84 + 4);
          *(_DWORD *)uint64_t v85 = v87;
          v85 += 6;
          ++v86;
          v84 += a2;
        }
        while (v86 < v5);
      }
      ++v73;
      v74 += 6;
      v76 += a4;
      result += a4;
    }
    while (v6 > (int)v73);
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v67 = result + 6 * v8;
    uint64_t v68 = a3 + a4 * v8 + 6;
    do
    {
      int v69 = *(_DWORD *)v67;
      *(_WORD *)(v68 - 2) = *(_WORD *)(v67 + 4);
      *(_DWORD *)(v68 - 6) = v69;
      if (v5 != 1)
      {
        int v70 = *(_DWORD *)(v67 + a2);
        *(_WORD *)(v68 + 4) = *(_WORD *)(v67 + a2 + 4);
        *(_DWORD *)uint64_t v68 = v70;
        if (v5 != 2)
        {
          int v71 = *(_DWORD *)(v67 + 2 * a2);
          *(_WORD *)(v68 + 10) = *(_WORD *)(v67 + 2 * a2 + 4);
          *(_DWORD *)(v68 + 6) = v71;
        }
      }
      LODWORD(v8) = v8 + 1;
      v67 += 6;
      v68 += a4;
    }
    while (v6 > (int)v8);
  }
  return result;
}

void *sub_1002A3C08(void *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5 = *a5;
  unint64_t v6 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0) {
      return result;
    }
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    unint64_t v8 = 0;
    unint64_t v14 = (v6 - 4);
    uint64_t v15 = 4 * a4;
    uint64_t v16 = a2 + 24;
    uint64_t v17 = 2 * a2 + 24;
    uint64_t v18 = 3 * a2;
    uint64_t v19 = a3 + a4;
    uint64_t v20 = a3 + a4 + 2 * a4;
    uint64_t v21 = a3 + 2 * a4;
    uint64_t v22 = (uint64_t)result + a2 * ((v14 & 0xFFFFFFFC) + 4) + 16;
    int v23 = result;
    uint64_t v24 = a3;
    do
    {
      unint64_t v25 = 0;
      uint64_t v26 = v23;
      do
      {
        int v27 = (void *)(v24 + 8 * v25);
        *int v27 = *v26;
        v27[1] = *(void *)((char *)v26 + a2);
        _OWORD v27[2] = *(void *)((char *)v26 + 2 * a2);
        v27[3] = *(void *)((char *)v26 + 3 * a2);
        uint64_t v28 = (void *)((char *)v27 + a4);
        void *v28 = v26[1];
        v28[1] = *(void *)((char *)v26 + v16 - 16);
        v28[2] = *(void *)((char *)v26 + v17 - 16);
        v28[3] = *(void *)((char *)v26 + v18 + 8);
        int v29 = (void *)((char *)v28 + a4);
        void *v29 = v26[2];
        v29[1] = *(void *)((char *)v26 + v16 - 8);
        uint64_t v29[2] = *(void *)((char *)v26 + v17 - 8);
        v29[3] = *(void *)((char *)v26 + v18 + 16);
        uint64_t v30 = (void *)((char *)v29 + a4);
        *uint64_t v30 = v26[3];
        v30[1] = *(void *)((char *)v26 + v16);
        v30[2] = *(void *)((char *)v26 + v17);
        v30[3] = *(void *)((char *)v26 + v18 + 24);
        v25 += 4;
        uint64_t v26 = (void *)((char *)v26 + 4 * a2);
      }
      while (v25 <= v14);
      int v31 = (void *)v22;
      unint64_t v32 = (v14 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v25)
      {
        do
        {
          uint64_t v33 = 8 * v32;
          *(void *)(v24 + v33) = *(v31 - 2);
          *(void *)(v19 + v33) = *(v31 - 1);
          *(void *)(v21 + v33) = *v31;
          *(void *)(v20 + v33) = v31[1];
          ++v32;
          int v31 = (void *)((char *)v31 + a2);
        }
        while (v32 < v6);
      }
      v8 += 4;
      v24 += v15;
      v23 += 4;
      v20 += v15;
      v21 += v15;
      v19 += v15;
      v22 += 32;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5) {
        return result;
      }
      goto LABEL_19;
    }
    unint64_t v8 = 0;
    uint64_t v9 = 2 * a2;
    uint64_t v10 = (void *)(a3 + 8);
    uint64_t v11 = 2 * a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = result;
    do
    {
      *(v10 - 1) = *v13;
      *(void *)((char *)v10 + a4 - 8) = v13[1];
      *(void *)((char *)v10 + v11 - 8) = v13[2];
      *(void *)((char *)v10 + v12 - 8) = v13[3];
      if (v6 != 1)
      {
        void *v10 = *(void *)((char *)v13 + a2);
        *(void *)((char *)v10 + a4) = *(void *)((char *)v13 + a2 + 8);
        *(void *)((char *)v10 + 2 * a4) = *(void *)((char *)v13 + a2 + 16);
        *(void *)((char *)v10 + 3 * a4) = *(void *)((char *)v13 + a2 + 24);
        if (v6 != 2)
        {
          v10[1] = *(void *)((char *)v13 + 2 * a2);
          *(void *)((char *)v10 + a4 + 8) = *(void *)((char *)v13 + v9 + 8);
          *(void *)((char *)v10 + v11 + 8) = *(void *)((char *)v13 + v9 + 16);
          *(void *)((char *)v10 + v12 + 8) = *(void *)((char *)v13 + v9 + 24);
        }
      }
      v8 += 4;
      uint64_t v10 = (void *)((char *)v10 + 4 * a4);
      v13 += 4;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5) {
    return result;
  }
LABEL_19:
  if ((int)v6 >= 4)
  {
    unint64_t v36 = (v6 - 4);
    uint64_t v37 = v8;
    uint64_t v38 = &result[v8];
    uint64_t v39 = a3 + a4 * v37;
    uint64_t result = (void *)(v39 + 16);
    do
    {
      unint64_t v40 = 0;
      unint64_t v41 = result;
      uint64_t v42 = v38;
      do
      {
        *(v41 - 2) = *v42;
        *(v41 - 1) = *(void *)((char *)v42 + a2);
        *unint64_t v41 = *(void *)((char *)v42 + 2 * a2);
        v41[1] = *(void *)((char *)v42 + 3 * a2);
        v40 += 4;
        uint64_t v42 = (void *)((char *)v42 + 4 * a2);
        v41 += 4;
      }
      while (v40 <= v36);
      uint64_t v43 = a2 * ((v36 & 0xFFFFFFFC) + 4);
      unint64_t v44 = (v36 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v40)
      {
        do
        {
          *(void *)(v39 + 8 * v44++) = *(void *)((char *)v38 + v43);
          v43 += a2;
        }
        while (v44 < v6);
      }
      ++v37;
      ++v38;
      uint64_t result = (void *)((char *)result + a4);
      v39 += a4;
    }
    while (v5 > (int)v37);
  }
  else if ((int)v6 >= 1)
  {
    uint64_t v34 = &result[v8];
    uint64_t v35 = (void *)(a3 + a4 * v8 + 16);
    do
    {
      *(v35 - 2) = *v34;
      if (v6 != 1)
      {
        *(v35 - 1) = *(void *)((char *)v34 + a2);
        if (v6 != 2) {
          *uint64_t v35 = *(void *)((char *)v34 + 2 * a2);
        }
      }
      LODWORD(v8) = v8 + 1;
      ++v34;
      uint64_t v35 = (void *)((char *)v35 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_1002A3FC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v6 = *a5;
  unint64_t v5 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v6 <= 0) {
      return result;
    }
    goto LABEL_20;
  }
  if ((int)v5 >= 4)
  {
    int v94 = *a5;
    unint64_t v8 = 0;
    unint64_t v32 = (v5 - 4);
    uint64_t v33 = 4 * a4;
    uint64_t v34 = a2 + 36;
    uint64_t v35 = 2 * a2 + 36;
    uint64_t v36 = 3 * a2;
    uint64_t v37 = a3 + 48 * ((v5 - 4) >> 2) + 48;
    uint64_t v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 24;
    uint64_t v39 = result;
    uint64_t v40 = a3;
    do
    {
      unint64_t v41 = 0;
      uint64_t v42 = v39;
      uint64_t v43 = v40;
      do
      {
        uint64_t v44 = *(void *)v42;
        *(_DWORD *)(v43 + 8) = *(_DWORD *)(v42 + 8);
        *(void *)uint64_t v43 = v44;
        uint64_t v45 = *(void *)(v42 + a2);
        *(_DWORD *)(v43 + 20) = *(_DWORD *)(v42 + v34 - 28);
        *(void *)(v43 + 12) = v45;
        uint64_t v46 = *(void *)(v42 + 2 * a2);
        *(_DWORD *)(v43 + 32) = *(_DWORD *)(v42 + v35 - 28);
        *(void *)(v43 + 24) = v46;
        uint64_t v47 = *(void *)(v42 + 3 * a2);
        *(_DWORD *)(v43 + 44) = *(_DWORD *)(v42 + v36 + 8);
        *(void *)(v43 + 36) = v47;
        uint64_t v48 = v43 + a4;
        uint64_t v49 = *(void *)(v42 + 12);
        *(_DWORD *)(v48 + 8) = *(_DWORD *)(v42 + 20);
        *(void *)uint64_t v48 = v49;
        uint64_t v50 = *(void *)(v42 + v34 - 24);
        *(_DWORD *)(v48 + 20) = *(_DWORD *)(v42 + v34 - 16);
        *(void *)(v48 + 12) = v50;
        uint64_t v51 = *(void *)(v42 + v35 - 24);
        *(_DWORD *)(v48 + 32) = *(_DWORD *)(v42 + v35 - 16);
        *(void *)(v48 + 24) = v51;
        uint64_t v52 = *(void *)(v42 + v36 + 12);
        *(_DWORD *)(v48 + 44) = *(_DWORD *)(v42 + v36 + 20);
        *(void *)(v48 + 36) = v52;
        uint64_t v53 = v43 + a4 + a4;
        uint64_t v54 = *(void *)(v42 + 24);
        *(_DWORD *)(v53 + 8) = *(_DWORD *)(v42 + 32);
        *(void *)uint64_t v53 = v54;
        uint64_t v55 = *(void *)(v42 + v34 - 12);
        *(_DWORD *)(v53 + 20) = *(_DWORD *)(v42 + v34 - 4);
        *(void *)(v53 + 12) = v55;
        uint64_t v56 = *(void *)(v42 + v35 - 12);
        *(_DWORD *)(v53 + 32) = *(_DWORD *)(v42 + v35 - 4);
        *(void *)(v53 + 24) = v56;
        uint64_t v57 = *(void *)(v42 + v36 + 24);
        *(_DWORD *)(v53 + 44) = *(_DWORD *)(v42 + v36 + 32);
        *(void *)(v53 + 36) = v57;
        uint64_t v58 = v53 + a4;
        uint64_t v59 = *(void *)(v42 + 36);
        *(_DWORD *)(v58 + 8) = *(_DWORD *)(v42 + 44);
        *(void *)uint64_t v58 = v59;
        uint64_t v60 = *(void *)(v42 + v34);
        *(_DWORD *)(v58 + 20) = *(_DWORD *)(v42 + v34 + 8);
        *(void *)(v58 + 12) = v60;
        uint64_t v61 = *(void *)(v42 + v35);
        *(_DWORD *)(v58 + 32) = *(_DWORD *)(v42 + v35 + 8);
        *(void *)(v58 + 24) = v61;
        uint64_t v62 = *(void *)(v42 + v36 + 36);
        *(_DWORD *)(v58 + 44) = *(_DWORD *)(v42 + v36 + 44);
        *(void *)(v58 + 36) = v62;
        v41 += 4;
        v43 += 48;
        v42 += 4 * a2;
      }
      while (v41 <= v32);
      uint64_t v63 = v38;
      uint64_t v64 = v37;
      unint64_t v65 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v41)
      {
        do
        {
          uint64_t v66 = *(void *)(v63 - 24);
          *(_DWORD *)(v64 + 8) = *(_DWORD *)(v63 - 16);
          *(void *)uint64_t v64 = v66;
          uint64_t v67 = v64 + a4;
          uint64_t v68 = *(void *)(v63 - 12);
          *(_DWORD *)(v67 + 8) = *(_DWORD *)(v63 - 4);
          *(void *)uint64_t v67 = v68;
          uint64_t v69 = v64 + 2 * a4;
          uint64_t v70 = *(void *)v63;
          *(_DWORD *)(v69 + 8) = *(_DWORD *)(v63 + 8);
          *(void *)uint64_t v69 = v70;
          uint64_t v71 = v64 + 3 * a4;
          uint64_t v72 = *(void *)(v63 + 12);
          *(_DWORD *)(v71 + 8) = *(_DWORD *)(v63 + 20);
          *(void *)uint64_t v71 = v72;
          ++v65;
          v64 += 12;
          v63 += a2;
        }
        while (v65 < v5);
      }
      v8 += 4;
      v40 += v33;
      v39 += 48;
      v37 += v33;
      v38 += 48;
    }
    while (v8 <= v7);
    int v6 = v94;
  }
  else
  {
    if ((int)v5 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v6) {
        return result;
      }
      goto LABEL_20;
    }
    unint64_t v8 = 0;
    uint64_t v9 = 2 * a2;
    uint64_t v10 = a3 + 12;
    uint64_t v11 = 2 * a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = result;
    do
    {
      uint64_t v14 = v10 + a4;
      uint64_t v15 = v10 + v11;
      uint64_t v16 = v10 + v12;
      uint64_t v17 = *(void *)v13;
      *(_DWORD *)(v10 - 4) = *(_DWORD *)(v13 + 8);
      *(void *)(v10 - 12) = v17;
      uint64_t v18 = *(void *)(v13 + 12);
      *(_DWORD *)(v14 - 4) = *(_DWORD *)(v13 + 20);
      *(void *)(v14 - 12) = v18;
      uint64_t v19 = *(void *)(v13 + 24);
      *(_DWORD *)(v15 - 4) = *(_DWORD *)(v13 + 32);
      *(void *)(v15 - 12) = v19;
      uint64_t v20 = *(void *)(v13 + 36);
      *(_DWORD *)(v16 - 4) = *(_DWORD *)(v13 + 44);
      *(void *)(v16 - 12) = v20;
      if (v5 != 1)
      {
        uint64_t v21 = *(void *)(v13 + a2);
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v13 + a2 + 8);
        *(void *)uint64_t v10 = v21;
        uint64_t v22 = *(void *)(v13 + a2 + 12);
        *(_DWORD *)(v14 + 8) = *(_DWORD *)(v13 + a2 + 20);
        *(void *)uint64_t v14 = v22;
        uint64_t v23 = *(void *)(v13 + a2 + 24);
        *(_DWORD *)(v15 + 8) = *(_DWORD *)(v13 + a2 + 32);
        *(void *)uint64_t v15 = v23;
        uint64_t v24 = *(void *)(v13 + a2 + 36);
        *(_DWORD *)(v16 + 8) = *(_DWORD *)(v13 + a2 + 44);
        *(void *)uint64_t v16 = v24;
        if (v5 != 2)
        {
          uint64_t v25 = *(void *)(v13 + 2 * a2);
          *(_DWORD *)(v10 + 20) = *(_DWORD *)(v13 + v9 + 8);
          *(void *)(v10 + 12) = v25;
          uint64_t v26 = v10 + a4;
          uint64_t v27 = *(void *)(v13 + v9 + 12);
          *(_DWORD *)(v26 + 20) = *(_DWORD *)(v13 + v9 + 20);
          *(void *)(v26 + 12) = v27;
          uint64_t v28 = v10 + v11;
          uint64_t v29 = *(void *)(v13 + v9 + 24);
          *(_DWORD *)(v28 + 20) = *(_DWORD *)(v13 + v9 + 32);
          *(void *)(v28 + 12) = v29;
          uint64_t v30 = v10 + v12;
          uint64_t v31 = *(void *)(v13 + v9 + 36);
          *(_DWORD *)(v30 + 20) = *(_DWORD *)(v13 + v9 + 44);
          *(void *)(v30 + 12) = v31;
        }
      }
      v8 += 4;
      v10 += 4 * a4;
      v13 += 48;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v6) {
    return result;
  }
LABEL_20:
  if ((int)v5 >= 4)
  {
    unint64_t v78 = (v5 - 4);
    uint64_t v79 = v8;
    uint64_t v80 = result + 12 * v8;
    uint64_t v81 = a3 + a4 * v79;
    uint64_t v82 = v81 + 24;
    uint64_t result = v81 + 48 * ((v5 - 4) >> 2) + 48;
    do
    {
      unint64_t v83 = 0;
      uint64_t v84 = v82;
      uint64_t v85 = v80;
      do
      {
        uint64_t v86 = *(void *)v85;
        *(_DWORD *)(v84 - 16) = *(_DWORD *)(v85 + 8);
        *(void *)(v84 - 24) = v86;
        uint64_t v87 = *(void *)(v85 + a2);
        *(_DWORD *)(v84 - 4) = *(_DWORD *)(v85 + a2 + 8);
        *(void *)(v84 - 12) = v87;
        uint64_t v88 = *(void *)(v85 + 2 * a2);
        *(_DWORD *)(v84 + 8) = *(_DWORD *)(v85 + 2 * a2 + 8);
        *(void *)uint64_t v84 = v88;
        uint64_t v89 = *(void *)(v85 + 3 * a2);
        *(_DWORD *)(v84 + 20) = *(_DWORD *)(v85 + 3 * a2 + 8);
        *(void *)(v84 + 12) = v89;
        v83 += 4;
        v85 += 4 * a2;
        v84 += 48;
      }
      while (v83 <= v78);
      uint64_t v90 = a2 * ((v78 & 0xFFFFFFFC) + 4);
      uint64_t v91 = result;
      unint64_t v92 = (v78 & 0xFFFFFFFC) + 4;
      if ((int)v5 > (int)v83)
      {
        do
        {
          uint64_t v93 = *(void *)(v80 + v90);
          *(_DWORD *)(v91 + 8) = *(_DWORD *)(v80 + v90 + 8);
          *(void *)uint64_t v91 = v93;
          v91 += 12;
          ++v92;
          v90 += a2;
        }
        while (v92 < v5);
      }
      ++v79;
      v80 += 12;
      v82 += a4;
      result += a4;
    }
    while (v6 > (int)v79);
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v73 = result + 12 * v8;
    uint64_t v74 = a3 + a4 * v8 + 12;
    do
    {
      uint64_t v75 = *(void *)v73;
      *(_DWORD *)(v74 - 4) = *(_DWORD *)(v73 + 8);
      *(void *)(v74 - 12) = v75;
      if (v5 != 1)
      {
        uint64_t v76 = *(void *)(v73 + a2);
        *(_DWORD *)(v74 + 8) = *(_DWORD *)(v73 + a2 + 8);
        *(void *)uint64_t v74 = v76;
        if (v5 != 2)
        {
          uint64_t v77 = *(void *)(v73 + 2 * a2);
          *(_DWORD *)(v74 + 20) = *(_DWORD *)(v73 + 2 * a2 + 8);
          *(void *)(v74 + 12) = v77;
        }
      }
      LODWORD(v8) = v8 + 1;
      v73 += 12;
      v74 += a4;
    }
    while (v6 > (int)v8);
  }
  return result;
}

uint64_t sub_1002A452C(uint64_t result, uint64_t a2, _OWORD *a3, uint64_t a4, int *a5)
{
  int v5 = *a5;
  unint64_t v6 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0) {
      return result;
    }
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    unint64_t v8 = 0;
    unint64_t v14 = (v6 - 4);
    uint64_t v15 = 4 * a4;
    uint64_t v16 = a2 + 48;
    uint64_t v17 = 2 * a2 + 48;
    uint64_t v18 = 3 * a2;
    uint64_t v19 = (uint64_t)a3 + ((16 * v14) & 0xFFFFFFFC0) + 64;
    uint64_t v20 = result + a2 * ((v14 & 0xFFFFFFFC) + 4) + 32;
    uint64_t v21 = (_OWORD *)result;
    uint64_t v22 = a3;
    do
    {
      unint64_t v23 = 0;
      uint64_t v24 = v21;
      uint64_t v25 = v22;
      do
      {
        *uint64_t v25 = *v24;
        v25[1] = *(_OWORD *)((char *)v24 + a2);
        uint64_t v25[2] = *(_OWORD *)((char *)v24 + 2 * a2);
        v25[3] = *(_OWORD *)((char *)v24 + 3 * a2);
        uint64_t v26 = (_OWORD *)((char *)v25 + a4);
        *uint64_t v26 = v24[1];
        v26[1] = *(_OWORD *)((char *)v24 + v16 - 32);
        int v26[2] = *(_OWORD *)((char *)v24 + v17 - 32);
        v26[3] = *(_OWORD *)((char *)v24 + v18 + 16);
        uint64_t v27 = (_OWORD *)((char *)v25 + a4 + a4);
        *uint64_t v27 = v24[2];
        v27[1] = *(_OWORD *)((char *)v24 + v16 - 16);
        _OWORD v27[2] = *(_OWORD *)((char *)v24 + v17 - 16);
        v27[3] = *(_OWORD *)((char *)v24 + v18 + 32);
        uint64_t v28 = (_OWORD *)((char *)v27 + a4);
        _OWORD *v28 = v24[3];
        v28[1] = *(_OWORD *)((char *)v24 + v16);
        v28[2] = *(_OWORD *)((char *)v24 + v17);
        v28[3] = *(_OWORD *)((char *)v24 + v18 + 48);
        v23 += 4;
        v25 += 4;
        uint64_t v24 = (_OWORD *)((char *)v24 + 4 * a2);
      }
      while (v23 <= v14);
      uint64_t v29 = (_OWORD *)v20;
      uint64_t v30 = (_OWORD *)v19;
      unint64_t v31 = (v14 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v23)
      {
        do
        {
          *uint64_t v30 = *(v29 - 2);
          *(_OWORD *)((char *)v30 + a4) = *(v29 - 1);
          *(_OWORD *)((char *)v30 + 2 * a4) = *v29;
          *(_OWORD *)((char *)v30 + 3 * a4) = v29[1];
          ++v31;
          ++v30;
          uint64_t v29 = (_OWORD *)((char *)v29 + a2);
        }
        while (v31 < v6);
      }
      v8 += 4;
      uint64_t v22 = (_OWORD *)((char *)v22 + v15);
      v21 += 4;
      v19 += v15;
      v20 += 64;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5) {
        return result;
      }
      goto LABEL_19;
    }
    unint64_t v8 = 0;
    uint64_t v9 = 2 * a2;
    uint64_t v10 = a3 + 1;
    uint64_t v11 = 2 * a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = (_OWORD *)result;
    do
    {
      *(v10 - 1) = *v13;
      *(_OWORD *)((char *)v10 + a4 - 16) = v13[1];
      *(_OWORD *)((char *)v10 + v11 - 16) = v13[2];
      *(_OWORD *)((char *)v10 + v12 - 16) = v13[3];
      if (v6 != 1)
      {
        _OWORD *v10 = *(_OWORD *)((char *)v13 + a2);
        *(_OWORD *)((char *)v10 + a4) = *(_OWORD *)((char *)v13 + a2 + 16);
        *(_OWORD *)((char *)v10 + 2 * a4) = *(_OWORD *)((char *)v13 + a2 + 32);
        *(_OWORD *)((char *)v10 + 3 * a4) = *(_OWORD *)((char *)v13 + a2 + 48);
        if (v6 != 2)
        {
          v10[1] = *(_OWORD *)((char *)v13 + 2 * a2);
          *(_OWORD *)((char *)v10 + a4 + 16) = *(_OWORD *)((char *)v13 + v9 + 16);
          *(_OWORD *)((char *)v10 + v11 + 16) = *(_OWORD *)((char *)v13 + v9 + 32);
          *(_OWORD *)((char *)v10 + v12 + 16) = *(_OWORD *)((char *)v13 + v9 + 48);
        }
      }
      v8 += 4;
      uint64_t v10 = (_OWORD *)((char *)v10 + 4 * a4);
      v13 += 4;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5) {
    return result;
  }
LABEL_19:
  if ((int)v6 >= 4)
  {
    unint64_t v34 = (v6 - 4);
    uint64_t v35 = v8;
    uint64_t v36 = (_OWORD *)(result + 16 * v8);
    uint64_t v37 = (uint64_t)a3 + a4 * v35;
    uint64_t v38 = (_OWORD *)(v37 + 32);
    uint64_t result = v37 + ((16 * v34) & 0xFFFFFFFC0) + 64;
    do
    {
      unint64_t v39 = 0;
      uint64_t v40 = v38;
      unint64_t v41 = v36;
      do
      {
        *(v40 - 2) = *v41;
        *(v40 - 1) = *(_OWORD *)((char *)v41 + a2);
        *uint64_t v40 = *(_OWORD *)((char *)v41 + 2 * a2);
        v40[1] = *(_OWORD *)((char *)v41 + 3 * a2);
        v39 += 4;
        unint64_t v41 = (_OWORD *)((char *)v41 + 4 * a2);
        v40 += 4;
      }
      while (v39 <= v34);
      uint64_t v42 = a2 * ((v34 & 0xFFFFFFFC) + 4);
      uint64_t v43 = (_OWORD *)result;
      unint64_t v44 = (v34 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v39)
      {
        do
        {
          *v43++ = *(_OWORD *)((char *)v36 + v42);
          ++v44;
          v42 += a2;
        }
        while (v44 < v6);
      }
      ++v35;
      ++v36;
      uint64_t v38 = (_OWORD *)((char *)v38 + a4);
      result += a4;
    }
    while (v5 > (int)v35);
  }
  else if ((int)v6 >= 1)
  {
    unint64_t v32 = (_OWORD *)(result + 16 * v8);
    uint64_t v33 = (_OWORD *)((char *)a3 + a4 * v8 + 32);
    do
    {
      *(v33 - 2) = *v32;
      if (v6 != 1)
      {
        *(v33 - 1) = *(_OWORD *)((char *)v32 + a2);
        if (v6 != 2) {
          _OWORD *v33 = *(_OWORD *)((char *)v32 + 2 * a2);
        }
      }
      LODWORD(v8) = v8 + 1;
      ++v32;
      uint64_t v33 = (_OWORD *)((char *)v33 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_1002A4908(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v5 = *a5;
  unint64_t v6 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0) {
      return result;
    }
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    unint64_t v8 = 0;
    unint64_t v32 = (v6 - 4);
    uint64_t v33 = 4 * a4;
    uint64_t v34 = a2 + 72;
    uint64_t v35 = 2 * a2 + 72;
    uint64_t v36 = 3 * a2;
    uint64_t v37 = a3 + 96 * ((v6 - 4) >> 2) + 96;
    uint64_t v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 48;
    uint64_t v39 = result;
    uint64_t v40 = a3;
    do
    {
      unint64_t v41 = 0;
      uint64_t v42 = v39;
      uint64_t v43 = v40;
      do
      {
        long long v44 = *(_OWORD *)v42;
        *(void *)(v43 + 16) = *(void *)(v42 + 16);
        *(_OWORD *)uint64_t v43 = v44;
        long long v45 = *(_OWORD *)(v42 + a2);
        *(void *)(v43 + 40) = *(void *)(v42 + v34 - 56);
        *(_OWORD *)(v43 + 24) = v45;
        long long v46 = *(_OWORD *)(v42 + 2 * a2);
        *(void *)(v43 + 64) = *(void *)(v42 + v35 - 56);
        *(_OWORD *)(v43 + 48) = v46;
        long long v47 = *(_OWORD *)(v42 + 3 * a2);
        *(void *)(v43 + 88) = *(void *)(v42 + v36 + 16);
        *(_OWORD *)(v43 + 72) = v47;
        uint64_t v48 = v43 + a4;
        long long v49 = *(_OWORD *)(v42 + 24);
        *(void *)(v48 + 16) = *(void *)(v42 + 40);
        *(_OWORD *)uint64_t v48 = v49;
        long long v50 = *(_OWORD *)(v42 + v34 - 48);
        *(void *)(v48 + 40) = *(void *)(v42 + v34 - 32);
        *(_OWORD *)(v48 + 24) = v50;
        long long v51 = *(_OWORD *)(v42 + v35 - 48);
        *(void *)(v48 + 64) = *(void *)(v42 + v35 - 32);
        *(_OWORD *)(v48 + 48) = v51;
        long long v52 = *(_OWORD *)(v42 + v36 + 24);
        *(void *)(v48 + 88) = *(void *)(v42 + v36 + 40);
        *(_OWORD *)(v48 + 72) = v52;
        uint64_t v53 = v43 + a4 + a4;
        long long v54 = *(_OWORD *)(v42 + 48);
        *(void *)(v53 + 16) = *(void *)(v42 + 64);
        *(_OWORD *)uint64_t v53 = v54;
        long long v55 = *(_OWORD *)(v42 + v34 - 24);
        *(void *)(v53 + 40) = *(void *)(v42 + v34 - 8);
        *(_OWORD *)(v53 + 24) = v55;
        long long v56 = *(_OWORD *)(v42 + v35 - 24);
        *(void *)(v53 + 64) = *(void *)(v42 + v35 - 8);
        *(_OWORD *)(v53 + 48) = v56;
        long long v57 = *(_OWORD *)(v42 + v36 + 48);
        *(void *)(v53 + 88) = *(void *)(v42 + v36 + 64);
        *(_OWORD *)(v53 + 72) = v57;
        uint64_t v58 = v53 + a4;
        long long v59 = *(_OWORD *)(v42 + 72);
        *(void *)(v58 + 16) = *(void *)(v42 + 88);
        *(_OWORD *)uint64_t v58 = v59;
        long long v60 = *(_OWORD *)(v42 + v34);
        *(void *)(v58 + 40) = *(void *)(v42 + v34 + 16);
        *(_OWORD *)(v58 + 24) = v60;
        long long v61 = *(_OWORD *)(v42 + v35);
        *(void *)(v58 + 64) = *(void *)(v42 + v35 + 16);
        *(_OWORD *)(v58 + 48) = v61;
        long long v62 = *(_OWORD *)(v42 + v36 + 72);
        *(void *)(v58 + 88) = *(void *)(v42 + v36 + 88);
        *(_OWORD *)(v58 + 72) = v62;
        v41 += 4;
        v43 += 96;
        v42 += 4 * a2;
      }
      while (v41 <= v32);
      uint64_t v63 = v38;
      uint64_t v64 = v37;
      unint64_t v65 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v41)
      {
        do
        {
          long long v66 = *(_OWORD *)(v63 - 48);
          *(void *)(v64 + 16) = *(void *)(v63 - 32);
          *(_OWORD *)uint64_t v64 = v66;
          uint64_t v67 = v64 + a4;
          long long v68 = *(_OWORD *)(v63 - 24);
          *(void *)(v67 + 16) = *(void *)(v63 - 8);
          *(_OWORD *)uint64_t v67 = v68;
          uint64_t v69 = v64 + 2 * a4;
          long long v70 = *(_OWORD *)v63;
          *(void *)(v69 + 16) = *(void *)(v63 + 16);
          *(_OWORD *)uint64_t v69 = v70;
          uint64_t v71 = v64 + 3 * a4;
          long long v72 = *(_OWORD *)(v63 + 24);
          *(void *)(v71 + 16) = *(void *)(v63 + 40);
          *(_OWORD *)uint64_t v71 = v72;
          ++v65;
          v64 += 24;
          v63 += a2;
        }
        while (v65 < v6);
      }
      v8 += 4;
      v40 += v33;
      v39 += 96;
      v37 += v33;
      v38 += 96;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5) {
        return result;
      }
      goto LABEL_19;
    }
    unint64_t v8 = 0;
    uint64_t v9 = 2 * a2;
    uint64_t v10 = a3 + 24;
    uint64_t v11 = 2 * a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = result;
    do
    {
      uint64_t v14 = v10 + a4;
      uint64_t v15 = v10 + v11;
      uint64_t v16 = v10 + v12;
      long long v17 = *(_OWORD *)v13;
      *(void *)(v10 - 8) = *(void *)(v13 + 16);
      *(_OWORD *)(v10 - 24) = v17;
      long long v18 = *(_OWORD *)(v13 + 24);
      *(void *)(v14 - 8) = *(void *)(v13 + 40);
      *(_OWORD *)(v14 - 24) = v18;
      long long v19 = *(_OWORD *)(v13 + 48);
      *(void *)(v15 - 8) = *(void *)(v13 + 64);
      *(_OWORD *)(v15 - 24) = v19;
      long long v20 = *(_OWORD *)(v13 + 72);
      *(void *)(v16 - 8) = *(void *)(v13 + 88);
      *(_OWORD *)(v16 - 24) = v20;
      if (v6 != 1)
      {
        long long v21 = *(_OWORD *)(v13 + a2);
        *(void *)(v10 + 16) = *(void *)(v13 + a2 + 16);
        *(_OWORD *)uint64_t v10 = v21;
        long long v22 = *(_OWORD *)(v13 + a2 + 24);
        *(void *)(v14 + 16) = *(void *)(v13 + a2 + 40);
        *(_OWORD *)uint64_t v14 = v22;
        long long v23 = *(_OWORD *)(v13 + a2 + 48);
        *(void *)(v15 + 16) = *(void *)(v13 + a2 + 64);
        *(_OWORD *)uint64_t v15 = v23;
        long long v24 = *(_OWORD *)(v13 + a2 + 72);
        *(void *)(v16 + 16) = *(void *)(v13 + a2 + 88);
        *(_OWORD *)uint64_t v16 = v24;
        if (v6 != 2)
        {
          long long v25 = *(_OWORD *)(v13 + 2 * a2);
          *(void *)(v10 + 40) = *(void *)(v13 + v9 + 16);
          *(_OWORD *)(v10 + 24) = v25;
          uint64_t v26 = v10 + a4;
          long long v27 = *(_OWORD *)(v13 + v9 + 24);
          *(void *)(v26 + 40) = *(void *)(v13 + v9 + 40);
          *(_OWORD *)(v26 + 24) = v27;
          uint64_t v28 = v10 + v11;
          long long v29 = *(_OWORD *)(v13 + v9 + 48);
          *(void *)(v28 + 40) = *(void *)(v13 + v9 + 64);
          *(_OWORD *)(v28 + 24) = v29;
          uint64_t v30 = v10 + v12;
          long long v31 = *(_OWORD *)(v13 + v9 + 72);
          *(void *)(v30 + 40) = *(void *)(v13 + v9 + 88);
          *(_OWORD *)(v30 + 24) = v31;
        }
      }
      v8 += 4;
      v10 += 4 * a4;
      v13 += 96;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5) {
    return result;
  }
LABEL_19:
  if ((int)v6 >= 4)
  {
    unint64_t v78 = (v6 - 4);
    uint64_t v79 = v8;
    uint64_t v80 = result + 24 * v8;
    uint64_t v81 = a3 + a4 * v79;
    uint64_t v82 = v81 + 48;
    uint64_t result = v81 + 96 * ((v6 - 4) >> 2) + 96;
    do
    {
      unint64_t v83 = 0;
      uint64_t v84 = v82;
      uint64_t v85 = v80;
      do
      {
        long long v86 = *(_OWORD *)v85;
        *(void *)(v84 - 32) = *(void *)(v85 + 16);
        *(_OWORD *)(v84 - 48) = v86;
        long long v87 = *(_OWORD *)(v85 + a2);
        *(void *)(v84 - 8) = *(void *)(v85 + a2 + 16);
        *(_OWORD *)(v84 - 24) = v87;
        long long v88 = *(_OWORD *)(v85 + 2 * a2);
        *(void *)(v84 + 16) = *(void *)(v85 + 2 * a2 + 16);
        *(_OWORD *)uint64_t v84 = v88;
        long long v89 = *(_OWORD *)(v85 + 3 * a2);
        *(void *)(v84 + 40) = *(void *)(v85 + 3 * a2 + 16);
        *(_OWORD *)(v84 + 24) = v89;
        v83 += 4;
        v85 += 4 * a2;
        v84 += 96;
      }
      while (v83 <= v78);
      uint64_t v90 = a2 * ((v78 & 0xFFFFFFFC) + 4);
      uint64_t v91 = result;
      unint64_t v92 = (v78 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v83)
      {
        do
        {
          long long v93 = *(_OWORD *)(v80 + v90);
          *(void *)(v91 + 16) = *(void *)(v80 + v90 + 16);
          *(_OWORD *)uint64_t v91 = v93;
          v91 += 24;
          ++v92;
          v90 += a2;
        }
        while (v92 < v6);
      }
      ++v79;
      v80 += 24;
      v82 += a4;
      result += a4;
    }
    while (v5 > (int)v79);
  }
  else if ((int)v6 >= 1)
  {
    uint64_t v73 = result + 24 * v8;
    uint64_t v74 = a3 + a4 * v8 + 24;
    do
    {
      long long v75 = *(_OWORD *)v73;
      *(void *)(v74 - 8) = *(void *)(v73 + 16);
      *(_OWORD *)(v74 - 24) = v75;
      if (v6 != 1)
      {
        long long v76 = *(_OWORD *)(v73 + a2);
        *(void *)(v74 + 16) = *(void *)(v73 + a2 + 16);
        *(_OWORD *)uint64_t v74 = v76;
        if (v6 != 2)
        {
          long long v77 = *(_OWORD *)(v73 + 2 * a2);
          *(void *)(v74 + 40) = *(void *)(v73 + 2 * a2 + 16);
          *(_OWORD *)(v74 + 24) = v77;
        }
      }
      LODWORD(v8) = v8 + 1;
      v73 += 24;
      v74 += a4;
    }
    while (v5 > (int)v8);
  }
  return result;
}

uint64_t sub_1002A4E5C(uint64_t result, uint64_t a2, _OWORD *a3, uint64_t a4, int *a5)
{
  int v5 = *a5;
  unint64_t v6 = a5[1];
  unint64_t v7 = (*a5 - 4);
  if (*a5 < 4)
  {
    LODWORD(v8) = 0;
    if (v5 <= 0) {
      return result;
    }
    goto LABEL_19;
  }
  if ((int)v6 >= 4)
  {
    unint64_t v8 = 0;
    unint64_t v32 = (v6 - 4);
    uint64_t v33 = 4 * a4;
    uint64_t v34 = a2 + 96;
    uint64_t v35 = 2 * a2 + 96;
    uint64_t v36 = 3 * a2;
    uint64_t v37 = (uint64_t)a3 + ((32 * v32) & 0x1FFFFFFF80) + 128;
    uint64_t v38 = result + a2 * ((v32 & 0xFFFFFFFC) + 4) + 64;
    uint64_t v39 = (_OWORD *)result;
    uint64_t v40 = a3;
    do
    {
      unint64_t v41 = 0;
      uint64_t v42 = v39;
      uint64_t v43 = v40;
      do
      {
        long long v44 = v42[1];
        _OWORD *v43 = *v42;
        v43[1] = v44;
        long long v45 = *(_OWORD *)((char *)v42 + v34 - 80);
        v43[2] = *(_OWORD *)((char *)v42 + a2);
        v43[3] = v45;
        long long v46 = *(_OWORD *)((char *)v42 + v35 - 80);
        v43[4] = *(_OWORD *)((char *)v42 + 2 * a2);
        v43[5] = v46;
        long long v47 = *(_OWORD *)((char *)v42 + v36 + 16);
        v43[6] = *(_OWORD *)((char *)v42 + 3 * a2);
        v43[7] = v47;
        uint64_t v48 = (_OWORD *)((char *)v43 + a4);
        long long v49 = v42[3];
        *uint64_t v48 = v42[2];
        v48[1] = v49;
        long long v50 = *(_OWORD *)((char *)v42 + v34 - 48);
        v48[2] = *(_OWORD *)((char *)v42 + v34 - 64);
        v48[3] = v50;
        long long v51 = *(_OWORD *)((char *)v42 + v35 - 48);
        v48[4] = *(_OWORD *)((char *)v42 + v35 - 64);
        v48[5] = v51;
        long long v52 = *(_OWORD *)((char *)v42 + v36 + 48);
        v48[6] = *(_OWORD *)((char *)v42 + v36 + 32);
        v48[7] = v52;
        uint64_t v53 = (_OWORD *)((char *)v43 + a4 + a4);
        long long v54 = v42[5];
        _OWORD *v53 = v42[4];
        v53[1] = v54;
        long long v55 = *(_OWORD *)((char *)v42 + v34 - 16);
        v53[2] = *(_OWORD *)((char *)v42 + v34 - 32);
        v53[3] = v55;
        long long v56 = *(_OWORD *)((char *)v42 + v35 - 16);
        v53[4] = *(_OWORD *)((char *)v42 + v35 - 32);
        v53[5] = v56;
        long long v57 = *(_OWORD *)((char *)v42 + v36 + 80);
        v53[6] = *(_OWORD *)((char *)v42 + v36 + 64);
        v53[7] = v57;
        uint64_t v58 = (_OWORD *)((char *)v53 + a4);
        long long v59 = v42[7];
        *uint64_t v58 = v42[6];
        v58[1] = v59;
        long long v60 = *(_OWORD *)((char *)v42 + v34 + 16);
        v58[2] = *(_OWORD *)((char *)v42 + v34);
        v58[3] = v60;
        long long v61 = *(_OWORD *)((char *)v42 + v35 + 16);
        v58[4] = *(_OWORD *)((char *)v42 + v35);
        v58[5] = v61;
        long long v62 = *(_OWORD *)((char *)v42 + v36 + 112);
        v58[6] = *(_OWORD *)((char *)v42 + v36 + 96);
        v58[7] = v62;
        v41 += 4;
        v43 += 8;
        uint64_t v42 = (_OWORD *)((char *)v42 + 4 * a2);
      }
      while (v41 <= v32);
      uint64_t v63 = (_OWORD *)v38;
      uint64_t v64 = (_OWORD *)v37;
      unint64_t v65 = (v32 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v41)
      {
        do
        {
          long long v66 = *(v63 - 3);
          _OWORD *v64 = *(v63 - 4);
          v64[1] = v66;
          uint64_t v67 = (_OWORD *)((char *)v64 + a4);
          long long v68 = *(v63 - 1);
          *uint64_t v67 = *(v63 - 2);
          v67[1] = v68;
          uint64_t v69 = (_OWORD *)((char *)v64 + 2 * a4);
          long long v70 = v63[1];
          _OWORD *v69 = *v63;
          v69[1] = v70;
          uint64_t v71 = (_OWORD *)((char *)v64 + 3 * a4);
          long long v72 = v63[3];
          _OWORD *v71 = v63[2];
          v71[1] = v72;
          ++v65;
          v64 += 2;
          uint64_t v63 = (_OWORD *)((char *)v63 + a2);
        }
        while (v65 < v6);
      }
      v8 += 4;
      uint64_t v40 = (_OWORD *)((char *)v40 + v33);
      v39 += 8;
      v37 += v33;
      v38 += 128;
    }
    while (v8 <= v7);
  }
  else
  {
    if ((int)v6 <= 0)
    {
      LODWORD(v8) = (v7 & 0xFFFFFFFC) + 4;
      if ((int)v8 >= v5) {
        return result;
      }
      goto LABEL_19;
    }
    unint64_t v8 = 0;
    uint64_t v9 = 2 * a2;
    uint64_t v10 = a3 + 2;
    uint64_t v11 = 2 * a4;
    uint64_t v12 = 3 * a4;
    uint64_t v13 = (_OWORD *)result;
    do
    {
      uint64_t v14 = (_OWORD *)((char *)v10 + a4);
      uint64_t v15 = (_OWORD *)((char *)v10 + v11);
      uint64_t v16 = (_OWORD *)((char *)v10 + v12);
      long long v17 = v13[1];
      *(v10 - 2) = *v13;
      *(v10 - 1) = v17;
      long long v18 = v13[3];
      *(v14 - 2) = v13[2];
      *(v14 - 1) = v18;
      long long v19 = v13[5];
      *(v15 - 2) = v13[4];
      *(v15 - 1) = v19;
      long long v20 = v13[7];
      *(v16 - 2) = v13[6];
      *(v16 - 1) = v20;
      if (v6 != 1)
      {
        long long v21 = *(_OWORD *)((char *)v13 + a2 + 16);
        _OWORD *v10 = *(_OWORD *)((char *)v13 + a2);
        v10[1] = v21;
        long long v22 = *(_OWORD *)((char *)v13 + a2 + 48);
        *uint64_t v14 = *(_OWORD *)((char *)v13 + a2 + 32);
        v14[1] = v22;
        long long v23 = *(_OWORD *)((char *)v13 + a2 + 80);
        *uint64_t v15 = *(_OWORD *)((char *)v13 + a2 + 64);
        v15[1] = v23;
        long long v24 = *(_OWORD *)((char *)v13 + a2 + 112);
        *uint64_t v16 = *(_OWORD *)((char *)v13 + a2 + 96);
        v16[1] = v24;
        if (v6 != 2)
        {
          long long v25 = *(_OWORD *)((char *)v13 + v9 + 16);
          v10[2] = *(_OWORD *)((char *)v13 + 2 * a2);
          v10[3] = v25;
          uint64_t v26 = (char *)v10 + a4;
          long long v27 = *(_OWORD *)((char *)v13 + v9 + 48);
          *((_OWORD *)v26 + 2) = *(_OWORD *)((char *)v13 + v9 + 32);
          *((_OWORD *)v26 + 3) = v27;
          uint64_t v28 = (char *)v10 + v11;
          long long v29 = *(_OWORD *)((char *)v13 + v9 + 80);
          *((_OWORD *)v28 + 2) = *(_OWORD *)((char *)v13 + v9 + 64);
          *((_OWORD *)v28 + 3) = v29;
          uint64_t v30 = (char *)v10 + v12;
          long long v31 = *(_OWORD *)((char *)v13 + v9 + 112);
          *((_OWORD *)v30 + 2) = *(_OWORD *)((char *)v13 + v9 + 96);
          *((_OWORD *)v30 + 3) = v31;
        }
      }
      v8 += 4;
      uint64_t v10 = (_OWORD *)((char *)v10 + 4 * a4);
      v13 += 8;
    }
    while (v8 <= v7);
  }
  if ((int)v8 >= v5) {
    return result;
  }
LABEL_19:
  if ((int)v6 >= 4)
  {
    unint64_t v78 = (v6 - 4);
    unint64_t v8 = v8;
    uint64_t v79 = (_OWORD *)(result + 32 * v8);
    uint64_t v80 = (uint64_t)a3 + a4 * v8;
    uint64_t v81 = (_OWORD *)(v80 + 64);
    uint64_t result = v80 + ((32 * v78) & 0x1FFFFFFF80) + 128;
    do
    {
      unint64_t v82 = 0;
      unint64_t v83 = v81;
      uint64_t v84 = v79;
      do
      {
        long long v85 = v84[1];
        *(v83 - 4) = *v84;
        *(v83 - 3) = v85;
        long long v86 = *(_OWORD *)((char *)v84 + a2 + 16);
        *(v83 - 2) = *(_OWORD *)((char *)v84 + a2);
        *(v83 - 1) = v86;
        long long v87 = *(_OWORD *)((char *)v84 + 2 * a2 + 16);
        *unint64_t v83 = *(_OWORD *)((char *)v84 + 2 * a2);
        v83[1] = v87;
        long long v88 = *(_OWORD *)((char *)v84 + 3 * a2 + 16);
        v83[2] = *(_OWORD *)((char *)v84 + 3 * a2);
        v83[3] = v88;
        v82 += 4;
        uint64_t v84 = (_OWORD *)((char *)v84 + 4 * a2);
        v83 += 8;
      }
      while (v82 <= v78);
      uint64_t v89 = a2 * ((v78 & 0xFFFFFFFC) + 4);
      uint64_t v90 = (_OWORD *)result;
      unint64_t v91 = (v78 & 0xFFFFFFFC) + 4;
      if ((int)v6 > (int)v82)
      {
        do
        {
          long long v92 = *(_OWORD *)((char *)v79 + v89 + 16);
          *uint64_t v90 = *(_OWORD *)((char *)v79 + v89);
          v90[1] = v92;
          v90 += 2;
          ++v91;
          v89 += a2;
        }
        while (v91 < v6);
      }
      ++v8;
      v79 += 2;
      uint64_t v81 = (_OWORD *)((char *)v81 + a4);
      result += a4;
    }
    while (v5 > (int)v8);
  }
  else if ((int)v6 >= 1)
  {
    uint64_t v73 = (_OWORD *)(result + 32 * v8);
    uint64_t v74 = (_OWORD *)((char *)a3 + a4 * v8 + 64);
    do
    {
      long long v75 = v73[1];
      *(v74 - 4) = *v73;
      *(v74 - 3) = v75;
      if (v6 != 1)
      {
        long long v76 = *(_OWORD *)((char *)v73 + a2 + 16);
        *(v74 - 2) = *(_OWORD *)((char *)v73 + a2);
        *(v74 - 1) = v76;
        if (v6 != 2)
        {
          long long v77 = *(_OWORD *)((char *)v73 + 2 * a2 + 16);
          *uint64_t v74 = *(_OWORD *)((char *)v73 + 2 * a2);
          v74[1] = v77;
        }
      }
      LODWORD(v8) = v8 + 1;
      v73 += 2;
      uint64_t v74 = (_OWORD *)((char *)v74 + a4);
    }
    while (v5 > (int)v8);
  }
  return result;
}

void sub_1002A525C(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 5) >= a2)
  {
    if (a2)
    {
      uint64_t v12 = v6 + 96 * a2;
      do
      {
        *(_DWORD *)uint64_t v6 = 1124007936;
        *(_OWORD *)(v6 + 4) = 0uLL;
        *(_OWORD *)(v6 + 20) = 0uLL;
        *(_OWORD *)(v6 + 36) = 0uLL;
        *(_OWORD *)(v6 + 48) = 0uLL;
        *(void *)(v6 + 80) = 0;
        *(void *)(v6 + 64) = v6 + 8;
        *(void *)(v6 + 72) = v6 + 80;
        *(void *)(v6 + 88) = 0;
        v6 += 96;
      }
      while (v6 != v12);
      uint64_t v6 = v12;
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 5);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x2AAAAAAAAAAAAAALL) {
      sub_10000B98C();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 5);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x155555555555555) {
      unint64_t v10 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x2AAAAAAAAAAAAAALL) {
        sub_10000BA6C();
      }
      uint64_t v11 = (char *)operator new(96 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = (uint64_t)&v11[96 * v7];
    uint64_t v14 = &v11[96 * v10];
    unint64_t v15 = v13 + 96 * a2;
    uint64_t v16 = v13;
    do
    {
      *(_DWORD *)uint64_t v16 = 1124007936;
      *(_OWORD *)(v16 + 4) = 0uLL;
      *(_OWORD *)(v16 + 20) = 0uLL;
      *(_OWORD *)(v16 + 36) = 0uLL;
      *(_OWORD *)(v16 + 48) = 0uLL;
      *(void *)(v16 + 80) = 0;
      *(void *)(v16 + 64) = v16 + 8;
      *(void *)(v16 + 72) = v16 + 80;
      *(void *)(v16 + 88) = 0;
      v16 += 96;
    }
    while (v16 != v15);
    sub_1002A54BC(v5, a1[1], a1[1], *a1, *a1, v13, v13);
    long long v17 = (void *)*a1;
    uint64_t v18 = a1[1];
    *a1 = v19;
    a1[1] = v15;
    a1[2] = (uint64_t)v14;
    while ((void *)v18 != v17)
    {
      v18 -= 96;
      sub_1002A5630(v5, v18);
    }
    if (v17) {
      operator delete(v17);
    }
  }
}

void sub_1002A5450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002A5464((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A5464(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 96;
    sub_1002A5630(v4, i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1002A54BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = a6;
  uint64_t v17 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a3 - 96;
    do
    {
      long long v12 = *(_OWORD *)v8;
      *(_OWORD *)(a7 - 80) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(a7 - 64) = *(_OWORD *)(v8 + 32);
      uint64_t v14 = *(void *)(v8 + 48);
      uint64_t v13 = *(void *)(v8 + 56);
      *(void *)(a7 - 16) = 0;
      *(void *)(a7 - 48) = v14;
      *(void *)(a7 - 40) = v13;
      *(void *)(a7 - 32) = a7 - 88;
      *(void *)(a7 - 24) = a7 - 16;
      *(void *)(a7 - 8) = 0;
      *(_OWORD *)(a7 - 96) = v12;
      if (v13) {
        atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 1u);
      }
      if (*(int *)(v8 + 4) <= 2)
      {
        unint64_t v9 = *(void **)(v8 + 72);
        unint64_t v10 = *(void **)(a7 - 24);
        void *v10 = *v9;
        v10[1] = v9[1];
      }
      else
      {
        *(_DWORD *)(a7 - 92) = 0;
        sub_1002931A8(a7 - 96, v8);
      }
      a7 = v17 - 96;
      v17 -= 96;
      BOOL v11 = v8 == a5;
      v8 -= 96;
    }
    while (!v11);
    return v16;
  }
  return a6;
}

void sub_1002A55B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002A55CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v2 != v3)
    {
      uint64_t v4 = *(void *)a1;
      do
      {
        sub_1002A5630(v4, v2);
        v2 += 96;
      }
      while (v2 != v3);
    }
  }
  return a1;
}

void sub_1002A5630(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 56);
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v3 + 20), 0xFFFFFFFF) == 1)
    {
      uint64_t v4 = *(void *)(a2 + 56);
      if (v4)
      {
        *(void *)(a2 + 56) = 0;
        uint64_t v5 = *(void *)(v4 + 8);
        if (!v5)
        {
          uint64_t v5 = *(void *)(a2 + 48);
          if (!v5) {
            uint64_t v5 = sub_10029230C();
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v4);
      }
    }
  }
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (*(int *)(a2 + 4) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a2 + 64);
    do
      *(_DWORD *)(v7 + 4 * v6++) = 0;
    while (v6 < *(int *)(a2 + 4));
  }
  uint64_t v8 = *(void **)(a2 + 72);
  if (v8 != (void *)(a2 + 80)) {
    j__free(v8);
  }
}

void sub_1002A5700(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = v5 + 80 * a2;
      do
      {
        *(_DWORD *)uint64_t v5 = 1124007936;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 4) = 0;
        *(void *)(v5 + 20) = 0;
        *(void *)(v5 + 12) = 0;
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 48) = v5 + 8;
        *(void *)(v5 + 56) = v5 + 64;
        *(void *)(v5 + 72) = 0;
        v5 += 80;
      }
      while (v5 != v11);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x333333333333333) {
      sub_10000B98C();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x199999999999999) {
      unint64_t v9 = 0x333333333333333;
    }
    else {
      unint64_t v9 = v7;
    }
    long long v20 = a1 + 2;
    if (v9)
    {
      if (v9 > 0x333333333333333) {
        sub_10000BA6C();
      }
      unint64_t v10 = (char *)operator new(80 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    long long v12 = &v10[80 * v6];
    __p = v10;
    uint64_t v17 = v12;
    uint64_t v19 = &v10[80 * v9];
    uint64_t v13 = &v12[80 * a2];
    do
    {
      *(_DWORD *)long long v12 = 1124007936;
      *((void *)v12 + 4) = 0;
      *((void *)v12 + 5) = 0;
      *(void *)(v12 + 4) = 0;
      *(void *)(v12 + 20) = 0;
      *(void *)(v12 + 12) = 0;
      *((void *)v12 + 8) = 0;
      *((void *)v12 + 6) = v12 + 8;
      *((void *)v12 + 7) = v12 + 64;
      *((void *)v12 + 9) = 0;
      v12 += 80;
    }
    while (v12 != v13);
    uint64_t v18 = v13;
    sub_1002A58DC(a1, &__p);
    unint64_t v15 = v17;
    for (uint64_t i = v18; v18 != v15; uint64_t i = v18)
    {
      uint64_t v18 = i - 80;
      sub_1002D9C04((uint64_t)(i - 80));
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1002A58C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002A5A24((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A58DC(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v10 = v6 + v7;
      *(_OWORD *)(v6 + v7 - 80) = *(_OWORD *)(v4 + v7 - 80);
      *(void *)(v10 - 64) = *(void *)(v4 + v7 - 64);
      *(_DWORD *)(v10 - 56) = *(_DWORD *)(v4 + v7 - 56);
      uint64_t v11 = *(void *)(v4 + v7 - 48);
      uint64_t v12 = *(void *)(v4 + v7 - 40);
      *(void *)(v10 - 48) = v11;
      *(void *)(v10 - 40) = v12;
      *(void *)(v6 + v7 - 16) = 0;
      *(void *)(v10 - 32) = v6 + v7 - 72;
      *(void *)(v10 - 24) = v6 + v7 - 16;
      *(void *)(v10 - 8) = 0;
      if (v11) {
        atomic_fetch_add((atomic_uint *volatile)(v11 + 16), 1u);
      }
      if (*(int *)(v4 + v7 - 76) <= 2)
      {
        unint64_t v8 = *(void **)(v4 + v7 - 24);
        unint64_t v9 = *(void **)(v10 - 24);
        void *v9 = *v8;
        v9[1] = v8[1];
      }
      else
      {
        *(_DWORD *)(v10 - 76) = 0;
        sub_1002DA318(v6 + v7 - 80, v4 + v7 - 80);
      }
      v7 -= 80;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  uint64_t v14 = a1[1];
  a1[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = a1[2];
  a1[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
}

void sub_1002A5A04(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 80)
    sub_1002D9C04(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A5A24(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    sub_1002D9C04(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002A5A78(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_10000B98C();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_10000BA6C();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      uint64_t v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      *uint64_t v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    uint64_t v19 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      long long v20 = v5;
      do
      {
        long long v22 = (void *)*(v20 - 3);
        v20 -= 3;
        long long v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        uint64_t v5 = v20;
      }
      while (v20 != v19);
      uint64_t v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

void sub_1002A5C80(void *a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      uint64_t v6 = &v5[2 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = (uint64_t)&v5[-*a1];
    uint64_t v9 = (v8 >> 1) + a2;
    if (v9 < 0) {
      sub_10000B98C();
    }
    unint64_t v10 = v4 - (void)v7;
    if (v10 > v9) {
      uint64_t v9 = v10;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 < 0) {
        sub_10000BA6C();
      }
      size_t v12 = (char *)operator new(2 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    uint64_t v13 = &v12[2 * (v8 >> 1)];
    size_t v14 = 2 * a2;
    size_t v15 = &v12[2 * v11];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v7)
    {
      unint64_t v17 = v5 - v7 - 2;
      if (v17 < 0x1E
        || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFFELL) - 2] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFFELL) - 2] < v13)
      {
        goto LABEL_22;
      }
      uint64_t v18 = (v17 >> 1) + 1;
      unint64_t v19 = 2 * (v18 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v6 = &v5[-v19];
      long long v20 = &v13[-v19];
      long long v21 = v5 - 32;
      long long v22 = v13 - 32;
      unint64_t v23 = v18 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16x2_t v26 = vld2q_s8(v21);
        v21 -= 32;
        vst2q_s8(v22, v26);
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      uint64_t v13 = v20;
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_22:
        long long v20 = v13;
        do
        {
          char v24 = *(v6 - 2);
          v6 -= 2;
          *(v20 - 2) = v24;
          v20 -= 2;
          v20[1] = v6[1];
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
      uint64_t v13 = v20;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1002A5E50(unint64_t *a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * (v4 - (void)v5) >= a2)
  {
    if (a2)
    {
      size_t v13 = 3 * ((3 * a2 - 3) / 3) + 3;
      bzero(v5, v13);
      uint64_t v6 = &v5[v13];
    }
    a1[1] = (unint64_t)v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = &v5[-*a1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (void)v8 + a2;
    if (v9 >= 0x5555555555555556) {
      sub_10000B98C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v4 - (void)v7);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x5555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >= 0x5555555555555556) {
        sub_10000BA6C();
      }
      size_t v12 = operator new(3 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    unint64_t v14 = (unint64_t)&v8[(void)v12];
    size_t v15 = (char *)v12 + 3 * v11;
    size_t v16 = 3 * ((3 * a2 - 3) / 3) + 3;
    bzero(&v8[(void)v12], v16);
    if (v5 != v7)
    {
      unint64_t v17 = v5 - v7 - 3;
      if (v17 < 0x2D) {
        goto LABEL_25;
      }
      unint64_t v18 = v17 / 3;
      if (&v8[(void)v12 - 3 + -3 * v18] < v5 && (unint64_t)&v5[-3 * v18 - 3] < v14) {
        goto LABEL_25;
      }
      unint64_t v20 = v18 + 1;
      uint64_t v21 = (v18 + 1) & 0x7FFFFFFFFFFFFFF0;
      uint64_t v6 = &v5[-3 * v21];
      unint64_t v22 = v14 - 3 * v21;
      unint64_t v23 = v5 - 48;
      char v24 = (char *)(v14 - 48);
      uint64_t v25 = v21;
      do
      {
        int8x16x3_t v28 = vld3q_s8(v23);
        vst3q_s8(v24, v28);
        v24 -= 48;
        v23 -= 48;
        v25 -= 16;
      }
      while (v25);
      v14 -= 3 * v21;
      if (v20 != v21)
      {
LABEL_25:
        unint64_t v22 = v14;
        do
        {
          char v26 = *(v6 - 3);
          v6 -= 3;
          *(unsigned char *)(v22 - 3) = v26;
          v22 -= 3;
          *(unsigned char *)(v22 + 1) = v6[1];
          *(unsigned char *)(v22 + 2) = v6[2];
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
      unint64_t v14 = v22;
    }
    *a1 = v14;
    a1[1] = (unint64_t)&v8[(void)v12 + v16];
    a1[2] = (unint64_t)v15;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1002A6098(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 1) >= a2)
  {
    if (a2)
    {
      size_t v13 = 6 * ((6 * a2 - 6) / 6) + 6;
      bzero(v5, v13);
      uint64_t v6 = &v5[v13];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 1) + a2;
    if (v9 > 0x2AAAAAAAAAAAAAAALL) {
      sub_10000B98C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v7) >> 1);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1555555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x2AAAAAAAAAAAAAAALL) {
        sub_10000BA6C();
      }
      size_t v12 = (char *)operator new(6 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    unint64_t v14 = &v12[2 * (v8 >> 1)];
    size_t v15 = &v12[6 * v11];
    size_t v16 = 6 * ((6 * a2 - 6) / 6) + 6;
    bzero(v14, v16);
    unint64_t v17 = &v14[v16];
    if (v5 == v7)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v15;
      if (!v7) {
        return;
      }
      goto LABEL_28;
    }
    unint64_t v18 = v5 - v7 - 6;
    if (v18 < 0x5A) {
      goto LABEL_25;
    }
    unint64_t v19 = v18 / 6;
    if (&v12[v8 - 6 * v19 - 6] < v5 && &v5[-6 * v19 - 6] < v14) {
      goto LABEL_25;
    }
    unint64_t v21 = v19 + 1;
    uint64_t v22 = (v19 + 1) & 0x7FFFFFFFFFFFFFF8;
    uint64_t v6 = &v5[-6 * v22];
    unint64_t v23 = &v14[-6 * v22];
    char v24 = (const __int16 *)(v5 - 48);
    uint64_t v25 = (__int16 *)(v14 - 48);
    uint64_t v26 = v22;
    do
    {
      int16x8x3_t v29 = vld3q_s16(v24);
      vst3q_s16(v25, v29);
      v25 -= 24;
      v24 -= 24;
      v26 -= 8;
    }
    while (v26);
    v14 -= 6 * v22;
    if (v21 != v22)
    {
LABEL_25:
      unint64_t v23 = v14;
      do
      {
        __int16 v27 = *((_WORD *)v6 - 3);
        v6 -= 6;
        *((_WORD *)v23 - 3) = v27;
        v23 -= 6;
        *((_WORD *)v23 + 1) = *((_WORD *)v6 + 1);
        *((_WORD *)v23 + 2) = *((_WORD *)v6 + 2);
      }
      while (v6 != v7);
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v15;
    if (v7)
    {
LABEL_28:
      operator delete(v7);
    }
  }
}

void sub_1002A62F4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    unint64_t v9 = (v8 >> 3) + a2;
    if (v9 >> 61) {
      sub_10000B98C();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_10000BA6C();
      }
      size_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    size_t v13 = &v12[8 * (v8 >> 3)];
    size_t v14 = 8 * a2;
    size_t v15 = &v12[8 * v11];
    bzero(v13, v14);
    size_t v16 = &v13[v14];
    if (v5 == v7)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v15;
      if (!v7) {
        return;
      }
      goto LABEL_25;
    }
    unint64_t v17 = v5 - v7 - 8;
    if (v17 < 0x78 || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v13) {
      goto LABEL_22;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    unint64_t v20 = &v13[-v19];
    unint64_t v21 = (const float *)(v5 - 32);
    uint64_t v22 = (float *)(v13 - 32);
    uint64_t v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float32x4x2_t v26 = vld2q_f32(v21);
      v21 -= 8;
      vst2q_f32(v22, v26);
      v22 -= 8;
      v23 -= 4;
    }
    while (v23);
    size_t v13 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_22:
      unint64_t v20 = v13;
      do
      {
        int v24 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        *((_DWORD *)v20 - 2) = v24;
        v20 -= 8;
        *((_DWORD *)v20 + 1) = *((_DWORD *)v6 + 1);
      }
      while (v6 != v7);
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v15;
    if (v7)
    {
LABEL_25:
      operator delete(v7);
    }
  }
}

void sub_1002A64D8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      uint64_t v6 = &v5[v13];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555) {
      sub_10000B98C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x1555555555555555) {
        sub_10000BA6C();
      }
      size_t v12 = (char *)operator new(12 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    size_t v14 = &v12[4 * (v8 >> 2)];
    size_t v15 = &v12[12 * v11];
    size_t v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    unint64_t v17 = &v14[v16];
    if (v5 == v7)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v15;
      if (!v7) {
        return;
      }
      goto LABEL_28;
    }
    unint64_t v18 = v5 - v7 - 12;
    if (v18 < 0xB4) {
      goto LABEL_25;
    }
    unint64_t v19 = v18 / 0xC;
    if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14) {
      goto LABEL_25;
    }
    unint64_t v21 = v19 + 1;
    uint64_t v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v6 = &v5[-12 * v22];
    uint64_t v23 = &v14[-12 * v22];
    int v24 = (const float *)(v5 - 48);
    uint64_t v25 = (float *)(v14 - 48);
    uint64_t v26 = v22;
    do
    {
      float32x4x3_t v29 = vld3q_f32(v24);
      vst3q_f32(v25, v29);
      v25 -= 12;
      v24 -= 12;
      v26 -= 4;
    }
    while (v26);
    v14 -= 12 * v22;
    if (v21 != v22)
    {
LABEL_25:
      uint64_t v23 = v14;
      do
      {
        int v27 = *((_DWORD *)v6 - 3);
        v6 -= 12;
        *((_DWORD *)v23 - 3) = v27;
        v23 -= 12;
        *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
        *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
      }
      while (v6 != v7);
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v15;
    if (v7)
    {
LABEL_28:
      operator delete(v7);
    }
  }
}

void sub_1002A6734(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      bzero(v5, 16 * a2);
      uint64_t v6 = &v5[16 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    unint64_t v9 = (v8 >> 4) + a2;
    if (v9 >> 60) {
      sub_10000B98C();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_10000BA6C();
      }
      size_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    size_t v13 = &v12[16 * (v8 >> 4)];
    size_t v14 = 16 * a2;
    size_t v15 = &v12[16 * v11];
    bzero(v13, v14);
    size_t v16 = &v13[v14];
    if (v5 == v7)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v15;
      if (!v7) {
        return;
      }
      goto LABEL_25;
    }
    unint64_t v17 = v5 - v7 - 16;
    if (v17 < 0x70
      || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFF0) - 16] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFF0) - 16] < v13)
    {
      goto LABEL_22;
    }
    uint64_t v18 = (v17 >> 4) + 1;
    uint64_t v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    unint64_t v20 = &v13[-v19];
    unint64_t v21 = (const float *)(v5 - 64);
    uint64_t v22 = (float *)(v13 - 64);
    uint64_t v23 = v18 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      float32x4x4_t v26 = vld4q_f32(v21);
      vst4q_f32(v22, v26);
      v22 -= 16;
      v21 -= 16;
      v23 -= 4;
    }
    while (v23);
    size_t v13 = v20;
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_22:
      unint64_t v20 = v13;
      do
      {
        int v24 = *((_DWORD *)v6 - 4);
        v6 -= 16;
        *((_DWORD *)v20 - 4) = v24;
        v20 -= 16;
        *((_DWORD *)v20 + 1) = *((_DWORD *)v6 + 1);
        *((_DWORD *)v20 + 2) = *((_DWORD *)v6 + 2);
        *((_DWORD *)v20 + 3) = *((_DWORD *)v6 + 3);
      }
      while (v6 != v7);
    }
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v15;
    if (v7)
    {
LABEL_25:
      operator delete(v7);
    }
  }
}

void sub_1002A6928(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_10000B98C();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_10000BA6C();
      }
      unint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    size_t v13 = &v11[24 * v7];
    size_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    for (uint64_t i = &v13[v15]; v5 != v6; *((_DWORD *)v13 + 5) = v5[5])
    {
      int v17 = *(v5 - 6);
      v5 -= 6;
      *((_DWORD *)v13 - 6) = v17;
      v13 -= 24;
      *((_DWORD *)v13 + 1) = v5[1];
      *((_DWORD *)v13 + 2) = v5[2];
      *((_DWORD *)v13 + 3) = v5[3];
      *((_DWORD *)v13 + 4) = v5[4];
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = v14;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1002A6AE8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 32 * a2);
      v5 += 8 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 5;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 59) {
      sub_10000B98C();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 59) {
        sub_10000BA6C();
      }
      unint64_t v11 = (char *)operator new(32 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    size_t v12 = &v11[32 * v7];
    size_t v13 = 32 * a2;
    size_t v14 = &v11[32 * v10];
    bzero(v12, v13);
    for (uint64_t i = &v12[v13]; v5 != v6; *((_DWORD *)v12 + 7) = v5[7])
    {
      int v16 = *(v5 - 8);
      v5 -= 8;
      *((_DWORD *)v12 - 8) = v16;
      v12 -= 32;
      *((_DWORD *)v12 + 1) = v5[1];
      *((_DWORD *)v12 + 2) = v5[2];
      *((_DWORD *)v12 + 3) = v5[3];
      *((_DWORD *)v12 + 4) = v5[4];
      *((_DWORD *)v12 + 5) = v5[5];
      *((_DWORD *)v12 + 6) = v5[6];
    }
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = v14;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1002A6C4C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0x8E38E38E38E38E39 * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v12 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    unint64_t v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *(void *)a1) >> 2);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x71C71C71C71C71CLL) {
      sub_10000B98C();
    }
    unint64_t v9 = 0x8E38E38E38E38E39 * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x38E38E38E38E38ELL) {
      unint64_t v10 = 0x71C71C71C71C71CLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x71C71C71C71C71CLL) {
        sub_10000BA6C();
      }
      unint64_t v11 = (char *)operator new(36 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    size_t v13 = &v11[36 * v7];
    size_t v14 = &v11[36 * v10];
    size_t v15 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v13, v15);
    for (uint64_t i = &v13[v15]; v5 != v6; *((_DWORD *)v13 + 8) = v5[8])
    {
      int v17 = *(v5 - 9);
      v5 -= 9;
      *((_DWORD *)v13 - 9) = v17;
      v13 -= 36;
      *((_DWORD *)v13 + 1) = v5[1];
      *((_DWORD *)v13 + 2) = v5[2];
      *((_DWORD *)v13 + 3) = v5[3];
      *((_DWORD *)v13 + 4) = v5[4];
      *((_DWORD *)v13 + 5) = v5[5];
      *((_DWORD *)v13 + 6) = v5[6];
      *((_DWORD *)v13 + 7) = v5[7];
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = v14;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1002A6E58(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555) {
      sub_10000B98C();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x555555555555555) {
        sub_10000BA6C();
      }
      unint64_t v11 = (char *)operator new(48 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    size_t v13 = &v11[48 * v7];
    size_t v14 = &v11[48 * v10];
    size_t v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    for (uint64_t i = &v13[v15]; v5 != v6; *((_DWORD *)v13 + 11) = v5[11])
    {
      int v17 = *(v5 - 12);
      v5 -= 12;
      *((_DWORD *)v13 - 12) = v17;
      v13 -= 48;
      *((_DWORD *)v13 + 1) = v5[1];
      *((_DWORD *)v13 + 2) = v5[2];
      *((_DWORD *)v13 + 3) = v5[3];
      *((_DWORD *)v13 + 4) = v5[4];
      *((_DWORD *)v13 + 5) = v5[5];
      *((_DWORD *)v13 + 6) = v5[6];
      *((_DWORD *)v13 + 7) = v5[7];
      *((_DWORD *)v13 + 8) = v5[8];
      *((_DWORD *)v13 + 9) = v5[9];
      *((_DWORD *)v13 + 10) = v5[10];
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = v14;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1002A7048(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 6)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 6);
      v5 += 16 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 6;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 58) {
      sub_10000B98C();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 5 > v8) {
      unint64_t v8 = v9 >> 5;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 58) {
        sub_10000BA6C();
      }
      unint64_t v11 = (char *)operator new(v10 << 6);
    }
    else
    {
      unint64_t v11 = 0;
    }
    size_t v12 = &v11[64 * v7];
    size_t v13 = a2 << 6;
    size_t v14 = &v11[64 * v10];
    bzero(v12, v13);
    for (uint64_t i = &v12[v13]; v5 != v6; *((_DWORD *)v12 + 15) = v5[15])
    {
      int v16 = *(v5 - 16);
      v5 -= 16;
      *((_DWORD *)v12 - 16) = v16;
      v12 -= 64;
      *((_DWORD *)v12 + 1) = v5[1];
      *((_DWORD *)v12 + 2) = v5[2];
      *((_DWORD *)v12 + 3) = v5[3];
      *((_DWORD *)v12 + 4) = v5[4];
      *((_DWORD *)v12 + 5) = v5[5];
      *((_DWORD *)v12 + 6) = v5[6];
      *((_DWORD *)v12 + 7) = v5[7];
      *((_DWORD *)v12 + 8) = v5[8];
      *((_DWORD *)v12 + 9) = v5[9];
      *((_DWORD *)v12 + 10) = v5[10];
      *((_DWORD *)v12 + 11) = v5[11];
      *((_DWORD *)v12 + 12) = v5[12];
      *((_DWORD *)v12 + 13) = v5[13];
      *((_DWORD *)v12 + 14) = v5[14];
    }
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = v14;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1002A71EC(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  if (a2 <= (v4 - (uint64_t)v6) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 7);
      v6 += 32 * a2;
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(_DWORD **)a1;
    uint64_t v8 = ((uint64_t)v6 - *(void *)a1) >> 7;
    unint64_t v9 = v8 + a2;
    if ((v8 + a2) >> 57) {
      sub_10000B98C();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 6 > v9) {
      unint64_t v9 = v10 >> 6;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 57) {
        sub_10000BA6C();
      }
      size_t v12 = (char *)operator new(v11 << 7);
    }
    else
    {
      size_t v12 = 0;
    }
    size_t v13 = a2 << 7;
    size_t v14 = &v12[128 * v8];
    bzero(v14, v13);
    sub_1002A7350(v5, (uint64_t)v6, v6, (uint64_t)v7, v7, (uint64_t)v14, (uint64_t)v14);
    size_t v15 = *(_DWORD **)a1;
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = &v14[v13];
    *(void *)(a1 + 16) = &v12[128 * v11];
    if (v15)
    {
      operator delete(v15);
    }
  }
}

void sub_1002A7338(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A7350(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t result = a6;
  if (a3 != a5)
  {
    unint64_t v9 = (_DWORD *)(a7 - 64);
    do
    {
      int v10 = *(a3 - 32);
      a3 -= 32;
      *(v9 - 16) = v10;
      *(v9 - 15) = a3[1];
      *(v9 - 14) = a3[2];
      *(v9 - 13) = a3[3];
      *(v9 - 12) = a3[4];
      *(v9 - 11) = a3[5];
      *(v9 - 10) = a3[6];
      *(v9 - 9) = a3[7];
      *(v9 - 8) = a3[8];
      *(v9 - 7) = a3[9];
      *(v9 - 6) = a3[10];
      *(v9 - 5) = a3[11];
      *(v9 - 4) = a3[12];
      *(v9 - 3) = a3[13];
      *(v9 - 2) = a3[14];
      *(v9 - 1) = a3[15];
      _DWORD *v9 = a3[16];
      v9[1] = a3[17];
      _OWORD v9[2] = a3[18];
      v9[3] = a3[19];
      v9[4] = a3[20];
      v9[5] = a3[21];
      v9[6] = a3[22];
      v9[7] = a3[23];
      unsigned char v9[8] = a3[24];
      v9[9] = a3[25];
      v9[10] = a3[26];
      v9[11] = a3[27];
      v9[12] = a3[28];
      v9[13] = a3[29];
      v9[14] = a3[30];
      v9[15] = a3[31];
      v9 -= 32;
      v7 -= 128;
    }
    while (a3 != a5);
  }
  return result;
}

void sub_1002A7478(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 8)
  {
    if (a2)
    {
      unint64_t v12 = a2 << 8;
      bzero(*(void **)(a1 + 8), a2 << 8);
      uint64_t v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_DWORD **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 8;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 56) {
      sub_10000B98C();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 7 > v8) {
      unint64_t v8 = v9 >> 7;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF00) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (HIBYTE(v10)) {
        sub_10000BA6C();
      }
      unint64_t v11 = (char *)operator new(v10 << 8);
    }
    else
    {
      unint64_t v11 = 0;
    }
    size_t v13 = &v11[256 * v7];
    size_t v14 = a2 << 8;
    size_t v15 = &v11[256 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v13 -= 256;
        v5 -= 64;
        sub_1002A75B4(v13, v5);
      }
      while (v5 != v6);
      uint64_t v5 = *(_DWORD **)a1;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

_DWORD *sub_1002A75B4(_DWORD *result, _DWORD *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  result[8] = a2[8];
  result[9] = a2[9];
  result[10] = a2[10];
  result[11] = a2[11];
  result[12] = a2[12];
  result[13] = a2[13];
  result[14] = a2[14];
  result[15] = a2[15];
  result[16] = a2[16];
  result[17] = a2[17];
  result[18] = a2[18];
  result[19] = a2[19];
  result[20] = a2[20];
  result[21] = a2[21];
  result[22] = a2[22];
  result[23] = a2[23];
  result[24] = a2[24];
  result[25] = a2[25];
  result[26] = a2[26];
  result[27] = a2[27];
  result[28] = a2[28];
  result[29] = a2[29];
  result[30] = a2[30];
  result[31] = a2[31];
  result[32] = a2[32];
  result[33] = a2[33];
  result[34] = a2[34];
  result[35] = a2[35];
  result[36] = a2[36];
  result[37] = a2[37];
  result[38] = a2[38];
  result[39] = a2[39];
  result[40] = a2[40];
  result[41] = a2[41];
  result[42] = a2[42];
  result[43] = a2[43];
  result[44] = a2[44];
  result[45] = a2[45];
  result[46] = a2[46];
  result[47] = a2[47];
  result[48] = a2[48];
  result[49] = a2[49];
  result[50] = a2[50];
  result[51] = a2[51];
  result[52] = a2[52];
  result[53] = a2[53];
  result[54] = a2[54];
  result[55] = a2[55];
  result[56] = a2[56];
  result[57] = a2[57];
  result[58] = a2[58];
  result[59] = a2[59];
  result[60] = a2[60];
  result[61] = a2[61];
  result[62] = a2[62];
  result[63] = a2[63];
  return result;
}

void sub_1002A77B8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 9)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2 << 9);
      v5 += 512 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(_OWORD **)a1;
    uint64_t v7 = (uint64_t)&v5[-*(void *)a1];
    unint64_t v8 = (v7 >> 9) + a2;
    if (v8 >> 55) {
      sub_10000B98C();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 8 > v8) {
      unint64_t v8 = v9 >> 8;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFE00) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 55) {
        sub_10000BA6C();
      }
      unint64_t v11 = (char *)operator new(v10 << 9);
    }
    else
    {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v11[512 * (v7 >> 9)];
    size_t v13 = a2 << 9;
    size_t v14 = &v11[512 * v10];
    bzero(v12, v13);
    size_t v15 = &v12[v13];
    if (v5 == (unsigned char *)v6)
    {
      uint64_t v34 = &v11[512 * (v7 >> 9)];
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v17 = &v11[v7] - v5;
      do
      {
        uint64_t v34 = v12 - 512;
        uint64_t v35 = v5 - 512;
        if (v17 > 0x1F)
        {
          long long v18 = *((_OWORD *)v5 - 31);
          *(_OWORD *)uint64_t v34 = *v35;
          *((_OWORD *)v12 - 31) = v18;
          long long v19 = *((_OWORD *)v5 - 29);
          *((_OWORD *)v12 - 30) = *((_OWORD *)v5 - 30);
          *((_OWORD *)v12 - 29) = v19;
          long long v20 = *((_OWORD *)v5 - 27);
          *((_OWORD *)v12 - 28) = *((_OWORD *)v5 - 28);
          *((_OWORD *)v12 - 27) = v20;
          long long v21 = *((_OWORD *)v5 - 25);
          *((_OWORD *)v12 - 26) = *((_OWORD *)v5 - 26);
          *((_OWORD *)v12 - 25) = v21;
          long long v22 = *((_OWORD *)v5 - 23);
          *((_OWORD *)v12 - 24) = *((_OWORD *)v5 - 24);
          *((_OWORD *)v12 - 23) = v22;
          long long v23 = *((_OWORD *)v5 - 21);
          *((_OWORD *)v12 - 22) = *((_OWORD *)v5 - 22);
          *((_OWORD *)v12 - 21) = v23;
          long long v24 = *((_OWORD *)v5 - 19);
          *((_OWORD *)v12 - 20) = *((_OWORD *)v5 - 20);
          *((_OWORD *)v12 - 19) = v24;
          long long v25 = *((_OWORD *)v5 - 17);
          *((_OWORD *)v12 - 18) = *((_OWORD *)v5 - 18);
          *((_OWORD *)v12 - 17) = v25;
          long long v26 = *((_OWORD *)v5 - 15);
          *((_OWORD *)v12 - 16) = *((_OWORD *)v5 - 16);
          *((_OWORD *)v12 - 15) = v26;
          long long v27 = *((_OWORD *)v5 - 13);
          *((_OWORD *)v12 - 14) = *((_OWORD *)v5 - 14);
          *((_OWORD *)v12 - 13) = v27;
          long long v28 = *((_OWORD *)v5 - 11);
          *((_OWORD *)v12 - 12) = *((_OWORD *)v5 - 12);
          *((_OWORD *)v12 - 11) = v28;
          long long v29 = *((_OWORD *)v5 - 9);
          *((_OWORD *)v12 - 10) = *((_OWORD *)v5 - 10);
          *((_OWORD *)v12 - 9) = v29;
          long long v30 = *((_OWORD *)v5 - 7);
          *((_OWORD *)v12 - 8) = *((_OWORD *)v5 - 8);
          *((_OWORD *)v12 - 7) = v30;
          long long v31 = *((_OWORD *)v5 - 5);
          *((_OWORD *)v12 - 6) = *((_OWORD *)v5 - 6);
          *((_OWORD *)v12 - 5) = v31;
          long long v32 = *((_OWORD *)v5 - 3);
          *((_OWORD *)v12 - 4) = *((_OWORD *)v5 - 4);
          *((_OWORD *)v12 - 3) = v32;
          long long v33 = *((_OWORD *)v5 - 1);
          *((_OWORD *)v12 - 2) = *((_OWORD *)v5 - 2);
          *((_OWORD *)v12 - 1) = v33;
        }
        else
        {
          uint64_t v36 = -512;
          do
          {
            *(_DWORD *)&v12[v36] = *(_DWORD *)&v5[v36];
            v36 += 4;
          }
          while (v36);
        }
        ++v16;
        v5 -= 512;
        v12 -= 512;
      }
      while (v35 != v6);
    }
    *(void *)a1 = v34;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v14;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_1002A79BC(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_10000B98C();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_10000BA6C();
      }
      size_t v13 = operator new(8 * v12);
    }
    else
    {
      size_t v13 = 0;
    }
    size_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      long long v21 = &v13[8 * v9 - 16];
      long long v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *long long v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_1002A7B6C(uint64_t a1, int a2, uint64_t a3, char a4)
{
  if (a2 >= 0x21)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 25), "0 <= _dims && _dims <= 32", 25);
    sub_1002D2278(-215, &v19, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 284);
  }
  if (*(_DWORD *)(a1 + 4) != a2)
  {
    uint64_t v8 = *(void **)(a1 + 72);
    if (v8 != (void *)(a1 + 80))
    {
      j__free(v8);
      *(void *)(a1 + 64) = a1 + 8;
      *(void *)(a1 + 72) = a1 + 80;
    }
    if (a2 >= 3)
    {
      uint64_t v9 = 8 * a2;
      unint64_t v10 = (char *)sub_10020FDF8(v9 + 4 * (a2 + 1));
      *(void *)(a1 + 72) = v10;
      *(_DWORD *)&v10[v9] = a2;
      *(void *)(a1 + 64) = &v10[v9 + 4];
      *(void *)(a1 + 8) = -1;
    }
  }
  *(_DWORD *)(a1 + 4) = a2;
  if (a3)
  {
    uint64_t v11 = (a2 - 1);
    if (a2 >= 1)
    {
      uint64_t v12 = (((*(_DWORD *)a1 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)a1 & 7))) & 3);
      uint64_t v18 = v12;
      if (a4)
      {
        do
        {
          int v14 = *(_DWORD *)(a3 + 4 * v11);
          if (v14 < 0)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            uint64_t v15 = sub_1002D19D8(&v19, 6);
            *(_DWORD *)uint64_t v15 = 1027481715;
            *(_WORD *)(v15 + 4) = 12320;
            sub_1002D2278(-215, &v19, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
          }
          *(_DWORD *)(*(void *)(a1 + 64) + 4 * v11) = v14;
          *(void *)(*(void *)(a1 + 72) + 8 * v11) = v12;
          v12 *= v14;
          BOOL v13 = v11-- <= 0;
        }
        while (!v13);
      }
      else
      {
        do
        {
          int v16 = *(_DWORD *)(a3 + 4 * v11);
          if (v16 < 0)
          {
            uint64_t v19 = 0;
            uint64_t v20 = 0;
            uint64_t v17 = sub_1002D19D8(&v19, 6);
            *(_DWORD *)uint64_t v17 = 1027481715;
            *(_WORD *)(v17 + 4) = 12320;
            sub_1002D2278(-215, &v19, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matrix.cpp", 310);
          }
          *(_DWORD *)(*(void *)(a1 + 64) + 4 * v11) = v16;
          BOOL v13 = v11-- <= 0;
        }
        while (!v13);
      }
      if (a2 == 1)
      {
        *(_DWORD *)(a1 + 4) = 2;
        *(_DWORD *)(a1 + 12) = 1;
        *(void *)(*(void *)(a1 + 72) + 8) = v18;
      }
    }
  }
}

void sub_1002A7DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A7E04()
{
  dword_1004E0A10 = 50331648;
  qword_1004E0A18 = 0;
  unk_1004E0A20 = 0;
  return __cxa_atexit((void (*)(void *))nullsub_16, &dword_1004E0A10, (void *)&_mh_execute_header);
}

uint64_t sub_1002A7E34(uint64_t a1, unint64_t a2, unsigned int a3, __n128 *a4, unint64_t a5, unsigned int a6)
{
  sub_1002D6AE8(v17, &off_1004960D8);
  uint64_t v15 = sub_1002A7EC8(a1, a2, a3, a4, a5, a6, v12, v13, v14);
  if (v18) {
    sub_1002D6888(v17);
  }
  return v15;
}

uint64_t sub_1002A7EC8(uint64_t a1, unint64_t a2, unsigned int a3, __n128 *a4, unint64_t a5, unsigned int a6, double a7, double a8, __n128 a9)
{
  if ((int)a3 < 1) {
    return 1;
  }
  uint64_t v119 = a3 - 1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = a2 >> 2;
  unint64_t v13 = a5 >> 2;
  unint64_t v14 = a3;
  if (a4) {
    BOOL v15 = (int)a6 < 1;
  }
  else {
    BOOL v15 = 1;
  }
  char v16 = v15;
  uint64_t v17 = 4 * a6;
  unint64_t v140 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v122 = (a5 & 0xFFFFFFFFFFFFFFFCLL) + v17;
  unint64_t v18 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v135 = v18 + 4;
  uint64_t v19 = 4 * a3;
  unint64_t v121 = v18 + v19;
  uint64_t v125 = (uint64_t)a4 + v17;
  uint64_t v144 = a6;
  uint64_t v129 = a6 & 0xFFFFFFF8;
  unint64_t v130 = v12;
  uint64_t v20 = (float *)(a1 + v18);
  uint64_t v21 = 4 * v13;
  uint64_t v134 = a3 - 1;
  BOOL v141 = (float32x4_t *)(a1 + 20);
  uint64_t v22 = v17 & 0x3FFFFFFE0;
  uint64_t v132 = (uint64_t)&a4[1] + 4 * v13;
  unint64_t v133 = a1 + 20 + v18;
  uint64_t v23 = 1;
  uint64_t v123 = a1 + v19;
  unint64_t v131 = a5 >> 2;
  long long v24 = a4 + 1;
  uint64_t v25 = (__n128 *)(a1 + 16);
  uint64_t v26 = a3;
  unsigned int v124 = 1;
  do
  {
    unint64_t v27 = v11 + 1;
    if (v11 + 1 >= v14)
    {
      int v30 = v11;
    }
    else
    {
      long long v28 = v20;
      uint64_t v29 = v23;
      int v30 = v11;
      do
      {
        if (fabsf(*v28) > fabsf(*(float *)(a1 + 4 * (v11 + v12 * v30)))) {
          int v30 = v29;
        }
        ++v29;
        long long v28 = (float *)((char *)v28 + v18);
      }
      while (v14 != v29);
    }
    uint64_t v31 = v12 * v30;
    uint64_t v32 = v31 + v11;
    if (fabsf(*(float *)(a1 + 4 * (v31 + v11))) < 0.0000011921) {
      return 0;
    }
    unint64_t v126 = v25;
    long long v127 = v20;
    unint64_t v33 = a1 + v135 * v11;
    unint64_t v143 = v123 + v18 * v11;
    unint64_t v34 = v140 * v11;
    unint64_t v137 = (unint64_t)a4->n128_u64 + v140 * v11;
    unint64_t v139 = v125 + v140 * v11;
    uint64_t v128 = v11 + 1;
    if (v11 != v30)
    {
      uint64_t v35 = v14 - v11;
      uint64_t v36 = v11;
      if (v14 - v11 < 8) {
        goto LABEL_25;
      }
      if (v33 < a1 + 4 * v35 + 4 * v32)
      {
        uint64_t v36 = v11;
        if (a1 + 4 * v32 < v143) {
          goto LABEL_25;
        }
      }
      unint64_t v37 = v26 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v36 = v11 + (v35 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v38 = (__n128 *)(a1 + 16 + 4 * (v11 + v31));
      uint64_t v39 = v25;
      do
      {
        __n128 v40 = v39[-1];
        a9 = *v39;
        __n128 v41 = *v38;
        v39[-1] = v38[-1];
        *uint64_t v39 = v41;
        v38[-1] = v40;
        *uint64_t v38 = a9;
        v39 += 2;
        v38 += 2;
        v37 -= 8;
      }
      while (v37);
      unint64_t v27 = v11 + 1;
      if (v35 != (v35 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_25:
        uint64_t v42 = (int *)(a1 + 4 * (v36 + v31));
        uint64_t v43 = (int *)(a1 + 4 * (v36 + v10));
        uint64_t v44 = v14 - v36;
        do
        {
          int v45 = *v43;
          *v43++ = *v42;
          *v42++ = v45;
          --v44;
        }
        while (v44);
      }
      if (v16) {
        goto LABEL_41;
      }
      if (a6 >= 8
        && (v137 < v125 + v140 * v30 ? (BOOL v46 = (unint64_t)a4->n128_u64 + v140 * v30 >= v139) : (BOOL v46 = 1), v46))
      {
        long long v47 = (__n128 *)((char *)a4 + v21 * v30 + 16);
        uint64_t v48 = v129;
        long long v49 = v24;
        do
        {
          __n128 v50 = v49[-1];
          a9 = *v49;
          __n128 v51 = *v47;
          v49[-1] = v47[-1];
          __n128 *v49 = v51;
          v47[-1] = v50;
          *long long v47 = a9;
          v49 += 2;
          v47 += 2;
          v48 -= 8;
        }
        while (v48);
        uint64_t v52 = v129;
        if (v129 == v144) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v52 = 0;
      }
      uint64_t v53 = (int *)a4 + v52 + v13 * v30;
      long long v54 = (int *)a4 + v52 + v9;
      uint64_t v55 = v144 - v52;
      do
      {
        int v56 = *v54;
        *v54++ = *v53;
        *v53++ = v56;
        --v55;
      }
      while (v55);
LABEL_41:
      unsigned int v124 = -v124;
    }
    if (v27 < v14)
    {
      uint64_t v57 = 0;
      unint64_t v58 = ~v11 + v14;
      unint64_t v59 = v33 + 4;
      unint64_t v138 = v140 + v34;
      unint64_t v136 = v122 + v34;
      unint64_t v61 = v131;
      uint64_t v60 = v132;
      float v62 = -1.0 / *(float *)(a1 + 4 * (v11 + v12 * v11));
      unint64_t v63 = v130;
      uint64_t v64 = (float32x4_t *)v133;
      uint64_t v65 = v23;
      do
      {
        a9.n128_f32[0] = v62 * *(float *)(a1 + 4 * (v11 + v12 * v65));
        uint64_t v66 = v23;
        if (v58 < 8) {
          goto LABEL_54;
        }
        BOOL v67 = a1 + v135 + v135 * v11 + v18 * v57 >= v143 || v59 >= a1 + v121 + v18 * v11 + v18 * v57;
        uint64_t v66 = v23;
        if (!v67) {
          goto LABEL_54;
        }
        float32x4_t v68 = (float32x4_t)vdupq_lane_s32((int32x2_t)a9.n128_u64[0], 0);
        uint64_t v69 = v141;
        long long v70 = v64;
        unint64_t v71 = v134 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float32x4_t v72 = vmlaq_f32(*v70, *v69, v68);
          v70[-1] = vmlaq_f32(v70[-1], v69[-1], v68);
          float32x4_t *v70 = v72;
          v70 += 2;
          v69 += 2;
          v71 -= 8;
        }
        while (v71);
        uint64_t v66 = v23 + (v58 & 0xFFFFFFFFFFFFFFF8);
        if (v58 != (v58 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_54:
          uint64_t v73 = (float *)(a1 + 4 * (v66 + v63));
          uint64_t v74 = (float *)(a1 + 4 * (v10 + v66));
          unint64_t v75 = v14 - v66;
          do
          {
            float v76 = *v74++;
            float *v73 = *v73 + (float)(a9.n128_f32[0] * v76);
            ++v73;
            --v75;
          }
          while (v75);
        }
        if (v16) {
          goto LABEL_44;
        }
        if (a6 >= 8
          && ((unint64_t)a4->n128_u64 + v138 + v140 * v57 >= v139
           || v137 >= (unint64_t)a4->n128_u64 + v136 + v140 * v57))
        {
          unint64_t v82 = 0;
          float32x4_t v83 = (float32x4_t)vdupq_lane_s32((int32x2_t)a9.n128_u64[0], 0);
          do
          {
            uint64_t v84 = (float32x4_t *)(v60 + v82);
            float32x4_t v85 = vmlaq_f32(*(float32x4_t *)(v60 + v82), (float32x4_t)v24[v82 / 0x10], v83);
            v84[-1] = vmlaq_f32(*(float32x4_t *)(v60 + v82 - 16), (float32x4_t)v24[v82 / 0x10 - 1], v83);
            *uint64_t v84 = v85;
            v82 += 32;
          }
          while (v22 != v82);
          uint64_t v77 = v129;
          if (v129 == v144) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v77 = 0;
        }
        unint64_t v78 = (float *)a4 + v77 + v61;
        uint64_t v79 = (float *)a4 + v9 + v77;
        uint64_t v80 = v144 - v77;
        do
        {
          float v81 = *v79++;
          *unint64_t v78 = *v78 + (float)(a9.n128_f32[0] * v81);
          ++v78;
          --v80;
        }
        while (v80);
LABEL_44:
        ++v65;
        ++v57;
        uint64_t v64 = (float32x4_t *)((char *)v64 + v18);
        v63 += v12;
        v60 += v21;
        v61 += v13;
      }
      while (v65 != v14);
    }
    ++v23;
    uint64_t v20 = (float *)((char *)v127 + v135);
    --v26;
    uint64_t v25 = (__n128 *)((char *)v126 + v135);
    v10 += v12;
    long long v24 = (__n128 *)((char *)v24 + v21);
    v9 += v13;
    --v134;
    v133 += v135;
    BOOL v141 = (float32x4_t *)((char *)v141 + v135);
    v130 += v12;
    v132 += v21;
    v131 += v13;
    ++v11;
  }
  while (v128 != v14);
  if (a4 && (int)a6 >= 1)
  {
    uint64_t v87 = 0;
    unint64_t v88 = v12 + 1;
    uint64_t v89 = v119;
    uint64_t v90 = v13 * v119;
    uint64_t v91 = 4 * v13 * v119;
    uint64_t v92 = -4 * v13;
    uint64_t v93 = 4 * (v12 + 1) * v119;
    unint64_t v94 = v18 ^ 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v95 = v93 + 4;
    uint64_t v96 = (uint64_t)&a4[1] + v91;
    uint64_t v97 = a1 + 4 * v12 * v119 + 4 * v14;
    uint64_t v98 = 4 * ~v12;
    long long v99 = (float *)a4 + v13 * v14;
    uint64_t v100 = (uint64_t)a4 + v91;
    uint64_t v101 = a1 + v93;
    uint64_t v102 = a1 + v95;
    do
    {
      uint64_t v103 = v88 * v89;
      if ((int)v14 < (int)a3)
      {
        uint64_t v104 = 0;
        uint64_t v105 = v13 * v89;
        uint64_t v106 = v99;
        do
        {
          uint64_t v107 = 0;
          float v108 = a4->n128_f32[v105 + v104];
          uint64_t v109 = v106;
          do
          {
            float v108 = v108 - (float)(*(float *)(v97 + 4 * v107++) * *v109);
            uint64_t v109 = (float *)((char *)v109 + v21);
          }
          while (v87 != v107);
          a4->n128_f32[v105 + v104++] = v108 / *(float *)(a1 + 4 * v103);
          ++v106;
        }
        while (v104 != v144);
        goto LABEL_73;
      }
      if (a6 >= 8
        && (v100 + v92 * v87 < v102 + v94 * v87
          ? (BOOL v110 = v101 + v94 * v87 >= (unint64_t)a4->n128_u64 + 4 * v13 * v119 + 4 * v144 + v92 * v87)
          : (BOOL v110 = 1),
            v110))
      {
        uint64_t v111 = (const float *)(a1 + 4 * v103);
        float32x4_t v112 = vld1q_dup_f32(v111);
        uint64_t v113 = v129;
        unint64_t v114 = (float32x4_t *)v96;
        do
        {
          float32x4_t v115 = vdivq_f32(*v114, v112);
          v114[-1] = vdivq_f32(v114[-1], v112);
          float32x4_t *v114 = v115;
          v114 += 2;
          v113 -= 8;
        }
        while (v113);
        uint64_t v116 = v129;
        if (v129 == v144) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v116 = 0;
      }
      uint64_t v117 = (float *)a4 + v116 + v90;
      uint64_t v118 = v144 - v116;
      do
      {
        *uint64_t v117 = *v117 / *(float *)(a1 + 4 * v103);
        ++v117;
        --v118;
      }
      while (v118);
LABEL_73:
      LODWORD(v14) = v14 - 1;
      ++v87;
      v96 -= v21;
      v90 -= v13;
      v97 += v98;
      long long v99 = (float *)((char *)v99 - v21);
      BOOL v15 = v89-- <= 0;
    }
    while (!v15);
  }
  return v124;
}

uint64_t sub_1002A8660(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  sub_1002D6AE8(v14, &off_1004960F8);
  uint64_t v12 = sub_1002A86F4(a1, a2, a3, a4, a5, a6);
  if (v15) {
    sub_1002D6888(v14);
  }
  return v12;
}

uint64_t sub_1002A86F4(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  if ((int)a3 < 1) {
    return 1;
  }
  uint64_t v119 = a3 - 1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = a2 >> 3;
  unint64_t v10 = a5 >> 3;
  unint64_t v11 = a3;
  if (a4) {
    BOOL v12 = (int)a6 < 1;
  }
  else {
    BOOL v12 = 1;
  }
  char v13 = v12;
  uint64_t v14 = 8 * a6;
  unint64_t v140 = a5 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v122 = (a5 & 0xFFFFFFFFFFFFFFF8) + v14;
  unint64_t v15 = a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v135 = v15 + 8;
  uint64_t v16 = 8 * a3;
  unint64_t v121 = v15 + v16;
  uint64_t v125 = a4 + v14;
  uint64_t v144 = a6;
  uint64_t v129 = a6 & 0xFFFFFFFC;
  unint64_t v130 = v9;
  uint64_t v17 = (double *)(a1 + v15);
  uint64_t v18 = 8 * v10;
  uint64_t v134 = a3 - 1;
  BOOL v141 = (float64x2_t *)(a1 + 24);
  uint64_t v19 = v14 & 0x7FFFFFFE0;
  uint64_t v132 = a4 + 16 + 8 * v10;
  unint64_t v133 = a1 + 24 + v15;
  uint64_t v20 = 1;
  uint64_t v123 = a1 + v16;
  unint64_t v131 = a5 >> 3;
  uint64_t v21 = (long long *)(a4 + 16);
  uint64_t v22 = (_OWORD *)(a1 + 16);
  uint64_t v23 = a3;
  unsigned int v124 = 1;
  do
  {
    unint64_t v24 = v8 + 1;
    if (v8 + 1 >= v11)
    {
      int v27 = v8;
    }
    else
    {
      uint64_t v25 = v17;
      uint64_t v26 = v20;
      int v27 = v8;
      do
      {
        if (fabs(*v25) > fabs(*(double *)(a1 + 8 * (v8 + v9 * v27)))) {
          int v27 = v26;
        }
        ++v26;
        uint64_t v25 = (double *)((char *)v25 + v15);
      }
      while (v11 != v26);
    }
    uint64_t v28 = v9 * v27;
    uint64_t v29 = v28 + v8;
    if (fabs(*(double *)(a1 + 8 * (v28 + v8))) < 2.22044605e-14) {
      return 0;
    }
    unint64_t v126 = v22;
    long long v127 = v17;
    unint64_t v30 = a1 + v135 * v8;
    unint64_t v143 = v123 + v15 * v8;
    unint64_t v31 = v140 * v8;
    unint64_t v137 = a4 + v140 * v8;
    unint64_t v139 = v125 + v140 * v8;
    uint64_t v128 = v8 + 1;
    if (v8 != v27)
    {
      uint64_t v32 = v11 - v8;
      uint64_t v33 = v8;
      if (v11 - v8 < 6) {
        goto LABEL_25;
      }
      if (v30 < a1 + 8 * v32 + 8 * v29)
      {
        uint64_t v33 = v8;
        if (a1 + 8 * v29 < v143) {
          goto LABEL_25;
        }
      }
      unint64_t v34 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v33 = v8 + (v32 & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v35 = (long long *)(a1 + 16 + 8 * (v8 + v28));
      uint64_t v36 = v22;
      do
      {
        long long v37 = *(v36 - 1);
        long long v38 = *v36;
        long long v39 = *v35;
        *(v36 - 1) = *(v35 - 1);
        *uint64_t v36 = v39;
        *(v35 - 1) = v37;
        *uint64_t v35 = v38;
        v36 += 2;
        v35 += 2;
        v34 -= 4;
      }
      while (v34);
      unint64_t v24 = v8 + 1;
      if (v32 != (v32 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        __n128 v40 = (uint64_t *)(a1 + 8 * (v33 + v28));
        __n128 v41 = (uint64_t *)(a1 + 8 * (v33 + v7));
        uint64_t v42 = v11 - v33;
        do
        {
          uint64_t v43 = *v41;
          *v41++ = *v40;
          *v40++ = v43;
          --v42;
        }
        while (v42);
      }
      if (v13) {
        goto LABEL_41;
      }
      if (a6 >= 4 && (v137 < v125 + v140 * v27 ? (BOOL v44 = a4 + v140 * v27 >= v139) : (BOOL v44 = 1), v44))
      {
        int v45 = (long long *)(a4 + 16 + v18 * v27);
        uint64_t v46 = v129;
        long long v47 = v21;
        do
        {
          long long v48 = *(v47 - 1);
          long long v49 = *v47;
          long long v50 = *v45;
          *(v47 - 1) = *(v45 - 1);
          *long long v47 = v50;
          *(v45 - 1) = v48;
          *int v45 = v49;
          v47 += 2;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        uint64_t v51 = v129;
        if (v129 == v144) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v51 = 0;
      }
      uint64_t v52 = (uint64_t *)(a4 + 8 * (v51 + v10 * v27));
      uint64_t v53 = (uint64_t *)(a4 + 8 * (v51 + v6));
      uint64_t v54 = v144 - v51;
      do
      {
        uint64_t v55 = *v53;
        *v53++ = *v52;
        *v52++ = v55;
        --v54;
      }
      while (v54);
LABEL_41:
      unsigned int v124 = -v124;
    }
    if (v24 < v11)
    {
      uint64_t v56 = 0;
      unint64_t v57 = ~v8 + v11;
      unint64_t v58 = v30 + 8;
      unint64_t v138 = v140 + v31;
      unint64_t v136 = v122 + v31;
      unint64_t v60 = v131;
      uint64_t v59 = v132;
      double v61 = -1.0 / *(double *)(a1 + 8 * (v8 + v9 * v8));
      unint64_t v62 = v130;
      unint64_t v63 = (float64x2_t *)v133;
      uint64_t v64 = v20;
      do
      {
        double v65 = v61 * *(double *)(a1 + 8 * (v8 + v9 * v64));
        uint64_t v66 = v20;
        if (v57 < 4) {
          goto LABEL_54;
        }
        BOOL v67 = a1 + v135 + v135 * v8 + v15 * v56 >= v143 || v58 >= a1 + v121 + v15 * v8 + v15 * v56;
        uint64_t v66 = v20;
        if (!v67) {
          goto LABEL_54;
        }
        float64x2_t v68 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0);
        uint64_t v69 = v141;
        long long v70 = v63;
        unint64_t v71 = v134 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v72 = vmlaq_f64(*v70, *v69, v68);
          v70[-1] = vmlaq_f64(v70[-1], v69[-1], v68);
          float64x2_t *v70 = v72;
          v70 += 2;
          v69 += 2;
          v71 -= 4;
        }
        while (v71);
        uint64_t v66 = v20 + (v57 & 0xFFFFFFFFFFFFFFFCLL);
        if (v57 != (v57 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_54:
          uint64_t v73 = (double *)(a1 + 8 * (v66 + v62));
          uint64_t v74 = (double *)(a1 + 8 * (v7 + v66));
          unint64_t v75 = v11 - v66;
          do
          {
            double v76 = *v74++;
            double *v73 = *v73 + v65 * v76;
            ++v73;
            --v75;
          }
          while (v75);
        }
        if (v13) {
          goto LABEL_44;
        }
        if (a6 >= 4 && (a4 + v138 + v140 * v56 >= v139 || v137 >= a4 + v136 + v140 * v56))
        {
          unint64_t v82 = 0;
          float64x2_t v83 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0);
          do
          {
            uint64_t v84 = (float64x2_t *)(v59 + v82);
            float64x2_t v85 = vmlaq_f64(*(float64x2_t *)(v59 + v82), (float64x2_t)v21[v82 / 0x10], v83);
            v84[-1] = vmlaq_f64(*(float64x2_t *)(v59 + v82 - 16), (float64x2_t)v21[v82 / 0x10 - 1], v83);
            *uint64_t v84 = v85;
            v82 += 32;
          }
          while (v19 != v82);
          uint64_t v77 = v129;
          if (v129 == v144) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v77 = 0;
        }
        unint64_t v78 = (double *)(a4 + 8 * (v77 + v60));
        uint64_t v79 = (double *)(a4 + 8 * (v6 + v77));
        uint64_t v80 = v144 - v77;
        do
        {
          double v81 = *v79++;
          *unint64_t v78 = *v78 + v65 * v81;
          ++v78;
          --v80;
        }
        while (v80);
LABEL_44:
        ++v64;
        ++v56;
        unint64_t v63 = (float64x2_t *)((char *)v63 + v15);
        v62 += v9;
        v59 += v18;
        v60 += v10;
      }
      while (v64 != v11);
    }
    ++v20;
    uint64_t v17 = (double *)((char *)v127 + v135);
    --v23;
    uint64_t v22 = (_OWORD *)((char *)v126 + v135);
    v7 += v9;
    uint64_t v21 = (long long *)((char *)v21 + v18);
    v6 += v10;
    --v134;
    v133 += v135;
    BOOL v141 = (float64x2_t *)((char *)v141 + v135);
    v130 += v9;
    v132 += v18;
    v131 += v10;
    ++v8;
  }
  while (v128 != v11);
  if (a4 && (int)a6 >= 1)
  {
    uint64_t v87 = 0;
    unint64_t v88 = v9 + 1;
    uint64_t v89 = v119;
    uint64_t v90 = v10 * v119;
    uint64_t v91 = 8 * v10 * v119;
    uint64_t v92 = -8 * v10;
    uint64_t v93 = 8 * (v9 + 1) * v119;
    unint64_t v94 = v15 ^ 0xFFFFFFFFFFFFFFF8;
    uint64_t v95 = v93 + 8;
    uint64_t v96 = v91 + a4 + 16;
    uint64_t v97 = a1 + 8 * v9 * v119 + 8 * v11;
    uint64_t v98 = 8 * ~v9;
    long long v99 = (double *)(a4 + 8 * v10 * v11);
    uint64_t v100 = a4 + v91;
    uint64_t v101 = a1 + v93;
    uint64_t v102 = a1 + v95;
    do
    {
      uint64_t v103 = v88 * v89;
      if ((int)v11 < (int)a3)
      {
        uint64_t v104 = 0;
        uint64_t v105 = v10 * v89;
        uint64_t v106 = v99;
        do
        {
          uint64_t v107 = 0;
          double v108 = *(double *)(a4 + 8 * (v105 + v104));
          uint64_t v109 = v106;
          do
          {
            double v108 = v108 - *(double *)(v97 + 8 * v107++) * *v109;
            uint64_t v109 = (double *)((char *)v109 + v18);
          }
          while (v87 != v107);
          *(double *)(a4 + 8 * (v105 + v104++)) = v108 / *(double *)(a1 + 8 * v103);
          ++v106;
        }
        while (v104 != v144);
        goto LABEL_73;
      }
      if (a6 >= 4
        && (v100 + v92 * v87 < v102 + v94 * v87
          ? (BOOL v110 = v101 + v94 * v87 >= a4 + 8 * (v10 * v119 + v144) + v92 * v87)
          : (BOOL v110 = 1),
            v110))
      {
        uint64_t v111 = (const double *)(a1 + 8 * v103);
        float64x2_t v112 = vld1q_dup_f64(v111);
        uint64_t v113 = v129;
        unint64_t v114 = (float64x2_t *)v96;
        do
        {
          float64x2_t v115 = vdivq_f64(*v114, v112);
          v114[-1] = vdivq_f64(v114[-1], v112);
          float64x2_t *v114 = v115;
          v114 += 2;
          v113 -= 4;
        }
        while (v113);
        uint64_t v116 = v129;
        if (v129 == v144) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v116 = 0;
      }
      uint64_t v117 = (double *)(a4 + 8 * (v116 + v90));
      uint64_t v118 = v144 - v116;
      do
      {
        *uint64_t v117 = *v117 / *(double *)(a1 + 8 * v103);
        ++v117;
        --v118;
      }
      while (v118);
LABEL_73:
      LODWORD(v11) = v11 - 1;
      ++v87;
      v96 -= v18;
      v90 -= v10;
      v97 += v98;
      long long v99 = (double *)((char *)v99 - v18);
      BOOL v12 = v89-- <= 0;
    }
    while (!v12);
  }
  return v124;
}

BOOL sub_1002A8E8C(float *a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  sub_1002D6AE8(v14, &off_100496118);
  BOOL v12 = sub_1002A8F20(a1, a2, a3, a4, a5, a6);
  if (v15) {
    sub_1002D6888(v14);
  }
  return v12;
}

BOOL sub_1002A8F20(float *a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6 = a2 >> 2;
  if (a3 < 1)
  {
    BOOL v8 = 1;
    if (a4) {
      goto LABEL_22;
    }
LABEL_47:
    if (a3 >= 1)
    {
      uint64_t v60 = a3;
      uint64_t v61 = 4 * v6 + 4;
      do
      {
        *a1 = 1.0 / *a1;
        a1 = (float *)((char *)a1 + v61);
        --v60;
      }
      while (v60);
    }
    return v8;
  }
  unint64_t v7 = 0;
  BOOL v8 = 0;
  uint64_t v9 = 4 * v6;
  unint64_t v10 = (float32x4_t *)(a1 + 4);
  unint64_t v11 = a1;
  do
  {
    unint64_t v12 = v6 * v7;
    if (v7)
    {
      uint64_t v13 = 0;
      unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFF8;
      int v15 = a1;
      do
      {
        double v17 = a1[v12 + v13];
        if (v13)
        {
          for (uint64_t i = 0; i != v13; ++i)
            double v17 = v17 - (float)(v11[i] * v15[i]);
        }
        float v16 = v17 * a1[(v6 + 1) * v13];
        a1[v12 + v13++] = v16;
        int v15 = (float *)((char *)v15 + v9);
      }
      while (v13 != v7);
      uint64_t v19 = &a1[v12 + v7];
      double v20 = *v19;
      if (v7)
      {
        if (v7 < 8)
        {
          uint64_t v21 = 0;
          goto LABEL_17;
        }
        uint64_t v21 = v7 & 0x7FFFFFFFFFFFFFF8;
        uint64_t v22 = v10;
        do
        {
          float32x4_t v23 = v22[-1];
          float64x2_t v24 = vcvt_hight_f64_f32(v23);
          float64x2_t v25 = vcvtq_f64_f32(*(float32x2_t *)v23.f32);
          float64x2_t v26 = vcvt_hight_f64_f32(*v22);
          float64x2_t v27 = vcvtq_f64_f32(*(float32x2_t *)v22->f32);
          float64x2_t v28 = vmulq_f64(vnegq_f64(v24), v24);
          float64x2_t v29 = vmulq_f64(vnegq_f64(v25), v25);
          float64x2_t v30 = vmulq_f64(vnegq_f64(v26), v26);
          float64x2_t v31 = vmulq_f64(vnegq_f64(v27), v27);
          double v20 = v20
              + v29.f64[0]
              + v29.f64[1]
              + v28.f64[0]
              + v28.f64[1]
              + v31.f64[0]
              + v31.f64[1]
              + v30.f64[0]
              + v30.f64[1];
          v22 += 2;
          v14 -= 8;
        }
        while (v14);
        while (v7 != v21)
        {
LABEL_17:
          double v20 = v20 - v11[v21] * v11[v21];
          ++v21;
        }
      }
    }
    else
    {
      uint64_t v19 = &a1[v12];
      double v20 = *v19;
    }
    if (v20 < 0.00000011920929) {
      return v8;
    }
    float v32 = 1.0 / sqrt(v20);
    float *v19 = v32;
    ++v7;
    unint64_t v11 = (float *)((char *)v11 + v9);
    unint64_t v10 = (float32x4_t *)((char *)v10 + v9);
    BOOL v8 = v7 >= a3;
  }
  while (v7 != a3);
  if (!a4) {
    goto LABEL_47;
  }
LABEL_22:
  uint64_t v33 = (a3 - 1);
  if (a3 >= 1)
  {
    if ((int)a6 >= 1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      unint64_t v36 = a5 >> 2;
      unint64_t v37 = v6 + 1;
      unint64_t v38 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v39 = a6 & 0xFFFFFFF8;
      uint64_t v40 = 4 * (a5 >> 2);
      __n128 v41 = (float32x4_t *)(a4 + 16);
      uint64_t v42 = a1;
      while (1)
      {
        uint64_t v43 = v37 * v35;
        if (v35)
        {
          uint64_t v44 = 0;
          uint64_t v45 = v36 * v35;
          uint64_t v46 = (float *)a4;
          do
          {
            uint64_t v47 = 0;
            double v48 = *(float *)(a4 + 4 * (v45 + v44));
            long long v49 = v46;
            do
            {
              double v48 = v48 - (float)(v42[v47++] * *v49);
              long long v49 = (float *)((char *)v49 + v40);
            }
            while (v35 != v47);
            float v50 = v48 * a1[v43];
            *(float *)(a4 + 4 * (v45 + v44++)) = v50;
            ++v46;
          }
          while (v44 != a6);
          goto LABEL_25;
        }
        if (a6 >= 8
          && (a4 < (unint64_t)(a1 + 1) ? (BOOL v51 = (unint64_t)a1 >= a4 + 4 * a6) : (BOOL v51 = 1), v51))
        {
          uint64_t v52 = &a1[v43];
          float32x4_t v53 = vld1q_dup_f32(v52);
          uint64_t v54 = a6 & 0xFFFFFFF8;
          uint64_t v55 = v41;
          do
          {
            float32x4_t v56 = vmulq_f32(*v55, v53);
            v55[-1] = vmulq_f32(v55[-1], v53);
            *uint64_t v55 = v56;
            v55 += 2;
            v54 -= 8;
          }
          while (v54);
          uint64_t v57 = a6 & 0xFFFFFFF8;
          if (v39 == a6) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v57 = 0;
        }
        unint64_t v58 = (float *)(a4 + 4 * (v57 + v34));
        uint64_t v59 = a6 - v57;
        do
        {
          *unint64_t v58 = *v58 * a1[v43];
          ++v58;
          --v59;
        }
        while (v59);
LABEL_25:
        ++v35;
        uint64_t v42 = (float *)((char *)v42 + v38);
        __n128 v41 = (float32x4_t *)((char *)v41 + v40);
        v34 += v36;
        if (v35 == a3)
        {
          uint64_t v62 = 0;
          uint64_t v63 = v36 * v33;
          uint64_t v64 = 4 * v36 * v33;
          uint64_t v65 = -4 * v36;
          uint64_t v66 = v37 * v33;
          unint64_t v67 = v38 ^ 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v68 = v66 * 4 + 4;
          uint64_t v69 = v64 + a4 + 16;
          unint64_t v70 = a4 + v64;
          unint64_t v71 = &a1[v66];
          float64x2_t v72 = (char *)a1 + v68;
          uint64_t v73 = (a3 - 1);
          while (1)
          {
            uint64_t v75 = v37 * v73;
            if (v73 < v33)
            {
              uint64_t v76 = 0;
              uint64_t v77 = v36 * v73;
              do
              {
                double v78 = *(float *)(a4 + 4 * (v77 + v76));
                uint64_t v79 = a3 - 2 + 1;
                do
                {
                  double v78 = v78
                      - (float)(a1[v73 + v6 * v79] * *(float *)(a4 + 4 * (v76 + v36 * v79)));
                  --v79;
                }
                while (v73 < v79);
                float v80 = v78 * a1[v75];
                *(float *)(a4 + 4 * (v77 + v76++)) = v80;
              }
              while (v76 != a6);
              goto LABEL_52;
            }
            if (a6 >= 8
              && (v70 + v65 * v62 < (unint64_t)&v72[v67 * v62]
                ? (BOOL v81 = (unint64_t)v71 + v67 * v62 >= a4 + 4 * (v36 * v33 + a6) + v65 * v62)
                : (BOOL v81 = 1),
                  v81))
            {
              unint64_t v82 = &a1[v75];
              float32x4_t v83 = vld1q_dup_f32(v82);
              uint64_t v84 = a6 & 0xFFFFFFF8;
              float64x2_t v85 = (float32x4_t *)v69;
              do
              {
                float32x4_t v86 = vmulq_f32(*v85, v83);
                v85[-1] = vmulq_f32(v85[-1], v83);
                float32x4_t *v85 = v86;
                v85 += 2;
                v84 -= 8;
              }
              while (v84);
              uint64_t v87 = a6 & 0xFFFFFFF8;
              if (v39 == a6) {
                goto LABEL_52;
              }
            }
            else
            {
              uint64_t v87 = 0;
            }
            unint64_t v88 = (float *)(a4 + 4 * (v87 + v63));
            uint64_t v89 = a6 - v87;
            do
            {
              *unint64_t v88 = *v88 * a1[v75];
              ++v88;
              --v89;
            }
            while (v89);
LABEL_52:
            ++v62;
            v69 -= 4 * v36;
            v63 -= v36;
            if (v73-- <= 0) {
              goto LABEL_73;
            }
          }
        }
      }
    }
LABEL_73:
    uint64_t v90 = a3;
    uint64_t v91 = 4 * v6 + 4;
    do
    {
      *a1 = 1.0 / *a1;
      a1 = (float *)((char *)a1 + v91);
      --v90;
    }
    while (v90);
  }
  return v8;
}

BOOL sub_1002A9454(double *a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  sub_1002D6AE8(v14, &off_100496138);
  BOOL v12 = sub_1002A94E8(a1, a2, a3, a4, a5, a6);
  if (v15) {
    sub_1002D6888(v14);
  }
  return v12;
}

BOOL sub_1002A94E8(double *a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6 = a2 >> 3;
  if (a3 < 1)
  {
    BOOL v8 = 1;
    if (a4) {
      goto LABEL_23;
    }
LABEL_48:
    if (a3 >= 1)
    {
      uint64_t v52 = a3;
      uint64_t v53 = 8 * v6 + 8;
      do
      {
        *a1 = 1.0 / *a1;
        a1 = (double *)((char *)a1 + v53);
        --v52;
      }
      while (v52);
    }
    return v8;
  }
  unint64_t v7 = 0;
  BOOL v8 = 0;
  uint64_t v9 = 8 * v6;
  unint64_t v10 = a1;
  unint64_t v11 = (float64x2_t *)(a1 + 2);
  do
  {
    unint64_t v12 = v6 * v7;
    if (v7)
    {
      unint64_t v13 = 0;
      unint64_t v14 = a1;
      int v15 = (float64x2_t *)(a1 + 2);
      do
      {
        double v16 = a1[v12 + v13];
        if (v13)
        {
          if (v13 < 4)
          {
            uint64_t v17 = 0;
            goto LABEL_12;
          }
          unint64_t v18 = v13 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v17 = v13 & 0x7FFFFFFFFFFFFFFCLL;
          uint64_t v19 = v15;
          double v20 = v11;
          do
          {
            float64x2_t v21 = vmulq_f64(v19[-1], vnegq_f64(v20[-1]));
            float64x2_t v22 = vmulq_f64(*v19, vnegq_f64(*v20));
            double v16 = v16 + v21.f64[0] + v21.f64[1] + v22.f64[0] + v22.f64[1];
            v20 += 2;
            v19 += 2;
            v18 -= 4;
          }
          while (v18);
          while (v13 != v17)
          {
LABEL_12:
            double v16 = v16 - v10[v17] * v14[v17];
            ++v17;
          }
        }
        a1[v12 + v13] = v16 * a1[(v6 + 1) * v13];
        ++v13;
        int v15 = (float64x2_t *)((char *)v15 + v9);
        unint64_t v14 = (double *)((char *)v14 + v9);
      }
      while (v13 != v7);
      float32x4_t v23 = &a1[v12 + v7];
      double v24 = *v23;
      if (v7)
      {
        for (uint64_t i = 0; i != v7; ++i)
          double v24 = v24 - v10[i] * v10[i];
      }
      if (v24 < 2.22044605e-16) {
        return v8;
      }
    }
    else
    {
      float32x4_t v23 = &a1[v12];
      double v24 = *v23;
      if (*v23 < 2.22044605e-16) {
        return v8;
      }
    }
    double *v23 = 1.0 / sqrt(v24);
    ++v7;
    unint64_t v11 = (float64x2_t *)((char *)v11 + v9);
    unint64_t v10 = (double *)((char *)v10 + v9);
    BOOL v8 = v7 >= a3;
  }
  while (v7 != a3);
  if (!a4) {
    goto LABEL_48;
  }
LABEL_23:
  uint64_t v26 = (a3 - 1);
  if (a3 >= 1)
  {
    if ((int)a6 >= 1)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unint64_t v29 = a5 >> 3;
      unint64_t v30 = v6 + 1;
      unint64_t v31 = a2 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v32 = a6 & 0xFFFFFFFC;
      uint64_t v33 = 8 * (a5 >> 3);
      uint64_t v34 = (float64x2_t *)(a4 + 16);
      uint64_t v35 = a1;
      while (1)
      {
        uint64_t v36 = v30 * v28;
        if (v28)
        {
          uint64_t v37 = 0;
          uint64_t v38 = v29 * v28;
          uint64_t v39 = (double *)a4;
          do
          {
            uint64_t v40 = 0;
            double v41 = *(double *)(a4 + 8 * (v38 + v37));
            uint64_t v42 = v39;
            do
            {
              double v41 = v41 - v35[v40++] * *v42;
              uint64_t v42 = (double *)((char *)v42 + v33);
            }
            while (v28 != v40);
            *(double *)(a4 + 8 * (v38 + v37++)) = v41 * a1[v36];
            ++v39;
          }
          while (v37 != a6);
          goto LABEL_26;
        }
        if (a6 >= 4
          && (a4 < (unint64_t)(a1 + 1) ? (BOOL v43 = (unint64_t)a1 >= a4 + 8 * a6) : (BOOL v43 = 1), v43))
        {
          uint64_t v44 = &a1[v36];
          float64x2_t v45 = vld1q_dup_f64(v44);
          uint64_t v46 = a6 & 0xFFFFFFFC;
          uint64_t v47 = v34;
          do
          {
            float64x2_t v48 = vmulq_f64(*v47, v45);
            v47[-1] = vmulq_f64(v47[-1], v45);
            *uint64_t v47 = v48;
            v47 += 2;
            v46 -= 4;
          }
          while (v46);
          uint64_t v49 = a6 & 0xFFFFFFFC;
          if (v32 == a6) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v49 = 0;
        }
        float v50 = (double *)(a4 + 8 * (v49 + v27));
        uint64_t v51 = a6 - v49;
        do
        {
          double *v50 = *v50 * a1[v36];
          ++v50;
          --v51;
        }
        while (v51);
LABEL_26:
        ++v28;
        uint64_t v35 = (double *)((char *)v35 + v31);
        uint64_t v34 = (float64x2_t *)((char *)v34 + v33);
        v27 += v29;
        if (v28 == a3)
        {
          uint64_t v54 = 0;
          uint64_t v55 = v29 * v26;
          uint64_t v56 = 8 * v29 * v26;
          uint64_t v57 = -8 * v29;
          uint64_t v58 = v30 * v26;
          unint64_t v59 = v31 ^ 0xFFFFFFFFFFFFFFF8;
          uint64_t v60 = v58 * 8 + 8;
          uint64_t v61 = v56 + a4 + 16;
          unint64_t v62 = a4 + v56;
          uint64_t v63 = &a1[v58];
          uint64_t v64 = (char *)a1 + v60;
          uint64_t v65 = (a3 - 1);
          while (1)
          {
            uint64_t v67 = v30 * v65;
            if (v65 < v26)
            {
              uint64_t v68 = 0;
              uint64_t v69 = v29 * v65;
              do
              {
                double v70 = *(double *)(a4 + 8 * (v69 + v68));
                uint64_t v71 = a3 - 2 + 1;
                do
                {
                  double v70 = v70 - a1[v65 + v6 * v71] * *(double *)(a4 + 8 * (v68 + v29 * v71));
                  --v71;
                }
                while (v65 < v71);
                *(double *)(a4 + 8 * (v69 + v68++)) = v70 * a1[v67];
              }
              while (v68 != a6);
              goto LABEL_53;
            }
            if (a6 >= 4
              && (v62 + v57 * v54 < (unint64_t)&v64[v59 * v54]
                ? (BOOL v72 = (unint64_t)v63 + v59 * v54 >= a4 + 8 * (v29 * v26 + a6) + v57 * v54)
                : (BOOL v72 = 1),
                  v72))
            {
              uint64_t v73 = &a1[v67];
              float64x2_t v74 = vld1q_dup_f64(v73);
              uint64_t v75 = a6 & 0xFFFFFFFC;
              uint64_t v76 = (float64x2_t *)v61;
              do
              {
                float64x2_t v77 = vmulq_f64(*v76, v74);
                v76[-1] = vmulq_f64(v76[-1], v74);
                float64x2_t *v76 = v77;
                v76 += 2;
                v75 -= 4;
              }
              while (v75);
              uint64_t v78 = a6 & 0xFFFFFFFC;
              if (v32 == a6) {
                goto LABEL_53;
              }
            }
            else
            {
              uint64_t v78 = 0;
            }
            uint64_t v79 = (double *)(a4 + 8 * (v78 + v55));
            uint64_t v80 = a6 - v78;
            do
            {
              *uint64_t v79 = *v79 * a1[v67];
              ++v79;
              --v80;
            }
            while (v80);
LABEL_53:
            ++v54;
            v61 -= 8 * v29;
            v55 -= v29;
            if (v65-- <= 0) {
              goto LABEL_74;
            }
          }
        }
      }
    }
LABEL_74:
    uint64_t v81 = a3;
    uint64_t v82 = 8 * v6 + 8;
    do
    {
      *a1 = 1.0 / *a1;
      a1 = (double *)((char *)a1 + v82);
      --v81;
    }
    while (v81);
  }
  return v8;
}

uint64_t sub_1002A99BC(float *a1, unint64_t a2, unsigned int a3, int a4, unsigned int a5, float *a6, unint64_t a7, float *a8)
{
  sub_1002D6AE8(v156, &off_100496158);
  unsigned int v15 = a8 != 0;
  if (a3) {
    unsigned int v15 = a4 + a3;
  }
  uint64_t v158 = v160;
  uint64_t v159 = (int)v15;
  if (v15 >= 0x109) {
    operator new[]();
  }
  if (a8) {
    double v16 = a8;
  }
  else {
    double v16 = &v160[a3];
  }
  uint64_t v155 = (a4 - 1);
  if (a4 < 1) {
    goto LABEL_114;
  }
  uint64_t v17 = 0;
  unint64_t v18 = a7 >> 2;
  uint64_t v19 = 4 * (a2 >> 2);
  uint64_t v20 = v19 + 4;
  float64x2_t v21 = &a1[(unint64_t)v19 / 4];
  uint64_t v22 = 2 * (a2 >> 2);
  float32x4_t v23 = &a1[v22];
  uint64_t v24 = a3;
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  uint64_t v27 = a4;
  do
  {
    uint64_t v28 = (int)a3 - v17;
    int32x2_t v29 = 0;
    if (v28 >= 1)
    {
      unint64_t v30 = v26;
      unint64_t v31 = v160;
      uint64_t v32 = v25;
      do
      {
        float v33 = *v30;
        *v31++ = *v30;
        *(float *)v29.i32 = *(float *)v29.i32 + (float)(v33 * v33);
        unint64_t v30 = (float *)((char *)v30 + v19);
        --v32;
      }
      while (v32);
    }
    float v34 = v160[0];
    if (v160[0] >= 0.0) {
      float v35 = 1.0;
    }
    else {
      float v35 = -1.0;
    }
    float v36 = v160[0] + (float)(v35 * sqrtf(*(float *)v29.i32));
    v160[0] = v36;
    if (v28 >= 1)
    {
      *(float *)v29.i32 = sqrtf((float)(*(float *)v29.i32 + (float)(v36 * v36)) - (float)(v34 * v34));
      if (v25 < 8)
      {
        uint64_t v37 = 0;
LABEL_23:
        uint64_t v42 = v25 - v37;
        BOOL v43 = &v160[v37];
        do
        {
          float *v43 = *v43 / *(float *)v29.i32;
          ++v43;
          --v42;
        }
        while (v42);
        goto LABEL_25;
      }
      uint64_t v38 = v25 & 0xFFFFFFF8;
      uint64_t v37 = v38;
      float32x4_t v39 = (float32x4_t)vdupq_lane_s32(v29, 0);
      uint64_t v40 = (float32x4_t *)&v162;
      do
      {
        float32x4_t v41 = vdivq_f32(*v40, v39);
        v40[-1] = vdivq_f32(v40[-1], v39);
        *uint64_t v40 = v41;
        v40 += 2;
        v38 -= 8;
      }
      while (v38);
      if (v37 != v25) {
        goto LABEL_23;
      }
    }
LABEL_25:
    if ((int)a3 > v17)
    {
      uint64_t v44 = v26;
      uint64_t v45 = v17;
      do
      {
        float v46 = 0.0;
        uint64_t v47 = v160;
        float64x2_t v48 = v44;
        uint64_t v49 = v25;
        do
        {
          float v50 = *v47++;
          float v46 = v46 + (float)(v50 * *v48);
          float64x2_t v48 = (float *)((char *)v48 + v19);
          --v49;
        }
        while (v49);
        uint64_t v51 = 0;
        uint64_t v52 = v44;
        do
        {
          *uint64_t v52 = *v52 + (float)((float)(v160[v51++] * -2.0) * v46);
          uint64_t v52 = (float *)((char *)v52 + v19);
        }
        while (v25 != v51);
        ++v45;
        ++v44;
      }
      while (v45 != v27);
    }
    v16[v17] = v160[0] * v160[0];
    if (v28 >= 2)
    {
      unint64_t v53 = v25 - 1;
      float v54 = v160[0];
      if (v53 < 2)
      {
        uint64_t v55 = 1;
LABEL_38:
        uint64_t v60 = v25 - v55;
        uint64_t v61 = &a1[v17 + (a2 >> 2) * (v55 + v17)];
        unint64_t v62 = &v160[v55];
        do
        {
          float v63 = *v62++;
          *uint64_t v61 = v63 / v54;
          uint64_t v61 = (float *)((char *)v61 + v19);
          --v60;
        }
        while (v60);
        goto LABEL_10;
      }
      uint64_t v56 = 0;
      unint64_t v57 = v53 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v55 = v53 | 1;
      uint64_t v58 = (float *)&v161;
      do
      {
        float v59 = *v58;
        *(float *)((char *)v21 + v56) = *(v58 - 1) / v54;
        *(float *)((char *)v23 + v56) = v59 / v54;
        v56 += v22 * 4;
        v58 += 2;
        v57 -= 2;
      }
      while (v57);
      if (v53 != (v53 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_38;
      }
    }
LABEL_10:
    ++v17;
    --v25;
    uint64_t v26 = (float *)((char *)v26 + v20);
    float64x2_t v21 = (float *)((char *)v21 + v20);
    float32x4_t v23 = (float *)((char *)v23 + v20);
  }
  while (v17 != v27);
  if (!a6)
  {
LABEL_114:
    uint64_t v144 = 1;
    goto LABEL_115;
  }
  unint64_t v150 = a2 >> 2;
  uint64_t v64 = (int)a3 - 1;
  uint64_t v65 = 4 * v18;
  if ((int)a5 > 0)
  {
    uint64_t v66 = 0;
    uint64_t v67 = &a1[v22];
    uint64_t v68 = v19 + 4;
    uint64_t v69 = &a1[(unint64_t)v19 / 4];
    double v70 = a6;
    unint64_t v71 = a2 >> 2;
    while (1)
    {
      v160[0] = 1.0;
      if (v66 < v64)
      {
        unint64_t v72 = v24 - 1;
        if (v72 >= 2)
        {
          uint64_t v74 = 0;
          unint64_t v75 = v72 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v73 = v72 | 1;
          uint64_t v76 = &v161;
          do
          {
            int v77 = *(_DWORD *)((char *)v67 + v74);
            *((float *)v76 - 1) = *(float *)((char *)v69 + v74);
            *(_DWORD *)uint64_t v76 = v77;
            v74 += v22 * 4;
            ++v76;
            v75 -= 2;
          }
          while (v75);
          if (v72 == (v72 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v73 = 1;
        }
        uint64_t v78 = v24 - v73;
        uint64_t v79 = &v160[v73];
        uint64_t v80 = &a1[v66 + v150 * (v73 + v66)];
        do
        {
          *v79++ = *v80;
          uint64_t v80 = (float *)((char *)v80 + v19);
          --v78;
        }
        while (v78);
      }
LABEL_53:
      if (v66 < (int)a3)
      {
        uint64_t v81 = 0;
        uint64_t v82 = v70;
        do
        {
          float v83 = 0.0;
          uint64_t v84 = v160;
          float64x2_t v85 = v82;
          uint64_t v86 = v24;
          do
          {
            float v87 = *v84++;
            float v83 = v83 + (float)(v87 * *v85);
            float64x2_t v85 = (float *)((char *)v85 + v65);
            --v86;
          }
          while (v86);
          uint64_t v88 = 0;
          uint64_t v89 = v82;
          do
          {
            *uint64_t v89 = *v89 + (float)((float)(v83 * (float)(v160[v88++] * -2.0)) * v16[v66]);
            uint64_t v89 = (float *)((char *)v89 + v65);
          }
          while (v24 != v88);
          ++v81;
          ++v82;
        }
        while (v81 != a5);
      }
      ++v66;
      --v24;
      uint64_t v67 = (float *)((char *)v67 + v68);
      uint64_t v69 = (float *)((char *)v69 + v68);
      double v70 = (float *)((char *)v70 + v65);
      if (v66 == v27) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v90 = 0;
  uint64_t v91 = &a1[v22];
  uint64_t v92 = v19 + 4;
  uint64_t v93 = &a1[(unint64_t)v19 / 4];
  unint64_t v71 = a2 >> 2;
  while (2)
  {
    if (v90 < v64)
    {
      unint64_t v94 = a3 - 1;
      if (v94 < 2)
      {
        uint64_t v95 = 1;
        goto LABEL_69;
      }
      uint64_t v96 = 0;
      unint64_t v97 = v94 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v95 = v94 | 1;
      uint64_t v98 = &v161;
      do
      {
        int v99 = *(_DWORD *)((char *)v91 + v96);
        *((float *)v98 - 1) = *(float *)((char *)v93 + v96);
        *(_DWORD *)uint64_t v98 = v99;
        v96 += v22 * 4;
        ++v98;
        v97 -= 2;
      }
      while (v97);
      if (v94 != (v94 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_69:
        uint64_t v100 = a3 - v95;
        uint64_t v101 = &v160[v95];
        uint64_t v102 = &a1[v90 + v150 * (v95 + v90)];
        do
        {
          *v101++ = *v102;
          uint64_t v102 = (float *)((char *)v102 + v19);
          --v100;
        }
        while (v100);
      }
    }
    ++v90;
    --a3;
    uint64_t v91 = (float *)((char *)v91 + v92);
    uint64_t v93 = (float *)((char *)v93 + v92);
    if (v90 != v27) {
      continue;
    }
    break;
  }
  v160[0] = 1.0;
LABEL_73:
  uint64_t v103 = 0;
  uint64_t v104 = v155;
  uint64_t v105 = v18 * v155;
  uint64_t v106 = v18 * v155;
  uint64_t v107 = -4 * v18;
  unint64_t v152 = v71 + 1;
  uint64_t v108 = (v71 + 1) * v155;
  unint64_t v148 = ~a2 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v109 = a5 & 0xFFFFFFF8;
  BOOL v110 = (float32x4_t *)&a6[v106 + 4];
  uint64_t v151 = &a6[v106];
  uint64_t v149 = &a6[a5 + v106];
  BOOL v146 = &a1[v108];
  uint64_t v147 = &a1[v108 + 1];
  while (2)
  {
    uint64_t v112 = v107 * v103;
    unint64_t v113 = (unint64_t)v151 + v107 * v103;
    if (v104 < v155)
    {
      if ((int)a5 >= 1)
      {
        int v114 = 0;
        uint64_t v115 = (int)v155;
        unint64_t v116 = (unint64_t)v149 + v112;
        while (1)
        {
          uint64_t v117 = v104 * v150 + v115;
          if (a5 >= 8uLL)
          {
            uint64_t v118 = 0;
            uint64_t v123 = (v155 - v114);
            uint64_t v124 = v150 * (v155 - v103) + v123;
            unint64_t v125 = (unint64_t)&a1[v124 + 1];
            unint64_t v126 = &a1[v124];
            unint64_t v127 = (a7 & 0xFFFFFFFFFFFFFFFCLL) * v123;
            unint64_t v128 = (unint64_t)&a6[a5] + v127;
            unint64_t v129 = (unint64_t)a6 + v127;
            BOOL v131 = v113 < v125 && (unint64_t)v126 < v116;
            if ((v129 >= v116 || v113 >= v128) && !v131)
            {
              unint64_t v133 = (float32x4_t *)((char *)a6 + v65 * v115 + 16);
              uint64_t v134 = &a1[v117];
              float32x4_t v14 = vld1q_dup_f32(v134);
              unint64_t v135 = v110;
              uint64_t v136 = a5 & 0xFFFFFFF8;
              do
              {
                float32x4_t v137 = vmlsq_f32(*v135, v14, *v133);
                v135[-1] = vmlsq_f32(v135[-1], v14, v133[-1]);
                *unint64_t v135 = v137;
                v133 += 2;
                v135 += 2;
                v136 -= 8;
              }
              while (v136);
              uint64_t v118 = a5 & 0xFFFFFFF8;
              if (a5 == v109) {
                goto LABEL_79;
              }
            }
          }
          else
          {
            uint64_t v118 = 0;
          }
          uint64_t v119 = a5 - v118;
          long long v120 = &a6[v105 + v118];
          unint64_t v121 = &a6[v118 + v18 * v115];
          do
          {
            float v122 = *v121++;
            *long long v120 = *v120 - (float)(v122 * a1[v117]);
            ++v120;
            --v119;
          }
          while (v119);
LABEL_79:
          --v115;
          ++v114;
          if (v104 >= v115) {
            goto LABEL_101;
          }
        }
      }
      if (fabsf(a1[v104 * v152]) < 0.0000011921) {
        goto LABEL_118;
      }
LABEL_75:
      v105 -= v18;
      ++v103;
      uint64_t v107 = -4 * v18;
      BOOL v110 = (float32x4_t *)((char *)v110 - 4 * v18);
      if (v104-- < 1) {
        goto LABEL_114;
      }
      continue;
    }
    break;
  }
LABEL_101:
  v14.f32[0] = a1[v104 * v152];
  if (fabsf(v14.f32[0]) >= 0.0000011921)
  {
    if ((int)a5 < 1) {
      goto LABEL_75;
    }
    if (a5 >= 8uLL
      && (v113 >= (unint64_t)v147 + v148 * v103
       || (char *)v146 + v148 * v103 >= (char *)&a6[v18 * v155 + a5] + v112))
    {
      float32x4_t v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 0);
      uint64_t v141 = a5 & 0xFFFFFFF8;
      BOOL v142 = v110;
      do
      {
        float32x4_t v143 = vdivq_f32(*v142, v14);
        v142[-1] = vdivq_f32(v142[-1], v14);
        *BOOL v142 = v143;
        v142 += 2;
        v141 -= 8;
      }
      while (v141);
      uint64_t v138 = a5 & 0xFFFFFFF8;
      if (a5 == v109) {
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v138 = 0;
    }
    uint64_t v139 = a5 - v138;
    unint64_t v140 = &a6[v138 + v105];
    do
    {
      *unint64_t v140 = *v140 / a1[v104 * v152];
      ++v140;
      --v139;
    }
    while (v139);
    goto LABEL_75;
  }
LABEL_118:
  uint64_t v144 = 0;
LABEL_115:
  if (v157) {
    sub_1002D6888(v156);
  }
  return v144;
}

void sub_1002AA218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a26 != a14)
  {
    if (a26) {
      operator delete[]();
    }
  }
  sub_10020FA00((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AA258(double *a1, unint64_t a2, unsigned int a3, int a4, unsigned int a5, double *a6, unint64_t a7, double *a8)
{
  sub_1002D6AE8(v159, &off_100496178);
  unsigned int v14 = a8 != 0;
  if (a3) {
    unsigned int v14 = a4 + a3;
  }
  uint64_t v161 = v163;
  uint64_t v162 = (int)v14;
  if (v14 >= 0x89) {
    operator new[]();
  }
  if (a8) {
    unsigned int v15 = a8;
  }
  else {
    unsigned int v15 = &v163[a3];
  }
  uint64_t v158 = (a4 - 1);
  if (a4 < 1) {
    goto LABEL_114;
  }
  uint64_t v16 = 0;
  unint64_t v17 = a7 >> 3;
  uint64_t v18 = 8 * (a2 >> 3);
  uint64_t v19 = v18 + 8;
  uint64_t v20 = &a1[(unint64_t)v18 / 8];
  uint64_t v21 = 2 * (a2 >> 3);
  uint64_t v22 = a3;
  float32x4_t v23 = &a1[v21];
  uint64_t v24 = a3;
  uint64_t v25 = a1;
  uint64_t v26 = a4;
  do
  {
    uint64_t v27 = (int)a3 - v16;
    double v28 = 0.0;
    if (v27 >= 1)
    {
      int32x2_t v29 = v25;
      unint64_t v30 = v163;
      uint64_t v31 = v24;
      do
      {
        double v32 = *v29;
        *v30++ = *v29;
        double v28 = v28 + v32 * v32;
        int32x2_t v29 = (double *)((char *)v29 + v18);
        --v31;
      }
      while (v31);
    }
    double v33 = v163[0];
    if (v163[0] >= 0.0) {
      double v34 = 1.0;
    }
    else {
      double v34 = -1.0;
    }
    double v35 = v163[0] + v34 * sqrt(v28);
    v163[0] = v35;
    if (v27 >= 1)
    {
      double v36 = sqrt(v28 + v35 * v35 - v33 * v33);
      if (v24 < 4)
      {
        uint64_t v37 = 0;
LABEL_23:
        uint64_t v42 = v24 - v37;
        BOOL v43 = &v163[v37];
        do
        {
          double *v43 = *v43 / v36;
          ++v43;
          --v42;
        }
        while (v42);
        goto LABEL_25;
      }
      uint64_t v38 = v24 & 0xFFFFFFFC;
      uint64_t v37 = v38;
      float64x2_t v39 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v36, 0);
      uint64_t v40 = (float64x2_t *)v164;
      do
      {
        float64x2_t v41 = vdivq_f64(*v40, v39);
        v40[-1] = vdivq_f64(v40[-1], v39);
        *uint64_t v40 = v41;
        v40 += 2;
        v38 -= 4;
      }
      while (v38);
      if (v37 != v24) {
        goto LABEL_23;
      }
    }
LABEL_25:
    if ((int)a3 > v16)
    {
      uint64_t v44 = v25;
      uint64_t v45 = v16;
      do
      {
        double v46 = 0.0;
        uint64_t v47 = v163;
        float64x2_t v48 = v44;
        uint64_t v49 = v24;
        do
        {
          double v50 = *v47++;
          double v46 = v46 + v50 * *v48;
          float64x2_t v48 = (double *)((char *)v48 + v18);
          --v49;
        }
        while (v49);
        uint64_t v51 = 0;
        uint64_t v52 = v44;
        do
        {
          *uint64_t v52 = *v52 + v163[v51++] * -2.0 * v46;
          uint64_t v52 = (double *)((char *)v52 + v18);
        }
        while (v24 != v51);
        ++v45;
        ++v44;
      }
      while (v45 != v26);
    }
    v15[v16] = v163[0] * v163[0];
    if (v27 >= 2)
    {
      unint64_t v53 = v24 - 1;
      double v54 = v163[0];
      if (v53 < 2)
      {
        uint64_t v55 = 1;
LABEL_38:
        uint64_t v60 = v24 - v55;
        uint64_t v61 = &a1[v16 + (a2 >> 3) * (v55 + v16)];
        unint64_t v62 = &v163[v55];
        do
        {
          double v63 = *v62++;
          *uint64_t v61 = v63 / v54;
          uint64_t v61 = (double *)((char *)v61 + v18);
          --v60;
        }
        while (v60);
        goto LABEL_10;
      }
      uint64_t v56 = 0;
      unint64_t v57 = v53 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v55 = v53 | 1;
      uint64_t v58 = (double *)v164;
      do
      {
        double v59 = *v58;
        *(double *)((char *)v20 + v56) = *(v58 - 1) / v54;
        *(double *)((char *)v23 + v56) = v59 / v54;
        v56 += v21 * 8;
        v58 += 2;
        v57 -= 2;
      }
      while (v57);
      if (v53 != (v53 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_38;
      }
    }
LABEL_10:
    ++v16;
    --v24;
    uint64_t v25 = (double *)((char *)v25 + v19);
    uint64_t v20 = (double *)((char *)v20 + v19);
    float32x4_t v23 = (double *)((char *)v23 + v19);
  }
  while (v16 != v26);
  if (!a6)
  {
LABEL_114:
    uint64_t v147 = 1;
    goto LABEL_115;
  }
  unint64_t v153 = a2 >> 3;
  uint64_t v64 = (int)a3 - 1;
  uint64_t v65 = 8 * v17;
  if ((int)a5 > 0)
  {
    uint64_t v66 = 0;
    uint64_t v67 = &a1[v21];
    uint64_t v68 = v18 + 8;
    uint64_t v69 = &a1[(unint64_t)v18 / 8];
    double v70 = a6;
    unint64_t v71 = a2 >> 3;
    while (1)
    {
      v163[0] = 1.0;
      if (v66 < v64)
      {
        unint64_t v72 = v22 - 1;
        if (v72 >= 2)
        {
          uint64_t v74 = 0;
          unint64_t v75 = v72 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v73 = v72 | 1;
          uint64_t v76 = v164;
          do
          {
            uint64_t v77 = *(void *)((char *)v67 + v74);
            *(v76 - 1) = *(void *)((char *)v69 + v74);
            void *v76 = v77;
            v74 += v21 * 8;
            v76 += 2;
            v75 -= 2;
          }
          while (v75);
          if (v72 == (v72 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v73 = 1;
        }
        uint64_t v78 = v22 - v73;
        uint64_t v79 = &v163[v73];
        uint64_t v80 = &a1[v66 + v153 * (v73 + v66)];
        do
        {
          *v79++ = *v80;
          uint64_t v80 = (double *)((char *)v80 + v18);
          --v78;
        }
        while (v78);
      }
LABEL_53:
      if (v66 < (int)a3)
      {
        uint64_t v81 = 0;
        uint64_t v82 = v70;
        do
        {
          double v83 = 0.0;
          uint64_t v84 = v163;
          float64x2_t v85 = v82;
          uint64_t v86 = v22;
          do
          {
            double v87 = *v84++;
            double v83 = v83 + v87 * *v85;
            float64x2_t v85 = (double *)((char *)v85 + v65);
            --v86;
          }
          while (v86);
          uint64_t v88 = 0;
          uint64_t v89 = v82;
          do
          {
            *uint64_t v89 = *v89 + v83 * (v163[v88++] * -2.0) * v15[v66];
            uint64_t v89 = (double *)((char *)v89 + v65);
          }
          while (v22 != v88);
          ++v81;
          ++v82;
        }
        while (v81 != a5);
      }
      ++v66;
      --v22;
      uint64_t v67 = (double *)((char *)v67 + v68);
      uint64_t v69 = (double *)((char *)v69 + v68);
      double v70 = (double *)((char *)v70 + v65);
      if (v66 == v26) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v90 = 0;
  uint64_t v91 = &a1[v21];
  uint64_t v92 = v18 + 8;
  uint64_t v93 = &a1[(unint64_t)v18 / 8];
  unint64_t v71 = a2 >> 3;
  while (2)
  {
    if (v90 < v64)
    {
      unint64_t v94 = a3 - 1;
      if (v94 < 2)
      {
        uint64_t v95 = 1;
        goto LABEL_69;
      }
      uint64_t v96 = 0;
      unint64_t v97 = v94 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v95 = v94 | 1;
      uint64_t v98 = v164;
      do
      {
        uint64_t v99 = *(void *)((char *)v91 + v96);
        *(v98 - 1) = *(void *)((char *)v93 + v96);
        *uint64_t v98 = v99;
        v96 += v21 * 8;
        v98 += 2;
        v97 -= 2;
      }
      while (v97);
      if (v94 != (v94 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_69:
        uint64_t v100 = a3 - v95;
        uint64_t v101 = &v163[v95];
        uint64_t v102 = &a1[v90 + v153 * (v95 + v90)];
        do
        {
          *v101++ = *v102;
          uint64_t v102 = (double *)((char *)v102 + v18);
          --v100;
        }
        while (v100);
      }
    }
    ++v90;
    --a3;
    uint64_t v91 = (double *)((char *)v91 + v92);
    uint64_t v93 = (double *)((char *)v93 + v92);
    if (v90 != v26) {
      continue;
    }
    break;
  }
  v163[0] = 1.0;
LABEL_73:
  uint64_t v103 = 0;
  uint64_t v104 = v158;
  uint64_t v105 = v17 * v158;
  uint64_t v106 = v17 * v158;
  uint64_t v107 = -8 * v17;
  unint64_t v155 = v71 + 1;
  uint64_t v108 = (v71 + 1) * v158;
  unint64_t v151 = ~a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v109 = a5 & 0xFFFFFFFC;
  BOOL v110 = (float64x2_t *)&a6[v106 + 2];
  uint64_t v154 = &a6[v106];
  unint64_t v152 = &a6[a5 + v106];
  uint64_t v149 = &a1[v108];
  unint64_t v150 = &a1[v108 + 1];
  while (2)
  {
    uint64_t v112 = v107 * v103;
    unint64_t v113 = (unint64_t)v154 + v107 * v103;
    if (v104 < v158)
    {
      if ((int)a5 >= 1)
      {
        int v114 = 0;
        uint64_t v115 = (int)v158;
        unint64_t v116 = (unint64_t)v152 + v112;
        while (1)
        {
          uint64_t v117 = v104 * v153 + v115;
          if (a5 >= 6uLL)
          {
            uint64_t v118 = 0;
            uint64_t v123 = (v158 - v114);
            uint64_t v124 = v153 * (v158 - v103) + v123;
            unint64_t v125 = (unint64_t)&a1[v124 + 1];
            unint64_t v126 = &a1[v124];
            unint64_t v127 = (a7 & 0xFFFFFFFFFFFFFFF8) * v123;
            unint64_t v128 = (unint64_t)&a6[a5] + v127;
            unint64_t v129 = (unint64_t)a6 + v127;
            BOOL v131 = v113 < v125 && (unint64_t)v126 < v116;
            if ((v129 >= v116 || v113 >= v128) && !v131)
            {
              unint64_t v133 = (float64x2_t *)((char *)a6 + v65 * v115 + 16);
              uint64_t v134 = &a1[v117];
              float64x2_t v135 = vld1q_dup_f64(v134);
              uint64_t v136 = v110;
              uint64_t v137 = a5 & 0xFFFFFFFC;
              do
              {
                float64x2_t v138 = vmlsq_f64(*v136, v135, *v133);
                v136[-1] = vmlsq_f64(v136[-1], v135, v133[-1]);
                *uint64_t v136 = v138;
                v133 += 2;
                v136 += 2;
                v137 -= 4;
              }
              while (v137);
              uint64_t v118 = a5 & 0xFFFFFFFC;
              if (a5 == v109) {
                goto LABEL_79;
              }
            }
          }
          else
          {
            uint64_t v118 = 0;
          }
          uint64_t v119 = a5 - v118;
          long long v120 = &a6[v105 + v118];
          unint64_t v121 = &a6[v118 + v17 * v115];
          do
          {
            double v122 = *v121++;
            *long long v120 = *v120 - v122 * a1[v117];
            ++v120;
            --v119;
          }
          while (v119);
LABEL_79:
          --v115;
          ++v114;
          if (v104 >= v115) {
            goto LABEL_101;
          }
        }
      }
      if (fabs(a1[v104 * v155]) < 2.22044605e-14) {
        goto LABEL_118;
      }
LABEL_75:
      v105 -= v17;
      ++v103;
      uint64_t v107 = -8 * v17;
      BOOL v110 = (float64x2_t *)((char *)v110 - 8 * v17);
      if (v104-- < 1) {
        goto LABEL_114;
      }
      continue;
    }
    break;
  }
LABEL_101:
  uint64_t v139 = *(void *)&a1[v104 * v155];
  if (fabs(*(double *)&v139) >= 2.22044605e-14)
  {
    if ((int)a5 < 1) {
      goto LABEL_75;
    }
    if (a5 >= 4uLL
      && (v113 >= (unint64_t)v150 + v151 * v103
       || (char *)v149 + v151 * v103 >= (char *)&a6[v17 * v158 + a5] + v112))
    {
      float64x2_t v143 = (float64x2_t)vdupq_lane_s64(v139, 0);
      uint64_t v144 = a5 & 0xFFFFFFFC;
      BOOL v145 = v110;
      do
      {
        float64x2_t v146 = vdivq_f64(*v145, v143);
        v145[-1] = vdivq_f64(v145[-1], v143);
        *BOOL v145 = v146;
        v145 += 2;
        v144 -= 4;
      }
      while (v144);
      uint64_t v140 = a5 & 0xFFFFFFFC;
      if (a5 == v109) {
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v140 = 0;
    }
    uint64_t v141 = a5 - v140;
    BOOL v142 = &a6[v140 + v105];
    do
    {
      *BOOL v142 = *v142 / a1[v104 * v155];
      ++v142;
      --v141;
    }
    while (v141);
    goto LABEL_75;
  }
LABEL_118:
  uint64_t v147 = 0;
LABEL_115:
  if (v160) {
    sub_1002D6888(v159);
  }
  return v147;
}

void sub_1002AAAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a26 != a14)
  {
    if (a26) {
      operator delete[]();
    }
  }
  sub_10020FA00((uint64_t)&a24);
  _Unwind_Resume(a1);
}

char **sub_1002AAAF0(char **result, char *a2, int a3, int a4)
{
  if (a4 <= 0) {
    LODWORD(v4) = -(-a4 & 3);
  }
  else {
    LODWORD(v4) = a4 & 3;
  }
  if (!v4) {
    LODWORD(v4) = 4;
  }
  switch(v4)
  {
    case 3:
      uint64_t v9 = 0;
      LODWORD(v10) = 0;
      unint64_t v11 = *result;
      unint64_t v12 = result[1];
      unint64_t v13 = result[2];
      if (a3 >= 17 && a4 == 3)
      {
        uint64_t v14 = 0;
        unint64_t v10 = 0;
        unsigned int v15 = a2;
        do
        {
          v70.val[0] = *(int8x16_t *)&v11[v10];
          v70.val[1] = *(int8x16_t *)&v12[v10];
          v70.val[2] = *(int8x16_t *)&v13[v10];
          vst3q_s8(v15, v70);
          v15 += 48;
          v10 += 16;
          v14 += 0x3000000000;
        }
        while (v10 < (a3 - 16));
        uint64_t v9 = v14 >> 32;
      }
      if ((int)v10 < a3)
      {
        uint64_t v16 = v10;
        unint64_t v17 = a3 - (unint64_t)v10;
        uint64_t v18 = &v13[v16];
        uint64_t v19 = &v12[v16];
        uint64_t v20 = &v11[v16];
        uint64_t v21 = &a2[v9 + 1];
        do
        {
          char v22 = *v20++;
          *(v21 - 1) = v22;
          char v23 = *v19++;
          *uint64_t v21 = v23;
          char v24 = *v18++;
          v21[1] = v24;
          v21 += a4;
          --v17;
        }
        while (v17);
      }
      break;
    case 2:
      uint64_t v25 = 0;
      LODWORD(v26) = 0;
      uint64_t v27 = *result;
      double v28 = result[1];
      if (a3 >= 17 && a4 == 2)
      {
        uint64_t v29 = 0;
        unint64_t v26 = 0;
        unint64_t v30 = a2;
        do
        {
          v69.val[0] = *(int8x16_t *)&v27[v26];
          v69.val[1] = *(int8x16_t *)&v28[v26];
          vst2q_s8(v30, v69);
          v30 += 32;
          v26 += 16;
          v29 += 0x2000000000;
        }
        while (v26 < (a3 - 16));
        uint64_t v25 = v29 >> 32;
      }
      if ((int)v26 < a3)
      {
        uint64_t v31 = v26;
        unint64_t v32 = a3 - (unint64_t)v26;
        double v33 = &v28[v31];
        double v34 = &v27[v31];
        double v35 = &a2[v25 + 1];
        do
        {
          char v36 = *v34++;
          *(v35 - 1) = v36;
          char v37 = *v33++;
          *double v35 = v37;
          v35 += a4;
          --v32;
        }
        while (v32);
      }
      break;
    case 1:
      if (a3 < 1) {
        return result;
      }
      uint64_t v5 = *result;
      unint64_t v6 = a2;
      uint64_t v7 = a3;
      do
      {
        char v8 = *v5++;
        *unint64_t v6 = v8;
        v6 += a4;
        --v7;
      }
      while (v7);
      break;
    default:
      uint64_t v38 = 0;
      LODWORD(v39) = 0;
      uint64_t v40 = *result;
      float64x2_t v41 = result[1];
      uint64_t v42 = result[2];
      BOOL v43 = result[3];
      if (a3 >= 17 && a4 == 4)
      {
        uint64_t v44 = 0;
        unint64_t v39 = 0;
        uint64_t v45 = a2;
        do
        {
          v71.val[0] = *(int8x16_t *)&v40[v39];
          v71.val[1] = *(int8x16_t *)&v41[v39];
          v71.val[2] = *(int8x16_t *)&v42[v39];
          v71.val[3] = *(int8x16_t *)&v43[v39];
          vst4q_s8(v45, v71);
          v45 += 64;
          v39 += 16;
          v44 += 0x4000000000;
        }
        while (v39 < (a3 - 16));
        uint64_t v38 = v44 >> 32;
      }
      if ((int)v39 < a3)
      {
        uint64_t v46 = v39;
        unint64_t v47 = a3 - (unint64_t)v39;
        float64x2_t v48 = &v43[v46];
        uint64_t v49 = &v42[v46];
        double v50 = &v41[v46];
        uint64_t v51 = &v40[v46];
        uint64_t v52 = &a2[v38 + 1];
        do
        {
          char v53 = *v51++;
          *(v52 - 1) = v53;
          char v54 = *v50++;
          *uint64_t v52 = v54;
          char v55 = *v49++;
          v52[1] = v55;
          char v56 = *v48++;
          v52[2] = v56;
          v52 += a4;
          --v47;
        }
        while (v47);
      }
      break;
  }
  if (a3 >= 1 && (int)v4 < a4)
  {
    uint64_t v4 = (int)v4;
    uint64_t v57 = (uint64_t)&a2[(int)v4 + 1];
    do
    {
      uint64_t v58 = &result[v4];
      double v59 = *v58;
      uint64_t v60 = v58[1];
      uint64_t v61 = v58[2];
      unint64_t v62 = v58[3];
      double v63 = (unsigned char *)v57;
      uint64_t v64 = a3;
      do
      {
        char v65 = *v59++;
        *(v63 - 1) = v65;
        char v66 = *v60++;
        *double v63 = v66;
        char v67 = *v61++;
        v63[1] = v67;
        char v68 = *v62++;
        v63[2] = v68;
        v63 += a4;
        --v64;
      }
      while (v64);
      v4 += 4;
      v57 += 4;
    }
    while (v4 < a4);
  }
  return result;
}

int16x8_t **sub_1002AADD4(int16x8_t **result, __int16 *a2, int a3, int a4)
{
  if (a4 <= 0) {
    int v4 = -(-a4 & 3);
  }
  else {
    int v4 = a4 & 3;
  }
  if (!v4) {
    int v4 = 4;
  }
  switch(v4)
  {
    case 3:
      uint64_t v9 = 0;
      LODWORD(v10) = 0;
      unint64_t v11 = *result;
      unint64_t v12 = result[1];
      unint64_t v13 = result[2];
      if (a3 >= 9 && a4 == 3)
      {
        uint64_t v14 = 0;
        unint64_t v10 = 0;
        unsigned int v15 = a2;
        uint64_t v16 = *result;
        unint64_t v17 = result[1];
        uint64_t v18 = result[2];
        do
        {
          int16x8_t v19 = *v16++;
          v89.val[0] = v19;
          int16x8_t v20 = *v17++;
          v89.val[1] = v20;
          int16x8_t v21 = *v18++;
          v89.val[2] = v21;
          vst3q_s16(v15, v89);
          v15 += 24;
          v10 += 8;
          v14 += 0x1800000000;
        }
        while (v10 < (a3 - 8));
        uint64_t v9 = v14 >> 32;
      }
      if ((int)v10 < a3)
      {
        unint64_t v22 = a3 - (unint64_t)v10;
        uint64_t v23 = v10;
        char v24 = &v13->i16[v23];
        uint64_t v25 = &v12->i16[v23];
        unint64_t v26 = &v11->i16[v23];
        uint64_t v27 = &a2[v9 + 1];
        do
        {
          __int16 v28 = *v26++;
          *(v27 - 1) = v28;
          __int16 v29 = *v25++;
          *uint64_t v27 = v29;
          __int16 v30 = *v24++;
          v27[1] = v30;
          v27 += a4;
          --v22;
        }
        while (v22);
      }
      break;
    case 2:
      uint64_t v31 = 0;
      LODWORD(v32) = 0;
      double v33 = *result;
      double v34 = result[1];
      if (a3 >= 9 && a4 == 2)
      {
        uint64_t v35 = 0;
        unint64_t v32 = 0;
        char v36 = a2;
        char v37 = *result;
        uint64_t v38 = result[1];
        do
        {
          int16x8_t v39 = *v37++;
          v88.val[0] = v39;
          int16x8_t v40 = *v38++;
          v88.val[1] = v40;
          vst2q_s16(v36, v88);
          v36 += 16;
          v32 += 8;
          v35 += 0x1000000000;
        }
        while (v32 < (a3 - 8));
        uint64_t v31 = v35 >> 32;
      }
      if ((int)v32 < a3)
      {
        unint64_t v41 = a3 - (unint64_t)v32;
        uint64_t v42 = v32;
        BOOL v43 = &v34->i16[v42];
        uint64_t v44 = &v33->i16[v42];
        uint64_t v45 = &a2[v31 + 1];
        do
        {
          __int16 v46 = *v44++;
          *(v45 - 1) = v46;
          __int16 v47 = *v43++;
          *uint64_t v45 = v47;
          v45 += a4;
          --v41;
        }
        while (v41);
      }
      break;
    case 1:
      if (a3 < 1) {
        return result;
      }
      uint64_t v5 = *result;
      unint64_t v6 = a2;
      uint64_t v7 = a3;
      do
      {
        __int16 v8 = v5->i16[0];
        uint64_t v5 = (int16x8_t *)((char *)v5 + 2);
        *unint64_t v6 = v8;
        v6 += a4;
        --v7;
      }
      while (v7);
      break;
    default:
      uint64_t v48 = 0;
      LODWORD(v49) = 0;
      double v50 = *result;
      uint64_t v51 = result[1];
      uint64_t v52 = result[2];
      char v53 = result[3];
      if (a3 >= 9 && a4 == 4)
      {
        uint64_t v54 = 0;
        unint64_t v49 = 0;
        char v55 = a2;
        char v56 = *result;
        uint64_t v57 = result[1];
        uint64_t v58 = result[2];
        double v59 = result[3];
        do
        {
          int16x8_t v60 = *v56++;
          v90.val[0] = v60;
          int16x8_t v61 = *v57++;
          v90.val[1] = v61;
          int16x8_t v62 = *v58++;
          v90.val[2] = v62;
          int16x8_t v63 = *v59++;
          v90.val[3] = v63;
          vst4q_s16(v55, v90);
          v55 += 32;
          v49 += 8;
          v54 += 0x2000000000;
        }
        while (v49 < (a3 - 8));
        uint64_t v48 = v54 >> 32;
      }
      if ((int)v49 < a3)
      {
        unint64_t v64 = a3 - (unint64_t)v49;
        uint64_t v65 = v49;
        char v66 = &v53->i16[v65];
        char v67 = &v52->i16[v65];
        char v68 = &v51->i16[v65];
        int8x16x2_t v69 = &v50->i16[v65];
        int8x16x3_t v70 = &a2[v48 + 2];
        do
        {
          __int16 v71 = *v69++;
          *(v70 - 2) = v71;
          __int16 v72 = *v68++;
          *(v70 - 1) = v72;
          __int16 v73 = *v67++;
          __int16 *v70 = v73;
          __int16 v74 = *v66++;
          v70[1] = v74;
          v70 += a4;
          --v64;
        }
        while (v64);
      }
      break;
  }
  if (a3 >= 1 && v4 < a4)
  {
    uint64_t v75 = v4;
    uint64_t v76 = (uint64_t)&a2[v4 + 2];
    do
    {
      uint64_t v77 = &result[v75];
      uint64_t v78 = *v77;
      uint64_t v79 = v77[1];
      uint64_t v80 = v77[2];
      uint64_t v81 = v77[3];
      uint64_t v82 = (_WORD *)v76;
      uint64_t v83 = a3;
      do
      {
        __int16 v84 = v78->i16[0];
        uint64_t v78 = (int16x8_t *)((char *)v78 + 2);
        *(v82 - 2) = v84;
        __int16 v85 = v79->i16[0];
        uint64_t v79 = (int16x8_t *)((char *)v79 + 2);
        *(v82 - 1) = v85;
        __int16 v86 = v80->i16[0];
        uint64_t v80 = (int16x8_t *)((char *)v80 + 2);
        *uint64_t v82 = v86;
        __int16 v87 = v81->i16[0];
        uint64_t v81 = (int16x8_t *)((char *)v81 + 2);
        v82[1] = v87;
        v82 += a4;
        --v83;
      }
      while (v83);
      v75 += 4;
      v76 += 8;
    }
    while (v75 < a4);
  }
  return result;
}

float32x4_t **sub_1002AB0EC(float32x4_t **result, float *a2, int a3, int a4)
{
  if (a4 <= 0) {
    int v4 = -(-a4 & 3);
  }
  else {
    int v4 = a4 & 3;
  }
  if (!v4) {
    int v4 = 4;
  }
  switch(v4)
  {
    case 3:
      uint64_t v9 = 0;
      LODWORD(v10) = 0;
      unint64_t v11 = *result;
      unint64_t v12 = result[1];
      unint64_t v13 = result[2];
      if (a3 >= 5 && a4 == 3)
      {
        uint64_t v14 = 0;
        unint64_t v10 = 0;
        unsigned int v15 = a2;
        uint64_t v16 = *result;
        unint64_t v17 = result[1];
        uint64_t v18 = result[2];
        do
        {
          float32x4_t v19 = *v16++;
          v89.val[0] = v19;
          float32x4_t v20 = *v17++;
          v89.val[1] = v20;
          float32x4_t v21 = *v18++;
          v89.val[2] = v21;
          vst3q_f32(v15, v89);
          v15 += 12;
          v10 += 4;
          v14 += 0xC00000000;
        }
        while (v10 < (a3 - 4));
        uint64_t v9 = v14 >> 32;
      }
      if ((int)v10 < a3)
      {
        unint64_t v22 = a3 - (unint64_t)v10;
        uint64_t v23 = 4 * v10;
        char v24 = (__int32 *)((char *)v13 + v23);
        uint64_t v25 = (__int32 *)((char *)v12 + v23);
        unint64_t v26 = (__int32 *)((char *)v11 + v23);
        uint64_t v27 = &a2[v9 + 1];
        do
        {
          int v28 = *v26++;
          *((_DWORD *)v27 - 1) = v28;
          int v29 = *v25++;
          *(_DWORD *)uint64_t v27 = v29;
          int v30 = *v24++;
          *((_DWORD *)v27 + 1) = v30;
          v27 += a4;
          --v22;
        }
        while (v22);
      }
      break;
    case 2:
      uint64_t v31 = 0;
      LODWORD(v32) = 0;
      double v33 = *result;
      double v34 = result[1];
      if (a3 >= 5 && a4 == 2)
      {
        uint64_t v35 = 0;
        unint64_t v32 = 0;
        char v36 = a2;
        char v37 = *result;
        uint64_t v38 = result[1];
        do
        {
          float32x4_t v39 = *v37++;
          v88.val[0] = v39;
          float32x4_t v40 = *v38++;
          v88.val[1] = v40;
          vst2q_f32(v36, v88);
          v36 += 8;
          v32 += 4;
          v35 += 0x800000000;
        }
        while (v32 < (a3 - 4));
        uint64_t v31 = v35 >> 32;
      }
      if ((int)v32 < a3)
      {
        unint64_t v41 = a3 - (unint64_t)v32;
        uint64_t v42 = 4 * v32;
        BOOL v43 = (__int32 *)((char *)v34 + v42);
        uint64_t v44 = (__int32 *)((char *)v33 + v42);
        uint64_t v45 = &a2[v31 + 1];
        do
        {
          int v46 = *v44++;
          *((_DWORD *)v45 - 1) = v46;
          int v47 = *v43++;
          *(_DWORD *)uint64_t v45 = v47;
          v45 += a4;
          --v41;
        }
        while (v41);
      }
      break;
    case 1:
      if (a3 < 1) {
        return result;
      }
      uint64_t v5 = *result;
      unint64_t v6 = a2;
      uint64_t v7 = a3;
      do
      {
        __int32 v8 = v5->i32[0];
        uint64_t v5 = (float32x4_t *)((char *)v5 + 4);
        *(_DWORD *)unint64_t v6 = v8;
        v6 += a4;
        --v7;
      }
      while (v7);
      break;
    default:
      uint64_t v48 = 0;
      LODWORD(v49) = 0;
      double v50 = *result;
      uint64_t v51 = result[1];
      uint64_t v52 = result[2];
      char v53 = result[3];
      if (a3 >= 5 && a4 == 4)
      {
        uint64_t v54 = 0;
        unint64_t v49 = 0;
        char v55 = a2;
        char v56 = *result;
        uint64_t v57 = result[1];
        uint64_t v58 = result[2];
        double v59 = result[3];
        do
        {
          float32x4_t v60 = *v56++;
          v90.val[0] = v60;
          float32x4_t v61 = *v57++;
          v90.val[1] = v61;
          float32x4_t v62 = *v58++;
          v90.val[2] = v62;
          float32x4_t v63 = *v59++;
          v90.val[3] = v63;
          vst4q_f32(v55, v90);
          v55 += 16;
          v49 += 4;
          v54 += 0x1000000000;
        }
        while (v49 < (a3 - 4));
        uint64_t v48 = v54 >> 32;
      }
      if ((int)v49 < a3)
      {
        unint64_t v64 = a3 - (unint64_t)v49;
        uint64_t v65 = 4 * v49;
        char v66 = (__int32 *)((char *)v53 + v65);
        char v67 = (__int32 *)((char *)v52 + v65);
        char v68 = (__int32 *)((char *)v51 + v65);
        int8x16x2_t v69 = (__int32 *)((char *)v50 + v65);
        int8x16x3_t v70 = &a2[v48 + 2];
        do
        {
          int v71 = *v69++;
          *((_DWORD *)v70 - 2) = v71;
          int v72 = *v68++;
          *((_DWORD *)v70 - 1) = v72;
          int v73 = *v67++;
          *(_DWORD *)int8x16x3_t v70 = v73;
          int v74 = *v66++;
          *((_DWORD *)v70 + 1) = v74;
          v70 += a4;
          --v64;
        }
        while (v64);
      }
      break;
  }
  if (a3 >= 1 && v4 < a4)
  {
    uint64_t v75 = v4;
    uint64_t v76 = (uint64_t)&a2[v4 + 2];
    do
    {
      uint64_t v77 = &result[v75];
      uint64_t v78 = *v77;
      uint64_t v79 = v77[1];
      uint64_t v80 = v77[2];
      uint64_t v81 = v77[3];
      uint64_t v82 = (_DWORD *)v76;
      uint64_t v83 = a3;
      do
      {
        int v84 = v78->i32[0];
        uint64_t v78 = (float32x4_t *)((char *)v78 + 4);
        *(v82 - 2) = v84;
        int v85 = v79->i32[0];
        uint64_t v79 = (float32x4_t *)((char *)v79 + 4);
        *(v82 - 1) = v85;
        int v86 = v80->i32[0];
        uint64_t v80 = (float32x4_t *)((char *)v80 + 4);
        *uint64_t v82 = v86;
        int v87 = v81->i32[0];
        uint64_t v81 = (float32x4_t *)((char *)v81 + 4);
        v82[1] = v87;
        v82 += a4;
        --v83;
      }
      while (v83);
      v75 += 4;
      v76 += 16;
    }
    while (v75 < a4);
  }
  return result;
}

uint64_t **sub_1002AB404(uint64_t **result, void *a2, int a3, int a4)
{
  if (a4 <= 0) {
    int v4 = -(-a4 & 3);
  }
  else {
    int v4 = a4 & 3;
  }
  if (!v4) {
    int v4 = 4;
  }
  if (v4 == 3)
  {
    uint64_t v9 = *result;
    unint64_t v10 = result[1];
    unint64_t v11 = result[2];
    if (a4 == 3 && a3 >= 2)
    {
      uint64_t v12 = 0;
      unsigned int v13 = a3 - 1;
      uint64_t v14 = a2;
      unsigned int v15 = *result;
      uint64_t v16 = result[1];
      unint64_t v17 = result[2];
      uint64_t v18 = (a3 - 1);
      do
      {
        uint64_t v19 = *v15++;
        uint64_t v20 = v19;
        uint64_t v21 = *v16++;
        uint64_t v22 = v21;
        uint64_t v23 = *v17++;
        *uint64_t v14 = v20;
        v14[1] = v22;
        v14[2] = v23;
        v14 += 3;
        v12 += 0x300000000;
        --v18;
      }
      while (v18);
      uint64_t v24 = v12 >> 32;
      if ((int)v13 >= a3) {
        goto LABEL_42;
      }
    }
    else
    {
      unsigned int v13 = 0;
      uint64_t v24 = 0;
      if (a3 <= 0) {
        goto LABEL_42;
      }
    }
    unint64_t v57 = a3 - (unint64_t)v13;
    uint64_t v58 = v13;
    double v59 = &v11[v58];
    float32x4_t v60 = &v10[v58];
    float32x4_t v61 = &v9[v58];
    float32x4_t v62 = &a2[v24 + 1];
    do
    {
      uint64_t v63 = *v61++;
      *(v62 - 1) = v63;
      uint64_t v64 = *v60++;
      *float32x4_t v62 = v64;
      uint64_t v65 = *v59++;
      v62[1] = v65;
      v62 += a4;
      --v57;
    }
    while (v57);
    goto LABEL_42;
  }
  if (v4 == 2)
  {
    uint64_t v25 = *result;
    unint64_t v26 = result[1];
    if (a4 == 2 && a3 >= 2)
    {
      uint64_t v27 = 0;
      unsigned int v28 = a3 - 1;
      int v29 = a2;
      int v30 = *result;
      uint64_t v31 = result[1];
      uint64_t v32 = (a3 - 1);
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v34 = v33;
        uint64_t v35 = *v31++;
        void *v29 = v34;
        v29[1] = v35;
        v29 += 2;
        v27 += 0x200000000;
        --v32;
      }
      while (v32);
      uint64_t v36 = v27 >> 32;
      if ((int)v28 >= a3) {
        goto LABEL_42;
      }
    }
    else
    {
      unsigned int v28 = 0;
      uint64_t v36 = 0;
      if (a3 <= 0) {
        goto LABEL_42;
      }
    }
    unint64_t v66 = a3 - (unint64_t)v28;
    uint64_t v67 = v28;
    char v68 = &v26[v67];
    int8x16x2_t v69 = &v25[v67];
    int8x16x3_t v70 = &a2[v36 + 1];
    do
    {
      uint64_t v71 = *v69++;
      *(v70 - 1) = v71;
      uint64_t v72 = *v68++;
      void *v70 = v72;
      v70 += a4;
      --v66;
    }
    while (v66);
    goto LABEL_42;
  }
  if (v4 != 1)
  {
    char v37 = *result;
    uint64_t v38 = result[1];
    float32x4_t v39 = result[2];
    float32x4_t v40 = result[3];
    if (a4 == 4 && a3 >= 2)
    {
      uint64_t v41 = 0;
      unsigned int v42 = a3 - 1;
      BOOL v43 = a2;
      uint64_t v44 = *result;
      uint64_t v45 = result[1];
      int v46 = result[2];
      int v47 = result[3];
      uint64_t v48 = (a3 - 1);
      do
      {
        uint64_t v49 = *v44++;
        uint64_t v50 = v49;
        uint64_t v51 = *v45++;
        uint64_t v52 = v51;
        uint64_t v53 = *v46++;
        uint64_t v54 = v53;
        uint64_t v55 = *v47++;
        void *v43 = v50;
        v43[1] = v52;
        v43[2] = v54;
        v43[3] = v55;
        v43 += 4;
        v41 += 0x400000000;
        --v48;
      }
      while (v48);
      uint64_t v56 = v41 >> 32;
      if ((int)v42 >= a3) {
        goto LABEL_42;
      }
    }
    else
    {
      unsigned int v42 = 0;
      uint64_t v56 = 0;
      if (a3 <= 0) {
        goto LABEL_42;
      }
    }
    unint64_t v73 = a3 - (unint64_t)v42;
    uint64_t v74 = v42;
    uint64_t v75 = &v40[v74];
    uint64_t v76 = &v39[v74];
    uint64_t v77 = &v38[v74];
    uint64_t v78 = &v37[v74];
    uint64_t v79 = &a2[v56 + 2];
    do
    {
      uint64_t v80 = *v78++;
      *(v79 - 2) = v80;
      uint64_t v81 = *v77++;
      *(v79 - 1) = v81;
      uint64_t v82 = *v76++;
      *uint64_t v79 = v82;
      uint64_t v83 = *v75++;
      v79[1] = v83;
      v79 += a4;
      --v73;
    }
    while (v73);
    goto LABEL_42;
  }
  if (a3 < 1) {
    return result;
  }
  uint64_t v5 = *result;
  unint64_t v6 = a2;
  uint64_t v7 = a3;
  do
  {
    uint64_t v8 = *v5++;
    *unint64_t v6 = v8;
    v6 += a4;
    --v7;
  }
  while (v7);
LABEL_42:
  if (a3 >= 1 && v4 < a4)
  {
    uint64_t v84 = v4;
    uint64_t v85 = (uint64_t)&a2[v4 + 2];
    do
    {
      int v86 = &result[v84];
      int v87 = *v86;
      float32x4x2_t v88 = v86[1];
      float32x4x3_t v89 = v86[2];
      float32x4x4_t v90 = v86[3];
      uint64_t v91 = (void *)v85;
      uint64_t v92 = a3;
      do
      {
        uint64_t v93 = *v87++;
        *(v91 - 2) = v93;
        uint64_t v94 = *v88++;
        *(v91 - 1) = v94;
        uint64_t v95 = *v89++;
        void *v91 = v95;
        uint64_t v96 = *v90++;
        v91[1] = v96;
        v91 += a4;
        --v92;
      }
      while (v92);
      v84 += 4;
      v85 += 32;
    }
    while (v84 < a4);
  }
  return result;
}

void *sub_1002AB734(void *result)
{
  *uint64_t result = 0;
  return result;
}

atomic_uint **sub_1002AB73C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1 && byte_1004F8D38 == 0)
    {
      sub_1002AB8E8((uint64_t)v2);
      operator delete();
    }
  }
  return a1;
}

void sub_1002AB7A0()
{
}

void sub_1002AB7B8(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1002AB814(exception, a1);
}

void sub_1002AB800(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1002AB814(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_1002AB848(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_10026ADB4();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_1002AB8E8(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v2 = *(atomic_uint **)(a1 + 24);
  if (v2)
  {
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1 && byte_1004F8D38 == 0)
    {
      sub_1002AB8E8();
      operator delete();
    }
  }
  return a1;
}

uint64_t sub_1002AB958(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  int v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1002ABAC8(_Unwind_Exception *a1)
{
}

void sub_1002ABAE8(_Unwind_Exception *a1)
{
}

uint64_t sub_1002ABAFC(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_1002ABC00()
{
  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_1002D19D8(v0, 46), "The library is compiled without OpenGL support", 46);
  sub_1002D2278(-218, v0, "throw_no_ogl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/opengl.cpp", 60);
}

void sub_1002ABC5C()
{
  sub_1002D1A1C(&v0);
}

void sub_1002ABC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002ABC90(_DWORD *a1, uint64_t a2, double a3)
{
  sub_1002D6AE8(&v17, &off_100496198);
  if (v17)
  {
    sub_1002D7920((void **)&off_1004961B8);
    if (v17)
    {
      sub_1002D7920((void **)&off_1004961D0);
      if (v17) {
        sub_1002D7920((void **)&off_1004961E8);
      }
    }
  }
  if (*a1 == a1[1])
  {
LABEL_9:
    if (!v18) {
      return;
    }
    goto LABEL_10;
  }
  if (dword_1004E0AA0 || atomic_fetch_add(&dword_1004E0AA0, 1u))
  {
    (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 16))(a2, a1);
    goto LABEL_9;
  }
  if (dword_1004D2F80 < 2 || a1[1] - *a1 < 2)
  {
    (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 16))(a2, a1);
  }
  else
  {
    char v23 = 0;
    uint64_t v6 = *(void *)a1;
    double v7 = (double)(int)(HIDWORD(*(void *)a1) - *(void *)a1);
    v20[0] = a2;
    v20[1] = v6;
    double v8 = 1.0;
    if (a3 >= 1.0) {
      double v8 = a3;
    }
    if (v8 > v7) {
      double v8 = v7;
    }
    if (a3 > 0.0) {
      double v7 = v8;
    }
    uint64_t v9 = (uint64_t)rint(v7);
    int v21 = v9;
    uint64_t v22 = *sub_1002C6CC8();
    uint64_t v10 = sub_1002D58C0();
    unint64_t v11 = sub_1002D3A9C((_DWORD *)(v10 + 16));
    uint64_t v12 = v11[8];
    if (v12) {
      unsigned int v13 = (uint64_t *)(*(void *)(v11[4] + 8 * ((v12 + v11[7] - 1) / 0xAAuLL)) + 24 * ((v12 + v11[7] - 1) % 0xAAuLL));
    }
    else {
      unsigned int v13 = v11 + 13;
    }
    uint64_t v24 = *v13;
    uint64_t v14 = sub_1002D58C0();
    uint64_t v25 = sub_1002D3A9C((_DWORD *)(v14 + 16));
    context[0] = off_100496220;
    context[1] = v20;
    if (v9 == 1)
    {
      (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 16))(a2, a1);
    }
    else
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_apply_f((int)v9, global_queue, context, (void (__cdecl *)(void *, size_t))sub_1002AC148);
    }
    if (v23)
    {
      *sub_1002C6CC8() = v22;
      uint64_t v16 = sub_1002C6CC8();
      *uint64_t v16 = HIDWORD(*v16) + 4164903690 * *v16;
    }
    if (v24) {
      sub_1002D7670(v24);
    }
  }
  dword_1004E0AA0 = 0;
  if (v18) {
LABEL_10:
  }
    sub_1002D6888(&v17);
}

void sub_1002ABF6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1002AC198((uint64_t)va);
  __cxa_begin_catch(a1);
  *(_DWORD *)(v6 + 2720) = 0;
  __cxa_rethrow();
}

void sub_1002ABF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_end_catch();
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002ABFC4()
{
  if (!dword_1004D2F80) {
    return 1;
  }
  int v2 = 0;
  size_t v1 = 4;
  *(void *)uint64_t v3 = 0x1900000006;
  sysctl(v3, 2u, &v2, &v1, 0, 0);
  uint64_t result = v2;
  if (v2 <= 0)
  {
    v3[1] = 3;
    sysctl(v3, 2u, &v2, &v1, 0, 0);
    if (v2 <= 1) {
      return 1;
    }
    else {
      return v2;
    }
  }
  return result;
}

uint64_t sub_1002AC090()
{
  int v2 = 0;
  size_t v1 = 4;
  *(void *)uint64_t v3 = 0x1900000006;
  sysctl(v3, 2u, &v2, &v1, 0, 0);
  uint64_t result = v2;
  if (v2 <= 0)
  {
    v3[1] = 3;
    sysctl(v3, 2u, &v2, &v1, 0, 0);
    if (v2 <= 1) {
      return 1;
    }
    else {
      return v2;
    }
  }
  return result;
}

uint64_t sub_1002AC148(uint64_t a1, int a2)
{
  v3[0] = a2;
  v3[1] = a2 + 1;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, v3);
}

uint64_t sub_1002AC198(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    *sub_1002C6CC8() = *(void *)(a1 + 24);
    int v2 = sub_1002C6CC8();
    *int v2 = HIDWORD(*v2) + 4164903690 * *v2;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    sub_1002D7670(v3);
  }
  return a1;
}

void sub_1002AC200()
{
}

void sub_1002AC214(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 40);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 48);
    if (v6) {
      sub_1002D73CC(v5, v6);
    }
  }
  sub_1002D6AE8(&v21, &off_100496250);
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)(v7 + 40))
  {
    sub_1002D75D8();
    uint64_t v7 = *(void *)(a1 + 8);
  }
  *sub_1002C6CC8() = *(void *)(v7 + 24);
  double v8 = *(_DWORD **)(a1 + 8);
  int v9 = v8[2];
  int v10 = v8[3];
  unint64_t v11 = (int)v8[4];
  if ((v11 & 0x80000000) == 0) {
    int v12 = v8[4];
  }
  else {
    int v12 = v11 + 1;
  }
  uint64_t v13 = (uint64_t)v12 >> 1;
  int v14 = a2[1];
  int v15 = v9 + (v13 + *a2 * (uint64_t)(v10 - v9)) / v11;
  int v16 = v9 + (v13 + v14 * (uint64_t)(v10 - v9)) / v11;
  if (v14 < (int)v11) {
    int v17 = v16;
  }
  else {
    int v17 = v10;
  }
  v20[0] = v15;
  v20[1] = v17;
  if (v21)
  {
    sub_1002D7920((void **)&off_100496270);
    if (v21) {
      sub_1002D7920((void **)&off_100496288);
    }
  }
  (*(void (**)(void, _DWORD *))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8), v20);
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 32))
  {
    int v18 = sub_1002C6CC8();
    uint64_t v19 = *(void *)(a1 + 8);
    if (*v18 != *(void *)(v19 + 24)) {
      *(unsigned char *)(v19 + 32) = 1;
    }
  }
  if (v22) {
    sub_1002D6888(&v21);
  }
}

void sub_1002AC378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002AC38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002AC3A0(void **a1)
{
  if (!a1)
  {
    v4[0] = 0;
    v4[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v4, 35), "NULL double pointer to file storage", 35);
    sub_1002D2278(-27, v4, "cvReleaseFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 700);
  }
  size_t v1 = *a1;
  if (*a1)
  {
    *a1 = 0;
    sub_1002AC560((uint64_t)v1, 0);
    sub_10025A060((void **)v1 + 4);
    j__free(*((void **)v1 + 16));
    *((void *)v1 + 16) = 0;
    sub_10025A060((void **)v1 + 2);
    uint64_t v2 = *((void *)v1 + 47);
    if (v2)
    {
      sub_1002C6794(v2);
      operator delete();
    }
    uint64_t v3 = *((void *)v1 + 48);
    if (v3)
    {
      if (*(void *)v3)
      {
        sub_1002C5A80(*(void ***)v3);
        operator delete();
      }
      if (*(char *)(v3 + 31) < 0) {
        operator delete(*(void **)(v3 + 8));
      }
      operator delete();
    }
    if (*((void *)v1 + 51)) {
      operator delete[]();
    }
    if (*((void *)v1 + 53)) {
      operator delete[]();
    }
    *((void *)v1 + 54) = 0;
    *((_OWORD *)v1 + 25) = 0u;
    *((_OWORD *)v1 + 26) = 0u;
    *((_OWORD *)v1 + 23) = 0u;
    *((_OWORD *)v1 + 24) = 0u;
    *((_OWORD *)v1 + 21) = 0u;
    *((_OWORD *)v1 + 22) = 0u;
    *((_OWORD *)v1 + 19) = 0u;
    *((_OWORD *)v1 + 20) = 0u;
    *((_OWORD *)v1 + 17) = 0u;
    *((_OWORD *)v1 + 18) = 0u;
    *((_OWORD *)v1 + 15) = 0u;
    *((_OWORD *)v1 + 16) = 0u;
    *((_OWORD *)v1 + 13) = 0u;
    *((_OWORD *)v1 + 14) = 0u;
    *((_OWORD *)v1 + 11) = 0u;
    *((_OWORD *)v1 + 12) = 0u;
    *((_OWORD *)v1 + 9) = 0u;
    *((_OWORD *)v1 + 10) = 0u;
    *((_OWORD *)v1 + 7) = 0u;
    *((_OWORD *)v1 + 8) = 0u;
    *((_OWORD *)v1 + 5) = 0u;
    *((_OWORD *)v1 + 6) = 0u;
    *((_OWORD *)v1 + 3) = 0u;
    *((_OWORD *)v1 + 4) = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    *((_OWORD *)v1 + 2) = 0u;
    *(_OWORD *)size_t v1 = 0u;
    j__free(v1);
  }
}

void sub_1002AC548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002AC560(uint64_t a1, uint64_t *a2)
{
  if (a2) {
    sub_1002D1A1C(a2);
  }
  if (!a1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    qmemcpy((void *)sub_1002D19D8(&v27, 35), "NULL double pointer to file storage", 35);
    sub_1002D2278(-27, &v27, "icvClose", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 667);
  }
  if (*(unsigned char *)(a1 + 432))
  {
    if (!*(_DWORD *)(a1 + 8) || !*(void *)(a1 + 104) && !*(void *)(a1 + 112) && !*(void *)(a1 + 376)) {
      goto LABEL_22;
    }
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4 && *(int *)(v4 + 40) >= 1)
    {
      do
        sub_1002B2B88(a1);
      while (*(int *)(*(void *)(a1 + 56) + 40) > 0);
    }
    uint64_t v6 = *(char **)(a1 + 120);
    uint64_t v5 = *(char **)(a1 + 128);
    uint64_t v7 = *(int *)(a1 + 88);
    if (v6 > &v5[v7])
    {
      *(_WORD *)uint64_t v6 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t v5 = *(char **)(a1 + 128);
      LODWORD(v7) = *(_DWORD *)(a1 + 88);
    }
    int v8 = *(_DWORD *)(a1 + 64);
    if (v7 == v8)
    {
      *(void *)(a1 + 120) = &v5[(int)v7];
      int v9 = *(_DWORD *)(a1 + 4);
      if (v9 != 8)
      {
LABEL_17:
        if (v9 != 24)
        {
LABEL_22:
          unint64_t v11 = *(FILE **)(a1 + 104);
          if (v11)
          {
            fclose(v11);
          }
          else
          {
            int v12 = *(gzFile_s **)(a1 + 112);
            if (v12) {
              gzclose(v12);
            }
          }
          *(void *)(a1 + 352) = 0;
          *(void *)(a1 + 368) = 0;
          *(unsigned char *)(a1 + 432) = 0;
          *(void *)(a1 + 104) = 0;
          *(void *)(a1 + 112) = 0;
          goto LABEL_27;
        }
        int v10 = "}\n";
LABEL_21:
        sub_1002AF2B8((void *)a1, v10);
        goto LABEL_22;
      }
    }
    else
    {
      memset(v5, 32, v8);
      *(_DWORD *)(a1 + 88) = v8;
      *(void *)(a1 + 120) = *(void *)(a1 + 128) + v8;
      int v9 = *(_DWORD *)(a1 + 4);
      if (v9 != 8) {
        goto LABEL_17;
      }
    }
    int v10 = "</opencv_storage>\n";
    goto LABEL_21;
  }
LABEL_27:
  if (a2)
  {
    uint64_t v13 = *(void **)(a1 + 376);
    if (v13)
    {
      unint64_t v14 = v13[4];
      uint64_t v15 = v13[1];
      int v16 = (char *)(v15 + 8 * (v14 >> 12));
      if (v13[2] == v15)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        int v17 = (char *)(*(void *)v16 + (v13[4] & 0xFFFLL));
        unint64_t v18 = v13[5] + v14;
        uint64_t v19 = (char *)(v15 + 8 * (v18 >> 12));
        uint64_t v20 = (char *)(*(void *)v19 + (v18 & 0xFFF));
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        if (v20 != v17)
        {
          uint64_t v21 = &v20[512 * (v19 - v16)] - &v17[*(void *)v19] + *(void *)v16;
          if (v21)
          {
            int v22 = (unsigned char *)sub_1002D19D8(&v27, v21);
            do
            {
              char v23 = *v17++;
              *v22++ = v23;
              if (&v17[-*(void *)v16] == (char *)4096)
              {
                uint64_t v24 = (char *)*((void *)v16 + 1);
                v16 += 8;
                int v17 = v24;
              }
            }
            while (v17 != v20);
          }
        }
      }
      if (&v27 != a2)
      {
        sub_1002D1A1C(a2);
        uint64_t v25 = v27;
        if (v27)
        {
          atomic_fetch_add((atomic_uint *volatile)(v27 - 4), 1u);
          uint64_t v25 = v27;
        }
        uint64_t v26 = v28;
        *a2 = v25;
        a2[1] = v26;
      }
      sub_1002D1A1C(&v27);
    }
  }
}

void sub_1002AC830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002AC864(uint64_t a1, char *__s, unsigned int a3, int a4)
{
  if (!a1) {
    return 0;
  }
  LODWORD(v5) = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  if ((a3 & 0x80000000) != 0)
  {
    int v12 = *__s;
    if (*__s)
    {
      uint64_t v5 = 0;
      int v8 = 0;
      do
      {
        int v8 = 33 * v8 + v12;
        int v12 = __s[++v5];
      }
      while (v12);
    }
    else
    {
      int v8 = 0;
      LODWORD(v5) = 0;
    }
  }
  else
  {
    int v8 = 0;
    if (a3)
    {
      uint64_t v9 = a3;
      int v10 = __s;
      do
      {
        int v11 = *v10++;
        int v8 = 33 * v8 + v11;
        --v9;
      }
      while (v9);
    }
  }
  unsigned int v13 = v8 & 0x7FFFFFFF;
  unsigned int v14 = *(_DWORD *)(v7 + 108);
  if ((v14 & (v14 - 1)) != 0) {
    uint64_t v15 = v13 % v14;
  }
  else {
    uint64_t v15 = (v14 - 1) & v13;
  }
  uint64_t v16 = *(void *)(*(void *)(v7 + 112) + 8 * v15);
  if (!v16)
  {
LABEL_22:
    if (a4)
    {
      uint64_t v16 = *(void *)(v7 + 96);
      uint64_t v20 = v16;
      if (v16)
      {
        *(void *)(v7 + 96) = *(void *)(v16 + 8);
        *(_DWORD *)v16 &= 0x3FFFFFFu;
        ++*(_DWORD *)(v7 + 104);
      }
      else
      {
        sub_10025EC10(v7, 0, &v20);
        uint64_t v16 = v20;
      }
      *(_DWORD *)uint64_t v16 = v13;
      *(void *)(v16 + 8) = sub_10025A774(*(void *)(v7 + 72), __s, v5);
      *(void *)(v16 + 16) = v17;
      uint64_t v18 = *(void *)(v7 + 112);
      *(void *)(v16 + 24) = *(void *)(v18 + 8 * v15);
      *(void *)(v18 + 8 * v15) = v16;
      return v16;
    }
    return 0;
  }
  while (*(_DWORD *)v16 != v13
       || *(_DWORD *)(v16 + 8) != v5
       || memcmp(*(const void **)(v16 + 16), __s, (int)v5))
  {
    uint64_t v16 = *(void *)(v16 + 24);
    if (!v16) {
      goto LABEL_22;
    }
  }
  return v16;
}

uint64_t sub_1002ACA04(uint64_t a1, uint64_t a2, _DWORD *a3, int a4)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    *(void *)uint64_t v24 = 0;
    uint64_t v25 = 0;
    qmemcpy((void *)sub_1002D19D8(v24, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(-5, (uint64_t *)v24, "cvGetFileNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 786);
  }
  if (!a3)
  {
    *(void *)uint64_t v24 = 0;
    uint64_t v25 = 0;
    *(_OWORD *)sub_1002D19D8(v24, 16) = *(_OWORD *)"Null key element";
    sub_1002D2278(-27, (uint64_t *)v24, "cvGetFileNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 789);
  }
  if (!a2)
  {
    int v7 = 1;
LABEL_11:
    int v8 = 0;
    uint64_t v9 = 0;
    int v21 = v7;
    int v20 = v7 - 1;
    while (1)
    {
      uint64_t v12 = a2;
      if (!a2)
      {
        uint64_t v12 = sub_10025AB60(*(void *)(a1 + 48), v8);
        if (!v12)
        {
          *(void *)uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v19 = sub_1002D19D8(v24, 18);
          *(_WORD *)(v19 + 16) = 27756;
          *(_OWORD *)uint64_t v19 = *(_OWORD *)"map_node != __null";
          sub_1002D2278(-215, (uint64_t *)v24, "cvGetFileNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 807);
        }
      }
      int v13 = *(_DWORD *)v12 & 7;
      if (v13 != 6)
      {
        if (!v13) {
          return 0;
        }
        if (v13 != 5 || *(_DWORD *)(*(void *)(v12 + 16) + 40))
        {
          *(void *)uint64_t v24 = 0;
          uint64_t v25 = 0;
          qmemcpy((void *)sub_1002D19D8(v24, 49), "The node is neither a map nor an empty collection", 49);
          sub_1002D2278(-2, (uint64_t *)v24, "cvGetFileNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 812);
        }
        return 0;
      }
      uint64_t v14 = *(void *)(v12 + 16);
      unsigned int v15 = *(_DWORD *)(v14 + 108);
      if ((v15 & (v15 - 1)) != 0)
      {
        int v16 = *a3 % v15;
        uint64_t v17 = *(void *)(*(void *)(v14 + 112) + 8 * v16);
        if (!v17) {
          goto LABEL_25;
        }
      }
      else
      {
        int v16 = *a3 & (v15 - 1);
        uint64_t v17 = *(void *)(*(void *)(v14 + 112) + 8 * v16);
        if (!v17) {
          goto LABEL_25;
        }
      }
      if (!a4)
      {
        while (*(_DWORD **)(v17 + 32) != a3)
        {
          uint64_t v17 = *(void *)(v17 + 40);
          if (!v17) {
            goto LABEL_25;
          }
        }
        return v17;
      }
      do
      {
        if (*(_DWORD **)(v17 + 32) == a3)
        {
          sprintf(v24, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Duplicated key");
          sub_1002D2D20(-212, "cvGetFileNode", v24, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 832);
        }
        uint64_t v17 = *(void *)(v17 + 40);
      }
      while (v17);
LABEL_25:
      if (a4 && v8 == v20)
      {
        uint64_t v9 = *(void *)(v14 + 96);
        *(void *)uint64_t v24 = v9;
        if (v9)
        {
          *(void *)(v14 + 96) = *(void *)(v9 + 8);
          *(_DWORD *)v9 &= 0x3FFFFFFu;
          ++*(_DWORD *)(v14 + 104);
        }
        else
        {
          sub_10025EC10(v14, 0, v24);
          uint64_t v9 = *(void *)v24;
        }
        *(void *)(v9 + 32) = a3;
        uint64_t v10 = *(void *)(v14 + 112);
        uint64_t v11 = 8 * v16;
        *(void *)(v9 + 40) = *(void *)(v10 + v11);
        *(void *)(v10 + v11) = v9;
      }
      if (++v8 == v21) {
        return v9;
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 40);
    if (v7 >= 1) {
      goto LABEL_11;
    }
  }
  return 0;
}

void sub_1002ACDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1002D1A1C((uint64_t *)va);
  __break(1u);
}

void sub_1002ACDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002ACE70(const char *a1, int a2, char *a3, const char *a4, int a5)
{
  sprintf(v7, "%s(%d): %s", a1, a2, a4);
  sub_1002D2D20(-212, a3, v7, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", a5);
}

uint64_t sub_1002ACF04(uint64_t a1, uint64_t a2, unsigned char *__s2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = a2;
  if (*(_DWORD *)a1 != 1280131417)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    qmemcpy((void *)sub_1002D19D8(&v30, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(-5, &v30, "cvGetFileNodeByName", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 861);
  }
  if (!__s2)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v6 = sub_1002D19D8(&v30, 17);
    *(unsigned char *)(v6 + 16) = 101;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)"Null element name";
    sub_1002D2278(-27, &v30, "cvGetFileNodeByName", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 864);
  }
  int v7 = *__s2;
  if (*__s2)
  {
    size_t v8 = 0;
    int v9 = 0;
    do
    {
      int v9 = 33 * v9 + v7;
      int v7 = __s2[++v8];
    }
    while (v7);
    unsigned int v10 = v9 & 0x7FFFFFFF;
    int v11 = v8;
    if (a2) {
      goto LABEL_10;
    }
  }
  else
  {
    int v11 = 0;
    unsigned int v10 = 0;
    size_t v8 = 0;
    if (a2)
    {
LABEL_10:
      int v12 = *(_DWORD *)a2 & 7;
      if (!v12) {
        return 0;
      }
      if (v12 != 5)
      {
        if (v12 == 6)
        {
          uint64_t v13 = *(void *)(a2 + 16);
          unsigned int v14 = *(_DWORD *)(v13 + 108);
          uint64_t v15 = *(void *)(v13 + 112);
          if ((v14 & (v14 - 1)) != 0)
          {
            uint64_t v16 = *(void *)(v15 + 8 * (v10 % v14));
            if (!v16) {
              return 0;
            }
            while (1)
            {
              uint64_t v28 = *(void *)(v16 + 32);
              if (*(_DWORD *)v28 == v10 && *(_DWORD *)(v28 + 8) == v11 && !memcmp(*(const void **)(v28 + 16), __s2, v8)) {
                break;
              }
              uint64_t v17 = 0;
              uint64_t v16 = *(void *)(v16 + 40);
              if (!v16) {
                return v17;
              }
            }
          }
          else
          {
            uint64_t v16 = *(void *)(v15 + 8 * ((v14 - 1) & v10));
            if (!v16) {
              return 0;
            }
            while (1)
            {
              uint64_t v18 = *(void *)(v16 + 32);
              if (*(_DWORD *)v18 == v10 && *(_DWORD *)(v18 + 8) == v11 && !memcmp(*(const void **)(v18 + 16), __s2, v8)) {
                break;
              }
              uint64_t v17 = 0;
              uint64_t v16 = *(void *)(v16 + 40);
              if (!v16) {
                return v17;
              }
            }
          }
          return v16;
        }
LABEL_47:
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        qmemcpy((void *)sub_1002D19D8(&v30, 49), "The node is neither a map nor an empty collection", 49);
        sub_1002D2278(-2, &v30, "cvGetFileNodeByName", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 891);
      }
LABEL_46:
      if (*(_DWORD *)(*(void *)(v4 + 16) + 40)) {
        goto LABEL_47;
      }
      return 0;
    }
  }
  uint64_t v19 = *(void *)(a1 + 48);
  if (!v19) {
    return 0;
  }
  int v20 = *(_DWORD *)(v19 + 40);
  if (v20 < 1) {
    return 0;
  }
  int v21 = 0;
  while (1)
  {
    uint64_t v22 = sub_10025AB60(*(void *)(a1 + 48), v21);
    uint64_t v4 = v22;
    int v23 = *(_DWORD *)v22 & 7;
    if (v23 != 6)
    {
      if (!v23) {
        return 0;
      }
      if (v23 != 5) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    uint64_t v24 = *(void *)(v22 + 16);
    unsigned int v25 = *(_DWORD *)(v24 + 108);
    unsigned int v26 = (v25 & (v25 - 1)) != 0 ? v10 % v25 : (v25 - 1) & v10;
    uint64_t v17 = *(void *)(*(void *)(v24 + 112) + 8 * v26);
    if (v17) {
      break;
    }
LABEL_25:
    uint64_t v17 = 0;
    if (++v21 == v20) {
      return v17;
    }
  }
  while (1)
  {
    uint64_t v27 = *(void *)(v17 + 32);
    if (*(_DWORD *)v27 == v10 && *(_DWORD *)(v27 + 8) == v11 && !memcmp(*(const void **)(v27 + 16), __s2, v8)) {
      return v17;
    }
    uint64_t v17 = *(void *)(v17 + 40);
    if (!v17) {
      goto LABEL_25;
    }
  }
}

void sub_1002AD25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002AD2A4(char *__s, uint64_t a2, unsigned int a3, const char *a4)
{
  int v7 = __s;
  *((void *)&v195 + 1) = 0;
  *(void *)v196 = 0;
  int v8 = a3 & 3;
  if ((a3 & 3) != 0) {
    int v9 = (a3 >> 6) & 1;
  }
  else {
    LOBYTE(v9) = 0;
  }
  __p = 0;
  *(void *)&long long v195 = 0;
  if ((a3 & 4) == 0)
  {
    size_t v10 = strlen(__s);
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      sub_10026ADB4();
    }
    std::string::size_type v11 = v10;
    v192 = a4;
    char v190 = v9;
    int v191 = v8;
    uint64_t v189 = a2;
    if (v10 >= 0x17)
    {
      uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v13 = v10 | 7;
      }
      uint64_t v14 = v13 + 1;
      p_dst = (std::string *)operator new(v13 + 1);
      __dst.__r_.__value_.__l.__size_ = v11;
      __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10;
      p_dst = &__dst;
      if (!v10)
      {
LABEL_13:
        p_dst->__r_.__value_.__s.__data_[v11] = 0;
        *(void *)v202 = 0;
        long long v203 = 0uLL;
        if (std::string::find(&__dst, 10, 0) != -1) {
          goto LABEL_14;
        }
        unint64_t v20 = std::string::rfind(&__dst, 63, 0xFFFFFFFFFFFFFFFFLL);
        unint64_t v21 = v20;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          int v23 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ >= v20) {
            std::string::size_type v24 = v20;
          }
          else {
            std::string::size_type v24 = __dst.__r_.__value_.__l.__size_;
          }
          if (v24 <= 0x7FFFFFFFFFFFFFF7)
          {
LABEL_29:
            if (v24 >= 0x17)
            {
              uint64_t v94 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v24 | 7) != 0x17) {
                uint64_t v94 = v24 | 7;
              }
              uint64_t v95 = v94 + 1;
              p_s2 = (long long *)operator new(v94 + 1);
              *((void *)&__s2 + 1) = v24;
              unint64_t v201 = v95 | 0x8000000000000000;
              *(void *)&long long __s2 = p_s2;
            }
            else
            {
              HIBYTE(v201) = v24;
              p_s2 = &__s2;
              if (!v24)
              {
                LOBYTE(__s2) = 0;
                uint64_t v26 = v203;
                if ((unint64_t)v203 < *((void *)&v203 + 1))
                {
LABEL_32:
                  long long v27 = __s2;
                  *(void *)(v26 + 16) = v201;
                  *(_OWORD *)uint64_t v26 = v27;
                  *(void *)&long long v203 = v26 + 24;
                  goto LABEL_176;
                }
LABEL_174:
                *(void *)&long long v203 = sub_1002BCFA0((void **)v202, (uint64_t)&__s2);
                if (SHIBYTE(v201) < 0) {
                  operator delete((void *)__s2);
                }
LABEL_176:
                if (v21 == -1 || (std::string::size_type v96 = v21 + 1, v21 + 1 >= size))
                {
LABEL_14:
                  uint64_t v15 = (void **)__p;
                  a4 = v192;
                  int v8 = v191;
                  if (__p)
                  {
                    for (uint64_t i = (void **)v195; i != v15; i -= 3)
                    {
                      if (*((char *)i - 1) < 0) {
                        operator delete(*(i - 3));
                      }
                    }
                    *(void *)&long long v195 = v15;
                    operator delete(v15);
                  }
                  uint64_t v17 = *(char **)v202;
                  __p = *(void **)v202;
                  uint64_t v18 = (char *)v203;
                  long long v195 = v203;
                  long long v203 = 0uLL;
                  *(void *)v202 = 0;
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    unint64_t v188 = v18;
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    uint64_t v19 = v188;
                    if (v17 == v188) {
                      goto LABEL_35;
                    }
                  }
                  else
                  {
                    uint64_t v19 = v18;
                    if (v17 == v18) {
                      goto LABEL_35;
                    }
                  }
                  int v7 = v17;
                  if (v17[23] < 0)
                  {
                    int v7 = *(char **)v17;
                    if (v190) {
                      goto LABEL_36;
                    }
                    goto LABEL_38;
                  }
LABEL_35:
                  if (v190)
                  {
LABEL_36:
                    LOBYTE(v9) = 1;
LABEL_56:
                    a2 = v189;
                    goto LABEL_57;
                  }
LABEL_38:
                  HIBYTE(v201) = 6;
                  strcpy((char *)&__s2, "base64");
                  if (0xAAAAAAAAAAAAAAABLL * ((v19 - v17) >> 3) < 2 || v17 == v19)
                  {
                    LOBYTE(v9) = 0;
                  }
                  else
                  {
                    do
                    {
                      uint64_t v29 = v17[23];
                      if ((v29 & 0x80u) == 0) {
                        uint64_t v30 = v17[23];
                      }
                      else {
                        uint64_t v30 = *((void *)v17 + 1);
                      }
                      if (v30 == 6)
                      {
                        if ((v29 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v17, &__s2, *((void *)v17 + 1))) {
                            goto LABEL_55;
                          }
                        }
                        else
                        {
                          if (!v17[23]) {
                            goto LABEL_55;
                          }
                          uint64_t v31 = 0;
                          while (v17[v31] == *((unsigned char *)&__s2 + v31))
                          {
                            if (v29 == ++v31) {
                              goto LABEL_55;
                            }
                          }
                        }
                      }
                      v17 += 24;
                    }
                    while (v17 != v19);
                    uint64_t v17 = v19;
LABEL_55:
                    LOBYTE(v9) = v17 != v19 && v191 != 0;
                  }
                  goto LABEL_56;
                }
                while (1)
                {
                  std::string::size_type v98 = std::string::find(&__dst, 38, v96);
                  std::string::size_type v99 = v98;
                  if (v98 == v96 && v98 != -1 || v96 + 1 >= size) {
                    goto LABEL_180;
                  }
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::size_type v102 = __dst.__r_.__value_.__l.__size_;
                    if (__dst.__r_.__value_.__l.__size_ < v96) {
LABEL_393:
                    }
                      sub_1002AB7A0();
                    uint64_t v103 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    std::string::size_type v102 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    if (v96 > HIBYTE(__dst.__r_.__value_.__r.__words[2])) {
                      goto LABEL_393;
                    }
                    uint64_t v103 = &__dst;
                  }
                  size_t v104 = v102 - v96;
                  if (v104 >= v98 - v96) {
                    size_t v105 = v98 - v96;
                  }
                  else {
                    size_t v105 = v104;
                  }
                  if (v105 > 0x7FFFFFFFFFFFFFF7) {
                    sub_10026ADB4();
                  }
                  if (v105 >= 0x17) {
                    break;
                  }
                  HIBYTE(v201) = v105;
                  uint64_t v106 = &__s2;
                  if (v105) {
                    goto LABEL_204;
                  }
                  LOBYTE(__s2) = 0;
                  uint64_t v107 = v203;
                  if ((unint64_t)v203 >= *((void *)&v203 + 1)) {
                    goto LABEL_205;
                  }
LABEL_179:
                  long long v97 = __s2;
                  *(void *)(v107 + 16) = v201;
                  *(_OWORD *)uint64_t v107 = v97;
                  *(void *)&long long v203 = v107 + 24;
LABEL_180:
                  std::string::size_type v96 = v99 + 1;
                  if (v99 >= size) {
                    goto LABEL_14;
                  }
                }
                uint64_t v108 = (v105 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v105 | 7) != 0x17) {
                  uint64_t v108 = v105 | 7;
                }
                uint64_t v109 = v108 + 1;
                uint64_t v106 = (long long *)operator new(v108 + 1);
                *((void *)&__s2 + 1) = v105;
                unint64_t v201 = v109 | 0x8000000000000000;
                *(void *)&long long __s2 = v106;
LABEL_204:
                memmove(v106, (char *)v103 + v96, v105);
                *((unsigned char *)v106 + v105) = 0;
                uint64_t v107 = v203;
                if ((unint64_t)v203 >= *((void *)&v203 + 1))
                {
LABEL_205:
                  *(void *)&long long v203 = sub_1002BCFA0((void **)v202, (uint64_t)&__s2);
                  if (SHIBYTE(v201) < 0) {
                    operator delete((void *)__s2);
                  }
                  goto LABEL_180;
                }
                goto LABEL_179;
              }
            }
            memmove(p_s2, v23, v24);
            *((unsigned char *)p_s2 + v24) = 0;
            uint64_t v26 = v203;
            if ((unint64_t)v203 < *((void *)&v203 + 1)) {
              goto LABEL_32;
            }
            goto LABEL_174;
          }
        }
        else
        {
          std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          int v23 = &__dst;
          if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= v20) {
            std::string::size_type v24 = v20;
          }
          else {
            std::string::size_type v24 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          if (v24 <= 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_29;
          }
        }
        sub_10026ADB4();
      }
    }
    memcpy(p_dst, v7, v11);
    goto LABEL_13;
  }
LABEL_57:
  if (v7 && *v7)
  {
    size_t v32 = strlen(v7);
    int v33 = (a3 >> 2) & 1;
    if (v8 != 2) {
      goto LABEL_72;
    }
    goto LABEL_63;
  }
  if (!v8)
  {
    long long __s2 = 0uLL;
    if ((a3 & 4) != 0) {
      size_t v34 = 22;
    }
    else {
      size_t v34 = 20;
    }
    uint64_t v35 = (void *)sub_1002D19D8(&__s2, v34);
    if ((a3 & 4) != 0) {
      uint64_t v36 = "NULL or empty filename";
    }
    else {
      uint64_t v36 = "NULL or empty buffer";
    }
    memcpy(v35, v36, v34);
    sub_1002D2278(-27, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4198);
  }
  size_t v32 = 0;
  int v33 = 1;
  if (v8 == 2)
  {
LABEL_63:
    if (v33)
    {
      long long __s2 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&__s2, 68), "CV_STORAGE_APPEND and CV_STORAGE_MEMORY are not currently compatible", 68);
      sub_1002D2278(-206, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4205);
    }
  }
LABEL_72:
  uint64_t v37 = sub_10020FEBC(0x1B8uLL);
  *(void *)v196 = v37;
  if (!v37)
  {
    long long __s2 = 0uLL;
    *(_WORD *)sub_1002D19D8(&__s2, 2) = 29542;
    sub_1002D2278(-215, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4208);
  }
  *(void *)(v37 + 432) = 0;
  *(_OWORD *)(v37 + 400) = 0u;
  *(_OWORD *)(v37 + 416) = 0u;
  *(_OWORD *)(v37 + 368) = 0u;
  *(_OWORD *)(v37 + 384) = 0u;
  *(_OWORD *)(v37 + 336) = 0u;
  *(_OWORD *)(v37 + 352) = 0u;
  *(_OWORD *)(v37 + 304) = 0u;
  *(_OWORD *)(v37 + 320) = 0u;
  *(_OWORD *)(v37 + 272) = 0u;
  *(_OWORD *)(v37 + 288) = 0u;
  *(_OWORD *)(v37 + 240) = 0u;
  *(_OWORD *)(v37 + 256) = 0u;
  *(_OWORD *)(v37 + 208) = 0u;
  *(_OWORD *)(v37 + 224) = 0u;
  *(_OWORD *)(v37 + 176) = 0u;
  *(_OWORD *)(v37 + 192) = 0u;
  *(_OWORD *)(v37 + 144) = 0u;
  *(_OWORD *)(v37 + 160) = 0u;
  *(_OWORD *)(v37 + 112) = 0u;
  *(_OWORD *)(v37 + 128) = 0u;
  *(_OWORD *)(v37 + 80) = 0u;
  *(_OWORD *)(v37 + 96) = 0u;
  *(_OWORD *)(v37 + 48) = 0u;
  *(_OWORD *)(v37 + 64) = 0u;
  *(_OWORD *)(v37 + 16) = 0u;
  *(_OWORD *)(v37 + 32) = 0u;
  *(_OWORD *)uint64_t v37 = 0u;
  sub_100259F30(0x40000);
  uint64_t v39 = v38;
  uint64_t v40 = *(void *)v196;
  if (a2) {
    uint64_t v41 = a2;
  }
  else {
    uint64_t v41 = v39;
  }
  *(void *)(*(void *)v196 + 16) = v39;
  *(void *)(v40 + 24) = v41;
  *(_DWORD *)uint64_t v40 = 1280131417;
  *(_DWORD *)(v40 + 8) = v8 != 0;
  if (v33)
  {
    *(void *)(v40 + 48) = 0;
    *(void *)(v40 + 64) = 0;
    *(_DWORD *)(v40 + 144) = 71;
    if (*(_DWORD *)(v40 + 8)) {
LABEL_94:
    }
      operator new();
    char v50 = 0;
LABEL_260:
    *(void *)(v40 + 352) = v7;
    *(void *)(v40 + 360) = v32;
LABEL_261:
    sub_1002AF448((void *)v40, v202, (char *)0xE);
    if (v202[2] == 191 && v202[1] == 187 && v202[0] == 239) {
      uint64_t v133 = 3;
    }
    else {
      uint64_t v133 = 0;
    }
    if (!strncmp(&v202[v133], "%YAML", 5uLL))
    {
      uint64_t v134 = *(void *)v196;
      int v135 = 16;
    }
    else if (v202[v133] == 123)
    {
      uint64_t v134 = *(void *)v196;
      int v135 = 24;
    }
    else
    {
      int v136 = strncmp(&v202[v133], "<?xml", 5uLL);
      uint64_t v134 = *(void *)v196;
      if (v136)
      {
        if (*(void *)(*(void *)v196 + 360) == v133)
        {
          long long __s2 = 0uLL;
          uint64_t v137 = sub_1002D19D8(&__s2, 19);
          *(_DWORD *)(v137 + 15) = 2037674093;
          *(_OWORD *)uint64_t v137 = *(_OWORD *)"Input file is empty";
          sub_1002D2278(-49, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4484);
        }
        long long __s2 = 0uLL;
        qmemcpy((void *)sub_1002D19D8(&__s2, 31), "Unsupported file storage format", 31);
        sub_1002D2278(-49, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4486);
      }
      int v135 = 8;
    }
    *(_DWORD *)(v134 + 4) = v135;
    if (v50)
    {
      uint64_t v138 = 0x100000;
      uint64_t v139 = *(void *)v196;
      uint64_t v140 = *(FILE **)(*(void *)v196 + 104);
      if (v140)
      {
LABEL_280:
        rewind(v140);
LABEL_292:
        *(void *)(v139 + 368) = 0;
        uint64_t v144 = *(void *)v196;
        *(void *)(*(void *)v196 + 368) = v133;
        uint64_t v145 = *(void *)(v144 + 16);
        float64x2_t v146 = sub_10025EB10(0, 120, 32, v145);
        v146[27] = 256;
        uint64_t v147 = (void *)sub_10025A480(v145, 0x800uLL);
        *((void *)v146 + 14) = v147;
        bzero(v147, 0x800uLL);
        uint64_t v148 = *(void *)v196;
        *(void *)(*(void *)v196 + 40) = v146;
        uint64_t v149 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(v148 + 16));
        *(void *)(*(void *)v196 + 48) = v149;
        unint64_t v150 = (unsigned char *)sub_10020FEBC(v138 + 256);
        uint64_t v151 = *(void *)v196;
        *(void *)(*(void *)v196 + 120) = v150;
        *(void *)(v151 + 128) = v150;
        *(void *)(v151 + 136) = &v150[v138];
        *unint64_t v150 = 10;
        *(unsigned char *)(*(void *)(*(void *)v196 + 120) + 1) = 0;
        uint64_t v152 = *(void *)v196;
        int v153 = *(_DWORD *)(*(void *)v196 + 4);
        if (v153 == 24)
        {
          unint64_t v174 = sub_1002C244C(*(uint64_t *)v196, *(char **)(*(void *)v196 + 128));
          unint64_t v175 = v174;
          if (v174 && !*(_DWORD *)(v152 + 152))
          {
            int v176 = *v174;
            if (v176 == 91)
            {
              BOOL v180 = (uint64_t *)sub_10025BB1C(*(void *)(v152 + 48), 0);
              sub_1002C2AEC(v152, v175, v180);
            }
            else
            {
              if (v176 != 123)
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "left-brace of top level is missing");
                sub_1002D2D20(-212, "icvJSONParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3831);
              }
              unint64_t v177 = sub_10025BB1C(*(void *)(v152 + 48), 0);
              sub_1002C26F4(v152, v175, (uint64_t)v177);
            }
            if (*(_DWORD *)(v152 + 152))
            {
              sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Unexpected End-Of-File");
              sub_1002D2D20(-212, "icvJSONParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3835);
            }
          }
          goto LABEL_371;
        }
        if (v153 != 16)
        {
          if (v153 == 8)
          {
            uint64_t v154 = *(char **)(*(void *)v196 + 128);
            __dst.__r_.__value_.__r.__words[0] = 0;
            uint64_t v199 = 0;
            int v197 = 0;
            unint64_t v155 = sub_1002BDFE8(*(uint64_t *)v196, v154, 2);
            if (*(_DWORD *)v155 != 1836597052 || v155[4] != 108)
            {
              sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Valid XML should start with '<?xml ...?>'");
              sub_1002D2D20(-212, "icvXMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2825);
            }
            for (uint64_t j = sub_1002BE32C(v152, v155, (uint64_t *)&__dst, &v198, &v197); *j; uint64_t j = sub_1002BDFE8(v152, v162, 0))
            {
              uint64_t v158 = sub_1002BDFE8(v152, j, 0);
              if (!*v158) {
                break;
              }
              sub_1002BE32C(v152, v158, (uint64_t *)&__dst, &v198, &v197);
              std::string::size_type v159 = __dst.__r_.__value_.__r.__words[0];
              BOOL v160 = v197 != 1 || __dst.__r_.__value_.__r.__words[0] == 0;
              if (v160 || strcmp(*(const char **)(__dst.__r_.__value_.__r.__words[0] + 16), "opencv_storage"))
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "<opencv_storage> tag is missing");
                sub_1002D2D20(-212, "icvXMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2855);
              }
              sub_10025BB1C(*(void *)(v152 + 48), 0);
              uint64_t v161 = sub_1002BEA44(v152);
              uint64_t v162 = sub_1002BE32C(v152, v161, &v199, &v198, &v197);
              if (v197 != 2 || v159 != v199)
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "</opencv_storage> tag is missing");
                sub_1002D2D20(-212, "icvXMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2861);
              }
            }
          }
          goto LABEL_371;
        }
        uint64_t v163 = sub_1002C0664(*(uint64_t *)v196, *(char **)(*(void *)v196 + 128), 0);
        if (!v163)
        {
LABEL_371:
          j__free(*(void **)(*(void *)v196 + 128));
          uint64_t v71 = *(void *)v196;
          *(void *)(*(void *)v196 + 128) = 0;
          *(void *)(v71 + 136) = 0;
          *(void *)(v71 + 120) = 0;
LABEL_372:
          *(unsigned char *)(v71 + 432) = 1;
          goto LABEL_373;
        }
        char v164 = 0;
        while (1)
        {
          while (1)
          {
            int v165 = *v163;
            if (v165 == 45) {
              break;
            }
            if (v165 == 37)
            {
              BOOL v166 = *(_DWORD *)v163 == 1296128293 && v163[4] == 76;
              if (v166 && *(void *)v163 != 0x2E313A4C4D415925 && *(void *)v163 != 0x2E31204C4D415925)
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Unsupported YAML version (it must be 1.x)");
                sub_1002D2D20(-212, "icvYMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1836);
              }
              *uint64_t v163 = 0;
              goto LABEL_338;
            }
            if (v165 != 95 && (v165 - 48) >= 0xA && (v165 & 0xFFFFFFDF) - 65 > 0x19)
            {
              if (!*(_DWORD *)(v152 + 152))
              {
                sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Invalid or unsupported syntax");
                sub_1002D2D20(-212, "icvYMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1858);
              }
            }
            else if (v164)
            {
              sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "The YAML streams must start with '---', except the first one");
              sub_1002D2D20(-212, "icvYMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1852);
            }
LABEL_346:
            unint64_t v170 = sub_1002C0664(v152, v163, 0);
            if (*(_WORD *)v170 == 11822 && v170[2] == 46) {
              goto LABEL_398;
            }
            unint64_t v172 = sub_10025BB1C(*(void *)(v152 + 48), 0);
            unint64_t v173 = sub_1002C08F0(v152);
            if ((*(_DWORD *)v172 & 7u) <= 4)
            {
              sprintf((char *)&__s2, "%s(%d): %s", *(const char **)(v152 + 96), *(_DWORD *)(v152 + 148), "Only collections as YAML streams are supported by this parser");
              sub_1002D2D20(-212, "icvYMLParse", (char *)&__s2, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1869);
            }
            unint64_t v170 = sub_1002C0664(v152, (char *)v173, 0);
            if (v170)
            {
LABEL_398:
              if (!*(_DWORD *)(v152 + 152))
              {
                uint64_t v163 = sub_1002C0664(v152, v170 + 3, 0);
                char v164 = 1;
                if (v163) {
                  continue;
                }
              }
            }
            goto LABEL_371;
          }
          if (*(_WORD *)v163 == 11565 && v163[2] == 45)
          {
            v163 += 3;
            goto LABEL_346;
          }
          if ((v164 & 1) == 0) {
            goto LABEL_346;
          }
LABEL_338:
          uint64_t v163 = sub_1002C0664(v152, v163, 0);
          if (!v163) {
            goto LABEL_371;
          }
        }
      }
    }
    else
    {
      if (v33)
      {
        unint64_t v141 = *(void *)(*(void *)v196 + 360);
      }
      else
      {
        fseek(*(FILE **)(*(void *)v196 + 104), 0, 2);
        unint64_t v141 = ftell(*(FILE **)(*(void *)v196 + 104));
      }
      unint64_t v142 = 0x100000;
      if (v141 < 0x100000) {
        unint64_t v142 = v141;
      }
      if (v142 <= 0x2400) {
        uint64_t v138 = 9216;
      }
      else {
        uint64_t v138 = v142;
      }
      uint64_t v139 = *(void *)v196;
      uint64_t v140 = *(FILE **)(*(void *)v196 + 104);
      if (v140) {
        goto LABEL_280;
      }
    }
    float64x2_t v143 = *(gzFile_s **)(v139 + 112);
    if (v143) {
      gzrewind(v143);
    }
    goto LABEL_292;
  }
  unsigned int v42 = (char *)sub_10025A480(v39, v32 + 1);
  *(void *)(*(void *)v196 + 96) = v42;
  strcpy(v42, v7);
  uint64_t v43 = *(void *)v196;
  uint64_t v44 = *(char **)(*(void *)v196 + 96);
  uint64_t v45 = strrchr(v44, 46);
  if (v45
    && v45[1] == 103
    && v45[2] == 122
    && ((int v46 = v45[3], !v45[3]) || (v46 - 48) <= 9 && !v45[4]))
  {
    if (v8 == 2)
    {
      sub_1002AC3A0((void **)v196);
      sub_10022F344(&__s2, "Appending data to compressed file is not implemented");
      sub_1002D2278(-213, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4231);
    }
    if (v45[3])
    {
      v45[3] = 0;
      --v32;
    }
    else
    {
      LOBYTE(v46) = 51;
    }
    if (*(_DWORD *)(*(void *)v196 + 8)) {
      char v129 = 119;
    }
    else {
      char v129 = 114;
    }
    LOBYTE(__s2) = v129;
    BYTE1(__s2) = 98;
    WORD1(__s2) = v46;
    gzFile v130 = gzopen(*(const char **)(*(void *)v196 + 96), (const char *)&__s2);
    uint64_t v40 = *(void *)v196;
    *(void *)(*(void *)v196 + 112) = v130;
    if (v130)
    {
      char v50 = 1;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 64) = 0;
      *(_DWORD *)(v40 + 144) = 71;
      if (*(_DWORD *)(v40 + 8)) {
        goto LABEL_93;
      }
      goto LABEL_259;
    }
  }
  else
  {
    int v47 = "wt";
    if (v8 == 2) {
      int v47 = "a+t";
    }
    if (*(_DWORD *)(v43 + 8)) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = "rt";
    }
    uint64_t v49 = fopen(v44, v48);
    uint64_t v40 = *(void *)v196;
    *(void *)(*(void *)v196 + 104) = v49;
    if (v49)
    {
      char v50 = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 64) = 0;
      *(_DWORD *)(v40 + 144) = 71;
      if (*(_DWORD *)(v40 + 8))
      {
LABEL_93:
        int v51 = a3 & 0x38;
        if (v33) {
          goto LABEL_94;
        }
        if ((a3 & 0x38) == 0 && v7)
        {
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          while (1)
          {
            if (*v7 == 46)
            {
              uint64_t v53 = v52;
              uint64_t v52 = v7;
            }
            else if (!*v7)
            {
              if (v52
                && strlen(v52) == 3
                && (__darwin_ct_rune_t v54 = __tolower(*v52), v54 == __tolower(46))
                && (__darwin_ct_rune_t v55 = __tolower(v52[1]), v55 == __tolower(103)))
              {
                __darwin_ct_rune_t v56 = __tolower(v52[2]);
                if (v56 == __tolower(122) && v53 != 0) {
                  unint64_t v57 = v53;
                }
                else {
                  unint64_t v57 = v52;
                }
                if (!v57)
                {
LABEL_164:
                  int v51 = 16;
                  goto LABEL_165;
                }
              }
              else
              {
                unint64_t v57 = v52;
                if (!v52) {
                  goto LABEL_164;
                }
              }
              if (strlen(v57) == 4)
              {
                __darwin_ct_rune_t v66 = __tolower(*v57);
                if (v66 == __tolower(46))
                {
                  __darwin_ct_rune_t v67 = __tolower(v57[1]);
                  if (v67 == __tolower(120))
                  {
                    __darwin_ct_rune_t v68 = __tolower(v57[2]);
                    if (v68 == __tolower(109))
                    {
                      __darwin_ct_rune_t v69 = __tolower(v57[3]);
                      if (v69 == __tolower(108)) {
                        goto LABEL_128;
                      }
                    }
                  }
                }
              }
              if (strlen(v57) == 7
                && (__darwin_ct_rune_t v74 = __tolower(*v57), v74 == __tolower(46))
                && (__darwin_ct_rune_t v75 = __tolower(v57[1]), v75 == __tolower(120))
                && (__darwin_ct_rune_t v76 = __tolower(v57[2]), v76 == __tolower(109))
                && (__darwin_ct_rune_t v77 = __tolower(v57[3]), v77 == __tolower(108))
                && (__darwin_ct_rune_t v78 = __tolower(v57[4]), v78 == __tolower(46))
                && (__darwin_ct_rune_t v79 = __tolower(v57[5]), v79 == __tolower(103))
                && (__darwin_ct_rune_t v80 = __tolower(v57[6]), v80 == __tolower(122)))
              {
LABEL_128:
                int v51 = 8;
              }
              else
              {
                if (strlen(v57) != 5
                  || (__darwin_ct_rune_t v81 = __tolower(*v57), v81 != __tolower(46))
                  || (__darwin_ct_rune_t v82 = __tolower(v57[1]), v82 != __tolower(106))
                  || (__darwin_ct_rune_t v83 = __tolower(v57[2]), v83 != __tolower(115))
                  || (__darwin_ct_rune_t v84 = __tolower(v57[3]), v84 != __tolower(111))
                  || (__darwin_ct_rune_t v85 = __tolower(v57[4]), v85 != __tolower(110)))
                {
                  if (strlen(v57) != 8) {
                    goto LABEL_164;
                  }
                  __darwin_ct_rune_t v86 = __tolower(*v57);
                  if (v86 != __tolower(46)) {
                    goto LABEL_164;
                  }
                  __darwin_ct_rune_t v87 = __tolower(v57[1]);
                  if (v87 != __tolower(106)) {
                    goto LABEL_164;
                  }
                  __darwin_ct_rune_t v88 = __tolower(v57[2]);
                  if (v88 != __tolower(115)) {
                    goto LABEL_164;
                  }
                  __darwin_ct_rune_t v89 = __tolower(v57[3]);
                  if (v89 != __tolower(111)) {
                    goto LABEL_164;
                  }
                  __darwin_ct_rune_t v90 = __tolower(v57[4]);
                  if (v90 != __tolower(110)) {
                    goto LABEL_164;
                  }
                  __darwin_ct_rune_t v91 = __tolower(v57[5]);
                  if (v91 != __tolower(46)) {
                    goto LABEL_164;
                  }
                  __darwin_ct_rune_t v92 = __tolower(v57[6]);
                  if (v92 != __tolower(103)) {
                    goto LABEL_164;
                  }
                  __darwin_ct_rune_t v93 = __tolower(v57[7]);
                  if (v93 != __tolower(122)) {
                    goto LABEL_164;
                  }
                }
                int v51 = 24;
              }
LABEL_165:
              uint64_t v40 = *(void *)v196;
              *(_DWORD *)(*(void *)v196 + 4) = v51;
              if (v51 != 8)
              {
LABEL_166:
                unsigned int v58 = 17408;
                if (v8 != 2) {
                  goto LABEL_115;
                }
LABEL_114:
                fseek(*(FILE **)(v40 + 104), 0, 2);
                uint64_t v40 = *(void *)v196;
                int v51 = *(_DWORD *)(*(void *)v196 + 4);
                goto LABEL_115;
              }
LABEL_113:
              unsigned int v58 = 25600;
              int v51 = 8;
              if (v8 != 2) {
                goto LABEL_115;
              }
              goto LABEL_114;
            }
            ++v7;
          }
        }
        if ((a3 & 0x38) != 0)
        {
          *(_DWORD *)(v40 + 4) = v51;
          if (v51 != 8) {
            goto LABEL_166;
          }
          goto LABEL_113;
        }
        *(_DWORD *)(v40 + 4) = 8;
        unsigned int v58 = 25600;
        int v51 = 8;
        if (v8 == 2) {
          goto LABEL_114;
        }
LABEL_115:
        if (v51 == 8) {
          unint64_t v59 = 40;
        }
        else {
          unint64_t v59 = 4;
        }
        float32x4_t v60 = sub_10025A7E4(0, 0x60uLL, v59, *(void *)(v40 + 16));
        uint64_t v61 = *(void *)v196;
        *(void *)(*(void *)v196 + 56) = v60;
        *(_DWORD *)(v61 + 12) = 1;
        *(void *)(v61 + 64) = 0x2000000000;
        uint64_t v62 = sub_10020FEBC(v58 + 1024);
        uint64_t v63 = *(void *)v196;
        *(void *)(*(void *)v196 + 120) = v62;
        *(void *)(v63 + 128) = v62;
        *(void *)(v63 + 136) = v62 + v58;
        *(void *)(v63 + 384) = 0;
        *(unsigned char *)(v63 + 392) = v9;
        *(_DWORD *)(v63 + 396) = 0;
        *(unsigned char *)(v63 + 400) = 0;
        *(void *)(v63 + 408) = 0;
        *(_DWORD *)(v63 + 416) = 0;
        *(void *)(v63 + 424) = 0;
        int v64 = *(_DWORD *)(v63 + 4);
        if (v64 == 16)
        {
          if (v8 == 2) {
            int8x16x3_t v70 = "...\n---\n";
          }
          else {
            int8x16x3_t v70 = "%YAML:1.0\n---\n";
          }
          sub_1002AF2B8((void *)v63, v70);
          uint64_t v71 = *(void *)v196;
          *(void *)(*(void *)v196 + 296) = sub_1002B05A8;
          *(void *)(v71 + 304) = sub_1002B0810;
          *(void *)(v71 + 312) = sub_1002B09E4;
          *(void *)(v71 + 320) = sub_1002B0A88;
          *(void *)(v71 + 328) = sub_1002B0BDC;
          *(void *)(v71 + 336) = sub_1002B0F64;
          uint64_t v72 = sub_1002B1304;
        }
        else if (v64 == 8)
        {
          if (*(void *)(v63 + 104))
          {
            uint64_t v65 = ftell(*(FILE **)(v63 + 104));
            uint64_t v63 = *(void *)v196;
          }
          else
          {
            uint64_t v65 = 0;
          }
          sub_100259FE0(*(void *)(v63 + 16));
          uint64_t v111 = v110;
          uint64_t v112 = *(void *)v196;
          *(void *)(*(void *)v196 + 32) = v111;
          if (v8 == 2 && v65)
          {
            if ((int)v65 >= 1024) {
              uint64_t v113 = 1024;
            }
            else {
              uint64_t v113 = v65;
            }
            fseek(*(FILE **)(v112 + 104), -(int)v113, 2);
            int v114 = (char *)sub_10020FEBC((int)v113 + 2);
            int v115 = -1;
            while (1)
            {
              int v116 = ftell(*(FILE **)(*(void *)v196 + 104));
              uint64_t v117 = sub_1002AF448(*(void **)v196, v114, (char *)v113);
              int v118 = (int)v117;
              if (!v117) {
                break;
              }
              uint64_t v119 = strstr(v117, "</opencv_storage>");
              if (v119)
              {
                do
                {
                  int v120 = (int)v119;
                  uint64_t v119 = strstr(v119 + 17, "</opencv_storage>");
                }
                while (v119);
                int v115 = v120 - v118 + v116;
              }
            }
            j__free(v114);
            if (v115 < 0)
            {
              sub_1002AC3A0((void **)v196);
              long long __s2 = 0uLL;
              qmemcpy((void *)sub_1002D19D8(&__s2, 53), "Could not find </opencv_storage> in the end of file.\n", 53);
              sub_1002D2278(-2, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4383);
            }
            uint64_t v121 = *(void *)v196;
            uint64_t v123 = (void *)(*(void *)v196 + 104);
            double v122 = *(FILE **)(*(void *)v196 + 104);
            if (v122)
            {
              fclose(v122);
            }
            else
            {
              uint64_t v124 = *(gzFile_s **)(*(void *)v196 + 112);
              if (v124) {
                gzclose(v124);
              }
            }
            *(void *)(v121 + 352) = 0;
            *(void *)(v121 + 368) = 0;
            *(unsigned char *)(v121 + 432) = 0;
            *uint64_t v123 = 0;
            v123[1] = 0;
            unint64_t v125 = fopen(*(const char **)(*(void *)v196 + 96), "r+t");
            *(void *)(*(void *)v196 + 104) = v125;
            if (!v125)
            {
              long long __s2 = 0uLL;
              *(void *)sub_1002D19D8(&__s2, 8) = 0x656C69663E2D7366;
              sub_1002D2278(-215, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4387);
            }
            fseek(v125, v115, 0);
            sub_1002AF2B8(*(void **)v196, " <!-- resumed -->");
            fseek(*(FILE **)(*(void *)v196 + 104), 0, 2);
            sub_1002AF2B8(*(void **)v196, "\n");
          }
          else
          {
            if (a4)
            {
              if (!strcmp(a4, "UTF-16") || !strcmp(a4, "utf-16") || !strcmp(a4, "Utf-16"))
              {
                sub_1002AC3A0((void **)v196);
                long long __s2 = 0uLL;
                qmemcpy((void *)sub_1002D19D8(&__s2, 57), "UTF-16 XML encoding is not supported! Use 8-bit encoding\n", 57);
                sub_1002D2278(-5, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4342);
              }
              if (strlen(a4) >= 0x3E8)
              {
                long long __s2 = 0uLL;
                qmemcpy((void *)sub_1002D19D8(&__s2, 23), "strlen(encoding) < 1000", 23);
                sub_1002D2278(-215, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4345);
              }
              sprintf((char *)&__s2, "<?xml version=\"1.0\" encoding=\"%s\"?>\n", a4);
              sub_1002AF2B8(*(void **)v196, (char *)&__s2);
            }
            else
            {
              sub_1002AF2B8((void *)v112, "<?xml version=\"1.0\"?>\n");
            }
            sub_1002AF2B8(*(void **)v196, "<opencv_storage>\n");
          }
          uint64_t v71 = *(void *)v196;
          *(void *)(*(void *)v196 + 296) = sub_1002AF5B4;
          *(void *)(v71 + 304) = sub_1002AF7E4;
          *(void *)(v71 + 312) = sub_1002AF8C8;
          *(void *)(v71 + 320) = sub_1002AF998;
          *(void *)(v71 + 328) = sub_1002AFAF8;
          *(void *)(v71 + 336) = sub_1002AFF00;
          uint64_t v72 = sub_1002B04B4;
        }
        else
        {
          if (v8 == 2)
          {
            if (fseek(*(FILE **)(v63 + 104), 0, 2))
            {
LABEL_139:
              long long __s2 = 0uLL;
              qmemcpy((void *)sub_1002D19D8(&__s2, 39), "Could not find '}' in the end of file.\n", 39);
              sub_1002D2278(-2, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4447);
            }
            uint64_t v73 = 0;
            while (fgetc(*(FILE **)(*(void *)v196 + 104)) != 125)
            {
              if (fseek(*(FILE **)(*(void *)v196 + 104), --v73, 2)) {
                goto LABEL_139;
              }
            }
            fseek(*(FILE **)(*(void *)v196 + 104), v73, 2);
            uint64_t v126 = *(void *)v196;
            unint64_t v128 = (void *)(*(void *)v196 + 104);
            unint64_t v127 = *(FILE **)(*(void *)v196 + 104);
            if (v127)
            {
              fclose(v127);
            }
            else
            {
              unint64_t v178 = *(gzFile_s **)(*(void *)v196 + 112);
              if (v178) {
                gzclose(v178);
              }
            }
            *(void *)(v126 + 352) = 0;
            *(void *)(v126 + 368) = 0;
            *(unsigned char *)(v126 + 432) = 0;
            *unint64_t v128 = 0;
            v128[1] = 0;
            unint64_t v179 = fopen(*(const char **)(*(void *)v196 + 96), "r+t");
            *(void *)(*(void *)v196 + 104) = v179;
            if (!v179)
            {
              sub_10022F344(&__s2, "fs->file");
              sub_1002D2278(-215, (uint64_t *)&__s2, "cvOpenFileStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4441);
            }
            fseek(v179, v73, 2);
            fputs(",", *(FILE **)(*(void *)v196 + 104));
          }
          else
          {
            sub_1002AF2B8((void *)v63, "{\n");
          }
          uint64_t v71 = *(void *)v196;
          *(_DWORD *)(*(void *)v196 + 64) = 4;
          *(void *)(v71 + 296) = sub_1002B1408;
          *(void *)(v71 + 304) = sub_1002B15FC;
          *(void *)(v71 + 312) = sub_1002B17EC;
          *(void *)(v71 + 320) = sub_1002B1890;
          *(void *)(v71 + 328) = sub_1002B1A10;
          *(void *)(v71 + 336) = sub_1002B1D1C;
          uint64_t v72 = sub_1002B20C8;
        }
        *(void *)(v71 + 344) = v72;
        goto LABEL_372;
      }
LABEL_259:
      if (!v33) {
        goto LABEL_261;
      }
      goto LABEL_260;
    }
  }
LABEL_373:
  if ((variable initialization expression of PointTrail.isStarted() & 0x80000000) == 0)
  {
    uint64_t v181 = *(void *)v196;
    BOOL v183 = (void *)(*(void *)v196 + 104);
    unint64_t v182 = *(FILE **)(*(void *)v196 + 104);
    if (v182)
    {
      if (*(_DWORD *)(*(void *)v196 + 8)) {
        goto LABEL_385;
      }
      fclose(v182);
LABEL_383:
      *(void *)(v181 + 352) = 0;
      *(void *)(v181 + 368) = 0;
      *(unsigned char *)(v181 + 432) = 0;
      *BOOL v183 = 0;
      v183[1] = 0;
      uint64_t v181 = *(void *)v196;
      *(unsigned char *)(*(void *)v196 + 432) = 1;
      goto LABEL_385;
    }
    unint64_t v184 = *(gzFile_s **)(*(void *)v196 + 112);
    if (v184)
    {
      if (*(_DWORD *)(*(void *)v196 + 8)) {
        goto LABEL_385;
      }
      gzclose(v184);
      goto LABEL_383;
    }
    if (*(void *)(*(void *)v196 + 376) || *(void *)(*(void *)v196 + 352))
    {
      if (*(_DWORD *)(*(void *)v196 + 8)) {
        goto LABEL_385;
      }
      goto LABEL_383;
    }
  }
  sub_1002AC3A0((void **)v196);
  uint64_t v181 = *(void *)v196;
LABEL_385:
  int v185 = (void **)__p;
  if (__p)
  {
    for (k = (void **)v195; k != v185; k -= 3)
    {
      if (*((char *)k - 1) < 0) {
        operator delete(*(k - 3));
      }
    }
    operator delete(v185);
  }
  return v181;
}

void sub_1002AF008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void sub_1002AF228()
{
}

void sub_1002AF234(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1002AF244(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1002AF2B8(void *a1, char *__s)
{
  uint64_t v2 = __s;
  uint64_t v3 = (void *)a1[47];
  if (v3)
  {
    size_t v4 = strlen(__s);
    if (v4)
    {
      size_t v5 = v4;
      uint64_t v6 = v3[5];
      do
      {
        uint64_t v8 = v3[2];
        uint64_t v9 = v3[1];
        if (v8 == v9) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = ((v8 - v9) << 9) - 1;
        }
        unint64_t v11 = v3[4] + v6;
        if (v10 == v11)
        {
          sub_1002BD10C((uint64_t)v3);
          uint64_t v9 = v3[1];
          unint64_t v11 = v3[5] + v3[4];
        }
        char v7 = *v2++;
        *(unsigned char *)(*(void *)(v9 + ((v11 >> 9) & 0x7FFFFFFFFFFFF8)) + (v11 & 0xFFF)) = v7;
        uint64_t v6 = v3[5] + 1;
        v3[5] = v6;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    int v12 = (FILE *)a1[13];
    if (v12)
    {
      fputs(v2, v12);
    }
    else
    {
      uint64_t v13 = (gzFile_s *)a1[14];
      if (!v13)
      {
        v14[0] = 0;
        v14[1] = 0;
        qmemcpy((void *)sub_1002D19D8(v14, 25), "The storage is not opened", 25);
        sub_1002D2278(-2, v14, "icvPuts", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 405);
      }
      gzputs(v13, v2);
    }
  }
}

void sub_1002AF430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_1002AF448(void *a1, char *a2, char *buf)
{
  uint64_t v3 = a1[44];
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v6 = a1[45];
    uint64_t v5 = a1[46];
    uint64_t v7 = v3 + v5;
    while (1)
    {
      uint64_t v8 = v4;
      uint64_t v9 = v5 + v4;
      if (v5 + v4 >= v6 || v4 >= (int)buf - 1) {
        break;
      }
      int v11 = *(unsigned __int8 *)(v7 + v4);
      if (*(unsigned char *)(v7 + v4))
      {
        ++v4;
        a2[v8] = v11;
        if (v11 != 10) {
          continue;
        }
      }
      uint64_t v9 = v5 + v8 + 1;
      LODWORD(v8) = v4;
      break;
    }
    a2[(int)v8] = 0;
    a1[46] = v9;
    if ((int)v8 <= 0) {
      return 0;
    }
    else {
      return a2;
    }
  }
  else
  {
    int v12 = (FILE *)a1[13];
    if (v12)
    {
      return fgets(a2, (int)buf, v12);
    }
    else
    {
      uint64_t v14 = (gzFile_s *)a1[14];
      if (!v14)
      {
        v15[0] = 0;
        v15[1] = 0;
        qmemcpy((void *)sub_1002D19D8(v15, 25), "The storage is not opened", 25);
        sub_1002D2278(-2, v15, "icvGets", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 434);
      }
      return gzgets(v14, a2, (int)buf);
    }
  }
}

uint64_t sub_1002AF57C()
{
  sub_1002D1A1C(&v1);
  return 0;
}

void sub_1002AF59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_1002AF5B4(uint64_t a1, char *a2, char a3, unsigned char *a4)
{
  memset(v19, 0, sizeof(v19));
  if ((a3 & 7u) <= 4)
  {
    v14[0] = 0;
    v14[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v14, 66), "Some collection type: CV_NODE_SEQ or CV_NODE_MAP must be specified", 66);
    sub_1002D2278(-5, v14, "icvXMLStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2974);
  }
  if (a4 && *a4)
  {
    *(void *)&v19[0] = "type_id";
    *((void *)&v19[0] + 1) = a4;
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(void *)&v19[v7] = 0;
  sub_1002BDA08(a1, a2, 1, (void **)v19, 0);
  unsigned int v8 = *(_DWORD *)(a1 + 68) & 0xFFFFFFDF;
  int v17 = *(_DWORD *)(a1 + 64);
  unsigned int v18 = v8;
  long long v16 = *(_OWORD *)(a1 + 72);
  sub_10025A2E8(*(void *)(a1 + 32), (uint64_t)__src);
  uint64_t result = sub_10025BB1C(*(void *)(a1 + 56), __src);
  int v10 = *(_DWORD *)(a1 + 64) + 2;
  *(_DWORD *)(a1 + 64) = v10;
  if ((a3 & 8) == 0)
  {
    int v11 = *(char **)(a1 + 120);
    uint64_t result = *(char **)(a1 + 128);
    uint64_t v12 = *(int *)(a1 + 88);
    if (v11 > &result[v12])
    {
      *(_WORD *)int v11 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t result = *(char **)(a1 + 128);
      LODWORD(v12) = *(_DWORD *)(a1 + 88);
      int v10 = *(_DWORD *)(a1 + 64);
    }
    if (v12 != v10)
    {
      memset(result, 32, v10);
      *(_DWORD *)(a1 + 88) = v10;
      uint64_t result = *(char **)(a1 + 128);
    }
    *(void *)(a1 + 120) = &result[v10];
  }
  *(_DWORD *)(a1 + 68) = a3 & 0xF | 0x20;
  if (a2)
  {
    uint64_t result = (char *)sub_10025A774(*(void *)(a1 + 32), a2, 0xFFFFFFFF);
    *(void *)(a1 + 72) = result;
  }
  else
  {
    uint64_t v13 = 0;
    *(_DWORD *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 80) = v13;
  return result;
}

void sub_1002AF7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AF7E4(uint64_t a1)
{
  if (!*(_DWORD *)(*(void *)(a1 + 56) + 40))
  {
    v4[0] = 0;
    v4[1] = 0;
    uint64_t v2 = sub_1002D19D8(v4, 20);
    *(_DWORD *)(v2 + 16) = 1734439968;
    *(_OWORD *)uint64_t v2 = *(_OWORD *)"An extra closing tag";
    sub_1002D2278(-2, v4, "icvXMLEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3017);
  }
  sub_1002BDA08(a1, *(const char **)(a1 + 80), 2, 0, 0);
  sub_10025BBFC(*(int **)(a1 + 56), __dst);
  *(void *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  return sub_10025A374(*(void *)(a1 + 32), __dst);
}

void sub_1002AF8B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1002AF8C8(uint64_t a1, const char *a2, int a3)
{
  if (a3 >= 0) {
    unsigned int v5 = a3;
  }
  else {
    unsigned int v5 = -a3;
  }
  v11[1] = 0;
  long long v6 = v11;
  do
  {
    *v6-- = v5 % 0xA + 48;
    BOOL v7 = v5 >= 9;
    BOOL v8 = v5 == 9;
    v5 /= 0xAu;
  }
  while (!v8 && v7);
  if (a3 < 0) {
    *long long v6 = 45;
  }
  else {
    ++v6;
  }
  int v9 = strlen(v6);
  return sub_1002B3DFC(a1, a2, v6, v9);
}

void *sub_1002AF998(uint64_t a1, const char *a2, double a3)
{
  if ((~HIDWORD(a3) & 0x7FF00000) != 0)
  {
    uint64_t v6 = (uint64_t)rint(a3);
    if ((double)(int)v6 == a3)
    {
      sprintf(__dst, "%d.", v6);
    }
    else
    {
      BOOL v8 = __dst;
      sprintf(__dst, "%.16e", a3);
      if (__dst[0] == 45 || __dst[0] == 43) {
        BOOL v8 = &__dst[1];
      }
      do
      {
        int v10 = *v8++;
        int v9 = v10;
      }
      while ((v10 - 48) < 0xA);
      if (v9 == 44) {
        *(v8 - 1) = 46;
      }
    }
  }
  else
  {
    unsigned int v5 = HIDWORD(a3) & 0x7FFFFFFF;
    if (LODWORD(a3)) {
      ++v5;
    }
    if (v5 < 0x7FF00001)
    {
      if (a3 >= 0.0) {
        BOOL v7 = ".Inf";
      }
      else {
        BOOL v7 = "-.Inf";
      }
      strcpy(__dst, v7);
    }
    else
    {
      strcpy(__dst, ".Nan");
    }
  }
  int v11 = strlen(__dst);
  return sub_1002B3DFC(a1, a2, __dst, v11);
}

void *sub_1002AFAF8(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  int v4 = v3;
  unsigned int v5 = v2;
  BOOL v7 = v6;
  uint64_t v8 = v1;
  if (!v2)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v9 = sub_1002D19D8(&v29, 19);
    *(_DWORD *)(v9 + 15) = 1919251566;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)"Null string pointer";
    sub_1002D2278(-27, &v29, "icvXMLWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3122);
  }
  int v10 = strlen(v2);
  int v11 = v10;
  if (v10 > 4096)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    qmemcpy((void *)sub_1002D19D8(&v29, 30), "The written string is too long", 30);
    sub_1002D2278(-5, &v29, "icvXMLWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3126);
  }
  if (v4) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v10 == 0;
  }
  int v13 = v12;
  if (v12 || *v5 != 34 || v5[v10 - 1] != 34)
  {
    char v31 = 34;
    uint64_t v14 = &v31;
    uint64_t v15 = v32;
    if (v10 >= 1)
    {
      uint64_t v16 = v10;
      uint64_t v14 = &v31;
      int v17 = v5;
      do
      {
        while (1)
        {
          while (1)
          {
            unsigned __int8 v19 = *v17++;
            unsigned __int8 v18 = v19;
            if ((v19 & 0x80) == 0 && v18 != 32) {
              break;
            }
            *uint64_t v15 = v18;
            int v13 = 1;
            uint64_t v14 = v15++;
            if (!--v16) {
              goto LABEL_38;
            }
          }
          if (v18 < 0x20u) {
            break;
          }
          if (v18 <= 0x3Eu && ((1 << v18) & 0x500000C400000000) != 0) {
            break;
          }
          *uint64_t v15 = v18;
          uint64_t v14 = v15++;
          if (!--v16) {
            goto LABEL_38;
          }
        }
        unint64_t v21 = v14 + 2;
        *uint64_t v15 = 38;
        switch(v18)
        {
          case '""':
            int v22 = 1953461617;
            goto LABEL_30;
          case '&':
            v14[4] = 112;
            *(_WORD *)unint64_t v21 = 28001;
            uint64_t v23 = 5;
            break;
          case '\'':
            int v22 = 1936683105;
LABEL_30:
            *(_DWORD *)unint64_t v21 = v22;
            goto LABEL_31;
          case '<':
            __int16 v24 = 29804;
            goto LABEL_34;
          case '>':
            __int16 v24 = 29799;
LABEL_34:
            *(_WORD *)unint64_t v21 = v24;
            uint64_t v23 = 4;
            break;
          default:
            sprintf(v21, "#x%02x", v18);
LABEL_31:
            uint64_t v23 = 6;
            break;
        }
        unsigned int v25 = &v14[v23];
        *unsigned int v25 = 59;
        int v13 = 1;
        uint64_t v14 = v25;
        uint64_t v15 = v25 + 1;
        --v16;
      }
      while (v16);
    }
LABEL_38:
    if (v13
      || (unsigned int v26 = *(unsigned __int8 *)v5, v26 - 48 < 0xA)
      || (int v27 = 1, v26 <= 0x2E) && ((1 << v26) & 0x680000000000) != 0)
    {
      int v27 = 0;
      *uint64_t v15 = 34;
      uint64_t v15 = v14 + 2;
    }
    int v11 = v15 - &v31 - v27;
    *uint64_t v15 = 0;
    unsigned int v5 = &v32[v27 - 1];
  }
  return sub_1002B3DFC(v8, v7, v5, v11);
}

void sub_1002AFE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002AFF00(uint64_t a1, char *__s1, int a3)
{
  int v4 = __s1;
  if (!__s1)
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v6 = sub_1002D19D8(&v58, 12);
    *(_DWORD *)(v6 + 8) = 1953391981;
    *(void *)uint64_t v6 = *(void *)"Null comment";
    sub_1002D2278(-27, &v58, "icvXMLWriteComment", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3205);
  }
  if (strstr(__s1, "--"))
  {
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    qmemcpy((void *)sub_1002D19D8(&v58, 49), "Double hyphen '--' is not allowed in the comments", 49);
    sub_1002D2278(-5, &v58, "icvXMLWriteComment", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3208);
  }
  int v7 = strlen(v4);
  uint64_t v8 = strchr(v4, 10);
  uint64_t v9 = v8;
  int v10 = *(char **)(a1 + 120);
  if (a3 && !v8 && *(void *)(a1 + 136) - (void)v10 >= v7 + 5)
  {
    if ((unint64_t)v10 > *(void *)(a1 + 128) + *(int *)(a1 + 64)) {
      *v10++ = 32;
    }
    goto LABEL_18;
  }
  int v11 = *(char **)(a1 + 128);
  uint64_t v12 = *(int *)(a1 + 88);
  if (v10 > &v11[v12])
  {
    *(_WORD *)int v10 = 10;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    int v11 = *(char **)(a1 + 128);
    LODWORD(v12) = *(_DWORD *)(a1 + 88);
  }
  int v13 = *(_DWORD *)(a1 + 64);
  if (v12 == v13)
  {
    int v10 = &v11[(int)v12];
    *(void *)(a1 + 120) = v10;
    if (!v9) {
      goto LABEL_18;
    }
LABEL_15:
    strcpy(v10, "<!--");
    uint64_t v16 = 4;
    goto LABEL_26;
  }
  uint64_t v14 = v13;
  memset(v11, 32, v13);
  *(_DWORD *)(a1 + 88) = v13;
  uint64_t v15 = *(void *)(a1 + 128);
  int v10 = (char *)(v15 + v13);
  *(void *)(a1 + 120) = v15 + v14;
  if (v9) {
    goto LABEL_15;
  }
LABEL_18:
  int v17 = v7 + 9;
  unint64_t v18 = *(void *)(a1 + 136);
  if ((unint64_t)&v10[v7 + 9] >= v18)
  {
    uint64_t v19 = *(void *)(a1 + 128);
    int v20 = v10 - v19;
    unint64_t v21 = (3 * (v18 - v19) + (((3 * (v18 - v19)) & 0x8000000000000000) != 0)) >> 1;
    int v22 = v17 + v10 - v19;
    if (v22 <= (int)v21) {
      int v23 = v21;
    }
    else {
      int v23 = v22;
    }
    __int16 v24 = (char *)sub_10020FEBC(v23 + 256);
    unsigned int v25 = v24;
    unsigned int v26 = *(const void **)(a1 + 128);
    *(void *)(a1 + 120) = &v24[*(void *)(a1 + 120) - (void)v26];
    if (v20 >= 1) {
      memcpy(v24, v26, v20);
    }
    *(void *)(a1 + 128) = v25;
    *(void *)(a1 + 136) = &v25[v23];
    int v10 = &v25[v20];
  }
  sprintf(v10, "<!-- %s -->", v4);
  uint64_t v16 = (int)strlen(v10);
LABEL_26:
  int v27 = &v10[v16];
  *(void *)(a1 + 120) = &v10[v16];
  uint64_t v28 = *(char **)(a1 + 128);
  uint64_t v29 = *(int *)(a1 + 88);
  if (v27 > &v28[v29])
  {
    *(_WORD *)int v27 = 10;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    uint64_t v28 = *(char **)(a1 + 128);
    LODWORD(v29) = *(_DWORD *)(a1 + 88);
  }
  int v30 = *(_DWORD *)(a1 + 64);
  if (v29 == v30)
  {
    char v31 = &v28[(int)v29];
    *(void *)(a1 + 120) = v31;
    if (!v9) {
      return;
    }
  }
  else
  {
    memset(v28, 32, v30);
    *(_DWORD *)(a1 + 88) = v30;
    uint64_t v28 = *(char **)(a1 + 128);
    char v31 = &v28[v30];
    *(void *)(a1 + 120) = v31;
    if (!v9) {
      return;
    }
  }
  if (v4)
  {
    while (1)
    {
      if (v9)
      {
        int64_t v32 = v9 - v4;
        int v33 = v9 - v4 + 1;
        unint64_t v34 = *(void *)(a1 + 136);
        if ((unint64_t)&v31[v33] >= v34)
        {
          int v35 = v31 - v28;
          unint64_t v36 = (3 * (v34 - (unint64_t)v28) + (((3 * (v34 - (void)v28)) & 0x8000000000000000) != 0)) >> 1;
          int v37 = v33 + v35;
          if (v37 <= (int)v36) {
            int v38 = v36;
          }
          else {
            int v38 = v37;
          }
          uint64_t v39 = (char *)sub_10020FEBC(v38 + 256);
          uint64_t v40 = v39;
          uint64_t v41 = *(const void **)(a1 + 128);
          *(void *)(a1 + 120) = &v39[*(void *)(a1 + 120) - (void)v41];
          if (v35 >= 1) {
            memcpy(v39, v41, v35);
          }
          *(void *)(a1 + 128) = v40;
          *(void *)(a1 + 136) = &v40[v38];
          char v31 = &v40[v35];
        }
        memcpy(v31, v4, v32 + 1);
        unsigned int v42 = &v31[v32];
        int v4 = v9 + 1;
        uint64_t v9 = strchr(v9 + 1, 10);
        *(void *)(a1 + 120) = v42;
        uint64_t v28 = *(char **)(a1 + 128);
        uint64_t v43 = *(int *)(a1 + 88);
        if (v42 <= &v28[v43]) {
          goto LABEL_45;
        }
      }
      else
      {
        int v45 = strlen(v4);
        size_t v46 = v45;
        unint64_t v47 = *(void *)(a1 + 136);
        if ((unint64_t)&v31[v45] >= v47)
        {
          int v48 = v31 - v28;
          unint64_t v49 = (3 * (v47 - (unint64_t)v28) + (((3 * (v47 - (void)v28)) & 0x8000000000000000) != 0)) >> 1;
          if (v48 + v45 <= (int)v49) {
            int v50 = v49;
          }
          else {
            int v50 = v48 + v45;
          }
          int v51 = (char *)sub_10020FEBC(v50 + 256);
          uint64_t v52 = v51;
          uint64_t v53 = *(const void **)(a1 + 128);
          *(void *)(a1 + 120) = &v51[*(void *)(a1 + 120) - (void)v53];
          if (v48 >= 1) {
            memcpy(v51, v53, v48);
          }
          *(void *)(a1 + 128) = v52;
          *(void *)(a1 + 136) = &v52[v50];
          char v31 = &v52[v48];
        }
        memcpy(v31, v4, v46);
        int v4 = 0;
        uint64_t v9 = 0;
        unsigned int v42 = &v31[v46];
        *(void *)(a1 + 120) = v42;
        uint64_t v28 = *(char **)(a1 + 128);
        uint64_t v43 = *(int *)(a1 + 88);
        if (v42 <= &v28[v43]) {
          goto LABEL_45;
        }
      }
      *(_WORD *)unsigned int v42 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t v28 = *(char **)(a1 + 128);
      LODWORD(v43) = *(_DWORD *)(a1 + 88);
LABEL_45:
      int v44 = *(_DWORD *)(a1 + 64);
      if (v43 == v44)
      {
        char v31 = &v28[(int)v43];
        *(void *)(a1 + 120) = v31;
        if (!v4) {
          break;
        }
      }
      else
      {
        memset(v28, 32, v44);
        *(_DWORD *)(a1 + 88) = v44;
        uint64_t v28 = *(char **)(a1 + 128);
        char v31 = &v28[v44];
        *(void *)(a1 + 120) = v31;
        if (!v4) {
          break;
        }
      }
    }
  }
  *(_DWORD *)char v31 = 4074797;
  *(void *)(a1 + 120) = v31 + 3;
  __darwin_ct_rune_t v54 = *(char **)(a1 + 128);
  uint64_t v55 = *(int *)(a1 + 88);
  if (v31 + 3 > &v54[v55])
  {
    *(_WORD *)(v31 + 3) = 10;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    __darwin_ct_rune_t v54 = *(char **)(a1 + 128);
    LODWORD(v55) = *(_DWORD *)(a1 + 88);
  }
  int v56 = *(_DWORD *)(a1 + 64);
  if (v55 == v56)
  {
    uint64_t v57 = (int)v55;
  }
  else
  {
    uint64_t v57 = v56;
    memset(v54, 32, v56);
    *(_DWORD *)(a1 + 88) = v56;
    __darwin_ct_rune_t v54 = *(char **)(a1 + 128);
  }
  *(void *)(a1 + 120) = &v54[v57];
}

void sub_1002B0484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002B04B4(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 12))
  {
    if (*(int *)(*(void *)(a1 + 56) + 40) >= 1)
    {
      do
        sub_1002AF7E4(a1);
      while (*(int *)(*(void *)(a1 + 56) + 40) > 0);
    }
    *(_DWORD *)(a1 + 64) = 0;
    int v3 = *(char **)(a1 + 120);
    uint64_t v2 = *(char **)(a1 + 128);
    uint64_t v4 = *(int *)(a1 + 88);
    if (v3 <= &v2[v4])
    {
      int v5 = 0;
      size_t v6 = 0;
      if (!v4)
      {
LABEL_9:
        *(void *)(a1 + 120) = &v2[v6];
        sub_1002AF2B8((void *)a1, "\n<!-- next stream -->\n");
        *(void *)(a1 + 120) = *(void *)(a1 + 128);
        return;
      }
    }
    else
    {
      *(_WORD *)int v3 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t v2 = *(char **)(a1 + 128);
      int v5 = *(_DWORD *)(a1 + 64);
      size_t v6 = v5;
      if (*(_DWORD *)(a1 + 88) == v5) {
        goto LABEL_9;
      }
    }
    memset(v2, 32, v6);
    *(_DWORD *)(a1 + 88) = v5;
    uint64_t v2 = *(char **)(a1 + 128);
    goto LABEL_9;
  }
}

char *sub_1002B05A8(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  int v5 = v4;
  uint64_t v6 = v1;
  if (!v3)
  {
    int v7 = 0;
    int __src = 0;
    unsigned int v8 = v2 & 7;
    if (v8 > 4) {
      goto LABEL_9;
    }
LABEL_8:
    v18[0] = 0;
    v18[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v18, 68), "Some collection type - CV_NODE_SEQ or CV_NODE_MAP, must be specified", 68);
    sub_1002D2278(-5, v18, "icvYMLStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2011);
  }
  if (*v3) {
    int v7 = v3;
  }
  else {
    int v7 = 0;
  }
  int __src = 0;
  unsigned int v8 = v2 & 7;
  if (v8 <= 4) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v9 = v2 & 0xF | 0x20;
  if (!v7)
  {
    if ((v2 & 8) == 0)
    {
      uint64_t v12 = 0;
      goto LABEL_28;
    }
    if (v8 == 6) {
      char v14 = 123;
    }
    else {
      char v14 = 91;
    }
    unsigned int v9 = v2 & 7 | 0x28;
    v20[0] = v14;
    v20[1] = 0;
    goto LABEL_27;
  }
  if (*(_DWORD *)v7 == 1634625890 && *((_WORD *)v7 + 2) == 31090)
  {
    strcpy(v20, "!!binary |");
    unsigned int v9 = 5;
LABEL_27:
    uint64_t v12 = v20;
    goto LABEL_28;
  }
  if ((v2 & 8) != 0)
  {
    unsigned int v9 = v2 & 7 | 0x28;
    uint64_t v13 = 91;
    if (v8 == 6) {
      uint64_t v13 = 123;
    }
    uint64_t v16 = v7;
    uint64_t v17 = v13;
    int v11 = "!!%s %c";
  }
  else
  {
    uint64_t v16 = v7;
    int v11 = "!!%s";
  }
  uint64_t v12 = v20;
  sprintf(v20, v11, v16, v17);
LABEL_28:
  sub_1002B4140(v6, v5, v12);
  int __src = *(_DWORD *)(v6 + 68);
  uint64_t result = sub_10025BB1C(*(void *)(v6 + 56), &__src);
  *(_DWORD *)(v6 + 68) = v9;
  if ((__src & 8) == 0) {
    *(_DWORD *)(v6 + 64) += ((v9 >> 3) & 1) + 3;
  }
  return result;
}

void sub_1002B07E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1002B0810(uint64_t a1)
{
  int __dst = 0;
  int v2 = *(_DWORD *)(a1 + 68);
  int v3 = *(int **)(a1 + 56);
  if (!v3[10])
  {
    v15[0] = 0;
    v15[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v15, 44), "EndWriteStruct w/o matching StartWriteStruct", 44);
    sub_1002D2278(-2, v15, "icvYMLEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2059);
  }
  uint64_t result = sub_10025BBFC(v3, &__dst);
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(char **)(a1 + 120);
    if ((unint64_t)v6 > *(void *)(a1 + 128) + *(int *)(a1 + 64) && (v2 & 0x20) == 0) {
      *v6++ = 32;
    }
    if ((v2 & 7) == 6) {
      char v8 = 125;
    }
    else {
      char v8 = 93;
    }
    *uint64_t v6 = v8;
    *(void *)(a1 + 120) = v6 + 1;
    int v5 = __dst;
    if ((__dst & 8) != 0) {
      goto LABEL_5;
    }
  }
  else if ((v2 & 0x20) != 0)
  {
    unsigned int v9 = *(_WORD **)(a1 + 120);
    uint64_t result = *(int **)(a1 + 128);
    uint64_t v10 = *(int *)(a1 + 88);
    if (v9 > (_WORD *)((char *)result + v10))
    {
      _WORD *v9 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t result = *(int **)(a1 + 128);
      LODWORD(v10) = *(_DWORD *)(a1 + 88);
    }
    int v11 = *(_DWORD *)(a1 + 64);
    if (v10 == v11)
    {
      uint64_t v12 = (int)v10;
    }
    else
    {
      uint64_t v12 = v11;
      memset(result, 32, v11);
      *(_DWORD *)(a1 + 88) = v11;
      uint64_t result = *(int **)(a1 + 128);
    }
    uint64_t v13 = (__int16 *)((char *)result + v12);
    if ((v2 & 7) == 6) {
      __int16 v14 = 32123;
    }
    else {
      __int16 v14 = 23899;
    }
    __int16 *v13 = v14;
    *(void *)(a1 + 120) = v13 + 1;
    int v5 = __dst;
    if ((__dst & 8) != 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v5 = __dst;
    if ((__dst & 8) != 0)
    {
LABEL_5:
      *(_DWORD *)(a1 + 68) = v5;
      return result;
    }
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 64) - ((v2 & 8) >> 3) - 3;
  *(_DWORD *)(a1 + 68) = v5;
  return result;
}

void sub_1002B09CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1002B09E4(uint64_t a1, const char *a2, int a3)
{
  if (a3 >= 0) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = -a3;
  }
  v8[1] = 0;
  int v5 = v8;
  do
  {
    *v5-- = v4 % 0xA + 48;
    BOOL v6 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v6);
  if (a3 < 0) {
    *int v5 = 45;
  }
  else {
    ++v5;
  }
  return sub_1002B4140(a1, a2, v5);
}

char *sub_1002B0A88(uint64_t a1, const char *a2, double a3)
{
  if ((~HIDWORD(a3) & 0x7FF00000) != 0)
  {
    uint64_t v6 = (uint64_t)rint(a3);
    if ((double)(int)v6 == a3)
    {
      sprintf(__dst, "%d.", v6);
    }
    else
    {
      char v8 = __dst;
      sprintf(__dst, "%.16e", a3);
      if (__dst[0] == 45 || __dst[0] == 43) {
        char v8 = &__dst[1];
      }
      do
      {
        int v10 = *v8++;
        int v9 = v10;
      }
      while ((v10 - 48) < 0xA);
      if (v9 == 44) {
        *(v8 - 1) = 46;
      }
    }
  }
  else
  {
    unsigned int v5 = HIDWORD(a3) & 0x7FFFFFFF;
    if (LODWORD(a3)) {
      ++v5;
    }
    if (v5 < 0x7FF00001)
    {
      if (a3 >= 0.0) {
        int v7 = ".Inf";
      }
      else {
        int v7 = "-.Inf";
      }
      strcpy(__dst, v7);
    }
    else
    {
      strcpy(__dst, ".Nan");
    }
  }
  return sub_1002B4140(a1, a2, __dst);
}

char *sub_1002B0BDC(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  int v4 = v3;
  unsigned int v5 = v2;
  int v7 = v6;
  uint64_t v8 = v1;
  if (!v2)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v9 = sub_1002D19D8(&v33, 19);
    *(_DWORD *)(v9 + 15) = 1919251566;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)"Null string pointer";
    sub_1002D2278(-27, &v33, "icvYMLWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2128);
  }
  int v10 = strlen(v2);
  if (v10 > 4096)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    qmemcpy((void *)sub_1002D19D8(&v33, 30), "The written string is too long", 30);
    sub_1002D2278(-5, &v33, "icvYMLWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2132);
  }
  BOOL v11 = 1;
  if (!v4 && v10)
  {
    int v12 = *(unsigned __int8 *)v5;
    if (v12 == v5[v10 - 1] && (v12 == 34 || v12 == 39)) {
      return sub_1002B4140(v8, v7, v5);
    }
    BOOL v11 = v12 == 32;
  }
  uint64_t v32 = v8;
  uint64_t v13 = v7;
  __int16 v14 = v36;
  char v35 = 34;
  if (v10 >= 1)
  {
    uint64_t v15 = v10;
    uint64_t v16 = (unsigned __int8 *)v5;
    do
    {
      unsigned __int8 v18 = *v16++;
      char v17 = v18;
      unsigned int v19 = (v18 - 58);
      char v20 = v18 & 0xDF;
      unsigned int v21 = ((v18 & 0xDF) - 91);
      unsigned int v22 = v18;
      unint64_t v23 = (1 << (v18 - 32)) & 0x800000000800AB01;
      BOOL v25 = v18 - 32 > 0x3F || v23 == 0;
      BOOL v26 = v21 <= 0xE5 && v25;
      BOOL v27 = v19 <= 0xF5 && v26;
      BOOL v11 = v11 || v27;
      if ((v17 - 48) >= 0xAu && (v20 - 65) >= 0x1Au)
      {
        if (v22 < 0x20)
        {
          *__int16 v14 = 92;
          switch(v17)
          {
            case 9:
              char v17 = 116;
              break;
            case 13:
              char v17 = 114;
              break;
            case 10:
              char v17 = 110;
              break;
            default:
              sprintf(v14 + 1, "x%02x", v17);
              v14 += 4;
              goto LABEL_14;
          }
          goto LABEL_45;
        }
        if (v17 - 34 <= 0x3A && ((1 << (v17 - 34)) & 0x400000000000021) != 0)
        {
          *__int16 v14 = 92;
LABEL_45:
          v14[1] = v17;
          v14 += 2;
          goto LABEL_14;
        }
      }
      *v14++ = v17;
LABEL_14:
      --v15;
    }
    while (v15);
  }
  int v7 = v13;
  uint64_t v8 = v32;
  if (v11
    || (unsigned int v29 = *(unsigned __int8 *)v5, v29 - 48 < 0xA)
    || (uint64_t v30 = 1, v29 <= 0x2E) && ((1 << v29) & 0x680000000000) != 0)
  {
    uint64_t v30 = 0;
    *v14++ = 34;
  }
  *__int16 v14 = 0;
  unsigned int v5 = &v36[v30 - 1];
  return sub_1002B4140(v8, v7, v5);
}

void sub_1002B0F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002B0F64(uint64_t a1, char *__s, int a3)
{
  int v4 = __s;
  if (!__s)
  {
    v39[0] = 0;
    v39[1] = 0;
    uint64_t v10 = sub_1002D19D8(v39, 12);
    *(_DWORD *)(v10 + 8) = 1953391981;
    *(void *)uint64_t v10 = *(void *)"Null comment";
    sub_1002D2278(-27, v39, "icvYMLWriteComment", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2190);
  }
  int v6 = strlen(__s);
  uint64_t result = strchr(v4, 10);
  uint64_t v8 = result;
  uint64_t v9 = *(char **)(a1 + 120);
  if (a3 && !result && *(void *)(a1 + 136) - (void)v9 >= v6 && v9 != *(char **)(a1 + 128))
  {
    char *v9 = 32;
    BOOL v11 = v9 + 1;
    if (v4) {
      goto LABEL_18;
    }
    return result;
  }
  uint64_t result = *(char **)(a1 + 128);
  uint64_t v12 = *(int *)(a1 + 88);
  if (v9 > &result[v12])
  {
    *(_WORD *)uint64_t v9 = 10;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    uint64_t result = *(char **)(a1 + 128);
    LODWORD(v12) = *(_DWORD *)(a1 + 88);
  }
  int v13 = *(_DWORD *)(a1 + 64);
  if (v12 != v13)
  {
    memset(result, 32, v13);
    *(_DWORD *)(a1 + 88) = v13;
    uint64_t result = *(char **)(a1 + 128);
    BOOL v11 = &result[v13];
    *(void *)(a1 + 120) = v11;
    if (!v4) {
      return result;
    }
    while (1)
    {
LABEL_18:
      *(_WORD *)BOOL v11 = 8227;
      __int16 v14 = v11 + 2;
      if (v8)
      {
        int64_t v15 = v8 - v4;
        int v16 = v8 - v4 + 1;
        unint64_t v17 = *(void *)(a1 + 136);
        if ((unint64_t)&v14[v16] >= v17)
        {
          uint64_t v18 = *(void *)(a1 + 128);
          int v19 = v14 - v18;
          unint64_t v20 = (3 * (v17 - v18) + (((3 * (v17 - v18)) & 0x8000000000000000) != 0)) >> 1;
          int v21 = v16 + v14 - v18;
          if (v21 <= (int)v20) {
            int v22 = v20;
          }
          else {
            int v22 = v21;
          }
          unint64_t v23 = (char *)sub_10020FEBC(v22 + 256);
          __int16 v24 = v23;
          BOOL v25 = *(const void **)(a1 + 128);
          *(void *)(a1 + 120) = &v23[*(void *)(a1 + 120) - (void)v25];
          if (v19 >= 1) {
            memcpy(v23, v25, v19);
          }
          *(void *)(a1 + 128) = v24;
          *(void *)(a1 + 136) = &v24[v22];
          __int16 v14 = &v24[v19];
        }
        memcpy(v14, v4, v15 + 1);
        BOOL v26 = &v14[v15];
        *(void *)(a1 + 120) = v26;
        int v4 = v8 + 1;
        uint64_t v8 = strchr(v8 + 1, 10);
        uint64_t result = *(char **)(a1 + 128);
        uint64_t v27 = *(int *)(a1 + 88);
        if (v26 <= &result[v27]) {
          goto LABEL_28;
        }
      }
      else
      {
        int v29 = strlen(v4);
        size_t v30 = v29;
        unint64_t v31 = *(void *)(a1 + 136);
        if ((unint64_t)&v14[v29] >= v31)
        {
          uint64_t v32 = *(void *)(a1 + 128);
          int v33 = v14 - v32;
          unint64_t v34 = (3 * (v31 - v32) + (((3 * (v31 - v32)) & 0x8000000000000000) != 0)) >> 1;
          if (v33 + v29 <= (int)v34) {
            int v35 = v34;
          }
          else {
            int v35 = v33 + v29;
          }
          unint64_t v36 = (char *)sub_10020FEBC(v35 + 256);
          int v37 = v36;
          int v38 = *(const void **)(a1 + 128);
          *(void *)(a1 + 120) = &v36[*(void *)(a1 + 120) - (void)v38];
          if (v33 >= 1) {
            memcpy(v36, v38, v33);
          }
          *(void *)(a1 + 128) = v37;
          *(void *)(a1 + 136) = &v37[v35];
          __int16 v14 = &v37[v33];
        }
        memcpy(v14, v4, v30);
        uint64_t v8 = 0;
        int v4 = 0;
        BOOL v26 = &v14[v30];
        *(void *)(a1 + 120) = v26;
        uint64_t result = *(char **)(a1 + 128);
        uint64_t v27 = *(int *)(a1 + 88);
        if (v26 <= &result[v27]) {
          goto LABEL_28;
        }
      }
      *(_WORD *)BOOL v26 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t result = *(char **)(a1 + 128);
      LODWORD(v27) = *(_DWORD *)(a1 + 88);
LABEL_28:
      int v28 = *(_DWORD *)(a1 + 64);
      if (v27 == v28)
      {
        BOOL v11 = &result[(int)v27];
        *(void *)(a1 + 120) = v11;
        if (!v4) {
          return result;
        }
      }
      else
      {
        memset(result, 32, v28);
        *(_DWORD *)(a1 + 88) = v28;
        uint64_t result = *(char **)(a1 + 128);
        BOOL v11 = &result[v28];
        *(void *)(a1 + 120) = v11;
        if (!v4) {
          return result;
        }
      }
    }
  }
  BOOL v11 = &result[(int)v12];
  *(void *)(a1 + 120) = v11;
  if (v4) {
    goto LABEL_18;
  }
  return result;
}

void sub_1002B12EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002B1304(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 12))
  {
    if (*(int *)(*(void *)(a1 + 56) + 40) >= 1)
    {
      do
        sub_1002B0810(a1);
      while (*(int *)(*(void *)(a1 + 56) + 40) > 0);
    }
    *(_DWORD *)(a1 + 64) = 0;
    int v3 = *(char **)(a1 + 120);
    int v2 = *(char **)(a1 + 128);
    uint64_t v4 = *(int *)(a1 + 88);
    if (v3 <= &v2[v4])
    {
      int v5 = 0;
      size_t v6 = 0;
      if (!v4)
      {
LABEL_9:
        *(void *)(a1 + 120) = &v2[v6];
        sub_1002AF2B8((void *)a1, "...\n");
        sub_1002AF2B8((void *)a1, "---\n");
        *(void *)(a1 + 120) = *(void *)(a1 + 128);
        return;
      }
    }
    else
    {
      *(_WORD *)int v3 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      int v2 = *(char **)(a1 + 128);
      int v5 = *(_DWORD *)(a1 + 64);
      size_t v6 = v5;
      if (*(_DWORD *)(a1 + 88) == v5) {
        goto LABEL_9;
      }
    }
    memset(v2, 32, v6);
    *(_DWORD *)(a1 + 88) = v5;
    int v2 = *(char **)(a1 + 128);
    goto LABEL_9;
  }
}

char *sub_1002B1408(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  int __src = 0;
  if ((v3 & 7u) <= 4)
  {
    v12[0] = 0;
    v12[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v12, 68), "Some collection type - CV_NODE_SEQ or CV_NODE_MAP, must be specified", 68);
    sub_1002D2278(-5, v12, "icvJSONStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3965);
  }
  if (!v4) {
    goto LABEL_11;
  }
  if (!*(unsigned char *)v4)
  {
    uint64_t v5 = 0;
LABEL_11:
    int v8 = 0;
    goto LABEL_12;
  }
  if (*(_DWORD *)v4 == 1634625890 && *(_WORD *)(v4 + 4) == 31090)
  {
    int v8 = 0;
    v14[0] = 0;
    int v9 = 3;
    goto LABEL_16;
  }
  int v8 = 1;
LABEL_12:
  int v9 = v3 & 0xF | 0x20;
  if ((v3 & 7) == 6) {
    char v10 = 123;
  }
  else {
    char v10 = 91;
  }
  v14[0] = v10;
  v14[1] = 0;
LABEL_16:
  sub_1002B4840(v1, v2, v14);
  int __src = *(_DWORD *)(v6 + 68);
  uint64_t result = sub_10025BB1C(*(void *)(v6 + 56), &__src);
  *(_DWORD *)(v6 + 68) = v9;
  *(_DWORD *)(v6 + 64) += 4;
  if (v8) {
    return (char *)(*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(v6 + 328))(v6, "type_id", v5, 1);
  }
  return result;
}

void sub_1002B15CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int *sub_1002B15FC(uint64_t a1)
{
  int v2 = *(int **)(a1 + 56);
  if (!v2[10])
  {
    v13[0] = 0;
    v13[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v13, 44), "EndWriteStruct w/o matching StartWriteStruct", 44);
    sub_1002D2278(-2, v13, "icvJSONEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4006);
  }
  LODWORD(v13[0]) = 0;
  int v3 = *(_DWORD *)(a1 + 68);
  uint64_t result = sub_10025BBFC(v2, v13);
  int v5 = *(_DWORD *)(a1 + 64) - 4;
  unsigned int v6 = v13[0] & 0xFFFFFFDF;
  *(_DWORD *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 68) = v6;
  if ((v3 & 7u) >= 5)
  {
    int v7 = *(unsigned char **)(a1 + 120);
    uint64_t result = *(int **)(a1 + 128);
    if ((v3 & 8) != 0)
    {
LABEL_13:
      if (v7 > (unsigned char *)result + v5 && (v3 & 0x20) == 0) {
        *v7++ = 32;
      }
      if ((v3 & 7) == 6) {
        char v12 = 125;
      }
      else {
        char v12 = 93;
      }
      *int v7 = v12;
      *(void *)(a1 + 120) = v7 + 1;
      return result;
    }
    if (v7 > (unsigned char *)result + *(int *)(a1 + 88)) {
      goto LABEL_10;
    }
    *(void *)(a1 + 120) = v7 + 1;
    *int v7 = 10;
    char v10 = *(unsigned char **)(a1 + 120);
    *(void *)(a1 + 120) = v10 + 1;
    unsigned char *v10 = 0;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    uint64_t result = *(int **)(a1 + 128);
    *(void *)(a1 + 120) = result;
    int v5 = *(_DWORD *)(a1 + 88);
    int v7 = result;
    if (result <= (int *)((char *)result + v5))
    {
      int v8 = *(_DWORD *)(a1 + 64);
      if (v5 != v8)
      {
LABEL_11:
        uint64_t v9 = v8;
        memset(result, 32, v8);
        *(_DWORD *)(a1 + 88) = v8;
        uint64_t result = *(int **)(a1 + 128);
        int v5 = *(_DWORD *)(a1 + 64);
        goto LABEL_12;
      }
    }
    else
    {
LABEL_10:
      *(_WORD *)int v7 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t result = *(int **)(a1 + 128);
      int v5 = *(_DWORD *)(a1 + 88);
      int v8 = *(_DWORD *)(a1 + 64);
      if (v5 != v8) {
        goto LABEL_11;
      }
    }
    uint64_t v9 = v5;
LABEL_12:
    int v7 = (char *)result + v9;
    *(void *)(a1 + 120) = (char *)result + v9;
    goto LABEL_13;
  }
  return result;
}

void sub_1002B17D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_1002B17EC(uint64_t a1, const char *a2, int a3)
{
  if (a3 >= 0) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = -a3;
  }
  v8[1] = 0;
  int v5 = v8;
  do
  {
    *v5-- = v4 % 0xA + 48;
    BOOL v6 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v6);
  if (a3 < 0) {
    *int v5 = 45;
  }
  else {
    ++v5;
  }
  return sub_1002B4840(a1, a2, v5);
}

char *sub_1002B1890(uint64_t a1, const char *a2, double a3)
{
  if ((~HIDWORD(a3) & 0x7FF00000) != 0)
  {
    uint64_t v6 = (uint64_t)rint(a3);
    if ((double)(int)v6 == a3)
    {
      sprintf(__dst, "%d.", v6);
    }
    else
    {
      int v8 = __dst;
      sprintf(__dst, "%.16e", a3);
      if (__dst[0] == 45 || __dst[0] == 43) {
        int v8 = &__dst[1];
      }
      do
      {
        int v10 = *v8++;
        int v9 = v10;
      }
      while ((v10 - 48) < 0xA);
      if (v9 == 44) {
        *(v8 - 1) = 46;
      }
    }
  }
  else
  {
    unsigned int v5 = HIDWORD(a3) & 0x7FFFFFFF;
    if (LODWORD(a3)) {
      ++v5;
    }
    if (v5 < 0x7FF00001)
    {
      if (a3 >= 0.0) {
        int v7 = ".Inf";
      }
      else {
        int v7 = "-.Inf";
      }
      strcpy(__dst, v7);
    }
    else
    {
      strcpy(__dst, ".Nan");
    }
  }
  size_t v11 = strlen(__dst);
  if (v11 && __dst[v11 - 1] == 46) {
    *(_WORD *)&__dst[v11] = 48;
  }
  return sub_1002B4840(a1, a2, __dst);
}

char *sub_1002B1A10(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  int v4 = v3;
  unsigned int v5 = v2;
  int v7 = v6;
  uint64_t v8 = v1;
  if (!v2)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v9 = sub_1002D19D8(&v18, 19);
    *(_DWORD *)(v9 + 15) = 1919251566;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)"Null string pointer";
    sub_1002D2278(-27, &v18, "icvJSONWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4086);
  }
  int v10 = strlen(v2);
  if (v10 > 4096)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    qmemcpy((void *)sub_1002D19D8(&v18, 30), "The written string is too long", 30);
    sub_1002D2278(-5, &v18, "icvJSONWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4090);
  }
  if (v4 || !v10 || (int v11 = *(unsigned __int8 *)v5, v11 != v5[v10 - 1]) || v11 != 34 && v11 != 39)
  {
    char v12 = v21;
    char v20 = 34;
    if (v10 >= 1)
    {
      uint64_t v13 = v10;
      while (2)
      {
        int v15 = *v5++;
        int v14 = v15;
        char v16 = v15;
        switch(v15)
        {
          case 8:
            *(_WORD *)char v12 = 25180;
            v12 += 2;
            goto LABEL_13;
          case 9:
            *(_WORD *)char v12 = 29788;
            v12 += 2;
            goto LABEL_13;
          case 10:
            *(_WORD *)char v12 = 28252;
            v12 += 2;
            goto LABEL_13;
          case 11:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 35:
          case 36:
          case 37:
          case 38:
            goto LABEL_17;
          case 12:
            *(_WORD *)char v12 = 26204;
            v12 += 2;
            goto LABEL_13;
          case 13:
            *(_WORD *)char v12 = 29276;
            v12 += 2;
            goto LABEL_13;
          case 34:
          case 39:
            goto LABEL_12;
          default:
            if (v14 == 92)
            {
LABEL_12:
              unsigned char *v12 = 92;
              v12[1] = v16;
              v12 += 2;
            }
            else
            {
LABEL_17:
              *v12++ = v16;
            }
LABEL_13:
            if (--v13) {
              continue;
            }
            goto LABEL_22;
        }
      }
    }
LABEL_22:
    *(_WORD *)char v12 = 34;
    unsigned int v5 = &v20;
  }
  return sub_1002B4840(v8, v7, v5);
}

void sub_1002B1C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002B1D1C(uint64_t a1, char *__s, int a3)
{
  int v4 = __s;
  if (!__s)
  {
    v39[0] = 0;
    v39[1] = 0;
    uint64_t v10 = sub_1002D19D8(v39, 12);
    *(_DWORD *)(v10 + 8) = 1953391981;
    *(void *)uint64_t v10 = *(void *)"Null comment";
    sub_1002D2278(-27, v39, "icvJSONWriteComment", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4129);
  }
  int v6 = strlen(__s);
  uint64_t result = strchr(v4, 10);
  uint64_t v8 = result;
  uint64_t v9 = *(char **)(a1 + 120);
  if (a3 && !result && *(void *)(a1 + 136) - (void)v9 >= v6 && v9 != *(char **)(a1 + 128))
  {
    char *v9 = 32;
    int v11 = v9 + 1;
    if (v4) {
      goto LABEL_18;
    }
    return result;
  }
  uint64_t result = *(char **)(a1 + 128);
  uint64_t v12 = *(int *)(a1 + 88);
  if (v9 > &result[v12])
  {
    *(_WORD *)uint64_t v9 = 10;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    uint64_t result = *(char **)(a1 + 128);
    LODWORD(v12) = *(_DWORD *)(a1 + 88);
  }
  int v13 = *(_DWORD *)(a1 + 64);
  if (v12 != v13)
  {
    memset(result, 32, v13);
    *(_DWORD *)(a1 + 88) = v13;
    uint64_t result = *(char **)(a1 + 128);
    int v11 = &result[v13];
    *(void *)(a1 + 120) = v11;
    if (!v4) {
      return result;
    }
    while (1)
    {
LABEL_18:
      *(_WORD *)int v11 = 12079;
      int v14 = v11 + 3;
      v11[2] = 32;
      if (v8)
      {
        int64_t v15 = v8 - v4;
        int v16 = v8 - v4 + 1;
        unint64_t v17 = *(void *)(a1 + 136);
        if ((unint64_t)&v14[v16] >= v17)
        {
          uint64_t v18 = *(void *)(a1 + 128);
          int v19 = v14 - v18;
          unint64_t v20 = (3 * (v17 - v18) + (((3 * (v17 - v18)) & 0x8000000000000000) != 0)) >> 1;
          int v21 = v16 + v19;
          if (v21 <= (int)v20) {
            int v22 = v20;
          }
          else {
            int v22 = v21;
          }
          unint64_t v23 = (char *)sub_10020FEBC(v22 + 256);
          __int16 v24 = v23;
          BOOL v25 = *(const void **)(a1 + 128);
          *(void *)(a1 + 120) = &v23[*(void *)(a1 + 120) - (void)v25];
          if (v19 >= 1) {
            memcpy(v23, v25, v19);
          }
          *(void *)(a1 + 128) = v24;
          *(void *)(a1 + 136) = &v24[v22];
          int v14 = &v24[v19];
        }
        memcpy(v14, v4, v15 + 1);
        BOOL v26 = &v14[v15];
        *(void *)(a1 + 120) = &v14[v15];
        int v4 = v8 + 1;
        uint64_t v8 = strchr(v8 + 1, 10);
        uint64_t result = *(char **)(a1 + 128);
        uint64_t v27 = *(int *)(a1 + 88);
        if (&v14[v15] <= &result[v27]) {
          goto LABEL_28;
        }
      }
      else
      {
        int v29 = strlen(v4);
        size_t v30 = v29;
        unint64_t v31 = *(void *)(a1 + 136);
        if ((unint64_t)&v14[v29] >= v31)
        {
          uint64_t v32 = *(void *)(a1 + 128);
          int v33 = v14 - v32;
          unint64_t v34 = (3 * (v31 - v32) + (((3 * (v31 - v32)) & 0x8000000000000000) != 0)) >> 1;
          if (v33 + v29 <= (int)v34) {
            int v35 = v34;
          }
          else {
            int v35 = v33 + v29;
          }
          unint64_t v36 = (char *)sub_10020FEBC(v35 + 256);
          int v37 = v36;
          int v38 = *(const void **)(a1 + 128);
          *(void *)(a1 + 120) = &v36[*(void *)(a1 + 120) - (void)v38];
          if (v33 >= 1) {
            memcpy(v36, v38, v33);
          }
          *(void *)(a1 + 128) = v37;
          *(void *)(a1 + 136) = &v37[v35];
          int v14 = &v37[v33];
        }
        memcpy(v14, v4, v30);
        int v4 = 0;
        uint64_t v8 = 0;
        BOOL v26 = &v14[v30];
        *(void *)(a1 + 120) = v26;
        uint64_t result = *(char **)(a1 + 128);
        uint64_t v27 = *(int *)(a1 + 88);
        if (v26 <= &result[v27]) {
          goto LABEL_28;
        }
      }
      *(_WORD *)BOOL v26 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t result = *(char **)(a1 + 128);
      LODWORD(v27) = *(_DWORD *)(a1 + 88);
LABEL_28:
      int v28 = *(_DWORD *)(a1 + 64);
      if (v27 == v28)
      {
        int v11 = &result[(int)v27];
        *(void *)(a1 + 120) = v11;
        if (!v4) {
          return result;
        }
      }
      else
      {
        memset(result, 32, v28);
        *(_DWORD *)(a1 + 88) = v28;
        uint64_t result = *(char **)(a1 + 128);
        int v11 = &result[v28];
        *(void *)(a1 + 120) = v11;
        if (!v4) {
          return result;
        }
      }
    }
  }
  int v11 = &result[(int)v12];
  *(void *)(a1 + 120) = v11;
  if (v4) {
    goto LABEL_18;
  }
  return result;
}

void sub_1002B20B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002B20C8(uint64_t result)
{
  if (!*(_DWORD *)(result + 12))
  {
    uint64_t v1 = result;
    if (*(int *)(*(void *)(result + 56) + 40) >= 1)
    {
      do
        sub_1002B15FC(v1);
      while (*(int *)(*(void *)(v1 + 56) + 40) > 0);
    }
    int v2 = 4;
    *(_DWORD *)(v1 + 64) = 4;
    int v3 = *(_WORD **)(v1 + 120);
    uint64_t result = *(void *)(v1 + 128);
    uint64_t v4 = *(int *)(v1 + 88);
    if ((unint64_t)v3 > result + v4)
    {
      *int v3 = 10;
      sub_1002AF2B8((void *)v1, *(char **)(v1 + 128));
      uint64_t result = *(void *)(v1 + 128);
      LODWORD(v4) = *(_DWORD *)(v1 + 88);
      int v2 = *(_DWORD *)(v1 + 64);
    }
    if (v4 != v2)
    {
      memset((void *)result, 32, v2);
      *(_DWORD *)(v1 + 88) = v2;
      uint64_t result = *(void *)(v1 + 128);
    }
    *(void *)(v1 + 120) = result;
  }
  return result;
}

void sub_1002B2180(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    int v8 = -27;
LABEL_5:
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    qmemcpy((void *)sub_1002D19D8(&v13, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(v8, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4564);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    int v8 = -5;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    qmemcpy((void *)sub_1002D19D8(&v13, 38), "The file storage is opened for reading", 38);
    sub_1002D2278(-2, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4564);
  }
  sub_1002B25CC(a1, 0);
  int v9 = *(_DWORD *)(a1 + 396);
  if (v9 == 1)
  {
    sub_1002B2798(a1, 0);
    int v9 = *(_DWORD *)(a1 + 396);
  }
  if ((a3 & 7) != 5 || v9 || a4 || !*(unsigned char *)(a1 + 392))
  {
    if (a4 && (*(_DWORD *)a4 == 1634625890 ? (BOOL v10 = *(unsigned __int16 *)(a4 + 4) == 31090) : (BOOL v10 = 0), v10))
    {
      if ((a3 & 7) != 5)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        qmemcpy((void *)sub_1002D19D8(&v13, 55), "must set 'struct_flags |= CV_NODE_SEQ' if using Base64.", 55);
        sub_1002D2278(-5, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4585);
      }
      if (v9)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        qmemcpy((void *)sub_1002D19D8(&v13, 69), "function 'cvStartWriteStruct' calls cannot be nested if using Base64.", 69);
        sub_1002D2278(-2, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4587);
      }
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(a1 + 296))(a1, a2, a3, a4);
      if (*(_DWORD *)(a1 + 396)) {
        sub_1002B2798(a1, 0);
      }
      uint64_t v11 = a1;
      unsigned int v12 = 2;
    }
    else
    {
      if (v9 == 2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        sub_1002D2278(-2, &v13, "cvStartWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4599);
      }
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(a1 + 296))(a1, a2, a3, a4);
      if (*(_DWORD *)(a1 + 396)) {
        sub_1002B2798(a1, 0);
      }
      uint64_t v11 = a1;
      unsigned int v12 = 1;
    }
    sub_1002B2798(v11, v12);
  }
  else
  {
    if (*(unsigned char *)(a1 + 400))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      qmemcpy((void *)sub_1002D19D8(&v13, 36), "fs->is_write_struct_delayed == false", 36);
      sub_1002D2278(-215, &v13, "make_write_struct_delayed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1252);
    }
    *(_DWORD *)(a1 + 416) = a3;
    if (a2)
    {
      strlen(a2);
      operator new[]();
    }
    *(unsigned char *)(a1 + 400) = 1;
  }
}

void sub_1002B253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002B25CC(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 400))
  {
    memset(&v12, 0, sizeof(v12));
    memset(&__p, 0, sizeof(__p));
    uint64_t v4 = *(unsigned int *)(a1 + 416);
    unsigned int v5 = *(const std::string::value_type **)(a1 + 408);
    if (v5 && *v5) {
      std::string::assign(&v12, v5);
    }
    int v6 = *(const std::string::value_type **)(a1 + 424);
    if (v6 && *v6) {
      std::string::assign(&__p, v6);
    }
    if (*(void *)(a1 + 408)) {
      operator delete[]();
    }
    if (*(void *)(a1 + 424)) {
      operator delete[]();
    }
    *(void *)(a1 + 408) = 0;
    *(_DWORD *)(a1 + 416) = 0;
    *(void *)(a1 + 424) = 0;
    *(unsigned char *)(a1 + 400) = 0;
    int v7 = *(void (**)(uint64_t, std::string *, uint64_t, const char *))(a1 + 296);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v8 = &v12;
    }
    else {
      int v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    if (a2)
    {
      v7(a1, v8, v4, "binary");
      if (*(_DWORD *)(a1 + 396)) {
        sub_1002B2798(a1, 0);
      }
      unsigned int v9 = 2;
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      v7(a1, v8, v4, (const char *)p_p);
      if (*(_DWORD *)(a1 + 396)) {
        sub_1002B2798(a1, 0);
      }
      unsigned int v9 = 1;
    }
    sub_1002B2798(a1, v9);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_29:
      operator delete(v12.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_29;
    }
  }
}

void sub_1002B275C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B2798(uint64_t result, unsigned int a2)
{
  int v2 = *(_DWORD *)(result + 396);
  if (v2 == 2)
  {
    if (a2 - 1 < 2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      qmemcpy((void *)sub_1002D19D8(&v4, 49), "Unexpected error, unable to switch to this state.", 49);
      sub_1002D2278(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1166);
    }
    if (a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      qmemcpy((void *)sub_1002D19D8(&v4, 55), "Unexpected error, unable to determine the Base64 state.", 55);
      sub_1002D2278(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1173);
    }
    uint64_t v3 = *(void *)(result + 384);
    if (v3)
    {
      if (*(void *)v3)
      {
        sub_1002C5A80(*(void ***)v3);
        operator delete();
      }
      if (*(char *)(v3 + 31) < 0) {
        operator delete(*(void **)(v3 + 8));
      }
      operator delete();
    }
    *(void *)(result + 384) = 0;
    *(_DWORD *)(result + 396) = 0;
  }
  else
  {
    if (v2 == 1)
    {
      if (a2 - 1 < 2)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        qmemcpy((void *)sub_1002D19D8(&v4, 49), "Unexpected error, unable to switch to this state.", 49);
        sub_1002D2278(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1182);
      }
      if (a2)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        qmemcpy((void *)sub_1002D19D8(&v4, 55), "Unexpected error, unable to determine the Base64 state.", 55);
        sub_1002D2278(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1187);
      }
    }
    else
    {
      if (v2)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        qmemcpy((void *)sub_1002D19D8(&v4, 55), "Unexpected error, unable to determine the Base64 state.", 55);
        sub_1002D2278(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1192);
      }
      if (a2 >= 2)
      {
        if (a2 != 2)
        {
          uint64_t v4 = 0;
          uint64_t v5 = 0;
          qmemcpy((void *)sub_1002D19D8(&v4, 55), "Unexpected error, unable to determine the Base64 state.", 55);
          sub_1002D2278(-2, &v4, "switch_to_Base64_state", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1157);
        }
        operator new();
      }
    }
    *(_DWORD *)(result + 396) = a2;
  }
  return result;
}

void sub_1002B2AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002B2AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002B2B88(uint64_t a1)
{
  if (!a1)
  {
    int v2 = -27;
LABEL_5:
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    qmemcpy((void *)sub_1002D19D8(&v4, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(v2, &v4, "cvEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4613);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    int v2 = -5;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    qmemcpy((void *)sub_1002D19D8(&v4, 38), "The file storage is opened for reading", 38);
    sub_1002D2278(-2, &v4, "cvEndWriteStruct", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4613);
  }
  sub_1002B25CC(a1, 0);
  if (*(_DWORD *)(a1 + 396)) {
    sub_1002B2798(a1, 0);
  }
  return (*(uint64_t (**)(uint64_t))(a1 + 304))(a1);
}

void sub_1002B2CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002B2CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    int v3 = -27;
LABEL_5:
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    qmemcpy((void *)sub_1002D19D8(&v5, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(v3, &v5, "cvWriteInt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4626);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    int v3 = -5;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    qmemcpy((void *)sub_1002D19D8(&v5, 38), "The file storage is opened for reading", 38);
    sub_1002D2278(-2, &v5, "cvWriteInt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4626);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 312))(a1, a2, a3);
}

void sub_1002B2DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002B2E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    int v4 = -27;
LABEL_5:
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    qmemcpy((void *)sub_1002D19D8(&v6, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(v4, &v6, "cvWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4642);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    int v4 = -5;
    goto LABEL_5;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    qmemcpy((void *)sub_1002D19D8(&v6, 38), "The file storage is opened for reading", 38);
    sub_1002D2278(-2, &v6, "cvWriteString", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4642);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 328))(a1, a2, a3, a4);
}

void sub_1002B2F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002B2F84(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  int v51 = a3;
  if (*(unsigned char *)(a1 + 392))
  {
LABEL_2:
    sub_1002B38A4(a1, a2, a3, a4);
    return;
  }
  int v7 = *(_DWORD *)(a1 + 396);
  if (v7)
  {
    if (v7 == 2) {
      goto LABEL_2;
    }
  }
  else
  {
    sub_1002B2798(a1, 1u);
  }
  *(_OWORD *)int __dst = 0u;
  memset(v57, 0, sizeof(v57));
  if (*(_DWORD *)a1 != 1280131417)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    qmemcpy((void *)sub_1002D19D8(&v54, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(-5, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4812);
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    qmemcpy((void *)sub_1002D19D8(&v54, 38), "The file storage is opened for reading", 38);
    sub_1002D2278(-2, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4812);
  }
  if (v51 < 0)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    qmemcpy((void *)sub_1002D19D8(&v54, 27), "Negative number of elements", 27);
    sub_1002D2278(-211, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4815);
  }
  int v8 = sub_1002B3B2C(a4, v58);
  if (v51)
  {
    if (!a2)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v9 = sub_1002D19D8(&v54, 17);
      *(unsigned char *)(v9 + 16) = 114;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)"Null data pointer";
      sub_1002D2278(-27, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4823);
    }
    if (v8 == 1)
    {
      v58[0] *= v51;
      int v51 = 1;
    }
    else if (v8 < 1)
    {
      return;
    }
    int v10 = 0;
    uint64_t v52 = v8;
    do
    {
      uint64_t v11 = 0;
      --v51;
      uint64_t v12 = a2;
      do
      {
        uint64_t v13 = &v58[2 * v11];
        int v14 = *v13;
        unsigned int v15 = v13[1];
        LODWORD(v13) = (((v15 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v15 & 7))) & 3);
        int v16 = (double *)(v12 + ((v10 + (int)v13 - 1) & -(int)v13));
        uint64_t v53 = v11;
        if (v14 > 0)
        {
          if (v15 > 7)
          {
            uint64_t v54 = 0;
            uint64_t v55 = 0;
            *(_OWORD *)sub_1002D19D8(&v54, 16) = *(_OWORD *)"Unsupported type";
            sub_1002D2278(-210, &v54, "cvWriteRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4880);
          }
          int v17 = 0;
          while (1)
          {
            switch(v15)
            {
              case 0u:
                unsigned int v19 = *(unsigned __int8 *)v16;
                BYTE7(v57[0]) = 0;
                unint64_t v20 = (char *)v57 + 7;
                do
                {
                  *--unint64_t v20 = v19 % 0xA + 48;
                  BOOL v21 = v19 > 9;
                  v19 /= 0xAu;
                }
                while (v21);
                goto LABEL_87;
              case 1u:
                int v31 = *(char *)v16;
                if (v31 >= 0) {
                  unsigned int v32 = *(char *)v16;
                }
                else {
                  unsigned int v32 = -v31;
                }
                BYTE7(v57[0]) = 0;
                unint64_t v20 = (char *)v57 + 6;
                do
                {
                  *v20-- = v32 % 0xA + 48;
                  BOOL v21 = v32 > 9;
                  v32 /= 0xAu;
                }
                while (v21);
                if (v31 < 0) {
                  *unint64_t v20 = 45;
                }
                else {
                  ++v20;
                }
LABEL_87:
                uint64_t v24 = 1;
                goto LABEL_88;
              case 2u:
                unsigned int v25 = *(unsigned __int16 *)v16;
                BYTE7(v57[0]) = 0;
                unint64_t v20 = (char *)v57 + 7;
                do
                {
                  *--unint64_t v20 = v25 % 0xA + 48;
                  BOOL v26 = v25 >= 0xA;
                  v25 /= 0xAu;
                }
                while (v26);
                uint64_t v24 = 2;
                goto LABEL_88;
              case 3u:
                int v29 = *(__int16 *)v16;
                if (v29 >= 0) {
                  unsigned int v30 = *(__int16 *)v16;
                }
                else {
                  unsigned int v30 = -v29;
                }
                BYTE7(v57[0]) = 0;
                unint64_t v20 = (char *)v57 + 6;
                do
                {
                  *v20-- = v30 % 0xA + 48;
                  BOOL v21 = v30 > 9;
                  v30 /= 0xAu;
                }
                while (v21);
                if (v29 < 0) {
                  *unint64_t v20 = 45;
                }
                else {
                  ++v20;
                }
                uint64_t v24 = 2;
                goto LABEL_88;
              case 4u:
                int v22 = *(_DWORD *)v16;
                if (*(int *)v16 >= 0) {
                  unsigned int v23 = *(_DWORD *)v16;
                }
                else {
                  unsigned int v23 = -v22;
                }
                BYTE7(v57[0]) = 0;
                unint64_t v20 = (char *)v57 + 6;
                do
                {
                  *v20-- = v23 % 0xA + 48;
                  BOOL v21 = v23 > 9;
                  v23 /= 0xAu;
                }
                while (v21);
                if (v22 < 0) {
                  *unint64_t v20 = 45;
                }
                else {
                  ++v20;
                }
                uint64_t v24 = 4;
                goto LABEL_88;
              case 5u:
                float v33 = *(float *)v16;
                int v34 = *(_DWORD *)v16;
                if ((~*(_DWORD *)v16 & 0x7F800000) != 0)
                {
                  uint64_t v40 = (uint64_t)rintf(v33);
                  if (v33 == (float)(int)v40)
                  {
                    unint64_t v20 = __dst;
                    sprintf(__dst, "%d.", v40);
                    uint64_t v24 = 4;
                    goto LABEL_88;
                  }
                  int v45 = __dst;
                  sprintf(__dst, "%.8e", v33);
                  if (__dst[0] == 45 || __dst[0] == 43) {
                    int v45 = &__dst[1];
                  }
                  do
                  {
                    int v47 = *v45++;
                    int v46 = v47;
                  }
                  while ((v47 - 48) < 0xA);
                  if (v46 == 44) {
                    *(v45 - 1) = 46;
                  }
                  goto LABEL_107;
                }
                if ((v34 & 0x7FFFFFFF) != 0x7F800000)
                {
                  strcpy(__dst, ".Nan");
LABEL_107:
                  unint64_t v20 = __dst;
                  uint64_t v24 = 4;
                  goto LABEL_88;
                }
                if (v34 >= 0) {
                  int v35 = ".Inf";
                }
                else {
                  int v35 = "-.Inf";
                }
                unint64_t v20 = __dst;
                strcpy(__dst, v35);
                uint64_t v24 = 4;
LABEL_88:
                int v42 = *(_DWORD *)(a1 + 4);
                if (v42 == 8)
                {
                  int v18 = strlen(v20);
                  sub_1002B3DFC(a1, 0, v20, v18);
                }
                else if (v42 == 16)
                {
                  sub_1002B4140(a1, 0, v20);
                }
                else
                {
                  if (v15 - 5 <= 1)
                  {
                    size_t v43 = strlen(v20);
                    if (v43)
                    {
                      if (v20[v43 - 1] == 46) {
                        *(_WORD *)&__dst[v43] = 48;
                      }
                    }
                  }
                  sub_1002B4840(a1, 0, v20);
                }
                int v16 = (double *)((char *)v16 + v24);
                ++v17;
                uint64_t v12 = a2;
                if (v17 == v14) {
                  goto LABEL_24;
                }
                break;
              case 6u:
                double v36 = *v16;
                uint64_t v37 = *(void *)v16;
                uint64_t v38 = HIDWORD(*(void *)v16);
                if ((~v38 & 0x7FF00000) != 0)
                {
                  uint64_t v41 = (uint64_t)rint(v36);
                  if (v36 == (double)(int)v41)
                  {
                    unint64_t v20 = __dst;
                    sprintf(__dst, "%d.", v41);
                    uint64_t v24 = 8;
                    goto LABEL_88;
                  }
                  int v48 = __dst;
                  sprintf(__dst, "%.16e", *v16);
                  if (__dst[0] == 45 || __dst[0] == 43) {
                    int v48 = &__dst[1];
                  }
                  do
                  {
                    int v50 = *v48++;
                    int v49 = v50;
                  }
                  while ((v50 - 48) < 0xA);
                  if (v49 == 44) {
                    *(v48 - 1) = 46;
                  }
                  goto LABEL_114;
                }
                unsigned int v39 = v38 & 0x7FFFFFFF;
                if (v37) {
                  ++v39;
                }
                if (v39 > 0x7FF00000)
                {
                  strcpy(__dst, ".Nan");
LABEL_114:
                  unint64_t v20 = __dst;
                  uint64_t v24 = 8;
                  goto LABEL_88;
                }
                if (v37 >= 0) {
                  int v44 = ".Inf";
                }
                else {
                  int v44 = "-.Inf";
                }
                unint64_t v20 = __dst;
                strcpy(__dst, v44);
                uint64_t v24 = 8;
                goto LABEL_88;
              default:
                int v27 = *(_DWORD *)v16;
                if (*(int *)v16 >= 0) {
                  unsigned int v28 = *(_DWORD *)v16;
                }
                else {
                  unsigned int v28 = -v27;
                }
                BYTE7(v57[0]) = 0;
                unint64_t v20 = (char *)v57 + 6;
                do
                {
                  *v20-- = v28 % 0xA + 48;
                  BOOL v21 = v28 > 9;
                  v28 /= 0xAu;
                }
                while (v21);
                if (v27 < 0) {
                  *unint64_t v20 = 45;
                }
                else {
                  ++v20;
                }
                uint64_t v24 = 8;
                goto LABEL_88;
            }
          }
        }
LABEL_24:
        int v10 = v16 - v12;
        uint64_t v11 = v53 + 1;
      }
      while (v53 + 1 != v52);
    }
    while (v51);
  }
}

void sub_1002B37F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B38A4(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  if (!a1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *(_WORD *)sub_1002D19D8(&v10, 2) = 29542;
    sub_1002D2278(-215, &v10, "cvWriteRawDataBase64", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8387);
  }
  if (*(_DWORD *)a1 != 1280131417)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    qmemcpy((void *)sub_1002D19D8(&v10, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(-5, &v10, "cvWriteRawDataBase64", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8388);
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    qmemcpy((void *)sub_1002D19D8(&v10, 38), "The file storage is opened for reading", 38);
    sub_1002D2278(-2, &v10, "cvWriteRawDataBase64", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8388);
  }
  sub_1002B25CC(a1, 1);
  int v8 = *(_DWORD *)(a1 + 396);
  if (v8 != 2)
  {
    if (v8)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      qmemcpy((void *)sub_1002D19D8(&v10, 37), "Base64 should not be used at present.", 37);
      sub_1002D2278(-2, &v10, "cvWriteRawDataBase64", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8398);
    }
    sub_1002B2798(a1, 2u);
  }
  uint64_t v9 = *(uint64_t **)(a1 + 384);
  sub_1002BC7DC(v9, a4);
  sub_1002C50DC(&v10, a2, a3, (uint64_t)(v9 + 1));
  sub_1002BCA60((char ***)*v9, &v10);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
}

void sub_1002B3AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

const char *sub_1002B3B2C(const char *result, _DWORD *a2)
{
  if (result)
  {
    int v3 = result;
    int v4 = strlen(result);
    int v5 = v4;
    if (v4)
    {
      *a2 = 0;
      if (v4 >= 1)
      {
        int v6 = 0;
        int v7 = 0;
        while (1)
        {
          uint64_t v9 = &v3[v6];
          int v10 = *(unsigned __int8 *)v9;
          int v8 = v10 - 48;
          if ((v10 - 48) > 9)
          {
            uint64_t v11 = memchr("ucwsifdr", (char)v10, 9uLL);
            if (!v11)
            {
              unsigned int v15 = 0;
              uint64_t v16 = 0;
              qmemcpy((void *)sub_1002D19D8(&v15, 31), "Invalid data type specification", 31);
              sub_1002D2278(-5, (uint64_t *)&v15, "icvDecodeFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4709);
            }
            int v12 = a2[v7];
            if (v12)
            {
              unsigned int v13 = v11 - "ucwsifdr";
              a2[v7 + 1] = v13;
              if (v7 > 0) {
                goto LABEL_18;
              }
            }
            else
            {
              int v12 = 1;
              a2[v7] = 1;
              unsigned int v13 = v11 - "ucwsifdr";
              a2[v7 + 1] = v13;
              if (v7 > 0)
              {
LABEL_18:
                if (v13 == a2[v7 - 1])
                {
                  int v8 = 0;
                  a2[v7 - 2] += v12;
                }
                else
                {
                  if (v7 >= 0xFE)
                  {
                    unsigned int v15 = 0;
                    uint64_t v16 = 0;
                    qmemcpy((void *)sub_1002D19D8(&v15, 32), "Too long data type specification", 32);
                    sub_1002D2278(-5, (uint64_t *)&v15, "icvDecodeFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4719);
                  }
                  int v8 = 0;
                  v7 += 2;
                }
                goto LABEL_6;
              }
            }
            int v8 = 0;
            v7 += 2;
          }
          else
          {
            if (v3[v6 + 1] - 48 <= 9)
            {
              unsigned int v15 = 0;
              int v8 = strtol(v9, &v15, 10);
              int v6 = ~v3 + v15;
            }
            if (v8 <= 0)
            {
              unsigned int v15 = 0;
              uint64_t v16 = 0;
              qmemcpy((void *)sub_1002D19D8(&v15, 31), "Invalid data type specification", 31);
              sub_1002D2278(-5, (uint64_t *)&v15, "icvDecodeFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4701);
            }
          }
LABEL_6:
          a2[v7] = v8;
          if (++v6 >= v5) {
            goto LABEL_25;
          }
        }
      }
      int v7 = 0;
LABEL_25:
      if (v7 >= 0) {
        int v14 = v7;
      }
      else {
        int v14 = v7 + 1;
      }
      return (const char *)(v14 >> 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1002B3DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1002B3DFC(uint64_t a1, const char *a2, const void *a3, int a4)
{
  sub_1002B25CC(a1, 0);
  int v8 = *(_DWORD *)(a1 + 396);
  if (v8 == 2)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    qmemcpy((void *)sub_1002D19D8(&v27, 38), "Currently only Base64 data is allowed.", 38);
    sub_1002D2278(-2, &v27, "icvXMLWriteScalar", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3060);
  }
  if (!v8) {
    sub_1002B2798(a1, 1u);
  }
  if ((*(_DWORD *)(a1 + 68) & 7) != 6 && (!a2 || (*(_DWORD *)(a1 + 68) & 7u) > 4))
  {
    unint64_t v20 = *(char **)(a1 + 120);
    if (a2)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      qmemcpy((void *)sub_1002D19D8(&v27, 49), "elements with keys can not be written to sequence", 49);
      sub_1002D2278(-5, &v27, "icvXMLWriteScalar", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3078);
    }
    int v21 = v20 - *(_DWORD *)(a1 + 128) + a4;
    *(_DWORD *)(a1 + 68) = 5;
    if (v21 <= *(_DWORD *)(a1 + 144))
    {
      int v22 = *(char **)(a1 + 128);
      if (v20 <= v22) {
        goto LABEL_28;
      }
    }
    else
    {
      int v22 = *(char **)(a1 + 128);
      if (v21 - *(_DWORD *)(a1 + 64) > 10)
      {
LABEL_24:
        unsigned int v23 = *(char **)(a1 + 120);
        uint64_t v24 = *(int *)(a1 + 88);
        if (v23 > &v22[v24])
        {
          *(_WORD *)unsigned int v23 = 10;
          sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
          int v22 = *(char **)(a1 + 128);
          LODWORD(v24) = *(_DWORD *)(a1 + 88);
        }
        int v25 = *(_DWORD *)(a1 + 64);
        if (v24 == v25)
        {
          uint64_t v26 = (int)v24;
        }
        else
        {
          uint64_t v26 = v25;
          memset(v22, 32, v25);
          *(_DWORD *)(a1 + 88) = v25;
          int v22 = *(char **)(a1 + 128);
        }
        unint64_t v20 = &v22[v26];
        *(void *)(a1 + 120) = &v22[v26];
        goto LABEL_33;
      }
      if (v20 <= v22) {
        goto LABEL_28;
      }
    }
    if (*(v20 - 1) == 62) {
      goto LABEL_24;
    }
LABEL_28:
    if (v20 > &v22[*(int *)(a1 + 64)] && *(v20 - 1) != 62) {
      *v20++ = 32;
    }
LABEL_33:
    uint64_t result = memcpy(v20, a3, a4);
    *(void *)(a1 + 120) = &v20[a4];
    return result;
  }
  sub_1002BDA08(a1, a2, 1, 0, 0);
  uint64_t v9 = *(char **)(a1 + 120);
  size_t v10 = a4;
  unint64_t v11 = *(void *)(a1 + 136);
  if ((unint64_t)&v9[a4] >= v11)
  {
    uint64_t v12 = *(void *)(a1 + 128);
    int v13 = v9 - v12;
    unint64_t v14 = (3 * (v11 - v12) + (((3 * (v11 - v12)) & 0x8000000000000000) != 0)) >> 1;
    if (v13 + a4 <= (int)v14) {
      int v15 = v14;
    }
    else {
      int v15 = v13 + a4;
    }
    uint64_t v16 = (char *)sub_10020FEBC(v15 + 256);
    int v17 = v16;
    int v18 = *(const void **)(a1 + 128);
    *(void *)(a1 + 120) = &v16[*(void *)(a1 + 120) - (void)v18];
    if (v13 >= 1) {
      memcpy(v16, v18, v13);
    }
    *(void *)(a1 + 128) = v17;
    *(void *)(a1 + 136) = &v17[v15];
    uint64_t v9 = &v17[v13];
  }
  memcpy(v9, a3, v10);
  *(void *)(a1 + 120) = &v9[v10];
  return (void *)sub_1002BDA08(a1, a2, 2, 0, 0);
}

void sub_1002B4110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_1002B4140(uint64_t a1, const char *a2, const char *a3)
{
  sub_1002B25CC(a1, 0);
  int v6 = *(_DWORD *)(a1 + 396);
  if (v6 == 2)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    qmemcpy((void *)sub_1002D19D8(&v46, 36), "At present, output Base64 data only.", 36);
    sub_1002D2278(-2, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1899);
  }
  if (!v6) {
    sub_1002B2798(a1, 1u);
  }
  int v7 = *(_DWORD *)(a1 + 68);
  if (a2 && !*a2) {
    a2 = 0;
  }
  if ((*(_DWORD *)(a1 + 68) & 7u) < 5)
  {
    *(_DWORD *)(a1 + 12) = 0;
    if (a2) {
      int v7 = 38;
    }
    else {
      int v7 = 37;
    }
    if (!a2) {
      goto LABEL_32;
    }
  }
  else
  {
    if (((*(_DWORD *)(a1 + 68) & 7) == 6) != (a2 != 0))
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      qmemcpy((void *)sub_1002D19D8(&v46, 85), "An attempt to add element without a key to a map, or add element with key to sequence", 85);
      sub_1002D2278(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1916);
    }
    if (!a2)
    {
LABEL_32:
      int v9 = 0;
      if (!a3) {
        goto LABEL_33;
      }
LABEL_21:
      int v11 = strlen(a3);
      uint64_t v12 = *(char **)(a1 + 120);
      if ((v7 & 8) != 0) {
        goto LABEL_34;
      }
LABEL_22:
      uint64_t result = *(char **)(a1 + 128);
      uint64_t v14 = *(int *)(a1 + 88);
      if (v12 > &result[v14])
      {
        *(_WORD *)uint64_t v12 = 10;
        sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
        uint64_t result = *(char **)(a1 + 128);
        LODWORD(v14) = *(_DWORD *)(a1 + 88);
      }
      int v15 = *(_DWORD *)(a1 + 64);
      if (v14 == v15)
      {
        uint64_t v16 = &result[(int)v14];
        *(void *)(a1 + 120) = v16;
        if ((v7 & 7) == 6)
        {
LABEL_45:
          if (!a2) {
            goto LABEL_70;
          }
          goto LABEL_46;
        }
      }
      else
      {
        memset(result, 32, v15);
        *(_DWORD *)(a1 + 88) = v15;
        uint64_t result = *(char **)(a1 + 128);
        uint64_t v16 = &result[v15];
        *(void *)(a1 + 120) = v16;
        if ((v7 & 7) == 6) {
          goto LABEL_45;
        }
      }
      *uint64_t v16 = 45;
      if (a3)
      {
        v16[1] = 32;
        v16 += 2;
        if (!a2) {
          goto LABEL_70;
        }
      }
      else
      {
        ++v16;
        if (!a2) {
          goto LABEL_70;
        }
      }
      goto LABEL_46;
    }
  }
  int v8 = strlen(a2);
  if (!v8)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v17 = sub_1002D19D8(&v46, 19);
    *(_DWORD *)(v17 + 15) = 2037674093;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)"The key is an empty";
    sub_1002D2278(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1928);
  }
  int v9 = v8;
  if (v8 > 4096)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v10 = sub_1002D19D8(&v46, 19);
    *(_DWORD *)(v10 + 15) = 1735290732;
    *(_OWORD *)uint64_t v10 = *(_OWORD *)"The key is too long";
    sub_1002D2278(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1931);
  }
  if (a3) {
    goto LABEL_21;
  }
LABEL_33:
  int v11 = 0;
  uint64_t v12 = *(char **)(a1 + 120);
  if ((v7 & 8) == 0) {
    goto LABEL_22;
  }
LABEL_34:
  if ((v7 & 0x20) == 0) {
    *v12++ = 44;
  }
  uint64_t result = *(char **)(a1 + 128);
  int v18 = v11 + v9 + v12 - result;
  if (v18 <= *(_DWORD *)(a1 + 144) || (int v19 = *(_DWORD *)(a1 + 64), v18 - v19 < 11))
  {
    char *v12 = 32;
    uint64_t v16 = v12 + 1;
    goto LABEL_45;
  }
  *(void *)(a1 + 120) = v12;
  uint64_t v20 = *(int *)(a1 + 88);
  if (v12 > &result[v20])
  {
    *(_WORD *)uint64_t v12 = 10;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    uint64_t result = *(char **)(a1 + 128);
    LODWORD(v20) = *(_DWORD *)(a1 + 88);
    int v19 = *(_DWORD *)(a1 + 64);
  }
  if (v20 != v19)
  {
    memset(result, 32, v19);
    *(_DWORD *)(a1 + 88) = v19;
    uint64_t result = *(char **)(a1 + 128);
  }
  uint64_t v16 = &result[v19];
  *(void *)(a1 + 120) = v16;
  if (!a2)
  {
LABEL_70:
    if (!a3) {
      goto LABEL_79;
    }
    goto LABEL_71;
  }
LABEL_46:
  int v21 = *(unsigned __int8 *)a2;
  if (v21 != 95 && (v21 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    qmemcpy((void *)sub_1002D19D8(&v46, 33), "Key must start with a letter or _", 33);
    sub_1002D2278(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1966);
  }
  unint64_t v22 = *(void *)(a1 + 136);
  if ((unint64_t)&v16[v9] >= v22)
  {
    uint64_t v23 = *(void *)(a1 + 128);
    int v24 = v16 - v23;
    unint64_t v25 = (3 * (v22 - v23) + (((3 * (v22 - v23)) & 0x8000000000000000) != 0)) >> 1;
    if (v9 + (int)v16 - (int)v23 <= (int)v25) {
      int v26 = v25;
    }
    else {
      int v26 = v9 + v24;
    }
    uint64_t result = (char *)sub_10020FEBC(v26 + 256);
    uint64_t v27 = result;
    uint64_t v28 = *(const void **)(a1 + 128);
    *(void *)(a1 + 120) = &result[*(void *)(a1 + 120) - (void)v28];
    if (v24 >= 1) {
      uint64_t result = (char *)memcpy(result, v28, v24);
    }
    *(void *)(a1 + 128) = v27;
    *(void *)(a1 + 136) = &v27[v26];
    uint64_t v16 = &v27[v24];
  }
  if (v9 >= 1)
  {
    uint64_t v29 = v9;
    unsigned int v30 = v16;
    do
    {
      char v32 = *a2++;
      unsigned __int8 v31 = v32;
      *unsigned int v30 = v32;
      if ((v32 - 58) <= 0xF5u && ((v31 & 0xDF) - 91) <= 0xE5u)
      {
        unsigned int v33 = v31 - 32;
        BOOL v34 = v33 > 0x3F;
        unint64_t v35 = (1 << v33) & 0x8000000000002001;
        if (v34 || v35 == 0)
        {
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          qmemcpy((void *)sub_1002D19D8(&v46, 80), "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", 80);
          sub_1002D2278(-5, &v46, "icvYMLWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1976);
        }
      }
      ++v30;
      --v29;
    }
    while (v29);
  }
  uint64_t v37 = &v16[v9];
  *uint64_t v37 = 58;
  uint64_t v16 = v37 + 1;
  if (!a3 || (v7 & 8) != 0) {
    goto LABEL_70;
  }
  uint64_t v16 = v37 + 2;
  v37[1] = 32;
LABEL_71:
  unint64_t v38 = *(void *)(a1 + 136);
  if ((unint64_t)&v16[v11] >= v38)
  {
    uint64_t v39 = *(void *)(a1 + 128);
    int v40 = v16 - v39;
    unint64_t v41 = (3 * (v38 - v39) + (((3 * (v38 - v39)) & 0x8000000000000000) != 0)) >> 1;
    if (v11 + (int)v16 - (int)v39 <= (int)v41) {
      int v42 = v41;
    }
    else {
      int v42 = v11 + v40;
    }
    size_t v43 = (char *)sub_10020FEBC(v42 + 256);
    int v44 = v43;
    int v45 = *(const void **)(a1 + 128);
    *(void *)(a1 + 120) = &v43[*(void *)(a1 + 120) - (void)v45];
    if (v40 >= 1) {
      memcpy(v43, v45, v40);
    }
    *(void *)(a1 + 128) = v44;
    *(void *)(a1 + 136) = &v44[v42];
    uint64_t v16 = &v44[v40];
  }
  uint64_t result = (char *)memcpy(v16, a3, v11);
  v16 += v11;
LABEL_79:
  *(void *)(a1 + 120) = v16;
  *(_DWORD *)(a1 + 68) = v7 & 0xFFFFFFDF;
  return result;
}

void sub_1002B47B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1002B4840(uint64_t a1, const char *a2, const char *a3)
{
  sub_1002B25CC(a1, 0);
  int v6 = *(_DWORD *)(a1 + 396);
  if (v6 == 2)
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    qmemcpy((void *)sub_1002D19D8(&v50, 36), "At present, output Base64 data only.", 36);
    sub_1002D2278(-2, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3855);
  }
  if (!v6) {
    sub_1002B2798(a1, 1u);
  }
  if (!a2)
  {
    int v10 = 0;
    size_t v8 = 0;
    if (a3) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if (!*a2)
  {
    int v10 = 0;
    a2 = 0;
    size_t v8 = 0;
    if (a3) {
      goto LABEL_19;
    }
LABEL_13:
    size_t v11 = 0;
    int v12 = *(_DWORD *)(a1 + 68);
    unsigned int v13 = v12 & 7;
    if (v13 >= 5) {
      goto LABEL_20;
    }
LABEL_14:
    *(_DWORD *)(a1 + 12) = 0;
    if (v10) {
      int v12 = 38;
    }
    else {
      int v12 = 37;
    }
    goto LABEL_22;
  }
  size_t v7 = strlen(a2);
  if (!v7)
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v14 = sub_1002D19D8(&v50, 19);
    *(_DWORD *)(v14 + 15) = 2037674093;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)"The key is an empty";
    sub_1002D2278(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3867);
  }
  size_t v8 = v7;
  if ((int)v7 > 4096)
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v9 = sub_1002D19D8(&v50, 19);
    *(_DWORD *)(v9 + 15) = 1735290732;
    *(_OWORD *)uint64_t v9 = *(_OWORD *)"The key is too long";
    sub_1002D2278(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3869);
  }
  int v10 = 1;
  if (!a3) {
    goto LABEL_13;
  }
LABEL_19:
  size_t v11 = strlen(a3);
  int v12 = *(_DWORD *)(a1 + 68);
  unsigned int v13 = v12 & 7;
  if (v13 < 5) {
    goto LABEL_14;
  }
LABEL_20:
  if (v10 != (v13 == 6))
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    qmemcpy((void *)sub_1002D19D8(&v50, 85), "An attempt to add element without a key to a map, or add element with key to sequence", 85);
    sub_1002D2278(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3881);
  }
LABEL_22:
  if ((v12 & 8) == 0)
  {
    int v15 = *(char **)(a1 + 120);
    if ((v12 & 0x20) != 0)
    {
      uint64_t result = *(char **)(a1 + 128);
      uint64_t v17 = *(int *)(a1 + 88);
      if (v15 <= &result[v17])
      {
LABEL_38:
        int v20 = *(_DWORD *)(a1 + 64);
        if (v17 == v20)
        {
          size_t v22 = (int)v17;
          goto LABEL_40;
        }
        size_t v22 = v20;
        goto LABEL_43;
      }
    }
    else
    {
      strcpy(v15, ",\n");
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      uint64_t result = *(char **)(a1 + 128);
      *(void *)(a1 + 120) = result;
      int v15 = result;
      uint64_t v17 = *(int *)(a1 + 88);
      if (result <= &result[v17]) {
        goto LABEL_38;
      }
    }
    *(_WORD *)int v15 = 10;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    uint64_t result = *(char **)(a1 + 128);
    LODWORD(v17) = *(_DWORD *)(a1 + 88);
    goto LABEL_38;
  }
  int v18 = *(char **)(a1 + 120);
  if ((v12 & 0x20) == 0) {
    *v18++ = 44;
  }
  uint64_t result = *(char **)(a1 + 128);
  int v19 = v11 + v8 + v18 - result;
  if (*(_DWORD *)(a1 + 144) >= v19 || (int v20 = *(_DWORD *)(a1 + 64), v19 - v20 < 11))
  {
    char *v18 = 32;
    uint64_t v23 = v18 + 1;
    if (!v10) {
      goto LABEL_66;
    }
    goto LABEL_44;
  }
  *(void *)(a1 + 120) = v18;
  uint64_t v21 = *(int *)(a1 + 88);
  if (v18 > &result[v21])
  {
    *(_WORD *)int v18 = 10;
    sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
    uint64_t result = *(char **)(a1 + 128);
    LODWORD(v21) = *(_DWORD *)(a1 + 88);
    int v20 = *(_DWORD *)(a1 + 64);
  }
  size_t v22 = v20;
  if (v21 == v20)
  {
LABEL_40:
    uint64_t v23 = &result[v22];
    *(void *)(a1 + 120) = &result[v22];
    if (!v10) {
      goto LABEL_66;
    }
    goto LABEL_44;
  }
LABEL_43:
  memset(result, 32, v22);
  *(_DWORD *)(a1 + 88) = v20;
  uint64_t result = *(char **)(a1 + 128);
  uint64_t v23 = &result[v22];
  *(void *)(a1 + 120) = &result[v22];
  if (!v10) {
    goto LABEL_66;
  }
LABEL_44:
  int v24 = *(unsigned __int8 *)a2;
  if (v24 != 95 && (v24 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    qmemcpy((void *)sub_1002D19D8(&v50, 33), "Key must start with a letter or _", 33);
    sub_1002D2278(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3923);
  }
  unint64_t v25 = *(void *)(a1 + 136);
  if ((unint64_t)&v23[(int)v8] >= v25)
  {
    uint64_t v26 = *(void *)(a1 + 128);
    int v27 = v23 - v26;
    unint64_t v28 = (3 * (v25 - v26) + (((3 * (v25 - v26)) & 0x8000000000000000) != 0)) >> 1;
    if ((int)v23 - (int)v26 + (int)v8 <= (int)v28) {
      int v29 = v28;
    }
    else {
      int v29 = v27 + v8;
    }
    uint64_t result = (char *)sub_10020FEBC(v29 + 256);
    unsigned int v30 = result;
    unsigned __int8 v31 = *(const void **)(a1 + 128);
    *(void *)(a1 + 120) = &result[*(void *)(a1 + 120) - (void)v31];
    if (v27 >= 1) {
      uint64_t result = (char *)memcpy(result, v31, v27);
    }
    *(void *)(a1 + 128) = v30;
    *(void *)(a1 + 136) = &v30[v29];
    uint64_t v23 = &v30[v27];
  }
  char *v23 = 34;
  char v32 = (unsigned __int8 *)(v23 + 1);
  if (v8)
  {
    unsigned int v33 = v32;
    size_t v34 = v8;
    do
    {
      unsigned __int8 v36 = *a2++;
      unsigned __int8 v35 = v36;
      unsigned __int8 *v33 = v36;
      if ((v36 - 58) <= 0xF5u && ((v35 & 0xDF) - 91) <= 0xE5u)
      {
        unsigned int v37 = v35 - 32;
        BOOL v38 = v37 > 0x3F;
        unint64_t v39 = (1 << v37) & 0x8000000000002001;
        if (v38 || v39 == 0)
        {
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          qmemcpy((void *)sub_1002D19D8(&v50, 80), "Key names may only contain alphanumeric characters [a-zA-Z0-9], '-', '_' and ' '", 80);
          sub_1002D2278(-5, &v50, "icvJSONWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3934);
        }
      }
      ++v33;
      --v34;
    }
    while (v34);
  }
  unint64_t v41 = &v32[v8];
  *(_WORD *)unint64_t v41 = 14882;
  uint64_t v23 = (char *)&v32[v8 + 3];
  void v41[2] = 32;
LABEL_66:
  if (a3)
  {
    unint64_t v42 = *(void *)(a1 + 136);
    if ((unint64_t)&v23[(int)v11] >= v42)
    {
      uint64_t v43 = *(void *)(a1 + 128);
      int v44 = v23 - v43;
      unint64_t v45 = (3 * (v42 - v43) + (((3 * (v42 - v43)) & 0x8000000000000000) != 0)) >> 1;
      if ((int)v23 - (int)v43 + (int)v11 <= (int)v45) {
        int v46 = v45;
      }
      else {
        int v46 = v44 + v11;
      }
      uint64_t v47 = (char *)sub_10020FEBC(v46 + 256);
      int v48 = v47;
      int v49 = *(const void **)(a1 + 128);
      *(void *)(a1 + 120) = &v47[*(void *)(a1 + 120) - (void)v49];
      if (v44 >= 1) {
        memcpy(v47, v49, v44);
      }
      *(void *)(a1 + 128) = v48;
      *(void *)(a1 + 136) = &v48[v46];
      uint64_t v23 = &v48[v44];
    }
    uint64_t result = (char *)memcpy(v23, a3, v11);
    v23 += v11;
  }
  *(void *)(a1 + 120) = v23;
  *(_DWORD *)(a1 + 68) = v12 & 0xFFFFFFDF;
  return result;
}

void sub_1002B4E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_1002B4F10(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    int v3 = -27;
LABEL_5:
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    qmemcpy((void *)sub_1002D19D8(&v6, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(v3, &v6, "cvStartReadRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4920);
  }
  if (*a1 != 1280131417)
  {
    int v3 = -5;
    goto LABEL_5;
  }
  if (!a2 || !a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    qmemcpy((void *)sub_1002D19D8(&v6, 42), "Null pointer to source file node or reader", 42);
    sub_1002D2278(-27, &v6, "cvStartReadRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4923);
  }
  int v4 = *(_DWORD *)a2 & 7;
  if ((v4 - 1) > 1)
  {
    if (v4)
    {
      if (v4 != 5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        qmemcpy((void *)sub_1002D19D8(&v6, 56), "The file node should be a numerical scalar or a sequence", 56);
        sub_1002D2278(-5, &v6, "cvStartReadRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4943);
      }
      return sub_10025AD4C(*(void *)(a2 + 16), a3, 0);
    }
    else
    {
      double result = 0.0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    *(void *)(a3 + 32) = a2;
    *(void *)(a3 + 40) = a2 + 64;
    *(void *)(a3 + 24) = a2;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

void sub_1002B50D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002B50E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002B512C(_DWORD *a1, void *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v33 = a4;
  int v34 = a3;
  if (!a1)
  {
    int v7 = -27;
LABEL_5:
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    qmemcpy((void *)sub_1002D19D8(&v35, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(v7, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4955);
  }
  if (*a1 != 1280131417)
  {
    int v7 = -5;
    goto LABEL_5;
  }
  if (!a2 || !a4)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    qmemcpy((void *)sub_1002D19D8(&v35, 43), "Null pointer to reader or destination array", 43);
    sub_1002D2278(-27, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4958);
  }
  if (a3 != 1 && !a2[1])
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    qmemcpy((void *)sub_1002D19D8(&v35, 51), "The readed sequence is a scalar, thus len must be 1", 51);
    sub_1002D2278(-201, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4961);
  }
  int v32 = sub_1002B3B2C(a5, v37);
  uint64_t result = sub_1002B5860(a5);
  if (v32 <= 0)
  {
    while (1)
      ;
  }
  uint64_t v9 = v32;
  uint64_t v31 = (int)result;
LABEL_14:
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v12 = v33;
LABEL_16:
  unsigned int v13 = &v37[2 * v10];
  int v14 = *v13;
  unsigned int v15 = v13[1];
  LODWORD(v13) = (((v15 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v15 & 7))) & 3);
  uint64_t v16 = (float *)(v12 + ((v11 + (int)v13 - 1) & -(int)v13));
  if (v14 < 1) {
    goto LABEL_15;
  }
  int v17 = 0;
  while (2)
  {
    uint64_t v18 = a2[3];
    if ((*(_DWORD *)v18 & 7) != 1)
    {
      if ((*(_DWORD *)v18 & 7) == 2)
      {
        double v19 = *(double *)(v18 + 16);
        switch(v15)
        {
          case 0u:
            uint64_t v18 = (uint64_t)rint(v19);
            goto LABEL_23;
          case 1u:
            uint64_t v18 = (uint64_t)rint(v19);
            goto LABEL_35;
          case 2u:
            uint64_t v18 = (uint64_t)rint(v19);
            goto LABEL_30;
          case 3u:
            uint64_t v18 = (uint64_t)rint(v19);
            goto LABEL_43;
          case 4u:
            uint64_t v18 = (uint64_t)rint(v19);
            goto LABEL_32;
          case 5u:
            float v26 = v19;
            *v16++ = v26;
            unint64_t v27 = a2[3] + 32;
            a2[3] = v27;
            if (v27 < a2[5]) {
              goto LABEL_26;
            }
            goto LABEL_25;
          case 6u:
            goto LABEL_58;
          case 7u:
            uint64_t v18 = (uint64_t)rint(v19);
            goto LABEL_53;
          default:
            uint64_t v35 = 0;
            uint64_t v36 = 0;
            *(_OWORD *)sub_1002D19D8(&v35, 16) = *(_OWORD *)"Unsupported type";
            sub_1002D2278(-210, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5071);
        }
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      qmemcpy((void *)sub_1002D19D8(&v35, 46), "The sequence element is not a numerical scalar", 46);
      sub_1002D2278(-2, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5077);
    }
    LODWORD(v18) = *(_DWORD *)(v18 + 16);
    switch(v15)
    {
      case 0u:
LABEL_23:
        LODWORD(v18) = v18 & ~((int)v18 >> 31);
        BOOL v20 = (int)v18 < 255;
        char v21 = -1;
        goto LABEL_38;
      case 1u:
LABEL_35:
        if ((int)v18 <= -128) {
          LODWORD(v18) = -128;
        }
        BOOL v20 = (int)v18 < 127;
        char v21 = 127;
LABEL_38:
        if (!v20) {
          LOBYTE(v18) = v21;
        }
        *(unsigned char *)uint64_t v16 = v18;
        uint64_t v16 = (float *)((char *)v16 + 1);
        unint64_t v24 = a2[3] + 32;
        a2[3] = v24;
        if (v24 < a2[5]) {
          goto LABEL_26;
        }
        goto LABEL_25;
      case 2u:
LABEL_30:
        LODWORD(v18) = v18 & ~((int)v18 >> 31);
        int v22 = 0xFFFF;
        goto LABEL_46;
      case 3u:
LABEL_43:
        if ((int)v18 <= -32768) {
          LODWORD(v18) = -32768;
        }
        int v22 = 0x7FFF;
LABEL_46:
        if ((int)v18 >= v22) {
          LOWORD(v18) = v22;
        }
        *(_WORD *)uint64_t v16 = v18;
        uint64_t v16 = (float *)((char *)v16 + 2);
        unint64_t v25 = a2[3] + 32;
        a2[3] = v25;
        if (v25 < a2[5]) {
          goto LABEL_26;
        }
        goto LABEL_25;
      case 4u:
LABEL_32:
        *(_DWORD *)v16++ = v18;
        unint64_t v23 = a2[3] + 32;
        a2[3] = v23;
        if (v23 < a2[5]) {
          goto LABEL_26;
        }
        goto LABEL_25;
      case 5u:
        *v16++ = (float)(int)v18;
        unint64_t v29 = a2[3] + 32;
        a2[3] = v29;
        if (v29 >= a2[5]) {
          goto LABEL_25;
        }
        goto LABEL_26;
      case 6u:
        double v19 = (double)(int)v18;
LABEL_58:
        *(double *)uint64_t v16 = v19;
        v16 += 2;
        unint64_t v30 = a2[3] + 32;
        a2[3] = v30;
        if (v30 < a2[5]) {
          goto LABEL_26;
        }
        goto LABEL_25;
      case 7u:
LABEL_53:
        *(void *)uint64_t v16 = (int)v18;
        v16 += 2;
        unint64_t v28 = a2[3] + 32;
        a2[3] = v28;
        if (v28 < a2[5]) {
          goto LABEL_26;
        }
LABEL_25:
        uint64_t result = (uint64_t)sub_10025BA48(a2, 1);
LABEL_26:
        if (v34 - 1 != v17)
        {
          if (v14 != ++v17) {
            continue;
          }
          v34 -= v14;
          uint64_t v9 = v32;
LABEL_15:
          uint64_t v12 = v33;
          int v11 = v16 - v33;
          if (++v10 == v9)
          {
            v33 += v31;
            goto LABEL_14;
          }
          goto LABEL_16;
        }
        if (v34 != v14 || v32 - 1 != v10)
        {
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          qmemcpy((void *)sub_1002D19D8(&v35, 60), "The sequence slice does not fit an integer number of records", 60);
          sub_1002D2278(-201, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5092);
        }
        if (!a2[1]) {
          a2[3] -= 32;
        }
        return result;
      default:
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        *(_OWORD *)sub_1002D19D8(&v35, 16) = *(_OWORD *)"Unsupported type";
        sub_1002D2278(-210, &v35, "cvReadRawDataSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5021);
    }
  }
}

void sub_1002B5760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B5860(const char *a1)
{
  int v2 = sub_1002B3B2C(a1, &v14);
  if (v2 < 1)
  {
    int v6 = -1;
    unsigned int v7 = v15;
    char v8 = *a1;
    if (*a1) {
      goto LABEL_5;
    }
LABEL_18:
    LODWORD(v9) = 0;
    goto LABEL_19;
  }
  unint64_t v3 = 0;
  int v4 = 0;
  do
  {
    int v5 = (((*(&v14 + v3 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(&v14 + v3 + 1) & 7))) & 3);
    int v4 = ((v4 + v5 - 1) & -v5) + v5 * *(&v14 + v3);
    v3 += 2;
  }
  while (v3 < (2 * v2));
  int v6 = v4 - 1;
  unsigned int v7 = v15;
  char v8 = *a1;
  if (!*a1) {
    goto LABEL_18;
  }
LABEL_5:
  unint64_t v9 = 0;
  uint64_t v10 = (unsigned __int8 *)(a1 + 1);
  do
  {
    switch(v8)
    {
      case 'c':
      case 'u':
        if (v9 <= 1) {
          unint64_t v9 = 1;
        }
        break;
      case 'd':
        unint64_t v9 = 8;
        break;
      case 'f':
      case 'i':
        if (v9 <= 4) {
          unint64_t v9 = 4;
        }
        break;
      case 's':
      case 'w':
        if (v9 <= 2) {
          unint64_t v9 = 2;
        }
        break;
      default:
        break;
    }
    int v11 = *v10++;
    char v8 = v11;
  }
  while (v11);
LABEL_19:
  int v12 = (((v7 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v7 & 7))) & 3);
  return (((v6 + v12) & -v12) + v9 - 1) & -(int)v9;
}

uint64_t sub_1002B5A44(_DWORD *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if (!a2 || !a3)
  {
    v10[0] = 0;
    v10[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v10, 54), "Null pointers to source file node or destination array", 54);
    sub_1002D2278(-27, v10, "cvReadRawData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5106);
  }
  sub_1002B4F10(a1, a2, (uint64_t)v11);
  if ((*(_DWORD *)a2 & 7) == 5) {
    int v8 = *(_DWORD *)(*(void *)(a2 + 16) + 40);
  }
  else {
    int v8 = 1;
  }
  return sub_1002B512C(a1, v11, v8, a3, a4);
}

void sub_1002B5B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1002B5B40(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 4) != 72)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v2 = sub_1002D19D8(&v18, 17);
    *(unsigned char *)(v2 + 16) = 111;
    *(_OWORD *)uint64_t v2 = *(_OWORD *)"Invalid type info";
    sub_1002D2278(-201, &v18, "cvRegisterType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6559);
  }
  if (!*(void *)(a1 + 32) || !*(void *)(a1 + 40) || !*(void *)(a1 + 48) || !*(void *)(a1 + 56))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    qmemcpy((void *)sub_1002D19D8(&v18, 81), "Some of required function pointers (is_instance, release, read or write) are NULL", 81);
    sub_1002D2278(-27, &v18, "cvRegisterType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6565);
  }
  unint64_t v3 = *(const char **)(a1 + 24);
  int v4 = *(unsigned __int8 *)v3;
  if (v4 != 95 && (v4 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    qmemcpy((void *)sub_1002D19D8(&v18, 41), "Type name should start with a letter or _", 41);
    sub_1002D2278(-5, &v18, "cvRegisterType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6569);
  }
  int v6 = strlen(v3);
  int v7 = v6;
  if (v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      char v9 = *(unsigned char *)(*(void *)(a1 + 24) + i);
      if ((v9 - 58) <= 0xF5u && ((v9 & 0xDF) - 91) <= 0xE5u)
      {
        int v10 = *(unsigned __int8 *)(*(void *)(a1 + 24) + i);
        if (v10 != 45 && v10 != 95)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          qmemcpy((void *)sub_1002D19D8(&v18, 54), "Type name should contain only letters, digits, - and _", 54);
          sub_1002D2278(-5, &v18, "cvRegisterType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6578);
        }
      }
    }
  }
  uint64_t v11 = sub_10020FEBC(v6 + 73);
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v12 = *(_OWORD *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 64);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
  *(void *)(v11 + 64) = v14;
  *(_OWORD *)(v11 + 32) = v13;
  *(_OWORD *)(v11 + 48) = v12;
  *(void *)(v11 + 24) = v11 + 72;
  uint64_t result = memcpy((void *)(v11 + 72), *(const void **)(a1 + 24), v7 + 1);
  *(_DWORD *)uint64_t v11 = 0;
  uint64_t v16 = qword_1004F8CE8;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = v16;
  if (v16) {
    int v17 = (uint64_t *)(v16 + 8);
  }
  else {
    int v17 = &qword_1004F8CF0;
  }
  *int v17 = v11;
  qword_1004F8CE8 = v11;
  return result;
}

void sub_1002B5E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1002B5E74(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v9[0] = 0x4800000000;
  v9[1] = 0;
  _OWORD v9[2] = 0;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v9[6] = a5;
  v9[7] = a6;
  unsigned char v9[8] = a7;
  sub_1002B5B40((uint64_t)v9);
  *a1 = qword_1004F8CE8;
  return a1;
}

uint64_t sub_1002B5ED0(uint64_t a1)
{
  uint64_t v2 = *(const char **)(*(void *)a1 + 24);
  uint64_t v3 = qword_1004F8CE8;
  if (v2) {
    BOOL v4 = qword_1004F8CE8 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = qword_1004F8CE8;
    while (strcmp(*(const char **)(v5 + 24), v2))
    {
      uint64_t v5 = *(void *)(v5 + 16);
      if (!v5) {
        return a1;
      }
    }
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    if (v6)
    {
      *(void *)(v6 + 16) = v7;
      uint64_t v7 = *(void *)(v5 + 16);
      if (v7) {
        goto LABEL_11;
      }
    }
    else
    {
      qword_1004F8CE8 = *(void *)(v5 + 16);
      uint64_t v3 = v7;
      if (v7)
      {
LABEL_11:
        *(void *)(v7 + 8) = v6;
        uint64_t v6 = qword_1004F8CF0;
        if (!v3) {
          goto LABEL_16;
        }
LABEL_15:
        if (v6)
        {
LABEL_17:
          j__free((void *)v5);
          return a1;
        }
LABEL_16:
        qword_1004F8CF0 = 0;
        qword_1004F8CE8 = 0;
        goto LABEL_17;
      }
    }
    qword_1004F8CF0 = v6;
    if (!v3) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  return a1;
}

BOOL sub_1002B5F98(BOOL result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 2) == 17049;
  }
  return result;
}

void *sub_1002B5FB0(void *result)
{
  if (!result)
  {
    v2[0] = 0;
    v2[1] = 0;
    uint64_t v1 = sub_1002D19D8(v2, 19);
    *(_DWORD *)(v1 + 15) = 1919251566;
    *(_OWORD *)uint64_t v1 = *(_OWORD *)"NULL double pointer";
    sub_1002D2278(-27, v2, "icvReleaseSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5729);
  }
  *uint64_t result = 0;
  return result;
}

void sub_1002B6038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_1002B6050(uint64_t a1, uint64_t a2)
{
  __endptr = 0;
  uint64_t v4 = sub_1002ACF04(a1, a2, "flags");
  if (v4 && (*(_DWORD *)v4 & 7) == 3)
  {
    uint64_t v5 = *(char **)(v4 + 24);
    uint64_t v6 = sub_1002ACF04(a1, a2, "count");
    if (!v6)
    {
LABEL_4:
      LODWORD(v7) = -1;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = sub_1002ACF04(a1, a2, "count");
    if (!v6) {
      goto LABEL_4;
    }
  }
  if ((*(_DWORD *)v6 & 7) == 2)
  {
    uint64_t v7 = (uint64_t)rint(*(double *)(v6 + 16));
  }
  else if ((*(_DWORD *)v6 & 7) == 1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 + 16);
  }
  else
  {
    LODWORD(v7) = 0x7FFFFFFF;
  }
LABEL_11:
  int v65 = v7;
  uint64_t v8 = sub_1002ACF04(a1, a2, "dt");
  if (!v8 || (*(_DWORD *)v8 & 7) != 3 || (char v9 = *(const char **)(v8 + 24), !v5) || v65 == -1 || !v9)
  {
    uint64_t v71 = 0;
    uint64_t v70 = 0;
    qmemcpy((void *)sub_1002D19D8(&v70, 48), "Some of essential sequence attributes are absent", 48);
    sub_1002D2278(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5953);
  }
  if (*v5 - 48 > 9)
  {
    if (strstr(v5, "curve")) {
      int v13 = 1117327360;
    }
    else {
      int v13 = 1117323264;
    }
    if (strstr(v5, "closed")) {
      v13 |= 0x4000u;
    }
    if (strstr(v5, "hole")) {
      unsigned int v12 = v13 | 0x8000;
    }
    else {
      unsigned int v12 = v13;
    }
    if (!strstr(v5, "untyped")) {
      v12 |= sub_1002C42E0(v9);
    }
  }
  else
  {
    unsigned int v10 = strtol(v5, &__endptr, 16);
    if (__endptr == v5 || (v10 & 0xFFFF0000) != 0x42990000)
    {
      uint64_t v71 = 0;
      uint64_t v70 = 0;
      qmemcpy((void *)sub_1002D19D8(&v70, 30), "The sequence flags are invalid", 30);
      sub_1002D2278(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5970);
    }
    if ((v10 & 0xE00) == 0x200) {
      int v11 = 1117327360;
    }
    else {
      int v11 = 1117323264;
    }
    unsigned int v12 = v10 & 0x81FF | (((v10 >> 12) & 1) << 14) | v11;
  }
  uint64_t v14 = sub_1002ACF04(a1, a2, "header_dt");
  if (v14 && (*(_DWORD *)v14 & 7) == 3) {
    unsigned int v15 = *(const char **)(v14 + 24);
  }
  else {
    unsigned int v15 = 0;
  }
  uint64_t v16 = sub_1002ACF04(a1, a2, "header_user_data");
  BOOL v17 = v16 != 0;
  if ((v15 != 0) != v17)
  {
    uint64_t v71 = 0;
    uint64_t v70 = 0;
    qmemcpy((void *)sub_1002D19D8(&v70, 74), "One of \"header_dt\" and \"header_user_data\" is there, while the other is not", 74);
    sub_1002D2278(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6004);
  }
  uint64_t v18 = sub_1002ACF04(a1, a2, "rect");
  uint64_t v19 = sub_1002ACF04(a1, a2, "origin");
  uint64_t v20 = v19;
  if (v18) {
    unsigned int v21 = v17 + 1;
  }
  else {
    unsigned int v21 = v16 != 0;
  }
  if (v19) {
    ++v21;
  }
  if (v21 >= 2)
  {
    uint64_t v71 = 0;
    uint64_t v70 = 0;
    qmemcpy((void *)sub_1002D19D8(&v70, 66), "Only one of \"header_user_data\", \"rect\" and \"origin\" tags may occur", 66);
    sub_1002D2278(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6010);
  }
  if (v15)
  {
    int v22 = sub_1002B3B2C(v15, &v70);
    if (v22 < 1)
    {
      int v24 = 96;
    }
    else
    {
      unint64_t v23 = 0;
      int v24 = 96;
      do
      {
        int v25 = (((*((_DWORD *)&v70 + v23 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v70 + v23 + 1) & 7))) & 3);
        int v24 = ((v24 + v25 - 1) & -v25) + v25 * *((_DWORD *)&v70 + v23);
        v23 += 2;
      }
      while (v23 < (2 * v22));
    }
    unint64_t v27 = v24;
  }
  else
  {
    uint64_t v26 = 96;
    if (v19) {
      uint64_t v26 = 104;
    }
    if (v18) {
      unint64_t v27 = 128;
    }
    else {
      unint64_t v27 = v26;
    }
  }
  int v28 = sub_1002B3B2C(v9, &v70);
  if (v28 < 1)
  {
    int v30 = 0;
  }
  else
  {
    unint64_t v29 = 0;
    int v30 = 0;
    do
    {
      int v31 = (((*((_DWORD *)&v70 + v29 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v70 + v29 + 1) & 7))) & 3);
      int v30 = ((v30 + v31 - 1) & -v31) + v31 * *((_DWORD *)&v70 + v29);
      v29 += 2;
    }
    while (v29 < (2 * v28));
  }
  int v32 = (((HIDWORD(v70) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (BYTE4(v70) & 7))) & 3);
  uint64_t v33 = sub_10025A7E4(v12, v27, (v30 + v32 - 1) & -v32, *(void *)(a1 + 24));
  if (v16)
  {
    if (!v15)
    {
      uint64_t v71 = 0;
      uint64_t v70 = 0;
      uint64_t v37 = sub_1002D19D8(&v70, 9);
      *(unsigned char *)(v37 + 8) = 116;
      *(void *)uint64_t v37 = *(void *)"header_dt";
      sub_1002D2278(-215, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6026);
    }
    sub_1002B4F10((_DWORD *)a1, v16, (uint64_t)&v70);
    if ((*(_DWORD *)v16 & 7) == 5) {
      int v34 = *(_DWORD *)(*(void *)(v16 + 16) + 40);
    }
    else {
      int v34 = 1;
    }
    sub_1002B512C((_DWORD *)a1, &v70, v34, (uint64_t)(v33 + 24), v15);
  }
  else if (v18)
  {
    uint64_t v35 = sub_1002ACF04(a1, v18, "x");
    if (v35)
    {
      if ((*(_DWORD *)v35 & 7) == 2)
      {
        uint64_t v36 = (uint64_t)rint(*(double *)(v35 + 16));
      }
      else if ((*(_DWORD *)v35 & 7) == 1)
      {
        LODWORD(v36) = *(_DWORD *)(v35 + 16);
      }
      else
      {
        LODWORD(v36) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v36) = 0;
    }
    v33[24] = v36;
    uint64_t v40 = sub_1002ACF04(a1, v18, "y");
    if (v40)
    {
      if ((*(_DWORD *)v40 & 7) == 2)
      {
        uint64_t v41 = (uint64_t)rint(*(double *)(v40 + 16));
      }
      else if ((*(_DWORD *)v40 & 7) == 1)
      {
        LODWORD(v41) = *(_DWORD *)(v40 + 16);
      }
      else
      {
        LODWORD(v41) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v41) = 0;
    }
    v33[25] = v41;
    uint64_t v42 = sub_1002ACF04(a1, v18, "width");
    if (v42)
    {
      if ((*(_DWORD *)v42 & 7) == 2)
      {
        uint64_t v43 = (uint64_t)rint(*(double *)(v42 + 16));
      }
      else if ((*(_DWORD *)v42 & 7) == 1)
      {
        LODWORD(v43) = *(_DWORD *)(v42 + 16);
      }
      else
      {
        LODWORD(v43) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v43) = 0;
    }
    v33[26] = v43;
    uint64_t v44 = sub_1002ACF04(a1, v18, "height");
    if (v44)
    {
      if ((*(_DWORD *)v44 & 7) == 2)
      {
        uint64_t v45 = (uint64_t)rint(*(double *)(v44 + 16));
      }
      else if ((*(_DWORD *)v44 & 7) == 1)
      {
        LODWORD(v45) = *(_DWORD *)(v44 + 16);
      }
      else
      {
        LODWORD(v45) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v45) = 0;
    }
    v33[27] = v45;
    uint64_t v46 = sub_1002ACF04(a1, a2, "color");
    if (v46)
    {
      if ((*(_DWORD *)v46 & 7) == 2)
      {
        v33[28] = (uint64_t)rint(*(double *)(v46 + 16));
      }
      else if ((*(_DWORD *)v46 & 7) == 1)
      {
        v33[28] = *(_DWORD *)(v46 + 16);
      }
      else
      {
        v33[28] = 0x7FFFFFFF;
      }
    }
    else
    {
      v33[28] = 0;
    }
  }
  else if (v20)
  {
    uint64_t v38 = sub_1002ACF04(a1, v20, "x");
    if (v38)
    {
      if ((*(_DWORD *)v38 & 7) == 2)
      {
        uint64_t v39 = (uint64_t)rint(*(double *)(v38 + 16));
      }
      else if ((*(_DWORD *)v38 & 7) == 1)
      {
        LODWORD(v39) = *(_DWORD *)(v38 + 16);
      }
      else
      {
        LODWORD(v39) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v39) = 0;
    }
    v33[24] = v39;
    uint64_t v47 = sub_1002ACF04(a1, v20, "y");
    if (v47)
    {
      if ((*(_DWORD *)v47 & 7) == 2)
      {
        uint64_t v48 = (uint64_t)rint(*(double *)(v47 + 16));
      }
      else if ((*(_DWORD *)v47 & 7) == 1)
      {
        LODWORD(v48) = *(_DWORD *)(v47 + 16);
      }
      else
      {
        LODWORD(v48) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v48) = 0;
    }
    v33[25] = v48;
  }
  sub_10025BDA8((uint64_t)v33, 0, v65, 0);
  int v49 = sub_1002B3B2C(v9, v68);
  if (v49 < 1)
  {
    int v52 = 0;
  }
  else
  {
    unint64_t v50 = (2 * v49);
    if (v49 >= 9)
    {
      unint64_t v53 = ((v50 - 1) >> 1) + 1;
      uint64_t v54 = v53 & 7;
      if ((v53 & 7) == 0) {
        uint64_t v54 = 8;
      }
      unint64_t v55 = v53 - v54;
      unint64_t v51 = 2 * v55;
      int v56 = (const float *)&v69;
      int32x4_t v57 = 0uLL;
      int32x4_t v58 = 0uLL;
      do
      {
        uint64_t v59 = v56 - 8;
        unsigned long long v60 = (unsigned __int128)vld2q_f32(v59);
        unsigned long long v61 = (unsigned __int128)vld2q_f32(v56);
        int32x4_t v57 = vaddq_s32((int32x4_t)v60, v57);
        int32x4_t v58 = vaddq_s32((int32x4_t)v61, v58);
        v56 += 16;
        v55 -= 8;
      }
      while (v55);
      int v52 = vaddvq_s32(vaddq_s32(v58, v57));
    }
    else
    {
      unint64_t v51 = 0;
      int v52 = 0;
    }
    do
    {
      v52 += v68[v51];
      v51 += 2;
    }
    while (v51 < v50);
  }
  uint64_t v62 = sub_1002ACF04(a1, a2, "data");
  if (!v62)
  {
    uint64_t v71 = 0;
    uint64_t v70 = 0;
    qmemcpy((void *)sub_1002D19D8(&v70, 43), "The image data is not found in file storage", 43);
    sub_1002D2278(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6053);
  }
  if ((*(_DWORD *)v62 & 7u) < 5)
  {
    if (((*(_DWORD *)v62 & 7) != 0) == v52 * v65) {
      goto LABEL_140;
    }
LABEL_139:
    uint64_t v71 = 0;
    uint64_t v70 = 0;
    qmemcpy((void *)sub_1002D19D8(&v70, 55), "The number of stored elements does not match to \"count\"", 55);
    sub_1002D2278(-2, &v70, "icvReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6056);
  }
  if (*(_DWORD *)(*(void *)(v62 + 16) + 40) != v52 * v65) {
    goto LABEL_139;
  }
LABEL_140:
  sub_1002B4F10((_DWORD *)a1, v62, (uint64_t)v67);
  for (uint64_t i = *((void *)v33 + 11); i; uint64_t i = *(void *)(i + 8))
  {
    sub_1002B512C((_DWORD *)a1, v67, *(_DWORD *)(i + 20) * v52, *(void *)(i + 24), v9);
    if (i == **((void **)v33 + 11)) {
      break;
    }
  }
  return v33;
}

void sub_1002B6B88(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1002B6304);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002B6C60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  if (!a4) {
    goto LABEL_20;
  }
  unsigned int v10 = &v20;
  uint64_t v11 = 1;
  unsigned int v12 = (const char **)a4;
  while (!*v12)
  {
LABEL_9:
    unsigned int v10 = (char *)*((void *)v10 + 1);
    if (v10)
    {
      unsigned int v12 = *(const char ***)v10;
      if (*(void *)v10) {
        continue;
      }
    }
    goto LABEL_20;
  }
  if (strcmp("recursive", *v12))
  {
    LODWORD(v13) = 1;
    while (1)
    {
      uint64_t v14 = v12[(v13 + 1)];
      if (!v14) {
        goto LABEL_9;
      }
      uint64_t v13 = (v13 + 2);
      if (!strcmp("recursive", v14))
      {
        uint64_t v11 = v13;
        break;
      }
    }
  }
  unsigned int v15 = v12[v11];
  if (v15 && strcmp(v12[v11], "0") && strcmp(v15, "false") && strcmp(v15, "False") && strcmp(v15, "FALSE"))
  {
    sub_1002B2180(a1, a2, 6, (uint64_t)"opencv-sequence-tree");
    sub_1002B2180(a1, "sequences", 5, 0);
    sub_10025F9FC((uint64_t)&v18, a3, 0x7FFFFFFF);
    for (uint64_t i = v18; v18; uint64_t i = v18)
    {
      sub_1002C43D4(a1, 0, i, a4, a5, v19);
      sub_10025FAD4(&v18);
    }
    sub_1002B2B88(a1);
    return sub_1002B2B88(a1);
  }
LABEL_20:

  return sub_1002C43D4(a1, a2, a3, a4, a5, 0xFFFFFFFFLL);
}

_DWORD *sub_1002B6E44(uint64_t a1)
{
  return sub_10025C43C(a1, 0x3FFFFFFF00000000, 0, 1);
}

uint64_t sub_1002B6E54(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = sub_1002ACF04((uint64_t)a1, a2, "sequences");
  if (!v3 || (*(_DWORD *)v3 & 7) != 5)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 90), "opencv-sequence-tree instance should contain a field \"sequences\" that should be a sequence", 90);
    sub_1002D2278(-212, &v19, "icvReadSeqTree", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6087);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  int v5 = *(_DWORD *)(v4 + 40);
  sub_10025AD4C(v4, (uint64_t)v21, 0);
  int v18 = v5;
  if (v5 >= 1)
  {
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    char v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = v22;
      uint64_t v12 = sub_1002BA714(a1, v22, 0);
      if (!v12)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v13 = sub_1002D19D8(&v19, 3);
        *(_WORD *)uint64_t v13 = 25971;
        *(unsigned char *)(v13 + 2) = 113;
        sub_1002D2278(-215, &v19, "icvReadSeqTree", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6099);
      }
      uint64_t v14 = sub_1002ACF04((uint64_t)a1, v11, "level");
      if (!v14)
      {
LABEL_13:
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        qmemcpy((void *)sub_1002D19D8(&v19, 56), "All the sequence tree nodes should contain \"level\" field", 56);
        sub_1002D2278(-212, &v19, "icvReadSeqTree", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6102);
      }
      if ((*(_DWORD *)v14 & 7) == 2) {
        break;
      }
      if ((*(_DWORD *)v14 & 7) == 1)
      {
        LODWORD(v15) = *(_DWORD *)(v14 + 16);
        if ((v15 & 0x80000000) != 0) {
          goto LABEL_13;
        }
        goto LABEL_15;
      }
      LODWORD(v15) = 0x7FFFFFFF;
      if (!v10) {
        uint64_t v10 = v12;
      }
      BOOL v16 = 0;
      if (v6 != 0x7FFFFFFF)
      {
LABEL_18:
        if (v8) {
          v8[4] = v12;
        }
        *(void *)(v12 + 8) = 0;
        char v9 = v8;
        goto LABEL_30;
      }
LABEL_24:
      if (v16)
      {
        do
        {
          uint64_t v8 = (void *)v8[3];
          --v6;
        }
        while (v6 > (int)v15);
        char v9 = (void *)v8[3];
        *(void *)(v12 + 8) = v8;
LABEL_29:
        int v8[2] = v12;
        goto LABEL_30;
      }
      *(void *)(v12 + 8) = v8;
      if (v8) {
        goto LABEL_29;
      }
LABEL_30:
      *(void *)(v12 + 24) = v9;
      v22 += *(int *)(v4 + 44);
      if (v22 >= v23) {
        sub_10025BA48(v21, 1);
      }
      ++v7;
      int v6 = v15;
      uint64_t v8 = (void *)v12;
      if (v7 == v18) {
        return v10;
      }
    }
    uint64_t v15 = (uint64_t)rint(*(double *)(v14 + 16));
    if ((v15 & 0x80000000) != 0) {
      goto LABEL_13;
    }
LABEL_15:
    if (!v10) {
      uint64_t v10 = v12;
    }
    BOOL v16 = (int)v15 < v6;
    if ((int)v15 > v6) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  return 0;
}

void sub_1002B7124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1002B716C(_DWORD *result)
{
  if (result)
  {
    if (HIWORD(*result) == 17048) {
      return (_DWORD *)((*result & 0x3000) == 4096);
    }
    else {
      return 0;
    }
  }
  return result;
}

void *sub_1002B7190(void *result)
{
  if (!result)
  {
    v2[0] = 0;
    v2[1] = 0;
    uint64_t v1 = sub_1002D19D8(v2, 19);
    *(_DWORD *)(v1 + 15) = 1919251566;
    *(_OWORD *)uint64_t v1 = *(_OWORD *)"NULL double pointer";
    sub_1002D2278(-27, v2, "icvReleaseGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6145);
  }
  *uint64_t result = 0;
  return result;
}

void sub_1002B7218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_1002B7230(uint64_t a1, uint64_t a2)
{
  __endptr = 0;
  uint64_t v3 = sub_1002ACF04(a1, a2, "flags");
  if (v3 && (*(_DWORD *)v3 & 7) == 3)
  {
    uint64_t v4 = *(char **)(v3 + 24);
    uint64_t v5 = sub_1002ACF04(a1, a2, "vertex_dt");
    if (!v5)
    {
LABEL_9:
      int v6 = 0;
      uint64_t v7 = sub_1002ACF04(a1, a2, "edge_dt");
      if (!v7) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = sub_1002ACF04(a1, a2, "vertex_dt");
    if (!v5) {
      goto LABEL_9;
    }
  }
  if ((*(_DWORD *)v5 & 7) != 3) {
    goto LABEL_9;
  }
  int v6 = *(const char **)(v5 + 24);
  uint64_t v7 = sub_1002ACF04(a1, a2, "edge_dt");
  if (!v7)
  {
LABEL_13:
    uint64_t v121 = 0;
    uint64_t v8 = sub_1002ACF04(a1, a2, "vertex_count");
    if (!v8) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
LABEL_10:
  if ((*(_DWORD *)v7 & 7) != 3) {
    goto LABEL_13;
  }
  uint64_t v121 = *(void *)(v7 + 24);
  uint64_t v8 = sub_1002ACF04(a1, a2, "vertex_count");
  if (!v8)
  {
LABEL_12:
    LODWORD(v9) = -1;
    goto LABEL_19;
  }
LABEL_14:
  if ((*(_DWORD *)v8 & 7) == 2)
  {
    uint64_t v9 = (uint64_t)rint(*(double *)(v8 + 16));
  }
  else if ((*(_DWORD *)v8 & 7) == 1)
  {
    LODWORD(v9) = *(_DWORD *)(v8 + 16);
  }
  else
  {
    LODWORD(v9) = 0x7FFFFFFF;
  }
LABEL_19:
  int v117 = v9;
  uint64_t v10 = sub_1002ACF04(a1, a2, "edge_count");
  if (v10)
  {
    if ((*(_DWORD *)v10 & 7) == 2)
    {
      uint64_t v123 = (uint64_t)rint(*(double *)(v10 + 16));
      uint64_t v113 = a2;
      int v115 = v6;
      if (!v4) {
        goto LABEL_32;
      }
    }
    else if ((*(_DWORD *)v10 & 7) == 1)
    {
      LODWORD(v123) = *(_DWORD *)(v10 + 16);
      uint64_t v113 = a2;
      int v115 = v6;
      if (!v4) {
        goto LABEL_32;
      }
    }
    else
    {
      LODWORD(v123) = 0x7FFFFFFF;
      uint64_t v113 = a2;
      int v115 = v6;
      if (!v4) {
        goto LABEL_32;
      }
    }
  }
  else
  {
    LODWORD(v123) = -1;
    uint64_t v113 = a2;
    int v115 = v6;
    if (!v4) {
      goto LABEL_32;
    }
  }
  if (v117 == -1 || v123 == -1 || !v121)
  {
LABEL_32:
    uint64_t v132 = 0;
    uint64_t v131 = 0;
    qmemcpy((void *)sub_1002D19D8(&v131, 45), "Some of essential graph attributes are absent", 45);
    sub_1002D2278(-2, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6324);
  }
  if ((*v4 & 0x80000000) == 0 && (_DefaultRuneLocale.__runetype[*v4] & 0x10000) != 0)
  {
    int v12 = strtol(v4, &__endptr, 16);
    if (__endptr == v4 || (v12 & 0xFFFF0000) != 0x42980000)
    {
      uint64_t v132 = 0;
      uint64_t v131 = 0;
      qmemcpy((void *)sub_1002D19D8(&v131, 30), "The sequence flags are invalid", 30);
      sub_1002D2278(-2, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6337);
    }
    BOOL v11 = (v12 & 0x1000) == 0;
  }
  else
  {
    BOOL v11 = strstr(v4, "oriented") == 0;
  }
  if (v11) {
    int v14 = 1117261824;
  }
  else {
    int v14 = 1117278208;
  }
  uint64_t v15 = sub_1002ACF04(a1, a2, "header_dt");
  if (v15)
  {
    uint64_t v16 = v113;
    if ((*(_DWORD *)v15 & 7) == 3) {
      BOOL v17 = *(const char **)(v15 + 24);
    }
    else {
      BOOL v17 = 0;
    }
  }
  else
  {
    BOOL v17 = 0;
    uint64_t v16 = v113;
  }
  uint64_t v119 = (void *)sub_1002ACF04(a1, v16, "header_user_data");
  if ((v17 != 0) != (v119 != 0))
  {
    uint64_t v132 = 0;
    uint64_t v131 = 0;
    qmemcpy((void *)sub_1002D19D8(&v131, 74), "One of \"header_dt\" and \"header_user_data\" is there, while the other is not", 74);
    sub_1002D2278(-2, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6352);
  }
  if (v17)
  {
    int v18 = sub_1002B3B2C(v17, &v131);
    if (v18 >= 1)
    {
      unint64_t v19 = 0;
      unint64_t v20 = (2 * v18);
      int v21 = 120;
      unint64_t v22 = v115;
      do
      {
        int v23 = (((*((_DWORD *)&v131 + v19 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v19 + 1) & 7))) & 3);
        int v21 = ((v21 + v23 - 1) & -v23) + v23 * *((_DWORD *)&v131 + v19);
        v19 += 2;
      }
      while (v19 < v20);
      if (v115) {
        goto LABEL_58;
      }
LABEL_63:
      int v30 = 0;
      int v31 = 0;
      int v32 = 16;
      goto LABEL_80;
    }
  }
  int v21 = 120;
  unint64_t v22 = v115;
  if (!v115) {
    goto LABEL_63;
  }
LABEL_58:
  int v24 = sub_1002B3B2C(v22, &v131);
  if (v24 < 1)
  {
    int v26 = 0;
    int v28 = v115;
  }
  else
  {
    unint64_t v25 = 0;
    int v26 = 0;
    unint64_t v27 = (2 * v24);
    int v28 = v115;
    do
    {
      int v29 = (((*((_DWORD *)&v131 + v25 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v25 + 1) & 7))) & 3);
      int v26 = ((v26 + v29 - 1) & -v29) + v29 * *((_DWORD *)&v131 + v25);
      v25 += 2;
    }
    while (v25 < v27);
  }
  unsigned int v33 = HIDWORD(v131);
  int v34 = sub_1002B3B2C(v28, &v131);
  if (v34 < 1)
  {
    int v32 = 16;
  }
  else
  {
    unint64_t v35 = 0;
    int v32 = 16;
    do
    {
      int v36 = (((*((_DWORD *)&v131 + v35 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v35 + 1) & 7))) & 3);
      int v32 = ((v32 + v36 - 1) & -v36) + v36 * *((_DWORD *)&v131 + v35);
      v35 += 2;
    }
    while (v35 < (2 * v34));
  }
  int v37 = sub_1002B3B2C((const char *)v121, v128);
  int v38 = (((v33 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v33 & 7))) & 3);
  int v30 = (v26 + v38 - 1) & -v38;
  if (v37 < 1)
  {
    int v31 = 0;
  }
  else
  {
    unint64_t v39 = (2 * v37);
    if (v37 >= 9)
    {
      unint64_t v41 = ((v39 - 1) >> 1) + 1;
      uint64_t v42 = v41 & 7;
      if ((v41 & 7) == 0) {
        uint64_t v42 = 8;
      }
      unint64_t v43 = v41 - v42;
      unint64_t v40 = 2 * v43;
      uint64_t v44 = (const float *)v130;
      int32x4_t v45 = 0uLL;
      int32x4_t v46 = 0uLL;
      do
      {
        uint64_t v47 = v44 - 8;
        unsigned long long v48 = (unsigned __int128)vld2q_f32(v47);
        unsigned long long v49 = (unsigned __int128)vld2q_f32(v44);
        int32x4_t v45 = vaddq_s32((int32x4_t)v48, v45);
        int32x4_t v46 = vaddq_s32((int32x4_t)v49, v46);
        v44 += 16;
        v43 -= 8;
      }
      while (v43);
      int v31 = vaddvq_s32(vaddq_s32(v46, v45));
    }
    else
    {
      unint64_t v40 = 0;
      int v31 = 0;
    }
    do
    {
      v31 += v128[v40];
      v40 += 2;
    }
    while (v40 < v39);
  }
LABEL_80:
  int v50 = sub_1002B3B2C((const char *)v121, v128);
  if (v50 < 2
    || (v128[0] == 2 ? (BOOL v51 = v128[1] == 4) : (BOOL v51 = 0),
        v51 ? (BOOL v52 = v128[2] < 1) : (BOOL v52 = 1),
        !v52 ? (BOOL v53 = v128[3] == 5) : (BOOL v53 = 0),
        !v53))
  {
    uint64_t v132 = 0;
    uint64_t v131 = 0;
    qmemcpy((void *)sub_1002D19D8(&v131, 52), "Graph edges should start with 2 integers and a float", 52);
    sub_1002D2278(-5, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6378);
  }
  if (v50 < 3)
  {
    unsigned int v110 = 4;
  }
  else
  {
    if ((((v129 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v129 & 7))) & 3) >= 8) {
      int v54 = 8;
    }
    else {
      int v54 = 4;
    }
    unsigned int v110 = v54;
  }
  unint64_t v55 = (2 * v50);
  if (v50 >= 9)
  {
    unint64_t v58 = ((v55 - 1) >> 1) + 1;
    uint64_t v59 = v58 & 7;
    if ((v58 & 7) == 0) {
      uint64_t v59 = 8;
    }
    unint64_t v60 = v58 - v59;
    unint64_t v56 = 2 * v60;
    unsigned long long v61 = (const float *)v130;
    int32x4_t v62 = 0uLL;
    int32x4_t v63 = 0uLL;
    do
    {
      int v64 = v61 - 8;
      unsigned long long v65 = (unsigned __int128)vld2q_f32(v64);
      unsigned long long v66 = (unsigned __int128)vld2q_f32(v61);
      int32x4_t v62 = vaddq_s32((int32x4_t)v65, v62);
      int32x4_t v63 = vaddq_s32((int32x4_t)v66, v63);
      v61 += 16;
      v60 -= 8;
    }
    while (v60);
    int v57 = vaddvq_s32(vaddq_s32(v63, v62));
  }
  else
  {
    unint64_t v56 = 0;
    int v57 = 0;
  }
  do
  {
    v57 += v128[v56];
    v56 += 2;
  }
  while (v56 < v55);
  int v67 = *(unsigned __int8 *)(v121 + 2);
  if (v67 == 102 || v67 == 49 && *(unsigned char *)(v121 + 3) == 102)
  {
    BOOL v106 = (v67 - 48) >= 0xA;
    uint64_t v70 = v121;
    if (!v106) {
      uint64_t v70 = v121 + 1;
    }
    uint64_t v69 = (char *)(v70 + 3);
  }
  else
  {
    int v68 = strtol((const char *)(v121 + 2), &__endptr, 10);
    uint64_t v69 = v126;
    sprintf(v126, "%df%s", v68 - 1, __endptr);
  }
  int v71 = sub_1002B3B2C(v69, &v131);
  if (v71 < 1)
  {
    int v73 = 40;
  }
  else
  {
    unint64_t v72 = 0;
    int v73 = 40;
    do
    {
      int v74 = (((*((_DWORD *)&v131 + v72 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v72 + 1) & 7))) & 3);
      int v73 = ((v73 + v74 - 1) & -v74) + v74 * *((_DWORD *)&v131 + v72);
      v72 += 2;
    }
    while (v72 < (2 * v71));
  }
  int v75 = sub_1002B3B2C((const char *)v121, &v131);
  unsigned int v76 = v14;
  if (v75 < 1)
  {
    int v78 = 0;
  }
  else
  {
    unint64_t v77 = 0;
    int v78 = 0;
    do
    {
      int v79 = (((*((_DWORD *)&v131 + v77 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v131 + v77 + 1) & 7))) & 3);
      int v78 = ((v78 + v79 - 1) & -v79) + v79 * *((_DWORD *)&v131 + v77);
      v77 += 2;
    }
    while (v77 < (2 * v75));
  }
  unsigned int v80 = HIDWORD(v131);
  double v122 = sub_10025ED94(v76, v21, v32, v73, *(void *)(a1 + 24));
  if (v119)
  {
    if (!v17)
    {
      uint64_t v132 = 0;
      uint64_t v131 = 0;
      uint64_t v82 = sub_1002D19D8(&v131, 9);
      *(unsigned char *)(v82 + 8) = 116;
      *(void *)uint64_t v82 = *(void *)"header_dt";
      sub_1002D2278(-215, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6405);
    }
    sub_1002B4F10((_DWORD *)a1, (uint64_t)v119, (uint64_t)&v131);
    if ((*(_DWORD *)v119 & 7) == 5) {
      int v81 = *(_DWORD *)(v119[2] + 40);
    }
    else {
      int v81 = 1;
    }
    sub_1002B512C((_DWORD *)a1, &v131, v81, (uint64_t)(v122 + 30), v17);
  }
  int v83 = (((v80 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v80 & 7))) & 3);
  int v84 = (v78 + v83 - 1) & -v83;
  int v85 = 3 * v30;
  int v112 = v84;
  int v86 = 3 * v84;
  if (3 * v30 <= v86) {
    int v85 = v86;
  }
  if (v85 <= 0x10000) {
    size_t v87 = 0x10000;
  }
  else {
    size_t v87 = v85;
  }
  unsigned int v111 = v87;
  int v120 = (char *)sub_10020FEBC(v87);
  int v116 = (void *)sub_10020FEBC(8 * v117);
  uint64_t v88 = sub_1002ACF04(a1, v113, "vertices");
  uint64_t v114 = sub_1002ACF04(a1, v113, "edges");
  if (!v114)
  {
    uint64_t v132 = 0;
    uint64_t v131 = 0;
    qmemcpy((void *)sub_1002D19D8(&v131, 13), "No edges data", 13);
    sub_1002D2278(-5, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6417);
  }
  if (v115 && !v88)
  {
    uint64_t v132 = 0;
    uint64_t v131 = 0;
    *(_OWORD *)sub_1002D19D8(&v131, 16) = *(_OWORD *)"No vertices data";
    sub_1002D2278(-5, &v131, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6419);
  }
  if (v30 <= 1) {
    unsigned int v89 = 1;
  }
  else {
    unsigned int v89 = v30;
  }
  if (v115) {
    sub_1002B4F10((_DWORD *)a1, v88, (uint64_t)&v131);
  }
  if (v117 >= 1)
  {
    uint64_t v90 = v117;
    if (v115)
    {
      int v91 = 0;
      size_t v92 = v30;
      uint64_t v93 = v30;
      uint64_t v94 = v116;
      uint64_t v95 = v120;
      int v96 = v111 / v89;
      do
      {
        if (!v91)
        {
          if ((int)v90 >= v96) {
            int v97 = v96;
          }
          else {
            int v97 = v90;
          }
          int v91 = v97 * v31;
          sub_1002B512C((_DWORD *)a1, &v131, v97 * v31, (uint64_t)v120, v115);
          uint64_t v95 = v120;
        }
        *(void *)uint64_t v126 = 0;
        sub_10025EE70((uint64_t)v122, 0, v126);
        *v94++ = *(void *)v126;
        memcpy((void *)(*(void *)v126 + 16), v95, v92);
        v95 += v93;
        --v91;
        --v90;
      }
      while (v90);
    }
    else
    {
      std::string::size_type v98 = v116;
      do
      {
        *(void *)uint64_t v126 = 0;
        sub_10025EE70((uint64_t)v122, 0, v126);
        *v98++ = *(void *)v126;
        --v90;
      }
      while (v90);
    }
  }
  if (v112 <= 1) {
    unsigned int v99 = 1;
  }
  else {
    unsigned int v99 = v112;
  }
  sub_1002B4F10((_DWORD *)a1, v114, (uint64_t)&v131);
  if ((int)v123 >= 1)
  {
    int v100 = 0;
    uint64_t v101 = (int *)v120;
    int v102 = v111 / v99;
    do
    {
      if (!v100)
      {
        if ((int)v123 >= v102) {
          int v103 = v102;
        }
        else {
          int v103 = v123;
        }
        int v100 = v103 * v57;
        sub_1002B512C((_DWORD *)a1, &v131, v103 * v57, (uint64_t)v120, (const char *)v121);
        uint64_t v101 = (int *)v120;
      }
      uint64_t v124 = 0;
      unsigned int v104 = v101[1];
      uint64_t v105 = *v101;
      BOOL v106 = v105 >= v117 || v104 >= v117;
      if (v106)
      {
        *(void *)uint64_t v126 = 0;
        uint64_t v127 = 0;
        qmemcpy((void *)sub_1002D19D8(v126, 46), "Some of stored vertex indices are out of range", 46);
        sub_1002D2278(-211, (uint64_t *)v126, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6464);
      }
      if (!sub_10025F128((uint64_t)v122, (_DWORD *)v116[v105], (_DWORD *)v116[v104], 0, &v124))
      {
        *(void *)uint64_t v126 = 0;
        uint64_t v127 = 0;
        qmemcpy((void *)sub_1002D19D8(v126, 27), "Duplicated edge has occured", 27);
        sub_1002D2278(-5, (uint64_t *)v126, "icvReadGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6470);
      }
      uint64_t v108 = v124;
      *(_DWORD *)(v124 + 4) = v101[2];
      if (v73 >= 41) {
        memcpy((void *)(v108 + 40), (const void *)(((unint64_t)v101 + v110 + 11) & ~(unint64_t)(v110 - 1)), v73 - 40);
      }
      uint64_t v101 = (int *)((char *)v101 + v112);
      --v100;
      LODWORD(v123) = v123 - 1;
    }
    while (v123);
  }
  j__free(v120);
  j__free(v116);
  return v122;
}

void sub_1002B80E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000B6A8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002B81D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3;
  v62[0] = a4;
  v62[1] = a5;
  uint64_t v8 = *(int *)(a3 + 104);
  uint64_t v9 = *(unsigned int *)(*(void *)(a3 + 112) + 104);
  uint64_t v10 = sub_10020FEBC(4 * v8);
  sub_10025AD4C(v5, (uint64_t)v59, 0);
  if (*(int *)(v5 + 40) >= 1)
  {
    int v11 = 0;
    int v12 = 0;
    do
    {
      uint64_t v13 = v60;
      if ((*(_DWORD *)v60 & 0x80000000) == 0)
      {
        *(_DWORD *)(v10 + 4 * v12) = *(_DWORD *)v60;
        _DWORD *v13 = v12++;
      }
      unint64_t v60 = (char *)v13 + *(int *)(v5 + 44);
      if ((unint64_t)v60 >= v61) {
        sub_10025BA48(v59, 1);
      }
      ++v11;
    }
    while (v11 < *(_DWORD *)(v5 + 40));
  }
  BOOL v52 = (_DWORD *)v10;
  sub_1002B2180(a1, a2, 6, (uint64_t)"opencv-graph");
  if ((*(_DWORD *)v5 & 0x4000) != 0) {
    int v14 = "oriented";
  }
  else {
    int v14 = "";
  }
  sub_1002B2E28(a1, (uint64_t)"flags", (uint64_t)v14, 1);
  sub_1002B2CDC(a1, (uint64_t)"vertex_count", v8);
  uint64_t v15 = sub_1002C4628((unsigned int *)v5, "vertex_dt", (uint64_t)v62, 16, v64);
  if (v15) {
    sub_1002B2E28(a1, (uint64_t)"vertex_dt", (uint64_t)v15, 0);
  }
  sub_1002B2CDC(a1, (uint64_t)"edge_count", v9);
  uint64_t v16 = sub_1002C4628(*(unsigned int **)(v5 + 112), "edge_dt", (uint64_t)v62, 40, v65);
  if (v16) {
    BOOL v17 = v16;
  }
  else {
    BOOL v17 = "";
  }
  sprintf(v63, "2if%s", v17);
  sub_1002B2E28(a1, (uint64_t)"edge_dt", (uint64_t)v63, 0);
  sub_1002C4990(a1, (int *)v5, (uint64_t)v62, 120);
  int v18 = *(_DWORD *)(v5 + 44);
  if (v18 >= 21846) {
    int v19 = 3 * v18;
  }
  else {
    int v19 = 0x10000;
  }
  int v20 = 3 * *(_DWORD *)(*(void *)(v5 + 112) + 44);
  if (v20 <= v19) {
    size_t v21 = v19;
  }
  else {
    size_t v21 = v20;
  }
  int v53 = v21;
  unint64_t v22 = (_DWORD *)sub_10020FEBC(v21);
  char v23 = 0;
  char v24 = 1;
  uint64_t v54 = v5;
  unint64_t v55 = v15;
  while (2)
  {
    char v25 = v24;
    if (v24) {
      int v26 = v15;
    }
    else {
      int v26 = v63;
    }
    if (!v26) {
      goto LABEL_24;
    }
    uint64_t v27 = v5;
    if ((v24 & 1) == 0) {
      uint64_t v27 = *(void *)(v5 + 112);
    }
    uint64_t v58 = *(unsigned int *)(v27 + 44);
    int v28 = sub_1002B3B2C(v26, &v66);
    if (v28 < 1)
    {
      int v30 = 0;
      unsigned int v32 = v67;
      if ((v23 & 1) == 0)
      {
LABEL_41:
        unsigned int v33 = 4;
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v29 = 0;
      int v30 = 0;
      do
      {
        int v31 = (((*(&v66 + v29 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(&v66 + v29 + 1) & 7))) & 3);
        int v30 = ((v30 + v31 - 1) & -v31) + v31 * *(&v66 + v29);
        v29 += 2;
      }
      while (v29 < (2 * v28));
      unsigned int v32 = v67;
      if ((v23 & 1) == 0) {
        goto LABEL_41;
      }
    }
    if ((int)sub_1002B3B2C(v26, &v66) < 3) {
      goto LABEL_41;
    }
    if ((((v68 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v68 & 7))) & 3) >= 8) {
      unsigned int v33 = 8;
    }
    else {
      unsigned int v33 = 4;
    }
LABEL_42:
    if (v25) {
      int v34 = "vertices";
    }
    else {
      int v34 = "edges";
    }
    sub_1002B2180(a1, v34, 13, 0);
    sub_10025AD4C(v27, (uint64_t)v59, 0);
    uint64_t v35 = a1;
    if (*(int *)(v27 + 40) < 1) {
      goto LABEL_23;
    }
    int v36 = 0;
    int v37 = 0;
    int v38 = (((v32 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v32 & 7))) & 3);
    int v39 = (v30 + v38 - 1) & -v38;
    unint64_t v56 = ~(unint64_t)(v33 - 1);
    uint64_t v57 = v33 - 1;
    size_t v40 = v39;
    unint64_t v41 = v22;
    int v42 = v53 / v39;
    do
    {
      unint64_t v43 = v60;
      if ((*(_DWORD *)v60 & 0x80000000) != 0) {
        goto LABEL_57;
      }
      if (v25)
      {
        uint64_t v44 = v60 + 16;
        int32x4_t v45 = v41;
        size_t v46 = v40;
      }
      else
      {
        unint64_t v41 = (_DWORD *)(((unint64_t)v41 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        *unint64_t v41 = **((_DWORD **)v60 + 3);
        v41[1] = **((_DWORD **)v43 + 4);
        void v41[2] = *((_DWORD *)v43 + 1);
        if ((int)v58 < 41) {
          goto LABEL_54;
        }
        int32x4_t v45 = (void *)(((unint64_t)v41 + v57 + 12) & v56);
        uint64_t v44 = v43 + 40;
        size_t v46 = v58 - 40;
      }
      memcpy(v45, v44, v46);
LABEL_54:
      if (++v37 >= v42)
      {
        sub_1002B2F84(v35, (uint64_t)v22, v37, v26);
        int v37 = 0;
        unint64_t v41 = v22;
      }
      else
      {
        unint64_t v41 = (_DWORD *)((char *)v41 + v40);
      }
LABEL_57:
      v60 += *(int *)(v27 + 44);
      if ((unint64_t)v60 >= v61) {
        sub_10025BA48(v59, 1);
      }
      ++v36;
    }
    while (v36 < *(_DWORD *)(v27 + 40));
    uint64_t v5 = v54;
    if (v37 >= 1) {
      sub_1002B2F84(v35, (uint64_t)v22, v37, v26);
    }
LABEL_23:
    sub_1002B2B88(v35);
    a1 = v35;
    uint64_t v15 = v55;
LABEL_24:
    char v24 = 0;
    char v23 = 1;
    if (v25) {
      continue;
    }
    break;
  }
  sub_1002B2B88(a1);
  sub_10025AD4C(v5, (uint64_t)v59, 0);
  int v47 = *(_DWORD *)(v5 + 40);
  if (v47 >= 1)
  {
    int v48 = 0;
    int v49 = 0;
    do
    {
      int v50 = v60;
      if ((*(_DWORD *)v60 & 0x80000000) == 0)
      {
        int v51 = v52[v49++];
        *(_DWORD *)unint64_t v60 = v51;
      }
      unint64_t v60 = &v50[*(int *)(v5 + 44)];
      if ((unint64_t)v60 >= v61)
      {
        sub_10025BA48(v59, 1);
        int v47 = *(_DWORD *)(v5 + 40);
      }
      ++v48;
    }
    while (v48 < v47);
  }
  j__free(v22);
  j__free(v52);
}

_DWORD *sub_1002B87A0(uint64_t a1)
{
  return sub_10025F3E4(a1, 0);
}

BOOL sub_1002B87A8(BOOL result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 2) == 16964;
  }
  return result;
}

uint64_t sub_1002B87C0(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v4 = (_DWORD *)v1;
  uint64_t v5 = sub_1002ACF04(v1, v2, "sizes");
  int v30 = v4;
  uint64_t v6 = sub_1002ACF04((uint64_t)v4, v3, "dt");
  if (!v6 || (*(_DWORD *)v6 & 7) != 3 || !v5 || !*(void *)(v6 + 24))
  {
    uint64_t __src = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&__src, 46), "Some of essential matrix attributes are absent", 46);
    sub_1002D2278(-2, &__src, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5525);
  }
  if ((*(_DWORD *)v5 & 7) == 5)
  {
    unint64_t v29 = *(const char **)(v6 + 24);
    int v26 = *(_DWORD *)(*(void *)(v5 + 16) + 40);
    if ((v26 - 33) > 0xFFFFFFDF) {
      goto LABEL_14;
    }
LABEL_13:
    uint64_t __src = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&__src, 48), "Could not determine sparse matrix dimensionality", 48);
    sub_1002D2278(-212, &__src, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5531);
  }
  if ((*(_DWORD *)v5 & 7) == 1) {
    int v7 = 1;
  }
  else {
    int v7 = -1;
  }
  unint64_t v29 = *(const char **)(v6 + 24);
  int v26 = v7;
  if ((v7 - 33) <= 0xFFFFFFDF) {
    goto LABEL_13;
  }
LABEL_14:
  sub_1002B4F10(v4, v5, (uint64_t)&__src);
  if ((*(_DWORD *)v5 & 7) == 5) {
    int v8 = *(_DWORD *)(*(void *)(v5 + 16) + 40);
  }
  else {
    int v8 = 1;
  }
  sub_1002B512C(v4, &__src, v8, (uint64_t)v38, "i");
  unsigned int v9 = sub_1002C42E0(v29);
  uint64_t v10 = (_DWORD *)sub_1002ACF04((uint64_t)v4, v3, "data");
  uint64_t v11 = (uint64_t)v10;
  if (!v10 || (*v10 & 7) != 5)
  {
    uint64_t __src = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&__src, 44), "The matrix data is not found in file storage", 44);
    sub_1002D2278(-2, &__src, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5538);
  }
  uint64_t v28 = sub_100231354(v26, v38, v9);
  uint64_t v12 = *(void *)(v11 + 16);
  sub_1002B4F10(v4, v11, (uint64_t)v33);
  if (*(int *)(v12 + 40) >= 1)
  {
    int v13 = 0;
    int v14 = (v9 >> 3) & 0x1FF;
    int v15 = v14 + 1;
    uint64_t v27 = v26 - 1;
    int v16 = v14 + 2;
    do
    {
      if ((*v34 & 7) != 1)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        qmemcpy((void *)sub_1002D19D8(&v31, 31), "Sparse matrix data is corrupted", 31);
        sub_1002D2278(-212, &v31, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5553);
      }
      int v17 = v34[4];
      if (v13 < 1 || v17 < 0)
      {
        if (v13 < 1)
        {
          LODWORD(__src) = v34[4];
          int v18 = 1;
          int v19 = v26;
          int v20 = v26 - 1;
          if (v26 > 1)
          {
LABEL_31:
            int v13 = v19 + v13 - v18;
            size_t v21 = (_DWORD *)&__src + v18;
            do
            {
              char v23 = (_DWORD *)((char *)v34 + *(int *)(v12 + 44));
              int v34 = v23;
              if ((unint64_t)v23 >= v35)
              {
                sub_10025BA48(v33, 1);
                char v23 = v34;
              }
              if ((*v23 & 7) != 1 || (int v22 = v23[4], v22 < 0))
              {
                uint64_t v31 = 0;
                uint64_t v32 = 0;
                qmemcpy((void *)sub_1002D19D8(&v31, 31), "Sparse matrix data is corrupted", 31);
                sub_1002D2278(-212, &v31, "icvReadSparseMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5569);
              }
              *v21++ = v22;
              --v20;
            }
            while (v20);
          }
        }
        else
        {
          int v18 = v27 + v17;
          int v19 = v26;
          int v20 = v26 - v18;
          if (v26 > v18) {
            goto LABEL_31;
          }
        }
      }
      else
      {
        *((_DWORD *)&__src + v27) = v17;
      }
      int v34 = (_DWORD *)((char *)v34 + *(int *)(v12 + 44));
      if ((unint64_t)v34 >= v35) {
        sub_10025BA48(v33, 1);
      }
      uint64_t v24 = sub_100232F4C(v28, (unsigned int *)&__src, 0, 1, 0);
      sub_1002B512C(v30, v33, v15, v24, v29);
      v13 += v16;
    }
    while (v13 < *(_DWORD *)(v12 + 40));
  }
  return v28;
}

void sub_1002B8C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B8D28(uint64_t a1, const char *a2, _DWORD *a3)
{
  sub_100259F30(0);
  uint64_t v7 = (uint64_t)v6;
  int v34 = v6;
  sub_1002B2180(a1, a2, 6, (uint64_t)"opencv-sparse-matrix");
  int v27 = sub_10023218C((uint64_t)a3, 0);
  sub_1002B2180(a1, "sizes", 13, 0);
  sub_1002B2F84(a1, (uint64_t)(a3 + 13), v27, "i");
  sub_1002B2B88(a1);
  sprintf(&v35, "%d%c", ((*a3 >> 3) & 0x1FF) + 1, aUcwsifdr[*a3 & 7]);
  if (v36[1]) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v35 == 49;
  }
  if (v8) {
    unsigned int v9 = v36;
  }
  else {
    unsigned int v9 = &v35;
  }
  sub_1002B2E28(a1, (uint64_t)"dt", (uint64_t)v9, 0);
  sub_1002B2180(a1, "data", 13, 0);
  uint64_t v10 = sub_10025A7E4(7u, 0x60uLL, 8uLL, v7);
  uint64_t v11 = sub_100231830((uint64_t)a3, (uint64_t)&v31);
  if (v11)
  {
    while (1)
    {
      __src[0] = v11 + (int)a3[12];
      sub_10025BB1C((uint64_t)v10, __src);
      uint64_t v11 = *(void *)(v32 + 8);
      if (!v11)
      {
        uint64_t v12 = v33;
        int v13 = v33 + 1;
        int v33 = v13;
        int v14 = *(_DWORD *)(v31 + 40);
        if (v13 >= v14) {
          break;
        }
        int v15 = (uint64_t *)(*(void *)(v31 + 32) + 8 * v12 + 8);
        while (1)
        {
          uint64_t v11 = *v15;
          if (*v15) {
            break;
          }
          ++v13;
          ++v15;
          if (v14 == v13) {
            goto LABEL_16;
          }
        }
        int v33 = v13;
      }
      uint64_t v32 = v11;
    }
  }
LABEL_16:
  sub_10025C7E4((uint64_t)v10, (uint64_t (*)(void))sub_1002C4DF4, (uint64_t)&v27);
  sub_10025AD4C((uint64_t)v10, (uint64_t)__src, 0);
  if ((int)v10[10] >= 1)
  {
    int v16 = 0;
    int v17 = 0;
    while (1)
    {
      int v18 = *v29++;
      if ((unint64_t)v29 >= v30) {
        sub_10025BA48(__src, 1);
      }
      if (v16) {
        break;
      }
      int v24 = 0;
      if (v27 > 0) {
        goto LABEL_29;
      }
LABEL_18:
      sub_1002B2F84(a1, (uint64_t)v18 + a3[11] - a3[12], 1, &v35);
      ++v16;
      int v17 = v18;
      if (v16 >= v10[10]) {
        goto LABEL_32;
      }
    }
    int v19 = 0;
    int v20 = v18;
    do
    {
      int v22 = *v20++;
      int v21 = v22;
      int v23 = *v17++;
      ++v19;
    }
    while (v21 == v23);
    int v24 = v19 - 1;
    if (v27 - 1 > v19 - 1) {
      (*(void (**)(uint64_t, void, void))(a1 + 312))(a1, 0, (v19 - v27));
    }
    if (v24 >= v27) {
      goto LABEL_18;
    }
LABEL_29:
    char v25 = (unsigned int *)&v18[v24];
    do
    {
      unsigned int v26 = *v25++;
      (*(void (**)(uint64_t, void, void))(a1 + 312))(a1, 0, v26);
      ++v24;
    }
    while (v27 > v24);
    goto LABEL_18;
  }
LABEL_32:
  sub_1002B2B88(a1);
  sub_1002B2B88(a1);
  sub_10025A060(&v34);
}

_DWORD *sub_1002B9064(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result == 144);
  }
  return result;
}

uint64_t sub_1002B9078(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1002ACF04((uint64_t)a1, a2, "width");
  if (v4)
  {
    if ((*(_DWORD *)v4 & 7) == 2)
    {
      uint64_t v5 = (uint64_t)rint(*(double *)(v4 + 16));
      uint64_t v6 = sub_1002ACF04((uint64_t)a1, a2, "height");
      if (v6) {
        goto LABEL_8;
      }
    }
    else
    {
      if ((*(_DWORD *)v4 & 7) == 1)
      {
        LODWORD(v5) = *(_DWORD *)(v4 + 16);
        uint64_t v6 = sub_1002ACF04((uint64_t)a1, a2, "height");
        if (!v6) {
          goto LABEL_5;
        }
LABEL_8:
        if ((*(_DWORD *)v6 & 7) == 2)
        {
          uint64_t v7 = (uint64_t)rint(*(double *)(v6 + 16));
          uint64_t v8 = sub_1002ACF04((uint64_t)a1, a2, "dt");
          if (v8) {
            goto LABEL_19;
          }
        }
        else
        {
          if ((*(_DWORD *)v6 & 7) != 1)
          {
            uint64_t v7 = 0x7FFFFFFFLL;
            uint64_t v8 = sub_1002ACF04((uint64_t)a1, a2, "dt");
            if (!v8) {
              goto LABEL_22;
            }
            goto LABEL_19;
          }
          uint64_t v7 = *(unsigned int *)(v6 + 16);
          uint64_t v8 = sub_1002ACF04((uint64_t)a1, a2, "dt");
          if (v8) {
            goto LABEL_19;
          }
        }
LABEL_22:
        unsigned int v9 = 0;
        uint64_t v10 = sub_1002ACF04((uint64_t)a1, a2, "origin");
        if (!v10) {
          goto LABEL_26;
        }
        goto LABEL_23;
      }
      LODWORD(v5) = 0x7FFFFFFF;
      uint64_t v6 = sub_1002ACF04((uint64_t)a1, a2, "height");
      if (v6) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
    uint64_t v6 = sub_1002ACF04((uint64_t)a1, a2, "height");
    if (v6) {
      goto LABEL_8;
    }
  }
LABEL_5:
  uint64_t v7 = 0;
  uint64_t v8 = sub_1002ACF04((uint64_t)a1, a2, "dt");
  if (!v8) {
    goto LABEL_22;
  }
LABEL_19:
  if ((*(_DWORD *)v8 & 7) != 3) {
    goto LABEL_22;
  }
  unsigned int v9 = *(const char **)(v8 + 24);
  uint64_t v10 = sub_1002ACF04((uint64_t)a1, a2, "origin");
  if (!v10)
  {
LABEL_26:
    uint64_t v11 = 0;
    if (!v5) {
      goto LABEL_30;
    }
    goto LABEL_27;
  }
LABEL_23:
  if ((*(_DWORD *)v10 & 7) != 3) {
    goto LABEL_26;
  }
  uint64_t v11 = *(void *)(v10 + 24);
  if (!v5) {
    goto LABEL_30;
  }
LABEL_27:
  if (!v7 || !v9 || !v11)
  {
LABEL_30:
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    qmemcpy((void *)sub_1002D19D8(&v46, 45), "Some of essential image attributes are absent", 45);
    sub_1002D2278(-2, &v46, "icvReadImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5666);
  }
  unsigned int v12 = sub_1002C42E0(v9);
  uint64_t v13 = sub_1002ACF04((uint64_t)a1, a2, "layout");
  if (!v13)
  {
    if (!strcmp("interleaved", "interleaved")) {
      goto LABEL_38;
    }
LABEL_37:
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    qmemcpy((void *)sub_1002D19D8(&v46, 35), "Only interleaved images can be read", 35);
    sub_1002D2278(-2, &v46, "icvReadImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5671);
  }
  if ((*(_DWORD *)v13 & 7) != 3) {
    goto LABEL_37;
  }
  int v14 = *(const char **)(v13 + 24);
  if (!v14 || strcmp(v14, "interleaved")) {
    goto LABEL_37;
  }
LABEL_38:
  uint64_t v15 = sub_1002ACF04((uint64_t)a1, a2, "data");
  if (!v15)
  {
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    qmemcpy((void *)sub_1002D19D8(&v46, 43), "The image data is not found in file storage", 43);
    sub_1002D2278(-2, &v46, "icvReadImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5675);
  }
  uint64_t v16 = v15;
  if ((*(_DWORD *)v15 & 7u) < 5)
  {
    int v17 = v7 * v5;
    uint64_t v18 = ((v12 >> 3) & 0x1FF) + 1;
    if (((*(_DWORD *)v15 & 7) != 0) == v18 * v7 * v5) {
      goto LABEL_44;
    }
LABEL_43:
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    qmemcpy((void *)sub_1002D19D8(&v46, 63), "The matrix size does not match to the number of stored elements", 63);
    sub_1002D2278(-209, &v46, "icvReadImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5679);
  }
  int v17 = v7 * v5;
  uint64_t v18 = ((v12 >> 3) & 0x1FF) + 1;
  if (*(_DWORD *)(*(void *)(v15 + 16) + 40) != v18 * v7 * v5) {
    goto LABEL_43;
  }
LABEL_44:
  if ((v12 & 7) == 4 || (v12 & 5) == 1) {
    unsigned int v20 = 0x80000000;
  }
  else {
    unsigned int v20 = 0;
  }
  uint64_t v21 = sub_100233A44(v5 | (unint64_t)(v7 << 32), (0x442211088uLL >> (4 * (v12 & 7))) & 0x78 | v20, v18);
  uint64_t v22 = sub_1002ACF04((uint64_t)a1, a2, "roi");
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = sub_1002ACF04((uint64_t)a1, v22, "x");
    int v45 = v7;
    if (v24)
    {
      if ((*(_DWORD *)v24 & 7) == 2)
      {
        uint64_t v25 = (uint64_t)rint(*(double *)(v24 + 16));
      }
      else if ((*(_DWORD *)v24 & 7) == 1)
      {
        LODWORD(v25) = *(_DWORD *)(v24 + 16);
      }
      else
      {
        LODWORD(v25) = 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v25) = 0;
    }
    uint64_t v26 = v25;
    uint64_t v27 = sub_1002ACF04((uint64_t)a1, v23, "y");
    int v44 = v17;
    if (v27)
    {
      if ((*(_DWORD *)v27 & 7) == 2)
      {
        uint64_t v28 = (uint64_t)rint(*(double *)(v27 + 16));
        uint64_t v29 = sub_1002ACF04((uint64_t)a1, v23, "width");
        if (!v29) {
          goto LABEL_62;
        }
      }
      else if ((*(_DWORD *)v27 & 7) == 1)
      {
        uint64_t v28 = *(unsigned int *)(v27 + 16);
        uint64_t v29 = sub_1002ACF04((uint64_t)a1, v23, "width");
        if (!v29)
        {
LABEL_62:
          LODWORD(v30) = 0;
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v28 = 0x7FFFFFFFLL;
        uint64_t v29 = sub_1002ACF04((uint64_t)a1, v23, "width");
        if (!v29) {
          goto LABEL_62;
        }
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = sub_1002ACF04((uint64_t)a1, v23, "width");
      if (!v29) {
        goto LABEL_62;
      }
    }
    if ((*(_DWORD *)v29 & 7) == 2)
    {
      uint64_t v30 = (uint64_t)rint(*(double *)(v29 + 16));
    }
    else if ((*(_DWORD *)v29 & 7) == 1)
    {
      LODWORD(v30) = *(_DWORD *)(v29 + 16);
    }
    else
    {
      LODWORD(v30) = 0x7FFFFFFF;
    }
LABEL_73:
    uint64_t v7 = v26 | (v28 << 32);
    uint64_t v31 = v30;
    uint64_t v32 = sub_1002ACF04((uint64_t)a1, v23, "height");
    if (v32)
    {
      if ((*(_DWORD *)v32 & 7) == 2)
      {
        uint64_t v33 = (uint64_t)rint(*(double *)(v32 + 16));
      }
      else if ((*(_DWORD *)v32 & 7) == 1)
      {
        uint64_t v33 = *(unsigned int *)(v32 + 16);
      }
      else
      {
        uint64_t v33 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    uint64_t v34 = v31 | (v33 << 32);
    uint64_t v35 = sub_1002ACF04((uint64_t)a1, v23, "coi");
    if (v35)
    {
      if ((*(_DWORD *)v35 & 7) == 2)
      {
        uint64_t v36 = (uint64_t)rint(*(double *)(v35 + 16));
      }
      else if ((*(_DWORD *)v35 & 7) == 1)
      {
        uint64_t v36 = *(unsigned int *)(v35 + 16);
      }
      else
      {
        uint64_t v36 = 0x7FFFFFFFLL;
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    sub_100233BE0(v21, v7, v34);
    sub_100233DE0(v21, v36);
    LODWORD(v7) = v45;
    int v17 = v44;
  }
  int v37 = (v18 << ((0xFA50u >> (2 * (v12 & 7))) & 3)) * v5;
  int v38 = *(_DWORD *)(v21 + 96);
  if (v37 == v38) {
    int v39 = v17;
  }
  else {
    int v39 = v5;
  }
  if (v37 == v38) {
    int v40 = 1;
  }
  else {
    int v40 = v7;
  }
  sub_1002B4F10(a1, v16, (uint64_t)v48);
  if (v40 >= 1)
  {
    int v41 = 0;
    int v42 = v39 * v18;
    do
      sub_1002B512C(a1, v48, v42, *(void *)(v21 + 88) + *(int *)(v21 + 96) * (uint64_t)v41++, v9);
    while (v40 != v41);
  }
  return v21;
}

void sub_1002B97A8(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D1A1C((uint64_t *)va);
  __break(1u);
}

void sub_1002B97B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B9818(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 28) == 1)
  {
    v18[0] = 0;
    v18[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v18, 48), "Images with planar data layout are not supported", 48);
    sub_1002D2278(-210, v18, "icvWriteImage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5606);
  }
  sub_1002B2180(a1, a2, 6, (uint64_t)"opencv-image");
  sub_1002B2CDC(a1, (uint64_t)"width", *(unsigned int *)(a3 + 40));
  sub_1002B2CDC(a1, (uint64_t)"height", *(unsigned int *)(a3 + 44));
  if (*(_DWORD *)(a3 + 32)) {
    uint64_t v5 = "bottom-left";
  }
  else {
    uint64_t v5 = "top-left";
  }
  sub_1002B2E28(a1, (uint64_t)"origin", (uint64_t)v5, 0);
  if (*(_DWORD *)(a3 + 28) == 1) {
    uint64_t v6 = "planar";
  }
  else {
    uint64_t v6 = "interleaved";
  }
  sub_1002B2E28(a1, (uint64_t)"layout", (uint64_t)v6, 0);
  if (*(void *)(a3 + 48))
  {
    sub_1002B2180(a1, "roi", 14, 0);
    sub_1002B2CDC(a1, (uint64_t)"x", *(unsigned int *)(*(void *)(a3 + 48) + 4));
    sub_1002B2CDC(a1, (uint64_t)"y", *(unsigned int *)(*(void *)(a3 + 48) + 8));
    sub_1002B2CDC(a1, (uint64_t)"width", *(unsigned int *)(*(void *)(a3 + 48) + 12));
    sub_1002B2CDC(a1, (uint64_t)"height", *(unsigned int *)(*(void *)(a3 + 48) + 16));
    sub_1002B2CDC(a1, (uint64_t)"coi", **(unsigned int **)(a3 + 48));
    sub_1002B2B88(a1);
  }
  uint64_t v7 = (0x43160520u >> (((*(_DWORD *)(a3 + 16) >> 2) & 0x3C) + ((*(int *)(a3 + 16) >> 31) & 0x14))) & 7;
  uint64_t v8 = &v19;
  sprintf(&v19, "%d%c", *(_DWORD *)(a3 + 8), aUcwsifdr[v7]);
  if (v20[1]) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v19 == 49;
  }
  if (v9) {
    uint64_t v8 = v20;
  }
  sub_1002B2E28(a1, (uint64_t)"dt", (uint64_t)v8, 0);
  int v10 = *(_DWORD *)(a3 + 40);
  int v11 = (*(_DWORD *)(a3 + 8) * v10) << ((0xFA50u >> (2 * v7)) & 3);
  int v12 = *(_DWORD *)(a3 + 96);
  if (v11 == v12) {
    int v13 = 1;
  }
  else {
    int v13 = *(_DWORD *)(a3 + 44);
  }
  if (v11 == v12) {
    int v14 = *(_DWORD *)(a3 + 44);
  }
  else {
    int v14 = 1;
  }
  sub_1002B2180(a1, "data", 13, 0);
  if (v13 >= 1)
  {
    int v15 = 0;
    int v16 = v14 * v10;
    do
      sub_1002B2F84(a1, *(void *)(a3 + 88) + *(int *)(a3 + 96) * (uint64_t)v15++, v16, v8);
    while (v13 != v15);
  }
  sub_1002B2B88(a1);
  return sub_1002B2B88(a1);
}

void sub_1002B9B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002B9B70(BOOL result)
{
  if (result) {
    return *(_WORD *)(result + 2) == 16962
  }
        && (*(_DWORD *)(result + 36) & 0x80000000) == 0
        && *(_DWORD *)(result + 32) >= 0;
  return result;
}

uint64_t sub_1002B9BA4(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1002ACF04((uint64_t)a1, a2, "rows");
  if (!v4)
  {
    LODWORD(v5) = -1;
    uint64_t v6 = sub_1002ACF04((uint64_t)a1, a2, "cols");
    if (v6) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  if ((*(_DWORD *)v4 & 7) == 2)
  {
    uint64_t v5 = (uint64_t)rint(*(double *)(v4 + 16));
    uint64_t v6 = sub_1002ACF04((uint64_t)a1, a2, "cols");
    if (v6) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  if ((*(_DWORD *)v4 & 7) != 1)
  {
    LODWORD(v5) = 0x7FFFFFFF;
    uint64_t v6 = sub_1002ACF04((uint64_t)a1, a2, "cols");
    if (v6) {
      goto LABEL_8;
    }
LABEL_5:
    LODWORD(v7) = -1;
    uint64_t v8 = sub_1002ACF04((uint64_t)a1, a2, "dt");
    if (!v8) {
      goto LABEL_23;
    }
    goto LABEL_19;
  }
  LODWORD(v5) = *(_DWORD *)(v4 + 16);
  uint64_t v6 = sub_1002ACF04((uint64_t)a1, a2, "cols");
  if (!v6) {
    goto LABEL_5;
  }
LABEL_8:
  if ((*(_DWORD *)v6 & 7) == 2)
  {
    uint64_t v7 = (uint64_t)rint(*(double *)(v6 + 16));
    uint64_t v8 = sub_1002ACF04((uint64_t)a1, a2, "dt");
    if (!v8) {
      goto LABEL_23;
    }
  }
  else if ((*(_DWORD *)v6 & 7) == 1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 + 16);
    uint64_t v8 = sub_1002ACF04((uint64_t)a1, a2, "dt");
    if (!v8) {
      goto LABEL_23;
    }
  }
  else
  {
    LODWORD(v7) = 0x7FFFFFFF;
    uint64_t v8 = sub_1002ACF04((uint64_t)a1, a2, "dt");
    if (!v8) {
      goto LABEL_23;
    }
  }
LABEL_19:
  if ((*(_DWORD *)v8 & 7) != 3
    || (BOOL v9 = *(const char **)(v8 + 24), (v5 & 0x80000000) != 0)
    || (v7 & 0x80000000) != 0
    || !v9)
  {
LABEL_23:
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    qmemcpy((void *)sub_1002D19D8(&v16, 46), "Some of essential matrix attributes are absent", 46);
    sub_1002D2278(-2, &v16, "icvReadMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5286);
  }
  unsigned int v10 = sub_1002C42E0(*(const char **)(v8 + 24));
  uint64_t v11 = sub_1002ACF04((uint64_t)a1, a2, "data");
  if (!v11)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    qmemcpy((void *)sub_1002D19D8(&v16, 44), "The matrix data is not found in file storage", 44);
    sub_1002D2278(-2, &v16, "icvReadMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5292);
  }
  uint64_t v12 = v11;
  if ((*(_DWORD *)v11 & 7u) < 5)
  {
    int v13 = (*(_DWORD *)v11 & 7) != 0;
    if ((*(_DWORD *)v11 & 7) == 0) {
      return sub_10022F3D0(v5, v7, v10);
    }
  }
  else
  {
    int v13 = *(_DWORD *)(*(void *)(v11 + 16) + 40);
    if (v13 < 1) {
      return sub_10022F3D0(v5, v7, v10);
    }
  }
  if (v13 != v7 * v5 + v7 * v5 * ((v10 >> 3) & 0x1FF))
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    qmemcpy((void *)sub_1002D19D8(&v16, 63), "The matrix size does not match to the number of stored elements", 63);
    sub_1002D2278(-209, &v16, "icvReadMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5297);
  }
  uint64_t v14 = sub_10022F3A4(v5, v7, v10);
  sub_1002B5A44(a1, v12, *(void *)(v14 + 24), v9);
  return v14;
}

void sub_1002B9EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002B9EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002B9F44(uint64_t a1, const char *a2, uint64_t a3)
{
  sub_1002B2180(a1, a2, 6, (uint64_t)"opencv-matrix");
  sub_1002B2CDC(a1, (uint64_t)"rows", *(unsigned int *)(a3 + 32));
  sub_1002B2CDC(a1, (uint64_t)"cols", *(unsigned int *)(a3 + 36));
  sprintf(&v13, "%d%c", ((*(_DWORD *)a3 >> 3) & 0x1FF) + 1, aUcwsifdr[*(_DWORD *)a3 & 7]);
  if (v14[1]) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v13 == 49;
  }
  if (v5) {
    uint64_t v6 = v14;
  }
  else {
    uint64_t v6 = &v13;
  }
  sub_1002B2E28(a1, (uint64_t)"dt", (uint64_t)v6, 0);
  sub_1002B2180(a1, "data", 13, 0);
  unint64_t v7 = sub_1002323B0(a3);
  if ((int)v7 >= 1)
  {
    unint64_t v8 = HIDWORD(v7);
    if (SHIDWORD(v7) >= 1)
    {
      if (*(void *)(a3 + 24))
      {
        uint64_t v9 = 0;
        if ((*(_DWORD *)a3 & 0x4000) != 0) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = HIDWORD(v7);
        }
        if ((*(_DWORD *)a3 & 0x4000) == 0) {
          LODWORD(v8) = 1;
        }
        int v11 = v8 * v7;
        do
        {
          sub_1002B2F84(a1, *(void *)(a3 + 24) + v9 * *(int *)(a3 + 4), v11, &v13);
          ++v9;
        }
        while (v10 != v9);
      }
    }
  }
  sub_1002B2B88(a1);
  return sub_1002B2B88(a1);
}

BOOL sub_1002BA0D0(BOOL result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 2) == 16963;
  }
  return result;
}

uint64_t sub_1002BA0EC(_DWORD *a1, uint64_t a2)
{
  memset(v22, 0, sizeof(v22));
  uint64_t v4 = sub_1002ACF04((uint64_t)a1, a2, "sizes");
  uint64_t v5 = sub_1002ACF04((uint64_t)a1, a2, "dt");
  if (!v5 || (*(_DWORD *)v5 & 7) != 3 || !v4 || !*(void *)(v5 + 24))
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    qmemcpy((void *)sub_1002D19D8(&v20, 46), "Some of essential matrix attributes are absent", 46);
    sub_1002D2278(-2, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5369);
  }
  char v19 = *(const char **)(v5 + 24);
  if ((*(_DWORD *)v4 & 7) == 5)
  {
    signed int v6 = *(_DWORD *)(*(void *)(v4 + 16) + 40);
    if ((v6 - 33) > 0xFFFFFFDF) {
      goto LABEL_14;
    }
LABEL_13:
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    qmemcpy((void *)sub_1002D19D8(&v20, 45), "Could not determine the matrix dimensionality", 45);
    sub_1002D2278(-212, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5375);
  }
  if ((*(_DWORD *)v4 & 7) == 1) {
    signed int v6 = 1;
  }
  else {
    signed int v6 = -1;
  }
  if ((v6 - 33) <= 0xFFFFFFDF) {
    goto LABEL_13;
  }
LABEL_14:
  sub_1002B4F10(a1, v4, (uint64_t)&v20);
  if ((*(_DWORD *)v4 & 7) == 5) {
    int v7 = *(_DWORD *)(*(void *)(v4 + 16) + 40);
  }
  else {
    int v7 = 1;
  }
  sub_1002B512C(a1, &v20, v7, (uint64_t)v22, "i");
  unsigned int v8 = sub_1002C42E0(v19);
  uint64_t v9 = sub_1002ACF04((uint64_t)a1, a2, "data");
  uint64_t v10 = v9;
  if (!v9)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    qmemcpy((void *)sub_1002D19D8(&v20, 44), "The matrix data is not found in file storage", 44);
    sub_1002D2278(-2, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5382);
  }
  int v11 = ((v8 >> 3) & 0x1FF) + 1;
  if (v6 >= 1)
  {
    uint64_t v12 = v6;
    char v13 = v22;
    do
    {
      if (!*v13)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        *(void *)sub_1002D19D8(&v20, 8) = 0x5D695B73657A6973;
        sub_1002D2278(-215, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5388);
      }
      v11 *= *v13++;
      --v12;
    }
    while (v12);
  }
  if ((*(_DWORD *)v9 & 7u) < 5)
  {
    int v14 = (*(_DWORD *)v9 & 7) != 0;
    if ((*(_DWORD *)v9 & 7) != 0 && v14 != v11)
    {
LABEL_29:
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      qmemcpy((void *)sub_1002D19D8(&v20, 63), "The matrix size does not match to the number of stored elements", 63);
      sub_1002D2278(-209, &v20, "icvReadMatND", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5396);
    }
  }
  else
  {
    int v14 = *(_DWORD *)(*(void *)(v9 + 16) + 40);
    if (v14 >= 1 && v14 != v11) {
      goto LABEL_29;
    }
  }
  if (v14 < 1) {
    return sub_100230180(v6, (uint64_t)v22, v8);
  }
  uint64_t v17 = sub_100230154(v6, (uint64_t)v22, v8);
  sub_1002B5A44(a1, v10, *(void *)(v17 + 24), v19);
  return v17;
}

void sub_1002BA4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BA578(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v14 = a3;
  uint64_t v11 = 0;
  sub_1002B2180(a1, a2, 6, (uint64_t)"opencv-nd-matrix");
  int v5 = sub_10023218C(a3, __dst);
  sub_1002B2180(a1, "sizes", 13, 0);
  sub_1002B2F84(a1, (uint64_t)__dst, v5, "i");
  sub_1002B2B88(a1);
  unsigned int v6 = sub_10023204C((int *)a3);
  sprintf(&v15, "%d%c", ((v6 >> 3) & 0x1FF) + 1, aUcwsifdr[v6 & 7]);
  if (v16[1]) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v15 == 49;
  }
  if (v7) {
    unsigned int v8 = v16;
  }
  else {
    unsigned int v8 = &v15;
  }
  sub_1002B2E28(a1, (uint64_t)"dt", (uint64_t)v8, 0);
  sub_1002B2180(a1, "data", 13, 0);
  if (*(int *)(a3 + 32) >= 1 && *(void *)(a3 + 24))
  {
    sub_100230650(1u, (uint64_t)&v14, 0, (uint64_t)v13, (uint64_t)&v10, 0);
    do
      sub_1002B2F84(a1, v12, v11, &v15);
    while (sub_10023118C(&v10));
  }
  sub_1002B2B88(a1);
  return sub_1002B2B88(a1);
}

uint64_t sub_1002BA714(_DWORD *a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    int v4 = -27;
LABEL_5:
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    qmemcpy((void *)sub_1002D19D8(&v7, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(v4, &v7, "cvRead", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6708);
  }
  if (*a1 != 1280131417)
  {
    int v4 = -5;
    goto LABEL_5;
  }
  if (!a2) {
    return 0;
  }
  if ((*(unsigned char *)a2 & 0x10) == 0 || (uint64_t v5 = *(void *)(a2 + 8)) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    qmemcpy((void *)sub_1002D19D8(&v7, 57), "The node does not represent a user object (unknown type?)", 57);
    sub_1002D2278(-2, &v7, "cvRead", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6714);
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *, uint64_t))(v5 + 48))(a1, a2);
  if (a3)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_1002BA864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002BA894(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    int v10 = -27;
LABEL_5:
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    qmemcpy((void *)sub_1002D19D8(&v14, 31), "Invalid pointer to file storage", 31);
    sub_1002D2278(v10, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6731);
  }
  if (*a1 != 1280131417)
  {
    int v10 = -5;
    goto LABEL_5;
  }
  if (!a1[2])
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    qmemcpy((void *)sub_1002D19D8(&v14, 38), "The file storage is opened for reading", 38);
    sub_1002D2278(-2, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6731);
  }
  if (!a3)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    qmemcpy((void *)sub_1002D19D8(&v14, 34), "Null pointer to the written object", 34);
    sub_1002D2278(-27, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6734);
  }
  uint64_t v11 = qword_1004F8CE8;
  if (!qword_1004F8CE8)
  {
LABEL_14:
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    qmemcpy((void *)sub_1002D19D8(&v14, 14), "Unknown object", 14);
    sub_1002D2278(-5, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6738);
  }
  while (!(*(unsigned int (**)(uint64_t))(v11 + 32))(a3))
  {
    uint64_t v11 = *(void *)(v11 + 16);
    if (!v11) {
      goto LABEL_14;
    }
  }
  uint64_t v12 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    qmemcpy((void *)sub_1002D19D8(&v14, 39), "The object does not have write function", 39);
    sub_1002D2278(-5, &v14, "cvWrite", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6741);
  }
  return v12(a1, a2, a3, a4, a5);
}

void sub_1002BAAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1002BAB68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return v1 && *(unsigned char *)(v1 + 432) != 0;
}

uint64_t sub_1002BAB8C(uint64_t a1, char **a2, unsigned int a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1004962B0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  sub_1002BAD78((void *)a1, a2, a3, a4);
  return a1;
}

void sub_1002BABF4(_Unwind_Exception *a1)
{
  uint64_t v4 = v1;
  unsigned int v6 = *(void **)(v4 + 40);
  if (v6)
  {
    *(void *)(v4 + 48) = v6;
    operator delete(v6);
  }
  sub_1002D1A1C(v2);
  uint64_t v7 = *(atomic_uint **)v3;
  if (*(void *)v3)
  {
    if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
    }
  }
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  _Unwind_Resume(a1);
}

void *sub_1002BAC68(void *a1)
{
  *a1 = off_1004962B0;
  uint64_t v2 = (void *)a1[6];
  if (v2 != (void *)a1[5])
  {
    do
    {
      sub_1002B2B88(a1[2]);
      uint64_t v3 = (void *)a1[5];
      uint64_t v2 = (void *)(a1[6] - 1);
      a1[6] = v2;
    }
    while (v2 != v3);
    goto LABEL_5;
  }
  if (v2)
  {
LABEL_5:
    a1[6] = v2;
    operator delete(v2);
  }
  sub_1002D1A1C(a1 + 3);
  uint64_t v4 = (atomic_uint *)a1[1];
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
  }
  a1[1] = 0;
  a1[2] = 0;
  return a1;
}

void sub_1002BAD40(void *a1)
{
  sub_1002BAC68(a1);

  operator delete();
}

uint64_t sub_1002BAD78(void *a1, char **a2, unsigned int a3, uint64_t a4)
{
  sub_1002D6AE8(v15, &off_1004962E0);
  (*(void (**)(void *))(*a1 + 32))(a1);
  uint64_t v8 = "";
  if (*a2) {
    uint64_t v9 = *a2;
  }
  else {
    uint64_t v9 = "";
  }
  if (*(void *)a4) {
    uint64_t v8 = *(const char **)a4;
  }
  if (*(void *)(a4 + 8)) {
    int v10 = v8;
  }
  else {
    int v10 = 0;
  }
  if (sub_1002AD2A4(v9, 0, a3, v10)) {
    operator new();
  }
  uint64_t v11 = (atomic_uint *)a1[1];
  a1[1] = 0;
  a1[2] = 0;
  if (v11 && atomic_fetch_add(v11 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v11 + 16))(v11);
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  if (v12) {
    int v13 = 6;
  }
  else {
    int v13 = 0;
  }
  *((_DWORD *)a1 + 16) = v13;
  if (v16) {
    sub_1002D6888(v15);
  }
  return v12;
}

void sub_1002BAF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002BAF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

atomic_uint *sub_1002BAF44(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t result = *(atomic_uint **)(a1 + 8);
  if (result && atomic_fetch_add(result + 2, 0xFFFFFFFF) == 1) {
    uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 16))(result);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_1002BAFB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v3 = a1[2];
  if (v3 && *(void *)(v3 + 376)) {
    sub_1002AC560(v3, a2);
  }
  return (*(uint64_t (**)(void *))(*a1 + 32))(a1);
}

void sub_1002BB020(_Unwind_Exception *a1)
{
  sub_1002D1A1C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BB038(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2) {
    uint64_t v4 = *(unsigned __int8 **)a2;
  }
  else {
    uint64_t v4 = "";
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    int v5 = *v4;
    if ((v5 | 0x20) == 0x7D)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      if (*(void *)(a1 + 40) == v6)
      {
        sub_1002D1F78((uint64_t *)&v56, "Extra closing '%c'", *v4);
        sub_1002D2278(-2, (uint64_t *)&v56, "operator<<", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6957);
      }
      if (v5 == 93) {
        int v7 = 91;
      }
      else {
        int v7 = 123;
      }
      uint64_t v8 = *(char *)(v6 - 1);
      if (v7 != v8)
      {
        sub_1002D1F78((uint64_t *)&v56, "The closing '%c' does not match the opening '%c'", (char)v5, v8);
        sub_1002D2278(-2, (uint64_t *)&v56, "operator<<", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6960);
      }
      *(void *)(a1 + 48) = v6 - 1;
      int v9 = 6;
      if (*(void *)(a1 + 40) != v6 - 1)
      {
        if (*(unsigned char *)(v6 - 2) == 123) {
          int v9 = 6;
        }
        else {
          int v9 = 1;
        }
      }
      *(_DWORD *)(a1 + 64) = v9;
      sub_1002B2B88(*(void *)(a1 + 16));
      unint64_t v56 = 0;
      uint64_t v57 = 0;
      if (&v56 != (atomic_uint **)(a1 + 24))
      {
        sub_1002D1A1C((uint64_t *)(a1 + 24));
        int v10 = v56;
        if (v56)
        {
          atomic_fetch_add(v56 - 1, 1u);
          int v10 = v56;
        }
        uint64_t v11 = v57;
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = v11;
      }
LABEL_102:
      sub_1002D1A1C((uint64_t *)&v56);
      return a1;
    }
    if (*(_DWORD *)(a1 + 64) == 6)
    {
      if (v5 != 95 && ((v5 & 0xDF) - 65) >= 0x1Au)
      {
        sub_1002D1F78((uint64_t *)&v56, "Incorrect element name %s", (const char *)v4);
        sub_1002D2278(-2, (uint64_t *)&v56, "operator<<", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 6970);
      }
      if (a1 + 24 != a2)
      {
        sub_1002D1A1C((uint64_t *)(a1 + 24));
        int v13 = *(unsigned __int8 **)a2;
        if (*(void *)a2)
        {
          atomic_fetch_add((atomic_uint *volatile)v13 - 1, 1u);
          int v13 = *(unsigned __int8 **)a2;
        }
        *(void *)(a1 + 24) = v13;
        *(void *)(a1 + 32) = *(void *)(a2 + 8);
      }
      int v14 = 5;
      goto LABEL_34;
    }
    if ((*(_DWORD *)(a1 + 64) & 3) != 1)
    {
      unint64_t v56 = 0;
      uint64_t v57 = 0;
      *(_OWORD *)sub_1002D19D8(&v56, 16) = *(_OWORD *)"Invalid fs.state";
      sub_1002D2278(-2, (uint64_t *)&v56, "operator<<", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7000);
    }
    if ((v5 | 0x20) == 0x7B)
    {
      int v16 = *(unsigned char **)(a1 + 48);
      unint64_t v15 = *(void *)(a1 + 56);
      if ((unint64_t)v16 < v15)
      {
        *int v16 = v5;
        uint64_t v17 = (uint64_t)(v16 + 1);
LABEL_79:
        unint64_t v43 = *(const char **)(a1 + 24);
        *(void *)(a1 + 48) = v17;
        BOOL v44 = *v4 == 123;
        if (*v4 == 123) {
          int v45 = 6;
        }
        else {
          int v45 = 1;
        }
        *(_DWORD *)(a1 + 64) = v45;
        uint64_t v46 = v4 + 1;
        int v47 = v4[1];
        if (v44) {
          unsigned int v48 = 6;
        }
        else {
          unsigned int v48 = 5;
        }
        if (v47 == 58) {
          uint64_t v49 = v48 | 8;
        }
        else {
          uint64_t v49 = v48;
        }
        uint64_t v50 = 1;
        if (v47 == 58)
        {
          uint64_t v50 = 2;
          uint64_t v46 = v4 + 2;
        }
        if (!v43) {
          unint64_t v43 = "";
        }
        if (*(void *)(a1 + 32)) {
          int v51 = v43;
        }
        else {
          int v51 = 0;
        }
        if (v4[v50]) {
          uint64_t v52 = (uint64_t)v46;
        }
        else {
          uint64_t v52 = 0;
        }
        sub_1002B2180(*(void *)(a1 + 16), v51, v49, v52);
        unint64_t v56 = 0;
        uint64_t v57 = 0;
        if (&v56 != (atomic_uint **)(a1 + 24))
        {
          sub_1002D1A1C((uint64_t *)(a1 + 24));
          int v53 = v56;
          if (v56)
          {
            atomic_fetch_add(v56 - 1, 1u);
            int v53 = v56;
          }
          uint64_t v54 = v57;
          *(void *)(a1 + 24) = v53;
          *(void *)(a1 + 32) = v54;
        }
        goto LABEL_102;
      }
      uint64_t v22 = *(unsigned char **)(a1 + 40);
      unint64_t v23 = v16 - v22;
      uint64_t v24 = v16 - v22 + 1;
      if (v24 < 0) {
        sub_10000B98C();
      }
      unint64_t v25 = v15 - (void)v22;
      if (2 * v25 > v24) {
        uint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v26 = v24;
      }
      if (v26) {
        uint64_t v27 = operator new(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v30 = &v27[v23];
      uint64_t v31 = &v27[v26];
      v27[v23] = v5;
      uint64_t v17 = (uint64_t)&v27[v23 + 1];
      if (v16 == v22)
      {
        v27 += v23;
        goto LABEL_77;
      }
      if (v23 >= 8 && (unint64_t)(v22 - v27) >= 0x20)
      {
        if (v23 < 0x20)
        {
          unint64_t v32 = 0;
          goto LABEL_69;
        }
        unint64_t v32 = v23 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v33 = (long long *)(v16 - 16);
        uint64_t v34 = &v27[v16 - 16 - v22];
        unint64_t v35 = v23 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          _OWORD *v34 = v36;
          v34 -= 2;
          v33 -= 2;
          v35 -= 32;
        }
        while (v35);
        if (v23 == v32) {
          goto LABEL_76;
        }
        if ((v23 & 0x18) != 0)
        {
LABEL_69:
          v30 -= v23 & 0xFFFFFFFFFFFFFFF8;
          int v37 = &v16[-v32 - 8];
          int v38 = &v27[v37 - v22];
          unint64_t v39 = v32 - (v23 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v40 = *(void *)v37;
            v37 -= 8;
            *v38-- = v40;
            v39 += 8;
          }
          while (v39);
          v16 -= v23 & 0xFFFFFFFFFFFFFFF8;
          if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_76;
          }
          goto LABEL_74;
        }
        v30 -= v32;
        v16 -= v32;
      }
LABEL_74:
      int v41 = v30 - 1;
      do
      {
        char v42 = *--v16;
        *v41-- = v42;
      }
      while (v16 != v22);
LABEL_76:
      int v16 = *(unsigned char **)(a1 + 40);
LABEL_77:
      *(void *)(a1 + 40) = v27;
      *(void *)(a1 + 48) = v17;
      *(void *)(a1 + 56) = v31;
      if (v16) {
        operator delete(v16);
      }
      goto LABEL_79;
    }
    if (v5 != 92
      || ((int v19 = v4[1],
           uint64_t v18 = (char *)(v4 + 1),
           uint64_t v20 = (1 << (v19 - 91)) & 0x500000005,
           (v19 - 91) <= 0x22)
        ? (BOOL v21 = v20 == 0)
        : (BOOL v21 = 1),
          v21))
    {
      uint64_t v28 = *(const char **)a2;
      uint64_t v29 = *(void *)(a2 + 8);
      unint64_t v56 = (atomic_uint *)v28;
      uint64_t v57 = v29;
      if (v28) {
        atomic_fetch_add((atomic_uint *volatile)v28 - 1, 1u);
      }
    }
    else
    {
      sub_10022F344(&v56, v18);
    }
    sub_1002BB648(a1, a1 + 24, (const char **)&v56);
    sub_1002D1A1C((uint64_t *)&v56);
    if (*(_DWORD *)(a1 + 64) == 5)
    {
      int v14 = 6;
LABEL_34:
      *(_DWORD *)(a1 + 64) = v14;
    }
  }
  return a1;
}

void sub_1002BB5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BB648(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(const char **)a2;
  if (!*(void *)a2) {
    uint64_t v4 = "";
  }
  if (*(void *)(a2 + 8)) {
    uint64_t v5 = (uint64_t)v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (*a3) {
    uint64_t v6 = *a3;
  }
  else {
    uint64_t v6 = "";
  }
  return sub_1002B2E28(v3, v5, (uint64_t)v6, 0);
}

unsigned char *sub_1002BB67C(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = 0;
  if (a1 && a2 && a4)
  {
    uint64_t v6 = (unsigned __int8 *)(a1 + a3);
    int64_t v7 = 3 * (a4 / 3);
    if (v7 < 1)
    {
      int v13 = v6;
      int v9 = a2;
      unint64_t v15 = a4;
      if (a4 != 2)
      {
LABEL_8:
        if (v15 != 1)
        {
LABEL_13:
          unsigned char *v9 = 0;
          return (unsigned char *)(v9 - a2);
        }
        unint64_t v16 = *v13;
        unsigned char *v9 = aAbcdefghijklmn[v16 >> 2];
        v9[1] = aAbcdefghijklmn[16 * (v16 & 3)];
        char v17 = 61;
LABEL_12:
        _OWORD v9[2] = v17;
        v9[3] = 61;
        v9 += 4;
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v8 = (unint64_t)&v6[v7];
      int v9 = a2;
      int v10 = v6;
      do
      {
        unint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        int v13 = v10 + 3;
        unint64_t v14 = v10[2];
        unsigned char *v9 = aAbcdefghijklmn[v11 >> 2];
        v9[1] = aAbcdefghijklmn[(v12 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v11 & 3))];
        _OWORD v9[2] = aAbcdefghijklmn[(v14 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v12 & 0xF))];
        v9[3] = aAbcdefghijklmn[v14 & 0x3F];
        v9 += 4;
        int v10 = v13;
      }
      while ((unint64_t)v13 < v8);
      unint64_t v15 = &v6[a4] - v13;
      if (v15 != 2) {
        goto LABEL_8;
      }
    }
    unint64_t v18 = *v13;
    unint64_t v19 = v13[1];
    unsigned char *v9 = aAbcdefghijklmn[v18 >> 2];
    v9[1] = aAbcdefghijklmn[(v19 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v18 & 3))];
    char v17 = aAbcdefghijklmn[4 * (v19 & 0xF)];
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1002BB7C8@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002AB958((uint64_t)v10);
  size_t v4 = strlen(a1);
  uint64_t v5 = sub_10026AA20(v10, (uint64_t)a1, v4);
  LOBYTE(v9[0]) = 32;
  sub_10026AA20(v5, (uint64_t)v9, 1);
  std::stringbuf::str();
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    unint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6 >= 0x18)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 27), "buffer.size() < HEADER_SIZE", 27);
    sub_1002D2278(-215, v9, "make_base64_header", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7785);
  }
  std::string::reserve((std::string *)a2, 0x18uLL);
  while (1)
  {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    if ((v7 & 0x80u) != 0) {
      unint64_t v7 = *(void *)(a2 + 8);
    }
    if (v7 > 0x17) {
      break;
    }
    std::string::push_back((std::string *)a2, 32);
  }
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1002BB9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  sub_1002ABAFC((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_1002BBA18(const char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  size_t v4 = strlen(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10026ADB4();
  }
  uint64_t v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v13) = v4;
  uint64_t v6 = __dst;
  if (v4) {
LABEL_8:
  }
    memmove(v6, v3, (size_t)v5);
  *((unsigned char *)v5 + (void)v6) = 0;
  sub_1002BBC38((uint64_t)v14, (uint64_t)__dst, 8);
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  int v9 = sub_1002BBE20(v14, a2);
  int v10 = *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32);
  if (v15 < 0) {
    operator delete((void *)v14[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return (v10 & 5) == 0;
}

void sub_1002BBC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1002BC0F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BBC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BBC38(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = v6;
  *(void *)(a1 + *(void *)(v6 - 24)) = v5;
  *(void *)(a1 + 8) = 0;
  uint64_t v7 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v7, (void *)(a1 + 16));
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = a3 | 8;
  std::stringbuf::str();
  return a1;
}

void sub_1002BBDCC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_1002BBE0C(_Unwind_Exception *a1)
{
}

uint64_t *sub_1002BBE20(uint64_t *a1, uint64_t a2)
{
  std::istream::sentry::sentry();
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, &std::ctype<char>::id);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  int v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    char v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    unint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    unint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_16;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1002BC044(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1002BC000);
  }
  __cxa_rethrow();
}

void sub_1002BC0E0(_Unwind_Exception *a1)
{
}

uint64_t sub_1002BC0F4(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_1002BC1F8(uint64_t a1)
{
  uint64_t v1 = *(const char **)(a1 + 40);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = *(unsigned __int8 **)(a1 + 48);
  uint64_t v4 = v3 - (unsigned __int8 *)v1;
  size_t v5 = v3 - (unsigned __int8 *)v1;
  if (v3 != (unsigned __int8 *)v1)
  {
    if ((v5 & 3) == 0) {
      goto LABEL_10;
    }
    return 0;
  }
  size_t v5 = strlen(v1);
  if (v5) {
    BOOL v6 = (v5 & 3) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0;
  }
LABEL_10:
  unint64_t v8 = (unint64_t)&v1[v5];
  if (v1[v5 - 1] == 61)
  {
    int v9 = *(unsigned __int8 *)(v8 - 2);
    v8 -= 2;
    if (v9 != 61) {
      unint64_t v8 = (unint64_t)&v1[v5 - 1];
    }
  }
  if ((unint64_t)v1 < v8)
  {
    unint64_t v10 = v8 - (void)v1;
    uint64_t v11 = v1;
    do
    {
      uint64_t v12 = *(unsigned __int8 *)v11;
      if (v12 > 0x7E) {
        return 0;
      }
      if (v12 != 65 && byte_100404BC2[v12] == 0) {
        return 0;
      }
      ++v11;
    }
    while (--v10);
  }
  if (v3 != (unsigned __int8 *)v1)
  {
    unint64_t v14 = *(unsigned char **)(a1 + 64);
    if ((v4 & 3) == 0 && v4 && v14)
    {
      uint64_t v15 = *(unsigned char **)(a1 + 64);
      if (v4 >= 1)
      {
        int v16 = (unsigned __int8 *)&v1[v4];
        uint64_t v17 = *(unsigned char **)(a1 + 64);
        do
        {
          unsigned __int8 v18 = byte_100404BC2[*((unsigned __int8 *)v1 + 1)];
          unsigned int v19 = byte_100404BC2[*((unsigned __int8 *)v1 + 2)];
          unsigned __int8 v20 = byte_100404BC2[*((unsigned __int8 *)v1 + 3)];
          *uint64_t v17 = (4 * byte_100404BC2[*(unsigned __int8 *)v1]) | (v18 >> 4) & 3;
          v17[1] = (16 * v18) | (v19 >> 2) & 0xF;
          uint64_t v15 = v17 + 3;
          v17[2] = v20 | ((_BYTE)v19 << 6);
          v1 += 4;
          v17 += 3;
        }
        while (v1 < (const char *)v16);
      }
      *uint64_t v15 = 0;
      *(void *)(a1 + 48) = *(void *)(a1 + 40);
      uint64_t v21 = v15 - v14;
      if (v15 != v14)
      {
        if ((unint64_t)(*(void *)a1 + v21) >= *(void *)(a1 + 8))
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          qmemcpy((void *)sub_1002D19D8(&v22, 23), "dst_cur + len < dst_end", 23);
          sub_1002D2278(-215, &v22, "flush", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7865);
        }
        memcpy(*(void **)a1, v14, v15 - v14);
        *(void *)a1 += v21;
        return 1;
      }
    }
    else
    {
      *(void *)(a1 + 48) = v1;
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *(void *)sub_1002D19D8(&v22, 8) = 0x30203D21206E656CLL;
    sub_1002D2278(-215, &v22, "flush", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7862);
  }
  return 1;
}

void sub_1002BC468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  if ((unint64_t)(*v9 + v10) < v9[1]) {
    JUMPOUT(0x1002BC38CLL);
  }
  JUMPOUT(0x1002BC3A4);
}

void sub_1002BC488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1002BC4B8(void *a1)
{
  if (a1[6] != a1[5]) {
    sub_1002BC1F8((uint64_t)a1);
  }
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1002BC514(uint64_t a1, unint64_t __src, unint64_t a3)
{
  if (__src < a3)
  {
    size_t v5 = (char *)__src;
    do
    {
      BOOL v6 = *(void **)(a1 + 48);
      if (*(void *)(a1 + 56) - (void)v6 >= (int64_t)(a3 - (void)v5)) {
        size_t v7 = a3 - (void)v5;
      }
      else {
        size_t v7 = *(void *)(a1 + 56) - (void)v6;
      }
      memcpy(v6, v5, v7);
      size_t v8 = *(void *)(a1 + 56);
      size_t v9 = *(void *)(a1 + 48) + v7;
      *(void *)(a1 + 48) = v9;
      if (v9 >= v8 && (sub_1002BC1F8(a1) & 1) == 0)
      {
        v12[0] = 0;
        v12[1] = 0;
        uint64_t v10 = (_DWORD *)sub_1002D19D8(v12, 7);
        _DWORD *v10 = 1937075302;
        *(_DWORD *)((char *)v10 + 3) = 690514035;
        sub_1002D2278(-215, v12, "read", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7842);
      }
      v5 += v7;
    }
    while ((unint64_t)v5 < a3);
  }
  return a1;
}

void sub_1002BC618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002BC630()
{
}

void sub_1002BC76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  if (*(char *)(v9 + 31) < 0) {
    operator delete(*v10);
  }
  _Unwind_Resume(a1);
}

void sub_1002BC7B8()
{
}

void sub_1002BC7DC(uint64_t *a1, char *__s)
{
  if (!__s)
  {
    std::string __p = 0;
    uint64_t v19 = 0;
    qmemcpy((void *)sub_1002D19D8(&__p, 13), "Invalid 'dt'.", 13);
    sub_1002D2278(-5, (uint64_t *)&__p, "check_dt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8359);
  }
  uint64_t v4 = (const void **)(a1 + 1);
  if ((*((char *)a1 + 31) & 0x80000000) == 0)
  {
    uint64_t v5 = *((unsigned __int8 *)a1 + 31);
    if (*((unsigned char *)a1 + 31))
    {
      size_t v6 = strlen(__s);
      if (v6 != v5) {
        goto LABEL_13;
      }
      if (v6 != -1)
      {
        if (!memcmp(v4, __s, v6)) {
          return;
        }
LABEL_13:
        std::string __p = 0;
        uint64_t v19 = 0;
        uint64_t v8 = sub_1002D19D8(&__p, 20);
        *(_DWORD *)(v8 + 16) = 778593140;
        *(_OWORD *)uint64_t v8 = *(_OWORD *)"'dt' does not match.";
        sub_1002D2278(-5, (uint64_t *)&__p, "check_dt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8370);
      }
LABEL_31:
      sub_1002AB7A0();
    }
    goto LABEL_14;
  }
  size_t v7 = a1[2];
  if (!v7)
  {
LABEL_14:
    std::string::assign((std::string *)(a1 + 1), __s);
    sub_1002BB7C8(__s, (uint64_t)&__p);
    uint64_t v9 = v20;
    unsigned __int8 v10 = v20;
    if ((v20 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if ((v20 & 0x80u) != 0) {
      uint64_t v9 = v19;
    }
    if (v9 >= 1)
    {
      uint64_t v12 = &p_p[v9];
      uint64_t v13 = *a1;
      do
      {
        unint64_t v14 = *(void **)(v13 + 64);
        if (*(void *)(v13 + 72) - (void)v14 >= v12 - p_p) {
          size_t v15 = v12 - p_p;
        }
        else {
          size_t v15 = *(void *)(v13 + 72) - (void)v14;
        }
        memcpy(v14, p_p, v15);
        size_t v16 = *(void *)(v13 + 72);
        size_t v17 = *(void *)(v13 + 64) + v15;
        *(void *)(v13 + 64) = v17;
        if (v17 >= v16) {
          sub_1002C5B8C((void **)v13);
        }
        p_p += v15;
      }
      while (p_p < v12);
      unsigned __int8 v10 = v20;
    }
    if ((v10 & 0x80) != 0) {
      operator delete(__p);
    }
    return;
  }
  if (strlen(__s) != v7) {
    goto LABEL_13;
  }
  if (v7 == -1) {
    goto LABEL_31;
  }
  if (memcmp(*v4, __s, v7)) {
    goto LABEL_13;
  }
}

void sub_1002BCA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

char ***sub_1002BCA60(char ***a1, void *a2)
{
  uint64_t v4 = (char *)operator new(0x400uLL);
  bzero(v4, 0x400uLL);
  unint64_t v5 = a2[1];
  if (v5 < a2[2])
  {
    while (1)
    {
      uint64_t v6 = a2[5] - a2[4];
      if (v6)
      {
        uint64_t v7 = 0;
        if ((unint64_t)(v6 >> 4) <= 1) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = v6 >> 4;
        }
        do
        {
          (*(void (**)(void, char *))(a2[4] + v7 + 8))(a2[1] + *(void *)(a2[4] + v7), &v4[*(void *)(a2[4] + v7)]);
          v7 += 16;
          --v8;
        }
        while (v8);
        unint64_t v5 = a2[1];
      }
      uint64_t v9 = a2[3];
      v5 += v9;
      a2[1] = v5;
      if (v9 >= 1) {
        break;
      }
LABEL_4:
      if (v5 >= a2[2]) {
        goto LABEL_43;
      }
    }
    unsigned __int8 v10 = &v4[v9];
    uint64_t v11 = v4;
    while (1)
    {
      uint64_t v12 = a1[8];
      size_t v13 = (char *)a1[9] - (char *)v12 >= v10 - v11 ? v10 - v11 : (char *)a1[9] - (char *)v12;
      memcpy(v12, v11, v13);
      unint64_t v14 = a1[9];
      size_t v15 = (char **)((char *)a1[8] + v13);
      a1[8] = v15;
      if (v15 >= v14)
      {
        size_t v16 = (char *)a1[7];
        size_t v17 = a1[4];
        unint64_t v18 = (char *)v15 - v16;
        BOOL v19 = !v18 || v16 == 0;
        if (!v19 && v17 != 0) {
          break;
        }
      }
LABEL_14:
      v11 += v13;
      if (v11 >= v10)
      {
        unint64_t v5 = a2[1];
        goto LABEL_4;
      }
    }
    int64_t v21 = 3 * (v18 / 3);
    if (v21 < 1)
    {
      uint64_t v29 = (char *)a1[7];
      uint64_t v24 = a1[4];
      int64_t v30 = v18;
      if (v18 != 2)
      {
LABEL_30:
        if (v30 != 1) {
          goto LABEL_35;
        }
        unint64_t v31 = *v29;
        unsigned char *v24 = aAbcdefghijklmn[v31 >> 2];
        v24[1] = aAbcdefghijklmn[16 * (v31 & 3)];
        int32x2_t v24[2] = 61;
LABEL_34:
        v24[3] = 61;
        v24 += 4;
LABEL_35:
        unsigned char *v24 = 0;
        if (v24 != (unsigned char *)v17)
        {
          a1[8] = a1[7];
          uint64_t v34 = *a1;
          if (*((_DWORD *)*a1 + 1) == 24)
          {
            sub_1002AF2B8(*a1, (char *)a1[4]);
          }
          else
          {
            strcpy(__s, "\n");
            size_t v35 = *((int *)v34 + 16);
            memset(__b, 32, v35);
            __b[v35] = 0;
            sub_1002AF2B8(v34, __b);
            sub_1002AF2B8(*a1, (char *)a1[4]);
            sub_1002AF2B8(*a1, __s);
            long long v36 = *a1;
            int v38 = (*a1)[15];
            int v37 = (*a1)[16];
            uint64_t v39 = *((int *)*a1 + 22);
            if (v38 > &v37[v39])
            {
              *(_WORD *)int v38 = 10;
              sub_1002AF2B8(v36, v36[16]);
              int v37 = v36[16];
              LODWORD(v39) = *((_DWORD *)v36 + 22);
            }
            int v40 = *((_DWORD *)v36 + 16);
            if (v39 == v40)
            {
              uint64_t v41 = (int)v39;
            }
            else
            {
              uint64_t v41 = v40;
              memset(v37, 32, v40);
              *((_DWORD *)v36 + 22) = v40;
              int v37 = v36[16];
            }
            unsigned char v36[15] = &v37[v41];
          }
        }
        goto LABEL_14;
      }
    }
    else
    {
      unint64_t v22 = (unint64_t)&v16[v21];
      uint64_t v23 = (char *)a1[7];
      uint64_t v24 = a1[4];
      unint64_t v25 = v23;
      do
      {
        unint64_t v26 = *v25;
        unint64_t v27 = v25[1];
        unint64_t v28 = v25[2];
        unsigned char *v24 = aAbcdefghijklmn[v26 >> 2];
        v24[1] = aAbcdefghijklmn[(v27 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v26 & 3))];
        int32x2_t v24[2] = aAbcdefghijklmn[(v28 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v27 & 0xF))];
        uint64_t v29 = v25 + 3;
        v24[3] = aAbcdefghijklmn[v28 & 0x3F];
        v24 += 4;
        v23 += 3;
        unint64_t v25 = v29;
      }
      while ((unint64_t)v29 < v22);
      int64_t v30 = &v16[v18] - v23;
      if (v30 != 2) {
        goto LABEL_30;
      }
    }
    unint64_t v32 = *v29;
    unint64_t v33 = v29[1];
    unsigned char *v24 = aAbcdefghijklmn[v32 >> 2];
    v24[1] = aAbcdefghijklmn[(v33 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v32 & 3))];
    int32x2_t v24[2] = aAbcdefghijklmn[4 * (v33 & 0xF)];
    goto LABEL_34;
  }
LABEL_43:
  operator delete(v4);
  return a1;
}

void sub_1002BCDEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002BCE00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002BCE14(uint64_t a1, int a2, char *a3, uint64_t a4)
{
  uint64_t v13 = 0;
  sub_1002C5CEC((uint64_t)v8, a1, a2, a3);
  while (v8[0] < v8[2])
  {
    double v15 = 0.0;
    (*((void (**)(void, double *))v11 + 2))(v8[0] + *((void *)v11 + 1), &v15);
    unint64_t v5 = v11;
    unint64_t v6 = *(void *)v11;
    switch(*(void *)v11)
    {
      case 0:
        LODWORD(v14) = LOBYTE(v15);
        goto LABEL_15;
      case 1:
        LODWORD(v14) = SLOBYTE(v15);
        goto LABEL_15;
      case 2:
        LODWORD(v14) = LOWORD(v15);
        goto LABEL_15;
      case 3:
        LODWORD(v14) = SLOWORD(v15);
        goto LABEL_15;
      case 4:
        LODWORD(v14) = LODWORD(v15);
        goto LABEL_15;
      case 5:
        double v7 = *(float *)&v15;
        goto LABEL_14;
      case 6:
        double v7 = v15;
LABEL_14:
        double v14 = v7;
LABEL_15:
        unint64_t v6 = *(void *)v11;
        break;
      default:
        break;
    }
    if (v6 <= 6) {
      int __src = dword_100404CA4[v6];
    }
    v11 += 24;
    if (v5 + 24 == v10)
    {
      uint64_t v11 = (char *)__p;
      v8[0] += v8[3];
    }
    sub_10025BB1C(a4, &__src);
  }
  if (__p)
  {
    unsigned __int8 v10 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1002BCF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002BCFA0(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10000B98C();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_10000BA6C();
    }
    double v7 = (char *)operator new(24 * v6);
  }
  else
  {
    double v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unsigned __int8 v10 = v8 + 24;
  uint64_t v11 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  double v14 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    uint64_t v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void sub_1002BD10C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    double v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        size_t v35 = &v34[8 * v32];
        long long v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            int v74 = &v34[8 * v32];
            int v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              int v40 = &v35[v76];
              v7 += v76;
              unint64_t v77 = (long long *)(v6 + 3);
              int v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *int v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)int v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_10000BA6C();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    double v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      double v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      int v91 = operator new(0x1000uLL);
      sub_1002BD6DC((char **)a1, &v91);
      return;
    }
    int v91 = operator new(0x1000uLL);
    sub_1002BD86C((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    double v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        size_t v35 = &v34[8 * v43];
        long long v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              int v47 = &v35[v84];
              v7 += v84;
              int v85 = (long long *)(v41 + 3);
              int v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                _OWORD *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0x1000uLL);
  unint64_t v27 = &v25[8 * v21];
  unint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_10000BA6C();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      unint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_10000BA6C();
          }
          unint64_t v60 = (char *)operator new(8 * v59);
          unint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          int v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            int v64 = &v60[8 * v61];
            unsigned long long v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            int v64 = &v60[8 * v61];
            unsigned long long v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            int v64 = &v53[v68];
            unsigned long long v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            uint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)uint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)int v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          unint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          int v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unint64_t v25 = v27;
        }
      }
      else
      {
        int v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      int v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  int v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_1002BD67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002BD698(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002BD6AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002BD6C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002BD6DC(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    sub_10000BA6C();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    unint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unint64_t v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      _OWORD *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    unint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_1002BD86C(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    unint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        sub_10000BA6C();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      unint64_t v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        unint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *unint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        unint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      unint64_t v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_1002BDA08(uint64_t a1, const char *a2, int a3, void **a4, uint64_t a5)
{
  uint64_t v9 = *(char **)(a1 + 120);
  int v10 = *(_DWORD *)(a1 + 68);
  if (a2)
  {
    if (*a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = 0;
    }
    if (a3 != 1) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (a3 != 1) {
      goto LABEL_22;
    }
  }
  if ((*(_DWORD *)(a1 + 68) & 7u) < 5)
  {
    if (v11) {
      int v10 = 38;
    }
    else {
      int v10 = 37;
    }
    *(_DWORD *)(a1 + 12) = 0;
  }
  else if (((*(_DWORD *)(a1 + 68) & 7) == 6) != (v11 != 0))
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    qmemcpy((void *)sub_1002D19D8(&v53, 85), "An attempt to add element without a key to a map, or add element with key to sequence", 85);
    sub_1002D2278(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2892);
  }
  if ((v10 & 0x20) == 0)
  {
    uint64_t v13 = *(char **)(a1 + 120);
    BOOL v12 = *(char **)(a1 + 128);
    uint64_t v14 = *(int *)(a1 + 88);
    if (v13 > &v12[v14])
    {
      *(_WORD *)uint64_t v13 = 10;
      sub_1002AF2B8((void *)a1, *(char **)(a1 + 128));
      BOOL v12 = *(char **)(a1 + 128);
      LODWORD(v14) = *(_DWORD *)(a1 + 88);
    }
    int v15 = *(_DWORD *)(a1 + 64);
    if (v14 == v15)
    {
      uint64_t v16 = (int)v14;
    }
    else
    {
      uint64_t v16 = v15;
      memset(v12, 32, v15);
      *(_DWORD *)(a1 + 88) = v15;
      BOOL v12 = *(char **)(a1 + 128);
    }
    uint64_t v9 = &v12[v16];
    *(void *)(a1 + 120) = &v12[v16];
  }
LABEL_22:
  int v51 = v10;
  if (v11)
  {
    if (*v11 == 95 && !v11[1])
    {
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      qmemcpy((void *)sub_1002D19D8(&v53, 33), "A single _ is a reserved tag name", 33);
      sub_1002D2278(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2907);
    }
  }
  else
  {
    uint64_t v11 = "_";
  }
  uint64_t result = strlen(v11);
  int v18 = result;
  char *v9 = 60;
  uint64_t v19 = v9 + 1;
  if (a3 == 2)
  {
    if (a4)
    {
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      qmemcpy((void *)sub_1002D19D8(&v53, 45), "Closing tag should not include any attributes", 45);
      sub_1002D2278(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2914);
    }
    uint64_t v19 = v9 + 2;
    v9[1] = 47;
  }
  int v20 = *(unsigned __int8 *)v11;
  if (v20 != 95 && (v20 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    qmemcpy((void *)sub_1002D19D8(&v53, 35), "Key should start with a letter or _", 35);
    sub_1002D2278(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2919);
  }
  uint64_t v22 = (int)result;
  unint64_t v23 = *(void *)(a1 + 136);
  uint64_t v52 = a5;
  if ((unint64_t)&v19[(int)result] >= v23)
  {
    uint64_t v24 = *(void *)(a1 + 128);
    int v25 = v19 - v24;
    unint64_t v26 = (3 * (v23 - v24) + (((3 * (v23 - v24)) & 0x8000000000000000) != 0)) >> 1;
    if ((int)v19 - (int)v24 + (int)result <= (int)v26) {
      int v27 = v26;
    }
    else {
      int v27 = v25 + result;
    }
    uint64_t result = sub_10020FEBC(v27 + 256);
    uint64_t v28 = (char *)result;
    long long v29 = *(const void **)(a1 + 128);
    *(void *)(a1 + 120) = result + *(void *)(a1 + 120) - (void)v29;
    if (v25 >= 1) {
      uint64_t result = (uint64_t)memcpy((void *)result, v29, v25);
    }
    *(void *)(a1 + 128) = v28;
    *(void *)(a1 + 136) = &v28[v27];
    uint64_t v19 = &v28[v25];
  }
  if (v18 >= 1)
  {
    uint64_t v30 = v18;
    uint64_t v31 = v19;
    do
    {
      char v33 = *v11++;
      char v32 = v33;
      if ((v33 - 58) <= 0xF5u
        && ((v32 & 0xDF) - 91) <= 0xE5u
        && v32 != 45
        && v32 != 95)
      {
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        qmemcpy((void *)sub_1002D19D8(&v53, 74), "Key name may only contain alphanumeric characters [a-zA-Z0-9], '-' and '_'", 74);
        sub_1002D2278(-5, &v53, "icvXMLWriteTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2926);
      }
      *v31++ = v32;
      --v30;
    }
    while (v30);
  }
  uint64_t v34 = &v19[v22];
  if (a4)
  {
LABEL_53:
    uint64_t result = (uint64_t)*a4;
    if (*a4)
    {
      size_t v35 = a4 + 1;
      do
      {
        int v39 = strlen((const char *)result);
        int v40 = strlen((const char *)*v35);
        int v41 = v39 + v40 + 4;
        unint64_t v42 = *(void *)(a1 + 136);
        if ((unint64_t)&v34[v41] >= v42)
        {
          uint64_t v43 = *(void *)(a1 + 128);
          int v44 = v34 - v43;
          unint64_t v45 = (3 * (v42 - v43) + (((3 * (v42 - v43)) & 0x8000000000000000) != 0)) >> 1;
          int v46 = v41 + v34 - v43;
          if (v46 <= (int)v45) {
            int v47 = v45;
          }
          else {
            int v47 = v46;
          }
          unint64_t v48 = (char *)sub_10020FEBC(v47 + 256);
          uint64_t v49 = v48;
          uint64_t v50 = *(const void **)(a1 + 128);
          *(void *)(a1 + 120) = &v48[*(void *)(a1 + 120) - (void)v50];
          if (v44 >= 1) {
            memcpy(v48, v50, v44);
          }
          *(void *)(a1 + 128) = v49;
          *(void *)(a1 + 136) = &v49[v47];
          uint64_t v34 = &v49[v44];
        }
        char *v34 = 32;
        long long v36 = v34 + 1;
        memcpy(v36, *(v35 - 1), v39);
        BOOL v37 = &v36[v39];
        *(_WORD *)BOOL v37 = 8765;
        v37 += 2;
        memcpy(v37, *v35, v40);
        int64_t v38 = &v37[v40];
        *int64_t v38 = 34;
        uint64_t v34 = v38 + 1;
        uint64_t result = (uint64_t)v35[1];
        v35 += 2;
      }
      while (result);
    }
  }
  while (v52)
  {
    a4 = *(void ***)v52;
    uint64_t v52 = *(void *)(v52 + 8);
    if (a4) {
      goto LABEL_53;
    }
  }
  char *v34 = 62;
  *(void *)(a1 + 120) = v34 + 1;
  *(_DWORD *)(a1 + 68) = v51 & 0xFFFFFFDF;
  return result;
}

void sub_1002BDF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_1002BDFE8(uint64_t a1, char *a2, int a3)
{
  int v6 = 0;
  while (1)
  {
    while (1)
    {
      if (a3 == 1)
      {
        unsigned int v12 = *a2;
        if (v12 > 0x1F || v12 == 9)
        {
          while (1)
          {
            uint64_t v16 = (unsigned __int8 *)a2;
            if (v12 == 45 && a2[1] == 45 && a2[2] == 62) {
              break;
            }
            ++a2;
            unsigned int v12 = v16[1];
            BOOL v15 = v12 > 0x1F || v12 == 9;
            uint64_t v14 = v16;
            if (!v15) {
              goto LABEL_30;
            }
          }
          uint64_t v14 = (unsigned __int8 *)(a2 - 1);
          unsigned int v12 = 45;
        }
        else
        {
          uint64_t v14 = (unsigned __int8 *)(a2 - 1);
        }
LABEL_30:
        a3 = v12 != 45;
        if (v12 == 45) {
          a2 = (char *)(v14 + 4);
        }
        goto LABEL_32;
      }
      if (a3 != 3) {
        break;
      }
      do
      {
        unsigned int v7 = *a2;
        BOOL v8 = v7 == 62;
        if (v7 == 60) {
          int v9 = v6 + 1;
        }
        else {
          int v9 = v6;
        }
        int v6 = v9 - v8;
        if (v9 - v8 < 0) {
          return a2;
        }
        ++a2;
      }
      while (v7 > 0x1F || v7 == 9);
      --a2;
      a3 = 3;
LABEL_32:
      unsigned int v11 = *a2;
      if (v11 <= 0x1F) {
        goto LABEL_44;
      }
    }
    while (1)
    {
      unsigned int v11 = *a2;
      if (v11 != 9 && v11 != 32) {
        break;
      }
      ++a2;
    }
    if (v11 == 60)
    {
      if (a2[1] != 33 || a2[2] != 45 || a2[3] != 45) {
        return a2;
      }
      if (a3)
      {
        sprintf(v26, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Comments are not allowed here");
        sub_1002D2D20(-212, "icvXMLSkipSpaces", v26, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2278);
      }
      a2 += 4;
      a3 = 1;
      goto LABEL_32;
    }
    if (v11 > 0x1F) {
      return a2;
    }
LABEL_44:
    BOOL v17 = v11 > 0xD;
    int v18 = (1 << v11) & 0x2401;
    if (v17 || v18 == 0)
    {
      sprintf(v26, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid character in the stream");
      sub_1002D2D20(-212, "icvXMLSkipSpaces", v26, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2290);
    }
    int v20 = sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
    if (!v20) {
      break;
    }
    a2 = v20;
    int v21 = v20[(int)(strlen(v20) - 1)];
    if (v21 != 10 && v21 != 13)
    {
      if (*(void *)(a1 + 352))
      {
        if (*(void *)(a1 + 368) < *(void *)(a1 + 360)) {
          goto LABEL_2;
        }
      }
      else
      {
        unint64_t v23 = *(FILE **)(a1 + 104);
        if (v23)
        {
          if (!feof(v23)) {
            goto LABEL_2;
          }
        }
        else
        {
          uint64_t v24 = *(gzFile_s **)(a1 + 112);
          if (!v24 || !gzeof(v24))
          {
LABEL_2:
            sprintf(v26, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Too long string or a last string w/o newline");
            sub_1002D2D20(-212, "icvXMLSkipSpaces", v26, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2303);
          }
        }
      }
    }
    ++*(_DWORD *)(a1 + 148);
  }
  a2 = *(char **)(a1 + 128);
  *a2 = 0;
  *(_DWORD *)(a1 + 152) = 1;
  return a2;
}

char *sub_1002BE32C(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, int *a5)
{
  if (!*__s)
  {
    sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Preliminary end of the stream");
    sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2681);
  }
  if (*__s != 60)
  {
    sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Tag should start with '<'");
    sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2684);
  }
  unsigned int v7 = __s + 1;
  int v6 = __s[1];
  if ((v6 - 48) >= 0xA && (v6 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    if (__s[1] > 0x3Eu)
    {
      if (v6 == 63)
      {
        int v42 = 0;
        char v10 = 0;
        unsigned int v7 = __s + 2;
        int v36 = 4;
        int v9 = 1;
        goto LABEL_12;
      }
      if (v6 == 95) {
        goto LABEL_10;
      }
    }
    else
    {
      if (v6 == 33)
      {
        int v42 = 0;
        int v9 = 0;
        char v10 = 0;
        unsigned int v7 = __s + 2;
        int v11 = 5;
        goto LABEL_11;
      }
      if (v6 == 47)
      {
        int v9 = 0;
        char v10 = 0;
        unsigned int v7 = __s + 2;
        int v36 = 2;
        int v42 = 1;
        goto LABEL_12;
      }
    }
    sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unknown tag type");
    sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2706);
  }
LABEL_10:
  int v42 = 0;
  int v9 = 0;
  char v10 = 1;
  int v11 = 1;
LABEL_11:
  int v36 = v11;
LABEL_12:
  uint64_t v12 = 0;
  uint64_t v40 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  char v41 = v10 ^ 1;
  while (1)
  {
    int v15 = *v7;
    if (v15 != 95 && (v15 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Name should start with a letter or underscore");
      sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2713);
    }
    for (uint64_t i = 0; ; ++i)
    {
      char v18 = v7[i];
      if ((v18 - 48) >= 0xAu && ((v18 & 0xDF) - 65) >= 0x1Au)
      {
        int v20 = v7[i];
        if (v20 != 95 && v20 != 45) {
          break;
        }
      }
    }
    uint64_t v21 = sub_1002AC864(a1, v7, i, 1);
    uint64_t v22 = v21;
    if (!v21)
    {
      *(void *)uint64_t v43 = 0;
      uint64_t v44 = 0;
      *(void *)sub_1002D19D8(v43, 8) = 0x656D616E72747461;
      sub_1002D2278(-215, (uint64_t *)v43, "icvXMLParseTag", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2720);
    }
    v7 += i;
    if (v12)
    {
      if (v42)
      {
        sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Closing tag should not contain any attributes");
        sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2728);
      }
      if (v13 && v14 <= 3)
      {
        uint64_t v23 = *v13;
      }
      else
      {
        uint64_t v24 = sub_10025A480(*(void *)(a1 + 16), 0x58uLL);
        *(_OWORD *)(v24 + 72) = 0u;
        *(_OWORD *)(v24 + 56) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(_OWORD *)(v24 + 24) = 0u;
        *(_OWORD *)(v24 + 8) = 0u;
        uint64_t v23 = v24 + 16;
        *(void *)uint64_t v24 = v24 + 16;
        int v14 = 0;
        if (v13) {
          v13[1] = v24;
        }
        else {
          uint64_t v40 = v24;
        }
        uint64_t v13 = (uint64_t *)v24;
      }
      *(void *)(v23 + 16 * v14) = *(void *)(v22 + 16);
      if (*v7 == 61) {
        goto LABEL_46;
      }
LABEL_44:
      unsigned int v7 = sub_1002BDFE8(a1, v7, 2);
      if (*v7 != 61)
      {
        sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Attribute name should be followed by '='");
        sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2754);
      }
      goto LABEL_46;
    }
    uint64_t v12 = v21;
    if (!v13) {
      goto LABEL_52;
    }
    if (*v7 != 61) {
      goto LABEL_44;
    }
LABEL_46:
    int v27 = v7[1];
    unint64_t v26 = v7 + 1;
    int v25 = v27;
    if (v27 != 34 && v25 != 39)
    {
      int v28 = *sub_1002BDFE8(a1, v26, 2);
      if (v28 != 34 && v28 != 39)
      {
        sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Attribute value should be put into single or double quotes");
        sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2762);
      }
    }
    unsigned int v7 = sub_1002BEA44(a1);
    *(void *)(*v13 + 8 * ((2 * v14++) | 1)) = v45;
LABEL_52:
    unsigned int v29 = *v7;
    if (v29 == 62) {
      break;
    }
    uint64_t v30 = sub_1002BDFE8(a1, v7, 2);
    unsigned int v7 = v30;
    int v31 = *v30;
    if (v31 == 62) {
      break;
    }
    char v32 = v9 ^ 1;
    if (v31 != 63) {
      char v32 = 1;
    }
    if ((v32 & 1) == 0)
    {
      if (v30[1] != 62)
      {
        sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid closing tag for <?xml ...");
        sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2790);
      }
      uint64_t result = v30 + 2;
      int v35 = 4;
      goto LABEL_78;
    }
    if (v31 == 47)
    {
      char v33 = v41;
      if (v30[1] != 62) {
        char v33 = 1;
      }
      if ((v33 & 1) == 0)
      {
        uint64_t result = v30 + 2;
        int v35 = 3;
        goto LABEL_78;
      }
    }
    if (v29 > 0x20 || ((1 << v29) & 0x100003E01) == 0)
    {
      sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "There should be space between attributes");
      sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2802);
    }
  }
  if (v9)
  {
    sprintf(v43, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid closing tag for <?xml ...");
    sub_1002D2D20(-212, "icvXMLParseTag", v43, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2783);
  }
  uint64_t result = v7 + 1;
  int v35 = v36;
LABEL_78:
  *a3 = v12;
  *a5 = v35;
  *a4 = v40;
  return result;
}

void sub_1002BEA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002BEA44(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  BOOL v3 = v2;
  unint64_t v5 = v4;
  uint64_t v6 = v1;
  unsigned int v58 = v7 & 7;
  char v57 = v7;
  *(_OWORD *)unint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  char v8 = 1;
  uint64_t v9 = *v4;
  __endptr = 0;
  if (v9 > 0x3C) {
    goto LABEL_4;
  }
  while (2)
  {
    if (((1 << v9) & 0x100003E01) != 0)
    {
LABEL_3:
      unint64_t v5 = sub_1002BDFE8(v6, v5, 0);
      LODWORD(v9) = *v5;
      char v8 = 1;
      goto LABEL_4;
    }
    if (v9 == 60)
    {
      int v10 = v5[1];
      if (v10 == 33)
      {
        if (v5[2] == 45) {
          goto LABEL_3;
        }
        BOOL v11 = 0;
        int v10 = 33;
      }
      else
      {
        BOOL v11 = 0;
      }
LABEL_9:
      v62[0] = 0;
      if (v11 || v10 == 47) {
        goto LABEL_134;
      }
      uint64_t v13 = sub_1002BE32C(v6, v5);
      BOOL v37 = (_DWORD *)v62[0];
      if (*(_DWORD *)(v62[0] + 8) == 1)
      {
        BOOL v38 = **(unsigned __int8 **)(v62[0] + 16) == 95;
        unsigned int v39 = *(_DWORD *)v3 & 7;
        if (v39 <= 4)
        {
LABEL_78:
          if (v38) {
            int v40 = 5;
          }
          else {
            int v40 = 6;
          }
          sub_1002BF768(v6, v40, v3);
          goto LABEL_87;
        }
      }
      else
      {
        BOOL v38 = 0;
        unsigned int v39 = *(_DWORD *)v3 & 7;
        if (v39 <= 4) {
          goto LABEL_78;
        }
      }
      if (v38 != (v39 == 5))
      {
        char v41 = "Sequence element should not have name (use <_></_>)";
        if (v38) {
          char v41 = "Map element should have a name";
        }
        sprintf(__s, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), v41);
        sub_1002D2D20(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2488);
      }
LABEL_87:
      if (v38) {
        uint64_t v42 = (uint64_t)sub_10025BB1C(*((void *)v3 + 2), 0);
      }
      else {
        uint64_t v42 = sub_1002ACA04(v6, (uint64_t)v3, v37, 1);
      }
      uint64_t v43 = v42;
      if (!v42)
      {
        *(void *)__s = 0;
        uint64_t v61 = 0;
        *(_DWORD *)sub_1002D19D8(__s, 4) = 1835363429;
        sub_1002D2278(-215, (uint64_t *)__s, "icvXMLParseValue", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2494);
      }
      uint64_t v44 = (char *)sub_1002BEA44(v6, v13, v42, 0);
      if (!v38) {
        *(_DWORD *)v43 |= 0x40u;
      }
      *(void *)(v43 + 8) = 0;
      sub_1002BE32C(v6, v44);
      sprintf(__s, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "Mismatched closing tag");
      sub_1002D2D20(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2509);
    }
LABEL_4:
    int v10 = v5[1];
    BOOL v11 = v9 == 0;
    if (v9 == 60 || v9 == 0) {
      goto LABEL_9;
    }
    if ((v8 & 1) == 0)
    {
      sprintf(__s, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "There should be space between literals");
      sub_1002D2D20(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2515);
    }
    int v14 = v3;
    if (*(_DWORD *)v3)
    {
      if ((*(_DWORD *)v3 & 7u) <= 4)
      {
        int v15 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(v6 + 16));
        uint64_t v16 = (uint64_t)v15;
        if ((*v3 & 7) != 0) {
          sub_10025BB1C((uint64_t)v15, v3);
        }
        *((void *)v3 + 2) = v16;
        *(_DWORD *)BOOL v3 = 5;
        sub_10025A9B0(v16, 8);
      }
      int v14 = sub_10025BB1C(*((void *)v3 + 2), 0);
      *((void *)v14 + 1) = 0;
    }
    if (v58 == 3) {
      goto LABEL_21;
    }
    if ((v9 - 48) < 0xA) {
      goto LABEL_100;
    }
    switch(v9)
    {
      case '+':
        goto LABEL_115;
      case '.':
        if ((v10 - 48) < 0xA || (v10 - 97) < 0x1A || (v10 - 65) <= 0x19)
        {
LABEL_100:
          if (v9 == 45 || v9 == 43) {
            int v46 = v5 + 1;
          }
          else {
            int v46 = v5;
          }
          do
          {
            __endptr = v46;
            int v48 = *v46++;
            int v47 = v48;
          }
          while ((v48 - 48) < 0xA);
          if (v47 == 101 || v47 == 46)
          {
            double v49 = sub_1002C01BC(v6, v5, &__endptr);
            *(_DWORD *)int v14 = 2;
            *((double *)v14 + 2) = v49;
            uint64_t v19 = __endptr;
            if (__endptr != v5) {
              goto LABEL_123;
            }
          }
          else
          {
            int v51 = strtol(v5, &__endptr, 0);
            *(_DWORD *)int v14 = 1;
            *((_DWORD *)v14 + 4) = v51;
            uint64_t v19 = __endptr;
            if (__endptr != v5) {
              goto LABEL_123;
            }
          }
          sprintf(__s, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "Invalid numeric value (inconsistent explicit type specification?)");
          sub_1002D2D20(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2552);
        }
        break;
      case '-':
LABEL_115:
        if (v10 == 46 || (v10 - 48) < 0xA) {
          goto LABEL_100;
        }
        break;
    }
LABEL_21:
    bzero(__s, 0x1010uLL);
    unsigned int v17 = 0;
    *(_DWORD *)int v14 = 3;
    char v18 = (unsigned __int8 *)&v5[-(v9 != 34)];
    while (1)
    {
      uint64_t v19 = (char *)(v18 + 1);
      unsigned int v20 = v18[1];
      if (v20 - 48 < 0xA || (v20 & 0xFFFFFFDF) - 65 < 0x1A) {
        goto LABEL_36;
      }
      if (v20 == 34) {
        break;
      }
      if (v20 < 0x20 || v20 == 60)
      {
        if (v9 == 34)
        {
          sprintf((char *)v62, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "Closing \" is expected");
          sub_1002D2D20(-212, "icvXMLParseValue", (char *)v62, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2582);
        }
        goto LABEL_122;
      }
      if (v9 != 34 && v20 == 32) {
        goto LABEL_122;
      }
      if (v20 != 38)
      {
        if (v20 == 62 || v20 == 39)
        {
          sprintf((char *)v62, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "Literal ' or > are not allowed. Use &apos; or &gt;");
          sub_1002D2D20(-212, "icvXMLParseValue", (char *)v62, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2587);
        }
LABEL_36:
        ++v18;
        goto LABEL_37;
      }
      uint64_t v23 = v18 + 2;
      if (v18[2] == 35)
      {
        int v25 = v18[3];
        uint64_t v24 = (const char *)(v18 + 3);
        BOOL v26 = v25 == 120;
        if (v25 == 120) {
          int v27 = 16;
        }
        else {
          int v27 = 10;
        }
        if (v26) {
          int v28 = v24 + 1;
        }
        else {
          int v28 = v24;
        }
        int v29 = strtol(v28, &__endptr, v27);
        if ((v29 & 0xFFFFFF00) != 0 || (char v18 = (unsigned __int8 *)__endptr) == 0 || *__endptr != 59)
        {
          sprintf((char *)v62, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "Invalid numeric value in the string");
          sub_1002D2D20(-212, "icvXMLParseValue", (char *)v62, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2603);
        }
        LOBYTE(v20) = v29;
      }
      else
      {
        uint64_t v30 = (char *)(v18 + 3);
        do
        {
          __endptr = v30;
          unsigned int v31 = *v30++;
          unsigned int v20 = v31;
          unsigned int v32 = (v31 & 0xFFFFFFDF) - 65;
        }
        while (v31 - 48 < 0xA || v32 < 0x1A);
        if (v20 != 59)
        {
          sprintf((char *)v62, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "Invalid character in the symbol entity name");
          sub_1002D2D20(-212, "icvXMLParseValue", (char *)v62, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2612);
        }
        char v18 = (unsigned __int8 *)(v30 - 1);
        int v34 = v30 - 1 - v23;
        switch(v34)
        {
          case 4:
            if (*(_DWORD *)v23 == 1936683105)
            {
              LOBYTE(v20) = 39;
              break;
            }
            if (*(_DWORD *)v23 != 1953461617) {
              goto LABEL_72;
            }
            LOBYTE(v20) = 34;
            break;
          case 3:
            if (*(_WORD *)v23 == 28001 && v23[2] == 112)
            {
              LOBYTE(v20) = 38;
              break;
            }
LABEL_72:
            int v36 = v34 + 2;
            memcpy(&__s[v17], v19, v34 + 2);
            v17 += v36;
            break;
          case 2:
            if (*(_WORD *)v23 == 29804)
            {
              LOBYTE(v20) = 60;
              break;
            }
            if (*(_WORD *)v23 != 29799) {
              goto LABEL_72;
            }
            LOBYTE(v20) = 62;
            break;
          default:
            goto LABEL_72;
        }
      }
LABEL_37:
      int v22 = v17;
      __s[v17++] = v20;
      if (v22 >= 4095)
      {
        sprintf((char *)v62, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "Too long string literal");
        sub_1002D2D20(-212, "icvXMLParseValue", (char *)v62, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2635);
      }
    }
    if (v9 != 34)
    {
      sprintf((char *)v62, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "Literal \" is not allowed within a string. Use &quot;");
      sub_1002D2D20(-212, "icvXMLParseValue", (char *)v62, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2575);
    }
    uint64_t v19 = (char *)(v18 + 2);
LABEL_122:
    *((void *)v14 + 2) = sub_10025A774(*(void *)(v6 + 16), __s, v17);
    *((void *)v14 + 3) = v50;
LABEL_123:
    if (v58 - 1 >= 4)
    {
      char v8 = 0;
      unint64_t v5 = v19;
      uint64_t v9 = *v19;
      __endptr = 0;
      if (v9 <= 0x3C) {
        continue;
      }
      goto LABEL_4;
    }
    break;
  }
  unint64_t v5 = v19;
LABEL_134:
  int v52 = *(_DWORD *)v3;
  unsigned int v53 = *(_DWORD *)v3 & 7;
  if (v53)
  {
    unsigned int v54 = v58;
    if (v58 >= 5 && v53 != v58 && v53 < 5) {
      goto LABEL_138;
    }
LABEL_143:
    if (v54) {
      goto LABEL_144;
    }
  }
  else
  {
    unsigned int v54 = v58;
    if (v58 < 5) {
      goto LABEL_143;
    }
LABEL_138:
    if (v54 == 6) {
      int v55 = 6;
    }
    else {
      int v55 = 5;
    }
    sub_1002BF768(v6, v55, v3);
    int v52 = *(_DWORD *)v3;
    unsigned int v53 = *(_DWORD *)v3 & 7;
    unsigned int v54 = v58;
LABEL_144:
    if (v54 != v53)
    {
      sprintf(__s, "%s(%d): %s", *(const char **)(v6 + 96), *(_DWORD *)(v6 + 148), "The actual type is different from the specified type");
      sub_1002D2D20(-212, "icvXMLParseValue", __s, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2657);
    }
  }
  if (v53 > 4) {
    **((_DWORD **)v3 + 2) |= 0x100u;
  }
  *(_DWORD *)BOOL v3 = v52 | v57 & 0x10;
  return v5;
}

void sub_1002BF738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BF768(uint64_t a1, int a2, void *a3)
{
  if ((a2 & 7) == 6)
  {
    if (*(_DWORD *)a3)
    {
      sprintf(v10, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Sequence element should not have name (use <_></_>)");
      sub_1002D2D20(-212, "icvFSCreateCollection", v10, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 558);
    }
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = sub_10025EB10(0, 120, 48, v5);
    v6[27] = 16;
    char v7 = (_OWORD *)sub_10025A480(v5, 0x80uLL);
    *((void *)v6 + 14) = v7;
    v7[6] = 0u;
    v7[7] = 0u;
    v7[4] = 0u;
    v7[5] = 0u;
    v7[2] = 0u;
    v7[3] = 0u;
    *char v7 = 0u;
    v7[1] = 0u;
  }
  else
  {
    char v8 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(a1 + 16));
    uint64_t v6 = v8;
    if ((*(unsigned char *)a3 & 7) != 0) {
      sub_10025BB1C((uint64_t)v8, a3);
    }
  }
  a3[2] = v6;
  *(_DWORD *)a3 = a2;
  return sub_10025A9B0((uint64_t)v6, 8);
}

std::string *sub_1002BF8C4(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v5 = sub_1002BDFE8(a1, a2, 2);
  uint64_t v6 = (unsigned __int8 *)v5;
  if (*(_DWORD *)(a1 + 152)) {
    return (std::string *)v5;
  }
  unsigned int v7 = *v5;
  if (v7 == 60) {
    return (std::string *)v5;
  }
  if (v7 < 0x20)
  {
    uint64_t v10 = 0;
    if (!*v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v10 = 0;
    do
      unsigned int v11 = v5[++v10];
    while (v11 > 0x1F);
    if (!v11)
    {
LABEL_11:
      sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected end of line");
      sub_1002D2D20(-212, "icvXMLGetMultilineStringContent", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2328);
    }
  }
  char v8 = (std::string *)&v5[v10];
  if (v10 < 1) {
    return v8;
  }
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  if ((unint64_t)v10 <= 0x1F)
  {
    sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unrecognized Base64 header");
    sub_1002D2D20(-212, "icvXMLParseBase64", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2347);
  }
  uint64_t v12 = operator new(0x19uLL);
  v69.__r_.__value_.__l.__size_ = (std::string::size_type)(v12 + 25);
  v69.__r_.__value_.__r.__words[2] = (std::string::size_type)(v12 + 25);
  v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  unsigned __int8 v13 = byte_100404BC2[v6[1]];
  unsigned int v14 = byte_100404BC2[v6[2]];
  unsigned __int8 v15 = byte_100404BC2[v6[3]];
  unsigned char *v12 = (4 * byte_100404BC2[*v6]) | (v13 >> 4) & 3;
  v12[1] = (16 * v13) | (v14 >> 2) & 0xF;
  uint64_t v12[2] = v15 | ((_BYTE)v14 << 6);
  unsigned __int8 v16 = byte_100404BC2[v6[5]];
  unsigned int v17 = byte_100404BC2[v6[6]];
  unsigned __int8 v18 = byte_100404BC2[v6[7]];
  v12[3] = (4 * byte_100404BC2[v6[4]]) | (v16 >> 4) & 3;
  v12[4] = (16 * v16) | (v17 >> 2) & 0xF;
  v12[5] = v18 | ((_BYTE)v17 << 6);
  unsigned __int8 v19 = byte_100404BC2[v6[9]];
  unsigned int v20 = byte_100404BC2[v6[10]];
  unsigned __int8 v21 = byte_100404BC2[v6[11]];
  v12[6] = (4 * byte_100404BC2[v6[8]]) | (v19 >> 4) & 3;
  v12[7] = (16 * v19) | (v20 >> 2) & 0xF;
  v12[8] = v21 | ((_BYTE)v20 << 6);
  unsigned __int8 v22 = byte_100404BC2[v6[13]];
  unsigned int v23 = byte_100404BC2[v6[14]];
  unsigned __int8 v24 = byte_100404BC2[v6[15]];
  v12[9] = (4 * byte_100404BC2[v6[12]]) | (v22 >> 4) & 3;
  v12[10] = (16 * v22) | (v23 >> 2) & 0xF;
  v12[11] = v24 | ((_BYTE)v23 << 6);
  unsigned __int8 v25 = byte_100404BC2[v6[17]];
  unsigned int v26 = byte_100404BC2[v6[18]];
  unsigned __int8 v27 = byte_100404BC2[v6[19]];
  v12[12] = (4 * byte_100404BC2[v6[16]]) | (v25 >> 4) & 3;
  v12[13] = (16 * v25) | (v26 >> 2) & 0xF;
  v12[14] = v27 | ((_BYTE)v26 << 6);
  unsigned __int8 v28 = byte_100404BC2[v6[21]];
  unsigned int v29 = byte_100404BC2[v6[22]];
  unsigned __int8 v30 = byte_100404BC2[v6[23]];
  v12[15] = (4 * byte_100404BC2[v6[20]]) | (v28 >> 4) & 3;
  v12[16] = (16 * v28) | (v29 >> 2) & 0xF;
  v12[17] = v30 | ((_BYTE)v29 << 6);
  unsigned __int8 v31 = byte_100404BC2[v6[25]];
  unsigned int v32 = byte_100404BC2[v6[26]];
  unsigned __int8 v33 = byte_100404BC2[v6[27]];
  v12[18] = (4 * byte_100404BC2[v6[24]]) | (v31 >> 4) & 3;
  v12[19] = (16 * v31) | (v32 >> 2) & 0xF;
  v12[20] = v33 | ((_BYTE)v32 << 6);
  unsigned __int8 v34 = byte_100404BC2[v6[29]];
  unsigned int v35 = byte_100404BC2[v6[30]];
  unsigned __int8 v36 = byte_100404BC2[v6[31]];
  v12[21] = (4 * byte_100404BC2[v6[28]]) | (v34 >> 4) & 3;
  v12[22] = (16 * v34) | (v35 >> 2) & 0xF;
  v12[23] = v36 | ((_BYTE)v35 << 6);
  v12[24] = 0;
  if (!sub_1002BBA18((const char **)&v69.__r_.__value_.__l.__data_, (uint64_t)&v70)) {
    goto LABEL_19;
  }
  uint64_t v37 = HIBYTE(v72);
  if (v72 < 0) {
    uint64_t v37 = v71;
  }
  if (!v37)
  {
LABEL_19:
    sub_1002D2D20(-212, "icvXMLParseBase64", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2352);
  }
  operator delete(v12);
  memset(&v69, 0, sizeof(v69));
  std::string::reserve(&v69, 0x20000uLL);
  if ((unint64_t)v10 >= 0x21)
  {
    BOOL v38 = (std::string *)(v6 + 32);
    while (1)
    {
      sub_1002C0400(&v69, v38, v8);
      unsigned int v39 = sub_1002BDFE8(a1, (char *)v8, 2);
      BOOL v38 = (std::string *)v39;
      if (*(_DWORD *)(a1 + 152)) {
        break;
      }
      unsigned int v40 = *v39;
      if (v40 == 60) {
        break;
      }
      char v8 = (std::string *)v39;
      if (v40 >= 0x20)
      {
        char v8 = (std::string *)v39;
        do
        {
          unsigned int v41 = v8->__r_.__value_.__s.__data_[1];
          char v8 = (std::string *)((char *)v8 + 1);
          unsigned int v40 = v41;
        }
        while (v41 > 0x1F);
      }
      if (!v40)
      {
        sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected end of line");
        sub_1002D2D20(-212, "icvXMLGetMultilineStringContent", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2328);
      }
      if (v39 >= (char *)v8) {
        goto LABEL_32;
      }
    }
    char v8 = (std::string *)v39;
  }
LABEL_32:
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
    if (!v69.__r_.__value_.__l.__size_) {
      goto LABEL_38;
    }
    uint64_t v43 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if (!v69.__r_.__value_.__r.__words[0]) {
      goto LABEL_38;
    }
  }
  else
  {
    if (!*((unsigned char *)&v69.__r_.__value_.__s + 23)) {
      goto LABEL_38;
    }
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    uint64_t v43 = &v69;
  }
  if ((size & 3) != 0) {
    goto LABEL_38;
  }
  int64_t v62 = (std::string *)((char *)v43 + size);
  unint64_t v63 = (char *)&v62[-1].__r_.__value_.__r.__words[2] + 7;
  if (*((unsigned char *)&v62[-1].__r_.__value_.__s + 23) == 61)
  {
    int v64 = v62[-1].__r_.__value_.__s.__data_[22];
    int64_t v62 = (std::string *)((char *)v62 - 2);
    if (v64 != 61) {
      int64_t v62 = (std::string *)v63;
    }
  }
  if (v43 < v62)
  {
    int64_t v65 = (char *)v62 - (char *)v43;
    while (1)
    {
      uint64_t v66 = v43->__r_.__value_.__s.__data_[0];
      if (v66 > 0x7E) {
        break;
      }
      if (v66 != 65 && byte_100404BC2[v66] == 0) {
        break;
      }
      uint64_t v43 = (std::string *)((char *)v43 + 1);
      if (!--v65) {
        goto LABEL_39;
      }
    }
LABEL_38:
    sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid Base64 data.");
    sub_1002D2D20(-212, "icvXMLParseBase64", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2368);
  }
LABEL_39:
  int v44 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v69.__r_.__value_.__l.__size_;
  }
  HIWORD(v68) = 0;
  uint64_t v46 = 3 * (v45 >> 2);
  size_t v47 = v46 + 1;
  if (v46 + 1 < 0) {
    sub_10000B98C();
  }
  int v48 = (char *)operator new(v46 + 1);
  double v49 = &v48[v47];
  uint64_t v68 = &v48[v47];
  bzero(v48, v47);
  if (v44 >= 0) {
    uint64_t v50 = &v69;
  }
  else {
    uint64_t v50 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  int v51 = 3 * (v45 >> 2) + 1;
  std::string::size_type v52 = v45 - 1;
  do
  {
    int v53 = v50->__r_.__value_.__s.__data_[v52];
    --v51;
    --v52;
  }
  while (v53 == 61);
  *(void *)uint64_t v73 = v48;
  int v74 = v49;
  unsigned int v54 = operator new(0x78uLL);
  uint64_t v76 = (char *)v54 + 120;
  unint64_t v77 = (char *)v54 + 120;
  *unsigned int v54 = 0u;
  v54[1] = 0u;
  void v54[2] = 0u;
  v54[3] = 0u;
  v54[4] = 0u;
  v54[5] = 0u;
  v54[6] = 0u;
  *((void *)v54 + 14) = 0;
  uint64_t v75 = v54;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  int v55 = operator new(0xA1uLL);
  *int v55 = 0u;
  v55[1] = 0u;
  v55[2] = 0u;
  v55[3] = 0u;
  v55[4] = 0u;
  v55[5] = 0u;
  v55[6] = 0u;
  v55[7] = 0u;
  unsigned char v55[8] = 0u;
  v55[9] = 0u;
  *((unsigned char *)v55 + 160) = 0;
  *(void *)&long long v80 = (char *)v55 + 161;
  *((void *)&v80 + 1) = (char *)v55 + 161;
  *(void *)&long long v78 = v55;
  *((void *)&v78 + 1) = v55;
  *(void *)&long long v79 = (char *)v55 + 120;
  *((void *)&v79 + 1) = v55;
  sub_1002BC514((uint64_t)v73, (unint64_t)v50, (unint64_t)v50 + v45);
  sub_1002BC1F8((uint64_t)v73);
  if (*((void *)&v78 + 1) != (void)v78) {
    sub_1002BC1F8((uint64_t)v73);
  }
  if (*((void *)&v79 + 1))
  {
    *(void *)&long long v80 = *((void *)&v79 + 1);
    operator delete(*((void **)&v79 + 1));
  }
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
  if (v72 >= 0) {
    unint64_t v56 = (const char *)&v70;
  }
  else {
    unint64_t v56 = (const char *)v70;
  }
  int v57 = sub_1002B5860(v56);
  int v58 = v51 / v57;
  if (v51 % v57)
  {
    sprintf(v73, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "data size not matches elememt size");
    sub_1002D2D20(-212, "icvXMLParseBase64", v73, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 2386);
  }
  *(_DWORD *)a3 = 0;
  unint64_t v59 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(a1 + 16));
  uint64_t v60 = (uint64_t)v59;
  if ((*(unsigned char *)a3 & 7) != 0) {
    sub_10025BB1C((uint64_t)v59, a3);
  }
  a3[2] = v60;
  *(_DWORD *)a3 = 5;
  sub_10025A9B0(v60, 8);
  if (v72 >= 0) {
    uint64_t v61 = (char *)&v70;
  }
  else {
    uint64_t v61 = (char *)v70;
  }
  sub_1002BCE14((uint64_t)v48, v58, v61, a3[2]);
  if (*(_DWORD *)(a1 + 152)) {
    char v8 = *(std::string **)(a1 + 128);
  }
  if (v48) {
    operator delete(v48);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete(v70);
  }
  return v8;
}

void sub_1002C0108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1002C01BC(uint64_t a1, char *a2, char **a3)
{
  unint64_t v4 = a2;
  double v6 = strtod(a2, a3);
  unsigned int v7 = *a3;
  if (**a3 != 46)
  {
LABEL_4:
    if (v7 == v4) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  *unsigned int v7 = 44;
  double v8 = strtod(v4, a3);
  *unsigned int v7 = 46;
  if (*a3 > v7)
  {
    unsigned int v7 = *a3;
    double v6 = v8;
    goto LABEL_4;
  }
  *a3 = v7;
  if (v7 == v4) {
    goto LABEL_8;
  }
LABEL_5:
  if ((*v7 & 0xDFu) - 65 > 0x19) {
    return v6;
  }
LABEL_8:
  int v9 = *v4;
  if (v9 == 45 || v9 == 43)
  {
    int v11 = *++v4;
    int v10 = v11;
    if (v9 == 45) {
      double v6 = -INFINITY;
    }
    else {
      double v6 = INFINITY;
    }
    if (v10 != 46)
    {
LABEL_14:
      sprintf(v13, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Bad format of floating-point constant");
      sub_1002D2D20(-212, "icvProcessSpecialDouble", v13, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1059);
    }
  }
  else
  {
    double v6 = INFINITY;
    if (v9 != 46) {
      goto LABEL_14;
    }
  }
  if (__toupper(v4[1]) != 73 || __toupper(v4[2]) != 78 || __toupper(v4[3]) != 70)
  {
    if (__toupper(v4[1]) != 78 || __toupper(v4[2]) != 65 || (double v6 = NAN, __toupper(v4[3]) != 78))
    {
      sprintf(v13, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Bad format of floating-point constant");
      sub_1002D2D20(-212, "icvProcessSpecialDouble", v13, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1068);
    }
  }
  *a3 = v4 + 4;
  return v6;
}

std::string *sub_1002C0400(std::string *this, std::string *__src, std::string *a3)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  size_t v7 = (char *)a3 - (char *)__src;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == __src) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src) {
      goto LABEL_12;
    }
  }
  else
  {
    if (a3 == __src) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    int v10 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        unsigned __int8 v13 = this;
        if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_14:
          unsigned int v14 = (char *)v13 + size;
          if (a3 == __src) {
            goto LABEL_38;
          }
          goto LABEL_18;
        }
      }
      else
      {
        unsigned __int8 v13 = this;
        if ((v6 & 0x80) == 0) {
          goto LABEL_14;
        }
      }
      unsigned __int8 v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      unsigned int v14 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (a3 == __src) {
        goto LABEL_38;
      }
LABEL_18:
      if (v7 >= 0x20)
      {
        unsigned int v20 = (char *)v13 + size;
        if ((unint64_t)((char *)v13 + size - (char *)__src) >= 0x20)
        {
          unsigned __int8 v15 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
          v14 += v7 & 0xFFFFFFFFFFFFFFE0;
          unsigned __int8 v21 = v20 + 16;
          unsigned __int8 v22 = &__src->__r_.__value_.__r.__words[2];
          unint64_t v23 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *unsigned __int8 v21 = v24;
            v21 += 2;
            v22 += 4;
            v23 -= 32;
          }
          while (v23);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_38;
          }
        }
        else
        {
          unsigned __int8 v15 = __src;
        }
      }
      else
      {
        unsigned __int8 v15 = __src;
      }
      do
      {
        std::string::value_type v25 = v15->__r_.__value_.__s.__data_[0];
        unsigned __int8 v15 = (std::string *)((char *)v15 + 1);
        *v14++ = v25;
      }
      while (v15 != a3);
LABEL_38:
      *unsigned int v14 = 0;
      std::string::size_type v26 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v26;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v26 & 0x7F;
      }
      return this;
    }
  }
  if ((std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= __src) {
    goto LABEL_12;
  }
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10026ADB4();
  }
  if (v7 > 0x16)
  {
    uint64_t v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v16 = v7 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    std::string::size_type v29 = v7;
    int64_t v30 = v17 | 0x8000000000000000;
    int __dst = p_dst;
    if (a3 == __src) {
      goto LABEL_24;
    }
  }
  else
  {
    HIBYTE(v30) = v7;
    p_dst = (void **)&__dst;
    if (a3 == __src) {
      goto LABEL_24;
    }
  }
  memcpy(p_dst, __src, v7);
  p_dst = (void **)((char *)p_dst + v7);
LABEL_24:
  *(unsigned char *)p_dst = 0;
  if (v30 >= 0) {
    unsigned __int8 v18 = (const std::string::value_type *)&__dst;
  }
  else {
    unsigned __int8 v18 = (const std::string::value_type *)__dst;
  }
  if (v30 >= 0) {
    std::string::size_type v19 = HIBYTE(v30);
  }
  else {
    std::string::size_type v19 = v29;
  }
  std::string::append(this, v18, v19);
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst);
  }
  return this;
}

void sub_1002C0648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002C0664(uint64_t a1, char *a2, int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v6 = *a2;
        if (v6 != 35) {
          break;
        }
        if ((uint64_t)&a2[-*(void *)(a1 + 128)] > 0x7FFFFFFF) {
          return a2;
        }
        *a2 = 0;
      }
      if (v6 != 32) {
        break;
      }
      ++a2;
    }
    if (v6 >= 0x20) {
      break;
    }
    if (v6 > 0xD || ((1 << v6) & 0x2401) == 0)
    {
      if (v6 == 9) {
        uint64_t v5 = "Tabs are prohibited in YAML!";
      }
      else {
        uint64_t v5 = "Invalid character";
      }
      sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), v5);
      sub_1002D2D20(-212, "icvYMLSkipSpaces", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1322);
    }
    double v8 = sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
    if (!v8)
    {
      a2 = *(char **)(a1 + 128);
      *(_DWORD *)a2 = 3026478;
      *(_DWORD *)(a1 + 152) = 1;
      return a2;
    }
    a2 = v8;
    int v9 = v8[(int)(strlen(v8) - 1)];
    if (v9 != 10 && v9 != 13)
    {
      if (*(void *)(a1 + 352))
      {
        if (*(void *)(a1 + 368) < *(void *)(a1 + 360)) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v11 = *(FILE **)(a1 + 104);
        if (v11)
        {
          if (!feof(v11)) {
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v12 = *(gzFile_s **)(a1 + 112);
          if (!v12 || !gzeof(v12))
          {
LABEL_29:
            sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Too long string or a last string w/o newline");
            sub_1002D2D20(-212, "icvYMLSkipSpaces", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1316);
          }
        }
      }
    }
    ++*(_DWORD *)(a1 + 148);
  }
  if ((uint64_t)&a2[-*(void *)(a1 + 128)] < a3)
  {
    sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Incorrect indentation");
    sub_1002D2D20(-212, "icvYMLSkipSpaces", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1296);
  }
  return a2;
}

std::string *sub_1002C08F0(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  LODWORD(v3) = v2;
  char v5 = v4;
  size_t v7 = v6;
  int v9 = v8;
  uint64_t v10 = v1;
  bzero(__s, 0x1400uLL);
  __endptr = 0;
  int v11 = *v9;
  unsigned int v12 = v9[1];
  *(_OWORD *)size_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  if (v11 != 33)
  {
    int v13 = 0;
    goto LABEL_79;
  }
  if (v12 == 94 || v12 == 33)
  {
    int v13 = 16;
    ++v9;
LABEL_24:
    unsigned __int8 v15 = (unsigned __int8 *)v9;
    goto LABEL_25;
  }
  int v13 = 0;
  if (v12 != 60) {
    goto LABEL_24;
  }
  unint64_t v14 = 0;
  unsigned __int8 v15 = (unsigned __int8 *)(v9 + 1);
  do
    unsigned int v16 = v9[v14++ + 2];
  while (v16 >= 0x21 && v16 != 62);
  if (v16 == 62 && v14 >= 0x14)
  {
    BOOL v18 = *(void *)v15 == 0x6D61793A6761743CLL && *(void *)(v9 + 9) == 0x30322C67726F2E6CLL;
    if (v18 && *(void *)(v9 + 12) == 0x3A323030322C6772)
    {
      v9[v14 + 1] = 32;
      unsigned __int8 v15 = (unsigned __int8 *)(v9 + 19);
      int v13 = 16;
    }
  }
LABEL_25:
  uint64_t v20 = 0;
  unsigned __int8 v21 = v15 + 1;
  do
  {
    __endptr = (char *)&v21[v20];
    unsigned int v12 = v21[v20++];
  }
  while (v12 > 0x20);
  unsigned __int8 v22 = (const char *)(v15 + 1);
  if (v20 == 1)
  {
    sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "Empty type name");
    sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1503);
  }
  v15[v20] = 0;
  if ((v13 & 0x10) == 0 && v20 == 4)
  {
    if (*(_WORD *)v22 == 29811 && v15[3] == 114)
    {
      int v23 = 0;
      int v13 = 3;
    }
    else if (*(_WORD *)v22 == 28265 && v15[3] == 116)
    {
      int v23 = 0;
      int v13 = 1;
    }
    else
    {
      int v23 = 0;
      if (*(_WORD *)v22 == 25971 && v15[3] == 113)
      {
        int v13 = 5;
      }
      else if (!(*(unsigned __int16 *)(v15 + 1) ^ 0x616D | v15[3] ^ 0x70))
      {
        int v13 = 6;
      }
    }
    goto LABEL_69;
  }
  if ((v13 & 0x10) == 0 && v20 == 6)
  {
    int v23 = 0;
    if (!(*(_DWORD *)v22 ^ 0x616F6C66 | v15[5] ^ 0x74)) {
      int v13 = 2;
    }
    goto LABEL_69;
  }
  if ((v13 & 0x10) != 0 && v20 == 7)
  {
    if (*(_DWORD *)v22 == 1634625890 && *(_WORD *)(v15 + 5) == 31090)
    {
      unsigned __int8 v28 = __endptr;
      char *__endptr = v12;
      std::string::size_type v29 = v28 + 1;
      do
        int v30 = *v29++;
      while (v30 == 32);
      __endptr = v29;
      unsigned int v12 = *v29;
      char *v29 = 0;
      int v13 = 5;
      int v23 = 1;
      goto LABEL_69;
    }
  }
  else if ((v13 & 0x10) != 0)
  {
    uint64_t v31 = qword_1004F8CE8;
    if (qword_1004F8CE8)
    {
      while (strcmp(*(const char **)(v31 + 24), v22))
      {
        uint64_t v31 = *(void *)(v31 + 16);
        if (!v31) {
          goto LABEL_65;
        }
      }
      int v23 = 0;
      v7[1] = v31;
    }
    else
    {
LABEL_65:
      int v23 = 0;
      v7[1] = 0;
      *(_DWORD *)v7 &= ~0x10u;
    }
    goto LABEL_69;
  }
  int v23 = 0;
LABEL_69:
  unsigned int v32 = __endptr;
  char *__endptr = v12;
  unsigned __int8 v33 = sub_1002C0664(v10, v32, v3);
  int v9 = v33;
  int v11 = *v33;
  if ((v13 & 0x10) == 0)
  {
    switch(v13)
    {
      case 1:
        goto LABEL_94;
      case 2:
        goto LABEL_89;
      case 3:
        if (v11 != 39 && v11 != 34)
        {
          __endptr = v33;
          unint64_t v59 = v33 - 1;
          unsigned int v60 = *v33;
          if (v60 > 0x1F)
          {
            if ((v5 & 8) != 0)
            {
LABEL_192:
              uint64_t v73 = v9 + 1;
              while (1)
              {
                uint64_t v61 = v73 - 1;
                if (v60 == 44 || v60 == 93 || v60 == 125) {
                  break;
                }
                __endptr = v73;
                unsigned int v74 = *v73++;
                unsigned int v60 = v74;
                unint64_t v59 = v61;
                if (v74 <= 0x1F) {
                  goto LABEL_207;
                }
              }
LABEL_208:
              if (v59 + 1 == v9) {
                goto LABEL_209;
              }
              goto LABEL_212;
            }
LABEL_201:
            uint64_t v73 = v9 + 1;
            do
            {
              __endptr = v73;
              unsigned int v75 = *v73++;
              unsigned int v60 = v75;
            }
            while (v75 > 0x1F);
LABEL_207:
            unint64_t v59 = v73 - 2;
            uint64_t v61 = v73 - 1;
            goto LABEL_208;
          }
LABEL_211:
          uint64_t v61 = v9;
          if (v59 + 1 == v9) {
LABEL_209:
          }
            sub_1002ACE70(*(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "icvYMLParseValue", "Invalid character", 1748);
LABEL_212:
          if ((v5 & 8) != 0 || v60 != 58)
          {
            *(_DWORD *)size_t v7 = 3;
            unsigned int v91 = v61 - v9 + 1;
            size_t v92 = v61 - 1;
            do
            {
              --v91;
              if (v92 <= v9) {
                break;
              }
              int v93 = *v92--;
            }
            while (v93 == 32);
            v7[2] = sub_10025A774(*(void *)(v10 + 16), v9, v91);
            v7[3] = v94;
            return (std::string *)__endptr;
          }
          uint64_t v57 = 6;
          int v56 = 1;
          goto LABEL_215;
        }
        if ((v23 & 1) == 0)
        {
          int v13 = 3;
          goto LABEL_79;
        }
        return sub_1002C19A0(v10, v33, (int)v33 - *(_DWORD *)(v10 + 128), v7);
    }
  }
  if (v23) {
    return sub_1002C19A0(v10, v33, (int)v33 - *(_DWORD *)(v10 + 128), v7);
  }
LABEL_79:
  if ((v11 - 48) >= 0xA)
  {
    switch(v11)
    {
      case '""':
      case '\'':
        *(_DWORD *)size_t v7 = 3;
        if (v11 == 39)
        {
          signed int v40 = 0;
          unsigned __int8 v34 = v9;
          while (1)
          {
            unsigned int v43 = *++v34;
            unsigned int v42 = v43;
            unsigned int v44 = (v43 & 0xFFFFFFDF) - 65;
            BOOL v45 = v43 - 48 >= 0xA && v44 >= 0x1A;
            if (v45 && (v42 == 39 || v42 < 0x20))
            {
              if (v42 != 39)
              {
                sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "Invalid character");
                sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1622);
              }
              LOBYTE(v42) = v9[2];
              unsigned __int8 v34 = v9 + 2;
              if (v42 != 39) {
                break;
              }
            }
            __s[v40++] = v42;
            int v9 = v34;
            if (v40 >= 4096) {
              goto LABEL_184;
            }
          }
LABEL_185:
          v7[2] = sub_10025A774(*(void *)(v10 + 16), __s, v40);
          v7[3] = v72;
          return (std::string *)v34;
        }
        signed int v40 = 0;
        int64_t v62 = v9;
        while (1)
        {
          unsigned int v64 = *++v62;
          unsigned int v63 = v64;
          unsigned int v65 = (v64 & 0xFFFFFFDF) - 65;
          if (v64 - 48 >= 0xA && v65 >= 0x1A)
          {
            if (v63 < 0x20)
            {
              sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "Invalid character");
              sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1665);
            }
            if (v63 == 92)
            {
              int64_t v62 = v9 + 2;
              unsigned int v63 = v9[2];
              switch(v9[2])
              {
                case '\\':
                  goto LABEL_158;
                case ']':
                case '^':
                case '_':
                case 'a':
                case 'b':
                case 'c':
                case 'd':
                case 'e':
                case 'f':
                case 'g':
                case 'h':
                case 'i':
                case 'j':
                case 'k':
                case 'l':
                case 'm':
                case 'o':
                case 'p':
                case 'q':
                case 's':
                  goto LABEL_169;
                case 'n':
                  __s[v40] = 10;
                  goto LABEL_159;
                case 'r':
                  LOBYTE(v63) = 13;
                  goto LABEL_158;
                case 't':
                  LOBYTE(v63) = 9;
                  goto LABEL_158;
                default:
                  if (v63 == 34) {
                    goto LABEL_158;
                  }
                  if (v63 == 39)
                  {
                    __s[v40] = 39;
                    goto LABEL_159;
                  }
LABEL_169:
                  if (v63 == 120)
                  {
                    int v67 = 8;
                  }
                  else
                  {
                    if ((v63 & 0xF8) != 0x30) {
                      goto LABEL_153;
                    }
                    int v67 = 16;
                  }
                  unsigned __int8 v68 = v9[5];
                  v9[5] = 0;
                  if (v63 == 120) {
                    std::string v69 = v9 + 3;
                  }
                  else {
                    std::string v69 = v9 + 2;
                  }
                  char v70 = strtol(v69, &__endptr, v67);
                  v9[5] = v68;
                  if (__endptr == v69) {
                    char v71 = 120;
                  }
                  else {
                    char v71 = v70;
                  }
                  if (__endptr != v69) {
                    int64_t v62 = __endptr;
                  }
                  __s[v40++] = v71;
                  break;
              }
              goto LABEL_153;
            }
            if (v63 == 34)
            {
              unsigned __int8 v34 = v9 + 2;
              goto LABEL_185;
            }
          }
LABEL_158:
          __s[v40] = v63;
LABEL_159:
          ++v40;
LABEL_153:
          int v9 = v62;
          if (v40 >= 4096)
          {
LABEL_184:
            sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "Too long string literal");
            sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1669);
          }
        }
      case '#':
      case '$':
      case '%':
      case '&':
      case '(':
      case ')':
      case '*':
      case ',':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_138;
      case '+':
      case '-':
        if (v12 == 46 || v12 - 48 < 0xA) {
          goto LABEL_80;
        }
        goto LABEL_138;
      case '.':
        if (v12 - 48 >= 0xA && v12 - 97 >= 0x1A && v12 - 65 > 0x19) {
          goto LABEL_148;
        }
        goto LABEL_80;
      case '[':
        goto LABEL_112;
      default:
        if (v11 == 123)
        {
LABEL_112:
          BOOL v46 = v11 == 91;
          if ((v5 & 8) != 0) {
            uint64_t v3 = v3;
          }
          else {
            uint64_t v3 = (v3 + 1);
          }
          if (v11 == 123) {
            uint64_t v47 = 14;
          }
          else {
            uint64_t v47 = 13;
          }
          int v48 = v47 & 7;
          sub_1002BF768(v10, v48 | (16 * (v7[1] != 0)), v7);
          if (v46) {
            int v49 = 93;
          }
          else {
            int v49 = 125;
          }
          int v95 = v49;
          uint64_t v50 = v9 + 1;
          for (BOOL i = 1; ; BOOL i = i && (*(_DWORD *)v96 & 7u) < 5)
          {
            int v96 = 0;
            std::string::size_type v52 = sub_1002C0664(v10, v50, v3);
            unsigned __int8 v34 = v52;
            int v53 = *v52;
            if ((v53 | 0x20) == 0x7D) {
              break;
            }
            if (*(_DWORD *)(v7[2] + 40))
            {
              if (v53 != 44)
              {
                sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "Missing , between the elements");
                sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1700);
              }
              unsigned __int8 v34 = sub_1002C0664(v10, v52 + 1, v3);
            }
            if (v48 == 6)
            {
              unsigned int v54 = sub_1002C2280(v10, v34, (uint64_t)v7, (uint64_t *)&v96);
              unsigned __int8 v34 = sub_1002C0664(v10, v54, v3);
              int v55 = v96;
              if (!v96) {
                goto LABEL_133;
              }
            }
            else
            {
              if (*v34 == 93) {
                goto LABEL_144;
              }
              int v55 = sub_10025BB1C(v7[2], 0);
              int v96 = v55;
              if (!v55)
              {
LABEL_133:
                uint64_t v100 = 0;
                uint64_t v99 = 0;
                *(_DWORD *)sub_1002D19D8(&v99, 4) = 1835363429;
                sub_1002D2278(-215, &v99, "icvYMLParseValue", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1715);
              }
            }
            uint64_t v50 = (char *)sub_1002C08F0(v10, v34, v55, v47, v3);
            if (v48 == 6) {
              *(_DWORD *)v96 |= 0x40u;
            }
          }
          if (v95 != v53)
          {
            sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "The wrong closing bracket");
            sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1692);
          }
          unsigned __int8 v34 = v52 + 1;
LABEL_144:
          BOOL v58 = !i;
LABEL_236:
          if (v58) {
            int v89 = 0;
          }
          else {
            int v89 = 256;
          }
          *(_DWORD *)v7[2] |= v89;
          return (std::string *)v34;
        }
LABEL_138:
        if ((v5 & 8) == 0 && v11 == 45)
        {
          int v56 = 0;
          uint64_t v57 = 5;
LABEL_215:
          sub_1002BF768(v10, v57 | (16 * (v7[1] != 0)), v7);
          unint64_t v77 = (unsigned __int8 *)&v9[-*(void *)(v10 + 128)];
          uint64_t v78 = (v77 + 1);
          long long v79 = (char *)(int)v77;
          LOBYTE(v80) = 1;
          unsigned __int8 v34 = v9;
          while (1)
          {
            int v96 = 0;
            if (v56)
            {
              uint64_t v82 = sub_1002C2280(v10, v34, (uint64_t)v7, (uint64_t *)&v96);
              if (!v96) {
                goto LABEL_226;
              }
            }
            else
            {
              int v83 = *v34;
              uint64_t v82 = v34 + 1;
              if (v83 != 45)
              {
                sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "Block sequence elements must be preceded with '-'");
                sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1785);
              }
              int v96 = sub_10025BB1C(v7[2], 0);
              if (!v96)
              {
LABEL_226:
                uint64_t v100 = 0;
                uint64_t v99 = 0;
                *(_DWORD *)sub_1002D19D8(&v99, 4) = 1835363429;
                sub_1002D2278(-215, &v99, "icvYMLParseValue", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1789);
              }
            }
            uint64_t v84 = sub_1002C0664(v10, v82, v78);
            int v85 = v96;
            int v86 = (char *)sub_1002C08F0(v10, v84, v96, v57, v78);
            if (v56) {
              *(_DWORD *)v85 |= 0x40u;
            }
            BOOL v80 = v80 && (*(_DWORD *)v85 & 7u) < 5;
            uint64_t v87 = sub_1002C0664(v10, v86, 0);
            unsigned __int8 v34 = v87;
            long long v88 = &v87[-*(void *)(v10 + 128)];
            if (v88 != v79) {
              break;
            }
            if (*(_WORD *)v87 == 11822 && v87[2] == 46) {
              goto LABEL_235;
            }
          }
          if ((uint64_t)v88 >= (uint64_t)v79)
          {
            sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "Incorrect indentation");
            sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1802);
          }
LABEL_235:
          BOOL v58 = !v80;
          goto LABEL_236;
        }
LABEL_148:
        if ((v5 & 8) != 0)
        {
          __endptr = v9;
          unint64_t v59 = v9 - 1;
          unsigned int v60 = *v9;
          uint64_t v61 = v9;
          if (v60 <= 0x1F) {
            goto LABEL_208;
          }
          goto LABEL_192;
        }
        if (v11 == 62 || v11 == 124) {
          sub_1002ACE70(*(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "icvYMLParseValue", "Multi-line text literals are not supported", 1736);
        }
        if (v11 == 63) {
          sub_1002ACE70(*(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "icvYMLParseValue", "Complex keys are not supported", 1734);
        }
        if (v13 != 3)
        {
          uint64_t v73 = v9;
          do
          {
            __endptr = v73;
            unsigned int v76 = *v73++;
            unsigned int v60 = v76;
          }
          while (v76 >= 0x20 && v60 != 58);
          goto LABEL_207;
        }
        __endptr = v9;
        unsigned int v60 = *v9;
        if (v60 > 0x1F) {
          goto LABEL_201;
        }
        unint64_t v59 = v9 - 1;
        break;
    }
    goto LABEL_211;
  }
LABEL_80:
  if (v11 == 45 || v11 == 43) {
    unsigned __int8 v36 = v9 + 1;
  }
  else {
    unsigned __int8 v36 = v9;
  }
  do
  {
    __endptr = v36;
    int v38 = *v36++;
    int v37 = v38;
  }
  while ((v38 - 48) < 0xA);
  if (v37 == 101 || v37 == 46)
  {
LABEL_89:
    double v39 = sub_1002C01BC(v10, v9, &__endptr);
    *(_DWORD *)size_t v7 = 2;
    *((double *)v7 + 2) = v39;
    unsigned __int8 v34 = __endptr;
    if (!__endptr)
    {
LABEL_96:
      sprintf((char *)&v99, "%s(%d): %s", *(const char **)(v10 + 96), *(_DWORD *)(v10 + 148), "Invalid numeric value (inconsistent explicit type specification?)");
      sub_1002D2D20(-212, "icvYMLParseValue", (char *)&v99, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1601);
    }
    goto LABEL_95;
  }
LABEL_94:
  int v41 = strtol(v9, &__endptr, 0);
  *(_DWORD *)size_t v7 = 1;
  *((_DWORD *)v7 + 4) = v41;
  unsigned __int8 v34 = __endptr;
  if (!__endptr) {
    goto LABEL_96;
  }
LABEL_95:
  if (v34 == v9) {
    goto LABEL_96;
  }
  return (std::string *)v34;
}

void sub_1002C1804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002C19A0(uint64_t a1, char *a2, int a3, uint64_t *a4)
{
  size_t v7 = sub_1002C0664(a1, a2, 0);
  double v8 = (unsigned __int8 *)v7;
  if (*(_DWORD *)(a1 + 152)) {
    return (std::string *)v7;
  }
  int v9 = &v7[-*(void *)(a1 + 128)];
  if (v9 != (char *)a3) {
    return (std::string *)v7;
  }
  uint64_t v10 = 0;
  do
    unsigned int v11 = v7[v10++];
  while (v11 > 0x1F);
  if (!v11)
  {
    sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected end of line");
    sub_1002D2D20(-212, "icvYMLGetMultilineStringContent", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1345);
  }
  unint64_t v12 = v10 - 1;
  int v13 = (std::string *)&v7[v10 - 1];
  if (v10 != 1)
  {
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    if (v12 <= 0x1F)
    {
      sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unrecognized Base64 header");
      sub_1002D2D20(-212, "icvYMLParseBase64", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1365);
    }
    unint64_t v14 = operator new(0x19uLL);
    v72.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 25);
    v72.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 25);
    v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    unsigned __int8 v15 = byte_100404BC2[v8[1]];
    unsigned int v16 = byte_100404BC2[v8[2]];
    unsigned __int8 v17 = byte_100404BC2[v8[3]];
    *unint64_t v14 = (4 * byte_100404BC2[*v8]) | (v15 >> 4) & 3;
    v14[1] = (16 * v15) | (v16 >> 2) & 0xF;
    uint64_t v14[2] = v17 | ((_BYTE)v16 << 6);
    unsigned __int8 v18 = byte_100404BC2[v8[5]];
    unsigned int v19 = byte_100404BC2[v8[6]];
    unsigned __int8 v20 = byte_100404BC2[v8[7]];
    v14[3] = (4 * byte_100404BC2[v8[4]]) | (v18 >> 4) & 3;
    v14[4] = (16 * v18) | (v19 >> 2) & 0xF;
    v14[5] = v20 | ((_BYTE)v19 << 6);
    unsigned __int8 v21 = byte_100404BC2[v8[9]];
    unsigned int v22 = byte_100404BC2[v8[10]];
    unsigned __int8 v23 = byte_100404BC2[v8[11]];
    v14[6] = (4 * byte_100404BC2[v8[8]]) | (v21 >> 4) & 3;
    v14[7] = (16 * v21) | (v22 >> 2) & 0xF;
    unsigned char v14[8] = v23 | ((_BYTE)v22 << 6);
    unsigned __int8 v24 = byte_100404BC2[v8[13]];
    unsigned int v25 = byte_100404BC2[v8[14]];
    unsigned __int8 v26 = byte_100404BC2[v8[15]];
    v14[9] = (4 * byte_100404BC2[v8[12]]) | (v24 >> 4) & 3;
    v14[10] = (16 * v24) | (v25 >> 2) & 0xF;
    v14[11] = v26 | ((_BYTE)v25 << 6);
    unsigned __int8 v27 = byte_100404BC2[v8[17]];
    unsigned int v28 = byte_100404BC2[v8[18]];
    unsigned __int8 v29 = byte_100404BC2[v8[19]];
    uint64_t v14[12] = (4 * byte_100404BC2[v8[16]]) | (v27 >> 4) & 3;
    v14[13] = (16 * v27) | (v28 >> 2) & 0xF;
    v14[14] = v29 | ((_BYTE)v28 << 6);
    unsigned __int8 v30 = byte_100404BC2[v8[21]];
    unsigned int v31 = byte_100404BC2[v8[22]];
    unsigned __int8 v32 = byte_100404BC2[v8[23]];
    unsigned char v14[15] = (4 * byte_100404BC2[v8[20]]) | (v30 >> 4) & 3;
    v14[16] = (16 * v30) | (v31 >> 2) & 0xF;
    v14[17] = v32 | ((_BYTE)v31 << 6);
    unsigned __int8 v33 = byte_100404BC2[v8[25]];
    unsigned int v34 = byte_100404BC2[v8[26]];
    unsigned __int8 v35 = byte_100404BC2[v8[27]];
    v14[18] = (4 * byte_100404BC2[v8[24]]) | (v33 >> 4) & 3;
    v14[19] = (16 * v33) | (v34 >> 2) & 0xF;
    v14[20] = v35 | ((_BYTE)v34 << 6);
    unsigned __int8 v36 = byte_100404BC2[v8[29]];
    unsigned int v37 = byte_100404BC2[v8[30]];
    unsigned __int8 v38 = byte_100404BC2[v8[31]];
    v14[21] = (4 * byte_100404BC2[v8[28]]) | (v36 >> 4) & 3;
    v14[22] = (16 * v36) | (v37 >> 2) & 0xF;
    v14[23] = v38 | ((_BYTE)v37 << 6);
    v14[24] = 0;
    if (!sub_1002BBA18((const char **)&v72.__r_.__value_.__l.__data_, (uint64_t)&v73)) {
      goto LABEL_14;
    }
    uint64_t v39 = HIBYTE(v75);
    if (v75 < 0) {
      uint64_t v39 = v74;
    }
    if (!v39)
    {
LABEL_14:
      sub_1002D2D20(-212, "icvYMLParseBase64", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1370);
    }
    operator delete(v14);
    memset(&v72, 0, sizeof(v72));
    std::string::reserve(&v72, 0x20000uLL);
    if (v12 >= 0x21)
    {
      signed int v40 = (std::string *)(v8 + 32);
      while (1)
      {
        sub_1002C0400(&v72, v40, v13);
        unsigned int v42 = sub_1002C0664(a1, (char *)v13, 0);
        signed int v40 = (std::string *)v42;
        if (*(_DWORD *)(a1 + 152) || &v42[-*(void *)(a1 + 128)] != v9) {
          break;
        }
        int v13 = (std::string *)(v42 - 1);
        do
        {
          unsigned int v44 = v13->__r_.__value_.__s.__data_[1];
          int v13 = (std::string *)((char *)v13 + 1);
          unsigned int v43 = v44;
        }
        while (v44 > 0x1F);
        if (!v43)
        {
          sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected end of line");
          sub_1002D2D20(-212, "icvYMLGetMultilineStringContent", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1345);
        }
        if (v42 >= (char *)v13) {
          goto LABEL_27;
        }
      }
      int v13 = (std::string *)v42;
    }
LABEL_27:
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v72.__r_.__value_.__l.__size_;
      if (!v72.__r_.__value_.__l.__size_) {
        goto LABEL_33;
      }
      BOOL v46 = (std::string *)v72.__r_.__value_.__r.__words[0];
      if (!v72.__r_.__value_.__r.__words[0]) {
        goto LABEL_33;
      }
    }
    else
    {
      if (!*((unsigned char *)&v72.__r_.__value_.__s + 23)) {
        goto LABEL_33;
      }
      std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      BOOL v46 = &v72;
    }
    if ((size & 3) != 0) {
      goto LABEL_33;
    }
    unsigned int v65 = (std::string *)((char *)v46 + size);
    uint64_t v66 = (char *)&v65[-1].__r_.__value_.__r.__words[2] + 7;
    if (*((unsigned char *)&v65[-1].__r_.__value_.__s + 23) == 61)
    {
      int v67 = v65[-1].__r_.__value_.__s.__data_[22];
      unsigned int v65 = (std::string *)((char *)v65 - 2);
      if (v67 != 61) {
        unsigned int v65 = (std::string *)v66;
      }
    }
    if (v46 < v65)
    {
      int64_t v68 = (char *)v65 - (char *)v46;
      while (1)
      {
        uint64_t v69 = v46->__r_.__value_.__s.__data_[0];
        if (v69 > 0x7E) {
          break;
        }
        if (v69 != 65 && byte_100404BC2[v69] == 0) {
          break;
        }
        BOOL v46 = (std::string *)((char *)v46 + 1);
        if (!--v68) {
          goto LABEL_34;
        }
      }
LABEL_33:
      sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid Base64 data.");
      sub_1002D2D20(-212, "icvYMLParseBase64", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1386);
    }
LABEL_34:
    int v47 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v72.__r_.__value_.__l.__size_;
    }
    HIWORD(v71) = 0;
    uint64_t v49 = 3 * (v48 >> 2);
    size_t v50 = v49 + 1;
    if (v49 + 1 < 0) {
      sub_10000B98C();
    }
    int v51 = (char *)operator new(v49 + 1);
    std::string::size_type v52 = &v51[v50];
    char v71 = &v51[v50];
    bzero(v51, v50);
    if (v47 >= 0) {
      int v53 = &v72;
    }
    else {
      int v53 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    int v54 = 3 * (v48 >> 2) + 1;
    std::string::size_type v55 = v48 - 1;
    do
    {
      int v56 = v53->__r_.__value_.__s.__data_[v55];
      --v54;
      --v55;
    }
    while (v56 == 61);
    *(void *)unsigned int v76 = v51;
    unint64_t v77 = v52;
    uint64_t v57 = operator new(0x78uLL);
    long long v79 = (char *)v57 + 120;
    BOOL v80 = (char *)v57 + 120;
    *uint64_t v57 = 0u;
    v57[1] = 0u;
    v57[2] = 0u;
    void v57[3] = 0u;
    v57[4] = 0u;
    v57[5] = 0u;
    v57[6] = 0u;
    *((void *)v57 + 14) = 0;
    uint64_t v78 = v57;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    BOOL v58 = operator new(0xA1uLL);
    *BOOL v58 = 0u;
    v58[1] = 0u;
    v58[2] = 0u;
    v58[3] = 0u;
    v58[4] = 0u;
    v58[5] = 0u;
    v58[6] = 0u;
    v58[7] = 0u;
    v58[8] = 0u;
    v58[9] = 0u;
    *((unsigned char *)v58 + 160) = 0;
    *(void *)&long long v83 = (char *)v58 + 161;
    *((void *)&v83 + 1) = (char *)v58 + 161;
    *(void *)&long long v81 = v58;
    *((void *)&v81 + 1) = v58;
    *(void *)&long long v82 = (char *)v58 + 120;
    *((void *)&v82 + 1) = v58;
    sub_1002BC514((uint64_t)v76, (unint64_t)v53, (unint64_t)v53 + v48);
    sub_1002BC1F8((uint64_t)v76);
    if (*((void *)&v81 + 1) != (void)v81) {
      sub_1002BC1F8((uint64_t)v76);
    }
    if (*((void *)&v82 + 1))
    {
      *(void *)&long long v83 = *((void *)&v82 + 1);
      operator delete(*((void **)&v82 + 1));
    }
    if (v78)
    {
      long long v79 = v78;
      operator delete(v78);
    }
    if (v75 >= 0) {
      unint64_t v59 = (const char *)&v73;
    }
    else {
      unint64_t v59 = (const char *)v73;
    }
    int v60 = sub_1002B5860(v59);
    int v61 = v54 / v60;
    if (v54 % v60)
    {
      sprintf(v76, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Byte size not match elememt size");
      sub_1002D2D20(-212, "icvYMLParseBase64", v76, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1404);
    }
    *(_DWORD *)a4 = 0;
    int64_t v62 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(a1 + 16));
    uint64_t v63 = (uint64_t)v62;
    if ((*(unsigned char *)a4 & 7) != 0) {
      sub_10025BB1C((uint64_t)v62, a4);
    }
    a4[2] = v63;
    *(_DWORD *)a4 = 13;
    sub_10025A9B0(v63, 8);
    if (v75 >= 0) {
      unsigned int v64 = (char *)&v73;
    }
    else {
      unsigned int v64 = (char *)v73;
    }
    sub_1002BCE14((uint64_t)v51, v61, v64, a4[2]);
    if (*(_DWORD *)(a1 + 152)) {
      int v13 = *(std::string **)(a1 + 128);
    }
    if (v51) {
      operator delete(v51);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75) < 0) {
      operator delete(v73);
    }
  }
  return v13;
}

void sub_1002C21CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002C2280(uint64_t a1, char *__s, uint64_t a3, uint64_t *a4)
{
  if (*__s == 45)
  {
    sprintf(v14, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Key may not start with '-'");
    sub_1002D2D20(-212, "icvYMLParseKey", v14, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1432);
  }
  uint64_t v8 = 0;
  do
    unsigned int v9 = __s[v8++];
  while (v9 >= 0x20 && v9 != 58);
  if (v9 != 58)
  {
    sprintf(v14, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Missing ':'");
    sub_1002D2D20(-212, "icvYMLParseKey", v14, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1438);
  }
  uint64_t v10 = v8;
  do
    int v11 = __s[v10-- - 2];
  while (v11 == 32);
  if (!v10)
  {
    sprintf(v14, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "An empty key");
    sub_1002D2D20(-212, "icvYMLParseKey", v14, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 1446);
  }
  unint64_t v12 = (_DWORD *)sub_1002AC864(a1, __s, v10, 1);
  *a4 = sub_1002ACA04(a1, a3, v12, 1);
  return &__s[v8];
}

char *sub_1002C244C(uint64_t a1, char *a2)
{
  while (1)
  {
    uint64_t v5 = *a2;
    if (v5 > 0x2F) {
      break;
    }
    if (((1 << *a2) & 0x2401) != 0)
    {
      a2 = sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
      BOOL v4 = a2 == 0;
      goto LABEL_3;
    }
    if (((1 << *a2) & 0x100000200) != 0)
    {
      BOOL v4 = 0;
      ++a2;
      goto LABEL_3;
    }
    if (v5 != 47) {
      break;
    }
    int v7 = *++a2;
    int v6 = v7;
    if (v7)
    {
      if (v6 != 42) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v8 = sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
      if (!v8) {
        goto LABEL_34;
      }
      a2 = v8;
      int v6 = *v8;
      if (v6 != 42)
      {
LABEL_11:
        if (v6 != 47)
        {
          sprintf(v13, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Not supported escape character");
          sub_1002D2D20(-212, "icvJSONSkipSpaces", v13, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3335);
        }
        while (1)
        {
          if (v6)
          {
            if (v6 == 10 || v6 == 13)
            {
              BOOL v4 = 0;
              goto LABEL_3;
            }
            ++a2;
          }
          else
          {
            a2 = sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
            if (!a2) {
              goto LABEL_34;
            }
          }
          int v6 = *a2;
        }
      }
    }
    unsigned int v9 = a2 + 1;
    do
    {
      while (1)
      {
        while (*v9 != 42)
        {
          if (*v9)
          {
            ++v9;
          }
          else
          {
            unsigned int v9 = sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
            if (!v9) {
              goto LABEL_34;
            }
          }
        }
        int v11 = *++v9;
        int v10 = v11;
        if (!v11) {
          break;
        }
        if (v10 == 47) {
          goto LABEL_33;
        }
      }
      unsigned int v9 = sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
      if (!v9) {
        goto LABEL_34;
      }
    }
    while (*v9 != 47);
LABEL_33:
    BOOL v4 = 0;
    a2 = v9 + 1;
LABEL_3:
    if (v4)
    {
LABEL_34:
      a2 = *(char **)(a1 + 128);
      *a2 = 0;
      *(_DWORD *)(a1 + 152) = 1;
      return a2;
    }
  }
  if (*a2 <= 0x1Fu)
  {
    sprintf(v13, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid character in the stream");
    sub_1002D2D20(-212, "icvJSONSkipSpaces", v13, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3353);
  }
  return a2;
}

char *sub_1002C26F4(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (*a2 != 123)
  {
    sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'{' - left-brace of map is missing");
    sub_1002D2D20(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3736);
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_1002BF768(a1, 6, (void *)a3);
  int v6 = sub_1002C244C(a1, a2 + 1);
  if (!v6)
  {
LABEL_35:
    sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "ptr is NULL");
    sub_1002D2D20(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3800);
  }
  int v7 = v6;
  while (!*(_DWORD *)(a1 + 152))
  {
    if (*v7 == 34)
    {
      unsigned __int8 v21 = 0;
      uint64_t v8 = sub_1002C2DD8(a1, (unint64_t)v7, a3, (uint64_t *)&v21);
      if (!v8) {
        goto LABEL_35;
      }
      int v7 = v8;
      if (*(_DWORD *)(a1 + 152)) {
        break;
      }
      unsigned int v9 = sub_1002C244C(a1, v8);
      if (!v9) {
        goto LABEL_35;
      }
      int v7 = v9;
      if (*(_DWORD *)(a1 + 152)) {
        break;
      }
      int v10 = v21;
      if (v21)
      {
        int v11 = *v9;
        if (v11 == 123)
        {
          unint64_t v12 = (char *)sub_1002C26F4(a1, v9, v21);
        }
        else if (v11 == 91)
        {
          unint64_t v12 = sub_1002C2AEC(a1, v9, v21);
        }
        else
        {
          unint64_t v12 = sub_1002C306C(a1, v9, v21);
        }
        *(_DWORD *)v10 |= 0x40u;
        unsigned int v16 = sub_1002C244C(a1, v12);
        if (!v16) {
          goto LABEL_35;
        }
      }
      else
      {
        int v13 = sub_1002C306C(a1, v9, v19);
        if ((v19[0] & 7) != 3)
        {
          sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "\"type_id\" should be of type string");
          sub_1002D2D20(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3772);
        }
        unint64_t v14 = __s2;
        if (__s2 && (uint64_t v15 = qword_1004F8CE8) != 0)
        {
          while (strcmp(*(const char **)(v15 + 24), v14))
          {
            uint64_t v15 = *(void *)(v15 + 16);
            if (!v15) {
              goto LABEL_22;
            }
          }
          *(void *)(a3 + 8) = v15;
          *(_DWORD *)a3 |= 0x10u;
          unsigned int v16 = sub_1002C244C(a1, v13);
          if (!v16) {
            goto LABEL_35;
          }
        }
        else
        {
LABEL_22:
          *(void *)(a3 + 8) = 0;
          unsigned int v16 = sub_1002C244C(a1, v13);
          if (!v16) {
            goto LABEL_35;
          }
        }
      }
    }
    else
    {
      unsigned int v16 = sub_1002C244C(a1, v7);
      if (!v16) {
        goto LABEL_35;
      }
    }
    int v7 = v16;
    if (*(_DWORD *)(a1 + 152)) {
      break;
    }
    int v17 = *v16;
    if (v17 != 44)
    {
      if (v17 != 125)
      {
        sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected character");
        sub_1002D2D20(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3796);
      }
      return v7 + 1;
    }
    int v7 = sub_1002C244C(a1, v16 + 1);
    if (!v7) {
      goto LABEL_35;
    }
  }
  if (*v7 != 125)
  {
    sprintf(v22, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'}' - right-brace of map is missing");
    sub_1002D2D20(-212, "icvJSONParseMap", v22, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3803);
  }
  return v7 + 1;
}

char *sub_1002C2AEC(uint64_t a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2 != 91)
  {
    sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'[' - left-brace of seq is missing");
    sub_1002D2D20(-212, "icvJSONParseSeq", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3682);
  }
  uint64_t v5 = a2 + 1;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  int v6 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(a1 + 16));
  uint64_t v7 = (uint64_t)v6;
  if ((*(unsigned char *)a3 & 7) != 0) {
    sub_10025BB1C((uint64_t)v6, a3);
  }
  a3[2] = v7;
  *(_DWORD *)a3 = 5;
  sub_10025A9B0(v7, 8);
  uint64_t v8 = sub_1002C244C(a1, v5);
  if (!v8)
  {
LABEL_21:
    sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "ptr is NULL");
    sub_1002D2D20(-212, "icvJSONParseSeq", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3720);
  }
  while (!*(_DWORD *)(a1 + 152))
  {
    if (*v8 != 93)
    {
      unsigned int v9 = (uint64_t *)sub_10025BB1C(a3[2], 0);
      int v10 = *v8;
      if (v10 == 123)
      {
        int v11 = (char *)sub_1002C26F4(a1, v8, v9);
      }
      else if (v10 == 91)
      {
        int v11 = (char *)sub_1002C2AEC(a1, v8, v9);
      }
      else
      {
        int v11 = sub_1002C306C(a1, v8, v9);
      }
      uint64_t v8 = v11;
    }
    unint64_t v12 = sub_1002C244C(a1, v8);
    uint64_t v8 = v12;
    if (!v12) {
      goto LABEL_21;
    }
    if (*(_DWORD *)(a1 + 152)) {
      break;
    }
    int v13 = *v12;
    if (v13 != 44)
    {
      if (v13 != 93)
      {
        sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected character");
        sub_1002D2D20(-212, "icvJSONParseSeq", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3716);
      }
      return v8 + 1;
    }
    uint64_t v8 = sub_1002C244C(a1, v12 + 1);
    if (!v8) {
      goto LABEL_21;
    }
  }
  if (*v8 != 93)
  {
    sprintf(v15, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "']' - right-brace of seq is missing");
    sub_1002D2D20(-212, "icvJSONParseSeq", v15, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3723);
  }
  return v8 + 1;
}

char *sub_1002C2DD8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)a2 != 34)
  {
    sprintf(v18, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Key must start with '\"'");
    sub_1002D2D20(-212, "icvJSONParseKey", v18, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3379);
  }
  uint64_t v8 = -8;
  do
    unsigned int v9 = *(unsigned __int8 *)(a2 + v8++ + 9);
  while (v9 >= 0x20 && v9 != 34);
  unint64_t v10 = a2 + v8;
  if (v9 != 34)
  {
    sprintf(v18, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Key must end with '\"'");
    sub_1002D2D20(-212, "icvJSONParseKey", v18, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3388);
  }
  uint64_t result = sub_1002C244C(a1, (char *)(v10 + 9));
  if (result)
  {
    if (*(_DWORD *)(a1 + 152))
    {
      return 0;
    }
    else
    {
      unint64_t v12 = result;
      unint64_t v13 = v10 + 7;
      if (*result != 58)
      {
        sprintf(v18, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Missing ':' between key and value");
        sub_1002D2D20(-212, "icvJSONParseKey", v18, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3397);
      }
      if (v13 <= a2)
      {
        sprintf(v18, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Key is empty");
        sub_1002D2D20(-212, "icvJSONParseKey", v18, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3401);
      }
      unint64_t v14 = (char *)(a2 + 1);
      if (!v8 && (*(_DWORD *)v14 == 1701869940 ? (BOOL v15 = *(_DWORD *)(a2 + 4) == 1684627301) : (BOOL v15 = 0), v15))
      {
        uint64_t v17 = 0;
      }
      else
      {
        unsigned int v16 = (_DWORD *)sub_1002AC864(a1, v14, (int)v8 + 7, 1);
        uint64_t v17 = sub_1002ACA04(a1, a3, v16, 1);
      }
      *a4 = v17;
      return v12 + 1;
    }
  }
  return result;
}

char *sub_1002C306C(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v5 = sub_1002C244C(a1, a2);
  unint64_t v6 = (unint64_t)v5;
  __endptr = v5;
  if (!v5 || *(_DWORD *)(a1 + 152))
  {
    sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unexpected End-Of-File");
    sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3421);
  }
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  int v7 = *v5;
  if (v7 == 34)
  {
    unint64_t v8 = 0;
    unsigned int v9 = (std::string *)(v5 + 1);
    while (1)
    {
      int v10 = v9->__r_.__value_.__s.__data_[v8];
      if ((v10 - 48) >= 0xA && (v10 & 0xFFFFFFDF) - 65 >= 0x1A) {
        break;
      }
      if (v8 > 9) {
        goto LABEL_19;
      }
LABEL_7:
      ++v8;
    }
    if (v10 == 36 && v8 < 0xA) {
      goto LABEL_7;
    }
    if (v8 < 8) {
      goto LABEL_20;
    }
LABEL_19:
    if (v9->__r_.__value_.__r.__words[0] != 0x2434366573616224)
    {
LABEL_20:
      memset(&v93, 0, sizeof(v93));
      std::string::reserve(&v93, 0x20000uLL);
      __endptr = (char *)(v6 + 1);
      while (1)
      {
        unint64_t v13 = v9;
LABEL_22:
        switch(v13->__r_.__value_.__s.__data_[0])
        {
          case 0:
            sub_1002C0400(&v93, v9, v13);
            unsigned int v9 = (std::string *)sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
            __endptr = (char *)v9;
            if (!v9)
            {
              sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
              sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3582);
            }
            continue;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xB:
          case 0xC:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
            goto LABEL_25;
          case 0xA:
          case 0xD:
            sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
            sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3597);
          case 0x22:
            sub_1002C0400(&v93, v9, v13);
            if (*__endptr != 34)
            {
              sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
              sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3609);
            }
            ++__endptr;
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned __int8 v18 = &v93;
            }
            else {
              unsigned __int8 v18 = (std::string *)v93.__r_.__value_.__r.__words[0];
            }
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v19 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
            }
            else {
              unsigned int v19 = v93.__r_.__value_.__r.__words[1];
            }
            a3[2] = sub_10025A774(*(void *)(a1 + 16), (char *)v18, v19);
            a3[3] = v20;
            *(_DWORD *)a3 = 3;
            goto LABEL_60;
          default:
            if (v13->__r_.__value_.__s.__data_[0] != 92)
            {
LABEL_25:
              unint64_t v13 = (std::string *)((char *)v13 + 1);
              __endptr = (char *)v13;
              goto LABEL_22;
            }
            sub_1002C0400(&v93, v9, v13);
            unint64_t v14 = __endptr;
            std::string::value_type v15 = __endptr[1];
            switch(v15)
            {
              case '""':
              case '\'':
              case '\\':
                break;
              case 'b':
                std::string::value_type v15 = 8;
                break;
              case 'f':
                std::string::value_type v15 = 12;
                break;
              case 'n':
                std::string::value_type v15 = 10;
                break;
              case 'r':
                std::string::value_type v15 = 13;
                break;
              case 't':
                std::string::value_type v15 = 9;
                break;
              case 'u':
                sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\\uXXXX' currently not supported");
                sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3568);
              default:
                sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid escape character");
                sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3569);
            }
            std::string::append(&v93, 1uLL, v15);
            unsigned int v9 = (std::string *)(v14 + 2);
            __endptr = (char *)v9;
            break;
        }
      }
    }
    unsigned __int8 v21 = (std::string *)(v5 + 9);
    __endptr = v5 + 9;
    memset(&v93, 0, sizeof(v93));
    std::string::reserve(&v93, 0x20000uLL);
    while (2)
    {
      unsigned int v22 = v21;
LABEL_64:
      switch(v22->__r_.__value_.__s.__data_[0])
      {
        case 0:
          sub_1002C0400(&v93, v21, v22);
          unsigned __int8 v21 = (std::string *)sub_1002AF448((void *)a1, *(char **)(a1 + 128), (char *)(*(_DWORD *)(a1 + 136) - *(void *)(a1 + 128)));
          __endptr = (char *)v21;
          if (!v21)
          {
            sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
            sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3451);
          }
          continue;
        case 0xA:
        case 0xD:
          sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
          sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3466);
        case 0x22:
          sub_1002C0400(&v93, v21, v22);
          if (*__endptr != 34)
          {
            sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "'\"' - right-quote of string is missing");
            sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3478);
          }
          ++__endptr;
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type size = v93.__r_.__value_.__l.__size_;
            if (v93.__r_.__value_.__l.__size_ > 0x1F)
            {
              unsigned __int8 v27 = (unsigned __int8 *)v93.__r_.__value_.__r.__words[0];
LABEL_88:
              uint64_t v90 = 0;
              uint64_t v91 = 0;
              uint64_t v92 = 0;
              unsigned int v28 = operator new(0x19uLL);
              unsigned __int8 v29 = v28;
              long long v88 = v28 + 25;
              int v89 = v28 + 25;
              memset(v28, 32, 25);
              uint64_t v87 = v28;
              if (v27)
              {
                unsigned __int8 v30 = byte_100404BC2[v27[1]];
                unsigned int v31 = byte_100404BC2[v27[2]];
                unsigned __int8 v32 = byte_100404BC2[v27[3]];
                unsigned char *v28 = (4 * byte_100404BC2[*v27]) | (v30 >> 4) & 3;
                v28[1] = (16 * v30) | (v31 >> 2) & 0xF;
                v28[2] = v32 | ((_BYTE)v31 << 6);
                unsigned __int8 v33 = byte_100404BC2[v27[5]];
                unsigned int v34 = byte_100404BC2[v27[6]];
                unsigned __int8 v35 = byte_100404BC2[v27[7]];
                v28[3] = (4 * byte_100404BC2[v27[4]]) | (v33 >> 4) & 3;
                _OWORD v28[4] = (16 * v33) | (v34 >> 2) & 0xF;
                v28[5] = v35 | ((_BYTE)v34 << 6);
                unsigned __int8 v36 = byte_100404BC2[v27[9]];
                unsigned int v37 = byte_100404BC2[v27[10]];
                unsigned __int8 v38 = byte_100404BC2[v27[11]];
                v28[6] = (4 * byte_100404BC2[v27[8]]) | (v36 >> 4) & 3;
                v28[7] = (16 * v36) | (v37 >> 2) & 0xF;
                v28[8] = v38 | ((_BYTE)v37 << 6);
                unsigned __int8 v39 = byte_100404BC2[v27[13]];
                unsigned int v40 = byte_100404BC2[v27[14]];
                unsigned __int8 v41 = byte_100404BC2[v27[15]];
                _OWORD v28[9] = (4 * byte_100404BC2[v27[12]]) | (v39 >> 4) & 3;
                v28[10] = (16 * v39) | (v40 >> 2) & 0xF;
                v28[11] = v41 | ((_BYTE)v40 << 6);
                unsigned __int8 v42 = byte_100404BC2[v27[17]];
                unsigned int v43 = byte_100404BC2[v27[18]];
                unsigned __int8 v44 = byte_100404BC2[v27[19]];
                v28[12] = (4 * byte_100404BC2[v27[16]]) | (v42 >> 4) & 3;
                v28[13] = (16 * v42) | (v43 >> 2) & 0xF;
                v28[14] = v44 | ((_BYTE)v43 << 6);
                unsigned __int8 v45 = byte_100404BC2[v27[21]];
                unsigned int v46 = byte_100404BC2[v27[22]];
                unsigned __int8 v47 = byte_100404BC2[v27[23]];
                v28[15] = (4 * byte_100404BC2[v27[20]]) | (v45 >> 4) & 3;
                v28[16] = (16 * v45) | (v46 >> 2) & 0xF;
                v28[17] = v47 | ((_BYTE)v46 << 6);
                unsigned __int8 v48 = byte_100404BC2[v27[25]];
                unsigned int v49 = byte_100404BC2[v27[26]];
                unsigned __int8 v50 = byte_100404BC2[v27[27]];
                v28[18] = (4 * byte_100404BC2[v27[24]]) | (v48 >> 4) & 3;
                v28[19] = (16 * v48) | (v49 >> 2) & 0xF;
                v28[20] = v50 | ((_BYTE)v49 << 6);
                unsigned __int8 v51 = byte_100404BC2[v27[29]];
                unsigned int v52 = byte_100404BC2[v27[30]];
                unsigned __int8 v53 = byte_100404BC2[v27[31]];
                v28[21] = (4 * byte_100404BC2[v27[28]]) | (v51 >> 4) & 3;
                v28[22] = (16 * v51) | (v52 >> 2) & 0xF;
                *(_WORD *)(v28 + 23) = (v53 | ((_BYTE)v52 << 6));
              }
              if (!sub_1002BBA18((const char **)&v87, (uint64_t)&v90)) {
                goto LABEL_94;
              }
              uint64_t v54 = HIBYTE(v92);
              if (v92 < 0) {
                uint64_t v54 = v91;
              }
              if (!v54)
              {
LABEL_94:
                sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3493);
              }
              operator delete(v29);
              std::string::reference v55 = std::string::at(&v93, 0x20uLL);
              std::string::size_type v56 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
              if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v56 = v93.__r_.__value_.__l.__size_;
              }
              if (v56 < 0x21)
              {
                unsigned int v76 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(a1 + 16));
                uint64_t v77 = (uint64_t)v76;
                if ((*(unsigned char *)a3 & 7) != 0) {
                  sub_10025BB1C((uint64_t)v76, a3);
                }
                a3[2] = v77;
                *(_DWORD *)a3 = 13;
                sub_10025A9B0(v77, 8);
              }
              else
              {
                unint64_t v57 = (unint64_t)v55;
                size_t v58 = &v27[size] - (unsigned __int8 *)v55;
                size_t v59 = v58;
                if (!v58)
                {
                  size_t v59 = strlen((const char *)v57);
                  if (!v59) {
                    goto LABEL_101;
                  }
                }
                if ((v59 & 3) != 0) {
                  goto LABEL_101;
                }
                unint64_t v81 = v57 + v59;
                if (*(unsigned char *)(v57 + v59 - 1) == 61)
                {
                  int v82 = *(unsigned __int8 *)(v81 - 2);
                  v81 -= 2;
                  if (v82 != 61) {
                    unint64_t v81 = v57 + v59 - 1;
                  }
                }
                if (v57 < v81)
                {
                  unint64_t v83 = v81 - v57;
                  uint64_t v84 = (unsigned __int8 *)v57;
                  while (1)
                  {
                    uint64_t v85 = *v84;
                    if (v85 > 0x7E) {
                      break;
                    }
                    if (v85 != 65 && byte_100404BC2[v85] == 0) {
                      break;
                    }
                    ++v84;
                    if (!--v83) {
                      goto LABEL_102;
                    }
                  }
LABEL_101:
                  sub_1002ACE70(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvJSONParseValue", "Invalid Base64 data.", 3502);
                }
LABEL_102:
                uint64_t v60 = 3 * (v58 >> 2);
                uint64_t v87 = 0;
                long long v88 = 0;
                int v89 = 0;
                size_t v61 = v60 + 1;
                if (v60 + 1 < 0) {
                  sub_10000B98C();
                }
                int64_t v62 = (char *)operator new(v60 + 1);
                uint64_t v63 = &v62[v61];
                uint64_t v87 = v62;
                int v89 = &v62[v61];
                bzero(v62, v61);
                long long v88 = &v62[v61];
                unint64_t v64 = v57 + v58;
                int v65 = 3 * (v58 >> 2) + 1;
                uint64_t v66 = &v27[size + ~v57];
                do
                {
                  int v67 = v66[v57];
                  --v65;
                  --v66;
                }
                while (v67 == 61);
                *(void *)int v95 = v62;
                int v96 = v63;
                int64_t v68 = operator new(0x78uLL);
                std::string::size_type v98 = (char *)v68 + 120;
                uint64_t v99 = (char *)v68 + 120;
                _OWORD *v68 = 0u;
                v68[1] = 0u;
                v68[2] = 0u;
                void v68[3] = 0u;
                v68[4] = 0u;
                v68[5] = 0u;
                v68[6] = 0u;
                *((void *)v68 + 14) = 0;
                int v97 = v68;
                long long v100 = 0u;
                long long v101 = 0u;
                long long v102 = 0u;
                uint64_t v69 = operator new(0xA1uLL);
                _OWORD *v69 = 0u;
                v69[1] = 0u;
                void v69[2] = 0u;
                v69[3] = 0u;
                v69[4] = 0u;
                v69[5] = 0u;
                v69[6] = 0u;
                v69[7] = 0u;
                v69[8] = 0u;
                v69[9] = 0u;
                *((unsigned char *)v69 + 160) = 0;
                *(void *)&long long v102 = (char *)v69 + 161;
                *((void *)&v102 + 1) = (char *)v69 + 161;
                *(void *)&long long v100 = v69;
                *((void *)&v100 + 1) = v69;
                *(void *)&long long v101 = (char *)v69 + 120;
                *((void *)&v101 + 1) = v69;
                sub_1002BC514((uint64_t)v95, v57, v64);
                sub_1002BC1F8((uint64_t)v95);
                if (*((void *)&v100 + 1) != (void)v100) {
                  sub_1002BC1F8((uint64_t)v95);
                }
                if (*((void *)&v101 + 1))
                {
                  *(void *)&long long v102 = *((void *)&v101 + 1);
                  operator delete(*((void **)&v101 + 1));
                }
                if (v97)
                {
                  std::string::size_type v98 = v97;
                  operator delete(v97);
                }
                if (v92 >= 0) {
                  char v70 = (const char *)&v90;
                }
                else {
                  char v70 = (const char *)v90;
                }
                int v71 = sub_1002B5860(v70);
                int v72 = v65 / v71;
                if (v65 % v71) {
                  sub_1002ACE70(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvJSONParseValue", "Byte size not match elememt size", 3520);
                }
                uint64_t v73 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(a1 + 16));
                uint64_t v74 = (uint64_t)v73;
                if ((*(unsigned char *)a3 & 7) != 0) {
                  sub_10025BB1C((uint64_t)v73, a3);
                }
                a3[2] = v74;
                *(_DWORD *)a3 = 13;
                sub_10025A9B0(v74, 8);
                if (v92 >= 0) {
                  uint64_t v75 = (char *)&v90;
                }
                else {
                  uint64_t v75 = (char *)v90;
                }
                sub_1002BCE14((uint64_t)v62, v72, v75, a3[2]);
                operator delete(v62);
              }
              if (SHIBYTE(v92) < 0) {
                operator delete(v90);
              }
LABEL_60:
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v93.__r_.__value_.__l.__data_);
              }
              return __endptr;
            }
          }
          else
          {
            std::string::size_type size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
            if (HIBYTE(v93.__r_.__value_.__r.__words[2]) > 0x1Fu)
            {
              unsigned __int8 v27 = (unsigned __int8 *)&v93;
              goto LABEL_88;
            }
          }
          if (size)
          {
            sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unrecognized Base64 header");
            sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3540);
          }
          long long v79 = sub_10025A7E4(0, 0x60uLL, 0x20uLL, *(void *)(a1 + 16));
          uint64_t v80 = (uint64_t)v79;
          if ((*(unsigned char *)a3 & 7) != 0) {
            sub_10025BB1C((uint64_t)v79, a3);
          }
          a3[2] = v80;
          *(_DWORD *)a3 = 13;
          sub_10025A9B0(v80, 8);
          goto LABEL_60;
        default:
          unsigned int v22 = (std::string *)((char *)v22 + 1);
          __endptr = (char *)v22;
          goto LABEL_64;
      }
    }
  }
  unsigned int v16 = v5;
  if ((v7 - 48) < 0xA)
  {
LABEL_72:
    if ((v7 - 48) <= 9)
    {
      unsigned __int8 v23 = v16 + 1;
      do
      {
        __endptr = v23;
        int v24 = *v23++;
        int v7 = v24;
      }
      while ((v24 - 48) < 0xA);
    }
    if (v7 != 101 && v7 != 46)
    {
      *((_DWORD *)a3 + 4) = strtol(v5, &__endptr, 0);
      *(_DWORD *)a3 = 1;
      if (v6 < (unint64_t)__endptr) {
        return __endptr;
      }
LABEL_80:
      sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Invalid numeric value (inconsistent explicit type specification?)");
      sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3641);
    }
LABEL_77:
    *((double *)a3 + 2) = sub_1002C01BC(a1, v5, &__endptr);
    *(_DWORD *)a3 = 2;
    if (v6 < (unint64_t)__endptr) {
      return __endptr;
    }
    goto LABEL_80;
  }
  if (v7 == 43 || v7 == 45)
  {
    unsigned int v16 = v5 + 1;
    __endptr = v5 + 1;
    int v7 = v5[1];
    goto LABEL_72;
  }
  if (v7 == 46) {
    goto LABEL_77;
  }
  if ((v7 & 0xFFFFFFDF) - 65 >= 0x1A) {
    goto LABEL_157;
  }
  __endptr = v5 + 1;
  if ((v5[1] & 0xDFu) - 65 > 0x19) {
    goto LABEL_157;
  }
  __endptr = v5 + 2;
  if ((v5[2] & 0xDFu) - 65 > 0x19) {
    goto LABEL_157;
  }
  __endptr = v5 + 3;
  if ((v5[3] & 0xDFu) - 65 > 0x19) {
    goto LABEL_157;
  }
  __endptr = v5 + 4;
  if ((v5[4] & 0xDFu) - 65 > 0x19)
  {
    int v17 = 0;
  }
  else
  {
    __endptr = v5 + 5;
    if ((v5[5] & 0xDFu) - 65 <= 0x19)
    {
      __endptr = v5 + 6;
      if ((v5[6] & 0xDFu) - 65 <= 0x19) {
        __endptr = v5 + 7;
      }
    }
    int v17 = 1;
  }
  if (*(_DWORD *)v5 == 1819047278) {
    sub_1002ACE70(*(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "icvJSONParseValue", "Value 'null' is not supported by this parser", 3652);
  }
  if (*(_DWORD *)v5 == 1702195828)
  {
    *((_DWORD *)a3 + 4) = 1;
    *(_DWORD *)a3 = 1;
    return __endptr;
  }
  if (!v17 || (*(_DWORD *)v5 == 1936482662 ? (BOOL v78 = v5[4] == 101) : (BOOL v78 = 0), !v78))
  {
LABEL_157:
    sprintf(v95, "%s(%d): %s", *(const char **)(a1 + 96), *(_DWORD *)(a1 + 148), "Unrecognized value");
    sub_1002D2D20(-212, "icvJSONParseValue", v95, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 3666);
  }
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)a3 = 1;
  return __endptr;
}

void sub_1002C3F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C42E0(const char *a1)
{
  if (sub_1002B3B2C(a1, &v4) != 1 || v4 >= 5)
  {
    v3[0] = 0;
    v3[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v3, 33), "Too complex format for the matrix", 33);
    sub_1002D2278(-2, v3, "icvDecodeSimpleFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 4785);
  }
  return (v5 & 7 | (8 * v4)) - 8;
}

void sub_1002C43A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C43D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v14[0] = a4;
  v14[1] = a5;
  sub_1002B2180(a1, a2, 6, (uint64_t)"opencv-sequence");
  if ((a6 & 0x80000000) == 0) {
    sub_1002B2CDC(a1, (uint64_t)"level", a6);
  }
  unsigned int v9 = sub_1002C4628((unsigned int *)a3, "dt", (uint64_t)v14, 0, v15);
  __s[0] = 0;
  unsigned int v10 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 0x4000) != 0)
  {
    *(void *)&__s[strlen(__s)] = 0x6465736F6C6320;
    if ((v10 & 0x8000) == 0)
    {
LABEL_5:
      if ((v10 & 0x3000) != 0x1000) {
        goto LABEL_6;
      }
LABEL_10:
      strcat(__s, " curve");
      if ((v10 & 0xFFF) != 0) {
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else if ((v10 & 0x8000) == 0)
  {
    goto LABEL_5;
  }
  strcat(__s, " hole");
  if ((v10 & 0x3000) == 0x1000) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v10 & 0xFFF) != 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (*(_DWORD *)(a3 + 44) != 1) {
    strcat(__s, " untyped");
  }
LABEL_13:
  if (__s[0]) {
    int v11 = &__s[1];
  }
  else {
    int v11 = __s;
  }
  sub_1002B2E28(a1, (uint64_t)"flags", (uint64_t)v11, 1);
  sub_1002B2CDC(a1, (uint64_t)"count", *(unsigned int *)(a3 + 40));
  sub_1002B2E28(a1, (uint64_t)"dt", (uint64_t)v9, 0);
  sub_1002C4990(a1, (int *)a3, (uint64_t)v14, 96);
  sub_1002B2180(a1, "data", 13, 0);
  for (uint64_t i = *(void *)(a3 + 88); i; uint64_t i = *(void *)(i + 8))
  {
    sub_1002B2F84(a1, *(void *)(i + 24), *(_DWORD *)(i + 20), v9);
    if (i == **(void **)(a3 + 88)) {
      break;
    }
  }
  sub_1002B2B88(a1);
  return sub_1002B2B88(a1);
}

char *sub_1002C4628(unsigned int *a1, char *__s1, uint64_t a3, int a4, char *a5)
{
  if (!a3) {
    goto LABEL_16;
  }
  uint64_t v8 = a3;
  while (1)
  {
    unsigned int v10 = *(const char ***)v8;
    if (!*(void *)v8) {
      goto LABEL_16;
    }
    if (*v10) {
      break;
    }
LABEL_3:
    uint64_t v8 = *(void *)(v8 + 8);
    if (!v8) {
      goto LABEL_16;
    }
  }
  int v11 = 0;
  if (strcmp(__s1, *v10))
  {
    do
    {
      v11 += 2;
      unint64_t v12 = v10[v11];
      if (!v12) {
        goto LABEL_3;
      }
    }
    while (strcmp(__s1, v12));
  }
  unint64_t v13 = v10[v11 | 1u];
  if (!v13)
  {
LABEL_16:
    unsigned int v18 = *a1;
    int v19 = a1[11];
    if ((*a1 & 0xFFF) != 0 || v19 == 1)
    {
      int v20 = ((v18 >> 3) & 0x1FF) + 1;
      if (v20 << ((0xFA50u >> (2 * (v18 & 7))) & 3) != v19)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        qmemcpy((void *)sub_1002D19D8(&v23, 68), "Size of sequence element (elem_size) is inconsistent with seq->flags", 68);
        sub_1002D2278(-209, &v23, "icvGetFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5825);
      }
      sprintf(a5, "%d%c", v20, aUcwsifdr[v18 & 7]);
      if (a5[2]) {
        return a5;
      }
      else {
        return &a5[*a5 == 49];
      }
    }
    else if (v19 <= a4)
    {
      return 0;
    }
    else
    {
      if ((((_BYTE)v19 - (_BYTE)a4) & 3) != 0) {
        sprintf(a5, "%uu");
      }
      else {
        sprintf(a5, "%ui");
      }
      return a5;
    }
  }
  int v14 = sub_1002B3B2C(v10[v11 | 1u], &v23);
  int v15 = a4;
  if (v14 >= 1)
  {
    unint64_t v16 = 0;
    int v15 = a4;
    do
    {
      int v17 = (((*((_DWORD *)&v23 + v16 + 1) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*((_DWORD *)&v23 + v16 + 1) & 7))) & 3);
      int v15 = ((v15 + v17 - 1) & -v17) + v17 * *((_DWORD *)&v23 + v16);
      v16 += 2;
    }
    while (v16 < (2 * v14));
  }
  if (a4)
  {
    if (v15 == a1[11]) {
      return (char *)v13;
    }
LABEL_24:
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    qmemcpy((void *)sub_1002D19D8(&v23, 71), "The size of element calculated from \"dt\" and the elem_size do not match", 71);
    sub_1002D2278(-209, &v23, "icvGetFormat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5819);
  }
  int v21 = (((HIDWORD(v23) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (BYTE4(v23) & 7))) & 3);
  if (((v15 + v21 - 1) & -v21) != a1[11]) {
    goto LABEL_24;
  }
  return (char *)v13;
}

void sub_1002C4948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C4990(uint64_t result, int *a2, uint64_t a3, int a4)
{
  uint64_t v6 = result;
  if (a3)
  {
    uint64_t v7 = a3;
    uint64_t v8 = 1;
    while (1)
    {
      unsigned int v9 = *(const char ***)v7;
      if (!*(void *)v7) {
        goto LABEL_18;
      }
      if (*v9) {
        break;
      }
LABEL_3:
      uint64_t v7 = *(void *)(v7 + 8);
      if (!v7) {
        goto LABEL_18;
      }
    }
    uint64_t result = strcmp("header_dt", *v9);
    if (result)
    {
      LODWORD(v10) = 1;
      do
      {
        int v11 = v9[(v10 + 1)];
        if (!v11) {
          goto LABEL_3;
        }
        uint64_t result = strcmp("header_dt", v11);
        uint64_t v10 = (v10 + 2);
      }
      while (result);
      uint64_t v8 = v10;
    }
    unint64_t v12 = (char *)v9[v8];
    if (v12)
    {
      int v13 = sub_1002B3B2C(v9[v8], v26);
      int v14 = a4;
      if (v13 >= 1)
      {
        unint64_t v15 = 0;
        int v14 = a4;
        do
        {
          int v16 = (((HIDWORD(v26[v15 / 2]) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (HIDWORD(v26[v15 / 2]) & 7))) & 3);
          int v14 = ((v14 + v16 - 1) & -v16) + v16 * LODWORD(v26[v15 / 2]);
          v15 += 2;
        }
        while (v15 < (2 * v13));
      }
      if (a4)
      {
        if (v14 <= a2[1]) {
          goto LABEL_41;
        }
      }
      else
      {
        int v22 = (((HIDWORD(v26[0]) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (BYTE4(v26[0]) & 7))) & 3);
        if (((v14 + v22 - 1) & -v22) <= a2[1])
        {
LABEL_41:
          sub_1002B2E28(v6, (uint64_t)"header_dt", (uint64_t)v12, 0);
          sub_1002B2180(v6, "header_user_data", 13, 0);
          sub_1002B2F84(v6, (uint64_t)(a2 + 24), 1, v12);
          return sub_1002B2B88(v6);
        }
      }
      v26[0] = 0;
      v26[1] = 0;
      qmemcpy((void *)sub_1002D19D8(v26, 74), "The size of header calculated from \"header_dt\" is greater than header_size", 74);
      sub_1002D2278(-209, v26, "icvWriteHeaderData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 5755);
    }
  }
LABEL_18:
  int v17 = a2[1];
  unsigned int v18 = v17 - a4;
  if (v17 <= a4) {
    return result;
  }
  int v19 = *a2;
  if (HIWORD(*a2) != 17049) {
    goto LABEL_37;
  }
  BOOL v20 = v17 == 128 && (*a2 & 0xFFE) == 12;
  if (v20 && a2[11] == 8)
  {
    sub_1002B2180(v6, "rect", 14, 0);
    sub_1002B2CDC(v6, (uint64_t)"x", a2[24]);
    sub_1002B2CDC(v6, (uint64_t)"y", a2[25]);
    sub_1002B2CDC(v6, (uint64_t)"width", a2[26]);
    sub_1002B2CDC(v6, (uint64_t)"height", a2[27]);
    sub_1002B2B88(v6);
    uint64_t v21 = a2[28];
    return sub_1002B2CDC(v6, (uint64_t)"color", v21);
  }
  if ((v19 & 0xFFFF3000) != 0x42991000 || (v19 & 0xFFF) != 0 || a2[11] != 1)
  {
LABEL_37:
    if ((v18 & 3) != 0)
    {
      uint64_t v24 = (v17 - a4);
      uint64_t v23 = "%uu";
    }
    else
    {
      uint64_t v24 = v18 >> 2;
      uint64_t v23 = "%ui";
    }
    unint64_t v12 = v25;
    sprintf(v25, v23, v24);
    goto LABEL_41;
  }
  sub_1002B2180(v6, "origin", 14, 0);
  sub_1002B2CDC(v6, (uint64_t)"x", a2[24]);
  sub_1002B2CDC(v6, (uint64_t)"y", a2[25]);

  return sub_1002B2B88(v6);
}

void sub_1002C4DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C4DF4(int **a1, int **a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  if ((int)v3 < 1) {
    return 0;
  }
  int v4 = *a1;
  int v5 = *a2;
  while (1)
  {
    int v7 = *v4++;
    int v6 = v7;
    int v8 = *v5++;
    uint64_t result = (v6 - v8);
    if (v6 != v8) {
      break;
    }
    if (!--v3) {
      return 0;
    }
  }
  return result;
}

void *sub_1002C4E28(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  int v4 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  int v5 = operator new(0x30uLL);
  *int v4 = v5;
  *int v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  a1[2] = v5 + 3;
  a1[3] = v5 + 3;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  int v6 = operator new(0x41uLL);
  *int v6 = 0u;
  v6[1] = 0u;
  uint64_t v6[2] = 0u;
  v6[3] = 0u;
  *((unsigned char *)v6 + 64) = 0;
  a1[4] = v6;
  a1[5] = (char *)v6 + 65;
  a1[6] = (char *)v6 + 65;
  a1[7] = v5;
  a1[8] = v5;
  a1[9] = v5 + 3;
  if (!a2 || *(_DWORD *)a2 != 1280131417)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    qmemcpy((void *)sub_1002D19D8(&v16, 31), "Invalid pointer to file storage", 31);
    if (a2) {
      int v7 = -5;
    }
    else {
      int v7 = -27;
    }
    sub_1002D2278(v7, &v16, "Base64ContextEmitter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7900);
  }
  if (!*(_DWORD *)(a2 + 8))
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    qmemcpy((void *)sub_1002D19D8(&v16, 38), "The file storage is opened for reading", 38);
    sub_1002D2278(-2, &v16, "Base64ContextEmitter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 7900);
  }
  if (*(_DWORD *)(a2 + 4) == 24)
  {
    int v8 = *(unsigned char **)(a2 + 120);
    *(void *)(a2 + 120) = v8 + 1;
    *int v8 = 0;
    sub_1002AF2B8((void *)a2, *(char **)(a2 + 128));
    *(void *)(a2 + 120) = *(void *)(a2 + 128);
    bzero(*(void **)(*a1 + 128), *(int *)(*a1 + 88));
    sub_1002AF2B8((void *)a2, "\"$base64$");
  }
  else
  {
    uint64_t v9 = *a1;
    int v11 = *(char **)(*a1 + 120);
    uint64_t v10 = *(char **)(*a1 + 128);
    uint64_t v12 = *(int *)(*a1 + 88);
    if (v11 > &v10[v12])
    {
      *(_WORD *)int v11 = 10;
      sub_1002AF2B8((void *)v9, *(char **)(v9 + 128));
      uint64_t v10 = *(char **)(v9 + 128);
      LODWORD(v12) = *(_DWORD *)(v9 + 88);
    }
    int v13 = *(_DWORD *)(v9 + 64);
    if (v12 == v13)
    {
      uint64_t v14 = (int)v12;
    }
    else
    {
      uint64_t v14 = v13;
      memset(v10, 32, v13);
      *(_DWORD *)(v9 + 88) = v13;
      uint64_t v10 = *(char **)(v9 + 128);
    }
    *(void *)(v9 + 120) = &v10[v14];
  }
  return a1;
}

void sub_1002C505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  int v13 = *v11;
  if (*v11)
  {
    *(void *)(v9 + 40) = v13;
    operator delete(v13);
    uint64_t v14 = *v10;
    if (!*v10) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v14 = *v10;
    if (!*v10) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 16) = v14;
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002C50DC(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a2;
  if (!a2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v7 = sub_1002D19D8(&v15, 3);
    *(unsigned char *)(v7 + 2) = 99;
    *(_WORD *)uint64_t v7 = 29299;
    sub_1002D2278(-215, &v15, "RawDataToBinaryConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8036);
  }
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (!v8)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v9 = sub_1002D19D8(&v15, 11);
    *(_DWORD *)(v9 + 7) = 690518388;
    *(void *)uint64_t v9 = *(void *)"!dt.empty()";
    sub_1002D2278(-215, &v15, "RawDataToBinaryConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8037);
  }
  if (a3 <= 0)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v10 = (_DWORD *)sub_1002D19D8(&v15, 7);
    *(_DWORD *)((char *)v10 + 3) = 807419424;
    _DWORD *v10 = 544105836;
    sub_1002D2278(-215, &v15, "RawDataToBinaryConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8038);
  }
  sub_1002C52E4(a1, a4);
  uint64_t v11 = *a1;
  a1[1] = *a1;
  a1[2] = v11;
  if (*(char *)(a4 + 23) >= 0) {
    uint64_t v12 = (const char *)a4;
  }
  else {
    uint64_t v12 = *(const char **)a4;
  }
  int v13 = sub_1002B5860(v12);
  a1[2] = *a1 + v13 * (uint64_t)a3;
  a1[3] = v13;
  return a1;
}

void sub_1002C5278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  uint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002C52E4(void *a1, uint64_t a2)
{
  uint64_t v32 = 0;
  char v31 = 0;
  sub_1002BBC38((uint64_t)v29, a2, 8);
  uint64_t v3 = v29[0];
  if ((*((unsigned char *)&v29[4] + *(void *)(v29[0] - 24)) & 2) == 0)
  {
    int v4 = 0;
    int v5 = a1 + 4;
LABEL_4:
    int v6 = (void *)std::istream::operator>>();
    if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0)
    {
      std::ios_base::clear((std::ios_base *)((char *)v29 + *(void *)(v29[0] - 24)), 0);
      uint64_t v32 = 1;
    }
    else if (!v32)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      *(void *)sub_1002D19D8(&v27, 8) = 0x5530203E20746E63;
      sub_1002D2278(-215, &v27, "make_to_binary_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8090);
    }
    uint64_t v7 = sub_1002C58C4(v29, &v31);
    if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0)
    {
      uint64_t v3 = v29[0];
      goto LABEL_36;
    }
    while (1)
    {
      if (!v32--)
      {
        uint64_t v3 = v29[0];
        if ((*((unsigned char *)&v29[4] + *(void *)(v29[0] - 24)) & 2) != 0) {
          break;
        }
        goto LABEL_4;
      }
      uint64_t v10 = sub_1002C5A30;
      int v11 = 1;
      switch(v31)
      {
        case 'c':
        case 'u':
          break;
        case 'd':
          uint64_t v10 = sub_1002C5A70;
          int v11 = 8;
          break;
        case 'f':
          int v13 = sub_1002C5A60;
          goto LABEL_19;
        case 'i':
          int v13 = sub_1002C5A50;
LABEL_19:
          uint64_t v10 = v13;
          int v11 = 4;
          break;
        case 's':
        case 'w':
          uint64_t v10 = sub_1002C5A40;
          int v11 = 2;
          break;
        default:
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          uint64_t v12 = sub_1002D19D8(&v27, 19);
          *(_DWORD *)(v12 + 15) = 578056815;
          *(_OWORD *)uint64_t v12 = *(_OWORD *)"!\"type not support\"";
          sub_1002D2278(-215, &v27, "make_to_binary_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8124);
      }
      uint64_t v14 = (v4 + v11 - 1) & -v11;
      uint64_t v16 = (void *)a1[5];
      unint64_t v15 = a1[6];
      if ((unint64_t)v16 < v15)
      {
        *uint64_t v16 = v14;
        v16[1] = v10;
        uint64_t v8 = v16 + 2;
        goto LABEL_11;
      }
      uint64_t v17 = (void *)*v5;
      uint64_t v18 = ((uint64_t)v16 - *v5) >> 4;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60) {
        sub_10000B98C();
      }
      uint64_t v20 = v15 - (void)v17;
      if (v20 >> 3 > v19) {
        unint64_t v19 = v20 >> 3;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 60) {
          sub_10000BA6C();
        }
        int v22 = (char *)operator new(16 * v21);
        uint64_t v23 = &v22[16 * v18];
        *(void *)uint64_t v23 = v14;
        *((void *)v23 + 1) = v10;
        uint64_t v24 = (uint64_t)v23;
        if (v16 == v17)
        {
LABEL_30:
          uint64_t v8 = v23 + 16;
          a1[4] = v24;
          a1[5] = v23 + 16;
          a1[6] = &v22[16 * v21];
          if (v16) {
            goto LABEL_35;
          }
          goto LABEL_11;
        }
      }
      else
      {
        int v22 = 0;
        uint64_t v23 = (char *)(16 * v18);
        *(void *)uint64_t v23 = v14;
        *((void *)v23 + 1) = v10;
        uint64_t v24 = 16 * v18;
        if (v16 == v17) {
          goto LABEL_30;
        }
      }
      do
      {
        *(_OWORD *)(v24 - 16) = *((_OWORD *)v16 - 1);
        v24 -= 16;
        v16 -= 2;
      }
      while (v16 != v17);
      uint64_t v16 = (void *)*v5;
      uint64_t v8 = v23 + 16;
      a1[4] = v24;
      a1[5] = v23 + 16;
      a1[6] = &v22[16 * v21];
      if (v16) {
LABEL_35:
      }
        operator delete(v16);
LABEL_11:
      a1[5] = v8;
      int v4 = v14 + v11;
    }
  }
LABEL_36:
  if ((*((unsigned char *)&v29[4] + *(void *)(v3 - 24)) & 2) == 0)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v25 = sub_1002D19D8(&v27, 9);
    *(unsigned char *)(v25 + 8) = 41;
    *(void *)uint64_t v25 = *(void *)"iss.eof()";
    sub_1002D2278(-215, &v27, "make_to_binary_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8135);
  }
  if (v30 < 0) {
    operator delete((void *)v29[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_1002C5804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002BC0F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *sub_1002C58C4(void *a1, unsigned char *a2)
{
  std::istream::sentry::sentry();
  if (v8)
  {
    int v4 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v5 = (unsigned char *)v4[3];
    if (v5 == (unsigned char *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(void *))(*v4 + 80))(v4);
      if (v4 == -1)
      {
        int v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    int v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_1002C59A4(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1002C5964);
  }
  __cxa_rethrow();
}

void sub_1002C5A1C(_Unwind_Exception *a1)
{
}

uint64_t sub_1002C5A30(unsigned char *a1, unsigned char *a2)
{
  *a2 = *a1;
  return 1;
}

uint64_t sub_1002C5A40(_WORD *a1, _WORD *a2)
{
  *a2 = *a1;
  return 2;
}

uint64_t sub_1002C5A50(_DWORD *a1, _DWORD *a2)
{
  *a2 = *a1;
  return 4;
}

uint64_t sub_1002C5A60(_DWORD *a1, _DWORD *a2)
{
  *a2 = *a1;
  return 4;
}

uint64_t sub_1002C5A70(void *a1, void *a2)
{
  *a2 = *a1;
  return 8;
}

void **sub_1002C5A80(void **a1)
{
  if (a1[8] != a1[7]) {
    sub_1002C5B8C(a1);
  }
  if (*((_DWORD *)*a1 + 1) == 24)
  {
    sub_1002AF2B8(*a1, "\"");
    uint64_t v2 = *a1;
    uint64_t v3 = (_WORD *)(*a1)[16];
    v2[15] = v3;
    int v4 = *((_DWORD *)v2 + 22);
    if (v4 < 0)
    {
      *uint64_t v3 = 10;
      sub_1002AF2B8(v2, (char *)v2[16]);
      uint64_t v3 = (_WORD *)v2[16];
      int v4 = *((_DWORD *)v2 + 22);
      int v5 = *((_DWORD *)v2 + 16);
      if (v4 == v5) {
        goto LABEL_6;
      }
    }
    else
    {
      int v5 = *((_DWORD *)v2 + 16);
      if (v4 == v5)
      {
LABEL_6:
        uint64_t v6 = v4;
LABEL_9:
        v2[15] = (char *)v3 + v6;
        bzero((void *)(*a1)[16], *((int *)*a1 + 22));
        (*a1)[15] = (*a1)[16];
        goto LABEL_10;
      }
    }
    uint64_t v6 = v5;
    memset(v3, 32, v5);
    *((_DWORD *)v2 + 22) = v5;
    uint64_t v3 = (_WORD *)v2[16];
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v7 = a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  char v8 = a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

BOOL sub_1002C5B8C(void **a1)
{
  uint64_t v2 = sub_1002BB67C((uint64_t)a1[7], a1[4], 0, (char *)a1[8] - (char *)a1[7]);
  if (v2)
  {
    a1[8] = a1[7];
    uint64_t v3 = (uint64_t)*a1;
    if (*((_DWORD *)*a1 + 1) == 24)
    {
      sub_1002AF2B8(*a1, (char *)a1[4]);
    }
    else
    {
      strcpy(__s, "\n");
      size_t v4 = *(int *)(v3 + 64);
      memset(__b, 32, v4);
      __b[v4] = 0;
      sub_1002AF2B8((void *)v3, __b);
      sub_1002AF2B8(*a1, (char *)a1[4]);
      sub_1002AF2B8(*a1, __s);
      uint64_t v5 = (uint64_t)*a1;
      uint64_t v7 = *(char **)(v5 + 120);
      uint64_t v6 = *(char **)(v5 + 128);
      uint64_t v8 = *(int *)(v5 + 88);
      if (v7 > &v6[v8])
      {
        *(_WORD *)uint64_t v7 = 10;
        sub_1002AF2B8((void *)v5, *(char **)(v5 + 128));
        uint64_t v6 = *(char **)(v5 + 128);
        LODWORD(v8) = *(_DWORD *)(v5 + 88);
      }
      int v9 = *(_DWORD *)(v5 + 64);
      if (v8 == v9)
      {
        uint64_t v10 = (int)v8;
      }
      else
      {
        uint64_t v10 = v9;
        memset(v6, 32, v9);
        *(_DWORD *)(v5 + 88) = v9;
        uint64_t v6 = *(char **)(v5 + 128);
      }
      *(void *)(v5 + 120) = &v6[v10];
    }
  }
  return v2 != 0;
}

uint64_t sub_1002C5CEC(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (!a2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v7 = sub_1002D19D8(&v10, 3);
    *(unsigned char *)(v7 + 2) = 99;
    *(_WORD *)uint64_t v7 = 29299;
    sub_1002D2278(-215, &v10, "BinaryToCvSeqConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8155);
  }
  if (!a4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *(_WORD *)sub_1002D19D8(&v10, 2) = 29796;
    sub_1002D2278(-215, &v10, "BinaryToCvSeqConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8156);
  }
  if (a3 < 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *(void *)sub_1002D19D8(&v10, 8) = 0x30203D3E206E656CLL;
    sub_1002D2278(-215, &v10, "BinaryToCvSeqConvertor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8157);
  }
  sub_1002C5EBC((void *)a1, a4);
  *(void *)(a1 + 56) = *(void *)(a1 + 32);
  int v8 = sub_1002B5860(a4);
  *(void *)(a1 + 16) = *(void *)(a1 + 8) + v8 * (uint64_t)a3;
  *(void *)(a1 + 24) = v8;
  return a1;
}

void sub_1002C5E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  uint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002C5EBC(void *a1, char *__s)
{
  uint64_t v42 = 0;
  char v41 = 0;
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_10026ADB4();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    size_t v37 = v5;
    unint64_t v38 = v8 | 0x8000000000000000;
    int __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v38) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memcpy(p_dst, __s, v5);
  *((unsigned char *)p_dst + v5) = 0;
  sub_1002BBC38((uint64_t)v39, (uint64_t)&__dst, 8);
  if (SHIBYTE(v38) < 0) {
    operator delete(__dst);
  }
  uint64_t v9 = v39[0];
  if ((*((unsigned char *)&v39[4] + *(void *)(v39[0] - 24)) & 2) == 0)
  {
    int v10 = 0;
    uint64_t v11 = (uint64_t **)(a1 + 4);
    while (1)
    {
      uint64_t v12 = (void *)std::istream::operator>>();
      if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0)
      {
        std::ios_base::clear((std::ios_base *)((char *)v39 + *(void *)(v39[0] - 24)), 0);
        uint64_t v42 = 1;
      }
      else if (!v42)
      {
        int __dst = 0;
        size_t v37 = 0;
        *(void *)sub_1002D19D8(&__dst, 8) = 0x5530203E20746E63;
        sub_1002D2278(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8248);
      }
      int v13 = sub_1002C58C4(v39, &v41);
      if ((*((unsigned char *)v13 + *(void *)(*v13 - 24) + 32) & 5) != 0) {
        break;
      }
      while (v42--)
      {
        uint64_t v16 = sub_1002C6708;
        int v17 = 1;
        switch(v41)
        {
          case 'c':
          case 'u':
            break;
          case 'd':
            uint64_t v16 = sub_1002C6784;
            int v17 = 8;
            break;
          case 'f':
            unint64_t v19 = sub_1002C6774;
            goto LABEL_29;
          case 'i':
            unint64_t v19 = sub_1002C673C;
LABEL_29:
            uint64_t v16 = v19;
            int v17 = 4;
            break;
          case 's':
          case 'w':
            uint64_t v16 = sub_1002C671C;
            int v17 = 2;
            break;
          default:
            int __dst = 0;
            size_t v37 = 0;
            uint64_t v18 = sub_1002D19D8(&__dst, 19);
            *(_DWORD *)(v18 + 15) = 578056815;
            *(_OWORD *)uint64_t v18 = *(_OWORD *)"!\"type not support\"";
            sub_1002D2278(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8283);
        }
        uint64_t v20 = 0;
        switch(v41)
        {
          case 'c':
            uint64_t v20 = 1;
            break;
          case 'd':
            uint64_t v20 = 6;
            break;
          case 'f':
            uint64_t v20 = 5;
            break;
          case 'i':
            uint64_t v20 = 4;
            break;
          case 's':
            uint64_t v20 = 3;
            break;
          case 'u':
            break;
          case 'w':
            uint64_t v20 = 2;
            break;
          default:
            int __dst = 0;
            size_t v37 = 0;
            qmemcpy((void *)sub_1002D19D8(&__dst, 22), "!\"type is not support\"", 22);
            sub_1002D2278(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8301);
        }
        uint64_t v21 = (v10 + v17 - 1) & -v17;
        uint64_t v23 = (uint64_t *)a1[5];
        unint64_t v22 = a1[6];
        if ((unint64_t)v23 < v22)
        {
          uint64_t *v23 = v20;
          v23[1] = v21;
          uint64_t v14 = v23 + 3;
          v23[2] = (uint64_t)v16;
        }
        else
        {
          uint64_t v24 = *v11;
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v23 - *v11);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_10000B98C();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v24) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            if (v28 > 0xAAAAAAAAAAAAAAALL) {
              sub_10000BA6C();
            }
            unsigned __int8 v29 = (char *)operator new(24 * v28);
          }
          else
          {
            unsigned __int8 v29 = 0;
          }
          char v30 = (uint64_t *)&v29[24 * v25];
          *char v30 = v20;
          v30[1] = v21;
          v30[2] = (uint64_t)v16;
          char v31 = v30;
          if (v23 != v24)
          {
            do
            {
              long long v32 = *(_OWORD *)(v23 - 3);
              *(v31 - 1) = *(v23 - 1);
              *(_OWORD *)(v31 - 3) = v32;
              v31 -= 3;
              v23 -= 3;
            }
            while (v23 != v24);
            uint64_t v23 = *v11;
          }
          unsigned __int8 v33 = &v29[24 * v28];
          uint64_t v14 = v30 + 3;
          a1[4] = v31;
          a1[5] = v30 + 3;
          a1[6] = v33;
          if (v23) {
            operator delete(v23);
          }
        }
        int v10 = v21 + v17;
        a1[5] = v14;
      }
      uint64_t v9 = v39[0];
      if ((*((unsigned char *)&v39[4] + *(void *)(v39[0] - 24)) & 2) != 0) {
        goto LABEL_54;
      }
    }
    uint64_t v9 = v39[0];
  }
LABEL_54:
  if ((*((unsigned char *)&v39[4] + *(void *)(v9 - 24)) & 2) == 0)
  {
    int __dst = 0;
    size_t v37 = 0;
    uint64_t v34 = sub_1002D19D8(&__dst, 9);
    *(unsigned char *)(v34 + 8) = 41;
    *(void *)uint64_t v34 = *(void *)"iss.eof()";
    sub_1002D2278(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8308);
  }
  if (a1[5] == a1[4])
  {
    int __dst = 0;
    size_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&__dst, 22), "binary_to_funcs.size()", 22);
    sub_1002D2278(-215, (uint64_t *)&__dst, "make_funcs", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/persistence.cpp", 8309);
  }
  if (v40 < 0) {
    operator delete((void *)v39[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return std::ios::~ios();
}

void sub_1002C65A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t sub_1002C6708(unsigned char *a1, unsigned char *a2)
{
  *a2 = 0;
  *a2 = *a1;
  return 1;
}

uint64_t sub_1002C671C(unsigned __int8 *a1, _WORD *a2)
{
  *a2 = 0;
  __int16 v2 = *a1;
  *a2 = v2;
  *a2 = v2 | (a1[1] << 8);
  return 2;
}

uint64_t sub_1002C673C(unsigned __int8 *a1, int *a2)
{
  *a2 = 0;
  int v2 = *a1;
  *a2 = v2;
  int v3 = v2 | (a1[1] << 8);
  *a2 = v3;
  int v4 = v3 | (a1[2] << 16);
  *a2 = v4;
  *a2 = v4 | (a1[3] << 24);
  return 4;
}

uint64_t sub_1002C6774(_DWORD *a1, _DWORD *a2)
{
  *a2 = *a1;
  return 4;
}

uint64_t sub_1002C6784(void *a1, void *a2)
{
  *a2 = *a1;
  return 8;
}

uint64_t sub_1002C6794(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  int v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = *(void ***)(a1 + 16);
      int v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 4096;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002C6860()
{
}

uint64_t sub_1002C6874(void **a1)
{
  sub_100234194((uint64_t)(a1 + 3), a1[2]);
  int v2 = (uint64_t (*)(void **))*((void *)*a1 + 1);

  return v2(a1);
}

uint64_t sub_1002C68D4()
{
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  unint64_t v4 = "opencv-sequence";
  uint64_t v2 = 0;
  unint64_t v5 = sub_1002B5F98;
  uint64_t v6 = sub_1002B5FB0;
  uint64_t v9 = sub_1002B6E44;
  uint64_t v7 = sub_1002B6050;
  uint64_t v8 = sub_1002B6C60;
  sub_1002B5B40((uint64_t)&v1);
  qword_1004F8CF8 = qword_1004F8CE8;
  __cxa_atexit((void (*)(void *))sub_1002B5ED0, &qword_1004F8CF8, (void *)&_mh_execute_header);
  uint64_t v1 = 0x4800000000;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = "opencv-sequence-tree";
  unint64_t v5 = sub_1002B5F98;
  uint64_t v8 = sub_1002B6C60;
  uint64_t v9 = sub_1002B6E44;
  uint64_t v6 = sub_1002B5FB0;
  uint64_t v7 = sub_1002B6E54;
  sub_1002B5B40((uint64_t)&v1);
  qword_1004F8D00 = qword_1004F8CE8;
  __cxa_atexit((void (*)(void *))sub_1002B5ED0, &qword_1004F8D00, (void *)&_mh_execute_header);
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  unint64_t v4 = "opencv-graph";
  uint64_t v2 = 0;
  unint64_t v5 = sub_1002B716C;
  uint64_t v6 = sub_1002B7190;
  uint64_t v9 = sub_1002B87A0;
  uint64_t v7 = sub_1002B7230;
  uint64_t v8 = sub_1002B81D8;
  sub_1002B5B40((uint64_t)&v1);
  qword_1004F8D08 = qword_1004F8CE8;
  __cxa_atexit((void (*)(void *))sub_1002B5ED0, &qword_1004F8D08, (void *)&_mh_execute_header);
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  unint64_t v4 = "opencv-sparse-matrix";
  uint64_t v2 = 0;
  unint64_t v5 = sub_1002B87A8;
  uint64_t v6 = sub_100231664;
  uint64_t v9 = sub_100231760;
  uint64_t v7 = sub_1002B87C0;
  uint64_t v8 = sub_1002B8D28;
  sub_1002B5B40((uint64_t)&v1);
  qword_1004F8D10 = qword_1004F8CE8;
  __cxa_atexit((void (*)(void *))sub_1002B5ED0, &qword_1004F8D10, (void *)&_mh_execute_header);
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  unint64_t v4 = "opencv-image";
  uint64_t v2 = 0;
  unint64_t v5 = sub_1002B9064;
  uint64_t v6 = sub_100233B1C;
  uint64_t v9 = sub_100233FD4;
  uint64_t v7 = sub_1002B9078;
  uint64_t v8 = sub_1002B9818;
  sub_1002B5B40((uint64_t)&v1);
  qword_1004F8D18 = qword_1004F8CE8;
  __cxa_atexit((void (*)(void *))sub_1002B5ED0, &qword_1004F8D18, (void *)&_mh_execute_header);
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  unint64_t v4 = "opencv-matrix";
  uint64_t v2 = 0;
  unint64_t v5 = sub_1002B9B70;
  uint64_t v6 = sub_10022FBB4;
  uint64_t v9 = sub_10022FD1C;
  uint64_t v7 = sub_1002B9BA4;
  uint64_t v8 = sub_1002B9F44;
  sub_1002B5B40((uint64_t)&v1);
  qword_1004F8D20 = qword_1004F8CE8;
  __cxa_atexit((void (*)(void *))sub_1002B5ED0, &qword_1004F8D20, (void *)&_mh_execute_header);
  uint64_t v1 = 0x4800000000;
  uint64_t v3 = 0;
  unint64_t v4 = "opencv-nd-matrix";
  uint64_t v2 = 0;
  unint64_t v5 = sub_1002BA0D0;
  uint64_t v6 = sub_1002BA0E8;
  uint64_t v9 = sub_100230254;
  uint64_t v7 = sub_1002BA0EC;
  uint64_t v8 = sub_1002BA578;
  sub_1002B5B40((uint64_t)&v1);
  qword_1004F8D28 = qword_1004F8CE8;
  return __cxa_atexit((void (*)(void *))sub_1002B5ED0, &qword_1004F8D28, (void *)&_mh_execute_header);
}

void *sub_1002C6CC8()
{
  uint64_t v0 = (_DWORD *)sub_1002D4018();

  return sub_1002D3A9C(v0);
}

unsigned int *sub_1002C6CF0(unsigned int *result, int a2)
{
  uint64_t v2 = result;
  if ((a2 & 0x7FFFFFFF) != 0)
  {
    if (a2 >= 0) {
      unsigned int v3 = a2;
    }
    else {
      unsigned int v3 = -a2;
    }
    sub_1002CA2CC((int *)&v4, a2 >> 31, 156, v3);
    *uint64_t v2 = v4;
    return v2;
  }
  else
  {
    *uint64_t result = (a2 >> 31) & 0xCF000000;
  }
  return result;
}

unsigned int *sub_1002C6D64@<X0>(unsigned int *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = *result;
  unsigned int v3 = v2 & 0x7FFFFF;
  if ((~v2 & 0x7F800000) != 0)
  {
    uint64_t v7 = (v2 >> 23);
    if (!(v2 >> 23))
    {
      if (!v3)
      {
        *a2 = (v2 << 32) & 0x8000000000000000;
        return result;
      }
      unsigned int v8 = v2 << 16;
      if (v3 >= 0x10000) {
        unsigned int v8 = v2 & 0x7FFFFF;
      }
      LODWORD(v9) = v8 << 8;
      if (HIBYTE(v8)) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v9;
      }
      if (HIBYTE(v8)) {
        char v10 = 16 * (v3 < 0x10000);
      }
      else {
        char v10 = (16 * (v3 < 0x10000)) | 8;
      }
      char v11 = v10 + byte_100404CE8[v9 >> 24] - 8;
      v3 <<= v11;
      uint64_t v7 = -v11;
    }
    *a2 = ((v2 >> 31 << 63) | ((unint64_t)v3 << 29)) + (v7 << 52) + 0x3800000000000000;
    return result;
  }
  uint64_t v4 = (v2 >> 31 << 63) | 0x7FF0000000000000;
  uint64_t v5 = (v2 << 29) | (v2 >> 31 << 63) | 0x7FF8000000000000;
  if (v3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  *a2 = v6;
  return result;
}

int *sub_1002C6E34@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, int *a3@<X8>)
{
  unsigned int v4 = *a1;
  unsigned int v5 = *a2;
  if (((*a2 ^ *a1) & 0x80000000) != 0) {
    return sub_1002C9EF8(a3, v4, v5);
  }
  else {
    return (int *)sub_1002CA0C4((unsigned int *)a3, v4, v5);
  }
}

int *sub_1002C6E58@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X8>)
{
  unsigned int v4 = *a1;
  unsigned int v5 = *a2;
  if (((*a2 ^ *a1) & 0x80000000) != 0) {
    return (int *)sub_1002CA0C4(a3, v4, v5);
  }
  else {
    return sub_1002C9EF8((int *)a3, v4, v5);
  }
}

int *sub_1002C6E7C@<X0>(int *result@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  int v3 = *result;
  int v4 = (*result >> 23);
  unsigned int v5 = *result & 0x7FFFFF;
  int v6 = (*a2 >> 23);
  unsigned int v7 = *a2 & 0x7FFFFF;
  int v8 = *a2 ^ *result;
  if (v4 == 255)
  {
    if (v5) {
      goto LABEL_11;
    }
    if (v6 == 255 && v7 != 0) {
      goto LABEL_11;
    }
    int v10 = v6 | v7;
LABEL_28:
    unsigned int v15 = v8 & 0x80000000 | 0x7F800000;
    if (!v10) {
      unsigned int v15 = -4194304;
    }
    *a3 = v15;
    return result;
  }
  if ((~*a2 & 0x7F800000) == 0)
  {
    if (v7)
    {
LABEL_11:
      if (v5) {
        BOOL v11 = (~v3 & 0x7F800000) == 0;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11) {
        int v12 = *result;
      }
      else {
        int v12 = *a2;
      }
      if ((v3 & 0x7FC00000) != 0x7F800000 || (v3 & 0x3FFFFF) == 0) {
        int v14 = v12;
      }
      else {
        int v14 = *result;
      }
      *a3 = v14 | 0x400000;
      return result;
    }
    int v10 = v4 | v5;
    goto LABEL_28;
  }
  if (!(*result >> 23))
  {
    if (!v5) {
      goto LABEL_59;
    }
    unsigned int v16 = *result << 16;
    if (v5 >= 0x10000) {
      unsigned int v16 = *result & 0x7FFFFF;
    }
    LODWORD(v17) = v16 << 8;
    if (HIBYTE(v16)) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = v17;
    }
    char v18 = byte_100404CE8[v17 >> 24];
    if (HIBYTE(v16)) {
      char v19 = 16 * (v5 < 0x10000);
    }
    else {
      char v19 = (16 * (v5 < 0x10000)) | 8;
    }
    char v20 = v19 + v18 - 8;
    int v4 = 1 - v20;
    v5 <<= v20;
    if ((*a2 >> 23)) {
      goto LABEL_51;
    }
LABEL_41:
    if (v7)
    {
      unsigned int v21 = *a2 << 16;
      if (v7 >= 0x10000) {
        unsigned int v21 = *a2 & 0x7FFFFF;
      }
      LODWORD(v22) = v21 << 8;
      if (HIBYTE(v21)) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = v22;
      }
      char v23 = byte_100404CE8[v22 >> 24];
      if (HIBYTE(v21)) {
        char v24 = 16 * (v7 < 0x10000);
      }
      else {
        char v24 = (16 * (v7 < 0x10000)) | 8;
      }
      char v25 = v24 + v23 - 8;
      int v6 = 1 - v25;
      v7 <<= v25;
      goto LABEL_51;
    }
LABEL_59:
    *a3 = v8 & 0x80000000;
    return result;
  }
  if (!(*a2 >> 23)) {
    goto LABEL_41;
  }
LABEL_51:
  int v26 = v6 + v4;
  unint64_t v27 = ((v7 << 8) | 0x80000000) * (unint64_t)((v5 << 7) | 0x40000000);
  int v28 = HIDWORD(v27) | ((v27 & 0xFFFF8000) != 0);
  char v29 = v27 >> 62 == 0;
  if (v29) {
    int v30 = -128;
  }
  else {
    int v30 = -127;
  }
  unsigned int v31 = v26 + v30;
  unsigned int v32 = v28 << v29;
  if (v31 >= 0xFD)
  {
    if ((v31 & 0x8000) != 0)
    {
      int v33 = -v31;
      unsigned int v34 = (unsigned __int16)v33;
      unsigned int v32 = (v32 >> v33) | (v32 << -(char)v33 != 0);
      unsigned int v31 = 0;
      if (v34 > 0x1E) {
        unsigned int v32 = 1;
      }
    }
    else
    {
      if ((unsigned __int16)v31 > 0xFDu || ((v32 + 64) & 0x80000000) != 0)
      {
        *a3 = v8 & 0x80000000 | 0x7F800000;
        return result;
      }
      unsigned int v31 = 253;
    }
  }
  unsigned int v35 = v8 & 0x80000000;
  unsigned int v36 = v31 << 23;
  unsigned int v37 = ~((v32 & 0x7F) == 64) & ((v32 + 64) >> 7);
  if (!v37) {
    unsigned int v36 = 0;
  }
  *a3 = (v37 | v35) + v36;
  return result;
}

int *sub_1002C70C8@<X0>(int *result@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  int v3 = *result;
  int v4 = (*result >> 23);
  unsigned int v5 = *a2;
  unsigned int v6 = *result & 0x7FFFFF;
  unsigned int v7 = *a2 & 0x7FFFFF;
  int v8 = *a2 ^ *result;
  if (v4 == 255)
  {
    if (!v6)
    {
      if ((~v5 & 0x7F800000) == 0)
      {
        if (!v7) {
          goto LABEL_60;
        }
        goto LABEL_8;
      }
LABEL_59:
      *a3 = v8 & 0x80000000 | 0x7F800000;
      return result;
    }
LABEL_8:
    if (v6) {
      BOOL v9 = (~v3 & 0x7F800000) == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      int v10 = *result;
    }
    else {
      int v10 = *a2;
    }
    if ((v3 & 0x7FC00000) != 0x7F800000 || (v3 & 0x3FFFFF) == 0) {
      int v12 = v10;
    }
    else {
      int v12 = *result;
    }
    *a3 = v12 | 0x400000;
    return result;
  }
  if ((~v5 & 0x7F800000) == 0)
  {
    if (v7) {
      goto LABEL_8;
    }
LABEL_52:
    *a3 = v8 & 0x80000000;
    return result;
  }
  int v13 = (v5 >> 23);
  if ((v5 >> 23))
  {
    if ((*result >> 23)) {
      goto LABEL_44;
    }
  }
  else
  {
    if (!v7)
    {
      if (!(v4 | v6))
      {
LABEL_60:
        *a3 = -4194304;
        return result;
      }
      goto LABEL_59;
    }
    unsigned int v14 = *a2 << 16;
    if (v7 >= 0x10000) {
      unsigned int v14 = *a2 & 0x7FFFFF;
    }
    LODWORD(v15) = v14 << 8;
    if (HIBYTE(v14)) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = v15;
    }
    char v16 = byte_100404CE8[v15 >> 24];
    if (HIBYTE(v14)) {
      char v17 = 16 * (v7 < 0x10000);
    }
    else {
      char v17 = (16 * (v7 < 0x10000)) | 8;
    }
    char v18 = v17 + v16 - 8;
    int v13 = 1 - v18;
    v7 <<= v18;
    if ((*result >> 23)) {
      goto LABEL_44;
    }
  }
  if (!v6) {
    goto LABEL_52;
  }
  unsigned int v19 = *result << 16;
  if (v6 >= 0x10000) {
    unsigned int v19 = *result & 0x7FFFFF;
  }
  LODWORD(v20) = v19 << 8;
  if (HIBYTE(v19)) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = v20;
  }
  char v21 = byte_100404CE8[v20 >> 24];
  if (HIBYTE(v19)) {
    char v22 = 16 * (v6 < 0x10000);
  }
  else {
    char v22 = (16 * (v6 < 0x10000)) | 8;
  }
  char v23 = v22 + v21 - 8;
  int v4 = 1 - v23;
  v6 <<= v23;
LABEL_44:
  int v24 = v4 - v13;
  uint64_t v25 = v6 | 0x800000;
  unint64_t v26 = v7 | 0x800000;
  if (v25 < v26) {
    int v27 = 125;
  }
  else {
    int v27 = 126;
  }
  int v28 = v27 + v24;
  char v29 = 30;
  if (v25 < v26) {
    char v29 = 31;
  }
  unint64_t v30 = v25 << v29;
  unint64_t v31 = v30 / v26;
  if (((v30 / v26) & 0x3F) != 0)
  {
    if ((unsigned __int16)v28 < 0xFDu) {
      goto LABEL_63;
    }
  }
  else
  {
    LODWORD(v31) = (v31 * (unint64_t)v26 != v30) | v31;
    if ((unsigned __int16)v28 < 0xFDu) {
      goto LABEL_63;
    }
  }
  if ((v28 & 0x8000) != 0)
  {
    int v32 = -v28;
    unsigned int v33 = (unsigned __int16)v32;
    BOOL v34 = v31 != 0;
    LODWORD(v31) = (v31 >> v32) | (v31 << -(char)v32 != 0);
    int v28 = 0;
    if (v33 > 0x1E) {
      LODWORD(v31) = v34;
    }
  }
  else
  {
    if ((unsigned __int16)v28 > 0xFDu || v31 + 64 < 0) {
      goto LABEL_59;
    }
    int v28 = 253;
  }
LABEL_63:
  unsigned int v35 = v8 & 0x80000000;
  int v36 = v28 << 23;
  unsigned int v37 = ~((v31 & 0x7F) == 64) & ((v31 + 64) >> 7);
  if (!v37) {
    int v36 = 0;
  }
  *a3 = (v37 | v35) + v36;
  return result;
}

BOOL sub_1002C7324(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  if ((~*a2 & 0x7F800000) == 0 && (*a2 & 0x7FFFFF) != 0) {
    return 0;
  }
  unsigned int v4 = *a1;
  if ((~*a1 & 0x7F800000) == 0 && (*a1 & 0x7FFFFF) != 0) {
    return 0;
  }
  if (v2 >> 31 == v4 >> 31)
  {
    if (v2 == v4) {
      return 0;
    }
    return v2 >> 31 != v2 < v4;
  }
  else
  {
    BOOL v7 = ((v4 | v2) & 0x7FFFFFFF) != 0;
    return (v2 & 0x80000000) != 0 && v7;
  }
}

BOOL sub_1002C739C(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *a1;
  if ((~*a1 & 0x7F800000) == 0 && (*a1 & 0x7FFFFF) != 0) {
    return 0;
  }
  unsigned int v4 = *a2;
  if ((~*a2 & 0x7F800000) == 0 && (*a2 & 0x7FFFFF) != 0) {
    return 0;
  }
  if (v2 >> 31 == v4 >> 31)
  {
    if (v2 == v4) {
      return 0;
    }
    return v2 >> 31 != v2 < v4;
  }
  else
  {
    BOOL v7 = ((v4 | v2) & 0x7FFFFFFF) != 0;
    return (v2 & 0x80000000) != 0 && v7;
  }
}

void *sub_1002C7414(void *result, int a2)
{
  if (a2)
  {
    if (a2 >= 0) {
      uint64_t v2 = a2;
    }
    else {
      uint64_t v2 = -a2;
    }
    unsigned int v3 = v2 << 16;
    if (v2 >= 0x10000) {
      unsigned int v3 = v2;
    }
    LODWORD(v4) = v3 << 8;
    if (HIBYTE(v3)) {
      unint64_t v4 = v3;
    }
    else {
      unint64_t v4 = v4;
    }
    if (HIBYTE(v3)) {
      char v5 = 16 * (v2 < 0x10000);
    }
    else {
      char v5 = (16 * (v2 < 0x10000)) | 8;
    }
    char v6 = v5 + byte_100404CE8[v4 >> 24] + 21;
    *uint64_t result = (v2 << v6)
            + ((unint64_t)(a2 >> 31) << 63)
            + ((unint64_t)(1074 - v6) << 52);
  }
  else
  {
    *uint64_t result = 0;
  }
  return result;
}

unint64_t *sub_1002C7494(unint64_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (a2 >= 0) {
      unint64_t v3 = a2;
    }
    else {
      unint64_t v3 = -a2;
    }
    sub_1002CA830(&v4, (unint64_t)a2 >> 63, 1084, v3);
    *uint64_t v2 = v4;
    return v2;
  }
  else
  {
    *uint64_t result = (a2 >> 63) & 0xC3E0000000000000;
  }
  return result;
}

uint64_t sub_1002C7508(int *a1)
{
  int v1 = *a1;
  unsigned int v2 = (*a1 >> 23);
  if (v2 < 0x7F) {
    return 0;
  }
  int v4 = v1 & 0x7FFFFF;
  if (v2 < 0x9E)
  {
    unsigned int v5 = ((v4 << 8) | 0x80000000) >> (-98 - v2);
    if (v1 >= 0) {
      return v5;
    }
    else {
      return -v5;
    }
  }
  else if (v1 == -822083584)
  {
    return 0x80000000;
  }
  else if ((v2 != 255 || v4 == 0) && v1 <= -1)
  {
    return 0x80000000;
  }
  else
  {
    return 0x7FFFFFFFLL;
  }
}

uint64_t sub_1002C757C(unsigned int *a1)
{
  unint64_t v1 = *a1;
  unsigned int v2 = (v1 >> 23);
  unsigned int v3 = v1 & 0x7FFFFF;
  BOOL v4 = (v1 & 0x7FFFFF) == 0;
  if (v2 != 255) {
    BOOL v4 = 1;
  }
  if ((v1 & 0x80000000) == 0) {
    BOOL v4 = 0;
  }
  LODWORD(v5) = v3 | 0x800000;
  if ((v1 & 0x7F800000) != 0) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v3;
  }
  unint64_t v6 = v5 << 32;
  if (v2 <= 0xA9)
  {
    if (v2 < 0x6C)
    {
      unint64_t v6 = v5 != 0;
      goto LABEL_14;
    }
    unint64_t v6 = (v6 >> (-86 - v2)) | (v6 << ((v1 >> 23) + 22) != 0);
  }
  if (v6 > 0xFFFFFFFF7FFLL)
  {
LABEL_19:
    if (v4) {
      return 0x80000000;
    }
    else {
      return 0x7FFFFFFFLL;
    }
  }
LABEL_14:
  unsigned int v7 = ((v6 + 2048) >> 12) & ~((v6 & 0xFFF) == 2048);
  if (v4) {
    uint64_t result = -v7;
  }
  else {
    uint64_t result = v7;
  }
  if (v7 && v4 != result >> 31) {
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1002C7638(uint64_t *a1)
{
  unint64_t v1 = (unint64_t)*a1 >> 52;
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFLL;
  BOOL v3 = v2 == 0;
  unsigned int v4 = v1 & 0x7FF;
  if ((v1 & 0x7FF) != 0) {
    v2 |= 0x10000000000000uLL;
  }
  if (v4 != 2047) {
    BOOL v3 = 1;
  }
  BOOL v5 = *a1 < 0 && v3;
  if (v4 <= 0x426)
  {
    if (v4 < 0x3E9)
    {
      unint64_t v2 = v2 != 0;
      goto LABEL_14;
    }
    unint64_t v2 = (v2 >> (39 - v1)) | (v2 << (v1 + 25) != 0);
  }
  if (v2 > 0xFFFFFFFF7FFLL)
  {
LABEL_19:
    if (v5) {
      return 0x80000000;
    }
    else {
      return 0x7FFFFFFFLL;
    }
  }
LABEL_14:
  unsigned int v6 = ((v2 + 2048) >> 12) & ~((v2 & 0xFFF) == 2048);
  if (v5) {
    uint64_t result = -v6;
  }
  else {
    uint64_t result = v6;
  }
  if (v6 && v5 != result >> 31) {
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1002C76EC(uint64_t *a1)
{
  unint64_t v1 = (unint64_t)*a1 >> 52;
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFLL;
  BOOL v3 = v2 == 0;
  unsigned int v4 = v1 & 0x7FF;
  if ((v1 & 0x7FF) != 0) {
    v2 |= 0x10000000000000uLL;
  }
  if (v4 != 2047) {
    BOOL v3 = 1;
  }
  BOOL v5 = *a1 < 0 && v3;
  unint64_t v6 = (v2 >> (39 - v1)) | (v2 << (v1 + 25) != 0);
  if (v4 < 0x3E9) {
    unint64_t v6 = v2 != 0;
  }
  if (v4 > 0x426) {
    unint64_t v6 = v2;
  }
  uint64_t v7 = 4095;
  if (!v5) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v6 + v7;
  if (v8 >> 44
    || ((unint64_t v9 = v8 >> 12, !v5) ? (result = v9) : (result = -(int)v9),
        v9 && v5 != result >> 31))
  {
    if (v5) {
      return 0x80000000;
    }
    else {
      return 0x7FFFFFFFLL;
    }
  }
  return result;
}

unint64_t sub_1002C7790(uint64_t *a1)
{
  unsigned int v1 = ((unint64_t)*a1 >> 52) & 0x7FF;
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  if (!v1) {
    unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFLL;
  }
  BOOL v3 = v1 != 2047 || (*a1 & 0xFFFFFFFFFFFFFLL) == 0;
  BOOL v4 = *a1 < 0 && v3;
  if (v1 < 0x433)
  {
    if ((unsigned __int16)v1 < 0x3F4u)
    {
      return 0;
    }
    else
    {
      unint64_t v7 = v2 >> (51 - ((unint64_t)*a1 >> 52));
      uint64_t v8 = v2 << (((unint64_t)*a1 >> 52) - 51);
      if (v8 < 0) {
        unint64_t v9 = (v7 + 1) & ~(unint64_t)((v8 & 0x7FFFFFFFFFFFFFFFLL) == 0);
      }
      else {
        unint64_t v9 = v7;
      }
      if (v4) {
        unint64_t result = -(uint64_t)v9;
      }
      else {
        unint64_t result = v9;
      }
      if (v9)
      {
        unint64_t v10 = 0x8000000000000000;
        if (!v4) {
          unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        if (result >> 63 != v4) {
          return v10;
        }
      }
    }
  }
  else if ((unsigned __int16)v1 > 0x43Eu || (unint64_t v5 = v2 << (v1 - 51), (v5 & 0x8000000000000000) != 0))
  {
    if (v4) {
      return 0x8000000000000000;
    }
    else {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else if (v4)
  {
    return -(uint64_t)v5;
  }
  else
  {
    return v5;
  }
  return result;
}

uint64_t *sub_1002C7860@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = *result;
  uint64_t v3 = ((unint64_t)*result >> 52) & 0x7FF;
  unint64_t v4 = *result & 0xFFFFFFFFFFFFFLL;
  if (v3 == 2047)
  {
    unsigned int v5 = HIDWORD(v2) & 0x80000000 | ((unint64_t)v2 >> 29) & 0x3FFFFF | 0x7FC00000;
    if (!v4) {
      unsigned int v5 = HIDWORD(v2) & 0x80000000 | 0x7F800000;
    }
    *a2 = v5;
    return result;
  }
  int v6 = (v4 >> 22) | ((v2 & 0x3FFFFF) != 0);
  if (!(v3 | v6))
  {
    *a2 = HIDWORD(v2) & 0x80000000;
    return result;
  }
  unsigned int v7 = v3 - 897;
  unsigned int v8 = v6 | 0x40000000;
  if ((v3 - 897) < 0xFD) {
    goto LABEL_15;
  }
  if (v3 <= 0x380)
  {
    unsigned int v8 = (v8 >> (-127 - ((unint64_t)*result >> 52))) | (v8 << (((unint64_t)v2 >> 52) - 1) != 0);
    unsigned int v7 = 0;
    if (v3 < 0x363) {
      unsigned int v8 = 1;
    }
    goto LABEL_15;
  }
  if (v7 <= 0xFD && ((v6 + 1073741888) & 0x80000000) == 0)
  {
    unsigned int v7 = 253;
LABEL_15:
    unsigned int v9 = v7 << 23;
    unsigned int v10 = ~((v8 & 0x7F) == 64) & ((v8 + 64) >> 7);
    if (v10) {
      unsigned int v11 = v9;
    }
    else {
      unsigned int v11 = 0;
    }
    *a2 = (v10 | HIDWORD(v2) & 0x80000000) + v11;
    return result;
  }
  if (v2 >= 0) {
    int v12 = 2139095040;
  }
  else {
    int v12 = -8388608;
  }
  *a2 = v12;
  return result;
}

unint64_t *sub_1002C7984@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  unint64_t v6 = *a1 >> 63;
  if (v6 == *a2 >> 63) {
    return sub_1002CA414(a3, v4, v5, v6);
  }
  else {
    return sub_1002CA61C(a3, v4, v5, v6);
  }
}

unint64_t *sub_1002C79B0@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  unint64_t v6 = *a1 >> 63;
  if (v6 == *a2 >> 63) {
    return sub_1002CA61C(a3, v4, v5, v6);
  }
  else {
    return sub_1002CA414(a3, v4, v5, v6);
  }
}

unint64_t *sub_1002C79DC@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = (*result >> 52) & 0x7FF;
  unint64_t v5 = *a2;
  unint64_t v6 = *result & 0xFFFFFFFFFFFFFLL;
  uint64_t v7 = (*a2 >> 52) & 0x7FF;
  uint64_t v8 = *a2 & 0xFFFFFFFFFFFFFLL;
  unint64_t v9 = *a2 ^ *result;
  if (v4 == 2047)
  {
    if (v6) {
      goto LABEL_11;
    }
    if (v7 == 2047 && v8 != 0) {
      goto LABEL_11;
    }
    unint64_t v11 = v5 >> 52;
LABEL_28:
    unint64_t v16 = v9 & 0x8000000000000000 | 0x7FF0000000000000;
    if (!(v11 & 0x7FF | v8)) {
      unint64_t v16 = 0xFFF8000000000000;
    }
    *a3 = v16;
    return result;
  }
  if (v7 == 2047)
  {
    if (v8)
    {
LABEL_11:
      if (v6) {
        BOOL v12 = (~v3 & 0x7FF0000000000000) == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12) {
        unint64_t v13 = *result;
      }
      else {
        unint64_t v13 = *a2;
      }
      if ((v3 & 0x7FF8000000000000) != 0x7FF0000000000000 || (v3 & 0x7FFFFFFFFFFFFLL) == 0) {
        unint64_t v15 = v13;
      }
      else {
        unint64_t v15 = *result;
      }
      *a3 = v15 | 0x8000000000000;
      return result;
    }
    unint64_t v11 = v3 >> 52;
    uint64_t v8 = *result & 0xFFFFFFFFFFFFFLL;
    goto LABEL_28;
  }
  if (!v4)
  {
    if (!v6) {
      goto LABEL_63;
    }
    unint64_t v4 = HIDWORD(v6);
    if (!HIDWORD(v6)) {
      LODWORD(v4) = *result;
    }
    char v17 = (32 * (HIDWORD(v6) == 0)) | 0x10;
    if (v4 < 0x10000) {
      LODWORD(v4) = v4 << 16;
    }
    else {
      char v17 = 32 * (HIDWORD(v6) == 0);
    }
    unint64_t result = (unint64_t *)BYTE3(v4);
    if (result)
    {
      unint64_t v4 = v4;
    }
    else
    {
      v17 |= 8u;
      unint64_t v4 = (v4 << 8);
    }
    char v18 = v17 + byte_100404CE8[v4 >> 24] - 11;
    v6 <<= v18;
    LODWORD(v4) = 1 - v18;
    if (v7) {
      goto LABEL_51;
    }
LABEL_41:
    if (v8)
    {
      if (HIDWORD(v8)) {
        LODWORD(v5) = (*a2 & 0xFFFFFFFFFFFFFLL) >> 32;
      }
      char v19 = (32 * (HIDWORD(v8) == 0)) | 0x10;
      if (v5 < 0x10000) {
        LODWORD(v5) = v5 << 16;
      }
      else {
        char v19 = 32 * (HIDWORD(v8) == 0);
      }
      if (BYTE3(v5))
      {
        unint64_t v5 = v5;
      }
      else
      {
        v19 |= 8u;
        unint64_t v5 = (v5 << 8);
      }
      char v20 = v19 + byte_100404CE8[v5 >> 24] - 11;
      v8 <<= v20;
      LODWORD(v7) = 1 - v20;
      goto LABEL_51;
    }
LABEL_63:
    *a3 = v9 & 0x8000000000000000;
    return result;
  }
  if (!v7) {
    goto LABEL_41;
  }
LABEL_51:
  int v21 = v7 + v4;
  unint64_t v22 = v6 << 10;
  uint64_t v23 = v22 | 0x4000000000000000;
  uint64_t v24 = v8 << 11;
  unint64_t v25 = v24 | 0x8000000000000000;
  unint64_t v26 = (v22 | 0x4000000000000000) >> 32;
  unint64_t v27 = (v24 | 0x8000000000000000) >> 32;
  unint64_t v28 = (v24 & 0xFFFFF800) * (unint64_t)v26;
  unint64_t v29 = v27 * (unint64_t)(v22 & 0xFFFFFC00);
  BOOL v30 = __CFADD__(v29, v28);
  unint64_t v31 = v29 + v28;
  int v32 = &_mh_execute_header;
  if (!v30) {
    int v32 = 0;
  }
  unint64_t v33 = v25 * v23;
  BOOL v30 = v33 >= v31 << 32;
  unint64_t v34 = (unint64_t)v32 + HIDWORD(v31) + v27 * (unint64_t)v26;
  if (!v30) {
    ++v34;
  }
  unint64_t v35 = v34 | (v33 != 0);
  char v36 = v34 >> 62 == 0;
  if (v36) {
    int v37 = -1024;
  }
  else {
    int v37 = -1023;
  }
  uint64_t v38 = (v21 + v37);
  unint64_t v39 = v35 << v36;
  if (v38 >= 0x7FD)
  {
    if ((v38 & 0x8000) != 0)
    {
      unsigned int v40 = -(__int16)v38;
      BOOL v41 = v35 != 0;
      unint64_t v39 = (v39 >> v40) | (v39 << v38 != 0);
      uint64_t v38 = 0;
      if (v40 > 0x3E) {
        unint64_t v39 = v41;
      }
    }
    else
    {
      if ((unsigned __int16)v38 > 0x7FDu || ((v39 + 512) & 0x8000000000000000) != 0)
      {
        *a3 = v9 & 0x8000000000000000 | 0x7FF0000000000000;
        return result;
      }
      uint64_t v38 = 2045;
    }
  }
  unint64_t v42 = v9 & 0x8000000000000000;
  uint64_t v43 = v38 << 52;
  unint64_t v44 = ~(unint64_t)((v39 & 0x3FF) == 512) & ((v39 + 512) >> 10);
  if (!v44) {
    uint64_t v43 = 0;
  }
  *a3 = (v44 | v42) + v43;
  return result;
}

unint64_t *sub_1002C7C94@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result;
  uint64_t v4 = (*result >> 52) & 0x7FF;
  uint64_t v5 = *result & 0xFFFFFFFFFFFFFLL;
  unint64_t v6 = ((unint64_t)*a2 >> 52) & 0x7FF;
  unint64_t v7 = *a2 & 0xFFFFFFFFFFFFFLL;
  unint64_t v8 = *a2 ^ *result;
  if (v4 == 2047)
  {
    if (!v5)
    {
      if (v6 == 2047)
      {
        if (!v7) {
          goto LABEL_56;
        }
        goto LABEL_9;
      }
LABEL_62:
      *a3 = v8 & 0x8000000000000000 | 0x7FF0000000000000;
      return result;
    }
LABEL_9:
    if (v5) {
      BOOL v9 = (~v3 & 0x7FF0000000000000) == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9) {
      unint64_t v10 = *result;
    }
    else {
      unint64_t v10 = *a2;
    }
    if ((v3 & 0x7FF8000000000000) != 0x7FF0000000000000 || (v3 & 0x7FFFFFFFFFFFFLL) == 0) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = *result;
    }
    *a3 = v12 | 0x8000000000000;
    return result;
  }
  if (v6)
  {
    if (v6 == 2047)
    {
      if (v7) {
        goto LABEL_9;
      }
LABEL_51:
      *a3 = v8 & 0x8000000000000000;
      return result;
    }
  }
  else
  {
    if (!v7)
    {
      if (!(v4 | v5))
      {
LABEL_56:
        *a3 = 0xFFF8000000000000;
        return result;
      }
      goto LABEL_62;
    }
    unint64_t v6 = HIDWORD(v7);
    if (!HIDWORD(v7)) {
      LODWORD(v6) = *a2;
    }
    char v13 = (32 * (HIDWORD(v7) == 0)) | 0x10;
    if (v6 < 0x10000) {
      LODWORD(v6) = v6 << 16;
    }
    else {
      char v13 = 32 * (HIDWORD(v7) == 0);
    }
    unint64_t result = (unint64_t *)BYTE3(v6);
    if (result)
    {
      unint64_t v6 = v6;
    }
    else
    {
      v13 |= 8u;
      unint64_t v6 = (v6 << 8);
    }
    char v14 = v13 + byte_100404CE8[v6 >> 24] - 11;
    v7 <<= v14;
    LODWORD(v6) = 1 - v14;
  }
  if (!v4)
  {
    if (!v5) {
      goto LABEL_51;
    }
    if (HIDWORD(v5)) {
      LODWORD(v3) = HIDWORD(v5);
    }
    char v15 = (32 * (HIDWORD(v5) == 0)) | 0x10;
    if (v3 < 0x10000) {
      LODWORD(v3) = v3 << 16;
    }
    else {
      char v15 = 32 * (HIDWORD(v5) == 0);
    }
    if (BYTE3(v3))
    {
      unint64_t v3 = v3;
    }
    else
    {
      v15 |= 8u;
      unint64_t v3 = (v3 << 8);
    }
    char v16 = v15 + byte_100404CE8[v3 >> 24] - 11;
    v5 <<= v16;
    LODWORD(v4) = 1 - v16;
  }
  int v17 = v4 - v6;
  uint64_t v18 = v5 | 0x10000000000000;
  BOOL v19 = (v5 | 0x10000000000000uLL) >= (v7 | 0x10000000000000);
  if ((v5 | 0x10000000000000uLL) < (v7 | 0x10000000000000)) {
    int v20 = 1021;
  }
  else {
    int v20 = 1022;
  }
  uint64_t v21 = (v20 + v17);
  char v22 = 10;
  if (!v19) {
    char v22 = 11;
  }
  uint64_t v23 = v18 << v22;
  unint64_t v24 = ((v7 | 0x10000000000000) >> 21);
  unsigned int v25 = 0x7FFFFFFFFFFFFFFFLL / v24 - 2;
  unint64_t v26 = HIDWORD(v23) * (unint64_t)v25;
  uint64_t v27 = (v23 - ((v26 >> 31) & 0xFFFFFFFE) * v24) << 28;
  unsigned int v28 = (v7 & 0x1FFFFF) << 7;
  unint64_t v29 = v27 - ((v26 >> 31) & 0xFFFFFFFE) * v28;
  unsigned int v30 = ((HIDWORD(v29) * (unint64_t)v25) >> 32) + 4;
  unint64_t v31 = (v26 & 0xFFFFFFFF00000000) + 16 * v30;
  if ((v30 & 0x1C) != 0)
  {
    if ((unsigned __int16)v21 < 0x7FDu) {
      goto LABEL_65;
    }
  }
  else
  {
    unint64_t v32 = v31 & 0xFFFFFFFFFFFFFF80;
    unsigned int v33 = (2 * v30) & 0xFFFFFFF0;
    unint64_t v34 = (v29 - v24 * (unint64_t)v33) << 28;
    if (((v34 - v28 * (unint64_t)v33) & 0x8000000000000000) != 0)
    {
      unint64_t v31 = v32 - 128;
      if ((unsigned __int16)v21 < 0x7FDu) {
        goto LABEL_65;
      }
    }
    else
    {
      unint64_t v31 = v32 | (v34 != v28 * (unint64_t)v33);
      if ((unsigned __int16)v21 < 0x7FDu) {
        goto LABEL_65;
      }
    }
  }
  if ((v21 & 0x8000) != 0)
  {
    unsigned int v35 = -(__int16)v21;
    BOOL v36 = v31 != 0;
    unint64_t v31 = (v31 >> v35) | (v31 << v21 != 0);
    uint64_t v21 = 0;
    if (v35 > 0x3E) {
      unint64_t v31 = v36;
    }
  }
  else
  {
    if ((unsigned __int16)v21 > 0x7FDu || ((v31 + 512) & 0x8000000000000000) != 0) {
      goto LABEL_62;
    }
    uint64_t v21 = 2045;
  }
LABEL_65:
  unint64_t v37 = v8 & 0x8000000000000000;
  uint64_t v38 = v21 << 52;
  unint64_t v39 = ~(unint64_t)((v31 & 0x3FF) == 512) & ((v31 + 512) >> 10);
  if (!v39) {
    uint64_t v38 = 0;
  }
  *a3 = (v39 | v37) + v38;
  return result;
}

BOOL sub_1002C7F7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if ((~*a1 & 0x7FF0000000000000) == 0 && (*a1 & 0xFFFFFFFFFFFFFLL) != 0) {
    return 0;
  }
  uint64_t v4 = *a2;
  if ((~*a2 & 0x7FF0000000000000) == 0 && (*a2 & 0xFFFFFFFFFFFFFLL) != 0) {
    return 0;
  }
  return ((v4 | v2) & 0x7FFFFFFFFFFFFFFFLL) == 0 || v2 == v4;
}

uint64_t sub_1002C7FCC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  if ((~*a1 & 0x7FF0000000000000) == 0 && (*a1 & 0xFFFFFFFFFFFFFLL) != 0) {
    return 0;
  }
  unint64_t v4 = *a2;
  if ((~*a2 & 0x7FF0000000000000) == 0 && (*a2 & 0xFFFFFFFFFFFFFLL) != 0) {
    return 0;
  }
  if (v2 >> 63 == v4 >> 63)
  {
    return v2 == v4 || v2 >> 63 != v2 < v4;
  }
  else
  {
    BOOL v7 = ((v4 | v2) & 0x7FFFFFFFFFFFFFFFLL) == 0;
    return (v2 & 0x8000000000000000) != 0 || v7;
  }
}

uint64_t sub_1002C8054@<X0>(uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X8>)
{
  int v4 = *(_DWORD *)result;
  int v5 = (*(_DWORD *)result >> 23);
  unsigned int v6 = *(_DWORD *)result & 0x7FFFFF;
  unsigned int v7 = *a3;
  int v8 = (*a2 >> 23);
  unsigned int v9 = *a2 & 0x7FFFFF;
  unsigned int v10 = *a3 & 0x7FFFFF;
  unsigned int v11 = *a2 ^ *(_DWORD *)result;
  if (v5 == 255)
  {
    if (!v6 && (!v9 || v8 != 255))
    {
      if (!(v8 | v9)) {
        goto LABEL_35;
      }
      goto LABEL_32;
    }
    goto LABEL_9;
  }
  unint64_t result = 2139095040;
  if ((~*a2 & 0x7F800000) == 0)
  {
    if (!v9)
    {
      if (!(v5 | v6))
      {
LABEL_35:
        int v16 = -4194304;
        goto LABEL_36;
      }
LABEL_32:
      int v16 = v11 & 0x80000000 | 0x7F800000;
      if ((~v7 & 0x7F800000) != 0) {
        goto LABEL_83;
      }
      if (!v10)
      {
        if (((v11 ^ v7) & 0x80000000) != 0) {
          goto LABEL_35;
        }
LABEL_83:
        *a4 = v16;
        return result;
      }
LABEL_22:
      if ((v16 & 0x7FC00000) == 0x7F800000 && (v16 & 0x3FFFFF) != 0)
      {
        *a4 = v16 | 0x400000;
        return result;
      }
      goto LABEL_36;
    }
LABEL_9:
    if (v6) {
      BOOL v12 = (~v4 & 0x7F800000) == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12) {
      int v13 = v4;
    }
    else {
      int v13 = *a2;
    }
    if ((v4 & 0x7FC00000) != 0x7F800000 || (v4 & 0x3FFFFF) == 0) {
      int v15 = v13;
    }
    else {
      int v15 = v4;
    }
    int v16 = v15 | 0x400000;
    goto LABEL_22;
  }
  int v17 = (v7 >> 23);
  if (v17 == 255)
  {
    int v16 = *a3;
    if (v10)
    {
      int v16 = 0;
LABEL_36:
      if ((v16 & 0x7FFFFF) == 0 || (~v16 & 0x7F800000) != 0) {
        int v16 = *a3;
      }
      *a4 = v16 | 0x400000;
      return result;
    }
    goto LABEL_83;
  }
  if (v5)
  {
    if ((*a2 >> 23)) {
      goto LABEL_62;
    }
    goto LABEL_52;
  }
  if (!v6) {
    goto LABEL_80;
  }
  unsigned int v19 = v6 << 16;
  if (v6 >= 0x10000) {
    unsigned int v19 = v6;
  }
  unint64_t result = 16 * (v6 < 0x10000);
  LODWORD(v20) = v19 << 8;
  if (HIBYTE(v19)) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = v20;
  }
  char v21 = byte_100404CE8[v20 >> 24];
  if (HIBYTE(v19)) {
    char v22 = 16 * (v6 < 0x10000);
  }
  else {
    char v22 = (16 * (v6 < 0x10000)) | 8;
  }
  char v23 = v22 + v21 - 8;
  int v5 = 1 - v23;
  v6 <<= v23;
  if (!(*a2 >> 23))
  {
LABEL_52:
    if (v9)
    {
      unsigned int v24 = *a2 << 16;
      if (v9 >= 0x10000) {
        unsigned int v24 = *a2 & 0x7FFFFF;
      }
      unint64_t result = 16 * (v9 < 0x10000);
      LODWORD(v25) = v24 << 8;
      if (HIBYTE(v24)) {
        unint64_t v25 = v24;
      }
      else {
        unint64_t v25 = v25;
      }
      char v26 = byte_100404CE8[v25 >> 24];
      if (HIBYTE(v24)) {
        char v27 = 16 * (v9 < 0x10000);
      }
      else {
        char v27 = (16 * (v9 < 0x10000)) | 8;
      }
      char v28 = v27 + v26 - 8;
      int v8 = 1 - v28;
      v9 <<= v28;
      goto LABEL_62;
    }
LABEL_80:
    int v16 = *a3;
    if (((v11 ^ v7) & 0x80000000) == 0 || v17 | v10) {
      goto LABEL_83;
    }
    goto LABEL_82;
  }
LABEL_62:
  int v29 = v8 + v5;
  unint64_t v30 = ((v9 << 7) | 0x40000000) * (unint64_t)((v6 << 7) | 0x40000000);
  if (v30 >> 61) {
    int v31 = -126;
  }
  else {
    int v31 = -127;
  }
  int v32 = v29 + v31;
  unint64_t v33 = v30 << (v30 >> 61 == 0);
  if (!(v7 >> 23))
  {
    if (!v10)
    {
      int v47 = v32 - 1;
      unsigned int v48 = (v33 >> 31) | ((v33 & 0x7FFFC000) != 0);
      BOOL v49 = v11 >> 31;
      if ((unsigned __int16)(v32 - 1) < 0xFDu) {
        goto LABEL_132;
      }
      goto LABEL_126;
    }
    unsigned int v34 = *a3 << 16;
    if (v10 >= 0x10000) {
      unsigned int v34 = *a3 & 0x7FFFFF;
    }
    LODWORD(v35) = v34 << 8;
    unint64_t result = HIBYTE(v34);
    if (result) {
      unint64_t v35 = v34;
    }
    else {
      unint64_t v35 = v35;
    }
    char v36 = byte_100404CE8[v35 >> 24];
    if (result) {
      char v37 = 16 * (v10 < 0x10000);
    }
    else {
      char v37 = (16 * (v10 < 0x10000)) | 8;
    }
    char v38 = v37 + v36 - 8;
    int v17 = 1 - v38;
    v10 <<= v38;
  }
  uint64_t v39 = (v10 << 6) | 0x20000000;
  __int16 v40 = v32 - v17;
  if (((v11 ^ v7) & 0x80000000) == 0)
  {
    if (v40 <= 0)
    {
      if ((32 - v40) > 0x3E) {
        int v45 = 1;
      }
      else {
        int v45 = (v33 >> (32 - v40)) | (v33 << (v40 + 32) != 0);
      }
      unsigned int v46 = v45 + v39;
    }
    else
    {
      if ((unsigned __int16)(v32 - v17) > 0x3Eu) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = ((unint64_t)(v39 << 32) >> (v32 - v17)) | (v39 << 32 << (v17 - v32) != 0);
      }
      unsigned int v46 = ((v41 + v33) >> 32) | (v41 + v33 != 0);
      int v17 = v32;
    }
    BOOL v49 = v11 >> 31;
    if (v46 >> 30) {
      int v47 = v17;
    }
    else {
      int v47 = v17 - 1;
    }
    if (v46 >> 30) {
      unsigned int v48 = v46;
    }
    else {
      unsigned int v48 = 2 * v46;
    }
    if ((unsigned __int16)v47 < 0xFDu) {
      goto LABEL_132;
    }
    goto LABEL_126;
  }
  unint64_t v42 = v39 << 32;
  if ((((_WORD)v32 - (_WORD)v17) & 0x8000) == 0)
  {
    if ((unsigned __int16)v32 != (unsigned __int16)v17)
    {
      if ((unsigned __int16)(v32 - v17) > 0x3Eu) {
        uint64_t v52 = 1;
      }
      else {
        uint64_t v52 = (v42 >> (v32 - v17)) | (v42 << (v17
      }
                                                                              - v32) != 0);
      BOOL v44 = v11 >> 31;
      unint64_t v43 = v33 - v52;
      goto LABEL_114;
    }
    unint64_t v43 = v33 - v42;
    if (v43)
    {
      if ((v43 & 0x8000000000000000) != 0)
      {
        BOOL v44 = (v11 & 0x80000000) == 0;
        unint64_t v43 = -(uint64_t)v43;
      }
      else
      {
        BOOL v44 = v11 >> 31;
      }
LABEL_114:
      int v17 = v32;
      goto LABEL_115;
    }
LABEL_82:
    int v16 = 0;
    goto LABEL_83;
  }
  unsigned int v50 = -v40;
  if (v50 > 0x3E) {
    uint64_t v51 = 1;
  }
  else {
    uint64_t v51 = (v33 >> v50) | (v33 << v40 != 0);
  }
  BOOL v44 = v7 >> 31;
  unint64_t v43 = v42 - v51;
LABEL_115:
  unint64_t v53 = HIDWORD(v43);
  char v54 = 32 * (HIDWORD(v43) == 0);
  if (!HIDWORD(v43)) {
    LODWORD(v53) = v43;
  }
  if (v53 < 0x10000)
  {
    char v54 = (32 * (HIDWORD(v43) == 0)) | 0x10;
    LODWORD(v53) = v53 << 16;
  }
  char v55 = v54 | 8;
  if (BYTE3(v53))
  {
    char v55 = v54;
    unint64_t v53 = v53;
  }
  else
  {
    unint64_t v53 = (v53 << 8);
  }
  char v56 = v55 + byte_100404CE8[v53 >> 24];
  int v47 = v17 - (char)(v56 - 1);
  if (((v56 - 33) & 0x80) != 0) {
    unsigned int v48 = (v43 >> (33 - v56)) | ((v43 & ~(-1 << (33 - v56))) != 0);
  }
  else {
    unsigned int v48 = v43 << (v56 - 33);
  }
  BOOL v49 = v44;
  if ((unsigned __int16)v47 < 0xFDu) {
    goto LABEL_132;
  }
LABEL_126:
  if ((v47 & 0x8000) != 0)
  {
    int v57 = -v47;
    unsigned int v58 = (unsigned __int16)v57;
    BOOL v59 = v48 != 0;
    unsigned int v48 = (v48 >> v57) | (v48 << -(char)v57 != 0);
    int v47 = 0;
    if (v58 > 0x1E) {
      unsigned int v48 = v59;
    }
  }
  else
  {
    if ((unsigned __int16)v47 > 0xFDu || ((v48 + 64) & 0x80000000) != 0)
    {
      if (v49) {
        int v65 = -8388608;
      }
      else {
        int v65 = 2139095040;
      }
      *a4 = v65;
      return result;
    }
    int v47 = 253;
  }
LABEL_132:
  unsigned int v60 = v48 + 64;
  int v61 = ~((v48 & 0x7F) == 64);
  if (v49) {
    unsigned int v62 = 0x80000000;
  }
  else {
    unsigned int v62 = 0;
  }
  int v63 = v47 << 23;
  int v64 = v61 & (v60 >> 7);
  if (!v64) {
    int v63 = 0;
  }
  *a4 = (v64 | v62) + v63;
  return result;
}

unint64_t *sub_1002C85C0(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = result;
  unint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0x7FFFFFFFFFFFFFFFLL;
  if (v4 >= 0x7FF0000000000001)
  {
    *unint64_t result = 0x7FFFFFFFFFFFFFFFLL;
    return result;
  }
  if (v4 != 0x7FF0000000000000)
  {
    unsigned int v7 = a2;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0B20, memory_order_acquire) & 1) == 0)
    {
      int v32 = __cxa_guard_acquire(&qword_1004E0B20);
      unsigned int v7 = a2;
      if (v32)
      {
        unint64_t v57 = 0x3FF0000000000000;
        sub_1002C7C94(&v57, (uint64_t *)&qword_100404CC0, (unint64_t *)&qword_1004E0B18);
        __cxa_guard_release(&qword_1004E0B20);
        unsigned int v7 = a2;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0B30, memory_order_acquire) & 1) == 0)
    {
      unint64_t v33 = v7;
      int v34 = __cxa_guard_acquire(&qword_1004E0B30);
      unsigned int v7 = v33;
      if (v34)
      {
        unint64_t v57 = 0x3FE62E42FEFA39F1;
        sub_1002C7C94(&v57, (uint64_t *)&qword_100404CC0, (unint64_t *)&qword_1004E0B28);
        __cxa_guard_release(&qword_1004E0B30);
        unsigned int v7 = v33;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0B40, memory_order_acquire) & 1) == 0)
    {
      unint64_t v35 = v7;
      int v36 = __cxa_guard_acquire(&qword_1004E0B40);
      unsigned int v7 = v35;
      if (v36)
      {
        unint64_t v57 = 0x3FCEBFBDFF82A45ALL;
        sub_1002C7C94(&v57, (uint64_t *)&qword_100404CC0, (unint64_t *)&qword_1004E0B38);
        __cxa_guard_release(&qword_1004E0B40);
        unsigned int v7 = v35;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0B50, memory_order_acquire) & 1) == 0)
    {
      char v37 = v7;
      int v38 = __cxa_guard_acquire(&qword_1004E0B50);
      unsigned int v7 = v37;
      if (v38)
      {
        unint64_t v57 = 0x3FAC6B08D81FEC75;
        sub_1002C7C94(&v57, (uint64_t *)&qword_100404CC0, (unint64_t *)&qword_1004E0B48);
        __cxa_guard_release(&qword_1004E0B50);
        unsigned int v7 = v37;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0B60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v39 = v7;
      int v40 = __cxa_guard_acquire(&qword_1004E0B60);
      unsigned int v7 = v39;
      if (v40)
      {
        unint64_t v57 = 0x3F83B2A72B4F3CD3;
        sub_1002C7C94(&v57, (uint64_t *)&qword_100404CC0, (unint64_t *)&qword_1004E0B58);
        __cxa_guard_release(&qword_1004E0B60);
        unsigned int v7 = v39;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0B70, memory_order_acquire) & 1) == 0)
    {
      uint64_t v41 = v7;
      int v42 = __cxa_guard_acquire(&qword_1004E0B70);
      unsigned int v7 = v41;
      if (v42)
      {
        unint64_t v57 = 0x3F55E7AA1566C2A4;
        sub_1002C7C94(&v57, (uint64_t *)&qword_100404CC0, &qword_1004E0B68);
        __cxa_guard_release(&qword_1004E0B70);
        unsigned int v7 = v41;
      }
    }
    if ((*v7 & 0x7FE0000000000000) < 0x4090000000000001)
    {
      sub_1002C79DC(v7, &qword_100404CC8, &v57);
      unint64_t v8 = v57;
    }
    else
    {
      unint64_t v8 = *v7 & 0x8000000000000000 | 0x4107700000000000;
    }
    unint64_t v57 = v8;
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFLL;
    BOOL v10 = (v8 & 0xFFFFFFFFFFFFFLL) == 0;
    unsigned int v11 = (v8 >> 52) & 0x7FF;
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    if (!v11) {
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFLL;
    }
    if (v11 != 2047) {
      BOOL v10 = 1;
    }
    if ((v8 & 0x8000000000000000) == 0) {
      BOOL v10 = 0;
    }
    if (v11 <= 0x426)
    {
      if (v11 < 0x3E9)
      {
        unint64_t v12 = v12 != 0;
LABEL_33:
        int v13 = ((v12 + 2048) >> 12) & ~((v12 & 0xFFF) == 2048);
        if (v10) {
          int v14 = -v13;
        }
        else {
          int v14 = v13;
        }
        if (!v13 || v10 == v14 >> 31)
        {
LABEL_41:
          int v15 = v14 >> 6;
          if (v14 >> 6 >= 1024) {
            int v15 = 1024;
          }
          if (v15 <= -1023) {
            int v15 = -1023;
          }
          unint64_t v56 = (unint64_t)(v15 + 1023) << 52;
          uint64_t v16 = (v8 >> 52) & 0x7FF;
          if (v16 > 0x3FE)
          {
            if (v16 < 0x433)
            {
              unint64_t v23 = 1 << (51 - (v8 >> 52));
              unint64_t v24 = v8 + (v23 >> 1);
              uint64_t v25 = -1;
              if ((v24 & (v23 - 1)) == 0) {
                uint64_t v25 = ~v23;
              }
              unint64_t v19 = v25 & -(uint64_t)v23 & v24;
              unint64_t v20 = v8 >> 63;
              if (v8 >> 63 != v19 >> 63) {
                goto LABEL_74;
              }
            }
            else
            {
              unint64_t v19 = v8;
              if (v9)
              {
                unint64_t v19 = v8;
                if (v16 == 2047)
                {
                  if ((v8 & 0x7FFFFFFFFFFFFLL) != 0 && (v8 & 0x7FF8000000000000) == 0x7FF0000000000000
                    || (~v8 & 0x7FF0000000000000) == 0)
                  {
                    unint64_t v19 = v8 | 0x8000000000000;
                  }
                  else
                  {
                    unint64_t v19 = 0x8000000000000;
                  }
                }
              }
              unint64_t v20 = v8 >> 63;
              if (v8 >> 63 != v19 >> 63) {
                goto LABEL_74;
              }
            }
          }
          else
          {
            BOOL v17 = v16 != 1022 || v9 == 0;
            unint64_t v18 = v8 & 0x8000000000000000 | 0x3FF0000000000000;
            if (v17) {
              unint64_t v18 = v8 & 0x8000000000000000;
            }
            if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
              unint64_t v19 = v18;
            }
            else {
              unint64_t v19 = v8;
            }
            unint64_t v20 = v8 >> 63;
            if (v8 >> 63 != v19 >> 63)
            {
LABEL_74:
              sub_1002CA414(&v55, v8, v19, v20);
              goto LABEL_75;
            }
          }
          sub_1002CA61C(&v55, v8, v19, v20);
LABEL_75:
          sub_1002C79DC(&v55, &qword_100404CD0, &v57);
          sub_1002C79DC(&v56, &qword_100404CC0, &v54);
          unint64_t v53 = qword_100404DE8[v14 & 0x3F];
          sub_1002C79DC(&v54, &v53, &v55);
          sub_1002C79DC(&qword_1004E0B68, &v57, &v43);
          unint64_t v26 = v43 >> 63;
          if (v43 >> 63 == (unint64_t)qword_1004E0B58 >> 63) {
            sub_1002CA414(&v44, v43, qword_1004E0B58, v26);
          }
          else {
            sub_1002CA61C(&v44, v43, qword_1004E0B58, v26);
          }
          sub_1002C79DC(&v44, &v57, &v45);
          unint64_t v27 = v45 >> 63;
          if (v45 >> 63 == (unint64_t)qword_1004E0B48 >> 63) {
            sub_1002CA414(&v46, v45, qword_1004E0B48, v27);
          }
          else {
            sub_1002CA61C(&v46, v45, qword_1004E0B48, v27);
          }
          sub_1002C79DC(&v46, &v57, &v47);
          unint64_t v28 = v47 >> 63;
          if (v47 >> 63 == (unint64_t)qword_1004E0B38 >> 63) {
            sub_1002CA414(&v48, v47, qword_1004E0B38, v28);
          }
          else {
            sub_1002CA61C(&v48, v47, qword_1004E0B38, v28);
          }
          sub_1002C79DC(&v48, &v57, &v49);
          unint64_t v29 = v49 >> 63;
          if (v49 >> 63 == (unint64_t)qword_1004E0B28 >> 63) {
            sub_1002CA414(&v50, v49, qword_1004E0B28, v29);
          }
          else {
            sub_1002CA61C(&v50, v49, qword_1004E0B28, v29);
          }
          sub_1002C79DC(&v50, &v57, &v51);
          unint64_t v30 = v51 >> 63;
          if (v51 >> 63 == (unint64_t)qword_1004E0B18 >> 63) {
            sub_1002CA414(&v52, v51, qword_1004E0B18, v30);
          }
          else {
            sub_1002CA61C(&v52, v51, qword_1004E0B18, v30);
          }
          return sub_1002C79DC(&v55, &v52, v2);
        }
LABEL_38:
        if (v10) {
          int v14 = 0x80000000;
        }
        else {
          int v14 = 0x7FFFFFFF;
        }
        goto LABEL_41;
      }
      unint64_t v12 = (v12 >> (39 - v11)) | (v12 << ((v8 >> 52) + 25) != 0);
    }
    if (v12 > 0xFFFFFFFF7FFLL) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
  BOOL v5 = (~v3 & 0x7FF0000000000000) != 0;
  if ((v3 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v5 = 1;
  }
  if (v3 != 0x7FF0000000000000 || !v5) {
    *unint64_t result = 0;
  }
  else {
    *unint64_t result = 0x7FF0000000000000;
  }
  return result;
}

unint64_t *sub_1002C8C64(unint64_t *result, void *a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0x7FFFFFFFFFFFFFFFLL;
  if (v4 > 0x7FF0000000000000) {
    goto LABEL_2;
  }
  if ((~v3 & 0x7FF0000000000000) == 0 && (v3 & 0xFFFFFFFFFFFFFLL) != 0) {
    goto LABEL_10;
  }
  if (v3 < 0)
  {
    if (v4)
    {
LABEL_2:
      *unint64_t result = 0x7FFFFFFFFFFFFFFFLL;
      return result;
    }
    goto LABEL_22;
  }
  if (!v4)
  {
LABEL_22:
    *unint64_t result = 0xFFF0000000000000;
    return result;
  }
LABEL_10:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0B80, memory_order_acquire) & 1) == 0)
  {
    uint64_t v25 = a2;
    int v26 = __cxa_guard_acquire(&qword_1004E0B80);
    a2 = v25;
    if (v26)
    {
      qword_1004E0B78 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1004E0B80);
      a2 = v25;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0B90, memory_order_acquire) & 1) == 0)
  {
    unint64_t v27 = a2;
    int v28 = __cxa_guard_acquire(&qword_1004E0B90);
    a2 = v27;
    if (v28)
    {
      unint64_t v61 = 0x4000000000000000;
      unint64_t v62 = 0xBFF0000000000000;
      sub_1002C7C94(&v62, (uint64_t *)&v61, (unint64_t *)&qword_1004E0B88);
      __cxa_guard_release(&qword_1004E0B90);
      a2 = v27;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0BA0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v29 = a2;
    int v30 = __cxa_guard_acquire(&qword_1004E0BA0);
    a2 = v29;
    if (v30)
    {
      unint64_t v61 = 0x4008000000000000;
      unint64_t v62 = 0x3FF0000000000000;
      sub_1002C7C94(&v62, (uint64_t *)&v61, (unint64_t *)&qword_1004E0B98);
      __cxa_guard_release(&qword_1004E0BA0);
      a2 = v29;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0BB0, memory_order_acquire) & 1) == 0)
  {
    int v31 = a2;
    int v32 = __cxa_guard_acquire(&qword_1004E0BB0);
    a2 = v31;
    if (v32)
    {
      unint64_t v61 = 0x4010000000000000;
      unint64_t v62 = 0xBFF0000000000000;
      sub_1002C7C94(&v62, (uint64_t *)&v61, (unint64_t *)&qword_1004E0BA8);
      __cxa_guard_release(&qword_1004E0BB0);
      a2 = v31;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0BC0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v33 = a2;
    int v34 = __cxa_guard_acquire(&qword_1004E0BC0);
    a2 = v33;
    if (v34)
    {
      unint64_t v61 = 0x4014000000000000;
      unint64_t v62 = 0x3FF0000000000000;
      sub_1002C7C94(&v62, (uint64_t *)&v61, (unint64_t *)&qword_1004E0BB8);
      __cxa_guard_release(&qword_1004E0BC0);
      a2 = v33;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0BD0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v35 = a2;
    int v36 = __cxa_guard_acquire(&qword_1004E0BD0);
    a2 = v35;
    if (v36)
    {
      unint64_t v61 = 0x4018000000000000;
      unint64_t v62 = 0xBFF0000000000000;
      sub_1002C7C94(&v62, (uint64_t *)&v61, (unint64_t *)&qword_1004E0BC8);
      __cxa_guard_release(&qword_1004E0BD0);
      a2 = v35;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0BE0, memory_order_acquire) & 1) == 0)
  {
    char v37 = a2;
    int v38 = __cxa_guard_acquire(&qword_1004E0BE0);
    a2 = v37;
    if (v38)
    {
      unint64_t v61 = 0x401C000000000000;
      unint64_t v62 = 0x3FF0000000000000;
      sub_1002C7C94(&v62, (uint64_t *)&v61, &qword_1004E0BD8);
      __cxa_guard_release(&qword_1004E0BE0);
      a2 = v37;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004E0BF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v39 = a2;
    int v40 = __cxa_guard_acquire(qword_1004E0BF0);
    a2 = v39;
    if (v40)
    {
      unint64_t v61 = 0x4020000000000000;
      unint64_t v62 = 0xBFF0000000000000;
      sub_1002C7C94(&v62, (uint64_t *)&v61, &qword_1004E0BE8);
      __cxa_guard_release(qword_1004E0BF0);
      a2 = v39;
    }
  }
  unint64_t v6 = *a2;
  uint64_t v7 = *a2 >> 44;
  unint64_t v61 = *a2 & 0xFFFFFFFFFFFLL | 0x3FF0000000000000;
  sub_1002CA61C(&v61, v61, 0x3FF0000000000000uLL, 0);
  unint64_t v8 = qword_100404FF0[2 * v7];
  unint64_t v60 = qword_100404FF0[(2 * v7) | 1u];
  sub_1002C79DC(&v61, &v60, &v59);
  if (v7 == 255)
  {
    unint64_t v57 = 0xBFF0000000000000;
    unint64_t v56 = 0x4080000000000000;
    sub_1002C7C94(&v57, (uint64_t *)&v56, &v58);
    unint64_t v9 = v59 >> 63;
    if (v59 >> 63 == v58 >> 63) {
      sub_1002CA414(&v62, v59, v58, v9);
    }
    else {
      sub_1002CA61C(&v62, v59, v58, v9);
    }
    unint64_t v59 = v62;
  }
  sub_1002C79DC(&v59, &v59, &v62);
  int v10 = ((v6 >> 52) & 0x7FF) - 1023;
  if (((v6 >> 52) & 0x7FF) == 0x3FF)
  {
    unint64_t v15 = 0;
  }
  else
  {
    if (v10 >= 0) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 1023 - ((v6 >> 52) & 0x7FF);
    }
    if (v11 >= 0x100) {
      char v12 = 16;
    }
    else {
      char v12 = 24;
    }
    char v13 = byte_100404CE8[(unint64_t)(v11 << v12) >> 24];
    if (v11 >= 0x100) {
      char v14 = 37;
    }
    else {
      char v14 = 45;
    }
    unint64_t v15 = (v11 << (v13 + v14))
        + ((unint64_t)(v10 >> 31) << 63)
        + ((unint64_t)(1074 - (char)(v13 + v14)) << 52);
  }
  unint64_t v55 = v15;
  sub_1002C79DC((unint64_t *)&unk_100404CD8, &v55, &v56);
  unint64_t v16 = v56 >> 63;
  if (v56 >> 63 == v8 >> 63) {
    sub_1002CA414(&v57, v56, v8, v16);
  }
  else {
    sub_1002CA61C(&v57, v56, v8, v16);
  }
  sub_1002C79DC(&qword_1004E0BE8, &v62, &v48);
  unint64_t v17 = v48 >> 63;
  if (v48 >> 63 == (unint64_t)qword_1004E0BC8 >> 63) {
    sub_1002CA414(&v49, v48, qword_1004E0BC8, v17);
  }
  else {
    sub_1002CA61C(&v49, v48, qword_1004E0BC8, v17);
  }
  sub_1002C79DC(&v49, &v62, &v50);
  unint64_t v18 = v50 >> 63;
  if (v50 >> 63 == (unint64_t)qword_1004E0BA8 >> 63) {
    sub_1002CA414(&v51, v50, qword_1004E0BA8, v18);
  }
  else {
    sub_1002CA61C(&v51, v50, qword_1004E0BA8, v18);
  }
  sub_1002C79DC(&v51, &v62, &v52);
  unint64_t v19 = v52 >> 63;
  if (v52 >> 63 == (unint64_t)qword_1004E0B88 >> 63) {
    sub_1002CA414(&v53, v52, qword_1004E0B88, v19);
  }
  else {
    sub_1002CA61C(&v53, v52, qword_1004E0B88, v19);
  }
  sub_1002C79DC(&v53, &v62, &v54);
  unint64_t v20 = v57 >> 63;
  if (v57 >> 63 == v54 >> 63) {
    sub_1002CA414(&v58, v57, v54, v20);
  }
  else {
    sub_1002CA61C(&v58, v57, v54, v20);
  }
  sub_1002C79DC(&qword_1004E0BD8, &v62, &v41);
  unint64_t v21 = v41 >> 63;
  if (v41 >> 63 == (unint64_t)qword_1004E0BB8 >> 63) {
    sub_1002CA414(&v42, v41, qword_1004E0BB8, v21);
  }
  else {
    sub_1002CA61C(&v42, v41, qword_1004E0BB8, v21);
  }
  sub_1002C79DC(&v42, &v62, &v43);
  unint64_t v22 = v43 >> 63;
  if (v43 >> 63 == (unint64_t)qword_1004E0B98 >> 63) {
    sub_1002CA414(&v44, v43, qword_1004E0B98, v22);
  }
  else {
    sub_1002CA61C(&v44, v43, qword_1004E0B98, v22);
  }
  sub_1002C79DC(&v44, &v62, &v45);
  unint64_t v23 = v45 >> 63;
  if (v45 >> 63 == (unint64_t)qword_1004E0B78 >> 63) {
    sub_1002CA414(&v46, v45, qword_1004E0B78, v23);
  }
  else {
    sub_1002CA61C(&v46, v45, qword_1004E0B78, v23);
  }
  sub_1002C79DC(&v46, &v59, &v47);
  unint64_t v24 = v58 >> 63;
  if (v58 >> 63 == v47 >> 63) {
    return sub_1002CA414(v2, v58, v47, v24);
  }
  else {
    return sub_1002CA61C(v2, v58, v47, v24);
  }
}

uint64_t sub_1002C92F0@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a1;
  unint64_t v59 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0C20, memory_order_acquire) & 1) == 0)
  {
    unint64_t v51 = v4;
    int v52 = __cxa_guard_acquire(&qword_1004E0C20);
    unint64_t v4 = v51;
    if (v52)
    {
      qword_1004E0C18 = 0;
      __cxa_guard_release(&qword_1004E0C20);
      unint64_t v4 = v51;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0C30, memory_order_acquire) & 1) == 0)
  {
    unint64_t v53 = v4;
    int v54 = __cxa_guard_acquire(&qword_1004E0C30);
    unint64_t v4 = v53;
    if (v54)
    {
      qword_1004E0C28 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1004E0C30);
      unint64_t v4 = v53;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0C40, memory_order_acquire) & 1) == 0)
  {
    unint64_t v55 = v4;
    int v56 = __cxa_guard_acquire(&qword_1004E0C40);
    unint64_t v4 = v55;
    if (v56)
    {
      qword_1004E0C38 = 0x7FF0000000000000;
      __cxa_guard_release(&qword_1004E0C40);
      unint64_t v4 = v55;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0C50, memory_order_acquire) & 1) == 0)
  {
    unint64_t v57 = v4;
    int v58 = __cxa_guard_acquire(&qword_1004E0C50);
    unint64_t v4 = v57;
    if (v58)
    {
      qword_1004E0C48 = 0x7FFFFFFFFFFFFFFFLL;
      __cxa_guard_release(&qword_1004E0C50);
      unint64_t v4 = v57;
    }
  }
  unint64_t v5 = v59;
  unint64_t v6 = qword_1004E0C18;
  BOOL v7 = (qword_1004E0C18 & 0xFFFFFFFFFFFFFLL) != 0 && (~qword_1004E0C18 & 0x7FF0000000000000) == 0;
  if (!v7 && ((~v59 & 0x7FF0000000000000) != 0 || (v59 & 0xFFFFFFFFFFFFFLL) == 0))
  {
    if ((unint64_t)qword_1004E0C18 >> 63 == v59 >> 63)
    {
      if (qword_1004E0C18 != v59)
      {
        BOOL v8 = (unint64_t)qword_1004E0C18 >> 63 == qword_1004E0C18 < v59;
        goto LABEL_76;
      }
    }
    else if (qword_1004E0C18 < 0)
    {
      BOOL v8 = ((qword_1004E0C18 | v59) & 0x7FFFFFFFFFFFFFFFLL) == 0;
LABEL_76:
      int v9 = !v8;
      goto LABEL_16;
    }
  }
  int v9 = 0;
LABEL_16:
  unint64_t v10 = v4 & 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v11 = v59 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v12 = qword_1004E0C28;
  BOOL v13 = (qword_1004E0C28 & 0xFFFFFFFFFFFFFLL) != 0 && (~qword_1004E0C28 & 0x7FF0000000000000) == 0;
  if (v13 || (~v4 & 0x7FF0000000000000) == 0 && (v4 & 0xFFFFFFFFFFFFFLL) != 0)
  {
LABEL_24:
    BOOL v14 = 0;
    *a3 = 0;
    uint64_t result = 0x7FF0000000000001;
    if (v11 >= 0x7FF0000000000001) {
      goto LABEL_25;
    }
    goto LABEL_30;
  }
  if (qword_1004E0C28 < 0)
  {
    BOOL v14 = ((qword_1004E0C28 | v4) & 0x7FFFFFFFFFFFFFFFLL) != 0;
    *a3 = 0;
    uint64_t result = 0x7FF0000000000001;
    if (v11 >= 0x7FF0000000000001) {
      goto LABEL_25;
    }
  }
  else
  {
    if (qword_1004E0C28 == v10) {
      goto LABEL_24;
    }
    BOOL v14 = (unint64_t)qword_1004E0C28 >> 63 != qword_1004E0C28 < v10;
    *a3 = 0;
    uint64_t result = 0x7FF0000000000001;
    if (v11 >= 0x7FF0000000000001) {
      goto LABEL_25;
    }
  }
LABEL_30:
  if (v11 == 0x7FF0000000000000)
  {
    int v16 = v9 ^ v14;
    BOOL v17 = (~v4 & 0x7FF0000000000000) == 0;
    if ((v4 & 0xFFFFFFFFFFFFFLL) == 0) {
      BOOL v17 = 0;
    }
    if (v17 || v13)
    {
      uint64_t v18 = 368;
      if (v16) {
        uint64_t v18 = 336;
      }
      unint64_t v19 = (uint64_t *)((char *)&unk_1004E0AC8 + v18);
      if (v10 > 0x7FF0000000000000) {
        unint64_t v19 = &qword_1004E0C48;
      }
    }
    else
    {
      BOOL v23 = ((v12 | v4) & 0x7FFFFFFFFFFFFFFFLL) == 0 || v10 == v12;
      BOOL v8 = v16 == 0;
      uint64_t v24 = 368;
      if (!v8) {
        uint64_t v24 = 336;
      }
      BOOL v8 = !v23 && v10 <= 0x7FF0000000000000;
      uint64_t v25 = 384;
      if (v8) {
        uint64_t v25 = v24;
      }
      unint64_t v19 = (uint64_t *)((char *)&unk_1004E0AC8 + v25);
    }
    goto LABEL_96;
  }
  uint64_t result = v5 & 0x7FF0000000000000;
  BOOL v20 = (v5 & 0x7FF0000000000000) != 0x7FF0000000000000;
  uint64_t v21 = v5 & 0xFFFFFFFFFFFFFLL;
  if ((v5 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v20 = 1;
  }
  if (!v20)
  {
LABEL_48:
    if (v10 < 0x7FF0000000000001)
    {
      if (v10 == 0x7FF0000000000000)
      {
        if (!v7 && v20)
        {
          if (v5 >> 63 == v6 >> 63)
          {
            if (v5 != v6 && v6 >> 63 != v5 < v6)
            {
LABEL_140:
              unint64_t v19 = &qword_1004E0C18;
LABEL_96:
              if (v19 != (uint64_t *)a3) {
                *a3 = *v19;
              }
              return result;
            }
          }
          else if ((v5 & 0x8000000000000000) != 0 && ((v6 | v5) & 0x7FFFFFFFFFFFFFFFLL) != 0)
          {
            goto LABEL_140;
          }
        }
LABEL_95:
        unint64_t v19 = &qword_1004E0C38;
        goto LABEL_96;
      }
      uint64_t v26 = (v5 >> 52) & 0x7FF;
      if (v26 > 0x3FE)
      {
        if (v26 < 0x433)
        {
          unint64_t v31 = 1 << (51 - (v5 >> 52));
          unint64_t v32 = v5 + (v31 >> 1);
          uint64_t v33 = -1;
          if ((v32 & (v31 - 1)) == 0) {
            uint64_t v33 = ~v31;
          }
          unint64_t v27 = v33 & -(uint64_t)v31 & v32;
        }
        else
        {
          unint64_t v27 = v5;
          if (v21)
          {
            unint64_t v27 = v5;
            if (v26 == 2047)
            {
              BOOL v29 = (v5 & 0x7FFFFFFFFFFFFLL) != 0 && (v5 & 0x7FF8000000000000) == 0x7FF0000000000000;
              BOOL v30 = v29 || result == 0x7FF0000000000000;
              unint64_t v27 = 0x8000000000000;
              if (v30) {
                unint64_t v27 = v5 | 0x8000000000000;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v27 = v5;
        if (v11)
        {
          BOOL v28 = v26 != 1022 || v21 == 0;
          unint64_t v27 = v5 & 0x8000000000000000 | 0x3FF0000000000000;
          if (v28) {
            unint64_t v27 = v5 & 0x8000000000000000;
          }
        }
      }
      if (!v20
        || (~v27 & 0x7FF0000000000000) == 0 && (v27 & 0xFFFFFFFFFFFFFLL) != 0
        || v5 != v27 && ((v27 | v5) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        BOOL v34 = (~v4 & 0x7FF0000000000000) == 0;
        if ((v4 & 0xFFFFFFFFFFFFFLL) == 0) {
          BOOL v34 = 0;
        }
        if (v34 || v7) {
          goto LABEL_117;
        }
        unint64_t v35 = v6 >> 63;
        if (v4 >> 63 == v6 >> 63)
        {
          if (v4 != v6 && v35 != v4 < v6) {
            goto LABEL_25;
          }
        }
        else if ((v4 & 0x8000000000000000) != 0 && ((v6 | v4) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          goto LABEL_25;
        }
        if (v4 != v6 && ((v6 | v4) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
LABEL_117:
          unint64_t v61 = v4;
          sub_1002C8C64((unint64_t *)&v62, &v61);
          sub_1002C79DC(&v59, (unint64_t *)&v62, (unint64_t *)&v63);
          return (uint64_t)sub_1002C85C0(a3, (unint64_t *)&v63);
        }
        if (!v20) {
          goto LABEL_140;
        }
        if (v5 >> 63 == v35)
        {
          if (v5 != v6 && v35 != v5 < v6) {
            goto LABEL_95;
          }
        }
        else if ((v5 & 0x8000000000000000) != 0 && ((v6 | v5) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        {
          goto LABEL_95;
        }
        BOOL v43 = ((v6 | v5) & 0x7FFFFFFFFFFFFFFFLL) == 0 || v5 == v6;
        BOOL v8 = !v43;
        uint64_t v44 = 336;
        if (!v8) {
          uint64_t v44 = 352;
        }
        unint64_t v19 = (uint64_t *)((char *)&unk_1004E0AC8 + v44);
        goto LABEL_96;
      }
      unint64_t v36 = v5 >> 52;
      unint64_t v37 = v21 | 0x10000000000000;
      uint64_t v38 = (v5 >> 52) & 0x7FF;
      if (((v5 >> 52) & 0x7FF) == 0) {
        unint64_t v37 = v5 & 0xFFFFFFFFFFFFFLL;
      }
      if (v21) {
        BOOL v39 = v38 == 2047;
      }
      else {
        BOOL v39 = 0;
      }
      int v41 = !v39 && (v5 & 0x8000000000000000) != 0;
      if (v38 <= 0x426)
      {
        if (v38 < 0x3E9)
        {
          unint64_t v37 = v37 != 0;
          goto LABEL_154;
        }
        unint64_t v37 = (v37 >> (39 - v38)) | (v37 << (v36 + 25) != 0);
      }
      if (v37 > 0xFFFFFFFF7FFLL)
      {
LABEL_159:
        if (v41) {
          int v46 = 0x80000000;
        }
        else {
          int v46 = 0x7FFFFFFF;
        }
LABEL_162:
        BOOL v47 = (~v4 & 0x7FF0000000000000) != 0;
        if ((v4 & 0xFFFFFFFFFFFFFLL) == 0) {
          BOOL v47 = 1;
        }
        if (v10 || !v47)
        {
          unint64_t v61 = v4;
          uint64_t v62 = 0x3FF0000000000000;
          if (v46 >= 0) {
            unsigned int v49 = v46;
          }
          else {
            unsigned int v49 = -v46;
          }
          if (v46 < 0)
          {
            unint64_t v60 = 0x3FF0000000000000;
            sub_1002C7C94(&v60, (uint64_t *)&v61, (unint64_t *)&v63);
            unint64_t v61 = v63;
          }
          if (v49 >= 2)
          {
            do
            {
              if (v49)
              {
                sub_1002C79DC((unint64_t *)&v62, &v61, (unint64_t *)&v63);
                uint64_t v62 = v63;
              }
              sub_1002C79DC(&v61, &v61, (unint64_t *)&v63);
              unint64_t v61 = v63;
              BOOL v50 = v49 > 3;
              v49 >>= 1;
            }
            while (v50);
          }
          uint64_t result = (uint64_t)sub_1002C79DC((unint64_t *)&v62, &v61, (unint64_t *)&v63);
          *a3 = v63;
        }
        else
        {
          uint64_t v48 = 0x3FF0000000000000;
          if (v46) {
            uint64_t v48 = 0;
          }
          if (v46 < 0) {
            uint64_t v48 = 0x7FF0000000000000;
          }
          *a3 = v48;
        }
        return result;
      }
LABEL_154:
      int v45 = ((v37 + 2048) >> 12) & ~((v37 & 0xFFF) == 2048);
      if (v41) {
        int v46 = -v45;
      }
      else {
        int v46 = ((v37 + 2048) >> 12) & ~((v37 & 0xFFF) == 2048);
      }
      if (!v45 || v41 == v46 >> 31) {
        goto LABEL_162;
      }
      goto LABEL_159;
    }
LABEL_25:
    if (a3 != (unint64_t *)&qword_1004E0C48) {
      *a3 = qword_1004E0C48;
    }
    return result;
  }
  if (v7 || v5 != v6 && ((v6 | v5) & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (!v13 && (v5 == v12 || ((v12 | v5) & 0x7FFFFFFFFFFFFFFFLL) == 0))
    {
      *a3 = v4;
      return result;
    }
    goto LABEL_48;
  }
  if (a3 != (unint64_t *)&qword_1004E0C28) {
    *a3 = v12;
  }
  return result;
}

unint64_t *sub_1002C9A94@<X0>(unint64_t *result@<X0>, int *a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)result;
  unsigned int v4 = *(_DWORD *)result & 0x7FFFFFFF;
  if (v4 < 0x7F800001)
  {
    if (v4 == 2139095040)
    {
      *a2 = v3;
      return result;
    }
    int v6 = (__int16)((v3 >> 23) - 127) % 3;
    if (v6 >= 0) {
      int v7 = -3;
    }
    else {
      int v7 = 0;
    }
    __int16 v8 = v7 + v6;
    unint64_t v34 = 0x4046A09E6653BA70;
    unint64_t v35 = ((*(void *)&v3 & 0x7FFFFFLL) << 29) | ((unint64_t)(v7 + v6 + 1023) << 52);
    unint64_t v33 = 0x402D9E20660EDB21;
    sub_1002C79DC(&v34, &v35, &v24);
    if ((v24 & 0x8000000000000000) != 0)
    {
      sub_1002CA61C(&v25, v24, 0x406808F46C6116E0uLL, 1);
      sub_1002C79DC(&v25, &v35, &v26);
      unint64_t v9 = v26;
      if ((v26 & 0x8000000000000000) == 0)
      {
LABEL_10:
        sub_1002CA414(&v27, v9, 0x405DCA97439CAE14uLL, 0);
        sub_1002C79DC(&v27, &v35, &v28);
        unint64_t v10 = v28;
        if ((v28 & 0x8000000000000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_20;
      }
    }
    else
    {
      sub_1002CA414(&v25, v24, 0x406808F46C6116E0uLL, 0);
      sub_1002C79DC(&v25, &v35, &v26);
      unint64_t v9 = v26;
      if ((v26 & 0x8000000000000000) == 0) {
        goto LABEL_10;
      }
    }
    sub_1002CA61C(&v27, v9, 0x405DCA97439CAE14uLL, 1);
    sub_1002C79DC(&v27, &v35, &v28);
    unint64_t v10 = v28;
    if ((v28 & 0x8000000000000000) == 0)
    {
LABEL_11:
      sub_1002CA414(&v29, v10, 0x402ADD70D2827500uLL, 0);
      sub_1002C79DC(&v29, &v35, &v30);
      unint64_t v11 = v30;
      if ((v30 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
LABEL_20:
    sub_1002CA61C(&v29, v10, 0x402ADD70D2827500uLL, 1);
    sub_1002C79DC(&v29, &v35, &v30);
    unint64_t v11 = v30;
    if ((v30 & 0x8000000000000000) == 0)
    {
LABEL_12:
      sub_1002CA414(&v31, v11, 0x3FC4F15F83F55D2DuLL, 0);
      sub_1002C79DC(&v33, &v35, &v16);
      unint64_t v12 = v16;
      if ((v16 & 0x8000000000000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_22;
    }
LABEL_21:
    sub_1002CA61C(&v31, v11, 0x3FC4F15F83F55D2DuLL, 1);
    sub_1002C79DC(&v33, &v35, &v16);
    unint64_t v12 = v16;
    if ((v16 & 0x8000000000000000) == 0)
    {
LABEL_13:
      sub_1002CA414(&v17, v12, 0x4062FF15C0285815uLL, 0);
      sub_1002C79DC(&v17, &v35, &v18);
      unint64_t v13 = v18;
      if ((v18 & 0x8000000000000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_23;
    }
LABEL_22:
    sub_1002CA61C(&v17, v12, 0x4062FF15C0285815uLL, 1);
    sub_1002C79DC(&v17, &v35, &v18);
    unint64_t v13 = v18;
    if ((v18 & 0x8000000000000000) == 0)
    {
LABEL_14:
      sub_1002CA414(&v19, v13, 0x406510D06A8112CEuLL, 0);
      sub_1002C79DC(&v19, &v35, &v20);
      unint64_t v14 = v20;
      if ((v20 & 0x8000000000000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_24;
    }
LABEL_23:
    sub_1002CA61C(&v19, v13, 0x406510D06A8112CEuLL, 1);
    sub_1002C79DC(&v19, &v35, &v20);
    unint64_t v14 = v20;
    if ((v20 & 0x8000000000000000) == 0)
    {
LABEL_15:
      sub_1002CA414(&v21, v14, 0x4040FECBC9E2C375uLL, 0);
      sub_1002C79DC(&v21, &v35, &v22);
      unint64_t v15 = v22;
      if ((v22 & 0x8000000000000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_25;
    }
LABEL_24:
    sub_1002CA61C(&v21, v14, 0x4040FECBC9E2C375uLL, 1);
    sub_1002C79DC(&v21, &v35, &v22);
    unint64_t v15 = v22;
    if ((v22 & 0x8000000000000000) == 0)
    {
LABEL_16:
      sub_1002CA414((unint64_t *)&v23, v15, 0x3FF0000000000000uLL, 0);
      uint64_t result = sub_1002C7C94(&v31, &v23, &v32);
      if (v4)
      {
LABEL_17:
        int v5 = (((v3 & 0x80000000)
             + ((((21846 * (__int16)((v3 >> 23) - 127 - v8)) >> 16)
               + ((21846 * (__int16)((v3 >> 23) - 127 - v8)) >> 31)) << 23)) | (v32 >> 29) & 0x7FFFFF)
           + 1056964608;
        goto LABEL_27;
      }
LABEL_26:
      int v5 = 0;
      goto LABEL_27;
    }
LABEL_25:
    sub_1002CA61C((unint64_t *)&v23, v15, 0x3FF0000000000000uLL, 1);
    uint64_t result = sub_1002C7C94(&v31, &v23, &v32);
    if (v4) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }
  int v5 = 0x7FFFFFFF;
LABEL_27:
  *a2 = v5;
  return result;
}

int *sub_1002C9EF8(int *result, int a2, unsigned int a3)
{
  int v3 = (a2 >> 23);
  int v4 = a2 & 0x7FFFFF;
  int v5 = a3 & 0x7FFFFF;
  int v6 = (a3 >> 23);
  unsigned int v7 = v3 - v6;
  if (v3 == v6)
  {
    if (v3 == 255)
    {
      if (!(v5 | v4))
      {
        *uint64_t result = -4194304;
        return result;
      }
      goto LABEL_11;
    }
    int v13 = v4 - v5;
    if (v4 == v5)
    {
      *uint64_t result = 0;
    }
    else
    {
      BOOL v20 = v3 != 0;
      int v21 = v3 - 1;
      if (!v20) {
        int v21 = 0;
      }
      BOOL v22 = a2 < 0;
      BOOL v23 = v13 < 0;
      if (v13 < 0) {
        int v13 = v5 - v4;
      }
      if (v23) {
        BOOL v22 = a2 >= 0;
      }
      unsigned int v24 = v13 << 16;
      if (v13 >= 0x10000) {
        unsigned int v24 = v13;
      }
      LODWORD(v25) = v24 << 8;
      if (HIBYTE(v24)) {
        unint64_t v25 = v24;
      }
      else {
        unint64_t v25 = v25;
      }
      if (HIBYTE(v24)) {
        char v26 = 16 * (v13 < 0x10000);
      }
      else {
        char v26 = (16 * (v13 < 0x10000)) | 8;
      }
      char v27 = v26 + byte_100404CE8[v25 >> 24] - 8;
      int v28 = v21 - v27;
      if (v28 >= 0) {
        LOBYTE(v21) = v27;
      }
      if (v22) {
        unsigned int v29 = 0x80000000;
      }
      else {
        unsigned int v29 = 0;
      }
      *uint64_t result = v29 + ((v28 & ~(v28 >> 31)) << 23) + (v13 << v21);
    }
  }
  else
  {
    int v8 = v4 << 7;
    int v9 = v5 << 7;
    if ((v7 & 0x80000000) != 0)
    {
      if (v6 == 255)
      {
        if (!v5)
        {
          *uint64_t result = (a2 & 0x80000000) - 0x800000;
          return result;
        }
        goto LABEL_11;
      }
      int v12 = a2 >= 0;
      if (v3) {
        int v15 = 0x40000000;
      }
      else {
        int v15 = v4 << 7;
      }
      unsigned int v11 = v15 + v8;
      unsigned int v7 = -v7;
    }
    else
    {
      if (v3 == 255)
      {
        if (!v4)
        {
          *uint64_t result = a2;
          return result;
        }
LABEL_11:
        if ((a2 & 0x7FC00000) == 0x7F800000 && (a2 & 0x3FFFFF) != 0)
        {
          *uint64_t result = a2 | 0x400000;
        }
        else
        {
          if (v4) {
            BOOL v14 = (~a2 & 0x7F800000) == 0;
          }
          else {
            BOOL v14 = 0;
          }
          if (!v14) {
            a2 = a3;
          }
          *uint64_t result = a2 | 0x400000;
        }
        return result;
      }
      if ((a3 & 0x7F800000) != 0) {
        int v10 = 0x40000000;
      }
      else {
        int v10 = v5 << 7;
      }
      unsigned int v11 = v10 + v9;
      int v12 = a2 >> 31;
      int v6 = v3;
      int v9 = v8;
    }
    int v16 = v9 | 0x40000000;
    BOOL v17 = v11 != 0;
    int v18 = (v11 >> v7) | (v11 << -(char)v7 != 0);
    if (v7 <= 0x1E) {
      int v19 = v18;
    }
    else {
      int v19 = v17;
    }
    return sub_1002CA2CC(result, v12, v6 - 1, v16 - v19);
  }
  return result;
}

unsigned int *sub_1002CA0C4(unsigned int *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = (a2 >> 23);
  int v4 = a2 & 0x7FFFFF;
  int v5 = (a3 >> 23);
  int v6 = a3 & 0x7FFFFF;
  unsigned int v7 = v3 - v5;
  if (v3 == v5)
  {
    if (!(a2 >> 23))
    {
      *uint64_t result = v6 + a2;
      return result;
    }
    if (v3 != 255)
    {
      unsigned int v16 = (v6 + v4) | 0x1000000;
      if (v3 <= 0xFD && (v16 & 1) == 0)
      {
        *uint64_t result = (a2 & 0x80000000 | (v3 << 23)) + (v16 >> 1);
        return result;
      }
      unsigned int v14 = v16 << 6;
      if (v3 < 0xFD) {
        goto LABEL_47;
      }
LABEL_40:
      if ((v3 & 0x80000000) != 0)
      {
        unsigned int v14 = (v14 >> -(char)v3) | (v14 << v3 != 0);
        unsigned int v3 = 0;
        goto LABEL_47;
      }
      if (v3 <= 0xFD && ((v14 + 64) & 0x80000000) == 0)
      {
        unsigned int v3 = 253;
        goto LABEL_47;
      }
LABEL_44:
      *uint64_t result = a2 & 0x80000000 | 0x7F800000;
      return result;
    }
    if (!(v6 | v4)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
  int v8 = v4 << 6;
  int v9 = v6 << 6;
  if ((v7 & 0x80000000) != 0)
  {
    if (v5 != 255)
    {
      if ((a2 >> 23)) {
        int v17 = 0x20000000;
      }
      else {
        int v17 = v4 << 6;
      }
      unsigned int v18 = v17 + v8;
      BOOL v19 = v18 != 0;
      int v20 = (v18 >> -(char)v7) | (v18 << v7 != 0);
      if (-v7 <= 0x1E) {
        BOOL v19 = v20;
      }
      unsigned int v3 = (a3 >> 23);
      unsigned int v14 = v19 + v9 + 0x20000000;
      if (v14 >> 30) {
        goto LABEL_39;
      }
LABEL_38:
      --v3;
      v14 *= 2;
      goto LABEL_39;
    }
    if (!v6) {
      goto LABEL_44;
    }
LABEL_12:
    if ((a2 & 0x7FC00000) == 0x7F800000 && (a2 & 0x3FFFFF) != 0)
    {
      *uint64_t result = a2 | 0x400000;
    }
    else
    {
      if (v4) {
        BOOL v15 = (~a2 & 0x7F800000) == 0;
      }
      else {
        BOOL v15 = 0;
      }
      if (!v15) {
        a2 = a3;
      }
      *uint64_t result = a2 | 0x400000;
    }
    return result;
  }
  if (v3 == 255)
  {
    if (!v4)
    {
LABEL_5:
      *uint64_t result = a2;
      return result;
    }
    goto LABEL_12;
  }
  if ((a3 >> 23)) {
    int v10 = 0x20000000;
  }
  else {
    int v10 = v6 << 6;
  }
  unsigned int v11 = v10 + v9;
  BOOL v12 = v11 != 0;
  int v13 = (v11 >> (v3 - v5)) | (v11 << (v5 - v3) != 0);
  if (v7 <= 0x1E) {
    BOOL v12 = v13;
  }
  unsigned int v14 = v8 + v12 + 0x20000000;
  if (!(v14 >> 30)) {
    goto LABEL_38;
  }
LABEL_39:
  if (v3 >= 0xFD) {
    goto LABEL_40;
  }
LABEL_47:
  unsigned int v21 = v3 << 23;
  unsigned int v22 = ~((v14 & 0x7F) == 64) & ((v14 + 64) >> 7);
  if (!v22) {
    unsigned int v21 = 0;
  }
  *uint64_t result = (v22 | a2 & 0x80000000) + v21;
  return result;
}

int *sub_1002CA2CC(int *result, int a2, int a3, unsigned int a4)
{
  unsigned int v4 = a4 << 16;
  if (a4 >= 0x10000) {
    unsigned int v4 = a4;
  }
  LODWORD(v5) = v4 << 8;
  if (HIBYTE(v4)) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = v5;
  }
  char v6 = byte_100404CE8[v5 >> 24];
  if (HIBYTE(v4)) {
    char v7 = 16 * (a4 < 0x10000);
  }
  else {
    char v7 = (16 * (a4 < 0x10000)) | 8;
  }
  int v8 = (char)(v7 + v6 - 1);
  int v9 = a3 - v8;
  char v10 = v8 - 7;
  if (v8 >= 7 && (unsigned __int16)(a3 - v8) <= 0xFCu)
  {
    if (a2) {
      unsigned int v11 = 0x80000000;
    }
    else {
      unsigned int v11 = 0;
    }
    int v12 = v9 << 23;
    if (!a4) {
      int v12 = 0;
    }
    *uint64_t result = (a4 << v10) + v11 + v12;
    return result;
  }
  unsigned int v13 = a4 << v8;
  if ((unsigned __int16)(a3 - v8) >= 0xFDu)
  {
    if ((v9 & 0x8000) != 0)
    {
      BOOL v14 = v13 != 0;
      unsigned int v13 = (v13 >> (v8 - a3)) | (v13 << (a3 - v8) != 0);
      int v9 = 0;
      if ((unsigned __int16)(v8 - a3) > 0x1Eu) {
        unsigned int v13 = v14;
      }
    }
    else
    {
      if ((unsigned __int16)(a3 - v8) > 0xFDu || ((v13 + 64) & 0x80000000) != 0)
      {
        if (a2) {
          int v20 = -8388608;
        }
        else {
          int v20 = 2139095040;
        }
        *uint64_t result = v20;
        return result;
      }
      int v9 = 253;
    }
  }
  unsigned int v15 = v13 + 64;
  int v16 = ~((v13 & 0x7F) == 64);
  if (a2) {
    unsigned int v17 = 0x80000000;
  }
  else {
    unsigned int v17 = 0;
  }
  int v18 = v9 << 23;
  int v19 = v16 & (v15 >> 7);
  if (!v19) {
    int v18 = 0;
  }
  *uint64_t result = (v19 | v17) + v18;
  return result;
}

unint64_t *sub_1002CA414(unint64_t *result, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4 = (a2 >> 52) & 0x7FF;
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = (a3 >> 52) & 0x7FF;
  uint64_t v7 = a3 & 0xFFFFFFFFFFFFFLL;
  unsigned int v8 = v4 - v6;
  if (v4 != v6)
  {
    uint64_t v9 = v5 << 9;
    uint64_t v10 = v7 << 9;
    if ((int)v4 - (int)v6 < 0)
    {
      if (v6 == 2047)
      {
        if (!v7) {
          goto LABEL_44;
        }
        goto LABEL_13;
      }
      uint64_t v17 = v9 | 0x2000000000000000;
      uint64_t v18 = v5 << 10;
      if (v4) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = v18;
      }
      BOOL v20 = v19 != 0;
      unint64_t v21 = (v19 >> -(char)v8) | (v19 << v8 != 0);
      if (-v8 <= 0x3E) {
        BOOL v20 = v21;
      }
      unint64_t v11 = v20 + v10 + 0x2000000000000000;
      if (!(v11 >> 62)) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v4 == 2047)
      {
        if (v5) {
          goto LABEL_13;
        }
LABEL_8:
        *uint64_t result = a2;
        return result;
      }
      if (v6) {
        unint64_t v12 = v10 | 0x2000000000000000;
      }
      else {
        unint64_t v12 = v7 << 10;
      }
      BOOL v13 = v12 != 0;
      unint64_t v14 = (v12 >> v8) | (v12 << -(char)v8 != 0);
      if (v8 <= 0x3E) {
        BOOL v15 = v14;
      }
      else {
        BOOL v15 = v13;
      }
      uint64_t v6 = (a2 >> 52) & 0x7FF;
      unint64_t v11 = v9 + v15 + 0x2000000000000000;
      if (!(v11 >> 62))
      {
LABEL_25:
        uint64_t v4 = (v6 - 1);
        v11 *= 2;
        if (v4 < 0x7FD) {
          goto LABEL_49;
        }
LABEL_40:
        if ((v4 & 0x80000000) != 0)
        {
          unint64_t v11 = (v11 >> -(char)v4) | (v11 << v4 != 0);
          uint64_t v4 = 0;
          goto LABEL_49;
        }
        if (v4 <= 0x7FD && ((v11 + 512) & 0x8000000000000000) == 0)
        {
          uint64_t v4 = 2045;
          goto LABEL_49;
        }
LABEL_44:
        if (a4) {
          unint64_t v22 = 0xFFF0000000000000;
        }
        else {
          unint64_t v22 = 0x7FF0000000000000;
        }
        *uint64_t result = v22;
        return result;
      }
    }
    uint64_t v4 = v6;
    if (v6 < 0x7FD)
    {
LABEL_49:
      unint64_t v23 = v11 + 512;
      unint64_t v24 = ~(unint64_t)((v11 & 0x3FF) == 512);
      unint64_t v25 = 0x8000000000000000;
      if (!a4) {
        unint64_t v25 = 0;
      }
      uint64_t v26 = v4 << 52;
      unint64_t v27 = v24 & (v23 >> 10);
      if (!v27) {
        uint64_t v26 = 0;
      }
      *uint64_t result = (v27 | v25) + v26;
      return result;
    }
    goto LABEL_40;
  }
  if (v4 != 2047)
  {
    if (!v4)
    {
      *uint64_t result = v7 + a2;
      return result;
    }
    unint64_t v11 = ((v7 + v5) << 9) | 0x4000000000000000;
    if (v4 < 0x7FD) {
      goto LABEL_49;
    }
    goto LABEL_40;
  }
  if (!(v7 | v5)) {
    goto LABEL_8;
  }
LABEL_13:
  if ((a2 & 0x7FF8000000000000) == 0x7FF0000000000000 && (a2 & 0x7FFFFFFFFFFFFLL) != 0)
  {
    *uint64_t result = a2 | 0x8000000000000;
  }
  else
  {
    if (v5) {
      BOOL v16 = (~a2 & 0x7FF0000000000000) == 0;
    }
    else {
      BOOL v16 = 0;
    }
    if (!v16) {
      a2 = a3;
    }
    *uint64_t result = a2 | 0x8000000000000;
  }
  return result;
}

unint64_t *sub_1002CA61C(unint64_t *result, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4 = (a2 >> 52) & 0x7FF;
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFLL;
  uint64_t v6 = (a3 >> 52) & 0x7FF;
  uint64_t v7 = a3 & 0xFFFFFFFFFFFFFLL;
  unsigned int v8 = v4 - v6;
  if (v4 == v6)
  {
    if (v4 == 2047)
    {
      if (!(v7 | v5))
      {
        *uint64_t result = 0xFFF8000000000000;
        return result;
      }
      goto LABEL_30;
    }
    uint64_t v11 = v5 - v7;
    if (v5 == v7)
    {
      *uint64_t result = 0;
    }
    else
    {
      BOOL v12 = v4 != 0;
      int v13 = v4 - 1;
      if (!v12) {
        int v13 = 0;
      }
      int v14 = a4 ^ 1;
      if (v11 < 0) {
        uint64_t v11 = v7 - v5;
      }
      else {
        int v14 = a4;
      }
      unint64_t v15 = HIDWORD(v11);
      char v16 = 32 * (HIDWORD(v11) == 0);
      if (!HIDWORD(v11)) {
        LODWORD(v15) = v11;
      }
      if (v15 < 0x10000)
      {
        char v16 = (32 * (HIDWORD(v11) == 0)) | 0x10;
        LODWORD(v15) = v15 << 16;
      }
      char v17 = v16 | 8;
      if (BYTE3(v15))
      {
        char v17 = v16;
        unint64_t v15 = v15;
      }
      else
      {
        unint64_t v15 = (v15 << 8);
      }
      char v18 = byte_100404CE8[v15 >> 24] + v17 - 11;
      int v19 = v13 - v18;
      int v20 = (__int16)(v13 - v18);
      if (v20 >= 0) {
        LOBYTE(v13) = v18;
      }
      BOOL v30 = v14 == 0;
      unint64_t v21 = 0x8000000000000000;
      if (v30) {
        unint64_t v21 = 0;
      }
      *uint64_t result = v21 + ((unint64_t)(v19 & ~(v20 >> 31)) << 52) + (v11 << v13);
    }
    return result;
  }
  uint64_t v9 = v5 << 10;
  uint64_t v10 = v7 << 10;
  if ((int)v4 - (int)v6 >= 0)
  {
    if (v4 == 2047)
    {
      if (!v5)
      {
        *uint64_t result = a2;
        return result;
      }
      goto LABEL_30;
    }
    BOOL v30 = v6 == 0;
    uint64_t v22 = 0x4000000000000000;
    if (v30) {
      uint64_t v22 = v7 << 10;
    }
    unint64_t v23 = v22 + v10;
    BOOL v24 = v23 != 0;
    unint64_t v25 = (v23 >> v8) | (v23 << -(char)v8 != 0);
    if (v8 <= 0x3E) {
      BOOL v26 = v25;
    }
    else {
      BOOL v26 = v24;
    }
    int v27 = ((a2 >> 52) & 0x7FF) - 1;
    int v28 = a4;
    unint64_t v29 = (v9 | 0x4000000000000000) - v26;
    return sub_1002CA830(result, v28, v27, v29);
  }
  if (v6 != 2047)
  {
    int v31 = a4 ^ 1;
    BOOL v30 = v4 == 0;
    uint64_t v32 = 0x4000000000000000;
    if (v30) {
      uint64_t v32 = v5 << 10;
    }
    unint64_t v33 = v32 + v9;
    BOOL v34 = v33 != 0;
    unint64_t v35 = (v33 >> -(char)v8) | (v33 << v8 != 0);
    if (-v8 <= 0x3E) {
      BOOL v36 = v35;
    }
    else {
      BOOL v36 = v34;
    }
    int v27 = v6 - 1;
    int v28 = v31;
    unint64_t v29 = (v10 | 0x4000000000000000) - v36;
    return sub_1002CA830(result, v28, v27, v29);
  }
  if (v7)
  {
LABEL_30:
    if ((a2 & 0x7FF8000000000000) == 0x7FF0000000000000 && (a2 & 0x7FFFFFFFFFFFFLL) != 0)
    {
      *uint64_t result = a2 | 0x8000000000000;
    }
    else
    {
      if (v5) {
        BOOL v30 = (~a2 & 0x7FF0000000000000) == 0;
      }
      else {
        BOOL v30 = 0;
      }
      if (!v30) {
        a2 = a3;
      }
      *uint64_t result = a2 | 0x8000000000000;
    }
    return result;
  }
  if (a4) {
    unint64_t v37 = 0x7FF0000000000000;
  }
  else {
    unint64_t v37 = 0xFFF0000000000000;
  }
  *uint64_t result = v37;
  return result;
}

unint64_t *sub_1002CA830(unint64_t *result, int a2, int a3, unint64_t a4)
{
  unint64_t v4 = HIDWORD(a4);
  char v5 = 32 * (HIDWORD(a4) == 0);
  if (!HIDWORD(a4)) {
    LODWORD(v4) = a4;
  }
  if (v4 < 0x10000)
  {
    char v5 = (32 * (HIDWORD(a4) == 0)) | 0x10;
    LODWORD(v4) = v4 << 16;
  }
  char v6 = v5 | 8;
  unsigned int v7 = BYTE3(v4);
  if (BYTE3(v4)) {
    unint64_t v4 = v4;
  }
  else {
    unint64_t v4 = (v4 << 8);
  }
  char v8 = byte_100404CE8[v4 >> 24];
  if (v7) {
    char v6 = v5;
  }
  int v9 = (char)(v6 + v8 - 1);
  uint64_t v10 = (a3 - v9);
  char v11 = v9 - 10;
  if (v9 >= 10 && (unsigned __int16)(a3 - v9) <= 0x7FCu)
  {
    unint64_t v12 = 0x8000000000000000;
    if (!a2) {
      unint64_t v12 = 0;
    }
    uint64_t v13 = v10 << 52;
    if (!a4) {
      uint64_t v13 = 0;
    }
    *uint64_t result = (a4 << v11) + v12 + v13;
    return result;
  }
  unint64_t v14 = a4 << v9;
  if ((unsigned __int16)(a3 - v9) < 0x7FDu) {
    goto LABEL_24;
  }
  if ((((_WORD)a3 - (_WORD)v9) & 0x8000) != 0)
  {
    unsigned int v15 = -(__int16)(a3 - v9);
    BOOL v16 = v14 != 0;
    unint64_t v14 = (v14 >> v15) | (v14 << v10 != 0);
    uint64_t v10 = 0;
    if (v15 > 0x3E) {
      unint64_t v14 = v16;
    }
    goto LABEL_24;
  }
  if ((unsigned __int16)(a3 - v9) <= 0x7FDu && ((v14 + 512) & 0x8000000000000000) == 0)
  {
    uint64_t v10 = 2045;
LABEL_24:
    unint64_t v17 = v14 + 512;
    unint64_t v18 = ~(unint64_t)((v14 & 0x3FF) == 512);
    unint64_t v19 = 0x8000000000000000;
    if (!a2) {
      unint64_t v19 = 0;
    }
    uint64_t v20 = v10 << 52;
    unint64_t v21 = v18 & (v17 >> 10);
    if (!v21) {
      uint64_t v20 = 0;
    }
    *uint64_t result = (v21 | v19) + v20;
    return result;
  }
  unint64_t v22 = 0x7FF0000000000000;
  if (a2) {
    unint64_t v22 = 0xFFF0000000000000;
  }
  *uint64_t result = v22;
  return result;
}

uint64_t sub_1002CA988(uint64_t a1)
{
  sub_1002D6AE8(v27, &off_100496350);
  if ((sub_10029AB74((int *)a1, -1) & 0xFF8) != 0)
  {
    long long v19 = 0uLL;
    unint64_t v2 = (_DWORD *)sub_1002D19D8(&v19, 7);
    *(_DWORD *)((char *)v2 + 3) = 824196413;
    *unint64_t v2 = 1025535587;
    sub_1002D2278(-215, (uint64_t *)&v19, "countNonZero", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 1358);
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    long long v4 = *(_OWORD *)(v3 + 16);
    long long v19 = *(_OWORD *)v3;
    long long v20 = v4;
    long long v21 = *(_OWORD *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 56);
    uint64_t v22 = *(void *)(v3 + 48);
    uint64_t v23 = v5;
    BOOL v24 = (char *)&v19 + 8;
    unint64_t v25 = v26;
    v26[0] = 0;
    v26[1] = 0;
    if (v5) {
      atomic_fetch_add((atomic_uint *volatile)(v5 + 20), 1u);
    }
    if (*(int *)(v3 + 4) > 2)
    {
      DWORD1(v19) = 0;
      sub_1002931A8((uint64_t)&v19, v3);
    }
    else
    {
      char v6 = *(void **)(v3 + 72);
      unsigned int v7 = v25;
      *(void *)unint64_t v25 = *v6;
      v7[1] = v6[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v19);
  }
  uint64_t v8 = v19 & 7;
  int v9 = off_1004963B0[v8];
  if (v8 == 7)
  {
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v10 = sub_1002D19D8(v17, 9);
    *(unsigned char *)(v10 + 8) = 48;
    *(void *)uint64_t v10 = *(void *)"func != 0";
    sub_1002D2278(-215, v17, "countNonZero", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 1374);
  }
  v30[0] = (uint64_t)&v19;
  v30[1] = 0;
  uint64_t v29 = 0;
  sub_10029127C((uint64_t)v17, v30, (uint64_t)&v29, -1);
  uint64_t v11 = 0;
  uint64_t v12 = v18;
  uint64_t v13 = -1;
  while ((unint64_t)++v13 < v17[4])
  {
    uint64_t v11 = ((unsigned int (*)(uint64_t, uint64_t))v9)(v29, v12) + v11;
    sub_1002912C8((uint64_t)v17);
  }
  if (v23 && atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v19);
  }
  uint64_t v23 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  if (SDWORD1(v19) >= 1)
  {
    uint64_t v14 = 0;
    unsigned int v15 = v24;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < SDWORD1(v19));
  }
  if (v25 != v26) {
    j__free(v25);
  }
  if (v28) {
    sub_1002D6888(v27);
  }
  return v11;
}

void sub_1002CAC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002CACC0(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1002CACF0(uint64_t a1, double *a2, unint64_t *a3, char *a4, char *a5, uint64_t a6)
{
  sub_1002D6AE8(v98, &off_100496370);
  unsigned int v12 = sub_10029AB74((int *)a1, -1);
  char v13 = v12;
  int v14 = (v12 >> 3) & 0x1FF;
  if (v14)
  {
    BOOL v15 = sub_10029D69C(a6);
    if (a5 || a4 || !v15) {
      goto LABEL_8;
    }
  }
  else if (!sub_10029D69C(a6) && sub_10029AB74((int *)a6, -1))
  {
LABEL_8:
    long long v90 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v90, 100), "(cn == 1 && (_mask.empty() || _mask.type() == 0)) || (cn > 1 && _mask.empty() && !minIdx && !maxIdx)", 100);
    sub_1002D2278(-215, (uint64_t *)&v90, "minMaxIdx", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 2709);
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    long long v17 = *(_OWORD *)(v16 + 16);
    long long v90 = *(_OWORD *)v16;
    long long v91 = v17;
    long long v92 = *(_OWORD *)(v16 + 32);
    uint64_t v18 = *(void *)(v16 + 56);
    uint64_t v93 = *(void *)(v16 + 48);
    uint64_t v94 = v18;
    int v95 = (char *)&v90 + 8;
    int v96 = v97;
    v97[0] = 0;
    v97[1] = 0;
    if (v18) {
      atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
    }
    if (*(int *)(v16 + 4) > 2)
    {
      DWORD1(v90) = 0;
      sub_1002931A8((uint64_t)&v90, v16);
    }
    else
    {
      long long v19 = *(void **)(v16 + 72);
      long long v20 = v96;
      *(void *)int v96 = *v19;
      v20[1] = v19[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v90);
  }
  if (sub_10029A230((_DWORD *)a6) == 0x10000)
  {
    uint64_t v21 = *(void *)(a6 + 8);
    long long v22 = *(_OWORD *)(v21 + 16);
    long long v82 = *(_OWORD *)v21;
    long long v83 = v22;
    long long v84 = *(_OWORD *)(v21 + 32);
    uint64_t v23 = *(void *)(v21 + 56);
    uint64_t v85 = *(void *)(v21 + 48);
    uint64_t v86 = v23;
    uint64_t v87 = (char *)&v82 + 8;
    long long v88 = v89;
    v89[0] = 0;
    v89[1] = 0;
    if (v23) {
      atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
    }
    if (*(int *)(v21 + 4) > 2)
    {
      DWORD1(v82) = 0;
      sub_1002931A8((uint64_t)&v82, v21);
    }
    else
    {
      BOOL v24 = *(void **)(v21 + 72);
      unint64_t v25 = v88;
      *(void *)long long v88 = *v24;
      v25[1] = v24[1];
    }
  }
  else
  {
    sub_100299554(a6, -1, (uint64_t)&v82);
  }
  char v70 = a3;
  int v26 = v13 & 7;
  int v27 = off_1004963F0[v13 & 7];
  if (v26 == 7)
  {
    v79[0] = 0;
    v79[1] = 0;
    uint64_t v28 = sub_1002D19D8(v79, 9);
    *(unsigned char *)(v28 + 8) = 48;
    *(void *)uint64_t v28 = *(void *)"func != 0";
    sub_1002D2278(-215, v79, "minMaxIdx", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 2722);
  }
  v102[0] = (uint64_t)&v90;
  v102[1] = (uint64_t)&v82;
  v102[2] = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  sub_10029127C((uint64_t)v79, v102, (uint64_t)&v100, -1);
  signed int v75 = 0x80000000;
  int v76 = 0x7FFFFFFF;
  float v73 = -INFINITY;
  float v74 = INFINITY;
  uint64_t v29 = (double *)&v76;
  if (v26 == 6) {
    uint64_t v29 = &v72;
  }
  BOOL v30 = (unint64_t *)&v75;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  if (v26 == 6) {
    BOOL v30 = &v71;
  }
  unint64_t v71 = 0xFFF0000000000000;
  double v72 = INFINITY;
  int v69 = v13 & 7;
  if (v26 == 5) {
    int v31 = &v74;
  }
  else {
    int v31 = (float *)v29;
  }
  if (v26 == 5) {
    uint64_t v32 = &v73;
  }
  else {
    uint64_t v32 = (float *)v30;
  }
  if (v80)
  {
    unint64_t v33 = 0;
    uint64_t v34 = ((v14 + 1) * v81);
    uint64_t v35 = 1;
    do
    {
      ((void (*)(uint64_t, uint64_t, float *, float *, uint64_t *, uint64_t *, uint64_t, uint64_t))v27)(v100, v101, v31, v32, &v78, &v77, v34, v35);
      sub_1002912C8((uint64_t)v79);
      ++v33;
      v35 += (int)v34;
    }
    while (v33 < v80);
  }
  if ((void)v91)
  {
    if (SDWORD1(v90) >= 3)
    {
      unint64_t v37 = (int *)(v95 + 4);
      uint64_t v38 = 1;
      uint64_t v39 = DWORD1(v90) & 0xFFFFFFFE;
      uint64_t v40 = 1;
      do
      {
        v38 *= *(v37 - 1);
        v40 *= *v37;
        v37 += 2;
        v39 -= 2;
      }
      while (v39);
      uint64_t v36 = v40 * v38;
      unint64_t v41 = DWORD1(v90) - (unint64_t)(DWORD1(v90) & 0xFFFFFFFE);
      if (v41)
      {
        unint64_t v42 = &v95[(4 * DWORD1(v90)) & 0x3FFFFFFF8];
        do
        {
          uint64_t v43 = *(int *)v42;
          v42 += 4;
          v36 *= v43;
          --v41;
        }
        while (v41);
      }
    }
    else
    {
      uint64_t v36 = SHIDWORD(v90) * (uint64_t)SDWORD2(v90);
    }
    if (DWORD1(v90) && v36)
    {
      if (!(void)v83) {
        goto LABEL_58;
      }
      if (SDWORD1(v82) >= 3)
      {
        int v45 = (int *)(v87 + 4);
        uint64_t v46 = 1;
        uint64_t v47 = DWORD1(v82) & 0xFFFFFFFE;
        uint64_t v48 = 1;
        do
        {
          v46 *= *(v45 - 1);
          v48 *= *v45;
          v45 += 2;
          v47 -= 2;
        }
        while (v47);
        uint64_t v44 = v48 * v46;
        unint64_t v49 = DWORD1(v82) - (unint64_t)(DWORD1(v82) & 0xFFFFFFFE);
        if (v49)
        {
          BOOL v50 = &v87[(4 * DWORD1(v82)) & 0x3FFFFFFF8];
          do
          {
            uint64_t v51 = *(int *)v50;
            v50 += 4;
            v44 *= v51;
            --v49;
          }
          while (v49);
        }
      }
      else
      {
        uint64_t v44 = SHIDWORD(v82) * (uint64_t)SDWORD2(v82);
      }
      if (!DWORD1(v82) || !v44)
      {
LABEL_58:
        if (v78)
        {
          if (v77) {
            goto LABEL_60;
          }
LABEL_106:
          uint64_t v77 = 1;
          uint64_t v52 = v78;
          unsigned int v53 = v69;
LABEL_61:
          if (v53 == 5)
          {
            double v72 = v74;
            double v54 = v73;
          }
          else
          {
            if (v53 > 4) {
              goto LABEL_66;
            }
            double v72 = (double)v76;
            double v54 = (double)v75;
          }
          unint64_t v71 = *(void *)&v54;
LABEL_66:
          if (!a2) {
            goto LABEL_68;
          }
          goto LABEL_67;
        }
        uint64_t v78 = 1;
        if (!v77) {
          goto LABEL_106;
        }
      }
    }
  }
LABEL_60:
  uint64_t v52 = v78;
  unsigned int v53 = v69;
  if (v78) {
    goto LABEL_61;
  }
  unint64_t v71 = 0;
  double v72 = 0.0;
  if (a2) {
LABEL_67:
  }
    *a2 = v72;
LABEL_68:
  if (v70) {
    unint64_t *v70 = v71;
  }
  if (a4)
  {
    if (v52)
    {
      if (SDWORD1(v90) >= 1)
      {
        unint64_t v55 = v95;
        unint64_t v56 = v52 - 1;
        unint64_t v57 = DWORD1(v90) + 1;
        do
        {
          uint64_t v58 = 4 * (v57 - 2);
          int v59 = *(_DWORD *)&v55[v58];
          *(_DWORD *)&a4[v58] = v56 % v59;
          --v57;
          v56 /= (unint64_t)v59;
        }
        while (v57 > 1);
      }
    }
    else if (SDWORD1(v90) >= 1)
    {
      memset(a4, 255, 4 * DWORD1(v90));
    }
  }
  if (a5)
  {
    if (v77)
    {
      if (SDWORD1(v90) >= 1)
      {
        unint64_t v60 = v95;
        unint64_t v61 = v77 - 1;
        unint64_t v62 = DWORD1(v90) + 1;
        do
        {
          uint64_t v63 = 4 * (v62 - 2);
          int v64 = *(_DWORD *)&v60[v63];
          *(_DWORD *)&a5[v63] = v61 % v64;
          --v62;
          v61 /= (unint64_t)v64;
        }
        while (v62 > 1);
      }
    }
    else if (SDWORD1(v90) >= 1)
    {
      memset(a5, 255, 4 * DWORD1(v90));
    }
  }
  if (v86 && atomic_fetch_add((atomic_uint *volatile)(v86 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v82);
  }
  uint64_t v86 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  if (SDWORD1(v82) >= 1)
  {
    uint64_t v65 = 0;
    uint64_t v66 = v87;
    do
      *(_DWORD *)&v66[4 * v65++] = 0;
    while (v65 < SDWORD1(v82));
  }
  if (v88 != v89) {
    j__free(v88);
  }
  if (v94 && atomic_fetch_add((atomic_uint *volatile)(v94 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v90);
  }
  uint64_t v94 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  if (SDWORD1(v90) >= 1)
  {
    uint64_t v67 = 0;
    int64_t v68 = v95;
    do
      *(_DWORD *)&v68[4 * v67++] = 0;
    while (v67 < SDWORD1(v90));
  }
  if (v96 != v97) {
    j__free(v96);
  }
  if (v99) {
    sub_1002D6888(v98);
  }
}

void sub_1002CB434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002CB4B8(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_1002CB4CC()
{
}

void sub_1002CB4D4(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 152);
  _Unwind_Resume(a1);
}

double sub_1002CB50C(uint64_t a1, char a2, uint64_t a3)
{
  sub_1002D6AE8(v165, &off_100496390);
  uint64_t v6 = a2 & 7;
  int v7 = a2 & 6;
  if (v7 != 4 && (v6 - 1) >= 2 && (v7 != 6 || sub_10029AB74((int *)a1, -1)))
  {
    long long v157 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v157, 173), "normType == NORM_INF || normType == NORM_L1 || normType == NORM_L2 || normType == NORM_L2SQR || ((normType == NORM_HAMMING || normType == NORM_HAMMING2) && _src.type() == 0)", 173);
    sub_1002D2278(-215, (uint64_t *)&v157, "norm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 3186);
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    long long v9 = *(_OWORD *)(v8 + 16);
    long long v157 = *(_OWORD *)v8;
    long long v158 = v9;
    long long v159 = *(_OWORD *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 56);
    uint64_t v160 = *(void *)(v8 + 48);
    uint64_t v161 = v10;
    uint64_t v162 = (char *)&v157 + 8;
    uint64_t v163 = v164;
    v164[0] = 0;
    v164[1] = 0;
    if (v10) {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
    }
    if (*(int *)(v8 + 4) > 2)
    {
      DWORD1(v157) = 0;
      sub_1002931A8((uint64_t)&v157, v8);
    }
    else
    {
      uint64_t v11 = *(void **)(v8 + 72);
      unsigned int v12 = v163;
      *uint64_t v163 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v157);
  }
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v13 = *(void *)(a3 + 8);
    long long v14 = *(_OWORD *)(v13 + 16);
    long long v149 = *(_OWORD *)v13;
    long long v15 = *(_OWORD *)(v13 + 32);
    long long v150 = v14;
    long long v151 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    uint64_t v152 = *(void *)(v13 + 48);
    uint64_t v153 = v16;
    uint64_t v154 = (char *)&v149 + 8;
    unint64_t v155 = v156;
    v156[0] = 0;
    v156[1] = 0;
    if (v16) {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
    }
    if (*(int *)(v13 + 4) > 2)
    {
      DWORD1(v149) = 0;
      sub_1002931A8((uint64_t)&v149, v13);
    }
    else
    {
      long long v17 = *(void **)(v13 + 72);
      uint64_t v18 = v155;
      *unint64_t v155 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)&v149);
  }
  uint64_t v19 = v157 & 7;
  unint64_t v142 = (((unint64_t)v157 >> 3) & 0x1FF) + 1;
  if ((v157 & 0x4000) != 0)
  {
    if (!(void)v150) {
      goto LABEL_31;
    }
    if (SDWORD1(v149) >= 3)
    {
      uint64_t v21 = (int *)(v154 + 4);
      uint64_t v22 = 1;
      uint64_t v23 = DWORD1(v149) & 0xFFFFFFFE;
      uint64_t v24 = 1;
      do
      {
        v22 *= *(v21 - 1);
        v24 *= *v21;
        v21 += 2;
        v23 -= 2;
      }
      while (v23);
      uint64_t v20 = v24 * v22;
      unint64_t v25 = DWORD1(v149) - (unint64_t)(DWORD1(v149) & 0xFFFFFFFE);
      if (v25)
      {
        int v26 = &v154[(4 * DWORD1(v149)) & 0x3FFFFFFF8];
        do
        {
          uint64_t v27 = *(int *)v26;
          v26 += 4;
          v20 *= v27;
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      uint64_t v20 = SHIDWORD(v149) * (uint64_t)SDWORD2(v149);
    }
    if (!DWORD1(v149) || !v20)
    {
LABEL_31:
      if (SDWORD1(v157) >= 3)
      {
        uint64_t v29 = (int *)(v162 + 4);
        uint64_t v30 = 1;
        uint64_t v31 = DWORD1(v157) & 0xFFFFFFFE;
        uint64_t v32 = 1;
        do
        {
          v30 *= *(v29 - 1);
          v32 *= *v29;
          v29 += 2;
          v31 -= 2;
        }
        while (v31);
        uint64_t v28 = v32 * v30;
        unint64_t v33 = DWORD1(v157) - (unint64_t)(DWORD1(v157) & 0xFFFFFFFE);
        if (v33)
        {
          uint64_t v34 = &v162[(4 * DWORD1(v157)) & 0x3FFFFFFF8];
          do
          {
            uint64_t v35 = *(int *)v34;
            v34 += 4;
            v28 *= v35;
            --v33;
          }
          while (v33);
        }
      }
      else
      {
        uint64_t v28 = SHIDWORD(v157) * (uint64_t)SDWORD2(v157);
      }
      int v36 = v28 * v142;
      if (v28 * v142 == v28 * v142)
      {
        if ((v157 & 7) == 0)
        {
          if (v6 == 7)
          {
            int v41 = sub_1002CCAE0(v158, (int)v28 * (int)v142, 2);
          }
          else
          {
            if (v6 != 6) {
              goto LABEL_78;
            }
            int v41 = sub_1002D1828(v158, (int)v28 * (int)v142);
          }
          double v42 = (double)v41;
          uint64_t v43 = v153;
          if (!v153) {
            goto LABEL_198;
          }
          goto LABEL_196;
        }
        if (v19 == 5)
        {
          unint64_t v37 = (float *)v158;
          switch(v6)
          {
            case 4:
              unint64_t v38 = (v36 - 4);
              if (v36 < 4)
              {
                int v39 = 0;
                double v40 = 0.0;
                goto LABEL_64;
              }
              if (v38 >= 0xC)
              {
                uint64_t v45 = (v38 >> 2) + 1;
                unint64_t v44 = 4 * (v45 & 0x7FFFFFFC);
                uint64_t v46 = (const float *)(v158 + 32);
                double v40 = 0.0;
                uint64_t v47 = v45 & 0x7FFFFFFC;
                do
                {
                  uint64_t v48 = v46 - 8;
                  float32x2x4_t v173 = vld4_f32(v48);
                  float32x2x4_t v174 = vld4_f32(v46);
                  float64x2_t v49 = vcvtq_f64_f32(v173.val[0]);
                  float64x2_t v50 = vcvtq_f64_f32(v174.val[0]);
                  float64x2_t v51 = vcvtq_f64_f32(v173.val[1]);
                  float64x2_t v52 = vcvtq_f64_f32(v174.val[1]);
                  float64x2_t v53 = vcvtq_f64_f32(v173.val[2]);
                  float64x2_t v54 = vcvtq_f64_f32(v174.val[2]);
                  *(float64x2_t *)v173.val[0].f32 = vcvtq_f64_f32(v173.val[3]);
                  *(float64x2_t *)v173.val[1].f32 = vcvtq_f64_f32(v174.val[3]);
                  *(float64x2_t *)v173.val[2].f32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v51, v51), v49, v49), v53, v53), *(float64x2_t *)v173.val[0].f32, *(float64x2_t *)v173.val[0].f32);
                  *(float64x2_t *)v173.val[3].f32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v52, v52), v50, v50), v54, v54), *(float64x2_t *)v173.val[1].f32, *(float64x2_t *)v173.val[1].f32);
                  double v40 = v40 + *(double *)&v173.val[2] + v55 + *(double *)&v173.val[3] + v56;
                  v46 += 16;
                  v47 -= 4;
                }
                while (v47);
                if (v45 == (v45 & 0x7FFFFFFC)) {
                  goto LABEL_63;
                }
              }
              else
              {
                unint64_t v44 = 0;
                double v40 = 0.0;
              }
              unint64_t v57 = (float *)(v158 + 4 * v44 + 8);
              do
              {
                double v58 = *(v57 - 2);
                double v59 = *(v57 - 1);
                float v60 = *v57;
                float v61 = v57[1];
                v57 += 4;
                double v40 = v40 + v59 * v59 + v58 * v58 + v60 * v60 + v61 * v61;
                v44 += 4;
              }
              while (v44 <= v38);
LABEL_63:
              int v39 = (v38 & 0xFFFFFFFC) + 4;
LABEL_64:
              if (v39 >= v36) {
                goto LABEL_217;
              }
              uint64_t v62 = v39;
              uint64_t v63 = (~v39 + v36);
              if (v63)
              {
                uint64_t v64 = v63 + 1;
                uint64_t v65 = (v63 + 1) & 0x1FFFFFFFELL;
                uint64_t v66 = v65 + v62;
                uint64_t v67 = (float *)(v158 + 4 * v62 + 4);
                uint64_t v68 = v65;
                do
                {
                  double v40 = v40 + *(v67 - 1) * *(v67 - 1) + *v67 * *v67;
                  v67 += 2;
                  v68 -= 2;
                }
                while (v68);
                if (v64 == v65)
                {
LABEL_217:
                  double v42 = sqrt(v40);
                  uint64_t v43 = v153;
                  if (v153) {
                    goto LABEL_196;
                  }
                  goto LABEL_198;
                }
              }
              else
              {
                uint64_t v66 = v62;
              }
              uint64_t v138 = (float *)(v158 + 4 * v66);
              do
              {
                float v139 = *v138++;
                double v40 = v40 + v139 * v139;
                LODWORD(v66) = v66 + 1;
              }
              while (v36 > (int)v66);
              goto LABEL_217;
            case 5:
              *(void *)uint64_t v145 = 0;
              sub_1002CC430(v158, 0, (double *)v145, v36, 1);
              goto LABEL_56;
            case 2:
              *(void *)uint64_t v145 = 0;
              sub_1002CC63C(v158, 0, (double *)v145, v36, 1);
LABEL_56:
              double v42 = *(double *)v145;
              uint64_t v43 = v153;
              if (!v153) {
                goto LABEL_198;
              }
              goto LABEL_196;
            case 1:
              float v69 = 0.0;
              if (v36 >= 1)
              {
                uint64_t v70 = 4 * (v28 * v142);
                do
                {
                  float v71 = *v37++;
                  float v72 = fabsf(v71);
                  if (v69 < v72) {
                    float v69 = v72;
                  }
                  v70 -= 4;
                }
                while (v70);
              }
              double v42 = fmaxf(v69, 0.0);
              uint64_t v43 = v153;
              if (v153) {
                goto LABEL_196;
              }
              goto LABEL_198;
          }
        }
      }
    }
  }
LABEL_78:
  if ((void)v150)
  {
    if (SDWORD1(v149) >= 3)
    {
      float v74 = (int *)(v154 + 4);
      uint64_t v75 = 1;
      uint64_t v76 = DWORD1(v149) & 0xFFFFFFFE;
      uint64_t v77 = 1;
      do
      {
        v75 *= *(v74 - 1);
        v77 *= *v74;
        v74 += 2;
        v76 -= 2;
      }
      while (v76);
      uint64_t v73 = v77 * v75;
      unint64_t v78 = DWORD1(v149) - (unint64_t)(DWORD1(v149) & 0xFFFFFFFE);
      if (v78)
      {
        long long v79 = &v154[(4 * DWORD1(v149)) & 0x3FFFFFFF8];
        do
        {
          uint64_t v80 = *(int *)v79;
          v79 += 4;
          v73 *= v80;
          --v78;
        }
        while (v78);
      }
    }
    else
    {
      uint64_t v73 = SHIDWORD(v149) * (uint64_t)SDWORD2(v149);
    }
    if (DWORD1(v149) && v73 && (v149 & 0xFFF) != 0)
    {
      *(_OWORD *)uint64_t v145 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(v145, 32), "mask.empty() || mask.type() == 0", 32);
      sub_1002D2278(-215, (uint64_t *)v145, "norm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 3253);
    }
  }
  if (v7 != 6)
  {
    long long v82 = (void (*)(uint64_t, long long *, double *, uint64_t, unint64_t))*(&off_100496430[8 * (unint64_t)(v6 >> 1)]
                                                                                         + v19);
    if (!v82)
    {
      *(_OWORD *)uint64_t v145 = 0uLL;
      uint64_t v83 = sub_1002D19D8(v145, 9);
      *(unsigned char *)(v83 + 8) = 48;
      *(void *)uint64_t v83 = *(void *)"func != 0";
      sub_1002D2278(-215, (uint64_t *)v145, "norm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/stat.cpp", 3280);
    }
    unint64_t v170 = &v157;
    unint64_t v171 = &v149;
    uint64_t v172 = 0;
    uint64_t v167 = 0;
    BOOL v168 = 0;
    v144[0] = 0.0;
    sub_10029127C((uint64_t)v145, (uint64_t *)&v170, (uint64_t)&v167, -1);
    uint64_t v84 = *(void *)&v145[40];
    int v141 = v6;
    int v140 = v19;
    if (v6 == 2 && v19 <= 3)
    {
      int v143 = 0;
    }
    else
    {
      int v143 = 0;
      if (v7 != 4 || v19 > 1)
      {
        if (*(int *)&v145[40] >= 1)
        {
          uint64_t v130 = -1;
          while ((unint64_t)++v130 < *(void *)&v145[32])
          {
            v82(v167, v168, v144, v84, v142);
            if (v168) {
              BOOL v168 = (long long *)((char *)v168 + (int)v84);
            }
            sub_1002912C8((uint64_t)v145);
          }
          goto LABEL_182;
        }
LABEL_179:
        uint64_t v131 = -1;
        while ((unint64_t)++v131 < *(void *)&v145[32])
          sub_1002912C8((uint64_t)v145);
LABEL_182:
        if (v141 != 1)
        {
          double v132 = sqrt(v144[0]);
          if (v141 == 4) {
            double v42 = v132;
          }
          else {
            double v42 = v144[0];
          }
          uint64_t v43 = v153;
          if (v153) {
            goto LABEL_196;
          }
          goto LABEL_198;
        }
        if (v140 == 5)
        {
          double v42 = *(float *)v144;
          uint64_t v43 = v153;
          if (v153) {
            goto LABEL_196;
          }
          goto LABEL_198;
        }
        if (v140 == 6)
        {
          double v42 = v144[0];
          uint64_t v43 = v153;
          if (v153) {
            goto LABEL_196;
          }
          goto LABEL_198;
        }
        double v42 = (double)SLODWORD(v144[0]);
LABEL_195:
        uint64_t v43 = v153;
        if (!v153) {
          goto LABEL_198;
        }
        goto LABEL_196;
      }
    }
    if (v19 < 2 && v6 == 2) {
      unsigned int v86 = 0x800000;
    }
    else {
      unsigned int v86 = 0x8000;
    }
    signed int v87 = v86 / v142;
    if ((int)(v86 / v142) >= *(int *)&v145[40]) {
      unsigned int v88 = *(_DWORD *)&v145[40];
    }
    else {
      unsigned int v88 = v86 / v142;
    }
    if (SDWORD1(v157) < 1)
    {
      uint64_t v89 = 0;
      if (*(int *)&v145[40] < 1) {
        goto LABEL_179;
      }
    }
    else
    {
      uint64_t v89 = v163[DWORD1(v157) - 1];
      if (*(int *)&v145[40] < 1) {
        goto LABEL_179;
      }
    }
    int v120 = 0;
    unint64_t v121 = 0;
    while (v121 < *(void *)&v145[32])
    {
      int v122 = 0;
      ++v121;
      uint64_t v123 = v167;
      uint64_t v124 = v168;
      signed int v125 = v84;
      do
      {
        while (1)
        {
          if ((int)v88 >= v125) {
            uint64_t v126 = v125;
          }
          else {
            uint64_t v126 = v88;
          }
          v82(v123, v124, (double *)&v143, v126, v142);
          v120 += v126;
          if ((int)(v120 + v88) >= v87) {
            goto LABEL_169;
          }
          if (v125 >= v87) {
            int v127 = v87;
          }
          else {
            int v127 = v125;
          }
          if (v127 >= (int)v84) {
            int v127 = v84;
          }
          int v128 = v127 + v122;
          if (v121 >= *(void *)&v145[32] && v128 >= (int)v84)
          {
LABEL_169:
            int v120 = 0;
            v144[0] = v144[0] + (double)v143;
            int v143 = 0;
          }
          uint64_t v123 = v167 + v89 * (int)v126;
          uint64_t v167 = v123;
          if (!v168) {
            break;
          }
          uint64_t v124 = (long long *)((char *)v168 + (int)v126);
          BOOL v168 = v124;
          v122 += v88;
          v125 -= v88;
          if (v122 >= (int)v84) {
            goto LABEL_152;
          }
        }
        uint64_t v124 = 0;
        v122 += v88;
        v125 -= v88;
      }
      while (v122 < (int)v84);
LABEL_152:
      sub_1002912C8((uint64_t)v145);
    }
    goto LABEL_182;
  }
  if ((void)v150)
  {
    if (SDWORD1(v149) >= 3)
    {
      long long v90 = (int *)(v154 + 4);
      uint64_t v91 = 1;
      uint64_t v92 = DWORD1(v149) & 0xFFFFFFFE;
      uint64_t v93 = 1;
      do
      {
        v91 *= *(v90 - 1);
        v93 *= *v90;
        v90 += 2;
        v92 -= 2;
      }
      while (v92);
      uint64_t v81 = v93 * v91;
      unint64_t v94 = DWORD1(v149) - (unint64_t)(DWORD1(v149) & 0xFFFFFFFE);
      if (v94)
      {
        int v95 = &v154[(4 * DWORD1(v149)) & 0x3FFFFFFF8];
        do
        {
          uint64_t v96 = *(int *)v95;
          v95 += 4;
          v81 *= v96;
          --v94;
        }
        while (v94);
      }
    }
    else
    {
      uint64_t v81 = SHIDWORD(v149) * (uint64_t)SDWORD2(v149);
    }
    if (DWORD1(v149) && v81)
    {
      *(_DWORD *)uint64_t v145 = 1124007936;
      memset(&v145[4], 0, 60);
      float64x2_t v146 = &v145[8];
      uint64_t v147 = v148;
      v148[0] = 0;
      v148[1] = 0;
      uint64_t v172 = 0;
      LODWORD(v170) = 16842752;
      unint64_t v171 = &v157;
      uint64_t v169 = 0;
      LODWORD(v167) = 16842752;
      BOOL v168 = &v149;
      LODWORD(v144[0]) = 33619968;
      *(void *)&v144[1] = v145;
      v144[2] = 0.0;
      int v97 = sub_1002A02C4();
      sub_100210174((uint64_t)&v170, (uint64_t)&v167, (uint64_t)v144, (uint64_t)v97);
      uint64_t v172 = 0;
      LODWORD(v170) = 16842752;
      unint64_t v171 = (long long *)v145;
      std::string::size_type v98 = sub_1002A02C4();
      double v42 = sub_1002CB50C(&v170, v6, v98);
      if (*(void *)&v145[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v145[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v145);
      }
      *(void *)&v145[56] = 0;
      memset(&v145[16], 0, 32);
      if (*(int *)&v145[4] >= 1)
      {
        uint64_t v99 = 0;
        uint64_t v100 = v146;
        do
          *(_DWORD *)&v100[4 * v99++] = 0;
        while (v99 < *(int *)&v145[4]);
      }
      if (v147 != v148) {
        j__free(v147);
      }
      goto LABEL_195;
    }
  }
  unint64_t v170 = &v157;
  unint64_t v171 = 0;
  uint64_t v167 = 0;
  sub_10029127C((uint64_t)v145, (uint64_t *)&v170, (uint64_t)&v167, -1);
  int v101 = 0;
  unint64_t v102 = 0;
  int v103 = *(_DWORD *)&v145[40];
  unint64_t v104 = (*(_DWORD *)&v145[40] - 4);
  while (v102 < *(void *)&v145[32])
  {
    if (v6 == 6)
    {
      int v105 = sub_1002D1828(v167, v103);
      goto LABEL_130;
    }
    if (v103 >= 4)
    {
      unint64_t v107 = 0;
      int v105 = 0;
      do
      {
        v105 += byte_1004060F0[*(unsigned __int8 *)(v167 + v107)]
              + byte_1004060F0[*(unsigned __int8 *)(v167 + v107 + 1)]
              + byte_1004060F0[*(unsigned __int8 *)(v167 + v107 + 2)]
              + byte_1004060F0[*(unsigned __int8 *)(v167 + v107 + 3)];
        v107 += 4;
      }
      while (v107 <= v104);
      int v106 = (v104 & 0xFFFFFFFC) + 4;
      if (v106 >= v103) {
        goto LABEL_130;
      }
    }
    else
    {
      int v106 = 0;
      int v105 = 0;
      if (v103 <= 0) {
        goto LABEL_130;
      }
    }
    uint64_t v108 = v106;
    uint64_t v109 = (~v106 + v103);
    if (!v109)
    {
      uint64_t v113 = v108;
LABEL_145:
      int v118 = (unsigned __int8 *)(v167 + v113);
      do
      {
        int v119 = *v118++;
        v105 += byte_1004060F0[v119];
        LODWORD(v113) = v113 + 1;
      }
      while ((int)v113 < v103);
      goto LABEL_130;
    }
    int v110 = 0;
    uint64_t v111 = v109 + 1;
    uint64_t v112 = (v109 + 1) & 0x1FFFFFFFELL;
    uint64_t v113 = v112 + v108;
    uint64_t v114 = (unsigned __int8 *)(v167 + v108 + 1);
    uint64_t v115 = v112;
    do
    {
      uint64_t v116 = *(v114 - 1);
      int v117 = *v114;
      v114 += 2;
      v105 += byte_1004060F0[v116];
      v110 += byte_1004060F0[v117];
      v115 -= 2;
    }
    while (v115);
    v105 += v110;
    if (v111 != v112) {
      goto LABEL_145;
    }
LABEL_130:
    v101 += v105;
    ++v102;
    sub_1002912C8((uint64_t)v145);
  }
  double v42 = (double)v101;
  uint64_t v43 = v153;
  if (!v153) {
    goto LABEL_198;
  }
LABEL_196:
  if (atomic_fetch_add((atomic_uint *volatile)(v43 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v149);
  }
LABEL_198:
  uint64_t v153 = 0;
  long long v150 = 0u;
  long long v151 = 0u;
  if (SDWORD1(v149) >= 1)
  {
    uint64_t v133 = 0;
    uint64_t v134 = v154;
    do
      *(_DWORD *)&v134[4 * v133++] = 0;
    while (v133 < SDWORD1(v149));
  }
  if (v155 != v156) {
    j__free(v155);
  }
  if (v161 && atomic_fetch_add((atomic_uint *volatile)(v161 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v157);
  }
  uint64_t v161 = 0;
  long long v158 = 0u;
  long long v159 = 0u;
  if (SDWORD1(v157) >= 1)
  {
    uint64_t v135 = 0;
    int v136 = v162;
    do
      *(_DWORD *)&v136[4 * v135++] = 0;
    while (v135 < SDWORD1(v157));
  }
  if (v163 != v164) {
    j__free(v163);
  }
  if (v166) {
    sub_1002D6888(v165);
  }
  return v42;
}

void sub_1002CC31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_1000094F4((uint64_t)&a29);
  sub_1000094F4((uint64_t)&a41);
  sub_10020FA00(v41 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CC430(uint64_t a1, uint64_t a2, double *a3, int a4, int a5)
{
  double v5 = *a3;
  if (!a2)
  {
    int v8 = a5 * a4;
    unint64_t v9 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      int v10 = 0;
      double v11 = 0.0;
      if (v8 <= 0) {
        goto LABEL_29;
      }
LABEL_21:
      uint64_t v30 = v10;
      uint64_t v31 = (v8 + ~v10);
      if (v31)
      {
        uint64_t v32 = v31 + 1;
        uint64_t v33 = (v31 + 1) & 0x1FFFFFFFELL;
        uint64_t v34 = v33 + v30;
        uint64_t v35 = (float *)(a1 + 4 * v30 + 4);
        uint64_t v36 = v33;
        do
        {
          double v11 = v11 + *(v35 - 1) * *(v35 - 1) + *v35 * *v35;
          v35 += 2;
          v36 -= 2;
        }
        while (v36);
        if (v32 == v33) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v34 = v30;
      }
      unint64_t v37 = (float *)(a1 + 4 * v34);
      do
      {
        float v38 = *v37++;
        double v11 = v11 + v38 * v38;
        LODWORD(v34) = v34 + 1;
      }
      while (v8 > (int)v34);
LABEL_29:
      double v5 = v5 + v11;
      goto LABEL_30;
    }
    if (v9 >= 0xC)
    {
      uint64_t v13 = (v9 >> 2) + 1;
      unint64_t v12 = 4 * (v13 & 0x7FFFFFFC);
      long long v14 = (const float *)(a1 + 32);
      double v11 = 0.0;
      uint64_t v15 = v13 & 0x7FFFFFFC;
      do
      {
        uint64_t v16 = v14 - 8;
        float32x2x4_t v40 = vld4_f32(v16);
        float32x2x4_t v41 = vld4_f32(v14);
        float64x2_t v17 = vcvtq_f64_f32(v40.val[0]);
        float64x2_t v18 = vcvtq_f64_f32(v41.val[0]);
        float64x2_t v19 = vcvtq_f64_f32(v40.val[1]);
        float64x2_t v20 = vcvtq_f64_f32(v41.val[1]);
        float64x2_t v21 = vcvtq_f64_f32(v40.val[2]);
        float64x2_t v22 = vcvtq_f64_f32(v41.val[2]);
        *(float64x2_t *)v40.val[0].f32 = vcvtq_f64_f32(v40.val[3]);
        *(float64x2_t *)v40.val[1].f32 = vcvtq_f64_f32(v41.val[3]);
        *(float64x2_t *)v40.val[2].f32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v19, v19), v17, v17), v21, v21), *(float64x2_t *)v40.val[0].f32, *(float64x2_t *)v40.val[0].f32);
        *(float64x2_t *)v40.val[3].f32 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v20, v20), v18, v18), v22, v22), *(float64x2_t *)v40.val[1].f32, *(float64x2_t *)v40.val[1].f32);
        double v11 = v11 + *(double *)&v40.val[2] + v23 + *(double *)&v40.val[3] + v24;
        v14 += 16;
        v15 -= 4;
      }
      while (v15);
      if (v13 == (v13 & 0x7FFFFFFC))
      {
LABEL_20:
        int v10 = (v9 & 0xFFFFFFFC) + 4;
        if (v10 >= v8) {
          goto LABEL_29;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v12 = 0;
      double v11 = 0.0;
    }
    unint64_t v25 = (float *)(a1 + 4 * v12 + 8);
    do
    {
      double v26 = *(v25 - 2);
      double v27 = *(v25 - 1);
      float v28 = *v25;
      float v29 = v25[1];
      v25 += 4;
      double v11 = v11 + v27 * v27 + v26 * v26 + v28 * v28 + v29 * v29;
      v12 += 4;
    }
    while (v12 <= v9);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      if (*(unsigned char *)(a2 + i))
      {
        uint64_t v7 = 0;
        do
        {
          double v5 = v5 + *(float *)(a1 + v7) * *(float *)(a1 + v7);
          v7 += 4;
        }
        while (4 * a5 != v7);
      }
      a1 += 4 * a5;
    }
  }
LABEL_30:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CC63C(uint64_t a1, unsigned __int8 *a2, double *a3, int a4, int a5)
{
  double v5 = *a3;
  if (!a2)
  {
    int v9 = a5 * a4;
    unint64_t v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      int v11 = 0;
      double v12 = 0.0;
      if (v9 <= 0) {
        goto LABEL_42;
      }
LABEL_35:
      uint64_t v43 = v11;
      uint64_t v44 = (v9 + ~v11);
      if (v44 >= 7)
      {
        uint64_t v46 = v44 + 1;
        uint64_t v47 = (v44 + 1) & 0x1FFFFFFF8;
        uint64_t v45 = v47 + v43;
        uint64_t v48 = (float32x4_t *)(a1 + 4 * v43 + 16);
        uint64_t v49 = v47;
        do
        {
          float32x4_t v50 = vabsq_f32(v48[-1]);
          float32x4_t v51 = vabsq_f32(*v48);
          float64x2_t v52 = vcvt_hight_f64_f32(v50);
          float64x2_t v53 = vcvtq_f64_f32(*(float32x2_t *)v50.f32);
          float64x2_t v54 = vcvt_hight_f64_f32(v51);
          float64x2_t v55 = vcvtq_f64_f32(*(float32x2_t *)v51.f32);
          double v12 = v12
              + v53.f64[0]
              + v53.f64[1]
              + v52.f64[0]
              + v52.f64[1]
              + v55.f64[0]
              + v55.f64[1]
              + v54.f64[0]
              + v54.f64[1];
          v48 += 2;
          v49 -= 8;
        }
        while (v49);
        if (v46 == v47) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v45 = v43;
      }
      double v56 = (float *)(a1 + 4 * v45);
      do
      {
        float v57 = *v56++;
        double v12 = v12 + fabsf(v57);
        LODWORD(v45) = v45 + 1;
      }
      while (v9 > (int)v45);
LABEL_42:
      double v5 = v5 + v12;
      goto LABEL_43;
    }
    if (v10 >= 0x1C)
    {
      uint64_t v23 = (v10 >> 2) + 1;
      unint64_t v13 = 4 * (v23 & 0x7FFFFFF8);
      double v24 = (const float *)(a1 + 64);
      double v12 = 0.0;
      uint64_t v25 = v23 & 0x7FFFFFF8;
      do
      {
        double v26 = v24 - 16;
        float32x4x4_t v59 = vld4q_f32(v26);
        float32x4x4_t v60 = vld4q_f32(v24);
        float32x4_t v27 = vabsq_f32(v59.val[0]);
        float32x4_t v28 = vabsq_f32(v60.val[0]);
        float64x2_t v29 = vcvtq_f64_f32(*(float32x2_t *)v27.f32);
        float64x2_t v30 = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
        float32x4_t v31 = vabsq_f32(v59.val[1]);
        float32x4_t v32 = vabsq_f32(v60.val[1]);
        float64x2_t v33 = vaddq_f64(vcvt_hight_f64_f32(v27), vcvt_hight_f64_f32(v31));
        float64x2_t v34 = vaddq_f64(v29, vcvtq_f64_f32(*(float32x2_t *)v31.f32));
        float64x2_t v35 = vaddq_f64(vcvt_hight_f64_f32(v28), vcvt_hight_f64_f32(v32));
        float64x2_t v36 = vaddq_f64(v30, vcvtq_f64_f32(*(float32x2_t *)v32.f32));
        float32x4_t v37 = vabsq_f32(v59.val[2]);
        float32x4_t v38 = vabsq_f32(v60.val[2]);
        v59.val[0] = vabsq_f32(v59.val[3]);
        v59.val[1] = vabsq_f32(v60.val[3]);
        v59.val[2] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v59.val[0].f32);
        v59.val[3] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v59.val[1].f32);
        v59.val[0] = (float32x4_t)vaddq_f64(vaddq_f64(v33, vcvt_hight_f64_f32(v37)), vcvt_hight_f64_f32(v59.val[0]));
        v59.val[2] = (float32x4_t)vaddq_f64(vaddq_f64(v34, vcvtq_f64_f32(*(float32x2_t *)v37.f32)), (float64x2_t)v59.val[2]);
        v59.val[1] = (float32x4_t)vaddq_f64(vaddq_f64(v35, vcvt_hight_f64_f32(v38)), vcvt_hight_f64_f32(v59.val[1]));
        v59.val[3] = (float32x4_t)vaddq_f64(vaddq_f64(v36, vcvtq_f64_f32(*(float32x2_t *)v38.f32)), (float64x2_t)v59.val[3]);
        double v12 = v12
            + *(double *)v59.val[2].i64
            + *(double *)&v59.val[2].i64[1]
            + *(double *)v59.val[0].i64
            + *(double *)&v59.val[0].i64[1]
            + *(double *)v59.val[3].i64
            + *(double *)&v59.val[3].i64[1]
            + *(double *)v59.val[1].i64
            + *(double *)&v59.val[1].i64[1];
        v24 += 32;
        v25 -= 8;
      }
      while (v25);
      if (v23 == (v23 & 0x7FFFFFF8))
      {
LABEL_34:
        int v11 = (v10 & 0xFFFFFFFC) + 4;
        if (v11 >= v9) {
          goto LABEL_42;
        }
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v13 = 0;
      double v12 = 0.0;
    }
    int v39 = (float *)(a1 + 4 * v13 + 8);
    do
    {
      double v40 = fabsf(*(v39 - 2)) + fabsf(*(v39 - 1));
      float v41 = *v39;
      float v42 = v39[1];
      v39 += 4;
      double v12 = v12 + v40 + fabsf(v41) + fabsf(v42);
      v13 += 4;
    }
    while (v13 <= v10);
    goto LABEL_34;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    uint64_t v6 = a4;
    if (a5 >= 8)
    {
      for (uint64_t i = 0; i != a4; ++i)
      {
        if (a2[i])
        {
          uint64_t v15 = 0;
          do
          {
            float32x4_t v16 = vabsq_f32(*(float32x4_t *)(a1 + v15));
            float32x4_t v17 = vabsq_f32(*(float32x4_t *)(a1 + v15 + 16));
            float64x2_t v18 = vcvt_hight_f64_f32(v16);
            float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)v16.f32);
            float64x2_t v20 = vcvt_hight_f64_f32(v17);
            float64x2_t v21 = vcvtq_f64_f32(*(float32x2_t *)v17.f32);
            double v5 = v5
               + v19.f64[0]
               + v19.f64[1]
               + v18.f64[0]
               + v18.f64[1]
               + v21.f64[0]
               + v21.f64[1]
               + v20.f64[0]
               + v20.f64[1];
            v15 += 32;
          }
          while (((4 * a5) & 0x3FFFFFFE0) != v15);
          if ((a5 & 0xFFFFFFF8) != (unint64_t)a5)
          {
            uint64_t v22 = a5 & 0xFFFFFFF8;
            do
              double v5 = v5 + fabsf(*(float *)(a1 + 4 * v22++));
            while (a5 != v22);
          }
        }
        a1 += 4 * a5;
      }
    }
    else
    {
      uint64_t v7 = (float *)(a1 + 12);
      do
      {
        if (*a2++)
        {
          double v5 = v5 + fabsf(*(v7 - 3));
          if (a5 != 1)
          {
            double v5 = v5 + fabsf(*(v7 - 2));
            if (a5 != 2)
            {
              double v5 = v5 + fabsf(*(v7 - 1));
              if (a5 != 3)
              {
                double v5 = v5 + fabsf(*v7);
                if (a5 != 4)
                {
                  double v5 = v5 + fabsf(v7[1]);
                  if (a5 != 5)
                  {
                    double v5 = v5 + fabsf(v7[2]);
                    if (a5 != 6) {
                      double v5 = v5 + fabsf(v7[3]);
                    }
                  }
                }
              }
            }
          }
        }
        v7 += a5;
        --v6;
      }
      while (v6);
    }
  }
LABEL_43:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CCA38(float *a1, uint64_t a2, float *a3, int a4, int a5)
{
  float v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      for (uint64_t i = 0; i != a4; ++i)
      {
        if (*(unsigned char *)(a2 + i))
        {
          for (uint64_t j = 0; j != a5; ++j)
          {
            float v8 = fabsf(a1[j]);
            if (v5 < v8) {
              float v5 = v8;
            }
          }
        }
        a1 += a5;
      }
    }
  }
  else
  {
    uint64_t v9 = (a5 * a4);
    float v10 = 0.0;
    if ((int)v9 >= 1)
    {
      do
      {
        float v11 = *a1++;
        float v12 = fabsf(v11);
        if (v10 < v12) {
          float v10 = v12;
        }
        --v9;
      }
      while (v9);
    }
    if (v5 < v10) {
      float v5 = v10;
    }
  }
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CCAE0(uint64_t a1, int a2, int a3)
{
  switch(a3)
  {
    case 4:
      float v5 = (unsigned __int8 *)&unk_1004061F0;
      unint64_t v6 = (a2 - 4);
      if (a2 < 4)
      {
LABEL_11:
        unsigned int v9 = 0;
        uint64_t result = 0;
        if (a2 <= 0) {
          return result;
        }
LABEL_12:
        uint64_t v10 = v9;
        uint64_t v11 = ~v9 + a2;
        if (v11)
        {
          int v12 = 0;
          uint64_t v13 = v11 + 1;
          uint64_t v14 = (v11 + 1) & 0x1FFFFFFFELL;
          uint64_t v15 = v14 + v10;
          float32x4_t v16 = (unsigned __int8 *)(v10 + a1 + 1);
          uint64_t v17 = v14;
          do
          {
            uint64_t v18 = *(v16 - 1);
            int v19 = *v16;
            v16 += 2;
            LODWORD(result) = result + v5[v18];
            v12 += v5[v19];
            v17 -= 2;
          }
          while (v17);
          uint64_t result = (v12 + result);
          if (v13 == v14) {
            return result;
          }
        }
        else
        {
          uint64_t v15 = v10;
        }
        float64x2_t v20 = (unsigned __int8 *)(a1 + v15);
        do
        {
          int v21 = *v20++;
          uint64_t result = result + v5[v21];
          LODWORD(v15) = v15 + 1;
        }
        while ((int)v15 < a2);
        return result;
      }
      break;
    case 2:
      float v5 = (unsigned __int8 *)&unk_1004060F0;
      unint64_t v6 = (a2 - 4);
      if (a2 < 4) {
        goto LABEL_11;
      }
      break;
    case 1:
      return sub_1002D1828(a1, a2);
    default:
      return 0xFFFFFFFFLL;
  }
  unint64_t v7 = 0;
  LODWORD(result) = 0;
  int v8 = v6 & 0xFFFFFFFC;
  do
  {
    uint64_t result = result
           + v5[*(unsigned __int8 *)(a1 + v7)]
           + v5[*(unsigned __int8 *)(a1 + v7 + 1)]
           + v5[*(unsigned __int8 *)(a1 + v7 + 2)]
           + v5[*(unsigned __int8 *)(a1 + v7 + 3)];
    v7 += 4;
  }
  while (v7 <= v6);
  unsigned int v9 = v8 + 4;
  if (v8 + 4 < a2) {
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1002CCC18(uint64_t a1, signed int a2)
{
  signed int v2 = a2 & 0xFFFFFFF0;
  if ((int)(a2 & 0xFFFFFFF0) < 1)
  {
    signed int v3 = 0;
    int32x4_t v4 = 0uLL;
  }
  else
  {
    signed int v3 = 0;
    int32x4_t v4 = 0uLL;
    uint64_t v5 = a1;
    do
    {
      if (v2 - v3 >= 15360) {
        int v6 = 15360;
      }
      else {
        int v6 = v2 - v3;
      }
      if (v2 - v3 >= 1)
      {
        int v7 = 0;
        do
        {
          int v10 = v6 - v7;
          if (v6 - v7 >= 240) {
            int v10 = 240;
          }
          int8x16_t v11 = 0uLL;
          if (v10 >= 16)
          {
            unint64_t v12 = 0;
            do
            {
              int8x16_t v11 = vsubq_s8(v11, vceqzq_s8(*(int8x16_t *)(v5 + v12)));
              v12 += 16;
            }
            while (v12 <= (v10 - 16));
          }
          int8x16_t v8 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v11.i8);
          int8x16_t v9 = (int8x16_t)vmovl_high_u8((uint8x16_t)v11);
          int32x4_t v4 = (int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v4, (uint16x4_t)*(_OWORD *)&vaddw_u8((uint16x8_t)vextq_s8(v8, v8, 8uLL), *(uint8x8_t *)v11.i8)), (uint16x4_t)*(_OWORD *)&vaddw_u8((uint16x8_t)vextq_s8(v9, v9, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)));
          v5 += v10;
          v7 += v10;
        }
        while (v7 < v6);
      }
      v3 += v6;
    }
    while (v3 < v2);
  }
  unsigned int v13 = vaddvq_s32(v4);
  if (v13 >= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  uint64_t v14 = v3 - v13;
  if (v3 < a2)
  {
    unint64_t v15 = a2 - (uint64_t)v3;
    if (v15 < 8)
    {
      unint64_t v16 = v3;
      goto LABEL_33;
    }
    if (v15 >= 0x20)
    {
      unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFE0;
      int32x4_t v18 = 0uLL;
      int32x4_t v19 = (int32x4_t)v14;
      v20.i64[0] = 0x100000001;
      v20.i64[1] = 0x100000001;
      int v21 = (int8x16_t *)(v3 + a1 + 16);
      unint64_t v22 = v15 & 0xFFFFFFFFFFFFFFE0;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      int32x4_t v28 = 0uLL;
      do
      {
        uint8x16_t v29 = (uint8x16_t)vtstq_s8(v21[-1], v21[-1]);
        uint16x8_t v30 = vmovl_u8(*(uint8x8_t *)v29.i8);
        uint16x8_t v31 = vmovl_high_u8(v29);
        uint8x16_t v32 = (uint8x16_t)vtstq_s8(*v21, *v21);
        uint16x8_t v33 = vmovl_u8(*(uint8x8_t *)v32.i8);
        uint16x8_t v34 = vmovl_high_u8(v32);
        int32x4_t v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v20));
        int32x4_t v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v20));
        int32x4_t v18 = vaddq_s32(v18, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v30), v20));
        int32x4_t v19 = vaddq_s32(v19, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v30.i8), v20));
        int32x4_t v28 = vaddq_s32(v28, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v34), v20));
        int32x4_t v27 = vaddq_s32(v27, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v34.i8), v20));
        int32x4_t v26 = vaddq_s32(v26, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v33), v20));
        int32x4_t v25 = vaddq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v33.i8), v20));
        v21 += 2;
        v22 -= 32;
      }
      while (v22);
      uint64_t v14 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v25, v19), vaddq_s32(v27, v23)), vaddq_s32(vaddq_s32(v26, v18), vaddq_s32(v28, v24))));
      if (v15 == v17) {
        return v14;
      }
      if ((v15 & 0x18) == 0)
      {
        unint64_t v16 = v17 + v3;
LABEL_33:
        float v42 = (unsigned __int8 *)(a1 + v16);
        unint64_t v43 = a2 - v16;
        do
        {
          if (*v42++) {
            uint64_t v14 = (v14 + 1);
          }
          else {
            uint64_t v14 = v14;
          }
          --v43;
        }
        while (v43);
        return v14;
      }
    }
    else
    {
      unint64_t v17 = 0;
    }
    unint64_t v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + v3;
    int32x4_t v35 = 0uLL;
    int32x4_t v36 = (int32x4_t)v14;
    unint64_t v37 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
    float32x4_t v38 = (int8x8_t *)(a1 + v17 + v3);
    v39.i64[0] = 0x100000001;
    v39.i64[1] = 0x100000001;
    do
    {
      int8x8_t v40 = *v38++;
      uint16x8_t v41 = vmovl_u8((uint8x8_t)vtst_s8(v40, v40));
      int32x4_t v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v41), v39));
      int32x4_t v36 = vaddq_s32(v36, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v41.i8), v39));
      v37 += 8;
    }
    while (v37);
    uint64_t v14 = vaddvq_s32(vaddq_s32(v36, v35));
    if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8)) {
      return v14;
    }
    goto LABEL_33;
  }
  return v14;
}

uint64_t sub_1002CCEA8(int16x8_t *a1, int a2)
{
  signed int v2 = a2 & 0xFFFFFFF8;
  if ((int)(a2 & 0xFFFFFFF8) < 1)
  {
    signed int v3 = 0;
    int32x4_t v4 = 0uLL;
  }
  else
  {
    signed int v3 = 0;
    int32x4_t v4 = 0uLL;
    do
    {
      if (v2 - v3 >= 0x200000) {
        int v5 = 0x200000;
      }
      else {
        int v5 = v2 - v3;
      }
      if (v2 - v3 >= 1)
      {
        int v6 = 0;
        do
        {
          int v7 = v5 - v6;
          if (v5 - v6 >= 0x8000) {
            int v7 = 0x8000;
          }
          int16x8_t v8 = 0uLL;
          if (v7 >= 8)
          {
            unint64_t v9 = 0;
            int v10 = a1;
            do
            {
              int16x8_t v11 = *v10++;
              int16x8_t v8 = vsubq_s16(v8, vceqzq_s16(v11));
              v9 += 8;
            }
            while (v9 <= (v7 - 8));
          }
          int32x4_t v4 = (int32x4_t)vaddw_u16(vaddw_high_u16((uint32x4_t)v4, (uint16x8_t)v8), *(uint16x4_t *)v8.i8);
          a1 = (int16x8_t *)((char *)a1 + 2 * v7);
          v6 += v7;
        }
        while (v6 < v5);
      }
      v3 += v5;
    }
    while (v3 < v2);
  }
  int v12 = a2 - v3;
  unint64_t v13 = (a2 - v3 - 4);
  if (a2 - v3 >= 4)
  {
    if (v13 >= 0x3C)
    {
      uint64_t v17 = (v13 >> 2) + 1;
      unint64_t v16 = 4 * (v17 & 0x7FFFFFF0);
      i16 = a1[4].i16;
      int32x4_t v19 = 0uLL;
      v20.i64[0] = 0x100000001;
      v20.i64[1] = 0x100000001;
      uint64_t v21 = v17 & 0x7FFFFFF0;
      int32x4_t v22 = 0uLL;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      do
      {
        int32x4_t v25 = i16 - 32;
        int16x8x4_t v51 = vld4q_s16(v25);
        int16x8x4_t v52 = vld4q_s16(i16);
        uint16x8_t v26 = (uint16x8_t)vtstq_s16(v51.val[0], v51.val[0]);
        uint16x8_t v27 = (uint16x8_t)vtstq_s16(v52.val[0], v52.val[0]);
        uint16x8_t v28 = (uint16x8_t)vtstq_s16(v51.val[1], v51.val[1]);
        uint16x8_t v29 = (uint16x8_t)vtstq_s16(v52.val[1], v52.val[1]);
        uint16x8_t v30 = (uint16x8_t)vtstq_s16(v51.val[2], v51.val[2]);
        uint16x8_t v31 = (uint16x8_t)vtstq_s16(v52.val[2], v52.val[2]);
        v51.val[0] = vtstq_s16(v51.val[3], v51.val[3]);
        v51.val[2] = vtstq_s16(v52.val[3], v52.val[3]);
        int32x4_t v22 = vaddq_s32(vaddq_s32(vaddq_s32(v22, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v26), v20)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v28), v20), (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v30), v20))), (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16((uint16x8_t)v51.val[0]), v20));
        int32x4_t v19 = vaddq_s32(vaddq_s32(vaddq_s32(v19, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v26.i8), v20)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v28.i8), v20), (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v30.i8), v20))), (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v51.val[0].i8), v20));
        int32x4_t v24 = vaddq_s32(vaddq_s32(vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v27), v20)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v29), v20), (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v20))), (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16((uint16x8_t)v51.val[2]), v20));
        i16 += 64;
        int32x4_t v23 = vaddq_s32(vaddq_s32(vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v27.i8), v20)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8), v20), (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v20))), (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v51.val[2].i8), v20));
        v21 -= 16;
      }
      while (v21);
      unsigned int v15 = vaddvq_s32(vaddq_s32(vaddq_s32(v23, v19), vaddq_s32(v24, v22)));
      if (v17 == (v17 & 0x7FFFFFF0)) {
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v16 = 0;
      unsigned int v15 = 0;
    }
    uint8x16_t v32 = &a1->i16[v16 + 2];
    do
    {
      if (*(v32 - 2)) {
        ++v15;
      }
      if (*(v32 - 1)) {
        ++v15;
      }
      if (*v32) {
        ++v15;
      }
      if (v32[1]) {
        ++v15;
      }
      v16 += 4;
      v32 += 4;
    }
    while (v16 <= v13);
LABEL_35:
    int v14 = (v13 & 0xFFFFFFFC) + 4;
    if (v14 >= v12) {
      goto LABEL_45;
    }
    goto LABEL_36;
  }
  int v14 = 0;
  unsigned int v15 = 0;
  if (v12 <= 0) {
    goto LABEL_45;
  }
LABEL_36:
  uint64_t v33 = v14;
  uint64_t v34 = (~v3 + a2 - v14);
  if (v34 >= 0xF)
  {
    uint64_t v36 = v34 + 1;
    uint64_t v37 = (v34 + 1) & 0x1FFFFFFF0;
    uint64_t v35 = v37 + v33;
    int32x4_t v38 = 0uLL;
    int32x4_t v39 = (int32x4_t)v15;
    int8x8_t v40 = (int16x8_t *)((char *)a1 + 2 * v33 + 16);
    v41.i64[0] = 0x100000001;
    v41.i64[1] = 0x100000001;
    uint64_t v42 = v37;
    int32x4_t v43 = 0uLL;
    int32x4_t v44 = 0uLL;
    do
    {
      uint16x8_t v45 = (uint16x8_t)vtstq_s16(v40[-1], v40[-1]);
      uint16x8_t v46 = (uint16x8_t)vtstq_s16(*v40, *v40);
      int32x4_t v38 = vaddq_s32(v38, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v45), v41));
      int32x4_t v39 = vaddq_s32(v39, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8), v41));
      int32x4_t v44 = vaddq_s32(v44, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v46), v41));
      int32x4_t v43 = vaddq_s32(v43, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v46.i8), v41));
      v40 += 2;
      v42 -= 16;
    }
    while (v42);
    unsigned int v15 = vaddvq_s32(vaddq_s32(vaddq_s32(v43, v39), vaddq_s32(v44, v38)));
    if (v36 == v37) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v35 = v33;
  }
  uint64_t v47 = (unsigned __int16 *)a1 + v35;
  do
  {
    if (*v47++) {
      ++v15;
    }
    LODWORD(v35) = v35 + 1;
  }
  while (v12 > (int)v35);
LABEL_45:
  unsigned int v49 = vaddvq_s32(v4);
  if (v49 >= 0x7FFFFFFF) {
    unsigned int v49 = 0x7FFFFFFF;
  }
  return v3 - v49 + v15;
}

uint64_t sub_1002CD210(uint64_t a1, int a2)
{
  signed int v2 = a2 & 0xFFFFFFF8;
  if ((int)(a2 & 0xFFFFFFF8) < 1)
  {
    signed int v3 = 0;
    int32x4_t v4 = 0uLL;
  }
  else
  {
    signed int v3 = 0;
    int32x4_t v4 = 0uLL;
    do
    {
      if (v2 - v3 >= 0x200000) {
        int v5 = 0x200000;
      }
      else {
        int v5 = v2 - v3;
      }
      if (v2 - v3 >= 1)
      {
        int v6 = 0;
        do
        {
          int v7 = v5 - v6;
          if (v5 - v6 >= 0x8000) {
            int v7 = 0x8000;
          }
          int16x8_t v8 = 0uLL;
          if (v7 >= 8)
          {
            unint64_t v9 = 0;
            int v10 = (int32x4_t *)(a1 + 16);
            do
            {
              *(int8x8_t *)v11.i8 = vand_s8((int8x8_t)vmovn_s32(vceqzq_s32(v10[-1])), (int8x8_t)0x1000100010001);
              v11.u64[1] = (unint64_t)vand_s8((int8x8_t)vmovn_s32(vceqzq_s32(*v10)), (int8x8_t)0x1000100010001);
              int16x8_t v8 = vaddq_s16(v11, v8);
              v9 += 8;
              v10 += 2;
            }
            while (v9 <= (v7 - 8));
          }
          int32x4_t v4 = (int32x4_t)vaddw_u16(vaddw_high_u16((uint32x4_t)v4, (uint16x8_t)v8), *(uint16x4_t *)v8.i8);
          a1 += 4 * v7;
          v6 += v7;
        }
        while (v6 < v5);
      }
      v3 += v5;
    }
    while (v3 < v2);
  }
  int v12 = a2 - v3;
  unint64_t v13 = (a2 - v3 - 4);
  if (a2 - v3 >= 4)
  {
    if (v13 >= 0x1C)
    {
      uint64_t v17 = (v13 >> 2) + 1;
      unint64_t v16 = 4 * (v17 & 0x7FFFFFF8);
      int32x4_t v18 = (const float *)(a1 + 64);
      int32x4_t v19 = 0uLL;
      uint64_t v20 = v17 & 0x7FFFFFF8;
      int32x4_t v21 = 0uLL;
      do
      {
        int32x4_t v22 = v18 - 16;
        float32x4x4_t v39 = vld4q_f32(v22);
        float32x4x4_t v40 = vld4q_f32(v18);
        int32x4_t v19 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v19, vtstq_s32((int32x4_t)v39.val[0], (int32x4_t)v39.val[0])), vtstq_s32((int32x4_t)v39.val[1], (int32x4_t)v39.val[1])), vtstq_s32((int32x4_t)v39.val[2], (int32x4_t)v39.val[2])), vtstq_s32((int32x4_t)v39.val[3], (int32x4_t)v39.val[3]));
        int32x4_t v21 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v21, vtstq_s32((int32x4_t)v40.val[0], (int32x4_t)v40.val[0])), vtstq_s32((int32x4_t)v40.val[1], (int32x4_t)v40.val[1])), vtstq_s32((int32x4_t)v40.val[2], (int32x4_t)v40.val[2])), vtstq_s32((int32x4_t)v40.val[3], (int32x4_t)v40.val[3]));
        v18 += 32;
        v20 -= 8;
      }
      while (v20);
      unsigned int v15 = vaddvq_s32(vaddq_s32(v21, v19));
      if (v17 == (v17 & 0x7FFFFFF8)) {
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v16 = 0;
      unsigned int v15 = 0;
    }
    int32x4_t v23 = (int *)(a1 + 4 * v16 + 8);
    do
    {
      if (*(v23 - 2)) {
        ++v15;
      }
      if (*(v23 - 1)) {
        ++v15;
      }
      int v24 = *v23;
      int v25 = v23[1];
      v23 += 4;
      if (v24) {
        ++v15;
      }
      if (v25) {
        ++v15;
      }
      v16 += 4;
    }
    while (v16 <= v13);
LABEL_35:
    int v14 = (v13 & 0xFFFFFFFC) + 4;
    if (v14 >= v12) {
      goto LABEL_45;
    }
    goto LABEL_36;
  }
  int v14 = 0;
  unsigned int v15 = 0;
  if (v12 <= 0) {
    goto LABEL_45;
  }
LABEL_36:
  uint64_t v26 = v14;
  uint64_t v27 = (~v3 + a2 - v14);
  if (v27 >= 7)
  {
    uint64_t v29 = v27 + 1;
    uint64_t v30 = (v27 + 1) & 0x1FFFFFFF8;
    uint64_t v28 = v30 + v26;
    int32x4_t v31 = 0uLL;
    int32x4_t v32 = (int32x4_t)v15;
    uint64_t v33 = (int32x4_t *)(a1 + 4 * v26 + 16);
    uint64_t v34 = v30;
    do
    {
      int32x4_t v32 = vsubq_s32(v32, vtstq_s32(v33[-1], v33[-1]));
      int32x4_t v31 = vsubq_s32(v31, vtstq_s32(*v33, *v33));
      v33 += 2;
      v34 -= 8;
    }
    while (v34);
    unsigned int v15 = vaddvq_s32(vaddq_s32(v31, v32));
    if (v29 == v30) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v28 = v26;
  }
  uint64_t v35 = (_DWORD *)(a1 + 4 * v28);
  do
  {
    if (*v35++) {
      ++v15;
    }
    LODWORD(v28) = v28 + 1;
  }
  while (v12 > (int)v28);
LABEL_45:
  unsigned int v37 = vaddvq_s32(v4);
  if (v37 >= 0x7FFFFFFF) {
    unsigned int v37 = 0x7FFFFFFF;
  }
  return v3 - v37 + v15;
}

uint64_t sub_1002CD494(float32x4_t *a1, int a2)
{
  signed int v2 = a2 & 0xFFFFFFF8;
  if ((int)(a2 & 0xFFFFFFF8) < 1)
  {
    signed int v3 = 0;
    int32x4_t v4 = 0uLL;
  }
  else
  {
    signed int v3 = 0;
    int32x4_t v4 = 0uLL;
    do
    {
      if (v2 - v3 >= 0x200000) {
        int v5 = 0x200000;
      }
      else {
        int v5 = v2 - v3;
      }
      if (v2 - v3 >= 1)
      {
        int v6 = 0;
        do
        {
          int v7 = v5 - v6;
          if (v5 - v6 >= 0x8000) {
            int v7 = 0x8000;
          }
          int16x8_t v8 = 0uLL;
          if (v7 >= 8)
          {
            unint64_t v9 = 0;
            int v10 = a1 + 1;
            do
            {
              *(int8x8_t *)v11.i8 = vand_s8((int8x8_t)vmovn_s32(vceqzq_f32(v10[-1])), (int8x8_t)0x1000100010001);
              v11.u64[1] = (unint64_t)vand_s8((int8x8_t)vmovn_s32(vceqzq_f32(*v10)), (int8x8_t)0x1000100010001);
              int16x8_t v8 = vaddq_s16(v11, v8);
              v9 += 8;
              v10 += 2;
            }
            while (v9 <= (v7 - 8));
          }
          int32x4_t v4 = (int32x4_t)vaddw_u16(vaddw_high_u16((uint32x4_t)v4, (uint16x8_t)v8), *(uint16x4_t *)v8.i8);
          a1 = (float32x4_t *)((char *)a1 + 4 * v7);
          v6 += v7;
        }
        while (v6 < v5);
      }
      v3 += v5;
    }
    while (v3 < v2);
  }
  int v12 = a2 - v3;
  unint64_t v13 = (a2 - v3 - 4);
  if (a2 - v3 >= 4)
  {
    if (v13 >= 0x1C)
    {
      uint64_t v17 = (v13 >> 2) + 1;
      unint64_t v16 = 4 * (v17 & 0x7FFFFFF8);
      f32 = a1[4].f32;
      int32x4_t v19 = 0uLL;
      uint64_t v20 = v17 & 0x7FFFFFF8;
      int32x4_t v21 = 0uLL;
      do
      {
        int32x4_t v22 = f32 - 16;
        float32x4x4_t v39 = vld4q_f32(v22);
        float32x4x4_t v40 = vld4q_f32(f32);
        int32x4_t v19 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v19, (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v39.val[0]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v39.val[1]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v39.val[2]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v39.val[3])));
        int32x4_t v21 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v21, (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v40.val[0]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v40.val[1]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v40.val[2]))), (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v40.val[3])));
        f32 += 32;
        v20 -= 8;
      }
      while (v20);
      unsigned int v15 = vaddvq_s32(vaddq_s32(v21, v19));
      if (v17 == (v17 & 0x7FFFFFF8)) {
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v16 = 0;
      unsigned int v15 = 0;
    }
    int32x4_t v23 = &a1[v16 / 4].f32[2];
    do
    {
      if (*(v23 - 2) != 0.0) {
        ++v15;
      }
      if (*(v23 - 1) != 0.0) {
        ++v15;
      }
      float v24 = *v23;
      float v25 = v23[1];
      v23 += 4;
      if (v24 != 0.0) {
        ++v15;
      }
      if (v25 != 0.0) {
        ++v15;
      }
      v16 += 4;
    }
    while (v16 <= v13);
LABEL_35:
    int v14 = (v13 & 0xFFFFFFFC) + 4;
    if (v14 >= v12) {
      goto LABEL_45;
    }
    goto LABEL_36;
  }
  int v14 = 0;
  unsigned int v15 = 0;
  if (v12 <= 0) {
    goto LABEL_45;
  }
LABEL_36:
  uint64_t v26 = v14;
  uint64_t v27 = (~v3 + a2 - v14);
  if (v27 >= 7)
  {
    uint64_t v29 = v27 + 1;
    uint64_t v30 = (v27 + 1) & 0x1FFFFFFF8;
    uint64_t v28 = v30 + v26;
    int32x4_t v31 = 0uLL;
    int32x4_t v32 = (int32x4_t)v15;
    uint64_t v33 = (float32x4_t *)((char *)a1 + 4 * v26 + 16);
    uint64_t v34 = v30;
    do
    {
      int32x4_t v32 = vsubq_s32(v32, (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v33[-1])));
      int32x4_t v31 = vsubq_s32(v31, (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(*v33)));
      v33 += 2;
      v34 -= 8;
    }
    while (v34);
    unsigned int v15 = vaddvq_s32(vaddq_s32(v31, v32));
    if (v29 == v30) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v28 = v26;
  }
  uint64_t v35 = &a1->f32[v28];
  do
  {
    float v36 = *v35++;
    if (v36 != 0.0) {
      ++v15;
    }
    LODWORD(v28) = v28 + 1;
  }
  while (v12 > (int)v28);
LABEL_45:
  unsigned int v37 = vaddvq_s32(v4);
  if (v37 >= 0x7FFFFFFF) {
    unsigned int v37 = 0x7FFFFFFF;
  }
  return v3 - v37 + v15;
}

uint64_t sub_1002CD740(uint64_t a1, int a2)
{
  unint64_t v2 = (a2 - 4);
  if (a2 < 4)
  {
    int v3 = 0;
    uint64_t v4 = 0;
    if (a2 <= 0) {
      return v4;
    }
    goto LABEL_21;
  }
  if (v2 >= 0x1C)
  {
    uint64_t v6 = (v2 >> 2) + 1;
    unint64_t v5 = 4 * (v6 & 0x7FFFFFF8);
    int v7 = (const double *)(a1 + 128);
    int32x4_t v8 = 0uLL;
    uint64_t v9 = v6 & 0x7FFFFFF8;
    int32x4_t v10 = 0uLL;
    do
    {
      int16x8_t v11 = v7 - 16;
      int v12 = v7 - 8;
      float64x2x4_t v33 = vld4q_f64(v11);
      float64x2x4_t v34 = vld4q_f64(v12);
      unint64_t v13 = v7;
      float64x2x4_t v35 = vld4q_f64(v13);
      v13 += 8;
      float64x2x4_t v36 = vld4q_f64(v13);
      int32x4_t v8 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v8, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33.val[0]), (int32x4_t)vceqzq_f64(v34.val[0])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33.val[1]), (int32x4_t)vceqzq_f64(v34.val[1])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33.val[2]), (int32x4_t)vceqzq_f64(v34.val[2])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v33.val[3]), (int32x4_t)vceqzq_f64(v34.val[3]))));
      int32x4_t v10 = vsubq_s32(vsubq_s32(vsubq_s32(vsubq_s32(v10, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v35.val[0]), (int32x4_t)vceqzq_f64(v36.val[0])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v35.val[1]), (int32x4_t)vceqzq_f64(v36.val[1])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v35.val[2]), (int32x4_t)vceqzq_f64(v36.val[2])))), (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v35.val[3]), (int32x4_t)vceqzq_f64(v36.val[3]))));
      v7 += 32;
      v9 -= 8;
    }
    while (v9);
    uint64_t v4 = vaddvq_s32(vaddq_s32(v10, v8));
    if (v6 == (v6 & 0x7FFFFFF8)) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v5 = 0;
    LODWORD(v4) = 0;
  }
  int v14 = (double *)(a1 + 8 * v5 + 16);
  do
  {
    if (*(v14 - 2) != 0.0) {
      LODWORD(v4) = v4 + 1;
    }
    if (*(v14 - 1) != 0.0) {
      LODWORD(v4) = v4 + 1;
    }
    double v15 = *v14;
    double v16 = v14[1];
    v14 += 4;
    if (v15 != 0.0) {
      LODWORD(v4) = v4 + 1;
    }
    if (v16 == 0.0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = (v4 + 1);
    }
    v5 += 4;
  }
  while (v5 <= v2);
LABEL_20:
  int v3 = (v2 & 0xFFFFFFFC) + 4;
  if (v3 >= a2) {
    return v4;
  }
LABEL_21:
  uint64_t v17 = v3;
  uint64_t v18 = (~v3 + a2);
  if (v18 >= 7)
  {
    uint64_t v20 = v18 + 1;
    uint64_t v21 = (v18 + 1) & 0x1FFFFFFF8;
    uint64_t v19 = v21 + v17;
    int32x4_t v22 = 0uLL;
    int32x4_t v23 = (int32x4_t)v4;
    float v24 = (float64x2_t *)(a1 + 8 * v17 + 32);
    uint64_t v25 = v21;
    do
    {
      float64x2_t v26 = v24[-2];
      float64x2_t v27 = v24[-1];
      float64x2_t v28 = *v24;
      float64x2_t v29 = v24[1];
      v24 += 4;
      int32x4_t v23 = vsubq_s32(v23, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v26), (int32x4_t)vceqzq_f64(v27))));
      int32x4_t v22 = vsubq_s32(v22, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v28), (int32x4_t)vceqzq_f64(v29))));
      v25 -= 8;
    }
    while (v25);
    uint64_t v4 = vaddvq_s32(vaddq_s32(v22, v23));
    if (v20 == v21) {
      return v4;
    }
  }
  else
  {
    uint64_t v19 = v17;
  }
  uint64_t v30 = (double *)(a1 + 8 * v19);
  do
  {
    double v31 = *v30++;
    if (v31 == 0.0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = (v4 + 1);
    }
    LODWORD(v19) = v19 + 1;
  }
  while ((int)v19 < a2);
  return v4;
}

unsigned __int8 *sub_1002CD970(unsigned __int8 *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8 = *a3;
  int v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      uint64_t v12 = a7;
      do
      {
        int v14 = *result++;
        int v13 = v14;
        int v16 = *a2++;
        int v15 = v16;
        if (v8 >= v13) {
          int v17 = v13;
        }
        else {
          int v17 = v8;
        }
        if (v8 <= v13) {
          uint64_t v18 = v10;
        }
        else {
          uint64_t v18 = a8;
        }
        BOOL v20 = __OFSUB__(v9, v13);
        BOOL v19 = v9 - v13 < 0;
        if (v9 > v13) {
          int v13 = v9;
        }
        if (v19 != v20) {
          uint64_t v21 = a8;
        }
        else {
          uint64_t v21 = v11;
        }
        if (v15)
        {
          int v8 = v17;
          uint64_t v10 = v18;
          int v9 = v13;
          uint64_t v11 = v21;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    uint64_t v22 = a7;
    do
    {
      int v24 = *result++;
      int v23 = v24;
      BOOL v27 = __OFSUB__(v8, v24);
      BOOL v25 = v8 == v24;
      BOOL v26 = v8 - v24 < 0;
      if (v8 >= v24) {
        int v8 = v23;
      }
      if (!(v26 ^ v27 | v25)) {
        uint64_t v10 = a8;
      }
      BOOL v29 = __OFSUB__(v9, v23);
      BOOL v28 = v9 - v23 < 0;
      if (v9 <= v23) {
        int v9 = v23;
      }
      if (v28 != v29) {
        uint64_t v11 = a8;
      }
      ++a8;
      --v22;
    }
    while (v22);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

char *sub_1002CDA18(char *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8 = *a3;
  int v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      uint64_t v12 = a7;
      do
      {
        int v14 = *result++;
        int v13 = v14;
        int v16 = *a2++;
        int v15 = v16;
        if (v8 >= v13) {
          int v17 = v13;
        }
        else {
          int v17 = v8;
        }
        if (v8 <= v13) {
          uint64_t v18 = v10;
        }
        else {
          uint64_t v18 = a8;
        }
        BOOL v20 = __OFSUB__(v9, v13);
        BOOL v19 = v9 - v13 < 0;
        if (v9 > v13) {
          int v13 = v9;
        }
        if (v19 != v20) {
          uint64_t v21 = a8;
        }
        else {
          uint64_t v21 = v11;
        }
        if (v15)
        {
          int v8 = v17;
          uint64_t v10 = v18;
          int v9 = v13;
          uint64_t v11 = v21;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    uint64_t v22 = a7;
    do
    {
      int v24 = *result++;
      int v23 = v24;
      BOOL v27 = __OFSUB__(v8, v24);
      BOOL v25 = v8 == v24;
      BOOL v26 = v8 - v24 < 0;
      if (v8 >= v24) {
        int v8 = v23;
      }
      if (!(v26 ^ v27 | v25)) {
        uint64_t v10 = a8;
      }
      BOOL v29 = __OFSUB__(v9, v23);
      BOOL v28 = v9 - v23 < 0;
      if (v9 <= v23) {
        int v9 = v23;
      }
      if (v28 != v29) {
        uint64_t v11 = a8;
      }
      ++a8;
      --v22;
    }
    while (v22);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

unsigned __int16 *sub_1002CDAC0(unsigned __int16 *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8 = *a3;
  int v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      uint64_t v12 = a7;
      do
      {
        int v14 = *result++;
        int v13 = v14;
        int v16 = *a2++;
        int v15 = v16;
        if (v8 >= v13) {
          int v17 = v13;
        }
        else {
          int v17 = v8;
        }
        if (v8 <= v13) {
          uint64_t v18 = v10;
        }
        else {
          uint64_t v18 = a8;
        }
        BOOL v20 = __OFSUB__(v9, v13);
        BOOL v19 = v9 - v13 < 0;
        if (v9 > v13) {
          int v13 = v9;
        }
        if (v19 != v20) {
          uint64_t v21 = a8;
        }
        else {
          uint64_t v21 = v11;
        }
        if (v15)
        {
          int v8 = v17;
          uint64_t v10 = v18;
          int v9 = v13;
          uint64_t v11 = v21;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    uint64_t v22 = a7;
    do
    {
      int v24 = *result++;
      int v23 = v24;
      BOOL v27 = __OFSUB__(v8, v24);
      BOOL v25 = v8 == v24;
      BOOL v26 = v8 - v24 < 0;
      if (v8 >= v24) {
        int v8 = v23;
      }
      if (!(v26 ^ v27 | v25)) {
        uint64_t v10 = a8;
      }
      BOOL v29 = __OFSUB__(v9, v23);
      BOOL v28 = v9 - v23 < 0;
      if (v9 <= v23) {
        int v9 = v23;
      }
      if (v28 != v29) {
        uint64_t v11 = a8;
      }
      ++a8;
      --v22;
    }
    while (v22);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

__int16 *sub_1002CDB68(__int16 *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8 = *a3;
  int v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      uint64_t v12 = a7;
      do
      {
        int v14 = *result++;
        int v13 = v14;
        int v16 = *a2++;
        int v15 = v16;
        if (v8 >= v13) {
          int v17 = v13;
        }
        else {
          int v17 = v8;
        }
        if (v8 <= v13) {
          uint64_t v18 = v10;
        }
        else {
          uint64_t v18 = a8;
        }
        BOOL v20 = __OFSUB__(v9, v13);
        BOOL v19 = v9 - v13 < 0;
        if (v9 > v13) {
          int v13 = v9;
        }
        if (v19 != v20) {
          uint64_t v21 = a8;
        }
        else {
          uint64_t v21 = v11;
        }
        if (v15)
        {
          int v8 = v17;
          uint64_t v10 = v18;
          int v9 = v13;
          uint64_t v11 = v21;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    uint64_t v22 = a7;
    do
    {
      int v24 = *result++;
      int v23 = v24;
      BOOL v27 = __OFSUB__(v8, v24);
      BOOL v25 = v8 == v24;
      BOOL v26 = v8 - v24 < 0;
      if (v8 >= v24) {
        int v8 = v23;
      }
      if (!(v26 ^ v27 | v25)) {
        uint64_t v10 = a8;
      }
      BOOL v29 = __OFSUB__(v9, v23);
      BOOL v28 = v9 - v23 < 0;
      if (v9 <= v23) {
        int v9 = v23;
      }
      if (v28 != v29) {
        uint64_t v11 = a8;
      }
      ++a8;
      --v22;
    }
    while (v22);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

int *sub_1002CDC10(int *result, unsigned __int8 *a2, int *a3, int *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  int v8 = *a3;
  int v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      uint64_t v12 = a7;
      do
      {
        int v14 = *result++;
        int v13 = v14;
        int v15 = *a2++;
        BOOL v16 = v15 != 0;
        if (v15 != 0 && v13 < v8)
        {
          int v8 = v13;
          uint64_t v10 = a8;
        }
        if (v16 && v13 > v9)
        {
          int v9 = v13;
          uint64_t v11 = a8;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    uint64_t v17 = a7;
    do
    {
      int v19 = *result++;
      int v18 = v19;
      if (v19 < v8)
      {
        int v8 = v18;
        uint64_t v10 = a8;
      }
      if (v18 > v9)
      {
        int v9 = v18;
        uint64_t v11 = a8;
      }
      ++a8;
      --v17;
    }
    while (v17);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

float *sub_1002CDCBC(float *result, unsigned __int8 *a2, float *a3, float *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  float v8 = *a3;
  float v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      uint64_t v12 = a7;
      do
      {
        float v13 = *result++;
        float v14 = v13;
        int v15 = *a2++;
        BOOL v16 = v15 != 0;
        if (v15 != 0 && v14 < v8)
        {
          float v8 = v14;
          uint64_t v10 = a8;
        }
        if (v16 && v14 > v9)
        {
          float v9 = v14;
          uint64_t v11 = a8;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    uint64_t v17 = a7;
    do
    {
      float v18 = *result++;
      float v19 = v18;
      if (v18 < v8)
      {
        float v8 = v19;
        uint64_t v10 = a8;
      }
      if (v19 > v9)
      {
        float v9 = v19;
        uint64_t v11 = a8;
      }
      ++a8;
      --v17;
    }
    while (v17);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

double *sub_1002CDD68(double *result, unsigned __int8 *a2, double *a3, double *a4, uint64_t *a5, uint64_t *a6, int a7, uint64_t a8)
{
  double v8 = *a3;
  double v9 = *a4;
  uint64_t v10 = *a5;
  uint64_t v11 = *a6;
  if (a2)
  {
    if (a7 >= 1)
    {
      uint64_t v12 = a7;
      do
      {
        double v13 = *result++;
        double v14 = v13;
        LODWORD(v13) = *a2++;
        BOOL v15 = LODWORD(v13) != 0;
        if (LODWORD(v13) != 0 && v14 < v8)
        {
          double v8 = v14;
          uint64_t v10 = a8;
        }
        if (v15 && v14 > v9)
        {
          double v9 = v14;
          uint64_t v11 = a8;
        }
        ++a8;
        --v12;
      }
      while (v12);
    }
  }
  else if (a7 >= 1)
  {
    uint64_t v16 = a7;
    do
    {
      double v17 = *result++;
      double v18 = v17;
      if (v17 < v8)
      {
        double v8 = v18;
        uint64_t v10 = a8;
      }
      if (v18 > v9)
      {
        double v9 = v18;
        uint64_t v11 = a8;
      }
      ++a8;
      --v16;
    }
    while (v16);
  }
  *a5 = v10;
  *a6 = v11;
  *a3 = v8;
  *a4 = v9;
  return result;
}

uint64_t sub_1002CDE14(int8x16_t *a1, unsigned __int8 *a2, signed int *a3, int a4, int a5, double a6, double a7, double a8, double a9, int32x4_t a10, double a11, int32x4_t a12)
{
  signed int v12 = *a3;
  if (a2)
  {
    if (a4 < 1 || a5 < 1) {
      goto LABEL_63;
    }
    uint64_t v13 = a4;
    if (a5 < 8)
    {
      double v14 = &a1->u8[3];
      do
      {
        if (*a2++)
        {
          if (v12 <= *(v14 - 3)) {
            signed int v12 = *(v14 - 3);
          }
          if (a5 != 1)
          {
            if (v12 <= *(v14 - 2)) {
              signed int v12 = *(v14 - 2);
            }
            if (a5 != 2)
            {
              if (v12 <= *(v14 - 1)) {
                signed int v12 = *(v14 - 1);
              }
              if (a5 != 3)
              {
                if (v12 <= *v14) {
                  signed int v12 = *v14;
                }
                if (a5 != 4)
                {
                  if (v12 <= v14[1]) {
                    signed int v12 = v14[1];
                  }
                  if (a5 != 5)
                  {
                    if (v12 <= v14[2]) {
                      signed int v12 = v14[2];
                    }
                    if (a5 != 6 && v12 <= v14[3]) {
                      signed int v12 = v14[3];
                    }
                  }
                }
              }
            }
          }
        }
        v14 += a5;
        --v13;
      }
      while (v13);
      goto LABEL_63;
    }
    uint64_t v19 = 0;
    uint64_t v20 = a5 & 0xFFFFFFE0;
    uint64_t v21 = a5 & 0xFFFFFFF8;
    while (1)
    {
      if (a2[v19])
      {
        if (a5 >= 0x20)
        {
          unint64_t v23 = 0;
          int32x4_t v24 = vdupq_n_s32(v12);
          int32x4_t v25 = v24;
          int32x4_t v26 = v24;
          int32x4_t v27 = v24;
          int32x4_t v28 = v24;
          int32x4_t v29 = v24;
          int32x4_t v30 = v24;
          int32x4_t v31 = v24;
          do
          {
            int8x16_t v32 = a1[v23 / 0x10];
            int8x16_t v33 = a1[v23 / 0x10 + 1];
            int32x4_t v27 = vmaxq_s32(v27, (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_1004048C0));
            int32x4_t v26 = vmaxq_s32(v26, (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_1004048B0));
            int32x4_t v25 = vmaxq_s32(v25, (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_1004048A0));
            int32x4_t v24 = vmaxq_s32(v24, (int32x4_t)vqtbl1q_s8(v32, (int8x16_t)xmmword_100404890));
            int32x4_t v31 = vmaxq_s32(v31, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1004048C0));
            int32x4_t v30 = vmaxq_s32(v30, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1004048B0));
            int32x4_t v29 = vmaxq_s32(v29, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1004048A0));
            int32x4_t v28 = vmaxq_s32(v28, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_100404890));
            v23 += 32;
          }
          while (v20 != v23);
          a12 = vmaxq_s32(v25, v29);
          signed int v12 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(vmaxq_s32(v24, v28), vmaxq_s32(v26, v30)), vmaxq_s32(a12, vmaxq_s32(v27, v31))));
          if (v20 == a5) {
            goto LABEL_33;
          }
          uint64_t v22 = a5 & 0xFFFFFFE0;
          uint64_t v34 = v22;
          if ((a5 & 0x18) == 0) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v22 = 0;
        }
        int32x4_t v35 = vdupq_n_s32(v12);
        int32x4_t v36 = v35;
        do
        {
          a12.i64[0] = *(uint64_t *)((char *)a1->i64 + v22);
          int32x4_t v37 = (int32x4_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_100404890);
          a12 = (int32x4_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_1004048A0);
          int32x4_t v36 = vmaxq_s32(v36, a12);
          int32x4_t v35 = vmaxq_s32(v35, v37);
          v22 += 8;
        }
        while (v21 != v22);
        signed int v12 = vmaxvq_s32(vmaxq_s32(v35, v36));
        uint64_t v34 = a5 & 0xFFFFFFF8;
        if (v21 != a5)
        {
          do
          {
LABEL_44:
            if (v12 <= a1->u8[v34]) {
              signed int v12 = a1->u8[v34];
            }
            ++v34;
          }
          while (a5 != v34);
        }
      }
LABEL_33:
      ++v19;
      a1 = (int8x16_t *)((char *)a1 + a5);
      if (v19 == a4) {
        goto LABEL_63;
      }
    }
  }
  uint64_t v16 = (a5 * a4);
  if ((int)v16 < 1)
  {
    signed int v18 = 0;
    goto LABEL_61;
  }
  if (v16 < 8)
  {
    uint64_t v17 = 0;
    signed int v18 = 0;
    goto LABEL_57;
  }
  if (v16 >= 0x20)
  {
    uint64_t v17 = v16 & 0x7FFFFFE0;
    int32x4_t v38 = a1 + 1;
    int32x4_t v39 = 0uLL;
    int32x4_t v40 = 0uLL;
    uint64_t v41 = v16 & 0xFFFFFFE0;
    a10 = 0uLL;
    int32x4_t v42 = 0uLL;
    int32x4_t v43 = 0uLL;
    int32x4_t v44 = 0uLL;
    int32x4_t v45 = 0uLL;
    int32x4_t v46 = 0uLL;
    do
    {
      int8x16_t v47 = v38[-1];
      a10 = vmaxq_s32(a10, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1004048B0));
      int32x4_t v40 = vmaxq_s32(v40, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1004048A0));
      int32x4_t v39 = vmaxq_s32(v39, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_100404890));
      int32x4_t v42 = vmaxq_s32(v42, (int32x4_t)vqtbl1q_s8(v47, (int8x16_t)xmmword_1004048C0));
      int32x4_t v45 = vmaxq_s32(v45, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_1004048B0));
      int32x4_t v44 = vmaxq_s32(v44, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_1004048A0));
      int32x4_t v43 = vmaxq_s32(v43, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_100404890));
      int32x4_t v46 = vmaxq_s32(v46, (int32x4_t)vqtbl1q_s8(*v38, (int8x16_t)xmmword_1004048C0));
      v38 += 2;
      v41 -= 32;
    }
    while (v41);
    signed int v18 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(vmaxq_s32(v39, v43), vmaxq_s32(a10, v45)), vmaxq_s32(vmaxq_s32(v40, v44), vmaxq_s32(v42, v46))));
    if (v17 == v16) {
      goto LABEL_61;
    }
    if ((((_BYTE)a5 * (_BYTE)a4) & 0x18) == 0) {
      goto LABEL_57;
    }
  }
  else
  {
    signed int v18 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v48 = v17;
  uint64_t v17 = v16 & 0xFFFFFFF8;
  int32x4_t v49 = vdupq_n_s32(v18);
  float32x4_t v50 = (unint64_t *)((char *)a1->u64 + v48);
  uint64_t v51 = v48 - v17;
  int32x4_t v52 = v49;
  do
  {
    unint64_t v53 = *v50++;
    a10.i64[0] = v53;
    int32x4_t v54 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_100404890);
    a10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_1004048A0);
    int32x4_t v52 = vmaxq_s32(v52, a10);
    int32x4_t v49 = vmaxq_s32(v49, v54);
    v51 += 8;
  }
  while (v51);
  signed int v18 = vmaxvq_s32(vmaxq_s32(v49, v52));
  if (v17 != v16)
  {
LABEL_57:
    uint64_t v55 = v16 - v17;
    double v56 = &a1->u8[v17];
    do
    {
      signed int v58 = *v56++;
      signed int v57 = v58;
      if (v18 <= v58) {
        signed int v18 = v57;
      }
      --v55;
    }
    while (v55);
  }
LABEL_61:
  if (v12 <= v18) {
    signed int v12 = v18;
  }
LABEL_63:
  *a3 = v12;
  return 0;
}

uint64_t sub_1002CE1E0(int8x16_t *a1, unsigned __int8 *a2, signed int *a3, int a4, int a5, double a6, double a7, double a8, double a9, int32x4_t a10, double a11, int32x4_t a12)
{
  signed int v12 = *a3;
  if (a2)
  {
    if (a4 < 1 || a5 < 1) {
      goto LABEL_81;
    }
    uint64_t v13 = a4;
    if (a5 < 8)
    {
      double v14 = &a1->i8[3];
      do
      {
        if (*a2++)
        {
          int v16 = *(v14 - 3);
          if (v16 < 0) {
            int v16 = -v16;
          }
          if (v12 <= v16) {
            signed int v12 = v16;
          }
          if (a5 != 1)
          {
            int v17 = *(v14 - 2);
            if (v17 < 0) {
              int v17 = -v17;
            }
            if (v12 <= v17) {
              signed int v12 = v17;
            }
            if (a5 != 2)
            {
              int v18 = *(v14 - 1);
              if (v18 < 0) {
                int v18 = -v18;
              }
              if (v12 <= v18) {
                signed int v12 = v18;
              }
              if (a5 != 3)
              {
                int v19 = *v14;
                if (v19 < 0) {
                  int v19 = -v19;
                }
                if (v12 <= v19) {
                  signed int v12 = v19;
                }
                if (a5 != 4)
                {
                  int v20 = v14[1];
                  if (v20 < 0) {
                    int v20 = -v20;
                  }
                  if (v12 <= v20) {
                    signed int v12 = v20;
                  }
                  if (a5 != 5)
                  {
                    int v21 = v14[2];
                    if (v21 < 0) {
                      int v21 = -v21;
                    }
                    if (v12 <= v21) {
                      signed int v12 = v21;
                    }
                    if (a5 != 6)
                    {
                      int v22 = v14[3];
                      if (v22 < 0) {
                        int v22 = -v22;
                      }
                      if (v12 <= v22) {
                        signed int v12 = v22;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v14 += a5;
        --v13;
      }
      while (v13);
      goto LABEL_81;
    }
    uint64_t v26 = 0;
    uint64_t v27 = a5 & 0xFFFFFFE0;
    uint64_t v28 = a5 & 0xFFFFFFF8;
    while (1)
    {
      if (a2[v26])
      {
        if (a5 >= 0x20)
        {
          unint64_t v30 = 0;
          int32x4_t v31 = vdupq_n_s32(v12);
          int32x4_t v32 = v31;
          int32x4_t v33 = v31;
          int32x4_t v34 = v31;
          int32x4_t v35 = v31;
          int32x4_t v36 = v31;
          int32x4_t v37 = v31;
          int32x4_t v38 = v31;
          do
          {
            int8x16_t v39 = vabsq_s8(a1[v30 / 0x10]);
            int8x16_t v40 = vabsq_s8(a1[v30 / 0x10 + 1]);
            int32x4_t v34 = vmaxq_s32(v34, (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1004048C0));
            int32x4_t v33 = vmaxq_s32(v33, (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1004048B0));
            int32x4_t v32 = vmaxq_s32(v32, (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_1004048A0));
            int32x4_t v31 = vmaxq_s32(v31, (int32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_100404890));
            int32x4_t v38 = vmaxq_s32(v38, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1004048C0));
            int32x4_t v37 = vmaxq_s32(v37, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1004048B0));
            int32x4_t v36 = vmaxq_s32(v36, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1004048A0));
            int32x4_t v35 = vmaxq_s32(v35, (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_100404890));
            v30 += 32;
          }
          while (v27 != v30);
          a12 = vmaxq_s32(v32, v36);
          signed int v12 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(vmaxq_s32(v31, v35), vmaxq_s32(v33, v37)), vmaxq_s32(a12, vmaxq_s32(v34, v38))));
          if (v27 == a5) {
            goto LABEL_47;
          }
          uint64_t v29 = a5 & 0xFFFFFFE0;
          uint64_t v41 = v29;
          if ((a5 & 0x18) == 0) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v29 = 0;
        }
        int32x4_t v42 = vdupq_n_s32(v12);
        int32x4_t v43 = v42;
        do
        {
          *(int8x8_t *)a12.i8 = vabs_s8(*(int8x8_t *)&a1->i8[v29]);
          int32x4_t v44 = (int32x4_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_100404890);
          a12 = (int32x4_t)vqtbl1q_s8((int8x16_t)a12, (int8x16_t)xmmword_1004048A0);
          int32x4_t v43 = vmaxq_s32(v43, a12);
          int32x4_t v42 = vmaxq_s32(v42, v44);
          v29 += 8;
        }
        while (v28 != v29);
        signed int v12 = vmaxvq_s32(vmaxq_s32(v42, v43));
        uint64_t v41 = a5 & 0xFFFFFFF8;
        if (v28 != a5)
        {
          do
          {
LABEL_58:
            int v45 = a1->i8[v41];
            if (v45 < 0) {
              int v45 = -v45;
            }
            if (v12 <= v45) {
              signed int v12 = v45;
            }
            ++v41;
          }
          while (a5 != v41);
        }
      }
LABEL_47:
      ++v26;
      a1 = (int8x16_t *)((char *)a1 + a5);
      if (v26 == a4) {
        goto LABEL_81;
      }
    }
  }
  uint64_t v23 = (a5 * a4);
  if ((int)v23 < 1)
  {
    signed int v25 = 0;
    goto LABEL_79;
  }
  if (v23 < 8)
  {
    uint64_t v24 = 0;
    signed int v25 = 0;
    goto LABEL_73;
  }
  if (v23 >= 0x20)
  {
    uint64_t v24 = v23 & 0x7FFFFFE0;
    int32x4_t v46 = a1 + 1;
    int32x4_t v47 = 0uLL;
    int32x4_t v48 = 0uLL;
    uint64_t v49 = v23 & 0xFFFFFFE0;
    a10 = 0uLL;
    int32x4_t v50 = 0uLL;
    int32x4_t v51 = 0uLL;
    int32x4_t v52 = 0uLL;
    int32x4_t v53 = 0uLL;
    int32x4_t v54 = 0uLL;
    do
    {
      int8x16_t v55 = vabsq_s8(v46[-1]);
      int8x16_t v56 = vabsq_s8(*v46);
      int32x4_t v50 = vmaxq_s32(v50, (int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1004048C0));
      a10 = vmaxq_s32(a10, (int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1004048B0));
      int32x4_t v48 = vmaxq_s32(v48, (int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1004048A0));
      int32x4_t v47 = vmaxq_s32(v47, (int32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_100404890));
      int32x4_t v54 = vmaxq_s32(v54, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_1004048C0));
      int32x4_t v53 = vmaxq_s32(v53, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_1004048B0));
      int32x4_t v52 = vmaxq_s32(v52, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_1004048A0));
      int32x4_t v51 = vmaxq_s32(v51, (int32x4_t)vqtbl1q_s8(v56, (int8x16_t)xmmword_100404890));
      v46 += 2;
      v49 -= 32;
    }
    while (v49);
    signed int v25 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(vmaxq_s32(v47, v51), vmaxq_s32(a10, v53)), vmaxq_s32(vmaxq_s32(v48, v52), vmaxq_s32(v50, v54))));
    if (v24 == v23) {
      goto LABEL_79;
    }
    if ((((_BYTE)a5 * (_BYTE)a4) & 0x18) == 0) {
      goto LABEL_73;
    }
  }
  else
  {
    signed int v25 = 0;
    uint64_t v24 = 0;
  }
  uint64_t v57 = v24;
  uint64_t v24 = v23 & 0xFFFFFFF8;
  int32x4_t v58 = vdupq_n_s32(v25);
  float32x4x4_t v59 = (int8x8_t *)&a1->i8[v57];
  uint64_t v60 = v57 - v24;
  int32x4_t v61 = v58;
  do
  {
    int8x8_t v62 = *v59++;
    *(int8x8_t *)a10.i8 = vabs_s8(v62);
    int32x4_t v63 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_100404890);
    a10 = (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_1004048A0);
    int32x4_t v61 = vmaxq_s32(v61, a10);
    int32x4_t v58 = vmaxq_s32(v58, v63);
    v60 += 8;
  }
  while (v60);
  signed int v25 = vmaxvq_s32(vmaxq_s32(v58, v61));
  if (v24 != v23)
  {
LABEL_73:
    uint64_t v64 = v23 - v24;
    uint64_t v65 = &a1->i8[v24];
    do
    {
      int v67 = *v65++;
      int v66 = v67;
      if (v67 < 0) {
        int v66 = -v66;
      }
      if (v25 <= v66) {
        signed int v25 = v66;
      }
      --v64;
    }
    while (v64);
  }
LABEL_79:
  if (v12 <= v25) {
    signed int v12 = v25;
  }
LABEL_81:
  *a3 = v12;
  return 0;
}

uint64_t sub_1002CE60C(uint16x8_t *a1, uint64_t a2, signed int *a3, int a4, int a5)
{
  signed int v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      if (a5 >= 0x10)
      {
        for (uint64_t i = 0; i != a4; ++i)
        {
          if (*(unsigned char *)(a2 + i))
          {
            unint64_t v12 = 0;
            int32x4_t v13 = vdupq_n_s32(v5);
            int32x4_t v14 = v13;
            int32x4_t v15 = v13;
            int32x4_t v16 = v13;
            do
            {
              uint16x8_t v17 = a1[v12 / 0x10];
              uint16x8_t v18 = a1[v12 / 0x10 + 1];
              int32x4_t v14 = vmaxq_s32(v14, (int32x4_t)vmovl_high_u16(v17));
              int32x4_t v13 = vmaxq_s32(v13, (int32x4_t)vmovl_u16(*(uint16x4_t *)v17.i8));
              int32x4_t v16 = vmaxq_s32(v16, (int32x4_t)vmovl_high_u16(v18));
              int32x4_t v15 = vmaxq_s32(v15, (int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8));
              v12 += 32;
            }
            while (((2 * a5) & 0x1FFFFFFE0) != v12);
            signed int v5 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v13, v15), vmaxq_s32(v14, v16)));
            if ((a5 & 0xFFFFFFF0) != (unint64_t)a5)
            {
              uint64_t v19 = a5 & 0x7FFFFFF0;
              do
              {
                if (v5 <= a1->u16[v19]) {
                  signed int v5 = a1->u16[v19];
                }
                ++v19;
              }
              while (a5 != v19);
            }
          }
          a1 = (uint16x8_t *)((char *)a1 + 2 * a5);
        }
      }
      else
      {
        for (uint64_t j = 0; j != a4; ++j)
        {
          if (*(unsigned char *)(a2 + j))
          {
            for (uint64_t k = 0; k != a5; ++k)
            {
              if (v5 <= a1->u16[k]) {
                signed int v5 = a1->u16[k];
              }
            }
          }
          a1 = (uint16x8_t *)((char *)a1 + 2 * a5);
        }
      }
    }
    goto LABEL_37;
  }
  uint64_t v8 = (a5 * a4);
  if ((int)v8 < 1)
  {
    int v10 = 0;
  }
  else
  {
    if (v8 < 0x10)
    {
      uint64_t v9 = 0;
      int v10 = 0;
      goto LABEL_31;
    }
    uint64_t v9 = v8 & 0x7FFFFFF0;
    int v20 = a1 + 1;
    int32x4_t v21 = 0uLL;
    uint64_t v22 = v8 & 0xFFFFFFF0;
    int32x4_t v23 = 0uLL;
    int32x4_t v24 = 0uLL;
    int32x4_t v25 = 0uLL;
    do
    {
      uint16x8_t v26 = v20[-1];
      int32x4_t v23 = vmaxq_s32(v23, (int32x4_t)vmovl_high_u16(v26));
      int32x4_t v21 = vmaxq_s32(v21, (int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8));
      int32x4_t v25 = vmaxq_s32(v25, (int32x4_t)vmovl_high_u16(*v20));
      int32x4_t v24 = vmaxq_s32(v24, (int32x4_t)vmovl_u16(*(uint16x4_t *)v20->i8));
      v20 += 2;
      v22 -= 16;
    }
    while (v22);
    int v10 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v21, v24), vmaxq_s32(v23, v25)));
    if (v9 != v8)
    {
LABEL_31:
      uint64_t v27 = v8 - v9;
      uint64_t v28 = (unsigned __int16 *)a1 + v9;
      do
      {
        int v30 = *v28++;
        int v29 = v30;
        if (v10 <= v30) {
          int v10 = v29;
        }
        --v27;
      }
      while (v27);
    }
  }
  if (v5 <= v10) {
    signed int v5 = v10;
  }
LABEL_37:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CE7F4(int16x8_t *a1, uint64_t a2, signed int *a3, int a4, int a5)
{
  signed int v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      if (a5 >= 0x10)
      {
        for (uint64_t i = 0; i != a4; ++i)
        {
          if (*(unsigned char *)(a2 + i))
          {
            unint64_t v13 = 0;
            int32x4_t v14 = vdupq_n_s32(v5);
            int32x4_t v15 = v14;
            int32x4_t v16 = v14;
            int32x4_t v17 = v14;
            do
            {
              uint16x8_t v18 = (uint16x8_t)vabsq_s16(a1[v13 / 0x10]);
              uint16x8_t v19 = (uint16x8_t)vabsq_s16(a1[v13 / 0x10 + 1]);
              int32x4_t v15 = vmaxq_s32(v15, (int32x4_t)vmovl_high_u16(v18));
              int32x4_t v14 = vmaxq_s32(v14, (int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8));
              int32x4_t v17 = vmaxq_s32(v17, (int32x4_t)vmovl_high_u16(v19));
              int32x4_t v16 = vmaxq_s32(v16, (int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8));
              v13 += 32;
            }
            while (((2 * a5) & 0x1FFFFFFE0) != v13);
            signed int v5 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v14, v16), vmaxq_s32(v15, v17)));
            if ((a5 & 0xFFFFFFF0) != (unint64_t)a5)
            {
              uint64_t v20 = a5 & 0x7FFFFFF0;
              do
              {
                int v21 = a1->i16[v20];
                if (v21 < 0) {
                  int v21 = -v21;
                }
                if (v5 <= v21) {
                  signed int v5 = v21;
                }
                ++v20;
              }
              while (a5 != v20);
            }
          }
          a1 = (int16x8_t *)((char *)a1 + 2 * a5);
        }
      }
      else
      {
        for (uint64_t j = 0; j != a4; ++j)
        {
          if (*(unsigned char *)(a2 + j))
          {
            for (uint64_t k = 0; k != a5; ++k)
            {
              int v8 = a1->i16[k];
              if (v8 < 0) {
                int v8 = -v8;
              }
              if (v5 <= v8) {
                signed int v5 = v8;
              }
            }
          }
          a1 = (int16x8_t *)((char *)a1 + 2 * a5);
        }
      }
    }
    goto LABEL_43;
  }
  uint64_t v9 = (a5 * a4);
  if ((int)v9 < 1)
  {
    int v11 = 0;
  }
  else
  {
    if (v9 < 0x10)
    {
      uint64_t v10 = 0;
      int v11 = 0;
      goto LABEL_35;
    }
    uint64_t v10 = v9 & 0x7FFFFFF0;
    uint64_t v22 = a1 + 1;
    int32x4_t v23 = 0uLL;
    uint64_t v24 = v9 & 0xFFFFFFF0;
    int32x4_t v25 = 0uLL;
    int32x4_t v26 = 0uLL;
    int32x4_t v27 = 0uLL;
    do
    {
      uint16x8_t v28 = (uint16x8_t)vabsq_s16(v22[-1]);
      uint16x8_t v29 = (uint16x8_t)vabsq_s16(*v22);
      int32x4_t v25 = vmaxq_s32(v25, (int32x4_t)vmovl_high_u16(v28));
      int32x4_t v23 = vmaxq_s32(v23, (int32x4_t)vmovl_u16(*(uint16x4_t *)v28.i8));
      int32x4_t v27 = vmaxq_s32(v27, (int32x4_t)vmovl_high_u16(v29));
      int32x4_t v26 = vmaxq_s32(v26, (int32x4_t)vmovl_u16(*(uint16x4_t *)v29.i8));
      v22 += 2;
      v24 -= 16;
    }
    while (v24);
    int v11 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(v23, v26), vmaxq_s32(v25, v27)));
    if (v10 != v9)
    {
LABEL_35:
      uint64_t v30 = v9 - v10;
      int32x4_t v31 = &a1->i16[v10];
      do
      {
        int v33 = *v31++;
        int v32 = v33;
        if (v33 < 0) {
          int v32 = -v32;
        }
        if (v11 <= v32) {
          int v11 = v32;
        }
        --v30;
      }
      while (v30);
    }
  }
  if (v5 <= v11) {
    signed int v5 = v11;
  }
LABEL_43:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CEA04(int32x4_t *a1, unsigned __int8 *a2, signed int *a3, int a4, int a5)
{
  signed int v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      uint64_t v6 = a4;
      if (a5 >= 8)
      {
        for (uint64_t i = 0; i != a4; ++i)
        {
          if (a2[i])
          {
            unint64_t v20 = 0;
            int32x4_t v21 = vdupq_n_s32(v5);
            int32x4_t v22 = v21;
            do
            {
              int32x4_t v21 = vmaxq_s32(v21, vabsq_s32(a1[v20 / 0x10]));
              int32x4_t v22 = vmaxq_s32(v22, vabsq_s32(a1[v20 / 0x10 + 1]));
              v20 += 32;
            }
            while (((4 * a5) & 0x3FFFFFFE0) != v20);
            signed int v5 = vmaxvq_s32(vmaxq_s32(v21, v22));
            if ((a5 & 0xFFFFFFF8) != (unint64_t)a5)
            {
              uint64_t v23 = a5 & 0xFFFFFFF8;
              do
              {
                int v24 = a1->i32[v23];
                if (v24 < 0) {
                  int v24 = -v24;
                }
                if (v5 <= v24) {
                  signed int v5 = v24;
                }
                ++v23;
              }
              while (a5 != v23);
            }
          }
          a1 = (int32x4_t *)((char *)a1 + 4 * a5);
        }
      }
      else
      {
        int v7 = &a1->i32[3];
        do
        {
          if (*a2++)
          {
            int v9 = *(v7 - 3);
            if (v9 < 0) {
              int v9 = -v9;
            }
            if (v5 <= v9) {
              signed int v5 = v9;
            }
            if (a5 != 1)
            {
              int v10 = *(v7 - 2);
              if (v10 < 0) {
                int v10 = -v10;
              }
              if (v5 <= v10) {
                signed int v5 = v10;
              }
              if (a5 != 2)
              {
                int v11 = *(v7 - 1);
                if (v11 < 0) {
                  int v11 = -v11;
                }
                if (v5 <= v11) {
                  signed int v5 = v11;
                }
                if (a5 != 3)
                {
                  int v12 = *v7;
                  if (*v7 < 0) {
                    int v12 = -v12;
                  }
                  if (v5 <= v12) {
                    signed int v5 = v12;
                  }
                  if (a5 != 4)
                  {
                    int v13 = v7[1];
                    if (v13 < 0) {
                      int v13 = -v13;
                    }
                    if (v5 <= v13) {
                      signed int v5 = v13;
                    }
                    if (a5 != 5)
                    {
                      int v14 = v7[2];
                      if (v14 < 0) {
                        int v14 = -v14;
                      }
                      if (v5 <= v14) {
                        signed int v5 = v14;
                      }
                      if (a5 != 6)
                      {
                        int v15 = v7[3];
                        if (v15 < 0) {
                          int v15 = -v15;
                        }
                        if (v5 <= v15) {
                          signed int v5 = v15;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v7 += a5;
          --v6;
        }
        while (v6);
      }
    }
    goto LABEL_70;
  }
  uint64_t v16 = (a5 * a4);
  if ((int)v16 < 1)
  {
    int v18 = 0;
  }
  else
  {
    if (v16 < 8)
    {
      uint64_t v17 = 0;
      int v18 = 0;
      goto LABEL_62;
    }
    uint64_t v17 = v16 & 0x7FFFFFF8;
    int32x4_t v25 = a1 + 1;
    int32x4_t v26 = 0uLL;
    uint64_t v27 = v16 & 0xFFFFFFF8;
    int32x4_t v28 = 0uLL;
    do
    {
      int32x4_t v26 = vmaxq_s32(v26, vabsq_s32(v25[-1]));
      int32x4_t v28 = vmaxq_s32(v28, vabsq_s32(*v25));
      v25 += 2;
      v27 -= 8;
    }
    while (v27);
    int v18 = vmaxvq_s32(vmaxq_s32(v26, v28));
    if (v17 != v16)
    {
LABEL_62:
      uint64_t v29 = v16 - v17;
      uint64_t v30 = &a1->i32[v17];
      do
      {
        int v32 = *v30++;
        int v31 = v32;
        if (v32 < 0) {
          int v31 = -v31;
        }
        if (v18 <= v31) {
          int v18 = v31;
        }
        --v29;
      }
      while (v29);
    }
  }
  if (v5 <= v18) {
    signed int v5 = v18;
  }
LABEL_70:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CEC54(double *a1, uint64_t a2, double *a3, int a4, int a5)
{
  double v5 = *a3;
  if (a2)
  {
    if (a4 >= 1 && a5 >= 1)
    {
      for (uint64_t i = 0; i != a4; ++i)
      {
        if (*(unsigned char *)(a2 + i))
        {
          for (uint64_t j = 0; j != a5; ++j)
          {
            double v8 = fabs(a1[j]);
            if (v5 < v8) {
              double v5 = v8;
            }
          }
        }
        a1 += a5;
      }
    }
  }
  else
  {
    uint64_t v9 = (a5 * a4);
    double v10 = 0.0;
    if ((int)v9 >= 1)
    {
      do
      {
        double v11 = *a1++;
        double v12 = fabs(v11);
        if (v10 < v12) {
          double v10 = v12;
        }
        --v9;
      }
      while (v9);
    }
    if (v5 < v10) {
      double v5 = v10;
    }
  }
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CECFC(uint64_t a1, unsigned __int8 *a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5 = *a3;
  if (!a2)
  {
    int v9 = a5 * a4;
    unint64_t v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      if (v9 <= 0) {
        goto LABEL_62;
      }
      goto LABEL_47;
    }
    if (v10 < 0x1C)
    {
      unint64_t v13 = 0;
      unsigned int v11 = 0;
      goto LABEL_45;
    }
    uint64_t v37 = (v10 >> 2) + 1;
    if (v10 >= 0x3C)
    {
      uint64_t v38 = v37 & 0x7FFFFFF0;
      int32x4_t v46 = 0uLL;
      uint64_t v47 = v38;
      int32x4_t v48 = (const char *)a1;
      int32x4_t v49 = 0uLL;
      int32x4_t v50 = 0uLL;
      int32x4_t v51 = 0uLL;
      do
      {
        int8x16x4_t v89 = vld4q_s8(v48);
        v48 += 64;
        uint16x8_t v52 = vmovl_high_u8((uint8x16_t)v89.val[0]);
        uint16x8_t v53 = vmovl_u8(*(uint8x8_t *)v89.val[0].i8);
        uint16x8_t v54 = vmovl_u8(*(uint8x8_t *)v89.val[1].i8);
        uint16x8_t v55 = vmovl_high_u8((uint8x16_t)v89.val[1]);
        uint16x8_t v56 = vmovl_high_u8((uint8x16_t)v89.val[2]);
        uint16x8_t v57 = vmovl_u8(*(uint8x8_t *)v89.val[2].i8);
        uint16x8_t v58 = vmovl_u8(*(uint8x8_t *)v89.val[3].i8);
        v89.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v89.val[3]);
        int32x4_t v51 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v51, v52), v55), v56), (uint16x8_t)v89.val[0]);
        int32x4_t v50 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v50, *(uint16x4_t *)v52.i8), *(uint16x4_t *)v55.i8), *(uint16x4_t *)v56.i8), *(uint16x4_t *)v89.val[0].i8);
        int32x4_t v49 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v49, v53), v54), v57), v58);
        int32x4_t v46 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v46, *(uint16x4_t *)v53.i8), *(uint16x4_t *)v54.i8), *(uint16x4_t *)v57.i8), *(uint16x4_t *)v58.i8);
        v47 -= 16;
      }
      while (v47);
      unsigned int v11 = vaddvq_s32(vaddq_s32(vaddq_s32(v46, v50), vaddq_s32(v49, v51)));
      if (v37 == v38) {
        goto LABEL_46;
      }
      if ((v37 & 8) == 0)
      {
        unint64_t v13 = 4 * v38;
        do
        {
LABEL_45:
          v11 += *(unsigned __int8 *)(a1 + v13)
               + *(unsigned __int8 *)(a1 + v13 + 1)
               + *(unsigned __int8 *)(a1 + v13 + 2)
               + *(unsigned __int8 *)(a1 + v13 + 3);
          v13 += 4;
        }
        while (v13 <= v10);
        goto LABEL_46;
      }
    }
    else
    {
      unsigned int v11 = 0;
      uint64_t v38 = 0;
    }
    unint64_t v13 = 4 * (v37 & 0x7FFFFFF8);
    int32x4_t v39 = 0uLL;
    int32x4_t v40 = (int32x4_t)v11;
    uint64_t v41 = (const char *)(a1 + 4 * v38);
    uint64_t v42 = v38 - (v37 & 0x7FFFFFF8);
    do
    {
      int8x8x4_t v88 = vld4_s8(v41);
      v41 += 32;
      uint16x8_t v43 = vmovl_u8((uint8x8_t)v88.val[0]);
      uint16x8_t v44 = vmovl_u8((uint8x8_t)v88.val[1]);
      uint16x8_t v45 = vmovl_u8((uint8x8_t)v88.val[2]);
      *(uint16x8_t *)v88.val[0].i8 = vmovl_u8((uint8x8_t)v88.val[3]);
      int32x4_t v39 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v39, v43), v44), v45), *(uint16x8_t *)v88.val[0].i8);
      int32x4_t v40 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v40, *(uint16x4_t *)v43.i8), *(uint16x4_t *)v44.i8), *(uint16x4_t *)v45.i8), (uint16x4_t)v88.val[0]);
      v42 += 8;
    }
    while (v42);
    unsigned int v11 = vaddvq_s32(vaddq_s32(v40, v39));
    if (v37 != (v37 & 0x7FFFFFF8)) {
      goto LABEL_45;
    }
LABEL_46:
    unsigned int v12 = (v10 & 0xFFFFFFFC) + 4;
    if ((int)v12 >= v9)
    {
LABEL_62:
      v5 += v11;
      goto LABEL_63;
    }
LABEL_47:
    uint64_t v59 = v12;
    uint64_t v60 = v9 + ~v12;
    if (v60 < 7)
    {
      uint64_t v61 = v12;
      goto LABEL_60;
    }
    uint64_t v62 = v60 + 1;
    if (v60 >= 0x1F)
    {
      uint64_t v63 = v62 & 0x1FFFFFFE0;
      int32x4_t v64 = 0uLL;
      int32x4_t v65 = (int32x4_t)v11;
      int v66 = (uint8x8_t *)(v59 + a1 + 16);
      uint64_t v67 = v62 & 0x1FFFFFFE0;
      int32x4_t v68 = 0uLL;
      int32x4_t v69 = 0uLL;
      int32x4_t v70 = 0uLL;
      int32x4_t v71 = 0uLL;
      int32x4_t v72 = 0uLL;
      int32x4_t v73 = 0uLL;
      do
      {
        uint8x16_t v74 = *(uint8x16_t *)v66[-2].i8;
        uint16x8_t v75 = vmovl_u8(*(uint8x8_t *)v74.i8);
        uint16x8_t v76 = vmovl_high_u8(v74);
        uint16x8_t v77 = vmovl_u8(*v66);
        uint16x8_t v78 = vmovl_high_u8(*(uint8x16_t *)v66->i8);
        int32x4_t v69 = (int32x4_t)vaddw_high_u16((uint32x4_t)v69, v76);
        int32x4_t v68 = (int32x4_t)vaddw_u16((uint32x4_t)v68, *(uint16x4_t *)v76.i8);
        int32x4_t v64 = (int32x4_t)vaddw_high_u16((uint32x4_t)v64, v75);
        int32x4_t v65 = (int32x4_t)vaddw_u16((uint32x4_t)v65, *(uint16x4_t *)v75.i8);
        int32x4_t v73 = (int32x4_t)vaddw_high_u16((uint32x4_t)v73, v78);
        int32x4_t v72 = (int32x4_t)vaddw_u16((uint32x4_t)v72, *(uint16x4_t *)v78.i8);
        int32x4_t v71 = (int32x4_t)vaddw_high_u16((uint32x4_t)v71, v77);
        int32x4_t v70 = (int32x4_t)vaddw_u16((uint32x4_t)v70, *(uint16x4_t *)v77.i8);
        v66 += 4;
        v67 -= 32;
      }
      while (v67);
      unsigned int v11 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v70, v65), vaddq_s32(v72, v68)), vaddq_s32(vaddq_s32(v71, v64), vaddq_s32(v73, v69))));
      if (v62 == v63) {
        goto LABEL_62;
      }
      if ((v62 & 0x18) == 0)
      {
        uint64_t v61 = v63 + v59;
LABEL_60:
        uint64_t v85 = (unsigned __int8 *)(a1 + v61);
        do
        {
          int v86 = *v85++;
          v11 += v86;
          LODWORD(v61) = v61 + 1;
        }
        while (v9 > (int)v61);
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    uint64_t v61 = (v62 & 0x1FFFFFFF8) + v59;
    int32x4_t v79 = 0uLL;
    int32x4_t v80 = (int32x4_t)v11;
    uint64_t v81 = v63 - (v62 & 0x1FFFFFFF8);
    long long v82 = (uint8x8_t *)(a1 + v63 + v59);
    do
    {
      uint8x8_t v83 = *v82++;
      uint16x8_t v84 = vmovl_u8(v83);
      int32x4_t v79 = (int32x4_t)vaddw_high_u16((uint32x4_t)v79, v84);
      int32x4_t v80 = (int32x4_t)vaddw_u16((uint32x4_t)v80, *(uint16x4_t *)v84.i8);
      v81 += 8;
    }
    while (v81);
    unsigned int v11 = vaddvq_s32(vaddq_s32(v80, v79));
    if (v62 == (v62 & 0x1FFFFFFF8)) {
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  if (a4 < 1 || a5 < 1) {
    goto LABEL_63;
  }
  uint64_t v6 = a4;
  if (a5 >= 8)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a5 & 0xFFFFFFE0;
    uint64_t v16 = a5 & 0xFFFFFFF8;
    while (!a2[v14])
    {
LABEL_21:
      ++v14;
      a1 += a5;
      if (v14 == a4) {
        goto LABEL_63;
      }
    }
    if (a5 >= 0x20)
    {
      uint64_t v18 = 0;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = (int32x4_t)v5;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      do
      {
        uint8x16_t v27 = *(uint8x16_t *)(a1 + v18);
        uint8x16_t v28 = *(uint8x16_t *)(a1 + v18 + 16);
        uint16x8_t v29 = vmovl_u8(*(uint8x8_t *)v27.i8);
        uint16x8_t v30 = vmovl_high_u8(v27);
        uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)v28.i8);
        uint16x8_t v32 = vmovl_high_u8(v28);
        int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v30);
        int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v30.i8);
        int32x4_t v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v29);
        int32x4_t v20 = (int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)v29.i8);
        int32x4_t v26 = (int32x4_t)vaddw_high_u16((uint32x4_t)v26, v32);
        int32x4_t v25 = (int32x4_t)vaddw_u16((uint32x4_t)v25, *(uint16x4_t *)v32.i8);
        int32x4_t v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v31);
        int32x4_t v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v31.i8);
        v18 += 32;
      }
      while (v15 != v18);
      unsigned int v5 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v23, v20), vaddq_s32(v25, v21)), vaddq_s32(vaddq_s32(v24, v19), vaddq_s32(v26, v22))));
      if (v15 == a5) {
        goto LABEL_21;
      }
      uint64_t v17 = a5 & 0xFFFFFFE0;
      uint64_t v33 = v17;
      if ((a5 & 0x18) == 0)
      {
        do
LABEL_32:
          v5 += *(unsigned __int8 *)(a1 + v33++);
        while (a5 != v33);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    int32x4_t v34 = 0uLL;
    int32x4_t v35 = (int32x4_t)v5;
    do
    {
      uint16x8_t v36 = vmovl_u8(*(uint8x8_t *)(a1 + v17));
      int32x4_t v34 = (int32x4_t)vaddw_high_u16((uint32x4_t)v34, v36);
      int32x4_t v35 = (int32x4_t)vaddw_u16((uint32x4_t)v35, *(uint16x4_t *)v36.i8);
      v17 += 8;
    }
    while (v16 != v17);
    unsigned int v5 = vaddvq_s32(vaddq_s32(v35, v34));
    uint64_t v33 = a5 & 0xFFFFFFF8;
    if (v16 == a5) {
      goto LABEL_21;
    }
    goto LABEL_32;
  }
  int v7 = (unsigned __int8 *)(a1 + 3);
  do
  {
    if (*a2++)
    {
      v5 += *(v7 - 3);
      if (a5 != 1)
      {
        v5 += *(v7 - 2);
        if (a5 != 2)
        {
          v5 += *(v7 - 1);
          if (a5 != 3)
          {
            v5 += *v7;
            if (a5 != 4)
            {
              v5 += v7[1];
              if (a5 != 5)
              {
                v5 += v7[2];
                if (a5 != 6) {
                  v5 += v7[3];
                }
              }
            }
          }
        }
      }
    }
    v7 += a5;
    --v6;
  }
  while (v6);
LABEL_63:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CF1E4(const char *a1, uint64_t a2, unsigned int *a3, int a4, int a5, double a6, int32x4_t a7)
{
  unsigned int v7 = *a3;
  if (!a2)
  {
    int v32 = a5 * a4;
    unint64_t v33 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      unsigned int v34 = 0;
      unsigned int v35 = 0;
      if (v32 <= 0) {
        goto LABEL_58;
      }
      goto LABEL_41;
    }
    if (v33 < 0x1C)
    {
      unint64_t v36 = 0;
      unsigned int v34 = 0;
      goto LABEL_38;
    }
    uint64_t v37 = (v33 >> 2) + 1;
    if (v33 >= 0x3C)
    {
      uint64_t v38 = v37 & 0x7FFFFFF0;
      int32x4_t v45 = 0uLL;
      uint64_t v46 = v38;
      uint64_t v47 = a1;
      int32x4_t v48 = 0uLL;
      int32x4_t v49 = 0uLL;
      int32x4_t v50 = 0uLL;
      do
      {
        int8x16x4_t v93 = vld4q_s8(v47);
        v47 += 64;
        uint8x16_t v51 = (uint8x16_t)vabsq_s8(v93.val[0]);
        uint16x8_t v52 = vmovl_high_u8(v51);
        uint16x8_t v53 = vmovl_u8(*(uint8x8_t *)v51.i8);
        uint8x16_t v54 = (uint8x16_t)vabsq_s8(v93.val[1]);
        uint16x8_t v55 = vmovl_u8(*(uint8x8_t *)v54.i8);
        uint16x8_t v56 = vmovl_high_u8(v54);
        uint8x16_t v57 = (uint8x16_t)vabsq_s8(v93.val[2]);
        uint16x8_t v58 = vmovl_high_u8(v57);
        uint16x8_t v59 = vmovl_u8(*(uint8x8_t *)v57.i8);
        v93.val[0] = vabsq_s8(v93.val[3]);
        v93.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v93.val[0].i8);
        v93.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v93.val[0]);
        int32x4_t v50 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v50, v52), v56), v58), (uint16x8_t)v93.val[0]);
        int32x4_t v49 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v49, *(uint16x4_t *)v52.i8), *(uint16x4_t *)v56.i8), *(uint16x4_t *)v58.i8), *(uint16x4_t *)v93.val[0].i8);
        int32x4_t v48 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v48, v53), v55), v59), (uint16x8_t)v93.val[1]);
        int32x4_t v45 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v45, *(uint16x4_t *)v53.i8), *(uint16x4_t *)v55.i8), *(uint16x4_t *)v59.i8), *(uint16x4_t *)v93.val[1].i8);
        v46 -= 16;
      }
      while (v46);
      a7 = vaddq_s32(v48, v50);
      unsigned int v34 = vaddvq_s32(vaddq_s32(vaddq_s32(v45, v49), a7));
      if (v37 == v38) {
        goto LABEL_40;
      }
      if ((v37 & 8) == 0)
      {
        unint64_t v36 = 4 * v38;
LABEL_38:
        v60.i64[0] = 0xFF000000FFLL;
        v60.i64[1] = 0xFF000000FFLL;
        do
        {
          a7.i8[0] = a1[v36];
          a7.i8[2] = a1[v36 + 1];
          a7.i8[4] = a1[v36 + 2];
          a7.i8[6] = a1[v36 + 3];
          a7 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vabs_s16(vshr_n_s16(vshl_n_s16(*(int16x4_t *)a7.i8, 8uLL), 8uLL))), v60);
          a7.i32[0] = vaddvq_s32(a7);
          v34 += a7.i32[0];
          v36 += 4;
        }
        while (v36 <= v33);
        goto LABEL_40;
      }
    }
    else
    {
      unsigned int v34 = 0;
      uint64_t v38 = 0;
    }
    unint64_t v36 = 4 * (v37 & 0x7FFFFFF8);
    int32x4_t v39 = 0uLL;
    a7 = (int32x4_t)v34;
    int32x4_t v40 = &a1[4 * v38];
    uint64_t v41 = v38 - (v37 & 0x7FFFFFF8);
    do
    {
      int8x8x4_t v92 = vld4_s8(v40);
      v40 += 32;
      uint16x8_t v42 = vmovl_u8((uint8x8_t)vabs_s8(v92.val[0]));
      uint16x8_t v43 = vmovl_u8((uint8x8_t)vabs_s8(v92.val[1]));
      uint16x8_t v44 = vmovl_u8((uint8x8_t)vabs_s8(v92.val[2]));
      *(uint16x8_t *)v92.val[0].i8 = vmovl_u8((uint8x8_t)vabs_s8(v92.val[3]));
      int32x4_t v39 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v39, v42), v43), v44), *(uint16x8_t *)v92.val[0].i8);
      a7 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)a7, *(uint16x4_t *)v42.i8), *(uint16x4_t *)v43.i8), *(uint16x4_t *)v44.i8), (uint16x4_t)v92.val[0]);
      v41 += 8;
    }
    while (v41);
    unsigned int v34 = vaddvq_s32(vaddq_s32(a7, v39));
    if (v37 != (v37 & 0x7FFFFFF8)) {
      goto LABEL_38;
    }
LABEL_40:
    unsigned int v35 = (v33 & 0xFFFFFFFC) + 4;
    if ((int)v35 >= v32)
    {
LABEL_58:
      v7 += v34;
      goto LABEL_59;
    }
LABEL_41:
    uint64_t v61 = v35;
    uint64_t v62 = v32 + ~v35;
    if (v62 < 7)
    {
      uint64_t v63 = v35;
      goto LABEL_54;
    }
    uint64_t v64 = v62 + 1;
    if (v62 >= 0x1F)
    {
      uint64_t v65 = v64 & 0x1FFFFFFE0;
      int32x4_t v66 = 0uLL;
      int32x4_t v67 = (int32x4_t)v34;
      int32x4_t v68 = (int8x16_t *)&a1[v61 + 16];
      uint64_t v69 = v64 & 0x1FFFFFFE0;
      int32x4_t v70 = 0uLL;
      int32x4_t v71 = 0uLL;
      int32x4_t v72 = 0uLL;
      int32x4_t v73 = 0uLL;
      int32x4_t v74 = 0uLL;
      int32x4_t v75 = 0uLL;
      do
      {
        uint8x16_t v76 = (uint8x16_t)vabsq_s8(v68[-1]);
        uint8x16_t v77 = (uint8x16_t)vabsq_s8(*v68);
        uint16x8_t v78 = vmovl_u8(*(uint8x8_t *)v76.i8);
        uint16x8_t v79 = vmovl_high_u8(v76);
        uint16x8_t v80 = vmovl_u8(*(uint8x8_t *)v77.i8);
        uint16x8_t v81 = vmovl_high_u8(v77);
        int32x4_t v71 = (int32x4_t)vaddw_high_u16((uint32x4_t)v71, v79);
        int32x4_t v70 = (int32x4_t)vaddw_u16((uint32x4_t)v70, *(uint16x4_t *)v79.i8);
        int32x4_t v66 = (int32x4_t)vaddw_high_u16((uint32x4_t)v66, v78);
        int32x4_t v67 = (int32x4_t)vaddw_u16((uint32x4_t)v67, *(uint16x4_t *)v78.i8);
        int32x4_t v75 = (int32x4_t)vaddw_high_u16((uint32x4_t)v75, v81);
        int32x4_t v74 = (int32x4_t)vaddw_u16((uint32x4_t)v74, *(uint16x4_t *)v81.i8);
        int32x4_t v73 = (int32x4_t)vaddw_high_u16((uint32x4_t)v73, v80);
        int32x4_t v72 = (int32x4_t)vaddw_u16((uint32x4_t)v72, *(uint16x4_t *)v80.i8);
        v68 += 2;
        v69 -= 32;
      }
      while (v69);
      unsigned int v34 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v72, v67), vaddq_s32(v74, v70)), vaddq_s32(vaddq_s32(v73, v66), vaddq_s32(v75, v71))));
      if (v64 == v65) {
        goto LABEL_58;
      }
      if ((v64 & 0x18) == 0)
      {
        uint64_t v63 = v65 + v61;
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v65 = 0;
    }
    uint64_t v63 = (v64 & 0x1FFFFFFF8) + v61;
    int32x4_t v82 = 0uLL;
    int32x4_t v83 = (int32x4_t)v34;
    uint64_t v84 = v65 - (v64 & 0x1FFFFFFF8);
    uint64_t v85 = (int8x8_t *)&a1[v65 + v61];
    do
    {
      int8x8_t v86 = *v85++;
      uint16x8_t v87 = vmovl_u8((uint8x8_t)vabs_s8(v86));
      int32x4_t v82 = (int32x4_t)vaddw_high_u16((uint32x4_t)v82, v87);
      int32x4_t v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v87.i8);
      v84 += 8;
    }
    while (v84);
    unsigned int v34 = vaddvq_s32(vaddq_s32(v83, v82));
    if (v64 == (v64 & 0x1FFFFFFF8)) {
      goto LABEL_58;
    }
LABEL_54:
    int8x8x4_t v88 = &a1[v63];
    do
    {
      int v90 = *v88++;
      int v89 = v90;
      if (v90 < 0) {
        int v89 = -v89;
      }
      v34 += v89;
      LODWORD(v63) = v63 + 1;
    }
    while (v32 > (int)v63);
    goto LABEL_58;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a5 & 0xFFFFFFE0;
    uint64_t v10 = a5 & 0xFFFFFFF8;
    do
    {
      if (*(unsigned char *)(a2 + v8))
      {
        if (a5 < 8)
        {
          for (uint64_t i = 0; i != a5; ++i)
          {
LABEL_18:
            int v31 = a1[i];
            if (v31 < 0) {
              int v31 = -v31;
            }
            v7 += v31;
          }
          goto LABEL_5;
        }
        if (a5 >= 0x20)
        {
          uint64_t v13 = 0;
          int32x4_t v14 = 0uLL;
          int32x4_t v15 = (int32x4_t)v7;
          int32x4_t v16 = 0uLL;
          int32x4_t v17 = 0uLL;
          int32x4_t v18 = 0uLL;
          int32x4_t v19 = 0uLL;
          int32x4_t v20 = 0uLL;
          int32x4_t v21 = 0uLL;
          do
          {
            uint8x16_t v22 = (uint8x16_t)vabsq_s8(*(int8x16_t *)&a1[v13]);
            uint8x16_t v23 = (uint8x16_t)vabsq_s8(*(int8x16_t *)&a1[v13 + 16]);
            uint16x8_t v24 = vmovl_u8(*(uint8x8_t *)v22.i8);
            uint16x8_t v25 = vmovl_high_u8(v22);
            uint16x8_t v26 = vmovl_u8(*(uint8x8_t *)v23.i8);
            uint16x8_t v27 = vmovl_high_u8(v23);
            int32x4_t v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)v17, v25);
            int32x4_t v16 = (int32x4_t)vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v25.i8);
            int32x4_t v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v24);
            int32x4_t v15 = (int32x4_t)vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v24.i8);
            int32x4_t v21 = (int32x4_t)vaddw_high_u16((uint32x4_t)v21, v27);
            int32x4_t v20 = (int32x4_t)vaddw_u16((uint32x4_t)v20, *(uint16x4_t *)v27.i8);
            int32x4_t v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v26);
            int32x4_t v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v26.i8);
            v13 += 32;
          }
          while (v9 != v13);
          unsigned int v7 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v18, v15), vaddq_s32(v20, v16)), vaddq_s32(vaddq_s32(v19, v14), vaddq_s32(v21, v17))));
          if (v9 == a5) {
            goto LABEL_5;
          }
          uint64_t v12 = a5 & 0xFFFFFFE0;
          uint64_t i = v12;
          if ((a5 & 0x18) == 0) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        int32x4_t v28 = 0uLL;
        int32x4_t v29 = (int32x4_t)v7;
        do
        {
          uint16x8_t v30 = vmovl_u8((uint8x8_t)vabs_s8(*(int8x8_t *)&a1[v12]));
          int32x4_t v28 = (int32x4_t)vaddw_high_u16((uint32x4_t)v28, v30);
          int32x4_t v29 = (int32x4_t)vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v30.i8);
          v12 += 8;
        }
        while (v10 != v12);
        unsigned int v7 = vaddvq_s32(vaddq_s32(v29, v28));
        uint64_t i = a5 & 0xFFFFFFF8;
        if (v10 != a5) {
          goto LABEL_18;
        }
      }
LABEL_5:
      ++v8;
      a1 += a5;
    }
    while (v8 != a4);
  }
LABEL_59:
  *a3 = v7;
  return 0;
}

uint64_t sub_1002CF6B4(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5 = *a3;
  if (!a2)
  {
    int v8 = a5 * a4;
    unint64_t v9 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      unsigned int v10 = 0;
      int v11 = 0;
      if (v8 <= 0) {
        goto LABEL_38;
      }
LABEL_31:
      uint64_t v31 = v11;
      uint64_t v32 = (v8 + ~v11);
      if (v32 >= 0xF)
      {
        uint64_t v34 = v32 + 1;
        uint64_t v35 = (v32 + 1) & 0x1FFFFFFF0;
        uint64_t v33 = v35 + v31;
        int32x4_t v36 = (int32x4_t)v10;
        int32x4_t v37 = 0uLL;
        uint64_t v38 = (uint16x8_t *)(a1 + 2 * v31 + 16);
        uint64_t v39 = v35;
        int32x4_t v40 = 0uLL;
        int32x4_t v41 = 0uLL;
        do
        {
          uint16x8_t v42 = v38[-1];
          int32x4_t v37 = (int32x4_t)vaddw_high_u16((uint32x4_t)v37, v42);
          int32x4_t v36 = (int32x4_t)vaddw_u16((uint32x4_t)v36, *(uint16x4_t *)v42.i8);
          int32x4_t v41 = (int32x4_t)vaddw_high_u16((uint32x4_t)v41, *v38);
          int32x4_t v40 = (int32x4_t)vaddw_u16((uint32x4_t)v40, *(uint16x4_t *)v38->i8);
          v38 += 2;
          v39 -= 16;
        }
        while (v39);
        unsigned int v10 = vaddvq_s32(vaddq_s32(vaddq_s32(v40, v36), vaddq_s32(v41, v37)));
        if (v34 == v35) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v33 = v31;
      }
      uint16x8_t v43 = (unsigned __int16 *)(a1 + 2 * v33);
      do
      {
        int v44 = *v43++;
        v10 += v44;
        LODWORD(v33) = v33 + 1;
      }
      while (v8 > (int)v33);
LABEL_38:
      v5 += v10;
      goto LABEL_39;
    }
    if (v9 >= 0x3C)
    {
      uint64_t v22 = (v9 >> 2) + 1;
      unint64_t v12 = 4 * (v22 & 0x7FFFFFF0);
      uint8x16_t v23 = (const __int16 *)(a1 + 64);
      int32x4_t v24 = 0uLL;
      uint64_t v25 = v22 & 0x7FFFFFF0;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      int32x4_t v28 = 0uLL;
      do
      {
        int32x4_t v29 = v23 - 32;
        int16x8x4_t v46 = vld4q_s16(v29);
        int16x8x4_t v47 = vld4q_s16(v23);
        int32x4_t v26 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v26, (uint16x8_t)v46.val[0]), (uint16x8_t)v46.val[1]), (uint16x8_t)v46.val[2]), (uint16x8_t)v46.val[3]);
        int32x4_t v24 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v24, *(uint16x4_t *)v46.val[0].i8), *(uint16x4_t *)v46.val[1].i8), *(uint16x4_t *)v46.val[2].i8), *(uint16x4_t *)v46.val[3].i8);
        int32x4_t v28 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v28, (uint16x8_t)v47.val[0]), (uint16x8_t)v47.val[1]), (uint16x8_t)v47.val[2]), (uint16x8_t)v47.val[3]);
        int32x4_t v27 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v27, *(uint16x4_t *)v47.val[0].i8), *(uint16x4_t *)v47.val[1].i8), *(uint16x4_t *)v47.val[2].i8), *(uint16x4_t *)v47.val[3].i8);
        v23 += 64;
        v25 -= 16;
      }
      while (v25);
      unsigned int v10 = vaddvq_s32(vaddq_s32(vaddq_s32(v27, v24), vaddq_s32(v28, v26)));
      if (v22 == (v22 & 0x7FFFFFF0))
      {
LABEL_30:
        int v11 = (v9 & 0xFFFFFFFC) + 4;
        if (v11 >= v8) {
          goto LABEL_38;
        }
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v12 = 0;
      unsigned int v10 = 0;
    }
    uint16x8_t v30 = (unsigned __int16 *)(a1 + 2 * v12 + 4);
    do
    {
      v10 += *(v30 - 2) + *(v30 - 1) + *v30 + v30[1];
      v12 += 4;
      v30 += 4;
    }
    while (v12 <= v9);
    goto LABEL_30;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    if (a5 >= 0x10)
    {
      for (uint64_t i = 0; i != a4; ++i)
      {
        if (*(unsigned char *)(a2 + i))
        {
          uint64_t v14 = 0;
          int32x4_t v15 = 0uLL;
          int32x4_t v16 = (int32x4_t)v5;
          int32x4_t v17 = 0uLL;
          int32x4_t v18 = 0uLL;
          do
          {
            uint16x8_t v19 = *(uint16x8_t *)(a1 + v14);
            uint16x8_t v20 = *(uint16x8_t *)(a1 + v14 + 16);
            int32x4_t v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v19);
            int32x4_t v16 = (int32x4_t)vaddw_u16((uint32x4_t)v16, *(uint16x4_t *)v19.i8);
            int32x4_t v18 = (int32x4_t)vaddw_high_u16((uint32x4_t)v18, v20);
            int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v20.i8);
            v14 += 32;
          }
          while (((2 * a5) & 0x1FFFFFFE0) != v14);
          unsigned int v5 = vaddvq_s32(vaddq_s32(vaddq_s32(v17, v16), vaddq_s32(v18, v15)));
          if ((a5 & 0xFFFFFFF0) != (unint64_t)a5)
          {
            uint64_t v21 = a5 & 0x7FFFFFF0;
            do
              v5 += *(unsigned __int16 *)(a1 + 2 * v21++);
            while (a5 != v21);
          }
        }
        a1 += 2 * a5;
      }
    }
    else
    {
      for (uint64_t j = 0; j != a4; ++j)
      {
        if (*(unsigned char *)(a2 + j))
        {
          uint64_t v7 = 0;
          do
          {
            v5 += *(unsigned __int16 *)(a1 + v7);
            v7 += 2;
          }
          while (2 * a5 != v7);
        }
        a1 += 2 * a5;
      }
    }
  }
LABEL_39:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CF98C(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5 = *a3;
  if (!a2)
  {
    int v9 = a5 * a4;
    unint64_t v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      unsigned int v11 = 0;
      int v12 = 0;
      if (v9 <= 0) {
        goto LABEL_44;
      }
      goto LABEL_35;
    }
    if (v10 >= 0x3C)
    {
      uint64_t v24 = (v10 >> 2) + 1;
      unint64_t v13 = 4 * (v24 & 0x7FFFFFF0);
      uint64_t v25 = (const __int16 *)(a1 + 64);
      int32x4_t v26 = 0uLL;
      uint64_t v27 = v24 & 0x7FFFFFF0;
      int32x4_t v28 = 0uLL;
      int32x4_t v29 = 0uLL;
      int32x4_t v30 = 0uLL;
      do
      {
        uint64_t v31 = v25 - 32;
        int16x8x4_t v56 = vld4q_s16(v31);
        int16x8x4_t v57 = vld4q_s16(v25);
        uint16x8_t v32 = (uint16x8_t)vabsq_s16(v56.val[0]);
        uint16x8_t v33 = (uint16x8_t)vabsq_s16(v57.val[0]);
        uint16x8_t v34 = (uint16x8_t)vabsq_s16(v56.val[1]);
        uint16x8_t v35 = (uint16x8_t)vabsq_s16(v57.val[1]);
        uint16x8_t v36 = (uint16x8_t)vabsq_s16(v56.val[2]);
        uint16x8_t v37 = (uint16x8_t)vabsq_s16(v57.val[2]);
        v56.val[0] = vabsq_s16(v56.val[3]);
        v56.val[1] = vabsq_s16(v57.val[3]);
        int32x4_t v28 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v28, v32), v34), v36), (uint16x8_t)v56.val[0]);
        int32x4_t v26 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v26, *(uint16x4_t *)v32.i8), *(uint16x4_t *)v34.i8), *(uint16x4_t *)v36.i8), *(uint16x4_t *)v56.val[0].i8);
        int32x4_t v30 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddw_high_u16(vaddw_high_u16((uint32x4_t)v30, v33), v35), v37), (uint16x8_t)v56.val[1]);
        int32x4_t v29 = (int32x4_t)vaddw_u16(vaddw_u16(vaddw_u16(vaddw_u16((uint32x4_t)v29, *(uint16x4_t *)v33.i8), *(uint16x4_t *)v35.i8), *(uint16x4_t *)v37.i8), *(uint16x4_t *)v56.val[1].i8);
        v25 += 64;
        v27 -= 16;
      }
      while (v27);
      unsigned int v11 = vaddvq_s32(vaddq_s32(vaddq_s32(v29, v26), vaddq_s32(v30, v28)));
      if (v24 == (v24 & 0x7FFFFFF0))
      {
LABEL_34:
        int v12 = (v10 & 0xFFFFFFFC) + 4;
        if (v12 >= v9)
        {
LABEL_44:
          v5 += v11;
          goto LABEL_45;
        }
LABEL_35:
        uint64_t v39 = v12;
        uint64_t v40 = (v9 + ~v12);
        if (v40 >= 0xF)
        {
          uint64_t v42 = v40 + 1;
          uint64_t v43 = (v40 + 1) & 0x1FFFFFFF0;
          uint64_t v41 = v43 + v39;
          int32x4_t v44 = (int32x4_t)v11;
          int32x4_t v45 = 0uLL;
          int16x8x4_t v46 = (int16x8_t *)(a1 + 2 * v39 + 16);
          uint64_t v47 = v43;
          int32x4_t v48 = 0uLL;
          int32x4_t v49 = 0uLL;
          do
          {
            uint16x8_t v50 = (uint16x8_t)vabsq_s16(v46[-1]);
            uint16x8_t v51 = (uint16x8_t)vabsq_s16(*v46);
            int32x4_t v45 = (int32x4_t)vaddw_high_u16((uint32x4_t)v45, v50);
            int32x4_t v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v50.i8);
            int32x4_t v49 = (int32x4_t)vaddw_high_u16((uint32x4_t)v49, v51);
            int32x4_t v48 = (int32x4_t)vaddw_u16((uint32x4_t)v48, *(uint16x4_t *)v51.i8);
            v46 += 2;
            v47 -= 16;
          }
          while (v47);
          unsigned int v11 = vaddvq_s32(vaddq_s32(vaddq_s32(v48, v44), vaddq_s32(v49, v45)));
          if (v42 == v43) {
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v41 = v39;
        }
        uint16x8_t v52 = (__int16 *)(a1 + 2 * v41);
        do
        {
          int v54 = *v52++;
          int v53 = v54;
          if (v54 < 0) {
            int v53 = -v53;
          }
          v11 += v53;
          LODWORD(v41) = v41 + 1;
        }
        while (v9 > (int)v41);
        goto LABEL_44;
      }
    }
    else
    {
      unint64_t v13 = 0;
      unsigned int v11 = 0;
    }
    uint64_t v38 = a1 + 2 * v13 + 4;
    do
    {
      v11 += vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)vabs_s16(*(int16x4_t *)(v38 - 4))));
      v13 += 4;
      v38 += 8;
    }
    while (v13 <= v10);
    goto LABEL_34;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    if (a5 >= 0x10)
    {
      for (uint64_t i = 0; i != a4; ++i)
      {
        if (*(unsigned char *)(a2 + i))
        {
          uint64_t v15 = 0;
          int32x4_t v16 = 0uLL;
          int32x4_t v17 = (int32x4_t)v5;
          int32x4_t v18 = 0uLL;
          int32x4_t v19 = 0uLL;
          do
          {
            uint16x8_t v20 = (uint16x8_t)vabsq_s16(*(int16x8_t *)(a1 + v15));
            uint16x8_t v21 = (uint16x8_t)vabsq_s16(*(int16x8_t *)(a1 + v15 + 16));
            int32x4_t v16 = (int32x4_t)vaddw_high_u16((uint32x4_t)v16, v20);
            int32x4_t v17 = (int32x4_t)vaddw_u16((uint32x4_t)v17, *(uint16x4_t *)v20.i8);
            int32x4_t v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, v21);
            int32x4_t v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v21.i8);
            v15 += 32;
          }
          while (((2 * a5) & 0x1FFFFFFE0) != v15);
          unsigned int v5 = vaddvq_s32(vaddq_s32(vaddq_s32(v18, v17), vaddq_s32(v19, v16)));
          if ((a5 & 0xFFFFFFF0) != (unint64_t)a5)
          {
            uint64_t v22 = a5 & 0x7FFFFFF0;
            do
            {
              int v23 = *(__int16 *)(a1 + 2 * v22);
              if (v23 < 0) {
                int v23 = -v23;
              }
              v5 += v23;
              ++v22;
            }
            while (a5 != v22);
          }
        }
        a1 += 2 * a5;
      }
    }
    else
    {
      for (uint64_t j = 0; j != a4; ++j)
      {
        if (*(unsigned char *)(a2 + j))
        {
          uint64_t v7 = 0;
          do
          {
            int v8 = *(__int16 *)(a1 + v7);
            if (v8 < 0) {
              int v8 = -v8;
            }
            v5 += v8;
            v7 += 2;
          }
          while (2 * a5 != v7);
        }
        a1 += 2 * a5;
      }
    }
  }
LABEL_45:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002CFCBC(uint64_t a1, unsigned __int8 *a2, double *a3, int a4, int a5)
{
  double v5 = *a3;
  if (!a2)
  {
    int v16 = a5 * a4;
    unint64_t v17 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      int v18 = 0;
      double v19 = 0.0;
      if (v16 <= 0) {
        goto LABEL_70;
      }
      goto LABEL_61;
    }
    if (v17 >= 0x1C)
    {
      uint64_t v32 = (v17 >> 2) + 1;
      unint64_t v20 = 4 * (v32 & 0x7FFFFFF8);
      uint16x8_t v33 = (const float *)(a1 + 64);
      double v19 = 0.0;
      uint64_t v34 = v32 & 0x7FFFFFF8;
      do
      {
        uint16x8_t v35 = v33 - 16;
        float32x4x4_t v86 = vld4q_f32(v35);
        float32x4x4_t v87 = vld4q_f32(v33);
        int32x4_t v36 = vabsq_s32((int32x4_t)v86.val[0]);
        int32x4_t v37 = vabsq_s32((int32x4_t)v87.val[0]);
        v38.i64[0] = v36.i32[0];
        v38.i64[1] = v36.i32[1];
        float64x2_t v39 = vcvtq_f64_s64(v38);
        v38.i64[0] = v36.i32[2];
        v38.i64[1] = v36.i32[3];
        float64x2_t v40 = vcvtq_f64_s64(v38);
        v38.i64[0] = v37.i32[0];
        v38.i64[1] = v37.i32[1];
        float64x2_t v41 = vcvtq_f64_s64(v38);
        v38.i64[0] = v37.i32[2];
        v38.i64[1] = v37.i32[3];
        float64x2_t v42 = vcvtq_f64_s64(v38);
        int32x4_t v43 = vabsq_s32((int32x4_t)v86.val[1]);
        int32x4_t v44 = vabsq_s32((int32x4_t)v87.val[1]);
        v38.i64[0] = v43.i32[0];
        v38.i64[1] = v43.i32[1];
        float64x2_t v45 = vcvtq_f64_s64(v38);
        v38.i64[0] = v43.i32[2];
        v38.i64[1] = v43.i32[3];
        float64x2_t v46 = vcvtq_f64_s64(v38);
        v38.i64[0] = v44.i32[0];
        v38.i64[1] = v44.i32[1];
        float64x2_t v47 = vcvtq_f64_s64(v38);
        v38.i64[0] = v44.i32[2];
        v38.i64[1] = v44.i32[3];
        float64x2_t v48 = vaddq_f64(v40, v46);
        float64x2_t v49 = vaddq_f64(v39, v45);
        float64x2_t v50 = vaddq_f64(v42, vcvtq_f64_s64(v38));
        float64x2_t v51 = vaddq_f64(v41, v47);
        int32x4_t v52 = vabsq_s32((int32x4_t)v86.val[2]);
        int32x4_t v53 = vabsq_s32((int32x4_t)v87.val[2]);
        v38.i64[0] = v52.i32[2];
        v38.i64[1] = v52.i32[3];
        float64x2_t v54 = vcvtq_f64_s64(v38);
        v38.i64[0] = v52.i32[0];
        v38.i64[1] = v52.i32[1];
        float64x2_t v55 = vcvtq_f64_s64(v38);
        v38.i64[0] = v53.i32[2];
        v38.i64[1] = v53.i32[3];
        float64x2_t v56 = vcvtq_f64_s64(v38);
        v38.i64[0] = v53.i32[0];
        v38.i64[1] = v53.i32[1];
        float64x2_t v57 = vaddq_f64(v51, vcvtq_f64_s64(v38));
        v86.val[0] = (float32x4_t)vabsq_s32((int32x4_t)v86.val[3]);
        v86.val[1] = (float32x4_t)vabsq_s32((int32x4_t)v87.val[3]);
        v38.i64[0] = v86.val[0].i32[0];
        v38.i64[1] = v86.val[0].i32[1];
        v86.val[2] = (float32x4_t)vcvtq_f64_s64(v38);
        v38.i64[0] = v86.val[0].i32[2];
        v38.i64[1] = v86.val[0].i32[3];
        v86.val[0] = (float32x4_t)vcvtq_f64_s64(v38);
        v38.i64[0] = v86.val[1].i32[0];
        v38.i64[1] = v86.val[1].i32[1];
        v86.val[3] = (float32x4_t)vcvtq_f64_s64(v38);
        v38.i64[0] = v86.val[1].i32[2];
        v38.i64[1] = v86.val[1].i32[3];
        v86.val[0] = (float32x4_t)vaddq_f64(vaddq_f64(v48, v54), (float64x2_t)v86.val[0]);
        v86.val[2] = (float32x4_t)vaddq_f64(vaddq_f64(v49, v55), (float64x2_t)v86.val[2]);
        v86.val[1] = (float32x4_t)vaddq_f64(vaddq_f64(v50, v56), vcvtq_f64_s64(v38));
        v86.val[3] = (float32x4_t)vaddq_f64(v57, (float64x2_t)v86.val[3]);
        double v19 = v19
            + *(double *)v86.val[2].i64
            + *(double *)&v86.val[2].i64[1]
            + *(double *)v86.val[0].i64
            + *(double *)&v86.val[0].i64[1]
            + *(double *)v86.val[3].i64
            + *(double *)&v86.val[3].i64[1]
            + *(double *)v86.val[1].i64
            + *(double *)&v86.val[1].i64[1];
        v33 += 32;
        v34 -= 8;
      }
      while (v34);
      if (v32 == (v32 & 0x7FFFFFF8)) {
        goto LABEL_60;
      }
    }
    else
    {
      unint64_t v20 = 0;
      double v19 = 0.0;
    }
    uint16x8_t v58 = (int *)(a1 + 4 * v20 + 8);
    do
    {
      int v59 = *(v58 - 2);
      int v60 = *(v58 - 1);
      if (v59 < 0) {
        int v59 = -v59;
      }
      double v61 = (double)v59;
      if (v60 >= 0) {
        int v62 = *(v58 - 1);
      }
      else {
        int v62 = -v60;
      }
      double v63 = (double)v62;
      int v64 = *v58;
      int v65 = v58[1];
      v58 += 4;
      if (v64 < 0) {
        int v64 = -v64;
      }
      double v66 = (double)v64;
      if (v65 >= 0) {
        int v67 = v65;
      }
      else {
        int v67 = -v65;
      }
      double v19 = v19 + v61 + v63 + v66 + (double)v67;
      v20 += 4;
    }
    while (v20 <= v17);
LABEL_60:
    int v18 = (v17 & 0xFFFFFFFC) + 4;
    if (v18 >= v16)
    {
LABEL_70:
      double v5 = v5 + v19;
      goto LABEL_71;
    }
LABEL_61:
    uint64_t v68 = v18;
    uint64_t v69 = (v16 + ~v18);
    if (v69 >= 7)
    {
      uint64_t v71 = v69 + 1;
      uint64_t v72 = (v69 + 1) & 0x1FFFFFFF8;
      uint64_t v70 = v72 + v68;
      int32x4_t v73 = (int32x4_t *)(a1 + 4 * v68 + 16);
      uint64_t v74 = v72;
      do
      {
        int32x4_t v75 = vabsq_s32(v73[-1]);
        int32x4_t v76 = vabsq_s32(*v73);
        v77.i64[0] = v75.i32[2];
        v77.i64[1] = v75.i32[3];
        float64x2_t v78 = vcvtq_f64_s64(v77);
        v77.i64[0] = v75.i32[0];
        v77.i64[1] = v75.i32[1];
        float64x2_t v79 = vcvtq_f64_s64(v77);
        v77.i64[0] = v76.i32[2];
        v77.i64[1] = v76.i32[3];
        float64x2_t v80 = vcvtq_f64_s64(v77);
        v77.i64[0] = v76.i32[0];
        v77.i64[1] = v76.i32[1];
        float64x2_t v81 = vcvtq_f64_s64(v77);
        double v19 = v19
            + v79.f64[0]
            + v79.f64[1]
            + v78.f64[0]
            + v78.f64[1]
            + v81.f64[0]
            + v81.f64[1]
            + v80.f64[0]
            + v80.f64[1];
        v73 += 2;
        v74 -= 8;
      }
      while (v74);
      if (v71 == v72) {
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t v70 = v68;
    }
    int32x4_t v82 = (int *)(a1 + 4 * v70);
    do
    {
      int v84 = *v82++;
      int v83 = v84;
      if (v84 < 0) {
        int v83 = -v83;
      }
      double v19 = v19 + (double)v83;
      LODWORD(v70) = v70 + 1;
    }
    while (v16 > (int)v70);
    goto LABEL_70;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    uint64_t v6 = a4;
    if (a5 >= 8)
    {
      for (uint64_t i = 0; i != a4; ++i)
      {
        if (a2[i])
        {
          uint64_t v22 = 0;
          do
          {
            int32x4_t v23 = vabsq_s32(*(int32x4_t *)(a1 + v22));
            int32x4_t v24 = vabsq_s32(*(int32x4_t *)(a1 + v22 + 16));
            v25.i64[0] = v23.i32[2];
            v25.i64[1] = v23.i32[3];
            float64x2_t v26 = vcvtq_f64_s64(v25);
            v25.i64[0] = v23.i32[0];
            v25.i64[1] = v23.i32[1];
            float64x2_t v27 = vcvtq_f64_s64(v25);
            v25.i64[0] = v24.i32[2];
            v25.i64[1] = v24.i32[3];
            float64x2_t v28 = vcvtq_f64_s64(v25);
            v25.i64[0] = v24.i32[0];
            v25.i64[1] = v24.i32[1];
            float64x2_t v29 = vcvtq_f64_s64(v25);
            double v5 = v5
               + v27.f64[0]
               + v27.f64[1]
               + v26.f64[0]
               + v26.f64[1]
               + v29.f64[0]
               + v29.f64[1]
               + v28.f64[0]
               + v28.f64[1];
            v22 += 32;
          }
          while (((4 * a5) & 0x3FFFFFFE0) != v22);
          if ((a5 & 0xFFFFFFF8) != (unint64_t)a5)
          {
            uint64_t v30 = a5 & 0xFFFFFFF8;
            do
            {
              int v31 = *(_DWORD *)(a1 + 4 * v30);
              if (v31 < 0) {
                int v31 = -v31;
              }
              double v5 = v5 + (double)v31;
              ++v30;
            }
            while (a5 != v30);
          }
        }
        a1 += 4 * a5;
      }
    }
    else
    {
      uint64_t v7 = (int *)(a1 + 12);
      do
      {
        if (*a2++)
        {
          int v9 = *(v7 - 3);
          if (v9 < 0) {
            int v9 = -v9;
          }
          double v5 = v5 + (double)v9;
          if (a5 != 1)
          {
            int v10 = *(v7 - 2);
            if (v10 < 0) {
              int v10 = -v10;
            }
            double v5 = v5 + (double)v10;
            if (a5 != 2)
            {
              int v11 = *(v7 - 1);
              if (v11 < 0) {
                int v11 = -v11;
              }
              double v5 = v5 + (double)v11;
              if (a5 != 3)
              {
                int v12 = *v7;
                if (*v7 < 0) {
                  int v12 = -v12;
                }
                double v5 = v5 + (double)v12;
                if (a5 != 4)
                {
                  int v13 = v7[1];
                  if (v13 < 0) {
                    int v13 = -v13;
                  }
                  double v5 = v5 + (double)v13;
                  if (a5 != 5)
                  {
                    int v14 = v7[2];
                    if (v14 < 0) {
                      int v14 = -v14;
                    }
                    double v5 = v5 + (double)v14;
                    if (a5 != 6)
                    {
                      int v15 = v7[3];
                      if (v15 < 0) {
                        int v15 = -v15;
                      }
                      double v5 = v5 + (double)v15;
                    }
                  }
                }
              }
            }
          }
        }
        v7 += a5;
        --v6;
      }
      while (v6);
    }
  }
LABEL_71:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002D014C(uint64_t a1, unsigned __int8 *a2, double *a3, int a4, int a5)
{
  double v5 = *a3;
  if (!a2)
  {
    int v9 = a5 * a4;
    unint64_t v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      int v11 = 0;
      double v12 = 0.0;
      if (v9 <= 0) {
        goto LABEL_38;
      }
LABEL_31:
      uint64_t v27 = v11;
      uint64_t v28 = (v9 + ~v11);
      if (v28 >= 3)
      {
        uint64_t v30 = v28 + 1;
        uint64_t v31 = (v28 + 1) & 0x1FFFFFFFCLL;
        uint64_t v29 = v31 + v27;
        uint64_t v32 = (float64x2_t *)(a1 + 8 * v27 + 16);
        uint64_t v33 = v31;
        do
        {
          float64x2_t v34 = vabsq_f64(v32[-1]);
          float64x2_t v35 = vabsq_f64(*v32);
          double v12 = v12 + v34.f64[0] + v34.f64[1] + v35.f64[0] + v35.f64[1];
          v32 += 2;
          v33 -= 4;
        }
        while (v33);
        if (v30 == v31) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v29 = v27;
      }
      int32x4_t v36 = (double *)(a1 + 8 * v29);
      do
      {
        double v37 = *v36++;
        double v12 = v12 + fabs(v37);
        LODWORD(v29) = v29 + 1;
      }
      while (v9 > (int)v29);
LABEL_38:
      double v5 = v5 + v12;
      goto LABEL_39;
    }
    if (v10 >= 0xC)
    {
      uint64_t v19 = (v10 >> 2) + 1;
      unint64_t v13 = 4 * (v19 & 0x7FFFFFFC);
      unint64_t v20 = (const double *)(a1 + 64);
      double v12 = 0.0;
      uint64_t v21 = v19 & 0x7FFFFFFC;
      do
      {
        uint64_t v22 = v20 - 8;
        float64x2x4_t v39 = vld4q_f64(v22);
        float64x2x4_t v40 = vld4q_f64(v20);
        v39.val[0] = vaddq_f64(vaddq_f64(vaddq_f64(vabsq_f64(v39.val[0]), vabsq_f64(v39.val[1])), vabsq_f64(v39.val[2])), vabsq_f64(v39.val[3]));
        v39.val[1] = vaddq_f64(vaddq_f64(vaddq_f64(vabsq_f64(v40.val[0]), vabsq_f64(v40.val[1])), vabsq_f64(v40.val[2])), vabsq_f64(v40.val[3]));
        double v12 = v12 + v39.val[0].f64[0] + v39.val[0].f64[1] + v39.val[1].f64[0] + v39.val[1].f64[1];
        v20 += 16;
        v21 -= 4;
      }
      while (v21);
      if (v19 == (v19 & 0x7FFFFFFC))
      {
LABEL_30:
        int v11 = (v10 & 0xFFFFFFFC) + 4;
        if (v11 >= v9) {
          goto LABEL_38;
        }
        goto LABEL_31;
      }
    }
    else
    {
      unint64_t v13 = 0;
      double v12 = 0.0;
    }
    int32x4_t v23 = (double *)(a1 + 8 * v13 + 16);
    do
    {
      double v24 = fabs(*(v23 - 2)) + fabs(*(v23 - 1));
      double v25 = *v23;
      double v26 = v23[1];
      v23 += 4;
      double v12 = v12 + v24 + fabs(v25) + fabs(v26);
      v13 += 4;
    }
    while (v13 <= v10);
    goto LABEL_30;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    uint64_t v6 = a4;
    if (a5 >= 4)
    {
      for (uint64_t i = 0; i != a4; ++i)
      {
        if (a2[i])
        {
          uint64_t v15 = 0;
          do
          {
            float64x2_t v16 = vabsq_f64(*(float64x2_t *)(a1 + v15));
            float64x2_t v17 = vabsq_f64(*(float64x2_t *)(a1 + v15 + 16));
            double v5 = v5 + v16.f64[0] + v16.f64[1] + v17.f64[0] + v17.f64[1];
            v15 += 32;
          }
          while (((8 * a5) & 0x7FFFFFFE0) != v15);
          if ((a5 & 0xFFFFFFFC) != (unint64_t)a5)
          {
            uint64_t v18 = a5 & 0xFFFFFFFC;
            do
              double v5 = v5 + fabs(*(double *)(a1 + 8 * v18++));
            while (a5 != v18);
          }
        }
        a1 += 8 * a5;
      }
    }
    else
    {
      uint64_t v7 = (double *)(a1 + 16);
      do
      {
        if (*a2++)
        {
          double v5 = v5 + fabs(*(v7 - 2));
          if (a5 != 1)
          {
            double v5 = v5 + fabs(*(v7 - 1));
            if (a5 != 2) {
              double v5 = v5 + fabs(*v7);
            }
          }
        }
        v7 += a5;
        --v6;
      }
      while (v6);
    }
  }
LABEL_39:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002D0404(uint64_t a1, unsigned __int8 *a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5 = *a3;
  if (!a2)
  {
    int v9 = a5 * a4;
    unint64_t v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      if (v9 <= 0) {
        goto LABEL_62;
      }
      goto LABEL_47;
    }
    if (v10 < 0x1C)
    {
      unint64_t v13 = 0;
      unsigned int v12 = 0;
      goto LABEL_45;
    }
    uint64_t v37 = (v10 >> 2) + 1;
    if (v10 >= 0x3C)
    {
      uint64_t v38 = v37 & 0x7FFFFFF0;
      int32x4_t v46 = 0uLL;
      uint64_t v47 = v38;
      float64x2_t v48 = (const char *)a1;
      int32x4_t v49 = 0uLL;
      int32x4_t v50 = 0uLL;
      int32x4_t v51 = 0uLL;
      do
      {
        int8x16x4_t v89 = vld4q_s8(v48);
        v48 += 64;
        uint16x8_t v52 = vmovl_high_u8((uint8x16_t)v89.val[0]);
        uint16x8_t v53 = vmovl_u8(*(uint8x8_t *)v89.val[0].i8);
        uint16x8_t v54 = vmovl_u8(*(uint8x8_t *)v89.val[1].i8);
        uint16x8_t v55 = vmovl_high_u8((uint8x16_t)v89.val[1]);
        uint16x8_t v56 = vmovl_high_u8((uint8x16_t)v89.val[2]);
        uint16x8_t v57 = vmovl_u8(*(uint8x8_t *)v89.val[2].i8);
        uint16x8_t v58 = vmovl_u8(*(uint8x8_t *)v89.val[3].i8);
        v89.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v89.val[3]);
        int32x4_t v51 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16((uint32x4_t)v51, v52, v52), v55, v55), v56, v56), (uint16x8_t)v89.val[0], (uint16x8_t)v89.val[0]);
        int32x4_t v50 = (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v50, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v52.i8), *(uint16x4_t *)v55.i8, *(uint16x4_t *)v55.i8), *(uint16x4_t *)v56.i8, *(uint16x4_t *)v56.i8), *(uint16x4_t *)v89.val[0].i8, *(uint16x4_t *)v89.val[0].i8);
        int32x4_t v49 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16((uint32x4_t)v49, v53, v53), v54, v54), v57, v57), v58, v58);
        int32x4_t v46 = (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v46, *(uint16x4_t *)v53.i8, *(uint16x4_t *)v53.i8), *(uint16x4_t *)v54.i8, *(uint16x4_t *)v54.i8), *(uint16x4_t *)v57.i8, *(uint16x4_t *)v57.i8), *(uint16x4_t *)v58.i8, *(uint16x4_t *)v58.i8);
        v47 -= 16;
      }
      while (v47);
      unsigned int v12 = vaddvq_s32(vaddq_s32(vaddq_s32(v46, v50), vaddq_s32(v49, v51)));
      if (v37 == v38) {
        goto LABEL_46;
      }
      if ((v37 & 8) == 0)
      {
        unint64_t v13 = 4 * v38;
        do
        {
LABEL_45:
          v12 += *(unsigned __int8 *)(a1 + v13) * *(unsigned __int8 *)(a1 + v13)
               + *(unsigned __int8 *)(a1 + v13 + 1) * *(unsigned __int8 *)(a1 + v13 + 1)
               + *(unsigned __int8 *)(a1 + v13 + 2) * *(unsigned __int8 *)(a1 + v13 + 2)
               + *(unsigned __int8 *)(a1 + v13 + 3) * *(unsigned __int8 *)(a1 + v13 + 3);
          v13 += 4;
        }
        while (v13 <= v10);
        goto LABEL_46;
      }
    }
    else
    {
      unsigned int v12 = 0;
      uint64_t v38 = 0;
    }
    unint64_t v13 = 4 * (v37 & 0x7FFFFFF8);
    int32x4_t v39 = 0uLL;
    int32x4_t v40 = (int32x4_t)v12;
    float64x2_t v41 = (const char *)(a1 + 4 * v38);
    uint64_t v42 = v38 - (v37 & 0x7FFFFFF8);
    do
    {
      int8x8x4_t v88 = vld4_s8(v41);
      v41 += 32;
      uint16x8_t v43 = vmovl_u8((uint8x8_t)v88.val[0]);
      uint16x8_t v44 = vmovl_u8((uint8x8_t)v88.val[1]);
      uint16x8_t v45 = vmovl_u8((uint8x8_t)v88.val[2]);
      *(uint16x8_t *)v88.val[0].i8 = vmovl_u8((uint8x8_t)v88.val[3]);
      int32x4_t v39 = (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16((uint32x4_t)v39, v43, v43), v44, v44), v45, v45), *(uint16x8_t *)v88.val[0].i8, *(uint16x8_t *)v88.val[0].i8);
      int32x4_t v40 = (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v40, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v43.i8), *(uint16x4_t *)v44.i8, *(uint16x4_t *)v44.i8), *(uint16x4_t *)v45.i8, *(uint16x4_t *)v45.i8), (uint16x4_t)v88.val[0], (uint16x4_t)v88.val[0]);
      v42 += 8;
    }
    while (v42);
    unsigned int v12 = vaddvq_s32(vaddq_s32(v40, v39));
    if (v37 != (v37 & 0x7FFFFFF8)) {
      goto LABEL_45;
    }
LABEL_46:
    unsigned int v11 = (v10 & 0xFFFFFFFC) + 4;
    if ((int)v11 >= v9)
    {
LABEL_62:
      v5 += v12;
      goto LABEL_63;
    }
LABEL_47:
    uint64_t v59 = v11;
    uint64_t v60 = v9 + ~v11;
    if (v60 < 7)
    {
      uint64_t v61 = v11;
      goto LABEL_60;
    }
    uint64_t v62 = v60 + 1;
    if (v60 >= 0x1F)
    {
      uint64_t v63 = v62 & 0x1FFFFFFE0;
      int32x4_t v64 = 0uLL;
      int32x4_t v65 = (int32x4_t)v12;
      double v66 = (uint8x8_t *)(v59 + a1 + 16);
      uint64_t v67 = v62 & 0x1FFFFFFE0;
      int32x4_t v68 = 0uLL;
      int32x4_t v69 = 0uLL;
      int32x4_t v70 = 0uLL;
      int32x4_t v71 = 0uLL;
      int32x4_t v72 = 0uLL;
      int32x4_t v73 = 0uLL;
      do
      {
        uint8x16_t v74 = *(uint8x16_t *)v66[-2].i8;
        uint16x8_t v75 = vmovl_u8(*(uint8x8_t *)v74.i8);
        uint16x8_t v76 = vmovl_high_u8(v74);
        uint16x8_t v77 = vmovl_u8(*v66);
        uint16x8_t v78 = vmovl_high_u8(*(uint8x16_t *)v66->i8);
        int32x4_t v69 = (int32x4_t)vmlal_high_u16((uint32x4_t)v69, v76, v76);
        int32x4_t v68 = (int32x4_t)vmlal_u16((uint32x4_t)v68, *(uint16x4_t *)v76.i8, *(uint16x4_t *)v76.i8);
        int32x4_t v64 = (int32x4_t)vmlal_high_u16((uint32x4_t)v64, v75, v75);
        int32x4_t v65 = (int32x4_t)vmlal_u16((uint32x4_t)v65, *(uint16x4_t *)v75.i8, *(uint16x4_t *)v75.i8);
        int32x4_t v73 = (int32x4_t)vmlal_high_u16((uint32x4_t)v73, v78, v78);
        int32x4_t v72 = (int32x4_t)vmlal_u16((uint32x4_t)v72, *(uint16x4_t *)v78.i8, *(uint16x4_t *)v78.i8);
        int32x4_t v71 = (int32x4_t)vmlal_high_u16((uint32x4_t)v71, v77, v77);
        int32x4_t v70 = (int32x4_t)vmlal_u16((uint32x4_t)v70, *(uint16x4_t *)v77.i8, *(uint16x4_t *)v77.i8);
        v66 += 4;
        v67 -= 32;
      }
      while (v67);
      unsigned int v12 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v70, v65), vaddq_s32(v72, v68)), vaddq_s32(vaddq_s32(v71, v64), vaddq_s32(v73, v69))));
      if (v62 == v63) {
        goto LABEL_62;
      }
      if ((v62 & 0x18) == 0)
      {
        uint64_t v61 = v63 + v59;
LABEL_60:
        uint64_t v85 = (unsigned __int8 *)(a1 + v61);
        do
        {
          int v86 = *v85++;
          v12 += v86 * v86;
          LODWORD(v61) = v61 + 1;
        }
        while (v9 > (int)v61);
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    uint64_t v61 = (v62 & 0x1FFFFFFF8) + v59;
    int32x4_t v79 = 0uLL;
    int32x4_t v80 = (int32x4_t)v12;
    uint64_t v81 = v63 - (v62 & 0x1FFFFFFF8);
    int32x4_t v82 = (uint8x8_t *)(a1 + v63 + v59);
    do
    {
      uint8x8_t v83 = *v82++;
      uint16x8_t v84 = vmovl_u8(v83);
      int32x4_t v79 = (int32x4_t)vmlal_high_u16((uint32x4_t)v79, v84, v84);
      int32x4_t v80 = (int32x4_t)vmlal_u16((uint32x4_t)v80, *(uint16x4_t *)v84.i8, *(uint16x4_t *)v84.i8);
      v81 += 8;
    }
    while (v81);
    unsigned int v12 = vaddvq_s32(vaddq_s32(v80, v79));
    if (v62 == (v62 & 0x1FFFFFFF8)) {
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  if (a4 < 1 || a5 < 1) {
    goto LABEL_63;
  }
  uint64_t v6 = a4;
  if (a5 >= 8)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a5 & 0xFFFFFFE0;
    uint64_t v16 = a5 & 0xFFFFFFF8;
    while (!a2[v14])
    {
LABEL_21:
      ++v14;
      a1 += a5;
      if (v14 == a4) {
        goto LABEL_63;
      }
    }
    if (a5 >= 0x20)
    {
      uint64_t v18 = 0;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = (int32x4_t)v5;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      do
      {
        uint8x16_t v27 = *(uint8x16_t *)(a1 + v18);
        uint8x16_t v28 = *(uint8x16_t *)(a1 + v18 + 16);
        uint16x8_t v29 = vmovl_u8(*(uint8x8_t *)v27.i8);
        uint16x8_t v30 = vmovl_high_u8(v27);
        uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)v28.i8);
        uint16x8_t v32 = vmovl_high_u8(v28);
        int32x4_t v22 = (int32x4_t)vmlal_high_u16((uint32x4_t)v22, v30, v30);
        int32x4_t v21 = (int32x4_t)vmlal_u16((uint32x4_t)v21, *(uint16x4_t *)v30.i8, *(uint16x4_t *)v30.i8);
        int32x4_t v19 = (int32x4_t)vmlal_high_u16((uint32x4_t)v19, v29, v29);
        int32x4_t v20 = (int32x4_t)vmlal_u16((uint32x4_t)v20, *(uint16x4_t *)v29.i8, *(uint16x4_t *)v29.i8);
        int32x4_t v26 = (int32x4_t)vmlal_high_u16((uint32x4_t)v26, v32, v32);
        int32x4_t v25 = (int32x4_t)vmlal_u16((uint32x4_t)v25, *(uint16x4_t *)v32.i8, *(uint16x4_t *)v32.i8);
        int32x4_t v24 = (int32x4_t)vmlal_high_u16((uint32x4_t)v24, v31, v31);
        int32x4_t v23 = (int32x4_t)vmlal_u16((uint32x4_t)v23, *(uint16x4_t *)v31.i8, *(uint16x4_t *)v31.i8);
        v18 += 32;
      }
      while (v15 != v18);
      unsigned int v5 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v23, v20), vaddq_s32(v25, v21)), vaddq_s32(vaddq_s32(v24, v19), vaddq_s32(v26, v22))));
      if (v15 == a5) {
        goto LABEL_21;
      }
      uint64_t v17 = a5 & 0xFFFFFFE0;
      uint64_t v33 = v17;
      if ((a5 & 0x18) == 0)
      {
        do
        {
LABEL_32:
          v5 += *(unsigned __int8 *)(a1 + v33) * *(unsigned __int8 *)(a1 + v33);
          ++v33;
        }
        while (a5 != v33);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    int32x4_t v34 = 0uLL;
    int32x4_t v35 = (int32x4_t)v5;
    do
    {
      uint16x8_t v36 = vmovl_u8(*(uint8x8_t *)(a1 + v17));
      int32x4_t v34 = (int32x4_t)vmlal_high_u16((uint32x4_t)v34, v36, v36);
      int32x4_t v35 = (int32x4_t)vmlal_u16((uint32x4_t)v35, *(uint16x4_t *)v36.i8, *(uint16x4_t *)v36.i8);
      v17 += 8;
    }
    while (v16 != v17);
    unsigned int v5 = vaddvq_s32(vaddq_s32(v35, v34));
    uint64_t v33 = a5 & 0xFFFFFFF8;
    if (v16 == a5) {
      goto LABEL_21;
    }
    goto LABEL_32;
  }
  uint64_t v7 = (unsigned __int8 *)(a1 + 3);
  do
  {
    if (*a2++)
    {
      v5 += *(v7 - 3) * *(v7 - 3);
      if (a5 != 1)
      {
        v5 += *(v7 - 2) * *(v7 - 2);
        if (a5 != 2)
        {
          v5 += *(v7 - 1) * *(v7 - 1);
          if (a5 != 3)
          {
            v5 += *v7 * *v7;
            if (a5 != 4)
            {
              v5 += v7[1] * v7[1];
              if (a5 != 5)
              {
                v5 += v7[2] * v7[2];
                if (a5 != 6) {
                  v5 += v7[3] * v7[3];
                }
              }
            }
          }
        }
      }
    }
    v7 += a5;
    --v6;
  }
  while (v6);
LABEL_63:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002D08EC(uint64_t a1, unsigned __int8 *a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v5 = *a3;
  if (!a2)
  {
    int v9 = a5 * a4;
    unint64_t v10 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      if (v9 <= 0) {
        goto LABEL_62;
      }
      goto LABEL_47;
    }
    if (v10 < 0x1C)
    {
      unint64_t v13 = 0;
      unsigned int v12 = 0;
      goto LABEL_45;
    }
    uint64_t v37 = (v10 >> 2) + 1;
    if (v10 >= 0x3C)
    {
      uint64_t v38 = v37 & 0x7FFFFFF0;
      int32x4_t v46 = 0uLL;
      uint64_t v47 = v38;
      float64x2_t v48 = (const char *)a1;
      int32x4_t v49 = 0uLL;
      int32x4_t v50 = 0uLL;
      int32x4_t v51 = 0uLL;
      do
      {
        int8x16x4_t v89 = vld4q_s8(v48);
        v48 += 64;
        int16x8_t v52 = vmovl_high_s8(v89.val[0]);
        int16x8_t v53 = vmovl_s8(*(int8x8_t *)v89.val[0].i8);
        int16x8_t v54 = vmovl_s8(*(int8x8_t *)v89.val[1].i8);
        int16x8_t v55 = vmovl_high_s8(v89.val[1]);
        int16x8_t v56 = vmovl_high_s8(v89.val[2]);
        int16x8_t v57 = vmovl_s8(*(int8x8_t *)v89.val[2].i8);
        int16x8_t v58 = vmovl_s8(*(int8x8_t *)v89.val[3].i8);
        v89.val[0] = (int8x16_t)vmovl_high_s8(v89.val[3]);
        int32x4_t v51 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(v51, v52, v52), v55, v55), v56, v56), (int16x8_t)v89.val[0], (int16x8_t)v89.val[0]);
        int32x4_t v50 = vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(v50, *(int16x4_t *)v52.i8, *(int16x4_t *)v52.i8), *(int16x4_t *)v55.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v89.val[0].i8, *(int16x4_t *)v89.val[0].i8);
        int32x4_t v49 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(v49, v53, v53), v54, v54), v57, v57), v58, v58);
        int32x4_t v46 = vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(v46, *(int16x4_t *)v53.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v54.i8, *(int16x4_t *)v54.i8), *(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8), *(int16x4_t *)v58.i8, *(int16x4_t *)v58.i8);
        v47 -= 16;
      }
      while (v47);
      unsigned int v12 = vaddvq_s32(vaddq_s32(vaddq_s32(v46, v50), vaddq_s32(v49, v51)));
      if (v37 == v38) {
        goto LABEL_46;
      }
      if ((v37 & 8) == 0)
      {
        unint64_t v13 = 4 * v38;
        do
        {
LABEL_45:
          v12 += *(char *)(a1 + v13) * *(char *)(a1 + v13)
               + *(char *)(a1 + v13 + 1) * *(char *)(a1 + v13 + 1)
               + *(char *)(a1 + v13 + 2) * *(char *)(a1 + v13 + 2)
               + *(char *)(a1 + v13 + 3) * *(char *)(a1 + v13 + 3);
          v13 += 4;
        }
        while (v13 <= v10);
        goto LABEL_46;
      }
    }
    else
    {
      unsigned int v12 = 0;
      uint64_t v38 = 0;
    }
    unint64_t v13 = 4 * (v37 & 0x7FFFFFF8);
    int32x4_t v39 = 0uLL;
    int32x4_t v40 = (int32x4_t)v12;
    float64x2_t v41 = (const char *)(a1 + 4 * v38);
    uint64_t v42 = v38 - (v37 & 0x7FFFFFF8);
    do
    {
      int8x8x4_t v88 = vld4_s8(v41);
      v41 += 32;
      int16x8_t v43 = vmovl_s8(v88.val[0]);
      int16x8_t v44 = vmovl_s8(v88.val[1]);
      int16x8_t v45 = vmovl_s8(v88.val[2]);
      *(int16x8_t *)v88.val[0].i8 = vmovl_s8(v88.val[3]);
      int32x4_t v39 = vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(vmlal_high_s16(v39, v43, v43), v44, v44), v45, v45), *(int16x8_t *)v88.val[0].i8, *(int16x8_t *)v88.val[0].i8);
      int32x4_t v40 = vmlal_s16(vmlal_s16(vmlal_s16(vmlal_s16(v40, *(int16x4_t *)v43.i8, *(int16x4_t *)v43.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8), *(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8), (int16x4_t)v88.val[0], (int16x4_t)v88.val[0]);
      v42 += 8;
    }
    while (v42);
    unsigned int v12 = vaddvq_s32(vaddq_s32(v40, v39));
    if (v37 != (v37 & 0x7FFFFFF8)) {
      goto LABEL_45;
    }
LABEL_46:
    unsigned int v11 = (v10 & 0xFFFFFFFC) + 4;
    if ((int)v11 >= v9)
    {
LABEL_62:
      v5 += v12;
      goto LABEL_63;
    }
LABEL_47:
    uint64_t v59 = v11;
    uint64_t v60 = v9 + ~v11;
    if (v60 < 7)
    {
      uint64_t v61 = v11;
      goto LABEL_60;
    }
    uint64_t v62 = v60 + 1;
    if (v60 >= 0x1F)
    {
      uint64_t v63 = v62 & 0x1FFFFFFE0;
      int32x4_t v64 = 0uLL;
      int32x4_t v65 = (int32x4_t)v12;
      double v66 = (int8x8_t *)(v59 + a1 + 16);
      uint64_t v67 = v62 & 0x1FFFFFFE0;
      int32x4_t v68 = 0uLL;
      int32x4_t v69 = 0uLL;
      int32x4_t v70 = 0uLL;
      int32x4_t v71 = 0uLL;
      int32x4_t v72 = 0uLL;
      int32x4_t v73 = 0uLL;
      do
      {
        int8x16_t v74 = *(int8x16_t *)v66[-2].i8;
        int16x8_t v75 = vmovl_s8(*(int8x8_t *)v74.i8);
        int16x8_t v76 = vmovl_high_s8(v74);
        int16x8_t v77 = vmovl_s8(*v66);
        int16x8_t v78 = vmovl_high_s8(*(int8x16_t *)v66->i8);
        int32x4_t v69 = vmlal_high_s16(v69, v76, v76);
        int32x4_t v68 = vmlal_s16(v68, *(int16x4_t *)v76.i8, *(int16x4_t *)v76.i8);
        int32x4_t v64 = vmlal_high_s16(v64, v75, v75);
        int32x4_t v65 = vmlal_s16(v65, *(int16x4_t *)v75.i8, *(int16x4_t *)v75.i8);
        int32x4_t v73 = vmlal_high_s16(v73, v78, v78);
        int32x4_t v72 = vmlal_s16(v72, *(int16x4_t *)v78.i8, *(int16x4_t *)v78.i8);
        int32x4_t v71 = vmlal_high_s16(v71, v77, v77);
        int32x4_t v70 = vmlal_s16(v70, *(int16x4_t *)v77.i8, *(int16x4_t *)v77.i8);
        v66 += 4;
        v67 -= 32;
      }
      while (v67);
      unsigned int v12 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v70, v65), vaddq_s32(v72, v68)), vaddq_s32(vaddq_s32(v71, v64), vaddq_s32(v73, v69))));
      if (v62 == v63) {
        goto LABEL_62;
      }
      if ((v62 & 0x18) == 0)
      {
        uint64_t v61 = v63 + v59;
LABEL_60:
        uint64_t v85 = (char *)(a1 + v61);
        do
        {
          int v86 = *v85++;
          v12 += v86 * v86;
          LODWORD(v61) = v61 + 1;
        }
        while (v9 > (int)v61);
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    uint64_t v61 = (v62 & 0x1FFFFFFF8) + v59;
    int32x4_t v79 = 0uLL;
    int32x4_t v80 = (int32x4_t)v12;
    uint64_t v81 = v63 - (v62 & 0x1FFFFFFF8);
    int32x4_t v82 = (int8x8_t *)(a1 + v63 + v59);
    do
    {
      int8x8_t v83 = *v82++;
      int16x8_t v84 = vmovl_s8(v83);
      int32x4_t v79 = vmlal_high_s16(v79, v84, v84);
      int32x4_t v80 = vmlal_s16(v80, *(int16x4_t *)v84.i8, *(int16x4_t *)v84.i8);
      v81 += 8;
    }
    while (v81);
    unsigned int v12 = vaddvq_s32(vaddq_s32(v80, v79));
    if (v62 == (v62 & 0x1FFFFFFF8)) {
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  if (a4 < 1 || a5 < 1) {
    goto LABEL_63;
  }
  uint64_t v6 = a4;
  if (a5 >= 8)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a5 & 0xFFFFFFE0;
    uint64_t v16 = a5 & 0xFFFFFFF8;
    while (!a2[v14])
    {
LABEL_21:
      ++v14;
      a1 += a5;
      if (v14 == a4) {
        goto LABEL_63;
      }
    }
    if (a5 >= 0x20)
    {
      uint64_t v18 = 0;
      int32x4_t v19 = 0uLL;
      int32x4_t v20 = (int32x4_t)v5;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      int32x4_t v26 = 0uLL;
      do
      {
        int8x16_t v27 = *(int8x16_t *)(a1 + v18);
        int8x16_t v28 = *(int8x16_t *)(a1 + v18 + 16);
        int16x8_t v29 = vmovl_s8(*(int8x8_t *)v27.i8);
        int16x8_t v30 = vmovl_high_s8(v27);
        int16x8_t v31 = vmovl_s8(*(int8x8_t *)v28.i8);
        int16x8_t v32 = vmovl_high_s8(v28);
        int32x4_t v22 = vmlal_high_s16(v22, v30, v30);
        int32x4_t v21 = vmlal_s16(v21, *(int16x4_t *)v30.i8, *(int16x4_t *)v30.i8);
        int32x4_t v19 = vmlal_high_s16(v19, v29, v29);
        int32x4_t v20 = vmlal_s16(v20, *(int16x4_t *)v29.i8, *(int16x4_t *)v29.i8);
        int32x4_t v26 = vmlal_high_s16(v26, v32, v32);
        int32x4_t v25 = vmlal_s16(v25, *(int16x4_t *)v32.i8, *(int16x4_t *)v32.i8);
        int32x4_t v24 = vmlal_high_s16(v24, v31, v31);
        int32x4_t v23 = vmlal_s16(v23, *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8);
        v18 += 32;
      }
      while (v15 != v18);
      unsigned int v5 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v23, v20), vaddq_s32(v25, v21)), vaddq_s32(vaddq_s32(v24, v19), vaddq_s32(v26, v22))));
      if (v15 == a5) {
        goto LABEL_21;
      }
      uint64_t v17 = a5 & 0xFFFFFFE0;
      uint64_t v33 = v17;
      if ((a5 & 0x18) == 0)
      {
        do
        {
LABEL_32:
          v5 += *(char *)(a1 + v33) * *(char *)(a1 + v33);
          ++v33;
        }
        while (a5 != v33);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    int32x4_t v34 = 0uLL;
    int32x4_t v35 = (int32x4_t)v5;
    do
    {
      int16x8_t v36 = vmovl_s8(*(int8x8_t *)(a1 + v17));
      int32x4_t v34 = vmlal_high_s16(v34, v36, v36);
      int32x4_t v35 = vmlal_s16(v35, *(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8);
      v17 += 8;
    }
    while (v16 != v17);
    unsigned int v5 = vaddvq_s32(vaddq_s32(v35, v34));
    uint64_t v33 = a5 & 0xFFFFFFF8;
    if (v16 == a5) {
      goto LABEL_21;
    }
    goto LABEL_32;
  }
  uint64_t v7 = (char *)(a1 + 3);
  do
  {
    if (*a2++)
    {
      v5 += *(v7 - 3) * *(v7 - 3);
      if (a5 != 1)
      {
        v5 += *(v7 - 2) * *(v7 - 2);
        if (a5 != 2)
        {
          v5 += *(v7 - 1) * *(v7 - 1);
          if (a5 != 3)
          {
            v5 += *v7 * *v7;
            if (a5 != 4)
            {
              v5 += v7[1] * v7[1];
              if (a5 != 5)
              {
                v5 += v7[2] * v7[2];
                if (a5 != 6) {
                  v5 += v7[3] * v7[3];
                }
              }
            }
          }
        }
      }
    }
    v7 += a5;
    --v6;
  }
  while (v6);
LABEL_63:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002D0DD4(const __int16 *a1, uint64_t a2, double *a3, int a4, int a5, double a6, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  double v11 = *a3;
  if (!a2)
  {
    int v14 = a5 * a4;
    unint64_t v15 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      int v16 = 0;
      double v17 = 0.0;
      if (v14 <= 0) {
        goto LABEL_29;
      }
LABEL_21:
      uint64_t v47 = v16;
      uint64_t v48 = (v14 + ~v16);
      if (v48)
      {
        uint64_t v49 = v48 + 1;
        uint64_t v50 = (v48 + 1) & 0x1FFFFFFFELL;
        uint64_t v51 = v50 + v47;
        int16x8_t v52 = &a1[v47 + 1];
        uint64_t v53 = v50;
        do
        {
          LOWORD(a8) = *(v52 - 1);
          LOWORD(a9) = *v52;
          a8 = (double)*(unint64_t *)&a8 * (double)*(unint64_t *)&a8;
          a9 = (double)*(unint64_t *)&a9 * (double)*(unint64_t *)&a9;
          double v17 = v17 + a8 + a9;
          v52 += 2;
          v53 -= 2;
        }
        while (v53);
        if (v49 == v50) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v51 = v47;
      }
      int16x8_t v54 = &a1[v51];
      do
      {
        unsigned int v55 = *(unsigned __int16 *)v54++;
        double v17 = v17 + (double)v55 * (double)v55;
        LODWORD(v51) = v51 + 1;
      }
      while (v14 > (int)v51);
LABEL_29:
      double v11 = v11 + v17;
      goto LABEL_30;
    }
    if (v15 >= 0x1C)
    {
      uint64_t v19 = (v15 >> 2) + 1;
      unint64_t v18 = 4 * (v19 & 0x7FFFFFF8);
      double v17 = 0.0;
      uint64_t v20 = v19 & 0x7FFFFFF8;
      int32x4_t v21 = a1;
      do
      {
        int16x8x4_t v57 = vld4q_s16(v21);
        v21 += 32;
        uint32x4_t v22 = vmovl_u16(*(uint16x4_t *)v57.val[0].i8);
        v23.i64[0] = v22.u32[0];
        v23.i64[1] = v22.u32[1];
        float64x2_t v24 = vcvtq_f64_u64(v23);
        v23.i64[0] = v22.u32[2];
        v23.i64[1] = v22.u32[3];
        float64x2_t v25 = vcvtq_f64_u64(v23);
        uint32x4_t v26 = vmovl_high_u16((uint16x8_t)v57.val[0]);
        v23.i64[0] = v26.u32[0];
        v23.i64[1] = v26.u32[1];
        float64x2_t v27 = vcvtq_f64_u64(v23);
        v23.i64[0] = v26.u32[2];
        v23.i64[1] = v26.u32[3];
        float64x2_t v28 = vcvtq_f64_u64(v23);
        uint32x4_t v29 = vmovl_high_u16((uint16x8_t)v57.val[1]);
        v23.i64[0] = v29.u32[2];
        v23.i64[1] = v29.u32[3];
        float64x2_t v30 = vcvtq_f64_u64(v23);
        v23.i64[0] = v29.u32[0];
        v23.i64[1] = v29.u32[1];
        float64x2_t v31 = vcvtq_f64_u64(v23);
        uint32x4_t v32 = vmovl_u16(*(uint16x4_t *)v57.val[1].i8);
        v23.i64[0] = v32.u32[2];
        v23.i64[1] = v32.u32[3];
        float64x2_t v33 = vcvtq_f64_u64(v23);
        v23.i64[0] = v32.u32[0];
        v23.i64[1] = v32.u32[1];
        float64x2_t v34 = vcvtq_f64_u64(v23);
        uint32x4_t v35 = vmovl_high_u16((uint16x8_t)v57.val[2]);
        v23.i64[0] = v35.u32[2];
        v23.i64[1] = v35.u32[3];
        float64x2_t v36 = vcvtq_f64_u64(v23);
        v23.i64[0] = v35.u32[0];
        v23.i64[1] = v35.u32[1];
        float64x2_t v37 = vcvtq_f64_u64(v23);
        uint32x4_t v38 = vmovl_u16(*(uint16x4_t *)v57.val[2].i8);
        v23.i64[0] = v38.u32[2];
        v23.i64[1] = v38.u32[3];
        float64x2_t v39 = vcvtq_f64_u64(v23);
        v23.i64[0] = v38.u32[0];
        v23.i64[1] = v38.u32[1];
        float64x2_t v40 = vcvtq_f64_u64(v23);
        uint32x4_t v41 = vmovl_u16(*(uint16x4_t *)v57.val[3].i8);
        v23.i64[0] = v41.u32[0];
        v23.i64[1] = v41.u32[1];
        float64x2_t v42 = vcvtq_f64_u64(v23);
        v23.i64[0] = v41.u32[2];
        v23.i64[1] = v41.u32[3];
        float64x2_t v43 = vcvtq_f64_u64(v23);
        v57.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v57.val[3]);
        v23.i64[0] = v57.val[0].u32[0];
        v23.i64[1] = v57.val[0].u32[1];
        v57.val[1] = (int16x8_t)vcvtq_f64_u64(v23);
        v23.i64[0] = v57.val[0].u32[2];
        v23.i64[1] = v57.val[0].u32[3];
        v57.val[0] = (int16x8_t)vcvtq_f64_u64(v23);
        float64x2_t v44 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v30, v30), v28, v28), v36, v36), (float64x2_t)v57.val[0], (float64x2_t)v57.val[0]);
        a8 = v44.f64[1];
        float64x2_t v45 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v31, v31), v27, v27), v37, v37), (float64x2_t)v57.val[1], (float64x2_t)v57.val[1]);
        a9 = v45.f64[1];
        a11 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v33, v33), v25, v25), v39, v39), v43, v43);
        a10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34, v34), v24, v24), v40, v40), v42, v42);
        double v17 = v17
            + a10.f64[0]
            + a10.f64[1]
            + a11.f64[0]
            + a11.f64[1]
            + v45.f64[0]
            + v45.f64[1]
            + v44.f64[0]
            + v44.f64[1];
        v20 -= 8;
      }
      while (v20);
      if (v19 == (v19 & 0x7FFFFFF8))
      {
LABEL_20:
        int v16 = (v15 & 0xFFFFFFFC) + 4;
        if (v16 >= v14) {
          goto LABEL_29;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v18 = 0;
      double v17 = 0.0;
    }
    int32x4_t v46 = (unsigned __int16 *)&a1[v18 + 2];
    do
    {
      LOWORD(a8) = *(v46 - 2);
      LOWORD(a9) = *(v46 - 1);
      LOWORD(a10.f64[0]) = *v46;
      a10.f64[0] = (double)*(unint64_t *)&a10.f64[0];
      LOWORD(a11.f64[0]) = v46[1];
      a11.f64[0] = (double)*(unint64_t *)&a11.f64[0];
      a9 = (double)*(unint64_t *)&a9 * (double)*(unint64_t *)&a9;
      a8 = a9
         + (double)*(unint64_t *)&a8 * (double)*(unint64_t *)&a8
         + a10.f64[0] * a10.f64[0]
         + a11.f64[0] * a11.f64[0];
      double v17 = v17 + a8;
      v18 += 4;
      v46 += 4;
    }
    while (v18 <= v15);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      if (*(unsigned char *)(a2 + i))
      {
        for (uint64_t j = 0; j != a5; ++j)
        {
          LOWORD(a7) = a1[j];
          a7 = (double)*(unint64_t *)&a7;
          double v11 = v11 + a7 * a7;
        }
      }
      a1 += a5;
    }
  }
LABEL_30:
  *a3 = v11;
  return 0;
}

uint64_t sub_1002D109C(const __int16 *a1, uint64_t a2, double *a3, int a4, int a5, double a6, int16x4_t a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  double v11 = *a3;
  if (!a2)
  {
    int v14 = a5 * a4;
    unint64_t v15 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      int v16 = 0;
      double v17 = 0.0;
      if (v14 <= 0) {
        goto LABEL_29;
      }
LABEL_21:
      uint64_t v50 = v16;
      uint64_t v51 = (v14 + ~v16);
      if (v51)
      {
        uint64_t v52 = v51 + 1;
        uint64_t v53 = (v51 + 1) & 0x1FFFFFFFELL;
        uint64_t v54 = v53 + v50;
        unsigned int v55 = &a1[v50 + 1];
        uint64_t v56 = v53;
        do
        {
          LOWORD(a8) = *(v55 - 1);
          signed __int32 v57 = vmovl_s16(*(int16x4_t *)&a8).u32[0];
          LOWORD(a9) = *v55;
          signed __int32 v58 = vmovl_s16(*(int16x4_t *)&a9).u32[0];
          a8 = (double)v57 * (double)v57;
          a9 = (double)v58 * (double)v58;
          double v17 = v17 + a8 + a9;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        if (v52 == v53) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v54 = v50;
      }
      uint64_t v59 = &a1[v54];
      do
      {
        int v60 = *v59++;
        double v17 = v17 + (double)v60 * (double)v60;
        LODWORD(v54) = v54 + 1;
      }
      while (v14 > (int)v54);
LABEL_29:
      double v11 = v11 + v17;
      goto LABEL_30;
    }
    if (v15 >= 0x1C)
    {
      uint64_t v19 = (v15 >> 2) + 1;
      unint64_t v18 = 4 * (v19 & 0x7FFFFFF8);
      double v17 = 0.0;
      uint64_t v20 = v19 & 0x7FFFFFF8;
      int32x4_t v21 = a1;
      do
      {
        int16x8x4_t v62 = vld4q_s16(v21);
        v21 += 32;
        int32x4_t v22 = vmovl_s16(*(int16x4_t *)v62.val[0].i8);
        v23.i64[0] = v22.i32[0];
        v23.i64[1] = v22.i32[1];
        float64x2_t v24 = vcvtq_f64_s64(v23);
        v23.i64[0] = v22.i32[2];
        v23.i64[1] = v22.i32[3];
        float64x2_t v25 = vcvtq_f64_s64(v23);
        int32x4_t v26 = vmovl_high_s16(v62.val[0]);
        v23.i64[0] = v26.i32[0];
        v23.i64[1] = v26.i32[1];
        float64x2_t v27 = vcvtq_f64_s64(v23);
        v23.i64[0] = v26.i32[2];
        v23.i64[1] = v26.i32[3];
        float64x2_t v28 = vcvtq_f64_s64(v23);
        int32x4_t v29 = vmovl_high_s16(v62.val[1]);
        v23.i64[0] = v29.i32[2];
        v23.i64[1] = v29.i32[3];
        float64x2_t v30 = vcvtq_f64_s64(v23);
        v23.i64[0] = v29.i32[0];
        v23.i64[1] = v29.i32[1];
        float64x2_t v31 = vcvtq_f64_s64(v23);
        int32x4_t v32 = vmovl_s16(*(int16x4_t *)v62.val[1].i8);
        v23.i64[0] = v32.i32[2];
        v23.i64[1] = v32.i32[3];
        float64x2_t v33 = vcvtq_f64_s64(v23);
        v23.i64[0] = v32.i32[0];
        v23.i64[1] = v32.i32[1];
        float64x2_t v34 = vcvtq_f64_s64(v23);
        int32x4_t v35 = vmovl_high_s16(v62.val[2]);
        v23.i64[0] = v35.i32[2];
        v23.i64[1] = v35.i32[3];
        float64x2_t v36 = vcvtq_f64_s64(v23);
        v23.i64[0] = v35.i32[0];
        v23.i64[1] = v35.i32[1];
        float64x2_t v37 = vcvtq_f64_s64(v23);
        int32x4_t v38 = vmovl_s16(*(int16x4_t *)v62.val[2].i8);
        v23.i64[0] = v38.i32[2];
        v23.i64[1] = v38.i32[3];
        float64x2_t v39 = vcvtq_f64_s64(v23);
        v23.i64[0] = v38.i32[0];
        v23.i64[1] = v38.i32[1];
        float64x2_t v40 = vcvtq_f64_s64(v23);
        int32x4_t v41 = vmovl_s16(*(int16x4_t *)v62.val[3].i8);
        v23.i64[0] = v41.i32[0];
        v23.i64[1] = v41.i32[1];
        float64x2_t v42 = vcvtq_f64_s64(v23);
        v23.i64[0] = v41.i32[2];
        v23.i64[1] = v41.i32[3];
        float64x2_t v43 = vcvtq_f64_s64(v23);
        v62.val[0] = (int16x8_t)vmovl_high_s16(v62.val[3]);
        v23.i64[0] = v62.val[0].i32[0];
        v23.i64[1] = v62.val[0].i32[1];
        v62.val[1] = (int16x8_t)vcvtq_f64_s64(v23);
        v23.i64[0] = v62.val[0].i32[2];
        v23.i64[1] = v62.val[0].i32[3];
        v62.val[0] = (int16x8_t)vcvtq_f64_s64(v23);
        float64x2_t v44 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v30, v30), v28, v28), v36, v36), (float64x2_t)v62.val[0], (float64x2_t)v62.val[0]);
        a8 = v44.f64[1];
        float64x2_t v45 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v31, v31), v27, v27), v37, v37), (float64x2_t)v62.val[1], (float64x2_t)v62.val[1]);
        a9 = v45.f64[1];
        a11 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v33, v33), v25, v25), v39, v39), v43, v43);
        a10 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34, v34), v24, v24), v40, v40), v42, v42);
        double v17 = v17
            + a10.f64[0]
            + a10.f64[1]
            + a11.f64[0]
            + a11.f64[1]
            + v45.f64[0]
            + v45.f64[1]
            + v44.f64[0]
            + v44.f64[1];
        v20 -= 8;
      }
      while (v20);
      if (v19 == (v19 & 0x7FFFFFF8))
      {
LABEL_20:
        int v16 = (v15 & 0xFFFFFFFC) + 4;
        if (v16 >= v14) {
          goto LABEL_29;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v18 = 0;
      double v17 = 0.0;
    }
    int32x4_t v46 = (unsigned __int16 *)&a1[v18 + 2];
    do
    {
      LOWORD(a8) = *(v46 - 2);
      signed __int32 v47 = vmovl_s16(*(int16x4_t *)&a8).u32[0];
      LOWORD(a9) = *(v46 - 1);
      signed __int32 v48 = vmovl_s16(*(int16x4_t *)&a9).u32[0];
      LOWORD(a10.f64[0]) = *v46;
      a10.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a10.f64[0]).i32[0];
      LOWORD(a11.f64[0]) = v46[1];
      *(void *)&a11.f64[0] = vmovl_s16(*(int16x4_t *)&a11.f64[0]).i32[0];
      double v49 = (double)v48 * (double)v48 + (double)v47 * (double)v47;
      a9 = (double)*(uint64_t *)&a11.f64[0];
      a8 = v49 + a10.f64[0] * a10.f64[0] + a9 * a9;
      double v17 = v17 + a8;
      v18 += 4;
      v46 += 4;
    }
    while (v18 <= v15);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      if (*(unsigned char *)(a2 + i))
      {
        for (uint64_t j = 0; j != a5; ++j)
        {
          a7.i16[0] = a1[j];
          *(double *)&a7 = (double)vmovl_s16(a7).i32[0];
          double v11 = v11 + *(double *)&a7 * *(double *)&a7;
        }
      }
      a1 += a5;
    }
  }
LABEL_30:
  *a3 = v11;
  return 0;
}

uint64_t sub_1002D139C(uint64_t a1, uint64_t a2, double *a3, int a4, int a5)
{
  double v5 = *a3;
  if (!a2)
  {
    int v8 = a5 * a4;
    unint64_t v9 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      int v10 = 0;
      double v11 = 0.0;
      if (v8 <= 0) {
        goto LABEL_29;
      }
LABEL_21:
      uint64_t v36 = v10;
      uint64_t v37 = (v8 + ~v10);
      if (v37)
      {
        uint64_t v38 = v37 + 1;
        uint64_t v39 = (v37 + 1) & 0x1FFFFFFFELL;
        uint64_t v40 = v39 + v36;
        int32x4_t v41 = (int *)(a1 + 4 * v36 + 4);
        uint64_t v42 = v39;
        do
        {
          double v11 = v11 + (double)*(v41 - 1) * (double)*(v41 - 1) + (double)*v41 * (double)*v41;
          v41 += 2;
          v42 -= 2;
        }
        while (v42);
        if (v38 == v39) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v40 = v36;
      }
      float64x2_t v43 = (int *)(a1 + 4 * v40);
      do
      {
        int v44 = *v43++;
        double v11 = v11 + (double)v44 * (double)v44;
        LODWORD(v40) = v40 + 1;
      }
      while (v8 > (int)v40);
LABEL_29:
      double v5 = v5 + v11;
      goto LABEL_30;
    }
    if (v9 >= 0x1C)
    {
      uint64_t v13 = (v9 >> 2) + 1;
      unint64_t v12 = 4 * (v13 & 0x7FFFFFF8);
      int v14 = (const float *)(a1 + 64);
      double v11 = 0.0;
      uint64_t v15 = v13 & 0x7FFFFFF8;
      do
      {
        int v16 = v14 - 16;
        float32x4x4_t v46 = vld4q_f32(v16);
        float32x4x4_t v47 = vld4q_f32(v14);
        v17.i64[0] = v46.val[0].i32[0];
        v17.i64[1] = v46.val[0].i32[1];
        float64x2_t v18 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[0].i32[2];
        v17.i64[1] = v46.val[0].i32[3];
        float64x2_t v19 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[0].i32[0];
        v17.i64[1] = v47.val[0].i32[1];
        float64x2_t v20 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[0].i32[2];
        v17.i64[1] = v47.val[0].i32[3];
        float64x2_t v21 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[1].i32[2];
        v17.i64[1] = v46.val[1].i32[3];
        float64x2_t v22 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[1].i32[0];
        v17.i64[1] = v46.val[1].i32[1];
        float64x2_t v23 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[1].i32[2];
        v17.i64[1] = v47.val[1].i32[3];
        float64x2_t v24 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[1].i32[0];
        v17.i64[1] = v47.val[1].i32[1];
        float64x2_t v25 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[2].i32[2];
        v17.i64[1] = v46.val[2].i32[3];
        float64x2_t v26 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[2].i32[0];
        v17.i64[1] = v46.val[2].i32[1];
        float64x2_t v27 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[2].i32[2];
        v17.i64[1] = v47.val[2].i32[3];
        float64x2_t v28 = vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[2].i32[0];
        v17.i64[1] = v47.val[2].i32[1];
        float64x2_t v29 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[3].i32[0];
        v17.i64[1] = v46.val[3].i32[1];
        float64x2_t v30 = vcvtq_f64_s64(v17);
        v17.i64[0] = v46.val[3].i32[2];
        v17.i64[1] = v46.val[3].i32[3];
        v46.val[0] = (float32x4_t)vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[3].i32[0];
        v17.i64[1] = v47.val[3].i32[1];
        v46.val[1] = (float32x4_t)vcvtq_f64_s64(v17);
        v17.i64[0] = v47.val[3].i32[2];
        v17.i64[1] = v47.val[3].i32[3];
        v46.val[2] = (float32x4_t)vcvtq_f64_s64(v17);
        v47.val[0] = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22, v22), v19, v19), v26, v26), (float64x2_t)v46.val[0], (float64x2_t)v46.val[0]);
        v46.val[3] = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23, v23), v18, v18), v27, v27), v30, v30);
        v47.val[2] = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24, v24), v21, v21), v28, v28), (float64x2_t)v46.val[2], (float64x2_t)v46.val[2]);
        v47.val[1] = (float32x4_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25, v25), v20, v20), v29, v29), (float64x2_t)v46.val[1], (float64x2_t)v46.val[1]);
        double v11 = v11
            + *(double *)v46.val[3].i64
            + *(double *)&v46.val[3].i64[1]
            + *(double *)v47.val[0].i64
            + *(double *)&v47.val[0].i64[1]
            + *(double *)v47.val[1].i64
            + *(double *)&v47.val[1].i64[1]
            + *(double *)v47.val[2].i64
            + *(double *)&v47.val[2].i64[1];
        v14 += 32;
        v15 -= 8;
      }
      while (v15);
      if (v13 == (v13 & 0x7FFFFFF8))
      {
LABEL_20:
        int v10 = (v9 & 0xFFFFFFFC) + 4;
        if (v10 >= v8) {
          goto LABEL_29;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v12 = 0;
      double v11 = 0.0;
    }
    float64x2_t v31 = (int *)(a1 + 4 * v12 + 8);
    do
    {
      double v32 = (double)*(v31 - 2);
      double v33 = (double)*(v31 - 1);
      int v34 = *v31;
      int v35 = v31[1];
      v31 += 4;
      double v11 = v11 + v33 * v33 + v32 * v32 + (double)v34 * (double)v34 + (double)v35 * (double)v35;
      v12 += 4;
    }
    while (v12 <= v9);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      if (*(unsigned char *)(a2 + i))
      {
        uint64_t v7 = 0;
        do
        {
          double v5 = v5 + (double)*(int *)(a1 + v7) * (double)*(int *)(a1 + v7);
          v7 += 4;
        }
        while (4 * a5 != v7);
      }
      a1 += 4 * a5;
    }
  }
LABEL_30:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002D165C(uint64_t a1, uint64_t a2, double *a3, int a4, int a5)
{
  double v5 = *a3;
  if (!a2)
  {
    int v8 = a5 * a4;
    unint64_t v9 = (a5 * a4 - 4);
    if (a5 * a4 < 4)
    {
      int v10 = 0;
      double v11 = 0.0;
      if (v8 <= 0) {
        goto LABEL_29;
      }
LABEL_21:
      uint64_t v24 = v10;
      uint64_t v25 = (v8 + ~v10);
      if (v25)
      {
        uint64_t v26 = v25 + 1;
        uint64_t v27 = (v25 + 1) & 0x1FFFFFFFELL;
        uint64_t v28 = v27 + v24;
        float64x2_t v29 = (double *)(a1 + 8 * v24 + 8);
        uint64_t v30 = v27;
        do
        {
          double v11 = v11 + *(v29 - 1) * *(v29 - 1) + *v29 * *v29;
          v29 += 2;
          v30 -= 2;
        }
        while (v30);
        if (v26 == v27) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v28 = v24;
      }
      float64x2_t v31 = (double *)(a1 + 8 * v28);
      do
      {
        double v32 = *v31++;
        double v11 = v11 + v32 * v32;
        LODWORD(v28) = v28 + 1;
      }
      while (v8 > (int)v28);
LABEL_29:
      double v5 = v5 + v11;
      goto LABEL_30;
    }
    if (v9 >= 0xC)
    {
      uint64_t v13 = (v9 >> 2) + 1;
      unint64_t v12 = 4 * (v13 & 0x7FFFFFFC);
      int v14 = (const double *)(a1 + 64);
      double v11 = 0.0;
      uint64_t v15 = v13 & 0x7FFFFFFC;
      do
      {
        int v16 = v14 - 8;
        float64x2x4_t v34 = vld4q_f64(v16);
        float64x2x4_t v35 = vld4q_f64(v14);
        float64x2_t v17 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v34.val[1], v34.val[1]), v34.val[0], v34.val[0]), v34.val[2], v34.val[2]), v34.val[3], v34.val[3]);
        float64x2_t v18 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v35.val[1], v35.val[1]), v35.val[0], v35.val[0]), v35.val[2], v35.val[2]), v35.val[3], v35.val[3]);
        double v11 = v11 + v17.f64[0] + v17.f64[1] + v18.f64[0] + v18.f64[1];
        v14 += 16;
        v15 -= 4;
      }
      while (v15);
      if (v13 == (v13 & 0x7FFFFFFC))
      {
LABEL_20:
        int v10 = (v9 & 0xFFFFFFFC) + 4;
        if (v10 >= v8) {
          goto LABEL_29;
        }
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v12 = 0;
      double v11 = 0.0;
    }
    float64x2_t v19 = (double *)(a1 + 8 * v12 + 16);
    do
    {
      double v20 = *(v19 - 2);
      double v21 = *(v19 - 1);
      double v22 = *v19;
      double v23 = v19[1];
      v19 += 4;
      double v11 = v11 + v21 * v21 + v20 * v20 + v22 * v22 + v23 * v23;
      v12 += 4;
    }
    while (v12 <= v9);
    goto LABEL_20;
  }
  if (a4 >= 1 && a5 >= 1)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      if (*(unsigned char *)(a2 + i))
      {
        uint64_t v7 = 0;
        do
        {
          double v5 = v5 + *(double *)(a1 + v7) * *(double *)(a1 + v7);
          v7 += 8;
        }
        while (8 * a5 != v7);
      }
      a1 += 8 * a5;
    }
  }
LABEL_30:
  *a3 = v5;
  return 0;
}

uint64_t sub_1002D1828(uint64_t a1, int a2)
{
  sub_1002D6AE8(v21, &off_1004964F0);
  unint64_t v4 = (a2 - 16);
  if (a2 >= 16)
  {
    unint64_t v6 = 0;
    int32x4_t v5 = 0uLL;
    do
    {
      int32x4_t v5 = (int32x4_t)vpadalq_u16((uint32x4_t)v5, vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(a1 + v6))));
      v6 += 16;
    }
    while (v6 <= v4);
    LODWORD(v4) = (v4 & 0xFFFFFFF0) + 16;
  }
  else
  {
    LODWORD(v4) = 0;
    int32x4_t v5 = 0uLL;
  }
  uint64_t v7 = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v5, v5), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL)).u32[0];
  if ((int)v4 <= a2 - 4)
  {
    unint64_t v4 = v4;
    do
    {
      uint64_t v7 = v7
         + byte_100405FF0[*(unsigned __int8 *)(a1 + v4)]
         + byte_100405FF0[*(unsigned __int8 *)(a1 + (v4 & 0xFFFFFFFE) + 1)]
         + byte_100405FF0[*(unsigned __int8 *)(a1 + (v4 & 0xFFFFFFFD) + 2)]
         + byte_100405FF0[*(unsigned __int8 *)(a1 + (v4 & 0xFFFFFFFC) + 3)];
      v4 += 4;
    }
    while (a2 - 4 >= (int)v4);
  }
  if ((int)v4 < a2)
  {
    uint64_t v8 = v4;
    uint64_t v9 = (~v4 + a2);
    if (v9)
    {
      int v10 = 0;
      uint64_t v11 = v9 + 1;
      uint64_t v12 = (v9 + 1) & 0x1FFFFFFFELL;
      uint64_t v13 = v12 + v8;
      int v14 = (unsigned __int8 *)(v8 + a1 + 1);
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *(v14 - 1);
        int v17 = *v14;
        v14 += 2;
        LODWORD(v7) = v7 + byte_100405FF0[v16];
        v10 += byte_100405FF0[v17];
        v15 -= 2;
      }
      while (v15);
      uint64_t v7 = (v10 + v7);
      if (v11 == v12) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v13 = v8;
    }
    float64x2_t v18 = (unsigned __int8 *)(a1 + v13);
    do
    {
      int v19 = *v18++;
      uint64_t v7 = v7 + byte_100405FF0[v19];
      LODWORD(v13) = v13 + 1;
    }
    while ((int)v13 < a2);
  }
LABEL_18:
  if (v22) {
    sub_1002D6888(v21);
  }
  return v7;
}

uint64_t sub_1002D19D8(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_10020FDF8((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
  *v4++ = 1;
  *a1 = v4;
  a1[1] = a2;
  *((unsigned char *)v4 + a2) = 0;
  return *a1;
}

void sub_1002D1A1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(v1 - 4), 0xFFFFFFFF) == 1) {
      j__free((void *)(v1 - 4));
    }
  }
}

uint64_t sub_1002D1A44()
{
  if (!qword_1004E0C78) {
    operator new();
  }
  return qword_1004E0C78;
}

void sub_1002D1B1C()
{
}

void sub_1002D1B60()
{
}

void sub_1002D1C08()
{
}

uint64_t sub_1002D1C2C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6)
{
  *(void *)a1 = off_100496520;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 32) = *a3;
  *(void *)(a1 + 40) = v8;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 - 4), 1u);
  }
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(void *)(a1 + 56) = v10;
  if (v9) {
    atomic_fetch_add((atomic_uint *volatile)(v9 - 4), 1u);
  }
  uint64_t v11 = *a5;
  uint64_t v12 = a5[1];
  *(void *)(a1 + 64) = *a5;
  *(void *)(a1 + 72) = v12;
  if (v11) {
    atomic_fetch_add((atomic_uint *volatile)(v11 - 4), 1u);
  }
  *(_DWORD *)(a1 + 80) = a6;
  sub_1002D1D38((uint64_t *)a1);
  return a1;
}

void sub_1002D1CF0(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;
  sub_1002D1A1C(v6);
  sub_1002D1A1C(v4);
  sub_1002D1A1C(v3);
  sub_1002D1A1C(v2);
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002D1D38(uint64_t *a1)
{
  if (a1[7])
  {
    sub_1002D1F78(&v6, "%s:%d: error: (%d) %s in function %s\n");
    if (&v6 != a1 + 1)
    {
      sub_1002D1A1C(a1 + 1);
      uint64_t v2 = v6;
      if (v6)
      {
        atomic_fetch_add((atomic_uint *volatile)(v6 - 4), 1u);
        uint64_t v2 = v6;
      }
      uint64_t v3 = v7;
      a1[1] = v2;
      a1[2] = v3;
    }
  }
  else
  {
    sub_1002D1F78(&v6, "%s:%d: error: (%d) %s\n");
    if (&v6 != a1 + 1)
    {
      sub_1002D1A1C(a1 + 1);
      uint64_t v4 = v6;
      if (v6)
      {
        atomic_fetch_add((atomic_uint *volatile)(v6 - 4), 1u);
        uint64_t v4 = v6;
      }
      uint64_t v5 = v7;
      a1[1] = v4;
      a1[2] = v5;
    }
  }
  sub_1002D1A1C(&v6);
}

void sub_1002D1E74(_Unwind_Exception *a1)
{
  sub_1002D1A1C((uint64_t *)(v1 - 32));
  _Unwind_Resume(a1);
}

void sub_1002D1EA8(uint64_t a1)
{
  *(void *)a1 = off_100496520;
  sub_1002D1A1C((uint64_t *)(a1 + 64));
  sub_1002D1A1C((uint64_t *)(a1 + 48));
  sub_1002D1A1C((uint64_t *)(a1 + 32));
  sub_1002D1A1C((uint64_t *)(a1 + 8));

  std::exception::~exception((std::exception *)a1);
}

void sub_1002D1F28(uint64_t a1)
{
  sub_1002D1EA8(a1);

  operator delete();
}

const char *sub_1002D1F60(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return *(const char **)(a1 + 8);
  }
  else {
    return "";
  }
}

uint64_t *sub_1002D1F78@<X0>(uint64_t *__return_ptr a1@<X8>, char *__format@<X0>, ...)
{
  va_start(va, __format);
  int v4 = 1024;
  int v17 = v19;
  unint64_t v18 = 1024;
  va_copy(v16, va);
  uint64_t result = (uint64_t *)vsnprintf(v19, 0x400uLL, __format, va);
  if ((result & 0x80000000) != 0)
  {
LABEL_26:
    v15[0] = 0;
    v15[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v15, 44), "len >= 0 && \"Check format string for errors\"", 44);
    sub_1002D2278(-215, v15, "format", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 809);
  }
  uint64_t v6 = 0x40000000000;
  while ((int)result >= v4)
  {
    unint64_t v7 = (int)result + 1;
    unint64_t v8 = v18;
    if (v18 >= v7)
    {
      unint64_t v18 = (int)result + 1;
    }
    else
    {
      uint64_t v9 = v17;
      if (v7 >= 0x401) {
        operator new[]();
      }
      int v17 = v19;
      unint64_t v18 = (int)result + 1;
      if (v8 && v19 != v9)
      {
        for (uint64_t i = 0; i != v8; ++i)
          v17[i] = v9[i];
      }
      do
        v17[v8++] = 0;
      while (v7 != v8);
      if (v9 != v19)
      {
        if (v9) {
          operator delete[]();
        }
      }
    }
    va_copy(v16, va);
    int v4 = v18;
    uint64_t v6 = v18 << 32;
    uint64_t result = (uint64_t *)vsnprintf(v17, (int)v18, __format, va);
    if ((result & 0x80000000) != 0) {
      goto LABEL_26;
    }
  }
  v17[(v6 - 0x100000000) >> 32] = 0;
  uint64_t v11 = v17;
  *a1 = 0;
  a1[1] = 0;
  if (result && v11)
  {
    size_t v12 = (int)result;
    uint64_t v13 = (void *)sub_1002D19D8(a1, (int)result);
    uint64_t result = (uint64_t *)memcpy(v13, v11, v12);
    uint64_t v11 = v17;
  }
  if (v11 != v19 && v11 != 0) {
    operator delete[]();
  }
  return result;
}

void sub_1002D21A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != v12)
  {
    if (a12) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D21FC(int a1)
{
  return *((unsigned __int8 *)off_1004D2F88 + a1);
}

double sub_1002D2210()
{
  double result = *(double *)&qword_1004E0C80;
  if (*(double *)&qword_1004E0C80 == 0.0)
  {
    mach_timebase_info(&info);
    LODWORD(v2) = info.numer;
    LODWORD(v1) = info.denom;
    double result = (double)v1 * 1000000000.0 / (double)v2;
    qword_1004E0C80 = *(void *)&result;
  }
  return result;
}

uint64_t sub_1002D2270(char *a1, int a2, const char *a3, va_list a4)
{
  return vsnprintf(a1, a2, a3, a4);
}

void sub_1002D2278(int a1, uint64_t *a2, char *__s, char *a4, int a5)
{
  v17[0] = 0;
  v17[1] = 0;
  if (__s)
  {
    size_t v10 = strlen(__s);
    if (v10)
    {
      size_t v11 = v10;
      uint64_t v12 = (void *)sub_1002D19D8(v17, v10);
      memcpy(v12, __s, v11);
    }
  }
  v16[0] = 0;
  v16[1] = 0;
  if (a4)
  {
    size_t v13 = strlen(a4);
    if (v13)
    {
      size_t v14 = v13;
      uint64_t v15 = (void *)sub_1002D19D8(v16, v13);
      memcpy(v15, a4, v14);
    }
  }
  sub_1002D1C2C((uint64_t)v18, a1, a2, v17, v16, a5);
  sub_1002D239C((uint64_t)v18);
}

void sub_1002D2330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D236C(char *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return vsnprintf(a1, a2, a3, &a9);
}

void sub_1002D239C(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v2 = *(unsigned int *)(v1 + 24);
  if (off_1004E0DB8)
  {
    if (*(void *)(v1 + 48)) {
      uint64_t v9 = *(const char **)(v1 + 48);
    }
    else {
      uint64_t v9 = "";
    }
    if (*(void *)(v1 + 32)) {
      size_t v10 = *(const char **)(v1 + 32);
    }
    else {
      size_t v10 = "";
    }
    if (*(void *)(v1 + 64)) {
      size_t v11 = *(const char **)(v1 + 64);
    }
    else {
      size_t v11 = "";
    }
    off_1004E0DB8(v2, v9, v10, v11, *(unsigned int *)(v1 + 80), qword_1004E0DC0);
    if (!byte_1004E0DA8)
    {
LABEL_15:
      exception = __cxa_allocate_exception(0x58uLL);
      sub_1002D2C90((uint64_t)exception, v1);
    }
  }
  else
  {
    char v3 = sub_1002D252C(v2);
    sub_1002D236C(v13, 4096, "OpenCV Error: %s (%s) in %s, file %s, line %d", v4, v5, v6, v7, v8, v3);
    fprintf(__stderrp, "%s\n", v13);
    fflush(__stderrp);
    if (!byte_1004E0DA8) {
      goto LABEL_15;
    }
  }
  MEMORY[0] = 0;
  goto LABEL_15;
}

void sub_1002D2518(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const char *sub_1002D252C(int a1)
{
  uint64_t v1 = "No Error";
  switch(a1)
  {
    case -219:
      uint64_t v1 = "OpenGL API call";
      goto LABEL_3;
    case -218:
      double result = "No OpenGL support";
      break;
    case -217:
      double result = "Gpu API call";
      break;
    case -216:
      double result = "No CUDA support";
      break;
    case -215:
      double result = "Assertion failed";
      break;
    case -214:
      double result = "Memory block has been corrupted";
      break;
    case -213:
      double result = "The function/feature is not implemented";
      break;
    case -212:
      double result = "Parsing error";
      break;
    case -211:
      double result = "One of arguments' values is out of range";
      break;
    case -210:
      double result = "Unsupported format or combination of formats";
      break;
    case -209:
      double result = "Sizes of input arguments do not match";
      break;
    case -208:
      double result = "Bad type of mask argument";
      break;
    case -207:
      double result = "Bad parameter of type CvPoint";
      break;
    case -206:
      double result = "Bad flag (parameter or structure field)";
      break;
    case -205:
      double result = "Formats of input arguments do not match";
      break;
    case -204:
      double result = "Requested object was not found";
      break;
    case -203:
      double result = "Inplace operation is not supported";
      break;
    case -202:
      double result = "Division by zero occurred";
      break;
    case -201:
      double result = "Incorrect size of input array";
      break;
    case -27:
      double result = "Null pointer";
      break;
    case -24:
      double result = "Input COI is not supported";
      break;
    case -17:
      double result = "Input image depth is not supported by function";
      break;
    case -15:
      double result = "Bad number of channels";
      break;
    case -13:
      double result = "Image step is wrong";
      break;
    case -8:
      double result = "Autotrace call";
      break;
    case -7:
      double result = "Iterations do not converge";
      break;
    case -5:
      double result = "Bad argument";
      break;
    case -4:
      double result = "Insufficient memory";
      break;
    case -3:
      double result = "Internal error";
      break;
    case -2:
      double result = "Unspecified error";
      break;
    case -1:
      double result = "Backtrace";
      break;
    case 0:
LABEL_3:
      double result = v1;
      break;
    default:
      char v3 = "error";
      if (a1 >= 0) {
        char v3 = "status";
      }
      sprintf(byte_1004E0C88, "Unknown %s code %d", v3, a1);
      double result = byte_1004E0C88;
      break;
  }
  return result;
}

uint64_t sub_1002D2C90(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)double result = off_100496520;
  *(void *)(result + 8) = v2;
  *(void *)(result + 16) = v3;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 - 4), 1u);
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(result + 32) = v4;
  *(void *)(result + 40) = v5;
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 - 4), 1u);
  }
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(result + 48) = v6;
  *(void *)(result + 56) = v7;
  if (v6) {
    atomic_fetch_add((atomic_uint *volatile)(v6 - 4), 1u);
  }
  uint64_t v8 = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(result + 64) = v8;
  *(void *)(result + 72) = v9;
  if (v8) {
    atomic_fetch_add((atomic_uint *volatile)(v8 - 4), 1u);
  }
  *(_DWORD *)(result + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

void sub_1002D2D20(int a1, char *__s, char *a3, char *a4, int a5)
{
  v21[0] = 0;
  v21[1] = 0;
  if (a3)
  {
    size_t v10 = strlen(a3);
    if (v10)
    {
      size_t v11 = v10;
      uint64_t v12 = (void *)sub_1002D19D8(v21, v10);
      memcpy(v12, a3, v11);
    }
  }
  v20[0] = 0;
  v20[1] = 0;
  if (__s)
  {
    size_t v13 = strlen(__s);
    if (v13)
    {
      size_t v14 = v13;
      uint64_t v15 = (void *)sub_1002D19D8(v20, v13);
      memcpy(v15, __s, v14);
    }
  }
  v19[0] = 0;
  v19[1] = 0;
  if (a4)
  {
    size_t v16 = strlen(a4);
    if (v16)
    {
      size_t v17 = v16;
      unint64_t v18 = (void *)sub_1002D19D8(v19, v16);
      memcpy(v18, a4, v17);
    }
  }
  sub_1002D1C2C((uint64_t)v22, a1, v21, v20, v19, a5);
  sub_1002D239C((uint64_t)v22);
}

void sub_1002D2E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002D1A1C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

pthread_mutex_t **sub_1002D2E58(pthread_mutex_t **result)
{
  if (atomic_fetch_add((atomic_uint *volatile)&(*result)[1], 0xFFFFFFFF) == 1 && *result)
  {
    pthread_mutex_destroy(*result);
    operator delete();
  }
  *double result = 0;
  return result;
}

uint64_t sub_1002D2EC4(pthread_mutex_t **a1)
{
  return pthread_mutex_lock(*a1);
}

uint64_t sub_1002D2ECC(pthread_mutex_t **a1)
{
  return pthread_mutex_unlock(*a1);
}

pthread_key_t *sub_1002D2ED4(pthread_key_t *a1)
{
  if (pthread_key_delete(*a1))
  {
    v3[0] = 0;
    v3[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v3, 31), "pthread_key_delete(tlsKey) == 0", 31);
    sub_1002D2278(-215, v3, "~TlsAbstraction", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1305);
  }
  return a1;
}

uint64_t sub_1002D2F5C(uint64_t a1)
{
  *(void *)a1 = off_100496560;
  uint64_t v2 = (void *)sub_1002D2FA8();
  *(_DWORD *)(a1 + 8) = sub_1002D3070(v2);
  return a1;
}

uint64_t sub_1002D2FA8()
{
  if (!qword_1004E0D90)
  {
    uint64_t v0 = (pthread_mutex_t **)sub_1002D1A44();
    pthread_mutex_lock(*v0);
    if (!qword_1004E0D90) {
      operator new();
    }
    pthread_mutex_unlock(*v0);
  }
  return qword_1004E0D90;
}

void sub_1002D302C()
{
}

void sub_1002D3058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D4120((pthread_mutex_t ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D3070(void *a1)
{
  uint64_t v3 = (pthread_mutex_t **)(a1 + 1);
  uint64_t v2 = (pthread_mutex_t *)a1[1];
  void v26[2] = (uint64_t)v3;
  pthread_mutex_lock(v2);
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = a1[2];
  uint64_t v6 = (char *)a1[4];
  if (v5 != (v6 - v4) >> 2)
  {
    v26[0] = 0;
    v26[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v26, 31), "tlsSlotsSize == tlsSlots.size()", 31);
    sub_1002D2278(-215, v26, "reserveSlot", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1380);
  }
  if (v5)
  {
    uint64_t v7 = 0;
    while (*(_DWORD *)&v4[4 * v7])
    {
      if (v5 == ++v7) {
        goto LABEL_6;
      }
    }
    *(_DWORD *)&v4[4 * v7] = 1;
  }
  else
  {
LABEL_6:
    unint64_t v8 = a1[5];
    if ((unint64_t)v6 >= v8)
    {
      unint64_t v10 = v5 + 1;
      if ((unint64_t)(v5 + 1) >> 62) {
        sub_10000B98C();
      }
      uint64_t v11 = v8 - (void)v4;
      if (v11 >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 62) {
          sub_10000BA6C();
        }
        size_t v13 = operator new(4 * v12);
      }
      else
      {
        size_t v13 = 0;
      }
      size_t v14 = &v13[4 * v5];
      uint64_t v15 = &v13[4 * v12];
      *size_t v14 = 1;
      uint64_t v9 = v14 + 1;
      if (v6 != v4)
      {
        unint64_t v16 = v6 - v4 - 4;
        if (v16 < 0x2C) {
          goto LABEL_35;
        }
        if ((unint64_t)(v6 - v13 - 4 * v5) < 0x20) {
          goto LABEL_35;
        }
        uint64_t v17 = (v16 >> 2) + 1;
        uint64_t v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
        int v19 = &v6[-v18];
        size_t v14 = (_DWORD *)((char *)v14 - v18);
        double v20 = &v13[4 * v5 - 16];
        double v21 = v6 - 16;
        uint64_t v22 = v17 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *double v20 = v23;
          v20 -= 2;
          v21 -= 32;
          v22 -= 8;
        }
        while (v22);
        uint64_t v6 = v19;
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_35:
          do
          {
            int v24 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *--size_t v14 = v24;
          }
          while (v6 != v4);
        }
      }
      a1[3] = v14;
      a1[4] = v9;
      a1[5] = v15;
      if (v4)
      {
        operator delete(v4);
        uint64_t v5 = a1[2];
      }
    }
    else
    {
      *(_DWORD *)uint64_t v6 = 1;
      uint64_t v9 = v6 + 4;
    }
    a1[4] = v9;
    a1[2] = v5 + 1;
    uint64_t v7 = v5;
  }
  pthread_mutex_unlock(*v3);
  return v7;
}

void sub_1002D3288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002D4120((pthread_mutex_t ***)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D32B8(uint64_t result)
{
  *(void *)double result = off_100496560;
  if (*(_DWORD *)(result + 8) != -1)
  {
    v2[0] = 0;
    v2[1] = 0;
    uint64_t v1 = sub_1002D19D8(v2, 10);
    *(_WORD *)(v1 + 8) = 12589;
    *(void *)uint64_t v1 = *(void *)"key_ == -1";
    sub_1002D2278(-215, v2, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
  }
  return result;
}

uint64_t sub_1002D3354(uint64_t a1, char **a2)
{
  uint64_t v4 = (void *)sub_1002D2FA8();
  unint64_t v5 = *(int *)(a1 + 8);

  return sub_1002D3394(v4, v5, a2);
}

uint64_t sub_1002D3394(void *a1, unint64_t a2, char **a3)
{
  uint64_t v7 = (pthread_mutex_t **)(a1 + 1);
  uint64_t v6 = (pthread_mutex_t *)a1[1];
  uint64_t v38 = v7;
  pthread_mutex_lock(v6);
  unint64_t v8 = (unint64_t)v7[1];
  if (v8 != ((char *)v7[3] - (char *)v7[2]) >> 2)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&v36, 31), "tlsSlotsSize == tlsSlots.size()", 31);
    sub_1002D2278(-215, &v36, "gather", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1439);
  }
  if (v8 <= a2)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&v36, 22), "tlsSlotsSize > slotIdx", 22);
    sub_1002D2278(-215, &v36, "gather", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1440);
  }
  uint64_t v10 = a1[6];
  uint64_t v9 = a1[7];
  if (v9 != v10)
  {
    uint64_t v11 = 0;
    while (1)
    {
      size_t v13 = *(uint64_t **)(v10 + 8 * v11);
      if (!v13) {
        goto LABEL_7;
      }
      uint64_t v14 = *v13;
      if (a2 >= (v13[1] - *v13) >> 3) {
        goto LABEL_7;
      }
      uint64_t v15 = *(void *)(v14 + 8 * a2);
      if (!v15) {
        goto LABEL_7;
      }
      uint64_t v17 = a3[1];
      unint64_t v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16) {
        break;
      }
      *(void *)uint64_t v17 = v15;
      uint64_t v12 = (uint64_t)(v17 + 8);
LABEL_6:
      a3[1] = (char *)v12;
      uint64_t v10 = a1[6];
      uint64_t v9 = a1[7];
LABEL_7:
      if (++v11 >= (unint64_t)((v9 - v10) >> 3))
      {
        uint64_t v7 = v38;
        return pthread_mutex_unlock(*v7);
      }
    }
    uint64_t v18 = *a3;
    uint64_t v19 = v17 - *a3;
    uint64_t v20 = v19 >> 3;
    unint64_t v21 = (v19 >> 3) + 1;
    if (v21 >> 61) {
      sub_10000B98C();
    }
    uint64_t v22 = v16 - (void)v18;
    if (v22 >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        sub_10000BA6C();
      }
      int v24 = operator new(8 * v23);
      uint64_t v25 = &v24[8 * v20];
      *(void *)uint64_t v25 = *(void *)(v14 + 8 * a2);
      uint64_t v12 = (uint64_t)(v25 + 8);
      if (v17 == v18) {
        goto LABEL_30;
      }
    }
    else
    {
      int v24 = 0;
      uint64_t v25 = (char *)(8 * v20);
      *(void *)(8 * v20) = v15;
      uint64_t v12 = 8 * v20 + 8;
      if (v17 == v18)
      {
LABEL_30:
        *a3 = v25;
        a3[1] = (char *)v12;
        a3[2] = &v24[8 * v23];
        if (v17) {
          operator delete(v17);
        }
        goto LABEL_6;
      }
    }
    unint64_t v26 = v17 - 8 - v18;
    if (v26 < 0x58) {
      goto LABEL_40;
    }
    if ((unint64_t)(v17 - &v24[v19]) < 0x20) {
      goto LABEL_40;
    }
    uint64_t v27 = (v26 >> 3) + 1;
    uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    float64x2_t v29 = &v17[-v28];
    v25 -= v28;
    uint64_t v30 = &v24[8 * v20 - 16];
    float64x2_t v31 = (long long *)(v17 - 16);
    uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *v31;
      *(v30 - 1) = *(v31 - 1);
      *uint64_t v30 = v33;
      v30 -= 2;
      v31 -= 2;
      v32 -= 4;
    }
    while (v32);
    uint64_t v17 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_40:
      do
      {
        uint64_t v34 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v25 - 1) = v34;
        v25 -= 8;
      }
      while (v17 != v18);
    }
    uint64_t v17 = *a3;
    goto LABEL_30;
  }
  return pthread_mutex_unlock(*v7);
}

void sub_1002D3648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002D4120((pthread_mutex_t ***)va1);
  _Unwind_Resume(a1);
}

void sub_1002D3694(int *a1)
{
  uint64_t v5 = (char *)operator new(0x100uLL);
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 256;
  uint64_t v2 = (void *)sub_1002D2FA8();
  sub_1002D3774(v2, a1[2], &v5, 0);
  a1[2] = -1;
  uint64_t v3 = v6;
  if (v6 != v5)
  {
    unint64_t v4 = 0;
    uint64_t v3 = v5;
    do
    {
      (*(void (**)(int *, void))(*(void *)a1 + 24))(a1, *(void *)&v3[8 * v4++]);
      uint64_t v3 = v5;
    }
    while (v4 < (v6 - v5) >> 3);
  }
  if (v3)
  {
    uint64_t v6 = v3;
    operator delete(v3);
  }
}

void sub_1002D3754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D3774(void *a1, unint64_t a2, char **a3, char a4)
{
  uint64_t v7 = a1;
  uint64_t v9 = (pthread_mutex_t **)(a1 + 1);
  unint64_t v8 = (pthread_mutex_t *)a1[1];
  uint64_t v42 = v9;
  pthread_mutex_lock(v8);
  unint64_t v10 = (unint64_t)v9[1];
  if (v10 != ((char *)v9[3] - (char *)v9[2]) >> 2)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    qmemcpy((void *)sub_1002D19D8(&v40, 31), "tlsSlotsSize == tlsSlots.size()", 31);
    sub_1002D2278(-215, &v40, "releaseSlot", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1401);
  }
  char v38 = a4;
  if (v10 <= a2)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    qmemcpy((void *)sub_1002D19D8(&v40, 22), "tlsSlotsSize > slotIdx", 22);
    sub_1002D2278(-215, &v40, "releaseSlot", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1402);
  }
  uint64_t v12 = v7[6];
  uint64_t v11 = v7[7];
  if (v11 != v12)
  {
    uint64_t v13 = 0;
    uint64_t v39 = v7;
    while (1)
    {
      uint64_t v15 = *(uint64_t **)(v12 + 8 * v13);
      if (!v15) {
        goto LABEL_7;
      }
      uint64_t v16 = *v15;
      if (a2 >= (v15[1] - *v15) >> 3) {
        goto LABEL_7;
      }
      uint64_t v17 = *(void *)(v16 + 8 * a2);
      if (!v17) {
        goto LABEL_7;
      }
      uint64_t v19 = a3[1];
      unint64_t v18 = (unint64_t)a3[2];
      if ((unint64_t)v19 >= v18) {
        break;
      }
      *(void *)uint64_t v19 = v17;
      uint64_t v14 = (uint64_t)(v19 + 8);
LABEL_6:
      a3[1] = (char *)v14;
      *(void *)(*v15 + 8 * a2) = 0;
      uint64_t v12 = v7[6];
      uint64_t v11 = v7[7];
LABEL_7:
      if (++v13 >= (unint64_t)((v11 - v12) >> 3)) {
        goto LABEL_32;
      }
    }
    uint64_t v20 = *a3;
    uint64_t v21 = v19 - *a3;
    uint64_t v22 = v21 >> 3;
    unint64_t v23 = (v21 >> 3) + 1;
    if (v23 >> 61) {
      sub_10000B98C();
    }
    uint64_t v24 = v18 - (void)v20;
    if (v24 >> 2 > v23) {
      unint64_t v23 = v24 >> 2;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 >> 61) {
        sub_10000BA6C();
      }
      unint64_t v26 = operator new(8 * v25);
      uint64_t v27 = &v26[8 * v22];
      *(void *)uint64_t v27 = *(void *)(v16 + 8 * a2);
      uint64_t v14 = (uint64_t)(v27 + 8);
      if (v19 == v20) {
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v27 = (char *)(8 * v22);
      *(void *)(8 * v22) = v17;
      uint64_t v14 = 8 * v22 + 8;
      if (v19 == v20)
      {
LABEL_30:
        *a3 = v27;
        a3[1] = (char *)v14;
        a3[2] = &v26[8 * v25];
        uint64_t v7 = v39;
        if (v19) {
          operator delete(v19);
        }
        goto LABEL_6;
      }
    }
    unint64_t v28 = v19 - 8 - v20;
    if (v28 < 0x58) {
      goto LABEL_41;
    }
    if ((unint64_t)(v19 - &v26[v21]) < 0x20) {
      goto LABEL_41;
    }
    uint64_t v29 = (v28 >> 3) + 1;
    uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    float64x2_t v31 = &v19[-v30];
    v27 -= v30;
    uint64_t v32 = &v26[8 * v22 - 16];
    long long v33 = (long long *)(v19 - 16);
    uint64_t v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v35 = *v33;
      *(v32 - 1) = *(v33 - 1);
      *uint64_t v32 = v35;
      v32 -= 2;
      v33 -= 2;
      v34 -= 4;
    }
    while (v34);
    uint64_t v19 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        uint64_t v36 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v27 - 1) = v36;
        v27 -= 8;
      }
      while (v19 != v20);
    }
    uint64_t v19 = *a3;
    goto LABEL_30;
  }
LABEL_32:
  if ((v38 & 1) == 0) {
    *(_DWORD *)(v7[3] + 4 * a2) = 0;
  }
  return pthread_mutex_unlock(*v42);
}

void sub_1002D3A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002D4120((pthread_mutex_t ***)va1);
  _Unwind_Resume(a1);
}

void *sub_1002D3A9C(_DWORD *a1)
{
  if (a1[2] == -1)
  {
    v6[0] = 0;
    v6[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v6, 63), "key_ != -1 && \"Can't fetch data from terminated TLS container.\"", 63);
    sub_1002D2278(-215, v6, "getData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1532);
  }
  uint64_t v2 = (pthread_key_t *)sub_1002D2FA8();
  double result = sub_1002D3BA4(v2, (int)a1[2]);
  if (!result)
  {
    uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
    uint64_t v5 = (pthread_key_t *)sub_1002D2FA8();
    sub_1002D3C70(v5, (int)a1[2], v4);
    return (void *)v4;
  }
  return result;
}

void sub_1002D3B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1002D3BA4(pthread_key_t *a1, unint64_t a2)
{
  if (a1[2] <= a2)
  {
    v4[0] = 0;
    v4[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v4, 22), "tlsSlotsSize > slotIdx", 22);
    sub_1002D2278(-215, v4, "getData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1425);
  }
  double result = pthread_getspecific(*a1);
  if (result)
  {
    if (a2 >= (uint64_t)(result[1] - *result) >> 3) {
      return 0;
    }
    else {
      return *(void **)(*result + 8 * a2);
    }
  }
  return result;
}

void sub_1002D3C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t *sub_1002D3C70(pthread_key_t *a1, unint64_t a2, uint64_t a3)
{
  if (a1[2] <= a2)
  {
    v13[0] = 0;
    v13[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v13, 22), "tlsSlotsSize > slotIdx", 22);
    sub_1002D2278(-215, v13, "setData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1457);
  }
  double result = (unint64_t *)pthread_getspecific(*a1);
  uint64_t v7 = result;
  if (!result) {
    operator new();
  }
  unint64_t v8 = *result;
  if (a2 >= (uint64_t)(result[1] - *result) >> 3)
  {
    unint64_t v10 = (pthread_mutex_t *)a1[1];
    uint64_t v9 = (pthread_mutex_t **)(a1 + 1);
    v13[0] = (uint64_t)v9;
    pthread_mutex_lock(v10);
    uint64_t v12 = 0;
    unint64_t v11 = (uint64_t)(v7[1] - *v7) >> 3;
    if (a2 + 1 <= v11)
    {
      if (a2 + 1 < v11) {
        v7[1] = *v7 + 8 * (a2 + 1);
      }
    }
    else
    {
      sub_1002D4FC4(v7, a2 + 1 - v11, (const double *)&v12);
    }
    double result = (unint64_t *)pthread_mutex_unlock(*v9);
    unint64_t v8 = *v7;
  }
  *(void *)(v8 + 8 * a2) = a3;
  return result;
}

void sub_1002D3F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D4120((pthread_mutex_t ***)va);
  _Unwind_Resume(a1);
}

void sub_1002D3FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D4018()
{
  if (!qword_1004E0D88)
  {
    uint64_t v0 = (pthread_mutex_t **)sub_1002D1A44();
    pthread_mutex_lock(*v0);
    if (!qword_1004E0D88) {
      operator new();
    }
    pthread_mutex_unlock(*v0);
  }
  return qword_1004E0D88;
}

void sub_1002D40DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D4120((pthread_mutex_t ***)va);
  _Unwind_Resume(a1);
}

void sub_1002D40F0()
{
}

pthread_mutex_t ***sub_1002D4120(pthread_mutex_t ***a1)
{
  return a1;
}

uint64_t sub_1002D4154()
{
  if (!qword_1004E0D98)
  {
    uint64_t v0 = (pthread_mutex_t **)sub_1002D1A44();
    pthread_mutex_lock(*v0);
    if (!qword_1004E0D98) {
      operator new();
    }
    pthread_mutex_unlock(*v0);
  }
  return *(unsigned int *)sub_1002D3A9C((_DWORD *)qword_1004E0D98);
}

void sub_1002D4214(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D4250(const char *a1, uint64_t a2)
{
  uint64_t v4 = getenv(a1);
  if (v4)
  {
    uint64_t v5 = v4;
    v19[0] = 0;
    v19[1] = 0;
    size_t v6 = strlen(v4);
    if (v6)
    {
      size_t v7 = v6;
      unint64_t v8 = (void *)sub_1002D19D8(v19, v6);
      memcpy(v8, v5, v7);
      uint64_t v9 = (char *)v19[0];
      if ((char *)v19[0] == "1")
      {
        a2 = 1;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (v9) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = "";
    }
    int v11 = strcmp(v10, "1");
    a2 = 1;
    if (v9 == "True") {
      goto LABEL_25;
    }
    if (!v11) {
      goto LABEL_25;
    }
    int v12 = strcmp(v10, "True");
    if (v9 == "true") {
      goto LABEL_25;
    }
    if (!v12) {
      goto LABEL_25;
    }
    int v13 = strcmp(v10, "true");
    if (v9 == "TRUE" || !v13 || !strcmp(v10, "TRUE")) {
      goto LABEL_25;
    }
    if (v9 != "0")
    {
      int v14 = strcmp(v10, "0");
      a2 = 0;
      if (v9 == "False") {
        goto LABEL_25;
      }
      if (!v14) {
        goto LABEL_25;
      }
      int v15 = strcmp(v10, "False");
      a2 = 0;
      if (v9 == "false") {
        goto LABEL_25;
      }
      if (!v15) {
        goto LABEL_25;
      }
      int v16 = strcmp(v10, "false");
      a2 = 0;
      if (v9 == "FALSE" || !v16) {
        goto LABEL_25;
      }
      if (strcmp(v10, "FALSE"))
      {
        sub_1002D1F78(v18, "Invalid value for %s parameter: %s", a1, v10);
        sub_1002D4478(-5, v18, "getConfigurationParameterBool", 1619);
      }
    }
    a2 = 0;
LABEL_25:
    sub_1002D1A1C(v19);
  }
  return a2;
}

void sub_1002D4448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002D1A1C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1002D4478(int a1, uint64_t *a2, char *a3, int a4)
{
}

uint64_t sub_1002D4494(const char *a1, uint64_t a2)
{
  uint64_t v4 = getenv(a1);
  if (v4)
  {
    uint64_t v5 = v4;
    int __src = 0;
    size_t v31 = 0;
    size_t v6 = strlen(v4);
    if (v6)
    {
      size_t v7 = (void *)sub_1002D19D8(&__src, v6);
      memcpy(v7, v5, v6);
      size_t v8 = v31;
      if (v31)
      {
        size_t v6 = 0;
        while ((*((char *)__src + v6) & 0x80000000) == 0
             && (_DefaultRuneLocale.__runetype[*((unsigned __int8 *)__src + v6)] & 0x400) != 0)
        {
          if (v31 == ++v6)
          {
            size_t v6 = v31;
            break;
          }
        }
        unint64_t v28 = 0;
        size_t v29 = 0;
        if (v31 >= v6) {
          size_t v9 = v6;
        }
        else {
          size_t v9 = v31;
        }
        if (v9)
        {
          if (v31 > v6)
          {
            unint64_t v10 = (void *)sub_1002D19D8(&v28, v9);
            memcpy(v10, __src, v9);
            size_t v8 = v31;
          }
          else
          {
            atomic_fetch_add((atomic_uint *volatile)__src - 1, 1u);
            size_t v8 = v31;
            unint64_t v28 = (const char *)__src;
            size_t v29 = v31;
          }
        }
      }
      else
      {
        size_t v6 = 0;
        unint64_t v28 = 0;
        size_t v29 = 0;
      }
    }
    else
    {
      size_t v8 = 0;
      unint64_t v28 = 0;
      size_t v29 = 0;
    }
    size_t v11 = v8 - v6;
    unint64_t v26 = 0;
    size_t v27 = 0;
    if (v8 < v6) {
      size_t v6 = v8;
    }
    if (v8 - v6 >= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v8 - v6;
    }
    if (v12)
    {
      if (v12 == v8)
      {
        atomic_fetch_add((atomic_uint *volatile)__src - 1, 1u);
        size_t v13 = v31;
        unint64_t v26 = (char *)__src;
        size_t v27 = v31;
      }
      else
      {
        int v14 = (void *)sub_1002D19D8(&v26, v12);
        memcpy(v14, (char *)__src + v6, v12);
        size_t v13 = v27;
      }
    }
    else
    {
      size_t v13 = 0;
    }
    if (v28) {
      int v15 = v28;
    }
    else {
      int v15 = "";
    }
    int v16 = atoi(v15);
    if (v13)
    {
      uint64_t v17 = v26;
      if (v26 == "MB"
        || (v26 ? (unint64_t v18 = v26) : (unint64_t v18 = ""),
            (int v19 = strcmp(v18, "MB"), v17 == "Mb")
         || !v19
         || (int v20 = strcmp(v18, "Mb"), v17 == "mb")
         || !v20
         || !strcmp(v18, "mb")))
      {
        v16 <<= 20;
      }
      else
      {
        if (v17 != "KB")
        {
          int v21 = strcmp(v18, "KB");
          if (v17 != "Kb")
          {
            if (v21)
            {
              int v22 = strcmp(v18, "Kb");
              if (v17 != "kb" && v22 && strcmp(v18, "kb"))
              {
                uint64_t v24 = (const char *)__src;
                if (!__src) {
                  uint64_t v24 = "";
                }
                sub_1002D1F78(v25, "Invalid value for %s parameter: %s", a1, v24);
                sub_1002D4478(-5, v25, "getConfigurationParameterSizeT", 1650);
              }
            }
          }
        }
        v16 <<= 10;
      }
    }
    sub_1002D1A1C((uint64_t *)&v26);
    sub_1002D1A1C((uint64_t *)&v28);
    sub_1002D1A1C((uint64_t *)&__src);
    return v16;
  }
  return a2;
}

void sub_1002D4788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002D1A1C((uint64_t *)va1);
  sub_1002D1A1C((uint64_t *)va2);
  sub_1002D1A1C((uint64_t *)va3);
  _Unwind_Resume(a1);
}

const char *sub_1002D47E8@<X0>(const char *a1@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  double result = getenv(a1);
  if (result)
  {
    uint64_t v6 = result;
    *a3 = 0;
    a3[1] = 0;
    double result = (const char *)strlen(result);
    if (!result) {
      return result;
    }
    uint64_t v7 = result;
    size_t v8 = (void *)sub_1002D19D8(a3, (uint64_t)result);
    uint64_t v9 = v6;
    size_t v10 = (size_t)v7;
    return (const char *)memcpy(v8, v9, v10);
  }
  *a3 = 0;
  a3[1] = 0;
  if (a2)
  {
    double result = (const char *)strlen(a2);
    if (result)
    {
      size_t v11 = result;
      size_t v8 = (void *)sub_1002D19D8(a3, (uint64_t)result);
      uint64_t v9 = a2;
      size_t v10 = (size_t)v11;
      return (const char *)memcpy(v8, v9, v10);
    }
  }
  return result;
}

void sub_1002D48B0(unsigned char *a1)
{
  if (getenv("OPENCV_DUMP_CONFIG"))
  {
    uint64_t v2 = __stderrp;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0DB0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1004E0DB0))
    {
      sub_10022F344(&qword_1004E0DC8, aGeneralConfigu);
      __cxa_atexit((void (*)(void *))sub_10026BB58, &qword_1004E0DC8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1004E0DB0);
    }
    uint64_t v3 = (const char *)qword_1004E0DC8;
    if (!qword_1004E0DC8) {
      uint64_t v3 = "";
    }
    fprintf(v2, "\nOpenCV build configuration is:\n%s\n", v3);
  }
  bzero(&unk_1004E0FD8, 0x7F8uLL);
  qword_1004E0FE0 = (uint64_t)"MMX";
  unk_1004E0FE8 = "SSE";
  qword_1004E0FF0 = (uint64_t)"SSE2";
  unk_1004E0FF8 = "SSE3";
  qword_1004E1000 = (uint64_t)"SSSE3";
  unk_1004E1008 = "SSE4.1";
  qword_1004E1010 = (uint64_t)"SSE4.2";
  unk_1004E1018 = "POPCNT";
  qword_1004E1020 = (uint64_t)"FP16";
  unk_1004E1028 = "AVX";
  qword_1004E1030 = (uint64_t)"AVX2";
  unk_1004E1038 = "FMA3";
  qword_1004E1040 = (uint64_t)"AVX512F";
  unk_1004E1048 = "AVX512BW";
  qword_1004E1050 = (uint64_t)"AVX512CD";
  unk_1004E1058 = "AVX512DQ";
  qword_1004E1060 = (uint64_t)"AVX512ER";
  unk_1004E1068 = "AVX512IFMA";
  qword_1004E1070 = (uint64_t)"AVX512PF";
  unk_1004E1078 = "AVX512VBMI";
  qword_1004E1080 = (uint64_t)"AVX512VL";
  qword_1004E12F8 = (uint64_t)"NEON";
  qword_1004E1618 = (uint64_t)"VSX";
  a1[100] = 1;
  a1[9] = 1;
  a1[200] = 0;
  int v5 = 100;
  uint64_t v4 = 0x6400000000;
  sub_1002D4B04((uint64_t)a1, &v4, 3u);
}

void sub_1002D4AE8(_Unwind_Exception *a1)
{
}

void sub_1002D4B04(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  uint64_t v6 = getenv("OPENCV_CPU_DISABLE");
  if (v6)
  {
    uint64_t v7 = v6;
    if (*v6)
    {
      uint64_t v25 = a3;
      while (1)
      {
        int v8 = *v7;
        while (2)
        {
          if ((v8 - 44) < 2) {
            goto LABEL_4;
          }
          if (!*v7) {
            return;
          }
          if (v8 == 59)
          {
LABEL_4:
            ++v7;
          }
          else
          {
            size_t v9 = 0;
            for (unsigned __int8 i = *v7; i > 0x3Bu || ((1 << i) & 0x800300000000001) == 0; unsigned __int8 i = v7[++v9])
              ;
            if (!v9) {
              continue;
            }
            uint64_t v26 = a1;
            int v27 = a3;
            size_t v11 = a2;
            size_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v12 = (void *)sub_1002D19D8(&v29, v9);
            memcpy(v12, v7, v9);
            uint64_t v13 = v30;
            if (!v30)
            {
              v28[0] = 0;
              v28[1] = 0;
              uint64_t v24 = sub_1002D19D8(v28, 18);
              *(_WORD *)(v24 + 16) = 12320;
              *(_OWORD *)uint64_t v24 = *(_OWORD *)"feature.size() > 0";
              sub_1002D2278(-215, v28, "readSettings", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 606);
            }
            uint64_t v14 = 0;
            v7 += v9;
            uint64_t v15 = (uint64_t)v29;
            if (v29) {
              int v16 = v29;
            }
            else {
              int v16 = "";
            }
            while (2)
            {
              uint64_t v17 = &byte_1004E0DA8[8 * v14];
              unint64_t v18 = (const char *)*((void *)v17 + 70);
              if (v18 && strlen(*((const char **)v17 + 70)) == v13 && ((const char *)v15 == v18 || !strcmp(v16, v18)))
              {
                uint64_t v19 = v25;
                a1 = v26;
                a2 = v11;
                int v20 = v11;
                a3 = v27;
                if (v27 < 1)
                {
LABEL_26:
                  if (!*(unsigned char *)(v26 + v14)) {
                    goto LABEL_27;
                  }
                }
                else
                {
                  while (1)
                  {
                    int v21 = *v20++;
                    if (v21 == v14) {
                      break;
                    }
                    if (!--v19) {
                      goto LABEL_26;
                    }
                  }
                  unint64_t v23 = *(const char **)&byte_1004E0DA8[8 * v14 + 560];
                  if (!v23) {
                    unint64_t v23 = "Unknown feature";
                  }
                  fprintf(__stderrp, "OPENCV: Trying to disable baseline CPU feature: '%s'. This has very limited effect, because code optimizations for this feature are executed unconditionally in the most cases.\n", v23);
                  if (!*(unsigned char *)(v26 + v14))
                  {
LABEL_27:
                    int v22 = *(const char **)&byte_1004E0DA8[8 * v14 + 560];
                    if (!v22) {
                      int v22 = "Unknown feature";
                    }
                    fprintf(__stderrp, "OPENCV: Trying to disable unavailable CPU feature on the current platform: '%s'.\n", v22);
                  }
                }
                *(unsigned char *)(v26 + v14) = 0;
                goto LABEL_32;
              }
              if (++v14 != 255) {
                continue;
              }
              break;
            }
            fprintf(__stderrp, "OPENCV: Trying to disable unknown CPU feature: '%s'.\n", v16);
            a2 = v11;
            a3 = v27;
            a1 = v26;
LABEL_32:
            sub_1002D1A1C((uint64_t *)&v29);
          }
          break;
        }
      }
    }
  }
}

void sub_1002D4DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002D1A1C((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1002D4DE4(pthread_key_t *a1)
{
  if (!pthread_key_create(a1, 0)) {
    operator new();
  }
  v1.__sig = 0;
  *(void *)v1.__opaque = 0;
  qmemcpy((void *)sub_1002D19D8(&v1, 40), "pthread_key_create(&tlsKey, __null) == 0", 40);
  sub_1002D2278(-215, &v1.__sig, "TlsAbstraction", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1301);
}

void sub_1002D4F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002D4F4C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  *(void *)(v1 + 32) = v3;
  operator delete(v3);
  sub_1002D2E58((pthread_mutex_t **)(v1 + 8));
  sub_1002D2ED4((pthread_key_t *)v1);
  _Unwind_Resume(a1);
}

void sub_1002D4F80(_Unwind_Exception *a1)
{
  sub_1002D2ED4(v1);
  _Unwind_Resume(a1);
}

void sub_1002D4F94()
{
}

void sub_1002D4FC4(unint64_t *a1, unint64_t a2, const double *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  uint64_t v8 = (void *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_46;
      }
      unint64_t v17 = v16 + 1;
      uint64_t v8 = (void *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      float64x2_t v18 = vld1q_dup_f64(a3);
      uint64_t v19 = (float64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        float64x2_t *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
          *v8++ = *(void *)a3;
        while (v8 != (void *)(v7 + 8 * a2));
      }
      uint64_t v8 = (void *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + a2;
    if (v11 >> 61) {
      sub_10000B98C();
    }
    uint64_t v12 = v6 - *a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= v11) {
      uint64_t v13 = (v9 >> 3) + a2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_10000BA6C();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v10];
    int v22 = (char *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (char *)v21;
    if (v23 < 0x13) {
      goto LABEL_47;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = &v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3) {
        goto LABEL_47;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (char *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    float64x2_t v26 = vld1q_dup_f64(a3);
    int v27 = (float64x2_t *)&v15[8 * v10 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *int v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        *(double *)uint64_t v24 = *a3;
        v24 += 8;
      }
      while (v24 != v22);
    }
    size_t v29 = (void *)*a1;
    if (v7 != *a1)
    {
      unint64_t v30 = v7 - *a1 - 8;
      if (v30 < 0x58) {
        goto LABEL_48;
      }
      if (v7 - (unint64_t)&v15[v9] < 0x20) {
        goto LABEL_48;
      }
      uint64_t v31 = (v30 >> 3) + 1;
      uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v8 = (void *)(v7 - v32);
      v21 -= v32;
      long long v33 = &v15[8 * v10 - 16];
      uint64_t v34 = (long long *)(v7 - 16);
      uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)long long v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        do
        {
          uint64_t v37 = *--v8;
          *(void *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      uint64_t v8 = (void *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

int *sub_1002D5234(int *a1)
{
  *(void *)a1 = off_1004965A0;
  sub_1002D3694(a1);
  *(void *)a1 = off_100496560;
  if (a1[2] != -1)
  {
    v4[0] = 0;
    v4[1] = 0;
    uint64_t v3 = sub_1002D19D8(v4, 10);
    *(_WORD *)(v3 + 8) = 12589;
    *(void *)uint64_t v3 = *(void *)"key_ == -1";
    sub_1002D2278(-215, v4, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
  }
  return a1;
}

void sub_1002D52FC(int *a1)
{
  *(void *)a1 = off_1004965A0;
  sub_1002D3694(a1);
  *(void *)a1 = off_100496560;
  if (a1[2] == -1)
  {
    operator delete();
  }
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = sub_1002D19D8(v3, 10);
  *(_WORD *)(v2 + 8) = 12589;
  *(void *)uint64_t v2 = *(void *)"key_ == -1";
  sub_1002D2278(-215, v3, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
}

void sub_1002D53E4()
{
}

void sub_1002D5424(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator delete();
  }
}

int *sub_1002D5444(int *a1)
{
  *(void *)a1 = off_1004965F8;
  sub_1002D3694(a1);
  *(void *)a1 = off_100496560;
  if (a1[2] != -1)
  {
    v4[0] = 0;
    v4[1] = 0;
    uint64_t v3 = sub_1002D19D8(v4, 10);
    *(_WORD *)(v3 + 8) = 12589;
    *(void *)uint64_t v3 = *(void *)"key_ == -1";
    sub_1002D2278(-215, v4, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
  }
  return a1;
}

void sub_1002D550C(int *a1)
{
  *(void *)a1 = off_1004965F8;
  sub_1002D3694(a1);
  *(void *)a1 = off_100496560;
  if (a1[2] == -1)
  {
    operator delete();
  }
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = sub_1002D19D8(v3, 10);
  *(_WORD *)(v2 + 8) = 12589;
  *(void *)uint64_t v2 = *(void *)"key_ == -1";
  sub_1002D2278(-215, v3, "~TLSDataContainer", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/system.cpp", 1503);
}

void sub_1002D55F4()
{
}

void sub_1002D5650()
{
}

void sub_1002D5674(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1002AB73C((atomic_uint **)(a2 + 16));
    operator delete();
  }
}

double sub_1002D56C8()
{
  qword_1004F8D30 = sub_1002D1A44();
  xmmword_1004E0DD8 = 0u;
  unk_1004E0DE8 = 0u;
  xmmword_1004E0DF8 = 0u;
  unk_1004E0E08 = 0u;
  xmmword_1004E0E18 = 0u;
  unk_1004E0E28 = 0u;
  xmmword_1004E0E38 = 0u;
  unk_1004E0E48 = 0u;
  xmmword_1004E0E58 = 0u;
  unk_1004E0E68 = 0u;
  xmmword_1004E0E78 = 0u;
  unk_1004E0E88 = 0u;
  xmmword_1004E0E98 = 0u;
  unk_1004E0EA8 = 0u;
  xmmword_1004E0EB8 = 0u;
  *(long long *)((char *)&xmmword_1004E0EB8 + 15) = 0u;
  sub_1002D48B0(&xmmword_1004E0DD8);
  double result = 0.0;
  unk_1004E0FC7 = 0u;
  xmmword_1004E0FA8 = 0u;
  unk_1004E0FB8 = 0u;
  xmmword_1004E0F88 = 0u;
  unk_1004E0F98 = 0u;
  xmmword_1004E0F68 = 0u;
  unk_1004E0F78 = 0u;
  xmmword_1004E0F48 = 0u;
  unk_1004E0F58 = 0u;
  xmmword_1004E0F28 = 0u;
  unk_1004E0F38 = 0u;
  xmmword_1004E0F08 = 0u;
  unk_1004E0F18 = 0u;
  xmmword_1004E0EE8 = 0u;
  unk_1004E0EF8 = 0u;
  xmmword_1004E0ED8 = 0u;
  return result;
}

uint64_t sub_1002D5754(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t result = **a1;
  if (!result)
  {
    uint64_t v3 = (pthread_mutex_t **)sub_1002D1A44();
    sub_1002D2EC4(v3);
    if (!*v1) {
      operator new();
    }
    sub_1002D2ECC(v3);
    return *v1;
  }
  return result;
}

void sub_1002D588C(_Unwind_Exception *a1)
{
  sub_1002D2ECC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D58C0()
{
  if (!qword_1004E17F0)
  {
    uint64_t v0 = (pthread_mutex_t **)sub_1002D1A44();
    sub_1002D2EC4(v0);
    if (!qword_1004E17F0)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E1808, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1004E1808))
      {
        sub_1002D6BE4();
      }
      qword_1004E17F0 = (uint64_t)&unk_1004E1820;
    }
    sub_1002D2ECC(v0);
  }
  return qword_1004E17F0;
}

void sub_1002D597C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1004E1808);
  sub_1002D2ECC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D59A4(void *a1, uint64_t a2)
{
  *(void *)(a2 + 16) = a1[1];
  int v3 = *(_DWORD *)(*a1 + 28);
  if (v3)
  {
    if ((v3 & 2) == 0) {
      ++*(_DWORD *)(a2 + 76);
    }
    ++*(_DWORD *)(a2 + 72);
  }
  uint64_t result = sub_1002D5AFC(a2);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v23 = 0;
    char v24 = 0;
    uint64_t v12 = a1[1];
    sub_1002D6B58((uint64_t)v22, "b,%d,%lld,%lld,%lld", v5, v6, v7, v8, v9, v10, *(_DWORD *)(*(void *)v12 + 24));
    uint64_t v19 = *(uint64_t **)(*(void *)v12 + 16);
    if (v19)
    {
      uint64_t v20 = *v19;
      if (v20)
      {
        if (*(_DWORD *)(v20 + 24) != *(_DWORD *)(*(void *)v12 + 24)) {
          sub_1002D6B58((uint64_t)v22, ",parentThread=%d,parent=%lld", v13, v14, v15, v16, v17, v18, *(_DWORD *)(v20 + 24));
        }
      }
    }
    sub_1002D6B58((uint64_t)v22, "\n", v13, v14, v15, v16, v17, v18, v21);
    return (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v11 + 16))(v11, v22);
  }
  return result;
}

uint64_t sub_1002D5AFC(uint64_t a1)
{
  if (!*(void *)(a1 + 168))
  {
    uint64_t v3 = *(void *)(sub_1002D58C0() + 40);
    if (v3)
    {
      uint64_t v4 = (const char *)qword_1004E1810;
      if (!qword_1004E1810) {
        uint64_t v4 = "";
      }
      sub_1002D1F78(v23, "%s-%03d.txt", v4, *(_DWORD *)a1);
      if (v23[0]) {
        uint64_t v5 = (const char *)v23[0];
      }
      else {
        uint64_t v5 = "";
      }
      size_t v6 = strlen(v5);
      if (v6 >= 0x7FFFFFFFFFFFFFF8) {
        sub_10026ADB4();
      }
      size_t v7 = v6;
      if (v6 >= 0x17)
      {
        uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v9 = v6 | 7;
        }
        uint64_t v10 = v9 + 1;
        uint64_t v8 = operator new(v9 + 1);
        __dst[1] = v7;
        unint64_t v22 = v10 | 0x8000000000000000;
        __dst[0] = v8;
      }
      else
      {
        HIBYTE(v22) = v6;
        uint64_t v8 = __dst;
        if (!v6)
        {
LABEL_17:
          *((unsigned char *)v8 + v7) = 0;
          sub_1002D1A1C(v23);
          v23[128] = 0;
          char v24 = 0;
          if (SHIBYTE(v22) < 0)
          {
            LOBYTE(v11) = __dst[0];
            uint64_t v12 = (char *)__dst[0];
          }
          else
          {
            uint64_t v11 = __dst;
            uint64_t v12 = (char *)__dst;
          }
          uint64_t v13 = strrchr(v12, 47);
          if (v13) {
            char v20 = (char)v13;
          }
          else {
            char v20 = (char)v11;
          }
          sub_1002D6B58((uint64_t)v23, "#thread file: %s\n", v14, v15, v16, v17, v18, v19, v20);
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, v23);
          operator new();
        }
      }
      memmove(v8, v5, v7);
      goto LABEL_17;
    }
  }
  return *(void *)(a1 + 168);
}

void sub_1002D5D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D5DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 8) += v4;
  uint64_t result = sub_1002D5AFC(a2);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v22 = 0;
    char v23 = 0;
    sub_1002D6B58((uint64_t)v21, "e,%d,%lld,%lld,%lld,%lld", v6, v7, v8, v9, v10, v11, *(_DWORD *)(**(void **)(a1 + 8) + 24));
    if (v4) {
      sub_1002D6B58((uint64_t)v21, ",skip=%d", v13, v14, v15, v16, v17, v18, v4);
    }
    sub_1002D6B58((uint64_t)v21, "\n", v13, v14, v15, v16, v17, v18, v20);
    uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v12 + 16))(v12, v21);
  }
  int v19 = *(_DWORD *)(*(void *)a1 + 28);
  if (v19)
  {
    if ((v19 & 2) == 0) {
      --*(_DWORD *)(a2 + 76);
    }
    --*(_DWORD *)(a2 + 72);
  }
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return result;
}

uint64_t sub_1002D5F40(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (byte_1004F8D38)
  {
    byte_1004E17DA = 0;
    return a1;
  }
  if ((byte_1004E17D9 & 1) == 0) {
    sub_1002D58C0();
  }
  if (byte_1004E17DA)
  {
    uint64_t v4 = sub_1002D58C0();
    uint64_t v5 = sub_1002D3A9C((_DWORD *)(v4 + 16));
    uint64_t v6 = v5;
    if (!v5)
    {
      v43[0] = 0;
      v43[1] = 0;
      uint64_t v7 = sub_1002D19D8(v43, 3);
      *(_WORD *)uint64_t v7 = 29808;
      *(unsigned char *)(v7 + 2) = 114;
      sub_1002D2278(-215, v43, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
    }
    uint64_t v8 = v5[8];
    if (v8)
    {
      uint64_t v9 = (uint64_t **)(*(void *)(v5[4] + 8 * ((v8 + v5[7] - 1) / 0xAAuLL)) + 24 * ((v8 + v5[7] - 1) % 0xAAuLL));
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      if ((*(_DWORD *)(a2 + 28) & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v10 = (uint64_t *)v5[13];
      uint64_t v11 = (uint64_t *)v5[14];
      if ((*(_DWORD *)(a2 + 28) & 0x80000000) == 0) {
        goto LABEL_18;
      }
    }
    if (v10)
    {
      if (!*v10) {
        goto LABEL_23;
      }
      sub_1002D6888(v10);
      *((_DWORD *)v10 + 2) = 0;
      uint64_t v12 = v6[8];
      if (v12)
      {
        uint64_t v13 = (void *)(*(void *)(v6[4] + 8 * ((v12 + v6[7] - 1) / 0xAAuLL)) + 24 * ((v12 + v6[7] - 1) % 0xAAuLL));
        uint64_t v14 = v13 + 1;
      }
      else
      {
        uint64_t v13 = v6 + 13;
        uint64_t v14 = v6 + 14;
      }
      uint64_t v10 = (uint64_t *)*v13;
      uint64_t v11 = (uint64_t *)*v14;
    }
LABEL_18:
    if (!v10)
    {
      int v16 = 0;
      uint64_t v17 = j__mach_absolute_time();
      if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004E1800, memory_order_acquire)) {
        goto LABEL_28;
      }
      goto LABEL_80;
    }
    uint64_t v15 = *v10;
    if (*v10)
    {
      if (v11)
      {
        int v16 = *(_DWORD *)(v15 + 48) + 1;
        *(_DWORD *)(v15 + 48) = v16;
        uint64_t v17 = j__mach_absolute_time();
        if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004E1800, memory_order_acquire)) {
          goto LABEL_28;
        }
      }
      else
      {
        int v16 = atomic_fetch_add((atomic_uint *volatile)(v15 + 48), 1u) + 1;
        uint64_t v17 = j__mach_absolute_time();
        if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004E1800, memory_order_acquire)) {
          goto LABEL_28;
        }
      }
LABEL_80:
      if (__cxa_guard_acquire(&qword_1004E1800))
      {
        *(double *)&qword_1004E17F8 = 1000000000.0 / sub_1002D2210();
        __cxa_guard_release(&qword_1004E1800);
      }
LABEL_28:
      uint64_t v18 = v6[5];
      uint64_t v19 = v6[4];
      if (v18 == v19) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = 170 * ((v18 - v19) >> 3) - 1;
      }
      uint64_t v21 = (uint64_t)(*(double *)&qword_1004E17F8 * (double)(uint64_t)(v17 - qword_1004E17E8));
      uint64_t v22 = v6[8];
      unint64_t v23 = v6[7] + v22;
      if (v20 == v23)
      {
        sub_1002D7A40((uint64_t)(v6 + 3));
        uint64_t v19 = v6[4];
        uint64_t v24 = v6[8];
        unint64_t v23 = v24 + v6[7];
      }
      else
      {
        uint64_t v24 = v6[8];
      }
      unint64_t v25 = (void *)(*(void *)(v19 + 8 * (v23 / 0xAA)) + 24 * (v23 % 0xAA));
      *unint64_t v25 = a1;
      v25[1] = a2;
      uint64_t v25[2] = v21;
      v6[8] = v24 + 1;
      *(_DWORD *)(a1 + 8) |= 1u;
      int v26 = *(_DWORD *)(a2 + 28);
      if ((v26 & 0x40000000) == 0)
      {
        int v27 = *((_DWORD *)v6 + 24);
        if ((v27 & 0x80000000) == 0 && v27 <= (int)v22) {
          goto LABEL_70;
        }
        if (dword_1004E17E0 >= 1 && (v26 & 2) == 0 && v11 && (*((unsigned char *)v11 + 28) & 2) == 0 && v16 >= dword_1004E17E0)
        {
          if ((int)sub_10026ADCC() >= 4)
          {
            sub_10026B1DC((uint64_t)v43);
            uint64_t v28 = 4 * (v6[8] & 0xF);
            size_t v29 = sub_10026AA20(&v44, (uint64_t)&asc_100406C67[v28 ^ 0x3F], v28);
            sub_10026AA20(v29, (uint64_t)"OpenCV parent region exceeds children count. Bailout", 52);
            std::stringbuf::str();
            if (v42 >= 0) {
              unint64_t v30 = __p;
            }
            else {
              unint64_t v30 = (void **)__p[0];
            }
            sub_10026AE54(4, (const char *)v30);
            if (v42 < 0) {
              operator delete(__p[0]);
            }
            sub_10026B578((uint64_t)v43);
          }
LABEL_52:
          *((_DWORD *)v6 + 24) = v22;
LABEL_70:
          ++*((_DWORD *)v6 + 20);
          return a1;
        }
        if (dword_1004E17E4 >= 1 && v16 >= dword_1004E17E4)
        {
          if ((int)sub_10026ADCC() >= 4)
          {
            sub_10026B1DC((uint64_t)v43);
            uint64_t v37 = 4 * (v6[8] & 0xF);
            char v38 = sub_10026AA20(&v44, (uint64_t)&asc_100406C67[v37 ^ 0x3F], v37);
            sub_10026AA20(v38, (uint64_t)"Parent region exceeds children count. Bailout", 45);
            std::stringbuf::str();
            if (v42 >= 0) {
              uint64_t v39 = __p;
            }
            else {
              uint64_t v39 = (void **)__p[0];
            }
            sub_10026AE54(4, (const char *)v39);
            if (v42 < 0) {
              operator delete(__p[0]);
            }
            *(uint64_t *)((char *)v43
            uint64_t v44 = v40;
            if (v47 < 0) {
              operator delete(v46);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            std::ios::~ios();
            *((_DWORD *)v6 + 24) = v22;
            goto LABEL_70;
          }
          goto LABEL_52;
        }
      }
      int v31 = v22 + 1;
      sub_1002D5754((uint64_t **)a2);
      if (***(_DWORD ***)a2)
      {
        if ((!v11 || (*((unsigned char *)v11 + 28) & 4) == 0)
          && (!dword_1004E17DC || (*(unsigned char *)(a2 + 28) & 2) != 0 || *((_DWORD *)v6 + 19) < dword_1004E17DC))
        {
          operator new();
        }
      }
      else if ((int)sub_10026ADCC() >= 4)
      {
        sub_10026B1DC((uint64_t)v43);
        uint64_t v32 = 4 * (v6[8] & 0xF);
        long long v33 = sub_10026AA20(&v44, (uint64_t)&asc_100406C67[v32 ^ 0x3F], v32);
        sub_10026AA20(v33, (uint64_t)"Region location is disabled. Bailout", 36);
        std::stringbuf::str();
        if (v42 >= 0) {
          uint64_t v34 = __p;
        }
        else {
          uint64_t v34 = (void **)__p[0];
        }
        sub_10026AE54(4, (const char *)v34);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
        *(uint64_t *)((char *)v43
        uint64_t v44 = v35;
        if (v47 < 0) {
          operator delete(v46);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
      }
      *((_DWORD *)v6 + 24) = v31;
      goto LABEL_70;
    }
LABEL_23:
    int v16 = 0;
    uint64_t v17 = j__mach_absolute_time();
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004E1800, memory_order_acquire)) {
      goto LABEL_28;
    }
    goto LABEL_80;
  }
  return a1;
}

void sub_1002D678C(_Unwind_Exception *a1)
{
}

void sub_1002D67A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_10026B578((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_10026B578((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1002D6870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002D6888(unsigned char *a1)
{
  uint64_t v2 = sub_1002D58C0();
  uint64_t v3 = sub_1002D3A9C((_DWORD *)(v2 + 16));
  uint64_t v4 = (uint64_t)v3;
  if (!v3)
  {
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v5 = sub_1002D19D8(v18, 3);
    *(_WORD *)uint64_t v5 = 29808;
    *(unsigned char *)(v5 + 2) = 114;
    sub_1002D2278(-215, v18, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  int v6 = *((_DWORD *)v3 + 16);
  uint64_t v7 = j__mach_absolute_time();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E1800, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1004E1800))
  {
    *(double *)&qword_1004E17F8 = 1000000000.0 / sub_1002D2210();
    __cxa_guard_release(&qword_1004E1800);
  }
  uint64_t v8 = (uint64_t)(*(double *)&qword_1004E17F8 * (double)(uint64_t)(v7 - qword_1004E17E8));
  uint64_t v9 = *(void *)(v4 + 64);
  if (v9)
  {
    uint64_t v10 = v8
        - *(void *)(*(void *)(*(void *)(v4 + 32) + 8 * ((v9 + *(void *)(v4 + 56) - 1) / 0xAAuLL))
                    + 24 * ((v9 + *(void *)(v4 + 56) - 1) % 0xAAuLL)
                    + 16);
    uint64_t v11 = *(void *)a1;
    if (*(void *)a1)
    {
LABEL_6:
      *(void *)(v4 + 88) = v10;
      *(void *)(v11 + 40) = v8;
      sub_1002D5DE0(v11, v4);
      if (*(void *)a1)
      {
        **(void **)(*(void *)a1 + 8) = 0;
        operator delete();
      }
      *(void *)a1 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v10 = v8 - *(void *)(v4 + 120);
    uint64_t v11 = *(void *)a1;
    if (*(void *)a1) {
      goto LABEL_6;
    }
  }
  if (v9 == *(void *)(v4 + 152) + 1) {
    *(void *)(v4 + 88) += v10;
  }
LABEL_12:
  if (a1[8])
  {
    uint64_t v13 = *(void *)(v4 + 32);
    uint64_t v12 = *(void *)(v4 + 40);
    uint64_t v14 = 170 * ((v12 - v13) >> 3) - 1;
    BOOL v15 = v12 == v13;
    uint64_t v17 = *(void *)(v4 + 56);
    uint64_t v16 = *(void *)(v4 + 64);
    if (v15) {
      uint64_t v14 = 0;
    }
    *(void *)(v4 + 64) = v16 - 1;
    if ((unint64_t)(v14 - (v16 + v17) + 1) >= 0x154)
    {
      operator delete(*(void **)(v12 - 8));
      *(void *)(v4 + 40) -= 8;
    }
    if (*(_DWORD *)(v4 + 96) >= v6) {
      *(_DWORD *)(v4 + 96) = -1;
    }
  }
}

void sub_1002D6AB4(_Unwind_Exception *a1)
{
}

void sub_1002D6AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002D6AEC(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002D6B58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = *(void *)(a1 + 1024);
  unint64_t v11 = 1024 - v10;
  unsigned int v12 = sub_1002D2270((char *)(a1 + v10), 1024 - (int)v10, a2, &a9);
  if ((v12 & 0x80000000) != 0 || v11 < v12)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 1032) = 1;
  }
  else
  {
    *(void *)(a1 + 1024) += v12;
    return 1;
  }
  return result;
}

void sub_1002D6BE4()
{
}

void sub_1002D6E2C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1002D6EF4(int *a1)
{
  *(void *)a1 = off_100496720;
  sub_1002D3694(a1);

  return sub_1002D32B8((uint64_t)a1);
}

pthread_mutex_t **sub_1002D6F4C(uint64_t a1)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v2 = (int *)(a1 + 16);
  sub_1002D3354(a1 + 16, &v21);
  uint64_t v3 = v21;
  if (v22 == v21)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = (v22 - v21) >> 3;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    do
    {
      uint64_t v7 = *(void *)v3;
      if (*(void *)v3)
      {
        v5 += *(int *)(v7 + 4);
        v4 += *(void *)(v7 + 8);
      }
      v3 += 8;
      --v6;
    }
    while (v6);
  }
  if ((v5 || byte_1004E17DA) && (int)sub_10026ADCC() >= 4)
  {
    sub_10026B1DC((uint64_t)v16);
    sub_10026AA20(&v17, (uint64_t)"Trace: Total events: ", 21);
    std::ostream::operator<<();
    std::stringbuf::str();
    if (v15 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10026AE54(4, (const char *)v8);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    *(void *)((char *)v16
    uint64_t v17 = v9;
    if (v20 < 0) {
      operator delete(v19);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  if (v4 && (int)sub_10026ADCC() >= 3)
  {
    sub_10026B1DC((uint64_t)v16);
    sub_10026AA20(&v17, (uint64_t)"Trace: Total skipped events: ", 29);
    std::ostream::operator<<();
    std::stringbuf::str();
    if (v15 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    sub_10026AE54(3, (const char *)v10);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    *(void *)((char *)v16
    uint64_t v17 = v11;
    if (v20 < 0) {
      operator delete(v19);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  byte_1004F8D38 = 1;
  byte_1004E17DA = 0;
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  unsigned int v12 = *(atomic_uint **)(a1 + 32);
  if (v12 && atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)uint64_t v2 = off_100496720;
  sub_1002D3694(v2);
  sub_1002D32B8((uint64_t)v2);
  sub_1002D2E58((pthread_mutex_t **)(a1 + 8));
  return sub_1002D2E58((pthread_mutex_t **)a1);
}

void *sub_1002D73CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1002D58C0();
  uint64_t result = sub_1002D3A9C((_DWORD *)(v4 + 16));
  if (!result)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v6 = sub_1002D19D8(&v9, 3);
    *(_WORD *)uint64_t v6 = 29808;
    *(unsigned char *)(v6 + 2) = 114;
    sub_1002D2278(-215, &v9, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  uint64_t v7 = result[13];
  if (v7 != a1)
  {
    if (v7)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      qmemcpy((void *)sub_1002D19D8(&v9, 36), "ctx.dummy_stack_top.region == __null", 36);
      sub_1002D2278(-215, &v9, "parallelForSetRootRegion", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/trace.cpp", 917);
    }
    result[13] = a1;
    result[14] = 0;
    result[15] = -1;
    if (result == (void *)a2)
    {
      *(_DWORD *)(a2 + 128) = *(_DWORD *)(a2 + 80);
      *(_DWORD *)(a2 + 80) = 0;
      *(void *)(a2 + 136) = *(void *)(a2 + 88);
      *(void *)(a2 + 88) = 0;
      *(_DWORD *)(a2 + 144) = *(_DWORD *)(a2 + 96);
      *(void *)(a2 + 152) = *(void *)(a2 + 64);
    }
    else
    {
      if (result[8])
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v8 = sub_1002D19D8(&v9, 17);
        *(unsigned char *)(v8 + 16) = 41;
        *(_OWORD *)uint64_t v8 = *(_OWORD *)"ctx.stack.empty()";
        sub_1002D2278(-215, &v9, "parallelForSetRootRegion", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/trace.cpp", 928);
      }
      result[2] = a1;
      result[9] = *(void *)(a2 + 72);
      result[19] = 0;
      *((_DWORD *)result + 24) = -1;
      *((_DWORD *)result + 24) = *(int *)(a2 + 96) >> 31;
    }
  }
  return result;
}

void sub_1002D7590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1002D75D8()
{
  uint64_t v0 = sub_1002D58C0();
  uint64_t result = sub_1002D3A9C((_DWORD *)(v0 + 16));
  if (!result)
  {
    v3[0] = 0;
    v3[1] = 0;
    uint64_t v2 = sub_1002D19D8(v3, 3);
    *(_WORD *)uint64_t v2 = 29808;
    *(unsigned char *)(v2 + 2) = 114;
    sub_1002D2278(-215, v3, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  return result;
}

void sub_1002D7658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002D7670(uint64_t a1)
{
  uint64_t v2 = sub_1002D58C0();
  uint64_t v3 = sub_1002D3A9C((_DWORD *)(v2 + 16));
  if (!v3)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v4 = sub_1002D19D8(&v13, 3);
    *(_WORD *)uint64_t v4 = 29808;
    *(unsigned char *)(v4 + 2) = 114;
    sub_1002D2278(-215, (uint64_t *)&v13, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  j__mach_absolute_time();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E1800, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1004E1800))
  {
    *(double *)&qword_1004E17F8 = 1000000000.0 / sub_1002D2210();
    __cxa_guard_release(&qword_1004E1800);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v5 = sub_1002D58C0();
  sub_1002D3354(v5 + 16, &v13);
  uint64_t v6 = v13;
  if (v14 != v13)
  {
    int v7 = 0;
    unint64_t v8 = (v14 - v13) >> 3;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    uint64_t v9 = v13;
    while (1)
    {
      uint64_t v10 = *(void **)v9;
      if (*(void *)v9)
      {
        uint64_t v11 = v10[8];
        if (v11)
        {
          if (*(void *)(*(void *)(v10[4] + 8 * ((v11 + v10[7] - 1) / 0xAAuLL)) + 24
                                                                                    * ((v11 + v10[7] - 1) % 0xAAuLL)) == a1)
            goto LABEL_15;
        }
        else if (v10[13] == a1)
        {
LABEL_15:
          int v12 = *((_DWORD *)v10 + 20);
          *((_DWORD *)v10 + 20) = 0;
          void v10[11] = 0;
          if (v10 == v3)
          {
            *((_DWORD *)v3 + 20) = *((_DWORD *)v3 + 32);
            *((_DWORD *)v3 + 32) = 0;
            v3[11] = v3[17];
            v3[17] = 0;
            *((_DWORD *)v3 + 24) = *((_DWORD *)v3 + 36);
            uint64_t v10 = v3;
          }
          v7 += v12;
          v10[13] = 0;
          v10[14] = 0;
          v10[15] = -1;
        }
      }
      v9 += 8;
      if (!--v8)
      {
        *((_DWORD *)v3 + 20) += v7;
        goto LABEL_19;
      }
    }
  }
  if (v13)
  {
LABEL_19:
    uint64_t v14 = v6;
    operator delete(v6);
  }
}

void sub_1002D7854(_Unwind_Exception *a1)
{
}

void sub_1002D7870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void *sub_1002D78A8(void *result)
{
  if (!*result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (pthread_mutex_t **)sub_1002D1A44();
    sub_1002D2EC4(v2);
    if (!*v1) {
      operator new();
    }
    return (void *)sub_1002D2ECC(v2);
  }
  return result;
}

void sub_1002D7904(_Unwind_Exception *a1)
{
  sub_1002D2ECC(v1);
  _Unwind_Resume(a1);
}

void *sub_1002D7920(void **a1)
{
  uint64_t v2 = sub_1002D58C0();
  uint64_t result = sub_1002D3A9C((_DWORD *)(v2 + 16));
  if (!result)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v4 = sub_1002D19D8(&v6, 3);
    *(_WORD *)uint64_t v4 = 29808;
    *(unsigned char *)(v4 + 2) = 114;
    sub_1002D2278(-215, &v6, "getRef", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/utility.hpp", 701);
  }
  uint64_t v5 = (void *)result[2];
  if (v5)
  {
    if (!*v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      qmemcpy((void *)sub_1002D19D8(&v6, 13), "region->pImpl", 13);
      sub_1002D2278(-215, &v6, "traceArg", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/trace.cpp", 1090);
    }
    return sub_1002D78A8(*a1);
  }
  return result;
}

void sub_1002D7A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002D7A40(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        long long v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            int8x16_t v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              int16x8_t v77 = (long long *)(v6 + 3);
              int16x8_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *int16x8_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_10000BA6C();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0xFF0uLL);
      sub_1002BD6DC((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0xFF0uLL);
    sub_1002BD86C((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        long long v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            int32x4_t v82 = &v34[8 * v43];
            char v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              char v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              int v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                _OWORD *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            char v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)char v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unint64_t v25 = (char *)operator new(8 * v24);
  int v26 = operator new(0xFF0uLL);
  int v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    int v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_10000BA6C();
      }
      double v49 = (char *)operator new(8 * v48);
      int v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v25 = v49;
      *(void *)int v27 = v90;
      size_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)int v27 = v26;
      size_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_10000BA6C();
          }
          int v60 = (char *)operator new(8 * v59);
          unint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          size_t v29 = v53;
          if (!v37)
          {
            size_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            int32x4_t v64 = &v60[8 * v61];
            int32x4_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            int32x4_t v64 = &v60[8 * v61];
            int32x4_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            int32x4_t v64 = &v53[v68];
            int32x4_t v65 = &v27[v68];
            int32x4_t v69 = (long long *)(v27 + 16);
            int32x4_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)int32x4_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)int32x4_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          signed __int32 v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          size_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      int v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)int v27 = v26;
  size_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_1002D7FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002D7FCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002D7FE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002D7FF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D8010(uint64_t a1, long long *a2)
{
  *(void *)a1 = off_100496650;
  unint64_t v4 = (void *)(a1 + 8);
  sub_1002D8224((void (__cdecl ***)(std::ofstream *__hidden))(a1 + 8));
  if (*((char *)a2 + 23) < 0)
  {
    sub_1002AB848((unsigned char *)(a1 + 576), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 592) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 576) = v5;
  }
  uint64_t v6 = sub_10026AA20(v4, (uint64_t)"#description: OpenCV trace file", 31);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  uint64_t v7 = std::locale::use_facet(&v11, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v11);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v8 = sub_10026AA20(v4, (uint64_t)"#version: 1.0", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  uint64_t v9 = std::locale::use_facet(&v11, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v11);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1002D81D8(_Unwind_Exception *a1)
{
  sub_1002D83F0(v1);
  _Unwind_Resume(a1);
}

void sub_1002D81EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  if (*(char *)(v11 + 599) < 0) {
    operator delete(*v12);
  }
  sub_1002D83F0(v10);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_1002D8224(void (__cdecl ***a1)(std::ofstream *__hidden this)))(std::ofstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  unint64_t v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 1);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_1002D83AC(_Unwind_Exception *a1)
{
}

void *sub_1002D83F0(void *a1)
{
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_1002D84C0(uint64_t a1)
{
  sub_1002D8564(a1);

  operator delete();
}

BOOL sub_1002D84F8(uint64_t a1, char *__s)
{
  int v2 = __s[1032];
  if (!__s[1032])
  {
    long long v5 = (void *)(a1 + 8);
    size_t v6 = strlen(__s);
    sub_10026AA20(v5, (uint64_t)__s, v6);
  }
  return v2 == 0;
}

uint64_t sub_1002D8564(uint64_t a1)
{
  *(void *)a1 = off_100496650;
  int v2 = (void *)(a1 + 8);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32) | 4);
  }
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*(void **)(a1 + 576));
  }
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_1002D86A0(uint64_t a1)
{
  *(void *)a1 = off_1004966A0;
  sub_1002D8224((void (__cdecl ***)(std::ofstream *__hidden))(a1 + 8));
  sub_1002D1B60();
}

void sub_1002D8874(_Unwind_Exception *a1)
{
  sub_1002D2E58(v2);
  sub_1002D83F0(v1);
  _Unwind_Resume(a1);
}

void sub_1002D8890(_Unwind_Exception *a1)
{
  sub_1002D83F0(v1);
  _Unwind_Resume(a1);
}

void sub_1002D88A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  if (*(char *)(v12 + 607) < 0) {
    operator delete(*v13);
  }
  sub_1002D2E58(v11);
  sub_1002D83F0(v10);
  _Unwind_Resume(a1);
}

void sub_1002D88E8(uint64_t a1)
{
  sub_1002D89B0(a1);

  operator delete();
}

BOOL sub_1002D8920(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 1032);
  if (!*(unsigned char *)(a2 + 1032))
  {
    long long v5 = (pthread_mutex_t **)(a1 + 576);
    sub_1002D2EC4((pthread_mutex_t **)(a1 + 576));
    size_t v6 = strlen((const char *)a2);
    sub_10026AA20((void *)(a1 + 8), a2, v6);
    std::ostream::flush();
    sub_1002D2ECC(v5);
  }
  return v2 == 0;
}

void sub_1002D8998(_Unwind_Exception *a1)
{
  sub_1002D2ECC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D89B0(uint64_t a1)
{
  *(void *)a1 = off_1004966A0;
  int v2 = (pthread_mutex_t **)(a1 + 576);
  sub_1002D2EC4((pthread_mutex_t **)(a1 + 576));
  uint64_t v3 = (void *)(a1 + 8);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
  }
  sub_1002D2ECC(v2);
  if (*(char *)(a1 + 607) < 0) {
    operator delete(*(void **)(a1 + 584));
  }
  sub_1002D2E58(v2);
  std::filebuf::~filebuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_1002D8B0C(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      int v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 170;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002D8BD8()
{
}

uint64_t sub_1002D8BEC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_1002D8C6C(int *a1)
{
  *(void *)a1 = off_100496720;
  sub_1002D3694(a1);
  sub_1002D32B8((uint64_t)a1);

  operator delete();
}

void sub_1002D8CD8()
{
}

void sub_1002D8D60()
{
}

void sub_1002D8D84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v4 = (void *)(a2 + 160);
    uint64_t v3 = *(atomic_uint **)(a2 + 160);
    if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    }
    *unint64_t v4 = 0;
    v4[1] = 0;
    sub_1002D8B0C(a2 + 24);
    operator delete();
  }
}

void sub_1002D8E30()
{
}

uint64_t sub_1002D8E44(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1002D8EC4()
{
  byte_1004E17D8 = sub_1002D4250("OPENCV_TRACE", 0);
  dword_1004E17DC = sub_1002D4494("OPENCV_TRACE_DEPTH_OPENCV", 1);
  dword_1004E17E0 = sub_1002D4494("OPENCV_TRACE_MAX_CHILDREN_OPENCV", 1000);
  dword_1004E17E4 = sub_1002D4494("OPENCV_TRACE_MAX_CHILDREN", 10000);
  sub_1002D47E8("OPENCV_TRACE_LOCATION", "OpenCVTrace", &qword_1004E1810);

  return __cxa_atexit((void (*)(void *))sub_10026BB58, &qword_1004E1810, (void *)&_mh_execute_header);
}

double sub_1002D8F80(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

uint64_t sub_1002D8F9C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (*(_DWORD *)(a1 + 76))
  {
    v5[0] = 0;
    v5[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v5, 13), "mapcount == 0", 13);
    sub_1002D2278(-215, v5, "~UMatData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 77);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF);
    atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF);
    if (!*(_DWORD *)(v2 + 20))
    {
      if (!*(_DWORD *)(v2 + 76)) {
        goto LABEL_15;
      }
      uint64_t v4 = *(void *)(v2 + 8);
      if (!v4) {
        uint64_t v4 = sub_10029230C();
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v2);
      if (!*(_DWORD *)(v2 + 20))
      {
LABEL_15:
        if (!*(_DWORD *)(v2 + 16)) {
          (*(void (**)(void, uint64_t))(**(void **)(v2 + 8) + 32))(*(void *)(v2 + 8), v2);
        }
      }
    }
    *(void *)(a1 + 80) = 0;
  }
  return a1;
}

void sub_1002D90EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a2 >= 0x21)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    qmemcpy((void *)sub_1002D19D8(&v29, 25), "0 <= _dims && _dims <= 32", 25);
    sub_1002D2278(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 182);
  }
  if (*(_DWORD *)(a1 + 4) != a2)
  {
    uint64_t v10 = *(void **)(a1 + 56);
    if (v10 != (void *)(a1 + 64))
    {
      j__free(v10);
      *(void *)(a1 + 48) = a1 + 8;
      *(void *)(a1 + 56) = a1 + 64;
    }
    if (a2 >= 3)
    {
      uint64_t v11 = 8 * a2;
      uint64_t v12 = (char *)sub_10020FDF8(v11 + 4 * (a2 + 1));
      *(void *)(a1 + 56) = v12;
      *(_DWORD *)&v12[v11] = a2;
      *(void *)(a1 + 48) = &v12[v11 + 4];
      *(void *)(a1 + 8) = -1;
    }
  }
  *(_DWORD *)(a1 + 4) = a2;
  if (a3)
  {
    uint64_t v13 = (a2 - 1);
    if (a2 >= 1)
    {
      int v14 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
      uint64_t v15 = (v14 << ((0xFA50u >> (2 * (*(unsigned char *)a1 & 7))) & 3));
      if (a4)
      {
        int v16 = *(_DWORD *)(a3 + 4 * v13);
        if (v16 < 0)
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          uint64_t v17 = sub_1002D19D8(&v29, 6);
          *(_DWORD *)uint64_t v17 = 1027481715;
          *(_WORD *)(v17 + 4) = 12320;
          sub_1002D2278(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 209);
        }
        *(_DWORD *)(*(void *)(a1 + 48) + 4 * v13) = v16;
        *(void *)(*(void *)(a1 + 56) + 8 * v13) = v15;
        if (a2 != 1)
        {
          uint64_t v18 = (a2 - 1);
          do
          {
            int v20 = *(_DWORD *)(a3 - 4 + 4 * v18);
            if (v20 < 0)
            {
              uint64_t v29 = 0;
              uint64_t v30 = 0;
              uint64_t v21 = sub_1002D19D8(&v29, 6);
              *(_DWORD *)uint64_t v21 = 1027481715;
              *(_WORD *)(v21 + 4) = 12320;
              sub_1002D2278(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 209);
            }
            *(_DWORD *)(*(void *)(a1 + 48) + 4 * v18 - 4) = v20;
            uint64_t v22 = v15;
            if (v18 <= v13) {
              uint64_t v22 = *(void *)(a4 - 8 + 8 * v18);
            }
            uint64_t v19 = *(void *)(a1 + 56) + 8 * v18--;
            *(void *)(v19 - 8) = v22;
          }
          while (v18 + 1 > 1);
        }
      }
      else if (a5)
      {
        uint64_t v23 = (v14 << ((0xFA50u >> (2 * (*(unsigned char *)a1 & 7))) & 3));
        do
        {
          int v25 = *(_DWORD *)(a3 + 4 * v13);
          if (v25 < 0)
          {
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v26 = sub_1002D19D8(&v29, 6);
            *(_DWORD *)uint64_t v26 = 1027481715;
            *(_WORD *)(v26 + 4) = 12320;
            sub_1002D2278(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 209);
          }
          *(_DWORD *)(*(void *)(a1 + 48) + 4 * v13) = v25;
          *(void *)(*(void *)(a1 + 56) + 8 * v13) = v23;
          v23 *= v25;
          BOOL v24 = v13-- <= 0;
        }
        while (!v24);
      }
      else
      {
        do
        {
          int v27 = *(_DWORD *)(a3 + 4 * v13);
          if (v27 < 0)
          {
            uint64_t v29 = 0;
            uint64_t v30 = 0;
            uint64_t v28 = sub_1002D19D8(&v29, 6);
            *(_DWORD *)uint64_t v28 = 1027481715;
            *(_WORD *)(v28 + 4) = 12320;
            sub_1002D2278(-215, &v29, "setSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 209);
          }
          *(_DWORD *)(*(void *)(a1 + 48) + 4 * v13) = v27;
          BOOL v24 = v13-- <= 0;
        }
        while (!v24);
      }
      if (a2 == 1)
      {
        *(_DWORD *)(a1 + 4) = 2;
        *(_DWORD *)(a1 + 12) = 1;
        *(void *)(*(void *)(a1 + 56) + 8) = v15;
      }
    }
  }
}

void sub_1002D946C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002D94B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v66 = 1124007936;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  memset(v67, 0, 24);
  int32x4_t v70 = &v67[1];
  uint64_t v71 = (char *)v72;
  v72[0] = 0;
  v72[1] = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    *(_DWORD *)a4 = 1124007936;
    *(void *)(a4 + 4) = 0;
    *(void *)(a4 + 20) = 0;
    *(void *)(a4 + 12) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 48) = a4 + 8;
    *(void *)(a4 + 56) = a4 + 64;
    *(void *)(a4 + 72) = 0;
LABEL_39:
    memset(v67, 0, 20);
    uint64_t v69 = 0;
    goto LABEL_40;
  }
  if (v5 == *(void *)(a1 + 24))
  {
LABEL_6:
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = sub_10029230C();
    uint64_t v12 = a2 | 0x3000000;
    if (v10) {
      uint64_t v11 = v10;
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, uint64_t))(*(void *)v11 + 16))(v11, *(unsigned int *)(a1 + 4), *(void *)(a1 + 64), *(_DWORD *)a1 & 0xFFF, *(void *)(a1 + 16), *(void *)(a1 + 72), a2 | 0x3000000, a3);
    uint64_t v14 = sub_10029230C();
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, v13, v12, a3) & 1) == 0)
    {
      uint64_t v15 = sub_10029230C();
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 24))(v15, v13, v12, a3) & 1) == 0)
      {
        uint64_t v55 = 0;
        unint64_t v56 = 0;
        uint64_t v16 = sub_1002D19D8(&v55, 9);
        *(unsigned char *)(v16 + 8) = 100;
        *(void *)uint64_t v16 = *(void *)"allocated";
        sub_1002D2278(-215, &v55, "getUMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 309);
      }
    }
    uint64_t v17 = *(void *)(a1 + 56);
    if (v17)
    {
      *(void *)(v13 + 80) = v17;
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
      atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1 + 56) + 16), 1u);
    }
    int v18 = *(_DWORD *)(a1 + 4);
    int v66 = *(_DWORD *)a1;
    sub_1002D90EC((uint64_t)&v66, v18, *(void *)(a1 + 64), *(void *)(a1 + 72), 0);
    int v19 = v67[0];
    uint64_t v20 = v67[0];
    if (v67[0] < 1)
    {
      int v22 = 0;
    }
    else
    {
      uint64_t v21 = 0;
      while ((int)v70[v21] <= 1)
      {
        if (v67[0] == ++v21)
        {
          int v22 = v67[0];
          goto LABEL_25;
        }
      }
      int v22 = v21;
    }
LABEL_25:
    uint64_t v30 = v71;
    while (1)
    {
      uint64_t v31 = v20 - 1;
      if (v20 - 1 <= v22) {
        break;
      }
      uint64_t v32 = (int)v70[v20 - 1];
      uint64_t v33 = &v71[8 * v20];
      unint64_t v34 = *((void *)v33 - 2);
      unint64_t v35 = *((void *)v33 - 1) * v32;
      uint64_t v20 = v31;
      if (v35 < v34)
      {
        unsigned int v36 = v66 & 0xFFFFBFFF;
        v66 &= ~0x4000u;
        if (v67[0] < 3) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
    }
    unsigned int v36 = v66 & 0xFFFFBFFF | 0x4000;
    int v66 = v36;
    if (v67[0] < 3) {
      goto LABEL_32;
    }
LABEL_31:
    *(void *)&v67[1] = -1;
LABEL_32:
    uint64_t v68 = v13;
    uint64_t v69 = 0;
    if (v13)
    {
      atomic_fetch_add((atomic_uint *volatile)(v13 + 16), 1u);
      unsigned int v36 = v66;
      int v19 = v67[0];
      uint64_t v38 = v68;
      uint64_t v37 = v69;
      uint64_t v30 = v71;
    }
    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    *(_DWORD *)a4 = v36;
    *(_DWORD *)(a4 + 4) = v19;
    *(void *)(a4 + 8) = *(void *)&v67[1];
    *(void *)(a4 + 16) = *(void *)&v67[3];
    *(_DWORD *)(a4 + 24) = v67[5];
    *(void *)(a4 + 32) = v38;
    *(void *)(a4 + 40) = v37;
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 48) = a4 + 8;
    *(void *)(a4 + 56) = a4 + 64;
    *(void *)(a4 + 72) = 0;
    if (v19 > 2)
    {
      *(void *)(a4 + 48) = v70;
      *(void *)(a4 + 56) = v30;
      int32x4_t v70 = &v67[1];
      uint64_t v71 = (char *)v72;
    }
    else
    {
      *(void *)(a4 + 64) = *v30;
      *(void *)(a4 + 72) = v30[1];
    }
    int v66 = 1124007936;
    goto LABEL_39;
  }
  int32x2_t v64 = 0;
  uint64_t v65 = 0;
  sub_1002951DC(a1, &v65, &v64);
  if (!*(void *)&v64)
  {
    if (*(void *)(a1 + 16) != *(void *)(a1 + 24))
    {
      uint64_t v55 = 0;
      unint64_t v56 = 0;
      uint64_t v9 = sub_1002D19D8(&v55, 17);
      *(unsigned char *)(v9 + 16) = 116;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)"data == datastart";
      sub_1002D2278(-215, &v55, "getUMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 287);
    }
    goto LABEL_6;
  }
  unsigned int v24 = *(_DWORD *)(a1 + 8);
  unsigned int v23 = *(_DWORD *)(a1 + 12);
  int v25 = *(_DWORD *)(a1 + 4);
  LODWORD(v55) = *(_DWORD *)a1;
  HIDWORD(v55) = v25;
  unint64_t v56 = __PAIR64__(v23, v24);
  long long v26 = *(_OWORD *)(a1 + 32);
  long long v57 = *(_OWORD *)(a1 + 16);
  long long v58 = v26;
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v59 = *(void *)(a1 + 48);
  uint64_t v60 = v27;
  unint64_t v61 = &v56;
  int64_t v62 = v63;
  v63[0] = 0;
  v63[1] = 0;
  if (v27)
  {
    atomic_fetch_add((atomic_uint *volatile)(v27 + 20), 1u);
    int v25 = *(_DWORD *)(a1 + 4);
  }
  if (v25 > 2)
  {
    HIDWORD(v55) = 0;
    sub_1002931A8((uint64_t)&v55, a1);
  }
  else
  {
    uint64_t v28 = *(void **)(a1 + 72);
    uint64_t v29 = v62;
    *(void *)int64_t v62 = *v28;
    v29[1] = v28[1];
  }
  sub_100295350((uint64_t)&v55, v64.u32[1], HIDWORD(v65) - (v64.i32[1] + v56), v64.u32[0], v65 - (v64.i32[0] + HIDWORD(v56)));
  sub_1002D94B4(v50, &v55, a2, a3);
  int32x2_t v47 = v64;
  unsigned int v48 = v23;
  unsigned int v49 = v24;
  sub_1002DAC08((int32x2_t *)a4, (uint64_t)v50, &v47);
  if (v51 && atomic_fetch_add((atomic_uint *volatile)(v51 + 16), 0xFFFFFFFF) == 1)
  {
    uint64_t v39 = v51;
    uint64_t v51 = 0;
    (*(void (**)(void))(**(void **)(v39 + 8) + 32))(*(void *)(v39 + 8));
  }
  if (SHIDWORD(v50[0]) >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = v52;
    do
      *(_DWORD *)(v41 + 4 * v40++) = 0;
    while (v40 < SHIDWORD(v50[0]));
  }
  uint64_t v51 = 0;
  if (v53 != &v54) {
    j__free(v53);
  }
  if (v60 && atomic_fetch_add((atomic_uint *volatile)(v60 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v55);
  }
  uint64_t v60 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  if (SHIDWORD(v55) >= 1)
  {
    uint64_t v42 = 0;
    unint64_t v43 = v61;
    do
      *((_DWORD *)v43 + v42++) = 0;
    while (v42 < SHIDWORD(v55));
  }
  if (v62 != v63) {
    j__free(v62);
  }
  if (v68 && atomic_fetch_add((atomic_uint *volatile)(v68 + 16), 0xFFFFFFFF) == 1)
  {
    uint64_t v44 = v68;
    uint64_t v68 = 0;
    (*(void (**)(void))(**(void **)(v44 + 8) + 32))(*(void *)(v44 + 8));
  }
  if (v67[0] >= 1)
  {
    uint64_t v45 = 0;
    unint64_t v46 = v70;
    do
      v46[v45++] = 0;
    while (v45 < v67[0]);
  }
LABEL_40:
  uint64_t v68 = 0;
  if (v71 != (char *)v72) {
    j__free(v71);
  }
}

void sub_1002D9AF8(_Unwind_Exception *a1)
{
  sub_1002D9C04(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D9C04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF) == 1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(void))(**(void **)(v3 + 8) + 32))(*(void *)(v3 + 8));
  }
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 48);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 4));
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void **)(a1 + 56);
  if (v6 != (void *)(a1 + 64)) {
    j__free(v6);
  }
  return a1;
}

void sub_1002D9CB8(uint64_t a1, int a2, uint64_t *__src, __int16 a4, int a5)
{
  uint64_t v5 = __src;
  *(_DWORD *)(a1 + 24) = a5;
  if (a2 > 0x20 || !__src)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    qmemcpy((void *)sub_1002D19D8(__dst, 27), "0 <= d && d <= 32 && _sizes", 27);
    sub_1002D2278(-215, __dst, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 337);
  }
  uint64_t v8 = a4 & 0xFFF;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    goto LABEL_25;
  }
  int v10 = *(_DWORD *)(a1 + 4);
  if (v10 == a2)
  {
    if (v8 != (*(_DWORD *)a1 & 0xFFF)) {
      goto LABEL_25;
    }
    if (a2 == 2)
    {
      if (*(_DWORD *)(a1 + 8) == *(_DWORD *)__src && *(_DWORD *)(a1 + 12) == *((_DWORD *)__src + 1)) {
        return;
      }
    }
    else if (a2 < 1)
    {
      LODWORD(v12) = 0;
      goto LABEL_22;
    }
LABEL_17:
    uint64_t v12 = 0;
    while (*(_DWORD *)(*(void *)(a1 + 48) + 4 * v12) == *((_DWORD *)__src + v12))
    {
      if (a2 == ++v12) {
        goto LABEL_23;
      }
    }
LABEL_22:
    if (v12 == a2)
    {
LABEL_23:
      if (a2 > 1 || *(_DWORD *)(*(void *)(a1 + 48) + 4) == 1) {
        return;
      }
    }
LABEL_25:
    uint64_t v11 = (void *)(a1 + 48);
    if (*(uint64_t **)(a1 + 48) != __src)
    {
      if (!v9) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
    if (a2 < 1) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (a2 != 1 || v10 >= 3) {
    goto LABEL_25;
  }
  if (v8 == (*(_DWORD *)a1 & 0xFFF)) {
    goto LABEL_17;
  }
  uint64_t v11 = (void *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) == __src)
  {
LABEL_29:
    memcpy(__dst, __src, 4 * a2);
LABEL_30:
    uint64_t v5 = __dst;
    if (!v9) {
      goto LABEL_33;
    }
  }
LABEL_31:
  if (atomic_fetch_add((atomic_uint *volatile)(v9 + 16), 0xFFFFFFFF) == 1)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(void))(**(void **)(v13 + 8) + 32))(*(void *)(v13 + 8));
  }
LABEL_33:
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *v11;
    do
      *(_DWORD *)(v15 + 4 * v14++) = 0;
    while (v14 < *(int *)(a1 + 4));
  }
  *(void *)(a1 + 32) = 0;
  if (a2)
  {
    *(_DWORD *)a1 = v8 | 0x42FF0000;
    sub_1002D90EC(a1, a2, (uint64_t)v5, 0, 1);
    *(void *)(a1 + 40) = 0;
    uint64_t v16 = *(unsigned int *)(a1 + 4);
    if ((int)v16 >= 3)
    {
      int v18 = (int *)(*v11 + 4);
      uint64_t v19 = 1;
      uint64_t v20 = v16 & 0xFFFFFFFE;
      uint64_t v21 = 1;
      do
      {
        v19 *= *(v18 - 1);
        v21 *= *v18;
        v18 += 2;
        v20 -= 2;
      }
      while (v20);
      uint64_t v17 = v21 * v19;
      uint64_t v22 = v16 - (v16 & 0xFFFFFFFE);
      if (v22)
      {
        unsigned int v23 = (int *)(*v11 + ((4 * v16) & 0x3FFFFFFF8));
        do
        {
          uint64_t v24 = *v23++;
          v17 *= v24;
          --v22;
        }
        while (v22);
      }
    }
    else
    {
      uint64_t v17 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
    }
    if (v17)
    {
      uint64_t v25 = *(void *)(a1 + 16);
      uint64_t v26 = sub_10029230C();
      if (!v25)
      {
        sub_10029230C();
        uint64_t v25 = v26;
      }
      uint64_t v27 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void, void, void, void))(*(void *)v25 + 16))(v25, *(unsigned int *)(a1 + 4), *(void *)(a1 + 48), v8, 0, *(void *)(a1 + 56), 0, *(unsigned int *)(a1 + 24));
      *(void *)(a1 + 32) = v27;
      if (!v27)
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v28 = sub_1002D19D8(&v41, 6);
        *(_WORD *)(v28 + 4) = 12320;
        *(_DWORD *)uint64_t v28 = 1025581173;
        sub_1002D2278(-215, &v41, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 377);
      }
      LODWORD(v16) = *(_DWORD *)(a1 + 4);
      if (*(void *)(*(void *)(a1 + 56) + 8 * ((int)v16 - 1)) != (((*(_DWORD *)a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)a1 & 7))) & 3))
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        qmemcpy((void *)sub_1002D19D8(&v41, 146), "step[dims-1] == (size_t)(((((flags) & ((512 - 1) << 3)) >> 3) + 1) << ((((sizeof(size_t)/4+1)*16384|0x3a50) >> ((flags) & ((1 << 3) - 1))*2) & 3))", 146);
        sub_1002D2278(-215, &v41, "create", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 385);
      }
    }
    uint64_t v29 = v16;
    uint64_t v30 = *v11;
    if ((int)v16 < 1)
    {
      int v32 = 0;
    }
    else
    {
      uint64_t v31 = 0;
      while (*(int *)(v30 + 4 * v31) <= 1)
      {
        if (v29 == ++v31)
        {
          int v32 = v29;
          goto LABEL_58;
        }
      }
      int v32 = v31;
    }
LABEL_58:
    uint64_t v33 = (int)v29;
    uint64_t v34 = v30 - 4;
    while (1)
    {
      uint64_t v35 = v33 - 1;
      if (v33 - 1 <= v32) {
        break;
      }
      uint64_t v36 = *(int *)(v34 + 4 * v33);
      uint64_t v37 = *(void *)(a1 + 56) + 8 * v33;
      unint64_t v38 = *(void *)(v37 - 16);
      unint64_t v39 = *(void *)(v37 - 8) * v36;
      uint64_t v33 = v35;
      if (v39 < v38)
      {
        *(_DWORD *)a1 &= ~0x4000u;
        if ((int)v29 < 3) {
          goto LABEL_65;
        }
        goto LABEL_64;
      }
    }
    *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFBFFF | 0x4000;
    if ((int)v29 < 3) {
      goto LABEL_65;
    }
LABEL_64:
    *(void *)(a1 + 8) = -1;
LABEL_65:
    uint64_t v40 = *(void *)(a1 + 32);
    if (v40) {
      atomic_fetch_add((atomic_uint *volatile)(v40 + 16), 1u);
    }
  }
}

void sub_1002DA1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DA318(uint64_t a1, uint64_t a2)
{
  sub_1002D90EC(a1, *(_DWORD *)(a2 + 4), 0, 0, 0);
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a2 + 48);
    uint64_t v6 = *(void *)(a2 + 56);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    do
    {
      *(_DWORD *)(v7 + 4 * v4) = *(_DWORD *)(v5 + 4 * v4);
      *(void *)(v8 + 8 * v4) = *(void *)(v6 + 8 * v4);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 4));
  }
}

uint64_t sub_1002DA390(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  return (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 32))();
}

uint64_t sub_1002DA3C0(uint64_t a1, _DWORD *a2, int *a3, uint64_t *a4)
{
  *(_DWORD *)a1 = 1124007936;
  *(void *)(a1 + 4) = 0;
  uint64_t v8 = (int *)(a1 + 4);
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = a1 + 32;
  int v10 = (_DWORD *)(a1 + 8);
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a1 + 8;
  *(void *)(a1 + 64) = 0;
  uint64_t v11 = (void *)(a1 + 64);
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  int v12 = a2[1];
  if (v12 < 2)
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v13 = sub_1002D19D8(&v51, 11);
    *(_DWORD *)(v13 + 7) = 840973630;
    *(void *)uint64_t v13 = *(void *)"m.dims >= 2";
    sub_1002D2278(-215, (uint64_t *)&v51, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 426);
  }
  if (v12 > 2)
  {
    uint64_t v43 = a1 + 8;
    bzero(v53, 0x440uLL);
    uint64_t v51 = v53;
    uint64_t v52 = v12;
    if (v12 > 0x88) {
      operator new[]();
    }
    uint64_t v19 = *a4;
    v53[0] = *(void *)a3;
    v53[1] = v19;
    uint64_t v20 = 2;
    do
      v51[v20++] = 0x7FFFFFFF80000000;
    while (v20 < (int)a2[1]);
    sub_1002DAF18((uint64_t)v44, (uint64_t)a2, (uint64_t)v51);
    uint64_t v21 = *(void *)(a1 + 32);
    if (v44 == (unsigned char *)a1)
    {
      if (v21 && atomic_fetch_add((atomic_uint *volatile)(v21 + 16), 0xFFFFFFFF) == 1)
      {
        uint64_t v29 = v46;
        uint64_t v46 = 0;
        (*(void (**)(void))(**(void **)(v29 + 8) + 32))(*(void *)(v29 + 8));
      }
      goto LABEL_45;
    }
    if (v21 && atomic_fetch_add((atomic_uint *volatile)(v21 + 16), 0xFFFFFFFF) == 1)
    {
      uint64_t v22 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
      (*(void (**)(void))(**(void **)(v22 + 8) + 32))(*(void *)(v22 + 8));
    }
    if (*v8 >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(a1 + 48);
      do
        *(_DWORD *)(v24 + 4 * v23++) = 0;
      while (v23 < *v8);
    }
    int v25 = *(_DWORD *)&v44[4];
    *(_OWORD *)a1 = *(_OWORD *)v44;
    *(void *)(a1 + 16) = *(void *)&v44[16];
    *(_DWORD *)(a1 + 24) = v45;
    uint64_t v26 = v47;
    *(void *)(a1 + 32) = v46;
    *(void *)(a1 + 40) = v26;
    uint64_t v27 = *(void **)(a1 + 56);
    if (v27 == v11)
    {
      uint64_t v28 = v49;
      if (v25 <= 2) {
        goto LABEL_32;
      }
    }
    else
    {
      j__free(v27);
      *(void *)(a1 + 48) = v43;
      *(void *)(a1 + 56) = v11;
      uint64_t v28 = v49;
      if (*(int *)&v44[4] <= 2)
      {
LABEL_32:
        *(void *)(a1 + 64) = *v28;
        *(void *)(a1 + 72) = v28[1];
LABEL_44:
        *(_DWORD *)uint64_t v44 = 1124007936;
        memset(&v44[4], 0, 20);
        uint64_t v46 = 0;
        uint64_t v47 = 0;
LABEL_45:
        if (*(int *)&v44[4] >= 1)
        {
          uint64_t v35 = 0;
          uint64_t v36 = v48;
          do
            *(_DWORD *)&v36[4 * v35++] = 0;
          while (v35 < *(int *)&v44[4]);
        }
        uint64_t v46 = 0;
        if (v49 != v50) {
          j__free(v49);
        }
        if (v51 != v53 && v51 != 0) {
          operator delete[]();
        }
        return a1;
      }
    }
    *(void *)(a1 + 48) = v48;
    *(void *)(a1 + 56) = v28;
    unsigned int v48 = &v44[8];
    unsigned int v49 = v50;
    goto LABEL_44;
  }
  sub_1002DAA7C(a1, (uint64_t)a2);
  int v14 = *a3;
  int v15 = a3[1];
  if ((*a3 != 0x80000000 || v15 != 0x7FFFFFFF) && (v14 || v15 != *v10))
  {
    if (v14 < 0 || v14 > v15 || v15 > a2[2])
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      qmemcpy((void *)sub_1002D19D8(&v51, 83), "0 <= _rowRange.start && _rowRange.start <= _rowRange.end && _rowRange.end <= m.rows", 83);
      sub_1002D2278(-215, (uint64_t *)&v51, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 441);
    }
    *(_DWORD *)(a1 + 8) = v15 - v14;
    *(void *)(a1 + 40) += *(void *)(a1 + 64) * v14;
    *(_DWORD *)a1 |= 0x8000u;
  }
  int v16 = *(_DWORD *)a4;
  int v17 = *((_DWORD *)a4 + 1);
  if (*(_DWORD *)a4 == 0x80000000 && v17 == 0x7FFFFFFF || !v16 && v17 == *(_DWORD *)(a1 + 12))
  {
    BOOL v18 = *v10 < 1;
    if (*v10 == 1)
    {
LABEL_20:
      *(_DWORD *)a1 |= 0x4000u;
      goto LABEL_61;
    }
  }
  else
  {
    if (v16 < 0 || v16 > v17 || v17 > a2[3])
    {
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      qmemcpy((void *)sub_1002D19D8(&v51, 83), "0 <= _colRange.start && _colRange.start <= _colRange.end && _colRange.end <= m.cols", 83);
      sub_1002D2278(-215, (uint64_t *)&v51, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 449);
    }
    int v30 = v17 - v16;
    *(_DWORD *)(a1 + 12) = v30;
    int v31 = *(_DWORD *)(a1 + 4);
    BOOL v32 = __OFSUB__(v31, 1);
    int v33 = v31 - 1;
    if (v33 < 0 != v32) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8 * v33);
    }
    *(void *)(a1 + 40) += v34 * v16;
    if (v30 >= a2[3]) {
      int v38 = -32769;
    }
    else {
      int v38 = -49153;
    }
    *(_DWORD *)a1 = v38 & *(_DWORD *)a1 | 0x8000;
    BOOL v18 = *v10 < 1;
    if (*v10 == 1) {
      goto LABEL_20;
    }
  }
  if (!v18)
  {
LABEL_61:
    if (*(int *)(a1 + 12) > 0) {
      return a1;
    }
  }
  if (*(void *)v9 && atomic_fetch_add((atomic_uint *volatile)(*(void *)v9 + 16), 0xFFFFFFFF) == 1)
  {
    uint64_t v39 = *(void *)v9;
    *(void *)uint64_t v9 = 0;
    (*(void (**)(void))(**(void **)(v39 + 8) + 32))(*(void *)(v39 + 8));
  }
  if (*v8 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = *(void *)(a1 + 48);
    do
      *(_DWORD *)(v41 + 4 * v40++) = 0;
    while (v40 < *v8);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)int v10 = 0;
  return a1;
}

void sub_1002DA9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DAA7C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 16), 1u);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && atomic_fetch_add((atomic_uint *volatile)(v5 + 16), 0xFFFFFFFF) == 1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    (*(void (**)(void))(**(void **)(v6 + 8) + 32))(*(void *)(v6 + 8));
  }
  if (*(int *)(a1 + 4) <= 0)
  {
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)a1 = *(_DWORD *)a2;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 48);
    do
    {
      *(_DWORD *)(v8 + 4 * v7++) = 0;
      uint64_t v9 = *(int *)(a1 + 4);
    }
    while (v7 < v9);
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if ((int)v9 >= 3)
    {
      int v10 = *(_DWORD *)(a2 + 4);
      goto LABEL_15;
    }
  }
  int v10 = *(_DWORD *)(a2 + 4);
  if (v10 > 2)
  {
LABEL_15:
    sub_1002D90EC(a1, v10, 0, 0, 0);
    if (*(int *)(a1 + 4) >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(a2 + 48);
      uint64_t v15 = *(void *)(a2 + 56);
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = *(void *)(a1 + 56);
      do
      {
        *(_DWORD *)(v16 + 4 * v13) = *(_DWORD *)(v14 + 4 * v13);
        *(void *)(v17 + 8 * v13) = *(void *)(v15 + 8 * v13);
        ++v13;
      }
      while (v13 < *(int *)(a1 + 4));
    }
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 4) = v10;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v11 = *(void **)(a2 + 56);
  int v12 = *(void **)(a1 + 56);
  void *v12 = *v11;
  v12[1] = v11[1];
LABEL_18:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (!*(_DWORD *)(a1 + 24)) {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  }
  uint64_t v18 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v18;
  return a1;
}

int32x2_t *sub_1002DAC08(int32x2_t *result, uint64_t a2, int32x2_t *a3)
{
  uint64_t v3 = result;
  unsigned __int32 v4 = *(_DWORD *)a2;
  result->i32[0] = *(_DWORD *)a2;
  result->i32[1] = 2;
  result[1] = vrev64_s32(a3[1]);
  int32x2_t v5 = *(int32x2_t *)(a2 + 16);
  __int32 v6 = *(_DWORD *)(a2 + 24);
  int32x2_t v7 = *(int32x2_t *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = a3->i32[1];
  uint64_t v10 = **(void **)(a2 + 56);
  result[8] = 0;
  result[2] = v5;
  result[3].i32[0] = v6;
  int32x2_t v11 = (int32x2_t)(v8 + v10 * v9);
  result[4] = v7;
  result[5] = v11;
  result[6] = (int32x2_t)&result[1];
  result[7] = (int32x2_t)&result[8];
  result[9] = 0;
  if (*(int *)(a2 + 4) >= 3)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v12 = sub_1002D19D8(&v26, 11);
    *(_DWORD *)(v12 + 7) = 840973628;
    *(void *)uint64_t v12 = *(void *)"m.dims <= 2";
    sub_1002D2278(-215, &v26, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 471);
  }
  __int32 v13 = *(_DWORD *)(a2 + 12);
  __int32 v15 = a3[1].i32[0];
  __int32 v14 = a3[1].i32[1];
  if (v15 >= v13) {
    int v16 = -1;
  }
  else {
    int v16 = -16385;
  }
  result->i32[0] = v16 & v4 | ((v14 == 1) << 14);
  uint64_t v17 = (((v4 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v4 & 7))) & 3);
  __int32 v18 = a3->i32[0];
  result[5] = (int32x2_t)(*(void *)&v11 + (int)v17 * (uint64_t)a3->i32[0]);
  if (v18 < 0
    || v15 < 0
    || v18 + v15 > v13
    || (__int32 v19 = a3->i32[1], v19 < 0)
    || v14 < 0
    || v19 + v14 > *(_DWORD *)(a2 + 8))
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    qmemcpy((void *)sub_1002D19D8(&v26, 124), "0 <= roi.x && 0 <= roi.width && roi.x + roi.width <= m.cols && 0 <= roi.y && 0 <= roi.height && roi.y + roi.height <= m.rows", 124);
    sub_1002D2278(-215, &v26, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 478);
  }
  int32x2_t v20 = result[4];
  if (v20) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&v20 + 16), 1u);
  }
  if (a3[1].i32[0] < *(_DWORD *)(a2 + 12) || a3[1].i32[1] < *(_DWORD *)(a2 + 8)) {
    result->i32[0] |= 0x8000u;
  }
  uint64_t v21 = (void *)result[7];
  *uint64_t v21 = **(void **)(a2 + 56);
  v21[1] = v17;
  if (result[1].i32[0] < 1 || result[1].i32[1] <= 0)
  {
    int32x2_t v22 = result[4];
    if (*(void *)&v22 && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v22 + 16), 0xFFFFFFFF) == 1)
    {
      int32x2_t v23 = result[4];
      result[4] = 0;
      (*(void (**)(void))(**(void **)(*(void *)&v23 + 8) + 32))(*(void *)(*(void *)&v23 + 8));
    }
    if (v3->i32[1] >= 1)
    {
      uint64_t v24 = 0;
      int32x2_t v25 = v3[6];
      do
        *(_DWORD *)(*(void *)&v25 + 4 * v24++) = 0;
      while (v24 < v3->i32[1]);
    }
    int v3[4] = 0;
    v3[1] = 0;
    return v3;
  }
  return result;
}

void sub_1002DAEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002DAF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1124007936;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = a1 + 8;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 72) = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 4);
  if (!a3)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v6 = sub_1002D19D8(&v28, 6);
    *(_DWORD *)uint64_t v6 = 1735287154;
    *(_WORD *)(v6 + 4) = 29541;
    sub_1002D2278(-215, &v28, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 499);
  }
  if ((int)v5 <= 0)
  {
    sub_1002DAA7C(a1, a2);
  }
  else
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      int v9 = *(_DWORD *)(a3 + 8 * i);
      int v8 = *(_DWORD *)(a3 + 8 * i + 4);
      BOOL v10 = v9 == 0x80000000 && v8 == 0x7FFFFFFF;
      if (!v10 && (v9 < 0 || v9 >= v8 || *(_DWORD *)(*(void *)(a2 + 48) + 4 * i) < v8))
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        qmemcpy((void *)sub_1002D19D8(&v28, 76), "r == Range::all() || (0 <= r.start && r.start < r.end && r.end <= m.size[i])", 76);
        sub_1002D2278(-215, &v28, "UMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 503);
      }
    }
    sub_1002DAA7C(a1, a2);
    for (uint64_t j = 0; j != v5; ++j)
    {
      uint64_t v12 = *(void *)(a3 + 8 * j);
      if (v12 != 0x80000000 || HIDWORD(v12) != 0x7FFFFFFF)
      {
        uint64_t v14 = *(void *)(a1 + 48);
        if (v12) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = *(_DWORD *)(v14 + 4 * j) == HIDWORD(v12);
        }
        if (!v15)
        {
          *(_DWORD *)(v14 + 4 * j) = HIDWORD(v12) - v12;
          *(void *)(a1 + 40) += *(void *)(*(void *)(a1 + 56) + 8 * j) * (int)v12;
          *(_DWORD *)a1 |= 0x8000u;
        }
      }
    }
  }
  uint64_t v16 = *(unsigned int *)(a1 + 4);
  uint64_t v17 = (int)v16;
  uint64_t v18 = *(void *)(a1 + 48);
  if ((int)v16 < 1)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = 0;
    while (*(int *)(v18 + 4 * v19) <= 1)
    {
      if (v16 == ++v19)
      {
        LODWORD(v19) = *(_DWORD *)(a1 + 4);
        break;
      }
    }
  }
  uint64_t v20 = v18 - 4;
  while (1)
  {
    uint64_t v21 = v17 - 1;
    if (v17 - 1 <= (int)v19) {
      break;
    }
    uint64_t v22 = *(int *)(v20 + 4 * v17);
    uint64_t v23 = *(void *)(a1 + 56) + 8 * v17;
    unint64_t v24 = *(void *)(v23 - 16);
    unint64_t v25 = *(void *)(v23 - 8) * v22;
    uint64_t v17 = v21;
    if (v25 < v24)
    {
      int v26 = 0;
      goto LABEL_37;
    }
  }
  int v26 = 0x4000;
LABEL_37:
  *(_DWORD *)a1 = *(_DWORD *)a1 & 0xFFFFBFFF | v26;
  return a1;
}

void sub_1002DB1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002DB1F4(uint64_t a1, uint64_t a2)
{
  sub_1002D6AE8(v68, &off_1004967A8);
  int v4 = sub_10029AB74((int *)a2, -1);
  if (sub_10029E6C8((_DWORD *)a2) && v4 != (*(_DWORD *)a1 & 0xFFF))
  {
    if ((((unsigned __int16)*(_DWORD *)a1 ^ (unsigned __int16)v4) & 0xFF8) != 0)
    {
      v72[0] = 0uLL;
      qmemcpy((void *)sub_1002D19D8(v72, 55), "channels() == ((((dtype) & ((512 - 1) << 3)) >> 3) + 1)", 55);
      sub_1002D2278(-215, (uint64_t *)v72, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 820);
    }
    sub_1002DBC88(a1, (int *)a2, v4, 1.0, 0.0);
    goto LABEL_20;
  }
  if (!*(void *)(a1 + 32)) {
    goto LABEL_19;
  }
  uint64_t v5 = *(int *)(a1 + 4);
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  if ((int)v5 >= 3)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    int v9 = (int *)(v8 + 4);
    uint64_t v10 = 1;
    uint64_t v11 = v6 & 0xFFFFFFFE;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    uint64_t v7 = v12 * v10;
    uint64_t v13 = v6 - (v6 & 0xFFFFFFFE);
    if (v13)
    {
      uint64_t v14 = (int *)(v8 + ((4 * v6) & 0x3FFFFFFF8));
      do
      {
        uint64_t v15 = *v14++;
        v7 *= v15;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    uint64_t v7 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
  }
  if (!v6 || !v7)
  {
LABEL_19:
    sub_10029E05C(a2);
    goto LABEL_20;
  }
  memset(v73, 0, sizeof(v73));
  memset(v72, 0, sizeof(v72));
  if ((int)v6 < 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(a1 + 48);
  }
  else
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * (v5 - 1));
    uint64_t v17 = *(void *)(a1 + 48);
    if (v6 < 8)
    {
      unint64_t v18 = 0;
LABEL_27:
      uint64_t v27 = v5 - v18;
      uint64_t v28 = (void *)v72 + v18;
      uint64_t v29 = (int *)(v17 + 4 * v18);
      do
      {
        uint64_t v30 = *v29++;
        *v28++ = v30;
        --v27;
      }
      while (v27);
      goto LABEL_29;
    }
  }
  unint64_t v18 = v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = v17 + 16;
  uint64_t v20 = v73;
  unint64_t v21 = v5 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    long long v22 = *(_OWORD *)(v19 - 16);
    *(void *)&long long v23 = (int)v22;
    *((void *)&v23 + 1) = SDWORD1(v22);
    long long v24 = v23;
    *(void *)&long long v23 = SDWORD2(v22);
    *((void *)&v23 + 1) = SHIDWORD(v22);
    long long v25 = v23;
    *(void *)&long long v23 = (int)*(_OWORD *)v19;
    *((void *)&v23 + 1) = (int)HIDWORD(*(void *)v19);
    long long v26 = v23;
    *(void *)&long long v23 = (int)*(void *)(v19 + 8);
    *((void *)&v23 + 1) = (int)HIDWORD(*(_OWORD *)v19);
    *(v20 - 2) = v24;
    *(v20 - 1) = v25;
    *uint64_t v20 = v26;
    v20[1] = v23;
    v20 += 4;
    v19 += 32;
    v21 -= 8;
  }
  while (v21);
  if (v18 != v5) {
    goto LABEL_27;
  }
LABEL_29:
  uint64_t v31 = 8 * ((int)v6 - 1);
  *(void *)((char *)v72 + v31) *= v16;
  if ((int)v5 >= 1)
  {
    unint64_t v32 = *(void *)(a1 + 40);
    int v33 = *(unint64_t **)(a1 + 56);
    uint64_t v34 = (unint64_t *)v71;
    uint64_t v35 = v6;
    do
    {
      unint64_t v36 = *v33++;
      *v34++ = v32 / v36;
      v32 %= v36;
      --v35;
    }
    while (v35);
  }
  *(void *)&v71[v31] *= v16;
  sub_100295520((int *)a2, v6, *(uint64_t **)(a1 + 48), *(_DWORD *)a1 & 0xFFF, 0xFFFFFFFF, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 655360)
  {
    sub_10029B0D0(a2, -1, (uint64_t)&v59);
    uint64_t v37 = v61;
    if (!(void)v61)
    {
      v67[0] = 0;
      v67[1] = 0;
      uint64_t v38 = sub_1002D19D8(v67, 5);
      *(unsigned char *)(v38 + 4) = 117;
      *(_DWORD *)uint64_t v38 = 779383652;
      sub_1002D2278(-215, v67, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 842);
    }
    if (v61 != *(_OWORD *)(a1 + 32))
    {
      uint64_t v39 = *(void *)(*(void *)(a1 + 32) + 8);
      if (v39 != *(void *)(v61 + 8))
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v61 + 16), 0xFFFFFFFF) == 1)
        {
          uint64_t v40 = v61;
          *(void *)&long long v61 = 0;
          (*(void (**)(void))(**(void **)(v40 + 8) + 32))(*(void *)(v40 + 8));
        }
        if (SDWORD1(v59) >= 1)
        {
          uint64_t v41 = 0;
          uint64_t v42 = v62;
          do
            *(_DWORD *)(v42 + 4 * v41++) = 0;
          while (v41 < SDWORD1(v59));
        }
        *(void *)&long long v61 = 0;
        if (v63 != &v64) {
          j__free(v63);
        }
        goto LABEL_44;
      }
      if ((uint64_t)v59 > 0)
      {
        unint64_t v51 = 0;
        unint64_t v52 = *((void *)&v61 + 1);
        uint64_t v53 = (char *)v63;
        uint64_t v54 = 8 * DWORD1(v59);
        do
        {
          unint64_t v55 = *(void *)&v53[v51];
          v70[v51 / 8] = v52 / v55;
          v52 %= v55;
          v51 += 8;
        }
        while (v54 != v51);
      }
      v70[*(_DWORD *)(a1 + 4) - 1] *= v16;
      (*(void (**)(uint64_t))(*(void *)v39 + 72))(v39);
      uint64_t v37 = v61;
    }
    if (v37 && atomic_fetch_add((atomic_uint *volatile)(v37 + 16), 0xFFFFFFFF) == 1)
    {
      uint64_t v56 = v61;
      *(void *)&long long v61 = 0;
      (*(void (**)(void))(**(void **)(v56 + 8) + 32))(*(void *)(v56 + 8));
    }
    if (SDWORD1(v59) >= 1)
    {
      uint64_t v57 = 0;
      uint64_t v58 = v62;
      do
        *(_DWORD *)(v58 + 4 * v57++) = 0;
      while (v57 < SDWORD1(v59));
    }
    *(void *)&long long v61 = 0;
    uint64_t v50 = v63;
    if (v63 != &v64) {
      goto LABEL_58;
    }
    goto LABEL_20;
  }
LABEL_44:
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v43 = *(void *)(a2 + 8);
    long long v44 = *(_OWORD *)(v43 + 16);
    long long v59 = *(_OWORD *)v43;
    long long v60 = v44;
    long long v61 = *(_OWORD *)(v43 + 32);
    int v45 = *(atomic_uint **)(v43 + 56);
    uint64_t v62 = *(void *)(v43 + 48);
    unint64_t v63 = v45;
    int32x2_t v64 = (char *)&v59 + 8;
    uint64_t v65 = v66;
    v66[0] = 0;
    v66[1] = 0;
    if (v45) {
      atomic_fetch_add(v45 + 5, 1u);
    }
    if (*(int *)(v43 + 4) > 2)
    {
      DWORD1(v59) = 0;
      sub_1002931A8((uint64_t)&v59, v43);
    }
    else
    {
      uint64_t v46 = *(void **)(v43 + 72);
      uint64_t v47 = v65;
      *(void *)uint64_t v65 = *v46;
      v47[1] = v46[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v59);
  }
  (*(void (**)(void, void, void, void, _OWORD *, unsigned char *, void, void *))(**(void **)(*(void *)(a1 + 32) + 8)
                                                                                            + 56))(*(void *)(*(void *)(a1 + 32) + 8), *(void *)(a1 + 32), v60, *(unsigned int *)(a1 + 4), v72, v71, *(void *)(a1 + 56), v65);
  if (v63 && atomic_fetch_add((atomic_uint *volatile)v63 + 5, 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v59);
  }
  unint64_t v63 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  if (SDWORD1(v59) >= 1)
  {
    uint64_t v48 = 0;
    unsigned int v49 = v64;
    do
      *(_DWORD *)&v49[4 * v48++] = 0;
    while (v48 < SDWORD1(v59));
  }
  uint64_t v50 = v65;
  if (v65 != v66) {
LABEL_58:
  }
    j__free(v50);
LABEL_20:
  if (v69) {
    sub_1002D6888(v68);
  }
}

void sub_1002DB89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1002D9C04((uint64_t)va);
  sub_10020FA00((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002DB8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002DB8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1002D1A1C((uint64_t *)&STACK[0x290]);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002DB908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002DB920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002DB93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002DB950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002DB964(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DB994@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *(void *)(result + 32);
  if (v4)
  {
    uint64_t v6 = result;
    unint64_t v14 = *(void *)(result + 32);
    sub_1002D2EC4((pthread_mutex_t **)&unk_1004E1850 + v4 % 0x1F);
    if (!atomic_fetch_add((atomic_uint *volatile)(*(void *)(v6 + 32) + 20), 1u)) {
      (*(void (**)(void, void, void))(**(void **)(*(void *)(v6 + 32) + 8) + 40))(*(void *)(*(void *)(v6 + 32) + 8), *(void *)(v6 + 32), a2 | 0x3000000u);
    }
    uint64_t v7 = *(void *)(v6 + 32);
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      sub_10029120C(a3, *(_DWORD *)(v6 + 4), *(void *)(v6 + 48), *(_WORD *)v6 & 0xFFF, v8 + *(void *)(v6 + 40), *(void *)(v6 + 56));
      *(_DWORD *)a3 = *(_DWORD *)v6;
      uint64_t v9 = *(void *)(v6 + 32);
      uint64_t v10 = *(void *)(v6 + 40);
      *(void *)(a3 + 56) = v9;
      uint64_t v11 = *(void *)(v9 + 24);
      *(void *)(a3 + 16) = v11 + v10;
      *(void *)(a3 + 24) = v11;
      uint64_t v12 = v11 + *(void *)(v9 + 40);
      *(void *)(a3 + 32) = v12;
      *(void *)(a3 + 40) = v12;
    }
    else
    {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 0xFFFFFFFF);
      if (!*(void *)(*(void *)(v6 + 32) + 24))
      {
        v13[0] = 0;
        v13[1] = 0;
        qmemcpy((void *)sub_1002D19D8(v13, 55), "u->data != 0 && \"Error mapping of UMat to host memory.\"", 55);
        sub_1002D2278(-215, v13, "getMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/umatrix.cpp", 778);
      }
      *(_DWORD *)a3 = 1124007936;
      *(_OWORD *)(a3 + 4) = 0u;
      *(_OWORD *)(a3 + 20) = 0u;
      *(_OWORD *)(a3 + 36) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 64) = a3 + 8;
      *(void *)(a3 + 72) = a3 + 80;
      *(void *)(a3 + 88) = 0;
    }
    return sub_1002D2ECC((pthread_mutex_t **)&unk_1004E1850 + v14 % 0x1F);
  }
  else
  {
    *(_DWORD *)a3 = 1124007936;
    *(_OWORD *)(a3 + 4) = 0u;
    *(_OWORD *)(a3 + 20) = 0u;
    *(_OWORD *)(a3 + 36) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 64) = a3 + 8;
    *(void *)(a3 + 72) = a3 + 80;
    *(void *)(a3 + 88) = 0;
  }
  return result;
}

void sub_1002DBBC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002DBBF4((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_1002DBBF4(void *a1)
{
  uint64_t v2 = ((unint64_t)*a1 * (unsigned __int128)0x842108421084211uLL) >> 64;
  sub_1002D2ECC((pthread_mutex_t **)&unk_1004E1850 + *a1 - 31 * ((v2 + ((unint64_t)(*a1 - v2) >> 1)) >> 4));
  return a1;
}

uint64_t sub_1002DBC58(uint64_t result, unint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 4);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = *(void *)(result + 40);
    unint64_t v4 = *(unint64_t **)(result + 56);
    do
    {
      unint64_t v5 = *v4++;
      *a2++ = v3 / v5;
      v3 %= v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_1002DBC88(uint64_t a1, int *a2, int a3, double a4, double a5)
{
  sub_1002D6AE8(v48, &off_1004967C8);
  BOOL v10 = fabs(a4 + -1.0) >= 2.22044605e-16;
  char v11 = fabs(a5) >= 2.22044605e-16 || v10;
  int v12 = *(_DWORD *)a1;
  if ((a3 & 0x80000000) == 0)
  {
    int v13 = *(_DWORD *)a1 & 0xFF8 | a3 & 7;
    if (((v13 ^ v12) & 7) != 0) {
      char v14 = 1;
    }
    else {
      char v14 = v11;
    }
    if (v14) {
      goto LABEL_17;
    }
LABEL_15:
    sub_1002DB1F4(a1, a2);
    goto LABEL_40;
  }
  if (!sub_10029E6C8(a2))
  {
    int v13 = v12 & 0xFFF;
    if (v11) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  int v13 = sub_10029AB74(a2, -1);
  if (((v13 ^ v12) & 7) != 0) {
    char v15 = 1;
  }
  else {
    char v15 = v11;
  }
  if ((v15 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_17:
  long long v16 = *(_OWORD *)a1;
  long long v40 = *(_OWORD *)a1;
  uint64_t v41 = *(void *)(a1 + 16);
  int v42 = *(_DWORD *)(a1 + 24);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v43 = v17;
  uint64_t v44 = v18;
  int v45 = (char *)&v40 + 8;
  uint64_t v46 = v47;
  v47[0] = 0;
  v47[1] = 0;
  if (!v17)
  {
    int v19 = DWORD1(v16);
    if (SDWORD1(v16) <= 2) {
      goto LABEL_19;
    }
LABEL_21:
    DWORD1(v40) = 0;
    sub_1002D90EC((uint64_t)&v40, v19, 0, 0, 0);
    if (SDWORD1(v40) >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v24 = *(void *)(a1 + 56);
      long long v25 = v45;
      long long v26 = v46;
      do
      {
        *(_DWORD *)&v25[4 * v22] = *(_DWORD *)(v23 + 4 * v22);
        v26[v22] = *(void *)(v24 + 8 * v22);
        ++v22;
      }
      while (v22 < SDWORD1(v40));
    }
    goto LABEL_24;
  }
  atomic_fetch_add((atomic_uint *volatile)(v17 + 16), 1u);
  int v19 = *(_DWORD *)(a1 + 4);
  if (v19 > 2) {
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v20 = *(void **)(a1 + 56);
  unint64_t v21 = v46;
  *(void *)uint64_t v46 = *v20;
  v21[1] = v20[1];
LABEL_24:
  sub_1002DB994(a1, 0x1000000, (uint64_t)&v32);
  sub_10024011C(&v32, (uint64_t)a2, v13, a4, a5);
  if (v36 && atomic_fetch_add((atomic_uint *volatile)(v36 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v32);
  }
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  if (v33 >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v37;
    do
      *(_DWORD *)(v28 + 4 * v27++) = 0;
    while (v27 < v33);
  }
  if (v38 != &v39) {
    j__free(v38);
  }
  if (v43 && atomic_fetch_add((atomic_uint *volatile)(v43 + 16), 0xFFFFFFFF) == 1)
  {
    uint64_t v29 = v43;
    uint64_t v43 = 0;
    (*(void (**)(void))(**(void **)(v29 + 8) + 32))(*(void *)(v29 + 8));
  }
  if (SDWORD1(v40) >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v45;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < SDWORD1(v40));
  }
  uint64_t v43 = 0;
  if (v46 != v47) {
    j__free(v46);
  }
LABEL_40:
  if (v49) {
    sub_1002D6888(v48);
  }
}

void sub_1002DBF8C(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1002DBFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1002D9C04((uint64_t)&a21);
  sub_10020FA00(v21 - 96);
  _Unwind_Resume(a1);
}

void sub_1002DBFD4(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1002DBFE8(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DC000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002D6AE8(v18, &off_1004967E8);
  if (sub_10029D69C(a3)) {
    int v6 = 0x2000000;
  }
  else {
    int v6 = 50331648;
  }
  sub_1002DB994(a1, v6, (uint64_t)v10);
  sub_100255630((uint64_t)v10, a2, a3);
  if (v14 && atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v10);
  }
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  if (v11 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v15;
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < v11);
  }
  if (v16 != &v17) {
    j__free(v16);
  }
  if (v19) {
    sub_1002D6888(v18);
  }
  return a1;
}

void sub_1002DC108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000094F4((uint64_t)&a9);
  sub_10020FA00(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_1002DC124(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1002DC138(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 48);
  _Unwind_Resume(a1);
}

pthread_mutex_t **sub_1002DC14C()
{
  sub_1002D2E58(&qword_1004E1940);
  sub_1002D2E58(&qword_1004E1938);
  sub_1002D2E58(&qword_1004E1930);
  sub_1002D2E58(&qword_1004E1928);
  sub_1002D2E58(&qword_1004E1920);
  sub_1002D2E58(&qword_1004E1918);
  sub_1002D2E58(&qword_1004E1910);
  sub_1002D2E58(&qword_1004E1908);
  sub_1002D2E58(&qword_1004E1900);
  sub_1002D2E58(&qword_1004E18F8);
  sub_1002D2E58(&qword_1004E18F0);
  sub_1002D2E58(&qword_1004E18E8);
  sub_1002D2E58(&qword_1004E18E0);
  sub_1002D2E58(&qword_1004E18D8);
  sub_1002D2E58(&qword_1004E18D0);
  sub_1002D2E58(&qword_1004E18C8);
  sub_1002D2E58(&qword_1004E18C0);
  sub_1002D2E58(&qword_1004E18B8);
  sub_1002D2E58(&qword_1004E18B0);
  sub_1002D2E58(&qword_1004E18A8);
  sub_1002D2E58(&qword_1004E18A0);
  sub_1002D2E58(&qword_1004E1898);
  sub_1002D2E58(&qword_1004E1890);
  sub_1002D2E58(&qword_1004E1888);
  sub_1002D2E58(&qword_1004E1880);
  sub_1002D2E58(&qword_1004E1878);
  sub_1002D2E58(&qword_1004E1870);
  sub_1002D2E58(&qword_1004E1868);
  sub_1002D2E58(&qword_1004E1860);
  sub_1002D2E58(&qword_1004E1858);

  return sub_1002D2E58(&qword_1004E1850);
}

void sub_1002DC274()
{
}

void sub_1002DC4B0(_Unwind_Exception *a1)
{
  do
    sub_1002D2E58(--v2);
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DC4D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_1002DC4D8(uint64_t result)
{
  if (!*(unsigned char *)(result + 8)) {
    operator new[]();
  }
  return result;
}

double sub_1002DC53C(uint64_t a1)
{
  *(void *)a1 = off_100496818;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)&double result = 0x8000;
  *(void *)(a1 + 48) = 0x8000;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1002DC578(uint64_t a1)
{
  *(void *)a1 = off_100496818;
  uint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 56) = 0;
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_1002DC608(uint64_t a1)
{
  *(void *)a1 = off_100496818;
  uint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 56) = 0;
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);

  operator delete();
}

FILE *sub_1002DC6B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 52) + (uint64_t)(*(_DWORD *)(a1 + 32) - (int)v2);
  double result = *(FILE **)(a1 + 40);
  if (result)
  {
    int v5 = (int)v3 / *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48);
    *(void *)(a1 + 32) = v2 + (int)v3 % *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 52) = v5;
    fseek(result, v5, 0);
    double result = (FILE *)fread(*(void **)(a1 + 16), 1uLL, *(int *)(a1 + 48), *(FILE **)(a1 + 40));
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 24) = (char *)result + v6;
    *(void *)(a1 + 32) = v6;
    if ((uint64_t)result <= 0)
    {
      exception = __cxa_allocate_exception(0x58uLL);
      sub_10022F344(v12, "Unexpected end of input stream");
      sub_10022F344(v11, "readBlock");
      sub_10022F344(v10, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/bitstrm.cpp");
      sub_1002D1C2C((uint64_t)exception, -2, v12, v11, v10, 110);
      void *exception = &off_100496A90;
    }
  }
  else
  {
    unint64_t v8 = v2 + v3;
    *(void *)(a1 + 32) = v8;
    *(_DWORD *)(a1 + 52) = 0;
    if (v8 >= *(void *)(a1 + 24))
    {
      uint64_t v9 = __cxa_allocate_exception(0x58uLL);
      sub_10022F344(v12, "Unexpected end of input stream");
      sub_10022F344(v11, "readBlock");
      sub_10022F344(v10, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/bitstrm.cpp");
      sub_1002D1C2C((uint64_t)v9, -2, v12, v11, v10, 101);
      void *v9 = &off_100496A90;
    }
  }
  return result;
}

void sub_1002DC8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1002D1A1C(&a9);
  sub_1002D1A1C(&a11);
  sub_1002D1A1C(&a13);
  if (v14) {
    __cxa_free_exception(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002DC950(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    LODWORD(v2) = a2 / *(_DWORD *)(result + 48) * *(_DWORD *)(result + 48);
    a2 %= *(_DWORD *)(result + 48);
  }
  *(void *)(result + 32) = *(void *)(result + 16) + a2;
  *(_DWORD *)(result + 52) = v2;
  return result;
}

uint64_t sub_1002DC97C(_DWORD *a1)
{
  return (a1[13] + a1[8] - a1[4]);
}

FILE *sub_1002DC998(uint64_t a1, const char **a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (*a2) {
    unint64_t v4 = *a2;
  }
  else {
    unint64_t v4 = "";
  }
  double result = fopen(v4, "rb");
  *(void *)(a1 + 40) = result;
  if (result)
  {
    *(unsigned char *)(a1 + 56) = 1;
    *(void *)(a1 + 32) = *(void *)(a1 + 16);
    *(_DWORD *)(a1 + 52) = 0;
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    return (FILE *)(*(void *)(a1 + 40) != 0);
  }
  return result;
}

uint64_t sub_1002DCA78(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(a2 + 4);
  if ((int)v5 >= 3)
  {
    uint64_t v8 = *(void *)(a2 + 64);
    uint64_t v9 = (int *)(v8 + 4);
    uint64_t v10 = 1;
    uint64_t v11 = v5 & 0xFFFFFFFE;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    uint64_t v6 = v12 * v10;
    uint64_t v13 = v5 - (v5 & 0xFFFFFFFE);
    if (v13)
    {
      char v14 = (int *)(v8 + ((4 * v5) & 0x3FFFFFFF8));
      do
      {
        uint64_t v15 = *v14++;
        v6 *= v15;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    uint64_t v6 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  uint64_t result = 0;
  if (v5 && v6)
  {
    if ((*(unsigned char *)(a2 + 1) & 0x40) == 0)
    {
      v21[0] = 0;
      v21[1] = 0;
      uint64_t v16 = sub_1002D19D8(v21, 18);
      *(_WORD *)(v16 + 16) = 10536;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)"buf.isContinuous()";
      sub_1002D2278(-215, v21, "open", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/bitstrm.cpp", 134);
    }
    *(void *)(a1 + 16) = v4;
    uint64_t v17 = *(int *)(a2 + 8) * (uint64_t)*(int *)(a2 + 12);
    BOOL v18 = __OFSUB__(v5, 1);
    int v19 = v5 - 1;
    if (v19 < 0 != v18) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = *(void *)(*(void *)(a2 + 72) + 8 * v19);
    }
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t result = 1;
    *(unsigned char *)(a1 + 56) = 1;
    *(void *)(a1 + 24) = v4 + v20 * v17;
    *(void *)(a1 + 32) = v4;
    *(_DWORD *)(a1 + 52) = 0;
  }
  return result;
}

void sub_1002DCC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

FILE *sub_1002DCC18(uint64_t a1)
{
  uint64_t result = *(FILE **)(a1 + 40);
  if (result)
  {
    uint64_t result = (FILE *)fclose(result);
    *(void *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 56) = 0;
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_1002DCC68(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 8))
  {
    uint64_t result = *(void *)(result + 16);
    if (result) {
      operator delete[]();
    }
  }
  *(unsigned char *)(v1 + 8) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 16) = 0;
  return result;
}

uint64_t sub_1002DCCB8(uint64_t result, int a2)
{
  *(void *)(result + 32) += a2;
  return result;
}

uint64_t sub_1002DCCC8(uint64_t a1)
{
  *(void *)a1 = off_100496818;
  uint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 56) = 0;
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_1002DCD58(uint64_t a1)
{
  *(void *)a1 = off_100496818;
  uint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 56) = 0;
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);

  operator delete();
}

uint64_t sub_1002DCE08(void *a1)
{
  unint64_t v2 = a1[3];
  uint64_t v3 = (unsigned __int8 *)a1[4];
  if ((unint64_t)v3 >= v2)
  {
    (*(void (**)(void *))(*a1 + 40))(a1);
    unint64_t v2 = a1[3];
    uint64_t v3 = (unsigned __int8 *)a1[4];
  }
  if ((unint64_t)v3 >= v2)
  {
    v5[0] = 0;
    v5[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v5, 15), "current < m_end", 15);
    sub_1002D2278(-215, v5, "getByte", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/bitstrm.cpp", 212);
  }
  uint64_t result = *v3;
  a1[4] = v3 + 1;
  return result;
}

void sub_1002DCECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002DCEE4(uint64_t a1, char *__dst, int a3)
{
  if (a3 < 1) {
    return 0;
  }
  int v3 = a3;
  LODWORD(v6) = 0;
  uint64_t v7 = *(const void **)(a1 + 32);
  do
  {
    if (v3 >= *(_DWORD *)(a1 + 24) - (int)v7) {
      int v9 = *(_DWORD *)(a1 + 24) - v7;
    }
    else {
      int v9 = v3;
    }
    if (v9 <= 0)
    {
      do
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
        uint64_t v7 = *(const void **)(a1 + 32);
        if (v3 >= *(_DWORD *)(a1 + 24) - (int)v7) {
          int v9 = *(_DWORD *)(a1 + 24) - v7;
        }
        else {
          int v9 = v3;
        }
      }
      while (v9 < 1);
    }
    memcpy(__dst, v7, v9);
    uint64_t v7 = (const void *)(*(void *)(a1 + 32) + v9);
    *(void *)(a1 + 32) = v7;
    __dst += v9;
    uint64_t v6 = (v9 + v6);
    BOOL v8 = __OFSUB__(v3, v9);
    v3 -= v9;
  }
  while (!((v3 < 0) ^ v8 | (v3 == 0)));
  return v6;
}

uint64_t sub_1002DCFC4(uint64_t a1)
{
  *(void *)a1 = off_100496818;
  unint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 56) = 0;
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_1002DD054(uint64_t a1)
{
  *(void *)a1 = off_100496818;
  unint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 56) = 0;
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);

  operator delete();
}

uint64_t sub_1002DD104(void *a1)
{
  unint64_t v2 = (unsigned __int16 *)a1[4];
  if ((unint64_t)v2 + 1 >= a1[3])
  {
    int v4 = sub_1002DCE08(a1);
    return v4 | (sub_1002DCE08(a1) << 8);
  }
  else
  {
    uint64_t result = *v2;
    a1[4] = v2 + 1;
  }
  return result;
}

uint64_t sub_1002DD160(void *a1)
{
  unint64_t v2 = (unsigned int *)a1[4];
  if ((unint64_t)v2 + 3 >= a1[3])
  {
    int v4 = sub_1002DCE08(a1);
    unsigned int v5 = v4 | (sub_1002DCE08(a1) << 8);
    unsigned int v6 = v5 | (sub_1002DCE08(a1) << 16);
    return v6 | (sub_1002DCE08(a1) << 24);
  }
  else
  {
    uint64_t result = *v2;
    a1[4] = v2 + 1;
  }
  return result;
}

uint64_t sub_1002DD1D4(void *a1)
{
  unint64_t v2 = (unsigned int *)a1[4];
  if ((unint64_t)v2 + 3 >= a1[3])
  {
    int v4 = sub_1002DCE08(a1);
    unsigned int v5 = (sub_1002DCE08(a1) << 16) | (v4 << 24);
    unsigned int v6 = v5 | (sub_1002DCE08(a1) << 8);
    return v6 | sub_1002DCE08(a1);
  }
  else
  {
    uint64_t result = bswap32(*v2);
    a1[4] = v2 + 1;
  }
  return result;
}

double sub_1002DD250(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = off_100496880;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)&double result = 0x8000;
  *(void *)(a1 + 32) = 0x8000;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_1002DD28C(uint64_t a1)
{
  *(void *)a1 = off_100496880;
  if (*(unsigned char *)(a1 + 48)) {
    sub_1002DD43C(a1);
  }
  unint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_1002DD320(uint64_t a1)
{
  *(void *)a1 = off_100496880;
  if (*(unsigned char *)(a1 + 48)) {
    sub_1002DD43C(a1);
  }
  unint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);

  operator delete();
}

uint64_t sub_1002DD3D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result) {
    operator new[]();
  }
  *(void *)(a1 + 16) = result + *(int *)(a1 + 32);
  *(void *)(a1 + 24) = result;
  return result;
}

const void *sub_1002DD43C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t result = *(const void **)(a1 + 8);
  int v4 = v2 - result;
  if (v2 != result)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    if (!v5)
    {
      uint64_t result = (const void *)fwrite(result, 1uLL, v4, *(FILE **)(a1 + 40));
LABEL_36:
      *(void *)(a1 + 24) = *(void *)(a1 + 8);
      *(_DWORD *)(a1 + 36) += v4;
      return result;
    }
    uint64_t v7 = *(char **)v5;
    unsigned int v6 = *(char **)(v5 + 8);
    unint64_t v8 = (unint64_t)&v6[-*(void *)v5];
    unint64_t v9 = v8 + v4;
    if (v8 >= v9)
    {
      if (v8 > v9) {
        *(void *)(v5 + 8) = &v7[v9];
      }
      goto LABEL_35;
    }
    uint64_t v10 = *(void *)(v5 + 16);
    if (v10 - (uint64_t)v6 >= (unint64_t)v4)
    {
      bzero(*(void **)(v5 + 8), v4);
      *(void *)(v5 + 8) = &v6[v4];
LABEL_35:
      uint64_t result = memcpy((void *)(**(void **)(a1 + 56) + v8), *(const void **)(a1 + 8), v4);
      goto LABEL_36;
    }
    if ((v9 & 0x8000000000000000) != 0) {
      sub_10000B98C();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v9) {
      uint64_t v12 = v8 + v4;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    char v14 = operator new(v13);
    uint64_t v15 = (char *)v14 + v13;
    uint64_t v28 = (char *)v14 + v9;
    uint64_t v16 = (char *)v14 + v8;
    bzero((char *)v14 + v8, v4);
    if (v6 == v7)
    {
      char v14 = (char *)v14 + v8;
      goto LABEL_33;
    }
    if (v8 >= 8 && (unint64_t)(v7 - (unsigned char *)v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_25;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      BOOL v18 = v6 - 16;
      int v19 = (char *)v14 + v6 - 16 - v7;
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)int v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_32;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_25:
        v16 -= v8 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v22 = &v6[-v17 - 8];
        uint64_t v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_32;
        }
        goto LABEL_30;
      }
      v16 -= v17;
      v6 -= v17;
    }
LABEL_30:
    long long v26 = v16 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_32:
    unsigned int v6 = v7;
LABEL_33:
    *(void *)uint64_t v5 = v14;
    *(void *)(v5 + 8) = v28;
    *(void *)(v5 + 16) = v15;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_35;
  }
  return result;
}

BOOL sub_1002DD670(uint64_t a1, const char **a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (*a2) {
    int v4 = *a2;
  }
  else {
    int v4 = "";
  }
  uint64_t v5 = fopen(v4, "wb");
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    *(unsigned char *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 36) = 0;
    *(void *)(a1 + 24) = *(void *)(a1 + 8);
  }
  return v5 != 0;
}

uint64_t sub_1002DD724(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = a2;
  *(unsigned char *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 24) = *(void *)(a1 + 8);
  return 1;
}

FILE *sub_1002DD7B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  }
  uint64_t result = *(FILE **)(a1 + 40);
  if (result)
  {
    uint64_t result = (FILE *)fclose(result);
    *(void *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1002DD818(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    operator delete[]();
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  uint64_t v2[2] = 0;
  return result;
}

uint64_t sub_1002DD85C(uint64_t a1)
{
  *(void *)a1 = off_100496880;
  if (*(unsigned char *)(a1 + 48)) {
    sub_1002DD43C(a1);
  }
  uint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_1002DD8F0(uint64_t a1)
{
  *(void *)a1 = off_100496880;
  if (*(unsigned char *)(a1 + 48)) {
    sub_1002DD43C(a1);
  }
  uint64_t v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);

  operator delete();
}

void *sub_1002DD9A4(void *result, char *__src, int a3)
{
  if (a3)
  {
    int v3 = a3;
    uint64_t v5 = result;
    do
    {
      unsigned int v6 = (void *)v5[2];
      uint64_t result = (void *)v5[3];
      if (v3 >= (int)v6 - (int)result) {
        size_t v7 = (v6 - result);
      }
      else {
        size_t v7 = v3;
      }
      if ((int)v7 >= 1)
      {
        memcpy(result, __src, v7);
        unsigned int v6 = (void *)v5[2];
        uint64_t result = (void *)(v5[3] + v7);
        v5[3] = result;
        __src += v7;
        v3 -= v7;
      }
      if (result == v6) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*v5 + 40))(v5);
      }
    }
    while (v3);
  }
  return result;
}

void *sub_1002DDA50(void *result, __int16 a2)
{
  char v2 = HIBYTE(a2);
  int v3 = result;
  int v4 = (_WORD *)result[3];
  if ((unint64_t)v4 + 1 < result[2])
  {
    *int v4 = a2;
    uint64_t v5 = v4 + 1;
    result[3] = v5;
    if (v5 != (_WORD *)result[2]) {
      return result;
    }
    goto LABEL_7;
  }
  result[3] = (char *)v4 + 1;
  *(unsigned char *)int v4 = a2;
  unsigned int v6 = (unsigned char *)result[3];
  if ((unint64_t)v6 >= result[2])
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    unsigned int v6 = (unsigned char *)v3[3];
  }
  v3[3] = v6 + 1;
  *unsigned int v6 = v2;
  if (v3[3] >= v3[2])
  {
LABEL_7:
    size_t v7 = *(uint64_t (**)(void *))(*v3 + 40);
    return (void *)v7(v3);
  }
  return result;
}

void *sub_1002DDB34(void *result, int a2)
{
  int v3 = result;
  int v4 = (_DWORD *)result[3];
  if ((unint64_t)v4 + 3 < result[2])
  {
    *int v4 = a2;
    uint64_t v5 = v4 + 1;
    result[3] = v5;
    if (v5 != (_DWORD *)result[2]) {
      return result;
    }
    goto LABEL_11;
  }
  result[3] = (char *)v4 + 1;
  *(unsigned char *)int v4 = a2;
  unsigned int v6 = (unsigned char *)result[3];
  if ((unint64_t)v6 >= result[2])
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    unsigned int v6 = (unsigned char *)v3[3];
  }
  v3[3] = v6 + 1;
  *unsigned int v6 = BYTE1(a2);
  size_t v7 = (unsigned char *)v3[3];
  if ((unint64_t)v7 >= v3[2])
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v3 + 40))(v3);
    size_t v7 = (unsigned char *)v3[3];
  }
  v3[3] = v7 + 1;
  *size_t v7 = BYTE2(a2);
  unint64_t v8 = (unsigned char *)v3[3];
  if ((unint64_t)v8 >= v3[2])
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v3 + 40))(v3);
    unint64_t v8 = (unsigned char *)v3[3];
  }
  v3[3] = v8 + 1;
  *unint64_t v8 = HIBYTE(a2);
  if (v3[3] >= v3[2])
  {
LABEL_11:
    unint64_t v9 = *(uint64_t (**)(void *))(*v3 + 40);
    return (void *)v9(v3);
  }
  return result;
}

uint64_t sub_1002DDCAC(uint64_t a1)
{
  *(void *)a1 = off_100496880;
  if (*(unsigned char *)(a1 + 48)) {
    sub_1002DD43C(a1);
  }
  char v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_1002DDD40(uint64_t a1)
{
  *(void *)a1 = off_100496880;
  if (*(unsigned char *)(a1 + 48)) {
    sub_1002DD43C(a1);
  }
  char v2 = *(FILE **)(a1 + 40);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);

  operator delete();
}

void *sub_1002DDDF4(void *result, unsigned int a2)
{
  int v3 = result;
  int v4 = (_DWORD *)result[3];
  if ((unint64_t)v4 + 3 < result[2])
  {
    *int v4 = bswap32(a2);
    uint64_t v5 = v4 + 1;
    result[3] = v5;
    if (v5 != (_DWORD *)result[2]) {
      return result;
    }
    goto LABEL_11;
  }
  result[3] = (char *)v4 + 1;
  *(unsigned char *)int v4 = HIBYTE(a2);
  unsigned int v6 = (unsigned char *)result[3];
  if ((unint64_t)v6 >= result[2])
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
    unsigned int v6 = (unsigned char *)v3[3];
  }
  v3[3] = v6 + 1;
  *unsigned int v6 = BYTE2(a2);
  size_t v7 = (unsigned char *)v3[3];
  if ((unint64_t)v7 >= v3[2])
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v3 + 40))(v3);
    size_t v7 = (unsigned char *)v3[3];
  }
  v3[3] = v7 + 1;
  *size_t v7 = BYTE1(a2);
  unint64_t v8 = (unsigned char *)v3[3];
  if ((unint64_t)v8 >= v3[2])
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*v3 + 40))(v3);
    unint64_t v8 = (unsigned char *)v3[3];
  }
  v3[3] = v8 + 1;
  *unint64_t v8 = a2;
  if (v3[3] >= v3[2])
  {
LABEL_11:
    unint64_t v9 = *(uint64_t (**)(void *))(*v3 + 40);
    return (void *)v9(v3);
  }
  return result;
}

void sub_1002DDF70(uint64_t a1)
{
  sub_1002D1EA8(a1);

  operator delete();
}

double sub_1002DDFA8(uint64_t a1)
{
  *(void *)a1 = off_100496AB8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1124007936;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = a1 + 64;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = xmmword_100406ED0;
  return result;
}

uint64_t sub_1002DE010(uint64_t a1, uint64_t *a2)
{
  int v3 = (uint64_t *)(a1 + 24);
  if (v3 != a2)
  {
    sub_1002D1A1C(v3);
    uint64_t v5 = *a2;
    if (*a2)
    {
      atomic_fetch_add((atomic_uint *volatile)(v5 - 4), 1u);
      uint64_t v5 = *a2;
    }
    uint64_t v6 = a2[1];
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v6;
  }
  uint64_t v7 = *(void *)(a1 + 112);
  if (v7 && atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 56);
  }
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 120);
    do
      *(_DWORD *)(v9 + 4 * v8++) = 0;
    while (v8 < *(int *)(a1 + 60));
  }
  return 1;
}

BOOL sub_1002DE0C4(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 152);
  if (*(unsigned char *)(a1 + 152))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 24);
    if (&v18 != v5)
    {
      sub_1002D1A1C(v5);
      uint64_t v6 = v18;
      if (v18)
      {
        atomic_fetch_add((atomic_uint *volatile)(v18 - 4), 1u);
        uint64_t v6 = v18;
      }
      uint64_t v7 = v19;
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = v7;
    }
    sub_1002D1A1C(&v18);
    uint64_t v8 = (_DWORD *)(a1 + 56);
    if (a1 + 56 != a2)
    {
      uint64_t v9 = *(void *)(a2 + 56);
      if (v9) {
        atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 1u);
      }
      uint64_t v10 = *(void *)(a1 + 112);
      if (v10 && atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4(a1 + 56);
      }
      *(void *)(a1 + 112) = 0;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      if (*(int *)(a1 + 60) <= 0)
      {
        *uint64_t v8 = *(_DWORD *)a2;
        int v14 = *(_DWORD *)(a2 + 4);
        if (v14 <= 2)
        {
LABEL_17:
          *(_DWORD *)(a1 + 60) = v14;
          *(void *)(a1 + 64) = *(void *)(a2 + 8);
          uint64_t v15 = *(void **)(a2 + 72);
          uint64_t v16 = *(void **)(a1 + 128);
          *uint64_t v16 = *v15;
          v16[1] = v15[1];
LABEL_20:
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 48);
          return v2 != 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 120);
        do
        {
          *(_DWORD *)(v12 + 4 * v11++) = 0;
          uint64_t v13 = *(int *)(a1 + 60);
        }
        while (v11 < v13);
        *uint64_t v8 = *(_DWORD *)a2;
        if ((int)v13 <= 2)
        {
          int v14 = *(_DWORD *)(a2 + 4);
          if (v14 <= 2) {
            goto LABEL_17;
          }
        }
      }
      sub_1002931A8(a1 + 56, a2);
      goto LABEL_20;
    }
  }
  return v2 != 0;
}

void sub_1002DE240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002DE25C(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

BOOL sub_1002DE264(void *a1, uint64_t a2)
{
  unint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  if (*(void *)(a2 + 8) < v4) {
    return 0;
  }
  size_t v6 = v4;
  if (*(void *)a2) {
    uint64_t v7 = *(const char **)a2;
  }
  else {
    uint64_t v7 = "";
  }
  if (a1[5]) {
    uint64_t v8 = (const char *)a1[5];
  }
  else {
    uint64_t v8 = "";
  }
  return memcmp(v7, v8, v6) == 0;
}

uint64_t sub_1002DE2F8(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  *(_DWORD *)(a1 + 20) = *a2;
  return v2;
}

void sub_1002DE30C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double sub_1002DE314(uint64_t a1)
{
  *(void *)a1 = off_100496B28;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  return result;
}

BOOL sub_1002DE348(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1002DE354@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  *a2 = v2;
  a2[1] = v3;
  if (v2) {
    atomic_fetch_add((atomic_uint *volatile)(v2 - 4), 1u);
  }
  return result;
}

uint64_t sub_1002DE370(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 3;
  if (v3 != a2)
  {
    sub_1002D1A1C(v3);
    uint64_t v5 = *a2;
    if (*a2)
    {
      atomic_fetch_add((atomic_uint *volatile)(v5 - 4), 1u);
      uint64_t v5 = *a2;
    }
    uint64_t v6 = a2[1];
    a1[3] = v5;
    a1[4] = v6;
  }
  a1[5] = 0;
  return 1;
}

BOOL sub_1002DE3CC(uint64_t a1, void *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48))
  {
    *(void *)(a1 + 40) = a2;
    a2[1] = *a2;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v4 = (uint64_t *)(a1 + 24);
    if (&v8 != v4)
    {
      sub_1002D1A1C(v4);
      uint64_t v5 = v8;
      if (v8)
      {
        atomic_fetch_add((atomic_uint *volatile)(v8 - 4), 1u);
        uint64_t v5 = v8;
      }
      uint64_t v6 = v9;
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = v6;
    }
    sub_1002D1A1C(&v8);
  }
  return v2 != 0;
}

void sub_1002DE450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002DE46C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1002DE474(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 64);
  if (v1)
  {
    uint64_t v2 = result;
    __s[0] = 0;
    __s[1] = 0;
    sub_1002D19D8(__s, v1 + 25);
    uint64_t v3 = __s[0];
    *(_OWORD *)__s[0] = *(_OWORD *)"Raw image encoder error: ";
    *(_OWORD *)(v3 + 9) = *(_OWORD *)" encoder error: ";
    size_t v4 = *(void *)(v2 + 64);
    if (v4) {
      memcpy(v3 + 25, *(const void **)(v2 + 56), v4);
    }
    v8[0] = 0;
    v8[1] = 0;
    size_t v5 = strlen(v3);
    if (v5)
    {
      size_t v6 = v5;
      uint64_t v7 = (void *)sub_1002D19D8(v8, v5);
      memcpy(v7, v3, v6);
    }
    sub_1002D2278(-10, v8, "throwOnEror", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_base.cpp", 140);
  }
  return result;
}

void sub_1002DE540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DE588(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1002DE590()
{
  return 0;
}

uint64_t sub_1002DE598(uint64_t a1)
{
  sub_1002DDFA8(a1);
  *uint64_t v2 = off_100496BA0;
  sub_1002DC53C((uint64_t)(v2 + 20));
  *(void *)(a1 + 160) = off_1004968E0;
  sub_1002D1A1C((uint64_t *)(a1 + 40));
  *(_WORD *)sub_1002D19D8((void *)(a1 + 40), 2) = 19778;
  *(unsigned char *)(a1 + 152) = 1;
  *(_OWORD *)(a1 + 1248) = xmmword_100406F10;
  return a1;
}

void sub_1002DE640(_Unwind_Exception *a1)
{
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

void sub_1002DE654(_Unwind_Exception *a1)
{
  sub_1002DCCC8(v2);
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DE670(uint64_t a1)
{
  *(void *)a1 = off_100496AB8;
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 56);
  }
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 120);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 60));
  }
  size_t v5 = *(void **)(a1 + 128);
  if (v5 != (void *)(a1 + 136)) {
    j__free(v5);
  }
  sub_1002D1A1C((uint64_t *)(a1 + 40));
  sub_1002D1A1C((uint64_t *)(a1 + 24));
  return a1;
}

uint64_t sub_1002DE740(void *a1)
{
  *a1 = off_100496BA0;
  sub_1002DCCC8((uint64_t)(a1 + 20));

  return sub_1002DE670((uint64_t)a1);
}

void sub_1002DE794(void *a1)
{
  *a1 = off_100496BA0;
  sub_1002DCCC8((uint64_t)(a1 + 20));
  sub_1002DE670((uint64_t)a1);

  operator delete();
}

void sub_1002DE7FC()
{
}

void sub_1002DE8C0()
{
}

uint64_t sub_1002DE8E4(uint64_t a1)
{
  if (!*(void *)(a1 + 72)) {
    goto LABEL_13;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 60);
  if ((int)v2 >= 3)
  {
    uint64_t v4 = *(void *)(a1 + 120);
    size_t v5 = (int *)(v4 + 4);
    uint64_t v6 = 1;
    uint64_t v7 = v2 & 0xFFFFFFFE;
    uint64_t v8 = 1;
    do
    {
      v6 *= *(v5 - 1);
      v8 *= *v5;
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    uint64_t v3 = v8 * v6;
    uint64_t v9 = v2 - (v2 & 0xFFFFFFFE);
    if (v9)
    {
      uint64_t v10 = (int *)(v4 + ((4 * v2) & 0x3FFFFFFF8));
      do
      {
        uint64_t v11 = *v10++;
        v3 *= v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    uint64_t v3 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
  }
  if (v2 && v3)
  {
    if ((sub_1002DCA78(a1 + 160, a1 + 56) & 1) == 0) {
      return 0;
    }
  }
  else
  {
LABEL_13:
    uint64_t result = (uint64_t)sub_1002DC998(a1 + 160, (const char **)(a1 + 24));
    if (!result) {
      return result;
    }
  }
  sub_1002DCCB8(a1 + 160, 10);
  *(_DWORD *)(a1 + 1256) = sub_1002DD160((void *)(a1 + 160));
  int v13 = sub_1002DD160((void *)(a1 + 160));
  int v14 = v13 - 36;
  if (v13 < 36)
  {
    if (v13 == 12)
    {
      *(_DWORD *)(a1 + 8) = sub_1002DD104((void *)(a1 + 160));
      *(_DWORD *)(a1 + 12) = sub_1002DD104((void *)(a1 + 160));
      int v19 = sub_1002DD160((void *)(a1 + 160));
      unsigned int v20 = v19 >> 16;
      *(_DWORD *)(a1 + 1252) = v19 >> 16;
      *(_DWORD *)(a1 + 1260) = 0;
      if (*(int *)(a1 + 8) >= 1 && *(_DWORD *)(a1 + 12) && v20 <= 0x20 && ((1 << SBYTE2(v19)) & 0x101000112) != 0)
      {
        if (HIWORD(v19) <= 8u)
        {
          sub_1002DCEE4(a1 + 160, (char *)__dst, 3 << SBYTE2(v19));
          long long v21 = (_WORD *)((char *)__dst + 1);
          uint64_t v22 = a1 + 226;
          unsigned int v23 = 1;
          do
          {
            *(unsigned char *)(v22 - 2) = *((unsigned char *)v21 - 1);
            __int16 v24 = *v21;
            long long v21 = (_WORD *)((char *)v21 + 3);
            *(_WORD *)(v22 - 1) = v24;
            unsigned int v25 = v23++ >> v20;
            v22 += 4;
          }
          while (!v25);
        }
        goto LABEL_66;
      }
    }
LABEL_50:
    int v29 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 1248) = v29 > 0;
    if (v29 < 0) {
      int v29 = -v29;
    }
    *(_DWORD *)(a1 + 12) = v29;
    *(_DWORD *)(a1 + 16) = 0;
    goto LABEL_53;
  }
  *(_DWORD *)(a1 + 8) = sub_1002DD160((void *)(a1 + 160));
  *(_DWORD *)(a1 + 12) = sub_1002DD160((void *)(a1 + 160));
  *(_DWORD *)(a1 + 1252) = (int)sub_1002DD160((void *)(a1 + 160)) >> 16;
  *(_DWORD *)(a1 + 1260) = sub_1002DD160((void *)(a1 + 160));
  sub_1002DCCB8(a1 + 160, 12);
  unsigned int v15 = sub_1002DD160((void *)(a1 + 160));
  sub_1002DCCB8(a1 + 160, v14);
  if (*(int *)(a1 + 8) < 1) {
    goto LABEL_50;
  }
  if (!*(_DWORD *)(a1 + 12)) {
    goto LABEL_50;
  }
  uint64_t v16 = *(unsigned int *)(a1 + 1252);
  if (v16 > 0x20) {
    goto LABEL_50;
  }
  if (((1 << v16) & 0x101000112) != 0)
  {
    int v17 = *(_DWORD *)(a1 + 1260);
    if (v17)
    {
      HIDWORD(v18) = *(_DWORD *)(a1 + 1252);
      LODWORD(v18) = v16 - 4;
      switch((v18 >> 2))
      {
        case 0u:
          if (v17 != 2) {
            goto LABEL_50;
          }
          goto LABEL_46;
        case 1u:
          if (v17 == 1) {
            goto LABEL_46;
          }
          goto LABEL_50;
        case 3u:
        case 7u:
          goto LABEL_37;
        default:
          goto LABEL_50;
      }
    }
    if (v16 > 8)
    {
      if (v16 != 16) {
        goto LABEL_58;
      }
      goto LABEL_44;
    }
LABEL_46:
    if (v15 >= 0x101)
    {
      sub_10022F344(__dst, "clrused >= 0 && clrused <= 256");
      sub_1002D2278(-215, __dst, "readHeader", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_bmp.cpp", 121);
    }
    bzero((void *)(a1 + 224), 0x400uLL);
    if (!v15) {
      unsigned int v15 = 1 << v16;
    }
    sub_1002DCEE4(a1 + 160, (char *)(a1 + 224), 4 * v15);
    if (sub_1002F0F98((unsigned __int8 *)(a1 + 224), *(_DWORD *)(a1 + 1252))) {
      goto LABEL_58;
    }
LABEL_66:
    int v33 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 1248) = v33 > 0;
    if (v33 < 0) {
      int v33 = -v33;
    }
    *(_DWORD *)(a1 + 12) = v33;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  if (v16 != 16) {
    goto LABEL_50;
  }
  int v17 = *(_DWORD *)(a1 + 1260);
LABEL_37:
  if (v17 && v17 != 3) {
    goto LABEL_50;
  }
  if (v16 != 16)
  {
LABEL_58:
    BOOL v30 = 1;
    goto LABEL_59;
  }
  if (!v17
    || (int v26 = sub_1002DD160((void *)(a1 + 160)),
        int v27 = sub_1002DD160((void *)(a1 + 160)),
        int v28 = sub_1002DD160((void *)(a1 + 160)),
        v28 == 31)
    && v27 == 992
    && v26 == 31744)
  {
LABEL_44:
    *(_DWORD *)(a1 + 1252) = 15;
    goto LABEL_58;
  }
  BOOL v30 = v28 == 31 && v27 == 2016 && v26 == 63488;
LABEL_59:
  if (*(_DWORD *)(a1 + 1252) == 32) {
    int v31 = 24;
  }
  else {
    int v31 = 16;
  }
  int v32 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 1248) = v32 > 0;
  if (v32 < 0) {
    int v32 = -v32;
  }
  *(_DWORD *)(a1 + 12) = v32;
  *(_DWORD *)(a1 + 16) = v31;
  if (v30) {
    return 1;
  }
LABEL_53:
  *(_DWORD *)(a1 + 1256) = -1;
  *(void *)(a1 + 8) = -1;
  sub_1002DCC18(a1 + 160);
  return 0;
}

void sub_1002DED90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DEE28(uint64_t a1, int *a2)
{
  uint64_t v4 = (int *)*((void *)a2 + 2);
  int v5 = sub_1002EF3F8(*((void *)a2 + 10));
  int v6 = *a2;
  int v7 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 1252);
  if (v8 == 15) {
    int v8 = 16;
  }
  int v9 = v8 * v7;
  int v11 = v9 + 7;
  BOOL v10 = v9 < -7;
  int v12 = v9 + 14;
  if (v10) {
    int v13 = v12;
  }
  else {
    int v13 = v11;
  }
  long long v92 = 0u;
  long long v93 = 0u;
  int v14 = v6 & 0xFF8;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  *(_OWORD *)__c = 0u;
  long long v79 = 0u;
  if ((v6 & 0xFF8) != 0) {
    uint64_t v15 = 3;
  }
  else {
    uint64_t v15 = 1;
  }
  if ((*(_DWORD *)(a1 + 1256) & 0x80000000) != 0) {
    return 0;
  }
  int v16 = v5;
  if (!sub_1002DC4D0(a1 + 160)) {
    return 0;
  }
  int v67 = v16;
  unsigned int v17 = ((v13 >> 3) + 3) & 0xFFFFFFFC;
  if (*(_DWORD *)(a1 + 1248) == 1)
  {
    uint64_t v4 = (int *)((char *)v4 + (*(int *)(a1 + 12) - 1) * v67);
    int v67 = -v67;
  }
  int v70 = 0;
  long long v72 = (int *)v74;
  unint64_t v73 = 1032;
  uint64_t v75 = (uint16x8_t *)v77;
  unint64_t v76 = (int)(v17 + 32);
  if (v17 + 32 >= 0x409) {
    operator new[]();
  }
  if (!v14)
  {
    int v18 = *(_DWORD *)(a1 + 1252);
    if (v18 <= 8) {
      sub_1002F0CF4((const char *)(a1 + 224), (unint64_t)__c, 1 << v18);
    }
    unint64_t v19 = 3 * *(int *)(a1 + 8) + 32;
    if (v73 >= v19)
    {
      unint64_t v73 = 3 * *(int *)(a1 + 8) + 32;
    }
    else
    {
      if (v72 != (int *)v74)
      {
        if (v72) {
          operator delete[]();
        }
        long long v72 = (int *)v74;
      }
      unint64_t v73 = v19;
      if (v19 >= 0x409) {
        operator new[]();
      }
    }
  }
  uint64_t v22 = v75;
  sub_1002DC950(a1 + 160, *(_DWORD *)(a1 + 1256));
  switch(*(_DWORD *)(a1 + 1252))
  {
    case 1:
      int v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        do
        {
          sub_1002DCEE4(a1 + 160, v22->i8, v17);
          if (v14) {
            unsigned int v23 = v4;
          }
          else {
            unsigned int v23 = v72;
          }
          sub_1002F172C(v23, v22->i8, *(_DWORD *)(a1 + 8), a1 + 224);
          if (!v14) {
            sub_1002EF498((uint64_t)v72, 0, (unint64_t)v4, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 0);
          }
          ++v70;
          uint64_t v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      goto LABEL_74;
    case 4:
      int v63 = v7 * v15;
      int v25 = *(_DWORD *)(a1 + 1260);
      if (v25 == 2)
      {
        uint64_t v65 = (unsigned int *)(a1 + 224);
        unint64_t v69 = (unint64_t)v4 + v63;
        int v70 = 0;
        do
        {
          while (1)
          {
            while (1)
            {
              unint64_t v32 = sub_1002DD104((void *)(a1 + 160));
              if (!(_BYTE)v32) {
                break;
              }
              int v33 = *(_DWORD *)(a1 + 224 + 4 * ((v32 >> 8) & 0xF));
              LODWORD(v71[0]) = *(_DWORD *)(a1 + 224 + 4 * ((int)v32 >> 12));
              HIDWORD(v71[0]) = v33;
              v68[0] = __c[(int)v32 >> 12];
              v68[1] = *(unsigned char *)((unint64_t)__c | (v32 >> 8) & 0xF);
              unint64_t v34 = (unint64_t)v4 + v32 * v15;
              if (v34 > v69) {
                goto LABEL_110;
              }
              uint64_t v35 = 0;
              if (v14)
              {
                do
                {
                  uint64_t v36 = (char *)v71 + 4 * v35;
                  *(unsigned char *)uint64_t v4 = *v36;
                  *((unsigned char *)v4 + 1) = v36[1];
                  *((unsigned char *)v4 + 2) = v36[2];
                  v35 ^= 1uLL;
                  uint64_t v4 = (int *)((char *)v4 + v15);
                }
                while ((unint64_t)v4 < v34);
              }
              else
              {
                do
                {
                  *(unsigned char *)uint64_t v4 = v68[v35];
                  v35 ^= 1uLL;
                  uint64_t v4 = (int *)((char *)v4 + v15);
                }
                while ((unint64_t)v4 < v34);
              }
            }
            int v37 = (int)v32 >> 8;
            BOOL v20 = (int)v32 < 768;
            if ((int)v32 < 768) {
              break;
            }
            if ((unint64_t)v4 + (v37 * v15) > v69) {
              goto LABEL_75;
            }
            if (v76 <= ((((v37 + 1) >> 1) + 1) & 0x7FFFFFFE))
            {
              sub_10022F344(v71, "(size_t)sz < _src.size()");
              sub_1002D2278(-215, v71, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_bmp.cpp", 296);
            }
            sub_1002DCEE4(a1 + 160, v22->i8, (((v37 + 1) >> 1) + 1) & 0x7FFFFFFE);
            if (v14) {
              uint64_t v4 = (int *)sub_1002F1630((uint64_t)v4, (unsigned __int8 *)v22, v37, (uint64_t)v65);
            }
            else {
              uint64_t v4 = (int *)sub_1002F16C0(v4, (unsigned __int8 *)v22, v37, (uint64_t)__c);
            }
          }
          if (v37 == 2)
          {
            int v38 = sub_1002DCE08((void *)(a1 + 160));
            sub_1002DCE08((void *)(a1 + 160));
            int v39 = v38 * v15;
          }
          else
          {
            int v39 = v69 - v4;
          }
          int v40 = *(_DWORD *)(a1 + 12);
          if (v14)
          {
            unint64_t v62 = v62 & 0xFFFFFFFF00000000 | *v65;
            unint64_t v41 = sub_1002F100C(v4, &v69, v67, v63, &v70, v40, v39, v62);
          }
          else
          {
            unint64_t v41 = sub_1002F14E4((unint64_t)v4, &v69, v67, v63, &v70, v40, v39, __c[0]);
          }
          uint64_t v4 = (int *)v41;
        }
        while (v70 < *(_DWORD *)(a1 + 12));
        goto LABEL_75;
      }
      if (v25) {
        goto LABEL_110;
      }
      int v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        BOOL v20 = 1;
        do
        {
          sub_1002DCEE4(a1 + 160, v22->i8, v17);
          int v26 = *(_DWORD *)(a1 + 8);
          if (v14) {
            sub_1002F1630((uint64_t)v4, (unsigned __int8 *)v22, v26, a1 + 224);
          }
          else {
            sub_1002F16C0(v4, (unsigned __int8 *)v22, v26, (uint64_t)__c);
          }
          ++v70;
          uint64_t v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
        goto LABEL_75;
      }
      goto LABEL_74;
    case 8:
      *(void *)int32x2_t v64 = v7 * (uint64_t)(int)v15;
      int v28 = *(_DWORD *)(a1 + 1260);
      if (v28 == 1)
      {
        int v42 = 0;
        unint64_t v69 = (unint64_t)v4 + *(void *)v64;
        int v70 = 0;
        int v66 = (unsigned int *)(a1 + 224);
        do
        {
          while (1)
          {
            while (1)
            {
              int v44 = sub_1002DD104((void *)(a1 + 160));
              unsigned int v45 = v44;
              int v46 = v44 >> 8;
              if (!(_BYTE)v44) {
                break;
              }
              uint64_t v48 = v44 * v15;
              BOOL v20 = (unint64_t)v4 + v48 <= v69;
              if ((unint64_t)v4 + v48 <= v69)
              {
                int v49 = v70;
                int v50 = *(_DWORD *)(a1 + 12);
                if (v14)
                {
                  unint64_t v51 = v62 & 0xFFFFFFFF00000000 | *(unsigned int *)(a1 + 4 * v46 + 224);
                  uint64_t v4 = (int *)sub_1002F100C(v4, &v69, v67, v64[0], &v70, v50, v48, v51);
                  unint64_t v62 = v51;
                }
                else
                {
                  uint64_t v4 = (int *)sub_1002F14E4((unint64_t)v4, &v69, v67, v64[0], &v70, v50, v48, __c[v46]);
                }
                int v42 = v70 - v49;
                if (v70 < *(_DWORD *)(a1 + 12)) {
                  continue;
                }
              }
              goto LABEL_75;
            }
            BOOL v20 = v44 < 768;
            if (v44 < 768) {
              break;
            }
            if ((unint64_t)v4 + (v46 * v15) > v69) {
              goto LABEL_75;
            }
            int v47 = v70;
            if (v76 <= ((v46 + 1) & 0xFFFFFFFE))
            {
              sub_10022F344(v71, "(size_t)sz < _src.size()");
              sub_1002D2278(-215, v71, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_bmp.cpp", 390);
            }
            sub_1002DCEE4(a1 + 160, v22->i8, (v46 + 1) & 0xFFFFFFFE);
            if (v14) {
              uint64_t v43 = sub_1002F15B4((uint64_t)v4, (unsigned __int8 *)v22, v46, (uint64_t)v66);
            }
            else {
              uint64_t v43 = (uint64_t)sub_1002F1604(v4, (unsigned __int8 *)v22, v46, (uint64_t)__c);
            }
            uint64_t v4 = (int *)v43;
            int v42 = v70 - v47;
          }
          int v52 = v69 - v4;
          int v53 = v70;
          int v54 = *(_DWORD *)(a1 + 12);
          if (v44 > 0xFF || !v42 || v64[0] > v52)
          {
            if (v46 == 2)
            {
              int v55 = v67;
              int v56 = sub_1002DCE08((void *)(a1 + 160));
              int v57 = sub_1002DCE08((void *)(a1 + 160));
              int v52 = v56 * v15;
              int v53 = v70;
              int v54 = *(_DWORD *)(a1 + 12);
            }
            else
            {
              int v57 = v54 - v70;
              int v55 = v67;
            }
            int v58 = v57 * v64[0];
            if (v45 <= 0xFF) {
              int v58 = 0;
            }
            if (v53 >= v54) {
              break;
            }
            int v59 = v58 + v52;
            if (v14)
            {
              unint64_t v61 = v61 & 0xFFFFFFFF00000000 | *v66;
              unint64_t v60 = sub_1002F100C(v4, &v69, v55, v64[0], &v70, v54, v59, v61);
            }
            else
            {
              unint64_t v60 = sub_1002F14E4((unint64_t)v4, &v69, v55, v64[0], &v70, v54, v59, __c[0]);
            }
            uint64_t v4 = (int *)v60;
            int v53 = v70;
            int v54 = *(_DWORD *)(a1 + 12);
            if (v70 >= v54) {
              break;
            }
          }
          int v42 = 0;
        }
        while (v53 < v54);
      }
      else if (v28)
      {
LABEL_110:
        BOOL v20 = 0;
      }
      else
      {
        int v70 = 0;
        if (*(int *)(a1 + 12) < 1)
        {
LABEL_74:
          BOOL v20 = 1;
        }
        else
        {
          BOOL v20 = 1;
          do
          {
            sub_1002DCEE4(a1 + 160, v22->i8, v17);
            int v29 = *(_DWORD *)(a1 + 8);
            if (v14) {
              sub_1002F15B4((uint64_t)v4, (unsigned __int8 *)v22, v29, a1 + 224);
            }
            else {
              sub_1002F1604(v4, (unsigned __int8 *)v22, v29, (uint64_t)__c);
            }
            ++v70;
            uint64_t v4 = (int *)((char *)v4 + v67);
          }
          while (v70 < *(_DWORD *)(a1 + 12));
        }
      }
LABEL_75:
      if (v72 != (int *)v74)
      {
        if (v72) {
          operator delete[]();
        }
        long long v72 = (int *)v74;
      }
      if (v75 != (uint16x8_t *)v77 && v75) {
        operator delete[]();
      }
      return result;
    case 0xF:
      int v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        do
        {
          sub_1002DCEE4(a1 + 160, v22->i8, v17);
          unint64_t v30 = *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header;
          if (v14) {
            sub_1002F048C((unint64_t)v22, 0, (char *)v4, 0, v30);
          }
          else {
            sub_1002EFE20(v22, 0, (unint64_t)v4, 0, v30);
          }
          ++v70;
          uint64_t v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      goto LABEL_74;
    case 0x10:
      int v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        do
        {
          sub_1002DCEE4(a1 + 160, v22->i8, v17);
          unint64_t v24 = *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header;
          if (v14) {
            sub_1002F0614((unint64_t)v22, 0, (char *)v4, 0, v24);
          }
          else {
            sub_1002F0154(v22, 0, (unint64_t)v4, 0, v24);
          }
          ++v70;
          uint64_t v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      goto LABEL_74;
    case 0x18:
      int v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        do
        {
          sub_1002DCEE4(a1 + 160, v22->i8, v17);
          uint64_t v27 = *(unsigned int *)(a1 + 8);
          if (v14) {
            memcpy(v4, v22, 3 * (int)v27);
          }
          else {
            sub_1002EF498((uint64_t)v22, 0, (unint64_t)v4, 0, v27 | (unint64_t)&_mh_execute_header, 0);
          }
          ++v70;
          uint64_t v4 = (int *)((char *)v4 + v67);
        }
        while (v70 < *(_DWORD *)(a1 + 12));
      }
      goto LABEL_74;
    case 0x20:
      int v70 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        if (v14)
        {
          do
          {
            sub_1002DCEE4(a1 + 160, v22->i8, v17);
            int v31 = (*a2 >> 3) & 0x1FF;
            if (v31 == 3)
            {
              memcpy(v4, v22, 4 * *(int *)(a1 + 8));
            }
            else if (v31 == 2)
            {
              sub_1002EF9D4((uint64_t)v22, 0, (char *)v4, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 0);
            }
            ++v70;
            uint64_t v4 = (int *)((char *)v4 + v67);
          }
          while (v70 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          do
          {
            sub_1002DCEE4(a1 + 160, v22->i8, v17);
            sub_1002EF780((uint64_t)v22, 0, (unint64_t)v4, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 0);
            ++v70;
            uint64_t v4 = (int *)((char *)v4 + v67);
          }
          while (v70 < *(_DWORD *)(a1 + 12));
        }
      }
      goto LABEL_74;
    default:
      sub_10022F344(v71, "Invalid/unsupported mode");
      sub_1002DFBA8(v71);
  }
}

void sub_1002DF9F0()
{
}

void sub_1002DFAAC()
{
}

void sub_1002DFBA8(uint64_t *a1)
{
}

uint64_t sub_1002DFBD8(uint64_t a1)
{
  sub_1002DE314(a1);
  *uint64_t v2 = off_100496C10;
  uint64_t v3 = v2 + 1;
  sub_1002D1A1C(v2 + 1);
  qmemcpy((void *)sub_1002D19D8(v3, 28), "Windows bitmap (*.bmp;*.dib)", 28);
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_1002DFC5C(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_100496B28;
  sub_1002D1A1C(v1 + 7);
  sub_1002D1A1C(v1 + 3);
  sub_1002D1A1C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002DFCA8(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);
  return a1;
}

void sub_1002DFD08(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);

  operator delete();
}

void sub_1002DFD88()
{
}

void sub_1002DFE4C()
{
}

uint64_t sub_1002DFE70(uint64_t a1, unsigned int *a2)
{
  int v4 = a2[3];
  int v5 = a2[2];
  unsigned int v6 = *a2;
  char v43 = 0;
  int v42 = 0;
  sub_1002DD250((uint64_t)v41);
  v41[0] = off_1004969C0;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    if (sub_1002DD724((uint64_t)v41, v7)) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v21 = 0;
    goto LABEL_39;
  }
  if (!sub_1002DD670((uint64_t)v41, (const char **)(a1 + 24))) {
    goto LABEL_13;
  }
LABEL_3:
  int v8 = (v6 >> 3) & 0x1FF;
  int v39 = v8;
  __int16 v40 = v8 + 1;
  int v9 = (v8 + 1) * v4;
  if (v8) {
    uint64_t v10 = 54;
  }
  else {
    uint64_t v10 = 1078;
  }
  signed int v38 = (v9 + 3) & 0xFFFFFFFC;
  uint64_t v11 = v10 + v5 * (uint64_t)v38;
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12)
  {
    unint64_t v13 = (v11 + 271) & 0xFFFFFFFFFFFFFF00;
    int v14 = *(unsigned char **)v12;
    if (*(void *)(v12 + 16) - *(void *)v12 < v13)
    {
      if (v11 + 271 < 0) {
        sub_10000B98C();
      }
      uint64_t v15 = *(unsigned char **)(v12 + 8);
      int v16 = operator new((v11 + 271) & 0xFFFFFFFFFFFFFF00);
      unint64_t v17 = v15 - v14;
      int v18 = &v16[v15 - v14];
      unint64_t v19 = v18;
      if (v15 == v14) {
        goto LABEL_29;
      }
      if (v17 < 8)
      {
        BOOL v20 = &v16[v15 - v14];
        goto LABEL_26;
      }
      BOOL v20 = &v16[v15 - v14];
      if ((unint64_t)(v14 - v16) >= 0x20)
      {
        if (v17 < 0x20)
        {
          unint64_t v22 = 0;
          goto LABEL_21;
        }
        unint64_t v22 = v17 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v23 = (long long *)(v15 - 16);
        unint64_t v24 = &v16[v15 - 16 - v14];
        unint64_t v25 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v26 = *v23;
          *(v24 - 1) = *(v23 - 1);
          _OWORD *v24 = v26;
          v24 -= 2;
          v23 -= 2;
          v25 -= 32;
        }
        while (v25);
        if (v17 == v22) {
          goto LABEL_28;
        }
        if ((v17 & 0x18) != 0)
        {
LABEL_21:
          BOOL v20 = &v18[-(v17 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v27 = &v15[-v22 - 8];
          int64_t v28 = v27 - v14;
          unint64_t v29 = v22 - (v17 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v30 = *(void *)v27;
            v27 -= 8;
            *(void *)&v16[v28] = v30;
            v28 -= 8;
            v29 += 8;
          }
          while (v29);
          v15 -= v17 & 0xFFFFFFFFFFFFFFF8;
          if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_28;
          }
          goto LABEL_26;
        }
        BOOL v20 = &v18[-v22];
        v15 -= v22;
      }
LABEL_26:
      int v31 = v20 - 1;
      do
      {
        char v32 = *--v15;
        *v31-- = v32;
      }
      while (v15 != v14);
LABEL_28:
      unint64_t v19 = v16;
LABEL_29:
      *(void *)uint64_t v12 = v19;
      *(void *)(v12 + 8) = v18;
      *(void *)(v12 + 16) = &v16[v13];
      if (v14) {
        operator delete(v14);
      }
    }
  }
  sub_1002DD9A4(v41, "BM", 2);
  int v33 = sub_1002EF3F8(v11);
  sub_1002DDB34(v41, v33);
  sub_1002DDB34(v41, 0);
  sub_1002DDB34(v41, v10);
  sub_1002DDB34(v41, 40);
  sub_1002DDB34(v41, v4);
  sub_1002DDB34(v41, v5);
  sub_1002DDA50(v41, 1);
  sub_1002DDA50(v41, 8 * v40);
  sub_1002DDB34(v41, 0);
  sub_1002DDB34(v41, 0);
  sub_1002DDB34(v41, 0);
  sub_1002DDB34(v41, 0);
  sub_1002DDB34(v41, 0);
  sub_1002DDB34(v41, 0);
  if (!v39)
  {
    sub_1002F0ED8(__src, 8, 0, v34, v35);
    sub_1002DD9A4(v41, (char *)__src, 1024);
  }
  if (v5 >= 1)
  {
    uint64_t v36 = (v5 - 1);
    if (v38 <= v9)
    {
      do
        sub_1002DD9A4(v41, (char *)(*((void *)a2 + 2) + **((void **)a2 + 9) * v36--), v9);
      while (v36 != -1);
    }
    else
    {
      do
      {
        sub_1002DD9A4(v41, (char *)(*((void *)a2 + 2) + **((void **)a2 + 9) * v36), v9);
        sub_1002DD9A4(v41, (char *)&v42, v38 - v9);
        --v36;
      }
      while (v36 != -1);
    }
  }
  sub_1002DD7B0((uint64_t)v41);
  uint64_t v21 = 1;
LABEL_39:
  sub_1002DD85C((uint64_t)v41);
  return v21;
}

void sub_1002E0240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002DD85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E0258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002DD85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E026C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002DD85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E0280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002DD85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E0298()
{
}

uint64_t sub_1002E02AC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_1002E0330()
{
}

uint64_t sub_1002E0344(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1002E03C4(uint64_t a1)
{
  sub_1002DDFA8(a1);
  *uint64_t v2 = off_100496D18;
  v2[20] = 0;
  uint64_t v3 = v2 + 20;
  v2[21] = 0;
  int v4 = v2 + 5;
  sub_1002D1A1C(v2 + 5);
  uint64_t v5 = sub_1002D19D8(v4, 6);
  *(_WORD *)(v5 + 4) = 17730;
  *(_DWORD *)uint64_t v5 = 1196572451;
  sub_1002D1A1C(v3);
  uint64_t v6 = sub_1002D19D8(v3, 10);
  *(_WORD *)(v6 + 8) = 17731;
  *(void *)uint64_t v6 = *(void *)"#?RADIANCE";
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 16) = 21;
  return a1;
}

void sub_1002E0480(_Unwind_Exception *a1)
{
  sub_1002D1A1C(v2);
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E04A4(void *a1)
{
  *a1 = off_100496D18;
  sub_1002D1A1C(a1 + 20);

  return sub_1002DE670((uint64_t)a1);
}

void sub_1002E04FC(void *a1)
{
  *a1 = off_100496D18;
  sub_1002D1A1C(a1 + 20);
  sub_1002DE670((uint64_t)a1);

  operator delete();
}

uint64_t sub_1002E0568(uint64_t a1)
{
  if (*(void *)(a1 + 48) <= *(void *)(a1 + 168)) {
    return *(void *)(a1 + 168);
  }
  else {
    return *(void *)(a1 + 48);
  }
}

FILE *sub_1002E057C(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    uint64_t v2 = *(const char **)(a1 + 24);
  }
  else {
    uint64_t v2 = "";
  }
  uint64_t result = fopen(v2, "rb");
  *(void *)(a1 + 176) = result;
  if (result)
  {
    sub_1002EE394(result, a1 + 8, a1 + 12, 0);
    if (*(int *)(a1 + 8) < 1 || *(int *)(a1 + 12) <= 0)
    {
      fclose(*(FILE **)(a1 + 176));
      uint64_t result = 0;
      *(void *)(a1 + 176) = 0;
    }
    else
    {
      return (FILE *)1;
    }
  }
  return result;
}

uint64_t sub_1002E0610(uint64_t a1, _DWORD *a2)
{
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  v11[3] = 0u;
  uint64_t v12 = (char *)v11 + 8;
  unint64_t v13 = v14;
  v14[0] = 0;
  v14[1] = 0;
  int32x2_t __src = vrev64_s32(*(int32x2_t *)(a1 + 8));
  sub_100292534((char *)v11, 2, (uint64_t *)&__src, 21);
  int v4 = *(FILE **)(a1 + 176);
  if (v4) {
    goto LABEL_4;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1))
  {
    int v4 = *(FILE **)(a1 + 176);
LABEL_4:
    sub_1002EEBD4(v4, *(float **)&v11[1], HIDWORD(v11[0]), SDWORD2(v11[0]));
    fclose(*(FILE **)(a1 + 176));
    *(void *)(a1 + 176) = 0;
    int v5 = *a2 & 0xFFF;
    if (((LODWORD(v11[0]) ^ *a2) & 7) != 0)
    {
      __src.i32[0] = 33619968;
      int v16 = a2;
      uint64_t v17 = 0;
      sub_10024011C((unsigned int *)v11, (uint64_t)&__src, v5, 255.0, 0.0);
    }
    else
    {
      __src.i32[0] = 33619968;
      int v16 = a2;
      uint64_t v17 = 0;
      sub_10024011C((unsigned int *)v11, (uint64_t)&__src, v5, 1.0, 0.0);
    }
    uint64_t v6 = 1;
    uint64_t v7 = *((void *)&v11[3] + 1);
    if (!*((void *)&v11[3] + 1)) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *((void *)&v11[3] + 1);
  if (!*((void *)&v11[3] + 1)) {
    goto LABEL_10;
  }
LABEL_8:
  if (atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v11);
  }
LABEL_10:
  *((void *)&v11[3] + 1) = 0;
  memset(&v11[1], 0, 32);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v8 = 0;
    int v9 = v12;
    do
      *(_DWORD *)&v9[4 * v8++] = 0;
    while (v8 < SDWORD1(v11[0]));
  }
  if (v13 != v14) {
    j__free(v13);
  }
  return v6;
}

void sub_1002E07F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002E0804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002E0818(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E0834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1002E0848(void *a1, void *a2)
{
  size_t v2 = a1[6];
  BOOL result = 0;
  if (a2[1] >= v2)
  {
    int v4 = *a2 ? (char *)*a2 : "";
    int v5 = a1[5] ? (char *)a1[5] : "";
    if (!memcmp(v4, v5, v2)) {
      return 1;
    }
    uint64_t v6 = a1[20] ? (char *)a1[20] : "";
    if (!memcmp(v4, v6, a1[21])) {
      return 1;
    }
  }
  return result;
}

void sub_1002E08DC()
{
}

void sub_1002E09A0()
{
}

uint64_t sub_1002E09C4(uint64_t a1)
{
  sub_1002DE314(a1);
  *size_t v2 = off_100496D88;
  uint64_t v3 = v2 + 1;
  sub_1002D1A1C(v2 + 1);
  qmemcpy((void *)sub_1002D19D8(v3, 26), "Radiance HDR (*.hdr;*.pic)", 26);
  return a1;
}

void sub_1002E0A40(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_100496B28;
  sub_1002D1A1C(v1 + 7);
  sub_1002D1A1C(v1 + 3);
  sub_1002D1A1C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002E0A8C(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);
  return a1;
}

void sub_1002E0AEC(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);

  operator delete();
}

BOOL sub_1002E0B6C(uint64_t a1, _DWORD *a2, void *a3)
{
  LODWORD(v18[0]) = 1124007936;
  memset((char *)v18 + 4, 0, 48);
  v18[3] = 0u;
  unint64_t v19 = (char *)v18 + 8;
  BOOL v20 = v21;
  v21[0] = 0;
  v21[1] = 0;
  if (((*a2 >> 3) & 0x1FD | 2) != 2)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    qmemcpy((void *)sub_1002D19D8(&v15, 54), "input_img.channels() == 3 || input_img.channels() == 1", 54);
    sub_1002D2278(-215, &v15, "write", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_hdr.cpp", 128);
  }
  if ((*a2 & 0xFF8) != 0)
  {
    LODWORD(v15) = 33619968;
    int v16 = v18;
    uint64_t v17 = 0;
    sub_10025401C((uint64_t)a2, (uint64_t)&v15);
    if ((v18[0] & 7) == 5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  sub_1002E1084(&v15, 3uLL, (uint64_t)a2);
  v14[1] = (void **)&v15;
  void v14[2] = 0;
  LODWORD(v14[0]) = 17104896;
  int v11 = 33619968;
  uint64_t v12 = v18;
  uint64_t v13 = 0;
  sub_100235798((uint64_t)v14, (uint64_t)&v11);
  v14[0] = (void **)&v15;
  sub_100252B98(v14);
  if ((v18[0] & 7) != 5)
  {
LABEL_7:
    LODWORD(v15) = 33619968;
    int v16 = v18;
    uint64_t v17 = 0;
    sub_10024011C((unsigned int *)v18, (uint64_t)&v15, 21, 0.00392156886, 0.0);
  }
LABEL_8:
  if (*a3 != a3[1] && *(_DWORD *)*a3 >= 2u)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    qmemcpy((void *)sub_1002D19D8(&v15, 63), "params.empty() || params[0] == HDR_NONE || params[0] == HDR_RLE", 63);
    sub_1002D2278(-215, &v15, "write", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_hdr.cpp", 138);
  }
  if (*(void *)(a1 + 24)) {
    int v5 = *(const char **)(a1 + 24);
  }
  else {
    int v5 = "";
  }
  uint64_t v6 = fopen(v5, "wb");
  uint64_t v7 = v6;
  if (v6)
  {
    sub_1002EDEE8(v6, SHIDWORD(v18[0]), SDWORD2(v18[0]), 0);
    if (*a3 == a3[1] || *(_DWORD *)*a3 == 1) {
      sub_1002EE800(v7, *(float **)&v18[1], HIDWORD(v18[0]), SDWORD2(v18[0]));
    }
    else {
      sub_1002EE6DC(v7, *(uint64_t *)&v18[1], DWORD2(v18[0]) * HIDWORD(v18[0]));
    }
    fclose(v7);
  }
  if (*((void *)&v18[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v18[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v18);
  }
  *((void *)&v18[3] + 1) = 0;
  memset(&v18[1], 0, 32);
  if (SDWORD1(v18[0]) >= 1)
  {
    uint64_t v8 = 0;
    int v9 = v19;
    do
      *(_DWORD *)&v9[4 * v8++] = 0;
    while (v8 < SDWORD1(v18[0]));
  }
  if (v20 != v21) {
    j__free(v20);
  }
  return v7 != 0;
}

void sub_1002E0E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1000094F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002E0EF8()
{
}

void sub_1002E0FBC()
{
}

BOOL sub_1002E0FE0(uint64_t a1, int a2)
{
  return a2 != 6;
}

void sub_1002E0FF0()
{
}

uint64_t sub_1002E1004(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void *sub_1002E1084(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      sub_10000B98C();
    }
    uint64_t v5 = 96 * a2;
    uint64_t v6 = (char *)operator new(96 * a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    while (1)
    {
      uint64_t v10 = (uint64_t)&v6[v7];
      long long v11 = *(_OWORD *)a3;
      long long v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)a3;
      *(_OWORD *)(v10 + 16) = v12;
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(a3 + 32);
      uint64_t v13 = *(void *)(a3 + 56);
      *(void *)(v10 + 48) = *(void *)(a3 + 48);
      *(void *)(v10 + 56) = v13;
      *(void *)&v6[v7 + 80] = 0;
      *(void *)(v10 + 64) = &v6[v7 + 8];
      *(void *)(v10 + 72) = &v6[v7 + 80];
      *(void *)(v10 + 88) = 0;
      if (v13)
      {
        atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 1u);
        if (*(int *)(a3 + 4) > 2) {
          goto LABEL_10;
        }
      }
      else if (SDWORD1(v11) > 2)
      {
LABEL_10:
        *(_DWORD *)(v10 + 4) = 0;
        sub_1002931A8(v10, a3);
        goto LABEL_5;
      }
      uint64_t v8 = *(void **)(a3 + 72);
      uint64_t v9 = *(void **)(v10 + 72);
      void *v9 = *v8;
      v9[1] = v8[1];
LABEL_5:
      v7 += 96;
      if (v5 == v7)
      {
        a1[1] = &v6[v5];
        return a1;
      }
    }
  }
  return a1;
}

void sub_1002E11BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1002E11EC()
{
}

uint64_t sub_1002E1200(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1002E1280(uint64_t a1)
{
  sub_1002DDFA8(a1);
  *uint64_t v2 = off_100496E90;
  uint64_t v3 = v2 + 5;
  sub_1002D1A1C(v2 + 5);
  uint64_t v4 = sub_1002D19D8(v3, 3);
  *(_WORD *)uint64_t v4 = -9985;
  *(unsigned char *)(v4 + 2) = asc_100437C5C[2];
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 152) = 1;
  return a1;
}

void sub_1002E12FC(_Unwind_Exception *a1)
{
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1310(uint64_t a1)
{
  *(void *)a1 = off_100496E90;
  if (*(void *)(a1 + 168))
  {
    sub_1003B8784(*(void *)(a1 + 168));
    operator delete();
  }
  uint64_t v2 = *(FILE **)(a1 + 160);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 160) = 0;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;

  return sub_1002DE670(a1);
}

void sub_1002E13AC(uint64_t a1)
{
  *(void *)a1 = off_100496E90;
  if (*(void *)(a1 + 168))
  {
    sub_1003B8784(*(void *)(a1 + 168));
    operator delete();
  }
  uint64_t v2 = *(FILE **)(a1 + 160);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 160) = 0;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  sub_1002DE670(a1);

  operator delete();
}

void sub_1002E145C()
{
}

void sub_1002E14EC()
{
}

void sub_1002E15C8()
{
}

void sub_1002E15FC(uint64_t a1)
{
  if (*(void *)(a1 + 168))
  {
    sub_1003B8784(*(void *)(a1 + 168));
    operator delete();
  }
  uint64_t v2 = *(FILE **)(a1 + 160);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 160) = 0;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  operator new();
}

void sub_1002E1910(uint64_t a1)
{
}

uint64_t sub_1002E192C(uint64_t a1, int *a2)
{
  unsigned __int8 v24 = 0;
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 8))
    {
      if (*(_DWORD *)(a1 + 12))
      {
        uint64_t v5 = *((void *)a2 + 10);
        int v6 = *a2;
        if (!setjmp((int *)(v3 + 800)))
        {
          if (!*(void *)(v3 + 248) && !*(void *)(v3 + 256) && !*(void *)(v3 + 216) && !*(void *)(v3 + 224)) {
            sub_1002E1BA8(v3, v3 + 248, v3 + 216);
          }
          int v7 = *(_DWORD *)(v3 + 56);
          if (v7 == 4) {
            int v8 = 4;
          }
          else {
            int v8 = 2;
          }
          if (v7 == 4) {
            int v9 = 4;
          }
          else {
            int v9 = 3;
          }
          if (v7 == 4) {
            int v10 = 4;
          }
          else {
            int v10 = 1;
          }
          if ((v6 & 0xFF8) != 0) {
            int v10 = v9;
          }
          else {
            int v8 = v10;
          }
          *(_DWORD *)(v3 + 64) = v8;
          *(_DWORD *)(v3 + 124) = v10;
          sub_1003CB6F4(v3);
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)(v3 + 8) + 16))(v3, 1, (4 * *(_DWORD *)(a1 + 8)), 1);
          long long v12 = (char *)*((void *)a2 + 2);
          int v13 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 12) = v13 - 1;
          if (v13)
          {
            int v14 = (const void **)v11;
            if ((v6 & 0xFF8) != 0)
            {
              do
              {
                while (1)
                {
                  sub_1003CB908(v3, (uint64_t)v14, 1);
                  int v16 = (unsigned __int8 *)*v14;
                  unint64_t v17 = *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header;
                  if (*(_DWORD *)(v3 + 124) == 3) {
                    break;
                  }
                  sub_1002F0798(v16, 0, v12, 0, v17);
                  v12 += v5;
                  int v15 = *(_DWORD *)(a1 + 12);
                  *(_DWORD *)(a1 + 12) = v15 - 1;
                  if (!v15) {
                    goto LABEL_33;
                  }
                }
                sub_1002EFB7C((const char *)v16, 0, v12, 0, v17);
                v12 += v5;
                int v18 = *(_DWORD *)(a1 + 12);
                *(_DWORD *)(a1 + 12) = v18 - 1;
              }
              while (v18);
            }
            else
            {
              do
              {
                while (1)
                {
                  sub_1003CB908(v3, (uint64_t)v14, 1);
                  uint64_t v20 = *(unsigned int *)(a1 + 8);
                  if (*(_DWORD *)(v3 + 124) != 1) {
                    break;
                  }
                  memcpy(v12, *v14, (int)v20);
                  v12 += v5;
                  int v19 = *(_DWORD *)(a1 + 12);
                  *(_DWORD *)(a1 + 12) = v19 - 1;
                  if (!v19) {
                    goto LABEL_33;
                  }
                }
                sub_1002F09F4((char *)*v14, 0, (unint64_t)v12, 0, v20 | (unint64_t)&_mh_execute_header);
                v12 += v5;
                int v21 = *(_DWORD *)(a1 + 12);
                *(_DWORD *)(a1 + 12) = v21 - 1;
              }
              while (v21);
            }
          }
LABEL_33:
          unsigned __int8 v24 = 1;
          sub_1003CB608(v3);
        }
      }
    }
    if (*(void *)(a1 + 168))
    {
      sub_1003B8784(*(void *)(a1 + 168));
      operator delete();
    }
  }
  unint64_t v22 = *(FILE **)(a1 + 160);
  if (v22)
  {
    fclose(v22);
    *(void *)(a1 + 160) = 0;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = -1;
  return v24;
}

uint64_t sub_1002E1BA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = result;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  uint64_t v50 = a3;
  long long v66 = 0u;
  long long v67 = 0u;
  int v3 = 416;
  unsigned int v4 = &dword_100000004;
  long long v64 = 0u;
  long long v65 = 0u;
  while (1)
  {
    int v15 = *((unsigned __int8 *)&unk_100407090 + v4 + 1);
    int v16 = *((unsigned __int8 *)&unk_100407090 + v4 + 2);
    int v17 = *((unsigned __int8 *)&unk_100407090 + v4 + 3);
    int v18 = *((unsigned __int8 *)&unk_100407090 + v4 + 4);
    int v19 = *((unsigned __int8 *)&unk_100407090 + v4 + 5);
    int v20 = *((unsigned __int8 *)&unk_100407090 + v4 + 6);
    int v21 = *((unsigned __int8 *)&unk_100407090 + v4 + 7);
    int v22 = *((unsigned __int8 *)&unk_100407090 + v4 + 8);
    int v23 = *((unsigned __int8 *)&unk_100407090 + v4 + 9);
    int v24 = *((unsigned __int8 *)&unk_100407090 + v4 + 10);
    int v25 = *((unsigned __int8 *)&unk_100407090 + v4 + 11);
    LODWORD(v26) = *((unsigned __int8 *)&unk_100407090 + v4 + 12);
    int v27 = *((unsigned __int8 *)&unk_100407090 + v4 + 13);
    int v28 = *((unsigned __int8 *)&unk_100407090 + v4 + 14);
    int v29 = *((unsigned __int8 *)&unk_100407090 + v4 + 15);
    int v30 = *((unsigned __int8 *)&unk_100407090 + v4 + 16);
    unint64_t v31 = (v15 + v16 + v17 + v18 + v19 + v20 + v21 + v22 + v23 + v24 + v25 + v26 + v27 + v28 + v29 + v30);
    unsigned int v32 = v3 - 17;
    if (v31 > 0x100 || v32 < v31) {
      return result;
    }
    unsigned int v34 = v4 + 17;
    if (!v31)
    {
      unsigned int v36 = v4 + 17;
      goto LABEL_16;
    }
    if (v31 < 0x20 || -18 - v4 < (int)v31 - 1)
    {
      unint64_t v35 = 0;
      unsigned int v36 = v4 + 17;
LABEL_12:
      unsigned int v37 = v36;
      do
      {
        unsigned int v36 = v37 + 1;
        *((unsigned char *)&v64 + v35++) = *((unsigned char *)&unk_100407090 + v37++);
      }
      while (v35 < v31);
      goto LABEL_16;
    }
    char v45 = *((unsigned char *)&unk_100407090 + v4 + 16);
    BOOL result = *((unsigned __int8 *)&unk_100407090 + v4 + 15);
    unint64_t v35 = v31 & 0xFFFFFFE0;
    unsigned int v36 = v34 + (v31 & 0xFFFFFFE0);
    unint64_t v46 = v35;
    int v47 = &v65;
    do
    {
      uint64_t v48 = (long long *)((char *)&unk_100407090 + v34);
      long long v49 = v48[1];
      *(v47 - 1) = *v48;
      *int v47 = v49;
      v47 += 2;
      v34 += 32;
      v46 -= 32;
    }
    while (v46);
    LOBYTE(v29) = result;
    LOBYTE(v30) = v45;
    if (v35 != v31) {
      goto LABEL_12;
    }
LABEL_16:
    uint64_t v38 = *((unsigned __int8 *)&unk_100407090 + v4);
    int v39 = (uint64_t *)(a2 + 8 * (v38 & 0xFFFFFFFFFFFFFFEFLL));
    if ((v38 & 0x10) != 0)
    {
      LODWORD(v38) = v38 & 0xFFFFFFEF;
      __int16 v40 = v39;
    }
    else
    {
      __int16 v40 = (uint64_t *)(a3 + 8 * v38);
    }
    if (v38 <= 3)
    {
      BOOL result = *v40;
      if (*v40) {
        goto LABEL_2;
      }
      char v55 = v26;
      char v56 = v25;
      uint64_t v26 = a2;
      unsigned int v60 = v32;
      char v61 = v20;
      char v41 = v15;
      char v62 = v16;
      char v63 = v18;
      char v57 = v24;
      char v58 = v23;
      char v42 = v17;
      char v43 = v19;
      char v54 = v27;
      char v44 = v21;
      char v59 = v22;
      char v52 = v30;
      char v53 = v29;
      BOOL result = sub_1003C57D8(v51);
      LOBYTE(v30) = v52;
      LOBYTE(v29) = v53;
      LOBYTE(v21) = v44;
      LOBYTE(v27) = v54;
      LOBYTE(v20) = v61;
      LOBYTE(v16) = v62;
      LOBYTE(v19) = v43;
      LOBYTE(v18) = v63;
      LOBYTE(v17) = v42;
      LOBYTE(v23) = v58;
      LOBYTE(v22) = v59;
      LOBYTE(v15) = v41;
      LOBYTE(v25) = v56;
      LOBYTE(v24) = v57;
      unsigned int v32 = v60;
      a2 = v26;
      LOBYTE(v26) = v55;
      a3 = v50;
      *__int16 v40 = result;
      if (result)
      {
LABEL_2:
        *(unsigned char *)BOOL result = 0;
        *(unsigned char *)(result + 1) = v15;
        *(unsigned char *)(result + 2) = v16;
        *(unsigned char *)(result + 3) = v17;
        *(unsigned char *)(result + 4) = v18;
        *(unsigned char *)(result + 5) = v19;
        *(unsigned char *)(result + 6) = v20;
        *(unsigned char *)(result + 7) = v21;
        *(unsigned char *)(result + 8) = v22;
        *(unsigned char *)(result + 9) = v23;
        *(unsigned char *)(result + 10) = v24;
        *(unsigned char *)(result + 11) = v25;
        *(unsigned char *)(result + 12) = v26;
        *(unsigned char *)(result + 13) = v27;
        *(unsigned char *)(result + 14) = v28;
        *(unsigned char *)(result + 15) = v29;
        *(unsigned char *)(result + 16) = v30;
        uint64_t v5 = *v40;
        long long v6 = v77;
        *(_OWORD *)(v5 + 209) = v76;
        *(_OWORD *)(v5 + 225) = v6;
        long long v7 = v79;
        *(_OWORD *)(v5 + 241) = v78;
        long long v8 = v73;
        *(_OWORD *)(v5 + 145) = v72;
        *(_OWORD *)(v5 + 161) = v8;
        long long v9 = v75;
        *(_OWORD *)(v5 + 177) = v74;
        *(_OWORD *)(v5 + 193) = v9;
        long long v10 = v69;
        *(_OWORD *)(v5 + 81) = v68;
        *(_OWORD *)(v5 + 97) = v10;
        long long v11 = v71;
        *(_OWORD *)(v5 + 113) = v70;
        *(_OWORD *)(v5 + 129) = v11;
        long long v12 = v65;
        *(_OWORD *)(v5 + 17) = v64;
        *(_OWORD *)(v5 + 33) = v12;
        long long v13 = v67;
        *(_OWORD *)(v5 + 49) = v66;
        *(_OWORD *)(v5 + 65) = v13;
        int v3 = v32 - v31;
        uint64_t v14 = v5 + 17;
        unsigned int v4 = v36;
        *(_OWORD *)(v14 + 240) = v7;
        if (v32 - v31 > 0x10) {
          continue;
        }
      }
    }
    return result;
  }
}

uint64_t sub_1002E1F2C(uint64_t a1)
{
  sub_1002DE314(a1);
  *uint64_t v2 = off_100496F00;
  int v3 = v2 + 1;
  sub_1002D1A1C(v2 + 1);
  qmemcpy((void *)sub_1002D19D8(v3, 31), "JPEG files (*.jpeg;*.jpg;*.jpe)", 31);
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_1002E1FB0(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_100496B28;
  sub_1002D1A1C(v1 + 7);
  sub_1002D1A1C(v1 + 3);
  sub_1002D1A1C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002E1FFC(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);
  return a1;
}

void sub_1002E205C(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);

  operator delete();
}

void sub_1002E20DC()
{
}

void sub_1002E21A0()
{
}

BOOL sub_1002E21C4(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v51 = a1 + 7;
  sub_1002D1A1C(a1 + 7);
  unsigned __int8 v56 = 0;
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  long long v8 = (char *)operator new(0x1000uLL);
  long long v9 = v8 + 4096;
  std::string __p = v8;
  char v55 = v8 + 4096;
  bzero(v8, 0x1000uLL);
  char v54 = v9;
  long long v69 = v71;
  unint64_t v70 = 1032;
  sub_1003B8664((char *)v60, 90, 568);
  v60[0] = sub_1003DAC8C((uint64_t)v58);
  v58[0] = sub_1002E1910;
  uint64_t v10 = a1[5];
  if (v10)
  {
    v52[5] = &__p;
    v52[6] = v10;
    v60[5] = v52;
    v52[2] = nullsub_29;
    v52[3] = sub_1002E292C;
    v52[4] = sub_1002E2B24;
    v52[0] = __p;
    v52[1] = v54 - (unsigned char *)__p;
    long long v11 = 0;
    goto LABEL_8;
  }
  if (a1[3]) {
    long long v12 = (const char *)a1[3];
  }
  else {
    long long v12 = "";
  }
  long long v13 = fopen(v12, "wb");
  if (v13)
  {
    uint64_t v14 = v13;
    sub_1003CD314((uint64_t)v60, (uint64_t)v13);
    long long v11 = v14;
LABEL_8:
    if (setjmp(v59))
    {
      int v15 = v11;
      if (v56) {
        goto LABEL_83;
      }
      goto LABEL_81;
    }
    int v61 = v6;
    int v62 = v7;
    int v50 = (*(_DWORD *)a2 >> 3) & 0x1FF;
    int8x8_t v63 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v50 == 0), 0x1FuLL)), (int8x8_t)0x100000001, (int8x8_t)0x200000003);
    uint64_t v16 = *a3;
    uint64_t v17 = a3[1];
    uint64_t v18 = 0;
    if (v17 != *a3)
    {
      unint64_t v19 = (v17 - *a3) >> 2;
      uint64_t v20 = 95;
      uint64_t v21 = 0xFFFFFFFFLL;
      unint64_t v22 = 0;
      uint64_t v23 = 0xFFFFFFFFLL;
      int v24 = 0;
      int v25 = 0;
      while (2)
      {
        uint64_t v31 = v20;
        switch(*(_DWORD *)(v16 + 4 * v22))
        {
          case 1:
            unsigned int v32 = *(_DWORD *)(v16 + 4 * v22 + 4) & ~(*(int *)(v16 + 4 * v22 + 4) >> 31);
            if (v32 >= 0x64) {
              uint64_t v31 = 100;
            }
            else {
              uint64_t v31 = v32;
            }
            goto LABEL_14;
          case 2:
            int v25 = *(_DWORD *)(v16 + 4 * v22 + 4);
            goto LABEL_14;
          case 3:
            int v24 = *(_DWORD *)(v16 + 4 * v22 + 4);
            goto LABEL_14;
          case 4:
            unsigned int v33 = *(_DWORD *)(v16 + 4 * v22 + 4) & ~(*(int *)(v16 + 4 * v22 + 4) >> 31);
            if (v33 >= 0xFFFF) {
              uint64_t v28 = 0xFFFFLL;
            }
            else {
              uint64_t v28 = v33;
            }
            uint64_t v26 = v21;
            uint64_t v27 = v23;
            goto LABEL_17;
          case 5:
            int v34 = *(_DWORD *)(v16 + 4 * v22 + 4);
            if (v34 >= 0x64) {
              unsigned int v35 = 100;
            }
            else {
              unsigned int v35 = *(_DWORD *)(v16 + 4 * v22 + 4);
            }
            if ((int)v21 >= 0) {
              unsigned int v36 = v21;
            }
            else {
              unsigned int v36 = v35;
            }
            if (v34 >= 0) {
              uint64_t v26 = v36;
            }
            else {
              uint64_t v26 = v21;
            }
            if (v34 >= 0) {
              uint64_t v31 = v35;
            }
            else {
              uint64_t v31 = v31;
            }
            if (v34 >= 0) {
              uint64_t v27 = v35;
            }
            else {
              uint64_t v27 = v23;
            }
            goto LABEL_16;
          case 6:
            int v37 = *(_DWORD *)(v16 + 4 * v22 + 4);
            if (v37 >= 0x64) {
              unsigned int v38 = 100;
            }
            else {
              unsigned int v38 = *(_DWORD *)(v16 + 4 * v22 + 4);
            }
            if (v37 >= 0) {
              uint64_t v26 = v38;
            }
            else {
              uint64_t v26 = v21;
            }
            goto LABEL_15;
          default:
LABEL_14:
            uint64_t v26 = v21;
LABEL_15:
            uint64_t v27 = v23;
LABEL_16:
            uint64_t v28 = v18;
LABEL_17:
            int v29 = v25;
            int v30 = v24;
            v22 += 2;
            uint64_t v20 = v31;
            uint64_t v18 = v28;
            uint64_t v23 = v27;
            uint64_t v21 = v26;
            if (v22 < v19) {
              continue;
            }
            goto LABEL_50;
        }
      }
    }
    LODWORD(v27) = -1;
    LODWORD(v31) = 95;
    int v30 = 0;
    LODWORD(v28) = 0;
    int v29 = 0;
    LODWORD(v26) = -1;
LABEL_50:
    sub_1003C8050((uint64_t)v60);
    int v68 = v28;
    sub_1003C8018((uint64_t)v60, v31, 1);
    if (v29) {
      sub_1003C869C((uint64_t)v60);
    }
    if (v30) {
      char v67 = 1;
    }
    if ((v27 & 0x80000000) == 0 && (v26 & 0x80000000) == 0)
    {
      int v65 = sub_1003C7FE0(v27);
      int v66 = sub_1003C7FE0(v26);
      if (v27 != v26)
      {
        uint64_t v39 = v64;
        *(void *)(v64 + 8) = 0x100000001;
        *(void *)(v39 + 104) = 0x100000001;
      }
      sub_1003C5804((uint64_t)v60, 1);
    }
    sub_1003B8984((uint64_t)v60, 1);
    if (v50)
    {
      if (v70 >= 3 * (int)v6)
      {
        unint64_t v70 = 3 * (int)v6;
        if ((int)v7 < 1)
        {
LABEL_80:
          sub_1003B881C((uint64_t)v60);
          unsigned __int8 v56 = 1;
          int v15 = v11;
          goto LABEL_83;
        }
LABEL_70:
        __int16 v40 = v69;
        unint64_t v41 = v6 | (unint64_t)&_mh_execute_header;
        if (v50 == 2)
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            *(void *)__s = *(void *)(a2 + 16) + *(void *)(a2 + 80) * i;
            sub_1002EFB7C(*(const char **)__s, 0, v40, 0, v41);
            *(void *)__s = v40;
            sub_1003B8A30((uint64_t)v60, (uint64_t)__s, 1u);
          }
        }
        else if (v50 == 3)
        {
          for (uint64_t j = 0; j != v7; ++j)
          {
            *(void *)__s = *(void *)(a2 + 16) + *(void *)(a2 + 80) * j;
            sub_1002EF9D4(*(uint64_t *)__s, 0, v40, 0, v41, 2);
            *(void *)__s = v40;
            sub_1003B8A30((uint64_t)v60, (uint64_t)__s, 1u);
          }
        }
        else
        {
          for (uint64_t k = 0; k != v7; ++k)
          {
            *(void *)__s = *(void *)(a2 + 16) + *(void *)(a2 + 80) * k;
            sub_1003B8A30((uint64_t)v60, (uint64_t)__s, 1u);
          }
        }
        goto LABEL_80;
      }
      if (v69 != v71)
      {
        if (v69) {
          operator delete[]();
        }
        long long v69 = v71;
      }
      unint64_t v70 = 3 * (int)v6;
      if ((3 * v6) >= 0x409) {
        operator new[]();
      }
    }
    if ((int)v7 < 1) {
      goto LABEL_80;
    }
    goto LABEL_70;
  }
  int v15 = 0;
LABEL_81:
  ((void (*)(void *, char *))v58[3])(v60, __s);
  sub_1002D1A1C(v51);
  size_t v45 = strlen(__s);
  if (v45)
  {
    size_t v46 = v45;
    int v47 = (void *)sub_1002D19D8(v51, v45);
    memcpy(v47, __s, v46);
  }
LABEL_83:
  sub_1003B8784((uint64_t)v60);
  int v48 = v56;
  if (v69 != v71 && v69) {
    operator delete[]();
  }
  if (__p)
  {
    char v54 = __p;
    operator delete(__p);
  }
  if (v15) {
    fclose(v15);
  }
  return v48 != 0;
}

void sub_1002E2848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  uint64_t v20 = v19;
  if (STACK[0x4D8] != a11 && STACK[0x4D8] != 0) {
    operator delete[]();
  }
  if (__p)
  {
    operator delete(__p);
    if (!v20) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_8;
  }
  fclose(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E28F4()
{
  return 0;
}

uint64_t sub_1002E28FC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 40);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  int v5 = a2 - v3;
  uint64_t v6 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v3 = a2;
    int v5 = 0;
  }
  *((_DWORD *)v2 + 14) = v5;
  *uint64_t v2 = v4 + v3;
  v2[1] = v6;
  return result;
}

uint64_t sub_1002E292C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v4 = *(char **)v2;
  uint64_t v3 = *(char **)(v2 + 8);
  unint64_t v5 = (unint64_t)&v3[-*(void *)v2];
  size_t v6 = *(void *)(*(void *)(v1 + 40) + 8) - **(void **)(v1 + 40);
  unint64_t v7 = v6 + v5;
  if (v5 < v6 + v5)
  {
    uint64_t v8 = *(void *)(v2 + 16);
    if (v8 - (uint64_t)v3 >= v6)
    {
      bzero(*(void **)(v2 + 8), v6);
      *(void *)(v2 + 8) = &v3[v6];
      goto LABEL_31;
    }
    if ((v7 & 0x8000000000000000) != 0) {
      sub_10000B98C();
    }
    unint64_t v9 = v8 - (void)v4;
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v7) {
      uint64_t v10 = v6 + v5;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    long long v12 = (char *)operator new(v11);
    long long v13 = &v12[v5];
    uint64_t v14 = &v12[v11];
    int v15 = &v12[v7];
    bzero(&v12[v5], v6);
    if (v3 == v4) {
      goto LABEL_29;
    }
    if (v5 >= 8 && (unint64_t)(v4 - v12) >= 0x20)
    {
      if (v5 < 0x20)
      {
        unint64_t v16 = 0;
        goto LABEL_21;
      }
      unint64_t v16 = v5 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v17 = v3 - 16;
      uint64_t v18 = &v12[v3 - 16 - v4];
      unint64_t v19 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)uint64_t v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v5 == v16) {
        goto LABEL_28;
      }
      if ((v5 & 0x18) != 0)
      {
LABEL_21:
        v13 -= v5 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v21 = &v3[-v16 - 8];
        unint64_t v22 = (char *)(v21 - v4);
        unint64_t v23 = v16 - (v5 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v24 = *(void *)v21;
          v21 -= 8;
          *(void *)&v22[(void)v12] = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        v3 -= v5 & 0xFFFFFFFFFFFFFFF8;
        if (v5 == (v5 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
      v13 -= v16;
      v3 -= v16;
    }
LABEL_26:
    int v25 = v13 - 1;
    do
    {
      char v26 = *--v3;
      *v25-- = v26;
    }
    while (v3 != v4);
LABEL_28:
    uint64_t v3 = v4;
    long long v13 = v12;
LABEL_29:
    *(void *)uint64_t v2 = v13;
    *(void *)(v2 + 8) = v15;
    *(void *)(v2 + 16) = v14;
    if (v3) {
      operator delete(v3);
    }
    goto LABEL_31;
  }
  if (v5 > v7) {
    *(void *)(v2 + 8) = &v4[v7];
  }
LABEL_31:
  memcpy((void *)(**(void **)(v1 + 48) + v5), **(const void ***)(v1 + 40), v6);
  *(void *)uint64_t v1 = **(void **)(v1 + 40);
  *(void *)(v1 + 8) = v6;
  return 1;
}

void *sub_1002E2B24(void *result)
{
  uint64_t v1 = (void *)result[5];
  uint64_t v2 = *(void *)(v1[5] + 8) - *(void *)v1[5];
  uint64_t v3 = v1[1];
  size_t v4 = v2 - v3;
  if (v2 == v3) {
    return result;
  }
  uint64_t v5 = v1[6];
  unint64_t v7 = *(char **)v5;
  size_t v6 = *(char **)(v5 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)v5];
  unint64_t v9 = v4 + v8;
  if (v8 >= v4 + v8)
  {
    if (v8 > v4 + v8) {
      *(void *)(v5 + 8) = &v7[v9];
    }
    goto LABEL_32;
  }
  uint64_t v10 = *(void *)(v5 + 16);
  if (v10 - (uint64_t)v6 < v4)
  {
    if ((v9 & 0x8000000000000000) != 0) {
      sub_10000B98C();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v9) {
      uint64_t v12 = v4 + v8;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    uint64_t v14 = (char *)operator new(v13);
    int v15 = &v14[v8];
    unint64_t v16 = &v14[v13];
    uint64_t v17 = &v14[v9];
    bzero(&v14[v8], v4);
    if (v6 == v7) {
      goto LABEL_30;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v18 = 0;
        goto LABEL_22;
      }
      unint64_t v18 = v8 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v19 = v6 - 16;
      long long v20 = &v14[v6 - 16 - v7];
      unint64_t v21 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v22 = *(_OWORD *)v19;
        *((_OWORD *)v20 - 1) = *((_OWORD *)v19 - 1);
        *(_OWORD *)long long v20 = v22;
        v20 -= 32;
        v19 -= 32;
        v21 -= 32;
      }
      while (v21);
      if (v8 == v18) {
        goto LABEL_29;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_22:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v23 = &v6[-v18 - 8];
        uint64_t v24 = (char *)(v23 - v7);
        unint64_t v25 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v26 = *(void *)v23;
          v23 -= 8;
          *(void *)&v24[(void)v14] = v26;
          v24 -= 8;
          v25 += 8;
        }
        while (v25);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      v15 -= v18;
      v6 -= v18;
    }
LABEL_27:
    uint64_t v27 = v15 - 1;
    do
    {
      char v28 = *--v6;
      *v27-- = v28;
    }
    while (v6 != v7);
LABEL_29:
    size_t v6 = v7;
    int v15 = v14;
LABEL_30:
    *(void *)uint64_t v5 = v15;
    *(void *)(v5 + 8) = v17;
    *(void *)(v5 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_32;
  }
  bzero(*(void **)(v5 + 8), v4);
  *(void *)(v5 + 8) = &v6[v4];
LABEL_32:
  int v29 = (void *)(*(void *)v1[6] + v8);
  int v30 = *(const void **)v1[5];

  return memcpy(v29, v30, v4);
}

void sub_1002E2D48()
{
}

uint64_t sub_1002E2D5C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_1002E2DE0()
{
}

uint64_t sub_1002E2DF4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1002E2E74(uint64_t a1)
{
  sub_1002DDFA8(a1);
  *uint64_t v2 = off_100497008;
  sub_1002DC53C((uint64_t)(v2 + 20));
  *(void *)(a1 + 160) = off_1004968E0;
  *(unsigned char *)(a1 + 152) = 1;
  *(unsigned char *)(a1 + 244) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_1004072F0;
  return a1;
}

void sub_1002E2EF4(_Unwind_Exception *a1)
{
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E2F08(void *a1)
{
  *a1 = off_100497008;
  uint64_t v2 = (uint64_t)(a1 + 20);
  sub_1002DCC18((uint64_t)(a1 + 20));
  sub_1002DCCC8(v2);

  return sub_1002DE670((uint64_t)a1);
}

void sub_1002E2F70(void *a1)
{
  *a1 = off_100497008;
  uint64_t v2 = (uint64_t)(a1 + 20);
  sub_1002DCC18((uint64_t)(a1 + 20));
  sub_1002DCCC8(v2);
  sub_1002DE670((uint64_t)a1);

  operator delete();
}

uint64_t sub_1002E2FEC()
{
  return 3;
}

BOOL sub_1002E2FF4(uint64_t a1, void *a2)
{
  if (a2[1] < 3uLL) {
    return 0;
  }
  uint64_t v2 = (unsigned char *)*a2;
  if (*(unsigned char *)*a2 != 80 || v2[1] != 55) {
    return 0;
  }
  __darwin_ct_rune_t v3 = (char)v2[2];
  if (v3 < 0) {
    return __maskrune(v3, 0x4000uLL) != 0;
  }
  else {
    return (_DefaultRuneLocale.__runetype[v3] & 0x4000) != 0;
  }
}

void sub_1002E3078()
{
}

void sub_1002E3108()
{
}

void sub_1002E31EC()
{
  sub_1002DE670(v0);
  operator delete();
}

FILE *sub_1002E3220(uint64_t a1)
{
  if (!*(void *)(a1 + 72)) {
    goto LABEL_13;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 60);
  if ((int)v2 >= 3)
  {
    uint64_t v4 = *(void *)(a1 + 120);
    uint64_t v5 = (int *)(v4 + 4);
    uint64_t v6 = 1;
    uint64_t v7 = v2 & 0xFFFFFFFE;
    uint64_t v8 = 1;
    do
    {
      v6 *= *(v5 - 1);
      v8 *= *v5;
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    uint64_t v3 = v8 * v6;
    uint64_t v9 = v2 - (v2 & 0xFFFFFFFE);
    if (v9)
    {
      uint64_t v10 = (int *)(v4 + ((4 * v2) & 0x3FFFFFFF8));
      do
      {
        uint64_t v11 = *v10++;
        v3 *= v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    uint64_t v3 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
  }
  if (v2 && v3)
  {
    if ((sub_1002DCA78(a1 + 160, a1 + 56) & 1) == 0) {
      return 0;
    }
  }
  else
  {
LABEL_13:
    BOOL result = sub_1002DC998(a1 + 160, (const char **)(a1 + 24));
    if (!result) {
      return result;
    }
  }
  size_t v13 = (void *)(a1 + 160);
  uint64_t v81 = a1;
  if (sub_1002DCE08((void *)(a1 + 160)) != 80)
  {
    exception = __cxa_allocate_exception(0x58uLL);
    sub_10022F344(__str, "Invalid header");
    sub_10022F344(&__endptr, "readHeader");
    sub_10022F344(v83, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
    sub_1002D1C2C((uint64_t)exception, -2, (uint64_t *)__str, (uint64_t *)&__endptr, v83, 381);
    void *exception = &off_1004977D8;
  }
  if (sub_1002DCE08((void *)(a1 + 160)) != 55)
  {
    long long v77 = __cxa_allocate_exception(0x58uLL);
    sub_10022F344(__str, "Invalid header");
    sub_10022F344(&__endptr, "readHeader");
    sub_10022F344(v83, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
    sub_1002D1C2C((uint64_t)v77, -2, (uint64_t *)__str, (uint64_t *)&__endptr, v83, 385);
    void *v77 = &off_1004977D8;
  }
  int v14 = sub_1002DCE08((void *)(a1 + 160));
  if (v14 != 10 && v14 != 13)
  {
    long long v78 = __cxa_allocate_exception(0x58uLL);
    sub_10022F344(__str, "Invalid header");
    sub_10022F344(&__endptr, "readHeader");
    sub_10022F344(v83, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
    sub_1002D1C2C((uint64_t)v78, -2, (uint64_t *)__str, (uint64_t *)&__endptr, v83, 389);
    *long long v78 = &off_1004977D8;
  }
  int v15 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  while (2)
  {
    while (1)
    {
      unsigned __int8 v85 = 0;
      do
      {
        unsigned int v18 = sub_1002DCE08(v13);
        unsigned int v19 = v18;
        if (v18 <= 0x7F) {
          __uint32_t v17 = _DefaultRuneLocale.__runetype[v18] & 0x4000;
        }
        else {
          __uint32_t v17 = __maskrune(v18, 0x4000uLL);
        }
      }
      while (v17);
      int v16 = 0;
      if (v19 != 10 && v19 != 13) {
        break;
      }
LABEL_20:
      int v15 = v16;
    }
    if (v19 == 35)
    {
      do
        int v20 = sub_1002DCE08(v13);
      while (v20 != 10 && v20 != 13);
      int v16 = 1;
      goto LABEL_20;
    }
    __endptr = 0;
    if (v19 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v19] & 0x4000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_62;
    }
    if (__maskrune(v19, 0x4000uLL)) {
      goto LABEL_62;
    }
LABEL_36:
    LOBYTE(__endptr) = v19;
    unsigned int v21 = sub_1002DCE08(v13);
    unsigned int v19 = v21;
    if (v21 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v21] & 0x4000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_62;
    }
    if (__maskrune(v21, 0x4000uLL)) {
      goto LABEL_62;
    }
LABEL_40:
    BYTE1(__endptr) = v19;
    unsigned int v22 = sub_1002DCE08(v13);
    unsigned int v19 = v22;
    if (v22 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v22] & 0x4000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_62;
    }
    if (__maskrune(v22, 0x4000uLL)) {
      goto LABEL_62;
    }
LABEL_44:
    BYTE2(__endptr) = v19;
    unsigned int v23 = sub_1002DCE08(v13);
    unsigned int v19 = v23;
    if (v23 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v23] & 0x4000) == 0) {
        goto LABEL_48;
      }
      goto LABEL_62;
    }
    if (__maskrune(v23, 0x4000uLL)) {
      goto LABEL_62;
    }
LABEL_48:
    BYTE3(__endptr) = v19;
    unsigned int v24 = sub_1002DCE08(v13);
    unsigned int v19 = v24;
    if (v24 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v24] & 0x4000) == 0) {
        goto LABEL_52;
      }
      goto LABEL_62;
    }
    if (__maskrune(v24, 0x4000uLL)) {
      goto LABEL_62;
    }
LABEL_52:
    BYTE4(__endptr) = v19;
    unsigned int v25 = sub_1002DCE08(v13);
    unsigned int v19 = v25;
    if (v25 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v25] & 0x4000) == 0) {
        goto LABEL_56;
      }
      goto LABEL_62;
    }
    if (__maskrune(v25, 0x4000uLL)) {
      goto LABEL_62;
    }
LABEL_56:
    BYTE5(__endptr) = v19;
    unsigned int v26 = sub_1002DCE08(v13);
    unsigned int v19 = v26;
    if (v26 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v26] & 0x4000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_62;
    }
    if (__maskrune(v26, 0x4000uLL)) {
      goto LABEL_62;
    }
LABEL_60:
    BYTE6(__endptr) = v19;
    unsigned int v27 = sub_1002DCE08(v13);
    unsigned int v19 = v27;
    if (v27 <= 0x7F)
    {
      if ((_DefaultRuneLocale.__runetype[v27] & 0x4000) == 0) {
        goto LABEL_65;
      }
LABEL_62:
      if (v19 <= 0x7F) {
        goto LABEL_66;
      }
      goto LABEL_63;
    }
    if (__maskrune(v27, 0x4000uLL)) {
      goto LABEL_62;
    }
LABEL_65:
    HIBYTE(__endptr) = v19;
    unsigned int v19 = sub_1002DCE08(v13);
    if (v19 <= 0x7F)
    {
LABEL_66:
      __uint32_t v28 = _DefaultRuneLocale.__runetype[v19] & 0x4000;
      goto LABEL_67;
    }
LABEL_63:
    __uint32_t v28 = __maskrune(v19, 0x4000uLL);
LABEL_67:
    if (!v28) {
      goto LABEL_185;
    }
    BOOL v29 = __endptr == 1448624461 && *(_DWORD *)((char *)&__endptr + 3) == 4997462;
    if (v29)
    {
      if ((unint64_t)__endptr ^ 0x455059544C505554 | v85) {
        int v15 = 6;
      }
      else {
        int v15 = 7;
      }
    }
    else
    {
      int v30 = WORD2(__endptr) ^ 0x48;
      unsigned int v31 = __endptr ^ 0x54504544 | v30;
      unsigned int v32 = __endptr ^ 0x48444E45 | *(_DWORD *)((char *)&__endptr + 3) ^ 0x524448;
      BOOL v29 = v32 == 0;
      BOOL v33 = v32 != 0;
      unsigned int v34 = __endptr ^ 0x47494548 | *(_DWORD *)((char *)&__endptr + 3) ^ 0x544847;
      if (v29) {
        int v35 = 2;
      }
      else {
        int v35 = v15;
      }
      BOOL v29 = v34 == 0;
      BOOL v36 = v34 != 0;
      unsigned int v37 = __endptr ^ 0x54444957 | v30;
      if (v29) {
        int v38 = 3;
      }
      else {
        int v38 = v35;
      }
      BOOL v29 = v37 == 0;
      BOOL v39 = v37 != 0;
      if (v29) {
        int v40 = 4;
      }
      else {
        int v40 = v38;
      }
      BOOL v41 = v31 != 0;
      if (v31) {
        int v42 = v40;
      }
      else {
        int v42 = 5;
      }
      unint64_t v43 = (unint64_t)__endptr ^ 0x455059544C505554 | v85;
      if (v43) {
        int v15 = v42;
      }
      else {
        int v15 = 7;
      }
      if (v43 && v41 && v39 && v36 && v33)
      {
LABEL_185:
        int v65 = __cxa_allocate_exception(0x58uLL);
        sub_10022F344(&__endptr, "Invalid header");
        sub_10022F344(v83, "readHeader");
        sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
        sub_1002D1C2C((uint64_t)v65, -2, (uint64_t *)&__endptr, v83, v82, 395);
        void *v65 = &off_1004977D8;
      }
    }
    long long v99 = 0u;
    memset(v100, 0, sizeof(v100));
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    *(_OWORD *)__str = 0u;
    if (v19 != 10 && v19 != 13)
    {
      do
      {
        unsigned int v45 = sub_1002DCE08(v13);
        unsigned int v46 = v45;
        if (v45 <= 0x7F) {
          __uint32_t v44 = _DefaultRuneLocale.__runetype[v45] & 0x4000;
        }
        else {
          __uint32_t v44 = __maskrune(v45, 0x4000uLL);
        }
      }
      while (v44);
      uint64_t i = 0;
      while (v46 != 10 && v46 != 13)
      {
        __str[i] = v46;
        unsigned int v48 = sub_1002DCE08(v13);
        unsigned int v46 = v48;
        if (++i == 255)
        {
          LODWORD(i) = 255;
          if (v48 != 10 && v48 != 13) {
            goto LABEL_185;
          }
          goto LABEL_111;
        }
      }
      if ((i & 0x80000000) != 0) {
        goto LABEL_117;
      }
LABEL_111:
      for (uint64_t i = i; i != -1; --i)
      {
        __darwin_ct_rune_t v49 = __str[i];
        if (v49 < 0) {
          __uint32_t v50 = __maskrune(v49, 0x4000uLL);
        }
        else {
          __uint32_t v50 = _DefaultRuneLocale.__runetype[v49] & 0x4000;
        }
        if (!v50) {
          break;
        }
        __str[i] = 0;
      }
    }
LABEL_117:
    switch(v15)
    {
      case 0:
      case 1:
        continue;
      case 2:
        if (v80 & HIDWORD(v79) & HIDWORD(v80) & v79)
        {
          int v63 = *(_DWORD *)(v81 + 228);
          if (*(_DWORD *)(v81 + 240))
          {
LABEL_176:
            *(_DWORD *)(v81 + 16) = (*(_DWORD *)(v81 + 232) & 7 | (8 * v63)) - 8;
            *(_DWORD *)(v81 + 236) = sub_1002DC97C(v13);
            return (FILE *)1;
          }
          if (v63 == 3)
          {
            if (*(int *)(v81 + 224) > 255) {
              goto LABEL_176;
            }
            int v64 = 4;
          }
          else
          {
            if (v63 != 1) {
              goto LABEL_176;
            }
            int v64 = *(_DWORD *)(v81 + 224);
            if (v64 != 1)
            {
              if (v64 >= 256) {
                goto LABEL_176;
              }
              int v64 = 2;
            }
          }
          *(_DWORD *)(v81 + 240) = v64;
          goto LABEL_176;
        }
        *(_DWORD *)(v81 + 236) = -1;
        *(void *)(v81 + 8) = -1;
        sub_1002DCC18((uint64_t)v13);
        return 0;
      case 3:
        if (v80)
        {
          long long v71 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v71, -2, (uint64_t *)&__endptr, v83, v82, 405);
          void *v71 = &off_1004977D8;
        }
        __endptr = 0;
        uint64_t v51 = strtol(__str, &__endptr, 0);
        if (*__error() == 34 && (unint64_t)(v51 - 0x7FFFFFFFFFFFFFFFLL) < 2
          || ((int v52 = *__error(), !v51) ? (v53 = v52 == 0) : (v53 = 1), !v53 || __endptr == __str))
        {
          int v66 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v66, -2, (uint64_t *)&__endptr, v83, v82, 407);
          void *v66 = &off_1004977D8;
        }
        *(_DWORD *)(v81 + 12) = v51;
        LODWORD(v80) = 1;
        int v15 = 3;
        continue;
      case 4:
        if ((v79 & 0x100000000) != 0)
        {
          long long v74 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v74, -2, (uint64_t *)&__endptr, v83, v82, 412);
          *long long v74 = &off_1004977D8;
        }
        __endptr = 0;
        uint64_t v60 = strtol(__str, &__endptr, 0);
        if (*__error() == 34 && (unint64_t)(v60 - 0x7FFFFFFFFFFFFFFFLL) < 2
          || ((int v61 = *__error(), !v60) ? (v62 = v61 == 0) : (v62 = 1), !v62 || __endptr == __str))
        {
          long long v69 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v69, -2, (uint64_t *)&__endptr, v83, v82, 414);
          void *v69 = &off_1004977D8;
        }
        *(_DWORD *)(v81 + 8) = v60;
        HIDWORD(v79) = 1;
        int v15 = 4;
        continue;
      case 5:
        if ((v80 & 0x100000000) != 0)
        {
          long long v72 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v72, -2, (uint64_t *)&__endptr, v83, v82, 419);
          void *v72 = &off_1004977D8;
        }
        __endptr = 0;
        uint64_t v54 = strtol(__str, &__endptr, 0);
        if (*__error() == 34 && (unint64_t)(v54 - 0x7FFFFFFFFFFFFFFFLL) < 2
          || ((int v55 = *__error(), !v54) ? (v56 = v55 == 0) : (v56 = 1), !v56 || __endptr == __str))
        {
          int v68 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v68, -2, (uint64_t *)&__endptr, v83, v82, 421);
          void *v68 = &off_1004977D8;
        }
        *(_DWORD *)(v81 + 228) = v54;
        HIDWORD(v80) = 1;
        int v15 = 5;
        continue;
      case 6:
        if (v79)
        {
          long long v73 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v73, -2, (uint64_t *)&__endptr, v83, v82, 426);
          void *v73 = &off_1004977D8;
        }
        __endptr = 0;
        uint64_t v57 = strtol(__str, &__endptr, 0);
        if (*__error() == 34 && (unint64_t)(v57 - 0x7FFFFFFFFFFFFFFFLL) < 2
          || ((int v58 = *__error(), !v57) ? (v59 = v58 == 0) : (v59 = 1), !v59 || __endptr == __str))
        {
          char v67 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v67, -2, (uint64_t *)&__endptr, v83, v82, 428);
          *char v67 = &off_1004977D8;
        }
        *(_DWORD *)(v81 + 224) = v57;
        if ((int)v57 >= 0x10000)
        {
          unint64_t v70 = __cxa_allocate_exception(0x58uLL);
          sub_10022F344(&__endptr, "Invalid header");
          sub_10022F344(v83, "readHeader");
          sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
          sub_1002D1C2C((uint64_t)v70, -2, (uint64_t *)&__endptr, v83, v82, 430);
          void *v70 = &off_1004977D8;
        }
        if ((int)v57 < 256)
        {
          *(_DWORD *)(v81 + 232) = 0;
          LODWORD(v79) = 1;
          int v15 = 6;
          if (v57 == 1) {
            *(unsigned char *)(v81 + 244) = 1;
          }
        }
        else
        {
          *(_DWORD *)(v81 + 232) = 2;
          LODWORD(v79) = 1;
          int v15 = 6;
        }
        continue;
      case 7:
        if (!strncmp(byte_100497084, __str, 0x100uLL))
        {
          *(_DWORD *)(v81 + 240) = 0;
          if (strncmp("BLACKANDWHITE", __str, 0x100uLL))
          {
LABEL_130:
            if (strncmp("GRAYSCALE", __str, 0x100uLL)) {
              goto LABEL_131;
            }
            goto LABEL_171;
          }
        }
        else if (strncmp("BLACKANDWHITE", __str, 0x100uLL))
        {
          goto LABEL_130;
        }
        *(_DWORD *)(v81 + 240) = 1;
        if (strncmp("GRAYSCALE", __str, 0x100uLL))
        {
LABEL_131:
          if (strncmp("GRAYSCALE_ALPHA", __str, 0x100uLL)) {
            goto LABEL_132;
          }
          goto LABEL_172;
        }
LABEL_171:
        *(_DWORD *)(v81 + 240) = 2;
        if (strncmp("GRAYSCALE_ALPHA", __str, 0x100uLL))
        {
LABEL_132:
          if (strncmp("RGB", __str, 0x100uLL)) {
            goto LABEL_133;
          }
          goto LABEL_173;
        }
LABEL_172:
        *(_DWORD *)(v81 + 240) = 3;
        if (strncmp("RGB", __str, 0x100uLL)) {
          goto LABEL_133;
        }
LABEL_173:
        *(_DWORD *)(v81 + 240) = 4;
LABEL_133:
        int v15 = 7;
        if (!strncmp("RGB_ALPHA", __str, 0x100uLL)) {
          *(_DWORD *)(v81 + 240) = 5;
        }
        continue;
      default:
        long long v75 = __cxa_allocate_exception(0x58uLL);
        sub_10022F344(&__endptr, "Invalid header");
        sub_10022F344(v83, "readHeader");
        sub_10022F344(v82, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pam.cpp");
        sub_1002D1C2C((uint64_t)v75, -2, (uint64_t *)&__endptr, v83, v82, 449);
        void *v75 = &off_1004977D8;
    }
  }
}

uint64_t sub_1002E4A38(uint64_t a1, int *a2)
{
  uint64_t v4 = (int *)*((void *)a2 + 2);
  unsigned int v5 = *a2;
  size_t v6 = *((void *)a2 + 10);
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = (*(_DWORD *)(a1 + 228) * *(_DWORD *)(a1 + 8));
  uint64_t v134 = &v136;
  uint64_t v135 = 2 * (int)v8;
  if ((2 * v8) >= 0x409) {
    operator new[]();
  }
  if ((*(_DWORD *)(a1 + 236) & 0x80000000) != 0 || (sub_1002DC4D0(a1 + 160) & 1) == 0)
  {
    uint64_t v94 = 0;
    goto LABEL_155;
  }
  int v9 = *(_DWORD *)(a1 + 240);
  if (v9)
  {
    uint64_t v127 = 0;
    BOOL v128 = 0;
    uint64_t v10 = (char *)&unk_100497080 + 288 * v9;
  }
  else
  {
    uint64_t v10 = 0;
    BOOL v128 = *(_DWORD *)(a1 + 228) > 2;
    uint64_t v127 = 2 * v128;
  }
  sub_1002DC950(a1 + 160, *(_DWORD *)(a1 + 236));
  int v13 = (v5 >> 3) & 0x1FF;
  unsigned int v132 = v13 + 1;
  int v14 = ((0x88442211 >> (4 * (v7 & 7))) & 0xF) * v8;
  int v15 = *(_DWORD *)(a1 + 232);
  if (v15 != (*a2 & 7) || v132 != *(_DWORD *)(a1 + 228) || *(unsigned char *)(a1 + 244))
  {
    if (*(unsigned char *)(a1 + 244))
    {
      if (v13 == 2)
      {
        sub_1002F0ED8(v140, 1, 0, v11, v12);
        if (*(int *)(a1 + 12) >= 1)
        {
          int v89 = 0;
          do
          {
            sub_1002DCEE4(a1 + 160, &v136, v14);
            sub_1002F172C(v4, &v136, *(_DWORD *)(a1 + 8), (uint64_t)v140);
            ++v89;
            uint64_t v4 = (int *)((char *)v4 + v6);
          }
          while (v89 < *(_DWORD *)(a1 + 12));
        }
      }
      else if (!v13)
      {
        v133[0] = -256;
        if (*(int *)(a1 + 12) >= 1)
        {
          int v90 = 0;
          do
          {
            sub_1002DCEE4(a1 + 160, &v136, v14);
            sub_1002F1830(v4, &v136, *(_DWORD *)(a1 + 8), (unsigned __int8 *)v133);
            ++v90;
            uint64_t v4 = (int *)((char *)v4 + v6);
          }
          while (v90 < *(_DWORD *)(a1 + 12));
        }
      }
      goto LABEL_133;
    }
    if (*(int *)(a1 + 12) >= 1)
    {
      int v125 = (v5 >> 3) & 0x1FF;
      int v130 = v14;
      int v16 = 0;
      BOOL v19 = &v136 < &v137[2 * v8 - 1] && &v136 < &v137[v8 - 1] || v8 < 8;
      BOOL v123 = v19;
      uint64_t v124 = v8 & 0xFFFFFFF8;
      uint64_t v126 = v8 & 0xFFFFFFE0;
      int v20 = v4 + 1;
      unsigned int v21 = (char *)v4 + 2;
      while (1)
      {
        sub_1002DCEE4(a1 + 160, &v136, v130);
        if (*(_DWORD *)(a1 + 232) != 2 || (int)v8 < 1)
        {
          int v23 = *a2;
          uint64_t v24 = *a2 & 7;
          int v25 = *(_DWORD *)(a1 + 228);
          if (v132 == v25) {
            goto LABEL_26;
          }
          goto LABEL_50;
        }
        if (v8 < 8)
        {
          uint64_t v26 = 0;
LABEL_46:
          BOOL v36 = &v137[2 * v26];
          uint64_t v37 = v8 - v26;
          do
          {
            char v38 = *(v36 - 1);
            *(v36 - 1) = *v36;
            *BOOL v36 = v38;
            v36 += 2;
            --v37;
          }
          while (v37);
          goto LABEL_48;
        }
        if (v8 >= 0x20)
        {
          uint64_t v28 = v8 & 0xFFFFFFE0;
          BOOL v29 = v139;
          do
          {
            int v30 = v29 - 32;
            int8x16x2_t v143 = vld2q_s8(v30);
            int8x16x2_t v145 = vld2q_s8(v29);
            int8x16_t v31 = v143.val[0];
            int8x16_t v32 = v145.val[0];
            vst2q_s8(v30, *(int8x16x2_t *)((char *)&v143 + 16));
            vst2q_s8(v29, *(int8x16x2_t *)((char *)&v145 + 16));
            v29 += 64;
            v28 -= 32;
          }
          while (v28);
          if (v126 == v8) {
            goto LABEL_48;
          }
          uint64_t v26 = v8 & 0xFFFFFFE0;
          uint64_t v27 = v26;
          if ((v8 & 0x18) == 0) {
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v27 = 0;
        }
        BOOL v33 = &v137[2 * v27 - 1];
        uint64_t v34 = v27 - (v8 & 0xFFFFFFF8);
        do
        {
          int8x8x2_t v141 = vld2_s8(v33);
          int8x8_t v35 = v141.val[0];
          vst2_s8(v33, *(int8x8x2_t *)((char *)&v141 + 8));
          v33 += 16;
          v34 += 8;
        }
        while (v34);
        uint64_t v26 = v8 & 0xFFFFFFF8;
        if (v124 != v8) {
          goto LABEL_46;
        }
LABEL_48:
        int v23 = *a2;
        uint64_t v24 = *a2 & 7;
        if ((*a2 & 7) != 0)
        {
          int v25 = *(_DWORD *)(a1 + 228);
          if (v132 == v25) {
            goto LABEL_26;
          }
          goto LABEL_50;
        }
        if (v123)
        {
          uint64_t v45 = 0;
          do
          {
LABEL_92:
            v137[v45 - 1] = v137[2 * v45];
            ++v45;
          }
          while (v8 != v45);
          goto LABEL_93;
        }
        if (v8 >= 0x20)
        {
          uint64_t v63 = v8 & 0xFFFFFFE0;
          int v64 = (int8x16_t *)&v138;
          int v65 = (int8x16_t *)v139;
          do
          {
            int8x16_t v67 = v65[-2];
            int8x16_t v66 = v65[-1];
            int8x16_t v69 = *v65;
            int8x16_t v68 = v65[1];
            v65 += 4;
            v64[-1] = vuzp2q_s8(v67, v66);
            int8x16_t *v64 = vuzp2q_s8(v69, v68);
            v64 += 2;
            v63 -= 32;
          }
          while (v63);
          uint64_t v45 = v8 & 0xFFFFFFE0;
          if (v126 == v8) {
            goto LABEL_93;
          }
          uint64_t v51 = v8 & 0xFFFFFFE0;
          if ((v8 & 0x18) == 0) {
            goto LABEL_92;
          }
        }
        else
        {
          uint64_t v51 = 0;
        }
        unint64_t v70 = (int16x8_t *)&v137[2 * v51 - 1];
        long long v71 = (int8x8_t *)&v137[v51 - 1];
        uint64_t v72 = v51 - (v8 & 0xFFFFFFF8);
        do
        {
          int16x8_t v73 = *v70++;
          *v71++ = vshrn_n_s16(v73, 8uLL);
          v72 += 8;
        }
        while (v72);
        uint64_t v45 = v8 & 0xFFFFFFF8;
        if (v124 != v8) {
          goto LABEL_92;
        }
LABEL_93:
        uint64_t v24 = 0;
        int v25 = *(_DWORD *)(a1 + 228);
        if (v132 == v25)
        {
LABEL_26:
          memcpy(v4, &v136, v6);
          goto LABEL_27;
        }
LABEL_50:
        if (!v10)
        {
          uint64_t v46 = v25;
          uint64_t v47 = *(int *)(a1 + 8);
          if (v24 == 2)
          {
            BOOL v59 = &v137[2 * v47 - 1];
            if (v125)
            {
              if (v125 == 2 && (int)v47 >= 1)
              {
                uint64_t v60 = 2 * v46;
                int v61 = &v136;
                BOOL v62 = v4;
                do
                {
                  *(_WORD *)BOOL v62 = *(_WORD *)v61;
                  *((_WORD *)v62 + 1) = *(_WORD *)&v61[2 * v128];
                  *((_WORD *)v62 + 2) = *(_WORD *)&v61[2 * v127];
                  v61 += v60;
                  BOOL v62 = (int *)((char *)v62 + 6);
                }
                while (v61 < v59);
              }
            }
            else if ((int)v47 >= 1)
            {
              uint64_t v85 = 2 * v46;
              long long v86 = v20;
              long long v87 = &v136;
              do
              {
                __int16 v88 = *(_WORD *)v87;
                *(_WORD *)long long v86 = *(_WORD *)v87;
                *((_WORD *)v86 - 1) = v88;
                *((_WORD *)v86 - 2) = v88;
                v87 += v85;
                long long v86 = (int *)((char *)v86 + 6);
              }
              while (v87 < v59);
            }
          }
          else if (!v24)
          {
            unsigned int v48 = &v137[v47 - 1];
            if (v125)
            {
              if (v125 == 2)
              {
                __darwin_ct_rune_t v49 = &v136;
                __uint32_t v50 = v4;
                if ((int)v47 >= 1)
                {
                  do
                  {
                    unsigned char *v50 = *v49;
                    v50[1] = v49[v128];
                    v50[2] = v49[v127];
                    v50 += 3;
                    v49 += v46;
                  }
                  while (v49 < v48);
                }
              }
            }
            else if ((int)v47 >= 1)
            {
              long long v82 = v21;
              long long v83 = &v136;
              do
              {
                char v84 = *v83;
                *long long v82 = *v83;
                *(v82 - 1) = v84;
                *(v82 - 2) = v84;
                v83 += v46;
                v82 += 3;
              }
              while (v83 < v48);
            }
          }
          goto LABEL_27;
        }
        BOOL v39 = (uint64_t (*)(char *, int *, void, void, uint64_t))*((void *)v10 + 33);
        if (!v39) {
          goto LABEL_54;
        }
        if ((v39(&v136, v4, *(unsigned int *)(a1 + 8), v132, v24) & 1) == 0)
        {
          int v25 = *(_DWORD *)(a1 + 228);
          int v23 = *a2;
LABEL_54:
          uint64_t v40 = *(int *)(a1 + 8);
          int v41 = v23 & 7;
          if (v41 == 2)
          {
            int v52 = &v137[2 * v40 - 1];
            if (v125)
            {
              if (v125 == 2 && (int)v40 >= 1)
              {
                uint64_t v53 = *((unsigned int *)v10 + 70);
                uint64_t v54 = *((unsigned int *)v10 + 69);
                uint64_t v55 = *((unsigned int *)v10 + 68);
                uint64_t v56 = 2 * v25;
                uint64_t v57 = &v136;
                int v58 = v4;
                do
                {
                  *(_WORD *)int v58 = *(_WORD *)&v57[2 * v53];
                  *((_WORD *)v58 + 1) = *(_WORD *)&v57[2 * v54];
                  *((_WORD *)v58 + 2) = *(_WORD *)&v57[2 * v55];
                  v57 += v56;
                  int v58 = (int *)((char *)v58 + 6);
                }
                while (v57 < v52);
              }
            }
            else if ((int)v40 >= 1)
            {
              uint64_t v77 = *((unsigned int *)v10 + 71);
              uint64_t v78 = 2 * v25;
              uint64_t v79 = v20;
              uint64_t v80 = &v136;
              do
              {
                __int16 v81 = *(_WORD *)&v80[2 * v77];
                *(_WORD *)uint64_t v79 = v81;
                *((_WORD *)v79 - 1) = v81;
                *((_WORD *)v79 - 2) = v81;
                v80 += v78;
                uint64_t v79 = (int *)((char *)v79 + 6);
              }
              while (v80 < v52);
            }
          }
          else if (!v41)
          {
            int v42 = &v137[v40 - 1];
            if (v125)
            {
              if (v125 == 2 && (int)v40 >= 1)
              {
                unint64_t v43 = &v136;
                __uint32_t v44 = v4;
                do
                {
                  *(unsigned char *)__uint32_t v44 = v43[*((unsigned int *)v10 + 70)];
                  *((unsigned char *)v44 + 1) = v43[*((unsigned int *)v10 + 69)];
                  *((unsigned char *)v44 + 2) = v43[*((unsigned int *)v10 + 68)];
                  __uint32_t v44 = (int *)((char *)v44 + 3);
                  v43 += v25;
                }
                while (v43 < v42);
              }
            }
            else if ((int)v40 >= 1)
            {
              long long v74 = v21;
              long long v75 = &v136;
              do
              {
                char v76 = v75[*((unsigned int *)v10 + 71)];
                *long long v74 = v76;
                *(v74 - 1) = v76;
                *(v74 - 2) = v76;
                v75 += v25;
                v74 += 3;
              }
              while (v75 < v42);
            }
          }
        }
LABEL_27:
        ++v16;
        uint64_t v4 = (int *)((char *)v4 + v6);
        int v20 = (int *)((char *)v20 + v6);
        v21 += v6;
        if (v16 >= *(_DWORD *)(a1 + 12)) {
          goto LABEL_133;
        }
      }
    }
    goto LABEL_133;
  }
  int v91 = *(_DWORD *)(a1 + 12);
  if (v15 != 2)
  {
    sub_1002DCEE4(a1 + 160, (char *)v4, v91 * v14);
    goto LABEL_133;
  }
  if (v91 < 1)
  {
LABEL_133:
    uint64_t v94 = 1;
    goto LABEL_155;
  }
  if ((int)v8 <= 0)
  {
    int v102 = 0;
    uint64_t v94 = 1;
    do
    {
      sub_1002DCEE4(a1 + 160, &v136, v14);
      ++v102;
    }
    while (v102 < *(_DWORD *)(a1 + 12));
    goto LABEL_155;
  }
  int v131 = v14;
  if (v8 >= 8)
  {
    uint64_t v103 = 0;
    *(void *)unsigned int v129 = 2 * v8;
    unint64_t v104 = v4;
    uint64_t v94 = 1;
    while (1)
    {
      sub_1002DCEE4(a1 + 160, &v136, v131);
      if (v104 >= (int *)&v137[*(void *)v129 - 1] || &v136 >= (char *)v4 + *(void *)v129 + v6 * v103)
      {
        if (v8 < 0x20)
        {
          uint64_t v106 = 0;
LABEL_148:
          uint64_t v112 = 2 * v106;
          uint64_t v113 = v106 - (v8 & 0xFFFFFFF8);
          do
          {
            uint64_t v114 = &v137[v112 - 1];
            int8x8x2_t v142 = vld2_s8(v114);
            int8x8_t v115 = v142.val[0];
            uint64_t v116 = (char *)v104 + v112;
            vst2_s8(v116, *(int8x8x2_t *)((char *)&v142 + 8));
            v112 += 16;
            v113 += 8;
          }
          while (v113);
          uint64_t v105 = v8 & 0xFFFFFFF8;
          if (v105 == v8) {
            goto LABEL_138;
          }
          goto LABEL_151;
        }
        unint64_t v107 = 0;
        do
        {
          uint64_t v108 = &v137[v107 - 1];
          int8x16x2_t v144 = vld2q_s8(v108);
          v108 += 32;
          int8x16_t v109 = v144.val[0];
          int8x16x2_t v146 = vld2q_s8(v108);
          int8x16_t v110 = v146.val[0];
          uint64_t v111 = (char *)&v104[v107 / 4];
          vst2q_s8(v111, *(int8x16x2_t *)((char *)&v144 + 16));
          v111 += 32;
          vst2q_s8(v111, *(int8x16x2_t *)((char *)&v146 + 16));
          v107 += 64;
        }
        while (((2 * v8) & 0x1FFFFFFC0) != v107);
        if ((v8 & 0xFFFFFFE0) == v8) {
          goto LABEL_138;
        }
        uint64_t v105 = v8 & 0xFFFFFFE0;
        uint64_t v106 = v105;
        if ((v8 & 0x18) != 0) {
          goto LABEL_148;
        }
      }
      else
      {
        uint64_t v105 = 0;
      }
LABEL_151:
      uint64_t v117 = v8 - v105;
      uint64_t v118 = 2 * v105;
      do
      {
        char v119 = v137[v118 - 1];
        int v120 = (char *)v104 + v118;
        *int v120 = v137[v118];
        v120[1] = v119;
        v118 += 2;
        --v117;
      }
      while (v117);
LABEL_138:
      ++v103;
      unint64_t v104 = (int *)((char *)v104 + v6);
      if ((int)v103 >= *(_DWORD *)(a1 + 12)) {
        goto LABEL_155;
      }
    }
  }
  int v92 = 0;
  long long v93 = (char *)v4 + 6;
  uint64_t v94 = 1;
  do
  {
    sub_1002DCEE4(a1 + 160, &v136, v14);
    char v95 = v136;
    *(v93 - 6) = v137[0];
    *(v93 - 5) = v95;
    if (v8 != 1)
    {
      char v96 = v137[1];
      *(v93 - 4) = v137[2];
      *(v93 - 3) = v96;
      if (v8 != 2)
      {
        char v97 = v137[3];
        *(v93 - 2) = v137[4];
        *(v93 - 1) = v97;
        if (v8 != 3)
        {
          char v98 = v137[5];
          *long long v93 = v137[6];
          v93[1] = v98;
          if (v8 != 4)
          {
            char v99 = v137[7];
            v93[2] = v137[8];
            v93[3] = v99;
            if (v8 != 5)
            {
              char v100 = v137[9];
              v93[4] = v137[10];
              v93[5] = v100;
              if (v8 != 6)
              {
                char v101 = v137[11];
                v93[6] = v137[12];
                v93[7] = v101;
              }
            }
          }
        }
      }
    }
    ++v92;
    v93 += v6;
  }
  while (v92 < *(_DWORD *)(a1 + 12));
LABEL_155:
  if (v134 != &v136 && v134 != 0) {
    operator delete[]();
  }
  return v94;
}

void sub_1002E5534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25 != a23 && a25) {
    operator delete[]();
  }
  if (STACK[0x498] != a18)
  {
    if (STACK[0x498]) {
      operator delete[]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002E5590(uint64_t a1)
{
  sub_1002DE314(a1);
  *uint64_t v2 = off_100497750;
  uint64_t v3 = v2 + 1;
  sub_1002D1A1C(v2 + 1);
  qmemcpy((void *)sub_1002D19D8(v3, 33), "Portable arbitrary format (*.pam)", 33);
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_1002E5614(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_100496B28;
  sub_1002D1A1C(v1 + 7);
  sub_1002D1A1C(v1 + 3);
  sub_1002D1A1C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002E5660(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);
  return a1;
}

void sub_1002E56C0(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);

  operator delete();
}

void sub_1002E5740()
{
}

void sub_1002E5804()
{
}

BOOL sub_1002E5828(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFD) == 0;
}

uint64_t sub_1002E5834(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1002DD250((uint64_t)v69);
  v69[0] = off_1004969C0;
  int v6 = *(_DWORD *)(a2 + 4);
  BOOL v7 = __OFSUB__(v6, 1);
  int v8 = v6 - 1;
  if (v8 < 0 == v7)
  {
    uint64_t v9 = *(void *)(*(void *)(a2 + 72) + 8 * v8);
    uint64_t v10 = *(unsigned int *)(a2 + 8);
    int v11 = *(_DWORD *)(a2 + 12);
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = v13 - *a3;
    if (v13 != *a3) {
      goto LABEL_3;
    }
LABEL_9:
    int v16 = 0;
    goto LABEL_10;
  }
  LODWORD(v9) = 0;
  uint64_t v10 = *(unsigned int *)(a2 + 8);
  int v11 = *(_DWORD *)(a2 + 12);
  uint64_t v12 = *a3;
  uint64_t v19 = a3[1];
  uint64_t v14 = v19 - *a3;
  if (v19 == *a3) {
    goto LABEL_9;
  }
LABEL_3:
  unint64_t v15 = 0;
  int v16 = 0;
  unint64_t v17 = v14 >> 2;
  do
  {
    if (*(_DWORD *)(v12 + 4 * v15) == 128)
    {
      unsigned int v18 = *(_DWORD *)(v12 + 4 * v15 + 4);
      if (v18 - 1 <= 4) {
        int v16 = (char *)&unk_100497080 + 288 * v18;
      }
    }
    v15 += 2;
  }
  while (v15 < v17);
LABEL_10:
  int v20 = v11 * v9;
  unsigned int v21 = *(char **)(a2 + 16);
  uint64_t v22 = *(void *)(a1 + 40);
  if (!v22)
  {
    if (sub_1002DD670((uint64_t)v69, (const char **)(a1 + 24))) {
      goto LABEL_36;
    }
LABEL_18:
    uint64_t v32 = 0;
    goto LABEL_70;
  }
  if ((sub_1002DD724((uint64_t)v69, v22) & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(a1 + 40);
  unint64_t v24 = (v20 * (int)v10 + 511) & 0xFFFFFFFFFFFFFF00;
  int v25 = *(unsigned char **)v23;
  if (*(void *)(v23 + 16) - *(void *)v23 < v24)
  {
    if (v20 * (int)v10 + 511 < 0) {
      sub_10000B98C();
    }
    uint64_t v26 = *(unsigned char **)(v23 + 8);
    uint64_t v27 = operator new((v20 * (int)v10 + 511) & 0xFFFFFFFFFFFFFF00);
    unint64_t v28 = v26 - v25;
    BOOL v29 = &v27[v26 - v25];
    int v30 = v29;
    if (v26 == v25) {
      goto LABEL_34;
    }
    if (v28 < 8)
    {
      int8x16_t v31 = &v27[v26 - v25];
      goto LABEL_31;
    }
    int8x16_t v31 = &v27[v26 - v25];
    if ((unint64_t)(v25 - v27) >= 0x20)
    {
      if (v28 < 0x20)
      {
        unint64_t v33 = 0;
        goto LABEL_26;
      }
      unint64_t v33 = v28 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v34 = (long long *)(v26 - 16);
      int8x8_t v35 = &v27[v26 - 16 - v25];
      unint64_t v36 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v37 = *v34;
        *(v35 - 1) = *(v34 - 1);
        *int8x8_t v35 = v37;
        v35 -= 2;
        v34 -= 2;
        v36 -= 32;
      }
      while (v36);
      if (v28 == v33) {
        goto LABEL_33;
      }
      if ((v28 & 0x18) != 0)
      {
LABEL_26:
        int8x16_t v31 = &v29[-(v28 & 0xFFFFFFFFFFFFFFF8)];
        char v38 = &v26[-v33 - 8];
        int64_t v39 = v38 - v25;
        unint64_t v40 = v33 - (v28 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v41 = *(void *)v38;
          v38 -= 8;
          *(void *)&v27[v39] = v41;
          v39 -= 8;
          v40 += 8;
        }
        while (v40);
        v26 -= v28 & 0xFFFFFFFFFFFFFFF8;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      int8x16_t v31 = &v29[-v33];
      v26 -= v33;
    }
LABEL_31:
    int v42 = v31 - 1;
    do
    {
      char v43 = *--v26;
      *v42-- = v43;
    }
    while (v26 != v25);
LABEL_33:
    int v30 = v27;
LABEL_34:
    *(void *)uint64_t v23 = v30;
    *(void *)(v23 + 8) = v29;
    *(void *)(v23 + 16) = &v27[v24];
    if (v25) {
      operator delete(v25);
    }
  }
LABEL_36:
  int v44 = *(_DWORD *)(a2 + 4);
  BOOL v7 = __OFSUB__(v44, 1);
  int v45 = v44 - 1;
  if (v45 < 0 != v7) {
    LODWORD(v46) = 0;
  }
  else {
    uint64_t v46 = *(void *)(*(void *)(a2 + 72) + 8 * v45);
  }
  int v47 = v46 * v11;
  if (v47 <= 256) {
    uint64_t v48 = 256;
  }
  else {
    uint64_t v48 = v47;
  }
  unint64_t v70 = v72;
  uint64_t v71 = v48;
  if (v48 >= 0x409) {
    operator new[]();
  }
  v72[0] = 669520;
  uint64_t v49 = sprintf((char *)v72 + 3, "WIDTH %d\n", v11) + 3;
  uint64_t v50 = v49 + sprintf((char *)v72 + (int)v49, "HEIGHT %d\n", v10);
  LODWORD(v50) = sprintf((char *)v72 + v50, "DEPTH %d\n", ((*(_DWORD *)a2 >> 3) & 0x1FF) + 1) + v50;
  int v51 = sprintf((char *)v72 + (int)v50, "MAXVAL %d\n", ~(-1 << (8 * ((0x88442211 >> (4 * (*(unsigned char *)a2 & 7))) & 0xF))))
      + v50;
  if (v16) {
    v51 += sprintf((char *)v72 + v51, "TUPLTYPE %s\n", v16 + 4);
  }
  *(void *)((char *)v72 + v51) = 0xA524448444E45;
  int v52 = strlen((const char *)v72);
  sub_1002DD9A4(v69, (char *)v72, v52);
  if ((*(_DWORD *)a2 & 7) != 0)
  {
    if ((*(_DWORD *)a2 & 7) == 2 && (int)v10 >= 1)
    {
      if (v20 > 0)
      {
        uint64_t v53 = 0;
        unint64_t v54 = ((unint64_t)(v20 - 1) >> 1) + 1;
        while (1)
        {
          memcpy(v72, (const void *)(*(void *)(a2 + 16) + **(void **)(a2 + 72) * v53), v20);
          if (v20 >= 0xF)
          {
            if (v20 < 0x3F)
            {
              uint64_t v56 = 0;
LABEL_59:
              BOOL v62 = (char *)v72 + 2 * v56;
              uint64_t v63 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                int8x8x2_t v74 = vld2_s8(v62);
                int8x8_t v64 = v74.val[0];
                vst2_s8(v62, *(int8x8x2_t *)((char *)&v74 + 8));
                v62 += 16;
                v63 += 8;
              }
              while (v63);
              int64_t v55 = 2 * (v54 & 0xFFFFFFFFFFFFFFF8);
              if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_63;
              }
              goto LABEL_62;
            }
            unint64_t v57 = v54 & 0xFFFFFFFFFFFFFFE0;
            int v58 = (char *)&v73;
            do
            {
              BOOL v59 = v58 - 32;
              int8x16x2_t v75 = vld2q_s8(v59);
              int8x16x2_t v76 = vld2q_s8(v58);
              int8x16_t v60 = v75.val[0];
              int8x16_t v61 = v76.val[0];
              vst2q_s8(v59, *(int8x16x2_t *)((char *)&v75 + 16));
              vst2q_s8(v58, *(int8x16x2_t *)((char *)&v76 + 16));
              v58 += 64;
              v57 -= 32;
            }
            while (v57);
            if (v54 == (v54 & 0xFFFFFFFFFFFFFFE0)) {
              goto LABEL_63;
            }
            uint64_t v56 = v54 & 0xFFFFFFFFFFFFFFE0;
            int64_t v55 = 2 * (v54 & 0xFFFFFFFFFFFFFFE0);
            if ((v54 & 0x18) != 0) {
              goto LABEL_59;
            }
          }
          else
          {
            int64_t v55 = 0;
          }
          do
          {
LABEL_62:
            int v65 = (char *)v72 + v55;
            char v66 = *((unsigned char *)v72 + v55);
            char *v65 = *((unsigned char *)v72 + v55 + 1);
            v65[1] = v66;
            v55 += 2;
          }
          while (v55 < v20);
LABEL_63:
          sub_1002DD9A4(v69, (char *)v72, v20);
          if (++v53 == v10) {
            goto LABEL_66;
          }
        }
      }
      for (uint64_t i = 0; i != v10; ++i)
      {
        memcpy(v72, (const void *)(*(void *)(a2 + 16) + **(void **)(a2 + 72) * i), v20);
        sub_1002DD9A4(v69, (char *)v72, v20);
      }
    }
  }
  else
  {
    sub_1002DD9A4(v69, v21, v20 * v10);
  }
LABEL_66:
  sub_1002DD7B0((uint64_t)v69);
  if (v70 != v72 && v70) {
    operator delete[]();
  }
  uint64_t v32 = 1;
LABEL_70:
  sub_1002DD85C((uint64_t)v69);
  return v32;
}

void sub_1002E5DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1002DD85C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002E5E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24 != v24 && a24 != 0) {
    operator delete[]();
  }
  sub_1002DD85C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1002E5E68(uint64_t a1)
{
  sub_1002D1EA8(a1);

  operator delete();
}

uint64_t sub_1002E5EA0(const char *a1, char *a2, unsigned int a3, int a4, int a5)
{
  if (a4 == 1)
  {
    if (a5 != 2)
    {
      if (!a5)
      {
        sub_1002EF498((uint64_t)a1, 0, (unint64_t)a2, 0, a3 | (unint64_t)&_mh_execute_header, 2);
        return 1;
      }
      return 0;
    }
    sub_1002EF6E8((uint64_t)a1, 0, (uint64_t)a2, 0, a3 | (unint64_t)&_mh_execute_header, 3, 2);
    return 1;
  }
  else
  {
    if (a4 != 3) {
      return 0;
    }
    if (a5 != 2)
    {
      if (!a5)
      {
        sub_1002EFB7C(a1, 0, a2, 0, a3 | (unint64_t)&_mh_execute_header);
        return 1;
      }
      return 0;
    }
    sub_1002EFCC4((const __int16 *)a1, 0, (__int16 *)a2, 0, a3 | (unint64_t)&_mh_execute_header);
    return 1;
  }
}

void sub_1002E5F84()
{
}

uint64_t sub_1002E5F98(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_1002E601C()
{
}

uint64_t sub_1002E6030(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1002E60B0(uint64_t a1)
{
  sub_1002DDFA8(a1);
  *uint64_t v2 = off_100497880;
  uint64_t v3 = v2 + 5;
  sub_1002D1A1C(v2 + 5);
  *(void *)sub_1002D19D8(v3, 8) = 0xA1A0A0D474E5089;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(unsigned char *)(a1 + 152) = 1;
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  return a1;
}

void sub_1002E613C(_Unwind_Exception *a1)
{
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E6150(void *a1)
{
  *a1 = off_100497880;
  uint64_t v2 = (FILE *)a1[23];
  if (v2)
  {
    fclose(v2);
    a1[23] = 0;
  }
  if (a1[20])
  {
    uint64_t v7 = a1[20];
    uint64_t v3 = (void *)a1[21];
    unsigned int v5 = (void *)a1[22];
    int v6 = v3;
    sub_1003A5AA8(&v7, &v6, &v5);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  return sub_1002DE670((uint64_t)a1);
}

void sub_1002E61E0(void *a1)
{
  *a1 = off_100497880;
  uint64_t v2 = (FILE *)a1[23];
  if (v2)
  {
    fclose(v2);
    a1[23] = 0;
  }
  if (a1[20])
  {
    uint64_t v6 = a1[20];
    uint64_t v3 = (void *)a1[21];
    uint64_t v4 = (void *)a1[22];
    unsigned int v5 = v3;
    sub_1003A5AA8(&v6, &v5, &v4);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  sub_1002DE670((uint64_t)a1);
  operator delete();
}

void sub_1002E6284()
{
}

void sub_1002E6314()
{
}

void sub_1002E6400()
{
}

void *sub_1002E6434(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v6 = sub_10039F860(a1);
  uint64_t v7 = v6;
  if (!v6)
  {
    v13[0] = 0;
    v13[1] = 0;
    int v8 = (_DWORD *)sub_1002D19D8(v13, 7);
    *int v8 = 1868784996;
    *(_DWORD *)((char *)v8 + 3) = 1919247471;
    sub_1002D2278(-215, v13, "readDataFromBuf", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_png.cpp", 131);
  }
  uint64_t v9 = *(void *)(v6 + 200);
  unint64_t v10 = v9 + a3;
  int v11 = *(_DWORD *)(v6 + 60);
  if (v11 < 1)
  {
    if (!v10) {
      goto LABEL_5;
    }
LABEL_7:
    sub_1003A34AC(a1, "PNG input buffer is incomplete");
  }
  if (v10 > *(void *)(*(void *)(v6 + 128) + 8 * (v11 - 1))
           * *(int *)(v6 + 64)
           * (uint64_t)*(int *)(v6 + 68))
    goto LABEL_7;
LABEL_5:
  BOOL result = memcpy(a2, (const void *)(*(void *)(v6 + 72) + v9), a3);
  *(void *)(v7 + 200) += a3;
  return result;
}

void sub_1002E653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002E6554(uint64_t a1)
{
  unsigned __int8 v49 = 0;
  uint64_t v2 = *(FILE **)(a1 + 184);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 184) = 0;
  }
  uint64_t v3 = (uint64_t *)(a1 + 160);
  if (*(void *)(a1 + 160))
  {
    uint64_t v52 = *(void *)(a1 + 160);
    uint64_t v4 = *(void **)(a1 + 168);
    uint64_t v50 = *(void **)(a1 + 176);
    int v51 = v4;
    sub_1003A5AA8(&v52, &v51, &v50);
    *uint64_t v3 = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  unsigned int v5 = sub_1003A4A24("1.6.34", 0, 0, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_10039F318((uint64_t)v5);
    uint64_t v8 = v7;
    sub_10039F318((uint64_t)v6);
    *(void *)(a1 + 160) = v6;
    *(void *)(a1 + 168) = v8;
    *(void *)(a1 + 176) = v9;
    *(void *)(a1 + 200) = 0;
    if (v8)
    {
      if (v9)
      {
        unint64_t v10 = (int *)sub_1003A4320(v6, (uint64_t)&_longjmp, 0xC0uLL);
        if (!setjmp(v10))
        {
          if (!*(void *)(a1 + 72)) {
            goto LABEL_57;
          }
          uint64_t v14 = *(unsigned int *)(a1 + 60);
          if ((int)v14 >= 3)
          {
            uint64_t v16 = *(void *)(a1 + 120);
            uint64_t v17 = v14 & 0xFFFFFFFE;
            unsigned int v18 = (int *)(v16 + 4);
            uint64_t v19 = 1;
            uint64_t v20 = 1;
            do
            {
              uint64_t v21 = v19 * *(v18 - 1);
              uint64_t v19 = v21;
              uint64_t v22 = v20 * *v18;
              uint64_t v20 = v22;
              v18 += 2;
              v17 -= 2;
            }
            while (v17);
            uint64_t v15 = v22 * v21;
            uint64_t v23 = v14 - (v14 & 0xFFFFFFFE);
            if (v23)
            {
              uint64_t v24 = (int *)(v16 + ((4 * v14) & 0x3FFFFFFF8));
              uint64_t v25 = v22 * v21;
              do
              {
                uint64_t v26 = *v24++;
                v25 *= v26;
                uint64_t v15 = v25;
                --v23;
              }
              while (v23);
            }
          }
          else
          {
            uint64_t v15 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
          }
          if (v14 && v15)
          {
            sub_1003A5C7C(v6, a1, (size_t (*)(size_t, void *, size_t))sub_1002E6434);
          }
          else
          {
LABEL_57:
            if (*(void *)(a1 + 24)) {
              uint64_t v27 = *(const char **)(a1 + 24);
            }
            else {
              uint64_t v27 = "";
            }
            unint64_t v28 = fopen(v27, "rb");
            *(void *)(a1 + 184) = v28;
            if (v28) {
              sub_10039F86C((uint64_t)v6, (uint64_t)v28);
            }
          }
          if (*(void *)(a1 + 72))
          {
            uint64_t v29 = *(unsigned int *)(a1 + 60);
            if ((int)v29 >= 3)
            {
              uint64_t v31 = *(void *)(a1 + 120);
              uint64_t v32 = v29 & 0xFFFFFFFE;
              unint64_t v33 = (int *)(v31 + 4);
              uint64_t v34 = 1;
              uint64_t v35 = 1;
              do
              {
                uint64_t v36 = v34 * *(v33 - 1);
                uint64_t v34 = v36;
                uint64_t v37 = v35 * *v33;
                uint64_t v35 = v37;
                v33 += 2;
                v32 -= 2;
              }
              while (v32);
              uint64_t v30 = v37 * v36;
              uint64_t v38 = v29 - (v29 & 0xFFFFFFFE);
              if (v38)
              {
                int64_t v39 = (int *)(v31 + ((4 * v29) & 0x3FFFFFFF8));
                uint64_t v40 = v37 * v36;
                do
                {
                  uint64_t v41 = *v39++;
                  v40 *= v41;
                  uint64_t v30 = v40;
                  --v38;
                }
                while (v38);
              }
            }
            else
            {
              uint64_t v30 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
            }
            if (v29 && v30) {
              goto LABEL_43;
            }
          }
          if (*(void *)(a1 + 184))
          {
LABEL_43:
            LODWORD(v50) = 0;
            int v48 = 0;
            uint64_t v47 = 0;
            int v46 = 0;
            int v51 = 0;
            uint64_t v52 = 0;
            sub_1003A4A88((uint64_t)v6, v8);
            sub_1003A4500((uint64_t)v6, v8, &v50, &v48, (_DWORD *)&v47 + 1, &v47, 0, 0, 0);
            int v42 = v48;
            *(_DWORD *)(a1 + 8) = v50;
            *(_DWORD *)(a1 + 12) = v42;
            int v43 = v47;
            int v44 = HIDWORD(v47);
            *(_DWORD *)(a1 + 192) = v47;
            *(_DWORD *)(a1 + 156) = v44;
            if (v44 < 9 || v44 == 16)
            {
              if ((v43 - 2) < 2)
              {
                sub_1003A45A0((uint64_t)v6, v8, &v52, &v46, &v51);
                if (v46 < 1)
                {
                  *(_DWORD *)(a1 + 16) = 16;
                  int v45 = 18;
                  if (HIDWORD(v47) != 16) {
                    goto LABEL_52;
                  }
                  goto LABEL_51;
                }
              }
              else if (v43 != 4 && v43 != 6)
              {
                *(_DWORD *)(a1 + 16) = 0;
                int v45 = 2;
                if (HIDWORD(v47) != 16) {
                  goto LABEL_52;
                }
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 16) = 24;
              int v45 = 26;
              if (HIDWORD(v47) != 16)
              {
LABEL_52:
                unsigned __int8 v49 = 1;
                goto LABEL_9;
              }
LABEL_51:
              *(_DWORD *)(a1 + 16) = v45;
              goto LABEL_52;
            }
          }
        }
      }
    }
  }
LABEL_9:
  if (!v49)
  {
    int v11 = *(FILE **)(a1 + 184);
    if (v11)
    {
      fclose(v11);
      *(void *)(a1 + 184) = 0;
    }
    if (*v3)
    {
      uint64_t v52 = *v3;
      uint64_t v12 = *(void **)(a1 + 168);
      uint64_t v50 = *(void **)(a1 + 176);
      int v51 = v12;
      sub_1003A5AA8(&v52, &v51, &v50);
      *uint64_t v3 = 0;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
    }
  }
  return v49;
}

BOOL sub_1002E6944(uint64_t a1, int *a2)
{
  char v28 = 0;
  if (*(_DWORD *)(a1 + 12) >= 0x89u) {
    operator new[]();
  }
  unsigned int v5 = (uint64_t *)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 160);
  if (v4)
  {
    uint64_t v6 = *(unsigned int **)(a1 + 168);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 176);
      if (v7)
      {
        if (*(_DWORD *)(a1 + 8))
        {
          if (*(_DWORD *)(a1 + 12))
          {
            int v8 = *a2;
            uint64_t v9 = (int *)sub_1003A4320(*(void **)(a1 + 160), (uint64_t)&_longjmp, 0xC0uLL);
            if (!setjmp(v9))
            {
              if ((*(unsigned char *)a2 & 7) != 0 || *(_DWORD *)(a1 + 156) != 16) {
                sub_1003B133C(v4);
              }
              else {
                sub_1003A5CDC(v4);
              }
              if ((*a2 & 0xFF8u) > 0x17) {
                sub_1003A5D3C(v4);
              }
              else {
                sub_1003A5D0C(v4);
              }
              int v10 = *(_DWORD *)(a1 + 192);
              if (v10 == 3)
              {
                sub_1003A5D3C(v4);
                int v10 = *(_DWORD *)(a1 + 192);
              }
              int v11 = v8 & 0xFF8;
              if ((v10 & 2) == 0)
              {
                if (*(int *)(a1 + 156) > 7) {
                  goto LABEL_24;
                }
                sub_1003A5D74(v4);
                int v10 = *(_DWORD *)(a1 + 192);
              }
              if ((v10 & 2) != 0 && v11)
              {
                sub_1003B1328(v4);
                goto LABEL_27;
              }
LABEL_24:
              if (v11) {
                sub_1003A5DA4(v4);
              }
              else {
                sub_1003A5F64(v4, 1, 0.299, 0.587);
              }
LABEL_27:
              sub_1003B1384(v4);
              sub_1003A4F60(v4, v6);
              uint64_t v12 = *(unsigned int *)(a1 + 12);
              if ((int)v12 >= 1)
              {
                uint64_t v13 = *((void *)a2 + 10);
                uint64_t v14 = *((void *)a2 + 2);
                if (v12 == 1)
                {
                  uint64_t v15 = 0;
                }
                else
                {
                  uint64_t v16 = *((void *)a2 + 2);
                  uint64_t v15 = v12 & 0xFFFFFFFE;
                  uint64_t v17 = &v27;
                  uint64_t v18 = v15;
                  do
                  {
                    *(v17 - 1) = v16;
                    *uint64_t v17 = v16 + v13;
                    v16 += 2 * v13;
                    v17 += 2;
                    v18 -= 2;
                  }
                  while (v18);
                  if ((v12 & 0xFFFFFFFE) == v12) {
                    goto LABEL_35;
                  }
                }
                uint64_t v19 = &(&v26)[v15];
                uint64_t v20 = (char *)(v14 + v15 * v13);
                uint64_t v21 = v12 - v15;
                uint64_t v22 = v20;
                do
                {
                  *v19++ = v22;
                  v22 += v13;
                  --v21;
                }
                while (v21);
              }
LABEL_35:
              sub_1003A5404(v4, &v26);
              sub_1003A5508(v4, v7);
              char v28 = 1;
            }
          }
        }
      }
    }
  }
  uint64_t v23 = *(FILE **)(a1 + 184);
  if (v23)
  {
    fclose(v23);
    *(void *)(a1 + 184) = 0;
  }
  if (*v5)
  {
    uint64_t v31 = *v5;
    uint64_t v24 = *(void **)(a1 + 168);
    uint64_t v29 = *(void **)(a1 + 176);
    uint64_t v30 = v24;
    sub_1003A5AA8(&v31, &v30, &v29);
    *unsigned int v5 = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  return v28 != 0;
}

void sub_1002E6C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9 != v9 && a9 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E6C78(uint64_t a1)
{
  sub_1002DE314(a1);
  *uint64_t v2 = off_1004978F0;
  uint64_t v3 = v2 + 1;
  sub_1002D1A1C(v2 + 1);
  qmemcpy((void *)sub_1002D19D8(v3, 39), "Portable Network Graphics files (*.png)", 39);
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_1002E6CFC(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_100496B28;
  sub_1002D1A1C(v1 + 7);
  sub_1002D1A1C(v1 + 3);
  sub_1002D1A1C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002E6D48(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);
  return a1;
}

void sub_1002E6DA8(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);

  operator delete();
}

BOOL sub_1002E6E28(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFD) == 0;
}

void sub_1002E6E34()
{
}

void sub_1002E6EF8()
{
}

void *sub_1002E6F1C(void *result, const void *a2, size_t a3)
{
  if (a3)
  {
    uint64_t v5 = sub_10039F860((uint64_t)result);
    uint64_t v6 = v5;
    if (!v5 || (uint64_t v7 = *(void *)(v5 + 40)) == 0)
    {
      v31[0] = 0;
      v31[1] = 0;
      qmemcpy((void *)sub_1002D19D8(v31, 25), "encoder && encoder->m_buf", 25);
      sub_1002D2278(-215, v31, "writeDataToBuf", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_png.cpp", 328);
    }
    uint64_t v9 = *(char **)v7;
    int v8 = *(char **)(v7 + 8);
    unint64_t v10 = (unint64_t)&v8[-*(void *)v7];
    unint64_t v11 = v10 + a3;
    if (v10 >= v10 + a3)
    {
      if (v10 > v10 + a3) {
        *(void *)(v7 + 8) = &v9[v11];
      }
      return memcpy((void *)(**(void **)(v6 + 40) + v10), a2, a3);
    }
    uint64_t v12 = *(void *)(v7 + 16);
    if (v12 - (uint64_t)v8 >= a3)
    {
      bzero(*(void **)(v7 + 8), a3);
      *(void *)(v7 + 8) = &v8[a3];
      return memcpy((void *)(**(void **)(v6 + 40) + v10), a2, a3);
    }
    if ((v11 & 0x8000000000000000) != 0) {
      sub_10000B98C();
    }
    unint64_t v13 = v12 - (void)v9;
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v11) {
      uint64_t v14 = v10 + a3;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v14;
    }
    uint64_t v16 = operator new(v15);
    uint64_t v17 = (char *)v16 + v15;
    uint64_t v30 = (char *)v16 + v11;
    uint64_t v18 = (char *)v16 + v10;
    bzero((char *)v16 + v10, a3);
    if (v8 == v9)
    {
      *(void *)uint64_t v7 = v18;
      *(void *)(v7 + 8) = v30;
      *(void *)(v7 + 16) = v17;
      if (!v8) {
        return memcpy((void *)(**(void **)(v6 + 40) + v10), a2, a3);
      }
      goto LABEL_35;
    }
    if (v10 < 8 || (unint64_t)(v9 - (unsigned char *)v16) < 0x20) {
      goto LABEL_32;
    }
    if (v10 >= 0x20)
    {
      unint64_t v19 = v10 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v20 = v8 - 16;
      uint64_t v21 = (char *)v16 + v8 - 16 - v9;
      unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v23 = *(_OWORD *)v20;
        *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
        *(_OWORD *)uint64_t v21 = v23;
        v21 -= 32;
        v20 -= 32;
        v22 -= 32;
      }
      while (v22);
      if (v10 == v19)
      {
LABEL_34:
        int v8 = v9;
        *(void *)uint64_t v7 = v16;
        *(void *)(v7 + 8) = v30;
        *(void *)(v7 + 16) = v17;
        if (v9) {
LABEL_35:
        }
          operator delete(v8);
        return memcpy((void *)(**(void **)(v6 + 40) + v10), a2, a3);
      }
      if ((v10 & 0x18) == 0)
      {
        v18 -= v19;
        v8 -= v19;
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
    v18 -= v10 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v24 = &v8[-v19 - 8];
    uint64_t v25 = (char *)(v24 - v9);
    unint64_t v26 = v19 - (v10 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v27 = *(void *)v24;
      v24 -= 8;
      *(void *)&v25[(void)v16] = v27;
      v25 -= 8;
      v26 += 8;
    }
    while (v26);
    v8 -= v10 & 0xFFFFFFFFFFFFFFF8;
    if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_34;
    }
LABEL_32:
    char v28 = v18 - 1;
    do
    {
      char v29 = *--v8;
      *v28-- = v29;
    }
    while (v8 != v9);
    goto LABEL_34;
  }
  return result;
}

void sub_1002E71A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1002E71C0(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = sub_1003B24F8("1.6.34", 0, 0, 0);
  int v42 = 0;
  int v43 = v6;
  uint64_t v41 = 0;
  unsigned int v7 = a2[3];
  unint64_t v8 = (int)a2[2];
  unsigned int v9 = *a2;
  char v40 = 0;
  uint64_t v10 = 0;
  if ((v9 & 5) == 0)
  {
    if (v6)
    {
      unint64_t v11 = v6;
      sub_10039F318((uint64_t)v6);
      int v42 = v12;
      if (v12)
      {
        uint64_t v13 = (uint64_t)v12;
        uint64_t v14 = (int *)sub_1003A4320(v11, (uint64_t)&_longjmp, 0xC0uLL);
        if (!setjmp(v14))
        {
          if (*(void *)(a1 + 40))
          {
            sub_1003B1D18(v11, a1, (size_t (*)(size_t, void *, size_t))sub_1002E6F1C, (uint64_t (*)(uint64_t))nullsub_34);
          }
          else
          {
            if (*(void *)(a1 + 24)) {
              size_t v15 = *(const char **)(a1 + 24);
            }
            else {
              size_t v15 = "";
            }
            uint64_t v41 = fopen(v15, "wb");
            if (v41) {
              sub_10039F86C((uint64_t)v11, (uint64_t)v41);
            }
          }
          uint64_t v16 = *a3;
          uint64_t v17 = a3[1];
          BOOL v18 = 0;
          if (v17 != *a3)
          {
            unint64_t v19 = (v17 - *a3) >> 2;
            int v20 = -1;
            uint64_t v21 = 3;
            unint64_t v22 = 0;
            while (1)
            {
              unint64_t v26 = v22;
              int v27 = *(_DWORD *)(v16 + 4 * v22);
              switch(v27)
              {
                case 18:
                  BOOL v18 = *(_DWORD *)(v16 + 4 * v26 + 4) != 0;
                  break;
                case 17:
                  unsigned int v28 = *(_DWORD *)(v16 + 4 * v26 + 4) & ~(*(int *)(v16 + 4 * v26 + 4) >> 31);
                  if (v28 >= 4) {
                    uint64_t v23 = 4;
                  }
                  else {
                    uint64_t v23 = v28;
                  }
                  goto LABEL_16;
                case 16:
                  uint64_t v23 = 0;
                  if ((*(_DWORD *)(v16 + 4 * v26 + 4) & ~(*(int *)(v16 + 4 * v26 + 4) >> 31)) >= 9) {
                    int v20 = 9;
                  }
                  else {
                    int v20 = *(_DWORD *)(v16 + 4 * v26 + 4) & ~(*(int *)(v16 + 4 * v26 + 4) >> 31);
                  }
                  goto LABEL_16;
              }
              uint64_t v23 = v21;
LABEL_16:
              BOOL v24 = v18;
              unint64_t v22 = v26 + 2;
              int v25 = v20;
              uint64_t v21 = v23;
              if (v22 >= v19) {
                goto LABEL_27;
              }
            }
          }
          LODWORD(v23) = 3;
          int v25 = -1;
          BOOL v24 = 0;
LABEL_27:
          if (*(void *)(a1 + 40) || v41)
          {
            int v29 = v25;
            if (v25 < 0)
            {
              sub_1003B2AD8((uint64_t)v11, 0, 0x10u);
              int v29 = 1;
            }
            sub_1003B2CE4((uint64_t)v11, v29);
            sub_1003B2CF0((uint64_t)v11, v23);
            int v30 = (v9 >> 3) & 0x1FF;
            if (v24) {
              char v31 = 1;
            }
            else {
              char v31 = 8;
            }
            if ((v9 & 7) != 0) {
              unsigned __int8 v32 = 16;
            }
            else {
              unsigned __int8 v32 = v31;
            }
            if (v30 == 2) {
              char v33 = 2;
            }
            else {
              char v33 = 6;
            }
            if (v30) {
              unsigned __int8 v34 = v33;
            }
            else {
              unsigned __int8 v34 = 0;
            }
            sub_1003B025C((uint64_t)v11, v13, v7, v8, v32, v34, 0, 0, 0);
            sub_1003B1F4C((uint64_t)v11, v13);
            if (v24) {
              sub_1003B135C((uint64_t)v11);
            }
            sub_1003B1328((uint64_t)v11);
            sub_1003B133C((uint64_t)v11);
            if (v8 > 0x88) {
              operator new[]();
            }
            if ((int)v8 >= 1)
            {
              uint64_t v35 = *((void *)a2 + 10);
              uint64_t v36 = 0;
              uint64_t v37 = 0;
              do
              {
                *(void *)&v39[v36] = *((void *)a2 + 2) + v37;
                v36 += 8;
                v37 += v35;
              }
              while (8 * v8 != v36);
            }
            sub_1003B2910((uint64_t)v11, (uint64_t)v39);
            sub_1003B22C4((uint64_t)v11, v13);
            char v40 = 1;
          }
        }
      }
    }
    sub_1003B2A10((uint64_t *)&v43, &v42);
    if (v41) {
      fclose(v41);
    }
    return v40 != 0;
  }
  return v10;
}

void sub_1002E75E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10 != v10 && a10 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E7618()
{
}

uint64_t sub_1002E762C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_1002E76B0()
{
}

uint64_t sub_1002E76C4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1002E7744(uint64_t a1)
{
  sub_1002DDFA8(a1);
  *uint64_t v2 = off_1004979F8;
  sub_1002DC53C((uint64_t)(v2 + 20));
  *(void *)(a1 + 160) = off_1004968E0;
  *(unsigned char *)(a1 + 152) = 1;
  *(void *)(a1 + 1248) = 0xFFFFFFFF00000000;
  *(unsigned char *)(a1 + 1256) = 0;
  *(_DWORD *)(a1 + 1260) = 0;
  return a1;
}

void sub_1002E77C0(_Unwind_Exception *a1)
{
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E77D4(void *a1)
{
  *a1 = off_1004979F8;
  uint64_t v2 = (uint64_t)(a1 + 20);
  sub_1002DCC18((uint64_t)(a1 + 20));
  sub_1002DCCC8(v2);

  return sub_1002DE670((uint64_t)a1);
}

void sub_1002E783C(void *a1)
{
  *a1 = off_1004979F8;
  uint64_t v2 = (uint64_t)(a1 + 20);
  sub_1002DCC18((uint64_t)(a1 + 20));
  sub_1002DCCC8(v2);
  sub_1002DE670((uint64_t)a1);

  operator delete();
}

uint64_t sub_1002E78B8()
{
  return 3;
}

BOOL sub_1002E78C0(uint64_t a1, void *a2)
{
  if (a2[1] < 3uLL) {
    return 0;
  }
  uint64_t v2 = (unsigned char *)*a2;
  if (*(unsigned char *)*a2 != 80 || v2[1] - 49 > 5) {
    return 0;
  }
  __darwin_ct_rune_t v3 = (char)v2[2];
  if (v3 < 0) {
    return __maskrune(v3, 0x4000uLL) != 0;
  }
  else {
    return (_DefaultRuneLocale.__runetype[v3] & 0x4000) != 0;
  }
}

void sub_1002E7948()
{
}

void sub_1002E79D8()
{
}

void sub_1002E7AB8()
{
  sub_1002DE670(v0);
  operator delete();
}

FILE *sub_1002E7AEC(uint64_t a1)
{
  if (!*(void *)(a1 + 72)) {
    goto LABEL_13;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 60);
  if ((int)v2 >= 3)
  {
    uint64_t v4 = *(void *)(a1 + 120);
    uint64_t v5 = (int *)(v4 + 4);
    uint64_t v6 = 1;
    uint64_t v7 = v2 & 0xFFFFFFFE;
    uint64_t v8 = 1;
    do
    {
      v6 *= *(v5 - 1);
      v8 *= *v5;
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    uint64_t v3 = v8 * v6;
    uint64_t v9 = v2 - (v2 & 0xFFFFFFFE);
    if (v9)
    {
      uint64_t v10 = (int *)(v4 + ((4 * v2) & 0x3FFFFFFF8));
      do
      {
        uint64_t v11 = *v10++;
        v3 *= v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    uint64_t v3 = *(int *)(a1 + 68) * (uint64_t)*(int *)(a1 + 64);
  }
  if (v2 && v3)
  {
    if ((sub_1002DCA78(a1 + 160, a1 + 56) & 1) == 0) {
      return 0;
    }
  }
  else
  {
LABEL_13:
    BOOL result = sub_1002DC998(a1 + 160, (const char **)(a1 + 24));
    if (!result) {
      return result;
    }
  }
  if (sub_1002DCE08((void *)(a1 + 160)) != 80)
  {
    exception = __cxa_allocate_exception(0x58uLL);
    sub_10022F344(v22, "Invalid header");
    sub_10022F344(v21, "readHeader");
    sub_10022F344(v20, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp");
    sub_1002D1C2C((uint64_t)exception, -2, v22, v21, v20, 155);
    void *exception = &off_1004977D8;
  }
  unsigned int v13 = sub_1002DCE08((void *)(a1 + 160));
  if (v13 - 49 >= 6)
  {
    BOOL v18 = __cxa_allocate_exception(0x58uLL);
    sub_10022F344(v22, "Invalid header");
    sub_10022F344(v21, "readHeader");
    sub_10022F344(v20, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp");
    sub_1002D1C2C((uint64_t)v18, -2, v22, v21, v20, 163);
    void *v18 = &off_1004977D8;
  }
  uint64_t v14 = 4 * (int)(v13 - 49);
  int v15 = *(_DWORD *)((char *)&unk_10040754C + v14);
  LODWORD(v14) = *(_DWORD *)((char *)&unk_100407564 + v14);
  *(_DWORD *)(a1 + 1248) = v15;
  *(unsigned char *)(a1 + 1256) = v13 > 0x33;
  *(_DWORD *)(a1 + 16) = v14;
  *(_DWORD *)(a1 + 8) = sub_1002E804C((void *)(a1 + 160), 0);
  *(_DWORD *)(a1 + 12) = sub_1002E804C((void *)(a1 + 160), 0);
  if (*(_DWORD *)(a1 + 1248) == 1)
  {
    int v16 = 1;
    *(_DWORD *)(a1 + 1260) = 1;
  }
  else
  {
    int v16 = sub_1002E804C((void *)(a1 + 160), 0);
    *(_DWORD *)(a1 + 1260) = v16;
    if (v16 >= 0x10000)
    {
      unint64_t v19 = __cxa_allocate_exception(0x58uLL);
      sub_10022F344(v22, "Invalid header");
      sub_10022F344(v21, "readHeader");
      sub_10022F344(v20, "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp");
      sub_1002D1C2C((uint64_t)v19, -2, v22, v21, v20, 174);
      void *v19 = &off_1004977D8;
    }
    if (v16 >= 256) {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 16) & 0xFF8 | 2;
    }
  }
  if (*(int *)(a1 + 8) < 1 || *(int *)(a1 + 12) < 1 || v16 < 1)
  {
    *(_DWORD *)(a1 + 1252) = -1;
    *(void *)(a1 + 8) = -1;
    sub_1002DCC18(a1 + 160);
    return 0;
  }
  else
  {
    *(_DWORD *)(a1 + 1252) = sub_1002DC97C((_DWORD *)(a1 + 160));
    return (FILE *)1;
  }
}

void sub_1002E7ED4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1002D1A1C(&a9);
  sub_1002D1A1C(&a11);
  sub_1002D1A1C(&a13);
  if (v14) {
    __cxa_free_exception(v13);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2) {
    __cxa_rethrow();
  }
  uint64_t v17 = sub_10026AA20(&std::cerr, (uint64_t)"PXM::readHeader(): unknown C++ exception", 40);
  sub_10026B4C0(v17);
  std::ostream::flush();
  __cxa_rethrow();
}

void sub_1002E802C(_Unwind_Exception *a1)
{
}

uint64_t sub_1002E804C(void *a1, int a2)
{
LABEL_1:
  uint64_t v4 = sub_1002DCE08(a1);
  while (1)
  {
LABEL_2:
    if (v4 > 0xFF)
    {
LABEL_6:
      if (!__maskrune(v4, 0x4000uLL)) {
        goto LABEL_26;
      }
      goto LABEL_7;
    }
    __uint32_t v5 = _DefaultRuneLocale.__runetype[v4];
    if ((v5 & 0x400) != 0) {
      break;
    }
    if (v4 == 35)
    {
      do
        int v6 = sub_1002DCE08(a1);
      while (v6 != 10 && v6 != 13);
      goto LABEL_1;
    }
    if (v4 > 0x7F) {
      goto LABEL_6;
    }
    if ((v5 & 0x4000) == 0)
    {
LABEL_26:
      sub_1002D1F78(v10, "PXM: Unexpected code in ReadNumber(): 0x%x (%d)", v4, HIDWORD(v4));
      sub_1002E9020(v10, "ReadNumber", 80);
    }
LABEL_7:
    if (v4 <= 0x7F) {
      goto LABEL_10;
    }
    while (__maskrune(v4, 0x4000uLL))
    {
      while (1)
      {
        uint64_t v4 = sub_1002DCE08(a1);
        if (v4 > 0x7F) {
          break;
        }
LABEL_10:
        if ((_DefaultRuneLocale.__runetype[v4] & 0x4000) == 0) {
          goto LABEL_2;
        }
      }
    }
  }
  if (a2) {
    return (v4 - 48);
  }
  uint64_t v7 = 0;
  do
  {
    uint64_t v7 = 10 * v7 + (int)v4 - 48;
    if (v7 >= 0x80000000)
    {
      v10[0] = 0;
      v10[1] = 0;
      qmemcpy((void *)sub_1002D19D8(v10, 61), "val <= 2147483647 && \"PXM: ReadNumber(): result is too large\"", 61);
      sub_1002D2278(-215, v10, "ReadNumber", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp", 90);
    }
    unsigned int v8 = sub_1002DCE08(a1);
    if (v8 > 0xFF) {
      break;
    }
    LODWORD(v4) = v8;
  }
  while ((_DefaultRuneLocale.__runetype[v8] & 0x400) != 0);
  return v7;
}

  uint64_t v11 = (long long *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    unsigned int v13 = a2 - (void)v11;
    int v14 = v13 >> 5;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unsigned int v28 = (long long *)(a2 - 32);
          int v29 = *(_DWORD *)(a2 - 32);
          int v30 = v29 < *(_DWORD *)a1;
          if (v29 == *(_DWORD *)a1
            && (v31 = *(void *)(a2 - 24), v32 = *(void *)(a1 + 8), int v30 = v31 < v32, v31 == v32))
          {
            if (*(void *)(a2 - 16) >= *(void *)(a1 + 16)) {
              return;
            }
          }
          else if (!v30)
          {
            return;
          }
          uint64_t v72 = *(_OWORD *)a1;
          int8x8x2_t v74 = *(_OWORD *)(a1 + 16);
          uint64_t v56 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v28;
          *(_OWORD *)(a1 + 16) = v56;
          char *v28 = v72;
          *(_OWORD *)(a2 - 16) = v74;
          break;
        case 3uLL:
          sub_10032C784((long long *)a1, (int *)(a1 + 32), (long long *)(a2 - 32));
          return;
        case 4uLL:
          sub_10032CF3C(a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a2 - 32));
          return;
        case 5uLL:
          sub_10032D05C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 767) {
      break;
    }
    int v15 = v12;
    if (v12 == 1)
    {
      if (a1 != a2)
      {
        uint64_t v52 = (v14 - 2) >> 1;
        uint64_t v53 = v52 + 1;
        unint64_t v54 = (int *)(a1 + 32 * v52);
        do
        {
          sub_10032D1CC(a1, a3, v13 >> 5, v54);
          v54 -= 8;
          --v53;
        }
        while (v53);
        int64_t v55 = (unint64_t)v13 >> 5;
        do
        {
          sub_10032D358((_OWORD *)a1, a2, a3, v55);
          a2 -= 32;
          unint64_t v22 = v55-- > 2;
        }
        while (v22);
      }
      return;
    }
    int v16 = v14 >> 1;
    uint64_t v17 = (long long *)(a1 + 32 * (v14 >> 1));
    if ((unint64_t)v13 <= 0x1000)
    {
      sub_10032C784(v17, (int *)a1, (long long *)(a2 - 32));
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_10032C784((long long *)a1, (int *)v17, (long long *)(a2 - 32));
      BOOL v18 = 32 * v16;
      unint64_t v19 = (int *)(32 * v16 + a1 - 32);
      sub_10032C784((long long *)(a1 + 32), v19, (long long *)(a2 - 64));
      sub_10032C784((long long *)(a1 + 64), (int *)(a1 + 32 + v18), (long long *)(a2 - 96));
      sub_10032C784((long long *)v19, (int *)v17, (long long *)(a1 + 32 + v18));
      uint64_t v71 = *(_OWORD *)a1;
      uint64_t v73 = *(_OWORD *)(a1 + 16);
      int v20 = v17[1];
      *(_OWORD *)a1 = *v17;
      *(_OWORD *)(a1 + 16) = v20;
      *uint64_t v17 = v71;
      v17[1] = v73;
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v21 = *(_DWORD *)(a1 - 32);
    unint64_t v22 = v21 < *(_DWORD *)a1;
    if (v21 == *(_DWORD *)a1)
    {
      uint64_t v23 = *(void *)(a1 - 24);
      BOOL v24 = *(void *)(a1 + 8);
      unint64_t v22 = v23 < v24;
      if (v23 == v24) {
        unint64_t v22 = *(void *)(a1 - 16) < *(void *)(a1 + 16);
      }
    }
    if (!v22)
    {
      uint64_t v11 = sub_10032C93C((long long *)a1, a2);
LABEL_20:
      a5 = 0;
      a4 = -v15;
      goto LABEL_2;
    }
LABEL_16:
    int v25 = sub_10032CADC((uint64_t *)a1, a2);
    if ((v26 & 1) == 0) {
      goto LABEL_19;
    }
    int v27 = sub_10032CC80(a1, v25);
    uint64_t v11 = (long long *)(v25 + 32);
    if (sub_10032CC80(v25 + 32, a2))
    {
      a4 = -v15;
      a2 = v25;
      if (v27) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v15 + 1;
    if (!v27)
    {
LABEL_19:
      sub_10032C1DC(a1, v25, a3, -v15, a5 & 1);
      uint64_t v11 = (long long *)(v25 + 32);
      goto LABEL_20;
    }
  }
  char v33 = (_OWORD *)(a1 + 32);
  uint64_t v35 = a1 == a2 || v33 == (_OWORD *)a2;
  if (a5)
  {
    if (v35) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = (_OWORD *)a1;
LABEL_48:
    uint64_t v38 = v37;
    uint64_t v37 = v33;
    int64_t v39 = *((_DWORD *)v38 + 8);
    if (v39 == *(_DWORD *)v38)
    {
      char v40 = *((void *)v38 + 5);
      uint64_t v41 = *((void *)v38 + 1);
      if (v40 == v41)
      {
        if (*((void *)v38 + 6) >= *((void *)v38 + 2)) {
          goto LABEL_47;
        }
      }
      else if (v40 >= v41)
      {
        goto LABEL_47;
      }
    }
    else
    {
      if (v39 >= *(_DWORD *)v38) {
        goto LABEL_47;
      }
      char v40 = *((void *)v38 + 5);
    }
    int v42 = *((_DWORD *)v38 + 9);
    int v43 = *((void *)v38 + 6);
    int v44 = *((void *)v38 + 7);
    int v45 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v45;
    int v46 = a1;
    if (v38 == (_OWORD *)a1) {
      goto LABEL_46;
    }
    uint64_t v47 = v36;
    while (1)
    {
      unsigned __int8 v49 = (_OWORD *)(a1 + v47);
      uint64_t v50 = *(_DWORD *)(a1 + v47 - 32);
      if (v39 == v50)
      {
        int v51 = *((void *)v49 - 3);
        if (v40 == v51)
        {
          if (v43 >= *(void *)(a1 + v47 - 16))
          {
LABEL_66:
            int v46 = (uint64_t)v38;
LABEL_46:
            *(_DWORD *)int v46 = v39;
            *(_DWORD *)(v46 + 4) = v42;
            *(void *)(v46 + 8) = v40;
            *(void *)(v46 + 16) = v43;
            *(void *)(v46 + 24) = v44;
LABEL_47:
            char v33 = v37 + 2;
            v36 += 32;
            if (v37 + 2 == (_OWORD *)a2) {
              return;
            }
            goto LABEL_48;
          }
        }
        else if (v40 >= v51)
        {
          int v46 = a1 + v47;
          goto LABEL_46;
        }
      }
      else if (v39 >= v50)
      {
        goto LABEL_66;
      }
      v38 -= 2;
      int v48 = *(_OWORD *)(a1 + v47 - 16);
      char *v49 = *(_OWORD *)(a1 + v47 - 32);
      v49[1] = v48;
      v47 -= 32;
      if (!v47)
      {
        int v46 = a1;
        goto LABEL_46;
      }
    }
  }
  if (!v35)
  {
    do
    {
      unint64_t v57 = a1;
      a1 = (uint64_t)v33;
      int v58 = *(_DWORD *)(v57 + 32);
      if (v58 == *(_DWORD *)v57)
      {
        BOOL v59 = *(void *)(v57 + 40);
        int8x16_t v60 = *(void *)(v57 + 8);
        if (v59 == v60)
        {
          if (*(void *)(v57 + 48) < *(void *)(v57 + 16)) {
            goto LABEL_86;
          }
        }
        else if (v59 < v60)
        {
          goto LABEL_86;
        }
      }
      else if (v58 < *(_DWORD *)v57)
      {
        BOOL v59 = *(void *)(v57 + 40);
LABEL_86:
        int8x16_t v61 = *(_DWORD *)(v57 + 36);
        BOOL v62 = (_OWORD *)a1;
        int8x8_t v64 = *(void *)(v57 + 48);
        uint64_t v63 = *(void *)(v57 + 56);
        int v65 = *(_OWORD *)(a1 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a1 - 32);
        *(_OWORD *)(a1 + 16) = v65;
        char v66 = *(_DWORD *)(a1 - 64);
        int8x16_t v67 = v58 < v66;
        if (v58 != v66) {
          goto LABEL_89;
        }
LABEL_87:
        int8x16_t v68 = *((void *)v62 - 7);
        int8x16_t v67 = v59 < v68;
        if (v59 == v68) {
          int8x16_t v67 = v64 < *((void *)v62 - 6);
        }
LABEL_89:
        while (v67)
        {
          v62 -= 2;
          int8x16_t v69 = *(v62 - 1);
          *BOOL v62 = *(v62 - 2);
          v62[1] = v69;
          unint64_t v70 = *((_DWORD *)v62 - 16);
          int8x16_t v67 = v58 < v70;
          if (v58 == v70) {
            goto LABEL_87;
          }
        }
        *((_DWORD *)v62 - 8) = v58;
        *((_DWORD *)v62 - 7) = v61;
        *((void *)v62 - 3) = v59;
        *((void *)v62 - 2) = v64;
        *((void *)v62 - 1) = v63;
      }
      char v33 = (_OWORD *)(a1 + 32);
    }
    while (a1 + 32 != a2);
  }
}

  uint64_t v10 = (uint64_t *)((char *)a2 - 12);
  uint64_t v11 = (uint64_t *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    unsigned int v13 = v12;
    int v14 = (char *)a2 - (char *)v11;
    int v15 = 0xAAAAAAAAAAAAAAABLL * (v14 >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)(v10, (int *)a1))
          {
            int v27 = *(unsigned char *)(a1 + 8);
            unsigned int v28 = *(uint64_t *)((char *)a2 - 12);
            *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 - 4);
            int v29 = *(void *)a1;
            *(void *)a1 = v28;
            *(uint64_t *)((char *)a2 - 12) = v29;
            *((unsigned char *)a2 - 4) = v27;
          }
          break;
        case 3uLL:
          sub_10036050C((int *)a1, (uint64_t *)(a1 + 12), v10, a3);
          break;
        case 4uLL:
          sub_100360B34((int *)a1, a1 + 12, a1 + 24, (uint64_t)v10, a3);
          break;
        case 5uLL:
          sub_100360C18((int *)a1, a1 + 12, a1 + 24, a1 + 36, v10, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 287) {
      break;
    }
    if (v12 == 1)
    {
      if ((uint64_t *)a1 != a2)
      {
        uint64_t v37 = (v15 - 2) >> 1;
        uint64_t v38 = v37 + 1;
        int64_t v39 = a1 + 12 * v37;
        do
        {
          sub_100360D34(a1, (unsigned int (**)(uint64_t, uint64_t))a3, v15, v39);
          v39 -= 12;
          --v38;
        }
        while (v38);
        char v40 = v14 / 0xCuLL;
        do
        {
          sub_100360EA8(a1, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3, v40);
          a2 = (uint64_t *)((char *)a2 - 12);
        }
        while (v40-- > 2);
      }
      return;
    }
    int v16 = v15 >> 1;
    uint64_t v17 = (int *)(a1 + 12 * (v15 >> 1));
    if ((unint64_t)v14 < 0x601)
    {
      sub_10036050C(v17, (uint64_t *)a1, v10, a3);
      if (a5) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10036050C((int *)a1, (uint64_t *)v17, v10, a3);
      BOOL v18 = v10;
      unint64_t v19 = a1 + 12 * v16;
      sub_10036050C((int *)(a1 + 12), (uint64_t *)(v19 - 12), a2 - 3, a3);
      sub_10036050C((int *)(a1 + 24), (uint64_t *)(a1 + 12 + 12 * v16), (uint64_t *)((char *)a2 - 36), a3);
      sub_10036050C((int *)(v19 - 12), (uint64_t *)v17, (uint64_t *)(a1 + 12 + 12 * v16), a3);
      int v20 = *(unsigned char *)(a1 + 8);
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(v19 + 8);
      uint64_t v21 = *(void *)a1;
      *(void *)a1 = *(void *)v17;
      *(void *)uint64_t v17 = v21;
      *(unsigned char *)(v19 + 8) = v20;
      uint64_t v10 = v18;
      if (a5) {
        goto LABEL_12;
      }
    }
    if (((*a3)((uint64_t *)(a1 - 12), (int *)a1) & 1) == 0)
    {
      uint64_t v11 = sub_100360688((uint64_t *)a1, a2, (uint64_t (**)(uint64_t *, uint64_t *))a3);
      goto LABEL_17;
    }
LABEL_12:
    v23.n128_f64[0] = sub_1003607D8(a1, a2, (uint64_t (**)(uint64_t, double *))a3);
    BOOL v24 = (uint64_t *)v22;
    if ((v25 & 1) == 0) {
      goto LABEL_15;
    }
    unint64_t v26 = sub_100360928(a1, v22, a3);
    uint64_t v11 = (uint64_t *)((char *)v24 + 12);
    if (sub_100360928((uint64_t)v24 + 12, (uint64_t)a2, a3))
    {
      a4 = -v13;
      a2 = v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_15:
      sub_10035FFD4(a1, v24, a3, -v13, a5 & 1, v23);
      uint64_t v11 = (uint64_t *)((char *)v24 + 12);
LABEL_17:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    if ((uint64_t *)a1 != a2)
    {
      int v30 = (void *)(a1 + 12);
      if ((uint64_t *)(a1 + 12) != a2)
      {
        char v31 = 0;
        unsigned __int8 v32 = (void *)a1;
        do
        {
          unsigned __int8 v34 = v30;
          if ((*a3)(v30, (int *)v32))
          {
            int v48 = *v34;
            unsigned __int8 v49 = *((unsigned char *)v32 + 20);
            uint64_t v35 = v31;
            do
            {
              uint64_t v36 = a1 + v35;
              *(void *)(v36 + 12) = *(void *)(a1 + v35);
              *(unsigned char *)(v36 + 20) = *(unsigned char *)(a1 + v35 + 8);
              if (!v35)
              {
                char v33 = a1;
                goto LABEL_37;
              }
              v35 -= 12;
            }
            while (((*a3)(&v48, (int *)(v35 + a1)) & 1) != 0);
            char v33 = a1 + v35 + 12;
LABEL_37:
            *(void *)char v33 = v48;
            *(unsigned char *)(v33 + 8) = v49;
          }
          int v30 = (void *)((char *)v34 + 12);
          v31 += 12;
          unsigned __int8 v32 = v34;
        }
        while ((void *)((char *)v34 + 12) != a2);
      }
    }
  }
  else if ((uint64_t *)a1 != a2)
  {
    int v42 = (uint64_t *)(a1 + 12);
    if ((uint64_t *)(a1 + 12) != a2)
    {
      int v43 = a1 - 12;
      do
      {
        int v44 = v42;
        if ((*a3)(v42, (int *)a1))
        {
          int v48 = *v44;
          unsigned __int8 v49 = *(unsigned char *)(a1 + 20);
          int v45 = v43;
          do
          {
            *(void *)(v45 + 24) = *(void *)(v45 + 12);
            *(unsigned char *)(v45 + 32) = *(unsigned char *)(v45 + 20);
            int v46 = (*a3)(&v48, (int *)v45);
            v45 -= 12;
          }
          while ((v46 & 1) != 0);
          *(void *)(v45 + 24) = v48;
          *(unsigned char *)(v45 + 32) = v49;
        }
        int v42 = (uint64_t *)((char *)v44 + 12);
        v43 += 12;
        a1 = (uint64_t)v44;
      }
      while ((uint64_t *)((char *)v44 + 12) != a2);
    }
  }
}

void sub_1002E822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E8258(uint64_t a1, int *a2)
{
  if ((*(_DWORD *)(a1 + 1252) & 0x80000000) != 0) {
    return 0;
  }
  int v4 = *a2;
  __uint32_t v5 = (int *)*((void *)a2 + 2);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = (void *)(a1 + 160);
  int v9 = *(_DWORD *)(a1 + 1248);
  uint64_t result = sub_1002DC4D0(a1 + 160);
  if (!result) {
    return result;
  }
  unint64_t v12 = 0x442211088uLL >> (4 * (v6 & 7));
  int v13 = v12 & 0x78;
  memset(v126, 0, 256);
  if (v13 == 8)
  {
    int v14 = *(_DWORD *)(a1 + 1260);
    if (v14 >= 256)
    {
      int v120 = 0;
      unint64_t v121 = 0;
      qmemcpy((void *)sub_1002D19D8(&v120, 14), "m_maxval < 256", 14);
      sub_1002D2278(-215, (uint64_t *)&v120, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp", 226);
    }
    int v15 = *(_DWORD *)(a1 + 1248);
    if (v14 < 0) {
      goto LABEL_20;
    }
    if (v15 == 1) {
      char v16 = -1;
    }
    else {
      char v16 = 0;
    }
    unint64_t v17 = (v14 + 1);
    if (v14)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v17 & 0xFFFFFFFE;
      int v20 = &v126[1];
      do
      {
        *(v20 - 1) = ((int)v18 / v14) ^ v16;
        *int v20 = (((int)v18 + 255) / v14) ^ v16;
        v20 += 2;
        v18 += 510;
      }
      while (510 * (v17 >> 1) != v18);
      if (v19 == v17)
      {
LABEL_20:
        if (v15 == 1) {
          int v24 = 1;
        }
        else {
          int v24 = 8;
        }
        sub_1002F0ED8(v127, v24, v15 == 1, 0.0, v11);
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    int v21 = 255 * v19;
    unint64_t v22 = &v126[v19];
    uint64_t v23 = v17 - v19;
    do
    {
      *v22++ = (v21 / v14) ^ v16;
      v21 += 255;
      --v23;
    }
    while (v23);
    goto LABEL_20;
  }
LABEL_24:
  sub_1002DC950((uint64_t)v8, *(_DWORD *)(a1 + 1252));
  int v118 = v4 & 0xFF8;
  unint64_t v117 = (v9 * v7 * ((v12 >> 3) & 0xF) + 7) >> 3;
  int v25 = *(_DWORD *)(a1 + 1248);
  if (v25 == 1)
  {
    if ((*(unsigned char *)(a1 + 16) & 7) != 0)
    {
      int v120 = 0;
      unint64_t v121 = 0;
      qmemcpy((void *)sub_1002D19D8(&v120, 32), "((m_type) & ((1 << 3) - 1)) == 0", 32);
      sub_1002D2278(-215, (uint64_t *)&v120, "readData", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/grfmt_pxm.cpp", 242);
    }
    if (*(unsigned char *)(a1 + 1256))
    {
      int v120 = &v122;
      unint64_t v121 = (v9 * v7 * ((v12 >> 3) & 0xF) + 7) >> 3;
      if (v117 >= 0x409) {
        operator new[]();
      }
      if (*(int *)(a1 + 12) >= 1)
      {
        if ((v4 & 0xFF8) != 0)
        {
          int v100 = 0;
          do
          {
            sub_1002DCEE4((uint64_t)v8, (char *)&v122, v117);
            sub_1002F172C(v5, (char *)&v122, *(_DWORD *)(a1 + 8), (uint64_t)v127);
            ++v100;
            __uint32_t v5 = (int *)((char *)v5 + *((void *)a2 + 10));
          }
          while (v100 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          int v108 = 0;
          do
          {
            sub_1002DCEE4((uint64_t)v8, (char *)&v122, v117);
            sub_1002F1830(v5, (char *)&v122, *(_DWORD *)(a1 + 8), v126);
            ++v108;
            __uint32_t v5 = (int *)((char *)v5 + *((void *)a2 + 10));
          }
          while (v108 < *(_DWORD *)(a1 + 12));
        }
      }
    }
    else
    {
      unint64_t v101 = *(int *)(a1 + 8);
      int v120 = &v122;
      unint64_t v121 = v101;
      if (v101 >= 0x409) {
        operator new[]();
      }
      if (*(int *)(a1 + 12) >= 1)
      {
        if ((v4 & 0xFF8) != 0)
        {
          int v102 = 0;
          do
          {
            LODWORD(v103) = *(_DWORD *)(a1 + 8);
            if ((int)v103 >= 1)
            {
              uint64_t v104 = 0;
              while (1)
              {
                while (1)
                {
                  uint64_t v105 = sub_1002DCE08(v8);
LABEL_162:
                  if (v105 > 0xFF) {
                    goto LABEL_163;
                  }
                  __uint32_t v106 = _DefaultRuneLocale.__runetype[v105];
                  if ((v106 & 0x400) == 0) {
                    break;
                  }
                  v123[v104++ - 2] = v105 != 48;
                  uint64_t v103 = *(int *)(a1 + 8);
                  if (v104 >= v103) {
                    goto LABEL_177;
                  }
                }
                if (v105 != 35)
                {
                  if (v105 > 0x7F)
                  {
LABEL_163:
                    if (__maskrune(v105, 0x4000uLL)) {
                      goto LABEL_164;
                    }
                  }
                  else if ((v106 & 0x4000) != 0)
                  {
                    while (1)
                    {
LABEL_164:
                      if (v105 <= 0x7F)
                      {
                        if ((_DefaultRuneLocale.__runetype[v105] & 0x4000) == 0) {
                          goto LABEL_162;
                        }
                      }
                      else if (!__maskrune(v105, 0x4000uLL))
                      {
                        goto LABEL_162;
                      }
                      uint64_t v105 = sub_1002DCE08(v8);
                    }
                  }
                  sub_1002D1F78(v119, "PXM: Unexpected code in ReadNumber(): 0x%x (%d)", v105, HIDWORD(v105));
                  sub_1002E9020(v119, "ReadNumber", 80);
                }
                do
                  int v107 = sub_1002DCE08(v8);
                while (v107 != 13 && v107 != 10);
              }
            }
LABEL_177:
            sub_1002F15B4((uint64_t)v5, (unsigned __int8 *)&v122, v103, (uint64_t)v127);
            ++v102;
            __uint32_t v5 = (int *)((char *)v5 + *((void *)a2 + 10));
          }
          while (v102 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          int v109 = 0;
          do
          {
            LODWORD(v110) = *(_DWORD *)(a1 + 8);
            if ((int)v110 >= 1)
            {
              uint64_t v111 = 0;
              do
              {
                v123[v111++ - 2] = sub_1002E804C(v8, 1) != 0;
                uint64_t v110 = *(int *)(a1 + 8);
              }
              while (v111 < v110);
            }
            sub_1002F1604(v5, (unsigned __int8 *)&v122, v110, (uint64_t)v126);
            ++v109;
            __uint32_t v5 = (int *)((char *)v5 + *((void *)a2 + 10));
          }
          while (v109 < *(_DWORD *)(a1 + 12));
        }
      }
    }
    if (v120 != &v122 && v120 != 0) {
      goto LABEL_191;
    }
  }
  else
  {
    if (v25 != 8 && v25 != 24)
    {
      sub_10022F344(&v120, "m_bpp is not supported");
      sub_1002E9020((uint64_t *)&v120, "readData", 357);
    }
    uint64_t v26 = v7 + v7 * ((v6 >> 3) & 0x1FF);
    if (2 * (int)v26 <= v117) {
      unint64_t v27 = v117;
    }
    else {
      unint64_t v27 = 2 * (int)v26;
    }
    int v120 = &v122;
    unint64_t v121 = v27;
    unsigned int v28 = &v122;
    if (v27 >= 0x409) {
      operator new[]();
    }
    if (*(int *)(a1 + 12) >= 1)
    {
      int v29 = 0;
      BOOL v31 = v13 != 16 || (int)v26 < 1;
      BOOL v116 = v31;
      uint64_t v115 = v26 & 0xFFFFFFE0;
      BOOL v34 = &v122 < (__int16 *)&v123[2 * v26 - 2] && &v122 < (__int16 *)&v123[v26 - 2]
         || v26 < 8;
      BOOL v114 = v34;
      uint64_t v113 = v26 & 0xFFFFFFF8;
      while (!*(unsigned char *)(a1 + 1256))
      {
        if ((int)v26 < 1) {
          goto LABEL_91;
        }
        for (uint64_t i = 0; i != v26; ++i)
        {
          while (1)
          {
            unsigned int v37 = sub_1002E804C(v8, 0);
            unsigned int v38 = *(_DWORD *)(a1 + 1260);
            if (v37 < v38) {
              unsigned int v38 = v37;
            }
            if (v13 == 8) {
              break;
            }
            *(_WORD *)&v123[2 * i++ - 2] = v38;
            if (v26 == i) {
              goto LABEL_74;
            }
          }
          v123[i - 2] = v126[v38];
        }
LABEL_74:
        if (v13 == 16 && (*a2 & 7) == 0 && (int)v26 >= 1)
        {
          if (v114)
          {
            uint64_t v52 = 0;
            do
            {
LABEL_90:
              v123[v52 - 2] = v123[2 * v52 - 1];
              ++v52;
            }
            while (v26 != v52);
            goto LABEL_91;
          }
          if (v26 >= 0x20)
          {
            uint64_t v54 = v26 & 0xFFFFFFE0;
            int64_t v55 = (int8x16_t *)v124;
            uint64_t v56 = (int8x16_t *)v125;
            do
            {
              int8x16_t v58 = v56[-2];
              int8x16_t v57 = v56[-1];
              int8x16_t v60 = *v56;
              int8x16_t v59 = v56[1];
              v56 += 4;
              v55[-1] = vuzp2q_s8(v58, v57);
              *int64_t v55 = vuzp2q_s8(v60, v59);
              v55 += 2;
              v54 -= 32;
            }
            while (v54);
            if (v115 == v26) {
              goto LABEL_91;
            }
            uint64_t v52 = v26 & 0xFFFFFFE0;
            uint64_t v53 = v52;
            if ((v26 & 0x18) == 0) {
              goto LABEL_90;
            }
          }
          else
          {
            uint64_t v53 = 0;
          }
          int8x16_t v61 = (int16x8_t *)&v123[2 * v53 - 2];
          BOOL v62 = (int8x8_t *)&v123[v53 - 2];
          uint64_t v63 = v53 - (v26 & 0xFFFFFFF8);
          do
          {
            int16x8_t v64 = *v61++;
            *v62++ = vshrn_n_s16(v64, 8uLL);
            v63 += 8;
          }
          while (v63);
          uint64_t v52 = v26 & 0xFFFFFFF8;
          if (v113 != v26) {
            goto LABEL_90;
          }
        }
LABEL_91:
        int v65 = *a2;
        if (*(_DWORD *)(a1 + 1248) != 8)
        {
          unint64_t v81 = *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header;
          if (v118)
          {
            if ((v65 & 7) != 0) {
              sub_1002EFCC4(&v122, 0, (__int16 *)v5, 0, v81);
            }
            else {
              sub_1002EFB7C((const char *)&v122, 0, (char *)v5, 0, v81);
            }
          }
          else if ((v65 & 7) != 0)
          {
            sub_1002EF6E8((uint64_t)&v122, 0, (uint64_t)v5, 0, v81, 3, 2);
          }
          else
          {
            sub_1002EF498((uint64_t)&v122, 0, (unint64_t)v5, 0, v81, 2);
          }
          goto LABEL_50;
        }
        if (v118)
        {
          uint64_t v66 = *(int *)(a1 + 8);
          if ((v65 & 7) != 0)
          {
            if ((int)v66 >= 1)
            {
              int8x16_t v67 = &v123[2 * v66 - 2];
              int8x16_t v68 = v123;
              if (v67 > v123) {
                int8x16_t v68 = v67;
              }
              unint64_t v69 = (unint64_t)&v68[~(unint64_t)&v122];
              unint64_t v70 = &v122;
              uint64_t v71 = v5;
              if (v69 < 0x1E) {
                goto LABEL_106;
              }
              BOOL v72 = v5 >= (int *)&v123[v69 & 0xFFFFFFFFFFFFFFFELL] || &v122 >= (__int16 *)v5 + 3 * (v69 >> 1) + 3;
              unint64_t v70 = &v122;
              uint64_t v71 = v5;
              if (!v72) {
                goto LABEL_106;
              }
              uint64_t v73 = (v69 >> 1) + 1;
              unint64_t v70 = (__int16 *)&v123[2 * (v73 & 0xFFFFFFFFFFFFFFF0) - 2];
              uint64_t v71 = (int *)((char *)v5 + 6 * (v73 & 0xFFFFFFFFFFFFFFF0));
              unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFF0;
              int8x16x2_t v75 = (int16x8_t *)v124;
              int8x16x2_t v76 = (__int16 *)v5;
              do
              {
                v132.val[0] = v75[-1];
                v134.val[0] = *v75;
                v132.val[1] = v132.val[0];
                v132.val[2] = v132.val[0];
                v134.val[1] = *v75;
                v134.val[2] = *v75;
                uint64_t v77 = v76 + 48;
                vst3q_s16(v76, v132);
                uint64_t v78 = v76 + 24;
                vst3q_s16(v78, v134);
                v75 += 2;
                int8x16x2_t v76 = v77;
                v74 -= 16;
              }
              while (v74);
              if (v73 != (v73 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_106:
                uint64_t v79 = v71 + 1;
                do
                {
                  __int16 v80 = *v70++;
                  *uint64_t v79 = v80;
                  *(v79 - 1) = v80;
                  *(v79 - 2) = v80;
                  v79 += 3;
                }
                while (v70 < (__int16 *)v67);
              }
            }
            goto LABEL_50;
          }
          if ((int)v66 >= 1)
          {
            long long v82 = (__int16 *)&v123[v66 - 2];
            if (v82 <= (__int16 *)((char *)&v122 + 1)) {
              long long v83 = (__int16 *)((char *)&v122 + 1);
            }
            else {
              long long v83 = v82;
            }
            unint64_t v84 = (char *)v83 - (char *)&v122;
            uint64_t v85 = &v122;
            long long v86 = v5;
            if ((unint64_t)((char *)v83 - (char *)&v122) >= 8)
            {
              if (v5 >= (int *)v83
                || (v85 = &v122, long long v86 = v5, &v122 >= (__int16 *)((char *)v5 + 3 * (void)v83 + -3 * (void)&v122)))
              {
                if (v84 >= 0x20)
                {
                  unint64_t v87 = v84 & 0xFFFFFFFFFFFFFFE0;
                  unint64_t v88 = v84 & 0xFFFFFFFFFFFFFFE0;
                  int v89 = (int8x16_t *)v124;
                  int v90 = (char *)v5;
                  do
                  {
                    v133.val[0] = v89[-1];
                    v135.val[0] = *v89;
                    v133.val[1] = v133.val[0];
                    v133.val[2] = v133.val[0];
                    v135.val[1] = *v89;
                    v135.val[2] = *v89;
                    int v91 = v90 + 96;
                    vst3q_s8(v90, v133);
                    int v92 = v90 + 48;
                    vst3q_s8(v92, v135);
                    v89 += 2;
                    int v90 = v91;
                    v88 -= 32;
                  }
                  while (v88);
                  if (v84 == v87) {
                    goto LABEL_50;
                  }
                  if ((v84 & 0x18) != 0) {
                    goto LABEL_129;
                  }
                  long long v86 = (int *)((char *)v5 + 3 * v87);
                  uint64_t v85 = (__int16 *)&v123[v87 - 2];
                }
                else
                {
                  unint64_t v87 = 0;
LABEL_129:
                  uint64_t v85 = (__int16 *)&v123[(v84 & 0xFFFFFFFFFFFFFFF8) - 2];
                  long long v86 = (int *)((char *)v5 + 3 * (v84 & 0xFFFFFFFFFFFFFFF8));
                  long long v93 = (char *)v5 + 3 * v87;
                  uint64_t v94 = (int8x8_t *)&v123[v87 - 2];
                  unint64_t v95 = v87 - (v84 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    int8x8_t v96 = *v94++;
                    v131.val[0] = v96;
                    v131.val[1] = v96;
                    v131.val[2] = v96;
                    vst3_s8(v93, v131);
                    v93 += 24;
                    v95 += 8;
                  }
                  while (v95);
                  if (v84 == (v84 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_50;
                  }
                }
              }
            }
            char v97 = (char *)v86 + 2;
            do
            {
              char v98 = *(unsigned char *)v85;
              uint64_t v85 = (__int16 *)((char *)v85 + 1);
              *char v97 = v98;
              *(v97 - 1) = v98;
              *(v97 - 2) = v98;
              v97 += 3;
            }
            while (v85 < v82);
          }
        }
        else
        {
          memcpy(v5, &v122, ((0x88442211uLL >> (4 * (v65 & 7u))) & 0xF) * *(int *)(a1 + 8));
        }
LABEL_50:
        ++v29;
        __uint32_t v5 = (int *)((char *)v5 + *((void *)a2 + 10));
        if (v29 >= *(_DWORD *)(a1 + 12))
        {
          unsigned int v28 = v120;
          goto LABEL_138;
        }
      }
      sub_1002DCEE4((uint64_t)v8, (char *)&v122, v117);
      if (v116) {
        goto LABEL_91;
      }
      if (v26 < 8)
      {
        uint64_t v35 = 0;
LABEL_72:
        int v48 = &v123[2 * v35 - 1];
        uint64_t v49 = v26 - v35;
        do
        {
          char v50 = *(v48 - 1);
          *(v48 - 1) = *v48;
          *int v48 = v50;
          v48 += 2;
          --v49;
        }
        while (v49);
        goto LABEL_74;
      }
      if (v26 >= 0x20)
      {
        uint64_t v40 = v26 & 0xFFFFFFE0;
        uint64_t v41 = v125;
        do
        {
          int v42 = v41 - 32;
          int8x16x2_t v129 = vld2q_s8(v42);
          int8x16x2_t v130 = vld2q_s8(v41);
          int8x16_t v43 = v129.val[0];
          int8x16_t v44 = v130.val[0];
          vst2q_s8(v42, *(int8x16x2_t *)((char *)&v129 + 16));
          vst2q_s8(v41, *(int8x16x2_t *)((char *)&v130 + 16));
          v41 += 64;
          v40 -= 32;
        }
        while (v40);
        if (v115 == v26) {
          goto LABEL_74;
        }
        uint64_t v35 = v26 & 0xFFFFFFE0;
        uint64_t v39 = v35;
        if ((v26 & 0x18) == 0) {
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v39 = 0;
      }
      int v45 = &v123[2 * v39 - 2];
      uint64_t v46 = v39 - (v26 & 0xFFFFFFF8);
      do
      {
        int8x8x2_t v128 = vld2_s8(v45);
        int8x8_t v47 = v128.val[0];
        vst2_s8(v45, *(int8x8x2_t *)((char *)&v128 + 8));
        v45 += 16;
        v46 += 8;
      }
      while (v46);
      uint64_t v35 = v26 & 0xFFFFFFF8;
      if (v113 == v26) {
        goto LABEL_74;
      }
      goto LABEL_72;
    }
LABEL_138:
    if (v28 != &v122 && v28 != 0) {
LABEL_191:
    }
      operator delete[]();
  }
  return 1;
}

void sub_1002E8E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (a2 == 2) {
      __cxa_rethrow();
    }
    int v29 = sub_10026AA20(&std::cerr, (uint64_t)"PXM::readData(): unknown exception", 34);
    sub_10026B4C0(v29);
    std::ostream::flush();
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E8FF0()
{
}

void sub_1002E8FFC()
{
}

void sub_1002E9020(uint64_t *a1, char *__s, int a3)
{
}

uint64_t sub_1002E904C(uint64_t a1)
{
  sub_1002DE314(a1);
  *uint64_t v2 = off_100497A68;
  uint64_t v3 = v2 + 1;
  sub_1002D1A1C(v2 + 1);
  qmemcpy((void *)sub_1002D19D8(v3, 53), "Portable image format (*.pbm;*.pgm;*.ppm;*.pxm;*.pnm)", 53);
  *(unsigned char *)(a1 + 48) = 1;
  return a1;
}

void sub_1002E90D8(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_100496B28;
  sub_1002D1A1C(v1 + 7);
  sub_1002D1A1C(v1 + 3);
  sub_1002D1A1C(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002E9124(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);
  return a1;
}

void sub_1002E9184(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);

  operator delete();
}

void sub_1002E9204()
{
}

void sub_1002E92C8()
{
}

BOOL sub_1002E92EC(uint64_t a1, int a2)
{
  return (a2 & 0xFFFFFFFD) == 0;
}

uint64_t sub_1002E92F8(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3 = a2;
  unsigned int v6 = *a2;
  int v5 = a2[1];
  int v7 = (*a2 >> 3) & 0x1FF;
  if (v7) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 1;
  }
  if (v5 >= 1)
  {
    uint64_t v9 = *(void *)(*((void *)a2 + 9) + 8 * (v5 - 1));
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    uint64_t v12 = v11 - *a3;
    if (v11 != *a3) {
      goto LABEL_6;
    }
LABEL_11:
    BOOL v94 = 1;
    goto LABEL_12;
  }
  LODWORD(v9) = 0;
  uint64_t v10 = *a3;
  uint64_t v15 = a3[1];
  uint64_t v12 = v15 - *a3;
  if (v15 == *a3) {
    goto LABEL_11;
  }
LABEL_6:
  unint64_t v13 = 0;
  unint64_t v14 = v12 >> 2;
  BOOL v94 = 1;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v13) == 32) {
      BOOL v94 = *(_DWORD *)(v10 + 4 * v13 + 4) != 0;
    }
    v13 += 2;
  }
  while (v13 < v14);
LABEL_12:
  uint64_t v16 = a2[3];
  uint64_t v92 = a2[2];
  sub_1002DD250((uint64_t)v95);
  int v91 = v16 * v9;
  v95[0] = off_1004969C0;
  uint64_t v17 = *(void *)(a1 + 40);
  if (v17)
  {
    BOOL v18 = v94;
    if (sub_1002DD724((uint64_t)v95, v17))
    {
      uint64_t v19 = *(void *)(a1 + 40);
      int v20 = v91;
      if (!v94)
      {
        switch(*v3 & 7 | (8 * v8))
        {
          case 8u:
            int v21 = 4;
            break;
          case 0x18u:
            int v21 = 14;
            break;
          case 0xAu:
            int v21 = 6;
            break;
          default:
            int v21 = 20;
            break;
        }
        int v20 = (v21 * v16) | 1;
      }
      uint64_t v22 = v16;
      size_t v24 = (v20 * (int)v92 + 511) & 0xFFFFFFFFFFFFFF00;
      int v25 = *(unsigned char **)v19;
      if (*(void *)(v19 + 16) - *(void *)v19 >= v24) {
        goto LABEL_47;
      }
      if (v20 * (int)v92 + 511 < 0) {
        sub_10000B98C();
      }
      uint64_t v26 = *(unsigned char **)(v19 + 8);
      unint64_t v27 = operator new(v24);
      unint64_t v28 = v26 - v25;
      int v29 = &v27[v26 - v25];
      int v30 = v29;
      if (v26 == v25) {
        goto LABEL_45;
      }
      if (v28 < 8)
      {
        BOOL v31 = &v27[v26 - v25];
        goto LABEL_42;
      }
      BOOL v31 = &v27[v26 - v25];
      if ((unint64_t)(v25 - v27) >= 0x20)
      {
        if (v28 < 0x20)
        {
          unint64_t v32 = 0;
          goto LABEL_37;
        }
        unint64_t v32 = v28 & 0xFFFFFFFFFFFFFFE0;
        char v33 = (long long *)(v26 - 16);
        BOOL v34 = &v27[v26 - 16 - v25];
        unint64_t v35 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          _OWORD *v34 = v36;
          v34 -= 2;
          v33 -= 2;
          v35 -= 32;
        }
        while (v35);
        if (v28 == v32) {
          goto LABEL_44;
        }
        if ((v28 & 0x18) != 0)
        {
LABEL_37:
          BOOL v31 = &v29[-(v28 & 0xFFFFFFFFFFFFFFF8)];
          unsigned int v37 = &v26[-v32 - 8];
          int64_t v38 = v37 - v25;
          unint64_t v39 = v32 - (v28 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v40 = *(void *)v37;
            v37 -= 8;
            *(void *)&v27[v38] = v40;
            v38 -= 8;
            v39 += 8;
          }
          while (v39);
          v26 -= v28 & 0xFFFFFFFFFFFFFFF8;
          if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_44;
          }
          goto LABEL_42;
        }
        BOOL v31 = &v29[-v32];
        v26 -= v32;
      }
LABEL_42:
      uint64_t v41 = v31 - 1;
      do
      {
        char v42 = *--v26;
        *v41-- = v42;
      }
      while (v26 != v25);
LABEL_44:
      int v30 = v27;
LABEL_45:
      *(void *)uint64_t v19 = v30;
      *(void *)(v19 + 8) = v29;
      *(void *)(v19 + 16) = &v27[v24];
      BOOL v18 = v94;
      if (v25) {
        operator delete(v25);
      }
      goto LABEL_47;
    }
LABEL_19:
    uint64_t v23 = 0;
    goto LABEL_131;
  }
  BOOL v18 = v94;
  uint64_t v22 = v16;
  if (!sub_1002DD670((uint64_t)v95, (const char **)(a1 + 24))) {
    goto LABEL_19;
  }
LABEL_47:
  if (v18)
  {
    unsigned int v43 = v3[1];
    BOOL v44 = __OFSUB__(v43, 1);
    int v45 = v43 - 1;
    if (v45 < 0 != v44) {
      LODWORD(v46) = 0;
    }
    else {
      uint64_t v46 = *(void *)(*((void *)v3 + 9) + 8 * v45);
    }
    int v47 = v22 * v46;
  }
  else
  {
    int v47 = (6 * v8 + 2 * (v7 != 0)) * v22 + 32;
  }
  if (v47 <= 128) {
    uint64_t v48 = 128;
  }
  else {
    uint64_t v48 = v47;
  }
  int8x8_t v96 = v98;
  uint64_t v97 = v48;
  if (v48 >= 0x409) {
    operator new[]();
  }
  unsigned int v93 = (0x88442211 >> (4 * (v6 & 7))) & 0xF;
  if (v7) {
    int v49 = 51;
  }
  else {
    int v49 = 50;
  }
  if (v18) {
    int v50 = 3;
  }
  else {
    int v50 = 0;
  }
  uint64_t v88 = v22;
  sprintf((char *)v98, "P%c\n# Generated by OpenCV %s\n%d %d\n%d\n", (v50 + v49), "3.4.0", v22, v92, ~(-1 << (8 * v93)));
  int v51 = strlen((const char *)v98);
  sub_1002DD9A4(v95, (char *)v98, v51);
  if ((int)v92 >= 1)
  {
    uint64_t v52 = v92;
    uint64_t v53 = 0;
    int v54 = v8 * v88;
    unint64_t v87 = v88 | (unint64_t)&_mh_execute_header;
    if (v7) {
      BOOL v55 = 1;
    }
    else {
      BOOL v55 = v93 > 1;
    }
    int v56 = v55;
    int v89 = v56;
    BOOL v58 = v93 != 2 || v54 < 1;
    BOOL v84 = v58;
    uint64_t v59 = 2;
    if (2 * v54 > 2) {
      uint64_t v59 = 2 * v54;
    }
    unint64_t v85 = v59;
    unint64_t v83 = ((unint64_t)(v59 - 1) >> 1) + 1;
    long long v86 = v3;
    int v90 = v7;
    do
    {
      int8x16_t v61 = (const char *)(*((void *)v3 + 2) + **((void **)v3 + 9) * v53);
      if (v18)
      {
        if (v7 == 2)
        {
          if (v93 == 1)
          {
            sub_1002EFB7C(v61, 0, (char *)v98, 0, v87);
          }
          else
          {
            sub_1002EFCC4((const __int16 *)v61, 0, v98, 0, v87);
            if (!v84) {
              goto LABEL_101;
            }
          }
LABEL_81:
          if (v89) {
            int8x16_t v60 = (char *)v98;
          }
          else {
            int8x16_t v60 = (char *)v61;
          }
          sub_1002DD9A4(v95, v60, v91);
          goto LABEL_85;
        }
        if (v93 != 2) {
          goto LABEL_81;
        }
        if (!v7) {
          memcpy(v98, v61, v91);
        }
        if (v54 < 1) {
          goto LABEL_81;
        }
LABEL_101:
        if (v85 < 0xF)
        {
          uint64_t v64 = 0;
          goto LABEL_125;
        }
        if (v85 < 0x3F)
        {
          uint64_t v71 = 0;
          goto LABEL_122;
        }
        uint64_t v72 = v83 & 0x7FFFFFFFFFFFFFE0;
        uint64_t v73 = (char *)&v99;
        do
        {
          unint64_t v74 = v73 - 32;
          int8x16x2_t v101 = vld2q_s8(v74);
          int8x16x2_t v102 = vld2q_s8(v73);
          int8x16_t v75 = v101.val[0];
          int8x16_t v76 = v102.val[0];
          vst2q_s8(v74, *(int8x16x2_t *)((char *)&v101 + 16));
          vst2q_s8(v73, *(int8x16x2_t *)((char *)&v102 + 16));
          v73 += 64;
          v72 -= 32;
        }
        while (v72);
        if (v83 == (v83 & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_81;
        }
        uint64_t v71 = v83 & 0x7FFFFFFFFFFFFFE0;
        uint64_t v64 = v83 & 0x7FFFFFFFFFFFFFE0;
        if ((v83 & 0x18) != 0)
        {
LABEL_122:
          uint64_t v77 = (char *)&v98[v71];
          unint64_t v78 = v71 - (v83 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            int8x8x2_t v100 = vld2_s8(v77);
            int8x8_t v79 = v100.val[0];
            vst2_s8(v77, *(int8x8x2_t *)((char *)&v100 + 8));
            v77 += 16;
            v78 += 8;
          }
          while (v78);
          uint64_t v64 = v83 & 0x7FFFFFFFFFFFFFF8;
          if (v83 == (v83 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_81;
          }
        }
        do
        {
LABEL_125:
          __int16 v80 = &v98[v64];
          char v81 = v98[v64];
          *(unsigned char *)__int16 v80 = HIBYTE(v98[v64]);
          *((unsigned char *)v80 + 1) = v81;
          ++v64;
        }
        while (v64 < v54);
        goto LABEL_81;
      }
      if (!v7)
      {
        BOOL v62 = v98;
        if (v93 == 1)
        {
          if ((int)v88 >= 1)
          {
            uint64_t v65 = v88;
            BOOL v62 = v98;
            do
            {
              int v66 = *(unsigned __int8 *)v61++;
              sprintf((char *)v62, "% 4d", v66);
              v62 += 2;
              --v65;
            }
            while (v65);
          }
        }
        else if ((int)v88 >= 1)
        {
          uint64_t v69 = v88;
          BOOL v62 = v98;
          do
          {
            int v70 = *(unsigned __int16 *)v61;
            v61 += 2;
            sprintf((char *)v62, "% 6d", v70);
            v62 += 3;
            --v69;
          }
          while (v69);
        }
        goto LABEL_115;
      }
      BOOL v62 = v98;
      if (v93 == 1)
      {
        if (v54 >= 1)
        {
          uint64_t v63 = 0;
          BOOL v62 = v98;
          do
          {
            sprintf((char *)v62, "% 4d", v61[v63 + 2]);
            sprintf((char *)v62 + 4, "% 4d", v61[v63 + 1]);
            sprintf((char *)v62 + 8, "% 4d", v61[v63]);
            v62[6] = 8224;
            v62 += 7;
            v63 += v8;
          }
          while (v54 > (int)v63);
LABEL_111:
          uint64_t v3 = v86;
          BOOL v18 = v94;
        }
      }
      else if (v54 >= 1)
      {
        uint64_t v67 = 0;
        BOOL v62 = v98;
        do
        {
          int8x16_t v68 = (unsigned __int16 *)&v61[2 * v67];
          sprintf((char *)v62, "% 6d", v68[2]);
          sprintf((char *)v62 + 6, "% 6d", v68[1]);
          sprintf((char *)v62 + 12, "% 6d", *v68);
          v62[9] = 8224;
          v62 += 10;
          v67 += v8;
        }
        while (v54 > (int)v67);
        goto LABEL_111;
      }
LABEL_115:
      *(unsigned char *)BOOL v62 = 10;
      sub_1002DD9A4(v95, (char *)v98, v62 - v98 + 1);
      int v7 = v90;
      uint64_t v52 = v92;
LABEL_85:
      ++v53;
    }
    while (v53 != v52);
  }
  sub_1002DD7B0((uint64_t)v95);
  if (v96 != v98 && v96) {
    operator delete[]();
  }
  uint64_t v23 = 1;
LABEL_131:
  sub_1002DD85C((uint64_t)v95);
  return v23;
}

void sub_1002E9B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_1002E9B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_1002E9B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a44 != a21 && a44 != 0) {
    operator delete[]();
  }
  sub_1002DD85C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_1002E9BC0()
{
}

uint64_t sub_1002E9BD4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_1002E9C58()
{
}

uint64_t sub_1002E9C6C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1002E9CEC(uint64_t a1)
{
  sub_1002DDFA8(a1);
  *uint64_t v2 = off_100497B70;
  sub_1002DC53C((uint64_t)(v2 + 20));
  *(void *)(a1 + 160) = off_100496948;
  *(_DWORD *)(a1 + 1252) = -1;
  sub_1002D1A1C((uint64_t *)(a1 + 40));
  *(_DWORD *)sub_1002D19D8((void *)(a1 + 40), 4) = -1788172711;
  *(_DWORD *)(a1 + 1248) = 0;
  *(void *)(a1 + 1256) = 1;
  *(_DWORD *)(a1 + 1264) = 0;
  return a1;
}

void sub_1002E9DA0(_Unwind_Exception *a1)
{
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

void sub_1002E9DB4(_Unwind_Exception *a1)
{
  sub_1002DCFC4(v2);
  sub_1002DE670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E9DD4(void *a1)
{
  *a1 = off_100497B70;
  sub_1002DCFC4((uint64_t)(a1 + 20));

  return sub_1002DE670((uint64_t)a1);
}

void sub_1002E9E28(void *a1)
{
  *a1 = off_100497B70;
  sub_1002DCFC4((uint64_t)(a1 + 20));
  sub_1002DE670((uint64_t)a1);

  operator delete();
}

void sub_1002E9E90()
{
}

void sub_1002E9F54()
{
}

FILE *sub_1002E9F78(int8x8_t *a1)
{
  uint64_t v2 = a1 + 20;
  uint64_t result = sub_1002DC998((uint64_t)&a1[20], (const char **)&a1[3]);
  if (result)
  {
    sub_1002DCCB8((uint64_t)v2, 4);
    a1[1].i32[0] = sub_1002DD1D4(v2);
    a1[1].i32[1] = sub_1002DD1D4(v2);
    __int32 v4 = sub_1002DD1D4(v2);
    char v5 = v4;
    a1[156].i32[0] = v4;
    sub_1002DCCB8((uint64_t)v2, 4);
    a1[157].i32[0] = sub_1002DD1D4(v2);
    a1[157].i32[1] = sub_1002DD1D4(v2);
    int v6 = sub_1002DD1D4(v2);
    int v7 = v6;
    a1[158].i32[0] = v6;
    if (a1[1].i32[0] < 1) {
      goto LABEL_39;
    }
    if (a1[1].i32[1] < 1) {
      goto LABEL_39;
    }
    unsigned int v8 = a1[156].u32[0];
    if (v8 > 0x20) {
      goto LABEL_39;
    }
    if (((1 << v8) & 0x101000102) == 0) {
      goto LABEL_39;
    }
    if (a1[157].i32[0] >= 2u)
    {
      __int32 v9 = a1[2].i32[0];
      if (v9 != 3 && (v9 != 2 || v8 != 8)) {
        goto LABEL_39;
      }
    }
    __int32 v10 = a1[157].i32[1];
    if (v10 != 1)
    {
      if (!v10 && !v6)
      {
        bzero(&a1[28], 0x400uLL);
        a1[2].i32[0] = 16 * (v8 > 8);
        if (v8 <= 8) {
          sub_1002F0ED8(a1 + 28, v8, 0, v11, v12);
        }
        __int32 v13 = sub_1002DC97C(v2);
LABEL_38:
        a1[156].i32[1] = v13;
        return (FILE *)1;
      }
      goto LABEL_39;
    }
    if (v6 > 3 << v5
      || v6 < 1
      || v8 > 8
      || (bzero(&a1[28], 0x400uLL), unsigned int v14 = sub_1002DCEE4((uint64_t)v2, __dst, v7), v14 != a1[158].i32[0]))
    {
LABEL_39:
      a1[156].i32[1] = -1;
      a1[1] = (int8x8_t)-1;
      sub_1002DCC18((uint64_t)v2);
      return 0;
    }
    if ((int)v14 >= 3)
    {
      unint64_t v15 = v14 / 3uLL;
      if (v14 < 0x18)
      {
        unint64_t v16 = 0;
        goto LABEL_32;
      }
      if (v14 >= 0x30)
      {
        unint64_t v16 = v15 & 0x7FFFFFF0;
        uint64_t v17 = (char *)&a1[28];
        BOOL v18 = __dst;
        long long v19 = 0uLL;
        unint64_t v20 = v16;
        do
        {
          long long v21 = *(_OWORD *)&v18[2 * v15];
          long long v22 = *(_OWORD *)&v18[v15];
          long long v23 = *(_OWORD *)v18;
          v18 += 16;
          long long v24 = v23;
          vst4q_s8(v17, *(int8x16x4_t *)(&v19 - 3));
          v17 += 64;
          v20 -= 16;
        }
        while (v20);
        if (v16 == v15) {
          goto LABEL_34;
        }
        if ((v15 & 8) == 0)
        {
LABEL_32:
          uint64_t v34 = (uint64_t)&a1[28] + 4 * v16 + 3;
          do
          {
            *(unsigned char *)(v34 - 3) = __dst[2 * v15 + v16];
            unsigned __int8 v35 = __dst[v16];
            *(unsigned char *)(v34 - 2) = __dst[v15 + v16];
            *(_WORD *)(v34 - 1) = v35;
            v34 += 4;
            ++v16;
          }
          while (v15 != v16);
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v16 = 0;
      }
      unint64_t v25 = v16;
      unint64_t v16 = v15 & 0x7FFFFFF8;
      uint64_t v26 = (char *)&a1[28] + 4 * v25;
      unint64_t v27 = &__dst[v25];
      unint64_t v28 = v25 - v16;
      uint64_t v29 = 0;
      do
      {
        uint64_t v30 = *(void *)&v27[2 * v15];
        uint64_t v31 = *(void *)&v27[v15];
        uint64_t v32 = *(void *)v27;
        v27 += 8;
        uint64_t v33 = v32;
        vst4_s8(v26, *(int8x8x4_t *)(&v29 - 3));
        v26 += 32;
        v28 += 8;
      }
      while (v28);
      if (v16 != v15) {
        goto LABEL_32;
      }
    }
LABEL_34:
    if (sub_1002F0F98((unsigned __int8 *)&a1[28], a1[156].i32[0])) {
      int v36 = 16;
    }
    else {
      int v36 = 0;
    }
    a1[2].i32[0] = v36;
    __int32 v13 = sub_1002DC97C(v2);
    goto LABEL_38;
  }
  return result;
}

uint64_t sub_1002EA2C4(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = (int *)*((void *)a2 + 2);
  uint64_t v51 = *((void *)a2 + 10);
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 1248) * v4;
  int v7 = v5 + 7;
  BOOL v6 = v5 < -7;
  int v8 = v5 + 14;
  if (v6) {
    int v9 = v8;
  }
  else {
    int v9 = v7;
  }
  int v52 = *a2 & 0xFF8;
  memset(v63, 0, sizeof(v63));
  if ((v2 & 0xFF8) != 0) {
    int v10 = 3;
  }
  else {
    int v10 = 1;
  }
  if ((*(_DWORD *)(a1 + 1252) & 0x80000000) != 0) {
    return 0;
  }
  int8x16_t v12 = (void *)(a1 + 160);
  if (!sub_1002DC4D0(a1 + 160)) {
    return 0;
  }
  unsigned int v13 = ((v9 >> 3) + 1) & 0xFFFFFFFE;
  int v54 = 0;
  BOOL v58 = v60;
  uint64_t v59 = (int)(v13 + 32);
  if (v13 + 32 >= 0x409) {
    operator new[]();
  }
  uint64_t v14 = 3 * *(int *)(a1 + 8) + 32;
  unint64_t v15 = (unint64_t)v57;
  BOOL v55 = v57;
  uint64_t v56 = v14;
  if (v14 >= 0x409) {
    operator new[]();
  }
  if (!v52 && *(_DWORD *)(a1 + 1260) == 1) {
    sub_1002F0CF4((const char *)(a1 + 224), (unint64_t)v63, 1 << *(_DWORD *)(a1 + 1248));
  }
  sub_1002DC950((uint64_t)v12, *(_DWORD *)(a1 + 1252));
  uint64_t v16 = 0;
  uint64_t v50 = a1;
  switch(*(_DWORD *)(a1 + 1248))
  {
    case 1:
      if (*(_DWORD *)(a1 + 16) == 2)
      {
        int v17 = *(_DWORD *)(a1 + 8);
        int v18 = v17 + 7;
        BOOL v6 = v17 < -7;
        int v19 = v17 + 14;
        if (!v6) {
          int v19 = v18;
        }
        unint64_t v20 = &v60[v19 >> 3];
        int v54 = 0;
        uint64_t v49 = a1 + 224;
        while (1)
        {
          unsigned int v37 = v60;
          int64_t v38 = v60;
          do
          {
            int64_t v39 = v20 - v37;
            if ((int)v20 - (int)v37 <= 1) {
              uint64_t v40 = 1;
            }
            else {
              uint64_t v40 = v39;
            }
            uint64_t v41 = v40;
            while (1)
            {
              int v42 = sub_1002DCE08(v12);
              unsigned __int8 v43 = v42;
              if (v42 == 128)
              {
                int v44 = sub_1002DCE08(v12);
                int v45 = v44;
                if (v44) {
                  break;
                }
              }
              *v38++ = v43;
              --v39;
              if (!--v41)
              {
                int64_t v38 = &v37[v40];
                goto LABEL_59;
              }
            }
            if (v44 >= 1)
            {
              int v46 = sub_1002DCE08(v12);
              int64_t v47 = (v45 + 1);
              if (v39 < v47) {
                goto LABEL_97;
              }
              memset(v38, v46, (v45 + 1));
              v38 += v47;
            }
LABEL_59:
            unsigned int v37 = v38;
          }
          while (v38 < v20);
          int v48 = *(_DWORD *)(v50 + 8);
          if (v52) {
            sub_1002F172C(v3, (char *)v60, v48, v49);
          }
          else {
            sub_1002F1830(v3, (char *)v60, v48, (unsigned __int8 *)v63);
          }
          uint64_t v3 = (int *)((char *)v3 + v51);
          ++v54;
          uint64_t v16 = 1;
          if (v54 >= *(_DWORD *)(v50 + 12)) {
            goto LABEL_84;
          }
        }
      }
      int v54 = 0;
      if (*(int *)(a1 + 12) < 1) {
        goto LABEL_83;
      }
      if (v52)
      {
        do
        {
          sub_1002DCEE4((uint64_t)v12, (char *)v60, v13);
          sub_1002F172C(v3, (char *)v60, *(_DWORD *)(a1 + 8), a1 + 224);
          ++v54;
          uint64_t v3 = (int *)((char *)v3 + v51);
        }
        while (v54 < *(_DWORD *)(a1 + 12));
        goto LABEL_83;
      }
      uint64_t v16 = 1;
      do
      {
        sub_1002DCEE4((uint64_t)v12, (char *)v60, v13);
        sub_1002F1830(v3, (char *)v60, *(_DWORD *)(a1 + 8), (unsigned __int8 *)v63);
        ++v54;
        uint64_t v3 = (int *)((char *)v3 + v51);
      }
      while (v54 < *(_DWORD *)(a1 + 12));
      goto LABEL_84;
    case 8:
      if (*(_DWORD *)(a1 + 16) == 2)
      {
        uint64_t v22 = v4 * (uint64_t)v10;
        LODWORD(v23) = v3 + v22;
        uint64_t v53 = (int *)((char *)v3 + v22);
        int v54 = 0;
        uint64_t v24 = a1 + 224;
        while (1)
        {
          int v25 = v23 - v3;
          uint64_t v26 = v60;
          do
          {
            int v28 = sub_1002DCE08(v12);
            unsigned __int8 v29 = v28;
            if (v28 == 128)
            {
              int v30 = sub_1002DCE08(v12);
              if (v30)
              {
                int v31 = v26 - v60;
                if (v31 < 1) {
                  goto LABEL_33;
                }
LABEL_30:
                uint64_t v32 = v50;
                if (v52) {
                  sub_1002F15B4((uint64_t)v3, v60, v31, v24);
                }
                else {
                  sub_1002F1604(v3, v60, v31, (uint64_t)v63);
                }
                uint64_t v3 = (int *)((char *)v3 + v10 * (uint64_t)v31);
                if (v30 < 1) {
                  goto LABEL_41;
                }
LABEL_37:
                int v33 = sub_1002DCE08(v12);
                int v34 = v10 + v10 * v30;
                int v35 = sub_1002EF3F8(v51);
                if (v52)
                {
                  unint64_t v15 = v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v32 + 4 * v33 + 224);
                  unint64_t v36 = sub_1002F100C(v3, (unint64_t *)&v53, v35, v22, &v54, *(_DWORD *)(v32 + 12), v34, v15);
                }
                else
                {
                  unint64_t v36 = sub_1002F14E4((unint64_t)v3, (unint64_t *)&v53, v35, v22, &v54, *(_DWORD *)(v32 + 12), v34, *((unsigned __int8 *)v63 + v33));
                }
                uint64_t v3 = (int *)v36;
                if (v54 >= *(_DWORD *)(v32 + 12)) {
                  goto LABEL_83;
                }
                goto LABEL_41;
              }
            }
            *v26++ = v29;
            BOOL v27 = __OFSUB__(v25, v10);
            v25 -= v10;
          }
          while (!((v25 < 0) ^ v27 | (v25 == 0)));
          int v30 = 0;
          int v31 = v26 - v60;
          if (v31 >= 1) {
            goto LABEL_30;
          }
LABEL_33:
          uint64_t v32 = v50;
          if (v30 >= 1) {
            goto LABEL_37;
          }
LABEL_41:
          LODWORD(v23) = v53;
          if (v3 == v53)
          {
            if (sub_1002DCE08(v12))
            {
LABEL_97:
              uint64_t v16 = 0;
              goto LABEL_84;
            }
            unint64_t v23 = (unint64_t)v53 + v51;
            uint64_t v53 = (int *)v23;
            uint64_t v3 = (int *)(v23 - v22);
            if (++v54 >= *(_DWORD *)(v32 + 12)) {
              goto LABEL_83;
            }
          }
        }
      }
      int v54 = 0;
      if (*(int *)(a1 + 12) < 1) {
        goto LABEL_83;
      }
      if (v52)
      {
        do
        {
          sub_1002DCEE4((uint64_t)v12, (char *)v60, v13);
          sub_1002F15B4((uint64_t)v3, v60, *(_DWORD *)(a1 + 8), a1 + 224);
          ++v54;
          uint64_t v3 = (int *)((char *)v3 + v51);
        }
        while (v54 < *(_DWORD *)(a1 + 12));
        goto LABEL_83;
      }
      uint64_t v16 = 1;
      do
      {
        sub_1002DCEE4((uint64_t)v12, (char *)v60, v13);
        sub_1002F1604(v3, v60, *(_DWORD *)(a1 + 8), (uint64_t)v63);
        ++v54;
        uint64_t v3 = (int *)((char *)v3 + v51);
      }
      while (v54 < *(_DWORD *)(a1 + 12));
LABEL_84:
      if (v55 != v57)
      {
        if (v55) {
          operator delete[]();
        }
        BOOL v55 = v57;
      }
      if (v58 != v60 && v58) {
        operator delete[]();
      }
      return result;
    case 0x18:
      int v54 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        if (v52)
        {
          do
          {
            sub_1002DCEE4((uint64_t)v12, (char *)v3, v13);
            if (*(_DWORD *)(a1 + 16) == 3) {
              sub_1002EFB7C((const char *)v3, 0, (char *)v3, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header);
            }
            ++v54;
            uint64_t v3 = (int *)((char *)v3 + v51);
          }
          while (v54 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          do
          {
            sub_1002DCEE4((uint64_t)v12, v57, v13);
            sub_1002EF498((uint64_t)v57, 0, (unint64_t)v3, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 2 * (*(_DWORD *)(a1 + 16) == 3));
            ++v54;
            uint64_t v3 = (int *)((char *)v3 + v51);
          }
          while (v54 < *(_DWORD *)(a1 + 12));
        }
      }
      goto LABEL_83;
    case 0x20:
      int v54 = 0;
      if (*(int *)(a1 + 12) >= 1)
      {
        if (v52)
        {
          do
          {
            sub_1002DCEE4((uint64_t)v12, &v61, v13);
            sub_1002EF9D4((uint64_t)v62, 0, (char *)v3, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 2 * (*(_DWORD *)(a1 + 16) == 3));
            ++v54;
            uint64_t v3 = (int *)((char *)v3 + v51);
          }
          while (v54 < *(_DWORD *)(a1 + 12));
        }
        else
        {
          do
          {
            sub_1002DCEE4((uint64_t)v12, &v61, v13);
            sub_1002EF780((uint64_t)v62, 0, (unint64_t)v3, 0, *(unsigned int *)(a1 + 8) | (unint64_t)&_mh_execute_header, 2 * (*(_DWORD *)(a1 + 16) == 3));
            ++v54;
            uint64_t v3 = (int *)((char *)v3 + v51);
          }
          while (v54 < *(_DWORD *)(a1 + 12));
        }
      }
LABEL_83:
      uint64_t v16 = 1;
      goto LABEL_84;
    default:
      goto LABEL_84;
  }
}

void sub_1002EABD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19 != a11)
  {
    if (a19) {
      operator delete[]();
    }
  }
  JUMPOUT(0x1002EAB50);
}

uint64_t sub_1002EAC88(uint64_t a1)
{
  sub_1002DE314(a1);
  *int v2 = off_100497BE0;
  uint64_t v3 = v2 + 1;
  sub_1002D1A1C(v2 + 1);
  qmemcpy((void *)sub_1002D19D8(v3, 29), "Sun raster files (*.sr;*.ras)", 29);
  return a1;
}

void sub_1002EAD04(_Unwind_Exception *a1)
{
  *uint64_t v1 = off_100496B28;
  sub_1002D1A1C(v1 + 7);
  sub_1002D1A1C(v1 + 3);
  sub_1002D1A1C(v2);
  _Unwind_Resume(a1);
}

void sub_1002EAD50()
{
}

void sub_1002EAE14()
{
}

uint64_t *sub_1002EAE38(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);
  return a1;
}

void sub_1002EAE98(uint64_t *a1)
{
  *a1 = (uint64_t)off_100496B28;
  sub_1002D1A1C(a1 + 7);
  sub_1002D1A1C(a1 + 3);
  sub_1002D1A1C(a1 + 1);

  operator delete();
}

BOOL sub_1002EAF18(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = a2[2];
  unsigned int v5 = a2[3];
  unsigned int v6 = *a2;
  sub_1002DD250((uint64_t)v12);
  v12[0] = off_100496A28;
  BOOL v7 = sub_1002DD670((uint64_t)v12, (const char **)(a1 + 24));
  if (v7)
  {
    sub_1002DD9A4(v12, "Y\xA6j\x95", 4);
    sub_1002DDDF4(v12, v5);
    sub_1002DDDF4(v12, v4);
    int v8 = ((v6 >> 3) & 0x1FF) + 1;
    sub_1002DDDF4(v12, 8 * v8);
    unsigned int v9 = (v8 * v5 + 1) & 0xFFFFFFFE;
    sub_1002DDDF4(v12, v9 * v4);
    sub_1002DDDF4(v12, 1u);
    sub_1002DDDF4(v12, 0);
    sub_1002DDDF4(v12, 0);
    if ((int)v4 >= 1)
    {
      for (uint64_t i = 0; i != v4; ++i)
        sub_1002DD9A4(v12, (char *)(*((void *)a2 + 2) + **((void **)a2 + 9) * i), v9);
    }
    sub_1002DD7B0((uint64_t)v12);
  }
  sub_1002DDCAC((uint64_t)v12);
  return v7;
}

void sub_1002EB05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002EB070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002EB088()
{
}

uint64_t sub_1002EB09C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_1002EB120()
{
}

uint64_t sub_1002EB134(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

UIImage *sub_1002EB1B4(uint64_t a1)
{
  uint64_t v2 = +[NSData dataWithBytes:*(void *)(a1 + 16) length:**(void **)(a1 + 72) * *(int *)(a1 + 8)];
  int v3 = *(_DWORD *)(a1 + 4);
  BOOL v4 = __OFSUB__(v3, 1);
  int v5 = v3 - 1;
  if (v5 < 0 != v4 || *(void *)(*(void *)(a1 + 72) + 8 * v5) != 1) {
    CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
  }
  else {
    CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceGray();
  }
  BOOL v7 = DeviceRGB;
  int v8 = CGDataProviderCreateWithCFData((CFDataRef)v2);
  int v9 = *(_DWORD *)(a1 + 4);
  int v10 = *(size_t **)(a1 + 72);
  BOOL v4 = __OFSUB__(v9, 1);
  int v11 = v9 - 1;
  if (v11 < 0 != v4) {
    size_t v12 = 0;
  }
  else {
    size_t v12 = 8 * v10[v11];
  }
  if ((*(_DWORD *)a1 & 0xFF8) == 0x18) {
    CGBitmapInfo v13 = 3;
  }
  else {
    CGBitmapInfo v13 = 0;
  }
  uint64_t v14 = CGImageCreate(*(int *)(a1 + 12), *(int *)(a1 + 8), (0x442211088uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0x78, v12, *v10, v7, v13, v8, 0, 0, kCGRenderingIntentDefault);
  unint64_t v15 = +[UIImage imageWithCGImage:v14];
  CGImageRelease(v14);
  CGDataProviderRelease(v8);
  CGColorSpaceRelease(v7);
  return v15;
}

void sub_1002EB2DC(void *a1, uint64_t a2, int a3)
{
  ColorSpace = CGImageGetColorSpace((CGImageRef)[a1 CGImage]);
  size_t Width = CGImageGetWidth((CGImageRef)[a1 CGImage]);
  size_t Height = CGImageGetHeight((CGImageRef)[a1 CGImage]);
  CGColorSpaceModel Model = CGColorSpaceGetModel(ColorSpace);
  BOOL v12 = *(int *)(a2 + 4) < 3 && *(_DWORD *)(a2 + 8) == Height && *(_DWORD *)(a2 + 12) == Width;
  if (Model == kCGColorSpaceModelMonochrome)
  {
    if (v12 && (*(_WORD *)a2 & 0xFFF) == 0 && *(void *)(a2 + 16))
    {
      if (!a3)
      {
LABEL_23:
        uint32_t v13 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      *(void *)&long long v16 = __PAIR64__(Width, Height);
      sub_100292534((char *)a2, 2, (uint64_t *)&v16, 0);
      if (!a3) {
        goto LABEL_23;
      }
    }
    long long v16 = 0u;
    long long v17 = 0u;
    sub_100255390(a2, (uint64_t)&v16);
    goto LABEL_23;
  }
  if (!v12 || (*(_DWORD *)a2 & 0xFFF) != 0x18 || !*(void *)(a2 + 16))
  {
    *(void *)&long long v16 = __PAIR64__(Width, Height);
    sub_100292534((char *)a2, 2, (uint64_t *)&v16, 24);
    if (a3) {
      goto LABEL_15;
    }
LABEL_17:
    uint32_t v13 = 5;
    goto LABEL_24;
  }
  if (!a3) {
    goto LABEL_17;
  }
LABEL_15:
  long long v16 = 0u;
  long long v17 = 0u;
  sub_100255390(a2, (uint64_t)&v16);
  uint32_t v13 = 1;
LABEL_24:
  uint64_t v14 = CGBitmapContextCreate(*(void **)(a2 + 16), *(int *)(a2 + 12), *(int *)(a2 + 8), 8uLL, **(void **)(a2 + 72), ColorSpace, v13);
  unint64_t v15 = (CGImage *)[a1 CGImage];
  v18.origin.x = 0.0;
  v18.origin.y = 0.0;
  v18.size.width = (double)Width;
  v18.size.height = (double)Height;
  CGContextDrawImage(v14, v18, v15);
  CGContextRelease(v14);
}

uint64_t sub_1002EB4AC(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1002D6AE8(v23, &off_100497CD8);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v15 = *(_OWORD *)v6;
    long long v16 = v7;
    long long v17 = *(_OWORD *)(v6 + 32);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v18 = *(void *)(v6 + 48);
    uint64_t v19 = v8;
    unint64_t v20 = (char *)&v15 + 8;
    long long v21 = v22;
    v22[0] = 0;
    v22[1] = 0;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v15) = 0;
      sub_1002931A8((uint64_t)&v15, v6);
    }
    else
    {
      int v9 = *(void **)(v6 + 72);
      int v10 = v21;
      *(void *)long long v21 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v15);
  }
  uint64_t v11 = sub_1002EB660(a1, (unsigned int *)&v15, a3, 0);
  if (v19 && atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v15);
  }
  uint64_t v19 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  if (SDWORD1(v15) >= 1)
  {
    uint64_t v12 = 0;
    uint32_t v13 = v20;
    do
      *(_DWORD *)&v13[4 * v12++] = 0;
    while (v12 < SDWORD1(v15));
  }
  if (v21 != v22) {
    j__free(v21);
  }
  if (v24) {
    sub_1002D6888(v23);
  }
  return v11;
}

void sub_1002EB630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000094F4((uint64_t)&a9);
  sub_10020FA00(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_1002EB64C(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EB660(uint64_t a1, unsigned int *a2, void *a3, int a4)
{
  uint64_t v6 = a2;
  LODWORD(v23[0]) = 1124007936;
  memset((char *)v23 + 4, 0, 48);
  v23[3] = 0u;
  int v24 = (char *)v23 + 8;
  int v25 = v26;
  v26[0] = 0;
  v26[1] = 0;
  unsigned int v8 = (*a2 >> 3) & 0x1FF;
  if (v8 > 3 || v8 == 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    qmemcpy((void *)sub_1002D19D8(&v18, 71), "image.channels() == 1 || image.channels() == 3 || image.channels() == 4", 71);
    sub_1002D2278(-215, &v18, "imwrite_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/loadsave.cpp", 673);
  }
  sub_1002EBAF4(&v21, *(const char **)a1, *(void *)(a1 + 8));
  if (!v22)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    qmemcpy((void *)sub_1002D19D8(&v18, 51), "could not find a writer for the specified extension", 51);
    sub_1002D2278(-2, &v18, "imwrite_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/loadsave.cpp", 677);
  }
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)v22 + 16))(v22, *v6 & 7) & 1) == 0)
  {
    if (((*(uint64_t (**)(uint64_t, void))(*(void *)v22 + 16))(v22, 0) & 1) == 0)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      qmemcpy((void *)sub_1002D19D8(&v18, 29), "encoder->isFormatSupported(0)", 29);
      sub_1002D2278(-215, &v18, "imwrite_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/loadsave.cpp", 680);
    }
    LODWORD(v18) = 33619968;
    uint64_t v19 = (unsigned int *)v23;
    uint64_t v20 = 0;
    sub_10024011C(v6, (uint64_t)&v18, 0, 1.0, 0.0);
    uint64_t v6 = (unsigned int *)v23;
  }
  if (a4)
  {
    uint64_t v19 = v6;
    uint64_t v20 = 0;
    LODWORD(v18) = 16842752;
    int v15 = 33619968;
    long long v16 = v23;
    uint64_t v17 = 0;
    sub_100255FCC((uint64_t)&v18, (uint64_t)&v15, 0);
    uint64_t v6 = (unsigned int *)v23;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 24))(v22, a1);
  if (a3[1] - *a3 >= 0x194uLL)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    qmemcpy((void *)sub_1002D19D8(&v18, 23), "params.size() <= (50)*2", 23);
    sub_1002D2278(-215, &v18, "imwrite_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/loadsave.cpp", 692);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, unsigned int *, void *))(*(void *)v22 + 40))(v22, v6, a3);
  uint64_t v11 = v21;
  if (v21 && atomic_fetch_add((atomic_uint *volatile)(v21 + 8), 0xFFFFFFFF) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  }
  if (*((void *)&v23[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v23[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v23);
  }
  *((void *)&v23[3] + 1) = 0;
  memset(&v23[1], 0, 32);
  if (SDWORD1(v23[0]) >= 1)
  {
    uint64_t v12 = 0;
    uint32_t v13 = v24;
    do
      *(_DWORD *)&v13[4 * v12++] = 0;
    while (v12 < SDWORD1(v23[0]));
  }
  if (v25 != v26) {
    j__free(v25);
  }
  return v10;
}

void sub_1002EBA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1002EBE28((uint64_t)va1);
  sub_1000094F4((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1002EBAF4(void *a1, const char *a2, unint64_t a3)
{
  if (a3 <= 1) {
    goto LABEL_48;
  }
  BOOL v4 = "";
  uint64_t v5 = a2 ? (char *)a2 : "";
  uint64_t v6 = strrchr(v5, 46);
  if (!v6) {
    goto LABEL_48;
  }
  uint64_t v7 = 0;
  uint64_t v8 = v6 + 1;
  do
  {
    __darwin_ct_rune_t v9 = v8[v7];
    if (v9 < 0)
    {
      if (!__maskrune(v9, 0x500uLL)) {
        break;
      }
    }
    else if ((_DefaultRuneLocale.__runetype[v9] & 0x500) == 0)
    {
      break;
    }
    ++v7;
  }
  while (v7 != 128);
  uint64_t v10 = qword_1004E1978;
  if (unk_1004E1980 == qword_1004E1978)
  {
LABEL_48:
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v12 = v7;
    if (v7)
    {
      while (1)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v10 + 16 * v11 + 8) + 48))(v32);
        uint32_t v13 = v4;
        uint64_t v14 = v32[0] ? (char *)v32[0] : (char *)v4;
        int v15 = strchr(v14, 40);
        if (v15)
        {
          long long v16 = v15 + 1;
LABEL_22:
          uint64_t v18 = strchr(v16, 46);
          if (v18) {
            break;
          }
        }
        sub_1002D1A1C(v32);
        ++v11;
        uint64_t v10 = qword_1004E1978;
        BOOL v4 = v13;
        if (v11 >= (unk_1004E1980 - qword_1004E1978) >> 4) {
          goto LABEL_48;
        }
      }
      uint64_t v19 = 0;
      uint64_t v20 = v18 + 1;
      while (1)
      {
        __darwin_ct_rune_t v21 = v20[v19];
        if (!(v21 < 0 ? __maskrune(v21, 0x500uLL) : _DefaultRuneLocale.__runetype[v21] & 0x500)) {
          break;
        }
        __darwin_ct_rune_t v23 = __tolower(v8[v19]);
        if (v23 != __tolower(v20[v19])) {
          break;
        }
        if (v12 == ++v19)
        {
          uint64_t v24 = v12;
          goto LABEL_32;
        }
      }
      uint64_t v24 = v19;
      if (v12 != v19)
      {
LABEL_21:
        long long v16 = &v20[v24 + 1];
        goto LABEL_22;
      }
LABEL_32:
      __darwin_ct_rune_t v25 = v20[v12];
      if (v25 < 0) {
        __uint32_t v17 = __maskrune(v25, 0x500uLL);
      }
      else {
        __uint32_t v17 = _DefaultRuneLocale.__runetype[v25] & 0x500;
      }
      if (v17) {
        goto LABEL_21;
      }
    }
    else
    {
      while (1)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v10 + 16 * v11 + 8) + 48))(v32);
        uint64_t v26 = v32[0] ? (char *)v32[0] : "";
        BOOL v27 = strchr(v26, 40);
        if (v27)
        {
          int v28 = strchr(v27 + 1, 46);
          if (v28) {
            break;
          }
        }
LABEL_47:
        sub_1002D1A1C(v32);
        ++v11;
        uint64_t v10 = qword_1004E1978;
        if (v11 >= (unk_1004E1980 - qword_1004E1978) >> 4) {
          goto LABEL_48;
        }
      }
      unsigned __int8 v29 = v28;
      while (1)
      {
        __darwin_ct_rune_t v30 = v29[1];
        if (!(v30 < 0 ? __maskrune(v30, 0x500uLL) : _DefaultRuneLocale.__runetype[v30] & 0x500)) {
          break;
        }
        unsigned __int8 v29 = strchr(v29 + 2, 46);
        if (!v29) {
          goto LABEL_47;
        }
      }
    }
    (*(void (**)(void))(**(void **)(qword_1004E1978 + 16 * v11 + 8) + 56))(*(void *)(qword_1004E1978 + 16 * v11 + 8));
    sub_1002D1A1C(v32);
  }
}

void sub_1002EBDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002EBE28(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002EBE94(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_1002EBF00(_OWORD *a1)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  operator new();
}

void sub_1002ECFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE28((uint64_t)&a11);
  sub_1002ED8E0((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ECFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE94((uint64_t)&a11);
  sub_1002ED874((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE28((uint64_t)&a11);
  sub_1002ED808((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE94((uint64_t)&a11);
  sub_1002ED79C((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE28((uint64_t)&a11);
  sub_1002ED730((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE94((uint64_t)&a11);
  sub_1002ED6C4((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE28((uint64_t)&a11);
  sub_1002ED658((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE94((uint64_t)&a11);
  sub_1002ED5EC((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE28((uint64_t)&a11);
  sub_1002ED580((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE94((uint64_t)&a11);
  sub_1002ED514((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE28((uint64_t)&a11);
  sub_1002ED4A8((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE94((uint64_t)&a11);
  sub_1002ED43C((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE28((uint64_t)&a11);
  sub_1002ED3D0((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002EBE94((uint64_t)&a11);
  sub_1002ED364((uint64_t)&a9);
  sub_1002ED94C(v12);
  sub_1002ED9F4(v11);
  _Unwind_Resume(a1);
}

void sub_1002ED214()
{
}

void sub_1002ED314(_Unwind_Exception *a1)
{
  sub_1002ED94C(v2);
  sub_1002ED9F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002ED364(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED3D0(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED43C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED4A8(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED514(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED580(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED5EC(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED658(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED6C4(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED730(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED79C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED808(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED874(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1002ED8E0(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void *sub_1002ED94C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    int v3 = (void *)a1[1];
    BOOL v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (atomic_uint *)*(v3 - 2);
        v3 -= 2;
        uint64_t v5 = v6;
        if (v6 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
        }
        *int v3 = 0;
        v3[1] = 0;
      }
      while (v3 != v2);
      BOOL v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_1002ED9F4(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    int v3 = (void *)a1[1];
    BOOL v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (atomic_uint *)*(v3 - 2);
        v3 -= 2;
        uint64_t v5 = v6;
        if (v6 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
        }
        *int v3 = 0;
        v3[1] = 0;
      }
      while (v3 != v2);
      BOOL v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_1002EDA9C(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_10000B98C();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_10000BA6C();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  unint64_t v11 = &v10[16 * v3];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  uint64_t v12 = v11 + 16;
  uint32_t v13 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v14 = *a1;
  int v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (!v15) {
      return v12;
    }
    goto LABEL_20;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 1);
    v15 -= 16;
    *((_OWORD *)v11 - 1) = v16;
    v11 -= 16;
    uint64_t v17 = v16;
    if ((void)v16) {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
    }
  }
  while (v15 != v14);
  uint64_t v18 = *a1;
  int v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  if (v15 != v18)
  {
    do
    {
      uint64_t v20 = (atomic_uint *)*((void *)v15 - 2);
      v15 -= 16;
      uint64_t v19 = v20;
      if (v20 && atomic_fetch_add(v19 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v19 + 16))(v19);
      }
      *(void *)int v15 = 0;
      *((void *)v15 + 1) = 0;
    }
    while (v15 != v18);
    int v15 = v18;
  }
  if (v15) {
LABEL_20:
  }
    operator delete(v15);
  return v12;
}

char *sub_1002EDC04(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_10000B98C();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_10000BA6C();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  unint64_t v11 = &v10[16 * v3];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  uint64_t v12 = v11 + 16;
  uint32_t v13 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v14 = *a1;
  int v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (!v15) {
      return v12;
    }
    goto LABEL_20;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 1);
    v15 -= 16;
    *((_OWORD *)v11 - 1) = v16;
    v11 -= 16;
    uint64_t v17 = v16;
    if ((void)v16) {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 8), 1u);
    }
  }
  while (v15 != v14);
  uint64_t v18 = *a1;
  int v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  if (v15 != v18)
  {
    do
    {
      uint64_t v20 = (atomic_uint *)*((void *)v15 - 2);
      v15 -= 16;
      uint64_t v19 = v20;
      if (v20 && atomic_fetch_add(v19 + 2, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v19 + 16))(v19);
      }
      *(void *)int v15 = 0;
      *((void *)v15 + 1) = 0;
    }
    while (v15 != v18);
    int v15 = v18;
  }
  if (v15) {
LABEL_20:
  }
    operator delete(v15);
  return v12;
}

void *sub_1002EDD6C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    unint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        BOOL v6 = (atomic_uint *)*(v3 - 2);
        v3 -= 2;
        uint64_t v5 = v6;
        if (v6 && atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
        }
        *uint64_t v3 = 0;
        v3[1] = 0;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  unint64_t v7 = (void *)*a1;
  if (*a1)
  {
    uint64_t v8 = (void *)a1[1];
    uint64_t v9 = (void *)*a1;
    if (v8 != v7)
    {
      do
      {
        unint64_t v11 = (atomic_uint *)*(v8 - 2);
        v8 -= 2;
        uint64_t v10 = v11;
        if (v11 && atomic_fetch_add(v10 + 2, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v10 + 16))(v10);
        }
        *uint64_t v8 = 0;
        v8[1] = 0;
      }
      while (v8 != v7);
      uint64_t v9 = (void *)*a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

void sub_1002EDE90()
{
}

uint64_t sub_1002EDEE8(FILE *a1, int a2, int a3, int *a4)
{
  if (a4)
  {
    uint64_t v8 = (const char *)(a4 + 1);
    if ((*a4 & 1) == 0) {
      uint64_t v8 = "RGBE";
    }
    if (fprintf(a1, "#?%s\n", v8) < 0) {
      goto LABEL_15;
    }
    float v9 = *(float *)a4;
    if ((*a4 & 2) != 0)
    {
      if (fprintf(a1, "GAMMA=%g\n", *((float *)a4 + 5)) < 0) {
        goto LABEL_15;
      }
      float v9 = *(float *)a4;
    }
    if ((LOBYTE(v9) & 4) != 0 && fprintf(a1, "EXPOSURE=%g\n", *((float *)a4 + 6)) < 0) {
LABEL_15:
    }
      sub_1002EE020(1, 0);
  }
  else if (fprintf(a1, "#?%s\n", "RGBE") < 0)
  {
    goto LABEL_15;
  }
  if (fprintf(a1, "FORMAT=32-bit_rle_rgbe\n\n") < 0 || fprintf(a1, "-Y %d +X %d\n", a3, a2) < 0) {
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_1002EE008()
{
  return 0xFFFFFFFFLL;
}

void sub_1002EE020(int a1, const void *a2)
{
  if (a1 != 2)
  {
    if (a1 != 1)
    {
      if (!a1)
      {
        int __dst = 0;
        uint64_t v16 = 0;
        qmemcpy((void *)sub_1002D19D8(&__dst, 15), "RGBE read error", 15);
        sub_1002D2278(-2, (uint64_t *)&__dst, "rgbe_error", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/rgbe.cpp", 88);
      }
      int32x2_t __src = 0;
      size_t __n = 0;
      qmemcpy((void *)sub_1002D19D8(&__src, 13), "RGBE error: \n", 13);
      unint64_t v11 = 0;
      size_t v12 = 0;
      if (a2 && (size_t v7 = strlen((const char *)a2)) != 0)
      {
        size_t v8 = v7;
        float v9 = (void *)sub_1002D19D8(&v11, v7);
        memcpy(v9, a2, v8);
        size_t v10 = v12;
      }
      else
      {
        size_t v10 = 0;
      }
      int __dst = 0;
      uint64_t v16 = 0;
      sub_1002D19D8(&__dst, v10 + __n);
      if (__n) {
        memcpy(__dst, __src, __n);
      }
      if (v12) {
        memcpy((char *)__dst + __n, v11, v12);
      }
      sub_1002D2278(-2, (uint64_t *)&__dst, "rgbe_error", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/rgbe.cpp", 100);
    }
    int __dst = 0;
    uint64_t v16 = 0;
    *(_OWORD *)sub_1002D19D8(&__dst, 16) = *(_OWORD *)"RGBE write error";
    sub_1002D2278(-2, (uint64_t *)&__dst, "rgbe_error", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/rgbe.cpp", 91);
  }
  int32x2_t __src = 0;
  size_t __n = 0;
  qmemcpy((void *)sub_1002D19D8(&__src, 22), "RGBE bad file format: ", 22);
  unint64_t v11 = 0;
  size_t v12 = 0;
  if (a2 && (size_t v3 = strlen((const char *)a2)) != 0)
  {
    size_t v4 = v3;
    uint64_t v5 = (void *)sub_1002D19D8(&v11, v3);
    memcpy(v5, a2, v4);
    size_t v6 = v12;
  }
  else
  {
    size_t v6 = 0;
  }
  int __dst = 0;
  uint64_t v16 = 0;
  sub_1002D19D8(&__dst, v6 + __n);
  if (__n) {
    memcpy(__dst, __src, __n);
  }
  if (v12) {
    memcpy((char *)__dst + __n, v11, v12);
  }
  sub_1002D2278(-2, (uint64_t *)&__dst, "rgbe_error", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/rgbe.cpp", 95);
}

void sub_1002EE290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void sub_1002EE2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EE394(FILE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    *(_DWORD *)a4 = 0;
    *(unsigned char *)(a4 + 4) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)(a4 + 20) = _D0;
  }
  int v25 = 0;
  size_t v12 = fgets(v26, 128, a1);
  if (!v12) {
    goto LABEL_54;
  }
  uint64_t v24 = a3;
  if (a4 && v26[0] == 35 && v26[1] == 63)
  {
    uint64_t v13 = 0;
    *(_DWORD *)a4 |= 1u;
    do
    {
      __darwin_ct_rune_t v14 = v26[v13 + 2];
      if (!v26[v13 + 2]) {
        break;
      }
      if (v14 < 0)
      {
        if (__maskrune(v14, 0x4000uLL)) {
          break;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v14] & 0x4000) != 0)
      {
        break;
      }
      *(unsigned char *)(a4 + 4 + v13) = v26[v13 + 2];
      ++v13;
    }
    while (v13 != 15);
    *(unsigned char *)(a4 + v13 + 4) = 0;
    goto LABEL_16;
  }
  if (a4)
  {
LABEL_16:
    char i = 0;
    while (1)
    {
      while (1)
      {
        do
        {
          if (!fgets(v26, 128, a1)) {
            goto LABEL_47;
          }
        }
        while (v26[0] == 35);
        if (v26[0] == 10) {
          goto LABEL_48;
        }
        _ZF = *(void *)v26 == 0x333D54414D524F46 && v27 == 0x6C725F7469622D32;
        if (!_ZF || v28 != 0xA656267725F65) {
          break;
        }
        char i = 1;
      }
      if (sscanf(v26, "GAMMA=%g", &v25) == 1) {
        break;
      }
      if (sscanf(v26, "EXPOSURE=%g", &v25) == 1)
      {
        *(_DWORD *)(a4 + 24) = v25;
        int v16 = 4;
LABEL_18:
        *(_DWORD *)a4 |= v16;
      }
    }
    *(_DWORD *)(a4 + 20) = v25;
    int v16 = 2;
    goto LABEL_18;
  }
  for (char i = 0; ; i |= v21)
  {
    do
    {
      if (!fgets(v26, 128, a1))
      {
LABEL_47:
        LODWORD(v12) = 0;
        uint64_t v22 = 0;
        goto LABEL_57;
      }
    }
    while (v26[0] == 35);
    if (v26[0] == 10) {
      break;
    }
    BOOL v21 = *(void *)v26 == 0x333D54414D524F46 && v27 == 0x6C725F7469622D32 && v28 == 0xA656267725F65;
  }
LABEL_48:
  if (*(unsigned __int16 *)v26 != 10)
  {
    uint64_t v22 = "missing blank line after FORMAT specifier";
    goto LABEL_56;
  }
  if ((i & 1) == 0)
  {
    uint64_t v22 = "missing FORMAT specifier";
LABEL_56:
    LODWORD(v12) = 2;
LABEL_57:
    sub_1002EE020((int)v12, v22);
  }
  size_t v12 = fgets(v26, 128, a1);
  if (!v12)
  {
LABEL_54:
    uint64_t v22 = 0;
    goto LABEL_57;
  }
  if (sscanf(v26, "-Y %d +X %d", v24, a2) <= 1)
  {
    uint64_t v22 = "missing image size specifier";
    goto LABEL_56;
  }
  return 0;
}

uint64_t sub_1002EE6DC(FILE *a1, uint64_t a2, int a3)
{
  size_t v4 = (float *)(a2 + 8);
  int v5 = a3 + 1;
  while (--v5 >= 1)
  {
    float v11 = *(v4 - 1);
    float v12 = *v4;
    float v13 = *(v4 - 2);
    if (v11 <= *v4) {
      float v14 = *v4;
    }
    else {
      float v14 = *(v4 - 1);
    }
    if (v14 < v13) {
      float v14 = *(v4 - 2);
    }
    if (v14 >= 1.0e-32)
    {
      float v6 = frexpf(v14, &v16) * 256.0 / v14;
      int v7 = (int)(float)(v12 * v6);
      int v8 = (int)(float)(v11 * v6);
      int v9 = (int)(float)(v13 * v6);
      char v10 = v16 ^ 0x80;
    }
    else
    {
      char v10 = 0;
      LOBYTE(v9) = 0;
      LOBYTE(v8) = 0;
      LOBYTE(v7) = 0;
    }
    v4 += 3;
    __ptr[3] = v10;
    __ptr[2] = v9;
    __ptr[1] = v8;
    __ptr[0] = v7;
    if (!fwrite(__ptr, 4uLL, 1uLL, a1)) {
      sub_1002EE020(1, 0);
    }
  }
  return 0;
}

uint64_t sub_1002EE800(FILE *a1, float *a2, unsigned int a3, int a4)
{
  if (a3 - 0x8000 > 0xFFFF8007 && (int v8 = (char *)malloc_type_malloc(4 * a3, 0x2FC5A943uLL)) != 0)
  {
    int v9 = v8;
    if (a4 >= 1)
    {
      uint64_t v10 = 2 * a3;
      float v11 = &v8[3 * a3];
      float v12 = &v8[a3];
      unsigned int v13 = a3 >> 8;
      do
      {
        __int16 __ptr = 514;
        char v43 = v13;
        char v44 = a3;
        if (!fwrite(&__ptr, 4uLL, 1uLL, a1))
        {
          free(v9);
          sub_1002EE020(1, 0);
        }
        unsigned int v35 = v13;
        uint64_t v14 = 0;
        int v34 = a4 - 1;
        do
        {
          float v20 = a2[1];
          float v21 = a2[2];
          float v22 = *a2;
          if (v20 <= v21) {
            float v23 = a2[2];
          }
          else {
            float v23 = a2[1];
          }
          if (v23 < v22) {
            float v23 = *a2;
          }
          if (v23 >= 1.0e-32)
          {
            float v15 = frexpf(v23, &v41) * 256.0 / v23;
            int v16 = (int)(float)(v21 * v15);
            int v17 = (int)(float)(v20 * v15);
            int v18 = (int)(float)(v22 * v15);
            char v19 = v41 ^ 0x80;
          }
          else
          {
            char v19 = 0;
            LOBYTE(v18) = 0;
            LOBYTE(v17) = 0;
            LOBYTE(v16) = 0;
          }
          char v44 = v19;
          char v43 = v18;
          HIBYTE(__ptr) = v17;
          LOBYTE(__ptr) = v16;
          v9[v14] = v16;
          v12[v14] = HIBYTE(__ptr);
          v9[(v10 + v14)] = v43;
          v11[v14] = v44;
          a2 += 3;
          ++v14;
        }
        while (a3 != v14);
        unint64_t v36 = v12;
        unsigned int v37 = v11;
        uint64_t v38 = v10;
        int v39 = a4;
        uint64_t v24 = 0;
        do
        {
          int v25 = 0;
          uint64_t v40 = v24;
          uint64_t v26 = &v9[v24 * a3];
          do
          {
            LODWORD(v27) = 0;
            LODWORD(v28) = v25;
            do
            {
              int v30 = v27;
              uint64_t v28 = (int)v28 + (uint64_t)(int)v27;
              if ((int)v28 + 1 >= (int)a3)
              {
                LODWORD(v27) = 1;
              }
              else
              {
                unint64_t v31 = 1;
                while (v26[v28] == v26[(int)v28 + (int)v31])
                {
                  unint64_t v27 = v31 + 1;
                  if (v31 <= 0x7D)
                  {
                    ++v31;
                    if ((uint64_t)(v27 + v28) < a3) {
                      continue;
                    }
                  }
                  goto LABEL_21;
                }
                LODWORD(v27) = v31;
              }
LABEL_21:
              ;
            }
            while ((int)v28 < (int)a3 && v27 < 4);
            if (v30 >= 2 && v30 == v28 - v25)
            {
              char v45 = v30 ^ 0x80;
              char v46 = v26[v25];
              int v25 = v28;
              if (!fwrite(&v45, 2uLL, 1uLL, a1)) {
                goto LABEL_52;
              }
            }
            else if ((int)v28 > v25)
            {
              while (1)
              {
                int v32 = (int)v28 - v25 >= 128 ? 128 : v28 - v25;
                char v45 = v32;
                if (!fwrite(&v45, 1uLL, 1uLL, a1) || !fwrite(&v26[v25], v32, 1uLL, a1)) {
                  break;
                }
                v25 += v32;
                if (v25 >= (int)v28) {
                  goto LABEL_43;
                }
              }
LABEL_52:
              sub_1002EE020(1, 0);
            }
LABEL_43:
            if (v27 >= 4)
            {
              char v45 = v27 ^ 0x80;
              char v46 = v26[v28];
              if (!fwrite(&v45, 2uLL, 1uLL, a1)) {
                goto LABEL_52;
              }
              v25 += v27;
            }
          }
          while (v25 < (int)a3);
          uint64_t v24 = v40 + 1;
        }
        while (v40 != 3);
        a4 = v34;
        unsigned int v13 = v35;
        float v11 = v37;
        uint64_t v10 = v38;
        float v12 = v36;
      }
      while (v39 >= 2);
    }
    free(v9);
    return 0;
  }
  else
  {
    return sub_1002EE6DC(a1, (uint64_t)a2, a4 * a3);
  }
}

uint64_t sub_1002EEBD4(FILE *__stream, float *a2, unsigned int a3, int a4)
{
  int v4 = a4;
  if (a3 - 0x8000 >= 0xFFFF8008)
  {
    if (a4 < 1)
    {
      uint64_t v14 = 0;
      goto LABEL_119;
    }
    uint64_t v14 = 0;
    size_t v15 = 4 * a3;
    int v103 = 2 * a3;
    uint64_t v104 = a3;
    uint64_t v101 = 3 * a3;
    uint64_t v102 = 2 * a3;
    while (1)
    {
      if (!fread(&v107, 4uLL, 1uLL, __stream))
      {
LABEL_121:
        free(v14);
        LODWORD(v9) = 0;
LABEL_122:
        unint64_t v87 = 0;
        goto LABEL_125;
      }
      unsigned int v16 = v107;
      unsigned int v17 = v108;
      BOOL v18 = v107 == 2 && v108 == 2;
      if (!v18 || v109 < 0)
      {
        if (v110)
        {
          float v88 = ldexp(1.0, v110 - 136);
          float v89 = (float)v16 * v88;
          float v90 = v88 * (float)v17;
          LOBYTE(v91) = v109;
          float v92 = v88 * (float)v91;
        }
        else
        {
          float v92 = 0.0;
          float v90 = 0.0;
          float v89 = 0.0;
        }
        *a2 = v92;
        a2[1] = v90;
        a2[2] = v89;
        free(v14);
        int v93 = v4 * a3;
        if (v93 >= 2)
        {
          BOOL v94 = a2 + 5;
          while (1)
          {
            size_t v9 = fread(v113, 4uLL, 1uLL, __stream);
            if (!v9) {
              break;
            }
            if (v114)
            {
              long double v95 = ldexp(1.0, v114 - 136);
              float v96 = v95;
              LOBYTE(v95) = v113[0];
              LOBYTE(v97) = v113[1];
              LOBYTE(v98) = v113[2];
              --v93;
              *(v94 - 2) = v96 * (float)v98;
              *(v94 - 1) = v96 * (float)v97;
              *BOOL v94 = v96 * (float)LODWORD(v95);
              v94 += 3;
              if (v93 <= 1) {
                return 0;
              }
            }
            else
            {
              --v93;
              *(v94 - 2) = 0.0;
              *(v94 - 1) = 0.0;
              *BOOL v94 = 0.0;
              v94 += 3;
              if (v93 <= 1) {
                return 0;
              }
            }
          }
          goto LABEL_122;
        }
        return 0;
      }
      if ((v110 | (v109 << 8)) != a3)
      {
        free(v14);
        unint64_t v87 = "wrong scanline width";
LABEL_124:
        LODWORD(v9) = 2;
LABEL_125:
        sub_1002EE020(v9, v87);
      }
      if (!v14)
      {
        uint64_t v14 = (int8x8_t *)malloc_type_malloc(v15, 0xE329509uLL);
        if (!v14)
        {
          unint64_t v87 = "unable to allocate buffer space";
          LODWORD(v9) = 3;
          goto LABEL_125;
        }
      }
      char v19 = (int8x8_t *)((char *)v14 + v104);
      float v20 = v14;
      do
      {
        if (!fread(&v105, 2uLL, 1uLL, __stream)) {
          goto LABEL_121;
        }
        unsigned int v21 = v105;
        uint64_t v22 = (char *)v19 - (char *)v20;
        uint64_t v23 = v105 - 129;
        if (v105 < 0x81u)
        {
          if (!v105 || v22 < v105)
          {
LABEL_123:
            free(v14);
            unint64_t v87 = "bad scanline data";
            goto LABEL_124;
          }
          v20->i8[0] = v106;
          float v20 = (int8x8_t *)((char *)v20 + 1);
          if (v21 >= 2)
          {
            size_t v27 = v21 - 1;
            if (!fread(v20, v27, 1uLL, __stream)) {
              goto LABEL_121;
            }
            float v20 = (int8x8_t *)((char *)v20 + v27);
          }
        }
        else
        {
          uint64_t v24 = v105 - 128;
          if (v22 < v24) {
            goto LABEL_123;
          }
          if (v23 < 0xF || v20 < (int8x8_t *)&v107 && &v106 < (__int8 *)v20 + v23 + 1)
          {
            int v25 = v20;
LABEL_31:
            int v26 = v24 + 1;
            float v20 = v25;
            do
            {
              v20->i8[0] = v106;
              float v20 = (int8x8_t *)((char *)v20 + 1);
              --v26;
            }
            while (v26 > 1);
            continue;
          }
          uint64_t v28 = v23 + 1;
          uint64_t v29 = (v23 + 1) & 0x1FFFFFFF0;
          LODWORD(v24) = v24 - v29;
          int v25 = (int8x8_t *)((char *)v20 + v29);
          int v30 = &v106;
          int8x8_t v31 = vld1_dup_s8(v30);
          int v32 = v20 + 1;
          uint64_t v33 = v29;
          do
          {
            v32[-1] = v31;
            *int v32 = v31;
            v32 += 2;
            v33 -= 16;
          }
          while (v33);
          float v20 = (int8x8_t *)((char *)v20 + v29);
          if (v28 != v29) {
            goto LABEL_31;
          }
        }
      }
      while (v20 < v19);
      int v34 = (int8x8_t *)((char *)v14 + v102);
      if (v20 < (int8x8_t *)&v14->i8[v102])
      {
        while (1)
        {
          if (!fread(&v105, 2uLL, 1uLL, __stream)) {
            goto LABEL_121;
          }
          unsigned int v48 = v105;
          uint64_t v49 = (char *)v34 - (char *)v20;
          uint64_t v50 = v105 - 128;
          if (v105 <= 0x80u)
          {
            if (!v105 || v49 < v105) {
              goto LABEL_123;
            }
            v20->i8[0] = v106;
            uint64_t v53 = (int8x8_t *)((char *)v20 + 1);
            if (v48 < 2)
            {
              unsigned int v35 = v53;
            }
            else
            {
              size_t v54 = v48 - 1;
              if (!fread(v53, v54, 1uLL, __stream)) {
                goto LABEL_121;
              }
              unsigned int v35 = (int8x8_t *)((char *)v53 + v54);
            }
          }
          else
          {
            if (v49 < v50) {
              goto LABEL_123;
            }
            uint64_t v51 = v105 - 129;
            if (v51 >= 0xF && (v20 >= (int8x8_t *)&v107 || &v106 >= (__int8 *)v20 + v51 + 1))
            {
              uint64_t v55 = v51 + 1;
              LODWORD(v50) = v50 - (v55 & 0xFFFFFFF0);
              unsigned int v35 = (int8x8_t *)((char *)v20 + (v55 & 0x1FFFFFFF0));
              uint64_t v56 = &v106;
              int8x8_t v57 = vld1_dup_s8(v56);
              BOOL v58 = v20 + 1;
              uint64_t v59 = v55 & 0x1FFFFFFF0;
              do
              {
                v58[-1] = v57;
                *BOOL v58 = v57;
                v58 += 2;
                v59 -= 16;
              }
              while (v59);
              if (v55 == (v55 & 0x1FFFFFFF0)) {
                goto LABEL_54;
              }
            }
            else
            {
              unsigned int v35 = v20;
            }
            int v52 = v50 + 1;
            do
            {
              v35->i8[0] = v106;
              unsigned int v35 = (int8x8_t *)((char *)v35 + 1);
              --v52;
            }
            while (v52 > 1);
          }
LABEL_54:
          float v20 = v35;
          if (v35 >= v34) {
            goto LABEL_45;
          }
        }
      }
      unsigned int v35 = v20;
LABEL_45:
      unint64_t v36 = (int8x8_t *)((char *)v14 + v101);
      if (v35 < (int8x8_t *)&v14->i8[v101])
      {
        while (1)
        {
          if (!fread(&v105, 2uLL, 1uLL, __stream)) {
            goto LABEL_121;
          }
          unsigned int v60 = v105;
          uint64_t v61 = (char *)v36 - (char *)v35;
          uint64_t v62 = v105 - 128;
          if (v105 <= 0x80u)
          {
            if (!v105 || v61 < v105) {
              goto LABEL_123;
            }
            v35->i8[0] = v106;
            uint64_t v65 = (int8x8_t *)((char *)v35 + 1);
            if (v60 < 2)
            {
              unsigned int v37 = v65;
            }
            else
            {
              size_t v66 = v60 - 1;
              if (!fread(v65, v66, 1uLL, __stream)) {
                goto LABEL_121;
              }
              unsigned int v37 = (int8x8_t *)((char *)v65 + v66);
            }
          }
          else
          {
            if (v61 < v62) {
              goto LABEL_123;
            }
            uint64_t v63 = v105 - 129;
            if (v63 >= 0xF && (v35 >= (int8x8_t *)&v107 || &v106 >= (__int8 *)v35 + v63 + 1))
            {
              uint64_t v67 = v63 + 1;
              LODWORD(v62) = v62 - (v67 & 0xFFFFFFF0);
              unsigned int v37 = (int8x8_t *)((char *)v35 + (v67 & 0x1FFFFFFF0));
              int8x16_t v68 = &v106;
              int8x8_t v69 = vld1_dup_s8(v68);
              int v70 = v35 + 1;
              uint64_t v71 = v67 & 0x1FFFFFFF0;
              do
              {
                v70[-1] = v69;
                int8x8_t *v70 = v69;
                v70 += 2;
                v71 -= 16;
              }
              while (v71);
              if (v67 == (v67 & 0x1FFFFFFF0)) {
                goto LABEL_75;
              }
            }
            else
            {
              unsigned int v37 = v35;
            }
            int v64 = v62 + 1;
            do
            {
              v37->i8[0] = v106;
              unsigned int v37 = (int8x8_t *)((char *)v37 + 1);
              --v64;
            }
            while (v64 > 1);
          }
LABEL_75:
          unsigned int v35 = v37;
          if (v37 >= v36) {
            goto LABEL_47;
          }
        }
      }
      unsigned int v37 = v35;
LABEL_47:
      uint64_t v38 = (char *)v14 + v15;
      if (v37 < (int8x8_t *)&v14->i8[v15])
      {
        do
        {
          if (!fread(&v105, 2uLL, 1uLL, __stream)) {
            goto LABEL_121;
          }
          unsigned int v73 = v105;
          uint64_t v74 = v38 - (char *)v37;
          uint64_t v75 = v105 - 128;
          if (v105 <= 0x80u)
          {
            if (!v105 || v74 < v105) {
              goto LABEL_123;
            }
            v37->i8[0] = v106;
            unint64_t v78 = (int8x8_t *)((char *)v37 + 1);
            if (v73 < 2)
            {
              uint64_t v72 = v78;
            }
            else
            {
              size_t v79 = v73 - 1;
              if (!fread(v78, v79, 1uLL, __stream)) {
                goto LABEL_121;
              }
              uint64_t v72 = (int8x8_t *)((char *)v78 + v79);
            }
          }
          else
          {
            if (v74 < v75) {
              goto LABEL_123;
            }
            uint64_t v76 = v105 - 129;
            if (v76 >= 0xF && (v37 >= (int8x8_t *)&v107 || &v106 >= (__int8 *)v37 + v76 + 1))
            {
              uint64_t v80 = v76 + 1;
              uint64_t v81 = (v76 + 1) & 0x1FFFFFFF0;
              LODWORD(v75) = v75 - v81;
              uint64_t v72 = (int8x8_t *)((char *)v37 + v81);
              long long v82 = &v106;
              int8x8_t v83 = vld1_dup_s8(v82);
              BOOL v84 = v37 + 1;
              uint64_t v85 = v81;
              do
              {
                v84[-1] = v83;
                *BOOL v84 = v83;
                v84 += 2;
                v85 -= 16;
              }
              while (v85);
              if (v80 == v81) {
                goto LABEL_96;
              }
            }
            else
            {
              uint64_t v72 = v37;
            }
            int v77 = v75 + 1;
            do
            {
              v72->i8[0] = v106;
              uint64_t v72 = (int8x8_t *)((char *)v72 + 1);
              --v77;
            }
            while (v77 > 1);
          }
LABEL_96:
          unsigned int v37 = v72;
        }
        while (v72 < (int8x8_t *)v38);
      }
      size_t v99 = v15;
      int v100 = v4;
      uint64_t v39 = 0;
      uint64_t v40 = (char *)v14 + v104;
      do
      {
        unsigned int v44 = v14->u8[v39];
        unsigned __int8 v107 = v14->u8[v39];
        unsigned int v45 = v40[v39];
        unsigned __int8 v108 = v40[v39];
        unsigned int v46 = v14->u8[(v103 + v39)];
        char v109 = v14->i8[(v103 + v39)];
        unsigned __int8 v110 = v14->u8[v101 + v39];
        if (v110)
        {
          float v47 = ldexp(1.0, v110 - 136);
          float v43 = (float)v44 * v47;
          float v42 = v47 * (float)v45;
          float v41 = v47 * (float)v46;
        }
        else
        {
          float v41 = 0.0;
          float v42 = 0.0;
          float v43 = 0.0;
        }
        *a2 = v41;
        a2[1] = v42;
        a2[2] = v43;
        a2 += 3;
        ++v39;
      }
      while (v104 != v39);
      int v4 = v100 - 1;
      size_t v15 = v99;
      if (v100 <= 1)
      {
LABEL_119:
        free(v14);
        return 0;
      }
    }
  }
  if ((int)(a4 * a3) >= 1)
  {
    unsigned int v8 = a4 * a3 + 1;
    while (1)
    {
      size_t v9 = fread(__ptr, 4uLL, 1uLL, __stream);
      if (!v9) {
        break;
      }
      if (v112)
      {
        long double v10 = ldexp(1.0, v112 - 136);
        float v11 = v10;
        LOBYTE(v10) = __ptr[0];
        LOBYTE(v12) = __ptr[1];
        LOBYTE(v13) = __ptr[2];
        *a2 = v11 * (float)v13;
        a2[1] = v11 * (float)v12;
        a2[2] = v11 * (float)LODWORD(v10);
        --v8;
        a2 += 3;
        if (v8 <= 1) {
          return 0;
        }
      }
      else
      {
        *a2 = 0.0;
        a2[1] = 0.0;
        a2[2] = 0.0;
        --v8;
        a2 += 3;
        if (v8 <= 1) {
          return 0;
        }
      }
    }
    goto LABEL_122;
  }
  return 0;
}

uint64_t sub_1002EF3F8(uint64_t result)
{
  if (result != (int)result)
  {
    v1[0] = 0;
    v1[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v1, 22), "(size_t)valueInt == sz", 22);
    sub_1002D2278(-215, v1, "validateToInt", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgcodecs/src/utils.cpp", 48);
  }
  return result;
}

void sub_1002EF480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002EF498(uint64_t result, int a2, unint64_t a3, int a4, unint64_t a5, int a6)
{
  unint64_t v6 = HIDWORD(a5);
  if (HIDWORD(a5) && (int)a5 >= 1)
  {
    uint64_t v7 = 2 * (a6 != 0);
    uint64_t v8 = v7 ^ 2;
    uint64_t v9 = -3 * (int)a5 + a2;
    if ((a5 & 0xF) != 0) {
      uint64_t v10 = a5 & 0xF;
    }
    else {
      uint64_t v10 = 16;
    }
    if (a5 >= 0x11uLL)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 3 * a5;
      uint64_t v14 = v13 + v8 - 2;
      uint64_t v15 = v13 - 1;
      uint64_t v16 = v13 + v7 - 2;
      uint64_t v17 = a5 - v10;
      uint16x8_t v18 = (uint16x8_t)vdupq_n_s16(0x74Cu);
      uint16x8_t v19 = (uint16x8_t)vdupq_n_s16(0x2591u);
      uint16x8_t v20 = (uint16x8_t)vdupq_n_s16(0x1323u);
      v21.i64[0] = 0x200000002000;
      v21.i64[1] = 0x200000002000;
      unint64_t v22 = a3;
      do
      {
        uint64_t v23 = 0;
        unint64_t v24 = a3 + a5 + v12 * a4;
        BOOL v26 = v22 < result + v15 && result + 1 < v24;
        BOOL v28 = v22 < result + v16 && result + v7 < v24;
        BOOL v29 = result + v8 >= v24 || v22 >= result + v14;
        if (v29 && !v26 && !v28)
        {
          uint64_t v30 = 0;
          uint64_t v31 = result + 3 * v17;
          do
          {
            int v32 = (const char *)(result + v7);
            unsigned long long v33 = (unsigned __int128)vld3q_s8(v32);
            uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)&v33);
            uint16x8_t v35 = vmovl_high_u8((uint8x16_t)v33);
            uint32x4_t v36 = vmull_high_u16(v35, v18);
            unsigned int v37 = (const char *)(result + 1);
            unsigned long long v38 = (unsigned __int128)vld3q_s8(v37);
            uint32x4_t v39 = vmull_high_u16(v34, v18);
            uint16x8_t v40 = vmovl_high_u8((uint8x16_t)v38);
            uint16x8_t v41 = vmovl_u8(*(uint8x8_t *)&v38);
            float v42 = (const char *)(result + v8);
            unsigned long long v43 = (unsigned __int128)vld3q_s8(v42);
            uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v43);
            uint16x8_t v45 = vmovl_high_u8((uint8x16_t)v43);
            uint32x4_t v46 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v18.i8), *(uint16x4_t *)v41.i8, *(uint16x4_t *)v19.i8), *(uint16x4_t *)v44.i8, *(uint16x4_t *)v20.i8), v21);
            uint32x4_t v47 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v35.i8, *(uint16x4_t *)v18.i8), *(uint16x4_t *)v40.i8, *(uint16x4_t *)v19.i8), *(uint16x4_t *)v45.i8, *(uint16x4_t *)v20.i8), v21);
            v48.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(v36, v40, v19), v45, v20), v21), 0xEuLL);
            v48.val[2] = (int8x16_t)vshrq_n_u32(v47, 0xEuLL);
            v48.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(v39, v41, v19), v44, v20), v21), 0xEuLL);
            v48.val[0] = (int8x16_t)vshrq_n_u32(v46, 0xEuLL);
            *(int8x16_t *)(v22 + v30) = vqtbl4q_s8(v48, (int8x16_t)xmmword_1004047C0);
            v30 += 16;
            result += 48;
          }
          while (v17 != v30);
          uint64_t v23 = v17;
          uint64_t result = v31;
        }
        LODWORD(v6) = v6 - 1;
        do
        {
          *(unsigned char *)(v22 + v23++) = (9617 * *(unsigned __int8 *)(result + 1)
                                   + 1868 * *(unsigned __int8 *)(result + v7)
                                   + 4899 * *(unsigned __int8 *)(result + v8)
                                   + 0x2000) >> 14;
          result += 3;
        }
        while (a5 != v23);
        result += v9;
        v22 += a4;
        ++v12;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v11 = 0;
        LODWORD(v6) = v6 - 1;
        do
        {
          *(unsigned char *)(a3 + v11++) = (9617 * *(unsigned __int8 *)(result + 1)
                                  + 1868 * *(unsigned __int8 *)(result + v7)
                                  + 4899 * *(unsigned __int8 *)(result + v8)
                                  + 0x2000) >> 14;
          result += 3;
        }
        while (a5 != v11);
        result += v9;
        a3 += a4;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_1002EF6E8(uint64_t result, int a2, uint64_t a3, int a4, unint64_t a5, int a6, int a7)
{
  unint64_t v7 = HIDWORD(a5);
  if (HIDWORD(a5) && (int)a5 >= 1)
  {
    uint64_t v8 = a2 - (int)a5 * a6;
    do
    {
      uint64_t v9 = 0;
      LODWORD(v7) = v7 - 1;
      do
      {
        *(_WORD *)(a3 + v9) = (9617 * *(unsigned __int16 *)(result + 2)
                             + 1868 * *(unsigned __int16 *)(result + 4 * (a7 != 0))
                             + 4899 * *(unsigned __int16 *)(result + 2 * ((2 * (a7 != 0)) ^ 2u))
                             + 0x2000) >> 14;
        v9 += 2;
        result += 2 * a6;
      }
      while (2 * a5 != v9);
      result += 2 * v8;
      a3 += 2 * a4;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1002EF780(uint64_t result, int a2, unint64_t a3, int a4, unint64_t a5, int a6)
{
  unint64_t v6 = HIDWORD(a5);
  if (HIDWORD(a5) && (int)a5 >= 1)
  {
    uint64_t v7 = 2 * (a6 != 0);
    uint64_t v8 = v7 ^ 2;
    uint64_t v9 = a2 - 4 * (int)a5;
    if ((a5 & 0xF) != 0) {
      uint64_t v10 = a5 & 0xF;
    }
    else {
      uint64_t v10 = 16;
    }
    if (a5 >= 0x11uLL)
    {
      uint64_t v12 = 0;
      uint16x8_t v13 = (uint16x8_t)vdupq_n_s16(0x74Cu);
      uint16x8_t v14 = (uint16x8_t)vdupq_n_s16(0x2591u);
      uint16x8_t v15 = (uint16x8_t)vdupq_n_s16(0x1323u);
      uint64_t v16 = a5 - v10;
      v17.i64[0] = 0x200000002000;
      v17.i64[1] = 0x200000002000;
      unint64_t v18 = a3;
      do
      {
        uint64_t v19 = 0;
        unint64_t v20 = a3 + a5 + v12 * a4;
        BOOL v22 = v18 < result + 4 * (unint64_t)a5 - 2 && result + 1 < v20;
        BOOL v24 = v18 < result + (v7 & 0xFFFFFFFC00000003 | (4 * a5)) - 3 && result + v7 < v20;
        BOOL v25 = result + v8 >= v20 || v18 >= result + (v8 & 0xFFFFFFFC00000003 | (4 * a5)) - 3;
        if (v25 && !v22 && !v24)
        {
          uint64_t v26 = 0;
          uint64_t v27 = result + 4 * v16;
          do
          {
            BOOL v28 = (const char *)(result + v7);
            unsigned long long v29 = (unsigned __int128)vld4q_s8(v28);
            uint16x8_t v30 = vmovl_u8(*(uint8x8_t *)&v29);
            uint16x8_t v31 = vmovl_high_u8((uint8x16_t)v29);
            int v32 = (const char *)(result + 1);
            unsigned long long v33 = (unsigned __int128)vld4q_s8(v32);
            uint32x4_t v34 = vmull_high_u16(v30, v13);
            uint16x8_t v35 = vmovl_high_u8((uint8x16_t)v33);
            uint16x8_t v36 = vmovl_u8(*(uint8x8_t *)&v33);
            unsigned int v37 = (const char *)(result + v8);
            unsigned long long v38 = (unsigned __int128)vld4q_s8(v37);
            uint16x8_t v39 = vmovl_u8(*(uint8x8_t *)&v38);
            uint16x8_t v40 = vmovl_high_u8((uint8x16_t)v38);
            uint32x4_t v41 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v13.i8), *(uint16x4_t *)v36.i8, *(uint16x4_t *)v14.i8), *(uint16x4_t *)v39.i8, *(uint16x4_t *)v15.i8), v17);
            uint32x4_t v42 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(v34, v36, v14), v39, v15), v17);
            v43.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v31, v13), v35, v14), v40, v15), v17), 0xEuLL);
            v43.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v13.i8), *(uint16x4_t *)v35.i8, *(uint16x4_t *)v14.i8), *(uint16x4_t *)v40.i8, *(uint16x4_t *)v15.i8), v17), 0xEuLL);
            v43.val[1] = (int8x16_t)vshrq_n_u32(v42, 0xEuLL);
            v43.val[0] = (int8x16_t)vshrq_n_u32(v41, 0xEuLL);
            *(int8x16_t *)(v18 + v26) = vqtbl4q_s8(v43, (int8x16_t)xmmword_1004047C0);
            v26 += 16;
            result += 64;
          }
          while (v16 != v26);
          uint64_t v19 = v16;
          uint64_t result = v27;
        }
        LODWORD(v6) = v6 - 1;
        do
        {
          *(unsigned char *)(v18 + v19++) = (9617 * *(unsigned __int8 *)(result + 1)
                                   + 1868 * *(unsigned __int8 *)(result + v7)
                                   + 4899 * *(unsigned __int8 *)(result + v8)
                                   + 0x2000) >> 14;
          result += 4;
        }
        while (a5 != v19);
        result += v9;
        v18 += a4;
        ++v12;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v11 = 0;
        LODWORD(v6) = v6 - 1;
        do
        {
          *(unsigned char *)(a3 + v11++) = (9617 * *(unsigned __int8 *)(result + 1)
                                  + 1868 * *(unsigned __int8 *)(result + v7)
                                  + 4899 * *(unsigned __int8 *)(result + v8)
                                  + 0x2000) >> 14;
          result += 4;
        }
        while (a5 != v11);
        result += v9;
        a3 += a4;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_1002EF9D4(uint64_t result, int a2, char *a3, int a4, unint64_t a5, int a6)
{
  unint64_t v6 = HIDWORD(a5);
  if (HIDWORD(a5) && (int)a5 >= 1)
  {
    uint64_t v7 = 2 * (a6 != 0);
    uint64_t v8 = v7 ^ 2;
    uint64_t v9 = -3 * (int)a5 + a4;
    uint64_t v10 = a2 - 4 * (int)a5;
    if ((a5 & 0xF) != 0) {
      uint64_t v11 = a5 & 0xF;
    }
    else {
      uint64_t v11 = 16;
    }
    if (a5 >= 0x11uLL)
    {
      uint64_t v14 = a5 - v11;
      do
      {
        int v15 = 0;
        unint64_t v16 = (unint64_t)&a3[3 * (a5 - 1) + 3];
        BOOL v18 = (unint64_t)a3 < result + ((4 * (a5 - 1)) | 2uLL) && result + 1 < v16;
        BOOL v20 = (unint64_t)a3 < result + (v7 | (4 * (a5 - 1)) | 1uLL) && result + v7 < v16;
        BOOL v21 = result + v8 >= v16
           || (unint64_t)a3 >= result + (v8 & 0xFFFFFFFC00000003 | (4 * (a5 - 1)) | 1);
        if (v21 && !v18 && !v20)
        {
          uint64_t v22 = result + 4 * v14;
          uint64_t v23 = &a3[3 * v14];
          uint64_t v24 = a5 - v11;
          do
          {
            BOOL v25 = (const char *)(result + v7);
            v32.val[0] = (int8x16_t)vld4q_s8(v25);
            uint64_t v26 = (const char *)(result + 1);
            unsigned long long v27 = (unsigned __int128)vld4q_s8(v26);
            BOOL v28 = (const char *)(result + v8);
            unsigned long long v29 = (unsigned __int128)vld4q_s8(v28);
            v32.val[1] = (int8x16_t)v27;
            v32.val[2] = (int8x16_t)v29;
            vst3q_s8(a3, v32);
            a3 += 48;
            result += 64;
            v24 -= 16;
          }
          while (v24);
          uint64_t result = v22;
          int v15 = a5 - v11;
          a3 = v23;
        }
        LODWORD(v6) = v6 - 1;
        int v30 = a5 - v15;
        do
        {
          char v31 = *(unsigned char *)(result + 1);
          *a3 = *(unsigned char *)(result + v7);
          a3[1] = v31;
          a3[2] = *(unsigned char *)(result + v8);
          a3 += 3;
          result += 4;
          --v30;
        }
        while (v30);
        a3 += v9;
        result += v10;
      }
      while (v6);
    }
    else
    {
      do
      {
        LODWORD(v6) = v6 - 1;
        int v12 = a5;
        do
        {
          char v13 = *(unsigned char *)(result + 1);
          *a3 = *(unsigned char *)(result + v7);
          a3[1] = v13;
          a3[2] = *(unsigned char *)(result + v8);
          a3 += 3;
          result += 4;
          --v12;
        }
        while (v12);
        a3 += v9;
        result += v10;
      }
      while (v6);
    }
  }
  return result;
}

const char *sub_1002EFB7C(const char *result, int a2, char *a3, int a4, unint64_t a5)
{
  unint64_t v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1) {
    return result;
  }
  uint64_t v6 = 3 * (int)a5;
  uint64_t v7 = a2 - (uint64_t)(int)v6;
  uint64_t v8 = a4 - v6;
  if (a5 >= 0x20uLL)
  {
    uint64_t v12 = 3 * (a5 - 1) + 3;
    unint64_t v13 = 3 * (a5 - (a5 & 0x1F));
    while (1)
    {
      if (a3 >= &result[v12] || result >= &a3[v12])
      {
        int v15 = &result[v13];
        unint64_t v16 = &a3[v13];
        unint64_t v17 = a5 - (a5 & 0x1F);
        do
        {
          BOOL v18 = result;
          int8x16x3_t v24 = vld3q_s8(v18);
          v18 += 48;
          v26.val[0] = v24.val[2];
          v26.val[1] = v24.val[1];
          v26.val[2] = v24.val[0];
          int8x16x3_t v25 = vld3q_s8(v18);
          v27.val[0] = v25.val[2];
          v27.val[1] = v25.val[1];
          v27.val[2] = v25.val[0];
          uint64_t v19 = a3 + 96;
          vst3q_s8(a3, v26);
          BOOL v20 = a3 + 48;
          vst3q_s8(v20, v27);
          result += 96;
          a3 = v19;
          v17 -= 32;
        }
        while (v17);
        int v14 = a5 - (a5 & 0x1F);
        if ((a5 & 0x1F) == 0) {
          goto LABEL_9;
        }
      }
      else
      {
        int v14 = 0;
        int v15 = result;
        unint64_t v16 = a3;
      }
      int v21 = a5 - v14;
      do
      {
        char v22 = v15[1];
        char v23 = v15[2];
        void v16[2] = *v15;
        v16[1] = v22;
        *unint64_t v16 = v23;
        v16 += 3;
        v15 += 3;
        --v21;
      }
      while (v21);
LABEL_9:
      uint64_t result = &v15[v7];
      a3 = &v16[v8];
      LODWORD(v5) = v5 - 1;
      if (!v5) {
        return result;
      }
    }
  }
  do
  {
    LODWORD(v5) = v5 - 1;
    int v9 = a5;
    do
    {
      char v10 = result[1];
      char v11 = result[2];
      a3[2] = *result;
      a3[1] = v10;
      *a3 = v11;
      a3 += 3;
      result += 3;
      --v9;
    }
    while (v9);
    result += v7;
    a3 += v8;
  }
  while (v5);
  return result;
}

const __int16 *sub_1002EFCC4(const __int16 *result, int a2, __int16 *a3, int a4, unint64_t a5)
{
  unint64_t v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1) {
    return result;
  }
  int v6 = 3 * a5;
  if (a5 >= 0x10uLL)
  {
    uint64_t v13 = a2 - v6;
    uint64_t v14 = a4 - v6;
    uint64_t v15 = 6 * (a5 - 1) + 6;
    unint64_t v16 = 3 * (a5 - (a5 & 0xF));
    while (1)
    {
      if (a3 >= (const __int16 *)((char *)result + v15) || result >= (__int16 *)((char *)a3 + v15))
      {
        BOOL v18 = &result[v16];
        uint64_t v19 = &a3[v16];
        unint64_t v20 = a5 - (a5 & 0xF);
        do
        {
          int v21 = result;
          int16x8x3_t v27 = vld3q_s16(v21);
          v21 += 24;
          v29.val[0] = v27.val[2];
          v29.val[1] = v27.val[1];
          v29.val[2] = v27.val[0];
          int16x8x3_t v28 = vld3q_s16(v21);
          v30.val[0] = v28.val[2];
          v30.val[1] = v28.val[1];
          v30.val[2] = v28.val[0];
          char v22 = a3 + 48;
          vst3q_s16(a3, v29);
          char v23 = a3 + 24;
          vst3q_s16(v23, v30);
          result += 48;
          a3 = v22;
          v20 -= 16;
        }
        while (v20);
        int v17 = a5 - (a5 & 0xF);
        if ((a5 & 0xF) == 0) {
          goto LABEL_10;
        }
      }
      else
      {
        int v17 = 0;
        BOOL v18 = result;
        uint64_t v19 = a3;
      }
      int v24 = a5 - v17;
      do
      {
        __int16 v25 = v18[1];
        __int16 v26 = v18[2];
        uint64_t v19[2] = *v18;
        v19[1] = v25;
        __int16 *v19 = v26;
        v19 += 3;
        v18 += 3;
        --v24;
      }
      while (v24);
LABEL_10:
      uint64_t result = &v18[v13];
      a3 = &v19[v14];
      LODWORD(v5) = v5 - 1;
      if (!v5) {
        return result;
      }
    }
  }
  uint64_t v7 = 2 * v6;
  uint64_t v8 = 2 * a2 - v7;
  uint64_t v9 = 2 * a4 - v7;
  do
  {
    LODWORD(v5) = v5 - 1;
    int v10 = a5;
    do
    {
      __int16 v11 = result[1];
      __int16 v12 = result[2];
      a3[2] = *result;
      a3[1] = v11;
      *a3 = v12;
      a3 += 3;
      result += 3;
      --v10;
    }
    while (v10);
    uint64_t result = (const __int16 *)((char *)result + v8);
    a3 = (__int16 *)((char *)a3 + v9);
  }
  while (v5);
  return result;
}

uint16x8_t *sub_1002EFE20(uint16x8_t *result, int a2, unint64_t a3, int a4, unint64_t a5)
{
  unint64_t v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1) {
    return result;
  }
  if (a5 >= 8uLL)
  {
    uint64_t v7 = 0;
    v8.i64[0] = 0xF8000000F8;
    v8.i64[1] = 0xF8000000F8;
    uint16x4_t v9 = (uint16x4_t)vdup_n_s16(0x74Cu);
    uint16x4_t v10 = (uint16x4_t)vdup_n_s16(0x2591u);
    uint16x4_t v11 = (uint16x4_t)vdup_n_s16(0x1323u);
    v12.i64[0] = 0x200000002000;
    v12.i64[1] = 0x200000002000;
    uint64_t v13 = result;
    unint64_t v14 = a3;
    while (1)
    {
      if (v14 >= (unint64_t)result + 2 * a5 + v7 * a2
        || (unint64_t)v13 >= a3 + a5 + v7 * a4)
      {
        if (a5 < 0x10uLL)
        {
          unint64_t v16 = 0;
LABEL_21:
          uint64_t v26 = 2 * v16;
          do
          {
            uint16x8_t v27 = *(uint16x8_t *)((char *)v13 + v26);
            uint32x4_t v28 = vmovl_u16(*(uint16x4_t *)v27.i8);
            uint32x4_t v29 = vmovl_high_u16(v27);
            v30.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v29, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v27, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v29, 7uLL), v8)), v11), v12), 0xEuLL);
            v30.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v28, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v27.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v28, 7uLL), v8)), v11), v12), 0xEuLL);
            *(void *)(v14 + v16) = vqtbl2q_s8(v30, (int8x16_t)xmmword_1004047D0).u64[0];
            v16 += 8;
            v26 += 16;
          }
          while (a5 - (a5 & 7) != v16);
          unint64_t v17 = a5 - (a5 & 7);
          if ((a5 & 7) == 0) {
            goto LABEL_9;
          }
          goto LABEL_24;
        }
        uint64_t v18 = 0;
        uint64_t v19 = v13;
        do
        {
          uint16x8_t v21 = *v19;
          uint16x8_t v20 = v19[1];
          v19 += 2;
          uint32x4_t v22 = vmovl_u16(*(uint16x4_t *)v21.i8);
          uint32x4_t v23 = vmovl_u16(*(uint16x4_t *)v20.i8);
          uint32x4_t v24 = vmovl_high_u16(v21);
          uint32x4_t v25 = vmovl_high_u16(v20);
          v31.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v25, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v20, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v25, 7uLL), v8)), v11), v12), 0xEuLL);
          v31.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v24, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v21, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v24, 7uLL), v8)), v11), v12), 0xEuLL);
          v31.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v23, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v20.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v23, 7uLL), v8)), v11), v12), 0xEuLL);
          v31.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v22, 2uLL), v8)), v10), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v21.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v22, 7uLL), v8)), v11), v12), 0xEuLL);
          *(int8x16_t *)(v14 + v18) = vqtbl4q_s8(v31, (int8x16_t)xmmword_1004047C0);
          v18 += 16;
        }
        while (a5 - (a5 & 0xF) != v18);
        if ((a5 & 0xF) == 0) {
          goto LABEL_9;
        }
        unint64_t v16 = a5 - (a5 & 0xF);
        unint64_t v17 = v16;
        if ((a5 & 0xF) >= 8) {
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v17 = 0;
      }
      do
      {
LABEL_24:
        *(unsigned char *)(v14 + v17) = (14944 * (v13->i16[v17] & 0x1F)
                               + 9617 * ((v13->u16[v17] >> 2) & 0xF8)
                               + 4899 * ((v13->u16[v17] >> 7) & 0xF8u)
                               + 0x2000) >> 14;
        ++v17;
      }
      while (a5 != v17);
LABEL_9:
      v14 += a4;
      uint64_t v13 = (uint16x8_t *)((char *)v13 + a2);
      ++v7;
      LODWORD(v5) = v5 - 1;
      if (!v5) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v6 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      *(unsigned char *)(a3 + v6) = (14944 * (result->i16[v6] & 0x1F)
                           + 9617 * ((result->u16[v6] >> 2) & 0xF8)
                           + 4899 * ((result->u16[v6] >> 7) & 0xF8u)
                           + 0x2000) >> 14;
      ++v6;
    }
    while (a5 != v6);
    a3 += a4;
    uint64_t result = (uint16x8_t *)((char *)result + a2);
  }
  while (v5);
  return result;
}

uint16x8_t *sub_1002F0154(uint16x8_t *result, int a2, unint64_t a3, int a4, unint64_t a5)
{
  unint64_t v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1) {
    return result;
  }
  if (a5 >= 8uLL)
  {
    uint64_t v7 = 0;
    v8.i64[0] = 0xF8000000F8;
    v8.i64[1] = 0xF8000000F8;
    uint16x4_t v9 = (uint16x4_t)vdup_n_s16(0x74Cu);
    v10.i64[0] = 0xFC000000FCLL;
    v10.i64[1] = 0xFC000000FCLL;
    uint16x4_t v11 = (uint16x4_t)vdup_n_s16(0x2591u);
    uint16x4_t v12 = (uint16x4_t)vdup_n_s16(0x1323u);
    v13.i64[0] = 0x200000002000;
    v13.i64[1] = 0x200000002000;
    unint64_t v14 = result;
    unint64_t v15 = a3;
    while (1)
    {
      if (v15 >= (unint64_t)result + 2 * a5 + v7 * a2
        || (unint64_t)v14 >= a3 + a5 + v7 * a4)
      {
        if (a5 < 0x10uLL)
        {
          unint64_t v17 = 0;
LABEL_21:
          uint64_t v27 = 2 * v17;
          do
          {
            uint16x8_t v28 = *(uint16x8_t *)((char *)v14 + v27);
            uint32x4_t v29 = vmovl_u16(*(uint16x4_t *)v28.i8);
            uint32x4_t v30 = vmovl_high_u16(v28);
            v31.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v30, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v28, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v30, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
            v31.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v29, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v28.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v29, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
            *(void *)(v15 + v17) = vqtbl2q_s8(v31, (int8x16_t)xmmword_1004047D0).u64[0];
            v17 += 8;
            v27 += 16;
          }
          while (a5 - (a5 & 7) != v17);
          unint64_t v18 = a5 - (a5 & 7);
          if ((a5 & 7) == 0) {
            goto LABEL_9;
          }
          goto LABEL_24;
        }
        uint64_t v19 = 0;
        uint16x8_t v20 = v14;
        do
        {
          uint16x8_t v22 = *v20;
          uint16x8_t v21 = v20[1];
          v20 += 2;
          uint32x4_t v23 = vmovl_u16(*(uint16x4_t *)v22.i8);
          uint32x4_t v24 = vmovl_u16(*(uint16x4_t *)v21.i8);
          uint32x4_t v25 = vmovl_high_u16(v22);
          uint32x4_t v26 = vmovl_high_u16(v21);
          v32.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v26, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v21, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v26, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
          v32.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v25, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v22, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v25, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
          v32.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v24, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v21.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v24, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
          v32.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v23, 3uLL), v10)), v11), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v22.i8, 3uLL), v8)), v9), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v23, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v12), v13), 0xEuLL);
          *(int8x16_t *)(v15 + v19) = vqtbl4q_s8(v32, (int8x16_t)xmmword_1004047C0);
          v19 += 16;
        }
        while (a5 - (a5 & 0xF) != v19);
        if ((a5 & 0xF) == 0) {
          goto LABEL_9;
        }
        unint64_t v17 = a5 - (a5 & 0xF);
        unint64_t v18 = v17;
        if ((a5 & 0xF) >= 8) {
          goto LABEL_21;
        }
      }
      else
      {
        unint64_t v18 = 0;
      }
      do
      {
LABEL_24:
        *(unsigned char *)(v15 + v18) = (14944 * (v14->i16[v18] & 0x1F)
                               + 9617 * ((v14->u16[v18] >> 3) & 0xFC)
                               + 4899 * (HIBYTE(v14->u16[v18]) & 0xF8u)
                               + 0x2000) >> 14;
        ++v18;
      }
      while (a5 != v18);
LABEL_9:
      v15 += a4;
      unint64_t v14 = (uint16x8_t *)((char *)v14 + a2);
      ++v7;
      LODWORD(v5) = v5 - 1;
      if (!v5) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v6 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      *(unsigned char *)(a3 + v6) = (14944 * (result->i16[v6] & 0x1F)
                           + 9617 * ((result->u16[v6] >> 3) & 0xFC)
                           + 4899 * (HIBYTE(result->u16[v6]) & 0xF8u)
                           + 0x2000) >> 14;
      ++v6;
    }
    while (a5 != v6);
    a3 += a4;
    uint64_t result = (uint16x8_t *)((char *)result + a2);
  }
  while (v5);
  return result;
}

unint64_t sub_1002F048C(unint64_t result, int a2, char *a3, int a4, unint64_t a5)
{
  unint64_t v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1) {
    return result;
  }
  uint64_t v6 = -3 * (int)a5 + a4;
  uint64_t v7 = a2;
  uint64_t v8 = a5;
  uint64_t v9 = 2 * a5;
  if (a5 >= 0x20uLL)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a5 & 0x1F;
    uint64_t v14 = a5 - v13;
    unint64_t v15 = (int16x8_t *)(result + 32);
    v16.i64[0] = 0xF8F8F8F8F8F8F8F8;
    v16.i64[1] = 0xF8F8F8F8F8F8F8F8;
    unint64_t v17 = result;
    while (1)
    {
      if ((unint64_t)a3 >= result + v9 + v12 * v7 || v17 >= (unint64_t)&a3[v9 + v8])
      {
        uint16x8_t v28 = &a3[3 * v14];
        uint64_t v19 = v14;
        uint16x8_t v20 = v15;
        do
        {
          int16x8_t v22 = v20[-2];
          int16x8_t v21 = v20[-1];
          int16x8_t v24 = *v20;
          int16x8_t v23 = v20[1];
          v20 += 4;
          v31.val[0] = vshlq_n_s8(vuzp1q_s8((int8x16_t)v22, (int8x16_t)v21), 3uLL);
          v31.val[1] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v22, 2uLL), v21, 2uLL), v16);
          v31.val[2] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v22, 7uLL), v21, 7uLL), v16);
          v30.val[0] = vshlq_n_s8(vuzp1q_s8((int8x16_t)v24, (int8x16_t)v23), 3uLL);
          v30.val[1] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v24, 2uLL), v23, 2uLL), v16);
          v30.val[2] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v24, 7uLL), v23, 7uLL), v16);
          uint32x4_t v25 = a3 + 96;
          vst3q_s8(a3, v31);
          uint32x4_t v26 = a3 + 48;
          vst3q_s8(v26, v30);
          a3 = v25;
          v19 -= 32;
        }
        while (v19);
        uint64_t v27 = v14;
        if (!v13) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v27 = 0;
        uint16x8_t v28 = a3;
      }
      do
      {
        unsigned int v29 = *(unsigned __int16 *)(v17 + 2 * v27);
        char *v28 = 8 * v29;
        v28[1] = (v29 >> 2) & 0xF8;
        uint64_t v28[2] = (v29 >> 7) & 0xF8;
        ++v27;
        v28 += 3;
      }
      while (v8 != v27);
LABEL_9:
      a3 = &v28[v6];
      v17 += v7;
      ++v12;
      unint64_t v15 = (int16x8_t *)((char *)v15 + v7);
      LODWORD(v5) = v5 - 1;
      if (!v5) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v10 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      unsigned int v11 = *(unsigned __int16 *)(result + v10);
      *a3 = 8 * v11;
      a3[1] = (v11 >> 2) & 0xF8;
      a3[2] = (v11 >> 7) & 0xF8;
      a3 += 3;
      v10 += 2;
    }
    while (v9 != v10);
    a3 += v6;
    result += a2;
  }
  while (v5);
  return result;
}

unint64_t sub_1002F0614(unint64_t result, int a2, char *a3, int a4, unint64_t a5)
{
  unint64_t v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1) {
    return result;
  }
  uint64_t v6 = -3 * (int)a5 + a4;
  uint64_t v7 = a2;
  uint64_t v8 = a5;
  uint64_t v9 = 2 * a5;
  if (a5 >= 0x20uLL)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a5 & 0x1F;
    uint64_t v14 = a5 - v13;
    unint64_t v15 = (int16x8_t *)(result + 32);
    v16.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
    v16.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
    v17.i64[0] = 0xF8F8F8F8F8F8F8F8;
    v17.i64[1] = 0xF8F8F8F8F8F8F8F8;
    unint64_t v18 = result;
    while (1)
    {
      if ((unint64_t)a3 >= result + v9 + v12 * v7 || v18 >= (unint64_t)&a3[v9 + v8])
      {
        unsigned int v29 = &a3[3 * v14];
        uint64_t v20 = v14;
        int16x8_t v21 = v15;
        do
        {
          int16x8_t v23 = v21[-2];
          int16x8_t v22 = v21[-1];
          int16x8_t v25 = *v21;
          int16x8_t v24 = v21[1];
          v21 += 4;
          v31.val[0] = vshlq_n_s8(vuzp1q_s8((int8x16_t)v23, (int8x16_t)v22), 3uLL);
          v31.val[1] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v23, 3uLL), v22, 3uLL), v16);
          v31.val[2] = vandq_s8(vuzp2q_s8((int8x16_t)v23, (int8x16_t)v22), v17);
          v32.val[0] = vshlq_n_s8(vuzp1q_s8((int8x16_t)v25, (int8x16_t)v24), 3uLL);
          v32.val[1] = vandq_s8(vshrn_high_n_s16(vshrn_n_s16(v25, 3uLL), v24, 3uLL), v16);
          v32.val[2] = vandq_s8(vuzp2q_s8((int8x16_t)v25, (int8x16_t)v24), v17);
          uint32x4_t v26 = a3 + 96;
          vst3q_s8(a3, v31);
          uint64_t v27 = a3 + 48;
          vst3q_s8(v27, v32);
          a3 = v26;
          v20 -= 32;
        }
        while (v20);
        uint64_t v28 = v14;
        if (!v13) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v28 = 0;
        unsigned int v29 = a3;
      }
      do
      {
        unsigned int v30 = *(unsigned __int16 *)(v18 + 2 * v28);
        char *v29 = 8 * v30;
        v29[1] = (v30 >> 3) & 0xFC;
        uint64_t v29[2] = BYTE1(v30) & 0xF8;
        ++v28;
        v29 += 3;
      }
      while (v8 != v28);
LABEL_9:
      a3 = &v29[v6];
      v18 += v7;
      ++v12;
      unint64_t v15 = (int16x8_t *)((char *)v15 + v7);
      LODWORD(v5) = v5 - 1;
      if (!v5) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v10 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      unsigned int v11 = *(unsigned __int16 *)(result + v10);
      *a3 = 8 * v11;
      a3[1] = (v11 >> 3) & 0xFC;
      a3[2] = BYTE1(v11) & 0xF8;
      a3 += 3;
      v10 += 2;
    }
    while (v9 != v10);
    a3 += v6;
    result += a2;
  }
  while (v5);
  return result;
}

unsigned __int8 *sub_1002F0798(unsigned __int8 *result, int a2, char *a3, int a4, unint64_t a5)
{
  unint64_t v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1) {
    return result;
  }
  uint64_t v6 = -3 * (int)a5 + a4;
  uint64_t v7 = a2 - 4 * (int)a5;
  if (a5 >= 0x10uLL)
  {
    unint64_t v12 = a5 - (a5 & 0xF);
    while (1)
    {
      if (a3 >= (char *)&result[4 * (a5 - 1) + 4]
        || result >= (unsigned __int8 *)&a3[3 * (a5 - 1) + 3])
      {
        uint64_t v14 = &result[4 * v12];
        unint64_t v15 = &a3[3 * v12];
        unint64_t v16 = a5 - (a5 & 0xF);
        do
        {
          int8x16x4_t v34 = vld4q_s8((const char *)result);
          result += 64;
          uint8x16_t v17 = (uint8x16_t)vmvnq_s8(v34.val[0]);
          uint16x8_t v18 = vmovl_high_u8(v17);
          uint16x8_t v19 = vmovl_u8(*(uint8x8_t *)v17.i8);
          uint16x8_t v20 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(v34.val[3], (int8x16_t)xmmword_100404890), (int16x8_t)vqtbl1q_s8(v34.val[3], (int8x16_t)xmmword_1004048A0));
          uint16x8_t v21 = (uint16x8_t)vuzp1q_s16((int16x8_t)vqtbl1q_s8(v34.val[3], (int8x16_t)xmmword_1004048B0), (int16x8_t)vqtbl1q_s8(v34.val[3], (int8x16_t)xmmword_1004048C0));
          v35.val[3] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v21, v18), 8uLL);
          v35.val[2] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v18.i8), 8uLL);
          v35.val[1] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v20, v19), 8uLL);
          v35.val[0] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8), 8uLL);
          uint8x16_t v22 = (uint8x16_t)vmvnq_s8(v34.val[1]);
          uint16x8_t v23 = vmovl_high_u8(v22);
          uint16x8_t v24 = vmovl_u8(*(uint8x8_t *)v22.i8);
          v36.val[3] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v21, v23), 8uLL);
          v36.val[2] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v23.i8), 8uLL);
          v36.val[1] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v20, v24), 8uLL);
          v36.val[0] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v24.i8), 8uLL);
          uint8x16_t v25 = (uint8x16_t)vmvnq_s8(v34.val[2]);
          uint16x8_t v26 = vmovl_high_u8(v25);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v25.i8);
          v33.val[3] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v21, v26), 8uLL);
          v33.val[2] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v26.i8), 8uLL);
          v33.val[1] = (int8x16_t)vshrq_n_u32(vmull_high_u16(v20, v27), 8uLL);
          v33.val[0] = (int8x16_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v27.i8), 8uLL);
          v32.val[2] = vsubq_s8(v34.val[3], vqtbl4q_s8(v35, (int8x16_t)xmmword_1004047C0));
          v32.val[1] = vsubq_s8(v34.val[3], vqtbl4q_s8(v36, (int8x16_t)xmmword_1004047C0));
          v32.val[0] = vsubq_s8(v34.val[3], vqtbl4q_s8(v33, (int8x16_t)xmmword_1004047C0));
          vst3q_s8(a3, v32);
          a3 += 48;
          v16 -= 16;
        }
        while (v16);
        int v13 = a5 - (a5 & 0xF);
        if ((a5 & 0xF) == 0) {
          goto LABEL_9;
        }
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = result;
        unint64_t v15 = a3;
      }
      int v28 = a5 - v13;
      do
      {
        __int16 v29 = v14[3];
        __int16 v30 = v29 * (v14[1] ^ 0xFF);
        __int16 v31 = v29 * (v14[2] ^ 0xFF);
        uint64_t v15[2] = v29 - ((unsigned __int16)(v29 * (*v14 ^ 0xFF)) >> 8);
        v15[1] = v29 - HIBYTE(v30);
        *unint64_t v15 = v29 - HIBYTE(v31);
        v15 += 3;
        v14 += 4;
        --v28;
      }
      while (v28);
LABEL_9:
      a3 = &v15[v6];
      uint64_t result = &v14[v7];
      LODWORD(v5) = v5 - 1;
      if (!v5) {
        return result;
      }
    }
  }
  do
  {
    LODWORD(v5) = v5 - 1;
    int v8 = a5;
    do
    {
      __int16 v9 = result[3];
      __int16 v10 = v9 * (result[1] ^ 0xFF);
      __int16 v11 = v9 * (result[2] ^ 0xFF);
      a3[2] = v9 - ((unsigned __int16)(v9 * (*result ^ 0xFF)) >> 8);
      a3[1] = v9 - HIBYTE(v10);
      *a3 = v9 - HIBYTE(v11);
      a3 += 3;
      result += 4;
      --v8;
    }
    while (v8);
    a3 += v6;
    result += v7;
  }
  while (v5);
  return result;
}

char *sub_1002F09F4(char *result, int a2, unint64_t a3, int a4, unint64_t a5)
{
  unint64_t v5 = HIDWORD(a5);
  if (!HIDWORD(a5) || (int)a5 < 1) {
    return result;
  }
  uint64_t v6 = a4;
  uint64_t v7 = a2 - 4 * (int)a5;
  uint64_t v8 = a5;
  if (a5 >= 0x10uLL)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a5 & 0xF;
    uint64_t v13 = a5 - v12;
    int32x4_t v14 = vdupq_n_s32(0x74Cu);
    int32x4_t v15 = vdupq_n_s32(0x2591u);
    int32x4_t v16 = vdupq_n_s32(0x1323u);
    v17.i64[0] = 0x200000002000;
    v17.i64[1] = 0x200000002000;
    unint64_t v18 = a3;
    while (1)
    {
      if (v18 >= (unint64_t)&result[4 * v8] || (unint64_t)result >= a3 + v8 + v11 * a4)
      {
        uint64_t v21 = 0;
        uint16x8_t v20 = (unsigned __int8 *)&result[4 * v13];
        do
        {
          int8x16x4_t v35 = vld4q_s8(result);
          result += 64;
          int16x8_t v22 = (int16x8_t)vqtbl1q_s8(v35.val[3], (int8x16_t)xmmword_1004048A0);
          int16x8_t v23 = (int16x8_t)vqtbl1q_s8(v35.val[3], (int8x16_t)xmmword_100404890);
          int16x8_t v24 = (int16x8_t)vqtbl1q_s8(v35.val[3], (int8x16_t)xmmword_1004048C0);
          int16x8_t v25 = (int16x8_t)vqtbl1q_s8(v35.val[3], (int8x16_t)xmmword_1004048B0);
          uint8x16_t v26 = (uint8x16_t)vmvnq_s8(v35.val[0]);
          uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v26.i8);
          uint16x8_t v28 = vmovl_high_u8(v26);
          uint16x8_t v29 = (uint16x8_t)vuzp1q_s16(v25, v24);
          uint16x8_t v30 = (uint16x8_t)vuzp1q_s16(v23, v22);
          uint8x16_t v31 = (uint8x16_t)vmvnq_s8(v35.val[1]);
          uint16x8_t v32 = vmovl_high_u8(v31);
          uint16x8_t v33 = vmovl_u8(*(uint8x8_t *)v31.i8);
          v35.val[0] = vmvnq_s8(v35.val[2]);
          v35.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v35.val[0]);
          v35.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v35.val[0].i8);
          v35.val[2] = (int8x16_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vsubq_s32((int32x4_t)v23, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v35.val[0].i8), 8uLL)), v14), vsubq_s32((int32x4_t)v23, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v33.i8), 8uLL)), v15), vsubq_s32((int32x4_t)v23, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v27.i8),
                                                     8uLL)),
                                      v16),
                                    v17);
          v35.val[3] = (int8x16_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vsubq_s32((int32x4_t)v25, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v35.val[1].i8), 8uLL)), v14), vsubq_s32((int32x4_t)v25, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v32.i8), 8uLL)), v15), vsubq_s32((int32x4_t)v25, (int32x4_t)vshrq_n_u32(vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v28.i8),
                                                     8uLL)),
                                      v16),
                                    v17);
          v36.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vsubq_s32((int32x4_t)v24, (int32x4_t)vshrq_n_u32(vmull_high_u16(v29, (uint16x8_t)v35.val[1]), 8uLL)), v14), vsubq_s32((int32x4_t)v24, (int32x4_t)vshrq_n_u32(vmull_high_u16(v29, v32), 8uLL)), v15), vsubq_s32((int32x4_t)v24, (int32x4_t)vshrq_n_u32(vmull_high_u16(v29, v28), 8uLL)), v16), v17),
                                    0xEuLL);
          v36.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)v35.val[3], 0xEuLL);
          v36.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(vsubq_s32((int32x4_t)v22, (int32x4_t)vshrq_n_u32(vmull_high_u16(v30, (uint16x8_t)v35.val[0]), 8uLL)), v14), vsubq_s32((int32x4_t)v22, (int32x4_t)vshrq_n_u32(vmull_high_u16(v30, v33), 8uLL)), v15), vsubq_s32((int32x4_t)v22, (int32x4_t)vshrq_n_u32(vmull_high_u16(v30, v27), 8uLL)), v16), v17),
                                    0xEuLL);
          v36.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v35.val[2], 0xEuLL);
          *(int8x16_t *)(v18 + v21) = vqtbl4q_s8(v36, (int8x16_t)xmmword_1004047C0);
          v21 += 16;
        }
        while (v13 != v21);
        uint64_t v19 = v13;
        if (!v12) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v19 = 0;
        uint16x8_t v20 = (unsigned __int8 *)result;
      }
      do
      {
        int v34 = v20[3];
        *(unsigned char *)(v18 + v19++) = (1868 * (v34 - ((v34 * (v20[2] ^ 0xFFu)) >> 8))
                                 + 9617 * (v34 - ((v34 * (v20[1] ^ 0xFFu)) >> 8))
                                 + 4899 * (v34 - ((v34 * (*v20 ^ 0xFFu)) >> 8))
                                 + 0x2000) >> 14;
        v20 += 4;
      }
      while (v8 != v19);
LABEL_9:
      v18 += a4;
      uint64_t result = (char *)&v20[v7];
      ++v11;
      LODWORD(v5) = v5 - 1;
      if (!v5) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v9 = 0;
    LODWORD(v5) = v5 - 1;
    do
    {
      int v10 = result[3];
      *(unsigned char *)(a3 + v9++) = (1868 * (v10 - ((v10 * (result[2] ^ 0xFFu)) >> 8))
                             + 9617 * (v10 - ((v10 * (result[1] ^ 0xFFu)) >> 8))
                             + 4899 * (v10 - ((v10 * (*result ^ 0xFFu)) >> 8))
                             + 0x2000) >> 14;
      result += 4;
    }
    while (a5 != v9);
    a3 += v6;
    result += v7;
  }
  while (v5);
  return result;
}

const char *sub_1002F0CF4(const char *result, unint64_t a2, unsigned int a3)
{
  if ((int)a3 >= 1)
  {
    if (a3 < 9
      || ((unint64_t)&result[4 * a3 - 1] > a2 ? (BOOL v3 = a2 + a3 > (unint64_t)result) : (BOOL v3 = 0), v3))
    {
      uint64_t v4 = 0;
    }
    else
    {
      if (a3 >= 0x11)
      {
        unint64_t v11 = 16;
        if ((a3 & 0xF) != 0) {
          unint64_t v11 = a3 & 0xF;
        }
        uint64_t v4 = a3 - v11;
        uint16x8_t v12 = (uint16x8_t)vdupq_n_s16(0x74Cu);
        uint16x8_t v13 = (uint16x8_t)vdupq_n_s16(0x2591u);
        uint16x8_t v14 = (uint16x8_t)vdupq_n_s16(0x1323u);
        v15.i64[0] = 0x200000002000;
        v15.i64[1] = 0x200000002000;
        uint64_t v16 = a3;
        int32x4_t v17 = (int8x16_t *)a2;
        unint64_t v18 = result;
        do
        {
          int8x16x4_t v40 = vld4q_s8(v18);
          v18 += 64;
          uint16x8_t v19 = vmovl_u8(*(uint8x8_t *)v40.val[0].i8);
          uint16x8_t v20 = vmovl_high_u8((uint8x16_t)v40.val[0]);
          uint16x8_t v21 = vmovl_high_u8((uint8x16_t)v40.val[1]);
          uint16x8_t v22 = vmovl_u8(*(uint8x8_t *)v40.val[1].i8);
          uint16x8_t v23 = vmovl_u8(*(uint8x8_t *)v40.val[2].i8);
          v40.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v40.val[2]);
          uint32x4_t v24 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v20, v12), v21, v13), (uint16x8_t)v40.val[0], v14), v15), 0xEuLL);
          v40.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v12.i8), *(uint16x4_t *)v21.i8, *(uint16x4_t *)v13.i8), *(uint16x4_t *)v40.val[0].i8, *(uint16x4_t *)v14.i8), v15), 0xEuLL);
          v40.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v19, v12), v22, v13), v23, v14), v15), 0xEuLL);
          v40.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v19.i8, *(uint16x4_t *)v12.i8), *(uint16x4_t *)v22.i8, *(uint16x4_t *)v13.i8), *(uint16x4_t *)v23.i8, *(uint16x4_t *)v14.i8), v15), 0xEuLL);
          *v17++ = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v40 + 16), (int8x16_t)xmmword_1004047C0);
          v16 -= 16;
        }
        while (v11 != v16);
        if (v11 < 9) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if ((a3 & 7) != 0) {
        uint64_t v25 = a3 & 7;
      }
      else {
        uint64_t v25 = 8;
      }
      uint8x16_t v26 = &result[4 * v4];
      uint16x8_t v27 = (void *)(a2 + v4);
      uint64_t v28 = v25 + v4;
      uint64_t v4 = a3 - v25;
      uint64_t v29 = v28 - a3;
      uint16x8_t v30 = (uint16x8_t)vdupq_n_s16(0x74Cu);
      uint16x8_t v31 = (uint16x8_t)vdupq_n_s16(0x2591u);
      uint16x8_t v32 = (uint16x8_t)vdupq_n_s16(0x1323u);
      v33.i64[0] = 0x200000002000;
      v33.i64[1] = 0x200000002000;
      do
      {
        int8x8x4_t v39 = vld4_s8(v26);
        v26 += 32;
        uint16x8_t v34 = vmovl_u8((uint8x8_t)v39.val[0]);
        uint32x4_t v35 = vmull_high_u16(v34, v30);
        uint16x8_t v36 = vmovl_u8((uint8x8_t)v39.val[1]);
        *(uint16x8_t *)v39.val[0].i8 = vmovl_u8((uint8x8_t)v39.val[2]);
        uint32x4_t v37 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v34.i8, *(uint16x4_t *)v30.i8), *(uint16x4_t *)v36.i8, *(uint16x4_t *)v31.i8), (uint16x4_t)v39.val[0], *(uint16x4_t *)v32.i8), v33);
        v38.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmlal_high_u16(v35, v36, v31), *(uint16x8_t *)v39.val[0].i8, v32), v33), 0xEuLL);
        v38.val[0] = (int8x16_t)vshrq_n_u32(v37, 0xEuLL);
        *v27++ = vqtbl2q_s8(v38, (int8x16_t)xmmword_1004047D0).u64[0];
        v29 += 8;
      }
      while (v29);
    }
LABEL_10:
    unint64_t v5 = (unsigned char *)(a2 + v4);
    uint64_t v6 = &result[4 * v4 + 2];
    uint64_t v7 = a3 - v4;
    do
    {
      int v8 = *((unsigned __int8 *)v6 - 2);
      int v9 = 9617 * *((unsigned __int8 *)v6 - 1);
      int v10 = *(unsigned __int8 *)v6;
      v6 += 4;
      *v5++ = (v9 + 1868 * v8 + 4899 * v10 + 0x2000) >> 14;
      --v7;
    }
    while (v7);
  }
  return result;
}

int8x8_t *sub_1002F0ED8(int8x8_t *result, int a2, int a3, double a4, int8x16_t a5)
{
  if (a3) {
    __int16 v5 = 255;
  }
  else {
    __int16 v5 = 0;
  }
  if (a2 != 31)
  {
    LODWORD(v6) = 1 << a2;
    int v7 = (1 << a2) - 1;
    if (1 << a2 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v6;
    }
    if (v6 < 2) {
      goto LABEL_12;
    }
    int v8 = 255;
    uint64_t v9 = v6 & 0x7FFFFFFE;
    int v10 = result;
    do
    {
      a5.i64[0] = (((v8 - 255) / v7) ^ v5);
      *(__int32 *)((char *)a5.i32 + 2) = ((v8 / v7) ^ v5);
      a5.i64[1] = (((v8 - 255) / v7) ^ v5);
      *(__int32 *)((char *)&a5.i32[2] + 2) = *(__int32 *)((char *)a5.i32 + 2);
      *v10++ = vqtbl1_s8(a5, (int8x8_t)0x302020201000000);
      v8 += 510;
      v9 -= 2;
    }
    while (v9);
    if ((v6 & 0x7FFFFFFE) == 0)
    {
LABEL_12:
      uint64_t v11 = 0;
      uint64_t v12 = 255 * v6;
      do
      {
        *(int16x4_t *)a5.i8 = vzip1_s16((int16x4_t)(unsigned __int16)(((int)v11 / v7) ^ v5), (int16x4_t)(unsigned __int16)(((int)v11 / v7) ^ v5));
        a5.i16[2] = ((int)v11 / v7) ^ v5;
        result->i32[0] = vmovn_s16((int16x8_t)a5).u32[0];
        uint64_t result = (int8x8_t *)((char *)result + 4);
        v11 += 255;
      }
      while (v12 != v11);
    }
  }
  return result;
}

BOOL sub_1002F0F98(unsigned __int8 *a1, int a2)
{
  if (a2 == 31) {
    return 0;
  }
  BOOL v3 = 1;
  unint64_t v4 = (1 << a2);
  if ((int)v4 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4;
  }
  int v6 = *a1;
  if (v6 == a1[1])
  {
    int v7 = a1 + 5;
    unint64_t v8 = 1;
    do
    {
      if (v6 != *(v7 - 3)) {
        break;
      }
      BOOL v3 = v8 < v4;
      if (v5 == v8) {
        break;
      }
      int v6 = *(v7 - 1);
      int v9 = *v7;
      v7 += 4;
      ++v8;
    }
    while (v6 == v9);
  }
  return v3;
}

unint64_t sub_1002F100C(_OWORD *a1, unint64_t *a2, int a3, int a4, int *a5, int a6, int a7, unint64_t a8)
{
  unint64_t v9 = a8 >> 16;
  uint64_t v10 = -(uint64_t)a4;
  uint64_t v11 = a3;
  unint64_t v12 = *a2;
  uint16x8_t v13 = a1;
  unint64_t v14 = (unint64_t)a1;
  do
  {
    int v33 = a7;
    unint64_t v15 = (unint64_t)v13 + a7;
    if (v15 <= v12) {
      unint64_t v16 = v15;
    }
    else {
      unint64_t v16 = v12;
    }
    if ((unint64_t)v13 < v16)
    {
      unint64_t v17 = (unint64_t)v13 + 3;
      if (v16 > (unint64_t)v13 + 3) {
        unint64_t v17 = v16;
      }
      unint64_t v18 = v17 - 3 - (void)v13;
      if (v18) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = 1;
      }
      unint64_t v20 = v19 + (v18 - (v18 != 0)) / 3;
      uint16x8_t v21 = v13;
      unint64_t v14 = (unint64_t)v13;
      if (v20 < 0x20) {
        goto LABEL_23;
      }
      unint64_t v29 = v20;
      uint64_t v22 = v20 & 0x7FFFFFFFFFFFFFE0;
      unint64_t v14 = (unint64_t)v13 + 3 * v22;
      uint64_t v28 = v22;
      do
      {
        LOWORD(v23) = a8;
        BYTE2(v23) = BYTE2(a8);
        *(_WORD *)((char *)&v23 + 3) = a8;
        BYTE5(v23) = BYTE2(a8);
        LOBYTE(v24) = BYTE1(a8);
        WORD3(v23) = a8;
        BYTE1(v24) = BYTE2(a8);
        WORD1(v24) = a8;
        BYTE8(v23) = BYTE2(a8);
        BYTE4(v24) = BYTE2(a8);
        *(_WORD *)((char *)&v24 + 5) = a8;
        BYTE9(v23) = a8;
        BYTE7(v24) = BYTE2(a8);
        BYTE10(v23) = BYTE1(a8);
        WORD4(v24) = a8;
        BYTE11(v23) = BYTE2(a8);
        BYTE10(v24) = BYTE2(a8);
        BYTE11(v24) = a8;
        WORD6(v23) = a8;
        LOBYTE(v25) = BYTE2(a8);
        BYTE12(v24) = BYTE1(a8);
        *(_WORD *)((char *)&v25 + 1) = a8;
        BYTE3(v25) = BYTE2(a8);
        WORD2(v25) = a8;
        BYTE13(v24) = BYTE2(a8);
        BYTE6(v25) = BYTE2(a8);
        BYTE7(v25) = a8;
        BYTE14(v23) = BYTE2(a8);
        BYTE8(v25) = BYTE1(a8);
        BYTE9(v25) = BYTE2(a8);
        HIWORD(v24) = a8;
        WORD5(v25) = a8;
        HIBYTE(v23) = a8;
        BYTE12(v25) = BYTE2(a8);
        *(_WORD *)((char *)&v25 + 13) = a8;
        HIBYTE(v25) = BYTE2(a8);
        *uint16x8_t v21 = v23;
        v21[1] = v24;
        uint64_t v21[2] = v25;
        void v21[3] = v23;
        _OWORD v21[4] = v24;
        v21[5] = v25;
        v21 += 6;
        v22 -= 32;
      }
      while (v22);
      uint64_t v10 = -(uint64_t)a4;
      uint64_t v11 = a3;
      LOBYTE(v9) = BYTE2(a8);
      if (v29 != v28)
      {
LABEL_23:
        do
        {
          *(_WORD *)unint64_t v14 = a8;
          *(unsigned char *)(v14 + 2) = v9;
          v14 += 3;
        }
        while (v14 < v16);
      }
      unint64_t v12 = *a2;
    }
    if (v14 >= v12)
    {
      v12 += v11;
      *a2 = v12;
      unint64_t v14 = v12 + v10;
      int v26 = *a5 + 1;
      *a5 = v26;
      if (v26 >= a6) {
        break;
      }
    }
    a7 = v33 + v13 - v16;
    uint16x8_t v13 = (_OWORD *)v14;
  }
  while (a7 > 0);
  return v14;
}

unint64_t sub_1002F14E4(unint64_t __b, unint64_t *a2, int a3, int a4, int *a5, int a6, int a7, int __c)
{
  uint16x8_t v13 = (void *)__b;
  unint64_t v14 = *a2;
  uint64_t v15 = a3;
  uint64_t v16 = -(uint64_t)a4;
  do
  {
    if ((unint64_t)v13 + a7 <= v14) {
      unint64_t v17 = (unint64_t)v13 + a7;
    }
    else {
      unint64_t v17 = v14;
    }
    if ((unint64_t)v13 < v17)
    {
      memset(v13, __c, v17 - (void)v13);
      unint64_t v14 = *a2;
      __b = v17;
    }
    if (__b >= v14)
    {
      v14 += v15;
      *a2 = v14;
      __b = v14 + v16;
      int v18 = *a5 + 1;
      *a5 = v18;
      if (v18 >= a6) {
        break;
      }
    }
    a7 += v13 - v17;
    uint16x8_t v13 = (void *)__b;
  }
  while (a7 > 0);
  return __b;
}

uint64_t sub_1002F15B4(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    unint64_t v4 = a1 + 3 * a3;
    do
    {
      uint64_t v5 = (_DWORD *)a1;
      unsigned int v6 = *a2++;
      a1 += 3;
      *uint64_t v5 = *(_DWORD *)(a4 + 4 * v6);
    }
    while ((unint64_t)v5 + 6 < v4);
  }
  int v7 = (__int16 *)(a4 + 4 * *a2);
  __int16 v8 = *v7;
  LOBYTE(v7) = *((unsigned char *)v7 + 2);
  *(_WORD *)a1 = v8;
  *(unsigned char *)(a1 + 2) = (_BYTE)v7;
  return a1 + 3;
}

unsigned char *sub_1002F1604(unsigned char *a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  if (a3 >= 1)
  {
    uint64_t v4 = a3;
    uint64_t v5 = a1;
    do
    {
      unsigned int v6 = *a2++;
      *v5++ = *(unsigned char *)(a4 + v6);
      --v4;
    }
    while (v4);
  }
  return &a1[a3];
}

unint64_t sub_1002F1630(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v4 = a1;
  unint64_t result = a1 + 3 * a3;
  if (a3 >= 3)
  {
    do
    {
      unsigned int v6 = *a2++;
      *(_DWORD *)uint64_t v4 = *(_DWORD *)(a4 + (((unint64_t)v6 >> 2) & 0x3C));
      *(_DWORD *)(v4 + 3) = *(_DWORD *)(a4 + 4 * (v6 & 0xF));
      unint64_t v7 = v4 + 12;
      v4 += 6;
    }
    while (v7 < result);
  }
  unint64_t v8 = *a2;
  unint64_t v9 = (__int16 *)(a4 + ((v8 >> 2) & 0x3C));
  __int16 v10 = *v9;
  LOBYTE(v9) = *((unsigned char *)v9 + 2);
  *(_WORD *)uint64_t v4 = v10;
  *(unsigned char *)(v4 + 2) = (_BYTE)v9;
  if (v4 + 6 == result)
  {
    uint64_t v11 = (__int16 *)(a4 + 4 * (v8 & 0xF));
    __int16 v12 = *v11;
    LOBYTE(v11) = *((unsigned char *)v11 + 2);
    *(_WORD *)(v4 + 3) = v12;
    *(unsigned char *)(v4 + 5) = (_BYTE)v11;
  }
  return result;
}

unsigned char *sub_1002F16C0(unsigned char *a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v4 = a1;
  unint64_t result = &a1[a3];
  if (a3 >= 3)
  {
    do
    {
      unsigned int v6 = *a2++;
      *uint64_t v4 = *(unsigned char *)(a4 + ((unint64_t)v6 >> 4));
      v4[1] = *(unsigned char *)(a4 + (v6 & 0xF));
      unint64_t v7 = v4 + 4;
      v4 += 2;
    }
    while (v7 < result);
  }
  unint64_t v8 = *a2;
  *uint64_t v4 = *(unsigned char *)(a4 + (v8 >> 4));
  if (v4 + 2 == result) {
    v4[1] = *(unsigned char *)(a4 + (v8 & 0xF));
  }
  return result;
}

int *sub_1002F172C(int *a1, char *a2, int a3, uint64_t a4)
{
  uint64_t v4 = (int *)((char *)a1 + 3 * a3);
  int v5 = *(_DWORD *)a4;
  int v6 = *(unsigned __int8 *)(a4 + 4);
  int v7 = *(unsigned __int8 *)(a4 + 5);
  int v8 = *(unsigned __int8 *)(a4 + 6);
  if (a3 < 9)
  {
    unint64_t v20 = a1;
    if (a1 >= v4) {
      return v20;
    }
    goto LABEL_31;
  }
  int v9 = v6 | (v7 << 8) | (v8 << 16) | (*(unsigned __int8 *)(a4 + 7) << 24);
  do
  {
    char v11 = *a2++;
    char v10 = v11;
    if (v11 >= 0) {
      int v12 = v5;
    }
    else {
      int v12 = v9;
    }
    *a1 = v12;
    if ((v10 & 0x40) != 0) {
      int v13 = v9;
    }
    else {
      int v13 = v5;
    }
    *(int *)((char *)a1 + 3) = v13;
    if ((v10 & 0x20) != 0) {
      int v14 = v9;
    }
    else {
      int v14 = v5;
    }
    *(int *)((char *)a1 + 6) = v14;
    if ((v10 & 0x10) != 0) {
      int v15 = v9;
    }
    else {
      int v15 = v5;
    }
    *(int *)((char *)a1 + 9) = v15;
    if ((v10 & 8) != 0) {
      int v16 = v9;
    }
    else {
      int v16 = v5;
    }
    a1[3] = v16;
    if ((v10 & 4) != 0) {
      int v17 = v9;
    }
    else {
      int v17 = v5;
    }
    *(int *)((char *)a1 + 15) = v17;
    if ((v10 & 2) != 0) {
      int v18 = v9;
    }
    else {
      int v18 = v5;
    }
    *(int *)((char *)a1 + 18) = v18;
    if (v10) {
      int v19 = v9;
    }
    else {
      int v19 = v5;
    }
    *(int *)((char *)a1 + 21) = v19;
    unint64_t v20 = a1 + 6;
    uint16x8_t v21 = a1 + 12;
    a1 += 6;
  }
  while (v21 < v4);
  if (v20 < v4)
  {
LABEL_31:
    char v22 = *a2;
    do
    {
      if (v22 < 0) {
        char v23 = v6;
      }
      else {
        char v23 = v5;
      }
      if (v22 < 0) {
        char v24 = v7;
      }
      else {
        char v24 = BYTE1(v5);
      }
      if (v22 < 0) {
        char v25 = v8;
      }
      else {
        char v25 = BYTE2(v5);
      }
      *(unsigned char *)unint64_t v20 = v23;
      *((unsigned char *)v20 + 1) = v24;
      *((unsigned char *)v20 + 2) = v25;
      unint64_t v20 = (int *)((char *)v20 + 3);
      v22 *= 2;
    }
    while (v20 < v4);
  }
  return v20;
}

unsigned char *sub_1002F1830(unsigned char *a1, char *a2, int a3, unsigned __int8 *a4)
{
  unint64_t v4 = (unint64_t)&a1[a3];
  unsigned int v5 = *a4;
  unsigned int v6 = a4[1];
  if (a3 < 9)
  {
    int v9 = a1;
    unint64_t v19 = (unint64_t)a1;
    if ((unint64_t)a1 >= v4) {
      return (unsigned char *)v19;
    }
  }
  else
  {
    int8x8_t v7 = (int8x8_t)vdup_n_s16(v5);
    int8x8_t v8 = (int8x8_t)vdup_n_s16(v6);
    int v9 = a1;
    char v10 = a1;
    do
    {
      int v12 = *a2++;
      char v11 = v12;
      unsigned int v13 = v12;
      if (v12 >= 0) {
        char v14 = v5;
      }
      else {
        char v14 = v6;
      }
      unsigned char *v10 = v14;
      int16x8_t v15 = (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v13), (int8x16_t)xmmword_100407650));
      *(int8x8_t *)v15.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)v15), v7, v8);
      *(_DWORD *)(v10 + 1) = vmovn_s16(v15).u32[0];
      if ((v11 & 4) != 0) {
        char v16 = v6;
      }
      else {
        char v16 = v5;
      }
      v10[5] = v16;
      if ((v11 & 2) != 0) {
        char v17 = v6;
      }
      else {
        char v17 = v5;
      }
      v10[6] = v17;
      if (v11) {
        char v18 = v6;
      }
      else {
        char v18 = v5;
      }
      v10[7] = v18;
      unint64_t v19 = (unint64_t)(v10 + 8);
      v9 += 8;
      unint64_t v20 = (unint64_t)(v10 + 16);
      v10 += 8;
    }
    while (v20 < v4);
    if (v19 >= v4) {
      return (unsigned char *)v19;
    }
  }
  char v22 = *a2;
  char v23 = (unsigned char *)(&a1[a3] - v9);
  char v24 = &v23[v19];
  do
  {
    if (v22 < 0) {
      char v25 = v6;
    }
    else {
      char v25 = v5;
    }
    *(unsigned char *)v19++ = v25;
    v22 *= 2;
    --v23;
  }
  while (v23);
  return v24;
}

uint64_t sub_1002F1920(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6 = *(int *)(a1 + 40);
  *(void *)&long long v137 = 0;
  uint64_t v139 = 0;
  *(void *)&v140[12] = 0;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  uint64_t v150 = 0;
  uint64_t v151 = 0;
  uint64_t v152 = 0;
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  uint64_t v155 = 0;
  uint64_t v156 = 0;
  uint64_t v157 = 0;
  uint64_t v158 = 0;
  uint64_t v159 = 0;
  uint64_t v160 = 0;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  uint64_t v164 = 0;
  uint64_t v165 = 0;
  uint64_t v166 = 0;
  uint64_t v167 = 0;
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  uint64_t v181 = 0;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  uint64_t v184 = 0;
  uint64_t v185 = 0;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  int8x16x3_t v135 = &v137;
  uint64_t v136 = v6 + 8;
  if ((v6 + 8) >= 0x33) {
    operator new[]();
  }
  v133[0] = 0;
  uint64_t v7 = *(unsigned int *)(a1 + 40);
  unint64_t v132 = 0;
  uint64_t v8 = *(void *)(a1 + 96);
  if ((*(_DWORD *)a1 & 0x3000) != 0x1000 || (*(_DWORD *)a1 & 0x4000) == 0 || *(_DWORD *)(a1 + 44) != 1)
  {
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    qmemcpy((void *)sub_1002D19D8(&v122, 129), "((((chain)->flags & (((1 << 2) - 1)<<12)) == (1 << 12) && (chain)->elem_size == 1) && (((chain)->flags & (1 << (2 + 12))) != 0))", 129);
    sub_1002D2278(-215, &v122, "icvApproximateChainTC89", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/approx.cpp", 74);
  }
  if (a2 <= 127)
  {
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    qmemcpy((void *)sub_1002D19D8(&v122, 37), "header_size >= (int)sizeof(CvContour)", 37);
    sub_1002D2278(-215, &v122, "icvApproximateChainTC89", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/approx.cpp", 75);
  }
  sub_10025B3B8(*(_DWORD *)a1 & 0xFFFFF000 | 0xC, a2, 8, a3, (uint64_t)v124);
  if (!*(_DWORD *)(a1 + 40))
  {
    char v22 = v125;
    if ((unint64_t)v125 >= v126)
    {
      sub_10025B664(v124);
      char v22 = v125;
    }
    void *v22 = v8;
    ++v125;
    goto LABEL_32;
  }
  unsigned __int8 v131 = 0;
  sub_1003165A8(a1, (uint64_t)v127);
  int16x8x3_t v134 = 0;
  if ((int)v7 >= 1)
  {
    int v9 = (long long *)v133;
    uint64_t v10 = v7;
    char v11 = &v137;
    while (1)
    {
      int v12 = v128;
      uint64_t v13 = *v130;
      int8x16x2_t v130 = (char *)v128;
      unint64_t v14 = v132;
      if (v128)
      {
        int v15 = *v128;
        unsigned __int8 v131 = *v128++;
        if ((unint64_t)(v12 + 1) >= v129)
        {
          sub_10025BA48(v127, 1);
          int v15 = v131;
          int v17 = v132;
          LODWORD(v16) = HIDWORD(v132);
        }
        else
        {
          unint64_t v16 = HIDWORD(v132);
          int v17 = v132;
        }
        uint64_t v18 = (char)v15;
        unint64_t v20 = (char *)v127 + 2 * (char)v15;
        LODWORD(v132) = v17 + v20[76];
        HIDWORD(v132) = v16 + v20[77];
        if (a4 > 2)
        {
LABEL_18:
          int v19 = dword_100407670[v18 - v13 + 7];
          if (v15 != v13)
          {
            *((void *)v9 + 2) = v11;
            int v9 = v11;
          }
          *((_DWORD *)v11 + 3) = v19;
          *(void *)char v11 = v14;
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v18 = (char)v131;
        int v15 = v131;
        if (a4 > 2) {
          goto LABEL_18;
        }
      }
      if (a4 == 1 || v15 != v13)
      {
        uint16x8_t v21 = v125;
        if ((unint64_t)v125 >= v126)
        {
          sub_10025B664(v124);
          uint16x8_t v21 = v125;
        }
        *uint16x8_t v21 = v14;
        ++v125;
      }
LABEL_13:
      char v11 = (long long *)((char *)v11 + 24);
      if (!--v10) {
        goto LABEL_31;
      }
    }
  }
  LODWORD(v7) = 0;
  int v9 = (long long *)v133;
LABEL_31:
  if (a4 >= 3)
  {
    *((void *)v9 + 2) = 0;
    int v26 = v134;
    uint16x8_t v27 = v134;
    do
    {
      int v28 = 0;
      uint64_t v29 = 0;
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (char *)&v137) >> 3);
      uint16x8_t v31 = (int *)&v137 + 6 * (int)v30;
      int v32 = *v31;
      int v33 = v31[1];
      if ((int)v30 <= 0) {
        int v34 = v7;
      }
      else {
        int v34 = 0;
      }
      uint32x4_t v37 = (int *)&v137 + 6 * (int)v30 + 6 * v34 - 6;
      int v35 = *v37;
      int v36 = v37[1];
      int v38 = v36 - v33;
      if ((int)v30 + 1 >= (int)v7) {
        int v39 = v7;
      }
      else {
        int v39 = 0;
      }
      int8x16x4_t v40 = (_DWORD *)&v137 + 6 * ((int)v30 + 1 - v39);
      int v41 = *v40 - v35;
      int v42 = v40[1] - v36;
      int v43 = v42 * (v32 - v35) + v38 * v41;
      int v44 = v41 * v41 + v42 * v42;
      uint16x8_t v45 = (char *)&v137 + 24 * (int)v30 + 52;
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (char *)&v137) >> 3);
      int v47 = 2;
      while (1)
      {
        int v48 = (int)v30 + v47 >= (int)v7 ? v7 : 0;
        uint64_t v49 = &v45[-24 * v48];
        uint64_t v50 = (int *)&v137 + 6 * (int)v30 + 6 * v29 + 6 * (int)(v7 & (((int)v30 - 2 + (int)v29) >> 31)) - 12;
        int v51 = *v50;
        int v52 = v50[1];
        int v53 = *((_DWORD *)v49 - 1) - *v50;
        int v54 = *(_DWORD *)v49 - v52;
        int v55 = v53 * v53 + v54 * v54;
        if (v44 >= v55) {
          break;
        }
        int v56 = v54 * (v32 - v51) + (v52 - v33) * v53;
        float v57 = (double)v43 * (double)v55 - (double)v56 * (double)v44;
        if (v43 >= 1 && SLODWORD(v57) < 1) {
          break;
        }
        if (v43 < 0 && (LODWORD(v57) & 0x80000000) == 0) {
          break;
        }
        v45 += 24;
        --v29;
        ++v47;
        LODWORD(v46) = v46 + 1;
        --v28;
        int v44 = v53 * v53 + v54 * v54;
        int v43 = v56;
      }
      int v58 = 1 - v29;
      *((_DWORD *)v27 + 2) = 1 - v29;
      if (a4 == 4)
      {
        float v59 = 0.0;
        if ((int)v30 - (int)v29 + 1 >= (int)v7) {
          int v60 = v7;
        }
        else {
          int v60 = 0;
        }
        int v61 = v30 - v60 - v29 + 1;
        uint64_t v62 = (_DWORD *)&v137 + 6 * (int)(v30 + v29 - 1 + (v7 & (((int)v30 + (int)v29 - 1) >> 31)));
        int v63 = *v62 - v32;
        int v64 = v62[1] - v33;
        uint64_t v65 = (_DWORD *)&v137 + 6 * v61;
        int v66 = *v65 - v32;
        int v67 = v65[1] - v33;
        if (v64 | v63) {
          BOOL v68 = (v67 | v66) == 0;
        }
        else {
          BOOL v68 = 1;
        }
        if (!v68)
        {
          float v69 = (double)(v66 * v63 + v67 * v64)
              / sqrt(((double)v64 * (double)v64 + (double)v63 * (double)v63)* ((double)v67 * (double)v67 + (double)v66 * (double)v66));
          float v70 = v69 + 1.1;
          float v59 = v70;
          if ((2 - v29) >= 3)
          {
            int v71 = -(int)v29;
            uint64_t v72 = (char *)&v137 + 24 * (int)v46;
            do
            {
              if ((int)v30 + v71 >= (int)v7) {
                int v74 = v7;
              }
              else {
                int v74 = 0;
              }
              uint64_t v75 = (_DWORD *)&v137 + 6 * (int)(v30 + v28 + (v7 & (((int)v30 + v28) >> 31)));
              int v76 = *v75 - v32;
              int v77 = v75[1] - v33;
              unint64_t v78 = &v72[-24 * v74];
              int v79 = *(_DWORD *)v78 - v32;
              int v80 = *((_DWORD *)v78 + 1) - v33;
              if (v77 | v76) {
                BOOL v81 = (v80 | v79) == 0;
              }
              else {
                BOOL v81 = 1;
              }
              if (v81) {
                break;
              }
              float v82 = (double)(v79 * v76 + v80 * v77)
                  / sqrt(((double)v77 * (double)v77 + (double)v76 * (double)v76)* ((double)v80 * (double)v80 + (double)v79 * (double)v79));
              float v83 = v82 + 1.1;
              if (v71 < v58 && SLODWORD(v59) >= SLODWORD(v83)) {
                break;
              }
              v72 -= 24;
              ++v28;
              float v59 = v83;
            }
            while (v71-- >= 2);
          }
        }
        *((float *)v27 + 3) = v59;
      }
      uint16x8_t v27 = (char *)*((void *)v27 + 2);
    }
    while (v27);
    BOOL v84 = v133;
    do
    {
      int v86 = *((_DWORD *)v26 + 2);
      uint64_t v85 = v26;
      if (v86 >= 2)
      {
        int v87 = *((_DWORD *)v26 + 3);
        int v88 = -1431655765 * ((unint64_t)(v26 - (char *)&v137) >> 3);
        unsigned int v89 = v86 >> 1;
        int v90 = v88 + 1;
        uint64_t v91 = v88 - 1;
        do
        {
          if (*((_DWORD *)&v137 + 6 * v91 + 6 * (int)(v7 & ((int)v91 >> 31)) + 3) > v87
            || (v90 >= (int)v7 ? (int v92 = v7) : (int v92 = 0), *((_DWORD *)&v137 + 6 * (v90 - v92) + 3) > v87))
          {
            v84[2] = *((void *)v26 + 2);
            *((_DWORD *)v26 + 3) = 0;
            uint64_t v85 = v84;
            goto LABEL_80;
          }
          ++v90;
          --v91;
          --v89;
        }
        while (v89);
        uint64_t v85 = v26;
      }
LABEL_80:
      int v26 = (char *)*((void *)v26 + 2);
      BOOL v84 = v85;
    }
    while (v26);
    int v93 = v133;
    BOOL v94 = v134;
    do
    {
      long double v95 = v94;
      if (*((_DWORD *)v94 + 2) == 1)
      {
        int v96 = *((_DWORD *)v94 + 3);
        int v97 = -1431655765 * ((unint64_t)(v94 - (char *)&v137) >> 3);
        int v98 = v97 <= 0 ? v7 : 0;
        if (v96 <= *((_DWORD *)&v137 + 6 * v97 + 6 * v98 - 3)
          || ((int v99 = v97 + 1, v99 >= (int)v7) ? (v100 = v7) : (v100 = 0),
              long double v95 = v94,
              v96 <= *((_DWORD *)&v137 + 6 * (v99 - v100) + 3)))
        {
          v93[2] = *((void *)v94 + 2);
          *((_DWORD *)v94 + 3) = 0;
          long double v95 = v93;
        }
      }
      BOOL v94 = (char *)*((void *)v94 + 2);
      int v93 = v95;
    }
    while (v94);
    if (a4 == 4) {
      goto LABEL_104;
    }
    if (HIDWORD(v137))
    {
      uint64_t v103 = (int)v7 - 1;
      if (*((_DWORD *)&v137 + 6 * v103 + 3))
      {
        if (v7 < 2)
        {
          LODWORD(v105) = 1;
        }
        else
        {
          uint64_t v104 = v140;
          uint64_t v105 = 1;
          __int8 v106 = v140;
          while (1)
          {
            int v107 = *v106;
            v106 += 6;
            if (!v107) {
              break;
            }
            *((_DWORD *)v104 - 6) = 0;
            ++v105;
            uint64_t v104 = v106;
            if (v7 == v105) {
              goto LABEL_104;
            }
          }
        }
        if (v105 == v7)
        {
LABEL_104:
          uint64_t v101 = v134;
          uint64_t v102 = v125;
          do
          {
            if ((unint64_t)v102 >= v126)
            {
              sub_10025B664(v124);
              uint64_t v102 = v125;
            }
            *uint64_t v102 = *v101;
            uint64_t v102 = ++v125;
            uint64_t v101 = (void *)v101[2];
          }
          while (v101);
          goto LABEL_32;
        }
        int v108 = v105 - 1;
        if ((int)v7 < 3)
        {
          unsigned int v110 = v7 - 2;
        }
        else
        {
          char v109 = (_DWORD *)&v137 + 6 * (v7 - 1) + 3;
          unsigned int v110 = v7 - 2;
          do
          {
            if (!*((_DWORD *)&v137 + 6 * v110 + 3)) {
              goto LABEL_123;
            }
            *((void *)&v137 + 3 * v110 + 2) = 0;
            *char v109 = 0;
            v109 -= 6;
            BOOL v111 = v110-- != 0;
          }
          while (v110 != 0 && v111);
          unsigned int v110 = 0;
        }
LABEL_123:
        if (!v108)
        {
          if (v110 == v7 - 2)
          {
            int v108 = -1431655765 * ((unint64_t)(v138 - (void)&v137) >> 3);
            unsigned __int8 v112 = (char *)&v137 + 24 * v7;
            *(_OWORD *)unsigned __int8 v112 = v137;
            *((void *)v112 + 2) = 0;
            *((void *)&v137 + 3 * v103 + 2) = v112;
          }
          else
          {
            int v108 = 0;
          }
        }
        int16x8x3_t v134 = (char *)&v137 + 24 * v108;
      }
    }
    int v113 = 1;
    unsigned __int8 v114 = v133;
    uint64_t v115 = v134;
    BOOL v116 = v133;
    while (1)
    {
      while (1)
      {
        unint64_t v117 = v116;
        BOOL v116 = v115;
        uint64_t v118 = v115[2];
        if (!v118 || v118 - (void)v116 != 24) {
          break;
        }
        ++v113;
        uint64_t v115 = (void *)v116[2];
        if (!v115) {
          goto LABEL_104;
        }
      }
      if (v113 < 2) {
        goto LABEL_139;
      }
      if (v113 == 2)
      {
        int v120 = *((_DWORD *)v117 + 3);
        int v121 = *((_DWORD *)v116 + 3);
        if (v120 <= v121 && (v120 != v121 || *((_DWORD *)v117 + 2) > *((_DWORD *)v116 + 2))) {
          goto LABEL_141;
        }
        v117[2] = v118;
LABEL_139:
        int v113 = 1;
        unsigned __int8 v114 = v116;
        uint64_t v115 = (void *)v116[2];
        if (!v115) {
          goto LABEL_104;
        }
      }
      else
      {
        unsigned __int8 v114 = (void *)v114[2];
LABEL_141:
        v114[2] = v116;
        int v113 = 1;
        unsigned __int8 v114 = v116;
        uint64_t v115 = (void *)v116[2];
        if (!v115) {
          goto LABEL_104;
        }
      }
    }
  }
LABEL_32:
  uint64_t v23 = sub_10025B52C(v124);
  if (v135 != &v137 && v135 != 0) {
    operator delete[]();
  }
  return v23;
}

void sub_1002F242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a34 != a10 && a34 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

void sub_1002F249C(uint64_t a1, uint64_t a2, int a3, int a4, double a5, double a6)
{
  sub_1002D6AE8(v53, &off_100497CF8);
  if (sub_10029D660((int *)a1, -1))
  {
    long long v43 = 0uLL;
    uint64_t v12 = sub_1002D19D8(&v43, 17);
    *(unsigned char *)(v12 + 16) = 48;
    *(_OWORD *)uint64_t v12 = *(_OWORD *)"_src.depth() == 0";
    sub_1002D2278(-215, (uint64_t *)&v43, "Canny", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/canny.cpp", 930);
  }
  sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)&v52);
  if (*(void *)(a2 + 8) == *(void *)(a1 + 8) && sub_10029AB74((int *)a1, -1))
  {
    long long v43 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v43, 134), "(_dst.getObj() != _src.getObj() || _src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))) && \"Inplace parameters are not supported\"", 134);
    sub_1002D2278(-215, (uint64_t *)&v43, "Canny", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/canny.cpp", 935);
  }
  int32x2_t v51 = v52;
  sub_10029E6D4(a2, &v51, 0, -1, 0, 0);
  if (a3 >= 0) {
    int v13 = 1;
  }
  else {
    int v13 = a4;
  }
  if (a3 < 0) {
    a4 = 1;
  }
  if (!v13) {
    a3 &= ~0x80000000;
  }
  if ((a3 & 1) != 0 && ((a3 - 3) < 5 || a3 == -1))
  {
    if (a5 <= a6) {
      double v14 = a6;
    }
    else {
      double v14 = a5;
    }
    if (a5 <= a6) {
      a6 = a5;
    }
    if (sub_10029A230((_DWORD *)a1) == 0x10000)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      long long v16 = *(_OWORD *)(v15 + 16);
      long long v43 = *(_OWORD *)v15;
      long long v44 = v16;
      long long v45 = *(_OWORD *)(v15 + 32);
      uint64_t v17 = *(void *)(v15 + 56);
      uint64_t v46 = *(void *)(v15 + 48);
      uint64_t v47 = v17;
      int v48 = (int32x2_t *)&v43 + 1;
      uint64_t v49 = v50;
      v50[0] = 0;
      v50[1] = 0;
      if (v17) {
        atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
      }
      if (*(int *)(v15 + 4) > 2)
      {
        DWORD1(v43) = 0;
        sub_1002931A8((uint64_t)&v43, v15);
      }
      else
      {
        uint64_t v18 = *(unint64_t **)(v15 + 72);
        int v19 = v49;
        unint64_t *v49 = *v18;
        v19[1] = v18[1];
      }
    }
    else
    {
      sub_100299554(a1, -1, (uint64_t)&v43);
    }
    if (sub_10029A230((_DWORD *)a2) == 0x10000)
    {
      uint64_t v20 = *(void *)(a2 + 8);
      long long v21 = *(_OWORD *)(v20 + 16);
      v37[0] = *(_OWORD *)v20;
      v37[1] = v21;
      void v37[2] = *(_OWORD *)(v20 + 32);
      uint64_t v22 = *(void *)(v20 + 56);
      uint64_t v38 = *(void *)(v20 + 48);
      uint64_t v39 = v22;
      int8x16x4_t v40 = (char *)v37 + 8;
      int v41 = v42;
      v42[0] = 0;
      v42[1] = 0;
      if (v22) {
        atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 1u);
      }
      if (*(int *)(v20 + 4) > 2)
      {
        DWORD1(v37[0]) = 0;
        sub_1002931A8((uint64_t)v37, v20);
      }
      else
      {
        uint64_t v23 = *(void **)(v20 + 72);
        char v24 = v41;
        *(void *)int v41 = *v23;
        v24[1] = v23[1];
      }
    }
    else
    {
      sub_100299554(a2, -1, (uint64_t)v37);
    }
    int32x2_t v35 = vrev64_s32(*v48);
    sub_10026BD1C((uint64_t)v36, (int *)&v35, v43 & 0xFFF, v44, v50[0]);
    if (a4)
    {
      double v25 = fmin(a6, 32767.0);
      double v14 = fmin(v14, 32767.0);
      double v26 = 1.0;
      if (v25 > 0.0) {
        double v26 = v25;
      }
      a6 = v25 * v26;
      if (v14 > 0.0) {
        double v14 = v14 * v14;
      }
    }
    sub_1002ABFC4();
    sub_1002AC090();
    v31[0] = 1124007936;
    memset(&v31[1], 0, 60);
    int v32 = &v31[2];
    int v33 = v34;
    v34[0] = 0;
    v34[1] = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)std::string __p = 0u;
    sub_1002F3350((uint64_t)&v27, (uint64_t)v36, (uint64_t)v31, (uint64_t)__p, (int)a6 - (a6 < (double)(int)a6), (int)v14 - (v14 < (double)(int)v14), a3, a4);
  }
  long long v43 = 0uLL;
  qmemcpy((void *)sub_1002D19D8(&v43, 43), "Aperture size should be odd between 3 and 7", 43);
  sub_1002D2278(-206, (uint64_t *)&v43, "Canny", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/canny.cpp", 947);
}

void sub_1002F3164(_Unwind_Exception *a1)
{
  sub_1002D1A1C((uint64_t *)(v1 - 256));
  sub_10020FA00(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F32F8(uint64_t a1)
{
  *(void *)a1 = off_100497D68;
  sub_1002D2E58((pthread_mutex_t **)(a1 + 72));

  return nullsub_1(a1);
}

void sub_1002F3350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8)
{
  *(void *)a1 = off_100497D68;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = a6;
  *(_DWORD *)(a1 + 48) = a7;
  *(unsigned char *)(a1 + 52) = a8;
  sub_1002D1B60();
}

void sub_1002F3724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F3780(uint64_t a1)
{
  *(void *)a1 = off_100497D68;
  sub_1002D2E58((pthread_mutex_t **)(a1 + 72));
  nullsub_1(a1);

  operator delete();
}

void sub_1002F37E8(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v370, &off_100497D98);
  memset(&v365[4], 0, 60);
  v366 = &v365[8];
  v367 = &v368;
  uint64_t v368 = 0;
  uint64_t v369 = 0;
  memset(&v360[4], 0, 60);
  v361 = &v360[8];
  v362 = &v363;
  uint64_t v364 = 0;
  uint64_t v363 = 0;
  v357 = v359;
  unint64_t v358 = 0;
  v354 = v356;
  unint64_t v355 = 0;
  long long v353 = 0u;
  long long v352 = 0u;
  *(_OWORD *)v351 = 0u;
  long long v350 = 0u;
  long long v349 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v4 = a2[1];
  if (*a2 <= 1) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = *a2;
  }
  int v6 = *(_DWORD *)(*(void *)(a1 + 8) + 8);
  *(_DWORD *)v365 = 1124007936;
  if (v4 + 1 < v6) {
    int v7 = v4 + 1;
  }
  else {
    int v7 = v6;
  }
  *(_DWORD *)v360 = 1124007936;
  sub_1002D6AE8(v346, &off_100497DB8);
  uint64_t v8 = (v5 - 1);
  if (*(unsigned char *)(a1 + 53))
  {
    int v9 = *(_DWORD **)(a1 + 8);
    unint64_t v339 = __PAIR64__(v7, v8);
    v372[0] = 0x7FFFFFFF80000000;
    sub_100293AD0((uint64_t)v335, v9, (int *)&v339, v372);
    uint64_t v345 = 0;
    int v342 = 16842752;
    v344 = v335;
    LODWORD(v339) = 33619968;
    uint64_t v341 = 0;
    v340 = v365;
    sub_100325D60((uint64_t)&v342, (uint64_t)&v339, 3, 1, 0, *(_DWORD *)(a1 + 48), 1, 1.0);
  }
  uint64_t v10 = *(_DWORD **)(a1 + 8);
  int v342 = v5 - 1;
  int v343 = v7;
  unint64_t v339 = 0x7FFFFFFF80000000;
  sub_100293AD0((uint64_t)v335, v10, &v342, (uint64_t *)&v339);
  if (*(void *)&v365[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v365[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v365);
  }
  if (*(int *)&v365[4] >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v366;
    do
      *(_DWORD *)&v12[4 * v11++] = 0;
    while (v11 < *(int *)&v365[4]);
  }
  *(_OWORD *)v365 = v335[0];
  *(_OWORD *)&v365[16] = v335[1];
  *(_OWORD *)&v365[32] = v335[2];
  *(_OWORD *)&v365[48] = v335[3];
  if (v367 == &v368)
  {
    int v13 = (uint64_t *)v337;
    if (SDWORD1(v335[0]) <= 2) {
      goto LABEL_17;
    }
  }
  else
  {
    j__free(v367);
    v366 = &v365[8];
    v367 = &v368;
    int v13 = (uint64_t *)v337;
    if (SDWORD1(v335[0]) <= 2)
    {
LABEL_17:
      uint64_t v368 = *v13;
      uint64_t v369 = v13[1];
      goto LABEL_20;
    }
  }
  v366 = v336;
  v367 = v13;
  int v13 = (uint64_t *)v338;
  v336 = (char *)v335 + 8;
  v337 = v338;
LABEL_20:
  LODWORD(v335[0]) = 1124007936;
  memset((char *)v335 + 4, 0, 60);
  if (v13 != (uint64_t *)v338) {
    j__free(v13);
  }
  double v14 = *(_DWORD **)(a1 + 16);
  int v342 = v5 - 1;
  int v343 = v7;
  unint64_t v339 = 0x7FFFFFFF80000000;
  sub_100293AD0((uint64_t)v335, v14, &v342, (uint64_t *)&v339);
  if (*(void *)&v360[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v360[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v360);
  }
  if (*(int *)&v360[4] >= 1)
  {
    uint64_t v15 = 0;
    long long v16 = v361;
    do
      *(_DWORD *)&v16[4 * v15++] = 0;
    while (v15 < *(int *)&v360[4]);
  }
  *(_OWORD *)v360 = v335[0];
  *(_OWORD *)&v360[16] = v335[1];
  *(_OWORD *)&v360[32] = v335[2];
  *(_OWORD *)&v360[48] = v335[3];
  if (v362 == &v363)
  {
    uint64_t v17 = (uint64_t *)v337;
    if (SDWORD1(v335[0]) <= 2) {
      goto LABEL_30;
    }
  }
  else
  {
    j__free(v362);
    v362 = &v363;
    v361 = &v360[8];
    uint64_t v17 = (uint64_t *)v337;
    if (SDWORD1(v335[0]) <= 2)
    {
LABEL_30:
      uint64_t v363 = *v17;
      uint64_t v364 = v17[1];
      goto LABEL_33;
    }
  }
  v362 = v17;
  v361 = v336;
  uint64_t v17 = (uint64_t *)v338;
  v336 = (char *)v335 + 8;
  v337 = v338;
LABEL_33:
  LODWORD(v335[0]) = 1124007936;
  memset((char *)v335 + 4, 0, 60);
  if (v17 != (uint64_t *)v338) {
    j__free(v17);
  }
  sub_1002D6AE8(&v342, &off_100497DD8);
  int v18 = *(_DWORD *)(a1 + 64);
  if (v18 < 2)
  {
    v329 = 0;
    long long v21 = 0;
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    goto LABEL_54;
  }
  if (v358 >= 2 * *(int *)&v365[12])
  {
    unint64_t v358 = 2 * *(int *)&v365[12];
    unint64_t v19 = 2 * *(int *)&v360[12];
    if (v355 < v19)
    {
LABEL_44:
      uint64_t v20 = v356;
      if (v354 != v356)
      {
        if (v354) {
          operator delete[]();
        }
        v354 = v356;
      }
      unint64_t v355 = v19;
      if (v19 >= 0x209) {
        operator new[]();
      }
      goto LABEL_53;
    }
  }
  else
  {
    if (v357 != v359)
    {
      if (v357) {
        operator delete[]();
      }
      v357 = v359;
    }
    unint64_t v358 = 2 * *(int *)&v365[12];
    if ((2 * *(_DWORD *)&v365[12]) >= 0x209) {
      operator new[]();
    }
    unint64_t v19 = 2 * *(int *)&v360[12];
    if (v355 < v19) {
      goto LABEL_44;
    }
  }
  unint64_t v355 = v19;
  uint64_t v20 = v354;
LABEL_53:
  uint64_t v22 = v357;
  long long v21 = &v357[2 * *(int *)&v365[12]];
  v329 = &v20[2 * *(int *)&v360[12]];
  int v18 = *(_DWORD *)(a1 + 64);
LABEL_54:
  uint64_t v23 = *(void *)(a1 + 56);
  *(void *)&v335[0] = &v335[1];
  *((void *)&v335[0] + 1) = 3 * v23 * v18 + 48;
  if (*((void *)&v335[0] + 1) >= 0x109uLL) {
    operator new[]();
  }
  char v24 = &v335[2];
  uint64_t v25 = 4 * v23 * v18;
  unint64_t v334 = ((unint64_t)&v335[2] + v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v26 = (v334 + v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v8 == *a2)
  {
    bzero((void *)(v26 - 4), 4 * v23);
    uint64_t v27 = *(void *)(a1 + 8);
  }
  else
  {
    *(_DWORD *)(v26 - 4) = 0;
    uint64_t v27 = *(void *)(a1 + 8);
    *(_DWORD *)(v26 + 4 * *(int *)(v27 + 12)) = 0;
  }
  HIDWORD(v335[1]) = 0;
  *((_DWORD *)&v335[2] + *(int *)(v27 + 12)) = 0;
  *(_DWORD *)(v334 - 4) = 0;
  *(_DWORD *)(v334 + 4 * *(int *)(v27 + 12)) = 0;
  LODWORD(v27) = a2[1];
  if ((int)v8 <= (int)v27)
  {
    uint64_t v28 = v5 - 1;
    int v318 = v7;
    uint64_t v322 = v7;
    uint64_t v330 = v5 - 1 - v8;
    uint64_t v333 = a1;
    v319 = a2;
    uint64_t v320 = (v5 - 1);
    uint64_t v321 = v5;
    while (1)
    {
      unint64_t v30 = v26;
      unint64_t v26 = (unint64_t)v24;
      uint64_t v31 = v28;
      if (v28 >= v322) {
        break;
      }
      uint64_t v32 = *(void *)&v365[16];
      uint64_t v33 = *v367;
      uint64_t v34 = *(void *)&v360[16];
      uint64_t v35 = *(void *)v362;
      uint64_t v36 = (*(_DWORD *)(a1 + 64) * *(_DWORD *)(*(void *)(a1 + 8) + 12));
      if (*(unsigned char *)(a1 + 68)) {
        BOOL v37 = (int)v36 < 8;
      }
      else {
        BOOL v37 = 1;
      }
      char v38 = v37;
      if (*(unsigned char *)(a1 + 52))
      {
        if (v38)
        {
          uint64_t v39 = 0;
          if ((int)v36 <= 0) {
            goto LABEL_111;
          }
        }
        else
        {
          unint64_t v45 = 0;
          uint64_t v46 = (int32x4_t *)(v26 + 16);
          uint64_t v47 = (int16x8_t *)(*(void *)&v360[16] + v35 * v330);
          int v48 = (int16x8_t *)(*(void *)&v365[16] + v33 * v330);
          do
          {
            int16x8_t v49 = *v48++;
            int16x8_t v50 = v49;
            int16x8_t v51 = *v47++;
            v46[-1] = vmlal_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v50.i8, *(int16x4_t *)v50.i8);
            *uint64_t v46 = vmlal_high_s16(vmull_high_s16(v51, v51), v50, v50);
            v45 += 8;
            v46 += 2;
          }
          while (v45 <= (v36 - 8));
          uint64_t v39 = v45;
          if ((int)v45 >= (int)v36) {
            goto LABEL_111;
          }
        }
        uint64_t v52 = v36 - v39;
        if ((unint64_t)(v36 - v39) < 0x10)
        {
          uint64_t v53 = v39;
LABEL_99:
          int v74 = (_DWORD *)(v26 + 4 * v53);
          uint64_t v75 = (__int16 *)(v34 + 2 * v53 + v35 * v330);
          int v76 = (__int16 *)(v32 + 2 * v53 + v33 * v330);
          uint64_t v77 = v36 - v53;
          do
          {
            int v78 = *v76++;
            int v79 = v78 * v78;
            int v80 = *v75++;
            *v74++ = v79 + v80 * v80;
            --v77;
          }
          while (v77);
          goto LABEL_111;
        }
        uint64_t v53 = (v52 & 0xFFFFFFFFFFFFFFF0) + v39;
        uint64_t v65 = (int32x4_t *)(v26 + 4 * v39 + 32);
        uint64_t v66 = 2 * v39;
        int v67 = (int16x8_t *)(v32 + 2 * v39 + v33 * v330 + 16);
        BOOL v68 = (int16x8_t *)(v34 + v66 + v35 * v330 + 16);
        unint64_t v69 = v52 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v70 = v67[-1];
          int16x8_t v71 = *v67;
          int16x8_t v72 = v68[-1];
          int16x8_t v73 = *v68;
          v65[-2] = vmlal_s16(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v70.i8, *(int16x4_t *)v70.i8);
          v65[-1] = vmlal_high_s16(vmull_high_s16(v72, v72), v70, v70);
          int32x4_t *v65 = vmlal_s16(vmull_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v71.i8, *(int16x4_t *)v71.i8);
          v65[1] = vmlal_high_s16(vmull_high_s16(v73, v73), v71, v71);
          v65 += 4;
          v67 += 2;
          v68 += 2;
          v69 -= 16;
        }
        while (v69);
        if (v52 != (v52 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_99;
        }
      }
      else
      {
        if (v38)
        {
          uint64_t v44 = 0;
          if ((int)v36 <= 0) {
            goto LABEL_111;
          }
        }
        else
        {
          unint64_t v54 = 0;
          int v55 = (int32x4_t *)(v26 + 16);
          int v56 = (int16x8_t *)(*(void *)&v360[16] + v35 * v330);
          float v57 = (int16x8_t *)(*(void *)&v365[16] + v33 * v330);
          do
          {
            int16x8_t v58 = *v57++;
            int16x8_t v59 = v58;
            int16x8_t v60 = *v56++;
            int16x8_t v61 = vabsq_s16(v59);
            int16x8_t v62 = vabsq_s16(v60);
            v55[-1] = vaddl_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v61.i8);
            *int v55 = vaddl_high_s16(v62, v61);
            v54 += 8;
            v55 += 2;
          }
          while (v54 <= (v36 - 8));
          uint64_t v44 = v54;
          if ((int)v54 >= (int)v36) {
            goto LABEL_111;
          }
        }
        uint64_t v63 = v36 - v44;
        if ((unint64_t)(v36 - v44) >= 0x10)
        {
          uint64_t v64 = (v63 & 0xFFFFFFFFFFFFFFF0) + v44;
          BOOL v81 = (uint32x4_t *)(v26 + 4 * v44 + 32);
          uint64_t v82 = 2 * v44;
          float v83 = (int16x8_t *)(v32 + 2 * v44 + v33 * v330 + 16);
          BOOL v84 = (int16x8_t *)(v34 + v82 + v35 * v330 + 16);
          unint64_t v85 = v63 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            uint16x8_t v86 = (uint16x8_t)vabsq_s16(v83[-1]);
            uint16x8_t v87 = (uint16x8_t)vabsq_s16(*v83);
            uint16x8_t v88 = (uint16x8_t)vabsq_s16(v84[-1]);
            uint16x8_t v89 = (uint16x8_t)vabsq_s16(*v84);
            v81[-2] = vaddl_u16(*(uint16x4_t *)v88.i8, *(uint16x4_t *)v86.i8);
            v81[-1] = vaddl_high_u16(v88, v86);
            uint32x4_t *v81 = vaddl_u16(*(uint16x4_t *)v89.i8, *(uint16x4_t *)v87.i8);
            v81[1] = vaddl_high_u16(v89, v87);
            v81 += 4;
            v83 += 2;
            v84 += 2;
            v85 -= 16;
          }
          while (v85);
          if (v63 == (v63 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_111;
          }
        }
        else
        {
          uint64_t v64 = v44;
        }
        int v90 = (_DWORD *)(v26 + 4 * v64);
        uint64_t v91 = (__int16 *)(v34 + 2 * v64 + v35 * v330);
        int v92 = (__int16 *)(v32 + 2 * v64 + v33 * v330);
        uint64_t v93 = v36 - v64;
        do
        {
          int v95 = *v92++;
          int v94 = v95;
          if (v95 < 0) {
            int v94 = -v94;
          }
          int v97 = *v91++;
          int v96 = v97;
          if (v97 < 0) {
            int v96 = -v96;
          }
          *v90++ = v96 + v94;
          --v93;
        }
        while (v93);
      }
LABEL_111:
      int v98 = *(_DWORD *)(a1 + 64);
      if (v98 >= 2)
      {
        uint64_t v99 = *(void *)(a1 + 8);
        uint64_t v100 = *(int *)(v99 + 12);
        if ((int)v100 >= 1)
        {
          uint64_t v101 = 0;
          int v102 = 0;
          uint64_t v103 = v32 + v33 * (v31 - v8);
          uint64_t v104 = v34 + v35 * (v31 - v8);
          do
          {
            int v107 = v102;
            if (v98 >= 2)
            {
              uint64_t v108 = v98;
              int v109 = v102 + 1;
              unsigned int v110 = (int *)(v26 + 4 + 4 * v102);
              uint64_t v111 = v108 - 1;
              int v107 = v102;
              do
              {
                int v112 = *v110++;
                if (v112 > *(_DWORD *)(v26 + 4 * v107)) {
                  int v107 = v109;
                }
                ++v109;
                --v111;
              }
              while (v111);
            }
            *(_DWORD *)(v26 + 4 * v101) = *(_DWORD *)(v26 + 4 * v107);
            uint64_t v105 = 2 * v107;
            uint64_t v106 = 2 * v101;
            *(_WORD *)&v22[v106] = *(_WORD *)(v103 + v105);
            *(_WORD *)&v20[v106] = *(_WORD *)(v104 + v105);
            ++v101;
            int v98 = *(_DWORD *)(a1 + 64);
            v102 += v98;
            uint64_t v100 = *(int *)(v99 + 12);
          }
          while (v101 < v100);
        }
        *(_DWORD *)(v26 + 4 * v100) = 0;
        int v113 = v20;
        unsigned __int8 v114 = v22;
        uint64_t v22 = v21;
        uint64_t v20 = v329;
        v329 = v113;
        long long v21 = v114;
      }
      if (v31 > *a2) {
        goto LABEL_123;
      }
LABEL_62:
      uint64_t v28 = v31 + 1;
      uint64_t v27 = a2[1];
      ++v330;
      uint64_t v29 = v31;
      char v24 = (_OWORD *)v334;
      unint64_t v334 = v30;
      if (v29 >= v27)
      {
        int v7 = v318;
        goto LABEL_254;
      }
    }
    bzero((void *)(v26 - 4), 4 * *(void *)(a1 + 56));
    int v40 = *(_DWORD *)(a1 + 64);
    BOOL v41 = v40 < 2;
    if (v40 >= 2) {
      int v42 = v20;
    }
    else {
      int v42 = v329;
    }
    if (v41) {
      long long v43 = v21;
    }
    else {
      long long v43 = v22;
    }
    if (!v41)
    {
      uint64_t v20 = v329;
      uint64_t v22 = v21;
    }
    v329 = v42;
    long long v21 = v43;
LABEL_123:
    uint64_t v115 = *(void *)(a1 + 24);
    uint64_t v325 = *(void *)(v115 + 16);
    v326 = v21;
    uint64_t v324 = **(void **)(v115 + 72);
    uint64_t v116 = 16;
    if (!*(unsigned char *)(a1 + 68)) {
      uint64_t v116 = 1;
    }
    uint64_t v117 = (uint64_t)v22;
    uint64_t v323 = v116;
    uint64_t v118 = v325 + v324 * v31 + v116;
    *(unsigned char *)(v118 - 1) = 1;
    *(unsigned char *)(v118 + *(int *)(*(void *)(a1 + 8) + 12)) = 1;
    char v119 = v20;
    v327 = (unsigned char *)v117;
    if (*(_DWORD *)(a1 + 64) == 1)
    {
      uint64_t v117 = *(void *)&v365[16] + *v367 * (v31 - v5);
      char v119 = (unsigned char *)(*(void *)&v360[16] + *(void *)v362 * (v31 - v5));
    }
    uint64_t v120 = *(void *)(a1 + 8);
    uint64_t v331 = v31;
    v328 = v20;
    if (*(unsigned char *)(a1 + 68))
    {
      int v121 = (const float *)(a1 + 40);
      float32x4_t v122 = vld1q_dup_f32(v121);
      int32x4_t v332 = (int32x4_t)v122;
      int v123 = *(_DWORD *)(v120 + 12);
      if (v123 < 32)
      {
        LODWORD(v124) = 0;
        if (v123 - 16 >= 0) {
          goto LABEL_173;
        }
        goto LABEL_212;
      }
      uint64_t v124 = 0;
      while (2)
      {
        unint64_t v126 = (int32x4_t *)(v30 + 4 * v124);
        int32x4_t v127 = vcgtq_s32(*v126, v332);
        int32x4_t v128 = vcgtq_s32(v126[1], v332);
        int32x4_t v129 = vcgtq_s32(v126[2], v332);
        int32x4_t v130 = vcgtq_s32(v126[3], v332);
        int32x4_t v131 = v126[4];
        int32x4_t v132 = v126[5];
        int32x4_t v133 = v126[6];
        int32x4_t v134 = v126[7];
        int8x16x3_t v135 = (int8x16_t *)(v118 + v124);
        uint64x2_t v136 = vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vshlq_u8(vshrq_n_u8((uint8x16_t)vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(v127), v128)), vqmovn_high_s32(vqmovn_s32(v129), v130)), 7uLL), (uint8x16_t)xmmword_1004076C0))));
        __int32 v137 = v136.i32[2];
        __int32 v138 = v136.i32[0];
        int8x16_t v139 = (int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vshlq_u8(vshrq_n_u8((uint8x16_t)vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcgtq_s32(v131, v332)), vcgtq_s32(v132, v332))), vqmovn_high_s32(vqmovn_s32(vcgtq_s32(v133, v332)), vcgtq_s32(v134, v332))), 7uLL), (uint8x16_t)xmmword_1004076C0))));
        v128.i32[0] = vextq_s8(v139, v139, 8uLL).u32[0];
        v128.i32[1] = v139.i32[0];
        *(uint32x2_t *)v139.i8 = vshl_u32(*(uint32x2_t *)v128.i8, (uint32x2_t)0x1000000018);
        __int32 v140 = v138 + (v137 << 8);
        unsigned __int32 v141 = vadd_s32(*(int32x2_t *)v139.i8, vdup_lane_s32(*(int32x2_t *)v139.i8, 1)).u32[0];
        v139.i64[0] = 0x101010101010101;
        v139.i64[1] = 0x101010101010101;
        *int8x16x3_t v135 = v139;
        v135[1] = v139;
        unsigned int v142 = v141 | v140;
        if (v141 | v140)
        {
          int v143 = v124;
          do
          {
            unsigned int v145 = __clz(__rbit32(v142));
            uint64_t v146 = (int)(v143 + v145);
            int v147 = *(_DWORD *)(v30 + 4 * v146);
            int v148 = *(__int16 *)(v117 + 2 * v146);
            int v149 = *(__int16 *)&v119[2 * v146];
            if (v148 >= 0) {
              int v150 = *(__int16 *)(v117 + 2 * v146);
            }
            else {
              int v150 = -v148;
            }
            if (v149 >= 0) {
              int v151 = *(__int16 *)&v119[2 * v146];
            }
            else {
              int v151 = -v149;
            }
            int v152 = v151 << 15;
            if (v152 >= (13573 * v150))
            {
              if (v152 <= 79109 * v150)
              {
                int v161 = ((v149 ^ v148) >> 31) | 1;
                if (v147 <= *(_DWORD *)(v334 + 4 * ((int)v146 - v161))
                  || v147 <= *(_DWORD *)(v26 + 4 * (v161 + (int)v146)))
                {
                  goto LABEL_138;
                }
                int v162 = *(_DWORD *)(a1 + 44);
                uint64_t v154 = (unsigned char *)(v118 + v146);
                if (v147 > v162)
                {
                  *uint64_t v154 = 2;
                  uint64_t v155 = (char *)v351[1];
                  if ((void *)v352 == v351[1]) {
                    unint64_t v163 = 0;
                  }
                  else {
                    unint64_t v163 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
                  }
                  uint64_t v157 = *((void *)&v353 + 1);
                  unint64_t v158 = *((void *)&v353 + 1) + v353;
                  if (v163 != *((void *)&v353 + 1) + (void)v353) {
                    goto LABEL_171;
                  }
LABEL_170:
                  sub_1002F5B40((uint64_t)v351);
                  uint64_t v157 = *((void *)&v353 + 1);
                  uint64_t v155 = (char *)v351[1];
                  unint64_t v158 = v353 + *((void *)&v353 + 1);
                  goto LABEL_171;
                }
              }
              else
              {
                if (v147 <= *(_DWORD *)(v334 + 4 * v146) || v147 < *(_DWORD *)(v26 + 4 * v146)) {
                  goto LABEL_138;
                }
                int v159 = *(_DWORD *)(a1 + 44);
                uint64_t v154 = (unsigned char *)(v118 + v146);
                if (v147 > v159)
                {
                  *uint64_t v154 = 2;
                  uint64_t v155 = (char *)v351[1];
                  if ((void *)v352 == v351[1]) {
                    unint64_t v160 = 0;
                  }
                  else {
                    unint64_t v160 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
                  }
                  uint64_t v157 = *((void *)&v353 + 1);
                  unint64_t v158 = *((void *)&v353 + 1) + v353;
                  if (v160 != *((void *)&v353 + 1) + (void)v353) {
                    goto LABEL_171;
                  }
                  goto LABEL_170;
                }
              }
            }
            else
            {
              if (v147 <= *(_DWORD *)(v30 + 4 * ((int)v146 - 1)) || v147 < *(_DWORD *)(v30 + 4 * ((int)v146 + 1))) {
                goto LABEL_138;
              }
              int v153 = *(_DWORD *)(a1 + 44);
              uint64_t v154 = (unsigned char *)(v118 + v146);
              if (v147 > v153)
              {
                *uint64_t v154 = 2;
                uint64_t v155 = (char *)v351[1];
                if ((void *)v352 == v351[1]) {
                  unint64_t v156 = 0;
                }
                else {
                  unint64_t v156 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
                }
                uint64_t v157 = *((void *)&v353 + 1);
                unint64_t v158 = *((void *)&v353 + 1) + v353;
                if (v156 == *((void *)&v353 + 1) + (void)v353) {
                  goto LABEL_170;
                }
LABEL_171:
                *(void *)(*(void *)&v155[(v158 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v158 & 0x1FF)) = v154;
                *((void *)&v353 + 1) = v157 + 1;
                goto LABEL_137;
              }
            }
            *uint64_t v154 = 0;
LABEL_137:
            a1 = v333;
LABEL_138:
            unsigned int v144 = v142 >> v145;
            int v143 = v146 + 1;
            unsigned int v142 = v142 >> v145 >> 1;
          }
          while (v144 > 1);
        }
        v124 += 32;
        uint64_t v120 = *(void *)(a1 + 8);
        uint64_t v125 = *(int *)(v120 + 12);
        if (v124 <= v125 - 32) {
          continue;
        }
        break;
      }
      a2 = v319;
      uint64_t v31 = v331;
      if ((int)v124 <= (int)v125 - 16)
      {
LABEL_173:
        uint64_t v164 = (int32x4_t *)(v30 + 4 * v124);
        int32x4_t v165 = *v164;
        int32x4_t v166 = v164[1];
        int32x4_t v167 = v164[2];
        int32x4_t v168 = v164[3];
        *(void *)&long long v169 = 0x101010101010101;
        *((void *)&v169 + 1) = 0x101010101010101;
        *(_OWORD *)(v118 + v124) = v169;
        uint64x2_t v170 = vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(vshlq_u8(vshrq_n_u8((uint8x16_t)vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcgtq_s32(v165, v332)), vcgtq_s32(v166, v332))), vqmovn_high_s32(vqmovn_s32(vcgtq_s32(v167, v332)), vcgtq_s32(v168, v332))), 7uLL), (uint8x16_t)xmmword_1004076C0))));
        unsigned int v171 = v170.i32[0] + (v170.i32[2] << 8);
        if (v171)
        {
          int v172 = v124;
          do
          {
            unsigned int v174 = __clz(__rbit32(v171));
            uint64_t v175 = (int)(v172 + v174);
            int v176 = *(_DWORD *)(v30 + 4 * v175);
            int v177 = *(__int16 *)(v117 + 2 * v175);
            int v178 = *(__int16 *)&v119[2 * v175];
            if (v177 >= 0) {
              int v179 = *(__int16 *)(v117 + 2 * v175);
            }
            else {
              int v179 = -v177;
            }
            if (v178 >= 0) {
              int v180 = *(__int16 *)&v119[2 * v175];
            }
            else {
              int v180 = -v178;
            }
            int v181 = v180 << 15;
            if (v181 >= (13573 * v179))
            {
              if (v181 <= 79109 * v179)
              {
                int v190 = ((v178 ^ v177) >> 31) | 1;
                if (v176 <= *(_DWORD *)(v334 + 4 * ((int)v175 - v190))
                  || v176 <= *(_DWORD *)(v26 + 4 * (v190 + (int)v175)))
                {
                  goto LABEL_177;
                }
                int v191 = *(_DWORD *)(a1 + 44);
                uint64_t v183 = (unsigned char *)(v118 + v175);
                if (v176 > v191)
                {
                  *uint64_t v183 = 2;
                  uint64_t v184 = (char *)v351[1];
                  if ((void *)v352 == v351[1]) {
                    unint64_t v192 = 0;
                  }
                  else {
                    unint64_t v192 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
                  }
                  uint64_t v186 = *((void *)&v353 + 1);
                  unint64_t v187 = *((void *)&v353 + 1) + v353;
                  if (v192 != *((void *)&v353 + 1) + (void)v353) {
                    goto LABEL_210;
                  }
LABEL_209:
                  sub_1002F5B40((uint64_t)v351);
                  uint64_t v186 = *((void *)&v353 + 1);
                  uint64_t v184 = (char *)v351[1];
                  unint64_t v187 = v353 + *((void *)&v353 + 1);
                  goto LABEL_210;
                }
              }
              else
              {
                if (v176 <= *(_DWORD *)(v334 + 4 * v175) || v176 < *(_DWORD *)(v26 + 4 * v175)) {
                  goto LABEL_177;
                }
                int v188 = *(_DWORD *)(a1 + 44);
                uint64_t v183 = (unsigned char *)(v118 + v175);
                if (v176 > v188)
                {
                  *uint64_t v183 = 2;
                  uint64_t v184 = (char *)v351[1];
                  if ((void *)v352 == v351[1]) {
                    unint64_t v189 = 0;
                  }
                  else {
                    unint64_t v189 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
                  }
                  uint64_t v186 = *((void *)&v353 + 1);
                  unint64_t v187 = *((void *)&v353 + 1) + v353;
                  if (v189 != *((void *)&v353 + 1) + (void)v353) {
                    goto LABEL_210;
                  }
                  goto LABEL_209;
                }
              }
            }
            else
            {
              if (v176 <= *(_DWORD *)(v30 + 4 * ((int)v175 - 1)) || v176 < *(_DWORD *)(v30 + 4 * ((int)v175 + 1))) {
                goto LABEL_177;
              }
              int v182 = *(_DWORD *)(a1 + 44);
              uint64_t v183 = (unsigned char *)(v118 + v175);
              if (v176 > v182)
              {
                *uint64_t v183 = 2;
                uint64_t v184 = (char *)v351[1];
                if ((void *)v352 == v351[1]) {
                  unint64_t v185 = 0;
                }
                else {
                  unint64_t v185 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
                }
                uint64_t v186 = *((void *)&v353 + 1);
                unint64_t v187 = *((void *)&v353 + 1) + v353;
                if (v185 == *((void *)&v353 + 1) + (void)v353) {
                  goto LABEL_209;
                }
LABEL_210:
                *(void *)(*(void *)&v184[(v187 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v187 & 0x1FF)) = v183;
                *((void *)&v353 + 1) = v186 + 1;
                goto LABEL_176;
              }
            }
            *uint64_t v183 = 0;
LABEL_176:
            a1 = v333;
LABEL_177:
            unsigned int v173 = v171 >> v174;
            int v172 = v175 + 1;
            unsigned int v171 = v171 >> v174 >> 1;
          }
          while (v173 > 1);
        }
        LODWORD(v124) = v124 | 0x10;
        uint64_t v120 = *(void *)(a1 + 8);
        a2 = v319;
        uint64_t v31 = v331;
      }
    }
    else
    {
      LODWORD(v124) = 0;
    }
LABEL_212:
    if ((int)v124 < *(_DWORD *)(v120 + 12))
    {
      uint64_t v193 = (int)v124;
      v194 = (int *)(v30 + 4 * (int)v124);
      uint64_t v195 = v325 + v323 + v324 * v31;
      do
      {
        int v196 = *v194;
        if (*v194 > *(_DWORD *)(a1 + 40))
        {
          int v197 = *(__int16 *)(v117 + 2 * v193);
          int v198 = *(__int16 *)&v119[2 * v193];
          if (v197 >= 0) {
            int v199 = *(__int16 *)(v117 + 2 * v193);
          }
          else {
            int v199 = -v197;
          }
          if (v198 >= 0) {
            int v200 = *(__int16 *)&v119[2 * v193];
          }
          else {
            int v200 = -v198;
          }
          int v201 = v200 << 15;
          if (v201 >= (13573 * v199))
          {
            if (v201 <= 79109 * v199)
            {
              BOOL v208 = (v198 ^ v197) < 0;
              uint64_t v209 = 1;
              if (v208) {
                uint64_t v209 = -1;
              }
              if (v196 > *(_DWORD *)(v334 - 4 * v209 + 4 * v193) && v196 > *(_DWORD *)(v26 + 4 * (v209 + v193)))
              {
                v202 = (unsigned char *)(v195 + v193);
                if (v196 <= *(_DWORD *)(a1 + 44))
                {
LABEL_252:
                  unsigned char *v202 = 0;
                  uint64_t v31 = v331;
                  goto LABEL_215;
                }
                unsigned char *v202 = 2;
                long long v203 = (char *)v351[1];
                if ((void *)v352 == v351[1]) {
                  unint64_t v210 = 0;
                }
                else {
                  unint64_t v210 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
                }
                uint64_t v205 = *((void *)&v353 + 1);
                unint64_t v206 = *((void *)&v353 + 1) + v353;
                if (v210 == *((void *)&v353 + 1) + (void)v353)
                {
LABEL_250:
                  sub_1002F5B40((uint64_t)v351);
                  uint64_t v205 = *((void *)&v353 + 1);
                  long long v203 = (char *)v351[1];
                  unint64_t v206 = v353 + *((void *)&v353 + 1);
                }
LABEL_251:
                *(void *)(*(void *)&v203[(v206 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v206 & 0x1FF)) = v202;
                *((void *)&v353 + 1) = v205 + 1;
                uint64_t v31 = v331;
                goto LABEL_215;
              }
            }
            else if (v196 > *(_DWORD *)(v334 + 4 * v193) && v196 >= *(_DWORD *)(v26 + 4 * v193))
            {
              v202 = (unsigned char *)(v195 + v193);
              if (v196 <= *(_DWORD *)(a1 + 44)) {
                goto LABEL_252;
              }
              unsigned char *v202 = 2;
              long long v203 = (char *)v351[1];
              if ((void *)v352 == v351[1]) {
                unint64_t v207 = 0;
              }
              else {
                unint64_t v207 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
              }
              uint64_t v205 = *((void *)&v353 + 1);
              unint64_t v206 = *((void *)&v353 + 1) + v353;
              if (v207 == *((void *)&v353 + 1) + (void)v353) {
                goto LABEL_250;
              }
              goto LABEL_251;
            }
          }
          else if (v196 > *(v194 - 1) && v196 >= v194[1])
          {
            v202 = (unsigned char *)(v195 + v193);
            if (v196 <= *(_DWORD *)(a1 + 44)) {
              goto LABEL_252;
            }
            unsigned char *v202 = 2;
            long long v203 = (char *)v351[1];
            if ((void *)v352 == v351[1]) {
              unint64_t v204 = 0;
            }
            else {
              unint64_t v204 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
            }
            uint64_t v205 = *((void *)&v353 + 1);
            unint64_t v206 = *((void *)&v353 + 1) + v353;
            if (v204 == *((void *)&v353 + 1) + (void)v353) {
              goto LABEL_250;
            }
            goto LABEL_251;
          }
        }
        *(unsigned char *)(v195 + v193) = 1;
LABEL_215:
        ++v193;
        ++v194;
      }
      while (v193 < *(int *)(*(void *)(a1 + 8) + 12));
    }
    uint64_t v8 = v320;
    uint64_t v5 = v321;
    uint64_t v22 = v327;
    uint64_t v20 = v328;
    long long v21 = v326;
    goto LABEL_62;
  }
LABEL_254:
  uint64_t v211 = *(void *)(a1 + 24);
  uint64_t v212 = *(void *)(v211 + 16);
  if (v8)
  {
    unint64_t v213 = v212 + *(void *)(a1 + 56) * (*a2 + 2);
    if (v7 == *(_DWORD *)(*(void *)(a1 + 8) + 8))
    {
LABEL_256:
      uint64_t v214 = *(void *)(v211 + 40);
      goto LABEL_259;
    }
  }
  else
  {
    unint64_t v213 = *(void *)(v211 + 16);
    if (v7 == *(_DWORD *)(*(void *)(a1 + 8) + 8)) {
      goto LABEL_256;
    }
  }
  uint64_t v214 = v212 + *(void *)(a1 + 56) * (int)v27;
LABEL_259:
  sub_1002D6AE8(&v339, &off_100497DF8);
  uint64_t v215 = *((void *)&v353 + 1);
  if (*((void *)&v353 + 1))
  {
    unsigned int v216 = v214 - v213;
    do
    {
      while (1)
      {
        unint64_t v217 = *(void *)(*(void *)((char *)v351[1]
                                     + (((unint64_t)(v353 + v215 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v353 + v215 - 1) & 0x1FF));
        if ((void *)v352 == v351[1]) {
          unint64_t v218 = 0;
        }
        else {
          unint64_t v218 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
        }
        *((void *)&v353 + 1) = v215 - 1;
        if (v218 - (v215 + (void)v353) + 1 >= 0x400)
        {
          operator delete(*(void **)(v352 - 8));
          *(void *)&long long v352 = v352 - 8;
        }
        if ((int)v217 - (int)v213 >= v216) {
          break;
        }
        uint64_t v219 = *(void *)(a1 + 56);
        if (*(unsigned char *)(v217 + ~v219))
        {
          if (*(unsigned char *)(v217 - v219)) {
            goto LABEL_271;
          }
LABEL_327:
          *(unsigned char *)(v217 - v219) = 2;
          v258 = (char *)v351[1];
          uint64_t v259 = *(void *)(a1 + 56);
          if ((void *)v352 == v351[1]) {
            unint64_t v260 = 0;
          }
          else {
            unint64_t v260 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
          }
          uint64_t v261 = *((void *)&v353 + 1);
          unint64_t v262 = *((void *)&v353 + 1) + v353;
          if (v260 == *((void *)&v353 + 1) + (void)v353)
          {
            sub_1002F5B40((uint64_t)v351);
            uint64_t v261 = *((void *)&v353 + 1);
            v258 = (char *)v351[1];
            unint64_t v262 = v353 + *((void *)&v353 + 1);
          }
          uint64_t v263 = *(void *)(a1 + 56);
          *(void *)(*(void *)&v258[(v262 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v262 & 0x1FF)) = v217 - v259;
          *((void *)&v353 + 1) = v261 + 1;
          uint64_t v220 = v217 - v263;
          if (!*(unsigned char *)(v220 + 1)) {
            goto LABEL_333;
          }
LABEL_272:
          v221 = (unsigned char *)(v217 - 1);
          if (*(unsigned char *)(v217 - 1)) {
            goto LABEL_273;
          }
LABEL_339:
          unsigned char *v221 = 2;
          v269 = (char *)v351[1];
          if ((void *)v352 == v351[1]) {
            unint64_t v270 = 0;
          }
          else {
            unint64_t v270 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
          }
          uint64_t v271 = *((void *)&v353 + 1);
          unint64_t v272 = *((void *)&v353 + 1) + v353;
          if (v270 == *((void *)&v353 + 1) + (void)v353)
          {
            sub_1002F5B40((uint64_t)v351);
            uint64_t v271 = *((void *)&v353 + 1);
            v269 = (char *)v351[1];
            unint64_t v272 = v353 + *((void *)&v353 + 1);
          }
          *(void *)(*(void *)&v269[(v272 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v272 & 0x1FF)) = v221;
          *((void *)&v353 + 1) = v271 + 1;
          v222 = (unsigned char *)(v217 + 1);
          if (!*(unsigned char *)(v217 + 1)) {
            goto LABEL_345;
          }
LABEL_274:
          uint64_t v223 = *(void *)(a1 + 56);
          if (*(unsigned char *)(v223 + v217 - 1)) {
            goto LABEL_275;
          }
LABEL_351:
          *(unsigned char *)(v217 + v223 - 1) = 2;
          v277 = (char *)v351[1];
          uint64_t v278 = *(void *)(a1 + 56);
          if ((void *)v352 == v351[1]) {
            unint64_t v279 = 0;
          }
          else {
            unint64_t v279 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
          }
          uint64_t v280 = *((void *)&v353 + 1);
          unint64_t v281 = *((void *)&v353 + 1) + v353;
          if (v279 == *((void *)&v353 + 1) + (void)v353)
          {
            sub_1002F5B40((uint64_t)v351);
            uint64_t v280 = *((void *)&v353 + 1);
            v277 = (char *)v351[1];
            unint64_t v281 = v353 + *((void *)&v353 + 1);
          }
          uint64_t v223 = *(void *)(a1 + 56);
          *(void *)(*(void *)&v277[(v281 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v281 & 0x1FF)) = v217 + v278 - 1;
          *((void *)&v353 + 1) = v280 + 1;
          if (!*(unsigned char *)(v217 + v223)) {
            goto LABEL_357;
          }
LABEL_276:
          if (*(unsigned char *)(v223 + v217 + 1)) {
            goto LABEL_262;
          }
LABEL_363:
          *(unsigned char *)(v217 + v223 + 1) = 2;
          v287 = (char *)v351[1];
          uint64_t v288 = *(void *)(a1 + 56);
          if ((void *)v352 == v351[1]) {
            unint64_t v289 = 0;
          }
          else {
            unint64_t v289 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
          }
          uint64_t v290 = *((void *)&v353 + 1);
          unint64_t v291 = *((void *)&v353 + 1) + v353;
          if (v289 == *((void *)&v353 + 1) + (void)v353)
          {
            sub_1002F5B40((uint64_t)v351);
            uint64_t v290 = *((void *)&v353 + 1);
            v287 = (char *)v351[1];
            unint64_t v291 = v353 + *((void *)&v353 + 1);
          }
          *(void *)(*(void *)&v287[(v291 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v291 & 0x1FF)) = v217 + v288 + 1;
          uint64_t v215 = v290 + 1;
          *((void *)&v353 + 1) = v290 + 1;
          if (v290 == -1) {
            goto LABEL_369;
          }
        }
        else
        {
          *(unsigned char *)(~v219 + v217) = 2;
          v237 = (char *)v351[1];
          uint64_t v238 = *(void *)(a1 + 56);
          if ((void *)v352 == v351[1]) {
            unint64_t v239 = 0;
          }
          else {
            unint64_t v239 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
          }
          uint64_t v240 = *((void *)&v353 + 1);
          unint64_t v241 = *((void *)&v353 + 1) + v353;
          if (v239 == *((void *)&v353 + 1) + (void)v353)
          {
            sub_1002F5B40((uint64_t)v351);
            uint64_t v240 = *((void *)&v353 + 1);
            v237 = (char *)v351[1];
            unint64_t v241 = v353 + *((void *)&v353 + 1);
          }
          uint64_t v219 = *(void *)(a1 + 56);
          *(void *)(*(void *)&v237[(v241 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v241 & 0x1FF)) = ~v238 + v217;
          *((void *)&v353 + 1) = v240 + 1;
          if (!*(unsigned char *)(v217 - v219)) {
            goto LABEL_327;
          }
LABEL_271:
          uint64_t v220 = v217 - v219;
          if (*(unsigned char *)(v220 + 1)) {
            goto LABEL_272;
          }
LABEL_333:
          *(unsigned char *)(v220 + 1) = 2;
          v264 = (char *)v351[1];
          uint64_t v265 = *(void *)(a1 + 56);
          if ((void *)v352 == v351[1]) {
            unint64_t v266 = 0;
          }
          else {
            unint64_t v266 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
          }
          uint64_t v267 = *((void *)&v353 + 1);
          unint64_t v268 = *((void *)&v353 + 1) + v353;
          if (v266 == *((void *)&v353 + 1) + (void)v353)
          {
            sub_1002F5B40((uint64_t)v351);
            uint64_t v267 = *((void *)&v353 + 1);
            v264 = (char *)v351[1];
            unint64_t v268 = v353 + *((void *)&v353 + 1);
          }
          *(void *)(*(void *)&v264[(v268 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v268 & 0x1FF)) = v217 - v265 + 1;
          *((void *)&v353 + 1) = v267 + 1;
          v221 = (unsigned char *)(v217 - 1);
          if (!*(unsigned char *)(v217 - 1)) {
            goto LABEL_339;
          }
LABEL_273:
          v222 = (unsigned char *)(v217 + 1);
          if (*(unsigned char *)(v217 + 1)) {
            goto LABEL_274;
          }
LABEL_345:
          unsigned char *v222 = 2;
          v273 = (char *)v351[1];
          if ((void *)v352 == v351[1]) {
            unint64_t v274 = 0;
          }
          else {
            unint64_t v274 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
          }
          uint64_t v275 = *((void *)&v353 + 1);
          unint64_t v276 = *((void *)&v353 + 1) + v353;
          if (v274 == *((void *)&v353 + 1) + (void)v353)
          {
            sub_1002F5B40((uint64_t)v351);
            uint64_t v275 = *((void *)&v353 + 1);
            v273 = (char *)v351[1];
            unint64_t v276 = v353 + *((void *)&v353 + 1);
          }
          *(void *)(*(void *)&v273[(v276 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v276 & 0x1FF)) = v222;
          *((void *)&v353 + 1) = v275 + 1;
          uint64_t v223 = *(void *)(a1 + 56);
          if (!*(unsigned char *)(v223 + v217 - 1)) {
            goto LABEL_351;
          }
LABEL_275:
          if (*(unsigned char *)(v217 + v223)) {
            goto LABEL_276;
          }
LABEL_357:
          *(unsigned char *)(v217 + v223) = 2;
          v282 = (char *)v351[1];
          uint64_t v283 = *(void *)(a1 + 56);
          if ((void *)v352 == v351[1]) {
            unint64_t v284 = 0;
          }
          else {
            unint64_t v284 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
          }
          uint64_t v285 = *((void *)&v353 + 1);
          unint64_t v286 = *((void *)&v353 + 1) + v353;
          if (v284 == *((void *)&v353 + 1) + (void)v353)
          {
            sub_1002F5B40((uint64_t)v351);
            uint64_t v285 = *((void *)&v353 + 1);
            v282 = (char *)v351[1];
            unint64_t v286 = v353 + *((void *)&v353 + 1);
          }
          uint64_t v223 = *(void *)(a1 + 56);
          *(void *)(*(void *)&v282[(v286 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v286 & 0x1FF)) = v217 + v283;
          *((void *)&v353 + 1) = v285 + 1;
          if (!*(unsigned char *)(v223 + v217 + 1)) {
            goto LABEL_363;
          }
LABEL_262:
          uint64_t v215 = *((void *)&v353 + 1);
          if (!*((void *)&v353 + 1)) {
            goto LABEL_369;
          }
        }
      }
      v224 = (char *)__p[1];
      if ((void *)v349 == __p[1]) {
        unint64_t v225 = 0;
      }
      else {
        unint64_t v225 = (((void)v349 - (unint64_t)__p[1]) << 6) - 1;
      }
      uint64_t v226 = *((void *)&v350 + 1);
      unint64_t v227 = *((void *)&v350 + 1) + v350;
      if (v225 == *((void *)&v350 + 1) + (void)v350)
      {
        sub_1002F5B40((uint64_t)__p);
        uint64_t v226 = *((void *)&v350 + 1);
        v224 = (char *)__p[1];
        unint64_t v227 = v350 + *((void *)&v350 + 1);
      }
      *(void *)(*(void *)&v224[(v227 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v227 & 0x1FF)) = v217;
      *((void *)&v350 + 1) = v226 + 1;
      if (v217 < v213) {
        uint64_t v228 = *(void *)(a1 + 56);
      }
      else {
        uint64_t v228 = -*(void *)(a1 + 56);
      }
      v229 = (unsigned char *)(v217 - 1);
      if (*(unsigned char *)(v217 - 1))
      {
        v230 = (unsigned char *)(v217 + 1);
        if (*(unsigned char *)(v217 + 1)) {
          goto LABEL_288;
        }
      }
      else
      {
        unsigned char *v229 = 2;
        v242 = (char *)v351[1];
        if ((void *)v352 == v351[1]) {
          unint64_t v243 = 0;
        }
        else {
          unint64_t v243 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
        }
        uint64_t v244 = *((void *)&v353 + 1);
        unint64_t v245 = *((void *)&v353 + 1) + v353;
        if (v243 == *((void *)&v353 + 1) + (void)v353)
        {
          sub_1002F5B40((uint64_t)v351);
          uint64_t v244 = *((void *)&v353 + 1);
          v242 = (char *)v351[1];
          unint64_t v245 = v353 + *((void *)&v353 + 1);
        }
        *(void *)(*(void *)&v242[(v245 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v245 & 0x1FF)) = v229;
        *((void *)&v353 + 1) = v244 + 1;
        v230 = (unsigned char *)(v217 + 1);
        if (*(unsigned char *)(v217 + 1))
        {
LABEL_288:
          if (*(unsigned char *)(v228 + v217 - 1)) {
            goto LABEL_289;
          }
          goto LABEL_315;
        }
      }
      unsigned char *v230 = 2;
      v246 = (char *)v351[1];
      if ((void *)v352 == v351[1]) {
        unint64_t v247 = 0;
      }
      else {
        unint64_t v247 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
      }
      uint64_t v248 = *((void *)&v353 + 1);
      unint64_t v249 = *((void *)&v353 + 1) + v353;
      if (v247 == *((void *)&v353 + 1) + (void)v353)
      {
        sub_1002F5B40((uint64_t)v351);
        uint64_t v248 = *((void *)&v353 + 1);
        v246 = (char *)v351[1];
        unint64_t v249 = v353 + *((void *)&v353 + 1);
      }
      *(void *)(*(void *)&v246[(v249 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v249 & 0x1FF)) = v230;
      *((void *)&v353 + 1) = v248 + 1;
      if (*(unsigned char *)(v228 + v217 - 1))
      {
LABEL_289:
        v231 = (unsigned char *)(v217 + v228);
        if (!*(unsigned char *)(v217 + v228)) {
          goto LABEL_321;
        }
        goto LABEL_290;
      }
LABEL_315:
      *(unsigned char *)(v217 + v228 - 1) = 2;
      v250 = (char *)v351[1];
      if ((void *)v352 == v351[1]) {
        unint64_t v251 = 0;
      }
      else {
        unint64_t v251 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
      }
      uint64_t v252 = *((void *)&v353 + 1);
      unint64_t v253 = *((void *)&v353 + 1) + v353;
      if (v251 == *((void *)&v353 + 1) + (void)v353)
      {
        sub_1002F5B40((uint64_t)v351);
        uint64_t v252 = *((void *)&v353 + 1);
        v250 = (char *)v351[1];
        unint64_t v253 = v353 + *((void *)&v353 + 1);
      }
      *(void *)(*(void *)&v250[(v253 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v253 & 0x1FF)) = v217 + v228 - 1;
      *((void *)&v353 + 1) = v252 + 1;
      v231 = (unsigned char *)(v217 + v228);
      if (!*(unsigned char *)(v217 + v228))
      {
LABEL_321:
        unsigned char *v231 = 2;
        v254 = (char *)v351[1];
        if ((void *)v352 == v351[1]) {
          unint64_t v255 = 0;
        }
        else {
          unint64_t v255 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
        }
        uint64_t v256 = *((void *)&v353 + 1);
        unint64_t v257 = *((void *)&v353 + 1) + v353;
        if (v255 == *((void *)&v353 + 1) + (void)v353)
        {
          sub_1002F5B40((uint64_t)v351);
          uint64_t v256 = *((void *)&v353 + 1);
          v254 = (char *)v351[1];
          unint64_t v257 = v353 + *((void *)&v353 + 1);
        }
        *(void *)(*(void *)&v254[(v257 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v257 & 0x1FF)) = v231;
        *((void *)&v353 + 1) = v256 + 1;
        if (*(unsigned char *)(v228 + v217 + 1)) {
          goto LABEL_262;
        }
        goto LABEL_291;
      }
LABEL_290:
      if (*(unsigned char *)(v228 + v217 + 1)) {
        goto LABEL_262;
      }
LABEL_291:
      v231[1] = 2;
      v232 = v231 + 1;
      v233 = (char *)v351[1];
      if ((void *)v352 == v351[1]) {
        unint64_t v234 = 0;
      }
      else {
        unint64_t v234 = (((void)v352 - (unint64_t)v351[1]) << 6) - 1;
      }
      uint64_t v235 = *((void *)&v353 + 1);
      unint64_t v236 = *((void *)&v353 + 1) + v353;
      if (v234 == *((void *)&v353 + 1) + (void)v353)
      {
        sub_1002F5B40((uint64_t)v351);
        uint64_t v235 = *((void *)&v353 + 1);
        v233 = (char *)v351[1];
        unint64_t v236 = v353 + *((void *)&v353 + 1);
      }
      *(void *)(*(void *)&v233[(v236 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v236 & 0x1FF)) = v232;
      uint64_t v215 = v235 + 1;
      *((void *)&v353 + 1) = v235 + 1;
    }
    while (v235 != -1);
  }
LABEL_369:
  if (*((void *)&v350 + 1))
  {
    sub_1002D2EC4((pthread_mutex_t **)(a1 + 72));
    v292 = *(void **)(a1 + 32);
    unint64_t v293 = v292[4] + v292[5];
    uint64_t v294 = v292[1];
    v295 = (char *)(v294 + 8 * (v293 >> 9));
    if (v292[2] == v294) {
      uint64_t v296 = 0;
    }
    else {
      uint64_t v296 = *(void *)v295 + 8 * (v293 & 0x1FF);
    }
    v297 = (const void **)((char *)__p[1] + 8 * ((unint64_t)v350 >> 9));
    if ((void *)v349 == __p[1])
    {
      v298 = 0;
      v300 = 0;
      v299 = (const void **)((char *)__p[1] + 8 * ((*((void *)&v350 + 1) + (void)v350) >> 9));
    }
    else
    {
      v298 = (char *)*v297 + 8 * (v350 & 0x1FF);
      v299 = (const void **)((char *)__p[1] + 8 * ((*((void *)&v350 + 1) + (void)v350) >> 9));
      v300 = (char *)*v299 + 8 * ((*((void *)&v350 + 1) + v350) & 0x1FF);
      if (v300 != v298)
      {
        unint64_t v301 = ((8 * ((WORD4(v350) + (_WORD)v350) & 0x1FF)) >> 3)
             + (((char *)v299 - (char *)v297) << 6)
             - ((uint64_t)(8 * (v350 & 0x1FF)) >> 3);
LABEL_378:
        sub_1002F6110(v292, v295, v296, v297, v298, v299, v300, v301);
        sub_1002D2ECC((pthread_mutex_t **)(a1 + 72));
        goto LABEL_379;
      }
    }
    unint64_t v301 = 0;
    goto LABEL_378;
  }
LABEL_379:
  if (v340) {
    sub_1002D6888(&v339);
  }
  if (*(_OWORD **)&v335[0] != &v335[1] && *(void *)&v335[0]) {
    operator delete[]();
  }
  if (v344) {
    sub_1002D6888(&v342);
  }
  if (v347) {
    sub_1002D6888(v346);
  }
  v302 = (void **)__p[1];
  v303 = (void **)v349;
  *((void *)&v350 + 1) = 0;
  unint64_t v304 = v349 - (unint64_t)__p[1];
  if ((unint64_t)v349 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v302);
      v303 = (void **)v349;
      v302 = (void **)((char *)__p[1] + 8);
      __p[1] = v302;
      unint64_t v304 = v349 - (void)v302;
    }
    while ((void)v349 - (void)v302 > 0x10uLL);
  }
  unint64_t v305 = v304 >> 3;
  if (v305 == 1)
  {
    uint64_t v306 = 256;
    goto LABEL_394;
  }
  if (v305 == 2)
  {
    uint64_t v306 = 512;
LABEL_394:
    *(void *)&long long v350 = v306;
  }
  if (v302 != v303)
  {
    do
    {
      v307 = *v302++;
      operator delete(v307);
    }
    while (v302 != v303);
    if ((void *)v349 != __p[1]) {
      *(void *)&long long v349 = v349 + (((unint64_t)__p[1] - v349 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  v308 = (void **)v351[1];
  v309 = (void **)v352;
  *((void *)&v353 + 1) = 0;
  unint64_t v310 = v352 - (unint64_t)v351[1];
  if ((unint64_t)v352 - (unint64_t)v351[1] >= 0x11)
  {
    do
    {
      operator delete(*v308);
      v309 = (void **)v352;
      v308 = (void **)((char *)v351[1] + 8);
      v351[1] = v308;
      unint64_t v310 = v352 - (void)v308;
    }
    while ((void)v352 - (void)v308 > 0x10uLL);
  }
  unint64_t v311 = v310 >> 3;
  if (v311 == 1)
  {
    uint64_t v312 = 256;
    goto LABEL_407;
  }
  if (v311 == 2)
  {
    uint64_t v312 = 512;
LABEL_407:
    *(void *)&long long v353 = v312;
  }
  if (v308 != v309)
  {
    do
    {
      v313 = *v308++;
      operator delete(v313);
    }
    while (v308 != v309);
    if ((void *)v352 != v351[1]) {
      *(void *)&long long v352 = v352 + (((unint64_t)v351[1] - v352 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v351[0]) {
    operator delete(v351[0]);
  }
  if (v354 != v356 && v354) {
    operator delete[]();
  }
  if (v357 != v359 && v357) {
    operator delete[]();
  }
  if (*(void *)&v360[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v360[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v360);
  }
  *(void *)&v360[56] = 0;
  memset(&v360[16], 0, 32);
  if (*(int *)&v360[4] >= 1)
  {
    uint64_t v314 = 0;
    v315 = v361;
    do
      *(_DWORD *)&v315[4 * v314++] = 0;
    while (v314 < *(int *)&v360[4]);
  }
  if (v362 != &v363) {
    j__free(v362);
  }
  if (*(void *)&v365[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v365[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v365);
  }
  *(void *)&v365[56] = 0;
  memset(&v365[16], 0, 32);
  if (*(int *)&v365[4] >= 1)
  {
    uint64_t v316 = 0;
    v317 = v366;
    do
      *(_DWORD *)&v317[4 * v316++] = 0;
    while (v316 < *(int *)&v365[4]);
  }
  if (v367 != &v368) {
    j__free(v367);
  }
  if (v371) {
    sub_1002D6888(v370);
  }
}

void sub_1002F5980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10020FA00((uint64_t)&STACK[0x518]);
  sub_10020FA00((uint64_t)&STACK[0x530]);
  sub_1002F7EE0((uint64_t)&STACK[0x540]);
  sub_1002F7EE0((uint64_t)&STACK[0x570]);
  if (STACK[0x5A0] != a13 && STACK[0x5A0]) {
    operator delete[]();
  }
  if (STACK[0x9C0] != v13)
  {
    if (STACK[0x9C0]) {
      operator delete[]();
    }
  }
  sub_1000094F4((uint64_t)&STACK[0xDE0]);
  sub_1000094F4(v14 - 240);
  sub_10020FA00(v14 - 136);
  _Unwind_Resume(a1);
}

void sub_1002F5B40(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    int v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            int v74 = &v34[8 * v32];
            int v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              int v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              int v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *int v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)int v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_10000BA6C();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      int v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1000uLL);
      sub_1002BD6DC((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1000uLL);
    sub_1002BD86C((void **)a1, &v91);
    BOOL v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              unint64_t v85 = (long long *)(v41 + 3);
              uint16x8_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                _OWORD *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0x1000uLL);
  uint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    int v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_10000BA6C();
      }
      int16x8_t v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_10000BA6C();
          }
          int16x8_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            unint64_t v69 = (long long *)(v27 + 16);
            int16x8_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)int16x8_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          float v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      int16x8_t v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  int16x8_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_1002F60B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002F60CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002F60E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002F60F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002F6110(void *a1, char *a2, uint64_t a3, const void **a4, char *__src, const void **a6, char *a7, unint64_t a8)
{
  unint64_t v8 = a8;
  unint64_t v14 = a1[4];
  unint64_t v15 = v14 >> 9;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v18 = (char *)(v16 + 8 * (v14 >> 9));
  if (v17 == v16)
  {
    uint64_t v19 = 0;
    if (a3)
    {
LABEL_3:
      unint64_t v20 = ((a3 - *(void *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(void *)v18) >> 3);
      uint64_t v21 = a1[5];
      if (v20 < v21 - v20) {
        goto LABEL_4;
      }
LABEL_14:
      uint64_t v26 = ((v17 - v16) << 6) - 1;
      if (v17 == v16) {
        uint64_t v26 = 0;
      }
      unint64_t v27 = v14 + v21;
      unint64_t v28 = v26 - v27;
      if (a8 > v28)
      {
        sub_1002F6F6C((uint64_t)a1, a8 - v28);
        uint64_t v21 = a1[5];
        uint64_t v16 = a1[1];
        uint64_t v17 = a1[2];
        unint64_t v27 = a1[4] + v21;
      }
      uint64_t v29 = (const void **)(v16 + 8 * (v27 >> 9));
      if (v17 == v16)
      {
        unint64_t v30 = 0;
        unint64_t v31 = v21 - v20;
        unint64_t v32 = v21 - v20 - v8;
        if (v21 - v20 < v8)
        {
LABEL_20:
          if (v31 < v8 >> 1)
          {
            if (v31)
            {
              uint64_t v33 = v31 + ((__src - (unsigned char *)*a4) >> 3);
              if (v33 >= 1)
              {
                a6 = &a4[(unint64_t)v33 >> 9];
LABEL_36:
                unint64_t v39 = (char *)*a6 + 8 * (v33 & 0x1FF);
                if (v39 == a7) {
                  goto LABEL_42;
                }
                goto LABEL_76;
              }
              unint64_t v63 = 511 - v33;
              a6 = &a4[-(v63 >> 9)];
              unint64_t v39 = (char *)*a6 + 8 * (~(_WORD)v63 & 0x1FF);
              if (v39 == a7) {
                goto LABEL_42;
              }
            }
            else
            {
              a6 = a4;
              unint64_t v39 = __src;
              if (__src == a7) {
                goto LABEL_42;
              }
            }
LABEL_76:
            uint64_t v64 = a6;
            uint64_t v65 = v39;
            int64_t v38 = v29;
            BOOL v37 = v30;
            while (1)
            {
              *(void *)BOOL v37 = *(void *)v65;
              v37 += 8;
              if (v37 - (unsigned char *)*v38 == 4096)
              {
                uint64_t v66 = (char *)v38[1];
                ++v38;
                BOOL v37 = v66;
                v65 += 8;
                if (v65 - (unsigned char *)*v64 == 4096)
                {
LABEL_82:
                  uint64_t v67 = (char *)v64[1];
                  ++v64;
                  uint64_t v65 = v67;
                }
              }
              else
              {
                v65 += 8;
                if (v65 - (unsigned char *)*v64 == 4096) {
                  goto LABEL_82;
                }
              }
              ++v21;
              if (v65 == a7)
              {
                a1[5] = v21;
                unint64_t v8 = v31;
                if (!v31) {
                  goto LABEL_102;
                }
                goto LABEL_84;
              }
            }
          }
          uint64_t v33 = v32 + ((a7 - (unsigned char *)*a6) >> 3);
          if (v33 < 1)
          {
            unint64_t v41 = 511 - v33;
            a6 -= v41 >> 9;
            unint64_t v39 = (char *)*a6 + 8 * (~(_WORD)v41 & 0x1FF);
            if (v39 == a7)
            {
LABEL_42:
              BOOL v37 = v30;
              int64_t v38 = v29;
              unint64_t v8 = v31;
              if (!v31) {
                goto LABEL_102;
              }
              goto LABEL_84;
            }
            goto LABEL_76;
          }
          a6 += (unint64_t)v33 >> 9;
          goto LABEL_36;
        }
      }
      else
      {
        unint64_t v30 = (char *)*v29 + 8 * (v27 & 0x1FF);
        unint64_t v31 = v21 - v20;
        unint64_t v32 = v21 - v20 - v8;
        if (v21 - v20 < v8) {
          goto LABEL_20;
        }
      }
      BOOL v37 = v30;
      int64_t v38 = v29;
      unint64_t v39 = a7;
      if (!v8) {
        goto LABEL_102;
      }
LABEL_84:
      uint64_t v68 = ((v30 - (unsigned char *)*v29) >> 3) - v8;
      if (v68 < 1)
      {
        unint64_t v71 = 511 - v68;
        unint64_t v69 = &v29[-(v71 >> 9)];
        int16x8_t v70 = (char *)*v69 + 8 * (~(_WORD)v71 & 0x1FF);
        if (v70 == v30) {
          goto LABEL_96;
        }
      }
      else
      {
        unint64_t v69 = &v29[(unint64_t)v68 >> 9];
        int16x8_t v70 = (char *)*v69 + 8 * (v68 & 0x1FF);
        if (v70 == v30)
        {
LABEL_96:
          if (v8 < v31)
          {
            uint64_t v76 = ((v30 - (unsigned char *)*v29) >> 3) - v31;
            if (v76 < 1)
            {
              unint64_t v79 = 511 - v76;
              uint64_t v77 = &v29[-(v79 >> 9)];
              int v78 = (char *)*v77 + 8 * (~(_WORD)v79 & 0x1FF);
            }
            else
            {
              uint64_t v77 = &v29[(unint64_t)v76 >> 9];
              int v78 = (char *)*v77 + 8 * (v76 & 0x1FF);
            }
            sub_1002F7B5C(v77, v78, v69, v70, v29, v30, &v84);
            uint64_t v29 = v86;
            unint64_t v30 = v87;
          }
          sub_1002F7B5C(a4, __src, a6, v39, v29, v30, &v84);
          goto LABEL_102;
        }
      }
      long long v72 = v69;
      uint64_t v73 = v70;
      while (1)
      {
        *(void *)BOOL v37 = *(void *)v73;
        v37 += 8;
        if (v37 - (unsigned char *)*v38 == 4096)
        {
          int v74 = (char *)v38[1];
          ++v38;
          BOOL v37 = v74;
          v73 += 8;
          if (v73 - (unsigned char *)*v72 == 4096)
          {
LABEL_94:
            uint64_t v75 = (char *)v72[1];
            ++v72;
            uint64_t v73 = v75;
          }
        }
        else
        {
          v73 += 8;
          if (v73 - (unsigned char *)*v72 == 4096) {
            goto LABEL_94;
          }
        }
        ++v21;
        if (v73 == v30)
        {
          a1[5] = v21;
          goto LABEL_96;
        }
      }
    }
  }
  else
  {
    uint64_t v19 = *(void *)v18 + 8 * (a1[4] & 0x1FFLL);
    if (a3 != v19) {
      goto LABEL_3;
    }
  }
  unint64_t v20 = 0;
  uint64_t v21 = a1[5];
  if (!v21) {
    goto LABEL_14;
  }
LABEL_4:
  if (a8 > v14)
  {
    sub_1002F687C((uint64_t)a1, a8 - v14);
    unint64_t v14 = a1[4];
    uint64_t v16 = a1[1];
    uint64_t v17 = a1[2];
    unint64_t v15 = v14 >> 9;
  }
  uint64_t v22 = (const void **)(v16 + 8 * v15);
  if (v17 != v16)
  {
    uint64_t v23 = (uint64_t)*v22 + 8 * (v14 & 0x1FF);
    unint64_t v24 = v8 - v20;
    if (v8 > v20) {
      goto LABEL_8;
    }
LABEL_25:
    uint64_t v34 = v23;
    uint64_t v35 = v22;
    uint64_t v36 = __src;
    if (v8) {
      goto LABEL_57;
    }
    goto LABEL_102;
  }
  uint64_t v23 = 0;
  unint64_t v24 = v8 - v20;
  if (v8 <= v20) {
    goto LABEL_25;
  }
LABEL_8:
  if (v20 < v8 >> 1)
  {
    if (v20)
    {
      uint64_t v25 = ((a7 - (unsigned char *)*a6) >> 3) - v20;
      if (v25 >= 1)
      {
        a4 = &a6[(unint64_t)v25 >> 9];
        goto LABEL_32;
      }
      unint64_t v42 = 511 - v25;
      a4 = &a6[-(v42 >> 9)];
      uint64_t v36 = (char *)*a4 + 8 * (~(_WORD)v42 & 0x1FF);
      if (v36 == __src) {
        goto LABEL_39;
      }
    }
    else
    {
      a4 = a6;
      uint64_t v36 = a7;
      if (a7 == __src) {
        goto LABEL_39;
      }
    }
    goto LABEL_49;
  }
  uint64_t v25 = v24 + ((__src - (unsigned char *)*a4) >> 3);
  if (v25 >= 1)
  {
    a4 += (unint64_t)v25 >> 9;
LABEL_32:
    uint64_t v36 = (char *)*a4 + 8 * (v25 & 0x1FF);
    if (v36 == __src) {
      goto LABEL_39;
    }
    goto LABEL_49;
  }
  unint64_t v40 = 511 - v25;
  a4 -= v40 >> 9;
  uint64_t v36 = (char *)*a4 + 8 * (~(_WORD)v40 & 0x1FF);
  if (v36 != __src)
  {
LABEL_49:
    uint64_t v43 = a1[5];
    uint64_t v44 = a4;
    int64_t v45 = v36;
    uint64_t v35 = v22;
    uint64_t v34 = v23;
    while (1)
    {
      if ((const void *)v34 == *v35)
      {
        uint64_t v47 = (uint64_t)*--v35;
        uint64_t v34 = v47 + 4096;
        if (v45 == *v44)
        {
LABEL_55:
          uint64_t v48 = (uint64_t)*--v44;
          int64_t v45 = (char *)(v48 + 4096);
        }
      }
      else if (v45 == *v44)
      {
        goto LABEL_55;
      }
      uint64_t v46 = *((void *)v45 - 1);
      v45 -= 8;
      *(void *)(v34 - 8) = v46;
      v34 -= 8;
      --v14;
      ++v43;
      if (v45 == __src)
      {
        a1[4] = v14;
        a1[5] = v43;
        unint64_t v8 = v20;
        if (!v20) {
          goto LABEL_102;
        }
LABEL_57:
        uint64_t v49 = v8 + ((v23 - (uint64_t)*v22) >> 3);
        if (v49 < 1)
        {
          unint64_t v52 = 511 - v49;
          uint64_t v50 = &v22[-(v52 >> 9)];
          int16x8_t v51 = (char *)*v50 + 8 * (~(_WORD)v52 & 0x1FF);
          if (v51 == (unsigned char *)v23) {
            goto LABEL_69;
          }
        }
        else
        {
          uint64_t v50 = &v22[(unint64_t)v49 >> 9];
          int16x8_t v51 = (char *)*v50 + 8 * (v49 & 0x1FF);
          if (v51 == (unsigned char *)v23)
          {
LABEL_69:
            if (v8 < v20)
            {
              uint64_t v59 = v20 + ((v23 - (uint64_t)*v22) >> 3);
              if (v59 < 1)
              {
                unint64_t v62 = 511 - v59;
                int16x8_t v60 = &v22[-(v62 >> 9)];
                unint64_t v61 = (char *)*v60 + 8 * (~(_WORD)v62 & 0x1FF);
              }
              else
              {
                int16x8_t v60 = &v22[(unint64_t)v59 >> 9];
                unint64_t v61 = (char *)*v60 + 8 * (v59 & 0x1FF);
              }
              uint64_t v84 = v22;
              uint64_t v85 = v23;
              sub_1002F78D8(v50, v51, v60, v61, (uint64_t)&v84);
              uint64_t v22 = v84;
              uint64_t v23 = v85;
            }
            uint64_t v84 = v22;
            uint64_t v85 = v23;
            sub_1002F78D8(a4, v36, a6, a7, (uint64_t)&v84);
            goto LABEL_102;
          }
        }
        uint64_t v53 = a1[5];
        uint64_t v54 = v50;
        uint64_t v55 = v51;
        while (2)
        {
          if ((const void *)v34 == *v35)
          {
            uint64_t v57 = (uint64_t)*--v35;
            uint64_t v34 = v57 + 4096;
            if (v55 == *v54) {
              goto LABEL_67;
            }
          }
          else if (v55 == *v54)
          {
LABEL_67:
            uint64_t v58 = (uint64_t)*--v54;
            uint64_t v55 = (unsigned char *)(v58 + 4096);
          }
          uint64_t v56 = *((void *)v55 - 1);
          v55 -= 8;
          *(void *)(v34 - 8) = v56;
          v34 -= 8;
          --v14;
          ++v53;
          if (v55 == (unsigned char *)v23)
          {
            a1[4] = v14;
            a1[5] = v53;
            goto LABEL_69;
          }
          continue;
        }
      }
    }
  }
LABEL_39:
  uint64_t v34 = v23;
  uint64_t v35 = v22;
  unint64_t v8 = v20;
  if (v20) {
    goto LABEL_57;
  }
LABEL_102:
  uint64_t v80 = a1[1];
  unint64_t result = (void *)(v80 + 8 * (a1[4] >> 9));
  if (a1[2] == v80)
  {
    uint64_t v82 = 0;
    if (!v20) {
      return result;
    }
  }
  else
  {
    uint64_t v82 = *result + 8 * (a1[4] & 0x1FFLL);
    if (!v20) {
      return result;
    }
  }
  uint64_t v83 = v20 + ((v82 - *result) >> 3);
  if (v83 < 1) {
    result -= (unint64_t)(511 - v83) >> 9;
  }
  else {
    result += (unint64_t)v83 >> 9;
  }
  return result;
}

void sub_1002F687C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == v3) {
    unint64_t v5 = a2 + 1;
  }
  else {
    unint64_t v5 = a2;
  }
  if (v4 == v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v3) << 6) - 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v7 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v7 = v5 >> 9;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = (unint64_t)(v6 - (*(void *)(a1 + 40) + v8)) >> 9;
  if (v7 >= v9) {
    unint64_t v10 = (unint64_t)(v6 - (*(void *)(a1 + 40) + v8)) >> 9;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v7 <= v9)
  {
    for (*(void *)(a1 + 32) = v8 + (v10 << 9); v10; --v10)
    {
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v101 = *(void **)(v17 - 8);
      *(void *)(a1 + 16) = v17 - 8;
      sub_1002BD86C((void **)a1, &v101);
    }
    return;
  }
  unint64_t v11 = v7 - v10;
  uint64_t v12 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v13 = (v4 - v3) >> 3;
  if (v7 - v10 <= (v12 >> 3) - v13)
  {
    if (v11)
    {
      if (v3 == *(void *)a1)
      {
LABEL_31:
        unint64_t v20 = v11;
        do
        {
          uint64_t v101 = operator new(0x1000uLL);
          sub_1002BD6DC((char **)a1, &v101);
          --v20;
        }
        while (v20);
        v10 += v11;
        uint64_t v8 = *(void *)(a1 + 32);
      }
      else
      {
        while (1)
        {
          uint64_t v101 = operator new(0x1000uLL);
          sub_1002BD86C((void **)a1, &v101);
          uint64_t v18 = *(void *)(a1 + 8);
          uint64_t v19 = *(void *)(a1 + 16) - v18 == 8 ? 511 : 512;
          uint64_t v8 = v19 + *(void *)(a1 + 32);
          *(void *)(a1 + 32) = v8;
          if (!--v11) {
            break;
          }
          if (v18 == *(void *)a1) {
            goto LABEL_31;
          }
        }
      }
    }
    for (*(void *)(a1 + 32) = v8 + (v10 << 9); v10; --v10)
    {
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v101 = *(void **)(v21 - 8);
      *(void *)(a1 + 16) = v21 - 8;
      sub_1002BD86C((void **)a1, &v101);
    }
    return;
  }
  BOOL v14 = v4 == v3;
  if (v12 >> 2 <= v11 + v13) {
    unint64_t v15 = v11 + v13;
  }
  else {
    unint64_t v15 = v12 >> 2;
  }
  if (v15)
  {
    if (v15 >> 61) {
      sub_10000BA6C();
    }
    uint64_t v16 = (char *)operator new(8 * v15);
  }
  else
  {
    uint64_t v16 = 0;
  }
  unint64_t v100 = (v7 << 9) - v14;
  uint64_t v22 = &v16[8 * v15];
  uint64_t v23 = v16;
  unint64_t v24 = v16;
  uint64_t v25 = v16;
  do
  {
    uint64_t v26 = operator new(0x1000uLL);
    if (v24 != v22) {
      goto LABEL_40;
    }
    if (v23 > v25)
    {
      unint64_t v27 = v25;
      uint64_t v28 = (v23 - v25) >> 3;
      if (v28 >= -1) {
        uint64_t v29 = v28 + 1;
      }
      else {
        uint64_t v29 = v28 + 2;
      }
      uint64_t v30 = v29 >> 1;
      unint64_t v31 = &v23[-8 * (v29 >> 1)];
      unint64_t v32 = v22;
      if (v22 != v23)
      {
        memmove(v31, v23, v22 - v23);
        unint64_t v32 = v23;
      }
      unint64_t v24 = &v31[v22 - v23];
      uint64_t v23 = &v32[-8 * v30];
      uint64_t v25 = v27;
      goto LABEL_40;
    }
    if (v22 == v25) {
      unint64_t v33 = 1;
    }
    else {
      unint64_t v33 = (v22 - v25) >> 2;
    }
    if (v33 >> 61) {
      sub_10000BA6C();
    }
    uint64_t v34 = operator new(8 * v33);
    uint64_t v35 = v25;
    unint64_t v36 = v33 >> 2;
    BOOL v37 = &v34[8 * (v33 >> 2)];
    unint64_t v24 = v37;
    int64_t v38 = v22 - v23;
    if (v22 != v23)
    {
      unint64_t v24 = &v37[v38 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v39 = v38 - 8;
      if (v39 >= 0x38 && (uint64_t v40 = 8 * v36, (unint64_t)(&v34[8 * v36] - v23) >= 0x20))
      {
        uint64_t v44 = (v39 >> 3) + 1;
        uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v41 = &v37[v45];
        unint64_t v42 = &v23[v45];
        uint64_t v46 = (long long *)(v23 + 16);
        uint64_t v47 = &v34[v40 + 16];
        uint64_t v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *uint64_t v47 = v49;
          v46 += 2;
          v47 += 2;
          v48 -= 4;
        }
        while (v48);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        unint64_t v42 = v23;
      }
      do
      {
        uint64_t v43 = *(void *)v42;
        v42 += 8;
        *(void *)unint64_t v41 = v43;
        v41 += 8;
      }
      while (v41 != v24);
    }
LABEL_57:
    uint64_t v22 = &v34[8 * v33];
    if (v35) {
      operator delete(v35);
    }
    uint64_t v23 = &v34[8 * (v33 >> 2)];
    uint64_t v25 = v34;
LABEL_40:
    *(void *)unint64_t v24 = v26;
    v24 += 8;
    --v11;
  }
  while (v11);
  uint64_t v50 = *(void *)(a1 + 16);
  if (v10)
  {
    while (1)
    {
      if (v24 == v22)
      {
        if (v23 <= v25)
        {
          if (v22 == v25) {
            unint64_t v61 = 1;
          }
          else {
            unint64_t v61 = (v22 - v25) >> 2;
          }
          if (v61 >> 61) {
            sub_10000BA6C();
          }
          unint64_t v62 = operator new(8 * v61);
          unint64_t v63 = v62;
          unint64_t v64 = v61 >> 2;
          int16x8_t v51 = &v62[8 * (v61 >> 2)];
          unint64_t v24 = v51;
          int64_t v65 = v22 - v23;
          if (v22 != v23)
          {
            unint64_t v24 = &v51[v65 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v66 = v65 - 8;
            if (v66 < 0x38 || (uint64_t v67 = 8 * v64, (unint64_t)(&v62[8 * v64] - v23) < 0x20))
            {
              uint64_t v68 = &v62[8 * (v61 >> 2)];
              unint64_t v69 = v23;
              goto LABEL_90;
            }
            uint64_t v71 = (v66 >> 3) + 1;
            uint64_t v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v68 = &v51[v72];
            unint64_t v69 = &v23[v72];
            uint64_t v73 = (long long *)(v23 + 16);
            int v74 = &v62[v67 + 16];
            uint64_t v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v76 = *v73;
              *(v74 - 1) = *(v73 - 1);
              *int v74 = v76;
              v73 += 2;
              v74 += 2;
              v75 -= 4;
            }
            while (v75);
            if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_90:
                uint64_t v70 = *(void *)v69;
                v69 += 8;
                *(void *)uint64_t v68 = v70;
                v68 += 8;
              }
              while (v68 != v24);
            }
          }
          uint64_t v22 = &v62[8 * v61];
          if (v25) {
            operator delete(v25);
          }
          uint64_t v25 = v63;
          goto LABEL_73;
        }
        uint64_t v55 = v25;
        uint64_t v56 = (v23 - v25) >> 3;
        if (v56 >= -1) {
          uint64_t v57 = v56 + 1;
        }
        else {
          uint64_t v57 = v56 + 2;
        }
        uint64_t v58 = v57 >> 1;
        uint64_t v59 = &v23[-8 * (v57 >> 1)];
        int16x8_t v60 = v22;
        if (v22 != v23)
        {
          memmove(v59, v23, v22 - v23);
          int16x8_t v60 = v23;
        }
        unint64_t v24 = &v59[v22 - v23];
        int16x8_t v51 = &v60[-8 * v58];
        uint64_t v25 = v55;
      }
      else
      {
        int16x8_t v51 = v23;
      }
LABEL_73:
      *(void *)unint64_t v24 = *(void *)(v50 - 8);
      v24 += 8;
      uint64_t v50 = *(void *)(a1 + 16) - 8;
      *(void *)(a1 + 16) = v50;
      uint64_t v23 = v51;
      if (!--v10) {
        goto LABEL_66;
      }
    }
  }
  int16x8_t v51 = v23;
LABEL_66:
  unint64_t v52 = *(uint64_t **)(a1 + 8);
  if (v52 != (uint64_t *)v50)
  {
    while (1)
    {
      if (v24 == v22)
      {
        if (v51 <= v25)
        {
          if (v22 == v25) {
            unint64_t v84 = 1;
          }
          else {
            unint64_t v84 = (v22 - v25) >> 2;
          }
          if (v84 >> 61) {
            sub_10000BA6C();
          }
          uint64_t v85 = operator new(8 * v84);
          uint16x8_t v86 = v85;
          unint64_t v87 = v84 >> 2;
          uint64_t v53 = &v85[8 * (v84 >> 2)];
          unint64_t v24 = v53;
          int64_t v88 = v22 - v51;
          if (v22 != v51)
          {
            unint64_t v24 = &v53[v88 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v89 = v88 - 8;
            if (v89 < 0x38 || (uint64_t v90 = 8 * v87, (unint64_t)(&v85[8 * v87] - v51) < 0x20))
            {
              uint64_t v91 = &v85[8 * (v84 >> 2)];
              int v92 = v51;
              goto LABEL_116;
            }
            uint64_t v94 = (v89 >> 3) + 1;
            uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v91 = &v53[v95];
            int v92 = &v51[v95];
            int v96 = (long long *)(v51 + 16);
            int v97 = &v85[v90 + 16];
            uint64_t v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v99 = *v96;
              *(v97 - 1) = *(v96 - 1);
              *int v97 = v99;
              v96 += 2;
              v97 += 2;
              v98 -= 4;
            }
            while (v98);
            if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_116:
                uint64_t v93 = *(void *)v92;
                v92 += 8;
                *(void *)uint64_t v91 = v93;
                v91 += 8;
              }
              while (v91 != v24);
            }
          }
          uint64_t v22 = &v85[8 * v84];
          if (v25) {
            operator delete(v25);
          }
          uint64_t v25 = v86;
          goto LABEL_99;
        }
        int v78 = v25;
        uint64_t v79 = (v51 - v25) >> 3;
        if (v79 >= -1) {
          uint64_t v80 = v79 + 1;
        }
        else {
          uint64_t v80 = v79 + 2;
        }
        uint64_t v81 = v80 >> 1;
        uint64_t v82 = &v51[-8 * (v80 >> 1)];
        uint64_t v83 = v22;
        if (v22 != v51)
        {
          memmove(v82, v51, v22 - v51);
          uint64_t v83 = v51;
        }
        unint64_t v24 = &v82[v22 - v51];
        uint64_t v53 = &v83[-8 * v81];
        uint64_t v25 = v78;
      }
      else
      {
        uint64_t v53 = v51;
      }
LABEL_99:
      uint64_t v77 = *v52++;
      *(void *)unint64_t v24 = v77;
      v24 += 8;
      int16x8_t v51 = v53;
      if (v52 == *(uint64_t **)(a1 + 16)) {
        goto LABEL_68;
      }
    }
  }
  uint64_t v53 = v51;
LABEL_68:
  uint64_t v54 = *(void **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v53;
  *(void *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v22;
  *(void *)(a1 + 32) += v100;
  if (v54)
  {
    operator delete(v54);
  }
}

void sub_1002F6F00(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F6F4C()
{
}

void sub_1002F6F6C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0x1FF) != 0) {
    unint64_t v6 = (v5 >> 9) + 1;
  }
  else {
    unint64_t v6 = v5 >> 9;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 >> 9) {
    unint64_t v8 = v7 >> 9;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 9)
  {
    *(void *)(a1 + 32) = v7 - (v8 << 9);
    if (!v8) {
      return;
    }
    while (1)
    {
      unint64_t v15 = *(void **)(a1 + 8);
      uint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          unint64_t v27 = (char *)operator new(8 * v24);
          uint64_t v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          uint64_t v3 = v28;
          if (!v29)
          {
            uint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              unint64_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            unint64_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v32 = &v28[v34];
            v16 += v34;
            uint64_t v35 = (long long *)(v15 + 3);
            unint64_t v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)unint64_t v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)unint64_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            uint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        uint64_t v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          uint64_t v3 = *(char **)(a1 + 8);
        }
        BOOL v14 = &v3[-8 * v21];
        uint64_t v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)uint64_t v3 = v17;
      uint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        unsigned int v145 = operator new(0x1000uLL);
        sub_1002BD6DC((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        unsigned int v145 = operator new(0x1000uLL);
        sub_1002BD86C((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 511;
        }
        else {
          uint64_t v116 = 512;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - (v6 << 9);
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= v8 << 9;
      if (!v8) {
        return;
      }
    }
    uint64_t v118 = *(char **)(a1 + 16);
    while (1)
    {
      uint64_t v120 = *(void **)(a1 + 8);
      int v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        int v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          int32x4_t v132 = (char *)operator new(8 * v129);
          int32x4_t v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          uint64_t v118 = v133;
          if (!v29)
          {
            uint64_t v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              uint64x2_t v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            uint64x2_t v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            uint64x2_t v136 = &v133[v138];
            v121 += v138;
            int8x16_t v139 = (long long *)(v120 + 3);
            __int32 v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)__int32 v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)uint64x2_t v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            uint64_t v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        int32x4_t v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          uint64_t v118 = *(char **)(a1 + 8);
        }
        char v119 = &v118[-8 * v126];
        uint64_t v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)uint64_t v118 = v122;
      uint64_t v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      sub_10000BA6C();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = v8 << 9;
  uint64_t v40 = &v13[8 * (v11 - v8)];
  unint64_t v41 = &v13[8 * v12];
  unint64_t v42 = v40;
  uint64_t v43 = v13;
  do
  {
    uint64_t v44 = operator new(0x1000uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      uint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      long long v49 = &v40[-8 * (v47 >> 1)];
      uint64_t v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        uint64_t v50 = v40;
      }
      unint64_t v42 = &v49[v41 - v40];
      uint64_t v40 = &v50[-8 * v48];
      uint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      sub_10000BA6C();
    }
    unint64_t v52 = (char *)operator new(8 * v51);
    uint64_t v53 = v43;
    unint64_t v54 = v51 >> 2;
    uint64_t v55 = &v52[8 * (v51 >> 2)];
    unint64_t v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      unint64_t v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        int16x8_t v60 = &v40[v63];
        unint64_t v64 = (long long *)(v40 + 16);
        int64_t v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)int64_t v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        int16x8_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    unint64_t v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    uint64_t v40 = &v52[8 * (v51 >> 2)];
    uint64_t v43 = v52;
LABEL_49:
    *(void *)unint64_t v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  uint64_t v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            sub_10000BA6C();
          }
          uint64_t v79 = (char *)operator new(8 * v78);
          uint64_t v80 = v79;
          unint64_t v81 = v78 >> 2;
          unint64_t v69 = &v79[8 * (v78 >> 2)];
          unint64_t v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            unint64_t v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              uint64_t v85 = &v79[8 * (v78 >> 2)];
              uint16x8_t v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v85 = &v69[v89];
            uint16x8_t v86 = &v40[v89];
            uint64_t v90 = (long long *)(v40 + 16);
            uint64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)uint64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)uint64_t v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          unint64_t v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          uint64_t v43 = v80;
          goto LABEL_81;
        }
        uint64_t v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        long long v76 = &v40[-8 * (v74 >> 1)];
        uint64_t v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          uint64_t v77 = v40;
        }
        unint64_t v42 = &v76[v41 - v40];
        unint64_t v69 = &v77[-8 * v75];
        uint64_t v43 = v72;
      }
      else
      {
        unint64_t v69 = v40;
      }
LABEL_81:
      *(void *)unint64_t v42 = *v68;
      v42 += 8;
      uint64_t v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      uint64_t v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  unint64_t v69 = v40;
LABEL_75:
  uint64_t v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            sub_10000BA6C();
          }
          uint64_t v101 = (char *)operator new(8 * v100);
          int v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          unint64_t v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          unint64_t v42 = v69;
          if (!v29)
          {
            unint64_t v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            uint64_t v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            uint64_t v105 = &v101[8 * v102];
            uint64_t v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v105 = &v69[v109];
            uint64_t v106 = &v43[v109];
            unsigned int v110 = (long long *)(v43 + 16);
            uint64_t v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)uint64_t v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)uint64_t v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          unint64_t v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          int v97 = v43;
          uint64_t v98 = v96 >> 1;
          unint64_t v69 = &v97[8 * (v96 >> 1)];
          long long v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            long long v99 = v42;
          }
          unint64_t v42 = &v99[8 * v98];
        }
        uint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  uint64_t v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) -= v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_1002F786C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F78B8()
{
}

const void **sub_1002F78D8(const void **result, unsigned char *__src, const void **a3, unsigned char *a4, uint64_t a5)
{
  unint64_t v7 = __src;
  unint64_t v9 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (result != a3)
  {
    uint64_t v11 = result;
    unint64_t v12 = (char *)*result + 4096;
    if (v12 != __src)
    {
      BOOL v14 = (char *)*v9++;
      uint64_t v13 = v14;
      while (1)
      {
        uint64_t v15 = (v13 - v8 + 4096) >> 3;
        if ((v12 - v7) >> 3 >= v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = (v12 - v7) >> 3;
        }
        if (v16) {
          unint64_t result = (const void **)memmove(v8, v7, 8 * v16);
        }
        v7 += 8 * v16;
        if (v7 == v12) {
          break;
        }
        uint64_t v17 = (char *)*v9++;
        uint64_t v13 = v17;
        unint64_t v8 = v17;
      }
      v8 += 8 * v16;
      if ((char *)*(v9 - 1) + 4096 == v8)
      {
        unint64_t v8 = (char *)*v9;
        *(void *)a5 = v9;
        *(void *)(a5 + 8) = v8;
        uint64_t i = v11 + 1;
        if (v11 + 1 != a3) {
          goto LABEL_16;
        }
LABEL_39:
        uint64_t v33 = *a3;
        if (v33 == a4) {
          goto LABEL_50;
        }
        uint64_t v35 = (char *)*v9++;
        uint64_t v34 = v35;
        while (1)
        {
          uint64_t v36 = (v34 - v8 + 4096) >> 3;
          uint64_t v37 = (a4 - v33) >> 3 >= v36 ? v36 : (a4 - v33) >> 3;
          if (v37) {
            unint64_t result = (const void **)memmove(v8, v33, 8 * v37);
          }
          v33 += 8 * v37;
          if (v33 == a4) {
            break;
          }
          long long v38 = (char *)*v9++;
          uint64_t v34 = v38;
          unint64_t v8 = v38;
        }
        v8 += 8 * v37;
        unint64_t v32 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
        {
LABEL_49:
          unint64_t v9 = v32;
          goto LABEL_50;
        }
        goto LABEL_37;
      }
      --v9;
    }
    *(void *)a5 = v9;
    *(void *)(a5 + 8) = v8;
    for (uint64_t i = v11 + 1; i != a3; ++i)
    {
LABEL_16:
      while (1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (char *)*i;
        uint64_t v22 = (char *)*v9++;
        uint64_t v21 = v22;
        while (1)
        {
          uint64_t v23 = (v21 - v8 + 4096) >> 3;
          if ((4096 - 8 * v19) >> 3 >= v23) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = (4096 - 8 * v19) >> 3;
          }
          if (v24) {
            unint64_t result = (const void **)memmove(v8, &v20[8 * v19], 8 * v24);
          }
          v19 += v24;
          if (v19 == 512) {
            break;
          }
          unint64_t v25 = (char *)*v9++;
          uint64_t v21 = v25;
          unint64_t v8 = v25;
        }
        v8 += 8 * v24;
        uint64_t v26 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8) {
          break;
        }
        unint64_t v8 = (char *)*v9;
        *(void *)a5 = v9;
        *(void *)(a5 + 8) = v8;
        if (++i == a3) {
          goto LABEL_39;
        }
      }
      --v9;
      *(void *)a5 = v26;
      *(void *)(a5 + 8) = v8;
    }
    goto LABEL_39;
  }
  if (__src != a4)
  {
    uint64_t v28 = (char *)*v9++;
    unint64_t v27 = v28;
    while (1)
    {
      uint64_t v29 = (v27 - v8 + 4096) >> 3;
      if ((a4 - v7) >> 3 >= v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = (a4 - v7) >> 3;
      }
      if (v30) {
        unint64_t result = (const void **)memmove(v8, v7, 8 * v30);
      }
      v7 += 8 * v30;
      if (v7 == a4) {
        break;
      }
      unint64_t v31 = (char *)*v9++;
      unint64_t v27 = v31;
      unint64_t v8 = v31;
    }
    v8 += 8 * v30;
    unint64_t v32 = v9 - 1;
    if ((char *)*(v9 - 1) + 4096 != v8) {
      goto LABEL_49;
    }
LABEL_37:
    unint64_t v8 = (char *)*v9;
  }
LABEL_50:
  *(void *)a5 = v9;
  *(void *)(a5 + 8) = v8;
  return result;
}

void *sub_1002F7B5C@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  unint64_t v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4) {
      goto LABEL_42;
    }
    uint64_t v32 = (uint64_t)*a5;
    uint64_t v33 = a4;
    while (1)
    {
      uint64_t v34 = (uint64_t)&a6[-v32] >> 3;
      if ((v33 - a2) >> 3 < v34) {
        uint64_t v34 = (v33 - a2) >> 3;
      }
      v33 -= 8 * v34;
      a6 -= 8 * v34;
      if (v34) {
        unint64_t result = memmove(a6, v33, 8 * v34);
      }
      if (v33 == a2) {
        break;
      }
      uint64_t v35 = (uint64_t)*--v8;
      uint64_t v32 = v35;
      a6 = (char *)(v35 + 4096);
    }
    goto LABEL_40;
  }
  BOOL v14 = *a3;
  if (*a3 != a4)
  {
    uint64_t v15 = (uint64_t)*a5;
    uint64_t v16 = a4;
    while (1)
    {
      uint64_t v17 = (uint64_t)&a6[-v15] >> 3;
      if ((v16 - v14) >> 3 < v17) {
        uint64_t v17 = (v16 - v14) >> 3;
      }
      v16 -= 8 * v17;
      a6 -= 8 * v17;
      if (v17) {
        unint64_t result = memmove(a6, v16, 8 * v17);
      }
      if (v16 == v14) {
        break;
      }
      uint64_t v19 = (uint64_t)*--v8;
      uint64_t v15 = v19;
      a6 = (char *)(v19 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v20 = (char *)v8[1];
      ++v8;
      a6 = v20;
    }
  }
  uint64_t v21 = a3 - 1;
  if (a3 - 1 != a1)
  {
    uint64_t v22 = (char *)*v8;
    do
    {
      while (1)
      {
        uint64_t v23 = *v21;
        uint64_t v24 = (char *)*v21 + 4096;
        while (1)
        {
          uint64_t v25 = (a6 - v22) >> 3;
          if ((v24 - v23) >> 3 < v25) {
            uint64_t v25 = (v24 - v23) >> 3;
          }
          v24 -= 8 * v25;
          a6 -= 8 * v25;
          if (v25) {
            unint64_t result = memmove(a6, v24, 8 * v25);
          }
          if (v24 == v23) {
            break;
          }
          uint64_t v26 = (char *)*--v8;
          uint64_t v22 = v26;
          a6 = v26 + 4096;
        }
        uint64_t v22 = (char *)*v8;
        if ((char *)*v8 + 4096 == a6) {
          break;
        }
        if (--v21 == a1) {
          goto LABEL_24;
        }
      }
      unint64_t v27 = (char *)v8[1];
      ++v8;
      uint64_t v22 = v27;
      a6 = v27;
      --v21;
    }
    while (v21 != a1);
  }
LABEL_24:
  uint64_t v28 = (char *)*a1 + 4096;
  if (v28 != a2)
  {
    uint64_t v29 = (uint64_t)*v8;
    while (1)
    {
      uint64_t v30 = (uint64_t)&a6[-v29] >> 3;
      if ((v28 - a2) >> 3 < v30) {
        uint64_t v30 = (v28 - a2) >> 3;
      }
      v28 -= 8 * v30;
      a6 -= 8 * v30;
      if (v30) {
        unint64_t result = memmove(a6, v28, 8 * v30);
      }
      if (v28 == a2) {
        break;
      }
      uint64_t v31 = (uint64_t)*--v8;
      uint64_t v29 = v31;
      a6 = (char *)(v31 + 4096);
    }
LABEL_40:
    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v36 = (char *)v8[1];
      ++v8;
      a6 = v36;
    }
  }
LABEL_42:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

void sub_1002F7D90(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_1002F7DC8(uint64_t result, int *a2, double a3, int8x16_t a4)
{
  uint64_t v4 = *a2;
  if ((int)v4 < a2[1])
  {
    uint64_t v5 = *(void *)(result + 16);
    uint64_t v6 = v4 + 1;
    v7.i64[0] = 0x202020202020202;
    v7.i64[1] = 0x202020202020202;
    do
    {
      uint64_t v8 = *(void *)(v5 + 16) + **(void **)(v5 + 72) * v4;
      uint64_t v9 = *(void *)(result + 8);
      ++v4;
      uint64_t v10 = *(void *)(v9 + 16);
      uint64_t v11 = **(void **)(v9 + 72);
      LODWORD(v12) = *(unsigned __int8 *)(result + 24);
      if (*(unsigned char *)(result + 24)) {
        uint64_t v13 = 16;
      }
      else {
        uint64_t v13 = 1;
      }
      if (*(unsigned char *)(result + 24))
      {
        LODWORD(v14) = *(_DWORD *)(v5 + 12);
        if ((int)v14 >= 16)
        {
          uint64_t v12 = 0;
          do
          {
            a4 = vceqq_s8(*(int8x16_t *)(v10 + v13 + v11 * v6 + v12), v7);
            *(int8x16_t *)(v8 + v12) = a4;
            v12 += 16;
            uint64_t v5 = *(void *)(result + 16);
            uint64_t v14 = *(int *)(v5 + 12);
          }
          while (v12 <= v14 - 16);
        }
        else
        {
          LODWORD(v12) = 0;
        }
        if ((int)v12 <= (int)v14 - 8)
        {
          a4.i64[0] = *(void *)(v10 + v11 * v4 + v13 + v12);
          a4 = vceqq_s8(a4, v7);
          *(void *)(v8 + v12) = a4.i64[0];
          LODWORD(v12) = v12 | 8;
          uint64_t v5 = *(void *)(result + 16);
        }
      }
      if ((int)v12 < *(_DWORD *)(v5 + 12))
      {
        uint64_t v12 = (int)v12;
        uint64_t v15 = v10 + v13 + v11 * v6;
        do
        {
          *(unsigned char *)(v8 + v12) = -(*(unsigned __int8 *)(v15 + v12) >> 1);
          ++v12;
          uint64_t v5 = *(void *)(result + 16);
        }
        while (v12 < *(int *)(v5 + 12));
      }
      ++v6;
    }
    while (v4 < a2[1]);
  }
  return result;
}

uint64_t sub_1002F7EE0(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int8x16_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002F7FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, char a10)
{
  sub_1002D6AE8(v19, &off_100497E58);
  if (a10) {
    int v18 = 2;
  }
  else {
    int v18 = 0;
  }
  if (a7 == 2)
  {
    int v30 = a8;
    int v31 = a9;
    int v32 = v18;
    int v28 = 0;
    int v29 = a6;
    uint64_t v21 = &off_1004981E8;
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    int v26 = a5;
    unint64_t v27 = &v30;
    sub_1002ABC90(&v28, (uint64_t)&v21, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    int v30 = a8;
    int v31 = a9;
    int v32 = v18;
    if (a7)
    {
      int v28 = 0;
      int v29 = a6;
      uint64_t v21 = &off_100498248;
      uint64_t v22 = a1;
      uint64_t v23 = a2;
      uint64_t v24 = a3;
      uint64_t v25 = a4;
      int v26 = a5;
      unint64_t v27 = &v30;
      sub_1002ABC90(&v28, (uint64_t)&v21, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      uint64_t v33 = -1;
      uint64_t v34 = -1;
      uint64_t v35 = -1;
      int v28 = 0;
      int v29 = a6;
      uint64_t v21 = &off_100498188;
      uint64_t v22 = a1;
      uint64_t v23 = a2;
      uint64_t v24 = a3;
      uint64_t v25 = a4;
      int v26 = a5;
      unint64_t v27 = &v30;
      sub_1002ABC90(&v28, (uint64_t)&v21, (double)(a6 * a5) * 0.0000152587891);
    }
  }
  nullsub_1(&v21);
  if (v20) {
    sub_1002D6888(v19);
  }
}

void sub_1002F81AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1002F81D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F81EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  sub_1002D6AE8(v25, &off_100497E78);
  if (a8) {
    int v17 = 2;
  }
  else {
    int v17 = 0;
  }
  v19[0] = a7;
  v19[1] = v17;
  uint64_t v19[2] = a9;
  unint64_t v20 = 0xFCFCFCFCFCFCFCFCLL;
  unint64_t v21 = 0xF8F8F8F8F8F8F8F8;
  *(void *)&long long v18 = 0x8000800080008000;
  *((void *)&v18 + 1) = 0x8000800080008000;
  long long v22 = v18;
  long long v23 = 0u;
  *(void *)&long long v18 = -1;
  *((void *)&v18 + 1) = -1;
  long long v24 = v18;
  v30[0] = 0;
  v30[1] = a6;
  v27[0] = &off_1004982A8;
  v27[1] = a1;
  _OWORD v27[2] = a2;
  v27[3] = a3;
  v27[4] = a4;
  int v28 = a5;
  int v29 = v19;
  sub_1002ABC90(v30, (uint64_t)v27, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v27);
  if (v26) {
    sub_1002D6888(v25);
  }
}

void sub_1002F830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  nullsub_1(va1);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002F8328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  sub_1002D6AE8(v26, &off_100497E98);
  if (a8) {
    int v17 = 2;
  }
  else {
    int v17 = 0;
  }
  v20[0] = a7;
  v20[1] = v17;
  uint64_t v20[2] = a9;
  *(void *)&long long v18 = 0x3000300030003;
  *((void *)&v18 + 1) = 0x3000300030003;
  *(void *)&long long v19 = 0x7000700070007;
  *((void *)&v19 + 1) = 0x7000700070007;
  long long v21 = v18;
  long long v22 = v19;
  *(void *)&long long v18 = -1;
  *((void *)&v18 + 1) = -1;
  long long v24 = v18;
  long long v25 = 0u;
  *(void *)&long long v19 = 0x8000800080008000;
  *((void *)&v19 + 1) = 0x8000800080008000;
  long long v23 = v19;
  v31[0] = 0;
  v31[1] = a6;
  v28[0] = &off_100498308;
  v28[1] = a1;
  uint64_t v28[2] = a2;
  v28[3] = a3;
  _OWORD v28[4] = a4;
  int v29 = a5;
  int v30 = v20;
  sub_1002ABC90(v31, (uint64_t)v28, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v28);
  if (v27) {
    sub_1002D6888(v26);
  }
}

void sub_1002F8448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  nullsub_1(va1);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002F8464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  sub_1002D6AE8(v41, &off_100497EB8);
  if (a7 == 2)
  {
    int v37 = a8;
    *(void *)long long v38 = 0x259100001323;
    unsigned int v34 = 1868;
    *(_DWORD *)&unsigned char v38[8] = 1868;
    unsigned int v35 = 4899;
    if ((a9 & 1) == 0)
    {
      *(_DWORD *)long long v38 = 1868;
      *(_DWORD *)&unsigned char v38[8] = 4899;
      unsigned int v35 = 1868;
      unsigned int v34 = 4899;
    }
    *(int16x4_t *)&v38[12] = vdup_n_s16(v35);
    *(int16x4_t *)&v38[20] = vdup_n_s16(0x2591u);
    *(int16x4_t *)v39.i8 = vdup_n_s16(v34);
    v36.i64[0] = 0x200000002000;
    v36.i64[1] = 0x200000002000;
    int32x4_t v40 = v36;
    int v50 = 0;
    int v51 = a6;
    uint64_t v43 = &off_1004983C8;
    uint64_t v44 = a1;
    uint64_t v45 = a2;
    uint64_t v46 = a3;
    uint64_t v47 = a4;
    int v48 = a5;
    long long v49 = &v37;
    sub_1002ABC90(&v50, (uint64_t)&v43, (double)(a6 * a5) * 0.0000152587891);
  }
  else if (a7)
  {
    int v37 = a8;
    *(_DWORD *)&unsigned char v38[8] = 1038710997;
    *(void *)long long v38 = 0x3F1645A23E991687;
    if (a9)
    {
      v18.i32[0] = 1050220167;
      v17.i32[0] = 1038710997;
    }
    else
    {
      *(_DWORD *)long long v38 = 1038710997;
      *(_DWORD *)&unsigned char v38[8] = 1050220167;
      v18.i32[0] = 1038710997;
      v17.i32[0] = 1050220167;
    }
    *(int32x4_t *)&v38[12] = vdupq_lane_s32(v18, 0);
    int32x4_t v39 = vdupq_lane_s32(*(int32x2_t *)&v38[4], 0);
    int32x4_t v40 = vdupq_lane_s32(v17, 0);
    int v50 = 0;
    int v51 = a6;
    uint64_t v43 = &off_100498428;
    uint64_t v44 = a1;
    uint64_t v45 = a2;
    uint64_t v46 = a3;
    uint64_t v47 = a4;
    int v48 = a5;
    long long v49 = &v37;
    sub_1002ABC90(&v50, (uint64_t)&v43, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    if (a9) {
      unsigned int v19 = 2;
    }
    else {
      unsigned int v19 = 0;
    }
    unsigned int v20 = dword_100407818[v19];
    unsigned int v21 = dword_100407818[v19 ^ 2];
    int v37 = a8;
    v22.i64[0] = 0x200000002000;
    v22.i64[1] = 0x200000002000;
    int32x4_t v23 = vmlaq_s32(v22, vdupq_n_s32(v20), (int32x4_t)xmmword_100404900);
    int32x4_t v24 = vdupq_n_s32(4 * v20);
    int32x4_t v25 = vmulq_s32(vdupq_n_s32(v21), (int32x4_t)xmmword_100404900);
    int32x4_t v26 = vdupq_n_s32(4 * v21);
    int32x4_t v27 = (int32x4_t)xmmword_100407700;
    uint64_t v28 = 1028;
    int32x4_t v29 = vdupq_n_s32(0x9644u);
    int32x4_t v30 = vdupq_n_s32(0x12C88u);
    do
    {
      int32x4_t v31 = vaddq_s32(v23, v24);
      int32x4_t v32 = vaddq_s32(v25, v26);
      uint64_t v33 = (int32x4_t *)&v38[v28 - 4];
      *(int32x4_t *)&v38[v28 - 1028] = v25;
      *(int32x4_t *)&v38[v28 - 1012] = v32;
      int32x4_t *v33 = v27;
      v33[1] = vaddq_s32(v27, v29);
      v33[64] = v23;
      v33[65] = v31;
      int32x4_t v23 = vaddq_s32(v31, v24);
      int32x4_t v27 = vaddq_s32(v27, v30);
      int32x4_t v25 = vaddq_s32(v32, v26);
      v28 += 32;
    }
    while (v28 != 2052);
    int v50 = 0;
    int v51 = a6;
    uint64_t v43 = &off_100498368;
    uint64_t v44 = a1;
    uint64_t v45 = a2;
    uint64_t v46 = a3;
    uint64_t v47 = a4;
    int v48 = a5;
    long long v49 = &v37;
    sub_1002ABC90(&v50, (uint64_t)&v43, (double)(a6 * a5) * 0.0000152587891);
  }
  nullsub_1(&v43);
  if (v42) {
    sub_1002D6888(v41);
  }
}

void sub_1002F8778(_Unwind_Exception *a1)
{
  nullsub_1(v1 - 144);
  sub_10020FA00(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1002F87A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  sub_1002D6AE8(v17, &off_100497ED8);
  if (a7 == 2)
  {
    int v16 = a8;
    int v26 = 0;
    int v27 = a6;
    unsigned int v19 = &off_1004984E8;
    uint64_t v20 = a1;
    uint64_t v21 = a2;
    uint64_t v22 = a3;
    uint64_t v23 = a4;
    int v24 = a5;
    int32x4_t v25 = &v16;
    sub_1002ABC90(&v26, (uint64_t)&v19, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    int v16 = a8;
    int v26 = 0;
    int v27 = a6;
    if (a7)
    {
      unsigned int v19 = &off_100498548;
      uint64_t v20 = a1;
      uint64_t v21 = a2;
      uint64_t v22 = a3;
      uint64_t v23 = a4;
      int v24 = a5;
      int32x4_t v25 = &v16;
      sub_1002ABC90(&v26, (uint64_t)&v19, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      unsigned int v19 = &off_100498488;
      uint64_t v20 = a1;
      uint64_t v21 = a2;
      uint64_t v22 = a3;
      uint64_t v23 = a4;
      int v24 = a5;
      int32x4_t v25 = &v16;
      sub_1002ABC90(&v26, (uint64_t)&v19, (double)(a6 * a5) * 0.0000152587891);
    }
  }
  nullsub_1(&v19);
  if (v18) {
    sub_1002D6888(v17);
  }
}

void sub_1002F894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  nullsub_1(va1);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002F8974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  sub_1002D6AE8(v23, &off_100497EF8);
  int v16 = a7;
  int16x4_t v17 = vdup_n_s16(0x74Cu);
  int16x4_t v18 = vdup_n_s16(0x2591u);
  int16x4_t v19 = vdup_n_s16(0x1323u);
  *(void *)&long long v14 = 0x200000002000;
  *((void *)&v14 + 1) = 0x200000002000;
  *(void *)&long long v15 = 0xF800F800F800F8;
  *((void *)&v15 + 1) = 0xF800F800F800F8;
  long long v20 = v14;
  long long v21 = v15;
  *(void *)&long long v14 = 0xFC00FC00FC00FCLL;
  *((void *)&v14 + 1) = 0xFC00FC00FC00FCLL;
  long long v22 = v14;
  v28[0] = 0;
  v28[1] = a6;
  v25[0] = &off_1004985A8;
  v25[1] = a1;
  uint64_t v25[2] = a2;
  v25[3] = a3;
  v25[4] = a4;
  int v26 = a5;
  int v27 = &v16;
  sub_1002ABC90(v28, (uint64_t)v25, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v25);
  if (v24) {
    sub_1002D6888(v23);
  }
}

void sub_1002F8A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  nullsub_1(va1);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002F8AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  sub_1002D6AE8(v17, &off_100497F18);
  int v14 = a7;
  unint64_t v15 = 0xF8F8F8F8F8F8F8F8;
  unint64_t v16 = 0xFCFCFCFCFCFCFCFCLL;
  v22[0] = 0;
  v22[1] = a6;
  v19[0] = &off_100498608;
  v19[1] = a1;
  uint64_t v19[2] = a2;
  uint64_t v19[3] = a3;
  _DWORD v19[4] = a4;
  int v20 = a5;
  long long v21 = &v14;
  sub_1002ABC90(v22, (uint64_t)v19, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v19);
  if (v18) {
    sub_1002D6888(v17);
  }
}

void sub_1002F8B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  nullsub_1(va1);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002F8BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  sub_1002D6AE8(v52, &off_100497F38);
  if (a9) {
    int v19 = 2;
  }
  else {
    int v19 = 0;
  }
  if (a7 == 2)
  {
    int v43 = a8;
    int v44 = v19;
    v45[20] = a10;
    uint64_t v23 = &unk_10040786C;
    if (a10) {
      uint64_t v23 = &unk_100407858;
    }
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v23;
    *(_DWORD *)&v45[16] = v23[4];
    if (a9)
    {
      unsigned int v24 = *(_DWORD *)v45;
      unsigned int v25 = *(_DWORD *)&v45[8];
    }
    else
    {
      unsigned int v25 = *(_DWORD *)v45;
      unsigned int v24 = *(_DWORD *)&v45[8];
      *(_DWORD *)uint64_t v45 = *(_DWORD *)&v45[8];
      *(_DWORD *)&v45[8] = v25;
    }
    unsigned int v35 = (const float *)((unint64_t)&v43 | 0xC);
    float32x4_t v36 = vld1q_dup_f32(v35);
    *(int32x4_t *)&v45[24] = vdupq_n_s32(v24);
    int32x4_t v46 = (int32x4_t)v36;
    int32x4_t v37 = vdupq_n_s32(v25);
    long long v38 = (const float *)&v45[12];
    float32x4_t v39 = vld1q_dup_f32(v38);
    int32x4_t v40 = (const float *)&v45[16];
    float32x4_t v41 = vld1q_dup_f32(v40);
    int32x4_t v47 = v37;
    int32x4_t v48 = (int32x4_t)v39;
    v37.i64[0] = 0x2000000020000000;
    v37.i64[1] = 0x2000000020000000;
    int32x4_t v49 = (int32x4_t)v41;
    int32x4_t v50 = v37;
    v37.i64[0] = 0x200000002000;
    v37.i64[1] = 0x200000002000;
    int32x4_t v51 = v37;
    int v61 = 0;
    int v62 = a6;
    unint64_t v54 = &off_1004986C8;
    uint64_t v55 = a1;
    uint64_t v56 = a2;
    uint64_t v57 = a3;
    uint64_t v58 = a4;
    int v59 = a5;
    int16x8_t v60 = &v43;
    sub_1002ABC90(&v61, (uint64_t)&v54, (double)(a6 * a5) * 0.0000152587891);
  }
  else if (a7)
  {
    int v43 = a8;
    int v44 = v19;
    v45[0] = a10;
    int v26 = &unk_100407894;
    if (a10) {
      int v26 = &unk_100407880;
    }
    long long v27 = *(_OWORD *)v26;
    *(_OWORD *)&v45[4] = *(_OWORD *)v26;
    *(_DWORD *)&v45[20] = v26[4];
    int v28 = *(_DWORD *)&v45[4];
    v18.i32[0] = *(_DWORD *)&v45[12];
    if (a9)
    {
      LODWORD(v27) = *(_DWORD *)&v45[12];
      v18.i32[0] = *(_DWORD *)&v45[4];
    }
    else
    {
      *(_DWORD *)&v45[4] = *(_DWORD *)&v45[12];
      *(_DWORD *)&v45[12] = v28;
      LODWORD(v27) = v28;
    }
    *(int32x4_t *)&v45[24] = vdupq_lane_s32(v18, 0);
    int32x4_t v46 = vdupq_lane_s32(*(int32x2_t *)&v45[8], 0);
    int32x4_t v47 = vdupq_lane_s32(*(int32x2_t *)&v27, 0);
    int32x4_t v48 = vdupq_lane_s32(*(int32x2_t *)&v45[16], 0);
    v42.i64[0] = 0x3F0000003F000000;
    v42.i64[1] = 0x3F0000003F000000;
    int32x4_t v49 = vdupq_lane_s32(*(int32x2_t *)&v45[20], 0);
    int32x4_t v50 = v42;
    int v61 = 0;
    int v62 = a6;
    unint64_t v54 = &off_100498728;
    uint64_t v55 = a1;
    uint64_t v56 = a2;
    uint64_t v57 = a3;
    uint64_t v58 = a4;
    int v59 = a5;
    int16x8_t v60 = &v43;
    sub_1002ABC90(&v61, (uint64_t)&v54, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    int v43 = a8;
    int v44 = v19;
    v45[20] = a10;
    int v20 = &unk_100407844;
    if (a10) {
      int v20 = &unk_100407830;
    }
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v20;
    *(_DWORD *)&v45[16] = v20[4];
    if (a9)
    {
      unsigned int v21 = *(_DWORD *)v45;
      unsigned int v22 = *(_DWORD *)&v45[8];
    }
    else
    {
      unsigned int v22 = *(_DWORD *)v45;
      unsigned int v21 = *(_DWORD *)&v45[8];
      *(_DWORD *)uint64_t v45 = *(_DWORD *)&v45[8];
      *(_DWORD *)&v45[8] = v22;
    }
    int32x4_t v29 = (const __int16 *)((unint64_t)&v43 | 0xC);
    int16x4_t v30 = vld1_dup_s16(v29);
    *(int16x4_t *)&v45[24] = vdup_n_s16(v21);
    *(int16x4_t *)&v45[32] = v30;
    *(int16x4_t *)v46.i8 = vdup_n_s16(v22);
    int32x4_t v31 = (const float *)&v45[12];
    float32x4_t v32 = vld1q_dup_f32(v31);
    uint64_t v33 = (const float *)&v45[16];
    float32x4_t v34 = vld1q_dup_f32(v33);
    int32x4_t v47 = (int32x4_t)v32;
    int32x4_t v48 = (int32x4_t)v34;
    v32.i64[0] = 0x20000000200000;
    v32.i64[1] = 0x20000000200000;
    v34.i64[0] = 0x200000002000;
    v34.i64[1] = 0x200000002000;
    int32x4_t v49 = (int32x4_t)v32;
    int32x4_t v50 = (int32x4_t)v34;
    int v61 = 0;
    int v62 = a6;
    unint64_t v54 = &off_100498668;
    uint64_t v55 = a1;
    uint64_t v56 = a2;
    uint64_t v57 = a3;
    uint64_t v58 = a4;
    int v59 = a5;
    int16x8_t v60 = &v43;
    sub_1002ABC90(&v61, (uint64_t)&v54, (double)(a6 * a5) * 0.0000152587891);
  }
  nullsub_1(&v54);
  if (v53) {
    sub_1002D6888(v52);
  }
}

void sub_1002F8EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  nullsub_1(v28 - 152);
  sub_10020FA00((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1002F8F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  sub_1002D6AE8(v44, &off_100497F58);
  if (a9) {
    int v18 = 2;
  }
  else {
    int v18 = 0;
  }
  if (a7 == 2)
  {
    int v55 = a8;
    int v56 = v18;
    char v57 = a10;
    if (a10) {
      int32x4_t v29 = &unk_1004078C8;
    }
    else {
      int32x4_t v29 = &unk_1004078D8;
    }
    *(_OWORD *)uint64_t v58 = *v29;
    uint64_t v28 = (const float *)((unint64_t)&v55 | 0xC);
    float32x4_t v30 = vld1q_dup_f32(v28);
    int32x4_t v31 = (const float *)&v58[4];
    float32x4_t v32 = vld1q_dup_f32(v31);
    int32x4_t v59 = (int32x4_t)v30;
    int32x4_t v60 = (int32x4_t)v32;
    uint64_t v33 = (const float *)&v58[8];
    float32x4_t v34 = vld1q_dup_f32(v33);
    unsigned int v35 = (const float *)&v58[12];
    float32x4_t v36 = vld1q_dup_f32(v35);
    int32x4_t v61 = (int32x4_t)v34;
    int32x4_t v62 = (int32x4_t)v36;
    v34.i64[0] = 0x800000008000;
    v34.i64[1] = 0x800000008000;
    v36.i64[0] = 0x200000002000;
    v36.i64[1] = 0x200000002000;
    float32x4_t v63 = v36;
    float32x4_t v64 = v34;
    uint64_t v65 = -1;
    uint64_t v66 = -1;
    uint64_t v67 = -1;
    int v53 = 0;
    int v54 = a6;
    int32x4_t v46 = &off_1004987E8;
    uint64_t v47 = a1;
    uint64_t v48 = a2;
    uint64_t v49 = a3;
    uint64_t v50 = a4;
    int v51 = a5;
    unint64_t v52 = &v55;
    sub_1002ABC90(&v53, (uint64_t)&v46, (double)(a6 * a5) * 0.0000152587891);
  }
  else if (a7)
  {
    int v55 = a8;
    int v56 = v18;
    char v57 = a10;
    if (a10) {
      int32x4_t v37 = &unk_1004078E8;
    }
    else {
      int32x4_t v37 = &unk_1004078F8;
    }
    *(_OWORD *)uint64_t v58 = *v37;
    int32x4_t v59 = vdupq_lane_s32(*(int32x2_t *)v58, 0);
    int32x4_t v60 = vdupq_lane_s32(*(int32x2_t *)&v58[4], 0);
    int32x4_t v61 = vdupq_lane_s32(*(int32x2_t *)&v58[8], 0);
    int32x4_t v62 = vdupq_lane_s32(*(int32x2_t *)&v58[12], 0);
    v38.i64[0] = 0x3F0000003F000000;
    v38.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v63 = _Q1;
    float32x4_t v64 = v38;
    int v53 = 0;
    int v54 = a6;
    int32x4_t v46 = &off_100498848;
    uint64_t v47 = a1;
    uint64_t v48 = a2;
    uint64_t v49 = a3;
    uint64_t v50 = a4;
    int v51 = a5;
    unint64_t v52 = &v55;
    sub_1002ABC90(&v53, (uint64_t)&v46, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    int v55 = a8;
    int v56 = v18;
    char v57 = a10;
    if (a10) {
      int v20 = &unk_1004078A8;
    }
    else {
      int v20 = &unk_1004078B8;
    }
    *(_OWORD *)uint64_t v58 = *v20;
    int v19 = (const float *)((unint64_t)&v55 | 0xC);
    float32x4_t v21 = vld1q_dup_f32(v19);
    unsigned int v22 = (const float *)&v58[4];
    float32x4_t v23 = vld1q_dup_f32(v22);
    unsigned int v24 = (const float *)&v58[8];
    int32x4_t v59 = (int32x4_t)v21;
    int32x4_t v60 = (int32x4_t)v23;
    float32x4_t v25 = vld1q_dup_f32(v24);
    int v26 = (const float *)&v58[12];
    float32x4_t v27 = vld1q_dup_f32(v26);
    int32x4_t v61 = (int32x4_t)v25;
    int32x4_t v62 = (int32x4_t)v27;
    v27.i64[0] = 0x200000002000;
    v27.i64[1] = 0x200000002000;
    float32x4_t v63 = v27;
    v64.i64[0] = 0x80008000800080;
    v64.i64[1] = -1;
    int v53 = 0;
    int v54 = a6;
    int32x4_t v46 = &off_100498788;
    uint64_t v47 = a1;
    uint64_t v48 = a2;
    uint64_t v49 = a3;
    uint64_t v50 = a4;
    int v51 = a5;
    unint64_t v52 = &v55;
    sub_1002ABC90(&v53, (uint64_t)&v46, (double)(a6 * a5) * 0.0000152587891);
  }
  nullsub_1(&v46);
  if (v45) {
    sub_1002D6888(v44);
  }
}

void sub_1002F9234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1002F9258(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F9274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  sub_1002D6AE8(v53, &off_100497F78);
  if (a7 == 2)
  {
    int v40 = a8;
    *(_OWORD *)float32x4_t v41 = xmmword_100407710;
    *(_OWORD *)&v41[16] = xmmword_100407720;
    unsigned int v28 = 3892;
    int v42 = 3892;
    unsigned int v29 = 739;
    unsigned int v30 = 79;
    if (a9)
    {
      unsigned int v31 = 1689;
      unsigned int v32 = 871;
      unsigned int v33 = 296;
    }
    else
    {
      *(_DWORD *)float32x4_t v41 = 739;
      *(void *)&unsigned char v41[8] = 0x12800000699;
      unsigned int v31 = 739;
      unsigned int v29 = 1689;
      *(void *)&v41[20] = 0xF3400000367;
      int v42 = 79;
      unsigned int v32 = 296;
      unsigned int v33 = 871;
      unsigned int v30 = 3892;
      unsigned int v28 = 79;
    }
    int16x4_t v43 = vdup_n_s16(v31);
    *(int16x4_t *)v44.i8 = vdup_n_s16(0x5B9u);
    v44.u64[1] = (unint64_t)vdup_n_s16(v29);
    *(int16x4_t *)v45.i8 = vdup_n_s16(v32);
    v45.u64[1] = (unint64_t)vdup_n_s16(0xB71u);
    *(int16x4_t *)v46.i8 = vdup_n_s16(v33);
    v46.u64[1] = (unint64_t)vdup_n_s16(v30);
    *(int16x4_t *)v47.i8 = vdup_n_s16(0x1E8u);
    v47.u64[1] = (unint64_t)vdup_n_s16(v28);
    v39.i64[0] = 0x80000000800;
    v39.i64[1] = 0x80000000800;
    int32x4_t v48 = v39;
    int v62 = 0;
    int v63 = a6;
    int v55 = &off_100498908;
    uint64_t v56 = a1;
    uint64_t v57 = a2;
    uint64_t v58 = a3;
    uint64_t v59 = a4;
    int v60 = a5;
    int32x4_t v61 = &v40;
    sub_1002ABC90(&v62, (uint64_t)&v55, (double)(a6 * a5) * 0.0000152587891);
  }
  else if (a7)
  {
    int v40 = a8;
    int32x2_t v34 = (int32x2_t)vcvt_f32_f64((float64x2_t)xmmword_1004F7400);
    *(int32x2_t *)float32x4_t v41 = v34;
    *(float *)v18.i32 = *(double *)&qword_1004F7410;
    *(_DWORD *)&unsigned char v41[8] = v18.i32[0];
    int32x2_t v35 = (int32x2_t)vcvt_f32_f64(unk_1004F7418);
    *(int32x2_t *)&v41[12] = v35;
    *(float *)v17.i32 = *(double *)&qword_1004F7428;
    *(_DWORD *)&v41[20] = v17.i32[0];
    int32x2_t v36 = (int32x2_t)vcvt_f32_f64((float64x2_t)xmmword_1004F7430);
    *(int32x2_t *)&v41[24] = v36;
    v37.i32[1] = HIDWORD(qword_1004F7440);
    *(float *)v37.i32 = *(double *)&qword_1004F7440;
    int v42 = v37.i32[0];
    if (a9)
    {
      *(float *)v19.i32 = *(double *)&qword_1004F7440;
      v37.i32[0] = v36.i32[0];
      *(float *)v20.i32 = *(double *)&qword_1004F7428;
      v17.i32[0] = v35.i32[0];
      *(float *)v21.i32 = *(double *)&qword_1004F7410;
      v18.i32[0] = v34.i32[0];
    }
    else
    {
      *(float *)float32x4_t v41 = *(double *)&qword_1004F7410;
      *(_DWORD *)&unsigned char v41[8] = v34.i32[0];
      *(float *)&v41[12] = *(double *)&qword_1004F7428;
      *(_DWORD *)&v41[20] = v35.i32[0];
      *(float *)&v41[24] = *(double *)&qword_1004F7440;
      v19.i32[0] = v36.i32[0];
      v20.i32[0] = v35.i32[0];
      v21.i32[0] = v34.i32[0];
      int v42 = v36.i32[0];
    }
    int32x4_t v44 = vdupq_lane_s32(v18, 0);
    int32x4_t v45 = vdupq_lane_s32(v34, 1);
    int32x4_t v46 = vdupq_lane_s32(v21, 0);
    int32x4_t v47 = vdupq_lane_s32(v17, 0);
    int32x4_t v48 = vdupq_lane_s32(v35, 1);
    int32x4_t v49 = vdupq_lane_s32(v20, 0);
    int32x4_t v50 = vdupq_lane_s32(v37, 0);
    int32x4_t v51 = vdupq_lane_s32(v36, 1);
    int32x4_t v52 = vdupq_lane_s32(v19, 0);
    int v62 = 0;
    int v63 = a6;
    int v55 = &off_100498968;
    uint64_t v56 = a1;
    uint64_t v57 = a2;
    uint64_t v58 = a3;
    uint64_t v59 = a4;
    int v60 = a5;
    int32x4_t v61 = &v40;
    sub_1002ABC90(&v62, (uint64_t)&v55, (double)(a6 * a5) * 0.0000152587891);
  }
  else
  {
    int v40 = a8;
    *(_OWORD *)float32x4_t v41 = xmmword_100407710;
    *(_OWORD *)&v41[16] = xmmword_100407720;
    unsigned int v22 = 3892;
    int v42 = 3892;
    unsigned int v23 = 739;
    unsigned int v24 = 79;
    if (a9)
    {
      unsigned int v25 = 1689;
      unsigned int v26 = 871;
      unsigned int v27 = 296;
    }
    else
    {
      *(_DWORD *)float32x4_t v41 = 739;
      *(void *)&unsigned char v41[8] = 0x12800000699;
      unsigned int v25 = 739;
      unsigned int v23 = 1689;
      *(void *)&v41[20] = 0xF3400000367;
      int v42 = 79;
      unsigned int v26 = 296;
      unsigned int v27 = 871;
      unsigned int v24 = 3892;
      unsigned int v22 = 79;
    }
    int16x4_t v43 = vdup_n_s16(v25);
    *(int16x4_t *)v44.i8 = vdup_n_s16(0x5B9u);
    v44.u64[1] = (unint64_t)vdup_n_s16(v23);
    *(int16x4_t *)v45.i8 = vdup_n_s16(v26);
    v45.u64[1] = (unint64_t)vdup_n_s16(0xB71u);
    *(int16x4_t *)v46.i8 = vdup_n_s16(v27);
    v46.u64[1] = (unint64_t)vdup_n_s16(v24);
    *(int16x4_t *)v47.i8 = vdup_n_s16(0x1E8u);
    v47.u64[1] = (unint64_t)vdup_n_s16(v22);
    v38.i64[0] = 0x80000000800;
    v38.i64[1] = 0x80000000800;
    int32x4_t v48 = v38;
    int v62 = 0;
    int v63 = a6;
    int v55 = &off_1004988A8;
    uint64_t v56 = a1;
    uint64_t v57 = a2;
    uint64_t v58 = a3;
    uint64_t v59 = a4;
    int v60 = a5;
    int32x4_t v61 = &v40;
    sub_1002ABC90(&v62, (uint64_t)&v55, (double)(a6 * a5) * 0.0000152587891);
  }
  nullsub_1(&v55);
  if (v54) {
    sub_1002D6888(v53);
  }
}

void sub_1002F9670(_Unwind_Exception *a1)
{
  nullsub_1(v1 - 144);
  sub_10020FA00(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1002F9698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, unsigned int a8, char a9)
{
  sub_1002D6AE8(v55, &off_100497F98);
  if (a9) {
    int v17 = 2;
  }
  else {
    int v17 = 0;
  }
  if (a7 == 2)
  {
    int32x4_t v39 = (uint64_t (**)(void))__PAIR64__(v17, a8);
    long long v40 = xmmword_100407730;
    long long v41 = xmmword_100407740;
    unsigned int v24 = 4331;
    int v42 = 4331;
    unsigned int v25 = -2042;
    if (a9)
    {
      unsigned int v26 = 13273;
      unsigned int v27 = -6296;
      unsigned int v28 = 228;
      unsigned int v29 = -836;
    }
    else
    {
      *(void *)&long long v40 = 0xFFFFFCBC000000E4;
      *((void *)&v41 + 1) = 0xFFFFE768000033D9;
      unsigned int v26 = 228;
      unsigned int v27 = -836;
      DWORD2(v40) = 4331;
      int v42 = -2042;
      unsigned int v25 = 4331;
      unsigned int v28 = 13273;
      unsigned int v29 = -6296;
      unsigned int v24 = -2042;
    }
    int32x4_t v43 = vdupq_n_s32(v26);
    int32x4_t v44 = vdupq_n_s32(v27);
    int32x4_t v45 = vdupq_n_s32(v25);
    int32x4_t v46 = vdupq_n_s32(0xFFFFF07E);
    *(void *)&long long v37 = 0xAA000000AALL;
    *((void *)&v37 + 1) = 0xAA000000AALL;
    int32x4_t v47 = vdupq_n_s32(0x1E04u);
    long long v48 = v37;
    int32x4_t v49 = vdupq_n_s32(v28);
    int32x4_t v50 = vdupq_n_s32(v29);
    *(void *)&long long v37 = 0x80000000800;
    *((void *)&v37 + 1) = 0x80000000800;
    int32x4_t v51 = vdupq_n_s32(v24);
    long long v52 = v37;
    *(void *)&long long v38 = -1;
    *((void *)&v38 + 1) = -1;
    long long v54 = v38;
    uint64_t v53 = -1;
    int v61 = 0;
    int v62 = a6;
    uint64_t v57 = &off_100498A28;
    *(void *)uint64_t v58 = a1;
    *(void *)&v58[8] = a2;
    *(void *)&v58[16] = a3;
    *(void *)uint64_t v59 = a4;
    *(_DWORD *)&v59[8] = a5;
    int v60 = &v39;
    sub_1002ABC90(&v61, (uint64_t)&v57, (double)(a6 * a5) * 0.0000152587891);
LABEL_18:
    nullsub_1(&v57);
    if (!v56) {
      return;
    }
    goto LABEL_19;
  }
  if (!a7)
  {
    int32x4_t v39 = (uint64_t (**)(void))__PAIR64__(v17, a8);
    long long v40 = xmmword_100407730;
    long long v41 = xmmword_100407740;
    unsigned int v18 = 4331;
    int v42 = 4331;
    if (a9)
    {
      unsigned int v19 = 13273;
      unsigned int v20 = 59240;
      unsigned int v21 = 63494;
      unsigned int v22 = 228;
      unsigned int v23 = 64700;
    }
    else
    {
      *(void *)&long long v40 = 0xFFFFFCBC000000E4;
      *((void *)&v41 + 1) = 0xFFFFE768000033D9;
      unsigned int v19 = 228;
      unsigned int v20 = 64700;
      DWORD2(v40) = 4331;
      int v42 = -2042;
      unsigned int v21 = 4331;
      unsigned int v22 = 13273;
      unsigned int v23 = 59240;
      unsigned int v18 = 63494;
    }
    *(int16x4_t *)v43.i8 = vdup_n_s16(v19);
    v43.u64[1] = (unint64_t)vdup_n_s16(v20);
    *(int16x4_t *)v44.i8 = vdup_n_s16(v21);
    v44.u64[1] = (unint64_t)vdup_n_s16(0xF07Eu);
    *(int16x4_t *)v45.i8 = vdup_n_s16(0x1E04u);
    v45.i64[1] = 0xAA00AA00AA00AALL;
    *(int16x4_t *)v46.i8 = vdup_n_s16(v22);
    v46.u64[1] = (unint64_t)vdup_n_s16(v23);
    *(void *)&long long v36 = 0x80000000800;
    *((void *)&v36 + 1) = 0x80000000800;
    long long v48 = v36;
    *(int16x4_t *)v47.i8 = vdup_n_s16(v18);
    v47.i64[1] = -1;
    int v61 = 0;
    int v62 = a6;
    uint64_t v57 = &off_1004989C8;
    *(void *)uint64_t v58 = a1;
    *(void *)&v58[8] = a2;
    *(void *)&v58[16] = a3;
    *(void *)uint64_t v59 = a4;
    *(_DWORD *)&v59[8] = a5;
    int v60 = &v39;
    sub_1002ABC90(&v61, (uint64_t)&v57, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_18;
  }
  uint64_t v57 = (uint64_t (**)(void))__PAIR64__(v17, a8);
  float v30 = *(double *)&xmmword_1004F7450;
  float32x4_t v31 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&xmmword_1004F7450 + 8)), *(float64x2_t *)&qword_1004F7468);
  *(float32x4_t *)&v58[4] = v31;
  float v32 = *((double *)&xmmword_1004F7470 + 1);
  *(float *)uint64_t v58 = v30;
  float v33 = *(double *)&qword_1004F7480;
  float v34 = *(double *)&qword_1004F7488;
  *(float *)&unsigned char v58[20] = v32;
  *(float *)uint64_t v59 = v33;
  float v35 = *(double *)&qword_1004F7490;
  *(float *)&v59[4] = v34;
  *(float *)&v59[8] = v35;
  if ((a9 & 1) == 0)
  {
    *(float *)uint64_t v58 = *(double *)&qword_1004F7480;
    *(float *)&v58[4] = *(double *)&qword_1004F7488;
    *(void *)&v59[4] = v31.i64[0];
    *(float *)uint64_t v59 = *(double *)&xmmword_1004F7450;
    *(float *)&v58[8] = *(double *)&qword_1004F7490;
  }
  int v61 = 0;
  int v62 = a6;
  int32x4_t v39 = &off_100498A88;
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  *(void *)&long long v41 = a3;
  *((void *)&v41 + 1) = a4;
  int v42 = a5;
  v43.i64[0] = (uint64_t)&v57;
  sub_1002ABC90(&v61, (uint64_t)&v39, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(&v39);
  if (v56) {
LABEL_19:
  }
    sub_1002D6888(v55);
}

void sub_1002F9A54(_Unwind_Exception *a1)
{
  nullsub_1(v1 - 144);
  sub_10020FA00(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1002F9A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_1(&a9);
  sub_10020FA00(v9 - 160);
  _Unwind_Resume(a1);
}

void sub_1002F9A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 a5, int a6, int a7, unsigned int a8, char a9, char a10, char a11)
{
  sub_1002D6AE8(v23, &off_100497FB8);
  if (a10) {
    int v19 = 256;
  }
  else {
    int v19 = 180;
  }
  if (a7 == 5) {
    int v20 = 360;
  }
  else {
    int v20 = v19;
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  if (a11)
  {
    if (a7)
    {
      unsigned int v25 = (uint64_t (**)(void))__PAIR64__(v21, a8);
      *(float *)&uint64_t v26 = (float)v20;
      int v32 = 0;
      int v33 = a6;
      float v34 = &off_100498B48;
      uint64_t v35 = a1;
      v36.i64[0] = a2;
      v36.i64[1] = a3;
      v37.i64[0] = a4;
      v37.i32[2] = a5;
      uint64_t v38 = (uint64_t)&v25;
      sub_1002ABC90(&v32, (uint64_t)&v34, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      unsigned int v25 = (uint64_t (**)(void))__PAIR64__(v21, a8);
      LODWORD(v26) = v20;
      if (v20 != 180 && v20 != 256)
      {
        float v34 = 0;
        uint64_t v35 = 0;
        qmemcpy((void *)sub_1002D19D8(&v34, 30), "hrange == 180 || hrange == 256", 30);
        sub_1002D2278(-215, (uint64_t *)&v34, "RGB2HSV_b", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 4489);
      }
      int v32 = 0;
      int v33 = a6;
      float v34 = &off_100498AE8;
      uint64_t v35 = a1;
      v36.i64[0] = a2;
      v36.i64[1] = a3;
      v37.i64[0] = a4;
      v37.i32[2] = a5;
      uint64_t v38 = (uint64_t)&v25;
      sub_1002ABC90(&v32, (uint64_t)&v34, (double)(a6 * a5) * 0.0000152587891);
    }
LABEL_19:
    nullsub_1(&v34);
    if (!v24) {
      return;
    }
    goto LABEL_20;
  }
  float v22 = (float)v20;
  if (a7)
  {
    unsigned int v25 = (uint64_t (**)(void))__PAIR64__(v21, a8);
    *(float *)&uint64_t v26 = v22 / 360.0;
    int v32 = 0;
    int v33 = a6;
    float v34 = &off_100498C08;
    uint64_t v35 = a1;
    v36.i64[0] = a2;
    v36.i64[1] = a3;
    v37.i64[0] = a4;
    v37.i32[2] = a5;
    uint64_t v38 = (uint64_t)&v25;
    sub_1002ABC90(&v32, (uint64_t)&v34, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_19;
  }
  float v34 = (uint64_t (**)(void))(a8 | 0x300000000);
  *((float *)&v35 + 1) = v22 / 360.0;
  LODWORD(v35) = v21;
  int32x4_t v36 = vdupq_n_s32(0x437F0000u);
  int32x4_t v37 = vdupq_n_s32(0x3B808081u);
  uint64_t v38 = -1;
  int v32 = 0;
  int v33 = a6;
  unsigned int v25 = &off_100498BA8;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  __int32 v30 = a5;
  float32x4_t v31 = &v34;
  sub_1002ABC90(&v32, (uint64_t)&v25, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(&v25);
  if (!v24) {
    return;
  }
LABEL_20:
  sub_1002D6888(v23);
}

void sub_1002F9DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F9E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 a5, int a6, int a7, unsigned int a8, char a9, char a10, char a11)
{
  sub_1002D6AE8(v23, &off_100497FD8);
  if (a10) {
    int v19 = 255;
  }
  else {
    int v19 = 180;
  }
  if (a7 == 5) {
    int v20 = 360;
  }
  else {
    int v20 = v19;
  }
  if (a9) {
    int v21 = 2;
  }
  else {
    int v21 = 0;
  }
  float v22 = (float)v20;
  if (a11)
  {
    if (a7)
    {
      unsigned int v25 = (uint64_t (**)(void))__PAIR64__(v21, a8);
      *(float *)&uint64_t v26 = 6.0 / v22;
      int v32 = 0;
      int v33 = a6;
      float v34 = &off_100498CC8;
      uint64_t v35 = a1;
      v36.i64[0] = a2;
      v36.i64[1] = a3;
      v37.i64[0] = a4;
      v37.i32[2] = a5;
      uint64_t v38 = (uint64_t)&v25;
      sub_1002ABC90(&v32, (uint64_t)&v34, (double)(a6 * a5) * 0.0000152587891);
      goto LABEL_15;
    }
    float v34 = (uint64_t (**)(void))(a8 | 0x300000000);
    *((float *)&v35 + 1) = 6.0 / v22;
    LODWORD(v35) = v21;
    int32x4_t v36 = vdupq_n_s32(0x437F0000u);
    int32x4_t v37 = vdupq_n_s32(0x3B808081u);
    uint64_t v38 = -1;
    int v32 = 0;
    int v33 = a6;
    unsigned int v25 = &off_100498C68;
    uint64_t v26 = a1;
    uint64_t v27 = a2;
    uint64_t v28 = a3;
    uint64_t v29 = a4;
    __int32 v30 = a5;
    float32x4_t v31 = &v34;
    sub_1002ABC90(&v32, (uint64_t)&v25, (double)(a6 * a5) * 0.0000152587891);
LABEL_19:
    nullsub_1(&v25);
    if (!v24) {
      return;
    }
    goto LABEL_20;
  }
  if (!a7)
  {
    float v34 = (uint64_t (**)(void))(a8 | 0x300000000);
    *((float *)&v35 + 1) = 6.0 / v22;
    LODWORD(v35) = v21;
    int32x4_t v36 = vdupq_n_s32(0x437F0000u);
    int32x4_t v37 = vdupq_n_s32(0x3B808081u);
    uint64_t v38 = -1;
    int v32 = 0;
    int v33 = a6;
    unsigned int v25 = &off_100498D28;
    uint64_t v26 = a1;
    uint64_t v27 = a2;
    uint64_t v28 = a3;
    uint64_t v29 = a4;
    __int32 v30 = a5;
    float32x4_t v31 = &v34;
    sub_1002ABC90(&v32, (uint64_t)&v25, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_19;
  }
  unsigned int v25 = (uint64_t (**)(void))__PAIR64__(v21, a8);
  *(float *)&uint64_t v26 = 6.0 / v22;
  int v32 = 0;
  int v33 = a6;
  float v34 = &off_100498D88;
  uint64_t v35 = a1;
  v36.i64[0] = a2;
  v36.i64[1] = a3;
  v37.i64[0] = a4;
  v37.i32[2] = a5;
  uint64_t v38 = (uint64_t)&v25;
  sub_1002ABC90(&v32, (uint64_t)&v34, (double)(a6 * a5) * 0.0000152587891);
LABEL_15:
  nullsub_1(&v34);
  if (v24) {
LABEL_20:
  }
    sub_1002D6888(v23);
}

void sub_1002FA150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1002FA170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_1002FA190(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FA1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, char a10, char a11)
{
  sub_1002D6AE8(v26, &off_100497FF8);
  if (a9) {
    int v18 = 2;
  }
  else {
    int v18 = 0;
  }
  if (a10)
  {
    if (a7)
    {
      sub_100302860((uint64_t)v28, a8, v18, 0, 0, a11);
      int v31 = 0;
      int v32 = a6;
      v20.i64[0] = (uint64_t)&off_100498E48;
      v20.i64[1] = a1;
      uint64_t v21 = a2;
      uint64_t v22 = a3;
      uint64_t v23 = a4;
      int v24 = a5;
      unsigned int v25 = v28;
      sub_1002ABC90(&v31, (uint64_t)&v20, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      sub_1002FFCD0((uint64_t)v28, a8, v18, 0, 0, a11);
      int v31 = 0;
      int v32 = a6;
      v20.i64[0] = (uint64_t)&off_100498DE8;
      v20.i64[1] = a1;
      uint64_t v21 = a2;
      uint64_t v22 = a3;
      uint64_t v23 = a4;
      int v24 = a5;
      unsigned int v25 = v28;
      sub_1002ABC90(&v31, (uint64_t)&v20, (double)(a6 * a5) * 0.0000152587891);
    }
LABEL_10:
    nullsub_1(&v20);
    if (!v27) {
      return;
    }
    goto LABEL_11;
  }
  if (a7)
  {
    sub_100302D70((uint64_t)v28, a8, v18, 0, 0, a11);
    HIDWORD(v30) = a8;
    int v31 = 0;
    int v32 = a6;
    v20.i64[0] = (uint64_t)&off_100498F08;
    v20.i64[1] = a1;
    uint64_t v21 = a2;
    uint64_t v22 = a3;
    uint64_t v23 = a4;
    int v24 = a5;
    unsigned int v25 = v28;
    sub_1002ABC90(&v31, (uint64_t)&v20, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_10;
  }
  sub_100302C00(&v20, a8, v18, 0, 0, a11);
  int v31 = 0;
  int v32 = a6;
  v28[0] = &off_100498EA8;
  v28[1] = a1;
  _DWORD v28[2] = a2;
  v28[3] = a3;
  _OWORD v28[4] = a4;
  int v29 = a5;
  __int32 v30 = &v20;
  sub_1002ABC90(&v31, (uint64_t)v28, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v28);
  if (!v27) {
    return;
  }
LABEL_11:
  sub_1002D6888(v26);
}

void sub_1002FA44C(_Unwind_Exception *a1)
{
  nullsub_1(v1 - 152);
  sub_10020FA00(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_1002FA468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nullsub_1(va);
  sub_10020FA00(v3 - 168);
  _Unwind_Resume(a1);
}

void sub_1002FA4C8(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_1002FA4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9, char a10, unsigned __int8 a11)
{
  sub_1002D6AE8(v21, &off_100498018);
  if (a9) {
    int v19 = 2;
  }
  else {
    int v19 = 0;
  }
  if (a10)
  {
    if (a7)
    {
      sub_1003032C8((uint64_t)v32, a8, v19, 0, 0, a11);
      v35[0] = a8;
      int v30 = 0;
      int v31 = a6;
      uint64_t v23 = &off_100498FC8;
      uint64_t v24 = a1;
      uint64_t v25 = a2;
      uint64_t v26 = a3;
      uint64_t v27 = a4;
      int v28 = a5;
      int v29 = v32;
      sub_1002ABC90(&v30, (uint64_t)&v23, (double)(a6 * a5) * 0.0000152587891);
    }
    else
    {
      sub_1003032C8((uint64_t)v32, 3, v19, 0, 0, a11);
      sub_100303624((uint64_t)v35, a8, v19, 0, 0, a11);
      int v41 = a8;
      int32x4_t v37 = vdupq_n_s32(0x437F0000u);
      int32x4_t v38 = vdupq_n_s32(0x3EC8C8C9u);
      uint64_t v40 = -1;
      *(void *)&long long v20 = 0x4300000043000000;
      *((void *)&v20 + 1) = 0x4300000043000000;
      long long v39 = v20;
      int v30 = 0;
      int v31 = a6;
      uint64_t v23 = &off_100498F68;
      uint64_t v24 = a1;
      uint64_t v25 = a2;
      uint64_t v26 = a3;
      uint64_t v27 = a4;
      int v28 = a5;
      int v29 = v32;
      sub_1002ABC90(&v30, (uint64_t)&v23, (double)(a6 * a5) * 0.0000152587891);
    }
LABEL_12:
    nullsub_1(&v23);
    if (!v22) {
      return;
    }
    goto LABEL_13;
  }
  if (!a7)
  {
    LODWORD(v32[0]) = a8;
    sub_100303A48((uint64_t)v32 + 4, a8, v19, 0, 0, a11);
    sub_100303E38((uint64_t)v35, a8, v19, 0, 0, a11);
    char v36 = 1;
    int v30 = 0;
    int v31 = a6;
    uint64_t v23 = &off_100499028;
    uint64_t v24 = a1;
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    uint64_t v27 = a4;
    int v28 = a5;
    int v29 = v32;
    sub_1002ABC90(&v30, (uint64_t)&v23, (double)(a6 * a5) * 0.0000152587891);
    goto LABEL_12;
  }
  sub_100303A48((uint64_t)&v23, a8, v19, 0, 0, a11);
  HIDWORD(v29) = a8;
  int v30 = 0;
  int v31 = a6;
  v32[0] = &off_100499088;
  v32[1] = a1;
  uint64_t v32[2] = a2;
  v32[3] = a3;
  _OWORD v32[4] = a4;
  int v33 = a5;
  float v34 = &v23;
  sub_1002ABC90(&v30, (uint64_t)v32, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v32);
  if (v22) {
LABEL_13:
  }
    sub_1002D6888(v21);
}

void sub_1002FA828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1002FA87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002FA890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002FA8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002FA8B8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FA8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char a9, int a10)
{
  sub_1002D6AE8(v28, &off_100498058);
  if (a9) {
    int v18 = 20;
  }
  else {
    int v18 = 0;
  }
  int v19 = v18 + 100 * a8 + a10;
  if (a9)
  {
    switch(v19)
    {
      case 400:
        int v32 = &off_1004991E8;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        int v35 = a6;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a3;
        if (a7 >= 0) {
          int v20 = a7;
        }
        else {
          int v20 = a7 + 1;
        }
        int v30 = 0;
        int v31 = v20 >> 1;
        if (a7 * a6 > 76799) {
          goto LABEL_47;
        }
        sub_100313184((uint64_t)&v32, &v30);
        break;
      case 401:
        int v32 = &off_100499228;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        int v35 = a6;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a3;
        if (a7 >= 0) {
          int v27 = a7;
        }
        else {
          int v27 = a7 + 1;
        }
        int v30 = 0;
        int v31 = v27 >> 1;
        if (a7 * a6 > 76799) {
          goto LABEL_47;
        }
        sub_100313444((uint64_t)&v32, &v30);
        break;
      case 420:
        int v32 = &off_100499268;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        int v35 = a6;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a3;
        if (a7 >= 0) {
          int v25 = a7;
        }
        else {
          int v25 = a7 + 1;
        }
        int v30 = 0;
        int v31 = v25 >> 1;
        if (a7 * a6 > 76799) {
          goto LABEL_47;
        }
        sub_1003136F4((uint64_t)&v32, &v30);
        break;
      case 421:
        int v32 = &off_1004992A8;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        int v35 = a6;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a3;
        if (a7 >= 0) {
          int v26 = a7;
        }
        else {
          int v26 = a7 + 1;
        }
        int v30 = 0;
        int v31 = v26 >> 1;
        if (a7 * a6 > 76799) {
          goto LABEL_47;
        }
        sub_1003139D4((uint64_t)&v32, &v30);
        break;
      default:
        goto LABEL_32;
    }
  }
  else
  {
    switch(v19)
    {
      case 300:
        int v32 = &off_1004990E8;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        int v35 = a6;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a3;
        if (a7 >= 0) {
          int v21 = a7;
        }
        else {
          int v21 = a7 + 1;
        }
        int v30 = 0;
        int v31 = v21 >> 1;
        if (a7 * a6 > 76799) {
          goto LABEL_47;
        }
        sub_1003126A8((uint64_t)&v32, &v30);
        break;
      case 301:
        int v32 = &off_100499128;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        int v35 = a6;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a3;
        if (a7 >= 0) {
          int v22 = a7;
        }
        else {
          int v22 = a7 + 1;
        }
        int v30 = 0;
        int v31 = v22 >> 1;
        if (a7 * a6 > 76799) {
          goto LABEL_47;
        }
        sub_10031294C((uint64_t)&v32, &v30);
        break;
      case 302:
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
LABEL_32:
        int v32 = 0;
        uint64_t v33 = 0;
        qmemcpy((void *)sub_1002D19D8(&v32, 41), "Unknown/unsupported color conversion code", 41);
        sub_1002D2278(-206, (uint64_t *)&v32, "cvtTwoPlaneYUVtoBGR", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 10858);
      case 320:
        int v32 = &off_100499168;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        int v35 = a6;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a3;
        if (a7 >= 0) {
          int v23 = a7;
        }
        else {
          int v23 = a7 + 1;
        }
        int v30 = 0;
        int v31 = v23 >> 1;
        if (a7 * a6 > 76799) {
          goto LABEL_47;
        }
        sub_100312BE0((uint64_t)&v32, &v30);
        break;
      case 321:
        int v32 = &off_1004991A8;
        uint64_t v33 = a4;
        uint64_t v34 = a5;
        int v35 = a6;
        uint64_t v36 = a1;
        uint64_t v37 = a2;
        uint64_t v38 = a3;
        if (a7 >= 0) {
          int v24 = a7;
        }
        else {
          int v24 = a7 + 1;
        }
        int v30 = 0;
        int v31 = v24 >> 1;
        if (a7 * a6 <= 76799) {
          sub_100312EBC((uint64_t)&v32, &v30);
        }
        else {
LABEL_47:
        }
          sub_1002ABC90(&v30, (uint64_t)&v32, -1.0);
        break;
      default:
        JUMPOUT(0);
    }
  }
  nullsub_1(&v32);
  if (v29) {
    sub_1002D6888(v28);
  }
}

void sub_1002FAE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1002FAE6C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  JUMPOUT(0x1002FAE58);
}

void sub_1002FAE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002FAF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  sub_1002D6AE8(v31, &off_100498078);
  int v17 = a6 + 3;
  if (a6 >= 0) {
    int v17 = a6;
  }
  uint64_t v18 = a1 + (a6 + (v17 >> 2)) * a2;
  if (a5 >= 0) {
    int v19 = a5;
  }
  else {
    int v19 = a5 + 1;
  }
  unsigned int v20 = a6 - (v17 & 0xFFFFFFFC);
  uint64_t v21 = v18 + (v19 >> 1) * ((int)((v20 + ((v20 & 0x80) >> 7)) << 24) >> 25);
  BOOL v22 = v20 == 2;
  if (a9 == 1) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = a1 + a6 * a2;
  }
  if (a9 == 1)
  {
    uint64_t v21 = a1 + a6 * a2;
    BOOL v24 = v20 == 2;
  }
  else
  {
    BOOL v24 = 0;
  }
  BOOL v25 = a9 != 1 && v22;
  if (a8) {
    int v26 = 2;
  }
  else {
    int v26 = 0;
  }
  switch((v26 + 10 * a7 - 30) >> 1)
  {
    case 0u:
      int v35 = &off_1004992E8;
      uint64_t v36 = a3;
      uint64_t v37 = a4;
      int v38 = a5;
      uint64_t v39 = a1;
      uint64_t v40 = v23;
      uint64_t v41 = v21;
      uint64_t v42 = a2;
      BOOL v43 = v24;
      BOOL v44 = v25;
      if (a6 >= 0) {
        int v27 = a6;
      }
      else {
        int v27 = a6 + 1;
      }
      int v33 = 0;
      int v34 = v27 >> 1;
      if (a6 * a5 > 76799) {
        goto LABEL_39;
      }
      sub_100313CA4((uint64_t)&v35, &v33);
      break;
    case 1u:
      int v35 = &off_100499328;
      uint64_t v36 = a3;
      uint64_t v37 = a4;
      int v38 = a5;
      uint64_t v39 = a1;
      uint64_t v40 = v23;
      uint64_t v41 = v21;
      uint64_t v42 = a2;
      BOOL v43 = v24;
      BOOL v44 = v25;
      if (a6 >= 0) {
        int v28 = a6;
      }
      else {
        int v28 = a6 + 1;
      }
      int v33 = 0;
      int v34 = v28 >> 1;
      if (a6 * a5 > 76799) {
        goto LABEL_39;
      }
      sub_10031400C((uint64_t)&v35, &v33);
      break;
    case 5u:
      int v35 = &off_100499368;
      uint64_t v36 = a3;
      uint64_t v37 = a4;
      int v38 = a5;
      uint64_t v39 = a1;
      uint64_t v40 = v23;
      uint64_t v41 = v21;
      uint64_t v42 = a2;
      BOOL v43 = v24;
      BOOL v44 = v25;
      if (a6 >= 0) {
        int v29 = a6;
      }
      else {
        int v29 = a6 + 1;
      }
      int v33 = 0;
      int v34 = v29 >> 1;
      if (a6 * a5 > 76799) {
        goto LABEL_39;
      }
      sub_1003143A0((uint64_t)&v35, &v33);
      break;
    case 6u:
      int v35 = &off_1004993A8;
      uint64_t v36 = a3;
      uint64_t v37 = a4;
      int v38 = a5;
      uint64_t v39 = a1;
      uint64_t v40 = v23;
      uint64_t v41 = v21;
      uint64_t v42 = a2;
      BOOL v43 = v24;
      BOOL v44 = v25;
      if (a6 >= 0) {
        int v30 = a6;
      }
      else {
        int v30 = a6 + 1;
      }
      int v33 = 0;
      int v34 = v30 >> 1;
      if (a6 * a5 <= 76799) {
        sub_100314718((uint64_t)&v35, &v33);
      }
      else {
LABEL_39:
      }
        sub_1002ABC90(&v33, (uint64_t)&v35, -1.0);
      break;
    default:
      int v35 = 0;
      uint64_t v36 = 0;
      qmemcpy((void *)sub_1002D19D8(&v35, 41), "Unknown/unsupported color conversion code", 41);
      sub_1002D2278(-206, (uint64_t *)&v35, "cvtThreePlaneYUVtoBGR", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 10885);
  }
  nullsub_1(&v35);
  if (v32) {
    sub_1002D6888(v31);
  }
}

void sub_1002FB2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void sub_1002FB314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1002FB35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, char a8, int a9)
{
  sub_1002D6AE8(v25, &off_100498098);
  v18[0] = &off_100498148;
  v18[1] = a1;
  uint64_t v18[2] = a2;
  v18[3] = a3;
  _OWORD v18[4] = a3 + a6 * a4;
  v18[5] = a4;
  int v19 = a5;
  int v20 = a6;
  int v21 = a7;
  char v22 = a8;
  BOOL v23 = a9 == 2;
  char v24 = 0;
  if (a6 >= 0) {
    int v17 = a6;
  }
  else {
    int v17 = a6 + 1;
  }
  v27[0] = 0;
  v27[1] = v17 >> 1;
  if (a6 * a5 < 76800) {
    sub_1003042BC((uint64_t)v18, v27);
  }
  else {
    sub_1002ABC90(v27, (uint64_t)v18, -1.0);
  }
  nullsub_1(v18);
  if (v26) {
    sub_1002D6888(v25);
  }
}

void sub_1002FB484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  nullsub_1((uint64_t *)va);
  sub_10020FA00((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002FB4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  sub_1002D6AE8(v20, &off_1004980B8);
  if (a8) {
    int v18 = 200;
  }
  else {
    int v18 = 0;
  }
  int v19 = v18 + 1000 * a7 + 10 * a9 + a10;
  if (v19 <= 3999)
  {
    if (v19 > 3199)
    {
      switch(v19)
      {
        case 3200:
          char v24 = &off_1004994A8;
          uint64_t v25 = a3;
          uint64_t v26 = a4;
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          int v29 = a5;
          int v22 = 0;
          int v23 = a6;
          if (a6 * a5 > 76799) {
            goto LABEL_42;
          }
          sub_100314FD0((uint64_t)&v24, &v22);
          goto LABEL_56;
        case 3201:
          char v24 = &off_1004994E8;
          uint64_t v25 = a3;
          uint64_t v26 = a4;
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          int v29 = a5;
          int v22 = 0;
          int v23 = a6;
          if (a6 * a5 > 76799) {
            goto LABEL_42;
          }
          sub_100315190((uint64_t)&v24, &v22);
          goto LABEL_56;
        case 3210:
          char v24 = &off_100499528;
          uint64_t v25 = a3;
          uint64_t v26 = a4;
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          int v29 = a5;
          int v22 = 0;
          int v23 = a6;
          if (a6 * a5 > 76799) {
            goto LABEL_42;
          }
          sub_100315350((uint64_t)&v24, &v22);
          goto LABEL_56;
      }
    }
    else
    {
      switch(v19)
      {
        case 3000:
          char v24 = &off_1004993E8;
          uint64_t v25 = a3;
          uint64_t v26 = a4;
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          int v29 = a5;
          int v22 = 0;
          int v23 = a6;
          if (a6 * a5 > 76799) {
            goto LABEL_42;
          }
          sub_100314AC0((uint64_t)&v24, &v22);
          goto LABEL_56;
        case 3001:
          char v24 = &off_100499428;
          uint64_t v25 = a3;
          uint64_t v26 = a4;
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          int v29 = a5;
          int v22 = 0;
          int v23 = a6;
          if (a6 * a5 > 76799) {
            goto LABEL_42;
          }
          sub_100314C6C((uint64_t)&v24, &v22);
          goto LABEL_56;
        case 3010:
          char v24 = &off_100499468;
          uint64_t v25 = a3;
          uint64_t v26 = a4;
          uint64_t v27 = a1;
          uint64_t v28 = a2;
          int v29 = a5;
          int v22 = 0;
          int v23 = a6;
          if (a6 * a5 > 76799) {
            goto LABEL_42;
          }
          sub_100314E24((uint64_t)&v24, &v22);
          goto LABEL_56;
      }
    }
LABEL_43:
    char v24 = 0;
    uint64_t v25 = 0;
    qmemcpy((void *)sub_1002D19D8(&v24, 41), "Unknown/unsupported color conversion code", 41);
    sub_1002D2278(-206, (uint64_t *)&v24, "cvtOnePlaneYUVtoBGR", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 10935);
  }
  if (v19 <= 4199)
  {
    switch(v19)
    {
      case 4000:
        char v24 = &off_100499568;
        uint64_t v25 = a3;
        uint64_t v26 = a4;
        uint64_t v27 = a1;
        uint64_t v28 = a2;
        int v29 = a5;
        int v22 = 0;
        int v23 = a6;
        if (a6 * a5 > 76799) {
          goto LABEL_42;
        }
        sub_100315510((uint64_t)&v24, &v22);
        goto LABEL_56;
      case 4001:
        char v24 = &off_1004995A8;
        uint64_t v25 = a3;
        uint64_t v26 = a4;
        uint64_t v27 = a1;
        uint64_t v28 = a2;
        int v29 = a5;
        int v22 = 0;
        int v23 = a6;
        if (a6 * a5 > 76799) {
          goto LABEL_42;
        }
        sub_1003156C0((uint64_t)&v24, &v22);
        goto LABEL_56;
      case 4010:
        char v24 = &off_1004995E8;
        uint64_t v25 = a3;
        uint64_t v26 = a4;
        uint64_t v27 = a1;
        uint64_t v28 = a2;
        int v29 = a5;
        int v22 = 0;
        int v23 = a6;
        if (a6 * a5 > 76799) {
          goto LABEL_42;
        }
        sub_10031587C((uint64_t)&v24, &v22);
        goto LABEL_56;
    }
    goto LABEL_43;
  }
  if (v19 == 4200)
  {
    char v24 = &off_100499628;
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v27 = a1;
    uint64_t v28 = a2;
    int v29 = a5;
    int v22 = 0;
    int v23 = a6;
    if (a6 * a5 > 76799) {
      goto LABEL_42;
    }
    sub_100315A2C((uint64_t)&v24, &v22);
    goto LABEL_56;
  }
  if (v19 != 4201)
  {
    if (v19 == 4210)
    {
      char v24 = &off_1004996A8;
      uint64_t v25 = a3;
      uint64_t v26 = a4;
      uint64_t v27 = a1;
      uint64_t v28 = a2;
      int v29 = a5;
      int v22 = 0;
      int v23 = a6;
      if (a6 * a5 > 76799) {
        goto LABEL_42;
      }
      sub_100315DBC((uint64_t)&v24, &v22);
      goto LABEL_56;
    }
    goto LABEL_43;
  }
  char v24 = &off_100499668;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  int v29 = a5;
  int v22 = 0;
  int v23 = a6;
  if (a6 * a5 > 76799)
  {
LABEL_42:
    sub_1002ABC90(&v22, (uint64_t)&v24, -1.0);
    goto LABEL_56;
  }
  sub_100315BF4((uint64_t)&v24, &v22);
LABEL_56:
  nullsub_1(&v24);
  if (v21) {
    sub_1002D6888(v20);
  }
}

void sub_1002FBB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  nullsub_1(va1);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002FBBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002D1A1C((uint64_t *)va);
  JUMPOUT(0x1002FBBACLL);
}

void sub_1002FBBD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002FBBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  sub_1002D6AE8(v13, &off_1004980D8);
  v18[0] = 0;
  v18[1] = a6;
  v15[0] = &off_1004996E8;
  v15[1] = a1;
  uint64_t v15[2] = a2;
  v15[3] = a3;
  _OWORD v15[4] = a4;
  int v16 = a5;
  int v17 = &v12;
  sub_1002ABC90(v18, (uint64_t)v15, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v15);
  if (v14) {
    sub_1002D6888(v13);
  }
}

void sub_1002FBCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  nullsub_1(va1);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002FBCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  sub_1002D6AE8(v13, &off_1004980F8);
  v18[0] = 0;
  v18[1] = a6;
  v15[0] = &off_100499748;
  v15[1] = a1;
  uint64_t v15[2] = a2;
  v15[3] = a3;
  _OWORD v15[4] = a4;
  int v16 = a5;
  int v17 = &v12;
  sub_1002ABC90(v18, (uint64_t)v15, (double)(a6 * a5) * 0.0000152587891);
  nullsub_1(v15);
  if (v14) {
    sub_1002D6888(v13);
  }
}

void sub_1002FBDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  nullsub_1(va1);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002FBDC4(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  sub_1002D6AE8(v328, &off_100498118);
  unsigned int v7 = sub_10029AB74((int *)a1, -1);
  *(_DWORD *)uint64_t v323 = 1124007936;
  memset(&v323[4], 0, 60);
  uint64_t v324 = (int *)&v323[8];
  uint64_t v325 = &v326;
  uint64_t v326 = 0;
  uint64_t v327 = 0;
  *(_DWORD *)int v318 = 1124007936;
  memset(&v318[4], 0, 60);
  v319 = (int *)&v318[8];
  uint64_t v320 = &v321;
  uint64_t v321 = 0;
  uint64_t v322 = 0;
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    if (sub_10029A230((_DWORD *)a1) == 0x10000)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      long long v9 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)v313 = *(_OWORD *)v8;
      *(_OWORD *)&v313[16] = v9;
      *(_OWORD *)&v313[32] = *(_OWORD *)(v8 + 32);
      uint64_t v10 = *(void *)(v8 + 56);
      *(void *)&v313[48] = *(void *)(v8 + 48);
      *(void *)&v313[56] = v10;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
      uint64_t v316 = 0;
      uint64_t v317 = 0;
      if (v10) {
        atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      }
      if (*(int *)(v8 + 4) > 2)
      {
        *(_DWORD *)&v313[4] = 0;
        sub_1002931A8((uint64_t)v313, v8);
      }
      else
      {
        uint64_t v11 = *(uint64_t **)(v8 + 72);
        char v12 = v315;
        uint64_t *v315 = *v11;
        v12[1] = v11[1];
      }
    }
    else
    {
      sub_100299554(a1, -1, (uint64_t)v313);
    }
    if (*(void *)&v323[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v323[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v323);
    }
    if (*(int *)&v323[4] >= 1)
    {
      uint64_t v13 = 0;
      int v14 = v324;
      do
        v14[v13++] = 0;
      while (v13 < *(int *)&v323[4]);
    }
    *(_OWORD *)uint64_t v323 = *(_OWORD *)v313;
    *(_OWORD *)&v323[16] = *(_OWORD *)&v313[16];
    *(_OWORD *)&v323[32] = *(_OWORD *)&v313[32];
    *(_OWORD *)&v323[48] = *(_OWORD *)&v313[48];
    if (v325 == &v326)
    {
      unint64_t v15 = v315;
      if (*(int *)&v313[4] <= 2) {
        goto LABEL_18;
      }
    }
    else
    {
      j__free(v325);
      uint64_t v324 = (int *)&v323[8];
      uint64_t v325 = &v326;
      unint64_t v15 = v315;
      if (*(int *)&v313[4] <= 2)
      {
LABEL_18:
        uint64_t v326 = *v15;
        uint64_t v327 = v15[1];
        goto LABEL_21;
      }
    }
    uint64_t v324 = v314;
    uint64_t v325 = v15;
    unint64_t v15 = &v316;
    uint64_t v314 = (int *)&v313[8];
    v315 = &v316;
LABEL_21:
    *(_DWORD *)v313 = 1124007936;
    memset(&v313[4], 0, 60);
    if (v15 != &v316) {
      j__free(v15);
    }
    goto LABEL_23;
  }
  *(_DWORD *)v313 = 33619968;
  *(void *)&v313[8] = v323;
  *(void *)&v313[16] = 0;
  sub_10029DC34(a1, v313);
LABEL_23:
  unsigned int v16 = v7 & 7;
  int v17 = *v324;
  int v18 = v324[1];
  if (v16 > 5 || ((1 << v16) & 0x25) == 0)
  {
    *(void *)v313 = 0;
    *(void *)&v313[8] = 0;
    qmemcpy((void *)sub_1002D19D8(v313, 38), "depth == 0 || depth == 2 || depth == 5", 38);
    sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11073);
  }
  int v19 = (v7 >> 3) & 0x1FF;
  unsigned int v287 = v19 + 1;
  switch(a3)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      if ((v7 & 0xFF0) != 0x10)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        uint64_t v55 = sub_1002D19D8(v313, 20);
        *(_DWORD *)(v55 + 16) = 874528061;
        *(_OWORD *)uint64_t v55 = *(_OWORD *)"scn == 3 || scn == 4";
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11079);
      }
      if ((a3 & 0xFFFFFFFD) == 0 || a3 == 5) {
        int v57 = 4;
      }
      else {
        int v57 = 3;
      }
      v312.i32[0] = v324[1];
      v312.i32[1] = v17;
      int v58 = v7 & 7;
      int v59 = v16 | (8 * v57);
      int v60 = v57;
      sub_10029E6D4(a2, &v312, v59 - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v61 = *(void *)(a2 + 8);
        long long v62 = *(_OWORD *)(v61 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v61;
        *(_OWORD *)&v313[16] = v62;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v61 + 32);
        uint64_t v63 = *(void *)(v61 + 56);
        *(void *)&v313[48] = *(void *)(v61 + 48);
        *(void *)&v313[56] = v63;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v63) {
          atomic_fetch_add((atomic_uint *volatile)(v63 + 20), 1u);
        }
        if (*(int *)(v61 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v61);
        }
        else
        {
          float32x4_t v64 = *(uint64_t **)(v61 + 72);
          uint64_t v65 = v315;
          uint64_t *v315 = *v64;
          v65[1] = v64[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v218 = 0;
        uint64_t v219 = v319;
        do
          v219[v218++] = 0;
        while (v218 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 == &v321)
      {
        uint64_t v220 = v315;
        if (*(int *)&v313[4] <= 2) {
          goto LABEL_401;
        }
      }
      else
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
        uint64_t v220 = v315;
        if (*(int *)&v313[4] <= 2)
        {
LABEL_401:
          uint64_t v321 = *v220;
          uint64_t v322 = v220[1];
          goto LABEL_404;
        }
      }
      v319 = v314;
      uint64_t v320 = v220;
      uint64_t v220 = &v316;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
LABEL_404:
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v220 != &v316) {
        j__free(v220);
      }
      uint64_t v221 = *(void *)&v323[16];
      uint64_t v222 = v326;
      uint64_t v223 = *(void *)&v318[16];
      uint64_t v224 = v321;
      int v226 = *(_DWORD *)&v323[8];
      int v225 = *(_DWORD *)&v323[12];
      char v227 = sub_1002FFA74();
      sub_1002F7FA8(v221, v222, v223, v224, v225, v226, v58, v287, v60, v227);
      goto LABEL_512;
    case 6u:
    case 7u:
    case 0xAu:
    case 0xBu:
      if ((v7 & 0xFF0) != 0x10)
      {
        sub_10022F344(v313, "scn == 3 || scn == 4");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11111);
      }
      v309.i32[0] = v324[1];
      v309.i32[1] = v17;
      sub_10029E6D4(a2, &v309, v7 & 7, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v66 = *(void *)(a2 + 8);
        long long v67 = *(_OWORD *)(v66 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v66;
        *(_OWORD *)&v313[16] = v67;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v66 + 32);
        uint64_t v68 = *(void *)(v66 + 56);
        *(void *)&v313[48] = *(void *)(v66 + 48);
        *(void *)&v313[56] = v68;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v68) {
          atomic_fetch_add((atomic_uint *volatile)(v68 + 20), 1u);
        }
        if (*(int *)(v66 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v66);
        }
        else
        {
          unint64_t v69 = *(uint64_t **)(v66 + 72);
          uint64_t v70 = v315;
          uint64_t *v315 = *v69;
          v70[1] = v69[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v232 = 0;
        v233 = v319;
        do
          v233[v232++] = 0;
        while (v232 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 != &v321)
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
      }
      unint64_t v234 = v315;
      if (*(int *)&v313[4] > 2)
      {
        v319 = v314;
        uint64_t v320 = v315;
        unint64_t v234 = &v316;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
      }
      else
      {
        uint64_t v321 = *v315;
        uint64_t v322 = v315[1];
      }
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v234 != &v316) {
        j__free(v234);
      }
      uint64_t v235 = *(void *)&v323[16];
      uint64_t v236 = v326;
      uint64_t v237 = *(void *)&v318[16];
      uint64_t v238 = v321;
      int v240 = *(_DWORD *)&v323[8];
      int v239 = *(_DWORD *)&v323[12];
      char v241 = sub_1002FFA74();
      sub_1002F8464(v235, v236, v237, v238, v239, v240, v16, v287, v241);
      goto LABEL_512;
    case 8u:
    case 9u:
      if (a3 == 9) {
        int v113 = 4;
      }
      else {
        int v113 = 3;
      }
      if (a4 >= 1) {
        int v114 = a4;
      }
      else {
        int v114 = v113;
      }
      if ((v114 - 3) > 1 || v19)
      {
        sub_10022F344(v313, "scn == 1 && (dcn == 3 || dcn == 4)");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11128);
      }
      v307.i32[0] = v324[1];
      v307.i32[1] = v17;
      sub_10029E6D4(a2, &v307, (v16 | (8 * v114)) - 8, -1, 0, 0);
      sub_1002FF97C(a2, -1, (uint64_t)v313);
      sub_100287094((uint64_t)v318, (uint64_t)v313);
      sub_1000094F4((uint64_t)v313);
      sub_1002F87A0(*(uint64_t *)&v323[16], v326, *(uint64_t *)&v318[16], v321, *(int *)&v323[12], *(int *)&v323[8], v7 & 7, v114);
      goto LABEL_512;
    case 0xCu:
    case 0xDu:
    case 0x10u:
    case 0x11u:
    case 0x16u:
    case 0x17u:
    case 0x1Au:
    case 0x1Bu:
      if ((v7 & 0xFF7) != 0x10)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v313, 36), "(scn == 3 || scn == 4) && depth == 0", 36);
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11089);
      }
      if (a3 <= 0x10 && ((1 << a3) & 0x13000) != 0)
      {
        int v22 = 6;
      }
      else if (a3 == 17)
      {
        int v22 = 6;
      }
      else
      {
        int v22 = 5;
      }
      v311.i32[0] = v324[1];
      v311.i32[1] = v17;
      sub_10029E6D4(a2, &v311, 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v132 = *(void *)(a2 + 8);
        long long v133 = *(_OWORD *)(v132 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v132;
        *(_OWORD *)&v313[16] = v133;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v132 + 32);
        uint64_t v134 = *(void *)(v132 + 56);
        *(void *)&v313[48] = *(void *)(v132 + 48);
        *(void *)&v313[56] = v134;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v134) {
          atomic_fetch_add((atomic_uint *volatile)(v134 + 20), 1u);
        }
        if (*(int *)(v132 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v132);
        }
        else
        {
          unint64_t v135 = *(uint64_t **)(v132 + 72);
          uint64x2_t v136 = v315;
          uint64_t *v315 = *v135;
          v136[1] = v135[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v137 = 0;
        uint64_t v138 = v319;
        do
          v138[v137++] = 0;
        while (v137 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 == &v321)
      {
        int8x16_t v139 = v315;
        if (*(int *)&v313[4] <= 2) {
          goto LABEL_280;
        }
      }
      else
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
        int8x16_t v139 = v315;
        if (*(int *)&v313[4] <= 2)
        {
LABEL_280:
          uint64_t v321 = *v139;
          uint64_t v322 = v139[1];
          goto LABEL_283;
        }
      }
      v319 = v314;
      uint64_t v320 = v139;
      int8x16_t v139 = &v316;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
LABEL_283:
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v139 != &v316) {
        j__free(v139);
      }
      uint64_t v140 = *(void *)&v323[16];
      uint64_t v141 = v326;
      uint64_t v142 = *(void *)&v318[16];
      uint64_t v143 = v321;
      int v145 = *(_DWORD *)&v323[8];
      int v144 = *(_DWORD *)&v323[12];
      int v146 = sub_1002FFA74();
      sub_1002F81EC(v140, v141, v142, v143, v144, v145, v287, v146, v22);
      goto LABEL_512;
    case 0xEu:
    case 0xFu:
    case 0x12u:
    case 0x13u:
    case 0x18u:
    case 0x19u:
    case 0x1Cu:
    case 0x1Du:
      if (a4 <= 0)
      {
        if (a3 <= 0x1C && ((1 << a3) & 0x100C0000) != 0)
        {
          a4 = 4;
        }
        else if (a3 == 29)
        {
          a4 = 4;
        }
        else
        {
          a4 = 3;
        }
      }
      if ((v7 & 7) != 0 || (a4 - 3) > 1 || v19 != 1)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v313, 48), "(dcn == 3 || dcn == 4) && scn == 2 && depth == 0", 48);
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11101);
      }
      if (a3 <= 0x12 && ((1 << a3) & 0x4C000) != 0)
      {
        int v262 = 6;
      }
      else if (a3 == 19)
      {
        int v262 = 6;
      }
      else
      {
        int v262 = 5;
      }
      v310.i32[0] = v324[1];
      v310.i32[1] = v17;
      sub_10029E6D4(a2, &v310, 8 * a4 - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v263 = *(void *)(a2 + 8);
        long long v264 = *(_OWORD *)(v263 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v263;
        *(_OWORD *)&v313[16] = v264;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v263 + 32);
        uint64_t v265 = *(void *)(v263 + 56);
        *(void *)&v313[48] = *(void *)(v263 + 48);
        *(void *)&v313[56] = v265;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v265) {
          atomic_fetch_add((atomic_uint *volatile)(v265 + 20), 1u);
        }
        if (*(int *)(v263 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v263);
        }
        else
        {
          unint64_t v266 = *(uint64_t **)(v263 + 72);
          uint64_t v267 = v315;
          uint64_t *v315 = *v266;
          v267[1] = v266[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v268 = 0;
        v269 = v319;
        do
          v269[v268++] = 0;
        while (v268 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 == &v321)
      {
        unint64_t v270 = v315;
        if (*(int *)&v313[4] <= 2) {
          goto LABEL_506;
        }
      }
      else
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
        unint64_t v270 = v315;
        if (*(int *)&v313[4] <= 2)
        {
LABEL_506:
          uint64_t v321 = *v270;
          uint64_t v322 = v270[1];
          goto LABEL_509;
        }
      }
      v319 = v314;
      uint64_t v320 = v270;
      unint64_t v270 = &v316;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
LABEL_509:
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v270 != &v316) {
        j__free(v270);
      }
      uint64_t v271 = *(void *)&v323[16];
      uint64_t v272 = v326;
      uint64_t v273 = *(void *)&v318[16];
      uint64_t v274 = v321;
      int v276 = *(_DWORD *)&v323[8];
      int v275 = *(_DWORD *)&v323[12];
      int v277 = sub_1002FFA74();
      sub_1002F8328(v271, v272, v273, v274, v275, v276, a4, v277, v262);
      goto LABEL_512;
    case 0x14u:
    case 0x1Eu:
      if (v19 | v16)
      {
        sub_10022F344(v313, "scn == 1 && depth == 0");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11135);
      }
      if (a3 == 20) {
        int v115 = 6;
      }
      else {
        int v115 = 5;
      }
      v306.i32[0] = v324[1];
      v306.i32[1] = v17;
      sub_10029E6D4(a2, &v306, 8, -1, 0, 0);
      sub_1002FF97C(a2, -1, (uint64_t)v313);
      sub_100287094((uint64_t)v318, (uint64_t)v313);
      sub_1000094F4((uint64_t)v313);
      sub_1002F8AA4(*(uint64_t *)&v323[16], v326, *(uint64_t *)&v318[16], v321, *(int *)&v323[12], *(int *)&v323[8], v115);
      goto LABEL_512;
    case 0x15u:
    case 0x1Fu:
      if ((v7 & 7) != 0 || v19 != 1)
      {
        sub_10022F344(v313, "scn == 2 && depth == 0");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11119);
      }
      if (a3 == 21) {
        int v116 = 6;
      }
      else {
        int v116 = 5;
      }
      v308.i32[0] = v324[1];
      v308.i32[1] = v17;
      sub_10029E6D4(a2, &v308, 0, -1, 0, 0);
      sub_1002FF97C(a2, -1, (uint64_t)v313);
      sub_100287094((uint64_t)v318, (uint64_t)v313);
      sub_1000094F4((uint64_t)v313);
      sub_1002F8974(*(uint64_t *)&v323[16], v326, *(uint64_t *)&v318[16], v321, *(int *)&v323[12], *(int *)&v323[8], v116);
      goto LABEL_512;
    case 0x20u:
    case 0x21u:
      if ((v7 & 0xFF0) != 0x10)
      {
        sub_10022F344(v313, "scn == 3 || scn == 4");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11162);
      }
      v303.i32[0] = v324[1];
      v303.i32[1] = v17;
      sub_10029E6D4(a2, &v303, v16 | 0x10, -1, 0, 0);
      sub_1002FF97C(a2, -1, (uint64_t)v313);
      sub_100287094((uint64_t)v318, (uint64_t)v313);
      sub_1000094F4((uint64_t)v313);
      uint64_t v117 = *(void *)&v323[16];
      uint64_t v118 = v326;
      uint64_t v119 = *(void *)&v318[16];
      uint64_t v120 = v321;
      int v122 = *(_DWORD *)&v323[8];
      int v121 = *(_DWORD *)&v323[12];
      char v123 = sub_1002FFA74();
      sub_1002F9274(v117, v118, v119, v120, v121, v122, v16, v287, v123);
      goto LABEL_512;
    case 0x22u:
    case 0x23u:
      if (a4 < 1) {
        a4 = 3;
      }
      if ((a4 - 3) > 1 || v19 != 2)
      {
        sub_10022F344(v313, "scn == 3 && (dcn == 3 || dcn == 4)");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11170);
      }
      v302.i32[0] = v324[1];
      v302.i32[1] = v17;
      int v124 = v7 & 7;
      sub_10029E6D4(a2, &v302, (v16 | (8 * a4)) - 8, -1, 0, 0);
      sub_1002FF97C(a2, -1, (uint64_t)v313);
      sub_100287094((uint64_t)v318, (uint64_t)v313);
      sub_1000094F4((uint64_t)v313);
      uint64_t v125 = *(void *)&v323[16];
      uint64_t v126 = v326;
      uint64_t v127 = *(void *)&v318[16];
      uint64_t v128 = v321;
      int v130 = *(_DWORD *)&v323[8];
      int v129 = *(_DWORD *)&v323[12];
      char v131 = sub_1002FFA74();
      sub_1002F9698(v125, v126, v127, v128, v129, v130, v124, a4, v131);
      goto LABEL_512;
    case 0x24u:
    case 0x25u:
    case 0x52u:
    case 0x53u:
      if ((v7 & 0xFF0) != 0x10)
      {
        sub_10022F344(v313, "scn == 3 || scn == 4");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11144);
      }
      v305.i32[0] = v324[1];
      v305.i32[1] = v17;
      sub_10029E6D4(a2, &v305, v16 | 0x10, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v71 = *(void *)(a2 + 8);
        long long v72 = *(_OWORD *)(v71 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v71;
        *(_OWORD *)&v313[16] = v72;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v71 + 32);
        uint64_t v73 = *(void *)(v71 + 56);
        *(void *)&v313[48] = *(void *)(v71 + 48);
        *(void *)&v313[56] = v73;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v73) {
          atomic_fetch_add((atomic_uint *volatile)(v73 + 20), 1u);
        }
        if (*(int *)(v71 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v71);
        }
        else
        {
          uint64_t v74 = *(uint64_t **)(v71 + 72);
          uint64_t v75 = v315;
          uint64_t *v315 = *v74;
          v75[1] = v74[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v242 = 0;
        unint64_t v243 = v319;
        do
          v243[v242++] = 0;
        while (v242 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 != &v321)
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
      }
      uint64_t v244 = v315;
      if (*(int *)&v313[4] > 2)
      {
        v319 = v314;
        uint64_t v320 = v315;
        uint64_t v244 = &v316;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
      }
      else
      {
        uint64_t v321 = *v315;
        uint64_t v322 = v315[1];
      }
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v244 != &v316) {
        j__free(v244);
      }
      uint64_t v245 = *(void *)&v323[16];
      uint64_t v246 = v326;
      uint64_t v247 = *(void *)&v318[16];
      uint64_t v248 = v321;
      int v250 = *(_DWORD *)&v323[8];
      int v249 = *(_DWORD *)&v323[12];
      char v251 = sub_1002FFA74();
      sub_1002F8BAC(v245, v246, v247, v248, v249, v250, v16, v287, v251, (a3 & 0xFFFFFFFE) == 36);
      goto LABEL_512;
    case 0x26u:
    case 0x27u:
    case 0x54u:
    case 0x55u:
      if (a4 < 1) {
        a4 = 3;
      }
      if ((a4 - 3) > 1 || v19 != 2)
      {
        sub_10022F344(v313, "scn == 3 && (dcn == 3 || dcn == 4)");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11154);
      }
      v304.i32[0] = v324[1];
      v304.i32[1] = v17;
      sub_10029E6D4(a2, &v304, (v16 | (8 * a4)) - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v76 = *(void *)(a2 + 8);
        long long v77 = *(_OWORD *)(v76 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v76;
        *(_OWORD *)&v313[16] = v77;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v76 + 32);
        uint64_t v78 = *(void *)(v76 + 56);
        *(void *)&v313[48] = *(void *)(v76 + 48);
        *(void *)&v313[56] = v78;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v78) {
          atomic_fetch_add((atomic_uint *volatile)(v78 + 20), 1u);
        }
        if (*(int *)(v76 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v76);
        }
        else
        {
          uint64_t v79 = *(uint64_t **)(v76 + 72);
          uint64_t v80 = v315;
          uint64_t *v315 = *v79;
          v80[1] = v79[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v252 = 0;
        unint64_t v253 = v319;
        do
          v253[v252++] = 0;
        while (v252 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 != &v321)
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
      }
      v254 = v315;
      if (*(int *)&v313[4] > 2)
      {
        v319 = v314;
        uint64_t v320 = v315;
        v254 = &v316;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
      }
      else
      {
        uint64_t v321 = *v315;
        uint64_t v322 = v315[1];
      }
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v254 != &v316) {
        j__free(v254);
      }
      uint64_t v255 = *(void *)&v323[16];
      uint64_t v256 = v326;
      uint64_t v257 = *(void *)&v318[16];
      uint64_t v258 = v321;
      int v260 = *(_DWORD *)&v323[8];
      int v259 = *(_DWORD *)&v323[12];
      char v261 = sub_1002FFA74();
      sub_1002F8F24(v255, v256, v257, v258, v259, v260, v16, a4, v261, (a3 & 0xFFFFFFFE) == 38);
      goto LABEL_512;
    case 0x28u:
    case 0x29u:
    case 0x34u:
    case 0x35u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
      if ((v7 & 0xFF0) != 0x10 || (v7 & 7) != 0 && v16 != 5)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v313, 52), "(scn == 3 || scn == 4) && (depth == 0 || depth == 5)", 52);
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11178);
      }
      v301.i32[0] = v324[1];
      v301.i32[1] = v17;
      sub_10029E6D4(a2, &v301, v16 | 0x10, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v23 = *(void *)(a2 + 8);
        long long v24 = *(_OWORD *)(v23 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v23;
        *(_OWORD *)&v313[16] = v24;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v23 + 32);
        uint64_t v25 = *(void *)(v23 + 56);
        *(void *)&v313[48] = *(void *)(v23 + 48);
        *(void *)&v313[56] = v25;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v25) {
          atomic_fetch_add((atomic_uint *volatile)(v25 + 20), 1u);
        }
        if (*(int *)(v23 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v23);
        }
        else
        {
          uint64_t v26 = *(uint64_t **)(v23 + 72);
          uint64_t v27 = v315;
          uint64_t *v315 = *v26;
          v27[1] = v26[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v147 = 0;
        int v148 = v319;
        do
          v148[v147++] = 0;
        while (v147 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 == &v321)
      {
        int v149 = v315;
        if (*(int *)&v313[4] <= 2) {
          goto LABEL_295;
        }
      }
      else
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
        int v149 = v315;
        if (*(int *)&v313[4] <= 2)
        {
LABEL_295:
          uint64_t v321 = *v149;
          uint64_t v322 = v149[1];
          goto LABEL_298;
        }
      }
      v319 = v314;
      uint64_t v320 = v149;
      int v149 = &v316;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
LABEL_298:
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v149 != &v316) {
        j__free(v149);
      }
      uint64_t v150 = *(void *)&v323[16];
      uint64_t v151 = v326;
      uint64_t v152 = *(void *)&v318[16];
      uint64_t v153 = v321;
      int v155 = *(_DWORD *)&v323[8];
      __int32 v154 = *(_DWORD *)&v323[12];
      char v156 = sub_1002FFA74();
      sub_1002F9A94(v150, v151, v152, v153, v154, v155, v16, v287, v156, a3 - 66 < 8, (a3 - 40 < 0x20) & (0xCC00C003 >> (a3 - 40)));
      goto LABEL_512;
    case 0x2Cu:
    case 0x2Du:
    case 0x32u:
    case 0x33u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
      if ((v7 & 0xFF0) != 0x10 || (v7 & 7) != 0 && v16 != 5)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v313, 52), "(scn == 3 || scn == 4) && (depth == 0 || depth == 5)", 52);
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11197);
      }
      v299.i32[0] = v324[1];
      v299.i32[1] = v17;
      sub_10029E6D4(a2, &v299, v16 | 0x10, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v28 = *(void *)(a2 + 8);
        long long v29 = *(_OWORD *)(v28 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v28;
        *(_OWORD *)&v313[16] = v29;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v28 + 32);
        uint64_t v30 = *(void *)(v28 + 56);
        *(void *)&v313[48] = *(void *)(v28 + 48);
        *(void *)&v313[56] = v30;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v30) {
          atomic_fetch_add((atomic_uint *volatile)(v30 + 20), 1u);
        }
        if (*(int *)(v28 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v28);
        }
        else
        {
          int v31 = *(uint64_t **)(v28 + 72);
          int v32 = v315;
          uint64_t *v315 = *v31;
          v32[1] = v31[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v157 = 0;
        unint64_t v158 = v319;
        do
          v158[v157++] = 0;
        while (v157 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 == &v321)
      {
        int v159 = v315;
        if (*(int *)&v313[4] <= 2) {
          goto LABEL_310;
        }
      }
      else
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
        int v159 = v315;
        if (*(int *)&v313[4] <= 2)
        {
LABEL_310:
          uint64_t v321 = *v159;
          uint64_t v322 = v159[1];
          goto LABEL_313;
        }
      }
      v319 = v314;
      uint64_t v320 = v159;
      int v159 = &v316;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
LABEL_313:
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v159 != &v316) {
        j__free(v159);
      }
      uint64_t v160 = *(void *)&v323[16];
      uint64_t v161 = v326;
      uint64_t v162 = *(void *)&v318[16];
      uint64_t v163 = v321;
      int v165 = *(_DWORD *)&v323[8];
      int v164 = *(_DWORD *)&v323[12];
      char v166 = sub_1002FFA74();
      sub_1002FA1AC(v160, v161, v162, v163, v164, v165, v16, v287, v166, (a3 - 44 < 0x24) & (0xCC0003003uLL >> (a3 - 44)), (a3 < 0x3C) & (0xF0C300000000000uLL >> a3));
      goto LABEL_512;
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x3Eu:
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
      *(_DWORD *)v313 = 16842752;
      *(void *)&v313[8] = v323;
      *(void *)&v313[16] = 0;
      sub_10031CFAC((uint64_t)v313, a2, a3, a4);
      goto LABEL_512;
    case 0x36u:
    case 0x37u:
    case 0x3Cu:
    case 0x3Du:
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x49u:
      int v282 = v7 & 7;
      if (a4 >= 1) {
        unsigned int v33 = a4;
      }
      else {
        unsigned int v33 = 3;
      }
      if (v33 - 3 > 1 || v19 != 2 || (v7 & 7) != 0 && v282 != 5)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v313, 64), "scn == 3 && (dcn == 3 || dcn == 4) && (depth == 0 || depth == 5)", 64);
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11188);
      }
      v300.i32[0] = v324[1];
      v300.i32[1] = v17;
      sub_10029E6D4(a2, &v300, (v282 | (8 * v33)) - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v34 = *(void *)(a2 + 8);
        long long v35 = *(_OWORD *)(v34 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v34;
        *(_OWORD *)&v313[16] = v35;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v34 + 32);
        uint64_t v36 = *(void *)(v34 + 56);
        *(void *)&v313[48] = *(void *)(v34 + 48);
        *(void *)&v313[56] = v36;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v36) {
          atomic_fetch_add((atomic_uint *volatile)(v36 + 20), 1u);
        }
        if (*(int *)(v34 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v34);
        }
        else
        {
          uint64_t v37 = *(uint64_t **)(v34 + 72);
          int v38 = v315;
          uint64_t *v315 = *v37;
          v38[1] = v37[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v167 = 0;
        int32x4_t v168 = v319;
        do
          v168[v167++] = 0;
        while (v167 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 == &v321)
      {
        long long v169 = v315;
        if (*(int *)&v313[4] <= 2) {
          goto LABEL_325;
        }
      }
      else
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
        long long v169 = v315;
        if (*(int *)&v313[4] <= 2)
        {
LABEL_325:
          uint64_t v321 = *v169;
          uint64_t v322 = v169[1];
          goto LABEL_328;
        }
      }
      v319 = v314;
      uint64_t v320 = v169;
      long long v169 = &v316;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
LABEL_328:
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v169 != &v316) {
        j__free(v169);
      }
      uint64_t v170 = *(void *)&v323[16];
      uint64_t v171 = v326;
      uint64_t v172 = *(void *)&v318[16];
      uint64_t v173 = v321;
      int v175 = *(_DWORD *)&v323[8];
      __int32 v174 = *(_DWORD *)&v323[12];
      char v176 = sub_1002FFA74();
      sub_1002F9E50(v170, v171, v172, v173, v174, v175, v282, v33, v176, a3 - 66 < 8, (a3 - 40 < 0x20) & (0xCC00C003 >> (a3 - 40)));
      goto LABEL_512;
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x4Eu:
    case 0x4Fu:
    case 0x50u:
    case 0x51u:
      if (a4 >= 1) {
        int v39 = a4;
      }
      else {
        int v39 = 3;
      }
      if ((v39 - 3) > 1 || v19 != 2 || (v7 & 7) != 0 && v16 != 5)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v313, 64), "scn == 3 && (dcn == 3 || dcn == 4) && (depth == 0 || depth == 5)", 64);
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11207);
      }
      v298.i32[0] = v324[1];
      v298.i32[1] = v17;
      sub_10029E6D4(a2, &v298, (v16 | (8 * v39)) - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v40 = *(void *)(a2 + 8);
        long long v41 = *(_OWORD *)(v40 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v40;
        *(_OWORD *)&v313[16] = v41;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v40 + 32);
        uint64_t v42 = *(void *)(v40 + 56);
        *(void *)&v313[48] = *(void *)(v40 + 48);
        *(void *)&v313[56] = v42;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v42) {
          atomic_fetch_add((atomic_uint *volatile)(v42 + 20), 1u);
        }
        if (*(int *)(v40 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v40);
        }
        else
        {
          BOOL v43 = *(uint64_t **)(v40 + 72);
          BOOL v44 = v315;
          uint64_t *v315 = *v43;
          v44[1] = v43[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v177 = 0;
        int v178 = v319;
        do
          v178[v177++] = 0;
        while (v177 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 == &v321)
      {
        int v179 = v315;
        int v286 = v39;
        if (*(int *)&v313[4] <= 2) {
          goto LABEL_340;
        }
      }
      else
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
        int v179 = v315;
        int v286 = v39;
        if (*(int *)&v313[4] <= 2)
        {
LABEL_340:
          uint64_t v321 = *v179;
          uint64_t v322 = v179[1];
          goto LABEL_343;
        }
      }
      v319 = v314;
      uint64_t v320 = v179;
      int v179 = &v316;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
LABEL_343:
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v179 != &v316) {
        j__free(v179);
      }
      uint64_t v180 = *(void *)&v323[16];
      uint64_t v181 = v326;
      uint64_t v182 = *(void *)&v318[16];
      uint64_t v183 = v321;
      int v185 = *(_DWORD *)&v323[8];
      int v184 = *(_DWORD *)&v323[12];
      char v186 = sub_1002FFA74();
      sub_1002FA4E0(v180, v181, v182, v183, v184, v185, v16, v286, v186, (a3 - 44 < 0x24) & (0xCC0003003uLL >> (a3 - 44)), (a3 < 0x3C) & (0xF0C300000000000uLL >> a3));
      goto LABEL_512;
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
      if (a3 - 94 >= 4) {
        int v45 = 3;
      }
      else {
        int v45 = 4;
      }
      if (a4 < 1) {
        a4 = v45;
      }
      if (a3 - 92 <= 5 && (BOOL v46 = 1, ((1 << (a3 - 92)) & 0x23) != 0))
      {
        if ((a4 - 3) < 2) {
          goto LABEL_212;
        }
      }
      else
      {
        BOOL v46 = a3 == 96;
        if ((a4 - 3) < 2)
        {
LABEL_212:
          if ((v18 & 1) != 0 || (v17 % 3) | v16)
          {
            *(void *)v313 = 0;
            *(void *)&v313[8] = 0;
            qmemcpy((void *)sub_1002D19D8(v313, 53), "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == 0", 53);
            sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11229);
          }
          int v285 = v46;
          v297.i32[0] = v324[1];
          v297.i32[1] = 2 * v17 / 3;
          int v288 = a4;
          sub_10029E6D4(a2, &v297, (v16 | (8 * a4)) - 8, -1, 0, 0);
          if (sub_10029A230((_DWORD *)a2) == 0x10000)
          {
            uint64_t v108 = *(void *)(a2 + 8);
            long long v109 = *(_OWORD *)(v108 + 16);
            *(_OWORD *)v313 = *(_OWORD *)v108;
            *(_OWORD *)&v313[16] = v109;
            *(_OWORD *)&v313[32] = *(_OWORD *)(v108 + 32);
            uint64_t v110 = *(void *)(v108 + 56);
            *(void *)&v313[48] = *(void *)(v108 + 48);
            *(void *)&v313[56] = v110;
            uint64_t v314 = (int *)&v313[8];
            v315 = &v316;
            uint64_t v316 = 0;
            uint64_t v317 = 0;
            if (v110) {
              atomic_fetch_add((atomic_uint *volatile)(v110 + 20), 1u);
            }
            if (*(int *)(v108 + 4) > 2)
            {
              *(_DWORD *)&v313[4] = 0;
              sub_1002931A8((uint64_t)v313, v108);
            }
            else
            {
              uint64_t v111 = *(uint64_t **)(v108 + 72);
              uint64_t v112 = v315;
              uint64_t *v315 = *v111;
              v112[1] = v111[1];
            }
          }
          else
          {
            sub_100299554(a2, -1, (uint64_t)v313);
          }
          if (*(void *)&v318[56]
            && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
          {
            sub_1002932F4((uint64_t)v318);
          }
          if (*(int *)&v318[4] >= 1)
          {
            uint64_t v198 = 0;
            int v199 = v319;
            do
              v199[v198++] = 0;
            while (v198 < *(int *)&v318[4]);
          }
          *(_OWORD *)int v318 = *(_OWORD *)v313;
          *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
          *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
          *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
          if (v320 == &v321)
          {
            int v200 = v315;
            if (*(int *)&v313[4] <= 2) {
              goto LABEL_370;
            }
          }
          else
          {
            j__free(v320);
            v319 = (int *)&v318[8];
            uint64_t v320 = &v321;
            int v200 = v315;
            if (*(int *)&v313[4] <= 2)
            {
LABEL_370:
              uint64_t v321 = *v200;
              uint64_t v322 = v200[1];
LABEL_373:
              *(_DWORD *)v313 = 1124007936;
              memset(&v313[4], 0, 60);
              if (v200 != &v316) {
                j__free(v200);
              }
              uint64_t v201 = *(void *)&v323[16];
              uint64_t v202 = v326;
              uint64_t v203 = *(void *)&v318[16];
              uint64_t v204 = v321;
              int v205 = *(_DWORD *)&v318[12];
              uint64_t v206 = *(int *)&v318[8];
              sub_1002D6AE8(v313, &off_100498038);
              char v207 = sub_1002FFA74();
              sub_1002FA8D4(v201, v201 + v202 * v206, v202, v203, v204, v205, v206, v288, v207, v285);
              if (*(_DWORD *)&v313[8]) {
                sub_1002D6888(v313);
              }
              goto LABEL_512;
            }
          }
          v319 = v314;
          uint64_t v320 = v200;
          int v200 = &v316;
          uint64_t v314 = (int *)&v313[8];
          v315 = &v316;
          goto LABEL_373;
        }
      }
      *(void *)v313 = 0;
      *(void *)&v313[8] = 0;
      uint64_t v107 = sub_1002D19D8(v313, 20);
      *(_DWORD *)(v107 + 16) = 874528061;
      *(_OWORD *)uint64_t v107 = *(_OWORD *)"dcn == 3 || dcn == 4";
      sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11228);
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
      if (a3 - 102 >= 4) {
        int v20 = 3;
      }
      else {
        int v20 = 4;
      }
      if (a4 < 1) {
        a4 = v20;
      }
      if (a3 - 98 <= 5 && (BOOL v21 = 1, ((1 << (a3 - 98)) & 0x23) != 0))
      {
        if ((a4 - 3) < 2) {
          goto LABEL_201;
        }
      }
      else
      {
        BOOL v21 = a3 == 102;
        if ((a4 - 3) < 2)
        {
LABEL_201:
          if ((v18 & 1) != 0 || (v17 % 3) | v16)
          {
            *(void *)v313 = 0;
            *(void *)&v313[8] = 0;
            qmemcpy((void *)sub_1002D19D8(v313, 53), "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == 0", 53);
            sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11242);
          }
          v296.i32[0] = v324[1];
          v296.i32[1] = 2 * v17 / 3;
          sub_10029E6D4(a2, &v296, (v16 | (8 * a4)) - 8, -1, 0, 0);
          if (sub_10029A230((_DWORD *)a2) == 0x10000)
          {
            uint64_t v102 = *(void *)(a2 + 8);
            long long v103 = *(_OWORD *)(v102 + 16);
            *(_OWORD *)v313 = *(_OWORD *)v102;
            *(_OWORD *)&v313[16] = v103;
            *(_OWORD *)&v313[32] = *(_OWORD *)(v102 + 32);
            uint64_t v104 = *(void *)(v102 + 56);
            *(void *)&v313[48] = *(void *)(v102 + 48);
            *(void *)&v313[56] = v104;
            uint64_t v314 = (int *)&v313[8];
            v315 = &v316;
            uint64_t v316 = 0;
            uint64_t v317 = 0;
            if (v104) {
              atomic_fetch_add((atomic_uint *volatile)(v104 + 20), 1u);
            }
            if (*(int *)(v102 + 4) > 2)
            {
              *(_DWORD *)&v313[4] = 0;
              sub_1002931A8((uint64_t)v313, v102);
            }
            else
            {
              uint64_t v105 = *(uint64_t **)(v102 + 72);
              uint64_t v106 = v315;
              uint64_t *v315 = *v105;
              v106[1] = v105[1];
            }
          }
          else
          {
            sub_100299554(a2, -1, (uint64_t)v313);
          }
          if (*(void *)&v318[56]
            && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
          {
            sub_1002932F4((uint64_t)v318);
          }
          if (*(int *)&v318[4] >= 1)
          {
            uint64_t v187 = 0;
            int v188 = v319;
            do
              v188[v187++] = 0;
            while (v187 < *(int *)&v318[4]);
          }
          *(_OWORD *)int v318 = *(_OWORD *)v313;
          *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
          *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
          *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
          if (v320 == &v321)
          {
            unint64_t v189 = v315;
            if (*(int *)&v313[4] <= 2) {
              goto LABEL_355;
            }
          }
          else
          {
            j__free(v320);
            v319 = (int *)&v318[8];
            uint64_t v320 = &v321;
            unint64_t v189 = v315;
            if (*(int *)&v313[4] <= 2)
            {
LABEL_355:
              uint64_t v321 = *v189;
              uint64_t v322 = v189[1];
LABEL_358:
              int v190 = a4;
              *(_DWORD *)v313 = 1124007936;
              memset(&v313[4], 0, 60);
              if (v189 != &v316) {
                j__free(v189);
              }
              uint64_t v191 = *(void *)&v323[16];
              uint64_t v192 = v326;
              uint64_t v193 = *(void *)&v318[16];
              uint64_t v194 = v321;
              int v195 = *(_DWORD *)&v318[12];
              int v196 = *(_DWORD *)&v318[8];
              int v197 = sub_1002FFA74();
              sub_1002FAF48(v191, v192, v193, v194, v195, v196, v190, v197, v21);
              goto LABEL_512;
            }
          }
          v319 = v314;
          uint64_t v320 = v189;
          unint64_t v189 = &v316;
          uint64_t v314 = (int *)&v313[8];
          v315 = &v316;
          goto LABEL_358;
        }
      }
      *(void *)v313 = 0;
      *(void *)&v313[8] = 0;
      uint64_t v101 = sub_1002D19D8(v313, 20);
      *(_DWORD *)(v101 + 16) = 874528061;
      *(_OWORD *)uint64_t v101 = *(_OWORD *)"dcn == 3 || dcn == 4";
      sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11241);
    case 0x6Au:
      if (a4 <= 1) {
        int v228 = 1;
      }
      else {
        int v228 = a4;
      }
      if (a4 >= 2)
      {
        sub_10022F344(v313, "dcn == 1");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11253);
      }
      if ((v18 & 1) != 0 || (v17 % 3) | v16)
      {
        sub_10022F344(v313, "sz.width % 2 == 0 && sz.height % 3 == 0 && depth == 0");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11254);
      }
      uint64_t v229 = (2 * v17 / 3);
      v295.i32[0] = v324[1];
      v295.i32[1] = v229;
      sub_10029E6D4(a2, &v295, (v16 | (8 * v228)) - 8, -1, 0, 0);
      sub_1002FF97C(a2, -1, (uint64_t)v313);
      sub_100287094((uint64_t)v318, (uint64_t)v313);
      sub_1000094F4((uint64_t)v313);
      v294[0] = v229 << 32;
      v330[0] = 0x7FFFFFFF80000000;
      sub_100293AD0((uint64_t)v313, v323, (int *)v294, v330);
      LODWORD(v294[0]) = 33619968;
      v294[1] = v318;
      v294[2] = 0;
      sub_10025401C((uint64_t)v313, (uint64_t)v294);
      sub_1000094F4((uint64_t)v313);
      goto LABEL_512;
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Fu:
    case 0x70u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
      if (a4 <= 0)
      {
        if (a3 - 111 > 0xB) {
          a4 = 3;
        }
        else {
          a4 = dword_100408560[a3 - 111];
        }
      }
      if (a3 - 107 <= 4 && (BOOL v81 = 1, ((1 << (a3 - 107)) & 0x13) != 0))
      {
        char v82 = a3 - 117;
        if (a3 - 117 > 4) {
          goto LABEL_173;
        }
      }
      else
      {
        BOOL v81 = a3 == 112;
        char v82 = a3 - 117;
        if (a3 - 117 > 4) {
          goto LABEL_173;
        }
      }
      BOOL v83 = 1;
      if (((1 << v82) & 0x13) != 0)
      {
        if ((a4 - 3) < 2) {
          goto LABEL_175;
        }
        goto LABEL_174;
      }
LABEL_173:
      BOOL v83 = a3 == 122;
      if ((a4 - 3) < 2)
      {
LABEL_175:
        if (v16 || v287 != 2)
        {
          *(void *)v313 = 0;
          *(void *)&v313[8] = 0;
          qmemcpy((void *)sub_1002D19D8(v313, 22), "scn == 2 && depth == 0", 22);
          sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11291);
        }
        v292.i32[0] = v324[1];
        v292.i32[1] = v17;
        sub_10029E6D4(a2, &v292, 8 * a4 - 8, -1, 0, 0);
        if (sub_10029A230((_DWORD *)a2) == 0x10000)
        {
          uint64_t v85 = *(void *)(a2 + 8);
          long long v86 = *(_OWORD *)(v85 + 16);
          *(_OWORD *)v313 = *(_OWORD *)v85;
          *(_OWORD *)&v313[16] = v86;
          *(_OWORD *)&v313[32] = *(_OWORD *)(v85 + 32);
          uint64_t v87 = *(void *)(v85 + 56);
          *(void *)&v313[48] = *(void *)(v85 + 48);
          *(void *)&v313[56] = v87;
          uint64_t v314 = (int *)&v313[8];
          v315 = &v316;
          uint64_t v316 = 0;
          uint64_t v317 = 0;
          if (v87) {
            atomic_fetch_add((atomic_uint *volatile)(v87 + 20), 1u);
          }
          if (*(int *)(v85 + 4) > 2)
          {
            *(_DWORD *)&v313[4] = 0;
            sub_1002931A8((uint64_t)v313, v85);
          }
          else
          {
            uint64_t v88 = *(uint64_t **)(v85 + 72);
            uint64_t v89 = v315;
            uint64_t *v315 = *v88;
            v89[1] = v88[1];
          }
        }
        else
        {
          sub_100299554(a2, -1, (uint64_t)v313);
        }
        if (*(void *)&v318[56]
          && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
        {
          sub_1002932F4((uint64_t)v318);
        }
        if (*(int *)&v318[4] >= 1)
        {
          uint64_t v90 = 0;
          uint64_t v91 = v319;
          do
            v91[v90++] = 0;
          while (v90 < *(int *)&v318[4]);
        }
        *(_OWORD *)int v318 = *(_OWORD *)v313;
        *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
        *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
        *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
        if (v320 == &v321)
        {
          uint64_t v92 = v315;
          int v284 = a4;
          if (*(int *)&v313[4] <= 2) {
            goto LABEL_193;
          }
        }
        else
        {
          j__free(v320);
          v319 = (int *)&v318[8];
          uint64_t v320 = &v321;
          uint64_t v92 = v315;
          int v284 = a4;
          if (*(int *)&v313[4] <= 2)
          {
LABEL_193:
            uint64_t v321 = *v92;
            uint64_t v322 = v92[1];
LABEL_196:
            int v93 = v83;
            *(_DWORD *)v313 = 1124007936;
            memset(&v313[4], 0, 60);
            if (v92 != &v316) {
              j__free(v92);
            }
            uint64_t v94 = *(void *)&v323[16];
            uint64_t v95 = v326;
            uint64_t v96 = *(void *)&v318[16];
            uint64_t v97 = v321;
            int v99 = *(_DWORD *)&v323[8];
            int v98 = *(_DWORD *)&v323[12];
            int v100 = sub_1002FFA74();
            sub_1002FB4A4(v94, v95, v96, v97, v98, v99, v284, v100, v93, v81);
            goto LABEL_512;
          }
        }
        v319 = v314;
        uint64_t v320 = v92;
        uint64_t v92 = &v316;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        goto LABEL_196;
      }
LABEL_174:
      *(void *)v313 = 0;
      *(void *)&v313[8] = 0;
      uint64_t v84 = sub_1002D19D8(v313, 20);
      *(_DWORD *)(v84 + 16) = 874528061;
      *(_OWORD *)uint64_t v84 = *(_OWORD *)"dcn == 3 || dcn == 4";
      sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11290);
    case 0x7Bu:
    case 0x7Cu:
      if (a4 >= 2)
      {
        sub_10022F344(v313, "dcn == 1");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11301);
      }
      if ((v7 & 7) != 0 || v19 != 1)
      {
        sub_10022F344(v313, "scn == 2 && depth == 0");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11302);
      }
      sub_100292B00((uint64_t)v323);
      sub_10023585C(a1, a2, a3 == 123);
      goto LABEL_512;
    case 0x7Du:
      if (a4 >= 1) {
        int v230 = a4;
      }
      else {
        int v230 = 4;
      }
      if ((v7 & 7) != 0 || v230 != 4 || v19 != 3)
      {
        sub_10022F344(v313, "scn == 4 && dcn == 4 && depth == 0");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11310);
      }
      v291.i32[0] = v324[1];
      v291.i32[1] = v17;
      sub_10029E6D4(a2, &v291, 24, -1, 0, 0);
      sub_1002FF97C(a2, -1, (uint64_t)v313);
      sub_100287094((uint64_t)v318, (uint64_t)v313);
      sub_1000094F4((uint64_t)v313);
      sub_1002FBBEC(*(uint64_t *)&v323[16], v326, *(uint64_t *)&v318[16], v321, *(int *)&v323[12], *(int *)&v323[8]);
      goto LABEL_512;
    case 0x7Eu:
      if (a4 >= 1) {
        int v231 = a4;
      }
      else {
        int v231 = 4;
      }
      if ((v7 & 7) != 0 || v231 != 4 || v19 != 3)
      {
        sub_10022F344(v313, "scn == 4 && dcn == 4 && depth == 0");
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11317);
      }
      v290.i32[0] = v324[1];
      v290.i32[1] = v17;
      sub_10029E6D4(a2, &v290, 24, -1, 0, 0);
      sub_1002FF97C(a2, -1, (uint64_t)v313);
      sub_100287094((uint64_t)v318, (uint64_t)v313);
      sub_1000094F4((uint64_t)v313);
      sub_1002FBCD8(*(uint64_t *)&v323[16], v326, *(uint64_t *)&v318[16], v321, *(int *)&v323[12], *(int *)&v323[8]);
      goto LABEL_512;
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
      if (a4 <= 1) {
        int v47 = 1;
      }
      else {
        int v47 = a4;
      }
      if (a3 - 127 < 4) {
        int v48 = 1;
      }
      else {
        int v48 = 2;
      }
      int v283 = v48;
      if ((v7 & 0xFF7) != 0x10)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v313, 36), "(scn == 3 || scn == 4) && depth == 0", 36);
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11273);
      }
      if (a4 >= 2)
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        *(void *)sub_1002D19D8(v313, 8) = 0x31203D3D206E6364;
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11274);
      }
      if ((v18 | v17))
      {
        *(void *)v313 = 0;
        *(void *)&v313[8] = 0;
        qmemcpy((void *)sub_1002D19D8(v313, 39), "sz.width % 2 == 0 && sz.height % 2 == 0", 39);
        sub_1002D2278(-215, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11275);
      }
      if (v17 >= 0) {
        int v49 = *v324;
      }
      else {
        int v49 = v17 + 1;
      }
      v293.i32[0] = v324[1];
      v293.i32[1] = (v49 & 0xFFFFFFFE) + (v49 >> 1);
      sub_10029E6D4(a2, &v293, (v16 | (8 * v47)) - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v50 = *(void *)(a2 + 8);
        long long v51 = *(_OWORD *)(v50 + 16);
        *(_OWORD *)v313 = *(_OWORD *)v50;
        *(_OWORD *)&v313[16] = v51;
        *(_OWORD *)&v313[32] = *(_OWORD *)(v50 + 32);
        uint64_t v52 = *(void *)(v50 + 56);
        *(void *)&v313[48] = *(void *)(v50 + 48);
        *(void *)&v313[56] = v52;
        uint64_t v314 = (int *)&v313[8];
        v315 = &v316;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        if (v52) {
          atomic_fetch_add((atomic_uint *volatile)(v52 + 20), 1u);
        }
        if (*(int *)(v50 + 4) > 2)
        {
          *(_DWORD *)&v313[4] = 0;
          sub_1002931A8((uint64_t)v313, v50);
        }
        else
        {
          uint64_t v53 = *(uint64_t **)(v50 + 72);
          long long v54 = v315;
          uint64_t *v315 = *v53;
          v54[1] = v53[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v313);
      }
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v208 = 0;
        uint64_t v209 = v319;
        do
          v209[v208++] = 0;
        while (v208 < *(int *)&v318[4]);
      }
      *(_OWORD *)int v318 = *(_OWORD *)v313;
      *(_OWORD *)&v318[16] = *(_OWORD *)&v313[16];
      *(_OWORD *)&v318[32] = *(_OWORD *)&v313[32];
      *(_OWORD *)&v318[48] = *(_OWORD *)&v313[48];
      if (v320 == &v321)
      {
        unint64_t v210 = v315;
        if (*(int *)&v313[4] <= 2) {
          goto LABEL_386;
        }
      }
      else
      {
        j__free(v320);
        v319 = (int *)&v318[8];
        uint64_t v320 = &v321;
        unint64_t v210 = v315;
        if (*(int *)&v313[4] <= 2)
        {
LABEL_386:
          uint64_t v321 = *v210;
          uint64_t v322 = v210[1];
          goto LABEL_389;
        }
      }
      v319 = v314;
      uint64_t v320 = v210;
      unint64_t v210 = &v316;
      uint64_t v314 = (int *)&v313[8];
      v315 = &v316;
LABEL_389:
      *(_DWORD *)v313 = 1124007936;
      memset(&v313[4], 0, 60);
      if (v210 != &v316) {
        j__free(v210);
      }
      uint64_t v211 = *(void *)&v323[16];
      uint64_t v212 = v326;
      uint64_t v213 = *(void *)&v318[16];
      uint64_t v214 = v321;
      int v216 = *(_DWORD *)&v323[8];
      int v215 = *(_DWORD *)&v323[12];
      char v217 = sub_1002FFA74();
      sub_1002FB35C(v211, v212, v213, v214, v215, v216, v287, v217, v283);
LABEL_512:
      if (*(void *)&v318[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v318[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v318);
      }
      *(void *)&v318[56] = 0;
      memset(&v318[16], 0, 32);
      if (*(int *)&v318[4] >= 1)
      {
        uint64_t v278 = 0;
        unint64_t v279 = v319;
        do
          v279[v278++] = 0;
        while (v278 < *(int *)&v318[4]);
      }
      if (v320 != &v321) {
        j__free(v320);
      }
      if (*(void *)&v323[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v323[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v323);
      }
      *(void *)&v323[56] = 0;
      memset(&v323[16], 0, 32);
      if (*(int *)&v323[4] >= 1)
      {
        uint64_t v280 = 0;
        unint64_t v281 = v324;
        do
          v281[v280++] = 0;
        while (v280 < *(int *)&v323[4]);
      }
      if (v325 != &v326) {
        j__free(v325);
      }
      if (v329) {
        sub_1002D6888(v328);
      }
      return;
    default:
      sub_10022F344(v313, "Unknown/unsupported color conversion code");
      sub_1002D2278(-206, (uint64_t *)v313, "cvtColor", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 11323);
  }
}