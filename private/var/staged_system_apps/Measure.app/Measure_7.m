void sub_1003633DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10036B6F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003633F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10036B834((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10036C384((uint64_t)v24);
}

void sub_100363520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10036C384((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10036C4C0((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10036D0E4((uint64_t)v24);
}

void sub_100363664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10036D0E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10036D220((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10036E074((uint64_t)v24);
}

void sub_1003637A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10036E074((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003637BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10036E1B0((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10036EC00((uint64_t)v24);
}

void sub_1003638EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10036EC00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10036ED3C((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10036F6F8((uint64_t)v24);
}

void sub_100363A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10036F6F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10036F834((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_1003704D4((uint64_t)v24);
}

void sub_100363B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1003704D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100370610((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100371734((uint64_t)v24);
}

void sub_100363CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100371734((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100371870((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100372CE4((uint64_t)v24);
}

void sub_100363DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100372CE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100372E20((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100373EB8((uint64_t)v24);
}

void sub_100363F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100373EB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100373FF4((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100375014((uint64_t)v24);
}

void sub_100364084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100375014((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100364098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_100375150((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_100375C94((uint64_t)v19);
}

void sub_100364180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100375C94((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100364194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_100375DD0((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_10037684C((uint64_t)v19);
}

void sub_10036427C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10037684C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100364290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_100376988((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_100377418((uint64_t)v19);
}

void sub_100364378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100377418((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10036438C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_100377554((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_100377B14((uint64_t)v19);
}

void sub_100364474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100377B14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100364488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v20[0] = 0;
  v20[1] = v7;
  sub_100377C50((uint64_t)v19, a1, a2, a5, a6, a3, a4);
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v20, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return sub_10037815C((uint64_t)v19);
}

void sub_100364570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10037815C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100364584(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v7;
  v19[0] = &off_10049B8B0;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  int v20 = a4;
  int v21 = a6;
  uint64_t v22 = a7;
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)v7;
  }
  sub_1002ABC90(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_100364674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100364688(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v7;
  v19[0] = &off_10049B8F0;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  int v20 = a4;
  int v21 = a6;
  uint64_t v22 = a7;
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)v7;
  }
  sub_1002ABC90(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_100364778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10036478C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v7;
  v19[0] = &off_10049B930;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  int v20 = a4;
  int v21 = a6;
  uint64_t v22 = a7;
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)v7;
  }
  sub_1002ABC90(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_10036487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100364890(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v7;
  v19[0] = &off_10049B970;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  int v20 = a4;
  int v21 = a6;
  uint64_t v22 = a7;
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)v7;
  }
  sub_1002ABC90(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_100364980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100364994(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  int v7 = *(_DWORD *)(a2 + 8);
  v23[0] = 0;
  v23[1] = v7;
  v19[0] = &off_10049B9B0;
  v19[1] = a1;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a5;
  int v20 = a4;
  int v21 = a6;
  uint64_t v22 = a7;
  uint64_t v8 = *(unsigned int *)(a2 + 4);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = *(void *)(a2 + 64);
    int v11 = (int *)(v10 + 4);
    uint64_t v12 = 1;
    uint64_t v13 = v8 & 0xFFFFFFFE;
    uint64_t v14 = 1;
    do
    {
      v12 *= *(v11 - 1);
      v14 *= *v11;
      v11 += 2;
      v13 -= 2;
    }
    while (v13);
    uint64_t v9 = v14 * v12;
    uint64_t v15 = v8 - (v8 & 0xFFFFFFFE);
    if (v15)
    {
      v16 = (int *)(v10 + ((4 * v8) & 0x3FFFFFFF8));
      do
      {
        uint64_t v17 = *v16++;
        v9 *= v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v9 = *(int *)(a2 + 12) * (uint64_t)v7;
  }
  sub_1002ABC90(v23, (uint64_t)v19, (double)(unint64_t)v9 * 0.0000152587891);
  return nullsub_1(v19);
}

void sub_100364A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_100364A98(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  switch(a11)
  {
    case 1:
      BOOL v18 = a3 <= 2;
      uint64_t v19 = sub_10037A8D8;
      int v20 = sub_10037A65C;
      break;
    case 2:
      BOOL v18 = a3 <= 2;
      uint64_t v19 = sub_10037AEB0;
      int v20 = sub_10037AB98;
      break;
    case 3:
      BOOL v18 = a3 <= 2;
      uint64_t v19 = sub_10037B5E4;
      int v20 = sub_10037B170;
      break;
    case 4:
      BOOL v18 = a3 <= 2;
      uint64_t v19 = sub_10037BAC8;
      int v20 = sub_10037B8A4;
      break;
    default:
      BOOL v18 = a3 <= 2;
      uint64_t v19 = sub_10037C178;
      int v20 = sub_10037BD88;
      break;
  }
  if (!v18) {
    uint64_t v19 = v20;
  }
  v28 = v19;
  unint64_t v53 = 0x3FF0000000000000;
  *(double *)v32 = a9;
  sub_1002C7C94(&v53, v32, &v50);
  int v51 = a3;
  LODWORD(v52) = 0;
  HIDWORD(v52) = a7;
  unint64_t v53 = 0x3FF0000000000000;
  *(double *)v32 = a10;
  sub_1002C7C94(&v53, v32, &v47);
  int v48 = a4;
  LODWORD(v49) = 0;
  HIDWORD(v49) = a8;
  unint64_t v53 = (unint64_t)v55;
  unint64_t v54 = 4 * (a8 + (uint64_t)a7) + 4 * a7 + 4 * a8;
  if (v54 >= 0x409) {
    operator new[]();
  }
  int v27 = a3;
  if (a7 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = v55;
    do
    {
      sub_10037C438((uint64_t)&v50, v21++, v22, &v22[a7 + a8]);
      ++v22;
    }
    while (a7 != v21);
  }
  uint64_t v23 = v52;
  if (a8 >= 1)
  {
    uint64_t v24 = 0;
    v25 = &v55[a7];
    do
    {
      sub_10037C438((uint64_t)&v47, v24++, v25, &v25[a8 + a7]);
      ++v25;
    }
    while (a8 != v24);
  }
  v32[0] = (uint64_t)&off_10049B9F0;
  v32[1] = a1;
  v32[2] = a2;
  int v33 = v27;
  int v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  int v37 = a7;
  int v38 = a8;
  int v39 = a11;
  v40 = v55;
  v41 = &v55[a7];
  v42 = &v41[a8];
  v43 = &v42[a7];
  uint64_t v44 = v23;
  uint64_t v45 = v49;
  v46 = v28;
  v31[0] = 0;
  v31[1] = a8;
  sub_1002ABC90(v31, (uint64_t)v32, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v32);
  unint64_t result = v53;
  if ((_DWORD *)v53 != v55)
  {
    if (v53) {
      operator delete[]();
    }
  }
  return result;
}

void sub_100364E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40 != a17 && a40 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

unint64_t sub_100364E6C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  switch(a11)
  {
    case 1:
      BOOL v15 = a3 <= 2;
      v16 = sub_10037D3A0;
      uint64_t v17 = sub_10037D264;
      break;
    case 2:
      BOOL v15 = a3 <= 2;
      v16 = sub_10037D850;
      uint64_t v17 = sub_10037D6B0;
      break;
    case 3:
      BOOL v15 = a3 <= 2;
      v16 = sub_10037DE0C;
      uint64_t v17 = sub_10037DB60;
      break;
    case 4:
      BOOL v15 = a3 <= 2;
      v16 = sub_10037E2CC;
      uint64_t v17 = sub_10037E11C;
      break;
    default:
      BOOL v15 = a3 <= 2;
      v16 = sub_10037EA50;
      uint64_t v17 = sub_10037E5DC;
      break;
  }
  if (!v15) {
    v16 = v17;
  }
  v29 = v16;
  unint64_t v57 = 0x3FF0000000000000;
  *(double *)uint64_t v36 = a9;
  sub_1002C7C94(&v57, v36, &v54);
  int v55 = a3;
  LODWORD(v56) = 0;
  HIDWORD(v56) = a7;
  unint64_t v57 = 0x3FF0000000000000;
  *(double *)uint64_t v36 = a10;
  sub_1002C7C94(&v57, v36, &v51);
  int v52 = a4;
  LODWORD(v53) = 0;
  HIDWORD(v53) = a8;
  unint64_t v57 = (unint64_t)v59;
  unint64_t v58 = 4 * (a8 + (uint64_t)a7 + 2 * a7 + 2 * a8);
  if (v58 >= 0x409) {
    operator new[]();
  }
  uint64_t v28 = a6;
  BOOL v18 = &v59[a7];
  uint64_t v19 = &v18[a8];
  if (a7 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = &v18[a8];
    uint64_t v22 = v59;
    do
    {
      sub_10037ED60((uint64_t)&v54, v20++, v22++, v21);
      v21 += 2;
    }
    while (a7 != v20);
  }
  uint64_t v23 = v56;
  if (a8 >= 1)
  {
    uint64_t v24 = 0;
    v25 = &v19[2 * a7];
    uint64_t v26 = &v59[a7];
    do
    {
      sub_10037ED60((uint64_t)&v51, v24++, v26++, v25);
      v25 += 2;
    }
    while (a8 != v24);
  }
  v36[0] = (uint64_t)&off_10049BA30;
  v36[1] = a1;
  v36[2] = a2;
  int v37 = a3;
  int v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = v28;
  int v41 = a7;
  int v42 = a8;
  int v43 = a11;
  uint64_t v44 = v59;
  uint64_t v45 = &v59[a7];
  v46 = &v18[a8];
  unint64_t v47 = &v19[2 * a7];
  uint64_t v48 = v23;
  uint64_t v49 = v53;
  unint64_t v50 = v29;
  v35[0] = 0;
  v35[1] = a8;
  sub_1002ABC90(v35, (uint64_t)v36, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v36);
  unint64_t result = v57;
  if ((_DWORD *)v57 != v59)
  {
    if (v57) {
      operator delete[]();
    }
  }
  return result;
}

void sub_1003651E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40 != a16 && a40 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

unint64_t sub_100365248(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  switch(a11)
  {
    case 1:
      BOOL v15 = a3 <= 2;
      v16 = sub_10037FB70;
      uint64_t v17 = sub_10037F938;
      break;
    case 2:
      BOOL v15 = a3 <= 2;
      v16 = sub_10037FFC8;
      uint64_t v17 = sub_10037FE28;
      break;
    case 3:
      BOOL v15 = a3 <= 2;
      v16 = sub_10038052C;
      uint64_t v17 = sub_100380280;
      break;
    case 4:
      BOOL v15 = a3 <= 2;
      v16 = sub_10038098C;
      uint64_t v17 = sub_1003807E4;
      break;
    default:
      BOOL v15 = a3 <= 2;
      v16 = sub_100381150;
      uint64_t v17 = sub_100380C44;
      break;
  }
  if (!v15) {
    v16 = v17;
  }
  v29 = v16;
  unint64_t v57 = 0x3FF0000000000000;
  *(double *)uint64_t v36 = a9;
  sub_1002C7C94(&v57, v36, &v54);
  int v55 = a3;
  LODWORD(v56) = 0;
  HIDWORD(v56) = a7;
  unint64_t v57 = 0x3FF0000000000000;
  *(double *)uint64_t v36 = a10;
  sub_1002C7C94(&v57, v36, &v51);
  int v52 = a4;
  LODWORD(v53) = 0;
  HIDWORD(v53) = a8;
  unint64_t v57 = (unint64_t)v59;
  unint64_t v58 = 4 * (a8 + (uint64_t)a7 + 2 * a7 + 2 * a8);
  if (v58 >= 0x409) {
    operator new[]();
  }
  uint64_t v28 = a6;
  BOOL v18 = &v59[a7];
  uint64_t v19 = &v18[a8];
  if (a7 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = &v18[a8];
    uint64_t v22 = v59;
    do
    {
      sub_100381408((uint64_t)&v54, v20++, v22++, v21);
      v21 += 2;
    }
    while (a7 != v20);
  }
  uint64_t v23 = v56;
  if (a8 >= 1)
  {
    uint64_t v24 = 0;
    v25 = &v19[2 * a7];
    uint64_t v26 = &v59[a7];
    do
    {
      sub_100381408((uint64_t)&v51, v24++, v26++, v25);
      v25 += 2;
    }
    while (a8 != v24);
  }
  v36[0] = (uint64_t)&off_10049BA70;
  v36[1] = a1;
  v36[2] = a2;
  int v37 = a3;
  int v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = v28;
  int v41 = a7;
  int v42 = a8;
  int v43 = a11;
  uint64_t v44 = v59;
  uint64_t v45 = &v59[a7];
  v46 = &v18[a8];
  unint64_t v47 = &v19[2 * a7];
  uint64_t v48 = v23;
  uint64_t v49 = v53;
  unint64_t v50 = v29;
  v35[0] = 0;
  v35[1] = a8;
  sub_1002ABC90(v35, (uint64_t)v36, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v36);
  unint64_t result = v57;
  if ((_DWORD *)v57 != v59)
  {
    if (v57) {
      operator delete[]();
    }
  }
  return result;
}

void sub_1003655C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40 != a16 && a40 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

unint64_t sub_100365624(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  switch(a11)
  {
    case 1:
      BOOL v15 = a3 <= 2;
      v16 = sub_100381E34;
      uint64_t v17 = sub_100381CF8;
      break;
    case 2:
      BOOL v15 = a3 <= 2;
      v16 = sub_10038228C;
      uint64_t v17 = sub_1003820EC;
      break;
    case 3:
      BOOL v15 = a3 <= 2;
      v16 = sub_1003827F0;
      uint64_t v17 = sub_100382544;
      break;
    case 4:
      BOOL v15 = a3 <= 2;
      v16 = sub_100382C50;
      uint64_t v17 = sub_100382AA8;
      break;
    default:
      BOOL v15 = a3 <= 2;
      v16 = sub_100383414;
      uint64_t v17 = sub_100382F08;
      break;
  }
  if (!v15) {
    v16 = v17;
  }
  v29 = v16;
  unint64_t v57 = 0x3FF0000000000000;
  *(double *)uint64_t v36 = a9;
  sub_1002C7C94(&v57, v36, &v54);
  int v55 = a3;
  LODWORD(v56) = 0;
  HIDWORD(v56) = a7;
  unint64_t v57 = 0x3FF0000000000000;
  *(double *)uint64_t v36 = a10;
  sub_1002C7C94(&v57, v36, &v51);
  int v52 = a4;
  LODWORD(v53) = 0;
  HIDWORD(v53) = a8;
  unint64_t v57 = (unint64_t)v59;
  unint64_t v58 = 4 * (a8 + (uint64_t)a7 + 2 * a7 + 2 * a8);
  if (v58 >= 0x409) {
    operator new[]();
  }
  uint64_t v28 = a6;
  BOOL v18 = &v59[a7];
  uint64_t v19 = &v18[a8];
  if (a7 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = &v18[a8];
    uint64_t v22 = v59;
    do
    {
      sub_10037ED60((uint64_t)&v54, v20++, v22++, v21);
      v21 += 2;
    }
    while (a7 != v20);
  }
  uint64_t v23 = v56;
  if (a8 >= 1)
  {
    uint64_t v24 = 0;
    v25 = &v19[2 * a7];
    uint64_t v26 = &v59[a7];
    do
    {
      sub_10037ED60((uint64_t)&v51, v24++, v26++, v25);
      v25 += 2;
    }
    while (a8 != v24);
  }
  v36[0] = (uint64_t)&off_10049BAB0;
  v36[1] = a1;
  v36[2] = a2;
  int v37 = a3;
  int v38 = a4;
  uint64_t v39 = a5;
  uint64_t v40 = v28;
  int v41 = a7;
  int v42 = a8;
  int v43 = a11;
  uint64_t v44 = v59;
  uint64_t v45 = &v59[a7];
  v46 = &v18[a8];
  unint64_t v47 = &v19[2 * a7];
  uint64_t v48 = v23;
  uint64_t v49 = v53;
  unint64_t v50 = v29;
  v35[0] = 0;
  v35[1] = a8;
  sub_1002ABC90(v35, (uint64_t)v36, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v36);
  unint64_t result = v57;
  if ((_DWORD *)v57 != v59)
  {
    if (v57) {
      operator delete[]();
    }
  }
  return result;
}

void sub_10036599C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40 != a16 && a40 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

unint64_t sub_100365A00(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10, int a11)
{
  switch(a11)
  {
    case 1:
      BOOL v16 = a3 <= 2;
      uint64_t v17 = sub_100383FC0;
      BOOL v18 = sub_100383E88;
      break;
    case 2:
      BOOL v16 = a3 <= 2;
      uint64_t v17 = sub_10038452C;
      BOOL v18 = sub_1003843B4;
      break;
    case 3:
      BOOL v16 = a3 <= 2;
      uint64_t v17 = sub_100384B20;
      BOOL v18 = sub_100384920;
      break;
    case 4:
      BOOL v16 = a3 <= 2;
      uint64_t v17 = sub_1003850C4;
      BOOL v18 = sub_100384F14;
      break;
    default:
      BOOL v16 = a3 <= 2;
      uint64_t v17 = sub_10038589C;
      BOOL v18 = sub_1003854B8;
      break;
  }
  if (!v16) {
    uint64_t v17 = v18;
  }
  v31 = v17;
  unint64_t v58 = 0x3FF0000000000000;
  *(double *)int v37 = a9;
  sub_1002C7C94(&v58, v37, &v55);
  int v56 = a3;
  LODWORD(v57) = 0;
  HIDWORD(v57) = a7;
  unint64_t v58 = 0x3FF0000000000000;
  *(double *)int v37 = a10;
  sub_1002C7C94(&v58, v37, &v52);
  int v53 = a4;
  LODWORD(v54) = 0;
  HIDWORD(v54) = a8;
  unint64_t v58 = (unint64_t)v60;
  unint64_t v59 = 4 * (a8 + (uint64_t)a7) + 16 * a7 + 16 * a8;
  if (v59 >= 0x409) {
    operator new[]();
  }
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v19 = &v60[a7];
  uint64_t v20 = &v19[a8];
  if (a7 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = &v19[a8];
    uint64_t v23 = v60;
    do
    {
      sub_100385C90((uint64_t)&v55, v21++, v23++, v22);
      v22 += 2;
    }
    while (a7 != v21);
  }
  uint64_t v24 = v57;
  if (a8 >= 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = &v20[4 * a7];
    int v27 = &v60[a7];
    do
    {
      sub_100385C90((uint64_t)&v52, v25++, v27++, v26);
      v26 += 2;
    }
    while (a8 != v25);
  }
  v37[0] = (uint64_t)&off_10049BAF0;
  v37[1] = a1;
  v37[2] = a2;
  int v38 = a3;
  int v39 = a4;
  uint64_t v40 = v29;
  uint64_t v41 = v30;
  int v42 = a7;
  int v43 = a8;
  int v44 = a11;
  uint64_t v45 = v60;
  v46 = &v60[a7];
  unint64_t v47 = &v19[a8];
  uint64_t v48 = &v20[4 * a7];
  uint64_t v49 = v24;
  uint64_t v50 = v54;
  unint64_t v51 = v31;
  v36[0] = 0;
  v36[1] = a8;
  sub_1002ABC90(v36, (uint64_t)v37, (double)(a8 * a7) * 0.0000152587891);
  nullsub_1(v37);
  unint64_t result = v58;
  if ((_DWORD *)v58 != v60)
  {
    if (v58) {
      operator delete[]();
    }
  }
  return result;
}

void sub_100365D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40 != a16 && a40 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100365DD8(int a1, int a2, unsigned int a3, uint64_t a4, double a5)
{
  if (a2 >= 1)
  {
    int v7 = 0;
    uint64_t result = 0;
    double v9 = (double)a1;
    int v10 = a1 - 1;
    int32x4_t v11 = vdupq_n_s32(a3);
    double v12 = 0.0;
    v13.i64[0] = 0x400000004;
    v13.i64[1] = 0x400000004;
    v14.i64[0] = 0x800000008;
    v14.i64[1] = 0x800000008;
    while (1)
    {
      double v15 = v12 * a5;
      double v16 = v12 * a5 + a5;
      double v17 = v9 - v12 * a5;
      int v18 = (int)(v12 * a5);
      if (v17 >= a5) {
        double v17 = a5;
      }
      if (v15 <= (double)v18) {
        int v19 = (int)(v12 * a5);
      }
      else {
        int v19 = v18 + 1;
      }
      int v20 = (int)v16 - (v16 < (double)(int)v16);
      if (v10 < v20) {
        int v20 = v10;
      }
      signed int v21 = v20 >= v19 ? v19 : v20;
      double v22 = (double)v21 - v15;
      if (v22 > 0.001)
      {
        uint64_t v24 = a4 + 12 * (int)result;
        *(_DWORD *)uint64_t v24 = (v21 - 1) * a3;
        *(_DWORD *)(v24 + 4) = v7 * a3;
        float v25 = v22 / v17;
        uint64_t result = (result + 1);
        *(float *)(v24 + 8) = v25;
        if (v20 <= v19)
        {
LABEL_16:
          double v23 = v16 - (double)v20;
          if (v23 > 0.001) {
            goto LABEL_27;
          }
          goto LABEL_3;
        }
      }
      else if (v20 <= v19)
      {
        goto LABEL_16;
      }
      double v26 = 1.0 / v17;
      *(float *)&double v26 = 1.0 / v17;
      int v27 = result;
      uint64_t v28 = (v20 + ~v21);
      if (v28 < 7) {
        break;
      }
      uint64_t v30 = v28 + 1;
      uint64_t v31 = (v28 + 1) & 0x1FFFFFFF8;
      uint64_t result = v31 + (int)result;
      signed int v29 = v21 + v31;
      int32x4_t v32 = vaddq_s32(vdupq_n_s32(v21), (int32x4_t)xmmword_100404900);
      v5.i32[0] = v7 * a3;
      int32x4_t v33 = vdupq_lane_s32(*(int32x2_t *)v5.i8, 0);
      int32x4_t v34 = vdupq_lane_s32(*(int32x2_t *)&v26, 0);
      uint64_t v35 = (float *)(a4 + 12 * v27);
      uint64_t v36 = v31;
      do
      {
        int32x4_t v5 = vmulq_s32(v32, v11);
        int v37 = v35 + 24;
        vst3q_f32(v35, *(float32x4x3_t *)v5.i8);
        int v38 = v35 + 12;
        v44.val[0] = (float32x4_t)vmulq_s32(vaddq_s32(v32, v13), v11);
        v44.val[1] = (float32x4_t)v33;
        v44.val[2] = (float32x4_t)v34;
        vst3q_f32(v38, v44);
        int32x4_t v32 = vaddq_s32(v32, v14);
        uint64_t v35 = v37;
        v36 -= 8;
      }
      while (v36);
      if (v30 != v31) {
        goto LABEL_24;
      }
LABEL_26:
      double v23 = v16 - (double)v20;
      if (v23 > 0.001)
      {
LABEL_27:
        uint64_t v42 = a4 + 12 * (int)result;
        *(_DWORD *)uint64_t v42 = v20 * a3;
        *(_DWORD *)(v42 + 4) = v7 * a3;
        if (v23 > 1.0) {
          double v23 = 1.0;
        }
        if (v17 < v23) {
          double v23 = v17;
        }
        float v43 = v23 / v17;
        uint64_t result = (result + 1);
        *(float *)(v42 + 8) = v43;
      }
LABEL_3:
      double v12 = v12 + 1.0;
      if (++v7 == a2) {
        return result;
      }
    }
    uint64_t result = (int)result;
    signed int v29 = v21;
LABEL_24:
    int v39 = (_DWORD *)(a4 + 8 + 12 * result);
    int v40 = v20 - v29;
    int v41 = a3 * v29;
    do
    {
      *(v39 - 2) = v41;
      *(v39 - 1) = v7 * a3;
      ++result;
      *int v39 = LODWORD(v26);
      v39 += 3;
      v41 += a3;
      --v40;
    }
    while (v40);
    goto LABEL_26;
  }
  return 0;
}

float32x4_t sub_100365FD4(float32x4_t *a1, float32x4_t a2)
{
  if (a2.f32[0] >= 0.00000011921)
  {
    a2.f32[0] = a2.f32[0] + 3.0;
    float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2.f32, 0);
    a2.f32[1] = a2.f32[0] + -1.0;
    *(float32x2_t *)&a2.u32[2] = vadd_f32(*(float32x2_t *)v28.f32, (float32x2_t)0xC0400000C0000000);
    float32x4_t v4 = vnegq_f32(a2);
    float64x2_t v27 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    __asm { FMOV            V2.2D, #0.25 }
    float64x2_t v24 = vmulq_f64(vmulq_f64(vcvt_hight_f64_f32(v4), v27), _Q2);
    float64x2_t v25 = vmulq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v4.f32), v27), _Q2);
    float64x2_t v26 = _Q2;
    __double2 v10 = __sincos_stret(v25.f64[0]);
    v11.f64[0] = v10.__cosval + v10.__sinval * 0.0;
    float64x2_t v12 = vmulq_n_f64((float64x2_t)xmmword_10040A820, v10.__cosval);
    v13.f64[0] = v10.__sinval + v12.f64[0];
    v13.f64[1] = v10.__cosval * -0.707106781 + v10.__sinval * -0.707106781;
    v11.f64[1] = v10.__cosval * -0.707106781 + v10.__sinval * 0.707106781;
    float64x2_t v14 = vdivq_f64(v11, vmulq_f64(v24, v24));
    int32x2_t v15 = (int32x2_t)vcvt_f32_f64(vdivq_f64(v13, vmulq_f64(v25, v25)));
    *(float *)v11.f64 = *(float *)v15.i32 + 0.0;
    float v16 = *(float *)&v15.i32[1];
    float32x4_t v17 = vcvt_hight_f32_f64(v15, v14);
    *(float32x2_t *)&v14.f64[0] = vcvt_f32_f64(v14);
    *(float *)v14.f64 = (float)((float)(*(float *)v11.f64 + v16) + *(float *)v14.f64) + *((float *)v14.f64 + 1);
    float32x4_t v18 = vnegq_f32(vaddq_f32(v28, (float32x4_t)xmmword_10040A830));
    float64x2_t v19 = vmulq_f64(vmulq_f64(vcvt_hight_f64_f32(v18), v27), v26);
    float64x2_t v20 = vmulq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v18.f32), v27), v26);
    v13.f64[1] = v12.f64[1];
    v13.f64[0] = -v10.__cosval;
    float64x2_t v21 = vdivq_f64(vmlaq_n_f64(v13, (float64x2_t)xmmword_10040A850, v10.__sinval), vmulq_f64(v19, v19));
    int32x2_t v22 = (int32x2_t)vcvt_f32_f64(vdivq_f64(vmlaq_n_f64(v12, (float64x2_t)xmmword_10040A840, v10.__sinval), vmulq_f64(v20, v20)));
    *(float *)v14.f64 = *(float *)v14.f64 + *(float *)v22.i32;
    LODWORD(v20.f64[0]) = v22.i32[1];
    float32x4_t v23 = vcvt_hight_f32_f64(v22, v21);
    *(float32x2_t *)&v21.f64[0] = vcvt_f32_f64(v21);
    *(float *)v21.f64 = 1.0
                      / (float)((float)((float)(*(float *)v14.f64 + *(float *)v20.f64) + *(float *)v21.f64)
                              + *((float *)v21.f64 + 1));
    float32x4_t result = vmulq_n_f32(v23, *(float *)v21.f64);
    *a1 = vmulq_n_f32(v17, *(float *)v21.f64);
    a1[1] = result;
  }
  else
  {
    result.i64[0] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1->i32[3] = 1065353216;
  }
  return result;
}

void sub_1003661B4(uint64_t a1, uint64_t a2, int *a3, int a4, double a5, double a6)
{
  sub_1002D6AE8(v54, &off_10049B340);
  sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)&v52);
  if (v52 < 1 || v53 <= 0)
  {
    long long v44 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v44, 35), "ssize.width > 0 && ssize.height > 0", 35);
    sub_1002D2278(-215, (uint64_t *)&v44, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 4044);
  }
  int v14 = *a3;
  int v13 = a3[1];
  if (v13 * *a3 <= 0 && (a5 <= 0.0 || a6 <= 0.0))
  {
    long long v44 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v44, 56), "dsize.area() > 0 || (inv_scale_x > 0 && inv_scale_y > 0)", 56);
    sub_1002D2278(-215, (uint64_t *)&v44, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 4045);
  }
  double v15 = (double)v53;
  if (v13 * v14)
  {
    a5 = (double)v14 / (double)v52;
    a6 = (double)v13 / v15;
  }
  else
  {
    double v16 = rint((double)v52 * a5);
    uint64_t v17 = (uint64_t)rint(v15 * a6);
    *a3 = (uint64_t)v16;
    a3[1] = v17;
    if ((int)(v17 * (uint64_t)v16) <= 0)
    {
      long long v44 = 0uLL;
      *(_OWORD *)sub_1002D19D8(&v44, 16) = *(_OWORD *)"dsize.area() > 0";
      sub_1002D2278(-215, (uint64_t *)&v44, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 4050);
    }
  }
  if (a4 == 5)
  {
    if (sub_10029D660((int *)a1, -1) == 5 || sub_10029D660((int *)a1, -1) == 6) {
      a4 = 1;
    }
    else {
      a4 = 5;
    }
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    long long v19 = *(_OWORD *)(v18 + 16);
    long long v44 = *(_OWORD *)v18;
    long long v45 = v19;
    long long v46 = *(_OWORD *)(v18 + 32);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v47 = *(void *)(v18 + 48);
    uint64_t v48 = v20;
    uint64_t v49 = (char *)&v44 + 8;
    uint64_t v50 = v51;
    v51[0] = 0;
    v51[1] = 0;
    if (v20) {
      atomic_fetch_add((atomic_uint *volatile)(v20 + 20), 1u);
    }
    if (*(int *)(v18 + 4) > 2)
    {
      DWORD1(v44) = 0;
      sub_1002931A8((uint64_t)&v44, v18);
    }
    else
    {
      float64x2_t v21 = *(void **)(v18 + 72);
      int32x2_t v22 = v50;
      *(void *)uint64_t v50 = *v21;
      v22[1] = v21[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v44);
  }
  int32x2_t v43 = *(int32x2_t *)a3;
  sub_10029E6D4(a2, &v43, v44 & 0xFFF, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v23 = *(void *)(a2 + 8);
    long long v24 = *(_OWORD *)(v23 + 16);
    long long v35 = *(_OWORD *)v23;
    long long v36 = v24;
    long long v37 = *(_OWORD *)(v23 + 32);
    uint64_t v25 = *(void *)(v23 + 56);
    uint64_t v38 = *(void *)(v23 + 48);
    uint64_t v39 = v25;
    int v40 = (char *)&v35 + 8;
    int v41 = v42;
    v42[0] = 0;
    v42[1] = 0;
    if (v25) {
      atomic_fetch_add((atomic_uint *volatile)(v25 + 20), 1u);
    }
    if (*(int *)(v23 + 4) > 2)
    {
      DWORD1(v35) = 0;
      sub_1002931A8((uint64_t)&v35, v23);
    }
    else
    {
      float64x2_t v26 = *(void **)(v23 + 72);
      float64x2_t v27 = v41;
      *(void *)int v41 = *v26;
      v27[1] = v26[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v35);
  }
  if (*a3 == v52 && a3[1] == v53)
  {
    int v32 = 33619968;
    int32x4_t v33 = &v35;
    uint64_t v34 = 0;
    sub_10025401C((uint64_t)&v44, (uint64_t)&v32);
  }
  else
  {
    sub_1003613F8(v44 & 0xFFF, v45, v51[0], SHIDWORD(v44), DWORD2(v44), v36, v42[0], HIDWORD(v35), a5, a6, SDWORD2(v35), a4);
  }
  if (v39 && atomic_fetch_add((atomic_uint *volatile)(v39 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v35);
  }
  uint64_t v39 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  if (SDWORD1(v35) >= 1)
  {
    uint64_t v28 = 0;
    signed int v29 = v40;
    do
      *(_DWORD *)&v29[4 * v28++] = 0;
    while (v28 < SDWORD1(v35));
  }
  if (v41 != v42) {
    j__free(v41);
  }
  if (v48 && atomic_fetch_add((atomic_uint *volatile)(v48 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v44);
  }
  uint64_t v48 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  if (SDWORD1(v44) >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v49;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < SDWORD1(v44));
  }
  if (v50 != v51) {
    j__free(v50);
  }
  if (v55) {
    sub_1002D6888(v54);
  }
}

void sub_1003666C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_1002D1A1C(&a27);
  sub_10020FA00(v27 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_1003667C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6)
{
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_10049B370;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v13 = *(void **)(a2 + 72);
    int v14 = *(void **)(a1 + 80);
    *int v14 = *v13;
    v14[1] = v13[1];
  }
  long long v15 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v17 = *(void *)(a3 + 48);
  uint64_t v16 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v16;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v15;
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v18 = *(void **)(a3 + 72);
    long long v19 = *(void **)(a1 + 176);
    *long long v19 = *v18;
    v19[1] = v18[1];
  }
  *(void *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 208) = a5;
  *(double *)(a1 + 216) = a6;
  return a1;
}

void sub_100366928(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100366944(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100366958(uint64_t a1)
{
  sub_100366CCC(a1);

  operator delete();
}

uint64_t sub_100366990(uint64_t result, int *a2)
{
  int v2 = *(_DWORD *)(result + 12);
  BOOL v3 = __OFSUB__(v2, 1);
  int v4 = v2 - 1;
  if (v4 < 0 != v3)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = *a2;
    if ((int)v6 >= a2[1]) {
      return result;
    }
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(*(void *)(result + 80) + 8 * v4);
  uint64_t v6 = *a2;
  if ((int)v6 < a2[1])
  {
LABEL_5:
    uint64_t v7 = *(int *)(*(void *)(result + 168) + 4);
    uint64_t v8 = *(unsigned int *)(*(void *)(result + 168) + 4);
    int v9 = **(_DWORD **)(result + 72) - 1;
    uint64_t v10 = (int)v5;
    int v11 = v5 - 1;
    while (1)
    {
      uint64_t v12 = *(void *)(result + 120) + *(void *)(result + 184) * v6;
      int v13 = (int)(*(double *)(result + 216) * (double)(int)v6)
          - (*(double *)(result + 216) * (double)(int)v6 < (double)(int)(*(double *)(result + 216) * (double)(int)v6));
      if (v9 < v13) {
        int v13 = v9;
      }
      uint64_t v14 = *(void *)(result + 24) + **(void **)(result + 80) * v13;
      switch(v11)
      {
        case 0:
          if ((int)v7 >= 2)
          {
            uint64_t v15 = 0;
            do
            {
              uint64_t v38 = (int *)(*(void *)(result + 200) + 4 * v15);
              char v39 = *(unsigned char *)(v14 + *v38);
              LOBYTE(v38) = *(unsigned char *)(v14 + v38[1]);
              int v40 = (unsigned char *)(v12 + v15);
              unsigned char *v40 = v39;
              v40[1] = (_BYTE)v38;
              v15 += 2;
            }
            while (v15 <= v7 - 2);
            uint64_t v15 = v15;
            if ((int)v15 >= (int)v8) {
              goto LABEL_6;
            }
            do
            {
LABEL_47:
              *(unsigned char *)(v12 + v15) = *(unsigned char *)(v14 + *(int *)(*(void *)(result + 200) + 4 * v15));
              ++v15;
            }
            while (v8 != v15);
            goto LABEL_6;
          }
          uint64_t v15 = 0;
          if ((int)v8 > 0) {
            goto LABEL_47;
          }
LABEL_6:
          if (++v6 >= a2[1]) {
            return result;
          }
          break;
        case 1:
          if ((int)v8 >= 1)
          {
            uint64_t v16 = *(int **)(result + 200);
            uint64_t v17 = v8;
            do
            {
              uint64_t v18 = *v16++;
              *(_WORD *)uint64_t v12 = *(_WORD *)(v14 + v18);
              v12 += 2;
              --v17;
            }
            while (v17);
          }
          goto LABEL_6;
        case 2:
          if ((int)v7 >= 1)
          {
            uint64_t v19 = 0;
            do
            {
              uint64_t v20 = (unsigned char *)(v14 + *(int *)(*(void *)(result + 200) + v19));
              *(unsigned char *)uint64_t v12 = *v20;
              *(unsigned char *)(v12 + 1) = v20[1];
              *(unsigned char *)(v12 + 2) = v20[2];
              v12 += 3;
              v19 += 4;
            }
            while (4 * v8 != v19);
          }
          goto LABEL_6;
        case 3:
          if ((int)v8 >= 1)
          {
            float64x2_t v21 = *(int **)(result + 200);
            uint64_t v22 = v8;
            do
            {
              uint64_t v23 = *v21++;
              *(_DWORD *)uint64_t v12 = *(_DWORD *)(v14 + v23);
              v12 += 4;
              --v22;
            }
            while (v22);
          }
          goto LABEL_6;
        case 5:
          if ((int)v7 >= 1)
          {
            signed int v29 = *(int **)(result + 200);
            uint64_t v30 = v8;
            do
            {
              uint64_t v31 = *v29++;
              *(_WORD *)uint64_t v12 = *(_WORD *)(v14 + v31);
              *(_WORD *)(v12 + 2) = *(_WORD *)(v14 + v31 + 2);
              *(_WORD *)(v12 + 4) = *(_WORD *)(v14 + v31 + 4);
              v12 += 6;
              --v30;
            }
            while (v30);
          }
          goto LABEL_6;
        case 7:
          if ((int)v8 >= 1)
          {
            int v32 = *(int **)(result + 200);
            uint64_t v33 = v8;
            do
            {
              uint64_t v34 = *v32++;
              *(_DWORD *)uint64_t v12 = *(_DWORD *)(v14 + v34);
              *(_DWORD *)(v12 + 4) = *(_DWORD *)(v14 + v34 + 4);
              v12 += 8;
              --v33;
            }
            while (v33);
          }
          goto LABEL_6;
        case 11:
          if ((int)v8 >= 1)
          {
            long long v35 = *(int **)(result + 200);
            uint64_t v36 = v8;
            do
            {
              uint64_t v37 = *v35++;
              *(_DWORD *)uint64_t v12 = *(_DWORD *)(v14 + v37);
              *(_DWORD *)(v12 + 4) = *(_DWORD *)(v14 + v37 + 4);
              *(_DWORD *)(v12 + 8) = *(_DWORD *)(v14 + v37 + 8);
              v12 += 12;
              --v36;
            }
            while (v36);
          }
          goto LABEL_6;
        default:
          if ((int)v7 >= 1)
          {
            uint64_t v24 = 0;
            uint64_t v25 = *(void *)(result + 200);
            LODWORD(v26) = *(_DWORD *)(result + 208);
            do
            {
              if ((int)v26 >= 1)
              {
                uint64_t v27 = 0;
                uint64_t v28 = v14 + *(int *)(v25 + 4 * v24);
                do
                {
                  *(_DWORD *)(v12 + 4 * v27) = *(_DWORD *)(v28 + 4 * v27);
                  ++v27;
                  uint64_t v26 = *(int *)(result + 208);
                }
                while (v27 < v26);
              }
              ++v24;
              v12 += v10;
            }
            while (v24 != v8);
          }
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t sub_100366CCC(uint64_t a1)
{
  *(void *)a1 = off_10049B370;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100366E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B3B0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v20 = *(void **)(a2 + 72);
    float64x2_t v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v25 = *(void **)(a3 + 72);
    uint64_t v26 = *(void **)(a1 + 176);
    *uint64_t v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036704C(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100367060(uint64_t a1)
{
  sub_100367EF4(a1);

  operator delete();
}

void sub_100367098(uint64_t a1, int *a2, double a3, int16x4_t a4)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  signed int v6 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v7) = *(_DWORD *)(a1 + 248);
  if ((v7 * v6) >= 0x109) {
    operator new[]();
  }
  int16x4_t v8 = 0;
  memset(v36, 0, 128);
  memset(v35, 0, sizeof(v35));
  if ((int)v7 >= 1)
  {
    memset(__b, 255, 4 * v7);
    uint64_t v9 = 4 * v6;
    if (v7 == 1)
    {
      uint64_t v10 = 0;
LABEL_9:
      uint64_t v14 = (int32x4_t *)&v31[v10 * v6];
      uint64_t v15 = &v35[v10];
      uint64_t v16 = v7 - v10;
      do
      {
        *v15++ = v14;
        uint64_t v14 = (int32x4_t *)((char *)v14 + v9);
        --v16;
      }
      while (v16);
      goto LABEL_11;
    }
    uint64_t v10 = v7 & 0xFFFFFFFE;
    uint64_t v11 = &v35[1];
    uint64_t v12 = v10;
    int v13 = (int32x4_t *)v31;
    do
    {
      *(v11 - 1) = v13;
      *uint64_t v11 = (int32x4_t *)((char *)v13 + v9);
      int v13 = (int32x4_t *)((char *)v13 + 8 * v6);
      v11 += 2;
      v12 -= 2;
    }
    while (v12);
    if (v10 != v7) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v17 = *a2;
  if ((int)v17 < a2[1])
  {
    uint64_t v18 = (__int16 *)(*(void *)(a1 + 224) + 2 * (int)v17 * (int)v7);
    int v28 = ((v5 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v7 >= 1)
      {
        uint64_t v30 = v18;
        unint64_t v19 = 0;
        LODWORD(v20) = 0;
        unsigned int v21 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v17) - (v7 >> 1) + 1;
        int v22 = v7;
        do
        {
          signed int v24 = *(_DWORD *)(a1 + 236);
          if ((int)(v21 + v19) >= v24) {
            int v25 = v24 - 1;
          }
          else {
            int v25 = v21 + v19;
          }
          if ((int)(v21 + v19) >= 0) {
            int v26 = v25;
          }
          else {
            int v26 = 0;
          }
          if ((int)v20 <= (int)v19) {
            unint64_t v20 = v19;
          }
          else {
            unint64_t v20 = v20;
          }
          if ((int)v20 < (int)v7)
          {
            while (v20 > 0xF || v26 != __b[v20])
            {
              if ((uint64_t)++v20 >= (int)v7) {
                goto LABEL_15;
              }
            }
            if (v20 > v19)
            {
              memcpy(v35[v19], v35[v20], 4 * v6);
              LODWORD(v7) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_15:
          if ((int)v19 >= v22) {
            int v23 = v22;
          }
          else {
            int v23 = v19;
          }
          if (v20 == v7) {
            int v22 = v23;
          }
          v36[v19] = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v26;
          __b[v19++] = v26;
        }
        while ((uint64_t)v19 < (int)v7);
        int v27 = *(_DWORD *)(a1 + 240);
        if ((int)v7 <= v22)
        {
          uint64_t v18 = v30;
          goto LABEL_41;
        }
        sub_100367440((uint64_t)&v33, &v36[v22], (uint64_t *)&v35[v22], v7 - v22, *(int **)(a1 + 200), *(void *)(a1 + 216), *(unsigned int *)(a1 + 232), v27, v28, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        uint64_t v18 = v30;
      }
      int v27 = *(_DWORD *)(a1 + 240);
LABEL_41:
      sub_100367718(v8, a4, (uint64_t)&v32, v35, *(void *)(a1 + 120) + *(void *)(a1 + 184) * v17++, v18, v27);
      uint64_t v7 = *(int *)(a1 + 248);
      v18 += v7;
    }
    while (v17 < a2[1]);
  }
}

void sub_100367404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_100367440(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  if (a4 >= 2)
  {
    if (a11 < 1)
    {
      uint64_t v11 = (a4 - 1);
      if (a8 >= 1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = *a2;
        uint64_t v36 = *a3;
        do
        {
          uint64_t v37 = 0;
          uint64_t v38 = a2[++v34];
          uint64_t v39 = a3[v34];
          do
          {
            uint64_t v40 = a5[v37];
            *(_DWORD *)(v36 + v37 * 4) = *(unsigned __int8 *)(v35 + v40) << 11;
            *(_DWORD *)(v39 + v37 * 4) = *(unsigned __int8 *)(v38 + v40) << 11;
            ++v37;
          }
          while (a8 != v37);
          uint64_t v36 = v39;
          uint64_t v35 = v38;
        }
        while (v34 != v11);
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *a2;
      uint64_t v14 = *a3;
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = v13;
        uint64_t v17 = v14;
        uint64_t v13 = a2[++v12];
        uint64_t v14 = a3[v12];
        uint64_t v18 = (_DWORD *)(v17 + 4);
        unint64_t v19 = (_DWORD *)(v14 + 4);
        int v20 = 1;
        unsigned int v21 = a5 + 1;
        int v22 = (__int16 *)(a6 + 2);
        do
        {
          int v23 = v21;
          signed int v24 = v18;
          int v25 = v19;
          int v26 = v20;
          uint64_t v27 = 4 * v15;
          uint64_t v28 = a5[v15];
          int v29 = *(v22 - 1);
          int v30 = *v22;
          uint64_t v31 = v28 + a9;
          int v32 = *(unsigned __int8 *)(v16 + v28) * v29 + *(unsigned __int8 *)(v16 + v31) * v30;
          LODWORD(v28) = *(unsigned __int8 *)(v13 + v28) * v29 + *(unsigned __int8 *)(v13 + v31) * v30;
          *(_DWORD *)(v17 + v27) = v32;
          *(_DWORD *)(v14 + v27) = v28;
          ++v15;
          v22 += 2;
          unsigned int v21 = v23 + 1;
          uint64_t v18 = v24 + 1;
          unint64_t v19 = v25 + 1;
          int v20 = v26 + 1;
        }
        while (a11 != v15);
        if (a11 < a8)
        {
          do
          {
            uint64_t v33 = *v23++;
            *v24++ = *(unsigned __int8 *)(v16 + v33) << 11;
            *v25++ = *(unsigned __int8 *)(v13 + v33) << 11;
            ++v26;
          }
          while (v26 < a8);
        }
      }
      while (v12 != a4 - 1);
      LODWORD(v11) = a4 - 1;
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < a4)
  {
    if (a11 < 1)
    {
      if (a8 >= 1)
      {
        uint64_t v54 = v11;
        do
        {
          uint64_t v55 = a2[v54];
          int v56 = (_DWORD *)a3[v54];
          uint64_t v57 = a8;
          unint64_t v58 = a5;
          do
          {
            uint64_t v59 = *v58++;
            *v56++ = *(unsigned __int8 *)(v55 + v59) << 11;
            --v57;
          }
          while (v57);
          ++v54;
        }
        while ((int)v54 < a4);
      }
    }
    else
    {
      uint64_t v41 = v11;
      uint64_t v42 = (__int16 *)(a6 + 2);
      do
      {
        uint64_t v43 = 0;
        uint64_t v44 = a2[v41];
        uint64_t v45 = a3[v41];
        long long v46 = (_DWORD *)(v45 + 4);
        int v47 = 1;
        uint64_t v48 = a5 + 1;
        uint64_t v49 = v42;
        do
        {
          uint64_t v50 = v48;
          unint64_t v51 = v46;
          int v52 = v47;
          *(_DWORD *)(v45 + 4 * v43) = *(v49 - 1) * *(unsigned __int8 *)(v44 + a5[v43])
                                     + *v49 * *(unsigned __int8 *)(v44 + a5[v43] + (uint64_t)a9);
          ++v43;
          v49 += 2;
          ++v48;
          ++v46;
          ++v47;
        }
        while (a11 != v43);
        if (a11 < a8)
        {
          do
          {
            uint64_t v53 = *v50++;
            *v51++ = *(unsigned __int8 *)(v44 + v53) << 11;
            ++v52;
          }
          while (v52 < a8);
        }
        ++v41;
      }
      while ((int)v41 < a4);
    }
  }
}

void sub_100367718(int16x4_t a1, int16x4_t a2, uint64_t a3, int32x4_t **a4, uint64_t a5, __int16 *a6, int a7)
{
  unsigned int v7 = *a6;
  unsigned int v8 = a6[1];
  uint64_t v10 = *a4;
  uint64_t v9 = a4[1];
  if (a7 >= 16)
  {
    unint64_t v11 = 0;
    a1.i32[0] = *a6;
    a2.i32[0] = a6[1];
    uint64_t v13 = v10 + 2;
    v14.i64[0] = 0x2000200020002;
    v14.i64[1] = 0x2000200020002;
    uint64_t v15 = v9 + 2;
    do
    {
      int16x8_t v16 = vsraq_n_s16(vshrq_n_s16(vqdmulhq_lane_s16(vshrn_high_n_s32(vshrn_n_s32(v13[-2], 4uLL), v13[-1], 4uLL), a1, 0), 1uLL), vqdmulhq_lane_s16(vshrn_high_n_s32(vshrn_n_s32(v15[-2], 4uLL), v15[-1], 4uLL), a2, 0), 1uLL);
      int32x4_t v17 = *v13;
      int32x4_t v18 = v13[1];
      v13 += 4;
      int32x4_t v19 = *v15;
      int32x4_t v20 = v15[1];
      v15 += 4;
      *(int8x16_t *)(a5 + v11) = vqmovun_high_s16(vqmovun_s16(vshrq_n_s16(vaddq_s16(v16, v14), 2uLL)), vshrq_n_s16(vaddq_s16(vsraq_n_s16(vshrq_n_s16(vqdmulhq_lane_s16(vshrn_high_n_s32(vshrn_n_s32(v17, 4uLL), v18, 4uLL), a1, 0), 1uLL), vqdmulhq_lane_s16(vshrn_high_n_s32(vshrn_n_s32(v19, 4uLL), v20, 4uLL), a2, 0), 1uLL), v14), 2uLL));
      v11 += 16;
    }
    while (v11 <= (a7 - 16));
    int v12 = a7 - 4;
    if ((int)v11 > a7 - 4) {
      goto LABEL_25;
    }
  }
  else
  {
    LODWORD(v11) = 0;
    int v12 = a7 - 4;
    if (a7 - 4 < 0) {
      goto LABEL_25;
    }
  }
  unint64_t v21 = (int)v11;
  unint64_t v22 = v12 - (uint64_t)(int)v11;
  if (v22 < 0x3C) {
    goto LABEL_23;
  }
  unint64_t v23 = v22 >> 2;
  unint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFFCLL) + v21 + a5 + 4;
  uint64_t v25 = v21;
  uint64_t v26 = 4 * v21 + 16 * (v22 >> 2) + 16;
  unint64_t v27 = (unint64_t)v10->u64 + v26;
  BOOL v28 = a5 + v21 >= (unint64_t)v9->u64 + v26 || (unint64_t)v9 + 4 * v21 >= v24;
  BOOL v29 = !v28;
  if ((unint64_t)v10 + 4 * v21 < v24 && a5 + v21 < v27) {
    goto LABEL_23;
  }
  if (v29) {
    goto LABEL_23;
  }
  unint64_t v31 = v23 + 1;
  uint64_t v32 = (v23 + 1) & 0x7FFFFFFFFFFFFFF0;
  unint64_t v11 = v21 + 4 * v32;
  int32x4_t v33 = vdupq_n_s32(v8);
  uint64_t v34 = (char *)(a5 + v21);
  uint64_t v35 = (const float *)&v10->i32[v25];
  uint64_t v36 = (const float *)&v9->i32[v25];
  uint64_t v37 = v32;
  int32x4_t v38 = vdupq_n_s32(v7);
  v39.i64[0] = 0x200000002;
  v39.i64[1] = 0x200000002;
  do
  {
    uint64_t v40 = v35;
    int8x16x4_t v99 = (int8x16x4_t)vld4q_f32(v40);
    v40 += 16;
    uint64_t v41 = v35 + 32;
    uint64_t v42 = v35 + 48;
    float32x4x4_t v94 = vld4q_f32(v41);
    int32x4_t v85 = (int32x4_t)v94.val[2];
    int8x16x4_t v97 = (int8x16x4_t)vld4q_f32(v42);
    int32x4_t v91 = (int32x4_t)v97.val[1];
    int32x4_t v92 = (int32x4_t)v97.val[2];
    float32x4x4_t v102 = vld4q_f32(v40);
    uint64_t v43 = v36;
    float32x4x4_t v100 = vld4q_f32(v43);
    v43 += 16;
    uint64_t v44 = v36 + 32;
    uint64_t v45 = v36 + 48;
    int8x16x4_t v95 = (int8x16x4_t)vld4q_f32(v44);
    float32x4x4_t v96 = vld4q_f32(v45);
    v97.val[1] = v99.val[1];
    v97.val[2] = v99.val[2];
    v99.val[1] = (int8x16_t)v100.val[1];
    uint32x4_t v86 = (uint32x4_t)v100.val[2];
    uint32x4_t v87 = (uint32x4_t)v100.val[3];
    v94.val[2] = (float32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v99.val[0], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v100.val[0], 4uLL), v33), 0x10uLL);
    uint32x4_t v88 = (uint32x4_t)v95.val[1];
    uint32x4_t v89 = (uint32x4_t)v95.val[2];
    uint32x4_t v90 = (uint32x4_t)v95.val[3];
    v94.val[0] = (float32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v94.val[0], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v95.val[0], 4uLL), v33), 0x10uLL);
    int8x16x4_t v101 = (int8x16x4_t)vld4q_f32(v43);
    v95.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)v94.val[2], v39), 2uLL);
    v95.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v97.val[0], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96.val[0], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v95.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)v94.val[0], v39), 2uLL);
    v95.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v102.val[0], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101.val[0], 4uLL), v33), 0x10uLL), v39), 2uLL);
    int32x4_t v84 = (int32x4_t)v99.val[3];
    v99.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v97.val[1], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v99.val[1], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v91, 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96.val[1], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v94.val[1], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v88, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v102.val[1], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101.val[1], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v101.val[0] = vqtbl4q_s8(v95, (int8x16_t)xmmword_1004047C0);
    v101.val[1] = vqtbl4q_s8(v99, (int8x16_t)xmmword_1004047C0);
    v99.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v97.val[2], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v86, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v92, 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96.val[2], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v85, 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v89, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v99.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v102.val[2], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101.val[2], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v101.val[2] = vqtbl4q_s8(v99, (int8x16_t)xmmword_1004047C0);
    v97.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v84, 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v87, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v97.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v97.val[3], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v96.val[3], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v97.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v94.val[3], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v90, 4uLL), v33), 0x10uLL), v39), 2uLL);
    v97.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32((int32x4_t)v102.val[3], 4uLL), v38), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v101.val[3], 4uLL), v33), 0x10uLL), v39), 2uLL);
    v101.val[3] = vqtbl4q_s8(v97, (int8x16_t)xmmword_1004047C0);
    vst4q_s8(v34, v101);
    v34 += 64;
    v35 += 64;
    v36 += 64;
    v37 -= 16;
  }
  while (v37);
  unint64_t v21 = v11;
  if (v31 != v32)
  {
LABEL_23:
    uint64_t v46 = 4 * v21 + 8;
    int v47 = (__int32 *)((char *)v9->i32 + v46);
    uint64_t v48 = (__int32 *)((char *)v10->i32 + v46);
    unint64_t v11 = v21;
    do
    {
      uint64_t v49 = (unsigned char *)(a5 + 3 + v11);
      *(v49 - 3) = ((((*(v48 - 2) >> 4) * v7) >> 16) + (((*(v47 - 2) >> 4) * v8) >> 16) + 2) >> 2;
      *(v49 - 2) = ((((*(v48 - 1) >> 4) * v7) >> 16) + (((*(v47 - 1) >> 4) * v8) >> 16) + 2) >> 2;
      *(v49 - 1) = ((((*v48 >> 4) * v7) >> 16) + (((*v47 >> 4) * v8) >> 16) + 2) >> 2;
      *uint64_t v49 = ((((v48[1] >> 4) * v7) >> 16) + (((v47[1] >> 4) * v8) >> 16) + 2) >> 2;
      v11 += 4;
      v47 += 4;
      v48 += 4;
    }
    while ((uint64_t)v11 <= v12);
  }
LABEL_25:
  if ((int)v11 >= a7) {
    return;
  }
  uint64_t v50 = (int)v11;
  unint64_t v51 = a7 - (uint64_t)(int)v11;
  if (v51 < 8) {
    goto LABEL_49;
  }
  unint64_t v52 = a5 + a7;
  uint64_t v53 = 4 * v50;
  BOOL v54 = a5 + v50 >= (unint64_t)v9 + 4 * a7 || (unint64_t)v9 + 4 * v50 >= v52;
  BOOL v55 = !v54;
  BOOL v56 = (unint64_t)v10 + 4 * v50 >= v52 || a5 + v50 >= (unint64_t)v10 + 4 * a7;
  if (!v56 || v55) {
    goto LABEL_49;
  }
  int32x4_t v57 = vdupq_n_s32(v7);
  int32x4_t v58 = vdupq_n_s32(v8);
  if (v51 >= 0x10)
  {
    unint64_t v59 = v51 & 0xFFFFFFFFFFFFFFF0;
    v60 = (int32x4_t *)((char *)v10 + v53);
    v61 = (uint32x4_t *)&v9->i8[v53];
    v62 = (int8x16_t *)(a5 + v50);
    v63.i64[0] = 0x200000002;
    v63.i64[1] = 0x200000002;
    unint64_t v64 = v51 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v98.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v60[2], 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v61[2], 4uLL), v58), 0x10uLL), v63), 2uLL);
      v98.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v60[1], 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v61[1], 4uLL), v58), 0x10uLL), v63), 2uLL);
      v98.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(*v60, 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(*v61, 4uLL), v58), 0x10uLL), v63), 2uLL);
      v98.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v60[3], 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v61[3], 4uLL), v58), 0x10uLL), v63), 2uLL);
      *v62++ = vqtbl4q_s8(v98, (int8x16_t)xmmword_1004047C0);
      v60 += 4;
      v61 += 4;
      v64 -= 16;
    }
    while (v64);
    if (v51 == v59) {
      return;
    }
    if ((v51 & 8) == 0)
    {
      v50 += v59;
LABEL_49:
      v77 = &v10->i32[v50];
      v78 = &v9->i32[v50];
      v79 = (unsigned char *)(a5 + v50);
      uint64_t v80 = a7 - v50;
      do
      {
        unsigned int v81 = *v77++;
        unsigned int v82 = ((v81 >> 4) * v7) >> 16;
        unsigned int v83 = *v78++;
        *v79++ = (v82 + (((v83 >> 4) * v8) >> 16) + 2) >> 2;
        --v80;
      }
      while (v80);
      return;
    }
  }
  else
  {
    unint64_t v59 = 0;
  }
  uint64_t v65 = (v51 & 0xFFFFFFFFFFFFFFF8) + v50;
  unint64_t v66 = v59 - (v51 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v67 = v59 + v50;
  uint64_t v68 = 4 * (v59 + v50);
  v69 = (int32x4_t *)((char *)v10 + v68);
  v70 = (uint32x4_t *)&v9->i8[v68];
  v71 = (void *)(a5 + v67);
  v72.i64[0] = 0x200000002;
  v72.i64[1] = 0x200000002;
  do
  {
    int32x4_t v74 = *v69;
    int32x4_t v73 = v69[1];
    v69 += 2;
    uint32x4_t v75 = *v70;
    uint32x4_t v76 = v70[1];
    v70 += 2;
    v93.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v73, 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v76, 4uLL), v58), 0x10uLL), v72), 2uLL);
    v93.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(vshrq_n_u32((uint32x4_t)vmulq_s32(vshrq_n_s32(v74, 4uLL), v57), 0x10uLL), (uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v75, 4uLL), v58), 0x10uLL), v72), 2uLL);
    *v71++ = vqtbl2q_s8(v93, (int8x16_t)xmmword_1004047D0).u64[0];
    v66 += 8;
  }
  while (v66);
  uint64_t v50 = v65;
  if (v51 != (v51 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_49;
  }
}

uint64_t sub_100367EF4(uint64_t a1)
{
  *(void *)a1 = off_10049B3B0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unsigned int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100368030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B3F0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int32x4_t v20 = *(void **)(a2 + 72);
    unint64_t v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v25 = *(void **)(a3 + 72);
    uint64_t v26 = *(void **)(a1 + 176);
    *uint64_t v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100368234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100368274(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100368288(uint64_t a1)
{
  sub_100368DA8(a1);

  operator delete();
}

void sub_1003682C0(uint64_t a1, int *a2, double a3, double a4, double a5, double a6, double a7, double a8, __n128 a9, __n128 a10)
{
  unsigned int v11 = *(_DWORD *)(a1 + 8);
  signed int v12 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v13) = *(_DWORD *)(a1 + 248);
  if ((v13 * v12) >= 0x109) {
    operator new[]();
  }
  double v14 = 0.0;
  memset(v42, 0, 128);
  memset(v41, 0, sizeof(v41));
  if ((int)v13 >= 1)
  {
    memset(__b, 255, 4 * v13);
    uint64_t v15 = 4 * v12;
    if (v13 == 1)
    {
      uint64_t v16 = 0;
LABEL_9:
      int32x4_t v20 = (float32x4_t *)&v37[v16 * v12];
      unint64_t v21 = &v41[v16];
      uint64_t v22 = v13 - v16;
      do
      {
        *v21++ = v20;
        int32x4_t v20 = (float32x4_t *)((char *)v20 + v15);
        --v22;
      }
      while (v22);
      goto LABEL_11;
    }
    uint64_t v16 = v13 & 0xFFFFFFFE;
    int32x4_t v17 = &v41[1];
    uint64_t v18 = v16;
    uint64_t v19 = (float32x4_t *)v37;
    do
    {
      *(v17 - 1) = v19;
      *int32x4_t v17 = (float32x4_t *)((char *)v19 + v15);
      uint64_t v19 = (float32x4_t *)((char *)v19 + 8 * v12);
      v17 += 2;
      v18 -= 2;
    }
    while (v18);
    if (v16 != v13) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v23 = *a2;
  if ((int)v23 < a2[1])
  {
    uint64_t v24 = (unsigned __int32 *)(*(void *)(a1 + 224) + 4 * (int)v23 * (int)v13);
    int v34 = ((v11 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v13 >= 1)
      {
        uint64_t v36 = v24;
        unint64_t v25 = 0;
        LODWORD(v26) = 0;
        unsigned int v27 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v23) - (v13 >> 1) + 1;
        int v28 = v13;
        do
        {
          signed int v30 = *(_DWORD *)(a1 + 236);
          if ((int)(v27 + v25) >= v30) {
            int v31 = v30 - 1;
          }
          else {
            int v31 = v27 + v25;
          }
          if ((int)(v27 + v25) >= 0) {
            int v32 = v31;
          }
          else {
            int v32 = 0;
          }
          if ((int)v26 <= (int)v25) {
            unint64_t v26 = v25;
          }
          else {
            unint64_t v26 = v26;
          }
          if ((int)v26 < (int)v13)
          {
            while (v26 > 0xF || v32 != __b[v26])
            {
              if ((uint64_t)++v26 >= (int)v13) {
                goto LABEL_15;
              }
            }
            if (v26 > v25)
            {
              memcpy(v41[v25], v41[v26], 4 * v12);
              LODWORD(v13) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_15:
          if ((int)v25 >= v28) {
            int v29 = v28;
          }
          else {
            int v29 = v25;
          }
          if (v26 == v13) {
            int v28 = v29;
          }
          v42[v25] = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v32;
          __b[v25++] = v32;
        }
        while ((uint64_t)v25 < (int)v13);
        uint64_t v33 = *(unsigned int *)(a1 + 240);
        if ((int)v13 <= v28)
        {
          uint64_t v24 = v36;
          goto LABEL_41;
        }
        sub_100368668(*(float *)&v14, *(float *)&a4, *(float *)&a5, *(float *)&a6, *(float *)&a7, (uint64_t)&v39, &v42[v28], (uint64_t *)&v41[v28], v13 - v28, *(int **)(a1 + 200), *(void *)(a1 + 216), *(unsigned int *)(a1 + 232), v33, v34, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        uint64_t v24 = v36;
      }
      uint64_t v33 = *(unsigned int *)(a1 + 240);
LABEL_41:
      sub_100368A70(v14, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v38, v41, (uint16x8_t *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v23++), v24, v33);
      uint64_t v13 = *(int *)(a1 + 248);
      v24 += v13;
    }
    while (v23 < a2[1]);
  }
}

void sub_10036862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_100368668(float a1, float a2, float a3, float a4, float a5, uint64_t a6, uint64_t *a7, uint64_t *a8, int a9, int *a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, int a16)
{
  if (a9 >= 2)
  {
    if (a16 < 1)
    {
      uint64_t v16 = (a9 - 1);
      if (a13 >= 1)
      {
        uint64_t v64 = 0;
        uint64_t v65 = *a7;
        uint64_t v66 = *a8;
        do
        {
          uint64_t v67 = 0;
          uint64_t v68 = a7[++v64];
          uint64_t v69 = a8[v64];
          do
          {
            uint64_t v70 = 2 * a10[v67];
            LOWORD(a1) = *(_WORD *)(v65 + v70);
            float v71 = (float)LODWORD(a1);
            *(float *)(v66 + v67 * 4) = v71;
            LOWORD(v71) = *(_WORD *)(v68 + v70);
            a1 = (float)LODWORD(v71);
            *(float *)(v69 + v67 * 4) = a1;
            ++v67;
          }
          while (a13 != v67);
          uint64_t v66 = v69;
          uint64_t v65 = v68;
        }
        while (v64 != v16);
      }
    }
    else
    {
      uint64_t v35 = 0;
      LODWORD(v16) = a9 - 1;
      uint64_t v36 = *a7;
      uint64_t v37 = *a8;
      do
      {
        uint64_t v38 = 0;
        uint64_t v39 = v36;
        uint64_t v40 = v37;
        uint64_t v36 = a7[++v35];
        uint64_t v37 = a8[v35];
        uint64_t v41 = (float *)(v40 + 4);
        uint64_t v42 = (float *)(v37 + 4);
        int v43 = 1;
        uint64_t v44 = a10 + 1;
        uint64_t v45 = (float *)(a11 + 4);
        do
        {
          uint64_t v46 = v44;
          int v47 = v41;
          uint64_t v48 = v42;
          int v49 = v43;
          uint64_t v50 = 4 * v38;
          uint64_t v51 = a10[v38];
          float v52 = *(v45 - 1);
          uint64_t v53 = 2 * v51;
          LOWORD(a3) = *(_WORD *)(v39 + 2 * v51);
          uint64_t v54 = 2 * ((int)v51 + a14);
          LOWORD(a4) = *(_WORD *)(v39 + v54);
          LOWORD(a5) = *(_WORD *)(v36 + v53);
          a3 = (float)(*v45 * (float)LODWORD(a4)) + (float)((float)LODWORD(a3) * v52);
          a4 = (float)LODWORD(a5);
          LOWORD(a5) = *(_WORD *)(v36 + v54);
          a5 = (float)LODWORD(a5);
          a2 = *v45 * a5;
          *(float *)(v40 + v50) = a3;
          a1 = a2 + (float)(a4 * v52);
          *(float *)(v37 + v50) = a1;
          ++v38;
          v45 += 2;
          ++v44;
          uint64_t v41 = v47 + 1;
          uint64_t v42 = v48 + 1;
          int v43 = v49 + 1;
        }
        while (a16 != v38);
        if (a16 < a13)
        {
          do
          {
            uint64_t v55 = *v46++;
            LOWORD(a1) = *(_WORD *)(v39 + 2 * v55);
            float v56 = (float)LODWORD(a1);
            *v47++ = v56;
            LOWORD(v56) = *(_WORD *)(v36 + 2 * v55);
            a1 = (float)LODWORD(v56);
            *v48++ = a1;
            ++v49;
          }
          while (v49 < a13);
        }
      }
      while (v35 != a9 - 1);
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if ((int)v16 < a9)
  {
    if (a16 >= 1)
    {
      uint64_t v16 = v16;
      uint64_t v17 = (~a16 + a13);
      uint64_t v18 = (v17 + 1) & 0x1FFFFFFFELL;
      uint64_t v19 = (float *)(a11 + 4);
      while (1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = a7[v16];
        uint64_t v22 = (float *)a8[v16];
        uint64_t v23 = v19;
        uint64_t v24 = v22;
        unint64_t v25 = a10;
        do
        {
          uint64_t v26 = *v25++;
          LOWORD(a1) = *(_WORD *)(v21 + 2 * v26);
          float v27 = *(v23 - 1);
          LOWORD(a3) = *(_WORD *)(v21 + 2 * ((int)v26 + a14));
          a3 = *v23 * (float)LODWORD(a3);
          a1 = a3 + (float)((float)LODWORD(a1) * v27);
          *v24++ = a1;
          --v20;
          v23 += 2;
        }
        while (-(uint64_t)a16 != v20);
        if (a16 >= a13) {
          goto LABEL_6;
        }
        if (v17)
        {
          uint64_t v28 = 0;
          uint64_t v29 = v18 - v20;
          do
          {
            signed int v30 = &v25[v28];
            LOWORD(a1) = *(_WORD *)(v21 + 2 * *v30);
            a1 = (float)LODWORD(a1);
            LOWORD(v27) = *(_WORD *)(v21 + 2 * v30[1]);
            float v27 = (float)LODWORD(v27);
            int v31 = &v24[v28];
            float *v31 = a1;
            v31[1] = v27;
            v28 += 2;
          }
          while (v18 != v28);
          if (v17 + 1 == v18) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v29 = -v20;
        }
        int v32 = &a10[v29];
        uint64_t v33 = &v22[v29];
        do
        {
          uint64_t v34 = *v32++;
          LOWORD(a1) = *(_WORD *)(v21 + 2 * v34);
          a1 = (float)LODWORD(a1);
          *v33++ = a1;
          LODWORD(v29) = v29 + 1;
        }
        while ((int)v29 < a13);
LABEL_6:
        if ((int)++v16 >= a9) {
          return;
        }
      }
    }
    if (a13 >= 1)
    {
      uint64_t v57 = v16;
      if (a13 == 1)
      {
        uint64_t v58 = *a10;
        unint64_t v59 = (float **)&a8[v16];
        v60 = &a7[v16];
        do
        {
          v62 = *v59++;
          v61 = v62;
          uint64_t v63 = *v60++;
          LOWORD(a1) = *(_WORD *)(v63 + 2 * v58);
          a1 = (float)LODWORD(a1);
          float *v61 = a1;
          LODWORD(v16) = v16 + 1;
        }
        while ((int)v16 < a9);
      }
      else
      {
        uint64_t v72 = a13 & 0xFFFFFFFE;
        if (a13 == v72)
        {
          do
          {
            uint64_t v73 = a7[v57];
            int32x4_t v74 = (float *)(a8[v57] + 4);
            uint32x4_t v75 = a10 + 1;
            uint64_t v76 = a13 & 0xFFFFFFFE;
            do
            {
              LOWORD(a1) = *(_WORD *)(v73 + 2 * *(v75 - 1));
              a1 = (float)LODWORD(a1);
              LOWORD(a2) = *(_WORD *)(v73 + 2 * *v75);
              a2 = (float)LODWORD(a2);
              *(v74 - 1) = a1;
              *int32x4_t v74 = a2;
              v74 += 2;
              v75 += 2;
              v76 -= 2;
            }
            while (v76);
            ++v57;
          }
          while ((int)v57 < a9);
        }
        else
        {
          uint64_t v77 = (4 * a13) & 0x3FFFFFFF8;
          do
          {
            uint64_t v78 = a7[v57];
            uint64_t v79 = a8[v57];
            uint64_t v80 = (float *)(v79 + 4);
            uint64_t v81 = a13 & 0xFFFFFFFE;
            unsigned int v82 = a10 + 1;
            do
            {
              LOWORD(a1) = *(_WORD *)(v78 + 2 * *(v82 - 1));
              a1 = (float)LODWORD(a1);
              LOWORD(a2) = *(_WORD *)(v78 + 2 * *v82);
              a2 = (float)LODWORD(a2);
              *(v80 - 1) = a1;
              *uint64_t v80 = a2;
              v82 += 2;
              v80 += 2;
              v81 -= 2;
            }
            while (v81);
            unsigned int v83 = (float *)(v79 + v77);
            uint64_t v84 = a13 - v72;
            int32x4_t v85 = (int *)((char *)a10 + v77);
            do
            {
              uint64_t v86 = *v85++;
              LOWORD(a1) = *(_WORD *)(v78 + 2 * v86);
              a1 = (float)LODWORD(a1);
              *v83++ = a1;
              --v84;
            }
            while (v84);
            ++v57;
          }
          while ((int)v57 < a9);
        }
      }
    }
  }
}

void sub_100368A70(double a1, double a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8, uint64_t a9, float32x4_t **a10, uint16x8_t *a11, unsigned __int32 *a12, uint64_t a13)
{
  a7.n128_u32[0] = *a12;
  a8.n128_u32[0] = a12[1];
  uint64_t v13 = *a10;
  double v14 = a10[1];
  int v15 = 0;
  int v16 = a13 - 8;
  if ((int)a13 >= 8)
  {
    float32x4_t v44 = (float32x4_t)vdupq_lane_s32((int32x2_t)a8.n128_u64[0], 0);
    uint64_t v45 = v14 + 1;
    uint64_t v46 = v13 + 1;
    int v47 = (float32x4_t *)&unk_1004D2000;
    uint64_t v48 = a11;
    do
    {
      float32x4_t v50 = v46[-1];
      float32x4_t v49 = *v46;
      float32x4_t v52 = v45[-1];
      float32x4_t v51 = *v45;
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        uint64_t v77 = a11;
        uint64_t v79 = v14;
        uint64_t v73 = a13;
        uint32x4_t v75 = v13;
        int v81 = v15;
        int v83 = v16;
        int32x4_t v85 = v45;
        uint32x4_t v87 = v46;
        uint32x4_t v89 = v48;
        __n128 v71 = a7;
        float32x4_t v67 = v44;
        __n128 v69 = a8;
        float32x4_t v63 = v50;
        float32x4_t v65 = v49;
        float32x4_t v59 = v52;
        float32x4_t v61 = v51;
        int v54 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v52 = v59;
        float32x4_t v51 = v61;
        float32x4_t v50 = v63;
        float32x4_t v49 = v65;
        *(void *)&long long v55 = 0x3F0000003F000000;
        *((void *)&v55 + 1) = 0x3F0000003F000000;
        float32x4_t v44 = v67;
        a8 = v69;
        a7 = v71;
        uint64_t v46 = v87;
        uint64_t v48 = v89;
        int v47 = (float32x4_t *)&unk_1004D2000;
        uint64_t v45 = v85;
        int v16 = v83;
        double v14 = v79;
        int v15 = v81;
        a13 = v73;
        uint64_t v13 = v75;
        a11 = v77;
        if (v54)
        {
          xmmword_1004D2D90 = v55;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v52 = v59;
          float32x4_t v51 = v61;
          float32x4_t v50 = v63;
          float32x4_t v49 = v65;
          float32x4_t v44 = v67;
          a8 = v69;
          a7 = v71;
          uint64_t v46 = v87;
          uint64_t v48 = v89;
          int v47 = (float32x4_t *)&unk_1004D2000;
          uint64_t v45 = v85;
          int v16 = v83;
          double v14 = v79;
          int v15 = v81;
          a13 = v73;
          uint64_t v13 = v75;
          a11 = v77;
        }
      }
      float32x4_t v53 = v47[217];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        uint64_t v78 = a11;
        uint64_t v80 = v14;
        uint64_t v74 = a13;
        uint64_t v76 = v13;
        int v82 = v15;
        int v84 = v16;
        uint64_t v86 = v45;
        uint32x4_t v88 = v46;
        uint32x4_t v90 = v48;
        __n128 v72 = a7;
        float32x4_t v68 = v44;
        __n128 v70 = a8;
        float32x4_t v64 = v50;
        float32x4_t v66 = v49;
        float32x4_t v60 = v52;
        float32x4_t v62 = v51;
        float32x4_t v58 = v53;
        int v56 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v53 = v58;
        float32x4_t v52 = v60;
        float32x4_t v51 = v62;
        float32x4_t v50 = v64;
        float32x4_t v49 = v66;
        float32x4_t v44 = v68;
        *(void *)&long long v57 = 0x3F0000003F000000;
        *((void *)&v57 + 1) = 0x3F0000003F000000;
        a8 = v70;
        a7 = v72;
        uint64_t v46 = v88;
        uint64_t v48 = v90;
        int v47 = (float32x4_t *)&unk_1004D2000;
        uint64_t v45 = v86;
        int v16 = v84;
        double v14 = v80;
        int v15 = v82;
        a13 = v74;
        uint64_t v13 = v76;
        a11 = v78;
        if (v56)
        {
          xmmword_1004D2D90 = v57;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v53 = v58;
          float32x4_t v52 = v60;
          float32x4_t v51 = v62;
          float32x4_t v50 = v64;
          float32x4_t v49 = v66;
          float32x4_t v44 = v68;
          a8 = v70;
          a7 = v72;
          uint64_t v46 = v88;
          uint64_t v48 = v90;
          int v47 = (float32x4_t *)&unk_1004D2000;
          uint64_t v45 = v86;
          int v16 = v84;
          double v14 = v80;
          int v15 = v82;
          a13 = v74;
          uint64_t v13 = v76;
          a11 = v78;
        }
      }
      *v48++ = vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmlaq_f32(vmulq_n_f32(v50, a7.n128_f32[0]), v44, v52), v53))), vcvtq_u32_f32(vaddq_f32(vmlaq_f32(vmulq_n_f32(v49, a7.n128_f32[0]), v44, v51), v47[217])));
      v15 += 8;
      v45 += 2;
      v46 += 2;
    }
    while (v16 >= v15);
  }
  if (v15 <= (int)a13 - 4)
  {
    uint64_t v17 = v15;
    uint64_t v18 = (int16x4_t *)((char *)a11 + 2 * v15);
    uint64_t v19 = 4 * v15 + 8;
    uint64_t v20 = (float *)((char *)v14->f32 + v19);
    uint64_t v21 = (float *)((char *)v13->f32 + v19);
    v22.i64[0] = 0xFFFF0000FFFFLL;
    v22.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      uint64_t v23 = (uint64_t)rintf((float)(a8.n128_f32[0] * *(v20 - 2)) + (float)(*(v21 - 2) * a7.n128_f32[0]));
      float v24 = rintf((float)(a8.n128_f32[0] * *(v20 - 1)) + (float)(*(v21 - 1) * a7.n128_f32[0]));
      float v25 = *v20;
      float v26 = v20[1];
      v20 += 4;
      uint64_t v27 = (uint64_t)v24;
      float v28 = a8.n128_f32[0] * v25;
      float v29 = *v21;
      float v30 = v21[1];
      v21 += 4;
      uint64_t v31 = (uint64_t)rintf(v28 + (float)(v29 * a7.n128_f32[0]));
      v32.i64[0] = __PAIR64__(v27, v23);
      v32.i64[1] = __PAIR64__((uint64_t)rintf((float)(a8.n128_f32[0] * v26) + (float)(v30 * a7.n128_f32[0])), v31);
      *v18++ = vmovn_s32(vminq_s32(vmaxq_s32(v32, (int32x4_t)0), v22));
      v17 += 4;
    }
    while (v17 <= (int)a13 - 4);
    int v15 = v17;
  }
  if (v15 < (int)a13)
  {
    uint64_t v33 = v15;
    uint64_t v34 = v15;
    uint64_t v35 = &v13->f32[v34];
    uint64_t v36 = &v14->f32[v34];
    uint64_t v37 = &a11->i16[v15];
    uint64_t v38 = (int)a13 - v33;
    do
    {
      float v39 = *v35++;
      float v40 = v39;
      float v41 = *v36++;
      float v42 = rintf((float)(a8.n128_f32[0] * v41) + (float)(v40 * a7.n128_f32[0]));
      int v43 = (uint64_t)v42 & ~((int)(uint64_t)v42 >> 31);
      if (v43 >= 0xFFFF) {
        LOWORD(v43) = -1;
      }
      *v37++ = v43;
      --v38;
    }
    while (v38);
  }
}

uint64_t sub_100368DA8(uint64_t a1)
{
  *(void *)a1 = off_10049B3F0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unsigned int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100368EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B430;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v20 = *(void **)(a2 + 72);
    uint64_t v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    float v25 = *(void **)(a3 + 72);
    float v26 = *(void **)(a1 + 176);
    *float v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_1003690E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100369128(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036913C(uint64_t a1)
{
  sub_100369E80(a1);

  operator delete();
}

_DWORD *sub_100369174(_DWORD *result, int *a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7 = result;
  unsigned int v8 = result[2];
  signed int v9 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v10) = result[62];
  if ((v10 * v9) >= 0x109) {
    operator new[]();
  }
  double v11 = 0.0;
  memset(v39, 0, 128);
  memset(v38, 0, sizeof(v38));
  if ((int)v10 >= 1)
  {
    float32x4_t result = memset(__b, 255, 4 * v10);
    uint64_t v12 = v9;
    if (v10 == 1)
    {
      uint64_t v13 = 0;
LABEL_9:
      uint64_t v17 = &v34[v13 * v9];
      uint64_t v18 = &v38[v13];
      uint64_t v19 = v10 - v13;
      do
      {
        *v18++ = (uint64_t)v17;
        uint64_t v17 = (_DWORD *)((char *)v17 + v12 * 4);
        --v19;
      }
      while (v19);
      goto LABEL_11;
    }
    uint64_t v13 = v10 & 0xFFFFFFFE;
    double v14 = &v38[1];
    uint64_t v15 = v13;
    int v16 = v34;
    do
    {
      *(v14 - 1) = (uint64_t)v16;
      *double v14 = (uint64_t)&v16[v12];
      v16 += 2 * v9;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v13 != v10) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v20 = *a2;
  if ((int)v20 < a2[1])
  {
    uint64_t v21 = (float *)(*((void *)v7 + 28) + 4 * (int)v20 * (int)v10);
    int v31 = ((v8 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v10 >= 1)
      {
        uint64_t v33 = v21;
        unint64_t v22 = 0;
        LODWORD(v23) = 0;
        unsigned int v24 = *(_DWORD *)(*((void *)v7 + 26) + 4 * v20) - (v10 >> 1) + 1;
        int v25 = v10;
        do
        {
          signed int v27 = v7[59];
          if ((int)(v24 + v22) >= v27) {
            int v28 = v27 - 1;
          }
          else {
            int v28 = v24 + v22;
          }
          if ((int)(v24 + v22) >= 0) {
            int v29 = v28;
          }
          else {
            int v29 = 0;
          }
          if ((int)v23 <= (int)v22) {
            unint64_t v23 = v22;
          }
          else {
            unint64_t v23 = v23;
          }
          if ((int)v23 < (int)v10)
          {
            while (v23 > 0xF || v29 != __b[v23])
            {
              if ((uint64_t)++v23 >= (int)v10) {
                goto LABEL_15;
              }
            }
            if (v23 > v22)
            {
              memcpy((void *)v38[v22], (const void *)v38[v23], 4 * v9);
              LODWORD(v10) = v7[62];
            }
          }
LABEL_15:
          if ((int)v22 >= v25) {
            int v26 = v25;
          }
          else {
            int v26 = v22;
          }
          if (v23 == v10) {
            int v25 = v26;
          }
          v39[v22] = *((void *)v7 + 3) + **((void **)v7 + 10) * v29;
          __b[v22++] = v29;
        }
        while ((uint64_t)v22 < (int)v10);
        int v30 = v7[60];
        if ((int)v10 <= v25)
        {
          uint64_t v21 = v33;
          goto LABEL_41;
        }
        sub_10036951C(v11, a4, a5, a6, a7, (uint64_t)&v36, &v39[v25], &v38[v25], v10 - v25, *((int **)v7 + 25), *((void *)v7 + 27), v7[58], v30, v31, v7[63], v7[64]);
        uint64_t v21 = v33;
      }
      int v30 = v7[60];
LABEL_41:
      float32x4_t result = (_DWORD *)sub_100369978((uint64_t)&v35, (uint64_t)v38, (int16x8_t *)(*((void *)v7 + 15) + *((void *)v7 + 23) * v20++), v21, v30);
      uint64_t v10 = (int)v7[62];
      v21 += v10;
    }
    while (v20 < a2[1]);
  }
  return result;
}

void sub_1003694E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_10036951C(double a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t *a7, uint64_t *a8, int a9, int *a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, int a16)
{
  if (a9 >= 2)
  {
    if (a16 < 1)
    {
      uint64_t v16 = (a9 - 1);
      if (a13 >= 1)
      {
        uint64_t v64 = 0;
        uint64_t v65 = *a7;
        uint64_t v66 = *a8;
        do
        {
          uint64_t v67 = 0;
          uint64_t v68 = a7[++v64];
          uint64_t v69 = a8[v64];
          do
          {
            uint64_t v70 = 2 * a10[v67];
            LOWORD(a1) = *(_WORD *)(v65 + v70);
            int16x4_t v71 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a1).u64[0];
            *(float *)v71.i32 = (float)v71.i32[0];
            *(_DWORD *)(v66 + v67 * 4) = v71.i32[0];
            v71.i16[0] = *(_WORD *)(v68 + v70);
            *(void *)&a1 = vmovl_s16(v71).u64[0];
            *(float *)&a1 = (float)SLODWORD(a1);
            *(_DWORD *)(v69 + v67 * 4) = LODWORD(a1);
            ++v67;
          }
          while (a13 != v67);
          uint64_t v66 = v69;
          uint64_t v65 = v68;
        }
        while (v64 != v16);
      }
    }
    else
    {
      uint64_t v34 = 0;
      LODWORD(v16) = a9 - 1;
      uint64_t v35 = *a7;
      uint64_t v36 = *a8;
      do
      {
        uint64_t v37 = 0;
        uint64_t v38 = v35;
        uint64_t v39 = v36;
        uint64_t v35 = a7[++v34];
        uint64_t v36 = a8[v34];
        float v40 = (_DWORD *)(v39 + 4);
        float v41 = (_DWORD *)(v36 + 4);
        int v42 = 1;
        int v43 = a10 + 1;
        float32x4_t v44 = (float *)(a11 + 4);
        do
        {
          uint64_t v45 = v43;
          uint64_t v46 = v40;
          int v47 = v41;
          int v48 = v42;
          uint64_t v49 = 4 * v37;
          uint64_t v50 = a10[v37];
          float v51 = *(v44 - 1);
          uint64_t v52 = 2 * v50;
          LOWORD(a3) = *(_WORD *)(v38 + 2 * v50);
          *(void *)&a3 = vmovl_s16(*(int16x4_t *)&a3).u64[0];
          uint64_t v53 = 2 * ((int)v50 + a14);
          LOWORD(a4) = *(_WORD *)(v38 + v53);
          int16x4_t v54 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a4).u64[0];
          *(float *)v54.i32 = *v44 * (float)v54.i32[0];
          *(float *)&a3 = *(float *)v54.i32 + (float)((float)SLODWORD(a3) * v51);
          v54.i16[0] = *(_WORD *)(v35 + v52);
          *(void *)&a4 = vmovl_s16(v54).u64[0];
          *(float *)&a4 = (float)SLODWORD(a4);
          LOWORD(a5) = *(_WORD *)(v35 + v53);
          *(void *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
          *(float *)&a5 = (float)SLODWORD(a5);
          *(float *)&a2 = *v44 * *(float *)&a5;
          *(_DWORD *)(v39 + v49) = LODWORD(a3);
          *(float *)&a1 = *(float *)&a2 + (float)(*(float *)&a4 * v51);
          *(_DWORD *)(v36 + v49) = LODWORD(a1);
          ++v37;
          v44 += 2;
          ++v43;
          float v40 = v46 + 1;
          float v41 = v47 + 1;
          int v42 = v48 + 1;
        }
        while (a16 != v37);
        if (a16 < a13)
        {
          do
          {
            uint64_t v55 = *v45++;
            LOWORD(a1) = *(_WORD *)(v38 + 2 * v55);
            int16x4_t v56 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a1).u64[0];
            *(float *)v56.i32 = (float)v56.i32[0];
            *v46++ = v56.i32[0];
            v56.i16[0] = *(_WORD *)(v35 + 2 * v55);
            *(void *)&a1 = vmovl_s16(v56).u64[0];
            *(float *)&a1 = (float)SLODWORD(a1);
            *v47++ = LODWORD(a1);
            ++v48;
          }
          while (v48 < a13);
        }
      }
      while (v34 != a9 - 1);
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if ((int)v16 < a9)
  {
    if (a16 >= 1)
    {
      uint64_t v16 = v16;
      uint64_t v17 = (~a16 + a13);
      uint64_t v18 = (v17 + 1) & 0x1FFFFFFFELL;
      uint64_t v19 = (float *)(a11 + 4);
      while (1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = a7[v16];
        unint64_t v22 = (_DWORD *)a8[v16];
        unint64_t v23 = v19;
        unsigned int v24 = v22;
        int v25 = a10;
        do
        {
          uint64_t v26 = *v25++;
          LOWORD(a1) = *(_WORD *)(v21 + 2 * v26);
          *(void *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
          *(float *)&a2 = *(v23 - 1);
          LOWORD(a3) = *(_WORD *)(v21 + 2 * ((int)v26 + a14));
          *(void *)&a3 = vmovl_s16(*(int16x4_t *)&a3).u64[0];
          *(float *)&a3 = *v23 * (float)SLODWORD(a3);
          *(float *)&a1 = *(float *)&a3 + (float)((float)SLODWORD(a1) * *(float *)&a2);
          *v24++ = LODWORD(a1);
          --v20;
          v23 += 2;
        }
        while (-(uint64_t)a16 != v20);
        if (a16 >= a13) {
          goto LABEL_6;
        }
        if (v17)
        {
          uint64_t v27 = 0;
          uint64_t v28 = v18 - v20;
          do
          {
            int v29 = &v25[v27];
            LOWORD(a1) = *(_WORD *)(v21 + 2 * *v29);
            *(void *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
            *(float *)&a1 = (float)SLODWORD(a1);
            LOWORD(a2) = *(_WORD *)(v21 + 2 * v29[1]);
            *(void *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            *(float *)&a2 = (float)SLODWORD(a2);
            int v30 = &v24[v27];
            *int v30 = LODWORD(a1);
            v30[1] = LODWORD(a2);
            v27 += 2;
          }
          while (v18 != v27);
          if (v17 + 1 == v18) {
            goto LABEL_6;
          }
        }
        else
        {
          uint64_t v28 = -v20;
        }
        int v31 = &a10[v28];
        int32x4_t v32 = &v22[v28];
        do
        {
          uint64_t v33 = *v31++;
          LOWORD(a1) = *(_WORD *)(v21 + 2 * v33);
          *(void *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
          *(float *)&a1 = (float)SLODWORD(a1);
          *v32++ = LODWORD(a1);
          LODWORD(v28) = v28 + 1;
        }
        while ((int)v28 < a13);
LABEL_6:
        if ((int)++v16 >= a9) {
          return;
        }
      }
    }
    if (a13 >= 1)
    {
      uint64_t v57 = v16;
      if (a13 == 1)
      {
        uint64_t v58 = *a10;
        float32x4_t v59 = &a8[v16];
        float32x4_t v60 = &a7[v16];
        do
        {
          float32x4_t v62 = (_DWORD *)*v59++;
          float32x4_t v61 = v62;
          uint64_t v63 = *v60++;
          LOWORD(a1) = *(_WORD *)(v63 + 2 * v58);
          *(void *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
          *(float *)&a1 = (float)SLODWORD(a1);
          _DWORD *v61 = LODWORD(a1);
          LODWORD(v16) = v16 + 1;
        }
        while ((int)v16 < a9);
      }
      else
      {
        uint64_t v72 = a13 & 0xFFFFFFFE;
        if (a13 == v72)
        {
          do
          {
            uint64_t v73 = a7[v57];
            uint64_t v74 = (_DWORD *)(a8[v57] + 4);
            uint32x4_t v75 = a10 + 1;
            uint64_t v76 = a13 & 0xFFFFFFFE;
            do
            {
              LOWORD(a1) = *(_WORD *)(v73 + 2 * *(v75 - 1));
              *(void *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
              *(float *)&a1 = (float)SLODWORD(a1);
              LOWORD(a2) = *(_WORD *)(v73 + 2 * *v75);
              *(void *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
              *(float *)&a2 = (float)SLODWORD(a2);
              *(v74 - 1) = LODWORD(a1);
              *uint64_t v74 = LODWORD(a2);
              v74 += 2;
              v75 += 2;
              v76 -= 2;
            }
            while (v76);
            ++v57;
          }
          while ((int)v57 < a9);
        }
        else
        {
          uint64_t v77 = (4 * a13) & 0x3FFFFFFF8;
          do
          {
            uint64_t v78 = a7[v57];
            uint64_t v79 = a8[v57];
            uint64_t v80 = (_DWORD *)(v79 + 4);
            uint64_t v81 = a13 & 0xFFFFFFFE;
            int v82 = a10 + 1;
            do
            {
              LOWORD(a1) = *(_WORD *)(v78 + 2 * *(v82 - 1));
              *(void *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
              *(float *)&a1 = (float)SLODWORD(a1);
              LOWORD(a2) = *(_WORD *)(v78 + 2 * *v82);
              *(void *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
              *(float *)&a2 = (float)SLODWORD(a2);
              *(v80 - 1) = LODWORD(a1);
              *uint64_t v80 = LODWORD(a2);
              v82 += 2;
              v80 += 2;
              v81 -= 2;
            }
            while (v81);
            int v83 = (_DWORD *)(v79 + v77);
            uint64_t v84 = a13 - v72;
            int32x4_t v85 = (int *)((char *)a10 + v77);
            do
            {
              uint64_t v86 = *v85++;
              LOWORD(a1) = *(_WORD *)(v78 + 2 * v86);
              *(void *)&a1 = vmovl_s16(*(int16x4_t *)&a1).u64[0];
              *(float *)&a1 = (float)SLODWORD(a1);
              *v83++ = LODWORD(a1);
              --v84;
            }
            while (v84);
            ++v57;
          }
          while ((int)v57 < a9);
        }
      }
    }
  }
}

uint64_t sub_100369978(uint64_t a1, uint64_t a2, int16x8_t *a3, float *a4, int a5)
{
  float v7 = *a4;
  float v8 = a4[1];
  uint64_t v10 = *(float32x4_t **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t result = sub_100369AC8((uint64_t)&v33, (float32x4_t **)a2, a3, a4, a5);
  if ((int)result <= a5 - 4)
  {
    uint64_t v12 = (int)result;
    uint64_t v13 = (int16x4_t *)((char *)a3 + 2 * (int)result);
    uint64_t v14 = 4 * (int)result + 8;
    uint64_t v15 = (float *)(v9 + v14);
    uint64_t v16 = (float *)((char *)v10->f32 + v14);
    do
    {
      float v17 = rintf((float)(v8 * *(v15 - 1)) + (float)(*(v16 - 1) * v7));
      uint64_t v18 = (uint64_t)rintf((float)(v8 * *(v15 - 2)) + (float)(*(v16 - 2) * v7));
      float v20 = *v15;
      float v19 = v15[1];
      v15 += 4;
      float v21 = *v16;
      float v22 = v16[1];
      v16 += 4;
      v23.i64[0] = __PAIR64__((uint64_t)v17, v18);
      v23.i32[2] = (uint64_t)rintf((float)(v8 * v20) + (float)(v21 * v7));
      v23.i32[3] = (uint64_t)rintf((float)(v8 * v19) + (float)(v22 * v7));
      *v13++ = vqmovn_s32(v23);
      v12 += 4;
    }
    while (v12 <= a5 - 4);
    uint64_t result = v12;
  }
  if ((int)result < a5)
  {
    uint64_t v24 = (int)result;
    int v25 = &v10->f32[v24];
    uint64_t v26 = (float *)(v9 + v24 * 4);
    uint64_t v27 = &a3->i16[(int)result];
    uint64_t v28 = a5 - (uint64_t)(int)result;
    do
    {
      float v29 = *v25++;
      float v30 = v29;
      float v31 = *v26++;
      uint64_t v32 = (uint64_t)rintf((float)(v8 * v31) + (float)(v30 * v7));
      if ((int)v32 <= -32768) {
        LODWORD(v32) = -32768;
      }
      if ((int)v32 >= 0x7FFF) {
        LOWORD(v32) = 0x7FFF;
      }
      *v27++ = v32;
      --v28;
    }
    while (v28);
  }
  return result;
}

uint64_t sub_100369AC8(uint64_t a1, float32x4_t **a2, int16x8_t *a3, const float *a4, int a5)
{
  float32x4_t v6 = vld1q_dup_f32(a4);
  unsigned int v5 = a4 + 1;
  uint64_t result = 0;
  int v8 = a5 - 8;
  if (a5 >= 8)
  {
    float32x4_t v9 = vld1q_dup_f32(v5);
    uint64_t v10 = a2[1] + 1;
    double v11 = *a2 + 1;
    uint64_t v12 = (int8x16_t *)&unk_1004D2000;
    uint64_t v13 = (int8x16_t *)&unk_1004D2000;
    do
    {
      float32x4_t v15 = v11[-1];
      float32x4_t v14 = *v11;
      float32x4_t v17 = v10[-1];
      float32x4_t v16 = *v10;
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DC0, memory_order_acquire) & 1) == 0)
      {
        int v66 = result;
        float32x4_t v62 = a3;
        int v58 = v8;
        uint64_t v70 = v10;
        uint64_t v74 = v11;
        float32x4_t v50 = v9;
        float32x4_t v54 = v6;
        float32x4_t v42 = v15;
        float32x4_t v46 = v14;
        float32x4_t v34 = v17;
        float32x4_t v38 = v16;
        LODWORD(result) = __cxa_guard_acquire(qword_1004D2DC0);
        float32x4_t v17 = v34;
        float32x4_t v16 = v38;
        float32x4_t v15 = v42;
        float32x4_t v14 = v46;
        float32x4_t v9 = v50;
        float32x4_t v6 = v54;
        *(void *)&long long v22 = 0x8000000080000000;
        *((void *)&v22 + 1) = 0x8000000080000000;
        uint64_t v13 = (int8x16_t *)&unk_1004D2000;
        uint64_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = v70;
        double v11 = v74;
        int v8 = v58;
        a3 = v62;
        int v23 = result;
        LODWORD(result) = v66;
        if (v23)
        {
          xmmword_1004D2DB0 = v22;
          __cxa_guard_release(qword_1004D2DC0);
          float32x4_t v17 = v34;
          float32x4_t v16 = v38;
          float32x4_t v15 = v42;
          float32x4_t v14 = v46;
          float32x4_t v9 = v50;
          float32x4_t v6 = v54;
          uint64_t v13 = (int8x16_t *)&unk_1004D2000;
          uint64_t v12 = (int8x16_t *)&unk_1004D2000;
          uint64_t v10 = v70;
          double v11 = v74;
          int v8 = v58;
          LODWORD(result) = v66;
          a3 = v62;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2DE0, memory_order_acquire) & 1) == 0)
      {
        int v67 = result;
        uint64_t v63 = a3;
        int v59 = v8;
        int16x4_t v71 = v10;
        uint32x4_t v75 = v11;
        float32x4_t v51 = v9;
        float32x4_t v55 = v6;
        float32x4_t v43 = v15;
        float32x4_t v47 = v14;
        float32x4_t v35 = v17;
        float32x4_t v39 = v16;
        LODWORD(result) = __cxa_guard_acquire(&qword_1004D2DE0);
        float32x4_t v17 = v35;
        float32x4_t v16 = v39;
        float32x4_t v15 = v43;
        float32x4_t v14 = v47;
        float32x4_t v9 = v51;
        float32x4_t v6 = v55;
        *(void *)&long long v24 = 0x3F0000003F000000;
        *((void *)&v24 + 1) = 0x3F0000003F000000;
        uint64_t v13 = (int8x16_t *)&unk_1004D2000;
        uint64_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = v71;
        double v11 = v75;
        int v8 = v59;
        a3 = v63;
        int v25 = result;
        LODWORD(result) = v67;
        if (v25)
        {
          xmmword_1004D2DD0 = v24;
          __cxa_guard_release(&qword_1004D2DE0);
          float32x4_t v17 = v35;
          float32x4_t v16 = v39;
          float32x4_t v15 = v43;
          float32x4_t v14 = v47;
          float32x4_t v9 = v51;
          float32x4_t v6 = v55;
          uint64_t v13 = (int8x16_t *)&unk_1004D2000;
          uint64_t v12 = (int8x16_t *)&unk_1004D2000;
          uint64_t v10 = v71;
          double v11 = v75;
          int v8 = v59;
          LODWORD(result) = v67;
          a3 = v63;
        }
      }
      int8x16_t v18 = v13[221];
      int8x16_t v19 = v12[219];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DC0, memory_order_acquire) & 1) == 0)
      {
        int v68 = result;
        uint64_t v64 = a3;
        int v60 = v8;
        uint64_t v72 = v10;
        uint64_t v76 = v11;
        float32x4_t v52 = v9;
        float32x4_t v56 = v6;
        float32x4_t v44 = v15;
        float32x4_t v48 = v14;
        float32x4_t v36 = v17;
        float32x4_t v40 = v16;
        int8x16_t v30 = v19;
        int8x16_t v32 = v18;
        LODWORD(result) = __cxa_guard_acquire(qword_1004D2DC0);
        int8x16_t v19 = v30;
        int8x16_t v18 = v32;
        float32x4_t v17 = v36;
        float32x4_t v16 = v40;
        float32x4_t v15 = v44;
        float32x4_t v14 = v48;
        float32x4_t v9 = v52;
        float32x4_t v6 = v56;
        *(void *)&long long v26 = 0x8000000080000000;
        *((void *)&v26 + 1) = 0x8000000080000000;
        uint64_t v13 = (int8x16_t *)&unk_1004D2000;
        uint64_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = v72;
        double v11 = v76;
        int v8 = v60;
        a3 = v64;
        int v27 = result;
        LODWORD(result) = v68;
        if (v27)
        {
          xmmword_1004D2DB0 = v26;
          __cxa_guard_release(qword_1004D2DC0);
          int8x16_t v19 = v30;
          int8x16_t v18 = v32;
          float32x4_t v17 = v36;
          float32x4_t v16 = v40;
          float32x4_t v15 = v44;
          float32x4_t v14 = v48;
          float32x4_t v9 = v52;
          float32x4_t v6 = v56;
          uint64_t v13 = (int8x16_t *)&unk_1004D2000;
          uint64_t v12 = (int8x16_t *)&unk_1004D2000;
          uint64_t v10 = v72;
          double v11 = v76;
          int v8 = v60;
          LODWORD(result) = v68;
          a3 = v64;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2DE0, memory_order_acquire) & 1) == 0)
      {
        int v69 = result;
        uint64_t v65 = a3;
        int v61 = v8;
        uint64_t v73 = v10;
        uint64_t v77 = v11;
        float32x4_t v53 = v9;
        float32x4_t v57 = v6;
        float32x4_t v45 = v15;
        float32x4_t v49 = v14;
        float32x4_t v37 = v17;
        float32x4_t v41 = v16;
        int8x16_t v31 = v19;
        int8x16_t v33 = v18;
        LODWORD(result) = __cxa_guard_acquire(&qword_1004D2DE0);
        int8x16_t v19 = v31;
        int8x16_t v18 = v33;
        float32x4_t v17 = v37;
        float32x4_t v16 = v41;
        float32x4_t v15 = v45;
        float32x4_t v14 = v49;
        float32x4_t v9 = v53;
        float32x4_t v6 = v57;
        *(void *)&long long v28 = 0x3F0000003F000000;
        *((void *)&v28 + 1) = 0x3F0000003F000000;
        uint64_t v13 = (int8x16_t *)&unk_1004D2000;
        uint64_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = v73;
        double v11 = v77;
        int v8 = v61;
        a3 = v65;
        int v29 = result;
        LODWORD(result) = v69;
        if (v29)
        {
          xmmword_1004D2DD0 = v28;
          __cxa_guard_release(&qword_1004D2DE0);
          int8x16_t v19 = v31;
          int8x16_t v18 = v33;
          float32x4_t v17 = v37;
          float32x4_t v16 = v41;
          float32x4_t v15 = v45;
          float32x4_t v14 = v49;
          float32x4_t v9 = v53;
          float32x4_t v6 = v57;
          uint64_t v13 = (int8x16_t *)&unk_1004D2000;
          uint64_t v12 = (int8x16_t *)&unk_1004D2000;
          uint64_t v10 = v73;
          double v11 = v77;
          int v8 = v61;
          LODWORD(result) = v69;
          a3 = v65;
        }
      }
      int8x16_t v20 = (int8x16_t)vmlaq_f32(vmulq_f32(v6, v15), v9, v17);
      int8x16_t v21 = (int8x16_t)vmlaq_f32(vmulq_f32(v6, v14), v9, v16);
      *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v20, (float32x4_t)vorrq_s8(vandq_s8(v19, v20), v18)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v21, (float32x4_t)vorrq_s8(vandq_s8(v12[219], v21), v13[221]))));
      v10 += 2;
      v11 += 2;
      uint64_t result = (result + 8);
    }
    while (v8 >= (int)result);
  }
  return result;
}

uint64_t sub_100369E80(uint64_t a1)
{
  *(void *)a1 = off_10049B430;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unsigned int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  float32x4_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100369FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B470;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int8x16_t v20 = *(void **)(a2 + 72);
    int8x16_t v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    int v25 = *(void **)(a3 + 72);
    long long v26 = *(void **)(a1 + 176);
    *long long v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036A1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036A200(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036A214(uint64_t a1)
{
  sub_10036AAE8(a1);

  operator delete();
}

void sub_10036A24C(uint64_t a1, int *a2, double a3, double a4)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  signed int v6 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v7) = *(_DWORD *)(a1 + 248);
  if ((v7 * v6) >= 0x109) {
    operator new[]();
  }
  v8.i32[1] = 0;
  memset(v87, 0, 128);
  memset(v86, 0, sizeof(v86));
  if ((int)v7 >= 1)
  {
    memset(__b, 255, 4 * v7);
    uint64_t v9 = v6;
    if (v7 == 1)
    {
      uint64_t v10 = 0;
LABEL_9:
      float32x4_t v14 = &v83[v10 * v6];
      float32x4_t v15 = (void *)v86 + v10;
      uint64_t v16 = v7 - v10;
      do
      {
        *v15++ = v14;
        float32x4_t v14 = (_DWORD *)((char *)v14 + v9 * 4);
        --v16;
      }
      while (v16);
      goto LABEL_11;
    }
    uint64_t v10 = v7 & 0xFFFFFFFE;
    uint64_t v11 = (void *)v86 + 1;
    uint64_t v12 = v10;
    uint64_t v13 = v83;
    do
    {
      *(v11 - 1) = v13;
      *uint64_t v11 = &v13[v9];
      v13 += 2 * v6;
      v11 += 2;
      v12 -= 2;
    }
    while (v12);
    if (v10 != v7) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v17 = *a2;
  if ((int)v17 < a2[1])
  {
    int8x16_t v18 = (__int32 *)(*(void *)(a1 + 224) + 4 * (int)v17 * (int)v7);
    int v80 = ((v5 >> 3) & 0x1FF) + 1;
    while (1)
    {
      if ((int)v7 < 1) {
        goto LABEL_40;
      }
      int v82 = v18;
      unint64_t v19 = 0;
      LODWORD(v20) = 0;
      unsigned int v21 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v17) - (v7 >> 1) + 1;
      int v22 = v7;
      do
      {
        signed int v24 = *(_DWORD *)(a1 + 236);
        if ((int)(v21 + v19) >= v24) {
          int v25 = v24 - 1;
        }
        else {
          int v25 = v21 + v19;
        }
        if ((int)(v21 + v19) >= 0) {
          int v26 = v25;
        }
        else {
          int v26 = 0;
        }
        if ((int)v20 <= (int)v19) {
          unint64_t v20 = v19;
        }
        else {
          unint64_t v20 = v20;
        }
        if ((int)v20 < (int)v7)
        {
          while (v20 > 0xF || v26 != __b[v20])
          {
            if ((uint64_t)++v20 >= (int)v7) {
              goto LABEL_16;
            }
          }
          if (v20 > v19)
          {
            memcpy(*((void **)v86 + v19), *((const void **)v86 + v20), 4 * v6);
            LODWORD(v7) = *(_DWORD *)(a1 + 248);
          }
        }
LABEL_16:
        if ((int)v19 >= v22) {
          int v23 = v22;
        }
        else {
          int v23 = v19;
        }
        if (v20 == v7) {
          int v22 = v23;
        }
        v87[v19] = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v26;
        __b[v19++] = v26;
      }
      while ((uint64_t)v19 < (int)v7);
      int v27 = *(_DWORD *)(a1 + 240);
      if ((int)v7 > v22) {
        break;
      }
      int8x16_t v18 = v82;
LABEL_42:
      uint64_t v28 = *(void *)(a1 + 120);
      uint64_t v29 = *(void *)(a1 + 184);
      v8.i32[0] = *v18;
      LODWORD(a4) = v18[1];
      long long v30 = v86[0];
      if (v27 >= 8)
      {
        uint64_t v31 = 0;
        float32x4_t v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        float32x4_t v35 = (float32x4_t *)(v28 + v29 * v17 + 16);
        float32x4_t v36 = (float32x4_t *)(*((void *)&v86[0] + 1) + 16);
        float32x4_t v37 = (float32x4_t *)(*(void *)&v86[0] + 16);
        do
        {
          float32x4_t v38 = *v37;
          float32x4_t v39 = *v36;
          v35[-1] = vmlaq_f32(vmulq_n_f32(v37[-1], *(float *)v8.i32), v34, v36[-1]);
          v31 += 8;
          *float32x4_t v35 = vmlaq_f32(vmulq_n_f32(v38, *(float *)v8.i32), v34, v39);
          v35 += 2;
          v36 += 2;
          v37 += 2;
        }
        while (v31 <= (unint64_t)(v27 - 8));
        uint64_t v32 = v29 * v17;
        int v33 = v27 - 4;
        if ((int)v31 <= v27 - 4)
        {
LABEL_48:
          uint64_t v31 = (int)v31;
          unint64_t v40 = v33 - (uint64_t)(int)v31;
          if (v40 < 0xC) {
            goto LABEL_49;
          }
          uint64_t v57 = 4 * (int)v31;
          unint64_t v58 = v28 + v32 + v57;
          unint64_t v59 = (4 * v40) & 0xFFFFFFFFFFFFFFF0;
          unint64_t v60 = v28 + v59 + v32 + v57 + 16;
          unint64_t v61 = v59 + v57;
          unint64_t v62 = v30 + v59 + v57 + 16;
          BOOL v63 = v58 >= *((void *)&v30 + 1) + v61 + 16 || *((void *)&v30 + 1) + 4 * (int)v31 >= v60;
          BOOL v64 = !v63;
          if ((uint64_t)v30 + 4 * (int)v31 < v60 && v58 < v62) {
            goto LABEL_49;
          }
          if (v64) {
            goto LABEL_49;
          }
          uint64_t v66 = (v40 >> 2) + 1;
          float32x4_t v67 = (float32x4_t)vdupq_lane_s32(v8, 0);
          uint64_t v31 = (int)v31 + 4 * (v66 & 0x7FFFFFFFFFFFFFFCLL);
          int v68 = (float *)(v28 + v57 + v29 * v17);
          int v69 = (const float *)(v30 + v57);
          uint64_t v70 = (const float *)(*((void *)&v30 + 1) + v57);
          uint64_t v71 = v66 & 0x7FFFFFFFFFFFFFFCLL;
          do
          {
            float32x4x4_t v88 = vld4q_f32(v69);
            v69 += 16;
            float32x4x4_t v89 = vld4q_f32(v70);
            v70 += 16;
            v90.val[0] = vmlaq_f32(vmulq_n_f32(v89.val[0], *(float *)&a4), v67, v88.val[0]);
            v90.val[1] = vmlaq_f32(vmulq_n_f32(v89.val[1], *(float *)&a4), v67, v88.val[1]);
            v90.val[2] = vmlaq_f32(vmulq_n_f32(v89.val[2], *(float *)&a4), v67, v88.val[2]);
            v90.val[3] = vmlaq_f32(vmulq_n_f32(v89.val[3], *(float *)&a4), v67, v88.val[3]);
            vst4q_f32(v68, v90);
            v68 += 16;
            v71 -= 4;
          }
          while (v71);
          if (v66 != (v66 & 0x7FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            float32x2_t v41 = (float32x2_t)vdup_lane_s32(v8, 0);
            float32x4_t v42 = (float32x2_t *)(v28 + 4 * v31 + v29 * v17 + 8);
            float32x4_t v43 = (float32x2_t *)(*((void *)&v30 + 1) + 4 * v31 + 8);
            float32x4_t v44 = (float32x2_t *)(v30 + 4 * v31 + 8);
            do
            {
              v42[-1] = vmla_f32(vmul_n_f32(v43[-1], *(float *)&a4), v41, v44[-1]);
              float32x2_t v45 = *v44;
              v44 += 2;
              float32x2_t v46 = v45;
              float32x2_t v47 = *v43;
              v43 += 2;
              v31 += 4;
              float32x2_t *v42 = vmla_f32(vmul_n_f32(v47, *(float *)&a4), v41, v46);
              v42 += 2;
            }
            while (v31 <= v33);
          }
        }
      }
      else
      {
        LODWORD(v31) = 0;
        uint64_t v32 = v29 * v17;
        int v33 = v27 - 4;
        if (v27 - 4 >= 0) {
          goto LABEL_48;
        }
      }
      if ((int)v31 < v27)
      {
        uint64_t v31 = (int)v31;
        unint64_t v48 = v27 - (uint64_t)(int)v31;
        if (v48 < 0xC) {
          goto LABEL_53;
        }
        uint64_t v72 = 4 * (int)v31;
        uint64_t v73 = v32 + v28 + v72;
        if ((unint64_t)(v73 - (v72 + v30)) < 0x20) {
          goto LABEL_53;
        }
        if ((unint64_t)(v73 - (v72 + *((void *)&v30 + 1))) < 0x20) {
          goto LABEL_53;
        }
        uint64_t v31 = (v48 & 0xFFFFFFFFFFFFFFF8) + (int)v31;
        float32x4_t v74 = (float32x4_t)vdupq_lane_s32(v8, 0);
        uint32x4_t v75 = (float32x4_t *)(v28 + v72 + v29 * v17 + 16);
        uint64_t v76 = (float32x4_t *)(v30 + v72 + 16);
        uint64_t v77 = (float32x4_t *)(*((void *)&v30 + 1) + v72 + 16);
        unint64_t v78 = v48 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float32x4_t v79 = vmlaq_f32(vmulq_n_f32(*v77, *(float *)&a4), v74, *v76);
          v75[-1] = vmlaq_f32(vmulq_n_f32(v77[-1], *(float *)&a4), v74, v76[-1]);
          *uint32x4_t v75 = v79;
          v75 += 2;
          v76 += 2;
          v77 += 2;
          v78 -= 8;
        }
        while (v78);
        if (v48 != (v48 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_53:
          uint64_t v49 = v27 - v31;
          uint64_t v50 = 4 * v31;
          float32x4_t v51 = (float *)(v28 + v50 + v29 * v17);
          float32x4_t v52 = (float *)(*((void *)&v30 + 1) + v50);
          float32x4_t v53 = (float *)(v30 + v50);
          do
          {
            float v54 = *v53++;
            float v55 = v54;
            float v56 = *v52++;
            *v51++ = (float)(*(float *)&a4 * v56) + (float)(v55 * *(float *)v8.i32);
            --v49;
          }
          while (v49);
        }
      }
      ++v17;
      uint64_t v7 = *(int *)(a1 + 248);
      v18 += v7;
      if (v17 >= a2[1]) {
        return;
      }
    }
    sub_10036A840((uint64_t)&v84, &v87[v22], (uint64_t *)v86 + v22, v7 - v22, *(int **)(a1 + 200), *(void *)(a1 + 216), *(unsigned int *)(a1 + 232), v27, v80, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
    int8x16_t v18 = v82;
LABEL_40:
    int v27 = *(_DWORD *)(a1 + 240);
    goto LABEL_42;
  }
}

void sub_10036A840(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  if (a4 >= 2)
  {
    if (a11 < 1)
    {
      uint64_t v11 = (a4 - 1);
      if (a8 >= 1)
      {
        uint64_t v54 = 0;
        uint64_t v55 = *a2;
        uint64_t v56 = *a3;
        do
        {
          uint64_t v57 = 0;
          uint64_t v58 = a2[++v54];
          uint64_t v59 = a3[v54];
          do
          {
            uint64_t v60 = 4 * a5[v57];
            *(_DWORD *)(v56 + v57 * 4) = *(_DWORD *)(v55 + v60);
            *(_DWORD *)(v59 + v57 * 4) = *(_DWORD *)(v58 + v60);
            ++v57;
          }
          while (a8 != v57);
          uint64_t v56 = v59;
          uint64_t v55 = v58;
        }
        while (v54 != v11);
      }
    }
    else
    {
      uint64_t v24 = 0;
      LODWORD(v11) = a4 - 1;
      uint64_t v25 = *a2;
      uint64_t v26 = *a3;
      do
      {
        uint64_t v27 = 0;
        uint64_t v28 = v25;
        uint64_t v29 = v26;
        uint64_t v25 = a2[++v24];
        uint64_t v26 = a3[v24];
        long long v30 = (_DWORD *)(v29 + 4);
        uint64_t v31 = (_DWORD *)(v26 + 4);
        int v32 = 1;
        int v33 = a5 + 1;
        float32x4_t v34 = (float *)(a6 + 4);
        do
        {
          float32x4_t v35 = v33;
          float32x4_t v36 = v30;
          float32x4_t v37 = v31;
          int v38 = v32;
          uint64_t v39 = 4 * v27;
          uint64_t v40 = a5[v27];
          float v41 = *(v34 - 1);
          uint64_t v42 = 4 * v40;
          float v43 = *(float *)(v28 + 4 * v40);
          uint64_t v44 = 4 * ((int)v40 + a9);
          float v45 = *(float *)(v25 + v42);
          float v46 = *v34 * *(float *)(v25 + v44);
          *(float *)(v29 + v39) = (float)(*v34 * *(float *)(v28 + v44)) + (float)(v43 * v41);
          *(float *)(v26 + v39) = v46 + (float)(v45 * v41);
          ++v27;
          v34 += 2;
          ++v33;
          long long v30 = v36 + 1;
          uint64_t v31 = v37 + 1;
          int v32 = v38 + 1;
        }
        while (a11 != v27);
        if (a11 < a8)
        {
          do
          {
            uint64_t v47 = *v35++;
            *v36++ = *(_DWORD *)(v28 + 4 * v47);
            *v37++ = *(_DWORD *)(v25 + 4 * v47);
            ++v38;
          }
          while (v38 < a8);
        }
      }
      while (v24 != a4 - 1);
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < a4)
  {
    if (a11 < 1)
    {
      if (a8 >= 1)
      {
        uint64_t v48 = v11;
        do
        {
          uint64_t v49 = a2[v48];
          uint64_t v50 = (_DWORD *)a3[v48];
          uint64_t v51 = a8;
          float32x4_t v52 = a5;
          do
          {
            uint64_t v53 = *v52++;
            *v50++ = *(_DWORD *)(v49 + 4 * v53);
            --v51;
          }
          while (v51);
          ++v48;
        }
        while ((int)v48 < a4);
      }
    }
    else
    {
      uint64_t v11 = v11;
      uint64_t v12 = (float *)(a6 + 4);
      do
      {
        uint64_t v13 = 0;
        uint64_t v14 = a2[v11];
        uint64_t v15 = a3[v11];
        uint64_t v16 = (_DWORD *)(v15 + 4);
        int v17 = 1;
        int8x16_t v18 = a5 + 1;
        unint64_t v19 = v12;
        do
        {
          unint64_t v20 = v18;
          unsigned int v21 = v16;
          int v22 = v17;
          *(float *)(v15 + 4 * v13) = (float)(*(float *)(v14 + 4 * (a5[v13] + a9)) * *v19)
                                    + (float)(*(float *)(v14 + 4 * a5[v13]) * *(v19 - 1));
          ++v13;
          v19 += 2;
          ++v18;
          ++v16;
          ++v17;
        }
        while (a11 != v13);
        if (a11 < a8)
        {
          do
          {
            uint64_t v23 = *v20++;
            *v21++ = *(_DWORD *)(v14 + 4 * v23);
            ++v22;
          }
          while (v22 < a8);
        }
        ++v11;
      }
      while ((int)v11 < a4);
    }
  }
}

uint64_t sub_10036AAE8(uint64_t a1)
{
  *(void *)a1 = off_10049B470;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unsigned int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_10036AC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B4B0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    unint64_t v20 = *(void **)(a2 + 72);
    unsigned int v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v25 = *(void **)(a3 + 72);
    uint64_t v26 = *(void **)(a1 + 176);
    *uint64_t v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036AE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036AE68(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036AE7C(uint64_t a1)
{
  sub_10036B6F8(a1);

  operator delete();
}

void sub_10036AEB4(uint64_t a1, int *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  signed int v4 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v5) = *(_DWORD *)(a1 + 248);
  if ((v5 * v4) >= 0x89) {
    operator new[]();
  }
  memset(v78, 0, 128);
  memset(v77, 0, sizeof(v77));
  if ((int)v5 >= 1)
  {
    memset(__b, 255, 4 * v5);
    uint64_t v6 = v4;
    if (v5 == 1)
    {
      uint64_t v7 = 0;
LABEL_9:
      uint64_t v11 = &v74[v7 * v4];
      uint64_t v12 = (void *)v77 + v7;
      uint64_t v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        uint64_t v11 = (void *)((char *)v11 + v6 * 8);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    uint64_t v7 = v5 & 0xFFFFFFFE;
    uint64_t v8 = (void *)v77 + 1;
    uint64_t v9 = v7;
    uint64_t v10 = v74;
    do
    {
      *(v8 - 1) = v10;
      *uint64_t v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v14 = *a2;
  if ((int)v14 < a2[1])
  {
    uint64_t v15 = (float *)(*(void *)(a1 + 224) + 4 * (int)v14 * (int)v5);
    int v71 = ((v3 >> 3) & 0x1FF) + 1;
    while (1)
    {
      if ((int)v5 < 1) {
        goto LABEL_40;
      }
      uint64_t v73 = v15;
      unint64_t v16 = 0;
      LODWORD(v17) = 0;
      unsigned int v18 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v14) - (v5 >> 1) + 1;
      int v19 = v5;
      do
      {
        signed int v21 = *(_DWORD *)(a1 + 236);
        if ((int)(v18 + v16) >= v21) {
          int v22 = v21 - 1;
        }
        else {
          int v22 = v18 + v16;
        }
        if ((int)(v18 + v16) >= 0) {
          int v23 = v22;
        }
        else {
          int v23 = 0;
        }
        if ((int)v17 <= (int)v16) {
          unint64_t v17 = v16;
        }
        else {
          unint64_t v17 = v17;
        }
        if ((int)v17 < (int)v5)
        {
          while (v17 > 0xF || v23 != __b[v17])
          {
            if ((uint64_t)++v17 >= (int)v5) {
              goto LABEL_16;
            }
          }
          if (v17 > v16)
          {
            memcpy(*((void **)v77 + v16), *((const void **)v77 + v17), 8 * v4);
            LODWORD(v5) = *(_DWORD *)(a1 + 248);
          }
        }
LABEL_16:
        if ((int)v16 >= v19) {
          int v20 = v19;
        }
        else {
          int v20 = v16;
        }
        if (v17 == v5) {
          int v19 = v20;
        }
        v78[v16] = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v23;
        __b[v16++] = v23;
      }
      while ((uint64_t)v16 < (int)v5);
      int v24 = *(_DWORD *)(a1 + 240);
      if ((int)v5 > v19) {
        break;
      }
      uint64_t v15 = v73;
LABEL_42:
      uint64_t v25 = *(void *)(a1 + 120);
      uint64_t v26 = *(void *)(a1 + 184);
      uint64_t v27 = v26 * v14;
      *(double *)&uint64_t v28 = *v15;
      double v29 = v15[1];
      long long v30 = v77[0];
      unint64_t v31 = (v24 - 4);
      if (v24 < 4)
      {
        uint64_t v32 = 0;
        if (v24 > 0) {
          goto LABEL_50;
        }
        goto LABEL_13;
      }
      if (v31 < 0xC)
      {
        unint64_t v33 = 0;
LABEL_47:
        float32x4_t v34 = (double *)(v25 + 8 * v33 + v26 * v14 + 16);
        float32x4_t v35 = (double *)(*((void *)&v30 + 1) + 8 * v33 + 16);
        float32x4_t v36 = (double *)(v30 + 8 * v33 + 16);
        do
        {
          double v37 = *(v35 - 1) * v29 + *(v36 - 1) * *(double *)&v28;
          *(v34 - 2) = *(v35 - 2) * v29 + *(v36 - 2) * *(double *)&v28;
          *(v34 - 1) = v37;
          double v38 = *v35;
          double v39 = v35[1];
          v35 += 4;
          double v40 = *v36;
          double v41 = v36[1];
          v36 += 4;
          v33 += 4;
          *float32x4_t v34 = v38 * v29 + v40 * *(double *)&v28;
          v34[1] = v39 * v29 + v41 * *(double *)&v28;
          v34 += 4;
        }
        while (v33 <= v31);
        goto LABEL_49;
      }
      unint64_t v33 = 0;
      uint64_t v51 = (8 * v31) & 0x7FFFFFFE0;
      unint64_t v52 = v25 + v27 + v51 + 32;
      BOOL v54 = v25 + v27 < (unint64_t)(*((void *)&v77[0] + 1) + v51 + 32) && *((void *)&v77[0] + 1) < v52;
      unint64_t v55 = *(void *)&v77[0] + v51 + 32;
      if (*(void *)&v77[0] < v52 && v25 + v27 < v55) {
        goto LABEL_47;
      }
      if (v54) {
        goto LABEL_47;
      }
      uint64_t v57 = (v31 >> 2) + 1;
      unint64_t v33 = 4 * (v57 & 0x7FFFFFFE);
      float64x2_t v58 = (float64x2_t)vdupq_lane_s64(v28, 0);
      uint64_t v59 = (double *)(v25 + v26 * v14);
      uint64_t v60 = v57 & 0x7FFFFFFE;
      unint64_t v61 = (const double *)*((void *)&v77[0] + 1);
      unint64_t v62 = *(const double **)&v77[0];
      do
      {
        float64x2x4_t v79 = vld4q_f64(v62);
        v62 += 8;
        float64x2x4_t v80 = vld4q_f64(v61);
        v61 += 8;
        v81.val[0] = vmlaq_f64(vmulq_n_f64(v80.val[0], v29), v58, v79.val[0]);
        v81.val[1] = vmlaq_f64(vmulq_n_f64(v80.val[1], v29), v58, v79.val[1]);
        v81.val[2] = vmlaq_f64(vmulq_n_f64(v80.val[2], v29), v58, v79.val[2]);
        v81.val[3] = vmlaq_f64(vmulq_n_f64(v80.val[3], v29), v58, v79.val[3]);
        vst4q_f64(v59, v81);
        v59 += 8;
        v60 -= 2;
      }
      while (v60);
      if (v57 != (v57 & 0x7FFFFFFE)) {
        goto LABEL_47;
      }
LABEL_49:
      uint64_t v32 = v33;
      if ((int)v33 < v24)
      {
LABEL_50:
        unint64_t v42 = v24 - v32;
        if (v42 < 0xA) {
          goto LABEL_51;
        }
        uint64_t v63 = 8 * v32;
        uint64_t v64 = v27 + v25 + 8 * v32;
        if ((unint64_t)(v64 - (8 * v32 + v30)) < 0x20) {
          goto LABEL_51;
        }
        if ((unint64_t)(v64 - (v63 + *((void *)&v30 + 1))) < 0x20) {
          goto LABEL_51;
        }
        v32 += v42 & 0xFFFFFFFFFFFFFFFCLL;
        float64x2_t v65 = (float64x2_t)vdupq_lane_s64(v28, 0);
        uint64_t v66 = (float64x2_t *)(v25 + v63 + v26 * v14 + 16);
        float32x4_t v67 = (float64x2_t *)(v30 + v63 + 16);
        int v68 = (float64x2_t *)(*((void *)&v30 + 1) + v63 + 16);
        unint64_t v69 = v42 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v70 = vmlaq_f64(vmulq_n_f64(*v68, v29), v65, *v67);
          v66[-1] = vmlaq_f64(vmulq_n_f64(v68[-1], v29), v65, v67[-1]);
          *uint64_t v66 = v70;
          v66 += 2;
          v67 += 2;
          v68 += 2;
          v69 -= 4;
        }
        while (v69);
        if (v42 != (v42 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          uint64_t v43 = v24 - v32;
          uint64_t v44 = 8 * v32;
          float v45 = (double *)(v25 + v44 + v26 * v14);
          float v46 = (double *)(*((void *)&v30 + 1) + v44);
          uint64_t v47 = (double *)(v30 + v44);
          do
          {
            double v48 = *v47++;
            double v49 = v48;
            double v50 = *v46++;
            *v45++ = v50 * v29 + v49 * *(double *)&v28;
            --v43;
          }
          while (v43);
        }
      }
LABEL_13:
      ++v14;
      uint64_t v5 = *(int *)(a1 + 248);
      v15 += v5;
      if (v14 >= a2[1]) {
        return;
      }
    }
    sub_10036B440((uint64_t)&v75, &v78[v19], (uint64_t *)v77 + v19, v5 - v19, *(int **)(a1 + 200), *(void *)(a1 + 216), *(unsigned int *)(a1 + 232), v24, v71, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
    uint64_t v15 = v73;
LABEL_40:
    int v24 = *(_DWORD *)(a1 + 240);
    goto LABEL_42;
  }
}

void sub_10036B440(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int *a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  if (a4 >= 2)
  {
    if (a11 < 1)
    {
      uint64_t v11 = (a4 - 1);
      if (a8 >= 1)
      {
        uint64_t v56 = 0;
        uint64_t v57 = *a2;
        uint64_t v58 = *a3;
        do
        {
          uint64_t v59 = 0;
          uint64_t v60 = a2[++v56];
          uint64_t v61 = a3[v56];
          do
          {
            uint64_t v62 = 8 * a5[v59];
            uint64_t v63 = 8 * v59;
            *(void *)(v58 + v63) = *(void *)(v57 + v62);
            *(void *)(v61 + v63) = *(void *)(v60 + v62);
            ++v59;
          }
          while (a8 != v59);
          uint64_t v58 = v61;
          uint64_t v57 = v60;
        }
        while (v56 != v11);
      }
    }
    else
    {
      uint64_t v24 = 0;
      LODWORD(v11) = a4 - 1;
      uint64_t v25 = *a2;
      uint64_t v26 = *a3;
      do
      {
        uint64_t v27 = 0;
        uint64_t v28 = v25;
        uint64_t v29 = v26;
        uint64_t v25 = a2[++v24];
        uint64_t v26 = a3[v24];
        long long v30 = (void *)(v29 + 8);
        unint64_t v31 = (void *)(v26 + 8);
        int v32 = 1;
        unint64_t v33 = a5 + 1;
        float32x4_t v34 = (float *)(a6 + 4);
        do
        {
          float32x4_t v35 = v33;
          float32x4_t v36 = v30;
          double v37 = v31;
          int v38 = v32;
          uint64_t v39 = a5[v27];
          double v40 = *(v34 - 1);
          double v41 = *v34;
          uint64_t v42 = 8 * v39;
          double v43 = *(double *)(v28 + 8 * v39);
          uint64_t v44 = 8 * ((int)v39 + a9);
          double v45 = *(double *)(v28 + v44) * v41 + v43 * v40;
          double v46 = *(double *)(v25 + v42);
          double v47 = *(double *)(v25 + v44) * v41;
          uint64_t v48 = 8 * v27;
          *(double *)(v29 + v48) = v45;
          *(double *)(v26 + v48) = v47 + v46 * v40;
          ++v27;
          v34 += 2;
          ++v33;
          long long v30 = v36 + 1;
          unint64_t v31 = v37 + 1;
          ++v32;
        }
        while (a11 != v27);
        if (a11 < a8)
        {
          do
          {
            uint64_t v49 = *v35++;
            *v36++ = *(void *)(v28 + 8 * v49);
            *v37++ = *(void *)(v25 + 8 * v49);
            ++v38;
          }
          while (v38 < a8);
        }
      }
      while (v24 != a4 - 1);
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < a4)
  {
    if (a11 < 1)
    {
      if (a8 >= 1)
      {
        uint64_t v50 = v11;
        do
        {
          uint64_t v51 = a2[v50];
          unint64_t v52 = (void *)a3[v50];
          uint64_t v53 = a8;
          BOOL v54 = a5;
          do
          {
            uint64_t v55 = *v54++;
            *v52++ = *(void *)(v51 + 8 * v55);
            --v53;
          }
          while (v53);
          ++v50;
        }
        while ((int)v50 < a4);
      }
    }
    else
    {
      uint64_t v11 = v11;
      uint64_t v12 = (float *)(a6 + 4);
      do
      {
        uint64_t v13 = 0;
        uint64_t v14 = a2[v11];
        uint64_t v15 = a3[v11];
        unint64_t v16 = (void *)(v15 + 8);
        int v17 = 1;
        unsigned int v18 = a5 + 1;
        int v19 = v12;
        do
        {
          int v20 = v18;
          signed int v21 = v16;
          int v22 = v17;
          *(double *)(v15 + 8 * v13) = *(double *)(v14 + 8 * (a5[v13] + a9)) * *v19
                                     + *(double *)(v14 + 8 * a5[v13]) * *(v19 - 1);
          ++v13;
          v19 += 2;
          ++v18;
          ++v16;
          ++v17;
        }
        while (a11 != v13);
        if (a11 < a8)
        {
          do
          {
            uint64_t v23 = *v20++;
            *v21++ = *(void *)(v14 + 8 * v23);
            ++v22;
          }
          while (v22 < a8);
        }
        ++v11;
      }
      while ((int)v11 < a4);
    }
  }
}

uint64_t sub_10036B6F8(uint64_t a1)
{
  *(void *)a1 = off_10049B4B0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_10036B834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B4F0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v20 = *(void **)(a2 + 72);
    signed int v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v25 = *(void **)(a3 + 72);
    uint64_t v26 = *(void **)(a1 + 176);
    *uint64_t v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036BA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036BA78(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036BA8C(uint64_t a1)
{
  sub_10036C384(a1);

  operator delete();
}

uint64_t sub_10036BAC4(uint64_t result, int *a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(_DWORD *)(result + 8);
  signed int v4 = (*(_DWORD *)(result + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v5) = *(_DWORD *)(result + 248);
  if ((v5 * v4) >= 0x109) {
    operator new[]();
  }
  memset(v106, 0, 128);
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  if ((int)v5 >= 1)
  {
    uint64_t result = (uint64_t)memset(__b, 255, 4 * v5);
    uint64_t v6 = v4;
    if (v5 == 1)
    {
      uint64_t v7 = 0;
LABEL_9:
      uint64_t v11 = &v95[v7 * v4];
      uint64_t v12 = (void *)&v98 + v7;
      uint64_t v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        uint64_t v11 = (_DWORD *)((char *)v11 + v6 * 4);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    uint64_t v7 = v5 & 0xFFFFFFFE;
    uint64_t v8 = (void *)&v98 + 1;
    uint64_t v9 = v7;
    uint64_t v10 = v95;
    do
    {
      *(v8 - 1) = v10;
      *uint64_t v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v14 = *a2;
  if ((int)v14 < a2[1])
  {
    signed int v91 = ((v3 >> 3) & 0x1FF) + 1;
    uint64_t v15 = *(void *)(v2 + 224) + 2 * (int)v14 * (int)v5;
    v16.i64[0] = 0x20000000200000;
    v16.i64[1] = 0x20000000200000;
    int32x4_t v17 = 0uLL;
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    int8x16_t v19 = (int8x16_t)xmmword_1004047D0;
    int8x16_t v20 = (int8x16_t)xmmword_1004047C0;
    do
    {
      if ((int)v5 >= 1)
      {
        int8x16x2_t v93 = (__int16 *)v15;
        uint64_t v94 = v14;
        unint64_t v21 = 0;
        LODWORD(v15) = 0;
        unsigned int v22 = *(_DWORD *)(*(void *)(v2 + 208) + 4 * v14) - (v5 >> 1) + 1;
        int v23 = v5;
        do
        {
          signed int v25 = *(_DWORD *)(v2 + 236);
          if ((int)(v22 + v21) >= v25) {
            int v26 = v25 - 1;
          }
          else {
            int v26 = v22 + v21;
          }
          if ((int)(v22 + v21) >= 0) {
            int v27 = v26;
          }
          else {
            int v27 = 0;
          }
          if ((int)v15 <= (int)v21) {
            uint64_t v15 = v21;
          }
          else {
            uint64_t v15 = v15;
          }
          if ((int)v15 < (int)v5)
          {
            while ((unint64_t)v15 > 0xF || v27 != __b[v15])
            {
              if (++v15 >= (int)v5) {
                goto LABEL_16;
              }
            }
            if (v15 > v21)
            {
              uint64_t result = (uint64_t)memcpy(*((void **)&v98 + v21), *((const void **)&v98 + v15), 4 * v4);
              int8x16_t v20 = (int8x16_t)xmmword_1004047C0;
              int8x16_t v19 = (int8x16_t)xmmword_1004047D0;
              v18.i64[0] = 0xFF000000FFLL;
              v18.i64[1] = 0xFF000000FFLL;
              int32x4_t v17 = 0uLL;
              v16.i64[0] = 0x20000000200000;
              v16.i64[1] = 0x20000000200000;
              LODWORD(v5) = *(_DWORD *)(v2 + 248);
            }
          }
LABEL_16:
          if ((int)v21 >= v23) {
            int v24 = v23;
          }
          else {
            int v24 = v21;
          }
          if (v15 == v5) {
            int v23 = v24;
          }
          v106[v21] = *(void *)(v2 + 24) + **(void **)(v2 + 80) * v27;
          __b[v21++] = v27;
        }
        while ((uint64_t)v21 < (int)v5);
        unsigned int v28 = *(_DWORD *)(v2 + 240);
        if ((int)v5 <= v23)
        {
          uint64_t v15 = (uint64_t)v93;
          uint64_t v14 = v94;
          if ((int)v28 < 1) {
            goto LABEL_13;
          }
          goto LABEL_43;
        }
        uint64_t result = sub_10036C108((uint64_t)&v96, (uint64_t)&v106[v23], (uint64_t)&v98 + 8 * v23, (int)v5 - v23, *(void *)(v2 + 200), *(__int16 **)(v2 + 216), *(_DWORD *)(v2 + 232), v28, v91, *(_DWORD *)(v2 + 252), *(_DWORD *)(v2 + 256));
        int8x16_t v20 = (int8x16_t)xmmword_1004047C0;
        int8x16_t v19 = (int8x16_t)xmmword_1004047D0;
        v18.i64[0] = 0xFF000000FFLL;
        v18.i64[1] = 0xFF000000FFLL;
        int32x4_t v17 = 0uLL;
        v16.i64[0] = 0x20000000200000;
        v16.i64[1] = 0x20000000200000;
        uint64_t v15 = (uint64_t)v93;
        uint64_t v14 = v94;
      }
      unsigned int v28 = *(_DWORD *)(v2 + 240);
      if ((int)v28 < 1) {
        goto LABEL_13;
      }
LABEL_43:
      uint64_t v29 = *(void *)(v2 + 120);
      uint64_t v30 = *(void *)(v2 + 184);
      unsigned int v31 = *(__int16 *)v15;
      unsigned int v32 = *(__int16 *)(v15 + 2);
      unsigned int v33 = *(__int16 *)(v15 + 4);
      unsigned int v34 = *(__int16 *)(v15 + 6);
      long long v35 = v98;
      uint64_t result = v28;
      long long v36 = v99;
      if (v28 < 8)
      {
        uint64_t v37 = 0;
LABEL_80:
        result -= v37;
        uint64_t v76 = (unsigned char *)(v29 + v37 + v30 * v14);
        uint64_t v77 = 4 * v37;
        unint64_t v78 = (int *)(*((void *)&v36 + 1) + v77);
        float64x2x4_t v79 = (int *)(v36 + v77);
        float64x2x4_t v80 = (int *)(*((void *)&v35 + 1) + v77);
        float64x2x4_t v81 = (int *)(v35 + v77);
        do
        {
          int v83 = *v81++;
          int v82 = v83;
          int v85 = *v80++;
          int v84 = v85;
          int v87 = *v79++;
          int v86 = v87;
          int v88 = *v78++;
          int v89 = v84 * v32 + v82 * v31 + v86 * v33 + v88 * v34 + 0x200000;
          int v90 = (v89 >> 22) & ~(v89 >> 31);
          if (v90 >= 255) {
            LOBYTE(v90) = -1;
          }
          *v76++ = v90;
          --result;
        }
        while (result);
        goto LABEL_13;
      }
      uint64_t v37 = 0;
      unint64_t v38 = v29 + v30 * v14;
      unint64_t v39 = v29 + v30 * v14 + v28;
      BOOL v41 = v38 < *((void *)&v98 + 1) + 4 * (unint64_t)v28 && *((void *)&v98 + 1) < v39;
      BOOL v43 = v38 < (unint64_t)v99 + 4 * v28 && (unint64_t)v99 < v39;
      BOOL v45 = v38 < *((void *)&v99 + 1) + 4 * (unint64_t)v28 && *((void *)&v99 + 1) < v39;
      BOOL v46 = (unint64_t)v98 >= v39 || v38 >= (unint64_t)v98 + 4 * v28;
      if (!v46 || v41 || v43 || v45) {
        goto LABEL_80;
      }
      int32x4_t v47 = vdupq_n_s32(v31);
      int32x4_t v48 = vdupq_n_s32(v32);
      int32x4_t v49 = vdupq_n_s32(v33);
      int32x4_t v50 = vdupq_n_s32(v34);
      if (v28 >= 0x10)
      {
        uint64_t v37 = v28 & 0x7FFFFFF0;
        uint64_t v51 = (int8x16_t *)(v29 + v30 * v14);
        uint64_t v52 = v28 & 0xFFFFFFF0;
        uint64_t v53 = (int32x4_t *)*((void *)&v99 + 1);
        BOOL v54 = (int32x4_t *)v99;
        uint64_t v55 = (int32x4_t *)*((void *)&v98 + 1);
        uint64_t v56 = (int32x4_t *)v98;
        do
        {
          int32x4_t v58 = v54[2];
          int32x4_t v57 = v54[3];
          int32x4_t v59 = *v54;
          int32x4_t v60 = v54[1];
          v54 += 4;
          v108.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v55[1], v48), v56[1], v47), v60, v49), v53[1], v50), v16), 0x16uLL), v17), v18);
          v108.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(*v55, v48), *v56, v47), v59, v49), *v53, v50), v16), 0x16uLL), v17), v18);
          v108.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v55[2], v48), v56[2], v47), v58, v49), v53[2], v50), v16), 0x16uLL), v17), v18);
          v108.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v55[3], v48), v56[3], v47), v57, v49), v53[3], v50), v16), 0x16uLL), v17), v18);
          *v51++ = vqtbl4q_s8(v108, v20);
          v56 += 4;
          v55 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (v37 == result) {
          goto LABEL_13;
        }
        if ((result & 8) == 0) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v61 = v37;
      uint64_t v37 = result & 0xFFFFFFF8;
      uint64_t v62 = (int32x4_t *)(v35 + 4 * v61);
      uint64_t v63 = (int32x4_t *)(*((void *)&v35 + 1) + 4 * v61);
      uint64_t v64 = (int32x4_t *)(v36 + 4 * v61);
      float64x2_t v65 = (int32x4_t *)(*((void *)&v36 + 1) + 4 * v61);
      uint64_t v66 = (void *)(v29 + v61 + v30 * v14);
      uint64_t v67 = v61 - v37;
      do
      {
        int32x4_t v69 = *v62;
        int32x4_t v68 = v62[1];
        v62 += 2;
        int32x4_t v71 = *v63;
        int32x4_t v70 = v63[1];
        v63 += 2;
        int32x4_t v72 = *v64;
        int32x4_t v73 = v64[1];
        v64 += 2;
        int32x4_t v75 = *v65;
        int32x4_t v74 = v65[1];
        v65 += 2;
        v107.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v70, v48), v68, v47), v73, v49), v74, v50), v16), 0x16uLL), v17), v18);
        v107.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v71, v48), v69, v47), v72, v49), v75, v50), v16), 0x16uLL), v17), v18);
        *v66++ = vqtbl2q_s8(v107, v19).u64[0];
        v67 += 8;
      }
      while (v67);
      if (v37 != result) {
        goto LABEL_80;
      }
LABEL_13:
      ++v14;
      uint64_t v5 = *(int *)(v2 + 248);
      v15 += 2 * v5;
    }
    while (v14 < a2[1]);
  }
  return result;
}

uint64_t sub_10036C108(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __int16 *a6, unsigned int a7, int a8, signed int a9, int a10, int a11)
{
  if (a4 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 2 * a9;
    if (a9 <= 1) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = a9;
    }
    uint64_t v14 = a4;
    uint64_t result = a9;
    do
    {
      LODWORD(v16) = 0;
      uint64_t v17 = *(void *)(a2 + 8 * v11);
      uint64_t v18 = *(void *)(a3 + 8 * v11);
      int v19 = a10;
      while (1)
      {
        if ((int)v16 < v19)
        {
          uint64_t v16 = (int)v16;
          do
          {
            unsigned int v20 = *(_DWORD *)(a5 + 4 * v16);
            int v21 = v20 - a9;
            signed int v22 = v20 - a9;
            if (v20 - a9 >= a7)
            {
              int v23 = (v21 & ~(v21 >> 31)) + a9 - v20;
              unsigned int v24 = (v23 - (v23 != 0)) / v13;
              if ((v21 & ~(v21 >> 31)) + a9 - v20) {
                ++v24;
              }
              signed int v22 = v20 + v24 * a9;
              do
                v22 -= a9;
              while (v22 >= (int)a7);
            }
            signed int v25 = *(_DWORD *)(a5 + 4 * v16);
            if (v20 >= a7)
            {
              signed int v25 = v20 + a9 + a9 * ((v20 >> 31) + ((v20 & ~((int)v20 >> 31)) - (v20 + (v20 >> 31))) / v13);
              do
                v25 -= a9;
              while (v25 >= (int)a7);
            }
            int v26 = v20 + a9;
            signed int v27 = v12 + v21;
            if ((int)v12 + v21 >= a7)
            {
              signed int v27 = v20
                  + a9
                  * ((v26 >> 31) + ((v26 & ~(v26 >> 31)) - (v26 + (v26 >> 31))) / v13 + 2);
              do
                v27 -= a9;
              while (v27 >= (int)a7);
            }
            signed int v28 = 3 * a9 + v21;
            if (v28 >= a7)
            {
              signed int v28 = v20
                  + a9
                  * ((((v26 + a9) & ~((v26 + a9) >> 31)) - (v26 + a9 + ((v26 + a9) >> 31))) / v13
                   + ((v26 + a9) >> 31)
                   + 3);
              do
                v28 -= a9;
              while (v28 >= (int)a7);
            }
            *(_DWORD *)(v18 + 4 * v16++) = *a6 * *(unsigned __int8 *)(v17 + v22)
                                         + a6[1] * *(unsigned __int8 *)(v17 + v25)
                                         + a6[2] * *(unsigned __int8 *)(v17 + v27)
                                         + a6[3] * *(unsigned __int8 *)(v17 + v28);
            a6 += 4;
          }
          while (v16 != v19);
          LODWORD(v16) = v19;
        }
        if (v19 == a8) {
          break;
        }
        int v19 = a8;
        if ((int)v16 < a11)
        {
          uint64_t v29 = (int)v16;
          uint64_t v30 = 4 * (int)v16;
          unsigned int v31 = (int *)(a5 + v30);
          unsigned int v32 = (_DWORD *)(v18 + v30);
          uint64_t v33 = a11 - v29;
          do
          {
            uint64_t v34 = *v31++;
            *v32++ = *a6 * *(unsigned __int8 *)(v17 + v34 - a9)
                   + a6[1] * *(unsigned __int8 *)(v17 + v34)
                   + a6[2] * *(unsigned __int8 *)(v17 + v34 + a9)
                   + a6[3] * *(unsigned __int8 *)(v17 + v34 + v12);
            a6 += 4;
            --v33;
          }
          while (v33);
          LODWORD(v16) = a11;
          int v19 = a8;
        }
      }
      a6 -= 4 * a8;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t sub_10036C384(uint64_t a1)
{
  *(void *)a1 = off_10049B4F0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_10036C4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B530;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    unsigned int v20 = *(void **)(a2 + 72);
    int v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    signed int v25 = *(void **)(a3 + 72);
    int v26 = *(void **)(a1 + 176);
    *int v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036C6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036C704(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036C718(uint64_t a1)
{
  sub_10036D0E4(a1);

  operator delete();
}

void sub_10036C750(uint64_t a1, int *a2, double a3, double a4, double a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  unsigned int v10 = *(_DWORD *)(a1 + 8);
  signed int v11 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v12) = *(_DWORD *)(a1 + 248);
  if ((v12 * v11) >= 0x109) {
    operator new[]();
  }
  double v13 = 0.0;
  memset(v41, 0, 128);
  memset(v40, 0, sizeof(v40));
  if ((int)v12 >= 1)
  {
    memset(__b, 255, 4 * v12);
    uint64_t v14 = 4 * v11;
    if (v12 == 1)
    {
      uint64_t v15 = 0;
LABEL_9:
      uint64_t v19 = (float32x4_t *)&v36[v15 * v11];
      unsigned int v20 = &v40[v15];
      uint64_t v21 = v12 - v15;
      do
      {
        *v20++ = v19;
        uint64_t v19 = (float32x4_t *)((char *)v19 + v14);
        --v21;
      }
      while (v21);
      goto LABEL_11;
    }
    uint64_t v15 = v12 & 0xFFFFFFFE;
    uint64_t v16 = &v40[1];
    uint64_t v17 = v15;
    uint64_t v18 = (float32x4_t *)v36;
    do
    {
      *(v16 - 1) = v18;
      void *v16 = (float32x4_t *)((char *)v18 + v14);
      uint64_t v18 = (float32x4_t *)((char *)v18 + 8 * v11);
      v16 += 2;
      v17 -= 2;
    }
    while (v17);
    if (v15 != v12) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v22 = *a2;
  if ((int)v22 < a2[1])
  {
    uint64_t v23 = (unsigned __int32 *)(*(void *)(a1 + 224) + 4 * (int)v22 * (int)v12);
    unsigned int v33 = ((v10 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v12 >= 1)
      {
        long long v35 = v23;
        unint64_t v24 = 0;
        LODWORD(v25) = 0;
        unsigned int v26 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v22) - (v12 >> 1) + 1;
        int v27 = v12;
        do
        {
          signed int v29 = *(_DWORD *)(a1 + 236);
          if ((int)(v26 + v24) >= v29) {
            int v30 = v29 - 1;
          }
          else {
            int v30 = v26 + v24;
          }
          if ((int)(v26 + v24) >= 0) {
            int v31 = v30;
          }
          else {
            int v31 = 0;
          }
          if ((int)v25 <= (int)v24) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = v25;
          }
          if ((int)v25 < (int)v12)
          {
            while (v25 > 0xF || v31 != __b[v25])
            {
              if ((uint64_t)++v25 >= (int)v12) {
                goto LABEL_15;
              }
            }
            if (v25 > v24)
            {
              memcpy(v40[v24], v40[v25], 4 * v11);
              LODWORD(v12) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_15:
          if ((int)v24 >= v27) {
            int v28 = v27;
          }
          else {
            int v28 = v24;
          }
          if (v25 == v12) {
            int v27 = v28;
          }
          v41[v24] = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v31;
          __b[v24++] = v31;
        }
        while ((uint64_t)v24 < (int)v12);
        uint64_t v32 = *(unsigned int *)(a1 + 240);
        if ((int)v12 <= v27)
        {
          uint64_t v23 = v35;
          goto LABEL_41;
        }
        sub_10036CAF8(v13, *(float *)&a4, *(float *)&a5, (uint64_t)&v38, (uint64_t)&v41[v27], (uint64_t)&v40[v27], v12 - v27, *(void *)(a1 + 200), *(float **)(a1 + 216), *(_DWORD *)(a1 + 232), v32, v33, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        uint64_t v23 = v35;
      }
      uint64_t v32 = *(unsigned int *)(a1 + 240);
LABEL_41:
      sub_10036CD78(v13, a4, a5, a6, a7, a8, a9, (uint64_t)&v37, v40, (uint16x8_t *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v22++), v23, v32);
      uint64_t v12 = *(int *)(a1 + 248);
      v23 += v12;
    }
    while (v22 < a2[1]);
  }
}

void sub_10036CABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_10036CAF8(double a1, float a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, float *a9, unsigned int a10, int a11, unsigned int a12, int a13, int a14)
{
  if (a7 >= 1)
  {
    uint64_t v14 = 0;
    int v15 = 2 * a12;
    if (a12 <= 1) {
      unsigned int v16 = 1;
    }
    else {
      unsigned int v16 = a12;
    }
    uint64_t v17 = a7;
    do
    {
      LODWORD(v18) = 0;
      uint64_t v19 = *(void *)(a5 + 8 * v14);
      uint64_t v20 = *(void *)(a6 + 8 * v14);
      int v21 = a13;
      while (1)
      {
        if ((int)v18 < v21)
        {
          uint64_t v18 = (int)v18;
          do
          {
            unsigned int v26 = *(_DWORD *)(a8 + 4 * v18);
            int v27 = v26 - a12;
            signed int v28 = v26 - a12;
            if (v26 - a12 >= a10)
            {
              int v29 = (v27 & ~(v27 >> 31)) + a12 - v26;
              unsigned int v30 = (v29 - (v29 != 0)) / v16;
              if ((v27 & ~(v27 >> 31)) + a12 - v26) {
                ++v30;
              }
              signed int v28 = v26 + v30 * a12;
              do
                v28 -= a12;
              while (v28 >= (int)a10);
            }
            signed int v31 = *(_DWORD *)(a8 + 4 * v18);
            if (v26 >= a10)
            {
              signed int v31 = v26 + a12 + a12 * ((v26 >> 31) + ((v26 & ~((int)v26 >> 31)) - (v26 + (v26 >> 31))) / v16);
              do
                v31 -= a12;
              while (v31 >= (int)a10);
            }
            int v32 = v26 + a12;
            int v33 = v15 + v27;
            if (v15 + v27 >= a10)
            {
              int v33 = v26
                  + a12
                  * ((v32 >> 31) + ((v32 & ~(v32 >> 31)) - (v32 + (v32 >> 31))) / v16 + 2);
              do
                v33 -= a12;
              while (v33 >= (int)a10);
            }
            signed int v34 = 3 * a12 + v27;
            if (v34 >= a10)
            {
              signed int v34 = v26
                  + a12
                  * ((((v32 + a12) & ~((int)(v32 + a12) >> 31)) - (v32 + a12 + ((v32 + a12) >> 31))) / v16
                   + ((v32 + a12) >> 31)
                   + 3);
              do
                v34 -= a12;
              while (v34 >= (int)a10);
            }
            LOWORD(a2) = *(_WORD *)(v19 + 2 * v28);
            LOWORD(a3) = *(_WORD *)(v19 + 2 * v31);
            *(float *)&unsigned int v22 = (float)LODWORD(a3);
            float v23 = (float)((float)((float)LODWORD(a2) * *a9) + 0.0) + (float)(*(float *)&v22 * a9[1]);
            LOWORD(v22) = *(_WORD *)(v19 + 2 * v33);
            *(float *)&unsigned int v24 = (float)v22;
            float v25 = v23 + (float)(*(float *)&v24 * a9[2]);
            LOWORD(v24) = *(_WORD *)(v19 + 2 * v34);
            a3 = (float)v24;
            a2 = v25 + (float)(a3 * a9[3]);
            *(float *)(v20 + 4 * v18++) = a2;
            a9 += 4;
          }
          while (v18 != v21);
          LODWORD(v18) = v21;
        }
        if (v21 == a11) {
          break;
        }
        int v21 = a11;
        if ((int)v18 < a14)
        {
          uint64_t v35 = (int)v18;
          uint64_t v36 = 4 * (int)v18;
          char v37 = (int *)(a8 + v36);
          char v38 = (float *)(v20 + v36);
          uint64_t v39 = a14 - v35;
          do
          {
            uint64_t v40 = *v37++;
            LOWORD(a2) = *(_WORD *)(v19 + 2 * (int)(v40 - a12));
            LOWORD(a3) = *(_WORD *)(v19 + 2 * v40);
            *(float *)&unsigned int v41 = a9[1] * (float)LODWORD(a3);
            float v42 = *(float *)&v41 + (float)((float)LODWORD(a2) * *a9);
            LOWORD(v41) = *(_WORD *)(v19 + 2 * (int)(v40 + a12));
            *(float *)&unsigned int v43 = (float)v41;
            float v44 = v42 + (float)(*(float *)&v43 * a9[2]);
            LOWORD(v43) = *(_WORD *)(v19 + 2 * ((int)v40 + v15));
            a3 = (float)v43;
            a2 = v44 + (float)(a3 * a9[3]);
            *v38++ = a2;
            a9 += 4;
            --v39;
          }
          while (v39);
          LODWORD(v18) = a14;
          int v21 = a11;
        }
      }
      a9 -= 4 * a11;
      ++v14;
    }
    while (v14 != v17);
  }
}

void sub_10036CD78(double a1, double a2, double a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, uint64_t a8, float32x4_t **a9, uint16x8_t *a10, unsigned __int32 *a11, uint64_t a12)
{
  a4.n128_u32[0] = *a11;
  a5.n128_u32[0] = a11[1];
  a6.n128_u32[0] = a11[2];
  a7.n128_u32[0] = a11[3];
  double v13 = *a9;
  uint64_t v12 = a9[1];
  int v15 = a9[2];
  uint64_t v14 = a9[3];
  int v16 = 0;
  int v17 = a12 - 8;
  if ((int)a12 >= 8)
  {
    float32x4_t v34 = (float32x4_t)vdupq_lane_s32((int32x2_t)a5.n128_u64[0], 0);
    float32x4_t v35 = (float32x4_t)vdupq_lane_s32((int32x2_t)a6.n128_u64[0], 0);
    uint64_t v36 = v14 + 1;
    float32x4_t v37 = (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 0);
    char v38 = v15 + 1;
    uint64_t v39 = v12 + 1;
    uint64_t v40 = v13 + 1;
    unsigned int v41 = (float32x4_t *)&unk_1004D2000;
    float v42 = a10;
    do
    {
      float32x4_t v43 = v40[-1];
      float32x4_t v44 = *v40;
      float32x4_t v45 = v39[-1];
      float32x4_t v46 = *v39;
      float32x4_t v47 = v38[-1];
      float32x4_t v48 = *v38;
      float32x4_t v49 = v36[-1];
      float32x4_t v50 = *v36;
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        signed int v91 = a10;
        int8x16x2_t v93 = v14;
        uint64_t v87 = a12;
        int v89 = v16;
        int8x16x4_t v95 = v15;
        int8x16x4_t v97 = v12;
        long long v99 = v13;
        int v101 = v17;
        long long v103 = v36;
        long long v105 = v38;
        int8x16x2_t v107 = v39;
        v109 = v40;
        v111 = v42;
        __n128 v83 = a5;
        __n128 v85 = a4;
        __n128 v81 = a6;
        float32x4_t v77 = v34;
        __n128 v79 = a7;
        float32x4_t v73 = v37;
        float32x4_t v75 = v35;
        float32x4_t v69 = v45;
        float32x4_t v71 = v43;
        float32x4_t v65 = v49;
        float32x4_t v67 = v47;
        float32x4_t v61 = v46;
        float32x4_t v63 = v44;
        float32x4_t v57 = v50;
        float32x4_t v59 = v48;
        int v52 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v50 = v57;
        float32x4_t v48 = v59;
        float32x4_t v46 = v61;
        float32x4_t v44 = v63;
        float32x4_t v49 = v65;
        float32x4_t v47 = v67;
        float32x4_t v45 = v69;
        float32x4_t v43 = v71;
        float32x4_t v37 = v73;
        float32x4_t v35 = v75;
        float32x4_t v34 = v77;
        a7 = v79;
        *(void *)&long long v53 = 0x3F0000003F000000;
        *((void *)&v53 + 1) = 0x3F0000003F000000;
        a6 = v81;
        a5 = v83;
        a4 = v85;
        uint64_t v40 = v109;
        float v42 = v111;
        unsigned int v41 = (float32x4_t *)&unk_1004D2000;
        char v38 = v105;
        uint64_t v39 = v107;
        uint64_t v36 = v103;
        int v17 = v101;
        uint64_t v12 = v97;
        double v13 = v99;
        uint64_t v14 = v93;
        int v15 = v95;
        a12 = v87;
        int v16 = v89;
        a10 = v91;
        if (v52)
        {
          xmmword_1004D2D90 = v53;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v50 = v57;
          float32x4_t v48 = v59;
          float32x4_t v46 = v61;
          float32x4_t v44 = v63;
          float32x4_t v49 = v65;
          float32x4_t v47 = v67;
          float32x4_t v45 = v69;
          float32x4_t v43 = v71;
          float32x4_t v37 = v73;
          float32x4_t v35 = v75;
          float32x4_t v34 = v77;
          a7 = v79;
          a6 = v81;
          a5 = v83;
          a4 = v85;
          uint64_t v40 = v109;
          float v42 = v111;
          unsigned int v41 = (float32x4_t *)&unk_1004D2000;
          char v38 = v105;
          uint64_t v39 = v107;
          uint64_t v36 = v103;
          int v17 = v101;
          uint64_t v12 = v97;
          double v13 = v99;
          uint64_t v14 = v93;
          int v15 = v95;
          a12 = v87;
          int v16 = v89;
          a10 = v91;
        }
      }
      float32x4_t v51 = v41[217];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int32x4_t v92 = a10;
        uint64_t v94 = v14;
        uint64_t v88 = a12;
        int v90 = v16;
        char v96 = v15;
        long long v98 = v12;
        long long v100 = v13;
        int v102 = v17;
        long long v104 = v36;
        v106 = v38;
        int8x16x4_t v108 = v39;
        v110 = v40;
        v112 = v42;
        __n128 v84 = a5;
        __n128 v86 = a4;
        __n128 v82 = a6;
        float32x4_t v78 = v34;
        __n128 v80 = a7;
        float32x4_t v74 = v37;
        float32x4_t v76 = v35;
        float32x4_t v70 = v45;
        float32x4_t v72 = v43;
        float32x4_t v66 = v49;
        float32x4_t v68 = v47;
        float32x4_t v62 = v46;
        float32x4_t v64 = v44;
        float32x4_t v58 = v50;
        float32x4_t v60 = v48;
        float32x4_t v56 = v51;
        int v54 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v51 = v56;
        float32x4_t v50 = v58;
        float32x4_t v48 = v60;
        float32x4_t v46 = v62;
        float32x4_t v44 = v64;
        float32x4_t v49 = v66;
        float32x4_t v47 = v68;
        float32x4_t v45 = v70;
        float32x4_t v43 = v72;
        float32x4_t v37 = v74;
        float32x4_t v35 = v76;
        float32x4_t v34 = v78;
        *(void *)&long long v55 = 0x3F0000003F000000;
        *((void *)&v55 + 1) = 0x3F0000003F000000;
        a7 = v80;
        a6 = v82;
        a5 = v84;
        a4 = v86;
        uint64_t v40 = v110;
        float v42 = v112;
        unsigned int v41 = (float32x4_t *)&unk_1004D2000;
        char v38 = v106;
        uint64_t v39 = v108;
        uint64_t v36 = v104;
        int v17 = v102;
        uint64_t v12 = v98;
        double v13 = v100;
        uint64_t v14 = v94;
        int v15 = v96;
        a12 = v88;
        int v16 = v90;
        a10 = v92;
        if (v54)
        {
          xmmword_1004D2D90 = v55;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v51 = v56;
          float32x4_t v50 = v58;
          float32x4_t v48 = v60;
          float32x4_t v46 = v62;
          float32x4_t v44 = v64;
          float32x4_t v49 = v66;
          float32x4_t v47 = v68;
          float32x4_t v45 = v70;
          float32x4_t v43 = v72;
          float32x4_t v37 = v74;
          float32x4_t v35 = v76;
          float32x4_t v34 = v78;
          a7 = v80;
          a6 = v82;
          a5 = v84;
          a4 = v86;
          uint64_t v40 = v110;
          float v42 = v112;
          unsigned int v41 = (float32x4_t *)&unk_1004D2000;
          char v38 = v106;
          uint64_t v39 = v108;
          uint64_t v36 = v104;
          int v17 = v102;
          uint64_t v12 = v98;
          double v13 = v100;
          uint64_t v14 = v94;
          int v15 = v96;
          a12 = v88;
          int v16 = v90;
          a10 = v92;
        }
      }
      *v42++ = vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v43, a4.n128_f32[0]), v45, v34), v47, v35), v49, v37), v51))), vcvtq_u32_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v44, a4.n128_f32[0]), v46, v34), v48, v35), v50, v37), v41[217])));
      v16 += 8;
      v36 += 2;
      v38 += 2;
      v39 += 2;
      v40 += 2;
    }
    while (v17 >= v16);
  }
  if (v16 < (int)a12)
  {
    uint64_t v18 = v16;
    uint64_t v19 = &v13->f32[v18];
    uint64_t v20 = &v12->f32[v18];
    int v21 = &v15->f32[v18];
    unsigned int v22 = &v14->f32[v18];
    uint64_t v23 = (int)a12 - (uint64_t)v16;
    unsigned int v24 = &a10->i16[v16];
    do
    {
      float v25 = *v20++;
      float v26 = v25;
      float v27 = *v19++;
      float v28 = (float)(a5.n128_f32[0] * v26) + (float)(v27 * a4.n128_f32[0]);
      float v29 = *v21++;
      float v30 = v28 + (float)(v29 * a6.n128_f32[0]);
      float v31 = *v22++;
      float v32 = rintf(v30 + (float)(v31 * a7.n128_f32[0]));
      int v33 = (uint64_t)v32 & ~((int)(uint64_t)v32 >> 31);
      if (v33 >= 0xFFFF) {
        LOWORD(v33) = -1;
      }
      *v24++ = v33;
      --v23;
    }
    while (v23);
  }
}

uint64_t sub_10036D0E4(uint64_t a1)
{
  *(void *)a1 = off_10049B530;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_10036D220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B570;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v20 = *(void **)(a2 + 72);
    int v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    float v25 = *(void **)(a3 + 72);
    float v26 = *(void **)(a1 + 176);
    *float v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036D424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036D464(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036D478(uint64_t a1)
{
  sub_10036E074(a1);

  operator delete();
}

_DWORD *sub_10036D4B0(_DWORD *result, int *a2, double a3, double a4, double a5)
{
  uint64_t v5 = result;
  unsigned int v6 = result[2];
  signed int v7 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v8) = result[62];
  if ((v8 * v7) >= 0x109) {
    operator new[]();
  }
  double v9 = 0.0;
  memset(v66, 0, 128);
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  if ((int)v8 >= 1)
  {
    uint64_t result = memset(__b, 255, 4 * v8);
    uint64_t v10 = v7;
    if (v8 == 1)
    {
      uint64_t v11 = 0;
LABEL_9:
      int v15 = &v54[v11 * v7];
      int v16 = (void *)&v58 + v11;
      uint64_t v17 = v8 - v11;
      do
      {
        *v16++ = v15;
        int v15 = (_DWORD *)((char *)v15 + v10 * 4);
        --v17;
      }
      while (v17);
      goto LABEL_11;
    }
    uint64_t v11 = v8 & 0xFFFFFFFE;
    uint64_t v12 = (void *)&v58 + 1;
    uint64_t v13 = v11;
    uint64_t v14 = v54;
    do
    {
      *(v12 - 1) = v14;
      *uint64_t v12 = &v14[v10];
      v14 += 2 * v7;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    if (v11 != v8) {
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*a2 < a2[1])
  {
    uint64_t v53 = *((void *)v5 + 28) + 4 * *a2 * (int)v8;
    uint64_t __n = 4 * v7;
    uint64_t v18 = *a2;
    do
    {
      if ((int)v8 >= 1)
      {
        unint64_t v19 = 0;
        LODWORD(v20) = 0;
        unsigned int v21 = *(_DWORD *)(*((void *)v5 + 26) + 4 * v18) - (v8 >> 1) + 1;
        int v22 = v8;
        do
        {
          signed int v24 = v5[59];
          if ((int)(v21 + v19) >= v24) {
            int v25 = v24 - 1;
          }
          else {
            int v25 = v21 + v19;
          }
          if ((int)(v21 + v19) >= 0) {
            int v26 = v25;
          }
          else {
            int v26 = 0;
          }
          if ((int)v20 <= (int)v19) {
            unint64_t v20 = v19;
          }
          else {
            unint64_t v20 = v20;
          }
          if ((int)v20 < (int)v8)
          {
            while (v20 > 0xF || v26 != __b[v20])
            {
              if ((uint64_t)++v20 >= (int)v8) {
                goto LABEL_16;
              }
            }
            if (v20 > v19)
            {
              memcpy(*((void **)&v58 + v19), *((const void **)&v58 + v20), __n);
              LODWORD(v8) = v5[62];
            }
          }
LABEL_16:
          if ((int)v19 >= v22) {
            int v23 = v22;
          }
          else {
            int v23 = v19;
          }
          if (v20 == v8) {
            int v22 = v23;
          }
          v66[v19] = *((void *)v5 + 3) + **((void **)v5 + 10) * v26;
          __b[v19++] = v26;
        }
        while ((uint64_t)v19 < (int)v8);
        int v27 = v5[60];
        if ((int)v8 <= v22) {
          goto LABEL_41;
        }
        sub_10036D914(v9, a4, a5, (uint64_t)&v55, (uint64_t)&v66[v22], (uint64_t)&v58 + 8 * v22, v8 - v22, *((void *)v5 + 25), *((void *)v5 + 27), v5[58], v27, ((v6 >> 3) & 0x1FF) + 1, v5[63], v5[64]);
      }
      int v27 = v5[60];
LABEL_41:
      uint64_t v28 = *((void *)v5 + 15);
      uint64_t v29 = *((void *)v5 + 23);
      uint64_t v52 = v18;
      float v30 = *(float *)v53;
      float v31 = *(float *)(v53 + 4);
      float v32 = *(float *)(v53 + 8);
      float v33 = *(float *)(v53 + 12);
      long long v34 = v58;
      long long v35 = v59;
      uint64_t result = (_DWORD *)sub_10036DBB4((uint64_t)&v56, (float32x4_t **)&v58, (int16x8_t *)(v28 + v29 * v18), (const float *)v53, v27);
      if ((int)result < v27)
      {
        uint64_t v36 = v27 - (uint64_t)(int)result;
        float32x4_t v37 = (_WORD *)(v28 + v29 * v18 + 2 * (int)result);
        uint64_t v38 = 4 * (int)result;
        uint64_t v39 = (float *)(*((void *)&v35 + 1) + v38);
        uint64_t v40 = (int *)(v35 + v38);
        unsigned int v41 = (float *)(*((void *)&v34 + 1) + v38);
        float v42 = (float *)(v34 + v38);
        do
        {
          float v43 = *v41++;
          float v44 = v43;
          float v45 = *v42++;
          float v46 = (float)(v31 * v44) + (float)(v45 * v30);
          int v47 = *v40++;
          LODWORD(a4) = v47;
          float v48 = *v39++;
          *(float *)&a5 = v48;
          *(float *)&double v9 = rintf((float)(v46 + (float)(*(float *)&a4 * v32)) + (float)(v48 * v33));
          uint64_t v49 = (uint64_t)*(float *)&v9;
          if ((int)(uint64_t)*(float *)&v9 <= -32768) {
            LODWORD(v49) = -32768;
          }
          if ((int)v49 >= 0x7FFF) {
            LOWORD(v49) = 0x7FFF;
          }
          *v37++ = v49;
          --v36;
        }
        while (v36);
      }
      ++v18;
      uint64_t v8 = (int)v5[62];
      v53 += 4 * v8;
    }
    while (v52 + 1 < a2[1]);
  }
  return result;
}

void sub_10036D8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18 != a12)
  {
    if (a18) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10036D914(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, unsigned int a12, int a13, int a14)
{
  if (a7 >= 1)
  {
    uint64_t v14 = 0;
    int v15 = 2 * a12;
    if (a12 <= 1) {
      unsigned int v16 = 1;
    }
    else {
      unsigned int v16 = a12;
    }
    uint64_t v17 = a7;
    do
    {
      LODWORD(v18) = 0;
      uint64_t v19 = *(void *)(a5 + 8 * v14);
      uint64_t v20 = *(void *)(a6 + 8 * v14);
      int v21 = a13;
      while (1)
      {
        if ((int)v18 < v21)
        {
          uint64_t v18 = (int)v18;
          do
          {
            unsigned int v24 = *(_DWORD *)(a8 + 4 * v18);
            int v25 = v24 - a12;
            signed int v26 = v24 - a12;
            if (v24 - a12 >= a10)
            {
              int v27 = (v25 & ~(v25 >> 31)) + a12 - v24;
              unsigned int v28 = (v27 - (v27 != 0)) / v16;
              if ((v25 & ~(v25 >> 31)) + a12 - v24) {
                ++v28;
              }
              signed int v26 = v24 + v28 * a12;
              do
                v26 -= a12;
              while (v26 >= (int)a10);
            }
            signed int v29 = *(_DWORD *)(a8 + 4 * v18);
            if (v24 >= a10)
            {
              signed int v29 = v24 + a12 + a12 * ((v24 >> 31) + ((v24 & ~((int)v24 >> 31)) - (v24 + (v24 >> 31))) / v16);
              do
                v29 -= a12;
              while (v29 >= (int)a10);
            }
            int v30 = v24 + a12;
            int v31 = v15 + v25;
            if (v15 + v25 >= a10)
            {
              int v31 = v24
                  + a12
                  * ((v30 >> 31) + ((v30 & ~(v30 >> 31)) - (v30 + (v30 >> 31))) / v16 + 2);
              do
                v31 -= a12;
              while (v31 >= (int)a10);
            }
            signed int v32 = 3 * a12 + v25;
            if (v32 >= a10)
            {
              signed int v32 = v24
                  + a12
                  * ((((v30 + a12) & ~((int)(v30 + a12) >> 31)) - (v30 + a12 + ((v30 + a12) >> 31))) / v16
                   + ((v30 + a12) >> 31)
                   + 3);
              do
                v32 -= a12;
              while (v32 >= (int)a10);
            }
            LOWORD(a2) = *(_WORD *)(v19 + 2 * v26);
            *(void *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            LODWORD(a3) = *(_DWORD *)a9;
            LOWORD(a3) = *(_WORD *)(v19 + 2 * v29);
            int16x4_t v22 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a3).u64[0];
            *(float *)v22.i32 = (float)v22.i32[0];
            *(float *)&a2 = (float)((float)((float)SLODWORD(a2) * *(float *)a9) + 0.0)
                          + (float)(*(float *)v22.i32 * *(float *)(a9 + 4));
            v22.i16[0] = *(_WORD *)(v19 + 2 * v31);
            int16x4_t v23 = (int16x4_t)vmovl_s16(v22).u64[0];
            *(float *)v23.i32 = (float)v23.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v23.i32 * *(float *)(a9 + 8));
            v23.i16[0] = *(_WORD *)(v19 + 2 * v32);
            *(void *)&a3 = vmovl_s16(v23).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3);
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)&a3 * *(float *)(a9 + 12));
            *(_DWORD *)(v20 + 4 * v18++) = LODWORD(a2);
            a9 += 16;
          }
          while (v18 != v21);
          LODWORD(v18) = v21;
        }
        if (v21 == a11) {
          break;
        }
        int v21 = a11;
        if ((int)v18 < a14)
        {
          uint64_t v33 = (int)v18;
          uint64_t v34 = 4 * (int)v18;
          long long v35 = (int *)(a8 + v34);
          uint64_t v36 = (_DWORD *)(v20 + v34);
          uint64_t v37 = a14 - v33;
          do
          {
            uint64_t v38 = *v35++;
            LOWORD(a2) = *(_WORD *)(v19 + 2 * (int)(v38 - a12));
            *(void *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            LOWORD(a3) = *(_WORD *)(v19 + 2 * v38);
            int16x4_t v39 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a3).u64[0];
            *(float *)v39.i32 = *(float *)(a9 + 4) * (float)v39.i32[0];
            *(float *)&a2 = *(float *)v39.i32 + (float)((float)SLODWORD(a2) * *(float *)a9);
            v39.i16[0] = *(_WORD *)(v19 + 2 * (int)(v38 + a12));
            int16x4_t v40 = (int16x4_t)vmovl_s16(v39).u64[0];
            *(float *)v40.i32 = (float)v40.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v40.i32 * *(float *)(a9 + 8));
            v40.i16[0] = *(_WORD *)(v19 + 2 * ((int)v38 + v15));
            *(void *)&a3 = vmovl_s16(v40).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3);
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)&a3 * *(float *)(a9 + 12));
            *v36++ = LODWORD(a2);
            a9 += 16;
            --v37;
          }
          while (v37);
          LODWORD(v18) = a14;
          int v21 = a11;
        }
      }
      a9 += -16 * a11;
      ++v14;
    }
    while (v14 != v17);
  }
}

uint64_t sub_10036DBB4(uint64_t a1, float32x4_t **a2, int16x8_t *a3, const float *a4, int a5)
{
  float32x4_t v7 = vld1q_dup_f32(a4);
  unsigned int v6 = a4 + 1;
  uint64_t result = 0;
  int v9 = a5 - 8;
  if (a5 >= 8)
  {
    float32x4_t v10 = vld1q_dup_f32(v6);
    uint64_t v11 = a4 + 2;
    float32x4_t v12 = vld1q_dup_f32(v11);
    uint64_t v13 = a4 + 3;
    uint64_t v14 = a2[3] + 1;
    int v15 = a2[2] + 1;
    float32x4_t v16 = vld1q_dup_f32(v13);
    uint64_t v17 = a2[1] + 1;
    uint64_t v18 = *a2 + 1;
    uint64_t v19 = (int8x16_t *)&unk_1004D2000;
    uint64_t v20 = (int8x16_t *)&unk_1004D2000;
    do
    {
      float32x4_t v21 = v18[-1];
      float32x4_t v22 = *v18;
      float32x4_t v23 = v17[-1];
      float32x4_t v24 = *v17;
      float32x4_t v25 = v15[-1];
      float32x4_t v26 = *v15;
      float32x4_t v27 = v14[-1];
      float32x4_t v28 = *v14;
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DC0, memory_order_acquire) & 1) == 0)
      {
        int v101 = result;
        int8x16x4_t v97 = a3;
        int v93 = v9;
        long long v105 = v14;
        v109 = v15;
        v113 = v17;
        v117 = v18;
        float32x4_t v85 = v10;
        float32x4_t v89 = v7;
        float32x4_t v77 = v16;
        float32x4_t v81 = v12;
        float32x4_t v69 = v23;
        float32x4_t v73 = v21;
        float32x4_t v61 = v27;
        float32x4_t v65 = v25;
        float32x4_t v53 = v24;
        float32x4_t v57 = v22;
        float32x4_t v45 = v28;
        float32x4_t v49 = v26;
        LODWORD(result) = __cxa_guard_acquire(qword_1004D2DC0);
        float32x4_t v28 = v45;
        float32x4_t v26 = v49;
        float32x4_t v24 = v53;
        float32x4_t v22 = v57;
        float32x4_t v27 = v61;
        float32x4_t v25 = v65;
        float32x4_t v23 = v69;
        float32x4_t v21 = v73;
        float32x4_t v16 = v77;
        float32x4_t v12 = v81;
        float32x4_t v10 = v85;
        float32x4_t v7 = v89;
        *(void *)&long long v33 = 0x8000000080000000;
        *((void *)&v33 + 1) = 0x8000000080000000;
        uint64_t v20 = (int8x16_t *)&unk_1004D2000;
        uint64_t v19 = (int8x16_t *)&unk_1004D2000;
        uint64_t v17 = v113;
        uint64_t v18 = v117;
        uint64_t v14 = v105;
        int v15 = v109;
        int v9 = v93;
        a3 = v97;
        int v34 = result;
        LODWORD(result) = v101;
        if (v34)
        {
          xmmword_1004D2DB0 = v33;
          __cxa_guard_release(qword_1004D2DC0);
          float32x4_t v28 = v45;
          float32x4_t v26 = v49;
          float32x4_t v24 = v53;
          float32x4_t v22 = v57;
          float32x4_t v27 = v61;
          float32x4_t v25 = v65;
          float32x4_t v23 = v69;
          float32x4_t v21 = v73;
          float32x4_t v16 = v77;
          float32x4_t v12 = v81;
          float32x4_t v10 = v85;
          float32x4_t v7 = v89;
          uint64_t v20 = (int8x16_t *)&unk_1004D2000;
          uint64_t v19 = (int8x16_t *)&unk_1004D2000;
          uint64_t v17 = v113;
          uint64_t v18 = v117;
          uint64_t v14 = v105;
          int v15 = v109;
          int v9 = v93;
          LODWORD(result) = v101;
          a3 = v97;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2DE0, memory_order_acquire) & 1) == 0)
      {
        int v102 = result;
        long long v98 = a3;
        int v94 = v9;
        v106 = v14;
        v110 = v15;
        v114 = v17;
        v118 = v18;
        float32x4_t v86 = v10;
        float32x4_t v90 = v7;
        float32x4_t v78 = v16;
        float32x4_t v82 = v12;
        float32x4_t v70 = v23;
        float32x4_t v74 = v21;
        float32x4_t v62 = v27;
        float32x4_t v66 = v25;
        float32x4_t v54 = v24;
        float32x4_t v58 = v22;
        float32x4_t v46 = v28;
        float32x4_t v50 = v26;
        LODWORD(result) = __cxa_guard_acquire(&qword_1004D2DE0);
        float32x4_t v28 = v46;
        float32x4_t v26 = v50;
        float32x4_t v24 = v54;
        float32x4_t v22 = v58;
        float32x4_t v27 = v62;
        float32x4_t v25 = v66;
        float32x4_t v23 = v70;
        float32x4_t v21 = v74;
        float32x4_t v16 = v78;
        float32x4_t v12 = v82;
        float32x4_t v10 = v86;
        float32x4_t v7 = v90;
        *(void *)&long long v35 = 0x3F0000003F000000;
        *((void *)&v35 + 1) = 0x3F0000003F000000;
        uint64_t v20 = (int8x16_t *)&unk_1004D2000;
        uint64_t v19 = (int8x16_t *)&unk_1004D2000;
        uint64_t v17 = v114;
        uint64_t v18 = v118;
        uint64_t v14 = v106;
        int v15 = v110;
        int v9 = v94;
        a3 = v98;
        int v36 = result;
        LODWORD(result) = v102;
        if (v36)
        {
          xmmword_1004D2DD0 = v35;
          __cxa_guard_release(&qword_1004D2DE0);
          float32x4_t v28 = v46;
          float32x4_t v26 = v50;
          float32x4_t v24 = v54;
          float32x4_t v22 = v58;
          float32x4_t v27 = v62;
          float32x4_t v25 = v66;
          float32x4_t v23 = v70;
          float32x4_t v21 = v74;
          float32x4_t v16 = v78;
          float32x4_t v12 = v82;
          float32x4_t v10 = v86;
          float32x4_t v7 = v90;
          uint64_t v20 = (int8x16_t *)&unk_1004D2000;
          uint64_t v19 = (int8x16_t *)&unk_1004D2000;
          uint64_t v17 = v114;
          uint64_t v18 = v118;
          uint64_t v14 = v106;
          int v15 = v110;
          int v9 = v94;
          LODWORD(result) = v102;
          a3 = v98;
        }
      }
      int8x16_t v29 = v20[221];
      int8x16_t v30 = v19[219];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DC0, memory_order_acquire) & 1) == 0)
      {
        int v103 = result;
        long long v99 = a3;
        int v95 = v9;
        int8x16x2_t v107 = v14;
        v111 = v15;
        v115 = v17;
        v119 = v18;
        float32x4_t v87 = v10;
        float32x4_t v91 = v7;
        float32x4_t v79 = v16;
        float32x4_t v83 = v12;
        float32x4_t v71 = v23;
        float32x4_t v75 = v21;
        float32x4_t v63 = v27;
        float32x4_t v67 = v25;
        float32x4_t v55 = v24;
        float32x4_t v59 = v22;
        float32x4_t v47 = v28;
        float32x4_t v51 = v26;
        int8x16_t v41 = v30;
        int8x16_t v43 = v29;
        LODWORD(result) = __cxa_guard_acquire(qword_1004D2DC0);
        int8x16_t v30 = v41;
        int8x16_t v29 = v43;
        float32x4_t v28 = v47;
        float32x4_t v26 = v51;
        float32x4_t v24 = v55;
        float32x4_t v22 = v59;
        float32x4_t v27 = v63;
        float32x4_t v25 = v67;
        float32x4_t v23 = v71;
        float32x4_t v21 = v75;
        float32x4_t v16 = v79;
        float32x4_t v12 = v83;
        float32x4_t v10 = v87;
        float32x4_t v7 = v91;
        *(void *)&long long v37 = 0x8000000080000000;
        *((void *)&v37 + 1) = 0x8000000080000000;
        uint64_t v20 = (int8x16_t *)&unk_1004D2000;
        uint64_t v19 = (int8x16_t *)&unk_1004D2000;
        uint64_t v17 = v115;
        uint64_t v18 = v119;
        uint64_t v14 = v107;
        int v15 = v111;
        int v9 = v95;
        a3 = v99;
        int v38 = result;
        LODWORD(result) = v103;
        if (v38)
        {
          xmmword_1004D2DB0 = v37;
          __cxa_guard_release(qword_1004D2DC0);
          int8x16_t v30 = v41;
          int8x16_t v29 = v43;
          float32x4_t v28 = v47;
          float32x4_t v26 = v51;
          float32x4_t v24 = v55;
          float32x4_t v22 = v59;
          float32x4_t v27 = v63;
          float32x4_t v25 = v67;
          float32x4_t v23 = v71;
          float32x4_t v21 = v75;
          float32x4_t v16 = v79;
          float32x4_t v12 = v83;
          float32x4_t v10 = v87;
          float32x4_t v7 = v91;
          uint64_t v20 = (int8x16_t *)&unk_1004D2000;
          uint64_t v19 = (int8x16_t *)&unk_1004D2000;
          uint64_t v17 = v115;
          uint64_t v18 = v119;
          uint64_t v14 = v107;
          int v15 = v111;
          int v9 = v95;
          LODWORD(result) = v103;
          a3 = v99;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2DE0, memory_order_acquire) & 1) == 0)
      {
        int v104 = result;
        long long v100 = a3;
        int v96 = v9;
        int8x16x4_t v108 = v14;
        v112 = v15;
        v116 = v17;
        v120 = v18;
        float32x4_t v88 = v10;
        float32x4_t v92 = v7;
        float32x4_t v80 = v16;
        float32x4_t v84 = v12;
        float32x4_t v72 = v23;
        float32x4_t v76 = v21;
        float32x4_t v64 = v27;
        float32x4_t v68 = v25;
        float32x4_t v56 = v24;
        float32x4_t v60 = v22;
        float32x4_t v48 = v28;
        float32x4_t v52 = v26;
        int8x16_t v42 = v30;
        int8x16_t v44 = v29;
        LODWORD(result) = __cxa_guard_acquire(&qword_1004D2DE0);
        int8x16_t v30 = v42;
        int8x16_t v29 = v44;
        float32x4_t v28 = v48;
        float32x4_t v26 = v52;
        float32x4_t v24 = v56;
        float32x4_t v22 = v60;
        float32x4_t v27 = v64;
        float32x4_t v25 = v68;
        float32x4_t v23 = v72;
        float32x4_t v21 = v76;
        float32x4_t v16 = v80;
        float32x4_t v12 = v84;
        float32x4_t v10 = v88;
        float32x4_t v7 = v92;
        *(void *)&long long v39 = 0x3F0000003F000000;
        *((void *)&v39 + 1) = 0x3F0000003F000000;
        uint64_t v20 = (int8x16_t *)&unk_1004D2000;
        uint64_t v19 = (int8x16_t *)&unk_1004D2000;
        uint64_t v17 = v116;
        uint64_t v18 = v120;
        uint64_t v14 = v108;
        int v15 = v112;
        int v9 = v96;
        a3 = v100;
        int v40 = result;
        LODWORD(result) = v104;
        if (v40)
        {
          xmmword_1004D2DD0 = v39;
          __cxa_guard_release(&qword_1004D2DE0);
          int8x16_t v30 = v42;
          int8x16_t v29 = v44;
          float32x4_t v28 = v48;
          float32x4_t v26 = v52;
          float32x4_t v24 = v56;
          float32x4_t v22 = v60;
          float32x4_t v27 = v64;
          float32x4_t v25 = v68;
          float32x4_t v23 = v72;
          float32x4_t v21 = v76;
          float32x4_t v16 = v80;
          float32x4_t v12 = v84;
          float32x4_t v10 = v88;
          float32x4_t v7 = v92;
          uint64_t v20 = (int8x16_t *)&unk_1004D2000;
          uint64_t v19 = (int8x16_t *)&unk_1004D2000;
          uint64_t v17 = v116;
          uint64_t v18 = v120;
          uint64_t v14 = v108;
          int v15 = v112;
          int v9 = v96;
          LODWORD(result) = v104;
          a3 = v100;
        }
      }
      int8x16_t v31 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v21), v23, v10), v25, v12), v27, v16);
      int8x16_t v32 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v22), v24, v10), v26, v12), v28, v16);
      *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v31, (float32x4_t)vorrq_s8(vandq_s8(v30, v31), v29)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vorrq_s8(vandq_s8(v19[219], v32), v20[221]))));
      v14 += 2;
      v15 += 2;
      v17 += 2;
      v18 += 2;
      uint64_t result = (result + 8);
    }
    while (v9 >= (int)result);
  }
  return result;
}

uint64_t sub_10036E074(uint64_t a1)
{
  *(void *)a1 = off_10049B570;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_10036E1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B5B0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v20 = *(void **)(a2 + 72);
    float32x4_t v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    float32x4_t v25 = *(void **)(a3 + 72);
    float32x4_t v26 = *(void **)(a1 + 176);
    *float32x4_t v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036E3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036E3F4(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036E408(uint64_t a1)
{
  sub_10036EC00(a1);

  operator delete();
}

void sub_10036E440(uint64_t a1, int *a2, double a3, double a4, double a5, double a6)
{
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  signed int v8 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v9) = *(_DWORD *)(a1 + 248);
  if ((v9 * v8) >= 0x109) {
    operator new[]();
  }
  v10.i32[1] = 0;
  memset(v91, 0, 128);
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  if ((int)v9 >= 1)
  {
    memset(__b, 255, 4 * v9);
    uint64_t v11 = v8;
    if (v9 == 1)
    {
      uint64_t v12 = 0;
LABEL_9:
      float32x4_t v16 = &v80[v12 * v8];
      uint64_t v17 = (void *)&v83 + v12;
      uint64_t v18 = v9 - v12;
      do
      {
        *v17++ = v16;
        float32x4_t v16 = (_DWORD *)((char *)v16 + v11 * 4);
        --v18;
      }
      while (v18);
      goto LABEL_11;
    }
    uint64_t v12 = v9 & 0xFFFFFFFE;
    uint64_t v13 = (void *)&v83 + 1;
    uint64_t v14 = v12;
    int v15 = v80;
    do
    {
      *(v13 - 1) = v15;
      *uint64_t v13 = &v15[v11];
      v15 += 2 * v8;
      v13 += 2;
      v14 -= 2;
    }
    while (v14);
    if (v12 != v9) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v19 = *a2;
  if ((int)v19 < a2[1])
  {
    uint64_t v20 = (__int32 *)(*(void *)(a1 + 224) + 4 * (int)v19 * (int)v9);
    unsigned int v77 = ((v7 >> 3) & 0x1FF) + 1;
    while (1)
    {
      if ((int)v9 < 1) {
        goto LABEL_40;
      }
      unint64_t v21 = 0;
      LODWORD(v22) = 0;
      uint64_t v79 = v19;
      unsigned int v23 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v19) - (v9 >> 1) + 1;
      int v24 = v9;
      do
      {
        signed int v26 = *(_DWORD *)(a1 + 236);
        if ((int)(v23 + v21) >= v26) {
          int v27 = v26 - 1;
        }
        else {
          int v27 = v23 + v21;
        }
        if ((int)(v23 + v21) >= 0) {
          int v28 = v27;
        }
        else {
          int v28 = 0;
        }
        if ((int)v22 <= (int)v21) {
          unint64_t v22 = v21;
        }
        else {
          unint64_t v22 = v22;
        }
        if ((int)v22 < (int)v9)
        {
          while (v22 > 0xF || v28 != __b[v22])
          {
            if ((uint64_t)++v22 >= (int)v9) {
              goto LABEL_16;
            }
          }
          if (v22 > v21)
          {
            memcpy(*((void **)&v83 + v21), *((const void **)&v83 + v22), 4 * v8);
            LODWORD(v9) = *(_DWORD *)(a1 + 248);
          }
        }
LABEL_16:
        if ((int)v21 >= v24) {
          int v25 = v24;
        }
        else {
          int v25 = v21;
        }
        if (v22 == v9) {
          int v24 = v25;
        }
        v91[v21] = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v28;
        __b[v21++] = v28;
      }
      while ((uint64_t)v21 < (int)v9);
      int v29 = *(_DWORD *)(a1 + 240);
      if ((int)v9 > v24) {
        break;
      }
      uint64_t v19 = v79;
LABEL_42:
      uint64_t v30 = *(void *)(a1 + 120);
      uint64_t v31 = *(void *)(a1 + 184);
      v10.i32[0] = *v20;
      LODWORD(a4) = v20[1];
      LODWORD(a5) = v20[2];
      LODWORD(a6) = v20[3];
      long long v32 = v83;
      long long v33 = v84;
      if (v29 >= 8)
      {
        unint64_t v34 = 0;
        float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        float32x4_t v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
        long long v37 = (float32x4_t *)(v83 + 16);
        float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
        long long v39 = (float32x4_t *)(v30 + v31 * v19 + 16);
        int v40 = (float32x4_t *)(*((void *)&v83 + 1) + 16);
        int8x16_t v41 = (float32x4_t *)(*((void *)&v84 + 1) + 16);
        int8x16_t v42 = (float32x4_t *)(v84 + 16);
        do
        {
          v39[-1] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v37[-1], *(float *)v10.i32), v40[-1], v35), v42[-1], v36), v41[-1], v38);
          float32x4_t v43 = *v37;
          v37 += 2;
          float32x4_t v44 = vmulq_n_f32(v43, *(float *)v10.i32);
          float32x4_t v45 = *v40;
          v40 += 2;
          float32x4_t v46 = vmlaq_f32(v44, v45, v35);
          float32x4_t v47 = *v42;
          v42 += 2;
          float32x4_t v48 = vmlaq_f32(v46, v47, v36);
          float32x4_t v49 = *v41;
          v41 += 2;
          v34 += 8;
          *long long v39 = vmlaq_f32(v48, v49, v38);
          v39 += 2;
        }
        while (v34 <= (v29 - 8));
        if ((int)v34 < v29)
        {
LABEL_48:
          unint64_t v50 = (int)v34;
          unint64_t v51 = v29 - (uint64_t)(int)v34;
          if (v51 < 0xC) {
            goto LABEL_49;
          }
          uint64_t v66 = 4 * (int)v34;
          if ((unint64_t)(v31 * v19 + v30 - v32) < 0x20) {
            goto LABEL_49;
          }
          if ((unint64_t)(v31 * v19 + v30 - *((void *)&v32 + 1)) < 0x20) {
            goto LABEL_49;
          }
          if ((unint64_t)(v31 * v19 + v30 - v33) < 0x20) {
            goto LABEL_49;
          }
          if ((unint64_t)(v31 * v19 + v30 - *((void *)&v33 + 1)) < 0x20) {
            goto LABEL_49;
          }
          unint64_t v50 = (v51 & 0xFFFFFFFFFFFFFFF8) + (int)v34;
          float32x4_t v67 = (float32x4_t)vdupq_lane_s32(v10, 0);
          float32x4_t v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
          float32x4_t v69 = (float32x4_t *)(v30 + v66 + v31 * v19 + 16);
          float32x4_t v70 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
          float32x4_t v71 = (float32x4_t *)(v32 + v66 + 16);
          float32x4_t v72 = (float32x4_t *)(*((void *)&v33 + 1) + v66 + 16);
          float32x4_t v73 = (float32x4_t *)(*((void *)&v32 + 1) + v66 + 16);
          float32x4_t v74 = (float32x4_t *)(v33 + v66 + 16);
          unint64_t v75 = v51 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v76 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(*v73, *(float *)&a4), v67, *v71), v68, *v74), v70, *v72);
            v69[-1] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v73[-1], *(float *)&a4), v67, v71[-1]), v68, v74[-1]), v70, v72[-1]);
            float32x4_t *v69 = v76;
            v69 += 2;
            v71 += 2;
            v72 += 2;
            v73 += 2;
            v74 += 2;
            v75 -= 8;
          }
          while (v75);
          if (v51 != (v51 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_49:
            unint64_t v52 = v29 - v50;
            uint64_t v53 = 4 * v50;
            float32x4_t v54 = (float *)(v30 + v53 + v31 * v19);
            float32x4_t v55 = (float *)(*((void *)&v33 + 1) + v53);
            float32x4_t v56 = (float *)(v33 + v53);
            float32x4_t v57 = (float *)(*((void *)&v32 + 1) + v53);
            float32x4_t v58 = (float *)(v32 + v53);
            do
            {
              float v59 = *v58++;
              float v60 = v59;
              float v61 = *v57++;
              float v62 = (float)(*(float *)&a4 * v61) + (float)(v60 * *(float *)v10.i32);
              float v63 = *v56++;
              float v64 = v62 + (float)(v63 * *(float *)&a5);
              float v65 = *v55++;
              *v54++ = v64 + (float)(v65 * *(float *)&a6);
              --v52;
            }
            while (v52);
          }
        }
      }
      else
      {
        LODWORD(v34) = 0;
        if (v29 > 0) {
          goto LABEL_48;
        }
      }
      ++v19;
      uint64_t v9 = *(int *)(a1 + 248);
      v20 += v9;
      if (v19 >= a2[1]) {
        return;
      }
    }
    sub_10036E9A0((uint64_t)&v81, (uint64_t)&v91[v24], (uint64_t)&v83 + 8 * v24, v9 - v24, *(void *)(a1 + 200), *(float **)(a1 + 216), *(_DWORD *)(a1 + 232), v29, v77, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
    uint64_t v19 = v79;
LABEL_40:
    int v29 = *(_DWORD *)(a1 + 240);
    goto LABEL_42;
  }
}

void sub_10036E9A0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, unsigned int a7, int a8, unsigned int a9, int a10, int a11)
{
  if (a4 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 2 * a9;
    if (a9 <= 1) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = a9;
    }
    uint64_t v14 = a4;
    do
    {
      LODWORD(v15) = 0;
      uint64_t v16 = *(void *)(a2 + 8 * v11);
      uint64_t v17 = *(void *)(a3 + 8 * v11);
      int v18 = a10;
      while (1)
      {
        if ((int)v15 < v18)
        {
          uint64_t v15 = (int)v15;
          do
          {
            unsigned int v19 = *(_DWORD *)(a5 + 4 * v15);
            int v20 = v19 - a9;
            signed int v21 = v19 - a9;
            if (v19 - a9 >= a7)
            {
              int v22 = (v20 & ~(v20 >> 31)) + a9 - v19;
              unsigned int v23 = (v22 - (v22 != 0)) / v13;
              if ((v20 & ~(v20 >> 31)) + a9 - v19) {
                ++v23;
              }
              signed int v21 = v19 + v23 * a9;
              do
                v21 -= a9;
              while (v21 >= (int)a7);
            }
            signed int v24 = *(_DWORD *)(a5 + 4 * v15);
            if (v19 >= a7)
            {
              signed int v24 = v19 + a9 + a9 * ((v19 >> 31) + ((v19 & ~((int)v19 >> 31)) - (v19 + (v19 >> 31))) / v13);
              do
                v24 -= a9;
              while (v24 >= (int)a7);
            }
            int v25 = v19 + a9;
            int v26 = v12 + v20;
            if (v12 + v20 >= a7)
            {
              int v26 = v19
                  + a9
                  * ((v25 >> 31) + ((v25 & ~(v25 >> 31)) - (v25 + (v25 >> 31))) / v13 + 2);
              do
                v26 -= a9;
              while (v26 >= (int)a7);
            }
            signed int v27 = 3 * a9 + v20;
            if (v27 >= a7)
            {
              signed int v27 = v19
                  + a9
                  * ((((v25 + a9) & ~((int)(v25 + a9) >> 31)) - (v25 + a9 + ((v25 + a9) >> 31))) / v13
                   + ((v25 + a9) >> 31)
                   + 3);
              do
                v27 -= a9;
              while (v27 >= (int)a7);
            }
            *(float *)(v17 + 4 * v15++) = (float)((float)((float)((float)(*(float *)(v16 + 4 * v21) * *a6) + 0.0)
                                                        + (float)(*(float *)(v16 + 4 * v24) * a6[1]))
                                                + (float)(*(float *)(v16 + 4 * v26) * a6[2]))
                                        + (float)(*(float *)(v16 + 4 * v27) * a6[3]);
            a6 += 4;
          }
          while (v15 != v18);
          LODWORD(v15) = v18;
        }
        if (v18 == a8) {
          break;
        }
        int v18 = a8;
        if ((int)v15 < a11)
        {
          uint64_t v28 = (int)v15;
          uint64_t v29 = 4 * (int)v15;
          uint64_t v30 = (int *)(a5 + v29);
          uint64_t v31 = (float *)(v17 + v29);
          uint64_t v32 = a11 - v28;
          do
          {
            uint64_t v33 = *v30++;
            *v31++ = (float)((float)((float)(*(float *)(v16 + 4 * v33) * a6[1])
                                   + (float)(*(float *)(v16 + 4 * (int)(v33 - a9)) * *a6))
                           + (float)(*(float *)(v16 + 4 * (int)(v33 + a9)) * a6[2]))
                   + (float)(*(float *)(v16 + 4 * ((int)v33 + v12)) * a6[3]);
            a6 += 4;
            --v32;
          }
          while (v32);
          LODWORD(v15) = a11;
          int v18 = a8;
        }
      }
      a6 -= 4 * a8;
      ++v11;
    }
    while (v11 != v14);
  }
}

uint64_t sub_10036EC00(uint64_t a1)
{
  *(void *)a1 = off_10049B5B0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_10036ED3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B5F0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v20 = *(void **)(a2 + 72);
    signed int v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    int v25 = *(void **)(a3 + 72);
    int v26 = *(void **)(a1 + 176);
    *int v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036EF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036EF80(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036EF94(uint64_t a1)
{
  sub_10036F6F8(a1);

  operator delete();
}

void sub_10036EFCC(uint64_t a1, int *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  signed int v4 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v5) = *(_DWORD *)(a1 + 248);
  if ((v5 * v4) >= 0x89) {
    operator new[]();
  }
  memset(v73, 0, 128);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  if ((int)v5 >= 1)
  {
    memset(__b, 255, 4 * v5);
    uint64_t v6 = v4;
    if (v5 == 1)
    {
      uint64_t v7 = 0;
LABEL_9:
      uint64_t v11 = &v62[v7 * v4];
      int v12 = (void *)&v65 + v7;
      uint64_t v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        uint64_t v11 = (void *)((char *)v11 + v6 * 8);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    uint64_t v7 = v5 & 0xFFFFFFFE;
    uint64_t v8 = (void *)&v65 + 1;
    uint64_t v9 = v7;
    uint64_t v10 = v62;
    do
    {
      *(v8 - 1) = v10;
      *uint64_t v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v14 = *a2;
  if ((int)v14 < a2[1])
  {
    uint64_t v15 = (float *)(*(void *)(a1 + 224) + 4 * (int)v14 * (int)v5);
    unsigned int v59 = ((v3 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v5 >= 1)
      {
        unint64_t v16 = 0;
        LODWORD(v17) = 0;
        uint64_t v61 = v14;
        unsigned int v18 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v14) - (v5 >> 1) + 1;
        int v19 = v5;
        do
        {
          signed int v21 = *(_DWORD *)(a1 + 236);
          if ((int)(v18 + v16) >= v21) {
            int v22 = v21 - 1;
          }
          else {
            int v22 = v18 + v16;
          }
          if ((int)(v18 + v16) >= 0) {
            int v23 = v22;
          }
          else {
            int v23 = 0;
          }
          if ((int)v17 <= (int)v16) {
            unint64_t v17 = v16;
          }
          else {
            unint64_t v17 = v17;
          }
          if ((int)v17 < (int)v5)
          {
            while (v17 > 0xF || v23 != __b[v17])
            {
              if ((uint64_t)++v17 >= (int)v5) {
                goto LABEL_16;
              }
            }
            if (v17 > v16)
            {
              memcpy(*((void **)&v65 + v16), *((const void **)&v65 + v17), 8 * v4);
              LODWORD(v5) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_16:
          if ((int)v16 >= v19) {
            int v20 = v19;
          }
          else {
            int v20 = v16;
          }
          if (v17 == v5) {
            int v19 = v20;
          }
          v73[v16] = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v23;
          __b[v16++] = v23;
        }
        while ((uint64_t)v16 < (int)v5);
        int v24 = *(_DWORD *)(a1 + 240);
        if ((int)v5 <= v19)
        {
          uint64_t v14 = v61;
          if (v24 < 1) {
            goto LABEL_13;
          }
          goto LABEL_43;
        }
        sub_10036F480((uint64_t)&v63, (uint64_t)&v73[v19], (uint64_t)&v65 + 8 * v19, v5 - v19, *(void *)(a1 + 200), *(float **)(a1 + 216), *(_DWORD *)(a1 + 232), v24, v59, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        uint64_t v14 = v61;
      }
      int v24 = *(_DWORD *)(a1 + 240);
      if (v24 < 1) {
        goto LABEL_13;
      }
LABEL_43:
      uint64_t v25 = *(void *)(a1 + 120);
      uint64_t v26 = *(void *)(a1 + 184);
      *(double *)&uint64_t v27 = *v15;
      double v28 = v15[1];
      *(double *)&uint64_t v29 = v15[2];
      *(double *)&uint64_t v30 = v15[3];
      long long v31 = v65;
      long long v32 = v66;
      if (v24 >= 8)
      {
        uint64_t v33 = 0;
        uint64_t v34 = v26 * v14 + v25;
        if ((unint64_t)(v34 - v65) >= 0x20
          && (unint64_t)(v34 - *((void *)&v65 + 1)) >= 0x20
          && (unint64_t)(v34 - v66) >= 0x20
          && (unint64_t)(v34 - *((void *)&v66 + 1)) >= 0x20)
        {
          float64x2_t v35 = (float64x2_t)vdupq_lane_s64(v27, 0);
          uint64_t v33 = v24 & 0xFFFFFFFC;
          float64x2_t v36 = (float64x2_t)vdupq_lane_s64(v29, 0);
          long long v37 = (float64x2_t *)(v65 + 16);
          float32x4_t v38 = (float64x2_t *)(v25 + v26 * v14 + 16);
          float64x2_t v39 = (float64x2_t)vdupq_lane_s64(v30, 0);
          int v40 = (float64x2_t *)(*((void *)&v65 + 1) + 16);
          int8x16_t v41 = (float64x2_t *)(*((void *)&v66 + 1) + 16);
          int8x16_t v42 = (float64x2_t *)(v66 + 16);
          uint64_t v43 = v33;
          do
          {
            float64x2_t v44 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*v40, v28), v35, *v37), v36, *v42), v39, *v41);
            v38[-1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v40[-1], v28), v35, v37[-1]), v36, v42[-1]), v39, v41[-1]);
            *float32x4_t v38 = v44;
            v37 += 2;
            v38 += 2;
            v40 += 2;
            v41 += 2;
            v42 += 2;
            v43 -= 4;
          }
          while (v43);
          if (v33 == v24) {
            goto LABEL_13;
          }
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v45 = v24 - v33;
      uint64_t v46 = 8 * v33;
      float32x4_t v47 = (double *)(v25 + v46 + v26 * v14);
      float32x4_t v48 = (double *)(*((void *)&v32 + 1) + v46);
      float32x4_t v49 = (double *)(v32 + v46);
      unint64_t v50 = (double *)(*((void *)&v31 + 1) + v46);
      unint64_t v51 = (double *)(v31 + v46);
      do
      {
        double v52 = *v51++;
        double v53 = v52;
        double v54 = *v50++;
        double v55 = v54 * v28 + v53 * *(double *)&v27;
        double v56 = *v49++;
        double v57 = v55 + v56 * *(double *)&v29;
        double v58 = *v48++;
        *v47++ = v57 + v58 * *(double *)&v30;
        --v45;
      }
      while (v45);
LABEL_13:
      ++v14;
      uint64_t v5 = *(int *)(a1 + 248);
      v15 += v5;
    }
    while (v14 < a2[1]);
  }
}

void sub_10036F480(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, unsigned int a7, int a8, unsigned int a9, int a10, int a11)
{
  if (a4 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 2 * a9;
    if (a9 <= 1) {
      unsigned int v13 = 1;
    }
    else {
      unsigned int v13 = a9;
    }
    uint64_t v14 = a4;
    do
    {
      LODWORD(v15) = 0;
      uint64_t v16 = *(void *)(a2 + 8 * v11);
      uint64_t v17 = *(void *)(a3 + 8 * v11);
      int v18 = a10;
      while (1)
      {
        if ((int)v15 < v18)
        {
          uint64_t v15 = (int)v15;
          do
          {
            unsigned int v19 = *(_DWORD *)(a5 + 4 * v15);
            int v20 = v19 - a9;
            signed int v21 = v19 - a9;
            if (v19 - a9 >= a7)
            {
              int v22 = (v20 & ~(v20 >> 31)) + a9 - v19;
              unsigned int v23 = (v22 - (v22 != 0)) / v13;
              if ((v20 & ~(v20 >> 31)) + a9 - v19) {
                ++v23;
              }
              signed int v21 = v19 + v23 * a9;
              do
                v21 -= a9;
              while (v21 >= (int)a7);
            }
            signed int v24 = *(_DWORD *)(a5 + 4 * v15);
            if (v19 >= a7)
            {
              signed int v24 = v19 + a9 + a9 * ((v19 >> 31) + ((v19 & ~((int)v19 >> 31)) - (v19 + (v19 >> 31))) / v13);
              do
                v24 -= a9;
              while (v24 >= (int)a7);
            }
            int v25 = v19 + a9;
            int v26 = v12 + v20;
            if (v12 + v20 >= a7)
            {
              int v26 = v19
                  + a9
                  * ((v25 >> 31) + ((v25 & ~(v25 >> 31)) - (v25 + (v25 >> 31))) / v13 + 2);
              do
                v26 -= a9;
              while (v26 >= (int)a7);
            }
            signed int v27 = 3 * a9 + v20;
            if (v27 >= a7)
            {
              signed int v27 = v19
                  + a9
                  * ((((v25 + a9) & ~((int)(v25 + a9) >> 31)) - (v25 + a9 + ((v25 + a9) >> 31))) / v13
                   + ((v25 + a9) >> 31)
                   + 3);
              do
                v27 -= a9;
              while (v27 >= (int)a7);
            }
            *(double *)(v17 + 8 * v15++) = *(double *)(v16 + 8 * v21) * *a6
                                         + 0.0
                                         + *(double *)(v16 + 8 * v24) * a6[1]
                                         + *(double *)(v16 + 8 * v26) * a6[2]
                                         + *(double *)(v16 + 8 * v27) * a6[3];
            a6 += 4;
          }
          while (v15 != v18);
          LODWORD(v15) = v18;
        }
        if (v18 == a8) {
          break;
        }
        int v18 = a8;
        if ((int)v15 < a11)
        {
          double v28 = (int *)(a5 + 4 * (int)v15);
          uint64_t v29 = (double *)(v17 + 8 * (int)v15);
          uint64_t v30 = a11 - (uint64_t)(int)v15;
          do
          {
            uint64_t v31 = *v28++;
            *v29++ = *(double *)(v16 + 8 * v31) * a6[1]
                   + *(double *)(v16 + 8 * (int)(v31 - a9)) * *a6
                   + *(double *)(v16 + 8 * (int)(v31 + a9)) * a6[2]
                   + *(double *)(v16 + 8 * ((int)v31 + v12)) * a6[3];
            a6 += 4;
            --v30;
          }
          while (v30);
          LODWORD(v15) = a11;
          int v18 = a8;
        }
      }
      a6 -= 4 * a8;
      ++v11;
    }
    while (v11 != v14);
  }
}

uint64_t sub_10036F6F8(uint64_t a1)
{
  *(void *)a1 = off_10049B5F0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_10036F834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B630;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v20 = *(void **)(a2 + 72);
    signed int v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    int v25 = *(void **)(a3 + 72);
    int v26 = *(void **)(a1 + 176);
    *int v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_10036FA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_10036FA78(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10036FA8C(uint64_t a1)
{
  sub_1003704D4(a1);

  operator delete();
}

_DWORD *sub_10036FAC4(_DWORD *result, int *a2)
{
  uint64_t v2 = result;
  unsigned int v3 = result[2];
  signed int v4 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v5) = result[62];
  if ((v5 * v4) >= 0x109) {
    operator new[]();
  }
  memset(v33, 0, 128);
  memset(v32, 0, sizeof(v32));
  if ((int)v5 >= 1)
  {
    uint64_t result = memset(__b, 255, 4 * v5);
    uint64_t v6 = v4;
    if (v5 == 1)
    {
      uint64_t v7 = 0;
LABEL_9:
      uint64_t v11 = &v28[v7 * v4];
      int v12 = &v32[v7];
      uint64_t v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        uint64_t v11 = (_DWORD *)((char *)v11 + v6 * 4);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    uint64_t v7 = v5 & 0xFFFFFFFE;
    uint64_t v8 = &v32[1];
    uint64_t v9 = v7;
    uint64_t v10 = v28;
    do
    {
      *(v8 - 1) = v10;
      *uint64_t v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v14 = *a2;
  if ((int)v14 < a2[1])
  {
    uint64_t v15 = (__int16 *)(*((void *)v2 + 28) + 2 * (int)v14 * (int)v5);
    signed int v25 = ((v3 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v27 = v15;
        unint64_t v16 = 0;
        LODWORD(v17) = 0;
        unsigned int v18 = *(_DWORD *)(*((void *)v2 + 26) + 4 * v14) - (v5 >> 1) + 1;
        int v19 = v5;
        do
        {
          signed int v21 = v2[59];
          if ((int)(v18 + v16) >= v21) {
            int v22 = v21 - 1;
          }
          else {
            int v22 = v18 + v16;
          }
          if ((int)(v18 + v16) >= 0) {
            int v23 = v22;
          }
          else {
            int v23 = 0;
          }
          if ((int)v17 <= (int)v16) {
            unint64_t v17 = v16;
          }
          else {
            unint64_t v17 = v17;
          }
          if ((int)v17 < (int)v5)
          {
            while (v17 > 0xF || v23 != __b[v17])
            {
              if ((uint64_t)++v17 >= (int)v5) {
                goto LABEL_15;
              }
            }
            if (v17 > v16)
            {
              memcpy((void *)v32[v16], (const void *)v32[v17], 4 * v4);
              LODWORD(v5) = v2[62];
            }
          }
LABEL_15:
          if ((int)v16 >= v19) {
            int v20 = v19;
          }
          else {
            int v20 = v16;
          }
          if (v17 == v5) {
            int v19 = v20;
          }
          v33[v16] = *((void *)v2 + 3) + **((void **)v2 + 10) * v23;
          __b[v16++] = v23;
        }
        while ((uint64_t)v16 < (int)v5);
        int v24 = v2[60];
        if ((int)v5 <= v19)
        {
          uint64_t v15 = v27;
          goto LABEL_41;
        }
        sub_10036FE6C((uint64_t)&v30, (uint64_t)&v33[v19], (uint64_t)&v32[v19], v5 - v19, *((void *)v2 + 25), *((__int16 **)v2 + 27), v2[58], v24, v25, v2[63], v2[64]);
        uint64_t v15 = v27;
      }
      int v24 = v2[60];
LABEL_41:
      uint64_t result = sub_1003702E8((uint64_t)&v29, v32, *((void *)v2 + 15) + *((void *)v2 + 23) * v14++, v15, v24);
      uint64_t v5 = (int)v2[62];
      v15 += v5;
    }
    while (v14 < a2[1]);
  }
  return result;
}

void sub_10036FE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_10036FE6C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, __int16 *a6, unsigned int a7, int a8, signed int a9, int a10, int a11)
{
  if (a4 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 2 * a9;
    int v13 = 4 * a9;
    int v14 = a11;
    int v15 = 3 * a9;
    uint64_t v67 = -8 * a8;
    int v72 = -3 * a9;
    if (a9 <= 1) {
      unsigned int v16 = 1;
    }
    else {
      unsigned int v16 = a9;
    }
    int v70 = a8;
    int v75 = 4 * a9;
    do
    {
      int v17 = 0;
      uint64_t v69 = v11;
      uint64_t v18 = 8 * v11;
      uint64_t v19 = *(void *)(a2 + v18);
      uint64_t v76 = *(void *)(a3 + v18);
      int v20 = a10;
      while (1)
      {
        if (v17 < v20)
        {
          uint64_t v21 = v17;
          int v71 = v20;
          uint64_t v74 = v20;
          do
          {
            unsigned int v22 = *(_DWORD *)(a5 + 4 * v21);
            int v23 = v72 + v22;
            unsigned int v24 = v15 - v22;
            signed int v25 = v72 + v22;
            if (v72 + v22 >= a7)
            {
              unsigned int v26 = ((v23 & ~(v23 >> 31)) + v24 - ((v23 & ~(v23 >> 31)) + v24 != 0)) / v16;
              if ((v23 & ~(v23 >> 31)) + v24) {
                ++v26;
              }
              signed int v25 = v22 + a9 * (v26 - 2);
              do
                v25 -= a9;
              while (v25 >= (int)a7);
            }
            int v27 = v23 + a9;
            unsigned int v28 = v24 - a9;
            signed int v29 = v22 - v12;
            if (v22 - v12 >= a7)
            {
              unsigned int v30 = ((v27 & ~(v27 >> 31)) + v28 - ((v27 & ~(v27 >> 31)) + v28 != 0)) / v16;
              if ((v27 & ~(v27 >> 31)) + v28) {
                ++v30;
              }
              signed int v29 = v22 + a9 * (v30 - 1);
              do
                v29 -= a9;
              while (v29 >= (int)a7);
            }
            int v31 = v27 + a9;
            unsigned int v32 = v28 - a9;
            signed int v33 = v22 - a9;
            if (v22 - a9 >= a7)
            {
              unsigned int v34 = ((v31 & ~(v31 >> 31)) + v32 - ((v31 & ~(v31 >> 31)) + v32 != 0)) / v16;
              if ((v31 & ~(v31 >> 31)) + v32) {
                ++v34;
              }
              signed int v33 = v22 + v34 * a9;
              do
                v33 -= a9;
              while (v33 >= (int)a7);
            }
            int v35 = v31 + a9;
            unsigned int v36 = v32 - a9;
            signed int v37 = *(_DWORD *)(a5 + 4 * v21);
            if (v22 >= a7)
            {
              unsigned int v38 = ((v35 & ~(v35 >> 31)) + v36 - ((v35 & ~(v35 >> 31)) + v36 != 0)) / v16;
              if ((v35 & ~(v35 >> 31)) + v36) {
                ++v38;
              }
              signed int v37 = v22 + a9 + a9 * v38;
              do
                v37 -= a9;
              while (v37 >= (int)a7);
            }
            int v39 = v35 + a9;
            unsigned int v40 = v36 - a9;
            signed int v41 = v22 + a9;
            if (v22 + a9 >= a7)
            {
              unsigned int v42 = ((v39 & ~(v39 >> 31)) + v40 - ((v39 & ~(v39 >> 31)) + v40 != 0)) / v16;
              if ((v39 & ~(v39 >> 31)) + v40) {
                ++v42;
              }
              signed int v41 = v22 + a9 * (v42 + 2);
              do
                v41 -= a9;
              while (v41 >= (int)a7);
            }
            int v43 = v39 + a9;
            unsigned int v44 = v40 - a9;
            signed int v45 = v12 + v22;
            if (v12 + v22 >= a7)
            {
              unsigned int v46 = ((v43 & ~(v43 >> 31)) + v44 - ((v43 & ~(v43 >> 31)) + v44 != 0)) / v16;
              if ((v43 & ~(v43 >> 31)) + v44) {
                ++v46;
              }
              signed int v45 = v22 + a9 * (v46 + 3);
              do
                v45 -= a9;
              while (v45 >= (int)a7);
            }
            int v47 = *(unsigned __int8 *)(v19 + v25);
            int v48 = *(unsigned __int8 *)(v19 + v29);
            int v49 = *(unsigned __int8 *)(v19 + v33);
            int v50 = *(unsigned __int8 *)(v19 + v37);
            int v51 = *(unsigned __int8 *)(v19 + v41);
            int v52 = v43 + a9;
            int v53 = *(unsigned __int8 *)(v19 + v45);
            unsigned int v54 = v44 - a9;
            signed int v55 = v15 + v22;
            if (v15 + v22 >= a7)
            {
              unsigned int v56 = ((v52 & ~(v52 >> 31)) + v54 - ((v52 & ~(v52 >> 31)) + v54 != 0)) / v16;
              if ((v52 & ~(v52 >> 31)) + v54) {
                ++v56;
              }
              signed int v55 = v22 + a9 * (v56 + 4);
              do
                v55 -= a9;
              while (v55 >= (int)a7);
            }
            int v57 = *(unsigned __int8 *)(v19 + v55);
            signed int v58 = v75 + v22;
            if (v75 + v22 >= a7)
            {
              int v59 = ((v52 + a9) & ~((v52 + a9) >> 31)) + v54 - a9;
              unsigned int v60 = (v59 - (v59 != 0)) / v16;
              if (((v52 + a9) & ~((v52 + a9) >> 31)) + v54 - a9) {
                ++v60;
              }
              signed int v58 = v22 + a9 * (v60 + 5);
              do
                v58 -= a9;
              while (v58 >= (int)a7);
            }
            *(_DWORD *)(v76 + 4 * v21++) = *a6 * v47
                                         + a6[1] * v48
                                         + a6[2] * v49
                                         + a6[3] * v50
                                         + a6[4] * v51
                                         + a6[5] * v53
                                         + a6[6] * v57
                                         + a6[7] * *(unsigned __int8 *)(v19 + v58);
            a6 += 8;
          }
          while (v21 != v74);
          int v20 = v71;
          int v17 = v71;
          a8 = v70;
          int v13 = 4 * a9;
          int v14 = a11;
        }
        if (v20 == a8) {
          break;
        }
        int v20 = a8;
        if (v17 < v14)
        {
          uint64_t v61 = v17;
          uint64_t v62 = 4 * v17;
          char v63 = (int *)(a5 + v62);
          float v64 = (_DWORD *)(v76 + v62);
          uint64_t v65 = a11 - v61;
          do
          {
            uint64_t v66 = *v63++;
            *v64++ = *a6 * *(unsigned __int8 *)(v19 + v66 - v15)
                   + a6[1] * *(unsigned __int8 *)(v19 + v66 - v12)
                   + a6[2] * *(unsigned __int8 *)(v19 + v66 - a9)
                   + a6[3] * *(unsigned __int8 *)(v19 + v66)
                   + a6[4] * *(unsigned __int8 *)(v19 + v66 + a9)
                   + a6[5] * *(unsigned __int8 *)(v19 + v66 + v12)
                   + a6[6] * *(unsigned __int8 *)(v19 + v66 + v15)
                   + a6[7] * *(unsigned __int8 *)(v19 + v66 + v13);
            a6 += 8;
            --v65;
          }
          while (v65);
          int v17 = v14;
          int v20 = a8;
        }
      }
      a6 += v67;
      uint64_t v11 = v69 + 1;
    }
    while (v69 + 1 != a4);
  }
}

const __int16 *sub_1003702E8(uint64_t a1, void *a2, uint64_t a3, __int16 *a4, int a5)
{
  if (a5 >= 4)
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0;
    v7.i64[0] = 0x20000000200000;
    v7.i64[1] = 0x20000000200000;
    v8.i64[0] = 0xFF000000FFLL;
    v8.i64[1] = 0xFF000000FFLL;
    do
    {
      uint64_t v9 = a4;
      int16x4_t v10 = vld1_dup_s16(v9++);
      int16x4_t v11 = vld1_dup_s16(v9);
      int v12 = a4 + 2;
      int16x4_t v13 = vld1_dup_s16(v12);
      int v14 = a4 + 3;
      int v15 = a4 + 4;
      unsigned int v16 = a4 + 5;
      int v17 = a4 + 6;
      uint64_t result = a4 + 7;
      int32x4_t v19 = vmlaq_s32(vmulq_s32(*(int32x4_t *)(*a2 + v6), vmovl_s16(v10)), *(int32x4_t *)(a2[1] + v6), vmovl_s16(v11));
      int16x4_t v20 = vld1_dup_s16(v14);
      int16x4_t v21 = vld1_dup_s16(v15);
      int32x4_t v22 = vmlaq_s32(vmlaq_s32(v19, *(int32x4_t *)(a2[2] + v6), vmovl_s16(v13)), *(int32x4_t *)(a2[3] + v6), vmovl_s16(v20));
      int16x4_t v23 = vld1_dup_s16(v16);
      int32x4_t v24 = vmlaq_s32(v22, *(int32x4_t *)(a2[4] + v6), vmovl_s16(v21));
      int16x4_t v25 = vld1_dup_s16(v17);
      int16x4_t v26 = vld1_dup_s16(result);
      int16x8_t v27 = (int16x8_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(v24, *(int32x4_t *)(a2[5] + v6), vmovl_s16(v23)), *(int32x4_t *)(a2[6] + v6), vmovl_s16(v25)), *(int32x4_t *)(a2[7] + v6), vmovl_s16(v26)), v7), 0x16uLL), (int32x4_t)0), v8);
      *(int16x4_t *)v27.i8 = vmovn_s32((int32x4_t)v27);
      *(_DWORD *)(a3 + v5) = vmovn_s16(v27).u32[0];
      v5 += 4;
      v6 += 16;
    }
    while (v5 <= (a5 - 4));
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((int)v5 < a5)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v5;
    uint64_t v30 = a3 + v5;
    uint64_t v31 = 4 * v5;
    uint64_t v32 = a5 - v29;
    do
    {
      uint64_t result = (const __int16 *)*(unsigned int *)(a2[2] + v31 + 4 * v28);
      int v33 = *(_DWORD *)(a2[1] + v31 + 4 * v28) * a4[1]
          + *(_DWORD *)(*a2 + v31 + 4 * v28) * *a4
          + result * a4[2]
          + *(_DWORD *)(a2[3] + v31 + 4 * v28) * a4[3]
          + *(_DWORD *)(a2[4] + v31 + 4 * v28) * a4[4]
          + *(_DWORD *)(a2[5] + v31 + 4 * v28) * a4[5]
          + *(_DWORD *)(a2[6] + v31 + 4 * v28) * a4[6]
          + *(_DWORD *)(a2[7] + v31 + 4 * v28) * a4[7]
          + 0x200000;
      int v34 = (v33 >> 22) & ~(v33 >> 31);
      if (v34 >= 255) {
        LOBYTE(v34) = -1;
      }
      *(unsigned char *)(v30 + v28++) = v34;
    }
    while (v32 != v28);
  }
  return result;
}

uint64_t sub_1003704D4(uint64_t a1)
{
  *(void *)a1 = off_10049B630;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100370610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B670;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int16x4_t v20 = *(void **)(a2 + 72);
    int16x4_t v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    int16x4_t v25 = *(void **)(a3 + 72);
    int16x4_t v26 = *(void **)(a1 + 176);
    *int16x4_t v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100370814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100370854(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100370868(uint64_t a1)
{
  sub_100371734(a1);

  operator delete();
}

_DWORD *sub_1003708A0(_DWORD *result, int *a2, double a3, float a4, float a5, float a6, double a7, float a8, double a9, float a10)
{
  uint64_t v10 = result;
  unsigned int v11 = result[2];
  signed int v12 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v13) = result[62];
  if ((v13 * v12) >= 0x109) {
    operator new[]();
  }
  double v14 = 0.0;
  memset(v42, 0, 128);
  memset(v41, 0, sizeof(v41));
  if ((int)v13 >= 1)
  {
    uint64_t result = memset(__b, 255, 4 * v13);
    uint64_t v15 = v12;
    if (v13 == 1)
    {
      uint64_t v16 = 0;
LABEL_9:
      int16x4_t v20 = &v37[v16 * v12];
      int16x4_t v21 = &v41[v16];
      uint64_t v22 = v13 - v16;
      do
      {
        *v21++ = v20;
        int16x4_t v20 = (_DWORD *)((char *)v20 + v15 * 4);
        --v22;
      }
      while (v22);
      goto LABEL_11;
    }
    uint64_t v16 = v13 & 0xFFFFFFFE;
    int v17 = &v41[1];
    uint64_t v18 = v16;
    uint64_t v19 = v37;
    do
    {
      *(v17 - 1) = v19;
      *int v17 = &v19[v15];
      v19 += 2 * v12;
      v17 += 2;
      v18 -= 2;
    }
    while (v18);
    if (v16 != v13) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v23 = *a2;
  if ((int)v23 < a2[1])
  {
    uint64_t v24 = *((void *)v10 + 28) + 4 * (int)v23 * (int)v13;
    unsigned int v34 = ((v11 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v13 >= 1)
      {
        uint64_t v36 = v24;
        unint64_t v25 = 0;
        LODWORD(v26) = 0;
        unsigned int v27 = *(_DWORD *)(*((void *)v10 + 26) + 4 * v23) - (v13 >> 1) + 1;
        int v28 = v13;
        do
        {
          signed int v30 = v10[59];
          if ((int)(v27 + v25) >= v30) {
            int v31 = v30 - 1;
          }
          else {
            int v31 = v27 + v25;
          }
          if ((int)(v27 + v25) >= 0) {
            int v32 = v31;
          }
          else {
            int v32 = 0;
          }
          if ((int)v26 <= (int)v25) {
            unint64_t v26 = v25;
          }
          else {
            unint64_t v26 = v26;
          }
          if ((int)v26 < (int)v13)
          {
            while (v26 > 0xF || v32 != __b[v26])
            {
              if ((uint64_t)++v26 >= (int)v13) {
                goto LABEL_15;
              }
            }
            if (v26 > v25)
            {
              memcpy((void *)v41[v25], (const void *)v41[v26], 4 * v12);
              LODWORD(v13) = v10[62];
            }
          }
LABEL_15:
          if ((int)v25 >= v28) {
            int v29 = v28;
          }
          else {
            int v29 = v25;
          }
          if (v26 == v13) {
            int v28 = v29;
          }
          v42[v25] = *((void *)v10 + 3) + **((void **)v10 + 10) * v32;
          __b[v25++] = v32;
        }
        while ((uint64_t)v25 < (int)v13);
        int v33 = v10[60];
        if ((int)v13 <= v28)
        {
          uint64_t v24 = v36;
          goto LABEL_41;
        }
        sub_100370C48(v14, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v39, (uint64_t)&v42[v28], (uint64_t)&v41[v28], v13 - v28, *((void *)v10 + 25), *((float **)v10 + 27), v10[58], v33, v34, v10[63], v10[64]);
        uint64_t v24 = v36;
      }
      int v33 = v10[60];
LABEL_41:
      uint64_t result = (_DWORD *)sub_100371080((uint64_t)&v38, (uint64_t)v41, (uint16x8_t *)(*((void *)v10 + 15) + *((void *)v10 + 23) * v23++), v24, v33);
      uint64_t v13 = (int)v10[62];
      v24 += 4 * v13;
    }
    while (v23 < a2[1]);
  }
  return result;
}

void sub_100370C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_100370C48(double a1, float a2, float a3, float a4, double a5, float a6, double a7, float a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, float *a14, unsigned int a15, int a16, unsigned int a17, int a18, int a19)
{
  if (a12 >= 1)
  {
    uint64_t v21 = 0;
    int v22 = 2 * a17;
    int v23 = 4 * a17;
    int v24 = 3 * a17;
    int v25 = -3 * a17;
    if (a17 <= 1) {
      unsigned int v26 = 1;
    }
    else {
      unsigned int v26 = a17;
    }
    do
    {
      LODWORD(v27) = 0;
      uint64_t v28 = *(void *)(a10 + 8 * v21);
      uint64_t v29 = *(void *)(a11 + 8 * v21);
      int v30 = a18;
      while (1)
      {
        if ((int)v27 < v30)
        {
          uint64_t v27 = (int)v27;
          do
          {
            unsigned int v33 = *(_DWORD *)(a13 + 4 * v27);
            int v34 = v25 + v33;
            int v35 = v24 - v33;
            signed int v36 = v25 + v33;
            if (v25 + v33 >= a15)
            {
              unsigned int v37 = ((v34 & ~(v34 >> 31)) + v35 - ((v34 & ~(v34 >> 31)) + v35 != 0)) / v26;
              if ((v34 & ~(v34 >> 31)) + v35) {
                ++v37;
              }
              signed int v36 = v33 + a17 * (v37 - 2);
              do
                v36 -= a17;
              while (v36 >= (int)a15);
            }
            int v38 = v34 + a17;
            int v39 = v35 - a17;
            signed int v40 = v33 - v22;
            if (v33 - v22 >= a15)
            {
              unsigned int v41 = ((v38 & ~(v38 >> 31)) + v39 - ((v38 & ~(v38 >> 31)) + v39 != 0)) / v26;
              if ((v38 & ~(v38 >> 31)) + v39) {
                ++v41;
              }
              signed int v40 = v33 + a17 * (v41 - 1);
              do
                v40 -= a17;
              while (v40 >= (int)a15);
            }
            int v42 = v38 + a17;
            int v43 = v39 - a17;
            signed int v44 = v33 - a17;
            if (v33 - a17 >= a15)
            {
              unsigned int v45 = ((v42 & ~(v42 >> 31)) + v43 - ((v42 & ~(v42 >> 31)) + v43 != 0)) / v26;
              if ((v42 & ~(v42 >> 31)) + v43) {
                ++v45;
              }
              signed int v44 = v33 + v45 * a17;
              do
                v44 -= a17;
              while (v44 >= (int)a15);
            }
            int v46 = v42 + a17;
            int v47 = v43 - a17;
            signed int v48 = *(_DWORD *)(a13 + 4 * v27);
            if (v33 >= a15)
            {
              unsigned int v49 = ((v46 & ~(v46 >> 31)) + v47 - ((v46 & ~(v46 >> 31)) + v47 != 0)) / v26;
              if ((v46 & ~(v46 >> 31)) + v47) {
                ++v49;
              }
              signed int v48 = v33 + a17 + a17 * v49;
              do
                v48 -= a17;
              while (v48 >= (int)a15);
            }
            int v50 = v46 + a17;
            int v51 = v47 - a17;
            signed int v52 = v33 + a17;
            if (v33 + a17 >= a15)
            {
              unsigned int v53 = ((v50 & ~(v50 >> 31)) + v51 - ((v50 & ~(v50 >> 31)) + v51 != 0)) / v26;
              if ((v50 & ~(v50 >> 31)) + v51) {
                ++v53;
              }
              signed int v52 = v33 + a17 * (v53 + 2);
              do
                v52 -= a17;
              while (v52 >= (int)a15);
            }
            int v54 = v50 + a17;
            int v55 = v51 - a17;
            signed int v56 = v22 + v33;
            if (v22 + v33 >= a15)
            {
              int v57 = (v54 & ~(v54 >> 31)) + v55;
              unsigned int v58 = (v57 - (v57 != 0)) / v26;
              if (v57) {
                ++v58;
              }
              signed int v56 = v33 + a17 * (v58 + 3);
              do
                v56 -= a17;
              while (v56 >= (int)a15);
            }
            LOWORD(v19) = *(_WORD *)(v28 + 2 * v36);
            int v59 = v54 + a17;
            int v60 = v55 - a17;
            signed int v61 = v24 + v33;
            if (v24 + v33 >= a15)
            {
              unsigned int v62 = ((v59 & ~(v59 >> 31)) + v60 - ((v59 & ~(v59 >> 31)) + v60 != 0)) / v26;
              if ((v59 & ~(v59 >> 31)) + v60) {
                ++v62;
              }
              signed int v61 = v33 + a17 * (v62 + 4);
              do
                v61 -= a17;
              while (v61 >= (int)a15);
            }
            LOWORD(v20) = *(_WORD *)(v28 + 2 * v61);
            signed int v63 = v23 + v33;
            if (v23 + v33 >= a15)
            {
              int v64 = ((v59 + a17) & ~((int)(v59 + a17) >> 31)) + v60 - a17;
              unsigned int v65 = (v64 - (v64 != 0)) / v26;
              if (((v59 + a17) & ~((int)(v59 + a17) >> 31)) + v60 - a17) {
                ++v65;
              }
              signed int v63 = v33 + a17 * (v65 + 5);
              do
                v63 -= a17;
              while (v63 >= (int)a15);
            }
            float v19 = (float)((float)LODWORD(v19) * *a14) + 0.0;
            LOWORD(a8) = *(_WORD *)(v28 + 2 * v40);
            a8 = v19 + (float)((float)LODWORD(a8) * a14[1]);
            LOWORD(a6) = *(_WORD *)(v28 + 2 * v44);
            a6 = a8 + (float)((float)LODWORD(a6) * a14[2]);
            LOWORD(a2) = *(_WORD *)(v28 + 2 * v56);
            LOWORD(a3) = *(_WORD *)(v28 + 2 * v52);
            LOWORD(a4) = *(_WORD *)(v28 + 2 * v48);
            float v31 = (float)((float)(a6 + (float)((float)LODWORD(a4) * a14[3])) + (float)((float)LODWORD(a3) * a14[4]))
                + (float)((float)LODWORD(a2) * a14[5]);
            *(float *)&unsigned int v32 = (float)v20;
            LOWORD(v32) = *(_WORD *)(v28 + 2 * v63);
            a3 = (float)v32;
            a4 = a14[7];
            a2 = (float)(v31 + (float)((float)v20 * a14[6])) + (float)(a3 * a4);
            *(float *)(v29 + 4 * v27++) = a2;
            a14 += 8;
          }
          while (v27 != v30);
          LODWORD(v27) = v30;
        }
        if (v30 == a16) {
          break;
        }
        int v30 = a16;
        if ((int)v27 < a19)
        {
          uint64_t v66 = (int)v27;
          uint64_t v67 = 4 * (int)v27;
          long long v68 = (int *)(a13 + v67);
          uint64_t v69 = (float *)(v29 + v67);
          uint64_t v70 = a19 - v66;
          do
          {
            uint64_t v71 = *v68++;
            LOWORD(a2) = *(_WORD *)(v28 + 2 * ((int)v71 - v24));
            LOWORD(a3) = *(_WORD *)(v28 + 2 * ((int)v71 - v22));
            *(float *)&unsigned int v72 = a14[1] * (float)LODWORD(a3);
            float v73 = *(float *)&v72 + (float)((float)LODWORD(a2) * *a14);
            LOWORD(v72) = *(_WORD *)(v28 + 2 * (int)(v71 - a17));
            *(float *)&unsigned int v74 = (float)v72;
            float v75 = v73 + (float)(*(float *)&v74 * a14[2]);
            LOWORD(v74) = *(_WORD *)(v28 + 2 * v71);
            *(float *)&unsigned int v76 = (float)v74;
            float v77 = v75 + (float)(*(float *)&v76 * a14[3]);
            LOWORD(v76) = *(_WORD *)(v28 + 2 * (int)(v71 + a17));
            *(float *)&unsigned int v78 = (float)v76;
            float v79 = v77 + (float)(*(float *)&v78 * a14[4]);
            LOWORD(v78) = *(_WORD *)(v28 + 2 * ((int)v71 + v22));
            *(float *)&unsigned int v80 = (float)v78;
            float v81 = v79 + (float)(*(float *)&v80 * a14[5]);
            LOWORD(v80) = *(_WORD *)(v28 + 2 * ((int)v71 + v24));
            *(float *)&unsigned int v82 = (float)v80;
            a4 = a14[6];
            float v83 = v81 + (float)(*(float *)&v82 * a4);
            LOWORD(v82) = *(_WORD *)(v28 + 2 * ((int)v71 + v23));
            a3 = (float)v82;
            a2 = v83 + (float)(a3 * a14[7]);
            *v69++ = a2;
            a14 += 8;
            --v70;
          }
          while (v70);
          LODWORD(v27) = a19;
          int v30 = a16;
        }
      }
      a14 -= 8 * a16;
      ++v21;
    }
    while (v21 != a12);
  }
}

uint64_t sub_100371080(uint64_t a1, uint64_t a2, uint16x8_t *a3, uint64_t a4, int a5)
{
  uint64_t result = sub_10037136C((uint64_t)&v53, (float32x4_t **)a2, a3, (const float *)a4, a5);
  if ((int)result <= a5 - 4)
  {
    uint64_t v10 = (int)result;
    float v11 = *(float *)(a4 + 16);
    float v12 = *(float *)(a4 + 20);
    float v13 = *(float *)a4;
    float v14 = *(float *)(a4 + 4);
    uint64_t v15 = (int16x4_t *)((char *)a3 + 2 * (int)result);
    uint64_t v16 = 4 * (int)result;
    uint64_t v17 = *(void *)(a2 + 24) + 8;
    uint64_t v18 = *(void *)(a2 + 32) + 12;
    uint64_t v19 = *(void *)(a2 + 40) + 12;
    uint64_t v20 = *(void *)(a2 + 48) + 12;
    float v21 = *(float *)(a4 + 8);
    float v22 = *(float *)(a4 + 12);
    uint64_t v23 = *(void *)(a2 + 56) + 12;
    uint64_t v24 = *(void *)a2 + 8;
    uint64_t v25 = *(void *)(a2 + 8) + 8;
    uint64_t v26 = *(void *)(a2 + 16) + 8;
    uint64_t v27 = 4 * v10;
    v28.i64[0] = 0xFFFF0000FFFFLL;
    v28.i64[1] = 0xFFFF0000FFFFLL;
    float v29 = *(float *)(a4 + 24);
    float v30 = *(float *)(a4 + 28);
    do
    {
      v31.i32[0] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 - 8))+ (float)(*(float *)(v25 + v16 - 8) * v14))+ (float)(*(float *)(v26 + v16 - 8) * v21))+ (float)(*(float *)(v17 + v16 - 8) * v22))+ (float)(*(float *)(v18 + v16 - 12) * v11))+ (float)(*(float *)(v19 + v16 - 12) * v12))+ (float)(*(float *)(v20 + v16 - 12) * v29))+ (float)(*(float *)(v23 + v16 - 12) * v30));
      v31.i32[1] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 - 4))+ (float)(*(float *)(v25 + v16 - 4) * v14))+ (float)(*(float *)(v26 + v16 - 4) * v21))+ (float)(*(float *)(v17 + v16 - 4) * v22))+ (float)(*(float *)(v18 + v16 - 8) * v11))+ (float)(*(float *)(v19 + v16 - 8) * v12))+ (float)(*(float *)(v20 + v16 - 8) * v29))+ (float)(*(float *)(v23 + v16 - 8) * v30));
      v31.i32[2] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v27))+ (float)(*(float *)(v25 + v27) * v14))+ (float)(*(float *)(v26 + v27) * v21))+ (float)(*(float *)(v17 + v27) * v22))+ (float)(*(float *)(v18 + v16 - 4) * v11))+ (float)(*(float *)(v19 + v16 - 4) * v12))+ (float)(*(float *)(v20 + v16 - 4) * v29))+ (float)(*(float *)(v23 + v16 - 4) * v30));
      v31.i32[3] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 + 4))+ (float)(*(float *)(v25 + v16 + 4) * v14))+ (float)(*(float *)(v26 + v16 + 4) * v21))+ (float)(*(float *)(v17 + v16 + 4) * v22))+ (float)(*(float *)(v18 + v27) * v11))+ (float)(*(float *)(v19 + v27) * v12))+ (float)(*(float *)(v20 + v27) * v29))+ (float)(*(float *)(v23 + v27) * v30));
      *v15++ = vmovn_s32(vminq_s32(vmaxq_s32(v31, (int32x4_t)0), v28));
      v10 += 4;
      v17 += 16;
      v18 += 16;
      v19 += 16;
      v20 += 16;
      v23 += 16;
      v24 += 16;
      v25 += 16;
      v26 += 16;
    }
    while (v10 <= a5 - 4);
    uint64_t result = v10;
  }
  if ((int)result < a5)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 4 * (int)result;
    uint64_t v34 = *(void *)a2 + v33;
    uint64_t v35 = *(void *)(a2 + 8) + v33;
    uint64_t v36 = *(void *)(a2 + 16) + v33;
    uint64_t v37 = *(void *)(a2 + 24) + v33;
    uint64_t v38 = *(void *)(a2 + 32) + v33;
    uint64_t v39 = *(void *)(a2 + 40) + v33;
    uint64_t v40 = *(void *)(a2 + 48) + v33;
    uint64_t v41 = *(void *)(a2 + 56) + v33;
    int v42 = &a3->i8[2 * (int)result];
    float v43 = *(float *)a4;
    float v44 = *(float *)(a4 + 4);
    float v45 = *(float *)(a4 + 8);
    float v46 = *(float *)(a4 + 12);
    float v47 = *(float *)(a4 + 16);
    float v48 = *(float *)(a4 + 20);
    uint64_t result = a5 - (uint64_t)(int)result;
    float v49 = *(float *)(a4 + 24);
    float v50 = *(float *)(a4 + 28);
    do
    {
      float v51 = rintf((float)((float)((float)((float)((float)((float)((float)(*(float *)(v35 + 4 * v32) * v44)+ (float)(*(float *)(v34 + 4 * v32) * v43))+ (float)(*(float *)(v36 + 4 * v32) * v45))+ (float)(*(float *)(v37 + 4 * v32) * v46))+ (float)(*(float *)(v38 + 4 * v32) * v47))+ (float)(*(float *)(v39 + 4 * v32) * v48))+ (float)(*(float *)(v40 + 4 * v32) * v49))+ (float)(*(float *)(v41 + 4 * v32) * v50));
      int v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
      if (v52 >= 0xFFFF) {
        LOWORD(v52) = -1;
      }
      *(_WORD *)&v42[2 * v32++] = v52;
    }
    while (result != v32);
  }
  return result;
}

uint64_t sub_10037136C(uint64_t a1, float32x4_t **a2, uint16x8_t *a3, const float *a4, int a5)
{
  float32x4_t v7 = vld1q_dup_f32(a4);
  uint64_t v6 = a4 + 1;
  uint64_t result = 0;
  int v9 = a5 - 8;
  if (a5 >= 8)
  {
    float32x4_t v10 = vld1q_dup_f32(v6);
    float v11 = a4 + 2;
    float32x4_t v12 = vld1q_dup_f32(v11);
    float v13 = a4 + 3;
    float32x4_t v14 = vld1q_dup_f32(v13);
    uint64_t v15 = a4 + 4;
    float32x4_t v16 = vld1q_dup_f32(v15);
    uint64_t v17 = a4 + 5;
    float32x4_t v18 = vld1q_dup_f32(v17);
    uint64_t v19 = a4 + 6;
    float32x4_t v20 = vld1q_dup_f32(v19);
    float v21 = a4 + 7;
    float v22 = a2[7] + 1;
    uint64_t v23 = *a2 + 1;
    uint64_t v24 = a2[6] + 1;
    float32x4_t v25 = vld1q_dup_f32(v21);
    uint64_t v26 = a2[1] + 1;
    uint64_t v27 = a2[5] + 1;
    int32x4_t v28 = a2[2] + 1;
    float v29 = a2[4] + 1;
    float v30 = a2[3] + 1;
    int32x4_t v31 = (float32x4_t *)&unk_1004D2000;
    do
    {
      float32x4_t v32 = v23[-1];
      float32x4_t v33 = *v23;
      float32x4_t v34 = v26[-1];
      float32x4_t v35 = *v26;
      float32x4_t v36 = v28[-1];
      float32x4_t v37 = *v28;
      float32x4_t v38 = v30[-1];
      float32x4_t v39 = *v30;
      float32x4_t v40 = v29[-1];
      float32x4_t v41 = *v29;
      float32x4_t v42 = v27[-1];
      float32x4_t v43 = *v27;
      float32x4_t v44 = v24[-1];
      float32x4_t v45 = *v24;
      float32x4_t v47 = v22[-1];
      float32x4_t v46 = *v22;
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int v107 = result;
        long long v99 = v22;
        int v101 = a3;
        int v103 = v9;
        long long v105 = v23;
        v109 = v24;
        v111 = v26;
        v113 = v27;
        v115 = v28;
        v117 = v29;
        v119 = v30;
        float32x4_t v95 = v10;
        float32x4_t v97 = v7;
        float32x4_t v91 = v14;
        float32x4_t v93 = v12;
        float32x4_t v87 = v18;
        float32x4_t v89 = v16;
        float32x4_t v83 = v25;
        float32x4_t v85 = v20;
        float32x4_t v79 = v34;
        float32x4_t v81 = v32;
        float32x4_t v75 = v38;
        float32x4_t v77 = v36;
        float32x4_t v71 = v42;
        float32x4_t v73 = v40;
        float32x4_t v67 = v47;
        float32x4_t v69 = v44;
        float32x4_t v63 = v35;
        float32x4_t v65 = v33;
        float32x4_t v59 = v39;
        float32x4_t v61 = v37;
        float32x4_t v55 = v43;
        float32x4_t v57 = v41;
        float32x4_t v53 = v45;
        LODWORD(result) = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v45 = v53;
        float32x4_t v43 = v55;
        float32x4_t v41 = v57;
        float32x4_t v39 = v59;
        float32x4_t v37 = v61;
        float32x4_t v35 = v63;
        float32x4_t v33 = v65;
        float32x4_t v47 = v67;
        float32x4_t v44 = v69;
        float32x4_t v42 = v71;
        float32x4_t v40 = v73;
        float32x4_t v38 = v75;
        float32x4_t v36 = v77;
        float32x4_t v34 = v79;
        float32x4_t v32 = v81;
        *(void *)&long long v49 = 0x3F0000003F000000;
        *((void *)&v49 + 1) = 0x3F0000003F000000;
        float32x4_t v25 = v83;
        float32x4_t v20 = v85;
        float32x4_t v18 = v87;
        float32x4_t v16 = v89;
        float32x4_t v14 = v91;
        float32x4_t v12 = v93;
        float32x4_t v10 = v95;
        float32x4_t v7 = v97;
        int32x4_t v31 = (float32x4_t *)&unk_1004D2000;
        float v29 = v117;
        float v30 = v119;
        uint64_t v27 = v113;
        int32x4_t v28 = v115;
        uint64_t v24 = v109;
        uint64_t v26 = v111;
        uint64_t v23 = v105;
        float v22 = v99;
        a3 = v101;
        int v9 = v103;
        int v50 = result;
        LODWORD(result) = v107;
        if (v50)
        {
          xmmword_1004D2D90 = v49;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v45 = v53;
          float32x4_t v43 = v55;
          float32x4_t v41 = v57;
          float32x4_t v39 = v59;
          float32x4_t v37 = v61;
          float32x4_t v35 = v63;
          float32x4_t v33 = v65;
          float32x4_t v47 = v67;
          float32x4_t v44 = v69;
          float32x4_t v42 = v71;
          float32x4_t v40 = v73;
          float32x4_t v38 = v75;
          float32x4_t v36 = v77;
          float32x4_t v34 = v79;
          float32x4_t v32 = v81;
          float32x4_t v25 = v83;
          float32x4_t v20 = v85;
          float32x4_t v18 = v87;
          float32x4_t v16 = v89;
          float32x4_t v14 = v91;
          float32x4_t v12 = v93;
          float32x4_t v10 = v95;
          float32x4_t v7 = v97;
          int32x4_t v31 = (float32x4_t *)&unk_1004D2000;
          float v29 = v117;
          float v30 = v119;
          uint64_t v27 = v113;
          int32x4_t v28 = v115;
          uint64_t v24 = v109;
          uint64_t v26 = v111;
          uint64_t v23 = v105;
          float v22 = v99;
          a3 = v101;
          int v9 = v103;
          LODWORD(result) = v107;
        }
      }
      float32x4_t v48 = v31[217];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int v108 = result;
        long long v100 = v22;
        int v102 = a3;
        int v104 = v9;
        v106 = v23;
        v110 = v24;
        v112 = v26;
        v114 = v27;
        v116 = v28;
        v118 = v29;
        v120 = v30;
        float32x4_t v96 = v10;
        float32x4_t v98 = v7;
        float32x4_t v92 = v14;
        float32x4_t v94 = v12;
        float32x4_t v88 = v18;
        float32x4_t v90 = v16;
        float32x4_t v84 = v25;
        float32x4_t v86 = v20;
        float32x4_t v80 = v34;
        float32x4_t v82 = v32;
        float32x4_t v76 = v38;
        float32x4_t v78 = v36;
        float32x4_t v72 = v42;
        float32x4_t v74 = v40;
        float32x4_t v68 = v47;
        float32x4_t v70 = v44;
        float32x4_t v64 = v35;
        float32x4_t v66 = v33;
        float32x4_t v60 = v39;
        float32x4_t v62 = v37;
        float32x4_t v56 = v43;
        float32x4_t v58 = v41;
        float32x4_t v54 = v45;
        LODWORD(result) = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v45 = v54;
        float32x4_t v43 = v56;
        float32x4_t v41 = v58;
        float32x4_t v39 = v60;
        float32x4_t v37 = v62;
        float32x4_t v35 = v64;
        float32x4_t v33 = v66;
        float32x4_t v47 = v68;
        float32x4_t v44 = v70;
        float32x4_t v42 = v72;
        float32x4_t v40 = v74;
        float32x4_t v38 = v76;
        float32x4_t v36 = v78;
        float32x4_t v34 = v80;
        float32x4_t v32 = v82;
        *(void *)&long long v51 = 0x3F0000003F000000;
        *((void *)&v51 + 1) = 0x3F0000003F000000;
        float32x4_t v25 = v84;
        float32x4_t v20 = v86;
        float32x4_t v18 = v88;
        float32x4_t v16 = v90;
        float32x4_t v14 = v92;
        float32x4_t v12 = v94;
        float32x4_t v10 = v96;
        float32x4_t v7 = v98;
        int32x4_t v31 = (float32x4_t *)&unk_1004D2000;
        float v29 = v118;
        float v30 = v120;
        uint64_t v27 = v114;
        int32x4_t v28 = v116;
        uint64_t v24 = v110;
        uint64_t v26 = v112;
        uint64_t v23 = v106;
        float v22 = v100;
        a3 = v102;
        int v9 = v104;
        int v52 = result;
        LODWORD(result) = v108;
        if (v52)
        {
          xmmword_1004D2D90 = v51;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v45 = v54;
          float32x4_t v43 = v56;
          float32x4_t v41 = v58;
          float32x4_t v39 = v60;
          float32x4_t v37 = v62;
          float32x4_t v35 = v64;
          float32x4_t v33 = v66;
          float32x4_t v47 = v68;
          float32x4_t v44 = v70;
          float32x4_t v42 = v72;
          float32x4_t v40 = v74;
          float32x4_t v38 = v76;
          float32x4_t v36 = v78;
          float32x4_t v34 = v80;
          float32x4_t v32 = v82;
          float32x4_t v25 = v84;
          float32x4_t v20 = v86;
          float32x4_t v18 = v88;
          float32x4_t v16 = v90;
          float32x4_t v14 = v92;
          float32x4_t v12 = v94;
          float32x4_t v10 = v96;
          float32x4_t v7 = v98;
          int32x4_t v31 = (float32x4_t *)&unk_1004D2000;
          float v29 = v118;
          float v30 = v120;
          uint64_t v27 = v114;
          int32x4_t v28 = v116;
          uint64_t v24 = v110;
          uint64_t v26 = v112;
          uint64_t v23 = v106;
          float v22 = v100;
          a3 = v102;
          int v9 = v104;
          LODWORD(result) = v108;
        }
      }
      *a3++ = vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v32), v34, v10), v36, v12), v38, v14), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v16, v40), v42, v18), v44, v20), v47, v25)), v48))), vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v33), v35, v10), v37, v12), v39, v14), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v16, v41), v43, v18), v45, v20), v46, v25)), v31[217])));
      uint64_t result = (result + 8);
      v22 += 2;
      v23 += 2;
      v24 += 2;
      v26 += 2;
      v27 += 2;
      v28 += 2;
      v29 += 2;
      v30 += 2;
    }
    while (v9 >= (int)result);
  }
  return result;
}

uint64_t sub_100371734(uint64_t a1)
{
  *(void *)a1 = off_10049B670;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100371870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B6B0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    float32x4_t v20 = *(void **)(a2 + 72);
    float v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    float32x4_t v25 = *(void **)(a3 + 72);
    uint64_t v26 = *(void **)(a1 + 176);
    *uint64_t v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100371A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100371AB4(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100371AC8(uint64_t a1)
{
  sub_100372CE4(a1);

  operator delete();
}

_DWORD *sub_100371B00(_DWORD *result, int *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8 = result;
  unsigned int v9 = result[2];
  signed int v10 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v11) = result[62];
  if ((v11 * v10) >= 0x109) {
    operator new[]();
  }
  double v12 = 0.0;
  memset(v40, 0, 128);
  memset(v39, 0, sizeof(v39));
  if ((int)v11 >= 1)
  {
    uint64_t result = memset(__b, 255, 4 * v11);
    uint64_t v13 = v10;
    if (v11 == 1)
    {
      uint64_t v14 = 0;
LABEL_9:
      float32x4_t v18 = &v35[v14 * v10];
      uint64_t v19 = &v39[v14];
      uint64_t v20 = v11 - v14;
      do
      {
        *v19++ = v18;
        float32x4_t v18 = (_DWORD *)((char *)v18 + v13 * 4);
        --v20;
      }
      while (v20);
      goto LABEL_11;
    }
    uint64_t v14 = v11 & 0xFFFFFFFE;
    uint64_t v15 = &v39[1];
    uint64_t v16 = v14;
    uint64_t v17 = v35;
    do
    {
      *(v15 - 1) = v17;
      *uint64_t v15 = &v17[v13];
      v17 += 2 * v10;
      v15 += 2;
      v16 -= 2;
    }
    while (v16);
    if (v14 != v11) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v21 = *a2;
  if ((int)v21 < a2[1])
  {
    uint64_t v22 = *((void *)v8 + 28) + 4 * (int)v21 * (int)v11;
    unsigned int v32 = ((v9 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v11 >= 1)
      {
        uint64_t v34 = v22;
        unint64_t v23 = 0;
        LODWORD(v24) = 0;
        unsigned int v25 = *(_DWORD *)(*((void *)v8 + 26) + 4 * v21) - (v11 >> 1) + 1;
        int v26 = v11;
        do
        {
          signed int v28 = v8[59];
          if ((int)(v25 + v23) >= v28) {
            int v29 = v28 - 1;
          }
          else {
            int v29 = v25 + v23;
          }
          if ((int)(v25 + v23) >= 0) {
            int v30 = v29;
          }
          else {
            int v30 = 0;
          }
          if ((int)v24 <= (int)v23) {
            unint64_t v24 = v23;
          }
          else {
            unint64_t v24 = v24;
          }
          if ((int)v24 < (int)v11)
          {
            while (v24 > 0xF || v30 != __b[v24])
            {
              if ((uint64_t)++v24 >= (int)v11) {
                goto LABEL_15;
              }
            }
            if (v24 > v23)
            {
              memcpy((void *)v39[v23], (const void *)v39[v24], 4 * v10);
              LODWORD(v11) = v8[62];
            }
          }
LABEL_15:
          if ((int)v23 >= v26) {
            int v27 = v26;
          }
          else {
            int v27 = v23;
          }
          if (v24 == v11) {
            int v26 = v27;
          }
          v40[v23] = *((void *)v8 + 3) + **((void **)v8 + 10) * v30;
          __b[v23++] = v30;
        }
        while ((uint64_t)v23 < (int)v11);
        int v31 = v8[60];
        if ((int)v11 <= v26)
        {
          uint64_t v22 = v34;
          goto LABEL_41;
        }
        sub_100371EA8(v12, a4, a5, a6, a7, a8, (uint64_t)&v37, (uint64_t)&v40[v26], (uint64_t)&v39[v26], v11 - v26, *((void *)v8 + 25), *((void *)v8 + 27), v8[58], v31, v32, v8[63], v8[64]);
        uint64_t v22 = v34;
      }
      int v31 = v8[60];
LABEL_41:
      uint64_t result = (_DWORD *)sub_100372320((uint64_t)&v36, (uint64_t)v39, (int16x8_t *)(*((void *)v8 + 15) + *((void *)v8 + 23) * v21++), v22, v31);
      uint64_t v11 = (int)v8[62];
      v22 += 4 * v11;
    }
    while (v21 < a2[1]);
  }
  return result;
}

void sub_100371E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_100371EA8(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, unsigned int a13, int a14, unsigned int a15, int a16, int a17)
{
  if (a10 >= 1)
  {
    uint64_t v21 = 0;
    int v22 = 2 * a15;
    int v23 = 4 * a15;
    int v24 = 3 * a15;
    int v25 = -3 * a15;
    if (a15 <= 1) {
      unsigned int v26 = 1;
    }
    else {
      unsigned int v26 = a15;
    }
    do
    {
      LODWORD(v27) = 0;
      uint64_t v28 = *(void *)(a8 + 8 * v21);
      uint64_t v29 = *(void *)(a9 + 8 * v21);
      int v30 = a16;
      while (1)
      {
        if ((int)v27 < v30)
        {
          uint64_t v27 = (int)v27;
          do
          {
            unsigned int v32 = *(_DWORD *)(a11 + 4 * v27);
            int v33 = v25 + v32;
            int v34 = v24 - v32;
            signed int v35 = v25 + v32;
            if (v25 + v32 >= a13)
            {
              unsigned int v36 = ((v33 & ~(v33 >> 31)) + v34 - ((v33 & ~(v33 >> 31)) + v34 != 0)) / v26;
              if ((v33 & ~(v33 >> 31)) + v34) {
                ++v36;
              }
              signed int v35 = v32 + a15 * (v36 - 2);
              do
                v35 -= a15;
              while (v35 >= (int)a13);
            }
            int v37 = v33 + a15;
            int v38 = v34 - a15;
            signed int v39 = v32 - v22;
            if (v32 - v22 >= a13)
            {
              unsigned int v40 = ((v37 & ~(v37 >> 31)) + v38 - ((v37 & ~(v37 >> 31)) + v38 != 0)) / v26;
              if ((v37 & ~(v37 >> 31)) + v38) {
                ++v40;
              }
              signed int v39 = v32 + a15 * (v40 - 1);
              do
                v39 -= a15;
              while (v39 >= (int)a13);
            }
            int v41 = v37 + a15;
            int v42 = v38 - a15;
            signed int v43 = v32 - a15;
            if (v32 - a15 >= a13)
            {
              unsigned int v44 = ((v41 & ~(v41 >> 31)) + v42 - ((v41 & ~(v41 >> 31)) + v42 != 0)) / v26;
              if ((v41 & ~(v41 >> 31)) + v42) {
                ++v44;
              }
              signed int v43 = v32 + v44 * a15;
              do
                v43 -= a15;
              while (v43 >= (int)a13);
            }
            int v45 = v41 + a15;
            int v46 = v42 - a15;
            signed int v47 = *(_DWORD *)(a11 + 4 * v27);
            if (v32 >= a13)
            {
              unsigned int v48 = ((v45 & ~(v45 >> 31)) + v46 - ((v45 & ~(v45 >> 31)) + v46 != 0)) / v26;
              if ((v45 & ~(v45 >> 31)) + v46) {
                ++v48;
              }
              signed int v47 = v32 + a15 + a15 * v48;
              do
                v47 -= a15;
              while (v47 >= (int)a13);
            }
            int v49 = v45 + a15;
            int v50 = v46 - a15;
            signed int v51 = v32 + a15;
            if (v32 + a15 >= a13)
            {
              unsigned int v52 = ((v49 & ~(v49 >> 31)) + v50 - ((v49 & ~(v49 >> 31)) + v50 != 0)) / v26;
              if ((v49 & ~(v49 >> 31)) + v50) {
                ++v52;
              }
              signed int v51 = v32 + a15 * (v52 + 2);
              do
                v51 -= a15;
              while (v51 >= (int)a13);
            }
            int v53 = v49 + a15;
            int v54 = v50 - a15;
            signed int v55 = v22 + v32;
            if (v22 + v32 >= a13)
            {
              int v56 = (v53 & ~(v53 >> 31)) + v54;
              unsigned int v57 = (v56 - (v56 != 0)) / v26;
              if (v56) {
                ++v57;
              }
              signed int v55 = v32 + a15 * (v57 + 3);
              do
                v55 -= a15;
              while (v55 >= (int)a13);
            }
            v19.i16[0] = *(_WORD *)(v28 + 2 * v35);
            v18.i16[0] = *(_WORD *)(v28 + 2 * v39);
            int v58 = v53 + a15;
            int v59 = v54 - a15;
            signed int v60 = v24 + v32;
            if (v24 + v32 >= a13)
            {
              unsigned int v61 = ((v58 & ~(v58 >> 31)) + v59 - ((v58 & ~(v58 >> 31)) + v59 != 0)) / v26;
              if ((v58 & ~(v58 >> 31)) + v59) {
                ++v61;
              }
              signed int v60 = v32 + a15 * (v61 + 4);
              do
                v60 -= a15;
              while (v60 >= (int)a13);
            }
            signed int v62 = v23 + v32;
            if (v23 + v32 >= a13)
            {
              int v64 = ((v58 + a15) & ~((int)(v58 + a15) >> 31)) + v59 - a15;
              BOOL v63 = v64 == 0;
              unsigned int v65 = (v64 - (v64 != 0)) / v26;
              if (!v63) {
                ++v65;
              }
              signed int v62 = v32 + a15 * (v65 + 5);
              do
                v62 -= a15;
              while (v62 >= (int)a13);
            }
            int16x4_t v19 = (int16x4_t)vmovl_s16(v19).u64[0];
            *(float *)v19.i32 = (float)v19.i32[0];
            int16x4_t v18 = (int16x4_t)vmovl_s16(v18).u64[0];
            *(float *)v18.i32 = (float)v18.i32[0];
            v17.i16[0] = *(_WORD *)(v28 + 2 * v43);
            int16x4_t v17 = (int16x4_t)vmovl_s16(v17).u64[0];
            *(float *)v17.i32 = (float)v17.i32[0];
            LOWORD(a6) = *(_WORD *)(v28 + 2 * v47);
            *(void *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
            *(float *)&a6 = (float)SLODWORD(a6);
            LOWORD(a4) = *(_WORD *)(v28 + 2 * v51);
            *(void *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
            LOWORD(a2) = *(_WORD *)(v28 + 2 * v55);
            *(void *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            v20.i16[0] = *(_WORD *)(v28 + 2 * v60);
            int16x4_t v31 = (int16x4_t)vmovl_s16(v20).u64[0];
            *(float *)v31.i32 = (float)v31.i32[0];
            *(float *)&a2 = (float)((float)((float)((float)((float)((float)((float)(*(float *)v19.i32 * *(float *)a12)
                                                                          + 0.0)
                                                                  + (float)(*(float *)v18.i32 * *(float *)(a12 + 4)))
                                                          + (float)(*(float *)v17.i32 * *(float *)(a12 + 8)))
                                                  + (float)(*(float *)&a6 * *(float *)(a12 + 12)))
                                          + (float)((float)SLODWORD(a4) * *(float *)(a12 + 16)))
                                  + (float)((float)SLODWORD(a2) * *(float *)(a12 + 20)))
                          + (float)(*(float *)v31.i32 * *(float *)(a12 + 24));
            v31.i16[0] = *(_WORD *)(v28 + 2 * v62);
            *(void *)&a3 = vmovl_s16(v31).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3);
            LODWORD(a4) = *(_DWORD *)(a12 + 28);
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)&a3 * *(float *)&a4);
            *(_DWORD *)(v29 + 4 * v27++) = LODWORD(a2);
            a12 += 32;
          }
          while (v27 != v30);
          LODWORD(v27) = v30;
        }
        if (v30 == a14) {
          break;
        }
        int v30 = a14;
        if ((int)v27 < a17)
        {
          uint64_t v66 = (int)v27;
          uint64_t v67 = 4 * (int)v27;
          float32x4_t v68 = (int *)(a11 + v67);
          float32x4_t v69 = (_DWORD *)(v29 + v67);
          uint64_t v70 = a17 - v66;
          do
          {
            uint64_t v71 = *v68++;
            LOWORD(a2) = *(_WORD *)(v28 + 2 * ((int)v71 - v24));
            *(void *)&a2 = vmovl_s16(*(int16x4_t *)&a2).u64[0];
            LOWORD(a3) = *(_WORD *)(v28 + 2 * ((int)v71 - v22));
            LODWORD(a4) = *(_DWORD *)a12;
            LODWORD(a5) = *(_DWORD *)(a12 + 4);
            float v72 = *(float *)&a5 * (float)vmovl_s16(*(int16x4_t *)&a3).i32[0];
            LOWORD(a5) = *(_WORD *)(v28 + 2 * (int)(v71 - a15));
            LOWORD(a4) = *(_WORD *)(v28 + 2 * v71);
            LODWORD(a6) = *(_DWORD *)(a12 + 12);
            *(float *)&a2 = (float)(v72 + (float)((float)SLODWORD(a2) * *(float *)a12))
                          + (float)((float)vmovl_s16(*(int16x4_t *)&a5).i32[0] * *(float *)(a12 + 8));
            int v73 = vmovl_s16(*(int16x4_t *)&a4).u32[0];
            LOWORD(a4) = *(_WORD *)(v28 + 2 * (int)(v71 + a15));
            *(float *)&a2 = *(float *)&a2 + (float)((float)v73 * *(float *)&a6);
            int16x4_t v74 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a4).u64[0];
            *(float *)v74.i32 = (float)v74.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v74.i32 * *(float *)(a12 + 16));
            v74.i16[0] = *(_WORD *)(v28 + 2 * ((int)v71 + v22));
            int16x4_t v75 = (int16x4_t)vmovl_s16(v74).u64[0];
            *(float *)v75.i32 = (float)v75.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v75.i32 * *(float *)(a12 + 20));
            v75.i16[0] = *(_WORD *)(v28 + 2 * ((int)v71 + v24));
            int16x4_t v76 = (int16x4_t)vmovl_s16(v75).u64[0];
            LODWORD(a4) = *(_DWORD *)(a12 + 24);
            *(float *)v76.i32 = (float)v76.i32[0];
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)v76.i32 * *(float *)&a4);
            v76.i16[0] = *(_WORD *)(v28 + 2 * ((int)v71 + v23));
            *(void *)&a3 = vmovl_s16(v76).u64[0];
            *(float *)&a3 = (float)SLODWORD(a3);
            *(float *)&a2 = *(float *)&a2 + (float)(*(float *)&a3 * *(float *)(a12 + 28));
            *v69++ = LODWORD(a2);
            a12 += 32;
            --v70;
          }
          while (v70);
          LODWORD(v27) = a17;
          int v30 = a14;
        }
      }
      a12 += -32 * a14;
      ++v21;
    }
    while (v21 != a10);
  }
}

uint64_t sub_100372320(uint64_t a1, uint64_t a2, int16x8_t *a3, uint64_t a4, int a5)
{
  uint64_t result = sub_100372604((uint64_t)&v51, (float32x4_t **)a2, a3, (const float *)a4, a5);
  if ((int)result <= a5 - 4)
  {
    uint64_t v10 = (int)result;
    float v11 = *(float *)(a4 + 16);
    float v12 = *(float *)(a4 + 20);
    float v13 = *(float *)a4;
    float v14 = *(float *)(a4 + 4);
    uint64_t v15 = (int16x4_t *)((char *)a3 + 2 * (int)result);
    uint64_t v16 = 4 * (int)result;
    uint64_t v17 = *(void *)(a2 + 24) + 8;
    uint64_t v18 = *(void *)(a2 + 32) + 12;
    uint64_t v19 = *(void *)(a2 + 40) + 12;
    uint64_t v20 = *(void *)(a2 + 48) + 12;
    float v21 = *(float *)(a4 + 8);
    float v22 = *(float *)(a4 + 12);
    uint64_t v23 = *(void *)(a2 + 56) + 12;
    uint64_t v24 = *(void *)a2 + 8;
    uint64_t v25 = *(void *)(a2 + 8) + 8;
    uint64_t v26 = *(void *)(a2 + 16) + 8;
    uint64_t v27 = 4 * v10;
    float v28 = *(float *)(a4 + 24);
    float v29 = *(float *)(a4 + 28);
    do
    {
      v30.i32[0] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 - 8))+ (float)(*(float *)(v25 + v16 - 8) * v14))+ (float)(*(float *)(v26 + v16 - 8) * v21))+ (float)(*(float *)(v17 + v16 - 8) * v22))+ (float)(*(float *)(v18 + v16 - 12) * v11))+ (float)(*(float *)(v19 + v16 - 12) * v12))+ (float)(*(float *)(v20 + v16 - 12) * v28))+ (float)(*(float *)(v23 + v16 - 12) * v29));
      v30.i32[1] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 - 4))+ (float)(*(float *)(v25 + v16 - 4) * v14))+ (float)(*(float *)(v26 + v16 - 4) * v21))+ (float)(*(float *)(v17 + v16 - 4) * v22))+ (float)(*(float *)(v18 + v16 - 8) * v11))+ (float)(*(float *)(v19 + v16 - 8) * v12))+ (float)(*(float *)(v20 + v16 - 8) * v28))+ (float)(*(float *)(v23 + v16 - 8) * v29));
      v30.i32[2] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v27))+ (float)(*(float *)(v25 + v27) * v14))+ (float)(*(float *)(v26 + v27) * v21))+ (float)(*(float *)(v17 + v27) * v22))+ (float)(*(float *)(v18 + v16 - 4) * v11))+ (float)(*(float *)(v19 + v16 - 4) * v12))+ (float)(*(float *)(v20 + v16 - 4) * v28))+ (float)(*(float *)(v23 + v16 - 4) * v29));
      v30.i32[3] = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(v13 * *(float *)(v24 + v16 + 4))+ (float)(*(float *)(v25 + v16 + 4) * v14))+ (float)(*(float *)(v26 + v16 + 4) * v21))+ (float)(*(float *)(v17 + v16 + 4) * v22))+ (float)(*(float *)(v18 + v27) * v11))+ (float)(*(float *)(v19 + v27) * v12))+ (float)(*(float *)(v20 + v27) * v28))+ (float)(*(float *)(v23 + v27) * v29));
      *v15++ = vqmovn_s32(v30);
      v10 += 4;
      v17 += 16;
      v18 += 16;
      v19 += 16;
      v20 += 16;
      v23 += 16;
      v24 += 16;
      v25 += 16;
      v26 += 16;
    }
    while (v10 <= a5 - 4);
    uint64_t result = v10;
  }
  if ((int)result < a5)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 4 * (int)result;
    uint64_t v33 = *(void *)a2 + v32;
    uint64_t v34 = *(void *)(a2 + 8) + v32;
    uint64_t v35 = *(void *)(a2 + 16) + v32;
    uint64_t v36 = *(void *)(a2 + 24) + v32;
    uint64_t v37 = *(void *)(a2 + 32) + v32;
    uint64_t v38 = *(void *)(a2 + 40) + v32;
    uint64_t v39 = *(void *)(a2 + 48) + v32;
    uint64_t v40 = *(void *)(a2 + 56) + v32;
    int v41 = &a3->i8[2 * (int)result];
    float v42 = *(float *)a4;
    float v43 = *(float *)(a4 + 4);
    float v44 = *(float *)(a4 + 8);
    float v45 = *(float *)(a4 + 12);
    float v46 = *(float *)(a4 + 16);
    float v47 = *(float *)(a4 + 20);
    uint64_t result = a5 - (uint64_t)(int)result;
    float v48 = *(float *)(a4 + 24);
    float v49 = *(float *)(a4 + 28);
    do
    {
      uint64_t v50 = (uint64_t)rintf((float)((float)((float)((float)((float)((float)((float)(*(float *)(v34 + 4 * v31) * v43)+ (float)(*(float *)(v33 + 4 * v31) * v42))+ (float)(*(float *)(v35 + 4 * v31) * v44))+ (float)(*(float *)(v36 + 4 * v31) * v45))+ (float)(*(float *)(v37 + 4 * v31) * v46))+ (float)(*(float *)(v38 + 4 * v31) * v47))+ (float)(*(float *)(v39 + 4 * v31) * v48))+ (float)(*(float *)(v40 + 4 * v31) * v49));
      if ((int)v50 <= -32768) {
        LODWORD(v50) = -32768;
      }
      if ((int)v50 >= 0x7FFF) {
        LOWORD(v50) = 0x7FFF;
      }
      *(_WORD *)&v41[2 * v31++] = v50;
    }
    while (result != v31);
  }
  return result;
}

uint64_t sub_100372604(uint64_t a1, float32x4_t **a2, int16x8_t *a3, const float *a4, int a5)
{
  uint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  unsigned int v9 = a2[4];
  uint64_t v10 = a2[5];
  float v13 = a2[6];
  float v12 = a2[7];
  float32x4_t v15 = vld1q_dup_f32(a4);
  float v14 = a4 + 1;
  uint64_t result = 0;
  int v17 = a5 - 8;
  if (a5 >= 8)
  {
    float32x4_t v18 = vld1q_dup_f32(v14);
    uint64_t v19 = a4 + 2;
    float32x4_t v20 = vld1q_dup_f32(v19);
    float v21 = a4 + 3;
    float32x4_t v22 = vld1q_dup_f32(v21);
    uint64_t v23 = a4 + 4;
    float32x4_t v24 = vld1q_dup_f32(v23);
    uint64_t v25 = a4 + 5;
    float32x4_t v26 = vld1q_dup_f32(v25);
    uint64_t v27 = a4 + 6;
    float32x4_t v28 = vld1q_dup_f32(v27);
    float v29 = a4 + 7;
    int32x4_t v30 = v12 + 1;
    uint64_t v31 = v6 + 1;
    uint64_t v32 = v13 + 1;
    uint64_t v33 = v5 + 1;
    uint64_t v34 = v10 + 1;
    uint64_t v35 = v8 + 1;
    float32x4_t v36 = vld1q_dup_f32(v29);
    uint64_t v37 = v9 + 1;
    uint64_t v38 = v7 + 1;
    uint64_t v39 = (int8x16_t *)&unk_1004D2000;
    uint64_t v40 = (int8x16_t *)&unk_1004D2000;
    do
    {
      float32x4_t v41 = v31[-1];
      float32x4_t v42 = *v31;
      float32x4_t v43 = v33[-1];
      float32x4_t v44 = *v33;
      float32x4_t v45 = v35[-1];
      float32x4_t v46 = *v35;
      float32x4_t v47 = v38[-1];
      float32x4_t v48 = *v38;
      float32x4_t v49 = v37[-1];
      float32x4_t v50 = *v37;
      float32x4_t v51 = v34[-1];
      float32x4_t v52 = *v34;
      float32x4_t v53 = v32[-1];
      float32x4_t v54 = *v32;
      float32x4_t v56 = v30[-1];
      float32x4_t v55 = *v30;
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DC0, memory_order_acquire) & 1) == 0)
      {
        int v173 = result;
        v165 = a3;
        v169 = v30;
        int v161 = v17;
        v177 = v31;
        v181 = v32;
        v185 = v33;
        v189 = v34;
        v193 = v35;
        v197 = v37;
        v201 = v38;
        float32x4_t v153 = v18;
        float32x4_t v157 = v15;
        float32x4_t v145 = v22;
        float32x4_t v149 = v20;
        float32x4_t v137 = v26;
        float32x4_t v141 = v24;
        float32x4_t v133 = v28;
        float32x4_t v125 = v41;
        float32x4_t v129 = v36;
        float32x4_t v117 = v45;
        float32x4_t v121 = v43;
        float32x4_t v109 = v49;
        float32x4_t v113 = v47;
        float32x4_t v101 = v53;
        float32x4_t v105 = v51;
        float32x4_t v93 = v42;
        float32x4_t v97 = v56;
        float32x4_t v85 = v46;
        float32x4_t v89 = v44;
        float32x4_t v77 = v50;
        float32x4_t v81 = v48;
        float32x4_t v69 = v54;
        float32x4_t v73 = v52;
        LODWORD(result) = __cxa_guard_acquire(qword_1004D2DC0);
        float32x4_t v54 = v69;
        float32x4_t v52 = v73;
        float32x4_t v50 = v77;
        float32x4_t v48 = v81;
        float32x4_t v46 = v85;
        float32x4_t v44 = v89;
        float32x4_t v42 = v93;
        float32x4_t v56 = v97;
        float32x4_t v53 = v101;
        float32x4_t v51 = v105;
        float32x4_t v49 = v109;
        float32x4_t v47 = v113;
        float32x4_t v45 = v117;
        float32x4_t v43 = v121;
        float32x4_t v41 = v125;
        float32x4_t v36 = v129;
        float32x4_t v28 = v133;
        float32x4_t v26 = v137;
        float32x4_t v24 = v141;
        float32x4_t v22 = v145;
        float32x4_t v20 = v149;
        float32x4_t v18 = v153;
        *(void *)&long long v61 = 0x8000000080000000;
        *((void *)&v61 + 1) = 0x8000000080000000;
        float32x4_t v15 = v157;
        uint64_t v40 = (int8x16_t *)&unk_1004D2000;
        uint64_t v39 = (int8x16_t *)&unk_1004D2000;
        uint64_t v37 = v197;
        uint64_t v38 = v201;
        uint64_t v34 = v189;
        uint64_t v35 = v193;
        uint64_t v32 = v181;
        uint64_t v33 = v185;
        uint64_t v31 = v177;
        a3 = v165;
        int32x4_t v30 = v169;
        int v17 = v161;
        int v62 = result;
        LODWORD(result) = v173;
        if (v62)
        {
          xmmword_1004D2DB0 = v61;
          __cxa_guard_release(qword_1004D2DC0);
          float32x4_t v54 = v69;
          float32x4_t v52 = v73;
          float32x4_t v50 = v77;
          float32x4_t v48 = v81;
          float32x4_t v46 = v85;
          float32x4_t v44 = v89;
          float32x4_t v42 = v93;
          float32x4_t v56 = v97;
          float32x4_t v53 = v101;
          float32x4_t v51 = v105;
          float32x4_t v49 = v109;
          float32x4_t v47 = v113;
          float32x4_t v45 = v117;
          float32x4_t v43 = v121;
          float32x4_t v41 = v125;
          float32x4_t v36 = v129;
          float32x4_t v28 = v133;
          float32x4_t v26 = v137;
          float32x4_t v24 = v141;
          float32x4_t v22 = v145;
          float32x4_t v20 = v149;
          float32x4_t v18 = v153;
          float32x4_t v15 = v157;
          uint64_t v40 = (int8x16_t *)&unk_1004D2000;
          uint64_t v39 = (int8x16_t *)&unk_1004D2000;
          uint64_t v37 = v197;
          uint64_t v38 = v201;
          uint64_t v34 = v189;
          uint64_t v35 = v193;
          uint64_t v32 = v181;
          uint64_t v33 = v185;
          uint64_t v31 = v177;
          a3 = v165;
          int32x4_t v30 = v169;
          int v17 = v161;
          LODWORD(result) = v173;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2DE0, memory_order_acquire) & 1) == 0)
      {
        int v174 = result;
        v166 = a3;
        v170 = v30;
        int v162 = v17;
        v178 = v31;
        v182 = v32;
        v186 = v33;
        v190 = v34;
        v194 = v35;
        v198 = v37;
        v202 = v38;
        float32x4_t v154 = v18;
        float32x4_t v158 = v15;
        float32x4_t v146 = v22;
        float32x4_t v150 = v20;
        float32x4_t v138 = v26;
        float32x4_t v142 = v24;
        float32x4_t v134 = v28;
        float32x4_t v126 = v41;
        float32x4_t v130 = v36;
        float32x4_t v118 = v45;
        float32x4_t v122 = v43;
        float32x4_t v110 = v49;
        float32x4_t v114 = v47;
        float32x4_t v102 = v53;
        float32x4_t v106 = v51;
        float32x4_t v94 = v42;
        float32x4_t v98 = v56;
        float32x4_t v86 = v46;
        float32x4_t v90 = v44;
        float32x4_t v78 = v50;
        float32x4_t v82 = v48;
        float32x4_t v70 = v54;
        float32x4_t v74 = v52;
        LODWORD(result) = __cxa_guard_acquire(&qword_1004D2DE0);
        float32x4_t v54 = v70;
        float32x4_t v52 = v74;
        float32x4_t v50 = v78;
        float32x4_t v48 = v82;
        float32x4_t v46 = v86;
        float32x4_t v44 = v90;
        float32x4_t v42 = v94;
        float32x4_t v56 = v98;
        float32x4_t v53 = v102;
        float32x4_t v51 = v106;
        float32x4_t v49 = v110;
        float32x4_t v47 = v114;
        float32x4_t v45 = v118;
        float32x4_t v43 = v122;
        float32x4_t v41 = v126;
        float32x4_t v36 = v130;
        float32x4_t v28 = v134;
        float32x4_t v26 = v138;
        float32x4_t v24 = v142;
        float32x4_t v22 = v146;
        float32x4_t v20 = v150;
        float32x4_t v18 = v154;
        *(void *)&long long v63 = 0x3F0000003F000000;
        *((void *)&v63 + 1) = 0x3F0000003F000000;
        float32x4_t v15 = v158;
        uint64_t v40 = (int8x16_t *)&unk_1004D2000;
        uint64_t v39 = (int8x16_t *)&unk_1004D2000;
        uint64_t v37 = v198;
        uint64_t v38 = v202;
        uint64_t v34 = v190;
        uint64_t v35 = v194;
        uint64_t v32 = v182;
        uint64_t v33 = v186;
        uint64_t v31 = v178;
        a3 = v166;
        int32x4_t v30 = v170;
        int v17 = v162;
        int v64 = result;
        LODWORD(result) = v174;
        if (v64)
        {
          xmmword_1004D2DD0 = v63;
          __cxa_guard_release(&qword_1004D2DE0);
          float32x4_t v54 = v70;
          float32x4_t v52 = v74;
          float32x4_t v50 = v78;
          float32x4_t v48 = v82;
          float32x4_t v46 = v86;
          float32x4_t v44 = v90;
          float32x4_t v42 = v94;
          float32x4_t v56 = v98;
          float32x4_t v53 = v102;
          float32x4_t v51 = v106;
          float32x4_t v49 = v110;
          float32x4_t v47 = v114;
          float32x4_t v45 = v118;
          float32x4_t v43 = v122;
          float32x4_t v41 = v126;
          float32x4_t v36 = v130;
          float32x4_t v28 = v134;
          float32x4_t v26 = v138;
          float32x4_t v24 = v142;
          float32x4_t v22 = v146;
          float32x4_t v20 = v150;
          float32x4_t v18 = v154;
          float32x4_t v15 = v158;
          uint64_t v40 = (int8x16_t *)&unk_1004D2000;
          uint64_t v39 = (int8x16_t *)&unk_1004D2000;
          uint64_t v37 = v198;
          uint64_t v38 = v202;
          uint64_t v34 = v190;
          uint64_t v35 = v194;
          uint64_t v32 = v182;
          uint64_t v33 = v186;
          uint64_t v31 = v178;
          a3 = v166;
          int32x4_t v30 = v170;
          int v17 = v162;
          LODWORD(result) = v174;
        }
      }
      int8x16_t v57 = v40[221];
      int8x16_t v58 = v39[219];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DC0, memory_order_acquire) & 1) == 0)
      {
        int v175 = result;
        v167 = a3;
        v171 = v30;
        int v163 = v17;
        v179 = v31;
        v183 = v32;
        v187 = v33;
        v191 = v34;
        v195 = v35;
        v199 = v37;
        v203 = v38;
        float32x4_t v155 = v18;
        float32x4_t v159 = v15;
        float32x4_t v147 = v22;
        float32x4_t v151 = v20;
        float32x4_t v139 = v26;
        float32x4_t v143 = v24;
        float32x4_t v135 = v28;
        float32x4_t v127 = v41;
        float32x4_t v131 = v36;
        float32x4_t v119 = v45;
        float32x4_t v123 = v43;
        float32x4_t v111 = v49;
        float32x4_t v115 = v47;
        float32x4_t v103 = v53;
        float32x4_t v107 = v51;
        float32x4_t v95 = v42;
        float32x4_t v99 = v56;
        float32x4_t v87 = v46;
        float32x4_t v91 = v44;
        float32x4_t v79 = v50;
        float32x4_t v83 = v48;
        float32x4_t v71 = v54;
        float32x4_t v75 = v52;
        LODWORD(result) = __cxa_guard_acquire(qword_1004D2DC0);
        float32x4_t v54 = v71;
        float32x4_t v52 = v75;
        float32x4_t v50 = v79;
        float32x4_t v48 = v83;
        float32x4_t v46 = v87;
        float32x4_t v44 = v91;
        float32x4_t v42 = v95;
        float32x4_t v56 = v99;
        float32x4_t v53 = v103;
        float32x4_t v51 = v107;
        float32x4_t v49 = v111;
        float32x4_t v47 = v115;
        float32x4_t v45 = v119;
        float32x4_t v43 = v123;
        float32x4_t v41 = v127;
        float32x4_t v36 = v131;
        float32x4_t v28 = v135;
        float32x4_t v26 = v139;
        float32x4_t v24 = v143;
        float32x4_t v22 = v147;
        float32x4_t v20 = v151;
        float32x4_t v18 = v155;
        *(void *)&long long v65 = 0x8000000080000000;
        *((void *)&v65 + 1) = 0x8000000080000000;
        float32x4_t v15 = v159;
        uint64_t v40 = (int8x16_t *)&unk_1004D2000;
        uint64_t v39 = (int8x16_t *)&unk_1004D2000;
        uint64_t v37 = v199;
        uint64_t v38 = v203;
        uint64_t v34 = v191;
        uint64_t v35 = v195;
        uint64_t v32 = v183;
        uint64_t v33 = v187;
        uint64_t v31 = v179;
        a3 = v167;
        int32x4_t v30 = v171;
        int v17 = v163;
        int v66 = result;
        LODWORD(result) = v175;
        if (v66)
        {
          xmmword_1004D2DB0 = v65;
          __cxa_guard_release(qword_1004D2DC0);
          float32x4_t v54 = v71;
          float32x4_t v52 = v75;
          float32x4_t v50 = v79;
          float32x4_t v48 = v83;
          float32x4_t v46 = v87;
          float32x4_t v44 = v91;
          float32x4_t v42 = v95;
          float32x4_t v56 = v99;
          float32x4_t v53 = v103;
          float32x4_t v51 = v107;
          float32x4_t v49 = v111;
          float32x4_t v47 = v115;
          float32x4_t v45 = v119;
          float32x4_t v43 = v123;
          float32x4_t v41 = v127;
          float32x4_t v36 = v131;
          float32x4_t v28 = v135;
          float32x4_t v26 = v139;
          float32x4_t v24 = v143;
          float32x4_t v22 = v147;
          float32x4_t v20 = v151;
          float32x4_t v18 = v155;
          float32x4_t v15 = v159;
          uint64_t v40 = (int8x16_t *)&unk_1004D2000;
          uint64_t v39 = (int8x16_t *)&unk_1004D2000;
          uint64_t v37 = v199;
          uint64_t v38 = v203;
          uint64_t v34 = v191;
          uint64_t v35 = v195;
          uint64_t v32 = v183;
          uint64_t v33 = v187;
          uint64_t v31 = v179;
          a3 = v167;
          int32x4_t v30 = v171;
          int v17 = v163;
          LODWORD(result) = v175;
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2DE0, memory_order_acquire) & 1) == 0)
      {
        int v176 = result;
        v168 = a3;
        v172 = v30;
        int v164 = v17;
        v180 = v31;
        v184 = v32;
        v188 = v33;
        v192 = v34;
        v196 = v35;
        v200 = v37;
        v204 = v38;
        float32x4_t v156 = v18;
        float32x4_t v160 = v15;
        float32x4_t v148 = v22;
        float32x4_t v152 = v20;
        float32x4_t v140 = v26;
        float32x4_t v144 = v24;
        float32x4_t v136 = v28;
        float32x4_t v128 = v41;
        float32x4_t v132 = v36;
        float32x4_t v120 = v45;
        float32x4_t v124 = v43;
        float32x4_t v112 = v49;
        float32x4_t v116 = v47;
        float32x4_t v104 = v53;
        float32x4_t v108 = v51;
        float32x4_t v96 = v42;
        float32x4_t v100 = v56;
        float32x4_t v88 = v46;
        float32x4_t v92 = v44;
        float32x4_t v80 = v50;
        float32x4_t v84 = v48;
        float32x4_t v72 = v54;
        float32x4_t v76 = v52;
        LODWORD(result) = __cxa_guard_acquire(&qword_1004D2DE0);
        float32x4_t v54 = v72;
        float32x4_t v52 = v76;
        float32x4_t v50 = v80;
        float32x4_t v48 = v84;
        float32x4_t v46 = v88;
        float32x4_t v44 = v92;
        float32x4_t v42 = v96;
        float32x4_t v56 = v100;
        float32x4_t v53 = v104;
        float32x4_t v51 = v108;
        float32x4_t v49 = v112;
        float32x4_t v47 = v116;
        float32x4_t v45 = v120;
        float32x4_t v43 = v124;
        float32x4_t v41 = v128;
        float32x4_t v36 = v132;
        float32x4_t v28 = v136;
        float32x4_t v26 = v140;
        float32x4_t v24 = v144;
        float32x4_t v22 = v148;
        float32x4_t v20 = v152;
        float32x4_t v18 = v156;
        *(void *)&long long v67 = 0x3F0000003F000000;
        *((void *)&v67 + 1) = 0x3F0000003F000000;
        float32x4_t v15 = v160;
        uint64_t v40 = (int8x16_t *)&unk_1004D2000;
        uint64_t v39 = (int8x16_t *)&unk_1004D2000;
        uint64_t v37 = v200;
        uint64_t v38 = v204;
        uint64_t v34 = v192;
        uint64_t v35 = v196;
        uint64_t v32 = v184;
        uint64_t v33 = v188;
        uint64_t v31 = v180;
        a3 = v168;
        int32x4_t v30 = v172;
        int v17 = v164;
        int v68 = result;
        LODWORD(result) = v176;
        if (v68)
        {
          xmmword_1004D2DD0 = v67;
          __cxa_guard_release(&qword_1004D2DE0);
          float32x4_t v54 = v72;
          float32x4_t v52 = v76;
          float32x4_t v50 = v80;
          float32x4_t v48 = v84;
          float32x4_t v46 = v88;
          float32x4_t v44 = v92;
          float32x4_t v42 = v96;
          float32x4_t v56 = v100;
          float32x4_t v53 = v104;
          float32x4_t v51 = v108;
          float32x4_t v49 = v112;
          float32x4_t v47 = v116;
          float32x4_t v45 = v120;
          float32x4_t v43 = v124;
          float32x4_t v41 = v128;
          float32x4_t v36 = v132;
          float32x4_t v28 = v136;
          float32x4_t v26 = v140;
          float32x4_t v24 = v144;
          float32x4_t v22 = v148;
          float32x4_t v20 = v152;
          float32x4_t v18 = v156;
          float32x4_t v15 = v160;
          uint64_t v40 = (int8x16_t *)&unk_1004D2000;
          uint64_t v39 = (int8x16_t *)&unk_1004D2000;
          uint64_t v37 = v200;
          uint64_t v38 = v204;
          uint64_t v34 = v192;
          uint64_t v35 = v196;
          uint64_t v32 = v184;
          uint64_t v33 = v188;
          uint64_t v31 = v180;
          a3 = v168;
          int32x4_t v30 = v172;
          int v17 = v164;
          LODWORD(result) = v176;
        }
      }
      int8x16_t v59 = (int8x16_t)vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v15, v41), v43, v18), v45, v20), v47, v22), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v49), v51, v26), v53, v28), v56, v36));
      int8x16_t v60 = (int8x16_t)vaddq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v15, v42), v44, v18), v46, v20), v48, v22), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v50), v52, v26), v54, v28), v55, v36));
      *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v59, (float32x4_t)vorrq_s8(vandq_s8(v58, v59), v57)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v60, (float32x4_t)vorrq_s8(vandq_s8(v39[219], v60), v40[221]))));
      uint64_t result = (result + 8);
      v30 += 2;
      v31 += 2;
      v32 += 2;
      v33 += 2;
      v34 += 2;
      v35 += 2;
      v37 += 2;
      v38 += 2;
    }
    while (v17 >= (int)result);
  }
  return result;
}

uint64_t sub_100372CE4(uint64_t a1)
{
  *(void *)a1 = off_10049B6B0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  unsigned int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100372E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B6F0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    float32x4_t v20 = *(void **)(a2 + 72);
    float v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v25 = *(void **)(a3 + 72);
    float32x4_t v26 = *(void **)(a1 + 176);
    *float32x4_t v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_100373024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100373064(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100373078(uint64_t a1)
{
  sub_100373EB8(a1);

  operator delete();
}

_DWORD *sub_1003730B0(_DWORD *result, int *a2)
{
  uint64_t v2 = result;
  unsigned int v3 = result[2];
  signed int v4 = (result[60] + 15) & 0xFFFFFFF0;
  LODWORD(v5) = result[62];
  if ((v5 * v4) >= 0x109) {
    operator new[]();
  }
  memset(v33, 0, 128);
  memset(v32, 0, sizeof(v32));
  if ((int)v5 >= 1)
  {
    uint64_t result = memset(__b, 255, 4 * v5);
    uint64_t v6 = 4 * v4;
    if (v5 == 1)
    {
      uint64_t v7 = 0;
LABEL_9:
      uint64_t v11 = (float32x4_t *)&v28[v7 * v4];
      float v12 = &v32[v7];
      uint64_t v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        uint64_t v11 = (float32x4_t *)((char *)v11 + v6);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    uint64_t v7 = v5 & 0xFFFFFFFE;
    uint64_t v8 = &v32[1];
    uint64_t v9 = v7;
    uint64_t v10 = (float32x4_t *)v28;
    do
    {
      *(v8 - 1) = v10;
      *uint64_t v8 = (float32x4_t *)((char *)v10 + v6);
      uint64_t v10 = (float32x4_t *)((char *)v10 + 8 * v4);
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v14 = *a2;
  if ((int)v14 < a2[1])
  {
    unint64_t v15 = *((void *)v2 + 28) + 4 * (int)v14 * (int)v5;
    unsigned int v25 = ((v3 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v5 >= 1)
      {
        unint64_t v27 = v15;
        unint64_t v16 = 0;
        LODWORD(v17) = 0;
        unsigned int v18 = *(_DWORD *)(*((void *)v2 + 26) + 4 * v14) - (v5 >> 1) + 1;
        int v19 = v5;
        do
        {
          signed int v21 = v2[59];
          if ((int)(v18 + v16) >= v21) {
            int v22 = v21 - 1;
          }
          else {
            int v22 = v18 + v16;
          }
          if ((int)(v18 + v16) >= 0) {
            int v23 = v22;
          }
          else {
            int v23 = 0;
          }
          if ((int)v17 <= (int)v16) {
            unint64_t v17 = v16;
          }
          else {
            unint64_t v17 = v17;
          }
          if ((int)v17 < (int)v5)
          {
            while (v17 > 0xF || v23 != __b[v17])
            {
              if ((uint64_t)++v17 >= (int)v5) {
                goto LABEL_15;
              }
            }
            if (v17 > v16)
            {
              memcpy(v32[v16], v32[v17], 4 * v4);
              LODWORD(v5) = v2[62];
            }
          }
LABEL_15:
          if ((int)v16 >= v19) {
            int v20 = v19;
          }
          else {
            int v20 = v16;
          }
          if (v17 == v5) {
            int v19 = v20;
          }
          v33[v16] = *((void *)v2 + 3) + **((void **)v2 + 10) * v23;
          __b[v16++] = v23;
        }
        while ((uint64_t)v16 < (int)v5);
        int v24 = v2[60];
        if ((int)v5 <= v19)
        {
          unint64_t v15 = v27;
          goto LABEL_41;
        }
        sub_100373458((uint64_t)&v30, (uint64_t)&v33[v19], (uint64_t)&v32[v19], v5 - v19, *((void *)v2 + 25), *((float **)v2 + 27), v2[58], v24, v25, v2[63], v2[64]);
        unint64_t v15 = v27;
      }
      int v24 = v2[60];
LABEL_41:
      uint64_t result = (_DWORD *)sub_100373850((uint64_t)&v29, v32, *((void *)v2 + 15) + *((void *)v2 + 23) * v14++, v15, v24);
      uint64_t v5 = (int)v2[62];
      v15 += 4 * v5;
    }
    while (v14 < a2[1]);
  }
  return result;
}

void sub_10037341C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_100373458(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, unsigned int a7, int a8, unsigned int a9, int a10, int a11)
{
  if (a4 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 2 * a9;
    int v13 = 4 * a9;
    int v14 = 3 * a9;
    int v15 = -3 * a9;
    if (a9 <= 1) {
      unsigned int v16 = 1;
    }
    else {
      unsigned int v16 = a9;
    }
    do
    {
      LODWORD(v17) = 0;
      uint64_t v18 = *(void *)(a2 + 8 * v11);
      uint64_t v19 = *(void *)(a3 + 8 * v11);
      int v20 = a10;
      while (1)
      {
        if ((int)v17 < v20)
        {
          uint64_t v17 = (int)v17;
          do
          {
            unsigned int v21 = *(_DWORD *)(a5 + 4 * v17);
            int v22 = v15 + v21;
            int v23 = v14 - v21;
            signed int v24 = v15 + v21;
            if (v15 + v21 >= a7)
            {
              unsigned int v25 = ((v22 & ~(v22 >> 31)) + v23 - ((v22 & ~(v22 >> 31)) + v23 != 0)) / v16;
              if ((v22 & ~(v22 >> 31)) + v23) {
                ++v25;
              }
              signed int v24 = v21 + a9 * (v25 - 2);
              do
                v24 -= a9;
              while (v24 >= (int)a7);
            }
            int v26 = v22 + a9;
            int v27 = v23 - a9;
            signed int v28 = v21 - v12;
            if (v21 - v12 >= a7)
            {
              unsigned int v29 = ((v26 & ~(v26 >> 31)) + v27 - ((v26 & ~(v26 >> 31)) + v27 != 0)) / v16;
              if ((v26 & ~(v26 >> 31)) + v27) {
                ++v29;
              }
              signed int v28 = v21 + a9 * (v29 - 1);
              do
                v28 -= a9;
              while (v28 >= (int)a7);
            }
            int v30 = v26 + a9;
            int v31 = v27 - a9;
            signed int v32 = v21 - a9;
            if (v21 - a9 >= a7)
            {
              unsigned int v33 = ((v30 & ~(v30 >> 31)) + v31 - ((v30 & ~(v30 >> 31)) + v31 != 0)) / v16;
              if ((v30 & ~(v30 >> 31)) + v31) {
                ++v33;
              }
              signed int v32 = v21 + v33 * a9;
              do
                v32 -= a9;
              while (v32 >= (int)a7);
            }
            int v34 = v30 + a9;
            int v35 = v31 - a9;
            signed int v36 = *(_DWORD *)(a5 + 4 * v17);
            if (v21 >= a7)
            {
              unsigned int v37 = ((v34 & ~(v34 >> 31)) + v35 - ((v34 & ~(v34 >> 31)) + v35 != 0)) / v16;
              if ((v34 & ~(v34 >> 31)) + v35) {
                ++v37;
              }
              signed int v36 = v21 + a9 + a9 * v37;
              do
                v36 -= a9;
              while (v36 >= (int)a7);
            }
            int v38 = v34 + a9;
            int v39 = v35 - a9;
            signed int v40 = v21 + a9;
            if (v21 + a9 >= a7)
            {
              unsigned int v41 = ((v38 & ~(v38 >> 31)) + v39 - ((v38 & ~(v38 >> 31)) + v39 != 0)) / v16;
              if ((v38 & ~(v38 >> 31)) + v39) {
                ++v41;
              }
              signed int v40 = v21 + a9 * (v41 + 2);
              do
                v40 -= a9;
              while (v40 >= (int)a7);
            }
            int v42 = v38 + a9;
            int v43 = v39 - a9;
            signed int v44 = v12 + v21;
            if (v12 + v21 >= a7)
            {
              int v45 = (v42 & ~(v42 >> 31)) + v43;
              unsigned int v46 = (v45 - (v45 != 0)) / v16;
              if (v45) {
                ++v46;
              }
              signed int v44 = v21 + a9 * (v46 + 3);
              do
                v44 -= a9;
              while (v44 >= (int)a7);
            }
            float v47 = *(float *)(v18 + 4 * v24);
            int v48 = v42 + a9;
            int v49 = v43 - a9;
            signed int v50 = v14 + v21;
            if (v14 + v21 >= a7)
            {
              unsigned int v51 = ((v48 & ~(v48 >> 31)) + v49 - ((v48 & ~(v48 >> 31)) + v49 != 0)) / v16;
              if ((v48 & ~(v48 >> 31)) + v49) {
                ++v51;
              }
              signed int v50 = v21 + a9 * (v51 + 4);
              do
                v50 -= a9;
              while (v50 >= (int)a7);
            }
            float v52 = *(float *)(v18 + 4 * v50);
            signed int v53 = v13 + v21;
            if (v13 + v21 >= a7)
            {
              int v55 = ((v48 + a9) & ~((int)(v48 + a9) >> 31)) + v49 - a9;
              BOOL v54 = v55 == 0;
              unsigned int v56 = (v55 - (v55 != 0)) / v16;
              if (!v54) {
                ++v56;
              }
              signed int v53 = v21 + a9 * (v56 + 5);
              do
                v53 -= a9;
              while (v53 >= (int)a7);
            }
            *(float *)(v19 + 4 * v17++) = (float)((float)((float)((float)((float)((float)((float)((float)(v47 * *a6)
                                                                                                + 0.0)
                                                                                        + (float)(*(float *)(v18 + 4 * v28)
                                                                                                * a6[1]))
                                                                                + (float)(*(float *)(v18 + 4 * v32)
                                                                                        * a6[2]))
                                                                        + (float)(*(float *)(v18 + 4 * v36) * a6[3]))
                                                                + (float)(*(float *)(v18 + 4 * v40) * a6[4]))
                                                        + (float)(*(float *)(v18 + 4 * v44) * a6[5]))
                                                + (float)(v52 * a6[6]))
                                        + (float)(*(float *)(v18 + 4 * v53) * a6[7]);
            a6 += 8;
          }
          while (v17 != v20);
          LODWORD(v17) = v20;
        }
        if (v20 == a8) {
          break;
        }
        int v20 = a8;
        if ((int)v17 < a11)
        {
          uint64_t v57 = (int)v17;
          uint64_t v58 = 4 * (int)v17;
          int8x16_t v59 = (int *)(a5 + v58);
          int8x16_t v60 = (float *)(v19 + v58);
          uint64_t v61 = a11 - v57;
          do
          {
            uint64_t v62 = *v59++;
            *v60++ = (float)((float)((float)((float)((float)((float)((float)(*(float *)(v18 + 4 * ((int)v62 - v12))
                                                                           * a6[1])
                                                                   + (float)(*(float *)(v18 + 4 * ((int)v62 - v14))
                                                                           * *a6))
                                                           + (float)(*(float *)(v18 + 4 * (int)(v62 - a9)) * a6[2]))
                                                   + (float)(*(float *)(v18 + 4 * v62) * a6[3]))
                                           + (float)(*(float *)(v18 + 4 * (int)(v62 + a9)) * a6[4]))
                                   + (float)(*(float *)(v18 + 4 * ((int)v62 + v12)) * a6[5]))
                           + (float)(*(float *)(v18 + 4 * ((int)v62 + v14)) * a6[6]))
                   + (float)(*(float *)(v18 + 4 * ((int)v62 + v13)) * a6[7]);
            a6 += 8;
            --v61;
          }
          while (v61);
          LODWORD(v17) = a11;
          int v20 = a8;
        }
      }
      a6 -= 8 * a8;
      ++v11;
    }
    while (v11 != a4);
  }
}

unint64_t sub_100373850(uint64_t a1, float32x4_t **a2, unint64_t a3, unint64_t a4, int a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  int v12 = a2[6];
  int v13 = a2[7];
  float32x4_t v15 = vld1q_dup_f32((const float *)a4);
  unint64_t result = a4 + 4;
  unint64_t v16 = (a5 - 4);
  if (a5 >= 4)
  {
    unint64_t v18 = 0;
    float32x4_t v19 = vld1q_dup_f32((const float *)result);
    int v20 = (const float *)(a4 + 8);
    float32x4_t v21 = vld1q_dup_f32(v20);
    int v22 = (const float *)(a4 + 12);
    float32x4_t v23 = vld1q_dup_f32(v22);
    signed int v24 = (const float *)(a4 + 16);
    float32x4_t v25 = vld1q_dup_f32(v24);
    int v26 = (const float *)(a4 + 20);
    float32x4_t v27 = vld1q_dup_f32(v26);
    signed int v28 = (const float *)(a4 + 24);
    float32x4_t v29 = vld1q_dup_f32(v28);
    int v30 = (const float *)(a4 + 28);
    float32x4_t v31 = vld1q_dup_f32(v30);
    unint64_t result = a3;
    do
    {
      float32x4_t v32 = *v5++;
      float32x4_t v33 = vmulq_f32(v15, v32);
      float32x4_t v34 = *v6++;
      float32x4_t v35 = vmlaq_f32(v33, v34, v19);
      float32x4_t v36 = *v7++;
      float32x4_t v37 = vmlaq_f32(v35, v36, v21);
      float32x4_t v38 = *v8++;
      float32x4_t v39 = vmlaq_f32(v37, v38, v23);
      float32x4_t v40 = *v9++;
      float32x4_t v41 = vmulq_f32(v25, v40);
      float32x4_t v42 = *v10++;
      float32x4_t v43 = vmlaq_f32(v41, v42, v27);
      float32x4_t v44 = *v12++;
      float32x4_t v45 = vmlaq_f32(v43, v44, v29);
      float32x4_t v46 = *v13++;
      *(float32x4_t *)unint64_t result = vaddq_f32(v39, vmlaq_f32(v45, v46, v31));
      result += 16;
      v18 += 4;
    }
    while (v18 <= v16);
    LODWORD(v17) = v18;
    if ((int)v18 > (int)v16) {
      goto LABEL_74;
    }
  }
  else
  {
    LODWORD(v17) = 0;
    if ((v16 & 0x80000000) != 0) {
      goto LABEL_74;
    }
  }
  uint64_t v17 = (int)v17;
  float v47 = a2[4];
  int v48 = a2[5];
  int v49 = a2[6];
  signed int v50 = a2[7];
  unsigned int v51 = *a2;
  float v52 = a2[1];
  unint64_t v53 = (int)v16 - (uint64_t)(int)v17;
  int v55 = a2[2];
  BOOL v54 = a2[3];
  if (v53 < 0xC) {
    goto LABEL_72;
  }
  unint64_t v56 = v53 >> 2;
  unint64_t result = 4 * (int)v17;
  unint64_t v57 = a3 + result;
  uint64_t v58 = result + 16 * v56 + 16;
  unint64_t v59 = a3 + v58;
  BOOL v60 = a3 + result >= (unint64_t)v51 + v58 || (unint64_t)v51->u64 + 4 * (int)v17 >= v59;
  BOOL v61 = !v60;
  BOOL v62 = v57 >= (unint64_t)v52 + v58 || (unint64_t)v52->u64 + 4 * (int)v17 >= v59;
  BOOL v63 = !v62;
  BOOL v64 = v57 >= (unint64_t)v55 + v58 || (unint64_t)v55->u64 + 4 * (int)v17 >= v59;
  BOOL v65 = !v64;
  BOOL v66 = v57 >= (unint64_t)v54 + v58 || (unint64_t)v54->u64 + 4 * (int)v17 >= v59;
  BOOL v67 = !v66;
  BOOL v68 = v57 >= (unint64_t)v47 + v58 || (unint64_t)v47 + result >= v59;
  BOOL v69 = !v68;
  BOOL v70 = v57 >= (unint64_t)v48 + v58 || (unint64_t)v48 + result >= v59;
  BOOL v71 = !v70;
  unint64_t v72 = (unint64_t)v50 + v58;
  BOOL v73 = v57 >= (unint64_t)v49 + v58 || (unint64_t)v49 + result >= v59;
  BOOL v74 = !v73;
  BOOL v75 = v57 >= v72 || (unint64_t)v50 + result >= v59;
  BOOL v76 = !v75;
  if (v59 > a4 && v57 < a4 + 32) {
    goto LABEL_72;
  }
  if (v61) {
    goto LABEL_72;
  }
  if (v63) {
    goto LABEL_72;
  }
  if (v65) {
    goto LABEL_72;
  }
  if (v67) {
    goto LABEL_72;
  }
  if (v69) {
    goto LABEL_72;
  }
  if (v71) {
    goto LABEL_72;
  }
  if (v74) {
    goto LABEL_72;
  }
  if (v76) {
    goto LABEL_72;
  }
  unint64_t v78 = v56 + 1;
  uint64_t v79 = v78 & 0x7FFFFFFFFFFFFFFCLL;
  float32x4_t v80 = a2[7];
  float32x4_t v81 = a2[6];
  float32x4_t v82 = a2[5];
  float32x4_t v83 = a2[4];
  float32x4_t v84 = a2[3];
  float32x4_t v85 = a2[2];
  float32x4_t v86 = a2[1];
  float32x4_t v87 = *a2;
  unint64_t v88 = a3;
  uint64_t v17 = (int)v17 + 4 * (v78 & 0x7FFFFFFFFFFFFFFCLL);
  do
  {
    float32x4_t v89 = (const float *)a4;
    float32x4_t v90 = (const float *)((char *)v87->f32 + result);
    float32x4_t v91 = vld1q_dup_f32(v89++);
    float32x4x4_t v194 = vld4q_f32(v90);
    float32x4_t v92 = (const float *)((char *)v86->f32 + result);
    float32x4x4_t v197 = vld4q_f32(v92);
    float32x4_t v93 = (const float *)((char *)v85->f32 + result);
    float32x4x4_t v200 = vld4q_f32(v93);
    float32x4_t v94 = vmulq_f32(v91, v194.val[0]);
    float32x4_t v95 = vmulq_f32(v91, v194.val[1]);
    float32x4_t v96 = vmulq_f32(v91, v194.val[2]);
    float32x4_t v97 = vmulq_f32(v91, v194.val[3]);
    v91.f32[0] = *v89;
    float32x4_t v98 = vmlaq_n_f32(v94, v197.val[0], *v89);
    float32x4_t v99 = (const float *)((char *)v84->f32 + result);
    float32x4x4_t v195 = vld4q_f32(v99);
    float32x4_t v100 = vmlaq_n_f32(v95, v197.val[1], v91.f32[0]);
    float32x4_t v101 = vmlaq_n_f32(v96, v197.val[2], v91.f32[0]);
    float32x4_t v102 = vmlaq_n_f32(v97, v197.val[3], v91.f32[0]);
    float32x4_t v103 = (const float *)((char *)v83->f32 + result);
    v91.i32[0] = *(_DWORD *)(a4 + 8);
    float v104 = *(float *)(a4 + 12);
    float32x4x4_t v198 = vld4q_f32(v103);
    float32x4_t v105 = vmlaq_n_f32(v100, v200.val[1], v91.f32[0]);
    float32x4_t v106 = vmlaq_n_f32(v101, v200.val[2], v91.f32[0]);
    float32x4_t v107 = vmlaq_n_f32(v102, v200.val[3], v91.f32[0]);
    float32x4_t v108 = vmlaq_n_f32(vmlaq_n_f32(v98, v200.val[0], v91.f32[0]), v195.val[0], v104);
    float32x4_t v109 = (const float *)((char *)v82->f32 + result);
    float32x4x4_t v201 = vld4q_f32(v109);
    float32x4_t v110 = vmlaq_n_f32(v105, v195.val[1], v104);
    float32x4_t v111 = vmlaq_n_f32(v106, v195.val[2], v104);
    float32x4_t v112 = vmlaq_n_f32(v107, v195.val[3], v104);
    float32x4_t v113 = (const float *)((char *)v81->f32 + result);
    v91.i32[0] = *(_DWORD *)(a4 + 16);
    float v114 = *(float *)(a4 + 20);
    float32x4x4_t v196 = vld4q_f32(v113);
    float32x4_t v115 = vmlaq_n_f32(v110, v198.val[1], v91.f32[0]);
    float32x4_t v116 = vmlaq_n_f32(v111, v198.val[2], v91.f32[0]);
    float32x4_t v117 = vmlaq_n_f32(v112, v198.val[3], v91.f32[0]);
    float32x4_t v118 = vmlaq_n_f32(vmlaq_n_f32(v108, v198.val[0], v91.f32[0]), v201.val[0], v114);
    float32x4_t v119 = (const float *)((char *)v80->f32 + result);
    float32x4x4_t v199 = vld4q_f32(v119);
    float32x4_t v120 = vmlaq_n_f32(v115, v201.val[1], v114);
    float32x4_t v121 = vmlaq_n_f32(v116, v201.val[2], v114);
    float32x4_t v122 = vmlaq_n_f32(v117, v201.val[3], v114);
    v91.i32[0] = *(_DWORD *)(a4 + 24);
    float v123 = *(float *)(a4 + 28);
    v193.val[0] = vmlaq_n_f32(vmlaq_n_f32(v118, v196.val[0], v91.f32[0]), v199.val[0], v123);
    v193.val[1] = vmlaq_n_f32(vmlaq_n_f32(v120, v196.val[1], v91.f32[0]), v199.val[1], v123);
    v193.val[2] = vmlaq_n_f32(vmlaq_n_f32(v121, v196.val[2], v91.f32[0]), v199.val[2], v123);
    float32x4_t v124 = (float *)(v88 + result);
    v88 += 64;
    v87 += 4;
    v86 += 4;
    v85 += 4;
    v193.val[3] = vmlaq_n_f32(vmlaq_n_f32(v122, v196.val[3], v91.f32[0]), v199.val[3], v123);
    vst4q_f32(v124, v193);
    v84 += 4;
    v83 += 4;
    v82 += 4;
    v81 += 4;
    v80 += 4;
    v79 -= 4;
  }
  while (v79);
  if (v78 != (v78 & 0x7FFFFFFFFFFFFFFCLL))
  {
LABEL_72:
    unint64_t result = 4 * v17;
    unint64_t v125 = a3;
    do
    {
      *(float32x4_t *)(v125 + result) = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)((char *)v51 + result), *(float *)a4), *(float32x4_t *)((char *)v52 + result), *(float *)(a4 + 4)), *(float32x4_t *)((char *)v55 + result), *(float *)(a4 + 8)), *(float32x4_t *)((char *)v54 + result), *(float *)(a4 + 12)), *(float32x4_t *)((char *)v47 + result), *(float *)(a4 + 16)), *(float32x4_t *)((char *)v48 + result), *(float *)(a4 + 20)), *(float32x4_t *)((char *)v49 + result), *(float *)(a4 + 24)),
                                          *(float32x4_t *)((char *)v50 + result),
                                          *(float *)(a4 + 28));
      v17 += 4;
      ++v51;
      ++v52;
      v125 += 16;
      ++v55;
      ++v54;
      ++v47;
      ++v48;
      ++v49;
      ++v50;
    }
    while (v17 <= (int)v16);
  }
LABEL_74:
  if ((int)v17 < a5)
  {
    float32x4_t v127 = *a2;
    float32x4_t v126 = a2[1];
    float32x4_t v129 = a2[2];
    float32x4_t v128 = a2[3];
    float32x4_t v131 = a2[4];
    float32x4_t v130 = a2[5];
    float32x4_t v133 = a2[6];
    float32x4_t v132 = a2[7];
    uint64_t v17 = (int)v17;
    uint64_t v134 = a5;
    unint64_t result = a5 - (uint64_t)(int)v17;
    if (result < 0xC) {
      goto LABEL_140;
    }
    uint64_t v135 = 4 * (int)v17;
    unint64_t v136 = a3 + v135;
    uint64_t v137 = 4 * a5;
    unint64_t v138 = a3 + v137;
    BOOL v139 = a3 + v135 < a4 + 32 && v138 > a4;
    BOOL v140 = v139;
    BOOL v141 = v136 >= (unint64_t)v126 + v137 || (unint64_t)v126->u64 + 4 * (int)v17 >= v138;
    BOOL v142 = !v141;
    BOOL v143 = v136 >= (unint64_t)v129 + v137 || (unint64_t)v129->u64 + 4 * (int)v17 >= v138;
    BOOL v144 = !v143;
    BOOL v145 = v136 >= (unint64_t)v128 + v137 || (unint64_t)v128->u64 + 4 * (int)v17 >= v138;
    BOOL v146 = !v145;
    BOOL v147 = v136 >= (unint64_t)v131 + v137 || (unint64_t)v131->u64 + 4 * (int)v17 >= v138;
    BOOL v148 = !v147;
    BOOL v149 = v136 >= (unint64_t)v130 + v137 || (unint64_t)v130 + v135 >= v138;
    BOOL v150 = !v149;
    BOOL v151 = v136 >= (unint64_t)v133 + v137 || (unint64_t)v133 + v135 >= v138;
    BOOL v152 = !v151;
    BOOL v153 = v136 >= (unint64_t)v132 + v137 || (unint64_t)v132 + v135 >= v138;
    BOOL v154 = !v153;
    float32x4_t v155 = (char *)v127 + v137;
    if ((unint64_t)v127->u64 + 4 * (int)v17 < v138 && v136 < (unint64_t)v155) {
      goto LABEL_140;
    }
    if (v140) {
      goto LABEL_140;
    }
    if (v142) {
      goto LABEL_140;
    }
    if (v144) {
      goto LABEL_140;
    }
    if (v146) {
      goto LABEL_140;
    }
    if (v148) {
      goto LABEL_140;
    }
    if (v150) {
      goto LABEL_140;
    }
    if (v152) {
      goto LABEL_140;
    }
    if (v154) {
      goto LABEL_140;
    }
    uint64_t v17 = (result & 0xFFFFFFFFFFFFFFFCLL) + (int)v17;
    float32x4_t v157 = (const float *)a4;
    float32x4_t v158 = vld1q_dup_f32(v157++);
    float32x4_t v159 = vld1q_dup_f32(v157);
    float32x4_t v160 = (const float *)(a4 + 8);
    float32x4_t v161 = vld1q_dup_f32(v160);
    int v162 = (const float *)(a4 + 12);
    float32x4_t v163 = vld1q_dup_f32(v162);
    int v164 = (const float *)(a4 + 16);
    float32x4_t v165 = vld1q_dup_f32(v164);
    v166 = (const float *)(a4 + 20);
    float32x4_t v167 = vld1q_dup_f32(v166);
    v168 = (const float *)(a4 + 24);
    float32x4_t v169 = vld1q_dup_f32(v168);
    v170 = (const float *)(a4 + 28);
    unint64_t v171 = a3;
    v172 = v132;
    int v173 = v133;
    int v174 = v130;
    int v175 = v131;
    int v176 = v128;
    float32x4_t v177 = vld1q_dup_f32(v170);
    v178 = v129;
    v179 = v126;
    v180 = v127;
    unint64_t v181 = result & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float32x4_t v182 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)((char *)v179++ + v135), v159), v158, *(float32x4_t *)((char *)v180++ + v135)), v161, *(float32x4_t *)((char *)v178++ + v135)), v163, *(float32x4_t *)((char *)v176++ + v135)), v165, *(float32x4_t *)((char *)v175 + v135)), v167, *(float32x4_t *)((char *)v174 + v135)), v169, *(float32x4_t *)((char *)v173 + v135));
      *(float32x4_t *)(v171 + v135) = vmlaq_f32(v182, v177, *(float32x4_t *)((char *)v172 + v135));
      ++v175;
      ++v174;
      ++v173;
      ++v172;
      v171 += 16;
      v181 -= 4;
    }
    while (v181);
    if (result != (result & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_140:
      unint64_t result = 0;
      v183 = &v127->i8[4 * v17];
      uint64_t v184 = (uint64_t)v126->i64 + 4 * v17;
      uint64_t v185 = (uint64_t)v129->i64 + 4 * v17;
      uint64_t v186 = (uint64_t)v128->i64 + 4 * v17;
      uint64_t v187 = (uint64_t)v131->i64 + 4 * v17;
      uint64_t v188 = (uint64_t)v130->i64 + 4 * v17;
      uint64_t v189 = (uint64_t)v133->i64 + 4 * v17;
      uint64_t v190 = (uint64_t)v132->i64 + 4 * v17;
      unint64_t v191 = a3 + 4 * v17;
      uint64_t v192 = v134 - v17;
      do
      {
        *(float *)(v191 + 4 * result) = (float)((float)((float)((float)((float)((float)((float)(*(float *)(v184 + 4 * result)
                                                                                              * *(float *)(a4 + 4))
                                                                                      + (float)(*(float *)&v183[4 * result]
                                                                                              * *(float *)a4))
                                                                              + (float)(*(float *)(v185 + 4 * result)
                                                                                      * *(float *)(a4 + 8)))
                                                                      + (float)(*(float *)(v186 + 4 * result)
                                                                              * *(float *)(a4 + 12)))
                                                              + (float)(*(float *)(v187 + 4 * result)
                                                                      * *(float *)(a4 + 16)))
                                                      + (float)(*(float *)(v188 + 4 * result) * *(float *)(a4 + 20)))
                                              + (float)(*(float *)(v189 + 4 * result) * *(float *)(a4 + 24)))
                                      + (float)(*(float *)(v190 + 4 * result) * *(float *)(a4 + 28));
        ++result;
      }
      while (v192 != result);
    }
  }
  return result;
}

uint64_t sub_100373EB8(uint64_t a1)
{
  *(void *)a1 = off_10049B6F0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100373FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, int a10, int a11, int a12)
{
  *(void *)a1 = off_10049B730;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v19) {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v20 = *(void **)(a2 + 72);
    float32x4_t v21 = *(void **)(a1 + 80);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  long long v22 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 48);
  uint64_t v23 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v24;
  *(void *)(a1 + 160) = v23;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v22;
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    float32x4_t v25 = *(void **)(a3 + 72);
    int v26 = *(void **)(a1 + 176);
    *int v26 = *v25;
    v26[1] = v25[1];
  }
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(void *)(a1 + 224) = a7;
  *(void *)(a1 + 232) = *a8;
  *(void *)(a1 + 240) = *a9;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_DWORD *)(a1 + 256) = a12;
  if (a10 >= 17)
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v27 = sub_1002D19D8(v29, 18);
    *(_WORD *)(v27 + 16) = 17754;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"ksize <= MAX_ESIZE";
    sub_1002D2278(-215, v29, "resizeGeneric_Invoker", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2211);
  }
  return a1;
}

void sub_1003741F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  nullsub_1(v9);
  _Unwind_Resume(a1);
}

void sub_100374238(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10037424C(uint64_t a1)
{
  sub_100375014(a1);

  operator delete();
}

void sub_100374284(uint64_t a1, int *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  signed int v4 = (*(_DWORD *)(a1 + 240) + 15) & 0xFFFFFFF0;
  LODWORD(v5) = *(_DWORD *)(a1 + 248);
  if ((v5 * v4) >= 0x89) {
    operator new[]();
  }
  memset(v33, 0, 128);
  memset(v32, 0, sizeof(v32));
  if ((int)v5 >= 1)
  {
    memset(__b, 255, 4 * v5);
    uint64_t v6 = v4;
    if (v5 == 1)
    {
      uint64_t v7 = 0;
LABEL_9:
      uint64_t v11 = (const double *)&v28[v7 * v4];
      int v12 = &v32[v7];
      uint64_t v13 = v5 - v7;
      do
      {
        *v12++ = v11;
        uint64_t v11 = (const double *)((char *)v11 + v6 * 8);
        --v13;
      }
      while (v13);
      goto LABEL_11;
    }
    uint64_t v7 = v5 & 0xFFFFFFFE;
    uint64_t v8 = &v32[1];
    uint64_t v9 = v7;
    uint64_t v10 = (const double *)v28;
    do
    {
      *(v8 - 1) = v10;
      *uint64_t v8 = &v10[v6];
      v10 += 2 * v4;
      v8 += 2;
      v9 -= 2;
    }
    while (v9);
    if (v7 != v5) {
      goto LABEL_9;
    }
  }
LABEL_11:
  uint64_t v14 = *a2;
  if ((int)v14 < a2[1])
  {
    float32x4_t v15 = (float *)(*(void *)(a1 + 224) + 4 * (int)v14 * (int)v5);
    unsigned int v25 = ((v3 >> 3) & 0x1FF) + 1;
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t v27 = v15;
        unint64_t v16 = 0;
        LODWORD(v17) = 0;
        unsigned int v18 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v14) - (v5 >> 1) + 1;
        int v19 = v5;
        do
        {
          signed int v21 = *(_DWORD *)(a1 + 236);
          if ((int)(v18 + v16) >= v21) {
            int v22 = v21 - 1;
          }
          else {
            int v22 = v18 + v16;
          }
          if ((int)(v18 + v16) >= 0) {
            int v23 = v22;
          }
          else {
            int v23 = 0;
          }
          if ((int)v17 <= (int)v16) {
            unint64_t v17 = v16;
          }
          else {
            unint64_t v17 = v17;
          }
          if ((int)v17 < (int)v5)
          {
            while (v17 > 0xF || v23 != __b[v17])
            {
              if ((uint64_t)++v17 >= (int)v5) {
                goto LABEL_15;
              }
            }
            if (v17 > v16)
            {
              memcpy((void *)v32[v16], v32[v17], 8 * v4);
              LODWORD(v5) = *(_DWORD *)(a1 + 248);
            }
          }
LABEL_15:
          if ((int)v16 >= v19) {
            int v20 = v19;
          }
          else {
            int v20 = v16;
          }
          if (v17 == v5) {
            int v19 = v20;
          }
          v33[v16] = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v23;
          __b[v16++] = v23;
        }
        while ((uint64_t)v16 < (int)v5);
        int v24 = *(_DWORD *)(a1 + 240);
        if ((int)v5 <= v19)
        {
          float32x4_t v15 = v27;
          goto LABEL_41;
        }
        sub_10037462C((uint64_t)&v30, (uint64_t)&v33[v19], (uint64_t)&v32[v19], v5 - v19, *(void *)(a1 + 200), *(float **)(a1 + 216), *(_DWORD *)(a1 + 232), v24, v25, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 256));
        float32x4_t v15 = v27;
      }
      int v24 = *(_DWORD *)(a1 + 240);
LABEL_41:
      sub_100374A5C((uint64_t)&v29, v32, (double *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v14++), v15, v24);
      uint64_t v5 = *(int *)(a1 + 248);
      v15 += v5;
    }
    while (v14 < a2[1]);
  }
}

void sub_1003745F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16 != a11 && a16 != 0) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

void sub_10037462C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, unsigned int a7, int a8, unsigned int a9, int a10, int a11)
{
  if (a4 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 2 * a9;
    int v13 = 4 * a9;
    int v14 = 3 * a9;
    int v15 = -3 * a9;
    if (a9 <= 1) {
      unsigned int v16 = 1;
    }
    else {
      unsigned int v16 = a9;
    }
    do
    {
      int v17 = 0;
      uint64_t v18 = *(void *)(a2 + 8 * v11);
      uint64_t v19 = *(void *)(a3 + 8 * v11);
      int v20 = a10;
      while (1)
      {
        if (v17 < v20)
        {
          uint64_t v21 = v17;
          do
          {
            unsigned int v22 = *(_DWORD *)(a5 + 4 * v21);
            int v23 = v15 + v22;
            int v24 = v14 - v22;
            signed int v25 = v15 + v22;
            if (v15 + v22 >= a7)
            {
              unsigned int v26 = ((v23 & ~(v23 >> 31)) + v24 - ((v23 & ~(v23 >> 31)) + v24 != 0)) / v16;
              if ((v23 & ~(v23 >> 31)) + v24) {
                ++v26;
              }
              signed int v25 = v22 + a9 * (v26 - 2);
              do
                v25 -= a9;
              while (v25 >= (int)a7);
            }
            int v27 = v23 + a9;
            int v28 = v24 - a9;
            signed int v29 = v22 - v12;
            if (v22 - v12 >= a7)
            {
              unsigned int v30 = ((v27 & ~(v27 >> 31)) + v28 - ((v27 & ~(v27 >> 31)) + v28 != 0)) / v16;
              if ((v27 & ~(v27 >> 31)) + v28) {
                ++v30;
              }
              signed int v29 = v22 + a9 * (v30 - 1);
              do
                v29 -= a9;
              while (v29 >= (int)a7);
            }
            int v31 = v27 + a9;
            int v32 = v28 - a9;
            signed int v33 = v22 - a9;
            if (v22 - a9 >= a7)
            {
              unsigned int v34 = ((v31 & ~(v31 >> 31)) + v32 - ((v31 & ~(v31 >> 31)) + v32 != 0)) / v16;
              if ((v31 & ~(v31 >> 31)) + v32) {
                ++v34;
              }
              signed int v33 = v22 + v34 * a9;
              do
                v33 -= a9;
              while (v33 >= (int)a7);
            }
            int v35 = v31 + a9;
            int v36 = v32 - a9;
            signed int v37 = *(_DWORD *)(a5 + 4 * v21);
            if (v22 >= a7)
            {
              unsigned int v38 = ((v35 & ~(v35 >> 31)) + v36 - ((v35 & ~(v35 >> 31)) + v36 != 0)) / v16;
              if ((v35 & ~(v35 >> 31)) + v36) {
                ++v38;
              }
              signed int v37 = v22 + a9 + a9 * v38;
              do
                v37 -= a9;
              while (v37 >= (int)a7);
            }
            int v39 = v35 + a9;
            int v40 = v36 - a9;
            signed int v41 = v22 + a9;
            if (v22 + a9 >= a7)
            {
              unsigned int v42 = ((v39 & ~(v39 >> 31)) + v40 - ((v39 & ~(v39 >> 31)) + v40 != 0)) / v16;
              if ((v39 & ~(v39 >> 31)) + v40) {
                ++v42;
              }
              signed int v41 = v22 + a9 * (v42 + 2);
              do
                v41 -= a9;
              while (v41 >= (int)a7);
            }
            int v43 = v39 + a9;
            int v44 = v40 - a9;
            signed int v45 = v12 + v22;
            if (v12 + v22 >= a7)
            {
              int v46 = (v43 & ~(v43 >> 31)) + v44;
              unsigned int v47 = (v46 - (v46 != 0)) / v16;
              if (v46) {
                ++v47;
              }
              signed int v45 = v22 + a9 * (v47 + 3);
              do
                v45 -= a9;
              while (v45 >= (int)a7);
            }
            double v48 = *(double *)(v18 + 8 * v25);
            int v49 = v43 + a9;
            int v50 = v44 - a9;
            signed int v51 = v14 + v22;
            if (v14 + v22 >= a7)
            {
              unsigned int v52 = ((v49 & ~(v49 >> 31)) + v50 - ((v49 & ~(v49 >> 31)) + v50 != 0)) / v16;
              if ((v49 & ~(v49 >> 31)) + v50) {
                ++v52;
              }
              signed int v51 = v22 + a9 * (v52 + 4);
              do
                v51 -= a9;
              while (v51 >= (int)a7);
            }
            double v53 = *(double *)(v18 + 8 * v51);
            signed int v54 = v13 + v22;
            if (v13 + v22 >= a7)
            {
              int v56 = ((v49 + a9) & ~((int)(v49 + a9) >> 31)) + v50 - a9;
              BOOL v55 = v56 == 0;
              unsigned int v57 = (v56 - (v56 != 0)) / v16;
              if (!v55) {
                ++v57;
              }
              signed int v54 = v22 + a9 * (v57 + 5);
              do
                v54 -= a9;
              while (v54 >= (int)a7);
            }
            *(double *)(v19 + 8 * v21++) = v48 * *a6
                                         + 0.0
                                         + *(double *)(v18 + 8 * v29) * a6[1]
                                         + *(double *)(v18 + 8 * v33) * a6[2]
                                         + *(double *)(v18 + 8 * v37) * a6[3]
                                         + *(double *)(v18 + 8 * v41) * a6[4]
                                         + *(double *)(v18 + 8 * v45) * a6[5]
                                         + v53 * a6[6]
                                         + *(double *)(v18 + 8 * v54) * a6[7];
            a6 += 8;
          }
          while (v21 != v20);
          int v17 = v20;
        }
        if (v20 == a8) {
          break;
        }
        int v20 = a8;
        if (v17 < a11)
        {
          uint64_t v58 = (int *)(a5 + 4 * v17);
          unint64_t v59 = (double *)(v19 + 8 * v17);
          uint64_t v60 = a11 - (uint64_t)v17;
          do
          {
            uint64_t v61 = *v58++;
            *v59++ = *(double *)(v18 + 8 * ((int)v61 - v12)) * a6[1]
                   + *(double *)(v18 + 8 * ((int)v61 - v14)) * *a6
                   + *(double *)(v18 + 8 * (int)(v61 - a9)) * a6[2]
                   + *(double *)(v18 + 8 * v61) * a6[3]
                   + *(double *)(v18 + 8 * (int)(v61 + a9)) * a6[4]
                   + *(double *)(v18 + 8 * ((int)v61 + v12)) * a6[5]
                   + *(double *)(v18 + 8 * ((int)v61 + v14)) * a6[6]
                   + *(double *)(v18 + 8 * ((int)v61 + v13)) * a6[7];
            a6 += 8;
            --v60;
          }
          while (v60);
          int v17 = a11;
          int v20 = a8;
        }
      }
      a6 -= 8 * a8;
      ++v11;
    }
    while (v11 != a4);
  }
}

void sub_100374A5C(uint64_t a1, const double **a2, double *a3, float *a4, int a5)
{
  unint64_t v5 = (a5 - 4);
  if (a5 >= 4)
  {
    double v7 = *a4;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    *(double *)&uint64_t v10 = a4[1];
    uint64_t v11 = *a2;
    int v12 = a2[1];
    *(double *)&uint64_t v13 = a4[2];
    int v15 = a2[2];
    int v14 = a2[3];
    *(double *)&uint64_t v16 = a4[3];
    *(double *)&uint64_t v17 = a4[4];
    *(double *)&uint64_t v18 = a4[5];
    *(double *)&uint64_t v19 = a4[6];
    *(double *)&uint64_t v20 = a4[7];
    uint64_t v21 = a2[6];
    unsigned int v22 = a2[7];
    if (v5 >= 0xC)
    {
      unint64_t v6 = 0;
      uint64_t v91 = ((8 * v5) & 0x7FFFFFFE0) + 32;
      float32x4_t v92 = (double *)((char *)a3 + v91);
      BOOL v94 = (const double *)((char *)v12 + v91) > a3 && v12 < v92;
      BOOL v96 = (const double *)((char *)v15 + v91) > a3 && v15 < v92;
      BOOL v98 = (const double *)((char *)v14 + v91) > a3 && v14 < v92;
      BOOL v100 = (const double *)((char *)v8 + v91) > a3 && v8 < v92;
      BOOL v102 = (const double *)((char *)v9 + v91) > a3 && v9 < v92;
      BOOL v104 = (const double *)((char *)v21 + v91) > a3 && v21 < v92;
      BOOL v106 = (const double *)((char *)v22 + v91) > a3 && v22 < v92;
      float32x4_t v107 = (char *)v11 + v91;
      if ((v11 >= v92 || v107 <= (char *)a3) && !v94 && !v96 && !v98 && !v100 && !v102 && !v104 && !v106)
      {
        uint64_t v109 = (v5 >> 2) + 1;
        unint64_t v6 = 4 * (v109 & 0x7FFFFFFE);
        float64x2_t v110 = (float64x2_t)vdupq_lane_s64(v10, 0);
        float64x2_t v111 = (float64x2_t)vdupq_lane_s64(v13, 0);
        float64x2_t v112 = (float64x2_t)vdupq_lane_s64(v16, 0);
        float64x2_t v113 = (float64x2_t)vdupq_lane_s64(v17, 0);
        float64x2_t v114 = (float64x2_t)vdupq_lane_s64(v18, 0);
        float64x2_t v115 = (float64x2_t)vdupq_lane_s64(v19, 0);
        uint64_t v116 = v109 & 0x7FFFFFFE;
        float32x4_t v117 = a2[7];
        float32x4_t v118 = a2[6];
        float32x4_t v119 = a2[5];
        float32x4_t v120 = a2[4];
        float32x4_t v121 = a2[3];
        float64x2_t v122 = (float64x2_t)vdupq_lane_s64(v20, 0);
        float v123 = a2[2];
        float32x4_t v124 = a2[1];
        unint64_t v125 = a3;
        float32x4_t v126 = *a2;
        do
        {
          float64x2x4_t v153 = vld4q_f64(v126);
          v126 += 8;
          float64x2_t v127 = vmulq_n_f64(v153.val[0], v7);
          float64x2_t v128 = vmulq_n_f64(v153.val[1], v7);
          float64x2_t v129 = vmulq_n_f64(v153.val[2], v7);
          float64x2_t v130 = vmulq_n_f64(v153.val[3], v7);
          float64x2x4_t v154 = vld4q_f64(v124);
          v124 += 8;
          float64x2_t v131 = vmlaq_f64(v127, v110, v154.val[0]);
          float64x2_t v132 = vmlaq_f64(v128, v110, v154.val[1]);
          float64x2_t v133 = vmlaq_f64(v129, v110, v154.val[2]);
          float64x2_t v134 = vmlaq_f64(v130, v110, v154.val[3]);
          float64x2x4_t v155 = vld4q_f64(v123);
          v123 += 8;
          float64x2_t v135 = vmlaq_f64(v131, v111, v155.val[0]);
          float64x2_t v136 = vmlaq_f64(v132, v111, v155.val[1]);
          float64x2_t v137 = vmlaq_f64(v133, v111, v155.val[2]);
          float64x2_t v138 = vmlaq_f64(v134, v111, v155.val[3]);
          float64x2x4_t v156 = vld4q_f64(v121);
          v121 += 8;
          float64x2_t v139 = vmlaq_f64(v135, v112, v156.val[0]);
          float64x2_t v140 = vmlaq_f64(v136, v112, v156.val[1]);
          float64x2_t v141 = vmlaq_f64(v137, v112, v156.val[2]);
          float64x2_t v142 = vmlaq_f64(v138, v112, v156.val[3]);
          float64x2x4_t v157 = vld4q_f64(v120);
          v120 += 8;
          float64x2_t v143 = vmlaq_f64(v139, v113, v157.val[0]);
          float64x2_t v144 = vmlaq_f64(v140, v113, v157.val[1]);
          float64x2_t v145 = vmlaq_f64(v141, v113, v157.val[2]);
          float64x2_t v146 = vmlaq_f64(v142, v113, v157.val[3]);
          float64x2x4_t v158 = vld4q_f64(v119);
          v119 += 8;
          float64x2_t v147 = vmlaq_f64(v143, v114, v158.val[0]);
          float64x2_t v148 = vmlaq_f64(v144, v114, v158.val[1]);
          float64x2_t v149 = vmlaq_f64(v145, v114, v158.val[2]);
          float64x2_t v150 = vmlaq_f64(v146, v114, v158.val[3]);
          float64x2x4_t v159 = vld4q_f64(v118);
          v118 += 8;
          float64x2x4_t v151 = vld4q_f64(v117);
          v117 += 8;
          v152.val[0] = vmlaq_f64(vmlaq_f64(v147, v115, v159.val[0]), v122, v151.val[0]);
          v152.val[1] = vmlaq_f64(vmlaq_f64(v148, v115, v159.val[1]), v122, v151.val[1]);
          v152.val[2] = vmlaq_f64(vmlaq_f64(v149, v115, v159.val[2]), v122, v151.val[2]);
          v152.val[3] = vmlaq_f64(vmlaq_f64(v150, v115, v159.val[3]), v122, v151.val[3]);
          vst4q_f64(v125, v152);
          v125 += 8;
          v116 -= 2;
        }
        while (v116);
        if (v109 == (v109 & 0x7FFFFFFE)) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    uint64_t v23 = v6;
    int v24 = v12 + 2;
    signed int v25 = a3 + 2;
    do
    {
      double v26 = v11[v23 + 3] * v7
          + v24[v23 + 1] * *(double *)&v10
          + v15[v23 + 3] * *(double *)&v13
          + v14[v23 + 3] * *(double *)&v16
          + v8[v23 + 3] * *(double *)&v17
          + v9[v23 + 3] * *(double *)&v18
          + v21[v23 + 3] * *(double *)&v19;
      double v27 = v11[v23] * v7
          + v24[v23 - 2] * *(double *)&v10
          + v15[v23] * *(double *)&v13
          + v14[v23] * *(double *)&v16
          + v8[v23] * *(double *)&v17
          + v9[v23] * *(double *)&v18
          + v21[v23] * *(double *)&v19
          + v22[v23] * *(double *)&v20;
      double v28 = v11[v23 + 1] * v7
          + v24[v23 - 1] * *(double *)&v10
          + v15[v23 + 1] * *(double *)&v13
          + v14[v23 + 1] * *(double *)&v16
          + v8[v23 + 1] * *(double *)&v17
          + v9[v23 + 1] * *(double *)&v18
          + v21[v23 + 1] * *(double *)&v19
          + v22[v23 + 1] * *(double *)&v20;
      double v29 = v22[v23 + 3];
      double v30 = v11[v23 + 2] * v7
          + v24[v23] * *(double *)&v10
          + v15[v23 + 2] * *(double *)&v13
          + v14[v23 + 2] * *(double *)&v16
          + v8[v23 + 2] * *(double *)&v17
          + v9[v23 + 2] * *(double *)&v18
          + v21[v23 + 2] * *(double *)&v19
          + v22[v23 + 2] * *(double *)&v20;
      int v31 = &v25[v23];
      v6 += 4;
      v24 += 4;
      v11 += 4;
      v25[v23] = v30;
      v15 += 4;
      v14 += 4;
      v8 += 4;
      v9 += 4;
      *(v31 - 2) = v27;
      *(v31 - 1) = v28;
      v31[1] = v26 + v29 * *(double *)&v20;
      v21 += 4;
      v22 += 4;
      v25 += 4;
    }
    while (v6 <= v5);
  }
  else
  {
    LODWORD(v6) = 0;
  }
LABEL_7:
  if ((int)v6 < a5)
  {
    *(double *)&uint64_t v32 = *a4;
    double v33 = a4[1];
    *(double *)&uint64_t v34 = a4[2];
    *(double *)&uint64_t v35 = a4[3];
    *(double *)&uint64_t v36 = a4[4];
    *(double *)&uint64_t v37 = a4[5];
    *(double *)&uint64_t v38 = a4[6];
    int64x2_t v40 = *((int64x2_t *)a2 + 2);
    int64x2_t v39 = *((int64x2_t *)a2 + 3);
    *(double *)&uint64_t v41 = a4[7];
    int64x2_t v43 = *(int64x2_t *)a2;
    int64x2_t v42 = *((int64x2_t *)a2 + 1);
    uint64_t v44 = v6;
    uint64_t v45 = a5;
    int v46 = a2[1];
    unsigned int v47 = a2[3];
    unint64_t v48 = a5 - v44;
    int v49 = a2[5];
    int v50 = a2[7];
    if (v48 < 0xC) {
      goto LABEL_13;
    }
    uint64_t v51 = v44;
    int64x2_t v52 = vdupq_n_s64(8 * v44);
    int64x2_t v53 = vaddq_s64(v52, v42);
    int64x2_t v54 = vaddq_s64(v52, v43);
    int64x2_t v55 = vaddq_s64(v52, v40);
    int64x2_t v56 = vdupq_n_s64((unint64_t)&a3[v44]);
    uint64x2_t v57 = (uint64x2_t)vsubq_s64(v56, vaddq_s64(v52, v39));
    uint64x2_t v58 = (uint64x2_t)vsubq_s64(v56, v55);
    uint64x2_t v59 = (uint64x2_t)vsubq_s64(v56, v54);
    uint64x2_t v60 = (uint64x2_t)vsubq_s64(v56, v53);
    uint64x2_t v61 = (uint64x2_t)vdupq_n_s64(0x10uLL);
    if (vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v61, v59), (int32x4_t)vcgtq_u64(v61, v60)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v61, v58), (int32x4_t)vcgtq_u64(v61, v57))))))goto LABEL_13; {
    v44 += v48 & 0xFFFFFFFFFFFFFFFELL;
    }
    float64x2_t v62 = (float64x2_t)vdupq_lane_s64(v32, 0);
    float64x2_t v63 = (float64x2_t)vdupq_lane_s64(v34, 0);
    float64x2_t v64 = (float64x2_t)vdupq_lane_s64(v35, 0);
    float64x2_t v65 = (float64x2_t)vdupq_lane_s64(v36, 0);
    BOOL v66 = *a2;
    BOOL v67 = a2[2];
    float64x2_t v68 = (float64x2_t)vdupq_lane_s64(v37, 0);
    BOOL v69 = a2[4];
    float64x2_t v70 = (float64x2_t)vdupq_lane_s64(v38, 0);
    uint64_t v71 = v39.i64[0];
    unint64_t v72 = a3;
    BOOL v73 = v50;
    float64x2_t v74 = (float64x2_t)vdupq_lane_s64(v41, 0);
    BOOL v75 = v49;
    BOOL v76 = v47;
    float32x4_t v77 = v46;
    unint64_t v78 = v48 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      float64x2_t v79 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)&v77[v51], v33), v62, *(float64x2_t *)&v66[v51]), v63, *(float64x2_t *)&v67[v51]), v64, *(float64x2_t *)&v76[v51]), v65, *(float64x2_t *)&v69[v51]), v68, *(float64x2_t *)&v75[v51]), v70, *(float64x2_t *)(v71 + v51 * 8));
      v66 += 2;
      v77 += 2;
      v67 += 2;
      v76 += 2;
      *(float64x2_t *)&v72[v51] = vmlaq_f64(v79, v74, *(float64x2_t *)&v73[v51]);
      v69 += 2;
      v75 += 2;
      v71 += 16;
      v73 += 2;
      v72 += 2;
      v78 -= 2;
    }
    while (v78);
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_13:
      uint64_t v80 = 0;
      float32x4_t v81 = &a3[v44];
      float32x4_t v82 = &v50[v44];
      uint64_t v83 = v39.i64[0] + 8 * v44;
      float32x4_t v84 = &v49[v44];
      uint64_t v85 = v40.i64[0] + 8 * v44;
      float32x4_t v86 = &v47[v44];
      uint64_t v87 = v42.i64[0] + 8 * v44;
      unint64_t v88 = &v46[v44];
      uint64_t v89 = v43.i64[0] + 8 * v44;
      uint64_t v90 = v45 - v44;
      do
      {
        v81[v80] = v88[v80] * v33
                 + *(double *)(v89 + 8 * v80) * *(double *)&v32
                 + *(double *)(v87 + 8 * v80) * *(double *)&v34
                 + v86[v80] * *(double *)&v35
                 + *(double *)(v85 + 8 * v80) * *(double *)&v36
                 + v84[v80] * *(double *)&v37
                 + *(double *)(v83 + 8 * v80) * *(double *)&v38
                 + v82[v80] * *(double *)&v41;
        ++v80;
      }
      while (v90 != v80);
    }
  }
}

uint64_t sub_100375014(uint64_t a1)
{
  *(void *)a1 = off_10049B730;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100375150(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_10049B770;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v15 = *(void **)(a2 + 72);
    uint64_t v16 = *(void **)(a1 + 80);
    void *v16 = *v15;
    v16[1] = v15[1];
  }
  long long v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v19 = *(void *)(a3 + 48);
  uint64_t v18 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v19;
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v20 = *(void **)(a3 + 72);
    uint64_t v21 = *(void **)(a1 + 176);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = a6;
  *(void *)(a1 + 216) = a7;
  return a1;
}

void sub_1003752B0(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003752CC(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003752E0(uint64_t a1)
{
  sub_100375C94(a1);

  operator delete();
}

void sub_100375318(uint64_t a1, int *a2)
{
  uint64_t v2 = *(int **)(a1 + 72);
  int v3 = v2[1];
  uint64_t v4 = *v2;
  int v5 = *(_DWORD *)(*(void *)(a1 + 168) + 4);
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = (v6 >> 3) & 0x1FF;
  uint64_t v8 = v7 + 1;
  int v9 = *(_DWORD *)(a1 + 200);
  int v10 = *(_DWORD *)(a1 + 204);
  int v11 = *(_DWORD *)(a1 + 88);
  v60[0] = v9;
  v60[1] = v10;
  v60[2] = v7 + 1;
  int v62 = v11;
  int v63 = v7 + 1;
  int v64 = v11;
  unsigned int v12 = (0xDu >> ((v6 >> 3) & 0xF)) & 1;
  if (v7 > 3) {
    LOBYTE(v12) = 0;
  }
  if (v10 != 2) {
    LOBYTE(v12) = 0;
  }
  if (v9 != 2) {
    LOBYTE(v12) = 0;
  }
  char v61 = v12;
  uint64_t v13 = *a2;
  if ((int)v13 < a2[1])
  {
    int v15 = v10 * v9;
    unsigned int v57 = v3 / v9 * v8;
    int v16 = v8 * v3;
    uint64_t v17 = v10 * v9 - 4;
    signed int v55 = ((v10 * v9 - 4) & 0xFFFFFFFC) + 4;
    size_t v59 = (v8 * v5);
    do
    {
      uint64_t v18 = *(void *)(a1 + 120) + *(void *)(a1 + 184) * v13;
      int v19 = *(_DWORD *)(a1 + 204);
      int v20 = v19 * v13;
      if (v19 * (int)v13 + v19 <= (int)v4) {
        uint64_t v21 = v57;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v20 >= (int)v4)
      {
        if ((int)v59 >= 1) {
          bzero((void *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v13), v59);
        }
      }
      else
      {
        int v56 = v19 * v13;
        uint64_t v22 = v20;
        int v23 = sub_100375700((uint64_t)v60, (uint8x8_t *)(*(void *)(a1 + 24) + **(void **)(a1 + 80) * v20), v18, v21);
        if (v23 < (int)v21)
        {
          uint64_t v24 = v23;
          while (1)
          {
            uint64_t v27 = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v22 + *(int *)(*(void *)(a1 + 216) + 4 * v24);
            if (v15 >= 4)
            {
              uint64_t v30 = 0;
              int v29 = 0;
              do
              {
                int v31 = (int *)(*(void *)(a1 + 208) + 4 * v30);
                v29 += *(unsigned __int8 *)(v27 + *v31)
                     + *(unsigned __int8 *)(v27 + v31[1])
                     + *(unsigned __int8 *)(v27 + v31[2])
                     + *(unsigned __int8 *)(v27 + v31[3]);
                v30 += 4;
              }
              while (v30 <= v17);
              unsigned int v28 = v55;
              if (v55 >= v15) {
                goto LABEL_16;
              }
            }
            else
            {
              unsigned int v28 = 0;
              int v29 = 0;
              if (v15 <= 0) {
                goto LABEL_16;
              }
            }
            uint64_t v32 = *(void *)(a1 + 208);
            uint64_t v33 = v28;
            uint64_t v34 = v15 + ~v28;
            if (v34)
            {
              int v35 = 0;
              uint64_t v36 = v34 + 1;
              uint64_t v37 = (v34 + 1) & 0x1FFFFFFFELL;
              uint64_t v38 = v37 + v33;
              int64x2_t v39 = (int *)(v32 + 4 * v33 + 4);
              uint64_t v40 = v37;
              do
              {
                v29 += *(unsigned __int8 *)(v27 + *(v39 - 1));
                v35 += *(unsigned __int8 *)(v27 + *v39);
                v39 += 2;
                v40 -= 2;
              }
              while (v40);
              v29 += v35;
              if (v36 == v37) {
                goto LABEL_16;
              }
            }
            else
            {
              uint64_t v38 = v33;
            }
            uint64_t v41 = (int *)(v32 + 4 * v38);
            do
            {
              uint64_t v42 = *v41++;
              v29 += *(unsigned __int8 *)(v27 + v42);
              LODWORD(v38) = v38 + 1;
            }
            while (v15 > (int)v38);
LABEL_16:
            float v25 = rintf((float)(1.0 / (float)v15) * (float)v29);
            int v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
            if (v26 >= 255) {
              LOBYTE(v26) = -1;
            }
            *(unsigned char *)(v18 + v24++) = v26;
            if (v24 == (int)v21)
            {
              int v23 = v21;
              break;
            }
          }
        }
        if (v23 < (int)v59)
        {
          uint64_t v43 = v23;
          do
          {
            uint64_t v48 = *(int *)(*(void *)(a1 + 216) + 4 * v43);
            if ((int)v48 >= v16 || (uint64_t v49 = *(unsigned int *)(a1 + 204), (int)v49 < 1))
            {
              int v44 = 0;
              int v45 = 0;
            }
            else
            {
              uint64_t v50 = 0;
              int v45 = 0;
              int v44 = 0;
              uint64_t v51 = v56;
              do
              {
                if (v50 + v22 >= v4) {
                  break;
                }
                unint64_t v52 = (*(_DWORD *)(a1 + 200) * v8);
                if ((int)v52 >= 1)
                {
                  uint64_t v53 = 0;
                  do
                  {
                    v44 += *(unsigned __int8 *)(*(void *)(a1 + 24) + v48 + **(void **)(a1 + 80) * v51 + v53);
                    ++v45;
                    if (v53 + v8 >= v52) {
                      break;
                    }
                    int v54 = v8 + v48 + v53;
                    v53 += v8;
                  }
                  while (v54 < v16);
                }
                ++v50;
                ++v51;
              }
              while (v50 != v49);
            }
            float v46 = rintf((float)v44 / (float)v45);
            int v47 = (uint64_t)v46 & ~((int)(uint64_t)v46 >> 31);
            if (v47 >= 255) {
              LOBYTE(v47) = -1;
            }
            *(unsigned char *)(v18 + v43++) = v47;
          }
          while (v43 != (int)v59);
        }
      }
      ++v13;
    }
    while (v13 < a2[1]);
  }
}

uint64_t sub_100375700(uint64_t a1, uint8x8_t *a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 12)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v6 = *(int *)(a1 + 16);
  uint64_t v7 = (char *)a2 + v6;
  uint64_t v8 = *(int *)(a1 + 24);
  if (v5 != 1)
  {
    if (v5 == 4)
    {
      int v9 = a4 - 8;
      if ((int)a4 >= 8)
      {
        uint64_t v10 = 0;
        int v11 = a2;
        do
        {
          int8x16_t v12 = *(int8x16_t *)&v11->i8[v8];
          int8x16_t v13 = (int8x16_t)vmovl_u8(*v11);
          int8x16_t v14 = (int8x16_t)vmovl_high_u8(*(uint8x16_t *)v11->i8);
          int8x16_t v15 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v12.i8);
          uint8x8_t v16 = (uint8x8_t)vextq_s8(v12, v12, 8uLL).u64[0];
          int8x16_t v17 = (int8x16_t)vmovl_high_u8((uint8x16_t)v12);
          int16x8_t v18 = (int16x8_t)vaddw_u8((uint16x8_t)vextq_s8(v13, v13, 8uLL), *v11);
          *(int16x4_t *)v18.i8 = vadd_s16(*(int16x4_t *)v18.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
          v18.i64[0] = vaddw_u8((uint16x8_t)v18, *(uint8x8_t *)v12.i8).u64[0];
          uint16x8_t v19 = vaddw_u8((uint16x8_t)vextq_s8(v14, v14, 8uLL), (uint8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v11->i8, *(int8x16_t *)v11->i8, 8uLL));
          *(int16x4_t *)v19.i8 = vadd_s16(*(int16x4_t *)v19.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
          v18.i64[1] = vaddw_u8(v19, v16).u64[0];
          *(int8x8_t *)(a3 + v10) = vrshrn_n_s16(v18, 2uLL);
          v11 += 2;
          v10 += 8;
        }
        while ((int)v10 <= v9);
        uint64_t v20 = (v9 & 0xFFFFFFF8) + 8;
        int v21 = *(_DWORD *)(a1 + 8);
        if (v21 == 1) {
          goto LABEL_26;
        }
LABEL_12:
        if (v21 == 4)
        {
          if ((int)v20 >= (int)a4) {
            return v20;
          }
          uint64_t v23 = (int)v20;
          int v27 = 2 * v20 + 7;
          do
          {
            unsigned int v28 = (unsigned char *)(a3 + v23);
            unsigned char *v28 = (a2->u8[v27 - 7]
                  + a2->u8[v27 - 3]
                  + v7[v27 - 7]
                  + v7[v27 - 3]
                  + 2) >> 2;
            v28[1] = (a2->u8[v27 - 6]
                    + a2->u8[v27 - 2]
                    + v7[v27 - 6]
                    + v7[v27 - 2]
                    + 2) >> 2;
            v28[2] = (a2->u8[v27 - 5]
                    + a2->u8[v27 - 1]
                    + v7[v27 - 5]
                    + v7[v27 - 1]
                    + 2) >> 2;
            v28[3] = (a2->u8[v27 - 4]
                    + a2->u8[v27]
                    + v7[v27 - 4]
                    + v7[v27]
                    + 2) >> 2;
            v23 += 4;
            v27 += 8;
          }
          while (v23 < (int)a4);
        }
        else
        {
          if (v21 != 3)
          {
            v58[0] = 0;
            v58[1] = 0;
            int v26 = (_DWORD *)sub_1002D19D8(v58, 7);
            *int v26 = 1025535587;
            *(_DWORD *)((char *)v26 + 3) = 874528061;
            sub_1002D2278(-215, v58, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2890);
          }
          if ((int)v20 >= (int)a4) {
            return v20;
          }
          uint64_t v23 = (int)v20;
          int v24 = 2 * v20 + 5;
          do
          {
            float v25 = (unsigned char *)(a3 + v23);
            unsigned char *v25 = (a2->u8[v24 - 5]
                  + a2->u8[v24 - 2]
                  + v7[v24 - 5]
                  + v7[v24 - 2]
                  + 2) >> 2;
            v25[1] = (a2->u8[v24 - 4]
                    + a2->u8[v24 - 1]
                    + v7[v24 - 4]
                    + v7[v24 - 1]
                    + 2) >> 2;
            _DWORD v25[2] = (a2->u8[v24 - 3]
                    + a2->u8[v24]
                    + v7[v24 - 3]
                    + v7[v24]
                    + 2) >> 2;
            v23 += 3;
            v24 += 6;
          }
          while (v23 < (int)a4);
        }
        return v23;
      }
    }
LABEL_11:
    uint64_t v20 = 0;
    int v21 = *(_DWORD *)(a1 + 8);
    if (v21 == 1) {
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  int v22 = a4 - 16;
  if ((int)a4 < 16) {
    goto LABEL_11;
  }
  uint64_t v29 = 0;
  uint64_t v30 = (const char *)a2;
  do
  {
    int v31 = &v30[v8];
    int8x16x2_t v61 = vld2q_s8(v30);
    v30 += 32;
    int8x16x2_t v63 = vld2q_s8(v31);
    *(int8x16_t *)(a3 + v29) = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v61.val[1].i8, *(uint8x8_t *)v61.val[0].i8), *(uint8x8_t *)v63.val[1].i8), *(uint8x8_t *)v63.val[0].i8), 2uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddl_high_u8((uint8x16_t)v61.val[1], (uint8x16_t)v61.val[0]), (uint8x16_t)v63.val[1]), (uint8x16_t)v63.val[0]), 2uLL);
    v29 += 16;
  }
  while ((int)v29 <= v22);
  uint64_t v20 = (v22 & 0xFFFFFFF0) + 16;
  int v21 = *(_DWORD *)(a1 + 8);
  if (v21 != 1) {
    goto LABEL_12;
  }
LABEL_26:
  if ((int)v20 < (int)a4)
  {
    unint64_t v32 = (int)v20;
    unint64_t v33 = (int)a4 - (uint64_t)(int)v20;
    if (v33 >= 8)
    {
      unint64_t v34 = ~(uint64_t)(int)v20 + (int)a4;
      int v35 = 2 * v20;
      if (2 * (int)v20 <= 2 * ((int)v20 + (int)v34)
        && ((v34 & 0x40000000) != 0) == __OFSUB__(((2 * v20) | 1) + 2 * v34, (2 * v20) | 1)
        && !(v34 >> 31))
      {
        unint64_t v36 = a3 + (int)a4;
        uint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = &v37[v6];
        uint64_t v39 = v35 + 2 * (int)a4;
        unint64_t v40 = (unint64_t)a2 + v39 + v6 - 2 * (int)v20;
        BOOL v41 = a3 + (int)v20 >= (unint64_t)a2 + v39 - 2 * (int)v20 || (unint64_t)v37 >= v36;
        BOOL v42 = !v41;
        BOOL v43 = (unint64_t)v38 >= v36 || a3 + (int)v20 >= v40;
        if (v43 && !v42)
        {
          if (v33 < 0x10)
          {
            unint64_t v44 = 0;
            goto LABEL_50;
          }
          unint64_t v44 = v33 & 0xFFFFFFFFFFFFFFF0;
          int v45 = (int8x16_t *)(a3 + (int)v20);
          unint64_t v46 = v33 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int v47 = (char *)a2 + v35;
            int8x16x2_t v62 = vld2q_s8(v47);
            uint64_t v48 = &v7[v35];
            int8x16x2_t v64 = vld2q_s8(v48);
            *v45++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v62.val[0].i8, *(uint8x8_t *)v62.val[1].i8), *(uint8x8_t *)v64.val[0].i8), *(uint8x8_t *)v64.val[1].i8), 2uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddl_high_u8((uint8x16_t)v62.val[0], (uint8x16_t)v62.val[1]), (uint8x16_t)v64.val[0]), (uint8x16_t)v64.val[1]), 2uLL);
            v35 += 32;
            v46 -= 16;
          }
          while (v46);
          if (v33 == v44) {
            return a4;
          }
          if ((v33 & 8) != 0)
          {
LABEL_50:
            int v49 = 2 * (v20 + v44);
            unint64_t v50 = v44 - (v33 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v51 = (int8x8_t *)(a3 + v44 + (int)v20);
            do
            {
              unint64_t v52 = (char *)a2 + v49;
              int8x8x2_t v59 = vld2_s8(v52);
              uint64_t v53 = &v7[v49];
              int8x8x2_t v60 = vld2_s8(v53);
              *v51++ = vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8((uint8x8_t)v59.val[0], (uint8x8_t)v59.val[1]), (uint8x8_t)v60.val[0]), (uint8x8_t)v60.val[1]), 2uLL);
              v49 += 16;
              v50 += 8;
            }
            while (v50);
            unint64_t v32 = (v33 & 0xFFFFFFFFFFFFFFF8) + (int)v20;
            if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8)) {
              return a4;
            }
            goto LABEL_53;
          }
          unint64_t v32 = v44 + (int)v20;
        }
      }
    }
LABEL_53:
    int v54 = 2 * v32;
    signed int v55 = (unsigned char *)(a3 + v32);
    unint64_t v56 = (int)a4 - v32;
    do
    {
      *v55++ = (a2->u8[v54] + v7[v54] + a2->u8[v54 + 1] + v7[v54 + 1] + 2) >> 2;
      v54 += 2;
      --v56;
    }
    while (v56);
    return a4;
  }
  return v20;
}

void sub_100375C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100375C94(uint64_t a1)
{
  *(void *)a1 = off_10049B770;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100375DD0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_10049B7B0;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int8x16_t v15 = *(void **)(a2 + 72);
    uint8x8_t v16 = *(void **)(a1 + 80);
    void *v16 = *v15;
    v16[1] = v15[1];
  }
  long long v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v19 = *(void *)(a3 + 48);
  uint64_t v18 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v19;
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v20 = *(void **)(a3 + 72);
    int v21 = *(void **)(a1 + 176);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = a6;
  *(void *)(a1 + 216) = a7;
  return a1;
}

void sub_100375F30(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100375F4C(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100375F60(uint64_t a1)
{
  sub_10037684C(a1);

  operator delete();
}

void sub_100375F98(uint64_t a1, int *a2)
{
  uint64_t v2 = *(int **)(a1 + 72);
  int v3 = v2[1];
  uint64_t v4 = *v2;
  int v5 = *(_DWORD *)(*(void *)(a1 + 168) + 4);
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = (v6 >> 3) & 0x1FF;
  uint64_t v8 = v7 + 1;
  int v9 = *(_DWORD *)(a1 + 200);
  int v10 = *(_DWORD *)(a1 + 204);
  int v11 = *(_DWORD *)(a1 + 88);
  v62[0] = v9;
  v62[1] = v10;
  v62[2] = v7 + 1;
  int v64 = v11;
  int v65 = v7 + 1;
  int v66 = v11;
  BOOL v47 = v7 > 3;
  unsigned int v12 = (0xDu >> ((v6 >> 3) & 0xF)) & 1;
  if (v47) {
    LOBYTE(v12) = 0;
  }
  if (v10 != 2) {
    LOBYTE(v12) = 0;
  }
  if (v9 != 2) {
    LOBYTE(v12) = 0;
  }
  char v63 = v12;
  uint64_t v13 = *a2;
  if ((int)v13 < a2[1])
  {
    int v15 = v10 * v9;
    unsigned int v60 = v3 / v9 * v8;
    int v16 = v8 * v3;
    uint64_t v17 = v10 * v9 - 4;
    signed int v54 = ((v10 * v9 - 4) & 0xFFFFFFFC) + 4;
    int v59 = v8 * v5;
    uint64_t v55 = 2 * (v8 * v5);
    uint64_t v18 = 2 * ((v6 >> 3) & 0x1FF) + 2;
    do
    {
      uint64_t v19 = (int16x4_t *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v13);
      int v20 = *(_DWORD *)(a1 + 204);
      int v21 = v20 * v13;
      if (v20 * (int)v13 + v20 <= (int)v4) {
        uint64_t v22 = v60;
      }
      else {
        uint64_t v22 = 0;
      }
      if (v21 >= (int)v4)
      {
        if (v59 >= 1)
        {
          uint64_t v38 = v13;
          bzero((void *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v13), v55);
          uint64_t v13 = v38;
        }
      }
      else
      {
        int v57 = v22;
        uint64_t v58 = v13;
        int v56 = v20 * v13;
        uint64_t v23 = v21;
        int v24 = sub_100376344((uint64_t)v62, (uint16x4_t *)(*(void *)(a1 + 24) + **(void **)(a1 + 80) * v21), v19, v22);
        if (v24 < v57)
        {
          uint64_t v26 = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v23;
          uint64_t v27 = *(void *)(a1 + 216);
          uint64_t v28 = v24;
          while (1)
          {
            uint64_t v31 = v26 + 2 * *(int *)(v27 + 4 * v28);
            if (v15 >= 4) {
              break;
            }
            signed int v32 = 0;
            float v33 = 0.0;
            if (v15 > 0) {
              goto LABEL_25;
            }
LABEL_16:
            float v29 = rintf((float)(1.0 / (float)v15) * v33);
            int v30 = (uint64_t)v29 & ~((int)(uint64_t)v29 >> 31);
            if (v30 >= 0xFFFF) {
              LOWORD(v30) = -1;
            }
            v19->i16[v28++] = v30;
            if (v28 == v57)
            {
              int v24 = v57;
              goto LABEL_31;
            }
          }
          uint64_t v34 = 0;
          float v33 = 0.0;
          do
          {
            int v35 = (int *)(*(void *)(a1 + 208) + 4 * v34);
            float v25 = (float)(*(unsigned __int16 *)(v31 + 2 * v35[1])
                        + *(unsigned __int16 *)(v31 + 2 * *v35)
                        + *(unsigned __int16 *)(v31 + 2 * v35[2])
                        + *(unsigned __int16 *)(v31 + 2 * v35[3]));
            float v33 = v33 + v25;
            v34 += 4;
          }
          while (v34 <= v17);
          signed int v32 = v54;
          if (v54 >= v15) {
            goto LABEL_16;
          }
LABEL_25:
          unint64_t v36 = (int *)(*(void *)(a1 + 208) + 4 * v32);
          do
          {
            uint64_t v37 = *v36++;
            LOWORD(v25) = *(_WORD *)(v31 + 2 * v37);
            float v25 = (float)LODWORD(v25);
            float v33 = v33 + v25;
            ++v32;
          }
          while (v15 > v32);
          goto LABEL_16;
        }
LABEL_31:
        uint64_t v13 = v58;
        if (v24 < v59)
        {
          uint64_t v39 = *(void *)(a1 + 216);
          uint64_t v40 = *(unsigned int *)(a1 + 204);
          uint64_t v41 = v24;
          do
          {
            uint64_t v46 = *(int *)(v39 + 4 * v41);
            BOOL v47 = (int)v46 >= v16 || (int)v40 < 1;
            if (v47)
            {
              int v42 = 0;
              float v43 = 0.0;
            }
            else
            {
              uint64_t v48 = 0;
              int v42 = 0;
              float v43 = 0.0;
              uint64_t v49 = v56;
              do
              {
                if (v48 + v23 >= v4) {
                  break;
                }
                unint64_t v50 = (*(_DWORD *)(a1 + 200) * v8);
                if ((int)v50 >= 1)
                {
                  uint64_t v51 = (_WORD *)(*(void *)(a1 + 24) + 2 * v46 + **(void **)(a1 + 80) * v49);
                  unint64_t v52 = v8;
                  do
                  {
                    LOWORD(v25) = *v51;
                    float v25 = (float)LODWORD(v25);
                    float v43 = v43 + v25;
                    ++v42;
                    if (v52 >= v50) {
                      break;
                    }
                    int v53 = *(_DWORD *)(v39 + 4 * v41) + v52;
                    uint64_t v51 = (_WORD *)((char *)v51 + v18);
                    v52 += v8;
                  }
                  while (v53 < v16);
                }
                ++v48;
                ++v49;
              }
              while (v48 != v40);
            }
            float v25 = (float)v42;
            float v44 = rintf(v43 / (float)v42);
            int v45 = (uint64_t)v44 & ~((int)(uint64_t)v44 >> 31);
            if (v45 >= 0xFFFF) {
              LOWORD(v45) = -1;
            }
            v19->i16[v41++] = v45;
          }
          while (v41 != v59);
        }
      }
      ++v13;
    }
    while (v13 < a2[1]);
  }
}

uint64_t sub_100376344(uint64_t a1, uint16x4_t *a2, int16x4_t *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 12)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v6 = *(int *)(a1 + 16);
  uint64_t v7 = (char *)a2 + v6;
  uint64_t v8 = *(int *)(a1 + 24);
  if (v5 != 1)
  {
    if (v5 == 4)
    {
      int v9 = a4 - 4;
      if ((int)a4 >= 4)
      {
        int v10 = 0;
        int v11 = a3;
        unsigned int v12 = a2;
        do
        {
          *v11++ = vrshrn_n_s32((int32x4_t)vaddw_u16(vaddw_high_u16(vaddw_high_u16(vmovl_u16(*v12), *(uint16x8_t *)v12->i8), *(uint16x8_t *)&v12->i8[v8]), *(uint16x4_t *)((char *)v12 + v8)), 2uLL);
          v10 += 4;
          v12 += 2;
        }
        while (v10 <= v9);
        uint64_t v13 = (v9 & 0xFFFFFFFC) + 4;
        int v14 = *(_DWORD *)(a1 + 8);
        if (v14 == 1) {
          goto LABEL_26;
        }
        goto LABEL_12;
      }
    }
LABEL_11:
    uint64_t v13 = 0;
    int v14 = *(_DWORD *)(a1 + 8);
    if (v14 == 1) {
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  int v15 = a4 - 8;
  if ((int)a4 < 8) {
    goto LABEL_11;
  }
  int v26 = 0;
  uint64_t v27 = (int16x8_t *)a3;
  uint64_t v28 = (const __int16 *)a2;
  do
  {
    float v29 = (const __int16 *)((char *)v28 + v8);
    int16x8x2_t v54 = vld2q_s16(v28);
    v28 += 16;
    int16x8x2_t v56 = vld2q_s16(v29);
    *v27++ = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v54.val[1].i8, *(uint16x4_t *)v54.val[0].i8), *(uint16x4_t *)v56.val[1].i8), *(uint16x4_t *)v56.val[0].i8), 2uLL), (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v54.val[1], (uint16x8_t)v54.val[0]), (uint16x8_t)v56.val[1]), (uint16x8_t)v56.val[0]), 2uLL);
    v26 += 8;
  }
  while (v26 <= v15);
  uint64_t v13 = (v15 & 0xFFFFFFF8) + 8;
  int v14 = *(_DWORD *)(a1 + 8);
  if (v14 == 1)
  {
LABEL_26:
    if ((int)v13 < (int)a4)
    {
      unint64_t v30 = (int)v13;
      unint64_t v31 = (int)a4 - (uint64_t)(int)v13;
      if (v31 < 0x18) {
        goto LABEL_46;
      }
      unint64_t v32 = ~(uint64_t)(int)v13 + (int)a4;
      int v33 = 2 * v13;
      if (2 * (int)v13 > 2 * ((int)v13 + (int)v32)
        || ((v32 & 0x40000000) != 0) != __OFSUB__(((2 * v13) | 1) + 2 * v32, (2 * v13) | 1)
        || v32 >> 31)
      {
        goto LABEL_46;
      }
      unint64_t v34 = (unint64_t)a3 + 2 * (int)v13;
      int v35 = (char *)a3 + 2 * (int)a4;
      uint64_t v36 = 2 * v33;
      uint64_t v37 = (char *)a2 + v36;
      uint64_t v38 = (char *)a2 + v36 + v6;
      uint64_t v39 = v36 + 4 * (int)a4;
      unint64_t v40 = (unint64_t)a2 + v39 + v6 - 4 * (int)v13;
      BOOL v41 = v34 >= (unint64_t)a2 + v39 - 4 * (int)v13 || v37 >= v35;
      BOOL v42 = !v41;
      if (v38 < v35 && v34 < v40) {
        goto LABEL_46;
      }
      if (v42) {
        goto LABEL_46;
      }
      float v44 = (int16x8_t *)((char *)a3 + 2 * (int)v13);
      unint64_t v45 = v31 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint64_t v46 = 2 * v33;
        BOOL v47 = (const __int16 *)((char *)a2 + v46);
        int16x8x2_t v55 = vld2q_s16(v47);
        uint64_t v48 = (const __int16 *)&v7[v46];
        int16x8x2_t v57 = vld2q_s16(v48);
        *v44++ = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v55.val[0].i8, *(uint16x4_t *)v55.val[1].i8), *(uint16x4_t *)v57.val[0].i8), *(uint16x4_t *)v57.val[1].i8), 2uLL), (int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v55.val[0], (uint16x8_t)v55.val[1]), (uint16x8_t)v57.val[0]), (uint16x8_t)v57.val[1]), 2uLL);
        v33 += 16;
        v45 -= 8;
      }
      while (v45);
      unint64_t v30 = (v31 & 0xFFFFFFFFFFFFFFF8) + (int)v13;
      if (v31 != (v31 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_46:
        int v49 = 2 * v30;
        unint64_t v50 = (int)a4 - v30;
        uint64_t v51 = (_WORD *)a3 + v30;
        do
        {
          *v51++ = (a2->u16[v49]
                  + *(unsigned __int16 *)&v7[2 * v49]
                  + a2->u16[v49 + 1]
                  + *(unsigned __int16 *)&v7[2 * v49 + 2]
                  + 2) >> 2;
          v49 += 2;
          --v50;
        }
        while (v50);
      }
      return a4;
    }
    return v13;
  }
LABEL_12:
  if (v14 == 4)
  {
    if ((int)v13 >= (int)a4) {
      return v13;
    }
    uint64_t v22 = 0;
    uint64_t v17 = (int)v13;
    int v23 = 2 * v13;
    do
    {
      int v24 = v23 + v22;
      float v25 = (int16x4_t *)((char *)a3 + 2 * (int)v13 + v22);
      v25->i16[0] = (a2->u16[v24]
                   + *(unsigned __int16 *)&v7[2 * v24]
                   + a2[1].u16[v24]
                   + *(unsigned __int16 *)&v7[2 * v24 + 8]
                   + 2) >> 2;
      v25->i16[1] = (a2->u16[v24 + 1]
                   + a2[1].u16[v24 + 1]
                   + *(unsigned __int16 *)&v7[2 * v24 + 2]
                   + *(unsigned __int16 *)&v7[2 * v24 + 10]
                   + 2) >> 2;
      v25->i16[2] = (a2->u16[v23 + 2 + (int)v22]
                   + a2[1].u16[v23 + 2 + (int)v22]
                   + *(unsigned __int16 *)&v7[2 * v23 + 4 + 2 * (int)v22]
                   + *(unsigned __int16 *)&v7[2 * v23 + 12 + 2 * (int)v22]
                   + 2) >> 2;
      v25->i16[3] = (a2->u16[v23 + 3 + (int)v22]
                   + a2[1].u16[v23 + 3 + (int)v22]
                   + *(unsigned __int16 *)&v7[2 * v23 + 6 + 2 * (int)v22]
                   + *(unsigned __int16 *)&v7[2 * v23 + 14 + 2 * (int)v22]
                   + 2) >> 2;
      v17 += 4;
      v22 += 8;
    }
    while (v17 < (int)a4);
    return v17;
  }
  if (v14 != 3)
  {
    v53[0] = 0;
    v53[1] = 0;
    int v21 = (_DWORD *)sub_1002D19D8(v53, 7);
    _DWORD *v21 = 1025535587;
    *(_DWORD *)((char *)v21 + 3) = 874528061;
    sub_1002D2278(-215, v53, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2890);
  }
  if ((int)v13 < (int)a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (int)v13;
    int v18 = 2 * v13;
    do
    {
      int v19 = v18 + v16;
      int v20 = (int16x4_t *)((char *)a3 + 2 * (int)v13 + v16);
      v20->i16[0] = (a2->u16[v19]
                   + *(unsigned __int16 *)&v7[2 * v19]
                   + a2->u16[v19 + 3]
                   + *(unsigned __int16 *)&v7[2 * v19 + 6]
                   + 2) >> 2;
      v20->i16[1] = (a2->u16[v18 + 1 + (int)v16]
                   + a2[1].u16[v18 + (int)v16]
                   + *(unsigned __int16 *)&v7[2 * v18 + 2 + 2 * (int)v16]
                   + *(unsigned __int16 *)&v7[2 * v18 + 8 + 2 * (int)v16]
                   + 2) >> 2;
      v20->i16[2] = (a2->u16[v18 + 2 + (int)v16]
                   + a2[1].u16[v18 + 1 + (int)v16]
                   + *(unsigned __int16 *)&v7[2 * v18 + 4 + 2 * (int)v16]
                   + *(unsigned __int16 *)&v7[2 * v18 + 10 + 2 * (int)v16]
                   + 2) >> 2;
      v17 += 3;
      v16 += 6;
    }
    while (v17 < (int)a4);
    return v17;
  }
  return v13;
}

void sub_100376834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10037684C(uint64_t a1)
{
  *(void *)a1 = off_10049B7B0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100376988(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_10049B7F0;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v15 = *(void **)(a2 + 72);
    uint64_t v16 = *(void **)(a1 + 80);
    void *v16 = *v15;
    v16[1] = v15[1];
  }
  long long v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v19 = *(void *)(a3 + 48);
  uint64_t v18 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v19;
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    int v20 = *(void **)(a3 + 72);
    int v21 = *(void **)(a1 + 176);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = a6;
  *(void *)(a1 + 216) = a7;
  return a1;
}

void sub_100376AE8(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100376B04(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100376B18(uint64_t a1)
{
  sub_100377418(a1);

  operator delete();
}

void sub_100376B50(uint64_t a1, int *a2)
{
  uint64_t v2 = *(int **)(a1 + 72);
  int v3 = v2[1];
  uint64_t v4 = *v2;
  int v5 = *(_DWORD *)(*(void *)(a1 + 168) + 4);
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = (v6 >> 3) & 0x1FF;
  uint64_t v8 = v7 + 1;
  int v9 = *(_DWORD *)(a1 + 200);
  int v10 = *(_DWORD *)(a1 + 204);
  int v11 = *(_DWORD *)(a1 + 88);
  v60[0] = v9;
  v60[1] = v10;
  v60[2] = v7 + 1;
  int v62 = v11;
  int v63 = v7 + 1;
  int v64 = v11;
  BOOL v45 = v7 > 3;
  unsigned int v12 = (0xDu >> ((v6 >> 3) & 0xF)) & 1;
  if (v45) {
    LOBYTE(v12) = 0;
  }
  if (v10 != 2) {
    LOBYTE(v12) = 0;
  }
  if (v9 != 2) {
    LOBYTE(v12) = 0;
  }
  char v61 = v12;
  uint64_t v13 = *a2;
  if ((int)v13 < a2[1])
  {
    int v15 = v10 * v9;
    unsigned int v58 = v3 / v9 * v8;
    int v16 = v8 * v3;
    uint64_t v17 = v10 * v9 - 4;
    signed int v52 = ((v10 * v9 - 4) & 0xFFFFFFFC) + 4;
    int v57 = v8 * v5;
    uint64_t v53 = 2 * (v8 * v5);
    uint64_t v18 = 2 * ((v6 >> 3) & 0x1FF) + 2;
    do
    {
      uint64_t v19 = (int16x4_t *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v13);
      int v20 = *(_DWORD *)(a1 + 204);
      int v21 = v20 * v13;
      if (v20 * (int)v13 + v20 <= (int)v4) {
        uint64_t v22 = v58;
      }
      else {
        uint64_t v22 = 0;
      }
      if (v21 >= (int)v4)
      {
        if (v57 >= 1)
        {
          uint64_t v37 = v13;
          bzero((void *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v13), v53);
          uint64_t v13 = v37;
        }
      }
      else
      {
        int v55 = v22;
        uint64_t v56 = v13;
        int v54 = v20 * v13;
        uint64_t v23 = v21;
        int v24 = sub_100376F10((uint64_t)v60, (int16x4_t *)(*(void *)(a1 + 24) + **(void **)(a1 + 80) * v21), v19, v22);
        if (v24 < v55)
        {
          uint64_t v26 = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v23;
          uint64_t v27 = *(void *)(a1 + 216);
          uint64_t v28 = v24;
          while (1)
          {
            uint64_t v30 = v26 + 2 * *(int *)(v27 + 4 * v28);
            if (v15 >= 4) {
              break;
            }
            signed int v31 = 0;
            float v32 = 0.0;
            if (v15 > 0) {
              goto LABEL_27;
            }
LABEL_16:
            uint64_t v29 = (uint64_t)rintf((float)(1.0 / (float)v15) * v32);
            if ((int)v29 <= -32768) {
              LODWORD(v29) = -32768;
            }
            if ((int)v29 >= 0x7FFF) {
              LOWORD(v29) = 0x7FFF;
            }
            v19->i16[v28++] = v29;
            if (v28 == v55)
            {
              int v24 = v55;
              goto LABEL_33;
            }
          }
          uint64_t v33 = 0;
          float v32 = 0.0;
          do
          {
            unint64_t v34 = (int *)(*(void *)(a1 + 208) + 4 * v33);
            *(float *)v25.i32 = (float)(*(__int16 *)(v30 + 2 * v34[1])
                                      + *(__int16 *)(v30 + 2 * *v34)
                                      + *(__int16 *)(v30 + 2 * v34[2])
                                      + *(__int16 *)(v30 + 2 * v34[3]));
            float v32 = v32 + *(float *)v25.i32;
            v33 += 4;
          }
          while (v33 <= v17);
          signed int v31 = v52;
          if (v52 >= v15) {
            goto LABEL_16;
          }
LABEL_27:
          int v35 = (int *)(*(void *)(a1 + 208) + 4 * v31);
          do
          {
            uint64_t v36 = *v35++;
            v25.i16[0] = *(_WORD *)(v30 + 2 * v36);
            int16x4_t v25 = (int16x4_t)vmovl_s16(v25).u64[0];
            *(float *)v25.i32 = (float)v25.i32[0];
            float v32 = v32 + *(float *)v25.i32;
            ++v31;
          }
          while (v15 > v31);
          goto LABEL_16;
        }
LABEL_33:
        uint64_t v13 = v56;
        if (v24 < v57)
        {
          uint64_t v38 = *(void *)(a1 + 216);
          uint64_t v39 = *(unsigned int *)(a1 + 204);
          uint64_t v40 = v24;
          do
          {
            uint64_t v44 = *(int *)(v38 + 4 * v40);
            BOOL v45 = (int)v44 >= v16 || (int)v39 < 1;
            if (v45)
            {
              int v41 = 0;
              float v42 = 0.0;
            }
            else
            {
              uint64_t v46 = 0;
              int v41 = 0;
              float v42 = 0.0;
              uint64_t v47 = v54;
              do
              {
                if (v46 + v23 >= v4) {
                  break;
                }
                unint64_t v48 = (*(_DWORD *)(a1 + 200) * v8);
                if ((int)v48 >= 1)
                {
                  int v49 = (__int16 *)(*(void *)(a1 + 24) + 2 * v44 + **(void **)(a1 + 80) * v47);
                  unint64_t v50 = v8;
                  do
                  {
                    v25.i16[0] = *v49;
                    int16x4_t v25 = (int16x4_t)vmovl_s16(v25).u64[0];
                    *(float *)v25.i32 = (float)v25.i32[0];
                    float v42 = v42 + *(float *)v25.i32;
                    ++v41;
                    if (v50 >= v48) {
                      break;
                    }
                    int v51 = *(_DWORD *)(v38 + 4 * v40) + v50;
                    int v49 = (__int16 *)((char *)v49 + v18);
                    v50 += v8;
                  }
                  while (v51 < v16);
                }
                ++v46;
                ++v47;
              }
              while (v46 != v39);
            }
            *(float *)v25.i32 = (float)v41;
            uint64_t v43 = (uint64_t)rintf(v42 / (float)v41);
            if ((int)v43 <= -32768) {
              LODWORD(v43) = -32768;
            }
            if ((int)v43 >= 0x7FFF) {
              LOWORD(v43) = 0x7FFF;
            }
            v19->i16[v40++] = v43;
          }
          while (v40 != v57);
        }
      }
      ++v13;
    }
    while (v13 < a2[1]);
  }
}

uint64_t sub_100376F10(uint64_t a1, int16x4_t *a2, int16x4_t *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 12)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v6 = *(int *)(a1 + 16);
  uint64_t v7 = (char *)a2 + v6;
  uint64_t v8 = *(int *)(a1 + 24);
  if (v5 != 1)
  {
    if (v5 == 4)
    {
      int v9 = a4 - 4;
      if ((int)a4 >= 4)
      {
        int v10 = 0;
        int v11 = a3;
        unsigned int v12 = a2;
        do
        {
          *v11++ = vrshrn_n_s32(vaddw_s16(vaddw_high_s16(vaddw_high_s16(vmovl_s16(*v12), *(int16x8_t *)v12->i8), *(int16x8_t *)&v12->i8[v8]), *(int16x4_t *)((char *)v12 + v8)), 2uLL);
          v10 += 4;
          v12 += 2;
        }
        while (v10 <= v9);
        uint64_t v13 = (v9 & 0xFFFFFFFC) + 4;
        int v14 = *(_DWORD *)(a1 + 8);
        if (v14 == 1) {
          goto LABEL_26;
        }
        goto LABEL_12;
      }
    }
LABEL_11:
    uint64_t v13 = 0;
    int v14 = *(_DWORD *)(a1 + 8);
    if (v14 == 1) {
      goto LABEL_26;
    }
    goto LABEL_12;
  }
  int v15 = a4 - 8;
  if ((int)a4 < 8) {
    goto LABEL_11;
  }
  int v26 = 0;
  uint64_t v27 = (int16x8_t *)a3;
  uint64_t v28 = (const __int16 *)a2;
  do
  {
    uint64_t v29 = (const __int16 *)((char *)v28 + v8);
    int16x8x2_t v54 = vld2q_s16(v28);
    v28 += 16;
    int16x8x2_t v56 = vld2q_s16(v29);
    *v27++ = vrshrn_high_n_s32(vrshrn_n_s32(vaddw_s16(vaddw_s16(vaddl_s16(*(int16x4_t *)v54.val[1].i8, *(int16x4_t *)v54.val[0].i8), *(int16x4_t *)v56.val[1].i8), *(int16x4_t *)v56.val[0].i8), 2uLL), vaddw_high_s16(vaddw_high_s16(vaddl_high_s16(v54.val[1], v54.val[0]), v56.val[1]), v56.val[0]), 2uLL);
    v26 += 8;
  }
  while (v26 <= v15);
  uint64_t v13 = (v15 & 0xFFFFFFF8) + 8;
  int v14 = *(_DWORD *)(a1 + 8);
  if (v14 == 1)
  {
LABEL_26:
    if ((int)v13 < (int)a4)
    {
      unint64_t v30 = (int)v13;
      unint64_t v31 = (int)a4 - (uint64_t)(int)v13;
      if (v31 < 0x18) {
        goto LABEL_46;
      }
      unint64_t v32 = ~(uint64_t)(int)v13 + (int)a4;
      int v33 = 2 * v13;
      if (2 * (int)v13 > 2 * ((int)v13 + (int)v32)
        || ((v32 & 0x40000000) != 0) != __OFSUB__(((2 * v13) | 1) + 2 * v32, (2 * v13) | 1)
        || v32 >> 31)
      {
        goto LABEL_46;
      }
      unint64_t v34 = (unint64_t)a3 + 2 * (int)v13;
      int v35 = (char *)a3 + 2 * (int)a4;
      uint64_t v36 = 2 * v33;
      uint64_t v37 = (char *)a2 + v36;
      uint64_t v38 = (char *)a2 + v36 + v6;
      uint64_t v39 = v36 + 4 * (int)a4;
      unint64_t v40 = (unint64_t)a2 + v39 + v6 - 4 * (int)v13;
      BOOL v41 = v34 >= (unint64_t)a2 + v39 - 4 * (int)v13 || v37 >= v35;
      BOOL v42 = !v41;
      if (v38 < v35 && v34 < v40) {
        goto LABEL_46;
      }
      if (v42) {
        goto LABEL_46;
      }
      uint64_t v44 = (int16x8_t *)((char *)a3 + 2 * (int)v13);
      unint64_t v45 = v31 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint64_t v46 = 2 * v33;
        uint64_t v47 = (const __int16 *)((char *)a2 + v46);
        int16x8x2_t v55 = vld2q_s16(v47);
        unint64_t v48 = (const __int16 *)&v7[v46];
        int16x8x2_t v57 = vld2q_s16(v48);
        *v44++ = vrshrn_high_n_s32(vrshrn_n_s32(vaddw_s16(vaddw_s16(vaddl_s16(*(int16x4_t *)v55.val[0].i8, *(int16x4_t *)v55.val[1].i8), *(int16x4_t *)v57.val[0].i8), *(int16x4_t *)v57.val[1].i8), 2uLL), vaddw_high_s16(vaddw_high_s16(vaddl_high_s16(v55.val[0], v55.val[1]), v57.val[0]), v57.val[1]), 2uLL);
        v33 += 16;
        v45 -= 8;
      }
      while (v45);
      unint64_t v30 = (v31 & 0xFFFFFFFFFFFFFFF8) + (int)v13;
      if (v31 != (v31 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_46:
        int v49 = 2 * v30;
        unint64_t v50 = (int)a4 - v30;
        int v51 = (_WORD *)a3 + v30;
        do
        {
          *v51++ = (a2->i16[v49]
                                + *(__int16 *)&v7[2 * v49]
                                + a2->i16[v49 + 1]
                                + *(__int16 *)&v7[2 * v49 + 2]
                                + 2) >> 2;
          v49 += 2;
          --v50;
        }
        while (v50);
      }
      return a4;
    }
    return v13;
  }
LABEL_12:
  if (v14 == 4)
  {
    if ((int)v13 >= (int)a4) {
      return v13;
    }
    uint64_t v22 = 0;
    uint64_t v17 = (int)v13;
    int v23 = 2 * v13;
    do
    {
      int v24 = v23 + v22;
      int16x4_t v25 = (int16x4_t *)((char *)a3 + 2 * (int)v13 + v22);
      v25->i16[0] = (a2->i16[v24]
                                 + *(__int16 *)&v7[2 * v24]
                                 + a2[1].i16[v24]
                                 + *(__int16 *)&v7[2 * v24 + 8]
                                 + 2) >> 2;
      v25->i16[1] = (a2->i16[v24 + 1]
                                 + a2[1].i16[v24 + 1]
                                 + *(__int16 *)&v7[2 * v24 + 2]
                                 + *(__int16 *)&v7[2 * v24 + 10]
                                 + 2) >> 2;
      v25->i16[2] = (a2->i16[v23 + 2 + (int)v22]
                                 + a2[1].i16[v23 + 2 + (int)v22]
                                 + *(__int16 *)&v7[2 * v23 + 4 + 2 * (int)v22]
                                 + *(__int16 *)&v7[2 * v23 + 12 + 2 * (int)v22]
                                 + 2) >> 2;
      v25->i16[3] = (a2->i16[v23 + 3 + (int)v22]
                                 + a2[1].i16[v23 + 3 + (int)v22]
                                 + *(__int16 *)&v7[2 * v23 + 6 + 2 * (int)v22]
                                 + *(__int16 *)&v7[2 * v23 + 14 + 2 * (int)v22]
                                 + 2) >> 2;
      v17 += 4;
      v22 += 8;
    }
    while (v17 < (int)a4);
    return v17;
  }
  if (v14 != 3)
  {
    v53[0] = 0;
    v53[1] = 0;
    int v21 = (_DWORD *)sub_1002D19D8(v53, 7);
    _DWORD *v21 = 1025535587;
    *(_DWORD *)((char *)v21 + 3) = 874528061;
    sub_1002D2278(-215, v53, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 2890);
  }
  if ((int)v13 < (int)a4)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (int)v13;
    int v18 = 2 * v13;
    do
    {
      int v19 = v18 + v16;
      int v20 = (int16x4_t *)((char *)a3 + 2 * (int)v13 + v16);
      v20->i16[0] = (a2->i16[v19]
                                 + *(__int16 *)&v7[2 * v19]
                                 + a2->i16[v19 + 3]
                                 + *(__int16 *)&v7[2 * v19 + 6]
                                 + 2) >> 2;
      v20->i16[1] = (a2->i16[v18 + 1 + (int)v16]
                                 + a2[1].i16[v18 + (int)v16]
                                 + *(__int16 *)&v7[2 * v18 + 2 + 2 * (int)v16]
                                 + *(__int16 *)&v7[2 * v18 + 8 + 2 * (int)v16]
                                 + 2) >> 2;
      v20->i16[2] = (a2->i16[v18 + 2 + (int)v16]
                                 + a2[1].i16[v18 + 1 + (int)v16]
                                 + *(__int16 *)&v7[2 * v18 + 4 + 2 * (int)v16]
                                 + *(__int16 *)&v7[2 * v18 + 10 + 2 * (int)v16]
                                 + 2) >> 2;
      v17 += 3;
      v16 += 6;
    }
    while (v17 < (int)a4);
    return v17;
  }
  return v13;
}

void sub_100377400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100377418(uint64_t a1)
{
  *(void *)a1 = off_10049B7F0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100377554(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_10049B830;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v15 = *(void **)(a2 + 72);
    uint64_t v16 = *(void **)(a1 + 80);
    void *v16 = *v15;
    v16[1] = v15[1];
  }
  long long v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v19 = *(void *)(a3 + 48);
  uint64_t v18 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v19;
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    int v20 = *(void **)(a3 + 72);
    int v21 = *(void **)(a1 + 176);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = a6;
  *(void *)(a1 + 216) = a7;
  return a1;
}

void sub_1003776B4(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003776D0(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003776E4(uint64_t a1)
{
  sub_100377B14(a1);

  operator delete();
}

void sub_10037771C(uint64_t a1, int *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  uint64_t v3 = (v2 >> 3) & 0x1FF;
  uint64_t v4 = v3 + 1;
  int v5 = *(_DWORD *)(a1 + 200);
  int v6 = *(_DWORD *)(a1 + 204);
  if (v3) {
    _ZF = v4 == 4;
  }
  else {
    _ZF = 1;
  }
  int v8 = _ZF;
  if (v6 != 2) {
    int v8 = 0;
  }
  if (v5 != 2) {
    int v8 = 0;
  }
  int v71 = v8;
  uint64_t v9 = *a2;
  if ((int)v9 < a2[1])
  {
    int v10 = a2;
    unsigned int v12 = *(int **)(a1 + 72);
    int v13 = v12[1];
    uint64_t v14 = *v12;
    int v15 = v6 * v5;
    uint64_t v16 = (v13 / v5 * v4);
    uint64_t v17 = (v4 * *(_DWORD *)(*(void *)(a1 + 168) + 4));
    int v18 = v4 * v13;
    uint64_t v19 = (int)*(void *)(a1 + 88);
    uint64_t v68 = 4 * v17;
    uint64_t v69 = v19;
    uint64_t v20 = v6 * v5 - 4;
    signed int v21 = ((v6 * v5 - 4) & 0xFFFFFFFC) + 4;
    uint64_t v73 = (int)v17;
    uint64_t v22 = 4 * ((v2 >> 3) & 0x1FF) + 4;
    __asm { FMOV            V4.4S, #0.25 }
    int v70 = v4 * *(_DWORD *)(*(void *)(a1 + 168) + 4);
    float32x4_t v66 = _Q4;
    do
    {
      uint64_t v27 = (void *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v9);
      int v28 = *(_DWORD *)(a1 + 204);
      int v29 = v28 * v9;
      if (v28 * (int)v9 + v28 <= (int)v14) {
        int v30 = v16;
      }
      else {
        int v30 = 0;
      }
      if (v29 >= (int)v14)
      {
        if ((int)v17 >= 1)
        {
          uint64_t v72 = v9;
          uint64_t v38 = v3;
          uint64_t v39 = v16;
          bzero(v27, v68);
          _Q4 = v66;
          uint64_t v16 = v39;
          uint64_t v19 = v69;
          LODWORD(v17) = v70;
          uint64_t v3 = v38;
          uint64_t v9 = v72;
          int v10 = a2;
        }
      }
      else
      {
        if (v71)
        {
          unint64_t v31 = (float32x4_t *)(*(void *)(a1 + 24) + **(void **)(a1 + 80) * v29);
          if (v3)
          {
            if (v3 == 3)
            {
              int v32 = v30 - 4;
              if (v30 >= 4)
              {
                int v33 = 0;
                unint64_t v34 = (float32x4_t *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v9);
                do
                {
                  int v35 = (float32x4_t *)((char *)v31 + v19);
                  float32x4_t v36 = *v31;
                  float32x4_t v37 = v31[1];
                  v31 += 2;
                  *v34++ = vmulq_f32(vaddq_f32(vaddq_f32(v36, v37), vaddq_f32(*v35, v35[1])), _Q4);
                  v33 += 4;
                }
                while (v33 <= v32);
                goto LABEL_59;
              }
            }
          }
          else
          {
            int v32 = v30 - 4;
            if (v30 >= 4)
            {
              int v63 = 0;
              int v64 = (float32x4_t *)(*(void *)(a1 + 120) + *(void *)(a1 + 184) * v9);
              do
              {
                int v65 = (const float *)((char *)v31->f32 + v19);
                float32x4x2_t v74 = vld2q_f32(v31->f32);
                v31 += 2;
                float32x4x2_t v75 = vld2q_f32(v65);
                *v64++ = vmulq_f32(vaddq_f32(vaddq_f32(v74.val[0], v74.val[1]), vaddq_f32(v75.val[0], v75.val[1])), _Q4);
                v63 += 4;
              }
              while (v63 <= v32);
LABEL_59:
              LODWORD(v40) = (v32 & 0xFFFFFFFC) + 4;
              if ((int)v40 >= v30) {
                goto LABEL_41;
              }
LABEL_29:
              uint64_t v41 = *(void *)(a1 + 24) + **(void **)(a1 + 80) * v29;
              uint64_t v42 = *(void *)(a1 + 216);
              uint64_t v40 = (int)v40;
              while (2)
              {
                uint64_t v43 = v41 + 4 * *(int *)(v42 + 4 * v40);
                if (v15 >= 4)
                {
                  uint64_t v46 = 0;
                  float v45 = 0.0;
                  do
                  {
                    uint64_t v47 = (int *)(*(void *)(a1 + 208) + 4 * v46);
                    float v45 = v45
                        + (float)((float)((float)(*(float *)(v43 + 4 * *v47) + *(float *)(v43 + 4 * v47[1]))
                                        + *(float *)(v43 + 4 * v47[2]))
                                + *(float *)(v43 + 4 * v47[3]));
                    v46 += 4;
                  }
                  while (v46 <= v20);
                  signed int v44 = v21;
                  if (v21 < v15)
                  {
LABEL_37:
                    unint64_t v48 = (int *)(*(void *)(a1 + 208) + 4 * v44);
                    do
                    {
                      uint64_t v49 = *v48++;
                      float v45 = v45 + *(float *)(v43 + 4 * v49);
                      ++v44;
                    }
                    while (v15 > v44);
                  }
                }
                else
                {
                  signed int v44 = 0;
                  float v45 = 0.0;
                  if (v15 > 0) {
                    goto LABEL_37;
                  }
                }
                *((float *)v27 + v40++) = (float)(1.0 / (float)v15) * v45;
                if (v40 == v30)
                {
                  LODWORD(v40) = v30;
                  goto LABEL_41;
                }
                continue;
              }
            }
          }
        }
        LODWORD(v40) = 0;
        if (v30 > 0) {
          goto LABEL_29;
        }
LABEL_41:
        if ((int)v40 < (int)v17)
        {
          uint64_t v50 = *(void *)(a1 + 216);
          uint64_t v51 = *(unsigned int *)(a1 + 204);
          uint64_t v52 = (int)v40;
          do
          {
            uint64_t v55 = *(int *)(v50 + 4 * v52);
            if ((int)v55 >= v18 || (int)v51 < 1)
            {
              int v53 = 0;
              float v54 = 0.0;
            }
            else
            {
              uint64_t v57 = 0;
              int v53 = 0;
              float v54 = 0.0;
              uint64_t v58 = v29;
              do
              {
                if (v57 + v29 >= v14) {
                  break;
                }
                unint64_t v59 = (*(_DWORD *)(a1 + 200) * v4);
                if ((int)v59 >= 1)
                {
                  unsigned int v60 = (float *)(*(void *)(a1 + 24) + 4 * v55 + **(void **)(a1 + 80) * v58);
                  unint64_t v61 = v4;
                  do
                  {
                    float v54 = v54 + *v60;
                    ++v53;
                    if (v61 >= v59) {
                      break;
                    }
                    int v62 = *(_DWORD *)(v50 + 4 * v52) + v61;
                    unsigned int v60 = (float *)((char *)v60 + v22);
                    v61 += v4;
                  }
                  while (v62 < v18);
                }
                ++v57;
                ++v58;
              }
              while (v57 != v51);
            }
            *((float *)v27 + v52++) = v54 / (float)v53;
          }
          while (v52 != v73);
        }
      }
      ++v9;
    }
    while (v9 < v10[1]);
  }
}

uint64_t sub_100377B14(uint64_t a1)
{
  *(void *)a1 = off_10049B830;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100377C50(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_10049B870;
  *(_OWORD *)(a1 + 24) = v13;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v14) {
    atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    int v15 = *(void **)(a2 + 72);
    uint64_t v16 = *(void **)(a1 + 80);
    void *v16 = *v15;
    v16[1] = v15[1];
  }
  long long v17 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v19 = *(void *)(a3 + 48);
  uint64_t v18 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v19;
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v17;
  if (v18) {
    atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v20 = *(void **)(a3 + 72);
    signed int v21 = *(void **)(a1 + 176);
    void *v21 = *v20;
    v21[1] = v20[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = a6;
  *(void *)(a1 + 216) = a7;
  return a1;
}

void sub_100377DB0(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100377DCC(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100377DE0(uint64_t a1)
{
  sub_10037815C(a1);

  operator delete();
}

void sub_100377E18(uint64_t a1, int *a2)
{
  int v2 = a2[1];
  uint64_t v56 = *a2;
  if (v2 > (int)v56)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    int v5 = *(int **)(a1 + 72);
    unint64_t v6 = *(unsigned int *)(a1 + 8);
    uint64_t v7 = ((v6 >> 3) & 0x1FF) + 1;
    int v8 = *(_DWORD *)(a1 + 200);
    uint64_t v9 = *(int *)(a1 + 204);
    uint64_t v10 = *(unsigned int *)(a1 + 204);
    int v11 = v9 * v8;
    int v12 = v5[1];
    uint64_t v13 = *v5;
    uint64_t v14 = (v12 / v8 * v7);
    uint64_t v15 = (v7 * *(_DWORD *)(*(void *)(a1 + 168) + 4));
    int v16 = v7 * v12;
    uint64_t v17 = *(void *)(a1 + 120);
    uint64_t v18 = *(void *)(a1 + 184);
    double v19 = (float)(1.0 / (float)(v9 * v8));
    uint64_t v52 = v18;
    uint64_t v20 = (int)v9 * v8 - 4;
    signed int v21 = ((v9 * v8 - 4) & 0xFFFFFFFC) + 4;
    uint64_t v22 = (int)v7 * v8;
    int v58 = v2 - v56;
    uint64_t v60 = (int)v56 * (uint64_t)(int)v9;
    uint64_t v23 = 8 * ((v6 >> 3) & 0x1FF) + 8;
    uint64_t v24 = *a2;
    uint64_t v54 = v14;
    uint64_t v53 = v17;
    do
    {
      uint64_t v25 = v24 * v9;
      uint64_t v59 = v24;
      if (v24 * v9 >= v13)
      {
        if ((int)v15 >= 1)
        {
          uint64_t v57 = v4;
          bzero((void *)(v17 + v18 * (v4 + v56)), 8 * v15);
          signed int v21 = ((v11 - 4) & 0xFFFFFFFC) + 4;
          uint64_t v18 = v52;
          uint64_t v17 = v53;
          uint64_t v14 = v54;
          uint64_t v3 = a1;
          uint64_t v4 = v57;
        }
        goto LABEL_3;
      }
      uint64_t v26 = v17 + v18 * v24;
      uint64_t v27 = *(void *)(v3 + 24);
      uint64_t v28 = **(void **)(v3 + 80);
      if (v25 > v13 - v9 || (int)v14 < 1)
      {
        LODWORD(v30) = 0;
        if ((int)v15 > 0) {
          goto LABEL_25;
        }
        goto LABEL_3;
      }
      uint64_t v31 = 0;
      uint64_t v32 = *(void *)(v3 + 216);
      do
      {
        uint64_t v33 = v27 + v28 * v25 + 8 * *(int *)(v32 + 4 * v31);
        if (v11 < 4)
        {
          signed int v34 = 0;
          double v35 = 0.0;
          if (v11 <= 0) {
            goto LABEL_14;
          }
LABEL_21:
          uint64_t v38 = (int *)(*(void *)(v3 + 208) + 4 * v34);
          do
          {
            uint64_t v39 = *v38++;
            double v35 = v35 + *(double *)(v33 + 8 * v39);
            ++v34;
          }
          while (v11 > v34);
          goto LABEL_14;
        }
        uint64_t v36 = 0;
        double v35 = 0.0;
        do
        {
          float32x4_t v37 = (int *)(*(void *)(v3 + 208) + 4 * v36);
          double v35 = v35
              + *(double *)(v33 + 8 * *v37)
              + *(double *)(v33 + 8 * v37[1])
              + *(double *)(v33 + 8 * v37[2])
              + *(double *)(v33 + 8 * v37[3]);
          v36 += 4;
        }
        while (v36 <= v20);
        signed int v34 = v21;
        if (v21 < v11) {
          goto LABEL_21;
        }
LABEL_14:
        *(double *)(v26 + 8 * v31++) = v35 * v19;
      }
      while (v31 != v14);
      LODWORD(v30) = v14;
      if ((int)v14 < (int)v15)
      {
LABEL_25:
        uint64_t v40 = *(void *)(v3 + 216);
        uint64_t v30 = v30;
        uint64_t v41 = v27 + v28 * v60;
        do
        {
          uint64_t v44 = *(int *)(v40 + 4 * v30);
          if ((int)v44 >= v16) {
            *(void *)(v26 + 8 * v30) = 0;
          }
          double v45 = 0.0;
          if ((int)v9 < 1)
          {
            int v42 = 0;
          }
          else
          {
            int v42 = 0;
            if ((int)v22 >= 1 && (int)v44 < v16)
            {
              uint64_t v46 = 0;
              int v42 = 0;
              int v47 = v44;
              unint64_t v48 = (double *)(v41 + 8 * v44);
              do
              {
                if (v46 + v25 >= v13) {
                  break;
                }
                uint64_t v49 = v7;
                uint64_t v50 = v48;
                do
                {
                  double v45 = v45 + *v50;
                  ++v42;
                  if (v49 >= v22) {
                    break;
                  }
                  int v51 = v47 + v49;
                  uint64_t v50 = (double *)((char *)v50 + v23);
                  v49 += v7;
                }
                while (v51 < v16);
                ++v46;
                unint64_t v48 = (double *)((char *)v48 + v28);
              }
              while (v46 != v10);
            }
          }
          float v43 = v45;
          *(double *)(v26 + 8 * v30++) = (float)(v43 / (float)v42);
        }
        while (v30 != v15);
      }
LABEL_3:
      uint64_t v24 = v59 + 1;
      ++v4;
      v60 += v9;
    }
    while (v58 != v4);
  }
}

uint64_t sub_10037815C(uint64_t a1)
{
  *(void *)a1 = off_10049B870;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

void sub_100378298(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unsigned char *sub_1003782D0(uint64_t a1, int *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v8 = *(unsigned int **)(a1 + 16);
  unint64_t v9 = *v8;
  uint64_t v126 = (v9 >> 3) & 0x1FF;
  unsigned int v10 = v126 + 1;
  uint64_t v11 = ((int)v126 + 1) * (uint64_t)*(int *)(*((void *)v8 + 8) + 4);
  uint64_t v128 = v11;
  uint64_t v129 = a1;
  if ((2 * v11) >= 0x109) {
    operator new[]();
  }
  uint64_t v12 = *(unsigned int *)(a1 + 40);
  uint64_t v13 = &v136[4 * v11];
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(int *)(v14 + 4 * *a2);
  uint64_t v133 = *(int *)(v14 + 4 * a2[1]);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v17 = *(unsigned int *)(*(void *)(a1 + 32) + 12 * (int)v15 + 4);
  uint64_t v127 = v16;
  float32x4_t v120 = v13;
  if ((int)v11 >= 1)
  {
    uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 32) + 12 * (int)v15 + 4);
    bzero(v13, 4 * v11);
    uint64_t v13 = v120;
    uint64_t v17 = v18;
    uint64_t v16 = v127;
    uint64_t v11 = v128;
    a1 = v129;
  }
  if ((int)v15 < (int)v133)
  {
    uint64_t v19 = v10;
    uint64_t v131 = 4 * v11;
    uint64_t v20 = &v136[4 * ((v9 >> 3) & 0x1FF) + 4];
    uint64_t v135 = v10 & 0x3F0;
    BOOL v21 = v13 >= &v136[v131] || v136 >= &v136[4 * v11 + 4 * v11];
    uint64_t v124 = v11;
    uint64_t v122 = v11 & 0xFFFFFFF8;
    char v23 = !v21 || v11 < 8;
    char v123 = v23;
    float64x2_t v130 = (float *)(v16 + 8);
    uint64_t v125 = v10 & 0x3F8;
    uint64_t v24 = v11;
    int8x16_t v25 = (int8x16_t)xmmword_1004048A0;
    int8x16_t v26 = (int8x16_t)xmmword_100404890;
    int8x16_t v27 = (int8x16_t)xmmword_1004048C0;
    int8x16_t v28 = (int8x16_t)xmmword_1004048B0;
    unsigned int v29 = (v9 >> 3) & 0x1FF;
    uint64_t v121 = ((v9 >> 3) & 0x1FF) + 1;
    uint64_t v132 = v12;
    while (1)
    {
      uint64_t v31 = (int *)(*(void *)(a1 + 32) + 12 * v15);
      LODWORD(v6) = v31[2];
      uint64_t v30 = v31[1];
      uint64_t v32 = *v31;
      uint64_t v33 = *(void *)(a1 + 8);
      uint64_t v34 = *(void *)(v33 + 16);
      uint64_t v35 = **(void **)(v33 + 72);
      if ((int)v11 >= 1)
      {
        uint64_t v36 = v19;
        uint64_t v37 = v30;
        uint64_t v38 = v15;
        uint64_t v39 = v17;
        long long v134 = v6;
        bzero(v136, v131);
        long long v6 = v134;
        int8x16_t v28 = (int8x16_t)xmmword_1004048B0;
        int8x16_t v27 = (int8x16_t)xmmword_1004048C0;
        int8x16_t v26 = (int8x16_t)xmmword_100404890;
        int8x16_t v25 = (int8x16_t)xmmword_1004048A0;
        uint64_t v17 = v39;
        uint64_t v15 = v38;
        uint64_t v30 = v37;
        uint64_t v19 = v36;
        unsigned int v29 = v126;
        uint64_t v16 = v127;
        LODWORD(v11) = v128;
        a1 = v129;
      }
      uint64_t v40 = v34 + v35 * v32;
      switch(v29)
      {
        case 0u:
          uint64_t v41 = v132;
          int v42 = v130;
          if ((int)v132 >= 1)
          {
            do
            {
              a4.i8[0] = *(unsigned char *)(v40 + *((int *)v42 - 2));
              uint64_t v43 = 4 * *((int *)v42 - 1);
              a5.i32[0] = *(_DWORD *)&v136[v43];
              a4.f32[0] = (float)a4.u32[0];
              *(float *)&v136[v43] = a5.f32[0] + (float)(a4.f32[0] * *v42);
              v42 += 3;
              --v41;
            }
            while (v41);
          }
          goto LABEL_56;
        case 1u:
          uint64_t v69 = v132;
          int v70 = v130;
          if ((int)v132 >= 1)
          {
            do
            {
              uint64_t v71 = *((int *)v70 - 2);
              uint64_t v72 = *((int *)v70 - 1);
              float v73 = *v70;
              v70 += 3;
              float32x4x2_t v74 = (unsigned int *)&v136[4 * v72];
              float32x4x2_t v75 = (unsigned __int8 *)(v40 + v71);
              a4.i8[0] = *v75;
              unsigned int v76 = *v74;
              a6.i32[0] = v74[1];
              a4.f32[0] = *(float *)v74 + (float)((float)a4.u32[0] * v73);
              LOBYTE(v76) = v75[1];
              a5.f32[0] = (float)v76;
              *float32x4x2_t v74 = a4.i32[0];
              *((float *)v74 + 1) = a6.f32[0] + (float)(a5.f32[0] * v73);
              --v69;
            }
            while (v69);
          }
          goto LABEL_56;
        case 2u:
          uint64_t v77 = v132;
          unint64_t v78 = v130;
          if ((int)v132 >= 1)
          {
            do
            {
              uint64_t v79 = *((int *)v78 - 2);
              uint64_t v80 = *((int *)v78 - 1);
              float v81 = *v78;
              v78 += 3;
              uint64_t v82 = 4 * v80;
              uint64_t v83 = (unsigned __int8 *)(v40 + v79);
              a5.i8[0] = *v83;
              a4.f32[0] = *(float *)&v136[4 * v80] + (float)((float)a5.u32[0] * v81);
              uint64_t v84 = 4 * ((int)v80 + 1);
              a6.i8[0] = v83[1];
              *(float *)&unsigned int v85 = (float)a6.u32[0];
              uint64_t v86 = 4 * ((int)v80 + 2);
              a5.f32[0] = *(float *)&v136[v84] + (float)(*(float *)&v85 * v81);
              LOBYTE(v85) = v83[2];
              a6.f32[0] = (float)v85;
              float v87 = *(float *)&v136[v86] + (float)(a6.f32[0] * v81);
              *(_DWORD *)&v136[v82] = a4.i32[0];
              *(_DWORD *)&v136[v84] = a5.i32[0];
              *(float *)&v136[v86] = v87;
              --v77;
            }
            while (v77);
          }
          goto LABEL_56;
        case 3u:
          uint64_t v88 = v132;
          uint64_t v89 = v130;
          if ((int)v132 >= 1)
          {
            do
            {
              uint64_t v90 = *((int *)v89 - 2);
              uint64_t v91 = *((int *)v89 - 1);
              float v92 = *v89;
              v89 += 3;
              float32x4_t v93 = (unsigned __int8 *)(v40 + v90);
              a5.i8[0] = *v93;
              float v94 = *(float *)&v136[4 * v91] + (float)((float)a5.u32[0] * v92);
              uint64_t v95 = 4 * ((int)v91 + 1);
              a6.i8[0] = v93[1];
              *(float *)&unsigned int v96 = (float)a6.u32[0];
              *(float *)&unsigned int v97 = *(float *)&v136[v95] + (float)(*(float *)&v96 * v92);
              *(float *)&v136[4 * v91] = v94;
              uint64_t v98 = 4 * ((int)v91 + 2);
              *(float *)&v136[v95] = *(float *)&v97;
              LOBYTE(v97) = v93[2];
              float v99 = *(float *)&v136[v98] + (float)((float)v97 * v92);
              uint64_t v100 = 4 * ((int)v91 + 3);
              a5.i32[0] = *(_DWORD *)&v136[v100];
              LOBYTE(v96) = v93[3];
              a6.f32[0] = (float)v96;
              a4.f32[0] = a5.f32[0] + (float)(a6.f32[0] * v92);
              *(float *)&v136[v98] = v99;
              *(_DWORD *)&v136[v100] = a4.i32[0];
              --v88;
            }
            while (v88);
          }
          goto LABEL_56;
        default:
          if ((int)v132 >= 1)
          {
            uint64_t v44 = 0;
            uint64_t v45 = v34 + v35 * v32;
            do
            {
              uint64_t v46 = (int *)(v16 + 12 * v44);
              uint64_t v47 = *v46;
              uint64_t v48 = v46[1];
              a3.i32[0] = v46[2];
              if (v29 >= 7
                && ((unint64_t)&v136[4 * v48] < v45 + v19 + v47
                  ? (BOOL v49 = v40 + v47 >= (unint64_t)&v20[4 * v48])
                  : (BOOL v49 = 1),
                    v49))
              {
                if (v29 < 0xF)
                {
                  uint64_t v50 = 0;
LABEL_35:
                  a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                  int v51 = (unint64_t *)(v45 + v50 + v47);
                  uint64_t v52 = (float32x4_t *)&v136[4 * v50 + 4 * v48];
                  uint64_t v53 = v50 - v125;
                  do
                  {
                    unint64_t v54 = *v51++;
                    a5.i64[0] = v54;
                    uint32x4_t v55 = (uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v25);
                    a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v26));
                    a6 = vcvtq_f32_u32(v55);
                    float32x4_t v56 = vmlaq_f32(v52[1], a4, a6);
                    *uint64_t v52 = vmlaq_f32(*v52, a4, a5);
                    v52[1] = v56;
                    v52 += 2;
                    v53 += 8;
                  }
                  while (v53);
                  uint64_t v57 = v125;
                  if (v125 == v19) {
                    goto LABEL_26;
                  }
                  goto LABEL_40;
                }
                a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                int v62 = (int8x16_t *)(v45 + v47);
                int v63 = (float32x4_t *)&v136[4 * v48];
                uint64_t v64 = v135;
                do
                {
                  int8x16_t v65 = *v62++;
                  a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v65, v28));
                  a6 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v65, v25));
                  float32x4_t v66 = *v63;
                  float32x4_t v67 = vmlaq_f32(v63[1], a4, a6);
                  float32x4_t v68 = vmlaq_f32(v63[3], a4, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v65, v27)));
                  v63[2] = vmlaq_f32(v63[2], a4, a5);
                  v63[3] = v68;
                  *int v63 = vmlaq_f32(v66, a4, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v65, v26)));
                  v63[1] = v67;
                  v63 += 4;
                  v64 -= 16;
                }
                while (v64);
                if (v135 == v19) {
                  goto LABEL_26;
                }
                uint64_t v57 = v135;
                uint64_t v50 = v135;
                if ((v19 & 8) != 0) {
                  goto LABEL_35;
                }
              }
              else
              {
                uint64_t v57 = 0;
              }
LABEL_40:
              int v58 = (unsigned __int32 *)&v136[4 * v57 + 4 * v48];
              uint64_t v59 = (unsigned __int8 *)(v45 + v57 + v47);
              uint64_t v60 = v121 - v57;
              do
              {
                unsigned int v61 = *v59++;
                a5.i32[0] = *v58;
                a4.f32[0] = *(float *)v58 + (float)((float)v61 * a3.f32[0]);
                *v58++ = a4.i32[0];
                --v60;
              }
              while (v60);
LABEL_26:
              ++v44;
            }
            while (v44 != v132);
          }
LABEL_56:
          if (v30 != v17)
          {
            if ((int)v11 >= 1)
            {
              BOOL v102 = (unsigned char *)(*(void *)(*(void *)(a1 + 16) + 16)
                             + **(void **)(*(void *)(a1 + 16) + 72) * (int)v17);
              uint64_t v103 = v131;
              BOOL v104 = (float *)v136;
              do
              {
                float v105 = rintf(v104[v24]);
                int v106 = (uint64_t)v105 & ~((int)(uint64_t)v105 >> 31);
                if (v106 >= 255) {
                  LOBYTE(v106) = -1;
                }
                *v102++ = v106;
                v104[v24] = *(float *)&v6 * *v104;
                ++v104;
                v103 -= 4;
              }
              while (v103);
            }
            goto LABEL_17;
          }
          if ((int)v11 < 1) {
            goto LABEL_16;
          }
          if (v123)
          {
            uint64_t v101 = 0;
          }
          else
          {
            a3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v6, 0);
            uint64_t v107 = v122;
            float32x4_t v108 = (float32x4_t *)v136;
            do
            {
              a4 = *v108;
              a5 = v108[1];
              uint64_t v109 = (float32x4_t *)((char *)v108 + v24 * 4);
              a6 = vmlaq_f32(*(float32x4_t *)((char *)v108 + v24 * 4), *v108, a3);
              float32x4_t v110 = vmlaq_f32(*(float32x4_t *)((char *)v108 + v24 * 4 + 16), a5, a3);
              float32x4_t *v109 = a6;
              v109[1] = v110;
              v108 += 2;
              v107 -= 8;
            }
            while (v107);
            uint64_t v101 = v122;
            if (v122 == v124) {
              goto LABEL_16;
            }
          }
          float64x2_t v111 = (unsigned __int32 *)&v136[4 * v101];
          uint64_t v112 = v124 - v101;
          do
          {
            a4.i32[0] = *v111;
            *(float *)&v111[v24] = *(float *)&v111[v24] + (float)(*(float *)&v6 * *(float *)v111);
            ++v111;
            --v112;
          }
          while (v112);
LABEL_16:
          uint64_t v30 = v17;
LABEL_17:
          ++v15;
          uint64_t v17 = v30;
          if (v15 == v133) {
            goto LABEL_73;
          }
          break;
      }
    }
  }
  LODWORD(v30) = v17;
LABEL_73:
  float64x2_t v113 = (float *)v120;
  if ((int)v11 >= 1)
  {
    float64x2_t v114 = (unsigned char *)(*(void *)(*(void *)(a1 + 16) + 16) + **(void **)(*(void *)(a1 + 16) + 72) * (int)v30);
    uint64_t v115 = 4 * v11;
    do
    {
      float v116 = *v113++;
      float v117 = rintf(v116);
      int v118 = (uint64_t)v117 & ~((int)(uint64_t)v117 >> 31);
      if (v118 >= 255) {
        LOBYTE(v118) = -1;
      }
      *v114++ = v118;
      v115 -= 4;
    }
    while (v115);
  }
  return v136;
}

void sub_100378A00(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100378A38(uint64_t a1, int *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v8 = *(unsigned int **)(a1 + 16);
  unint64_t v9 = *v8;
  uint64_t v10 = (v9 >> 3) & 0x1FF;
  unsigned int v11 = v10 + 1;
  uint64_t result = ((int)v10 + 1) * (uint64_t)*(int *)(*((void *)v8 + 8) + 4);
  uint64_t v113 = result;
  if ((2 * result) >= 0x109) {
    operator new[]();
  }
  uint64_t v13 = *(unsigned int *)(a1 + 40);
  uint64_t v14 = (float *)&v120[4 * result];
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = *(int *)(v15 + 4 * *a2);
  uint64_t v118 = *(int *)(v15 + 4 * a2[1]);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v117 = *(void *)(a1 + 32);
  uint64_t v18 = *(unsigned int *)(v117 + 12 * (int)v16 + 4);
  uint64_t v112 = v17;
  if ((int)result >= 1)
  {
    uint64_t v19 = *(unsigned int *)(v117 + 12 * (int)v16 + 4);
    bzero(&v120[4 * result], 4 * result);
    uint64_t v18 = v19;
    uint64_t v17 = v112;
    uint64_t result = v113;
  }
  uint64_t v103 = v14;
  if ((int)v16 < (int)v118)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = *(void *)(v20 + 16);
    uint64_t v22 = *(uint64_t **)(v20 + 72);
    uint64_t v23 = v11;
    uint64_t v111 = 4 * result;
    uint64_t v24 = v11 & 0x3F0;
    BOOL v25 = v14 >= (float *)&v120[v111] || v120 >= &v120[4 * result + 4 * result];
    uint64_t v115 = v21;
    uint64_t v116 = *v22;
    uint64_t v109 = result;
    char v27 = !v25 || result < 8;
    char v108 = v27;
    float64x2_t v114 = (float *)(v17 + 8);
    uint64_t v106 = result & 0xFFFFFFF8;
    uint64_t v107 = 2 * result;
    uint64_t v28 = result;
    uint64_t v105 = ((v9 >> 3) & 0x1FF) + 1;
    uint64_t v104 = v21 + 16;
    while (1)
    {
      uint64_t v30 = v24;
      uint64_t v31 = (int *)(v117 + 12 * v16);
      LODWORD(v7) = v31[2];
      uint64_t v29 = v31[1];
      uint64_t v32 = *v31;
      if ((int)result >= 1)
      {
        uint64_t v33 = v13;
        uint64_t v34 = v10;
        uint64_t v35 = v18;
        long long v119 = v7;
        bzero(v120, v111);
        long long v7 = v119;
        uint64_t v18 = v35;
        uint64_t v10 = v34;
        uint64_t v13 = v33;
        uint64_t v17 = v112;
        uint64_t result = v113;
      }
      uint64_t v36 = v116 * v32;
      uint64_t v37 = v115 + v116 * v32;
      switch((int)v10)
      {
        case 0:
          uint64_t v38 = v13;
          uint64_t v39 = v114;
          uint64_t v24 = v30;
          if ((int)v13 >= 1)
          {
            do
            {
              a4.i16[0] = *(_WORD *)(v37 + 2 * *((int *)v39 - 2));
              uint64_t v40 = 4 * *((int *)v39 - 1);
              a5.i32[0] = *(_DWORD *)&v120[v40];
              a4.f32[0] = (float)a4.u32[0];
              *(float *)&v120[v40] = a5.f32[0] + (float)(a4.f32[0] * *v39);
              v39 += 3;
              --v38;
            }
            while (v38);
          }
          goto LABEL_43;
        case 1:
          uint64_t v59 = v13;
          uint64_t v60 = v114;
          uint64_t v24 = v30;
          if ((int)v13 >= 1)
          {
            do
            {
              uint64_t v61 = *((int *)v60 - 2);
              uint64_t v62 = *((int *)v60 - 1);
              float v63 = *v60;
              v60 += 3;
              uint64_t v64 = (unsigned int *)&v120[4 * v62];
              int8x16_t v65 = (unsigned __int16 *)(v37 + 2 * v61);
              a4.i16[0] = *v65;
              unsigned int v66 = *v64;
              a6.i32[0] = v64[1];
              a4.f32[0] = *(float *)v64 + (float)((float)a4.u32[0] * v63);
              LOWORD(v66) = v65[1];
              a5.f32[0] = (float)v66;
              *uint64_t v64 = a4.i32[0];
              *((float *)v64 + 1) = a6.f32[0] + (float)(a5.f32[0] * v63);
              --v59;
            }
            while (v59);
          }
          goto LABEL_43;
        case 2:
          uint64_t v67 = v13;
          float32x4_t v68 = v114;
          uint64_t v24 = v30;
          if ((int)v13 >= 1)
          {
            do
            {
              uint64_t v69 = *((int *)v68 - 2);
              uint64_t v70 = *((int *)v68 - 1);
              float v71 = *v68;
              v68 += 3;
              uint64_t v72 = 4 * v70;
              a5.i16[0] = *(_WORD *)(v37 + 2 * v69);
              a4.f32[0] = *(float *)&v120[4 * v70] + (float)((float)a5.u32[0] * v71);
              uint64_t v73 = 4 * ((int)v70 + 1);
              a6.i16[0] = *(_WORD *)(v37 + 2 * ((int)v69 + 1));
              a5.f32[0] = *(float *)&v120[v73] + (float)((float)a6.u32[0] * v71);
              uint64_t v74 = 4 * ((int)v70 + 2);
              a6.i32[0] = *(_DWORD *)&v120[v74];
              a7.i16[0] = *(_WORD *)(v37 + 2 * ((int)v69 + 2));
              a7.f32[0] = (float)a7.u32[0];
              *(_DWORD *)&v120[v72] = a4.i32[0];
              *(_DWORD *)&v120[v73] = a5.i32[0];
              *(float *)&v120[v74] = a6.f32[0] + (float)(a7.f32[0] * v71);
              --v67;
            }
            while (v67);
          }
          goto LABEL_43;
        case 3:
          uint64_t v75 = v13;
          unsigned int v76 = v114;
          uint64_t v24 = v30;
          if ((int)v13 >= 1)
          {
            do
            {
              uint64_t v77 = *((int *)v76 - 2);
              uint64_t v78 = *((int *)v76 - 1);
              float v79 = *v76;
              v76 += 3;
              a5.i16[0] = *(_WORD *)(v37 + 2 * v77);
              uint64_t v80 = 4 * ((int)v78 + 1);
              a7.i16[0] = *(_WORD *)(v37 + 2 * ((int)v77 + 1));
              a7.f32[0] = (float)a7.u32[0];
              float v81 = *(float *)&v120[4 * v78] + (float)((float)a5.u32[0] * v79);
              *(float *)&unsigned int v82 = *(float *)&v120[v80] + (float)(a7.f32[0] * v79);
              *(float *)&v120[4 * v78] = v81;
              *(float *)&v120[v80] = *(float *)&v82;
              uint64_t v83 = 4 * ((int)v78 + 2);
              LOWORD(v82) = *(_WORD *)(v37 + 2 * ((int)v77 + 2));
              uint64_t v84 = 4 * ((int)v78 + 3);
              a6.i32[0] = *(_DWORD *)&v120[v84];
              *(float *)&unsigned int v85 = (float)v82;
              a4.f32[0] = *(float *)&v120[v83] + (float)(*(float *)&v85 * v79);
              LOWORD(v85) = *(_WORD *)(v37 + 2 * ((int)v77 + 3));
              a5.f32[0] = (float)v85;
              *(_DWORD *)&v120[v83] = a4.i32[0];
              *(float *)&v120[v84] = a6.f32[0] + (float)(a5.f32[0] * v79);
              --v75;
            }
            while (v75);
          }
          goto LABEL_43;
        default:
          uint64_t v24 = v30;
          if ((int)v13 >= 1)
          {
            uint64_t v41 = 0;
            uint64_t v42 = v104 + v36;
            uint64_t v43 = v115 + v36;
            do
            {
              uint64_t v44 = (int *)(v17 + 12 * v41);
              uint64_t v45 = *v44;
              uint64_t v46 = v44[1];
              a3.i32[0] = v44[2];
              if (v10 >= 0xF)
              {
                a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                uint64_t v48 = (uint16x4_t *)(v42 + 2 * v45);
                uint64_t v49 = v30;
                uint64_t v50 = (float32x4_t *)&v120[4 * v46 + 32];
                do
                {
                  uint16x8_t v51 = *(uint16x8_t *)v48[-2].i8;
                  a7 = vcvtq_f32_u32(vmovl_high_u16(v51));
                  a5 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v51.i8));
                  a6 = vcvtq_f32_u32(vmovl_u16(*v48));
                  float32x4_t v52 = vmlaq_f32(v50[-1], a4, a7);
                  float32x4_t v53 = vmlaq_f32(*v50, a4, a6);
                  float32x4_t v54 = vmlaq_f32(v50[1], a4, vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v48->i8)));
                  v50[-2] = vmlaq_f32(v50[-2], a4, a5);
                  v50[-1] = v52;
                  *uint64_t v50 = v53;
                  v50[1] = v54;
                  v50 += 4;
                  v48 += 4;
                  v49 -= 16;
                }
                while (v49);
                uint64_t v47 = v30;
                if (v30 == v23) {
                  goto LABEL_26;
                }
              }
              else
              {
                uint64_t v47 = 0;
              }
              uint32x4_t v55 = (unsigned __int32 *)&v120[4 * v47 + 4 * v46];
              float32x4_t v56 = (unsigned __int16 *)(v43 + 2 * (v47 + v45));
              uint64_t v57 = v105 - v47;
              do
              {
                unsigned int v58 = *v56++;
                a5.i32[0] = *v55;
                a4.f32[0] = *(float *)v55 + (float)((float)v58 * a3.f32[0]);
                *v55++ = a4.i32[0];
                --v57;
              }
              while (v57);
LABEL_26:
              ++v41;
            }
            while (v41 != v13);
          }
LABEL_43:
          if (v29 != v18)
          {
            if ((int)result >= 1)
            {
              float v87 = (_WORD *)(*(void *)(*(void *)(a1 + 16) + 16)
                            + **(void **)(*(void *)(a1 + 16) + 72) * (int)v18);
              uint64_t v88 = v107;
              uint64_t v89 = (float *)v120;
              do
              {
                float v90 = rintf(v89[v28]);
                int v91 = (uint64_t)v90 & ~((int)(uint64_t)v90 >> 31);
                if (v91 >= 0xFFFF) {
                  LOWORD(v91) = -1;
                }
                *v87++ = v91;
                v89[v28] = *(float *)&v7 * *v89;
                ++v89;
                v88 -= 2;
              }
              while (v88);
            }
            goto LABEL_17;
          }
          if ((int)result < 1) {
            goto LABEL_16;
          }
          if (v108)
          {
            uint64_t v86 = 0;
          }
          else
          {
            a3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v7, 0);
            uint64_t v92 = v106;
            float32x4_t v93 = (float32x4_t *)v120;
            do
            {
              a4 = *v93;
              a5 = v93[1];
              float v94 = (__n128 *)((char *)v93 + v28 * 4);
              a6 = vmlaq_f32(*(float32x4_t *)((char *)v93 + v28 * 4), *v93, a3);
              a7 = vmlaq_f32(*(float32x4_t *)((char *)v93 + v28 * 4 + 16), a5, a3);
              *float v94 = (__n128)a6;
              v94[1] = (__n128)a7;
              v93 += 2;
              v92 -= 8;
            }
            while (v92);
            uint64_t v86 = v106;
            if (v106 == v109) {
              goto LABEL_16;
            }
          }
          uint64_t v95 = (unsigned __int32 *)&v120[4 * v86];
          uint64_t v96 = v109 - v86;
          do
          {
            a4.i32[0] = *v95;
            *(float *)&v95[v28] = *(float *)&v95[v28] + (float)(*(float *)&v7 * *(float *)v95);
            ++v95;
            --v96;
          }
          while (v96);
LABEL_16:
          uint64_t v29 = v18;
LABEL_17:
          ++v16;
          uint64_t v18 = v29;
          if (v16 == v118) {
            goto LABEL_60;
          }
          break;
      }
    }
  }
  LODWORD(v29) = v18;
LABEL_60:
  unsigned int v97 = v103;
  if ((int)result >= 1)
  {
    uint64_t v98 = (_WORD *)(*(void *)(*(void *)(a1 + 16) + 16) + **(void **)(*(void *)(a1 + 16) + 72) * (int)v29);
    uint64_t v99 = 2 * result;
    do
    {
      float v100 = *v97++;
      float v101 = rintf(v100);
      int v102 = (uint64_t)v101 & ~((int)(uint64_t)v101 >> 31);
      if (v102 >= 0xFFFF) {
        LOWORD(v102) = -1;
      }
      *v98++ = v102;
      v99 -= 2;
    }
    while (v99);
  }
  return result;
}

void sub_1003790B8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unint64_t sub_1003790F0(uint64_t a1, int *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, float32x4_t a8)
{
  unint64_t v9 = *(unsigned int **)(a1 + 16);
  unint64_t v10 = *v9;
  uint64_t v113 = (v10 >> 3) & 0x1FF;
  unsigned int v11 = v113 + 1;
  uint64_t v12 = ((int)v113 + 1) * (uint64_t)*(int *)(*((void *)v9 + 8) + 4);
  uint64_t v116 = v12;
  if ((2 * v12) >= 0x109) {
    operator new[]();
  }
  uint64_t v13 = *(unsigned int *)(a1 + 40);
  unint64_t result = (unint64_t)&v123[4 * v12];
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = *(int *)(v15 + 4 * *a2);
  uint64_t v121 = *(int *)(v15 + 4 * a2[1]);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v120 = *(void *)(a1 + 32);
  uint64_t v18 = *(unsigned int *)(v120 + 12 * (int)v16 + 4);
  uint64_t v114 = *(unsigned int *)(a1 + 40);
  uint64_t v115 = v17;
  uint64_t v106 = (float *)result;
  if ((int)v12 >= 1)
  {
    uint64_t v19 = *(unsigned int *)(v120 + 12 * (int)v16 + 4);
    bzero((void *)result, 4 * v12);
    unint64_t result = (unint64_t)v106;
    uint64_t v13 = v114;
    uint64_t v17 = v115;
    uint64_t v18 = v19;
    uint64_t v12 = v116;
  }
  if ((int)v16 < (int)v121)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = *(void *)(v20 + 16);
    uint64_t v22 = v11;
    uint64_t v112 = 4 * v12;
    uint64_t v23 = *(uint64_t **)(v20 + 72);
    uint64_t v24 = v11 & 0x3F0;
    BOOL v25 = result >= (unint64_t)&v123[v112] || v123 >= &v123[4 * v12 + 4 * v12];
    uint64_t v118 = v21;
    uint64_t v119 = *v23;
    uint64_t v110 = v12;
    char v27 = !v25 || v12 < 8;
    char v109 = v27;
    uint64_t v117 = (float *)(v17 + 8);
    uint64_t v105 = v21 + 16;
    uint64_t v28 = ((v10 >> 3) & 0x1FF) + 1;
    uint64_t v107 = v12 & 0xFFFFFFF8;
    uint64_t v108 = 2 * v12;
    uint64_t v29 = v12;
    unint64_t result = 12;
    unsigned int v30 = (v10 >> 3) & 0x1FF;
    while (1)
    {
      uint64_t v32 = (int *)(v120 + 12 * v16);
      LODWORD(v8) = v32[2];
      uint64_t v31 = v32[1];
      uint64_t v33 = *v32;
      if ((int)v12 >= 1)
      {
        uint64_t v34 = v16;
        uint64_t v35 = v32[1];
        uint64_t v36 = v18;
        long long v122 = v8;
        bzero(v123, v112);
        long long v8 = v122;
        unint64_t result = 12;
        unsigned int v30 = v113;
        uint64_t v13 = v114;
        uint64_t v18 = v36;
        uint64_t v31 = v35;
        uint64_t v16 = v34;
        uint64_t v17 = v115;
        LODWORD(v12) = v116;
      }
      uint64_t v37 = v119 * v33;
      uint64_t v38 = v118 + v119 * v33;
      switch(v30)
      {
        case 0u:
          uint64_t v39 = v13;
          uint64_t v40 = v117;
          if ((int)v13 >= 1)
          {
            do
            {
              a4.i16[0] = *(_WORD *)(v38 + 2 * *((int *)v40 - 2));
              a4.i64[0] = vmovl_s16(*(int16x4_t *)a4.f32).u64[0];
              uint64_t v41 = 4 * *((int *)v40 - 1);
              a5.i32[0] = *(_DWORD *)&v123[v41];
              a4.f32[0] = (float)a4.i32[0];
              *(float *)&v123[v41] = a5.f32[0] + (float)(a4.f32[0] * *v40);
              v40 += 3;
              --v39;
            }
            while (v39);
          }
          goto LABEL_43;
        case 1u:
          uint64_t v61 = v13;
          uint64_t v62 = v117;
          if ((int)v13 >= 1)
          {
            do
            {
              uint64_t v63 = *((int *)v62 - 2);
              uint64_t v64 = *((int *)v62 - 1);
              float v65 = *v62;
              v62 += 3;
              unsigned int v66 = (unsigned __int32 *)&v123[4 * v64];
              uint64_t v67 = (unsigned __int16 *)(v38 + 2 * v63);
              a4.i16[0] = *v67;
              a4.i64[0] = vmovl_s16(*(int16x4_t *)a4.f32).u64[0];
              a5.i32[0] = *v66;
              a6.i32[0] = v66[1];
              a4.f32[0] = *(float *)v66 + (float)((float)a4.i32[0] * v65);
              a5.i16[0] = v67[1];
              a5.i64[0] = vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
              a5.f32[0] = (float)a5.i32[0];
              *unsigned int v66 = a4.i32[0];
              *((float *)v66 + 1) = a6.f32[0] + (float)(a5.f32[0] * v65);
              --v61;
            }
            while (v61);
          }
          goto LABEL_43;
        case 2u:
          uint64_t v68 = v13;
          uint64_t v69 = v117;
          if ((int)v13 >= 1)
          {
            do
            {
              uint64_t v70 = *((int *)v69 - 2);
              uint64_t v71 = *((int *)v69 - 1);
              float v72 = *v69;
              v69 += 3;
              uint64_t v73 = 4 * v71;
              a5.i16[0] = *(_WORD *)(v38 + 2 * v70);
              a5.i64[0] = vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
              a4.f32[0] = *(float *)&v123[4 * v71] + (float)((float)a5.i32[0] * v72);
              uint64_t v74 = 4 * ((int)v71 + 1);
              a6.i16[0] = *(_WORD *)(v38 + 2 * ((int)v70 + 1));
              uint64_t v75 = 4 * ((int)v71 + 2);
              a8.i16[0] = *(_WORD *)(v38 + 2 * ((int)v70 + 2));
              a5.f32[0] = *(float *)&v123[v74] + (float)((float)vmovl_s16(*(int16x4_t *)a6.f32).i32[0] * v72);
              a6.i64[0] = vmovl_s16(*(int16x4_t *)a8.f32).u64[0];
              a6.f32[0] = (float)a6.i32[0];
              float v76 = *(float *)&v123[v75] + (float)(a6.f32[0] * v72);
              *(_DWORD *)&v123[v73] = a4.i32[0];
              *(_DWORD *)&v123[v74] = a5.i32[0];
              *(float *)&v123[v75] = v76;
              --v68;
            }
            while (v68);
          }
          goto LABEL_43;
        case 3u:
          uint64_t v77 = v13;
          uint64_t v78 = v117;
          if ((int)v13 >= 1)
          {
            do
            {
              uint64_t v79 = *((int *)v78 - 2);
              uint64_t v80 = *((int *)v78 - 1);
              float v81 = *v78;
              v78 += 3;
              a5.i16[0] = *(_WORD *)(v38 + 2 * v79);
              int16x4_t v82 = (int16x4_t)vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
              *(float *)v82.i32 = (float)v82.i32[0];
              uint64_t v83 = 4 * ((int)v80 + 1);
              float v84 = *(float *)&v123[4 * v80] + (float)(*(float *)v82.i32 * v81);
              v82.i16[0] = *(_WORD *)(v38 + 2 * ((int)v79 + 1));
              int16x4_t v85 = (int16x4_t)vmovl_s16(v82).u64[0];
              *(float *)v85.i32 = *(float *)&v123[v83] + (float)((float)v85.i32[0] * v81);
              *(float *)&v123[4 * v80] = v84;
              uint64_t v86 = 4 * ((int)v80 + 2);
              *(_DWORD *)&v123[v83] = v85.i32[0];
              v85.i16[0] = *(_WORD *)(v38 + 2 * ((int)v79 + 2));
              int16x4_t v87 = (int16x4_t)vmovl_s16(v85).u64[0];
              *(float *)v87.i32 = (float)v87.i32[0];
              uint64_t v88 = 4 * ((int)v80 + 3);
              a6.i32[0] = *(_DWORD *)&v123[v88];
              a4.f32[0] = *(float *)&v123[v86] + (float)(*(float *)v87.i32 * v81);
              v87.i16[0] = *(_WORD *)(v38 + 2 * ((int)v79 + 3));
              a5.i64[0] = vmovl_s16(v87).u64[0];
              a5.f32[0] = (float)a5.i32[0];
              *(_DWORD *)&v123[v86] = a4.i32[0];
              *(float *)&v123[v88] = a6.f32[0] + (float)(a5.f32[0] * v81);
              --v77;
            }
            while (v77);
          }
          goto LABEL_43;
        default:
          if ((int)v13 >= 1)
          {
            uint64_t v42 = 0;
            uint64_t v43 = v105 + v37;
            uint64_t v44 = v118 + v37;
            do
            {
              uint64_t v45 = (int *)(v17 + 12 * v42);
              uint64_t v46 = *v45;
              uint64_t v47 = v45[1];
              a3.i32[0] = v45[2];
              if (v30 >= 0xF)
              {
                a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                uint64_t v49 = (int16x8_t *)(v43 + 2 * v46);
                uint64_t v50 = v24;
                uint16x8_t v51 = (float32x4_t *)&v123[4 * v47 + 32];
                do
                {
                  int16x8_t v52 = v49[-1];
                  float32x4_t v53 = vcvtq_f32_s32(vmovl_high_s16(v52));
                  a5 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v52.i8));
                  a8 = vcvtq_f32_s32(vmovl_high_s16(*v49));
                  a6 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v49->i8));
                  float32x4_t v54 = vmlaq_f32(v51[-1], a4, v53);
                  float32x4_t v55 = vmlaq_f32(*v51, a4, a6);
                  float32x4_t v56 = vmlaq_f32(v51[1], a4, a8);
                  v51[-2] = vmlaq_f32(v51[-2], a4, a5);
                  v51[-1] = v54;
                  *uint16x8_t v51 = v55;
                  v51[1] = v56;
                  v51 += 4;
                  v49 += 2;
                  v50 -= 16;
                }
                while (v50);
                uint64_t v48 = v24;
                if (v24 == v22) {
                  goto LABEL_26;
                }
              }
              else
              {
                uint64_t v48 = 0;
              }
              uint64_t v57 = (unsigned __int32 *)&v123[4 * v48 + 4 * v47];
              unsigned int v58 = (__int16 *)(v44 + 2 * (v48 + v46));
              uint64_t v59 = v28 - v48;
              do
              {
                int v60 = *v58++;
                a5.i32[0] = *v57;
                a4.f32[0] = *(float *)v57 + (float)((float)v60 * a3.f32[0]);
                *v57++ = a4.i32[0];
                --v59;
              }
              while (v59);
LABEL_26:
              ++v42;
            }
            while (v42 != v13);
          }
LABEL_43:
          if (v31 != v18)
          {
            if ((int)v12 >= 1)
            {
              float v90 = (_WORD *)(*(void *)(*(void *)(a1 + 16) + 16)
                            + **(void **)(*(void *)(a1 + 16) + 72) * (int)v18);
              uint64_t v91 = v108;
              uint64_t v92 = (float *)v123;
              do
              {
                uint64_t v93 = (uint64_t)rintf(v92[v29]);
                if ((int)v93 <= -32768) {
                  LODWORD(v93) = -32768;
                }
                if ((int)v93 >= 0x7FFF) {
                  LOWORD(v93) = 0x7FFF;
                }
                *v90++ = v93;
                v92[v29] = *(float *)&v8 * *v92;
                ++v92;
                v91 -= 2;
              }
              while (v91);
            }
            goto LABEL_17;
          }
          if ((int)v12 < 1) {
            goto LABEL_16;
          }
          if (v109)
          {
            uint64_t v89 = 0;
          }
          else
          {
            a3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v8, 0);
            uint64_t v94 = v107;
            uint64_t v95 = (float32x4_t *)v123;
            do
            {
              a4 = *v95;
              a5 = v95[1];
              uint64_t v96 = (float32x4_t *)((char *)v95 + v29 * 4);
              a6 = vmlaq_f32(*(float32x4_t *)((char *)v95 + v29 * 4), *v95, a3);
              float32x4_t v97 = vmlaq_f32(*(float32x4_t *)((char *)v95 + v29 * 4 + 16), a5, a3);
              *uint64_t v96 = a6;
              v96[1] = v97;
              v95 += 2;
              v94 -= 8;
            }
            while (v94);
            uint64_t v89 = v107;
            if (v107 == v110) {
              goto LABEL_16;
            }
          }
          uint64_t v98 = (unsigned __int32 *)&v123[4 * v89];
          uint64_t v99 = v110 - v89;
          do
          {
            a4.i32[0] = *v98;
            *(float *)&v98[v29] = *(float *)&v98[v29] + (float)(*(float *)&v8 * *(float *)v98);
            ++v98;
            --v99;
          }
          while (v99);
LABEL_16:
          uint64_t v31 = v18;
LABEL_17:
          ++v16;
          uint64_t v18 = v31;
          if (v16 == v121) {
            goto LABEL_62;
          }
          break;
      }
    }
  }
  LODWORD(v31) = v18;
LABEL_62:
  float v100 = v106;
  if ((int)v12 >= 1)
  {
    float v101 = (_WORD *)(*(void *)(*(void *)(a1 + 16) + 16) + **(void **)(*(void *)(a1 + 16) + 72) * (int)v31);
    uint64_t v102 = 2 * v12;
    do
    {
      float v103 = *v100++;
      uint64_t v104 = (uint64_t)rintf(v103);
      if ((int)v104 <= -32768) {
        LODWORD(v104) = -32768;
      }
      if ((int)v104 >= 0x7FFF) {
        LOWORD(v104) = 0x7FFF;
      }
      *v101++ = v104;
      v102 -= 2;
    }
    while (v102);
  }
  return result;
}

void sub_100379798(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003797D0(uint64_t a1, int *a2, float32x4_t a3, double a4, double a5, double a6, double a7, double a8, __n128 a9)
{
  unint64_t v10 = *(unsigned int **)(a1 + 16);
  unint64_t v11 = *v10;
  uint64_t v12 = (v11 >> 3) & 0x1FF;
  int v13 = v12 + 1;
  uint64_t v14 = ((int)v12 + 1) * (uint64_t)*(int *)(*((void *)v10 + 8) + 4);
  uint64_t v130 = v14;
  if ((2 * v14) >= 0x109) {
    operator new[]();
  }
  uint64_t v15 = *(unsigned int *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  uint64_t v19 = &v138[4 * v14];
  uint64_t v20 = *(int *)(v16 + 4 * v17);
  uint64_t v21 = *(int *)(v16 + 4 * v18);
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v135 = *(void *)(a1 + 32);
  uint64_t v23 = *(unsigned int *)(v135 + 12 * (int)v20 + 4);
  uint64_t v128 = v22;
  uint64_t v129 = v21;
  if ((int)v14 >= 1)
  {
    bzero(v19, 4 * v14);
    uint64_t v22 = v128;
    uint64_t v21 = v129;
    uint64_t v14 = v130;
  }
  uint64_t v24 = 4 * v14;
  if ((int)v20 < (int)v21)
  {
    uint64_t v25 = *(void *)(a1 + 8);
    uint64_t v26 = *(void *)(v25 + 16);
    uint64_t v131 = v14;
    uint64_t v132 = 4 * v14;
    uint64_t v27 = 4 * ((v11 >> 3) & 0x1FF) + 4;
    uint64_t v134 = **(void **)(v25 + 72);
    uint64_t v28 = &v138[v27];
    uint64_t v120 = v26 + v27;
    BOOL v29 = v14 < 8;
    long long v122 = &v138[4 * v14 + 4 * v14];
    char v123 = v19;
    BOOL v30 = v19 >= &v138[v132] || v138 >= &v138[4 * v14 + 4 * v14];
    int v31 = !v30;
    int v121 = v31;
    uint64_t v127 = v14 & 0xFFFFFFF8;
    if (!v30) {
      BOOL v29 = 1;
    }
    BOOL v125 = v29;
    uint64_t v133 = (float *)(v22 + 8);
    uint64_t v119 = v26 + 16;
    uint64_t v136 = v26;
    uint64_t v124 = ((v11 >> 3) & 0x1FF) + 1;
    while (1)
    {
      uint64_t v33 = v28;
      uint64_t v34 = (int *)(v135 + 12 * v20);
      a9.n128_u32[0] = v34[2];
      uint64_t v32 = v34[1];
      uint64_t v35 = *v34;
      if ((int)v14 >= 1)
      {
        __n128 v137 = a9;
        bzero(v138, v132);
        a9 = v137;
        uint64_t v22 = v128;
        uint64_t v21 = v129;
        uint64_t v14 = v130;
      }
      uint64_t v36 = v134 * v35;
      uint64_t v37 = v136 + v134 * v35;
      switch((int)v12)
      {
        case 0:
          uint64_t v38 = v15;
          uint64_t v39 = v133;
          uint64_t v28 = v33;
          if ((int)v15 >= 1)
          {
            do
            {
              uint64_t v40 = *((int *)v39 - 2);
              uint64_t v41 = 4 * *((int *)v39 - 1);
              float v42 = *v39;
              v39 += 3;
              *(float *)&v138[v41] = *(float *)&v138[v41] + (float)(*(float *)(v37 + 4 * v40) * v42);
              --v38;
            }
            while (v38);
          }
          goto LABEL_48;
        case 1:
          uint64_t v61 = v15;
          uint64_t v62 = v133;
          uint64_t v28 = v33;
          if ((int)v15 >= 1)
          {
            do
            {
              uint64_t v63 = 4 * *((int *)v62 - 1);
              float32x2_t v64 = *(float32x2_t *)(v37 + 4 * *((int *)v62 - 2));
              float v65 = *v62;
              v62 += 3;
              *(float32x2_t *)a3.f32 = vmla_n_f32(*(float32x2_t *)&v138[v63], v64, v65);
              *(void *)&v138[v63] = a3.i64[0];
              --v61;
            }
            while (v61);
          }
          goto LABEL_48;
        case 2:
          uint64_t v66 = v15;
          uint64_t v67 = v133;
          uint64_t v28 = v33;
          if ((int)v15 >= 1)
          {
            do
            {
              uint64_t v68 = *((int *)v67 - 2);
              uint64_t v69 = *((int *)v67 - 1);
              float v70 = *v67;
              v67 += 3;
              uint64_t v71 = (float32x2_t *)&v138[4 * v69];
              float v72 = (float32x2_t *)(v37 + 4 * v68);
              float32_t v73 = v71[1].f32[0] + (float)(v72[1].f32[0] * v70);
              float32x2_t *v71 = vmla_n_f32(*v71, *v72, v70);
              v71[1].f32[0] = v73;
              --v66;
            }
            while (v66);
          }
          goto LABEL_48;
        case 3:
          uint64_t v74 = v15;
          uint64_t v75 = v133;
          uint64_t v28 = v33;
          if ((int)v15 >= 1)
          {
            do
            {
              uint64_t v76 = *((int *)v75 - 2);
              uint64_t v77 = *((int *)v75 - 1);
              float v78 = *v75;
              v75 += 3;
              *(float32x2_t *)&v138[4 * v77] = vmla_n_f32(*(float32x2_t *)&v138[4 * v77], *(float32x2_t *)(v37 + 4 * v76), v78);
              uint64_t v79 = 4 * ((int)v77 + 2);
              uint64_t v80 = 4 * ((int)v77 + 3);
              float v81 = *(float *)&v138[v80] + (float)(*(float *)(v37 + 4 * ((int)v76 + 3)) * v78);
              *(float *)&v138[v79] = *(float *)&v138[v79] + (float)(*(float *)(v37 + 4 * ((int)v76 + 2)) * v78);
              *(float *)&v138[v80] = v81;
              --v74;
            }
            while (v74);
          }
          goto LABEL_48;
        default:
          uint64_t v28 = v33;
          if ((int)v15 >= 1)
          {
            uint64_t v43 = 0;
            uint64_t v44 = v120 + v36;
            uint64_t v45 = v119 + v36;
            uint64_t v46 = v136 + v36;
            do
            {
              uint64_t v47 = (int *)(v22 + 12 * v43);
              uint64_t v48 = *v47;
              uint64_t v49 = v47[1];
              a3.i32[0] = v47[2];
              if (v12 >= 7
                && ((unint64_t)&v138[4 * v49] < v44 + 4 * v48
                  ? (BOOL v50 = v37 + 4 * v48 >= (unint64_t)&v33[4 * v49])
                  : (BOOL v50 = 1),
                    v50))
              {
                float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.f32, 0);
                int16x8_t v52 = (float32x4_t *)(v45 + 4 * v48);
                uint64_t v53 = v13 & 0x3F8;
                float32x4_t v54 = (float32x4_t *)&v139[v49];
                do
                {
                  float32x4_t v55 = vmlaq_f32(*v54, v51, *v52);
                  v54[-1] = vmlaq_f32(v54[-1], v51, v52[-1]);
                  *float32x4_t v54 = v55;
                  v52 += 2;
                  v54 += 2;
                  v53 -= 8;
                }
                while (v53);
                uint64_t v56 = v13 & 0x3F8;
                if (v56 == v13) {
                  goto LABEL_25;
                }
              }
              else
              {
                uint64_t v56 = 0;
              }
              uint64_t v57 = (float *)&v138[4 * v56 + 4 * v49];
              unsigned int v58 = (float *)(v46 + 4 * (v56 + v48));
              uint64_t v59 = v124 - v56;
              do
              {
                float v60 = *v58++;
                *uint64_t v57 = *v57 + (float)(v60 * a3.f32[0]);
                ++v57;
                --v59;
              }
              while (v59);
LABEL_25:
              ++v43;
            }
            while (v43 != v15);
          }
LABEL_48:
          if (v32 == v23)
          {
            if ((int)v14 >= 1)
            {
              if (v125)
              {
                uint64_t v82 = 0;
                goto LABEL_74;
              }
              a3 = (float32x4_t)vdupq_lane_s32((int32x2_t)a9.n128_u64[0], 0);
              uint64_t v95 = v127;
              uint64_t v96 = (float32x4_t *)v138;
              do
              {
                float32x4_t v97 = (float32x4_t *)((char *)v96 + v24);
                float32x4_t v98 = vmlaq_f32(*(float32x4_t *)((char *)v96 + v24 + 16), v96[1], a3);
                *float32x4_t v97 = vmlaq_f32(*(float32x4_t *)((char *)v96 + v24), *v96, a3);
                v97[1] = v98;
                v96 += 2;
                v95 -= 8;
              }
              while (v95);
              uint64_t v82 = v127;
              if (v127 != v131)
              {
LABEL_74:
                uint64_t v99 = (float *)&v138[4 * v82];
                uint64_t v100 = v131 - v82;
                do
                {
                  v99[(unint64_t)v24 / 4] = v99[(unint64_t)v24 / 4] + (float)(a9.n128_f32[0] * *v99);
                  ++v99;
                  --v100;
                }
                while (v100);
              }
            }
            uint64_t v32 = v23;
            goto LABEL_16;
          }
          if ((int)v14 >= 1)
          {
            uint64_t v83 = *(void *)(a1 + 16);
            uint64_t v84 = *(void *)(v83 + 16);
            uint64_t v85 = **(void **)(v83 + 72) * (int)v23;
            if (v14 < 0xC
              || ((unint64_t v86 = v84 + v132 + v85, v84 + v85 < (unint64_t)v122)
                ? (BOOL v87 = (unint64_t)v123 >= v86)
                : (BOOL v87 = 1),
                  v87 ? (int v88 = 0) : (int v88 = 1),
                  v84 + v85 < (unint64_t)&v138[v132] ? (BOOL v89 = (unint64_t)v138 >= v86) : (BOOL v89 = 1),
                  !v89 ? (int v90 = 1) : (int v90 = v88),
                  ((v90 | v121) & 1) != 0))
            {
              uint64_t v91 = 0;
            }
            else
            {
              float v101 = (_OWORD *)(v84 + v85 + 16);
              uint64_t v102 = (float32x4_t *)v139;
              uint64_t v103 = v127;
              do
              {
                uint64_t v104 = (float32x4_t *)((char *)v102 + v24);
                long long v105 = *(long long *)((char *)v102 + v24);
                *(v101 - 1) = *(float32x4_t *)((char *)&v102[-1] + v24);
                *float v101 = v105;
                a3 = vmulq_n_f32(v102[-1], a9.n128_f32[0]);
                float32x4_t v106 = vmulq_n_f32(*v102, a9.n128_f32[0]);
                v104[-1] = a3;
                *uint64_t v104 = v106;
                v102 += 2;
                v101 += 2;
                v103 -= 8;
              }
              while (v103);
              uint64_t v91 = v127;
              if (v127 == v131) {
                goto LABEL_16;
              }
            }
            uint64_t v92 = (float *)&v138[4 * v91];
            uint64_t v93 = (_DWORD *)(v84 + v85 + 4 * v91);
            uint64_t v94 = v131 - v91;
            do
            {
              *v93++ = LODWORD(v92[(unint64_t)v24 / 4]);
              v92[(unint64_t)v24 / 4] = a9.n128_f32[0] * *v92;
              ++v92;
              --v94;
            }
            while (v94);
          }
LABEL_16:
          ++v20;
          uint64_t v23 = v32;
          if (v20 == v21) {
            goto LABEL_82;
          }
          break;
      }
    }
  }
  LODWORD(v32) = v23;
LABEL_82:
  if ((int)v14 >= 1)
  {
    uint64_t v107 = *(void *)(a1 + 16);
    uint64_t v108 = *(void *)(v107 + 16);
    uint64_t v109 = **(void **)(v107 + 72) * (int)v32;
    if (v14 < 0xC || (unint64_t)(v109 + v108 - (void)&v138[v24]) < 0x20)
    {
      uint64_t v110 = 0;
LABEL_86:
      uint64_t v111 = (_DWORD *)(v108 + v109 + 4 * v110);
      uint64_t v112 = (int *)&v138[4 * v110 + 4 * v14];
      uint64_t v113 = v14 - v110;
      do
      {
        int v114 = *v112++;
        *v111++ = v114;
        --v113;
      }
      while (v113);
      return;
    }
    uint64_t v110 = v14 & 0xFFFFFFF8;
    uint64_t v115 = (long long *)&v138[v24 + 16];
    uint64_t v116 = (_OWORD *)(v109 + v108 + 16);
    uint64_t v117 = v110;
    do
    {
      long long v118 = *v115;
      *(v116 - 1) = *(v115 - 1);
      _OWORD *v116 = v118;
      v115 += 2;
      v116 += 2;
      v117 -= 8;
    }
    while (v117);
    if (v110 != v14) {
      goto LABEL_86;
    }
  }
}

void sub_100379EEC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100379F24(uint64_t a1, int *a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  unint64_t v4 = *v3;
  uint64_t v5 = (v4 >> 3) & 0x1FF;
  unsigned int v6 = v5 + 1;
  uint64_t v7 = ((int)v5 + 1) * (uint64_t)*(int *)(*((void *)v3 + 8) + 4);
  uint64_t v127 = v7;
  if ((2 * v7) >= 0x89) {
    operator new[]();
  }
  uint64_t v8 = *(unsigned int *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  uint64_t v12 = &v135[8 * v7];
  uint64_t v13 = *(int *)(v9 + 4 * v10);
  uint64_t v14 = *(int *)(v9 + 4 * v11);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v133 = *(void *)(a1 + 32);
  uint64_t v16 = *(unsigned int *)(v133 + 12 * (int)v13 + 4);
  uint64_t v125 = v15;
  uint64_t v126 = v14;
  if ((int)v7 >= 1)
  {
    bzero(v12, 8 * v7);
    uint64_t v15 = v125;
    uint64_t v14 = v126;
    uint64_t v7 = v127;
  }
  uint64_t v17 = 8 * v7;
  if ((int)v13 < (int)v14)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t v128 = v7;
    uint64_t v129 = 8 * v7;
    uint64_t v20 = (v4 & 0xFF8) + 8;
    uint64_t v131 = **(void **)(v18 + 72);
    uint64_t v132 = v6;
    uint64_t v21 = &v135[v20];
    uint64_t v118 = v19 + v20;
    uint64_t v22 = v6 & 0x3FC;
    BOOL v23 = v7 < 4;
    uint64_t v120 = &v135[8 * v7 + 8 * v7];
    int v121 = v12;
    BOOL v24 = v12 >= &v135[v129] || v135 >= &v135[8 * v7 + 8 * v7];
    int v25 = !v24;
    int v119 = v25;
    uint64_t v124 = v7 & 0xFFFFFFFC;
    if (!v24) {
      BOOL v23 = 1;
    }
    BOOL v122 = v23;
    uint64_t v130 = (float *)(v15 + 8);
    uint64_t v117 = v19 + 16;
    uint64_t v134 = v19;
    while (1)
    {
      uint64_t v27 = v21;
      uint64_t v28 = (float *)(v133 + 12 * v13);
      float v29 = v28[2];
      uint64_t v26 = *((unsigned int *)v28 + 1);
      uint64_t v30 = *(int *)v28;
      if ((int)v7 >= 1)
      {
        bzero(v135, v129);
        uint64_t v15 = v125;
        uint64_t v14 = v126;
        uint64_t v7 = v127;
      }
      uint64_t v31 = v131 * v30;
      uint64_t v32 = v134 + v131 * v30;
      switch((int)v5)
      {
        case 0:
          uint64_t v33 = v8;
          uint64_t v34 = v130;
          uint64_t v21 = v27;
          if ((int)v8 >= 1)
          {
            do
            {
              *(double *)&v135[8 * *((int *)v34 - 1)] = *(double *)&v135[8 * *((int *)v34 - 1)]
                                                      + *(double *)(v32 + 8 * *((int *)v34 - 2)) * *v34;
              v34 += 3;
              --v33;
            }
            while (v33);
          }
          goto LABEL_48;
        case 1:
          uint64_t v54 = v8;
          float32x4_t v55 = v130;
          uint64_t v21 = v27;
          if ((int)v8 >= 1)
          {
            do
            {
              uint64_t v56 = *((int *)v55 - 2);
              uint64_t v57 = *((int *)v55 - 1);
              float v58 = *v55;
              v55 += 3;
              *(float64x2_t *)&v135[8 * v57] = vmlaq_n_f64(*(float64x2_t *)&v135[8 * v57], *(float64x2_t *)(v32 + 8 * v56), v58);
              --v54;
            }
            while (v54);
          }
          goto LABEL_48;
        case 2:
          uint64_t v59 = v8;
          float v60 = v130;
          uint64_t v21 = v27;
          if ((int)v8 >= 1)
          {
            do
            {
              uint64_t v61 = *((int *)v60 - 2);
              uint64_t v62 = *((int *)v60 - 1);
              float v63 = *v60;
              v60 += 3;
              float32x2_t v64 = (float64x2_t *)&v135[8 * v62];
              float v65 = (float64x2_t *)(v32 + 8 * v61);
              float64_t v66 = v64[1].f64[0] + v65[1].f64[0] * v63;
              *float32x2_t v64 = vmlaq_n_f64(*v64, *v65, v63);
              v64[1].f64[0] = v66;
              --v59;
            }
            while (v59);
          }
          goto LABEL_48;
        case 3:
          uint64_t v67 = v8;
          uint64_t v68 = v130;
          uint64_t v21 = v27;
          if ((int)v8 >= 1)
          {
            do
            {
              uint64_t v69 = *((int *)v68 - 2);
              uint64_t v70 = *((int *)v68 - 1);
              float v71 = *v68;
              v68 += 3;
              uint64_t v72 = 8 * ((int)v70 + 2);
              double v73 = *(double *)&v135[v72];
              *(float64x2_t *)&v135[8 * v70] = vmlaq_n_f64(*(float64x2_t *)&v135[8 * v70], *(float64x2_t *)(v32 + 8 * v69), v71);
              uint64_t v74 = 8 * ((int)v70 + 3);
              double v75 = v73 + *(double *)(v32 + 8 * ((int)v69 + 2)) * v71;
              double v76 = *(double *)&v135[v74];
              double v77 = *(double *)(v32 + 8 * ((int)v69 + 3));
              *(double *)&v135[v72] = v75;
              *(double *)&v135[v74] = v76 + v77 * v71;
              --v67;
            }
            while (v67);
          }
          goto LABEL_48;
        default:
          uint64_t v21 = v27;
          if ((int)v8 >= 1)
          {
            uint64_t v35 = 0;
            uint64_t v36 = v118 + v31;
            uint64_t v37 = v117 + v31;
            uint64_t v38 = v134 + v31;
            do
            {
              uint64_t v39 = (float *)(v15 + 12 * v35);
              uint64_t v40 = *(int *)v39;
              uint64_t v41 = *((int *)v39 + 1);
              *(double *)&uint64_t v42 = v39[2];
              if (v5 >= 5
                && ((unint64_t)&v135[8 * v41] < v36 + 8 * v40
                  ? (BOOL v43 = v32 + 8 * v40 >= (unint64_t)&v27[8 * v41])
                  : (BOOL v43 = 1),
                    v43))
              {
                float64x2_t v44 = (float64x2_t)vdupq_lane_s64(v42, 0);
                uint64_t v45 = (float64x2_t *)(v37 + 8 * v40);
                uint64_t v46 = v22;
                uint64_t v47 = (float64x2_t *)&v136[v41];
                do
                {
                  float64x2_t v48 = vmlaq_f64(*v47, v44, *v45);
                  v47[-1] = vmlaq_f64(v47[-1], v44, v45[-1]);
                  *uint64_t v47 = v48;
                  v45 += 2;
                  v47 += 2;
                  v46 -= 4;
                }
                while (v46);
                uint64_t v49 = v22;
                if (v22 == v132) {
                  goto LABEL_25;
                }
              }
              else
              {
                uint64_t v49 = 0;
              }
              BOOL v50 = (double *)&v135[8 * v49 + 8 * v41];
              float32x4_t v51 = (double *)(v38 + 8 * (v49 + v40));
              uint64_t v52 = ((v4 >> 3) & 0x1FF) + 1 - v49;
              do
              {
                double v53 = *v51++;
                *BOOL v50 = *v50 + v53 * *(double *)&v42;
                ++v50;
                --v52;
              }
              while (v52);
LABEL_25:
              ++v35;
            }
            while (v35 != v8);
          }
LABEL_48:
          *(double *)&uint64_t v78 = v29;
          if (v26 == v16)
          {
            if ((int)v7 >= 1)
            {
              if (v122)
              {
                uint64_t v79 = 0;
                goto LABEL_74;
              }
              float64x2_t v92 = (float64x2_t)vdupq_lane_s64(v78, 0);
              uint64_t v93 = v124;
              uint64_t v94 = (float64x2_t *)v135;
              do
              {
                uint64_t v95 = (float64x2_t *)((char *)v94 + v17);
                float64x2_t v96 = vmlaq_f64(*(float64x2_t *)((char *)v94 + v17 + 16), v94[1], v92);
                *uint64_t v95 = vmlaq_f64(*(float64x2_t *)((char *)v94 + v17), *v94, v92);
                v95[1] = v96;
                v94 += 2;
                v93 -= 4;
              }
              while (v93);
              uint64_t v79 = v124;
              if (v124 != v128)
              {
LABEL_74:
                float32x4_t v97 = (double *)&v135[8 * v79];
                uint64_t v98 = v128 - v79;
                do
                {
                  v97[(unint64_t)v17 / 8] = v97[(unint64_t)v17 / 8] + *(double *)&v78 * *v97;
                  ++v97;
                  --v98;
                }
                while (v98);
              }
            }
            uint64_t v26 = v16;
            goto LABEL_16;
          }
          if ((int)v7 >= 1)
          {
            uint64_t v80 = *(void *)(a1 + 16);
            uint64_t v81 = *(void *)(v80 + 16);
            uint64_t v82 = **(void **)(v80 + 72) * (int)v16;
            if (v7 < 0xA
              || ((unint64_t v83 = v81 + v129 + v82, v81 + v82 < (unint64_t)v120)
                ? (BOOL v84 = (unint64_t)v121 >= v83)
                : (BOOL v84 = 1),
                  v84 ? (int v85 = 0) : (int v85 = 1),
                  v81 + v82 < (unint64_t)&v135[v129] ? (BOOL v86 = (unint64_t)v135 >= v83) : (BOOL v86 = 1),
                  !v86 ? (int v87 = 1) : (int v87 = v85),
                  ((v87 | v119) & 1) != 0))
            {
              uint64_t v88 = 0;
            }
            else
            {
              uint64_t v99 = (_OWORD *)(v81 + v82 + 16);
              uint64_t v100 = (float64x2_t *)v136;
              uint64_t v101 = v124;
              do
              {
                uint64_t v102 = (float64x2_t *)((char *)v100 + v17);
                long long v103 = *(long long *)((char *)v100 + v17);
                *(v99 - 1) = *(float64x2_t *)((char *)&v100[-1] + v17);
                *uint64_t v99 = v103;
                float64x2_t v104 = vmulq_n_f64(*v100, *(double *)&v78);
                v102[-1] = vmulq_n_f64(v100[-1], *(double *)&v78);
                *uint64_t v102 = v104;
                v100 += 2;
                v99 += 2;
                v101 -= 4;
              }
              while (v101);
              uint64_t v88 = v124;
              if (v124 == v128) {
                goto LABEL_16;
              }
            }
            BOOL v89 = (double *)&v135[8 * v88];
            int v90 = (void *)(v81 + v82 + 8 * v88);
            uint64_t v91 = v128 - v88;
            do
            {
              *v90++ = *(void *)&v89[(unint64_t)v17 / 8];
              v89[(unint64_t)v17 / 8] = *v89 * *(double *)&v78;
              ++v89;
              --v91;
            }
            while (v91);
          }
LABEL_16:
          ++v13;
          uint64_t v16 = v26;
          if (v13 == v14) {
            goto LABEL_82;
          }
          break;
      }
    }
  }
  LODWORD(v26) = v16;
LABEL_82:
  if ((int)v7 >= 1)
  {
    uint64_t v105 = *(void *)(a1 + 16);
    uint64_t v106 = *(void *)(v105 + 16);
    uint64_t v107 = **(void **)(v105 + 72) * (int)v26;
    if (v7 < 0xA || (unint64_t)(v107 + v106 - (void)&v135[v17]) < 0x20)
    {
      uint64_t v108 = 0;
LABEL_86:
      uint64_t v109 = (void *)(v106 + v107 + 8 * v108);
      uint64_t v110 = (uint64_t *)&v135[8 * v108 + 8 * v7];
      uint64_t v111 = v7 - v108;
      do
      {
        uint64_t v112 = *v110++;
        *v109++ = v112;
        --v111;
      }
      while (v111);
      return;
    }
    uint64_t v108 = v7 & 0xFFFFFFFC;
    uint64_t v113 = (long long *)&v135[v17 + 16];
    int v114 = (_OWORD *)(v107 + v106 + 16);
    uint64_t v115 = v108;
    do
    {
      long long v116 = *v113;
      *(v114 - 1) = *(v113 - 1);
      _OWORD *v114 = v116;
      v113 += 2;
      v114 += 2;
      v115 -= 4;
    }
    while (v115);
    if (v108 != v7) {
      goto LABEL_86;
    }
  }
}

unsigned __int8 *sub_10037A65C(unsigned __int8 *result, uint64_t a2, uint64_t a3, int16x8_t *a4, int16x8_t *a5, int a6, signed int a7, signed int a8)
{
  unsigned int v8 = *result << 8;
  int16x8_t v9 = vdupq_n_s16(v8);
  if (a6 < 8)
  {
    signed int v11 = 0;
    if (a6 <= 0) {
      goto LABEL_16;
    }
  }
  else
  {
    int v10 = 0;
    signed int v11 = a6 & 0xFFFFFFF8;
    do
    {
      *a5++ = v9;
      v10 += 8;
      a4 += 2;
    }
    while (v10 < a6 - 7);
    if (v11 >= a6) {
      goto LABEL_16;
    }
  }
  uint64_t v12 = (~v11 + a6);
  if (v12 >= 0xF)
  {
    uint64_t v14 = v12 + 1;
    uint64_t v15 = (v12 + 1) & 0x1FFFFFFF0;
    a4 = (int16x8_t *)((char *)a4 + 4 * v15);
    uint64_t v13 = (int16x8_t *)((char *)a5 + 2 * v15);
    v11 += v15;
    uint64_t v16 = a5 + 1;
    uint64_t v17 = v15;
    do
    {
      v16[-1] = v9;
      int16x8_t *v16 = v9;
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
    if (v14 == v15)
    {
      signed int v11 = a6;
      a5 = (int16x8_t *)((char *)a5 + 2 * v15);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v13 = a5;
  }
  a5 = v13;
  do
  {
    a5->i16[0] = v8;
    a5 = (int16x8_t *)((char *)a5 + 2);
    ++v11;
    a4 = (int16x8_t *)((char *)a4 + 4);
  }
  while (a6 != v11);
  signed int v11 = a6;
LABEL_16:
  if (v11 < a7 - 7)
  {
    uint64_t v18 = (int *)(a3 + 4 * v11 + 16);
    do
    {
      uint64_t v19 = v18[3];
      if ((int)v19 + 15 > *(_DWORD *)(a3 + 4 * (a8 - 1))) {
        break;
      }
      uint8x8_t v20 = *(uint8x8_t *)&result[*(v18 - 4)];
      uint8x8_t v21 = *(uint8x8_t *)&result[*(v18 - 3)];
      uint8x8_t v22 = *(uint8x8_t *)&result[*(v18 - 2)];
      uint8x8_t v23 = *(uint8x8_t *)&result[*(v18 - 1)];
      uint64_t v24 = v18[1];
      uint8x8_t v25 = *(uint8x8_t *)&result[*v18];
      uint64_t v26 = v18[2];
      v18 += 8;
      *(int32x2_t *)v27.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vmovl_u8(v20), (int32x2_t)*(_OWORD *)&vmovl_u8(v22));
      v27.u64[1] = (unint64_t)vzip1_s32((int32x2_t)*(_OWORD *)&vmovl_u8(v25), (int32x2_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&result[v26]));
      *(int32x2_t *)v28.i8 = vzip1_s32((int32x2_t)*(_OWORD *)&vmovl_u8(v21), (int32x2_t)*(_OWORD *)&vmovl_u8(v23));
      v28.u64[1] = (unint64_t)vzip1_s32((int32x2_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&result[v24]), (int32x2_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&result[v19]));
      int16x8_t v29 = (int16x8_t)vzip1q_s32(v27, v28);
      int16x8_t v30 = (int16x8_t)vzip2q_s32(v27, v28);
      int16x8_t v31 = *a4;
      int16x8_t v32 = a4[1];
      a4 += 2;
      int32x4_t v33 = vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v31.i8);
      int32x4_t v34 = vmull_high_s16(v29, v31);
      int32x4_t v35 = vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v32.i8);
      int32x4_t v36 = vmull_high_s16(v30, v32);
      *(uint16x8_t *)a5++ = vqmovn_high_u32(vqmovn_u32((uint32x4_t)vaddq_s32(vuzp1q_s32(v33, v34), vuzp2q_s32(v33, v34))), (uint32x4_t)vaddq_s32(vuzp1q_s32(v35, v36), vuzp2q_s32(v35, v36)));
      v11 += 8;
    }
    while (a7 - 7 > v11);
  }
  if (v11 < a7)
  {
    uint64_t v37 = (int *)(a3 + 4 * v11);
    do
    {
      uint64_t v38 = *v37++;
      a5->i16[0] = a4->i16[0] * result[v38] + a4->i16[1] * result[v38 + 1];
      a5 = (int16x8_t *)((char *)a5 + 2);
      ++v11;
      a4 = (int16x8_t *)((char *)a4 + 4);
    }
    while (v11 < a7);
  }
  unsigned int v39 = result[*(int *)(a3 + 4 * a8 - 4)] << 8;
  for (int16x8_t i = vdupq_n_s16(v39); v11 < a8 - 7; v11 += 8)
    *a5++ = i;
  if (v11 < a8)
  {
    uint64_t v41 = (~v11 + a8);
    if (v41 < 0xF)
    {
      uint64_t v42 = a5;
LABEL_31:
      int v47 = a8 - v11;
      do
      {
        v42->i16[0] = v39;
        uint64_t v42 = (int16x8_t *)((char *)v42 + 2);
        --v47;
      }
      while (v47);
      return result;
    }
    uint64_t v43 = v41 + 1;
    uint64_t v44 = (v41 + 1) & 0x1FFFFFFF0;
    uint64_t v42 = (int16x8_t *)((char *)a5 + 2 * v44);
    v11 += v44;
    uint64_t v45 = a5 + 1;
    uint64_t v46 = v44;
    do
    {
      v45[-1] = i;
      *uint64_t v45 = i;
      v45 += 2;
      v46 -= 16;
    }
    while (v46);
    if (v43 != v44) {
      goto LABEL_31;
    }
  }
  return result;
}

int8x8_t *sub_10037A8D8(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if (a6 >= a7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v44 = 0;
    while (1)
    {
      if (a5 >= (unsigned __int8 *)result + a2 || &a5[2 * a2] <= (unsigned __int8 *)result)
      {
        int v10 = &a5[2 * (a2 & 0xFFFFFFE0)];
        uint64_t v46 = (int16x8_t *)(a5 + 32);
        uint64_t v47 = a2 & 0xFFFFFFE0;
        float64x2_t v48 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          int16x8_t v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          int16x8_t *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        uint64_t v45 = a2 & 0xFFFFFFE0;
        if (v45 == a2) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v45 = 0;
        int v10 = a5;
      }
      uint64_t v53 = a2 - v45;
      uint64_t v54 = (unsigned __int8 *)result + v45;
      do
      {
        __int16 v55 = *v54++;
        *(_WORD *)int v10 = v55 << 8;
        v10 += 2;
        --v53;
      }
      while (v53);
LABEL_42:
      ++v44;
      a5 = v10;
      if (v44 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = a5;
  do
  {
    signed int v11 = result;
    uint64_t v12 = a2;
    do
    {
      __int16 v13 = v11->u8[0];
      signed int v11 = (int8x8_t *)((char *)v11 + 1);
      *(_WORD *)int v10 = v13 << 8;
      v10 += 2;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      uint64_t v14 = a6;
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = (unsigned __int8 *)result + *(int *)(a3 + 4 * v14) * (uint64_t)(int)a2;
        do
        {
          __int16 v17 = *a4;
          if (*a4) {
            v17 *= v16[v15];
          }
          *(_WORD *)a5 = v17;
          __int16 v18 = a4[1];
          if (v18) {
            v18 *= v16[a2 + v15];
          }
          *(_WORD *)a5 = v18 + v17;
          a5 += 2;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8) {
    return result;
  }
  int v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  uint8x8_t v20 = (unsigned __int8 *)result + v19 * (uint64_t)(int)a2;
  uint64_t v21 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v25 = v19 * (uint64_t)(int)a2;
    uint64_t v26 = 2 * a2;
    int32x4_t v27 = (unsigned __int8 *)result + a2 + v25;
    uint64_t v28 = a2 & 0xFFFFFFE0;
    int16x8_t v29 = (int8x8_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        int16x8_t v30 = &a5[2 * (v21 & 0xFFFFFFE0)];
        int16x8_t v31 = (int16x8_t *)(a5 + 32);
        uint64_t v32 = v21 & 0xFFFFFFE0;
        int32x4_t v33 = v29 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v33[-2].i8;
          _Q1 = *(int16x8_t *)v33->i8;
          int16x8_t v36 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v41 = vshll_n_s8(*v33, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v31[-2] = v36;
          v31[-1] = _Q0;
          int16x8_t *v31 = v41;
          v31[1] = _Q1;
          v31 += 4;
          v33 += 4;
          v32 -= 32;
        }
        while (v32);
        unint64_t result = (int8x8_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21) {
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t result = 0;
        int16x8_t v30 = a5;
      }
      uint64_t v42 = v21 - (void)result;
      unint64_t result = (int8x8_t *)((char *)result + (void)v29);
      do
      {
        __int16 v43 = result->u8[0];
        unint64_t result = (int8x8_t *)((char *)result + 1);
        *(_WORD *)int16x8_t v30 = v43 << 8;
        v30 += 2;
        --v42;
      }
      while (v42);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    uint8x8_t v22 = v20;
    uint64_t v23 = a2;
    do
    {
      __int16 v24 = *v22++;
      *(_WORD *)a5 = v24 << 8;
      a5 += 2;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

__int8 *sub_10037AB98(__int8 *result, int32x2_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, int16x8_t *a6, int a7, int a8, int a9)
{
  a2.i8[0] = *result;
  a2.i8[4] = result[1];
  *(int32x2_t *)v9.i8 = vshl_n_s32(a2, 8uLL);
  if (a7 < 4)
  {
    signed int v12 = 0;
    if (a7 > 0) {
      goto LABEL_5;
    }
LABEL_8:
    a7 = v12;
    goto LABEL_14;
  }
  int v10 = 0;
  v63.val[1] = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
  v63.val[0] = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
  int8x16_t v11 = vqtbl2q_s8(v63, (int8x16_t)xmmword_10040A860);
  signed int v12 = a7 & 0xFFFFFFFC;
  do
  {
    *a6++ = (int16x8_t)v11;
    v10 += 4;
    ++a5;
  }
  while (v10 < a7 - 3);
  if (v12 >= a7) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v13 = (~v12 + a7);
  if (v13 >= 0xF)
  {
    uint64_t v15 = v13 + 1;
    uint64_t v16 = (v13 + 1) & 0x1FFFFFFF0;
    a5 = (int32x4_t *)((char *)a5 + 4 * v16);
    uint64_t v14 = (int16x8_t *)((char *)a6 + 4 * v16);
    v12 += v16;
    int16x8_t v17 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
    int16x8_t v18 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 2);
    int16x8_t v19 = vzip2q_s16(v17, v18);
    int16x8_t v20 = vzip1q_s16(v17, v18);
    uint64_t v21 = a6 + 2;
    uint64_t v22 = v16;
    do
    {
      v21[-2] = v20;
      v21[-1] = v19;
      int16x8_t *v21 = v20;
      v21[1] = v19;
      v21 += 4;
      v22 -= 16;
    }
    while (v22);
    if (v15 == v16)
    {
      a6 = (int16x8_t *)((char *)a6 + 4 * v16);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = a6;
  }
  do
  {
    v14->i16[0] = v9.i16[0];
    a6 = (int16x8_t *)((char *)v14->i64 + 4);
    v14->i16[1] = v9.i16[2];
    ++v12;
    a5 = (int32x4_t *)((char *)a5 + 4);
    uint64_t v14 = (int16x8_t *)((char *)v14 + 4);
  }
  while (a7 != v12);
LABEL_14:
  if (a7 < a8 - 3)
  {
    uint64_t v23 = a4 + 4 * a7 + 12;
    __int16 v24 = (int *)v23;
    do
    {
      uint64_t v26 = *v24;
      v24 += 4;
      uint64_t v25 = v26;
      if ((int)v26 + 7 > *(_DWORD *)(a4 + 4 * (a9 - 1))) {
        break;
      }
      int32x2_t v27 = vadd_s32(*(int32x2_t *)(v23 - 12), *(int32x2_t *)(v23 - 12));
      __int32 v28 = v27.i32[1];
      int32x4_t v29 = vzip1q_s32((int32x4_t)vmovl_u8(*(uint8x8_t *)&result[v27.i32[0]]), (int32x4_t)vmovl_u8(*(uint8x8_t *)&result[2 * *(int *)(v23 - 4)]));
      int32x4_t v30 = vzip2q_s32((int32x4_t)vdupq_lane_s64(vmovl_u8(*(uint8x8_t *)&result[v28]).i64[0], 0), (int32x4_t)vdupq_lane_s64(vmovl_u8(*(uint8x8_t *)&result[2 * v25]).i64[0], 0));
      int16x8_t v31 = (int16x8_t)vzip1q_s32(v29, v30);
      int16x8_t v32 = (int16x8_t)vzip2q_s32(v29, v30);
      int16x8_t v33 = vzip1q_s16(v31, v32);
      int16x8_t v34 = vzip2q_s16(v31, v32);
      int32x4_t v35 = *a5++;
      int32x4_t v36 = v35;
      int16x8_t v37 = (int16x8_t)vzip1q_s32(v36, v36);
      int16x8_t v38 = (int16x8_t)vzip2q_s32(v36, v36);
      int32x4_t v39 = vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v37.i8);
      int32x4_t v40 = vmull_high_s16(v33, v37);
      int32x4_t v41 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v38.i8);
      int32x4_t v42 = vmull_high_s16(v34, v38);
      uint32x4_t v9 = (uint32x4_t)vaddq_s32(vuzp1q_s32(v41, v42), vuzp2q_s32(v41, v42));
      *(uint16x8_t *)a6++ = vqmovn_high_u32(vqmovn_u32((uint32x4_t)vaddq_s32(vuzp1q_s32(v39, v40), vuzp2q_s32(v39, v40))), v9);
      a7 += 4;
      uint64_t v23 = (uint64_t)v24;
    }
    while (a8 - 3 > a7);
  }
  if (a7 < a8)
  {
    __int16 v43 = (int *)(a4 + 4 * a7);
    do
    {
      uint64_t v44 = *v43++;
      uint64_t v45 = (unsigned __int8 *)&result[2 * v44];
      a6->i16[0] = a5->i16[0] * *v45 + a5->i16[1] * v45[2];
      __int16 v46 = a5->i16[0] * v45[1] + a5->i16[1] * v45[3];
      uint64_t v47 = (int16x8_t *)((char *)a6->i64 + 4);
      a6->i16[1] = v46;
      ++a7;
      a5 = (int32x4_t *)((char *)a5 + 4);
      a6 = (int16x8_t *)((char *)a6 + 4);
    }
    while (a7 < a8);
    a6 = v47;
  }
  float64x2_t v48 = &result[2 * *(int *)(a4 + 4 * a9 - 4)];
  __int16 v49 = *v48 << 8;
  v9.i32[0] = *v48 << 8;
  unsigned int v50 = v48[1] << 8;
  if (a7 < a9 - 3)
  {
    v51.i16[0] = v9.i16[0];
    v51.i16[1] = v50;
    v51.i16[2] = v49;
    v51.i16[3] = v50;
    v51.i16[4] = v49;
    v51.i16[5] = v50;
    v51.i16[6] = v49;
    v51.i16[7] = v50;
    do
    {
      *a6++ = v51;
      a7 += 4;
    }
    while (a7 < a9 - 3);
  }
  if (a7 < a9)
  {
    uint64_t v52 = (~a7 + a9);
    if (v52 < 0xF)
    {
      uint64_t v53 = a6;
LABEL_31:
      int v62 = a9 - a7;
      do
      {
        v53->i16[0] = v49;
        v53->i16[1] = v50;
        uint64_t v53 = (int16x8_t *)((char *)v53 + 4);
        --v62;
      }
      while (v62);
      return result;
    }
    uint64_t v54 = v52 + 1;
    uint64_t v55 = (v52 + 1) & 0x1FFFFFFF0;
    uint64_t v53 = (int16x8_t *)((char *)a6 + 4 * v55);
    a7 += v55;
    int16x8_t v56 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 0);
    int16x8_t v57 = vdupq_n_s16(v50);
    int16x8_t v58 = vzip2q_s16(v56, v57);
    int16x8_t v59 = vzip1q_s16(v56, v57);
    float v60 = a6 + 2;
    uint64_t v61 = v55;
    do
    {
      v60[-2] = v59;
      v60[-1] = v58;
      int16x8_t *v60 = v59;
      v60[1] = v58;
      v60 += 4;
      v61 -= 16;
    }
    while (v61);
    if (v54 != v55) {
      goto LABEL_31;
    }
  }
  return result;
}

int8x8_t *sub_10037AEB0(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if (a6 >= a7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v44 = 0;
    while (1)
    {
      if (a5 >= (unsigned __int8 *)result + a2 || &a5[2 * a2] <= (unsigned __int8 *)result)
      {
        int v10 = &a5[2 * (a2 & 0xFFFFFFE0)];
        __int16 v46 = (int16x8_t *)(a5 + 32);
        uint64_t v47 = a2 & 0xFFFFFFE0;
        float64x2_t v48 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          int16x8_t v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          int16x8_t *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        uint64_t v45 = a2 & 0xFFFFFFE0;
        if (v45 == a2) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v45 = 0;
        int v10 = a5;
      }
      uint64_t v53 = a2 - v45;
      uint64_t v54 = (unsigned __int8 *)result + v45;
      do
      {
        __int16 v55 = *v54++;
        *(_WORD *)int v10 = v55 << 8;
        v10 += 2;
        --v53;
      }
      while (v53);
LABEL_42:
      ++v44;
      a5 = v10;
      if (v44 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = a5;
  do
  {
    int8x16_t v11 = result;
    uint64_t v12 = a2;
    do
    {
      __int16 v13 = v11->u8[0];
      int8x16_t v11 = (int8x8_t *)((char *)v11 + 1);
      *(_WORD *)int v10 = v13 << 8;
      v10 += 2;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      uint64_t v14 = a6;
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = (unsigned __int8 *)result + *(int *)(a3 + 4 * v14) * (uint64_t)(int)a2;
        do
        {
          __int16 v17 = *a4;
          if (*a4) {
            v17 *= v16[v15];
          }
          *(_WORD *)a5 = v17;
          __int16 v18 = a4[1];
          if (v18) {
            v18 *= v16[a2 + v15];
          }
          *(_WORD *)a5 = v18 + v17;
          a5 += 2;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8) {
    return result;
  }
  int v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  int16x8_t v20 = (unsigned __int8 *)result + v19 * (uint64_t)(int)a2;
  uint64_t v21 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v25 = v19 * (uint64_t)(int)a2;
    uint64_t v26 = 2 * a2;
    int32x2_t v27 = (unsigned __int8 *)result + a2 + v25;
    uint64_t v28 = a2 & 0xFFFFFFE0;
    int32x4_t v29 = (int8x8_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        int32x4_t v30 = &a5[2 * (v21 & 0xFFFFFFE0)];
        int16x8_t v31 = (int16x8_t *)(a5 + 32);
        uint64_t v32 = v21 & 0xFFFFFFE0;
        int16x8_t v33 = v29 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v33[-2].i8;
          _Q1 = *(int16x8_t *)v33->i8;
          int16x8_t v36 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v41 = vshll_n_s8(*v33, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v31[-2] = v36;
          v31[-1] = _Q0;
          int16x8_t *v31 = v41;
          v31[1] = _Q1;
          v31 += 4;
          v33 += 4;
          v32 -= 32;
        }
        while (v32);
        unint64_t result = (int8x8_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21) {
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t result = 0;
        int32x4_t v30 = a5;
      }
      uint64_t v42 = v21 - (void)result;
      unint64_t result = (int8x8_t *)((char *)result + (void)v29);
      do
      {
        __int16 v43 = result->u8[0];
        unint64_t result = (int8x8_t *)((char *)result + 1);
        *(_WORD *)int32x4_t v30 = v43 << 8;
        v30 += 2;
        --v42;
      }
      while (v42);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v22 = v20;
    uint64_t v23 = a2;
    do
    {
      __int16 v24 = *v22++;
      *(_WORD *)a5 = v24 << 8;
      a5 += 2;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

unint64_t sub_10037B170(unint64_t result, uint64_t a2, uint64_t a3, _WORD *a4, _WORD *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    __int16 v8 = *(unsigned __int8 *)result << 8;
    __int16 v9 = *(unsigned __int8 *)(result + 1) << 8;
    __int16 v10 = *(unsigned __int8 *)(result + 2) << 8;
    if (a6 >= 0x10)
    {
      uint64_t v13 = a6 & 0xFFFFFFF0;
      uint64_t v12 = &a5[3 * v13];
      do
      {
        LOWORD(v14) = v8;
        WORD1(v14) = v9;
        WORD2(v14) = v10;
        WORD3(v14) = v8;
        LOWORD(v15) = v10;
        WORD1(v15) = v8;
        WORD4(v14) = v9;
        WORD2(v15) = v9;
        WORD3(v15) = v10;
        WORD5(v14) = v10;
        WORD4(v15) = v8;
        WORD5(v15) = v9;
        WORD6(v14) = v8;
        LOWORD(v16) = v9;
        WORD1(v16) = v10;
        WORD6(v15) = v10;
        WORD2(v16) = v8;
        WORD3(v16) = v9;
        HIWORD(v14) = v9;
        WORD4(v16) = v10;
        WORD5(v16) = v8;
        HIWORD(v15) = v8;
        WORD6(v16) = v9;
        HIWORD(v16) = v10;
        *(_OWORD *)a5 = v14;
        *((_OWORD *)a5 + 1) = v15;
        *((_OWORD *)a5 + 2) = v16;
        *((_OWORD *)a5 + 3) = v14;
        *((_OWORD *)a5 + 4) = v15;
        *((_OWORD *)a5 + 5) = v16;
        a5 += 48;
        v13 -= 16;
      }
      while (v13);
      int v11 = a6 & 0x7FFFFFF0;
      if ((a6 & 0xFFFFFFF0) == (unint64_t)a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v12;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      int v11 = 0;
      uint64_t v12 = a5;
    }
    int v17 = a6 - v11;
    do
    {
      *uint64_t v12 = v8;
      v12[1] = v9;
      __int16 v18 = v12 + 3;
      v12[2] = v10;
      v12 += 3;
      --v17;
    }
    while (v17);
    uint64_t v12 = v18;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v19 = a7 - (unint64_t)a6;
    int16x8_t v20 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v21 = *v20++;
      uint64_t v22 = (unsigned __int8 *)(result + 3 * v21);
      *a5 = *a4 * *v22 + a4[1] * v22[3];
      a5[1] = *a4 * v22[1] + a4[1] * v22[4];
      __int16 v23 = *a4 * v22[2] + a4[1] * v22[5];
      __int16 v24 = a5 + 3;
      a5[2] = v23;
      a4 += 2;
      a5 += 3;
      --v19;
    }
    while (v19);
    a5 = v24;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  uint64_t v25 = (unsigned __int8 *)(result + 3 * *(int *)(a3 + 4 * (a8 - 1)));
  __int16 v26 = *v25 << 8;
  __int16 v27 = v25[1] << 8;
  unsigned __int16 v28 = v25[2] << 8;
  uint64_t v29 = (~a7 + a8);
  if (v29 < 0xF)
  {
    int32x4_t v30 = a5;
LABEL_22:
    int v36 = a8 - a7;
    do
    {
      *int32x4_t v30 = v26;
      v30[1] = v27;
      v30[2] = v28;
      v30 += 3;
      --v36;
    }
    while (v36);
    return result;
  }
  uint64_t v31 = v29 + 1;
  unint64_t result = v28;
  int32x4_t v30 = &a5[3 * (v31 & 0x1FFFFFFF0)];
  uint64_t v32 = v31 & 0x1FFFFFFF0;
  do
  {
    LOWORD(v33) = v26;
    WORD1(v33) = v27;
    WORD2(v33) = v28;
    WORD3(v33) = v26;
    LOWORD(v34) = v28;
    WORD1(v34) = v26;
    WORD4(v33) = v27;
    WORD2(v34) = v27;
    WORD3(v34) = v28;
    WORD5(v33) = v28;
    WORD4(v34) = v26;
    WORD5(v34) = v27;
    WORD6(v33) = v26;
    LOWORD(v35) = v27;
    WORD1(v35) = v28;
    WORD6(v34) = v28;
    WORD2(v35) = v26;
    WORD3(v35) = v27;
    HIWORD(v33) = v27;
    WORD4(v35) = v28;
    WORD5(v35) = v26;
    HIWORD(v34) = v26;
    WORD6(v35) = v27;
    HIWORD(v35) = v28;
    *(_OWORD *)a5 = v33;
    *((_OWORD *)a5 + 1) = v34;
    *((_OWORD *)a5 + 2) = v35;
    *((_OWORD *)a5 + 3) = v33;
    *((_OWORD *)a5 + 4) = v34;
    *((_OWORD *)a5 + 5) = v35;
    a5 += 48;
    v32 -= 16;
  }
  while (v32);
  a7 += v31 & 0xFFFFFFF0;
  if (v31 != (v31 & 0x1FFFFFFF0)) {
    goto LABEL_22;
  }
  return result;
}

int8x8_t *sub_10037B5E4(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if (a6 >= a7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v44 = 0;
    while (1)
    {
      if (a5 >= (unsigned __int8 *)result + a2 || &a5[2 * a2] <= (unsigned __int8 *)result)
      {
        __int16 v10 = &a5[2 * (a2 & 0xFFFFFFE0)];
        __int16 v46 = (int16x8_t *)(a5 + 32);
        uint64_t v47 = a2 & 0xFFFFFFE0;
        float64x2_t v48 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          int16x8_t v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          int16x8_t *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        uint64_t v45 = a2 & 0xFFFFFFE0;
        if (v45 == a2) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v45 = 0;
        __int16 v10 = a5;
      }
      uint64_t v53 = a2 - v45;
      uint64_t v54 = (unsigned __int8 *)result + v45;
      do
      {
        __int16 v55 = *v54++;
        *(_WORD *)__int16 v10 = v55 << 8;
        v10 += 2;
        --v53;
      }
      while (v53);
LABEL_42:
      ++v44;
      a5 = v10;
      if (v44 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  __int16 v10 = a5;
  do
  {
    int v11 = result;
    uint64_t v12 = a2;
    do
    {
      __int16 v13 = v11->u8[0];
      int v11 = (int8x8_t *)((char *)v11 + 1);
      *(_WORD *)__int16 v10 = v13 << 8;
      v10 += 2;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      uint64_t v14 = a6;
      do
      {
        uint64_t v15 = 0;
        long long v16 = (unsigned __int8 *)result + *(int *)(a3 + 4 * v14) * (uint64_t)(int)a2;
        do
        {
          __int16 v17 = *a4;
          if (*a4) {
            v17 *= v16[v15];
          }
          *(_WORD *)a5 = v17;
          __int16 v18 = a4[1];
          if (v18) {
            v18 *= v16[a2 + v15];
          }
          *(_WORD *)a5 = v18 + v17;
          a5 += 2;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8) {
    return result;
  }
  int v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  int16x8_t v20 = (unsigned __int8 *)result + v19 * (uint64_t)(int)a2;
  uint64_t v21 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v25 = v19 * (uint64_t)(int)a2;
    uint64_t v26 = 2 * a2;
    __int16 v27 = (unsigned __int8 *)result + a2 + v25;
    uint64_t v28 = a2 & 0xFFFFFFE0;
    uint64_t v29 = (int8x8_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        int32x4_t v30 = &a5[2 * (v21 & 0xFFFFFFE0)];
        uint64_t v31 = (int16x8_t *)(a5 + 32);
        uint64_t v32 = v21 & 0xFFFFFFE0;
        long long v33 = v29 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v33[-2].i8;
          _Q1 = *(int16x8_t *)v33->i8;
          int16x8_t v36 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v41 = vshll_n_s8(*v33, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v31[-2] = v36;
          v31[-1] = _Q0;
          int16x8_t *v31 = v41;
          v31[1] = _Q1;
          v31 += 4;
          v33 += 4;
          v32 -= 32;
        }
        while (v32);
        unint64_t result = (int8x8_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21) {
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t result = 0;
        int32x4_t v30 = a5;
      }
      uint64_t v42 = v21 - (void)result;
      unint64_t result = (int8x8_t *)((char *)result + (void)v29);
      do
      {
        __int16 v43 = result->u8[0];
        unint64_t result = (int8x8_t *)((char *)result + 1);
        *(_WORD *)int32x4_t v30 = v43 << 8;
        v30 += 2;
        --v42;
      }
      while (v42);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v22 = v20;
    uint64_t v23 = a2;
    do
    {
      __int16 v24 = *v22++;
      *(_WORD *)a5 = v24 << 8;
      a5 += 2;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

__int32 *sub_10037B8A4(__int32 *result, uint8x8_t a2, uint64_t a3, uint64_t a4, const float *a5, uint64_t a6, int a7, int a8, int a9)
{
  a2.i32[0] = *result;
  *(int16x4_t *)v9.i8 = vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a2), 8uLL);
  if (a7 < 2)
  {
    LODWORD(v12) = 0;
    if (a7 > 0)
    {
LABEL_5:
      *(void *)a6 = v9.i64[0];
      a6 += 8;
      LODWORD(v12) = v12 | 1;
      ++a5;
    }
  }
  else
  {
    int v10 = 0;
    *(void *)&long long v11 = v9.i64[0];
    *((void *)&v11 + 1) = v9.i64[0];
    LODWORD(v12) = a7 & 0xFFFFFFFE;
    do
    {
      *(_OWORD *)a6 = v11;
      a6 += 16;
      v10 += 2;
      a5 += 2;
    }
    while (v10 < a7 - 1);
    if ((int)v12 < a7) {
      goto LABEL_5;
    }
  }
  if ((int)v12 < a8 - 1)
  {
    uint64_t v12 = (int)v12;
    uint64_t v13 = a4 + 4 * (int)v12 + 4;
    uint64_t v14 = (int *)v13;
    do
    {
      uint64_t v16 = *v14;
      v14 += 2;
      uint64_t v15 = v16;
      if ((int)v16 + 3 > *(_DWORD *)(a4 + 4 * (a9 - 1))) {
        break;
      }
      int16x8_t v17 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&result[*(int *)(v13 - 4)]);
      int8x16_t v18 = (int8x16_t)vmovl_u8(*(uint8x8_t *)&result[v15]);
      v19.i64[0] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      v17.i64[1] = v18.i64[0];
      v19.i64[1] = vextq_s8(v18, v18, 8uLL).u64[0];
      int16x8_t v20 = a5;
      *(float32x2_t *)v18.i8 = vld1_dup_f32(v20++);
      int8x16_t v21 = (int8x16_t)vzip1q_s16(v17, v19);
      int8x16_t v22 = (int8x16_t)vzip2q_s16(v17, v19);
      int32x4_t v23 = vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v18.i8);
      int32x4_t v24 = vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(int16x4_t *)v18.i8);
      uint32x4_t v25 = (uint32x4_t)vaddq_s32(vuzp1q_s32(v23, v24), vuzp2q_s32(v23, v24));
      *(float32x2_t *)v23.i8 = vld1_dup_f32(v20);
      int32x4_t v26 = vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v23.i8);
      int32x4_t v27 = vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(int16x4_t *)v23.i8);
      uint32x4_t v9 = (uint32x4_t)vaddq_s32(vuzp1q_s32(v26, v27), vuzp2q_s32(v26, v27));
      *(uint16x8_t *)a6 = vqmovn_high_u32(vqmovn_u32(v25), v9);
      a6 += 16;
      v12 += 2;
      a5 += 2;
      uint64_t v13 = (uint64_t)v14;
    }
    while (v12 < a8 - 1);
  }
  if ((int)v12 >= a8)
  {
    a8 = v12;
  }
  else
  {
    uint64_t v28 = (int *)(a4 + 4 * (int)v12);
    uint64_t v29 = a8 - (uint64_t)(int)v12;
    do
    {
      uint64_t v30 = *v28++;
      uint64_t v31 = (unsigned __int8 *)&result[v30];
      *(_WORD *)a6 = *(_WORD *)a5 * *v31 + *((_WORD *)a5 + 1) * v31[4];
      *(_WORD *)(a6 + 2) = *(_WORD *)a5 * v31[1] + *((_WORD *)a5 + 1) * v31[5];
      *(_WORD *)(a6 + 4) = *(_WORD *)a5 * v31[2] + *((_WORD *)a5 + 1) * v31[6];
      __int16 v32 = *(_WORD *)a5 * v31[3] + *((_WORD *)a5 + 1) * v31[7];
      uint64_t v33 = a6 + 8;
      *(_WORD *)(a6 + 6) = v32;
      ++a5;
      a6 += 8;
      --v29;
    }
    while (v29);
    a6 = v33;
  }
  uint64_t v34 = a9 - 1;
  v9.i32[0] = result[*(int *)(a4 + 4 * v34)];
  *(int16x4_t *)v9.i8 = vshl_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v9.i8), 8uLL);
  if (a8 < (int)v34)
  {
    *(void *)&long long v35 = v9.i64[0];
    *((void *)&v35 + 1) = v9.i64[0];
    do
    {
      *(_OWORD *)a6 = v35;
      a6 += 16;
      a8 += 2;
    }
    while (a8 < (int)v34);
  }
  if (a8 < a9) {
    *(void *)a6 = v9.i64[0];
  }
  return result;
}

int8x8_t *sub_10037BAC8(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, unsigned __int8 *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if (a6 >= a7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v44 = 0;
    while (1)
    {
      if (a5 >= (unsigned __int8 *)result + a2 || &a5[2 * a2] <= (unsigned __int8 *)result)
      {
        int v10 = &a5[2 * (a2 & 0xFFFFFFE0)];
        __int16 v46 = (int16x8_t *)(a5 + 32);
        uint64_t v47 = a2 & 0xFFFFFFE0;
        float64x2_t v48 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          int16x8_t v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          int16x8_t *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        uint64_t v45 = a2 & 0xFFFFFFE0;
        if (v45 == a2) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v45 = 0;
        int v10 = a5;
      }
      uint64_t v53 = a2 - v45;
      uint64_t v54 = (unsigned __int8 *)result + v45;
      do
      {
        __int16 v55 = *v54++;
        *(_WORD *)int v10 = v55 << 8;
        v10 += 2;
        --v53;
      }
      while (v53);
LABEL_42:
      ++v44;
      a5 = v10;
      if (v44 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = a5;
  do
  {
    long long v11 = result;
    uint64_t v12 = a2;
    do
    {
      __int16 v13 = v11->u8[0];
      long long v11 = (int8x8_t *)((char *)v11 + 1);
      *(_WORD *)int v10 = v13 << 8;
      v10 += 2;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      uint64_t v14 = a6;
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = (unsigned __int8 *)result + *(int *)(a3 + 4 * v14) * (uint64_t)(int)a2;
        do
        {
          __int16 v17 = *a4;
          if (*a4) {
            v17 *= v16[v15];
          }
          *(_WORD *)a5 = v17;
          __int16 v18 = a4[1];
          if (v18) {
            v18 *= v16[a2 + v15];
          }
          *(_WORD *)a5 = v18 + v17;
          a5 += 2;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8) {
    return result;
  }
  int v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  int16x8_t v20 = (unsigned __int8 *)result + v19 * (uint64_t)(int)a2;
  uint64_t v21 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v25 = v19 * (uint64_t)(int)a2;
    uint64_t v26 = 2 * a2;
    int32x4_t v27 = (unsigned __int8 *)result + a2 + v25;
    uint64_t v28 = a2 & 0xFFFFFFE0;
    uint64_t v29 = (int8x8_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        uint64_t v30 = &a5[2 * (v21 & 0xFFFFFFE0)];
        uint64_t v31 = (int16x8_t *)(a5 + 32);
        uint64_t v32 = v21 & 0xFFFFFFE0;
        uint64_t v33 = v29 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v33[-2].i8;
          _Q1 = *(int16x8_t *)v33->i8;
          int16x8_t v36 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v41 = vshll_n_s8(*v33, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v31[-2] = v36;
          v31[-1] = _Q0;
          int16x8_t *v31 = v41;
          v31[1] = _Q1;
          v31 += 4;
          v33 += 4;
          v32 -= 32;
        }
        while (v32);
        unint64_t result = (int8x8_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21) {
          goto LABEL_31;
        }
      }
      else
      {
        unint64_t result = 0;
        uint64_t v30 = a5;
      }
      uint64_t v42 = v21 - (void)result;
      unint64_t result = (int8x8_t *)((char *)result + (void)v29);
      do
      {
        __int16 v43 = result->u8[0];
        unint64_t result = (int8x8_t *)((char *)result + 1);
        *(_WORD *)uint64_t v30 = v43 << 8;
        v30 += 2;
        --v42;
      }
      while (v42);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    int8x16_t v22 = v20;
    uint64_t v23 = a2;
    do
    {
      __int16 v24 = *v22++;
      *(_WORD *)a5 = v24 << 8;
      a5 += 2;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

int8x8_t *sub_10037BD88(int8x8_t *result, unsigned int a2, uint64_t a3, const __int16 *a4, unint64_t a5, uint64_t a6, int a7, int a8)
{
  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 > 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (const __int16 *)((char *)a4 + v8);
    if ((int)a6 < a7) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v14 = (int16x8_t *)a5;
    goto LABEL_32;
  }
  if (a2 >= 0x20)
  {
    int v18 = 0;
    while (1)
    {
      if (a5 >= (unint64_t)result + a2 || a5 + 2 * a2 <= (unint64_t)result)
      {
        int v10 = (_WORD *)(a5 + 2 * (a2 & 0xFFFFFFE0));
        int16x8_t v20 = (int16x8_t *)(a5 + 32);
        uint64_t v21 = a2 & 0xFFFFFFE0;
        int8x16_t v22 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v22[-2].i8;
          _Q1 = *(int16x8_t *)v22->i8;
          int16x8_t v25 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v29 = vshll_n_s8(*v22, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v20[-2] = v25;
          v20[-1] = _Q0;
          *int16x8_t v20 = v29;
          v20[1] = _Q1;
          v20 += 4;
          v22 += 4;
          v21 -= 32;
        }
        while (v21);
        uint64_t v19 = a2 & 0xFFFFFFE0;
        if (v19 == a2) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v19 = 0;
        int v10 = (_WORD *)a5;
      }
      uint64_t v30 = (int8x8_t *)((char *)result + v19);
      uint64_t v31 = a2 - v19;
      do
      {
        __int16 v32 = v30->u8[0];
        uint64_t v30 = (int8x8_t *)((char *)v30 + 1);
        *v10++ = v32 << 8;
        --v31;
      }
      while (v31);
LABEL_21:
      ++v18;
      a5 = (unint64_t)v10;
      if (v18 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = (_WORD *)a5;
  do
  {
    long long v11 = result;
    uint64_t v12 = a2;
    do
    {
      __int16 v13 = v11->u8[0];
      long long v11 = (int8x8_t *)((char *)v11 + 1);
      *v10++ = v13 << 8;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (const __int16 *)((char *)a4 + v8);
  a5 = (unint64_t)v10;
  if ((int)a6 >= a7) {
    goto LABEL_17;
  }
LABEL_9:
  if ((int)a2 < 1)
  {
    uint64_t v14 = (int16x8_t *)a5;
    LODWORD(a6) = a7;
    goto LABEL_32;
  }
  a6 = a6;
  if (a2 >= 0x10)
  {
    uint64_t v54 = 0;
    uint64_t v55 = 2 * a2;
    int16x8_t v56 = a4;
    while (1)
    {
      uint64_t v57 = 0;
      int v58 = *(_DWORD *)(a3 + 4 * a6);
      int16x8_t v59 = (uint8x16_t *)((char *)result + v58 * (uint64_t)(int)a2);
      unint64_t v60 = a5 + v55;
      unint64_t v61 = (unint64_t)result + a2 + v58 * (uint64_t)(int)a2;
      BOOL v63 = a5 < (unint64_t)result + v55 + v58 * (uint64_t)(int)a2 && v61 < v60;
      BOOL v65 = a5 < v61 && (unint64_t)v59 < v60;
      BOOL v66 = (unint64_t)v56 >= v60 || a5 >= (unint64_t)&a4[2 * v54 + 2];
      if (!v66 || v63 || v65)
      {
        uint64_t v14 = (int16x8_t *)a5;
      }
      else
      {
        uint64_t v14 = (int16x8_t *)(a5 + 2 * (a2 & 0xFFFFFFF0));
        uint64_t v67 = v56;
        int16x8_t v68 = vld1q_dup_s16(v67++);
        int16x8_t v69 = vld1q_dup_s16(v67);
        uint64_t v70 = a2 & 0xFFFFFFF0;
        do
        {
          uint8x16_t v71 = *(uint8x16_t *)((char *)v59 + a2);
          int16x8_t v72 = vmlaq_s16(vmulq_s16(v68, (int16x8_t)vmovl_high_u8(*v59)), v69, (int16x8_t)vmovl_high_u8(v71));
          *(int16x8_t *)a5 = vmlaq_s16(vmulq_s16(v68, (int16x8_t)vmovl_u8(*(uint8x8_t *)v59->i8)), v69, (int16x8_t)vmovl_u8(*(uint8x8_t *)v71.i8));
          *(int16x8_t *)(a5 + 16) = v72;
          a5 += 32;
          ++v59;
          v70 -= 16;
        }
        while (v70);
        uint64_t v57 = a2 & 0x7FFFFFF0;
        if ((a2 & 0xFFFFFFF0) == (unint64_t)a2) {
          goto LABEL_51;
        }
      }
      double v73 = (int8x8_t *)((char *)result + v57 + v58 * (uint64_t)(int)a2);
      do
      {
        __int16 v74 = *v56 * v73->u8[0];
        v14->i16[0] = v74;
        v14->i16[0] = v74 + v56[1] * v73->u8[a2];
        uint64_t v14 = (int16x8_t *)((char *)v14 + 2);
        ++v57;
        double v73 = (int8x8_t *)((char *)v73 + 1);
      }
      while (a2 != v57);
LABEL_51:
      ++a6;
      v56 += 2;
      ++v54;
      a5 = (unint64_t)v14;
      if ((int)a6 >= a7) {
        goto LABEL_32;
      }
    }
  }
  uint64_t v14 = (int16x8_t *)a5;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = (char *)result + *(int *)(a3 + 4 * a6) * (uint64_t)(int)a2;
    do
    {
      __int16 v17 = *a4 * v16[v15];
      v14->i16[0] = v17;
      v14->i16[0] = v17 + a4[1] * v16[a2 + v15];
      uint64_t v14 = (int16x8_t *)((char *)v14 + 2);
      ++v15;
    }
    while (a2 != v15);
    ++a6;
    a4 += 2;
  }
  while ((int)a6 < a7);
LABEL_32:
  if ((int)a6 >= a8 || (int)a2 < 1) {
    return result;
  }
  int v33 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  uint64_t v34 = (unsigned __int8 *)result + v33 * (uint64_t)(int)a2;
  uint64_t v35 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v39 = v33 * (uint64_t)(int)a2;
    uint64_t v40 = 2 * a2;
    unint64_t v41 = (unint64_t)result + a2 + v39;
    uint64_t v42 = a2 & 0xFFFFFFE0;
    __int16 v43 = (int8x8_t *)((char *)result + v39);
    while (1)
    {
      if ((unint64_t)v14 >= v41 || v34 >= &v14->u8[v40])
      {
        int v44 = (int16x8_t *)((char *)v14 + 2 * (v35 & 0xFFFFFFE0));
        uint64_t v45 = v14 + 2;
        uint64_t v46 = v35 & 0xFFFFFFE0;
        uint64_t v47 = v43 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v47[-2].i8;
          _Q1 = *(int16x8_t *)v47->i8;
          int16x8_t v50 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v51 = vshll_n_s8(*v47, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v45[-2] = v50;
          v45[-1] = _Q0;
          *uint64_t v45 = v51;
          v45[1] = _Q1;
          v45 += 4;
          v47 += 4;
          v46 -= 32;
        }
        while (v46);
        unint64_t result = (int8x8_t *)(v35 & 0x7FFFFFE0);
        if (v42 == v35) {
          goto LABEL_40;
        }
      }
      else
      {
        unint64_t result = 0;
        int v44 = v14;
      }
      int16x8_t v52 = (int8x8_t *)((char *)result + (void)v43);
      unint64_t result = (int8x8_t *)(v35 - (void)result);
      do
      {
        __int16 v53 = v52->u8[0];
        int16x8_t v52 = (int8x8_t *)((char *)v52 + 1);
        v44->i16[0] = v53 << 8;
        int v44 = (int16x8_t *)((char *)v44 + 2);
        unint64_t result = (int8x8_t *)((char *)result - 1);
      }
      while (result);
LABEL_40:
      LODWORD(a6) = a6 + 1;
      uint64_t v14 = v44;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    int16x8_t v36 = v34;
    uint64_t v37 = a2;
    do
    {
      __int16 v38 = *v36++;
      v14->i16[0] = v38 << 8;
      uint64_t v14 = (int16x8_t *)((char *)v14 + 2);
      --v37;
    }
    while (v37);
    LODWORD(a6) = a6 + 1;
  }
  while (a6 != a8);
  return result;
}

int8x8_t *sub_10037C178(int8x8_t *result, unsigned int a2, uint64_t a3, __int16 *a4, int16x8_t *a5, uint64_t a6, int a7, int a8)
{
  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 4 * (a6 - 1) + 4;
  if ((int)a2 <= 0)
  {
    a4 = (__int16 *)((char *)a4 + v8);
    if ((int)a6 >= a7) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v18 = 0;
    while (1)
    {
      if (a5 >= (int16x8_t *)((char *)result + a2) || (char *)a5 + 2 * a2 <= (char *)result)
      {
        int v10 = (int16x8_t *)((char *)a5 + 2 * (a2 & 0xFFFFFFE0));
        int16x8_t v20 = a5 + 2;
        uint64_t v21 = a2 & 0xFFFFFFE0;
        int8x16_t v22 = result + 2;
        do
        {
          _Q0 = *(int16x8_t *)v22[-2].i8;
          _Q1 = *(int16x8_t *)v22->i8;
          int16x8_t v25 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v30 = vshll_n_s8(*v22, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v20[-2] = v25;
          v20[-1] = _Q0;
          *int16x8_t v20 = v30;
          v20[1] = _Q1;
          v20 += 4;
          v22 += 4;
          v21 -= 32;
        }
        while (v21);
        uint64_t v19 = a2 & 0xFFFFFFE0;
        if (v19 == a2) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v19 = 0;
        int v10 = a5;
      }
      uint64_t v31 = (int8x8_t *)((char *)result + v19);
      uint64_t v32 = a2 - v19;
      do
      {
        __int16 v33 = v31->u8[0];
        uint64_t v31 = (int8x8_t *)((char *)v31 + 1);
        v10->i16[0] = v33 << 8;
        int v10 = (int16x8_t *)((char *)v10 + 2);
        --v32;
      }
      while (v32);
LABEL_23:
      ++v18;
      a5 = v10;
      if (v18 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = a5;
  do
  {
    long long v11 = result;
    uint64_t v12 = a2;
    do
    {
      __int16 v13 = v11->u8[0];
      long long v11 = (int8x8_t *)((char *)v11 + 1);
      v10->i16[0] = v13 << 8;
      int v10 = (int16x8_t *)((char *)v10 + 2);
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (__int16 *)((char *)a4 + v8);
  a5 = v10;
  if ((int)a6 < a7)
  {
LABEL_13:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      a6 = a6;
      do
      {
        uint64_t v14 = 0;
        uint64_t v15 = (char *)result + *(int *)(a3 + 4 * a6) * (uint64_t)(int)a2;
        do
        {
          __int16 v16 = *a4;
          if (*a4) {
            v16 *= v15[v14];
          }
          a5->i16[0] = v16;
          __int16 v17 = a4[1];
          if (v17) {
            v17 *= v15[a2 + v14];
          }
          a5->i16[0] = v17 + v16;
          a5 = (int16x8_t *)((char *)a5 + 2);
          ++v14;
        }
        while (a2 != v14);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_34:
  if ((int)a6 >= a8 || (int)a2 < 1) {
    return result;
  }
  int v34 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  uint64_t v35 = (unsigned __int8 *)result + v34 * (uint64_t)(int)a2;
  uint64_t v36 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v40 = v34 * (uint64_t)(int)a2;
    uint64_t v41 = 2 * a2;
    unint64_t v42 = (unint64_t)result + a2 + v40;
    uint64_t v43 = a2 & 0xFFFFFFE0;
    int v44 = (int8x8_t *)((char *)result + v40);
    while (1)
    {
      if ((unint64_t)a5 >= v42 || v35 >= &a5->u8[v41])
      {
        uint64_t v45 = (int16x8_t *)((char *)a5 + 2 * (v36 & 0xFFFFFFE0));
        uint64_t v46 = a5 + 2;
        uint64_t v47 = v36 & 0xFFFFFFE0;
        float64x2_t v48 = v44 + 2;
        do
        {
          _Q0 = *(int16x8_t *)v48[-2].i8;
          _Q1 = *(int16x8_t *)v48->i8;
          int16x8_t v51 = vshll_n_s8(*(int8x8_t *)_Q0.i8, 8uLL);
          __asm { SHLL2           V0.8H, V0.16B, #8 }
          int16x8_t v52 = vshll_n_s8(*v48, 8uLL);
          __asm { SHLL2           V1.8H, V1.16B, #8 }
          v46[-2] = v51;
          v46[-1] = _Q0;
          int16x8_t *v46 = v52;
          v46[1] = _Q1;
          v46 += 4;
          v48 += 4;
          v47 -= 32;
        }
        while (v47);
        unint64_t result = (int8x8_t *)(v36 & 0x7FFFFFE0);
        if (v43 == v36) {
          goto LABEL_42;
        }
      }
      else
      {
        unint64_t result = 0;
        uint64_t v45 = a5;
      }
      __int16 v53 = (int8x8_t *)((char *)result + (void)v44);
      unint64_t result = (int8x8_t *)(v36 - (void)result);
      do
      {
        __int16 v54 = v53->u8[0];
        __int16 v53 = (int8x8_t *)((char *)v53 + 1);
        v45->i16[0] = v54 << 8;
        uint64_t v45 = (int16x8_t *)((char *)v45 + 2);
        unint64_t result = (int8x8_t *)((char *)result - 1);
      }
      while (result);
LABEL_42:
      LODWORD(a6) = a6 + 1;
      a5 = v45;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v37 = v35;
    uint64_t v38 = a2;
    do
    {
      __int16 v39 = *v37++;
      a5->i16[0] = v39 << 8;
      a5 = (int16x8_t *)((char *)a5 + 2);
      --v38;
    }
    while (v38);
    LODWORD(a6) = a6 + 1;
  }
  while (a6 != a8);
  return result;
}

uint64_t sub_10037C438(uint64_t a1, int a2, unsigned int *a3, _WORD *a4)
{
  sub_1002C7414(&v15, a2);
  unint64_t v14 = 0x3FE0000000000000;
  sub_1002C7984(&v15, &v14, &v17);
  sub_1002C79DC((unint64_t *)a1, &v17, (unint64_t *)&v18);
  unint64_t v13 = 0x3FE0000000000000;
  sub_1002C79B0((unint64_t *)&v18, &v13, (unint64_t *)&v16);
  uint64_t result = sub_1002C76EC(&v16);
  if ((result & 0x80000000) != 0 || (int v9 = *(_DWORD *)(a1 + 8), v9 < 2))
  {
    if (*(_DWORD *)(a1 + 12) <= a2 + 1) {
      int v11 = a2 + 1;
    }
    else {
      int v11 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    unsigned int v10 = v9 - 1;
    if (result >= v10)
    {
      *a3 = v10;
      int v12 = *(_DWORD *)(a1 + 16);
      if (v12 >= a2) {
        int v12 = a2;
      }
      *(_DWORD *)(a1 + 16) = v12;
    }
    else
    {
      *a3 = result;
      sub_1002C7414(&v14, result);
      sub_1002C79B0((unint64_t *)&v16, &v14, &v15);
      if ((v15 & 0x8000000000000000) != 0)
      {
        uint64_t result = 0;
      }
      else
      {
        sub_1002C7414(&v17, 256);
        sub_1002C79DC(&v15, &v17, (unint64_t *)&v18);
        uint64_t result = sub_1002C7638(&v18);
      }
      a4[1] = result;
      *a4 = 256 - result;
    }
  }
  return result;
}

void sub_10037C5A4(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unsigned char *sub_10037C5DC(uint64_t a1, int *a2)
{
  uint64_t v3 = 2 * *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 56);
  bzero(v206, 0x410uLL);
  v204 = v206;
  uint64_t v205 = v3;
  if (v3 >= 0x209) {
    operator new[]();
  }
  LODWORD(v4) = *a2;
  int v5 = *(_DWORD *)(a1 + 104);
  if (v5 <= *a2) {
    int v6 = *a2;
  }
  else {
    int v6 = *(_DWORD *)(a1 + 104);
  }
  if (a2[1] >= *(_DWORD *)(a1 + 108)) {
    int v7 = *(_DWORD *)(a1 + 108);
  }
  else {
    int v7 = a2[1];
  }
  int v201 = v7;
  if ((int)v4 >= v5)
  {
    int v8 = 0;
    int v9 = -2;
    if ((int)v4 >= v6)
    {
LABEL_11:
      if ((int)v4 < v7) {
        goto LABEL_51;
      }
LABEL_12:
      unsigned int v10 = v204;
      uint64_t v11 = *(int *)(a1 + 28);
      if (v9 + 2 <= (int)v11) {
        goto LABEL_130;
      }
      goto LABEL_13;
    }
  }
  else
  {
    (*(void (**)(void, void, void, void, unsigned char *, void, void, void))(a1 + 112))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v206, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    LODWORD(v4) = *a2;
    int v8 = 1;
    int v9 = -1;
    int v7 = v201;
    if (*a2 >= v6) {
      goto LABEL_11;
    }
  }
  uint64_t v4 = (int)v4;
  unint64_t v14 = (uint16x8_t *)&unk_1004F7000;
  v15.i64[0] = 0x7000700070007;
  v15.i64[1] = 0x7000700070007;
  int16x8_t v16 = 0uLL;
  do
  {
    unint64_t v17 = v204;
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 40);
    int v20 = *(_DWORD *)(a1 + 48);
    int v21 = *(_DWORD *)(a1 + 56);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7D40, memory_order_acquire) & 1) == 0)
    {
      int v197 = v9;
      int v48 = __cxa_guard_acquire(&qword_1004F7D40);
      int16x8_t v16 = 0uLL;
      v15.i64[0] = 0x7000700070007;
      v15.i64[1] = 0x7000700070007;
      unint64_t v14 = (uint16x8_t *)&unk_1004F7000;
      *(void *)&long long v49 = 0x80008000800080;
      *((void *)&v49 + 1) = 0x80008000800080;
      int v7 = v201;
      int v9 = v197;
      if (v48)
      {
        xmmword_1004F7D60 = v49;
        __cxa_guard_release(&qword_1004F7D40);
        int16x8_t v16 = 0uLL;
        v15.i64[0] = 0x7000700070007;
        v15.i64[1] = 0x7000700070007;
        unint64_t v14 = (uint16x8_t *)&unk_1004F7000;
        int v7 = v201;
        int v9 = v197;
      }
    }
    unint64_t v22 = v18 + v19 * v4;
    int v23 = v21 * v20;
    if (v21 * v20 < 16)
    {
      unsigned int v28 = 0;
      if (v23 <= 0) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint16x8_t v25 = v14[214];
      do
      {
        uint16x8_t v26 = *(uint16x8_t *)v17;
        uint16x8_t v27 = *((uint16x8_t *)v17 + 1);
        v17 += 2;
        *(uint8x16_t *)(v22 + v24) = vqmovn_high_u16(vqmovn_u16(vshlq_u16(vqaddq_u16(v26, v25), v15)), vshlq_u16(vqaddq_u16(v27, v25), v15));
        v24 += 16;
      }
      while ((int)v24 < v23 - 15);
      unsigned int v28 = v23 & 0xFFFFFFF0;
      v22 += v24;
      if ((int)(v23 & 0xFFFFFFF0) >= v23) {
        goto LABEL_19;
      }
    }
    uint64_t v29 = v23 + ~v28;
    if (v29 < 7
      || (v22 < (unint64_t)v17 + 2 * v29 + 2 ? (BOOL v30 = (unint64_t)v17 >= v22 + v29 + 1) : (BOOL v30 = 1), !v30))
    {
      __int16 v33 = (__int16 *)v17;
      int v34 = (unsigned char *)v22;
      goto LABEL_36;
    }
    uint64_t v31 = v29 + 1;
    if (v29 >= 0x1F)
    {
      uint64_t v32 = v31 & 0x1FFFFFFE0;
      uint64_t v37 = (int8x16_t *)(v22 + 16);
      uint64_t v38 = (int16x8_t *)(v17 + 2);
      uint64_t v39 = v31 & 0x1FFFFFFE0;
      do
      {
        int16x8_t v41 = v38[-2];
        int16x8_t v40 = v38[-1];
        int16x8_t v43 = *v38;
        int16x8_t v42 = v38[1];
        v38 += 4;
        v37[-1] = vraddhn_high_s16(vraddhn_s16(v41, v16), v40, v16);
        *uint64_t v37 = vraddhn_high_s16(vraddhn_s16(v43, v16), v42, v16);
        v37 += 2;
        v39 -= 32;
      }
      while (v39);
      if (v31 == v32) {
        goto LABEL_19;
      }
      if ((v31 & 0x18) == 0)
      {
        int v34 = (unsigned char *)(v22 + v32);
        __int16 v33 = (__int16 *)v17 + v32;
        v28 += v32;
LABEL_36:
        unsigned int v35 = v23 - v28;
        do
        {
          __int16 v36 = *v33++;
          *v34++ = (unsigned __int16)(v36 + 128) >> 8;
          --v35;
        }
        while (v35);
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v32 = 0;
    }
    v28 += v31 & 0xFFFFFFF8;
    __int16 v33 = (__int16 *)v17 + (v31 & 0x1FFFFFFF8);
    int v34 = (unsigned char *)(v22 + (v31 & 0x1FFFFFFF8));
    int v44 = (int8x8_t *)(v22 + v32);
    uint64_t v45 = v32 - (v31 & 0x1FFFFFFF8);
    uint64_t v46 = (int16x8_t *)((char *)v17 + 2 * v32);
    do
    {
      int16x8_t v47 = *v46++;
      *v44++ = vraddhn_s16(v47, v16);
      v45 += 8;
    }
    while (v45);
    if (v31 != (v31 & 0x1FFFFFFF8)) {
      goto LABEL_36;
    }
LABEL_19:
    ++v4;
  }
  while (v6 != v4);
  LODWORD(v4) = v6;
  if (v6 >= v7) {
    goto LABEL_12;
  }
LABEL_51:
  uint64_t v50 = (int)v4;
  v51.i64[0] = 0x800000008000;
  v51.i64[1] = 0x800000008000;
  v52.i64[0] = 0xF0000000FLL;
  v52.i64[1] = 0xF0000000FLL;
  v53.i64[0] = 0xFF000000FFLL;
  v53.i64[1] = 0xFF000000FFLL;
  int8x16_t v54 = (int8x16_t)xmmword_1004047D0;
  int8x16_t v55 = (int8x16_t)xmmword_1004047C0;
  while (2)
  {
    int v56 = v9;
    uint64_t v57 = *(void *)(a1 + 72);
    int v58 = v9 + 2;
    int v9 = *(_DWORD *)(v57 + 4 * v50);
    if (v9 <= v58) {
      int v59 = v58;
    }
    else {
      int v59 = *(_DWORD *)(v57 + 4 * v50);
    }
    int v60 = v9 + 2;
    int v61 = *(_DWORD *)(a1 + 28);
    if (v61 < v9 + 2) {
      int v60 = *(_DWORD *)(a1 + 28);
    }
    if (v59 < v60)
    {
      uint64_t v62 = v59;
      do
      {
        (*(void (**)(uint64_t))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v62++);
        int v9 = *(_DWORD *)(v57 + 4 * v50);
        int v8 = (v8 & 1) == 0;
        int v63 = v9 + 2;
        int v61 = *(_DWORD *)(a1 + 28);
        if (v61 < v9 + 2) {
          int v63 = *(_DWORD *)(a1 + 28);
        }
      }
      while (v62 < v63);
      int v7 = v201;
      v51.i64[0] = 0x800000008000;
      v51.i64[1] = 0x800000008000;
      v52.i64[0] = 0xF0000000FLL;
      v52.i64[1] = 0xF0000000FLL;
      v53.i64[0] = 0xFF000000FFLL;
      v53.i64[1] = 0xFF000000FFLL;
      int8x16_t v55 = (int8x16_t)xmmword_1004047C0;
      int8x16_t v54 = (int8x16_t)xmmword_1004047D0;
    }
    int v64 = v61 - 2;
    if (v9 <= v64) {
      int v65 = v64;
    }
    else {
      int v65 = v9;
    }
    int v66 = v65 + v8;
    if (v56 > v64) {
      int v64 = v56;
    }
    int v67 = v66 - v64;
    int v203 = 0;
    if (v67 >= 0) {
      int v8 = v67 & 1;
    }
    else {
      int v8 = -(v67 & 1);
    }
    uint64_t v68 = *(void *)(a1 + 88);
    int v69 = 2 * v50;
    if (v8 < 1)
    {
      __int16 v70 = 0;
      uint64_t v71 = 0;
    }
    else
    {
      __int16 v70 = *(_WORD *)(v68 + 2 * (v69 | 1));
      uint64_t v71 = 1;
    }
    LOWORD(v203) = v70;
    uint64_t v72 = v69 - v8;
    *(_WORD *)((unint64_t)&v203 | (2 * v71)) = *(_WORD *)(v68 + 2 * (v71 + v72));
    if (v8 <= 0) {
      HIWORD(v203) = *(_WORD *)(v68 + 2 * v72 + 2);
    }
    double v73 = v204;
    int v74 = *(_DWORD *)(a1 + 48);
    int v75 = *(_DWORD *)(a1 + 56);
    uint64_t v76 = *(void *)(a1 + 32);
    uint64_t v77 = *(void *)(a1 + 40);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7D48, memory_order_acquire) & 1) == 0)
    {
      int v198 = v9;
      int v154 = __cxa_guard_acquire(&qword_1004F7D48);
      int8x16_t v55 = (int8x16_t)xmmword_1004047C0;
      int8x16_t v54 = (int8x16_t)xmmword_1004047D0;
      v53.i64[0] = 0xFF000000FFLL;
      v53.i64[1] = 0xFF000000FFLL;
      v52.i64[0] = 0xF0000000FLL;
      v52.i64[1] = 0xF0000000FLL;
      v51.i64[0] = 0x800000008000;
      v51.i64[1] = 0x800000008000;
      int v7 = v201;
      int v9 = v198;
      if (v154)
      {
        xmmword_1004F7D70 = (__int128)v51;
        __cxa_guard_release(&qword_1004F7D48);
        int8x16_t v55 = (int8x16_t)xmmword_1004047C0;
        int8x16_t v54 = (int8x16_t)xmmword_1004047D0;
        v53.i64[0] = 0xFF000000FFLL;
        v53.i64[1] = 0xFF000000FFLL;
        v52.i64[0] = 0xF0000000FLL;
        v52.i64[1] = 0xF0000000FLL;
        v51.i64[0] = 0x800000008000;
        v51.i64[1] = 0x800000008000;
        int v7 = v201;
        int v9 = v198;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7D50, memory_order_acquire) & 1) == 0)
    {
      int v199 = v9;
      int v155 = __cxa_guard_acquire(&qword_1004F7D50);
      int8x16_t v55 = (int8x16_t)xmmword_1004047C0;
      int8x16_t v54 = (int8x16_t)xmmword_1004047D0;
      v53.i64[0] = 0xFF000000FFLL;
      v53.i64[1] = 0xFF000000FFLL;
      v52.i64[0] = 0xF0000000FLL;
      v52.i64[1] = 0xF0000000FLL;
      v51.i64[0] = 0x800000008000;
      v51.i64[1] = 0x800000008000;
      int v7 = v201;
      int v9 = v199;
      if (v155)
      {
        *(void *)&long long v156 = 0x8000800080008000;
        *((void *)&v156 + 1) = 0x8000800080008000;
        xmmword_1004F7D80 = v156;
        __cxa_guard_release(&qword_1004F7D50);
        int8x16_t v55 = (int8x16_t)xmmword_1004047C0;
        int8x16_t v54 = (int8x16_t)xmmword_1004047D0;
        v53.i64[0] = 0xFF000000FFLL;
        v53.i64[1] = 0xFF000000FFLL;
        v52.i64[0] = 0xF0000000FLL;
        v52.i64[1] = 0xF0000000FLL;
        v51.i64[0] = 0x800000008000;
        v51.i64[1] = 0x800000008000;
        int v7 = v201;
        int v9 = v199;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7D58, memory_order_acquire) & 1) == 0)
    {
      int v200 = v9;
      int v157 = __cxa_guard_acquire(&qword_1004F7D58);
      int8x16_t v55 = (int8x16_t)xmmword_1004047C0;
      int8x16_t v54 = (int8x16_t)xmmword_1004047D0;
      v53.i64[0] = 0xFF000000FFLL;
      v53.i64[1] = 0xFF000000FFLL;
      v52.i64[0] = 0xF0000000FLL;
      v52.i64[1] = 0xF0000000FLL;
      v51.i64[0] = 0x800000008000;
      v51.i64[1] = 0x800000008000;
      int v7 = v201;
      int v9 = v200;
      if (v157)
      {
        *(void *)&long long v158 = 0x8080808080808080;
        *((void *)&v158 + 1) = 0x8080808080808080;
        xmmword_1004F7D90 = v158;
        __cxa_guard_release(&qword_1004F7D58);
        int8x16_t v55 = (int8x16_t)xmmword_1004047C0;
        int8x16_t v54 = (int8x16_t)xmmword_1004047D0;
        v53.i64[0] = 0xFF000000FFLL;
        v53.i64[1] = 0xFF000000FFLL;
        v52.i64[0] = 0xF0000000FLL;
        v52.i64[1] = 0xF0000000FLL;
        v51.i64[0] = 0x800000008000;
        v51.i64[1] = 0x800000008000;
        int v7 = v201;
        int v9 = v200;
      }
    }
    uint64_t v78 = v75 * v74;
    unint64_t v79 = v76 + v77 * v50;
    if ((int)v78 < 16)
    {
      int v111 = 0;
      uint64_t v112 = (uint16x8_t *)((char *)v73 + 2 * v78);
      if ((int)v78 <= 0) {
        goto LABEL_52;
      }
LABEL_86:
      int v113 = HIWORD(v203);
      uint64_t v114 = (v78 + ~v111);
      if (v114 < 7
        || ((unint64_t v115 = v79 + v114 + 1, v79 < (unint64_t)v73 + 2 * v114 + 2)
          ? (BOOL v116 = (unint64_t)v73 >= v115)
          : (BOOL v116 = 1),
            v116 ? (char v117 = 0) : (char v117 = 1),
            v79 < (unint64_t)&v203 + 2 ? (BOOL v118 = (unint64_t)&v203 >= v115) : (BOOL v118 = 1),
            v118 ? (char v119 = 0) : (char v119 = 1),
            (unint64_t)v112 < v115 ? (BOOL v120 = v79 >= (unint64_t)v112->u64 + 2 * v114 + 2) : (BOOL v120 = 1),
            !v120 || (v117 & 1) != 0 || (v119 & 1) != 0))
      {
        uint64_t v125 = (unsigned __int16 *)v112;
        uint64_t v126 = (unsigned __int16 *)v73;
        uint64_t v127 = (unsigned char *)v79;
      }
      else
      {
        uint64_t v121 = v114 + 1;
        int16x8_t v122 = vdupq_n_s16(HIWORD(v203));
        if (v114 < 0xF)
        {
          uint64_t v123 = 0;
LABEL_108:
          uint64_t v124 = v121 & 0x1FFFFFFF8;
          uint64_t v125 = &v112->u16[v124];
          v111 += v121 & 0xFFFFFFF8;
          uint64_t v126 = (unsigned __int16 *)((char *)v73 + v124 * 2);
          uint64_t v127 = (unsigned char *)(v79 + (v121 & 0x1FFFFFFF8));
          uint16x4_t v128 = (uint16x4_t)vld1_dup_s16((const __int16 *)&v203);
          int16x8_t v129 = (int16x8_t)vmovl_u16(v128);
          uint64_t v130 = (void *)(v79 + v123);
          uint64_t v131 = (uint16x8_t *)((char *)v73 + 2 * v123);
          uint64_t v132 = (uint16x8_t *)((char *)v112 + 2 * v123);
          uint64_t v133 = v123 - (v121 & 0x1FFFFFFF8);
          do
          {
            uint16x8_t v134 = *v131++;
            uint32x4_t v135 = vmull_high_u16((uint16x8_t)vuzp1q_s16(v122, v129), v134);
            uint32x4_t v136 = vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v129), *(uint16x4_t *)v134.i8);
            uint16x8_t v137 = *v132++;
            v207.val[1] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(v135, (uint16x8_t)v122, v137), v51), 0x10uLL), v53);
            v207.val[0] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v136, *(uint16x4_t *)v122.i8, *(uint16x4_t *)v137.i8), v51), 0x10uLL), v53);
            *v130++ = vqtbl2q_s8(v207, v54).u64[0];
            v133 += 8;
          }
          while (v133);
          if (v121 == (v121 & 0x1FFFFFFF8)) {
            goto LABEL_52;
          }
          goto LABEL_113;
        }
        uint16x4_t v143 = (uint16x4_t)vld1_dup_s16((const __int16 *)&v203);
        uint64_t v123 = v121 & 0x1FFFFFFF0;
        int16x8_t v144 = (int16x8_t)vmovl_u16(v143);
        uint64_t v145 = v121 & 0x1FFFFFFF0;
        float64x2_t v146 = v112;
        float64x2_t v147 = (uint16x8_t *)v73;
        float64x2_t v148 = (int8x16_t *)v79;
        do
        {
          uint16x8_t v149 = *v147;
          uint16x8_t v150 = v147[1];
          v147 += 2;
          uint16x4_t v151 = (uint16x4_t)vmovn_s32((int32x4_t)v144);
          uint16x8_t v153 = *v146;
          uint16x8_t v152 = v146[1];
          v146 += 2;
          v208.val[1] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v122, v144), v149), (uint16x8_t)v122, v153), v51), 0x10uLL), v53);
          v208.val[0] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(v151, *(uint16x4_t *)v149.i8), *(uint16x4_t *)v122.i8, *(uint16x4_t *)v153.i8), v51), 0x10uLL), v53);
          v208.val[2] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmull_u16(v151, *(uint16x4_t *)v150.i8), *(uint16x4_t *)v122.i8, *(uint16x4_t *)v152.i8), v51), 0x10uLL), v53);
          v208.val[3] = (int8x16_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v122, v144), v150), (uint16x8_t)v122, v152), v51), 0x10uLL), v53);
          *v148++ = vqtbl4q_s8(v208, v55);
          v145 -= 16;
        }
        while (v145);
        if (v121 == v123) {
          goto LABEL_52;
        }
        if ((v121 & 8) != 0) {
          goto LABEL_108;
        }
        uint64_t v127 = (unsigned char *)(v79 + v123);
        uint64_t v126 = (unsigned __int16 *)v73 + v123;
        v111 += v123;
        uint64_t v125 = (unsigned __int16 *)v112 + v123;
      }
LABEL_113:
      int v138 = v78 - v111;
      do
      {
        int v140 = *v126++;
        int v139 = v140;
        int v141 = *v125++;
        unsigned int v142 = (v113 * v141 + (unsigned __int16)v203 * v139 + 0x8000) >> 16;
        if (v142 >= 0xFF) {
          LOBYTE(v142) = -1;
        }
        *v127++ = v142;
        --v138;
      }
      while (v138);
      goto LABEL_52;
    }
    uint64_t v80 = 0;
    int16x8_t v81 = (int16x8_t)vld1q_dup_f32((const float *)&v203);
    int32x4_t v83 = (int32x4_t)xmmword_1004F7D70;
    int16x8_t v82 = (int16x8_t)xmmword_1004F7D80;
    int8x16_t v84 = (int8x16_t)xmmword_1004F7D90;
    do
    {
      int v85 = (int16x8_t *)((char *)v73 + 2 * v78);
      int16x8_t v86 = *(int16x8_t *)v73;
      int16x8_t v87 = *((int16x8_t *)v73 + 1);
      v73 += 2;
      int16x8_t v88 = vaddq_s16(v82, v86);
      int16x8_t v89 = vaddq_s16(v82, *v85);
      int16x8_t v90 = vzip1q_s16(v88, v89);
      int16x8_t v91 = vzip2q_s16(v88, v89);
      int32x4_t v92 = vmull_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v81.i8);
      int32x4_t v93 = vmull_high_s16(v90, v81);
      int32x4_t v94 = vuzp1q_s32(v92, v93);
      int32x4_t v95 = vuzp2q_s32(v92, v93);
      int32x4_t v96 = vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v81.i8);
      int32x4_t v97 = vmull_high_s16(v91, v81);
      int32x4_t v98 = vuzp1q_s32(v96, v97);
      int32x4_t v99 = vaddq_s32(v94, v95);
      int32x4_t v100 = vuzp2q_s32(v96, v97);
      int16x8_t v101 = vaddq_s16(v87, v82);
      int16x8_t v102 = vaddq_s16(v85[1], v82);
      int16x8_t v103 = vzip1q_s16(v101, v102);
      int16x8_t v104 = vzip2q_s16(v101, v102);
      int32x4_t v105 = vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v81.i8);
      int32x4_t v106 = vmull_high_s16(v103, v81);
      int32x4_t v107 = vuzp1q_s32(v105, v106);
      int32x4_t v108 = vuzp2q_s32(v105, v106);
      int32x4_t v109 = vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v81.i8);
      int32x4_t v110 = vmull_high_s16(v104, v81);
      *(int8x16_t *)(v79 + v80) = vsubq_s8(vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32(v99, v83), v52)), vshlq_s32(vaddq_s32(vaddq_s32(v98, v100), v83), v52))), vqmovn_high_s32(vqmovn_s32(vshlq_s32(vaddq_s32(vaddq_s32(v107, v108), v83), v52)), vshlq_s32(vaddq_s32(vaddq_s32(vuzp1q_s32(v109, v110), vuzp2q_s32(v109, v110)), v83), v52))), v84);
      v80 += 16;
    }
    while ((int)v80 < (int)v78 - 15);
    int v111 = v78 & 0x7FFFFFF0;
    uint64_t v112 = (uint16x8_t *)((char *)v73 + 2 * v78);
    v79 += v80;
    if ((v78 & 0xFFFFFFF0) < (int)v78) {
      goto LABEL_86;
    }
LABEL_52:
    if (v7 != ++v50) {
      continue;
    }
    break;
  }
  LODWORD(v4) = v7;
  unsigned int v10 = v204;
  uint64_t v11 = *(int *)(a1 + 28);
  if (v9 + 2 <= (int)v11)
  {
LABEL_130:
    (*(void (**)(uint64_t, void, void, void, _OWORD *, void, void, void))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * (v11 - 1), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v10, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    goto LABEL_131;
  }
LABEL_13:
  int v12 = v8 + ~v9 + v11;
  if (v12 >= 0) {
    int v13 = v12 & 1;
  }
  else {
    int v13 = -(v12 & 1);
  }
  unsigned int v10 = (_OWORD *)((char *)v10 + 2 * *(_DWORD *)(a1 + 48) * v13 * *(_DWORD *)(a1 + 56));
LABEL_131:
  if ((int)v4 < a2[1])
  {
    uint64_t v159 = (int)v4;
    v160.i64[0] = 0x7000700070007;
    v160.i64[1] = 0x7000700070007;
    int16x8_t v161 = 0uLL;
    while (1)
    {
      uint64_t v162 = *(void *)(a1 + 32);
      uint64_t v163 = *(void *)(a1 + 40);
      int v164 = *(_DWORD *)(a1 + 48);
      int v165 = *(_DWORD *)(a1 + 56);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7D40, memory_order_acquire) & 1) == 0)
      {
        int v193 = __cxa_guard_acquire(&qword_1004F7D40);
        int16x8_t v161 = 0uLL;
        v160.i64[0] = 0x7000700070007;
        v160.i64[1] = 0x7000700070007;
        *(void *)&long long v194 = 0x80008000800080;
        *((void *)&v194 + 1) = 0x80008000800080;
        if (v193)
        {
          xmmword_1004F7D60 = v194;
          __cxa_guard_release(&qword_1004F7D40);
          int16x8_t v161 = 0uLL;
          v160.i64[0] = 0x7000700070007;
          v160.i64[1] = 0x7000700070007;
        }
      }
      unint64_t v166 = v162 + v163 * v159;
      int v167 = v165 * v164;
      if (v165 * v164 >= 16) {
        break;
      }
      unsigned int v173 = 0;
      v170 = v10;
      if (v167 > 0) {
        goto LABEL_141;
      }
LABEL_133:
      if (++v159 >= a2[1]) {
        goto LABEL_164;
      }
    }
    uint64_t v168 = 0;
    uint16x8_t v169 = (uint16x8_t)xmmword_1004F7D60;
    v170 = v10;
    do
    {
      uint16x8_t v171 = *(uint16x8_t *)v170;
      uint16x8_t v172 = *((uint16x8_t *)v170 + 1);
      v170 += 2;
      *(uint8x16_t *)(v166 + v168) = vqmovn_high_u16(vqmovn_u16(vshlq_u16(vqaddq_u16(v171, v169), v160)), vshlq_u16(vqaddq_u16(v172, v169), v160));
      v168 += 16;
    }
    while ((int)v168 < v167 - 15);
    unsigned int v173 = v167 & 0xFFFFFFF0;
    v166 += v168;
    if ((int)(v167 & 0xFFFFFFF0) >= v167) {
      goto LABEL_133;
    }
LABEL_141:
    uint64_t v174 = v167 + ~v173;
    if (v174 < 7
      || (v166 < (unint64_t)v170 + 2 * v174 + 2 ? (BOOL v175 = (unint64_t)v170 >= v166 + v174 + 1) : (BOOL v175 = 1),
          !v175))
    {
      v178 = (__int16 *)v170;
      v179 = (unsigned char *)v166;
      goto LABEL_150;
    }
    uint64_t v176 = v174 + 1;
    if (v174 >= 0x1F)
    {
      uint64_t v177 = v176 & 0x1FFFFFFE0;
      float32x4_t v182 = (int8x16_t *)(v166 + 16);
      v183 = (int16x8_t *)(v170 + 2);
      uint64_t v184 = v176 & 0x1FFFFFFE0;
      do
      {
        int16x8_t v186 = v183[-2];
        int16x8_t v185 = v183[-1];
        int16x8_t v188 = *v183;
        int16x8_t v187 = v183[1];
        v183 += 4;
        v182[-1] = vraddhn_high_s16(vraddhn_s16(v186, v161), v185, v161);
        int8x16_t *v182 = vraddhn_high_s16(vraddhn_s16(v188, v161), v187, v161);
        v182 += 2;
        v184 -= 32;
      }
      while (v184);
      if (v176 == v177) {
        goto LABEL_133;
      }
      if ((v176 & 0x18) == 0)
      {
        v179 = (unsigned char *)(v166 + v177);
        v178 = (__int16 *)v170 + v177;
        v173 += v177;
LABEL_150:
        unsigned int v180 = v167 - v173;
        do
        {
          __int16 v181 = *v178++;
          *v179++ = (unsigned __int16)(v181 + 128) >> 8;
          --v180;
        }
        while (v180);
        goto LABEL_133;
      }
    }
    else
    {
      uint64_t v177 = 0;
    }
    v173 += v176 & 0xFFFFFFF8;
    v178 = (__int16 *)v170 + (v176 & 0x1FFFFFFF8);
    v179 = (unsigned char *)(v166 + (v176 & 0x1FFFFFFF8));
    uint64_t v189 = (int8x8_t *)(v166 + v177);
    uint64_t v190 = v177 - (v176 & 0x1FFFFFFF8);
    unint64_t v191 = (int16x8_t *)((char *)v170 + 2 * v177);
    do
    {
      int16x8_t v192 = *v191++;
      *v189++ = vraddhn_s16(v192, v161);
      v190 += 8;
    }
    while (v190);
    if (v176 == (v176 & 0x1FFFFFFF8)) {
      goto LABEL_133;
    }
    goto LABEL_150;
  }
LABEL_164:
  uint64_t result = v204;
  if (v204 != v206 && v204 != 0) {
    operator delete[]();
  }
  return result;
}

void sub_10037D228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20 != a11)
  {
    if (a20) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_10037D264(char *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  unsigned int v8 = *result << 16;
  if (a6 < 8)
  {
    LODWORD(v9) = 0;
    unsigned int v10 = (unsigned int *)a5;
LABEL_9:
    int v14 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v14;
    }
    while (v14);
    goto LABEL_11;
  }
  uint64_t v9 = a6 & 0xFFFFFFF8;
  unsigned int v10 = (unsigned int *)a5 + v9;
  int32x4_t v11 = vdupq_n_s32(v8);
  int v12 = a5 + 1;
  uint64_t v13 = v9;
  do
  {
    v12[-1] = v11;
    *int v12 = v11;
    v12 += 2;
    v13 -= 8;
  }
  while (v13);
  if (v9 != a6) {
    goto LABEL_9;
  }
LABEL_11:
  a4 += 2 * (a6 - 1) + 2;
  a5 = (int32x4_t *)v10;
  if (a6 >= a7) {
    goto LABEL_15;
  }
LABEL_12:
  unint64_t v15 = a7 - (unint64_t)a6;
  int16x8_t v16 = (int *)(a3 + 4 * a6);
  do
  {
    uint64_t v17 = *v16++;
    int v18 = *a4;
    int v19 = a4[1];
    a4 += 2;
    a5->i32[0] = v18 * result[v17] + v19 * result[v17 + 1];
    a5 = (int32x4_t *)((char *)a5 + 4);
    --v15;
  }
  while (v15);
  a6 = a7;
LABEL_15:
  if (a6 >= a8) {
    return result;
  }
  unsigned int v20 = result[*(int *)(a3 + 4 * (a8 - 1))] << 16;
  uint64_t v21 = (~a6 + a8);
  if (v21 < 7)
  {
    unint64_t v22 = (unsigned int *)a5;
LABEL_21:
    int v28 = a8 - a6;
    do
    {
      *v22++ = v20;
      --v28;
    }
    while (v28);
    return result;
  }
  uint64_t v23 = v21 + 1;
  uint64_t v24 = (v21 + 1) & 0x1FFFFFFF8;
  a6 += v24;
  unint64_t v22 = (unsigned int *)a5 + v24;
  int32x4_t v25 = vdupq_n_s32(v20);
  uint16x8_t v26 = a5 + 1;
  uint64_t v27 = v24;
  do
  {
    v26[-1] = v25;
    *uint16x8_t v26 = v25;
    v26 += 2;
    v27 -= 8;
  }
  while (v27);
  if (v23 != v24) {
    goto LABEL_21;
  }
  return result;
}

int8x16_t *sub_10037D3A0(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if (a6 >= a7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v49 = 0;
    while (1)
    {
      if (a5 >= &result->i8[a2] || &a5[4 * a2] <= (char *)result)
      {
        unsigned int v10 = &a5[4 * (a2 & 0xFFFFFFE0)];
        int32x4_t v51 = (int32x4_t *)(a5 + 64);
        uint64_t v52 = a2 & 0xFFFFFFE0;
        uint32x4_t v53 = result + 1;
        do
        {
          int8x16_t v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          int32x4_t v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          int32x4_t v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          unint64_t v51[3] = _Q0;
          *int32x4_t v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        uint64_t v50 = a2 & 0xFFFFFFE0;
        if (v50 == a2) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v50 = 0;
        unsigned int v10 = a5;
      }
      uint64_t v63 = a2 - v50;
      int v64 = &result->i8[v50];
      do
      {
        int v65 = *v64++;
        *(_DWORD *)unsigned int v10 = v65 << 16;
        v10 += 4;
        --v63;
      }
      while (v63);
LABEL_42:
      ++v49;
      a5 = v10;
      if (v49 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  unsigned int v10 = a5;
  do
  {
    int32x4_t v11 = result;
    uint64_t v12 = a2;
    do
    {
      int v13 = v11->i8[0];
      int32x4_t v11 = (int8x16_t *)((char *)v11 + 1);
      *(_DWORD *)unsigned int v10 = v13 << 16;
      v10 += 4;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      uint64_t v14 = a6;
      do
      {
        uint64_t v15 = 0;
        int16x8_t v16 = &result->i8[*(int *)(a3 + 4 * v14) * (uint64_t)(int)a2];
        do
        {
          int v17 = *a4;
          if (*a4) {
            v17 *= v16[v15];
          }
          *(_DWORD *)a5 = v17;
          int v18 = a4[1];
          if (v18) {
            v18 *= v16[a2 + v15];
          }
          *(_DWORD *)a5 = v18 + v17;
          a5 += 4;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8) {
    return result;
  }
  int v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  unsigned int v20 = &result->i8[v19 * (uint64_t)(int)a2];
  uint64_t v21 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v25 = v19 * (uint64_t)(int)a2;
    uint64_t v26 = 4 * a2;
    uint64_t v27 = &result->i8[a2 + v25];
    uint64_t v28 = a2 & 0xFFFFFFE0;
    uint64_t v29 = (int8x16_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        BOOL v30 = &a5[4 * (v21 & 0xFFFFFFE0)];
        uint64_t v31 = (int32x4_t *)(a5 + 64);
        uint64_t v32 = v21 & 0xFFFFFFE0;
        __int16 v33 = v29 + 1;
        do
        {
          int8x16_t v34 = v33[-1];
          _Q2 = vmovl_high_s8(v34);
          _Q0 = vmovl_s8(*(int8x8_t *)v34.i8);
          _Q3 = vmovl_high_s8(*v33);
          _Q1 = vmovl_s8(*(int8x8_t *)v33->i8);
          int32x4_t v39 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v31[-2] = v39;
          v31[-1] = (int32x4_t)_Q2;
          int32x4_t v44 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v45 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v31[-4] = v44;
          v31[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          _DWORD v31[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v31[3] = _Q0;
          int32x4_t *v31 = v45;
          v31[1] = (int32x4_t)_Q1;
          v31 += 8;
          v33 += 2;
          v32 -= 32;
        }
        while (v32);
        uint64_t result = (int8x16_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t result = 0;
        BOOL v30 = a5;
      }
      uint64_t v47 = v21 - (void)result;
      uint64_t result = (int8x16_t *)((char *)result + (void)v29);
      do
      {
        int v48 = result->i8[0];
        uint64_t result = (int8x16_t *)((char *)result + 1);
        *(_DWORD *)BOOL v30 = v48 << 16;
        v30 += 4;
        --v47;
      }
      while (v47);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    unint64_t v22 = v20;
    uint64_t v23 = a2;
    do
    {
      int v24 = *v22++;
      *(_DWORD *)a5 = v24 << 16;
      a5 += 4;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

char *sub_10037D6B0(char *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int v8 = *result << 16;
    int v9 = result[1] << 16;
    if (a6 >= 8)
    {
      uint64_t v10 = a6 & 0xFFFFFFF8;
      int32x4_t v11 = &a5[2 * v10];
      LODWORD(v12) = *result << 16;
      DWORD1(v12) = result[1] << 16;
      *((void *)&v12 + 1) = __PAIR64__(v9, v8);
      int v13 = a5 + 8;
      uint64_t v14 = v10;
      do
      {
        *(v13 - 2) = v12;
        *(v13 - 1) = v12;
        *int v13 = v12;
        v13[1] = v12;
        v13 += 4;
        v14 -= 8;
      }
      while (v14);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v11;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      int32x4_t v11 = a5;
    }
    int v15 = a6 - v10;
    do
    {
      int16x8_t v16 = v11 + 2;
      *int32x4_t v11 = v8;
      v11[1] = v9;
      v11 += 2;
      --v15;
    }
    while (v15);
    int32x4_t v11 = v16;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v17 = a7 - (unint64_t)a6;
    int v18 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v19 = *v18++;
      unsigned int v20 = &result[2 * v19];
      *a5 = *a4 * *v20 + a4[1] * v20[2];
      int v21 = *a4;
      int v22 = a4[1];
      a4 += 2;
      int v23 = v21 * v20[1] + v22 * v20[3];
      int v24 = a5 + 2;
      a5[1] = v23;
      a5 += 2;
      --v17;
    }
    while (v17);
    a5 = v24;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  uint64_t v25 = &result[2 * *(int *)(a3 + 4 * (a8 - 1))];
  int v26 = *v25 << 16;
  int v27 = v25[1] << 16;
  uint64_t v28 = (~a7 + a8);
  if (v28 < 7)
  {
    uint64_t v29 = a5;
LABEL_22:
    int v35 = a8 - a7;
    do
    {
      int *v29 = v26;
      v29[1] = v27;
      v29 += 2;
      --v35;
    }
    while (v35);
    return result;
  }
  uint64_t v30 = v28 + 1;
  uint64_t v31 = (v28 + 1) & 0x1FFFFFFF8;
  a7 += v31;
  uint64_t v29 = &a5[2 * v31];
  *(void *)&long long v32 = __PAIR64__(v27, v26);
  *((void *)&v32 + 1) = __PAIR64__(v27, v26);
  __int16 v33 = a5 + 8;
  uint64_t v34 = v31;
  do
  {
    *(v33 - 2) = v32;
    *(v33 - 1) = v32;
    *__int16 v33 = v32;
    v33[1] = v32;
    v33 += 4;
    v34 -= 8;
  }
  while (v34);
  if (v30 != v31) {
    goto LABEL_22;
  }
  return result;
}

int8x16_t *sub_10037D850(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if (a6 >= a7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v49 = 0;
    while (1)
    {
      if (a5 >= &result->i8[a2] || &a5[4 * a2] <= (char *)result)
      {
        uint64_t v10 = &a5[4 * (a2 & 0xFFFFFFE0)];
        int32x4_t v51 = (int32x4_t *)(a5 + 64);
        uint64_t v52 = a2 & 0xFFFFFFE0;
        uint32x4_t v53 = result + 1;
        do
        {
          int8x16_t v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          int32x4_t v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          int32x4_t v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          unint64_t v51[3] = _Q0;
          *int32x4_t v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        uint64_t v50 = a2 & 0xFFFFFFE0;
        if (v50 == a2) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v50 = 0;
        uint64_t v10 = a5;
      }
      uint64_t v63 = a2 - v50;
      int v64 = &result->i8[v50];
      do
      {
        int v65 = *v64++;
        *(_DWORD *)uint64_t v10 = v65 << 16;
        v10 += 4;
        --v63;
      }
      while (v63);
LABEL_42:
      ++v49;
      a5 = v10;
      if (v49 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  uint64_t v10 = a5;
  do
  {
    int32x4_t v11 = result;
    uint64_t v12 = a2;
    do
    {
      int v13 = v11->i8[0];
      int32x4_t v11 = (int8x16_t *)((char *)v11 + 1);
      *(_DWORD *)uint64_t v10 = v13 << 16;
      v10 += 4;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      uint64_t v14 = a6;
      do
      {
        uint64_t v15 = 0;
        int16x8_t v16 = &result->i8[*(int *)(a3 + 4 * v14) * (uint64_t)(int)a2];
        do
        {
          int v17 = *a4;
          if (*a4) {
            v17 *= v16[v15];
          }
          *(_DWORD *)a5 = v17;
          int v18 = a4[1];
          if (v18) {
            v18 *= v16[a2 + v15];
          }
          *(_DWORD *)a5 = v18 + v17;
          a5 += 4;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8) {
    return result;
  }
  int v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  unsigned int v20 = &result->i8[v19 * (uint64_t)(int)a2];
  uint64_t v21 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v25 = v19 * (uint64_t)(int)a2;
    uint64_t v26 = 4 * a2;
    int v27 = &result->i8[a2 + v25];
    uint64_t v28 = a2 & 0xFFFFFFE0;
    uint64_t v29 = (int8x16_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        uint64_t v30 = &a5[4 * (v21 & 0xFFFFFFE0)];
        uint64_t v31 = (int32x4_t *)(a5 + 64);
        uint64_t v32 = v21 & 0xFFFFFFE0;
        __int16 v33 = v29 + 1;
        do
        {
          int8x16_t v34 = v33[-1];
          _Q2 = vmovl_high_s8(v34);
          _Q0 = vmovl_s8(*(int8x8_t *)v34.i8);
          _Q3 = vmovl_high_s8(*v33);
          _Q1 = vmovl_s8(*(int8x8_t *)v33->i8);
          int32x4_t v39 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v31[-2] = v39;
          v31[-1] = (int32x4_t)_Q2;
          int32x4_t v44 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v45 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v31[-4] = v44;
          v31[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          _DWORD v31[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v31[3] = _Q0;
          int32x4_t *v31 = v45;
          v31[1] = (int32x4_t)_Q1;
          v31 += 8;
          v33 += 2;
          v32 -= 32;
        }
        while (v32);
        uint64_t result = (int8x16_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t result = 0;
        uint64_t v30 = a5;
      }
      uint64_t v47 = v21 - (void)result;
      uint64_t result = (int8x16_t *)((char *)result + (void)v29);
      do
      {
        int v48 = result->i8[0];
        uint64_t result = (int8x16_t *)((char *)result + 1);
        *(_DWORD *)uint64_t v30 = v48 << 16;
        v30 += 4;
        --v47;
      }
      while (v47);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    int v22 = v20;
    uint64_t v23 = a2;
    do
    {
      int v24 = *v22++;
      *(_DWORD *)a5 = v24 << 16;
      a5 += 4;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

char *sub_10037DB60(char *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int v8 = *result << 16;
    int v9 = result[1] << 16;
    int v10 = result[2] << 16;
    if (a6 >= 8)
    {
      LODWORD(v15) = result[2] << 16;
      uint64_t v11 = a6 & 0xFFFFFFF8;
      LODWORD(v14) = result[1] << 16;
      LODWORD(v13) = *result << 16;
      DWORD1(v13) = v14;
      *((void *)&v13 + 1) = __PAIR64__(v8, v10);
      DWORD1(v14) = v15;
      *((void *)&v14 + 1) = __PAIR64__(v9, v8);
      DWORD1(v15) = v13;
      uint64_t v12 = &a5[3 * v11];
      *((void *)&v15 + 1) = __PAIR64__(v10, v9);
      uint64_t v16 = v11;
      do
      {
        *(_OWORD *)a5 = v13;
        *((_OWORD *)a5 + 1) = v14;
        *((_OWORD *)a5 + 2) = v15;
        *((_OWORD *)a5 + 3) = v13;
        *((_OWORD *)a5 + 4) = v14;
        *((_OWORD *)a5 + 5) = v15;
        a5 += 24;
        v16 -= 8;
      }
      while (v16);
      if (v11 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v12;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      uint64_t v12 = a5;
    }
    int v17 = a6 - v11;
    do
    {
      *uint64_t v12 = v8;
      v12[1] = v9;
      int v18 = v12 + 3;
      v12[2] = v10;
      v12 += 3;
      --v17;
    }
    while (v17);
    uint64_t v12 = v18;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v19 = a7 - (unint64_t)a6;
    unsigned int v20 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v21 = *v20++;
      int v22 = &result[3 * v21];
      *a5 = *a4 * *v22 + a4[1] * v22[3];
      a5[1] = *a4 * v22[1] + a4[1] * v22[4];
      int v23 = *a4;
      int v24 = a4[1];
      a4 += 2;
      int v25 = v23 * v22[2] + v24 * v22[5];
      uint64_t v26 = a5 + 3;
      a5[2] = v25;
      a5 += 3;
      --v19;
    }
    while (v19);
    a5 = v26;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  int v27 = &result[3 * *(int *)(a3 + 4 * (a8 - 1))];
  int v28 = *v27 << 16;
  int v29 = v27[1] << 16;
  unsigned int v30 = v27[2] << 16;
  uint64_t v31 = (~a7 + a8);
  if (v31 < 7)
  {
    uint64_t v32 = a5;
LABEL_22:
    int v38 = a8 - a7;
    do
    {
      *uint64_t v32 = v28;
      v32[1] = v29;
      v32[2] = v30;
      v32 += 3;
      --v38;
    }
    while (v38);
    return result;
  }
  uint64_t v33 = v31 + 1;
  *(void *)&long long v36 = __PAIR64__(v28, v30);
  a7 += v33 & 0xFFFFFFF8;
  *(void *)&long long v35 = __PAIR64__(v30, v29);
  *(void *)&long long v34 = __PAIR64__(v29, v28);
  uint64_t result = (char *)v30;
  *((void *)&v34 + 1) = __PAIR64__(v28, v30);
  *((void *)&v35 + 1) = __PAIR64__(v29, v28);
  uint64_t v32 = &a5[3 * (v33 & 0x1FFFFFFF8)];
  *((void *)&v36 + 1) = __PAIR64__(v30, v29);
  uint64_t v37 = v33 & 0x1FFFFFFF8;
  do
  {
    *(_OWORD *)a5 = v34;
    *((_OWORD *)a5 + 1) = v35;
    *((_OWORD *)a5 + 2) = v36;
    *((_OWORD *)a5 + 3) = v34;
    *((_OWORD *)a5 + 4) = v35;
    *((_OWORD *)a5 + 5) = v36;
    a5 += 24;
    v37 -= 8;
  }
  while (v37);
  if (v33 != (v33 & 0x1FFFFFFF8)) {
    goto LABEL_22;
  }
  return result;
}

int8x16_t *sub_10037DE0C(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if (a6 >= a7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v49 = 0;
    while (1)
    {
      if (a5 >= &result->i8[a2] || &a5[4 * a2] <= (char *)result)
      {
        int v10 = &a5[4 * (a2 & 0xFFFFFFE0)];
        int32x4_t v51 = (int32x4_t *)(a5 + 64);
        uint64_t v52 = a2 & 0xFFFFFFE0;
        uint32x4_t v53 = result + 1;
        do
        {
          int8x16_t v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          int32x4_t v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          int32x4_t v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          unint64_t v51[3] = _Q0;
          *int32x4_t v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        uint64_t v50 = a2 & 0xFFFFFFE0;
        if (v50 == a2) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v50 = 0;
        int v10 = a5;
      }
      uint64_t v63 = a2 - v50;
      int v64 = &result->i8[v50];
      do
      {
        int v65 = *v64++;
        *(_DWORD *)int v10 = v65 << 16;
        v10 += 4;
        --v63;
      }
      while (v63);
LABEL_42:
      ++v49;
      a5 = v10;
      if (v49 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = a5;
  do
  {
    uint64_t v11 = result;
    uint64_t v12 = a2;
    do
    {
      int v13 = v11->i8[0];
      uint64_t v11 = (int8x16_t *)((char *)v11 + 1);
      *(_DWORD *)int v10 = v13 << 16;
      v10 += 4;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      uint64_t v14 = a6;
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = &result->i8[*(int *)(a3 + 4 * v14) * (uint64_t)(int)a2];
        do
        {
          int v17 = *a4;
          if (*a4) {
            v17 *= v16[v15];
          }
          *(_DWORD *)a5 = v17;
          int v18 = a4[1];
          if (v18) {
            v18 *= v16[a2 + v15];
          }
          *(_DWORD *)a5 = v18 + v17;
          a5 += 4;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8) {
    return result;
  }
  int v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  unsigned int v20 = &result->i8[v19 * (uint64_t)(int)a2];
  uint64_t v21 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v25 = v19 * (uint64_t)(int)a2;
    uint64_t v26 = 4 * a2;
    int v27 = &result->i8[a2 + v25];
    uint64_t v28 = a2 & 0xFFFFFFE0;
    int v29 = (int8x16_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        unsigned int v30 = &a5[4 * (v21 & 0xFFFFFFE0)];
        uint64_t v31 = (int32x4_t *)(a5 + 64);
        uint64_t v32 = v21 & 0xFFFFFFE0;
        uint64_t v33 = v29 + 1;
        do
        {
          int8x16_t v34 = v33[-1];
          _Q2 = vmovl_high_s8(v34);
          _Q0 = vmovl_s8(*(int8x8_t *)v34.i8);
          _Q3 = vmovl_high_s8(*v33);
          _Q1 = vmovl_s8(*(int8x8_t *)v33->i8);
          int32x4_t v39 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v31[-2] = v39;
          v31[-1] = (int32x4_t)_Q2;
          int32x4_t v44 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v45 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v31[-4] = v44;
          v31[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          _DWORD v31[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v31[3] = _Q0;
          int32x4_t *v31 = v45;
          v31[1] = (int32x4_t)_Q1;
          v31 += 8;
          v33 += 2;
          v32 -= 32;
        }
        while (v32);
        uint64_t result = (int8x16_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t result = 0;
        unsigned int v30 = a5;
      }
      uint64_t v47 = v21 - (void)result;
      uint64_t result = (int8x16_t *)((char *)result + (void)v29);
      do
      {
        int v48 = result->i8[0];
        uint64_t result = (int8x16_t *)((char *)result + 1);
        *(_DWORD *)unsigned int v30 = v48 << 16;
        v30 += 4;
        --v47;
      }
      while (v47);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    int v22 = v20;
    uint64_t v23 = a2;
    do
    {
      int v24 = *v22++;
      *(_DWORD *)a5 = v24 << 16;
      a5 += 4;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

unsigned __int32 *sub_10037E11C(unsigned __int32 *result, __n128 a2, uint64_t a3, uint64_t a4, int *a5, __n128 *a6, int a7, int a8, int a9)
{
  if (a7 >= 1)
  {
    a2.n128_u32[0] = *result;
    a2 = (__n128)vshll_n_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a2.n128_u64[0]), 0x10uLL);
    if (a7 >= 8)
    {
      uint64_t v9 = a7 & 0xFFFFFFF8;
      int v10 = &a6[v9];
      uint64_t v11 = a6 + 4;
      uint64_t v12 = v9;
      do
      {
        v11[-4] = a2;
        v11[-3] = a2;
        v11[-2] = a2;
        v11[-1] = a2;
        *uint64_t v11 = a2;
        v11[1] = a2;
        v11[2] = a2;
        v11[3] = a2;
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
      if (v9 == a7)
      {
LABEL_12:
        a5 += 2 * (a7 - 1) + 2;
        a6 = v10;
        if (a7 < a8) {
          goto LABEL_13;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      int v10 = a6;
    }
    int v13 = a7 - v9;
    do
    {
      *v10++ = a2;
      --v13;
    }
    while (v13);
    goto LABEL_12;
  }
  a7 = 0;
  if (a8 > 0)
  {
LABEL_13:
    unint64_t v14 = a8 - (unint64_t)a7;
    uint64_t v15 = (int *)(a4 + 4 * a7);
    do
    {
      uint64_t v16 = *v15++;
      int v17 = (char *)&result[v16];
      a6->n128_u32[0] = *a5 * *v17 + a5[1] * v17[4];
      a6->n128_u32[1] = *a5 * v17[1] + a5[1] * v17[5];
      a6->n128_u32[2] = *a5 * v17[2] + a5[1] * v17[6];
      int v18 = *a5;
      int v19 = a5[1];
      a5 += 2;
      int v20 = v18 * v17[3] + v19 * v17[7];
      uint64_t v21 = a6 + 1;
      a6->n128_u32[3] = v20;
      ++a6;
      --v14;
    }
    while (v14);
    a6 = v21;
    if (a8 >= a9) {
      return result;
    }
    goto LABEL_16;
  }
LABEL_5:
  a8 = a7;
  if (a7 >= a9) {
    return result;
  }
LABEL_16:
  a2.n128_u32[0] = result[*(int *)(a4 + 4 * (a9 - 1))];
  int32x4_t v22 = vshll_n_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a2.n128_u64[0]), 0x10uLL);
  uint64_t v23 = (~a8 + a9);
  if (v23 < 7)
  {
    int v24 = (int32x4_t *)a6;
LABEL_21:
    int v29 = a9 - a8;
    do
    {
      *v24++ = v22;
      --v29;
    }
    while (v29);
    return result;
  }
  uint64_t v25 = v23 + 1;
  uint64_t v26 = (v23 + 1) & 0x1FFFFFFF8;
  a8 += v26;
  int v24 = (int32x4_t *)&a6[v26];
  int v27 = (int32x4_t *)&a6[4];
  uint64_t v28 = v26;
  do
  {
    v27[-4] = v22;
    v27[-3] = v22;
    v27[-2] = v22;
    v27[-1] = v22;
    *int v27 = v22;
    v27[1] = v22;
    v27[2] = v22;
    v27[3] = v22;
    v27 += 8;
    v28 -= 8;
  }
  while (v28);
  if (v25 != v26) {
    goto LABEL_21;
  }
  return result;
}

int8x16_t *sub_10037E2CC(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, char *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if (a6 >= a7) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v49 = 0;
    while (1)
    {
      if (a5 >= &result->i8[a2] || &a5[4 * a2] <= (char *)result)
      {
        int v10 = &a5[4 * (a2 & 0xFFFFFFE0)];
        int32x4_t v51 = (int32x4_t *)(a5 + 64);
        uint64_t v52 = a2 & 0xFFFFFFE0;
        uint32x4_t v53 = result + 1;
        do
        {
          int8x16_t v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          int32x4_t v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          int32x4_t v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          unint64_t v51[3] = _Q0;
          *int32x4_t v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        uint64_t v50 = a2 & 0xFFFFFFE0;
        if (v50 == a2) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v50 = 0;
        int v10 = a5;
      }
      uint64_t v63 = a2 - v50;
      int v64 = &result->i8[v50];
      do
      {
        int v65 = *v64++;
        *(_DWORD *)int v10 = v65 << 16;
        v10 += 4;
        --v63;
      }
      while (v63);
LABEL_42:
      ++v49;
      a5 = v10;
      if (v49 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = a5;
  do
  {
    uint64_t v11 = result;
    uint64_t v12 = a2;
    do
    {
      int v13 = v11->i8[0];
      uint64_t v11 = (int8x16_t *)((char *)v11 + 1);
      *(_DWORD *)int v10 = v13 << 16;
      v10 += 4;
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if (a6 < a7)
  {
LABEL_13:
    if ((int)a2 >= 1)
    {
      uint64_t v14 = a6;
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = &result->i8[*(int *)(a3 + 4 * v14) * (uint64_t)(int)a2];
        do
        {
          int v17 = *a4;
          if (*a4) {
            v17 *= v16[v15];
          }
          *(_DWORD *)a5 = v17;
          int v18 = a4[1];
          if (v18) {
            v18 *= v16[a2 + v15];
          }
          *(_DWORD *)a5 = v18 + v17;
          a5 += 4;
          ++v15;
        }
        while (a2 != v15);
        ++v14;
        a4 += 2;
      }
      while ((int)v14 < a7);
    }
    a6 = a7;
  }
LABEL_23:
  if ((int)a2 < 1 || a6 >= a8) {
    return result;
  }
  int v19 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  int v20 = &result->i8[v19 * (uint64_t)(int)a2];
  uint64_t v21 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v25 = v19 * (uint64_t)(int)a2;
    uint64_t v26 = 4 * a2;
    int v27 = &result->i8[a2 + v25];
    uint64_t v28 = a2 & 0xFFFFFFE0;
    int v29 = (int8x16_t *)((char *)result + v25);
    while (1)
    {
      if (a5 >= v27 || v20 >= &a5[v26])
      {
        unsigned int v30 = &a5[4 * (v21 & 0xFFFFFFE0)];
        uint64_t v31 = (int32x4_t *)(a5 + 64);
        uint64_t v32 = v21 & 0xFFFFFFE0;
        uint64_t v33 = v29 + 1;
        do
        {
          int8x16_t v34 = v33[-1];
          _Q2 = vmovl_high_s8(v34);
          _Q0 = vmovl_s8(*(int8x8_t *)v34.i8);
          _Q3 = vmovl_high_s8(*v33);
          _Q1 = vmovl_s8(*(int8x8_t *)v33->i8);
          int32x4_t v39 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v31[-2] = v39;
          v31[-1] = (int32x4_t)_Q2;
          int32x4_t v44 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v45 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v31[-4] = v44;
          v31[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          _DWORD v31[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v31[3] = _Q0;
          int32x4_t *v31 = v45;
          v31[1] = (int32x4_t)_Q1;
          v31 += 8;
          v33 += 2;
          v32 -= 32;
        }
        while (v32);
        uint64_t result = (int8x16_t *)(v21 & 0x7FFFFFE0);
        if (v28 == v21) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t result = 0;
        unsigned int v30 = a5;
      }
      uint64_t v47 = v21 - (void)result;
      uint64_t result = (int8x16_t *)((char *)result + (void)v29);
      do
      {
        int v48 = result->i8[0];
        uint64_t result = (int8x16_t *)((char *)result + 1);
        *(_DWORD *)unsigned int v30 = v48 << 16;
        v30 += 4;
        --v47;
      }
      while (v47);
LABEL_31:
      ++a6;
      a5 = v30;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    int32x4_t v22 = v20;
    uint64_t v23 = a2;
    do
    {
      int v24 = *v22++;
      *(_DWORD *)a5 = v24 << 16;
      a5 += 4;
      --v23;
    }
    while (v23);
    ++a6;
  }
  while (a6 != a8);
  return result;
}

int8x16_t *sub_10037E5DC(int8x16_t *result, unsigned int a2, uint64_t a3, const float *a4, int32x4_t *a5, uint64_t a6, int a7, int a8)
{
  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 > 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  uint64_t v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (const float *)((char *)a4 + v8);
    if ((int)a6 < a7) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v14 = a5;
    goto LABEL_32;
  }
  if (a2 >= 0x20)
  {
    int v18 = 0;
    while (1)
    {
      if (a5 >= (int32x4_t *)&result->i8[a2] || (char *)a5 + 4 * a2 <= (char *)result)
      {
        int v10 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFE0));
        int v20 = a5 + 4;
        uint64_t v21 = a2 & 0xFFFFFFE0;
        int32x4_t v22 = result + 1;
        do
        {
          int8x16_t v23 = v22[-1];
          _Q2 = vmovl_high_s8(v23);
          _Q0 = vmovl_s8(*(int8x8_t *)v23.i8);
          _Q3 = vmovl_high_s8(*v22);
          _Q1 = vmovl_s8(*(int8x8_t *)v22->i8);
          int32x4_t v28 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v20[-2] = v28;
          v20[-1] = (int32x4_t)_Q2;
          int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v33 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v20[-4] = v32;
          v20[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          _DWORD v20[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v20[3] = _Q0;
          *int v20 = v33;
          v20[1] = (int32x4_t)_Q1;
          v20 += 8;
          v22 += 2;
          v21 -= 32;
        }
        while (v21);
        uint64_t v19 = a2 & 0xFFFFFFE0;
        if (v19 == a2) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v19 = 0;
        int v10 = a5;
      }
      long long v35 = &result->i8[v19];
      uint64_t v36 = a2 - v19;
      do
      {
        int v37 = *v35++;
        v10->i32[0] = v37 << 16;
        int v10 = (int32x4_t *)((char *)v10 + 4);
        --v36;
      }
      while (v36);
LABEL_21:
      ++v18;
      a5 = v10;
      if (v18 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = a5;
  do
  {
    uint64_t v11 = result;
    uint64_t v12 = a2;
    do
    {
      int v13 = v11->i8[0];
      uint64_t v11 = (int8x16_t *)((char *)v11 + 1);
      v10->i32[0] = v13 << 16;
      int v10 = (int32x4_t *)((char *)v10 + 4);
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (const float *)((char *)a4 + v8);
  a5 = v10;
  if ((int)a6 >= a7) {
    goto LABEL_17;
  }
LABEL_9:
  if ((int)a2 < 1)
  {
    uint64_t v14 = a5;
    LODWORD(a6) = a7;
    goto LABEL_32;
  }
  a6 = a6;
  if (a2 >= 0x10)
  {
    uint64_t v64 = 0;
    int v65 = a4;
    while (1)
    {
      uint64_t v66 = 0;
      int v67 = *(_DWORD *)(a3 + 4 * a6);
      uint64_t v68 = (int8x8_t *)&result->i8[v67 * (uint64_t)(int)a2];
      int v69 = (int8x8_t *)((char *)a5 + 4 * a2);
      unint64_t v70 = (unint64_t)result->u64 + a2 + v67 * (uint64_t)(int)a2;
      BOOL v72 = a5 < (int32x4_t *)((char *)result + 2 * a2 + v67 * (uint64_t)(int)a2) && v70 < (unint64_t)v69;
      BOOL v74 = (unint64_t)a5 < v70 && v68 < v69;
      BOOL v75 = v65 >= (const float *)v69 || a5 >= (int32x4_t *)&a4[2 * v64 + 2];
      if (!v75 || v72 || v74)
      {
        uint64_t v14 = a5;
      }
      else
      {
        uint64_t v14 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v76 = v65;
        int32x4_t v77 = (int32x4_t)vld1q_dup_f32(v76++);
        int32x4_t v78 = (int32x4_t)vld1q_dup_f32(v76);
        uint64_t v79 = a2 & 0xFFFFFFF0;
        do
        {
          int16x8_t v80 = vmovl_s8(*v68);
          int16x8_t v81 = vmovl_high_s8(*(int8x16_t *)v68->i8);
          int8x16_t v82 = *(int8x16_t *)&v68->i8[a2];
          int16x8_t v83 = vmovl_s8(*(int8x8_t *)v82.i8);
          int16x8_t v84 = vmovl_high_s8(v82);
          a5[2] = vmlaq_s32(vmulq_s32(v77, vmovl_s16(*(int16x4_t *)v81.i8)), v78, vmovl_s16(*(int16x4_t *)v84.i8));
          a5[3] = vmlaq_s32(vmulq_s32(v77, vmovl_high_s16(v81)), v78, vmovl_high_s16(v84));
          *a5 = vmlaq_s32(vmulq_s32(v77, vmovl_s16(*(int16x4_t *)v80.i8)), v78, vmovl_s16(*(int16x4_t *)v83.i8));
          a5[1] = vmlaq_s32(vmulq_s32(v77, vmovl_high_s16(v80)), v78, vmovl_high_s16(v83));
          a5 += 4;
          v68 += 2;
          v79 -= 16;
        }
        while (v79);
        uint64_t v66 = a2 & 0x7FFFFFF0;
        if ((a2 & 0xFFFFFFF0) == (unint64_t)a2) {
          goto LABEL_51;
        }
      }
      int v85 = &result->i8[v66 + v67 * (uint64_t)(int)a2];
      do
      {
        int v86 = *(_DWORD *)v65 * *v85;
        v14->i32[0] = v86;
        v14->i32[0] = v86 + *((_DWORD *)v65 + 1) * v85[a2];
        uint64_t v14 = (int32x4_t *)((char *)v14 + 4);
        ++v66;
        ++v85;
      }
      while (a2 != v66);
LABEL_51:
      ++a6;
      v65 += 2;
      ++v64;
      a5 = v14;
      if ((int)a6 >= a7) {
        goto LABEL_32;
      }
    }
  }
  uint64_t v14 = a5;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = &result->i8[*(int *)(a3 + 4 * a6) * (uint64_t)(int)a2];
    do
    {
      int v17 = *(_DWORD *)a4 * v16[v15];
      v14->i32[0] = v17;
      v14->i32[0] = v17 + *((_DWORD *)a4 + 1) * v16[a2 + v15];
      uint64_t v14 = (int32x4_t *)((char *)v14 + 4);
      ++v15;
    }
    while (a2 != v15);
    ++a6;
    a4 += 2;
  }
  while ((int)a6 < a7);
LABEL_32:
  if ((int)a6 >= a8 || (int)a2 < 1) {
    return result;
  }
  int v38 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  int32x4_t v39 = &result->i8[v38 * (uint64_t)(int)a2];
  uint64_t v40 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v44 = v38 * (uint64_t)(int)a2;
    uint64_t v45 = 4 * a2;
    unint64_t v46 = (unint64_t)result->u64 + a2 + v44;
    uint64_t v47 = a2 & 0xFFFFFFE0;
    int v48 = (int8x16_t *)((char *)result + v44);
    while (1)
    {
      if ((unint64_t)v14 >= v46 || v39 >= &v14->i8[v45])
      {
        int v49 = (int32x4_t *)((char *)v14 + 4 * (v40 & 0xFFFFFFE0));
        uint64_t v50 = v14 + 4;
        uint64_t v51 = v40 & 0xFFFFFFE0;
        uint64_t v52 = v48 + 1;
        do
        {
          int8x16_t v53 = v52[-1];
          _Q2 = vmovl_high_s8(v53);
          _Q0 = vmovl_s8(*(int8x8_t *)v53.i8);
          _Q3 = vmovl_high_s8(*v52);
          _Q1 = vmovl_s8(*(int8x8_t *)v52->i8);
          int32x4_t v58 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v50[-2] = v58;
          v50[-1] = (int32x4_t)_Q2;
          int32x4_t v59 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v60 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v50[-4] = v59;
          v50[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v50[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v50[3] = _Q0;
          *uint64_t v50 = v60;
          v50[1] = (int32x4_t)_Q1;
          v50 += 8;
          v52 += 2;
          v51 -= 32;
        }
        while (v51);
        uint64_t result = (int8x16_t *)(v40 & 0x7FFFFFE0);
        if (v47 == v40) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t result = 0;
        int v49 = v14;
      }
      uint64_t v62 = &result->i8[(void)v48];
      uint64_t result = (int8x16_t *)(v40 - (void)result);
      do
      {
        int v63 = *v62++;
        v49->i32[0] = v63 << 16;
        int v49 = (int32x4_t *)((char *)v49 + 4);
        uint64_t result = (int8x16_t *)((char *)result - 1);
      }
      while (result);
LABEL_40:
      LODWORD(a6) = a6 + 1;
      uint64_t v14 = v49;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    int16x8_t v41 = v39;
    uint64_t v42 = a2;
    do
    {
      int v43 = *v41++;
      v14->i32[0] = v43 << 16;
      uint64_t v14 = (int32x4_t *)((char *)v14 + 4);
      --v42;
    }
    while (v42);
    LODWORD(a6) = a6 + 1;
  }
  while (a6 != a8);
  return result;
}

int8x16_t *sub_10037EA50(int8x16_t *result, unsigned int a2, uint64_t a3, int *a4, int32x4_t *a5, uint64_t a6, int a7, int a8)
{
  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
  uint64_t v8 = 8 * (a6 - 1) + 8;
  if ((int)a2 <= 0)
  {
    a4 = (int *)((char *)a4 + v8);
    if ((int)a6 >= a7) {
      goto LABEL_34;
    }
    goto LABEL_13;
  }
  if (a2 >= 0x20)
  {
    int v18 = 0;
    while (1)
    {
      if (a5 >= (int32x4_t *)&result->i8[a2] || (char *)a5 + 4 * a2 <= (char *)result)
      {
        int v10 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFE0));
        int v20 = a5 + 4;
        uint64_t v21 = a2 & 0xFFFFFFE0;
        int32x4_t v22 = result + 1;
        do
        {
          int8x16_t v23 = v22[-1];
          _Q2 = vmovl_high_s8(v23);
          _Q0 = vmovl_s8(*(int8x8_t *)v23.i8);
          _Q3 = vmovl_high_s8(*v22);
          _Q1 = vmovl_s8(*(int8x8_t *)v22->i8);
          int32x4_t v28 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v20[-2] = v28;
          v20[-1] = (int32x4_t)_Q2;
          int32x4_t v33 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v34 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v20[-4] = v33;
          v20[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          _DWORD v20[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          v20[3] = _Q0;
          *int v20 = v34;
          v20[1] = (int32x4_t)_Q1;
          v20 += 8;
          v22 += 2;
          v21 -= 32;
        }
        while (v21);
        uint64_t v19 = a2 & 0xFFFFFFE0;
        if (v19 == a2) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v19 = 0;
        int v10 = a5;
      }
      uint64_t v36 = &result->i8[v19];
      uint64_t v37 = a2 - v19;
      do
      {
        int v38 = *v36++;
        v10->i32[0] = v38 << 16;
        int v10 = (int32x4_t *)((char *)v10 + 4);
        --v37;
      }
      while (v37);
LABEL_23:
      ++v18;
      a5 = v10;
      if (v18 == a6) {
        goto LABEL_8;
      }
    }
  }
  int v9 = 0;
  int v10 = a5;
  do
  {
    uint64_t v11 = result;
    uint64_t v12 = a2;
    do
    {
      int v13 = v11->i8[0];
      uint64_t v11 = (int8x16_t *)((char *)v11 + 1);
      v10->i32[0] = v13 << 16;
      int v10 = (int32x4_t *)((char *)v10 + 4);
      --v12;
    }
    while (v12);
    ++v9;
  }
  while (v9 != a6);
LABEL_8:
  a4 = (int *)((char *)a4 + v8);
  a5 = v10;
  if ((int)a6 < a7)
  {
LABEL_13:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      a6 = a6;
      do
      {
        uint64_t v14 = 0;
        uint64_t v15 = &result->i8[*(int *)(a3 + 4 * a6) * (uint64_t)(int)a2];
        do
        {
          int v16 = *a4;
          if (*a4) {
            v16 *= v15[v14];
          }
          a5->i32[0] = v16;
          int v17 = a4[1];
          if (v17) {
            v17 *= v15[a2 + v14];
          }
          a5->i32[0] = v17 + v16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          ++v14;
        }
        while (a2 != v14);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_34:
  if ((int)a6 >= a8 || (int)a2 < 1) {
    return result;
  }
  int v39 = *(_DWORD *)(a3 + 4 * (a8 - 1));
  uint64_t v40 = &result->i8[v39 * (uint64_t)(int)a2];
  uint64_t v41 = a2;
  if (a2 >= 0x20)
  {
    uint64_t v45 = v39 * (uint64_t)(int)a2;
    uint64_t v46 = 4 * a2;
    unint64_t v47 = (unint64_t)result->u64 + a2 + v45;
    uint64_t v48 = a2 & 0xFFFFFFE0;
    int v49 = (int8x16_t *)((char *)result + v45);
    while (1)
    {
      if ((unint64_t)a5 >= v47 || v40 >= &a5->i8[v46])
      {
        uint64_t v50 = (int32x4_t *)((char *)a5 + 4 * (v41 & 0xFFFFFFE0));
        uint64_t v51 = a5 + 4;
        uint64_t v52 = v41 & 0xFFFFFFE0;
        int8x16_t v53 = v49 + 1;
        do
        {
          int8x16_t v54 = v53[-1];
          _Q2 = vmovl_high_s8(v54);
          _Q0 = vmovl_s8(*(int8x8_t *)v54.i8);
          _Q3 = vmovl_high_s8(*v53);
          _Q1 = vmovl_s8(*(int8x8_t *)v53->i8);
          int32x4_t v59 = vshll_n_s16(*(int16x4_t *)_Q2.i8, 0x10uLL);
          __asm { SHLL2           V2.4S, V2.8H, #0x10 }
          v51[-2] = v59;
          v51[-1] = (int32x4_t)_Q2;
          int32x4_t v60 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v61 = vshll_n_s16(*(int16x4_t *)_Q1.i8, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-4] = v60;
          v51[-3] = (int32x4_t)_Q0;
          __asm { SHLL2           V0.4S, V3.8H, #0x10 }
          v51[2] = vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL);
          unint64_t v51[3] = _Q0;
          *uint64_t v51 = v61;
          v51[1] = (int32x4_t)_Q1;
          v51 += 8;
          v53 += 2;
          v52 -= 32;
        }
        while (v52);
        uint64_t result = (int8x16_t *)(v41 & 0x7FFFFFE0);
        if (v48 == v41) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t result = 0;
        uint64_t v50 = a5;
      }
      int v63 = &result->i8[(void)v49];
      uint64_t result = (int8x16_t *)(v41 - (void)result);
      do
      {
        int v64 = *v63++;
        v50->i32[0] = v64 << 16;
        uint64_t v50 = (int32x4_t *)((char *)v50 + 4);
        uint64_t result = (int8x16_t *)((char *)result - 1);
      }
      while (result);
LABEL_42:
      LODWORD(a6) = a6 + 1;
      a5 = v50;
      if (a6 == a8) {
        return result;
      }
    }
  }
  do
  {
    uint64_t v42 = v40;
    uint64_t v43 = a2;
    do
    {
      int v44 = *v42++;
      a5->i32[0] = v44 << 16;
      a5 = (int32x4_t *)((char *)a5 + 4);
      --v43;
    }
    while (v43);
    LODWORD(a6) = a6 + 1;
  }
  while (a6 != a8);
  return result;
}

uint64_t sub_10037ED60(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4)
{
  sub_1002C7414(&v15, a2);
  unint64_t v14 = 0x3FE0000000000000;
  sub_1002C7984(&v15, &v14, &v17);
  sub_1002C79DC((unint64_t *)a1, &v17, (unint64_t *)&v18);
  unint64_t v13 = 0x3FE0000000000000;
  sub_1002C79B0((unint64_t *)&v18, &v13, (unint64_t *)&v16);
  uint64_t result = sub_1002C76EC(&v16);
  if ((result & 0x80000000) != 0 || (int v9 = *(_DWORD *)(a1 + 8), v9 < 2))
  {
    if (*(_DWORD *)(a1 + 12) <= a2 + 1) {
      int v11 = a2 + 1;
    }
    else {
      int v11 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    unsigned int v10 = v9 - 1;
    if (result >= v10)
    {
      *a3 = v10;
      int v12 = *(_DWORD *)(a1 + 16);
      if (v12 >= a2) {
        int v12 = a2;
      }
      *(_DWORD *)(a1 + 16) = v12;
    }
    else
    {
      *a3 = result;
      sub_1002C7414(&v14, result);
      sub_1002C79B0((unint64_t *)&v16, &v14, &v15);
      sub_1002C7414(&v17, 0x10000);
      sub_1002C79DC(&v15, &v17, (unint64_t *)&v18);
      uint64_t result = sub_1002C7638(&v18);
      *a4 = 0x10000 - result;
      a4[1] = result;
    }
  }
  return result;
}

void sub_10037EEB8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

_DWORD *sub_10037EEF0(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = 2 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56);
  bzero(v189, 0x420uLL);
  if (v4 >= 0x109) {
    operator new[]();
  }
  int v5 = *a2;
  int v6 = *(_DWORD *)(a1 + 104);
  if (v6 <= *a2) {
    int v7 = *a2;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 104);
  }
  if (a2[1] >= *(_DWORD *)(a1 + 108)) {
    int v8 = *(_DWORD *)(a1 + 108);
  }
  else {
    int v8 = a2[1];
  }
  if (v5 >= v6)
  {
    int v9 = 0;
    int v10 = -2;
    if (v5 >= v7)
    {
LABEL_11:
      if (v5 >= v8) {
        goto LABEL_101;
      }
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(void, void, void, void, _DWORD *, void, void, void))(a1 + 112))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v189, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    int v5 = *a2;
    int v9 = 1;
    int v10 = -1;
    if (*a2 >= v7) {
      goto LABEL_11;
    }
  }
  uint64_t v126 = v5;
  v127.i64[0] = 0x800000008000;
  v127.i64[1] = 0x800000008000;
  v128.i64[0] = 0x7F0000007FLL;
  v128.i64[1] = 0x7F0000007FLL;
  v129.i64[0] = 0x7F0000007FLL;
  v129.i64[1] = 0x7F0000007FLL;
  do
  {
    uint64_t v130 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v130 < 1) {
      goto LABEL_74;
    }
    uint64_t v131 = *(void *)(a1 + 32);
    uint64_t v132 = *(void *)(a1 + 40);
    if (v130 >= 8
      && (v131 + v132 * v126 < (unint64_t)&v189[v130]
        ? (BOOL v133 = (unint64_t)v189 >= v131 + v132 * v126 + v130)
        : (BOOL v133 = 1),
          v133))
    {
      if (v130 < 0x10)
      {
        uint64_t v134 = 0;
LABEL_96:
        uint64_t v147 = v134;
        uint64_t v134 = v130 & 0xFFFFFFF8;
        float64x2_t v148 = (int32x4_t *)&v189[v147];
        uint16x8_t v149 = (void *)(v131 + v147 + v132 * v126);
        uint64_t v150 = v147 - v134;
        do
        {
          int32x4_t v152 = *v148;
          int32x4_t v151 = v148[1];
          v148 += 2;
          v191.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v151, v127), 0x10uLL), v128), v129);
          v191.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v152, v127), 0x10uLL), v128), v129);
          *v149++ = vqtbl2q_s8(v191, (int8x16_t)xmmword_1004047D0).u64[0];
          v150 += 8;
        }
        while (v150);
        if (v134 == v130) {
          goto LABEL_74;
        }
        goto LABEL_85;
      }
      uint64_t v134 = v130 & 0x7FFFFFF0;
      int v140 = (int8x16_t *)(v131 + v132 * v126);
      uint64_t v141 = v130 & 0xFFFFFFF0;
      unsigned int v142 = (int32x4_t *)v189;
      do
      {
        int32x4_t v144 = v142[2];
        int32x4_t v143 = v142[3];
        int32x4_t v146 = *v142;
        int32x4_t v145 = v142[1];
        v142 += 4;
        v195.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v143, v127), 0x10uLL), v128), v129);
        v195.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v144, v127), 0x10uLL), v128), v129);
        v195.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v145, v127), 0x10uLL), v128), v129);
        v195.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v146, v127), 0x10uLL), v128), v129);
        *v140++ = vqtbl4q_s8(v195, (int8x16_t)xmmword_1004047C0);
        v141 -= 16;
      }
      while (v141);
      if (v134 == v130) {
        goto LABEL_74;
      }
      if ((v130 & 8) != 0) {
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v134 = 0;
    }
LABEL_85:
    uint64_t v135 = v130 - v134;
    uint32x4_t v136 = (unsigned char *)(v131 + v134 + v132 * v126);
    uint16x8_t v137 = &v189[v134];
    do
    {
      int v138 = *v137++;
      int v139 = (v138 + 0x8000) >> 16;
      if (v139 <= -128) {
        int v139 = -128;
      }
      if (v139 >= 127) {
        LOBYTE(v139) = 127;
      }
      *v136++ = v139;
      --v135;
    }
    while (v135);
LABEL_74:
    ++v126;
  }
  while (v126 != v7);
  int v5 = v7;
  if (v7 >= v8)
  {
LABEL_101:
    uint16x8_t v153 = (int32x4_t *)v189;
    uint64_t v154 = *(int *)(a1 + 28);
    if (v10 + 2 <= (int)v154) {
      goto LABEL_107;
    }
    goto LABEL_102;
  }
LABEL_12:
  int16x8_t v186 = a2;
  uint64_t v11 = v5;
  int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
  int8x16_t v13 = (int8x16_t)xmmword_10040A880;
  int8x16_t v14 = (int8x16_t)xmmword_10040A870;
  int v188 = v8;
  int64x2_t v187 = v12;
  while (2)
  {
    int v15 = v10;
    uint64_t v16 = *(void *)(a1 + 72);
    int v17 = v10 + 2;
    int v10 = *(_DWORD *)(v16 + 4 * v11);
    if (v10 <= v17) {
      int v18 = v17;
    }
    else {
      int v18 = *(_DWORD *)(v16 + 4 * v11);
    }
    int v19 = v10 + 2;
    int v20 = *(_DWORD *)(a1 + 28);
    if (v20 < v10 + 2) {
      int v19 = *(_DWORD *)(a1 + 28);
    }
    if (v18 < v19)
    {
      uint64_t v21 = v18;
      do
      {
        (*(void (**)(uint64_t))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v21++);
        int v10 = *(_DWORD *)(v16 + 4 * v11);
        int v9 = (v9 & 1) == 0;
        int v22 = v10 + 2;
        int v20 = *(_DWORD *)(a1 + 28);
        if (v20 < v10 + 2) {
          int v22 = *(_DWORD *)(a1 + 28);
        }
      }
      while (v21 < v22);
      int v8 = v188;
      int8x16_t v13 = (int8x16_t)xmmword_10040A880;
      int64x2_t v12 = v187;
      int8x16_t v14 = (int8x16_t)xmmword_10040A870;
    }
    int v23 = v20 - 2;
    if (v10 <= v23) {
      int v24 = v23;
    }
    else {
      int v24 = v10;
    }
    int v25 = v24 + v9;
    if (v15 > v23) {
      int v23 = v15;
    }
    int v26 = v25 - v23;
    uint64_t v190 = 0;
    if (v26 >= 0) {
      int v9 = v26 & 1;
    }
    else {
      int v9 = -(v26 & 1);
    }
    uint64_t v27 = *(void *)(a1 + 88);
    int v28 = 2 * v11;
    if (v9 < 1)
    {
      int v29 = 0;
      uint64_t v30 = 0;
    }
    else
    {
      int v29 = *(_DWORD *)(v27 + 4 * (v28 | 1));
      uint64_t v30 = 1;
    }
    LODWORD(v190) = v29;
    uint64_t v31 = v28 - v9;
    *(_DWORD *)((unint64_t)&v190 | (4 * v30)) = *(_DWORD *)(v27 + 4 * (v30 + v31));
    if (v9 <= 0)
    {
      HIDWORD(v190) = *(_DWORD *)(v27 + 4 * v31 + 4);
      uint64_t v32 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
      if ((int)v32 < 1) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v32 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
      if ((int)v32 < 1) {
        goto LABEL_13;
      }
    }
    uint64_t v33 = *(void *)(a1 + 32);
    uint64_t v34 = *(void *)(a1 + 40);
    signed int v35 = v190;
    signed int v36 = HIDWORD(v190);
    if (v32 >= 8)
    {
      uint64_t v37 = 0;
      unint64_t v46 = v33 + v34 * v11;
      unint64_t v47 = v33 + v34 * v11 + v32;
      uint64_t v48 = 4 * v32;
      int v49 = &v189[v32];
      BOOL v51 = v46 < (unint64_t)&v189[v32] && (unint64_t)v189 < v47;
      BOOL v52 = (unint64_t)v49 >= v47 || v46 >= (unint64_t)&v49[v32];
      if (!v52 || v51) {
        goto LABEL_42;
      }
      if (v32 >= 0x10)
      {
        uint64_t v37 = v32 & 0xFFFFFFF0;
        int16x8_t v81 = (int64x2_t *)(v33 + v34 * v11);
        uint64_t v82 = v37;
        int16x8_t v83 = (int32x4_t *)v189;
        do
        {
          int32x4_t v84 = v83[1];
          int32x4_t v85 = vdupq_n_s32(v35);
          int32x4_t v86 = v83[2];
          int32x4_t v87 = v83[3];
          int64x2_t v88 = vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v83->i8);
          int64x2_t v89 = vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v84.i8);
          int64x2_t v90 = vmull_high_s32(v85, *v83);
          int64x2_t v91 = vmull_high_s32(v85, v84);
          int64x2_t v92 = vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v86.i8);
          int64x2_t v93 = vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v87.i8);
          int64x2_t v94 = vmull_high_s32(v85, v86);
          int32x4_t v96 = *(int32x4_t *)((char *)&v83[2] + v48);
          int32x4_t v95 = *(int32x4_t *)((char *)&v83[3] + v48);
          int64x2_t v97 = vmull_high_s32(v85, v87);
          int32x4_t v99 = *(int32x4_t *)((char *)v83 + 4 * v32);
          int32x4_t v98 = *(int32x4_t *)((char *)&v83[1] + v48);
          int32x4_t v100 = vdupq_n_s32(v36);
          int64x2_t v101 = vmlal_high_s32(v91, v100, v98);
          int64x2_t v102 = vmlal_s32(v89, *(int32x2_t *)v100.i8, *(int32x2_t *)v98.i8);
          int64x2_t v103 = vdupq_n_s64(0x80000000uLL);
          int64x2_t v104 = vaddq_s64(vmlal_s32(v88, *(int32x2_t *)v100.i8, *(int32x2_t *)v99.i8), v103);
          int64x2_t v105 = vaddq_s64(v102, v103);
          int64x2_t v106 = vaddq_s64(vmlal_high_s32(v90, v100, v99), v103);
          int64x2_t v107 = vaddq_s64(v101, v103);
          int64x2_t v108 = vaddq_s64(vmlal_s32(v92, *(int32x2_t *)v100.i8, *(int32x2_t *)v96.i8), v103);
          int64x2_t v109 = vshrq_n_s64(vaddq_s64(vmlal_high_s32(v97, v100, v95), v103), 0x20uLL);
          int64x2_t v110 = vshrq_n_s64(vaddq_s64(vmlal_high_s32(v94, v100, v96), v103), 0x20uLL);
          int64x2_t v111 = vshrq_n_s64(vaddq_s64(vmlal_s32(v93, *(int32x2_t *)v100.i8, *(int32x2_t *)v95.i8), v103), 0x20uLL);
          int64x2_t v112 = vshrq_n_s64(v108, 0x20uLL);
          int64x2_t v113 = vshrq_n_s64(v107, 0x20uLL);
          int64x2_t v114 = vshrq_n_s64(v106, 0x20uLL);
          int64x2_t v115 = vshrq_n_s64(v105, 0x20uLL);
          int64x2_t v116 = vshrq_n_s64(v104, 0x20uLL);
          int64x2_t v117 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v116, v12), (int8x16_t)v116, (int8x16_t)v12);
          int64x2_t v118 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v115, v12), (int8x16_t)v115, (int8x16_t)v12);
          int64x2_t v119 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v114, v12), (int8x16_t)v114, (int8x16_t)v12);
          int64x2_t v120 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v113, v12), (int8x16_t)v113, (int8x16_t)v12);
          int64x2_t v121 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v112, v12), (int8x16_t)v112, (int8x16_t)v12);
          int64x2_t v122 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v111, v12), (int8x16_t)v111, (int8x16_t)v12);
          int64x2_t v123 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v110, v12), (int8x16_t)v110, (int8x16_t)v12);
          int64x2_t v124 = vdupq_n_s64(0x7FuLL);
          int64x2_t v125 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v109, v12), (int8x16_t)v109, (int8x16_t)v12);
          v197.val[3] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v125), (int8x16_t)v125, (int8x16_t)v124);
          v197.val[1] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v123), (int8x16_t)v123, (int8x16_t)v124);
          v197.val[2] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v122), (int8x16_t)v122, (int8x16_t)v124);
          v197.val[0] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v121), (int8x16_t)v121, (int8x16_t)v124);
          v193.val[3] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v120), (int8x16_t)v120, (int8x16_t)v124);
          v193.val[1] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v119), (int8x16_t)v119, (int8x16_t)v124);
          v193.val[2] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v118), (int8x16_t)v118, (int8x16_t)v124);
          v193.val[0] = vbslq_s8((int8x16_t)vcgtq_s64(v124, v117), (int8x16_t)v117, (int8x16_t)v124);
          v119.i64[0] = vqtbl4q_s8(v193, v14).u64[0];
          v119.i64[1] = vqtbl4q_s8(v197, v14).u64[0];
          *v81++ = v119;
          v83 += 4;
          v82 -= 16;
        }
        while (v82);
        if (v37 == v32) {
          goto LABEL_13;
        }
        if ((v32 & 8) == 0) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v53 = v37;
      uint64_t v37 = v32 & 0xFFFFFFF8;
      int8x16_t v54 = (int32x4_t *)&v189[v53];
      int8x16_t v55 = (int32x4_t *)&v189[v53 + v32];
      int v56 = (void *)(v33 + v53 + v34 * v11);
      uint64_t v57 = v53 - v37;
      do
      {
        int32x4_t v58 = *v54;
        int32x4_t v59 = v54[1];
        v54 += 2;
        int32x4_t v60 = vdupq_n_s32(v35);
        int64x2_t v61 = vmull_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v58.i8);
        int64x2_t v62 = vmull_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v59.i8);
        int64x2_t v63 = vmull_high_s32(v60, v58);
        int64x2_t v64 = vmull_high_s32(v60, v59);
        int32x4_t v66 = *v55;
        int32x4_t v65 = v55[1];
        v55 += 2;
        int32x4_t v67 = vdupq_n_s32(v36);
        int64x2_t v68 = vmlal_high_s32(v64, v67, v65);
        int64x2_t v69 = vmlal_s32(v62, *(int32x2_t *)v67.i8, *(int32x2_t *)v65.i8);
        int64x2_t v70 = vdupq_n_s64(0x80000000uLL);
        int64x2_t v71 = vaddq_s64(vmlal_s32(v61, *(int32x2_t *)v67.i8, *(int32x2_t *)v66.i8), v70);
        int64x2_t v72 = vshrq_n_s64(vaddq_s64(v68, v70), 0x20uLL);
        int64x2_t v73 = vshrq_n_s64(vaddq_s64(vmlal_high_s32(v63, v67, v66), v70), 0x20uLL);
        int64x2_t v74 = vshrq_n_s64(vaddq_s64(v69, v70), 0x20uLL);
        int64x2_t v75 = vshrq_n_s64(v71, 0x20uLL);
        int64x2_t v76 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v75, v12), (int8x16_t)v75, (int8x16_t)v12);
        int64x2_t v77 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v74, v12), (int8x16_t)v74, (int8x16_t)v12);
        int64x2_t v78 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v73, v12), (int8x16_t)v73, (int8x16_t)v12);
        int64x2_t v79 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v72, v12), (int8x16_t)v72, (int8x16_t)v12);
        int64x2_t v80 = vdupq_n_s64(0x7FuLL);
        v194.val[3] = vbslq_s8((int8x16_t)vcgtq_s64(v80, v79), (int8x16_t)v79, (int8x16_t)v80);
        v194.val[1] = vbslq_s8((int8x16_t)vcgtq_s64(v80, v78), (int8x16_t)v78, (int8x16_t)v80);
        v194.val[2] = vbslq_s8((int8x16_t)vcgtq_s64(v80, v77), (int8x16_t)v77, (int8x16_t)v80);
        v194.val[0] = vbslq_s8((int8x16_t)vcgtq_s64(v80, v76), (int8x16_t)v76, (int8x16_t)v80);
        *v56++ = vqtbl4q_s8(v194, v13).u64[0];
        v57 += 8;
      }
      while (v57);
      if (v37 != v32) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v37 = 0;
LABEL_42:
      uint64_t v38 = v32 - v37;
      int v39 = (unsigned char *)(v33 + v37 + v34 * v11);
      uint64_t v40 = &v189[v37 + v32];
      uint64_t v41 = &v189[v37];
      do
      {
        int v43 = *v41++;
        int v42 = v43;
        int v44 = *v40++;
        uint64_t v45 = (v36 * (uint64_t)v44 + v35 * (uint64_t)v42 + 0x80000000) >> 32;
        if (v45 <= -128) {
          uint64_t v45 = -128;
        }
        if (v45 >= 127) {
          LOBYTE(v45) = 127;
        }
        *v39++ = v45;
        --v38;
      }
      while (v38);
    }
LABEL_13:
    if (v8 != ++v11) {
      continue;
    }
    break;
  }
  int v5 = v8;
  a2 = v186;
  uint16x8_t v153 = (int32x4_t *)v189;
  uint64_t v154 = *(int *)(a1 + 28);
  if (v10 + 2 <= (int)v154)
  {
LABEL_107:
    (*(void (**)(uint64_t, void, void, void, _DWORD *, void, void, void))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * (v154 - 1), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v189, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    goto LABEL_108;
  }
LABEL_102:
  int v155 = v9 + ~v10 + v154;
  if (v155 >= 0) {
    int v156 = v155 & 1;
  }
  else {
    int v156 = -(v155 & 1);
  }
  uint16x8_t v153 = (int32x4_t *)&v189[*(_DWORD *)(a1 + 48) * v156 * *(_DWORD *)(a1 + 56)];
LABEL_108:
  int v157 = a2[1];
  if (v5 < v157)
  {
    uint64_t v158 = v5;
    v159.i64[0] = 0x800000008000;
    v159.i64[1] = 0x800000008000;
    v160.i64[0] = 0x7F0000007FLL;
    v160.i64[1] = 0x7F0000007FLL;
    v161.i64[0] = 0x7F0000007FLL;
    v161.i64[1] = 0x7F0000007FLL;
    while (2)
    {
      uint64_t v162 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
      if ((int)v162 < 1) {
        goto LABEL_111;
      }
      uint64_t v163 = *(void *)(a1 + 32);
      uint64_t v164 = *(void *)(a1 + 40);
      if (v162 >= 8
        && (v163 + v164 * v158 < (unint64_t)v153 + 4 * v162
          ? (BOOL v165 = (unint64_t)v153 >= v163 + v164 * v158 + v162)
          : (BOOL v165 = 1),
            v165))
      {
        if (v162 >= 0x10)
        {
          uint64_t v166 = v162 & 0x7FFFFFF0;
          uint16x8_t v172 = (int8x16_t *)(v163 + v164 * v158);
          uint64_t v173 = v162 & 0xFFFFFFF0;
          uint64_t v174 = v153;
          do
          {
            int32x4_t v176 = v174[2];
            int32x4_t v175 = v174[3];
            int32x4_t v178 = *v174;
            int32x4_t v177 = v174[1];
            v174 += 4;
            v196.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v175, v159), 0x10uLL), v160), v161);
            v196.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v176, v159), 0x10uLL), v160), v161);
            v196.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v177, v159), 0x10uLL), v160), v161);
            v196.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v178, v159), 0x10uLL), v160), v161);
            *v172++ = vqtbl4q_s8(v196, (int8x16_t)xmmword_1004047C0);
            v173 -= 16;
          }
          while (v173);
          if (v166 == v162) {
            goto LABEL_110;
          }
          if ((v162 & 8) == 0) {
            goto LABEL_122;
          }
        }
        else
        {
          uint64_t v166 = 0;
        }
        uint64_t v179 = v166;
        uint64_t v166 = v162 & 0xFFFFFFF8;
        unsigned int v180 = (int32x4_t *)((char *)v153 + 4 * v179);
        __int16 v181 = (void *)(v163 + v179 + v164 * v158);
        uint64_t v182 = v179 - v166;
        do
        {
          int32x4_t v184 = *v180;
          int32x4_t v183 = v180[1];
          v180 += 2;
          v192.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v183, v159), 0x10uLL), v160), v161);
          v192.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshrq_n_s32(vaddq_s32(v184, v159), 0x10uLL), v160), v161);
          *v181++ = vqtbl2q_s8(v192, (int8x16_t)xmmword_1004047D0).u64[0];
          v182 += 8;
        }
        while (v182);
        if (v166 != v162) {
          goto LABEL_122;
        }
      }
      else
      {
        uint64_t v166 = 0;
LABEL_122:
        uint64_t v167 = v162 - v166;
        uint64_t v168 = (unsigned char *)(v163 + v166 + v164 * v158);
        uint16x8_t v169 = &v153->i32[v166];
        do
        {
          int v170 = *v169++;
          int v171 = (v170 + 0x8000) >> 16;
          if (v171 <= -128) {
            int v171 = -128;
          }
          if (v171 >= 127) {
            LOBYTE(v171) = 127;
          }
          *v168++ = v171;
          --v167;
        }
        while (v167);
      }
LABEL_110:
      int v157 = a2[1];
LABEL_111:
      if (++v158 >= v157) {
        return v189;
      }
      continue;
    }
  }
  return v189;
}

void sub_10037F8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18 != v18)
  {
    if (a18) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_10037F938(unsigned __int16 *result, uint64_t a2, uint64_t a3, int32x4_t *a4, int32x4_t *a5, int a6, signed int a7, signed int a8)
{
  unsigned int v8 = *result << 16;
  int32x4_t v9 = vdupq_n_s32(v8);
  if (a6 < 4)
  {
    signed int v11 = 0;
    if (a6 <= 0) {
      goto LABEL_16;
    }
  }
  else
  {
    int v10 = 0;
    signed int v11 = a6 & 0xFFFFFFFC;
    do
    {
      *a5++ = v9;
      v10 += 4;
      a4 += 2;
    }
    while (v10 < a6 - 3);
    if (v11 >= a6) {
      goto LABEL_16;
    }
  }
  uint64_t v12 = (~v11 + a6);
  if (v12 >= 7)
  {
    uint64_t v14 = v12 + 1;
    uint64_t v15 = (v12 + 1) & 0x1FFFFFFF8;
    a4 = (int32x4_t *)((char *)a4 + 8 * v15);
    int8x16_t v13 = (int32x4_t *)((char *)a5 + 4 * v15);
    v11 += v15;
    uint64_t v16 = a5 + 1;
    uint64_t v17 = v15;
    do
    {
      v16[-1] = v9;
      int32x4_t *v16 = v9;
      v16 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v14 == v15)
    {
      signed int v11 = a6;
      a5 = (int32x4_t *)((char *)a5 + 4 * v15);
      goto LABEL_16;
    }
  }
  else
  {
    int8x16_t v13 = a5;
  }
  a5 = v13;
  do
  {
    a5->i32[0] = v8;
    a5 = (int32x4_t *)((char *)a5 + 4);
    ++v11;
    a4 = (int32x4_t *)((char *)a4 + 8);
  }
  while (a6 != v11);
  signed int v11 = a6;
LABEL_16:
  if (v11 < a7 - 3)
  {
    uint64_t v18 = (int *)(a3 + 4 * v11 + 8);
    do
    {
      uint64_t v19 = v18[1];
      if ((int)v19 + 8 > *(_DWORD *)(a3 + 4 * (a8 - 1))) {
        break;
      }
      int32x4_t v20 = *a4;
      int32x4_t v21 = a4[1];
      a4 += 2;
      int32x4_t v22 = vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s32(*(int32x2_t *)&result[*(v18 - 2)], *(int32x2_t *)&result[*(v18 - 1)])), v20);
      int64x2_t v23 = (int64x2_t)vmulq_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s32(*(int32x2_t *)&result[*v18], *(int32x2_t *)&result[v19])), v21);
      int32x4_t v24 = (int32x4_t)vzip2q_s64((int64x2_t)v22, v23);
      v22.i64[1] = v23.i64[0];
      int8x16_t v25 = (int8x16_t)vzip1q_s32(v22, v24);
      int8x16_t v26 = (int8x16_t)vzip2q_s32(v22, v24);
      *(int32x2_t *)v25.i8 = vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), *(int32x2_t *)v25.i8);
      v25.u64[1] = (unint64_t)vadd_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(int32x2_t *)v26.i8);
      *a5++ = (int32x4_t)v25;
      v11 += 4;
      v18 += 4;
    }
    while (a7 - 3 > v11);
  }
  if (v11 < a7)
  {
    uint64_t v27 = (int *)(a3 + 4 * v11);
    do
    {
      uint64_t v28 = *v27++;
      __int32 v29 = a4->i32[0];
      __int32 v30 = a4->i32[1];
      a4 = (int32x4_t *)((char *)a4 + 8);
      a5->i32[0] = v29 * result[v28] + v30 * result[v28 + 1];
      a5 = (int32x4_t *)((char *)a5 + 4);
      ++v11;
    }
    while (v11 < a7);
  }
  unsigned int v31 = result[*(int *)(a3 + 4 * a8 - 4)] << 16;
  for (int32x4_t i = vdupq_n_s32(v31); v11 < a8 - 3; v11 += 4)
    *a5++ = i;
  if (v11 < a8)
  {
    uint64_t v33 = (~v11 + a8);
    if (v33 < 7)
    {
      uint64_t v34 = (unsigned int *)a5;
LABEL_31:
      int v39 = a8 - v11;
      do
      {
        *v34++ = v31;
        --v39;
      }
      while (v39);
      return result;
    }
    uint64_t v35 = v33 + 1;
    uint64_t v36 = (v33 + 1) & 0x1FFFFFFF8;
    uint64_t v34 = (unsigned int *)a5 + v36;
    v11 += v36;
    uint64_t v37 = a5 + 1;
    uint64_t v38 = v36;
    do
    {
      v37[-1] = i;
      *uint64_t v37 = i;
      v37 += 2;
      v38 -= 8;
    }
    while (v38);
    if (v35 != v36) {
      goto LABEL_31;
    }
  }
  return result;
}

int16x4_t *sub_10037FB70(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int v13 = 0;
          uint64_t v14 = a5;
          do
          {
            unint64_t v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            uint64_t v16 = result + 2;
            do
            {
              uint64_t v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *uint64_t v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            uint64_t v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            uint64_t v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            uint64_t v28 = a2 & 0xFFFFFFF0;
            __int32 v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *uint64_t v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            uint64_t v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              int v36 = v34->u16[0];
              uint64_t v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (int j = 0; j != a6; ++j)
        {
          int32x4_t v9 = result;
          uint64_t v10 = a2;
          do
          {
            int v11 = v9->u16[0];
            int32x4_t v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_34;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v37 = 2 * a2;
  uint64_t v38 = a6;
  do
  {
    uint64_t v39 = 0;
    uint64_t v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      __int32 v41 = *a4;
      if (*a4) {
        v41 *= *(unsigned __int16 *)&v40[v39];
      }
      a5->i32[0] = v41;
      int v42 = a4[1];
      if (v42) {
        v42 *= *(unsigned __int16 *)&v40[v37 + v39];
      }
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      uint64_t v48 = (int16x4_t *)((char *)result + 2 * v43);
      int v49 = v48 + 2;
      uint64_t v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        BOOL v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v52 = a2 & 0xFFFFFFF0;
        uint64_t v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          int32x4_t v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *BOOL v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int32x4_t v58 = v50;
          unint64_t v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            int v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      int v44 = (unsigned __int16 *)result + v43;
      do
      {
        uint64_t v45 = v44;
        uint64_t v46 = a2;
        do
        {
          int v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

unsigned __int16 *sub_10037FE28(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int v8 = *result << 16;
    int v9 = result[1] << 16;
    if (a6 >= 8)
    {
      uint64_t v10 = a6 & 0xFFFFFFF8;
      int v11 = &a5[2 * v10];
      LODWORD(v12) = *result << 16;
      DWORD1(v12) = result[1] << 16;
      *((void *)&v12 + 1) = __PAIR64__(v9, v8);
      int v13 = a5 + 8;
      uint64_t v14 = v10;
      do
      {
        *(v13 - 2) = v12;
        *(v13 - 1) = v12;
        *int v13 = v12;
        v13[1] = v12;
        v13 += 4;
        v14 -= 8;
      }
      while (v14);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v11;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      int v11 = a5;
    }
    int v15 = a6 - v10;
    do
    {
      uint64_t v16 = v11 + 2;
      *int v11 = v8;
      v11[1] = v9;
      v11 += 2;
      --v15;
    }
    while (v15);
    int v11 = v16;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v17 = a7 - (unint64_t)a6;
    uint64_t v18 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v19 = *v18++;
      int32x4_t v20 = &result[2 * v19];
      *a5 = *a4 * *v20 + a4[1] * v20[2];
      int v21 = *a4;
      int v22 = a4[1];
      a4 += 2;
      int v23 = v21 * v20[1] + v22 * v20[3];
      int32x4_t v24 = a5 + 2;
      a5[1] = v23;
      a5 += 2;
      --v17;
    }
    while (v17);
    a5 = v24;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  int32x4_t v25 = &result[2 * *(int *)(a3 + 4 * (a8 - 1))];
  int v26 = *v25 << 16;
  int v27 = v25[1] << 16;
  uint64_t v28 = (~a7 + a8);
  if (v28 < 7)
  {
    __int32 v29 = a5;
LABEL_22:
    int v35 = a8 - a7;
    do
    {
      int *v29 = v26;
      v29[1] = v27;
      v29 += 2;
      --v35;
    }
    while (v35);
    return result;
  }
  uint64_t v30 = v28 + 1;
  uint64_t v31 = (v28 + 1) & 0x1FFFFFFF8;
  a7 += v31;
  __int32 v29 = &a5[2 * v31];
  *(void *)&long long v32 = __PAIR64__(v27, v26);
  *((void *)&v32 + 1) = __PAIR64__(v27, v26);
  int32x4_t v33 = a5 + 8;
  uint64_t v34 = v31;
  do
  {
    *(v33 - 2) = v32;
    *(v33 - 1) = v32;
    *int32x4_t v33 = v32;
    v33[1] = v32;
    v33 += 4;
    v34 -= 8;
  }
  while (v34);
  if (v30 != v31) {
    goto LABEL_22;
  }
  return result;
}

int16x4_t *sub_10037FFC8(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int v13 = 0;
          uint64_t v14 = a5;
          do
          {
            unint64_t v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            uint64_t v16 = result + 2;
            do
            {
              unint64_t v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *unint64_t v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            uint64_t v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            int v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            uint64_t v28 = a2 & 0xFFFFFFF0;
            __int32 v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *int v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            uint64_t v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              int v36 = v34->u16[0];
              uint64_t v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (int j = 0; j != a6; ++j)
        {
          int v9 = result;
          uint64_t v10 = a2;
          do
          {
            int v11 = v9->u16[0];
            int v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_34;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v37 = 2 * a2;
  uint64_t v38 = a6;
  do
  {
    uint64_t v39 = 0;
    uint64_t v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      __int32 v41 = *a4;
      if (*a4) {
        v41 *= *(unsigned __int16 *)&v40[v39];
      }
      a5->i32[0] = v41;
      int v42 = a4[1];
      if (v42) {
        v42 *= *(unsigned __int16 *)&v40[v37 + v39];
      }
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      uint64_t v48 = (int16x4_t *)((char *)result + 2 * v43);
      int v49 = v48 + 2;
      uint64_t v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        BOOL v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v52 = a2 & 0xFFFFFFF0;
        uint64_t v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          int32x4_t v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *BOOL v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int32x4_t v58 = v50;
          unint64_t v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            int v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      int v44 = (unsigned __int16 *)result + v43;
      do
      {
        uint64_t v45 = v44;
        uint64_t v46 = a2;
        do
        {
          int v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

unsigned __int16 *sub_100380280(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int v8 = *result << 16;
    int v9 = result[1] << 16;
    int v10 = result[2] << 16;
    if (a6 >= 8)
    {
      LODWORD(v15) = result[2] << 16;
      uint64_t v11 = a6 & 0xFFFFFFF8;
      LODWORD(v14) = result[1] << 16;
      LODWORD(v13) = *result << 16;
      DWORD1(v13) = v14;
      *((void *)&v13 + 1) = __PAIR64__(v8, v10);
      DWORD1(v14) = v15;
      *((void *)&v14 + 1) = __PAIR64__(v9, v8);
      DWORD1(v15) = v13;
      uint64_t v12 = &a5[3 * v11];
      *((void *)&v15 + 1) = __PAIR64__(v10, v9);
      uint64_t v16 = v11;
      do
      {
        *(_OWORD *)a5 = v13;
        *((_OWORD *)a5 + 1) = v14;
        *((_OWORD *)a5 + 2) = v15;
        *((_OWORD *)a5 + 3) = v13;
        *((_OWORD *)a5 + 4) = v14;
        *((_OWORD *)a5 + 5) = v15;
        a5 += 24;
        v16 -= 8;
      }
      while (v16);
      if (v11 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v12;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      uint64_t v12 = a5;
    }
    int v17 = a6 - v11;
    do
    {
      *uint64_t v12 = v8;
      v12[1] = v9;
      uint64_t v18 = v12 + 3;
      v12[2] = v10;
      v12 += 3;
      --v17;
    }
    while (v17);
    uint64_t v12 = v18;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v19 = a7 - (unint64_t)a6;
    int32x4_t v20 = (int *)(a3 + 4 * a6);
    do
    {
      int v21 = *v20++;
      int v22 = &result[3 * v21];
      *a5 = *a4 * *v22 + a4[1] * v22[3];
      a5[1] = *a4 * v22[1] + a4[1] * v22[4];
      int v23 = *a4;
      int v24 = a4[1];
      a4 += 2;
      int v25 = v23 * v22[2] + v24 * v22[5];
      int v26 = a5 + 3;
      a5[2] = v25;
      a5 += 3;
      --v19;
    }
    while (v19);
    a5 = v26;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  int v27 = &result[3 * *(int *)(a3 + 4 * (a8 - 1))];
  int v28 = *v27 << 16;
  int v29 = v27[1] << 16;
  unsigned int v30 = v27[2] << 16;
  uint64_t v31 = (~a7 + a8);
  if (v31 < 7)
  {
    int32x4_t v32 = a5;
LABEL_22:
    int v38 = a8 - a7;
    do
    {
      *int32x4_t v32 = v28;
      v32[1] = v29;
      v32[2] = v30;
      v32 += 3;
      --v38;
    }
    while (v38);
    return result;
  }
  uint64_t v33 = v31 + 1;
  *(void *)&long long v36 = __PAIR64__(v28, v30);
  a7 += v33 & 0xFFFFFFF8;
  *(void *)&long long v35 = __PAIR64__(v30, v29);
  *(void *)&long long v34 = __PAIR64__(v29, v28);
  uint64_t result = (unsigned __int16 *)v30;
  *((void *)&v34 + 1) = __PAIR64__(v28, v30);
  *((void *)&v35 + 1) = __PAIR64__(v29, v28);
  int32x4_t v32 = &a5[3 * (v33 & 0x1FFFFFFF8)];
  *((void *)&v36 + 1) = __PAIR64__(v30, v29);
  uint64_t v37 = v33 & 0x1FFFFFFF8;
  do
  {
    *(_OWORD *)a5 = v34;
    *((_OWORD *)a5 + 1) = v35;
    *((_OWORD *)a5 + 2) = v36;
    *((_OWORD *)a5 + 3) = v34;
    *((_OWORD *)a5 + 4) = v35;
    *((_OWORD *)a5 + 5) = v36;
    a5 += 24;
    v37 -= 8;
  }
  while (v37);
  if (v33 != (v33 & 0x1FFFFFFF8)) {
    goto LABEL_22;
  }
  return result;
}

int16x4_t *sub_10038052C(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int v13 = 0;
          long long v14 = a5;
          do
          {
            unint64_t v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            uint64_t v16 = result + 2;
            do
            {
              int v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *int v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            long long v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            int v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            uint64_t v28 = a2 & 0xFFFFFFF0;
            int v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *int v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            long long v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              int v36 = v34->u16[0];
              long long v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (int j = 0; j != a6; ++j)
        {
          int v9 = result;
          uint64_t v10 = a2;
          do
          {
            int v11 = v9->u16[0];
            int v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_34;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v37 = 2 * a2;
  uint64_t v38 = a6;
  do
  {
    uint64_t v39 = 0;
    uint64_t v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      __int32 v41 = *a4;
      if (*a4) {
        v41 *= *(unsigned __int16 *)&v40[v39];
      }
      a5->i32[0] = v41;
      int v42 = a4[1];
      if (v42) {
        v42 *= *(unsigned __int16 *)&v40[v37 + v39];
      }
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      uint64_t v48 = (int16x4_t *)((char *)result + 2 * v43);
      int v49 = v48 + 2;
      uint64_t v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        BOOL v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v52 = a2 & 0xFFFFFFF0;
        uint64_t v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          int32x4_t v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *BOOL v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int32x4_t v58 = v50;
          unint64_t v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            int v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      int v44 = (unsigned __int16 *)result + v43;
      do
      {
        uint64_t v45 = v44;
        uint64_t v46 = a2;
        do
        {
          int v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

int16x4_t *sub_1003807E4(int16x4_t *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int32x4_t v8 = vshll_n_s16(*result, 0x10uLL);
    if (a6 >= 8)
    {
      uint64_t v9 = a6 & 0xFFFFFFF8;
      uint64_t v10 = &a5[v9];
      int v11 = a5 + 4;
      uint64_t v12 = v9;
      do
      {
        v11[-4] = v8;
        v11[-3] = v8;
        v11[-2] = v8;
        v11[-1] = v8;
        *int v11 = v8;
        v11[1] = v8;
        v11[2] = v8;
        v11[3] = v8;
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
      if (v9 == a6)
      {
LABEL_12:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v10;
        if (a6 < a7) {
          goto LABEL_13;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      uint64_t v10 = a5;
    }
    int v13 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v13;
    }
    while (v13);
    goto LABEL_12;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_13:
    unint64_t v14 = a7 - (unint64_t)a6;
    unint64_t v15 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v16 = *v15++;
      int v17 = (unsigned __int16 *)&result[v16];
      a5->i32[0] = *a4 * *v17 + a4[1] * v17[4];
      a5->i32[1] = *a4 * v17[1] + a4[1] * v17[5];
      a5->i32[2] = *a4 * v17[2] + a4[1] * v17[6];
      int v18 = *a4;
      int v19 = a4[1];
      a4 += 2;
      int v20 = v18 * v17[3] + v19 * v17[7];
      int v21 = a5 + 1;
      a5->i32[3] = v20;
      ++a5;
      --v14;
    }
    while (v14);
    a5 = v21;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_16;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_16:
  int32x4_t v22 = vshll_n_s16(result[*(int *)(a3 + 4 * (a8 - 1))], 0x10uLL);
  uint64_t v23 = (~a7 + a8);
  if (v23 < 7)
  {
    int v24 = a5;
LABEL_21:
    int v29 = a8 - a7;
    do
    {
      *v24++ = v22;
      --v29;
    }
    while (v29);
    return result;
  }
  uint64_t v25 = v23 + 1;
  uint64_t v26 = (v23 + 1) & 0x1FFFFFFF8;
  a7 += v26;
  int v24 = &a5[v26];
  int v27 = a5 + 4;
  uint64_t v28 = v26;
  do
  {
    v27[-4] = v22;
    v27[-3] = v22;
    v27[-2] = v22;
    v27[-1] = v22;
    *int v27 = v22;
    v27[1] = v22;
    v27[2] = v22;
    v27[3] = v22;
    v27 += 8;
    v28 -= 8;
  }
  while (v28);
  if (v25 != v26) {
    goto LABEL_21;
  }
  return result;
}

int16x4_t *sub_10038098C(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int v13 = 0;
          unint64_t v14 = a5;
          do
          {
            unint64_t v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            uint64_t v16 = result + 2;
            do
            {
              int v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *int v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            unint64_t v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            int v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            uint64_t v28 = a2 & 0xFFFFFFF0;
            int v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *int v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            long long v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              int v36 = v34->u16[0];
              long long v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (int j = 0; j != a6; ++j)
        {
          uint64_t v9 = result;
          uint64_t v10 = a2;
          do
          {
            int v11 = v9->u16[0];
            uint64_t v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_34;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v37 = 2 * a2;
  uint64_t v38 = a6;
  do
  {
    uint64_t v39 = 0;
    uint64_t v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      __int32 v41 = *a4;
      if (*a4) {
        v41 *= *(unsigned __int16 *)&v40[v39];
      }
      a5->i32[0] = v41;
      int v42 = a4[1];
      if (v42) {
        v42 *= *(unsigned __int16 *)&v40[v37 + v39];
      }
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      uint64_t v48 = (int16x4_t *)((char *)result + 2 * v43);
      int v49 = v48 + 2;
      uint64_t v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        BOOL v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v52 = a2 & 0xFFFFFFF0;
        uint64_t v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          int32x4_t v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *BOOL v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int32x4_t v58 = v50;
          unint64_t v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            int v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      int v44 = (unsigned __int16 *)result + v43;
      do
      {
        uint64_t v45 = v44;
        uint64_t v46 = a2;
        do
        {
          int v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

int16x4_t *sub_100380C44(int16x4_t *result, unsigned int a2, uint64_t a3, _DWORD *a4, unint64_t a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 > 0) {
      goto LABEL_24;
    }
LABEL_10:
    uint64_t v12 = (int32x4_t *)a5;
    LODWORD(v13) = a6;
    goto LABEL_42;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 0xF)
    {
      uint64_t v14 = 4 * (a2 & 0xFFFFFFF0);
      if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
      {
        int v15 = 0;
        unint64_t v16 = a5;
        do
        {
          uint64_t v17 = 0;
          a5 = v16 + v14;
          int v18 = result + 2;
          do
          {
            int v19 = (int32x4_t *)(v16 + v17);
            _Q0 = *(int32x4_t *)v18[-2].i8;
            _Q1 = *(int32x4_t *)v18->i8;
            int32x4_t v22 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            int32x4_t v26 = vshll_n_s16(*v18, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            *int v19 = v22;
            v19[1] = _Q0;
            v19[2] = v26;
            v19[3] = _Q1;
            v17 += 64;
            v18 += 4;
          }
          while (v14 != v17);
          ++v15;
          v16 += v14;
        }
        while (v15 != a6);
      }
      else
      {
        for (int i = 0; i != a6; ++i)
        {
          uint64_t v28 = (int32x4_t *)(a5 + 32);
          a5 += v14;
          uint64_t v29 = a2 & 0xFFFFFFF0;
          unsigned int v30 = result + 2;
          do
          {
            _Q0 = *(int32x4_t *)v30[-2].i8;
            _Q1 = *(int32x4_t *)v30->i8;
            int32x4_t v33 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            int32x4_t v34 = vshll_n_s16(*v30, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            v28[-2] = v33;
            v28[-1] = _Q0;
            int32x4_t *v28 = v34;
            v28[1] = _Q1;
            v28 += 4;
            v30 += 4;
            v29 -= 16;
          }
          while (v29);
          unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          int v36 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
          do
          {
            int v37 = v36->u16[0];
            int v36 = (int16x4_t *)((char *)v36 + 2);
            *(_DWORD *)a5 = v37 << 16;
            a5 += 4;
            --v35;
          }
          while (v35);
        }
      }
    }
    else
    {
      for (int j = 0; j != a6; ++j)
      {
        uint64_t v9 = (unsigned __int16 *)result;
        uint64_t v10 = a2;
        do
        {
          int v11 = *v9++;
          *(_DWORD *)a5 = v11 << 16;
          a5 += 4;
          --v10;
        }
        while (v10);
      }
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if (a6 >= a7) {
    goto LABEL_10;
  }
LABEL_24:
  if ((int)a2 < 1)
  {
    uint64_t v12 = (int32x4_t *)a5;
    LODWORD(v13) = a7;
    goto LABEL_42;
  }
  uint64_t v13 = a6;
  if (a2 >= 8)
  {
    uint64_t v66 = 0;
    int32x4_t v67 = (const float *)a4;
    while (1)
    {
      int v68 = *(_DWORD *)(a3 + 4 * v13) * a2;
      if (a5 >= (unint64_t)&a4[2 * v66 + 2] || (unint64_t)v67 >= a5 + 4 * a2)
      {
        int64x2_t v70 = (uint16x8_t *)((char *)result + 2 * v68);
        uint64_t v12 = (int32x4_t *)(a5 + 4 * (a2 & 0xFFFFFFF8));
        int64x2_t v71 = v67;
        int32x4_t v72 = (int32x4_t)vld1q_dup_f32(v71++);
        int32x4_t v73 = (int32x4_t)vld1q_dup_f32(v71);
        uint64_t v74 = a2 & 0xFFFFFFF8;
        do
        {
          uint16x8_t v75 = *(uint16x8_t *)((char *)v70 + 2 * a2);
          int32x4_t v76 = vmlaq_s32(vmulq_s32(v72, (int32x4_t)vmovl_high_u16(*v70)), v73, (int32x4_t)vmovl_high_u16(v75));
          *(int32x4_t *)a5 = vmlaq_s32(vmulq_s32(v72, (int32x4_t)vmovl_u16(*(uint16x4_t *)v70->i8)), v73, (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8));
          *(int32x4_t *)(a5 + 16) = v76;
          a5 += 32;
          ++v70;
          v74 -= 8;
        }
        while (v74);
        uint64_t v77 = a2 & 0xFFFFFFF8;
        if (v77 == a2) {
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v77 = 0;
        uint64_t v12 = (int32x4_t *)a5;
      }
      uint64_t v78 = 2 * v68;
      int64x2_t v79 = (int16x4_t *)((char *)result + 2 * a2 + 2 * v77 + v78);
      int64x2_t v80 = (int16x4_t *)((char *)result + 2 * v77 + v78);
      uint64_t v81 = a2 - v77;
      do
      {
        int v82 = v80->u16[0];
        int64x2_t v80 = (int16x4_t *)((char *)v80 + 2);
        int v83 = *(_DWORD *)v67 * v82;
        v12->i32[0] = v83;
        int v84 = v79->u16[0];
        int64x2_t v79 = (int16x4_t *)((char *)v79 + 2);
        v12->i32[0] = v83 + *((_DWORD *)v67 + 1) * v84;
        uint64_t v12 = (int32x4_t *)((char *)v12 + 4);
        --v81;
      }
      while (v81);
LABEL_59:
      ++v13;
      v67 += 2;
      ++v66;
      a5 = (unint64_t)v12;
      if ((int)v13 >= a7) {
        goto LABEL_42;
      }
    }
  }
  uint64_t v38 = (int *)(a3 + 4 * a6);
  uint64_t v39 = a4 + 1;
  LODWORD(v13) = a6;
  uint64_t v12 = (int32x4_t *)a5;
  do
  {
    int v40 = *v38++;
    __int32 v41 = (unsigned __int16 *)result + (int)(v40 * a2);
    int v42 = *(v39 - 1) * *v41;
    v12->i32[0] = v42;
    v12->i32[0] = v42 + *v39 * v41[a2];
    if (a2 == 1)
    {
      uint64_t v12 = (int32x4_t *)((char *)v12 + 4);
    }
    else
    {
      int v43 = *(v39 - 1) * v41[1];
      v12->i32[1] = v43;
      v12->i32[1] = v43 + *v39 * v41[a2 + 1];
      if (a2 == 2)
      {
        uint64_t v12 = (int32x4_t *)((char *)v12 + 8);
      }
      else
      {
        int v44 = *(v39 - 1) * v41[2];
        v12->i32[2] = v44;
        v12->i32[2] = v44 + *v39 * v41[a2 + 2];
        if (a2 == 3)
        {
          uint64_t v12 = (int32x4_t *)((char *)v12 + 12);
        }
        else
        {
          int v45 = *(v39 - 1) * v41[3];
          v12->i32[3] = v45;
          v12->i32[3] = v45 + *v39 * v41[a2 + 3];
          if (a2 == 4)
          {
            ++v12;
          }
          else
          {
            int v46 = *(v39 - 1) * v41[4];
            v12[1].i32[0] = v46;
            v12[1].i32[0] = v46 + *v39 * v41[a2 + 4];
            if (a2 == 5)
            {
              uint64_t v12 = (int32x4_t *)((char *)v12 + 20);
            }
            else
            {
              int v47 = *(v39 - 1) * v41[5];
              v12[1].i32[1] = v47;
              v12[1].i32[1] = v47 + *v39 * v41[a2 + 5];
              if (a2 == 6)
              {
                uint64_t v12 = (int32x4_t *)((char *)v12 + 24);
              }
              else
              {
                int v48 = *(v39 - 1) * v41[6];
                v12[1].i32[2] = v48;
                v12[1].i32[2] = v48 + *v39 * v41[a2 + 6];
                uint64_t v12 = (int32x4_t *)((char *)v12 + 28);
              }
            }
          }
        }
      }
    }
    LODWORD(v13) = v13 + 1;
    v39 += 2;
  }
  while ((int)v13 < a7);
LABEL_42:
  if ((int)v13 < a8 && (int)a2 >= 1)
  {
    int v49 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      int8x16_t v54 = (int16x4_t *)((char *)result + 2 * v49);
      int8x16_t v55 = v54 + 2;
      int32x4_t v56 = (char *)v54 + ((2 * a2) & 0x1FFFFFFE0);
      do
      {
        int32x4_t v57 = v12 + 2;
        uint64_t v12 = (int32x4_t *)((char *)v12 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v58 = a2 & 0xFFFFFFF0;
        uint64_t result = v55;
        do
        {
          _Q0 = *(int32x4_t *)result[-2].i8;
          _Q1 = *(int32x4_t *)result->i8;
          int32x4_t v61 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v62 = vshll_n_s16(*result, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v57[-2] = v61;
          v57[-1] = _Q0;
          *int32x4_t v57 = v62;
          v57[1] = _Q1;
          v57 += 4;
          result += 4;
          v58 -= 16;
        }
        while (v58);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          unint64_t v63 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          int64x2_t v64 = v56;
          do
          {
            int v65 = *(unsigned __int16 *)v64;
            v64 += 2;
            uint64_t result = (int16x4_t *)(v65 << 16);
            v12->i32[0] = (int)result;
            uint64_t v12 = (int32x4_t *)((char *)v12 + 4);
            --v63;
          }
          while (v63);
        }
        LODWORD(v13) = v13 + 1;
      }
      while (v13 != a8);
    }
    else
    {
      uint64_t v50 = (unsigned __int16 *)result + v49;
      do
      {
        BOOL v51 = v50;
        uint64_t v52 = a2;
        do
        {
          int v53 = *v51++;
          v12->i32[0] = v53 << 16;
          uint64_t v12 = (int32x4_t *)((char *)v12 + 4);
          --v52;
        }
        while (v52);
        LODWORD(v13) = v13 + 1;
      }
      while (v13 != a8);
    }
  }
  return result;
}

int16x4_t *sub_100381150(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, uint64_t a6, int a7, int a8)
{
  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 0xF)
    {
      uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
      if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
      {
        int v13 = 0;
        uint64_t v14 = a5;
        do
        {
          unint64_t v15 = 0;
          a5 = (int32x4_t *)((char *)v14 + v12);
          unint64_t v16 = result + 2;
          do
          {
            uint64_t v17 = &v14[v15 / 0x10];
            _Q0 = *(int32x4_t *)v16[-2].i8;
            _Q1 = *(int32x4_t *)v16->i8;
            int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            *uint64_t v17 = v20;
            v17[1] = _Q0;
            v17[2] = v25;
            v17[3] = _Q1;
            v15 += 64;
            v16 += 4;
          }
          while (v12 != v15);
          ++v13;
          uint64_t v14 = (int32x4_t *)((char *)v14 + v12);
        }
        while (v13 != a6);
      }
      else
      {
        int v26 = 0;
        do
        {
          int v27 = a5 + 2;
          a5 = (int32x4_t *)((char *)a5 + v12);
          uint64_t v28 = a2 & 0xFFFFFFF0;
          uint64_t v29 = result + 2;
          do
          {
            _Q0 = *(int32x4_t *)v29[-2].i8;
            _Q1 = *(int32x4_t *)v29->i8;
            int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            v27[-2] = v32;
            v27[-1] = _Q0;
            *int v27 = v33;
            v27[1] = _Q1;
            v27 += 4;
            v29 += 4;
            v28 -= 16;
          }
          while (v28);
          unint64_t v34 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          unint64_t v35 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
          do
          {
            int v36 = v35->u16[0];
            unint64_t v35 = (int16x4_t *)((char *)v35 + 2);
            a5->i32[0] = v36 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v34;
          }
          while (v34);
          ++v26;
        }
        while (v26 != a6);
      }
    }
    else
    {
      int v8 = 0;
      do
      {
        uint64_t v9 = result;
        uint64_t v10 = a2;
        do
        {
          int v11 = v9->u16[0];
          uint64_t v9 = (int16x4_t *)((char *)v9 + 2);
          a5->i32[0] = v11 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v10;
        }
        while (v10);
        ++v8;
      }
      while (v8 != a6);
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if ((int)a6 < a7)
  {
LABEL_24:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      uint64_t v37 = 2 * a2;
      a6 = a6;
      do
      {
        uint64_t v38 = 0;
        uint64_t v39 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * a6) * a2);
        do
        {
          __int32 v40 = *a4;
          if (*a4) {
            v40 *= *(unsigned __int16 *)&v39[v38];
          }
          a5->i32[0] = v40;
          int v41 = a4[1];
          if (v41) {
            v41 *= *(unsigned __int16 *)&v39[v37 + v38];
          }
          a5->i32[0] = v41 + v40;
          a5 = (int32x4_t *)((char *)a5 + 4);
          v38 += 2;
        }
        while (v37 != v38);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_34:
  if ((int)a6 < a8 && (int)a2 >= 1)
  {
    int v42 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      int v47 = (int16x4_t *)((char *)result + 2 * v42);
      int v48 = v47 + 2;
      int v49 = (unsigned __int16 *)((char *)v47 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        uint64_t v50 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v51 = a2 & 0xFFFFFFF0;
        uint64_t v52 = v48;
        do
        {
          _Q0 = *(int32x4_t *)v52[-2].i8;
          _Q1 = *(int32x4_t *)v52->i8;
          int32x4_t v55 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v56 = vshll_n_s16(*v52, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v50[-2] = v55;
          v50[-1] = _Q0;
          *uint64_t v50 = v56;
          v50[1] = _Q1;
          v50 += 4;
          v52 += 4;
          v51 -= 16;
        }
        while (v51);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          unint64_t v57 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          uint64_t v58 = v49;
          do
          {
            int v59 = *v58++;
            a5->i32[0] = v59 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v57;
          }
          while (v57);
        }
        LODWORD(a6) = a6 + 1;
      }
      while (a6 != a8);
    }
    else
    {
      int v43 = (unsigned __int16 *)result + v42;
      do
      {
        int v44 = v43;
        uint64_t v45 = a2;
        do
        {
          int v46 = *v44++;
          a5->i32[0] = v46 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v45;
        }
        while (v45);
        LODWORD(a6) = a6 + 1;
      }
      while (a6 != a8);
    }
  }
  return result;
}

uint64_t sub_100381408(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4)
{
  sub_1002C7414(&v15, a2);
  unint64_t v14 = 0x3FE0000000000000;
  sub_1002C7984(&v15, &v14, &v17);
  sub_1002C79DC((unint64_t *)a1, &v17, (unint64_t *)&v18);
  unint64_t v13 = 0x3FE0000000000000;
  sub_1002C79B0((unint64_t *)&v18, &v13, (unint64_t *)&v16);
  uint64_t result = sub_1002C76EC(&v16);
  if ((result & 0x80000000) != 0 || (int v9 = *(_DWORD *)(a1 + 8), v9 < 2))
  {
    if (*(_DWORD *)(a1 + 12) <= a2 + 1) {
      int v11 = a2 + 1;
    }
    else {
      int v11 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    unsigned int v10 = v9 - 1;
    if (result >= v10)
    {
      *a3 = v10;
      int v12 = *(_DWORD *)(a1 + 16);
      if (v12 >= a2) {
        int v12 = a2;
      }
      *(_DWORD *)(a1 + 16) = v12;
    }
    else
    {
      *a3 = result;
      sub_1002C7414(&v14, result);
      sub_1002C79B0((unint64_t *)&v16, &v14, &v15);
      if ((v15 & 0x8000000000000000) != 0)
      {
        uint64_t result = 0;
      }
      else
      {
        sub_1002C7414(&v17, 0x10000);
        sub_1002C79DC(&v15, &v17, (unint64_t *)&v18);
        uint64_t result = sub_1002C7638(&v18);
      }
      *a4 = 0x10000 - result;
      a4[1] = result;
    }
  }
  return result;
}

void sub_100381570(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unsigned char *sub_1003815A8(uint64_t a1, int *a2)
{
  unsigned int v4 = 2 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56);
  bzero(v133, 0x420uLL);
  if (v4 >= 0x109) {
    operator new[]();
  }
  LODWORD(v5) = *a2;
  int v6 = *(_DWORD *)(a1 + 104);
  if (v6 <= *a2) {
    int v7 = *a2;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 104);
  }
  if (a2[1] >= *(_DWORD *)(a1 + 108)) {
    int v8 = *(_DWORD *)(a1 + 108);
  }
  else {
    int v8 = a2[1];
  }
  if ((int)v5 < v6)
  {
    (*(void (**)(void, void, void, void, unsigned char *, void, void, void))(a1 + 112))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v133, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    LODWORD(v5) = *a2;
    int v9 = 1;
    int v10 = -1;
    if (*a2 >= v7) {
      goto LABEL_11;
    }
LABEL_50:
    unint64_t v71 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v71 >= 1)
    {
      uint64_t v72 = (int)v5;
      uint64_t v74 = *(void *)(a1 + 32);
      uint64_t v73 = *(void *)(a1 + 40);
      if (v71 > 0xF)
      {
        uint64_t v81 = v71 & 0x7FFFFFF0;
        unint64_t v82 = v71 - (v71 & 0xFFFFFFF0);
        if (v71 == (v71 & 0xFFFFFFF0))
        {
          uint64_t v83 = v74 + v73 * (int)v5 + 16;
          do
          {
            int v84 = (int32x4_t *)v134;
            int32x4_t v85 = (int16x8_t *)v83;
            uint64_t v86 = v81;
            do
            {
              int32x4_t v88 = v84[-2];
              int32x4_t v87 = v84[-1];
              int32x4_t v90 = *v84;
              int32x4_t v89 = v84[1];
              v84 += 4;
              v85[-1] = vraddhn_high_s32(vraddhn_s32(v88, (int32x4_t)0), v87, (int32x4_t)0);
              *int32x4_t v85 = vraddhn_high_s32(vraddhn_s32(v90, (int32x4_t)0), v89, (int32x4_t)0);
              v85 += 2;
              v86 -= 16;
            }
            while (v86);
            ++v72;
            v83 += v73;
          }
          while (v72 != v7);
        }
        else
        {
          unint64_t v91 = v71 >> 4;
          int64x2_t v92 = (int16x8_t *)(v74 + v73 * (int)v5);
          int64x2_t v93 = v92 + 1;
          int64x2_t v94 = &v92[2 * v91];
          int32x4_t v95 = (int *)&v133[64 * v91];
          do
          {
            uint64_t v96 = v81;
            int64x2_t v97 = v93;
            int32x4_t v98 = (int32x4_t *)v134;
            do
            {
              int32x4_t v100 = v98[-2];
              int32x4_t v99 = v98[-1];
              int32x4_t v102 = *v98;
              int32x4_t v101 = v98[1];
              v98 += 4;
              v97[-1] = vraddhn_high_s32(vraddhn_s32(v100, (int32x4_t)0), v99, (int32x4_t)0);
              *int64x2_t v97 = vraddhn_high_s32(vraddhn_s32(v102, (int32x4_t)0), v101, (int32x4_t)0);
              v97 += 2;
              v96 -= 16;
            }
            while (v96);
            int64x2_t v103 = v95;
            int64x2_t v104 = v94;
            unint64_t v105 = v82;
            do
            {
              int v106 = *v103++;
              v104->i16[0] = (v106 + 0x8000) >> 16;
              int64x2_t v104 = (int16x8_t *)((char *)v104 + 2);
              --v105;
            }
            while (v105);
            ++v72;
            int64x2_t v93 = (int16x8_t *)((char *)v93 + v73);
            int64x2_t v94 = (int16x8_t *)((char *)v94 + v73);
          }
          while (v72 != v7);
        }
      }
      else
      {
        uint16x8_t v75 = (_WORD *)(v74 + v73 * (int)v5);
        do
        {
          int32x4_t v76 = (int *)v133;
          uint64_t v77 = v75;
          unint64_t v78 = v71;
          do
          {
            int v79 = *v76++;
            *v77++ = (v79 + 0x8000) >> 16;
            --v78;
          }
          while (v78);
          ++v72;
          uint16x8_t v75 = (_WORD *)((char *)v75 + v73);
        }
        while (v72 != v7);
      }
    }
    LODWORD(v5) = v7;
    if (v7 < v8) {
      goto LABEL_12;
    }
    goto LABEL_73;
  }
  int v9 = 0;
  int v10 = -2;
  if ((int)v5 < v7) {
    goto LABEL_50;
  }
LABEL_11:
  if ((int)v5 < v8)
  {
LABEL_12:
    uint64_t v5 = (int)v5;
    int v11 = *(_DWORD *)(a1 + 28);
    v12.i64[0] = 0xFFFFLL;
    v12.i64[1] = 0xFFFFLL;
    while (1)
    {
      int v13 = v10;
      uint64_t v14 = *(void *)(a1 + 72);
      int v15 = v10 + 2;
      int v10 = *(_DWORD *)(v14 + 4 * v5);
      if (v10 > v15) {
        int v15 = *(_DWORD *)(v14 + 4 * v5);
      }
      int v16 = v10 + 2;
      if (v11 < v10 + 2) {
        int v16 = v11;
      }
      if (v15 < v16)
      {
        uint64_t v17 = v15;
        do
        {
          (*(void (**)(uint64_t))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v17++);
          int v10 = *(_DWORD *)(v14 + 4 * v5);
          int v9 = (v9 & 1) == 0;
          int v18 = v10 + 2;
          int v11 = *(_DWORD *)(a1 + 28);
          if (v11 < v10 + 2) {
            int v18 = *(_DWORD *)(a1 + 28);
          }
        }
        while (v17 < v18);
        v12.i64[0] = 0xFFFFLL;
        v12.i64[1] = 0xFFFFLL;
      }
      int v19 = v11 - 2;
      if (v10 <= v11 - 2) {
        int v20 = v11 - 2;
      }
      else {
        int v20 = v10;
      }
      int v21 = v20 + v9;
      if (v13 > v19) {
        int v19 = v13;
      }
      int v22 = v21 - v19;
      uint64_t v135 = 0;
      if (v22 >= 0) {
        int v9 = v22 & 1;
      }
      else {
        int v9 = -(v22 & 1);
      }
      uint64_t v23 = *(void *)(a1 + 88);
      int v24 = 2 * v5;
      if (v9 < 1)
      {
        int v25 = 0;
        uint64_t v26 = 0;
      }
      else
      {
        int v25 = *(_DWORD *)(v23 + 4 * (v24 | 1));
        uint64_t v26 = 1;
      }
      LODWORD(v135) = v25;
      uint64_t v27 = v24 - v9;
      *(_DWORD *)((unint64_t)&v135 | (4 * v26)) = *(_DWORD *)(v23 + 4 * (v26 + v27));
      if (v9 <= 0)
      {
        HIDWORD(v135) = *(_DWORD *)(v23 + 4 * v27 + 4);
        uint64_t v28 = (int32x4_t *)v133;
        uint64_t v29 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
        if ((int)v29 < 1) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v28 = (int32x4_t *)v133;
        uint64_t v29 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
        if ((int)v29 < 1) {
          goto LABEL_13;
        }
      }
      uint64_t v30 = *(void *)(a1 + 32);
      uint64_t v31 = *(void *)(a1 + 40);
      unsigned int v33 = v135;
      unsigned int v32 = HIDWORD(v135);
      if (v29 < 8)
      {
        uint64_t v34 = 0;
LABEL_44:
        uint64_t v63 = v29 - v34;
        int64x2_t v64 = (_WORD *)(v30 + v31 * v5 + 2 * v34);
        int v65 = (unsigned int *)&v133[4 * v34 + 4 * v29];
        uint64_t v66 = (unsigned int *)&v133[4 * v34];
        do
        {
          unsigned int v68 = *v66++;
          unsigned int v67 = v68;
          unsigned int v69 = *v65++;
          unint64_t v70 = (v69 * (unint64_t)v32 + v67 * (unint64_t)v33 + 0x80000000) >> 32;
          if (v70 >= 0xFFFF) {
            LOWORD(v70) = -1;
          }
          *v64++ = v70;
          --v63;
        }
        while (v63);
        goto LABEL_13;
      }
      uint64_t v34 = v29 & 0xFFFFFFF8;
      unint64_t v35 = (int16x8_t *)(v30 + v31 * v5);
      uint64_t v36 = v34;
      uint64_t v37 = (uint32x4_t *)v133;
      do
      {
        uint32x4_t v38 = v37[1];
        uint32x4_t v39 = (uint32x4_t)vdupq_n_s32(v33);
        uint64x2_t v40 = vmull_high_u32(v39, *v37);
        uint64x2_t v41 = vmull_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v37->i8);
        uint64x2_t v42 = vmull_high_u32(v39, v38);
        uint64x2_t v43 = vmull_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v38.i8);
        uint32x4_t v45 = *(uint32x4_t *)((char *)v37 + 4 * v29);
        uint32x4_t v44 = *(uint32x4_t *)((char *)v37 + 4 * v29 + 16);
        uint32x4_t v46 = (uint32x4_t)vdupq_n_s32(v32);
        int64x2_t v47 = (int64x2_t)vmlal_u32(v43, *(uint32x2_t *)v46.i8, *(uint32x2_t *)v44.i8);
        int64x2_t v48 = (int64x2_t)vmlal_high_u32(v42, v46, v44);
        int64x2_t v49 = vdupq_n_s64(0x80000000uLL);
        uint64x2_t v50 = (uint64x2_t)vaddq_s64((int64x2_t)vmlal_high_u32(v40, v46, v45), v49);
        uint64x2_t v51 = (uint64x2_t)vaddq_s64((int64x2_t)vmlal_u32(v41, *(uint32x2_t *)v46.i8, *(uint32x2_t *)v45.i8), v49);
        int8x16_t v52 = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v47, v49), 0x20uLL);
        int8x16_t v53 = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v48, v49), 0x20uLL);
        int8x16_t v54 = (int8x16_t)vshrq_n_u64(v51, 0x20uLL);
        int8x16_t v55 = (int8x16_t)vshrq_n_u64(v50, 0x20uLL);
        int8x16_t v56 = (int8x16_t)vcgtq_u64(v12, (uint64x2_t)v55);
        int32x4_t v57 = (int32x4_t)vornq_s8(vandq_s8(v55, v56), v56);
        int8x16_t v58 = (int8x16_t)vcgtq_u64(v12, (uint64x2_t)v54);
        int32x4_t v59 = (int32x4_t)vornq_s8(vandq_s8(v54, v58), v58);
        int8x16_t v60 = (int8x16_t)vcgtq_u64(v12, (uint64x2_t)v53);
        int32x4_t v61 = (int32x4_t)vornq_s8(vandq_s8(v53, v60), v60);
        int8x16_t v62 = (int8x16_t)vcgtq_u64(v12, (uint64x2_t)v52);
        *v35++ = vuzp1q_s16((int16x8_t)vuzp1q_s32(v59, v57), (int16x8_t)vuzp1q_s32((int32x4_t)vornq_s8(vandq_s8(v52, v62), v62), v61));
        v37 += 2;
        v36 -= 8;
      }
      while (v36);
      if (v34 != v29) {
        goto LABEL_44;
      }
LABEL_13:
      if (v8 == ++v5)
      {
        LODWORD(v5) = v8;
        if (v10 + 2 <= v11) {
          goto LABEL_58;
        }
LABEL_74:
        int v107 = v9 + v11 + ~v10;
        if (v107 >= 0) {
          int v108 = v107 & 1;
        }
        else {
          int v108 = -(v107 & 1);
        }
        uint64_t v28 = (int32x4_t *)&v133[4 * *(_DWORD *)(a1 + 48) * v108 * *(_DWORD *)(a1 + 56)];
        uint64_t v80 = a2[1];
        if ((int)v5 < (int)v80) {
          goto LABEL_78;
        }
        return v133;
      }
    }
  }
LABEL_73:
  uint64_t v28 = (int32x4_t *)v133;
  int v11 = *(_DWORD *)(a1 + 28);
  if (v10 + 2 > v11) {
    goto LABEL_74;
  }
LABEL_58:
  (*(void (**)(void, void, void, void, unsigned char *, void, void, void))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * (v11 - 1), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v133, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
  uint64_t v80 = a2[1];
  if ((int)v5 < (int)v80)
  {
LABEL_78:
    unint64_t v109 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v109 >= 1)
    {
      uint64_t v111 = *(void *)(a1 + 32);
      uint64_t v110 = *(void *)(a1 + 40);
      uint64_t v112 = (int)v5;
      if (v109 >= 0x10)
      {
        int64x2_t v119 = (int16x8_t *)(v111 + v110 * (int)v5);
        int64x2_t v120 = v119 + 1;
        int64x2_t v121 = &v119[2 * (v109 >> 4)];
        do
        {
          uint64_t v122 = v109 & 0x7FFFFFF0;
          int64x2_t v123 = v120;
          int64x2_t v124 = v28 + 2;
          do
          {
            int32x4_t v126 = v124[-2];
            int32x4_t v125 = v124[-1];
            int32x4_t v128 = *v124;
            int32x4_t v127 = v124[1];
            v124 += 4;
            v123[-1] = vraddhn_high_s32(vraddhn_s32(v126, (int32x4_t)0), v125, (int32x4_t)0);
            *int64x2_t v123 = vraddhn_high_s32(vraddhn_s32(v128, (int32x4_t)0), v127, (int32x4_t)0);
            v123 += 2;
            v122 -= 16;
          }
          while (v122);
          if (v109 != (v109 & 0x7FFFFFF0))
          {
            int32x4_t v129 = &v28[4 * (v109 >> 4)];
            uint64_t v130 = v121;
            unint64_t v131 = v109 - (v109 & 0xFFFFFFF0);
            do
            {
              int v132 = v129->i32[0];
              int32x4_t v129 = (int32x4_t *)((char *)v129 + 4);
              v130->i16[0] = (v132 + 0x8000) >> 16;
              uint64_t v130 = (int16x8_t *)((char *)v130 + 2);
              --v131;
            }
            while (v131);
          }
          ++v112;
          int64x2_t v120 = (int16x8_t *)((char *)v120 + v110);
          int64x2_t v121 = (int16x8_t *)((char *)v121 + v110);
        }
        while (v112 != v80);
      }
      else
      {
        int64x2_t v113 = (_WORD *)(v111 + v110 * (int)v5);
        do
        {
          int64x2_t v114 = v28;
          int64x2_t v115 = v113;
          unint64_t v116 = v109;
          do
          {
            int v117 = v114->i32[0];
            int64x2_t v114 = (int32x4_t *)((char *)v114 + 4);
            *v115++ = (v117 + 0x8000) >> 16;
            --v116;
          }
          while (v116);
          ++v112;
          int64x2_t v113 = (_WORD *)((char *)v113 + v110);
        }
        while (v112 != v80);
      }
    }
  }
  return v133;
}

void sub_100381CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != v12)
  {
    if (a12) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 *sub_100381CF8(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  unsigned int v8 = *result << 16;
  if (a6 < 8)
  {
    LODWORD(v9) = 0;
    int v10 = (unsigned int *)a5;
LABEL_9:
    int v14 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v14;
    }
    while (v14);
    goto LABEL_11;
  }
  uint64_t v9 = a6 & 0xFFFFFFF8;
  int v10 = (unsigned int *)a5 + v9;
  int32x4_t v11 = vdupq_n_s32(v8);
  uint64_t v12 = a5 + 1;
  uint64_t v13 = v9;
  do
  {
    v12[-1] = v11;
    *uint64_t v12 = v11;
    v12 += 2;
    v13 -= 8;
  }
  while (v13);
  if (v9 != a6) {
    goto LABEL_9;
  }
LABEL_11:
  a4 += 2 * (a6 - 1) + 2;
  a5 = (int32x4_t *)v10;
  if (a6 >= a7) {
    goto LABEL_15;
  }
LABEL_12:
  unint64_t v15 = a7 - (unint64_t)a6;
  int v16 = (int *)(a3 + 4 * a6);
  do
  {
    uint64_t v17 = *v16++;
    int v18 = *a4;
    int v19 = a4[1];
    a4 += 2;
    a5->i32[0] = v18 * (__int16)result[v17] + v19 * (__int16)result[v17 + 1];
    a5 = (int32x4_t *)((char *)a5 + 4);
    --v15;
  }
  while (v15);
  a6 = a7;
LABEL_15:
  if (a6 >= a8) {
    return result;
  }
  unsigned int v20 = result[*(int *)(a3 + 4 * (a8 - 1))] << 16;
  uint64_t v21 = (~a6 + a8);
  if (v21 < 7)
  {
    int v22 = (unsigned int *)a5;
LABEL_21:
    int v28 = a8 - a6;
    do
    {
      *v22++ = v20;
      --v28;
    }
    while (v28);
    return result;
  }
  uint64_t v23 = v21 + 1;
  uint64_t v24 = (v21 + 1) & 0x1FFFFFFF8;
  a6 += v24;
  int v22 = (unsigned int *)a5 + v24;
  int32x4_t v25 = vdupq_n_s32(v20);
  uint64_t v26 = a5 + 1;
  uint64_t v27 = v24;
  do
  {
    v26[-1] = v25;
    *uint64_t v26 = v25;
    v26 += 2;
    v27 -= 8;
  }
  while (v27);
  if (v23 != v24) {
    goto LABEL_21;
  }
  return result;
}

int16x4_t *sub_100381E34(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int v13 = 0;
          int v14 = a5;
          do
          {
            unint64_t v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            int v16 = result + 2;
            do
            {
              uint64_t v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *uint64_t v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            int v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            uint64_t v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            uint64_t v28 = a2 & 0xFFFFFFF0;
            uint64_t v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *uint64_t v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            uint64_t v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              int v36 = v34->u16[0];
              uint64_t v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (int j = 0; j != a6; ++j)
        {
          uint64_t v9 = result;
          uint64_t v10 = a2;
          do
          {
            int v11 = v9->u16[0];
            uint64_t v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_34;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v37 = 2 * a2;
  uint64_t v38 = a6;
  do
  {
    uint64_t v39 = 0;
    uint64x2_t v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      __int32 v41 = *a4;
      if (*a4) {
        v41 *= *(__int16 *)&v40[v39];
      }
      a5->i32[0] = v41;
      int v42 = a4[1];
      if (v42) {
        v42 *= *(__int16 *)&v40[v37 + v39];
      }
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      int64x2_t v48 = (int16x4_t *)((char *)result + 2 * v43);
      int64x2_t v49 = v48 + 2;
      uint64x2_t v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        uint64x2_t v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v52 = a2 & 0xFFFFFFF0;
        int8x16_t v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          int32x4_t v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *uint64x2_t v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int8x16_t v58 = v50;
          unint64_t v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            int v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      uint32x4_t v44 = (unsigned __int16 *)result + v43;
      do
      {
        uint32x4_t v45 = v44;
        uint64_t v46 = a2;
        do
        {
          int v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

unsigned __int16 *sub_1003820EC(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int v8 = *result << 16;
    int v9 = result[1] << 16;
    if (a6 >= 8)
    {
      uint64_t v10 = a6 & 0xFFFFFFF8;
      int v11 = &a5[2 * v10];
      LODWORD(v12) = *result << 16;
      DWORD1(v12) = result[1] << 16;
      *((void *)&v12 + 1) = __PAIR64__(v9, v8);
      int v13 = a5 + 8;
      uint64_t v14 = v10;
      do
      {
        *(v13 - 2) = v12;
        *(v13 - 1) = v12;
        *int v13 = v12;
        v13[1] = v12;
        v13 += 4;
        v14 -= 8;
      }
      while (v14);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v11;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      int v11 = a5;
    }
    int v15 = a6 - v10;
    do
    {
      int v16 = v11 + 2;
      *int v11 = v8;
      v11[1] = v9;
      v11 += 2;
      --v15;
    }
    while (v15);
    int v11 = v16;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v17 = a7 - (unint64_t)a6;
    int v18 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v19 = *v18++;
      int32x4_t v20 = (__int16 *)&result[2 * v19];
      *a5 = *a4 * *v20 + a4[1] * v20[2];
      int v21 = *a4;
      int v22 = a4[1];
      a4 += 2;
      int v23 = v21 * v20[1] + v22 * v20[3];
      uint64_t v24 = a5 + 2;
      a5[1] = v23;
      a5 += 2;
      --v17;
    }
    while (v17);
    a5 = v24;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  int32x4_t v25 = &result[2 * *(int *)(a3 + 4 * (a8 - 1))];
  int v26 = *v25 << 16;
  int v27 = v25[1] << 16;
  uint64_t v28 = (~a7 + a8);
  if (v28 < 7)
  {
    uint64_t v29 = a5;
LABEL_22:
    int v35 = a8 - a7;
    do
    {
      int *v29 = v26;
      v29[1] = v27;
      v29 += 2;
      --v35;
    }
    while (v35);
    return result;
  }
  uint64_t v30 = v28 + 1;
  uint64_t v31 = (v28 + 1) & 0x1FFFFFFF8;
  a7 += v31;
  uint64_t v29 = &a5[2 * v31];
  *(void *)&long long v32 = __PAIR64__(v27, v26);
  *((void *)&v32 + 1) = __PAIR64__(v27, v26);
  int32x4_t v33 = a5 + 8;
  uint64_t v34 = v31;
  do
  {
    *(v33 - 2) = v32;
    *(v33 - 1) = v32;
    *int32x4_t v33 = v32;
    v33[1] = v32;
    v33 += 4;
    v34 -= 8;
  }
  while (v34);
  if (v30 != v31) {
    goto LABEL_22;
  }
  return result;
}

int16x4_t *sub_10038228C(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int v13 = 0;
          uint64_t v14 = a5;
          do
          {
            unint64_t v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            int v16 = result + 2;
            do
            {
              unint64_t v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *unint64_t v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            uint64_t v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            int v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            uint64_t v28 = a2 & 0xFFFFFFF0;
            uint64_t v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *int v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            uint64_t v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              int v36 = v34->u16[0];
              uint64_t v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (int j = 0; j != a6; ++j)
        {
          int v9 = result;
          uint64_t v10 = a2;
          do
          {
            int v11 = v9->u16[0];
            int v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_34;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v37 = 2 * a2;
  uint64_t v38 = a6;
  do
  {
    uint64_t v39 = 0;
    uint64x2_t v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      __int32 v41 = *a4;
      if (*a4) {
        v41 *= *(__int16 *)&v40[v39];
      }
      a5->i32[0] = v41;
      int v42 = a4[1];
      if (v42) {
        v42 *= *(__int16 *)&v40[v37 + v39];
      }
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      int64x2_t v48 = (int16x4_t *)((char *)result + 2 * v43);
      int64x2_t v49 = v48 + 2;
      uint64x2_t v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        uint64x2_t v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v52 = a2 & 0xFFFFFFF0;
        int8x16_t v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          int32x4_t v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *uint64x2_t v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int8x16_t v58 = v50;
          unint64_t v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            int v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      uint32x4_t v44 = (unsigned __int16 *)result + v43;
      do
      {
        uint32x4_t v45 = v44;
        uint64_t v46 = a2;
        do
        {
          int v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

unsigned __int16 *sub_100382544(unsigned __int16 *result, uint64_t a2, uint64_t a3, int *a4, int *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int v8 = *result << 16;
    int v9 = result[1] << 16;
    int v10 = result[2] << 16;
    if (a6 >= 8)
    {
      LODWORD(v15) = result[2] << 16;
      uint64_t v11 = a6 & 0xFFFFFFF8;
      LODWORD(v14) = result[1] << 16;
      LODWORD(v13) = *result << 16;
      DWORD1(v13) = v14;
      *((void *)&v13 + 1) = __PAIR64__(v8, v10);
      DWORD1(v14) = v15;
      *((void *)&v14 + 1) = __PAIR64__(v9, v8);
      DWORD1(v15) = v13;
      uint64_t v12 = &a5[3 * v11];
      *((void *)&v15 + 1) = __PAIR64__(v10, v9);
      uint64_t v16 = v11;
      do
      {
        *(_OWORD *)a5 = v13;
        *((_OWORD *)a5 + 1) = v14;
        *((_OWORD *)a5 + 2) = v15;
        *((_OWORD *)a5 + 3) = v13;
        *((_OWORD *)a5 + 4) = v14;
        *((_OWORD *)a5 + 5) = v15;
        a5 += 24;
        v16 -= 8;
      }
      while (v16);
      if (v11 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v12;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      uint64_t v12 = a5;
    }
    int v17 = a6 - v11;
    do
    {
      *uint64_t v12 = v8;
      v12[1] = v9;
      int v18 = v12 + 3;
      v12[2] = v10;
      v12 += 3;
      --v17;
    }
    while (v17);
    uint64_t v12 = v18;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v19 = a7 - (unint64_t)a6;
    int32x4_t v20 = (int *)(a3 + 4 * a6);
    do
    {
      int v21 = *v20++;
      int v22 = (__int16 *)&result[3 * v21];
      *a5 = *a4 * *v22 + a4[1] * v22[3];
      a5[1] = *a4 * v22[1] + a4[1] * v22[4];
      int v23 = *a4;
      int v24 = a4[1];
      a4 += 2;
      int v25 = v23 * v22[2] + v24 * v22[5];
      int v26 = a5 + 3;
      a5[2] = v25;
      a5 += 3;
      --v19;
    }
    while (v19);
    a5 = v26;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  int v27 = &result[3 * *(int *)(a3 + 4 * (a8 - 1))];
  int v28 = *v27 << 16;
  int v29 = v27[1] << 16;
  unsigned int v30 = v27[2] << 16;
  uint64_t v31 = (~a7 + a8);
  if (v31 < 7)
  {
    int32x4_t v32 = a5;
LABEL_22:
    int v38 = a8 - a7;
    do
    {
      *int32x4_t v32 = v28;
      v32[1] = v29;
      v32[2] = v30;
      v32 += 3;
      --v38;
    }
    while (v38);
    return result;
  }
  uint64_t v33 = v31 + 1;
  *(void *)&long long v36 = __PAIR64__(v28, v30);
  a7 += v33 & 0xFFFFFFF8;
  *(void *)&long long v35 = __PAIR64__(v30, v29);
  *(void *)&long long v34 = __PAIR64__(v29, v28);
  uint64_t result = (unsigned __int16 *)v30;
  *((void *)&v34 + 1) = __PAIR64__(v28, v30);
  *((void *)&v35 + 1) = __PAIR64__(v29, v28);
  int32x4_t v32 = &a5[3 * (v33 & 0x1FFFFFFF8)];
  *((void *)&v36 + 1) = __PAIR64__(v30, v29);
  uint64_t v37 = v33 & 0x1FFFFFFF8;
  do
  {
    *(_OWORD *)a5 = v34;
    *((_OWORD *)a5 + 1) = v35;
    *((_OWORD *)a5 + 2) = v36;
    *((_OWORD *)a5 + 3) = v34;
    *((_OWORD *)a5 + 4) = v35;
    *((_OWORD *)a5 + 5) = v36;
    a5 += 24;
    v37 -= 8;
  }
  while (v37);
  if (v33 != (v33 & 0x1FFFFFFF8)) {
    goto LABEL_22;
  }
  return result;
}

int16x4_t *sub_1003827F0(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int v13 = 0;
          long long v14 = a5;
          do
          {
            unint64_t v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            uint64_t v16 = result + 2;
            do
            {
              int v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *int v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            long long v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            int v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            uint64_t v28 = a2 & 0xFFFFFFF0;
            int v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *int v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            long long v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              int v36 = v34->u16[0];
              long long v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (int j = 0; j != a6; ++j)
        {
          int v9 = result;
          uint64_t v10 = a2;
          do
          {
            int v11 = v9->u16[0];
            int v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_34;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v37 = 2 * a2;
  uint64_t v38 = a6;
  do
  {
    uint64_t v39 = 0;
    uint64x2_t v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      __int32 v41 = *a4;
      if (*a4) {
        v41 *= *(__int16 *)&v40[v39];
      }
      a5->i32[0] = v41;
      int v42 = a4[1];
      if (v42) {
        v42 *= *(__int16 *)&v40[v37 + v39];
      }
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      int64x2_t v48 = (int16x4_t *)((char *)result + 2 * v43);
      int64x2_t v49 = v48 + 2;
      uint64x2_t v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        uint64x2_t v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v52 = a2 & 0xFFFFFFF0;
        int8x16_t v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          int32x4_t v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *uint64x2_t v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int8x16_t v58 = v50;
          unint64_t v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            int v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      uint32x4_t v44 = (unsigned __int16 *)result + v43;
      do
      {
        uint32x4_t v45 = v44;
        uint64_t v46 = a2;
        do
        {
          int v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

int16x4_t *sub_100382AA8(int16x4_t *result, uint64_t a2, uint64_t a3, int *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int32x4_t v8 = vshll_n_s16(*result, 0x10uLL);
    if (a6 >= 8)
    {
      uint64_t v9 = a6 & 0xFFFFFFF8;
      uint64_t v10 = &a5[v9];
      int v11 = a5 + 4;
      uint64_t v12 = v9;
      do
      {
        v11[-4] = v8;
        v11[-3] = v8;
        v11[-2] = v8;
        v11[-1] = v8;
        *int v11 = v8;
        v11[1] = v8;
        v11[2] = v8;
        v11[3] = v8;
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
      if (v9 == a6)
      {
LABEL_12:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v10;
        if (a6 < a7) {
          goto LABEL_13;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      uint64_t v10 = a5;
    }
    int v13 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v13;
    }
    while (v13);
    goto LABEL_12;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_13:
    unint64_t v14 = a7 - (unint64_t)a6;
    unint64_t v15 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v16 = *v15++;
      int v17 = (__int16 *)&result[v16];
      a5->i32[0] = *a4 * *v17 + a4[1] * v17[4];
      a5->i32[1] = *a4 * v17[1] + a4[1] * v17[5];
      a5->i32[2] = *a4 * v17[2] + a4[1] * v17[6];
      int v18 = *a4;
      int v19 = a4[1];
      a4 += 2;
      int v20 = v18 * v17[3] + v19 * v17[7];
      int v21 = a5 + 1;
      a5->i32[3] = v20;
      ++a5;
      --v14;
    }
    while (v14);
    a5 = v21;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_16;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_16:
  int32x4_t v22 = vshll_n_s16(result[*(int *)(a3 + 4 * (a8 - 1))], 0x10uLL);
  uint64_t v23 = (~a7 + a8);
  if (v23 < 7)
  {
    int v24 = a5;
LABEL_21:
    int v29 = a8 - a7;
    do
    {
      *v24++ = v22;
      --v29;
    }
    while (v29);
    return result;
  }
  uint64_t v25 = v23 + 1;
  uint64_t v26 = (v23 + 1) & 0x1FFFFFFF8;
  a7 += v26;
  int v24 = &a5[v26];
  int v27 = a5 + 4;
  uint64_t v28 = v26;
  do
  {
    v27[-4] = v22;
    v27[-3] = v22;
    v27[-2] = v22;
    v27[-1] = v22;
    *int v27 = v22;
    v27[1] = v22;
    v27[2] = v22;
    v27[3] = v22;
    v27 += 8;
    v28 -= 8;
  }
  while (v28);
  if (v25 != v26) {
    goto LABEL_21;
  }
  return result;
}

int16x4_t *sub_100382C50(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 0xF)
      {
        uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
        if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int v13 = 0;
          unint64_t v14 = a5;
          do
          {
            unint64_t v15 = 0;
            a5 = (int32x4_t *)((char *)v14 + v12);
            uint64_t v16 = result + 2;
            do
            {
              int v17 = &v14[v15 / 0x10];
              _Q0 = *(int32x4_t *)v16[-2].i8;
              _Q1 = *(int32x4_t *)v16->i8;
              int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              *int v17 = v20;
              v17[1] = _Q0;
              v17[2] = v25;
              v17[3] = _Q1;
              v15 += 64;
              v16 += 4;
            }
            while (v12 != v15);
            ++v13;
            unint64_t v14 = (int32x4_t *)((char *)v14 + v12);
          }
          while (v13 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            int v27 = a5 + 2;
            a5 = (int32x4_t *)((char *)a5 + v12);
            uint64_t v28 = a2 & 0xFFFFFFF0;
            int v29 = result + 2;
            do
            {
              _Q0 = *(int32x4_t *)v29[-2].i8;
              _Q1 = *(int32x4_t *)v29->i8;
              int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
              __asm { SHLL2           V0.4S, V0.8H, #0x10 }
              int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
              __asm { SHLL2           V1.4S, V1.8H, #0x10 }
              v27[-2] = v32;
              v27[-1] = _Q0;
              *int v27 = v33;
              v27[1] = _Q1;
              v27 += 4;
              v29 += 4;
              v28 -= 16;
            }
            while (v28);
            long long v34 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
            unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
            do
            {
              int v36 = v34->u16[0];
              long long v34 = (int16x4_t *)((char *)v34 + 2);
              a5->i32[0] = v36 << 16;
              a5 = (int32x4_t *)((char *)a5 + 4);
              --v35;
            }
            while (v35);
          }
        }
      }
      else
      {
        for (int j = 0; j != a6; ++j)
        {
          uint64_t v9 = result;
          uint64_t v10 = a2;
          do
          {
            int v11 = v9->u16[0];
            uint64_t v9 = (int16x4_t *)((char *)v9 + 2);
            a5->i32[0] = v11 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v10;
          }
          while (v10);
        }
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_34;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v37 = 2 * a2;
  uint64_t v38 = a6;
  do
  {
    uint64_t v39 = 0;
    uint64x2_t v40 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * v38) * a2);
    do
    {
      __int32 v41 = *a4;
      if (*a4) {
        v41 *= *(__int16 *)&v40[v39];
      }
      a5->i32[0] = v41;
      int v42 = a4[1];
      if (v42) {
        v42 *= *(__int16 *)&v40[v37 + v39];
      }
      a5->i32[0] = v42 + v41;
      a5 = (int32x4_t *)((char *)a5 + 4);
      v39 += 2;
    }
    while (v37 != v39);
    ++v38;
    a4 += 2;
  }
  while ((int)v38 < a7);
  a6 = a7;
LABEL_34:
  if ((int)a2 >= 1 && a6 < a8)
  {
    int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      int64x2_t v48 = (int16x4_t *)((char *)result + 2 * v43);
      int64x2_t v49 = v48 + 2;
      uint64x2_t v50 = (unsigned __int16 *)((char *)v48 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        uint64x2_t v51 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v52 = a2 & 0xFFFFFFF0;
        int8x16_t v53 = v49;
        do
        {
          _Q0 = *(int32x4_t *)v53[-2].i8;
          _Q1 = *(int32x4_t *)v53->i8;
          int32x4_t v56 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v57 = vshll_n_s16(*v53, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v51[-2] = v56;
          v51[-1] = _Q0;
          *uint64x2_t v51 = v57;
          v51[1] = _Q1;
          v51 += 4;
          v53 += 4;
          v52 -= 16;
        }
        while (v52);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          int8x16_t v58 = v50;
          unint64_t v59 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          do
          {
            int v60 = *v58++;
            a5->i32[0] = v60 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v59;
          }
          while (v59);
        }
        ++a6;
      }
      while (a6 != a8);
    }
    else
    {
      uint32x4_t v44 = (unsigned __int16 *)result + v43;
      do
      {
        uint32x4_t v45 = v44;
        uint64_t v46 = a2;
        do
        {
          int v47 = *v45++;
          a5->i32[0] = v47 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v46;
        }
        while (v46);
        ++a6;
      }
      while (a6 != a8);
    }
  }
  return result;
}

int16x4_t *sub_100382F08(int16x4_t *result, unsigned int a2, uint64_t a3, _DWORD *a4, unint64_t a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 > 0) {
      goto LABEL_24;
    }
LABEL_10:
    uint64_t v12 = (int32x4_t *)a5;
    LODWORD(v13) = a6;
    goto LABEL_42;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 0xF)
    {
      uint64_t v14 = 4 * (a2 & 0xFFFFFFF0);
      if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
      {
        int v15 = 0;
        unint64_t v16 = a5;
        do
        {
          uint64_t v17 = 0;
          a5 = v16 + v14;
          int v18 = result + 2;
          do
          {
            int v19 = (int32x4_t *)(v16 + v17);
            _Q0 = *(int32x4_t *)v18[-2].i8;
            _Q1 = *(int32x4_t *)v18->i8;
            int32x4_t v22 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            int32x4_t v26 = vshll_n_s16(*v18, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            *int v19 = v22;
            v19[1] = _Q0;
            v19[2] = v26;
            v19[3] = _Q1;
            v17 += 64;
            v18 += 4;
          }
          while (v14 != v17);
          ++v15;
          v16 += v14;
        }
        while (v15 != a6);
      }
      else
      {
        for (int i = 0; i != a6; ++i)
        {
          uint64_t v28 = (int32x4_t *)(a5 + 32);
          a5 += v14;
          uint64_t v29 = a2 & 0xFFFFFFF0;
          unsigned int v30 = result + 2;
          do
          {
            _Q0 = *(int32x4_t *)v30[-2].i8;
            _Q1 = *(int32x4_t *)v30->i8;
            int32x4_t v33 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            int32x4_t v34 = vshll_n_s16(*v30, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            v28[-2] = v33;
            v28[-1] = _Q0;
            int32x4_t *v28 = v34;
            v28[1] = _Q1;
            v28 += 4;
            v30 += 4;
            v29 -= 16;
          }
          while (v29);
          unint64_t v35 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          int v36 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
          do
          {
            int v37 = v36->u16[0];
            int v36 = (int16x4_t *)((char *)v36 + 2);
            *(_DWORD *)a5 = v37 << 16;
            a5 += 4;
            --v35;
          }
          while (v35);
        }
      }
    }
    else
    {
      for (int j = 0; j != a6; ++j)
      {
        uint64_t v9 = (unsigned __int16 *)result;
        uint64_t v10 = a2;
        do
        {
          int v11 = *v9++;
          *(_DWORD *)a5 = v11 << 16;
          a5 += 4;
          --v10;
        }
        while (v10);
      }
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if (a6 >= a7) {
    goto LABEL_10;
  }
LABEL_24:
  if ((int)a2 < 1)
  {
    uint64_t v12 = (int32x4_t *)a5;
    LODWORD(v13) = a7;
    goto LABEL_42;
  }
  uint64_t v13 = a6;
  if (a2 >= 8)
  {
    uint64_t v66 = 0;
    unsigned int v67 = (const float *)a4;
    while (1)
    {
      int v68 = *(_DWORD *)(a3 + 4 * v13) * a2;
      if (a5 >= (unint64_t)&a4[2 * v66 + 2] || (unint64_t)v67 >= a5 + 4 * a2)
      {
        unint64_t v70 = (int16x8_t *)((char *)result + 2 * v68);
        uint64_t v12 = (int32x4_t *)(a5 + 4 * (a2 & 0xFFFFFFF8));
        unint64_t v71 = v67;
        int32x4_t v72 = (int32x4_t)vld1q_dup_f32(v71++);
        int32x4_t v73 = (int32x4_t)vld1q_dup_f32(v71);
        uint64_t v74 = a2 & 0xFFFFFFF8;
        do
        {
          int16x8_t v75 = *(int16x8_t *)((char *)v70 + 2 * a2);
          int32x4_t v76 = vmlaq_s32(vmulq_s32(v72, vmovl_high_s16(*v70)), v73, vmovl_high_s16(v75));
          *(int32x4_t *)a5 = vmlaq_s32(vmulq_s32(v72, vmovl_s16(*(int16x4_t *)v70->i8)), v73, vmovl_s16(*(int16x4_t *)v75.i8));
          *(int32x4_t *)(a5 + 16) = v76;
          a5 += 32;
          ++v70;
          v74 -= 8;
        }
        while (v74);
        uint64_t v77 = a2 & 0xFFFFFFF8;
        if (v77 == a2) {
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v77 = 0;
        uint64_t v12 = (int32x4_t *)a5;
      }
      uint64_t v78 = 2 * v68;
      int v79 = (int16x4_t *)((char *)result + 2 * a2 + 2 * v77 + v78);
      uint64_t v80 = (int16x4_t *)((char *)result + 2 * v77 + v78);
      uint64_t v81 = a2 - v77;
      do
      {
        int v82 = v80->i16[0];
        uint64_t v80 = (int16x4_t *)((char *)v80 + 2);
        int v83 = *(_DWORD *)v67 * v82;
        v12->i32[0] = v83;
        int v84 = v79->i16[0];
        int v79 = (int16x4_t *)((char *)v79 + 2);
        v12->i32[0] = v83 + *((_DWORD *)v67 + 1) * v84;
        uint64_t v12 = (int32x4_t *)((char *)v12 + 4);
        --v81;
      }
      while (v81);
LABEL_59:
      ++v13;
      v67 += 2;
      ++v66;
      a5 = (unint64_t)v12;
      if ((int)v13 >= a7) {
        goto LABEL_42;
      }
    }
  }
  uint64_t v38 = (int *)(a3 + 4 * a6);
  uint64_t v39 = a4 + 1;
  LODWORD(v13) = a6;
  uint64_t v12 = (int32x4_t *)a5;
  do
  {
    int v40 = *v38++;
    __int32 v41 = (__int16 *)result + (int)(v40 * a2);
    int v42 = *(v39 - 1) * *v41;
    v12->i32[0] = v42;
    v12->i32[0] = v42 + *v39 * v41[a2];
    if (a2 == 1)
    {
      uint64_t v12 = (int32x4_t *)((char *)v12 + 4);
    }
    else
    {
      int v43 = *(v39 - 1) * v41[1];
      v12->i32[1] = v43;
      v12->i32[1] = v43 + *v39 * v41[a2 + 1];
      if (a2 == 2)
      {
        uint64_t v12 = (int32x4_t *)((char *)v12 + 8);
      }
      else
      {
        int v44 = *(v39 - 1) * v41[2];
        v12->i32[2] = v44;
        v12->i32[2] = v44 + *v39 * v41[a2 + 2];
        if (a2 == 3)
        {
          uint64_t v12 = (int32x4_t *)((char *)v12 + 12);
        }
        else
        {
          int v45 = *(v39 - 1) * v41[3];
          v12->i32[3] = v45;
          v12->i32[3] = v45 + *v39 * v41[a2 + 3];
          if (a2 == 4)
          {
            ++v12;
          }
          else
          {
            int v46 = *(v39 - 1) * v41[4];
            v12[1].i32[0] = v46;
            v12[1].i32[0] = v46 + *v39 * v41[a2 + 4];
            if (a2 == 5)
            {
              uint64_t v12 = (int32x4_t *)((char *)v12 + 20);
            }
            else
            {
              int v47 = *(v39 - 1) * v41[5];
              v12[1].i32[1] = v47;
              v12[1].i32[1] = v47 + *v39 * v41[a2 + 5];
              if (a2 == 6)
              {
                uint64_t v12 = (int32x4_t *)((char *)v12 + 24);
              }
              else
              {
                int v48 = *(v39 - 1) * v41[6];
                v12[1].i32[2] = v48;
                v12[1].i32[2] = v48 + *v39 * v41[a2 + 6];
                uint64_t v12 = (int32x4_t *)((char *)v12 + 28);
              }
            }
          }
        }
      }
    }
    LODWORD(v13) = v13 + 1;
    v39 += 2;
  }
  while ((int)v13 < a7);
LABEL_42:
  if ((int)v13 < a8 && (int)a2 >= 1)
  {
    int v49 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      int8x16_t v54 = (int16x4_t *)((char *)result + 2 * v49);
      int8x16_t v55 = v54 + 2;
      int32x4_t v56 = (char *)v54 + ((2 * a2) & 0x1FFFFFFE0);
      do
      {
        int32x4_t v57 = v12 + 2;
        uint64_t v12 = (int32x4_t *)((char *)v12 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v58 = a2 & 0xFFFFFFF0;
        uint64_t result = v55;
        do
        {
          _Q0 = *(int32x4_t *)result[-2].i8;
          _Q1 = *(int32x4_t *)result->i8;
          int32x4_t v61 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v62 = vshll_n_s16(*result, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v57[-2] = v61;
          v57[-1] = _Q0;
          *int32x4_t v57 = v62;
          v57[1] = _Q1;
          v57 += 4;
          result += 4;
          v58 -= 16;
        }
        while (v58);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          unint64_t v63 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          int64x2_t v64 = v56;
          do
          {
            int v65 = *(unsigned __int16 *)v64;
            v64 += 2;
            uint64_t result = (int16x4_t *)(v65 << 16);
            v12->i32[0] = (int)result;
            uint64_t v12 = (int32x4_t *)((char *)v12 + 4);
            --v63;
          }
          while (v63);
        }
        LODWORD(v13) = v13 + 1;
      }
      while (v13 != a8);
    }
    else
    {
      uint64x2_t v50 = (unsigned __int16 *)result + v49;
      do
      {
        uint64x2_t v51 = v50;
        uint64_t v52 = a2;
        do
        {
          int v53 = *v51++;
          v12->i32[0] = v53 << 16;
          uint64_t v12 = (int32x4_t *)((char *)v12 + 4);
          --v52;
        }
        while (v52);
        LODWORD(v13) = v13 + 1;
      }
      while (v13 != a8);
    }
  }
  return result;
}

int16x4_t *sub_100383414(int16x4_t *result, unsigned int a2, uint64_t a3, __int32 *a4, int32x4_t *a5, uint64_t a6, int a7, int a8)
{
  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0) {
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 0xF)
    {
      uint64_t v12 = 4 * (a2 & 0xFFFFFFF0);
      if (a2 == (unint64_t)(a2 & 0xFFFFFFF0))
      {
        int v13 = 0;
        uint64_t v14 = a5;
        do
        {
          unint64_t v15 = 0;
          a5 = (int32x4_t *)((char *)v14 + v12);
          unint64_t v16 = result + 2;
          do
          {
            uint64_t v17 = &v14[v15 / 0x10];
            _Q0 = *(int32x4_t *)v16[-2].i8;
            _Q1 = *(int32x4_t *)v16->i8;
            int32x4_t v20 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            int32x4_t v25 = vshll_n_s16(*v16, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            *uint64_t v17 = v20;
            v17[1] = _Q0;
            v17[2] = v25;
            v17[3] = _Q1;
            v15 += 64;
            v16 += 4;
          }
          while (v12 != v15);
          ++v13;
          uint64_t v14 = (int32x4_t *)((char *)v14 + v12);
        }
        while (v13 != a6);
      }
      else
      {
        int v26 = 0;
        do
        {
          int v27 = a5 + 2;
          a5 = (int32x4_t *)((char *)a5 + v12);
          uint64_t v28 = a2 & 0xFFFFFFF0;
          uint64_t v29 = result + 2;
          do
          {
            _Q0 = *(int32x4_t *)v29[-2].i8;
            _Q1 = *(int32x4_t *)v29->i8;
            int32x4_t v32 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
            __asm { SHLL2           V0.4S, V0.8H, #0x10 }
            int32x4_t v33 = vshll_n_s16(*v29, 0x10uLL);
            __asm { SHLL2           V1.4S, V1.8H, #0x10 }
            v27[-2] = v32;
            v27[-1] = _Q0;
            *int v27 = v33;
            v27[1] = _Q1;
            v27 += 4;
            v29 += 4;
            v28 -= 16;
          }
          while (v28);
          unint64_t v34 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          unint64_t v35 = (int16x4_t *)((char *)result + ((2 * a2) & 0x1FFFFFFE0));
          do
          {
            int v36 = v35->u16[0];
            unint64_t v35 = (int16x4_t *)((char *)v35 + 2);
            a5->i32[0] = v36 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v34;
          }
          while (v34);
          ++v26;
        }
        while (v26 != a6);
      }
    }
    else
    {
      int v8 = 0;
      do
      {
        uint64_t v9 = result;
        uint64_t v10 = a2;
        do
        {
          int v11 = v9->u16[0];
          uint64_t v9 = (int16x4_t *)((char *)v9 + 2);
          a5->i32[0] = v11 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v10;
        }
        while (v10);
        ++v8;
      }
      while (v8 != a6);
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if ((int)a6 < a7)
  {
LABEL_24:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      uint64_t v37 = 2 * a2;
      a6 = a6;
      do
      {
        uint64_t v38 = 0;
        uint64_t v39 = (char *)result + 2 * (int)(*(_DWORD *)(a3 + 4 * a6) * a2);
        do
        {
          __int32 v40 = *a4;
          if (*a4) {
            v40 *= *(__int16 *)&v39[v38];
          }
          a5->i32[0] = v40;
          int v41 = a4[1];
          if (v41) {
            v41 *= *(__int16 *)&v39[v37 + v38];
          }
          a5->i32[0] = v41 + v40;
          a5 = (int32x4_t *)((char *)a5 + 4);
          v38 += 2;
        }
        while (v37 != v38);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_34:
  if ((int)a6 < a8 && (int)a2 >= 1)
  {
    int v42 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 0x10)
    {
      int v47 = (int16x4_t *)((char *)result + 2 * v42);
      int v48 = v47 + 2;
      int v49 = (unsigned __int16 *)((char *)v47 + ((2 * a2) & 0x1FFFFFFE0));
      do
      {
        uint64x2_t v50 = a5 + 2;
        a5 = (int32x4_t *)((char *)a5 + 4 * (a2 & 0xFFFFFFF0));
        uint64_t v51 = a2 & 0xFFFFFFF0;
        uint64_t v52 = v48;
        do
        {
          _Q0 = *(int32x4_t *)v52[-2].i8;
          _Q1 = *(int32x4_t *)v52->i8;
          int32x4_t v55 = vshll_n_s16(*(int16x4_t *)_Q0.i8, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          int32x4_t v56 = vshll_n_s16(*v52, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v50[-2] = v55;
          v50[-1] = _Q0;
          *uint64x2_t v50 = v56;
          v50[1] = _Q1;
          v50 += 4;
          v52 += 4;
          v51 -= 16;
        }
        while (v51);
        if (a2 != (unint64_t)(a2 & 0xFFFFFFF0))
        {
          unint64_t v57 = a2 - (unint64_t)(a2 & 0xFFFFFFF0);
          uint64_t v58 = v49;
          do
          {
            int v59 = *v58++;
            a5->i32[0] = v59 << 16;
            a5 = (int32x4_t *)((char *)a5 + 4);
            --v57;
          }
          while (v57);
        }
        LODWORD(a6) = a6 + 1;
      }
      while (a6 != a8);
    }
    else
    {
      int v43 = (unsigned __int16 *)result + v42;
      do
      {
        int v44 = v43;
        uint64_t v45 = a2;
        do
        {
          int v46 = *v44++;
          a5->i32[0] = v46 << 16;
          a5 = (int32x4_t *)((char *)a5 + 4);
          --v45;
        }
        while (v45);
        LODWORD(a6) = a6 + 1;
      }
      while (a6 != a8);
    }
  }
  return result;
}

void sub_1003836D0(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unsigned char *sub_100383708(uint64_t a1, int *a2)
{
  unsigned int v4 = 2 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56);
  bzero(v132, 0x420uLL);
  if (v4 >= 0x109) {
    operator new[]();
  }
  int v5 = *a2;
  int v6 = *(_DWORD *)(a1 + 104);
  if (v6 <= *a2) {
    int v7 = *a2;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 104);
  }
  if (a2[1] >= *(_DWORD *)(a1 + 108)) {
    int v8 = *(_DWORD *)(a1 + 108);
  }
  else {
    int v8 = a2[1];
  }
  if (v5 < v6)
  {
    (*(void (**)(void, void, void, void, unsigned char *, void, void, void))(a1 + 112))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v132, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    int v5 = *a2;
    int v9 = 1;
    int v10 = -1;
    if (*a2 >= v7) {
      goto LABEL_11;
    }
LABEL_52:
    unint64_t v68 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v68 >= 1)
    {
      uint64_t v69 = v5;
      uint64_t v71 = *(void *)(a1 + 32);
      uint64_t v70 = *(void *)(a1 + 40);
      if (v68 > 0xF)
      {
        uint64_t v78 = v68 & 0x7FFFFFF0;
        unint64_t v79 = v68 - (v68 & 0xFFFFFFF0);
        if (v68 == (v68 & 0xFFFFFFF0))
        {
          uint64_t v80 = v71 + v70 * v5 + 16;
          do
          {
            uint64_t v81 = (int32x4_t *)v133;
            int v82 = (int16x8_t *)v80;
            uint64_t v83 = v78;
            do
            {
              int32x4_t v85 = v81[-2];
              int32x4_t v84 = v81[-1];
              int32x4_t v87 = *v81;
              int32x4_t v86 = v81[1];
              v81 += 4;
              v82[-1] = vraddhn_high_s32(vraddhn_s32(v85, (int32x4_t)0), v84, (int32x4_t)0);
              *int v82 = vraddhn_high_s32(vraddhn_s32(v87, (int32x4_t)0), v86, (int32x4_t)0);
              v82 += 2;
              v83 -= 16;
            }
            while (v83);
            ++v69;
            v80 += v70;
          }
          while (v69 != v7);
        }
        else
        {
          unint64_t v88 = v68 >> 4;
          int32x4_t v89 = (int16x8_t *)(v71 + v70 * v5);
          int32x4_t v90 = v89 + 1;
          unint64_t v91 = &v89[2 * v88];
          int64x2_t v92 = (int *)&v132[64 * v88];
          do
          {
            uint64_t v93 = v78;
            int64x2_t v94 = v90;
            int32x4_t v95 = (int32x4_t *)v133;
            do
            {
              int32x4_t v97 = v95[-2];
              int32x4_t v96 = v95[-1];
              int32x4_t v99 = *v95;
              int32x4_t v98 = v95[1];
              v95 += 4;
              v94[-1] = vraddhn_high_s32(vraddhn_s32(v97, (int32x4_t)0), v96, (int32x4_t)0);
              *int64x2_t v94 = vraddhn_high_s32(vraddhn_s32(v99, (int32x4_t)0), v98, (int32x4_t)0);
              v94 += 2;
              v93 -= 16;
            }
            while (v93);
            int32x4_t v100 = v92;
            int32x4_t v101 = v91;
            unint64_t v102 = v79;
            do
            {
              int v103 = *v100++;
              v101->i16[0] = (v103 + 0x8000) >> 16;
              int32x4_t v101 = (int16x8_t *)((char *)v101 + 2);
              --v102;
            }
            while (v102);
            ++v69;
            int32x4_t v90 = (int16x8_t *)((char *)v90 + v70);
            unint64_t v91 = (int16x8_t *)((char *)v91 + v70);
          }
          while (v69 != v7);
        }
      }
      else
      {
        int32x4_t v72 = (_WORD *)(v71 + v70 * v5);
        do
        {
          int32x4_t v73 = (int *)v132;
          uint64_t v74 = v72;
          unint64_t v75 = v68;
          do
          {
            int v76 = *v73++;
            *v74++ = (v76 + 0x8000) >> 16;
            --v75;
          }
          while (v75);
          ++v69;
          int32x4_t v72 = (_WORD *)((char *)v72 + v70);
        }
        while (v69 != v7);
      }
    }
    int v5 = v7;
    if (v7 < v8) {
      goto LABEL_12;
    }
    goto LABEL_75;
  }
  int v9 = 0;
  int v10 = -2;
  if (v5 < v7) {
    goto LABEL_52;
  }
LABEL_11:
  if (v5 < v8)
  {
LABEL_12:
    uint64_t v11 = v5;
    int v12 = *(_DWORD *)(a1 + 28);
    int64x2_t v13 = vdupq_n_s64(0xFFFFFFFFFFFF8000);
    int v131 = v8;
    int64x2_t v130 = v13;
    while (1)
    {
      int v14 = v10;
      uint64_t v15 = *(void *)(a1 + 72);
      int v16 = v10 + 2;
      int v10 = *(_DWORD *)(v15 + 4 * v11);
      if (v10 > v16) {
        int v16 = *(_DWORD *)(v15 + 4 * v11);
      }
      int v17 = v10 + 2;
      if (v12 < v10 + 2) {
        int v17 = v12;
      }
      if (v16 < v17)
      {
        uint64_t v18 = v16;
        do
        {
          (*(void (**)(uint64_t))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v18++);
          int v10 = *(_DWORD *)(v15 + 4 * v11);
          int v9 = (v9 & 1) == 0;
          int v19 = v10 + 2;
          int v12 = *(_DWORD *)(a1 + 28);
          if (v12 < v10 + 2) {
            int v19 = *(_DWORD *)(a1 + 28);
          }
        }
        while (v18 < v19);
        int v8 = v131;
        int64x2_t v13 = v130;
      }
      int v20 = v12 - 2;
      if (v10 <= v12 - 2) {
        int v21 = v12 - 2;
      }
      else {
        int v21 = v10;
      }
      int v22 = v21 + v9;
      if (v14 > v20) {
        int v20 = v14;
      }
      int v23 = v22 - v20;
      uint64_t v134 = 0;
      if (v23 >= 0) {
        int v9 = v23 & 1;
      }
      else {
        int v9 = -(v23 & 1);
      }
      uint64_t v24 = *(void *)(a1 + 88);
      int v25 = 2 * v11;
      if (v9 < 1)
      {
        int v26 = 0;
        uint64_t v27 = 0;
      }
      else
      {
        int v26 = *(_DWORD *)(v24 + 4 * (v25 | 1));
        uint64_t v27 = 1;
      }
      LODWORD(v134) = v26;
      uint64_t v28 = v25 - v9;
      *(_DWORD *)((unint64_t)&v134 | (4 * v27)) = *(_DWORD *)(v24 + 4 * (v27 + v28));
      if (v9 <= 0)
      {
        HIDWORD(v134) = *(_DWORD *)(v24 + 4 * v28 + 4);
        uint64_t v29 = (int32x4_t *)v132;
        uint64_t v30 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
        if ((int)v30 < 1) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v29 = (int32x4_t *)v132;
        uint64_t v30 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
        if ((int)v30 < 1) {
          goto LABEL_13;
        }
      }
      uint64_t v31 = *(void *)(a1 + 32);
      uint64_t v32 = *(void *)(a1 + 40);
      signed int v34 = v134;
      signed int v33 = HIDWORD(v134);
      if (v30 < 8)
      {
        uint64_t v35 = 0;
LABEL_44:
        uint64_t v60 = v30 - v35;
        int32x4_t v61 = (_WORD *)(v31 + v32 * v11 + 2 * v35);
        int32x4_t v62 = (int *)&v132[4 * v35 + 4 * v30];
        unint64_t v63 = (int *)&v132[4 * v35];
        do
        {
          int v65 = *v63++;
          int v64 = v65;
          int v66 = *v62++;
          uint64_t v67 = (v66 * (uint64_t)v33 + v64 * (uint64_t)v34 + 0x80000000) >> 32;
          if (v67 <= -32768) {
            uint64_t v67 = -32768;
          }
          if (v67 >= 0x7FFF) {
            LOWORD(v67) = 0x7FFF;
          }
          *v61++ = v67;
          --v60;
        }
        while (v60);
        goto LABEL_13;
      }
      uint64_t v35 = v30 & 0xFFFFFFF8;
      int v36 = (int16x8_t *)(v31 + v32 * v11);
      uint64_t v37 = v35;
      uint64_t v38 = (int32x4_t *)v132;
      do
      {
        int32x4_t v39 = vdupq_n_s32(v34);
        int32x4_t v40 = v38[1];
        int64x2_t v41 = vmull_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v40.i8);
        int64x2_t v42 = vmull_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v38->i8);
        int32x4_t v44 = *(int32x4_t *)((char *)v38 + 4 * v30);
        int32x4_t v43 = *(int32x4_t *)((char *)v38 + 4 * v30 + 16);
        int32x4_t v45 = vdupq_n_s32(v33);
        int64x2_t v46 = vmlal_high_s32(vmull_high_s32(v39, v40), v45, v43);
        int64x2_t v47 = vmlal_s32(v41, *(int32x2_t *)v45.i8, *(int32x2_t *)v43.i8);
        int64x2_t v48 = vdupq_n_s64(0x80000000uLL);
        int64x2_t v49 = vaddq_s64(v47, v48);
        int64x2_t v50 = vaddq_s64(v46, v48);
        int64x2_t v51 = vshrq_n_s64(vaddq_s64(vmlal_high_s32(vmull_high_s32(v39, *v38), v45, v44), v48), 0x20uLL);
        int64x2_t v52 = vshrq_n_s64(vaddq_s64(vmlal_s32(v42, *(int32x2_t *)v45.i8, *(int32x2_t *)v44.i8), v48), 0x20uLL);
        int64x2_t v53 = vshrq_n_s64(v50, 0x20uLL);
        int64x2_t v54 = vshrq_n_s64(v49, 0x20uLL);
        int64x2_t v55 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v54, v13), (int8x16_t)v54, (int8x16_t)v13);
        int64x2_t v56 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v53, v13), (int8x16_t)v53, (int8x16_t)v13);
        int64x2_t v57 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v52, v13), (int8x16_t)v52, (int8x16_t)v13);
        int64x2_t v58 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v51, v13), (int8x16_t)v51, (int8x16_t)v13);
        int64x2_t v59 = vdupq_n_s64(0x7FFFuLL);
        *v36++ = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, v57), (int8x16_t)v57, (int8x16_t)v59), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, v58), (int8x16_t)v58, (int8x16_t)v59)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, v55), (int8x16_t)v55, (int8x16_t)v59), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_s64(v59, v56), (int8x16_t)v56, (int8x16_t)v59)));
        v38 += 2;
        v37 -= 8;
      }
      while (v37);
      if (v35 != v30) {
        goto LABEL_44;
      }
LABEL_13:
      if (v8 == ++v11)
      {
        int v5 = v8;
        if (v10 + 2 <= v12) {
          goto LABEL_60;
        }
LABEL_76:
        int v104 = v9 + ~v10 + v12;
        if (v104 >= 0) {
          int v105 = v104 & 1;
        }
        else {
          int v105 = -(v104 & 1);
        }
        uint64_t v29 = (int32x4_t *)&v132[4 * *(_DWORD *)(a1 + 48) * v105 * *(_DWORD *)(a1 + 56)];
        uint64_t v77 = a2[1];
        if (v5 < (int)v77) {
          goto LABEL_80;
        }
        return v132;
      }
    }
  }
LABEL_75:
  uint64_t v29 = (int32x4_t *)v132;
  int v12 = *(_DWORD *)(a1 + 28);
  if (v10 + 2 > v12) {
    goto LABEL_76;
  }
LABEL_60:
  (*(void (**)(void, void, void, void, unsigned char *, void, void, void))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * (v12 - 1), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v132, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
  uint64_t v77 = a2[1];
  if (v5 < (int)v77)
  {
LABEL_80:
    unint64_t v106 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v106 >= 1)
    {
      uint64_t v108 = *(void *)(a1 + 32);
      uint64_t v107 = *(void *)(a1 + 40);
      uint64_t v109 = v5;
      if (v106 >= 0x10)
      {
        unint64_t v116 = (int16x8_t *)(v108 + v107 * v5);
        int v117 = v116 + 1;
        int64x2_t v118 = &v116[2 * (v106 >> 4)];
        do
        {
          uint64_t v119 = v106 & 0x7FFFFFF0;
          int64x2_t v120 = v117;
          int64x2_t v121 = v29 + 2;
          do
          {
            int32x4_t v123 = v121[-2];
            int32x4_t v122 = v121[-1];
            int32x4_t v125 = *v121;
            int32x4_t v124 = v121[1];
            v121 += 4;
            v120[-1] = vraddhn_high_s32(vraddhn_s32(v123, (int32x4_t)0), v122, (int32x4_t)0);
            int16x8_t *v120 = vraddhn_high_s32(vraddhn_s32(v125, (int32x4_t)0), v124, (int32x4_t)0);
            v120 += 2;
            v119 -= 16;
          }
          while (v119);
          if (v106 != (v106 & 0x7FFFFFF0))
          {
            int32x4_t v126 = &v29[4 * (v106 >> 4)];
            int32x4_t v127 = v118;
            unint64_t v128 = v106 - (v106 & 0xFFFFFFF0);
            do
            {
              int v129 = v126->i32[0];
              int32x4_t v126 = (int32x4_t *)((char *)v126 + 4);
              v127->i16[0] = (v129 + 0x8000) >> 16;
              int32x4_t v127 = (int16x8_t *)((char *)v127 + 2);
              --v128;
            }
            while (v128);
          }
          ++v109;
          int v117 = (int16x8_t *)((char *)v117 + v107);
          int64x2_t v118 = (int16x8_t *)((char *)v118 + v107);
        }
        while (v109 != v77);
      }
      else
      {
        uint64_t v110 = (_WORD *)(v108 + v107 * v5);
        do
        {
          uint64_t v111 = v29;
          uint64_t v112 = v110;
          unint64_t v113 = v106;
          do
          {
            int v114 = v111->i32[0];
            uint64_t v111 = (int32x4_t *)((char *)v111 + 4);
            *v112++ = (v114 + 0x8000) >> 16;
            --v113;
          }
          while (v113);
          ++v109;
          uint64_t v110 = (_WORD *)((char *)v110 + v107);
        }
        while (v109 != v77);
      }
    }
  }
  return v132;
}

void sub_100383E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14 != v14)
  {
    if (a14) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *sub_100383E88(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  unint64_t v8 = (unint64_t)*result << 32;
  if (a6 < 4)
  {
    LODWORD(v9) = 0;
    int v10 = (unint64_t *)a5;
LABEL_9:
    int v14 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v14;
    }
    while (v14);
    goto LABEL_11;
  }
  uint64_t v9 = a6 & 0xFFFFFFFC;
  int v10 = (unint64_t *)a5 + v9;
  int64x2_t v11 = vdupq_n_s64(v8);
  int v12 = a5 + 1;
  uint64_t v13 = v9;
  do
  {
    v12[-1] = v11;
    *int v12 = v11;
    v12 += 2;
    v13 -= 4;
  }
  while (v13);
  if (v9 != a6) {
    goto LABEL_9;
  }
LABEL_11:
  a4 += 2 * (a6 - 1) + 2;
  a5 = (int64x2_t *)v10;
  if (a6 >= a7) {
    goto LABEL_15;
  }
LABEL_12:
  unint64_t v15 = a7 - (unint64_t)a6;
  int v16 = (int *)(a3 + 4 * a6);
  do
  {
    uint64_t v17 = *v16++;
    uint64_t v18 = *a4;
    uint64_t v19 = a4[1];
    a4 += 2;
    a5->i64[0] = v18 * (int)result[v17] + v19 * (int)result[v17 + 1];
    a5 = (int64x2_t *)((char *)a5 + 8);
    --v15;
  }
  while (v15);
  a6 = a7;
LABEL_15:
  if (a6 >= a8) {
    return result;
  }
  unint64_t v20 = (unint64_t)result[*(int *)(a3 + 4 * (a8 - 1))] << 32;
  uint64_t v21 = (~a6 + a8);
  if (v21 < 3)
  {
    int v22 = (unint64_t *)a5;
LABEL_21:
    int v28 = a8 - a6;
    do
    {
      *v22++ = v20;
      --v28;
    }
    while (v28);
    return result;
  }
  uint64_t v23 = v21 + 1;
  uint64_t v24 = (v21 + 1) & 0x1FFFFFFFCLL;
  a6 += v24;
  int v22 = (unint64_t *)a5 + v24;
  int64x2_t v25 = vdupq_n_s64(v20);
  int v26 = a5 + 1;
  uint64_t v27 = v24;
  do
  {
    v26[-1] = v25;
    *int v26 = v25;
    v26 += 2;
    v27 -= 4;
  }
  while (v27);
  if (v23 != v24) {
    goto LABEL_21;
  }
  return result;
}

unsigned int *sub_100383FC0(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_44;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        uint64_t v10 = a2 & 0xFFFFFFF8;
        uint64_t v11 = 8 * v10;
        if (a2 == v10)
        {
          int v12 = 0;
          uint64_t v13 = a5;
          do
          {
            unint64_t v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            unint64_t v15 = (int32x2_t *)(result + 4);
            do
            {
              int v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              int64x2_t v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              int64x2_t *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            uint64_t v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            int v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            uint64_t v27 = a2 & 0xFFFFFFF8;
            int v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              int64x2_t v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *int v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            signed int v33 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            uint64_t v34 = a2 - v10;
            do
            {
              unsigned int v35 = *v33++;
              *a5++ = (unint64_t)v35 << 32;
              --v34;
            }
            while (v34);
          }
        }
      }
      else
      {
        unint64_t v8 = (unint64_t)*result << 32;
        int v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_44;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v36 = 4 * a2;
  uint64_t v37 = a6;
  do
  {
    unint64_t v38 = 0;
    int32x4_t v39 = &result[*(_DWORD *)(a3 + 4 * v37) * a2];
    do
    {
      unint64_t v40 = *a4;
      if (*a4) {
        v40 *= (int)v39[v38 / 4];
      }
      *a5 = v40;
      unint64_t v41 = a4[1];
      if (v41) {
        v41 *= (int)v39[(unint64_t)v36 / 4 + v38 / 4];
      }
      *a5++ = v41 + v40;
      v38 += 4;
    }
    while (v36 != v38);
    ++v37;
    a4 += 2;
  }
  while ((int)v37 < a7);
  a6 = a7;
LABEL_44:
  if ((int)a2 >= 1)
  {
    int v42 = a8 - a6;
    if (a8 > a6)
    {
      int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
      if (a2 >= 8)
      {
        uint64_t v46 = v43;
        uint64_t v47 = a2 & 0xFFFFFFF8;
        int64x2_t v48 = &result[v46];
        int64x2_t v49 = (int32x2_t *)(v48 + 4);
        int64x2_t v50 = (unsigned int *)((char *)v48 + ((4 * a2) & 0x3FFFFFFE0));
        do
        {
          int64x2_t v51 = (int64x2_t *)(a5 + 4);
          a5 += v47;
          uint64_t v52 = a2 & 0xFFFFFFF8;
          int64x2_t v53 = v49;
          do
          {
            _Q0 = *(int64x2_t *)v53[-2].i8;
            _Q1 = *(int64x2_t *)v53->i8;
            int64x2_t v56 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            int64x2_t v57 = vshll_n_s32(*v53, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v51[-2] = v56;
            v51[-1] = _Q0;
            *int64x2_t v51 = v57;
            v51[1] = _Q1;
            v51 += 4;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
          if (a2 != v47)
          {
            int64x2_t v58 = v50;
            uint64_t v59 = a2 - v47;
            do
            {
              unsigned int v60 = *v58++;
              *a5++ = (unint64_t)v60 << 32;
              --v59;
            }
            while (v59);
          }
          ++a6;
        }
        while (a6 != a8);
      }
      else
      {
        int32x4_t v44 = &result[v43];
        unint64_t v45 = (unint64_t)*v44 << 32;
        do
        {
          *a5 = v45;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)v44[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)v44[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)v44[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)v44[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)v44[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)v44[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v42;
        }
        while (v42);
      }
    }
  }
  return result;
}

int32x2_t *sub_1003843B4(int32x2_t *result, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int64x2_t v8 = vshll_n_s32(*result, 0x20uLL);
    if (a6 >= 4)
    {
      uint64_t v9 = a6 & 0xFFFFFFFC;
      uint64_t v10 = &a5[v9];
      int64x2_t v11 = vdupq_lane_s64(v8.i64[0], 0);
      int64x2_t v12 = vdupq_laneq_s64(v8, 1);
      int64x2_t v13 = vzip2q_s64(v11, v12);
      int64x2_t v14 = vzip1q_s64(v11, v12);
      unint64_t v15 = a5 + 2;
      uint64_t v16 = v9;
      do
      {
        v15[-2] = v14;
        v15[-1] = v13;
        *unint64_t v15 = v14;
        v15[1] = v13;
        v15 += 4;
        v16 -= 4;
      }
      while (v16);
      if (v9 == a6)
      {
LABEL_12:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v10;
        if (a6 < a7) {
          goto LABEL_13;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v9) = 0;
      uint64_t v10 = a5;
    }
    int v17 = a6 - v9;
    do
    {
      *v10++ = v8;
      --v17;
    }
    while (v17);
    goto LABEL_12;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_13:
    unint64_t v18 = a7 - (unint64_t)a6;
    int64x2_t v19 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v20 = *v19++;
      uint64_t v21 = (int *)&result[v20];
      uint64_t v22 = v21[1];
      uint64_t v23 = *a4 * *v21;
      uint64_t v25 = v21[2];
      uint64_t v24 = v21[3];
      a5->i64[0] = v23 + a4[1] * v25;
      uint64_t v26 = *a4;
      uint64_t v27 = a4[1];
      a4 += 2;
      uint64_t v28 = v26 * v22 + v27 * v24;
      uint64_t v29 = a5 + 1;
      a5->i64[1] = v28;
      ++a5;
      --v18;
    }
    while (v18);
    a5 = v29;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_16;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_16:
  int64x2_t v30 = vshll_n_s32(result[*(int *)(a3 + 4 * (a8 - 1))], 0x20uLL);
  uint64_t v31 = (~a7 + a8);
  if (v31 < 3)
  {
    int64x2_t v32 = a5;
LABEL_21:
    int v41 = a8 - a7;
    do
    {
      *v32++ = v30;
      --v41;
    }
    while (v41);
    return result;
  }
  uint64_t v33 = v31 + 1;
  uint64_t v34 = (v31 + 1) & 0x1FFFFFFFCLL;
  a7 += v34;
  int64x2_t v32 = &a5[v34];
  int64x2_t v35 = vdupq_lane_s64(v30.i64[0], 0);
  int64x2_t v36 = vdupq_laneq_s64(v30, 1);
  int64x2_t v37 = vzip2q_s64(v35, v36);
  int64x2_t v38 = vzip1q_s64(v35, v36);
  int32x4_t v39 = a5 + 2;
  uint64_t v40 = v34;
  do
  {
    v39[-2] = v38;
    v39[-1] = v37;
    *int32x4_t v39 = v38;
    v39[1] = v37;
    v39 += 4;
    v40 -= 4;
  }
  while (v40);
  if (v33 != v34) {
    goto LABEL_21;
  }
  return result;
}

unsigned int *sub_10038452C(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_44;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        uint64_t v10 = a2 & 0xFFFFFFF8;
        uint64_t v11 = 8 * v10;
        if (a2 == v10)
        {
          int v12 = 0;
          int64x2_t v13 = a5;
          do
          {
            unint64_t v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            unint64_t v15 = (int32x2_t *)(result + 4);
            do
            {
              uint64_t v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              int64x2_t v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              int64x2_t *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            int64x2_t v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            uint64_t v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            uint64_t v27 = a2 & 0xFFFFFFF8;
            uint64_t v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              int64x2_t v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *uint64_t v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            uint64_t v33 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            uint64_t v34 = a2 - v10;
            do
            {
              unsigned int v35 = *v33++;
              *a5++ = (unint64_t)v35 << 32;
              --v34;
            }
            while (v34);
          }
        }
      }
      else
      {
        unint64_t v8 = (unint64_t)*result << 32;
        int v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_44;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v36 = 4 * a2;
  uint64_t v37 = a6;
  do
  {
    unint64_t v38 = 0;
    int32x4_t v39 = &result[*(_DWORD *)(a3 + 4 * v37) * a2];
    do
    {
      unint64_t v40 = *a4;
      if (*a4) {
        v40 *= (int)v39[v38 / 4];
      }
      *a5 = v40;
      unint64_t v41 = a4[1];
      if (v41) {
        v41 *= (int)v39[(unint64_t)v36 / 4 + v38 / 4];
      }
      *a5++ = v41 + v40;
      v38 += 4;
    }
    while (v36 != v38);
    ++v37;
    a4 += 2;
  }
  while ((int)v37 < a7);
  a6 = a7;
LABEL_44:
  if ((int)a2 >= 1)
  {
    int v42 = a8 - a6;
    if (a8 > a6)
    {
      int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
      if (a2 >= 8)
      {
        uint64_t v46 = v43;
        uint64_t v47 = a2 & 0xFFFFFFF8;
        int64x2_t v48 = &result[v46];
        int64x2_t v49 = (int32x2_t *)(v48 + 4);
        int64x2_t v50 = (unsigned int *)((char *)v48 + ((4 * a2) & 0x3FFFFFFE0));
        do
        {
          int64x2_t v51 = (int64x2_t *)(a5 + 4);
          a5 += v47;
          uint64_t v52 = a2 & 0xFFFFFFF8;
          int64x2_t v53 = v49;
          do
          {
            _Q0 = *(int64x2_t *)v53[-2].i8;
            _Q1 = *(int64x2_t *)v53->i8;
            int64x2_t v56 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            int64x2_t v57 = vshll_n_s32(*v53, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v51[-2] = v56;
            v51[-1] = _Q0;
            *int64x2_t v51 = v57;
            v51[1] = _Q1;
            v51 += 4;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
          if (a2 != v47)
          {
            int64x2_t v58 = v50;
            uint64_t v59 = a2 - v47;
            do
            {
              unsigned int v60 = *v58++;
              *a5++ = (unint64_t)v60 << 32;
              --v59;
            }
            while (v59);
          }
          ++a6;
        }
        while (a6 != a8);
      }
      else
      {
        int32x4_t v44 = &result[v43];
        unint64_t v45 = (unint64_t)*v44 << 32;
        do
        {
          *a5 = v45;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)v44[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)v44[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)v44[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)v44[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)v44[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)v44[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v42;
        }
        while (v42);
      }
    }
  }
  return result;
}

int32x2_t *sub_100384920(int32x2_t *result, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int64x2_t v8 = vshll_n_s32(*result, 0x20uLL);
    unint64_t v9 = (unint64_t)result[1].u32[0] << 32;
    if (a6 >= 4)
    {
      uint64_t v10 = a6 & 0xFFFFFFFC;
      int64x2_t v13 = vdupq_n_s64(v9);
      int8x16_t v14 = (int8x16_t)vzip2q_s64(v8, v13);
      v13.i64[1] = v8.i64[0];
      uint64_t v11 = (int64x2_t *)((char *)a5 + 24 * v10);
      v12.i64[0] = v8.i64[0];
      v12.i64[1] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
      v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      v14.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
      uint64_t v15 = v10;
      do
      {
        *a5 = v12;
        a5[1] = v13;
        a5[2] = (int64x2_t)v14;
        a5[3] = v12;
        a5[4] = v13;
        a5[5] = (int64x2_t)v14;
        a5 += 6;
        v15 -= 4;
      }
      while (v15);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v11;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      uint64_t v11 = a5;
    }
    int v16 = a6 - v10;
    do
    {
      *uint64_t v11 = v8;
      int v17 = (int64x2_t *)((char *)v11 + 24);
      v11[1].i64[0] = v9;
      uint64_t v11 = (int64x2_t *)((char *)v11 + 24);
      --v16;
    }
    while (v16);
    uint64_t v11 = v17;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v18 = a7 - (unint64_t)a6;
    int64x2_t v19 = (int *)(a3 + 4 * a6);
    do
    {
      int v20 = *v19++;
      uint64_t v21 = (int *)result + 3 * v20;
      uint64_t v22 = v21[1];
      uint64_t v23 = v21[2];
      a5->i64[0] = *a4 * *v21 + a4[1] * v21[3];
      uint64_t v25 = v21[4];
      uint64_t v24 = v21[5];
      a5->i64[1] = *a4 * v22 + a4[1] * v25;
      uint64_t v26 = *a4;
      uint64_t v27 = a4[1];
      a4 += 2;
      uint64_t v28 = v26 * v23 + v27 * v24;
      uint64_t v29 = (int64x2_t *)((char *)a5 + 24);
      a5[1].i64[0] = v28;
      a5 = (int64x2_t *)((char *)a5 + 24);
      --v18;
    }
    while (v18);
    a5 = v29;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  int64x2_t v30 = (int32x2_t *)((char *)result + 12 * *(int *)(a3 + 4 * (a8 - 1)));
  int64x2_t v31 = vshll_n_s32(*v30, 0x20uLL);
  unint64_t v32 = (unint64_t)v30[1].u32[0] << 32;
  uint64_t v33 = (~a7 + a8);
  if (v33 < 3)
  {
    uint64_t v34 = a5;
LABEL_22:
    int v41 = a8 - a7;
    do
    {
      *uint64_t v34 = v31;
      v34[1].i64[0] = v32;
      uint64_t v34 = (int64x2_t *)((char *)v34 + 24);
      --v41;
    }
    while (v41);
    return result;
  }
  uint64_t v35 = v33 + 1;
  uint64_t v36 = (v33 + 1) & 0x1FFFFFFFCLL;
  a7 += v36;
  int64x2_t v38 = vdupq_n_s64(v32);
  int8x16_t v39 = (int8x16_t)vzip2q_s64(v31, v38);
  v38.i64[1] = v31.i64[0];
  uint64_t v34 = (int64x2_t *)((char *)a5 + 24 * v36);
  v37.i64[0] = v31.i64[0];
  v37.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
  v38.i64[1] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  v39.i64[1] = vextq_s8(v39, v39, 8uLL).u64[0];
  uint64_t v40 = v36;
  do
  {
    *a5 = v37;
    a5[1] = v38;
    a5[2] = (int64x2_t)v39;
    a5[3] = v37;
    a5[4] = v38;
    a5[5] = (int64x2_t)v39;
    a5 += 6;
    v40 -= 4;
  }
  while (v40);
  if (v35 != v36) {
    goto LABEL_22;
  }
  return result;
}

unsigned int *sub_100384B20(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_44;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        uint64_t v10 = a2 & 0xFFFFFFF8;
        uint64_t v11 = 8 * v10;
        if (a2 == v10)
        {
          int v12 = 0;
          int64x2_t v13 = a5;
          do
          {
            unint64_t v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            uint64_t v15 = (int32x2_t *)(result + 4);
            do
            {
              int v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              int64x2_t v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              int64x2_t *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            int64x2_t v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            uint64_t v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            uint64_t v27 = a2 & 0xFFFFFFF8;
            uint64_t v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              int64x2_t v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *uint64_t v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            uint64_t v33 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            uint64_t v34 = a2 - v10;
            do
            {
              unsigned int v35 = *v33++;
              *a5++ = (unint64_t)v35 << 32;
              --v34;
            }
            while (v34);
          }
        }
      }
      else
      {
        unint64_t v8 = (unint64_t)*result << 32;
        int v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_44;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v36 = 4 * a2;
  uint64_t v37 = a6;
  do
  {
    unint64_t v38 = 0;
    int8x16_t v39 = &result[*(_DWORD *)(a3 + 4 * v37) * a2];
    do
    {
      unint64_t v40 = *a4;
      if (*a4) {
        v40 *= (int)v39[v38 / 4];
      }
      *a5 = v40;
      unint64_t v41 = a4[1];
      if (v41) {
        v41 *= (int)v39[(unint64_t)v36 / 4 + v38 / 4];
      }
      *a5++ = v41 + v40;
      v38 += 4;
    }
    while (v36 != v38);
    ++v37;
    a4 += 2;
  }
  while ((int)v37 < a7);
  a6 = a7;
LABEL_44:
  if ((int)a2 >= 1)
  {
    int v42 = a8 - a6;
    if (a8 > a6)
    {
      int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
      if (a2 >= 8)
      {
        uint64_t v46 = v43;
        uint64_t v47 = a2 & 0xFFFFFFF8;
        int64x2_t v48 = &result[v46];
        int64x2_t v49 = (int32x2_t *)(v48 + 4);
        int64x2_t v50 = (unsigned int *)((char *)v48 + ((4 * a2) & 0x3FFFFFFE0));
        do
        {
          int64x2_t v51 = (int64x2_t *)(a5 + 4);
          a5 += v47;
          uint64_t v52 = a2 & 0xFFFFFFF8;
          int64x2_t v53 = v49;
          do
          {
            _Q0 = *(int64x2_t *)v53[-2].i8;
            _Q1 = *(int64x2_t *)v53->i8;
            int64x2_t v56 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            int64x2_t v57 = vshll_n_s32(*v53, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v51[-2] = v56;
            v51[-1] = _Q0;
            *int64x2_t v51 = v57;
            v51[1] = _Q1;
            v51 += 4;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
          if (a2 != v47)
          {
            int64x2_t v58 = v50;
            uint64_t v59 = a2 - v47;
            do
            {
              unsigned int v60 = *v58++;
              *a5++ = (unint64_t)v60 << 32;
              --v59;
            }
            while (v59);
          }
          ++a6;
        }
        while (a6 != a8);
      }
      else
      {
        int32x4_t v44 = &result[v43];
        unint64_t v45 = (unint64_t)*v44 << 32;
        do
        {
          *a5 = v45;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)v44[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)v44[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)v44[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)v44[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)v44[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)v44[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v42;
        }
        while (v42);
      }
    }
  }
  return result;
}

int32x2_t *sub_100384F14(int32x2_t *result, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5, int a6, int a7, int a8)
{
  if (a6 >= 1)
  {
    int64x2_t v8 = vshll_n_s32(*result, 0x20uLL);
    int64x2_t v9 = vshll_n_s32(result[1], 0x20uLL);
    if (a6 >= 4)
    {
      uint64_t v10 = a6 & 0xFFFFFFFC;
      uint64_t v11 = &a5[2 * v10];
      int v12 = a5 + 4;
      uint64_t v13 = v10;
      do
      {
        v12[-4] = v8;
        v12[-3] = v9;
        v12[-2] = v8;
        v12[-1] = v9;
        *int v12 = v8;
        v12[1] = v9;
        v12[2] = v8;
        v12[3] = v9;
        v12 += 8;
        v13 -= 4;
      }
      while (v13);
      if (v10 == a6)
      {
LABEL_13:
        a4 += 2 * (a6 - 1) + 2;
        a5 = v11;
        if (a6 < a7) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      uint64_t v11 = a5;
    }
    int v14 = a6 - v10;
    do
    {
      uint64_t v15 = v11 + 2;
      *uint64_t v11 = v8;
      v11[1] = v9;
      v11 += 2;
      --v14;
    }
    while (v14);
    uint64_t v11 = v15;
    goto LABEL_13;
  }
  a6 = 0;
  if (a7 > 0)
  {
LABEL_14:
    unint64_t v16 = a7 - (unint64_t)a6;
    int v17 = (int *)(a3 + 4 * a6);
    do
    {
      uint64_t v18 = *v17++;
      int64x2_t v19 = (int *)&result[2 * v18];
      uint64_t v20 = v19[1];
      uint64_t v21 = v19[5];
      a5->i64[0] = *a4 * *v19 + a4[1] * v19[4];
      a5->i64[1] = *a4 * v20 + a4[1] * v21;
      uint64_t v22 = v19[3];
      uint64_t v23 = *a4 * v19[2];
      uint64_t v25 = v19[6];
      uint64_t v24 = v19[7];
      a5[1].i64[0] = v23 + a4[1] * v25;
      uint64_t v26 = *a4;
      uint64_t v27 = a4[1];
      a4 += 2;
      uint64_t v28 = v26 * v22 + v27 * v24;
      uint64_t v29 = a5 + 2;
      a5[1].i64[1] = v28;
      a5 += 2;
      --v16;
    }
    while (v16);
    a5 = v29;
    if (a7 >= a8) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_5:
  a7 = a6;
  if (a6 >= a8) {
    return result;
  }
LABEL_17:
  int64x2_t v30 = &result[2 * *(int *)(a3 + 4 * (a8 - 1))];
  int64x2_t v31 = vshll_n_s32(*v30, 0x20uLL);
  int64x2_t v32 = vshll_n_s32(v30[1], 0x20uLL);
  uint64_t v33 = (~a7 + a8);
  if (v33 < 3)
  {
    uint64_t v34 = a5;
LABEL_22:
    int v39 = a8 - a7;
    do
    {
      *uint64_t v34 = v31;
      v34[1] = v32;
      v34 += 2;
      --v39;
    }
    while (v39);
    return result;
  }
  uint64_t v35 = v33 + 1;
  uint64_t v36 = (v33 + 1) & 0x1FFFFFFFCLL;
  a7 += v36;
  uint64_t v34 = &a5[2 * v36];
  uint64_t v37 = a5 + 4;
  uint64_t v38 = v36;
  do
  {
    v37[-4] = v31;
    v37[-3] = v32;
    v37[-2] = v31;
    v37[-1] = v32;
    *uint64_t v37 = v31;
    v37[1] = v32;
    v37[2] = v31;
    uint64_t v37[3] = v32;
    v37 += 8;
    v38 -= 4;
  }
  while (v38);
  if (v35 != v36) {
    goto LABEL_22;
  }
  return result;
}

unsigned int *sub_1003850C4(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, int a6, int a7, int a8)
{
  if (a6 < 1)
  {
    a6 = 0;
    if (a7 <= 0) {
      goto LABEL_44;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        uint64_t v10 = a2 & 0xFFFFFFF8;
        uint64_t v11 = 8 * v10;
        if (a2 == v10)
        {
          int v12 = 0;
          uint64_t v13 = a5;
          do
          {
            unint64_t v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            uint64_t v15 = (int32x2_t *)(result + 4);
            do
            {
              unint64_t v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              int64x2_t v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              int64x2_t *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            uint64_t v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          for (int i = 0; i != a6; ++i)
          {
            uint64_t v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            uint64_t v27 = a2 & 0xFFFFFFF8;
            uint64_t v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              int64x2_t v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *uint64_t v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            uint64_t v33 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            uint64_t v34 = a2 - v10;
            do
            {
              unsigned int v35 = *v33++;
              *a5++ = (unint64_t)v35 << 32;
              --v34;
            }
            while (v34);
          }
        }
      }
      else
      {
        unint64_t v8 = (unint64_t)*result << 32;
        int v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if (a6 >= a7) {
      goto LABEL_44;
    }
  }
  if ((int)a2 < 1) {
    return result;
  }
  uint64_t v36 = 4 * a2;
  uint64_t v37 = a6;
  do
  {
    unint64_t v38 = 0;
    int v39 = &result[*(_DWORD *)(a3 + 4 * v37) * a2];
    do
    {
      unint64_t v40 = *a4;
      if (*a4) {
        v40 *= (int)v39[v38 / 4];
      }
      *a5 = v40;
      unint64_t v41 = a4[1];
      if (v41) {
        v41 *= (int)v39[(unint64_t)v36 / 4 + v38 / 4];
      }
      *a5++ = v41 + v40;
      v38 += 4;
    }
    while (v36 != v38);
    ++v37;
    a4 += 2;
  }
  while ((int)v37 < a7);
  a6 = a7;
LABEL_44:
  if ((int)a2 >= 1)
  {
    int v42 = a8 - a6;
    if (a8 > a6)
    {
      int v43 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
      if (a2 >= 8)
      {
        uint64_t v46 = v43;
        uint64_t v47 = a2 & 0xFFFFFFF8;
        int64x2_t v48 = &result[v46];
        int64x2_t v49 = (int32x2_t *)(v48 + 4);
        int64x2_t v50 = (unsigned int *)((char *)v48 + ((4 * a2) & 0x3FFFFFFE0));
        do
        {
          int64x2_t v51 = (int64x2_t *)(a5 + 4);
          a5 += v47;
          uint64_t v52 = a2 & 0xFFFFFFF8;
          int64x2_t v53 = v49;
          do
          {
            _Q0 = *(int64x2_t *)v53[-2].i8;
            _Q1 = *(int64x2_t *)v53->i8;
            int64x2_t v56 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            int64x2_t v57 = vshll_n_s32(*v53, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v51[-2] = v56;
            v51[-1] = _Q0;
            *int64x2_t v51 = v57;
            v51[1] = _Q1;
            v51 += 4;
            v53 += 4;
            v52 -= 8;
          }
          while (v52);
          if (a2 != v47)
          {
            int64x2_t v58 = v50;
            uint64_t v59 = a2 - v47;
            do
            {
              unsigned int v60 = *v58++;
              *a5++ = (unint64_t)v60 << 32;
              --v59;
            }
            while (v59);
          }
          ++a6;
        }
        while (a6 != a8);
      }
      else
      {
        int32x4_t v44 = &result[v43];
        unint64_t v45 = (unint64_t)*v44 << 32;
        do
        {
          *a5 = v45;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)v44[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)v44[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)v44[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)v44[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)v44[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)v44[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v42;
        }
        while (v42);
      }
    }
  }
  return result;
}

unsigned int *sub_1003854B8(unsigned int *result, unsigned int a2, uint64_t a3, void *a4, unint64_t *a5, uint64_t a6, int a7, int a8)
{
  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0) {
      goto LABEL_39;
    }
  }
  else
  {
    if ((int)a2 > 0)
    {
      if (a2 > 7)
      {
        uint64_t v10 = a2 & 0xFFFFFFF8;
        uint64_t v11 = 8 * v10;
        if (a2 == v10)
        {
          int v12 = 0;
          uint64_t v13 = a5;
          do
          {
            unint64_t v14 = 0;
            a5 = &v13[(unint64_t)v11 / 8];
            uint64_t v15 = (int32x2_t *)(result + 4);
            do
            {
              unint64_t v16 = (int64x2_t *)&v13[v14 / 8];
              _Q0 = *(int64x2_t *)v15[-2].i8;
              _Q1 = *(int64x2_t *)v15->i8;
              int64x2_t v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v24 = vshll_n_s32(*v15, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              int64x2_t *v16 = v19;
              v16[1] = _Q0;
              v16[2] = v24;
              v16[3] = _Q1;
              v14 += 64;
              v15 += 4;
            }
            while (v11 != v14);
            ++v12;
            uint64_t v13 = (unint64_t *)((char *)v13 + v11);
          }
          while (v12 != a6);
        }
        else
        {
          int v25 = 0;
          do
          {
            uint64_t v26 = (int64x2_t *)(a5 + 4);
            a5 = (unint64_t *)((char *)a5 + v11);
            uint64_t v27 = a2 & 0xFFFFFFF8;
            uint64_t v28 = (int32x2_t *)(result + 4);
            do
            {
              _Q0 = *(int64x2_t *)v28[-2].i8;
              _Q1 = *(int64x2_t *)v28->i8;
              int64x2_t v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
              __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
              int64x2_t v32 = vshll_n_s32(*v28, 0x20uLL);
              __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
              v26[-2] = v31;
              v26[-1] = _Q0;
              *uint64_t v26 = v32;
              v26[1] = _Q1;
              v26 += 4;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            uint64_t v33 = a2 - v10;
            uint64_t v34 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
            do
            {
              unsigned int v35 = *v34++;
              *a5++ = (unint64_t)v35 << 32;
              --v33;
            }
            while (v33);
            ++v25;
          }
          while (v25 != a6);
        }
      }
      else
      {
        unint64_t v8 = (unint64_t)*result << 32;
        int v9 = a6;
        do
        {
          *a5 = v8;
          if (a2 == 1)
          {
            ++a5;
          }
          else
          {
            a5[1] = (unint64_t)result[1] << 32;
            if (a2 == 2)
            {
              a5 += 2;
            }
            else
            {
              a5[2] = (unint64_t)result[2] << 32;
              if (a2 == 3)
              {
                a5 += 3;
              }
              else
              {
                a5[3] = (unint64_t)result[3] << 32;
                if (a2 == 4)
                {
                  a5 += 4;
                }
                else
                {
                  a5[4] = (unint64_t)result[4] << 32;
                  if (a2 == 5)
                  {
                    a5 += 5;
                  }
                  else
                  {
                    a5[5] = (unint64_t)result[5] << 32;
                    if (a2 == 6)
                    {
                      a5 += 6;
                    }
                    else
                    {
                      a5[6] = (unint64_t)result[6] << 32;
                      a5 += 7;
                    }
                  }
                }
              }
            }
          }
          --v9;
        }
        while (v9);
      }
    }
    a4 += 2 * (a6 - 1) + 2;
    if ((int)a6 >= a7) {
      goto LABEL_39;
    }
  }
  if ((int)a2 < 1)
  {
    LODWORD(a6) = a7;
    int v40 = a8 - a7;
    if (a8 <= a7) {
      return result;
    }
    goto LABEL_40;
  }
  uint64_t v36 = 4 * a2;
  a6 = a6;
  do
  {
    unint64_t v37 = 0;
    unint64_t v38 = &result[*(_DWORD *)(a3 + 4 * a6) * a2];
    do
    {
      unint64_t v39 = *a4 * (int)v38[v37 / 4];
      *a5 = v39;
      *a5++ = v39 + a4[1] * (int)v38[(unint64_t)v36 / 4 + v37 / 4];
      v37 += 4;
    }
    while (v36 != v37);
    ++a6;
    a4 += 2;
  }
  while ((int)a6 < a7);
LABEL_39:
  int v40 = a8 - a6;
  if (a8 <= (int)a6) {
    return result;
  }
LABEL_40:
  if ((int)a2 >= 1)
  {
    int v41 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 8)
    {
      uint64_t v44 = v41;
      uint64_t v45 = a2 & 0xFFFFFFF8;
      uint64_t v46 = &result[v44];
      uint64_t v47 = (int32x2_t *)(v46 + 4);
      int64x2_t v48 = (unsigned int *)((char *)v46 + ((4 * a2) & 0x3FFFFFFE0));
      do
      {
        int64x2_t v49 = (int64x2_t *)(a5 + 4);
        a5 += v45;
        uint64_t v50 = a2 & 0xFFFFFFF8;
        int64x2_t v51 = v47;
        do
        {
          _Q0 = *(int64x2_t *)v51[-2].i8;
          _Q1 = *(int64x2_t *)v51->i8;
          int64x2_t v54 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
          __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
          int64x2_t v55 = vshll_n_s32(*v51, 0x20uLL);
          __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
          v49[-2] = v54;
          v49[-1] = _Q0;
          *int64x2_t v49 = v55;
          v49[1] = _Q1;
          v49 += 4;
          v51 += 4;
          v50 -= 8;
        }
        while (v50);
        if (a2 != v45)
        {
          uint64_t v56 = a2 - v45;
          int64x2_t v57 = v48;
          do
          {
            unsigned int v58 = *v57++;
            *a5++ = (unint64_t)v58 << 32;
            --v56;
          }
          while (v56);
        }
        LODWORD(a6) = a6 + 1;
      }
      while (a6 != a8);
    }
    else
    {
      int v42 = &result[v41];
      unint64_t v43 = (unint64_t)*v42 << 32;
      do
      {
        *a5 = v43;
        if (a2 == 1)
        {
          ++a5;
        }
        else
        {
          a5[1] = (unint64_t)v42[1] << 32;
          if (a2 == 2)
          {
            a5 += 2;
          }
          else
          {
            a5[2] = (unint64_t)v42[2] << 32;
            if (a2 == 3)
            {
              a5 += 3;
            }
            else
            {
              a5[3] = (unint64_t)v42[3] << 32;
              if (a2 == 4)
              {
                a5 += 4;
              }
              else
              {
                a5[4] = (unint64_t)v42[4] << 32;
                if (a2 == 5)
                {
                  a5 += 5;
                }
                else
                {
                  a5[5] = (unint64_t)v42[5] << 32;
                  if (a2 == 6)
                  {
                    a5 += 6;
                  }
                  else
                  {
                    a5[6] = (unint64_t)v42[6] << 32;
                    a5 += 7;
                  }
                }
              }
            }
          }
        }
        --v40;
      }
      while (v40);
    }
  }
  return result;
}

unsigned int *sub_10038589C(unsigned int *result, unsigned int a2, uint64_t a3, unint64_t *a4, unint64_t *a5, uint64_t a6, int a7, int a8)
{
  if ((int)a6 < 1)
  {
    LODWORD(a6) = 0;
    if (a7 <= 0) {
      goto LABEL_44;
    }
    goto LABEL_34;
  }
  if ((int)a2 > 0)
  {
    if (a2 > 7)
    {
      uint64_t v10 = a2 & 0xFFFFFFF8;
      uint64_t v11 = 8 * v10;
      if (a2 == v10)
      {
        int v12 = 0;
        uint64_t v13 = a5;
        do
        {
          unint64_t v14 = 0;
          a5 = &v13[(unint64_t)v11 / 8];
          uint64_t v15 = (int32x2_t *)(result + 4);
          do
          {
            unint64_t v16 = (int64x2_t *)&v13[v14 / 8];
            _Q0 = *(int64x2_t *)v15[-2].i8;
            _Q1 = *(int64x2_t *)v15->i8;
            int64x2_t v19 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            int64x2_t v24 = vshll_n_s32(*v15, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            int64x2_t *v16 = v19;
            v16[1] = _Q0;
            v16[2] = v24;
            v16[3] = _Q1;
            v14 += 64;
            v15 += 4;
          }
          while (v11 != v14);
          ++v12;
          uint64_t v13 = (unint64_t *)((char *)v13 + v11);
        }
        while (v12 != a6);
      }
      else
      {
        int v25 = 0;
        do
        {
          uint64_t v26 = (int64x2_t *)(a5 + 4);
          a5 = (unint64_t *)((char *)a5 + v11);
          uint64_t v27 = a2 & 0xFFFFFFF8;
          uint64_t v28 = (int32x2_t *)(result + 4);
          do
          {
            _Q0 = *(int64x2_t *)v28[-2].i8;
            _Q1 = *(int64x2_t *)v28->i8;
            int64x2_t v31 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
            __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
            int64x2_t v32 = vshll_n_s32(*v28, 0x20uLL);
            __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
            v26[-2] = v31;
            v26[-1] = _Q0;
            *uint64_t v26 = v32;
            v26[1] = _Q1;
            v26 += 4;
            v28 += 4;
            v27 -= 8;
          }
          while (v27);
          uint64_t v33 = a2 - v10;
          uint64_t v34 = (unsigned int *)((char *)result + ((4 * a2) & 0x3FFFFFFE0));
          do
          {
            unsigned int v35 = *v34++;
            *a5++ = (unint64_t)v35 << 32;
            --v33;
          }
          while (v33);
          ++v25;
        }
        while (v25 != a6);
      }
    }
    else
    {
      unint64_t v8 = (unint64_t)*result << 32;
      int v9 = a6;
      do
      {
        *a5 = v8;
        if (a2 == 1)
        {
          ++a5;
        }
        else
        {
          a5[1] = (unint64_t)result[1] << 32;
          if (a2 == 2)
          {
            a5 += 2;
          }
          else
          {
            a5[2] = (unint64_t)result[2] << 32;
            if (a2 == 3)
            {
              a5 += 3;
            }
            else
            {
              a5[3] = (unint64_t)result[3] << 32;
              if (a2 == 4)
              {
                a5 += 4;
              }
              else
              {
                a5[4] = (unint64_t)result[4] << 32;
                if (a2 == 5)
                {
                  a5 += 5;
                }
                else
                {
                  a5[5] = (unint64_t)result[5] << 32;
                  if (a2 == 6)
                  {
                    a5 += 6;
                  }
                  else
                  {
                    a5[6] = (unint64_t)result[6] << 32;
                    a5 += 7;
                  }
                }
              }
            }
          }
        }
        --v9;
      }
      while (v9);
    }
  }
  a4 += 2 * (a6 - 1) + 2;
  if ((int)a6 < a7)
  {
LABEL_34:
    if ((int)a2 < 1)
    {
      LODWORD(a6) = a7;
    }
    else
    {
      uint64_t v36 = 4 * a2;
      a6 = a6;
      do
      {
        unint64_t v37 = 0;
        unint64_t v38 = &result[*(_DWORD *)(a3 + 4 * a6) * a2];
        do
        {
          unint64_t v39 = *a4;
          if (*a4) {
            v39 *= (int)v38[v37 / 4];
          }
          *a5 = v39;
          unint64_t v40 = a4[1];
          if (v40) {
            v40 *= (int)v38[(unint64_t)v36 / 4 + v37 / 4];
          }
          *a5++ = v40 + v39;
          v37 += 4;
        }
        while (v36 != v37);
        ++a6;
        a4 += 2;
      }
      while ((int)a6 < a7);
    }
  }
LABEL_44:
  int v41 = a8 - a6;
  if (a8 > (int)a6 && (int)a2 >= 1)
  {
    int v42 = *(_DWORD *)(a3 + 4 * (a8 - 1)) * a2;
    if (a2 >= 8)
    {
      uint64_t v45 = v42;
      uint64_t v46 = a2 & 0xFFFFFFF8;
      uint64_t v47 = &result[v45];
      int64x2_t v48 = (int32x2_t *)(v47 + 4);
      int64x2_t v49 = (unsigned int *)((char *)v47 + ((4 * a2) & 0x3FFFFFFE0));
      do
      {
        uint64_t v50 = (int64x2_t *)(a5 + 4);
        a5 += v46;
        uint64_t v51 = a2 & 0xFFFFFFF8;
        uint64_t v52 = v48;
        do
        {
          _Q0 = *(int64x2_t *)v52[-2].i8;
          _Q1 = *(int64x2_t *)v52->i8;
          int64x2_t v55 = vshll_n_s32(*(int32x2_t *)_Q0.i8, 0x20uLL);
          __asm { SHLL2           V0.2D, V0.4S, #0x20 ; ' ' }
          int64x2_t v56 = vshll_n_s32(*v52, 0x20uLL);
          __asm { SHLL2           V1.2D, V1.4S, #0x20 ; ' ' }
          v50[-2] = v55;
          v50[-1] = _Q0;
          *uint64_t v50 = v56;
          v50[1] = _Q1;
          v50 += 4;
          v52 += 4;
          v51 -= 8;
        }
        while (v51);
        if (a2 != v46)
        {
          uint64_t v57 = a2 - v46;
          unsigned int v58 = v49;
          do
          {
            unsigned int v59 = *v58++;
            *a5++ = (unint64_t)v59 << 32;
            --v57;
          }
          while (v57);
        }
        LODWORD(a6) = a6 + 1;
      }
      while (a6 != a8);
    }
    else
    {
      unint64_t v43 = &result[v42];
      unint64_t v44 = (unint64_t)*v43 << 32;
      do
      {
        *a5 = v44;
        if (a2 == 1)
        {
          ++a5;
        }
        else
        {
          a5[1] = (unint64_t)v43[1] << 32;
          if (a2 == 2)
          {
            a5 += 2;
          }
          else
          {
            a5[2] = (unint64_t)v43[2] << 32;
            if (a2 == 3)
            {
              a5 += 3;
            }
            else
            {
              a5[3] = (unint64_t)v43[3] << 32;
              if (a2 == 4)
              {
                a5 += 4;
              }
              else
              {
                a5[4] = (unint64_t)v43[4] << 32;
                if (a2 == 5)
                {
                  a5 += 5;
                }
                else
                {
                  a5[5] = (unint64_t)v43[5] << 32;
                  if (a2 == 6)
                  {
                    a5 += 6;
                  }
                  else
                  {
                    a5[6] = (unint64_t)v43[6] << 32;
                    a5 += 7;
                  }
                }
              }
            }
          }
        }
        --v41;
      }
      while (v41);
    }
  }
  return result;
}

unint64_t sub_100385C90(uint64_t a1, int a2, unsigned int *a3, void *a4)
{
  sub_1002C7414(&v15, a2);
  unint64_t v14 = 0x3FE0000000000000;
  sub_1002C7984(&v15, &v14, &v17);
  sub_1002C79DC((unint64_t *)a1, &v17, (unint64_t *)&v18);
  unint64_t v13 = 0x3FE0000000000000;
  sub_1002C79B0((unint64_t *)&v18, &v13, (unint64_t *)&v16);
  unint64_t result = sub_1002C76EC(&v16);
  if ((result & 0x80000000) != 0 || (int v9 = *(_DWORD *)(a1 + 8), v9 < 2))
  {
    if (*(_DWORD *)(a1 + 12) <= a2 + 1) {
      int v11 = a2 + 1;
    }
    else {
      int v11 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    unsigned int v10 = v9 - 1;
    if (result >= v10)
    {
      *a3 = v10;
      int v12 = *(_DWORD *)(a1 + 16);
      if (v12 >= a2) {
        int v12 = a2;
      }
      *(_DWORD *)(a1 + 16) = v12;
    }
    else
    {
      *a3 = result;
      sub_1002C7414(&v14, result);
      sub_1002C79B0((unint64_t *)&v16, &v14, &v15);
      sub_1002C7494(&v17, (uint64_t)&_mh_execute_header);
      sub_1002C79DC(&v15, &v17, (unint64_t *)&v18);
      unint64_t result = sub_1002C7790(&v18);
      *a4 = (char *)&_mh_execute_header - result;
      a4[1] = result;
    }
  }
  return result;
}

void sub_100385DE8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void *sub_100385E20(uint64_t a1, int *a2)
{
  unsigned int v4 = 2 * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 56);
  bzero(v107, 0x440uLL);
  if (v4 >= 0x89) {
    operator new[]();
  }
  LODWORD(v5) = *a2;
  int v6 = *(_DWORD *)(a1 + 104);
  if (v6 <= *a2) {
    int v7 = *a2;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 104);
  }
  if (a2[1] >= *(_DWORD *)(a1 + 108)) {
    int v8 = *(_DWORD *)(a1 + 108);
  }
  else {
    int v8 = a2[1];
  }
  if ((int)v5 >= v6)
  {
    int v9 = 0;
    int v10 = -2;
    if ((int)v5 >= v7)
    {
LABEL_11:
      if ((int)v5 >= v8) {
        goto LABEL_84;
      }
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(void, void, void, void, void *, void, void, void))(a1 + 112))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v107, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    LODWORD(v5) = *a2;
    int v9 = 1;
    int v10 = -1;
    if (*a2 >= v7) {
      goto LABEL_11;
    }
  }
  uint64_t v67 = *(void *)(a1 + 40);
  uint64_t v68 = (int)v5;
  uint64_t v69 = (int32x4_t *)(*(void *)(a1 + 32) + v67 * (int)v5);
  uint64_t v70 = v69 + 1;
  do
  {
    uint64_t v71 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
    if ((int)v71 < 1) {
      goto LABEL_73;
    }
    if (v71 < 8)
    {
      uint64_t v72 = 0;
LABEL_80:
      uint64_t v80 = v71 - v72;
      uint64_t v81 = &v69->i32[v72];
      int v82 = &v107[v72];
      do
      {
        uint64_t v83 = *v82++;
        *v81++ = (unint64_t)(v83 + 0x80000000) >> 32;
        --v80;
      }
      while (v80);
      goto LABEL_73;
    }
    uint64_t v72 = v71 & 0x7FFFFFF8;
    uint64_t v73 = v71 & 0xFFFFFFF8;
    uint64_t v74 = v70;
    unint64_t v75 = (int64x2_t *)&v108;
    do
    {
      int64x2_t v77 = v75[-2];
      int64x2_t v76 = v75[-1];
      int64x2_t v79 = *v75;
      int64x2_t v78 = v75[1];
      v75 += 4;
      v74[-1] = vraddhn_high_s64(vraddhn_s64(v77, (int64x2_t)0), v76, (int64x2_t)0);
      *uint64_t v74 = vraddhn_high_s64(vraddhn_s64(v79, (int64x2_t)0), v78, (int64x2_t)0);
      v74 += 2;
      v73 -= 8;
    }
    while (v73);
    if (v72 != v71) {
      goto LABEL_80;
    }
LABEL_73:
    ++v68;
    uint64_t v70 = (int32x4_t *)((char *)v70 + v67);
    uint64_t v69 = (int32x4_t *)((char *)v69 + v67);
  }
  while (v68 != v7);
  LODWORD(v5) = v7;
  if (v7 >= v8)
  {
LABEL_84:
    uint64_t v27 = (int64x2_t *)v107;
    uint64_t v84 = *(int *)(a1 + 28);
    if (v10 + 2 <= (int)v84) {
      goto LABEL_90;
    }
    goto LABEL_85;
  }
LABEL_12:
  uint64_t v5 = (int)v5;
  while (2)
  {
    uint64_t v11 = *(void *)(a1 + 72);
    int v12 = *(_DWORD *)(v11 + 4 * v5);
    if (v12 <= v10 + 2) {
      int v13 = v10 + 2;
    }
    else {
      int v13 = *(_DWORD *)(v11 + 4 * v5);
    }
    int v14 = v12 + 2;
    int v15 = *(_DWORD *)(a1 + 28);
    if (v15 < v12 + 2) {
      int v14 = *(_DWORD *)(a1 + 28);
    }
    if (v13 < v14)
    {
      uint64_t v16 = v13;
      do
      {
        (*(void (**)(uint64_t))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v16++);
        int v12 = *(_DWORD *)(v11 + 4 * v5);
        int v9 = (v9 & 1) == 0;
        int v17 = v12 + 2;
        int v15 = *(_DWORD *)(a1 + 28);
        if (v15 < v12 + 2) {
          int v17 = *(_DWORD *)(a1 + 28);
        }
      }
      while (v16 < v17);
    }
    int v18 = v15 - 2;
    if (v12 <= v18) {
      int v19 = v18;
    }
    else {
      int v19 = v12;
    }
    int v20 = v19 + v9;
    if (v10 > v18) {
      int v18 = v10;
    }
    int v21 = v20 - v18;
    uint64_t v110 = 0;
    if (v21 >= 0) {
      int v9 = v21 & 1;
    }
    else {
      int v9 = -(v21 & 1);
    }
    uint64_t v22 = *(void *)(a1 + 88);
    int v23 = 2 * v5;
    if (v9 < 1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v24 = *(void *)(v22 + 8 * (v23 | 1));
      uint64_t v25 = 1;
    }
    uint64_t v109 = v24;
    uint64_t v26 = v23 - v9;
    *(&v109 + v25) = *(void *)(v22 + 8 * (v25 + v26));
    if (v9 <= 0)
    {
      uint64_t v110 = *(void *)(v22 + 8 * v26 + 8);
      uint64_t v27 = (int64x2_t *)v107;
      uint64_t v28 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
      if ((int)v28 < 1) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v27 = (int64x2_t *)v107;
      uint64_t v28 = *(int *)(a1 + 56) * (uint64_t)*(int *)(a1 + 48);
      if ((int)v28 < 1) {
        goto LABEL_13;
      }
    }
    uint64_t v29 = v109 >> 63;
    if (v109 >= 0) {
      unint64_t v30 = v109;
    }
    else {
      unint64_t v30 = -v109;
    }
    unsigned int v31 = v30;
    unint64_t v32 = HIDWORD(v30);
    uint64_t v33 = v110 >> 63;
    if (v110 >= 0) {
      unint64_t v34 = v110;
    }
    else {
      unint64_t v34 = -v110;
    }
    unsigned int v35 = v34;
    unint64_t v36 = HIDWORD(v34);
    uint64_t v37 = v28;
    unint64_t v38 = (_DWORD *)(*(void *)(a1 + 32) + *(void *)(a1 + 40) * v5);
    unint64_t v39 = v107;
    do
    {
      uint64_t v40 = *v39;
      if (*v39 >= 0) {
        unint64_t v41 = *v39;
      }
      else {
        unint64_t v41 = -v40;
      }
      unsigned int v42 = v41;
      unint64_t v43 = HIDWORD(v41);
      unint64_t v44 = v42 * (unint64_t)v32;
      unint64_t v45 = v43 * v31
          + (unint64_t)v44
          + ((v42 * (unint64_t)v31 + 0x80000000) >> 32);
      unint64_t v46 = (v43 * v32)
          + ((v43 * (unint64_t)v31) >> 32)
          + HIDWORD(v44)
          + HIDWORD(v45);
      uint64_t v47 = v45;
      uint64_t v48 = -(int)v45;
      if (v45) {
        uint64_t v49 = ~v46;
      }
      else {
        uint64_t v49 = -(uint64_t)v46;
      }
      BOOL v50 = v29 == v40 >> 63;
      if (v29 == v40 >> 63) {
        uint64_t v51 = v47;
      }
      else {
        uint64_t v51 = v48;
      }
      if (!v50) {
        unint64_t v46 = v49;
      }
      uint64_t v52 = v39[v28];
      if (v52 >= 0) {
        unint64_t v53 = v39[v28];
      }
      else {
        unint64_t v53 = -v52;
      }
      unsigned int v54 = v53;
      unint64_t v55 = HIDWORD(v53);
      unint64_t v56 = v54 * (unint64_t)v36;
      unint64_t v57 = v55 * v35
          + (unint64_t)v56
          + ((v54 * (unint64_t)v35 + 0x80000000) >> 32);
      unint64_t v58 = v46 << 32;
      unint64_t v59 = (v55 * v36)
          + ((v55 * (unint64_t)v35) >> 32)
          + HIDWORD(v56)
          + HIDWORD(v57);
      uint64_t v60 = v57;
      uint64_t v61 = -(int)v57;
      if (v57) {
        LODWORD(v62) = ~v59;
      }
      else {
        uint64_t v62 = -(uint64_t)v59;
      }
      BOOL v63 = v33 == v52 >> 63;
      if (v33 == v52 >> 63) {
        uint64_t v64 = v60;
      }
      else {
        uint64_t v64 = v61;
      }
      uint64_t v65 = v51 + v58 + v64 + 0x80000000;
      if (v63) {
        int v66 = v59;
      }
      else {
        int v66 = v62;
      }
      *v38++ = HIDWORD(v65) + v66;
      ++v39;
      --v37;
    }
    while (v37);
LABEL_13:
    ++v5;
    int v10 = v12;
    if (v8 != v5) {
      continue;
    }
    break;
  }
  int v10 = v12;
  LODWORD(v5) = v8;
  int v87 = v12 + 2;
  uint64_t v84 = *(int *)(a1 + 28);
  if (v87 <= (int)v84)
  {
LABEL_90:
    (*(void (**)(uint64_t, void, void, void, void *, void, void, void))(a1 + 112))(*(void *)(a1 + 8) + *(void *)(a1 + 16) * (v84 - 1), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 80), v107, *(unsigned int *)(a1 + 96), *(unsigned int *)(a1 + 100), *(unsigned int *)(a1 + 48));
    goto LABEL_91;
  }
LABEL_85:
  int v85 = v9 + ~v10 + v84;
  if (v85 >= 0) {
    int v86 = v85 & 1;
  }
  else {
    int v86 = -(v85 & 1);
  }
  uint64_t v27 = (int64x2_t *)&v107[*(_DWORD *)(a1 + 48) * v86 * *(_DWORD *)(a1 + 56)];
LABEL_91:
  int v88 = a2[1];
  if ((int)v5 < v88)
  {
    uint64_t v89 = *(void *)(a1 + 40);
    uint64_t v90 = (int)v5;
    unint64_t v91 = (int32x4_t *)(*(void *)(a1 + 32) + v89 * (int)v5);
    int64x2_t v92 = v91 + 1;
    while (2)
    {
      uint64_t v93 = (*(_DWORD *)(a1 + 56) * *(_DWORD *)(a1 + 48));
      if ((int)v93 < 1) {
        goto LABEL_94;
      }
      if (v93 < 8)
      {
        uint64_t v94 = 0;
        goto LABEL_101;
      }
      uint64_t v94 = v93 & 0x7FFFFFF8;
      uint64_t v95 = v93 & 0xFFFFFFF8;
      int32x4_t v96 = v92;
      int32x4_t v97 = v27 + 2;
      do
      {
        int64x2_t v99 = v97[-2];
        int64x2_t v98 = v97[-1];
        int64x2_t v101 = *v97;
        int64x2_t v100 = v97[1];
        v97 += 4;
        v96[-1] = vraddhn_high_s64(vraddhn_s64(v99, (int64x2_t)0), v98, (int64x2_t)0);
        *int32x4_t v96 = vraddhn_high_s64(vraddhn_s64(v101, (int64x2_t)0), v100, (int64x2_t)0);
        v96 += 2;
        v95 -= 8;
      }
      while (v95);
      if (v94 != v93)
      {
LABEL_101:
        uint64_t v102 = v93 - v94;
        int v103 = &v91->i32[v94];
        int v104 = &v27->i64[v94];
        do
        {
          uint64_t v105 = *v104++;
          *v103++ = (unint64_t)(v105 + 0x80000000) >> 32;
          --v102;
        }
        while (v102);
      }
      int v88 = a2[1];
LABEL_94:
      ++v90;
      int64x2_t v92 = (int32x4_t *)((char *)v92 + v89);
      unint64_t v91 = (int32x4_t *)((char *)v91 + v89);
      if (v90 >= v88) {
        return v107;
      }
      continue;
    }
  }
  return v107;
}

void sub_100386444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11 != v11)
  {
    if (a11) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100386488(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1002D6AE8(v90, &off_10049BB20);
  *(_DWORD *)int v86 = 1124007936;
  memset(&v86[4], 0, 60);
  int v87 = &v86[8];
  int v88 = v89;
  v89[0] = 0;
  v89[1] = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  LODWORD(v93[0]) = 33619968;
  *((void *)&v93[0] + 1) = v86;
  *(void *)&v93[1] = 0;
  sub_100319E54(a1, (uint64_t)v93, 1, 1);
  if ((v86[0] & 7) == 5) {
    goto LABEL_23;
  }
  LODWORD(v93[0]) = 1124007936;
  memset((char *)v93 + 4, 0, 60);
  uint64_t v94 = (char *)v93 + 8;
  uint64_t v95 = v96;
  v96[0] = 0;
  v96[1] = 0;
  LODWORD(v97) = 33619968;
  unint64_t v98 = (unint64_t)v93;
  uint64_t v99 = 0;
  sub_10024011C((unsigned int *)v86, (uint64_t)&v97, 5, 1.0, 0.0);
  if (*((void *)&v93[3] + 1)) {
    atomic_fetch_add((atomic_uint *volatile)(*((void *)&v93[3] + 1) + 20), 1u);
  }
  if (*(void *)&v86[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v86[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v86);
  }
  *(void *)&v86[56] = 0;
  memset(&v86[16], 0, 32);
  if (*(uint64_t *)v86 <= 0)
  {
    *(_DWORD *)int v86 = v93[0];
    int v6 = DWORD1(v93[0]);
    if (SDWORD1(v93[0]) <= 2)
    {
LABEL_12:
      *(_DWORD *)&v86[4] = v6;
      *(void *)&_OWORD v86[8] = *((void *)&v93[0] + 1);
      int v7 = v95;
      int v8 = v88;
      *(void *)int v88 = *(void *)v95;
      v8[1] = v7[1];
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = v87;
    do
      *(_DWORD *)&v5[4 * v4++] = 0;
    while (v4 < *(int *)&v86[4]);
    *(_DWORD *)int v86 = v93[0];
    if (*(int *)&v86[4] <= 2)
    {
      int v6 = DWORD1(v93[0]);
      if (SDWORD1(v93[0]) <= 2) {
        goto LABEL_12;
      }
    }
  }
  sub_1002931A8((uint64_t)v86, (uint64_t)v93);
LABEL_15:
  *(_OWORD *)&v86[16] = v93[1];
  *(_OWORD *)&v86[32] = v93[2];
  *(_OWORD *)&v86[48] = v93[3];
  if (*((void *)&v93[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v93[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v93);
  }
  *((void *)&v93[3] + 1) = 0;
  memset(&v93[1], 0, 32);
  if (SDWORD1(v93[0]) >= 1)
  {
    uint64_t v9 = 0;
    int v10 = v94;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v93[0]));
  }
  if (v95 != v96) {
    j__free(v95);
  }
LABEL_23:
  unsigned int v11 = sub_100298CD4((unsigned int *)v86, 2, -1, 1);
  unsigned int v12 = v11;
  uint64_t v13 = *(void *)&v86[16];
  if ((int)v11 < 3)
  {
    if (v11 == 1)
    {
      *(void *)a2 = **(void **)&v86[16];
    }
    else if (v11 == 2)
    {
      float v41 = **(float **)&v86[16];
      float v42 = *(float *)(*(void *)&v86[16] + 4);
      float v43 = *(float *)(*(void *)&v86[16] + 8);
      float v44 = *(float *)(*(void *)&v86[16] + 12);
      *(float *)a2 = (float)(**(float **)&v86[16] + v43) * 0.5;
      *(float *)(a2 + 4) = (float)(v42 + v44) * 0.5;
      long double v45 = (float)(v43 - v41);
      long double v46 = (float)(v44 - v42);
      float v47 = sqrt(v46 * v46 + v45 * v45);
      *(float *)(a2 + 8) = v47;
      *(_DWORD *)(a2 + 12) = 0;
      float v48 = atan2(v46, v45);
      *(float *)(a2 + 16) = v48;
    }
  }
  else
  {
    *(void *)&v93[0] = &v93[1];
    *((void *)&v93[0] + 1) = (int)(3 * v11);
    if (3 * v11 >= 0x109) {
      operator new[]();
    }
    uint64_t v14 = 0;
    LODWORD(v15) = 0;
    unsigned int v16 = 0;
    LODWORD(v17) = 0;
    LODWORD(v18) = 0;
    uint64_t v19 = 4 * v11;
    unint64_t v97 = -1;
    unint64_t v98 = -1;
    int v20 = (float32x2_t *)((char *)&v93[1] + v19);
    float v22 = **(float **)&v86[16];
    float v21 = *(float *)(*(void *)&v86[16] + 4);
    float v23 = v21;
    float v24 = **(float **)&v86[16];
    float v25 = v21;
    float v26 = **(float **)&v86[16];
    do
    {
      if (v26 < v24)
      {
        float v24 = v26;
        LODWORD(v15) = v14;
      }
      if (v26 > v22)
      {
        float v22 = v26;
        LODWORD(v17) = v14;
      }
      if (v25 > v23)
      {
        float v23 = v25;
        LODWORD(v18) = v14;
      }
      if (v25 < v21)
      {
        float v21 = v25;
        unsigned int v16 = v14;
      }
      uint64_t v27 = v14 + 1;
      uint64_t v28 = (v14 + 1);
      if (v14 + 1 >= (unint64_t)v11) {
        uint64_t v28 = 0;
      }
      uint64_t v29 = (float *)(v13 + 8 * v28);
      float v30 = *v29;
      float v31 = v29[1];
      float v32 = *v29 - v26;
      float v33 = v31 - v25;
      unint64_t v34 = (float *)((char *)&v93[1] + v19);
      *unint64_t v34 = v32;
      v34[1] = v33;
      float v35 = 1.0 / sqrt(v33 * v33 + v32 * v32);
      *((float *)&v93[1] + v14) = v35;
      v19 += 8;
      ++v14;
      float v25 = v31;
      float v26 = v30;
    }
    while (v11 != v27);
    float64x2_t v36 = vcvtq_f64_f32(v20[v11 - 1]);
    uint64_t v37 = v20;
    uint64_t v38 = v11;
    while (1)
    {
      float64x2_t v39 = v36;
      float64x2_t v36 = vcvtq_f64_f32(*v37);
      double v40 = vmlad_n_f64(-v39.f64[1] * v36.f64[0], v36.f64[1], v39.f64[0]);
      if (v40 != 0.0) {
        break;
      }
      ++v37;
      if (!--v38)
      {
        v92[0] = 0;
        v92[1] = 0;
        *(_OWORD *)sub_1002D19D8(v92, 16) = *(_OWORD *)"orientation != 0";
        sub_1002D2278(-215, v92, "rotatingCalipers", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/rotcalipers.cpp", 166);
      }
    }
    if (v40 <= 0.0) {
      float v49 = -1.0;
    }
    else {
      float v49 = 1.0;
    }
    int v50 = 0;
    int v51 = 0;
    unint64_t v97 = __PAIR64__(v17, v16);
    unint64_t v98 = __PAIR64__(v15, v18);
    float v52 = 0.0;
    float v53 = 3.4028e38;
    float v54 = 0.0;
    float v55 = 0.0;
    float v56 = 0.0;
    float v57 = 0.0;
    do
    {
      float v58 = (float)(v52 * v20[v16].f32[1]) + (float)(v49 * v20[v16].f32[0]);
      float v59 = (float)(v49 * v20[(int)v17].f32[1]) - (float)(v52 * v20[(int)v17].f32[0]);
      float v60 = (float)-(float)(v52 * v20[(int)v18].f32[1]) - (float)(v49 * v20[(int)v18].f32[0]);
      float v61 = (float)(v52 * v20[(int)v15].f32[0]) - (float)(v49 * v20[(int)v15].f32[1]);
      float v62 = v58 * *((float *)&v93[1] + (int)v16);
      float v63 = v59 * *((float *)&v93[1] + (int)v17);
      LODWORD(v64) = v63 > v62;
      if (v63 > v62) {
        float v62 = v59 * *((float *)&v93[1] + (int)v17);
      }
      if ((float)(v60 * *((float *)&v93[1] + (int)v18)) > v62)
      {
        float v62 = v60 * *((float *)&v93[1] + (int)v18);
        LODWORD(v64) = 2;
      }
      if ((float)(v61 * *((float *)&v93[1] + (int)v15)) <= v62) {
        uint64_t v64 = v64;
      }
      else {
        uint64_t v64 = 3;
      }
      uint64_t v65 = *((int *)&v97 + v64);
      int v66 = (float *)&v20[v65];
      float v67 = *((float *)&v93[1] + v65);
      float v49 = *v66 * v67;
      float v68 = v67 * v66[1];
      float v52 = v68;
      switch(v64)
      {
        case 1:
          float v52 = -v49;
          float v49 = v68;
          break;
        case 2:
          float v49 = -v49;
          float v52 = -v68;
          break;
        case 3:
          float v52 = v49;
          float v49 = -v68;
          break;
        default:
          break;
      }
      if (v65 + 1 == v11) {
        int v69 = 0;
      }
      else {
        int v69 = v65 + 1;
      }
      *((_DWORD *)&v97 + v64) = v69;
      unsigned int v16 = v97;
      uint64_t v17 = SHIDWORD(v97);
      uint64_t v18 = (int)v98;
      uint64_t v15 = SHIDWORD(v98);
      float v70 = (float)(v52 * (float)(*(float *)(v13 + 8 * v17 + 4) - *(float *)(v13 + 8 * v15 + 4)))
          + (float)((float)(*(float *)(v13 + 8 * v17) - *(float *)(v13 + 8 * v15)) * v49);
      uint64_t v71 = (float *)(v13 + 8 * (int)v97);
      float v72 = (float)(v49 * (float)(*(float *)(v13 + 8 * v18 + 4) - v71[1]))
          - (float)((float)(*(float *)(v13 + 8 * v18) - *v71) * v52);
      if ((float)(v70 * v72) <= v53)
      {
        float v57 = v49;
        float v56 = (float)(v52
                    * (float)(*(float *)(v13 + 8 * SHIDWORD(v97) + 4) - *(float *)(v13 + 8 * SHIDWORD(v98) + 4)))
            + (float)((float)(*(float *)(v13 + 8 * SHIDWORD(v97)) - *(float *)(v13 + 8 * SHIDWORD(v98))) * v49);
        float v55 = v52;
        float v54 = (float)(v49 * (float)(*(float *)(v13 + 8 * (int)v98 + 4) - v71[1]))
            - (float)((float)(*(float *)(v13 + 8 * (int)v98) - *v71) * v52);
        int v51 = v97;
        int v50 = HIDWORD(v98);
        float v53 = v70 * v72;
      }
      --v12;
    }
    while (v12);
    float v73 = (float)(v55 * *(float *)(v13 + 8 * v50 + 4)) + (float)(v57 * *(float *)(v13 + 8 * v50));
    float v74 = (float)(v57 * *(float *)(v13 + 8 * v51 + 4)) - (float)(v55 * *(float *)(v13 + 8 * v51));
    float v75 = 1.0 / (float)((float)(v55 * v55) + (float)(v57 * v57));
    float v76 = v57 * v56;
    float v77 = v56 * v55;
    float v78 = -(float)(v55 * v54);
    float v79 = v57 * v54;
    if (*(_OWORD **)&v93[0] != &v93[1] && *(void *)&v93[0]) {
      operator delete[]();
    }
    *(float *)a2 = (float)(v75 * (float)((float)(v73 * v57) - (float)(v74 * v55)))
                 + (float)((float)(v76 - (float)(v55 * v54)) * 0.5);
    *(float *)(a2 + 4) = (float)(v75 * (float)((float)(v55 * v73) + (float)(v57 * v74)))
                       + (float)((float)(v77 + v79) * 0.5);
    float v80 = sqrt(v77 * v77 + v76 * v76);
    float v81 = sqrt(v79 * v79 + v78 * v78);
    *(float *)(a2 + 8) = v80;
    *(float *)(a2 + 12) = v81;
    float v82 = atan2(v77, v76);
    *(float *)(a2 + 16) = v82;
  }
  float v83 = (float)(*(float *)(a2 + 16) * 180.0) / 3.14159265;
  *(float *)(a2 + 16) = v83;
  if (*(void *)&v86[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v86[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v86);
  }
  *(void *)&v86[56] = 0;
  memset(&v86[16], 0, 32);
  if (*(int *)&v86[4] >= 1)
  {
    uint64_t v84 = 0;
    int v85 = v87;
    do
      *(_DWORD *)&v85[4 * v84++] = 0;
    while (v84 < *(int *)&v86[4]);
  }
  if (v88 != v89) {
    j__free(v88);
  }
  if (v91) {
    sub_1002D6888(v90);
  }
}

void sub_100386CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100386D98(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  sub_1002D6AE8(v19, &off_10049BB40);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    long long v5 = *(_OWORD *)(v4 + 16);
    long long v11 = *(_OWORD *)v4;
    long long v12 = v5;
    long long v13 = *(_OWORD *)(v4 + 32);
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v14 = *(void *)(v4 + 48);
    uint64_t v15 = v6;
    unsigned int v16 = (char *)&v11 + 8;
    uint64_t v17 = v18;
    v18[0] = 0;
    v18[1] = 0;
    if (v6) {
      atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 1u);
    }
    if (*(int *)(v4 + 4) > 2)
    {
      DWORD1(v11) = 0;
      sub_1002931A8((uint64_t)&v11, v4);
    }
    else
    {
      int v7 = *(void **)(v4 + 72);
      int v8 = v17;
      *(void *)uint64_t v17 = *v7;
      v8[1] = v7[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v11);
  }
  if ((v11 & 7) != 0) {
    sub_100387290(a2, (uint64_t)&v11);
  }
  else {
    sub_100386F4C(a2, (uint64_t)&v11);
  }
  if (v15 && atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v11);
  }
  uint64_t v15 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  if (SDWORD1(v11) >= 1)
  {
    uint64_t v9 = 0;
    int v10 = v16;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v11));
  }
  if (v17 != v18) {
    j__free(v17);
  }
  if (v20) {
    sub_1002D6888(v19);
  }
}

void sub_100386F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000094F4((uint64_t)&a9);
  sub_10020FA00(v9 - 32);
  _Unwind_Resume(a1);
}

void sub_100386F38(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 32);
  _Unwind_Resume(a1);
}

unint64_t sub_100386F4C(unint64_t result, uint64_t a2)
{
  uint64_t v2 = (int *)result;
  if ((*(_WORD *)a2 & 0xFFE) != 0)
  {
    v41[0] = 0;
    v41[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v41, 39), "img.depth() <= 1 && img.channels() == 1", 39);
    sub_1002D2278(-215, v41, "maskBoundingRect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/shapedescr.cpp", 859);
  }
  uint64_t v4 = **(unsigned int **)(a2 + 64);
  int v3 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 16);
    int v7 = -*(_DWORD *)(a2 + 16);
    int v8 = v6 + 3;
    int v9 = -1;
    uint64_t v10 = **(void **)(a2 + 72);
    uint64_t v11 = v6;
    int v12 = -1;
    int v13 = -1;
    int v14 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
    while (1)
    {
      if (v3 >= (int)(v7 + (v8 & 0xFFFFFFFC))) {
        int v16 = v7 + (v8 & 0xFFFFFFFC);
      }
      else {
        int v16 = v3;
      }
      uint64_t v17 = v6 + v10 * v5;
      unint64_t v18 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      int v19 = v18 - v17;
      if (v3 >= (int)v18 - (int)v17) {
        unint64_t v20 = v19;
      }
      else {
        unint64_t v20 = v3;
      }
      if ((int)v20 < 1)
      {
LABEL_24:
        int v15 = 0;
        if (v3 <= v19) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v21 = 0;
        while (!*(unsigned char *)(v11 + v21))
        {
          if (++v21 >= v20) {
            goto LABEL_24;
          }
        }
        if ((int)v21 < v14) {
          int v14 = v21;
        }
        if ((int)v21 > v12) {
          int v12 = v21;
        }
        int v15 = 1;
        if (v3 <= v19) {
          goto LABEL_8;
        }
      }
      int v22 = v14 - v20;
      if (v22 >= 4)
      {
        uint64_t v23 = 0;
        do
        {
          if (*(_DWORD *)(v18 + v23)) {
            break;
          }
          v23 += 4;
        }
        while (v22 - 4 >= (int)v23);
      }
      else
      {
        LODWORD(v23) = 0;
      }
      int v24 = v12 - v20;
      if ((int)v23 < v22)
      {
        float v25 = (unsigned __int8 *)(v18 + v23);
        while (!*v25++)
        {
          LODWORD(v23) = v23 + 1;
          if (v22 <= (int)v23) {
            goto LABEL_52;
          }
        }
        if ((int)v23 > v24) {
          int v24 = v23;
        }
        int v15 = 1;
        int v22 = v23;
      }
LABEL_52:
      uint64_t v31 = v3 - v16 - 1;
      uint64_t v32 = v3 + ~v16;
      int v33 = v23 - 1;
      if ((int)v23 - 1 <= v24) {
        int v33 = v24;
      }
      uint64_t v34 = v33;
      while (1)
      {
        LODWORD(v35) = v32;
        int v36 = v32 & 3;
        if (v31 <= v34 || v36 == 3) {
          break;
        }
        int v37 = *(unsigned __int8 *)(v18 + v31);
        --v32;
        --v31;
        if (v37) {
          goto LABEL_65;
        }
      }
      if (v31 > v34 && v36 == 3 && (int)v34 + 3 < (int)v32)
      {
        do
        {
          if (*(_DWORD *)(v18 - 3 + v32)) {
            break;
          }
          v32 -= 4;
        }
        while (v32 > (int)v34 + 3);
        LODWORD(v35) = v32;
      }
LABEL_65:
      if ((int)v35 > (int)v34)
      {
        uint64_t v35 = (int)v35;
        while (!*(unsigned char *)(v18 + v35))
        {
          if (--v35 <= v34) {
            goto LABEL_5;
          }
        }
        int v15 = 1;
        int v24 = v35;
        goto LABEL_7;
      }
LABEL_5:
      if (!v15)
      {
        for (uint64_t i = v23 & 0x7FFFFFFC; (int)v35 - 3 >= (int)i; i += 4)
        {
          if (*(_DWORD *)(v18 + i)) {
            break;
          }
        }
        if ((int)i > (int)v35)
        {
LABEL_48:
          int v15 = 0;
          goto LABEL_7;
        }
        int v28 = i - 1;
        uint64_t v29 = (unsigned __int8 *)(v18 + i);
        while (!*v29++)
        {
          if ((int)v35 <= ++v28) {
            goto LABEL_48;
          }
        }
      }
      int v15 = 1;
LABEL_7:
      int v14 = v22 + v20;
      int v12 = v24 + v20;
LABEL_8:
      if (v13 >= 0) {
        unint64_t result = v13;
      }
      else {
        unint64_t result = v5;
      }
      if (v15)
      {
        int v13 = result;
        int v9 = v5;
      }
      ++v5;
      v7 -= v10;
      v8 += v10;
      v11 += v10;
      if (v5 == v4) {
        goto LABEL_72;
      }
    }
  }
  int v13 = -1;
  int v14 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = -1;
  int v9 = -1;
LABEL_72:
  BOOL v38 = v14 < v3;
  if (v14 >= v3) {
    int v39 = 0;
  }
  else {
    int v39 = v14;
  }
  if (v38) {
    int v40 = v13;
  }
  else {
    int v40 = 0;
  }
  *uint64_t v2 = v39;
  v2[1] = v40;
  v2[2] = v12 - v39 + 1;
  v2[3] = v9 - v40 + 1;
  return result;
}

void sub_100387278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_100387290(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_100298CD4((unsigned int *)a2, 2, -1, 1);
  if ((result & 0x80000000) != 0 || (*(_DWORD *)a2 & 6) != 4)
  {
    v54[0] = 0;
    v54[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v54, 42), "npoints >= 0 && (depth == 5 || depth == 4)", 42);
    sub_1002D2278(-215, v54, "pointSetBoundingRect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/shapedescr.cpp", 741);
  }
  if (!result)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    return result;
  }
  uint64_t v5 = *(signed int **)(a2 + 16);
  signed int v6 = *v5;
  signed int v7 = v5[1];
  if ((*(_DWORD *)a2 & 7) == 5)
  {
    signed int v8 = (v6 >> 31) & 0x7FFFFFFF ^ v6;
    signed int v9 = (v7 >> 31) & 0x7FFFFFFF ^ v7;
    if ((int)result < 2)
    {
      int v12 = v8;
      int v11 = (v7 >> 31) & 0x7FFFFFFF ^ v7;
    }
    else
    {
      if (result < 9)
      {
        uint64_t v10 = 1;
        int v11 = v9;
        int v12 = v8;
        goto LABEL_18;
      }
      unint64_t v16 = (result - 1) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v10 = v16 | 1;
      int32x4_t v17 = vdupq_n_s32(v9);
      int32x4_t v18 = vdupq_n_s32(v8);
      int v19 = (const float *)(v5 + 10);
      unint64_t v20 = v16;
      int32x4_t v21 = v17;
      int32x4_t v22 = v18;
      int32x4_t v23 = v17;
      int32x4_t v24 = v17;
      int32x4_t v25 = v18;
      int32x4_t v26 = v18;
      do
      {
        uint64_t v27 = v19 - 8;
        float32x4x2_t v55 = vld2q_f32(v27);
        float32x4x2_t v57 = vld2q_f32(v19);
        int32x4_t v28 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s32((int32x4_t)v55.val[0]) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)v55.val[0]);
        int32x4_t v29 = (int32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s32((int32x4_t)v57.val[0]) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)v57.val[0]);
        v55.val[0] = (float32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s32((int32x4_t)v55.val[1]) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)v55.val[1]);
        v55.val[1] = (float32x4_t)veorq_s8((int8x16_t)(*(_OWORD *)&vcltzq_s32((int32x4_t)v57.val[1]) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)v57.val[1]);
        int32x4_t v25 = vminq_s32(v25, v28);
        int32x4_t v26 = vminq_s32(v26, v29);
        int32x4_t v18 = vmaxq_s32(v18, v28);
        int32x4_t v22 = vmaxq_s32(v22, v29);
        int32x4_t v23 = vminq_s32(v23, (int32x4_t)v55.val[0]);
        int32x4_t v24 = vminq_s32(v24, (int32x4_t)v55.val[1]);
        int32x4_t v17 = vmaxq_s32(v17, (int32x4_t)v55.val[0]);
        int32x4_t v21 = vmaxq_s32(v21, (int32x4_t)v55.val[1]);
        v19 += 16;
        v20 -= 8;
      }
      while (v20);
      int v12 = vminvq_s32(vminq_s32(v25, v26));
      int v11 = vminvq_s32(vminq_s32(v23, v24));
      signed int v8 = vmaxvq_s32(vmaxq_s32(v18, v22));
      signed int v9 = vmaxvq_s32(vmaxq_s32(v17, v21));
      if (result - 1 != v16)
      {
LABEL_18:
        float v30 = &v5[2 * v10 + 1];
        uint64_t v31 = result - v10;
        do
        {
          int v32 = (*(v30 - 1) >> 31) & 0x7FFFFFFF ^ *(v30 - 1);
          int v33 = (*v30 >> 31) & 0x7FFFFFFF ^ *v30;
          if (v12 >= v32) {
            int v12 = (*(v30 - 1) >> 31) & 0x7FFFFFFF ^ *(v30 - 1);
          }
          if (v8 <= v32) {
            signed int v8 = (*(v30 - 1) >> 31) & 0x7FFFFFFF ^ *(v30 - 1);
          }
          if (v11 >= v33) {
            int v11 = (*v30 >> 31) & 0x7FFFFFFF ^ *v30;
          }
          if (v9 <= v33) {
            signed int v9 = (*v30 >> 31) & 0x7FFFFFFF ^ *v30;
          }
          v30 += 2;
          --v31;
        }
        while (v31);
      }
    }
    int v15 = (__PAIR64__((int)COERCE_FLOAT((v12 >> 31) & 0x7FFFFFFF ^ v12), (v12 >> 31) & 0x7FFFFFFF ^ v12)
         - COERCE_UNSIGNED_INT((float)(int)COERCE_FLOAT((v12 >> 31) & 0x7FFFFFFF ^ v12))) >> 32;
    int v14 = (__PAIR64__((int)COERCE_FLOAT((v11 >> 31) & 0x7FFFFFFF ^ v11), (v11 >> 31) & 0x7FFFFFFF ^ v11)
         - COERCE_UNSIGNED_INT((float)(int)COERCE_FLOAT((v11 >> 31) & 0x7FFFFFFF ^ v11))) >> 32;
    int v34 = (v8 >> 31) & 0x7FFFFFFF ^ v8;
    int v35 = (int)*(float *)&v34;
    BOOL v36 = (float)(int)*(float *)&v34 > *(float *)&v34;
    int v37 = (v9 >> 31) & 0x7FFFFFFF ^ v9;
    signed int v6 = v35 - v36;
    signed int v7 = (__PAIR64__((int)*(float *)&v37, v37) - COERCE_UNSIGNED_INT((float)(int)*(float *)&v37)) >> 32;
    goto LABEL_42;
  }
  if ((int)result >= 2)
  {
    if (result >= 9)
    {
      unint64_t v38 = (result - 1) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v13 = v38 | 1;
      int32x4_t v39 = vdupq_n_s32(v7);
      int32x4_t v40 = vdupq_n_s32(v6);
      float v41 = (const float *)(v5 + 10);
      unint64_t v42 = v38;
      int32x4_t v43 = v39;
      int32x4_t v44 = v40;
      int32x4_t v45 = v39;
      int32x4_t v46 = v39;
      int32x4_t v47 = v40;
      int32x4_t v48 = v40;
      do
      {
        float v49 = v41 - 8;
        float32x4x2_t v56 = vld2q_f32(v49);
        float32x4x2_t v58 = vld2q_f32(v41);
        int32x4_t v47 = vminq_s32(v47, (int32x4_t)v56.val[0]);
        int32x4_t v48 = vminq_s32(v48, (int32x4_t)v58.val[0]);
        int32x4_t v40 = vmaxq_s32(v40, (int32x4_t)v56.val[0]);
        int32x4_t v44 = vmaxq_s32(v44, (int32x4_t)v58.val[0]);
        int32x4_t v45 = vminq_s32(v45, (int32x4_t)v56.val[1]);
        int32x4_t v46 = vminq_s32(v46, (int32x4_t)v58.val[1]);
        int32x4_t v39 = vmaxq_s32(v39, (int32x4_t)v56.val[1]);
        int32x4_t v43 = vmaxq_s32(v43, (int32x4_t)v58.val[1]);
        v41 += 16;
        v42 -= 8;
      }
      while (v42);
      int v15 = vminvq_s32(vminq_s32(v47, v48));
      int v14 = vminvq_s32(vminq_s32(v45, v46));
      signed int v6 = vmaxvq_s32(vmaxq_s32(v40, v44));
      signed int v7 = vmaxvq_s32(vmaxq_s32(v39, v43));
      if (result - 1 == v38) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v13 = 1;
      int v14 = v5[1];
      int v15 = *v5;
    }
    int v50 = &v5[2 * v13 + 1];
    uint64_t v51 = result - v13;
    do
    {
      int v52 = *(v50 - 1);
      int v53 = *v50;
      if (v15 >= v52) {
        int v15 = *(v50 - 1);
      }
      if (v6 <= v52) {
        signed int v6 = *(v50 - 1);
      }
      if (v14 >= v53) {
        int v14 = *v50;
      }
      if (v7 <= v53) {
        signed int v7 = *v50;
      }
      v50 += 2;
      --v51;
    }
    while (v51);
    goto LABEL_42;
  }
  int v15 = *v5;
  int v14 = v5[1];
LABEL_42:
  *(_DWORD *)a1 = v15;
  *(_DWORD *)(a1 + 4) = v14;
  *(_DWORD *)(a1 + 8) = v6 - v15 + 1;
  *(_DWORD *)(a1 + 12) = v7 - v14 + 1;
  return result;
}

void sub_1003876B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003876C8(_DWORD *a1, int a2)
{
  uint64_t v2 = a1;
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (!a1 || HIWORD(*a1) != 17049)
  {
    uint64_t v5 = (_DWORD *)sub_1002324D4((uint64_t)a1, (uint64_t)v28, 0, 0);
    if ((*v5 & 0xFFFu) < 2)
    {
      sub_1002943B4((uint64_t)v5, 0, 0, 0, (uint64_t)&v21);
      sub_100386F4C((unint64_t)&v13, (uint64_t)&v21);
      uint64_t v33 = v13;
      if (v24 && atomic_fetch_add((atomic_uint *volatile)(v24 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v21);
      }
      uint64_t v24 = 0;
      memset(v23, 0, sizeof(v23));
      if (SHIDWORD(v21) >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = v25;
        do
          *(_DWORD *)(v11 + 4 * v10++) = 0;
        while (v10 < SHIDWORD(v21));
      }
      if (v26 != &v27) {
        j__free(v26);
      }
      goto LABEL_39;
    }
    if ((*v5 & 0xFFFu) - 12 > 1)
    {
      int32x4_t v21 = 0;
      uint64_t v22 = 0;
      qmemcpy((void *)sub_1002D19D8(&v21, 56), "The image/matrix format is not supported by the function", 56);
      sub_1002D2278(-210, (uint64_t *)&v21, "cvBoundingRect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/shapedescr.cpp", 1336);
    }
    uint64_t v2 = sub_10039E69C(0, (uint64_t)v5, v30, (uint64_t)v29);
    goto LABEL_11;
  }
  int v3 = a2;
  if ((*a1 & 0xFFE) != 0xC)
  {
    int32x4_t v21 = 0;
    uint64_t v22 = 0;
    qmemcpy((void *)sub_1002D19D8(&v21, 25), "Unsupported sequence type", 25);
    sub_1002D2278(-5, (uint64_t *)&v21, "cvBoundingRect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/shapedescr.cpp", 1316);
  }
  if ((int)a1[1] < 128)
  {
LABEL_11:
    int v3 = 0;
LABEL_12:
    if (v2[10])
    {
      int32x4_t v21 = v23;
      uint64_t v22 = 136;
      sub_1002943B4((uint64_t)v2, 0, 0, (uint64_t)&v21, (uint64_t)&v13);
      sub_100387290((uint64_t)v20, (uint64_t)&v13);
      uint64_t v6 = v20[1];
      uint64_t v33 = v20[0];
      if (v16 && atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v13);
      }
      uint64_t v16 = 0;
      long long v14 = 0u;
      long long v15 = 0u;
      if (SHIDWORD(v13) >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = v17;
        do
          *(_DWORD *)(v8 + 4 * v7++) = 0;
        while (v7 < SHIDWORD(v13));
      }
      if (v18 != &v19) {
        j__free(v18);
      }
      if (v21 != v23 && v21 != 0) {
        operator delete[]();
      }
      if (!v3) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v6 = 0;
      if (!v3)
      {
LABEL_39:
        uint64_t v4 = &v33;
        return *v4;
      }
    }
    *((void *)v2 + 12) = v33;
    *((void *)v2 + 13) = v6;
    goto LABEL_39;
  }
  if (a2) {
    goto LABEL_12;
  }
  uint64_t v4 = (uint64_t *)(a1 + 24);
  return *v4;
}

void sub_1003879F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100387A78(uint64_t a1, unsigned __int16 a2, int a3, int a4)
{
  int v8 = a4;
  int v9 = a3;
  if (((a2 ^ (unsigned __int16)a1) & 0xFF8) != 0)
  {
    *(_OWORD *)uint64_t v7 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v7, 90), "((((sumType) & ((512 - 1) << 3)) >> 3) + 1) == ((((srcType) & ((512 - 1) << 3)) >> 3) + 1)", 90);
    sub_1002D2278(-215, v7, "getRowSumFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1302);
  }
  int v4 = a1 & 7;
  if (a4 < 0)
  {
    if (a3 >= 0) {
      int v6 = a3;
    }
    else {
      int v6 = a3 + 1;
    }
    int v8 = v6 >> 1;
    int v5 = a2 & 7;
    if ((a1 & 7) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    int v5 = a2 & 7;
    if ((a1 & 7) != 0) {
      goto LABEL_12;
    }
  }
  if (v5 == 4) {
    operator new();
  }
LABEL_12:
  if ((a1 & 7) == 0 && v5 == 2) {
    operator new();
  }
  if ((a1 & 7) == 0 && v5 == 6) {
    operator new();
  }
  if (v4 == 2 && v5 == 4) {
    operator new();
  }
  if (v4 == 2 && v5 == 6) {
    operator new();
  }
  if (v4 == 3 && v5 == 4) {
    sub_10038820C();
  }
  if (v4 == 4 && v5 == 4) {
    sub_100388358();
  }
  if (v4 == 3 && v5 == 6) {
    sub_1003884A4();
  }
  if (v4 == 5 && v5 == 6) {
    sub_1003885F0();
  }
  if (v4 == 6 && v5 == 6) {
    sub_10038873C();
  }
  sub_1002D1F78(v7, "Unsupported combination of source format (=%d), and buffer format (=%d)", a1, HIDWORD(a1));
  sub_1002D2278(-213, v7, "getRowSumFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1330);
}

void sub_10038816C()
{
  sub_1002D1A1C(&v1);
  void *v0 = 0;
  v0[1] = 0;
}

void sub_100388194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10038820C()
{
}

void sub_1003882C8()
{
}

uint64_t sub_1003882EC(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100388358()
{
}

void sub_100388414()
{
}

uint64_t sub_100388438(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_1003884A4()
{
}

void sub_100388560()
{
}

uint64_t sub_100388584(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_1003885F0()
{
}

void sub_1003886AC()
{
}

uint64_t sub_1003886D0(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_10038873C()
{
}

void sub_1003887F8()
{
}

uint64_t sub_10038881C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100388888(uint64_t a1, unsigned __int16 a2, int a3, int a4, double a5)
{
  int v9 = a4;
  int v10 = a3;
  double v8 = a5;
  if (((a2 ^ (unsigned __int16)a1) & 0xFF8) != 0)
  {
    long long v7 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v7, 90), "((((sumType) & ((512 - 1) << 3)) >> 3) + 1) == ((((dstType) & ((512 - 1) << 3)) >> 3) + 1)", 90);
    sub_1002D2278(-215, (uint64_t *)&v7, "getColumnSumFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1340);
  }
  int v5 = a1 & 7;
  int v6 = a2 & 7;
  if (a4 < 0)
  {
    int v9 = v10 / 2;
    if (v5 != 4) {
      goto LABEL_9;
    }
  }
  else if (v5 != 4)
  {
    goto LABEL_9;
  }
  if ((a2 & 7) == 0) {
    operator new();
  }
LABEL_9:
  if (v5 == 2 && (a2 & 7) == 0) {
    sub_100389120();
  }
  if (v5 == 6 && (a2 & 7) == 0) {
    operator new();
  }
  if (v5 == 4 && v6 == 2) {
    operator new();
  }
  if (v5 == 6 && v6 == 2) {
    operator new();
  }
  if (v5 == 4 && v6 == 3) {
    sub_1003892A0();
  }
  if (v5 == 6 && v6 == 3) {
    sub_100389414();
  }
  if (v5 == 4 && v6 == 4) {
    sub_100389588();
  }
  if (v5 == 4 && v6 == 5) {
    sub_1003896FC();
  }
  if (v5 == 6 && v6 == 5) {
    sub_100389870();
  }
  if (v5 == 4 && v6 == 6) {
    sub_1003899E4();
  }
  if (v5 == 6 && v6 == 6) {
    sub_100389B58();
  }
  sub_1002D1F78((uint64_t *)&v7, "Unsupported combination of sum format (=%d), and destination format (=%d)", a1, HIDWORD(a1));
  sub_1002D2278(-213, (uint64_t *)&v7, "getColumnSumFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1372);
}

void sub_100389064()
{
  sub_1002D1A1C(&v1);
  void *v0 = 0;
  v0[1] = 0;
}

void sub_10038908C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100389120()
{
}

void sub_10038927C()
{
}

void sub_1003892A0()
{
}

void sub_100389384()
{
}

uint64_t sub_1003893A8(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100389414()
{
}

void sub_1003894F8()
{
}

uint64_t sub_10038951C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100389588()
{
}

void sub_10038966C()
{
}

uint64_t sub_100389690(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_1003896FC()
{
}

void sub_1003897E0()
{
}

uint64_t sub_100389804(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100389870()
{
}

void sub_100389954()
{
}

uint64_t sub_100389978(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_1003899E4()
{
}

void sub_100389AC8()
{
}

uint64_t sub_100389AEC(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100389B58()
{
}

void sub_100389C3C()
{
}

uint64_t sub_100389C60(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100389CCC(uint64_t a1, char a2, int *a3, int *a4, int a5)
{
  unsigned int v5 = a1 & 7;
  if ((a1 & 7) != 0)
  {
    if (v5 > 4) {
      goto LABEL_15;
    }
  }
  else if ((a2 & 7) == 0 && a3[1] * *a3 < 257)
  {
    __int16 v6 = 2;
    goto LABEL_17;
  }
  if (!a5 || (v5 != 2 ? (int v7 = 0x10000) : (int v7 = 0x8000), (a1 & 7) != 0 ? (v8 = v7) : (v8 = 0x800000), a3[1] * *a3 <= v8))
  {
    __int16 v6 = 4;
LABEL_17:
    sub_100387A78(a1, v6 | a1 & 0xFF8, *a3, *a4);
  }
LABEL_15:
  __int16 v6 = 6;
  goto LABEL_17;
}

void sub_100389F50()
{
}

void sub_100389FA8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, uint64_t *a5, int a6, char a7)
{
  sub_1002D6AE8(v45, &off_10049BB60);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    long long v15 = *(_OWORD *)(v14 + 16);
    v39[0] = *(_OWORD *)v14;
    v39[1] = v15;
    v39[2] = *(_OWORD *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 56);
    uint64_t v40 = *(void *)(v14 + 48);
    uint64_t v41 = v16;
    unint64_t v42 = (int32x2_t *)v39 + 1;
    int32x4_t v43 = v44;
    v44[0] = 0;
    v44[1] = 0;
    if (v16) {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v39[0]) = 0;
      sub_1002931A8((uint64_t)v39, v14);
    }
    else
    {
      uint64_t v17 = *(void **)(v14 + 72);
      int32x4_t v18 = v43;
      *(void *)int32x4_t v43 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)v39);
  }
  char v19 = v39[0];
  if (a3 >= 0) {
    char v19 = a3;
  }
  int32x2_t v38 = vrev64_s32(*v42);
  sub_10029E6D4(a2, &v38, v39[0] & 0xFF8 | v19 & 7, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v20 = *(void *)(a2 + 8);
    long long v21 = *(_OWORD *)(v20 + 16);
    v32[0] = *(_OWORD *)v20;
    v32[1] = v21;
    v32[2] = *(_OWORD *)(v20 + 32);
    uint64_t v22 = *(void *)(v20 + 56);
    uint64_t v33 = *(void *)(v20 + 48);
    uint64_t v34 = v22;
    int v35 = (char *)v32 + 8;
    BOOL v36 = v37;
    v37[0] = 0;
    v37[1] = 0;
    if (v22) {
      atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 1u);
    }
    if (*(int *)(v20 + 4) > 2)
    {
      DWORD1(v32[0]) = 0;
      sub_1002931A8((uint64_t)v32, v20);
    }
    else
    {
      int32x4_t v23 = *(void **)(v20 + 72);
      uint64_t v24 = v36;
      *(void *)BOOL v36 = *v23;
      v24[1] = v23[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)v32);
  }
  if ((a7 & 0x10) != 0 && a6)
  {
    unsigned int v25 = DWORD2(v39[0]);
    if (DWORD2(v39[0]) == 1) {
      a4[1] = 1;
    }
    unsigned int v26 = HIDWORD(v39[0]);
    if (HIDWORD(v39[0]) == 1) {
      *a4 = 1;
    }
    uint64_t v31 = 0;
    unint64_t v30 = __PAIR64__(v25, v26);
  }
  else
  {
    uint64_t v31 = 0;
    unint64_t v30 = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)v39 + 8));
    if ((a7 & 0x10) == 0) {
      sub_1002951DC((uint64_t)v39, &v30, &v31);
    }
  }
  uint64_t v27 = *(void *)a4;
  uint64_t v28 = *a5;
  uint64_t v29 = v27;
  sub_100389CCC(v39[0] & 0xFFF, v32[0], (int *)&v29, (int *)&v28, a6);
}

void sub_10038A380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_1000094F4((uint64_t)&a15);
  sub_1000094F4((uint64_t)&a29);
  sub_10020FA00(v29 - 80);
  _Unwind_Resume(a1);
}

void sub_10038A3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_1000094F4((uint64_t)&a29);
  sub_10020FA00(v29 - 80);
  _Unwind_Resume(a1);
}

void sub_10038A3E8(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_10038A3FC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5)
{
  sub_1002D6AE8(v13, &off_10049BB80);
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = v10;
  sub_100389FA8(a1, a2, -1, &v12, &v11, 1, a5);
}

void sub_10038A494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10038A4A8(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  BOOL v9 = a1 < 8 && (a1 & 0x80000001) == 1 && a4 <= 0.0;
  if ((a2 - 5) >= 2)
  {
    __src[0] = 0;
    __src[1] = 0;
    qmemcpy((void *)sub_1002D19D8(__src, 24), "ktype == 5 || ktype == 6", 24);
    sub_1002D2278(-215, __src, "getGaussianKernel", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1726);
  }
  *(_DWORD *)a3 = 1124007936;
  *(_OWORD *)(a3 + 4) = 0u;
  *(_OWORD *)(a3 + 20) = 0u;
  *(_OWORD *)(a3 + 36) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 64) = a3 + 8;
  *(void *)(a3 + 72) = a3 + 80;
  *(void *)(a3 + 88) = 0;
  __src[0] = a1 | 0x100000000;
  sub_100292534((char *)a3, 2, __src, a2 & 0xFFF);
  double v10 = (double)(a1 - 1);
  double v11 = (v10 * 0.5 + -1.0) * 0.3 + 0.8;
  if (a4 > 0.0) {
    double v11 = a4;
  }
  if (a1 < 1) {
    return;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v13 = (float *)((char *)&unk_10040B3A8 + 28 * (a1 >> 1));
    float v14 = *v13;
    if (a2 == 5)
    {
      *(float *)uint64_t v12 = v14;
      double v15 = v14 + 0.0;
      if (a1 != 1)
      {
        float v16 = v13[1];
        *(float *)(v12 + 4) = v16;
        double v15 = v15 + v16;
        if (a1 != 2)
        {
          float v17 = v13[2];
          *(float *)(v12 + 8) = v17;
          double v15 = v15 + v17;
          if (a1 != 3)
          {
            float v18 = v13[3];
            *(float *)(v12 + 12) = v18;
            double v15 = v15 + v18;
            if (a1 != 4)
            {
              float v19 = v13[4];
              *(float *)(v12 + 16) = v19;
              double v15 = v15 + v19;
              if (a1 != 5)
              {
                float v20 = v13[5];
                *(float *)(v12 + 20) = v20;
                double v15 = v15 + v20;
                if (a1 != 6)
                {
                  float v21 = v13[6];
                  *(float *)(v12 + 24) = v21;
                  double v15 = v15 + v21;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      double v25 = v14;
      *(double *)uint64_t v12 = v25;
      double v15 = v25 + 0.0;
      if (a1 != 1)
      {
        double v26 = v13[1];
        *(double *)(v12 + 8) = v26;
        double v15 = v15 + v26;
        if (a1 != 2)
        {
          double v27 = v13[2];
          *(double *)(v12 + 16) = v27;
          double v15 = v15 + v27;
          if (a1 != 3)
          {
            double v28 = v13[3];
            *(double *)(v12 + 24) = v28;
            double v15 = v15 + v28;
            if (a1 != 4)
            {
              double v29 = v13[4];
              *(double *)(v12 + 32) = v29;
              double v15 = v15 + v29;
              if (a1 != 5)
              {
                double v30 = v13[5];
                *(double *)(v12 + 40) = v30;
                double v15 = v15 + v30;
                if (a1 != 6)
                {
                  double v31 = v13[6];
                  *(double *)(v12 + 48) = v31;
                  double v15 = v15 + v31;
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_38;
  }
  double v22 = -v10;
  double v23 = -0.5 / (v11 * v11);
  double v72 = -v10;
  double v73 = v23;
  if (a2 != 5)
  {
    uint64_t v32 = 0;
    double v15 = 0.0;
    do
    {
      long double v33 = exp(((double)(int)v32 + v22 * 0.5) * (v23 * ((double)(int)v32 + v22 * 0.5)));
      double v22 = v72;
      double v23 = v73;
      *(long double *)(v12 + 8 * v32) = v33;
      double v15 = v15 + v33;
      ++v32;
    }
    while (a1 != v32);
    goto LABEL_38;
  }
  if (a1 >= 4)
  {
    uint64_t v24 = a1 & 0xFFFFFFFC;
    float64x2_t v67 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v22, 0);
    uint64_t v34 = &_mh_execute_header;
    int v35 = (float64_t *)(v12 + 8);
    double v15 = 0.0;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v66 = _Q0;
    uint64_t v40 = v24;
    do
    {
      int32x2_t v41 = vadd_s32((int32x2_t)v34, (int32x2_t)0x200000002);
      v42.i64[0] = (int)v34;
      v42.i64[1] = SHIDWORD(v34);
      float64x2_t v43 = vcvtq_f64_s64(v42);
      v42.i64[0] = v41.i32[0];
      v42.i64[1] = v41.i32[1];
      float64x2_t v44 = vmlaq_f64(v43, v66, v67);
      float64x2_t v45 = vmlaq_f64(vcvtq_f64_s64(v42), v66, v67);
      float64x2_t __x = vmulq_f64(v44, vmulq_n_f64(v44, v23));
      float64x2_t v71 = vmulq_f64(v45, vmulq_n_f64(v45, v23));
      long double v69 = exp(__x.f64[1]);
      v46.f64[0] = exp(__x.f64[0]);
      v46.f64[1] = v69;
      float64x2_t v70 = v46;
      __x.f64[0] = exp(v71.f64[1]);
      v47.f64[0] = exp(v71.f64[0]);
      double v23 = v73;
      v47.f64[1] = __x.f64[0];
      float32x2_t v48 = vcvt_f32_f64(v70);
      *(float32x2_t *)&v47.f64[0] = vcvt_f32_f64(v47);
      *(v35 - 1) = *(float64_t *)&v48;
      *int v35 = v47.f64[0];
      float64x2_t v49 = vcvtq_f64_f32(v48);
      float64x2_t v50 = vcvtq_f64_f32(*(float32x2_t *)&v47.f64[0]);
      double v15 = v15 + v49.f64[0] + v49.f64[1] + v50.f64[0] + v50.f64[1];
      uint64_t v34 = (const mach_header_64 *)vadd_s32((int32x2_t)v34, (int32x2_t)0x400000004);
      v35 += 2;
      v40 -= 4;
    }
    while (v40);
    double v22 = v72;
    if (v24 == a1) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v24 = 0;
    double v15 = 0.0;
  }
  do
  {
    long double v51 = exp(((double)(int)v24 + v22 * 0.5) * (v23 * ((double)(int)v24 + v22 * 0.5)));
    double v22 = v72;
    double v23 = v73;
    *(float *)&long double v51 = v51;
    *(_DWORD *)(v12 + 4 * v24) = LODWORD(v51);
    double v15 = v15 + *(float *)&v51;
    ++v24;
  }
  while (a1 != v24);
LABEL_38:
  double v52 = 1.0 / v15;
  if (a2 != 5)
  {
    if (a1 >= 4)
    {
      uint64_t v54 = a1 & 0xFFFFFFFC;
      float v61 = (float64x2_t *)(v12 + 16);
      uint64_t v62 = v54;
      do
      {
        float64x2_t v63 = vmulq_n_f64(*v61, v52);
        v61[-1] = vmulq_n_f64(v61[-1], v52);
        float64x2_t *v61 = v63;
        v61 += 2;
        v62 -= 4;
      }
      while (v62);
      if (v54 == a1) {
        return;
      }
    }
    else
    {
      uint64_t v54 = 0;
    }
    uint64_t v64 = (double *)(v12 + 8 * v54);
    uint64_t v65 = a1 - v54;
    do
    {
      *uint64_t v64 = v52 * *v64;
      ++v64;
      --v65;
    }
    while (v65);
    return;
  }
  if (a1 < 8)
  {
    uint64_t v53 = 0;
LABEL_46:
    float32x4x2_t v58 = (float *)(v12 + 4 * v53);
    uint64_t v59 = a1 - v53;
    do
    {
      float v60 = v52 * *v58;
      *v58++ = v60;
      --v59;
    }
    while (v59);
    return;
  }
  uint64_t v53 = a1 & 0x7FFFFFF8;
  float32x4x2_t v55 = (float32x2_t *)(v12 + 16);
  uint64_t v56 = a1 & 0xFFFFFFF8;
  do
  {
    float32x4_t v57 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v55), v52)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v55->f32), v52));
    *(float32x4_t *)v55[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v55[-2]), v52)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v55[-2].f32), v52));
    *(float32x4_t *)v55->f32 = v57;
    v55 += 4;
    v56 -= 8;
  }
  while (v56);
  if (v53 != a1) {
    goto LABEL_46;
  }
}

void sub_10038AA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10038AA68(uint64_t a1, uint64_t a2, char a3, int *a4, double a5, double a6)
{
  unsigned int v9 = a3 & 7;
  if (a6 <= 0.0) {
    double v10 = a5;
  }
  else {
    double v10 = a6;
  }
  int v11 = *a4;
  if (a5 > 0.0 && v11 <= 0)
  {
    if ((a3 & 7) != 0) {
      int v13 = 4;
    }
    else {
      int v13 = 3;
    }
    int v11 = (uint64_t)rint((double)v13 * a5 * 2.0 + 1.0) | 1;
    *a4 = v11;
  }
  int v14 = a4[1];
  if (v10 > 0.0 && v14 <= 0)
  {
    if ((a3 & 7) != 0) {
      int v16 = 4;
    }
    else {
      int v16 = 3;
    }
    int v14 = (uint64_t)rint(v10 * (double)v16 * 2.0 + 1.0) | 1;
    a4[1] = v14;
  }
  if (v11 < 1 || (v11 & 1) == 0 || v14 < 1 || (v14 & 1) == 0)
  {
    *(_OWORD *)uint64_t v53 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v53, 84), "ksize.width > 0 && ksize.width % 2 == 1 && ksize.height > 0 && ksize.height % 2 == 1", 84);
    sub_1002D2278(-215, (uint64_t *)v53, "createGaussianKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 1780);
  }
  if (a5 >= 0.0) {
    double v20 = a5;
  }
  else {
    double v20 = 0.0;
  }
  if (v10 >= 0.0) {
    double v21 = v10;
  }
  else {
    double v21 = 0.0;
  }
  if (v9 <= 5) {
    unsigned int v9 = 5;
  }
  sub_10038A4A8(v11, v9, (uint64_t)v53, v20);
  uint64_t v22 = *(void *)(a1 + 56);
  if (v53 != (unsigned char *)a1)
  {
    if (v22 && atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1);
    }
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(a1 + 64);
      do
        *(_DWORD *)(v24 + 4 * v23++) = 0;
      while (v23 < *(int *)(a1 + 4));
    }
    int v25 = *(_DWORD *)&v53[4];
    long long v26 = *(_OWORD *)&v53[16];
    *(_OWORD *)a1 = *(_OWORD *)v53;
    *(_OWORD *)(a1 + 16) = v26;
    long long v27 = *(_OWORD *)&v53[48];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v53[32];
    *(_OWORD *)(a1 + 48) = v27;
    double v28 = *(void **)(a1 + 72);
    if (v28 == (void *)(a1 + 80))
    {
      double v29 = v55;
      if (v25 <= 2) {
        goto LABEL_51;
      }
    }
    else
    {
      j__free(v28);
      *(void *)(a1 + 64) = a1 + 8;
      *(void *)(a1 + 72) = a1 + 80;
      double v28 = (void *)(a1 + 80);
      double v29 = v55;
      if (*(int *)&v53[4] <= 2)
      {
LABEL_51:
        void *v28 = *v29;
        v28[1] = v29[1];
LABEL_57:
        *(_DWORD *)uint64_t v53 = 1124007936;
        memset(&v53[4], 0, 60);
        goto LABEL_58;
      }
    }
    *(void *)(a1 + 64) = v54;
    *(void *)(a1 + 72) = v29;
    uint64_t v54 = &v53[8];
    float32x4x2_t v55 = v56;
    goto LABEL_57;
  }
  if (v22 && atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v53);
  }
LABEL_58:
  *(void *)&v53[56] = 0;
  memset(&v53[16], 0, 32);
  if (*(int *)&v53[4] >= 1)
  {
    uint64_t v30 = 0;
    double v31 = v54;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < *(int *)&v53[4]);
  }
  if (v55 != v56) {
    j__free(v55);
  }
  int v32 = a4[1];
  double v33 = vabdd_f64(v20, v21);
  if (v32 == *a4 && v33 < 2.22044605e-16)
  {
    if (a2 == a1) {
      return;
    }
    uint64_t v43 = *(void *)(a1 + 56);
    if (v43) {
      atomic_fetch_add((atomic_uint *volatile)(v43 + 20), 1u);
    }
    uint64_t v44 = *(void *)(a2 + 56);
    if (v44 && atomic_fetch_add((atomic_uint *volatile)(v44 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a2);
    }
    *(void *)(a2 + 56) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    if (*(int *)(a2 + 4) <= 0)
    {
      *(_DWORD *)a2 = *(_DWORD *)a1;
      int v48 = *(_DWORD *)(a1 + 4);
      if (v48 <= 2)
      {
LABEL_91:
        *(_DWORD *)(a2 + 4) = v48;
        *(void *)(a2 + 8) = *(void *)(a1 + 8);
        float64x2_t v49 = *(void **)(a1 + 72);
        float64x2_t v50 = *(void **)(a2 + 72);
        *float64x2_t v50 = *v49;
        v50[1] = v49[1];
LABEL_102:
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
        return;
      }
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v46 = *(void *)(a2 + 64);
      do
      {
        *(_DWORD *)(v46 + 4 * v45++) = 0;
        uint64_t v47 = *(int *)(a2 + 4);
      }
      while (v45 < v47);
      *(_DWORD *)a2 = *(_DWORD *)a1;
      if ((int)v47 <= 2)
      {
        int v48 = *(_DWORD *)(a1 + 4);
        if (v48 <= 2) {
          goto LABEL_91;
        }
      }
    }
    sub_1002931A8(a2, a1);
    goto LABEL_102;
  }
  sub_10038A4A8(v32, v9, (uint64_t)v53, v21);
  uint64_t v35 = *(void *)(a2 + 56);
  if (v53 == (unsigned char *)a2)
  {
    if (v35 && atomic_fetch_add((atomic_uint *volatile)(v35 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v53);
    }
    goto LABEL_95;
  }
  if (v35 && atomic_fetch_add((atomic_uint *volatile)(v35 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a2);
  }
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (*(int *)(a2 + 4) >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = *(void *)(a2 + 64);
    do
      *(_DWORD *)(v37 + 4 * v36++) = 0;
    while (v36 < *(int *)(a2 + 4));
  }
  int v38 = *(_DWORD *)&v53[4];
  long long v39 = *(_OWORD *)&v53[16];
  *(_OWORD *)a2 = *(_OWORD *)v53;
  *(_OWORD *)(a2 + 16) = v39;
  long long v40 = *(_OWORD *)&v53[48];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v53[32];
  *(_OWORD *)(a2 + 48) = v40;
  int32x2_t v41 = *(void **)(a2 + 72);
  if (v41 == (void *)(a2 + 80))
  {
    int64x2_t v42 = v55;
    if (v38 <= 2) {
      goto LABEL_76;
    }
LABEL_93:
    *(void *)(a2 + 64) = v54;
    *(void *)(a2 + 72) = v42;
    uint64_t v54 = &v53[8];
    float32x4x2_t v55 = v56;
    goto LABEL_94;
  }
  j__free(v41);
  *(void *)(a2 + 64) = a2 + 8;
  *(void *)(a2 + 72) = a2 + 80;
  int32x2_t v41 = (void *)(a2 + 80);
  int64x2_t v42 = v55;
  if (*(int *)&v53[4] > 2) {
    goto LABEL_93;
  }
LABEL_76:
  void *v41 = *v42;
  v41[1] = v42[1];
LABEL_94:
  *(_DWORD *)uint64_t v53 = 1124007936;
  memset(&v53[4], 0, 60);
LABEL_95:
  *(void *)&v53[56] = 0;
  memset(&v53[16], 0, 32);
  if (*(int *)&v53[4] >= 1)
  {
    uint64_t v51 = 0;
    double v52 = v54;
    do
      *(_DWORD *)&v52[4 * v51++] = 0;
    while (v51 < *(int *)&v53[4]);
  }
  if (v55 != v56) {
    j__free(v55);
  }
}

void sub_10038B00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10038B030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10038B048(uint64_t a1, uint64_t a2, int *a3, char a4, double a5, double a6)
{
  sub_1002D6AE8(v64, &off_10049BBA0);
  int v12 = sub_10029AB74((int *)a1, -1);
  sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)&v63);
  int32x2_t v62 = v63;
  sub_10029E6D4(a2, &v62, v12, -1, 0, 0);
  if ((a4 & 0x10) == 0) {
    goto LABEL_6;
  }
  if (v63.i32[1] == 1) {
    a3[1] = 1;
  }
  if (v63.i32[0] == 1)
  {
    *a3 = 1;
  }
  else
  {
LABEL_6:
    int v13 = *a3;
    if (*a3 != 1)
    {
      int v14 = a3[1];
      goto LABEL_11;
    }
  }
  int v14 = a3[1];
  if (v14 != 1)
  {
    int v13 = 1;
LABEL_11:
    v58[0] = 1124007936;
    memset(&v58[1], 0, 60);
    uint64_t v59 = &v58[2];
    float v60 = v61;
    v61[0] = 0;
    v61[1] = 0;
    v54[0] = 1124007936;
    memset(&v54[1], 0, 60);
    float32x4x2_t v55 = &v54[2];
    uint64_t v56 = v57;
    v57[0] = 0;
    v57[1] = 0;
    v53[0] = v13;
    v53[1] = v14;
    sub_10038AA68((uint64_t)v58, (uint64_t)v54, v12, v53, a5, a6);
    if (sub_10029A230((_DWORD *)a1) == 0x10000)
    {
      uint64_t v15 = *(void *)(a1 + 8);
      long long v16 = *(_OWORD *)(v15 + 16);
      v47[0] = *(_OWORD *)v15;
      v47[1] = v16;
      v47[2] = *(_OWORD *)(v15 + 32);
      uint64_t v17 = *(void *)(v15 + 56);
      uint64_t v48 = *(void *)(v15 + 48);
      uint64_t v49 = v17;
      float64x2_t v50 = (char *)v47 + 8;
      uint64_t v51 = v52;
      v52[0] = 0;
      v52[1] = 0;
      if (v17) {
        atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
      }
      if (*(int *)(v15 + 4) > 2)
      {
        DWORD1(v47[0]) = 0;
        sub_1002931A8((uint64_t)v47, v15);
      }
      else
      {
        float v18 = *(void **)(v15 + 72);
        float v19 = v51;
        *(void *)uint64_t v51 = *v18;
        v19[1] = v18[1];
      }
    }
    else
    {
      sub_100299554(a1, -1, (uint64_t)v47);
    }
    if (sub_10029A230((_DWORD *)a2) == 0x10000)
    {
      uint64_t v20 = *(void *)(a2 + 8);
      long long v21 = *(_OWORD *)(v20 + 16);
      v41[0] = *(_OWORD *)v20;
      long long v22 = *(_OWORD *)(v20 + 32);
      v41[1] = v21;
      uint64_t v41[2] = v22;
      uint64_t v23 = *(void *)(v20 + 56);
      uint64_t v42 = *(void *)(v20 + 48);
      uint64_t v43 = v23;
      uint64_t v44 = (char *)v41 + 8;
      uint64_t v45 = v46;
      v46[0] = 0;
      v46[1] = 0;
      if (v23) {
        atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
      }
      if (*(int *)(v20 + 4) > 2)
      {
        DWORD1(v41[0]) = 0;
        sub_1002931A8((uint64_t)v41, v20);
      }
      else
      {
        uint64_t v24 = *(void **)(v20 + 72);
        int v25 = v45;
        *(void *)uint64_t v45 = *v24;
        v25[1] = v24[1];
      }
    }
    else
    {
      sub_100299554(a2, -1, (uint64_t)v41);
    }
    uint64_t v40 = 0;
    int32x2_t v39 = vrev64_s32(*(int32x2_t *)((char *)v47 + 8));
    if ((a4 & 0x10) == 0) {
      sub_1002951DC((uint64_t)v47, &v39, &v40);
    }
    uint64_t v38 = 0;
    int v36 = 16842752;
    uint64_t v37 = v47;
    int v33 = 33619968;
    uint64_t v34 = v41;
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    int v30 = 16842752;
    double v31 = v58;
    uint64_t v29 = 0;
    int v27 = 16842752;
    double v28 = v54;
    uint64_t v26 = -1;
    sub_100334370((uint64_t)&v36, (uint64_t)&v33, v12 & 7, (uint64_t)&v30, (uint64_t)&v27, (int *)&v26, a4);
  }
  sub_10029DC34(a1, (_DWORD *)a2);
  if (v65) {
    sub_1002D6888(v64);
  }
}

void sub_10038B570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_1000094F4((uint64_t)&a25);
  sub_1000094F4((uint64_t)&a37);
  sub_1000094F4((uint64_t)&a51);
  sub_1000094F4(v51 - 224);
  sub_10020FA00(v51 - 112);
  _Unwind_Resume(a1);
}

void sub_10038B5E4(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_10038B5FC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unint64_t sub_10038B634(unint64_t result, unsigned __int8 *a2, uint32x4_t *a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    uint64_t v20 = (a5 * a4);
    if ((int)v20 < 1) {
      return result;
    }
    uint64_t v21 = 2 * a5;
    if (v20 < 8)
    {
      uint64_t v22 = 0;
      goto LABEL_12;
    }
    uint64_t v22 = 0;
    unint64_t v56 = (unint64_t)a3 + 4 * v20;
    BOOL v58 = &a2[a5 + v20] > (unsigned __int8 *)a3 && (unint64_t)&a2[a5] < v56;
    BOOL v60 = &a2[v20] > (unsigned __int8 *)a3 && v56 > (unint64_t)a2;
    BOOL v61 = (unint64_t)&a2[v21] < v56 && &a2[v21 + v20] > (unsigned __int8 *)a3;
    if (v61 || v58 || v60) {
      goto LABEL_12;
    }
    if (v20 >= 0x10)
    {
      uint64_t v22 = v20 & 0x7FFFFFF0;
      uint64_t v117 = v20 & 0xFFFFFFF0;
      int64x2_t v118 = a3;
      uint64_t v119 = (uint8x16_t *)a2;
      do
      {
        uint8x16_t v120 = *(uint8x16_t *)((char *)v119 + a5);
        uint16x8_t v121 = vaddl_high_u8(v120, *v119);
        uint16x8_t v122 = vaddl_u8(*(uint8x8_t *)v120.i8, *(uint8x8_t *)v119->i8);
        uint8x16_t v123 = *(uint8x16_t *)((char *)v119 + 2 * a5);
        uint16x8_t v124 = vmovl_high_u8(v123);
        uint16x8_t v125 = vmovl_u8(*(uint8x8_t *)v123.i8);
        v118[2] = vaddl_u16(*(uint16x4_t *)v121.i8, *(uint16x4_t *)v124.i8);
        v118[3] = vaddl_high_u16(v121, v124);
        uint32x4_t *v118 = vaddl_u16(*(uint16x4_t *)v122.i8, *(uint16x4_t *)v125.i8);
        v118[1] = vaddl_high_u16(v122, v125);
        v118 += 4;
        ++v119;
        v117 -= 16;
      }
      while (v117);
      if (v22 == v20) {
        return result;
      }
      if ((((_BYTE)a5 * (_BYTE)a4) & 8) == 0)
      {
LABEL_12:
        uint64_t v23 = &a2[v22];
        uint64_t v24 = &a3->i32[v22];
        uint64_t v25 = v20 - v22;
        do
        {
          *v24++ = v23[a5] + *v23 + v23[2 * a5];
          ++v23;
          --v25;
        }
        while (v25);
        return result;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v62 = v22;
    uint64_t v22 = v20 & 0xFFFFFFF8;
    int32x2_t v63 = (uint8x8_t *)&a2[v62];
    uint64_t v64 = (uint32x4_t *)((char *)a3 + 4 * v62);
    uint64_t v65 = v62 - v22;
    do
    {
      uint16x8_t v66 = vaddl_u8(*(uint8x8_t *)((char *)v63 + a5), *v63);
      uint16x8_t v67 = vmovl_u8(*(uint8x8_t *)((char *)v63 + 2 * a5));
      *uint64_t v64 = vaddl_u16(*(uint16x4_t *)v66.i8, *(uint16x4_t *)v67.i8);
      v64[1] = vaddl_high_u16(v66, v67);
      v64 += 2;
      ++v63;
      v65 += 8;
    }
    while (v65);
    if (v22 == v20) {
      return result;
    }
    goto LABEL_12;
  }
  if (v5 != 5)
  {
    unint64_t v26 = (v5 * a5);
    unint64_t v27 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v26 < 1)
          {
            unsigned int v32 = 0;
            unsigned int v31 = 0;
            unsigned int v30 = 0;
            unsigned int v29 = 0;
            goto LABEL_131;
          }
          if (v26 < 0x1D)
          {
            unint64_t v28 = 0;
            unsigned int v29 = 0;
            unsigned int v30 = 0;
            unsigned int v31 = 0;
            unsigned int v32 = 0;
            goto LABEL_129;
          }
          unint64_t v79 = ((v26 - 1) >> 2) + 1;
          if (v26 >= 0x3D)
          {
            int32x4_t v128 = 0uLL;
            uint64_t v80 = v79 & 0x7FFFFFFFFFFFFFF0;
            int32x4_t v129 = 0uLL;
            uint64_t v130 = v79 & 0x7FFFFFFFFFFFFFF0;
            int32x4_t v131 = 0uLL;
            int v132 = (const char *)a2;
            int32x4_t v133 = 0uLL;
            int32x4_t v134 = 0uLL;
            int32x4_t v135 = 0uLL;
            int32x4_t v136 = 0uLL;
            int32x4_t v137 = 0uLL;
            int32x4_t v138 = 0uLL;
            int32x4_t v139 = 0uLL;
            int32x4_t v140 = 0uLL;
            int32x4_t v141 = 0uLL;
            int32x4_t v142 = 0uLL;
            int32x4_t v143 = 0uLL;
            int32x4_t v144 = 0uLL;
            int32x4_t v145 = 0uLL;
            do
            {
              int8x16x4_t v254 = vld4q_s8(v132);
              v132 += 64;
              uint16x8_t v146 = vmovl_u8(*(uint8x8_t *)v254.val[0].i8);
              uint16x8_t v147 = vmovl_high_u8((uint8x16_t)v254.val[0]);
              int32x4_t v145 = (int32x4_t)vaddw_high_u16((uint32x4_t)v145, v147);
              int32x4_t v144 = (int32x4_t)vaddw_u16((uint32x4_t)v144, *(uint16x4_t *)v147.i8);
              int32x4_t v143 = (int32x4_t)vaddw_high_u16((uint32x4_t)v143, v146);
              int32x4_t v142 = (int32x4_t)vaddw_u16((uint32x4_t)v142, *(uint16x4_t *)v146.i8);
              uint16x8_t v148 = vmovl_u8(*(uint8x8_t *)v254.val[1].i8);
              uint16x8_t v149 = vmovl_high_u8((uint8x16_t)v254.val[1]);
              int32x4_t v141 = (int32x4_t)vaddw_high_u16((uint32x4_t)v141, v149);
              int32x4_t v140 = (int32x4_t)vaddw_u16((uint32x4_t)v140, *(uint16x4_t *)v149.i8);
              int32x4_t v139 = (int32x4_t)vaddw_high_u16((uint32x4_t)v139, v148);
              int32x4_t v138 = (int32x4_t)vaddw_u16((uint32x4_t)v138, *(uint16x4_t *)v148.i8);
              uint16x8_t v150 = vmovl_u8(*(uint8x8_t *)v254.val[2].i8);
              uint16x8_t v151 = vmovl_high_u8((uint8x16_t)v254.val[2]);
              int32x4_t v137 = (int32x4_t)vaddw_high_u16((uint32x4_t)v137, v151);
              int32x4_t v136 = (int32x4_t)vaddw_u16((uint32x4_t)v136, *(uint16x4_t *)v151.i8);
              int32x4_t v135 = (int32x4_t)vaddw_high_u16((uint32x4_t)v135, v150);
              int32x4_t v134 = (int32x4_t)vaddw_u16((uint32x4_t)v134, *(uint16x4_t *)v150.i8);
              uint16x8_t v152 = vmovl_u8(*(uint8x8_t *)v254.val[3].i8);
              v254.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v254.val[3]);
              int32x4_t v133 = (int32x4_t)vaddw_high_u16((uint32x4_t)v133, (uint16x8_t)v254.val[0]);
              int32x4_t v131 = (int32x4_t)vaddw_u16((uint32x4_t)v131, *(uint16x4_t *)v254.val[0].i8);
              int32x4_t v129 = (int32x4_t)vaddw_high_u16((uint32x4_t)v129, v152);
              int32x4_t v128 = (int32x4_t)vaddw_u16((uint32x4_t)v128, *(uint16x4_t *)v152.i8);
              v130 -= 16;
            }
            while (v130);
            unsigned int v32 = vaddvq_s32(vaddq_s32(vaddq_s32(v142, v144), vaddq_s32(v143, v145)));
            unsigned int v31 = vaddvq_s32(vaddq_s32(vaddq_s32(v138, v140), vaddq_s32(v139, v141)));
            unsigned int v30 = vaddvq_s32(vaddq_s32(vaddq_s32(v134, v136), vaddq_s32(v135, v137)));
            unsigned int v29 = vaddvq_s32(vaddq_s32(vaddq_s32(v128, v131), vaddq_s32(v129, v133)));
            if (v79 == v80) {
              goto LABEL_131;
            }
            if ((v79 & 8) == 0)
            {
              unint64_t v28 = 4 * v80;
LABEL_129:
              uint16x8_t v153 = a2 + 3;
              do
              {
                v32 += a2[v28];
                v31 += v153[v28 - 2];
                v30 += v153[v28 - 1];
                v29 += v153[v28];
                v28 += 4;
              }
              while (v28 < v26);
              goto LABEL_131;
            }
          }
          else
          {
            unsigned int v29 = 0;
            unsigned int v30 = 0;
            unsigned int v31 = 0;
            unsigned int v32 = 0;
            uint64_t v80 = 0;
          }
          unint64_t v28 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
          int32x4_t v81 = (int32x4_t)v29;
          int32x4_t v82 = (int32x4_t)v30;
          int32x4_t v83 = (int32x4_t)v31;
          int32x4_t v84 = (int32x4_t)v32;
          int32x4_t v85 = 0uLL;
          int v86 = (const char *)&a2[4 * v80];
          unint64_t v87 = v80 - (v79 & 0x7FFFFFFFFFFFFFF8);
          int32x4_t v88 = 0uLL;
          int32x4_t v89 = 0uLL;
          int32x4_t v90 = 0uLL;
          do
          {
            int8x8x4_t v253 = vld4_s8(v86);
            v86 += 32;
            uint16x8_t v91 = vmovl_u8((uint8x8_t)v253.val[0]);
            int32x4_t v90 = (int32x4_t)vaddw_high_u16((uint32x4_t)v90, v91);
            int32x4_t v84 = (int32x4_t)vaddw_u16((uint32x4_t)v84, *(uint16x4_t *)v91.i8);
            uint16x8_t v92 = vmovl_u8((uint8x8_t)v253.val[1]);
            int32x4_t v89 = (int32x4_t)vaddw_high_u16((uint32x4_t)v89, v92);
            int32x4_t v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v92.i8);
            uint16x8_t v93 = vmovl_u8((uint8x8_t)v253.val[2]);
            int32x4_t v88 = (int32x4_t)vaddw_high_u16((uint32x4_t)v88, v93);
            int32x4_t v82 = (int32x4_t)vaddw_u16((uint32x4_t)v82, *(uint16x4_t *)v93.i8);
            *(uint16x8_t *)v253.val[0].i8 = vmovl_u8((uint8x8_t)v253.val[3]);
            int32x4_t v85 = (int32x4_t)vaddw_high_u16((uint32x4_t)v85, *(uint16x8_t *)v253.val[0].i8);
            int32x4_t v81 = (int32x4_t)vaddw_u16((uint32x4_t)v81, (uint16x4_t)v253.val[0]);
            v87 += 8;
          }
          while (v87);
          unsigned int v32 = vaddvq_s32(vaddq_s32(v84, v90));
          unsigned int v31 = vaddvq_s32(vaddq_s32(v83, v89));
          unsigned int v30 = vaddvq_s32(vaddq_s32(v82, v88));
          unsigned int v29 = vaddvq_s32(vaddq_s32(v81, v85));
          if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_129;
          }
LABEL_131:
          a3->i32[0] = v32;
          a3->i32[1] = v31;
          a3->i32[2] = v30;
          a3->i32[3] = v29;
          if ((int)v27 >= 1)
          {
            unint64_t v154 = 0;
            int v155 = &a3[1].u32[3];
            uint64_t v156 = (uint64_t)&a2[(int)v26 + 1];
            do
            {
              unint64_t result = (unint64_t)&a2[v154];
              unsigned int v32 = v32 - a2[v154] + *(unsigned __int8 *)(v156 + v154 - 1);
              unsigned int v31 = v31 - a2[v154 + 1] + *(unsigned __int8 *)(v156 + v154);
              unsigned int v30 = v30 - a2[v154 + 2] + *(unsigned __int8 *)(v156 + v154 + 1);
              unsigned int v29 = v29 - a2[v154 + 3] + *(unsigned __int8 *)(v156 + v154 + 2);
              v154 += 4;
              *(v155 - 3) = v32;
              *(v155 - 2) = v31;
              *(v155 - 1) = v30;
              *int v155 = v29;
              v155 += 4;
            }
            while (v154 < v27);
          }
          return result;
        }
        if (a5 < 1) {
          return result;
        }
        int v74 = 0;
        float v75 = &a3->i32[a5];
        while ((int)v26 < 1)
        {
          int v77 = 0;
          a3->i32[0] = 0;
          if ((int)v27 >= 1) {
            goto LABEL_98;
          }
LABEL_91:
          ++v74;
          ++a2;
          a3 = (uint32x4_t *)((char *)a3 + 4);
          ++v75;
          if (v74 == a5) {
            return result;
          }
        }
        uint64_t v76 = 0;
        int v77 = 0;
        do
        {
          v77 += a2[v76];
          v76 += a5;
        }
        while (v76 < (int)v26);
        a3->i32[0] = v77;
        if ((int)v27 < 1) {
          goto LABEL_91;
        }
LABEL_98:
        unint64_t v78 = 0;
        do
        {
          int v77 = v77 - a2[v78] + a2[(int)v26 + v78];
          v75[v78] = v77;
          unint64_t result = v78 + a5;
          unint64_t v78 = result;
        }
        while ((uint64_t)result < (int)v27);
        goto LABEL_91;
      }
      if ((int)v26 < 1)
      {
        unsigned int v73 = 0;
        unsigned int v72 = 0;
        unsigned int v71 = 0;
        goto LABEL_158;
      }
      if (v26 < 0x16)
      {
        unint64_t v70 = 0;
        unsigned int v71 = 0;
        unsigned int v72 = 0;
        unsigned int v73 = 0;
        goto LABEL_157;
      }
      uint64_t v126 = ((int)v26 - 1) / 3u + 1;
      if (v26 >= 0x5E)
      {
        int32x4_t v185 = 0uLL;
        uint64_t v127 = v126 & 0x7FFFFFE0;
        int32x4_t v186 = 0uLL;
        int64x2_t v187 = (const char *)a2;
        int32x4_t v188 = 0uLL;
        uint64_t v189 = v127;
        int32x4_t v190 = 0uLL;
        int32x4_t v191 = 0uLL;
        int32x4_t v192 = 0uLL;
        int32x4_t v193 = 0uLL;
        int32x4_t v194 = 0uLL;
        int32x4_t v195 = 0uLL;
        int32x4_t v196 = 0uLL;
        int32x4_t v197 = 0uLL;
        int32x4_t v198 = 0uLL;
        int32x4_t v199 = 0uLL;
        int32x4_t v200 = 0uLL;
        int32x4_t v201 = 0uLL;
        int32x4_t v202 = 0uLL;
        int32x4_t v203 = 0uLL;
        int32x4_t v204 = 0uLL;
        int32x4_t v205 = 0uLL;
        int32x4_t v206 = 0uLL;
        int32x4_t v207 = 0uLL;
        int32x4_t v208 = 0uLL;
        int32x4_t v209 = 0uLL;
        int32x4_t v210 = 0uLL;
        do
        {
          uint32x4_t v244 = (uint32x4_t)v199;
          uint32x4_t v245 = (uint32x4_t)v198;
          uint32x4_t v246 = (uint32x4_t)v196;
          uint32x4_t v247 = (uint32x4_t)v197;
          uint32x4_t v248 = (uint32x4_t)v195;
          uint32x4_t v249 = (uint32x4_t)v194;
          v211 = v187;
          v187 += 96;
          int8x16x3_t v251 = vld3q_s8(v211);
          v211 += 48;
          uint16x8_t v212 = vmovl_u8(*(uint8x8_t *)v251.val[0].i8);
          int8x16x3_t v252 = vld3q_s8(v211);
          uint16x8_t v213 = vmovl_high_u8((uint8x16_t)v251.val[0]);
          uint16x8_t v214 = vmovl_u8(*(uint8x8_t *)v252.val[0].i8);
          uint16x8_t v215 = vmovl_high_u8((uint8x16_t)v252.val[0]);
          uint16x8_t v216 = vmovl_u8(*(uint8x8_t *)v251.val[1].i8);
          uint16x8_t v217 = vmovl_high_u8((uint8x16_t)v251.val[1]);
          int32x4_t v218 = v193;
          int32x4_t v219 = v190;
          int32x4_t v220 = v186;
          int32x4_t v221 = v188;
          int32x4_t v222 = v185;
          uint16x8_t v223 = vmovl_u8(*(uint8x8_t *)v252.val[1].i8);
          uint16x8_t v224 = vmovl_u8(*(uint8x8_t *)v251.val[2].i8);
          v251.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v251.val[2]);
          v251.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v252.val[1]);
          v251.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v252.val[2].i8);
          v252.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v252.val[2]);
          int32x4_t v206 = (int32x4_t)vaddw_high_u16((uint32x4_t)v206, v213);
          int32x4_t v205 = (int32x4_t)vaddw_u16((uint32x4_t)v205, *(uint16x4_t *)v213.i8);
          int32x4_t v204 = (int32x4_t)vaddw_high_u16((uint32x4_t)v204, v212);
          int32x4_t v203 = (int32x4_t)vaddw_u16((uint32x4_t)v203, *(uint16x4_t *)v212.i8);
          int32x4_t v210 = (int32x4_t)vaddw_high_u16((uint32x4_t)v210, v215);
          int32x4_t v209 = (int32x4_t)vaddw_u16((uint32x4_t)v209, *(uint16x4_t *)v215.i8);
          int32x4_t v208 = (int32x4_t)vaddw_high_u16((uint32x4_t)v208, v214);
          int32x4_t v207 = (int32x4_t)vaddw_u16((uint32x4_t)v207, *(uint16x4_t *)v214.i8);
          int32x4_t v198 = (int32x4_t)vaddw_high_u16(v245, v217);
          int32x4_t v197 = (int32x4_t)vaddw_u16(v247, *(uint16x4_t *)v217.i8);
          int32x4_t v196 = (int32x4_t)vaddw_high_u16(v246, v216);
          int32x4_t v195 = (int32x4_t)vaddw_u16(v248, *(uint16x4_t *)v216.i8);
          int32x4_t v202 = (int32x4_t)vaddw_high_u16((uint32x4_t)v202, (uint16x8_t)v251.val[1]);
          int32x4_t v201 = (int32x4_t)vaddw_u16((uint32x4_t)v201, *(uint16x4_t *)v251.val[1].i8);
          int32x4_t v200 = (int32x4_t)vaddw_high_u16((uint32x4_t)v200, v223);
          int32x4_t v199 = (int32x4_t)vaddw_u16(v244, *(uint16x4_t *)v223.i8);
          uint32x4_t v225 = (uint32x4_t)v222;
          uint32x4_t v226 = (uint32x4_t)v221;
          uint32x4_t v227 = (uint32x4_t)v220;
          uint32x4_t v228 = (uint32x4_t)v219;
          uint32x4_t v229 = (uint32x4_t)v218;
          int32x4_t v190 = (int32x4_t)vaddw_high_u16(v228, (uint16x8_t)v251.val[0]);
          int32x4_t v188 = (int32x4_t)vaddw_u16(v226, *(uint16x4_t *)v251.val[0].i8);
          int32x4_t v186 = (int32x4_t)vaddw_high_u16(v227, v224);
          int32x4_t v185 = (int32x4_t)vaddw_u16(v225, *(uint16x4_t *)v224.i8);
          int32x4_t v194 = (int32x4_t)vaddw_high_u16(v249, (uint16x8_t)v252.val[0]);
          int32x4_t v193 = (int32x4_t)vaddw_u16(v229, *(uint16x4_t *)v252.val[0].i8);
          int32x4_t v192 = (int32x4_t)vaddw_high_u16((uint32x4_t)v192, (uint16x8_t)v251.val[2]);
          int32x4_t v191 = (int32x4_t)vaddw_u16((uint32x4_t)v191, *(uint16x4_t *)v251.val[2].i8);
          v189 -= 32;
        }
        while (v189);
        unsigned int v73 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v207, v203), vaddq_s32(v209, v205)), vaddq_s32(vaddq_s32(v208, v204), vaddq_s32(v210, v206))));
        unsigned int v72 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v199, v195), vaddq_s32(v201, v197)), vaddq_s32(vaddq_s32(v200, v196), vaddq_s32(v202, v198))));
        unsigned int v71 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v191, v185), vaddq_s32(v193, v188)), vaddq_s32(vaddq_s32(v192, v186), vaddq_s32(v194, v190))));
        if (v127 == v126) {
          goto LABEL_158;
        }
        if ((((((int)v26 - 1) / 3u) + 1) & 0x18) == 0)
        {
          unint64_t v70 = 3 * v127;
          do
          {
LABEL_157:
            v73 += a2[v70];
            v72 += a2[v70 + 1];
            v71 += a2[v70 + 2];
            v70 += 3;
          }
          while (v70 < v26);
          goto LABEL_158;
        }
      }
      else
      {
        unsigned int v71 = 0;
        unsigned int v72 = 0;
        unsigned int v73 = 0;
        uint64_t v127 = 0;
      }
      unint64_t v70 = 3 * (v126 & 0x7FFFFFF8);
      int32x4_t v230 = (int32x4_t)v71;
      int32x4_t v231 = (int32x4_t)v72;
      int32x4_t v232 = (int32x4_t)v73;
      int32x4_t v233 = 0uLL;
      uint64_t v234 = v127 - (v126 & 0x7FFFFFF8);
      v235 = (const char *)&a2[3 * v127];
      int32x4_t v236 = 0uLL;
      int32x4_t v237 = 0uLL;
      do
      {
        int8x8x3_t v250 = vld3_s8(v235);
        v235 += 24;
        uint16x8_t v238 = vmovl_u8((uint8x8_t)v250.val[0]);
        int32x4_t v237 = (int32x4_t)vaddw_high_u16((uint32x4_t)v237, v238);
        int32x4_t v232 = (int32x4_t)vaddw_u16((uint32x4_t)v232, *(uint16x4_t *)v238.i8);
        uint16x8_t v239 = vmovl_u8((uint8x8_t)v250.val[1]);
        int32x4_t v236 = (int32x4_t)vaddw_high_u16((uint32x4_t)v236, v239);
        int32x4_t v231 = (int32x4_t)vaddw_u16((uint32x4_t)v231, *(uint16x4_t *)v239.i8);
        uint16x8_t v240 = vmovl_u8((uint8x8_t)v250.val[2]);
        int32x4_t v233 = (int32x4_t)vaddw_high_u16((uint32x4_t)v233, v240);
        int32x4_t v230 = (int32x4_t)vaddw_u16((uint32x4_t)v230, *(uint16x4_t *)v240.i8);
        v234 += 8;
      }
      while (v234);
      unsigned int v73 = vaddvq_s32(vaddq_s32(v232, v237));
      unsigned int v72 = vaddvq_s32(vaddq_s32(v231, v236));
      unsigned int v71 = vaddvq_s32(vaddq_s32(v230, v233));
      if ((v126 & 0x7FFFFFF8) != v126) {
        goto LABEL_157;
      }
LABEL_158:
      a3->i32[0] = v73;
      a3->i32[1] = v72;
      a3->i32[2] = v71;
      if ((int)v27 >= 1)
      {
        unint64_t v241 = 0;
        v242 = (unsigned int *)&a3[1];
        uint64_t v243 = (uint64_t)&a2[(int)v26 + 1];
        do
        {
          unsigned int v73 = v73 - a2[v241] + *(unsigned __int8 *)(v243 + v241 - 1);
          unint64_t result = a2[v241 + 1];
          unsigned int v72 = v72 - result + *(unsigned __int8 *)(v243 + v241);
          unsigned int v71 = v71 - a2[v241 + 2] + *(unsigned __int8 *)(v243 + v241 + 1);
          *(v242 - 1) = v73;
          unsigned int *v242 = v72;
          a3->i32[(v241 + 5)] = v71;
          v242 += 3;
          v241 += 3;
        }
        while (v241 < v27);
      }
      return result;
    }
    if ((int)v26 < 1)
    {
      unsigned int v69 = 0;
      goto LABEL_144;
    }
    if (v26 < 8)
    {
      uint64_t v68 = 0;
      unsigned int v69 = 0;
      goto LABEL_142;
    }
    if (v26 >= 0x20)
    {
      int32x4_t v157 = 0uLL;
      uint64_t v68 = v26 & 0xFFFFFFE0;
      int32x4_t v158 = 0uLL;
      int32x4_t v159 = (uint8x8_t *)(a2 + 16);
      uint64_t v160 = v68;
      int32x4_t v161 = 0uLL;
      int32x4_t v162 = 0uLL;
      int32x4_t v163 = 0uLL;
      int32x4_t v164 = 0uLL;
      int32x4_t v165 = 0uLL;
      int32x4_t v166 = 0uLL;
      do
      {
        uint8x16_t v167 = *(uint8x16_t *)v159[-2].i8;
        uint16x8_t v168 = vmovl_u8(*(uint8x8_t *)v167.i8);
        uint16x8_t v169 = vmovl_high_u8(v167);
        uint16x8_t v170 = vmovl_u8(*v159);
        uint16x8_t v171 = vmovl_high_u8(*(uint8x16_t *)v159->i8);
        int32x4_t v162 = (int32x4_t)vaddw_high_u16((uint32x4_t)v162, v169);
        int32x4_t v161 = (int32x4_t)vaddw_u16((uint32x4_t)v161, *(uint16x4_t *)v169.i8);
        int32x4_t v158 = (int32x4_t)vaddw_high_u16((uint32x4_t)v158, v168);
        int32x4_t v157 = (int32x4_t)vaddw_u16((uint32x4_t)v157, *(uint16x4_t *)v168.i8);
        int32x4_t v166 = (int32x4_t)vaddw_high_u16((uint32x4_t)v166, v171);
        int32x4_t v165 = (int32x4_t)vaddw_u16((uint32x4_t)v165, *(uint16x4_t *)v171.i8);
        int32x4_t v164 = (int32x4_t)vaddw_high_u16((uint32x4_t)v164, v170);
        int32x4_t v163 = (int32x4_t)vaddw_u16((uint32x4_t)v163, *(uint16x4_t *)v170.i8);
        v159 += 4;
        v160 -= 32;
      }
      while (v160);
      unsigned int v69 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v163, v157), vaddq_s32(v165, v161)), vaddq_s32(vaddq_s32(v164, v158), vaddq_s32(v166, v162))));
      if (v68 == v26) {
        goto LABEL_144;
      }
      if ((v26 & 0x18) == 0)
      {
LABEL_142:
        uint64_t v179 = &a2[v68];
        uint64_t v180 = v26 - v68;
        do
        {
          int v181 = *v179++;
          v69 += v181;
          --v180;
        }
        while (v180);
        goto LABEL_144;
      }
    }
    else
    {
      unsigned int v69 = 0;
      uint64_t v68 = 0;
    }
    uint64_t v172 = v68;
    uint64_t v68 = v26 & 0xFFFFFFF8;
    int32x4_t v173 = 0uLL;
    int32x4_t v174 = (int32x4_t)v69;
    int32x4_t v175 = (uint8x8_t *)&a2[v172];
    uint64_t v176 = v172 - v68;
    do
    {
      uint8x8_t v177 = *v175++;
      uint16x8_t v178 = vmovl_u8(v177);
      int32x4_t v173 = (int32x4_t)vaddw_high_u16((uint32x4_t)v173, v178);
      int32x4_t v174 = (int32x4_t)vaddw_u16((uint32x4_t)v174, *(uint16x4_t *)v178.i8);
      v176 += 8;
    }
    while (v176);
    unsigned int v69 = vaddvq_s32(vaddq_s32(v174, v173));
    if (v68 != v26) {
      goto LABEL_142;
    }
LABEL_144:
    a3->i32[0] = v69;
    if ((int)v27 >= 1)
    {
      uint64_t v182 = &a3->u32[1];
      do
      {
        int v183 = a2[(int)v26];
        int v184 = *a2++;
        unsigned int v69 = v69 - v184 + v183;
        *v182++ = v69;
        --v27;
      }
      while (v27);
    }
    return result;
  }
  uint64_t v6 = (a5 * a4);
  if ((int)v6 < 1) {
    return result;
  }
  uint64_t v7 = a5;
  uint64_t v8 = 2 * a5;
  uint64_t v9 = 3 * a5;
  uint64_t v10 = 4 * a5;
  if (v6 < 8)
  {
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = 0;
  unint64_t result = (unint64_t)a3 + 4 * v6;
  BOOL v34 = &a2[v9 + v6] > (unsigned __int8 *)a3 && (unint64_t)&a2[v9] < result;
  BOOL v36 = &a2[v8 + v6] > (unsigned __int8 *)a3 && (unint64_t)&a2[v8] < result;
  BOOL v38 = &a2[a5 + v6] > (unsigned __int8 *)a3 && (unint64_t)&a2[a5] < result;
  BOOL v40 = &a2[v6] > (unsigned __int8 *)a3 && result > (unint64_t)a2;
  BOOL v41 = (unint64_t)&a2[v10] < result && &a2[v10 + v6] > (unsigned __int8 *)a3;
  if (v41 || v34 || v36 || v38 || v40) {
    goto LABEL_6;
  }
  if (v6 >= 0x10)
  {
    uint64_t v11 = v6 & 0x7FFFFFF0;
    uint64_t v94 = v6 & 0xFFFFFFF0;
    uint64_t v95 = a3;
    int32x4_t v96 = (uint8x16_t *)a2;
    do
    {
      uint8x16_t v97 = *(uint8x16_t *)((char *)v96 + a5);
      uint16x8_t v98 = vaddl_high_u8(v97, *v96);
      uint8x16_t v99 = *(uint8x16_t *)((char *)v96 + 2 * a5);
      uint16x8_t v100 = vaddl_u8(*(uint8x8_t *)v97.i8, *(uint8x8_t *)v96->i8);
      uint16x8_t v101 = vmovl_high_u8(v99);
      uint16x8_t v102 = vmovl_u8(*(uint8x8_t *)v99.i8);
      uint32x4_t v103 = vaddl_u16(*(uint16x4_t *)v100.i8, *(uint16x4_t *)v102.i8);
      uint32x4_t v104 = vaddl_high_u16(v100, v102);
      uint32x4_t v105 = vaddl_u16(*(uint16x4_t *)v98.i8, *(uint16x4_t *)v101.i8);
      uint32x4_t v106 = vaddl_high_u16(v98, v101);
      uint8x16_t v107 = *(uint8x16_t *)((char *)v96 + 3 * a5);
      uint16x8_t v108 = vmovl_u8(*(uint8x8_t *)v107.i8);
      uint16x8_t v109 = vmovl_high_u8(v107);
      uint32x4_t v110 = vaddw_high_u16(v106, v109);
      uint32x4_t v111 = vaddw_u16(v105, *(uint16x4_t *)v109.i8);
      uint32x4_t v112 = vaddw_high_u16(v104, v108);
      uint32x4_t v113 = vaddw_u16(v103, *(uint16x4_t *)v108.i8);
      uint8x16_t v114 = *(uint8x16_t *)((char *)v96 + 4 * a5);
      uint16x8_t v115 = vmovl_high_u8(v114);
      uint16x8_t v116 = vmovl_u8(*(uint8x8_t *)v114.i8);
      v95[2] = vaddw_u16(v111, *(uint16x4_t *)v115.i8);
      v95[3] = vaddw_high_u16(v110, v115);
      *uint64_t v95 = vaddw_u16(v113, *(uint16x4_t *)v116.i8);
      v95[1] = vaddw_high_u16(v112, v116);
      v95 += 4;
      ++v96;
      v94 -= 16;
    }
    while (v94);
    if (v11 == v6) {
      return result;
    }
    if ((((_BYTE)a5 * (_BYTE)a4) & 8) == 0)
    {
LABEL_6:
      uint64_t v12 = 0;
      int v13 = &a2[v11];
      int v14 = &a2[v11 + v10];
      uint64_t v15 = &a2[v11 + v9];
      long long v16 = &a2[v11 + v8];
      uint64_t v17 = &a2[v11 + v7];
      uint64_t v18 = v6 - v11;
      float v19 = &a3->i32[v11];
      do
      {
        unint64_t result = v14[v12];
        v19[v12] = v17[v12] + v13[v12] + v16[v12] + v15[v12] + result;
        ++v12;
      }
      while (v18 != v12);
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v42 = &a2[a5];
  uint64_t v43 = &a2[v8];
  uint64_t v44 = &a2[v9];
  unint64_t result = (unint64_t)&a2[v10];
  uint64_t v45 = v6 & 0xFFFFFFF8;
  uint64_t v46 = a2;
  uint64_t v47 = (uint32x4_t *)((char *)a3 + 4 * v11);
  do
  {
    uint16x8_t v48 = vaddl_u8(*(uint8x8_t *)&v42[v11], *(uint8x8_t *)&v46[v11]);
    uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)&v43[v11]);
    uint32x4_t v50 = vaddl_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v49.i8);
    uint32x4_t v51 = vaddl_high_u16(v48, v49);
    uint16x8_t v52 = vmovl_u8(*(uint8x8_t *)&v44[v11]);
    uint32x4_t v53 = vaddw_high_u16(v51, v52);
    uint32x4_t v54 = vaddw_u16(v50, *(uint16x4_t *)v52.i8);
    uint16x8_t v55 = vmovl_u8(*(uint8x8_t *)(result + v11));
    *uint64_t v47 = vaddw_u16(v54, *(uint16x4_t *)v55.i8);
    v47[1] = vaddw_high_u16(v53, v55);
    v47 += 2;
    v46 += 8;
    v42 += 8;
    v43 += 8;
    v44 += 8;
    result += 8;
    v45 -= 8;
  }
  while (v11 != v45);
  uint64_t v11 = v6 & 0x7FFFFFF8;
  if (v11 != v6) {
    goto LABEL_6;
  }
  return result;
}

void sub_10038C2B0()
{
}

uint64_t sub_10038C2C4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_10038C348(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unint64_t sub_10038C380(unint64_t result, uint8x16_t *a2, uint16x8_t *a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    uint64_t v20 = (a5 * a4);
    if ((int)v20 < 1) {
      return result;
    }
    uint64_t v21 = 2 * a5;
    if (v20 < 8)
    {
      uint64_t v22 = 0;
      goto LABEL_12;
    }
    uint64_t v22 = 0;
    unint64_t v48 = (unint64_t)a3 + 2 * v20;
    BOOL v50 = &a2->i8[a5 + v20] > (__int8 *)a3 && (unint64_t)a2->u64 + a5 < v48;
    BOOL v52 = &a2->i8[v20] > (__int8 *)a3 && v48 > (unint64_t)a2;
    BOOL v53 = (unint64_t)a2->u64 + v21 < v48 && &a2->i8[v21 + v20] > (__int8 *)a3;
    if (v53 || v50 || v52) {
      goto LABEL_12;
    }
    if (v20 >= 0x20)
    {
      uint64_t v22 = v20 & 0x7FFFFFE0;
      unint64_t v78 = a2 + 1;
      unint64_t v79 = a3 + 2;
      uint64_t v80 = v20 & 0xFFFFFFE0;
      do
      {
        uint8x16_t v81 = v78[-1];
        uint8x16_t v82 = *(uint8x16_t *)((char *)&v78[-1] + a5);
        uint8x16_t v83 = *(uint8x16_t *)((char *)v78 + a5);
        uint16x8_t v84 = vaddl_high_u8(v82, v81);
        uint16x8_t v85 = vaddl_u8(*(uint8x8_t *)v82.i8, *(uint8x8_t *)v81.i8);
        uint16x8_t v86 = vaddl_high_u8(v83, *v78);
        uint16x8_t v87 = vaddl_u8(*(uint8x8_t *)v83.i8, *(uint8x8_t *)v78->i8);
        uint8x16_t v88 = *(uint8x16_t *)((char *)&v78[-1] + v21);
        uint8x16_t v89 = *(uint8x16_t *)((char *)v78 + 2 * a5);
        v79[-2] = vaddw_u8(v85, *(uint8x8_t *)v88.i8);
        v79[-1] = vaddw_high_u8(v84, v88);
        uint16x8_t *v79 = vaddw_u8(v87, *(uint8x8_t *)v89.i8);
        v79[1] = vaddw_high_u8(v86, v89);
        v79 += 4;
        v78 += 2;
        v80 -= 32;
      }
      while (v80);
      if (v22 == v20) {
        return result;
      }
      if ((((_BYTE)a5 * (_BYTE)a4) & 0x18) == 0)
      {
LABEL_12:
        uint64_t v23 = &a2->u8[v22];
        uint64_t v24 = &a3->i16[v22];
        uint64_t v25 = v20 - v22;
        do
        {
          *v24++ = v23[a5] + *v23 + v23[2 * a5];
          ++v23;
          --v25;
        }
        while (v25);
        return result;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v90 = v22;
    uint64_t v22 = v20 & 0xFFFFFFF8;
    uint16x8_t v91 = (uint8x8_t *)&a2->i8[v90];
    uint16x8_t v92 = (uint16x8_t *)((char *)a3 + 2 * v90);
    uint64_t v93 = v90 - v22;
    do
    {
      *v92++ = vaddw_u8(vaddl_u8(*(uint8x8_t *)((char *)v91 + a5), *v91), *(uint8x8_t *)((char *)v91 + 2 * a5));
      ++v91;
      v93 += 8;
    }
    while (v93);
    if (v22 == v20) {
      return result;
    }
    goto LABEL_12;
  }
  if (v5 != 5)
  {
    unint64_t v26 = (v5 * a5);
    unint64_t v27 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v26 < 1)
          {
            __int32 v32 = 0;
            __int32 v31 = 0;
            __int32 v30 = 0;
            __int32 v29 = 0;
            goto LABEL_157;
          }
          if (v26 < 0x1D)
          {
            unint64_t v28 = 0;
            __int32 v29 = 0;
            __int32 v30 = 0;
            __int32 v31 = 0;
            __int32 v32 = 0;
            goto LABEL_155;
          }
          unint64_t v65 = ((v26 - 1) >> 2) + 1;
          if (v26 >= 0x7D)
          {
            int16x8_t v96 = 0uLL;
            uint64_t v66 = v65 & 0x7FFFFFFFFFFFFFE0;
            int16x8_t v97 = 0uLL;
            i8 = a2[4].i8;
            int16x8_t v99 = 0uLL;
            uint64_t v100 = v65 & 0x7FFFFFFFFFFFFFE0;
            int16x8_t v101 = 0uLL;
            int16x8_t v102 = 0uLL;
            int16x8_t v103 = 0uLL;
            int16x8_t v104 = 0uLL;
            int16x8_t v105 = 0uLL;
            int16x8_t v106 = 0uLL;
            int16x8_t v107 = 0uLL;
            int16x8_t v108 = 0uLL;
            int16x8_t v109 = 0uLL;
            int16x8_t v110 = 0uLL;
            int16x8_t v111 = 0uLL;
            int16x8_t v112 = 0uLL;
            int16x8_t v113 = 0uLL;
            do
            {
              uint8x16_t v114 = i8 - 64;
              int8x16x4_t v178 = vld4q_s8(v114);
              int8x16x4_t v179 = vld4q_s8(i8);
              int16x8_t v111 = (int16x8_t)vaddw_high_u8((uint16x8_t)v111, (uint8x16_t)v178.val[0]);
              int16x8_t v110 = (int16x8_t)vaddw_u8((uint16x8_t)v110, *(uint8x8_t *)v178.val[0].i8);
              int16x8_t v113 = (int16x8_t)vaddw_high_u8((uint16x8_t)v113, (uint8x16_t)v179.val[0]);
              int16x8_t v112 = (int16x8_t)vaddw_u8((uint16x8_t)v112, *(uint8x8_t *)v179.val[0].i8);
              int16x8_t v107 = (int16x8_t)vaddw_high_u8((uint16x8_t)v107, (uint8x16_t)v178.val[1]);
              int16x8_t v106 = (int16x8_t)vaddw_u8((uint16x8_t)v106, *(uint8x8_t *)v178.val[1].i8);
              int16x8_t v109 = (int16x8_t)vaddw_high_u8((uint16x8_t)v109, (uint8x16_t)v179.val[1]);
              int16x8_t v108 = (int16x8_t)vaddw_u8((uint16x8_t)v108, *(uint8x8_t *)v179.val[1].i8);
              int16x8_t v103 = (int16x8_t)vaddw_high_u8((uint16x8_t)v103, (uint8x16_t)v178.val[2]);
              int16x8_t v102 = (int16x8_t)vaddw_u8((uint16x8_t)v102, *(uint8x8_t *)v178.val[2].i8);
              int16x8_t v105 = (int16x8_t)vaddw_high_u8((uint16x8_t)v105, (uint8x16_t)v179.val[2]);
              int16x8_t v104 = (int16x8_t)vaddw_u8((uint16x8_t)v104, *(uint8x8_t *)v179.val[2].i8);
              int16x8_t v97 = (int16x8_t)vaddw_high_u8((uint16x8_t)v97, (uint8x16_t)v178.val[3]);
              int16x8_t v96 = (int16x8_t)vaddw_u8((uint16x8_t)v96, *(uint8x8_t *)v178.val[3].i8);
              int16x8_t v101 = (int16x8_t)vaddw_high_u8((uint16x8_t)v101, (uint8x16_t)v179.val[3]);
              int16x8_t v99 = (int16x8_t)vaddw_u8((uint16x8_t)v99, *(uint8x8_t *)v179.val[3].i8);
              i8 += 128;
              v100 -= 32;
            }
            while (v100);
            int16x8_t v115 = vaddq_s16(vaddq_s16(v112, v110), vaddq_s16(v113, v111));
            v115.i16[0] = vaddvq_s16(v115);
            __int32 v32 = v115.i32[0];
            int16x8_t v116 = vaddq_s16(vaddq_s16(v108, v106), vaddq_s16(v109, v107));
            v116.i16[0] = vaddvq_s16(v116);
            __int32 v31 = v116.i32[0];
            int16x8_t v117 = vaddq_s16(vaddq_s16(v104, v102), vaddq_s16(v105, v103));
            v117.i16[0] = vaddvq_s16(v117);
            __int32 v30 = v117.i32[0];
            int16x8_t v118 = vaddq_s16(vaddq_s16(v99, v96), vaddq_s16(v101, v97));
            v118.i16[0] = vaddvq_s16(v118);
            __int32 v29 = v118.i32[0];
            if (v65 == v66) {
              goto LABEL_157;
            }
            if ((v65 & 0x18) == 0)
            {
              unint64_t v28 = 4 * v66;
LABEL_155:
              uint16x8_t v170 = &a2->u8[3];
              do
              {
                v32 += a2->u8[v28];
                v31 += v170[v28 - 2];
                v30 += v170[v28 - 1];
                v29 += v170[v28];
                v28 += 4;
              }
              while (v28 < v26);
              goto LABEL_157;
            }
          }
          else
          {
            LOWORD(v29) = 0;
            LOWORD(v30) = 0;
            LOWORD(v31) = 0;
            LOWORD(v32) = 0;
            uint64_t v66 = 0;
          }
          unint64_t v28 = 4 * (v65 & 0x7FFFFFFFFFFFFFF8);
          int16x8_t v119 = (int16x8_t)(unsigned __int16)v29;
          int16x8_t v120 = (int16x8_t)(unsigned __int16)v30;
          int16x8_t v121 = (int16x8_t)(unsigned __int16)v31;
          int16x8_t v122 = (int16x8_t)(unsigned __int16)v32;
          uint8x16_t v123 = &a2->i8[4 * v66];
          unint64_t v124 = v66 - (v65 & 0x7FFFFFFFFFFFFFF8);
          do
          {
            int8x8x4_t v177 = vld4_s8(v123);
            v123 += 32;
            int16x8_t v122 = (int16x8_t)vaddw_u8((uint16x8_t)v122, (uint8x8_t)v177.val[0]);
            int16x8_t v121 = (int16x8_t)vaddw_u8((uint16x8_t)v121, (uint8x8_t)v177.val[1]);
            int16x8_t v120 = (int16x8_t)vaddw_u8((uint16x8_t)v120, (uint8x8_t)v177.val[2]);
            int16x8_t v119 = (int16x8_t)vaddw_u8((uint16x8_t)v119, (uint8x8_t)v177.val[3]);
            v124 += 8;
          }
          while (v124);
          v122.i16[0] = vaddvq_s16(v122);
          __int32 v32 = v122.i32[0];
          v122.i16[0] = vaddvq_s16(v121);
          __int32 v31 = v122.i32[0];
          v120.i16[0] = vaddvq_s16(v120);
          __int32 v30 = v120.i32[0];
          v119.i16[0] = vaddvq_s16(v119);
          __int32 v29 = v119.i32[0];
          if (v65 != (v65 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_155;
          }
LABEL_157:
          a3->i16[0] = v32;
          a3->i16[1] = v31;
          a3->i16[2] = v30;
          a3->i16[3] = v29;
          if ((int)v27 >= 1)
          {
            unint64_t v171 = 0;
            uint64_t v172 = &a3->i16[7];
            uint64_t v173 = (uint64_t)a2->i64 + (int)v26 + 1;
            do
            {
              unint64_t result = (unint64_t)a2->u64 + v171;
              v32 += *(unsigned __int8 *)(v173 + v171 - 1) - a2->u8[v171];
              v31 += *(unsigned __int8 *)(v173 + v171) - a2->u8[v171 + 1];
              v30 += *(unsigned __int8 *)(v173 + v171 + 1) - a2->u8[v171 + 2];
              v29 += *(unsigned __int8 *)(v173 + v171 + 2) - a2->u8[v171 + 3];
              v171 += 4;
              *(v172 - 3) = v32;
              *(v172 - 2) = v31;
              *(v172 - 1) = v30;
              __int16 *v172 = v29;
              v172 += 4;
            }
            while (v171 < v27);
          }
          return result;
        }
        if (a5 < 1) {
          return result;
        }
        int v60 = 0;
        BOOL v61 = &a3->i16[a5];
        while ((int)v26 < 1)
        {
          int v63 = 0;
          a3->i16[0] = 0;
          if ((int)v27 >= 1) {
            goto LABEL_94;
          }
LABEL_87:
          ++v60;
          a2 = (uint8x16_t *)((char *)a2 + 1);
          a3 = (uint16x8_t *)((char *)a3 + 2);
          ++v61;
          if (v60 == a5) {
            return result;
          }
        }
        uint64_t v62 = 0;
        int v63 = 0;
        do
        {
          v63 += a2->u8[v62];
          v62 += a5;
        }
        while (v62 < (int)v26);
        a3->i16[0] = v63;
        if ((int)v27 < 1) {
          goto LABEL_87;
        }
LABEL_94:
        unint64_t v64 = 0;
        do
        {
          v63 += a2->u8[(int)v26 + v64] - a2->u8[v64];
          v61[v64] = v63;
          unint64_t result = v64 + a5;
          unint64_t v64 = result;
        }
        while ((uint64_t)result < (int)v27);
        goto LABEL_87;
      }
      if ((int)v26 < 1)
      {
        __int32 v59 = 0;
        __int32 v58 = 0;
        __int32 v57 = 0;
        goto LABEL_150;
      }
      if (v26 < 0x16)
      {
        unint64_t v56 = 0;
        __int32 v57 = 0;
        __int32 v58 = 0;
        __int32 v59 = 0;
        goto LABEL_149;
      }
      uint64_t v94 = ((int)v26 - 1) / 3u + 1;
      if (v26 >= 0x5E)
      {
        int16x8_t v144 = 0uLL;
        uint64_t v95 = v94 & 0x7FFFFFE0;
        int16x8_t v145 = 0uLL;
        uint16x8_t v146 = (const char *)a2;
        int16x8_t v147 = 0uLL;
        uint64_t v148 = v95;
        int16x8_t v149 = 0uLL;
        int16x8_t v150 = 0uLL;
        int16x8_t v151 = 0uLL;
        int16x8_t v152 = 0uLL;
        int16x8_t v153 = 0uLL;
        int16x8_t v154 = 0uLL;
        int16x8_t v155 = 0uLL;
        int16x8_t v156 = 0uLL;
        int16x8_t v157 = 0uLL;
        do
        {
          int32x4_t v158 = v146;
          v146 += 96;
          int8x16x3_t v175 = vld3q_s8(v158);
          v158 += 48;
          int16x8_t v155 = (int16x8_t)vaddw_high_u8((uint16x8_t)v155, (uint8x16_t)v175.val[0]);
          int8x16x3_t v176 = vld3q_s8(v158);
          int16x8_t v154 = (int16x8_t)vaddw_u8((uint16x8_t)v154, *(uint8x8_t *)v175.val[0].i8);
          int16x8_t v157 = (int16x8_t)vaddw_high_u8((uint16x8_t)v157, (uint8x16_t)v176.val[0]);
          int16x8_t v156 = (int16x8_t)vaddw_u8((uint16x8_t)v156, *(uint8x8_t *)v176.val[0].i8);
          int16x8_t v151 = (int16x8_t)vaddw_high_u8((uint16x8_t)v151, (uint8x16_t)v175.val[1]);
          int16x8_t v150 = (int16x8_t)vaddw_u8((uint16x8_t)v150, *(uint8x8_t *)v175.val[1].i8);
          int16x8_t v153 = (int16x8_t)vaddw_high_u8((uint16x8_t)v153, (uint8x16_t)v176.val[1]);
          int16x8_t v152 = (int16x8_t)vaddw_u8((uint16x8_t)v152, *(uint8x8_t *)v176.val[1].i8);
          int16x8_t v145 = (int16x8_t)vaddw_high_u8((uint16x8_t)v145, (uint8x16_t)v175.val[2]);
          int16x8_t v144 = (int16x8_t)vaddw_u8((uint16x8_t)v144, *(uint8x8_t *)v175.val[2].i8);
          int16x8_t v149 = (int16x8_t)vaddw_high_u8((uint16x8_t)v149, (uint8x16_t)v176.val[2]);
          int16x8_t v147 = (int16x8_t)vaddw_u8((uint16x8_t)v147, *(uint8x8_t *)v176.val[2].i8);
          v148 -= 32;
        }
        while (v148);
        int16x8_t v159 = vaddq_s16(vaddq_s16(v156, v154), vaddq_s16(v157, v155));
        v159.i16[0] = vaddvq_s16(v159);
        __int32 v59 = v159.i32[0];
        int16x8_t v160 = vaddq_s16(vaddq_s16(v152, v150), vaddq_s16(v153, v151));
        v160.i16[0] = vaddvq_s16(v160);
        __int32 v58 = v160.i32[0];
        int16x8_t v161 = vaddq_s16(vaddq_s16(v147, v144), vaddq_s16(v149, v145));
        v161.i16[0] = vaddvq_s16(v161);
        __int32 v57 = v161.i32[0];
        if (v95 == v94) {
          goto LABEL_150;
        }
        if ((((((int)v26 - 1) / 3u) + 1) & 0x18) == 0)
        {
          unint64_t v56 = 3 * v95;
          do
          {
LABEL_149:
            v59 += a2->u8[v56];
            v58 += a2->u8[v56 + 1];
            v57 += a2->u8[v56 + 2];
            v56 += 3;
          }
          while (v56 < v26);
          goto LABEL_150;
        }
      }
      else
      {
        LOWORD(v57) = 0;
        LOWORD(v58) = 0;
        LOWORD(v59) = 0;
        uint64_t v95 = 0;
      }
      unint64_t v56 = 3 * (v94 & 0x7FFFFFF8);
      int16x8_t v162 = (int16x8_t)(unsigned __int16)v57;
      int16x8_t v163 = (int16x8_t)(unsigned __int16)v58;
      int16x8_t v164 = (int16x8_t)(unsigned __int16)v59;
      uint64_t v165 = v95 - (v94 & 0x7FFFFFF8);
      int32x4_t v166 = &a2->i8[3 * v95];
      do
      {
        int8x8x3_t v174 = vld3_s8(v166);
        v166 += 24;
        int16x8_t v164 = (int16x8_t)vaddw_u8((uint16x8_t)v164, (uint8x8_t)v174.val[0]);
        int16x8_t v163 = (int16x8_t)vaddw_u8((uint16x8_t)v163, (uint8x8_t)v174.val[1]);
        int16x8_t v162 = (int16x8_t)vaddw_u8((uint16x8_t)v162, (uint8x8_t)v174.val[2]);
        v165 += 8;
      }
      while (v165);
      v164.i16[0] = vaddvq_s16(v164);
      __int32 v59 = v164.i32[0];
      v163.i16[0] = vaddvq_s16(v163);
      __int32 v58 = v163.i32[0];
      v162.i16[0] = vaddvq_s16(v162);
      __int32 v57 = v162.i32[0];
      if ((v94 & 0x7FFFFFF8) != v94) {
        goto LABEL_149;
      }
LABEL_150:
      a3->i16[0] = v59;
      a3->i16[1] = v58;
      a3->i16[2] = v57;
      if ((int)v27 >= 1)
      {
        unint64_t v167 = 0;
        uint16x8_t v168 = &a3->i16[4];
        uint64_t v169 = (uint64_t)a2->i64 + (int)v26 + 1;
        do
        {
          v59 += *(unsigned __int8 *)(v169 + v167 - 1) - a2->u8[v167];
          unint64_t result = a2->u8[v167 + 1];
          v58 += *(unsigned __int8 *)(v169 + v167) - result;
          v57 += *(unsigned __int8 *)(v169 + v167 + 1) - a2->u8[v167 + 2];
          *(v168 - 1) = v59;
          __int16 *v168 = v58;
          v168 += 3;
          a3->i16[(v167 + 5)] = v57;
          v167 += 3;
        }
        while (v167 < v27);
      }
      return result;
    }
    if ((int)v26 < 1)
    {
      __int32 v55 = 0;
      goto LABEL_136;
    }
    if (v26 < 8)
    {
      unint64_t v54 = 0;
      __int32 v55 = 0;
      goto LABEL_134;
    }
    if (v26 >= 0x20)
    {
      unint64_t v54 = v26 & 0x7FFFFFE0;
      uint16x8_t v125 = a2 + 1;
      int16x8_t v126 = 0uLL;
      uint64_t v127 = v26 & 0xFFFFFFE0;
      int16x8_t v128 = 0uLL;
      int16x8_t v129 = 0uLL;
      int16x8_t v130 = 0uLL;
      do
      {
        uint8x16_t v131 = v125[-1];
        int16x8_t v128 = (int16x8_t)vaddw_high_u8((uint16x8_t)v128, v131);
        int16x8_t v126 = (int16x8_t)vaddw_u8((uint16x8_t)v126, *(uint8x8_t *)v131.i8);
        int16x8_t v130 = (int16x8_t)vaddw_high_u8((uint16x8_t)v130, *v125);
        int16x8_t v129 = (int16x8_t)vaddw_u8((uint16x8_t)v129, *(uint8x8_t *)v125->i8);
        v125 += 2;
        v127 -= 32;
      }
      while (v127);
      int16x8_t v132 = vaddq_s16(vaddq_s16(v129, v126), vaddq_s16(v130, v128));
      v132.i16[0] = vaddvq_s16(v132);
      __int32 v55 = v132.i32[0];
      if (v54 == v26) {
        goto LABEL_136;
      }
      if ((v26 & 0x18) == 0)
      {
LABEL_134:
        int32x4_t v138 = &a2->u8[v54];
        unint64_t v139 = v26 - v54;
        do
        {
          int v140 = *v138++;
          v55 += v140;
          --v139;
        }
        while (v139);
        goto LABEL_136;
      }
    }
    else
    {
      LOWORD(v55) = 0;
      unint64_t v54 = 0;
    }
    unint64_t v133 = v54;
    unint64_t v54 = v26 & 0xFFFFFFF8;
    int16x8_t v134 = (int16x8_t)(unsigned __int16)v55;
    int32x4_t v135 = (uint8x8_t *)&a2->i8[v133];
    unint64_t v136 = v133 - v54;
    do
    {
      uint8x8_t v137 = *v135++;
      int16x8_t v134 = (int16x8_t)vaddw_u8((uint16x8_t)v134, v137);
      v136 += 8;
    }
    while (v136);
    v134.i16[0] = vaddvq_s16(v134);
    __int32 v55 = v134.i32[0];
    if (v54 != v26) {
      goto LABEL_134;
    }
LABEL_136:
    a3->i16[0] = v55;
    if ((int)v27 >= 1)
    {
      int32x4_t v141 = &a3->i16[1];
      do
      {
        int v142 = a2->u8[(int)v26];
        int v143 = a2->u8[0];
        a2 = (uint8x16_t *)((char *)a2 + 1);
        v55 += v142 - v143;
        *v141++ = v55;
        --v27;
      }
      while (v27);
    }
    return result;
  }
  uint64_t v6 = (a5 * a4);
  if ((int)v6 < 1) {
    return result;
  }
  uint64_t v7 = a5;
  uint64_t v8 = 2 * a5;
  uint64_t v9 = 3 * a5;
  uint64_t v10 = 4 * a5;
  if (v6 < 8)
  {
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = 0;
  unint64_t result = (unint64_t)a3 + 2 * v6;
  BOOL v34 = &a2->i8[v9 + v6] > (__int8 *)a3 && (unint64_t)a2->u64 + v9 < result;
  BOOL v36 = &a2->i8[v8 + v6] > (__int8 *)a3 && (unint64_t)a2->u64 + v8 < result;
  BOOL v38 = &a2->i8[a5 + v6] > (__int8 *)a3 && (unint64_t)a2->u64 + a5 < result;
  BOOL v40 = &a2->i8[v6] > (__int8 *)a3 && result > (unint64_t)a2;
  BOOL v41 = (unint64_t)a2->u64 + v10 < result && &a2->i8[v10 + v6] > (__int8 *)a3;
  if (v41 || v34 || v36 || v38 || v40) {
    goto LABEL_6;
  }
  if (v6 >= 0x10)
  {
    uint64_t v11 = v6 & 0x7FFFFFF0;
    uint64_t v67 = v6 & 0xFFFFFFF0;
    uint64_t v68 = a3;
    unsigned int v69 = a2;
    do
    {
      uint8x16_t v70 = *(uint8x16_t *)((char *)v69 + a5);
      uint16x8_t v71 = vaddl_high_u8(v70, *v69);
      uint16x8_t v72 = vaddl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v69->i8);
      uint8x16_t v73 = *(uint8x16_t *)((char *)v69 + 2 * a5);
      uint16x8_t v74 = vaddw_u8(v72, *(uint8x8_t *)v73.i8);
      uint8x16_t v75 = *(uint8x16_t *)((char *)v69 + 3 * a5);
      uint16x8_t v76 = vaddw_high_u8(vaddw_high_u8(v71, v73), v75);
      uint8x16_t v77 = *(uint8x16_t *)((char *)v69 + 4 * a5);
      *uint64_t v68 = vaddw_u8(vaddw_u8(v74, *(uint8x8_t *)v75.i8), *(uint8x8_t *)v77.i8);
      v68[1] = vaddw_high_u8(v76, v77);
      v68 += 2;
      ++v69;
      v67 -= 16;
    }
    while (v67);
    if (v11 == v6) {
      return result;
    }
    if ((((_BYTE)a5 * (_BYTE)a4) & 8) == 0)
    {
LABEL_6:
      uint64_t v12 = 0;
      int v13 = &a2->u8[v11];
      int v14 = &a2->u8[v11 + v10];
      uint64_t v15 = &a2->u8[v11 + v9];
      long long v16 = &a2->u8[v11 + v8];
      uint64_t v17 = &a2->u8[v11 + v7];
      uint64_t v18 = v6 - v11;
      float v19 = &a3->i16[v11];
      do
      {
        unint64_t result = v14[v12];
        v19[v12] = v17[v12] + v13[v12] + v16[v12] + v15[v12] + result;
        ++v12;
      }
      while (v18 != v12);
      return result;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v42 = &a2->u8[a5];
  uint64_t v43 = &a2->u8[v8];
  uint64_t v44 = &a2->u8[v9];
  unint64_t result = (unint64_t)a2->u64 + v10;
  uint64_t v45 = v6 & 0xFFFFFFF8;
  uint64_t v46 = a2;
  uint64_t v47 = (uint16x8_t *)((char *)a3 + 2 * v11);
  do
  {
    *v47++ = vaddw_u8(vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)&v42[v11], *(uint8x8_t *)&v46->i8[v11]), *(uint8x8_t *)&v43[v11]), *(uint8x8_t *)&v44[v11]), *(uint8x8_t *)(result + v11));
    uint64_t v46 = (uint8x16_t *)((char *)v46 + 8);
    v42 += 8;
    v43 += 8;
    v44 += 8;
    result += 8;
    v45 -= 8;
  }
  while (v11 != v45);
  uint64_t v11 = v6 & 0x7FFFFFF8;
  if (v11 != v6) {
    goto LABEL_6;
  }
  return result;
}

void sub_10038CDC8()
{
}

uint64_t sub_10038CDDC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_10038CE60(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unint64_t sub_10038CE98(unint64_t result, int8x16_t *a2, double *a3, int a4, int a5, __n128 a6, float64x2_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  int v14 = *(_DWORD *)(result + 8);
  if (v14 == 3)
  {
    uint64_t v21 = (a5 * a4);
    if ((int)v21 < 1) {
      return result;
    }
    uint64_t v22 = 2 * a5;
    if (v21 < 8)
    {
      uint64_t v23 = 0;
      goto LABEL_112;
    }
    uint64_t v23 = 0;
    unint64_t v43 = (unint64_t)&a3[v21];
    BOOL v45 = &a2->i8[a5 + v21] > (__int8 *)a3 && (unint64_t)a2->u64 + a5 < v43;
    BOOL v47 = &a2->i8[v21] > (__int8 *)a3 && v43 > (unint64_t)a2;
    BOOL v48 = (unint64_t)a2->u64 + v22 < v43 && &a2->i8[v22 + v21] > (__int8 *)a3;
    if (v48 || v45 || v47) {
      goto LABEL_112;
    }
    if (v21 >= 0x10)
    {
      uint64_t v23 = v21 & 0x7FFFFFF0;
      a6.n128_u64[0] = 0xFF000000FFLL;
      uint64_t v280 = v21 & 0xFFFFFFF0;
      v281 = a3;
      v282 = a2;
      do
      {
        v283.i32[0] = v282->u8[0];
        v284.i32[0] = BYTE2(v282->u32[0]);
        v283.i32[1] = HIBYTE(v282->u16[0]);
        v285.i32[0] = BYTE4(v282->i64[0]);
        v286.i32[0] = BYTE6(v282->i64[0]);
        v284.i32[1] = HIBYTE(v282->u32[0]);
        int8x16_t v287 = *(int8x16_t *)((char *)v282 + a5);
        unint64_t result = v287.u8[0];
        v285.i32[1] = ((unsigned __int16)WORD2(v282->i64[0]) >> 8);
        v286.i32[1] = HIBYTE(v282->i64[0]);
        v288.i32[0] = v287.u8[0];
        v289.i32[0] = v287.u8[2];
        v290.i32[0] = v287.u8[4];
        v288.i32[1] = v287.u8[1];
        int8x16_t v291 = *(int8x16_t *)((char *)v282 + 2 * a5);
        v289.i32[1] = v287.u8[3];
        v292.i32[0] = v287.u8[6];
        v293.i32[0] = v291.u8[6];
        v290.i32[1] = v287.u8[5];
        v292.i32[1] = v287.u8[7];
        v293.i32[1] = v291.u8[7];
        v294.i32[0] = v291.u8[4];
        v295.i32[0] = v291.u8[2];
        v294.i32[1] = v291.u8[5];
        v295.i32[1] = v291.u8[3];
        v296.i32[0] = v291.u8[0];
        v296.i32[1] = v291.u8[1];
        unint64_t v297 = vextq_s8(*v282, *v282, 8uLL).u64[0];
        v298.i32[0] = v297;
        v298.i32[1] = BYTE1(v297);
        v299.i32[0] = BYTE2(v297);
        v300.i32[0] = BYTE4(v297);
        v299.i32[1] = BYTE3(v297);
        v300.i32[1] = BYTE5(v297);
        v287.i64[0] = vextq_s8(v287, v287, 8uLL).u64[0];
        v301.i32[0] = BYTE6(v297);
        v301.i32[1] = HIBYTE(v297);
        int8x8_t v302 = (int8x8_t)vextq_s8(v291, v291, 8uLL).u64[0];
        v291.i32[0] = v287.u8[0];
        v303.i32[0] = v287.u8[2];
        v304.i32[0] = v287.u8[4];
        v291.i32[1] = v287.u8[1];
        v305.i32[0] = v287.u8[6];
        v306.i32[0] = v302.u8[6];
        v303.i32[1] = v287.u8[3];
        v304.i32[1] = v287.u8[5];
        v305.i32[1] = v287.u8[7];
        v287.i32[0] = v302.u8[4];
        v307.i32[0] = v302.u8[2];
        v306.i32[1] = v302.u8[7];
        v287.i32[1] = v302.u8[5];
        __int32 v308 = v302.u8[1];
        v307.i32[1] = v302.u8[3];
        v302.i32[0] = v302.u8[0];
        int8x8_t v309 = vand_s8(v298, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v309.u32[0];
        v310.i64[1] = v309.u32[1];
        uint64x2_t v311 = v310;
        int8x8_t v312 = vand_s8(v299, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v312.u32[0];
        v310.i64[1] = v312.u32[1];
        float64x2_t v313 = vcvtq_f64_u64(v310);
        int8x8_t v314 = vand_s8(v300, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v314.u32[0];
        v310.i64[1] = v314.u32[1];
        uint64x2_t v315 = v310;
        int8x8_t v316 = vand_s8(v301, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v316.u32[0];
        v310.i64[1] = v316.u32[1];
        uint64x2_t v317 = v310;
        int8x8_t v318 = vand_s8(v283, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v318.u32[0];
        v310.i64[1] = v318.u32[1];
        uint64x2_t v319 = v310;
        int8x8_t v320 = vand_s8(v284, (int8x8_t)0xFF000000FFLL);
        int8x8_t v321 = vand_s8(v285, (int8x8_t)0xFF000000FFLL);
        int8x8_t v322 = vand_s8(v286, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v322.u32[0];
        v310.i64[1] = v322.u32[1];
        float64x2_t v323 = vcvtq_f64_u64(v310);
        int8x8_t v324 = vand_s8(v292, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v324.u32[0];
        v310.i64[1] = v324.u32[1];
        float64x2_t v325 = vaddq_f64(v323, vcvtq_f64_u64(v310));
        v310.i64[0] = v321.u32[0];
        v310.i64[1] = v321.u32[1];
        float64x2_t v326 = vcvtq_f64_u64(v310);
        int8x8_t v327 = vand_s8(v290, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v327.u32[0];
        v310.i64[1] = v327.u32[1];
        float64x2_t v328 = vaddq_f64(v326, vcvtq_f64_u64(v310));
        v310.i64[0] = v320.u32[0];
        v310.i64[1] = v320.u32[1];
        float64x2_t v329 = vcvtq_f64_u64(v310);
        int8x8_t v330 = vand_s8(v289, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v330.u32[0];
        v310.i64[1] = v330.u32[1];
        float64x2_t v331 = vaddq_f64(v329, vcvtq_f64_u64(v310));
        int8x8_t v332 = vand_s8(v288, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v332.u32[0];
        v310.i64[1] = v332.u32[1];
        int8x8_t v333 = vand_s8(*(int8x8_t *)v291.i8, (int8x8_t)0xFF000000FFLL);
        float64x2_t v334 = vaddq_f64(vcvtq_f64_u64(v319), vcvtq_f64_u64(v310));
        v310.i64[0] = v333.u32[0];
        v310.i64[1] = v333.u32[1];
        float64x2_t v335 = vcvtq_f64_u64(v310);
        int8x8_t v336 = vand_s8(v303, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v336.u32[0];
        v310.i64[1] = v336.u32[1];
        int8x8_t v337 = vand_s8(v304, (int8x8_t)0xFF000000FFLL);
        float64x2_t v338 = vcvtq_f64_u64(v310);
        v310.i64[0] = v337.u32[0];
        v310.i64[1] = v337.u32[1];
        float64x2_t v339 = vcvtq_f64_u64(v310);
        int8x8_t v340 = vand_s8(v305, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v340.u32[0];
        v310.i64[1] = v340.u32[1];
        int8x8_t v341 = vand_s8(v293, (int8x8_t)0xFF000000FFLL);
        float64x2_t v342 = vcvtq_f64_u64(v310);
        v310.i64[0] = v341.u32[0];
        v310.i64[1] = v341.u32[1];
        float64x2_t v343 = vcvtq_f64_u64(v310);
        int8x8_t v344 = vand_s8(v294, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v344.u32[0];
        v310.i64[1] = v344.u32[1];
        float64x2_t v345 = vcvtq_f64_u64(v310);
        int8x8_t v346 = vand_s8(v295, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v346.u32[0];
        v310.i64[1] = v346.u32[1];
        float64x2_t v347 = vcvtq_f64_u64(v310);
        int8x8_t v348 = vand_s8(v296, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v348.u32[0];
        v310.i64[1] = v348.u32[1];
        float64x2_t v349 = vcvtq_f64_u64(v310);
        *(int8x8_t *)v291.i8 = vand_s8(v306, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v291.u32[0];
        v310.i64[1] = v291.u32[1];
        float64x2_t v350 = vcvtq_f64_u64(v310);
        *(int8x8_t *)v287.i8 = vand_s8(*(int8x8_t *)v287.i8, (int8x8_t)0xFF000000FFLL);
        float64x2_t v351 = vaddq_f64(v313, v338);
        v310.i64[0] = v287.u32[0];
        v310.i64[1] = v287.u32[1];
        float64x2_t v352 = vcvtq_f64_u64(v310);
        *(int8x8_t *)&v313.f64[0] = vand_s8(v307, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = LODWORD(v313.f64[0]);
        v310.i64[1] = HIDWORD(v313.f64[0]);
        float64x2_t v353 = vcvtq_f64_u64(v310);
        v302.i32[1] = v308;
        int8x8_t v354 = vand_s8(v302, (int8x8_t)0xFF000000FFLL);
        v310.i64[0] = v354.u32[0];
        v310.i64[1] = v354.u32[1];
        a7 = vaddq_f64(vaddq_f64(vcvtq_f64_u64(v311), v335), vcvtq_f64_u64(v310));
        *((float64x2_t *)v281 + 2) = vaddq_f64(v328, v345);
        *((float64x2_t *)v281 + 3) = vaddq_f64(v325, v343);
        *(float64x2_t *)v281 = vaddq_f64(v334, v349);
        *((float64x2_t *)v281 + 1) = vaddq_f64(v331, v347);
        *((float64x2_t *)v281 + 6) = vaddq_f64(vaddq_f64(vcvtq_f64_u64(v315), v339), v352);
        *((float64x2_t *)v281 + 7) = vaddq_f64(vaddq_f64(vcvtq_f64_u64(v317), v342), v350);
        *((float64x2_t *)v281 + 4) = a7;
        *((float64x2_t *)v281 + 5) = vaddq_f64(v351, v353);
        ++v282;
        v281 += 16;
        v280 -= 16;
      }
      while (v280);
      if (v23 == v21) {
        return result;
      }
      if ((((_BYTE)a5 * (_BYTE)a4) & 8) == 0)
      {
LABEL_112:
        v403 = &a2->u8[v23];
        v404 = &a3[v23];
        uint64_t v405 = v21 - v23;
        do
        {
          a6.n128_u8[0] = *v403;
          LOBYTE(a7.f64[0]) = v403[a5];
          *(double *)&unint64_t v406 = (double)*(unint64_t *)&a7.f64[0];
          double v407 = (double)a6.n128_u64[0] + *(double *)&v406;
          LOBYTE(v406) = v403[2 * a5];
          a7.f64[0] = (double)v406;
          a6.n128_f64[0] = v407 + a7.f64[0];
          *v404++ = a6.n128_f64[0];
          ++v403;
          --v405;
        }
        while (v405);
        return result;
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v355 = v23;
    uint64_t v23 = v21 & 0xFFFFFFF8;
    v356 = (uint64_t *)((char *)a2->i64 + v355);
    v357 = (float64x2_t *)&a3[v355];
    uint64_t v358 = v355 - v23;
    a6.n128_u64[0] = 0xFF000000FFLL;
    do
    {
      v359.i32[0] = *v356;
      v360.i32[0] = BYTE2(*v356);
      v359.i32[1] = BYTE1(*v356);
      v360.i32[1] = BYTE3(*v356);
      v361.i32[0] = BYTE4(*v356);
      v362.i32[0] = BYTE6(*v356);
      v361.i32[1] = ((unsigned __int16)WORD2(*v356) >> 8);
      uint64_t v363 = *(void *)((char *)v356 + a5);
      v362.i32[1] = HIBYTE(*v356);
      v364.i32[0] = v363;
      v365.i32[0] = BYTE2(v363);
      __int32 v366 = BYTE3(v363);
      v367.i32[0] = BYTE4(v363);
      __int32 v368 = BYTE5(v363);
      unsigned int v369 = BYTE6(v363);
      v364.i32[1] = BYTE1(v363);
      unsigned int v370 = HIBYTE(v363);
      int8x8_t v371 = *(int8x8_t *)((char *)v356 + 2 * a5);
      v365.i32[1] = v366;
      int8x8_t v372 = (int8x8_t)__PAIR64__(v370, v369);
      v373.i32[0] = v371.u8[6];
      v367.i32[1] = v368;
      unint64_t result = v371.u8[2];
      v373.i32[1] = v371.u8[7];
      v374.i32[0] = v371.u8[4];
      v375.i32[0] = v371.u8[2];
      v374.i32[1] = v371.u8[5];
      __int32 v376 = v371.u8[1];
      v375.i32[1] = v371.u8[3];
      v371.i32[0] = v371.u8[0];
      int8x8_t v377 = vand_s8(v359, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v377.u32[0];
      v378.i64[1] = v377.u32[1];
      uint64x2_t v379 = v378;
      int8x8_t v380 = vand_s8(v360, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v380.u32[0];
      v378.i64[1] = v380.u32[1];
      float64x2_t v381 = vcvtq_f64_u64(v378);
      int8x8_t v382 = vand_s8(v361, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v382.u32[0];
      v378.i64[1] = v382.u32[1];
      uint64x2_t v383 = v378;
      int8x8_t v384 = vand_s8(v362, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v384.u32[0];
      v378.i64[1] = v384.u32[1];
      float64x2_t v385 = vcvtq_f64_u64(v378);
      int8x8_t v386 = vand_s8(v364, (int8x8_t)0xFF000000FFLL);
      int8x8_t v387 = vand_s8(v372, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v387.u32[0];
      v378.i64[1] = v387.u32[1];
      float64x2_t v388 = vaddq_f64(v385, vcvtq_f64_u64(v378));
      v378.i64[0] = v386.u32[0];
      v378.i64[1] = v386.u32[1];
      float64x2_t v389 = vcvtq_f64_u64(v378);
      int8x8_t v390 = vand_s8(v367, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v390.u32[0];
      v378.i64[1] = v390.u32[1];
      float64x2_t v391 = vaddq_f64(vcvtq_f64_u64(v383), vcvtq_f64_u64(v378));
      int8x8_t v392 = vand_s8(v365, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v392.u32[0];
      v378.i64[1] = v392.u32[1];
      float64x2_t v393 = vcvtq_f64_u64(v378);
      int8x8_t v394 = vand_s8(v373, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v394.u32[0];
      v378.i64[1] = v394.u32[1];
      float64x2_t v395 = vaddq_f64(v381, v393);
      float64x2_t v396 = vcvtq_f64_u64(v378);
      int8x8_t v397 = vand_s8(v374, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v397.u32[0];
      v378.i64[1] = v397.u32[1];
      float64x2_t v398 = vcvtq_f64_u64(v378);
      int8x8_t v399 = vand_s8(v375, (int8x8_t)0xFF000000FFLL);
      float64x2_t v400 = vaddq_f64(vcvtq_f64_u64(v379), v389);
      v378.i64[0] = v399.u32[0];
      v378.i64[1] = v399.u32[1];
      uint64x2_t v401 = v378;
      v371.i32[1] = v376;
      int8x8_t v402 = vand_s8(v371, (int8x8_t)0xFF000000FFLL);
      v378.i64[0] = v402.u32[0];
      v378.i64[1] = v402.u32[1];
      a7 = vaddq_f64(v400, vcvtq_f64_u64(v378));
      v357[2] = vaddq_f64(v391, v398);
      v357[3] = vaddq_f64(v388, v396);
      float64x2_t *v357 = a7;
      v357[1] = vaddq_f64(v395, vcvtq_f64_u64(v401));
      v357 += 4;
      ++v356;
      v358 += 8;
    }
    while (v358);
    if (v23 == v21) {
      return result;
    }
    goto LABEL_112;
  }
  if (v14 != 5)
  {
    unint64_t v24 = (v14 * a5);
    unint64_t v25 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v24 < 1)
          {
            double v30 = 0.0;
            double v29 = 0.0;
            double v28 = 0.0;
            double v27 = 0.0;
            *a3 = 0.0;
            a3[1] = 0.0;
            a3[2] = 0.0;
            a3[3] = 0.0;
            if ((int)v25 < 1) {
              return result;
            }
          }
          else
          {
            unint64_t v26 = 0;
            double v27 = 0.0;
            double v28 = 0.0;
            double v29 = 0.0;
            double v30 = 0.0;
            do
            {
              LOBYTE(a10) = a2->i8[v26];
              *(double *)&unint64_t v31 = (double)*(unint64_t *)&a10;
              double v30 = v30 + *(double *)&v31;
              LOBYTE(v31) = a2->i8[v26 + 1];
              *(double *)&unint64_t v32 = (double)v31;
              double v29 = v29 + *(double *)&v32;
              LOBYTE(v32) = a2->i8[v26 + 2];
              *(double *)&unint64_t v33 = (double)v32;
              double v28 = v28 + *(double *)&v33;
              LOBYTE(v33) = a2->i8[v26 + 3];
              a10 = (double)v33;
              double v27 = v27 + a10;
              v26 += 4;
            }
            while (v26 < v24);
            *a3 = v30;
            a3[1] = v29;
            a3[2] = v28;
            a3[3] = v27;
            if ((int)v25 < 1) {
              return result;
            }
          }
          unint64_t v60 = 0;
          BOOL v61 = a3 + 7;
          uint64_t v62 = (uint64_t)a2->i64 + (int)v24 + 1;
          do
          {
            LOBYTE(a10) = *(unsigned char *)(v62 + v60 - 1);
            LOBYTE(a11) = a2->i8[v60];
            *(double *)&unint64_t v63 = (double)*(unint64_t *)&a11;
            *(double *)&unint64_t v64 = (double)*(unint64_t *)&a10 - *(double *)&v63;
            double v30 = v30 + *(double *)&v64;
            LOBYTE(v64) = *(unsigned char *)(v62 + v60);
            LOBYTE(v63) = a2->i8[v60 + 1];
            *(double *)&unint64_t v65 = (double)v63;
            *(double *)&unint64_t v66 = (double)v64 - *(double *)&v65;
            double v29 = v29 + *(double *)&v66;
            LOBYTE(v66) = *(unsigned char *)(v62 + v60 + 1);
            LOBYTE(v65) = a2->i8[v60 + 2];
            *(double *)&unint64_t v67 = (double)v65;
            *(double *)&unint64_t v68 = (double)v66 - *(double *)&v67;
            double v28 = v28 + *(double *)&v68;
            LOBYTE(v68) = *(unsigned char *)(v62 + v60 + 2);
            LOBYTE(v67) = a2->i8[v60 + 3];
            a11 = (double)v67;
            a10 = (double)v68 - a11;
            double v27 = v27 + a10;
            *(v61 - 3) = v30;
            *(v61 - 2) = v29;
            v60 += 4;
            *(v61 - 1) = v28;
            double *v61 = v27;
            v61 += 4;
          }
          while (v60 < v25);
          return result;
        }
        if (a5 < 1) {
          return result;
        }
        int v55 = 0;
        unint64_t v56 = &a3[a5];
        while ((int)v24 < 1)
        {
          double v58 = 0.0;
          *a3 = 0.0;
          if ((int)v25 >= 1) {
            goto LABEL_86;
          }
LABEL_79:
          ++v55;
          a2 = (int8x16_t *)((char *)a2 + 1);
          ++a3;
          ++v56;
          if (v55 == a5) {
            return result;
          }
        }
        uint64_t v57 = 0;
        double v58 = 0.0;
        do
        {
          LOBYTE(a7.f64[0]) = a2->i8[v57];
          a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
          double v58 = v58 + a7.f64[0];
          v57 += a5;
        }
        while (v57 < (int)v24);
        *a3 = v58;
        if ((int)v25 < 1) {
          goto LABEL_79;
        }
LABEL_86:
        uint64_t v59 = 0;
        do
        {
          LOBYTE(a7.f64[0]) = a2->i8[(int)v24 + v59];
          LOBYTE(a8) = a2->i8[v59];
          a8 = (double)*(unint64_t *)&a8;
          a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - a8;
          double v58 = v58 + a7.f64[0];
          v56[v59] = v58;
          v59 += a5;
        }
        while (v59 < (int)v25);
        goto LABEL_79;
      }
      if ((int)v24 < 1)
      {
        double v54 = 0.0;
        double v53 = 0.0;
        double v52 = 0.0;
        goto LABEL_128;
      }
      if (v24 >= 4)
      {
        uint64_t v414 = ((int)v24 - 1) / 3u + 1;
        unint64_t v51 = 3 * (v414 & 0x7FFFFFFE);
        v415 = &a2->i8[2];
        double v52 = 0.0;
        uint64_t v416 = v414 & 0x7FFFFFFE;
        double v53 = 0.0;
        double v54 = 0.0;
        do
        {
          LOBYTE(a9) = *(v415 - 2);
          a9 = (double)*(unint64_t *)&a9;
          LOBYTE(a10) = v415[1];
          a10 = (double)*(unint64_t *)&a10;
          LOBYTE(a11) = *(v415 - 1);
          a11 = (double)*(unint64_t *)&a11;
          LOBYTE(a12) = v415[2];
          a12 = (double)*(unint64_t *)&a12;
          LOBYTE(a13) = *v415;
          a13 = (double)*(unint64_t *)&a13;
          LOBYTE(v13) = v415[3];
          double v13 = (double)*(unint64_t *)&v13;
          double v52 = v52 + a13 + v13;
          double v53 = v53 + a11 + a12;
          double v54 = v54 + a9 + a10;
          v415 += 6;
          v416 -= 2;
        }
        while (v416);
        if ((v414 & 0x7FFFFFFE) == v414)
        {
LABEL_128:
          *a3 = v54;
          a3[1] = v53;
          a3[2] = v52;
          if ((int)v25 >= 1)
          {
            unint64_t v419 = 0;
            v420 = a3 + 4;
            uint64_t v421 = (uint64_t)a2->i64 + (int)v24 + 1;
            do
            {
              LOBYTE(a9) = *(unsigned char *)(v421 + v419 - 1);
              LOBYTE(a10) = a2->i8[v419];
              *(double *)&unint64_t v422 = (double)*(unint64_t *)&a10;
              *(double *)&unint64_t v423 = (double)*(unint64_t *)&a9 - *(double *)&v422;
              double v54 = v54 + *(double *)&v423;
              LOBYTE(v423) = *(unsigned char *)(v421 + v419);
              LOBYTE(v422) = a2->i8[v419 + 1];
              *(double *)&unint64_t v424 = (double)v422;
              *(double *)&unint64_t v425 = (double)v423 - *(double *)&v424;
              double v53 = v53 + *(double *)&v425;
              LOBYTE(v425) = *(unsigned char *)(v421 + v419 + 1);
              LOBYTE(v424) = a2->i8[v419 + 2];
              a10 = (double)v424;
              a9 = (double)v425 - a10;
              double v52 = v52 + a9;
              *(v420 - 1) = v54;
              double *v420 = v53;
              a3[(v419 + 5)] = v52;
              v420 += 3;
              v419 += 3;
            }
            while (v419 < v25);
          }
          return result;
        }
      }
      else
      {
        unint64_t v51 = 0;
        double v52 = 0.0;
        double v53 = 0.0;
        double v54 = 0.0;
      }
      do
      {
        LOBYTE(a9) = a2->i8[v51];
        *(double *)&unint64_t v417 = (double)*(unint64_t *)&a9;
        double v54 = v54 + *(double *)&v417;
        LOBYTE(v417) = a2->i8[v51 + 1];
        *(double *)&unint64_t v418 = (double)v417;
        double v53 = v53 + *(double *)&v418;
        LOBYTE(v418) = a2->i8[v51 + 2];
        a9 = (double)v418;
        double v52 = v52 + a9;
        v51 += 3;
      }
      while (v51 < v24);
      goto LABEL_128;
    }
    if ((int)v24 < 1)
    {
      double v50 = 0.0;
      goto LABEL_120;
    }
    if (v24 == 1)
    {
      uint64_t v49 = 0;
      double v50 = 0.0;
    }
    else
    {
      uint64_t v49 = v24 & 0xFFFFFFFE;
      v408 = &a2->i8[1];
      double v50 = 0.0;
      uint64_t v409 = v49;
      do
      {
        LOBYTE(a7.f64[0]) = *(v408 - 1);
        a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
        LOBYTE(a8) = *v408;
        a8 = (double)*(unint64_t *)&a8;
        double v50 = v50 + a7.f64[0] + a8;
        v408 += 2;
        v409 -= 2;
      }
      while (v409);
      if (v49 == v24)
      {
LABEL_120:
        *a3 = v50;
        if ((int)v25 >= 1)
        {
          v413 = a3 + 1;
          do
          {
            LOBYTE(a7.f64[0]) = a2->i8[(int)v24];
            LOBYTE(a8) = a2->i8[0];
            a8 = (double)*(unint64_t *)&a8;
            a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - a8;
            double v50 = v50 + a7.f64[0];
            *v413++ = v50;
            a2 = (int8x16_t *)((char *)a2 + 1);
            --v25;
          }
          while (v25);
        }
        return result;
      }
    }
    v410 = &a2->u8[v49];
    uint64_t v411 = v24 - v49;
    do
    {
      unsigned int v412 = *v410++;
      a7.f64[0] = (double)v412;
      double v50 = v50 + (double)v412;
      --v411;
    }
    while (v411);
    goto LABEL_120;
  }
  uint64_t v15 = (a5 * a4);
  if ((int)v15 < 1) {
    return result;
  }
  uint64_t v16 = a5;
  uint64_t v17 = 2 * a5;
  uint64_t v18 = 3 * a5;
  uint64_t v19 = 4 * a5;
  if (v15 < 8)
  {
    uint64_t v20 = 0;
    goto LABEL_102;
  }
  uint64_t v20 = 0;
  unint64_t result = (unint64_t)&a3[v15];
  BOOL v35 = &a2->i8[v18 + v15] > (__int8 *)a3 && (unint64_t)a2->u64 + v18 < result;
  BOOL v37 = &a2->i8[v17 + v15] > (__int8 *)a3 && (unint64_t)a2->u64 + v17 < result;
  BOOL v39 = &a2->i8[a5 + v15] > (__int8 *)a3 && (unint64_t)a2->u64 + a5 < result;
  BOOL v41 = &a2->i8[v15] > (__int8 *)a3 && result > (unint64_t)a2;
  BOOL v42 = (unint64_t)a2->u64 + v19 < result && &a2->i8[v19 + v15] > (__int8 *)a3;
  if (v42 || v35 || v37 || v39 || v41) {
    goto LABEL_102;
  }
  if (v15 >= 0x10)
  {
    uint64_t v20 = v15 & 0x7FFFFFF0;
    uint64_t v69 = v15 & 0xFFFFFFF0;
    uint8x16_t v70 = a3;
    uint16x8_t v71 = a2;
    do
    {
      unint64_t v72 = vextq_s8(*v71, *v71, 8uLL).u64[0];
      __int32 v73 = BYTE3(v72);
      __int32 v74 = BYTE5(v72);
      v75.i32[0] = v71->u8[0];
      v75.i32[1] = HIBYTE(v71->u16[0]);
      v76.i32[0] = BYTE2(v71->u32[0]);
      v77.i32[0] = BYTE4(v71->i64[0]);
      v76.i32[1] = HIBYTE(v71->u32[0]);
      v77.i32[1] = ((unsigned __int16)WORD2(v71->i64[0]) >> 8);
      v78.i32[0] = BYTE6(v71->i64[0]);
      v78.i32[1] = HIBYTE(v71->i64[0]);
      v79.i32[0] = v72;
      __int32 v80 = HIBYTE(v72);
      int8x16_t v81 = *(int8x16_t *)((char *)v71 + v16);
      v82.i32[0] = BYTE2(v72);
      v83.i32[0] = v81.u8[0];
      v84.i32[0] = BYTE4(v72);
      v85.i32[0] = v81.u8[2];
      v86.i32[0] = BYTE6(v72);
      v87.i32[0] = v81.u8[4];
      v88.i32[0] = v81.u8[6];
      unint64_t v89 = vextq_s8(v81, v81, 8uLL).u64[0];
      v90.i32[0] = v89;
      v83.i32[1] = v81.u8[1];
      v79.i32[1] = BYTE1(v72);
      int8x8_t v91 = v79;
      v85.i32[1] = v81.u8[3];
      v82.i32[1] = v73;
      v87.i32[1] = v81.u8[5];
      v84.i32[1] = v74;
      v88.i32[1] = v81.u8[7];
      v86.i32[1] = v80;
      v90.i32[1] = BYTE1(v89);
      int8x8_t v427 = v90;
      int8x8_t v428 = v83;
      v90.i32[0] = BYTE2(v89);
      v90.i32[1] = BYTE3(v89);
      int8x8_t v92 = vand_s8(v76, (int8x8_t)0xFF000000FFLL);
      int8x8_t v93 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
      v94.i32[0] = BYTE4(v89);
      v94.i32[1] = BYTE5(v89);
      int8x8_t v95 = vand_s8(v78, (int8x8_t)0xFF000000FFLL);
      v81.i32[0] = BYTE6(v89);
      v81.i32[1] = HIBYTE(v89);
      int8x8_t v96 = vand_s8(v85, (int8x8_t)0xFF000000FFLL);
      int8x8_t v97 = vand_s8(v87, (int8x8_t)0xFF000000FFLL);
      int8x16_t v98 = *(int8x16_t *)((char *)v71 + v17);
      int8x8_t v99 = vand_s8(v82, (int8x8_t)0xFF000000FFLL);
      v79.i32[0] = v98.u8[6];
      v79.i32[1] = v98.u8[7];
      int8x8_t v426 = v79;
      int8x8_t v100 = vand_s8(v84, (int8x8_t)0xFF000000FFLL);
      int8x8_t v101 = vand_s8(v88, (int8x8_t)0xFF000000FFLL);
      int8x8_t v102 = vand_s8(v86, (int8x8_t)0xFF000000FFLL);
      v84.i32[0] = v98.u8[4];
      v84.i32[1] = v98.u8[5];
      v103.i64[0] = v92.u32[0];
      v103.i64[1] = v92.u32[1];
      uint64x2_t v104 = v103;
      v77.i32[0] = v98.u8[2];
      v77.i32[1] = v98.u8[3];
      v103.i64[0] = v93.u32[0];
      v103.i64[1] = v93.u32[1];
      uint64x2_t v105 = v103;
      unint64_t v106 = vextq_s8(v98, v98, 8uLL).u64[0];
      v103.i64[0] = v95.u32[0];
      v103.i64[1] = v95.u32[1];
      uint64x2_t v107 = v103;
      v95.i32[0] = v98.u8[0];
      v95.i32[1] = v98.u8[1];
      v103.i64[0] = v96.u32[0];
      v103.i64[1] = v96.u32[1];
      uint64x2_t v108 = v103;
      v92.i32[0] = BYTE6(v106);
      v92.i32[1] = HIBYTE(v106);
      v103.i64[0] = v97.u32[0];
      v103.i64[1] = v97.u32[1];
      uint64x2_t v109 = v103;
      v103.i64[0] = v101.u32[0];
      v103.i64[1] = v101.u32[1];
      uint64x2_t v110 = v103;
      v103.i64[0] = v99.u32[0];
      v103.i64[1] = v99.u32[1];
      uint64x2_t v111 = v103;
      v86.i32[0] = BYTE4(v106);
      v86.i32[1] = BYTE5(v106);
      v103.i64[0] = v100.u32[0];
      v103.i64[1] = v100.u32[1];
      uint64x2_t v112 = v103;
      v96.i32[0] = BYTE2(v106);
      v96.i32[1] = BYTE3(v106);
      v103.i64[0] = v102.u32[0];
      v103.i64[1] = v102.u32[1];
      uint64x2_t v113 = v103;
      int8x8_t v114 = vand_s8(v90, (int8x8_t)0xFF000000FFLL);
      float64x2_t v115 = vcvtq_f64_u64(v104);
      v90.i32[0] = v106;
      v90.i32[1] = BYTE1(v106);
      int8x16_t v116 = *(int8x16_t *)((char *)v71 + v18);
      float64x2_t v117 = vcvtq_f64_u64(v105);
      int8x8_t v118 = (int8x8_t)vextq_s8(v116, v116, 8uLL).u64[0];
      float64x2_t v119 = vcvtq_f64_u64(v107);
      v105.i32[0] = v118.u8[0];
      v105.i32[1] = v118.u8[1];
      float64x2_t v120 = vcvtq_f64_u64(v108);
      v108.i32[0] = v116.u8[0];
      v108.i32[1] = v116.u8[1];
      float64x2_t v121 = vcvtq_f64_u64(v109);
      int8x8_t v122 = vand_s8(v94, (int8x8_t)0xFF000000FFLL);
      float64x2_t v123 = vcvtq_f64_u64(v110);
      v94.i32[0] = v116.u8[2];
      v94.i32[1] = v116.u8[3];
      v103.i64[0] = v114.u32[0];
      v103.i64[1] = v114.u32[1];
      uint64x2_t v124 = v103;
      v110.i32[0] = v116.u8[4];
      v110.i32[1] = v116.u8[5];
      float64x2_t v125 = vcvtq_f64_u64(v111);
      v103.i64[0] = v122.u32[0];
      v103.i64[1] = v122.u32[1];
      unsigned int v126 = v116.u8[6];
      unsigned int v127 = v116.u8[7];
      float64x2_t v128 = vcvtq_f64_u64(v112);
      v112.i64[0] = __PAIR64__(v127, v126);
      int8x16_t v129 = *(int8x16_t *)((char *)v71 + v19);
      float64x2_t v130 = vcvtq_f64_u64(v113);
      *(int8x8_t *)v113.i8 = vand_s8(*(int8x8_t *)v81.i8, (int8x8_t)0xFF000000FFLL);
      float64x2_t v131 = vcvtq_f64_u64(v124);
      v81.i32[0] = v129.u8[6];
      v81.i32[1] = v129.u8[7];
      float64x2_t v132 = vaddq_f64(v119, v123);
      LODWORD(v123.f64[0]) = v129.u8[4];
      HIDWORD(v123.f64[0]) = v129.u8[5];
      float64x2_t v133 = vcvtq_f64_u64(v103);
      v103.i64[0] = v113.u32[0];
      v103.i64[1] = v113.u32[1];
      float64x2_t v134 = vaddq_f64(v117, v121);
      LODWORD(v117.f64[0]) = v129.u8[2];
      HIDWORD(v117.f64[0]) = v129.u8[3];
      float64x2_t v135 = vaddq_f64(v115, v120);
      LODWORD(v115.f64[0]) = v129.u8[0];
      HIDWORD(v115.f64[0]) = v129.u8[1];
      v129.i64[0] = vextq_s8(v129, v129, 8uLL).u64[0];
      __int32 v136 = v118.u8[3];
      float64x2_t v137 = vaddq_f64(v130, vcvtq_f64_u64(v103));
      v113.i32[0] = v118.u8[2];
      float64x2_t v138 = vaddq_f64(v128, v133);
      LODWORD(v121.f64[0]) = v118.u8[4];
      float64x2_t v139 = vaddq_f64(v125, v131);
      LODWORD(v125.f64[0]) = v118.u8[6];
      v118.i32[0] = v129.u8[6];
      v113.i32[1] = v136;
      unint64_t result = v129.u8[4];
      HIDWORD(v121.f64[0]) = v118.u8[5];
      unsigned int v140 = v129.u8[2];
      HIDWORD(v125.f64[0]) = v118.u8[7];
      unsigned int v141 = v129.u8[3];
      unsigned int v142 = v129.u8[0];
      v118.i32[1] = v129.u8[7];
      unsigned int v143 = v129.u8[1];
      v129.i32[0] = v129.u8[4];
      v129.i32[1] = v129.u8[5];
      *(int8x8_t *)&v133.f64[0] = vand_s8(v91, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = LODWORD(v133.f64[0]);
      v103.i64[1] = HIDWORD(v133.f64[0]);
      uint64x2_t v144 = v103;
      int8x8_t v145 = vand_s8(v75, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v145.u32[0];
      v103.i64[1] = v145.u32[1];
      float64x2_t v146 = vcvtq_f64_u64(v103);
      int8x8_t v147 = vand_s8(v428, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v147.u32[0];
      v103.i64[1] = v147.u32[1];
      float64x2_t v148 = vcvtq_f64_u64(v103);
      int8x8_t v149 = vand_s8(v427, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v149.u32[0];
      v103.i64[1] = v149.u32[1];
      float64x2_t v150 = vaddq_f64(vcvtq_f64_u64(v144), vcvtq_f64_u64(v103));
      float64x2_t v151 = vaddq_f64(v146, v148);
      *(int8x8_t *)&v146.f64[0] = vand_s8(v84, (int8x8_t)0xFF000000FFLL);
      int8x8_t v152 = vand_s8(v95, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v152.u32[0];
      v103.i64[1] = v152.u32[1];
      float64x2_t v153 = vaddq_f64(v151, vcvtq_f64_u64(v103));
      v103.i64[0] = LODWORD(v146.f64[0]);
      v103.i64[1] = HIDWORD(v146.f64[0]);
      float64x2_t v154 = vcvtq_f64_u64(v103);
      int8x8_t v155 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v155.u32[0];
      v103.i64[1] = v155.u32[1];
      float64x2_t v156 = vaddq_f64(v135, vcvtq_f64_u64(v103));
      int8x8_t v157 = vand_s8(v426, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v157.u32[0];
      v103.i64[1] = v157.u32[1];
      float64x2_t v158 = vaddq_f64(v132, vcvtq_f64_u64(v103));
      int8x8_t v159 = vand_s8(v90, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v159.u32[0];
      v103.i64[1] = v159.u32[1];
      float64x2_t v160 = vcvtq_f64_u64(v103);
      int8x8_t v161 = vand_s8(v92, (int8x8_t)0xFF000000FFLL);
      int8x8_t v162 = vand_s8(v96, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v162.u32[0];
      v103.i64[1] = v162.u32[1];
      float64x2_t v163 = vaddq_f64(v139, vcvtq_f64_u64(v103));
      v103.i64[0] = v161.u32[0];
      v103.i64[1] = v161.u32[1];
      float64x2_t v164 = vcvtq_f64_u64(v103);
      int8x8_t v165 = vand_s8(v86, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v165.u32[0];
      v103.i64[1] = v165.u32[1];
      float64x2_t v166 = vaddq_f64(v138, vcvtq_f64_u64(v103));
      int8x8_t v167 = vand_s8(*(int8x8_t *)v105.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v167.u32[0];
      v103.i64[1] = v167.u32[1];
      float64x2_t v168 = vcvtq_f64_u64(v103);
      *(int8x8_t *)v105.i8 = vand_s8(*(int8x8_t *)v113.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v105.u32[0];
      v103.i64[1] = v105.u32[1];
      float64x2_t v169 = vaddq_f64(v137, v164);
      float64x2_t v170 = vcvtq_f64_u64(v103);
      *(int8x8_t *)v105.i8 = vand_s8(*(int8x8_t *)&v121.f64[0], (int8x8_t)0xFF000000FFLL);
      *(int8x8_t *)v112.i8 = vand_s8(*(int8x8_t *)v112.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v112.u32[0];
      v103.i64[1] = v112.u32[1];
      float64x2_t v171 = vaddq_f64(v158, vcvtq_f64_u64(v103));
      v103.i64[0] = v105.u32[0];
      v103.i64[1] = v105.u32[1];
      float64x2_t v172 = vcvtq_f64_u64(v103);
      *(int8x8_t *)v110.i8 = vand_s8(*(int8x8_t *)v110.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v110.u32[0];
      v103.i64[1] = v110.u32[1];
      float64x2_t v173 = vaddq_f64(vaddq_f64(v134, v154), vcvtq_f64_u64(v103));
      *(int8x8_t *)v110.i8 = vand_s8(*(int8x8_t *)&v125.f64[0], (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v110.u32[0];
      v103.i64[1] = v110.u32[1];
      uint64x2_t v174 = v103;
      int8x8_t v175 = vand_s8(v94, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v175.u32[0];
      v103.i64[1] = v175.u32[1];
      float64x2_t v176 = vaddq_f64(v156, vcvtq_f64_u64(v103));
      *(int8x8_t *)v108.i8 = vand_s8(*(int8x8_t *)v108.i8, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v108.u32[0];
      v103.i64[1] = v108.u32[1];
      *(int8x8_t *)v81.i8 = vand_s8(*(int8x8_t *)v81.i8, (int8x8_t)0xFF000000FFLL);
      float64x2_t v177 = vaddq_f64(v153, vcvtq_f64_u64(v103));
      v103.i64[0] = v81.u32[0];
      v103.i64[1] = v81.u32[1];
      float64x2_t v178 = vcvtq_f64_u64(v103);
      *(int8x8_t *)v108.i8 = vand_s8(*(int8x8_t *)&v123.f64[0], (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v108.u32[0];
      v103.i64[1] = v108.u32[1];
      float64x2_t v179 = vcvtq_f64_u64(v103);
      int8x8_t v180 = vand_s8(*(int8x8_t *)&v117.f64[0], (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v180.u32[0];
      v103.i64[1] = v180.u32[1];
      float64x2_t v181 = vcvtq_f64_u64(v103);
      *(int8x8_t *)&v115.f64[0] = vand_s8(*(int8x8_t *)&v115.f64[0], (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = LODWORD(v115.f64[0]);
      v103.i64[1] = HIDWORD(v115.f64[0]);
      float64x2_t v182 = vaddq_f64(v166, v172);
      float64x2_t v183 = vcvtq_f64_u64(v103);
      *(int8x8_t *)&v115.f64[0] = vand_s8(v118, (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = LODWORD(v115.f64[0]);
      v103.i64[1] = HIDWORD(v115.f64[0]);
      float64x2_t v184 = vcvtq_f64_u64(v103);
      int8x8_t v185 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
      float64x2_t v186 = vaddq_f64(v163, v170);
      v103.i64[0] = v185.u32[0];
      v103.i64[1] = v185.u32[1];
      float64x2_t v187 = vcvtq_f64_u64(v103);
      int8x8_t v188 = vand_s8((int8x8_t)__PAIR64__(v141, v140), (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = v188.u32[0];
      v103.i64[1] = v188.u32[1];
      float64x2_t v189 = vcvtq_f64_u64(v103);
      float64x2_t v190 = vaddq_f64(vaddq_f64(v150, v160), v168);
      *(int8x8_t *)&v168.f64[0] = vand_s8((int8x8_t)__PAIR64__(v143, v142), (int8x8_t)0xFF000000FFLL);
      v103.i64[0] = LODWORD(v168.f64[0]);
      v103.i64[1] = HIDWORD(v168.f64[0]);
      a7 = vaddq_f64(vaddq_f64(v169, vcvtq_f64_u64(v174)), v184);
      *((float64x2_t *)v70 + 2) = vaddq_f64(v173, v179);
      *((float64x2_t *)v70 + 3) = vaddq_f64(v171, v178);
      *(float64x2_t *)uint8x16_t v70 = vaddq_f64(v177, v183);
      *((float64x2_t *)v70 + 1) = vaddq_f64(v176, v181);
      *((float64x2_t *)v70 + 6) = vaddq_f64(v182, v187);
      *((float64x2_t *)v70 + 7) = a7;
      a6 = (__n128)vaddq_f64(v186, v189);
      *((float64x2_t *)v70 + 4) = vaddq_f64(v190, vcvtq_f64_u64(v103));
      *((__n128 *)v70 + 5) = a6;
      ++v71;
      v70 += 16;
      v69 -= 16;
    }
    while (v69);
    if (v20 == v15) {
      return result;
    }
    if ((v15 & 8) == 0)
    {
LABEL_102:
      uint64_t v266 = 0;
      v267 = &a2->i8[v20];
      v268 = &a2->i8[v20 + v19];
      v269 = &a2->i8[v20 + v18];
      v270 = &a2->i8[v20 + v17];
      v271 = &a2->i8[v20 + v16];
      uint64_t v272 = v15 - v20;
      v273 = &a3[v20];
      do
      {
        a6.n128_u8[0] = v267[v266];
        LOBYTE(a7.f64[0]) = v271[v266];
        *(double *)&unint64_t v274 = (double)*(unint64_t *)&a7.f64[0];
        double v275 = (double)a6.n128_u64[0] + *(double *)&v274;
        LOBYTE(v274) = v270[v266];
        *(double *)&unint64_t v276 = (double)v274;
        double v277 = v275 + *(double *)&v276;
        LOBYTE(v276) = v269[v266];
        *(double *)&unint64_t v278 = (double)v276;
        double v279 = v277 + *(double *)&v278;
        LOBYTE(v278) = v268[v266];
        a7.f64[0] = (double)v278;
        a6.n128_f64[0] = v279 + a7.f64[0];
        v273[v266++] = a6.n128_f64[0];
      }
      while (v272 != v266);
      return result;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  int32x4_t v191 = &a2->i8[v16];
  int32x4_t v192 = &a2->i8[v17];
  int32x4_t v193 = &a2->i8[v18];
  unint64_t result = (unint64_t)a2->u64 + v19;
  a6.n128_u64[0] = 0xFF000000FFLL;
  uint64_t v194 = v15 & 0xFFFFFFF8;
  int32x4_t v195 = a2;
  int32x4_t v196 = (float64x2_t *)&a3[v20];
  do
  {
    int8x8_t v197 = *(int8x8_t *)&v195->i8[v20];
    __int32 v198 = v197.u8[1];
    __int32 v199 = v197.u8[3];
    v200.i32[0] = v197.u8[0];
    __int32 v201 = v197.u8[7];
    int8x8_t v202 = *(int8x8_t *)&v191[v20];
    v203.i32[0] = v197.u8[2];
    v197.i32[0] = v197.u8[4];
    v204.i32[0] = v197.u8[6];
    v205.i32[0] = v202.u8[0];
    v206.i32[0] = v202.u8[2];
    v200.i32[1] = v198;
    v203.i32[1] = v199;
    v197.i32[1] = v197.u8[5];
    v207.i32[0] = v202.u8[4];
    v208.i32[0] = v202.u8[6];
    v204.i32[1] = v201;
    uint64_t v209 = *(void *)&v192[v20];
    v205.i32[1] = v202.u8[1];
    v206.i32[1] = v202.u8[3];
    v210.i32[0] = BYTE6(v209);
    v202.i32[0] = BYTE4(v209);
    __int32 v211 = BYTE5(v209);
    v207.i32[1] = v202.u8[5];
    __int32 v212 = BYTE3(v209);
    v208.i32[1] = v202.u8[7];
    v213.i32[0] = BYTE2(v209);
    v214.i32[0] = v209;
    v210.i32[1] = HIBYTE(v209);
    __int32 v215 = BYTE1(v209);
    int8x8_t v216 = *(int8x8_t *)&v193[v20];
    v202.i32[1] = v211;
    v213.i32[1] = v212;
    v217.i32[0] = v216.u8[0];
    v218.i32[0] = v216.u8[2];
    v214.i32[1] = v215;
    v217.i32[1] = v216.u8[1];
    v218.i32[1] = v216.u8[3];
    v219.i32[0] = v216.u8[4];
    v216.i32[0] = v216.u8[6];
    v219.i32[1] = v216.u8[5];
    int8x8_t v220 = vand_s8(v200, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v220.u32[0];
    v221.i64[1] = v220.u32[1];
    float64x2_t v222 = vcvtq_f64_u64(v221);
    int8x8_t v223 = vand_s8(v203, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v223.u32[0];
    v221.i64[1] = v223.u32[1];
    float64x2_t v224 = vcvtq_f64_u64(v221);
    int8x8_t v225 = vand_s8(v197, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v225.u32[0];
    v221.i64[1] = v225.u32[1];
    float64x2_t v226 = vcvtq_f64_u64(v221);
    int8x8_t v227 = vand_s8(v204, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v227.u32[0];
    v221.i64[1] = v227.u32[1];
    float64x2_t v228 = vcvtq_f64_u64(v221);
    int8x8_t v229 = vand_s8(v205, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v229.u32[0];
    v221.i64[1] = v229.u32[1];
    float64x2_t v230 = vcvtq_f64_u64(v221);
    int8x8_t v231 = vand_s8(v206, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v231.u32[0];
    v221.i64[1] = v231.u32[1];
    float64x2_t v232 = vcvtq_f64_u64(v221);
    int8x8_t v233 = vand_s8(v207, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v233.u32[0];
    v221.i64[1] = v233.u32[1];
    float64x2_t v234 = vcvtq_f64_u64(v221);
    int8x8_t v235 = vand_s8(v208, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v235.u32[0];
    v221.i64[1] = v235.u32[1];
    float64x2_t v236 = vcvtq_f64_u64(v221);
    int8x8_t v237 = vand_s8(v210, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v237.u32[0];
    v221.i64[1] = v237.u32[1];
    float64x2_t v238 = vcvtq_f64_u64(v221);
    int8x8_t v239 = vand_s8(v202, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v239.u32[0];
    v221.i64[1] = v239.u32[1];
    float64x2_t v240 = vaddq_f64(v228, v236);
    float64x2_t v241 = vcvtq_f64_u64(v221);
    int8x8_t v242 = vand_s8(v213, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v242.u32[0];
    v221.i64[1] = v242.u32[1];
    float64x2_t v243 = vcvtq_f64_u64(v221);
    int8x8_t v244 = vand_s8(v214, (int8x8_t)0xFF000000FFLL);
    float64x2_t v245 = vaddq_f64(v226, v234);
    v221.i64[0] = v244.u32[0];
    v221.i64[1] = v244.u32[1];
    float64x2_t v246 = vcvtq_f64_u64(v221);
    int8x8_t v247 = vand_s8(v217, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v247.u32[0];
    v221.i64[1] = v247.u32[1];
    float64x2_t v248 = vcvtq_f64_u64(v221);
    float64x2_t v249 = vaddq_f64(v224, v232);
    *(int8x8_t *)&v232.f64[0] = vand_s8(v218, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = LODWORD(v232.f64[0]);
    v221.i64[1] = HIDWORD(v232.f64[0]);
    float64x2_t v250 = vcvtq_f64_u64(v221);
    int8x8_t v251 = vand_s8(v219, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v251.u32[0];
    v221.i64[1] = v251.u32[1];
    float64x2_t v252 = vaddq_f64(v222, v230);
    float64x2_t v253 = vcvtq_f64_u64(v221);
    v216.i32[1] = v216.u8[7];
    int8x8_t v254 = vand_s8(v216, (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = v254.u32[0];
    v221.i64[1] = v254.u32[1];
    float64x2_t v255 = vaddq_f64(v252, v246);
    float64x2_t v256 = vcvtq_f64_u64(v221);
    uint64_t v257 = *(void *)(result + v20);
    float64x2_t v258 = vaddq_f64(v249, v243);
    LODWORD(v243.f64[0]) = BYTE6(v257);
    HIDWORD(v243.f64[0]) = HIBYTE(v257);
    float64x2_t v259 = vaddq_f64(v245, v241);
    *(int8x8_t *)&v241.f64[0] = vand_s8(*(int8x8_t *)&v243.f64[0], (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = LODWORD(v241.f64[0]);
    v221.i64[1] = HIDWORD(v241.f64[0]);
    float64x2_t v260 = vcvtq_f64_u64(v221);
    LODWORD(v243.f64[0]) = BYTE4(v257);
    HIDWORD(v243.f64[0]) = BYTE5(v257);
    float64x2_t v261 = vaddq_f64(vaddq_f64(v240, v238), v256);
    *(int8x8_t *)&v256.f64[0] = vand_s8(*(int8x8_t *)&v243.f64[0], (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = LODWORD(v256.f64[0]);
    v221.i64[1] = HIDWORD(v256.f64[0]);
    float64x2_t v262 = vcvtq_f64_u64(v221);
    float64x2_t v263 = vaddq_f64(v259, v253);
    LODWORD(v253.f64[0]) = BYTE2(v257);
    HIDWORD(v253.f64[0]) = BYTE3(v257);
    float64x2_t v264 = vaddq_f64(v258, v250);
    *(int8x8_t *)&v253.f64[0] = vand_s8(*(int8x8_t *)&v253.f64[0], (int8x8_t)0xFF000000FFLL);
    v221.i64[0] = LODWORD(v253.f64[0]);
    v221.i64[1] = HIDWORD(v253.f64[0]);
    LODWORD(v250.f64[0]) = v257;
    HIDWORD(v250.f64[0]) = BYTE1(v257);
    *(int8x8_t *)&v250.f64[0] = vand_s8(*(int8x8_t *)&v250.f64[0], (int8x8_t)0xFF000000FFLL);
    float64x2_t v265 = vcvtq_f64_u64(v221);
    v221.i64[0] = LODWORD(v250.f64[0]);
    v221.i64[1] = HIDWORD(v250.f64[0]);
    a7 = vaddq_f64(vaddq_f64(v255, v248), vcvtq_f64_u64(v221));
    v196[2] = vaddq_f64(v263, v262);
    v196[3] = vaddq_f64(v261, v260);
    int32x4_t v195 = (int8x16_t *)((char *)v195 + 8);
    v191 += 8;
    float64x2_t *v196 = a7;
    v196[1] = vaddq_f64(v264, v265);
    v196 += 4;
    v192 += 8;
    v193 += 8;
    result += 8;
    v194 -= 8;
  }
  while (v20 != v194);
  uint64_t v20 = v15 & 0x7FFFFFF8;
  if (v20 != v15) {
    goto LABEL_102;
  }
  return result;
}

void sub_10038E248()
{
}

uint64_t sub_10038E25C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_10038E2E0(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_10038E318(uint64_t result, uint16x8_t *a2, uint32x4_t *a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    uint64_t v12 = (a5 * a4);
    if ((int)v12 < 1) {
      return result;
    }
    uint64_t v13 = 2 * a5;
    if (v12 >= 0x10)
    {
      uint64_t v14 = v12 & 0x7FFFFFF0;
      BOOL v40 = a2 + 1;
      BOOL v41 = a3 + 2;
      uint64_t v42 = v12 & 0xFFFFFFF0;
      do
      {
        uint16x8_t v43 = v40[-1];
        uint16x8_t v44 = *(uint16x8_t *)((char *)v40 + 2 * a5 - 16);
        uint16x8_t v45 = *(uint16x8_t *)((char *)v40 + 2 * a5);
        uint32x4_t v46 = vaddl_high_u16(v44, v43);
        uint32x4_t v47 = vaddl_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v43.i8);
        uint32x4_t v48 = vaddl_high_u16(v45, *v40);
        uint32x4_t v49 = vaddl_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v40->i8);
        uint16x8_t v50 = *(uint16x8_t *)((char *)v40 + 2 * v13 - 16);
        uint16x8_t v51 = *(uint16x8_t *)((char *)v40 + 2 * v13);
        v41[-2] = vaddw_u16(v47, *(uint16x4_t *)v50.i8);
        v41[-1] = vaddw_high_u16(v46, v50);
        uint32x4_t *v41 = vaddw_u16(v49, *(uint16x4_t *)v51.i8);
        v41[1] = vaddw_high_u16(v48, v51);
        v41 += 4;
        v40 += 2;
        v42 -= 16;
      }
      while (v42);
      if (v14 == v12) {
        return result;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    double v52 = (unsigned __int16 *)a2 + v14 + v13;
    double v53 = (unsigned __int16 *)a2 + v14 + a5;
    double v54 = &a3->i32[v14];
    uint64_t v55 = v12 - v14;
    unint64_t v56 = (unsigned __int16 *)a2 + v14;
    do
    {
      int v58 = *v56++;
      int v57 = v58;
      int v59 = *v53++;
      int v60 = v59 + v57;
      int v61 = *v52++;
      *v54++ = v60 + v61;
      --v55;
    }
    while (v55);
    return result;
  }
  if (v5 != 5)
  {
    unint64_t v15 = (v5 * a5);
    unint64_t v16 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v15 < 1)
          {
            int v21 = 0;
            int v20 = 0;
            int v19 = 0;
            int v18 = 0;
            goto LABEL_53;
          }
          if (v15 >= 0x3D)
          {
            int32x4_t v72 = 0uLL;
            int32x4_t v73 = 0uLL;
            int32x4_t v74 = 0uLL;
            unint64_t v75 = ((v15 - 1) >> 2) + 1;
            int32x4_t v76 = 0uLL;
            int32x4_t v77 = 0uLL;
            unint64_t v17 = 4 * (v75 & 0x7FFFFFFFFFFFFFF0);
            int32x4_t v78 = 0uLL;
            i16 = a2[4].i16;
            int32x4_t v80 = 0uLL;
            uint64_t v81 = v75 & 0x7FFFFFFFFFFFFFF0;
            int32x4_t v82 = 0uLL;
            int32x4_t v83 = 0uLL;
            int32x4_t v84 = 0uLL;
            int32x4_t v85 = 0uLL;
            int32x4_t v86 = 0uLL;
            int32x4_t v87 = 0uLL;
            int32x4_t v88 = 0uLL;
            int32x4_t v89 = 0uLL;
            int32x4_t v90 = 0uLL;
            do
            {
              int8x8_t v91 = i16 - 32;
              int16x8x4_t v136 = vld4q_s16(v91);
              int16x8x4_t v137 = vld4q_s16(i16);
              int32x4_t v88 = (int32x4_t)vaddw_high_u16((uint32x4_t)v88, (uint16x8_t)v136.val[0]);
              int32x4_t v87 = (int32x4_t)vaddw_u16((uint32x4_t)v87, *(uint16x4_t *)v136.val[0].i8);
              int32x4_t v90 = (int32x4_t)vaddw_high_u16((uint32x4_t)v90, (uint16x8_t)v137.val[0]);
              int32x4_t v89 = (int32x4_t)vaddw_u16((uint32x4_t)v89, *(uint16x4_t *)v137.val[0].i8);
              int32x4_t v84 = (int32x4_t)vaddw_high_u16((uint32x4_t)v84, (uint16x8_t)v136.val[1]);
              int32x4_t v83 = (int32x4_t)vaddw_u16((uint32x4_t)v83, *(uint16x4_t *)v136.val[1].i8);
              int32x4_t v86 = (int32x4_t)vaddw_high_u16((uint32x4_t)v86, (uint16x8_t)v137.val[1]);
              int32x4_t v85 = (int32x4_t)vaddw_u16((uint32x4_t)v85, *(uint16x4_t *)v137.val[1].i8);
              int32x4_t v78 = (int32x4_t)vaddw_high_u16((uint32x4_t)v78, (uint16x8_t)v136.val[2]);
              int32x4_t v77 = (int32x4_t)vaddw_u16((uint32x4_t)v77, *(uint16x4_t *)v136.val[2].i8);
              int32x4_t v82 = (int32x4_t)vaddw_high_u16((uint32x4_t)v82, (uint16x8_t)v137.val[2]);
              int32x4_t v80 = (int32x4_t)vaddw_u16((uint32x4_t)v80, *(uint16x4_t *)v137.val[2].i8);
              int32x4_t v73 = (int32x4_t)vaddw_high_u16((uint32x4_t)v73, (uint16x8_t)v136.val[3]);
              int32x4_t v72 = (int32x4_t)vaddw_u16((uint32x4_t)v72, *(uint16x4_t *)v136.val[3].i8);
              int32x4_t v76 = (int32x4_t)vaddw_high_u16((uint32x4_t)v76, (uint16x8_t)v137.val[3]);
              int32x4_t v74 = (int32x4_t)vaddw_u16((uint32x4_t)v74, *(uint16x4_t *)v137.val[3].i8);
              i16 += 64;
              v81 -= 16;
            }
            while (v81);
            int v21 = vaddvq_s32(vaddq_s32(vaddq_s32(v89, v87), vaddq_s32(v90, v88)));
            int v20 = vaddvq_s32(vaddq_s32(vaddq_s32(v85, v83), vaddq_s32(v86, v84)));
            int v19 = vaddvq_s32(vaddq_s32(vaddq_s32(v80, v77), vaddq_s32(v82, v78)));
            int v18 = vaddvq_s32(vaddq_s32(vaddq_s32(v74, v72), vaddq_s32(v76, v73)));
            if (v75 == (v75 & 0x7FFFFFFFFFFFFFF0))
            {
LABEL_53:
              a3->i32[0] = v21;
              a3->i32[1] = v20;
              a3->i32[2] = v19;
              a3->i32[3] = v18;
              if ((int)v16 >= 1)
              {
                unint64_t v93 = 0;
                int8x8_t v94 = &a3[1].i32[3];
                int8x8_t v95 = &a2->u16[2];
                uint64_t v96 = (int)v15;
                do
                {
                  int v21 = v21 - *(v95 - 2) + v95[v96 - 2];
                  int v20 = v20 - *(v95 - 1) + v95[v96 - 1];
                  int v19 = v19 - *v95 + v95[v96];
                  unint64_t result = v95[1];
                  int v18 = v18 - result + v95[v96 + 1];
                  v93 += 4;
                  *(v94 - 3) = v21;
                  *(v94 - 2) = v20;
                  *(v94 - 1) = v19;
                  *int8x8_t v94 = v18;
                  v94 += 4;
                  v95 += 4;
                }
                while (v93 < v16);
              }
              return result;
            }
          }
          else
          {
            unint64_t v17 = 0;
            int v18 = 0;
            int v19 = 0;
            int v20 = 0;
            int v21 = 0;
          }
          int8x8_t v92 = &a2->u16[v17 + 2];
          do
          {
            v21 += *(v92 - 2);
            v20 += *(v92 - 1);
            v19 += *v92;
            v18 += v92[1];
            v17 += 4;
            v92 += 4;
          }
          while (v17 < v15);
          goto LABEL_53;
        }
        if (a5 < 1) {
          return result;
        }
        int v68 = 0;
        uint64_t v69 = &a3->i32[a5];
        while ((int)v15 < 1)
        {
          int v71 = 0;
          a3->i32[0] = 0;
          if ((int)v16 >= 1) {
            goto LABEL_42;
          }
LABEL_35:
          ++v68;
          a2 = (uint16x8_t *)((char *)a2 + 2);
          a3 = (uint32x4_t *)((char *)a3 + 4);
          ++v69;
          if (v68 == a5) {
            return result;
          }
        }
        uint64_t v70 = 0;
        int v71 = 0;
        do
        {
          unint64_t result = a2->u16[v70];
          v71 += result;
          v70 += a5;
        }
        while (v70 < (int)v15);
        a3->i32[0] = v71;
        if ((int)v16 < 1) {
          goto LABEL_35;
        }
LABEL_42:
        unint64_t result = 0;
        do
        {
          int v71 = v71 - a2->u16[result] + a2->u16[(int)v15 + result];
          v69[result] = v71;
          result += a5;
        }
        while (result < (int)v16);
        goto LABEL_35;
      }
      if ((int)v15 < 1)
      {
        int v67 = 0;
        int v66 = 0;
        int v65 = 0;
        goto LABEL_70;
      }
      if (v15 >= 0x2E)
      {
        int32x4_t v110 = 0uLL;
        int32x4_t v111 = 0uLL;
        int32x4_t v112 = 0uLL;
        uint64_t v113 = ((int)v15 - 1) / 3u + 1;
        int32x4_t v114 = 0uLL;
        int32x4_t v115 = 0uLL;
        int32x4_t v116 = 0uLL;
        unint64_t v64 = 3 * (v113 & 0x7FFFFFF0);
        float64x2_t v117 = (const __int16 *)a2;
        uint64_t v118 = v113 & 0x7FFFFFF0;
        int32x4_t v119 = 0uLL;
        int32x4_t v120 = 0uLL;
        int32x4_t v121 = 0uLL;
        int32x4_t v122 = 0uLL;
        int32x4_t v123 = 0uLL;
        int32x4_t v124 = 0uLL;
        do
        {
          float64x2_t v125 = v117;
          v117 += 48;
          int16x8x3_t v134 = vld3q_s16(v125);
          v125 += 24;
          int32x4_t v122 = (int32x4_t)vaddw_high_u16((uint32x4_t)v122, (uint16x8_t)v134.val[0]);
          int16x8x3_t v135 = vld3q_s16(v125);
          int32x4_t v121 = (int32x4_t)vaddw_u16((uint32x4_t)v121, *(uint16x4_t *)v134.val[0].i8);
          int32x4_t v124 = (int32x4_t)vaddw_high_u16((uint32x4_t)v124, (uint16x8_t)v135.val[0]);
          int32x4_t v123 = (int32x4_t)vaddw_u16((uint32x4_t)v123, *(uint16x4_t *)v135.val[0].i8);
          int32x4_t v116 = (int32x4_t)vaddw_high_u16((uint32x4_t)v116, (uint16x8_t)v134.val[1]);
          int32x4_t v115 = (int32x4_t)vaddw_u16((uint32x4_t)v115, *(uint16x4_t *)v134.val[1].i8);
          int32x4_t v120 = (int32x4_t)vaddw_high_u16((uint32x4_t)v120, (uint16x8_t)v135.val[1]);
          int32x4_t v119 = (int32x4_t)vaddw_u16((uint32x4_t)v119, *(uint16x4_t *)v135.val[1].i8);
          int32x4_t v111 = (int32x4_t)vaddw_high_u16((uint32x4_t)v111, (uint16x8_t)v134.val[2]);
          int32x4_t v110 = (int32x4_t)vaddw_u16((uint32x4_t)v110, *(uint16x4_t *)v134.val[2].i8);
          int32x4_t v114 = (int32x4_t)vaddw_high_u16((uint32x4_t)v114, (uint16x8_t)v135.val[2]);
          int32x4_t v112 = (int32x4_t)vaddw_u16((uint32x4_t)v112, *(uint16x4_t *)v135.val[2].i8);
          v118 -= 16;
        }
        while (v118);
        int v67 = vaddvq_s32(vaddq_s32(vaddq_s32(v123, v121), vaddq_s32(v124, v122)));
        int v66 = vaddvq_s32(vaddq_s32(vaddq_s32(v119, v115), vaddq_s32(v120, v116)));
        int v65 = vaddvq_s32(vaddq_s32(vaddq_s32(v112, v110), vaddq_s32(v114, v111)));
        if ((v113 & 0x7FFFFFF0) == v113)
        {
LABEL_70:
          a3->i32[0] = v67;
          a3->i32[1] = v66;
          a3->i32[2] = v65;
          if ((int)v16 >= 1)
          {
            i32 = a3[1].i32;
            float64x2_t v128 = &a2->u16[2];
            uint64_t v129 = (int)v15;
            uint64_t v130 = 5;
            do
            {
              int v67 = v67 - *(v128 - 2) + v128[v129 - 2];
              unint64_t result = *(v128 - 1);
              int v66 = v66 - result + v128[v129 - 1];
              int v131 = v128[v129];
              int v132 = *v128;
              v128 += 3;
              int v65 = v65 - v132 + v131;
              *(i32 - 1) = v67;
              int *i32 = v66;
              a3->i32[v130] = v65;
              unint64_t v133 = v130 - 2;
              v130 += 3;
              i32 += 3;
            }
            while (v133 < v16);
          }
          return result;
        }
      }
      else
      {
        unint64_t v64 = 0;
        int v65 = 0;
        int v66 = 0;
        int v67 = 0;
      }
      do
      {
        unsigned int v126 = (unsigned __int16 *)a2 + v64;
        v67 += *v126;
        v66 += v126[1];
        v65 += v126[2];
        v64 += 3;
      }
      while (v64 < v15);
      goto LABEL_70;
    }
    if ((int)v15 < 1)
    {
      int v63 = 0;
      goto LABEL_62;
    }
    if (v15 >= 0x10)
    {
      unint64_t v62 = v15 & 0x7FFFFFF0;
      int8x8_t v97 = a2 + 1;
      int32x4_t v98 = 0uLL;
      uint64_t v99 = v15 & 0xFFFFFFF0;
      int32x4_t v100 = 0uLL;
      int32x4_t v101 = 0uLL;
      int32x4_t v102 = 0uLL;
      do
      {
        uint16x8_t v103 = v97[-1];
        int32x4_t v100 = (int32x4_t)vaddw_high_u16((uint32x4_t)v100, v103);
        int32x4_t v98 = (int32x4_t)vaddw_u16((uint32x4_t)v98, *(uint16x4_t *)v103.i8);
        int32x4_t v102 = (int32x4_t)vaddw_high_u16((uint32x4_t)v102, *v97);
        int32x4_t v101 = (int32x4_t)vaddw_u16((uint32x4_t)v101, *(uint16x4_t *)v97->i8);
        v97 += 2;
        v99 -= 16;
      }
      while (v99);
      int v63 = vaddvq_s32(vaddq_s32(vaddq_s32(v101, v98), vaddq_s32(v102, v100)));
      if (v62 == v15)
      {
LABEL_62:
        a3->i32[0] = v63;
        if ((int)v16 >= 1)
        {
          uint64x2_t v107 = &a3->i32[1];
          do
          {
            int v108 = a2->u16[(int)v15];
            int v109 = a2->u16[0];
            a2 = (uint16x8_t *)((char *)a2 + 2);
            int v63 = v63 - v109 + v108;
            *v107++ = v63;
            --v16;
          }
          while (v16);
        }
        return result;
      }
    }
    else
    {
      unint64_t v62 = 0;
      int v63 = 0;
    }
    uint64x2_t v104 = (unsigned __int16 *)a2 + v62;
    unint64_t v105 = v15 - v62;
    do
    {
      int v106 = *v104++;
      v63 += v106;
      --v105;
    }
    while (v105);
    goto LABEL_62;
  }
  uint64_t v6 = (a5 * a4);
  if ((int)v6 < 1) {
    return result;
  }
  uint64_t v7 = a5;
  uint64_t v8 = 2 * a5;
  uint64_t v9 = 3 * a5;
  uint64_t v10 = 4 * a5;
  if (v6 < 8)
  {
    uint64_t v11 = 0;
LABEL_18:
    uint64_t v32 = 0;
    unint64_t v33 = (unsigned __int16 *)a2 + v11 + v10;
    BOOL v34 = (unsigned __int16 *)a2 + v11 + v9;
    BOOL v35 = (unsigned __int16 *)a2 + v11 + v8;
    BOOL v36 = (unsigned __int16 *)a2 + v11 + v7;
    BOOL v37 = &a3->i32[v11];
    uint64_t v38 = v6 - v11;
    BOOL v39 = (unsigned __int16 *)a2 + v11;
    do
    {
      unint64_t result = v35[v32] + v34[v32];
      v37[v32] = v36[v32] + v39[v32] + result + v33[v32];
      ++v32;
    }
    while (v38 != v32);
    return result;
  }
  uint64_t v11 = v6 & 0x7FFFFFF8;
  unint64_t result = v6 & 0xFFFFFFF8;
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  do
  {
    uint16x8_t v24 = *(uint16x8_t *)((char *)v23 + 2 * v7);
    uint32x4_t v25 = vaddl_high_u16(v24, *v23);
    uint32x4_t v26 = vaddl_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v23->i8);
    uint16x8_t v27 = *(uint16x8_t *)((char *)v23 + 2 * v8);
    uint32x4_t v28 = vaddw_u16(v26, *(uint16x4_t *)v27.i8);
    uint16x8_t v29 = *(uint16x8_t *)((char *)v23 + 2 * v9);
    uint32x4_t v30 = vaddw_high_u16(vaddw_high_u16(v25, v27), v29);
    uint16x8_t v31 = *(uint16x8_t *)((char *)v23 + 2 * v10);
    *uint64_t v22 = vaddw_u16(vaddw_u16(v28, *(uint16x4_t *)v29.i8), *(uint16x4_t *)v31.i8);
    v22[1] = vaddw_high_u16(v30, v31);
    v22 += 2;
    ++v23;
    result -= 8;
  }
  while (result);
  if (v11 != v6) {
    goto LABEL_18;
  }
  return result;
}

void sub_10038EA64()
{
}

uint64_t sub_10038EA78(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_10038EAFC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

float64_t sub_10038EB34(uint64_t a1, uint16x4_t *a2, void *a3, int a4, int a5, float64x2_t a6, float64x2_t a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  int v14 = *(_DWORD *)(a1 + 8);
  if (v14 == 3)
  {
    uint64_t v21 = (a5 * a4);
    if ((int)v21 < 1) {
      return a6.f64[0];
    }
    uint64_t v22 = 2 * a5;
    if (v21 >= 8)
    {
      uint64_t v23 = v21 & 0x7FFFFFF8;
      uint64_t v93 = v21 & 0xFFFFFFF8;
      int8x8_t v94 = (float64x2_t *)a3;
      int8x8_t v95 = a2;
      do
      {
        uint32x4_t v96 = vmovl_u16(*v95);
        v97.i64[0] = v96.u32[0];
        v97.i64[1] = v96.u32[1];
        float64x2_t v98 = vcvtq_f64_u64(v97);
        v97.i64[0] = v96.u32[2];
        v97.i64[1] = v96.u32[3];
        float64x2_t v99 = vcvtq_f64_u64(v97);
        uint32x4_t v100 = vmovl_high_u16(*(uint16x8_t *)v95->i8);
        v97.i64[0] = v100.u32[0];
        v97.i64[1] = v100.u32[1];
        float64x2_t v101 = vcvtq_f64_u64(v97);
        v97.i64[0] = v100.u32[2];
        v97.i64[1] = v100.u32[3];
        float64x2_t v102 = vcvtq_f64_u64(v97);
        uint16x8_t v103 = *(uint16x8_t *)&v95->i8[2 * a5];
        uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v103.i8);
        v97.i64[0] = v104.u32[0];
        v97.i64[1] = v104.u32[1];
        float64x2_t v105 = vcvtq_f64_u64(v97);
        v97.i64[0] = v104.u32[2];
        v97.i64[1] = v104.u32[3];
        float64x2_t v106 = vcvtq_f64_u64(v97);
        uint32x4_t v107 = vmovl_high_u16(v103);
        v97.i64[0] = v107.u32[0];
        v97.i64[1] = v107.u32[1];
        float64x2_t v108 = vcvtq_f64_u64(v97);
        v97.i64[0] = v107.u32[2];
        v97.i64[1] = v107.u32[3];
        float64x2_t v109 = vaddq_f64(v102, vcvtq_f64_u64(v97));
        float64x2_t v110 = vaddq_f64(v101, v108);
        float64x2_t v111 = vaddq_f64(v99, v106);
        float64x2_t v112 = vaddq_f64(v98, v105);
        uint16x8_t v113 = *(uint16x8_t *)&v95->i8[2 * v22];
        uint32x4_t v114 = vmovl_high_u16(v113);
        v97.i64[0] = v114.u32[2];
        v97.i64[1] = v114.u32[3];
        float64x2_t v115 = vcvtq_f64_u64(v97);
        v97.i64[0] = v114.u32[0];
        v97.i64[1] = v114.u32[1];
        float64x2_t v116 = vcvtq_f64_u64(v97);
        uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v113.i8);
        v97.i64[0] = v117.u32[2];
        v97.i64[1] = v117.u32[3];
        float64x2_t v118 = vcvtq_f64_u64(v97);
        v97.i64[0] = v117.u32[0];
        v97.i64[1] = v117.u32[1];
        v94[2] = vaddq_f64(v110, v116);
        v94[3] = vaddq_f64(v109, v115);
        a6 = vaddq_f64(v111, v118);
        *int8x8_t v94 = vaddq_f64(v112, vcvtq_f64_u64(v97));
        v94[1] = a6;
        v94 += 4;
        v95 += 2;
        v93 -= 8;
      }
      while (v93);
      if (v23 == v21) {
        return a6.f64[0];
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    int32x4_t v119 = (unsigned __int16 *)a2 + v23 + v22;
    int32x4_t v120 = (unsigned __int16 *)a2 + v23 + a5;
    int32x4_t v121 = &a3[v23];
    uint64_t v122 = v21 - v23;
    int32x4_t v123 = (unsigned __int16 *)a2 + v23;
    do
    {
      unsigned int v124 = *v123++;
      double v125 = (double)v124;
      unsigned int v126 = *v120++;
      double v127 = v125 + (double)v126;
      unsigned int v128 = *v119++;
      a6.f64[0] = v127 + (double)v128;
      *v121++ = *(void *)&a6.f64[0];
      --v122;
    }
    while (v122);
    return a6.f64[0];
  }
  if (v14 != 5)
  {
    unint64_t v24 = (v14 * a5);
    unint64_t v25 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v24 < 1)
          {
            double v29 = 0.0;
            double v28 = 0.0;
            double v27 = 0.0;
            a6.f64[0] = 0.0;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            a3[3] = 0;
            if ((int)v25 < 1) {
              return a6.f64[0];
            }
          }
          else
          {
            unint64_t v26 = 0;
            a6.f64[0] = 0.0;
            double v27 = 0.0;
            double v28 = 0.0;
            double v29 = 0.0;
            do
            {
              uint32x4_t v30 = &a2[v26 / 4];
              LOWORD(a10) = v30->i16[0];
              *(double *)&unint64_t v31 = (double)*(unint64_t *)&a10;
              double v29 = v29 + *(double *)&v31;
              LOWORD(v31) = v30->i16[1];
              *(double *)&unint64_t v32 = (double)v31;
              double v28 = v28 + *(double *)&v32;
              LOWORD(v32) = v30->i16[2];
              *(double *)&unint64_t v33 = (double)v32;
              double v27 = v27 + *(double *)&v33;
              LOWORD(v33) = v30->i16[3];
              a10 = (double)v33;
              a6.f64[0] = a6.f64[0] + a10;
              v26 += 4;
            }
            while (v26 < v24);
            *(double *)a3 = v29;
            *((double *)a3 + 1) = v28;
            *((double *)a3 + 2) = v27;
            a3[3] = *(void *)&a6.f64[0];
            if ((int)v25 < 1) {
              return a6.f64[0];
            }
          }
          unint64_t v137 = 0;
          float64x2_t v138 = (double *)(a3 + 7);
          float64x2_t v139 = (_WORD *)a2 + 2;
          uint64_t v140 = (int)v24;
          do
          {
            LOWORD(a10) = v139[v140 - 2];
            LOWORD(a11) = *(v139 - 2);
            *(double *)&unint64_t v141 = (double)*(unint64_t *)&a11;
            *(double *)&unint64_t v142 = (double)*(unint64_t *)&a10 - *(double *)&v141;
            double v29 = v29 + *(double *)&v142;
            LOWORD(v142) = v139[v140 - 1];
            LOWORD(v141) = *(v139 - 1);
            *(double *)&unint64_t v143 = (double)v141;
            *(double *)&unint64_t v144 = (double)v142 - *(double *)&v143;
            double v28 = v28 + *(double *)&v144;
            LOWORD(v144) = v139[v140];
            LOWORD(v143) = *v139;
            *(double *)&unint64_t v145 = (double)v143;
            *(double *)&unint64_t v146 = (double)v144 - *(double *)&v145;
            double v27 = v27 + *(double *)&v146;
            LOWORD(v146) = v139[v140 + 1];
            LOWORD(v145) = v139[1];
            a11 = (double)v145;
            a10 = (double)v146 - a11;
            a6.f64[0] = a6.f64[0] + a10;
            *(v138 - 3) = v29;
            *(v138 - 2) = v28;
            v137 += 4;
            *(v138 - 1) = v27;
            *float64x2_t v138 = a6.f64[0];
            v138 += 4;
            v139 += 4;
          }
          while (v137 < v25);
          return a6.f64[0];
        }
        if (a5 < 1) {
          return a6.f64[0];
        }
        int v133 = 0;
        int16x8x3_t v134 = &a3[a5];
        while ((int)v24 < 1)
        {
          a6.f64[0] = 0.0;
          *a3 = 0;
          if ((int)v25 >= 1) {
            goto LABEL_44;
          }
LABEL_37:
          ++v133;
          a2 = (uint16x4_t *)((char *)a2 + 2);
          ++a3;
          ++v134;
          if (v133 == a5) {
            return a6.f64[0];
          }
        }
        uint64_t v135 = 0;
        a6.f64[0] = 0.0;
        do
        {
          LOWORD(a7.f64[0]) = a2->i16[v135];
          a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
          a6.f64[0] = a6.f64[0] + a7.f64[0];
          v135 += a5;
        }
        while (v135 < (int)v24);
        *a3 = *(void *)&a6.f64[0];
        if ((int)v25 < 1) {
          goto LABEL_37;
        }
LABEL_44:
        uint64_t v136 = 0;
        do
        {
          LOWORD(a7.f64[0]) = a2->i16[(int)v24 + v136];
          LOWORD(a8) = a2->i16[v136];
          a8 = (double)*(unint64_t *)&a8;
          a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - a8;
          a6.f64[0] = a6.f64[0] + a7.f64[0];
          v134[v136] = *(void *)&a6.f64[0];
          v136 += a5;
        }
        while (v136 < (int)v25);
        goto LABEL_37;
      }
      if ((int)v24 < 1)
      {
        double v132 = 0.0;
        double v131 = 0.0;
        a6.f64[0] = 0.0;
        goto LABEL_66;
      }
      if (v24 >= 4)
      {
        uint64_t v153 = ((int)v24 - 1) / 3u + 1;
        unint64_t v130 = 3 * (v153 & 0x7FFFFFFE);
        float64x2_t v154 = (_WORD *)a2 + 3;
        a6.f64[0] = 0.0;
        uint64_t v155 = v153 & 0x7FFFFFFE;
        double v131 = 0.0;
        double v132 = 0.0;
        do
        {
          LOWORD(a9) = *(v154 - 3);
          a9 = (double)*(unint64_t *)&a9;
          LOWORD(a10) = *v154;
          a10 = (double)*(unint64_t *)&a10;
          LOWORD(a11) = *(v154 - 2);
          a11 = (double)*(unint64_t *)&a11;
          LOWORD(a12) = v154[1];
          a12 = (double)*(unint64_t *)&a12;
          LOWORD(a13) = *(v154 - 1);
          a13 = (double)*(unint64_t *)&a13;
          LOWORD(v13) = v154[2];
          double v13 = (double)*(unint64_t *)&v13;
          a6.f64[0] = a6.f64[0] + a13 + v13;
          double v131 = v131 + a11 + a12;
          double v132 = v132 + a9 + a10;
          v154 += 6;
          v155 -= 2;
        }
        while (v155);
        if ((v153 & 0x7FFFFFFE) == v153)
        {
LABEL_66:
          *(double *)a3 = v132;
          *((double *)a3 + 1) = v131;
          a3[2] = *(void *)&a6.f64[0];
          if ((int)v25 >= 1)
          {
            int8x8_t v159 = (double *)(a3 + 4);
            float64x2_t v160 = (_WORD *)a2 + 2;
            uint64_t v161 = (int)v24;
            uint64_t v162 = 5;
            do
            {
              LOWORD(a9) = v160[v161 - 2];
              LOWORD(a10) = *(v160 - 2);
              *(double *)&unint64_t v163 = (double)*(unint64_t *)&a10;
              *(double *)&unint64_t v164 = (double)*(unint64_t *)&a9 - *(double *)&v163;
              double v132 = v132 + *(double *)&v164;
              LOWORD(v164) = v160[v161 - 1];
              LOWORD(v163) = *(v160 - 1);
              *(double *)&unint64_t v165 = (double)v163;
              *(double *)&unint64_t v166 = (double)v164 - *(double *)&v165;
              double v131 = v131 + *(double *)&v166;
              LOWORD(v166) = v160[v161];
              LOWORD(v165) = *v160;
              a10 = (double)v165;
              a9 = (double)v166 - a10;
              a6.f64[0] = a6.f64[0] + a9;
              *(v159 - 1) = v132;
              *int8x8_t v159 = v131;
              a3[v162] = *(void *)&a6.f64[0];
              unint64_t v167 = v162 - 2;
              v162 += 3;
              v159 += 3;
              v160 += 3;
            }
            while (v167 < v25);
          }
          return a6.f64[0];
        }
      }
      else
      {
        unint64_t v130 = 0;
        a6.f64[0] = 0.0;
        double v131 = 0.0;
        double v132 = 0.0;
      }
      do
      {
        float64x2_t v156 = (_WORD *)a2 + v130;
        LOWORD(a9) = *v156;
        *(double *)&unint64_t v157 = (double)*(unint64_t *)&a9;
        double v132 = v132 + *(double *)&v157;
        LOWORD(v157) = v156[1];
        *(double *)&unint64_t v158 = (double)v157;
        double v131 = v131 + *(double *)&v158;
        LOWORD(v158) = v156[2];
        a9 = (double)v158;
        a6.f64[0] = a6.f64[0] + a9;
        v130 += 3;
      }
      while (v130 < v24);
      goto LABEL_66;
    }
    if ((int)v24 < 1)
    {
      a6.f64[0] = 0.0;
      goto LABEL_58;
    }
    if (v24 == 1)
    {
      uint64_t v129 = 0;
      a6.f64[0] = 0.0;
    }
    else
    {
      uint64_t v129 = v24 & 0xFFFFFFFE;
      int8x8_t v147 = (_WORD *)a2 + 1;
      a6.f64[0] = 0.0;
      uint64_t v148 = v129;
      do
      {
        LOWORD(a7.f64[0]) = *(v147 - 1);
        a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
        LOWORD(a8) = *v147;
        a8 = (double)*(unint64_t *)&a8;
        a6.f64[0] = a6.f64[0] + a7.f64[0] + a8;
        v147 += 2;
        v148 -= 2;
      }
      while (v148);
      if (v129 == v24)
      {
LABEL_58:
        *a3 = *(void *)&a6.f64[0];
        if ((int)v25 >= 1)
        {
          int8x8_t v152 = a3 + 1;
          do
          {
            LOWORD(a7.f64[0]) = a2->i16[(int)v24];
            LOWORD(a8) = a2->i16[0];
            a8 = (double)*(unint64_t *)&a8;
            a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - a8;
            a6.f64[0] = a6.f64[0] + a7.f64[0];
            *v152++ = *(void *)&a6.f64[0];
            a2 = (uint16x4_t *)((char *)a2 + 2);
            --v25;
          }
          while (v25);
        }
        return a6.f64[0];
      }
    }
    int8x8_t v149 = (unsigned __int16 *)a2 + v129;
    uint64_t v150 = v24 - v129;
    do
    {
      unsigned int v151 = *v149++;
      a7.f64[0] = (double)v151;
      a6.f64[0] = a6.f64[0] + (double)v151;
      --v150;
    }
    while (v150);
    goto LABEL_58;
  }
  uint64_t v15 = (a5 * a4);
  if ((int)v15 < 1) {
    return a6.f64[0];
  }
  uint64_t v16 = a5;
  uint64_t v17 = 2 * a5;
  uint64_t v18 = 3 * a5;
  uint64_t v19 = a5;
  if (v15 < 8)
  {
    uint64_t v20 = 0;
LABEL_20:
    uint64_t v79 = 0;
    int32x4_t v80 = (_WORD *)a2 + v20 + v19 * 4;
    uint64_t v81 = (_WORD *)a2 + v20 + v18;
    int32x4_t v82 = (_WORD *)a2 + v20 + v17;
    int32x4_t v83 = (_WORD *)a2 + v20 + v16;
    int32x4_t v84 = &a3[v20];
    uint64_t v85 = v15 - v20;
    int32x4_t v86 = (_WORD *)a2 + v20;
    do
    {
      LOWORD(a6.f64[0]) = v86[v79];
      LOWORD(a7.f64[0]) = v83[v79];
      *(double *)&unint64_t v87 = (double)*(unint64_t *)&a7.f64[0];
      double v88 = (double)*(unint64_t *)&a6.f64[0] + *(double *)&v87;
      LOWORD(v87) = v82[v79];
      *(double *)&unint64_t v89 = (double)v87;
      double v90 = v88 + *(double *)&v89;
      LOWORD(v89) = v81[v79];
      *(double *)&unint64_t v91 = (double)v89;
      double v92 = v90 + *(double *)&v91;
      LOWORD(v91) = v80[v79];
      a7.f64[0] = (double)v91;
      a6.f64[0] = v92 + a7.f64[0];
      v84[v79++] = *(void *)&a6.f64[0];
    }
    while (v85 != v79);
    return a6.f64[0];
  }
  uint64_t v20 = v15 & 0x7FFFFFF8;
  uint64_t v34 = v15 & 0xFFFFFFF8;
  BOOL v35 = (float64x2_t *)a3;
  BOOL v36 = a2;
  do
  {
    uint32x4_t v37 = vmovl_u16(*v36);
    v38.i64[0] = v37.u32[0];
    v38.i64[1] = v37.u32[1];
    float64x2_t v39 = vcvtq_f64_u64(v38);
    v38.i64[0] = v37.u32[2];
    v38.i64[1] = v37.u32[3];
    float64x2_t v40 = vcvtq_f64_u64(v38);
    uint32x4_t v41 = vmovl_high_u16(*(uint16x8_t *)v36->i8);
    v38.i64[0] = v41.u32[0];
    v38.i64[1] = v41.u32[1];
    float64x2_t v42 = vcvtq_f64_u64(v38);
    v38.i64[0] = v41.u32[2];
    v38.i64[1] = v41.u32[3];
    float64x2_t v43 = vcvtq_f64_u64(v38);
    uint16x8_t v44 = *(uint16x8_t *)&v36->i8[2 * v16];
    uint32x4_t v45 = vmovl_u16(*(uint16x4_t *)v44.i8);
    v38.i64[0] = v45.u32[0];
    v38.i64[1] = v45.u32[1];
    float64x2_t v46 = vcvtq_f64_u64(v38);
    v38.i64[0] = v45.u32[2];
    v38.i64[1] = v45.u32[3];
    float64x2_t v47 = vcvtq_f64_u64(v38);
    uint32x4_t v48 = vmovl_high_u16(v44);
    v38.i64[0] = v48.u32[0];
    v38.i64[1] = v48.u32[1];
    float64x2_t v49 = vcvtq_f64_u64(v38);
    v38.i64[0] = v48.u32[2];
    v38.i64[1] = v48.u32[3];
    float64x2_t v50 = vaddq_f64(v43, vcvtq_f64_u64(v38));
    float64x2_t v51 = vaddq_f64(v42, v49);
    float64x2_t v52 = vaddq_f64(v40, v47);
    uint16x8_t v53 = *(uint16x8_t *)&v36->i8[2 * v17];
    float64x2_t v54 = vaddq_f64(v39, v46);
    uint32x4_t v55 = vmovl_high_u16(v53);
    v38.i64[0] = v55.u32[2];
    v38.i64[1] = v55.u32[3];
    float64x2_t v56 = vcvtq_f64_u64(v38);
    v38.i64[0] = v55.u32[0];
    v38.i64[1] = v55.u32[1];
    float64x2_t v57 = vcvtq_f64_u64(v38);
    uint32x4_t v58 = vmovl_u16(*(uint16x4_t *)v53.i8);
    v38.i64[0] = v58.u32[2];
    v38.i64[1] = v58.u32[3];
    float64x2_t v59 = vcvtq_f64_u64(v38);
    v38.i64[0] = v58.u32[0];
    v38.i64[1] = v58.u32[1];
    float64x2_t v60 = vaddq_f64(v54, vcvtq_f64_u64(v38));
    float64x2_t v61 = vaddq_f64(v52, v59);
    float64x2_t v62 = vaddq_f64(v51, v57);
    float64x2_t v63 = vaddq_f64(v50, v56);
    uint16x8_t v64 = *(uint16x8_t *)&v36->i8[2 * v18];
    uint32x4_t v65 = vmovl_u16(*(uint16x4_t *)v64.i8);
    v38.i64[0] = v65.u32[0];
    v38.i64[1] = v65.u32[1];
    float64x2_t v66 = vcvtq_f64_u64(v38);
    v38.i64[0] = v65.u32[2];
    v38.i64[1] = v65.u32[3];
    float64x2_t v67 = vcvtq_f64_u64(v38);
    uint32x4_t v68 = vmovl_high_u16(v64);
    v38.i64[0] = v68.u32[0];
    v38.i64[1] = v68.u32[1];
    float64x2_t v69 = vcvtq_f64_u64(v38);
    v38.i64[0] = v68.u32[2];
    v38.i64[1] = v68.u32[3];
    float64x2_t v70 = vaddq_f64(v63, vcvtq_f64_u64(v38));
    float64x2_t v71 = vaddq_f64(v62, v69);
    a7 = vaddq_f64(v61, v67);
    float64x2_t v72 = vaddq_f64(v60, v66);
    uint16x8_t v73 = *(uint16x8_t *)v36[v19].i8;
    uint32x4_t v74 = vmovl_high_u16(v73);
    v38.i64[0] = v74.u32[2];
    v38.i64[1] = v74.u32[3];
    float64x2_t v75 = vcvtq_f64_u64(v38);
    v38.i64[0] = v74.u32[0];
    v38.i64[1] = v74.u32[1];
    float64x2_t v76 = vcvtq_f64_u64(v38);
    uint32x4_t v77 = vmovl_u16(*(uint16x4_t *)v73.i8);
    v38.i64[0] = v77.u32[2];
    v38.i64[1] = v77.u32[3];
    float64x2_t v78 = vcvtq_f64_u64(v38);
    v38.i64[0] = v77.u32[0];
    v38.i64[1] = v77.u32[1];
    _DWORD v35[2] = vaddq_f64(v71, v76);
    v35[3] = vaddq_f64(v70, v75);
    a6 = vaddq_f64(a7, v78);
    *BOOL v35 = vaddq_f64(v72, vcvtq_f64_u64(v38));
    v35[1] = a6;
    v35 += 4;
    v36 += 2;
    v34 -= 8;
  }
  while (v34);
  if (v20 != v15) {
    goto LABEL_20;
  }
  return a6.f64[0];
}

void sub_10038F2F0()
{
}

uint64_t sub_10038F304(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_10038F388(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_10038F3C0(uint64_t result, int16x8_t *a2, int32x4_t *a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    uint64_t v12 = (a5 * a4);
    if ((int)v12 < 1) {
      return result;
    }
    uint64_t v13 = 2 * a5;
    if (v12 >= 0x10)
    {
      uint64_t v14 = v12 & 0x7FFFFFF0;
      float64x2_t v40 = a2 + 1;
      uint32x4_t v41 = a3 + 2;
      uint64_t v42 = v12 & 0xFFFFFFF0;
      do
      {
        int16x8_t v43 = v40[-1];
        int16x8_t v44 = *(int16x8_t *)((char *)v40 + 2 * a5 - 16);
        int16x8_t v45 = *(int16x8_t *)((char *)v40 + 2 * a5);
        int32x4_t v46 = vaddl_high_s16(v44, v43);
        int32x4_t v47 = vaddl_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v43.i8);
        int32x4_t v48 = vaddl_high_s16(v45, *v40);
        int32x4_t v49 = vaddl_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v40->i8);
        int16x8_t v50 = *(int16x8_t *)((char *)v40 + 2 * v13 - 16);
        int16x8_t v51 = *(int16x8_t *)((char *)v40 + 2 * v13);
        v41[-2] = vaddw_s16(v47, *(int16x4_t *)v50.i8);
        v41[-1] = vaddw_high_s16(v46, v50);
        int32x4_t *v41 = vaddw_s16(v49, *(int16x4_t *)v51.i8);
        v41[1] = vaddw_high_s16(v48, v51);
        v41 += 4;
        v40 += 2;
        v42 -= 16;
      }
      while (v42);
      if (v14 == v12) {
        return result;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    float64x2_t v52 = &a2->i16[v14 + v13];
    uint16x8_t v53 = &a2->i16[v14 + a5];
    float64x2_t v54 = &a3->i32[v14];
    uint64_t v55 = v12 - v14;
    float64x2_t v56 = &a2->i16[v14];
    do
    {
      int v58 = *v56++;
      int v57 = v58;
      int v59 = *v53++;
      int v60 = v59 + v57;
      int v61 = *v52++;
      *v54++ = v60 + v61;
      --v55;
    }
    while (v55);
    return result;
  }
  if (v5 != 5)
  {
    unint64_t v15 = (v5 * a5);
    unint64_t v16 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v15 < 1)
          {
            int v21 = 0;
            int v20 = 0;
            int v19 = 0;
            int v18 = 0;
            goto LABEL_53;
          }
          if (v15 >= 0x3D)
          {
            int32x4_t v72 = 0uLL;
            int32x4_t v73 = 0uLL;
            int32x4_t v74 = 0uLL;
            unint64_t v75 = ((v15 - 1) >> 2) + 1;
            int32x4_t v76 = 0uLL;
            int32x4_t v77 = 0uLL;
            unint64_t v17 = 4 * (v75 & 0x7FFFFFFFFFFFFFF0);
            int32x4_t v78 = 0uLL;
            i16 = a2[4].i16;
            int32x4_t v80 = 0uLL;
            uint64_t v81 = v75 & 0x7FFFFFFFFFFFFFF0;
            int32x4_t v82 = 0uLL;
            int32x4_t v83 = 0uLL;
            int32x4_t v84 = 0uLL;
            int32x4_t v85 = 0uLL;
            int32x4_t v86 = 0uLL;
            int32x4_t v87 = 0uLL;
            int32x4_t v88 = 0uLL;
            int32x4_t v89 = 0uLL;
            int32x4_t v90 = 0uLL;
            do
            {
              unint64_t v91 = i16 - 32;
              int16x8x4_t v132 = vld4q_s16(v91);
              int16x8x4_t v133 = vld4q_s16(i16);
              int32x4_t v88 = vaddw_high_s16(v88, v132.val[0]);
              int32x4_t v87 = vaddw_s16(v87, *(int16x4_t *)v132.val[0].i8);
              int32x4_t v90 = vaddw_high_s16(v90, v133.val[0]);
              int32x4_t v89 = vaddw_s16(v89, *(int16x4_t *)v133.val[0].i8);
              int32x4_t v84 = vaddw_high_s16(v84, v132.val[1]);
              int32x4_t v83 = vaddw_s16(v83, *(int16x4_t *)v132.val[1].i8);
              int32x4_t v86 = vaddw_high_s16(v86, v133.val[1]);
              int32x4_t v85 = vaddw_s16(v85, *(int16x4_t *)v133.val[1].i8);
              int32x4_t v78 = vaddw_high_s16(v78, v132.val[2]);
              int32x4_t v77 = vaddw_s16(v77, *(int16x4_t *)v132.val[2].i8);
              int32x4_t v82 = vaddw_high_s16(v82, v133.val[2]);
              int32x4_t v80 = vaddw_s16(v80, *(int16x4_t *)v133.val[2].i8);
              int32x4_t v73 = vaddw_high_s16(v73, v132.val[3]);
              int32x4_t v72 = vaddw_s16(v72, *(int16x4_t *)v132.val[3].i8);
              int32x4_t v76 = vaddw_high_s16(v76, v133.val[3]);
              int32x4_t v74 = vaddw_s16(v74, *(int16x4_t *)v133.val[3].i8);
              i16 += 64;
              v81 -= 16;
            }
            while (v81);
            int v21 = vaddvq_s32(vaddq_s32(vaddq_s32(v89, v87), vaddq_s32(v90, v88)));
            int v20 = vaddvq_s32(vaddq_s32(vaddq_s32(v85, v83), vaddq_s32(v86, v84)));
            int v19 = vaddvq_s32(vaddq_s32(vaddq_s32(v80, v77), vaddq_s32(v82, v78)));
            int v18 = vaddvq_s32(vaddq_s32(vaddq_s32(v74, v72), vaddq_s32(v76, v73)));
            if (v75 == (v75 & 0x7FFFFFFFFFFFFFF0))
            {
LABEL_53:
              a3->i32[0] = v21;
              a3->i32[1] = v20;
              a3->i32[2] = v19;
              a3->i32[3] = v18;
              if ((int)v16 >= 1)
              {
                unint64_t v93 = 0;
                int8x8_t v94 = &a3[1].i32[3];
                int8x8_t v95 = &a2->i16[2];
                uint64_t v96 = (int)v15;
                do
                {
                  int v21 = v21 - *(v95 - 2) + v95[v96 - 2];
                  int v20 = v20 - *(v95 - 1) + v95[v96 - 1];
                  int v19 = v19 - *v95 + v95[v96];
                  unint64_t result = v95[1];
                  int v18 = v18 - result + v95[v96 + 1];
                  v93 += 4;
                  *(v94 - 3) = v21;
                  *(v94 - 2) = v20;
                  *(v94 - 1) = v19;
                  *int8x8_t v94 = v18;
                  v94 += 4;
                  v95 += 4;
                }
                while (v93 < v16);
              }
              return result;
            }
          }
          else
          {
            unint64_t v17 = 0;
            int v18 = 0;
            int v19 = 0;
            int v20 = 0;
            int v21 = 0;
          }
          double v92 = &a2->i16[v17 + 2];
          do
          {
            v21 += *(v92 - 2);
            v20 += *(v92 - 1);
            v19 += *v92;
            v18 += v92[1];
            v17 += 4;
            v92 += 4;
          }
          while (v17 < v15);
          goto LABEL_53;
        }
        if (a5 < 1) {
          return result;
        }
        int v68 = 0;
        float64x2_t v69 = &a3->i32[a5];
        while ((int)v15 < 1)
        {
          int v71 = 0;
          a3->i32[0] = 0;
          if ((int)v16 >= 1) {
            goto LABEL_42;
          }
LABEL_35:
          ++v68;
          a2 = (int16x8_t *)((char *)a2 + 2);
          a3 = (int32x4_t *)((char *)a3 + 4);
          ++v69;
          if (v68 == a5) {
            return result;
          }
        }
        uint64_t v70 = 0;
        int v71 = 0;
        do
        {
          unint64_t result = a2->i16[v70];
          v71 += result;
          v70 += a5;
        }
        while (v70 < (int)v15);
        a3->i32[0] = v71;
        if ((int)v16 < 1) {
          goto LABEL_35;
        }
LABEL_42:
        unint64_t result = 0;
        do
        {
          int v71 = v71 - a2->i16[result] + a2->i16[(int)v15 + result];
          v69[result] = v71;
          result += a5;
        }
        while (result < (int)v16);
        goto LABEL_35;
      }
      if ((int)v15 < 1)
      {
        int v67 = 0;
        int v66 = 0;
        int v65 = 0;
        goto LABEL_70;
      }
      if (v15 >= 0x2E)
      {
        int32x4_t v108 = 0uLL;
        int32x4_t v109 = 0uLL;
        int32x4_t v110 = 0uLL;
        uint64_t v111 = ((int)v15 - 1) / 3u + 1;
        int32x4_t v112 = 0uLL;
        int32x4_t v113 = 0uLL;
        int32x4_t v114 = 0uLL;
        unint64_t v64 = 3 * (v111 & 0x7FFFFFF0);
        float64x2_t v115 = (const __int16 *)a2;
        uint64_t v116 = v111 & 0x7FFFFFF0;
        int32x4_t v117 = 0uLL;
        int32x4_t v118 = 0uLL;
        int32x4_t v119 = 0uLL;
        int32x4_t v120 = 0uLL;
        int32x4_t v121 = 0uLL;
        int32x4_t v122 = 0uLL;
        do
        {
          int32x4_t v123 = v115;
          v115 += 48;
          int16x8x3_t v130 = vld3q_s16(v123);
          v123 += 24;
          int32x4_t v120 = vaddw_high_s16(v120, v130.val[0]);
          int16x8x3_t v131 = vld3q_s16(v123);
          int32x4_t v119 = vaddw_s16(v119, *(int16x4_t *)v130.val[0].i8);
          int32x4_t v122 = vaddw_high_s16(v122, v131.val[0]);
          int32x4_t v121 = vaddw_s16(v121, *(int16x4_t *)v131.val[0].i8);
          int32x4_t v114 = vaddw_high_s16(v114, v130.val[1]);
          int32x4_t v113 = vaddw_s16(v113, *(int16x4_t *)v130.val[1].i8);
          int32x4_t v118 = vaddw_high_s16(v118, v131.val[1]);
          int32x4_t v117 = vaddw_s16(v117, *(int16x4_t *)v131.val[1].i8);
          int32x4_t v109 = vaddw_high_s16(v109, v130.val[2]);
          int32x4_t v108 = vaddw_s16(v108, *(int16x4_t *)v130.val[2].i8);
          int32x4_t v112 = vaddw_high_s16(v112, v131.val[2]);
          int32x4_t v110 = vaddw_s16(v110, *(int16x4_t *)v131.val[2].i8);
          v116 -= 16;
        }
        while (v116);
        int v67 = vaddvq_s32(vaddq_s32(vaddq_s32(v121, v119), vaddq_s32(v122, v120)));
        int v66 = vaddvq_s32(vaddq_s32(vaddq_s32(v117, v113), vaddq_s32(v118, v114)));
        int v65 = vaddvq_s32(vaddq_s32(vaddq_s32(v110, v108), vaddq_s32(v112, v109)));
        if ((v111 & 0x7FFFFFF0) == v111)
        {
LABEL_70:
          a3->i32[0] = v67;
          a3->i32[1] = v66;
          a3->i32[2] = v65;
          if ((int)v16 >= 1)
          {
            i32 = a3[1].i32;
            unsigned int v126 = &a2->i16[2];
            uint64_t v127 = (int)v15;
            uint64_t v128 = 5;
            do
            {
              int v67 = v67 - *(v126 - 2) + v126[v127 - 2];
              unint64_t result = *(v126 - 1);
              int v66 = v66 - result + v126[v127 - 1];
              int v65 = v65 - *v126 + v126[v127];
              *(i32 - 1) = v67;
              int *i32 = v66;
              a3->i32[v128] = v65;
              unint64_t v129 = v128 - 2;
              v128 += 3;
              i32 += 3;
              v126 += 3;
            }
            while (v129 < v16);
          }
          return result;
        }
      }
      else
      {
        unint64_t v64 = 0;
        int v65 = 0;
        int v66 = 0;
        int v67 = 0;
      }
      do
      {
        unsigned int v124 = &a2->i16[v64];
        v67 += *v124;
        v66 += v124[1];
        v65 += v124[2];
        v64 += 3;
      }
      while (v64 < v15);
      goto LABEL_70;
    }
    if ((int)v15 < 1)
    {
      int v63 = 0;
      goto LABEL_62;
    }
    if (v15 >= 0x10)
    {
      unint64_t v62 = v15 & 0x7FFFFFF0;
      uint64x2_t v97 = a2 + 1;
      int32x4_t v98 = 0uLL;
      uint64_t v99 = v15 & 0xFFFFFFF0;
      int32x4_t v100 = 0uLL;
      int32x4_t v101 = 0uLL;
      int32x4_t v102 = 0uLL;
      do
      {
        int16x8_t v103 = v97[-1];
        int32x4_t v100 = vaddw_high_s16(v100, v103);
        int32x4_t v98 = vaddw_s16(v98, *(int16x4_t *)v103.i8);
        int32x4_t v102 = vaddw_high_s16(v102, *v97);
        int32x4_t v101 = vaddw_s16(v101, *(int16x4_t *)v97->i8);
        v97 += 2;
        v99 -= 16;
      }
      while (v99);
      int v63 = vaddvq_s32(vaddq_s32(vaddq_s32(v101, v98), vaddq_s32(v102, v100)));
      if (v62 == v15)
      {
LABEL_62:
        a3->i32[0] = v63;
        if ((int)v16 >= 1)
        {
          uint32x4_t v107 = &a3->i32[1];
          do
          {
            int v63 = v63 - a2->i16[0] + a2->i16[(int)v15];
            *v107++ = v63;
            a2 = (int16x8_t *)((char *)a2 + 2);
            --v16;
          }
          while (v16);
        }
        return result;
      }
    }
    else
    {
      unint64_t v62 = 0;
      int v63 = 0;
    }
    uint32x4_t v104 = &a2->i16[v62];
    unint64_t v105 = v15 - v62;
    do
    {
      int v106 = *v104++;
      v63 += v106;
      --v105;
    }
    while (v105);
    goto LABEL_62;
  }
  uint64_t v6 = (a5 * a4);
  if ((int)v6 < 1) {
    return result;
  }
  uint64_t v7 = a5;
  uint64_t v8 = 2 * a5;
  uint64_t v9 = 3 * a5;
  uint64_t v10 = 4 * a5;
  if (v6 < 8)
  {
    uint64_t v11 = 0;
LABEL_18:
    uint64_t v32 = 0;
    unint64_t v33 = &a2->i16[v11 + v10];
    uint64_t v34 = &a2->i16[v11 + v9];
    BOOL v35 = &a2->i16[v11 + v8];
    BOOL v36 = &a2->i16[v11 + v7];
    uint32x4_t v37 = &a3->i32[v11];
    uint64_t v38 = v6 - v11;
    float64x2_t v39 = &a2->i16[v11];
    do
    {
      unint64_t result = (v35[v32] + v34[v32]);
      v37[v32] = v36[v32] + v39[v32] + result + v33[v32];
      ++v32;
    }
    while (v38 != v32);
    return result;
  }
  uint64_t v11 = v6 & 0x7FFFFFF8;
  unint64_t result = v6 & 0xFFFFFFF8;
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  do
  {
    int16x8_t v24 = *(int16x8_t *)((char *)v23 + 2 * v7);
    int32x4_t v25 = vaddl_high_s16(v24, *v23);
    int32x4_t v26 = vaddl_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v23->i8);
    int16x8_t v27 = *(int16x8_t *)((char *)v23 + 2 * v8);
    int32x4_t v28 = vaddw_s16(v26, *(int16x4_t *)v27.i8);
    int16x8_t v29 = *(int16x8_t *)((char *)v23 + 2 * v9);
    int32x4_t v30 = vaddw_high_s16(vaddw_high_s16(v25, v27), v29);
    int16x8_t v31 = *(int16x8_t *)((char *)v23 + 2 * v10);
    *uint64_t v22 = vaddw_s16(vaddw_s16(v28, *(int16x4_t *)v29.i8), *(int16x4_t *)v31.i8);
    v22[1] = vaddw_high_s16(v30, v31);
    v22 += 2;
    ++v23;
    result -= 8;
  }
  while (result);
  if (v11 != v6) {
    goto LABEL_18;
  }
  return result;
}

void sub_10038FB14()
{
}

uint64_t sub_10038FB28(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_10038FBAC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

unint64_t sub_10038FBE4(unint64_t result, int *a2, int *a3, int a4, int a5)
{
  __int32 v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    uint64_t v12 = (a5 * a4);
    if ((int)v12 < 1) {
      return result;
    }
    uint64_t v13 = 2 * a5;
    if (v12 >= 0xC)
    {
      uint64_t v14 = 0;
      if ((unint64_t)((char *)a3 - (char *)a2 - 4 * v13) >= 0x20
        && (unint64_t)((char *)a3 - (char *)a2 - 4 * a5) >= 0x20
        && (unint64_t)((char *)a3 - (char *)a2) >= 0x20)
      {
        uint64_t v14 = v12 & 0x7FFFFFF8;
        int16x8_t v31 = (int32x4_t *)(a2 + 4);
        uint64_t v32 = (int32x4_t *)(a3 + 4);
        uint64_t v33 = v12 & 0xFFFFFFF8;
        do
        {
          int32x4_t v34 = vaddq_s32(vaddq_s32(*(int32x4_t *)((char *)v31 + 4 * a5), *v31), *(int32x4_t *)((char *)v31 + 4 * v13));
          v32[-1] = vaddq_s32(vaddq_s32(*(int32x4_t *)((char *)v31 + 4 * a5 - 16), v31[-1]), *(int32x4_t *)((char *)v31 + 4 * v13 - 16));
          *uint64_t v32 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 8;
        }
        while (v33);
        if (v14 == v12) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    BOOL v35 = &a2[v14 + v13];
    BOOL v36 = &a3[v14];
    uint32x4_t v37 = &a2[v14];
    uint64_t v38 = v12 - v14;
    float64x2_t v39 = &a2[v14 + a5];
    do
    {
      int v41 = *v37++;
      int v40 = v41;
      int v42 = *v39++;
      int v43 = v42 + v40;
      int v44 = *v35++;
      *v36++ = v43 + v44;
      --v38;
    }
    while (v38);
    return result;
  }
  if (v5 != 5)
  {
    unint64_t v15 = (v5 * a5);
    unint64_t v16 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v15 < 1)
          {
            int v21 = 0;
            int v20 = 0;
            int v19 = 0;
            int v18 = 0;
            goto LABEL_61;
          }
          if (v15 >= 0x1D)
          {
            int32x4_t v57 = 0uLL;
            int32x4_t v58 = 0uLL;
            unint64_t v59 = ((v15 - 1) >> 2) + 1;
            unint64_t v17 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
            int v60 = (const float *)(a2 + 16);
            uint64_t v61 = v59 & 0x7FFFFFFFFFFFFFF8;
            int32x4_t v62 = 0uLL;
            int32x4_t v63 = 0uLL;
            int32x4_t v64 = 0uLL;
            int32x4_t v65 = 0uLL;
            int32x4_t v66 = 0uLL;
            int32x4_t v67 = 0uLL;
            do
            {
              int v68 = v60 - 16;
              float32x4x4_t v111 = vld4q_f32(v68);
              float32x4x4_t v112 = vld4q_f32(v60);
              int32x4_t v66 = vaddq_s32((int32x4_t)v111.val[0], v66);
              int32x4_t v67 = vaddq_s32((int32x4_t)v112.val[0], v67);
              int32x4_t v64 = vaddq_s32((int32x4_t)v111.val[1], v64);
              int32x4_t v65 = vaddq_s32((int32x4_t)v112.val[1], v65);
              int32x4_t v62 = vaddq_s32((int32x4_t)v111.val[2], v62);
              int32x4_t v63 = vaddq_s32((int32x4_t)v112.val[2], v63);
              int32x4_t v57 = vaddq_s32((int32x4_t)v111.val[3], v57);
              int32x4_t v58 = vaddq_s32((int32x4_t)v112.val[3], v58);
              v60 += 32;
              v61 -= 8;
            }
            while (v61);
            int v21 = vaddvq_s32(vaddq_s32(v67, v66));
            int v20 = vaddvq_s32(vaddq_s32(v65, v64));
            int v19 = vaddvq_s32(vaddq_s32(v63, v62));
            int v18 = vaddvq_s32(vaddq_s32(v58, v57));
            if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_61:
              *a3 = v21;
              a3[1] = v20;
              a3[2] = v19;
              a3[3] = v18;
              if ((int)v16 >= 1)
              {
                unint64_t v72 = 0;
                int32x4_t v73 = a3 + 7;
                int32x4_t v74 = a2 + 2;
                uint64_t v75 = (int)v15;
                do
                {
                  v21 += v74[v75 - 2] - *(v74 - 2);
                  v20 += v74[v75 - 1] - *(v74 - 1);
                  int v76 = v74[v75];
                  int v77 = v74[v75 + 1];
                  int v78 = *v74;
                  int v79 = v74[1];
                  v74 += 4;
                  unint64_t result = (v76 - v78);
                  v19 += result;
                  v18 += v77 - v79;
                  v72 += 4;
                  *(v73 - 3) = v21;
                  *(v73 - 2) = v20;
                  *(v73 - 1) = v19;
                  *int32x4_t v73 = v18;
                  v73 += 4;
                }
                while (v72 < v16);
              }
              return result;
            }
          }
          else
          {
            unint64_t v17 = 0;
            int v18 = 0;
            int v19 = 0;
            int v20 = 0;
            int v21 = 0;
          }
          float64x2_t v69 = &a2[v17 + 2];
          do
          {
            v21 += *(v69 - 2);
            v20 += *(v69 - 1);
            int v70 = *v69;
            int v71 = v69[1];
            v69 += 4;
            v19 += v70;
            v18 += v71;
            v17 += 4;
          }
          while (v17 < v15);
          goto LABEL_61;
        }
        if (a5 < 1) {
          return result;
        }
        int v51 = 0;
        float64x2_t v52 = &a3[a5];
        while ((int)v15 < 1)
        {
          int v54 = 0;
          *a3 = 0;
          if ((int)v16 >= 1) {
            goto LABEL_50;
          }
LABEL_43:
          ++v51;
          ++a2;
          ++a3;
          ++v52;
          if (v51 == a5) {
            return result;
          }
        }
        uint64_t v53 = 0;
        int v54 = 0;
        do
        {
          unint64_t result = a2[v53];
          v54 += result;
          v53 += a5;
        }
        while (v53 < (int)v15);
        *a3 = v54;
        if ((int)v16 < 1) {
          goto LABEL_43;
        }
LABEL_50:
        uint64_t v55 = 0;
        unint64_t result = (unint64_t)&a2[(int)v15];
        do
        {
          uint64_t v56 = v55;
          v54 += *(_DWORD *)(result + 4 * v55) - a2[v55];
          v55 += a5;
          v52[v56] = v54;
        }
        while (v55 < (int)v16);
        goto LABEL_43;
      }
      if ((int)v15 < 1)
      {
        int v50 = 0;
        int v49 = 0;
        int v48 = 0;
        goto LABEL_78;
      }
      if (v15 >= 0x16)
      {
        uint64_t v90 = ((int)v15 - 1) / 3u + 1;
        unint64_t v47 = 3 * (v90 & 0x7FFFFFF8);
        int32x4_t v91 = 0uLL;
        double v92 = (const float *)a2;
        uint64_t v93 = v90 & 0x7FFFFFF8;
        int32x4_t v94 = 0uLL;
        int32x4_t v95 = 0uLL;
        int32x4_t v96 = 0uLL;
        int32x4_t v97 = 0uLL;
        int32x4_t v98 = 0uLL;
        do
        {
          uint64_t v99 = v92;
          v92 += 24;
          float32x4x3_t v109 = vld3q_f32(v99);
          v99 += 12;
          int32x4_t v97 = vaddq_s32((int32x4_t)v109.val[0], v97);
          float32x4x3_t v110 = vld3q_f32(v99);
          int32x4_t v98 = vaddq_s32((int32x4_t)v110.val[0], v98);
          int32x4_t v95 = vaddq_s32((int32x4_t)v109.val[1], v95);
          int32x4_t v96 = vaddq_s32((int32x4_t)v110.val[1], v96);
          int32x4_t v91 = vaddq_s32((int32x4_t)v109.val[2], v91);
          int32x4_t v94 = vaddq_s32((int32x4_t)v110.val[2], v94);
          v93 -= 8;
        }
        while (v93);
        int v50 = vaddvq_s32(vaddq_s32(v98, v97));
        int v49 = vaddvq_s32(vaddq_s32(v96, v95));
        int v48 = vaddvq_s32(vaddq_s32(v94, v91));
        if ((v90 & 0x7FFFFFF8) == v90)
        {
LABEL_78:
          *a3 = v50;
          a3[1] = v49;
          a3[2] = v48;
          if ((int)v16 >= 1)
          {
            int32x4_t v101 = a3 + 4;
            int32x4_t v102 = (unsigned int *)(a2 + 1);
            uint64_t v103 = (int)v15;
            uint64_t v104 = 5;
            do
            {
              v50 += v102[v103 - 1] - *(v102 - 1);
              unsigned int v106 = v102[v103];
              unsigned int v105 = v102[v103 + 1];
              unint64_t result = *v102;
              unsigned int v107 = v102[1];
              v102 += 3;
              v49 += v106 - result;
              v48 += v105 - v107;
              *(v101 - 1) = v50;
              *int32x4_t v101 = v49;
              a3[v104] = v48;
              unint64_t v108 = v104 - 2;
              v104 += 3;
              v101 += 3;
            }
            while (v108 < v16);
          }
          return result;
        }
      }
      else
      {
        unint64_t v47 = 0;
        int v48 = 0;
        int v49 = 0;
        int v50 = 0;
      }
      do
      {
        int32x4_t v100 = &a2[v47];
        v50 += *v100;
        v49 += v100[1];
        v48 += v100[2];
        v47 += 3;
      }
      while (v47 < v15);
      goto LABEL_78;
    }
    if ((int)v15 < 1)
    {
      int v46 = 0;
      goto LABEL_70;
    }
    if (v15 >= 8)
    {
      unint64_t v45 = v15 & 0x7FFFFFF8;
      int32x4_t v80 = (int32x4_t *)(a2 + 4);
      int32x4_t v81 = 0uLL;
      uint64_t v82 = v15 & 0xFFFFFFF8;
      int32x4_t v83 = 0uLL;
      do
      {
        int32x4_t v81 = vaddq_s32(v80[-1], v81);
        int32x4_t v83 = vaddq_s32(*v80, v83);
        v80 += 2;
        v82 -= 8;
      }
      while (v82);
      int v46 = vaddvq_s32(vaddq_s32(v83, v81));
      if (v45 == v15)
      {
LABEL_70:
        *a3 = v46;
        if ((int)v16 >= 1)
        {
          int32x4_t v87 = a3 + 1;
          do
          {
            int v88 = a2[(int)v15];
            int v89 = *a2++;
            v46 += v88 - v89;
            *v87++ = v46;
            --v16;
          }
          while (v16);
        }
        return result;
      }
    }
    else
    {
      unint64_t v45 = 0;
      int v46 = 0;
    }
    int32x4_t v84 = &a2[v45];
    unint64_t v85 = v15 - v45;
    do
    {
      int v86 = *v84++;
      v46 += v86;
      --v85;
    }
    while (v85);
    goto LABEL_70;
  }
  uint64_t v6 = (a5 * a4);
  if ((int)v6 < 1) {
    return result;
  }
  uint64_t v7 = a5;
  uint64_t v8 = 2 * a5;
  uint64_t v9 = 3 * a5;
  uint64_t v10 = 4 * a5;
  if (v6 < 0xC)
  {
    uint64_t v11 = 0;
LABEL_23:
    uint64_t v27 = 0;
    int32x4_t v28 = &a2[v11 + v10];
    int16x8_t v29 = &a2[v11 + v9];
    uint64_t v30 = v6 - v11;
    do
    {
      unint64_t result = (a2[v11 + v8 + v27] + v29[v27]);
      a3[v11 + v27] = a2[v11 + v7 + v27] + a2[v11 + v27] + result + v28[v27];
      ++v27;
    }
    while (v30 != v27);
    return result;
  }
  uint64_t v11 = 0;
  int64_t v22 = (char *)a3 - (char *)a2;
  if ((unint64_t)((char *)a3 - (char *)a2 - 4 * v10) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)(v22 - 4 * v9) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)(v22 - 4 * v8) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v23 = 4 * a5;
  if ((unint64_t)(v22 - v23) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)((char *)a3 - (char *)a2) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v11 = v6 & 0x7FFFFFF8;
  unint64_t result = (unint64_t)(a2 + 4);
  int16x8_t v24 = (int32x4_t *)(a3 + 4);
  uint64_t v25 = v6 & 0xFFFFFFF8;
  do
  {
    int32x4_t v26 = vaddq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(result + 4 * v7), *(int32x4_t *)result), vaddq_s32(*(int32x4_t *)(result + 4 * v8), *(int32x4_t *)(result + 4 * v9))), *(int32x4_t *)(result + 4 * v10));
    v24[-1] = vaddq_s32(vaddq_s32(vaddq_s32(*(int32x4_t *)(result + v23 - 16), *(int32x4_t *)(result - 16)), vaddq_s32(*(int32x4_t *)(result + 4 * v8 - 16), *(int32x4_t *)(result + 4 * v9 - 16))), *(int32x4_t *)(result + 4 * v10 - 16));
    *int16x8_t v24 = v26;
    result += 32;
    v24 += 2;
    v25 -= 8;
  }
  while (v25);
  if (v11 != v6) {
    goto LABEL_23;
  }
  return result;
}

void sub_1003902BC()
{
}

uint64_t sub_1003902D0(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_100390354(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

float64_t sub_10039038C(uint64_t a1, int16x4_t *a2, void *a3, int a4, int a5, float64x2_t a6, float64x2_t a7, int16x4_t a8, double a9, double a10, double a11, int16x4_t a12, int16x4_t a13)
{
  int v14 = *(_DWORD *)(a1 + 8);
  if (v14 == 3)
  {
    uint64_t v21 = (a5 * a4);
    if ((int)v21 < 1) {
      return a6.f64[0];
    }
    uint64_t v22 = 2 * a5;
    if (v21 >= 8)
    {
      uint64_t v23 = v21 & 0x7FFFFFF8;
      uint64_t v93 = v21 & 0xFFFFFFF8;
      int32x4_t v94 = (float64x2_t *)a3;
      int32x4_t v95 = a2;
      do
      {
        int32x4_t v96 = vmovl_s16(*v95);
        v97.i64[0] = v96.i32[0];
        v97.i64[1] = v96.i32[1];
        float64x2_t v98 = vcvtq_f64_s64(v97);
        v97.i64[0] = v96.i32[2];
        v97.i64[1] = v96.i32[3];
        float64x2_t v99 = vcvtq_f64_s64(v97);
        int32x4_t v100 = vmovl_high_s16(*(int16x8_t *)v95->i8);
        v97.i64[0] = v100.i32[0];
        v97.i64[1] = v100.i32[1];
        float64x2_t v101 = vcvtq_f64_s64(v97);
        v97.i64[0] = v100.i32[2];
        v97.i64[1] = v100.i32[3];
        float64x2_t v102 = vcvtq_f64_s64(v97);
        int16x8_t v103 = *(int16x8_t *)&v95->i8[2 * a5];
        int32x4_t v104 = vmovl_s16(*(int16x4_t *)v103.i8);
        v97.i64[0] = v104.i32[0];
        v97.i64[1] = v104.i32[1];
        float64x2_t v105 = vcvtq_f64_s64(v97);
        v97.i64[0] = v104.i32[2];
        v97.i64[1] = v104.i32[3];
        float64x2_t v106 = vcvtq_f64_s64(v97);
        int32x4_t v107 = vmovl_high_s16(v103);
        v97.i64[0] = v107.i32[0];
        v97.i64[1] = v107.i32[1];
        float64x2_t v108 = vcvtq_f64_s64(v97);
        v97.i64[0] = v107.i32[2];
        v97.i64[1] = v107.i32[3];
        float64x2_t v109 = vaddq_f64(v102, vcvtq_f64_s64(v97));
        float64x2_t v110 = vaddq_f64(v101, v108);
        float64x2_t v111 = vaddq_f64(v99, v106);
        float64x2_t v112 = vaddq_f64(v98, v105);
        int16x8_t v113 = *(int16x8_t *)&v95->i8[2 * v22];
        int32x4_t v114 = vmovl_high_s16(v113);
        v97.i64[0] = v114.i32[2];
        v97.i64[1] = v114.i32[3];
        float64x2_t v115 = vcvtq_f64_s64(v97);
        v97.i64[0] = v114.i32[0];
        v97.i64[1] = v114.i32[1];
        float64x2_t v116 = vcvtq_f64_s64(v97);
        int32x4_t v117 = vmovl_s16(*(int16x4_t *)v113.i8);
        v97.i64[0] = v117.i32[2];
        v97.i64[1] = v117.i32[3];
        float64x2_t v118 = vcvtq_f64_s64(v97);
        v97.i64[0] = v117.i32[0];
        v97.i64[1] = v117.i32[1];
        v94[2] = vaddq_f64(v110, v116);
        v94[3] = vaddq_f64(v109, v115);
        a6 = vaddq_f64(v111, v118);
        *int32x4_t v94 = vaddq_f64(v112, vcvtq_f64_s64(v97));
        v94[1] = a6;
        v94 += 4;
        v95 += 2;
        v93 -= 8;
      }
      while (v93);
      if (v23 == v21) {
        return a6.f64[0];
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    int32x4_t v119 = (__int16 *)a2 + v23 + v22;
    int32x4_t v120 = (__int16 *)a2 + v23 + a5;
    int32x4_t v121 = &a3[v23];
    uint64_t v122 = v21 - v23;
    int32x4_t v123 = (__int16 *)a2 + v23;
    do
    {
      int v124 = *v123++;
      double v125 = (double)v124;
      int v126 = *v120++;
      double v127 = v125 + (double)v126;
      int v128 = *v119++;
      a6.f64[0] = v127 + (double)v128;
      *v121++ = *(void *)&a6.f64[0];
      --v122;
    }
    while (v122);
    return a6.f64[0];
  }
  if (v14 != 5)
  {
    unint64_t v24 = (v14 * a5);
    unint64_t v25 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v24 < 1)
          {
            double v29 = 0.0;
            double v28 = 0.0;
            double v27 = 0.0;
            a6.f64[0] = 0.0;
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            a3[3] = 0;
            if ((int)v25 < 1) {
              return a6.f64[0];
            }
          }
          else
          {
            unint64_t v26 = 0;
            a6.f64[0] = 0.0;
            double v27 = 0.0;
            double v28 = 0.0;
            double v29 = 0.0;
            do
            {
              uint64_t v30 = &a2[v26 / 4];
              LOWORD(a10) = v30->i16[0];
              *(double *)&int16x4_t v31 = (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
              double v29 = v29 + *(double *)&v31;
              v31.i16[0] = v30->i16[1];
              *(double *)&int16x4_t v32 = (double)vmovl_s16(v31).i32[0];
              double v28 = v28 + *(double *)&v32;
              v32.i16[0] = v30->i16[2];
              *(double *)&int16x4_t v33 = (double)vmovl_s16(v32).i32[0];
              double v27 = v27 + *(double *)&v33;
              v33.i16[0] = v30->i16[3];
              a10 = (double)vmovl_s16(v33).i32[0];
              a6.f64[0] = a6.f64[0] + a10;
              v26 += 4;
            }
            while (v26 < v24);
            *(double *)a3 = v29;
            *((double *)a3 + 1) = v28;
            *((double *)a3 + 2) = v27;
            a3[3] = *(void *)&a6.f64[0];
            if ((int)v25 < 1) {
              return a6.f64[0];
            }
          }
          unint64_t v137 = 0;
          float64x2_t v138 = (double *)(a3 + 7);
          float64x2_t v139 = (__int16 *)a2 + 2;
          uint64_t v140 = (int)v24;
          do
          {
            LOWORD(a10) = v139[v140 - 2];
            LOWORD(a11) = *(v139 - 2);
            *(double *)&int16x4_t v141 = (double)vmovl_s16(*(int16x4_t *)&a11).i32[0];
            *(double *)&int16x4_t v142 = (double)vmovl_s16(*(int16x4_t *)&a10).i32[0] - *(double *)&v141;
            double v29 = v29 + *(double *)&v142;
            v142.i16[0] = v139[v140 - 1];
            v141.i16[0] = *(v139 - 1);
            *(double *)&int16x4_t v143 = (double)vmovl_s16(v141).i32[0];
            *(double *)&int16x4_t v144 = (double)vmovl_s16(v142).i32[0] - *(double *)&v143;
            double v28 = v28 + *(double *)&v144;
            v144.i16[0] = v139[v140];
            v143.i16[0] = *v139;
            *(double *)&int16x4_t v145 = (double)vmovl_s16(v143).i32[0];
            *(double *)&int16x4_t v146 = (double)vmovl_s16(v144).i32[0] - *(double *)&v145;
            double v27 = v27 + *(double *)&v146;
            v146.i16[0] = v139[v140 + 1];
            v145.i16[0] = v139[1];
            a11 = (double)vmovl_s16(v145).i32[0];
            a10 = (double)vmovl_s16(v146).i32[0] - a11;
            a6.f64[0] = a6.f64[0] + a10;
            *(v138 - 3) = v29;
            *(v138 - 2) = v28;
            v137 += 4;
            *(v138 - 1) = v27;
            *float64x2_t v138 = a6.f64[0];
            v138 += 4;
            v139 += 4;
          }
          while (v137 < v25);
          return a6.f64[0];
        }
        if (a5 < 1) {
          return a6.f64[0];
        }
        int v133 = 0;
        int16x8x3_t v134 = &a3[a5];
        while ((int)v24 < 1)
        {
          a6.f64[0] = 0.0;
          *a3 = 0;
          if ((int)v25 >= 1) {
            goto LABEL_44;
          }
LABEL_37:
          ++v133;
          a2 = (int16x4_t *)((char *)a2 + 2);
          ++a3;
          ++v134;
          if (v133 == a5) {
            return a6.f64[0];
          }
        }
        uint64_t v135 = 0;
        a6.f64[0] = 0.0;
        do
        {
          LOWORD(a7.f64[0]) = a2->i16[v135];
          a7.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
          a6.f64[0] = a6.f64[0] + a7.f64[0];
          v135 += a5;
        }
        while (v135 < (int)v24);
        *a3 = *(void *)&a6.f64[0];
        if ((int)v25 < 1) {
          goto LABEL_37;
        }
LABEL_44:
        uint64_t v136 = 0;
        do
        {
          LOWORD(a7.f64[0]) = a2->i16[(int)v24 + v136];
          a8.i16[0] = a2->i16[v136];
          *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
          a7.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0] - *(double *)&a8;
          a6.f64[0] = a6.f64[0] + a7.f64[0];
          v134[v136] = *(void *)&a6.f64[0];
          v136 += a5;
        }
        while (v136 < (int)v25);
        goto LABEL_37;
      }
      if ((int)v24 < 1)
      {
        double v132 = 0.0;
        double v131 = 0.0;
        a6.f64[0] = 0.0;
        goto LABEL_66;
      }
      if (v24 >= 4)
      {
        uint64_t v153 = ((int)v24 - 1) / 3u + 1;
        unint64_t v130 = 3 * (v153 & 0x7FFFFFFE);
        float64x2_t v154 = (_WORD *)a2 + 3;
        a6.f64[0] = 0.0;
        uint64_t v155 = v153 & 0x7FFFFFFE;
        double v131 = 0.0;
        double v132 = 0.0;
        do
        {
          LOWORD(a9) = *(v154 - 3);
          a9 = (double)vmovl_s16(*(int16x4_t *)&a9).i32[0];
          LOWORD(a10) = *v154;
          a10 = (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
          LOWORD(a11) = *(v154 - 2);
          a11 = (double)vmovl_s16(*(int16x4_t *)&a11).i32[0];
          a12.i16[0] = v154[1];
          *(double *)&a12 = (double)vmovl_s16(a12).i32[0];
          a13.i16[0] = *(v154 - 1);
          *(double *)&a13 = (double)vmovl_s16(a13).i32[0];
          LOWORD(v13) = v154[2];
          double v13 = (double)vmovl_s16(*(int16x4_t *)&v13).i32[0];
          a6.f64[0] = a6.f64[0] + *(double *)&a13 + v13;
          double v131 = v131 + a11 + *(double *)&a12;
          double v132 = v132 + a9 + a10;
          v154 += 6;
          v155 -= 2;
        }
        while (v155);
        if ((v153 & 0x7FFFFFFE) == v153)
        {
LABEL_66:
          *(double *)a3 = v132;
          *((double *)a3 + 1) = v131;
          a3[2] = *(void *)&a6.f64[0];
          if ((int)v25 >= 1)
          {
            int8x8_t v159 = (double *)(a3 + 4);
            float64x2_t v160 = (__int16 *)a2 + 2;
            uint64_t v161 = (int)v24;
            uint64_t v162 = 5;
            do
            {
              LOWORD(a9) = v160[v161 - 2];
              LOWORD(a10) = *(v160 - 2);
              *(double *)&int16x4_t v163 = (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
              *(double *)&int16x4_t v164 = (double)vmovl_s16(*(int16x4_t *)&a9).i32[0] - *(double *)&v163;
              double v132 = v132 + *(double *)&v164;
              v164.i16[0] = v160[v161 - 1];
              v163.i16[0] = *(v160 - 1);
              *(double *)&int16x4_t v165 = (double)vmovl_s16(v163).i32[0];
              *(double *)&int16x4_t v166 = (double)vmovl_s16(v164).i32[0] - *(double *)&v165;
              double v131 = v131 + *(double *)&v166;
              v166.i16[0] = v160[v161];
              v165.i16[0] = *v160;
              a10 = (double)vmovl_s16(v165).i32[0];
              a9 = (double)vmovl_s16(v166).i32[0] - a10;
              a6.f64[0] = a6.f64[0] + a9;
              *(v159 - 1) = v132;
              *int8x8_t v159 = v131;
              a3[v162] = *(void *)&a6.f64[0];
              unint64_t v167 = v162 - 2;
              v162 += 3;
              v159 += 3;
              v160 += 3;
            }
            while (v167 < v25);
          }
          return a6.f64[0];
        }
      }
      else
      {
        unint64_t v130 = 0;
        a6.f64[0] = 0.0;
        double v131 = 0.0;
        double v132 = 0.0;
      }
      do
      {
        float64x2_t v156 = (_WORD *)a2 + v130;
        LOWORD(a9) = *v156;
        *(double *)&int16x4_t v157 = (double)vmovl_s16(*(int16x4_t *)&a9).i32[0];
        double v132 = v132 + *(double *)&v157;
        v157.i16[0] = v156[1];
        *(double *)&int16x4_t v158 = (double)vmovl_s16(v157).i32[0];
        double v131 = v131 + *(double *)&v158;
        v158.i16[0] = v156[2];
        a9 = (double)vmovl_s16(v158).i32[0];
        a6.f64[0] = a6.f64[0] + a9;
        v130 += 3;
      }
      while (v130 < v24);
      goto LABEL_66;
    }
    if ((int)v24 < 1)
    {
      a6.f64[0] = 0.0;
      goto LABEL_58;
    }
    if (v24 == 1)
    {
      uint64_t v129 = 0;
      a6.f64[0] = 0.0;
    }
    else
    {
      uint64_t v129 = v24 & 0xFFFFFFFE;
      int8x8_t v147 = (__int16 *)a2 + 1;
      a6.f64[0] = 0.0;
      uint64_t v148 = v129;
      do
      {
        LOWORD(a7.f64[0]) = *(v147 - 1);
        a7.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
        a8.i16[0] = *v147;
        *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
        a6.f64[0] = a6.f64[0] + a7.f64[0] + *(double *)&a8;
        v147 += 2;
        v148 -= 2;
      }
      while (v148);
      if (v129 == v24)
      {
LABEL_58:
        *a3 = *(void *)&a6.f64[0];
        if ((int)v25 >= 1)
        {
          int8x8_t v152 = a3 + 1;
          do
          {
            LOWORD(a7.f64[0]) = a2->i16[(int)v24];
            a8.i16[0] = a2->i16[0];
            *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
            a7.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0] - *(double *)&a8;
            a6.f64[0] = a6.f64[0] + a7.f64[0];
            *v152++ = *(void *)&a6.f64[0];
            a2 = (int16x4_t *)((char *)a2 + 2);
            --v25;
          }
          while (v25);
        }
        return a6.f64[0];
      }
    }
    int8x8_t v149 = (__int16 *)a2 + v129;
    uint64_t v150 = v24 - v129;
    do
    {
      int v151 = *v149++;
      a7.f64[0] = (double)v151;
      a6.f64[0] = a6.f64[0] + (double)v151;
      --v150;
    }
    while (v150);
    goto LABEL_58;
  }
  uint64_t v15 = (a5 * a4);
  if ((int)v15 < 1) {
    return a6.f64[0];
  }
  uint64_t v16 = a5;
  uint64_t v17 = 2 * a5;
  uint64_t v18 = 3 * a5;
  uint64_t v19 = a5;
  if (v15 < 8)
  {
    uint64_t v20 = 0;
LABEL_20:
    uint64_t v79 = 0;
    int32x4_t v80 = (_WORD *)a2 + v20 + v19 * 4;
    int32x4_t v81 = (_WORD *)a2 + v20 + v18;
    uint64_t v82 = (_WORD *)a2 + v20 + v17;
    int32x4_t v83 = (_WORD *)a2 + v20 + v16;
    int32x4_t v84 = &a3[v20];
    uint64_t v85 = v15 - v20;
    int v86 = (_WORD *)a2 + v20;
    do
    {
      LOWORD(a6.f64[0]) = v86[v79];
      LOWORD(a7.f64[0]) = v83[v79];
      *(double *)&int16x4_t v87 = (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
      double v88 = (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0] + *(double *)&v87;
      v87.i16[0] = v82[v79];
      *(double *)&int16x4_t v89 = (double)vmovl_s16(v87).i32[0];
      double v90 = v88 + *(double *)&v89;
      v89.i16[0] = v81[v79];
      *(double *)&int16x4_t v91 = (double)vmovl_s16(v89).i32[0];
      double v92 = v90 + *(double *)&v91;
      v91.i16[0] = v80[v79];
      a7.f64[0] = (double)vmovl_s16(v91).i32[0];
      a6.f64[0] = v92 + a7.f64[0];
      v84[v79++] = *(void *)&a6.f64[0];
    }
    while (v85 != v79);
    return a6.f64[0];
  }
  uint64_t v20 = v15 & 0x7FFFFFF8;
  uint64_t v34 = v15 & 0xFFFFFFF8;
  BOOL v35 = (float64x2_t *)a3;
  BOOL v36 = a2;
  do
  {
    int32x4_t v37 = vmovl_s16(*v36);
    v38.i64[0] = v37.i32[0];
    v38.i64[1] = v37.i32[1];
    float64x2_t v39 = vcvtq_f64_s64(v38);
    v38.i64[0] = v37.i32[2];
    v38.i64[1] = v37.i32[3];
    float64x2_t v40 = vcvtq_f64_s64(v38);
    int32x4_t v41 = vmovl_high_s16(*(int16x8_t *)v36->i8);
    v38.i64[0] = v41.i32[0];
    v38.i64[1] = v41.i32[1];
    float64x2_t v42 = vcvtq_f64_s64(v38);
    v38.i64[0] = v41.i32[2];
    v38.i64[1] = v41.i32[3];
    float64x2_t v43 = vcvtq_f64_s64(v38);
    int16x8_t v44 = *(int16x8_t *)&v36->i8[2 * v16];
    int32x4_t v45 = vmovl_s16(*(int16x4_t *)v44.i8);
    v38.i64[0] = v45.i32[0];
    v38.i64[1] = v45.i32[1];
    float64x2_t v46 = vcvtq_f64_s64(v38);
    v38.i64[0] = v45.i32[2];
    v38.i64[1] = v45.i32[3];
    float64x2_t v47 = vcvtq_f64_s64(v38);
    int32x4_t v48 = vmovl_high_s16(v44);
    v38.i64[0] = v48.i32[0];
    v38.i64[1] = v48.i32[1];
    float64x2_t v49 = vcvtq_f64_s64(v38);
    v38.i64[0] = v48.i32[2];
    v38.i64[1] = v48.i32[3];
    float64x2_t v50 = vaddq_f64(v43, vcvtq_f64_s64(v38));
    float64x2_t v51 = vaddq_f64(v42, v49);
    float64x2_t v52 = vaddq_f64(v40, v47);
    int16x8_t v53 = *(int16x8_t *)&v36->i8[2 * v17];
    float64x2_t v54 = vaddq_f64(v39, v46);
    int32x4_t v55 = vmovl_high_s16(v53);
    v38.i64[0] = v55.i32[2];
    v38.i64[1] = v55.i32[3];
    float64x2_t v56 = vcvtq_f64_s64(v38);
    v38.i64[0] = v55.i32[0];
    v38.i64[1] = v55.i32[1];
    float64x2_t v57 = vcvtq_f64_s64(v38);
    int32x4_t v58 = vmovl_s16(*(int16x4_t *)v53.i8);
    v38.i64[0] = v58.i32[2];
    v38.i64[1] = v58.i32[3];
    float64x2_t v59 = vcvtq_f64_s64(v38);
    v38.i64[0] = v58.i32[0];
    v38.i64[1] = v58.i32[1];
    float64x2_t v60 = vaddq_f64(v54, vcvtq_f64_s64(v38));
    float64x2_t v61 = vaddq_f64(v52, v59);
    float64x2_t v62 = vaddq_f64(v51, v57);
    float64x2_t v63 = vaddq_f64(v50, v56);
    int16x8_t v64 = *(int16x8_t *)&v36->i8[2 * v18];
    int32x4_t v65 = vmovl_s16(*(int16x4_t *)v64.i8);
    v38.i64[0] = v65.i32[0];
    v38.i64[1] = v65.i32[1];
    float64x2_t v66 = vcvtq_f64_s64(v38);
    v38.i64[0] = v65.i32[2];
    v38.i64[1] = v65.i32[3];
    float64x2_t v67 = vcvtq_f64_s64(v38);
    int32x4_t v68 = vmovl_high_s16(v64);
    v38.i64[0] = v68.i32[0];
    v38.i64[1] = v68.i32[1];
    float64x2_t v69 = vcvtq_f64_s64(v38);
    v38.i64[0] = v68.i32[2];
    v38.i64[1] = v68.i32[3];
    float64x2_t v70 = vaddq_f64(v63, vcvtq_f64_s64(v38));
    float64x2_t v71 = vaddq_f64(v62, v69);
    a7 = vaddq_f64(v61, v67);
    float64x2_t v72 = vaddq_f64(v60, v66);
    int16x8_t v73 = *(int16x8_t *)v36[v19].i8;
    int32x4_t v74 = vmovl_high_s16(v73);
    v38.i64[0] = v74.i32[2];
    v38.i64[1] = v74.i32[3];
    float64x2_t v75 = vcvtq_f64_s64(v38);
    v38.i64[0] = v74.i32[0];
    v38.i64[1] = v74.i32[1];
    float64x2_t v76 = vcvtq_f64_s64(v38);
    int32x4_t v77 = vmovl_s16(*(int16x4_t *)v73.i8);
    v38.i64[0] = v77.i32[2];
    v38.i64[1] = v77.i32[3];
    float64x2_t v78 = vcvtq_f64_s64(v38);
    v38.i64[0] = v77.i32[0];
    v38.i64[1] = v77.i32[1];
    _DWORD v35[2] = vaddq_f64(v71, v76);
    v35[3] = vaddq_f64(v70, v75);
    a6 = vaddq_f64(a7, v78);
    *BOOL v35 = vaddq_f64(v72, vcvtq_f64_s64(v38));
    v35[1] = a6;
    v35 += 4;
    v36 += 2;
    v34 -= 8;
  }
  while (v34);
  if (v20 != v15) {
    goto LABEL_20;
  }
  return a6.f64[0];
}

void sub_100390C80()
{
}

uint64_t sub_100390C94(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_100390D18(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100390D50(uint64_t result, float32x4_t *a2, double *a3, int a4, int a5)
{
  int v5 = *(_DWORD *)(result + 8);
  if (v5 == 3)
  {
    uint64_t v12 = (a5 * a4);
    if ((int)v12 < 1) {
      return result;
    }
    uint64_t v13 = 2 * a5;
    if (v12 >= 4)
    {
      uint64_t v14 = v12 & 0x7FFFFFFC;
      uint64_t v42 = v12 & 0xFFFFFFFC;
      float64x2_t v43 = (float64x2_t *)a3;
      int16x8_t v44 = a2;
      do
      {
        float32x4_t v45 = *(float32x4_t *)((char *)v44 + 4 * a5);
        float64x2_t v46 = vaddq_f64(vcvt_hight_f64_f32(*v44), vcvt_hight_f64_f32(v45));
        float64x2_t v47 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v44->f32), vcvtq_f64_f32(*(float32x2_t *)v45.f32));
        float32x4_t v48 = *(float32x4_t *)((char *)v44 + 4 * v13);
        float64x2_t *v43 = vaddq_f64(v47, vcvtq_f64_f32(*(float32x2_t *)v48.f32));
        v43[1] = vaddq_f64(v46, vcvt_hight_f64_f32(v48));
        v43 += 2;
        ++v44;
        v42 -= 4;
      }
      while (v42);
      if (v14 == v12) {
        return result;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    float64x2_t v49 = &a2->f32[v14 + v13];
    float64x2_t v50 = &a2->f32[v14 + a5];
    float64x2_t v51 = &a3[v14];
    uint64_t v52 = v12 - v14;
    int16x8_t v53 = &a2->f32[v14];
    do
    {
      float v54 = *v53++;
      double v55 = v54;
      float v56 = *v50++;
      double v57 = v56;
      float v58 = *v49++;
      *v51++ = v55 + v57 + v58;
      --v52;
    }
    while (v52);
    return result;
  }
  if (v5 != 5)
  {
    unint64_t v15 = (v5 * a5);
    unint64_t v16 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v15 < 1)
          {
            double v21 = 0.0;
            double v20 = 0.0;
            double v19 = 0.0;
            double v18 = 0.0;
            goto LABEL_53;
          }
          if (v15 >= 0x1D)
          {
            unint64_t v69 = ((v15 - 1) >> 2) + 1;
            unint64_t v17 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
            f32 = a2[4].f32;
            double v18 = 0.0;
            uint64_t v71 = v69 & 0x7FFFFFFFFFFFFFF8;
            double v19 = 0.0;
            double v20 = 0.0;
            double v21 = 0.0;
            do
            {
              float64x2_t v72 = f32 - 16;
              float32x4x4_t v132 = vld4q_f32(v72);
              float32x4x4_t v133 = vld4q_f32(f32);
              float64x2_t v73 = vcvt_hight_f64_f32(v132.val[0]);
              float64x2_t v74 = vcvtq_f64_f32(*(float32x2_t *)v132.val[0].f32);
              float64x2_t v75 = vcvt_hight_f64_f32(v133.val[0]);
              float64x2_t v76 = vcvtq_f64_f32(*(float32x2_t *)v133.val[0].f32);
              float64x2_t v77 = vcvt_hight_f64_f32(v132.val[1]);
              float64x2_t v78 = vcvtq_f64_f32(*(float32x2_t *)v132.val[1].f32);
              float64x2_t v79 = vcvt_hight_f64_f32(v133.val[1]);
              float64x2_t v80 = vcvtq_f64_f32(*(float32x2_t *)v133.val[1].f32);
              float64x2_t v81 = vcvt_hight_f64_f32(v132.val[2]);
              float64x2_t v82 = vcvtq_f64_f32(*(float32x2_t *)v132.val[2].f32);
              float64x2_t v83 = vcvt_hight_f64_f32(v132.val[3]);
              v132.val[0] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v132.val[3].f32);
              v132.val[1] = (float32x4_t)vcvt_hight_f64_f32(v133.val[2]);
              v132.val[2] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v133.val[2].f32);
              v132.val[3] = (float32x4_t)vcvt_hight_f64_f32(v133.val[3]);
              v133.val[0] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v133.val[3].f32);
              double v18 = v18
                  + *(double *)v132.val[0].i64
                  + *(double *)&v132.val[0].i64[1]
                  + v83.f64[0]
                  + v83.f64[1]
                  + *(double *)v133.val[0].i64
                  + *(double *)&v133.val[0].i64[1]
                  + *(double *)v132.val[3].i64
                  + *(double *)&v132.val[3].i64[1];
              double v19 = v19
                  + v82.f64[0]
                  + v82.f64[1]
                  + v81.f64[0]
                  + v81.f64[1]
                  + *(double *)v132.val[2].i64
                  + *(double *)&v132.val[2].i64[1]
                  + *(double *)v132.val[1].i64
                  + *(double *)&v132.val[1].i64[1];
              double v20 = v20
                  + v78.f64[0]
                  + v78.f64[1]
                  + v77.f64[0]
                  + v77.f64[1]
                  + v80.f64[0]
                  + v80.f64[1]
                  + v79.f64[0]
                  + v79.f64[1];
              double v21 = v21
                  + v74.f64[0]
                  + v74.f64[1]
                  + v73.f64[0]
                  + v73.f64[1]
                  + v76.f64[0]
                  + v76.f64[1]
                  + v75.f64[0]
                  + v75.f64[1];
              f32 += 32;
              v71 -= 8;
            }
            while (v71);
            if (v69 == (v69 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_53:
              *a3 = v21;
              a3[1] = v20;
              a3[2] = v19;
              a3[3] = v18;
              if ((int)v16 >= 1)
              {
                unint64_t v87 = 0;
                double v88 = a3 + 7;
                int16x4_t v89 = &a2->f32[2];
                uint64_t v90 = (int)v15;
                do
                {
                  double v21 = v21 + v89[v90 - 2] - *(v89 - 2);
                  double v20 = v20 + v89[v90 - 1] - *(v89 - 1);
                  float v91 = v89[v90 + 1];
                  double v92 = v89[v90];
                  float v93 = *v89;
                  float v94 = v89[1];
                  v89 += 4;
                  double v19 = v19 + v92 - v93;
                  double v18 = v18 + v91 - v94;
                  *(v88 - 3) = v21;
                  *(v88 - 2) = v20;
                  v87 += 4;
                  *(v88 - 1) = v19;
                  *double v88 = v18;
                  v88 += 4;
                }
                while (v87 < v16);
              }
              return result;
            }
          }
          else
          {
            unint64_t v17 = 0;
            double v18 = 0.0;
            double v19 = 0.0;
            double v20 = 0.0;
            double v21 = 0.0;
          }
          int32x4_t v84 = &a2[v17 / 4].f32[2];
          do
          {
            double v21 = v21 + *(v84 - 2);
            double v20 = v20 + *(v84 - 1);
            float v85 = *v84;
            float v86 = v84[1];
            v84 += 4;
            double v19 = v19 + v85;
            double v18 = v18 + v86;
            v17 += 4;
          }
          while (v17 < v15);
          goto LABEL_53;
        }
        if (a5 < 1) {
          return result;
        }
        int v64 = 0;
        int32x4_t v65 = &a3[a5];
        while ((int)v15 < 1)
        {
          double v67 = 0.0;
          *a3 = 0.0;
          if ((int)v16 >= 1) {
            goto LABEL_42;
          }
LABEL_35:
          ++v64;
          a2 = (float32x4_t *)((char *)a2 + 4);
          ++a3;
          ++v65;
          if (v64 == a5) {
            return result;
          }
        }
        uint64_t v66 = 0;
        double v67 = 0.0;
        do
        {
          double v67 = v67 + a2->f32[v66];
          v66 += a5;
        }
        while (v66 < (int)v15);
        *a3 = v67;
        if ((int)v16 < 1) {
          goto LABEL_35;
        }
LABEL_42:
        uint64_t v68 = 0;
        do
        {
          double v67 = v67 + a2->f32[(int)v15 + v68] - a2->f32[v68];
          v65[v68] = v67;
          unint64_t result = v68 + a5;
          uint64_t v68 = result;
        }
        while (result < (int)v16);
        goto LABEL_35;
      }
      if ((int)v15 < 1)
      {
        float64x2_t v62 = 0uLL;
        double v63 = 0.0;
        goto LABEL_71;
      }
      if (v15 >= 0x16)
      {
        uint64_t v108 = ((int)v15 - 1) / 3u + 1;
        unint64_t v61 = 3 * (v108 & 0x7FFFFFF8);
        double v63 = 0.0;
        float64x2_t v109 = (const float *)a2;
        uint64_t v110 = v108 & 0x7FFFFFF8;
        double v111 = 0.0;
        v62.f64[0] = 0.0;
        do
        {
          float64x2_t v112 = v109;
          v109 += 24;
          float32x4x3_t v130 = vld3q_f32(v112);
          v112 += 12;
          float64x2_t v113 = vcvt_hight_f64_f32(v130.val[0]);
          float32x4x3_t v131 = vld3q_f32(v112);
          float64x2_t v114 = vcvtq_f64_f32(*(float32x2_t *)v130.val[0].f32);
          float64x2_t v115 = vcvt_hight_f64_f32(v131.val[0]);
          float64x2_t v116 = vcvtq_f64_f32(*(float32x2_t *)v131.val[0].f32);
          float64x2_t v117 = vcvt_hight_f64_f32(v130.val[1]);
          float64x2_t v118 = vcvtq_f64_f32(*(float32x2_t *)v130.val[1].f32);
          float64x2_t v119 = vcvt_hight_f64_f32(v131.val[1]);
          float64x2_t v120 = vcvtq_f64_f32(*(float32x2_t *)v131.val[1].f32);
          float64x2_t v121 = vcvt_hight_f64_f32(v130.val[2]);
          v130.val[0] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v130.val[2].f32);
          v130.val[2] = (float32x4_t)vcvt_hight_f64_f32(v131.val[2]);
          v131.val[0] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v131.val[2].f32);
          double v63 = v63
              + *(double *)v130.val[0].i64
              + *(double *)&v130.val[0].i64[1]
              + v121.f64[0]
              + v121.f64[1]
              + *(double *)v131.val[0].i64
              + *(double *)&v131.val[0].i64[1]
              + *(double *)v130.val[2].i64
              + *(double *)&v130.val[2].i64[1];
          double v111 = v111
               + v118.f64[0]
               + v118.f64[1]
               + v117.f64[0]
               + v117.f64[1]
               + v120.f64[0]
               + v120.f64[1]
               + v119.f64[0]
               + v119.f64[1];
          v62.f64[0] = v62.f64[0]
                     + v114.f64[0]
                     + v114.f64[1]
                     + v113.f64[0]
                     + v113.f64[1]
                     + v116.f64[0]
                     + v116.f64[1]
                     + v115.f64[0]
                     + v115.f64[1];
          v110 -= 8;
        }
        while (v110);
        v62.f64[1] = v111;
        if ((v108 & 0x7FFFFFF8) == v108)
        {
LABEL_71:
          *(float64x2_t *)a3 = v62;
          a3[2] = v63;
          if ((int)v16 >= 1)
          {
            uint64_t v124 = (int)v15;
            double v125 = (float64x2_t *)(a3 + 3);
            uint64_t v126 = 5;
            do
            {
              double v63 = v63 + a2->f32[v124 + 2] - a2->f32[2];
              float64x2_t v127 = vcvtq_f64_f32(*(float32x2_t *)&a2->f32[v124]);
              float32x2_t v128 = *(float32x2_t *)a2->f32;
              a2 = (float32x4_t *)((char *)a2 + 12);
              float64x2_t v62 = vaddq_f64(v62, vsubq_f64(v127, vcvtq_f64_f32(v128)));
              *double v125 = v62;
              double v125 = (float64x2_t *)((char *)v125 + 24);
              a3[v126] = v63;
              unint64_t v129 = v126 - 2;
              v126 += 3;
            }
            while (v129 < v16);
          }
          return result;
        }
      }
      else
      {
        unint64_t v61 = 0;
        float64x2_t v62 = 0uLL;
        double v63 = 0.0;
      }
      uint64_t v122 = &a2->f32[v61 + 2];
      do
      {
        float64x2_t v62 = vaddq_f64(v62, vcvtq_f64_f32(*(float32x2_t *)(v122 - 2)));
        float v123 = *v122;
        v122 += 3;
        double v63 = v63 + v123;
        v61 += 3;
      }
      while (v61 < v15);
      goto LABEL_71;
    }
    if ((int)v15 < 1)
    {
      double v60 = 0.0;
      goto LABEL_62;
    }
    if (v15 >= 8)
    {
      unint64_t v59 = v15 & 0x7FFFFFF8;
      int32x4_t v95 = a2 + 1;
      double v60 = 0.0;
      uint64_t v96 = v15 & 0xFFFFFFF8;
      do
      {
        float32x4_t v97 = v95[-1];
        float64x2_t v98 = vcvt_hight_f64_f32(v97);
        float64x2_t v99 = vcvtq_f64_f32(*(float32x2_t *)v97.f32);
        float64x2_t v100 = vcvt_hight_f64_f32(*v95);
        float64x2_t v101 = vcvtq_f64_f32(*(float32x2_t *)v95->f32);
        double v60 = v60
            + v99.f64[0]
            + v99.f64[1]
            + v98.f64[0]
            + v98.f64[1]
            + v101.f64[0]
            + v101.f64[1]
            + v100.f64[0]
            + v100.f64[1];
        v95 += 2;
        v96 -= 8;
      }
      while (v96);
      if (v59 == v15)
      {
LABEL_62:
        *a3 = v60;
        if ((int)v16 >= 1)
        {
          float64x2_t v105 = a3 + 1;
          do
          {
            double v106 = a2->f32[(int)v15];
            float v107 = a2->f32[0];
            a2 = (float32x4_t *)((char *)a2 + 4);
            double v60 = v60 + v106 - v107;
            *v105++ = v60;
            --v16;
          }
          while (v16);
        }
        return result;
      }
    }
    else
    {
      unint64_t v59 = 0;
      double v60 = 0.0;
    }
    float64x2_t v102 = &a2->f32[v59];
    unint64_t v103 = v15 - v59;
    do
    {
      float v104 = *v102++;
      double v60 = v60 + v104;
      --v103;
    }
    while (v103);
    goto LABEL_62;
  }
  uint64_t v6 = (a5 * a4);
  if ((int)v6 < 1) {
    return result;
  }
  uint64_t v7 = a5;
  uint64_t v8 = 2 * a5;
  uint64_t v9 = 3 * a5;
  uint64_t v10 = a5;
  if (v6 < 4)
  {
    uint64_t v11 = 0;
LABEL_18:
    uint64_t v34 = 0;
    BOOL v35 = &a2->i8[4 * v11 + 1 * v10];
    BOOL v36 = &a2->i8[4 * v11 + 4 * v9];
    int32x4_t v37 = &a2->i8[4 * v11 + 4 * v8];
    int64x2_t v38 = &a2->i8[4 * v11 + 4 * v7];
    float64x2_t v39 = &a3[v11];
    uint64_t v40 = v6 - v11;
    int32x4_t v41 = &a2->i8[4 * v11];
    do
    {
      v39[v34] = *(float *)&v41[4 * v34]
               + *(float *)&v38[4 * v34]
               + *(float *)&v37[4 * v34]
               + *(float *)&v36[4 * v34]
               + *(float *)&v35[4 * v34];
      ++v34;
    }
    while (v40 != v34);
    return result;
  }
  uint64_t v11 = v6 & 0x7FFFFFFC;
  unint64_t result = v6 & 0xFFFFFFFC;
  uint64_t v22 = (float64x2_t *)a3;
  uint64_t v23 = a2;
  do
  {
    float32x4_t v24 = *(float32x4_t *)((char *)v23 + 4 * v7);
    float64x2_t v25 = vaddq_f64(vcvt_hight_f64_f32(*v23), vcvt_hight_f64_f32(v24));
    float64x2_t v26 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v23->f32), vcvtq_f64_f32(*(float32x2_t *)v24.f32));
    float32x4_t v27 = *(float32x4_t *)((char *)v23 + 4 * v8);
    float64x2_t v28 = vaddq_f64(v26, vcvtq_f64_f32(*(float32x2_t *)v27.f32));
    float64x2_t v29 = vaddq_f64(v25, vcvt_hight_f64_f32(v27));
    float32x4_t v30 = *(float32x4_t *)((char *)v23 + 4 * v9);
    float64x2_t v31 = vaddq_f64(v29, vcvt_hight_f64_f32(v30));
    float64x2_t v32 = vaddq_f64(v28, vcvtq_f64_f32(*(float32x2_t *)v30.f32));
    float32x4_t v33 = v23[v10];
    *uint64_t v22 = vaddq_f64(v32, vcvtq_f64_f32(*(float32x2_t *)v33.f32));
    v22[1] = vaddq_f64(v31, vcvt_hight_f64_f32(v33));
    v22 += 2;
    ++v23;
    result -= 4;
  }
  while (result);
  if (v11 != v6) {
    goto LABEL_18;
  }
  return result;
}

void sub_100391590()
{
}

uint64_t sub_1003915A4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_100391628(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

float64x2_t sub_100391660(uint64_t a1, _OWORD *a2, float64x2_t *a3, int a4, int a5, float64x2_t result)
{
  int v6 = *(_DWORD *)(a1 + 8);
  if (v6 == 3)
  {
    uint64_t v13 = (a5 * a4);
    if ((int)v13 < 1) {
      return result;
    }
    uint64_t v14 = a5;
    if (v13 >= 0xA)
    {
      uint64_t v15 = 0;
      if ((unint64_t)((char *)a3 - (char *)a2 - 4 * v14) >= 0x20
        && (unint64_t)((char *)a3 - (char *)a2 - 8 * a5) >= 0x20
        && (unint64_t)((char *)a3 - (char *)a2) >= 0x20)
      {
        uint64_t v15 = v13 & 0x7FFFFFFC;
        float32x4_t v30 = (float64x2_t *)(a2 + 1);
        float64x2_t v31 = a3 + 1;
        uint64_t v32 = v13 & 0xFFFFFFFC;
        do
        {
          unint64_t result = vaddq_f64(vaddq_f64(v30[-1], *(float64x2_t *)((char *)v30 + 8 * a5 - 16)), v30[v14 - 1]);
          float64x2_t v33 = vaddq_f64(vaddq_f64(*v30, *(float64x2_t *)((char *)v30 + 8 * a5)), v30[v14]);
          v31[-1] = result;
          float64x2_t *v31 = v33;
          v30 += 2;
          v31 += 2;
          v32 -= 4;
        }
        while (v32);
        if (v15 == v13) {
          return result;
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v34 = (double *)a2 + v15 + v14 * 2;
    BOOL v35 = &a3->f64[v15];
    BOOL v36 = (double *)a2 + v15;
    uint64_t v37 = v13 - v15;
    int64x2_t v38 = (double *)a2 + v15 + a5;
    do
    {
      double v39 = *v36++;
      double v40 = v39;
      double v41 = *v38++;
      double v42 = v40 + v41;
      double v43 = *v34++;
      result.f64[0] = v42 + v43;
      *v35++ = result.f64[0];
      --v37;
    }
    while (v37);
    return result;
  }
  if (v6 != 5)
  {
    unint64_t v16 = (v6 * a5);
    unint64_t v17 = ((a4 - 1) * a5);
    if (a5 != 1)
    {
      if (a5 != 3)
      {
        if (a5 == 4)
        {
          if ((int)v16 < 1)
          {
            unint64_t result = 0uLL;
            float64x2_t v19 = 0uLL;
            goto LABEL_61;
          }
          if (v16 >= 5)
          {
            unint64_t v52 = ((v16 - 1) >> 2) + 1;
            unint64_t v18 = 4 * (v52 & 0x7FFFFFFFFFFFFFFELL);
            int16x8_t v53 = (float64x2_t *)(a2 + 2);
            unint64_t result = 0uLL;
            uint64_t v54 = v52 & 0x7FFFFFFFFFFFFFFELL;
            float64x2_t v19 = 0uLL;
            do
            {
              float64x2_t v55 = v53[-2];
              float64x2_t v56 = vaddq_f64(v19, v53[-1]);
              float64x2_t v58 = *v53;
              float64x2_t v57 = v53[1];
              v53 += 4;
              float64x2_t v19 = vaddq_f64(v56, v57);
              unint64_t result = vaddq_f64(vaddq_f64(result, v55), v58);
              v54 -= 2;
            }
            while (v54);
            if (v52 == (v52 & 0x7FFFFFFFFFFFFFFELL))
            {
LABEL_61:
              *a3 = result;
              a3[1] = v19;
              if ((int)v17 >= 1)
              {
                unint64_t v60 = 0;
                unint64_t v61 = a3 + 3;
                uint64_t v62 = 8 * (int)v16;
                do
                {
                  float64x2_t v63 = *(float64x2_t *)((char *)a2 + v62);
                  float64x2_t v64 = *(float64x2_t *)((char *)a2 + v62 + 16);
                  float64x2_t v65 = *(float64x2_t *)a2;
                  float64x2_t v66 = *((float64x2_t *)a2 + 1);
                  a2 += 2;
                  unint64_t result = vaddq_f64(result, vsubq_f64(v63, v65));
                  v60 += 4;
                  float64x2_t v19 = vaddq_f64(v19, vsubq_f64(v64, v66));
                  v61[-1] = result;
                  float64x2_t *v61 = v19;
                  v61 += 2;
                }
                while (v60 < v17);
              }
              return result;
            }
          }
          else
          {
            unint64_t v18 = 0;
            unint64_t result = 0uLL;
            float64x2_t v19 = 0uLL;
          }
          unint64_t v59 = (float64x2_t *)&a2[v18 / 2 + 1];
          do
          {
            unint64_t result = vaddq_f64(result, v59[-1]);
            float64x2_t v19 = vaddq_f64(v19, *v59);
            v18 += 4;
            v59 += 2;
          }
          while (v18 < v16);
          goto LABEL_61;
        }
        if (a5 < 1) {
          return result;
        }
        int v47 = 0;
        float32x4_t v48 = (float64x2_t *)((char *)a3 + 8 * a5);
        while ((int)v16 < 1)
        {
          result.f64[0] = 0.0;
          a3->f64[0] = 0.0;
          if ((int)v17 >= 1) {
            goto LABEL_50;
          }
LABEL_43:
          ++v47;
          a2 = (_OWORD *)((char *)a2 + 8);
          a3 = (float64x2_t *)((char *)a3 + 8);
          float32x4_t v48 = (float64x2_t *)((char *)v48 + 8);
          if (v47 == a5) {
            return result;
          }
        }
        uint64_t v49 = 0;
        result.f64[0] = 0.0;
        do
        {
          result.f64[0] = result.f64[0] + *((double *)a2 + v49);
          v49 += a5;
        }
        while (v49 < (int)v16);
        a3->f64[0] = result.f64[0];
        if ((int)v17 < 1) {
          goto LABEL_43;
        }
LABEL_50:
        uint64_t v50 = 0;
        do
        {
          uint64_t v51 = v50;
          result.f64[0] = result.f64[0] + *((double *)a2 + (int)v16 + v50) - *((double *)a2 + v50);
          v50 += a5;
          v48->f64[v51] = result.f64[0];
        }
        while (v50 < (int)v17);
        goto LABEL_43;
      }
      if ((int)v16 < 1)
      {
        unint64_t result = 0uLL;
        double v46 = 0.0;
        goto LABEL_79;
      }
      if (v16 >= 4)
      {
        uint64_t v75 = ((int)v16 - 1) / 3u + 1;
        unint64_t v45 = 3 * (v75 & 0x7FFFFFFE);
        float64x2_t v76 = (float64x2_t *)((char *)a2 + 24);
        unint64_t result = 0uLL;
        double v46 = 0.0;
        uint64_t v77 = v75 & 0x7FFFFFFE;
        do
        {
          double v46 = v46 + v76[-1].f64[1] + v76[1].f64[0];
          float64x2_t v78 = *(float64x2_t *)((char *)v76 - 24);
          float64x2_t v79 = *v76;
          v76 += 3;
          unint64_t result = vaddq_f64(vaddq_f64(result, v78), v79);
          v77 -= 2;
        }
        while (v77);
        if ((v75 & 0x7FFFFFFE) == v75)
        {
LABEL_79:
          *a3 = result;
          a3[1].f64[0] = v46;
          if ((int)v17 >= 1)
          {
            uint64_t v82 = 0;
            uint64_t v83 = 5;
            int32x4_t v84 = (char *)a2 + 8 * (int)v16;
            do
            {
              double v46 = v46 + *(double *)&v84[v82 + 16] - *(double *)((char *)a2 + v82 + 16);
              unint64_t result = vaddq_f64(result, vsubq_f64(*(float64x2_t *)&v84[v82], *(float64x2_t *)((char *)a2 + v82)));
              *(float64x2_t *)((char *)a3 + v82 + 24) = result;
              a3->f64[v83] = v46;
              unint64_t v85 = v83 - 2;
              v83 += 3;
              v82 += 24;
            }
            while (v85 < v17);
          }
          return result;
        }
      }
      else
      {
        unint64_t v45 = 0;
        unint64_t result = 0uLL;
        double v46 = 0.0;
      }
      float64x2_t v80 = (double *)a2 + v45 + 2;
      do
      {
        unint64_t result = vaddq_f64(result, *(float64x2_t *)(v80 - 2));
        double v81 = *v80;
        v80 += 3;
        double v46 = v46 + v81;
        v45 += 3;
      }
      while (v45 < v16);
      goto LABEL_79;
    }
    if ((int)v16 < 1)
    {
      result.f64[0] = 0.0;
      goto LABEL_70;
    }
    if (v16 == 1)
    {
      uint64_t v44 = 0;
      result.f64[0] = 0.0;
    }
    else
    {
      uint64_t v44 = v16 & 0xFFFFFFFE;
      double v67 = (double *)a2 + 1;
      result.f64[0] = 0.0;
      uint64_t v68 = v44;
      do
      {
        result.f64[0] = result.f64[0] + *(v67 - 1) + *v67;
        v67 += 2;
        v68 -= 2;
      }
      while (v68);
      if (v44 == v16)
      {
LABEL_70:
        a3->f64[0] = result.f64[0];
        if ((int)v17 >= 1)
        {
          float64x2_t v72 = &a3->f64[1];
          do
          {
            double v73 = *((double *)a2 + (int)v16);
            double v74 = *(double *)a2;
            a2 = (_OWORD *)((char *)a2 + 8);
            result.f64[0] = result.f64[0] + v73 - v74;
            *v72++ = result.f64[0];
            --v17;
          }
          while (v17);
        }
        return result;
      }
    }
    unint64_t v69 = (double *)a2 + v44;
    uint64_t v70 = v16 - v44;
    do
    {
      double v71 = *v69++;
      result.f64[0] = result.f64[0] + v71;
      --v70;
    }
    while (v70);
    goto LABEL_70;
  }
  uint64_t v7 = (a5 * a4);
  if ((int)v7 < 1) {
    return result;
  }
  uint64_t v8 = a5;
  uint64_t v9 = a5;
  uint64_t v10 = 3 * a5;
  uint64_t v11 = 2 * a5;
  if (v7 < 0xA)
  {
    uint64_t v12 = 0;
LABEL_23:
    uint64_t v26 = 0;
    float32x4_t v27 = (char *)a2 + 8 * v12 + 4 * v11;
    float64x2_t v28 = (char *)a2 + 8 * v12 + 8 * v10;
    uint64_t v29 = v7 - v12;
    do
    {
      result.f64[0] = *((double *)a2 + v12 + v26)
                    + *((double *)a2 + v12 + v8 + v26)
                    + *((double *)a2 + v12 + v9 * 2 + v26)
                    + *(double *)&v28[8 * v26]
                    + *(double *)&v27[8 * v26];
      a3->f64[v12 + v26++] = result.f64[0];
    }
    while (v29 != v26);
    return result;
  }
  uint64_t v12 = 0;
  int64_t v20 = (char *)a3 - (char *)a2;
  if ((unint64_t)((char *)a3 - (char *)a2 - 4 * v11) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)(v20 - 8 * v10) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)(v20 - 4 * v9) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v21 = 8 * a5;
  if ((unint64_t)(v20 - v21) < 0x20) {
    goto LABEL_23;
  }
  if ((unint64_t)((char *)a3 - (char *)a2) < 0x20) {
    goto LABEL_23;
  }
  uint64_t v12 = v7 & 0x7FFFFFFC;
  uint64_t v22 = (float64x2_t *)(a2 + 1);
  uint64_t v23 = a3 + 1;
  uint64_t v24 = v7 & 0xFFFFFFFC;
  do
  {
    unint64_t result = vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v22[-1], *(float64x2_t *)((char *)v22 + v21 - 16)), v22[v9 - 1]), *(float64x2_t *)((char *)v22 + 8 * v10 - 16)), v22[v11 - 1]);
    float64x2_t v25 = vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(*v22, *(float64x2_t *)((char *)v22 + 8 * v8)), v22[v9]), *(float64x2_t *)((char *)v22 + 8 * v10)), v22[v11]);
    v23[-1] = result;
    *uint64_t v23 = v25;
    v22 += 2;
    v23 += 2;
    v24 -= 4;
  }
  while (v24);
  if (v12 != v7) {
    goto LABEL_23;
  }
  return result;
}

void sub_100391C58()
{
}

uint64_t sub_100391C6C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100391CEC(void *a1)
{
  *a1 = off_10049C0D0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100391D4C(void *a1)
{
  *a1 = off_10049C0D0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_100391DC0(uint64_t a1, int32x4_t **a2, uint64_t a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  int v13 = a6;
  unint64_t v16 = a2;
  uint64_t v17 = a1;
  float64x2_t v19 = (int32x4_t **)(a1 + 32);
  unint64_t v18 = *(int32x4_t **)(a1 + 32);
  double v20 = *(double *)(a1 + 16);
  unint64_t v21 = (uint64_t)(*(void *)(a1 + 40) - (void)v18) >> 2;
  if (v21 == a6)
  {
    int v22 = *(_DWORD *)(a1 + 24);
    if (v22)
    {
      int v23 = *(_DWORD *)(a1 + 8) - 1;
      if (v22 != v23)
      {
        v195[0] = 0;
        v195[1] = 0;
        uint64_t v24 = sub_1002D19D8(v195, 19);
        *(_DWORD *)(v24 + 15) = 825058682;
        *(_OWORD *)uint64_t v24 = *(_OWORD *)"sumCount == ksize-1";
        sub_1002D2278(-215, v195, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 337);
      }
      unint64_t v16 = &a2[v23];
      goto LABEL_18;
    }
  }
  else
  {
    if (a6 <= v21)
    {
      if (a6 < v21) {
        *(void *)(a1 + 40) = (char *)v18 + 4 * a6;
      }
    }
    else
    {
      sub_10025FCA8(a1 + 32, a6 - v21);
      unint64_t v18 = *v19;
    }
    *(_DWORD *)(v17 + 24) = 0;
  }
  bzero(v18, 4 * v13);
  int v25 = *(_DWORD *)(v17 + 24);
  int v26 = *(_DWORD *)(v17 + 8) - 1;
  if (v25 < v26)
  {
    unint64_t v27 = (v13 - 4);
    if (v13 >= 4)
    {
      if ((v27 & 0xFFFFFFFC) + 5 <= v13) {
        uint64_t v130 = v13;
      }
      else {
        uint64_t v130 = (v27 & 0xFFFFFFFC) + 5;
      }
      uint64_t v131 = 4 * v130 - ((4 * (v13 - 4)) & 0x3FFFFFFF0);
      unint64_t v132 = v130 - (v27 & 0xFFFFFFFC) - 4;
      unint64_t v133 = v132 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint64_t v135 = 0;
        unint64_t v136 = 0;
        unint64_t v137 = *v16;
        uint64_t i64 = (uint64_t)(*v16)[2].i64;
        float64x2_t v139 = v18 + 2;
        uint64_t v140 = 4;
        do
        {
          uint64_t v141 = v140;
          uint64_t v142 = v135;
          int16x4_t v143 = (int32x4_t *)i64;
          int16x4_t v144 = v139;
          v18[v136 / 4] = vaddq_s32(v137[v136 / 4], v18[v136 / 4]);
          v136 += 4;
          v140 += 4;
          ++v135;
          i64 += 16;
          ++v139;
        }
        while (v136 <= v27);
        if ((int)v136 < v13)
        {
          if (v132 < 8) {
            goto LABEL_127;
          }
          uint64_t v145 = 16 * v142;
          uint64_t v146 = v145 + 16;
          int8x8_t v147 = &v18[(unint64_t)v145 / 0x10 + 1];
          uint64_t v148 = v131 + v145;
          if (v147 < (int32x4_t *)&v137->i8[v148] && &v137->i8[v146] < &v18->i8[v148]) {
            goto LABEL_127;
          }
          v141 += v133;
          unint64_t v149 = v132 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v150 = vaddq_s32(*v144, *v143);
            v144[-1] = vaddq_s32(v144[-1], v143[-1]);
            *int16x4_t v144 = v150;
            v143 += 2;
            v144 += 2;
            v149 -= 8;
          }
          while (v149);
          if (v132 != v133)
          {
LABEL_127:
            do
            {
              v18->i32[v141] += v137->i32[v141];
              ++v141;
            }
            while (v141 < v13);
          }
        }
        int v134 = *(_DWORD *)(v17 + 24) + 1;
        *(_DWORD *)(v17 + 24) = v134;
        ++v16;
      }
      while (v134 < *(_DWORD *)(v17 + 8) - 1);
    }
    else if (v13 >= 1)
    {
      do
      {
        uint64_t v68 = *v16;
        v18->i32[0] += (*v16)->i32[0];
        if (v13 != 1)
        {
          v18->i32[1] += v68->i32[1];
          if (v13 != 2) {
            v18->i32[2] += v68->i32[2];
          }
        }
        int v67 = *(_DWORD *)(v17 + 24) + 1;
        *(_DWORD *)(v17 + 24) = v67;
        ++v16;
      }
      while (v67 < *(_DWORD *)(v17 + 8) - 1);
    }
    else
    {
      if (v26 <= v25 + 1) {
        int v28 = v25 + 1;
      }
      else {
        int v28 = *(_DWORD *)(v17 + 8) - 1;
      }
      v16 += (v28 + ~v25) + 1;
      *(_DWORD *)(v17 + 24) = v28;
    }
  }
LABEL_18:
  if (a5)
  {
    int v29 = a5 - 1;
    int v30 = v13 - 8;
    a13.n128_f32[0] = v20;
    uint64_t v31 = a4;
    uint64_t v192 = v17;
    if (v20 != 1.0)
    {
      uint64_t v32 = v18 + 1;
      int v191 = v13;
      while (1)
      {
        int v33 = v29;
        uint64_t v34 = *v16;
        BOOL v35 = v16[1 - *(int *)(v17 + 8)];
        if (v13 >= 8) {
          break;
        }
        uint64_t v36 = 0;
        uint64_t v37 = a3;
        if (v13 > 0) {
          goto LABEL_41;
        }
LABEL_21:
        a3 = v37 + a4;
        ++v16;
        int v29 = v33 - 1;
        if (!v33) {
          return;
        }
      }
      int32x4_t v193 = v16;
      uint64_t v38 = 0;
      double v39 = v34 + 1;
      double v40 = v35 + 1;
      double v41 = v32;
      uint64_t v37 = a3;
      do
      {
        int32x4_t v42 = v41[-1];
        int32x4_t v43 = *v41;
        int32x4_t v44 = v39[-1];
        int32x4_t v45 = *v39;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          __n128 v187 = a13;
          float64x2_t v183 = v32;
          int v179 = v33;
          float64x2_t v171 = v34;
          int8x8_t v175 = v35;
          int32x4_t v163 = v44;
          int32x4_t v167 = v42;
          int32x4_t v155 = v45;
          int32x4_t v159 = v43;
          int v53 = __cxa_guard_acquire(qword_1004D2D60);
          int32x4_t v45 = v155;
          int32x4_t v43 = v159;
          int32x4_t v44 = v163;
          int32x4_t v42 = v167;
          uint64_t v34 = v171;
          BOOL v35 = v175;
          int v33 = v179;
          *(void *)&long long v54 = 0x8000000080000000;
          *((void *)&v54 + 1) = 0x8000000080000000;
          uint64_t v32 = v183;
          a13 = v187;
          uint64_t v37 = a3;
          if (v53)
          {
            xmmword_1004D2D50 = v54;
            __cxa_guard_release(qword_1004D2D60);
            int32x4_t v45 = v155;
            int32x4_t v43 = v159;
            int32x4_t v44 = v163;
            int32x4_t v42 = v167;
            uint64_t v34 = v171;
            BOOL v35 = v175;
            int v33 = v179;
            uint64_t v32 = v183;
            a13 = v187;
            uint64_t v37 = a3;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          __n128 v188 = a13;
          float64x2_t v184 = v32;
          int v180 = v33;
          float64x2_t v172 = v34;
          float64x2_t v176 = v35;
          int32x4_t v164 = v44;
          int32x4_t v168 = v42;
          int32x4_t v156 = v45;
          int32x4_t v160 = v43;
          int v55 = __cxa_guard_acquire(qword_1004D2D80);
          int32x4_t v45 = v156;
          int32x4_t v43 = v160;
          int32x4_t v44 = v164;
          int32x4_t v42 = v168;
          uint64_t v34 = v172;
          BOOL v35 = v176;
          int v33 = v180;
          *(void *)&long long v56 = 0x3F0000003F000000;
          *((void *)&v56 + 1) = 0x3F0000003F000000;
          uint64_t v32 = v184;
          a13 = v188;
          uint64_t v37 = a3;
          if (v55)
          {
            xmmword_1004D2D70 = v56;
            __cxa_guard_release(qword_1004D2D80);
            int32x4_t v45 = v156;
            int32x4_t v43 = v160;
            int32x4_t v44 = v164;
            int32x4_t v42 = v168;
            uint64_t v34 = v172;
            BOOL v35 = v176;
            int v33 = v180;
            uint64_t v32 = v184;
            a13 = v188;
            uint64_t v37 = a3;
          }
        }
        int8x16_t v46 = (int8x16_t)xmmword_1004D2D70;
        int8x16_t v47 = (int8x16_t)xmmword_1004D2D50;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          __n128 v189 = a13;
          int8x8_t v185 = v32;
          int v181 = v33;
          float64x2_t v173 = v34;
          float64x2_t v177 = v35;
          int32x4_t v165 = v44;
          int32x4_t v169 = v42;
          int32x4_t v157 = v45;
          int32x4_t v161 = v43;
          int8x16_t v151 = v47;
          int8x16_t v153 = v46;
          int v57 = __cxa_guard_acquire(qword_1004D2D60);
          int8x16_t v47 = v151;
          int8x16_t v46 = v153;
          int32x4_t v45 = v157;
          int32x4_t v43 = v161;
          int32x4_t v44 = v165;
          int32x4_t v42 = v169;
          uint64_t v34 = v173;
          BOOL v35 = v177;
          int v33 = v181;
          *(void *)&long long v58 = 0x8000000080000000;
          *((void *)&v58 + 1) = 0x8000000080000000;
          uint64_t v32 = v185;
          a13 = v189;
          uint64_t v37 = a3;
          if (v57)
          {
            xmmword_1004D2D50 = v58;
            __cxa_guard_release(qword_1004D2D60);
            int8x16_t v47 = v151;
            int8x16_t v46 = v153;
            int32x4_t v45 = v157;
            int32x4_t v43 = v161;
            int32x4_t v44 = v165;
            int32x4_t v42 = v169;
            uint64_t v34 = v173;
            BOOL v35 = v177;
            int v33 = v181;
            uint64_t v32 = v185;
            a13 = v189;
            uint64_t v37 = a3;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          __n128 v190 = a13;
          float64x2_t v186 = v32;
          int v182 = v33;
          uint64x2_t v174 = v34;
          float64x2_t v178 = v35;
          int32x4_t v166 = v44;
          int32x4_t v170 = v42;
          int32x4_t v158 = v45;
          int32x4_t v162 = v43;
          int8x16_t v152 = v47;
          int8x16_t v154 = v46;
          int v59 = __cxa_guard_acquire(qword_1004D2D80);
          int8x16_t v47 = v152;
          int8x16_t v46 = v154;
          int32x4_t v45 = v158;
          int32x4_t v43 = v162;
          int32x4_t v44 = v166;
          int32x4_t v42 = v170;
          uint64_t v34 = v174;
          BOOL v35 = v178;
          int v33 = v182;
          *(void *)&long long v60 = 0x3F0000003F000000;
          *((void *)&v60 + 1) = 0x3F0000003F000000;
          uint64_t v32 = v186;
          a13 = v190;
          uint64_t v37 = a3;
          if (v59)
          {
            xmmword_1004D2D70 = v60;
            __cxa_guard_release(qword_1004D2D80);
            int8x16_t v47 = v152;
            int8x16_t v46 = v154;
            int32x4_t v45 = v158;
            int32x4_t v43 = v162;
            int32x4_t v44 = v166;
            int32x4_t v42 = v170;
            uint64_t v34 = v174;
            BOOL v35 = v178;
            int v33 = v182;
            uint64_t v32 = v186;
            a13 = v190;
            uint64_t v37 = a3;
          }
        }
        int32x4_t v48 = vaddq_s32(v44, v42);
        int32x4_t v49 = vaddq_s32(v45, v43);
        int8x16_t v50 = (int8x16_t)vmulq_n_f32(vcvtq_f32_s32(v48), a13.n128_f32[0]);
        int8x16_t v51 = (int8x16_t)vmulq_n_f32(vcvtq_f32_s32(v49), a13.n128_f32[0]);
        *(uint8x8_t *)(v37 + v38) = vqmovn_u16(vqmovn_high_u32(vqmovn_u32((uint32x4_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v50, (float32x4_t)vorrq_s8(vandq_s8(v47, v50), v46)))), (uint32x4_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v51, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_1004D2D50, v51), (int8x16_t)xmmword_1004D2D70)))));
        v41[-1] = vsubq_s32(v48, v40[-1]);
        int32x4_t v52 = *v40;
        v40 += 2;
        v38 += 8;
        int32x4_t *v41 = vsubq_s32(v49, v52);
        v41 += 2;
        v39 += 2;
      }
      while (v30 >= (int)v38);
      uint64_t v36 = v38;
      int v13 = v191;
      uint64_t v17 = v192;
      unint64_t v16 = v193;
      if ((int)v36 >= v191) {
        goto LABEL_21;
      }
LABEL_41:
      uint64_t v61 = 0;
      uint64_t v62 = &v18->i32[v36];
      float64x2_t v63 = &v34->i32[v36];
      do
      {
        int v64 = v63[v61] + v62[v61];
        double v65 = rint(v20 * (double)v64);
        int v66 = (uint64_t)v65 & ~((int)(uint64_t)v65 >> 31);
        if (v66 >= 255) {
          LOBYTE(v66) = -1;
        }
        *(unsigned char *)(v37 + v36 + v61) = v66;
        v62[v61] = v64 - v35->i32[v36 + v61];
        ++v61;
      }
      while ((int)v36 + (int)v61 < v13);
      goto LABEL_21;
    }
    uint64_t v69 = 0;
    uint64_t v70 = v13;
    double v71 = &v18->i32[v70];
    v72.i64[0] = 0xFF000000FFLL;
    v72.i64[1] = 0xFF000000FFLL;
    uint64_t v73 = a3;
    do
    {
      int v74 = v29;
      uint64_t v75 = *v16;
      float64x2_t v76 = v16[1 - *(int *)(v17 + 8)];
      if (v13 >= 8)
      {
        uint64_t v78 = 0;
        float64x2_t v79 = v76 + 1;
        float64x2_t v80 = v75 + 1;
        double v81 = v18 + 1;
        do
        {
          int32x4_t v82 = vaddq_s32(v80[-1], v81[-1]);
          int32x4_t v83 = vaddq_s32(*v80, *v81);
          *(uint8x8_t *)(v73 + v78) = vqmovn_u16(vqmovn_high_u32(vqmovn_u32((uint32x4_t)v82), (uint32x4_t)v83));
          v81[-1] = vsubq_s32(v82, v79[-1]);
          int32x4_t v84 = *v79;
          v79 += 2;
          v78 += 8;
          *double v81 = vsubq_s32(v83, v84);
          v81 += 2;
          v80 += 2;
        }
        while (v78 <= v30);
        uint64_t v77 = v78;
        if ((int)v78 >= v13) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v77 = 0;
        if (v13 <= 0) {
          goto LABEL_51;
        }
      }
      unint64_t v85 = v13 - v77;
      if (v85 < 8)
      {
        uint64_t v86 = v77;
        goto LABEL_104;
      }
      unint64_t v87 = v16;
      unint64_t v88 = a3 + v13 + v69 * v31;
      unint64_t v89 = v73 + v77;
      uint64_t v90 = 4 * v77;
      float v91 = &v18->i32[v77];
      double v92 = &v75->i8[4 * v77];
      unint64_t v93 = (unint64_t)v76 + 4 * v77;
      unint64_t v94 = (unint64_t)v76->u64 + v70 * 4;
      BOOL v96 = v73 + v77 < (unint64_t)v75->u64 + v70 * 4 && (unint64_t)v92 < v88;
      BOOL v98 = v89 < v94 && v93 < v88;
      BOOL v100 = v91 < &v75->i32[v70] && v92 < (char *)v71;
      BOOL v102 = (unint64_t)v91 < v94 && v93 < (unint64_t)v71;
      if ((unint64_t)v91 < v88 && v89 < (unint64_t)v71)
      {
        uint64_t v86 = v77;
        uint64_t v17 = v192;
        unint64_t v16 = v87;
        goto LABEL_104;
      }
      uint64_t v17 = v192;
      if (v96 || v98 || v100 || v102)
      {
        uint64_t v86 = v77;
        unint64_t v16 = v87;
        goto LABEL_104;
      }
      if (v85 >= 0x10)
      {
        unint64_t v104 = v85 & 0xFFFFFFFFFFFFFFF0;
        float64x2_t v105 = (int32x4_t *)((char *)v18 + v90);
        double v106 = (int32x4_t *)((char *)v75 + v90);
        float v107 = (int32x4_t *)((char *)v76 + v90);
        uint64_t v108 = v77;
        unint64_t v109 = v85 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int32x4_t v110 = vaddq_s32(v106[3], v105[3]);
          int32x4_t v111 = vaddq_s32(v106[2], v105[2]);
          int32x4_t v112 = vaddq_s32(v106[1], v105[1]);
          int32x4_t v113 = vaddq_s32(*v106, *v105);
          v197.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(v110, (int32x4_t)0), v72);
          v197.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(v111, (int32x4_t)0), v72);
          v197.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(v112, (int32x4_t)0), v72);
          v197.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(v113, (int32x4_t)0), v72);
          *(int8x16_t *)(v73 + v108) = vqtbl4q_s8(v197, (int8x16_t)xmmword_1004047C0);
          int32x4_t v114 = v107[2];
          int32x4_t v115 = v107[3];
          int32x4_t v116 = *v107;
          v197.val[0] = (int8x16_t)v107[1];
          v107 += 4;
          v105[2] = vsubq_s32(v111, v114);
          v105[3] = vsubq_s32(v110, v115);
          *float64x2_t v105 = vsubq_s32(v113, v116);
          v105[1] = vsubq_s32(v112, (int32x4_t)v197.val[0]);
          v105 += 4;
          v106 += 4;
          v108 += 16;
          v109 -= 16;
        }
        while (v109);
        unint64_t v16 = v87;
        if (v85 == v104) {
          goto LABEL_51;
        }
        if ((v85 & 8) == 0)
        {
          uint64_t v86 = v104 + v77;
          unint64_t v16 = v87;
          do
          {
LABEL_104:
            int v128 = v75->i32[v86] + v18->i32[v86];
            int v129 = v128 & ~(v128 >> 31);
            if (v129 >= 255) {
              LOBYTE(v129) = -1;
            }
            *(unsigned char *)(v73 + v86) = v129;
            v18->i32[v86] = v128 - v76->i32[v86];
            ++v86;
          }
          while (v13 != v86);
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v104 = 0;
      }
      uint64_t v86 = (v85 & 0xFFFFFFFFFFFFFFF8) + v77;
      unint64_t v117 = v104 - (v85 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v118 = v104 + v77;
      float64x2_t v119 = (int32x4_t *)((char *)v18 + 4 * v118);
      float64x2_t v120 = (int32x4_t *)((char *)v75 + 4 * v118);
      float64x2_t v121 = (int32x4_t *)((char *)v76 + 4 * v118);
      do
      {
        int32x4_t v122 = *v120;
        int32x4_t v123 = v120[1];
        v120 += 2;
        int32x4_t v124 = vaddq_s32(v123, v119[1]);
        int32x4_t v125 = vaddq_s32(v122, *v119);
        v196.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(v124, (int32x4_t)0), v72);
        v196.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(v125, (int32x4_t)0), v72);
        *(void *)(v73 + v118) = vqtbl2q_s8(v196, (int8x16_t)xmmword_1004047D0).u64[0];
        int32x4_t v126 = *v121;
        int32x4_t v127 = v121[1];
        v121 += 2;
        int32x4_t *v119 = vsubq_s32(v125, v126);
        v119[1] = vsubq_s32(v124, v127);
        v119 += 2;
        v118 += 8;
        v117 += 8;
      }
      while (v117);
      unint64_t v16 = v87;
      if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_104;
      }
LABEL_51:
      v73 += v31;
      ++v16;
      int v29 = v74 - 1;
      ++v69;
    }
    while (v74);
  }
}

void sub_10039280C(_Unwind_Exception *a1)
{
  sub_1002D1A1C((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_100392824(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100392830()
{
}

uint64_t sub_100392844(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003928C4(void *a1)
{
  *a1 = off_10049C158;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100392924(void *a1)
{
  *a1 = off_10049C158;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_100392998(uint64_t a1, unsigned __int16 **a2, unint64_t a3, int a4, int a5, int a6)
{
  int v7 = a5;
  uint64_t v9 = a2;
  uint64_t v12 = (int16x8_t **)(a1 + 40);
  uint64_t v11 = *(int16x8_t **)(a1 + 40);
  unsigned int v14 = *(_DWORD *)(a1 + 28);
  unsigned int v13 = *(_DWORD *)(a1 + 32);
  double v15 = *(double *)(a1 + 16);
  unint64_t v16 = (uint64_t)(*(void *)(a1 + 48) - (void)v11) >> 1;
  if (v16 == a6)
  {
    int v17 = *(_DWORD *)(a1 + 24);
    if (v17)
    {
      int v18 = *(_DWORD *)(a1 + 8) - 1;
      if (v17 != v18)
      {
        v178[0] = 0;
        v178[1] = 0;
        uint64_t v19 = sub_1002D19D8(v178, 19);
        *(_DWORD *)(v19 + 15) = 825058682;
        *(_OWORD *)uint64_t v19 = *(_OWORD *)"sumCount == ksize-1";
        sub_1002D2278(-215, v178, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 485);
      }
      uint64_t v9 = &a2[v18];
      if (!a5) {
        return;
      }
      goto LABEL_44;
    }
  }
  else
  {
    if (a6 <= v16)
    {
      if (a6 < v16) {
        *(void *)(a1 + 48) = (char *)v11 + 2 * a6;
      }
    }
    else
    {
      sub_100393410(a1 + 40, a6 - v16);
      uint64_t v11 = *v12;
    }
    *(_DWORD *)(a1 + 24) = 0;
  }
  bzero(v11, 2 * a6);
  int v20 = *(_DWORD *)(a1 + 24);
  int v21 = *(_DWORD *)(a1 + 8) - 1;
  if (v20 >= v21) {
    goto LABEL_43;
  }
  unint64_t v22 = (a6 - 8);
  if (a6 >= 8)
  {
    if ((v22 & 0xFFFFFFF8) + 9 <= a6) {
      uint64_t v26 = a6;
    }
    else {
      uint64_t v26 = (v22 & 0xFFFFFFF8) + 9;
    }
    uint64_t v27 = 2 * v26 - ((2 * (a6 - 8)) & 0x1FFFFFFF0);
    unint64_t v28 = v26 - (v22 & 0xFFFFFFF8) - 8;
    unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      int v33 = (uint16x8_t *)*v9;
      uint64_t v34 = (uint64_t)(*v9 + 16);
      BOOL v35 = v11 + 2;
      uint64_t v36 = 8;
      do
      {
        uint64_t v37 = v36;
        uint64_t v38 = v31;
        double v39 = (int16x8_t *)v34;
        double v40 = v35;
        v11[v32 / 8] = (int16x8_t)vqaddq_u16((uint16x8_t)v11[v32 / 8], v33[v32 / 8]);
        v32 += 8;
        v36 += 8;
        ++v31;
        v34 += 16;
        ++v35;
      }
      while (v32 <= v22);
      if ((int)v32 < a6)
      {
        if (v28 < 0x10) {
          goto LABEL_192;
        }
        uint64_t v41 = 16 * v38;
        uint64_t v42 = v41 + 16;
        int32x4_t v43 = &v11[(unint64_t)v41 / 0x10 + 1];
        uint64_t v44 = v27 + v41;
        if (v43 < (int16x8_t *)&v33->i8[v44] && &v33->i8[v42] < &v11->i8[v44]) {
          goto LABEL_192;
        }
        v37 += v29;
        unint64_t v45 = v28 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v46 = vaddq_s16(*v40, *v39);
          v40[-1] = vaddq_s16(v40[-1], v39[-1]);
          int16x8_t *v40 = v46;
          v39 += 2;
          v40 += 2;
          v45 -= 16;
        }
        while (v45);
        if (v28 != v29)
        {
LABEL_192:
          do
          {
            v11->i16[v37] += v33->i16[v37];
            ++v37;
          }
          while (v37 < a6);
        }
      }
      int v30 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v30;
      ++v9;
    }
    while (v30 < *(_DWORD *)(a1 + 8) - 1);
LABEL_43:
    if (!v7) {
      return;
    }
    goto LABEL_44;
  }
  int v23 = v20 + 1;
  if (a6 > 0)
  {
    int v24 = v11->u16[0];
    do
    {
      int v25 = (uint16x8_t *)*v9;
      v24 += **v9;
      v11->i16[0] = v24;
      if (a6 != 1)
      {
        v11->i16[1] += v25->i16[1];
        if (a6 != 2)
        {
          v11->i16[2] += v25->i16[2];
          if (a6 != 3)
          {
            v11->i16[3] += v25->i16[3];
            if (a6 != 4)
            {
              v11->i16[4] += v25->i16[4];
              if (a6 != 5)
              {
                v11->i16[5] += v25->i16[5];
                if (a6 != 6) {
                  v11->i16[6] += v25->i16[6];
                }
              }
            }
          }
        }
      }
      ++v20;
      ++v9;
    }
    while (v20 < v21);
    if (v21 > v23) {
      int v23 = v21;
    }
    *(_DWORD *)(a1 + 24) = v23;
    goto LABEL_43;
  }
  if (v21 > v23) {
    int v23 = *(_DWORD *)(a1 + 8) - 1;
  }
  v9 += (v23 + ~v20) + 1;
  *(_DWORD *)(a1 + 24) = v23;
  if (v7)
  {
LABEL_44:
    int v47 = v7 - 1;
    uint64_t v48 = a4;
    if (v15 != 1.0)
    {
      uint64_t v49 = 0;
      int32x4_t v50 = vdupq_n_s32(v13);
      uint16x8_t v51 = (uint16x8_t)vdupq_n_s16(v14);
      uint64_t v52 = a6;
      int v53 = &v11->i16[v52];
      int32x4_t v54 = vdupq_n_s32(v14);
      unint64_t v55 = a3;
      while (1)
      {
        int v56 = v47;
        int v57 = (int16x8_t *)*v9;
        long long v58 = (int16x8_t *)v9[1 - *(int *)(a1 + 8)];
        if (a6 >= 16) {
          break;
        }
        uint64_t v59 = 0;
        if (a6 > 0) {
          goto LABEL_53;
        }
LABEL_46:
        v55 += v48;
        ++v9;
        int v47 = v56 - 1;
        ++v49;
        if (!v56) {
          return;
        }
      }
      uint64_t v60 = 0;
      uint64_t v61 = v58 + 1;
      uint64_t v62 = v57 + 1;
      float64x2_t v63 = v11 + 1;
      do
      {
        int16x8_t v64 = vaddq_s16(v62[-1], v63[-1]);
        int16x8_t v65 = vaddq_s16(*v62, *v63);
        uint16x8_t v66 = vqaddq_u16((uint16x8_t)v64, v51);
        uint16x8_t v67 = vqaddq_u16((uint16x8_t)v65, v51);
        int16x8_t v68 = vsubq_s16(v64, v61[-1]);
        int16x8_t v69 = vsubq_s16(v65, *v61);
        *(int8x16_t *)(v55 + v60) = vqmovun_high_s16(vqmovun_s16(vqmovn_high_s32(vqmovn_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v50, (int32x4_t)vmovl_u16(*(uint16x4_t *)v66.i8)), 0x17uLL)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v50, (int32x4_t)vmovl_high_u16(v66)), 0x17uLL))), vqmovn_high_s32(vqmovn_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v50, (int32x4_t)vmovl_u16(*(uint16x4_t *)v67.i8)), 0x17uLL)), (int32x4_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v50, (int32x4_t)vmovl_high_u16(v67)), 0x17uLL)));
        v60 += 16;
        v63[-1] = v68;
        *float64x2_t v63 = v69;
        v61 += 2;
        v63 += 2;
        v62 += 2;
      }
      while (v60 <= a6 - 16);
      uint64_t v59 = v60;
      if ((int)v60 >= a6) {
        goto LABEL_46;
      }
LABEL_53:
      unint64_t v70 = a6 - v59;
      if (v70 < 8)
      {
        uint64_t v71 = v59;
        goto LABEL_103;
      }
      unint64_t v72 = a3 + a6 + v49 * v48;
      unint64_t v73 = v55 + v59;
      uint64_t v74 = 2 * v59;
      uint64_t v75 = &v11->i16[v59];
      float64x2_t v76 = &v57->i8[2 * v59];
      uint64_t v77 = &v58->i8[2 * v59];
      uint64_t v78 = &v58->i16[v52];
      BOOL v79 = v55 + v59 >= (unint64_t)v57->u64 + v52 * 2 || (unint64_t)v76 >= v72;
      char v80 = !v79;
      BOOL v82 = v73 < (unint64_t)v78 && (unint64_t)v77 < v72;
      BOOL v84 = v75 < &v57->i16[v52] && v76 < (char *)v53;
      BOOL v86 = v75 < v78 && v77 < (char *)v53;
      if ((unint64_t)v75 < v72 && v73 < (unint64_t)v53)
      {
        uint64_t v71 = v59;
        goto LABEL_103;
      }
      if (v80)
      {
        uint64_t v71 = v59;
      }
      else if (v82)
      {
        uint64_t v71 = v59;
      }
      else if (v84)
      {
        uint64_t v71 = v59;
      }
      else if (v86)
      {
        uint64_t v71 = v59;
      }
      else
      {
        if (v70 < 0x10)
        {
          unint64_t v88 = 0;
          goto LABEL_96;
        }
        unint64_t v88 = v70 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v89 = (uint16x8_t *)&v11->i8[v74];
        uint64_t v90 = (uint16x8_t *)&v57->i8[v74];
        float v91 = (int16x8_t *)((char *)v58 + v74);
        uint64_t v92 = v59;
        unint64_t v93 = v70 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          uint16x8_t v94 = v89[1];
          uint16x8_t v95 = *v90;
          uint16x8_t v96 = v90[1];
          v90 += 2;
          int16x8_t v97 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v95.i8, *(uint16x4_t *)v89->i8);
          int16x8_t v98 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v96.i8, *(uint16x4_t *)v94.i8);
          int16x8_t v99 = (int16x8_t)vaddl_high_u16(v96, v94);
          int16x8_t v100 = (int16x8_t)vaddl_high_u16(v95, *v89);
          v182.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v100, v54), v50), 0x17uLL);
          v182.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v99, v54), v50), 0x17uLL);
          v182.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v98, v54), v50), 0x17uLL);
          v182.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v97, v54), v50), 0x17uLL);
          *(int8x16_t *)(v55 + v92) = vqtbl4q_s8(v182, (int8x16_t)xmmword_1004047C0);
          int16x8_t v101 = *v91;
          int16x8_t v102 = v91[1];
          v91 += 2;
          *(int16x8_t *)unint64_t v89 = vsubq_s16(vuzp1q_s16(v97, v100), v101);
          v89[1] = (uint16x8_t)vsubq_s16(vuzp1q_s16(v98, v99), v102);
          v89 += 2;
          v92 += 16;
          v93 -= 16;
        }
        while (v93);
        if (v70 == v88) {
          goto LABEL_46;
        }
        if ((v70 & 8) != 0)
        {
LABEL_96:
          uint64_t v71 = (v70 & 0xFFFFFFFFFFFFFFF8) + v59;
          unint64_t v103 = v88 - (v70 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = v88 + v59;
          float64x2_t v105 = (uint16x4_t *)((char *)v11 + 2 * v104);
          double v106 = (uint16x8_t *)((char *)v57 + 2 * v104);
          float v107 = (int16x8_t *)((char *)v58 + 2 * v104);
          do
          {
            uint16x8_t v108 = *v106++;
            int16x8_t v109 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v108.i8, *v105);
            int16x8_t v110 = (int16x8_t)vaddl_high_u16(v108, *(uint16x8_t *)v105->i8);
            v180.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v110, v54), v50), 0x17uLL);
            v180.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)v109, v54), v50), 0x17uLL);
            *(void *)(v55 + v104) = vqtbl2q_s8(v180, (int8x16_t)xmmword_1004047D0).u64[0];
            int16x8_t v111 = *v107++;
            *(int16x8_t *)v105->i8 = vsubq_s16(vuzp1q_s16(v109, v110), v111);
            v105 += 2;
            v104 += 8;
            v103 += 8;
          }
          while (v103);
          if (v70 == (v70 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_46;
          }
          goto LABEL_103;
        }
        uint64_t v71 = v88 + v59;
      }
      do
      {
LABEL_103:
        int v112 = v57->u16[v71] + v11->u16[v71];
        *(unsigned char *)(v55 + v71) = ((v112 + v14) * v13) >> 23;
        v11->i16[v71] = v112 - v58->i16[v71];
        ++v71;
      }
      while (a6 != v71);
      goto LABEL_46;
    }
    if (a6 < 1) {
      return;
    }
    if (a6 < 8)
    {
      int32x4_t v113 = v9 + 1;
      int32x4_t v114 = (unsigned char *)(a3 + 3);
      do
      {
        int32x4_t v115 = *(v113 - 1);
        int32x4_t v116 = v113[-*(int *)(a1 + 8)];
        int v117 = *v115 + v11->u16[0];
        if (v117 >= 255) {
          char v118 = -1;
        }
        else {
          char v118 = *v115 + v11->i16[0];
        }
        *(v114 - 3) = v118;
        v11->i16[0] = v117 - *v116;
        if (a6 != 1)
        {
          int v119 = v115[1] + v11->u16[1];
          char v120 = v119 >= 255 ? -1 : v115[1] + v11->i16[1];
          *(v114 - 2) = v120;
          v11->i16[1] = v119 - v116[1];
          if (a6 != 2)
          {
            int v121 = v115[2] + v11->u16[2];
            char v122 = v121 >= 255 ? -1 : v115[2] + v11->i16[2];
            *(v114 - 1) = v122;
            v11->i16[2] = v121 - v116[2];
            if (a6 != 3)
            {
              int v123 = v115[3] + v11->u16[3];
              char v124 = v123 >= 255 ? -1 : v115[3] + v11->i16[3];
              unsigned char *v114 = v124;
              v11->i16[3] = v123 - v116[3];
              if (a6 != 4)
              {
                int v125 = v115[4] + v11->u16[4];
                char v126 = v125 >= 255 ? -1 : v115[4] + v11->i16[4];
                v114[1] = v126;
                v11->i16[4] = v125 - v116[4];
                if (a6 != 5)
                {
                  int v127 = v115[5] + v11->u16[5];
                  char v128 = v127 >= 255 ? -1 : v115[5] + v11->i16[5];
                  v114[2] = v128;
                  v11->i16[5] = v127 - v116[5];
                  if (a6 != 6)
                  {
                    int v129 = v115[6] + v11->u16[6];
                    if (v129 >= 255) {
                      char v130 = -1;
                    }
                    else {
                      char v130 = v129;
                    }
                    v114[3] = v130;
                    v11->i16[6] = v129 - v116[6];
                  }
                }
              }
            }
          }
        }
        ++v113;
        v114 += a4;
        --v7;
      }
      while (v7);
      return;
    }
    uint64_t v131 = 0;
    uint64_t v132 = a6;
    unint64_t v133 = &v11->u16[v132];
    uint64_t v134 = a6 & 0xFFFFFFF0;
    uint64_t v135 = a6 & 0xFFFFFFF8;
    v136.i64[0] = 0xFF000000FFLL;
    v136.i64[1] = 0xFF000000FFLL;
    unint64_t v137 = a3;
    do
    {
      uint64_t v138 = 0;
      float64x2_t v139 = (uint16x8_t *)*v9;
      uint64_t v140 = v9[1 - *(int *)(a1 + 8)];
      unint64_t v141 = a3 + a6 + v131 * a4;
      uint64_t v142 = &(*v9)[v132];
      unint64_t v143 = (unint64_t)&v140[v132];
      BOOL v145 = v137 < (unint64_t)v142 && (unint64_t)v139 < v141;
      BOOL v147 = v137 < v143 && (unint64_t)v140 < v141;
      BOOL v149 = v11 < (int16x8_t *)v142 && v139 < (uint16x8_t *)v133;
      BOOL v151 = (unint64_t)v11 < v143 && v140 < v133;
      BOOL v79 = (unint64_t)v11 >= v141;
      int v152 = v47;
      BOOL v153 = v79 || v137 >= (unint64_t)v133;
      if (!v153 || v145 || v147 || v149 || v151)
      {
        do
        {
LABEL_182:
          int v175 = v139->u16[v138] + v11->u16[v138];
          if (v175 >= 255) {
            char v176 = -1;
          }
          else {
            char v176 = v139->i16[v138] + v11->i16[v138];
          }
          *(unsigned char *)(v137 + v138) = v176;
          v11->i16[v138] = v175 - v140[v138];
          ++v138;
        }
        while (a6 != v138);
        goto LABEL_138;
      }
      if (a6 >= 0x10)
      {
        uint64_t v162 = 0;
        int32x4_t v163 = (int16x8_t *)v9[1 - *(int *)(a1 + 8)];
        int32x4_t v164 = (uint16x8_t *)*v9;
        int32x4_t v165 = v11;
        do
        {
          uint16x8_t v166 = (uint16x8_t)v165[1];
          uint16x8_t v167 = *v164;
          uint16x8_t v168 = v164[1];
          v164 += 2;
          int16x8_t v169 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v167.i8, *(uint16x4_t *)v165->i8);
          int16x8_t v170 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v168.i8, *(uint16x4_t *)v166.i8);
          int16x8_t v171 = (int16x8_t)vaddl_high_u16(v167, *(uint16x8_t *)v165);
          int16x8_t v172 = (int16x8_t)vaddl_high_u16(v168, v166);
          v181.val[3] = (int8x16_t)vminq_s32((int32x4_t)v172, v136);
          v181.val[1] = (int8x16_t)vminq_s32((int32x4_t)v171, v136);
          v181.val[2] = (int8x16_t)vminq_s32((int32x4_t)v170, v136);
          v181.val[0] = (int8x16_t)vminq_s32((int32x4_t)v169, v136);
          *(int8x16_t *)(v137 + v162) = vqtbl4q_s8(v181, (int8x16_t)xmmword_1004047C0);
          int16x8_t v173 = *v163;
          int16x8_t v174 = v163[1];
          v163 += 2;
          v162 += 16;
          int16x8_t *v165 = vsubq_s16(vuzp1q_s16(v169, v171), v173);
          v165[1] = vsubq_s16(vuzp1q_s16(v170, v172), v174);
          v165 += 2;
        }
        while (v134 != v162);
        if (v134 == a6) {
          goto LABEL_138;
        }
        uint64_t v154 = a6 & 0xFFFFFFF0;
        uint64_t v138 = v154;
        if ((a6 & 8) == 0) {
          goto LABEL_182;
        }
      }
      else
      {
        uint64_t v154 = 0;
      }
      int32x4_t v155 = (uint16x4_t *)((char *)v11 + 2 * v154);
      int32x4_t v156 = (uint16x8_t *)((char *)v139 + 2 * v154);
      int32x4_t v157 = (int16x8_t *)&v140[v154];
      do
      {
        uint16x8_t v158 = *v156++;
        int16x8_t v159 = (int16x8_t)vaddl_u16(*(uint16x4_t *)v158.i8, *v155);
        int16x8_t v160 = (int16x8_t)vaddl_high_u16(v158, *(uint16x8_t *)v155->i8);
        v179.val[1] = (int8x16_t)vminq_s32((int32x4_t)v160, v136);
        v179.val[0] = (int8x16_t)vminq_s32((int32x4_t)v159, v136);
        *(void *)(v137 + v154) = vqtbl2q_s8(v179, (int8x16_t)xmmword_1004047D0).u64[0];
        int16x8_t v161 = *v157++;
        *(int16x8_t *)v155->i8 = vsubq_s16(vuzp1q_s16(v159, v160), v161);
        v155 += 2;
        v154 += 8;
      }
      while (v135 != v154);
      uint64_t v138 = a6 & 0xFFFFFFF8;
      if (v135 != a6) {
        goto LABEL_182;
      }
LABEL_138:
      v137 += a4;
      ++v9;
      int v47 = v152 - 1;
      ++v131;
    }
    while (v152);
  }
}

void sub_1003933F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100393408(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100393410(uint64_t a1, unint64_t a2)
{
  int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      int v6 = &v5[2 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    int v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = (v8 >> 1) + a2;
    if (v10 < 0) {
      sub_10000B98C();
    }
    unint64_t v11 = v4 - (void)v7;
    if (v11 > v10) {
      uint64_t v10 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 < 0) {
        sub_10000BA6C();
      }
      unsigned int v13 = operator new(2 * v12);
    }
    else
    {
      unsigned int v13 = 0;
    }
    unsigned int v14 = &v13[2 * v9];
    size_t v15 = 2 * a2;
    unint64_t v16 = &v13[2 * v12];
    bzero(v14, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 2;
      if (v18 < 0x1E) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 1) + 1;
      unint64_t v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      int v6 = &v5[-v20];
      v14 -= v20;
      int v21 = &v13[2 * v9 - 16];
      unint64_t v22 = v5 - 16;
      unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_31:
        do
        {
          __int16 v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_1003935B8()
{
}

uint64_t sub_1003935CC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10039364C(void *a1)
{
  *a1 = off_10049C1E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_1003936AC(void *a1)
{
  *a1 = off_10049C1E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_100393720(uint64_t a1, double **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  unsigned int v13 = (double **)(a1 + 32);
  uint64_t v12 = *(double **)(a1 + 32);
  double v14 = *(double *)(a1 + 16);
  unint64_t v15 = (uint64_t)(*(void *)(a1 + 40) - (void)v12) >> 3;
  if (v15 != a6)
  {
    if (a6 <= v15)
    {
      if (a6 < v15) {
        *(void *)(a1 + 40) = &v12[a6];
      }
    }
    else
    {
      sub_100358318(a1 + 32, a6 - v15);
      uint64_t v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  int v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    int v19 = *(_DWORD *)(a1 + 8);
    int v20 = v19 - 1;
    int v21 = *(_DWORD *)(a1 + 24);
    if (v21 >= v19 - 1) {
      goto LABEL_21;
    }
    if (a6 <= 0)
    {
      v10 += (v19 - v21 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v20;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      double v22 = *v12;
      int v23 = ~v21 + v19;
      do
      {
        long long v24 = *v10;
        double v22 = **v10 + v22;
        *uint64_t v12 = v22;
        if (a6 != 1)
        {
          v12[1] = v24[1] + v12[1];
          if (a6 != 2) {
            v12[2] = v24[2] + v12[2];
          }
        }
        ++v10;
        --v23;
      }
      while (v23);
      goto LABEL_20;
    }
    uint64_t v57 = a6;
    while (1)
    {
      long long v58 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v57] || v58 >= (float64x2_t *)&v12[v57])
      {
        uint64_t v60 = v58 + 1;
        uint64_t v61 = a6 & 0xFFFFFFFC;
        uint64_t v62 = (float64x2_t *)(v12 + 2);
        do
        {
          float64x2_t v63 = vaddq_f64(*v60, *v62);
          v62[-1] = vaddq_f64(v60[-1], v62[-1]);
          float64x2_t *v62 = v63;
          v60 += 2;
          v62 += 2;
          v61 -= 4;
        }
        while (v61);
        uint64_t v64 = a6 & 0xFFFFFFFC;
        if (v64 == a6) {
          goto LABEL_49;
        }
      }
      else
      {
        uint64_t v64 = 0;
      }
      int16x8_t v65 = &v58->f64[v64];
      uint16x8_t v66 = &v12[v64];
      uint64_t v67 = a6 - v64;
      do
      {
        double v68 = *v65++;
        *uint16x8_t v66 = v68 + *v66;
        ++v66;
        --v67;
      }
      while (v67);
LABEL_49:
      ++v21;
      ++v10;
      if (v21 == v20) {
        goto LABEL_20;
      }
    }
  }
  int v17 = *(_DWORD *)(a1 + 8) - 1;
  if (v16 != v17)
  {
    v69[0] = 0;
    v69[1] = 0;
    uint64_t v18 = sub_1002D19D8(v69, 19);
    *(_DWORD *)(v18 + 15) = 825058682;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)"sumCount == ksize-1";
    sub_1002D2278(-215, v69, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  uint64_t v10 = &a2[v17];
LABEL_21:
  if (a5)
  {
    int v25 = a5 - 1;
    uint64_t v26 = a6 - 2;
    if (v14 != 1.0)
    {
      while (1)
      {
        int v27 = v25;
        unint64_t v28 = *v10;
        unint64_t v29 = v10[1 - *(int *)(a1 + 8)];
        if (a6 >= 2)
        {
          uint64_t v30 = 0;
          uint64_t v31 = (float64x2_t *)v10[1 - *(int *)(a1 + 8)];
          unint64_t v32 = (float64x2_t *)*v10;
          int v33 = (float64x2_t *)v12;
          do
          {
            float64x2_t v34 = *v32++;
            float64x2_t v35 = vaddq_f64(*v33, v34);
            int32x2_t v36 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(vmuld_lane_f64(v14, v35, 1)), (uint64_t)rint(v14 * v35.f64[0])), 0), (int32x2_t)0xFF000000FFLL);
            uint64_t v37 = (unsigned char *)(a3 + v30);
            v37[1] = v36.i8[4];
            *uint64_t v37 = v36.i8[0];
            float64x2_t v38 = *v31++;
            *v33++ = vsubq_f64(v35, v38);
            v30 += 2;
          }
          while (v30 <= v26);
          uint64_t v30 = v30;
          if ((int)v30 < a6)
          {
            do
            {
LABEL_31:
              double v39 = v12[v30] + v28[v30];
              double v40 = rint(v14 * v39);
              int v41 = (uint64_t)v40 & ~((int)(uint64_t)v40 >> 31);
              if (v41 >= 255) {
                LOBYTE(v41) = -1;
              }
              *(unsigned char *)(a3 + v30) = v41;
              v12[v30] = v39 - v29[v30];
              ++v30;
            }
            while (a6 != v30);
          }
        }
        else
        {
          uint64_t v30 = 0;
          if (a6 > 0) {
            goto LABEL_31;
          }
        }
        a3 += a4;
        ++v10;
        int v25 = v27 - 1;
        if (!v27) {
          return;
        }
      }
    }
    do
    {
      int v42 = v25;
      int32x4_t v43 = *v10;
      uint64_t v44 = v10[1 - *(int *)(a1 + 8)];
      if (a6 >= 2)
      {
        uint64_t v45 = 0;
        int16x8_t v46 = (float64x2_t *)v12;
        int v47 = (float64x2_t *)*v10;
        uint64_t v48 = (float64x2_t *)v10[1 - *(int *)(a1 + 8)];
        do
        {
          float64x2_t v49 = *v47++;
          float64x2_t v50 = vaddq_f64(*v46, v49);
          int32x2_t v51 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v50.f64[1]), (uint64_t)rint(v50.f64[0])), 0), (int32x2_t)0xFF000000FFLL);
          uint64_t v52 = (unsigned char *)(a3 + v45);
          v52[1] = v51.i8[4];
          *uint64_t v52 = v51.i8[0];
          float64x2_t v53 = *v48++;
          *v46++ = vsubq_f64(v50, v53);
          v45 += 2;
        }
        while (v45 <= v26);
        uint64_t v45 = v45;
        if ((int)v45 < a6)
        {
          do
          {
LABEL_43:
            double v54 = v12[v45] + v43[v45];
            double v55 = rint(v54);
            int v56 = (uint64_t)v55 & ~((int)(uint64_t)v55 >> 31);
            if (v56 >= 255) {
              LOBYTE(v56) = -1;
            }
            *(unsigned char *)(a3 + v45) = v56;
            v12[v45] = v54 - v44[v45];
            ++v45;
          }
          while (a6 != v45);
        }
      }
      else
      {
        uint64_t v45 = 0;
        if (a6 > 0) {
          goto LABEL_43;
        }
      }
      a3 += a4;
      ++v10;
      int v25 = v42 - 1;
    }
    while (v42);
  }
}

void sub_100393BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100393BF4(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100393C00()
{
}

uint64_t sub_100393C14(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100393C94(void *a1)
{
  *a1 = off_10049C268;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100393CF4(void *a1)
{
  *a1 = off_10049C268;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_100393D68(uint64_t a1, int32x4_t **a2, uint16x8_t *a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  int v13 = a6;
  int v17 = a2;
  uint64_t v18 = a1;
  int v20 = (int32x4_t **)(a1 + 32);
  int v19 = *(int32x4_t **)(a1 + 32);
  double v21 = *(double *)(a1 + 16);
  unint64_t v22 = (uint64_t)(*(void *)(a1 + 40) - (void)v19) >> 2;
  if (v22 == a6)
  {
    int v23 = *(_DWORD *)(a1 + 24);
    if (v23)
    {
      int v24 = *(_DWORD *)(a1 + 8) - 1;
      int v25 = a3;
      if (v23 != v24)
      {
        v164[0] = 0;
        v164[1] = 0;
        uint64_t v26 = sub_1002D19D8(v164, 19);
        *(_DWORD *)(v26 + 15) = 825058682;
        *(_OWORD *)uint64_t v26 = *(_OWORD *)"sumCount == ksize-1";
        sub_1002D2278(-215, v164, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 741);
      }
      int v17 = &a2[v24];
      goto LABEL_19;
    }
    int v25 = a3;
  }
  else
  {
    if (a6 <= v22)
    {
      if (a6 < v22) {
        *(void *)(a1 + 40) = (char *)v19 + 4 * a6;
      }
    }
    else
    {
      sub_10025FCA8(a1 + 32, a6 - v22);
      int v19 = *v20;
    }
    int v25 = a3;
    *(_DWORD *)(v18 + 24) = 0;
  }
  bzero(v19, 4 * v13);
  int v27 = *(_DWORD *)(v18 + 24);
  int v28 = *(_DWORD *)(v18 + 8) - 1;
  if (v27 < v28)
  {
    unint64_t v29 = (v13 - 4);
    if (v13 >= 4)
    {
      if ((v29 & 0xFFFFFFFC) + 5 <= v13) {
        uint64_t v103 = v13;
      }
      else {
        uint64_t v103 = (v29 & 0xFFFFFFFC) + 5;
      }
      uint64_t v104 = 4 * v103 - ((4 * (v13 - 4)) & 0x3FFFFFFF0);
      unint64_t v105 = v103 - (v29 & 0xFFFFFFFC) - 4;
      unint64_t v106 = v105 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint64_t v108 = 0;
        unint64_t v109 = 0;
        int16x8_t v110 = *v17;
        uint64_t i64 = (uint64_t)(*v17)[2].i64;
        int v112 = v19 + 2;
        uint64_t v113 = 4;
        do
        {
          uint64_t v114 = v113;
          uint64_t v115 = v108;
          int32x4_t v116 = (int32x4_t *)i64;
          int v117 = v112;
          v19[v109 / 4] = vaddq_s32(v110[v109 / 4], v19[v109 / 4]);
          v109 += 4;
          v113 += 4;
          ++v108;
          i64 += 16;
          ++v112;
        }
        while (v109 <= v29);
        if ((int)v109 < v13)
        {
          if (v105 < 8) {
            goto LABEL_99;
          }
          uint64_t v118 = 16 * v115;
          uint64_t v119 = v118 + 16;
          char v120 = &v19[(unint64_t)v118 / 0x10 + 1];
          uint64_t v121 = v104 + v118;
          if (v120 < (int32x4_t *)&v110->i8[v121] && &v110->i8[v119] < &v19->i8[v121]) {
            goto LABEL_99;
          }
          v114 += v106;
          unint64_t v122 = v105 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v123 = vaddq_s32(*v117, *v116);
            v117[-1] = vaddq_s32(v117[-1], v116[-1]);
            int32x4_t *v117 = v123;
            v116 += 2;
            v117 += 2;
            v122 -= 8;
          }
          while (v122);
          if (v105 != v106)
          {
LABEL_99:
            do
            {
              v19->i32[v114] += v110->i32[v114];
              ++v114;
            }
            while (v114 < v13);
          }
        }
        int v107 = *(_DWORD *)(v18 + 24) + 1;
        *(_DWORD *)(v18 + 24) = v107;
        ++v17;
      }
      while (v107 < *(_DWORD *)(v18 + 8) - 1);
    }
    else if (v13 >= 1)
    {
      do
      {
        uint64_t v67 = *v17;
        v19->i32[0] += (*v17)->i32[0];
        if (v13 != 1)
        {
          v19->i32[1] += v67->i32[1];
          if (v13 != 2) {
            v19->i32[2] += v67->i32[2];
          }
        }
        int v66 = *(_DWORD *)(v18 + 24) + 1;
        *(_DWORD *)(v18 + 24) = v66;
        ++v17;
      }
      while (v66 < *(_DWORD *)(v18 + 8) - 1);
    }
    else
    {
      if (v28 <= v27 + 1) {
        int v30 = v27 + 1;
      }
      else {
        int v30 = *(_DWORD *)(v18 + 8) - 1;
      }
      v17 += (v30 + ~v27) + 1;
      *(_DWORD *)(v18 + 24) = v30;
    }
  }
LABEL_19:
  if (!a5) {
    return;
  }
  int v31 = a5 - 1;
  uint64_t v32 = (v13 - 8);
  a13.n128_f32[0] = v21;
  uint64_t v33 = a4;
  if (v21 == 1.0)
  {
    uint64_t v68 = v13;
    unint64_t v69 = (unint64_t)v19->u64 + v68 * 4;
    v70.i64[0] = 0xFFFF0000FFFFLL;
    v70.i64[1] = 0xFFFF0000FFFFLL;
    while (1)
    {
      int v71 = v31;
      unint64_t v72 = *v17;
      unint64_t v73 = v17[1 - *(int *)(v18 + 8)];
      if (v13 >= 8)
      {
        uint64_t v75 = 0;
        float64x2_t v76 = v73 + 1;
        uint64_t v77 = v72 + 1;
        uint64_t v78 = v19 + 1;
        BOOL v79 = v25;
        do
        {
          int32x4_t v80 = vaddq_s32(v77[-1], v78[-1]);
          int32x4_t v81 = vaddq_s32(*v77, *v78);
          *v79++ = vqmovn_high_u32(vqmovn_u32((uint32x4_t)v80), (uint32x4_t)v81);
          v78[-1] = vsubq_s32(v80, v76[-1]);
          int32x4_t v82 = *v76;
          v76 += 2;
          v75 += 8;
          int32x4_t *v78 = vsubq_s32(v81, v82);
          v78 += 2;
          v77 += 2;
        }
        while (v75 <= (int)v32);
        uint64_t v74 = v75;
        if ((int)v75 >= v13) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v74 = 0;
        if (v13 <= 0) {
          goto LABEL_50;
        }
      }
      unint64_t v83 = v13 - v74;
      if (v83 < 8)
      {
        uint64_t v84 = v74;
        goto LABEL_76;
      }
      uint64_t v85 = 4 * v74;
      BOOL v86 = &v19->i32[v74];
      BOOL v88 = v86 < &v73->i32[v68] && (unint64_t)v73 + 4 * v74 < v69;
      if ((unint64_t)v72 + 4 * v74 < v69 && v86 < &v72->i32[v68])
      {
        uint64_t v84 = v74;
        goto LABEL_76;
      }
      if (v88)
      {
        uint64_t v84 = v74;
        do
        {
LABEL_76:
          int v101 = v72->i32[v84] + v19->i32[v84];
          int v102 = v101 & ~(v101 >> 31);
          if (v102 >= 0xFFFF) {
            LOWORD(v102) = -1;
          }
          v25->i16[v84] = v102;
          v19->i32[v84] = v101 - v73->i32[v84];
          ++v84;
        }
        while (v13 != v84);
        goto LABEL_50;
      }
      uint64_t v84 = (v83 & 0xFFFFFFFFFFFFFFF8) + v74;
      uint64_t v90 = (int32x4_t *)((char *)v19 + v85);
      float v91 = (int32x4_t *)((char *)v72 + v85);
      uint64_t v92 = 2 * v74;
      unint64_t v93 = (int32x4_t *)((char *)v73 + v85);
      unint64_t v94 = v83 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v95 = *v91;
        int32x4_t v96 = v91[1];
        v91 += 2;
        int32x4_t v97 = vaddq_s32(v96, v90[1]);
        int32x4_t v98 = vaddq_s32(v95, *v90);
        *(int16x8_t *)((char *)v25 + v92) = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32(v98, (int32x4_t)0), v70), (int16x8_t)vminq_s32(vmaxq_s32(v97, (int32x4_t)0), v70));
        int32x4_t v99 = *v93;
        int32x4_t v100 = v93[1];
        v93 += 2;
        *uint64_t v90 = vsubq_s32(v98, v99);
        v90[1] = vsubq_s32(v97, v100);
        v90 += 2;
        v92 += 16;
        v94 -= 8;
      }
      while (v94);
      if (v83 != (v83 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_76;
      }
LABEL_50:
      int v25 = (uint16x8_t *)((char *)v25 + a4);
      ++v17;
      int v31 = v71 - 1;
      if (!v71) {
        return;
      }
    }
  }
  float64x2_t v34 = v19 + 1;
  float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
  int v161 = v13;
  uint64_t v160 = v18;
  do
  {
    int v36 = v31;
    uint64_t v37 = *v17;
    uint64_t v162 = v17;
    int32x4_t v163 = v25;
    float64x2_t v38 = v17[1 - *(int *)(v18 + 8)];
    int v39 = 0;
    if (v13 >= 8)
    {
      uint64_t v44 = v37 + 1;
      uint64_t v45 = v38 + 1;
      int16x8_t v46 = v34;
      do
      {
        int32x4_t v47 = v46[-1];
        int32x4_t v48 = *v46;
        int32x4_t v49 = v44[-1];
        int32x4_t v50 = *v44;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          uint64_t v156 = v32;
          __n128 v152 = a13;
          uint64_t v148 = v34;
          int v144 = v36;
          int32x4_t v136 = v49;
          int32x4_t v140 = v47;
          int32x4_t v128 = v50;
          int32x4_t v132 = v48;
          int v58 = __cxa_guard_acquire(qword_1004D2D60);
          int32x4_t v50 = v128;
          int32x4_t v48 = v132;
          int32x4_t v49 = v136;
          int32x4_t v47 = v140;
          int v36 = v144;
          *(void *)&long long v59 = 0x8000000080000000;
          *((void *)&v59 + 1) = 0x8000000080000000;
          float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
          float64x2_t v34 = v148;
          a13 = v152;
          uint64_t v32 = v156;
          if (v58)
          {
            xmmword_1004D2D50 = v59;
            __cxa_guard_release(qword_1004D2D60);
            int32x4_t v50 = v128;
            int32x4_t v48 = v132;
            int32x4_t v49 = v136;
            int32x4_t v47 = v140;
            int v36 = v144;
            float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
            float64x2_t v34 = v148;
            a13 = v152;
            uint64_t v32 = v156;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          uint64_t v157 = v32;
          __n128 v153 = a13;
          BOOL v149 = v34;
          int v145 = v36;
          int32x4_t v137 = v49;
          int32x4_t v141 = v47;
          int32x4_t v129 = v50;
          int32x4_t v133 = v48;
          int v60 = __cxa_guard_acquire(qword_1004D2D80);
          int32x4_t v50 = v129;
          int32x4_t v48 = v133;
          int32x4_t v49 = v137;
          int32x4_t v47 = v141;
          int v36 = v145;
          *(void *)&long long v61 = 0x3F0000003F000000;
          *((void *)&v61 + 1) = 0x3F0000003F000000;
          float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
          float64x2_t v34 = v149;
          a13 = v153;
          uint64_t v32 = v157;
          if (v60)
          {
            xmmword_1004D2D70 = v61;
            __cxa_guard_release(qword_1004D2D80);
            int32x4_t v50 = v129;
            int32x4_t v48 = v133;
            int32x4_t v49 = v137;
            int32x4_t v47 = v141;
            int v36 = v145;
            float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
            float64x2_t v34 = v149;
            a13 = v153;
            uint64_t v32 = v157;
          }
        }
        int8x16_t v51 = (int8x16_t)xmmword_1004D2D70;
        int8x16_t v52 = v35[213];
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          uint64_t v158 = v32;
          __n128 v154 = a13;
          int32x4_t v150 = v34;
          int v146 = v36;
          int32x4_t v138 = v49;
          int32x4_t v142 = v47;
          int32x4_t v130 = v50;
          int32x4_t v134 = v48;
          int8x16_t v124 = v52;
          int8x16_t v126 = v51;
          int v62 = __cxa_guard_acquire(qword_1004D2D60);
          int8x16_t v52 = v124;
          int8x16_t v51 = v126;
          int32x4_t v50 = v130;
          int32x4_t v48 = v134;
          int32x4_t v49 = v138;
          int32x4_t v47 = v142;
          int v36 = v146;
          *(void *)&long long v63 = 0x8000000080000000;
          *((void *)&v63 + 1) = 0x8000000080000000;
          float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
          float64x2_t v34 = v150;
          a13 = v154;
          uint64_t v32 = v158;
          if (v62)
          {
            xmmword_1004D2D50 = v63;
            __cxa_guard_release(qword_1004D2D60);
            int8x16_t v52 = v124;
            int8x16_t v51 = v126;
            int32x4_t v50 = v130;
            int32x4_t v48 = v134;
            int32x4_t v49 = v138;
            int32x4_t v47 = v142;
            int v36 = v146;
            float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
            float64x2_t v34 = v150;
            a13 = v154;
            uint64_t v32 = v158;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          uint64_t v159 = v32;
          __n128 v155 = a13;
          BOOL v151 = v34;
          int v147 = v36;
          int32x4_t v139 = v49;
          int32x4_t v143 = v47;
          int32x4_t v131 = v50;
          int32x4_t v135 = v48;
          int8x16_t v125 = v52;
          int8x16_t v127 = v51;
          int v64 = __cxa_guard_acquire(qword_1004D2D80);
          int8x16_t v52 = v125;
          int8x16_t v51 = v127;
          int32x4_t v50 = v131;
          int32x4_t v48 = v135;
          int32x4_t v49 = v139;
          int32x4_t v47 = v143;
          int v36 = v147;
          *(void *)&long long v65 = 0x3F0000003F000000;
          *((void *)&v65 + 1) = 0x3F0000003F000000;
          float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
          float64x2_t v34 = v151;
          a13 = v155;
          uint64_t v32 = v159;
          if (v64)
          {
            xmmword_1004D2D70 = v65;
            __cxa_guard_release(qword_1004D2D80);
            int8x16_t v52 = v125;
            int8x16_t v51 = v127;
            int32x4_t v50 = v131;
            int32x4_t v48 = v135;
            int32x4_t v49 = v139;
            int32x4_t v47 = v143;
            int v36 = v147;
            float64x2_t v35 = (int8x16_t *)&unk_1004D2000;
            float64x2_t v34 = v151;
            a13 = v155;
            uint64_t v32 = v159;
          }
        }
        int32x4_t v53 = vaddq_s32(v49, v47);
        int32x4_t v54 = vaddq_s32(v50, v48);
        int8x16_t v55 = (int8x16_t)vmulq_n_f32(vcvtq_f32_s32(v53), a13.n128_f32[0]);
        int8x16_t v56 = (int8x16_t)vmulq_n_f32(vcvtq_f32_s32(v54), a13.n128_f32[0]);
        *v25++ = vqmovn_high_u32(vqmovn_u32((uint32x4_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v55, (float32x4_t)vorrq_s8(vandq_s8(v52, v55), v51)))), (uint32x4_t)vcvtq_s32_f32(vaddq_f32((float32x4_t)v56, (float32x4_t)vorrq_s8(vandq_s8(v35[213], v56), (int8x16_t)xmmword_1004D2D70))));
        v46[-1] = vsubq_s32(v53, v45[-1]);
        int32x4_t v57 = *v45;
        v45 += 2;
        int32x4_t *v46 = vsubq_s32(v54, v57);
        v46 += 2;
        v44 += 2;
        v39 += 8;
      }
      while ((int)v32 >= v39);
    }
    int v13 = v161;
    if (v39 < v161)
    {
      uint64_t v40 = v39;
      do
      {
        int v41 = v37->i32[v40] + v19->i32[v40];
        double v42 = rint(v21 * (double)v41);
        int v43 = (uint64_t)v42 & ~((int)(uint64_t)v42 >> 31);
        if (v43 >= 0xFFFF) {
          LOWORD(v43) = -1;
        }
        v163->i16[v40] = v43;
        v19->i32[v40] = v41 - v38->i32[v40];
        ++v40;
      }
      while ((int)v40 < v161);
    }
    int v25 = (uint16x8_t *)((char *)v163 + v33);
    int v17 = v162 + 1;
    int v31 = v36 - 1;
    uint64_t v18 = v160;
  }
  while (v36);
}

void sub_10039466C(_Unwind_Exception *a1)
{
  sub_1002D1A1C((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_100394684(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100394690()
{
}

uint64_t sub_1003946A4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100394724(void *a1)
{
  *a1 = off_10049C2F0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100394784(void *a1)
{
  *a1 = off_10049C2F0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_1003947F8(uint64_t a1, double **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  int v13 = (double **)(a1 + 32);
  uint64_t v12 = *(double **)(a1 + 32);
  double v14 = *(double *)(a1 + 16);
  unint64_t v15 = (uint64_t)(*(void *)(a1 + 40) - (void)v12) >> 3;
  if (v15 != a6)
  {
    if (a6 <= v15)
    {
      if (a6 < v15) {
        *(void *)(a1 + 40) = &v12[a6];
      }
    }
    else
    {
      sub_100358318(a1 + 32, a6 - v15);
      uint64_t v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  int v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    int v17 = *(_DWORD *)(a1 + 8);
    int v19 = v17 - 1;
    int v20 = *(_DWORD *)(a1 + 24);
    if (v20 >= v17 - 1) {
      goto LABEL_21;
    }
    if (a6 <= 0)
    {
      v10 += (v17 - v20 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v19;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      double v21 = *v12;
      int v22 = ~v20 + v17;
      do
      {
        int v23 = *v10;
        double v21 = **v10 + v21;
        *uint64_t v12 = v21;
        if (a6 != 1)
        {
          v12[1] = v23[1] + v12[1];
          if (a6 != 2) {
            v12[2] = v23[2] + v12[2];
          }
        }
        ++v10;
        --v22;
      }
      while (v22);
      goto LABEL_20;
    }
    uint64_t v63 = a6;
    while (1)
    {
      int v64 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v63] || v64 >= (float64x2_t *)&v12[v63])
      {
        int v66 = v64 + 1;
        uint64_t v67 = a6 & 0xFFFFFFFC;
        uint64_t v68 = (float64x2_t *)(v12 + 2);
        do
        {
          float64x2_t v69 = vaddq_f64(*v66, *v68);
          v68[-1] = vaddq_f64(v66[-1], v68[-1]);
          *uint64_t v68 = v69;
          v66 += 2;
          v68 += 2;
          v67 -= 4;
        }
        while (v67);
        uint64_t v70 = a6 & 0xFFFFFFFC;
        if (v70 == a6) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v70 = 0;
      }
      int v71 = &v64->f64[v70];
      unint64_t v72 = &v12[v70];
      uint64_t v73 = a6 - v70;
      do
      {
        double v74 = *v71++;
        *unint64_t v72 = v74 + *v72;
        ++v72;
        --v73;
      }
      while (v73);
LABEL_56:
      ++v20;
      ++v10;
      if (v20 == v19) {
        goto LABEL_20;
      }
    }
  }
  int v17 = *(_DWORD *)(a1 + 8);
  if (v16 != v17 - 1)
  {
    v75[0] = 0;
    v75[1] = 0;
    uint64_t v18 = sub_1002D19D8(v75, 19);
    *(_DWORD *)(v18 + 15) = 825058682;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)"sumCount == ksize-1";
    sub_1002D2278(-215, v75, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  uint64_t v10 = &a2[v17 - 1];
LABEL_21:
  if (a5)
  {
    int v24 = a5 - 1;
    uint64_t v25 = 1 - v17;
    uint64_t v26 = a6 - 2;
    if (v14 == 1.0)
    {
      while (1)
      {
        int v45 = v24;
        int16x8_t v46 = *v10;
        int32x4_t v47 = v10[v25];
        if (a6 >= 2) {
          break;
        }
        uint64_t v48 = 0;
        if (a6 > 0) {
          goto LABEL_50;
        }
LABEL_39:
        a3 += a4;
        ++v10;
        int v24 = v45 - 1;
        if (!v45) {
          return;
        }
      }
      uint64_t v48 = 0;
      int32x4_t v49 = (float64x2_t *)v12;
      int32x4_t v50 = (float64x2_t *)*v10;
      int8x16_t v51 = (float64x2_t *)v10[v25];
      do
      {
        int8x16_t v52 = (_WORD *)(a3 + 2 * v48);
        float64x2_t v53 = *v50++;
        float64x2_t v54 = vaddq_f64(*v49, v53);
        double v55 = rint(v54.f64[0]);
        int v56 = (uint64_t)v55 & ~((int)(uint64_t)v55 >> 31);
        if (v56 >= 0xFFFF) {
          LOWORD(v56) = -1;
        }
        *int8x16_t v52 = v56;
        double v57 = rint(v54.f64[1]);
        int v58 = (uint64_t)v57 & ~((int)(uint64_t)v57 >> 31);
        if (v58 >= 0xFFFF) {
          LOWORD(v58) = -1;
        }
        v52[1] = v58;
        float64x2_t v59 = *v51++;
        *v49++ = vsubq_f64(v54, v59);
        v48 += 2;
      }
      while (v48 <= v26);
      uint64_t v48 = v48;
      if ((int)v48 >= a6) {
        goto LABEL_39;
      }
      do
      {
LABEL_50:
        double v60 = v12[v48] + v46[v48];
        double v61 = rint(v60);
        int v62 = (uint64_t)v61 & ~((int)(uint64_t)v61 >> 31);
        if (v62 >= 0xFFFF) {
          LOWORD(v62) = -1;
        }
        *(_WORD *)(a3 + 2 * v48) = v62;
        v12[v48] = v60 - v47[v48];
        ++v48;
      }
      while (a6 != v48);
      goto LABEL_39;
    }
    while (1)
    {
      int v27 = v24;
      int v28 = *v10;
      unint64_t v29 = v10[v25];
      if (a6 >= 2) {
        break;
      }
      uint64_t v30 = 0;
      if (a6 > 0) {
        goto LABEL_35;
      }
LABEL_24:
      a3 += a4;
      ++v10;
      int v24 = v27 - 1;
      if (!v27) {
        return;
      }
    }
    uint64_t v30 = 0;
    int v31 = (float64x2_t *)v10[v25];
    uint64_t v32 = (float64x2_t *)*v10;
    uint64_t v33 = (float64x2_t *)v12;
    do
    {
      float64x2_t v34 = (_WORD *)(a3 + 2 * v30);
      float64x2_t v35 = *v32++;
      float64x2_t v36 = vaddq_f64(*v33, v35);
      double v37 = rint(v14 * v36.f64[0]);
      int v38 = (uint64_t)v37 & ~((int)(uint64_t)v37 >> 31);
      if (v38 >= 0xFFFF) {
        LOWORD(v38) = -1;
      }
      *float64x2_t v34 = v38;
      double v39 = rint(vmuld_lane_f64(v14, v36, 1));
      int v40 = (uint64_t)v39 & ~((int)(uint64_t)v39 >> 31);
      if (v40 >= 0xFFFF) {
        LOWORD(v40) = -1;
      }
      v34[1] = v40;
      float64x2_t v41 = *v31++;
      *v33++ = vsubq_f64(v36, v41);
      v30 += 2;
    }
    while (v30 <= v26);
    uint64_t v30 = v30;
    if ((int)v30 >= a6) {
      goto LABEL_24;
    }
    do
    {
LABEL_35:
      double v42 = v12[v30] + v28[v30];
      double v43 = rint(v14 * v42);
      int v44 = (uint64_t)v43 & ~((int)(uint64_t)v43 >> 31);
      if (v44 >= 0xFFFF) {
        LOWORD(v44) = -1;
      }
      *(_WORD *)(a3 + 2 * v30) = v44;
      v12[v30] = v42 - v29[v30];
      ++v30;
    }
    while (a6 != v30);
    goto LABEL_24;
  }
}

void sub_100394C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100394CB0(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100394CBC()
{
}

uint64_t sub_100394CD0(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100394D50(void *a1)
{
  *a1 = off_10049C378;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100394DB0(void *a1)
{
  *a1 = off_10049C378;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_100394E24(uint64_t a1, int32x4_t **a2, int16x8_t *a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12, __n128 a13)
{
  int v13 = a6;
  int v17 = a2;
  uint64_t v18 = a1;
  int v20 = (int32x4_t **)(a1 + 32);
  int v19 = *(int32x4_t **)(a1 + 32);
  double v21 = *(double *)(a1 + 16);
  unint64_t v22 = (uint64_t)(*(void *)(a1 + 40) - (void)v19) >> 2;
  if (v22 == a6)
  {
    int v23 = *(_DWORD *)(a1 + 24);
    if (v23)
    {
      int v24 = *(_DWORD *)(a1 + 8) - 1;
      if (v23 != v24)
      {
        v162[0] = 0;
        v162[1] = 0;
        uint64_t v25 = sub_1002D19D8(v162, 19);
        *(_DWORD *)(v25 + 15) = 825058682;
        *(_OWORD *)uint64_t v25 = *(_OWORD *)"sumCount == ksize-1";
        sub_1002D2278(-215, v162, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 614);
      }
      int v17 = &a2[v24];
      goto LABEL_18;
    }
  }
  else
  {
    if (a6 <= v22)
    {
      if (a6 < v22) {
        *(void *)(a1 + 40) = (char *)v19 + 4 * a6;
      }
    }
    else
    {
      sub_10025FCA8(a1 + 32, a6 - v22);
      int v19 = *v20;
    }
    *(_DWORD *)(v18 + 24) = 0;
  }
  bzero(v19, 4 * v13);
  int v26 = *(_DWORD *)(v18 + 24);
  int v27 = *(_DWORD *)(v18 + 8) - 1;
  if (v26 < v27)
  {
    unint64_t v28 = (v13 - 4);
    if (v13 >= 4)
    {
      if ((v28 & 0xFFFFFFFC) + 5 <= v13) {
        uint64_t v101 = v13;
      }
      else {
        uint64_t v101 = (v28 & 0xFFFFFFFC) + 5;
      }
      uint64_t v102 = 4 * v101 - ((4 * (v13 - 4)) & 0x3FFFFFFF0);
      unint64_t v103 = v101 - (v28 & 0xFFFFFFFC) - 4;
      unint64_t v104 = v103 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint64_t v106 = 0;
        unint64_t v107 = 0;
        uint64_t v108 = *v17;
        uint64_t i64 = (uint64_t)(*v17)[2].i64;
        int16x8_t v110 = v19 + 2;
        uint64_t v111 = 4;
        do
        {
          uint64_t v112 = v111;
          uint64_t v113 = v106;
          uint64_t v114 = (int32x4_t *)i64;
          uint64_t v115 = v110;
          v19[v107 / 4] = vaddq_s32(v108[v107 / 4], v19[v107 / 4]);
          v107 += 4;
          v111 += 4;
          ++v106;
          i64 += 16;
          ++v110;
        }
        while (v107 <= v28);
        if ((int)v107 < v13)
        {
          if (v103 < 8) {
            goto LABEL_104;
          }
          uint64_t v116 = 16 * v113;
          uint64_t v117 = v116 + 16;
          uint64_t v118 = &v19[(unint64_t)v116 / 0x10 + 1];
          uint64_t v119 = v102 + v116;
          if (v118 < (int32x4_t *)&v108->i8[v119] && &v108->i8[v117] < &v19->i8[v119]) {
            goto LABEL_104;
          }
          v112 += v104;
          unint64_t v120 = v103 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v121 = vaddq_s32(*v115, *v114);
            v115[-1] = vaddq_s32(v115[-1], v114[-1]);
            int32x4_t *v115 = v121;
            v114 += 2;
            v115 += 2;
            v120 -= 8;
          }
          while (v120);
          if (v103 != v104)
          {
LABEL_104:
            do
            {
              v19->i32[v112] += v108->i32[v112];
              ++v112;
            }
            while (v112 < v13);
          }
        }
        int v105 = *(_DWORD *)(v18 + 24) + 1;
        *(_DWORD *)(v18 + 24) = v105;
        ++v17;
      }
      while (v105 < *(_DWORD *)(v18 + 8) - 1);
    }
    else if (v13 >= 1)
    {
      do
      {
        int v66 = *v17;
        v19->i32[0] += (*v17)->i32[0];
        if (v13 != 1)
        {
          v19->i32[1] += v66->i32[1];
          if (v13 != 2) {
            v19->i32[2] += v66->i32[2];
          }
        }
        int v65 = *(_DWORD *)(v18 + 24) + 1;
        *(_DWORD *)(v18 + 24) = v65;
        ++v17;
      }
      while (v65 < *(_DWORD *)(v18 + 8) - 1);
    }
    else
    {
      if (v27 <= v26 + 1) {
        int v29 = v26 + 1;
      }
      else {
        int v29 = *(_DWORD *)(v18 + 8) - 1;
      }
      v17 += (v29 + ~v26) + 1;
      *(_DWORD *)(v18 + 24) = v29;
    }
  }
LABEL_18:
  if (!a5) {
    return;
  }
  int v30 = a5 - 1;
  uint64_t v31 = (v13 - 8);
  a13.n128_f32[0] = v21;
  uint64_t v32 = a4;
  if (v21 == 1.0)
  {
    uint64_t v67 = v13;
    unint64_t v68 = (unint64_t)v19->u64 + v67 * 4;
    while (1)
    {
      int v69 = v30;
      uint64_t v70 = *v17;
      int v71 = v17[1 - *(int *)(v18 + 8)];
      if (v13 >= 8)
      {
        uint64_t v73 = 0;
        double v74 = v71 + 1;
        uint64_t v75 = v70 + 1;
        float64x2_t v76 = v19 + 1;
        uint64_t v77 = a3;
        do
        {
          int32x4_t v78 = vaddq_s32(v75[-1], v76[-1]);
          int32x4_t v79 = vaddq_s32(*v75, *v76);
          *v77++ = vqmovn_high_s32(vqmovn_s32(v78), v79);
          v76[-1] = vsubq_s32(v78, v74[-1]);
          int32x4_t v80 = *v74;
          v74 += 2;
          v73 += 8;
          *float64x2_t v76 = vsubq_s32(v79, v80);
          v76 += 2;
          v75 += 2;
        }
        while (v73 <= (int)v31);
        uint64_t v72 = v73;
        if ((int)v73 >= v13) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v72 = 0;
        if (v13 <= 0) {
          goto LABEL_52;
        }
      }
      unint64_t v81 = v13 - v72;
      if (v81 < 8)
      {
        uint64_t v82 = v72;
        goto LABEL_78;
      }
      uint64_t v83 = 4 * v72;
      uint64_t v84 = &v19->i32[v72];
      BOOL v86 = v84 < &v71->i32[v67] && (unint64_t)v71 + 4 * v72 < v68;
      if ((unint64_t)v70 + 4 * v72 < v68 && v84 < &v70->i32[v67])
      {
        uint64_t v82 = v72;
        goto LABEL_78;
      }
      if (v86)
      {
        uint64_t v82 = v72;
        do
        {
LABEL_78:
          int v99 = v70->i32[v82] + v19->i32[v82];
          if (v99 <= -32768) {
            int v100 = -32768;
          }
          else {
            int v100 = v70->i32[v82] + v19->i32[v82];
          }
          if (v100 >= 0x7FFF) {
            LOWORD(v100) = 0x7FFF;
          }
          a3->i16[v82] = v100;
          v19->i32[v82] = v99 - v71->i32[v82];
          ++v82;
        }
        while (v13 != v82);
        goto LABEL_52;
      }
      uint64_t v82 = (v81 & 0xFFFFFFFFFFFFFFF8) + v72;
      BOOL v88 = (int32x4_t *)((char *)v19 + v83);
      unint64_t v89 = (int32x4_t *)((char *)v70 + v83);
      uint64_t v90 = 2 * v72;
      float v91 = (int32x4_t *)((char *)v71 + v83);
      unint64_t v92 = v81 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v93 = *v89;
        int32x4_t v94 = v89[1];
        v89 += 2;
        int32x4_t v95 = vaddq_s32(v94, v88[1]);
        int32x4_t v96 = vaddq_s32(v93, *v88);
        *(int16x8_t *)((char *)a3 + v90) = vqmovn_high_s32(vqmovn_s32(v96), v95);
        int32x4_t v97 = *v91;
        int32x4_t v98 = v91[1];
        v91 += 2;
        *BOOL v88 = vsubq_s32(v96, v97);
        v88[1] = vsubq_s32(v95, v98);
        v88 += 2;
        v90 += 16;
        v92 -= 8;
      }
      while (v92);
      if (v81 != (v81 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_78;
      }
LABEL_52:
      a3 = (int16x8_t *)((char *)a3 + a4);
      ++v17;
      int v30 = v69 - 1;
      if (!v69) {
        return;
      }
    }
  }
  uint64_t v33 = v19 + 1;
  float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
  int v159 = v13;
  uint64_t v158 = v18;
  do
  {
    uint64_t v160 = v17;
    int v161 = a3;
    int v35 = v30;
    float64x2_t v36 = *v17;
    double v37 = v17[1 - *(int *)(v18 + 8)];
    if (v13 >= 8)
    {
      int v38 = 0;
      double v42 = v36 + 1;
      double v43 = v37 + 1;
      int v44 = v161;
      int v45 = v33;
      do
      {
        int32x4_t v46 = v45[-1];
        int32x4_t v47 = *v45;
        int32x4_t v48 = v42[-1];
        int32x4_t v49 = *v42;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          uint64_t v154 = v31;
          __n128 v150 = a13;
          int v146 = v33;
          int v142 = v35;
          int32x4_t v134 = v48;
          int32x4_t v138 = v46;
          int32x4_t v126 = v49;
          int32x4_t v130 = v47;
          int v57 = __cxa_guard_acquire(qword_1004D2D60);
          int32x4_t v49 = v126;
          int32x4_t v47 = v130;
          int32x4_t v48 = v134;
          int32x4_t v46 = v138;
          int v35 = v142;
          *(void *)&long long v58 = 0x8000000080000000;
          *((void *)&v58 + 1) = 0x8000000080000000;
          float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
          uint64_t v33 = v146;
          a13 = v150;
          uint64_t v31 = v154;
          if (v57)
          {
            xmmword_1004D2D50 = v58;
            __cxa_guard_release(qword_1004D2D60);
            int32x4_t v49 = v126;
            int32x4_t v47 = v130;
            int32x4_t v48 = v134;
            int32x4_t v46 = v138;
            int v35 = v142;
            float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
            uint64_t v33 = v146;
            a13 = v150;
            uint64_t v31 = v154;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          uint64_t v155 = v31;
          __n128 v151 = a13;
          int v147 = v33;
          int v143 = v35;
          int32x4_t v135 = v48;
          int32x4_t v139 = v46;
          int32x4_t v127 = v49;
          int32x4_t v131 = v47;
          int v59 = __cxa_guard_acquire(qword_1004D2D80);
          int32x4_t v49 = v127;
          int32x4_t v47 = v131;
          int32x4_t v48 = v135;
          int32x4_t v46 = v139;
          int v35 = v143;
          *(void *)&long long v60 = 0x3F0000003F000000;
          *((void *)&v60 + 1) = 0x3F0000003F000000;
          float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
          uint64_t v33 = v147;
          a13 = v151;
          uint64_t v31 = v155;
          if (v59)
          {
            xmmword_1004D2D70 = v60;
            __cxa_guard_release(qword_1004D2D80);
            int32x4_t v49 = v127;
            int32x4_t v47 = v131;
            int32x4_t v48 = v135;
            int32x4_t v46 = v139;
            int v35 = v143;
            float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
            uint64_t v33 = v147;
            a13 = v151;
            uint64_t v31 = v155;
          }
        }
        int8x16_t v50 = (int8x16_t)xmmword_1004D2D70;
        int8x16_t v51 = v34[213];
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          uint64_t v156 = v31;
          __n128 v152 = a13;
          uint64_t v148 = v33;
          int v144 = v35;
          int32x4_t v136 = v48;
          int32x4_t v140 = v46;
          int32x4_t v128 = v49;
          int32x4_t v132 = v47;
          int8x16_t v122 = v51;
          int8x16_t v124 = v50;
          int v61 = __cxa_guard_acquire(qword_1004D2D60);
          int8x16_t v51 = v122;
          int8x16_t v50 = v124;
          int32x4_t v49 = v128;
          int32x4_t v47 = v132;
          int32x4_t v48 = v136;
          int32x4_t v46 = v140;
          int v35 = v144;
          *(void *)&long long v62 = 0x8000000080000000;
          *((void *)&v62 + 1) = 0x8000000080000000;
          float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
          uint64_t v33 = v148;
          a13 = v152;
          uint64_t v31 = v156;
          if (v61)
          {
            xmmword_1004D2D50 = v62;
            __cxa_guard_release(qword_1004D2D60);
            int8x16_t v51 = v122;
            int8x16_t v50 = v124;
            int32x4_t v49 = v128;
            int32x4_t v47 = v132;
            int32x4_t v48 = v136;
            int32x4_t v46 = v140;
            int v35 = v144;
            float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
            uint64_t v33 = v148;
            a13 = v152;
            uint64_t v31 = v156;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          uint64_t v157 = v31;
          __n128 v153 = a13;
          BOOL v149 = v33;
          int v145 = v35;
          int32x4_t v137 = v48;
          int32x4_t v141 = v46;
          int32x4_t v129 = v49;
          int32x4_t v133 = v47;
          int8x16_t v123 = v51;
          int8x16_t v125 = v50;
          int v63 = __cxa_guard_acquire(qword_1004D2D80);
          int8x16_t v51 = v123;
          int8x16_t v50 = v125;
          int32x4_t v49 = v129;
          int32x4_t v47 = v133;
          int32x4_t v48 = v137;
          int32x4_t v46 = v141;
          int v35 = v145;
          *(void *)&long long v64 = 0x3F0000003F000000;
          *((void *)&v64 + 1) = 0x3F0000003F000000;
          float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
          uint64_t v33 = v149;
          a13 = v153;
          uint64_t v31 = v157;
          if (v63)
          {
            xmmword_1004D2D70 = v64;
            __cxa_guard_release(qword_1004D2D80);
            int8x16_t v51 = v123;
            int8x16_t v50 = v125;
            int32x4_t v49 = v129;
            int32x4_t v47 = v133;
            int32x4_t v48 = v137;
            int32x4_t v46 = v141;
            int v35 = v145;
            float64x2_t v34 = (int8x16_t *)&unk_1004D2000;
            uint64_t v33 = v149;
            a13 = v153;
            uint64_t v31 = v157;
          }
        }
        int32x4_t v52 = vaddq_s32(v48, v46);
        int32x4_t v53 = vaddq_s32(v49, v47);
        int8x16_t v54 = (int8x16_t)vmulq_n_f32(vcvtq_f32_s32(v52), a13.n128_f32[0]);
        int8x16_t v55 = (int8x16_t)vmulq_n_f32(vcvtq_f32_s32(v53), a13.n128_f32[0]);
        *v44++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v54, (float32x4_t)vorrq_s8(vandq_s8(v51, v54), v50)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v55, (float32x4_t)vorrq_s8(vandq_s8(v34[213], v55), (int8x16_t)xmmword_1004D2D70))));
        v45[-1] = vsubq_s32(v52, v43[-1]);
        int32x4_t v56 = *v43;
        v43 += 2;
        *int v45 = vsubq_s32(v53, v56);
        v45 += 2;
        v42 += 2;
        v38 += 8;
      }
      while ((int)v31 >= v38);
    }
    else
    {
      int v38 = 0;
    }
    int v13 = v159;
    if (v38 < v159)
    {
      uint64_t v39 = v38;
      do
      {
        int v40 = v36->i32[v39] + v19->i32[v39];
        uint64_t v41 = (uint64_t)rint(v21 * (double)v40);
        if ((int)v41 <= -32768) {
          LODWORD(v41) = -32768;
        }
        if ((int)v41 >= 0x7FFF) {
          LOWORD(v41) = 0x7FFF;
        }
        v161->i16[v39] = v41;
        v19->i32[v39] = v40 - v37->i32[v39];
        ++v39;
      }
      while ((int)v39 < v159);
    }
    a3 = (int16x8_t *)((char *)v161 + v32);
    int v17 = v160 + 1;
    int v30 = v35 - 1;
    uint64_t v18 = v158;
  }
  while (v35);
}

void sub_10039573C(_Unwind_Exception *a1)
{
  sub_1002D1A1C((uint64_t *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_100395754(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100395760()
{
}

uint64_t sub_100395774(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003957F4(void *a1)
{
  *a1 = off_10049C400;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100395854(void *a1)
{
  *a1 = off_10049C400;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_1003958C8(uint64_t a1, double **a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  int v13 = (double **)(a1 + 32);
  uint64_t v12 = *(double **)(a1 + 32);
  double v14 = *(double *)(a1 + 16);
  unint64_t v15 = (uint64_t)(*(void *)(a1 + 40) - (void)v12) >> 3;
  if (v15 != a6)
  {
    if (a6 <= v15)
    {
      if (a6 < v15) {
        *(void *)(a1 + 40) = &v12[a6];
      }
    }
    else
    {
      sub_100358318(a1 + 32, a6 - v15);
      uint64_t v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  int v16 = *(_DWORD *)(a1 + 24);
  if (!v16)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    int v17 = *(_DWORD *)(a1 + 8);
    int v19 = v17 - 1;
    int v20 = *(_DWORD *)(a1 + 24);
    if (v20 >= v17 - 1) {
      goto LABEL_21;
    }
    if (a6 <= 0)
    {
      v10 += (v17 - v20 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v19;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      double v21 = *v12;
      int v22 = ~v20 + v17;
      do
      {
        int v23 = *v10;
        double v21 = **v10 + v21;
        *uint64_t v12 = v21;
        if (a6 != 1)
        {
          v12[1] = v23[1] + v12[1];
          if (a6 != 2) {
            v12[2] = v23[2] + v12[2];
          }
        }
        ++v10;
        --v22;
      }
      while (v22);
      goto LABEL_20;
    }
    uint64_t v57 = a6;
    while (1)
    {
      long long v58 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v57] || v58 >= (float64x2_t *)&v12[v57])
      {
        long long v60 = v58 + 1;
        uint64_t v61 = a6 & 0xFFFFFFFC;
        long long v62 = (float64x2_t *)(v12 + 2);
        do
        {
          float64x2_t v63 = vaddq_f64(*v60, *v62);
          v62[-1] = vaddq_f64(v60[-1], v62[-1]);
          float64x2_t *v62 = v63;
          v60 += 2;
          v62 += 2;
          v61 -= 4;
        }
        while (v61);
        uint64_t v64 = a6 & 0xFFFFFFFC;
        if (v64 == a6) {
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v64 = 0;
      }
      int v65 = &v58->f64[v64];
      int v66 = &v12[v64];
      uint64_t v67 = a6 - v64;
      do
      {
        double v68 = *v65++;
        *int v66 = v68 + *v66;
        ++v66;
        --v67;
      }
      while (v67);
LABEL_68:
      ++v20;
      ++v10;
      if (v20 == v19) {
        goto LABEL_20;
      }
    }
  }
  int v17 = *(_DWORD *)(a1 + 8);
  if (v16 != v17 - 1)
  {
    v69[0] = 0;
    v69[1] = 0;
    uint64_t v18 = sub_1002D19D8(v69, 19);
    *(_DWORD *)(v18 + 15) = 825058682;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)"sumCount == ksize-1";
    sub_1002D2278(-215, v69, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  uint64_t v10 = &a2[v17 - 1];
LABEL_21:
  if (a5)
  {
    int v24 = a5 - 1;
    uint64_t v25 = 1 - v17;
    uint64_t v26 = a6 - 2;
    if (v14 == 1.0)
    {
      while (1)
      {
        int v42 = v24;
        double v43 = *v10;
        int v44 = v10[v25];
        if (a6 >= 2) {
          break;
        }
        uint64_t v45 = 0;
        if (a6 > 0) {
          goto LABEL_60;
        }
LABEL_45:
        a3 += a4;
        ++v10;
        int v24 = v42 - 1;
        if (!v42) {
          return;
        }
      }
      uint64_t v45 = 0;
      int32x4_t v46 = (float64x2_t *)v12;
      int32x4_t v47 = (float64x2_t *)*v10;
      int32x4_t v48 = (float64x2_t *)v10[v25];
      do
      {
        int32x4_t v49 = (_WORD *)(a3 + 2 * v45);
        float64x2_t v50 = *v47++;
        float64x2_t v51 = vaddq_f64(*v46, v50);
        uint64_t v52 = (uint64_t)rint(v51.f64[0]);
        if ((int)v52 <= -32768) {
          LODWORD(v52) = -32768;
        }
        if ((int)v52 >= 0x7FFF) {
          LOWORD(v52) = 0x7FFF;
        }
        *int32x4_t v49 = v52;
        uint64_t v53 = (uint64_t)rint(v51.f64[1]);
        if ((int)v53 <= -32768) {
          LODWORD(v53) = -32768;
        }
        if ((int)v53 >= 0x7FFF) {
          LOWORD(v53) = 0x7FFF;
        }
        v49[1] = v53;
        float64x2_t v54 = *v48++;
        *v46++ = vsubq_f64(v51, v54);
        v45 += 2;
      }
      while (v45 <= v26);
      uint64_t v45 = v45;
      if ((int)v45 >= a6) {
        goto LABEL_45;
      }
      do
      {
LABEL_60:
        double v55 = v12[v45] + v43[v45];
        uint64_t v56 = (uint64_t)rint(v55);
        if ((int)v56 <= -32768) {
          LODWORD(v56) = -32768;
        }
        if ((int)v56 >= 0x7FFF) {
          LOWORD(v56) = 0x7FFF;
        }
        *(_WORD *)(a3 + 2 * v45) = v56;
        v12[v45] = v55 - v44[v45];
        ++v45;
      }
      while (a6 != v45);
      goto LABEL_45;
    }
    while (1)
    {
      int v27 = v24;
      unint64_t v28 = *v10;
      int v29 = v10[v25];
      if (a6 >= 2) {
        break;
      }
      uint64_t v30 = 0;
      if (a6 > 0) {
        goto LABEL_39;
      }
LABEL_24:
      a3 += a4;
      ++v10;
      int v24 = v27 - 1;
      if (!v27) {
        return;
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = (float64x2_t *)v10[v25];
    uint64_t v32 = (float64x2_t *)*v10;
    uint64_t v33 = (float64x2_t *)v12;
    do
    {
      float64x2_t v34 = (_WORD *)(a3 + 2 * v30);
      float64x2_t v35 = *v32++;
      float64x2_t v36 = vaddq_f64(*v33, v35);
      uint64_t v37 = (uint64_t)rint(v14 * v36.f64[0]);
      if ((int)v37 <= -32768) {
        LODWORD(v37) = -32768;
      }
      if ((int)v37 >= 0x7FFF) {
        LOWORD(v37) = 0x7FFF;
      }
      *float64x2_t v34 = v37;
      uint64_t v38 = (uint64_t)rint(vmuld_lane_f64(v14, v36, 1));
      if ((int)v38 <= -32768) {
        LODWORD(v38) = -32768;
      }
      if ((int)v38 >= 0x7FFF) {
        LOWORD(v38) = 0x7FFF;
      }
      v34[1] = v38;
      float64x2_t v39 = *v31++;
      *v33++ = vsubq_f64(v36, v39);
      v30 += 2;
    }
    while (v30 <= v26);
    uint64_t v30 = v30;
    if ((int)v30 >= a6) {
      goto LABEL_24;
    }
    do
    {
LABEL_39:
      double v40 = v12[v30] + v28[v30];
      uint64_t v41 = (uint64_t)rint(v14 * v40);
      if ((int)v41 <= -32768) {
        LODWORD(v41) = -32768;
      }
      if ((int)v41 >= 0x7FFF) {
        LOWORD(v41) = 0x7FFF;
      }
      *(_WORD *)(a3 + 2 * v30) = v41;
      v12[v30] = v40 - v29[v30];
      ++v30;
    }
    while (a6 != v30);
    goto LABEL_24;
  }
}

void sub_100395D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100395D9C(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100395DA8()
{
}

uint64_t sub_100395DBC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100395E3C(void *a1)
{
  *a1 = off_10049C488;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100395E9C(void *a1)
{
  *a1 = off_10049C488;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_100395F10(uint64_t a1, void *a2, int32x4_t *a3, int a4, int a5, int a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  int v11 = a6;
  unint64_t v15 = a2;
  uint64_t v18 = (int32x4_t **)(a1 + 32);
  int v17 = *(int32x4_t **)(a1 + 32);
  double v19 = *(double *)(a1 + 16);
  unint64_t v20 = (uint64_t)(*(void *)(a1 + 40) - (void)v17) >> 2;
  if (v20 == a6)
  {
    int v21 = *(_DWORD *)(a1 + 24);
    if (v21)
    {
      int v22 = *(_DWORD *)(a1 + 8) - 1;
      if (v21 != v22)
      {
        v148[0] = 0;
        v148[1] = 0;
        uint64_t v23 = sub_1002D19D8(v148, 19);
        *(_DWORD *)(v23 + 15) = 825058682;
        *(_OWORD *)uint64_t v23 = *(_OWORD *)"sumCount == ksize-1";
        sub_1002D2278(-215, v148, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 866);
      }
      unint64_t v15 = &a2[v22];
      goto LABEL_18;
    }
  }
  else
  {
    if (a6 <= v20)
    {
      if (a6 < v20) {
        *(void *)(a1 + 40) = (char *)v17 + 4 * a6;
      }
    }
    else
    {
      sub_10025FCA8(a1 + 32, a6 - v20);
      int v17 = *v18;
    }
    *(_DWORD *)(a1 + 24) = 0;
  }
  bzero(v17, 4 * v11);
  int v24 = *(_DWORD *)(a1 + 24);
  int v25 = *(_DWORD *)(a1 + 8) - 1;
  if (v24 < v25)
  {
    unint64_t v26 = (v11 - 4);
    if (v11 >= 4)
    {
      if ((v26 & 0xFFFFFFFC) + 5 <= v11) {
        uint64_t v56 = v11;
      }
      else {
        uint64_t v56 = (v26 & 0xFFFFFFFC) + 5;
      }
      uint64_t v57 = 4 * v56 - ((4 * (v11 - 4)) & 0x3FFFFFFF0);
      unint64_t v58 = v56 - (v26 & 0xFFFFFFFC) - 4;
      unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint64_t v61 = 0;
        unint64_t v62 = 0;
        float64x2_t v63 = (_DWORD *)*v15;
        uint64_t v64 = *v15 + 32;
        int v65 = v17 + 2;
        uint64_t v66 = 4;
        do
        {
          uint64_t v67 = v66;
          uint64_t v68 = v61;
          int v69 = (int32x4_t *)v64;
          uint64_t v70 = v65;
          v17[v62 / 4] = vaddq_s32(*(int32x4_t *)&v63[v62], v17[v62 / 4]);
          v62 += 4;
          v66 += 4;
          ++v61;
          v64 += 16;
          ++v65;
        }
        while (v62 <= v26);
        if ((int)v62 < v11)
        {
          if (v58 < 8) {
            goto LABEL_114;
          }
          uint64_t v71 = 16 * v68;
          uint64_t v72 = v71 + 16;
          uint64_t v73 = &v17[(unint64_t)v71 / 0x10 + 1];
          uint64_t v74 = v57 + v71;
          if (v73 < (int32x4_t *)((char *)v63 + v74) && (char *)v63 + v72 < (char *)v17->i32 + v74) {
            goto LABEL_114;
          }
          v67 += v59;
          unint64_t v75 = v58 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v76 = vaddq_s32(*v70, *v69);
            v70[-1] = vaddq_s32(v70[-1], v69[-1]);
            int32x4_t *v70 = v76;
            v69 += 2;
            v70 += 2;
            v75 -= 8;
          }
          while (v75);
          if (v58 != v59)
          {
LABEL_114:
            do
            {
              v17->i32[v67] += v63[v67];
              ++v67;
            }
            while (v67 < v11);
          }
        }
        int v60 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v60;
        ++v15;
      }
      while (v60 < *(_DWORD *)(a1 + 8) - 1);
    }
    else if (v11 >= 1)
    {
      do
      {
        int32x4_t v48 = (_DWORD *)*v15;
        v17->i32[0] += *(_DWORD *)*v15;
        if (v11 != 1)
        {
          v17->i32[1] += v48[1];
          if (v11 != 2) {
            v17->i32[2] += v48[2];
          }
        }
        int v47 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v47;
        ++v15;
      }
      while (v47 < *(_DWORD *)(a1 + 8) - 1);
    }
    else
    {
      if (v25 <= v24 + 1) {
        int v27 = v24 + 1;
      }
      else {
        int v27 = *(_DWORD *)(a1 + 8) - 1;
      }
      v15 += (v27 + ~v24) + 1;
      *(_DWORD *)(a1 + 24) = v27;
    }
  }
LABEL_18:
  if (!a5) {
    return;
  }
  int v28 = a5 - 1;
  unint64_t v29 = (v11 - 4);
  a11.n128_f32[0] = v19;
  uint64_t v30 = a4;
  int v144 = v11;
  if (v19 != 1.0)
  {
    uint64_t v31 = (int8x16_t *)&unk_1004D2000;
    do
    {
      int v32 = v28;
      uint64_t v33 = (_DWORD *)*v15;
      int v146 = v15;
      uint64_t v34 = v15[1 - *(int *)(a1 + 8)];
      if (v11 >= 4)
      {
        int v35 = 0;
        unint64_t v38 = 0;
        do
        {
          int32x4_t v39 = v17[v38 / 0x10];
          int32x4_t v40 = *(int32x4_t *)&v33[v38 / 4];
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            uint64_t v141 = v30;
            __n128 v139 = a11;
            int v137 = v32;
            int32x4_t v133 = v40;
            int32x4_t v135 = v39;
            int v43 = __cxa_guard_acquire(qword_1004D2D60);
            int32x4_t v40 = v133;
            int32x4_t v39 = v135;
            int v32 = v137;
            *(void *)&long long v44 = 0x8000000080000000;
            *((void *)&v44 + 1) = 0x8000000080000000;
            uint64_t v31 = (int8x16_t *)&unk_1004D2000;
            a11 = v139;
            uint64_t v30 = v141;
            if (v43)
            {
              xmmword_1004D2D50 = v44;
              __cxa_guard_release(qword_1004D2D60);
              int32x4_t v40 = v133;
              int32x4_t v39 = v135;
              int v32 = v137;
              uint64_t v31 = (int8x16_t *)&unk_1004D2000;
              a11 = v139;
              uint64_t v30 = v141;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            uint64_t v142 = v30;
            __n128 v140 = a11;
            int v138 = v32;
            int32x4_t v134 = v40;
            int32x4_t v136 = v39;
            int v45 = __cxa_guard_acquire(qword_1004D2D80);
            int32x4_t v40 = v134;
            int32x4_t v39 = v136;
            int v32 = v138;
            *(void *)&long long v46 = 0x3F0000003F000000;
            *((void *)&v46 + 1) = 0x3F0000003F000000;
            uint64_t v31 = (int8x16_t *)&unk_1004D2000;
            a11 = v140;
            uint64_t v30 = v142;
            if (v45)
            {
              xmmword_1004D2D70 = v46;
              __cxa_guard_release(qword_1004D2D80);
              int32x4_t v40 = v134;
              int32x4_t v39 = v136;
              int v32 = v138;
              uint64_t v31 = (int8x16_t *)&unk_1004D2000;
              a11 = v140;
              uint64_t v30 = v142;
            }
          }
          int32x4_t v41 = vaddq_s32(v40, v39);
          int8x16_t v42 = (int8x16_t)vmulq_n_f32(vcvtq_f32_s32(v41), a11.n128_f32[0]);
          a3[v38 / 0x10] = vcvtq_s32_f32(vaddq_f32((float32x4_t)v42, (float32x4_t)vorrq_s8(vandq_s8(v31[213], v42), (int8x16_t)xmmword_1004D2D70)));
          v17[v38 / 0x10] = vsubq_s32(v41, *(int32x4_t *)(v34 + v38));
          v38 += 16;
          v35 += 4;
        }
        while ((int)v29 >= v35);
      }
      else
      {
        int v35 = 0;
      }
      int v11 = v144;
      if (v35 < v144)
      {
        uint64_t v36 = v35;
        do
        {
          int v37 = v33[v36] + v17->i32[v36];
          a3->i32[v36] = (uint64_t)rint(v19 * (double)v37);
          v17->i32[v36] = v37 - *(_DWORD *)(v34 + v36 * 4);
          ++v36;
          ++v35;
        }
        while (v35 < v144);
      }
      a3 = (int32x4_t *)((char *)a3 + v30);
      unint64_t v15 = v146 + 1;
      int v28 = v32 - 1;
    }
    while (v32);
    return;
  }
  if (v11 >= 4)
  {
    uint64_t v77 = 0;
    unint64_t v78 = v11;
    if ((unint64_t)(v29 & 0xFFFFFFFC) + 5 <= v11) {
      uint64_t v79 = v11;
    }
    else {
      uint64_t v79 = (v29 & 0xFFFFFFFC) + 5;
    }
    uint64_t v80 = 4 * v79 - ((4 * (v11 - 4)) & 0x3FFFFFFF0);
    unint64_t v147 = v79 - (v29 & 0xFFFFFFFC) - 4;
    unint64_t v143 = v147 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v81 = a3 + 2;
    uint64_t v82 = a3;
    while (1)
    {
      uint64_t v83 = v15;
      uint64_t v84 = 0;
      unint64_t v85 = 0;
      int v86 = v28;
      uint64_t v87 = v30;
      uint64_t v88 = v77 * v30 + 16;
      uint64_t v89 = v80 + v77 * v30;
      uint64_t v90 = (int32x4_t *)v83[1 - *(int *)(a1 + 8)];
      float v91 = v83;
      unint64_t v92 = (int32x4_t *)*v83;
      int32x4_t v93 = v92 + 2;
      int32x4_t v94 = v90 + 2;
      int32x4_t v95 = v81;
      int32x4_t v96 = v17 + 2;
      uint64_t v97 = 4;
      do
      {
        unint64_t v98 = v97;
        uint64_t v99 = v84;
        int v100 = v96;
        uint64_t v101 = v93;
        uint64_t v102 = 4 * v85;
        unint64_t v103 = v95;
        int32x4_t v104 = vaddq_s32(v92[v85 / 4], v17[v85 / 4]);
        *(int32x4_t *)((char *)v82 + v102) = v104;
        int v105 = v94;
        *(int32x4_t *)((char *)v17 + v102) = vsubq_s32(v104, v90[v85 / 4]);
        v85 += 4;
        uint64_t v97 = v98 + 4;
        ++v84;
        ++v96;
        ++v93;
        ++v95;
        ++v94;
      }
      while (v85 <= v29);
      uint64_t v106 = v91;
      if ((int)v85 >= v144) {
        goto LABEL_68;
      }
      if (v147 >= 0x14)
      {
        uint64_t v109 = 16 * v99;
        unint64_t v110 = (unint64_t)a3[v99].u64 + v88;
        unint64_t v111 = (unint64_t)a3[v99].u64 + v89;
        uint64_t v112 = v109 + 16;
        uint64_t v113 = &v17[(unint64_t)v109 / 0x10 + 1];
        uint64_t v114 = v80 + v109;
        uint64_t v115 = &v17->i8[v114];
        unint64_t v116 = (unint64_t)v92->u64 + v112;
        unint64_t v117 = (unint64_t)v92->u64 + v114;
        unint64_t v118 = (unint64_t)v90->u64 + v112;
        unint64_t v119 = (unint64_t)v90->u64 + v114;
        BOOL v121 = v110 < (unint64_t)v92->u64 + v114 && v116 < v111;
        BOOL v123 = v110 < v119 && v118 < v111;
        BOOL v125 = (unint64_t)v113 < v117 && v116 < (unint64_t)v115;
        BOOL v127 = (unint64_t)v113 < v119 && v118 < (unint64_t)v115;
        if ((unint64_t)v113 >= v111 || v110 >= (unint64_t)v115)
        {
          uint64_t v106 = v91;
          if (!v121 && !v123 && !v125 && !v127)
          {
            unint64_t v129 = v147 & 0xFFFFFFFFFFFFFFF8;
            v98 += v143;
            do
            {
              int32x4_t v130 = vaddq_s32(v101[-1], v100[-1]);
              int32x4_t v131 = vaddq_s32(*v101, *v100);
              v103[-1] = v130;
              *unint64_t v103 = v131;
              int32x4_t v132 = vsubq_s32(v131, *v105);
              v100[-1] = vsubq_s32(v130, v105[-1]);
              *int v100 = v132;
              v100 += 2;
              v101 += 2;
              v103 += 2;
              v105 += 2;
              v129 -= 8;
            }
            while (v129);
            if (v147 == v143) {
              goto LABEL_68;
            }
          }
        }
        else
        {
          uint64_t v106 = v91;
        }
      }
      do
      {
        uint64_t v107 = v98;
        int v108 = v92->i32[v98] + v17->i32[v98];
        v82->i32[v107] = v108;
        v17->i32[v107] = v108 - v90->i32[v98++];
      }
      while (v98 < v78);
LABEL_68:
      uint64_t v30 = v87;
      uint64_t v82 = (int32x4_t *)((char *)v82 + v87);
      unint64_t v15 = v106 + 1;
      int v28 = v86 - 1;
      ++v77;
      unint64_t v81 = (int32x4_t *)((char *)v81 + v87);
      if (!v86) {
        return;
      }
    }
  }
  if (v11 >= 1)
  {
    int32x4_t v49 = v15 + 1;
    float64x2_t v50 = &a3->i32[2];
    do
    {
      float64x2_t v51 = (_DWORD *)*(v49 - 1);
      uint64_t v52 = (_DWORD *)v49[-*(int *)(a1 + 8)];
      int v53 = *v51 + v17->i32[0];
      *(v50 - 2) = v53;
      v17->i32[0] = v53 - *v52;
      if (v11 != 1)
      {
        int v54 = v51[1] + v17->i32[1];
        *(v50 - 1) = v54;
        v17->i32[1] = v54 - v52[1];
        if (v11 != 2)
        {
          int v55 = v51[2] + v17->i32[2];
          *float64x2_t v50 = v55;
          v17->i32[2] = v55 - v52[2];
        }
      }
      ++v49;
      float64x2_t v50 = (int *)((char *)v50 + a4);
      --a5;
    }
    while (a5);
  }
}

void sub_100396728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100396740(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_10039674C()
{
}

uint64_t sub_100396760(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003967E0(void *a1)
{
  *a1 = off_10049C510;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100396840(void *a1)
{
  *a1 = off_10049C510;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_1003968B4(uint64_t a1, void *a2, float32x4_t *a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  int v13 = (int32x4_t **)(a1 + 32);
  uint64_t v12 = *(int32x4_t **)(a1 + 32);
  double v129 = *(double *)(a1 + 16);
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 40) - (void)v12) >> 2;
  if (v14 == a6)
  {
    int v15 = *(_DWORD *)(a1 + 24);
    if (v15)
    {
      int v16 = *(_DWORD *)(a1 + 8) - 1;
      if (v15 != v16)
      {
        v131[0] = 0;
        v131[1] = 0;
        uint64_t v17 = sub_1002D19D8(v131, 19);
        *(_DWORD *)(v17 + 15) = 825058682;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)"sumCount == ksize-1";
        sub_1002D2278(-215, v131, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 986);
      }
      uint64_t v10 = &a2[v16];
      goto LABEL_18;
    }
  }
  else
  {
    if (a6 <= v14)
    {
      if (a6 < v14) {
        *(void *)(a1 + 40) = (char *)v12 + 4 * a6;
      }
    }
    else
    {
      sub_10025FCA8(a1 + 32, a6 - v14);
      uint64_t v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
  }
  bzero(v12, 4 * a6);
  int v18 = *(_DWORD *)(a1 + 24);
  int v19 = *(_DWORD *)(a1 + 8) - 1;
  if (v18 < v19)
  {
    unint64_t v20 = (a6 - 4);
    if (a6 >= 4)
    {
      if ((v20 & 0xFFFFFFFC) + 5 <= a6) {
        uint64_t v65 = a6;
      }
      else {
        uint64_t v65 = (v20 & 0xFFFFFFFC) + 5;
      }
      uint64_t v66 = 4 * v65 - ((4 * (a6 - 4)) & 0x3FFFFFFF0);
      unint64_t v67 = v65 - (v20 & 0xFFFFFFFC) - 4;
      unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint64_t v70 = 0;
        unint64_t v71 = 0;
        uint64_t v72 = (_DWORD *)*v10;
        uint64_t v73 = *v10 + 32;
        uint64_t v74 = v12 + 2;
        uint64_t v75 = 4;
        do
        {
          uint64_t v76 = v75;
          uint64_t v77 = v70;
          unint64_t v78 = (int32x4_t *)v73;
          uint64_t v79 = v74;
          v12[v71 / 4] = vaddq_s32(*(int32x4_t *)&v72[v71], v12[v71 / 4]);
          v71 += 4;
          v75 += 4;
          ++v70;
          v73 += 16;
          ++v74;
        }
        while (v71 <= v20);
        if ((int)v71 < a6)
        {
          if (v67 < 8) {
            goto LABEL_108;
          }
          uint64_t v80 = 16 * v77;
          uint64_t v81 = v80 + 16;
          uint64_t v82 = &v12[(unint64_t)v80 / 0x10 + 1];
          uint64_t v83 = v66 + v80;
          if (v82 < (int32x4_t *)((char *)v72 + v83) && (char *)v72 + v81 < (char *)v12->i32 + v83) {
            goto LABEL_108;
          }
          v76 += v68;
          unint64_t v84 = v67 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v85 = vaddq_s32(*v79, *v78);
            v79[-1] = vaddq_s32(v79[-1], v78[-1]);
            int32x4_t *v79 = v85;
            v78 += 2;
            v79 += 2;
            v84 -= 8;
          }
          while (v84);
          if (v67 != v68)
          {
LABEL_108:
            do
            {
              v12->i32[v76] += v72[v76];
              ++v76;
            }
            while (v76 < a6);
          }
        }
        int v69 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v69;
        ++v10;
      }
      while (v69 < *(_DWORD *)(a1 + 8) - 1);
    }
    else if (a6 >= 1)
    {
      do
      {
        int v53 = (_DWORD *)*v10;
        v12->i32[0] += *(_DWORD *)*v10;
        if (a6 != 1)
        {
          v12->i32[1] += v53[1];
          if (a6 != 2) {
            v12->i32[2] += v53[2];
          }
        }
        int v52 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v52;
        ++v10;
      }
      while (v52 < *(_DWORD *)(a1 + 8) - 1);
    }
    else
    {
      if (v19 <= v18 + 1) {
        int v21 = v18 + 1;
      }
      else {
        int v21 = *(_DWORD *)(a1 + 8) - 1;
      }
      v10 += (v21 + ~v18) + 1;
      *(_DWORD *)(a1 + 24) = v21;
    }
  }
LABEL_18:
  if (a5)
  {
    int v22 = a5 - 1;
    unint64_t v23 = (a6 - 8);
    float v24 = v129;
    uint64_t v25 = a4;
    if (v129 != 1.0)
    {
      uint64_t v26 = 4 * a6;
      unint64_t v27 = (unint64_t)v12->u64 + v26;
      int v28 = v12 + 1;
      while (1)
      {
        int v29 = v22;
        uint64_t v30 = (_DWORD *)*v10;
        uint64_t v31 = v10[1 - *(int *)(a1 + 8)];
        if (a6 >= 8)
        {
          unint64_t v33 = 0;
          uint64_t v32 = 0;
          do
          {
            uint64_t v34 = &v28[v33 / 0x10];
            int32x4_t v35 = vaddq_s32(*(int32x4_t *)&v30[v33 / 4], v12[v33 / 0x10]);
            int32x4_t v36 = vaddq_s32(*(int32x4_t *)&v30[v33 / 4 + 4], v28[v33 / 0x10]);
            int v37 = &a3[v33 / 0x10];
            *int v37 = vmulq_n_f32(vcvtq_f32_s32(v35), v24);
            v37[1] = vmulq_n_f32(vcvtq_f32_s32(v36), v24);
            v34[-1] = vsubq_s32(v35, *(int32x4_t *)(v31 + v33));
            *uint64_t v34 = vsubq_s32(v36, *(int32x4_t *)(v31 + 16 + v33));
            v32 += 8;
            v33 += 32;
          }
          while (v32 <= (int)v23);
          uint64_t v32 = v32;
          if ((int)v32 >= a6) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v32 = 0;
          if (a6 <= 0) {
            goto LABEL_21;
          }
        }
        unint64_t v38 = a6 - v32;
        if (v38 >= 8)
        {
          uint64_t v40 = 4 * v32;
          int32x4_t v41 = &v12->i32[v32];
          BOOL v43 = (unint64_t)v41 < v31 + v26 && v31 + 4 * v32 < v27;
          if ((unint64_t)&v30[v32] >= v27 || v41 >= &v30[(unint64_t)v26 / 4])
          {
            if (v43)
            {
              double v39 = v129;
            }
            else
            {
              v32 += v38 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v45 = v38 & 0xFFFFFFFFFFFFFFFCLL;
              double v39 = v129;
              do
              {
                int32x4_t v46 = vaddq_s32(*(int32x4_t *)&v30[(unint64_t)v40 / 4], *(int32x4_t *)((char *)v12 + v40));
                v47.i64[0] = v46.i32[0];
                v47.i64[1] = v46.i32[1];
                float64x2_t v48 = vcvtq_f64_s64(v47);
                v47.i64[0] = v46.i32[2];
                v47.i64[1] = v46.i32[3];
                *(float32x4_t *)((char *)a3 + v40) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v48, v129)), vmulq_n_f64(vcvtq_f64_s64(v47), v129));
                *(int32x4_t *)((char *)v12 + v40) = vsubq_s32(v46, *(int32x4_t *)(v31 + v40));
                v40 += 16;
                v45 -= 4;
              }
              while (v45);
              if (v38 == (v38 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_21;
              }
            }
          }
          else
          {
            double v39 = v129;
          }
        }
        else
        {
          double v39 = v129;
        }
        do
        {
          uint64_t v49 = v32;
          int v50 = v30[v32] + v12->i32[v32];
          float32_t v51 = v39 * (double)v50;
          a3->f32[v49] = v51;
          v12->i32[v49] = v50 - *(_DWORD *)(v31 + 4 * v32++);
        }
        while (a6 != v32);
LABEL_21:
        a3 = (float32x4_t *)((char *)a3 + a4);
        ++v10;
        int v22 = v29 - 1;
        if (!v29) {
          return;
        }
      }
    }
    if (a6 >= 8)
    {
      if ((unint64_t)(v23 & 0xFFFFFFF8) + 9 <= a6) {
        uint64_t v86 = a6;
      }
      else {
        uint64_t v86 = (v23 & 0xFFFFFFF8) + 9;
      }
      uint64_t v130 = 4 * v86 - ((4 * (a6 - 8)) & 0x3FFFFFFE0);
      unint64_t v87 = v86 - (v23 & 0xFFFFFFF8) - 8;
      uint64_t v128 = v86 & 7;
      uint64_t v88 = a3 + 3;
      do
      {
        uint64_t v89 = 0;
        unint64_t v90 = 0;
        int v91 = v22;
        unint64_t v92 = (int32x4_t *)v10[1 - *(int *)(a1 + 8)];
        int32x4_t v93 = (_DWORD *)*v10;
        uint64_t i64 = *v10 + 48;
        int32x4_t v95 = v92 + 3;
        int32x4_t v96 = v88;
        uint64_t v97 = v12 + 3;
        uint64_t v98 = 8;
        do
        {
          unint64_t v99 = v98;
          uint64_t v100 = v89;
          uint64_t v101 = v97;
          uint64_t v102 = (int32x4_t *)i64;
          unint64_t v103 = v96;
          int32x4_t v104 = v95;
          int v105 = &v12[v90 / 4];
          uint64_t v106 = (int32x4_t *)&v93[v90];
          int32x4_t v107 = vaddq_s32(*v106, *v105);
          int32x4_t v108 = vaddq_s32(v106[1], v105[1]);
          uint64_t v109 = &a3[v90 / 4];
          float32x4_t *v109 = vcvtq_f32_s32(v107);
          v109[1] = vcvtq_f32_s32(v108);
          unint64_t v110 = &v92[v90 / 4];
          *int v105 = vsubq_s32(v107, *v110);
          int32x4_t v111 = v110[1];
          v90 += 8;
          uint64_t v98 = v99 + 8;
          ++v89;
          uint64_t v97 = v101 + 2;
          v105[1] = vsubq_s32(v108, v111);
          uint64_t i64 = (uint64_t)v102[2].i64;
          v96 += 2;
          v95 += 2;
        }
        while (v90 <= v23);
        if ((int)v90 < a6)
        {
          if (v87 < 8) {
            goto LABEL_109;
          }
          uint64_t v112 = 32 * v100 + 32;
          uint64_t v113 = &v12->i8[v112];
          uint64_t v114 = v130 + 32 * v100;
          uint64_t v115 = &v12->i8[v114];
          unint64_t v116 = (char *)v93 + v112;
          unint64_t v117 = (char *)v93 + v114;
          unint64_t v118 = (unint64_t)v92->u64 + v112;
          BOOL v119 = v113 >= &v92->i8[v114] || v118 >= (unint64_t)v115;
          BOOL v120 = !v119;
          if (v116 < v115 && v113 < v117) {
            goto LABEL_109;
          }
          if (v120) {
            goto LABEL_109;
          }
          v99 += v87 - v128;
          unint64_t v122 = v87 - v128;
          do
          {
            int32x4_t v123 = vaddq_s32(v102[-1], v101[-1]);
            int32x4_t v124 = vaddq_s32(*v102, *v101);
            v103[-1] = vcvtq_f32_s32(v123);
            *unint64_t v103 = vcvtq_f32_s32(v124);
            int32x4_t v125 = vsubq_s32(v124, *v104);
            v101[-1] = vsubq_s32(v123, v104[-1]);
            *uint64_t v101 = v125;
            v101 += 2;
            v102 += 2;
            v103 += 2;
            v104 += 2;
            v122 -= 8;
          }
          while (v122);
          if (v128)
          {
LABEL_109:
            do
            {
              uint64_t v126 = v99;
              int v127 = v93[v99] + v12->i32[v99];
              a3->f32[v126] = (float)v127;
              v12->i32[v126] = v127 - v92->i32[v99++];
            }
            while (v99 < a6);
          }
        }
        a3 = (float32x4_t *)((char *)a3 + v25);
        ++v10;
        int v22 = v91 - 1;
        uint64_t v88 = (float32x4_t *)((char *)v88 + v25);
      }
      while (v91);
    }
    else if (a6 >= 1)
    {
      int v54 = v10 + 1;
      int v55 = &a3->f32[3];
      do
      {
        uint64_t v56 = (_DWORD *)*(v54 - 1);
        int v57 = *v56 + v12->i32[0];
        unint64_t v58 = (_DWORD *)v54[-*(int *)(a1 + 8)];
        *(v55 - 3) = (float)v57;
        v12->i32[0] = v57 - *v58;
        if (a6 != 1)
        {
          int v59 = v56[1] + v12->i32[1];
          *(v55 - 2) = (float)v59;
          v12->i32[1] = v59 - v58[1];
          if (a6 != 2)
          {
            int v60 = v56[2] + v12->i32[2];
            *(v55 - 1) = (float)v60;
            v12->i32[2] = v60 - v58[2];
            if (a6 != 3)
            {
              int v61 = v56[3] + v12->i32[3];
              *int v55 = (float)v61;
              v12->i32[3] = v61 - v58[3];
              if (a6 != 4)
              {
                int v62 = v56[4] + v12[1].i32[0];
                v55[1] = (float)v62;
                v12[1].i32[0] = v62 - v58[4];
                if (a6 != 5)
                {
                  int v63 = v56[5] + v12[1].i32[1];
                  v55[2] = (float)v63;
                  v12[1].i32[1] = v63 - v58[5];
                  if (a6 != 6)
                  {
                    int v64 = v56[6] + v12[1].i32[2];
                    v55[3] = (float)v64;
                    v12[1].i32[2] = v64 - v58[6];
                  }
                }
              }
            }
          }
        }
        ++v54;
        int v55 = (float *)((char *)v55 + a4);
        --a5;
      }
      while (a5);
    }
  }
}

void sub_10039710C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100397124(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100397130()
{
}

uint64_t sub_100397144(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003971C4(void *a1)
{
  *a1 = off_10049C598;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100397224(void *a1)
{
  *a1 = off_10049C598;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_100397298(uint64_t a1, double **a2, float *a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  int v13 = (double **)(a1 + 32);
  uint64_t v12 = *(double **)(a1 + 32);
  double v176 = *(double *)(a1 + 16);
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 40) - (void)v12) >> 3;
  if (v14 != a6)
  {
    if (a6 <= v14)
    {
      if (a6 < v14) {
        *(void *)(a1 + 40) = &v12[a6];
      }
    }
    else
    {
      sub_100358318(a1 + 32, a6 - v14);
      uint64_t v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  int v15 = *(_DWORD *)(a1 + 24);
  if (!v15)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    int v16 = *(_DWORD *)(a1 + 8);
    int v18 = v16 - 1;
    int v19 = *(_DWORD *)(a1 + 24);
    if (v19 >= v16 - 1) {
      goto LABEL_21;
    }
    if (a6 <= 0)
    {
      v10 += (v16 - v19 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v18;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      double v20 = *v12;
      int v21 = ~v19 + v16;
      do
      {
        int v22 = *v10;
        double v20 = **v10 + v20;
        *uint64_t v12 = v20;
        if (a6 != 1)
        {
          v12[1] = v22[1] + v12[1];
          if (a6 != 2) {
            v12[2] = v22[2] + v12[2];
          }
        }
        ++v10;
        --v21;
      }
      while (v21);
      goto LABEL_20;
    }
    uint64_t v164 = a6;
    while (1)
    {
      int32x4_t v165 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v164] || v165 >= (float64x2_t *)&v12[v164])
      {
        uint16x8_t v167 = v165 + 1;
        uint64_t v168 = a6 & 0xFFFFFFFC;
        int16x8_t v169 = (float64x2_t *)(v12 + 2);
        do
        {
          float64x2_t v170 = vaddq_f64(*v167, *v169);
          v169[-1] = vaddq_f64(v167[-1], v169[-1]);
          float64x2_t *v169 = v170;
          v167 += 2;
          v169 += 2;
          v168 -= 4;
        }
        while (v168);
        uint64_t v171 = a6 & 0xFFFFFFFC;
        if (v171 == a6) {
          goto LABEL_125;
        }
      }
      else
      {
        uint64_t v171 = 0;
      }
      int16x8_t v172 = &v165->f64[v171];
      int16x8_t v173 = &v12[v171];
      uint64_t v174 = a6 - v171;
      do
      {
        double v175 = *v172++;
        *int16x8_t v173 = v175 + *v173;
        ++v173;
        --v174;
      }
      while (v174);
LABEL_125:
      ++v19;
      ++v10;
      if (v19 == v18) {
        goto LABEL_20;
      }
    }
  }
  int v16 = *(_DWORD *)(a1 + 8);
  if (v15 != v16 - 1)
  {
    v178[0] = 0;
    v178[1] = 0;
    uint64_t v17 = sub_1002D19D8(v178, 19);
    *(_DWORD *)(v17 + 15) = 825058682;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)"sumCount == ksize-1";
    sub_1002D2278(-215, v178, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  uint64_t v10 = &a2[v16 - 1];
LABEL_21:
  if (!a5) {
    return;
  }
  int v23 = a5 - 1;
  uint64_t v24 = 1 - v16;
  unint64_t v25 = (a6 - 2);
  uint64_t v26 = a4;
  if (v176 != 1.0)
  {
    uint64_t v27 = a6;
    unint64_t v28 = (unint64_t)&v12[v27];
    if ((int)v25 <= 1) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = (int)v25;
    }
    uint64_t v30 = ((8 * v29) & 0x3FFFFFFF0) + 16;
    uint64_t v31 = (double *)((char *)v12 + v30);
    uint64_t v32 = (v29 >> 1) + 1;
    unint64_t v33 = a3 + 1;
    while (1)
    {
      int v34 = v23;
      int32x4_t v35 = *v10;
      int32x4_t v36 = v10[v24];
      if (a6 < 2)
      {
        uint64_t v37 = 0;
        if (a6 <= 0) {
          goto LABEL_27;
        }
        goto LABEL_53;
      }
      if (v29 < 6) {
        break;
      }
      uint64_t v38 = 0;
      BOOL v40 = v12 < (double *)((char *)v36 + v30) && v36 < v31;
      if (v35 < v31 && v12 < (double *)((char *)v35 + v30)) {
        goto LABEL_49;
      }
      double v42 = v176;
      if (v40) {
        goto LABEL_50;
      }
      uint64_t v43 = v32 & 0x7FFFFFFC;
      long long v44 = (float64x2_t *)v10[v24];
      unint64_t v45 = a3;
      int32x4_t v46 = (float64x2_t *)*v10;
      int64x2_t v47 = (float64x2_t *)v12;
      do
      {
        float64x2_t v48 = vaddq_f64(v47[3], v46[3]);
        float64x2_t v49 = vaddq_f64(v47[2], v46[2]);
        float64x2_t v50 = vaddq_f64(v47[1], v46[1]);
        float64x2_t v51 = vaddq_f64(*v47, *v46);
        v179.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v51, (int64x2_t)v50), v176)), vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v49, (int64x2_t)v48), v176));
        v179.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)v51, (int64x2_t)v50), v176)), vmulq_n_f64((float64x2_t)vzip2q_s64((int64x2_t)v49, (int64x2_t)v48), v176));
        vst2q_f32(v45, v179);
        v45 += 8;
        float64x2_t v52 = v44[2];
        float64x2_t v53 = v44[3];
        float64x2_t v54 = *v44;
        float64x2_t v55 = v44[1];
        v44 += 4;
        v47[2] = vsubq_f64(v49, v52);
        _OWORD v47[3] = vsubq_f64(v48, v53);
        *int64x2_t v47 = vsubq_f64(v51, v54);
        v47[1] = vsubq_f64(v50, v55);
        v47 += 4;
        v46 += 4;
        v43 -= 4;
      }
      while (v43);
      uint64_t v38 = 2 * (v32 & 0x7FFFFFFC);
      if (v32 != (v32 & 0x7FFFFFFC)) {
        goto LABEL_50;
      }
LABEL_52:
      uint64_t v37 = v38;
      if ((int)v38 >= a6) {
        goto LABEL_27;
      }
LABEL_53:
      unint64_t v66 = a6 - v37;
      if (v66 < 8
        || ((uint64_t v67 = v37, v68 = &v12[v37], v68 < &v36[v27]) ? (v69 = (unint64_t)&v36[v37] >= v28) : (v69 = 1),
            v69 ? (char v70 = 0) : (char v70 = 1),
            (unint64_t)&v35[v37] < v28 ? (BOOL v71 = v68 >= &v35[v27]) : (BOOL v71 = 1),
            !v71 || (v70 & 1) != 0))
      {
        uint64_t v72 = v37;
        double v78 = v176;
      }
      else
      {
        uint64_t v72 = (v66 & 0xFFFFFFFFFFFFFFFCLL) + v37;
        uint64_t v73 = (float64x2_t *)&v12[v67];
        uint64_t v74 = (float64x2_t *)&v35[v67];
        uint64_t v75 = v37;
        uint64_t v76 = (float64x2_t *)&v36[v67];
        unint64_t v77 = v66 & 0xFFFFFFFFFFFFFFFCLL;
        double v78 = v176;
        do
        {
          float64x2_t v80 = *v74;
          float64x2_t v79 = v74[1];
          v74 += 2;
          float64x2_t v81 = vaddq_f64(*v73, v80);
          float64x2_t v82 = vaddq_f64(v73[1], v79);
          *(float32x4_t *)&a3[v75] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v81, v176)), vmulq_n_f64(v82, v176));
          float64x2_t v83 = *v76;
          float64x2_t v84 = v76[1];
          v76 += 2;
          *uint64_t v73 = vsubq_f64(v81, v83);
          v73[1] = vsubq_f64(v82, v84);
          v73 += 2;
          v75 += 4;
          v77 -= 4;
        }
        while (v77);
        if (v66 == (v66 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_27;
        }
      }
      do
      {
        double v85 = v12[v72] + v35[v72];
        float v86 = v78 * v85;
        a3[v72] = v86;
        v12[v72] = v85 - v36[v72];
        ++v72;
      }
      while (a6 != v72);
LABEL_27:
      a3 = (float *)((char *)a3 + v26);
      ++v10;
      int v23 = v34 - 1;
      unint64_t v33 = (float *)((char *)v33 + v26);
      if (!v34) {
        return;
      }
    }
    uint64_t v38 = 0;
LABEL_49:
    double v42 = v176;
LABEL_50:
    uint64_t v56 = &v35[v38 + 1];
    int v57 = &v33[v38];
    unint64_t v58 = &v36[v38 + 1];
    int v59 = &v12[v38 + 1];
    do
    {
      double v60 = *(v59 - 1) + *(v56 - 1);
      double v61 = *v59 + *v56;
      float v62 = v42 * v60;
      float v63 = v42 * v61;
      *(v57 - 1) = v62;
      *int v57 = v63;
      double v64 = v60 - *(v58 - 1);
      double v65 = *v58;
      v58 += 2;
      v38 += 2;
      v56 += 2;
      *(v59 - 1) = v64;
      *int v59 = v61 - v65;
      v57 += 2;
      v59 += 2;
    }
    while (v38 <= (int)v25);
    goto LABEL_52;
  }
  if (a6 >= 2)
  {
    unint64_t v92 = (v25 & 0xFFFFFFFE) + 3;
    if (v92 <= a6) {
      unint64_t v92 = a6;
    }
    uint64_t v93 = (8 * (a6 - 2)) & 0x7FFFFFFF0;
    unint64_t v177 = 8 * v92 - v93;
    unint64_t v94 = v92 - (v25 & 0xFFFFFFFE) - 2;
    uint64_t v95 = v93 + 16;
    int32x4_t v96 = (double *)((char *)v12 + v93 + 16);
    uint64_t v97 = (v25 >> 1) + 1;
    unint64_t v98 = v94 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v99 = a3 + 1;
    while (1)
    {
      int v100 = v23;
      uint64_t v101 = *v10;
      uint64_t v102 = v10[v24];
      if (v25 < 6) {
        break;
      }
      uint64_t v103 = 0;
      BOOL v122 = v12 < (double *)((char *)v102 + v95) && v102 < v96;
      uint64_t v105 = 2;
      if (v101 < v96 && v12 < (double *)((char *)v101 + v95))
      {
        unint64_t v104 = 0;
LABEL_84:
        uint64_t v106 = v103 - 1;
        uint64_t v107 = v105 - 2;
        int32x4_t v108 = &v99[v104];
        uint64_t v109 = &v101[v104 + 1];
        unint64_t v110 = &v12[v104 + 1];
        int32x4_t v111 = &v102[v104 + 1];
        do
        {
          double v112 = *(v110 - 1) + *(v109 - 1);
          double v113 = *v110 + *v109;
          float v114 = v112;
          float v115 = v113;
          *(v108 - 1) = v114;
          *int32x4_t v108 = v115;
          double v116 = v112 - *(v111 - 1);
          double v117 = *v111;
          v111 += 2;
          v104 += 2;
          ++v106;
          v107 += 2;
          v108 += 2;
          *(v110 - 1) = v116;
          double *v110 = v113 - v117;
          v109 += 2;
          v110 += 2;
        }
        while (v104 <= v25);
        goto LABEL_86;
      }
      unint64_t v104 = 0;
      if (v122) {
        goto LABEL_84;
      }
      uint64_t v124 = v97 & 0xFFFFFFFC;
      int32x4_t v125 = (float64x2_t *)v10[v24];
      uint64_t v126 = a3;
      int v127 = (float64x2_t *)*v10;
      uint64_t v128 = (float64x2_t *)v12;
      do
      {
        float64x2_t v129 = v127[2];
        float64x2_t v130 = v127[3];
        float64x2_t v131 = *v127;
        float64x2_t v132 = v127[1];
        v127 += 4;
        float64x2_t v133 = vaddq_f64(v128[1], v132);
        float64x2_t v134 = vaddq_f64(*v128, v131);
        float64x2_t v135 = vaddq_f64(v128[3], v130);
        float64x2_t v136 = vaddq_f64(v128[2], v129);
        v180.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vzip1q_s64((int64x2_t)v134, (int64x2_t)v133)), (float64x2_t)vzip1q_s64((int64x2_t)v136, (int64x2_t)v135));
        v180.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vzip2q_s64((int64x2_t)v134, (int64x2_t)v133)), (float64x2_t)vzip2q_s64((int64x2_t)v136, (int64x2_t)v135));
        vst2q_f32(v126, v180);
        v126 += 8;
        float64x2_t v137 = v125[2];
        float64x2_t v138 = v125[3];
        float64x2_t v139 = *v125;
        float64x2_t v140 = v125[1];
        v125 += 4;
        v128[2] = vsubq_f64(v136, v137);
        v128[3] = vsubq_f64(v135, v138);
        *uint64_t v128 = vsubq_f64(v134, v139);
        v128[1] = vsubq_f64(v133, v140);
        v128 += 4;
        v124 -= 4;
      }
      while (v124);
      uint64_t v103 = v97 & 0xFFFFFFFC;
      uint64_t v105 = (8 * (v103 >> 2)) | 2;
      unint64_t v104 = 2 * v103;
      uint64_t v106 = v103 - 1;
      uint64_t v107 = v104;
      if (v97 != v103) {
        goto LABEL_84;
      }
LABEL_86:
      if ((int)v104 < a6)
      {
        if (v94 >= 8)
        {
          uint64_t v141 = 16 * v106;
          uint64_t v142 = 16 * v106 + 16;
          unint64_t v143 = (char *)v12 + v142;
          unint64_t v144 = v177 + v141;
          int v145 = (char *)v12 + v144;
          int v146 = (char *)v101 + v142;
          unint64_t v147 = (char *)v101 + v144;
          unint64_t v148 = (unint64_t)v102 + v142;
          BOOL v150 = v143 < (char *)v102 + v144 && v148 < (unint64_t)v145;
          if (v146 >= v145 || v143 >= v147)
          {
            if (v150)
            {
              unint64_t v118 = v107;
            }
            else
            {
              unint64_t v118 = v107 + v98;
              uint64_t v152 = v107;
              __n128 v153 = (float64x2_t *)&v12[v107];
              uint64_t v154 = (float64x2_t *)&v101[v107];
              uint64_t v155 = v107;
              uint64_t v156 = (float64x2_t *)&v102[v152];
              unint64_t v157 = v94 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                float64x2_t v158 = *v154;
                float64x2_t v159 = v154[1];
                v154 += 2;
                float64x2_t v160 = vaddq_f64(v153[1], v159);
                float64x2_t v161 = vaddq_f64(*v153, v158);
                *(float32x4_t *)&a3[v155] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v161), v160);
                float64x2_t v162 = *v156;
                float64x2_t v163 = v156[1];
                v156 += 2;
                *__n128 v153 = vsubq_f64(v161, v162);
                v153[1] = vsubq_f64(v160, v163);
                v153 += 2;
                v155 += 4;
                v157 -= 4;
              }
              while (v157);
              if (v94 == v98) {
                goto LABEL_81;
              }
            }
          }
          else
          {
            unint64_t v118 = v107;
          }
        }
        else
        {
          unint64_t v118 = v107;
        }
        do
        {
          double v119 = v12[v118] + v101[v118];
          float v120 = v119;
          a3[v118] = v120;
          v12[v118] = v119 - v102[v118];
          ++v118;
        }
        while (v118 < a6);
      }
LABEL_81:
      a3 = (float *)((char *)a3 + v26);
      ++v10;
      int v23 = v100 - 1;
      unint64_t v99 = (float *)((char *)v99 + v26);
      if (!v100) {
        return;
      }
    }
    uint64_t v103 = 0;
    unint64_t v104 = 0;
    uint64_t v105 = 2;
    goto LABEL_84;
  }
  if (a6 == 1)
  {
    double v87 = *v12;
    do
    {
      uint64_t v88 = *(double **)((char *)v10 + 8 - 8 * v16);
      uint64_t v89 = *v10++;
      double v90 = v87 + *v89;
      float v91 = v90;
      *a3 = v91;
      double v87 = v90 - *v88;
      *uint64_t v12 = v87;
      a3 = (float *)((char *)a3 + a4);
      --a5;
    }
    while (a5);
  }
}

void sub_100397B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100397B60(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100397B6C()
{
}

uint64_t sub_100397B80(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100397C00(void *a1)
{
  *a1 = off_10049C620;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_100397C60(void *a1)
{
  *a1 = off_10049C620;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_100397CD4(uint64_t a1, void *a2, double *a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  int v13 = (int32x4_t **)(a1 + 32);
  uint64_t v12 = *(int32x4_t **)(a1 + 32);
  double v170 = *(double *)(a1 + 16);
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 40) - (void)v12) >> 2;
  if (v14 == a6)
  {
    int v15 = *(_DWORD *)(a1 + 24);
    if (v15)
    {
      int v16 = *(_DWORD *)(a1 + 8) - 1;
      if (v15 != v16)
      {
        v172[0] = 0;
        v172[1] = 0;
        uint64_t v17 = sub_1002D19D8(v172, 19);
        *(_DWORD *)(v17 + 15) = 825058682;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)"sumCount == ksize-1";
        sub_1002D2278(-215, v172, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
      }
      uint64_t v10 = &a2[v16];
      goto LABEL_38;
    }
  }
  else
  {
    if (a6 <= v14)
    {
      if (a6 < v14) {
        *(void *)(a1 + 40) = (char *)v12 + 4 * a6;
      }
    }
    else
    {
      sub_10025FCA8(a1 + 32, a6 - v14);
      uint64_t v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
  }
  bzero(v12, 4 * a6);
  int v18 = *(_DWORD *)(a1 + 24);
  int v19 = *(_DWORD *)(a1 + 8) - 1;
  if (v18 >= v19) {
    goto LABEL_38;
  }
  if (a6 < 1)
  {
    if (v19 <= v18 + 1) {
      int v19 = v18 + 1;
    }
    v10 += (v19 + ~v18) + 1;
    *(_DWORD *)(a1 + 24) = v19;
  }
  else
  {
    if (a6 >= 8)
    {
      uint64_t v20 = 4 * a6;
      while (1)
      {
        uint64_t v24 = (int32x4_t *)*v10;
        if ((unint64_t)v12 >= *v10 + v20 || v24 >= (int32x4_t *)&v12->i8[v20])
        {
          uint64_t v26 = v24 + 1;
          uint64_t v27 = a6 & 0xFFFFFFF8;
          unint64_t v28 = v12 + 1;
          do
          {
            int32x4_t v29 = vaddq_s32(*v28, *v26);
            v28[-1] = vaddq_s32(v28[-1], v26[-1]);
            int32x4_t *v28 = v29;
            v26 += 2;
            v28 += 2;
            v27 -= 8;
          }
          while (v27);
          uint64_t v30 = a6 & 0xFFFFFFF8;
          if (v30 == a6) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v30 = 0;
        }
        uint64_t v31 = &v24->i32[v30];
        uint64_t v32 = &v12->i32[v30];
        uint64_t v33 = a6 - v30;
        do
        {
          int v34 = *v31++;
          *v32++ += v34;
          --v33;
        }
        while (v33);
LABEL_23:
        int v23 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v23;
        ++v10;
        if (v23 >= *(_DWORD *)(a1 + 8) - 1) {
          goto LABEL_38;
        }
      }
    }
    do
    {
      int v22 = (int32x4_t *)*v10;
      v12->i32[0] += *(_DWORD *)*v10;
      if (a6 != 1)
      {
        v12->i32[1] += v22->i32[1];
        if (a6 != 2)
        {
          v12->i32[2] += v22->i32[2];
          if (a6 != 3)
          {
            v12->i32[3] += v22->i32[3];
            if (a6 != 4)
            {
              v12[1].i32[0] += v22[1].i32[0];
              if (a6 != 5)
              {
                v12[1].i32[1] += v22[1].i32[1];
                if (a6 != 6) {
                  v12[1].i32[2] += v22[1].i32[2];
                }
              }
            }
          }
        }
      }
      int v21 = *(_DWORD *)(a1 + 24) + 1;
      *(_DWORD *)(a1 + 24) = v21;
      ++v10;
    }
    while (v21 < *(_DWORD *)(a1 + 8) - 1);
  }
LABEL_38:
  if (!a5) {
    return;
  }
  int v35 = a5 - 1;
  unint64_t v36 = (a6 - 2);
  uint64_t v37 = a4;
  if (v170 != 1.0)
  {
    uint64_t v38 = 4 * a6;
    unint64_t v39 = (unint64_t)v12->u64 + v38;
    if ((int)v36 <= 1) {
      unint64_t v40 = 1;
    }
    else {
      unint64_t v40 = (int)v36;
    }
    uint64_t v41 = ((4 * v40) & 0x1FFFFFFF8) + 8;
    double v42 = (int32x4_t *)((char *)v12 + v41);
    uint64_t v168 = (v40 >> 1) + 1;
    uint64_t v43 = a3 + 1;
    while (1)
    {
      int v44 = v35;
      unint64_t v45 = (int32x4_t *)*v10;
      unint64_t v46 = v10[1 - *(int *)(a1 + 8)];
      if (a6 < 2)
      {
        uint64_t v47 = 0;
        if (a6 <= 0) {
          goto LABEL_44;
        }
        goto LABEL_70;
      }
      if (v40 < 6) {
        break;
      }
      uint64_t v48 = 0;
      BOOL v50 = (unint64_t)v12 < v46 + v41 && v46 < (unint64_t)v42;
      if (v45 < v42 && v12 < (int32x4_t *)&v45->i8[v41]) {
        goto LABEL_66;
      }
      double v52 = v170;
      if (v50) {
        goto LABEL_67;
      }
      uint64_t v53 = v168 & 0x7FFFFFFC;
      float64x2_t v54 = (int32x4_t *)v10[1 - *(int *)(a1 + 8)];
      float64x2_t v55 = a3;
      uint64_t v56 = (int32x4_t *)*v10;
      int v57 = v12;
      do
      {
        int32x4_t v58 = *v56;
        int32x4_t v59 = v56[1];
        v56 += 2;
        int32x4_t v60 = vaddq_s32(v59, v57[1]);
        int32x4_t v61 = vaddq_s32(v58, *v57);
        int32x4_t v62 = vuzp1q_s32(v61, v60);
        int32x4_t v63 = vuzp2q_s32(v61, v60);
        v64.i64[0] = v62.i32[0];
        v64.i64[1] = v62.i32[1];
        float64x2_t v65 = vcvtq_f64_s64(v64);
        v64.i64[0] = v62.i32[2];
        v64.i64[1] = v62.i32[3];
        float64x2_t v66 = vcvtq_f64_s64(v64);
        v173.val[0] = vmulq_n_f64(v65, v170);
        v64.i64[0] = v63.i32[0];
        v64.i64[1] = v63.i32[1];
        v173.val[1] = vmulq_n_f64(vcvtq_f64_s64(v64), v170);
        v175.val[0] = vmulq_n_f64(v66, v170);
        v64.i64[0] = v63.i32[2];
        v64.i64[1] = v63.i32[3];
        uint64_t v67 = v55;
        vst2q_f64(v67, v173);
        v67 += 4;
        v175.val[1] = vmulq_n_f64(vcvtq_f64_s64(v64), v170);
        vst2q_f64(v67, v175);
        int32x4_t v69 = *v54;
        int32x4_t v68 = v54[1];
        v54 += 2;
        *int v57 = vsubq_s32(v61, v69);
        v57[1] = vsubq_s32(v60, v68);
        v57 += 2;
        v55 += 8;
        v53 -= 4;
      }
      while (v53);
      uint64_t v48 = 2 * (v168 & 0x7FFFFFFC);
      if (v168 != (v168 & 0x7FFFFFFC)) {
        goto LABEL_67;
      }
LABEL_69:
      uint64_t v47 = v48;
      if ((int)v48 >= a6) {
        goto LABEL_44;
      }
LABEL_70:
      unint64_t v78 = a6 - v47;
      if (v78 < 8
        || ((v79 = 4 * v47, float64x2_t v80 = &v12->i32[v47], (unint64_t)v80 < v46 + v38)
          ? (BOOL v81 = v46 + 4 * v47 >= v39)
          : (BOOL v81 = 1),
            v81 ? (char v82 = 0) : (char v82 = 1),
            (unint64_t)v45 + 4 * v47 < v39 ? (BOOL v83 = v80 >= &v45->i32[(unint64_t)v38 / 4]) : (BOOL v83 = 1),
            !v83 || (v82 & 1) != 0))
      {
        uint64_t v84 = v47;
        double v90 = v170;
      }
      else
      {
        uint64_t v84 = (v78 & 0xFFFFFFFFFFFFFFFCLL) + v47;
        double v85 = (int32x4_t *)((char *)v12 + v79);
        float v86 = (int32x4_t *)((char *)v45 + v79);
        uint64_t v87 = v47;
        uint64_t v88 = (int32x4_t *)(v46 + v79);
        unint64_t v89 = v78 & 0xFFFFFFFFFFFFFFFCLL;
        double v90 = v170;
        do
        {
          int32x4_t v91 = *v86++;
          int32x4_t v92 = vaddq_s32(v91, *v85);
          v93.i64[0] = v92.i32[2];
          v93.i64[1] = v92.i32[3];
          float64x2_t v94 = vcvtq_f64_s64(v93);
          v93.i64[0] = v92.i32[0];
          v93.i64[1] = v92.i32[1];
          uint64_t v95 = (float64x2_t *)&a3[v87];
          *uint64_t v95 = vmulq_n_f64(vcvtq_f64_s64(v93), v170);
          v95[1] = vmulq_n_f64(v94, v170);
          int32x4_t v96 = *v88++;
          *v85++ = vsubq_s32(v92, v96);
          v87 += 4;
          v89 -= 4;
        }
        while (v89);
        if (v78 == (v78 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_44;
        }
      }
      do
      {
        int v97 = v45->i32[v84] + v12->i32[v84];
        a3[v84] = v90 * (double)v97;
        v12->i32[v84] = v97 - *(_DWORD *)(v46 + 4 * v84);
        ++v84;
      }
      while (a6 != v84);
LABEL_44:
      a3 = (double *)((char *)a3 + v37);
      ++v10;
      int v35 = v44 - 1;
      uint64_t v43 = (double *)((char *)v43 + v37);
      if (!v44) {
        return;
      }
    }
    uint64_t v48 = 0;
LABEL_66:
    double v52 = v170;
LABEL_67:
    char v70 = &v45->i32[v48 + 1];
    BOOL v71 = &v43[v48];
    uint64_t v72 = (int *)(v46 + 4 * v48 + 4);
    uint64_t v73 = &v12->i32[v48 + 1];
    do
    {
      int v74 = *(v70 - 1) + *(v73 - 1);
      int v75 = *v70 + *v73;
      *(v71 - 1) = v52 * (double)v74;
      double *v71 = v52 * (double)v75;
      int v76 = v74 - *(v72 - 1);
      int v77 = *v72;
      v72 += 2;
      v48 += 2;
      v70 += 2;
      *(v73 - 1) = v76;
      *uint64_t v73 = v75 - v77;
      v71 += 2;
      v73 += 2;
    }
    while (v48 <= (int)v36);
    goto LABEL_69;
  }
  if (a6 >= 2)
  {
    unint64_t v102 = (v36 & 0xFFFFFFFE) + 3;
    if (v102 <= a6) {
      unint64_t v102 = a6;
    }
    uint64_t v103 = (4 * (a6 - 2)) & 0x3FFFFFFF8;
    unint64_t v171 = 4 * v102 - v103;
    unint64_t v104 = v102 - (v36 & 0xFFFFFFFE) - 2;
    uint64_t v105 = v103 + 8;
    uint64_t v106 = (int32x4_t *)((char *)&v12->u64[1] + v103);
    uint64_t v169 = (v36 >> 1) + 1;
    unint64_t v167 = v104 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v107 = a3 + 1;
    while (1)
    {
      int v108 = v35;
      uint64_t v109 = (int32x4_t *)*v10;
      unint64_t v110 = v10[1 - *(int *)(a1 + 8)];
      if (v36 < 6) {
        break;
      }
      uint64_t v111 = 0;
      BOOL v127 = (unint64_t)v12 < v110 + v105 && v110 < (unint64_t)v106;
      if (v109 < v106 && v12 < (int32x4_t *)&v109->i8[v105])
      {
        uint64_t v113 = 2;
        unint64_t v112 = 0;
LABEL_101:
        uint64_t v114 = v111 - 1;
        uint64_t v115 = v113 - 2;
        double v116 = &v107[v112];
        double v117 = &v109->i32[v112 + 1];
        unint64_t v118 = &v12->i32[v112 + 1];
        double v119 = (int *)(v110 + 4 * v112 + 4);
        do
        {
          int v120 = *(v117 - 1) + *(v118 - 1);
          int v121 = *v117 + *v118;
          *(v116 - 1) = (double)v120;
          double *v116 = (double)v121;
          int v122 = v120 - *(v119 - 1);
          int v123 = *v119;
          v119 += 2;
          v112 += 2;
          ++v114;
          v115 += 2;
          v116 += 2;
          *(v118 - 1) = v122;
          __int32 *v118 = v121 - v123;
          v117 += 2;
          v118 += 2;
        }
        while (v112 <= v36);
        goto LABEL_103;
      }
      uint64_t v113 = 2;
      unint64_t v112 = 0;
      if (v127) {
        goto LABEL_101;
      }
      uint64_t v129 = v169 & 0xFFFFFFFC;
      float64x2_t v130 = (int32x4_t *)v10[1 - *(int *)(a1 + 8)];
      float64x2_t v131 = a3;
      float64x2_t v132 = (int32x4_t *)*v10;
      float64x2_t v133 = v12;
      do
      {
        int32x4_t v134 = *v132;
        int32x4_t v135 = v132[1];
        v132 += 2;
        int32x4_t v136 = vaddq_s32(v135, v133[1]);
        int32x4_t v137 = vaddq_s32(v134, *v133);
        int32x4_t v138 = vuzp1q_s32(v137, v136);
        int32x4_t v139 = vuzp2q_s32(v137, v136);
        v140.i64[0] = v138.i32[2];
        v140.i64[1] = v138.i32[3];
        int64x2_t v141 = v140;
        v140.i64[0] = v138.i32[0];
        v140.i64[1] = v138.i32[1];
        v174.val[0] = vcvtq_f64_s64(v140);
        v140.i64[0] = v139.i32[0];
        v140.i64[1] = v139.i32[1];
        v174.val[1] = vcvtq_f64_s64(v140);
        v176.val[0] = vcvtq_f64_s64(v141);
        uint64_t v142 = v131;
        vst2q_f64(v142, v174);
        v142 += 4;
        v140.i64[0] = v139.i32[2];
        v140.i64[1] = v139.i32[3];
        v176.val[1] = vcvtq_f64_s64(v140);
        vst2q_f64(v142, v176);
        int32x4_t v144 = *v130;
        int32x4_t v143 = v130[1];
        v130 += 2;
        *float64x2_t v133 = vsubq_s32(v137, v144);
        v133[1] = vsubq_s32(v136, v143);
        v133 += 2;
        v131 += 8;
        v129 -= 4;
      }
      while (v129);
      uint64_t v111 = v169 & 0xFFFFFFFC;
      uint64_t v114 = v111 - 1;
      uint64_t v113 = (8 * (v111 >> 2)) | 2;
      unint64_t v112 = 2 * v111;
      uint64_t v115 = v112;
      if (v169 != v111) {
        goto LABEL_101;
      }
LABEL_103:
      if ((int)v112 < a6)
      {
        if (v104 >= 8)
        {
          uint64_t v145 = 8 * v114 + 8;
          int v146 = &v12->i8[v145];
          unint64_t v147 = v171 + 8 * v114;
          unint64_t v148 = &v12->i8[v147];
          BOOL v149 = &v109->i8[v145];
          BOOL v150 = &v109->i8[v147];
          unint64_t v151 = v110 + v145;
          BOOL v153 = (unint64_t)v146 < v110 + v147 && v151 < (unint64_t)v148;
          if (v149 >= v148 || v146 >= v150)
          {
            if (v153)
            {
              unint64_t v124 = v115;
            }
            else
            {
              unint64_t v155 = v104 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v124 = v115 + v167;
              uint64_t v156 = 4 * v115;
              unint64_t v157 = (int32x4_t *)((char *)v12 + 4 * v115);
              float64x2_t v158 = (int32x4_t *)((char *)v109 + 4 * v115);
              uint64_t v159 = v115;
              float64x2_t v160 = (int32x4_t *)(v110 + v156);
              do
              {
                int32x4_t v161 = *v158++;
                int32x4_t v162 = vaddq_s32(v161, *v157);
                v163.i64[0] = v162.i32[0];
                v163.i64[1] = v162.i32[1];
                float64x2_t v164 = vcvtq_f64_s64(v163);
                v163.i64[0] = v162.i32[2];
                v163.i64[1] = v162.i32[3];
                int32x4_t v165 = (float64x2_t *)&a3[v159];
                float64x2_t *v165 = v164;
                v165[1] = vcvtq_f64_s64(v163);
                int32x4_t v166 = *v160++;
                *v157++ = vsubq_s32(v162, v166);
                v159 += 4;
                v155 -= 4;
              }
              while (v155);
              if (v104 == v167) {
                goto LABEL_98;
              }
            }
          }
          else
          {
            unint64_t v124 = v115;
          }
        }
        else
        {
          unint64_t v124 = v115;
        }
        do
        {
          int v125 = v109->i32[v124] + v12->i32[v124];
          a3[v124] = (double)v125;
          v12->i32[v124] = v125 - *(_DWORD *)(v110 + 4 * v124);
          ++v124;
        }
        while (v124 < a6);
      }
LABEL_98:
      a3 = (double *)((char *)a3 + v37);
      ++v10;
      int v35 = v108 - 1;
      uint64_t v107 = (double *)((char *)v107 + v37);
      if (!v108) {
        return;
      }
    }
    uint64_t v111 = 0;
    unint64_t v112 = 0;
    uint64_t v113 = 2;
    goto LABEL_101;
  }
  if (a6 == 1)
  {
    int v98 = v12->i32[0];
    unint64_t v99 = v10 + 1;
    do
    {
      int v100 = (_DWORD *)v99[-*(int *)(a1 + 8)];
      int v101 = *(_DWORD *)*(v99 - 1) + v98;
      *a3 = (double)v101;
      int v98 = v101 - *v100;
      v12->i32[0] = v98;
      a3 = (double *)((char *)a3 + a4);
      ++v99;
      --a5;
    }
    while (a5);
  }
}

void sub_100398624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10039863C(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100398648()
{
}

uint64_t sub_10039865C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003986DC(void *a1)
{
  *a1 = off_10049C6A8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  return nullsub_1(a1);
}

void sub_10039873C(void *a1)
{
  *a1 = off_10049C6A8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  nullsub_1(a1);

  operator delete();
}

void sub_1003987B0(uint64_t a1, double **a2, double *a3, int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  int v13 = (double **)(a1 + 32);
  uint64_t v12 = *(double **)(a1 + 32);
  double v181 = *(double *)(a1 + 16);
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 40) - (void)v12) >> 3;
  if (v14 != a6)
  {
    if (a6 <= v14)
    {
      if (a6 < v14) {
        *(void *)(a1 + 40) = &v12[a6];
      }
    }
    else
    {
      sub_100358318(a1 + 32, a6 - v14);
      uint64_t v12 = *v13;
    }
    *(_DWORD *)(a1 + 24) = 0;
    goto LABEL_11;
  }
  int v15 = *(_DWORD *)(a1 + 24);
  if (!v15)
  {
LABEL_11:
    bzero(v12, 8 * a6);
    int v16 = *(_DWORD *)(a1 + 8);
    int v18 = v16 - 1;
    int v19 = *(_DWORD *)(a1 + 24);
    if (v19 >= v16 - 1) {
      goto LABEL_21;
    }
    if (a6 <= 0)
    {
      v10 += (v16 - v19 - 2) + 1;
LABEL_20:
      *(_DWORD *)(a1 + 24) = v18;
      goto LABEL_21;
    }
    if (a6 < 4)
    {
      double v20 = *v12;
      int v21 = ~v19 + v16;
      do
      {
        int v22 = *v10;
        double v20 = **v10 + v20;
        *uint64_t v12 = v20;
        if (a6 != 1)
        {
          v12[1] = v22[1] + v12[1];
          if (a6 != 2) {
            v12[2] = v22[2] + v12[2];
          }
        }
        ++v10;
        --v21;
      }
      while (v21);
      goto LABEL_20;
    }
    uint64_t v164 = a6;
    while (1)
    {
      int32x4_t v165 = (float64x2_t *)*v10;
      if (v12 >= &(*v10)[v164] || v165 >= (float64x2_t *)&v12[v164])
      {
        unint64_t v167 = v165 + 1;
        uint64_t v168 = a6 & 0xFFFFFFFC;
        uint64_t v169 = (float64x2_t *)(v12 + 2);
        do
        {
          float64x2_t v170 = vaddq_f64(*v167, *v169);
          v169[-1] = vaddq_f64(v167[-1], v169[-1]);
          float64x2_t *v169 = v170;
          v167 += 2;
          v169 += 2;
          v168 -= 4;
        }
        while (v168);
        uint64_t v171 = a6 & 0xFFFFFFFC;
        if (v171 == a6) {
          goto LABEL_219;
        }
      }
      else
      {
        uint64_t v171 = 0;
      }
      int16x8_t v172 = &v165->f64[v171];
      float64x2x2_t v173 = &v12[v171];
      uint64_t v174 = a6 - v171;
      do
      {
        double v175 = *v172++;
        *float64x2x2_t v173 = v175 + *v173;
        ++v173;
        --v174;
      }
      while (v174);
LABEL_219:
      ++v19;
      ++v10;
      if (v19 == v18) {
        goto LABEL_20;
      }
    }
  }
  int v16 = *(_DWORD *)(a1 + 8);
  if (v15 != v16 - 1)
  {
    v183[0] = 0;
    v183[1] = 0;
    uint64_t v17 = sub_1002D19D8(v183, 19);
    *(_DWORD *)(v17 + 15) = 825058682;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)"sumCount == ksize-1";
    sub_1002D2278(-215, v183, "operator()", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/smooth.cpp", 228);
  }
  uint64_t v10 = &a2[v16 - 1];
LABEL_21:
  if (!a5) {
    return;
  }
  int v23 = a5 - 1;
  uint64_t v24 = 1 - v16;
  unint64_t v25 = (a6 - 2);
  uint64_t v26 = a4;
  if (v181 != 1.0)
  {
    uint64_t v27 = 0;
    uint64_t v28 = a6;
    float32x4x2_t v180 = &v12[v28];
    if ((int)v25 <= 1) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = (int)v25;
    }
    uint64_t v30 = ((8 * v29) & 0x3FFFFFFF0) + 16;
    float64x2_t v178 = (double *)((char *)v12 + v30);
    uint64_t v177 = (v29 >> 1) + 1;
    uint64_t v31 = a3;
    while (1)
    {
      int v32 = v23;
      uint64_t v33 = v27 * v26;
      int v34 = *v10;
      int v35 = v10[v24];
      if (a6 < 2)
      {
        uint64_t v36 = 0;
        if (a6 > 0) {
          goto LABEL_37;
        }
        goto LABEL_27;
      }
      if (v29 < 0xE) {
        break;
      }
      uint64_t v36 = 0;
      unint64_t v46 = (double *)((char *)a3 + v30 + v33);
      unint64_t v47 = (unint64_t)v35 + v30;
      BOOL v49 = v31 < (double *)((char *)v34 + v30) && v34 < v46;
      BOOL v51 = (unint64_t)v31 < v47 && v35 < v46;
      BOOL v53 = v12 < (double *)((char *)v34 + v30) && v34 < v178;
      BOOL v55 = (unint64_t)v12 < v47 && v35 < v178;
      BOOL v56 = v12 >= v46 || v31 >= v178;
      if (!v56 || v49 || v51 || v53) {
        goto LABEL_33;
      }
      double v37 = v181;
      if (v55) {
        goto LABEL_34;
      }
      uint64_t v57 = 0;
      uint64_t v58 = v177 & 0x7FFFFFFE;
      do
      {
        int32x4_t v59 = (float64x2_t *)&v12[v57];
        float64x2_t v60 = vaddq_f64(*(float64x2_t *)&v12[v57 + 2], *(float64x2_t *)&v34[v57 + 2]);
        float64x2_t v61 = vaddq_f64(*(float64x2_t *)&v12[v57], *(float64x2_t *)&v34[v57]);
        int32x4_t v62 = (float64x2_t *)&v31[v57];
        float64x2_t *v62 = vmulq_n_f64(v61, v181);
        v62[1] = vmulq_n_f64(v60, v181);
        float64x2_t v63 = vsubq_f64(v60, *(float64x2_t *)&v35[v57 + 2]);
        *int32x4_t v59 = vsubq_f64(v61, *(float64x2_t *)&v35[v57]);
        v59[1] = v63;
        v57 += 4;
        v58 -= 2;
      }
      while (v58);
      uint64_t v36 = 2 * (v177 & 0x7FFFFFFE);
      if (v177 != (v177 & 0x7FFFFFFE)) {
        goto LABEL_34;
      }
LABEL_36:
      uint64_t v36 = v36;
      if ((int)v36 < a6)
      {
LABEL_37:
        unint64_t v44 = a6 - v36;
        if (v44 >= 0xE)
        {
          uint64_t v64 = v24;
          float64x2_t v65 = a3;
          unint64_t v66 = v29;
          uint64_t v67 = v65;
          int32x4_t v68 = (double *)((char *)&v65[v28] + v33);
          uint64_t v69 = v36;
          unint64_t v70 = (unint64_t)&v31[v36];
          BOOL v71 = &v12[v36];
          uint64_t v72 = &v34[v36];
          unint64_t v73 = (unint64_t)&v35[v36];
          unint64_t v74 = (unint64_t)&v35[v28];
          BOOL v76 = v70 < (unint64_t)&v34[v28] && v72 < v68;
          BOOL v78 = v70 < v74 && v73 < (unint64_t)v68;
          BOOL v80 = v71 < &v34[v28] && v72 < v180;
          BOOL v82 = (unint64_t)v71 < v74 && v73 < (unint64_t)v180;
          if (v71 >= v68 || v70 >= (unint64_t)v180)
          {
            unint64_t v29 = v66;
            if (!v76)
            {
              a3 = v67;
              if (v78)
              {
                double v45 = v181;
                uint64_t v24 = v64;
              }
              else
              {
                uint64_t v24 = v64;
                if (v80)
                {
                  double v45 = v181;
                }
                else if (v82)
                {
                  double v45 = v181;
                }
                else
                {
                  v36 += v44 & 0xFFFFFFFFFFFFFFFELL;
                  unint64_t v84 = v44 & 0xFFFFFFFFFFFFFFFELL;
                  double v45 = v181;
                  do
                  {
                    float64x2_t v85 = vaddq_f64(*(float64x2_t *)&v12[v69], *(float64x2_t *)&v34[v69]);
                    *(float64x2_t *)&v31[v69] = vmulq_n_f64(v85, v181);
                    *(float64x2_t *)&v12[v69] = vsubq_f64(v85, *(float64x2_t *)&v35[v69]);
                    v69 += 2;
                    v84 -= 2;
                  }
                  while (v84);
                  if (v44 == (v44 & 0xFFFFFFFFFFFFFFFELL)) {
                    goto LABEL_27;
                  }
                }
              }
              goto LABEL_118;
            }
            double v45 = v181;
          }
          else
          {
            double v45 = v181;
            unint64_t v29 = v66;
          }
          a3 = v67;
          uint64_t v24 = v64;
        }
        else
        {
          double v45 = v181;
        }
        do
        {
LABEL_118:
          uint64_t v86 = v36;
          double v87 = v12[v36] + v34[v36];
          v31[v86] = v45 * v87;
          v12[v86] = v87 - v35[v36++];
        }
        while (a6 != v36);
      }
LABEL_27:
      uint64_t v31 = (double *)((char *)v31 + v26);
      ++v10;
      int v23 = v32 - 1;
      ++v27;
      if (!v32) {
        return;
      }
    }
    uint64_t v36 = 0;
LABEL_33:
    double v37 = v181;
LABEL_34:
    uint64_t v38 = v36;
    do
    {
      unint64_t v39 = &v12[v38];
      double v40 = v12[v38] + v34[v38];
      double v41 = v12[v38 + 1] + v34[v38 + 1];
      double v42 = &v31[v38];
      double *v42 = v37 * v40;
      v42[1] = v37 * v41;
      double v43 = v41 - v35[v38 + 1];
      *unint64_t v39 = v40 - v35[v38];
      v39[1] = v43;
      v36 += 2;
      v38 += 2;
    }
    while (v36 <= (int)v25);
    goto LABEL_36;
  }
  if (a6 >= 2)
  {
    uint64_t v92 = 0;
    if ((unint64_t)(v25 & 0xFFFFFFFE) + 3 <= a6) {
      uint64_t v93 = a6;
    }
    else {
      uint64_t v93 = (v25 & 0xFFFFFFFE) + 3;
    }
    uint64_t v94 = (8 * (a6 - 2)) & 0x7FFFFFFF0;
    uint64_t v182 = 8 * v93 - v94;
    unint64_t v95 = v93 - (v25 & 0xFFFFFFFE) - 2;
    uint64_t v96 = v94 + 16;
    int v97 = (double *)((char *)v12 + v94 + 16);
    uint64_t v98 = (v25 >> 1) + 1;
    uint64_t v99 = v98 & 0xFFFFFFFE;
    uint64_t v179 = (2 * v98) | 2;
    unint64_t v176 = v95 & 0xFFFFFFFFFFFFFFFCLL;
    int v100 = v12 + 2;
    int v101 = a3;
    while (1)
    {
      int v102 = v23;
      uint64_t v103 = v92 * v26;
      unint64_t v104 = *v10;
      uint64_t v105 = v10[v24];
      if (v25 < 0xE) {
        break;
      }
      uint64_t v106 = 0;
      uint64_t v109 = (double *)((char *)a3 + v96 + v103);
      unint64_t v110 = (unint64_t)v105 + v96;
      BOOL v112 = v101 < (double *)((char *)v104 + v96) && v104 < v109;
      BOOL v114 = (unint64_t)v101 < v110 && v105 < v109;
      BOOL v116 = v12 < (double *)((char *)v104 + v96) && v104 < v97;
      BOOL v118 = (unint64_t)v12 < v110 && v105 < v97;
      BOOL v119 = v12 >= v109 || v101 >= v97;
      if (!v119 || v112 || v114 || v116)
      {
        uint64_t v108 = 2;
        unint64_t v107 = 0;
LABEL_170:
        uint64_t v128 = v106 - 1;
        uint64_t v127 = v108 - 2;
        uint64_t v129 = v107;
        do
        {
          float64x2_t v130 = &v12[v129];
          double v131 = v12[v129] + v104[v129];
          double v132 = v12[v129 + 1] + v104[v129 + 1];
          float64x2_t v133 = &v101[v129];
          *float64x2_t v133 = v131;
          v133[1] = v132;
          double v134 = v132 - v105[v129 + 1];
          v107 += 2;
          *float64x2_t v130 = v131 - v105[v129];
          v130[1] = v134;
          ++v128;
          v127 += 2;
          v129 += 2;
        }
        while (v107 <= v25);
        goto LABEL_172;
      }
      uint64_t v108 = 2;
      unint64_t v107 = 0;
      if (v118) {
        goto LABEL_170;
      }
      uint64_t v120 = 0;
      uint64_t v121 = v99;
      do
      {
        int v122 = (float64x2_t *)&v12[v120];
        float64x2_t v123 = vaddq_f64(*(float64x2_t *)&v12[v120], *(float64x2_t *)&v104[v120]);
        float64x2_t v124 = vaddq_f64(*(float64x2_t *)&v12[v120 + 2], *(float64x2_t *)&v104[v120 + 2]);
        int v125 = (float64x2_t *)&v101[v120];
        *int v125 = v123;
        v125[1] = v124;
        float64x2_t v126 = vsubq_f64(v124, *(float64x2_t *)&v105[v120 + 2]);
        *int v122 = vsubq_f64(v123, *(float64x2_t *)&v105[v120]);
        v122[1] = v126;
        v120 += 4;
        v121 -= 2;
      }
      while (v121);
      uint64_t v106 = v99;
      uint64_t v127 = 2 * v99;
      uint64_t v108 = v179;
      unint64_t v107 = 2 * v99;
      uint64_t v128 = v99 - 1;
      if ((v25 >> 1) + 1 != v99) {
        goto LABEL_170;
      }
LABEL_172:
      if ((int)v107 < a6)
      {
        if (v95 >= 0x12)
        {
          unint64_t v138 = (unint64_t)&a3[2 * v128 + 2] + v103;
          unint64_t v139 = (unint64_t)&a3[2 * v128] + v182 + v103;
          uint64_t v140 = 16 * v128 + 16;
          int64x2_t v141 = (char *)v12 + v140;
          uint64_t v142 = v182 + 16 * v128;
          int32x4_t v143 = (char *)v12 + v142;
          unint64_t v144 = (unint64_t)v104 + v140;
          unint64_t v145 = (unint64_t)v104 + v142;
          unint64_t v146 = (unint64_t)v105 + v140;
          unint64_t v147 = (unint64_t)v105 + v142;
          BOOL v149 = v138 < v145 && v144 < v139;
          BOOL v151 = v138 < v147 && v146 < v139;
          BOOL v153 = (unint64_t)v141 < v145 && v144 < (unint64_t)v143;
          BOOL v155 = (unint64_t)v141 < v147 && v146 < (unint64_t)v143;
          if ((unint64_t)v141 >= v139 || v138 >= (unint64_t)v143)
          {
            if (v149)
            {
              unint64_t v135 = v127;
            }
            else if (v151)
            {
              unint64_t v135 = v127;
            }
            else if (v153)
            {
              unint64_t v135 = v127;
            }
            else if (v155)
            {
              unint64_t v135 = v127;
            }
            else
            {
              unint64_t v157 = v95 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v135 = v127 + v176;
              uint64_t v158 = v127;
              do
              {
                uint64_t v159 = (float64x2_t *)&v100[v158];
                float64x2_t v160 = vaddq_f64(*(float64x2_t *)&v12[v158], *(float64x2_t *)&v104[v158]);
                float64x2_t v161 = vaddq_f64(*(float64x2_t *)&v100[v158], *(float64x2_t *)&v104[v158 + 2]);
                int32x4_t v162 = (float64x2_t *)&v101[v158];
                *int32x4_t v162 = v160;
                v162[1] = v161;
                float64x2_t v163 = vsubq_f64(v161, *(float64x2_t *)&v105[v158 + 2]);
                v159[-1] = vsubq_f64(v160, *(float64x2_t *)&v105[v158]);
                *uint64_t v159 = v163;
                v158 += 4;
                v157 -= 4;
              }
              while (v157);
              if (v95 == v176) {
                goto LABEL_129;
              }
            }
          }
          else
          {
            unint64_t v135 = v127;
          }
        }
        else
        {
          unint64_t v135 = v127;
        }
        do
        {
          uint64_t v136 = v135;
          double v137 = v12[v135] + v104[v135];
          v101[v136] = v137;
          v12[v136] = v137 - v105[v135++];
        }
        while (v135 < a6);
      }
LABEL_129:
      int v101 = (double *)((char *)v101 + v26);
      ++v10;
      int v23 = v102 - 1;
      ++v92;
      if (!v102) {
        return;
      }
    }
    uint64_t v106 = 0;
    unint64_t v107 = 0;
    uint64_t v108 = 2;
    goto LABEL_170;
  }
  if (a6 == 1)
  {
    double v88 = *v12;
    do
    {
      unint64_t v89 = *(double **)((char *)v10 + 8 - 8 * v16);
      double v90 = *v10++;
      double v91 = v88 + *v90;
      *a3 = v91;
      double v88 = v91 - *v89;
      *uint64_t v12 = v88;
      a3 = (double *)((char *)a3 + a4);
      --a5;
    }
    while (a5);
  }
}

void sub_10039911C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100399134(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_100399140()
{
}

uint64_t sub_100399154(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

double sub_1003991D4(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  sub_1002D6AE8(v158, &off_10049C720);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v150 = *(_OWORD *)v10;
    long long v151 = v11;
    long long v152 = *(_OWORD *)(v10 + 32);
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t v153 = *(void *)(v10 + 48);
    uint64_t v154 = v12;
    BOOL v155 = (int32x2_t *)&v150 + 1;
    uint64_t v156 = v157;
    v157[0] = 0;
    v157[1] = 0;
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v150) = 0;
      sub_1002931A8((uint64_t)&v150, v10);
    }
    else
    {
      int v13 = *(void **)(v10 + 72);
      unint64_t v14 = v156;
      *(void *)uint64_t v156 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v150);
  }
  unsigned int v15 = a3 & 0xFFFFFFF8;
  if ((a3 & 0xFFFFFFF8) == 8)
  {
    if ((v150 & 0xFFF) != 0)
    {
      uint64_t v160 = 0;
      float64x2_t v161 = 0;
      qmemcpy((void *)sub_1002D19D8(&v160, 55), "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 55);
      sub_1002D2278(-215, &v160, "threshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1406);
    }
    unsigned __int32 v16 = v155->u32[1];
    if ((v150 & 0x4000) != 0) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v155->u32[0];
    }
    if ((v150 & 0x4000) != 0) {
      unint64_t v18 = v155->i32[0] * v16;
    }
    else {
      unint64_t v18 = v16;
    }
    if ((v150 & 0x4000) != 0) {
      int v19 = v155->i32[0] * v16;
    }
    else {
      int v19 = v157[0];
    }
    bzero(&v160, 0x400uLL);
    if ((int)v17 >= 1)
    {
      uint64_t v20 = v151;
      unint64_t v21 = (v18 - 4);
      if ((int)v18 >= 4)
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          for (unint64_t j = 0; j <= v21; j += 4)
          {
            uint64_t v106 = *(unsigned __int8 *)(v20 + j + 1);
            ++*((_DWORD *)&v160 + *(unsigned __int8 *)(v20 + j));
            ++*((_DWORD *)&v160 + v106);
            uint64_t v107 = 4 * *(unsigned __int8 *)(v20 + j + 2);
            uint64_t v108 = *(unsigned __int8 *)(v20 + j + 3);
            ++*(_DWORD *)((char *)&v160 + v107);
            ++*((_DWORD *)&v160 + v108);
          }
          unint64_t v109 = (v21 & 0xFFFFFFFC) + 4;
          if ((int)v18 > (int)j)
          {
            do
              ++*((_DWORD *)&v160 + *(unsigned __int8 *)(v20 + v109++));
            while (v109 < v18);
          }
          v20 += v19;
        }
      }
      else if ((int)v18 >= 1)
      {
        int v22 = (unsigned __int8 *)(v151 + 2);
        uint64_t v23 = v17;
        do
        {
          ++*((_DWORD *)&v160 + *(v22 - 2));
          if (v18 != 1)
          {
            ++*((_DWORD *)&v160 + *(v22 - 1));
            if (v18 != 2) {
              ++*((_DWORD *)&v160 + *v22);
            }
          }
          v22 += v19;
          --v23;
        }
        while (v23);
      }
    }
    uint64_t v110 = 0;
    double v111 = 0.0;
    do
    {
      double v111 = v111
           + (double)(int)v110 * (double)*((int *)&v160 + v110)
           + (double)((int)v110 + 1) * (double)*((int *)&v160 + v110 + 1);
      v110 += 2;
    }
    while (v110 != 256);
    uint64_t v112 = 0;
    double v113 = 1.0 / (double)((int)v18 * (int)v17);
    double v114 = v113 * v111;
    a4 = 0.0;
    double v115 = 0.0;
    double v116 = 0.0;
    double v117 = 0.0;
    do
    {
      double v118 = v113 * (double)*((int *)&v160 + v112);
      double v116 = v116 * v117;
      double v117 = v117 + v118;
      double v119 = 1.0 - v117;
      if (1.0 - v117 >= v117) {
        double v120 = v117;
      }
      else {
        double v120 = 1.0 - v117;
      }
      if (v120 >= 0.00000011920929)
      {
        double v121 = v117 >= v119 ? v117 : 1.0 - v117;
        if (v121 <= 0.999999881)
        {
          double v116 = (v116 + (double)(int)v112 * v118) / v117;
          double v122 = (v116 - (v114 - v117 * v116) / v119) * (v117 * v119 * (v116 - (v114 - v117 * v116) / v119));
          if (v122 > v115)
          {
            double v115 = v122;
            a4 = (double)(int)v112;
          }
        }
      }
      ++v112;
    }
    while (v112 != 256);
    goto LABEL_82;
  }
  if (v15 == 16)
  {
    __int16 v24 = v150;
    if ((v150 & 0xFFF) != 0)
    {
      uint64_t v160 = 0;
      float64x2_t v161 = 0;
      qmemcpy((void *)sub_1002D19D8(&v160, 55), "src.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 55);
      sub_1002D2278(-215, &v160, "threshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1411);
    }
    signed int v25 = v157[0];
    unsigned __int32 v26 = v155->u32[1];
    unsigned int v27 = v155->i32[0] * v26;
    if ((v150 & 0x4000) != 0) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = v155->u32[0];
    }
    if ((v150 & 0x4000) != 0) {
      uint64_t v29 = v27;
    }
    else {
      uint64_t v29 = v26;
    }
    bzero(&v160, 0x400uLL);
    if ((int)v28 < 1)
    {
LABEL_53:
      uint64_t v37 = 0;
      while (*((int *)&v160 + v37) <= 0)
      {
        if (++v37 == 256)
        {
          int v38 = 0;
          goto LABEL_60;
        }
      }
      if (v37) {
        int v38 = v37 - 1;
      }
      else {
        int v38 = 0;
      }
LABEL_60:
      unsigned int v39 = 255;
      while (*((int *)&v160 + v39) <= 0)
      {
        if (!--v39)
        {
          unsigned int v39 = 1;
          goto LABEL_66;
        }
      }
      if (v39 <= 0xFE) {
        ++v39;
      }
LABEL_66:
      uint64_t v40 = 0;
      int v41 = 0;
      int v42 = 0;
      do
      {
        if (*((_DWORD *)&v160 + v40) > v41)
        {
          int v42 = v40;
          int v41 = *((_DWORD *)&v160 + v40);
        }
        ++v40;
      }
      while (v40 != 256);
      int v43 = v42 - v38;
      int v44 = v39 - v42;
      if (v42 - v38 < (int)(v39 - v42))
      {
        unint64_t v45 = 0;
        unint64_t v46 = 255;
        do
        {
          int v47 = *((_DWORD *)&v160 + v45);
          *((_DWORD *)&v160 + v45) = *((_DWORD *)&v160 + v46);
          *((_DWORD *)&v160 + v46) = v47;
          ++v45;
          --v46;
        }
        while (v45 < v46);
        int v38 = 255 - v39;
        int v42 = 255 - v42;
      }
      double v48 = (double)v38;
      if (v38 < v42)
      {
        double v49 = (double)v41;
        double v50 = (double)(v38 - v42);
        uint64_t v51 = v38;
        uint64_t v52 = v42;
        double v53 = 0.0;
        do
        {
          uint64_t v54 = v51 + 1;
          double v55 = (double)((int)v51 + 1);
          if (v50 * (double)*((int *)&v160 + v51 + 1) + v49 * v55 > v53)
          {
            double v48 = (double)((int)v51 + 1);
            double v53 = v50 * (double)*((int *)&v160 + v51 + 1) + v49 * v55;
          }
          ++v51;
        }
        while (v52 != v54);
      }
      double v56 = v48 + -1.0;
      if (v43 >= v44) {
        a4 = v56;
      }
      else {
        a4 = 255.0 - v56;
      }
      goto LABEL_82;
    }
    uint64_t v30 = 0;
    if ((v24 & 0x4000) != 0) {
      signed int v31 = v27;
    }
    else {
      signed int v31 = v25;
    }
    uint64_t v32 = v151;
    while ((int)v29 < 4)
    {
      uint64_t v33 = 0;
      if ((int)v29 > 0) {
        goto LABEL_51;
      }
LABEL_44:
      ++v30;
      v32 += v31;
      if (v30 == v28) {
        goto LABEL_53;
      }
    }
    uint64_t v33 = 0;
    do
    {
      uint64_t v34 = *(unsigned __int8 *)(v32 + v33 + 1);
      ++*((_DWORD *)&v160 + *(unsigned __int8 *)(v32 + v33));
      ++*((_DWORD *)&v160 + v34);
      uint64_t v35 = 4 * *(unsigned __int8 *)(v32 + v33 + 2);
      uint64_t v36 = *(unsigned __int8 *)(v32 + v33 + 3);
      ++*(_DWORD *)((char *)&v160 + v35);
      ++*((_DWORD *)&v160 + v36);
      v33 += 4;
    }
    while (v33 <= (int)v29 - 4);
    uint64_t v33 = v33;
    if ((int)v33 >= (int)v29) {
      goto LABEL_44;
    }
    do
LABEL_51:
      ++*((_DWORD *)&v160 + *(unsigned __int8 *)(v32 + v33++));
    while (v29 != v33);
    goto LABEL_44;
  }
  if (v15 == 24)
  {
    uint64_t v160 = 0;
    float64x2_t v161 = 0;
    qmemcpy((void *)sub_1002D19D8(&v160, 57), "automatic_thresh != (CV_THRESH_OTSU | CV_THRESH_TRIANGLE)", 57);
    sub_1002D2278(-215, &v160, "threshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1403);
  }
LABEL_82:
  int32x2_t v149 = vrev64_s32(*v155);
  sub_10029E6D4(a2, &v149, v150 & 0xFFF, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v57 = *(void *)(a2 + 8);
    long long v58 = *(_OWORD *)(v57 + 16);
    long long v141 = *(_OWORD *)v57;
    long long v142 = v58;
    long long v143 = *(_OWORD *)(v57 + 32);
    uint64_t v59 = *(void *)(v57 + 56);
    uint64_t v144 = *(void *)(v57 + 48);
    uint64_t v145 = v59;
    unint64_t v146 = (char *)&v141 + 8;
    unint64_t v147 = v148;
    v148[0] = 0;
    v148[1] = 0;
    if (v59) {
      atomic_fetch_add((atomic_uint *volatile)(v59 + 20), 1u);
    }
    if (*(int *)(v57 + 4) > 2)
    {
      DWORD1(v141) = 0;
      sub_1002931A8((uint64_t)&v141, v57);
    }
    else
    {
      float64x2_t v60 = *(void **)(v57 + 72);
      float64x2_t v61 = v147;
      *(void *)unint64_t v147 = *v60;
      v61[1] = v60[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v141);
  }
  unsigned int v62 = a3 & 7;
  switch(v150 & 7)
  {
    case 0:
      int v63 = (int)a4 - (a4 < (double)(int)a4);
      a4 = (double)v63;
      uint64_t v64 = (uint64_t)rint(a5);
      if (v62 == 2) {
        LODWORD(v64) = v63;
      }
      int v65 = v64 & ~((int)v64 >> 31);
      if (v65 >= 255) {
        int v65 = 255;
      }
      if (v63 < 0xFF)
      {
        unsigned int v66 = v65;
        goto LABEL_103;
      }
      if (v62 >= 2)
      {
        BOOL v93 = v62 != 3 || v63 <= 254;
        BOOL v94 = !v93;
        BOOL v95 = v62 == 4 || v62 == 2;
        BOOL v96 = v95 && v63 < 0;
        if (!v96 && !v94) {
          goto LABEL_239;
        }
      }
      if (v62 == 1)
      {
        if (v63 <= 254) {
          int v98 = 0;
        }
        else {
          int v98 = v65;
        }
      }
      else if (v62)
      {
        int v98 = 0;
      }
      else if (v63 <= 254)
      {
        int v98 = v65;
      }
      else
      {
        int v98 = 0;
      }
      goto LABEL_256;
    case 2:
      int v67 = (int)a4 - (a4 < (double)(int)a4);
      a4 = (double)v67;
      uint64_t v68 = (uint64_t)rint(a5);
      if (v62 == 2) {
        LODWORD(v68) = v67;
      }
      int v69 = v68 & ~((int)v68 >> 31);
      if (v69 >= 0xFFFF) {
        int v69 = 0xFFFF;
      }
      if (v67 >= 0xFFFF)
      {
        if (v62 >= 2)
        {
          if (v62 != 4 && v62 != 2)
          {
            if (v62 != 3 || v67 <= 65534)
            {
LABEL_239:
              LODWORD(v160) = 33619968;
              float64x2_t v161 = (double *)&v141;
              uint64_t v162 = 0;
              sub_10025401C((uint64_t)&v150, (uint64_t)&v160);
              goto LABEL_145;
            }
            goto LABEL_255;
          }
          if ((v67 & 0x80000000) == 0) {
            goto LABEL_239;
          }
        }
        if (v62 == 1)
        {
          if (v67 <= 65534) {
            int v98 = 0;
          }
          else {
            int v98 = v69;
          }
          goto LABEL_256;
        }
        if (!v62)
        {
          if (v67 <= 65534) {
            int v98 = v69;
          }
          else {
            int v98 = 0;
          }
LABEL_256:
          double v140 = (double)v98;
          LODWORD(v160) = -1056833530;
          float64x2_t v161 = &v140;
          uint64_t v162 = 0x100000001;
          float64x2_t v123 = sub_1002A02C4();
          sub_100255630((uint64_t)&v141, (uint64_t)&v160, (uint64_t)v123);
          goto LABEL_145;
        }
LABEL_255:
        int v98 = 0;
        goto LABEL_256;
      }
      unsigned int v66 = (unsigned __int16)v69;
LABEL_103:
      a5 = (double)v66;
LABEL_112:
      LODWORD(v140) = 0;
      HIDWORD(v140) = DWORD2(v141);
      long long v132 = v150;
      long long v133 = v151;
      long long v134 = v152;
      uint64_t v135 = v153;
      uint64_t v136 = v154;
      double v137 = (char *)&v132 + 8;
      unint64_t v138 = v139;
      v139[0] = 0;
      v139[1] = 0;
      if (v154)
      {
        atomic_fetch_add((atomic_uint *volatile)(v154 + 20), 1u);
        if (SDWORD1(v150) <= 2)
        {
LABEL_114:
          uint64_t v72 = v156;
          unint64_t v73 = v138;
          *(void *)unint64_t v138 = *(void *)v156;
          v73[1] = v72[1];
          goto LABEL_117;
        }
      }
      else if (SDWORD1(v150) <= 2)
      {
        goto LABEL_114;
      }
      DWORD1(v132) = 0;
      sub_1002931A8((uint64_t)&v132, (uint64_t)&v150);
LABEL_117:
      long long v124 = v141;
      long long v125 = v142;
      long long v126 = v143;
      uint64_t v127 = v144;
      uint64_t v128 = v145;
      uint64_t v129 = (char *)&v124 + 8;
      float64x2_t v130 = v131;
      v131[0] = 0;
      v131[1] = 0;
      if (!v145)
      {
        if (SDWORD1(v141) <= 2) {
          goto LABEL_119;
        }
LABEL_121:
        DWORD1(v124) = 0;
        sub_1002931A8((uint64_t)&v124, (uint64_t)&v141);
        goto LABEL_122;
      }
      atomic_fetch_add((atomic_uint *volatile)(v145 + 20), 1u);
      if (SDWORD1(v141) > 2) {
        goto LABEL_121;
      }
LABEL_119:
      unint64_t v74 = v147;
      int v75 = v130;
      *(void *)float64x2_t v130 = *(void *)v147;
      v75[1] = v74[1];
LABEL_122:
      sub_10039A6D0((uint64_t)&v160, (uint64_t)&v132, (uint64_t)&v124, v62, a4, a5);
      if (SDWORD1(v141) >= 3)
      {
        int v77 = (int *)(v146 + 4);
        uint64_t v78 = 1;
        uint64_t v79 = DWORD1(v141) & 0xFFFFFFFE;
        uint64_t v80 = 1;
        do
        {
          v78 *= *(v77 - 1);
          v80 *= *v77;
          v77 += 2;
          v79 -= 2;
        }
        while (v79);
        uint64_t v76 = v80 * v78;
        unint64_t v81 = DWORD1(v141) - (unint64_t)(DWORD1(v141) & 0xFFFFFFFE);
        if (v81)
        {
          BOOL v82 = &v146[(4 * DWORD1(v141)) & 0x3FFFFFFF8];
          do
          {
            uint64_t v83 = *(int *)v82;
            v82 += 4;
            v76 *= v83;
            --v81;
          }
          while (v81);
        }
      }
      else
      {
        uint64_t v76 = SHIDWORD(v141) * (uint64_t)SDWORD2(v141);
      }
      sub_1002ABC90(&v140, (uint64_t)&v160, (double)(unint64_t)v76 * 0.0000152587891);
      sub_10039E564((uint64_t)&v160);
      if (v128 && atomic_fetch_add((atomic_uint *volatile)(v128 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v124);
      }
      uint64_t v128 = 0;
      long long v125 = 0u;
      long long v126 = 0u;
      if (SDWORD1(v124) >= 1)
      {
        uint64_t v84 = 0;
        float64x2_t v85 = v129;
        do
          *(_DWORD *)&v85[4 * v84++] = 0;
        while (v84 < SDWORD1(v124));
      }
      if (v130 != v131) {
        j__free(v130);
      }
      if (v136 && atomic_fetch_add((atomic_uint *volatile)(v136 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v132);
      }
      uint64_t v136 = 0;
      long long v133 = 0u;
      long long v134 = 0u;
      if (SDWORD1(v132) >= 1)
      {
        uint64_t v86 = 0;
        double v87 = v137;
        do
          *(_DWORD *)&v87[4 * v86++] = 0;
        while (v86 < SDWORD1(v132));
      }
      if (v138 != v139) {
        j__free(v138);
      }
LABEL_145:
      if (v145 && atomic_fetch_add((atomic_uint *volatile)(v145 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v141);
      }
      uint64_t v145 = 0;
      long long v142 = 0u;
      long long v143 = 0u;
      if (SDWORD1(v141) >= 1)
      {
        uint64_t v88 = 0;
        unint64_t v89 = v146;
        do
          *(_DWORD *)&v89[4 * v88++] = 0;
        while (v88 < SDWORD1(v141));
      }
      if (v147 != v148) {
        j__free(v147);
      }
      if (v154 && atomic_fetch_add((atomic_uint *volatile)(v154 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v150);
      }
      uint64_t v154 = 0;
      long long v151 = 0u;
      long long v152 = 0u;
      if (SDWORD1(v150) >= 1)
      {
        uint64_t v90 = 0;
        double v91 = v155;
        do
          v91->i32[v90++] = 0;
        while (v90 < SDWORD1(v150));
      }
      if (v156 != v157) {
        j__free(v156);
      }
      if (v159) {
        sub_1002D6888(v158);
      }
      return a4;
    case 3:
      int v70 = (int)a4 - (a4 < (double)(int)a4);
      a4 = (double)v70;
      uint64_t v71 = (uint64_t)rint(a5);
      if (v62 == 2) {
        LODWORD(v71) = v70;
      }
      if ((int)v71 <= -32768) {
        LODWORD(v71) = -32768;
      }
      if ((int)v71 >= 0x7FFF) {
        LODWORD(v71) = 0x7FFF;
      }
      if ((v70 + 0x8000) < 0xFFFF)
      {
        a5 = (double)(__int16)v71;
        goto LABEL_112;
      }
      if (v62 >= 2)
      {
        BOOL v99 = v62 != 3 || v70 <= 32766;
        BOOL v100 = !v99;
        BOOL v101 = v62 == 4 || v62 == 2;
        BOOL v102 = v101 && v70 < -32768;
        if (!v102 && !v100) {
          goto LABEL_239;
        }
      }
      if (v62 == 1)
      {
        if (v70 <= 32766) {
          int v98 = 0;
        }
        else {
          int v98 = v71;
        }
      }
      else if (v62)
      {
        int v98 = 0;
      }
      else if (v70 <= 32766)
      {
        int v98 = v71;
      }
      else
      {
        int v98 = 0;
      }
      goto LABEL_256;
    case 5:
    case 6:
      goto LABEL_112;
    default:
      uint64_t v160 = 0;
      float64x2_t v161 = 0;
      sub_1002D2278(-210, &v160, "threshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1509);
  }
}

void sub_10039A128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

void sub_10039A20C(uint64_t a1, int a2)
{
  if (a2) {
    sub_10000B6A8(a1);
  }
  JUMPOUT(0x10039A228);
}

void sub_10039A230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

void sub_10039A24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

double sub_10039A280(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  sub_1002943B4(a1, 0, 0, 0, (uint64_t)&v48);
  sub_1002943B4(a2, 0, 0, 0, (uint64_t)&v40);
  long long v32 = v40;
  long long v33 = v41;
  long long v34 = v42;
  uint64_t v35 = v43;
  uint64_t v36 = v44;
  uint64_t v37 = (char *)&v32 + 8;
  int v38 = v39;
  v39[0] = 0;
  v39[1] = 0;
  if (v44)
  {
    atomic_fetch_add((atomic_uint *volatile)(v44 + 20), 1u);
    if (SDWORD1(v40) <= 2)
    {
LABEL_3:
      uint64_t v9 = v46;
      uint64_t v10 = v38;
      *(void *)int v38 = *(void *)v46;
      v10[1] = v9[1];
      goto LABEL_6;
    }
  }
  else if (SDWORD1(v40) <= 2)
  {
    goto LABEL_3;
  }
  DWORD1(v32) = 0;
  sub_1002931A8((uint64_t)&v32, (uint64_t)&v40);
LABEL_6:
  unint64_t v11 = *(v53 - 1);
  if (v11 != *(v45 - 1)) {
    goto LABEL_22;
  }
  if (v11 == 2)
  {
    if (*v53 != *v45 || v53[1] != v45[1]) {
      goto LABEL_22;
    }
  }
  else if ((int)v11 >= 1)
  {
    if (*v53 != *v45) {
      goto LABEL_22;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      int v14 = v53[v12];
      int v15 = v45[v12++];
    }
    while (v14 == v15);
    if (v13 < v11)
    {
LABEL_22:
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      qmemcpy((void *)sub_1002D19D8(&v29, 108), "src.size == dst.size && src.channels() == dst.channels() && (src.depth() == dst.depth() || dst.depth() == 0)", 108);
      sub_1002D2278(-215, &v29, "cvThreshold", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 1596);
    }
  }
  if ((((unsigned __int16)v40 ^ (unsigned __int16)v48) & 0xFF8) != 0) {
    goto LABEL_22;
  }
  int v16 = v40 & 7;
  if ((v48 & 7) != v16 && v16 != 0) {
    goto LABEL_22;
  }
  LODWORD(v29) = 16842752;
  uint64_t v30 = (long long *)&v48;
  uint64_t v31 = 0;
  int v26 = 33619968;
  unsigned int v27 = &v40;
  uint64_t v28 = 0;
  double v18 = sub_1003991D4((uint64_t)&v29, (uint64_t)&v26, a3, a4, a5);
  if ((void)v33 != (void)v41)
  {
    LODWORD(v29) = 33619968;
    uint64_t v30 = &v32;
    uint64_t v31 = 0;
    sub_10024011C((unsigned int *)&v40, (uint64_t)&v29, v32 & 7, 1.0, 0.0);
  }
  if (v36 && atomic_fetch_add((atomic_uint *volatile)(v36 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v32);
  }
  uint64_t v36 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  if (SDWORD1(v32) >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = v37;
    do
      *(_DWORD *)&v20[4 * v19++] = 0;
    while (v19 < SDWORD1(v32));
  }
  if (v38 != v39) {
    j__free(v38);
  }
  if (v44 && atomic_fetch_add((atomic_uint *volatile)(v44 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v40);
  }
  uint64_t v44 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  if (SDWORD1(v40) >= 1)
  {
    uint64_t v21 = 0;
    int v22 = v45;
    do
      v22[v21++] = 0;
    while (v21 < SDWORD1(v40));
  }
  if (v46 != &v47) {
    j__free(v46);
  }
  if (v52 && atomic_fetch_add((atomic_uint *volatile)(v52 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v48);
  }
  uint64_t v52 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  if (v49 >= 1)
  {
    uint64_t v23 = 0;
    __int16 v24 = v53;
    do
      v24[v23++] = 0;
    while (v23 < v49);
  }
  if (v54 != &v55) {
    j__free(v54);
  }
  return v18;
}

void sub_10039A664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1000094F4((uint64_t)&a27);
  sub_1000094F4(v27 - 160);
  _Unwind_Resume(a1);
}

void sub_10039A6BC(_Unwind_Exception *a1)
{
  sub_1000094F4(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_10039A6D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6)
{
  *(void *)a1 = off_10049C750;
  *(_DWORD *)(a1 + 8) = 1124007936;
  unint64_t v11 = (_DWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 12) = 0u;
  uint64_t v12 = (int *)(a1 + 12);
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 1124007936;
  unint64_t v13 = (_DWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 108) = 0u;
  int v14 = (int *)(a1 + 108);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  if (a1 + 8 != a2)
  {
    uint64_t v16 = *(void *)(a2 + 56);
    if (v16)
    {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
      uint64_t v17 = *(void *)(a1 + 64);
      if (v17)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 8);
        }
      }
    }
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    if (*(int *)(a1 + 12) <= 0)
    {
      *unint64_t v11 = *(_DWORD *)a2;
      int v21 = *(_DWORD *)(a2 + 4);
      if (v21 <= 2)
      {
LABEL_11:
        *(_DWORD *)(a1 + 12) = v21;
        *(void *)(a1 + 16) = *(void *)(a2 + 8);
        int v22 = *(void **)(a2 + 72);
        uint64_t v23 = *(void **)(a1 + 80);
        *uint64_t v23 = *v22;
        v23[1] = v22[1];
LABEL_14:
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 48);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a1 + 72);
      do
      {
        *(_DWORD *)(v19 + 4 * v18++) = 0;
        uint64_t v20 = *v12;
      }
      while (v18 < v20);
      *unint64_t v11 = *(_DWORD *)a2;
      if ((int)v20 <= 2)
      {
        int v21 = *(_DWORD *)(a2 + 4);
        if (v21 <= 2) {
          goto LABEL_11;
        }
      }
    }
    sub_1002931A8((uint64_t)v11, a2);
    goto LABEL_14;
  }
LABEL_15:
  if (v13 != (_DWORD *)a3)
  {
    uint64_t v24 = *(void *)(a3 + 56);
    if (v24) {
      atomic_fetch_add((atomic_uint *volatile)(v24 + 20), 1u);
    }
    uint64_t v25 = *(void *)(a1 + 160);
    if (v25 && atomic_fetch_add((atomic_uint *volatile)(v25 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v13);
    }
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    if (*(int *)(a1 + 108) <= 0)
    {
      *unint64_t v13 = *(_DWORD *)a3;
      int v29 = *(_DWORD *)(a3 + 4);
      if (v29 <= 2)
      {
LABEL_26:
        *(_DWORD *)(a1 + 108) = v29;
        *(void *)(a1 + 112) = *(void *)(a3 + 8);
        uint64_t v30 = *(void **)(a3 + 72);
        uint64_t v31 = *(void **)(a1 + 176);
        void *v31 = *v30;
        v31[1] = v30[1];
LABEL_29:
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a3 + 48);
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)(a1 + 168);
      do
      {
        *(_DWORD *)(v27 + 4 * v26++) = 0;
        uint64_t v28 = *v14;
      }
      while (v26 < v28);
      *unint64_t v13 = *(_DWORD *)a3;
      if ((int)v28 <= 2)
      {
        int v29 = *(_DWORD *)(a3 + 4);
        if (v29 <= 2) {
          goto LABEL_26;
        }
      }
    }
    sub_1002931A8((uint64_t)v13, a3);
    goto LABEL_29;
  }
LABEL_30:
  *(double *)(a1 + 200) = a5;
  *(double *)(a1 + 208) = a6;
  *(_DWORD *)(a1 + 216) = a4;
  return a1;
}

void sub_10039A99C(_Unwind_Exception *a1)
{
  sub_1000094F4(v3);
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10039A9C0(uint64_t a1)
{
  sub_10039E564(a1);

  operator delete();
}

void sub_10039A9F8(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = a2[1];
  LODWORD(__b) = *a2;
  unsigned int v3 = __b;
  DWORD1(__b) = v4;
  v689[0] = 0x7FFFFFFF80000000;
  sub_100293AD0((uint64_t)&v696, (_DWORD *)(a1 + 8), (int *)&__b, v689);
  *(void *)&long long __b = __PAIR64__(v4, v3);
  uint64_t v704 = 0x7FFFFFFF80000000;
  sub_100293AD0((uint64_t)v689, (_DWORD *)(a1 + 104), (int *)&__b, &v704);
  switch(v696 & 7)
  {
    case 0u:
      unint64_t v5 = v703;
      int v6 = *v701;
      int v7 = v701[1] + v701[1] * ((v696 >> 3) & 0x1FF);
      unint64_t v8 = v695;
      if ((v696 & 0x4000) != 0)
      {
        int v9 = v7 * v6;
        if ((v689[0] & 0x4000) != 0)
        {
          v7 *= v6;
          int v6 = 1;
          unint64_t v8 = v9;
          unint64_t v5 = v9;
        }
      }
      double v10 = *(double *)(a1 + 200);
      double v11 = *(double *)(a1 + 208);
      int v12 = *(_DWORD *)(a1 + 216);
      uint64_t v13 = v698;
      uint64_t v14 = v690;
      uint64_t v15 = (int)v10;
      if ((sub_1002D21FC(3) & 1) != 0 || sub_1002D21FC(100))
      {
        uint8x16_t v16 = (uint8x16_t)vdupq_n_s8(v15);
        int8x16_t v17 = vdupq_n_s8((int)v11);
        switch(v12)
        {
          case 0:
            int v18 = 0;
            if (v6 < 1) {
              goto LABEL_222;
            }
            unint64_t v19 = (v7 - 16);
            if (v7 < 16) {
              goto LABEL_222;
            }
            for (int i = 0; i != v6; ++i)
            {
              for (unint64_t j = 0; j <= v19; j += 16)
                *(int8x16_t *)(v14 + j) = vandq_s8(v17, (int8x16_t)vcgtq_u8(*(uint8x16_t *)(v13 + j), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          case 1:
            int v18 = 0;
            if (v6 < 1) {
              goto LABEL_222;
            }
            unint64_t v19 = (v7 - 16);
            if (v7 < 16) {
              goto LABEL_222;
            }
            for (int k = 0; k != v6; ++k)
            {
              for (unint64_t m = 0; m <= v19; m += 16)
                *(int8x16_t *)(v14 + m) = vbicq_s8(v17, (int8x16_t)vcgtq_u8(*(uint8x16_t *)(v13 + m), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          case 2:
            int v18 = 0;
            if (v6 < 1) {
              goto LABEL_222;
            }
            unint64_t v19 = (v7 - 16);
            if (v7 < 16) {
              goto LABEL_222;
            }
            for (int n = 0; n != v6; ++n)
            {
              for (iint i = 0; ii <= v19; ii += 16)
                *(uint8x16_t *)(v14 + ii) = vqsubq_u8(*(uint8x16_t *)(v13 + ii), vqsubq_u8(*(uint8x16_t *)(v13 + ii), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          case 3:
            int v18 = 0;
            if (v6 < 1) {
              goto LABEL_222;
            }
            unint64_t v19 = (v7 - 16);
            if (v7 < 16) {
              goto LABEL_222;
            }
            for (junint64_t j = 0; jj != v6; ++jj)
            {
              for (kint k = 0; kk <= v19; kk += 16)
                *(int8x16_t *)(v14 + kk) = vandq_s8(*(int8x16_t *)(v13 + kk), (int8x16_t)vcgtq_u8(*(uint8x16_t *)(v13 + kk), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          case 4:
            int v18 = 0;
            if (v6 < 1) {
              goto LABEL_222;
            }
            unint64_t v19 = (v7 - 16);
            if (v7 < 16) {
              goto LABEL_222;
            }
            for (munint64_t m = 0; mm != v6; ++mm)
            {
              for (nint n = 0; nn <= v19; nn += 16)
                *(int8x16_t *)(v14 + nn) = vbicq_s8(*(int8x16_t *)(v13 + nn), (int8x16_t)vcgtq_u8(*(uint8x16_t *)(v13 + nn), v16));
              v13 += v5;
              v14 += v8;
            }
            break;
          default:
            goto LABEL_125;
        }
        int v18 = (v19 & 0xFFFFFFF0) + 16;
      }
      else
      {
LABEL_125:
        int v18 = 0;
      }
LABEL_222:
      if (v18 >= v7) {
        goto LABEL_851;
      }
      long long v717 = 0u;
      long long v718 = 0u;
      long long v715 = 0u;
      long long v716 = 0u;
      long long v713 = 0u;
      long long v714 = 0u;
      long long v711 = 0u;
      long long v712 = 0u;
      long long v709 = 0u;
      long long v710 = 0u;
      memset(v708, 0, sizeof(v708));
      memset(v707, 0, sizeof(v707));
      long long __b = 0u;
      long long v706 = 0u;
      uint64_t v203 = (v15 + 1);
      switch(v12)
      {
        case 0:
          bzero(&__b, (v15 + 1));
          if (v15 != 255) {
            memset((char *)&__b + v203, (int)v11, v15 ^ 0xFF);
          }
          goto LABEL_840;
        case 1:
          memset(&__b, (int)v11, (v15 + 1));
          if (v15 != 255)
          {
            v460 = (char *)&__b + v203;
            goto LABEL_826;
          }
          goto LABEL_840;
        case 2:
          if (v15 < 7)
          {
            uint64_t v461 = 0;
            goto LABEL_807;
          }
          if (v15 >= 0x1F)
          {
            uint64_t v461 = ((_WORD)v15 + 1) & 0x1E0;
            long long __b = xmmword_10040BED0;
            long long v706 = xmmword_10040BEE0;
            if (v461 != 32)
            {
              qmemcpy(v707, " !\"#$%&'()*+,-./0123456789:;<=>?", sizeof(v707));
              if (v461 != 64)
              {
                qmemcpy(v708, "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_", sizeof(v708));
                if (v461 != 96)
                {
                  long long v709 = xmmword_10040BF30;
                  long long v710 = xmmword_10040BF40;
                  if (v461 != 128)
                  {
                    long long v711 = xmmword_10040BF50;
                    long long v712 = xmmword_10040BF60;
                    if (v461 != 160)
                    {
                      long long v713 = xmmword_10040BF70;
                      long long v714 = xmmword_10040BF80;
                      if (v461 != 192)
                      {
                        long long v715 = xmmword_10040BF90;
                        long long v716 = xmmword_10040BFA0;
                        if (v461 != 224)
                        {
                          long long v717 = xmmword_10040BFB0;
                          long long v718 = xmmword_10040BFC0;
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v461 == v203) {
              goto LABEL_808;
            }
            if ((((_BYTE)v15 + 1) & 0x18) == 0)
            {
              do
              {
LABEL_807:
                *((unsigned char *)&__b + v461) = v461;
                ++v461;
              }
              while (v203 != v461);
              goto LABEL_808;
            }
          }
          else
          {
            uint64_t v461 = 0;
          }
          uint64_t v653 = v461;
          uint64_t v461 = ((_WORD)v15 + 1) & 0x1F8;
          int8x8_t v654 = vorr_s8(vdup_n_s8(v653), (int8x8_t)0x706050403020100);
          v655 = (int8x8_t *)((char *)&__b + v653);
          uint64_t v656 = v653 - v461;
          do
          {
            *v655++ = v654;
            int8x8_t v654 = vadd_s8(v654, (int8x8_t)0x808080808080808);
            v656 += 8;
          }
          while (v656);
          if (v461 != v203) {
            goto LABEL_807;
          }
LABEL_808:
          if (v15 != 255) {
            memset((char *)&__b + v203, (int)v10, v15 ^ 0xFF);
          }
          goto LABEL_840;
        case 3:
          bzero(&__b, (v15 + 1));
          if (v15 == 255) {
            goto LABEL_840;
          }
          uint64_t v462 = v15 + 1;
          unint64_t v463 = v15 ^ 0xFF;
          if ((v15 ^ 0xFFuLL) < 8)
          {
            uint64_t v464 = v15 + 1;
            goto LABEL_839;
          }
          if (v463 >= 0x20)
          {
            int8x16_t v661 = vdupq_n_s8(v462);
            uint64_t v652 = ~(_BYTE)v15 & 0xE0;
            v662 = (int8x16_t *)((char *)&__b + v462);
            int8x16_t *v662 = vaddq_s8(v661, (int8x16_t)xmmword_10040BED0);
            v662[1] = vaddq_s8(v661, (int8x16_t)xmmword_10040BEE0);
            if (v652 != 32)
            {
              v663 = (char *)&__b + v15;
              *(int8x16_t *)(v663 + 33) = vaddq_s8(v661, (int8x16_t)xmmword_10040BEF0);
              *(int8x16_t *)(v663 + 49) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF00);
              if (v652 != 64)
              {
                v664 = (char *)&__b + v15;
                *(int8x16_t *)(v664 + 65) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF10);
                *(int8x16_t *)(v664 + 81) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF20);
                if (v652 != 96)
                {
                  *(int8x16_t *)(v664 + 97) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF30);
                  *(int8x16_t *)(v664 + 113) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF40);
                  if (v652 != 128)
                  {
                    v665 = (char *)&__b + v15;
                    *(int8x16_t *)(v665 + 129) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF50);
                    *(int8x16_t *)(v665 + 145) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF60);
                    if (v652 != 160)
                    {
                      *(int8x16_t *)(v665 + 161) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF70);
                      *(int8x16_t *)(v665 + 177) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF80);
                      if (v652 != 192)
                      {
                        v666 = (char *)&__b + v15;
                        *(int8x16_t *)(v666 + 193) = vaddq_s8(v661, (int8x16_t)xmmword_10040BF90);
                        *(int8x16_t *)(v666 + 209) = vaddq_s8(v661, (int8x16_t)xmmword_10040BFA0);
                      }
                    }
                  }
                }
              }
            }
            if (v463 == v652) {
              goto LABEL_840;
            }
            uint64_t v464 = v462 + v652;
            if ((~(_BYTE)v15 & 0x18) == 0)
            {
              do
              {
LABEL_839:
                *((unsigned char *)&__b + v464) = v464;
                ++v464;
              }
              while (v464 != 256);
              goto LABEL_840;
            }
          }
          else
          {
            uint64_t v652 = 0;
            LODWORD(v464) = v15 + 1;
          }
          int8x8_t v667 = vdup_n_s8(v464);
          uint64_t v464 = v462 + (~(_BYTE)v15 & 0xF8);
          int8x8_t v668 = vadd_s8(v667, (int8x8_t)0x706050403020100);
          uint64_t v669 = v652 - (~(_BYTE)v15 & 0xF8);
          v670 = (int8x8_t *)((char *)&__b + v652 + v15 + 1);
          do
          {
            *v670++ = v668;
            int8x8_t v668 = vadd_s8(v668, (int8x8_t)0x808080808080808);
            v669 += 8;
          }
          while (v669);
          if ((v15 ^ 0xFF) != (~(_BYTE)v15 & 0xF8)) {
            goto LABEL_839;
          }
LABEL_840:
          if (v6 >= 1)
          {
            int v671 = 0;
            uint64_t v672 = v690;
            uint64_t v673 = v698;
            uint64_t v674 = v7 - 4;
            uint64_t v675 = v698 + v18;
            uint64_t v676 = v690 + v18;
            do
            {
              LODWORD(v677) = v18;
              if (v18 <= (int)v674)
              {
                uint64_t v677 = 0;
                do
                {
                  char v678 = *((unsigned char *)&__b + *(unsigned __int8 *)(v675 + v677 + 1));
                  v679 = (unsigned char *)(v676 + v677);
                  unsigned char *v679 = *((unsigned char *)&__b + *(unsigned __int8 *)(v675 + v677));
                  v679[1] = v678;
                  char v680 = *((unsigned char *)&__b + *(unsigned __int8 *)(v675 + v677 + 3));
                  v679[2] = *((unsigned char *)&__b + *(unsigned __int8 *)(v675 + v677 + 2));
                  v679[3] = v680;
                  v677 += 4;
                }
                while (v18 + v677 <= v674);
                LODWORD(v677) = v18 + v677;
              }
              if ((int)v677 < v7)
              {
                uint64_t v677 = (int)v677;
                do
                {
                  *(unsigned char *)(v672 + v677) = *((unsigned char *)&__b + *(unsigned __int8 *)(v673 + v677));
                  ++v677;
                }
                while (v7 != v677);
              }
              ++v671;
              v673 += v5;
              v672 += v8;
              v675 += v5;
              v676 += v8;
            }
            while (v671 != v6);
          }
LABEL_851:
          if (v692 && atomic_fetch_add((atomic_uint *volatile)(v692 + 20), 0xFFFFFFFF) == 1) {
            sub_1002932F4((uint64_t)v689);
          }
          uint64_t v692 = 0;
          long long v690 = 0u;
          long long v691 = 0u;
          if (SHIDWORD(v689[0]) >= 1)
          {
            uint64_t v681 = 0;
            uint64_t v682 = v693;
            do
              *(_DWORD *)(v682 + 4 * v681++) = 0;
            while (v681 < SHIDWORD(v689[0]));
          }
          if (v694 != &v695) {
            j__free(v694);
          }
          if (v700 && atomic_fetch_add((atomic_uint *volatile)(v700 + 20), 0xFFFFFFFF) == 1) {
            sub_1002932F4((uint64_t)&v696);
          }
          uint64_t v700 = 0;
          long long v698 = 0u;
          long long v699 = 0u;
          if (v697 >= 1)
          {
            uint64_t v683 = 0;
            v684 = v701;
            do
              v684[v683++] = 0;
            while (v683 < v697);
          }
          if (v702 != &v703) {
            j__free(v702);
          }
          return;
        case 4:
          if (v15 < 7)
          {
            uint64_t v465 = 0;
            goto LABEL_823;
          }
          if (v15 >= 0x1F)
          {
            uint64_t v465 = ((_WORD)v15 + 1) & 0x1E0;
            long long __b = xmmword_10040BED0;
            long long v706 = xmmword_10040BEE0;
            if (v465 != 32)
            {
              qmemcpy(v707, " !\"#$%&'()*+,-./0123456789:;<=>?", sizeof(v707));
              if (v465 != 64)
              {
                qmemcpy(v708, "@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_", sizeof(v708));
                if (v465 != 96)
                {
                  long long v709 = xmmword_10040BF30;
                  long long v710 = xmmword_10040BF40;
                  if (v465 != 128)
                  {
                    long long v711 = xmmword_10040BF50;
                    long long v712 = xmmword_10040BF60;
                    if (v465 != 160)
                    {
                      long long v713 = xmmword_10040BF70;
                      long long v714 = xmmword_10040BF80;
                      if (v465 != 192)
                      {
                        long long v715 = xmmword_10040BF90;
                        long long v716 = xmmword_10040BFA0;
                        if (v465 != 224)
                        {
                          long long v717 = xmmword_10040BFB0;
                          long long v718 = xmmword_10040BFC0;
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v465 == v203) {
              goto LABEL_824;
            }
            if ((((_BYTE)v15 + 1) & 0x18) == 0)
            {
              do
              {
LABEL_823:
                *((unsigned char *)&__b + v465) = v465;
                ++v465;
              }
              while (v203 != v465);
              goto LABEL_824;
            }
          }
          else
          {
            uint64_t v465 = 0;
          }
          uint64_t v657 = v465;
          uint64_t v465 = ((_WORD)v15 + 1) & 0x1F8;
          int8x8_t v658 = vorr_s8(vdup_n_s8(v657), (int8x8_t)0x706050403020100);
          v659 = (int8x8_t *)((char *)&__b + v657);
          uint64_t v660 = v657 - v465;
          do
          {
            *v659++ = v658;
            int8x8_t v658 = vadd_s8(v658, (int8x8_t)0x808080808080808);
            v660 += 8;
          }
          while (v660);
          if (v465 != v203) {
            goto LABEL_823;
          }
LABEL_824:
          if (v15 != 255)
          {
            v460 = (char *)&__b + v203;
LABEL_826:
            bzero(v460, v15 ^ 0xFF);
          }
          goto LABEL_840;
        default:
          goto LABEL_840;
      }
    case 2u:
      int v51 = *v701;
      int v52 = v701[1] + v701[1] * ((v696 >> 3) & 0x1FF);
      if ((v696 & v689[0] & 0x4000) != 0)
      {
        v52 *= v51;
        unint64_t v53 = v52;
        int v51 = 1;
        unint64_t v54 = v52;
      }
      else
      {
        unint64_t v54 = v703 / ((0x88442211uLL >> (4 * (v696 & 7))) & 0xF);
        unint64_t v53 = v695 / ((0x88442211uLL >> (4 * (v689[0] & 7))) & 0xF);
      }
      double v120 = *(double *)(a1 + 200);
      double v121 = *(double *)(a1 + 208);
      int v122 = *(_DWORD *)(a1 + 216);
      uint64_t v123 = v698;
      uint64_t v124 = v690;
      unsigned int v125 = (int)v120;
      unsigned int v126 = (int)v121;
      if ((sub_1002D21FC(3) & 1) != 0 || sub_1002D21FC(100))
      {
        uint16x8_t v127 = (uint16x8_t)vdupq_n_s16(v125);
        int8x16_t v128 = (int8x16_t)vdupq_n_s16(v126);
        switch(v122)
        {
          case 0:
            if (v51 < 1) {
              goto LABEL_851;
            }
            uint64_t v129 = 0;
            uint64_t v130 = 2 * v53;
            uint64_t v131 = 2 * v54;
            uint64_t v132 = v123;
            uint64_t v133 = v124;
            while (1)
            {
              if (v52 >= 16)
              {
                uint64_t v135 = 0;
                uint64_t v134 = 0;
                do
                {
                  int8x16_t v136 = vandq_s8(v128, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v132 + v135 + 16), v127));
                  double v137 = (int8x16_t *)(v133 + v135);
                  *double v137 = vandq_s8(v128, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v132 + v135), v127));
                  v137[1] = v136;
                  v134 += 16;
                  v135 += 32;
                }
                while (v134 <= v52 - 16);
                uint64_t v134 = v134;
                if ((int)v134 < v52)
                {
LABEL_115:
                  unint64_t v138 = v52 - v134;
                  if (v138 < 0x10) {
                    goto LABEL_869;
                  }
                  uint64_t v139 = 2 * v134;
                  if ((unint64_t)(v124 + v130 * v129 + 2 * v134 - (v123 + v131 * v129 + 2 * v134)) < 0x20) {
                    goto LABEL_869;
                  }
                  v134 += v138 & 0xFFFFFFFFFFFFFFF0;
                  unint64_t v140 = v138 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    int8x16_t v141 = vandq_s8(v128, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v132 + v139 + 16), v127));
                    long long v142 = (int8x16_t *)(v133 + v139);
                    *long long v142 = vandq_s8(v128, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v132 + v139), v127));
                    v142[1] = v141;
                    v139 += 32;
                    v140 -= 16;
                  }
                  while (v140);
                  if (v138 != (v138 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_869:
                    do
                    {
                      if (*(unsigned __int16 *)(v132 + 2 * v134) <= v125) {
                        __int16 v143 = 0;
                      }
                      else {
                        __int16 v143 = (int)v121;
                      }
                      *(_WORD *)(v133 + 2 * v134++) = v143;
                    }
                    while (v52 != v134);
                  }
                }
              }
              else
              {
                uint64_t v134 = 0;
                if (v52 > 0) {
                  goto LABEL_115;
                }
              }
              ++v129;
              v133 += v130;
              v132 += v131;
              if (v129 == v51) {
                goto LABEL_851;
              }
            }
          case 1:
            if (v51 < 1) {
              goto LABEL_851;
            }
            uint64_t v400 = 0;
            uint64_t v401 = 2 * v53;
            uint64_t v402 = 2 * v54;
            uint64_t v403 = v123;
            uint64_t v404 = v124;
            while (1)
            {
              if (v52 >= 16)
              {
                uint64_t v406 = 0;
                uint64_t v405 = 0;
                do
                {
                  int8x16_t v407 = vbicq_s8(v128, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v403 + v406 + 16), v127));
                  v408 = (int8x16_t *)(v404 + v406);
                  int8x16_t *v408 = vbicq_s8(v128, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v403 + v406), v127));
                  v408[1] = v407;
                  v405 += 16;
                  v406 += 32;
                }
                while (v405 <= v52 - 16);
                uint64_t v405 = v405;
                if ((int)v405 < v52)
                {
LABEL_466:
                  unint64_t v409 = v52 - v405;
                  if (v409 < 0x10) {
                    goto LABEL_870;
                  }
                  uint64_t v410 = 2 * v405;
                  if ((unint64_t)(v124 + v401 * v400 + 2 * v405 - (v123 + v402 * v400 + 2 * v405)) < 0x20) {
                    goto LABEL_870;
                  }
                  v405 += v409 & 0xFFFFFFFFFFFFFFF0;
                  unint64_t v411 = v409 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    int8x16_t v412 = vbicq_s8(v128, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v403 + v410 + 16), v127));
                    v413 = (int8x16_t *)(v404 + v410);
                    int8x16_t *v413 = vbicq_s8(v128, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v403 + v410), v127));
                    v413[1] = v412;
                    v410 += 32;
                    v411 -= 16;
                  }
                  while (v411);
                  if (v409 != (v409 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_870:
                    do
                    {
                      if (*(unsigned __int16 *)(v403 + 2 * v405) <= v125) {
                        __int16 v414 = (int)v121;
                      }
                      else {
                        __int16 v414 = 0;
                      }
                      *(_WORD *)(v404 + 2 * v405++) = v414;
                    }
                    while (v52 != v405);
                  }
                }
              }
              else
              {
                uint64_t v405 = 0;
                if (v52 > 0) {
                  goto LABEL_466;
                }
              }
              ++v400;
              v404 += v401;
              v403 += v402;
              if (v400 == v51) {
                goto LABEL_851;
              }
            }
          case 2:
            if (v51 < 1) {
              goto LABEL_851;
            }
            uint64_t v415 = 0;
            uint64_t v416 = 2 * v53;
            uint64_t v417 = 2 * v54;
            uint64_t v418 = v123;
            uint64_t v419 = v124;
            while (1)
            {
              if (v52 >= 16)
              {
                uint64_t v421 = 0;
                uint64_t v420 = 0;
                do
                {
                  uint16x8_t v422 = vminq_u16(*(uint16x8_t *)(v418 + v421 + 16), v127);
                  unint64_t v423 = (uint16x8_t *)(v419 + v421);
                  *unint64_t v423 = vminq_u16(*(uint16x8_t *)(v418 + v421), v127);
                  v423[1] = v422;
                  v420 += 16;
                  v421 += 32;
                }
                while (v420 <= v52 - 16);
                uint64_t v420 = v420;
                if ((int)v420 < v52)
                {
LABEL_485:
                  unint64_t v424 = v52 - v420;
                  if (v424 < 0x10) {
                    goto LABEL_871;
                  }
                  uint64_t v425 = 2 * v420;
                  if ((unint64_t)(v124 + v416 * v415 + 2 * v420 - (v123 + v417 * v415 + 2 * v420)) < 0x20) {
                    goto LABEL_871;
                  }
                  v420 += v424 & 0xFFFFFFFFFFFFFFF0;
                  unint64_t v426 = v424 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    uint16x8_t v427 = vminq_u16(v127, *(uint16x8_t *)(v418 + v425 + 16));
                    int8x8_t v428 = (uint16x8_t *)(v419 + v425);
                    *int8x8_t v428 = vminq_u16(v127, *(uint16x8_t *)(v418 + v425));
                    v428[1] = v427;
                    v425 += 32;
                    v426 -= 16;
                  }
                  while (v426);
                  if (v424 != (v424 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_871:
                    do
                    {
                      unsigned int v429 = *(unsigned __int16 *)(v418 + 2 * v420);
                      if (v125 < v429) {
                        LOWORD(v429) = (int)v120;
                      }
                      *(_WORD *)(v419 + 2 * v420++) = v429;
                    }
                    while (v52 != v420);
                  }
                }
              }
              else
              {
                uint64_t v420 = 0;
                if (v52 > 0) {
                  goto LABEL_485;
                }
              }
              ++v415;
              v419 += v416;
              v418 += v417;
              if (v415 == v51) {
                goto LABEL_851;
              }
            }
          case 3:
            if (v51 < 1) {
              goto LABEL_851;
            }
            uint64_t v430 = 0;
            uint64_t v431 = 2 * v53;
            uint64_t v432 = 2 * v54;
            uint64_t v433 = v123;
            uint64_t v434 = v124;
            while (1)
            {
              if (v52 >= 16)
              {
                uint64_t v436 = 0;
                uint64_t v435 = 0;
                do
                {
                  int8x16_t v437 = vandq_s8(*(int8x16_t *)(v433 + v436 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v433 + v436 + 16), v127));
                  v438 = (int8x16_t *)(v434 + v436);
                  int8x16_t *v438 = vandq_s8(*(int8x16_t *)(v433 + v436), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v433 + v436), v127));
                  v438[1] = v437;
                  v435 += 16;
                  v436 += 32;
                }
                while (v435 <= v52 - 16);
                uint64_t v435 = v435;
                if ((int)v435 < v52)
                {
LABEL_503:
                  unint64_t v439 = v52 - v435;
                  if (v439 < 0x10) {
                    goto LABEL_872;
                  }
                  uint64_t v440 = 2 * v435;
                  if ((unint64_t)(v124 + v431 * v430 + 2 * v435 - (v123 + v432 * v430 + 2 * v435)) < 0x20) {
                    goto LABEL_872;
                  }
                  v435 += v439 & 0xFFFFFFFFFFFFFFF0;
                  unint64_t v441 = v439 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    int8x16_t v442 = vandq_s8(*(int8x16_t *)(v433 + v440 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v433 + v440 + 16), v127));
                    v443 = (int8x16_t *)(v434 + v440);
                    int8x16_t *v443 = vandq_s8(*(int8x16_t *)(v433 + v440), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v433 + v440), v127));
                    v443[1] = v442;
                    v440 += 32;
                    v441 -= 16;
                  }
                  while (v441);
                  if (v439 != (v439 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_872:
                    do
                    {
                      unsigned int v444 = *(unsigned __int16 *)(v433 + 2 * v435);
                      if (v444 <= v125) {
                        LOWORD(v444) = 0;
                      }
                      *(_WORD *)(v434 + 2 * v435++) = v444;
                    }
                    while (v52 != v435);
                  }
                }
              }
              else
              {
                uint64_t v435 = 0;
                if (v52 > 0) {
                  goto LABEL_503;
                }
              }
              ++v430;
              v434 += v431;
              v433 += v432;
              if (v430 == v51) {
                goto LABEL_851;
              }
            }
          case 4:
            if (v51 < 1) {
              goto LABEL_851;
            }
            uint64_t v445 = 0;
            uint64_t v446 = 2 * v53;
            uint64_t v447 = 2 * v54;
            uint64_t v448 = v123;
            uint64_t v449 = v124;
            break;
          default:
            goto LABEL_851;
        }
        while (1)
        {
          if (v52 >= 16)
          {
            uint64_t v451 = 0;
            uint64_t v450 = 0;
            do
            {
              int8x16_t v452 = vbicq_s8(*(int8x16_t *)(v448 + v451 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v448 + v451 + 16), v127));
              v453 = (int8x16_t *)(v449 + v451);
              int8x16_t *v453 = vbicq_s8(*(int8x16_t *)(v448 + v451), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v448 + v451), v127));
              v453[1] = v452;
              v450 += 16;
              v451 += 32;
            }
            while (v450 <= v52 - 16);
            uint64_t v450 = v450;
            if ((int)v450 < v52)
            {
LABEL_521:
              unint64_t v454 = v52 - v450;
              if (v454 < 0x10) {
                goto LABEL_873;
              }
              uint64_t v455 = 2 * v450;
              if ((unint64_t)(v124 + v446 * v445 + 2 * v450 - (v123 + v447 * v445 + 2 * v450)) < 0x20) {
                goto LABEL_873;
              }
              v450 += v454 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v456 = v454 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int8x16_t v457 = vbicq_s8(*(int8x16_t *)(v448 + v455 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v448 + v455 + 16), v127));
                v458 = (int8x16_t *)(v449 + v455);
                int8x16_t *v458 = vbicq_s8(*(int8x16_t *)(v448 + v455), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v448 + v455), v127));
                v458[1] = v457;
                v455 += 32;
                v456 -= 16;
              }
              while (v456);
              if (v454 != (v454 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_873:
                do
                {
                  unsigned int v459 = *(unsigned __int16 *)(v448 + 2 * v450);
                  if (v459 > v125) {
                    LOWORD(v459) = 0;
                  }
                  *(_WORD *)(v449 + 2 * v450++) = v459;
                }
                while (v52 != v450);
              }
            }
          }
          else
          {
            uint64_t v450 = 0;
            if (v52 > 0) {
              goto LABEL_521;
            }
          }
          ++v445;
          v449 += v446;
          v448 += v447;
          if (v445 == v51) {
            goto LABEL_851;
          }
        }
      }
      switch(v122)
      {
        case 0:
          if (v51 < 1 || v52 < 1) {
            goto LABEL_851;
          }
          uint64_t v183 = 0;
          uint64_t v184 = 2 * v53;
          uint64_t v185 = 2 * v54;
          uint16x8_t v186 = (uint16x8_t)vdupq_n_s16(v125);
          int8x16_t v187 = (int8x16_t)vdupq_n_s16(v126);
          uint64_t v188 = v124;
          uint64_t v189 = v123;
          while (v52 >= 0x10)
          {
            if ((unint64_t)(v124 + v184 * v183 - (v123 + v185 * v183)) < 0x20)
            {
              for (uint64_t i1 = 0; i1 != v52; *(_WORD *)(v188 + 2 * i1++) = v194)
              {
LABEL_189:
                if (*(unsigned __int16 *)(v189 + 2 * i1) <= v125) {
                  __int16 v194 = 0;
                }
                else {
                  __int16 v194 = (int)v121;
                }
              }
              goto LABEL_181;
            }
            uint64_t v191 = 0;
            do
            {
              int8x16_t v192 = vandq_s8(v187, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v189 + v191 + 16), v186));
              int32x4_t v193 = (int8x16_t *)(v188 + v191);
              int8x16_t *v193 = vandq_s8(v187, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v189 + v191), v186));
              v193[1] = v192;
              v191 += 32;
            }
            while (((2 * v52) & 0x1FFFFFFE0) != v191);
            uint64_t i1 = v52 & 0xFFFFFFF0;
            if (i1 != v52) {
              goto LABEL_189;
            }
LABEL_181:
            ++v183;
            v189 += v185;
            v188 += v184;
            if (v183 == v51) {
              goto LABEL_851;
            }
          }
          uint64_t i1 = 0;
          goto LABEL_189;
        case 1:
          if (v51 < 1 || v52 < 1) {
            goto LABEL_851;
          }
          uint64_t v607 = 0;
          uint64_t v608 = 2 * v53;
          uint64_t v609 = 2 * v54;
          uint16x8_t v610 = (uint16x8_t)vdupq_n_s16(v125);
          int8x16_t v611 = (int8x16_t)vdupq_n_s16(v126);
          uint64_t v612 = v124;
          uint64_t v613 = v123;
          while (v52 >= 0x10)
          {
            if ((unint64_t)(v124 + v608 * v607 - (v123 + v609 * v607)) < 0x20)
            {
              for (uint64_t i2 = 0; i2 != v52; *(_WORD *)(v612 + 2 * i2++) = v618)
              {
LABEL_741:
                if (*(unsigned __int16 *)(v613 + 2 * i2) <= v125) {
                  __int16 v618 = (int)v121;
                }
                else {
                  __int16 v618 = 0;
                }
              }
              goto LABEL_733;
            }
            uint64_t v615 = 0;
            do
            {
              int8x16_t v616 = vbicq_s8(v611, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v613 + v615 + 16), v610));
              v617 = (int8x16_t *)(v612 + v615);
              int8x16_t *v617 = vbicq_s8(v611, (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v613 + v615), v610));
              v617[1] = v616;
              v615 += 32;
            }
            while (((2 * v52) & 0x1FFFFFFE0) != v615);
            uint64_t i2 = v52 & 0xFFFFFFF0;
            if (i2 != v52) {
              goto LABEL_741;
            }
LABEL_733:
            ++v607;
            v613 += v609;
            v612 += v608;
            if (v607 == v51) {
              goto LABEL_851;
            }
          }
          uint64_t i2 = 0;
          goto LABEL_741;
        case 2:
          if (v51 < 1 || v52 < 1) {
            goto LABEL_851;
          }
          uint64_t v619 = 0;
          uint64_t v620 = 2 * v53;
          uint64_t v621 = 2 * v54;
          uint16x8_t v622 = (uint16x8_t)vdupq_n_s16(v125);
          uint64_t v623 = v124;
          uint64_t v624 = v123;
          while (v52 >= 0x10)
          {
            if ((unint64_t)(v124 + v620 * v619 - (v123 + v621 * v619)) < 0x20)
            {
              for (uint64_t i3 = 0; i3 != v52; *(_WORD *)(v623 + 2 * i3++) = v629)
              {
LABEL_757:
                unsigned int v629 = *(unsigned __int16 *)(v624 + 2 * i3);
                if (v125 < v629) {
                  LOWORD(v629) = (int)v120;
                }
              }
              goto LABEL_749;
            }
            uint64_t v626 = 0;
            do
            {
              uint16x8_t v627 = vminq_u16(v622, *(uint16x8_t *)(v624 + v626 + 16));
              v628 = (uint16x8_t *)(v623 + v626);
              uint16x8_t *v628 = vminq_u16(v622, *(uint16x8_t *)(v624 + v626));
              v628[1] = v627;
              v626 += 32;
            }
            while (((2 * v52) & 0x1FFFFFFE0) != v626);
            uint64_t i3 = v52 & 0xFFFFFFF0;
            if (i3 != v52) {
              goto LABEL_757;
            }
LABEL_749:
            ++v619;
            v624 += v621;
            v623 += v620;
            if (v619 == v51) {
              goto LABEL_851;
            }
          }
          uint64_t i3 = 0;
          goto LABEL_757;
        case 3:
          if (v51 < 1 || v52 < 1) {
            goto LABEL_851;
          }
          uint64_t v630 = 0;
          uint64_t v631 = 2 * v53;
          uint64_t v632 = 2 * v54;
          uint16x8_t v633 = (uint16x8_t)vdupq_n_s16(v125);
          uint64_t v634 = v124;
          uint64_t v635 = v123;
          while (v52 >= 0x10)
          {
            if ((unint64_t)(v124 + v631 * v630 - (v123 + v632 * v630)) < 0x20)
            {
              for (uint64_t i4 = 0; i4 != v52; *(_WORD *)(v634 + 2 * i4++) = v640)
              {
LABEL_772:
                unsigned int v640 = *(unsigned __int16 *)(v635 + 2 * i4);
                if (v640 <= v125) {
                  LOWORD(v640) = 0;
                }
              }
              goto LABEL_764;
            }
            uint64_t v637 = 0;
            do
            {
              int8x16_t v638 = vandq_s8(*(int8x16_t *)(v635 + v637 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v635 + v637 + 16), v633));
              v639 = (int8x16_t *)(v634 + v637);
              int8x16_t *v639 = vandq_s8(*(int8x16_t *)(v635 + v637), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v635 + v637), v633));
              v639[1] = v638;
              v637 += 32;
            }
            while (((2 * v52) & 0x1FFFFFFE0) != v637);
            uint64_t i4 = v52 & 0xFFFFFFF0;
            if (i4 != v52) {
              goto LABEL_772;
            }
LABEL_764:
            ++v630;
            v635 += v632;
            v634 += v631;
            if (v630 == v51) {
              goto LABEL_851;
            }
          }
          uint64_t i4 = 0;
          goto LABEL_772;
        case 4:
          if (v51 < 1 || v52 < 1) {
            goto LABEL_851;
          }
          uint64_t v641 = 0;
          uint64_t v642 = 2 * v53;
          uint64_t v643 = 2 * v54;
          uint16x8_t v644 = (uint16x8_t)vdupq_n_s16(v125);
          uint64_t v645 = v124;
          uint64_t v646 = v123;
          break;
        default:
          long long __b = 0uLL;
          sub_1002D2278(-5, (uint64_t *)&__b, "threshGeneric", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 120);
      }
      while (v52 >= 0x10)
      {
        if ((unint64_t)(v124 + v642 * v641 - (v123 + v643 * v641)) < 0x20)
        {
          for (uint64_t i5 = 0; i5 != v52; *(_WORD *)(v645 + 2 * i5++) = v651)
          {
LABEL_787:
            unsigned int v651 = *(unsigned __int16 *)(v646 + 2 * i5);
            if (v651 > v125) {
              LOWORD(v651) = 0;
            }
          }
          goto LABEL_779;
        }
        uint64_t v648 = 0;
        do
        {
          int8x16_t v649 = vbicq_s8(*(int8x16_t *)(v646 + v648 + 16), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v646 + v648 + 16), v644));
          v650 = (int8x16_t *)(v645 + v648);
          int8x16_t *v650 = vbicq_s8(*(int8x16_t *)(v646 + v648), (int8x16_t)vcgtq_u16(*(uint16x8_t *)(v646 + v648), v644));
          v650[1] = v649;
          v648 += 32;
        }
        while (((2 * v52) & 0x1FFFFFFE0) != v648);
        uint64_t i5 = v52 & 0xFFFFFFF0;
        if (i5 != v52) {
          goto LABEL_787;
        }
LABEL_779:
        ++v641;
        v646 += v643;
        v645 += v642;
        if (v641 == v51) {
          goto LABEL_851;
        }
      }
      uint64_t i5 = 0;
      goto LABEL_787;
    case 3u:
      int v22 = *v701;
      int v23 = v701[1] + v701[1] * ((v696 >> 3) & 0x1FF);
      unint64_t v24 = v703 >> 1;
      unint64_t v25 = v695 >> 1;
      if ((v696 & 0x4000) != 0)
      {
        int v26 = v23 * v22;
        if ((v689[0] & 0x4000) != 0)
        {
          v23 *= v22;
          int v22 = 1;
          unint64_t v25 = v26;
          unint64_t v24 = v26;
        }
      }
      double v27 = *(double *)(a1 + 200);
      double v28 = *(double *)(a1 + 208);
      uint64_t v29 = v698;
      uint64_t v30 = v690;
      int v31 = *(_DWORD *)(a1 + 216);
      signed int v32 = (int)v27;
      unsigned int v33 = (int)v28;
      if ((sub_1002D21FC(3) & 1) != 0 || sub_1002D21FC(100))
      {
        int16x8_t v34 = vdupq_n_s16(v32);
        int8x16_t v35 = (int8x16_t)vdupq_n_s16(v33);
        switch(v31)
        {
          case 0:
            if (v22 < 1) {
              goto LABEL_851;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 2 * v25;
            uint64_t v38 = 2 * v24;
            uint64_t v39 = v29;
            uint64_t v40 = v30;
            while (1)
            {
              if (v23 >= 16)
              {
                uint64_t v42 = 0;
                uint64_t v41 = 0;
                do
                {
                  int8x16_t v43 = vandq_s8(v35, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v39 + v42 + 16), v34));
                  uint64_t v44 = (int8x16_t *)(v40 + v42);
                  *uint64_t v44 = vandq_s8(v35, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v39 + v42), v34));
                  v44[1] = v43;
                  v41 += 16;
                  v42 += 32;
                }
                while (v41 <= v23 - 16);
                uint64_t v41 = v41;
                if ((int)v41 < v23)
                {
LABEL_30:
                  unint64_t v45 = v23 - v41;
                  if (v45 < 0x10) {
                    goto LABEL_874;
                  }
                  uint64_t v46 = 2 * v41;
                  if ((unint64_t)(v30 + v37 * v36 + 2 * v41 - (v29 + v38 * v36 + 2 * v41)) < 0x20) {
                    goto LABEL_874;
                  }
                  v41 += v45 & 0xFFFFFFFFFFFFFFF0;
                  unint64_t v47 = v45 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    int8x16_t v48 = vandq_s8(v35, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v39 + v46 + 16), v34));
                    int v49 = (int8x16_t *)(v40 + v46);
                    *int v49 = vandq_s8(v35, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v39 + v46), v34));
                    v49[1] = v48;
                    v46 += 32;
                    v47 -= 16;
                  }
                  while (v47);
                  if (v45 != (v45 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_874:
                    do
                    {
                      if (*(__int16 *)(v39 + 2 * v41) <= v32) {
                        __int16 v50 = 0;
                      }
                      else {
                        __int16 v50 = (int)v28;
                      }
                      *(_WORD *)(v40 + 2 * v41++) = v50;
                    }
                    while (v23 != v41);
                  }
                }
              }
              else
              {
                uint64_t v41 = 0;
                if (v23 > 0) {
                  goto LABEL_30;
                }
              }
              ++v36;
              v40 += v37;
              v39 += v38;
              if (v36 == v22) {
                goto LABEL_851;
              }
            }
          case 1:
            if (v22 < 1) {
              goto LABEL_851;
            }
            uint64_t v204 = 0;
            uint64_t v205 = 2 * v25;
            uint64_t v206 = 2 * v24;
            uint64_t v207 = v29;
            uint64_t v208 = v30;
            while (1)
            {
              if (v23 >= 16)
              {
                uint64_t v210 = 0;
                uint64_t v209 = 0;
                do
                {
                  int8x16_t v211 = vbicq_s8(v35, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v207 + v210 + 16), v34));
                  __int32 v212 = (int8x16_t *)(v208 + v210);
                  *__int32 v212 = vbicq_s8(v35, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v207 + v210), v34));
                  v212[1] = v211;
                  v209 += 16;
                  v210 += 32;
                }
                while (v209 <= v23 - 16);
                uint64_t v209 = v209;
                if ((int)v209 < v23)
                {
LABEL_236:
                  unint64_t v213 = v23 - v209;
                  if (v213 < 0x10) {
                    goto LABEL_875;
                  }
                  uint64_t v214 = 2 * v209;
                  if ((unint64_t)(v30 + v205 * v204 + 2 * v209 - (v29 + v206 * v204 + 2 * v209)) < 0x20) {
                    goto LABEL_875;
                  }
                  v209 += v213 & 0xFFFFFFFFFFFFFFF0;
                  unint64_t v215 = v213 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    int8x16_t v216 = vbicq_s8(v35, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v207 + v214 + 16), v34));
                    int8x8_t v217 = (int8x16_t *)(v208 + v214);
                    *int8x8_t v217 = vbicq_s8(v35, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v207 + v214), v34));
                    v217[1] = v216;
                    v214 += 32;
                    v215 -= 16;
                  }
                  while (v215);
                  if (v213 != (v213 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_875:
                    do
                    {
                      if (*(__int16 *)(v207 + 2 * v209) <= v32) {
                        __int16 v218 = (int)v28;
                      }
                      else {
                        __int16 v218 = 0;
                      }
                      *(_WORD *)(v208 + 2 * v209++) = v218;
                    }
                    while (v23 != v209);
                  }
                }
              }
              else
              {
                uint64_t v209 = 0;
                if (v23 > 0) {
                  goto LABEL_236;
                }
              }
              ++v204;
              v208 += v205;
              v207 += v206;
              if (v204 == v22) {
                goto LABEL_851;
              }
            }
          case 2:
            if (v22 < 1) {
              goto LABEL_851;
            }
            uint64_t v219 = 0;
            uint64_t v220 = 2 * v25;
            uint64_t v221 = 2 * v24;
            uint64_t v222 = v29;
            uint64_t v223 = v30;
            while (1)
            {
              if (v23 >= 16)
              {
                uint64_t v225 = 0;
                uint64_t v224 = 0;
                do
                {
                  int16x8_t v226 = vminq_s16(*(int16x8_t *)(v222 + v225 + 16), v34);
                  int8x8_t v227 = (int16x8_t *)(v223 + v225);
                  *int8x8_t v227 = vminq_s16(*(int16x8_t *)(v222 + v225), v34);
                  v227[1] = v226;
                  v224 += 16;
                  v225 += 32;
                }
                while (v224 <= v23 - 16);
                uint64_t v224 = v224;
                if ((int)v224 < v23)
                {
LABEL_255:
                  unint64_t v228 = v23 - v224;
                  if (v228 < 0x10) {
                    goto LABEL_876;
                  }
                  uint64_t v229 = 2 * v224;
                  if ((unint64_t)(v30 + v220 * v219 + 2 * v224 - (v29 + v221 * v219 + 2 * v224)) < 0x20) {
                    goto LABEL_876;
                  }
                  v224 += v228 & 0xFFFFFFFFFFFFFFF0;
                  unint64_t v230 = v228 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    int16x8_t v231 = vminq_s16(v34, *(int16x8_t *)(v222 + v229 + 16));
                    float64x2_t v232 = (int16x8_t *)(v223 + v229);
                    *float64x2_t v232 = vminq_s16(v34, *(int16x8_t *)(v222 + v229));
                    v232[1] = v231;
                    v229 += 32;
                    v230 -= 16;
                  }
                  while (v230);
                  if (v228 != (v228 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_876:
                    do
                    {
                      signed int v233 = *(__int16 *)(v222 + 2 * v224);
                      if (v32 < v233) {
                        LOWORD(v233) = (int)v27;
                      }
                      *(_WORD *)(v223 + 2 * v224++) = v233;
                    }
                    while (v23 != v224);
                  }
                }
              }
              else
              {
                uint64_t v224 = 0;
                if (v23 > 0) {
                  goto LABEL_255;
                }
              }
              ++v219;
              v223 += v220;
              v222 += v221;
              if (v219 == v22) {
                goto LABEL_851;
              }
            }
          case 3:
            if (v22 < 1) {
              goto LABEL_851;
            }
            uint64_t v234 = 0;
            uint64_t v235 = 2 * v25;
            uint64_t v236 = 2 * v24;
            uint64_t v237 = v29;
            uint64_t v238 = v30;
            while (1)
            {
              if (v23 >= 16)
              {
                uint64_t v240 = 0;
                uint64_t v239 = 0;
                do
                {
                  int8x16_t v241 = vandq_s8(*(int8x16_t *)(v237 + v240 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v237 + v240 + 16), v34));
                  int8x8_t v242 = (int8x16_t *)(v238 + v240);
                  int8x16_t *v242 = vandq_s8(*(int8x16_t *)(v237 + v240), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v237 + v240), v34));
                  v242[1] = v241;
                  v239 += 16;
                  v240 += 32;
                }
                while (v239 <= v23 - 16);
                uint64_t v239 = v239;
                if ((int)v239 < v23)
                {
LABEL_273:
                  unint64_t v243 = v23 - v239;
                  if (v243 < 0x10) {
                    goto LABEL_877;
                  }
                  uint64_t v244 = 2 * v239;
                  if ((unint64_t)(v30 + v235 * v234 + 2 * v239 - (v29 + v236 * v234 + 2 * v239)) < 0x20) {
                    goto LABEL_877;
                  }
                  v239 += v243 & 0xFFFFFFFFFFFFFFF0;
                  unint64_t v245 = v243 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    int8x16_t v246 = vandq_s8(*(int8x16_t *)(v237 + v244 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v237 + v244 + 16), v34));
                    int8x8_t v247 = (int8x16_t *)(v238 + v244);
                    *int8x8_t v247 = vandq_s8(*(int8x16_t *)(v237 + v244), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v237 + v244), v34));
                    v247[1] = v246;
                    v244 += 32;
                    v245 -= 16;
                  }
                  while (v245);
                  if (v243 != (v243 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_877:
                    do
                    {
                      signed int v248 = *(__int16 *)(v237 + 2 * v239);
                      if (v248 <= v32) {
                        LOWORD(v248) = 0;
                      }
                      *(_WORD *)(v238 + 2 * v239++) = v248;
                    }
                    while (v23 != v239);
                  }
                }
              }
              else
              {
                uint64_t v239 = 0;
                if (v23 > 0) {
                  goto LABEL_273;
                }
              }
              ++v234;
              v238 += v235;
              v237 += v236;
              if (v234 == v22) {
                goto LABEL_851;
              }
            }
          case 4:
            if (v22 < 1) {
              goto LABEL_851;
            }
            uint64_t v249 = 0;
            uint64_t v250 = 2 * v25;
            uint64_t v251 = 2 * v24;
            uint64_t v252 = v29;
            uint64_t v253 = v30;
            break;
          default:
            long long __b = 0uLL;
            sub_1002D2278(-5, (uint64_t *)&__b, "thresh_16s", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 673);
        }
        while (1)
        {
          if (v23 >= 16)
          {
            uint64_t v255 = 0;
            uint64_t v254 = 0;
            do
            {
              int8x16_t v256 = vbicq_s8(*(int8x16_t *)(v252 + v255 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v252 + v255 + 16), v34));
              uint64_t v257 = (int8x16_t *)(v253 + v255);
              *uint64_t v257 = vbicq_s8(*(int8x16_t *)(v252 + v255), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v252 + v255), v34));
              v257[1] = v256;
              v254 += 16;
              v255 += 32;
            }
            while (v254 <= v23 - 16);
            uint64_t v254 = v254;
            if ((int)v254 < v23)
            {
LABEL_291:
              unint64_t v258 = v23 - v254;
              if (v258 < 0x10) {
                goto LABEL_878;
              }
              uint64_t v259 = 2 * v254;
              if ((unint64_t)(v30 + v250 * v249 + 2 * v254 - (v29 + v251 * v249 + 2 * v254)) < 0x20) {
                goto LABEL_878;
              }
              v254 += v258 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v260 = v258 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int8x16_t v261 = vbicq_s8(*(int8x16_t *)(v252 + v259 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v252 + v259 + 16), v34));
                float64x2_t v262 = (int8x16_t *)(v253 + v259);
                *float64x2_t v262 = vbicq_s8(*(int8x16_t *)(v252 + v259), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v252 + v259), v34));
                v262[1] = v261;
                v259 += 32;
                v260 -= 16;
              }
              while (v260);
              if (v258 != (v258 & 0xFFFFFFFFFFFFFFF0))
              {
LABEL_878:
                do
                {
                  signed int v263 = *(__int16 *)(v252 + 2 * v254);
                  if (v263 > v32) {
                    LOWORD(v263) = 0;
                  }
                  *(_WORD *)(v253 + 2 * v254++) = v263;
                }
                while (v23 != v254);
              }
            }
          }
          else
          {
            uint64_t v254 = 0;
            if (v23 > 0) {
              goto LABEL_291;
            }
          }
          ++v249;
          v253 += v250;
          v252 += v251;
          if (v249 == v22) {
            goto LABEL_851;
          }
        }
      }
      switch(v31)
      {
        case 0:
          if (v22 < 1 || v23 < 1) {
            goto LABEL_851;
          }
          uint64_t v144 = 0;
          uint64_t v145 = 2 * v25;
          uint64_t v146 = 2 * v24;
          int16x8_t v147 = vdupq_n_s16(v32);
          int8x16_t v148 = (int8x16_t)vdupq_n_s16(v33);
          uint64_t v149 = v30;
          uint64_t v150 = v29;
          while (v23 >= 0x10)
          {
            if ((unint64_t)(v30 + v145 * v144 - (v29 + v146 * v144)) < 0x20)
            {
              for (uint64_t i6 = 0; i6 != v23; *(_WORD *)(v149 + 2 * i6++) = v155)
              {
LABEL_138:
                if (*(__int16 *)(v150 + 2 * i6) <= v32) {
                  __int16 v155 = 0;
                }
                else {
                  __int16 v155 = (int)v28;
                }
              }
              goto LABEL_130;
            }
            uint64_t v152 = 0;
            do
            {
              int8x16_t v153 = vandq_s8(v148, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v150 + v152 + 16), v147));
              uint64_t v154 = (int8x16_t *)(v149 + v152);
              *uint64_t v154 = vandq_s8(v148, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v150 + v152), v147));
              v154[1] = v153;
              v152 += 32;
            }
            while (((2 * v23) & 0x1FFFFFFE0) != v152);
            uint64_t i6 = v23 & 0xFFFFFFF0;
            if (i6 != v23) {
              goto LABEL_138;
            }
LABEL_130:
            ++v144;
            v150 += v146;
            v149 += v145;
            if (v144 == v22) {
              goto LABEL_851;
            }
          }
          uint64_t i6 = 0;
          goto LABEL_138;
        case 1:
          if (v22 < 1 || v23 < 1) {
            goto LABEL_851;
          }
          uint64_t v466 = 0;
          uint64_t v467 = 2 * v25;
          uint64_t v468 = 2 * v24;
          int16x8_t v469 = vdupq_n_s16(v32);
          int8x16_t v470 = (int8x16_t)vdupq_n_s16(v33);
          uint64_t v471 = v30;
          uint64_t v472 = v29;
          while (v23 >= 0x10)
          {
            if ((unint64_t)(v30 + v467 * v466 - (v29 + v468 * v466)) < 0x20)
            {
              for (uint64_t i7 = 0; i7 != v23; *(_WORD *)(v471 + 2 * i7++) = v477)
              {
LABEL_556:
                if (*(__int16 *)(v472 + 2 * i7) <= v32) {
                  __int16 v477 = (int)v28;
                }
                else {
                  __int16 v477 = 0;
                }
              }
              goto LABEL_548;
            }
            uint64_t v474 = 0;
            do
            {
              int8x16_t v475 = vbicq_s8(v470, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v472 + v474 + 16), v469));
              v476 = (int8x16_t *)(v471 + v474);
              int8x16_t *v476 = vbicq_s8(v470, (int8x16_t)vcgtq_s16(*(int16x8_t *)(v472 + v474), v469));
              v476[1] = v475;
              v474 += 32;
            }
            while (((2 * v23) & 0x1FFFFFFE0) != v474);
            uint64_t i7 = v23 & 0xFFFFFFF0;
            if (i7 != v23) {
              goto LABEL_556;
            }
LABEL_548:
            ++v466;
            v472 += v468;
            v471 += v467;
            if (v466 == v22) {
              goto LABEL_851;
            }
          }
          uint64_t i7 = 0;
          goto LABEL_556;
        case 2:
          if (v22 < 1 || v23 < 1) {
            goto LABEL_851;
          }
          uint64_t v478 = 0;
          uint64_t v479 = 2 * v25;
          uint64_t v480 = 2 * v24;
          int16x8_t v481 = vdupq_n_s16(v32);
          uint64_t v482 = v30;
          uint64_t v483 = v29;
          while (v23 >= 0x10)
          {
            if ((unint64_t)(v30 + v479 * v478 - (v29 + v480 * v478)) < 0x20)
            {
              for (uint64_t i8 = 0; i8 != v23; *(_WORD *)(v482 + 2 * i8++) = v488)
              {
LABEL_572:
                signed int v488 = *(__int16 *)(v483 + 2 * i8);
                if (v32 < v488) {
                  LOWORD(v488) = (int)v27;
                }
              }
              goto LABEL_564;
            }
            uint64_t v485 = 0;
            do
            {
              int16x8_t v486 = vminq_s16(v481, *(int16x8_t *)(v483 + v485 + 16));
              v487 = (int16x8_t *)(v482 + v485);
              int16x8_t *v487 = vminq_s16(v481, *(int16x8_t *)(v483 + v485));
              v487[1] = v486;
              v485 += 32;
            }
            while (((2 * v23) & 0x1FFFFFFE0) != v485);
            uint64_t i8 = v23 & 0xFFFFFFF0;
            if (i8 != v23) {
              goto LABEL_572;
            }
LABEL_564:
            ++v478;
            v483 += v480;
            v482 += v479;
            if (v478 == v22) {
              goto LABEL_851;
            }
          }
          uint64_t i8 = 0;
          goto LABEL_572;
        case 3:
          if (v22 < 1 || v23 < 1) {
            goto LABEL_851;
          }
          uint64_t v489 = 0;
          uint64_t v490 = 2 * v25;
          uint64_t v491 = 2 * v24;
          int16x8_t v492 = vdupq_n_s16(v32);
          uint64_t v493 = v30;
          uint64_t v494 = v29;
          while (v23 >= 0x10)
          {
            if ((unint64_t)(v30 + v490 * v489 - (v29 + v491 * v489)) < 0x20)
            {
              for (uint64_t i9 = 0; i9 != v23; *(_WORD *)(v493 + 2 * i9++) = v499)
              {
LABEL_587:
                signed int v499 = *(__int16 *)(v494 + 2 * i9);
                if (v499 <= v32) {
                  LOWORD(v499) = 0;
                }
              }
              goto LABEL_579;
            }
            uint64_t v496 = 0;
            do
            {
              int8x16_t v497 = vandq_s8(*(int8x16_t *)(v494 + v496 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v494 + v496 + 16), v492));
              v498 = (int8x16_t *)(v493 + v496);
              int8x16_t *v498 = vandq_s8(*(int8x16_t *)(v494 + v496), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v494 + v496), v492));
              v498[1] = v497;
              v496 += 32;
            }
            while (((2 * v23) & 0x1FFFFFFE0) != v496);
            uint64_t i9 = v23 & 0xFFFFFFF0;
            if (i9 != v23) {
              goto LABEL_587;
            }
LABEL_579:
            ++v489;
            v494 += v491;
            v493 += v490;
            if (v489 == v22) {
              goto LABEL_851;
            }
          }
          uint64_t i9 = 0;
          goto LABEL_587;
        case 4:
          if (v22 < 1 || v23 < 1) {
            goto LABEL_851;
          }
          uint64_t v500 = 0;
          uint64_t v501 = 2 * v25;
          uint64_t v502 = 2 * v24;
          int16x8_t v503 = vdupq_n_s16(v32);
          uint64_t v504 = v30;
          uint64_t v505 = v29;
          break;
        default:
          long long __b = 0uLL;
          sub_1002D2278(-5, (uint64_t *)&__b, "threshGeneric", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 120);
      }
      while (v23 >= 0x10)
      {
        if ((unint64_t)(v30 + v501 * v500 - (v29 + v502 * v500)) < 0x20)
        {
          for (uint64_t i10 = 0; i10 != v23; *(_WORD *)(v504 + 2 * i10++) = v510)
          {
LABEL_602:
            signed int v510 = *(__int16 *)(v505 + 2 * i10);
            if (v510 > v32) {
              LOWORD(v510) = 0;
            }
          }
          goto LABEL_594;
        }
        uint64_t v507 = 0;
        do
        {
          int8x16_t v508 = vbicq_s8(*(int8x16_t *)(v505 + v507 + 16), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v505 + v507 + 16), v503));
          v509 = (int8x16_t *)(v504 + v507);
          int8x16_t *v509 = vbicq_s8(*(int8x16_t *)(v505 + v507), (int8x16_t)vcgtq_s16(*(int16x8_t *)(v505 + v507), v503));
          v509[1] = v508;
          v507 += 32;
        }
        while (((2 * v23) & 0x1FFFFFFE0) != v507);
        uint64_t i10 = v23 & 0xFFFFFFF0;
        if (i10 != v23) {
          goto LABEL_602;
        }
LABEL_594:
        ++v500;
        v505 += v502;
        v504 += v501;
        if (v500 == v22) {
          goto LABEL_851;
        }
      }
      uint64_t i10 = 0;
      goto LABEL_602;
    case 5u:
      int v55 = *v701;
      int v56 = v701[1] + v701[1] * ((v696 >> 3) & 0x1FF);
      if ((v696 & 0x4000) != 0)
      {
        int v57 = (v689[0] & 0x4000) != 0 ? *v701 : 1;
        v56 *= v57;
        if ((v689[0] & 0x4000) != 0) {
          int v55 = 1;
        }
      }
      double v58 = *(double *)(a1 + 200);
      double v59 = *(double *)(a1 + 208);
      uint64_t v60 = v698;
      unint64_t v61 = v703;
      uint64_t v62 = v690;
      unint64_t v63 = v695;
      int v64 = *(_DWORD *)(a1 + 216);
      char v65 = sub_1002D21FC(3);
      *(float *)v66.i32 = v58;
      int32x2_t v685 = v66;
      *(float *)v66.i32 = v59;
      int32x2_t v687 = v66;
      if ((v65 & 1) != 0 || sub_1002D21FC(100))
      {
        unint64_t v67 = v61 >> 2;
        unint64_t v68 = v63 >> 2;
        float32x4_t v69 = (float32x4_t)vdupq_lane_s32(v685, 0);
        int8x16_t v70 = (int8x16_t)vdupq_lane_s32(v687, 0);
        switch(v64)
        {
          case 0:
            if (v55 < 1) {
              goto LABEL_851;
            }
            uint64_t v71 = 0;
            float32x4_t v72 = (float32x4_t)vdupq_lane_s32(v685, 0);
            int8x16_t v73 = (int8x16_t)vdupq_lane_s32(v687, 0);
            uint64_t v74 = 4 * v68;
            uint64_t v75 = 4 * v67;
            uint64_t v76 = v60;
            uint64_t v77 = v62;
            while (1)
            {
              if (v56 >= 8)
              {
                uint64_t v79 = 0;
                uint64_t v78 = 0;
                do
                {
                  int8x16_t v80 = vandq_s8(v70, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v76 + v79 + 16), v69));
                  unint64_t v81 = (int8x16_t *)(v77 + v79);
                  *unint64_t v81 = vandq_s8(v70, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v76 + v79), v69));
                  v81[1] = v80;
                  v78 += 8;
                  v79 += 32;
                }
                while (v78 <= v56 - 8);
                uint64_t v78 = v78;
                if ((int)v78 >= v56) {
                  goto LABEL_53;
                }
              }
              else
              {
                uint64_t v78 = 0;
                if (v56 <= 0) {
                  goto LABEL_53;
                }
              }
              unint64_t v82 = v56 - v78;
              if (v82 < 8)
              {
                float v83 = *(float *)v687.i32;
                goto LABEL_67;
              }
              uint64_t v84 = 4 * v78;
              if (v62
                 + (v63 & 0xFFFFFFFFFFFFFFFCLL) * v71
                 + 4 * v78
                 - (v60
                  + (v61 & 0xFFFFFFFFFFFFFFFCLL) * v71
                  + 4 * v78) < 0x20)
              {
                float v83 = *(float *)v687.i32;
                do
                {
LABEL_67:
                  if (*(float *)(v76 + 4 * v78) <= *(float *)v685.i32) {
                    float v88 = 0.0;
                  }
                  else {
                    float v88 = v83;
                  }
                  *(float *)(v77 + 4 * v78++) = v88;
                }
                while (v56 != v78);
                goto LABEL_53;
              }
              v78 += v82 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v85 = v82 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                int8x16_t v86 = vandq_s8(v73, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v76 + v84 + 16), v72));
                double v87 = (int8x16_t *)(v77 + v84);
                *double v87 = vandq_s8(v73, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v76 + v84), v72));
                v87[1] = v86;
                v84 += 32;
                v85 -= 8;
              }
              while (v85);
              float v83 = *(float *)v687.i32;
              if (v82 != (v82 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_67;
              }
LABEL_53:
              ++v71;
              v77 += v74;
              v76 += v75;
              if (v71 == v55) {
                goto LABEL_851;
              }
            }
          case 1:
            if (v55 < 1) {
              goto LABEL_851;
            }
            uint64_t v264 = 0;
            float32x4_t v265 = (float32x4_t)vdupq_lane_s32(v685, 0);
            int8x16_t v266 = (int8x16_t)vdupq_lane_s32(v687, 0);
            uint64_t v267 = 4 * v68;
            uint64_t v268 = 4 * v67;
            uint64_t v269 = v60;
            uint64_t v270 = v62;
            while (1)
            {
              if (v56 >= 8)
              {
                uint64_t v272 = 0;
                uint64_t v271 = 0;
                do
                {
                  int8x16_t v273 = vandq_s8(v70, (int8x16_t)vcgeq_f32(v69, *(float32x4_t *)(v269 + v272 + 16)));
                  unint64_t v274 = (int8x16_t *)(v270 + v272);
                  *unint64_t v274 = vandq_s8(v70, (int8x16_t)vcgeq_f32(v69, *(float32x4_t *)(v269 + v272)));
                  v274[1] = v273;
                  v271 += 8;
                  v272 += 32;
                }
                while (v271 <= v56 - 8);
                uint64_t v271 = v271;
                if ((int)v271 >= v56) {
                  goto LABEL_303;
                }
              }
              else
              {
                uint64_t v271 = 0;
                if (v56 <= 0) {
                  goto LABEL_303;
                }
              }
              unint64_t v275 = v56 - v271;
              if (v275 < 8)
              {
                float v276 = *(float *)v687.i32;
                goto LABEL_317;
              }
              uint64_t v277 = 4 * v271;
              if (v62
                 + (v63 & 0xFFFFFFFFFFFFFFFCLL) * v264
                 + 4 * v271
                 - (v60
                  + (v61 & 0xFFFFFFFFFFFFFFFCLL) * v264
                  + 4 * v271) < 0x20)
              {
                float v276 = *(float *)v687.i32;
                do
                {
LABEL_317:
                  if (*(float *)(v269 + 4 * v271) <= *(float *)v685.i32) {
                    float v281 = v276;
                  }
                  else {
                    float v281 = 0.0;
                  }
                  *(float *)(v270 + 4 * v271++) = v281;
                }
                while (v56 != v271);
                goto LABEL_303;
              }
              v271 += v275 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v278 = v275 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                int8x16_t v279 = vandq_s8(v266, (int8x16_t)vcgeq_f32(v265, *(float32x4_t *)(v269 + v277 + 16)));
                uint64_t v280 = (int8x16_t *)(v270 + v277);
                *uint64_t v280 = vandq_s8(v266, (int8x16_t)vcgeq_f32(v265, *(float32x4_t *)(v269 + v277)));
                v280[1] = v279;
                v277 += 32;
                v278 -= 8;
              }
              while (v278);
              float v276 = *(float *)v687.i32;
              if (v275 != (v275 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_317;
              }
LABEL_303:
              ++v264;
              v270 += v267;
              v269 += v268;
              if (v264 == v55) {
                goto LABEL_851;
              }
            }
          case 2:
            if (v55 < 1) {
              goto LABEL_851;
            }
            uint64_t v282 = 0;
            int8x16_t v283 = (int8x16_t)vdupq_lane_s32(v685, 0);
            uint64_t v284 = 4 * v68;
            uint64_t v285 = 4 * v67;
            uint64_t v286 = v60;
            uint64_t v287 = v62;
            while (1)
            {
              if (v56 >= 8)
              {
                uint64_t v289 = 0;
                uint64_t v288 = 0;
                do
                {
                  float32x4_t v290 = vminq_f32(*(float32x4_t *)(v286 + v289 + 16), v69);
                  int8x16_t v291 = (float32x4_t *)(v287 + v289);
                  *int8x16_t v291 = vminq_f32(*(float32x4_t *)(v286 + v289), v69);
                  v291[1] = v290;
                  v288 += 8;
                  v289 += 32;
                }
                while (v288 <= v56 - 8);
                uint64_t v288 = v288;
                if ((int)v288 < v56)
                {
LABEL_331:
                  unint64_t v292 = v56 - v288;
                  if (v292 < 8) {
                    goto LABEL_879;
                  }
                  uint64_t v293 = 4 * v288;
                  if (v62
                     + (v63 & 0xFFFFFFFFFFFFFFFCLL) * v282
                     + 4 * v288
                     - (v60
                      + (v61 & 0xFFFFFFFFFFFFFFFCLL) * v282
                      + 4 * v288) < 0x20)
                    goto LABEL_879;
                  v288 += v292 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v294 = v292 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    int8x16_t v295 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v286 + v293 + 16), (float32x4_t)v283), v283, *(int8x16_t *)(v286 + v293 + 16));
                    int8x8_t v296 = (int8x16_t *)(v287 + v293);
                    *int8x8_t v296 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v286 + v293), (float32x4_t)v283), v283, *(int8x16_t *)(v286 + v293));
                    v296[1] = v295;
                    v293 += 32;
                    v294 -= 8;
                  }
                  while (v294);
                  if (v292 != (v292 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_879:
                    do
                    {
                      float v297 = *(float *)(v286 + 4 * v288);
                      if (v297 > *(float *)v685.i32) {
                        float v297 = *(float *)v685.i32;
                      }
                      *(float *)(v287 + 4 * v288++) = v297;
                    }
                    while (v56 != v288);
                  }
                }
              }
              else
              {
                uint64_t v288 = 0;
                if (v56 > 0) {
                  goto LABEL_331;
                }
              }
              ++v282;
              v287 += v284;
              v286 += v285;
              if (v282 == v55) {
                goto LABEL_851;
              }
            }
          case 3:
            if (v55 < 1) {
              goto LABEL_851;
            }
            uint64_t v298 = 0;
            float32x4_t v299 = (float32x4_t)vdupq_lane_s32(v685, 0);
            uint64_t v300 = 4 * v68;
            uint64_t v301 = 4 * v67;
            uint64_t v302 = v60;
            uint64_t v303 = v62;
            while (1)
            {
              if (v56 >= 8)
              {
                uint64_t v305 = 0;
                uint64_t v304 = 0;
                do
                {
                  int8x16_t v306 = vandq_s8(*(int8x16_t *)(v302 + v305 + 16), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v302 + v305 + 16), v69));
                  int8x8_t v307 = (int8x16_t *)(v303 + v305);
                  *int8x8_t v307 = vandq_s8(*(int8x16_t *)(v302 + v305), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v302 + v305), v69));
                  v307[1] = v306;
                  v304 += 8;
                  v305 += 32;
                }
                while (v304 <= v56 - 8);
                uint64_t v304 = v304;
                if ((int)v304 < v56)
                {
LABEL_349:
                  unint64_t v308 = v56 - v304;
                  if (v308 < 8) {
                    goto LABEL_880;
                  }
                  uint64_t v309 = 4 * v304;
                  if (v62
                     + (v63 & 0xFFFFFFFFFFFFFFFCLL) * v298
                     + 4 * v304
                     - (v60
                      + (v61 & 0xFFFFFFFFFFFFFFFCLL) * v298
                      + 4 * v304) < 0x20)
                    goto LABEL_880;
                  v304 += v308 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v310 = v308 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    int8x16_t v311 = vandq_s8(*(int8x16_t *)(v302 + v309 + 16), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v302 + v309 + 16), v299));
                    int8x8_t v312 = (int8x16_t *)(v303 + v309);
                    *int8x8_t v312 = vandq_s8(*(int8x16_t *)(v302 + v309), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v302 + v309), v299));
                    v312[1] = v311;
                    v309 += 32;
                    v310 -= 8;
                  }
                  while (v310);
                  if (v308 != (v308 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_880:
                    do
                    {
                      float v313 = *(float *)(v302 + 4 * v304);
                      if (v313 <= *(float *)v685.i32) {
                        float v313 = 0.0;
                      }
                      *(float *)(v303 + 4 * v304++) = v313;
                    }
                    while (v56 != v304);
                  }
                }
              }
              else
              {
                uint64_t v304 = 0;
                if (v56 > 0) {
                  goto LABEL_349;
                }
              }
              ++v298;
              v303 += v300;
              v302 += v301;
              if (v298 == v55) {
                goto LABEL_851;
              }
            }
          case 4:
            if (v55 < 1) {
              goto LABEL_851;
            }
            uint64_t v314 = 0;
            float32x4_t v315 = (float32x4_t)vdupq_lane_s32(v685, 0);
            uint64_t v316 = 4 * v68;
            uint64_t v317 = 4 * v67;
            uint64_t v318 = v60;
            uint64_t v319 = v62;
            break;
          default:
            long long __b = 0uLL;
            sub_1002D2278(-5, (uint64_t *)&__b, "thresh_32f", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 853);
        }
        while (1)
        {
          if (v56 >= 8)
          {
            uint64_t v321 = 0;
            uint64_t v320 = 0;
            do
            {
              int8x16_t v322 = vandq_s8(*(int8x16_t *)(v318 + v321 + 16), (int8x16_t)vcgeq_f32(v69, *(float32x4_t *)(v318 + v321 + 16)));
              float64x2_t v323 = (int8x16_t *)(v319 + v321);
              *float64x2_t v323 = vandq_s8(*(int8x16_t *)(v318 + v321), (int8x16_t)vcgeq_f32(v69, *(float32x4_t *)(v318 + v321)));
              v323[1] = v322;
              v320 += 8;
              v321 += 32;
            }
            while (v320 <= v56 - 8);
            uint64_t v320 = v320;
            if ((int)v320 < v56)
            {
LABEL_367:
              unint64_t v324 = v56 - v320;
              if (v324 < 8) {
                goto LABEL_881;
              }
              uint64_t v325 = 4 * v320;
              if (v62
                 + (v63 & 0xFFFFFFFFFFFFFFFCLL) * v314
                 + 4 * v320
                 - (v60
                  + (v61 & 0xFFFFFFFFFFFFFFFCLL) * v314
                  + 4 * v320) < 0x20)
                goto LABEL_881;
              v320 += v324 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v326 = v324 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                int8x16_t v327 = vandq_s8(*(int8x16_t *)(v318 + v325 + 16), (int8x16_t)vcgeq_f32(v315, *(float32x4_t *)(v318 + v325 + 16)));
                float64x2_t v328 = (int8x16_t *)(v319 + v325);
                *float64x2_t v328 = vandq_s8(*(int8x16_t *)(v318 + v325), (int8x16_t)vcgeq_f32(v315, *(float32x4_t *)(v318 + v325)));
                v328[1] = v327;
                v325 += 32;
                v326 -= 8;
              }
              while (v326);
              if (v324 != (v324 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_881:
                do
                {
                  float v329 = *(float *)(v318 + 4 * v320);
                  if (v329 > *(float *)v685.i32) {
                    float v329 = 0.0;
                  }
                  *(float *)(v319 + 4 * v320++) = v329;
                }
                while (v56 != v320);
              }
            }
          }
          else
          {
            uint64_t v320 = 0;
            if (v56 > 0) {
              goto LABEL_367;
            }
          }
          ++v314;
          v319 += v316;
          v318 += v317;
          if (v314 == v55) {
            goto LABEL_851;
          }
        }
      }
      switch(v64)
      {
        case 0:
          if (v55 < 1 || v56 < 1) {
            goto LABEL_851;
          }
          uint64_t v156 = 0;
          unint64_t v157 = v63 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v158 = v61 & 0xFFFFFFFFFFFFFFFCLL;
          float32x4_t v159 = (float32x4_t)vdupq_lane_s32(v685, 0);
          int8x16_t v160 = (int8x16_t)vdupq_lane_s32(v687, 0);
          uint64_t v161 = v62;
          uint64_t v162 = v60;
          while (v56 >= 8 && v62 + v157 * v156 - (v60 + v158 * v156) >= 0x20)
          {
            uint64_t v166 = 0;
            do
            {
              int8x16_t v167 = vandq_s8(v160, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v162 + v166 + 16), v159));
              uint64_t v168 = (int8x16_t *)(v161 + v166);
              int8x16_t *v168 = vandq_s8(v160, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v162 + v166), v159));
              v168[1] = v167;
              v166 += 32;
            }
            while (((4 * v56) & 0x3FFFFFFE0) != v166);
            uint64_t v163 = v56 & 0xFFFFFFF8;
            float v164 = *(float *)v687.i32;
            if (v163 != v56) {
              goto LABEL_151;
            }
LABEL_147:
            ++v156;
            v162 += v158;
            v161 += v157;
            if (v156 == v55) {
              goto LABEL_851;
            }
          }
          uint64_t v163 = 0;
          float v164 = *(float *)v687.i32;
          do
          {
LABEL_151:
            if (*(float *)(v162 + 4 * v163) <= *(float *)v685.i32) {
              float v165 = 0.0;
            }
            else {
              float v165 = v164;
            }
            *(float *)(v161 + 4 * v163++) = v165;
          }
          while (v56 != v163);
          goto LABEL_147;
        case 1:
          if (v55 < 1 || v56 < 1) {
            goto LABEL_851;
          }
          uint64_t v511 = 0;
          unint64_t v512 = v63 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v513 = v61 & 0xFFFFFFFFFFFFFFFCLL;
          float32x4_t v514 = (float32x4_t)vdupq_lane_s32(v685, 0);
          int8x16_t v515 = (int8x16_t)vdupq_lane_s32(v687, 0);
          uint64_t v516 = v62;
          uint64_t v517 = v60;
          while (v56 >= 8 && v62 + v512 * v511 - (v60 + v513 * v511) >= 0x20)
          {
            uint64_t v521 = 0;
            do
            {
              int8x16_t v522 = vandq_s8(v515, (int8x16_t)vcgeq_f32(v514, *(float32x4_t *)(v517 + v521 + 16)));
              v523 = (int8x16_t *)(v516 + v521);
              int8x16_t *v523 = vandq_s8(v515, (int8x16_t)vcgeq_f32(v514, *(float32x4_t *)(v517 + v521)));
              v523[1] = v522;
              v521 += 32;
            }
            while (((4 * v56) & 0x3FFFFFFE0) != v521);
            uint64_t v518 = v56 & 0xFFFFFFF8;
            float v519 = *(float *)v687.i32;
            if (v518 != v56) {
              goto LABEL_614;
            }
LABEL_610:
            ++v511;
            v517 += v513;
            v516 += v512;
            if (v511 == v55) {
              goto LABEL_851;
            }
          }
          uint64_t v518 = 0;
          float v519 = *(float *)v687.i32;
          do
          {
LABEL_614:
            if (*(float *)(v517 + 4 * v518) <= *(float *)v685.i32) {
              float v520 = v519;
            }
            else {
              float v520 = 0.0;
            }
            *(float *)(v516 + 4 * v518++) = v520;
          }
          while (v56 != v518);
          goto LABEL_610;
        case 2:
          if (v55 < 1 || v56 < 1) {
            goto LABEL_851;
          }
          uint64_t v524 = 0;
          unint64_t v525 = v63 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v526 = v61 & 0xFFFFFFFFFFFFFFFCLL;
          int8x16_t v527 = (int8x16_t)vdupq_lane_s32(v685, 0);
          uint64_t v528 = v62;
          uint64_t v529 = v60;
          while (v56 >= 8)
          {
            if (v62 + v525 * v524 - (v60 + v526 * v524) < 0x20)
            {
              for (uint64_t i11 = 0; i11 != v56; *(float *)(v528 + 4 * i11++) = v534)
              {
LABEL_634:
                float v534 = *(float *)(v529 + 4 * i11);
                if (v534 > *(float *)v685.i32) {
                  float v534 = *(float *)v685.i32;
                }
              }
              goto LABEL_626;
            }
            uint64_t v531 = 0;
            do
            {
              int8x16_t v532 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v529 + v531 + 16), (float32x4_t)v527), v527, *(int8x16_t *)(v529 + v531 + 16));
              v533 = (int8x16_t *)(v528 + v531);
              int8x16_t *v533 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v529 + v531), (float32x4_t)v527), v527, *(int8x16_t *)(v529 + v531));
              v533[1] = v532;
              v531 += 32;
            }
            while (((4 * v56) & 0x3FFFFFFE0) != v531);
            uint64_t i11 = v56 & 0xFFFFFFF8;
            if (i11 != v56) {
              goto LABEL_634;
            }
LABEL_626:
            ++v524;
            v529 += v526;
            v528 += v525;
            if (v524 == v55) {
              goto LABEL_851;
            }
          }
          uint64_t i11 = 0;
          goto LABEL_634;
        case 3:
          if (v55 < 1 || v56 < 1) {
            goto LABEL_851;
          }
          uint64_t v535 = 0;
          unint64_t v536 = v63 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v537 = v61 & 0xFFFFFFFFFFFFFFFCLL;
          float32x4_t v538 = (float32x4_t)vdupq_lane_s32(v685, 0);
          uint64_t v539 = v62;
          uint64_t v540 = v60;
          while (v56 >= 8)
          {
            if (v62 + v536 * v535 - (v60 + v537 * v535) < 0x20)
            {
              for (uint64_t i12 = 0; i12 != v56; *(float *)(v539 + 4 * i12++) = v545)
              {
LABEL_649:
                float v545 = *(float *)(v540 + 4 * i12);
                if (v545 <= *(float *)v685.i32) {
                  float v545 = 0.0;
                }
              }
              goto LABEL_641;
            }
            uint64_t v542 = 0;
            do
            {
              int8x16_t v543 = vandq_s8(*(int8x16_t *)(v540 + v542 + 16), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v540 + v542 + 16), v538));
              v544 = (int8x16_t *)(v539 + v542);
              int8x16_t *v544 = vandq_s8(*(int8x16_t *)(v540 + v542), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v540 + v542), v538));
              v544[1] = v543;
              v542 += 32;
            }
            while (((4 * v56) & 0x3FFFFFFE0) != v542);
            uint64_t i12 = v56 & 0xFFFFFFF8;
            if (i12 != v56) {
              goto LABEL_649;
            }
LABEL_641:
            ++v535;
            v540 += v537;
            v539 += v536;
            if (v535 == v55) {
              goto LABEL_851;
            }
          }
          uint64_t i12 = 0;
          goto LABEL_649;
        case 4:
          if (v55 < 1 || v56 < 1) {
            goto LABEL_851;
          }
          uint64_t v546 = 0;
          unint64_t v547 = v63 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v548 = v61 & 0xFFFFFFFFFFFFFFFCLL;
          float32x4_t v549 = (float32x4_t)vdupq_lane_s32(v685, 0);
          uint64_t v550 = v62;
          uint64_t v551 = v60;
          break;
        default:
          long long __b = 0uLL;
          sub_1002D2278(-5, (uint64_t *)&__b, "threshGeneric", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 120);
      }
      while (v56 >= 8)
      {
        if (v62 + v547 * v546 - (v60 + v548 * v546) < 0x20)
        {
          for (uint64_t i13 = 0; i13 != v56; *(float *)(v550 + 4 * i13++) = v556)
          {
LABEL_664:
            float v556 = *(float *)(v551 + 4 * i13);
            if (v556 > *(float *)v685.i32) {
              float v556 = 0.0;
            }
          }
          goto LABEL_656;
        }
        uint64_t v553 = 0;
        do
        {
          int8x16_t v554 = vandq_s8(*(int8x16_t *)(v551 + v553 + 16), (int8x16_t)vcgeq_f32(v549, *(float32x4_t *)(v551 + v553 + 16)));
          v555 = (int8x16_t *)(v550 + v553);
          int8x16_t *v555 = vandq_s8(*(int8x16_t *)(v551 + v553), (int8x16_t)vcgeq_f32(v549, *(float32x4_t *)(v551 + v553)));
          v555[1] = v554;
          v553 += 32;
        }
        while (((4 * v56) & 0x3FFFFFFE0) != v553);
        uint64_t i13 = v56 & 0xFFFFFFF8;
        if (i13 != v56) {
          goto LABEL_664;
        }
LABEL_656:
        ++v546;
        v551 += v548;
        v550 += v547;
        if (v546 == v55) {
          goto LABEL_851;
        }
      }
      uint64_t i13 = 0;
      goto LABEL_664;
    case 6u:
      int v89 = *v701;
      int v90 = v701[1] + v701[1] * ((v696 >> 3) & 0x1FF);
      if ((v696 & 0x4000) != 0)
      {
        int v91 = (v689[0] & 0x4000) != 0 ? *v701 : 1;
        v90 *= v91;
        if ((v689[0] & 0x4000) != 0) {
          int v89 = 1;
        }
      }
      uint64_t v92 = v698;
      unint64_t v93 = v703;
      uint64_t v94 = v690;
      unint64_t v95 = v695;
      uint64_t v688 = *(void *)(a1 + 200);
      uint64_t v686 = *(void *)(a1 + 208);
      int v96 = *(_DWORD *)(a1 + 216);
      if ((sub_1002D21FC(3) & 1) != 0 || sub_1002D21FC(100))
      {
        unint64_t v97 = v93 >> 3;
        unint64_t v98 = v95 >> 3;
        float64x2_t v99 = (float64x2_t)vdupq_lane_s64(v688, 0);
        int8x16_t v100 = (int8x16_t)vdupq_lane_s64(v686, 0);
        switch(v96)
        {
          case 0:
            if (v89 < 1) {
              goto LABEL_851;
            }
            uint64_t v101 = 0;
            float64x2_t v102 = (float64x2_t)vdupq_lane_s64(v688, 0);
            int8x16_t v103 = (int8x16_t)vdupq_lane_s64(v686, 0);
            uint64_t v104 = 8 * v98;
            uint64_t v105 = 8 * v97;
            uint64_t v106 = v92;
            uint64_t v107 = v94;
            while (1)
            {
              if (v90 >= 4)
              {
                uint64_t v109 = 0;
                uint64_t v108 = 0;
                do
                {
                  int8x16_t v110 = vandq_s8(v100, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v106 + v109 + 16), v99));
                  double v111 = (int8x16_t *)(v107 + v109);
                  int8x16_t *v111 = vandq_s8(v100, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v106 + v109), v99));
                  v111[1] = v110;
                  v108 += 4;
                  v109 += 32;
                }
                while (v108 <= v90 - 4);
                uint64_t v108 = v108;
                if ((int)v108 >= v90) {
                  goto LABEL_83;
                }
              }
              else
              {
                uint64_t v108 = 0;
                if (v90 <= 0) {
                  goto LABEL_83;
                }
              }
              unint64_t v112 = v90 - v108;
              if (v112 < 8
                || (uint64_t v113 = 8 * v108,
                    v94
                  + (v95 & 0xFFFFFFFFFFFFFFF8) * v101
                  + 8 * v108
                  - (v92
                   + (v93 & 0xFFFFFFFFFFFFFFF8) * v101
                   + 8 * v108) < 0x20))
              {
                double v115 = *(double *)&v686;
                double v114 = *(double *)&v688;
                do
                {
LABEL_93:
                  if (*(double *)(v106 + 8 * v108) <= v114) {
                    double v116 = 0.0;
                  }
                  else {
                    double v116 = v115;
                  }
                  *(double *)(v107 + 8 * v108++) = v116;
                }
                while (v90 != v108);
                goto LABEL_83;
              }
              v108 += v112 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v117 = v112 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                int8x16_t v118 = vandq_s8(v103, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v106 + v113 + 16), v102));
                double v119 = (int8x16_t *)(v107 + v113);
                int8x16_t *v119 = vandq_s8(v103, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v106 + v113), v102));
                v119[1] = v118;
                v113 += 32;
                v117 -= 4;
              }
              while (v117);
              double v115 = *(double *)&v686;
              double v114 = *(double *)&v688;
              if (v112 != (v112 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_93;
              }
LABEL_83:
              ++v101;
              v107 += v104;
              v106 += v105;
              if (v101 == v89) {
                goto LABEL_851;
              }
            }
          case 1:
            if (v89 < 1) {
              goto LABEL_851;
            }
            uint64_t v330 = 0;
            float64x2_t v331 = (float64x2_t)vdupq_lane_s64(v688, 0);
            int8x16_t v332 = (int8x16_t)vdupq_lane_s64(v686, 0);
            uint64_t v333 = 8 * v98;
            uint64_t v334 = 8 * v97;
            uint64_t v335 = v92;
            uint64_t v336 = v94;
            while (1)
            {
              if (v90 >= 4)
              {
                uint64_t v338 = 0;
                uint64_t v337 = 0;
                do
                {
                  int8x16_t v339 = vandq_s8(v100, (int8x16_t)vcgeq_f64(v99, *(float64x2_t *)(v335 + v338 + 16)));
                  int8x8_t v340 = (int8x16_t *)(v336 + v338);
                  *int8x8_t v340 = vandq_s8(v100, (int8x16_t)vcgeq_f64(v99, *(float64x2_t *)(v335 + v338)));
                  v340[1] = v339;
                  v337 += 4;
                  v338 += 32;
                }
                while (v337 <= v90 - 4);
                uint64_t v337 = v337;
                if ((int)v337 >= v90) {
                  goto LABEL_378;
                }
              }
              else
              {
                uint64_t v337 = 0;
                if (v90 <= 0) {
                  goto LABEL_378;
                }
              }
              unint64_t v341 = v90 - v337;
              if (v341 < 8
                || (uint64_t v342 = 8 * v337,
                    v94
                  + (v95 & 0xFFFFFFFFFFFFFFF8) * v330
                  + 8 * v337
                  - (v92
                   + (v93 & 0xFFFFFFFFFFFFFFF8) * v330
                   + 8 * v337) < 0x20))
              {
                double v344 = *(double *)&v686;
                double v343 = *(double *)&v688;
                do
                {
LABEL_388:
                  if (*(double *)(v335 + 8 * v337) <= v343) {
                    double v345 = v344;
                  }
                  else {
                    double v345 = 0.0;
                  }
                  *(double *)(v336 + 8 * v337++) = v345;
                }
                while (v90 != v337);
                goto LABEL_378;
              }
              v337 += v341 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v346 = v341 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                int8x16_t v347 = vandq_s8(v332, (int8x16_t)vcgeq_f64(v331, *(float64x2_t *)(v335 + v342 + 16)));
                int8x8_t v348 = (int8x16_t *)(v336 + v342);
                *int8x8_t v348 = vandq_s8(v332, (int8x16_t)vcgeq_f64(v331, *(float64x2_t *)(v335 + v342)));
                v348[1] = v347;
                v342 += 32;
                v346 -= 4;
              }
              while (v346);
              double v344 = *(double *)&v686;
              double v343 = *(double *)&v688;
              if (v341 != (v341 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_388;
              }
LABEL_378:
              ++v330;
              v336 += v333;
              v335 += v334;
              if (v330 == v89) {
                goto LABEL_851;
              }
            }
          case 2:
            if (v89 < 1) {
              goto LABEL_851;
            }
            uint64_t v349 = 0;
            float64x2_t v350 = (float64x2_t)vdupq_lane_s64(v688, 0);
            uint64_t v351 = 8 * v98;
            uint64_t v352 = 8 * v97;
            uint64_t v353 = v92;
            uint64_t v354 = v94;
            while (1)
            {
              if (v90 >= 4)
              {
                uint64_t v356 = 0;
                uint64_t v355 = 0;
                do
                {
                  float64x2_t v357 = vminq_f64(*(float64x2_t *)(v353 + v356 + 16), v99);
                  uint64_t v358 = (float64x2_t *)(v354 + v356);
                  *uint64_t v358 = vminq_f64(*(float64x2_t *)(v353 + v356), v99);
                  v358[1] = v357;
                  v355 += 4;
                  v356 += 32;
                }
                while (v355 <= v90 - 4);
                uint64_t v355 = v355;
                if ((int)v355 >= v90) {
                  goto LABEL_399;
                }
              }
              else
              {
                uint64_t v355 = 0;
                if (v90 <= 0) {
                  goto LABEL_399;
                }
              }
              unint64_t v359 = v90 - v355;
              if (v359 < 8)
              {
                double v360 = *(double *)&v688;
                goto LABEL_413;
              }
              uint64_t v361 = 8 * v355;
              if (v94
                 + (v95 & 0xFFFFFFFFFFFFFFF8) * v349
                 + 8 * v355
                 - (v92
                  + (v93 & 0xFFFFFFFFFFFFFFF8) * v349
                  + 8 * v355) < 0x20)
              {
                double v360 = *(double *)&v688;
                do
                {
LABEL_413:
                  double v365 = *(double *)(v353 + 8 * v355);
                  if (v365 > v360) {
                    double v365 = v360;
                  }
                  *(double *)(v354 + 8 * v355++) = v365;
                }
                while (v90 != v355);
                goto LABEL_399;
              }
              v355 += v359 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v362 = v359 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                int8x16_t v363 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v353 + v361 + 16), v350), (int8x16_t)v350, *(int8x16_t *)(v353 + v361 + 16));
                int8x8_t v364 = (int8x16_t *)(v354 + v361);
                *int8x8_t v364 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v353 + v361), v350), (int8x16_t)v350, *(int8x16_t *)(v353 + v361));
                v364[1] = v363;
                v361 += 32;
                v362 -= 4;
              }
              while (v362);
              double v360 = *(double *)&v688;
              if (v359 != (v359 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_413;
              }
LABEL_399:
              ++v349;
              v354 += v351;
              v353 += v352;
              if (v349 == v89) {
                goto LABEL_851;
              }
            }
          case 3:
            if (v89 < 1) {
              goto LABEL_851;
            }
            uint64_t v366 = 0;
            float64x2_t v367 = (float64x2_t)vdupq_lane_s64(v688, 0);
            uint64_t v368 = 8 * v98;
            uint64_t v369 = 8 * v97;
            uint64_t v370 = v92;
            uint64_t v371 = v94;
            while (1)
            {
              if (v90 >= 4)
              {
                uint64_t v373 = 0;
                uint64_t v372 = 0;
                do
                {
                  int8x16_t v374 = vandq_s8(*(int8x16_t *)(v370 + v373 + 16), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v370 + v373 + 16), v99));
                  int8x8_t v375 = (int8x16_t *)(v371 + v373);
                  *int8x8_t v375 = vandq_s8(*(int8x16_t *)(v370 + v373), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v370 + v373), v99));
                  v375[1] = v374;
                  v372 += 4;
                  v373 += 32;
                }
                while (v372 <= v90 - 4);
                uint64_t v372 = v372;
                if ((int)v372 >= v90) {
                  goto LABEL_419;
                }
              }
              else
              {
                uint64_t v372 = 0;
                if (v90 <= 0) {
                  goto LABEL_419;
                }
              }
              unint64_t v376 = v90 - v372;
              if (v376 < 8)
              {
                double v377 = *(double *)&v688;
                goto LABEL_433;
              }
              uint64_t v378 = 8 * v372;
              if (v94
                 + (v95 & 0xFFFFFFFFFFFFFFF8) * v366
                 + 8 * v372
                 - (v92
                  + (v93 & 0xFFFFFFFFFFFFFFF8) * v366
                  + 8 * v372) < 0x20)
              {
                double v377 = *(double *)&v688;
                do
                {
LABEL_433:
                  double v382 = *(double *)(v370 + 8 * v372);
                  if (v382 <= v377) {
                    double v382 = 0.0;
                  }
                  *(double *)(v371 + 8 * v372++) = v382;
                }
                while (v90 != v372);
                goto LABEL_419;
              }
              v372 += v376 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v379 = v376 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                int8x16_t v380 = vandq_s8(*(int8x16_t *)(v370 + v378 + 16), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v370 + v378 + 16), v367));
                float64x2_t v381 = (int8x16_t *)(v371 + v378);
                *float64x2_t v381 = vandq_s8(*(int8x16_t *)(v370 + v378), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v370 + v378), v367));
                v381[1] = v380;
                v378 += 32;
                v379 -= 4;
              }
              while (v379);
              double v377 = *(double *)&v688;
              if (v376 != (v376 & 0xFFFFFFFFFFFFFFFCLL)) {
                goto LABEL_433;
              }
LABEL_419:
              ++v366;
              v371 += v368;
              v370 += v369;
              if (v366 == v89) {
                goto LABEL_851;
              }
            }
          case 4:
            if (v89 < 1) {
              goto LABEL_851;
            }
            uint64_t v383 = 0;
            float64x2_t v384 = (float64x2_t)vdupq_lane_s64(v688, 0);
            uint64_t v385 = 8 * v98;
            uint64_t v386 = 8 * v97;
            uint64_t v387 = v92;
            uint64_t v388 = v94;
            break;
          default:
            long long __b = 0uLL;
            sub_1002D2278(-5, (uint64_t *)&__b, "thresh_64f", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 993);
        }
        while (1)
        {
          if (v90 >= 4)
          {
            uint64_t v390 = 0;
            uint64_t v389 = 0;
            do
            {
              int8x16_t v391 = vandq_s8(*(int8x16_t *)(v387 + v390 + 16), (int8x16_t)vcgeq_f64(v99, *(float64x2_t *)(v387 + v390 + 16)));
              int8x8_t v392 = (int8x16_t *)(v388 + v390);
              *int8x8_t v392 = vandq_s8(*(int8x16_t *)(v387 + v390), (int8x16_t)vcgeq_f64(v99, *(float64x2_t *)(v387 + v390)));
              v392[1] = v391;
              v389 += 4;
              v390 += 32;
            }
            while (v389 <= v90 - 4);
            uint64_t v389 = v389;
            if ((int)v389 >= v90) {
              goto LABEL_439;
            }
          }
          else
          {
            uint64_t v389 = 0;
            if (v90 <= 0) {
              goto LABEL_439;
            }
          }
          unint64_t v393 = v90 - v389;
          if (v393 < 8)
          {
            double v394 = *(double *)&v688;
            goto LABEL_453;
          }
          uint64_t v395 = 8 * v389;
          if (v94
             + (v95 & 0xFFFFFFFFFFFFFFF8) * v383
             + 8 * v389
             - (v92
              + (v93 & 0xFFFFFFFFFFFFFFF8) * v383
              + 8 * v389) < 0x20)
          {
            double v394 = *(double *)&v688;
            do
            {
LABEL_453:
              double v399 = *(double *)(v387 + 8 * v389);
              if (v399 > v394) {
                double v399 = 0.0;
              }
              *(double *)(v388 + 8 * v389++) = v399;
            }
            while (v90 != v389);
            goto LABEL_439;
          }
          v389 += v393 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v396 = v393 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            int8x16_t v397 = vandq_s8(*(int8x16_t *)(v387 + v395 + 16), (int8x16_t)vcgeq_f64(v384, *(float64x2_t *)(v387 + v395 + 16)));
            float64x2_t v398 = (int8x16_t *)(v388 + v395);
            *float64x2_t v398 = vandq_s8(*(int8x16_t *)(v387 + v395), (int8x16_t)vcgeq_f64(v384, *(float64x2_t *)(v387 + v395)));
            v398[1] = v397;
            v395 += 32;
            v396 -= 4;
          }
          while (v396);
          double v394 = *(double *)&v688;
          if (v393 != (v393 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_453;
          }
LABEL_439:
          ++v383;
          v388 += v385;
          v387 += v386;
          if (v383 == v89) {
            goto LABEL_851;
          }
        }
      }
      break;
    default:
      goto LABEL_851;
  }
  switch(v96)
  {
    case 0:
      if (v89 < 1 || v90 < 1) {
        goto LABEL_851;
      }
      uint64_t v169 = 0;
      unint64_t v170 = v95 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v171 = v93 & 0xFFFFFFFFFFFFFFF8;
      float64x2_t v172 = (float64x2_t)vdupq_lane_s64(v688, 0);
      int8x16_t v173 = (int8x16_t)vdupq_lane_s64(v686, 0);
      uint64_t v174 = v94;
      uint64_t v175 = v92;
      while (v90 >= 4 && v94 + v170 * v169 - (v92 + v171 * v169) >= 0x20)
      {
        uint64_t v180 = 0;
        do
        {
          int8x16_t v181 = vandq_s8(v173, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v175 + v180 + 16), v172));
          uint64_t v182 = (int8x16_t *)(v174 + v180);
          int8x16_t *v182 = vandq_s8(v173, (int8x16_t)vcgtq_f64(*(float64x2_t *)(v175 + v180), v172));
          v182[1] = v181;
          v180 += 32;
        }
        while (((8 * v90) & 0x7FFFFFFE0) != v180);
        uint64_t v176 = v90 & 0xFFFFFFFC;
        double v178 = *(double *)&v686;
        double v177 = *(double *)&v688;
        if (v176 != v90) {
          goto LABEL_168;
        }
LABEL_164:
        ++v169;
        v175 += v171;
        v174 += v170;
        if (v169 == v89) {
          goto LABEL_851;
        }
      }
      uint64_t v176 = 0;
      double v178 = *(double *)&v686;
      double v177 = *(double *)&v688;
      do
      {
LABEL_168:
        if (*(double *)(v175 + 8 * v176) <= v177) {
          double v179 = 0.0;
        }
        else {
          double v179 = v178;
        }
        *(double *)(v174 + 8 * v176++) = v179;
      }
      while (v90 != v176);
      goto LABEL_164;
    case 1:
      if (v89 < 1 || v90 < 1) {
        goto LABEL_851;
      }
      uint64_t v557 = 0;
      unint64_t v558 = v95 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v559 = v93 & 0xFFFFFFFFFFFFFFF8;
      float64x2_t v560 = (float64x2_t)vdupq_lane_s64(v688, 0);
      int8x16_t v561 = (int8x16_t)vdupq_lane_s64(v686, 0);
      uint64_t v562 = v94;
      uint64_t v563 = v92;
      while (v90 >= 4 && v94 + v558 * v557 - (v92 + v559 * v557) >= 0x20)
      {
        uint64_t v568 = 0;
        do
        {
          int8x16_t v569 = vandq_s8(v561, (int8x16_t)vcgeq_f64(v560, *(float64x2_t *)(v563 + v568 + 16)));
          v570 = (int8x16_t *)(v562 + v568);
          int8x16_t *v570 = vandq_s8(v561, (int8x16_t)vcgeq_f64(v560, *(float64x2_t *)(v563 + v568)));
          v570[1] = v569;
          v568 += 32;
        }
        while (((8 * v90) & 0x7FFFFFFE0) != v568);
        uint64_t v564 = v90 & 0xFFFFFFFC;
        double v566 = *(double *)&v686;
        double v565 = *(double *)&v688;
        if (v564 != v90) {
          goto LABEL_675;
        }
LABEL_671:
        ++v557;
        v563 += v559;
        v562 += v558;
        if (v557 == v89) {
          goto LABEL_851;
        }
      }
      uint64_t v564 = 0;
      double v566 = *(double *)&v686;
      double v565 = *(double *)&v688;
      do
      {
LABEL_675:
        if (*(double *)(v563 + 8 * v564) <= v565) {
          double v567 = v566;
        }
        else {
          double v567 = 0.0;
        }
        *(double *)(v562 + 8 * v564++) = v567;
      }
      while (v90 != v564);
      goto LABEL_671;
    case 2:
      if (v89 < 1 || v90 < 1) {
        goto LABEL_851;
      }
      uint64_t v571 = 0;
      unint64_t v572 = v95 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v573 = v93 & 0xFFFFFFFFFFFFFFF8;
      float64x2_t v574 = (float64x2_t)vdupq_lane_s64(v688, 0);
      uint64_t v575 = v94;
      uint64_t v576 = v92;
      while (v90 >= 4 && v94 + v572 * v571 - (v92 + v573 * v571) >= 0x20)
      {
        uint64_t v580 = 0;
        do
        {
          int8x16_t v581 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v576 + v580 + 16), v574), (int8x16_t)v574, *(int8x16_t *)(v576 + v580 + 16));
          v582 = (int8x16_t *)(v575 + v580);
          int8x16_t *v582 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v576 + v580), v574), (int8x16_t)v574, *(int8x16_t *)(v576 + v580));
          v582[1] = v581;
          v580 += 32;
        }
        while (((8 * v90) & 0x7FFFFFFE0) != v580);
        uint64_t v577 = v90 & 0xFFFFFFFC;
        double v578 = *(double *)&v688;
        if (v577 != v90) {
          goto LABEL_691;
        }
LABEL_687:
        ++v571;
        v576 += v573;
        v575 += v572;
        if (v571 == v89) {
          goto LABEL_851;
        }
      }
      uint64_t v577 = 0;
      double v578 = *(double *)&v688;
      do
      {
LABEL_691:
        double v579 = *(double *)(v576 + 8 * v577);
        if (v579 > v578) {
          double v579 = v578;
        }
        *(double *)(v575 + 8 * v577++) = v579;
      }
      while (v90 != v577);
      goto LABEL_687;
    case 3:
      if (v89 < 1 || v90 < 1) {
        goto LABEL_851;
      }
      uint64_t v583 = 0;
      unint64_t v584 = v95 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v585 = v93 & 0xFFFFFFFFFFFFFFF8;
      float64x2_t v586 = (float64x2_t)vdupq_lane_s64(v688, 0);
      uint64_t v587 = v94;
      uint64_t v588 = v92;
      while (v90 >= 4 && v94 + v584 * v583 - (v92 + v585 * v583) >= 0x20)
      {
        uint64_t v592 = 0;
        do
        {
          int8x16_t v593 = vandq_s8(*(int8x16_t *)(v588 + v592 + 16), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v588 + v592 + 16), v586));
          v594 = (int8x16_t *)(v587 + v592);
          int8x16_t *v594 = vandq_s8(*(int8x16_t *)(v588 + v592), (int8x16_t)vcgtq_f64(*(float64x2_t *)(v588 + v592), v586));
          v594[1] = v593;
          v592 += 32;
        }
        while (((8 * v90) & 0x7FFFFFFE0) != v592);
        uint64_t v589 = v90 & 0xFFFFFFFC;
        double v590 = *(double *)&v688;
        if (v589 != v90) {
          goto LABEL_706;
        }
LABEL_702:
        ++v583;
        v588 += v585;
        v587 += v584;
        if (v583 == v89) {
          goto LABEL_851;
        }
      }
      uint64_t v589 = 0;
      double v590 = *(double *)&v688;
      do
      {
LABEL_706:
        double v591 = *(double *)(v588 + 8 * v589);
        if (v591 <= v590) {
          double v591 = 0.0;
        }
        *(double *)(v587 + 8 * v589++) = v591;
      }
      while (v90 != v589);
      goto LABEL_702;
    case 4:
      if (v89 < 1 || v90 < 1) {
        goto LABEL_851;
      }
      uint64_t v595 = 0;
      unint64_t v596 = v95 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v597 = v93 & 0xFFFFFFFFFFFFFFF8;
      float64x2_t v598 = (float64x2_t)vdupq_lane_s64(v688, 0);
      uint64_t v599 = v94;
      uint64_t v600 = v92;
      break;
    default:
      long long __b = 0uLL;
      sub_1002D2278(-5, (uint64_t *)&__b, "threshGeneric", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/thresh.cpp", 120);
  }
  while (v90 >= 4 && v94 + v596 * v595 - (v92 + v597 * v595) >= 0x20)
  {
    uint64_t v604 = 0;
    do
    {
      int8x16_t v605 = vandq_s8(*(int8x16_t *)(v600 + v604 + 16), (int8x16_t)vcgeq_f64(v598, *(float64x2_t *)(v600 + v604 + 16)));
      v606 = (int8x16_t *)(v599 + v604);
      int8x16_t *v606 = vandq_s8(*(int8x16_t *)(v600 + v604), (int8x16_t)vcgeq_f64(v598, *(float64x2_t *)(v600 + v604)));
      v606[1] = v605;
      v604 += 32;
    }
    while (((8 * v90) & 0x7FFFFFFE0) != v604);
    uint64_t v601 = v90 & 0xFFFFFFFC;
    double v602 = *(double *)&v688;
    if (v601 != v90) {
      goto LABEL_721;
    }
LABEL_717:
    ++v595;
    v600 += v597;
    v599 += v596;
    if (v595 == v89) {
      goto LABEL_851;
    }
  }
  uint64_t v601 = 0;
  double v602 = *(double *)&v688;
  do
  {
LABEL_721:
    double v603 = *(double *)(v600 + 8 * v601);
    if (v603 > v602) {
      double v603 = 0.0;
    }
    *(double *)(v599 + 8 * v601++) = v603;
  }
  while (v90 != v601);
  goto LABEL_717;
}

void sub_10039E388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039E564(uint64_t a1)
{
  *(void *)a1 = off_10049C750;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

int *sub_10039E69C(__int16 a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  if (!a2 || !a3 || !a4)
  {
    v13[0] = 0;
    v13[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v13, 45), "arr != 0 && contour_header != 0 && block != 0", 45);
    sub_1002D2278(-215, v13, "cvPointSeqFromMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/utils.cpp", 47);
  }
  unsigned int v8 = *(_DWORD *)a2;
  if (HIWORD(*(_DWORD *)a2) != 16962 || *(int *)(a2 + 36) < 1 || *(int *)(a2 + 32) < 1 || !*(void *)(a2 + 24))
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    qmemcpy((void *)sub_1002D19D8(&v11, 33), "Input array is not a valid matrix", 33);
    sub_1002D2278(-5, &v11, "cvPointSeqFromMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/utils.cpp", 54);
  }
  if ((v8 & 0xFF8) == 0 && *(_DWORD *)(a2 + 36) == 2)
  {
    uint64_t v6 = sub_1002331E4(a2, (uint64_t)v13, 2, 0);
    unsigned int v8 = *(_DWORD *)v6;
  }
  if ((v8 & 0xFFF) - 14 <= 0xFFFFFFFD)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    qmemcpy((void *)sub_1002D19D8(&v11, 87), "The matrix can not be converted to point sequence because of inappropriate element type", 87);
    sub_1002D2278(-210, &v11, "cvPointSeqFromMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/utils.cpp", 63);
  }
  int v9 = *(_DWORD *)(v6 + 36);
  if (v9 != 1 && *(_DWORD *)(v6 + 32) != 1 || (*(unsigned char *)(v6 + 1) & 0x40) == 0)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    qmemcpy((void *)sub_1002D19D8(&v11, 75), "The matrix converted to point sequence must be 1-dimensional and continuous", 75);
    sub_1002D2278(-5, &v11, "cvPointSeqFromMat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/utils.cpp", 68);
  }
  sub_10025B108(v8 & 0xFFF | a1 & 0x7000, 128, (((v8 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (v8 & 7))) & 3), *(void *)(v6 + 24), *(_DWORD *)(v6 + 32) * v9, a3, a4);
  return a3;
}

void sub_10039E928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_10039E988(void *result, int a2)
{
  result[143] = sub_10039EA10;
  uint64_t v2 = sub_10039EBB0;
  uint64_t v3 = sub_10039EAD8;
  uint64_t v4 = sub_10039EA3C;
  if (a2 != 3)
  {
    if (a2 != 4) {
      return result;
    }
    uint64_t v2 = sub_10039ED1C;
    uint64_t v3 = sub_10039EB60;
    uint64_t v4 = sub_10039EAA0;
  }
  result[142] = v4;
  result[144] = v3;
  result[145] = v2;
  return result;
}

int8x16_t sub_10039EA10(uint64_t a1, int8x16_t *a2, int8x16_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 1)
  {
    uint64_t v4 = (int8x16_t *)((char *)a2 + v3);
    do
    {
      int8x16_t v5 = *a3++;
      int8x16_t result = vaddq_s8(v5, *a2);
      *a2++ = result;
    }
    while (a2 < v4);
  }
  return result;
}

int8x16_t sub_10039EA3C(uint64_t a1, unint64_t a2, int8x16_t result)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 1)
  {
    unint64_t v4 = a2 + v3;
    int8x16_t result = *(int8x16_t *)a2;
    int8x8_t v5 = (int8x8_t)vextq_s8(result, result, 8uLL).u64[0];
    int8x8_t v6 = 0;
    unint64_t v7 = a2;
    do
    {
      int8x8_t v8 = vadd_s8(*(int8x8_t *)result.i8, v6);
      int8x8_t v9 = vadd_s8(vext_s8(*(int8x8_t *)result.i8, v5, 3uLL), v8);
      int8x8_t v10 = vadd_s8(v9, vext_s8(*(int8x8_t *)result.i8, v5, 6uLL));
      int8x16_t v11 = *(int8x16_t *)(v7 + 12);
      v7 += 12;
      int8x16_t result = v11;
      int8x8_t v6 = vadd_s8(v10, vext_s8(v5, v5, 1uLL));
      *(_DWORD *)a2 = v8.i32[0];
      *(_DWORD *)(a2 + 3) = v9.i32[0];
      int8x8_t v5 = (int8x8_t)vextq_s8(result, result, 8uLL).u64[0];
      *(_DWORD *)(a2 + 6) = v10.i32[0];
      *(_DWORD *)(a2 + 9) = v6.i32[0];
      a2 = v7;
    }
    while (v7 < v4);
  }
  return result;
}

int8x8_t sub_10039EAA0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 1)
  {
    unint64_t v3 = a2 + v2;
    int8x8_t v4 = 0;
    do
    {
      float32x2x4_t v8 = vld4_f32((const float *)a2);
      int8x8_t result = vadd_s8(v4, (int8x8_t)v8.val[0]);
      int8x8_t v6 = vadd_s8(result, (int8x8_t)v8.val[1]);
      int8x8_t v7 = vadd_s8(v6, (int8x8_t)v8.val[2]);
      int8x8_t v4 = vadd_s8(v7, (int8x8_t)v8.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v6.i32[0];
      *(_DWORD *)(a2 + 8) = v7.i32[0];
      *(_DWORD *)(a2 + 12) = v4.i32[0];
      a2 += 16;
    }
    while (a2 < v3);
  }
  return result;
}

int8x8_t sub_10039EAD8(uint64_t a1, unint64_t a2, _OWORD *a3, int8x8_t result)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= 1)
  {
    unint64_t v5 = a2 + v4;
    int8x16_t v6 = *(int8x16_t *)a2;
    int8x8_t result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
    uint8x8_t v7 = 0;
    unint64_t v8 = a2;
    do
    {
      int8x16_t v9 = *(int8x16_t *)a3;
      a3 = (_OWORD *)((char *)a3 + 12);
      int8x16_t v10 = v9;
      uint8x8_t v11 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v7, *(uint8x8_t *)v9.i8), *(int8x8_t *)v6.i8);
      int8x8_t v12 = vext_s8(*(int8x8_t *)v6.i8, result, 6uLL);
      uint8x8_t v13 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v11, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 3uLL)), vext_s8(*(int8x8_t *)v6.i8, result, 3uLL));
      int8x8_t v14 = vext_s8(result, result, 1uLL);
      int8x16_t v15 = *(int8x16_t *)(v8 + 12);
      v8 += 12;
      int8x16_t v6 = v15;
      int8x8_t result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
      uint8x8_t v16 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v13, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 6uLL)), v12);
      *(_DWORD *)a2 = v11.i32[0];
      *(_DWORD *)(a2 + 3) = v13.i32[0];
      uint8x8_t v7 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v16, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, vextq_s8(v10, v10, 8uLL), 9uLL)), v14);
      *(_DWORD *)(a2 + 6) = v16.i32[0];
      *(_DWORD *)(a2 + 9) = v7.i32[0];
      a2 = v8;
    }
    while (v8 < v5);
  }
  return result;
}

uint8x8_t sub_10039EB60(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 1)
  {
    unint64_t v4 = a2 + v3;
    uint8x8_t v5 = 0;
    do
    {
      float32x2x4_t v9 = vld4_f32((const float *)a2);
      float32x2x4_t v10 = vld4_f32(a3);
      uint8x8_t result = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v5, (uint8x8_t)v10.val[0]), (int8x8_t)v9.val[0]);
      uint8x8_t v7 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(result, (uint8x8_t)v10.val[1]), (int8x8_t)v9.val[1]);
      uint8x8_t v8 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v7, (uint8x8_t)v10.val[2]), (int8x8_t)v9.val[2]);
      uint8x8_t v5 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v8, (uint8x8_t)v10.val[3]), (int8x8_t)v9.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v7.i32[0];
      *(_DWORD *)(a2 + 8) = v8.i32[0];
      *(_DWORD *)(a2 + 12) = v5.i32[0];
      a2 += 16;
      a3 += 4;
    }
    while (a2 < v4);
  }
  return result;
}

int8x8_t sub_10039EBB0(uint64_t a1, unint64_t a2, _OWORD *a3, int8x8_t result)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= 1)
  {
    unint64_t v5 = a2 + v4;
    int8x16_t v6 = *(int8x16_t *)a2;
    uint8x8_t result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
    int8x8_t v7 = 0;
    int8x8_t v8 = 0;
    unint64_t v9 = a2;
    do
    {
      int8x16_t v10 = *(int8x16_t *)a3;
      a3 = (_OWORD *)((char *)a3 + 12);
      int8x16_t v11 = v10;
      uint16x8_t v12 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v8), vshll_n_u8((uint8x8_t)v7, 1uLL));
      int8x8_t v13 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v12, vabdl_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v7))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v8, (uint8x8_t)v7), vabd_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v7))), v8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v8, (uint8x8_t)v7), v12)), v7, *(int8x8_t *)v10.i8)), *(int8x8_t *)v6.i8);
      v12.i64[0] = vextq_s8(v11, v11, 3uLL).u64[0];
      uint16x8_t v14 = vabdq_u16(vaddl_u8((uint8x8_t)v13, *(uint8x8_t *)v12.i8), vshll_n_u8(*(uint8x8_t *)v10.i8, 1uLL));
      *(int8x8_t *)v14.uint64_t i8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v14, vabdl_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v10.i8))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v13, *(uint8x8_t *)v10.i8), vabd_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v10.i8))), v13, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v13, *(uint8x8_t *)v10.i8), v14)), *(int8x8_t *)v10.i8, *(int8x8_t *)v12.i8)), vext_s8(*(int8x8_t *)v6.i8, result, 3uLL));
      int8x8_t v15 = (int8x8_t)vextq_s8(v11, v11, 6uLL).u64[0];
      uint16x8_t v16 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v14.i8, (uint8x8_t)v15), vshll_n_u8(*(uint8x8_t *)v12.i8, 1uLL));
      *(int8x8_t *)v12.uint64_t i8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v16, vabdl_u8((uint8x8_t)v15, *(uint8x8_t *)v12.i8))), (int8x8_t)vcge_u8(vabd_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v12.i8), vabd_u8((uint8x8_t)v15, *(uint8x8_t *)v12.i8))), *(int8x8_t *)v14.i8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v12.i8), v16)), *(int8x8_t *)v12.i8, v15)), vext_s8(*(int8x8_t *)v6.i8, result, 6uLL));
      int8x8_t v17 = vext_s8(result, result, 1uLL);
      int8x16_t v18 = *(int8x16_t *)(v9 + 12);
      v9 += 12;
      int8x16_t v6 = v18;
      int8x8_t v7 = (int8x8_t)vextq_s8(v11, vextq_s8(v11, v11, 8uLL), 9uLL).u64[0];
      uint8x8_t result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
      uint16x8_t v19 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v7), vshll_n_u8((uint8x8_t)v15, 1uLL));
      *(_DWORD *)a2 = v13.i32[0];
      *(_DWORD *)(a2 + 3) = v14.i32[0];
      int8x8_t v8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v19, vabdl_u8((uint8x8_t)v7, (uint8x8_t)v15))), (int8x8_t)vcge_u8(vabd_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v15), vabd_u8((uint8x8_t)v7, (uint8x8_t)v15))), *(int8x8_t *)v12.i8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v15), v19)), v15, v7)), v17);
      *(_DWORD *)(a2 + 6) = v12.i32[0];
      *(_DWORD *)(a2 + 9) = v8.i32[0];
      a2 = v9;
    }
    while (v9 < v5);
  }
  return result;
}

int8x8_t sub_10039ED1C(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 1)
  {
    unint64_t v4 = a2 + v3;
    int8x8_t v5 = 0;
    int8x8_t v6 = 0;
    do
    {
      float32x2x4_t v15 = vld4_f32((const float *)a2);
      float32x2x4_t v14 = vld4_f32(a3);
      uint16x8_t v7 = vabdq_u16(vaddl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v6), vshll_n_u8((uint8x8_t)v5, 1uLL));
      int8x8_t result = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v7, vabdl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v5))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v6, (uint8x8_t)v5), vabd_u8((uint8x8_t)v14.val[0], (uint8x8_t)v5))), v6, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v6, (uint8x8_t)v5), v7)), v5, (int8x8_t)v14.val[0])), (int8x8_t)v15.val[0]);
      uint16x8_t v9 = vabdq_u16(vaddl_u8((uint8x8_t)result, (uint8x8_t)v14.val[1]), vshll_n_u8((uint8x8_t)v14.val[0], 1uLL));
      int8x8_t v10 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v9, vabdl_u8((uint8x8_t)v14.val[1], (uint8x8_t)v14.val[0]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)result, (uint8x8_t)v14.val[0]), vabd_u8((uint8x8_t)v14.val[1], (uint8x8_t)v14.val[0]))), result, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)result, (uint8x8_t)v14.val[0]), v9)), (int8x8_t)v14.val[0], (int8x8_t)v14.val[1])), (int8x8_t)v15.val[1]);
      uint16x8_t v11 = vabdq_u16(vaddl_u8((uint8x8_t)v10, (uint8x8_t)v14.val[2]), vshll_n_u8((uint8x8_t)v14.val[1], 1uLL));
      int8x8_t v12 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v11, vabdl_u8((uint8x8_t)v14.val[2], (uint8x8_t)v14.val[1]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v10, (uint8x8_t)v14.val[1]), vabd_u8((uint8x8_t)v14.val[2], (uint8x8_t)v14.val[1]))), v10, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v10, (uint8x8_t)v14.val[1]), v11)), (int8x8_t)v14.val[1], (int8x8_t)v14.val[2])), (int8x8_t)v15.val[2]);
      uint16x8_t v13 = vabdq_u16(vaddl_u8((uint8x8_t)v12, (uint8x8_t)v14.val[3]), vshll_n_u8((uint8x8_t)v14.val[2], 1uLL));
      int8x8_t v6 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v13, vabdl_u8((uint8x8_t)v14.val[3], (uint8x8_t)v14.val[2]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v12, (uint8x8_t)v14.val[2]), vabd_u8((uint8x8_t)v14.val[3], (uint8x8_t)v14.val[2]))), v12, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v12, (uint8x8_t)v14.val[2]), v13)), (int8x8_t)v14.val[2], (int8x8_t)v14.val[3])), (int8x8_t)v15.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v10.i32[0];
      *(_DWORD *)(a2 + 8) = v12.i32[0];
      *(_DWORD *)(a2 + 12) = v6.i32[0];
      a2 += 16;
      a3 += 4;
      int8x8_t v5 = (int8x8_t)v14.val[3];
    }
    while (a2 < v4);
  }
  return result;
}

uint64_t sub_10039EE58(uint64_t a1, unint64_t a2, size_t a3)
{
  if (a3 <= 8)
  {
    if (!a3) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    a3 = 8;
  }
  if (a2 > 7) {
    return 0xFFFFFFFFLL;
  }
  if (a3 + a2 > 8) {
    a3 = 8 - a2;
  }
  return memcmp((const void *)(a1 + a2), (char *)&unk_10040C008 + a2, a3);
}

void *sub_10039EEA4(void *result, unsigned int a2, unsigned int a3)
{
  if (result) {
    return sub_1003A49AC(result, a3 * (unint64_t)a2);
  }
  return result;
}

uLong sub_10039EEB8(uint64_t a1)
{
  uLong result = crc32(0, 0, 0);
  *(_DWORD *)(a1 + 580) = result;
  return result;
}

uint64_t sub_10039EEEC(uint64_t result, Bytef *buf, uint64_t a3)
{
  if ((*(unsigned char *)(result + 531) & 0x20) != 0) {
    BOOL v3 = (~*(_DWORD *)(result + 296) & 0x300) != 0;
  }
  else {
    BOOL v3 = (*(_DWORD *)(result + 296) & 0x800) == 0;
  }
  if (a3 && v3)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uLong result = *(unsigned int *)(result + 580);
    do
    {
      if (v4) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = 0xFFFFFFFFLL;
      }
      uLong result = crc32(result, buf, v7);
      buf += v7;
      v4 -= v7;
    }
    while (v4);
    *(_DWORD *)(v6 + 580) = result;
  }
  return result;
}

uint64_t sub_10039EF70(uint64_t a1, unsigned __int8 *a2)
{
  if (a2)
  {
    int v4 = *a2;
    if (v4 != 49) {
      *(_DWORD *)(a1 + 296) |= 0x20000u;
    }
    unsigned int v5 = v4 == 46;
    if (v4)
    {
      int v6 = a2[1];
      if (v6 == 46) {
        ++v5;
      }
      else {
        *(_DWORD *)(a1 + 296) |= 0x20000u;
      }
      if (v5 <= 1 && v6 != 0)
      {
        int v8 = a2[2];
        if (v8 != 54) {
          *(_DWORD *)(a1 + 296) |= 0x20000u;
        }
        if (v8 == 46) {
          ++v5;
        }
        if (v5 <= 1 && v8 != 0)
        {
          int v10 = a2[3];
          if (v10 == 46) {
            ++v5;
          }
          else {
            *(_DWORD *)(a1 + 296) |= 0x20000u;
          }
          if (v5 <= 1 && v10 != 0)
          {
            int v16 = a2[4];
            if (v16 != 51) {
              *(_DWORD *)(a1 + 296) |= 0x20000u;
            }
            if (v16 == 46) {
              ++v5;
            }
            if (v5 <= 1 && v16)
            {
              int v17 = a2[5];
              if (v17 != 52) {
                *(_DWORD *)(a1 + 296) |= 0x20000u;
              }
              if (v17 == 46) {
                ++v5;
              }
              if (v5 <= 1 && v17)
              {
                if (a2[6]) {
                  *(_DWORD *)(a1 + 296) |= 0x20000u;
                }
              }
            }
          }
        }
      }
    }
    if ((*(unsigned char *)(a1 + 298) & 2) == 0) {
      return 1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 296) |= 0x20000u;
  }
  unint64_t v13 = sub_1003A3544((uint64_t)v18, 0x80uLL, 0, "Application built with libpng-");
  unint64_t v14 = sub_1003A3544((uint64_t)v18, 0x80uLL, v13, a2);
  unint64_t v15 = sub_1003A3544((uint64_t)v18, 0x80uLL, v14, " but running with ");
  sub_1003A3544((uint64_t)v18, 0x80uLL, v15, "1.6.34");
  sub_1003A3704(a1, (uint64_t)v18);
  return 0;
}

void *sub_10039F16C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  memset(v16, 0, sizeof(v16));
  bzero(__src, 0x4E0uLL);
  HIDWORD(__src[130]) = 1000000;
  __src[131] = 0x3E8000F4240;
  __src[132] = 8000000;
  sub_1003A4A10(__src, a5, a6, a7);
  sub_1003A44F0(__src, a2, a3, a4);
  if (setjmp((int *)v16)) {
    return 0;
  }
  __src[25] = v16;
  __src[26] = 0;
  __src[24] = &_longjmp;
  if (!sub_10039EF70((uint64_t)__src, a1)) {
    return 0;
  }
  uLong result = sub_1003A49AC(__src, 0x4E0uLL);
  if (result)
  {
    unint64_t v15 = result;
    __src[47] = sub_10039EEA4;
    __src[48] = sub_10039EEB4;
    __src[49] = result;
    memset(&__src[24], 0, 24);
    memcpy(result, __src, 0x4E0uLL);
    return v15;
  }
  return result;
}

double sub_10039F318(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = sub_1003A47DC(a1, 0x168uLL);
    if (v1)
    {
      v1[44] = 0;
      double result = 0.0;
      *((_OWORD *)v1 + 20) = 0u;
      *((_OWORD *)v1 + 21) = 0u;
      *((_OWORD *)v1 + 18) = 0u;
      *((_OWORD *)v1 + 19) = 0u;
      *((_OWORD *)v1 + 16) = 0u;
      *((_OWORD *)v1 + 17) = 0u;
      *((_OWORD *)v1 + 14) = 0u;
      *((_OWORD *)v1 + 15) = 0u;
      *((_OWORD *)v1 + 12) = 0u;
      *((_OWORD *)v1 + 13) = 0u;
      *((_OWORD *)v1 + 10) = 0u;
      *((_OWORD *)v1 + 11) = 0u;
      *((_OWORD *)v1 + 8) = 0u;
      *((_OWORD *)v1 + 9) = 0u;
      *((_OWORD *)v1 + 6) = 0u;
      *((_OWORD *)v1 + 7) = 0u;
      *((_OWORD *)v1 + 4) = 0u;
      *((_OWORD *)v1 + 5) = 0u;
      *((_OWORD *)v1 + 2) = 0u;
      *((_OWORD *)v1 + 3) = 0u;
      *(_OWORD *)uint64_t v1 = 0u;
      *((_OWORD *)v1 + 1) = 0u;
    }
  }
  return result;
}

void sub_10039F374(uint64_t a1, void **a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v2 = *a2;
      if (*a2)
      {
        *a2 = 0;
        sub_10039F410(a1, (uint64_t)v2, 0xFFFFu, -1);
        v2[44] = 0;
        *((_OWORD *)v2 + 20) = 0u;
        *((_OWORD *)v2 + 21) = 0u;
        *((_OWORD *)v2 + 18) = 0u;
        *((_OWORD *)v2 + 19) = 0u;
        *((_OWORD *)v2 + 16) = 0u;
        *((_OWORD *)v2 + 17) = 0u;
        *((_OWORD *)v2 + 14) = 0u;
        *((_OWORD *)v2 + 15) = 0u;
        *((_OWORD *)v2 + 12) = 0u;
        *((_OWORD *)v2 + 13) = 0u;
        *((_OWORD *)v2 + 10) = 0u;
        *((_OWORD *)v2 + 11) = 0u;
        *((_OWORD *)v2 + 8) = 0u;
        *((_OWORD *)v2 + 9) = 0u;
        *((_OWORD *)v2 + 6) = 0u;
        *((_OWORD *)v2 + 7) = 0u;
        *((_OWORD *)v2 + 4) = 0u;
        *((_OWORD *)v2 + 5) = 0u;
        *((_OWORD *)v2 + 2) = 0u;
        *((_OWORD *)v2 + 3) = 0u;
        *(_OWORD *)uint64_t v2 = 0u;
        *((_OWORD *)v2 + 1) = 0u;
        sub_1003A46CC(a1, v2);
      }
    }
  }
}

void sub_10039F410(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (!a1 || !a2) {
    return;
  }
  int v8 = *(void ***)(a2 + 160);
  if (!v8 || (a3 & *(_DWORD *)(a2 + 300) & 0x4000) == 0)
  {
LABEL_7:
    int v9 = *(_DWORD *)(a2 + 300);
    if ((a3 & v9 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (a4 != -1)
  {
    sub_1003A46CC(a1, v8[7 * a4 + 1]);
    *(void *)(*(void *)(a2 + 160) + 56 * a4 + 8) = 0;
    goto LABEL_7;
  }
  if (*(int *)(a2 + 148) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 8;
    do
    {
      sub_1003A46CC(a1, *(void **)(*(void *)(a2 + 160) + v18));
      ++v17;
      v18 += 56;
    }
    while (v17 < *(int *)(a2 + 148));
    int v8 = *(void ***)(a2 + 160);
  }
  sub_1003A46CC(a1, v8);
  *(void *)(a2 + 160) = 0;
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(a2 + 152) = 0;
  int v9 = *(_DWORD *)(a2 + 300);
  if ((a3 & v9 & 0x2000) != 0)
  {
LABEL_8:
    *(_DWORD *)(a2 + 8) &= ~0x10u;
    sub_1003A46CC(a1, *(void **)(a2 + 184));
    *(void *)(a2 + 184) = 0;
    *(_WORD *)(a2 + 34) = 0;
    int v9 = *(_DWORD *)(a2 + 300);
  }
LABEL_9:
  if ((a3 & v9 & 0x100) != 0)
  {
    sub_1003A46CC(a1, *(void **)(a2 + 336));
    sub_1003A46CC(a1, *(void **)(a2 + 344));
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 344) = 0;
    *(_DWORD *)(a2 + 8) &= ~0x4000u;
    int v9 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v9 & 0x80) != 0)
  {
    sub_1003A46CC(a1, *(void **)(a2 + 264));
    sub_1003A46CC(a1, *(void **)(a2 + 280));
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 280) = 0;
    int v10 = *(void **)(a2 + 288);
    if (v10)
    {
      if (*(unsigned char *)(a2 + 297))
      {
        unint64_t v11 = 0;
        do
          sub_1003A46CC(a1, *(void **)(*(void *)(a2 + 288) + 8 * v11++));
        while (v11 < *(unsigned __int8 *)(a2 + 297));
        int v10 = *(void **)(a2 + 288);
      }
      sub_1003A46CC(a1, v10);
      *(void *)(a2 + 288) = 0;
    }
    *(_DWORD *)(a2 + 8) &= ~0x400u;
    int v9 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v9 & 0x10) != 0)
  {
    sub_1003A46CC(a1, *(void **)(a2 + 128));
    sub_1003A46CC(a1, *(void **)(a2 + 136));
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(_DWORD *)(a2 + 8) &= ~0x1000u;
  }
  int8x8_t v12 = *(char **)(a2 + 320);
  if (v12 && (a3 & *(_DWORD *)(a2 + 300) & 0x20) != 0)
  {
    if (a4 == -1)
    {
      if (*(int *)(a2 + 328) >= 1)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        do
        {
          sub_1003A46CC(a1, *(void **)(*(void *)(a2 + 320) + v19));
          sub_1003A46CC(a1, *(void **)(*(void *)(a2 + 320) + v19 + 16));
          ++v20;
          v19 += 32;
        }
        while (v20 < *(int *)(a2 + 328));
        int8x8_t v12 = *(char **)(a2 + 320);
      }
      sub_1003A46CC(a1, v12);
      *(void *)(a2 + 320) = 0;
      *(_DWORD *)(a2 + 328) = 0;
      *(_DWORD *)(a2 + 8) &= ~0x2000u;
      unint64_t v15 = *(char **)(a2 + 304);
      if (!v15) {
        goto LABEL_46;
      }
      goto LABEL_26;
    }
    uint64_t v13 = 32 * a4;
    sub_1003A46CC(a1, *(void **)&v12[v13]);
    sub_1003A46CC(a1, *(void **)(*(void *)(a2 + 320) + v13 + 16));
    unint64_t v14 = (void *)(*(void *)(a2 + 320) + v13);
    *unint64_t v14 = 0;
    v14[2] = 0;
  }
  unint64_t v15 = *(char **)(a2 + 304);
  if (v15)
  {
LABEL_26:
    if ((a3 & *(_DWORD *)(a2 + 300) & 0x200) != 0)
    {
      if (a4 == -1)
      {
        if (*(int *)(a2 + 312) >= 1)
        {
          uint64_t v21 = 0;
          uint64_t v22 = 8;
          do
          {
            sub_1003A46CC(a1, *(void **)(*(void *)(a2 + 304) + v22));
            ++v21;
            v22 += 32;
          }
          while (v21 < *(int *)(a2 + 312));
          unint64_t v15 = *(char **)(a2 + 304);
        }
        sub_1003A46CC(a1, v15);
        *(void *)(a2 + 304) = 0;
        *(_DWORD *)(a2 + 312) = 0;
      }
      else
      {
        uint64_t v16 = 32 * a4;
        sub_1003A46CC(a1, *(void **)&v15[v16 + 8]);
        *(void *)(*(void *)(a2 + 304) + v16 + 8) = 0;
      }
    }
  }
LABEL_46:
  int v23 = *(_DWORD *)(a2 + 300);
  if ((a3 & v23 & 0x8000) != 0)
  {
    unint64_t v24 = *(void **)(a2 + 248);
    if (v24)
    {
      sub_1003A46CC(a1, v24);
      *(void *)(a2 + 248) = 0;
    }
    unint64_t v25 = *(void **)(a2 + 240);
    if (v25)
    {
      sub_1003A46CC(a1, v25);
      *(void *)(a2 + 240) = 0;
    }
    *(_DWORD *)(a2 + 8) &= ~0x10000u;
    int v23 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v23 & 8) != 0)
  {
    sub_1003A46CC(a1, *(void **)(a2 + 256));
    *(void *)(a2 + 256) = 0;
    *(_DWORD *)(a2 + 8) &= ~0x40u;
    int v23 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v23 & 0x1000) != 0)
  {
    sub_1003A46CC(a1, *(void **)(a2 + 24));
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 8) &= ~8u;
    *(_WORD *)(a2 + 32) = 0;
    int v23 = *(_DWORD *)(a2 + 300);
  }
  if ((a3 & v23 & 0x40) != 0)
  {
    int v26 = *(void **)(a2 + 352);
    if (v26)
    {
      if (*(_DWORD *)(a2 + 4))
      {
        unint64_t v27 = 0;
        do
          sub_1003A46CC(a1, *(void **)(*(void *)(a2 + 352) + 8 * v27++));
        while (v27 < *(unsigned int *)(a2 + 4));
        int v26 = *(void **)(a2 + 352);
      }
      sub_1003A46CC(a1, v26);
      *(void *)(a2 + 352) = 0;
      int v23 = *(_DWORD *)(a2 + 300);
    }
    *(_DWORD *)(a2 + 8) &= ~0x8000u;
  }
  unsigned int v28 = a3 & 0xFFFFBDDF;
  if (a4 == -1) {
    unsigned int v28 = a3;
  }
  *(_DWORD *)(a2 + 300) = v23 & ~v28;
}

uint64_t sub_10039F860(uint64_t result)
{
  if (result) {
    return *(void *)(result + 256);
  }
  return result;
}

uint64_t sub_10039F86C(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 256) = a2;
  }
  return result;
}

uint64_t sub_10039F87C(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    int v4 = *(_DWORD *)(a1 + 956);
    if (v4)
    {
      unint64_t v5 = *(void *)(a1 + 960);
      unint64_t v6 = v5 + (5 * v4);
      unint64_t v7 = v6;
      while (1)
      {
        int v8 = *(_DWORD *)(v7 - 5);
        v7 -= 5;
        if (*a2 == v8) {
          break;
        }
        unint64_t v6 = v7;
        if (v7 <= v5) {
          return 0;
        }
      }
      return *(unsigned __int8 *)(v6 - 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10039F8D0(uint64_t result, unsigned int a2)
{
  unsigned int v7 = bswap32(a2);
  if (result)
  {
    int v2 = *(_DWORD *)(result + 956);
    if (v2)
    {
      unint64_t v3 = *(void *)(result + 960);
      unint64_t v4 = v3 + (5 * v2);
      unint64_t v5 = v4;
      while (1)
      {
        int v6 = *(_DWORD *)(v5 - 5);
        v5 -= 5;
        if (v7 == v6) {
          break;
        }
        unint64_t v4 = v5;
        if (v5 <= v3) {
          return 0;
        }
      }
      return *(unsigned __int8 *)(v4 - 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10039F92C(uint64_t result, int a2)
{
  if (!*(void *)(result + 360))
  {
    if ((a2 + 7) > 9) {
      *(void *)(result + 360) = "unexpected zlib return code";
    }
    else {
      *(void *)(result + 360) = off_10049C780[a2 + 7];
    }
  }
  return result;
}

uint64_t sub_10039F968(uint64_t result, uint64_t a2, int a3)
{
  if ((a3 - 625000001) < 0xDABF41CF)
  {
    __int16 v4 = *(_WORD *)(a2 + 74);
    unint64_t v5 = "gamma value out of range";
    goto LABEL_6;
  }
  __int16 v4 = *(_WORD *)(a2 + 74);
  if ((*(unsigned char *)(result + 293) & 0x80) != 0 && (v4 & 8) != 0)
  {
    unint64_t v5 = "duplicate";
LABEL_6:
    *(_WORD *)(a2 + 74) = v4 | 0x8000;
    int v7 = 1;
    return sub_1003A41A8(result, v5, v7);
  }
  if ((*(_WORD *)(a2 + 74) & 0x8000) == 0)
  {
    if (v4)
    {
      if (!*(_DWORD *)a2
        || ((double v8 = floor((double)*(int *)a2 * 100000.0 / (double)a3 + 0.5), v8 <= 2147483650.0)
          ? (BOOL v9 = v8 < -2147483650.0)
          : (BOOL v9 = 1),
            !v9 ? (BOOL v10 = ((int)v8 - 95000) >= 0x2711) : (BOOL v10 = 1),
            v10))
      {
        if ((v4 & 0x20) != 0)
        {
          unint64_t v5 = "gamma value does not match sRGB";
          int v7 = 2;
          return sub_1003A41A8(result, v5, v7);
        }
        uint64_t result = sub_1003A41A8(result, "gamma value does not match libpng estimate", 0);
      }
    }
    *(_DWORD *)a2 = a3;
    *(_WORD *)(a2 + 74) = v4 | 9;
  }
  return result;
}

void sub_10039FABC(_OWORD *a1, uint64_t a2)
{
  if (a2)
  {
    *(_OWORD *)(a2 + 112) = *(_OWORD *)((char *)a1 + 1228);
    *(_OWORD *)(a2 + 68) = a1[74];
    *(_OWORD *)(a2 + 84) = a1[75];
    *(_OWORD *)(a2 + 100) = a1[76];
    *(_OWORD *)(a2 + 52) = a1[73];
    unsigned int v4 = *(__int16 *)(a2 + 126);
    int v5 = *(_DWORD *)(a2 + 8);
    if ((v4 & 0x80000000) != 0)
    {
      unsigned int v8 = v5 & 0xFFFFE7FA;
      *(_DWORD *)(a2 + 8) = v5 & 0xFFFFE7FA;
      int v9 = *(_DWORD *)(a2 + 300);
      if ((v9 & 0x10) != 0)
      {
        sub_1003A46CC((uint64_t)a1, *(void **)(a2 + 128));
        sub_1003A46CC((uint64_t)a1, *(void **)(a2 + 136));
        *(void *)(a2 + 128) = 0;
        *(void *)(a2 + 136) = 0;
        *(_DWORD *)(a2 + 8) = v8;
      }
      *(_DWORD *)(a2 + 300) = v9 & 0xFFFFFFEF;
    }
    else
    {
      unsigned int v6 = v5 & 0xFFFFF7FB | (16 * v4) & 0x800 | (4 * ((v4 >> 1) & 1));
      if (v4) {
        unsigned int v7 = v6 | 1;
      }
      else {
        unsigned int v7 = v6 & 0xFFFFFFFE;
      }
      *(_DWORD *)(a2 + 8) = v7;
    }
  }
}

uint64_t sub_10039FB98(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  int v8 = sub_10039FD08((int *)&v16, (int *)a3);
  if (v8 == 1)
  {
    *(_WORD *)(a2 + 74) |= 0x8000u;
    unint64_t v15 = "invalid chromaticities";
LABEL_12:
    sub_1003A3C8C(a1, v15);
    return 0;
  }
  if (v8)
  {
    *(_WORD *)(a2 + 74) |= 0x8000u;
    sub_1003A34AC(a1, "internal error checking chromaticities");
  }
  int v9 = *(__int16 *)(a2 + 74);
  if (v9 < 0) {
    return 0;
  }
  if (a4 > 1 || (v9 & 2) == 0) {
    goto LABEL_8;
  }
  if (!sub_1003A0A94((_DWORD *)a3, (_DWORD *)(a2 + 4), 100))
  {
    *(_WORD *)(a2 + 74) = v9 | 0x8000;
    unint64_t v15 = "inconsistent chromaticities";
    goto LABEL_12;
  }
  if (!a4) {
    return 1;
  }
LABEL_8:
  long long v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 4) = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 20) = v10;
  long long v11 = v17;
  *(_OWORD *)(a2 + 36) = v16;
  *(_OWORD *)(a2 + 52) = v11;
  *(_DWORD *)(a2 + 68) = v18;
  BOOL v12 = sub_1003A0A94((_DWORD *)a3, xmmword_10040C424, 1000);
  __int16 v13 = v9 & 0xFFBD | 2;
  if (v12) {
    __int16 v13 = v9 | 0x42;
  }
  *(_WORD *)(a2 + 74) = v13;
  return 2;
}

uint64_t sub_10039FD08(int *a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0x186A0) {
    return 1;
  }
  int v5 = a2[1];
  uint64_t result = 1;
  if ((v5 & 0x80000000) == 0 && v5 <= 100000 - v2)
  {
    unsigned int v6 = a2[2];
    if (v6 <= 0x186A0)
    {
      signed int v7 = a2[3];
      if ((v7 & 0x80000000) == 0 && v7 <= (int)(100000 - v6))
      {
        unsigned int v8 = a2[4];
        if (v8 <= 0x186A0)
        {
          signed int v9 = a2[5];
          if ((v9 & 0x80000000) == 0 && v9 <= (int)(100000 - v8))
          {
            unsigned int v10 = a2[6];
            if (v10 <= 0x186A0)
            {
              int v11 = a2[7];
              if (v11 >= 5 && v11 <= (int)(100000 - v10))
              {
                int v12 = 0;
                int v13 = v5 - v9;
                int v14 = v6 - v8;
                if (v6 != v8 && v5 != v9)
                {
                  double v15 = floor((double)v14 * (double)v13 / 7.0 + 0.5);
                  if (v15 > 2147483650.0 || v15 < -2147483650.0) {
                    return 2;
                  }
                  int v12 = (int)v15;
                }
                int v17 = 0;
                int v18 = v7 - v9;
                int v19 = v2 - v8;
                if (v2 != v8 && v7 != v9)
                {
                  double v20 = floor((double)v19 * (double)v18 / 7.0 + 0.5);
                  if (v20 > 2147483650.0 || v20 < -2147483650.0) {
                    return 2;
                  }
                  int v17 = (int)v20;
                }
                int v22 = 0;
                int v23 = v11 - v9;
                if (v6 != v8 && v11 != v9)
                {
                  double v24 = floor((double)v14 * (double)v23 / 7.0 + 0.5);
                  if (v24 > 2147483650.0 || v24 < -2147483650.0) {
                    return 2;
                  }
                  int v22 = (int)v24;
                }
                int v26 = 0;
                int v27 = v10 - v8;
                if (v7 != v9 && v10 != v8)
                {
                  double v28 = floor((double)v18 * (double)v27 / 7.0 + 0.5);
                  if (v28 > 2147483650.0 || v28 < -2147483650.0) {
                    return 2;
                  }
                  int v26 = (int)v28;
                }
                int v30 = v22 - v26;
                if (v22 == v26) {
                  return 1;
                }
                int v31 = v12 - v17;
                if (v12 == v17)
                {
                  int v32 = 0;
                }
                else
                {
                  double v33 = floor((double)v11 * (double)v31 / (double)v30 + 0.5);
                  if (v33 > 2147483650.0 || v33 < -2147483650.0) {
                    return 1;
                  }
                  int v32 = (int)v33;
                }
                if (v32 <= v11) {
                  return 1;
                }
                int v35 = 0;
                if (v5 != v9 && v10 != v8)
                {
                  double v36 = floor((double)v13 * (double)v27 / 7.0 + 0.5);
                  if (v36 > 2147483650.0 || v36 < -2147483650.0) {
                    return 2;
                  }
                  int v35 = (int)v36;
                }
                int v38 = 0;
                if (v2 != v8 && v11 != v9)
                {
                  double v39 = floor((double)v19 * (double)v23 / 7.0 + 0.5);
                  if (v39 > 2147483650.0 || v39 < -2147483650.0) {
                    return 2;
                  }
                  int v38 = (int)v39;
                }
                if (v35 == v38) {
                  return 1;
                }
                if (v12 == v17)
                {
                  int v41 = 0;
                }
                else
                {
                  double v42 = floor((double)v11 * (double)v31 / (double)(v35 - v38) + 0.5);
                  if (v42 > 2147483650.0 || v42 < -2147483650.0) {
                    return 1;
                  }
                  int v41 = (int)v42;
                }
                if (v41 <= v11) {
                  return 1;
                }
                double v44 = 1.0e10 / (double)v11 + 0.5;
                double v45 = floor(v44);
                BOOL v46 = v45 < -2147483650.0 || v45 > 2147483650.0;
                unsigned int v47 = vcvtmd_s64_f64(v44);
                if (v46) {
                  unsigned int v47 = 0;
                }
                double v48 = (double)v32;
                double v49 = 1.0e10 / (double)v32 + 0.5;
                double v50 = floor(v49);
                BOOL v51 = v50 < -2147483650.0 || v50 > 2147483650.0;
                unsigned int v52 = vcvtmd_s64_f64(v49);
                double v53 = (double)v41;
                if (v51) {
                  unsigned int v54 = 0;
                }
                else {
                  unsigned int v54 = v52;
                }
                double v55 = 1.0e10 / v53 + 0.5;
                double v56 = floor(v55);
                BOOL v57 = v56 < -2147483650.0 || v56 > 2147483650.0;
                unsigned int v58 = vcvtmd_s64_f64(v55);
                if (v57) {
                  unsigned int v58 = 0;
                }
                int v59 = v47 - (v54 + v58);
                if (v59 < 1) {
                  return 1;
                }
                if (v2)
                {
                  double v60 = floor((double)v2 * 100000.0 / v48 + 0.5);
                  if (v60 > 2147483650.0 || v60 < -2147483650.0) {
                    return 1;
                  }
                  int v2 = (int)v60;
                }
                *a1 = v2;
                int v62 = a2[1];
                if (v62)
                {
                  double v63 = floor((double)v62 * 100000.0 / v48 + 0.5);
                  if (v63 > 2147483650.0 || v63 < -2147483650.0) {
                    return 1;
                  }
                  int v62 = (int)v63;
                }
                a1[1] = v62;
                int v65 = 100000 - (a2[1] + *a2);
                if (v65)
                {
                  double v66 = floor((double)v65 * 100000.0 / v48 + 0.5);
                  if (v66 > 2147483650.0 || v66 < -2147483650.0) {
                    return 1;
                  }
                  int v65 = (int)v66;
                }
                a1[2] = v65;
                int v68 = a2[2];
                if (v68)
                {
                  double v69 = floor((double)v68 * 100000.0 / v53 + 0.5);
                  if (v69 > 2147483650.0 || v69 < -2147483650.0) {
                    return 1;
                  }
                  int v68 = (int)v69;
                }
                a1[3] = v68;
                int v71 = a2[3];
                if (v71)
                {
                  double v72 = floor((double)v71 * 100000.0 / v53 + 0.5);
                  if (v72 > 2147483650.0 || v72 < -2147483650.0) {
                    return 1;
                  }
                  int v71 = (int)v72;
                }
                a1[4] = v71;
                int v74 = 100000 - (a2[3] + a2[2]);
                if (v74)
                {
                  double v75 = floor((double)v74 * 100000.0 / v53 + 0.5);
                  if (v75 > 2147483650.0 || v75 < -2147483650.0) {
                    return 1;
                  }
                  int v74 = (int)v75;
                }
                a1[5] = v74;
                int v77 = a2[4];
                if (v77)
                {
                  double v78 = floor((double)v59 * (double)v77 / 100000.0 + 0.5);
                  if (v78 > 2147483650.0 || v78 < -2147483650.0) {
                    return 1;
                  }
                  int v77 = (int)v78;
                }
                a1[6] = v77;
                int v80 = a2[5];
                if (v80)
                {
                  double v81 = floor((double)v59 * (double)v80 / 100000.0 + 0.5);
                  if (v81 > 2147483650.0 || v81 < -2147483650.0) {
                    return 1;
                  }
                  int v80 = (int)v81;
                }
                a1[7] = v80;
                int v83 = 100000 - (a2[5] + a2[4]);
                if (v83)
                {
                  double v84 = floor((double)v59 * (double)v83 / 100000.0 + 0.5);
                  if (v84 > 2147483650.0 || v84 < -2147483650.0) {
                    return 1;
                  }
                  int v83 = (int)v84;
                }
                long long v95 = 0u;
                long long v96 = 0u;
                a1[8] = v83;
                if (!sub_1003A318C((int *)&v95, a1))
                {
                  int v86 = a2[6];
                  if (v86 >= DWORD2(v96) - 5 && v86 <= DWORD2(v96) + 5)
                  {
                    int v87 = a2[7];
                    if (v87 >= HIDWORD(v96) - 5
                      && v87 <= HIDWORD(v96) + 5
                      && *a2 >= (int)v95 - 5
                      && *a2 <= (int)v95 + 5)
                    {
                      int v88 = a2[1];
                      if (v88 >= DWORD1(v95) - 5 && v88 <= DWORD1(v95) + 5)
                      {
                        int v89 = a2[2];
                        if (v89 >= DWORD2(v95) - 5 && v89 <= DWORD2(v95) + 5)
                        {
                          int v90 = a2[3];
                          if (v90 >= HIDWORD(v95) - 5 && v90 <= HIDWORD(v95) + 5)
                          {
                            int v91 = a2[4];
                            if (v91 >= (int)v96 - 5 && v91 <= (int)v96 + 5)
                            {
                              int v92 = a2[5];
                              if (v92 <= DWORD1(v96) + 5 && v92 >= DWORD1(v96) - 5) {
                                return 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003A062C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3 = *(__int16 *)(a2 + 74);
  if (v3 < 0) {
    return 0;
  }
  __int16 v4 = a3;
  if (a3 >= 4)
  {
    unint64_t v7 = (int)a3;
    unsigned int v8 = "invalid sRGB rendering intent";
LABEL_25:
    sub_1003A0828(a1, a2, "sRGB", v7, v8);
    return 0;
  }
  __int16 v10 = *(_WORD *)(a2 + 74);
  if ((v3 & 4) != 0 && *(unsigned __int16 *)(a2 + 72) != a3)
  {
    unint64_t v7 = a3;
    unsigned int v8 = "inconsistent rendering intents";
    goto LABEL_25;
  }
  if ((v3 & 0x20) != 0)
  {
    sub_1003A3C8C(a1, "duplicate sRGB information ignored");
    return 0;
  }
  else
  {
    if ((v3 & 2) != 0 && !sub_1003A0A94(xmmword_10040C424, (_DWORD *)(a2 + 4), 100))
    {
      sub_1003A41A8(a1, "cHRM chunk does not match sRGB", 2);
      __int16 v10 = *(_WORD *)(a2 + 74);
    }
    if (v10)
    {
      if (!*(_DWORD *)a2
        || ((double v11 = floor((double)*(int *)a2 * 100000.0 / 45455.0 + 0.5), v11 <= 2147483650.0)
          ? (BOOL v12 = v11 < -2147483650.0)
          : (BOOL v12 = 1),
            !v12 ? (BOOL v13 = ((int)v11 - 95000) >= 0x2711) : (BOOL v13 = 1),
            v13))
      {
        sub_1003A41A8(a1, "gamma value does not match sRGB", 2);
        __int16 v10 = *(_WORD *)(a2 + 74);
      }
    }
    *(_OWORD *)(a2 + 4) = xmmword_10040C424[0];
    *(_OWORD *)(a2 + 20) = unk_10040C434;
    *(_OWORD *)(a2 + 36) = xmmword_10040C400;
    *(_WORD *)(a2 + 72) = v4;
    *(_DWORD *)(a2 + 68) = 95053;
    *(_OWORD *)(a2 + 52) = unk_10040C410;
    *(_DWORD *)a2 = 45455;
    *(_WORD *)(a2 + 74) = v10 | 0xE7;
    return 1;
  }
}

uint64_t sub_1003A0828(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4, unsigned char *a5)
{
  if (a2) {
    *(_WORD *)(a2 + 74) |= 0x8000u;
  }
  unint64_t v10 = sub_1003A3544((uint64_t)v26, 0xC4uLL, 0, "profile '");
  unint64_t v11 = sub_1003A3544((uint64_t)v26, v10 + 79, v10, a3);
  unint64_t v12 = sub_1003A3544((uint64_t)v26, 0xC4uLL, v11, "': ");
  unint64_t v13 = v12;
  unint64_t v14 = a4 >> 24;
  if ((a4 >> 24 == 32 || v14 - 48 < 0xA || (v14 & 0xFFFFFFFFFFFFFFDFLL) - 65 <= 0x19)
    && (((a4 >> 16) & 0xDF) - 65 < 0x1A || BYTE2(a4) == 32 || (unint64_t)BYTE2(a4) - 48 <= 9)
    && (((a4 >> 8) & 0xDF) - 65 < 0x1A || BYTE1(a4) == 32 || (unint64_t)BYTE1(a4) - 48 <= 9)
    && ((unint64_t)(a4 & 0xDF) - 65 < 0x1A
     || a4 == 32
     || (unint64_t)a4 - 48 <= 9))
  {
    double v20 = &v26[v12];
    v26[v12] = 39;
    char v21 = BYTE3(a4);
    if (BYTE3(a4) - 32 >= 0x5F) {
      char v21 = 63;
    }
    v20[1] = v21;
    char v22 = BYTE2(a4);
    if (BYTE2(a4) - 32 >= 0x5F) {
      char v22 = 63;
    }
    void v20[2] = v22;
    unsigned int v23 = a4 >> 8;
    if (BYTE1(a4) - 32 >= 0x5F) {
      LOBYTE(v23) = 63;
    }
    v20[3] = v23;
    if (a4 - 32 >= 0x5F) {
      char v24 = 63;
    }
    else {
      char v24 = a4;
    }
    v20[4] = v24;
    *(_WORD *)(v20 + 5) = 14887;
    unint64_t v17 = v12 + 8;
    v20[7] = 32;
  }
  else
  {
    double v15 = (unsigned char *)sub_1003A35A0((unint64_t)v25, (uint64_t)v26, 3, a4);
    unint64_t v16 = sub_1003A3544((uint64_t)v26, 0xC4uLL, v13, v15);
    unint64_t v17 = sub_1003A3544((uint64_t)v26, 0xC4uLL, v16, "h: ");
  }
  sub_1003A3544((uint64_t)v26, 0xC4uLL, v17, a5);
  if (a2) {
    int v18 = 2;
  }
  else {
    int v18 = 1;
  }
  return sub_1003A41A8(a1, v26, v18);
}

BOOL sub_1003A0A94(_DWORD *a1, _DWORD *a2, int a3)
{
  int v3 = a1[6];
  int v4 = a2[6];
  int v5 = v4 - a3;
  int v6 = v4 + a3;
  if (v3 < v5 || v3 > v6) {
    return 0;
  }
  int v9 = a1[7];
  int v10 = a2[7];
  int v11 = v10 - a3;
  int v12 = v10 + a3;
  if (v9 < v11 || v9 > v12) {
    return 0;
  }
  if (*a1 < *a2 - a3 || *a1 > *a2 + a3) {
    return 0;
  }
  uint64_t v15 = 0;
  int v16 = a1[1];
  int v17 = a2[1];
  if (v16 >= v17 - a3 && v16 <= v17 + a3)
  {
    uint64_t v15 = 0;
    int v18 = a1[2];
    int v19 = a2[2];
    if (v18 >= v19 - a3 && v18 <= v19 + a3)
    {
      uint64_t v15 = 0;
      int v20 = a1[3];
      int v21 = a2[3];
      if (v20 >= v21 - a3 && v20 <= v21 + a3)
      {
        uint64_t v15 = 0;
        int v22 = a1[4];
        int v23 = a2[4];
        if (v22 >= v23 - a3 && v22 <= v23 + a3)
        {
          int v24 = a1[5];
          int v25 = a2[5];
          int v26 = v25 - a3;
          int v27 = v25 + a3;
          return v24 >= v26 && v24 <= v27;
        }
      }
    }
  }
  return v15;
}

uint64_t sub_1003A0BB4(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned int a4)
{
  if (a4 > 0x83)
  {
    unint64_t v5 = *(void *)(a1 + 1056);
    if (v5 && v5 < a4)
    {
      sub_1003A0828(a1, a2, a3, a4, "exceeds application limits");
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    sub_1003A0828(a1, a2, a3, a4, "too short");
    return 0;
  }
}

uint64_t sub_1003A0C1C(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4, uint64_t a5, char a6)
{
  int v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  unint64_t v9 = bswap32(*(_DWORD *)a5);
  if (v9 != a4)
  {
    int v12 = "length does not match profile";
LABEL_13:
    a4 = v9;
    goto LABEL_14;
  }
  if ((a4 & 3) != 0 && *(unsigned __int8 *)(a5 + 8) >= 4u)
  {
    a4 = a4;
    int v12 = "invalid length";
LABEL_5:
    a1 = v8;
    a2 = v7;
    a3 = v6;
LABEL_14:
    sub_1003A0828(a1, a2, a3, a4, v12);
    return 0;
  }
  unint64_t v9 = bswap32(*(_DWORD *)(a5 + 128));
  if (v9 > 0x1555554A || 12 * (int)v9 + 132 > a4)
  {
    int v12 = "tag count too large";
    goto LABEL_13;
  }
  a4 = bswap32(*(_DWORD *)(a5 + 64));
  if (a4 >= 0xFFFF)
  {
    int v12 = "invalid rendering intent";
    goto LABEL_5;
  }
  if (a4 >= 4) {
    sub_1003A0828(a1, 0, a3, a4, "intent outside defined range");
  }
  a4 = bswap32(*(_DWORD *)(a5 + 36));
  if (a4 != 1633907568)
  {
    int v12 = "invalid signature";
    goto LABEL_5;
  }
  if (*(void *)(a5 + 68) != 0x100D6F60000 || *(_DWORD *)(a5 + 76) != 768802816) {
    sub_1003A0828(v8, 0, v6, 0, "PCS illuminant is not D50");
  }
  a4 = bswap32(*(_DWORD *)(a5 + 16));
  if (a4 == 1196573017)
  {
    if ((a6 & 2) != 0)
    {
      int v12 = "Gray color space not permitted on RGB PNG";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1196573017;
      goto LABEL_14;
    }
  }
  else
  {
    if (a4 != 1380401696)
    {
      int v12 = "invalid ICC profile color space";
      goto LABEL_5;
    }
    if ((a6 & 2) == 0)
    {
      int v12 = "RGB color space not permitted on grayscale PNG";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1380401696;
      goto LABEL_14;
    }
  }
  unint64_t v16 = bswap32(*(_DWORD *)(a5 + 12));
  if ((int)v16 <= 1852662635)
  {
    if (v16 == 1633842036)
    {
      int v12 = "invalid embedded Abstract ICC profile";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1633842036;
      goto LABEL_14;
    }
    if (v16 == 1818848875)
    {
      int v12 = "unexpected DeviceLink ICC profile class";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1818848875;
      goto LABEL_14;
    }
    int v17 = 1835955314;
  }
  else if ((int)v16 > 1935896177)
  {
    if (v16 == 1935896178) {
      goto LABEL_47;
    }
    int v17 = 1936744803;
  }
  else
  {
    if (v16 == 1852662636)
    {
      int v18 = "unexpected NamedColor ICC profile class";
      uint64_t v19 = v8;
      int v20 = v6;
      unint64_t v16 = 1852662636;
      goto LABEL_46;
    }
    int v17 = 1886549106;
  }
  if (v16 != v17)
  {
    int v18 = "unrecognized ICC profile class";
    uint64_t v19 = v8;
    int v20 = v6;
LABEL_46:
    sub_1003A0828(v19, 0, v20, v16, v18);
  }
LABEL_47:
  a4 = bswap32(*(_DWORD *)(a5 + 20));
  uint64_t result = 1;
  if (a4 != 1281450528 && a4 != 1482250784)
  {
    int v12 = "unexpected ICC PCS encoding";
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_1003A0F4C(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned int a4, uint64_t a5)
{
  unsigned int v5 = bswap32(*(_DWORD *)(a5 + 128));
  if (!v5) {
    return 1;
  }
  for (uint64_t i = a5 + 132; ; i += 12)
  {
    unint64_t v11 = bswap32(*(_DWORD *)i);
    unsigned int v12 = _byteswap_ulong(*(_DWORD *)(i + 4));
    BOOL v13 = a4 >= v12;
    unsigned int v14 = a4 - v12;
    if (!v13 || bswap32(*(_DWORD *)(i + 8)) > v14) {
      break;
    }
    if ((*(unsigned char *)(i + 7) & 3) != 0) {
      sub_1003A0828(a1, 0, a3, v11, "ICC profile tag start not a multiple of 4");
    }
    if (!--v5) {
      return 1;
    }
  }
  sub_1003A0828(a1, a2, a3, v11, "ICC profile tag outside profile");
  return 0;
}

uint64_t sub_1003A1050(uint64_t result, uint64_t a2, unsigned int *a3, uLong a4)
{
  if ((~*(_DWORD *)(result + 896) & 0x30) == 0) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uInt v8 = 0;
  unsigned int v9 = bswap32(a3[21]);
  unsigned int v10 = 0x10000;
  for (uint64_t i = &dword_10040C454; ; i += 8)
  {
    if (v9 != *(i - 1) || bswap32(a3[22]) != *i || bswap32(a3[23]) != i[1] || bswap32(a3[24]) != i[2]) {
      goto LABEL_4;
    }
    if (!v8) {
      break;
    }
    if (v8 == *(i - 2)) {
      goto LABEL_13;
    }
LABEL_4:
    if (++v7 == 7) {
      return result;
    }
  }
  uInt v8 = bswap32(*a3);
  unsigned int v10 = bswap32(a3[16]);
  if (v8 != *(i - 2)) {
    goto LABEL_4;
  }
LABEL_13:
  if (v10 != *((unsigned __int16 *)i + 7)) {
    goto LABEL_4;
  }
  if (!a4)
  {
    uLong v12 = adler32(0, 0, 0);
    a4 = adler32(v12, (const Bytef *)a3, v8);
  }
  if (a4 == *(i - 4) && (uLong v13 = crc32(0, 0, 0), crc32(v13, (const Bytef *)a3, v8) == *(i - 3)))
  {
    if (v7 >= 5)
    {
      unsigned int v14 = "known incorrect sRGB profile";
      uint64_t v15 = v6;
      int v16 = 2;
LABEL_25:
      sub_1003A41A8(v15, v14, v16);
    }
    else if ((unint64_t)(v7 - 4) <= 2)
    {
      unsigned int v14 = "out-of-date sRGB profile with no signature";
      uint64_t v15 = v6;
      int v16 = 0;
      goto LABEL_25;
    }
    unsigned int v17 = bswap32(a3[16]);
    return sub_1003A062C(v6, a2, v17);
  }
  else
  {
    return sub_1003A41A8(v6, "Not recognizing known sRGB profile that has been edited", 0);
  }
}

uint64_t sub_1003A1248(uint64_t result)
{
  if (*(unsigned char *)(result + 969) || (*(_WORD *)(result + 1242) & 2) == 0) {
    return result;
  }
  unsigned int v1 = *(_DWORD *)(result + 1208);
  if ((v1 & 0x80000000) != 0) {
    goto LABEL_40;
  }
  unsigned int v2 = *(_DWORD *)(result + 1220);
  int v3 = *(_DWORD *)(result + 1232);
  int v4 = v2 + v1 + v3;
  if (v4 < 1) {
    goto LABEL_40;
  }
  if (v1)
  {
    double v5 = (double)(int)v1 * 32768.0 / (double)v4 + 0.5;
    double v6 = floor(v5);
    BOOL v7 = v6 <= 2147483650.0 && v6 >= -2147483650.0;
    unsigned int v8 = vcvtmd_s64_f64(v5);
    if (v7) {
      unsigned int v1 = v8;
    }
    if ((v2 & 0x80000000) != 0) {
LABEL_40:
    }
      sub_1003A34AC(result, "internal error handling cHRM->XYZ");
  }
  else
  {
    BOOL v7 = 1;
    if ((v2 & 0x80000000) != 0) {
      goto LABEL_40;
    }
  }
  if (!v7 || (v1 & 0x80000000) != 0 || (int)v1 > 0x8000) {
    goto LABEL_40;
  }
  if (v2)
  {
    double v9 = (double)(int)v2 * 32768.0 / (double)v4 + 0.5;
    double v10 = floor(v9);
    BOOL v11 = v10 <= 2147483650.0 && v10 >= -2147483650.0;
    unsigned int v12 = vcvtmd_s64_f64(v9);
    if (v11) {
      unsigned int v2 = v12;
    }
    if (v3 < 0) {
      goto LABEL_40;
    }
  }
  else
  {
    BOOL v11 = 1;
    if (v3 < 0) {
      goto LABEL_40;
    }
  }
  if (!v11 || (v2 & 0x80000000) != 0 || (int)v2 > 0x8000) {
    goto LABEL_40;
  }
  if (v3)
  {
    double v13 = (double)v3 * 32768.0 / (double)v4 + 0.5;
    double v14 = floor(v13);
    if (v14 > 2147483650.0 || v14 < -2147483650.0) {
      goto LABEL_40;
    }
    unsigned int v16 = vcvtmd_s64_f64(v13);
    if (v16 > 0x8000) {
      goto LABEL_40;
    }
    unsigned int v17 = v2 + v1 + v16;
    BOOL v18 = v17 == 32769;
    if (v17 > 0x8001) {
      goto LABEL_40;
    }
  }
  else
  {
    unsigned int v16 = 0;
    unsigned int v17 = v2 + v1;
    BOOL v18 = v2 + v1 == 32769;
    if (v2 + v1 > 0x8001) {
      goto LABEL_40;
    }
  }
  if (v18)
  {
    int v19 = -1;
    if (v2 < v1) {
      goto LABEL_41;
    }
LABEL_37:
    if (v2 >= v16)
    {
      v2 += v19;
      goto LABEL_45;
    }
LABEL_41:
    if (v1 < v2 || v1 < v16) {
      v16 += v19;
    }
    else {
      v1 += v19;
    }
    goto LABEL_45;
  }
  if (!(v17 >> 15))
  {
    int v19 = 1;
    if (v2 < v1) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
LABEL_45:
  if (v2 + v1 + v16 != 0x8000) {
    sub_1003A34AC(result, "internal error handling cHRM coefficients");
  }
  *(_WORD *)(result + 970) = v1;
  *(_WORD *)(result + 972) = v2;
  return result;
}

uint64_t sub_1003A1488(int *a1, int a2, int a3, int a4)
{
  if (!a4) {
    return 0;
  }
  int v4 = 0;
  if (!a2 || !a3) {
    goto LABEL_10;
  }
  double v5 = floor((double)a2 * (double)a3 / (double)a4 + 0.5);
  if (v5 > 2147483650.0 || v5 < -2147483650.0) {
    return 0;
  }
  int v4 = (int)v5;
LABEL_10:
  *a1 = v4;
  return 1;
}

uint64_t sub_1003A14F0(uint64_t result, unsigned int a2, unsigned int a3, int a4, unsigned int a5, int a6, int a7, int a8)
{
  uint64_t v15 = result;
  if (!a2)
  {
    unsigned int v17 = "Image width is zero in IHDR";
    goto LABEL_7;
  }
  if ((a2 & 0x80000000) != 0)
  {
    unsigned int v17 = "Invalid image width in IHDR";
LABEL_7:
    uint64_t result = sub_1003A3704(result, (uint64_t)v17);
    int v16 = 1;
    if (*(_DWORD *)(v15 + 1044) >= a2) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v16 = 0;
  if (*(_DWORD *)(result + 1044) < a2)
  {
LABEL_8:
    uint64_t result = sub_1003A3704(v15, (uint64_t)"Image width exceeds user limit in IHDR");
    int v16 = 1;
  }
LABEL_9:
  if (a3)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (*(_DWORD *)(v15 + 1048) >= a3) {
        goto LABEL_12;
      }
LABEL_17:
      uint64_t result = sub_1003A3704(v15, (uint64_t)"Image height exceeds user limit in IHDR");
      int v16 = 1;
      if (a4 > 0x10) {
        goto LABEL_47;
      }
      goto LABEL_18;
    }
    BOOL v18 = "Invalid image height in IHDR";
  }
  else
  {
    BOOL v18 = "Image height is zero in IHDR";
  }
  uint64_t result = sub_1003A3704(v15, (uint64_t)v18);
  int v16 = 1;
  if (*(_DWORD *)(v15 + 1048) < a3) {
    goto LABEL_17;
  }
LABEL_12:
  if (a4 > 0x10)
  {
LABEL_47:
    uint64_t result = sub_1003A3704(v15, (uint64_t)"Invalid bit depth in IHDR");
    int v16 = 1;
    unsigned int v19 = a5 & 0xFFFFFFFB;
    if (a5 > 6) {
      goto LABEL_21;
    }
LABEL_20:
    if (v19 != 1) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_18:
  if (((1 << a4) & 0x10116) == 0) {
    goto LABEL_47;
  }
  unsigned int v19 = a5 & 0xFFFFFFFB;
  if (a5 <= 6) {
    goto LABEL_20;
  }
LABEL_21:
  uint64_t result = sub_1003A3704(v15, (uint64_t)"Invalid color type in IHDR");
  int v16 = 1;
LABEL_22:
  if (a4 > 8 && a5 == 3 || (a5 != 4 ? (BOOL v20 = v19 == 2) : (BOOL v20 = 1), !v20 ? (v21 = 0) : (v21 = 1), a4 < 8 && v21))
  {
    uint64_t result = sub_1003A3704(v15, (uint64_t)"Invalid color type/bit depth combination in IHDR");
    int v16 = 1;
  }
  if (a6 >= 2)
  {
    uint64_t result = sub_1003A3704(v15, (uint64_t)"Unknown interlace method in IHDR");
    int v16 = 1;
  }
  if (a7)
  {
    uint64_t result = sub_1003A3704(v15, (uint64_t)"Unknown compression method in IHDR");
    int v16 = 1;
  }
  if ((*(unsigned char *)(v15 + 293) & 0x10) != 0 && *(_DWORD *)(v15 + 976)) {
    uint64_t result = sub_1003A3704(v15, (uint64_t)"MNG features are not allowed in a PNG datastream");
  }
  if (a8 && (a8 != 64 || (*(_DWORD *)(v15 + 976) & 4) == 0 || v19 != 2 || (*(_DWORD *)(v15 + 292) & 0x1000) != 0))
  {
    sub_1003A3704(v15, (uint64_t)"Unknown filter method in IHDR");
    if ((*(unsigned char *)(v15 + 293) & 0x10) != 0) {
      sub_1003A3704(v15, (uint64_t)"Invalid filter method in IHDR");
    }
LABEL_51:
    sub_1003A34AC(v15, "Invalid IHDR data");
  }
  if (v16) {
    goto LABEL_51;
  }
  return result;
}

uint64_t sub_1003A1764(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4 = *a3;
  unint64_t v5 = *a4;
  if (*a4 < a2)
  {
    while (2)
    {
      int v6 = 4;
      switch(*(unsigned char *)(a1 + v5))
      {
        case '+':
          goto LABEL_9;
        case '-':
          int v6 = 132;
          goto LABEL_9;
        case '.':
          int v6 = 16;
          goto LABEL_9;
        case '0':
          int v6 = 8;
          goto LABEL_9;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          int v6 = 264;
          goto LABEL_9;
        case 'E':
        case 'e':
          int v6 = 32;
LABEL_9:
          switch(v6 & 0x3C | v4 & 3)
          {
            case 4u:
              if ((v4 & 0x3C) == 0)
              {
                v4 |= v6;
                break;
              }
              goto LABEL_26;
            case 6u:
              if ((v4 & 0x3C) == 0)
              {
                v4 |= 4u;
                break;
              }
              goto LABEL_26;
            case 8u:
              if ((v4 & 0x10) != 0) {
                unsigned int v4 = v4 & 0x180 | 0x11;
              }
              goto LABEL_5;
            case 9u:
LABEL_5:
              v4 |= v6 | 0x40;
              break;
            case 0xAu:
              v4 |= 0x48u;
              break;
            case 0x10u:
              if ((v4 & 0x10) != 0) {
                goto LABEL_26;
              }
              int v7 = v4 & 0x1C0 | v6 | 1;
              int v8 = v6 | v4;
              if ((v4 & 8) != 0) {
                unsigned int v4 = v8;
              }
              else {
                unsigned int v4 = v7;
              }
              break;
            case 0x20u:
            case 0x21u:
              if ((v4 & 8) == 0) {
                goto LABEL_26;
              }
              unsigned int v4 = v4 & 0x1C0 | 2;
              break;
            default:
              goto LABEL_26;
          }
          if (a2 != ++v5) {
            continue;
          }
          unint64_t v5 = a2;
          break;
        default:
          goto LABEL_26;
      }
      break;
    }
  }
LABEL_26:
  *a3 = v4;
  *a4 = v5;
  return (v4 >> 3) & 1;
}

uint64_t sub_1003A1A00(uint64_t a1, unint64_t a2)
{
  unsigned int v6 = 0;
  unint64_t v5 = 0;
  uint64_t result = sub_1003A1764(a1, a2, &v6, &v5);
  if (result)
  {
    if (v5 == a2 || !*(unsigned char *)(a1 + v5)) {
      return v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003A1A70(uint64_t a1, uint64_t a2, double a3)
{
  double v3 = floor(a3 * 100000.0 + 0.5);
  if (v3 > 2147483650.0 || v3 < -2147483650.0) {
    sub_1003A42A0(a1, a2);
  }
  return (int)v3;
}

uint64_t sub_1003A1AC0(int a1)
{
  double v1 = 1.0e10 / (double)a1 + 0.5;
  double v2 = floor(v1);
  BOOL v3 = v2 < -2147483650.0 || v2 > 2147483650.0;
  unsigned int v4 = vcvtmd_s64_f64(v1);
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

BOOL sub_1003A1B04(int a1)
{
  return (a1 - 105001) < 0xFFFFD8EF;
}

unsigned int sub_1003A1B1C(int a1, int a2)
{
  if (a1
    && a2
    && ((double v2 = 1.0e15 / (double)a1 / (double)a2 + 0.5, v3 = floor(v2), v3 <= 2147483650.0)
      ? (BOOL v4 = v3 < -2147483650.0)
      : (BOOL v4 = 1),
        !v4))
  {
    return vcvtmd_s64_f64(v2);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1003A1B78(uint64_t result, int a2)
{
  if ((result - 1) <= 0xFD) {
    LOBYTE(result) = vcvtmd_s64_f64(pow((double)(int)result / 255.0, (double)a2 * 0.00001) * 255.0 + 0.5);
  }
  return result;
}

uint64_t sub_1003A1BDC(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a2 - 1;
  if (*(unsigned char *)(a1 + 608) == 8)
  {
    if (v3 <= 0xFD) {
      LOBYTE(a2) = vcvtmd_s64_f64(pow((double)a2 / 255.0, (double)a3 * 0.00001) * 255.0 + 0.5);
    }
    LOWORD(a2) = a2;
    return (unsigned __int16)a2;
  }
  if (v3 > 0xFFFD) {
    return (unsigned __int16)a2;
  }
  return (unsigned __int16)vcvtmd_s64_f64(pow((double)a2 / 65535.0, (double)a3 * 0.00001) * 65535.0 + 0.5);
}

void sub_1003A1C9C(uint64_t a1)
{
  sub_1003A46CC(a1, *(void **)(a1 + 672));
  *(void *)(a1 + 672) = 0;
  double v2 = *(void **)(a1 + 680);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 664);
    if (v3 != -23)
    {
      uint64_t v4 = 0;
      int v5 = 1 << (8 - v3);
      if (v5 <= 1) {
        int v5 = 1;
      }
      uint64_t v6 = 8 * v5;
      do
      {
        sub_1003A46CC(a1, *(void **)(*(void *)(a1 + 680) + v4));
        v4 += 8;
      }
      while (v6 != v4);
      double v2 = *(void **)(a1 + 680);
    }
    sub_1003A46CC(a1, v2);
    *(void *)(a1 + 680) = 0;
  }
  sub_1003A46CC(a1, *(void **)(a1 + 688));
  *(void *)(a1 + 688) = 0;
  sub_1003A46CC(a1, *(void **)(a1 + 696));
  *(void *)(a1 + 696) = 0;
  int v7 = *(void **)(a1 + 704);
  if (v7)
  {
    int v8 = *(_DWORD *)(a1 + 664);
    if (v8 != -23)
    {
      uint64_t v9 = 0;
      int v10 = 1 << (8 - v8);
      if (v10 <= 1) {
        int v10 = 1;
      }
      uint64_t v11 = 8 * v10;
      do
      {
        sub_1003A46CC(a1, *(void **)(*(void *)(a1 + 704) + v9));
        v9 += 8;
      }
      while (v11 != v9);
      int v7 = *(void **)(a1 + 704);
    }
    sub_1003A46CC(a1, v7);
    *(void *)(a1 + 704) = 0;
  }
  unsigned int v12 = *(void **)(a1 + 712);
  if (v12)
  {
    int v13 = *(_DWORD *)(a1 + 664);
    if (v13 != -23)
    {
      uint64_t v14 = 0;
      int v15 = 1 << (8 - v13);
      if (v15 <= 1) {
        int v15 = 1;
      }
      uint64_t v16 = 8 * v15;
      do
      {
        sub_1003A46CC(a1, *(void **)(*(void *)(a1 + 712) + v14));
        v14 += 8;
      }
      while (v16 != v14);
      unsigned int v12 = *(void **)(a1 + 712);
    }
    sub_1003A46CC(a1, v12);
    *(void *)(a1 + 712) = 0;
  }
}

void sub_1003A1E10(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 672) || *(void *)(a1 + 680))
  {
    sub_1003A3704(a1, (uint64_t)"gamma table being rebuilt");
    sub_1003A1C9C(a1);
  }
  if (a2 <= 8)
  {
    int v4 = *(_DWORD *)(a1 + 668);
    if (v4 < 1)
    {
      int v42 = 100000;
    }
    else
    {
      int v5 = *(_DWORD *)(a1 + 1168);
      if (!v5
        || ((v6 = 1.0e15 / (double)v5 / (double)v4 + 0.5, double v7 = floor(v6), v7 <= 2147483650.0)
          ? (BOOL v8 = v7 < -2147483650.0)
          : (BOOL v8 = 1),
            v8))
      {
        int v42 = 0;
      }
      else
      {
        int v42 = vcvtmd_s64_f64(v6);
      }
    }
    int8x16_t v43 = sub_1003A4784((void *)a1, 0x100uLL);
    *(void *)(a1 + 672) = v43;
    if ((v42 - 95000) > 0x2710)
    {
      for (uint64_t i = 0; i != 256; ++i)
      {
        while ((i - 1) > 0xFD)
        {
          *((unsigned char *)v43 + i) = i;
          if (++i == 256) {
            goto LABEL_68;
          }
        }
        *((unsigned char *)v43 + i) = vcvtmd_s64_f64(pow((double)(int)i / 255.0, (double)v42 * 0.00001) * 255.0 + 0.5);
      }
    }
    else
    {
      _OWORD *v43 = xmmword_10040BED0;
      v43[1] = xmmword_10040BEE0;
      v43[7] = xmmword_10040BF40;
      v43[8] = xmmword_10040BF50;
      v43[9] = xmmword_10040BF60;
      v43[10] = xmmword_10040BF70;
      v43[11] = xmmword_10040BF80;
      v43[12] = xmmword_10040BF90;
      v43[13] = xmmword_10040BFA0;
      v43[14] = xmmword_10040BFB0;
      v43[15] = xmmword_10040BFC0;
    }
LABEL_68:
    if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
    {
      double v45 = 1.0e10 / (double)*(int *)(a1 + 1168) + 0.5;
      double v46 = floor(v45);
      BOOL v47 = v46 < -2147483650.0 || v46 > 2147483650.0;
      unsigned int v48 = vcvtmd_s64_f64(v45);
      if (v47) {
        int v49 = 0;
      }
      else {
        int v49 = v48;
      }
      double v50 = sub_1003A4784((void *)a1, 0x100uLL);
      BOOL v51 = v50;
      *(void *)(a1 + 696) = v50;
      if ((v49 - 95000) > 0x2710)
      {
        for (uint64_t j = 0; j != 256; ++j)
        {
          while ((j - 1) > 0xFD)
          {
            *((unsigned char *)v51 + j) = j;
            if (++j == 256) {
              goto LABEL_81;
            }
          }
          *((unsigned char *)v51 + j) = vcvtmd_s64_f64(pow((double)(int)j / 255.0, (double)v49 * 0.00001) * 255.0 + 0.5);
        }
      }
      else
      {
        *double v50 = xmmword_10040BED0;
        v50[1] = xmmword_10040BEE0;
        v50[7] = xmmword_10040BF40;
        v50[8] = xmmword_10040BF50;
        v50[9] = xmmword_10040BF60;
        v50[10] = xmmword_10040BF70;
        v50[11] = xmmword_10040BF80;
        v50[12] = xmmword_10040BF90;
        v50[13] = xmmword_10040BFA0;
        v50[14] = xmmword_10040BFB0;
        v50[15] = xmmword_10040BFC0;
      }
LABEL_81:
      int v53 = *(_DWORD *)(a1 + 668);
      if (v53 < 1)
      {
        int v58 = *(_DWORD *)(a1 + 1168);
      }
      else
      {
        double v54 = 1.0e10 / (double)v53 + 0.5;
        double v55 = floor(v54);
        BOOL v56 = v55 < -2147483650.0 || v55 > 2147483650.0;
        unsigned int v57 = vcvtmd_s64_f64(v54);
        if (v56) {
          int v58 = 0;
        }
        else {
          int v58 = v57;
        }
      }
      int v59 = sub_1003A4784((void *)a1, 0x100uLL);
      double v60 = v59;
      *(void *)(a1 + 688) = v59;
      if ((v58 - 95000) > 0x2710)
      {
        for (uint64_t k = 0; k != 256; ++k)
        {
          while ((k - 1) > 0xFD)
          {
            *((unsigned char *)v60 + k) = k;
            if (++k == 256) {
              return;
            }
          }
          *((unsigned char *)v60 + k) = vcvtmd_s64_f64(pow((double)(int)k / 255.0, (double)v58 * 0.00001) * 255.0 + 0.5);
        }
      }
      else
      {
        *int v59 = xmmword_10040BED0;
        v59[1] = xmmword_10040BEE0;
        v59[7] = xmmword_10040BF40;
        v59[8] = xmmword_10040BF50;
        v59[9] = xmmword_10040BF60;
        v59[10] = xmmword_10040BF70;
        v59[11] = xmmword_10040BF80;
        v59[12] = xmmword_10040BF90;
        v59[13] = xmmword_10040BFA0;
        v59[14] = xmmword_10040BFB0;
        v59[15] = xmmword_10040BFC0;
      }
    }
    return;
  }
  if ((*(unsigned char *)(a1 + 607) & 2) != 0)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 720);
    if (*(unsigned __int8 *)(a1 + 721) > v9) {
      unsigned int v9 = *(unsigned __int8 *)(a1 + 721);
    }
    if (*(unsigned __int8 *)(a1 + 722) > v9) {
      unsigned int v9 = *(unsigned __int8 *)(a1 + 722);
    }
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 723);
  }
  unsigned int v10 = v9 - 1;
  unsigned __int8 v11 = 16 - v9;
  if (v10 >= 0xF) {
    unsigned __int8 v11 = 0;
  }
  char v12 = v11;
  if (v11 <= 5u) {
    char v12 = 5;
  }
  int v13 = *(_DWORD *)(a1 + 300) & 0x4000400;
  if (v13) {
    unsigned __int8 v11 = v12;
  }
  if ((v11 & 0xF8) != 0) {
    int v14 = 8;
  }
  else {
    int v14 = v11;
  }
  *(_DWORD *)(a1 + 664) = v14;
  int v15 = *(_DWORD *)(a1 + 668);
  if (!v13)
  {
    if (v15 < 1)
    {
      int v75 = 100000;
    }
    else
    {
      int v21 = *(_DWORD *)(a1 + 1168);
      if (!v21
        || ((double v22 = 1.0e15 / (double)v21 / (double)v15 + 0.5, v23 = floor(v22), v23 <= 2147483650.0)
          ? (BOOL v24 = v23 < -2147483650.0)
          : (BOOL v24 = 1),
            v24))
      {
        int v75 = 0;
      }
      else
      {
        int v75 = vcvtmd_s64_f64(v22);
      }
    }
    sub_1003A27B0((void *)a1, (void *)(a1 + 680), v14, v75);
    if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0) {
      goto LABEL_101;
    }
    return;
  }
  if (v15 < 1)
  {
    double v20 = 1.0;
  }
  else
  {
    double v16 = (double)*(int *)(a1 + 1168) * 0.00001 * (double)v15 + 0.5;
    double v17 = floor(v16);
    int v18 = vcvtmd_s64_f64(v16);
    if (v17 < -2147483650.0 || v17 > 2147483650.0) {
      double v20 = 0.0;
    }
    else {
      double v20 = (double)v18 * 0.00001;
    }
  }
  char v25 = 8 - v14;
  uint64_t v26 = (1 << (8 - v14));
  int v27 = sub_1003A46EC(a1, 8 * v26);
  *(void *)(a1 + 680) = v27;
  double v28 = v27;
  do
  {
    *v28++ = sub_1003A4784((void *)a1, 0x200uLL);
    --v26;
  }
  while (v26);
  unsigned int v29 = 0;
  int v30 = 0;
  unsigned int v31 = 0xFFu >> v14;
  do
  {
    __int16 v32 = 257 * v30;
    unsigned int v33 = vcvtmd_s64_f64(pow((double)((unsigned __int16)(257 * v30) + 128) / 65535.0, v20) * 65535.0 + 0.5);
    unsigned int v34 = ((v33 << (16 - v14)) - v33 + 0x8000) / 0xFFFF;
    if (v29 <= v34)
    {
      unsigned int v35 = v34 + 1;
      unsigned int v36 = v35 - v29;
      if (v35 - v29 >= 2)
      {
        unsigned int v37 = v29 + (v36 & 0xFFFFFFFE);
        unsigned int v38 = v36 & 0xFFFFFFFE;
        do
        {
          uint64_t v39 = v27[(v29 + 1) & v31];
          *(_WORD *)(v27[v29 & v31] + 2 * (v29 >> v25)) = v32;
          *(_WORD *)(v39 + 2 * ((v29 + 1) >> v25)) = v32;
          v29 += 2;
          v38 -= 2;
        }
        while (v38);
        if (v36 == (v36 & 0xFFFFFFFE)) {
          goto LABEL_49;
        }
      }
      else
      {
        unsigned int v37 = v29;
      }
      do
      {
        *(_WORD *)(v27[v37 & v31] + 2 * (v37 >> v25)) = v32;
        ++v37;
      }
      while (v35 != v37);
LABEL_49:
      unsigned int v29 = v35;
    }
    ++v30;
  }
  while (v30 != 255);
  unsigned int v40 = (256 << v25) - v29;
  if (256 << v25 > v29)
  {
    if (v40 < 2)
    {
      unsigned int v41 = v29;
      goto LABEL_99;
    }
    unsigned int v41 = v29 + (v40 & 0xFFFFFFFE);
    unsigned int v62 = v40 & 0xFFFFFFFE;
    do
    {
      uint64_t v63 = v27[(v29 + 1) & v31];
      *(_WORD *)(v27[v29 & v31] + 2 * (v29 >> v25)) = -1;
      *(_WORD *)(v63 + 2 * ((v29 + 1) >> v25)) = -1;
      v29 += 2;
      v62 -= 2;
    }
    while (v62);
    if (v40 != (v40 & 0xFFFFFFFE))
    {
      do
      {
LABEL_99:
        *(_WORD *)(v27[v41 & v31] + 2 * (v41 >> v25)) = -1;
        ++v41;
      }
      while (256 << v25 != v41);
    }
  }
  if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
  {
LABEL_101:
    double v64 = 1.0e10 / (double)*(int *)(a1 + 1168) + 0.5;
    double v65 = floor(v64);
    BOOL v66 = v65 < -2147483650.0 || v65 > 2147483650.0;
    unsigned int v67 = vcvtmd_s64_f64(v64);
    if (v66) {
      int v68 = 0;
    }
    else {
      int v68 = v67;
    }
    sub_1003A27B0((void *)a1, (void *)(a1 + 712), v14, v68);
    int v69 = *(_DWORD *)(a1 + 668);
    if (v69 < 1)
    {
      int v74 = *(_DWORD *)(a1 + 1168);
    }
    else
    {
      double v70 = 1.0e10 / (double)v69 + 0.5;
      double v71 = floor(v70);
      BOOL v72 = v71 < -2147483650.0 || v71 > 2147483650.0;
      unsigned int v73 = vcvtmd_s64_f64(v70);
      if (v72) {
        int v74 = 0;
      }
      else {
        int v74 = v73;
      }
    }
    sub_1003A27B0((void *)a1, (void *)(a1 + 704), v14, v74);
  }
}

void sub_1003A27B0(void *a1, void *a2, int a3, int a4)
{
  unsigned int v8 = 8 - a3;
  uint64_t v9 = (1 << (8 - a3));
  unsigned int v10 = ~(-1 << (16 - a3));
  unsigned __int8 v11 = sub_1003A46EC((uint64_t)a1, 8 * v9);
  *a2 = v11;
  if ((a4 - 95000) >= 0x2711)
  {
    uint64_t v17 = 0;
    double v18 = (double)a4 * 0.00001;
    double v97 = 1.0 / (double)(int)v10;
    uint32x4_t v99 = (uint32x4_t)vdupq_n_s32(v8);
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v93 = _Q0;
    float64x2_t v95 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
    do
    {
      BOOL v24 = sub_1003A4784(a1, 0x200uLL);
      uint64_t v25 = 0;
      v11[v17] = v24;
      int32x4_t v101 = vdupq_n_s32(v17);
      uint32x4_t v26 = (uint32x4_t)xmmword_100404900;
      uint32x4_t v27 = (uint32x4_t)xmmword_100404880;
      do
      {
        int32x4_t v119 = (int32x4_t)v27;
        int32x4_t v121 = (int32x4_t)v26;
        int32x4_t v28 = vaddq_s32((int32x4_t)vshlq_u32(v27, v99), v101);
        int32x4_t v29 = vaddq_s32((int32x4_t)vshlq_u32(v26, v99), v101);
        v30.i64[0] = v29.u32[0];
        v30.i64[1] = v29.u32[1];
        float64x2_t v31 = vcvtq_f64_u64(v30);
        v30.i64[0] = v29.u32[2];
        v30.i64[1] = v29.u32[3];
        float64x2_t v32 = vcvtq_f64_u64(v30);
        v30.i64[0] = v28.u32[0];
        v30.i64[1] = v28.u32[1];
        float64x2_t v33 = vcvtq_f64_u64(v30);
        v30.i64[0] = v28.u32[2];
        v30.i64[1] = v28.u32[3];
        float64x2_t v115 = vmulq_n_f64(v33, v97);
        float64x2_t v117 = vmulq_n_f64(vcvtq_f64_u64(v30), v97);
        float64x2_t v113 = vmulq_n_f64(v32, v97);
        float64x2_t v109 = vmulq_n_f64(v31, v97);
        long double v111 = pow(v109.f64[0], v18);
        long double v107 = pow(v109.f64[1], v18);
        v109.f64[0] = pow(v113.f64[0], v18);
        v113.f64[0] = pow(v113.f64[1], v18);
        long double v105 = pow(v115.f64[0], v18);
        long double v103 = pow(v115.f64[1], v18);
        v115.f64[0] = pow(v117.f64[0], v18);
        long double v34 = pow(v117.f64[1], v18);
        *(long double *)v123.val[2].uint64_t i64 = v105;
        *(long double *)&v123.val[2].i64[1] = v103;
        *(long double *)v123.val[1].uint64_t i64 = v111;
        *(long double *)&v123.val[1].i64[1] = v107;
        v35.f64[0] = v115.f64[0];
        v35.f64[1] = v34;
        v36.f64[0] = v109.f64[0];
        v36.f64[1] = v113.f64[0];
        v123.val[0].i64[1] = *(void *)&v95.f64[1];
        float64x2_t v37 = vmlaq_f64(v93, v95, v36);
        float64x2_t v38 = vmlaq_f64(v93, v95, v35);
        float64x2_t v39 = vrndmq_f64(vmlaq_f64(v93, v95, (float64x2_t)v123.val[1]));
        *(int32x2_t *)v123.val[1].uint64_t i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v37)));
        *(int32x2_t *)v123.val[3].uint64_t i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v38)));
        *(int32x2_t *)v123.val[0].uint64_t i8 = vmovn_s64(vcvtq_s64_f64(v39));
        *(int32x2_t *)v123.val[2].uint64_t i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(v93, v95, (float64x2_t)v123.val[2]))));
        *(int8x16_t *)&v24[v25] = vqtbl4q_s8(v123, (int8x16_t)xmmword_10040C010);
        *(void *)&v39.f64[0] = 0x800000008;
        *(void *)&v39.f64[1] = 0x800000008;
        uint32x4_t v26 = (uint32x4_t)vaddq_s32(v121, (int32x4_t)v39);
        uint32x4_t v27 = (uint32x4_t)vaddq_s32(v119, (int32x4_t)v39);
        v25 += 2;
      }
      while (v25 != 64);
      ++v17;
    }
    while (v17 != v9);
  }
  else if (a3)
  {
    uint64_t v12 = 0;
    int v13 = 1 << (15 - a3);
    do
    {
      int v14 = sub_1003A4784(a1, 0x200uLL);
      uint64_t v15 = 0;
      v11[v12] = v14;
      do
      {
        double v16 = (_WORD *)v14 + v15;
        _WORD *v16 = (v13 - ((v15 << v8) + (int)v12) + (((v15 << v8) + (int)v12) << 16)) / v10;
        v16[1] = (v13 - ((((int)v15 + 1) << v8) + (int)v12) + (((((int)v15 + 1) << v8) + (int)v12) << 16)) / v10;
        v15 += 2;
      }
      while (v15 != 256);
      ++v12;
    }
    while (v12 != v9);
  }
  else
  {
    uint64_t v40 = 0;
    uint32x4_t v41 = (uint32x4_t)vdupq_n_s32(v8);
    int32x4_t v122 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_100404880, v41);
    int32x4_t v120 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_100404900, v41);
    int32x4_t v118 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C020, v41);
    int32x4_t v116 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C030, v41);
    int32x4_t v114 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C040, v41);
    int32x4_t v112 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C050, v41);
    int32x4_t v110 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C060, v41);
    int32x4_t v108 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C070, v41);
    int32x4_t v106 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C080, v41);
    int32x4_t v104 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C090, v41);
    int32x4_t v102 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C0A0, v41);
    int32x4_t v100 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C0B0, v41);
    int32x4_t v98 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C0C0, v41);
    int32x4_t v96 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C0D0, v41);
    int32x4_t v94 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C0E0, v41);
    int32x4_t v92 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C0F0, v41);
    int32x4_t v91 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C100, v41);
    int32x4_t v90 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C110, v41);
    int32x4_t v89 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C120, v41);
    int32x4_t v88 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C130, v41);
    int32x4_t v87 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C140, v41);
    int32x4_t v86 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C150, v41);
    int32x4_t v85 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C160, v41);
    int32x4_t v84 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C170, v41);
    int32x4_t v83 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C180, v41);
    int32x4_t v82 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C190, v41);
    int32x4_t v81 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C1A0, v41);
    int32x4_t v80 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C1B0, v41);
    int32x4_t v79 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C1C0, v41);
    int32x4_t v78 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C1D0, v41);
    int32x4_t v77 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C1E0, v41);
    int32x4_t v76 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C1F0, v41);
    int32x4_t v75 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C200, v41);
    int32x4_t v74 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C210, v41);
    int32x4_t v73 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C220, v41);
    int32x4_t v72 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C230, v41);
    int32x4_t v71 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C240, v41);
    int32x4_t v70 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C250, v41);
    int32x4_t v69 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C260, v41);
    int32x4_t v68 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C270, v41);
    int32x4_t v67 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C280, v41);
    int32x4_t v66 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C290, v41);
    int32x4_t v65 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C2A0, v41);
    int32x4_t v64 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C2B0, v41);
    int32x4_t v63 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C2C0, v41);
    int32x4_t v62 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C2D0, v41);
    int32x4_t v61 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C2E0, v41);
    int32x4_t v60 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C2F0, v41);
    int32x4_t v59 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C300, v41);
    int32x4_t v58 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C310, v41);
    int32x4_t v57 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C320, v41);
    int32x4_t v56 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C330, v41);
    int32x4_t v55 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C340, v41);
    int32x4_t v54 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C350, v41);
    int32x4_t v53 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C360, v41);
    int32x4_t v52 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C370, v41);
    int32x4_t v51 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C380, v41);
    int32x4_t v50 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C390, v41);
    int32x4_t v49 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C3A0, v41);
    int32x4_t v48 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C3B0, v41);
    int32x4_t v47 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C3C0, v41);
    int32x4_t v46 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C3D0, v41);
    int32x4_t v45 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C3E0, v41);
    int32x4_t v44 = (int32x4_t)vshlq_u32((uint32x4_t)xmmword_10040C3F0, v41);
    do
    {
      int v42 = (int16x8_t *)sub_1003A4784(a1, 0x200uLL);
      int32x4_t v43 = vdupq_n_s32(v40);
      int16x8_t *v42 = vuzp1q_s16((int16x8_t)vaddq_s32(v120, v43), (int16x8_t)vaddq_s32(v122, v43));
      v42[1] = vuzp1q_s16((int16x8_t)vaddq_s32(v116, v43), (int16x8_t)vaddq_s32(v118, v43));
      v42[2] = vuzp1q_s16((int16x8_t)vaddq_s32(v112, v43), (int16x8_t)vaddq_s32(v114, v43));
      unint64_t v42[3] = vuzp1q_s16((int16x8_t)vaddq_s32(v108, v43), (int16x8_t)vaddq_s32(v110, v43));
      v42[4] = vuzp1q_s16((int16x8_t)vaddq_s32(v104, v43), (int16x8_t)vaddq_s32(v106, v43));
      v42[5] = vuzp1q_s16((int16x8_t)vaddq_s32(v100, v43), (int16x8_t)vaddq_s32(v102, v43));
      v42[6] = vuzp1q_s16((int16x8_t)vaddq_s32(v96, v43), (int16x8_t)vaddq_s32(v98, v43));
      v42[7] = vuzp1q_s16((int16x8_t)vaddq_s32(v92, v43), (int16x8_t)vaddq_s32(v94, v43));
      v42[8] = vuzp1q_s16((int16x8_t)vaddq_s32(v90, v43), (int16x8_t)vaddq_s32(v91, v43));
      v42[9] = vuzp1q_s16((int16x8_t)vaddq_s32(v88, v43), (int16x8_t)vaddq_s32(v89, v43));
      v42[10] = vuzp1q_s16((int16x8_t)vaddq_s32(v86, v43), (int16x8_t)vaddq_s32(v87, v43));
      v42[11] = vuzp1q_s16((int16x8_t)vaddq_s32(v84, v43), (int16x8_t)vaddq_s32(v85, v43));
      v42[12] = vuzp1q_s16((int16x8_t)vaddq_s32(v82, v43), (int16x8_t)vaddq_s32(v83, v43));
      v42[13] = vuzp1q_s16((int16x8_t)vaddq_s32(v80, v43), (int16x8_t)vaddq_s32(v81, v43));
      v42[14] = vuzp1q_s16((int16x8_t)vaddq_s32(v78, v43), (int16x8_t)vaddq_s32(v79, v43));
      v42[15] = vuzp1q_s16((int16x8_t)vaddq_s32(v76, v43), (int16x8_t)vaddq_s32(v77, v43));
      v42[16] = vuzp1q_s16((int16x8_t)vaddq_s32(v74, v43), (int16x8_t)vaddq_s32(v75, v43));
      void v42[17] = vuzp1q_s16((int16x8_t)vaddq_s32(v72, v43), (int16x8_t)vaddq_s32(v73, v43));
      v42[18] = vuzp1q_s16((int16x8_t)vaddq_s32(v70, v43), (int16x8_t)vaddq_s32(v71, v43));
      v42[19] = vuzp1q_s16((int16x8_t)vaddq_s32(v68, v43), (int16x8_t)vaddq_s32(v69, v43));
      v42[20] = vuzp1q_s16((int16x8_t)vaddq_s32(v66, v43), (int16x8_t)vaddq_s32(v67, v43));
      v42[21] = vuzp1q_s16((int16x8_t)vaddq_s32(v64, v43), (int16x8_t)vaddq_s32(v65, v43));
      v42[22] = vuzp1q_s16((int16x8_t)vaddq_s32(v62, v43), (int16x8_t)vaddq_s32(v63, v43));
      v42[23] = vuzp1q_s16((int16x8_t)vaddq_s32(v60, v43), (int16x8_t)vaddq_s32(v61, v43));
      v42[24] = vuzp1q_s16((int16x8_t)vaddq_s32(v58, v43), (int16x8_t)vaddq_s32(v59, v43));
      v42[25] = vuzp1q_s16((int16x8_t)vaddq_s32(v56, v43), (int16x8_t)vaddq_s32(v57, v43));
      v42[26] = vuzp1q_s16((int16x8_t)vaddq_s32(v54, v43), (int16x8_t)vaddq_s32(v55, v43));
      v42[27] = vuzp1q_s16((int16x8_t)vaddq_s32(v52, v43), (int16x8_t)vaddq_s32(v53, v43));
      v42[28] = vuzp1q_s16((int16x8_t)vaddq_s32(v50, v43), (int16x8_t)vaddq_s32(v51, v43));
      v42[29] = vuzp1q_s16((int16x8_t)vaddq_s32(v48, v43), (int16x8_t)vaddq_s32(v49, v43));
      v42[30] = vuzp1q_s16((int16x8_t)vaddq_s32(v46, v43), (int16x8_t)vaddq_s32(v47, v43));
      v42[31] = vuzp1q_s16((int16x8_t)vaddq_s32(v44, v43), (int16x8_t)vaddq_s32(v45, v43));
      v11[v40++] = v42;
    }
    while (v9 != v40);
  }
}

uint64_t sub_1003A318C(int *a1, int *a2)
{
  int v2 = *a2;
  int v3 = a2[1] + *a2 + a2[2];
  if (!v3) {
    return 1;
  }
  if (v2)
  {
    double v4 = floor((double)v2 * 100000.0 / (double)v3 + 0.5);
    if (v4 > 2147483650.0 || v4 < -2147483650.0) {
      return 1;
    }
    int v2 = (int)v4;
  }
  *a1 = v2;
  int v6 = a2[1];
  if (v6)
  {
    double v7 = floor((double)v6 * 100000.0 / (double)v3 + 0.5);
    if (v7 > 2147483650.0 || v7 < -2147483650.0) {
      return 1;
    }
    int v6 = (int)v7;
  }
  a1[1] = v6;
  int v9 = a2[3];
  int v10 = a2[4] + v9 + a2[5];
  if (!v10) {
    return 1;
  }
  int v12 = *a2;
  int v11 = a2[1];
  if (v9)
  {
    double v13 = floor((double)v9 * 100000.0 / (double)v10 + 0.5);
    if (v13 > 2147483650.0 || v13 < -2147483650.0) {
      return 1;
    }
    int v9 = (int)v13;
  }
  a1[2] = v9;
  int v15 = a2[4];
  if (v15)
  {
    double v16 = floor((double)v15 * 100000.0 / (double)v10 + 0.5);
    if (v16 > 2147483650.0 || v16 < -2147483650.0) {
      return 1;
    }
    int v15 = (int)v16;
  }
  a1[3] = v15;
  int v18 = a2[6];
  int v19 = a2[7] + v18 + a2[8];
  if (!v19) {
    return 1;
  }
  int v21 = a2[3];
  int v20 = a2[4];
  if (v18)
  {
    double v22 = floor((double)v18 * 100000.0 / (double)v19 + 0.5);
    if (v22 > 2147483650.0 || v22 < -2147483650.0) {
      return 1;
    }
    int v18 = (int)v22;
  }
  a1[4] = v18;
  int v24 = a2[7];
  if (v24)
  {
    double v25 = floor((double)v24 * 100000.0 / (double)v19 + 0.5);
    if (v25 > 2147483650.0 || v25 < -2147483650.0) {
      return 1;
    }
    int v24 = (int)v25;
  }
  a1[5] = v24;
  int v27 = v10 + v3 + v19;
  if (!v27) {
    return 1;
  }
  int v28 = v21 + v12;
  int v29 = a2[7];
  int v30 = v28 + a2[6];
  if (v30)
  {
    double v31 = floor((double)v30 * 100000.0 / (double)v27 + 0.5);
    if (v31 > 2147483650.0 || v31 < -2147483650.0) {
      return 1;
    }
    int v30 = (int)v31;
  }
  a1[6] = v30;
  int v33 = v20 + v11 + v29;
  if (v33)
  {
    double v34 = floor((double)v33 * 100000.0 / (double)v27 + 0.5);
    if (v34 <= 2147483650.0 && v34 >= -2147483650.0)
    {
      int v33 = (int)v34;
      goto LABEL_54;
    }
    return 1;
  }
LABEL_54:
  a1[7] = v33;
  return 0;
}

void sub_1003A34AC(uint64_t a1, const char *a2)
{
  if (a1)
  {
    double v4 = *(void (**)(uint64_t, const char *))(a1 + 216);
    if (v4) {
      v4(a1, a2);
    }
  }
  sub_1003A34E8(a1, a2);
}

void sub_1003A34E8(uint64_t a1, const char *a2)
{
  int v3 = "undefined";
  if (a2) {
    int v3 = a2;
  }
  fprintf(__stderrp, "libpng error: %s", v3);
  fputc(10, __stderrp);
  sub_1003A44C8(a1);
}

unint64_t sub_1003A3544(uint64_t a1, unint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (a1 && a3 < a2)
  {
    if (a4 && (char v4 = *a4) != 0 && a2 - 1 > a3)
    {
      int v5 = a4 + 1;
      do
      {
        *(unsigned char *)(a1 + a3) = v4;
        unint64_t v6 = a3 + 1;
        int v7 = *v5++;
        char v4 = v7;
        if (v7) {
          BOOL v8 = v6 >= a2 - 1;
        }
        else {
          BOOL v8 = 1;
        }
        ++a3;
      }
      while (!v8);
    }
    else
    {
      unint64_t v6 = a3;
    }
    *(unsigned char *)(a1 + v6) = 0;
    return v6;
  }
  return a3;
}

unint64_t sub_1003A35A0(unint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  *(unsigned char *)(a2 - 1) = 0;
  unint64_t v4 = a2 - 1;
  if (v4 > a1)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 1;
    while (2)
    {
      if (a4 || v6 < v7)
      {
        switch(a3)
        {
          case 1:
            goto LABEL_11;
          case 2:
            int v7 = 2;
LABEL_11:
            unint64_t v8 = a4 / 0xA;
            *(unsigned char *)--unint64_t v4 = a0123456789abcd[a4 % 0xA];
            goto LABEL_5;
          case 3:
            goto LABEL_4;
          case 4:
            int v7 = 2;
LABEL_4:
            *(unsigned char *)--unint64_t v4 = a0123456789abcd[a4 & 0xF];
            unint64_t v8 = a4 >> 4;
LABEL_5:
            ++v6;
            a4 = v8;
            goto LABEL_6;
          case 5:
            unint64_t v9 = a4 % 0xA;
            if (v5 || v9)
            {
              *(unsigned char *)--unint64_t v4 = a0123456789abcd[v9];
              int v5 = 1;
              int v7 = 5;
              a4 /= 0xAuLL;
              ++v6;
              if (a3 != 5) {
                goto LABEL_6;
              }
            }
            else
            {
              int v5 = 0;
              int v7 = 5;
              a4 /= 0xAuLL;
              ++v6;
              if (a3 != 5) {
                goto LABEL_6;
              }
            }
LABEL_19:
            if (v6 == 5 && v4 > a1)
            {
              if (v5)
              {
                *(unsigned char *)--unint64_t v4 = 46;
              }
              else
              {
                int v5 = 0;
                if (!a4) {
                  *(unsigned char *)--unint64_t v4 = 48;
                }
              }
              int v6 = 5;
            }
LABEL_6:
            if (v4 > a1) {
              continue;
            }
            return v4;
          default:
            a4 = 0;
            ++v6;
            if (a3 != 5) {
              goto LABEL_6;
            }
            goto LABEL_19;
        }
      }
      break;
    }
  }
  return v4;
}

uint64_t sub_1003A3704(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_10;
  }
  if (*(unsigned char *)a2 == 35)
  {
    if (*(unsigned char *)(a2 + 1) == 32)
    {
      uint64_t v2 = 1;
    }
    else if (*(unsigned char *)(a2 + 2) == 32)
    {
      uint64_t v2 = 2;
    }
    else if (*(unsigned char *)(a2 + 3) == 32)
    {
      uint64_t v2 = 3;
    }
    else if (*(unsigned char *)(a2 + 4) == 32)
    {
      uint64_t v2 = 4;
    }
    else if (*(unsigned char *)(a2 + 5) == 32)
    {
      uint64_t v2 = 5;
    }
    else if (*(unsigned char *)(a2 + 6) == 32)
    {
      uint64_t v2 = 6;
    }
    else if (*(unsigned char *)(a2 + 7) == 32)
    {
      uint64_t v2 = 7;
    }
    else if (*(unsigned char *)(a2 + 8) == 32)
    {
      uint64_t v2 = 8;
    }
    else if (*(unsigned char *)(a2 + 9) == 32)
    {
      uint64_t v2 = 9;
    }
    else if (*(unsigned char *)(a2 + 10) == 32)
    {
      uint64_t v2 = 10;
    }
    else if (*(unsigned char *)(a2 + 11) == 32)
    {
      uint64_t v2 = 11;
    }
    else if (*(unsigned char *)(a2 + 12) == 32)
    {
      uint64_t v2 = 12;
    }
    else if (*(unsigned char *)(a2 + 13) == 32)
    {
      uint64_t v2 = 13;
    }
    else
    {
      uint64_t v2 = 14;
      if (*(unsigned char *)(a2 + 14) != 32) {
        uint64_t v2 = 15;
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v3 = *(uint64_t (**)(void))(a1 + 224);
  a2 += v2;
  if (v3)
  {
    return v3();
  }
  else
  {
LABEL_10:
    fprintf(__stderrp, "libpng warning: %s", (const char *)a2);
    int v5 = __stderrp;
    return fputc(10, v5);
  }
}

uint64_t sub_1003A38B4(uint64_t result, int a2, unsigned char *a3)
{
  uint64_t v3 = (a2 - 1);
  if (v3 <= 7 && result)
  {
    uint64_t v4 = result + 32 * v3;
    if (a3 && (LOBYTE(v5) = *a3) != 0)
    {
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = v6 + 1;
        *(unsigned char *)(v4 + v6) = v5;
        if (v6 > 0x1D) {
          break;
        }
        int v5 = a3[++v6];
      }
      while (v5);
    }
    else
    {
      unint64_t v7 = 0;
    }
    *(unsigned char *)(v4 + v7) = 0;
  }
  return result;
}

uint64_t sub_1003A3908(uint64_t result, int a2, int a3, int a4)
{
  int v4 = 0;
  int v5 = 0;
  int v6 = 0;
  if (a4 >= 0) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = -a4;
  }
  unint64_t v8 = &v19;
  char v19 = 0;
  int v9 = 1;
  while (v7 || v6 < v9)
  {
    switch(a3)
    {
      case 1:
        goto LABEL_13;
      case 2:
        int v9 = 2;
LABEL_13:
        unint64_t v10 = v7 / 0xA;
        int v4 = a0123456789abcd[v7 % 0xA];
        *--unint64_t v8 = v4;
        goto LABEL_7;
      case 3:
        goto LABEL_6;
      case 4:
        int v9 = 2;
LABEL_6:
        int v4 = a0123456789abcd[v7 & 0xF];
        *--unint64_t v8 = v4;
        unint64_t v10 = v7 >> 4;
LABEL_7:
        ++v6;
        unint64_t v7 = v10;
        goto LABEL_8;
      case 5:
        unint64_t v11 = v7 % 0xA;
        if (v5 || v11)
        {
          int v4 = a0123456789abcd[v11];
          *--unint64_t v8 = v4;
          int v5 = 1;
        }
        else
        {
          int v5 = 0;
        }
        int v9 = 5;
        v7 /= 0xAuLL;
        ++v6;
        BOOL v12 = v8 > v18;
        if (a3 == 5) {
          goto LABEL_21;
        }
        goto LABEL_8;
      default:
        unint64_t v7 = 0;
        ++v6;
        BOOL v12 = v8 > v18;
        if (a3 != 5) {
          goto LABEL_8;
        }
LABEL_21:
        if (v6 != 5 || !v12) {
          goto LABEL_8;
        }
        if (v5)
        {
          int v4 = 46;
LABEL_25:
          *--unint64_t v8 = v4;
          goto LABEL_27;
        }
        int v5 = 0;
        if (!v7)
        {
          int v4 = 48;
          goto LABEL_25;
        }
LABEL_27:
        int v6 = 5;
LABEL_8:
        if (v8 <= v18) {
          goto LABEL_29;
        }
        break;
    }
  }
LABEL_29:
  if (a4 < 0 && v8 > v18)
  {
    int v4 = 45;
    *--unint64_t v8 = 45;
  }
  uint64_t v13 = (a2 - 1);
  if (v13 <= 7 && result)
  {
    unint64_t v14 = 0;
    uint64_t v15 = result + 32 * v13;
    if (v8 && v4)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v8 + 1;
      do
      {
        unint64_t v14 = v16 + 1;
        *(unsigned char *)(v15 + v16) = v4;
        if (v16 > 0x1D) {
          break;
        }
        int v4 = v17[v16++];
      }
      while (v4);
    }
    *(unsigned char *)(v15 + v14) = 0;
  }
  return result;
}

uint64_t sub_1003A3B14(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3 = 0;
  if (a2)
  {
    while (1)
    {
      int v5 = *a3;
      if (v5 != 64) {
        break;
      }
      int v4 = a3 + 1;
      int v5 = a3[1];
      if (a3[1])
      {
        uint64_t v6 = 0;
        uint64_t v7 = a2 - 32;
        do
        {
          int v8 = v6 + 1;
          v7 += 32;
          if (v6 == 9) {
            break;
          }
          int v9 = a123456789[v6++];
        }
        while (v9 != v5);
        if (((v8 - 1) & 0xFFFFFFF8) != 0)
        {
LABEL_4:
          a3 = v4 + 1;
          v13[v3++] = v5;
          if (v3 >= 0xBF) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v10 = 0;
          while (*(unsigned char *)(v7 + v10) && v10 <= 0x1F)
          {
            v13[v3 + v10] = *(unsigned char *)(v7 + v10);
            ++v10;
            if (v3 + v10 == 191)
            {
              unint64_t v3 = 191;
              goto LABEL_24;
            }
          }
          v3 += v10;
          a3 += 2;
          if (v3 >= 0xBF) {
            goto LABEL_24;
          }
        }
      }
      else
      {
        ++a3;
        v13[v3++] = 64;
        if (v3 >= 0xBF) {
          goto LABEL_24;
        }
      }
    }
    int v4 = a3;
    if (!*a3) {
      goto LABEL_24;
    }
    goto LABEL_4;
  }
  do
  {
    if (!a3[v3]) {
      break;
    }
    v13[v3] = a3[v3];
    ++v3;
  }
  while (v3 != 191);
LABEL_24:
  v13[v3] = 0;
  return sub_1003A3704(a1, (uint64_t)v13);
}

uint64_t sub_1003A3C8C(uint64_t a1, const char *a2)
{
  int v3 = *(_DWORD *)(a1 + 292);
  if ((*(unsigned char *)(a1 + 298) & 0x10) == 0)
  {
    if ((v3 & 0x8000) == 0 || !*(_DWORD *)(a1 + 528)) {
      sub_1003A34AC(a1, a2);
    }
    sub_1003A3E44(a1, a2);
  }
  if ((v3 & 0x8000) != 0 && (unint64_t v4 = *(unsigned int *)(a1 + 528), v4))
  {
    sub_1003A3EE4(v4, v6, (uint64_t)a2);
    return sub_1003A3704(a1, (uint64_t)v6);
  }
  else
  {
    return sub_1003A3704(a1, (uint64_t)a2);
  }
}

uint64_t sub_1003A3D74(uint64_t a1, const char *a2)
{
  if (a1)
  {
    sub_1003A3EE4(*(unsigned int *)(a1 + 528), v5, (uint64_t)a2);
    return sub_1003A3704(a1, (uint64_t)v5);
  }
  else
  {
    fprintf(__stderrp, "libpng warning: %s", a2);
    unint64_t v4 = __stderrp;
    return fputc(10, v4);
  }
}

void sub_1003A3E44(uint64_t a1, const char *a2)
{
  if (!a1) {
    sub_1003A34AC(0, a2);
  }
  sub_1003A3EE4(*(unsigned int *)(a1 + 528), v3, (uint64_t)a2);
  sub_1003A34AC(a1, v3);
}

uint64_t sub_1003A3E84(uint64_t a1, const char *a2)
{
  if ((*(unsigned char *)(a1 + 298) & 0x20) == 0) {
    sub_1003A34AC(a1, a2);
  }

  return sub_1003A3704(a1, (uint64_t)a2);
}

uint64_t sub_1003A3EB4(uint64_t a1, const char *a2)
{
  if ((*(unsigned char *)(a1 + 298) & 0x40) == 0) {
    sub_1003A34AC(a1, a2);
  }

  return sub_1003A3704(a1, (uint64_t)a2);
}

unint64_t sub_1003A3EE4(unint64_t result, unsigned char *a2, uint64_t a3)
{
  unsigned int v3 = BYTE3(result);
  if (BYTE3(result) - 123 >= 0xFFFFFFC6 && BYTE3(result) - 91 > 5u)
  {
    unsigned int v5 = 0;
  }
  else
  {
    a2[1] = byte_10040C524[(unint64_t)result >> 28];
    a2[2] = byte_10040C524[(result >> 24) & 0xF];
    a2[3] = 93;
    unsigned int v5 = 3;
    LOBYTE(v3) = 91;
  }
  *a2 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 1;
  if (BYTE2(result) - 123 < 0xFFFFFFC6 || BYTE2(result) - 91 < 6)
  {
    a2[v7] = 91;
    unint64_t v11 = &a2[v6];
    v11[2] = byte_10040C524[(result >> 20) & 0xF];
    v11[3] = byte_10040C524[(result >> 16) & 0xF];
    a2[v6 | 4] = 93;
    uint64_t v8 = v6 | 4;
    uint64_t v9 = v8 + 1;
    int v10 = BYTE1(result);
    if (BYTE1(result) - 123 < 0xFFFFFFC6) {
      goto LABEL_15;
    }
  }
  else
  {
    a2[v7] = BYTE2(result);
    uint64_t v8 = v7;
    uint64_t v9 = v7 + 1;
    int v10 = BYTE1(result);
    if (BYTE1(result) - 123 < 0xFFFFFFC6) {
      goto LABEL_15;
    }
  }
  if ((v10 - 91) >= 6)
  {
    a2[v9] = BYTE1(result);
    uint64_t v12 = v9;
    uint64_t v13 = v9 + 1;
    int v14 = result;
    if (result - 123 < 0xFFFFFFC6) {
      goto LABEL_22;
    }
    goto LABEL_16;
  }
LABEL_15:
  a2[v9] = 91;
  uint64_t v15 = &a2[v8];
  v15[2] = byte_10040C524[(unsigned __int16)result >> 12];
  v15[3] = byte_10040C524[(result >> 8) & 0xF];
  a2[v8 + 4] = 93;
  uint64_t v12 = (v8 + 4);
  uint64_t v13 = v12 + 1;
  int v14 = result;
  if (result - 123 < 0xFFFFFFC6) {
    goto LABEL_22;
  }
LABEL_16:
  if ((v14 - 91) >= 6)
  {
    a2[v13] = result;
    uint64_t v16 = v13;
    uint64_t v17 = v13 + 1;
    if (a3) {
      goto LABEL_18;
    }
LABEL_23:
    a2[v17] = 0;
    return result;
  }
LABEL_22:
  a2[v13] = 91;
  int v21 = &a2[v12];
  v21[2] = byte_10040C524[result >> 4];
  LODWORD(v13) = v12 + 4;
  v21[3] = byte_10040C524[result & 0xF];
  a2[v12 + 4] = 93;
  uint64_t v16 = (v12 + 4);
  uint64_t v17 = v16 + 1;
  if (!a3) {
    goto LABEL_23;
  }
LABEL_18:
  uint64_t v18 = 0;
  a2[v17] = 58;
  a2[v16 + 2] = 32;
  uint64_t v19 = v16 + 3;
  int v20 = v13 + 198;
  while (*(unsigned char *)(a3 + v18))
  {
    a2[v19 + v18] = *(unsigned char *)(a3 + v18);
    if (++v18 == 195)
    {
      a2[v20] = 0;
      return result;
    }
  }
  a2[(int)v19 + (int)v18] = 0;
  return result;
}

uint64_t sub_1003A4124(uint64_t a1, const char *a2)
{
  if ((*(unsigned char *)(a1 + 298) & 0x10) == 0) {
    sub_1003A3E44(a1, a2);
  }
  sub_1003A3EE4(*(unsigned int *)(a1 + 528), v4, (uint64_t)a2);
  return sub_1003A3704(a1, (uint64_t)v4);
}

uint64_t sub_1003A41A8(uint64_t a1, const char *a2, int a3)
{
  if ((*(unsigned char *)(a1 + 293) & 0x80) == 0)
  {
    int v4 = *(_DWORD *)(a1 + 296);
    if (a3 <= 0)
    {
      if ((v4 & 0x200000) != 0) {
        goto LABEL_4;
      }
    }
    else if ((v4 & 0x400000) != 0)
    {
LABEL_4:
      return sub_1003A3704(a1, (uint64_t)a2);
    }
    sub_1003A34AC(a1, a2);
  }
  if (a3 > 1 && (*(unsigned char *)(a1 + 298) & 0x10) == 0) {
    sub_1003A3E44(a1, a2);
  }
  sub_1003A3EE4(*(unsigned int *)(a1 + 528), v6, (uint64_t)a2);
  return sub_1003A3704(a1, (uint64_t)v6);
}

void sub_1003A42A0(uint64_t a1, uint64_t a2)
{
  qmemcpy(v3, "fixed point overflow in ", 24);
  if (a2)
  {
    uint64_t v2 = 0;
    while (*(unsigned char *)(a2 + v2))
    {
      *((unsigned char *)&v3[1] + v2 + 8) = *(unsigned char *)(a2 + v2);
      if (++v2 == 195)
      {
        char v4 = 0;
        sub_1003A34AC(a1, (const char *)v3);
      }
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  *((unsigned char *)&v3[1] + v2 + 8) = 0;
  sub_1003A34AC(a1, (const char *)v3);
}

void *sub_1003A4320(void *result, uint64_t a2, size_t __size)
{
  if (result)
  {
    unsigned int v5 = result;
    uint64_t result = (void *)result[25];
    if (result)
    {
      uint64_t v6 = v5[26];
      if (v6)
      {
        if (v6 == __size) {
          goto LABEL_14;
        }
      }
      else
      {
        if (result != v5) {
          sub_1003A34AC((uint64_t)v5, "Libpng jmp_buf still allocated");
        }
        if (__size == 192) {
          goto LABEL_14;
        }
      }
      sub_1003A3704((uint64_t)v5, (uint64_t)"Application jmp_buf size changed");
      return 0;
    }
    v5[26] = 0;
    if (__size > 0xC0)
    {
      uint64_t result = sub_1003A49AC(v5, __size);
      v5[25] = result;
      if (result)
      {
        v5[26] = __size;
LABEL_14:
        v5[24] = a2;
      }
    }
    else
    {
      v5[24] = a2;
      v5[25] = v5;
      return v5;
    }
  }
  return result;
}

void sub_1003A43F8(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[25];
    if (v2)
    {
      if (v2 != a1 && a1[26] != 0)
      {
        memset(v4, 0, sizeof(v4));
        if (!setjmp((int *)v4))
        {
          a1[25] = v4;
          a1[26] = 0;
          a1[24] = &_longjmp;
          sub_1003A46CC((uint64_t)a1, v2);
        }
      }
    }
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
}

void sub_1003A44C8(uint64_t a1)
{
  if (a1)
  {
    double v1 = *(void (**)(void))(a1 + 192);
    if (v1)
    {
      if (*(void *)(a1 + 200)) {
        v1();
      }
    }
  }
  abort();
}

void *sub_1003A44F0(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result[28] = a4;
    result[29] = a2;
    result[27] = a3;
  }
  return result;
}

uint64_t sub_1003A4500(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, int *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v9 = 0;
  if (a1 && a2)
  {
    if (a3) {
      *a3 = *(_DWORD *)a2;
    }
    if (a4) {
      *a4 = *(_DWORD *)(a2 + 4);
    }
    if (a5) {
      *a5 = *(unsigned __int8 *)(a2 + 36);
    }
    if (a6) {
      *a6 = *(unsigned __int8 *)(a2 + 37);
    }
    if (a8) {
      *a8 = *(unsigned __int8 *)(a2 + 38);
    }
    if (a9) {
      *a9 = *(unsigned __int8 *)(a2 + 39);
    }
    int v10 = *(unsigned __int8 *)(a2 + 40);
    if (a7) {
      *a7 = v10;
    }
    sub_1003A14F0(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), v10, *(unsigned __int8 *)(a2 + 38), *(unsigned __int8 *)(a2 + 39));
    return 1;
  }
  return v9;
}

uint64_t sub_1003A45A0(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4, void *a5)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    if ((*(unsigned char *)(a2 + 8) & 0x10) == 0) {
      return 0;
    }
    if (*(unsigned char *)(a2 + 37) == 3)
    {
      if (a3)
      {
        *a3 = *(void *)(a2 + 184);
        uint64_t result = 16;
        if (!a5) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t result = 0;
        if (!a5) {
          goto LABEL_16;
        }
      }
      *a5 = a2 + 192;
      goto LABEL_16;
    }
    if (a5)
    {
      *a5 = a2 + 192;
      uint64_t result = 16;
      if (!a3)
      {
LABEL_16:
        if (a4)
        {
          *a4 = *(unsigned __int16 *)(a2 + 34);
          return 16;
        }
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
      if (!a3) {
        goto LABEL_16;
      }
    }
    *a3 = 0;
    goto LABEL_16;
  }
  return result;
}

void sub_1003A4630(void *__src)
{
  if (__src)
  {
    memcpy(__dst, __src, sizeof(__dst));
    bzero(__src, 0x4E0uLL);
    if (__dst[125]) {
      ((void (*)(void *, void *))__dst[125])(__dst, __src);
    }
    else {
      free(__src);
    }
    sub_1003A43F8(__dst);
  }
}

void sub_1003A46CC(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    uint64_t v2 = *(void (**)(void))(a1 + 1000);
    if (v2) {
      v2();
    }
    else {
      free(a2);
    }
  }
}

void *sub_1003A46EC(uint64_t a1, size_t __size)
{
  if (a1)
  {
    if (__size)
    {
      char v4 = *(uint64_t (**)(uint64_t, size_t))(a1 + 992);
      if (v4)
      {
        unsigned int v5 = (void *)v4(a1, __size);
        if (v5)
        {
LABEL_5:
          bzero(v5, __size);
          return v5;
        }
      }
      else
      {
        unsigned int v5 = malloc(__size);
        if (v5) {
          goto LABEL_5;
        }
      }
    }
    sub_1003A34AC(a1, "Out of memory");
  }
  return 0;
}

void *sub_1003A4784(void *result, size_t __size)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    if (!__size) {
      goto LABEL_7;
    }
    unsigned int v3 = (uint64_t (*)(void *))result[124];
    if (v3)
    {
      uint64_t result = (void *)v3(result);
      if (result) {
        return result;
      }
LABEL_7:
      sub_1003A34AC(v2, "Out of memory");
    }
    uint64_t result = malloc(__size);
    if (!result) {
      goto LABEL_7;
    }
  }
  return result;
}

void *sub_1003A47DC(uint64_t a1, size_t __size)
{
  if (!__size) {
    return 0;
  }
  if (a1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(a1 + 992);
    if (v2) {
      return (void *)v2();
    }
  }
  return malloc(__size);
}

void *sub_1003A4800(uint64_t a1, unsigned int a2, unint64_t a3)
{
  if ((int)a2 < 1 || !a3) {
    sub_1003A34AC(a1, "internal error: array alloc");
  }
  uint64_t v3 = a2;
  if (!is_mul_ok(a3, a2)) {
    return 0;
  }
  size_t v4 = a2 * a3;
  if (!(v3 * a3)) {
    return 0;
  }
  if (a1 && (unsigned int v5 = *(uint64_t (**)(void))(a1 + 992)) != 0)
  {
    return (void *)v5();
  }
  else
  {
    return malloc(v4);
  }
}

char *sub_1003A4888(uint64_t a1, const void *a2, unsigned int a3, unsigned int a4, unint64_t a5)
{
  if ((a3 & 0x80000000) != 0 || (int)a4 < 1 || !a5 || !a2 && a3) {
    sub_1003A34AC(a1, "internal error: array realloc");
  }
  if ((a3 ^ 0x7FFFFFFF) < a4) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v11 = a4 + a3;
  if (!is_mul_ok(a5, v11)) {
    return v9;
  }
  size_t v12 = v11 * a5;
  if (!(v11 * a5)) {
    return 0;
  }
  if (a1 && (uint64_t v13 = *(uint64_t (**)(void))(a1 + 992)) != 0)
  {
    uint64_t v9 = (char *)v13();
    if (!v9) {
      return v9;
    }
  }
  else
  {
    uint64_t v9 = (char *)malloc(v12);
    if (!v9) {
      return v9;
    }
  }
  if (a3)
  {
    size_t v14 = a3 * a5;
    memcpy(v9, a2, v14);
  }
  else
  {
    size_t v14 = 0;
  }
  bzero(&v9[v14], a4 * a5);
  return v9;
}

void *sub_1003A49AC(void *result, size_t __size)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    if (!__size) {
      goto LABEL_5;
    }
    uint64_t v3 = (uint64_t (*)(void *))result[124];
    if (v3)
    {
      uint64_t result = (void *)v3(result);
      if (result) {
        return result;
      }
      goto LABEL_5;
    }
    uint64_t result = malloc(__size);
    if (!result)
    {
LABEL_5:
      sub_1003A3704(v2, (uint64_t)"Out of memory");
      return 0;
    }
  }
  return result;
}

void *sub_1003A4A10(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result[123] = a2;
    result[124] = a3;
    result[125] = a4;
  }
  return result;
}

void *sub_1003A4A24(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v4 = sub_10039F16C(a1, a2, a3, a4, 0, 0, 0);
  unsigned int v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 73) = 0x8000;
    *((_DWORD *)v4 + 280) = 0x2000;
    *((_DWORD *)v4 + 74) |= 0x300000u;
    sub_1003A5C7C(v4, 0, 0);
  }
  return v5;
}

void sub_1003A4A88(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return;
  }
  sub_1003A9FCC(a1, a2);
  uint64_t v4 = sub_1003AA094(a1);
  for (signed int i = *(_DWORD *)(a1 + 528); i != 1229209940; signed int i = *(_DWORD *)(a1 + 528))
  {
    int v8 = *(_DWORD *)(a1 + 292);
    if ((v8 & 4) != 0) {
      *(_DWORD *)(a1 + 292) = v8 | 0x2008;
    }
    if (i == 1229278788)
    {
      sub_1003AA878(a1, a2, v4);
    }
    else if (i == 1229472850)
    {
      sub_1003AA41C(a1, a2, v4);
    }
    else
    {
      int v9 = sub_10039F8D0(a1, i);
      if (v9)
      {
        sub_1003ADC88(a1, a2, v4, v9);
        if (i == 1347179589) {
          *(_DWORD *)(a1 + 292) |= 2u;
        }
        goto LABEL_15;
      }
      if (i <= 1883455819)
      {
        if (i <= 1732332864)
        {
          if (i > 1665684044)
          {
            if (i == 1665684045)
            {
              sub_1003AACA4(a1, a2, v4);
            }
            else
            {
              if (i != 1700284774)
              {
LABEL_69:
                sub_1003ADC88(a1, a2, v4, 0);
                goto LABEL_15;
              }
              sub_1003AC274(a1, a2, v4);
            }
          }
          else if (i == 1347179589)
          {
            sub_1003AA594(a1, a2, v4);
          }
          else
          {
            if (i != 1649100612) {
              goto LABEL_69;
            }
            sub_1003AC050(a1, a2, v4);
          }
        }
        else if (i <= 1766015823)
        {
          if (i == 1732332865)
          {
            sub_1003AA8FC(a1, a2, v4);
          }
          else
          {
            if (i != 1749635924) {
              goto LABEL_69;
            }
            sub_1003AC498(a1, a2, v4);
          }
        }
        else
        {
          switch(i)
          {
            case 1766015824:
              sub_1003AB068(a1, a2, v4);
              break;
            case 1767135348:
              sub_1003AD93C(a1, a2, v4);
              break;
            case 1866876531:
              sub_1003AC834(a1, a2, v4);
              break;
            default:
              goto LABEL_69;
          }
        }
      }
      else if (i > 1934772033)
      {
        if (i <= 1950960964)
        {
          if (i == 1934772034)
          {
            sub_1003AAF00(a1, a2, v4);
          }
          else
          {
            if (i != 1950701684) {
              goto LABEL_69;
            }
            sub_1003AD27C(a1, a2, v4);
          }
        }
        else
        {
          switch(i)
          {
            case 1950960965:
              sub_1003AD134(a1, a2, v4);
              break;
            case 1951551059:
              sub_1003ABD34(a1, a2, v4);
              break;
            case 2052348020:
              sub_1003AD4A0(a1, a2, v4);
              break;
            default:
              goto LABEL_69;
          }
        }
      }
      else if (i <= 1933723987)
      {
        if (i == 1883455820)
        {
          sub_1003ACAA4(a1, a2, v4);
        }
        else
        {
          if (i != 1883789683) {
            goto LABEL_69;
          }
          sub_1003AC66C(a1, a2, v4);
        }
      }
      else
      {
        switch(i)
        {
          case 1933723988:
            sub_1003AAA28(a1, a2, v4);
            break;
          case 1933787468:
            sub_1003ACE64(a1, a2, v4);
            break;
          case 1934642260:
            sub_1003AB9CC(a1, a2, v4);
            break;
          default:
            goto LABEL_69;
        }
      }
    }
LABEL_15:
    uint64_t v4 = sub_1003AA094(a1);
  }
  int v6 = *(_DWORD *)(a1 + 292);
  if ((v6 & 1) == 0) {
    sub_1003A3E44(a1, "Missing IHDR before IDAT");
  }
  if ((v6 & 2) == 0 && *(unsigned char *)(a1 + 607) == 3) {
    sub_1003A3E44(a1, "Missing PLTE before IDAT");
  }
  if ((v6 & 8) != 0)
  {
    sub_1003A4124(a1, "Too many IDATs found");
    int v6 = *(_DWORD *)(a1 + 292);
  }
  *(_DWORD *)(a1 + 292) = v6 | 4;
  int v7 = sub_10039F8D0(a1, 0x49444154u);
  if (v7)
  {
    sub_1003ADC88(a1, a2, v4, v7);
    LODWORD(v4) = 0;
  }
  *(_DWORD *)(a1 + 576) = v4;
}

uint64_t sub_1003A4F60(uint64_t result, unsigned int *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((*(unsigned char *)(result + 296) & 0x40) != 0)
    {
      return sub_1003A3EB4(result, "png_read_update_info/png_start_read_image: duplicate call");
    }
    else
    {
      sub_1003AF2A8(result);
      return sub_1003A6C74(v2, a2);
    }
  }
  return result;
}

void sub_1003A4FE4(uint64_t a1, char *a2, char *__dst)
{
  if (a1)
  {
    if ((*(unsigned char *)(a1 + 296) & 0x40) == 0) {
      sub_1003AF2A8(a1);
    }
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    LODWORD(v36) = *(_DWORD *)(a1 + 520);
    unint64_t v6 = *(unsigned __int8 *)(a1 + 610);
    unint64_t v7 = (v6 * v36 + 7) >> 3;
    if (v6 >= 8) {
      unint64_t v7 = (v6 >> 3) * (unint64_t)v36;
    }
    unsigned __int16 v8 = *(_WORD *)(a1 + 607);
    unint64_t v37 = v7;
    uint64_t v38 = v8;
    BYTE2(v38) = *(unsigned char *)(a1 + 611);
    BYTE3(v38) = v6;
    if (!*(unsigned char *)(a1 + 604) || (*(unsigned char *)(a1 + 300) & 2) == 0)
    {
LABEL_8:
      if ((*(unsigned char *)(a1 + 292) & 4) == 0) {
        sub_1003A34AC(a1, "Invalid attempt to read row data");
      }
      **(unsigned char **)(a1 + 544) = -1;
      size_t v9 = v37 + 1;
      sub_1003AEAB4(a1, *(void *)(a1 + 544), v37 + 1);
      int v10 = *(unsigned char **)(a1 + 544);
      unsigned int v11 = *v10;
      if (*v10)
      {
        if (v11 > 4) {
          sub_1003A34AC(a1, "bad adaptive filter value");
        }
        sub_1003AE9C0(a1, (uint64_t)&v36, (uint64_t)(v10 + 1), *(void *)(a1 + 536) + 1, v11);
        int v10 = *(unsigned char **)(a1 + 544);
        size_t v9 = v37 + 1;
      }
      memcpy(*(void **)(a1 + 536), v10, v9);
      if ((*(unsigned char *)(a1 + 976) & 4) != 0 && *(unsigned char *)(a1 + 980) == 64 && (v38 & 2) != 0)
      {
        uint64_t v18 = *(void *)(a1 + 544);
        int v19 = v36;
        if (BYTE1(v38) == 16)
        {
          if (v38 == 2)
          {
            uint64_t v22 = 6;
          }
          else
          {
            if (v38 != 6) {
              goto LABEL_58;
            }
            uint64_t v22 = 8;
          }
          if (v36)
          {
            double v25 = (unsigned __int16 *)(v18 + 3);
            do
            {
              unsigned int v26 = __rev16(*v25);
              unsigned int v27 = v26 + (bswap32(*(v25 - 1)) >> 16);
              unsigned int v28 = v26 + (bswap32(v25[1]) >> 16);
              *((unsigned char *)v25 - 2) = BYTE1(v27);
              *((unsigned char *)v25 - 1) = v27;
              *((unsigned char *)v25 + 2) = BYTE1(v28);
              *((unsigned char *)v25 + 3) = v28;
              double v25 = (unsigned __int16 *)((char *)v25 + v22);
              --v19;
            }
            while (v19);
          }
        }
        else
        {
          if (BYTE1(v38) != 8) {
            goto LABEL_58;
          }
          if (v38 == 2)
          {
            uint64_t v20 = 3;
          }
          else
          {
            if (v38 != 6) {
              goto LABEL_58;
            }
            uint64_t v20 = 4;
          }
          if (v36)
          {
            double v23 = (unsigned char *)(v18 + 3);
            do
            {
              char v24 = *(v23 - 1);
              *(v23 - 2) += v24;
              *v23 += v24;
              v23 += v20;
              --v19;
            }
            while (v19);
          }
        }
      }
LABEL_58:
      if (*(_DWORD *)(a1 + 300)) {
        sub_1003A6EBC(a1, (unsigned int *)&v36, v12, v13, v14, v15, v16, v17);
      }
      unsigned int v29 = BYTE3(v38);
      if (*(unsigned char *)(a1 + 615))
      {
        if (*(unsigned __int8 *)(a1 + 615) != BYTE3(v38)) {
          sub_1003A34AC(a1, "internal sequential row size calculation error");
        }
      }
      else
      {
        *(unsigned char *)(a1 + 615) = BYTE3(v38);
        if (v29 > *(unsigned __int8 *)(a1 + 614)) {
          sub_1003A34AC(a1, "sequential row overflow");
        }
      }
      if (*(unsigned char *)(a1 + 604) && (int v30 = *(_DWORD *)(a1 + 300), (v30 & 2) != 0))
      {
        unsigned int v34 = *(unsigned __int8 *)(a1 + 605);
        if (v34 <= 5) {
          sub_1003AE5F8((uint64_t)&v36, *(void *)(a1 + 544) + 1, v34, v30);
        }
        if (__dst) {
          sub_1003ADF58(a1, __dst, 1);
        }
        if (!a2) {
          goto LABEL_77;
        }
        uint64_t v31 = a1;
        float64x2_t v32 = a2;
        int v33 = 0;
      }
      else
      {
        if (a2) {
          sub_1003ADF58(a1, a2, -1);
        }
        if (!__dst) {
          goto LABEL_77;
        }
        uint64_t v31 = a1;
        float64x2_t v32 = __dst;
        int v33 = -1;
      }
      sub_1003ADF58(v31, v32, v33);
LABEL_77:
      sub_1003AEE5C(a1);
      float64x2_t v35 = *(void (**)(uint64_t, void, void))(a1 + 760);
      if (v35) {
        v35(a1, *(unsigned int *)(a1 + 524), *(unsigned __int8 *)(a1 + 605));
      }
      return;
    }
    int v21 = *(_DWORD *)(a1 + 524);
    switch(*(unsigned char *)(a1 + 605))
    {
      case 0:
        if ((v21 & 7) == 0) {
          goto LABEL_8;
        }
        goto LABEL_41;
      case 1:
        if ((v21 & 7) == 0 && *(_DWORD *)(a1 + 496) > 4u) {
          goto LABEL_8;
        }
        goto LABEL_41;
      case 2:
        if ((*(_DWORD *)(a1 + 524) & 7) == 4) {
          goto LABEL_8;
        }
        if (!__dst || (v21 & 4) == 0) {
          break;
        }
        goto LABEL_42;
      case 3:
        if ((v21 & 3) == 0 && *(_DWORD *)(a1 + 496) > 2u) {
          goto LABEL_8;
        }
        goto LABEL_41;
      case 4:
        if ((*(_DWORD *)(a1 + 524) & 3) == 2) {
          goto LABEL_8;
        }
        if (!__dst || (v21 & 2) == 0) {
          break;
        }
        goto LABEL_42;
      case 5:
        if ((v21 & 1) == 0 && *(_DWORD *)(a1 + 496) > 1u) {
          goto LABEL_8;
        }
LABEL_41:
        if (__dst) {
LABEL_42:
        }
          sub_1003ADF58(a1, __dst, 1);
        break;
      default:
        if (v21) {
          goto LABEL_8;
        }
        break;
    }
    sub_1003AEE5C(a1);
  }
}

void sub_1003A5404(uint64_t a1, char **a2)
{
  if (!a1) {
    return;
  }
  if ((*(unsigned char *)(a1 + 296) & 0x40) == 0)
  {
    int v4 = sub_1003B1384(a1);
    if ((*(unsigned char *)(a1 + 296) & 0x40) != 0)
    {
      sub_1003A3EB4(a1, "png_start_read_image/png_read_update_info: duplicate call");
      if (v4 < 1) {
        return;
      }
    }
    else
    {
      sub_1003AF2A8(a1);
      if (v4 < 1) {
        return;
      }
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 604) && (*(unsigned char *)(a1 + 300) & 2) == 0)
  {
    sub_1003A3704(a1, (uint64_t)"Interlace handling should be turned on when using png_read_image");
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 500);
  }
  int v4 = sub_1003B1384(a1);
  if (v4 >= 1)
  {
LABEL_12:
    int v5 = *(_DWORD *)(a1 + 500);
    if (v5)
    {
      for (int i = 0; i != v4; ++i)
      {
        int v7 = v5;
        unsigned __int16 v8 = a2;
        do
        {
          size_t v9 = *v8++;
          sub_1003A4FE4(a1, v9, 0);
          --v7;
        }
        while (v7);
      }
    }
  }
}

void sub_1003A5508(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (sub_10039F8D0(a1, 0x49444154u))
    {
      if (*(unsigned char *)(a1 + 607) != 3) {
        goto LABEL_8;
      }
    }
    else
    {
      sub_1003AEDC0(a1);
      if (*(unsigned char *)(a1 + 607) != 3) {
        goto LABEL_8;
      }
    }
    if (*(_DWORD *)(a1 + 596) > (int)*(unsigned __int16 *)(a1 + 592)) {
      sub_1003A3C8C(a1, "Read palette index exceeding num_palette");
    }
LABEL_8:
    if (a2)
    {
      while (1)
      {
        uint64_t v4 = sub_1003AA094(a1);
        signed int v5 = *(_DWORD *)(a1 + 528);
        if (v5 == 1229209940) {
          break;
        }
        *(_DWORD *)(a1 + 292) |= 0x2000u;
        if (v5 != 1229472850)
        {
          if (v5 == 1229278788)
          {
            sub_1003AA878(a1, a2, v4);
            goto LABEL_11;
          }
          int v12 = sub_10039F8D0(a1, v5);
          if (v12)
          {
            sub_1003ADC88(a1, a2, v4, v12);
            if (v5 == 1347179589) {
              *(_DWORD *)(a1 + 292) |= 2u;
            }
            goto LABEL_11;
          }
LABEL_26:
          if (v5 > 1883455819)
          {
            if (v5 > 1934772033)
            {
              if (v5 <= 1950960964)
              {
                if (v5 == 1934772034)
                {
                  sub_1003AAF00(a1, a2, v4);
                  goto LABEL_11;
                }
                if (v5 == 1950701684)
                {
                  sub_1003AD27C(a1, a2, v4);
                  goto LABEL_11;
                }
              }
              else
              {
                switch(v5)
                {
                  case 1950960965:
                    sub_1003AD134(a1, a2, v4);
                    goto LABEL_11;
                  case 1951551059:
                    sub_1003ABD34(a1, a2, v4);
                    goto LABEL_11;
                  case 2052348020:
                    sub_1003AD4A0(a1, a2, v4);
                    goto LABEL_11;
                }
              }
            }
            else if (v5 <= 1933723987)
            {
              if (v5 == 1883455820)
              {
                sub_1003ACAA4(a1, a2, v4);
                goto LABEL_11;
              }
              if (v5 == 1883789683)
              {
                sub_1003AC66C(a1, a2, v4);
                goto LABEL_11;
              }
            }
            else
            {
              switch(v5)
              {
                case 1933723988:
                  sub_1003AAA28(a1, a2, v4);
                  goto LABEL_11;
                case 1933787468:
                  sub_1003ACE64(a1, a2, v4);
                  goto LABEL_11;
                case 1934642260:
                  sub_1003AB9CC(a1, a2, v4);
                  goto LABEL_11;
              }
            }
          }
          else if (v5 > 1732332864)
          {
            if (v5 <= 1766015823)
            {
              if (v5 == 1732332865)
              {
                sub_1003AA8FC(a1, a2, v4);
                goto LABEL_11;
              }
              if (v5 == 1749635924)
              {
                sub_1003AC498(a1, a2, v4);
                goto LABEL_11;
              }
            }
            else
            {
              switch(v5)
              {
                case 1766015824:
                  sub_1003AB068(a1, a2, v4);
                  goto LABEL_11;
                case 1767135348:
                  sub_1003AD93C(a1, a2, v4);
                  goto LABEL_11;
                case 1866876531:
                  sub_1003AC834(a1, a2, v4);
                  goto LABEL_11;
              }
            }
          }
          else if (v5 <= 1649100611)
          {
            if (v5 == 1229209940)
            {
              if (v4 && (*(unsigned char *)(a1 + 296) & 8) == 0 || (*(unsigned char *)(a1 + 293) & 0x20) != 0) {
                sub_1003A3C8C(a1, "..Too many IDATs found");
              }
              sub_1003AA28C(a1, v4);
              goto LABEL_11;
            }
            if (v5 == 1347179589)
            {
              sub_1003AA594(a1, a2, v4);
              goto LABEL_11;
            }
          }
          else
          {
            switch(v5)
            {
              case 1649100612:
                sub_1003AC050(a1, a2, v4);
                goto LABEL_11;
              case 1665684045:
                sub_1003AACA4(a1, a2, v4);
                goto LABEL_11;
              case 1700284774:
                sub_1003AC274(a1, a2, v4);
                goto LABEL_11;
            }
          }
          uint64_t v8 = a1;
          uint64_t v9 = a2;
          size_t v10 = v4;
          int v11 = 0;
LABEL_19:
          sub_1003ADC88(v8, v9, v10, v11);
          goto LABEL_11;
        }
        sub_1003AA41C(a1, a2, v4);
LABEL_11:
        if ((*(unsigned char *)(a1 + 292) & 0x10) != 0) {
          return;
        }
      }
      int v6 = sub_10039F8D0(a1, *(_DWORD *)(a1 + 528));
      if (!v6) {
        goto LABEL_26;
      }
      int v7 = v6;
      if (v4 && (*(unsigned char *)(a1 + 296) & 8) == 0 || (*(unsigned char *)(a1 + 293) & 0x20) != 0) {
        sub_1003A3C8C(a1, ".Too many IDATs found");
      }
      uint64_t v8 = a1;
      uint64_t v9 = a2;
      size_t v10 = v4;
      int v11 = v7;
      goto LABEL_19;
    }
    do
    {
      unsigned int v13 = sub_1003AA094(a1);
      int v14 = *(_DWORD *)(a1 + 528);
      if (v14 == 1229209940) {
        goto LABEL_79;
      }
      *(_DWORD *)(a1 + 292) |= 0x2000u;
      if (v14 == 1229278788)
      {
        sub_1003AA878(a1, 0, v13);
        continue;
      }
      if (v14 != 1229472850) {
LABEL_79:
      }
        sub_1003AA28C(a1, v13);
      else {
        sub_1003AA41C(a1, 0, v13);
      }
    }
    while ((*(unsigned char *)(a1 + 292) & 0x10) == 0);
  }
}

void sub_1003A5AA8(uint64_t *a1, void **a2, void **a3)
{
  if (a1)
  {
    uint64_t v4 = *a1;
    if (*a1)
    {
      sub_10039F374(*a1, a3);
      sub_10039F374(v4, a2);
      *a1 = 0;
      sub_1003A1C9C(v4);
      sub_1003A46CC(v4, *(void **)(v4 + 1008));
      *(void *)(v4 + 1008) = 0;
      sub_1003A46CC(v4, *(void **)(v4 + 1128));
      *(void *)(v4 + 1128) = 0;
      sub_1003A46CC(v4, *(void **)(v4 + 1104));
      *(void *)(v4 + 1104) = 0;
      sub_1003A46CC(v4, *(void **)(v4 + 880));
      *(void *)(v4 + 880) = 0;
      sub_1003A46CC(v4, *(void **)(v4 + 888));
      *(void *)(v4 + 888) = 0;
      int v6 = *(_DWORD *)(v4 + 932);
      if ((v6 & 0x1000) != 0)
      {
        sub_10039EEB4(v4, *(void **)(v4 + 584));
        *(void *)(v4 + 584) = 0;
        int v6 = *(_DWORD *)(v4 + 932);
      }
      unsigned int v7 = v6 & 0xFFFFEFFF;
      *(_DWORD *)(v4 + 932) = v6 & 0xFFFFEFFF;
      if ((v6 & 0x2000) != 0)
      {
        sub_1003A46CC(v4, *(void **)(v4 + 736));
        *(void *)(v4 + 736) = 0;
        unsigned int v7 = *(_DWORD *)(v4 + 932);
      }
      *(_DWORD *)(v4 + 932) = v7 & 0xFFFFDFFF;
      inflateEnd((z_streamp)(v4 + 312));
      sub_1003A46CC(v4, *(void **)(v4 + 808));
      *(void *)(v4 + 808) = 0;
      sub_1003A46CC(v4, *(void **)(v4 + 1072));
      *(void *)(v4 + 1072) = 0;
      sub_1003A46CC(v4, *(void **)(v4 + 960));
      *(void *)(v4 + 960) = 0;
      sub_1003A4630((void *)v4);
    }
  }
}

uint64_t sub_1003A5BF4(uint64_t a1)
{
  double v1 = *(uint64_t (**)(void))(a1 + 248);
  if (!v1) {
    sub_1003A34AC(a1, "Call to NULL read function");
  }

  return v1();
}

size_t sub_1003A5C2C(size_t result, void *__ptr, size_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = fread(__ptr, 1uLL, a3, *(FILE **)(result + 256));
    if (result != a3) {
      sub_1003A34AC(v4, "Read Error");
    }
  }
  return result;
}

void *sub_1003A5C7C(void *result, uint64_t a2, size_t (*a3)(size_t result, void *__ptr, size_t a3))
{
  if (result)
  {
    uint64_t v3 = result;
    if (a3) {
      uint64_t v4 = a3;
    }
    else {
      uint64_t v4 = sub_1003A5C2C;
    }
    result[31] = v4;
    result[32] = a2;
    if (result[30])
    {
      result[30] = 0;
      uint64_t result = (void *)sub_1003A3704((uint64_t)result, (uint64_t)"Can't set both read_data_fn and write_data_fn in the same structure");
    }
    v3[81] = 0;
  }
  return result;
}

uint64_t sub_1003A5CDC(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_1003A3EB4(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x400u;
    }
  }
  return result;
}

uint64_t sub_1003A5D0C(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_1003A3EB4(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x40000u;
    }
  }
  return result;
}

uint64_t sub_1003A5D3C(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_1003A3EB4(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x2001000u;
    }
  }
  return result;
}

uint64_t sub_1003A5D74(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_1003A3EB4(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x1000u;
    }
  }
  return result;
}

uint64_t sub_1003A5DA4(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return sub_1003A3EB4(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x5000u;
    }
  }
  return result;
}

uint64_t sub_1003A5DD8(uint64_t result, int a2, int a3, int a4)
{
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 296);
  if ((v5 & 0x40) != 0)
  {
    int v6 = "invalid after png_start_read_image or png_read_update_info";
    return sub_1003A3EB4(result, v6);
  }
  if ((*(unsigned char *)(result + 292) & 1) == 0)
  {
    int v6 = "invalid before the PNG header has been read";
    return sub_1003A3EB4(result, v6);
  }
  *(_DWORD *)(result + 296) = v5 | 0x4000;
  if (a2 == 3)
  {
    int v7 = *(_DWORD *)(result + 300) | 0x200000;
    *(_DWORD *)(result + 300) = v7;
    if (*(unsigned char *)(result + 607) != 3) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (a2 != 2)
  {
    if (a2 != 1) {
      sub_1003A34AC(result, "invalid error action to rgb_to_gray");
    }
    int v7 = *(_DWORD *)(result + 300) | 0x600000;
    *(_DWORD *)(result + 300) = v7;
    if (*(unsigned char *)(result + 607) != 3) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  int v7 = *(_DWORD *)(result + 300) | 0x400000;
  *(_DWORD *)(result + 300) = v7;
  if (*(unsigned char *)(result + 607) == 3) {
LABEL_18:
  }
    *(_DWORD *)(result + 300) = v7 | 0x1000;
LABEL_19:
  if ((a4 | a3) < 0 || a4 + a3 >= 100001)
  {
    if (((a4 | a3) & 0x80000000) == 0) {
      uint64_t result = sub_1003A3E84(result, "ignoring out of range rgb_to_gray coefficients");
    }
    if (!*(_WORD *)(v4 + 970) && !*(_WORD *)(v4 + 972)) {
      *(_DWORD *)(v4 + 970) = 1535777592;
    }
  }
  else
  {
    *(_WORD *)(result + 970) = (a3 << 15) / 0x186A0u;
    *(_WORD *)(result + 972) = (a4 << 15) / 0x186A0u;
    *(unsigned char *)(result + 969) = 1;
  }
  return result;
}

uint64_t sub_1003A5F64(uint64_t a1, int a2, double a3, double a4)
{
  int v7 = sub_1003A1A70(a1, (uint64_t)"rgb to gray red coefficient", a3);
  int v8 = sub_1003A1A70(a1, (uint64_t)"rgb to gray green coefficient", a4);

  return sub_1003A5DD8(a1, a2, v7, v8);
}

void sub_1003A5FE0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 1168);
  int v3 = *(_DWORD *)(a1 + 668);
  if (!v2)
  {
    if (v3)
    {
      *(_DWORD *)(a1 + 1168) = sub_1003A1AC0(*(_DWORD *)(a1 + 668));
    }
    else
    {
      *(_DWORD *)(a1 + 1168) = 100000;
      *(_DWORD *)(a1 + 668) = 100000;
    }
    goto LABEL_13;
  }
  if (!v3)
  {
    *(_DWORD *)(a1 + 668) = sub_1003A1AC0(*(_DWORD *)(a1 + 1168));
LABEL_13:
    *(_WORD *)(a1 + 1242) |= 1u;
    goto LABEL_14;
  }
  int v116 = 0;
  if (sub_1003A1488(&v116, v2, v3, 100000))
  {
    BOOL v4 = sub_1003A1B04(v116);
    *(_WORD *)(a1 + 1242) |= 1u;
    if (!v4)
    {
LABEL_14:
      unsigned int v5 = *(_DWORD *)(a1 + 300) & 0xFFFFDFFF;
      *(_DWORD *)(a1 + 300) = v5;
      if ((v5 & 0x40080) != 0x40000) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else
  {
    *(_WORD *)(a1 + 1242) |= 1u;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 300) | 0x2000;
  *(_DWORD *)(a1 + 300) = v5;
  if ((v5 & 0x40080) == 0x40000)
  {
LABEL_15:
    *(_DWORD *)(a1 + 300) = v5 & 0xFD7FFEFF;
    *(_DWORD *)(a1 + 296) &= ~0x2000u;
    *(_WORD *)(a1 + 600) = 0;
  }
LABEL_16:
  BOOL v6 = sub_1003A1B04(*(_DWORD *)(a1 + 668));
  unsigned int v7 = *(_DWORD *)(a1 + 300);
  if (v6)
  {
    if ((v7 & 0x600000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v7 &= ~0x800000u;
  *(_DWORD *)(a1 + 300) = v7;
  *(_DWORD *)(a1 + 296) &= ~0x2000u;
  if ((v7 & 0x600000) != 0)
  {
LABEL_18:
    sub_1003A1248(a1);
    unsigned int v7 = *(_DWORD *)(a1 + 300);
  }
LABEL_19:
  if ((v7 & 0x100) != 0)
  {
    if ((*(unsigned char *)(a1 + 607) & 2) == 0) {
      *(_DWORD *)(a1 + 292) |= 0x800u;
    }
  }
  else if ((~v7 & 0x4080) == 0)
  {
    int v8 = *(unsigned __int16 *)(a1 + 630);
    if (v8 == *(unsigned __int16 *)(a1 + 632) && v8 == *(unsigned __int16 *)(a1 + 634))
    {
      *(_DWORD *)(a1 + 292) |= 0x800u;
      *(_WORD *)(a1 + 636) = v8;
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 607);
  if (v9 != 3)
  {
    if ((v9 & 4) != 0)
    {
      unsigned int v17 = v7;
    }
    else
    {
      int v16 = *(unsigned __int16 *)(a1 + 600);
      unsigned int v17 = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 296) &= ~0x2000u;
      if (!v16)
      {
        unsigned int v17 = v7 & 0xFF7FFE7F;
        *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFE7F;
      }
    }
    if ((v9 & 2) != 0 || (v17 & 0x1100) != 0x1100) {
      goto LABEL_74;
    }
    __int16 v18 = *(_WORD *)(a1 + 636);
    __int16 v19 = *(_WORD *)(a1 + 752);
    int v20 = *(unsigned __int8 *)(a1 + 608);
    switch(v20)
    {
      case 4:
        v18 *= 17;
        v19 *= 17;
        break;
      case 2:
        __int16 v25 = 85 * v18;
        v19 *= 85;
        *(_WORD *)(a1 + 634) = v25;
        *(_WORD *)(a1 + 632) = v25;
        *(_WORD *)(a1 + 630) = v25;
        if ((v17 & 0x2000000) != 0) {
          goto LABEL_74;
        }
        goto LABEL_59;
      case 1:
        __int16 v21 = 255 * v18;
        v19 *= 255;
        *(_WORD *)(a1 + 634) = v21;
        *(_WORD *)(a1 + 632) = v21;
        *(_WORD *)(a1 + 630) = v21;
        if ((v17 & 0x2000000) != 0) {
          goto LABEL_74;
        }
        goto LABEL_59;
    }
    *(_WORD *)(a1 + 634) = v18;
    *(_WORD *)(a1 + 632) = v18;
    *(_WORD *)(a1 + 630) = v18;
    if ((v17 & 0x2000000) != 0) {
      goto LABEL_74;
    }
LABEL_59:
    *(_WORD *)(a1 + 750) = v19;
    *(_WORD *)(a1 + 748) = v19;
    *(_WORD *)(a1 + 746) = v19;
    goto LABEL_74;
  }
  uint64_t v10 = *(unsigned __int16 *)(a1 + 600);
  if (*(_WORD *)(a1 + 600))
  {
    int v11 = 0;
    int v12 = *(unsigned __int8 **)(a1 + 736);
    uint64_t v13 = *(unsigned __int16 *)(a1 + 600);
    while (1)
    {
      int v15 = *v12++;
      int v14 = v15;
      if (v15 != 255)
      {
        if (v14)
        {
          unsigned int v17 = v7;
          if ((~v7 & 0x1100) == 0) {
            goto LABEL_51;
          }
          goto LABEL_74;
        }
        int v11 = 1;
      }
      if (!--v13)
      {
        unsigned int v17 = v7 & 0xFF7FFFFF;
        *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFFFF;
        *(_DWORD *)(a1 + 296) &= ~0x2000u;
        if (v11) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
    }
  }
  *(_DWORD *)(a1 + 296) &= ~0x2000u;
LABEL_49:
  unsigned int v17 = v7 & 0xFF7FFE7F;
  *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFE7F;
LABEL_50:
  if ((~v17 & 0x1100) == 0)
  {
LABEL_51:
    uint64_t v22 = (unsigned __int8 *)(*(void *)(a1 + 584) + 3 * *(unsigned __int8 *)(a1 + 628));
    *(_WORD *)(a1 + 630) = *v22;
    *(_WORD *)(a1 + 632) = v22[1];
    *(_WORD *)(a1 + 634) = v22[2];
    if (!v10 || (v17 & 0x2080000) != 0x80000) {
      goto LABEL_74;
    }
    double v23 = *(int8x16_t **)(a1 + 736);
    if (v10 < 8)
    {
      uint64_t v24 = 0;
LABEL_71:
      uint64_t v32 = v10 - v24;
      int v33 = &v23->i8[v24];
      do
      {
        *int v33 = ~*v33;
        ++v33;
        --v32;
      }
      while (v32);
LABEL_73:
      unsigned int v17 = *(_DWORD *)(a1 + 300);
      goto LABEL_74;
    }
    if (v10 >= 0x20)
    {
      uint64_t v24 = (unsigned __int16)v10 & 0xFFE0;
      unsigned int v26 = v23 + 1;
      uint64_t v27 = v24;
      do
      {
        int8x16_t v28 = vmvnq_s8(*v26);
        v26[-1] = vmvnq_s8(v26[-1]);
        *unsigned int v26 = v28;
        v26 += 2;
        v27 -= 32;
      }
      while (v27);
      if (v24 == v10) {
        goto LABEL_73;
      }
      if ((v10 & 0x18) == 0) {
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v29 = v24;
    uint64_t v24 = (unsigned __int16)v10 & 0xFFF8;
    int v30 = (int8x8_t *)&v23->i8[v29];
    uint64_t v31 = v29 - v24;
    do
    {
      *int v30 = vmvn_s8(*v30);
      ++v30;
      v31 += 8;
    }
    while (v31);
    if (v24 == v10) {
      goto LABEL_73;
    }
    goto LABEL_71;
  }
LABEL_74:
  if ((v17 & 0x380) == 0x280 && *(unsigned char *)(a1 + 608) != 16) {
    *(int16x4_t *)(a1 + 630) = vaddhn_s32((int32x4_t)vmull_u16(*(uint16x4_t *)(a1 + 630), (uint16x4_t)0xFF00FF00FF00FFLL), vdupq_n_s32(0x807Fu));
  }
  if ((v17 & 0x4000400) != 0 && (v17 & 0x180) == 0x80 && *(unsigned char *)(a1 + 608) == 16) {
    *(int16x4_t *)(a1 + 630) = vmul_s16(*(int16x4_t *)(a1 + 630), (int16x4_t)0x101010101010101);
  }
  *(_WORD *)(a1 + 646) = *(_WORD *)(a1 + 636);
  *(void *)(a1 + 638) = *(void *)(a1 + 628);
  if ((v17 & 0x2000) == 0)
  {
    if ((v17 & 0x600000) != 0)
    {
      if (sub_1003A1B04(*(_DWORD *)(a1 + 1168)) || sub_1003A1B04(*(_DWORD *)(a1 + 668))) {
        goto LABEL_101;
      }
      unsigned int v17 = *(_DWORD *)(a1 + 300);
    }
    if ((v17 & 0x80) == 0
      || !sub_1003A1B04(*(_DWORD *)(a1 + 1168))
      && !sub_1003A1B04(*(_DWORD *)(a1 + 668))
      && (*(unsigned char *)(a1 + 620) != 3 || !sub_1003A1B04(*(_DWORD *)(a1 + 624))))
    {
      unsigned int v34 = *(_DWORD *)(a1 + 300);
      if ((v34 & 0x800000) == 0)
      {
LABEL_90:
        if ((v34 & 0x80) != 0 && *(unsigned char *)(a1 + 607) == 3)
        {
          uint64_t v35 = *(unsigned __int16 *)(a1 + 600);
          if (*(_WORD *)(a1 + 600))
          {
            uint64_t v36 = 0;
            __int16 v37 = *(unsigned __int8 *)(a1 + 630);
            __int16 v38 = *(unsigned __int8 *)(a1 + 632);
            __int16 v39 = *(unsigned __int8 *)(a1 + 634);
            uint64_t v40 = (unsigned char *)(*(void *)(a1 + 584) + 2);
            do
            {
              uint64_t v43 = *(void *)(a1 + 736);
              int v44 = *(unsigned __int8 *)(v43 + v36);
              if (v44 != 255)
              {
                if (*(unsigned char *)(v43 + v36))
                {
                  __int16 v41 = *(v40 - 2) * (_WORD)v44 + v37 * (v44 ^ 0xFF) + 128;
                  *(v40 - 2) = (unsigned __int16)(v41 + ((unsigned __int16)(v41 & 0xFF00) >> 8)) >> 8;
                  *(v40 - 1) = (unsigned __int16)(*(unsigned __int8 *)(v43 + v36) * *(v40 - 1)
                                                + v38 * (*(unsigned __int8 *)(v43 + v36) ^ 0xFF)
                                                + 128
                                                + ((unsigned __int16)((*(unsigned __int8 *)(v43 + v36)
                                                                     * *(v40 - 1)
                                                                     + v38 * (*(unsigned __int8 *)(v43 + v36) ^ 0xFF)
                                                                     + 128) & 0xFF00) >> 8)) >> 8;
                  __int16 v42 = *(unsigned __int8 *)(v43 + v36) * *v40
                      + v39 * (*(unsigned __int8 *)(v43 + v36) ^ 0xFF)
                      + 128;
                  unsigned char *v40 = (unsigned __int16)(v42 + ((unsigned __int16)(v42 & 0xFF00) >> 8)) >> 8;
                }
                else
                {
                  *(v40 - 2) = v37;
                  *(v40 - 1) = v38;
                  unsigned char *v40 = v39;
                }
              }
              ++v36;
              v40 += 3;
            }
            while (v35 != v36);
            unsigned int v34 = *(_DWORD *)(a1 + 300);
          }
          v34 &= ~0x80u;
          *(_DWORD *)(a1 + 300) = v34;
          if ((v34 & 0x1008) != 8) {
            return;
          }
          goto LABEL_157;
        }
LABEL_138:
        if ((v34 & 0x1008) != 8) {
          return;
        }
        goto LABEL_157;
      }
      if (!sub_1003A1B04(*(_DWORD *)(a1 + 668)))
      {
        unsigned int v34 = *(_DWORD *)(a1 + 300);
        goto LABEL_90;
      }
    }
  }
LABEL_101:
  sub_1003A1E10(a1, *(unsigned __int8 *)(a1 + 608));
  unsigned int v34 = *(_DWORD *)(a1 + 300);
  if ((v34 & 0x80) != 0)
  {
    if ((v34 & 0x600000) != 0) {
      sub_1003A3704(a1, (uint64_t)"libpng does not support gamma+background+rgb_to_gray");
    }
    if (*(unsigned char *)(a1 + 607) == 3)
    {
      unsigned int v48 = 100000;
      uint64_t v49 = *(void *)(a1 + 584);
      uint64_t v50 = *(unsigned __int16 *)(a1 + 592);
      int v51 = *(unsigned __int8 *)(a1 + 620);
      if (v51 == 1)
      {
        int v52 = *(_DWORD *)(a1 + 668);
      }
      else
      {
        if (v51 == 3)
        {
          int v52 = sub_1003A1AC0(*(_DWORD *)(a1 + 624));
          unsigned int v48 = sub_1003A1B1C(*(_DWORD *)(a1 + 624), *(_DWORD *)(a1 + 668));
          BOOL v74 = sub_1003A1B04(v48);
          uint64_t v55 = *(unsigned __int16 *)(a1 + 630);
          if (v74)
          {
LABEL_142:
            LOBYTE(v55) = sub_1003A1B78(v55, v48);
            char v57 = sub_1003A1B78(*(unsigned __int16 *)(a1 + 632), v48);
            char v59 = sub_1003A1B78(*(unsigned __int16 *)(a1 + 634), v48);
            BOOL v73 = sub_1003A1B04(v52);
            uint64_t v61 = *(unsigned __int16 *)(a1 + 630);
            if (v73) {
              goto LABEL_143;
            }
            goto LABEL_147;
          }
LABEL_146:
          char v57 = *(unsigned char *)(a1 + 632);
          char v59 = *(unsigned char *)(a1 + 634);
          BOOL v75 = sub_1003A1B04(v52);
          uint64_t v61 = *(unsigned __int16 *)(a1 + 630);
          if (v75)
          {
LABEL_143:
            LOBYTE(v61) = sub_1003A1B78(v61, v52);
            unsigned __int8 v62 = sub_1003A1B78(*(unsigned __int16 *)(a1 + 632), v52);
            unsigned __int8 v63 = sub_1003A1B78(*(unsigned __int16 *)(a1 + 634), v52);
            if (!v50) {
              goto LABEL_156;
            }
            goto LABEL_148;
          }
LABEL_147:
          unsigned __int8 v62 = *(unsigned char *)(a1 + 632);
          unsigned __int8 v63 = *(unsigned char *)(a1 + 634);
          if (!v50) {
            goto LABEL_156;
          }
LABEL_148:
          unint64_t v76 = 0;
          int32x4_t v77 = (unsigned char *)(v49 + 2);
          do
          {
            while (1)
            {
              while (1)
              {
                if (v76 < *(unsigned __int16 *)(a1 + 600))
                {
                  uint64_t v79 = *(void *)(a1 + 736);
                  int v80 = *(unsigned __int8 *)(v79 + v76);
                  if (v80 != 255) {
                    break;
                  }
                }
                uint64_t v78 = *(void *)(a1 + 672);
                *(v77 - 2) = *(unsigned char *)(v78 + *(v77 - 2));
                *(v77 - 1) = *(unsigned char *)(v78 + *(v77 - 1));
                unsigned char *v77 = *(unsigned char *)(v78 + *v77);
                v77 += 3;
                if (v50 == ++v76) {
                  goto LABEL_156;
                }
              }
              if (*(unsigned char *)(v79 + v76)) {
                break;
              }
              *(v77 - 2) = v55;
              *(v77 - 1) = v57;
              unsigned char *v77 = v59;
              v77 += 3;
              if (v50 == ++v76) {
                goto LABEL_156;
              }
            }
            uint64_t v81 = *(void *)(a1 + 696);
            __int16 v82 = *(unsigned __int8 *)(v81 + *(v77 - 2)) * (_WORD)v80
                + (v80 ^ 0xFF) * v61
                + 128;
            uint64_t v83 = *(void *)(a1 + 688);
            *(v77 - 2) = *(unsigned char *)(v83 + ((unsigned __int16)(v82 + HIBYTE(v82)) >> 8));
            __int16 v84 = *(unsigned __int8 *)(v79 + v76) * *(unsigned __int8 *)(v81 + *(v77 - 1))
                + (*(unsigned __int8 *)(v79 + v76) ^ 0xFF) * v62
                + 128;
            *(v77 - 1) = *(unsigned char *)(v83 + ((unsigned __int16)(v84 + HIBYTE(v84)) >> 8));
            __int16 v85 = *(unsigned __int8 *)(v79 + v76) * *(unsigned __int8 *)(v81 + *v77)
                + (*(unsigned __int8 *)(v79 + v76) ^ 0xFF) * v63
                + 128;
            unsigned char *v77 = *(unsigned char *)(v83 + ((unsigned __int16)(v85 + HIBYTE(v85)) >> 8));
            v77 += 3;
            ++v76;
          }
          while (v50 != v76);
LABEL_156:
          unsigned int v34 = *(_DWORD *)(a1 + 300) & 0xFFFFDF7F;
          *(_DWORD *)(a1 + 300) = v34;
          if ((v34 & 0x1008) != 8) {
            return;
          }
          goto LABEL_157;
        }
        int v52 = 100000;
        if (v51 == 2)
        {
          uint64_t v53 = *(void *)(a1 + 672);
          uint64_t v54 = *(unsigned __int16 *)(a1 + 630);
          LOBYTE(v55) = *(unsigned char *)(v53 + v54);
          uint64_t v56 = *(unsigned __int16 *)(a1 + 632);
          char v57 = *(unsigned char *)(v53 + v56);
          uint64_t v58 = *(unsigned __int16 *)(a1 + 634);
          char v59 = *(unsigned char *)(v53 + v58);
          uint64_t v60 = *(void *)(a1 + 696);
          LOBYTE(v61) = *(unsigned char *)(v60 + v54);
          unsigned __int8 v62 = *(unsigned char *)(v60 + v56);
          unsigned __int8 v63 = *(unsigned char *)(v60 + v58);
          if (!*(_WORD *)(a1 + 592)) {
            goto LABEL_156;
          }
          goto LABEL_148;
        }
      }
      BOOL v72 = sub_1003A1B04(100000);
      uint64_t v55 = *(unsigned __int16 *)(a1 + 630);
      if (v72) {
        goto LABEL_142;
      }
      goto LABEL_146;
    }
    int v64 = *(unsigned __int8 *)(a1 + 620);
    switch(v64)
    {
      case 3:
        int v66 = sub_1003A1AC0(*(_DWORD *)(a1 + 624));
        int v67 = *(_DWORD *)(a1 + 624);
        break;
      case 2:
        int v66 = sub_1003A1AC0(*(_DWORD *)(a1 + 1168));
        int v67 = *(_DWORD *)(a1 + 1168);
        break;
      case 1:
        unsigned int v65 = 100000;
        int v66 = *(_DWORD *)(a1 + 668);
        goto LABEL_125;
      default:
        sub_1003A34AC(a1, "invalid background gamma type");
    }
    unsigned int v65 = sub_1003A1B1C(v67, *(_DWORD *)(a1 + 668));
LABEL_125:
    BOOL v68 = sub_1003A1B04(v66);
    BOOL v69 = sub_1003A1B04(v65);
    if (v68) {
      *(_WORD *)(a1 + 646) = sub_1003A1BDC(a1, *(unsigned __int16 *)(a1 + 636), v66);
    }
    if (v69) {
      *(_WORD *)(a1 + 636) = sub_1003A1BDC(a1, *(unsigned __int16 *)(a1 + 636), v65);
    }
    int v70 = *(unsigned __int16 *)(a1 + 630);
    if (v70 == *(unsigned __int16 *)(a1 + 632)
      && v70 == *(unsigned __int16 *)(a1 + 634)
      && v70 == *(unsigned __int16 *)(a1 + 636))
    {
      __int16 v71 = *(_WORD *)(a1 + 646);
      *(_WORD *)(a1 + 644) = v71;
      *(_WORD *)(a1 + 642) = v71;
      *(_WORD *)(a1 + 640) = v71;
      *(_WORD *)(a1 + 634) = v70;
      *(_WORD *)(a1 + 632) = v70;
      *(_WORD *)(a1 + 630) = v70;
    }
    else
    {
      if (v68)
      {
        *(_WORD *)(a1 + 640) = sub_1003A1BDC(a1, v70, v66);
        *(_WORD *)(a1 + 642) = sub_1003A1BDC(a1, *(unsigned __int16 *)(a1 + 632), v66);
        *(_WORD *)(a1 + 644) = sub_1003A1BDC(a1, *(unsigned __int16 *)(a1 + 634), v66);
      }
      if (v69)
      {
        *(_WORD *)(a1 + 630) = sub_1003A1BDC(a1, *(unsigned __int16 *)(a1 + 630), v65);
        *(_WORD *)(a1 + 632) = sub_1003A1BDC(a1, *(unsigned __int16 *)(a1 + 632), v65);
        *(_WORD *)(a1 + 634) = sub_1003A1BDC(a1, *(unsigned __int16 *)(a1 + 634), v65);
      }
    }
    *(unsigned char *)(a1 + 620) = 1;
    unsigned int v34 = *(_DWORD *)(a1 + 300);
    goto LABEL_138;
  }
  if (*(unsigned char *)(a1 + 607) != 3 || (v34 & 0x1000) != 0 && (v34 & 0x600000) != 0) {
    goto LABEL_138;
  }
  uint64_t v45 = *(unsigned __int16 *)(a1 + 592);
  if (*(_WORD *)(a1 + 592))
  {
    uint64_t v46 = *(void *)(a1 + 672);
    int32x4_t v47 = (unsigned char *)(*(void *)(a1 + 584) + 2);
    do
    {
      *(v47 - 2) = *(unsigned char *)(v46 + *(v47 - 2));
      *(v47 - 1) = *(unsigned char *)(v46 + *(v47 - 1));
      *int32x4_t v47 = *(unsigned char *)(v46 + *v47);
      v47 += 3;
      --v45;
    }
    while (v45);
  }
  v34 &= ~0x2000u;
  *(_DWORD *)(a1 + 300) = v34;
  if ((v34 & 0x1008) != 8) {
    return;
  }
LABEL_157:
  if (*(unsigned char *)(a1 + 607) != 3) {
    return;
  }
  uint64_t v86 = *(unsigned __int16 *)(a1 + 592);
  int v87 = *(unsigned __int8 *)(a1 + 720);
  *(_DWORD *)(a1 + 300) = v34 & 0xFFFFFFF7;
  if ((v87 - 1) <= 6 && v86)
  {
    char v88 = 8 - v87;
    uint64_t v89 = *(void *)(a1 + 584);
    if (v86 >= 2)
    {
      uint64_t v90 = (unsigned __int16)v86 & 0xFFFE;
      uint64_t v91 = v90;
      int32x4_t v92 = *(unsigned __int8 **)(a1 + 584);
      do
      {
        int v93 = v92[3] >> v88;
        *v92 >>= v88;
        v92[3] = v93;
        v92 += 6;
        v91 -= 2;
      }
      while (v91);
      if (v90 == v86) {
        goto LABEL_167;
      }
    }
    else
    {
      uint64_t v90 = 0;
    }
    int32x4_t v94 = (unsigned char *)(v89 + 3 * v90);
    uint64_t v95 = v86 - v90;
    do
    {
      *int32x4_t v94 = *v94 >> v88;
      v94 += 3;
      --v95;
    }
    while (v95);
  }
LABEL_167:
  int v96 = *(unsigned __int8 *)(a1 + 721);
  if ((v96 - 1) <= 6 && v86 != 0)
  {
    char v98 = 8 - v96;
    uint64_t v99 = *(void *)(a1 + 584);
    if (v86 >= 2)
    {
      uint64_t v100 = (unsigned __int16)v86 & 0xFFFE;
      int32x4_t v101 = (unsigned char *)(v99 + 4);
      uint64_t v102 = v100;
      do
      {
        int v103 = *v101 >> v98;
        *(v101 - 3) = *(v101 - 3) >> v98;
        *int32x4_t v101 = v103;
        v101 += 6;
        v102 -= 2;
      }
      while (v102);
      if (v100 == v86) {
        goto LABEL_178;
      }
    }
    else
    {
      uint64_t v100 = 0;
    }
    int32x4_t v104 = (unsigned char *)(3 * v100 + v99 + 1);
    uint64_t v105 = v86 - v100;
    do
    {
      *int32x4_t v104 = *v104 >> v98;
      v104 += 3;
      --v105;
    }
    while (v105);
  }
LABEL_178:
  int v106 = *(unsigned __int8 *)(a1 + 722);
  if ((v106 - 1) <= 6 && v86 != 0)
  {
    char v108 = 8 - v106;
    uint64_t v109 = *(void *)(a1 + 584);
    if (v86 >= 2)
    {
      uint64_t v110 = (unsigned __int16)v86 & 0xFFFE;
      long double v111 = (unsigned char *)(v109 + 5);
      uint64_t v112 = v110;
      do
      {
        int v113 = *v111 >> v108;
        *(v111 - 3) = *(v111 - 3) >> v108;
        unsigned char *v111 = v113;
        v111 += 6;
        v112 -= 2;
      }
      while (v112);
      if (v110 == v86) {
        return;
      }
    }
    else
    {
      uint64_t v110 = 0;
    }
    int32x4_t v114 = (unsigned char *)(3 * v110 + v109 + 2);
    uint64_t v115 = v86 - v110;
    do
    {
      unsigned char *v114 = *v114 >> v108;
      v114 += 3;
      --v115;
    }
    while (v115);
  }
}

uint64_t sub_1003A6C74(uint64_t result, unsigned int *a2)
{
  int v2 = *(_DWORD *)(result + 300);
  if ((v2 & 0x1000) == 0) {
    goto LABEL_7;
  }
  int v3 = *((unsigned __int8 *)a2 + 37);
  if (v3 == 3)
  {
    if (*(_WORD *)(result + 600)) {
      char v4 = 6;
    }
    else {
      char v4 = 2;
    }
    *((unsigned char *)a2 + 37) = v4;
    *((unsigned char *)a2 + 36) = 8;
    *((_WORD *)a2 + 17) = 0;
    if (!*(void *)(result + 584)) {
      sub_1003A34AC(result, "Palette is NULL in indexed image");
    }
LABEL_7:
    if ((v2 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if ((v2 & 0x2000000) != 0 && *(_WORD *)(result + 600)) {
    *((unsigned char *)a2 + 37) = v3 | 4;
  }
  if (*((unsigned __int8 *)a2 + 36) <= 7u) {
    *((unsigned char *)a2 + 36) = 8;
  }
  *((_WORD *)a2 + 17) = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_8:
    *((_WORD *)a2 + 105) = *(_WORD *)(result + 636);
    *(void *)((char *)a2 + 202) = *(void *)(result + 628);
  }
LABEL_9:
  a2[13] = *(_DWORD *)(result + 1168);
  unsigned int v5 = *((unsigned __int8 *)a2 + 36);
  if ((v2 & 0x4000400) == 0 || v5 != 16)
  {
    if ((v2 & 0x4000) == 0) {
      goto LABEL_14;
    }
LABEL_38:
    *((unsigned char *)a2 + 37) |= 2u;
    if ((v2 & 0x600000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  unsigned int v5 = 8;
  *((unsigned char *)a2 + 36) = 8;
  if ((v2 & 0x4000) != 0) {
    goto LABEL_38;
  }
LABEL_14:
  if ((v2 & 0x600000) != 0) {
LABEL_15:
  }
    *((unsigned char *)a2 + 37) &= ~2u;
LABEL_16:
  if ((v2 & 0x40) != 0 && (*((unsigned __int8 *)a2 + 37) | 4) == 6 && *(void *)(result + 880) && v5 == 8)
  {
    *((unsigned char *)a2 + 37) = 3;
    if ((v2 & 0x200) == 0)
    {
      unsigned int v5 = 8;
      if ((v2 & 4) == 0) {
        goto LABEL_30;
      }
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x200) == 0 || v5 != 8)
  {
LABEL_27:
    if ((v2 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  if (*((unsigned char *)a2 + 37) == 3)
  {
    unsigned int v5 = 8;
    goto LABEL_27;
  }
  unsigned int v5 = 16;
  *((unsigned char *)a2 + 36) = 16;
  if ((v2 & 4) == 0) {
    goto LABEL_30;
  }
LABEL_28:
  if (v5 <= 7)
  {
    LOBYTE(v5) = 8;
    *((unsigned char *)a2 + 36) = 8;
  }
LABEL_30:
  int v7 = *((unsigned __int8 *)a2 + 37);
  if (v7 == 3 || (v7 & 2) == 0)
  {
    char v8 = 1;
    *((unsigned char *)a2 + 41) = 1;
    if ((v2 & 0x40000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  char v8 = 3;
  *((unsigned char *)a2 + 41) = 3;
  if ((v2 & 0x40000) != 0)
  {
LABEL_33:
    v7 &= ~4u;
    *((unsigned char *)a2 + 37) = v7;
    *((_WORD *)a2 + 17) = 0;
  }
LABEL_34:
  if ((v7 & 4) != 0)
  {
    *((unsigned char *)a2 + 41) = ++v8;
    if ((v2 & 0x8000) == 0) {
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_44;
  }
  if ((v7 | 2) == 2)
  {
    *((unsigned char *)a2 + 41) = ++v8;
    if ((v2 & 0x1000000) != 0) {
      *((unsigned char *)a2 + 37) = v7 | 4;
    }
  }
LABEL_44:
  if ((v2 & 0x100000) != 0)
  {
    char v9 = *(unsigned char *)(result + 288);
    if (v9)
    {
      *((unsigned char *)a2 + 36) = v9;
      LOBYTE(v5) = v9;
    }
    char v10 = *(unsigned char *)(result + 289);
    if (v10)
    {
      *((unsigned char *)a2 + 41) = v10;
      char v8 = v10;
    }
  }
  unsigned __int8 v11 = v5 * v8;
  *((unsigned char *)a2 + 42) = v5 * v8;
  BOOL v12 = (v5 * v8) >= 8u;
  unint64_t v13 = (*a2 * (unint64_t)(v5 * v8) + 7) >> 3;
  unint64_t v14 = *a2 * (unint64_t)(v11 >> 3);
  if (!v12) {
    unint64_t v14 = v13;
  }
  *((void *)a2 + 2) = v14;
  *(void *)(result + 568) = v14;
  return result;
}

uint64_t sub_1003A6EBC(uint64_t result, unsigned int *a2, int32x4_t a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 544);
  if (!v9) {
    sub_1003A34AC(result, "NULL row buffer");
  }
  if ((*(_DWORD *)(result + 296) & 0x4040) == 0x4000) {
    sub_1003A34AC(result, "Uninitialized row");
  }
  int v11 = *(_DWORD *)(result + 300);
  if ((v11 & 0x1000) == 0) {
    goto LABEL_28;
  }
  if (*((unsigned char *)a2 + 16) != 3)
  {
    if ((v11 & 0x2000000) != 0 && *(_WORD *)(result + 600))
    {
      double v23 = (unsigned __int16 *)(result + 744);
      uint64_t v24 = a2;
    }
    else
    {
      uint64_t v24 = a2;
      double v23 = 0;
    }
    uint64_t result = (uint64_t)sub_1003A99D8(v24, v9 + 1, v23);
    goto LABEL_28;
  }
  uint64_t v12 = v9 + 1;
  uint64_t v13 = *(void *)(result + 584);
  uint64_t v14 = *(void *)(result + 736);
  unsigned int v15 = *(unsigned __int16 *)(result + 600);
  uint64_t v16 = *a2;
  unsigned int v17 = *((unsigned __int8 *)a2 + 17);
  if (v17 <= 7)
  {
    if (v17 == 1)
    {
      if (v16)
      {
        int v35 = -(int)v16 & 7;
        uint64_t v36 = (unsigned __int8 *)(v12 + ((v16 - 1) >> 3));
        __int16 v37 = (unsigned char *)(v9 + v16);
        unsigned int v38 = *a2;
        do
        {
          *v37-- = (*v36 >> v35) & 1;
          uint64_t result = v35 == 7;
          if (v35 == 7) {
            int v35 = 0;
          }
          else {
            ++v35;
          }
          v36 -= result;
          --v38;
        }
        while (v38);
LABEL_44:
        uint64_t v18 = v16;
LABEL_45:
        *((unsigned char *)a2 + 17) = 8;
        *((unsigned char *)a2 + 19) = 8;
        *((void *)a2 + 1) = v18;
        if (!v15) {
          goto LABEL_46;
        }
        goto LABEL_20;
      }
    }
    else if (v17 == 2)
    {
      if (v16)
      {
        int v39 = ~(2 * v16 + 6) & 6;
        uint64_t v40 = (unsigned __int8 *)(v12 + ((v16 - 1) >> 2));
        __int16 v41 = (unsigned char *)(v9 + v16);
        unsigned int v42 = *a2;
        do
        {
          *v41-- = (*v40 >> v39) & 3;
          BOOL v60 = v39 == 6;
          uint64_t result = v39 == 6;
          v39 += 2;
          if (v60) {
            int v39 = 0;
          }
          v40 -= result;
          --v42;
        }
        while (v42);
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v18 = *a2;
      if (v17 != 4) {
        goto LABEL_45;
      }
      if (v16)
      {
        int v19 = 4 * (*a2 & 1);
        int v20 = (unsigned __int8 *)(v12 + ((v16 - 1) >> 1));
        __int16 v21 = (unsigned char *)(v9 + v16);
        unsigned int v22 = *a2;
        do
        {
          *v21-- = (*v20 >> v19) & 0xF;
          BOOL v60 = v19 == 4;
          uint64_t result = v19 == 4;
          v19 += 4;
          if (v60) {
            int v19 = 0;
          }
          v20 -= result;
          --v22;
        }
        while (v22);
        goto LABEL_44;
      }
    }
    *((unsigned char *)a2 + 17) = 8;
    *((unsigned char *)a2 + 19) = 8;
    *((void *)a2 + 1) = 0;
    if (!v15) {
      goto LABEL_46;
    }
    goto LABEL_20;
  }
  if (v17 != 8)
  {
LABEL_28:
    int v31 = *(_DWORD *)(v8 + 300);
    if ((v31 & 0x40080) != 0x40000) {
      goto LABEL_51;
    }
    goto LABEL_29;
  }
  if (!*(_WORD *)(result + 600))
  {
LABEL_46:
    uint64_t v32 = (3 * v16);
    if (v16)
    {
      uint64_t v43 = (unsigned char *)(v9 + v32);
      int v44 = (unsigned __int8 *)(v9 + v16);
      do
      {
        unsigned char *v43 = *(unsigned char *)(v13 + 3 * *v44 + 2);
        *(v43 - 1) = *(unsigned char *)(v13 + 3 * *v44 + 1);
        unsigned int v45 = *v44--;
        *(v43 - 2) = *(unsigned char *)(v13 + 3 * v45);
        v43 -= 3;
        LODWORD(v16) = v16 - 1;
      }
      while (v16);
    }
    *((unsigned char *)a2 + 17) = 8;
    *((unsigned char *)a2 + 19) = 24;
    char v33 = 3;
    char v34 = 2;
    goto LABEL_50;
  }
LABEL_20:
  if (v16)
  {
    __int16 v25 = (char *)(v9 + 4 * v16);
    unsigned int v26 = (unsigned __int8 *)(v9 + v16);
    int v27 = v16;
    do
    {
      uint64_t v30 = *v26;
      if (v15 > v30) {
        char v28 = *(unsigned char *)(v14 + v30);
      }
      else {
        char v28 = -1;
      }
      char *v25 = v28;
      *(v25 - 1) = *(unsigned char *)(v13 + 3 * *v26 + 2);
      *(v25 - 2) = *(unsigned char *)(v13 + 3 * *v26 + 1);
      unsigned int v29 = *v26--;
      *(v25 - 3) = *(unsigned char *)(v13 + 3 * v29);
      v25 -= 4;
      --v27;
    }
    while (v27);
  }
  *((unsigned char *)a2 + 17) = 8;
  *((unsigned char *)a2 + 19) = 32;
  uint64_t v32 = (4 * v16);
  char v33 = 4;
  char v34 = 6;
LABEL_50:
  *((void *)a2 + 1) = v32;
  *((unsigned char *)a2 + 16) = v34;
  *((unsigned char *)a2 + 18) = v33;
  int v31 = *(_DWORD *)(v8 + 300);
  if ((v31 & 0x40080) != 0x40000) {
    goto LABEL_51;
  }
LABEL_29:
  if ((*((unsigned __int8 *)a2 + 16) | 2) == 6)
  {
    uint64_t result = sub_1003B169C((uint64_t)a2, (unsigned char *)(*(void *)(v8 + 544) + 1), 0);
    int v31 = *(_DWORD *)(v8 + 300);
  }
LABEL_51:
  if ((v31 & 0x600000) != 0)
  {
    char v46 = *((unsigned char *)a2 + 16);
    if ((v46 & 3) == 2)
    {
      int32x4_t v47 = (unsigned __int8 *)(*(void *)(v8 + 544) + 1);
      int v48 = *(unsigned __int16 *)(v8 + 970);
      int v49 = *(unsigned __int16 *)(v8 + 972);
      int v50 = 0x8000 - (v48 + v49);
      unsigned int v51 = *a2;
      unsigned int v52 = *a2;
      if (*((unsigned char *)a2 + 17) == 8)
      {
        uint64_t v53 = *(void *)(v8 + 688);
        if (v53 && (uint64_t v54 = *(void *)(v8 + 696)) != 0)
        {
          int v55 = 0;
          if (v52)
          {
            uint64_t result = *(void *)(v8 + 544) + 1;
            while (1)
            {
              char v57 = (unsigned char *)*v47;
              uint64_t v58 = v47[1];
              uint64_t v59 = v47[2];
              BOOL v60 = v57 == v58 && v57 == v59;
              if (!v60) {
                break;
              }
              uint64_t v61 = *(void *)(v8 + 672);
              if (v61)
              {
                v57 += v61;
                goto LABEL_66;
              }
LABEL_67:
              *(unsigned char *)uint64_t result = (_BYTE)v57;
              if ((v46 & 4) != 0)
              {
                unsigned __int8 v56 = v47[3];
                v47 += 4;
                *(unsigned char *)(result + 1) = v56;
                result += 2;
                if (!--v52) {
                  goto LABEL_104;
                }
              }
              else
              {
                v47 += 3;
                ++result;
                if (!--v52) {
                  goto LABEL_104;
                }
              }
            }
            char v57 = (unsigned char *)(v53
                          + ((*(unsigned __int8 *)(v54 + v58) * v49
                            + v57[v54] * v48
                            + v50 * *(unsigned __int8 *)(v54 + v59)
                            + 0x4000) >> 15));
            int v55 = 1;
LABEL_66:
            LOBYTE(v57) = *v57;
            goto LABEL_67;
          }
        }
        else
        {
          int v55 = 0;
          if (v52)
          {
            if ((a2[4] & 4) != 0)
            {
              unint64_t v215 = (unsigned __int8 *)(*(void *)(v8 + 544) + 1);
              do
              {
                int v216 = *v215;
                int v217 = v215[1];
                uint64_t result = v215[2];
                if (v216 != v217 || v216 != result)
                {
                  LOBYTE(v216) = (v216 * v48 + v217 * v49 + v50 * result) >> 15;
                  int v55 = 1;
                }
                *int32x4_t v47 = v216;
                v47[1] = v215[3];
                v47 += 2;
                v215 += 4;
                --v52;
              }
              while (v52);
            }
            else
            {
              unint64_t v76 = (unsigned __int8 *)(*(void *)(v8 + 544) + 1);
              do
              {
                int v77 = *v76;
                int v78 = v76[1];
                uint64_t result = v76[2];
                if (v77 != v78 || v77 != result)
                {
                  LOBYTE(v77) = (v77 * v48 + v78 * v49 + v50 * result) >> 15;
                  int v55 = 1;
                }
                *v47++ = v77;
                v76 += 3;
                --v52;
              }
              while (v52);
            }
          }
        }
      }
      else
      {
        uint64_t v62 = *(void *)(v8 + 712);
        if (v62 && (uint64_t v63 = *(void *)(v8 + 704)) != 0)
        {
          int v55 = 0;
          if (v52)
          {
            uint64_t result = *(void *)(v8 + 544) + 1;
            do
            {
              while (1)
              {
                int v65 = *(unsigned __int8 *)result;
                int v66 = *(unsigned __int8 *)(result + 1);
                unsigned int v67 = v66 | (v65 << 8);
                uint64_t v68 = *(unsigned __int8 *)(result + 2);
                unsigned int v69 = *(unsigned __int8 *)(result + 3);
                unsigned int v70 = __rev16(*(unsigned __int16 *)(result + 4));
                if ((v69 | (v68 << 8)) == v67 && v67 == v70)
                {
                  uint64_t v75 = *(void *)(v8 + 680);
                  if (v75)
                  {
                    LOBYTE(v66) = *(_WORD *)(*(void *)(v75 + 8 * (v69 >> *(_DWORD *)(v8 + 664))) + 2 * v68);
                    int v65 = HIBYTE(*(unsigned __int16 *)(*(void *)(v75 + 8 * (v69 >> *(_DWORD *)(v8 + 664))) + 2 * v68));
                  }
                }
                else
                {
                  char v72 = *(_DWORD *)(v8 + 664);
                  unsigned int v73 = *(unsigned __int16 *)(*(void *)(v62 + 8 * (v69 >> v72)) + 2 * v68) * v49
                      + *(unsigned __int16 *)(*(void *)(v62 + 8 * (v67 >> v72)) + 2 * (v67 >> 8))
                      * v48
                      + v50
                      * *(unsigned __int16 *)(*(void *)(v62 + 8 * (v70 >> v72)) + 2 * (v70 >> 8))
                      + 0x4000;
                  unsigned int v74 = *(unsigned __int16 *)(*(void *)(v63 + 8 * ((v73 >> 15) >> v72))
                                            + 2 * (v73 >> 23));
                  LOBYTE(v66) = v74;
                  int v65 = v74 >> 8;
                  int v55 = 1;
                }
                *int32x4_t v47 = v65;
                v47[1] = v66;
                if ((v46 & 4) == 0) {
                  break;
                }
                v47[2] = *(unsigned char *)(result + 6);
                unsigned __int8 v64 = *(unsigned char *)(result + 7);
                result += 8;
                _OWORD v47[3] = v64;
                v47 += 4;
                if (!--v52) {
                  goto LABEL_104;
                }
              }
              result += 6;
              v47 += 2;
              --v52;
            }
            while (v52);
          }
        }
        else
        {
          int v55 = 0;
          if (v52)
          {
            int v80 = (unsigned __int16 *)(*(void *)(v8 + 544) + 1);
            do
            {
              while (1)
              {
                unsigned int v82 = __rev16(*v80);
                unsigned int v83 = __rev16(v80[1]);
                unsigned int v84 = __rev16(v80[2]);
                if (v82 != v84 || v82 != v83) {
                  int v55 = 1;
                }
                unsigned int v86 = v83 * v49 + v82 * v48 + v84 * v50 + 0x4000;
                uint64_t result = v86 >> 15;
                *int32x4_t v47 = v86 >> 23;
                v47[1] = result;
                if ((v46 & 4) == 0) {
                  break;
                }
                v47[2] = *((unsigned char *)v80 + 6);
                unsigned __int8 v81 = *((unsigned char *)v80 + 7);
                v80 += 4;
                _OWORD v47[3] = v81;
                v47 += 4;
                if (!--v52) {
                  goto LABEL_104;
                }
              }
              v80 += 3;
              v47 += 2;
              --v52;
            }
            while (v52);
          }
        }
      }
LABEL_104:
      char v87 = *((unsigned char *)a2 + 18) - 2;
      *((unsigned char *)a2 + 18) = v87;
      *((unsigned char *)a2 + 16) &= ~2u;
      unsigned __int8 v88 = *((unsigned char *)a2 + 17) * v87;
      *((unsigned char *)a2 + 19) = v88;
      unint64_t v89 = (v88 * (unint64_t)v51 + 7) >> 3;
      unint64_t v90 = v51 * (unint64_t)(v88 >> 3);
      if (v88 < 8u) {
        unint64_t v90 = v89;
      }
      *((void *)a2 + 1) = v90;
      int v31 = *(_DWORD *)(v8 + 300);
      if (v55)
      {
        *(unsigned char *)(v8 + 968) = 1;
        if ((v31 & 0x600000) == 0x400000)
        {
          uint64_t result = sub_1003A3704(v8, (uint64_t)"png_do_rgb_to_gray found nongray pixel");
          int v31 = *(_DWORD *)(v8 + 300);
        }
        if ((v31 & 0x600000) == 0x200000) {
          sub_1003A34AC(v8, "png_do_rgb_to_gray found nongray pixel");
        }
      }
    }
  }
  if ((v31 & 0x4000) != 0 && (*(unsigned char *)(v8 + 293) & 8) == 0)
  {
    uint64_t result = (uint64_t)sub_1003A9E0C(a2, *(void *)(v8 + 544) + 1);
    int v31 = *(_DWORD *)(v8 + 300);
  }
  if ((v31 & 0x80) != 0)
  {
    int v106 = *(unsigned __int8 **)(v8 + 544);
    long double v107 = v106 + 1;
    uint64_t v108 = *(void *)(v8 + 672);
    uint64_t result = *(void *)(v8 + 688);
    uint64_t v109 = *(void *)(v8 + 696);
    uint64_t v110 = *(void *)(v8 + 680);
    uint64_t v111 = *(void *)(v8 + 704);
    uint64_t v112 = *(void *)(v8 + 712);
    int v113 = *(_DWORD *)(v8 + 664);
    int v114 = *(_DWORD *)(v8 + 296);
    unsigned int v115 = *a2;
    switch(*((unsigned char *)a2 + 16))
    {
      case 0:
        switch(*((unsigned char *)a2 + 17))
        {
          case 1:
            if (v115)
            {
              int v116 = *(unsigned __int16 *)(v8 + 752);
              int v117 = 7;
              do
              {
                unsigned int v119 = *v107;
                if (((v119 >> v117) & 1) == v116) {
                  *long double v107 = (*(unsigned __int16 *)(v8 + 636) << v117) | (0x7F7Fu >> (7 - v117)) & v119;
                }
                BOOL v118 = v117 == 0;
                if (v117) {
                  --v117;
                }
                else {
                  int v117 = 7;
                }
                if (v118) {
                  ++v107;
                }
                --v115;
              }
              while (v115);
            }
            break;
          case 2:
            if (v108)
            {
              if (v115)
              {
                int v295 = *(unsigned __int16 *)(v8 + 752);
                int v296 = 6;
                do
                {
                  unsigned int v297 = *v107;
                  unsigned int v300 = (v297 >> v296) & 3;
                  if (v300 == v295)
                  {
                    v297 &= 0x3F3Fu >> (6 - v296);
                    LOBYTE(v298) = *(unsigned __int16 *)(v8 + 636) << v296;
                  }
                  else
                  {
                    uint64_t result = 0x3F3Fu >> (6 - v296);
                    LOBYTE(v297) = result & v297;
                    int v298 = *(unsigned __int8 *)(v108 + 85 * v300) >> 6 << v296;
                  }
                  *long double v107 = v298 | v297;
                  BOOL v299 = v296 == 0;
                  if (v296) {
                    v296 -= 2;
                  }
                  else {
                    int v296 = 6;
                  }
                  if (v299) {
                    ++v107;
                  }
                  --v115;
                }
                while (v115);
              }
            }
            else if (v115)
            {
              int v322 = *(unsigned __int16 *)(v8 + 752);
              int v323 = 6;
              do
              {
                unsigned int v325 = *v107;
                if (((v325 >> v323) & 3) == v322) {
                  *long double v107 = (*(unsigned __int16 *)(v8 + 636) << v323) | (0x3F3Fu >> (6 - v323)) & v325;
                }
                BOOL v324 = v323 == 0;
                if (v323) {
                  v323 -= 2;
                }
                else {
                  int v323 = 6;
                }
                if (v324) {
                  ++v107;
                }
                --v115;
              }
              while (v115);
            }
            break;
          case 4:
            if (v108)
            {
              if (v115)
              {
                int v301 = *(unsigned __int16 *)(v8 + 752);
                int v302 = 4;
                do
                {
                  unsigned int v305 = *v107;
                  uint64_t v306 = (v305 >> v302) & 0xF;
                  unsigned int v307 = (0xF0Fu >> (4 - v302)) & v305;
                  if (v306 == v301) {
                    LOBYTE(v303) = *(unsigned __int16 *)(v8 + 636) << v302;
                  }
                  else {
                    int v303 = *(unsigned __int8 *)(v108 + (v306 | (16 * v306))) >> 4 << v302;
                  }
                  *long double v107 = v303 | v307;
                  BOOL v304 = v302 == 0;
                  if (v302) {
                    v302 -= 4;
                  }
                  else {
                    int v302 = 4;
                  }
                  if (v304) {
                    ++v107;
                  }
                  --v115;
                }
                while (v115);
              }
            }
            else if (v115)
            {
              int v326 = *(unsigned __int16 *)(v8 + 752);
              int v327 = 4;
              do
              {
                unsigned int v329 = *v107;
                if (((v329 >> v327) & 0xF) == v326) {
                  *long double v107 = (*(unsigned __int16 *)(v8 + 636) << v327) | (0xF0Fu >> (4 - v327)) & v329;
                }
                BOOL v328 = v327 == 0;
                if (v327) {
                  v327 -= 4;
                }
                else {
                  int v327 = 4;
                }
                if (v328) {
                  ++v107;
                }
                --v115;
              }
              while (v115);
            }
            break;
          case 8:
            if (v108)
            {
              if (v115)
              {
                int v308 = *(unsigned __int16 *)(v8 + 752);
                do
                {
                  while (1)
                  {
                    uint64_t v309 = *v107;
                    if (v308 == v309) {
                      break;
                    }
                    *v107++ = *(unsigned char *)(v108 + v309);
                    if (!--v115) {
                      goto LABEL_114;
                    }
                  }
                  *v107++ = *(unsigned char *)(v8 + 636);
                  --v115;
                }
                while (v115);
              }
            }
            else if (v115)
            {
              int v330 = *(unsigned __int16 *)(v8 + 752);
              do
              {
                if (v330 == *v107) {
                  *long double v107 = *(unsigned char *)(v8 + 636);
                }
                ++v107;
                --v115;
              }
              while (v115);
            }
            break;
          case 0x10:
            if (v110)
            {
              if (v115)
              {
                int v310 = *(unsigned __int16 *)(v8 + 752);
                do
                {
                  uint64_t v311 = *v107;
                  unsigned int v312 = v107[1];
                  float v313 = (unsigned __int16 *)(v8 + 636);
                  if ((v312 | (v311 << 8)) != v310) {
                    float v313 = (unsigned __int16 *)(*(void *)(v110 + 8 * (v312 >> v113)) + 2 * v311);
                  }
                  *(_WORD *)long double v107 = bswap32(*v313) >> 16;
                  v107 += 2;
                  --v115;
                }
                while (v115);
              }
            }
            else if (v115)
            {
              int v331 = *(unsigned __int16 *)(v8 + 752);
              int8x16_t v332 = v106 + 2;
              do
              {
                if (v331 == bswap32(*(unsigned __int16 *)(v332 - 1)) >> 16) {
                  *(_WORD *)(v332 - 1) = bswap32(*(unsigned __int16 *)(v8 + 636)) >> 16;
                }
                v332 += 2;
                --v115;
              }
              while (v115);
            }
            break;
          default:
            goto LABEL_114;
        }
        break;
      case 2:
        if (*((unsigned char *)a2 + 17) == 8)
        {
          if (v108)
          {
            if (v115)
            {
              unsigned int v128 = *(unsigned __int16 *)(v8 + 746);
              uint64_t v129 = v106 + 3;
              do
              {
                while (1)
                {
                  uint64_t v130 = *(v129 - 2);
                  uint64_t v131 = *(v129 - 1);
                  if (__PAIR64__(*(unsigned __int16 *)(v8 + 748), v128) == __PAIR64__(v131, v130)
                    && *(_WORD *)(v8 + 750) == *v129)
                  {
                    break;
                  }
                  *(v129 - 2) = *(unsigned char *)(v108 + v130);
                  *(v129 - 1) = *(unsigned char *)(v108 + v131);
                  *uint64_t v129 = *(unsigned char *)(v108 + *v129);
                  v129 += 3;
                  if (!--v115) {
                    goto LABEL_114;
                  }
                }
                *(v129 - 2) = *(unsigned char *)(v8 + 630);
                *(v129 - 1) = *(unsigned char *)(v8 + 632);
                *uint64_t v129 = *(unsigned char *)(v8 + 634);
                v129 += 3;
                --v115;
              }
              while (v115);
            }
          }
          else if (v115)
          {
            int v291 = *(unsigned __int16 *)(v8 + 746);
            unint64_t v292 = v106 + 3;
            do
            {
              if (v291 == *(v292 - 2)
                && *(_WORD *)(v8 + 748) == *(v292 - 1)
                && *(_WORD *)(v8 + 750) == *v292)
              {
                *(v292 - 2) = *(unsigned char *)(v8 + 630);
                *(v292 - 1) = *(unsigned char *)(v8 + 632);
                *unint64_t v292 = *(unsigned char *)(v8 + 634);
              }
              v292 += 3;
              --v115;
            }
            while (v115);
          }
        }
        else if (v110)
        {
          if (v115)
          {
            int v144 = *(unsigned __int16 *)(v8 + 746);
            uint64_t v145 = v106 + 3;
            do
            {
              uint64_t v147 = *(v145 - 2);
              unsigned int v148 = *(v145 - 1);
              uint64_t v149 = v145[2];
              unsigned int v150 = v145[3];
              uint64_t result = v145[1];
              unsigned int v151 = *v145;
              if ((v148 | (v147 << 8)) == v144
                && (result | (v151 << 8)) == *(unsigned __int16 *)(v8 + 748)
                && (v150 | (v149 << 8)) == *(unsigned __int16 *)(v8 + 750))
              {
                *((_WORD *)v145 - 1) = bswap32(*(unsigned __int16 *)(v8 + 630)) >> 16;
                *(_WORD *)uint64_t v145 = bswap32(*(unsigned __int16 *)(v8 + 632)) >> 16;
                uint64_t v146 = (unsigned __int16 *)(v8 + 634);
              }
              else
              {
                *((_WORD *)v145 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v110 + 8 * (v148 >> v113)) + 2 * v147)) >> 16;
                *(_WORD *)uint64_t v145 = bswap32(*(unsigned __int16 *)(*(void *)(v110 + 8 * (result >> v113))
                                                             + 2 * v151)) >> 16;
                uint64_t v146 = (unsigned __int16 *)(*(void *)(v110 + 8 * (v150 >> v113)) + 2 * v149);
              }
              *((_WORD *)v145 + 1) = bswap32(*v146) >> 16;
              v145 += 6;
              --v115;
            }
            while (v115);
          }
        }
        else if (v115)
        {
          int v293 = *(unsigned __int16 *)(v8 + 746);
          unint64_t v294 = (unsigned __int16 *)(v106 + 3);
          do
          {
            if (v293 == bswap32(*(v294 - 1)) >> 16
              && *(unsigned __int16 *)(v8 + 748) == bswap32(*v294) >> 16
              && __rev16(v294[1]) == *(unsigned __int16 *)(v8 + 750))
            {
              *(v294 - 1) = bswap32(*(unsigned __int16 *)(v8 + 630)) >> 16;
              *unint64_t v294 = bswap32(*(unsigned __int16 *)(v8 + 632)) >> 16;
              v294[1] = bswap32(*(unsigned __int16 *)(v8 + 634)) >> 16;
            }
            v294 += 3;
            --v115;
          }
          while (v115);
        }
        break;
      case 4:
        if (*((unsigned char *)a2 + 17) == 8)
        {
          if (v109 && result && v108)
          {
            for (; v115; --v115)
            {
              int v133 = v107[1];
              if (v107[1])
              {
                if (v133 == 255)
                {
                  LOBYTE(v132) = *(unsigned char *)(v108 + *v107);
                }
                else
                {
                  unsigned int v134 = (unsigned __int16)(*(unsigned __int8 *)(v109 + *v107) * (_WORD)v133
                                          + *(_WORD *)(v8 + 646) * (v133 ^ 0xFF)
                                          + 128);
                  unsigned int v132 = v134 + (v134 >> 8);
                  if ((v114 & 0x2000) != 0) {
                    v132 >>= 8;
                  }
                  else {
                    LOBYTE(v132) = *(unsigned char *)(result + BYTE1(v132));
                  }
                }
              }
              else
              {
                LOBYTE(v132) = *(unsigned char *)(v8 + 636);
              }
              *long double v107 = v132;
              v107 += 2;
            }
          }
          else
          {
            for (; v115; --v115)
            {
              int v270 = v107[1];
              if (v270 != 255)
              {
                if (v107[1])
                {
                  unsigned int v268 = (unsigned __int16)(*v107 * (_WORD)v270 + *(_WORD *)(v8 + 636) * (v270 ^ 0xFF) + 128);
                  unsigned int v269 = (v268 + (v268 >> 8)) >> 8;
                }
                else
                {
                  LOBYTE(v269) = *(unsigned char *)(v8 + 636);
                }
                *long double v107 = v269;
              }
              v107 += 2;
            }
          }
        }
        else if (v110 && v111 && v112)
        {
          if (v115)
          {
            uint64_t v152 = v106 + 2;
            do
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    unsigned int v153 = __rev16(*(unsigned __int16 *)(v152 + 1));
                    if (v153) {
                      break;
                    }
                    *(_WORD *)(v152 - 1) = bswap32(*(unsigned __int16 *)(v8 + 636)) >> 16;
                    v152 += 4;
                    if (!--v115) {
                      goto LABEL_114;
                    }
                  }
                  if (v153 != 0xFFFF) {
                    break;
                  }
                  *(_WORD *)(v152 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v110 + 8 * (*v152 >> v113))
                                                                     + 2 * *(v152 - 1))) >> 16;
                  v152 += 4;
                  if (!--v115) {
                    goto LABEL_114;
                  }
                }
                uint64_t result = (v153 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 646);
                unsigned int v154 = result
                     + v153 * *(unsigned __int16 *)(*(void *)(v112 + 8 * (*v152 >> v113)) + 2 * *(v152 - 1))
                     + 0x8000;
                unsigned int v155 = v154 + HIWORD(v154);
                if ((v114 & 0x2000) != 0) {
                  break;
                }
                __int16 v156 = *(_WORD *)(*(void *)(v111 + 8 * (BYTE2(v155) >> v113)) + 2 * HIBYTE(v155));
                *(v152 - 1) = HIBYTE(v156);
                *uint64_t v152 = v156;
                v152 += 4;
                if (!--v115) {
                  goto LABEL_114;
                }
              }
              *(v152 - 1) = HIBYTE(v155);
              *uint64_t v152 = BYTE2(v155);
              v152 += 4;
              --v115;
            }
            while (v115);
          }
        }
        else if (v115)
        {
          uint64_t v277 = v106 + 2;
          do
          {
            unsigned int v280 = __rev16(*(unsigned __int16 *)(v277 + 1));
            if (v280 != 0xFFFF)
            {
              if (v280)
              {
                unsigned int v278 = __rev16(*(unsigned __int16 *)(v277 - 1)) * v280
                     + (v280 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 636)
                     + 0x8000;
                unsigned int v279 = v278 + HIWORD(v278);
                *(v277 - 1) = HIBYTE(v279);
                *uint64_t v277 = BYTE2(v279);
              }
              else
              {
                *(_WORD *)(v277 - 1) = bswap32(*(unsigned __int16 *)(v8 + 636)) >> 16;
              }
            }
            v277 += 4;
            --v115;
          }
          while (v115);
        }
        break;
      case 6:
        if (*((unsigned char *)a2 + 17) == 8)
        {
          if (v109 && result && v108)
          {
            if (v115)
            {
              uint64_t v135 = v106 + 2;
              do
              {
                int v137 = v135[2];
                if (v135[2])
                {
                  if (v137 == 255)
                  {
                    *(v135 - 1) = *(unsigned char *)(v108 + *(v135 - 1));
                    *uint64_t v135 = *(unsigned char *)(v108 + *v135);
                    LOBYTE(v136) = *(unsigned char *)(v108 + v135[1]);
                  }
                  else
                  {
                    int v138 = v137 ^ 0xFF;
                    int v139 = *(unsigned __int16 *)(v8 + 640) * (v137 ^ 0xFF)
                         + *(unsigned __int8 *)(v109 + *(v135 - 1)) * v137
                         + 128;
                    unsigned int v140 = v139 + BYTE1(v139);
                    if ((v114 & 0x2000) != 0) {
                      v140 >>= 8;
                    }
                    else {
                      LOBYTE(v140) = *(unsigned char *)(result + BYTE1(v140));
                    }
                    *(v135 - 1) = v140;
                    int v141 = *(unsigned __int16 *)(v8 + 642) * v138 + *(unsigned __int8 *)(v109 + *v135) * v137 + 128;
                    unsigned int v142 = v141 + BYTE1(v141);
                    if ((v114 & 0x2000) != 0) {
                      v142 >>= 8;
                    }
                    else {
                      LOBYTE(v142) = *(unsigned char *)(result + BYTE1(v142));
                    }
                    *uint64_t v135 = v142;
                    int v143 = *(unsigned __int16 *)(v8 + 644) * v138 + *(unsigned __int8 *)(v109 + v135[1]) * v137 + 128;
                    unsigned int v136 = v143 + BYTE1(v143);
                    if ((v114 & 0x2000) != 0) {
                      v136 >>= 8;
                    }
                    else {
                      LOBYTE(v136) = *(unsigned char *)(result + BYTE1(v136));
                    }
                  }
                }
                else
                {
                  *(v135 - 1) = *(unsigned char *)(v8 + 630);
                  *uint64_t v135 = *(unsigned char *)(v8 + 632);
                  LOBYTE(v136) = *(unsigned char *)(v8 + 634);
                }
                v135[1] = v136;
                v135 += 4;
                --v115;
              }
              while (v115);
            }
          }
          else if (v115)
          {
            uint64_t v271 = v106 + 2;
            do
            {
              int v276 = v271[2];
              if (v276 != 255)
              {
                if (v271[2])
                {
                  __int16 v272 = *(_WORD *)(v8 + 630) * (v276 ^ 0xFF) + *(v271 - 1) * (_WORD)v276 + 128;
                  *(v271 - 1) = (unsigned __int16)(v272 + HIBYTE(v272)) >> 8;
                  __int16 v273 = *(_WORD *)(v8 + 632) * (v276 ^ 0xFF) + *v271 * (_WORD)v276 + 128;
                  unsigned __int8 *v271 = (unsigned __int16)(v273 + HIBYTE(v273)) >> 8;
                  int v274 = *(unsigned __int16 *)(v8 + 634) * (v276 ^ 0xFF) + v271[1] * v276 + 128;
                  unsigned int v275 = (v274 + BYTE1(v274)) >> 8;
                }
                else
                {
                  *(v271 - 1) = *(unsigned char *)(v8 + 630);
                  unsigned __int8 *v271 = *(unsigned char *)(v8 + 632);
                  LOBYTE(v275) = *(unsigned char *)(v8 + 634);
                }
                v271[1] = v275;
              }
              v271 += 4;
              --v115;
            }
            while (v115);
          }
        }
        else if (v110 && v111 && v112)
        {
          if (v115)
          {
            unint64_t v157 = v106 + 4;
            do
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    unsigned int v158 = __rev16(*(unsigned __int16 *)(v157 + 3));
                    if (v158) {
                      break;
                    }
                    *(_WORD *)(v157 - 3) = bswap32(*(unsigned __int16 *)(v8 + 630)) >> 16;
                    *(_WORD *)(v157 - 1) = bswap32(*(unsigned __int16 *)(v8 + 632)) >> 16;
                    *(_WORD *)(v157 + 1) = bswap32(*(unsigned __int16 *)(v8 + 634)) >> 16;
                    v157 += 8;
                    if (!--v115) {
                      goto LABEL_114;
                    }
                  }
                  if (v158 != 0xFFFF) {
                    break;
                  }
                  *(_WORD *)(v157 - 3) = bswap32(*(unsigned __int16 *)(*(void *)(v110 + 8 * (*(v157 - 2) >> v113))
                                                                     + 2 * *(v157 - 3))) >> 16;
                  *(_WORD *)(v157 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v110 + 8 * (*v157 >> v113))
                                                                     + 2 * *(v157 - 1))) >> 16;
                  *(_WORD *)(v157 + 1) = bswap32(*(unsigned __int16 *)(*(void *)(v110 + 8 * (v157[2] >> v113))
                                                                     + 2 * v157[1])) >> 16;
                  v157 += 8;
                  if (!--v115) {
                    goto LABEL_114;
                  }
                }
                int v159 = v158 ^ 0xFFFF;
                unsigned int v160 = (v158 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 640)
                     + v158 * *(unsigned __int16 *)(*(void *)(v112 + 8 * (*(v157 - 2) >> v113)) + 2 * *(v157 - 3))
                     + 0x8000;
                unsigned int v161 = v160 + HIWORD(v160);
                unsigned int v162 = HIBYTE(v161);
                if ((v114 & 0x2000) != 0)
                {
                  unsigned int v163 = HIWORD(v161);
                }
                else
                {
                  unsigned int v163 = *(unsigned __int16 *)(*(void *)(v111 + 8 * (BYTE2(v161) >> v113)) + 2 * v162);
                  unsigned int v162 = v163 >> 8;
                }
                *(v157 - 3) = v162;
                *(v157 - 2) = v163;
                unsigned int v164 = v159 * *(unsigned __int16 *)(v8 + 642)
                     + v158 * *(unsigned __int16 *)(*(void *)(v112 + 8 * (*v157 >> v113)) + 2 * *(v157 - 1))
                     + 0x8000;
                unsigned int v165 = v164 + HIWORD(v164);
                unsigned int v166 = HIBYTE(v165);
                if ((v114 & 0x2000) != 0)
                {
                  unsigned int v167 = HIWORD(v165);
                }
                else
                {
                  unsigned int v167 = *(unsigned __int16 *)(*(void *)(v111 + 8 * (BYTE2(v165) >> v113)) + 2 * v166);
                  unsigned int v166 = v167 >> 8;
                }
                *(v157 - 1) = v166;
                *unint64_t v157 = v167;
                uint64_t result = *(unsigned __int16 *)(*(void *)(v112 + 8 * (v157[2] >> v113)) + 2 * v157[1]);
                unsigned int v168 = v159 * *(unsigned __int16 *)(v8 + 644)
                     + v158 * result
                     + 0x8000
                     + ((v159 * *(unsigned __int16 *)(v8 + 644) + v158 * result + 0x8000) >> 16);
                if ((v114 & 0x2000) != 0) {
                  break;
                }
                __int16 v169 = *(_WORD *)(*(void *)(v111 + 8 * (BYTE2(v168) >> v113)) + 2 * HIBYTE(v168));
                v157[1] = HIBYTE(v169);
                v157[2] = v169;
                v157 += 8;
                if (!--v115) {
                  goto LABEL_114;
                }
              }
              v157[1] = HIBYTE(v168);
              v157[2] = BYTE2(v168);
              v157 += 8;
              --v115;
            }
            while (v115);
          }
        }
        else if (v115)
        {
          float v281 = v106 + 4;
          do
          {
            unsigned int v290 = __rev16(*(unsigned __int16 *)(v281 + 3));
            if (v290 != 0xFFFF)
            {
              if (v290)
              {
                unsigned int v282 = __rev16(*(unsigned __int16 *)(v281 - 1));
                unsigned int v283 = __rev16(*(unsigned __int16 *)(v281 + 1));
                unsigned int v284 = (v290 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 630)
                     + __rev16(*(unsigned __int16 *)(v281 - 3)) * v290
                     + 0x8000;
                unsigned int v285 = v284 + HIWORD(v284);
                *(v281 - 3) = HIBYTE(v285);
                *(v281 - 2) = BYTE2(v285);
                unsigned int v286 = (v290 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 632) + v282 * v290 + 0x8000;
                unsigned int v287 = v286 + HIWORD(v286);
                *(v281 - 1) = HIBYTE(v287);
                unsigned __int8 *v281 = BYTE2(v287);
                unsigned int v288 = (v290 ^ 0xFFFF) * *(unsigned __int16 *)(v8 + 634) + v283 * v290 + 0x8000;
                unsigned int v289 = v288 + HIWORD(v288);
                v281[1] = HIBYTE(v289);
                v281[2] = BYTE2(v289);
              }
              else
              {
                *(_WORD *)(v281 - 3) = bswap32(*(unsigned __int16 *)(v8 + 630)) >> 16;
                *(_WORD *)(v281 - 1) = bswap32(*(unsigned __int16 *)(v8 + 632)) >> 16;
                *(_WORD *)(v281 + 1) = bswap32(*(unsigned __int16 *)(v8 + 634)) >> 16;
              }
            }
            v281 += 8;
            --v115;
          }
          while (v115);
        }
        break;
      default:
        break;
    }
  }
LABEL_114:
  int v91 = *(_DWORD *)(v8 + 300);
  if ((v91 & 0x602000) == 0x2000)
  {
    if ((v91 & 0x80) != 0)
    {
      if (*(_WORD *)(v8 + 600)) {
        goto LABEL_149;
      }
      int v92 = *(unsigned __int8 *)(v8 + 607);
      if ((v92 & 4) != 0) {
        goto LABEL_149;
      }
    }
    else
    {
      int v92 = *(unsigned __int8 *)(v8 + 607);
    }
    if (v92 != 3)
    {
      if ((int v93 = *(unsigned __int8 **)(v8 + 544),
            uint64_t v94 = *(void *)(v8 + 672),
            uint64_t v95 = *(void *)(v8 + 680),
            int v96 = *(_DWORD *)(v8 + 664),
            unsigned int v97 = *a2,
            unsigned int v98 = *((unsigned __int8 *)a2 + 17),
            v98 <= 8)
        && v94
        || v98 == 16 && v95)
      {
        uint64_t v99 = v93 + 1;
        switch(*((unsigned char *)a2 + 16))
        {
          case 0:
            if (v98 == 2 && v97)
            {
              unsigned int v100 = 0;
              int32x4_t v101 = v93 + 1;
              do
              {
                unsigned int v102 = *v101;
                unint64_t v103 = v102 & 0xC;
                int v104 = (v102 & 0xC) >> 2;
                uint64_t result = (*(unsigned __int8 *)(v94
                                             + ((4 * v103) & 0xFFFFFF3F | ((v104 & 3) << 6) | (v103 >> 2) | v103)) >> 4) & 0xC;
                *v101++ = (*(unsigned char *)(v94
                                    + (((v102 & 0x30) >> 2) & 0xFFFFFF3F | ((((v102 & 0x30) >> 4) & 3) << 6) | ((v102 & 0x30) >> 4) | (unint64_t)(v102 & 0x30))) >> 2) & 0x30 | *(unsigned char *)(v94 + ((v102 >> 6) | ((v102 & 0xC0) >> 4) | ((v102 & 0xC0) >> 2) | (unint64_t)(v102 & 0xC0))) & 0xC0 | (*(unsigned char *)(v94 + ((4 * v103) & 0xFFFFFF3F | ((v104 & 3) << 6) | (v103 >> 2) | v103)) >> 4) & 0xC | (*(unsigned char *)(v94 + 85 * (v102 & 3)) >> 6);
                v100 += 4;
              }
              while (v100 < v97);
              unsigned int v98 = *((unsigned __int8 *)a2 + 17);
            }
            if (v98 == 4)
            {
              if (v97)
              {
                for (unsigned int i = 0; i < v97; i += 2)
                {
                  *uint64_t v99 = *(unsigned char *)(v94 + (*v99 & 0xF0 | ((unint64_t)*v99 >> 4))) & 0xF0 | (*(unsigned char *)(v94 + (*v99 & 0xF | (16 * (*v99 & 0xF)))) >> 4);
                  ++v99;
                }
              }
            }
            else if (v98 == 8)
            {
              for (; v97; --v97)
              {
                *uint64_t v99 = *(unsigned char *)(v94 + *v99);
                ++v99;
              }
            }
            else if (v98 == 16 && v97)
            {
              uint64_t v105 = v93 + 2;
              do
              {
                *(_WORD *)(v105 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v95 + 8 * (*v105 >> v96))
                                                                   + 2 * *(v105 - 1))) >> 16;
                v105 += 2;
                --v97;
              }
              while (v97);
            }
            break;
          case 2:
            if (v98 == 8)
            {
              for (; v97; --v97)
              {
                *uint64_t v99 = *(unsigned char *)(v94 + *v99);
                v99[1] = *(unsigned char *)(v94 + v99[1]);
                v99[2] = *(unsigned char *)(v94 + v99[2]);
                v99 += 3;
              }
            }
            else if (v97)
            {
              uint64_t v314 = v93 + 3;
              do
              {
                *((_WORD *)v314 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v95 + 8 * (*(v314 - 1) >> v96))
                                                                   + 2 * *(v314 - 2))) >> 16;
                *(_WORD *)uint64_t v314 = bswap32(*(unsigned __int16 *)(*(void *)(v95 + 8 * (v314[1] >> v96)) + 2 * *v314)) >> 16;
                *((_WORD *)v314 + 1) = bswap32(*(unsigned __int16 *)(*(void *)(v95 + 8 * (v314[3] >> v96))
                                                                   + 2 * v314[2])) >> 16;
                v314 += 6;
                --v97;
              }
              while (v97);
            }
            break;
          case 4:
            if (v98 == 8)
            {
              for (; v97; --v97)
              {
                *uint64_t v99 = *(unsigned char *)(v94 + *v99);
                v99 += 2;
              }
            }
            else if (v97)
            {
              float32x4_t v315 = v93 + 2;
              do
              {
                *(_WORD *)(v315 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v95 + 8 * (*v315 >> v96))
                                                                   + 2 * *(v315 - 1))) >> 16;
                v315 += 4;
                --v97;
              }
              while (v97);
            }
            break;
          case 6:
            if (v98 == 8)
            {
              for (; v97; --v97)
              {
                *uint64_t v99 = *(unsigned char *)(v94 + *v99);
                v99[1] = *(unsigned char *)(v94 + v99[1]);
                v99[2] = *(unsigned char *)(v94 + v99[2]);
                v99 += 4;
              }
            }
            else if (v97)
            {
              uint64_t v316 = v93 + 3;
              do
              {
                *((_WORD *)v316 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v95 + 8 * (*(v316 - 1) >> v96))
                                                                   + 2 * *(v316 - 2))) >> 16;
                *(_WORD *)uint64_t v316 = bswap32(*(unsigned __int16 *)(*(void *)(v95 + 8 * (v316[1] >> v96)) + 2 * *v316)) >> 16;
                *((_WORD *)v316 + 1) = bswap32(*(unsigned __int16 *)(*(void *)(v95 + 8 * (v316[3] >> v96))
                                                                   + 2 * v316[2])) >> 16;
                v316 += 8;
                --v97;
              }
              while (v97);
            }
            break;
          default:
            break;
        }
      }
    }
  }
LABEL_149:
  int v120 = *(_DWORD *)(v8 + 300);
  if ((~v120 & 0x40080) == 0 && (*((unsigned __int8 *)a2 + 16) | 2) == 6)
  {
    uint64_t result = sub_1003B169C((uint64_t)a2, (unsigned char *)(*(void *)(v8 + 544) + 1), 0);
    int v120 = *(_DWORD *)(v8 + 300);
  }
  if ((v120 & 0x800000) != 0 && (a2[4] & 4) != 0)
  {
    uint64_t v121 = *(void *)(v8 + 544);
    unsigned int v122 = *a2;
    int v123 = *((unsigned __int8 *)a2 + 17);
    if (v123 != 16)
    {
      if (v123 == 8)
      {
        uint64_t v124 = *(void *)(v8 + 688);
        if (v124)
        {
          if (v122)
          {
            uint64_t v125 = v121 + 1;
            if ((a2[4] & 2) != 0) {
              uint64_t v126 = 4;
            }
            else {
              uint64_t v126 = 2;
            }
            uint16x8_t v127 = (unsigned char *)(v125 + (v126 - 1));
            do
            {
              *uint16x8_t v127 = *(unsigned char *)(v124 + *v127);
              v127 += v126;
              --v122;
            }
            while (v122);
          }
          goto LABEL_261;
        }
      }
LABEL_260:
      uint64_t result = sub_1003A3704(v8, (uint64_t)"png_do_encode_alpha: unexpected call");
      goto LABEL_261;
    }
    uint64_t v170 = *(void *)(v8 + 704);
    if (!v170) {
      goto LABEL_260;
    }
    if (v122)
    {
      int v171 = *(_DWORD *)(v8 + 664);
      if ((a2[4] & 2) != 0) {
        uint64_t v172 = 8;
      }
      else {
        uint64_t v172 = 4;
      }
      int8x16_t v173 = (unsigned __int8 *)((v172 - 4) + v121 + 4);
      do
      {
        *(_WORD *)(v173 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v170 + 8 * (*v173 >> v171))
                                                           + 2 * *(v173 - 1))) >> 16;
        v173 += v172;
        --v122;
      }
      while (v122);
    }
  }
LABEL_261:
  int v174 = *(_DWORD *)(v8 + 300);
  if ((v174 & 0x4000000) != 0 && *((unsigned char *)a2 + 17) == 16)
  {
    uint64_t v175 = *((void *)a2 + 1);
    if (v175 >= 1)
    {
      uint64_t v176 = (unsigned __int8 *)(*(void *)(v8 + 544) + 1);
      double v177 = &v176[v175];
      double v178 = v176;
      do
      {
        *v178++ = *v176 + ((0xFFFF * (v176[1] - *v176) + 8388480) >> 24);
        v176 += 2;
      }
      while (v176 < v177);
      int v174 = *(_DWORD *)(v8 + 300);
    }
    *((unsigned char *)a2 + 17) = 8;
    int v179 = *((unsigned __int8 *)a2 + 18);
    *((unsigned char *)a2 + 19) = 8 * v179;
    *((void *)a2 + 1) = *a2 * v179;
  }
  if ((v174 & 0x400) != 0 && *((unsigned char *)a2 + 17) == 16)
  {
    uint64_t v180 = *((void *)a2 + 1);
    if (v180 >= 1)
    {
      int8x16_t v181 = (char *)(*(void *)(v8 + 544) + 1);
      uint64_t v182 = &v181[v180];
      uint64_t v183 = v181;
      do
      {
        char v184 = *v183;
        v183 += 2;
        *v181++ = v184;
      }
      while (v183 < v182);
      int v174 = *(_DWORD *)(v8 + 300);
    }
    *((unsigned char *)a2 + 17) = 8;
    int v185 = *((unsigned __int8 *)a2 + 18);
    *((unsigned char *)a2 + 19) = 8 * v185;
    *((void *)a2 + 1) = *a2 * v185;
  }
  if ((v174 & 0x40) != 0)
  {
    if (*((unsigned char *)a2 + 17) != 8)
    {
LABEL_293:
      if (!*((void *)a2 + 1)) {
        sub_1003A34AC(v8, "png_do_quantize returned rowbytes=0");
      }
      int v174 = *(_DWORD *)(v8 + 300);
      goto LABEL_295;
    }
    uint16x8_t v186 = (unsigned char *)(*(void *)(v8 + 544) + 1);
    uint64_t v187 = *(void *)(v8 + 880);
    uint64_t v188 = *(void *)(v8 + 888);
    unsigned int v189 = *a2;
    unsigned int v190 = *a2;
    int v191 = *((unsigned __int8 *)a2 + 16);
    if (v187 && v191 == 2)
    {
      if (v190)
      {
        int8x16_t v192 = (unsigned __int8 *)(*(void *)(v8 + 544) + 1);
        do
        {
          *v186++ = *(unsigned char *)(v187
                             + ((*v192 << 7) & 0x7C00 | (32 * (((unint64_t)v192[1] >> 3) & 0x1F)) | ((unint64_t)v192[2] >> 3)));
          v192 += 3;
          --v190;
        }
        while (v190);
        goto LABEL_288;
      }
    }
    else
    {
      if (!v187 || v191 != 6)
      {
        if (v188 && v191 == 3 && v190)
        {
          do
          {
            unsigned char *v186 = *(unsigned char *)(v188 + *v186);
            ++v186;
            --v190;
          }
          while (v190);
        }
        goto LABEL_293;
      }
      if (v190)
      {
        int32x4_t v193 = (unsigned __int8 *)(*(void *)(v8 + 544) + 1);
        do
        {
          *v186++ = *(unsigned char *)(v187
                             + ((*v193 << 7) & 0x7C00 | (32 * (((unint64_t)v193[1] >> 3) & 0x1F)) | ((unint64_t)v193[2] >> 3)));
          v193 += 4;
          --v190;
        }
        while (v190);
LABEL_288:
        unsigned int v194 = *((unsigned __int8 *)a2 + 17);
        *((unsigned char *)a2 + 16) = 3;
        *((unsigned char *)a2 + 18) = 1;
        *((unsigned char *)a2 + 19) = v194;
        if (v194 < 8)
        {
          unint64_t v195 = (v194 * (unint64_t)v189 + 7) >> 3;
LABEL_292:
          *((void *)a2 + 1) = v195;
          goto LABEL_293;
        }
LABEL_291:
        unint64_t v195 = v189 * (unint64_t)(v194 >> 3);
        goto LABEL_292;
      }
    }
    *((unsigned char *)a2 + 16) = 3;
    *((_WORD *)a2 + 9) = 2049;
    unsigned int v194 = 8;
    goto LABEL_291;
  }
LABEL_295:
  if ((v174 & 0x200) != 0 && *((unsigned char *)a2 + 17) == 8 && *((unsigned char *)a2 + 16) != 3)
  {
    uint64_t v196 = *((void *)a2 + 1);
    if (v196 >= 1)
    {
      uint64_t v197 = *(void *)(v8 + 544);
      unint64_t v198 = v197 + 1 + v196 + v196;
      __int32 v199 = (char *)(v197 + v196);
      int8x8_t v200 = v199;
      do
      {
        char v201 = *v200--;
        *(unsigned char *)(v198 - 2) = v201;
        v198 -= 2;
        *(unsigned char *)(v198 + 1) = v201;
        BOOL v202 = v198 > (unint64_t)v199;
        __int32 v199 = v200;
      }
      while (v202);
      uint64_t v196 = *((void *)a2 + 1);
      int v174 = *(_DWORD *)(v8 + 300);
    }
    *((void *)a2 + 1) = 2 * v196;
    *((unsigned char *)a2 + 17) = 16;
    *((unsigned char *)a2 + 19) = 16 * *((unsigned char *)a2 + 18);
  }
  if ((v174 & 0x4000) != 0 && (*(unsigned char *)(v8 + 293) & 8) != 0)
  {
    uint64_t result = (uint64_t)sub_1003A9E0C(a2, *(void *)(v8 + 544) + 1);
    int v174 = *(_DWORD *)(v8 + 300);
  }
  if ((v174 & 0x20) != 0)
  {
    uint64_t result = sub_1003B13AC((uint64_t)a2, (int8x16_t *)(*(void *)(v8 + 544) + 1));
    int v174 = *(_DWORD *)(v8 + 300);
  }
  if ((v174 & 0x80000) != 0)
  {
    uint64_t v203 = *(void *)(v8 + 544);
    uint64_t v204 = v203 + 1;
    uint64_t v205 = *a2;
    int v206 = *((unsigned __int8 *)a2 + 16);
    if (v206 == 4)
    {
      if (*((unsigned char *)a2 + 17) == 8)
      {
        if (!v205) {
          goto LABEL_352;
        }
        uint64_t v210 = v204 + *((void *)a2 + 1);
        if (v205 == 1)
        {
          LODWORD(v211) = 0;
          uint64_t v212 = v204 + *((void *)a2 + 1);
        }
        else
        {
          uint64_t v211 = v205 & 0xFFFFFFFE;
          uint64_t v212 = v210 - 2 * v211;
          uint64_t v224 = (unsigned char *)(v210 - 1);
          uint64_t v225 = v211;
          do
          {
            char v226 = ~*(v224 - 2);
            *uint64_t v224 = ~*v224;
            *(v224 - 2) = v226;
            v224 -= 4;
            v225 -= 2;
          }
          while (v225);
          if (v211 == v205) {
            goto LABEL_352;
          }
        }
        int v227 = v205 - v211;
        unint64_t v228 = (unsigned char *)(v212 - 1);
        do
        {
          *unint64_t v228 = ~*v228;
          v228 -= 2;
          --v227;
        }
        while (v227);
        goto LABEL_352;
      }
      if (v205)
      {
        uint64_t v214 = (unsigned char *)(v203 + *((void *)a2 + 1));
        do
        {
          *uint64_t v214 = ~*v214;
          *(v214 - 1) = ~*(v214 - 1);
          v214 -= 4;
          LODWORD(v205) = v205 - 1;
        }
        while (v205);
      }
    }
    else
    {
      if (v206 != 6) {
        goto LABEL_352;
      }
      if (*((unsigned char *)a2 + 17) == 8)
      {
        if (!v205) {
          goto LABEL_352;
        }
        uint64_t v207 = v204 + *((void *)a2 + 1);
        if (v205 == 1)
        {
          LODWORD(v208) = 0;
          uint64_t v209 = v204 + *((void *)a2 + 1);
LABEL_344:
          int v222 = v205 - v208;
          uint64_t v223 = (unsigned char *)(v209 - 1);
          do
          {
            *uint64_t v223 = ~*v223;
            v223 -= 4;
            --v222;
          }
          while (v222);
          goto LABEL_352;
        }
        uint64_t v208 = v205 & 0xFFFFFFFE;
        uint64_t v209 = v207 - 4 * v208;
        uint64_t v219 = (unsigned char *)(v207 - 1);
        uint64_t v220 = v208;
        do
        {
          char v221 = ~*(v219 - 4);
          *uint64_t v219 = ~*v219;
          *(v219 - 4) = v221;
          v219 -= 8;
          v220 -= 2;
        }
        while (v220);
        if (v208 != v205) {
          goto LABEL_344;
        }
      }
      else if (v205)
      {
        unint64_t v213 = (unsigned char *)(v203 + *((void *)a2 + 1));
        do
        {
          *unint64_t v213 = ~*v213;
          *(v213 - 1) = ~*(v213 - 1);
          v213 -= 8;
          LODWORD(v205) = v205 - 1;
        }
        while (v205);
      }
    }
  }
LABEL_352:
  int v229 = *(_DWORD *)(v8 + 300);
  if ((v229 & 8) == 0) {
    goto LABEL_575;
  }
  int v230 = *((unsigned __int8 *)a2 + 16);
  if (v230 == 3) {
    goto LABEL_575;
  }
  uint64_t v231 = *(void *)(v8 + 544);
  int v232 = *((unsigned __int8 *)a2 + 17);
  if ((v230 & 2) != 0)
  {
    int v234 = *(unsigned __int8 *)(v8 + 725);
    int v235 = v232 - *(unsigned __int8 *)(v8 + 727);
    int v462 = v232 - *(unsigned __int8 *)(v8 + 726);
    int v463 = v235;
    int v233 = 3;
    signed int v461 = v232 - v234;
    if ((v230 & 4) == 0) {
      goto LABEL_359;
    }
    goto LABEL_358;
  }
  int v233 = 1;
  signed int v461 = v232 - *(unsigned __int8 *)(v8 + 728);
  if ((v230 & 4) != 0) {
LABEL_358:
  }
    *(&v461 + v233++) = v232 - *(unsigned __int8 *)(v8 + 729);
LABEL_359:
  signed int v236 = v461;
  BOOL v237 = v461 > 0 && v461 < v232;
  if (v461 <= 0 || v461 >= v232) {
    signed int v236 = 0;
  }
  signed int v461 = v236;
  if (v233 != 1)
  {
    int v238 = v462;
    BOOL v239 = v462 > 0;
    BOOL v240 = v462 < v232;
    if (!v239 || !v240) {
      int v238 = 0;
    }
    int v462 = v238;
    if (v239 && v240) {
      BOOL v237 = 1;
    }
    if (v233 != 2)
    {
      int v241 = v463;
      BOOL v242 = v463 > 0;
      BOOL v243 = v463 < v232;
      if (!v242 || !v243) {
        int v241 = 0;
      }
      int v463 = v241;
      if (v242 && v243) {
        BOOL v237 = 1;
      }
      if (v233 != 3)
      {
        int v244 = v464;
        BOOL v245 = v464 > 0;
        BOOL v246 = v464 < v232;
        if (!v245 || !v246) {
          int v244 = 0;
        }
        int v464 = v244;
        if (v245 && v246) {
          BOOL v237 = 1;
        }
      }
    }
  }
  if (v237)
  {
    HIDWORD(v247) = v232;
    LODWORD(v247) = v232 - 2;
    signed int v248 = (unsigned __int8 *)(v231 + 1);
    switch((v247 >> 1))
    {
      case 0u:
        uint64_t v249 = *((void *)a2 + 1);
        if (v249 < 1) {
          goto LABEL_574;
        }
        if (v249 + v231 + 1 > (unint64_t)(v231 + 2)) {
          uint64_t v250 = v249 + v231 + 1;
        }
        else {
          uint64_t v250 = v231 + 2;
        }
        unint64_t v251 = v250 + ~v231;
        uint64_t v252 = (unsigned __int8 *)(v231 + 1);
        if (v251 < 8) {
          goto LABEL_572;
        }
        if (v251 >= 0x20)
        {
          unint64_t v253 = v251 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v334 = (uint8x16_t *)(v231 + 17);
          a3.i16[0] = 21845;
          a3.i8[2] = 85;
          a3.i8[3] = 85;
          a3.i8[4] = 85;
          a3.i8[5] = 85;
          a3.i8[6] = 85;
          a3.i8[7] = 85;
          a3.i8[8] = 85;
          a3.i8[9] = 85;
          a3.i8[10] = 85;
          a3.i8[11] = 85;
          a3.i8[12] = 85;
          a3.i8[13] = 85;
          a3.i8[14] = 85;
          a3.i8[15] = 85;
          unint64_t v335 = v251 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v336 = vandq_s8((int8x16_t)vshrq_n_u8(*v334, 1uLL), (int8x16_t)a3);
            v334[-1] = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8(v334[-1], 1uLL), (int8x16_t)a3);
            *uint64_t v334 = (uint8x16_t)v336;
            v334 += 2;
            v335 -= 32;
          }
          while (v335);
          if (v251 == v253) {
            goto LABEL_574;
          }
          if ((v251 & 0x18) == 0)
          {
            uint64_t v252 = &v248[v253];
LABEL_572:
            uint64_t v342 = &v248[v249];
            do
            {
              *uint64_t v252 = (*v252 >> 1) & 0x55;
              ++v252;
            }
            while (v252 < v342);
LABEL_574:
            int v229 = *(_DWORD *)(v8 + 300);
            break;
          }
        }
        else
        {
          unint64_t v253 = 0;
        }
        uint64_t v252 = &v248[v251 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v337 = (uint8x8_t *)(v253 + v231 + 1);
        unint64_t v338 = v253 - (v251 & 0xFFFFFFFFFFFFFFF8);
        a3.i16[0] = 21845;
        a3.i8[2] = 85;
        a3.i8[3] = 85;
        a3.i8[4] = 85;
        a3.i8[5] = 85;
        a3.i8[6] = 85;
        a3.i8[7] = 85;
        do
        {
          *uint64_t v337 = (uint8x8_t)vand_s8((int8x8_t)vshr_n_u8(*v337, 1uLL), *(int8x8_t *)a3.i8);
          ++v337;
          v338 += 8;
        }
        while (v338);
        if (v251 == (v251 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_574;
        }
        goto LABEL_572;
      case 1u:
        uint64_t v254 = *((void *)a2 + 1);
        if (v254 < 1) {
          goto LABEL_574;
        }
        char v255 = v461;
        unsigned int v256 = (0xFu >> v461) | (16 * (0xFu >> v461));
        if (v254 + v231 + 1 > (unint64_t)(v231 + 2)) {
          uint64_t v257 = v254 + v231 + 1;
        }
        else {
          uint64_t v257 = v231 + 2;
        }
        unint64_t v258 = v257 + ~v231;
        if (v258 < 8)
        {
          uint64_t v259 = (unsigned __int8 *)(v231 + 1);
          goto LABEL_568;
        }
        int32x4_t v317 = vdupq_n_s32(v461);
        a3 = vdupq_n_s32(v256);
        if (v258 >= 0x10)
        {
          unint64_t v318 = v258 & 0xFFFFFFFFFFFFFFF0;
          a8.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
          uint32x4_t v339 = (uint32x4_t)vnegq_s32(v317);
          unint64_t v340 = v258 & 0xFFFFFFFFFFFFFFF0;
          uint64_t result = v231 + 1;
          do
          {
            v472.val[1] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(*(int8x16_t *)result, (int8x16_t)xmmword_1004048A0), v339), (int8x16_t)a3);
            v472.val[0] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(*(int8x16_t *)result, (int8x16_t)xmmword_100404890), v339), (int8x16_t)a3);
            v472.val[2] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(*(int8x16_t *)result, (int8x16_t)xmmword_1004048B0), v339), (int8x16_t)a3);
            v472.val[3] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(*(int8x16_t *)result, (int8x16_t)xmmword_1004048C0), v339), (int8x16_t)a3);
            *(int8x16_t *)uint64_t result = vqtbl4q_s8(v472, (int8x16_t)xmmword_1004047C0);
            result += 16;
            v340 -= 16;
          }
          while (v340);
          if (v258 == v318) {
            goto LABEL_574;
          }
          if ((v258 & 8) == 0)
          {
            uint64_t v259 = &v248[v318];
LABEL_568:
            unint64_t v341 = &v248[v254];
            do
            {
              *uint64_t v259 = (*v259 >> v255) & v256;
              ++v259;
            }
            while (v259 < v341);
            goto LABEL_574;
          }
        }
        else
        {
          unint64_t v318 = 0;
        }
        uint64_t result = v258 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v259 = &v248[v258 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v319 = (unint64_t *)(v318 + v231 + 1);
        unint64_t v320 = v318 - (v258 & 0xFFFFFFFFFFFFFFF8);
        uint32x4_t v321 = (uint32x4_t)vnegq_s32(v317);
        do
        {
          a8.i64[0] = *v319;
          v467.val[0] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_100404890), v321), (int8x16_t)a3);
          v467.val[1] = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1004048A0), v321), (int8x16_t)a3);
          a8 = vqtbl2q_s8(v467, (int8x16_t)xmmword_1004047D0);
          *v319++ = a8.i64[0];
          v320 += 8;
        }
        while (v320);
        if (v258 == result) {
          goto LABEL_574;
        }
        goto LABEL_568;
      case 3u:
        uint64_t v260 = *((void *)a2 + 1);
        if (v260 >= 1)
        {
          int v261 = 0;
          float64x2_t v262 = &v248[v260];
          do
          {
            int v263 = *v248 >> *(&v461 + v261);
            if (v261 + 1 < v233) {
              ++v261;
            }
            else {
              int v261 = 0;
            }
            *v248++ = v263;
          }
          while (v248 < v262);
        }
        goto LABEL_574;
      case 7u:
        uint64_t v264 = *((void *)a2 + 1);
        if (v264 >= 1)
        {
          int v265 = 0;
          int8x16_t v266 = &v248[v264];
          do
          {
            unsigned int v267 = __rev16(*(unsigned __int16 *)v248) >> *(&v461 + v265);
            if (v265 + 1 < v233) {
              ++v265;
            }
            else {
              int v265 = 0;
            }
            *(_WORD *)signed int v248 = __rev16(v267);
            v248 += 2;
          }
          while (v248 < v266);
        }
        goto LABEL_574;
      default:
        goto LABEL_574;
    }
  }
LABEL_575:
  if ((v229 & 4) != 0)
  {
    unsigned int v343 = *((unsigned __int8 *)a2 + 17);
    if (v343 <= 7)
    {
      uint64_t v344 = *(void *)(v8 + 544);
      uint64_t v345 = v344 + 1;
      uint64_t v346 = *a2;
      if (v343 == 4)
      {
        if (v346)
        {
          int v352 = 4 * (*a2 & 1);
          uint64_t v353 = (unsigned __int8 *)(v345 + ((v346 - 1) >> 1));
          uint64_t v354 = (unsigned char *)(v344 + v346);
          unsigned int v355 = *a2;
          do
          {
            int v356 = *v353 >> v352;
            BOOL v60 = v352 == 0;
            BOOL v357 = v352 == 0;
            *v354-- = v356 & 0xF;
            uint64_t v358 = !v60;
            v353 -= v358;
            int v352 = 4 * v357;
            --v355;
          }
          while (v355);
        }
      }
      else if (v343 == 2)
      {
        if (v346)
        {
          int v359 = ~(2 * v346 + 6) & 6;
          double v360 = (unsigned __int8 *)(v345 + ((v346 - 1) >> 2));
          uint64_t v361 = (unsigned char *)(v344 + v346);
          unsigned int v362 = *a2;
          do
          {
            *v361-- = (*v360 >> v359) & 3;
            BOOL v60 = v359 == 6;
            uint64_t v363 = v359 == 6;
            v359 += 2;
            if (v60) {
              int v359 = 0;
            }
            v360 -= v363;
            --v362;
          }
          while (v362);
        }
      }
      else if (v343 == 1 && v346)
      {
        int v347 = -(int)v346 & 7;
        int8x8_t v348 = (unsigned __int8 *)(v345 + ((v346 - 1) >> 3));
        uint64_t v349 = (unsigned char *)(v344 + v346);
        unsigned int v350 = *a2;
        do
        {
          *v349-- = (*v348 >> v347) & 1;
          uint64_t v351 = v347 == 7;
          if (v347 == 7) {
            int v347 = 0;
          }
          else {
            ++v347;
          }
          v348 -= v351;
          --v350;
        }
        while (v350);
      }
      *((unsigned char *)a2 + 17) = 8;
      int v364 = *((unsigned __int8 *)a2 + 18);
      *((unsigned char *)a2 + 19) = 8 * v364;
      *((void *)a2 + 1) = (v346 * v364);
    }
  }
  if (*((unsigned char *)a2 + 16) == 3 && (*(_DWORD *)(v8 + 596) & 0x80000000) == 0) {
    uint64_t result = sub_1003B1A1C(v8, (uint64_t)a2);
  }
  int v365 = *(_DWORD *)(v8 + 300);
  if (v365)
  {
    uint64_t result = (uint64_t)sub_1003B1890(a2, (char *)(*(void *)(v8 + 544) + 1));
    int v365 = *(_DWORD *)(v8 + 300);
    if ((v365 & 0x10000) == 0)
    {
LABEL_605:
      if ((v365 & 0x8000) == 0) {
        goto LABEL_657;
      }
      goto LABEL_609;
    }
  }
  else if ((v365 & 0x10000) == 0)
  {
    goto LABEL_605;
  }
  uint64_t result = sub_1003B1620((uint64_t)a2, (unsigned char *)(*(void *)(v8 + 544) + 1));
  int v365 = *(_DWORD *)(v8 + 300);
  if ((v365 & 0x8000) == 0) {
    goto LABEL_657;
  }
LABEL_609:
  uint64_t v366 = *(void *)(v8 + 544);
  uint64_t v367 = v366 + 1;
  unsigned int v368 = *(unsigned __int16 *)(v8 + 618);
  int v369 = *(_DWORD *)(v8 + 296);
  uint64_t v370 = *a2;
  if (*((unsigned char *)a2 + 16) == 2)
  {
    int v376 = *((unsigned __int8 *)a2 + 17);
    if (v376 == 16)
    {
      if ((v369 & 0x80) != 0)
      {
        uint64_t v400 = v367 + 2 * v370 + 6 * v370;
        if (v370 >= 2)
        {
          int v401 = v370 - 1;
          uint64_t v402 = (unsigned char *)(6 * v370 + v366 - 2);
          __int16 v403 = __rev16(v368);
          do
          {
            *(_WORD *)(v400 - 2) = v403;
            *(unsigned char *)(v400 - 3) = v402[2];
            *(unsigned char *)(v400 - 4) = v402[1];
            *(unsigned char *)(v400 - 5) = *v402;
            *(unsigned char *)(v400 - 6) = *(v402 - 1);
            *(unsigned char *)(v400 - 7) = *(v402 - 2);
            *(unsigned char *)(v400 - 8) = *(v402 - 3);
            v400 -= 8;
            v402 -= 6;
            --v401;
          }
          while (v401);
        }
        *(_WORD *)(v400 - 2) = __rev16(v368);
      }
      else if (v370)
      {
        uint64_t v383 = (unsigned char *)(v366 + 6 * v370 - 2);
        float64x2_t v384 = (unsigned char *)(v366 + 8 * v370 - 3);
        unsigned int v385 = *a2;
        do
        {
          v384[3] = v383[2];
          v384[2] = v383[1];
          v384[1] = *v383;
          *float64x2_t v384 = *(v383 - 1);
          *(v384 - 1) = *(v383 - 2);
          *(v384 - 2) = *(v383 - 3);
          *(v384 - 3) = v368;
          *(v384 - 4) = BYTE1(v368);
          v383 -= 6;
          v384 -= 8;
          --v385;
        }
        while (v385);
      }
      char v390 = 3;
      char v391 = 64;
    }
    else
    {
      if (v376 != 8) {
        goto LABEL_657;
      }
      if ((v369 & 0x80) != 0)
      {
        uint64_t v393 = v367 + v370 + 3 * v370;
        if (v370 >= 2)
        {
          int v394 = v370 - 1;
          uint64_t v395 = (unsigned char *)(v366 + 3 * v370);
          do
          {
            *(unsigned char *)(v393 - 1) = v368;
            *(unsigned char *)(v393 - 2) = *v395;
            *(unsigned char *)(v393 - 3) = *(v395 - 1);
            *(unsigned char *)(v393 - 4) = *(v395 - 2);
            v393 -= 4;
            v395 -= 3;
            --v394;
          }
          while (v394);
        }
        *(unsigned char *)(v393 - 1) = v368;
      }
      else if (v370)
      {
        double v377 = (unsigned char *)(v366 + 3 * v370);
        uint64_t v378 = (unsigned char *)(v366 + 4 * v370 - 1);
        unsigned int v379 = *a2;
        do
        {
          v378[1] = *v377;
          *uint64_t v378 = *(v377 - 1);
          *(v378 - 1) = *(v377 - 2);
          *(v378 - 2) = v368;
          v377 -= 3;
          v378 -= 4;
          --v379;
        }
        while (v379);
      }
      char v390 = 2;
      char v391 = 32;
    }
    char v392 = 4;
  }
  else
  {
    if (*((unsigned char *)a2 + 16)) {
      goto LABEL_657;
    }
    int v371 = *((unsigned __int8 *)a2 + 17);
    if (v371 == 16)
    {
      if ((v369 & 0x80) != 0)
      {
        uint64_t v396 = v367 + 2 * v370 + 2 * v370;
        __int16 v397 = __rev16(v368);
        if (v370 >= 2)
        {
          int v398 = v370 - 1;
          double v399 = (unsigned char *)(v366 + 2 * v370);
          do
          {
            *(_WORD *)(v396 - 2) = v397;
            *(unsigned char *)(v396 - 3) = *v399;
            *(unsigned char *)(v396 - 4) = *(v399 - 1);
            v396 -= 4;
            v399 -= 2;
            --v398;
          }
          while (v398);
        }
        *(_WORD *)(v396 - 2) = v397;
      }
      else if (v370)
      {
        int8x16_t v380 = (unsigned char *)(v366 + 2 * v370);
        float64x2_t v381 = (unsigned char *)(v366 + 4 * v370 - 1);
        unsigned int v382 = *a2;
        do
        {
          v381[1] = *v380;
          *float64x2_t v381 = *(v380 - 1);
          *(v381 - 1) = v368;
          *(v381 - 2) = BYTE1(v368);
          v380 -= 2;
          v381 -= 4;
          --v382;
        }
        while (v382);
      }
      char v392 = 2;
      char v391 = 32;
      char v390 = 2;
    }
    else
    {
      if (v371 != 8) {
        goto LABEL_657;
      }
      if ((v369 & 0x80) != 0)
      {
        uint64_t v386 = v367 + v370 + v370;
        if (v370 >= 2)
        {
          uint64_t v387 = (char *)(v366 + v370);
          int v388 = v370 - 1;
          do
          {
            *(unsigned char *)(v386 - 1) = v368;
            char v389 = *v387--;
            *(unsigned char *)(v386 - 2) = v389;
            v386 -= 2;
            --v388;
          }
          while (v388);
        }
        *(unsigned char *)(v386 - 1) = v368;
      }
      else if (v370)
      {
        uint64_t v372 = (unsigned char *)(v366 + 2 * v370);
        uint64_t v373 = (char *)(v366 + v370);
        unsigned int v374 = *a2;
        do
        {
          char v375 = *v373--;
          *uint64_t v372 = v375;
          *(v372 - 1) = v368;
          v372 -= 2;
          --v374;
        }
        while (v374);
      }
      char v390 = 1;
      char v391 = 16;
      char v392 = 2;
    }
  }
  *((unsigned char *)a2 + 18) = v392;
  *((unsigned char *)a2 + 19) = v391;
  *((void *)a2 + 1) = (v370 << v390);
  int v365 = *(_DWORD *)(v8 + 300);
LABEL_657:
  if ((v365 & 0x20000) == 0) {
    goto LABEL_716;
  }
  uint64_t v404 = *(void *)(v8 + 544);
  uint64_t v405 = v404 + 1;
  uint64_t v406 = *a2;
  int v407 = *((unsigned __int8 *)a2 + 16);
  if (v407 == 4)
  {
    if (*((unsigned char *)a2 + 17) == 8)
    {
      if (!v406) {
        goto LABEL_716;
      }
      uint64_t v411 = *((void *)a2 + 1);
      uint64_t v412 = v405 + v411;
      if (v406 < 8)
      {
        LODWORD(v413) = 0;
        goto LABEL_706;
      }
      if (v406 >= 0x10)
      {
        uint64_t v424 = v406 & 0xFFFFFFF0;
        unint64_t v441 = (char *)(v412 - 32);
        uint64_t v442 = v424;
        do
        {
          int8x16x2_t v466 = vld2q_s8(v441);
          int8x16_t v443 = v466.val[0];
          vst2q_s8(v441, *(int8x16x2_t *)((char *)&v466 + 16));
          v441 -= 32;
          v442 -= 16;
        }
        while (v442);
        if (v424 == v406) {
          goto LABEL_716;
        }
        if ((v406 & 8) == 0)
        {
          v412 -= 2 * v424;
          LODWORD(v413) = v406 & 0xFFFFFFF0;
          goto LABEL_706;
        }
      }
      else
      {
        uint64_t v424 = 0;
      }
      uint64_t v413 = v406 & 0xFFFFFFF8;
      v412 -= 2 * v413;
      uint64_t v425 = (char *)(v411 - 2 * v424 + v404 - 15);
      uint64_t v426 = v424 - v413;
      do
      {
        int8x8x2_t v465 = vld2_s8(v425);
        int8x8_t v427 = v465.val[0];
        vst2_s8(v425, *(int8x8x2_t *)((char *)&v465 + 8));
        v425 -= 16;
        v426 += 8;
      }
      while (v426);
      if (v413 == v406) {
        goto LABEL_716;
      }
LABEL_706:
      int v444 = v406 - v413;
      uint64_t v445 = (char *)(v412 - 1);
      do
      {
        char v446 = *v445;
        *uint64_t v445 = *(v445 - 1);
        *(v445 - 1) = v446;
        v445 -= 2;
        --v444;
      }
      while (v444);
      goto LABEL_716;
    }
    if (!v406) {
      goto LABEL_716;
    }
    uint64_t v415 = *((void *)a2 + 1);
    uint64_t v416 = v405 + v415;
    if (v406 < 8)
    {
      LODWORD(v417) = 0;
      goto LABEL_714;
    }
    if (v406 >= 0x10)
    {
      uint64_t v428 = v406 & 0xFFFFFFF0;
      uint64_t v447 = (char *)(v416 - 64);
      uint64_t v448 = v428;
      do
      {
        *(int8x16x4_t *)a3.uint64_t i8 = vld4q_s8(v447);
        v471.val[0] = v449;
        v471.val[1] = v450;
        v471.val[2] = (int8x16_t)a3;
        v471.val[3] = v451;
        vst4q_s8(v447, v471);
        v447 -= 64;
        v448 -= 16;
      }
      while (v448);
      if (v428 == v406) {
        goto LABEL_716;
      }
      if ((v406 & 8) == 0)
      {
        v416 -= 4 * v428;
        LODWORD(v417) = v406 & 0xFFFFFFF0;
        goto LABEL_714;
      }
    }
    else
    {
      uint64_t v428 = 0;
    }
    uint64_t v417 = v406 & 0xFFFFFFF8;
    v416 -= 4 * v417;
    unsigned int v429 = (char *)(v415 - 4 * v428 + v404 - 31);
    uint64_t v430 = v428 - v417;
    do
    {
      *(int8x8x4_t *)a3.uint64_t i8 = vld4_s8(v429);
      v469.val[0] = v431;
      v469.val[1] = v432;
      v469.val[2] = (int8x8_t)a3.i64[0];
      v469.val[3] = v433;
      vst4_s8(v429, v469);
      v429 -= 32;
      v430 += 8;
    }
    while (v430);
    if (v417 == v406) {
      goto LABEL_716;
    }
LABEL_714:
    int v452 = v406 - v417;
    v453 = (unsigned __int32 *)(v416 - 4);
    do
    {
      a3.i32[0] = *v453;
      a3 = (int32x4_t)vmovl_u8(*(uint8x8_t *)a3.i8);
      *(int8x8_t *)a3.uint64_t i8 = vext_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8, 4uLL);
      *(int8x8_t *)a3.uint64_t i8 = vmovn_s16((int16x8_t)a3);
      *v453-- = a3.i32[0];
      --v452;
    }
    while (v452);
    goto LABEL_716;
  }
  if (v407 != 6) {
    goto LABEL_716;
  }
  if (*((unsigned char *)a2 + 17) == 8)
  {
    if (!v406) {
      goto LABEL_716;
    }
    uint64_t v408 = *((void *)a2 + 1);
    uint64_t v409 = v405 + v408;
    if (v406 < 8)
    {
      LODWORD(v410) = 0;
      goto LABEL_698;
    }
    if (v406 >= 0x10)
    {
      uint64_t v418 = v406 & 0xFFFFFFF0;
      uint64_t v434 = (char *)(v409 - 64);
      uint64_t v435 = v418;
      do
      {
        *(int8x16x4_t *)a3.uint64_t i8 = vld4q_s8(v434);
        v470.val[0] = v436;
        v470.val[1] = (int8x16_t)a3;
        v470.val[2] = v437;
        v470.val[3] = v438;
        vst4q_s8(v434, v470);
        v434 -= 64;
        v435 -= 16;
      }
      while (v435);
      if (v418 == v406) {
        goto LABEL_716;
      }
      if ((v406 & 8) == 0)
      {
        v409 -= 4 * v418;
        LODWORD(v410) = v406 & 0xFFFFFFF0;
LABEL_698:
        unint64_t v439 = (unsigned __int32 *)(v409 - 4);
        int v440 = v406 - v410;
        do
        {
          a3.i32[0] = *v439;
          a3 = (int32x4_t)vmovl_u8(*(uint8x8_t *)a3.i8);
          *(int8x8_t *)a3.uint64_t i8 = vext_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8, 6uLL);
          *(int8x8_t *)a3.uint64_t i8 = vmovn_s16((int16x8_t)a3);
          *v439-- = a3.i32[0];
          --v440;
        }
        while (v440);
        goto LABEL_716;
      }
    }
    else
    {
      uint64_t v418 = 0;
    }
    uint64_t v410 = v406 & 0xFFFFFFF8;
    v409 -= 4 * v410;
    uint64_t v419 = (char *)(v408 - 4 * v418 + v404 - 31);
    uint64_t v420 = v418 - v410;
    do
    {
      *(int8x8x4_t *)a3.uint64_t i8 = vld4_s8(v419);
      v468.val[0] = v421;
      v468.val[1] = (int8x8_t)a3.i64[0];
      v468.val[2] = v422;
      v468.val[3] = v423;
      vst4_s8(v419, v468);
      v419 -= 32;
      v420 += 8;
    }
    while (v420);
    if (v410 != v406) {
      goto LABEL_698;
    }
  }
  else if (v406)
  {
    __int16 v414 = (int8x8_t *)(*((void *)a2 + 1) + v404 - 7);
    do
    {
      *__int16 v414 = vext_s8(*v414, *v414, 6uLL);
      --v414;
      LODWORD(v406) = v406 - 1;
    }
    while (v406);
  }
LABEL_716:
  int v454 = *(_DWORD *)(v8 + 300);
  if ((v454 & 0x10) != 0)
  {
    uint64_t result = sub_1003B1540((uint64_t)a2, (char *)(*(void *)(v8 + 544) + 1));
    if ((*(_DWORD *)(v8 + 300) & 0x100000) == 0) {
      return result;
    }
  }
  else if ((v454 & 0x100000) == 0)
  {
    return result;
  }
  uint64_t v455 = *(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(v8 + 264);
  if (v455) {
    uint64_t result = v455(v8, a2, *(void *)(v8 + 544) + 1);
  }
  if (*(unsigned char *)(v8 + 288)) {
    *((unsigned char *)a2 + 17) = *(unsigned char *)(v8 + 288);
  }
  char v456 = *(unsigned char *)(v8 + 289);
  if (v456) {
    *((unsigned char *)a2 + 18) = v456;
  }
  else {
    char v456 = *((unsigned char *)a2 + 18);
  }
  unsigned __int8 v457 = v456 * *((unsigned char *)a2 + 17);
  *((unsigned char *)a2 + 19) = v457;
  BOOL v458 = v457 >= 8u;
  unint64_t v459 = (*a2 * (unint64_t)v457 + 7) >> 3;
  unint64_t v460 = *a2 * (unint64_t)(v457 >> 3);
  if (!v458) {
    unint64_t v460 = v459;
  }
  *((void *)a2 + 1) = v460;
  return result;
}

unsigned int *sub_1003A99D8(unsigned int *result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3 = *result;
  if (!*((unsigned char *)result + 16))
  {
    if (a3)
    {
      unsigned int v13 = a3[4];
      unsigned int v14 = *((unsigned __int8 *)result + 17);
      if (v14 > 7) {
        goto LABEL_58;
      }
    }
    else
    {
      unsigned int v13 = 0;
      unsigned int v14 = *((unsigned __int8 *)result + 17);
      if (v14 > 7)
      {
LABEL_58:
        if (!a3) {
          return result;
        }
        if (v14 == 16)
        {
          if (v3)
          {
            uint64_t v49 = *((void *)result + 1);
            int v50 = (char *)(a2 + 2 * v49 - 1);
            unsigned int v51 = (char *)(a2 + v49 - 1);
            int v52 = v3;
            do
            {
              if (*(v51 - 1) == v13 >> 8 && *v51 == v13) {
                char v53 = 0;
              }
              else {
                char v53 = -1;
              }
              *int v50 = v53;
              *(v50 - 1) = v53;
              *(v50 - 2) = *v51;
              char v54 = *(v51 - 1);
              v51 -= 2;
              *(v50 - 3) = v54;
              v50 -= 4;
              --v52;
            }
            while (v52);
          }
        }
        else if (v14 == 8 && v3)
        {
          int v44 = (char *)(a2 + 2 * v3 - 1);
          unsigned int v45 = (char *)(v3 + a2 - 1);
          int v46 = v3;
          do
          {
            if (*v45 == v13) {
              char v47 = 0;
            }
            else {
              char v47 = -1;
            }
            *int v44 = v47;
            char v48 = *v45--;
            *(v44 - 1) = v48;
            v44 -= 2;
            --v46;
          }
          while (v46);
        }
        *((unsigned char *)result + 16) = 4;
        *((unsigned char *)result + 18) = 2;
        unsigned __int8 v30 = 2 * *((unsigned char *)result + 17);
        unsigned int v31 = v30;
        goto LABEL_76;
      }
    }
    switch(v14)
    {
      case 1u:
        unsigned int v13 = ((int)(v13 << 31) >> 31);
        if (v3)
        {
          int v32 = -(int)v3 & 7;
          char v33 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 3));
          char v34 = (char *)(v3 + a2 - 1);
          int v35 = *result;
          do
          {
            if ((*v33 >> v32)) {
              char v36 = -1;
            }
            else {
              char v36 = 0;
            }
            *v34-- = v36;
            uint64_t v37 = v32 == 7;
            if (v32 == 7) {
              int v32 = 0;
            }
            else {
              ++v32;
            }
            v33 -= v37;
            --v35;
          }
          while (v35);
          goto LABEL_55;
        }
        break;
      case 2u:
        unsigned int v13 = 85 * (v13 & 3);
        if (v3)
        {
          int v38 = ~(2 * v3 + 6) & 6;
          int v39 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 2));
          uint64_t v40 = (unsigned char *)(v3 + a2 - 1);
          int v41 = *result;
          do
          {
            *v40-- = 85 * ((*v39 >> v38) & 3);
            BOOL v20 = v38 == 6;
            uint64_t v42 = v38 == 6;
            v38 += 2;
            if (v20) {
              int v38 = 0;
            }
            v39 -= v42;
            --v41;
          }
          while (v41);
          goto LABEL_55;
        }
        break;
      case 4u:
        unsigned int v13 = v13 & 0xF | (16 * (v13 & 0xF));
        if (v3)
        {
          int v15 = 4 * (*result & 1);
          uint64_t v16 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 1));
          unsigned int v17 = (unsigned char *)(v3 + a2 - 1);
          int v18 = *result;
          do
          {
            int v19 = *v16 >> v15;
            BOOL v20 = v15 == 0;
            BOOL v21 = v15 == 0;
            *v17-- = v19 & 0xF | (16 * v19);
            uint64_t v22 = !v20;
            int v15 = 4 * v21;
            v16 -= v22;
            --v18;
          }
          while (v18);
          goto LABEL_55;
        }
        break;
      default:
LABEL_55:
        uint64_t v43 = v3;
LABEL_57:
        unsigned int v14 = 8;
        *((unsigned char *)result + 17) = 8;
        *((unsigned char *)result + 19) = 8;
        *((void *)result + 1) = v43;
        goto LABEL_58;
    }
    uint64_t v43 = 0;
    goto LABEL_57;
  }
  if (!a3 || *((unsigned char *)result + 16) != 2) {
    return result;
  }
  int v4 = *((unsigned __int8 *)result + 17);
  if (v4 == 16)
  {
    if (v3)
    {
      unsigned int v23 = a3[1];
      unsigned int v24 = a3[2];
      unsigned int v25 = a3[3];
      unsigned int v26 = (char *)(a2 + 8 * v3 - 1);
      int v27 = (char *)(*((void *)result + 1) + a2 - 3);
      int v28 = *result;
      do
      {
        if (v23 >> 8 == *(v27 - 3)
          && *(v27 - 2) == v23
          && v24 >> 8 == *(v27 - 1)
          && *v27 == v24
          && v25 >> 8 == v27[1]
          && v27[2] == v25)
        {
          char v29 = 0;
        }
        else
        {
          char v29 = -1;
        }
        *unsigned int v26 = v29;
        *(v26 - 1) = v29;
        *(v26 - 2) = v27[2];
        *(v26 - 3) = v27[1];
        *(v26 - 4) = *v27;
        *(v26 - 5) = *(v27 - 1);
        *(v26 - 6) = *(v27 - 2);
        *(v26 - 7) = *(v27 - 3);
        v26 -= 8;
        v27 -= 6;
        --v28;
      }
      while (v28);
    }
  }
  else if (v4 == 8 && v3)
  {
    unsigned int v5 = (char *)(a2 + 4 * v3 - 1);
    BOOL v6 = (char *)(a2 + *((void *)result + 1) - 1);
    int v7 = *((unsigned __int8 *)a3 + 6);
    int v8 = *((unsigned __int8 *)a3 + 4);
    int v9 = *((unsigned __int8 *)a3 + 2);
    int v10 = *result;
    do
    {
      if (*(v6 - 2) == v9 && *(v6 - 1) == v8 && *v6 == v7) {
        char v11 = 0;
      }
      else {
        char v11 = -1;
      }
      *unsigned int v5 = v11;
      *(v5 - 1) = *v6;
      *(v5 - 2) = *(v6 - 1);
      char v12 = *(v6 - 2);
      v6 -= 3;
      *(v5 - 3) = v12;
      v5 -= 4;
      --v10;
    }
    while (v10);
  }
  *((unsigned char *)result + 16) = 6;
  *((unsigned char *)result + 18) = 4;
  unsigned __int8 v30 = 4 * *((unsigned char *)result + 17);
  unsigned int v31 = v30;
LABEL_76:
  *((unsigned char *)result + 19) = v30;
  BOOL v55 = v31 >= 8;
  unint64_t v56 = (v30 * (unint64_t)v3 + 7) >> 3;
  unint64_t v57 = v3 * (unint64_t)(v30 >> 3);
  if (!v55) {
    unint64_t v57 = v56;
  }
  *((void *)result + 1) = v57;
  return result;
}

unsigned int *sub_1003A9E0C(unsigned int *result, uint64_t a2)
{
  unsigned int v2 = *((unsigned __int8 *)result + 17);
  if (v2 >= 8)
  {
    int v3 = *((unsigned __int8 *)result + 16);
    if ((v3 & 2) == 0)
    {
      uint64_t v4 = *result;
      int v5 = *result;
      if (v3 == 4)
      {
        if (v2 == 8)
        {
          if (v5)
          {
            int v9 = (unsigned char *)(a2 + 2 * v4 - 1);
            int v10 = &v9[2 * v4];
            do
            {
              *int v10 = *v9;
              *(v10 - 1) = *(v9 - 1);
              *(v10 - 2) = *(v9 - 1);
              *(v10 - 3) = *(v9 - 1);
              v10 -= 4;
              v9 -= 2;
              --v5;
            }
            while (v5);
          }
        }
        else if (v5)
        {
          unsigned int v13 = (unsigned char *)(a2 + 4 * v4 - 1);
          unsigned int v14 = &v13[4 * v4];
          do
          {
            *unsigned int v14 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *(v14 - 2) = *(v13 - 2);
            *(v14 - 3) = *(v13 - 3);
            *(v14 - 4) = *(v13 - 2);
            *(v14 - 5) = *(v13 - 3);
            *(v14 - 6) = *(v13 - 2);
            *(v14 - 7) = *(v13 - 3);
            v14 -= 8;
            v13 -= 4;
            --v5;
          }
          while (v5);
        }
      }
      else if (!*((unsigned char *)result + 16))
      {
        if (v2 == 8)
        {
          if (v5)
          {
            BOOL v6 = (char *)(a2 + v4 - 1);
            int v7 = &v6[2 * v4];
            do
            {
              *int v7 = *v6;
              *(v7 - 1) = *v6;
              char v8 = *v6--;
              *(v7 - 2) = v8;
              v7 -= 3;
              --v5;
            }
            while (v5);
          }
        }
        else if (v5)
        {
          char v11 = (unsigned char *)(a2 + 2 * v4 - 1);
          char v12 = &v11[4 * v4];
          do
          {
            *char v12 = *v11;
            *(v12 - 1) = *(v11 - 1);
            *(v12 - 2) = *v11;
            *(v12 - 3) = *(v11 - 1);
            *(v12 - 4) = *v11;
            *(v12 - 5) = *(v11 - 1);
            v12 -= 6;
            v11 -= 2;
            --v5;
          }
          while (v5);
        }
      }
      char v15 = *((unsigned char *)result + 18) + 2;
      *((unsigned char *)result + 18) = v15;
      *((unsigned char *)result + 16) |= 2u;
      unsigned __int8 v16 = *((unsigned char *)result + 17) * v15;
      *((unsigned char *)result + 19) = v16;
      unint64_t v17 = (v16 * (unint64_t)v4 + 7) >> 3;
      unint64_t v18 = v4 * (unint64_t)(v16 >> 3);
      if (v16 < 8u) {
        unint64_t v18 = v17;
      }
      *((void *)result + 1) = v18;
    }
  }
  return result;
}

uint64_t sub_1003A9FCC(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int8 *)(result + 613);
  if (v2 <= 7)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 1124) = 17;
    uint64_t v4 = a2 + 44;
    sub_1003A5BF4(result);
    *(unsigned char *)(v3 + 613) = 8;
    uint64_t result = sub_10039EE58(v4, v2, 8 - v2);
    if (result)
    {
      if (v2 > 3 || !sub_10039EE58(v4, v2, 4 - v2)) {
        sub_1003A34AC(v3, "PNG file corrupted by ASCII conversion");
      }
      sub_1003A34AC(v3, "Not a PNG file");
    }
    if (v2 <= 2) {
      *(_DWORD *)(v3 + 292) |= 0x1000u;
    }
  }
  return result;
}

uint64_t sub_1003AA094(uint64_t a1)
{
  *(_DWORD *)(a1 + 1124) = 33;
  sub_1003A5BF4(a1);
  uint64_t v2 = bswap32(v11);
  if ((v2 & 0x80000000) != 0) {
    sub_1003A34AC(a1, "PNG unsigned integer out of range");
  }
  *(_DWORD *)(a1 + 528) = bswap32(v12);
  sub_10039EEB8(a1);
  sub_10039EEEC(a1, (Bytef *)&v12, 4);
  unsigned int v3 = *(_DWORD *)(a1 + 528);
  BOOL v4 = v3 - 123 >= 0xFFFFFFC6 && v3 - 91 > 5;
  if (!v4
    || BYTE1(v3) - 123 < 0xFFFFFFC6
    || BYTE1(v3) - 91 < 6
    || BYTE2(v3) - 123 < 0xFFFFFFC6
    || BYTE2(v3) - 91 < 6
    || HIBYTE(v3) - 123 < 0xFFFFFFC6
    || HIBYTE(v3) - 91 < 6u)
  {
    sub_1003A3E44(a1, "invalid chunk type");
  }
  unint64_t v5 = *(void *)(a1 + 1056);
  if (v5 - 1 >= 0x7FFFFFFE) {
    unint64_t v5 = 0x7FFFFFFFLL;
  }
  if (v3 == 1229209940)
  {
    if (*(unsigned char *)(a1 + 604)) {
      int v6 = 6;
    }
    else {
      int v6 = 0;
    }
    unint64_t v7 = ((*(_DWORD *)(a1 + 496) * *(unsigned __int8 *)(a1 + 611)) << (*(unsigned __int8 *)(a1 + 608) > 8u))
       + v6
       + 1;
    unint64_t v8 = *(unsigned int *)(a1 + 500) * (unint64_t)v7;
    if ((v8 & 0xFFFFFFFF00000000) != 0) {
      unint64_t v8 = 0x7FFFFFFFLL;
    }
    if (v7 >= 0x7F36) {
      unint64_t v7 = 32566;
    }
    unint64_t v9 = 5 * (v8 / v7) + v8 + 11;
    if (v9 >= 0x7FFFFFFF) {
      unint64_t v9 = 0x7FFFFFFFLL;
    }
    if (v5 <= v9) {
      unint64_t v5 = v9;
    }
  }
  if (v5 < v2) {
    sub_1003A3E44(a1, "chunk data is too large");
  }
  *(_DWORD *)(a1 + 1124) = 65;
  return v2;
}

uint64_t sub_1003AA28C(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    unsigned int v3 = a2;
    if (a1)
    {
      do
      {
        if (v3 >= 0x400) {
          uint64_t v4 = 1024;
        }
        else {
          uint64_t v4 = v3;
        }
        v3 -= v4;
        sub_1003A5BF4(a1);
        sub_10039EEEC(a1, buf, v4);
      }
      while (v3);
    }
    else
    {
      unsigned int v5 = a2 - 1024;
      if (a2 < 0x400) {
        unsigned int v5 = 0;
      }
      if (a2 < 0x401) {
        goto LABEL_14;
      }
      unsigned int v6 = ((v5 + 1023) >> 10) + 1;
      unsigned int v3 = a2 - ((v6 & 0x7FFFFE) << 10);
      int v7 = v6 & 0x7FFFFE;
      do
        v7 -= 2;
      while (v7);
      if (v6 != (v6 & 0x7FFFFE))
      {
LABEL_14:
        unsigned int v8 = v3 + 1024;
        do
          v8 -= 1024;
        while (v8 >= 0x401);
      }
    }
  }
  int v9 = *(_DWORD *)(a1 + 528);
  int v10 = *(_DWORD *)(a1 + 296);
  *(_DWORD *)(a1 + 1124) = 129;
  sub_1003A5BF4(a1);
  if ((v9 & 0x20000000) != 0)
  {
    if ((~v10 & 0x300) == 0) {
      return 0;
    }
  }
  else if ((v10 & 0x800) != 0)
  {
    return 0;
  }
  if (bswap32(*(unsigned int *)buf) == *(_DWORD *)(a1 + 580)) {
    return 0;
  }
  int v12 = *(_DWORD *)(a1 + 296);
  if ((*(unsigned char *)(a1 + 531) & 0x20) != 0)
  {
    if ((v12 & 0x200) == 0) {
      goto LABEL_24;
    }
LABEL_26:
    sub_1003A3E44(a1, "CRC error");
  }
  if ((v12 & 0x400) == 0) {
    goto LABEL_26;
  }
LABEL_24:
  sub_1003A3D74(a1, "CRC error");
  return 1;
}

uint64_t sub_1003AA41C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if (v4) {
    sub_1003A3E44(a1, "out of place");
  }
  if (a3 != 13) {
    sub_1003A3E44(a1, "invalid");
  }
  *(_DWORD *)(a1 + 292) = v4 | 1;
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, buf, 13);
  sub_1003AA28C(a1, 0);
  unsigned int v6 = bswap32(*(unsigned int *)buf);
  if ((v6 & 0x80000000) != 0 || (unsigned int v7 = bswap32(v20), (v7 & 0x80000000) != 0)) {
    sub_1003A34AC(a1, "PNG unsigned integer out of range");
  }
  unsigned __int8 v8 = v21;
  unint64_t v9 = v22;
  unsigned __int8 v10 = v23;
  unsigned __int8 v11 = v24;
  unsigned __int8 v12 = v25;
  *(_DWORD *)(a1 + 496) = v6;
  *(_DWORD *)(a1 + 500) = v7;
  *(unsigned char *)(a1 + 608) = v8;
  *(unsigned char *)(a1 + 604) = v12;
  *(unsigned char *)(a1 + 607) = v9;
  *(unsigned char *)(a1 + 980) = v11;
  *(unsigned char *)(a1 + 1040) = v10;
  unint64_t v13 = 0x4010201030101uLL >> (8 * v9);
  if (v9 >= 7) {
    LOBYTE(v13) = 1;
  }
  *(unsigned char *)(a1 + 611) = v13;
  unsigned __int8 v14 = v13 * v8;
  *(unsigned char *)(a1 + 610) = v14;
  BOOL v15 = v14 >= 8u;
  unint64_t v16 = (v14 * (unint64_t)v6 + 7) >> 3;
  unint64_t v17 = v6 * (unint64_t)(v14 >> 3);
  if (!v15) {
    unint64_t v17 = v16;
  }
  *(void *)(a1 + 512) = v17;
  return sub_1003B025C(a1, a2, v6, v7, v8, v9, v12, v10, v11);
}

uint64_t sub_1003AA594(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 2) != 0) {
    sub_1003A3E44(a1, "duplicate");
  }
  if ((v4 & 4) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v7 = "out of place";
    goto LABEL_7;
  }
  *(_DWORD *)(a1 + 292) = v4 | 2;
  int v6 = *(unsigned __int8 *)(a1 + 607);
  if ((v6 & 2) != 0)
  {
    if (a3 > 0x300 || a3 % 3)
    {
      sub_1003AA28C(a1, a3);
      if (*(unsigned char *)(a1 + 607) == 3) {
        sub_1003A3E44(a1, "invalid");
      }
      unsigned int v7 = "invalid";
      goto LABEL_7;
    }
    if (v6 == 3)
    {
      if (1 << *(unsigned char *)(a1 + 608) >= (int)((unsigned __int16)a3 / 3u)) {
        int v10 = (unsigned __int16)a3 / 3u;
      }
      else {
        int v10 = 1 << *(unsigned char *)(a1 + 608);
      }
      if (v10 < 1) {
        goto LABEL_26;
      }
    }
    else
    {
      if ((unsigned __int16)a3 / 3u <= 0x100) {
        int v10 = (unsigned __int16)a3 / 3u;
      }
      else {
        int v10 = 256;
      }
      if (v10 < 1)
      {
LABEL_26:
        sub_1003AA28C(a1, -3 * v10 + a3);
        uint64_t result = (uint64_t)sub_1003B0798((unsigned char *)a1, a2, v17, v10);
        if (*(_WORD *)(a1 + 600))
        {
          *(_WORD *)(a1 + 600) = 0;
          if (!a2)
          {
            unint64_t v13 = "tRNS must be after";
            return sub_1003A4124(a1, v13);
          }
        }
        else
        {
          if (!a2) {
            return result;
          }
          int v14 = *(_DWORD *)(a2 + 8);
          if ((v14 & 0x10) == 0)
          {
            if ((v14 & 0x40) != 0) {
              goto LABEL_36;
            }
            goto LABEL_32;
          }
          *(_WORD *)(a1 + 600) = 0;
        }
        *(_WORD *)(a2 + 34) = 0;
        uint64_t result = sub_1003A4124(a1, "tRNS must be after");
        if ((*(_DWORD *)(a2 + 8) & 0x40) != 0)
        {
LABEL_36:
          uint64_t result = sub_1003A4124(a1, "hIST must be after");
          if ((*(unsigned char *)(a2 + 8) & 0x20) == 0) {
            return result;
          }
          goto LABEL_37;
        }
LABEL_32:
        if ((*(unsigned char *)(a2 + 8) & 0x20) == 0) {
          return result;
        }
LABEL_37:
        unint64_t v13 = "bKGD must be after";
        return sub_1003A4124(a1, v13);
      }
    }
    unsigned __int8 v11 = v17;
    int v12 = v10;
    do
    {
      sub_1003A5BF4(a1);
      sub_10039EEEC(a1, &buf, 3);
      *unsigned __int8 v11 = buf;
      *(_WORD *)(v11 + 1) = v16;
      v11 += 3;
      --v12;
    }
    while (v12);
    goto LABEL_26;
  }
  sub_1003AA28C(a1, a3);
  unsigned int v7 = "ignored in grayscale PNG";
LABEL_7:

  return sub_1003A4124(a1, v7);
}

uint64_t sub_1003AA878(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((~v4 & 5) != 0) {
    sub_1003A3E44(a1, "out of place");
  }
  *(_DWORD *)(a1 + 292) = v4 | 0x18;
  uint64_t result = sub_1003AA28C(a1, a3);
  if (a3)
  {
    return sub_1003A4124(a1, "invalid");
  }
  return result;
}

void sub_1003AA8FC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v5 = "out of place";
    uint64_t v6 = a1;
LABEL_5:
    sub_1003A4124(v6, v5);
    return;
  }
  if (a3 != 4)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v5 = "invalid";
    uint64_t v6 = a1;
    goto LABEL_5;
  }
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, buf, 4);
  if (!sub_1003AA28C(a1, 0))
  {
    int v8 = bswap32(*(unsigned int *)buf);
    if (v8 < 0) {
      int v9 = -1;
    }
    else {
      int v9 = v8;
    }
    sub_10039F968(a1, a1 + 1168, v9);
    sub_10039FABC((_OWORD *)a1, a2);
  }
}

uint64_t sub_1003AAA28(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    sub_1003AA28C(a1, a3);
    uint64_t v6 = "out of place";
LABEL_4:
    return sub_1003A4124(a1, v6);
  }
  if (a2 && (*(unsigned char *)(a2 + 8) & 2) != 0)
  {
    sub_1003AA28C(a1, a3);
    uint64_t v6 = "duplicate";
    goto LABEL_4;
  }
  int v9 = *(unsigned __int8 *)(a1 + 607);
  if (v9 == 3)
  {
    unsigned __int8 v10 = 8;
    if (a3 > 4) {
      goto LABEL_16;
    }
  }
  else
  {
    int v9 = *(unsigned __int8 *)(a1 + 611);
    unsigned __int8 v10 = *(unsigned char *)(a1 + 608);
    if (a3 > 4)
    {
LABEL_16:
      sub_1003A4124(a1, "invalid");
      return sub_1003AA28C(a1, a3);
    }
  }
  if (v9 != a3) {
    goto LABEL_16;
  }
  *(_DWORD *)Bytef buf = 16843009 * v10;
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, buf, a3);
  uint64_t result = sub_1003AA28C(a1, 0);
  if (!result)
  {
    if (!a3
      || (buf[0] - 1) < v10
      && (a3 == 1
       || (buf[1] - 1) < v10
       && (a3 == 2
        || (buf[2] - 1) < v10
        && (a3 == 3 || (buf[3] - 1) < v10))))
    {
      Bytef v11 = buf[0];
      if ((*(unsigned char *)(a1 + 607) & 2) != 0)
      {
        int v12 = &buf[3];
        Bytef v13 = buf[1];
        Bytef v14 = buf[2];
      }
      else
      {
        int v12 = &buf[1];
        *(unsigned char *)(a1 + 723) = buf[0];
        Bytef v13 = v11;
        Bytef v14 = v11;
      }
      Bytef v15 = *v12;
      *(unsigned char *)(a1 + 720) = v11;
      *(unsigned char *)(a1 + 721) = v13;
      *(unsigned char *)(a1 + 722) = v14;
      *(unsigned char *)(a1 + 724) = v15;
      return sub_1003B08D0(a1, a2, a1 + 720);
    }
    else
    {
      return sub_1003A4124(a1, "invalid");
    }
  }
  return result;
}

void sub_1003AACA4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v5 = "out of place";
    uint64_t v6 = a1;
LABEL_5:
    sub_1003A4124(v6, v5);
    return;
  }
  if (a3 != 32)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v5 = "invalid";
    uint64_t v6 = a1;
    goto LABEL_5;
  }
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, buf, 32);
  if (!sub_1003AA28C(a1, 0))
  {
    int v8 = bswap32(*(unsigned int *)buf);
    if (v8 < 0) {
      int v9 = -1;
    }
    else {
      int v9 = v8;
    }
    int v10 = bswap32(v28);
    if (v10 < 0) {
      int v11 = -1;
    }
    else {
      int v11 = v10;
    }
    v26[6] = v9;
    v26[7] = v11;
    int v12 = bswap32(v29);
    if (v12 < 0) {
      int v13 = -1;
    }
    else {
      int v13 = v12;
    }
    int v14 = bswap32(v30);
    if (v14 < 0) {
      int v15 = -1;
    }
    else {
      int v15 = v14;
    }
    v26[0] = v13;
    v26[1] = v15;
    int v16 = bswap32(v31);
    if (v16 < 0) {
      int v17 = -1;
    }
    else {
      int v17 = v16;
    }
    int v18 = bswap32(v32);
    if (v18 < 0) {
      int v19 = -1;
    }
    else {
      int v19 = v18;
    }
    v26[2] = v17;
    v26[3] = v19;
    int v20 = bswap32(v33);
    if (v20 < 0) {
      int v21 = -1;
    }
    else {
      int v21 = v20;
    }
    int v22 = bswap32(v34);
    if (v22 < 0) {
      int v23 = -1;
    }
    else {
      int v23 = v22;
    }
    v26[4] = v21;
    v26[5] = v23;
    if (v8 < 0 || v10 < 0 || v12 < 0 || v14 < 0 || v16 < 0 || v18 < 0 || v20 < 0 || v22 < 0)
    {
      unsigned __int8 v25 = "invalid values";
    }
    else
    {
      int v24 = *(__int16 *)(a1 + 1242);
      if (v24 < 0) {
        return;
      }
      if ((v24 & 0x10) == 0)
      {
        *(_WORD *)(a1 + 1242) = v24 | 0x10;
        sub_10039FB98(a1, a1 + 1168, (uint64_t)v26, 1);
        sub_10039FABC((_OWORD *)a1, a2);
        return;
      }
      *(_WORD *)(a1 + 1242) = v24 | 0x8000;
      sub_10039FABC((_OWORD *)a1, a2);
      unsigned __int8 v25 = "duplicate";
    }
    sub_1003A4124(a1, v25);
  }
}

void sub_1003AAF00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v5 = "out of place";
    uint64_t v6 = a1;
LABEL_5:
    sub_1003A4124(v6, v5);
    return;
  }
  if (a3 != 1)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v5 = "invalid";
    uint64_t v6 = a1;
    goto LABEL_5;
  }
  Bytef buf = 0;
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, &buf, 1);
  if (!sub_1003AA28C(a1, 0))
  {
    int v8 = *(__int16 *)(a1 + 1242);
    if ((v8 & 0x80000000) == 0)
    {
      if ((v8 & 4) != 0)
      {
        *(_WORD *)(a1 + 1242) = v8 | 0x8000;
        sub_10039FABC((_OWORD *)a1, a2);
        sub_1003A4124(a1, "too many profiles");
      }
      else
      {
        sub_1003A062C(a1, a1 + 1168, buf);
        sub_10039FABC((_OWORD *)a1, a2);
      }
    }
  }
}

void sub_1003AB068(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v35 = a3;
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 6) != 0)
  {
    sub_1003AA28C(a1, a3);
    uint64_t v6 = "out of place";
LABEL_6:
    sub_1003A4124(a1, v6);
    return;
  }
  if (a3 <= 0xD)
  {
    sub_1003AA28C(a1, a3);
    uint64_t v6 = "too short";
    goto LABEL_6;
  }
  int v7 = *(__int16 *)(a1 + 1242);
  if ((v7 & 0x80000000) == 0)
  {
    if ((v7 & 4) != 0)
    {
      int v12 = "too many profiles";
LABEL_32:
      sub_1003AA28C(a1, v35);
LABEL_33:
      *(_WORD *)(a1 + 1242) |= 0x8000u;
      sub_10039FABC((_OWORD *)a1, a2);
      if (!v12) {
        return;
      }
      uint64_t v11 = a1;
      int v10 = v12;
      goto LABEL_35;
    }
    if (a3 >= 0x51) {
      uint64_t v9 = 81;
    }
    else {
      uint64_t v9 = a3;
    }
    sub_1003A5BF4(a1);
    sub_10039EEEC(a1, __src, v9);
    unsigned int v35 = a3 - v9;
    if (a3 - v9 < 0xB)
    {
      sub_1003AA28C(a1, a3 - v9);
      int v10 = "too short";
      uint64_t v11 = a1;
LABEL_35:
      sub_1003A4124(v11, v10);
      return;
    }
    uint64_t v13 = 0;
    if (a3 >= 0x50) {
      uint64_t v14 = 80;
    }
    else {
      uint64_t v14 = a3;
    }
    while (__src[v13])
    {
      if (v14 == ++v13) {
        goto LABEL_27;
      }
    }
    LODWORD(v14) = v13;
LABEL_27:
    if ((v14 - 1) > 0x4E)
    {
      int v12 = "bad keyword";
      goto LABEL_32;
    }
    size_t v15 = v14 + 1;
    if (v15 >= v9 || __src[v15])
    {
      int v12 = "bad compression method";
      goto LABEL_32;
    }
    if (sub_1003AB5E4(a1, 1766015824))
    {
      int v12 = *(const char **)(a1 + 360);
      goto LABEL_32;
    }
    uint64_t v16 = (v14 + 2);
    int v45 = 0;
    long long v44 = 0u;
    long long v43 = 0u;
    long long v42 = 0u;
    long long v41 = 0u;
    long long v40 = 0u;
    long long v39 = 0u;
    long long v38 = 0u;
    long long v37 = 0u;
    unint64_t v34 = 132;
    *(void *)(a1 + 312) = &__src[v16];
    *(_DWORD *)(a1 + 320) = v9 - v16;
    sub_1003AB760(a1, v36, &v35, (uint64_t)&v37, (uint64_t *)&v34, 0);
    if (v34) {
      goto LABEL_40;
    }
    unint64_t v17 = bswap32(v37);
    if (!sub_1003A0BB4(a1, a1 + 1168, __src, v17)
      || !sub_1003A0C1C(a1, a1 + 1168, __src, v17, (uint64_t)&v37, *(unsigned char *)(a1 + 607)))
    {
      goto LABEL_49;
    }
    int v18 = v45;
    int v19 = BYTE1(v45);
    int v20 = BYTE2(v45);
    unsigned int v21 = HIBYTE(v45);
    int v22 = sub_1003AB914(a1, v17, 2);
    if (!v22)
    {
      int v12 = "out of memory";
      goto LABEL_50;
    }
    *int v22 = v37;
    long long v23 = v38;
    long long v24 = v39;
    long long v25 = v41;
    v22[3] = v40;
    v22[4] = v25;
    v22[1] = v23;
    v22[2] = v24;
    long long v26 = v42;
    long long v27 = v43;
    long long v28 = v44;
    *((_DWORD *)v22 + 32) = v45;
    v22[6] = v27;
    v22[7] = v28;
    v22[5] = v26;
    uint64_t v29 = 12 * ((v18 << 24) | (v19 << 16) | (v20 << 8) | v21);
    unsigned int v33 = (unsigned int *)v22;
    unint64_t v34 = v29;
    unsigned int v30 = (char *)v22 + 132;
    sub_1003AB760(a1, v36, &v35, (uint64_t)v22 + 132, (uint64_t *)&v34, 0);
    if (v34) {
      goto LABEL_40;
    }
    if (!sub_1003A0F4C(a1, a1 + 1168, __src, v17, (uint64_t)v33))
    {
LABEL_49:
      int v12 = 0;
      goto LABEL_50;
    }
    unint64_t v34 = v17 - v29 - 132;
    sub_1003AB760(a1, v36, &v35, (uint64_t)&v30[v29], (uint64_t *)&v34, 1);
    unsigned int v31 = v35;
    if (v35)
    {
      if ((*(unsigned char *)(a1 + 298) & 0x10) == 0)
      {
        int v12 = "extra compressed data";
        goto LABEL_50;
      }
      if (!v34)
      {
        sub_1003A3D74(a1, "extra compressed data");
        goto LABEL_56;
      }
    }
    else if (!v34)
    {
LABEL_56:
      sub_1003AA28C(a1, v31);
      sub_1003A1050(a1, a1 + 1168, v33, *(void *)(a1 + 408));
      if (a2)
      {
        sub_10039F410(a1, a2, 0x10u, 0);
        unsigned int v32 = sub_1003A47DC(a1, v15);
        *(void *)(a2 + 128) = v32;
        if (!v32)
        {
          *(_WORD *)(a1 + 1242) |= 0x8000u;
          sub_10039FABC((_OWORD *)a1, a2);
          *(_DWORD *)(a1 + 304) = 0;
          int v12 = "out of memory";
          goto LABEL_33;
        }
        memcpy(v32, __src, v15);
        *(_DWORD *)(a2 + 144) = v17;
        *(void *)(a2 + 136) = v33;
        *(void *)(a1 + 1104) = 0;
        *(_DWORD *)(a2 + 300) |= 0x10u;
        *(_DWORD *)(a2 + 8) |= 0x1000u;
        sub_10039FABC((_OWORD *)a1, a2);
      }
      *(_DWORD *)(a1 + 304) = 0;
      return;
    }
LABEL_40:
    int v12 = *(const char **)(a1 + 360);
LABEL_50:
    *(_DWORD *)(a1 + 304) = 0;
    goto LABEL_32;
  }

  sub_1003AA28C(a1, a3);
}

uint64_t sub_1003AB5E4(uint64_t a1, int a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 304);
  if (v4)
  {
    *(_DWORD *)int v8 = bswap32(v4);
    sub_1003A3544((uint64_t)v8, 0x40uLL, 4uLL, " using zstream");
    sub_1003A3D74(a1, v8);
    *(_DWORD *)(a1 + 304) = 0;
  }
  if ((*(_DWORD *)(a1 + 896) & 0xC) == 0xC) {
    int v5 = 15;
  }
  else {
    int v5 = 0;
  }
  *(unsigned char *)(a1 + 616) = (*(_DWORD *)(a1 + 896) & 0xC) != 12;
  *(void *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  if ((*(unsigned char *)(a1 + 296) & 2) != 0)
  {
    uint64_t v6 = inflateReset2((z_streamp)(a1 + 312), v5);
    if ((~*(_DWORD *)(a1 + 896) & 0x300) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = inflateInit2_((z_streamp)(a1 + 312), v5, "1.2.12", 112);
    if (v6)
    {
      if ((~*(_DWORD *)(a1 + 896) & 0x300) != 0) {
        goto LABEL_9;
      }
LABEL_15:
      uint64_t v6 = inflateValidate((z_streamp)(a1 + 312), 0);
      if (v6) {
        goto LABEL_10;
      }
LABEL_16:
      *(_DWORD *)(a1 + 304) = a2;
      return v6;
    }
    *(_DWORD *)(a1 + 296) |= 2u;
    if ((~*(_DWORD *)(a1 + 896) & 0x300) == 0) {
      goto LABEL_15;
    }
  }
LABEL_9:
  if (!v6) {
    goto LABEL_16;
  }
LABEL_10:
  sub_10039F92C(a1, v6);
  return v6;
}

uint64_t sub_1003AB760(uint64_t result, Bytef *a2, unsigned int *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v6 = result;
  if (*(_DWORD *)(result + 304) != *(_DWORD *)(result + 528))
  {
    *(void *)(result + 360) = "zstream unclaimed";
    return result;
  }
  int v10 = (char **)(result + 312);
  *(void *)(result + 336) = a4;
  *(_DWORD *)(result + 344) = 0;
  if (a6) {
    int v11 = 4;
  }
  else {
    int v11 = 2;
  }
  unsigned int v12 = 1024;
  while (1)
  {
    LODWORD(v13) = *(_DWORD *)(v6 + 320);
    if (v13)
    {
      LODWORD(v14) = *(_DWORD *)(v6 + 344);
      if (v14) {
        goto LABEL_8;
      }
LABEL_27:
      if ((unint64_t)*a5 >= 0xFFFFFFFF) {
        uint64_t v14 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v14 = *a5;
      }
      *a5 -= v14;
      *(_DWORD *)(v6 + 344) = v14;
      goto LABEL_8;
    }
    unsigned int v18 = *a3;
    if (v12 >= *a3) {
      uint64_t v13 = v18;
    }
    else {
      uint64_t v13 = v12;
    }
    *a3 = v18 - v13;
    if (v13)
    {
      sub_1003A5BF4(v6);
      sub_10039EEEC(v6, a2, v13);
    }
    *(void *)(v6 + 312) = a2;
    *(_DWORD *)(v6 + 320) = v13;
    unsigned int v12 = v13;
    LODWORD(v14) = *(_DWORD *)(v6 + 344);
    if (!v14) {
      goto LABEL_27;
    }
LABEL_8:
    int v15 = *a3 ? 0 : v11;
    if (*(unsigned char *)(v6 + 616) && v13 != 0) {
      break;
    }
LABEL_17:
    int v17 = inflate((z_streamp)(v6 + 312), v15);
    if (v17)
    {
      int v19 = v17;
      LODWORD(v14) = *(_DWORD *)(v6 + 344);
      goto LABEL_34;
    }
    if (!*a5)
    {
      LODWORD(v14) = *(_DWORD *)(v6 + 344);
      if (!v14)
      {
        int v19 = 0;
        goto LABEL_34;
      }
    }
  }
  if ((**v10 & 0x80000000) == 0)
  {
    *(unsigned char *)(v6 + 616) = 0;
    goto LABEL_17;
  }
  *(void *)(v6 + 360) = "invalid window size (libpng)";
  int v19 = -3;
LABEL_34:
  *a5 += v14;
  *(_DWORD *)(v6 + 344) = 0;

  return sub_10039F92C(v6, v19);
}

void *sub_1003AB914(uint64_t a1, size_t __size, int a3)
{
  uint64_t v6 = *(void **)(a1 + 1104);
  if (v6)
  {
    if (*(void *)(a1 + 1112) >= __size) {
      return v6;
    }
    *(void *)(a1 + 1104) = 0;
    *(void *)(a1 + 1112) = 0;
    sub_1003A46CC(a1, v6);
  }
  int v7 = sub_1003A47DC(a1, __size);
  if (v7)
  {
    uint64_t v6 = v7;
    bzero(v7, __size);
    *(void *)(a1 + 1104) = v6;
    *(void *)(a1 + 1112) = __size;
    return v6;
  }
  if (a3 <= 1)
  {
    if (!a3) {
      sub_1003A3E44(a1, "insufficient memory to read chunk");
    }
    sub_1003A3D74(a1, "insufficient memory to read chunk");
  }
  return 0;
}

void sub_1003AB9CC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 1052);
  if (v6)
  {
    int v7 = v6 - 1;
    if (!v7)
    {
LABEL_5:
      sub_1003AA28C(a1, a3);
      return;
    }
    *(_DWORD *)(a1 + 1052) = v7;
    if (v7 == 1)
    {
      sub_1003A3704(a1, (uint64_t)"No space in chunk cache for sPLT");
      goto LABEL_5;
    }
  }
  int v8 = *(_DWORD *)(a1 + 292);
  if ((v8 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v8 & 4) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v12 = "out of place";
    goto LABEL_28;
  }
  unint64_t v9 = a3 + 1;
  int v10 = *(unsigned __int8 **)(a1 + 1104);
  if (!v10)
  {
LABEL_13:
    int v11 = (unsigned __int8 *)sub_1003A47DC(a1, a3 + 1);
    if (v11)
    {
      int v10 = v11;
      bzero(v11, a3 + 1);
      *(void *)(a1 + 1104) = v10;
      *(void *)(a1 + 1112) = v9;
      goto LABEL_15;
    }
    sub_1003AA28C(a1, a3);
    unsigned int v12 = "out of memory";
LABEL_28:
    sub_1003A4124(a1, v12);
    return;
  }
  if (*(void *)(a1 + 1112) < v9)
  {
    *(void *)(a1 + 1104) = 0;
    *(void *)(a1 + 1112) = 0;
    sub_1003A46CC(a1, v10);
    goto LABEL_13;
  }
LABEL_15:
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, v10, a3);
  if (sub_1003AA28C(a1, 0)) {
    return;
  }
  long long v25 = 0u;
  *(_OWORD *)long long v26 = 0u;
  v10[a3] = 0;
  uint64_t v13 = v10;
  do
    uint64_t v14 = v13;
  while (*v13++);
  if (a3 < 2 || v13 > &v10[a3 - 2])
  {
    int v19 = "malformed sPLT chunk";
    goto LABEL_32;
  }
  BYTE8(v25) = v14[1];
  if (BYTE8(v25) == 8) {
    unsigned int v16 = 6;
  }
  else {
    unsigned int v16 = 10;
  }
  unsigned int v17 = v10 - v14 + a3 - 2;
  uint64_t v18 = v17 / v16;
  if (v17 % v16)
  {
    int v19 = "sPLT chunk has bad length";
LABEL_32:
    sub_1003A3704(a1, (uint64_t)v19);
    return;
  }
  LODWORD(v26[1]) = v17 / v16;
  int v20 = sub_1003A49AC((void *)a1, 10 * (v17 / v16));
  v26[0] = v20;
  if (!v20)
  {
    int v19 = "sPLT chunk requires too much memory";
    goto LABEL_32;
  }
  if (v16 <= v17)
  {
    if (BYTE8(v25) == 8)
    {
      unsigned int v21 = (_WORD *)v20 + 2;
      uint64_t v22 = 1;
      do
      {
        *(v21 - 2) = v13[v22];
        *(v21 - 1) = v13[v22 + 1];
        _WORD *v21 = v13[v22 + 2];
        v21[1] = v13[v22 + 3];
        v21[2] = bswap32(*(unsigned __int16 *)&v13[v22 + 4]) >> 16;
        v21 += 5;
        v22 += 6;
        --v18;
      }
      while (v18);
    }
    else
    {
      uint64_t v23 = 0;
      do
      {
        long long v24 = (_WORD *)((char *)v20 + v23);
        *long long v24 = bswap32(*(unsigned __int16 *)&v13[v23 + 1]) >> 16;
        v24[1] = bswap32(*(unsigned __int16 *)&v13[v23 + 3]) >> 16;
        v24[2] = bswap32(*(unsigned __int16 *)&v13[v23 + 5]) >> 16;
        v24[3] = bswap32(*(unsigned __int16 *)&v13[v23 + 7]) >> 16;
        v24[4] = bswap32(*(unsigned __int16 *)&v13[v23 + 9]) >> 16;
        v23 += 10;
      }
      while (10 * v18 != v23);
    }
  }
  *(void *)&long long v25 = v10;
  sub_1003B0E00(a1, a2, (uint64_t)&v25, 1);
  sub_1003A46CC(a1, v26[0]);
}

void sub_1003ABD34(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0) {
    goto LABEL_13;
  }
  if (a2 && (*(unsigned char *)(a2 + 8) & 0x10) != 0)
  {
    sub_1003AA28C(a1, a3);
    int v8 = "duplicate";
    goto LABEL_14;
  }
  int v7 = *(unsigned __int8 *)(a1 + 607);
  if (v7 == 3)
  {
    if ((v4 & 2) != 0)
    {
      if (a3 > 0x100 || a3 - 1 >= *(unsigned __int16 *)(a1 + 592))
      {
        sub_1003AA28C(a1, a3);
        int v8 = "invalid";
        goto LABEL_14;
      }
      sub_1003A5BF4(a1);
      sub_10039EEEC(a1, buf, a3);
      *(_WORD *)(a1 + 600) = a3;
      if (sub_1003AA28C(a1, 0)) {
        goto LABEL_19;
      }
LABEL_25:
      sub_1003B0CB4((void *)a1, a2, buf, *(unsigned __int16 *)(a1 + 600), a1 + 744);
      return;
    }
LABEL_13:
    sub_1003AA28C(a1, a3);
    int v8 = "out of place";
    goto LABEL_14;
  }
  if (v7 == 2)
  {
    if (a3 != 6) {
      goto LABEL_21;
    }
    sub_1003A5BF4(a1);
    sub_10039EEEC(a1, buf, 6);
    *(_WORD *)(a1 + 600) = 1;
    *(_WORD *)(a1 + 746) = bswap32(*(unsigned __int16 *)buf) >> 16;
    *(_WORD *)(a1 + 748) = bswap32(v10) >> 16;
    *(_WORD *)(a1 + 750) = bswap32(v11) >> 16;
    if (sub_1003AA28C(a1, 0)) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
  if (!*(unsigned char *)(a1 + 607))
  {
    if (a3 == 2)
    {
      sub_1003A5BF4(a1);
      sub_10039EEEC(a1, buf, 2);
      *(_WORD *)(a1 + 600) = 1;
      *(_WORD *)(a1 + 752) = bswap32(*(unsigned __int16 *)buf) >> 16;
      if (!sub_1003AA28C(a1, 0)) {
        goto LABEL_25;
      }
LABEL_19:
      *(_WORD *)(a1 + 600) = 0;
      return;
    }
LABEL_21:
    sub_1003AA28C(a1, a3);
    sub_1003A4124(a1, "invalid");
    return;
  }
  sub_1003AA28C(a1, a3);
  int v8 = "invalid with alpha channel";
LABEL_14:

  sub_1003A4124(a1, v8);
}

uint64_t sub_1003AC050(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 4) == 0)
  {
    int v6 = *(unsigned __int8 *)(a1 + 607);
    if ((v4 & 2) != 0 || v6 != 3)
    {
      if (a2 && (*(unsigned char *)(a2 + 8) & 0x20) != 0)
      {
        sub_1003AA28C(a1, a3);
        int v7 = "duplicate";
        goto LABEL_6;
      }
      if ((v6 & 2) != 0) {
        int v9 = 6;
      }
      else {
        int v9 = 2;
      }
      if (v6 == 3) {
        int v10 = 1;
      }
      else {
        int v10 = v9;
      }
      if (v10 != a3)
      {
        sub_1003AA28C(a1, a3);
        int v7 = "invalid";
        goto LABEL_6;
      }
      __int16 v16 = 0;
      uint64_t v15 = 0;
      uint64_t v11 = a3;
      sub_1003A5BF4(a1);
      sub_10039EEEC(a1, buf, v11);
      uint64_t result = sub_1003AA28C(a1, 0);
      if (result) {
        return result;
      }
      int v12 = *(unsigned __int8 *)(a1 + 607);
      if (v12 == 3)
      {
        LOBYTE(v15) = buf[0];
        if (!a2 || !*(_WORD *)(a2 + 32))
        {
          HIWORD(v15) = 0;
          *(_DWORD *)((char *)&v15 + 2) = 0;
LABEL_32:
          __int16 v16 = 0;
          return sub_1003B0064(a1, a2, (uint64_t)&v15);
        }
        if (*(unsigned __int16 *)(a2 + 32) <= buf[0]) {
          return sub_1003A4124(a1, "invalid index");
        }
        uint64_t v13 = (unsigned __int8 *)(*(void *)(a1 + 584) + 3 * buf[0]);
        WORD1(v15) = *v13;
        WORD2(v15) = v13[1];
        LOWORD(v13) = v13[2];
      }
      else
      {
        LOBYTE(v15) = 0;
        unsigned int v14 = bswap32(*(unsigned __int16 *)buf) >> 16;
        if ((v12 & 2) == 0)
        {
          __int16 v16 = v14;
          HIWORD(v15) = v14;
          WORD2(v15) = v14;
          WORD1(v15) = v14;
          return sub_1003B0064(a1, a2, (uint64_t)&v15);
        }
        WORD1(v15) = v14;
        WORD2(v15) = bswap32(v18) >> 16;
        LODWORD(v13) = bswap32(v19) >> 16;
      }
      HIWORD(v15) = (_WORD)v13;
      goto LABEL_32;
    }
  }
  sub_1003AA28C(a1, a3);
  int v7 = "out of place";
LABEL_6:

  return sub_1003A4124(a1, v7);
}

void sub_1003AC274(uint64_t a1, uint64_t a2, size_t __size)
{
  if ((*(unsigned char *)(a1 + 292) & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  unsigned int v4 = __size;
  if (__size <= 1)
  {
    sub_1003AA28C(a1, __size);
    int v5 = "too short";
LABEL_15:
    sub_1003A4124(a1, v5);
    return;
  }
  if (!a2 || (*(unsigned char *)(a2 + 10) & 1) != 0)
  {
    sub_1003AA28C(a1, __size);
    int v5 = "duplicate";
    goto LABEL_15;
  }
  *(_DWORD *)(a2 + 300) |= 0x8000u;
  int v7 = sub_1003A49AC((void *)a1, __size);
  *(void *)(a2 + 248) = v7;
  if (!v7)
  {
    sub_1003AA28C(a1, v4);
    int v5 = "out of memory";
    goto LABEL_15;
  }
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, &buf, 1);
  **(unsigned char **)(a2 + 248) = buf;
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, &buf, 1);
  int v8 = buf;
  *(unsigned char *)(*(void *)(a2 + 248) + 1) = buf;
  if ((v8 | 4) != 0x4D && **(unsigned __int8 **)(a2 + 248) != v8)
  {
    sub_1003AA28C(a1, v4);
    sub_1003A4124(a1, "incorrect byte-order specifier");
    goto LABEL_21;
  }
  if (v4 != 2)
  {
    for (uint64_t i = 2; i != v4; *(unsigned char *)(*(void *)(a2 + 248) + i++) = buf)
    {
      sub_1003A5BF4(a1);
      sub_10039EEEC(a1, &buf, 1);
    }
  }
  if (!sub_1003AA28C(a1, 0))
  {
    sub_1003B0090((void *)a1, a2, v4, *(void *)(a2 + 248));
LABEL_21:
    sub_1003A46CC(a1, *(void **)(a2 + 248));
    *(void *)(a2 + 248) = 0;
  }
}

void *sub_1003AC498(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((*(_DWORD *)(a1 + 292) & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((*(_DWORD *)(a1 + 292) & 6) == 2)
  {
    if (a2 && (*(unsigned char *)(a2 + 8) & 0x40) != 0)
    {
      sub_1003AA28C(a1, a3);
      int v9 = "duplicate";
    }
    else
    {
      if (a3 <= 0x201)
      {
        unsigned int v5 = a3 >> 1;
        if (a3 >> 1 == *(unsigned __int16 *)(a1 + 592))
        {
          if (a3 >= 2)
          {
            if (v5 <= 1) {
              uint64_t v6 = 1;
            }
            else {
              uint64_t v6 = v5;
            }
            int v7 = v11;
            do
            {
              sub_1003A5BF4(a1);
              sub_10039EEEC(a1, buf, 2);
              *v7++ = bswap32(*(unsigned __int16 *)buf) >> 16;
              --v6;
            }
            while (v6);
          }
          uint64_t result = (void *)sub_1003AA28C(a1, 0);
          if (!result) {
            return sub_1003B0168((void *)a1, a2, v11);
          }
          return result;
        }
      }
      sub_1003AA28C(a1, a3);
      int v9 = "invalid";
    }
  }
  else
  {
    sub_1003AA28C(a1, a3);
    int v9 = "out of place";
  }

  return (void *)sub_1003A4124(a1, v9);
}

uint64_t sub_1003AC66C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0)
  {
    sub_1003AA28C(a1, a3);
    int v7 = "out of place";
    uint64_t v8 = a1;
    return sub_1003A4124(v8, v7);
  }
  if (a2 && (*(unsigned char *)(a2 + 8) & 0x80) != 0)
  {
    sub_1003AA28C(a1, a3);
    int v7 = "duplicate";
    uint64_t v8 = a1;
    return sub_1003A4124(v8, v7);
  }
  if (a3 != 9)
  {
    sub_1003AA28C(a1, a3);
    int v7 = "invalid";
    uint64_t v8 = a1;
    return sub_1003A4124(v8, v7);
  }
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, buf, 9);
  uint64_t result = sub_1003AA28C(a1, 0);
  if (!result) {
    return sub_1003B0778(a1, a2, bswap32(*(unsigned int *)buf), bswap32(v10), v11);
  }
  return result;
}

uint64_t sub_1003AC834(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v10 = "out of place";
    uint64_t v11 = a1;
    return sub_1003A4124(v11, v10);
  }
  if (a2 && (*(unsigned char *)(a2 + 9) & 1) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v10 = "duplicate";
    uint64_t v11 = a1;
    return sub_1003A4124(v11, v10);
  }
  if (a3 != 9)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v10 = "invalid";
    uint64_t v11 = a1;
    return sub_1003A4124(v11, v10);
  }
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, (Bytef *)&buf, 9);
  uint64_t result = sub_1003AA28C(a1, 0);
  if (result) {
    return result;
  }
  if ((char)buf < 0)
  {
    int v7 = -((2147418112 * BYTE1(buf) - ((buf << 24) | (BYTE2(buf) << 8) | HIBYTE(buf))) & 0x7FFFFFFF);
    int v8 = v13;
    if (((char)v13 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_20:
    int v9 = -((2147418112 * v14 - ((v8 << 24) | (v15 << 8) | v16)) & 0x7FFFFFFF);
    return sub_1003B0330(a1, a2, v7, v9, v17);
  }
  int v7 = _byteswap_ulong(buf);
  int v8 = v13;
  if ((char)v13 < 0) {
    goto LABEL_20;
  }
LABEL_9:
  int v9 = (v8 << 24) | (v14 << 16) | (v15 << 8) | v16;
  return sub_1003B0330(a1, a2, v7, v9, v17);
}

void sub_1003ACAA4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v10 = "out of place";
LABEL_32:
    sub_1003A4124(a1, v10);
    return;
  }
  if (a2 && (*(unsigned char *)(a2 + 9) & 4) != 0)
  {
    sub_1003AA28C(a1, a3);
    unsigned int v10 = "duplicate";
    goto LABEL_32;
  }
  unint64_t v7 = a3 + 1;
  int v8 = *(char **)(a1 + 1104);
  if (v8)
  {
    if (*(void *)(a1 + 1112) >= v7) {
      goto LABEL_10;
    }
    *(void *)(a1 + 1104) = 0;
    *(void *)(a1 + 1112) = 0;
    sub_1003A46CC(a1, v8);
  }
  int v9 = (char *)sub_1003A47DC(a1, a3 + 1);
  if (!v9)
  {
    sub_1003AA28C(a1, a3);
    goto LABEL_19;
  }
  int v8 = v9;
  bzero(v9, a3 + 1);
  *(void *)(a1 + 1104) = v8;
  *(void *)(a1 + 1112) = v7;
LABEL_10:
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, (Bytef *)v8, a3);
  if (sub_1003AA28C(a1, 0)) {
    return;
  }
  uint64_t v11 = 0;
  int v12 = &v8[a3];
  *int v12 = 0;
  while (v8[v11++])
    ;
  if (a3 - v11 + 1 <= 12)
  {
    unsigned int v10 = "invalid";
    goto LABEL_32;
  }
  unsigned __int8 v14 = &v8[v11];
  if (v8[v11] < 0)
  {
    int v15 = -((2147418112 * v8[v11 + 1]
           - ((v8[v11] << 24) | (v8[v11 + 2] << 8) | v8[v11 + 3])) & 0x7FFFFFFF);
    unsigned __int8 v16 = (unsigned __int8 *)&v8[v11];
    int v17 = v8[v11 + 4];
    if ((v8[v11 + 4] & 0x80000000) == 0)
    {
LABEL_22:
      int v18 = (v17 << 24) | (v16[5] << 16) | (v16[6] << 8) | v16[7];
      unsigned __int16 v19 = &v8[v11];
      unsigned int v20 = v19[8];
      uint64_t v21 = v19[9];
      if (v19[8]) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  else
  {
    int v15 = _byteswap_ulong(*(_DWORD *)&v8[v11]);
    unsigned __int8 v16 = (unsigned __int8 *)&v8[v11];
    int v17 = v8[v11 + 4];
    if ((v8[v11 + 4] & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  int v18 = -((2147418112 * v16[5] - ((v17 << 24) | (v16[6] << 8) | v16[7])) & 0x7FFFFFFF);
  unsigned __int16 v19 = &v8[v11];
  unsigned int v20 = v19[8];
  uint64_t v21 = v19[9];
  if (v19[8]) {
    goto LABEL_27;
  }
LABEL_26:
  if (v21 != 2)
  {
LABEL_31:
    unsigned int v10 = "invalid parameter count";
    goto LABEL_32;
  }
LABEL_27:
  if (v20 - 1 <= 1 && v21 != 3 || v20 == 3 && v21 != 4) {
    goto LABEL_31;
  }
  uint64_t v22 = v14 + 9;
  long long v27 = v19 + 10;
  if (v20 >= 4) {
    sub_1003A4124(a1, "unrecognized equation type");
  }
  while (*++v22)
    ;
  long long v24 = sub_1003A49AC((void *)a1, 8 * v21);
  if (!v24)
  {
LABEL_19:
    unsigned int v10 = "out of memory";
    goto LABEL_32;
  }
  long long v25 = v24;
  if (v21)
  {
    uint64_t v26 = 0;
    while (1)
    {
      v24[v26] = ++v22;
      if (v22 > v12) {
        break;
      }
      while (*v22)
      {
        if (++v22 > v12) {
          goto LABEL_49;
        }
      }
      if (++v26 == v21) {
        goto LABEL_46;
      }
    }
LABEL_49:
    sub_1003A46CC(a1, v24);
    unsigned int v10 = "invalid data";
    goto LABEL_32;
  }
LABEL_46:
  sub_1003B0350((void *)a1, a2, v8, v15, v18, v20, v21, v27, (const char **)v24);

  sub_1003A46CC(a1, v25);
}

void *sub_1003ACE64(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v4 & 4) != 0)
  {
    sub_1003AA28C(a1, a3);
    unint64_t v7 = "out of place";
    goto LABEL_16;
  }
  if (a2 && (*(unsigned char *)(a2 + 9) & 0x40) != 0)
  {
    sub_1003AA28C(a1, a3);
    unint64_t v7 = "duplicate";
    goto LABEL_16;
  }
  if (a3 <= 3)
  {
    sub_1003AA28C(a1, a3);
    unint64_t v7 = "invalid";
LABEL_16:
    return (void *)sub_1003A4124(a1, v7);
  }
  unint64_t v8 = a3 + 1;
  int v9 = *(unsigned __int8 **)(a1 + 1104);
  if (v9)
  {
    if (*(void *)(a1 + 1112) >= v8)
    {
LABEL_13:
      sub_1003A5BF4(a1);
      sub_10039EEEC(a1, v9, a3);
      v9[a3] = 0;
      uint64_t result = (void *)sub_1003AA28C(a1, 0);
      if (result) {
        return result;
      }
      if (*v9 - 1 < 2)
      {
        unint64_t v16 = 1;
        unsigned int v15 = 0;
        if (sub_1003A1764((uint64_t)v9, a3, &v15, &v16)
          && (unint64_t v12 = v16, v16 < a3)
          && (uint64_t v13 = v16 + 1, ++v16, !v9[v12]))
        {
          if ((v15 & 0x188) == 0x108)
          {
            unsigned int v15 = 0;
            if (sub_1003A1764((uint64_t)v9, a3, &v15, &v16) && v16 == a3)
            {
              if ((v15 & 0x188) == 0x108) {
                return sub_1003B05E4((void *)a1, a2, *v9, (char *)v9 + 1, (const char *)&v9[v13]);
              }
              unsigned __int8 v14 = "non-positive height";
            }
            else
            {
              unsigned __int8 v14 = "bad height format";
            }
          }
          else
          {
            unsigned __int8 v14 = "non-positive width";
          }
        }
        else
        {
          unsigned __int8 v14 = "bad width format";
        }
        return (void *)sub_1003A4124(a1, v14);
      }
      unint64_t v7 = "invalid unit";
      goto LABEL_16;
    }
    *(void *)(a1 + 1104) = 0;
    *(void *)(a1 + 1112) = 0;
    sub_1003A46CC(a1, v9);
  }
  unsigned int v10 = (unsigned __int8 *)sub_1003A47DC(a1, a3 + 1);
  if (v10)
  {
    int v9 = v10;
    bzero(v10, a3 + 1);
    *(void *)(a1 + 1104) = v9;
    *(void *)(a1 + 1112) = v8;
    goto LABEL_13;
  }
  sub_1003A4124(a1, "out of memory");

  return (void *)sub_1003AA28C(a1, a3);
}

uint64_t sub_1003AD134(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if (a2 && (*(unsigned char *)(a2 + 9) & 2) != 0)
  {
    sub_1003AA28C(a1, a3);
    unint64_t v7 = "duplicate";
    uint64_t v8 = a1;
    return sub_1003A4124(v8, v7);
  }
  if ((v4 & 4) != 0) {
    *(_DWORD *)(a1 + 292) = v4 | 8;
  }
  if (a3 != 7)
  {
    sub_1003AA28C(a1, a3);
    unint64_t v7 = "invalid";
    uint64_t v8 = a1;
    return sub_1003A4124(v8, v7);
  }
  uint64_t v9 = 0;
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, buf, 7);
  uint64_t result = sub_1003AA28C(a1, 0);
  if (!result)
  {
    BYTE6(v9) = v12;
    *(_DWORD *)((char *)&v9 + 2) = v11;
    LOWORD(v9) = bswap32(*(unsigned __int16 *)buf) >> 16;
    return sub_1003B0C38(a1, a2, (uint64_t)&v9);
  }
  return result;
}

uint64_t sub_1003AD27C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 1052);
  if (v6)
  {
    int v7 = v6 - 1;
    if (!v7)
    {
      return sub_1003AA28C(a1, a3);
    }
    *(_DWORD *)(a1 + 1052) = v7;
    if (v7 == 1)
    {
      sub_1003AA28C(a1, a3);
      uint64_t v9 = "no space in chunk cache";
LABEL_26:
      return sub_1003A4124(a1, v9);
    }
  }
  int v10 = *(_DWORD *)(a1 + 292);
  if ((v10 & 1) == 0) {
    sub_1003A3E44(a1, "missing IHDR");
  }
  if ((v10 & 4) != 0) {
    *(_DWORD *)(a1 + 292) = v10 | 8;
  }
  unint64_t v11 = a3 + 1;
  char v12 = *(unsigned __int8 **)(a1 + 1104);
  if (v12)
  {
    if (*(void *)(a1 + 1112) >= v11) {
      goto LABEL_16;
    }
    *(void *)(a1 + 1104) = 0;
    *(void *)(a1 + 1112) = 0;
    sub_1003A46CC(a1, v12);
  }
  uint64_t v13 = (unsigned __int8 *)sub_1003A47DC(a1, a3 + 1);
  if (!v13)
  {
    sub_1003A3D74(a1, "insufficient memory to read chunk");
    uint64_t v9 = "out of memory";
    goto LABEL_26;
  }
  char v12 = v13;
  bzero(v13, a3 + 1);
  *(void *)(a1 + 1104) = v12;
  *(void *)(a1 + 1112) = v11;
LABEL_16:
  sub_1003A5BF4(a1);
  sub_10039EEEC(a1, v12, a3);
  uint64_t result = sub_1003AA28C(a1, 0);
  if (!result)
  {
    uint64_t v14 = 0;
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    v12[a3] = 0;
    while (v12[v14++])
      ;
    unint64_t v16 = a3 + 1 == v14 ? v12 : v12 + 1;
    LODWORD(v17) = -1;
    uint64_t v20 = 0;
    long long v19 = 0uLL;
    *((void *)&v17 + 1) = v12;
    *(void *)&long long v18 = &v16[v14 - 1];
    *((void *)&v18 + 1) = strlen((const char *)v18);
    uint64_t result = sub_1003B08FC(a1, a2, (uint64_t)&v17, 1);
    if (result) {
      return sub_1003A3704(a1, (uint64_t)"Insufficient memory to process text chunk");
    }
  }
  return result;
}

uint64_t sub_1003AD4A0(uint64_t a1, uint64_t a2, size_t __size)
{
  unsigned int v3 = __size;
  int v6 = *(_DWORD *)(a1 + 1052);
  if (!v6) {
    goto LABEL_8;
  }
  int v7 = v6 - 1;
  if (!v7)
  {
    return sub_1003AA28C(a1, __size);
  }
  *(_DWORD *)(a1 + 1052) = v7;
  if (v7 != 1)
  {
LABEL_8:
    int v10 = *(_DWORD *)(a1 + 292);
    if ((v10 & 1) == 0) {
      sub_1003A3E44(a1, "missing IHDR");
    }
    if ((v10 & 4) != 0) {
      *(_DWORD *)(a1 + 292) = v10 | 8;
    }
    unint64_t v11 = (uint64_t *)(a1 + 1104);
    char v12 = *(void **)(a1 + 1104);
    if (v12)
    {
      if (*(void *)(a1 + 1112) >= (unint64_t)__size) {
        goto LABEL_16;
      }
      *unint64_t v11 = 0;
      *(void *)(a1 + 1112) = 0;
      sub_1003A46CC(a1, v12);
    }
    uint64_t v13 = sub_1003A47DC(a1, v3);
    if (!v13)
    {
      sub_1003AA28C(a1, v3);
      uint64_t v9 = "out of memory";
      goto LABEL_27;
    }
    char v12 = v13;
    bzero(v13, v3);
    *(void *)(a1 + 1104) = v12;
    *(void *)(a1 + 1112) = v3;
LABEL_16:
    sub_1003A5BF4(a1);
    sub_10039EEEC(a1, (Bytef *)v12, v3);
    uint64_t result = sub_1003AA28C(a1, 0);
    if (result) {
      return result;
    }
    if (!v3) {
      goto LABEL_23;
    }
    uint64_t v14 = 0;
    while (*((unsigned char *)v12 + v14))
    {
      if (v3 == ++v14)
      {
        LODWORD(v14) = v3;
        break;
      }
    }
    if ((v14 - 80) >= 0xFFFFFFB1)
    {
      if ((int)v14 + 3 <= v3)
      {
        if (*((unsigned char *)v12 + v14 + 1))
        {
          unsigned int v15 = "unknown compression type";
        }
        else
        {
          unint64_t v19 = -1;
          uint64_t result = sub_1003AD738(a1, v3, (int)v14 + 2, &v19);
          if (result == 1)
          {
            v18[0] = 0;
            uint64_t v16 = *v11;
            if (*v11)
            {
              unint64_t v17 = v19;
              *(unsigned char *)(v16 + v19 + (v14 + 2)) = 0;
              v18[1] = v16;
              void v18[2] = v16 + v14 + 2;
              v18[3] = v17;
              memset(&v18[4], 0, 24);
              uint64_t result = sub_1003B08FC(a1, a2, (uint64_t)v18, 1);
              if (result) {
                unsigned int v15 = "insufficient memory";
              }
              else {
                unsigned int v15 = 0;
              }
            }
            else
            {
              unsigned int v15 = "Read failure in png_handle_zTXt";
            }
          }
          else
          {
            unsigned int v15 = *(const char **)(a1 + 360);
          }
          if (!v15) {
            return result;
          }
        }
      }
      else
      {
        unsigned int v15 = "truncated";
      }
    }
    else
    {
LABEL_23:
      unsigned int v15 = "bad keyword";
    }
    return sub_1003A4124(a1, v15);
  }
  sub_1003AA28C(a1, __size);
  uint64_t v9 = "no space in chunk cache";
LABEL_27:

  return sub_1003A4124(a1, v9);
}

uint64_t sub_1003AD738(uint64_t a1, int a2, unsigned int a3, unint64_t *a4)
{
  unint64_t v8 = *(void *)(a1 + 1056);
  if (v8 + 1 > 1)
  {
    unint64_t v9 = a3 + 1;
    if (v8 < v9)
    {
      uint64_t v12 = 4294967292;
      sub_10039F92C(a1, -4);
      return v12;
    }
  }
  else
  {
    unint64_t v9 = a3 + 1;
    unint64_t v8 = -1;
  }
  unint64_t v10 = v8 - v9;
  if (v10 < *a4) {
    *a4 = v10;
  }
  unsigned int v11 = sub_1003AB5E4(a1, *(_DWORD *)(a1 + 528));
  if (!v11)
  {
    int v19 = a2 - a3;
    uint64_t v12 = sub_1003AF5E4(a1, *(_DWORD *)(a1 + 528), (char *)(*(void *)(a1 + 1104) + a3), &v19, 0, a4);
    if (v12 == 1)
    {
      if (inflateReset((z_streamp)(a1 + 312)))
      {
        sub_10039F92C(a1, 1);
        uint64_t v12 = 4294967289;
      }
      else
      {
        unint64_t v13 = *a4;
        size_t v14 = a3 + *a4 + 1;
        unsigned int v15 = sub_1003A47DC(a1, v14);
        if (v15)
        {
          uint64_t v16 = v15;
          bzero(v15, v14);
          uint64_t v12 = sub_1003AF5E4(a1, *(_DWORD *)(a1 + 528), (char *)(*(void *)(a1 + 1104) + a3), &v19, (uint64_t)&v16[a3], a4);
          if (v12 == 1)
          {
            if (v13 == *a4)
            {
              v16[v13 + a3] = 0;
              unint64_t v17 = *(void **)(a1 + 1104);
              if (a3) {
                memcpy(v16, *(const void **)(a1 + 1104), a3);
              }
              *(void *)(a1 + 1104) = v16;
              *(void *)(a1 + 1112) = v14;
              sub_1003A46CC(a1, v17);
              if (a2 - a3 != v19) {
                sub_1003A4124(a1, "extra compressed data");
              }
              uint64_t v12 = 1;
              goto LABEL_25;
            }
            uint64_t v12 = 4294967289;
          }
          sub_1003A46CC(a1, v16);
        }
        else
        {
          uint64_t v12 = 4294967292;
          sub_10039F92C(a1, -4);
        }
      }
    }
LABEL_25:
    *(_DWORD *)(a1 + 304) = 0;
    return v12;
  }
  if (v11 == 1) {
    return 4294967289;
  }
  else {
    return v11;
  }
}

uint64_t sub_1003AD93C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 1052);
  if (!v6) {
    goto LABEL_8;
  }
  int v7 = v6 - 1;
  if (!v7)
  {
    return sub_1003AA28C(a1, a3);
  }
  *(_DWORD *)(a1 + 1052) = v7;
  if (v7 != 1)
  {
LABEL_8:
    int v10 = *(_DWORD *)(a1 + 292);
    if ((v10 & 1) == 0) {
      sub_1003A3E44(a1, "missing IHDR");
    }
    if ((v10 & 4) != 0) {
      *(_DWORD *)(a1 + 292) = v10 | 8;
    }
    unint64_t v11 = a3 + 1;
    uint64_t v12 = (char **)(a1 + 1104);
    unint64_t v13 = *(char **)(a1 + 1104);
    if (v13)
    {
      if (*(void *)(a1 + 1112) >= v11) {
        goto LABEL_16;
      }
      *uint64_t v12 = 0;
      *(void *)(a1 + 1112) = 0;
      sub_1003A46CC(a1, v13);
    }
    size_t v14 = (char *)sub_1003A47DC(a1, a3 + 1);
    if (!v14)
    {
      sub_1003A3D74(a1, "insufficient memory to read chunk");
      sub_1003AA28C(a1, a3);
      unint64_t v9 = "out of memory";
      goto LABEL_27;
    }
    unint64_t v13 = v14;
    bzero(v14, a3 + 1);
    *(void *)(a1 + 1104) = v13;
    *(void *)(a1 + 1112) = v11;
LABEL_16:
    sub_1003A5BF4(a1);
    sub_10039EEEC(a1, (Bytef *)v13, a3);
    uint64_t result = sub_1003AA28C(a1, 0);
    if (result) {
      return result;
    }
    if (!a3) {
      goto LABEL_23;
    }
    uint64_t v15 = 0;
    while (v13[v15])
    {
      if (a3 == ++v15)
      {
        LODWORD(v15) = a3;
        break;
      }
    }
    if ((v15 - 80) >= 0xFFFFFFB1)
    {
      if ((int)v15 + 5 <= a3)
      {
        unint64_t v17 = &v13[v15];
        int v18 = v17[1];
        if (v17[1] && (v18 != 1 || v17[2]))
        {
          uint64_t v16 = "bad compression info";
        }
        else
        {
          uint64_t v19 = (v15 + 3);
          uint64_t v20 = v19;
          while (v13[v20])
          {
            if (a3 == ++v20)
            {
              LODWORD(v20) = a3;
              break;
            }
          }
          int v21 = v20 + 1;
          if ((int)v20 + 1 >= a3)
          {
            unsigned int v23 = v20 + 1;
          }
          else
          {
            uint64_t v22 = &v13[v21];
            unsigned int v23 = v20 + 1;
            while (*v22++)
            {
              if (a3 == ++v23)
              {
                unsigned int v23 = a3;
                break;
              }
            }
          }
          uint64_t v25 = v23 + 1;
          if (v18 || a3 < v25)
          {
            uint64_t v16 = "truncated";
            if (!v18 || a3 <= v25) {
              return sub_1003A4124(a1, v16);
            }
            unint64_t v28 = -1;
            if (sub_1003AD738(a1, a3, v25, &v28) == 1)
            {
              unint64_t v13 = *v12;
            }
            else
            {
              uint64_t v16 = *(const char **)(a1 + 360);
              if (v16) {
                return sub_1003A4124(a1, v16);
              }
            }
          }
          else
          {
            unint64_t v28 = a3 - v25;
          }
          v27[0] = 0;
          v13[v28 + v25] = 0;
          if (v18) {
            int v26 = 2;
          }
          else {
            int v26 = 1;
          }
          LODWORD(v27[0]) = v26;
          v27[5] = &v13[v19];
          v27[6] = &v13[v21];
          v27[1] = v13;
          v27[2] = &v13[v25];
          v27[3] = 0;
          v27[4] = v28;
          uint64_t result = sub_1003B08FC(a1, a2, (uint64_t)v27, 1);
          if (!result) {
            return result;
          }
          uint64_t v16 = "insufficient memory";
        }
      }
      else
      {
        uint64_t v16 = "truncated";
      }
    }
    else
    {
LABEL_23:
      uint64_t v16 = "bad keyword";
    }
    return sub_1003A4124(a1, v16);
  }
  sub_1003AA28C(a1, a3);
  unint64_t v9 = "no space in chunk cache";
LABEL_27:

  return sub_1003A4124(a1, v9);
}

void sub_1003ADC88(uint64_t a1, uint64_t a2, size_t __size, int a4)
{
  int v4 = a4;
  if (!*(void *)(a1 + 944))
  {
    if (a4)
    {
      if (a4 == 3) {
        goto LABEL_15;
      }
    }
    else
    {
      int v4 = *(_DWORD *)(a1 + 952);
      if (v4 == 3) {
        goto LABEL_15;
      }
    }
    if (v4 != 2 || (*(unsigned char *)(a1 + 531) & 0x20) == 0)
    {
      sub_1003AA28C(a1, __size);
      goto LABEL_16;
    }
LABEL_15:
    if (!sub_1003ADE2C(a1, __size)) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if (!sub_1003ADE2C(a1, __size)) {
    goto LABEL_24;
  }
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 944))(a1, a1 + 1064);
  if (v7 < 0) {
    sub_1003A3E44(a1, "error in user chunk");
  }
  if (!v7)
  {
    if (v4 <= 1)
    {
      if (*(int *)(a1 + 952) <= 1)
      {
        sub_1003A3D74(a1, "Saving unknown chunk:");
        sub_1003A3E84(a1, "forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks");
      }
      goto LABEL_18;
    }
LABEL_16:
    if (v4 == 3)
    {
LABEL_19:
      int v8 = *(_DWORD *)(a1 + 1052);
      if (!v8)
      {
LABEL_30:
        sub_1003B0FB4(a1, a2, a1 + 1064, 1);
        goto LABEL_31;
      }
      if (v8 != 1)
      {
        if (v8 == 2)
        {
          int v9 = 1;
          *(_DWORD *)(a1 + 1052) = 1;
          sub_1003A4124(a1, "no space in chunk cache");
          int v10 = *(void **)(a1 + 1072);
          if (!v10) {
            goto LABEL_26;
          }
LABEL_25:
          sub_1003A46CC(a1, v10);
          goto LABEL_26;
        }
        *(_DWORD *)(a1 + 1052) = v8 - 1;
        goto LABEL_30;
      }
LABEL_24:
      int v9 = 1;
      int v10 = *(void **)(a1 + 1072);
      if (!v10) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    if (v4 != 2) {
      goto LABEL_24;
    }
LABEL_18:
    if ((*(unsigned char *)(a1 + 531) & 0x20) == 0) {
      goto LABEL_24;
    }
    goto LABEL_19;
  }
LABEL_31:
  int v9 = 0;
  int v10 = *(void **)(a1 + 1072);
  if (v10) {
    goto LABEL_25;
  }
LABEL_26:
  *(void *)(a1 + 1072) = 0;
  if (v9)
  {
    if ((*(unsigned char *)(a1 + 531) & 0x20) == 0) {
      sub_1003A3E44(a1, "unhandled critical chunk");
    }
  }
}

uint64_t sub_1003ADE2C(uint64_t a1, size_t __size)
{
  unsigned int v2 = __size;
  int v4 = *(void **)(a1 + 1072);
  if (v4)
  {
    sub_1003A46CC(a1, v4);
    *(void *)(a1 + 1072) = 0;
  }
  unint64_t v5 = *(void *)(a1 + 1056);
  if (v5 + 1 > 1)
  {
    size_t v6 = v2;
    if (v5 < v2)
    {
      int v7 = 0;
      if (!v2)
      {
LABEL_12:
        if (v2)
        {
          sub_1003A5BF4(a1);
          sub_10039EEEC(a1, v7, v6);
        }
        goto LABEL_15;
      }
LABEL_10:
      if (!v7)
      {
        sub_1003AA28C(a1, v2);
        sub_1003A4124(a1, "unknown chunk exceeds memory limits");
        return 0;
      }
      goto LABEL_12;
    }
  }
  else
  {
    size_t v6 = v2;
  }
  int v8 = *(_DWORD *)(a1 + 528);
  *(unsigned char *)(a1 + 1064) = HIBYTE(v8);
  *(unsigned char *)(a1 + 1065) = BYTE2(v8);
  *(unsigned char *)(a1 + 1066) = BYTE1(v8);
  *(unsigned char *)(a1 + 1067) = v8;
  *(unsigned char *)(a1 + 1068) = 0;
  *(void *)(a1 + 1080) = v6;
  *(unsigned char *)(a1 + 1088) = *(_DWORD *)(a1 + 292);
  if (v2)
  {
    int v7 = (Bytef *)sub_1003A49AC((void *)a1, v6);
    *(void *)(a1 + 1072) = v7;
    goto LABEL_10;
  }
  *(void *)(a1 + 1072) = 0;
LABEL_15:
  sub_1003AA28C(a1, 0);
  return 1;
}

uint64_t sub_1003ADF58(uint64_t result, char *__dst, int a3)
{
  unint64_t v3 = *(unsigned __int8 *)(result + 615);
  if (!*(unsigned char *)(result + 615)) {
    sub_1003A34AC(result, "internal row logic error");
  }
  int v4 = __dst;
  uint64_t v5 = *(void *)(result + 544);
  unint64_t v6 = *(unsigned int *)(result + 496);
  uint64_t v7 = *(unsigned __int8 *)(result + 605);
  uint64_t v8 = *(void *)(result + 568);
  if (v8)
  {
    unint64_t v9 = (v6 * (unint64_t)*(unsigned __int8 *)(result + 615) + 7) >> 3;
    if (v3 >= 8) {
      unint64_t v9 = v6 * (unint64_t)(v3 >> 3);
    }
    if (v8 != v9) {
      sub_1003A34AC(result, "internal row size calculation error");
    }
  }
  if (!v6) {
    sub_1003A34AC(result, "internal row width error");
  }
  int v10 = (char *)(v5 + 1);
  unint64_t v11 = v6 * (unint64_t)*(unsigned __int8 *)(result + 615);
  unint64_t v12 = v3 >> 3;
  char v13 = v11 & 7;
  if ((v11 & 7) != 0)
  {
    unint64_t v14 = v12 * (unint64_t)v6;
    if (v3 <= 7) {
      unint64_t v14 = (v11 + 7) >> 3;
    }
    uint64_t v15 = &__dst[v14 - 1];
    char v16 = *v15;
    unsigned int v17 = 0xFFu >> v13;
    int v18 = 255 << v13;
    if (*(unsigned char *)(result + 302)) {
      char v19 = v18;
    }
    else {
      char v19 = v17;
    }
    if (!*(unsigned char *)(result + 604)) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v15 = 0;
    char v16 = 0;
    char v19 = 0;
    if (!*(unsigned char *)(result + 604)) {
      goto LABEL_22;
    }
  }
  int v20 = *(_DWORD *)(result + 300);
  if ((v20 & 2) == 0 || v7 > 5)
  {
LABEL_22:
    if (v3 <= 7) {
      size_t v22 = (v11 + 7) >> 3;
    }
    else {
      size_t v22 = v12 * (unint64_t)v6;
    }
    uint64_t result = (uint64_t)memcpy(__dst, v10, v22);
LABEL_26:
    if (v15) {
      *uint64_t v15 = *v15 & ~v19 | v19 & v16;
    }
    return result;
  }
  if (a3 != 1)
  {
    if (!a3)
    {
      int v21 = v7 & 1;
      goto LABEL_30;
    }
    goto LABEL_22;
  }
  if ((v7 & 1) == 0) {
    goto LABEL_22;
  }
  int v21 = 1;
LABEL_30:
  unsigned int v23 = (v21 << (3 - ((v7 + 1) >> 1))) & 7;
  if (v6 <= v23) {
    return result;
  }
  if (v3 <= 7)
  {
    unint64_t v24 = 8 / v3;
    uint64_t v25 = 1;
    if (v3 != 2) {
      uint64_t v25 = 2;
    }
    if (v3 == 1) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v25;
    }
    long long v27 = (char *)&unk_10040C534 + 24 * v26 + 4 * v7 + 72;
    if (a3) {
      long long v27 = (char *)&unk_10040C5C4 + 12 * v26 + ((2 * (int)v7) & 0x1FCLL) + 36;
    }
    unint64_t v28 = (char *)&unk_10040C5C4 + 12 * v26 + ((2 * (int)v7) & 0x1FCLL);
    if (!a3) {
      unint64_t v28 = (char *)&unk_10040C534 + 24 * v26 + 4 * *(unsigned __int8 *)(result + 605);
    }
    if ((v20 & 0x10000) == 0) {
      unint64_t v28 = v27;
    }
    int v29 = *(_DWORD *)v28;
    int v30 = v29;
    if ((_BYTE)v29)
    {
LABEL_44:
      if (v30 == 255) {
        char v31 = *v10;
      }
      else {
        char v31 = v29 & *v10 | *v4 & ~(_BYTE)v29;
      }
      *int v4 = v31;
    }
    while (1)
    {
      BOOL v32 = v6 > v24;
      v6 -= v24;
      if (!v32) {
        goto LABEL_26;
      }
      HIDWORD(v33) = v29;
      LODWORD(v33) = v29;
      int v29 = v33 >> 8;
      ++v4;
      ++v10;
      int v30 = BYTE1(v33);
      if (BYTE1(v33)) {
        goto LABEL_44;
      }
    }
  }
  if ((v3 & 7) != 0) {
    sub_1003A34AC(result, "invalid user transform pixel depth");
  }
  unint64_t v34 = v6 * (unint64_t)v12;
  uint64_t v35 = v23 * v12;
  unint64_t v36 = v34 - v35;
  uint64_t result = (uint64_t)&__dst[v35];
  long long v37 = &v10[v35];
  unint64_t v38 = (v12 << ((6 - v7) >> 1));
  if (v34 - v35 < v38) {
    LODWORD(v38) = v34 - v35;
  }
  if (a3) {
    size_t v39 = v38;
  }
  else {
    size_t v39 = v12;
  }
  unint64_t v40 = (v12 << ((7 - v7) >> 1));
  switch(v39)
  {
    case 1:
      *(unsigned char *)uint64_t result = *v37;
      if (v36 > v40)
      {
        uint64_t v45 = v40 + v35;
        do
        {
          v36 -= v40;
          v4[v45] = v10[v45];
          v45 += v40;
        }
        while (v36 > v40);
      }
      break;
    case 2:
      while (1)
      {
        long long v44 = &v4[v35];
        *long long v44 = *(unsigned char *)(v5 + v35 + 1);
        v44[1] = *(unsigned char *)(v5 + v35 + 2);
        BOOL v32 = v36 > v40;
        v36 -= v40;
        if (!v32) {
          break;
        }
        v35 += v40;
        if (v36 <= 1)
        {
          v4[v35] = *(unsigned char *)(v5 + v35 + 1);
          return result;
        }
      }
      break;
    case 3:
      *(unsigned char *)uint64_t result = *v37;
      *(unsigned char *)(result + 1) = v37[1];
      *(unsigned char *)(result + 2) = v37[2];
      if (v36 > v40)
      {
        uint64_t v41 = v5 + 3;
        uint64_t v42 = v40 + v35;
        do
        {
          long long v43 = &v4[v42];
          v36 -= v40;
          unsigned char *v43 = *(unsigned char *)(v41 + v42 - 2);
          v43[1] = *(unsigned char *)(v41 + v42 - 1);
          v43[2] = *(unsigned char *)(v41 + v42);
          v42 += v40;
        }
        while (v36 > v40);
      }
      return result;
    default:
      if (v39 <= 0xF
        && (result & 1) == 0
        && (v37 & 1) == 0
        && (v39 & 1) == 0
        && (v40 & 1) == 0)
      {
        unsigned int v46 = v40 - v39;
        if ((((v37 | v40) | (result | v39)) & 3) != 0)
        {
          uint64_t v47 = v46 >> 1;
          uint64_t v48 = v34 - v40 - v35;
          uint64_t v49 = v47;
          do
          {
            uint64_t v50 = 0;
            unsigned int v51 = v37;
            uint64_t v52 = result;
            uint64_t v53 = v48;
            char v54 = (_WORD *)result;
            BOOL v55 = (__int16 *)v37;
            size_t v56 = v39;
            do
            {
              __int16 v57 = *v55++;
              *v54++ = v57;
              ++v50;
              v56 -= 2;
            }
            while (v56);
            BOOL v32 = v36 > v40;
            v36 -= v40;
            if (!v32) {
              return result;
            }
            long long v37 = (char *)&v55[v49];
            uint64_t result = (uint64_t)&v54[v49];
            uint64_t v48 = v53 - v40;
          }
          while (v36 >= v39);
          if (v36 >= 8 && (unint64_t)(v52 - (void)v51) >= 0x20)
          {
            if (v36 >= 0x20)
            {
              unint64_t v58 = v36 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v74 = v53 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint64_t v75 = &v54[v49];
                long long v76 = *(_OWORD *)&v55[v49 + 8];
                *uint64_t v75 = *(_OWORD *)&v55[v49];
                v75[1] = v76;
                v49 += 16;
                v74 -= 32;
              }
              while (v74);
              if (v36 == v58) {
                return result;
              }
              if ((v36 & 0x18) == 0)
              {
                result += v58;
                v36 &= 0x1Fu;
                v37 += v58;
                goto LABEL_125;
              }
            }
            else
            {
              unint64_t v58 = 0;
            }
            v37 += v36 & 0xFFFFFFFFFFFFFFF8;
            result += v36 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v77 = v58 + 2 * v47;
            unint64_t v78 = v58 - (v53 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              *(void *)((char *)v54 + v77) = *(void *)((char *)v55 + v77);
              v77 += 8;
              v78 += 8;
            }
            while (v78);
            BOOL v79 = v36 == (v36 & 0xFFFFFFFFFFFFFFF8);
            v36 &= 7u;
            if (v79) {
              return result;
            }
          }
          do
          {
LABEL_125:
            char v85 = *v37++;
            *(unsigned char *)result++ = v85;
            --v36;
          }
          while (v36);
          return result;
        }
        uint64_t v62 = v46 >> 2;
        uint64_t v63 = v34 - v40 - v35;
        uint64_t v64 = v62;
        do
        {
          uint64_t v65 = 0;
          int v66 = v37;
          uint64_t v67 = result;
          uint64_t v68 = v63;
          unsigned int v69 = (_DWORD *)result;
          unsigned int v70 = (int *)v37;
          size_t v71 = v39;
          do
          {
            int v72 = *v70++;
            *v69++ = v72;
            ++v65;
            v71 -= 4;
          }
          while (v71);
          BOOL v32 = v36 > v40;
          v36 -= v40;
          if (!v32) {
            return result;
          }
          long long v37 = (char *)&v70[v64];
          uint64_t result = (uint64_t)&v69[v64];
          uint64_t v63 = v68 - v40;
        }
        while (v36 >= v39);
        if (v36 >= 8 && (unint64_t)(v67 - (void)v66) >= 0x20)
        {
          if (v36 >= 0x20)
          {
            unint64_t v73 = v36 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v80 = v68 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              unsigned __int8 v81 = &v69[v64];
              long long v82 = *(_OWORD *)&v70[v64 + 4];
              *unsigned __int8 v81 = *(_OWORD *)&v70[v64];
              v81[1] = v82;
              v64 += 8;
              v80 -= 32;
            }
            while (v80);
            if (v36 == v73) {
              return result;
            }
            if ((v36 & 0x18) == 0)
            {
              result += v73;
              v36 &= 0x1Fu;
              v37 += v73;
              goto LABEL_128;
            }
          }
          else
          {
            unint64_t v73 = 0;
          }
          v37 += v36 & 0xFFFFFFFFFFFFFFF8;
          result += v36 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v83 = v73 + 4 * v62;
          unint64_t v84 = v73 - (v68 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(void *)((char *)v69 + v83) = *(void *)((char *)v70 + v83);
            v83 += 8;
            v84 += 8;
          }
          while (v84);
          BOOL v79 = v36 == (v36 & 0xFFFFFFFFFFFFFFF8);
          v36 &= 7u;
          if (v79) {
            return result;
          }
        }
        do
        {
LABEL_128:
          char v86 = *v37++;
          *(unsigned char *)result++ = v86;
          --v36;
        }
        while (v36);
        return result;
      }
      uint64_t result = (uint64_t)memcpy((void *)result, v37, v39);
      if (v36 > v40)
      {
        uint64_t v59 = v40 + v35;
        unsigned int v60 = v6 * v12 - v35 - v40;
        do
        {
          unint64_t v61 = v36 - v40;
          if (v36 - v40 >= v39) {
            size_t v39 = v39;
          }
          else {
            size_t v39 = v60;
          }
          uint64_t result = (uint64_t)memcpy(&v4[v59], &v10[v59], v39);
          v59 += v40;
          v60 -= v40;
          v36 -= v40;
        }
        while (v61 > v40);
      }
      break;
  }
  return result;
}

uint64_t sub_1003AE5F8(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (!result || !a2) {
    return result;
  }
  uint64_t v4 = result;
  int v5 = *(_DWORD *)result;
  int v6 = dword_10040C60C[a3];
  unsigned int v7 = v6 * *(_DWORD *)result;
  unint64_t v8 = *(unsigned __int8 *)(result + 19);
  switch(v8)
  {
    case 4:
      int v36 = (4 * (*(_DWORD *)result & 1)) ^ 4;
      int v37 = ~(4 * v7) & 4;
      if ((a4 & 0x10000) != 0)
      {
        int v38 = 4;
      }
      else
      {
        int v36 = 4 * (*(_DWORD *)result & 1);
        int v37 = 4 * (v7 & 1);
        int v38 = 0;
      }
      if ((a4 & 0x10000) != 0) {
        int v39 = 0;
      }
      else {
        int v39 = 4;
      }
      if ((a4 & 0x10000) != 0) {
        int v40 = -4;
      }
      else {
        int v40 = 4;
      }
      if (v5)
      {
        unsigned int v41 = 0;
        uint64_t v42 = (unsigned __int8 *)(a2 + ((v5 - 1) >> 1));
        long long v43 = (unsigned char *)(a2 + ((v7 - 1) >> 1));
        if (v6 <= 1) {
          int v6 = 1;
        }
        uint64_t result = 3855;
        do
        {
          int v44 = (*v42 >> v36) & 0xF;
          int v45 = v6;
          do
          {
            unsigned char *v43 = (0xF0Fu >> (4 - v37)) & *v43 | (v44 << v37);
            BOOL v20 = v37 == v39;
            uint64_t v46 = v37 == v39;
            v37 += v40;
            if (v20) {
              int v37 = v38;
            }
            v43 -= v46;
            --v45;
          }
          while (v45);
          BOOL v20 = v36 == v39;
          uint64_t v47 = v36 == v39;
          v36 += v40;
          if (v20) {
            int v36 = v38;
          }
          v42 -= v47;
          ++v41;
        }
        while (v41 < *(_DWORD *)v4);
      }
      goto LABEL_79;
    case 2:
      int v23 = (2 * (_BYTE)v5 + 6) & 6 ^ 6;
      int v24 = 2 * v7 + 6;
      int v25 = ~v24 & 6;
      if ((a4 & 0x10000) != 0)
      {
        int v23 = (2 * (_BYTE)v5 + 6) & 6;
        int v25 = v24 & 6;
        int v26 = 6;
      }
      else
      {
        int v26 = 0;
      }
      if ((a4 & 0x10000) != 0) {
        int v27 = 0;
      }
      else {
        int v27 = 6;
      }
      if ((a4 & 0x10000) != 0) {
        int v28 = -2;
      }
      else {
        int v28 = 2;
      }
      if (v5)
      {
        unsigned int v29 = 0;
        int v30 = (unsigned __int8 *)(a2 + ((v5 - 1) >> 2));
        char v31 = (unsigned char *)(a2 + ((v7 - 1) >> 2));
        if (v6 <= 1) {
          int v6 = 1;
        }
        uint64_t result = 16191;
        do
        {
          int v32 = (*v30 >> v23) & 3;
          int v33 = v6;
          do
          {
            unsigned char *v31 = (0x3F3Fu >> (6 - v25)) & *v31 | (v32 << v25);
            BOOL v20 = v25 == v27;
            uint64_t v34 = v25 == v27;
            v25 += v28;
            if (v20) {
              int v25 = v26;
            }
            v31 -= v34;
            --v33;
          }
          while (v33);
          BOOL v20 = v23 == v27;
          uint64_t v35 = v23 == v27;
          v23 += v28;
          if (v20) {
            int v23 = v26;
          }
          v30 -= v35;
          ++v29;
        }
        while (v29 < *(_DWORD *)v4);
      }
      goto LABEL_79;
    case 1:
      unsigned int v9 = v5 - 1;
      int v10 = (v5 - 1) & 7;
      int v11 = -v7 & 7;
      uint64_t result = (v7 - 1) & 7;
      if ((a4 & 0x10000) != 0) {
        int v11 = (v7 - 1) & 7;
      }
      else {
        v10 ^= 7u;
      }
      if ((a4 & 0x10000) != 0) {
        int v12 = 7;
      }
      else {
        int v12 = 0;
      }
      if ((a4 & 0x10000) != 0) {
        int v13 = 0;
      }
      else {
        int v13 = 7;
      }
      if ((a4 & 0x10000) != 0) {
        int v14 = -1;
      }
      else {
        int v14 = 1;
      }
      if (v5)
      {
        unsigned int v15 = 0;
        char v16 = (unsigned __int8 *)(a2 + (v9 >> 3));
        unsigned int v17 = (unsigned char *)(a2 + ((v7 - 1) >> 3));
        if (v6 <= 1) {
          int v6 = 1;
        }
        uint64_t result = 32639;
        do
        {
          int v18 = (*v16 >> v10) & 1;
          int v19 = v6;
          do
          {
            *unsigned int v17 = (0x7F7Fu >> (7 - v11)) & *v17 | (v18 << v11);
            BOOL v20 = v11 == v13;
            uint64_t v21 = v11 == v13;
            v11 += v14;
            if (v20) {
              int v11 = v12;
            }
            v17 -= v21;
            --v19;
          }
          while (v19);
          BOOL v20 = v10 == v13;
          uint64_t v22 = v10 == v13;
          v10 += v14;
          if (v20) {
            int v10 = v12;
          }
          v16 -= v22;
          ++v15;
        }
        while (v15 < *(_DWORD *)v4);
      }
      goto LABEL_79;
  }
  if (v5)
  {
    unsigned int v48 = 0;
    size_t v49 = v8 >> 3;
    uint64_t v50 = -(uint64_t)(v8 >> 3);
    uint64_t v51 = a2 + (v8 >> 3) * (unint64_t)(v5 - 1);
    uint64_t v52 = (char *)(a2 + (v8 >> 3) * (unint64_t)(v7 - 1));
    if (v6 <= 1) {
      int v53 = 1;
    }
    else {
      int v53 = dword_10040C60C[a3];
    }
    do
    {
      __memcpy_chk();
      int v54 = v53;
      do
      {
        uint64_t result = (uint64_t)memcpy(v52, &v58, v49);
        v52 += v50;
        --v54;
      }
      while (v54);
      v51 += v50;
      ++v48;
    }
    while (v48 < *(_DWORD *)v4);
LABEL_79:
    LODWORD(v8) = *(unsigned __int8 *)(v4 + 19);
  }
  *(_DWORD *)uint64_t v4 = v7;
  BOOL v55 = v8 >= 8;
  unint64_t v56 = (v7 * (unint64_t)v8 + 7) >> 3;
  unint64_t v57 = v7 * (unint64_t)(v8 >> 3);
  if (v55) {
    unint64_t v56 = v57;
  }
  *(void *)(v4 + 8) = v56;
  return result;
}

uint64_t sub_1003AE9C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5 = a5 - 1;
  if ((a5 - 1) <= 3)
  {
    uint64_t v9 = result;
    if (!*(void *)(result + 1136))
    {
      unsigned int v10 = (*(unsigned __int8 *)(result + 610) + 7) >> 3;
      *(void *)(result + 1136) = sub_1003AF85C;
      *(void *)(result + 1144) = sub_1003AF950;
      *(void *)(result + 1152) = sub_1003AFA40;
      int v11 = sub_1003AFC9C;
      if (v10 == 1) {
        int v11 = sub_1003AFC20;
      }
      *(void *)(result + 1160) = v11;
      sub_10039E988((void *)result, v10);
    }
    int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8 * v5 + 1136);
    return v12(a2, a3, a4);
  }
  return result;
}

uint64_t sub_1003AEAB4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = result;
  unsigned int v5 = (z_stream *)(result + 312);
  if (a2) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = 0;
  }
  *(void *)(result + 336) = a2;
  uint64_t v21 = (void *)(result + 1104);
  *(_DWORD *)(result + 344) = 0;
  while (2)
  {
    LODWORD(v7) = *(_DWORD *)(v4 + 320);
    if (v7)
    {
      if (!a2) {
        goto LABEL_33;
      }
LABEL_7:
      uint64_t v8 = 0xFFFFFFFFLL;
      if (v6 < 0xFFFFFFFF) {
        uint64_t v8 = v6;
      }
      v6 -= v8;
      *(_DWORD *)(v4 + 344) = v8;
      if (!*(unsigned char *)(v4 + 616)) {
        goto LABEL_37;
      }
LABEL_34:
      if (!v7) {
        goto LABEL_37;
      }
      if ((*(char *)v5->next_in & 0x80000000) == 0)
      {
        *(unsigned char *)(v4 + 616) = 0;
        goto LABEL_37;
      }
      *(void *)(v4 + 360) = "invalid window size (libpng)";
      int v16 = -3;
      goto LABEL_38;
    }
    unsigned int v9 = *(_DWORD *)(v4 + 576);
    while (!v9)
    {
      int v10 = *(_DWORD *)(v4 + 528);
      int v11 = *(_DWORD *)(v4 + 296);
      *(_DWORD *)(v4 + 1124) = 129;
      sub_1003A5BF4(v4);
      if ((v10 & 0x20000000) != 0)
      {
        if ((~v11 & 0x300) != 0)
        {
LABEL_20:
          if (bswap32(v22) != *(_DWORD *)(v4 + 580))
          {
            int v12 = *(_DWORD *)(v4 + 296);
            if ((*(unsigned char *)(v4 + 531) & 0x20) != 0)
            {
              if ((v12 & 0x200) != 0) {
LABEL_56:
              }
                sub_1003A3E44(v4, "CRC error");
            }
            else if ((v12 & 0x400) == 0)
            {
              goto LABEL_56;
            }
            sub_1003A3D74(v4, "CRC error");
          }
        }
      }
      else if ((v11 & 0x800) == 0)
      {
        goto LABEL_20;
      }
      unsigned int v9 = sub_1003AA094(v4);
      *(_DWORD *)(v4 + 576) = v9;
      if (*(_DWORD *)(v4 + 528) != 1229209940) {
        goto LABEL_55;
      }
    }
    unsigned int v13 = *(_DWORD *)(v4 + 1120);
    if (v13 >= v9) {
      size_t v7 = v9;
    }
    else {
      size_t v7 = v13;
    }
    int v14 = *(void **)(v4 + 1104);
    if (v14)
    {
      if (*(void *)(v4 + 1112) < v7)
      {
        void *v21 = 0;
        v21[1] = 0;
        sub_1003A46CC(v4, v14);
        goto LABEL_30;
      }
    }
    else
    {
LABEL_30:
      unsigned int v15 = sub_1003A47DC(v4, v7);
      if (!v15) {
        sub_1003A3E44(v4, "insufficient memory to read chunk");
      }
      int v14 = v15;
      bzero(v15, v7);
      *(void *)(v4 + 1104) = v14;
      *(void *)(v4 + 1112) = v7;
    }
    sub_1003A5BF4(v4);
    uint64_t result = sub_10039EEEC(v4, (Bytef *)v14, v7);
    *(_DWORD *)(v4 + 576) -= v7;
    *(void *)(v4 + 312) = v14;
    *(_DWORD *)(v4 + 320) = v7;
    if (a2) {
      goto LABEL_7;
    }
LABEL_33:
    *(void *)(v4 + 336) = &v23;
    *(_DWORD *)(v4 + 344) = 1024;
    if (*(unsigned char *)(v4 + 616)) {
      goto LABEL_34;
    }
LABEL_37:
    uint64_t result = inflate(v5, 0);
    int v16 = result;
LABEL_38:
    uint64_t v17 = *(unsigned int *)(v4 + 344);
    unint64_t v18 = v6 + v17;
    uint64_t v19 = v6 - v17 + 1024;
    if (a2) {
      unint64_t v6 = v18;
    }
    else {
      unint64_t v6 = v19;
    }
    *(_DWORD *)(v4 + 344) = 0;
    if (!v16)
    {
      if (!v6) {
        return result;
      }
      continue;
    }
    break;
  }
  if (v16 != 1)
  {
    sub_10039F92C(v4, v16);
    BOOL v20 = *(const char **)(v4 + 360);
    if (a2) {
      sub_1003A3E44(v4, v20);
    }
    return sub_1003A4124(v4, v20);
  }
  *(void *)(v4 + 336) = 0;
  *(void *)(v4 + 292) |= 0x800000008uLL;
  if (*(_DWORD *)(v4 + 320) || *(_DWORD *)(v4 + 576)) {
    uint64_t result = sub_1003A4124(v4, "Extra compressed data");
  }
  if (v6)
  {
    if (a2) {
LABEL_55:
    }
      sub_1003A34AC(v4, "Not enough image data");
    BOOL v20 = "Too much image data";
    return sub_1003A4124(v4, v20);
  }
  return result;
}

uint64_t sub_1003AEDC0(uint64_t result)
{
  uint64_t v1 = result;
  if ((*(unsigned char *)(result + 296) & 8) == 0)
  {
    uint64_t result = sub_1003AEAB4(result, 0, 0);
    *(void *)(v1 + 336) = 0;
    int v2 = *(_DWORD *)(v1 + 296);
    if ((v2 & 8) == 0)
    {
      *(_DWORD *)(v1 + 292) |= 8u;
      *(_DWORD *)(v1 + 296) = v2 | 8;
    }
  }
  if (*(_DWORD *)(v1 + 304) == 1229209940)
  {
    *(void *)(v1 + 312) = 0;
    *(_DWORD *)(v1 + 320) = 0;
    *(_DWORD *)(v1 + 304) = 0;
    unsigned int v3 = *(_DWORD *)(v1 + 576);
    return sub_1003AA28C(v1, v3);
  }
  return result;
}

void sub_1003AEE5C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 524) + 1;
  *(_DWORD *)(a1 + 524) = v1;
  if (v1 < *(_DWORD *)(a1 + 504)) {
    return;
  }
  if (*(unsigned char *)(a1 + 604))
  {
    *(_DWORD *)(a1 + 524) = 0;
    bzero(*(void **)(a1 + 536), *(void *)(a1 + 512) + 1);
    unsigned int v3 = *(unsigned __int8 *)(a1 + 605);
    char v4 = v3 + 1;
    if ((v3 + 1) > 6u)
    {
LABEL_4:
      *(unsigned char *)(a1 + 605) = v4;
      goto LABEL_5;
    }
    uint64_t v7 = (v3 + 1);
    unsigned int v8 = byte_10040C63D[v7];
    unsigned int v9 = *(_DWORD *)(a1 + 496) + v8 + ~byte_10040C636[v7];
    *(_DWORD *)(a1 + 520) = v9 / v8;
    if ((*(unsigned char *)(a1 + 300) & 2) == 0)
    {
      unsigned int v10 = byte_10040C62F[v7];
      unsigned int v11 = *(_DWORD *)(a1 + 500) + v10 + ~byte_10040C628[v7];
      *(_DWORD *)(a1 + 504) = v11 / v10;
      if (v11 < v10 || v9 < v8)
      {
        char v4 = v3 + 2;
        if ((v3 + 2) > 6u) {
          goto LABEL_4;
        }
        uint64_t v12 = (v3 + 2);
        unsigned int v13 = byte_10040C63D[v12];
        unsigned int v14 = *(_DWORD *)(a1 + 496) + v13 + ~byte_10040C636[v12];
        *(_DWORD *)(a1 + 520) = v14 / v13;
        if ((*(unsigned char *)(a1 + 300) & 2) == 0)
        {
          unsigned int v15 = byte_10040C62F[v12];
          unsigned int v16 = *(_DWORD *)(a1 + 500) + v15 + ~byte_10040C628[v12];
          *(_DWORD *)(a1 + 504) = v16 / v15;
          if (v16 < v15 || v14 < v13)
          {
            char v4 = v3 + 3;
            if ((v3 + 3) > 6u) {
              goto LABEL_4;
            }
            uint64_t v17 = (v3 + 3);
            unsigned int v18 = byte_10040C63D[v17];
            unsigned int v19 = *(_DWORD *)(a1 + 496) + v18 + ~byte_10040C636[v17];
            *(_DWORD *)(a1 + 520) = v19 / v18;
            if ((*(unsigned char *)(a1 + 300) & 2) == 0)
            {
              unsigned int v20 = byte_10040C62F[v17];
              unsigned int v21 = *(_DWORD *)(a1 + 500) + v20 + ~byte_10040C628[v17];
              *(_DWORD *)(a1 + 504) = v21 / v20;
              if (v21 < v20 || v19 < v18)
              {
                char v4 = v3 + 4;
                if ((v3 + 4) > 6u) {
                  goto LABEL_4;
                }
                uint64_t v22 = (v3 + 4);
                unsigned int v23 = byte_10040C63D[v22];
                unsigned int v24 = *(_DWORD *)(a1 + 496) + v23 + ~byte_10040C636[v22];
                *(_DWORD *)(a1 + 520) = v24 / v23;
                if ((*(unsigned char *)(a1 + 300) & 2) == 0)
                {
                  unsigned int v25 = byte_10040C62F[v22];
                  unsigned int v26 = *(_DWORD *)(a1 + 500) + v25 + ~byte_10040C628[v22];
                  *(_DWORD *)(a1 + 504) = v26 / v25;
                  if (v26 < v25 || v24 < v23)
                  {
                    char v4 = v3 + 5;
                    if ((v3 + 5) > 6u) {
                      goto LABEL_4;
                    }
                    uint64_t v27 = (v3 + 5);
                    unsigned int v28 = byte_10040C63D[v27];
                    unsigned int v29 = *(_DWORD *)(a1 + 496) + v28 + ~byte_10040C636[v27];
                    *(_DWORD *)(a1 + 520) = v29 / v28;
                    if ((*(unsigned char *)(a1 + 300) & 2) == 0)
                    {
                      unsigned int v30 = byte_10040C62F[v27];
                      unsigned int v31 = *(_DWORD *)(a1 + 500) + v30 + ~byte_10040C628[v27];
                      *(_DWORD *)(a1 + 504) = v31 / v30;
                      if (v31 < v30 || v29 < v28)
                      {
                        char v4 = v3 + 6;
                        if ((v3 + 6) > 6u) {
                          goto LABEL_4;
                        }
                        uint64_t v32 = (v3 + 6);
                        unsigned int v33 = byte_10040C63D[v32];
                        unsigned int v34 = *(_DWORD *)(a1 + 496) + v33 + ~byte_10040C636[v32];
                        *(_DWORD *)(a1 + 520) = v34 / v33;
                        if ((*(unsigned char *)(a1 + 300) & 2) == 0)
                        {
                          unsigned int v35 = byte_10040C62F[v32];
                          unsigned int v36 = *(_DWORD *)(a1 + 500) + v35 + ~byte_10040C628[v32];
                          *(_DWORD *)(a1 + 504) = v36 / v35;
                          if (v36 < v35 || v34 < v33)
                          {
                            char v4 = v3 + 7;
                            if (v3 < 0xF9) {
                              goto LABEL_4;
                            }
                            uint64_t v37 = (v3 + 7);
                            unsigned int v38 = byte_10040C63D[v37];
                            unsigned int v39 = *(_DWORD *)(a1 + 496) + v38 + ~byte_10040C636[v37];
                            *(_DWORD *)(a1 + 520) = v39 / v38;
                            if ((*(unsigned char *)(a1 + 300) & 2) == 0)
                            {
                              unsigned int v40 = byte_10040C62F[v37];
                              unsigned int v41 = *(_DWORD *)(a1 + 500) + v40 + ~byte_10040C628[v37];
                              *(_DWORD *)(a1 + 504) = v41 / v40;
                              if (v41 < v40 || v39 < v38)
                              {
                                char v4 = v3 + 8;
                                if ((v3 + 8) > 6u) {
                                  goto LABEL_4;
                                }
                                *(_DWORD *)(a1 + 520) = (*(_DWORD *)(a1 + 496)
                                                       + byte_10040C63D[(v3 + 8)]
                                                       + ~byte_10040C636[(v3 + 8)])
                                                      / byte_10040C63D[(v3 + 8)];
                                if ((*(unsigned char *)(a1 + 300) & 2) == 0) {
                                  *(_DWORD *)(a1 + 504) = (*(_DWORD *)(a1 + 500)
                                }
                                                         + byte_10040C62F[(v3 + 8)]
                                                         + ~byte_10040C628[(v3 + 8)])
                                                        / byte_10040C62F[(v3 + 8)];
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    *(unsigned char *)(a1 + 605) = v4;
    return;
  }
LABEL_5:
  if ((*(unsigned char *)(a1 + 296) & 8) == 0)
  {
    sub_1003AEAB4(a1, 0, 0);
    *(void *)(a1 + 336) = 0;
    int v5 = *(_DWORD *)(a1 + 296);
    if ((v5 & 8) == 0)
    {
      *(_DWORD *)(a1 + 292) |= 8u;
      *(_DWORD *)(a1 + 296) = v5 | 8;
    }
  }
  if (*(_DWORD *)(a1 + 304) == 1229209940)
  {
    *(void *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 304) = 0;
    unsigned int v6 = *(_DWORD *)(a1 + 576);
    sub_1003AA28C(a1, v6);
  }
}

uint64_t sub_1003AF2A8(uint64_t a1)
{
  sub_1003A5FE0(a1);
  if (!*(unsigned char *)(a1 + 604))
  {
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 500);
    int v4 = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 520) = v4;
    int v2 = *(_DWORD *)(a1 + 300);
    unsigned int v5 = *(unsigned __int8 *)(a1 + 610);
    if ((v2 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  int v2 = *(_DWORD *)(a1 + 300);
  unsigned int v3 = *(_DWORD *)(a1 + 500);
  if ((v2 & 2) == 0) {
    unsigned int v3 = (v3 + 7) >> 3;
  }
  *(_DWORD *)(a1 + 504) = v3;
  int v4 = *(_DWORD *)(a1 + 496);
  *(_DWORD *)(a1 + 520) = (v4
                         + byte_10040C63D[*(unsigned __int8 *)(a1 + 605)]
                         + ~byte_10040C636[*(unsigned __int8 *)(a1 + 605)])
                        / byte_10040C63D[*(unsigned __int8 *)(a1 + 605)];
  unsigned int v5 = *(unsigned __int8 *)(a1 + 610);
  if ((v2 & 4) != 0)
  {
LABEL_5:
    if (*(unsigned __int8 *)(a1 + 608) < 8u) {
      unsigned int v5 = 8;
    }
  }
LABEL_7:
  if ((v2 & 0x1000) == 0)
  {
    if ((v2 & 0x200) != 0) {
      *(_DWORD *)(a1 + 300) = v2 & 0xFFFFFDFF;
    }
    goto LABEL_25;
  }
  int v6 = *(unsigned __int8 *)(a1 + 607);
  if (!*(unsigned char *)(a1 + 607))
  {
    if (v5 <= 8) {
      unsigned int v5 = 8;
    }
    v5 <<= *(_WORD *)(a1 + 600) != 0;
    goto LABEL_23;
  }
  if (v6 != 2)
  {
    if (v6 == 3)
    {
      if (*(_WORD *)(a1 + 600)) {
        unsigned int v5 = 32;
      }
      else {
        unsigned int v5 = 24;
      }
      if ((v2 & 0x200) == 0) {
        goto LABEL_25;
      }
LABEL_24:
      v5 <<= *(unsigned __int8 *)(a1 + 608) < 0x10u;
      goto LABEL_25;
    }
LABEL_23:
    if ((v2 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (*(_WORD *)(a1 + 600)) {
    unsigned int v5 = (87384 * v5) >> 16;
  }
  if ((v2 & 0x200) != 0) {
    goto LABEL_24;
  }
LABEL_25:
  unsigned int v7 = *(_DWORD *)(a1 + 300);
  if ((v7 & 0x8000) != 0)
  {
    if (v5 <= 0x20) {
      int v13 = 32;
    }
    else {
      int v13 = 64;
    }
    if (v5 >= 9) {
      int v14 = 32;
    }
    else {
      int v14 = 16;
    }
    if (!*(unsigned char *)(a1 + 607)) {
      unsigned int v5 = v14;
    }
    if (*(unsigned __int8 *)(a1 + 607) - 2 < 2) {
      unsigned int v5 = v13;
    }
    if ((v7 & 0x4000) == 0)
    {
LABEL_27:
      if ((v7 & 0x100000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_28;
    }
  }
  else if ((v7 & 0x4000) == 0)
  {
    goto LABEL_27;
  }
  if ((v7 & 0x8000) != 0
    || ((*(_WORD *)(a1 + 600) != 0) & (v7 >> 12)) != 0
    || (int v15 = *(unsigned __int8 *)(a1 + 607), v15 == 4))
  {
    if (v5 >= 0x11) {
      unsigned int v5 = 64;
    }
    else {
      unsigned int v5 = 32;
    }
    if ((v7 & 0x100000) == 0) {
      goto LABEL_30;
    }
  }
  else
  {
    BOOL v20 = v15 == 6;
    if (v15 == 6) {
      int v21 = 64;
    }
    else {
      int v21 = 48;
    }
    if (v20) {
      int v22 = 32;
    }
    else {
      int v22 = 24;
    }
    if (v5 <= 8) {
      unsigned int v5 = v22;
    }
    else {
      unsigned int v5 = v21;
    }
    if ((v7 & 0x100000) == 0) {
      goto LABEL_30;
    }
  }
LABEL_28:
  if (*(unsigned __int8 *)(a1 + 289) * *(unsigned __int8 *)(a1 + 288) > v5) {
    unsigned int v5 = *(unsigned __int8 *)(a1 + 289) * *(unsigned __int8 *)(a1 + 288);
  }
LABEL_30:
  *(unsigned char *)(a1 + 614) = v5;
  *(unsigned char *)(a1 + 615) = 0;
  unsigned int v8 = (v4 + 7) & 0xFFFFFFF8;
  unint64_t v9 = v8 * (unint64_t)(v5 >> 3);
  unint64_t v10 = (v8 * (unint64_t)v5) >> 3;
  if (v5 > 7) {
    unint64_t v10 = v9;
  }
  size_t v11 = v10 + ((v5 + 7) >> 3) + 49;
  if (v11 > *(void *)(a1 + 1096))
  {
    sub_1003A46CC(a1, *(void **)(a1 + 1008));
    sub_1003A46CC(a1, *(void **)(a1 + 1128));
    if (*(unsigned char *)(a1 + 604)) {
      uint64_t v12 = sub_1003A46EC(a1, v11);
    }
    else {
      uint64_t v12 = sub_1003A4784((void *)a1, v11);
    }
    *(void *)(a1 + 1008) = v12;
    unsigned int v16 = sub_1003A4784((void *)a1, v11);
    *(void *)(a1 + 1128) = v16;
    *(void *)(a1 + 544) = ((*(void *)(a1 + 1008) + 32) & 0xFFFFFFFFFFFFFFF0) - 1;
    *(void *)(a1 + 536) = ((unint64_t)(v16 + 4) & 0xFFFFFFFFFFFFFFF0) - 1;
    *(void *)(a1 + 1096) = v11;
  }
  uint64_t v17 = *(void *)(a1 + 512);
  if (v17 == -1) {
    sub_1003A34AC(a1, "Row has too many bytes to allocate in memory");
  }
  bzero(*(void **)(a1 + 536), v17 + 1);
  unsigned int v18 = *(void **)(a1 + 1104);
  if (v18)
  {
    *(void *)(a1 + 1104) = 0;
    *(void *)(a1 + 1112) = 0;
    sub_1003A46CC(a1, v18);
  }
  uint64_t result = sub_1003AB5E4(a1, 1229209940);
  if (result) {
    sub_1003A34AC(a1, *(const char **)(a1 + 360));
  }
  *(_DWORD *)(a1 + 296) |= 0x40u;
  return result;
}

uint64_t sub_1003AF5E4(uint64_t a1, int a2, char *a3, int *a4, uint64_t a5, unint64_t *a6)
{
  if (*(_DWORD *)(a1 + 304) != a2)
  {
    *(void *)(a1 + 360) = "zstream unclaimed";
    return 4294967294;
  }
  unint64_t v10 = *a6;
  int v11 = *a4;
  uint64_t v12 = (char **)(a1 + 312);
  *(void *)(a1 + 312) = a3;
  if (!a5)
  {
    *(_DWORD *)(a1 + 320) = v11;
    *(void *)(a1 + 336) = v35;
    uint64_t v18 = 1024;
    if (v10 < 0x400) {
      uint64_t v18 = v10;
    }
    *(_DWORD *)(a1 + 344) = v18;
    unint64_t v14 = v10 - v18;
    BOOL v19 = v10 == v18;
    if (*(unsigned char *)(a1 + 616) && v11)
    {
      if (*a3 < 0) {
        goto LABEL_31;
      }
      *(unsigned char *)(a1 + 616) = 0;
    }
    uint64_t v20 = inflate((z_streamp)(a1 + 312), 4 * v19);
    if (v20)
    {
      uint64_t v17 = v20;
    }
    else
    {
      do
      {
        int v30 = *(_DWORD *)(a1 + 320);
        unint64_t v31 = v14 + *(unsigned int *)(a1 + 344);
        *(void *)(a1 + 336) = v35;
        if (v31 >= 0x400) {
          uint64_t v32 = 1024;
        }
        else {
          uint64_t v32 = v31;
        }
        *(_DWORD *)(a1 + 344) = v32;
        unint64_t v14 = v31 - v32;
        BOOL v33 = v31 == v32;
        if (*(unsigned char *)(a1 + 616)) {
          BOOL v34 = v30 == 0;
        }
        else {
          BOOL v34 = 1;
        }
        if (!v34)
        {
          if (**v12 < 0) {
            goto LABEL_31;
          }
          *(unsigned char *)(a1 + 616) = 0;
        }
        uint64_t v21 = inflate((z_streamp)(a1 + 312), 4 * v33);
      }
      while (!v21);
LABEL_50:
      uint64_t v17 = v21;
      if (a5) {
        goto LABEL_33;
      }
    }
    goto LABEL_32;
  }
  *(void *)(a1 + 336) = a5;
  *(_DWORD *)(a1 + 320) = v11;
  uint64_t v13 = 0xFFFFFFFFLL;
  if (v10 < 0xFFFFFFFF) {
    uint64_t v13 = v10;
  }
  *(_DWORD *)(a1 + 344) = v13;
  unint64_t v14 = v10 - v13;
  BOOL v15 = v10 == v13;
  if (!*(unsigned char *)(a1 + 616) || !v11) {
    goto LABEL_9;
  }
  if ((*a3 & 0x80000000) == 0)
  {
    *(unsigned char *)(a1 + 616) = 0;
LABEL_9:
    uint64_t v16 = inflate((z_streamp)(a1 + 312), 4 * v15);
    if (!v16)
    {
      while (1)
      {
        int v22 = *(_DWORD *)(a1 + 320);
        unint64_t v23 = v14 + *(unsigned int *)(a1 + 344);
        if (v23 >= 0xFFFFFFFF) {
          uint64_t v24 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v14 + *(unsigned int *)(a1 + 344);
        }
        *(_DWORD *)(a1 + 344) = v24;
        unint64_t v14 = v23 - v24;
        BOOL v25 = v23 == v24;
        if (*(unsigned char *)(a1 + 616)) {
          BOOL v26 = v22 == 0;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          if (**v12 < 0) {
            goto LABEL_31;
          }
          *(unsigned char *)(a1 + 616) = 0;
        }
        uint64_t v21 = inflate((z_streamp)(a1 + 312), 4 * v25);
        if (v21) {
          goto LABEL_50;
        }
      }
    }
    uint64_t v17 = v16;
    goto LABEL_33;
  }
LABEL_31:
  *(void *)(a1 + 360) = "invalid window size (libpng)";
  uint64_t v17 = 4294967293;
  if (!a5) {
LABEL_32:
  }
    *(void *)(a1 + 336) = 0;
LABEL_33:
  int v27 = *(_DWORD *)(a1 + 320);
  unint64_t v28 = v14 + *(unsigned int *)(a1 + 344);
  if (v28) {
    *a6 -= v28;
  }
  if (v27) {
    *a4 -= v27;
  }
  sub_10039F92C(a1, v17);
  return v17;
}

double sub_1003AF85C(uint64_t a1, int8x16_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = ((unint64_t)*(unsigned __int8 *)(a1 + 19) + 7) >> 3;
  unint64_t v4 = v2 - v3;
  if (v2 > v3)
  {
    unsigned int v5 = &a2->i8[v3];
    if (v4 < 8 || (v5 < &a2->i8[v4] ? (BOOL v6 = &a2->i8[v2] > (__int8 *)a2) : (BOOL v6 = 0), v6))
    {
      unint64_t v8 = ((unint64_t)*(unsigned __int8 *)(a1 + 19) + 7) >> 3;
      goto LABEL_10;
    }
    if (v4 < 0x20)
    {
      unint64_t v7 = 0;
      goto LABEL_17;
    }
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v12 = a2;
    do
    {
      uint64_t v13 = (int8x16_t *)((char *)v12 + v3);
      int8x16_t v14 = *(int8x16_t *)((char *)v12 + v3);
      int8x16_t v15 = *(int8x16_t *)((char *)&v12[1] + v3);
      int8x16_t v16 = *v12;
      int8x16_t v17 = v12[1];
      v12 += 2;
      int8x16_t v18 = vaddq_s8(v16, v14);
      *uint64_t v13 = v18;
      v13[1] = vaddq_s8(v17, v15);
      v11 -= 32;
    }
    while (v11);
    if (v4 != v7)
    {
      if ((v4 & 0x18) == 0)
      {
        unint64_t v8 = v3 + v7;
        v5 += v7;
        goto LABEL_10;
      }
LABEL_17:
      v5 += v4 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v8 = v3 + (v4 & 0xFFFFFFFFFFFFFFF8);
      BOOL v19 = (int8x8_t *)&a2->i8[v7];
      unint64_t v20 = v7 - (v4 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(int8x8_t *)v18.uint64_t i8 = vadd_s8(*v19, *(int8x8_t *)((char *)v19 + v3));
        *(int8x8_t *)((char *)v19++ + v3) = *(int8x8_t *)v18.i8;
        v20 += 8;
      }
      while (v20);
      if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8)) {
        return *(double *)v18.i64;
      }
LABEL_10:
      uint64_t v9 = -(uint64_t)v3;
      uint64_t v10 = v2 - v8;
      do
      {
        *v5 += v5[v9];
        ++v5;
        --v10;
      }
      while (v10);
    }
  }
  return *(double *)v18.i64;
}

double sub_1003AF950(uint64_t a1, int8x16_t *a2, int8x16_t *a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    if (v3 < 8 || (&a3->i8[v3] > (__int8 *)a2 ? (BOOL v4 = &a2->i8[v3] > (__int8 *)a3) : (BOOL v4 = 0), v4))
    {
      unint64_t v5 = 0;
      BOOL v6 = a3;
      unint64_t v7 = a2;
      goto LABEL_10;
    }
    if (v3 < 0x20)
    {
      unint64_t v5 = 0;
      goto LABEL_17;
    }
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v10 = a2 + 1;
    unint64_t v11 = a3 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      int8x16_t v13 = vaddq_s8(v11[-1], v10[-1]);
      int8x16_t v14 = vaddq_s8(*v11, *v10);
      v10[-1] = v13;
      *uint64_t v10 = v14;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 != v5)
    {
      if ((v3 & 0x18) == 0)
      {
        unint64_t v7 = (int8x16_t *)((char *)a2 + v5);
        BOOL v6 = (int8x16_t *)((char *)a3 + v5);
        goto LABEL_10;
      }
LABEL_17:
      unint64_t v15 = v5;
      unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF8;
      BOOL v6 = (int8x16_t *)((char *)a3 + (v3 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v7 = (int8x16_t *)((char *)a2 + (v3 & 0xFFFFFFFFFFFFFFF8));
      int8x16_t v16 = (int8x8_t *)&a2->i8[v15];
      int8x16_t v17 = (int8x8_t *)&a3->i8[v15];
      unint64_t v18 = v15 - (v3 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v19 = *v17++;
        *(int8x8_t *)v13.uint64_t i8 = vadd_s8(v19, *v16);
        *v16++ = *(int8x8_t *)v13.i8;
        v18 += 8;
      }
      while (v18);
      if (v3 == v5) {
        return *(double *)v13.i64;
      }
LABEL_10:
      unint64_t v8 = v3 - v5;
      do
      {
        __int8 v9 = v6->i8[0];
        BOOL v6 = (int8x16_t *)((char *)v6 + 1);
        v7->i8[0] += v9;
        unint64_t v7 = (int8x16_t *)((char *)v7 + 1);
        --v8;
      }
      while (v8);
    }
  }
  return *(double *)v13.i64;
}

double sub_1003AFA40(uint64_t a1, uint8x16_t *a2, uint8x16_t *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 19);
  unint64_t v4 = (unint64_t)(v3 + 7) >> 3;
  uint64_t v5 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 19))
  {
    uint64_t v10 = (int8x16_t *)a2;
    __int8 v9 = a3;
    if (v5 == v4) {
      return *(double *)v13.i64;
    }
    goto LABEL_20;
  }
  if (v4 <= 1) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = (unint64_t)(v3 + 7) >> 3;
  }
  if (v6 < 0x10 || (&a3->i8[v6] > (__int8 *)a2 ? (BOOL v7 = &a2->i8[v6] > (__int8 *)a3) : (BOOL v7 = 0), v7))
  {
    unint64_t v8 = 0;
    __int8 v9 = a3;
    uint64_t v10 = (int8x16_t *)a2;
LABEL_15:
    unint64_t v14 = v6 - v8;
    do
    {
      unsigned int v15 = v9->u8[0];
      __int8 v9 = (uint8x16_t *)((char *)v9 + 1);
      v10->i8[0] += v15 >> 1;
      uint64_t v10 = (int8x16_t *)((char *)v10 + 1);
      --v14;
    }
    while (v14);
    goto LABEL_17;
  }
  unint64_t v8 = v6 & 0x30;
  __int8 v9 = (uint8x16_t *)((char *)a3 + v8);
  uint64_t v10 = (int8x16_t *)&a2->i8[v8];
  unint64_t v11 = v8;
  do
  {
    uint8x16_t v12 = *a3++;
    int8x16_t v13 = (int8x16_t)vsraq_n_u8(*a2, v12, 1uLL);
    *a2++ = (uint8x16_t)v13;
    v11 -= 16;
  }
  while (v11);
  if (v6 != v8) {
    goto LABEL_15;
  }
LABEL_17:
  if (v5 == v4) {
    return *(double *)v13.i64;
  }
LABEL_20:
  unint64_t v16 = v5 - v4;
  uint64_t v17 = -(uint64_t)v4;
  if (v5 - v4 < 8)
  {
    unint64_t v18 = 0;
LABEL_22:
    int8x8_t v19 = (unsigned __int8 *)v9;
    unint64_t v20 = v10;
    goto LABEL_23;
  }
  unint64_t v18 = 0;
  unint64_t v23 = (uint8x16_t *)&v10->i8[v16];
  BOOL v25 = v10 < (int8x16_t *)&v10->i8[v5 - 2 * v4] && (char *)v10 - v4 < (char *)v23;
  BOOL v26 = v9 >= v23 || v10 >= (int8x16_t *)&v9->i8[v16];
  if (!v26 || v25) {
    goto LABEL_22;
  }
  if (v16 >= 0x20)
  {
    unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFE0;
    int v27 = v9 + 1;
    unint64_t v28 = v16 & 0xFFFFFFFFFFFFFFE0;
    unsigned int v29 = v10;
    do
    {
      int8x16_t v13 = vaddq_s8(*v29, (int8x16_t)vhaddq_u8(*(uint8x16_t *)((char *)v29 + v17), v27[-1]));
      int8x16_t v30 = vaddq_s8(v29[1], (int8x16_t)vhaddq_u8(*(uint8x16_t *)((char *)&v29[1] + v17), *v27));
      int8x16_t *v29 = v13;
      v29[1] = v30;
      v29 += 2;
      v27 += 2;
      v28 -= 32;
    }
    while (v28);
    if (v16 == v18) {
      return *(double *)v13.i64;
    }
    if ((v16 & 0x18) == 0)
    {
      unint64_t v20 = (int8x16_t *)((char *)v10 + v18);
      int8x8_t v19 = &v9->u8[v18];
LABEL_23:
      uint64_t v21 = v18 - v5;
      do
      {
        int v22 = *v19++;
        v20->i8[0] += (v20->u8[v17] + v22) >> 1;
        unint64_t v20 = (int8x16_t *)((char *)v20 + 1);
        ++v21;
      }
      while (v17 != v21);
      return *(double *)v13.i64;
    }
  }
  else
  {
    unint64_t v18 = 0;
  }
  unint64_t v31 = v18;
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8;
  int8x8_t v19 = &v9->u8[v16 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v20 = (int8x16_t *)((char *)v10 + (v16 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v32 = (int8x8_t *)&v10->i8[v31];
  BOOL v33 = (uint8x8_t *)&v9->i8[v31];
  unint64_t v34 = v31 - (v16 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    uint8x8_t v35 = *v33++;
    *(int8x8_t *)v13.uint64_t i8 = vadd_s8(*v32, (int8x8_t)vhadd_u8(*(uint8x8_t *)((char *)v32 + v17), v35));
    *v32++ = *(int8x8_t *)v13.i8;
    v34 += 8;
  }
  while (v34);
  if (v16 != v18) {
    goto LABEL_23;
  }
  return *(double *)v13.i64;
}

uint64_t sub_1003AFC20(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(void *)(result + 8);
  int v4 = *a3;
  unsigned __int8 v5 = *a2 + v4;
  *a2 = v5;
  if (v3 >= 2)
  {
    unint64_t v6 = &a2[v3];
    BOOL v7 = a2 + 1;
    unint64_t v8 = a3 + 1;
    do
    {
      int v10 = *v8++;
      int v9 = v10;
      unsigned int v11 = v10 - v4;
      int v12 = v5 - v4;
      if (v10 - v4 >= 0) {
        unsigned int v13 = v11;
      }
      else {
        unsigned int v13 = -v11;
      }
      if (v12 >= 0) {
        unsigned int v14 = v5 - v4;
      }
      else {
        unsigned int v14 = v4 - v5;
      }
      int v15 = v11 + v12;
      if (v15 < 0) {
        int v15 = -v15;
      }
      if (v14 >= v13)
      {
        unsigned int v16 = v13;
      }
      else
      {
        unsigned __int8 v5 = v9;
        unsigned int v16 = v14;
      }
      if (v15 >= v16) {
        LOBYTE(v4) = v5;
      }
      unsigned __int8 v5 = v4 + *v7;
      *v7++ = v5;
      int v4 = v9;
    }
    while (v7 < v6);
  }
  return result;
}

int8x8_t *sub_1003AFC9C(int8x8_t *result, int8x16_t *a2, int8x16_t *a3, double a4, double a5, int8x16_t a6, double a7, int8x16_t a8)
{
  unint64_t v9 = ((unint64_t)result[2].u8[3] + 7) >> 3;
  if (result[2].i8[3])
  {
    int v10 = &a2->i8[v9];
    if (&a2->i8[v9] <= &a2->i8[1]) {
      int v10 = &a2->i8[1];
    }
    uint64_t v11 = v10 - (char *)a2;
    if ((unint64_t)(v10 - (char *)a2) < 0x20
      || (&a3->i8[v11] > (__int8 *)a2 ? (BOOL v12 = v10 > (char *)a3) : (BOOL v12 = 0), v12))
    {
      unsigned int v13 = a2;
      unsigned int v14 = a3;
    }
    else
    {
      unsigned int v13 = (int8x16_t *)((char *)a2 + (v11 & 0xFFFFFFFFFFFFFFE0));
      unsigned int v14 = (int8x16_t *)((char *)a3 + (v11 & 0xFFFFFFFFFFFFFFE0));
      int v15 = a3 + 1;
      unsigned int v16 = a2 + 1;
      unint64_t v17 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        a6 = v15[-1];
        int8x16_t v18 = vaddq_s8(*v15, *v16);
        v16[-1] = vaddq_s8(a6, v16[-1]);
        int8x16_t *v16 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 32;
      }
      while (v17);
      if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_15:
        a3 = v14;
        int8x8_t v20 = result[1];
        if (v13 >= (int8x16_t *)&a2->i8[*(void *)&v20]) {
          return result;
        }
        goto LABEL_18;
      }
    }
    do
    {
      __int8 v19 = v14->i8[0];
      unsigned int v14 = (int8x16_t *)((char *)v14 + 1);
      v13->i8[0] += v19;
      unsigned int v13 = (int8x16_t *)((char *)v13 + 1);
    }
    while (v13 < (int8x16_t *)&a2->i8[v9]);
    goto LABEL_15;
  }
  unsigned int v13 = a2;
  int8x8_t v20 = result[1];
  if (a2 >= (int8x16_t *)&a2->i8[*(void *)&v20]) {
    return result;
  }
LABEL_18:
  uint64_t v21 = -(uint64_t)v9;
  int v22 = &a2->i8[*(void *)&v20];
  unint64_t v23 = &a2->i8[*(void *)&v20] - (__int8 *)v13;
  uint64_t v24 = (int8x16_t *)((char *)a2 + *(void *)&v20);
  if (v23 < 8) {
    goto LABEL_40;
  }
  BOOL v25 = &a3->i8[-v9];
  uint64_t v26 = v22 - &v13->i8[v9];
  unint64_t v27 = (unint64_t)a3->u64 + v26;
  BOOL v28 = v13 >= (int8x16_t *)&v13->i8[v26] || &v13->i8[v21] >= (__int8 *)v24;
  BOOL v29 = !v28;
  BOOL v30 = v13 >= (int8x16_t *)&a3->i8[v23] || a3 >= v24;
  BOOL v31 = !v30;
  BOOL v32 = v25 >= (char *)v24 || (unint64_t)v13 >= v27;
  if (!v32 || v29 || v31)
  {
LABEL_40:
    unint64_t v34 = v13;
    uint8x8_t v35 = a3;
  }
  else
  {
    if (v23 < 0x10)
    {
      uint64_t v33 = 0;
LABEL_61:
      unint64_t v34 = (int8x16_t *)((char *)v13 + (v23 & 0xFFFFFFFFFFFFFFF8));
      uint8x8_t v35 = (int8x16_t *)((char *)a3 + (v23 & 0xFFFFFFFFFFFFFFF8));
      uint64_t result = (int8x8_t *)&a3->i8[v33];
      BOOL v79 = (int8x8_t *)&v13->i8[v33];
      uint64_t v80 = v33 - (v23 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *(int8x8_t *)a6.uint64_t i8 = *(int8x8_t *)((char *)result + v21);
        int32x4_t v81 = (int32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_1004048A0);
        *(int8x8_t *)a8.uint64_t i8 = *(int8x8_t *)((char *)v79 + v21);
        int32x4_t v82 = (int32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_100404890);
        int32x4_t v83 = (int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1004048A0);
        int32x4_t v84 = (int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_100404890);
        int8x8_t v85 = *result++;
        *(int8x8_t *)v8.uint64_t i8 = v85;
        int32x4_t v86 = (int32x4_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_1004048A0);
        int32x4_t v87 = (int32x4_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_100404890);
        int32x4_t v88 = vsubq_s32(v87, v82);
        int32x4_t v89 = vsubq_s32(v86, v81);
        int32x4_t v90 = vsubq_s32(v84, v82);
        int32x4_t v91 = vsubq_s32(v83, v81);
        uint32x4_t v92 = vabdq_u32((uint32x4_t)v82, (uint32x4_t)v87);
        uint32x4_t v93 = vabdq_u32((uint32x4_t)v81, (uint32x4_t)v86);
        uint32x4_t v94 = vabdq_u32((uint32x4_t)v82, (uint32x4_t)v84);
        uint32x4_t v95 = vabdq_u32((uint32x4_t)v81, (uint32x4_t)v83);
        int8x8_t *v79 = vadd_s8(vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(vminq_u32(v94, v92), (uint32x4_t)vabsq_s32(vaddq_s32(v88, v90))), (int16x8_t)vcgtq_u32(vminq_u32(v95, v93), (uint32x4_t)vabsq_s32(vaddq_s32(v89, v91))))), *(int8x8_t *)a6.i8, vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v92, v94), (int16x8_t)vcgtq_u32(v93, v95))), v85, *(int8x8_t *)a8.i8)), *v79);
        ++v79;
        v80 += 8;
      }
      while (v80);
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8)) {
        return result;
      }
      goto LABEL_41;
    }
    uint64_t v33 = v23 & 0xFFFFFFFFFFFFFFF0;
    a6.i64[1] = 0xFFFFFF07FFFFFF06;
    unint64_t v45 = v23 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v46 = v13;
    uint64_t v47 = a3;
    do
    {
      int8x16_t v48 = *(int8x16_t *)((char *)v47 + v21);
      int32x4_t v49 = (int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_1004048C0);
      int32x4_t v50 = (int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_1004048B0);
      int32x4_t v51 = (int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_1004048A0);
      int8x16_t v52 = *(int8x16_t *)((char *)v46 + v21);
      int32x4_t v53 = (int32x4_t)vqtbl1q_s8(v48, (int8x16_t)xmmword_100404890);
      int32x4_t v54 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1004048C0);
      int32x4_t v55 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1004048B0);
      int32x4_t v56 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_1004048A0);
      int32x4_t v57 = (int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_100404890);
      int8x16_t v58 = *v47++;
      int32x4_t v59 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_1004048C0);
      int32x4_t v60 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_1004048B0);
      int32x4_t v61 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_1004048A0);
      int32x4_t v62 = (int32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_100404890);
      int32x4_t v63 = vsubq_s32(v62, v53);
      int32x4_t v64 = vsubq_s32(v61, v51);
      int32x4_t v65 = vsubq_s32(v60, v50);
      int32x4_t v66 = vsubq_s32(v59, v49);
      int32x4_t v67 = vsubq_s32(v57, v53);
      int32x4_t v68 = vsubq_s32(v56, v51);
      int32x4_t v69 = vsubq_s32(v55, v50);
      int32x4_t v70 = vsubq_s32(v54, v49);
      uint32x4_t v71 = vabdq_u32((uint32x4_t)v53, (uint32x4_t)v62);
      uint32x4_t v72 = vabdq_u32((uint32x4_t)v51, (uint32x4_t)v61);
      uint32x4_t v73 = vabdq_u32((uint32x4_t)v50, (uint32x4_t)v60);
      uint32x4_t v74 = vabdq_u32((uint32x4_t)v49, (uint32x4_t)v59);
      uint32x4_t v75 = vabdq_u32((uint32x4_t)v53, (uint32x4_t)v57);
      uint32x4_t v76 = vabdq_u32((uint32x4_t)v51, (uint32x4_t)v56);
      uint32x4_t v77 = vabdq_u32((uint32x4_t)v50, (uint32x4_t)v55);
      uint32x4_t v78 = vabdq_u32((uint32x4_t)v49, (uint32x4_t)v54);
      int8x16_t v8 = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v71, v75), (int16x8_t)vcgtq_u32(v72, v76)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v73, v77), (int16x8_t)vcgtq_u32(v74, v78))), v58, v52);
      a8 = vaddq_s8(vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(vminq_u32(v75, v71), (uint32x4_t)vabsq_s32(vaddq_s32(v63, v67))), (int16x8_t)vcgtq_u32(vminq_u32(v76, v72), (uint32x4_t)vabsq_s32(vaddq_s32(v64, v68)))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(vminq_u32(v77, v73), (uint32x4_t)vabsq_s32(vaddq_s32(v65, v69))), (int16x8_t)vcgtq_u32(vminq_u32(v78, v74), (uint32x4_t)vabsq_s32(vaddq_s32(v66, v70))))), v48, v8), *v46);
      *v46++ = a8;
      v45 -= 16;
    }
    while (v45);
    if (v23 == v33) {
      return result;
    }
    if ((v23 & 8) != 0) {
      goto LABEL_61;
    }
    uint8x8_t v35 = (int8x16_t *)((char *)a3 + v33);
    unint64_t v34 = (int8x16_t *)((char *)v13 + v33);
  }
  do
  {
LABEL_41:
    int v36 = v35->u8[v21];
    int v37 = v34->u8[v21];
    int v39 = v35->u8[0];
    uint8x8_t v35 = (int8x16_t *)((char *)v35 + 1);
    char v38 = v39;
    unsigned int v40 = v39 - v36;
    int v41 = v37 - v36;
    if (v39 - v36 >= 0) {
      unsigned int v42 = v40;
    }
    else {
      unsigned int v42 = -v40;
    }
    if (v41 >= 0) {
      uint64_t result = (int8x8_t *)v41;
    }
    else {
      uint64_t result = (int8x8_t *)(v36 - v37);
    }
    int v43 = v40 + v41;
    if (v43 < 0) {
      int v43 = -v43;
    }
    if (result >= v42)
    {
      unsigned int v44 = v42;
    }
    else
    {
      LOBYTE(v37) = v38;
      unsigned int v44 = result;
    }
    if (v43 >= v44) {
      LOBYTE(v36) = v37;
    }
    v34->i8[0] += v36;
    unint64_t v34 = (int8x16_t *)((char *)v34 + 1);
  }
  while (v34 != v24);
  return result;
}

uint64_t sub_1003B0064(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    if (a3)
    {
      *(void *)(a2 + 202) = *(void *)a3;
      *(_WORD *)(a2 + 210) = *(_WORD *)(a3 + 8);
      *(_DWORD *)(a2 + 8) |= 0x20u;
    }
  }
  return result;
}

void *sub_1003B0090(void *result, uint64_t a2, int a3, uint64_t a4)
{
  if (result && a2)
  {
    BOOL v7 = result;
    int8x16_t v8 = *(void **)(a2 + 240);
    if (v8)
    {
      sub_1003A46CC((uint64_t)result, v8);
      *(void *)(a2 + 240) = 0;
    }
    *(_DWORD *)(a2 + 236) = a3;
    uint64_t result = sub_1003A49AC(v7, a3);
    *(void *)(a2 + 240) = result;
    if (result)
    {
      *(_DWORD *)(a2 + 300) |= 0x8000u;
      if (*(int *)(a2 + 236) >= 1)
      {
        uint64_t v9 = 0;
        do
        {
          *(unsigned char *)(*(void *)(a2 + 240) + v9) = *(unsigned char *)(a4 + v9);
          ++v9;
        }
        while (v9 < *(int *)(a2 + 236));
      }
      *(_DWORD *)(a2 + 8) |= 0x10000u;
    }
    else
    {
      return (void *)sub_1003A3704((uint64_t)v7, (uint64_t)"Insufficient memory for eXIf chunk data");
    }
  }
  return result;
}

void *sub_1003B0168(void *result, uint64_t a2, const void *a3)
{
  if (result && a2)
  {
    int v4 = result;
    if (*(unsigned __int16 *)(a2 + 32) - 257 <= 0xFFFFFEFF)
    {
      unsigned __int8 v5 = "Invalid palette size, hIST allocation skipped";
      return (void *)sub_1003A3704((uint64_t)result, (uint64_t)v5);
    }
    sub_10039F410((uint64_t)result, a2, 8u, 0);
    uint64_t result = sub_1003A49AC(v4, 0x200uLL);
    *(void *)(a2 + 256) = result;
    if (!result)
    {
      unsigned __int8 v5 = "Insufficient memory for hIST chunk data";
      uint64_t result = v4;
      return (void *)sub_1003A3704((uint64_t)result, (uint64_t)v5);
    }
    *(_DWORD *)(a2 + 300) |= 8u;
    if (*(_WORD *)(a2 + 32)) {
      uint64_t result = memcpy(result, a3, 2 * *(unsigned __int16 *)(a2 + 32));
    }
    *(_DWORD *)(a2 + 8) |= 0x40u;
  }
  return result;
}

uint64_t sub_1003B025C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, unsigned __int8 a9)
{
  if (!result || !a2) {
    return result;
  }
  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a4;
  *(unsigned char *)(a2 + 36) = a5;
  *(unsigned char *)(a2 + 37) = a6;
  *(unsigned char *)(a2 + 38) = a8;
  *(unsigned char *)(a2 + 39) = a9;
  *(unsigned char *)(a2 + 40) = a7;
  uint64_t result = sub_1003A14F0(result, a3, a4, a5, a6, a7, a8, a9);
  int v11 = *(unsigned __int8 *)(a2 + 37);
  if (v11 == 3)
  {
    char v12 = 1;
LABEL_7:
    *(unsigned char *)(a2 + 41) = v12;
    goto LABEL_8;
  }
  char v12 = v11 & 2 | 1;
  *(unsigned char *)(a2 + 41) = v12;
  if ((v11 & 4) != 0)
  {
    char v12 = (v11 & 2) + 2;
    goto LABEL_7;
  }
LABEL_8:
  unsigned __int8 v13 = *(unsigned char *)(a2 + 36) * v12;
  *(unsigned char *)(a2 + 42) = v13;
  BOOL v14 = v13 >= 8u;
  unint64_t v15 = (v13 * (unint64_t)a3 + 7) >> 3;
  unint64_t v16 = a3 * (unint64_t)(v13 >> 3);
  if (!v14) {
    unint64_t v16 = v15;
  }
  *(void *)(a2 + 16) = v16;
  return result;
}

uint64_t sub_1003B0330(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if (result)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 212) = a3;
      *(_DWORD *)(a2 + 216) = a4;
      *(unsigned char *)(a2 + 220) = a5;
      *(_DWORD *)(a2 + 8) |= 0x100u;
    }
  }
  return result;
}

void sub_1003B0350(void *a1, uint64_t a2, char *__s, int a4, int a5, unsigned int a6, int a7, const char *a8, const char **a9)
{
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  if (!__s) {
    return;
  }
  if (!a8) {
    return;
  }
  unint64_t v17 = a9;
  if (a7 >= 1 && !a9) {
    return;
  }
  size_t v18 = strlen(__s);
  if (a6 >= 4)
  {
    __int8 v19 = "Invalid pCAL equation type";
LABEL_27:
    sub_1003A41A8((uint64_t)a1, v19, 1);
    return;
  }
  if (a7 > 0xFF)
  {
    __int8 v19 = "Invalid pCAL parameter count";
    goto LABEL_27;
  }
  size_t v32 = v18;
  int v31 = a5;
  if (a7)
  {
    uint64_t v20 = a7;
    while (*v17)
    {
      size_t v21 = strlen(*v17);
      if (!sub_1003A1A00((uint64_t)*v17, v21)) {
        break;
      }
      ++v17;
      if (!--v20) {
        goto LABEL_17;
      }
    }
    __int8 v19 = "Invalid format for pCAL parameter";
    goto LABEL_27;
  }
LABEL_17:
  int v22 = sub_1003A49AC(a1, v32 + 1);
  *(void *)(a2 + 264) = v22;
  if (!v22)
  {
    __int8 v19 = "Insufficient memory for pCAL purpose";
    goto LABEL_27;
  }
  memcpy(v22, __s, v32 + 1);
  *(_DWORD *)(a2 + 272) = a4;
  *(_DWORD *)(a2 + 276) = v31;
  *(unsigned char *)(a2 + 296) = a6;
  *(unsigned char *)(a2 + 297) = a7;
  size_t v23 = strlen(a8) + 1;
  uint64_t v24 = sub_1003A49AC(a1, v23);
  *(void *)(a2 + 280) = v24;
  if (v24)
  {
    memcpy(v24, a8, v23);
    BOOL v25 = sub_1003A49AC(a1, 8 * (a7 + 1));
    *(void *)(a2 + 288) = v25;
    if (v25)
    {
      bzero(v25, 8 * (a7 + 1));
      if (a7 < 1)
      {
LABEL_24:
        *(_DWORD *)(a2 + 8) |= 0x400u;
        *(_DWORD *)(a2 + 300) |= 0x80u;
        return;
      }
      unint64_t v26 = 0;
      uint64_t v27 = 8 * a7;
      while (1)
      {
        size_t v28 = strlen(a9[v26 / 8]) + 1;
        *(void *)(*(void *)(a2 + 288) + v26) = sub_1003A49AC(a1, v28);
        BOOL v29 = *(void **)(*(void *)(a2 + 288) + v26);
        if (!v29) {
          break;
        }
        memcpy(v29, a9[v26 / 8], v28);
        v26 += 8;
        if (v27 == v26) {
          goto LABEL_24;
        }
      }
      BOOL v30 = "Insufficient memory for pCAL parameter";
    }
    else
    {
      BOOL v30 = "Insufficient memory for pCAL params";
    }
  }
  else
  {
    BOOL v30 = "Insufficient memory for pCAL units";
  }

  sub_1003A3704((uint64_t)a1, (uint64_t)v30);
}

void *sub_1003B05E4(void *result, uint64_t a2, int a3, char *__s, const char *a5)
{
  if (result && a2)
  {
    char v6 = a3;
    BOOL v7 = result;
    if ((a3 - 3) <= 0xFFFFFFFD) {
      sub_1003A34AC((uint64_t)result, "Invalid sCAL unit");
    }
    if (!__s || (size_t v10 = strlen(__s)) == 0 || *__s == 45 || (v11 = v10, !sub_1003A1A00((uint64_t)__s, v10))) {
      sub_1003A34AC((uint64_t)v7, "Invalid sCAL width");
    }
    if (!a5 || (size_t v12 = strlen(a5)) == 0 || *a5 == 45 || (v13 = v12, !sub_1003A1A00((uint64_t)a5, v12))) {
      sub_1003A34AC((uint64_t)v7, "Invalid sCAL height");
    }
    *(unsigned char *)(a2 + 332) = v6;
    BOOL v14 = sub_1003A49AC(v7, v11 + 1);
    *(void *)(a2 + 336) = v14;
    if (v14)
    {
      memcpy(v14, __s, v11 + 1);
      unint64_t v15 = sub_1003A49AC(v7, v13 + 1);
      *(void *)(a2 + 344) = v15;
      if (v15)
      {
        uint64_t result = memcpy(v15, a5, v13 + 1);
        *(_DWORD *)(a2 + 8) |= 0x4000u;
        *(_DWORD *)(a2 + 300) |= 0x100u;
        return result;
      }
      sub_1003A46CC((uint64_t)v7, *(void **)(a2 + 336));
      *(void *)(a2 + 336) = 0;
    }
    return (void *)sub_1003A3704((uint64_t)v7, (uint64_t)"Memory allocation failed while processing sCAL");
  }
  return result;
}

uint64_t sub_1003B0778(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if (result)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 224) = a3;
      *(_DWORD *)(a2 + 228) = a4;
      *(unsigned char *)(a2 + 232) = a5;
      *(_DWORD *)(a2 + 8) |= 0x80u;
    }
  }
  return result;
}

unsigned char *sub_1003B0798(unsigned char *result, uint64_t a2, const void *a3, unsigned int a4)
{
  if (!result || !a2) {
    return result;
  }
  BOOL v7 = result;
  if (*(unsigned char *)(a2 + 37) == 3)
  {
    if ((a4 & 0x80000000) != 0 || 1 << *(unsigned char *)(a2 + 36) < (int)a4) {
      sub_1003A34AC((uint64_t)result, "Invalid palette length");
    }
    goto LABEL_11;
  }
  if (a4 <= 0x100)
  {
LABEL_11:
    if (!a3 && a4 || !a4 && (result[976] & 1) == 0) {
      sub_1003A34AC((uint64_t)result, "Invalid palette");
    }
    sub_10039F410((uint64_t)result, a2, 0x1000u, 0);
    uint64_t result = sub_1003A46EC((uint64_t)v7, 0x300uLL);
    int8x16_t v8 = result;
    *((void *)v7 + 73) = result;
    if (a4) {
      uint64_t result = memcpy(result, a3, 3 * a4);
    }
    *(void *)(a2 + 24) = v8;
    *((_WORD *)v7 + 296) = a4;
    *(_WORD *)(a2 + 32) = a4;
    *(_DWORD *)(a2 + 300) |= 0x1000u;
    *(_DWORD *)(a2 + 8) |= 8u;
    return result;
  }

  return (unsigned char *)sub_1003A3704((uint64_t)result, (uint64_t)"Invalid palette length");
}

uint64_t sub_1003B08D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    if (a3)
    {
      *(_DWORD *)(a2 + 176) = *(_DWORD *)a3;
      *(unsigned char *)(a2 + 180) = *(unsigned char *)(a3 + 4);
      *(_DWORD *)(a2 + 8) |= 2u;
    }
  }
  return result;
}

uint64_t sub_1003B08FC(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v4 = 0;
  if (!a3) {
    return v4;
  }
  uint64_t v5 = a1;
  if (!a1) {
    return v4;
  }
  uint64_t v6 = a2;
  if (!a2 || a4 < 1) {
    return v4;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 148);
  if ((int)(*(_DWORD *)(a2 + 152) - v9) < a4)
  {
    if ((v9 ^ 0x7FFFFFFF) < a4
      || ((int)(v9 + a4) >= 2147483639 ? (unsigned int v10 = 0x7FFFFFFF) : (unsigned int v10 = ((v9 + a4) & 0xFFFFFFF8) + 8),
          (size_t v11 = sub_1003A4888(a1, *(const void **)(a2 + 160), v9, v10 - v9, 0x38uLL)) == 0))
    {
      unsigned int v42 = "too many text chunks";
      uint64_t v4 = 1;
      uint64_t v43 = v5;
      goto LABEL_46;
    }
    size_t v12 = v11;
    sub_1003A46CC(v5, *(void **)(v6 + 160));
    *(void *)(v6 + 160) = v12;
    *(_DWORD *)(v6 + 300) |= 0x4000u;
    *(_DWORD *)(v6 + 152) = v10;
  }
  uint64_t v13 = a4;
  BOOL v14 = (const void **)(a3 + 48);
  uint64_t v47 = v5;
  uint64_t v45 = v6;
  while (1)
  {
    unint64_t v15 = (const char *)*(v14 - 5);
    if (!v15) {
      goto LABEL_14;
    }
    int v16 = *((_DWORD *)v14 - 12);
    if ((v16 - 3) > 0xFFFFFFFB) {
      break;
    }
    sub_1003A41A8(v5, "text compression mode is out of range", 1);
LABEL_14:
    v14 += 7;
    if (!--v13) {
      return 0;
    }
  }
  uint64_t v17 = *(void *)(v6 + 160);
  int v18 = *(_DWORD *)(v6 + 148);
  size_t v19 = strlen(v15);
  if (v16 < 1)
  {
    size_t v21 = 0;
    size_t v23 = 0;
    uint64_t v24 = (const char *)*(v14 - 4);
    if (v24) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  uint64_t v20 = (const char *)*(v14 - 1);
  if (v20)
  {
    size_t v21 = strlen(v20);
    int v22 = (const char *)*v14;
    if (*v14) {
      goto LABEL_20;
    }
LABEL_25:
    size_t v23 = 0;
    uint64_t v24 = (const char *)*(v14 - 4);
    if (v24) {
      goto LABEL_26;
    }
LABEL_28:
    size_t v26 = 0;
    if (v16 < 1) {
      int v16 = -1;
    }
    else {
      int v16 = 1;
    }
  }
  else
  {
    size_t v21 = 0;
    int v22 = (const char *)*v14;
    if (!*v14) {
      goto LABEL_25;
    }
LABEL_20:
    size_t v23 = strlen(v22);
    uint64_t v24 = (const char *)*(v14 - 4);
    if (!v24) {
      goto LABEL_28;
    }
LABEL_26:
    if (!*v24) {
      goto LABEL_28;
    }
    size_t v25 = v23;
    size_t v26 = strlen(v24);
    size_t v23 = v25;
  }
  uint64_t v46 = v17 + 56 * v18;
  *(_DWORD *)uint64_t v46 = v16;
  size_t v27 = v23;
  size_t __n = v26;
  size_t v28 = sub_1003A47DC(v47, v19 + v21 + v23 + v26 + 4);
  *(void *)(v46 + 8) = v28;
  BOOL v29 = (void *)(v46 + 8);
  if (v28)
  {
    uint64_t v30 = v17;
    memcpy(v28, *(v14 - 5), v19);
    *(unsigned char *)(*v29 + v19) = 0;
    if (*((int *)v14 - 12) < 1)
    {
      int v32 = v18;
      uint64_t v35 = v30 + 56 * v18;
      *(void *)(v35 + 40) = 0;
      *(void *)(v35 + 48) = 0;
      size_t v27 = v19;
    }
    else
    {
      int v31 = (void *)(*v29 + v19 + 1);
      int v32 = v18;
      uint64_t v33 = v30 + 56 * v18;
      *(void *)(v33 + 40) = v31;
      memcpy(v31, *(v14 - 1), v21);
      *(unsigned char *)(*(void *)(v33 + 40) + v21) = 0;
      unint64_t v34 = (void *)(*(void *)(v33 + 40) + v21 + 1);
      *(void *)(v33 + 48) = v34;
      BOOL v29 = (void *)(v33 + 48);
      memcpy(v34, *v14, v27);
      *(unsigned char *)(*v29 + v27) = 0;
    }
    uint64_t v6 = v45;
    int v36 = (void *)(*v29 + v27 + 1);
    uint64_t v37 = v30 + 56 * v32;
    *(void *)(v37 + 16) = v36;
    char v38 = (void **)(v37 + 16);
    size_t v39 = __n;
    if (__n)
    {
      memcpy(v36, *(v14 - 4), __n);
      size_t v39 = __n;
      int v36 = *v38;
    }
    uint64_t v5 = v47;
    *((unsigned char *)v36 + v39) = 0;
    if (*(int *)v46 <= 0) {
      size_t v40 = v39;
    }
    else {
      size_t v40 = 0;
    }
    if (*(int *)v46 <= 0) {
      size_t v39 = 0;
    }
    uint64_t v41 = v30 + 56 * v32;
    *(void *)(v41 + 24) = v40;
    *(void *)(v41 + 32) = v39;
    ++*(_DWORD *)(v45 + 148);
    goto LABEL_14;
  }
  unsigned int v42 = "text chunk: out of memory";
  uint64_t v4 = 1;
  uint64_t v43 = v47;
LABEL_46:
  sub_1003A41A8(v43, v42, 1);
  return v4;
}

uint64_t sub_1003B0C38(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2 && a3 && (*(unsigned char *)(result + 293) & 2) == 0)
  {
    if (*(unsigned __int8 *)(a3 + 2) - 13 >= 0xFFFFFFF4
      && *(unsigned __int8 *)(a3 + 3) - 32 >= 0xFFFFFFE1
      && *(unsigned __int8 *)(a3 + 4) <= 0x17u
      && *(unsigned __int8 *)(a3 + 5) <= 0x3Bu
      && *(unsigned __int8 *)(a3 + 6) < 0x3Du)
    {
      *(void *)(a2 + 168) = *(void *)a3;
      *(_DWORD *)(a2 + 8) |= 0x200u;
    }
    else
    {
      return sub_1003A3704(result, (uint64_t)"Ignoring invalid time value");
    }
  }
  return result;
}

void sub_1003B0CB4(void *a1, uint64_t a2, const void *a3, unsigned int a4, uint64_t a5)
{
  if (a1 && a2)
  {
    if (a3)
    {
      sub_10039F410((uint64_t)a1, a2, 0x2000u, 0);
      if (a4 - 1 >= 0x100)
      {
        unsigned int v10 = *(void **)(a2 + 184);
      }
      else
      {
        unsigned int v10 = sub_1003A4784(a1, 0x100uLL);
        *(void *)(a2 + 184) = v10;
        memcpy(v10, a3, a4);
      }
      a1[92] = v10;
    }
    if (a5)
    {
      unsigned int v11 = *(unsigned __int8 *)(a2 + 36);
      if (v11 > 0xF) {
        goto LABEL_20;
      }
      unsigned int v12 = ~(-1 << v11);
      if (*(unsigned char *)(a2 + 37) == 2)
      {
        if (*(unsigned __int16 *)(a5 + 2) <= v12
          && *(unsigned __int16 *)(a5 + 4) <= v12
          && *(unsigned __int16 *)(a5 + 6) <= v12)
        {
LABEL_20:
          *(void *)(a2 + 192) = *(void *)a5;
          *(_WORD *)(a2 + 200) = *(_WORD *)(a5 + 8);
          if (a4 <= 1) {
            __int16 v13 = 1;
          }
          else {
            __int16 v13 = a4;
          }
          *(_WORD *)(a2 + 34) = v13;
          goto LABEL_24;
        }
      }
      else if (*(unsigned char *)(a2 + 37) || *(unsigned __int16 *)(a5 + 8) <= v12)
      {
        goto LABEL_20;
      }
      sub_1003A3704((uint64_t)a1, (uint64_t)"tRNS chunk has out-of-range samples for bit_depth");
      goto LABEL_20;
    }
    *(_WORD *)(a2 + 34) = a4;
    if (a4)
    {
LABEL_24:
      *(_DWORD *)(a2 + 8) |= 0x10u;
      *(_DWORD *)(a2 + 300) |= 0x2000u;
    }
  }
}

void sub_1003B0E00(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  if (!a3) {
    return;
  }
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  int v6 = a4;
  if (a4 < 1) {
    return;
  }
  uint64_t v7 = a3;
  int8x16_t v8 = sub_1003A4888(a1, *(const void **)(a2 + 320), *(_DWORD *)(a2 + 328), a4, 0x20uLL);
  if (!v8)
  {
    int v16 = "too many sPLT chunks";
LABEL_18:
    sub_1003A41A8(a1, v16, 1);
    return;
  }
  unsigned int v9 = v8;
  sub_1003A46CC(a1, *(void **)(a2 + 320));
  *(void *)(a2 + 320) = v9;
  *(_DWORD *)(a2 + 300) |= 0x20u;
  for (uint64_t i = &v9[32 * *(int *)(a2 + 328)]; ; i += 32)
  {
    while (1)
    {
      unsigned int v11 = *(const char **)v7;
      if (*(void *)v7)
      {
        if (*(void *)(v7 + 16)) {
          break;
        }
      }
      sub_1003A3EB4(a1, "png_set_sPLT: invalid sPLT");
      if (!--v6) {
        return;
      }
    }
    i[8] = *(unsigned char *)(v7 + 8);
    size_t v12 = strlen(v11) + 1;
    __int16 v13 = sub_1003A47DC(a1, v12);
    *(void *)uint64_t i = v13;
    if (!v13) {
      break;
    }
    memcpy(v13, *(const void **)v7, v12);
    BOOL v14 = sub_1003A4800(a1, *(_DWORD *)(v7 + 24), 0xAuLL);
    *((void *)i + 2) = v14;
    if (!v14)
    {
      sub_1003A46CC(a1, *(void **)i);
      *(void *)uint64_t i = 0;
      break;
    }
    uint64_t v15 = *(unsigned int *)(v7 + 24);
    *((_DWORD *)i + 6) = v15;
    memcpy(v14, *(const void **)(v7 + 16), 10 * v15);
    *(_DWORD *)(a2 + 8) |= 0x2000u;
    ++*(_DWORD *)(a2 + 328);
    v7 += 32;
    if (!--v6) {
      return;
    }
  }
  if (v6 >= 1)
  {
    int v16 = "sPLT out of memory";
    goto LABEL_18;
  }
}

void sub_1003B0FB4(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  if (a3)
  {
    if (a1)
    {
      if (a2)
      {
        int v6 = a4;
        if (a4 >= 1)
        {
          uint64_t v7 = a3;
          int8x16_t v8 = sub_1003A4888(a1, *(const void **)(a2 + 304), *(_DWORD *)(a2 + 312), a4, 0x20uLL);
          if (v8)
          {
            unsigned int v9 = v8;
            sub_1003A46CC(a1, *(void **)(a2 + 304));
            *(void *)(a2 + 304) = v9;
            *(_DWORD *)(a2 + 300) |= 0x200u;
            unsigned int v10 = &v9[32 * *(int *)(a2 + 312)];
            while (1)
            {
              while (1)
              {
                *(_DWORD *)unsigned int v10 = *(_DWORD *)v7;
                v10[4] = 0;
                int v12 = *(unsigned char *)(v7 + 24) & 0xB;
                if (!v12)
                {
                  if ((*(unsigned char *)(a1 + 293) & 0x80) != 0
                    || (sub_1003A3E84(a1, "png_set_unknown_chunks now expects a valid location"),
                        (int v12 = *(_DWORD *)(a1 + 292) & 0xB) == 0))
                  {
                    sub_1003A34AC(a1, "invalid location in png_set_unknown_chunks");
                  }
                }
                do
                {
                  int v13 = v12;
                  int v14 = v12 & -v12;
                  v12 ^= v14;
                }
                while (v13 != v14);
                v10[24] = v13;
                size_t v15 = *(void *)(v7 + 16);
                if (v15) {
                  break;
                }
                *((void *)v10 + 1) = 0;
                *((void *)v10 + 2) = 0;
LABEL_8:
                v10 += 32;
                ++*(_DWORD *)(a2 + 312);
                v7 += 32;
                BOOL v11 = __OFSUB__(v6--, 1);
                if ((v6 < 0) ^ v11 | (v6 == 0)) {
                  return;
                }
              }
              int v16 = sub_1003A47DC(a1, v15);
              *((void *)v10 + 1) = v16;
              if (v16)
              {
                size_t v17 = *(void *)(v7 + 16);
                memcpy(v16, *(const void **)(v7 + 8), v17);
                *((void *)v10 + 2) = v17;
                goto LABEL_8;
              }
              sub_1003A41A8(a1, "unknown chunk: out of memory", 1);
              v7 += 32;
              BOOL v11 = __OFSUB__(v6--, 1);
              if ((v6 < 0) ^ v11 | (v6 == 0)) {
                return;
              }
            }
          }
          sub_1003A41A8(a1, "too many unknown chunks", 1);
        }
      }
    }
  }
}

uint64_t sub_1003B1178(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  if (a2)
  {
    unsigned int v4 = *a2;
    if (*a2)
    {
      unsigned int v5 = 0;
      unsigned int v6 = 0;
      int v7 = 1;
      int8x16_t v8 = a2;
      while (1)
      {
        if (v4 > 0xA0 || v4 - 33 <= 0x5D)
        {
          int v7 = 0;
          *a3++ = v4;
          ++v6;
          unsigned int v9 = *++v8;
          unsigned int v4 = v9;
          if (!v9) {
            goto LABEL_19;
          }
        }
        else
        {
          if (v7)
          {
            if (!v5) {
              unsigned int v5 = v4;
            }
          }
          else
          {
            *a3++ = 32;
            ++v6;
            if (v4 != 32) {
              unsigned int v5 = v4;
            }
          }
          int v7 = 1;
          unsigned int v10 = *++v8;
          unsigned int v4 = v10;
          if (!v10) {
            goto LABEL_19;
          }
        }
        if (v6 >= 0x4F) {
          goto LABEL_19;
        }
      }
    }
    unsigned int v6 = 0;
    unsigned int v5 = 0;
    int v7 = 1;
    int8x16_t v8 = a2;
LABEL_19:
    if (v6) {
      BOOL v12 = v7 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    uint64_t v13 = !v12;
    if ((v13 & (v5 == 0)) != 0) {
      int v14 = 32;
    }
    else {
      int v14 = v5;
    }
    a3[-v13] = 0;
    uint64_t v11 = v6 - v13;
    if (v11)
    {
      if (*v8)
      {
        sub_1003A3704(a1, (uint64_t)"keyword truncated");
      }
      else if (v14)
      {
        memset(v16, 0, sizeof(v16));
        sub_1003A38B4((uint64_t)v16, 1, a2);
        sub_1003A3908((uint64_t)v16, 2, 4, v14);
        sub_1003A3B14(a1, (uint64_t)v16, "keyword \"@1\": bad character '0x@2'");
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    *a3 = 0;
  }
  return v11;
}

uint64_t sub_1003B1328(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 300) |= 1u;
  }
  return result;
}

uint64_t sub_1003B133C(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 608) == 16) {
      *(_DWORD *)(result + 300) |= 0x10u;
    }
  }
  return result;
}

uint64_t sub_1003B135C(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 608) <= 7u)
    {
      *(_DWORD *)(result + 300) |= 4u;
      *(unsigned char *)(result + 609) = 8;
    }
  }
  return result;
}

uint64_t sub_1003B1384(uint64_t a1)
{
  if (!a1 || !*(unsigned char *)(a1 + 604)) {
    return 1;
  }
  *(_DWORD *)(a1 + 300) |= 2u;
  return 7;
}

uint64_t sub_1003B13AC(uint64_t result, int8x16_t *a2)
{
  if (*(unsigned char *)(result + 16) == 4)
  {
    int v5 = *(unsigned __int8 *)(result + 17);
    if (v5 == 16)
    {
      unint64_t v9 = *(void *)(result + 8);
      if (v9)
      {
        for (unint64_t i = 0; i < v9; i += 4)
        {
          uint64_t v11 = &a2->i8[i];
          *uint64_t v11 = ~a2->i8[i];
          v11[1] = ~a2->i8[i + 1];
        }
      }
    }
    else if (v5 == 8)
    {
      unint64_t v6 = *(void *)(result + 8);
      if (v6)
      {
        if (v6 >= 3)
        {
          unint64_t v18 = ((v6 - 1) >> 1) + 1;
          unint64_t v7 = 2 * (v18 & 0xFFFFFFFFFFFFFFFELL);
          int8x16_t v8 = (int8x16_t *)((char *)a2 + v7);
          size_t v19 = &a2->i8[2];
          unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            __int8 v21 = ~*v19;
            *(v19 - 2) = ~*(v19 - 2);
            *size_t v19 = v21;
            v19 += 4;
            v20 -= 2;
          }
          while (v20);
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFFELL)) {
            return result;
          }
        }
        else
        {
          unint64_t v7 = 0;
          int8x16_t v8 = a2;
        }
        do
        {
          v8->i8[0] = ~v8->i8[0];
          int8x16_t v8 = (int8x16_t *)((char *)v8 + 2);
          v7 += 2;
        }
        while (v7 < v6);
      }
    }
  }
  else if (!*(unsigned char *)(result + 16))
  {
    unint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      if (v2 < 8)
      {
        unint64_t v3 = 0;
        unsigned int v4 = a2;
        goto LABEL_31;
      }
      if (v2 >= 0x20)
      {
        unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFE0;
        BOOL v12 = a2 + 1;
        unint64_t v13 = v2 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v14 = vmvnq_s8(*v12);
          v12[-1] = vmvnq_s8(v12[-1]);
          *BOOL v12 = v14;
          v12 += 2;
          v13 -= 32;
        }
        while (v13);
        if (v2 == v3) {
          return result;
        }
        if ((v2 & 0x18) == 0)
        {
          unsigned int v4 = (int8x16_t *)((char *)a2 + v3);
LABEL_31:
          unint64_t v22 = v2 - v3;
          do
          {
            v4->i8[0] = ~v4->i8[0];
            unsigned int v4 = (int8x16_t *)((char *)v4 + 1);
            --v22;
          }
          while (v22);
          return result;
        }
      }
      else
      {
        unint64_t v3 = 0;
      }
      unint64_t v15 = v3;
      unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v4 = (int8x16_t *)((char *)a2 + (v2 & 0xFFFFFFFFFFFFFFF8));
      int v16 = (int8x8_t *)&a2->i8[v15];
      unint64_t v17 = v15 - (v2 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t *v16 = vmvn_s8(*v16);
        ++v16;
        v17 += 8;
      }
      while (v17);
      if (v2 != v3) {
        goto LABEL_31;
      }
    }
  }
  return result;
}

uint64_t sub_1003B1540(uint64_t result, char *a2)
{
  if (*(unsigned char *)(result + 17) == 16)
  {
    uint64_t v2 = *(_DWORD *)result * *(unsigned __int8 *)(result + 18);
    if (v2)
    {
      if (v2 < 8)
      {
        LODWORD(v3) = 0;
        unsigned int v4 = a2;
        goto LABEL_16;
      }
      if (v2 >= 0x20)
      {
        uint64_t v5 = v2 & 0xFFFFFFE0;
        unint64_t v6 = a2 + 32;
        uint64_t v7 = v5;
        do
        {
          int8x16_t v8 = v6 - 32;
          int8x16x2_t v17 = vld2q_s8(v8);
          int8x16x2_t v18 = vld2q_s8(v6);
          int8x16_t v9 = v17.val[0];
          int8x16_t v10 = v18.val[0];
          vst2q_s8(v8, *(int8x16x2_t *)((char *)&v17 + 16));
          vst2q_s8(v6, *(int8x16x2_t *)((char *)&v18 + 16));
          v6 += 64;
          v7 -= 32;
        }
        while (v7);
        if (v5 == v2) {
          return result;
        }
        if ((v2 & 0x18) == 0)
        {
          unsigned int v4 = &a2[2 * v5];
          LODWORD(v3) = v2 & 0xFFFFFFE0;
LABEL_16:
          int v14 = v2 - v3;
          do
          {
            char v15 = *v4;
            *unsigned int v4 = v4[1];
            v4[1] = v15;
            v4 += 2;
            --v14;
          }
          while (v14);
          return result;
        }
      }
      else
      {
        uint64_t v5 = 0;
      }
      uint64_t v3 = v2 & 0xFFFFFFF8;
      unsigned int v4 = &a2[2 * v3];
      uint64_t v11 = &a2[2 * v5];
      uint64_t v12 = v5 - v3;
      do
      {
        int8x8x2_t v16 = vld2_s8(v11);
        int8x8_t v13 = v16.val[0];
        vst2_s8(v11, *(int8x8x2_t *)((char *)&v16 + 8));
        v11 += 16;
        v12 += 8;
      }
      while (v12);
      if (v3 != v2) {
        goto LABEL_16;
      }
    }
  }
  return result;
}

uint64_t sub_1003B1620(uint64_t result, unsigned char *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 17);
  if (v2 <= 7)
  {
    uint64_t v3 = *(void *)(result + 8);
    switch(v2)
    {
      case 1u:
        unsigned int v4 = &unk_10040C644;
        if (v3 < 1) {
          return result;
        }
        break;
      case 4u:
        unsigned int v4 = &unk_10040C844;
        if (v3 < 1) {
          return result;
        }
        break;
      case 2u:
        unsigned int v4 = &unk_10040C744;
        if (v3 < 1) {
          return result;
        }
        break;
      default:
        return result;
    }
    uint64_t v5 = &a2[v3];
    do
    {
      *a2 = v4[*a2];
      ++a2;
    }
    while (a2 < v5);
  }
  return result;
}

uint64_t sub_1003B169C(uint64_t result, unsigned char *a2, int a3)
{
  uint64_t v3 = *(void *)(result + 8);
  unint64_t v4 = (unint64_t)&a2[v3];
  int v5 = *(unsigned __int8 *)(result + 18);
  if (v5 == 4)
  {
    int v10 = *(unsigned __int8 *)(result + 17);
    if (v10 == 16)
    {
      uint64_t v16 = 8;
      if (a3) {
        uint64_t v16 = 2;
      }
      uint64_t v17 = 6;
      if (a3) {
        uint64_t v17 = 0;
      }
      int8x16_t v8 = &a2[v17];
      if (v16 < v3)
      {
        int8x16x2_t v18 = &a2[v16];
        do
        {
          *int8x16_t v8 = *v18;
          v8[1] = v18[1];
          v8[2] = v18[2];
          v8[3] = v18[3];
          v8[4] = v18[4];
          v8[5] = v18[5];
          v8 += 6;
          v18 += 8;
        }
        while ((unint64_t)v18 < v4);
      }
      *(unsigned char *)(result + 19) = 48;
      *(unsigned char *)(result + 18) = 3;
      if (*(unsigned char *)(result + 16) != 6) {
        goto LABEL_44;
      }
    }
    else
    {
      if (v10 != 8) {
        return result;
      }
      if (a3) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = 4;
      }
      uint64_t v12 = 3;
      if (a3) {
        uint64_t v12 = 0;
      }
      int8x16_t v8 = &a2[v12];
      if (v11 < v3)
      {
        int8x8_t v13 = &a2[v11];
        do
        {
          *int8x16_t v8 = *v13;
          v8[1] = v13[1];
          v8[2] = v13[2];
          v8 += 3;
          v13 += 4;
        }
        while ((unint64_t)v13 < v4);
      }
      *(unsigned char *)(result + 19) = 24;
      *(unsigned char *)(result + 18) = 3;
      if (*(unsigned char *)(result + 16) != 6) {
        goto LABEL_44;
      }
    }
    *(unsigned char *)(result + 16) = 2;
    goto LABEL_44;
  }
  if (v5 != 2) {
    return result;
  }
  int v6 = *(unsigned __int8 *)(result + 17);
  if (v6 != 16)
  {
    if (v6 != 8) {
      return result;
    }
    if (a3) {
      uint64_t v7 = a2 + 1;
    }
    else {
      uint64_t v7 = a2 + 2;
    }
    if (a3) {
      int8x16_t v8 = a2;
    }
    else {
      int8x16_t v8 = a2 + 1;
    }
    for (; (unint64_t)v7 < v4; ++v8)
    {
      char v9 = *v7;
      v7 += 2;
      *int8x16_t v8 = v9;
    }
LABEL_31:
    *(unsigned char *)(result + 19) = v6;
    *(unsigned char *)(result + 18) = 1;
    if (*(unsigned char *)(result + 16) != 4) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  int v14 = a2 + 4;
  if (a3)
  {
    int v14 = a2 + 2;
    char v15 = a2;
  }
  else
  {
    char v15 = a2 + 2;
  }
  if ((unint64_t)v14 < v4)
  {
    do
    {
      *char v15 = *v14;
      int8x16_t v8 = v15 + 2;
      v15[1] = v14[1];
      v14 += 4;
      v15 += 2;
    }
    while ((unint64_t)v14 < v4);
    goto LABEL_31;
  }
  int8x16_t v8 = v15;
  *(unsigned char *)(result + 19) = 16;
  *(unsigned char *)(result + 18) = 1;
  if (*(unsigned char *)(result + 16) == 4) {
LABEL_43:
  }
    *(unsigned char *)(result + 16) = 0;
LABEL_44:
  *(void *)(result + 8) = v8 - a2;
  return result;
}

unsigned int *sub_1003B1890(unsigned int *result, char *a2)
{
  int v2 = *((unsigned __int8 *)result + 16);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *result;
    int v4 = *((unsigned __int8 *)result + 17);
    if (v4 == 16)
    {
      if (v2 == 2)
      {
        for (; v3; LODWORD(v3) = v3 - 1)
        {
          __int16 v11 = *(_WORD *)a2;
          *(_WORD *)a2 = *((_WORD *)a2 + 2);
          *((_WORD *)a2 + 2) = v11;
          a2 += 6;
        }
      }
      else if (v2 == 6 && v3 != 0)
      {
        do
        {
          __int16 v8 = *(_WORD *)a2;
          *(_WORD *)a2 = *((_WORD *)a2 + 2);
          *((_WORD *)a2 + 2) = v8;
          a2 += 8;
          LODWORD(v3) = v3 - 1;
        }
        while (v3);
      }
    }
    else
    {
      if (v4 != 8) {
        return result;
      }
      if (v2 == 2)
      {
        if (!v3) {
          return result;
        }
        if (v3 == 1)
        {
          LODWORD(v9) = 0;
          int v10 = a2;
        }
        else
        {
          uint64_t v9 = v3 & 0xFFFFFFFE;
          int v10 = &a2[3 * v9];
          size_t v19 = a2 + 2;
          uint64_t v20 = v9;
          do
          {
            char v21 = *(v19 - 2);
            char v22 = v19[1];
            char v23 = v19[3];
            *(v19 - 2) = *v19;
            v19[1] = v23;
            *size_t v19 = v21;
            v19[3] = v22;
            v19 += 6;
            v20 -= 2;
          }
          while (v20);
          if (v9 == v3) {
            return result;
          }
        }
        int v24 = v3 - v9;
        do
        {
          char v25 = *v10;
          *int v10 = v10[2];
          v10[2] = v25;
          v10 += 3;
          --v24;
        }
        while (v24);
        return result;
      }
      if (v2 == 6 && v3)
      {
        if (v3 == 1)
        {
          LODWORD(v5) = 0;
          int v6 = a2;
LABEL_25:
          int v17 = v3 - v5;
          do
          {
            char v18 = *v6;
            *int v6 = v6[2];
            v6[2] = v18;
            v6 += 4;
            --v17;
          }
          while (v17);
          return result;
        }
        uint64_t v5 = v3 & 0xFFFFFFFE;
        int v6 = &a2[4 * v5];
        uint64_t v12 = a2 + 4;
        uint64_t v13 = v5;
        do
        {
          char v14 = *(v12 - 4);
          char v15 = *v12;
          char v16 = v12[2];
          *(v12 - 4) = *(v12 - 2);
          *uint64_t v12 = v16;
          *(v12 - 2) = v14;
          v12[2] = v15;
          v12 += 8;
          v13 -= 2;
        }
        while (v13);
        if (v5 != v3) {
          goto LABEL_25;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003B1A1C(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 17);
  if (*(_WORD *)(result + 592)) {
    BOOL v3 = 1 << v2 <= *(unsigned __int16 *)(result + 592);
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    int v4 = v2 - 1;
    int v5 = -(*(_DWORD *)a2 * *(unsigned __int8 *)(a2 + 19)) & 7;
    unint64_t v6 = *(void *)(result + 544);
    unint64_t v7 = v6 + *(void *)(a2 + 8);
    __int16 v8 = (unsigned __int8 *)(v7 - 1);
    switch(v4)
    {
      case 0:
        if ((unint64_t)v8 > v6)
        {
          if (*v8 >> v5) {
            *(_DWORD *)(result + 596) = 1;
          }
          for (unint64_t i = (unsigned char *)(v7 - 2); (unint64_t)i > v6; --i)
          {
            if (*i) {
              *(_DWORD *)(result + 596) = 1;
            }
          }
        }
        break;
      case 1:
        if ((unint64_t)v8 > v6)
        {
          int v24 = *(_DWORD *)(result + 596);
          unsigned int v25 = *v8 >> v5;
          int v26 = v25 & 3;
          if (v26 <= v24) {
            unsigned int v27 = *(_DWORD *)(result + 596);
          }
          else {
            unsigned int v27 = v25 & 3;
          }
          unsigned int v28 = (v25 >> 2) & 3;
          if (v28 <= v27) {
            unsigned int v29 = v27;
          }
          else {
            unsigned int v29 = (v25 >> 2) & 3;
          }
          unsigned int v30 = (v25 >> 4) & 3;
          if (v30 <= v29) {
            unsigned int v31 = v29;
          }
          else {
            unsigned int v31 = (v25 >> 4) & 3;
          }
          unsigned int v32 = v25 >> 6;
          if (v25 >> 6 <= v31) {
            unsigned int v33 = v31;
          }
          else {
            unsigned int v33 = v25 >> 6;
          }
          if (v26 > v24 || v28 > v27 || v30 > v29 || v32 > v31) {
            *(_DWORD *)(result + 596) = v33;
          }
          for (uint64_t j = (unsigned __int8 *)(v7 - 2); (unint64_t)j > v6; --j)
          {
            unsigned int v38 = v33;
            unsigned int v39 = *j;
            int v40 = v39 & 3;
            if (v40 <= (int)v38) {
              unsigned int v41 = v38;
            }
            else {
              unsigned int v41 = v39 & 3;
            }
            unsigned int v42 = (v39 >> 2) & 3;
            if (v42 <= v41) {
              unsigned int v43 = v41;
            }
            else {
              unsigned int v43 = (v39 >> 2) & 3;
            }
            unsigned int v44 = (v39 >> 4) & 3;
            if (v44 <= v43) {
              unsigned int v45 = v43;
            }
            else {
              unsigned int v45 = (v39 >> 4) & 3;
            }
            unsigned int v46 = v39 >> 6;
            if (v39 >> 6 <= v45) {
              unsigned int v33 = v45;
            }
            else {
              unsigned int v33 = v39 >> 6;
            }
            if (v40 > v38 || v42 > v41 || v44 > v43 || v46 > v45) {
              *(_DWORD *)(result + 596) = v33;
            }
          }
        }
        break;
      case 3:
        if ((unint64_t)v8 > v6)
        {
          int v10 = *(_DWORD *)(result + 596);
          unsigned int v11 = *v8 >> v5;
          int v12 = v11 & 0xF;
          if (v12 <= v10) {
            unsigned int v13 = *(_DWORD *)(result + 596);
          }
          else {
            unsigned int v13 = v11 & 0xF;
          }
          unsigned int v14 = v11 >> 4;
          if (v11 >> 4 <= v13) {
            unsigned int v15 = v13;
          }
          else {
            unsigned int v15 = v11 >> 4;
          }
          if (v12 > v10 || v14 > v13) {
            *(_DWORD *)(result + 596) = v15;
          }
          for (uint64_t k = (unsigned __int8 *)(v7 - 2); (unint64_t)k > v6; --k)
          {
            unsigned int v18 = v15;
            unsigned int v19 = *k;
            int v20 = v19 & 0xF;
            if (v20 <= (int)v18) {
              unsigned int v21 = v18;
            }
            else {
              unsigned int v21 = v19 & 0xF;
            }
            unsigned int v22 = v19 >> 4;
            if (v19 >> 4 <= v21) {
              unsigned int v15 = v21;
            }
            else {
              unsigned int v15 = v19 >> 4;
            }
            if (v20 > v18 || v22 > v21) {
              *(_DWORD *)(result + 596) = v15;
            }
          }
        }
        break;
      case 7:
        if ((unint64_t)v8 > v6)
        {
          int v50 = *(_DWORD *)(result + 596);
          do
          {
            int v51 = *v8;
            if (v50 < v51)
            {
              *(_DWORD *)(result + 596) = v51;
              int v50 = v51;
            }
            --v8;
          }
          while ((unint64_t)v8 > v6);
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1003B1C70(uint64_t a1)
{
  unsigned int v1 = *(uint64_t (**)(void))(a1 + 240);
  if (!v1) {
    sub_1003A34AC(a1, "Call to NULL write function");
  }

  return v1();
}

size_t sub_1003B1CA8(size_t result, void *__ptr, size_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = fwrite(__ptr, 1uLL, a3, *(FILE **)(result + 256));
    if (result != a3) {
      sub_1003A34AC(v4, "Write Error");
    }
  }
  return result;
}

uint64_t sub_1003B1CF8(uint64_t result)
{
  unsigned int v1 = *(uint64_t (**)(void))(result + 648);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1003B1D08(uint64_t result)
{
  if (result) {
    return fflush(*(FILE **)(result + 256));
  }
  return result;
}

void *sub_1003B1D18(void *result, uint64_t a2, size_t (*a3)(size_t result, void *__ptr, size_t a3), uint64_t (*a4)(uint64_t result))
{
  if (result)
  {
    result[32] = a2;
    if (a3) {
      uint64_t v4 = a3;
    }
    else {
      uint64_t v4 = sub_1003B1CA8;
    }
    result[30] = v4;
    if (a4) {
      int v5 = a4;
    }
    else {
      int v5 = sub_1003B1D08;
    }
    result[81] = v5;
    if (result[31])
    {
      result[31] = 0;
      return (void *)sub_1003A3704((uint64_t)result, (uint64_t)"Can't set both read_data_fn and write_data_fn in the same structure");
    }
  }
  return result;
}

uint64_t sub_1003B1D6C(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 293) & 4) != 0) {
    return result;
  }
  sub_1003B38E0(result);
  if ((*(unsigned char *)(v3 + 293) & 0x10) != 0 && *(_DWORD *)(v3 + 976))
  {
    sub_1003A3704(v3, (uint64_t)"MNG features are not allowed in a PNG datastream");
    *(_DWORD *)(v3 + 976) = 0;
  }
  uint64_t result = sub_1003B3B24(v3, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), *(unsigned __int8 *)(a2 + 38), *(unsigned __int8 *)(a2 + 39), *(unsigned __int8 *)(a2 + 40));
  __int16 v4 = *(_WORD *)(a2 + 126);
  if ((v4 & 0x8008) == 8)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_11;
    }
    uint64_t result = sub_1003B49FC(v3, *(_DWORD *)(a2 + 52));
    __int16 v4 = *(_WORD *)(a2 + 126);
  }
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    int v5 = *(_DWORD *)(a2 + 8);
    if ((v5 & 0x1000) != 0)
    {
      if ((v5 & 0x800) != 0) {
        sub_1003A3E84(v3, "profile matches sRGB but writing iCCP instead");
      }
      uint64_t result = sub_1003B4A94(v3, *(unsigned __int8 **)(a2 + 128), *(void *)(a2 + 136));
    }
    else if ((v5 & 0x800) != 0)
    {
      uint64_t result = sub_1003B4A34(v3, *(unsigned __int16 *)(a2 + 124));
    }
  }
  if ((*(unsigned char *)(a2 + 8) & 2) != 0) {
    uint64_t result = sub_1003B5338(v3, (unsigned __int8 *)(a2 + 176), *(unsigned __int8 *)(a2 + 37));
  }
  if ((*(_WORD *)(a2 + 126) & 0x8010) == 0x10 && (*(unsigned char *)(a2 + 8) & 4) != 0) {
    uint64_t result = sub_1003B5438(v3, (unsigned int *)(a2 + 56));
  }
  uint64_t v6 = *(int *)(a2 + 312);
  if ((int)v6 > 0)
  {
    unint64_t v7 = *(void *)(a2 + 304);
    unint64_t v8 = v7 + 32 * v6;
    do
    {
      if (*(unsigned char *)(v7 + 24))
      {
        uint64_t result = sub_10039F87C(v3, (_DWORD *)v7);
        if (result != 1
          && (result == 3 || (*(unsigned char *)(v7 + 3) & 0x20) != 0 || !result && *(_DWORD *)(v3 + 952) == 3))
        {
          unint64_t v9 = *(void *)(v7 + 16);
          if (!v9)
          {
            sub_1003A3704(v3, (uint64_t)"Writing zero-length unknown chunk");
            unint64_t v9 = *(void *)(v7 + 16);
          }
          uint64_t result = sub_1003B3980(v3, (unsigned int *)v7, *(Bytef **)(v7 + 8), v9);
        }
      }
      v7 += 32;
    }
    while (v7 < v8);
  }
  *(_DWORD *)(v3 + 292) |= 0x400u;
  return result;
}

void sub_1003B1F4C(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return;
  }
  sub_1003B1D6C(a1, a2);
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 8) != 0)
  {
    sub_1003B3E3C(a1, *(void *)(a2 + 24), *(unsigned __int16 *)(a2 + 32));
    int v4 = *(_DWORD *)(a2 + 8);
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 37) == 3) {
      sub_1003A34AC(a1, "Valid palette required for paletted images");
    }
    if ((v4 & 0x10) == 0)
    {
LABEL_6:
      if ((v4 & 0x20) == 0) {
        goto LABEL_7;
      }
      goto LABEL_26;
    }
  }
  if ((*(unsigned char *)(a1 + 302) & 8) != 0 && *(unsigned char *)(a2 + 37) == 3)
  {
    uint64_t v5 = *(unsigned __int16 *)(a2 + 34) >= 0x100u ? 256 : *(unsigned __int16 *)(a2 + 34);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(unsigned char *)(*(void *)(a2 + 184) + i) = ~*(unsigned char *)(*(void *)(a2 + 184) + i);
    }
  }
  sub_1003B5514(a1, *(Bytef **)(a2 + 184), (unsigned __int16 *)(a2 + 192), *(unsigned __int16 *)(a2 + 34), *(unsigned __int8 *)(a2 + 37));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  sub_1003B56B4(a1, (unsigned __int8 *)(a2 + 202), *(unsigned __int8 *)(a2 + 37));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  sub_1003B5828(a1, *(Bytef **)(a2 + 240), *(_DWORD *)(a2 + 236));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  sub_1003B5980(a1, *(unsigned __int16 **)(a2 + 256), *(unsigned __int16 *)(a2 + 32));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  sub_1003B6470(a1, *(_DWORD *)(a2 + 212), *(_DWORD *)(a2 + 216), *(unsigned __int8 *)(a2 + 220));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  sub_1003B6530(a1, *(unsigned __int8 **)(a2 + 264), *(_DWORD *)(a2 + 272), *(_DWORD *)(a2 + 276), *(unsigned __int8 *)(a2 + 296), *(unsigned __int8 *)(a2 + 297), *(const char **)(a2 + 280), *(Bytef ***)(a2 + 288));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  sub_1003B6840(a1, *(unsigned char *)(a2 + 332), *(char **)(a2 + 336), *(const char **)(a2 + 344));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  sub_1003B6978(a1, *(_DWORD *)(a2 + 224), *(_DWORD *)(a2 + 228), *(unsigned __int8 *)(a2 + 232));
  int v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_37;
    }
LABEL_34:
    if (*(int *)(a2 + 328) >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      do
      {
        sub_1003B4FDC(a1, *(void *)(a2 + 320) + v7);
        ++v8;
        v7 += 32;
      }
      while (v8 < *(int *)(a2 + 328));
    }
    goto LABEL_37;
  }
LABEL_33:
  sub_1003B6A4C(a1, (unsigned __int16 *)(a2 + 168));
  *(_DWORD *)(a1 + 292) |= 0x200u;
  if ((*(_DWORD *)(a2 + 8) & 0x2000) != 0) {
    goto LABEL_34;
  }
LABEL_37:
  if (*(int *)(a2 + 148) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a2 + 160);
    do
    {
      int v12 = *(_DWORD *)(v11 + v9);
      if (v12 < 1)
      {
        if (v12 != -1)
        {
          if (!v12)
          {
            sub_1003B5CDC(a1, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 16), 0);
            uint64_t v11 = *(void *)(a2 + 160);
            *(_DWORD *)(v11 + v9) = -2;
          }
          goto LABEL_41;
        }
        sub_1003B5B18((_DWORD *)a1, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 16));
        uint64_t v11 = *(void *)(a2 + 160);
      }
      else
      {
        sub_1003B5FF8(a1, v12, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 40), *(char **)(v11 + v9 + 48), *(char **)(v11 + v9 + 16));
        uint64_t v11 = *(void *)(a2 + 160);
        if (*(_DWORD *)(v11 + v9) != -1)
        {
          *(_DWORD *)(v11 + v9) = -2;
          goto LABEL_41;
        }
      }
      *(_DWORD *)(v11 + v9) = -3;
LABEL_41:
      ++v10;
      v9 += 56;
    }
    while (v10 < *(int *)(a2 + 148));
  }
  uint64_t v13 = *(int *)(a2 + 312);
  if ((int)v13 > 0)
  {
    unint64_t v14 = *(void *)(a2 + 304);
    unint64_t v15 = v14 + 32 * v13;
    do
    {
      if ((*(unsigned char *)(v14 + 24) & 2) != 0)
      {
        int v17 = sub_10039F87C(a1, (_DWORD *)v14);
        if (v17 != 1 && (v17 == 3 || (*(unsigned char *)(v14 + 3) & 0x20) != 0 || !v17 && *(_DWORD *)(a1 + 952) == 3))
        {
          unint64_t v16 = *(void *)(v14 + 16);
          if (!v16)
          {
            sub_1003A3704(a1, (uint64_t)"Writing zero-length unknown chunk");
            unint64_t v16 = *(void *)(v14 + 16);
          }
          sub_1003B3980(a1, (unsigned int *)v14, *(Bytef **)(v14 + 8), v16);
        }
      }
      v14 += 32;
    }
    while (v14 < v15);
  }
}

uint64_t sub_1003B22C4(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((*(unsigned char *)(result + 292) & 4) == 0) {
      sub_1003A34AC(result, "No IDATs written into file");
    }
    if (*(_DWORD *)(result + 596) > (int)*(unsigned __int16 *)(result + 592)) {
      sub_1003A3C8C(result, "Wrote palette index exceeding num_palette");
    }
    if (a2)
    {
      if ((*(unsigned char *)(a2 + 9) & 2) != 0 && (*(unsigned char *)(v2 + 293) & 2) == 0) {
        sub_1003B6A4C(v2, (unsigned __int16 *)(a2 + 168));
      }
      if (*(int *)(a2 + 148) >= 1)
      {
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        uint64_t v6 = *(void *)(a2 + 160);
        do
        {
          int v7 = *(_DWORD *)(v6 + v4);
          if (v7 < 1)
          {
            if ((v7 & 0x80000000) == 0)
            {
              sub_1003B5CDC(v2, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 16), 0);
              uint64_t v6 = *(void *)(a2 + 160);
              *(_DWORD *)(v6 + v4) = -2;
              goto LABEL_12;
            }
            if (v7 != -1) {
              goto LABEL_12;
            }
            sub_1003B5B18((_DWORD *)v2, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 16));
            uint64_t v6 = *(void *)(a2 + 160);
          }
          else
          {
            sub_1003B5FF8(v2, v7, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 40), *(char **)(v6 + v4 + 48), *(char **)(v6 + v4 + 16));
            uint64_t v6 = *(void *)(a2 + 160);
            if (*(_DWORD *)(v6 + v4) != -1)
            {
              *(_DWORD *)(v6 + v4) = -2;
              goto LABEL_12;
            }
          }
          *(_DWORD *)(v6 + v4) = -3;
LABEL_12:
          ++v5;
          v4 += 56;
        }
        while (v5 < *(int *)(a2 + 148));
      }
      if (*(unsigned char *)(a2 + 10)) {
        sub_1003B5828(v2, *(Bytef **)(a2 + 240), *(_DWORD *)(a2 + 236));
      }
      uint64_t v8 = *(int *)(a2 + 312);
      if ((int)v8 > 0)
      {
        unint64_t v9 = *(void *)(a2 + 304);
        unint64_t v10 = v9 + 32 * v8;
        do
        {
          if ((*(unsigned char *)(v9 + 24) & 8) != 0)
          {
            int v12 = sub_10039F87C(v2, (_DWORD *)v9);
            if (v12 != 1 && (v12 == 3 || (*(unsigned char *)(v9 + 3) & 0x20) != 0 || !v12 && *(_DWORD *)(v2 + 952) == 3))
            {
              unint64_t v11 = *(void *)(v9 + 16);
              if (!v11)
              {
                sub_1003A3704(v2, (uint64_t)"Writing zero-length unknown chunk");
                unint64_t v11 = *(void *)(v9 + 16);
              }
              sub_1003B3980(v2, (unsigned int *)v9, *(Bytef **)(v9 + 8), v11);
            }
          }
          v9 += 32;
        }
        while (v9 < v10);
      }
    }
    *(_DWORD *)(v2 + 292) |= 8u;
    return sub_1003B4920(v2);
  }
  return result;
}

void *sub_1003B24F8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = sub_10039F16C(a1, a2, a3, a4, 0, 0, 0);
  uint64_t v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 118) = 0;
    v4[58] = 0x80000000FLL;
    *((_OWORD *)v4 + 27) = xmmword_10040C950;
    *((_OWORD *)v4 + 28) = xmmword_10040C960;
    *((_DWORD *)v4 + 74) |= 0x200000u;
    sub_1003B1D18(v4, 0, 0, 0);
  }
  return v5;
}

void sub_1003B2574(uint64_t a1, void *__src)
{
  if (!a1) {
    return;
  }
  if (*(_DWORD *)(a1 + 524) || *(unsigned char *)(a1 + 605))
  {
    if (!*(unsigned char *)(a1 + 604)) {
      goto LABEL_6;
    }
  }
  else
  {
    if ((*(unsigned char *)(a1 + 293) & 4) == 0) {
      sub_1003A34AC(a1, "png_write_info was never called before png_write_row");
    }
    sub_1003B6B00(a1);
    if (!*(unsigned char *)(a1 + 604))
    {
LABEL_6:
      uint64_t v30 = 0;
      size_t v31 = 0;
      unsigned int v4 = *(_DWORD *)(a1 + 508);
      char v5 = *(unsigned char *)(a1 + 612);
      char v6 = *(unsigned char *)(a1 + 609);
      if ((v6 * v5) >= 8u) {
        size_t v7 = v4 * (unint64_t)((v6 * v5) >> 3);
      }
      else {
        size_t v7 = ((v6 * v5) * (unint64_t)v4 + 7) >> 3;
      }
      unsigned __int8 v8 = *(unsigned char *)(a1 + 607);
      size_t v31 = v7;
      uint64_t v32 = v8;
      LODWORD(v30) = v4;
      BYTE2(v32) = v5;
      BYTE1(v32) = v6;
      *(_DWORD *)((char *)&v32 + 3) = (v6 * v5);
      memcpy((void *)(*(void *)(a1 + 544) + 1), __src, v7);
      if (*(unsigned char *)(a1 + 604))
      {
        unsigned int v17 = *(unsigned __int8 *)(a1 + 605);
        if (v17 <= 5 && (*(unsigned char *)(a1 + 300) & 2) != 0)
        {
          sub_1003B7030((uint64_t)&v30, (unsigned __int8 *)(*(void *)(a1 + 544) + 1), v17);
          if (!v30)
          {
            sub_1003B6C64(a1);
            return;
          }
        }
      }
      if (*(_DWORD *)(a1 + 300)) {
        sub_1003B2D08(a1, (unsigned int *)&v30, v9);
      }
      if (BYTE3(v32) != *(unsigned __int8 *)(a1 + 610) || BYTE3(v32) != *(unsigned __int8 *)(a1 + 615)) {
        sub_1003A34AC(a1, "internal write transform logic error");
      }
      if ((*(unsigned char *)(a1 + 976) & 4) == 0 || *(unsigned char *)(a1 + 980) != 64) {
        goto LABEL_62;
      }
      int v18 = v32;
      if ((v32 & 2) == 0) {
        goto LABEL_63;
      }
      uint64_t v19 = *(void *)(a1 + 544);
      int v20 = v30;
      if (BYTE1(v32) != 16)
      {
        if (BYTE1(v32) == 8)
        {
          if (v32 == 2)
          {
            uint64_t v21 = 3;
LABEL_54:
            if (v30)
            {
              char v23 = (unsigned char *)(v19 + 3);
              do
              {
                char v24 = *(v23 - 1);
                *(v23 - 2) -= v24;
                *v23 -= v24;
                v23 += v21;
                --v20;
              }
              while (v20);
            }
            goto LABEL_62;
          }
          if (v32 == 6)
          {
            uint64_t v21 = 4;
            goto LABEL_54;
          }
        }
LABEL_62:
        int v18 = v32;
LABEL_63:
        if (v18 == 3 && (*(_DWORD *)(a1 + 596) & 0x80000000) == 0) {
          sub_1003B1A1C(a1, (uint64_t)&v30);
        }
        sub_1003B7314(a1, (uint64_t)&v30, *(double *)v9.i64, v10, v11, v12, v13, v14, v15, v16);
        unsigned int v29 = *(void (**)(uint64_t, void, void))(a1 + 768);
        if (v29) {
          v29(a1, *(unsigned int *)(a1 + 524), *(unsigned __int8 *)(a1 + 605));
        }
        return;
      }
      if (v32 == 2)
      {
        uint64_t v22 = 6;
      }
      else
      {
        if (v32 != 6) {
          goto LABEL_62;
        }
        uint64_t v22 = 8;
      }
      if (v30)
      {
        unsigned int v25 = (unsigned __int16 *)(v19 + 3);
        do
        {
          unsigned int v26 = __rev16(*v25);
          unsigned int v27 = __rev16(*(v25 - 1)) - v26;
          unsigned int v28 = __rev16(v25[1]) - v26;
          *((unsigned char *)v25 - 2) = BYTE1(v27);
          *((unsigned char *)v25 - 1) = v27;
          *((unsigned char *)v25 + 2) = BYTE1(v28);
          *((unsigned char *)v25 + 3) = v28;
          unsigned int v25 = (unsigned __int16 *)((char *)v25 + v22);
          --v20;
        }
        while (v20);
      }
      goto LABEL_62;
    }
  }
  if ((*(unsigned char *)(a1 + 300) & 2) == 0) {
    goto LABEL_6;
  }
  switch(*(unsigned char *)(a1 + 605))
  {
    case 0:
      if ((*(unsigned char *)(a1 + 524) & 7) == 0) {
        goto LABEL_6;
      }
      break;
    case 1:
      if ((*(unsigned char *)(a1 + 524) & 7) == 0 && *(_DWORD *)(a1 + 496) > 4u) {
        goto LABEL_6;
      }
      break;
    case 2:
      if ((*(_DWORD *)(a1 + 524) & 7) == 4) {
        goto LABEL_6;
      }
      break;
    case 3:
      if ((*(unsigned char *)(a1 + 524) & 3) == 0 && *(_DWORD *)(a1 + 496) > 2u) {
        goto LABEL_6;
      }
      break;
    case 4:
      if ((*(_DWORD *)(a1 + 524) & 3) == 2) {
        goto LABEL_6;
      }
      break;
    case 5:
      if ((*(unsigned char *)(a1 + 524) & 1) == 0 && *(_DWORD *)(a1 + 496) > 1u) {
        goto LABEL_6;
      }
      break;
    case 6:
      if (*(unsigned char *)(a1 + 524)) {
        goto LABEL_6;
      }
      break;
    default:
      goto LABEL_6;
  }

  sub_1003B6C64(a1);
}

void sub_1003B2910(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    int v4 = sub_1003B1384(a1);
    if (v4 >= 1)
    {
      if (*(_DWORD *)(a1 + 500))
      {
        int v5 = v4;
        int v6 = 0;
        unsigned int v7 = 1;
        do
        {
          if (v7)
          {
            uint64_t v8 = 0;
            do
            {
              sub_1003B2574(a1, *(void **)(a2 + 8 * v8));
              unsigned int v7 = *(_DWORD *)(a1 + 500);
              ++v8;
            }
            while (v8 < v7);
          }
          ++v6;
        }
        while (v6 != v5);
      }
    }
  }
}

uint64_t sub_1003B29A4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 524) < *(_DWORD *)(result + 504))
    {
      sub_1003B4054(result, 0, 0, 2);
      *(_DWORD *)(v1 + 660) = 0;
      return sub_1003B1CF8(v1);
    }
  }
  return result;
}

void sub_1003B2A10(uint64_t *a1, void **a2)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      sub_10039F374(*a1, a2);
      *a1 = 0;
      if ((*(unsigned char *)(v3 + 296) & 2) != 0) {
        deflateEnd((z_streamp)(v3 + 312));
      }
      sub_1003B3AE0(v3, (void **)(v3 + 424));
      sub_1003A46CC(v3, *(void **)(v3 + 544));
      *(void *)(v3 + 544) = 0;
      sub_1003A46CC(v3, *(void **)(v3 + 536));
      sub_1003A46CC(v3, *(void **)(v3 + 552));
      sub_1003A46CC(v3, *(void **)(v3 + 560));
      *(void *)(v3 + 536) = 0;
      *(_OWORD *)(v3 + 552) = 0u;
      sub_1003A46CC(v3, *(void **)(v3 + 960));
      *(void *)(v3 + 960) = 0;
      sub_1003A4630((void *)v3);
    }
  }
}

uint64_t sub_1003B2AD8(uint64_t result, int a2, unsigned int a3)
{
  if (result)
  {
    unsigned int v3 = a3;
    uint64_t v4 = result;
    int v5 = (*(unsigned __int8 *)(result + 976) >> 2) & 1;
    if (a2 != 64) {
      int v5 = 0;
    }
    if (a2 && !v5) {
      sub_1003A34AC(result, "Unknown custom filter method");
    }
    char v6 = 8;
    switch((char)a3)
    {
      case 0:
        goto LABEL_16;
      case 1:
        *(unsigned char *)(result + 606) = 16;
        if (!*(void *)(result + 544)) {
          goto LABEL_35;
        }
        goto LABEL_17;
      case 2:
        *(unsigned char *)(result + 606) = 32;
        if (!*(void *)(result + 544)) {
          goto LABEL_35;
        }
        goto LABEL_17;
      case 3:
        char v6 = 64;
LABEL_16:
        *(unsigned char *)(result + 606) = v6;
        if (*(void *)(result + 544)) {
          goto LABEL_17;
        }
        goto LABEL_35;
      case 4:
        *(unsigned char *)(result + 606) = 0x80;
        if (!*(void *)(result + 544)) {
          goto LABEL_35;
        }
        goto LABEL_17;
      case 5:
      case 6:
      case 7:
        uint64_t result = sub_1003A3EB4(result, "Unknown row filter for method 0");
        *(unsigned char *)(v4 + 606) = 8;
        if (!*(void *)(v4 + 544)) {
          goto LABEL_35;
        }
        goto LABEL_17;
      default:
        *(unsigned char *)(result + 606) = a3;
        if (!*(void *)(result + 544)) {
          goto LABEL_35;
        }
LABEL_17:
        if (*(_DWORD *)(v4 + 500) == 1) {
          unsigned int v7 = v3 & 0xFFFFFF1F;
        }
        else {
          unsigned int v7 = v3;
        }
        if (*(_DWORD *)(v4 + 496) == 1) {
          unsigned int v3 = v7 & 0xFFFFFF2F;
        }
        else {
          unsigned int v3 = v7;
        }
        if ((v3 & 0xE0) != 0 && !*(void *)(v4 + 536))
        {
          uint64_t result = sub_1003A3E84(v4, "png_set_filter: UP/AVG/PAETH cannot be added after start");
          v3 &= 0xFFFFFF1F;
        }
        unsigned int v8 = ((v3 >> 4) & 1) + ((v3 >> 5) & 1) + ((v3 >> 6) & 1) + ((v3 >> 7) & 1);
        unsigned int v9 = *(unsigned __int8 *)(v4 + 609) * *(unsigned __int8 *)(v4 + 612);
        unsigned int v10 = *(_DWORD *)(v4 + 496);
        BOOL v11 = v9 >= 8;
        unint64_t v12 = (v10 * (unint64_t)v9 + 7) >> 3;
        unint64_t v13 = v10 * (unint64_t)(v9 >> 3);
        if (!v11) {
          unint64_t v13 = v12;
        }
        size_t v14 = v13 + 1;
        if (*(void *)(v4 + 552))
        {
          if (v8 < 2) {
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t result = (uint64_t)sub_1003A4784((void *)v4, v14);
          *(void *)(v4 + 552) = result;
          if (v8 < 2) {
            goto LABEL_35;
          }
        }
        if (!*(void *)(v4 + 560))
        {
          uint64_t result = (uint64_t)sub_1003A4784((void *)v4, v14);
          *(void *)(v4 + 560) = result;
        }
LABEL_35:
        *(unsigned char *)(v4 + 606) = v3;
        break;
    }
  }
  return result;
}

uint64_t sub_1003B2CE4(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 436) = a2;
  }
  return result;
}

uint64_t sub_1003B2CF0(uint64_t result, int a2)
{
  if (result)
  {
    *(_DWORD *)(result + 296) |= 1u;
    *(_DWORD *)(result + 452) = a2;
  }
  return result;
}

void sub_1003B2D08(uint64_t a1, unsigned int *a2, int16x8_t a3)
{
  if (!a1) {
    return;
  }
  int v5 = *(_DWORD *)(a1 + 300);
  if ((v5 & 0x100000) != 0)
  {
    char v6 = *(void (**)(uint64_t, unsigned int *, uint64_t))(a1 + 272);
    if (v6)
    {
      v6(a1, a2, *(void *)(a1 + 544) + 1);
      int v5 = *(_DWORD *)(a1 + 300);
    }
  }
  if ((v5 & 0x8000) == 0)
  {
    if ((v5 & 0x10000) == 0) {
      goto LABEL_7;
    }
LABEL_10:
    sub_1003B1620((uint64_t)a2, (unsigned char *)(*(void *)(a1 + 544) + 1));
    int v5 = *(_DWORD *)(a1 + 300);
    if ((v5 & 4) == 0) {
      goto LABEL_46;
    }
    goto LABEL_11;
  }
  sub_1003B169C((uint64_t)a2, (unsigned char *)(*(void *)(a1 + 544) + 1), ((*(_DWORD *)(a1 + 296) >> 7) & 1) == 0);
  int v5 = *(_DWORD *)(a1 + 300);
  if ((v5 & 0x10000) != 0) {
    goto LABEL_10;
  }
LABEL_7:
  if ((v5 & 4) == 0) {
    goto LABEL_46;
  }
LABEL_11:
  if (*((unsigned char *)a2 + 17) != 8 || *((unsigned char *)a2 + 18) != 1) {
    goto LABEL_46;
  }
  unsigned int v7 = (unsigned char *)(*(void *)(a1 + 544) + 1);
  int v8 = *(unsigned __int8 *)(a1 + 608);
  if (v8 == 4)
  {
    unsigned int v19 = *a2;
    if (*a2)
    {
      int v20 = (unsigned char *)(*(void *)(a1 + 544) + 1);
      while (v19 != 1)
      {
        *v7++ = v20[1] & 0xF | (16 * *v20);
        v20 += 2;
        v19 -= 2;
        if (!v19) {
          goto LABEL_43;
        }
      }
      char v13 = 16 * *v20;
      int8x16_t v16 = v7;
      goto LABEL_42;
    }
  }
  else
  {
    if (v8 != 2)
    {
      if (v8 != 1 || !*a2) {
        goto LABEL_43;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      int v11 = -*a2;
      while (1)
      {
        unint64_t v12 = &v7[v10];
        char v13 = (v7[v10] != 0) << 7;
        if (v11 + v10 == -1) {
          break;
        }
        v13 |= (v12[1] != 0) << 6;
        if (v11 + v10 == -2) {
          break;
        }
        v13 |= 32 * (v12[2] != 0);
        if (v11 + v10 == -3) {
          break;
        }
        v13 |= 16 * (v12[3] != 0);
        if (v11 + v10 == -4) {
          break;
        }
        v13 |= 8 * (v12[4] != 0);
        if (v11 + v10 == -5) {
          break;
        }
        v13 |= 4 * (v12[5] != 0);
        if (v11 + v10 == -6) {
          break;
        }
        v13 |= 2 * (v12[6] != 0);
        if (v11 + v10 == -7) {
          break;
        }
        v7[v9] = v13 | (v12[7] != 0);
        v10 += 8;
        ++v9;
        if (!(v11 + v10)) {
          goto LABEL_43;
        }
      }
      int8x16_t v16 = &v7[v9];
      goto LABEL_42;
    }
    if (*a2)
    {
      uint64_t v14 = 0;
      int v15 = -*a2;
      int8x16_t v16 = (unsigned char *)(*(void *)(a1 + 544) + 1);
      while (1)
      {
        unsigned int v17 = &v7[v14];
        char v18 = v7[v14] << 6;
        if (v15 + v14 == -1) {
          break;
        }
        v18 |= 16 * (v17[1] & 3);
        if (v15 + v14 == -2) {
          break;
        }
        v18 |= 4 * (v17[2] & 3);
        if (v15 + v14 == -3) {
          break;
        }
        *v16++ = v17[3] & 3 | v18;
        v14 += 4;
        if (!(v15 + v14)) {
          goto LABEL_43;
        }
      }
      char v13 = v18;
LABEL_42:
      unsigned char *v16 = v13;
    }
  }
LABEL_43:
  *((unsigned char *)a2 + 17) = v8;
  unsigned __int8 v21 = *((unsigned char *)a2 + 18) * v8;
  *((unsigned char *)a2 + 19) = v21;
  BOOL v22 = v21 >= 8u;
  unint64_t v23 = (*a2 * (unint64_t)v21 + 7) >> 3;
  unint64_t v24 = *a2 * (unint64_t)(v21 >> 3);
  if (!v22) {
    unint64_t v24 = v23;
  }
  *((void *)a2 + 1) = v24;
  int v5 = *(_DWORD *)(a1 + 300);
LABEL_46:
  if ((v5 & 0x10) != 0)
  {
    sub_1003B1540((uint64_t)a2, (char *)(*(void *)(a1 + 544) + 1));
    int v5 = *(_DWORD *)(a1 + 300);
  }
  if ((v5 & 8) != 0)
  {
    int v25 = *((unsigned __int8 *)a2 + 16);
    if (v25 != 3)
    {
      uint64_t v26 = *(void *)(a1 + 544);
      unsigned int v27 = *((unsigned __int8 *)a2 + 17);
      if ((v25 & 2) != 0)
      {
        int v28 = *(unsigned __int8 *)(a1 + 725);
        int v31 = *(unsigned __int8 *)(a1 + 726);
        int v32 = *(unsigned __int8 *)(a1 + 727);
        v144[1] = v27 - v31;
        v144[2] = v27 - v32;
        v143[1] = v31;
        v143[2] = v32;
        unsigned int v29 = 3;
        uint64_t v30 = (unsigned __int8 *)(v26 + 1);
        v144[0] = v27 - v28;
        v143[0] = v28;
        if ((v25 & 4) == 0)
        {
LABEL_55:
          if (v27 > 7)
          {
            int v47 = *a2 * v29;
            if (v27 == 8)
            {
              if (v47)
              {
                for (unsigned int i = 0; i != v47; ++i)
                {
                  unsigned __int8 v49 = 0;
                  uint64_t v50 = i % v29;
                  int v51 = v144[v50];
                  int v52 = v143[v50];
                  if (v51 > -v52)
                  {
                    unsigned __int8 v49 = 0;
                    unsigned int v53 = *v30;
                    int v54 = -v51;
                    do
                    {
                      unsigned int v55 = v53 >> v54;
                      int v56 = v51 - v52;
                      v54 += v52;
                      BOOL v57 = v51 <= 0;
                      if (v51 <= 0) {
                        LOBYTE(v58) = v55;
                      }
                      else {
                        int v58 = v53 << v51;
                      }
                      v49 |= v58;
                      int v51 = v56;
                    }
                    while (!v57);
                  }
                  *v30++ = v49;
                }
              }
            }
            else if (v47)
            {
              for (unsigned int j = 0; j != v47; ++j)
              {
                unsigned int v60 = 0;
                uint64_t v61 = j % v29;
                int v62 = v144[v61];
                int v63 = v143[v61];
                if (v62 > -v63)
                {
                  unsigned int v60 = 0;
                  unsigned int v64 = __rev16(*(unsigned __int16 *)v30);
                  int v65 = -v62;
                  do
                  {
                    unsigned int v66 = v64 >> v65;
                    int v67 = v62 - v63;
                    v65 += v63;
                    BOOL v68 = v62 <= 0;
                    if (v62 <= 0) {
                      unsigned int v69 = v66;
                    }
                    else {
                      unsigned int v69 = v64 << v62;
                    }
                    v60 |= v69;
                    int v62 = v67;
                  }
                  while (!v68);
                }
                *(_WORD *)uint64_t v30 = bswap32(v60) >> 16;
                v30 += 2;
              }
            }
          }
          else
          {
            size_t v35 = *((void *)a2 + 1);
            int v36 = *(unsigned __int8 *)(a1 + 728);
            if (v36 == 3 && v27 == 4) {
              int v38 = 17;
            }
            else {
              int v38 = 255;
            }
            if (v36 == 1 && v27 == 2) {
              int v40 = 85;
            }
            else {
              int v40 = v38;
            }
            if (v35)
            {
              if (v27)
              {
                for (uint64_t k = 0; k != v35; ++k)
                {
                  unsigned __int8 v42 = 0;
                  unsigned int v43 = *v30;
                  int v44 = v27;
                  char v45 = v28 - v27;
                  do
                  {
                    if (v44 - v28 <= 0) {
                      int v46 = (v43 >> v45) & v40;
                    }
                    else {
                      int v46 = v43 << (v44 - v28);
                    }
                    v42 |= v46;
                    v45 += v28;
                    v44 -= v28;
                  }
                  while (v44 > 0);
                  *v30++ = v42;
                }
              }
              else
              {
                bzero(v30, v35);
              }
            }
          }
          int v5 = *(_DWORD *)(a1 + 300);
          goto LABEL_103;
        }
      }
      else
      {
        int v28 = *(unsigned __int8 *)(a1 + 728);
        unsigned int v29 = 1;
        uint64_t v30 = (unsigned __int8 *)(v26 + 1);
        v144[0] = v27 - v28;
        v143[0] = v28;
        if ((v25 & 4) == 0) {
          goto LABEL_55;
        }
      }
      int v33 = *(unsigned __int8 *)(a1 + 729);
      uint64_t v34 = v29;
      v144[v34] = v27 - v33;
      v143[v34] = v33;
      ++v29;
      goto LABEL_55;
    }
  }
LABEL_103:
  if ((v5 & 0x20000) == 0) {
    goto LABEL_161;
  }
  uint64_t v70 = *(void *)(a1 + 544);
  uint32x4_t v71 = (int8x8_t *)(v70 + 1);
  int v72 = *((unsigned __int8 *)a2 + 16);
  if (v72 == 4)
  {
    uint64_t v75 = *a2;
    if (*((unsigned char *)a2 + 17) == 8)
    {
      if (!v75) {
        goto LABEL_161;
      }
      if (v75 < 8)
      {
        LODWORD(v76) = 0;
        goto LABEL_155;
      }
      if (v75 >= 0x20)
      {
        uint64_t v79 = v75 & 0xFFFFFFE0;
        int32x4_t v89 = (char *)(v70 + 33);
        uint64_t v90 = v79;
        do
        {
          int32x4_t v91 = v89 - 32;
          int8x16x2_t v147 = vld2q_s8(v91);
          int8x16x2_t v148 = vld2q_s8(v89);
          int8x16_t v92 = v147.val[0];
          int8x16_t v93 = v148.val[0];
          vst2q_s8(v91, *(int8x16x2_t *)((char *)&v147 + 16));
          vst2q_s8(v89, *(int8x16x2_t *)((char *)&v148 + 16));
          v89 += 64;
          v90 -= 32;
        }
        while (v90);
        if (v79 == v75) {
          goto LABEL_161;
        }
        if ((v75 & 0x18) == 0)
        {
          uint32x4_t v71 = (int8x8_t *)((char *)v71 + 2 * v79);
          LODWORD(v76) = v75 & 0xFFFFFFE0;
LABEL_155:
          int v106 = v75 - v76;
          do
          {
            __int8 v107 = v71->i8[0];
            v71->i8[0] = v71->i8[1];
            v71->i8[1] = v107;
            uint32x4_t v71 = (int8x8_t *)((char *)v71 + 2);
            --v106;
          }
          while (v106);
          goto LABEL_161;
        }
      }
      else
      {
        uint64_t v79 = 0;
      }
      uint64_t v76 = v75 & 0xFFFFFFF8;
      uint32x4_t v71 = (int8x8_t *)((char *)v71 + 2 * v76);
      uint32x4_t v94 = (char *)(v70 + 2 * v79 + 1);
      uint64_t v95 = v79 - v76;
      do
      {
        int8x8x2_t v146 = vld2_s8(v94);
        int8x8_t v96 = v146.val[0];
        vst2_s8(v94, *(int8x8x2_t *)((char *)&v146 + 8));
        v94 += 16;
        v95 += 8;
      }
      while (v95);
      if (v76 == v75) {
        goto LABEL_161;
      }
      goto LABEL_155;
    }
    if (!v75) {
      goto LABEL_161;
    }
    if (v75 < 8)
    {
      LODWORD(v77) = 0;
      goto LABEL_159;
    }
    if (v75 >= 0x20)
    {
      uint64_t v80 = v75 & 0xFFFFFFE0;
      unsigned int v97 = (char *)(v70 + 65);
      uint64_t v98 = v80;
      do
      {
        uint64_t v99 = v97 - 64;
        int8x16x4_t v152 = vld4q_s8(v99);
        v154.val[0] = v152.val[2];
        v154.val[1] = v152.val[3];
        int8x16x4_t v156 = vld4q_s8(v97);
        v154.val[2] = v152.val[0];
        v154.val[3] = v152.val[1];
        a3 = (int16x8_t)v156.val[2];
        v152.val[1] = v156.val[3];
        v152.val[2] = v156.val[0];
        v152.val[3] = v156.val[1];
        vst4q_s8(v99, v154);
        vst4q_s8(v97, *(int8x16x4_t *)a3.i8);
        v97 += 128;
        v98 -= 32;
      }
      while (v98);
      if (v80 == v75) {
        goto LABEL_161;
      }
      if ((v75 & 0x18) == 0)
      {
        uint32x4_t v71 = (int8x8_t *)((char *)v71 + 4 * v80);
        LODWORD(v77) = v75 & 0xFFFFFFE0;
LABEL_159:
        int v108 = v75 - v77;
        do
        {
          a3.i32[0] = v71->i32[0];
          a3 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a3.i8);
          *(int8x8_t *)a3.uint64_t i8 = vext_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8, 4uLL);
          *(int8x8_t *)a3.uint64_t i8 = vmovn_s16(a3);
          v71->i32[0] = a3.i32[0];
          uint32x4_t v71 = (int8x8_t *)((char *)v71 + 4);
          --v108;
        }
        while (v108);
        goto LABEL_161;
      }
    }
    else
    {
      uint64_t v80 = 0;
    }
    uint64_t v77 = v75 & 0xFFFFFFF8;
    uint32x4_t v71 = (int8x8_t *)((char *)v71 + 4 * v77);
    unsigned int v100 = (char *)(v70 + 4 * v80 + 1);
    uint64_t v101 = v80 - v77;
    do
    {
      *(int8x8x4_t *)a3.uint64_t i8 = vld4_s8(v100);
      v150.val[0] = v102;
      v150.val[1] = v103;
      v150.val[2] = (int8x8_t)a3.i64[0];
      v150.val[3] = v104;
      vst4_s8(v100, v150);
      v100 += 32;
      v101 += 8;
    }
    while (v101);
    if (v77 == v75) {
      goto LABEL_161;
    }
    goto LABEL_159;
  }
  if (v72 == 6)
  {
    uint64_t v73 = *a2;
    if (*((unsigned char *)a2 + 17) != 8)
    {
      for (; v73; LODWORD(v73) = v73 - 1)
      {
        int8x8_t *v71 = vext_s8(*v71, *v71, 2uLL);
        ++v71;
      }
      goto LABEL_161;
    }
    if (v73)
    {
      if (v73 < 8)
      {
        LODWORD(v74) = 0;
        goto LABEL_151;
      }
      if (v73 >= 0x20)
      {
        uint64_t v78 = v73 & 0xFFFFFFE0;
        int32x4_t v81 = (char *)(v70 + 65);
        uint64_t v82 = v78;
        do
        {
          int32x4_t v83 = v81 - 64;
          int8x16x4_t v151 = vld4q_s8(v83);
          v153.val[0] = v151.val[1];
          v153.val[1] = v151.val[2];
          int8x16x4_t v155 = vld4q_s8(v81);
          v153.val[2] = v151.val[3];
          v153.val[3] = v151.val[0];
          a3 = (int16x8_t)v155.val[1];
          v151.val[1] = v155.val[2];
          v151.val[2] = v155.val[3];
          v151.val[3] = v155.val[0];
          vst4q_s8(v83, v153);
          vst4q_s8(v81, *(int8x16x4_t *)a3.i8);
          v81 += 128;
          v82 -= 32;
        }
        while (v82);
        if (v78 == v73) {
          goto LABEL_161;
        }
        if ((v73 & 0x18) == 0)
        {
          uint32x4_t v71 = (int8x8_t *)((char *)v71 + 4 * v78);
          LODWORD(v74) = v73 & 0xFFFFFFE0;
LABEL_151:
          int v105 = v73 - v74;
          do
          {
            a3.i32[0] = v71->i32[0];
            a3 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a3.i8);
            *(int8x8_t *)a3.uint64_t i8 = vext_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8, 2uLL);
            *(int8x8_t *)a3.uint64_t i8 = vmovn_s16(a3);
            v71->i32[0] = a3.i32[0];
            uint32x4_t v71 = (int8x8_t *)((char *)v71 + 4);
            --v105;
          }
          while (v105);
          goto LABEL_161;
        }
      }
      else
      {
        uint64_t v78 = 0;
      }
      uint64_t v74 = v73 & 0xFFFFFFF8;
      uint32x4_t v71 = (int8x8_t *)((char *)v71 + 4 * v74);
      int32x4_t v84 = (char *)(v70 + 4 * v78 + 1);
      uint64_t v85 = v78 - v74;
      do
      {
        *(int8x8x4_t *)a3.uint64_t i8 = vld4_s8(v84);
        v149.val[0] = v86;
        v149.val[1] = v87;
        v149.val[2] = v88;
        v149.val[3] = (int8x8_t)a3.i64[0];
        vst4_s8(v84, v149);
        v84 += 32;
        v85 += 8;
      }
      while (v85);
      if (v74 == v73) {
        goto LABEL_161;
      }
      goto LABEL_151;
    }
  }
LABEL_161:
  if ((*(unsigned char *)(a1 + 302) & 8) != 0)
  {
    uint64_t v109 = *(unsigned char **)(a1 + 544);
    uint64_t v110 = v109 + 1;
    int v111 = *((unsigned __int8 *)a2 + 16);
    if (v111 != 4)
    {
      if (v111 == 6)
      {
        uint64_t v112 = *a2;
        if (*((unsigned char *)a2 + 17) == 8)
        {
          if (v112)
          {
            if (v112 >= 0x11)
            {
              uint64_t v118 = v112 & 0xF;
              if ((v112 & 0xF) == 0) {
                uint64_t v118 = 16;
              }
              uint64_t v113 = v112 - v118;
              v110 += 4 * v113;
              unsigned int v119 = v109 + 32;
              uint64_t v120 = v113;
              do
              {
                uint64_t v121 = v119 - 28;
                unsigned long long v122 = (unsigned __int128)vld4q_s8(v121);
                int8x16_t v123 = vmvnq_s8((int8x16_t)v122);
                *uint64_t v121 = v123.i8[0];
                *(v119 - 24) = v123.i8[1];
                *(v119 - 20) = v123.i8[2];
                *(v119 - 16) = v123.i8[3];
                *(v119 - 12) = v123.i8[4];
                *(v119 - 8) = v123.i8[5];
                *(v119 - 4) = v123.i8[6];
                unsigned char *v119 = v123.i8[7];
                v119[4] = v123.i8[8];
                v119[8] = v123.i8[9];
                v119[12] = v123.i8[10];
                v119[16] = v123.i8[11];
                v119[20] = v123.i8[12];
                v119[24] = v123.i8[13];
                v119[28] = v123.i8[14];
                v119[32] = v123.i8[15];
                v119 += 64;
                v120 -= 16;
              }
              while (v120);
            }
            else
            {
              LODWORD(v113) = 0;
            }
            int v124 = v112 - v113;
            uint64_t v125 = v110 + 3;
            do
            {
              *uint64_t v125 = ~*v125;
              v125 += 4;
              --v124;
            }
            while (v124);
          }
        }
        else if (v112)
        {
          int v116 = v109 + 8;
          do
          {
            *(v116 - 1) = ~*(v116 - 1);
            unsigned char *v116 = ~*v116;
            v116 += 8;
            LODWORD(v112) = v112 - 1;
          }
          while (v112);
        }
      }
      goto LABEL_201;
    }
    uint64_t v114 = *a2;
    if (*((unsigned char *)a2 + 17) != 8)
    {
      if (v114)
      {
        int v117 = v109 + 4;
        do
        {
          *(v117 - 1) = ~*(v117 - 1);
          unsigned char *v117 = ~*v117;
          v117 += 4;
          LODWORD(v114) = v114 - 1;
        }
        while (v114);
      }
      goto LABEL_201;
    }
    if (v114)
    {
      if (v114 < 9)
      {
        int v115 = 0;
        goto LABEL_199;
      }
      if (v114 >= 0x11)
      {
        unint64_t v127 = 16;
        if ((v114 & 0xF) != 0) {
          unint64_t v127 = v114 & 0xF;
        }
        uint64_t v126 = v114 - v127;
        unsigned int v128 = v109 + 16;
        uint64_t v129 = *a2;
        do
        {
          uint64_t v130 = v128 - 14;
          unsigned long long v131 = (unsigned __int128)vld2q_s8(v130);
          int8x16_t v132 = vmvnq_s8((int8x16_t)v131);
          *uint64_t v130 = v132.i8[0];
          *(v128 - 12) = v132.i8[1];
          *(v128 - 10) = v132.i8[2];
          *(v128 - 8) = v132.i8[3];
          *(v128 - 6) = v132.i8[4];
          *(v128 - 4) = v132.i8[5];
          *(v128 - 2) = v132.i8[6];
          *unsigned int v128 = v132.i8[7];
          v128[2] = v132.i8[8];
          v128[4] = v132.i8[9];
          v128[6] = v132.i8[10];
          v128[8] = v132.i8[11];
          v128[10] = v132.i8[12];
          v128[12] = v132.i8[13];
          v128[14] = v132.i8[14];
          v128[16] = v132.i8[15];
          v128 += 32;
          v129 -= 16;
        }
        while (v127 != v129);
        if (v127 < 9)
        {
          v110 += 2 * v126;
          int v115 = v114 - v127;
LABEL_199:
          int v139 = v114 - v115;
          unsigned int v140 = v110 + 1;
          do
          {
            *unsigned int v140 = ~*v140;
            v140 += 2;
            --v139;
          }
          while (v139);
          goto LABEL_201;
        }
      }
      else
      {
        uint64_t v126 = 0;
      }
      uint64_t v133 = 8;
      if ((v114 & 7) != 0) {
        uint64_t v133 = v114 & 7;
      }
      int v115 = v114 - v133;
      v110 += 2 * (v114 - v133);
      unsigned int v134 = &v109[2 * v126 + 8];
      uint64_t v135 = v133 + v126 - v114;
      do
      {
        unsigned int v136 = v134 - 6;
        int8x8_t v137 = (int8x8_t)*(_OWORD *)vld2_s8(v136).val;
        int8x8_t v138 = vmvn_s8(v137);
        *unsigned int v136 = v138.i8[0];
        *(v134 - 4) = v138.i8[1];
        *(v134 - 2) = v138.i8[2];
        *unsigned int v134 = v138.i8[3];
        v134[2] = v138.i8[4];
        v134[4] = v138.i8[5];
        v134[6] = v138.i8[6];
        v134[8] = v138.i8[7];
        v134 += 16;
        v135 += 8;
      }
      while (v135);
      goto LABEL_199;
    }
  }
LABEL_201:
  int v141 = *(_DWORD *)(a1 + 300);
  if (v141)
  {
    sub_1003B1890(a2, (char *)(*(void *)(a1 + 544) + 1));
    int v141 = *(_DWORD *)(a1 + 300);
  }
  if ((v141 & 0x20) != 0)
  {
    unsigned int v142 = (int8x16_t *)(*(void *)(a1 + 544) + 1);
    sub_1003B13AC((uint64_t)a2, v142);
  }
}

_DWORD *sub_1003B38D4(_DWORD *result, unsigned int a2)
{
  *uint64_t result = bswap32(a2);
  return result;
}

uint64_t sub_1003B38E0(uint64_t a1)
{
  *(_DWORD *)(a1 + 1124) = 18;
  uint64_t result = sub_1003B1C70(a1);
  if (*(unsigned __int8 *)(a1 + 613) <= 2u) {
    *(_DWORD *)(a1 + 292) |= 0x1000u;
  }
  return result;
}

uint64_t sub_1003B3980(uint64_t a1, unsigned int *a2, Bytef *a3, unint64_t a4)
{
  return sub_1003B398C(a1, bswap32(*a2), a3, a4);
}

uint64_t sub_1003B398C(uint64_t result, int a2, Bytef *a3, unint64_t a4)
{
  if (result)
  {
    uint64_t v5 = result;
    if (a4 >> 31) {
      sub_1003A34AC(result, "length exceeds PNG maximum");
    }
    *(_DWORD *)(result + 1124) = 34;
    v8[0] = HIBYTE(a2);
    v8[1] = BYTE2(a2);
    v8[2] = BYTE1(a2);
    v8[3] = a2;
    sub_1003B1C70(result);
    *(_DWORD *)(v5 + 528) = a2;
    sub_10039EEB8(v5);
    sub_10039EEEC(v5, v8, 4);
    *(_DWORD *)(v5 + 1124) = 66;
    if (a3)
    {
      if (a4)
      {
        sub_1003B1C70(v5);
        sub_10039EEEC(v5, a3, a4);
      }
    }
    *(_DWORD *)(v5 + 1124) = 130;
    return sub_1003B1C70(v5);
  }
  return result;
}

void sub_1003B3AE0(uint64_t a1, void **a2)
{
  unsigned int v3 = *a2;
  if (v3)
  {
    *a2 = 0;
    do
    {
      uint64_t v5 = (void *)*v3;
      sub_1003A46CC(a1, v3);
      unsigned int v3 = v5;
    }
    while (v5);
  }
}

uint64_t sub_1003B3B24(uint64_t a1, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, unsigned int a8)
{
  Bytef v12 = a4;
  switch(a5)
  {
    case 0:
      if (a4 > 0x10 || (char v15 = 1, ((1 << a4) & 0x10116) == 0)) {
        sub_1003A34AC(a1, "Invalid bit depth for grayscale image");
      }
      return result;
    case 2:
      char v15 = 3;
      if (a4 != 8 && a4 != 16) {
        sub_1003A34AC(a1, "Invalid bit depth for RGB image");
      }
      return result;
    case 3:
      if (a4 - 1 >= 8 || ((0x8Bu >> (a4 - 1)) & 1) == 0) {
        sub_1003A34AC(a1, "Invalid bit depth for paletted image");
      }
      char v15 = 1;
      break;
    case 4:
      char v15 = 2;
      if (a4 != 8 && a4 != 16) {
        sub_1003A34AC(a1, "Invalid bit depth for grayscale+alpha image");
      }
      return result;
    case 6:
      char v15 = 4;
      if (a4 != 8 && a4 != 16) {
        sub_1003A34AC(a1, "Invalid bit depth for RGBA image");
      }
      return result;
    default:
      sub_1003A34AC(a1, "Invalid image color type specified");
  }
  *(unsigned char *)(a1 + 611) = v15;
  if (a6) {
    sub_1003A3704(a1, (uint64_t)"Invalid compression type specified");
  }
  if ((*(unsigned char *)(a1 + 976) & 4) == 0 || (*(unsigned char *)(a1 + 293) & 0x10) != 0)
  {
    if (!a7) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  BOOL v17 = (a5 & 0xFFFFFFFB) != 2 || a7 != 64;
  if (a7 && v17)
  {
LABEL_30:
    sub_1003A3704(a1, (uint64_t)"Invalid filter type specified");
    LOBYTE(a7) = 0;
  }
LABEL_31:
  if (a8 >= 2)
  {
    sub_1003A3704(a1, (uint64_t)"Invalid interlace type specified");
    LOBYTE(a8) = 1;
  }
  *(unsigned char *)(a1 + 608) = v12;
  *(unsigned char *)(a1 + 607) = a5;
  *(unsigned char *)(a1 + 604) = a8;
  *(unsigned char *)(a1 + 980) = a7;
  *(unsigned char *)(a1 + 1040) = 0;
  *(_DWORD *)(a1 + 496) = a2;
  *(_DWORD *)(a1 + 500) = a3;
  char v18 = *(unsigned char *)(a1 + 611);
  *(unsigned char *)(a1 + 610) = v18 * v12;
  unint64_t v19 = a2 * (unint64_t)((v18 * v12) >> 3);
  if ((v18 * v12) < 8u) {
    unint64_t v19 = ((v18 * v12) * (unint64_t)a2 + 7) >> 3;
  }
  *(void *)(a1 + 512) = v19;
  *(_DWORD *)(a1 + 508) = a2;
  *(unsigned char *)(a1 + 609) = v12;
  *(unsigned char *)(a1 + 612) = v18;
  v22[0] = HIBYTE(a2);
  v22[1] = BYTE2(a2);
  v22[2] = BYTE1(a2);
  v22[3] = a2;
  v22[4] = HIBYTE(a3);
  v22[5] = BYTE2(a3);
  v22[6] = BYTE1(a3);
  v22[7] = a3;
  v22[8] = v12;
  v22[9] = a5;
  v22[10] = 0;
  v22[11] = a7;
  v22[12] = a8;
  uint64_t result = sub_1003B398C(a1, 1229472850, v22, 0xDuLL);
  if (!*(unsigned char *)(a1 + 606))
  {
    char v21 = 8;
    if (*(unsigned char *)(a1 + 607) != 3)
    {
      if (*(unsigned __int8 *)(a1 + 608) < 8u) {
        char v21 = 8;
      }
      else {
        char v21 = -8;
      }
    }
    *(unsigned char *)(a1 + 606) = v21;
  }
  *(_DWORD *)(a1 + 292) = 1;
  return result;
}

uint64_t sub_1003B3E3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3;
  int v6 = *(unsigned __int8 *)(a1 + 607);
  if (v6 == 3)
  {
    if (*(_DWORD *)(a1 + 976) & 1 | a3) {
      BOOL v7 = 1 << *(unsigned char *)(a1 + 608) >= a3;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7) {
      sub_1003A34AC(a1, "Invalid number of colors in palette");
    }
    goto LABEL_11;
  }
  if (a3 <= 0x100 && *(_DWORD *)(a1 + 976) & 1 | a3)
  {
    if ((v6 & 2) != 0)
    {
LABEL_11:
      *(_WORD *)(a1 + 592) = a3;
      *(_DWORD *)(a1 + 1124) = 34;
      LOBYTE(v12) = (3 * a3) >> 24;
      BYTE1(v12) = (3 * a3) >> 16;
      BYTE2(v12) = (unsigned __int16)(3 * a3) >> 8;
      HIBYTE(v12) = 3 * a3;
      int v13 = 1163152464;
      sub_1003B1C70(a1);
      *(_DWORD *)(a1 + 528) = 1347179589;
      sub_10039EEB8(a1);
      sub_10039EEEC(a1, (Bytef *)&v13, 4);
      for (*(_DWORD *)(a1 + 1124) = 66; v3; --v3)
      {
        Bytef buf = *(unsigned char *)a2;
        __int16 v11 = *(_WORD *)(a2 + 1);
        sub_1003B1C70(a1);
        sub_10039EEEC(a1, &buf, 3);
        a2 += 3;
      }
      *(_DWORD *)(a1 + 1124) = 130;
      unsigned int v12 = bswap32(*(_DWORD *)(a1 + 580));
      uint64_t result = sub_1003B1C70(a1);
      *(_DWORD *)(a1 + 292) |= 2u;
      return result;
    }
    int v8 = "Ignoring request to write a PLTE chunk in grayscale PNG";
  }
  else
  {
    int v8 = "Invalid number of colors in palette";
  }

  return sub_1003A3704(a1, (uint64_t)v8);
}

unint64_t sub_1003B4054(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 304) != 1229209940)
  {
    int v8 = *(void ***)(a1 + 424);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8)
      {
        *int v8 = 0;
        do
        {
          uint64_t v10 = (void *)*v9;
          sub_1003A46CC(a1, v9);
          uint64_t v9 = v10;
        }
        while (v10);
      }
    }
    else
    {
      __int16 v11 = sub_1003A4784((void *)a1, *(unsigned int *)(a1 + 432) + 8);
      *(void *)(a1 + 424) = v11;
      *__int16 v11 = 0;
    }
    unint64_t v12 = sub_1003B4698(a1);
    if (sub_1003B43EC(a1, 1229209940, v12)) {
LABEL_59:
    }
      sub_1003A34AC(a1, *(const char **)(a1 + 360));
    *(void *)(a1 + 336) = *(void *)(a1 + 424) + 8;
    *(_DWORD *)(a1 + 344) = *(_DWORD *)(a1 + 432);
  }
  *(void *)(a1 + 312) = a2;
  while (1)
  {
    do
    {
      uint64_t v13 = a3 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : a3;
      *(_DWORD *)(a1 + 320) = v13;
      unint64_t v14 = a3 - v13;
      int v15 = HIDWORD(a3) ? 0 : a4;
      unint64_t result = deflate((z_streamp)(a1 + 312), v15);
      int v17 = result;
      a3 = v14 + *(unsigned int *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = 0;
      LODWORD(v14) = *(_DWORD *)(a1 + 344);
      if (v14) {
        break;
      }
      uint64_t v18 = *(void *)(a1 + 424);
      unint64_t v19 = (unsigned char *)(v18 + 8);
      unint64_t v14 = *(unsigned int *)(a1 + 432);
      if ((*(unsigned char *)(a1 + 292) & 4) != 0
        || *(unsigned char *)(a1 + 1040)
        || (unint64_t result = sub_1003B4698(a1), result > 0x4000)
        || (unint64_t v20 = *v19, (v20 & 0xF) != 8)
        || ((v21 = v20 >> 4, unint64_t v22 = 128 << (*v19 >> 4), (v20 & 0xF0) <= 0x70) ? (v23 = result > v22) : (v23 = 1), v23))
      {
        if (!v14) {
          goto LABEL_32;
        }
      }
      else
      {
        int v24 = ((v21 & 0xF) << 12) | 0x800;
        char v25 = (v20 & 0xF0) + 8;
        int v26 = v21 - 1;
        do
        {
          v24 -= 4096;
          v25 -= 16;
          BOOL v27 = v26-- != 0;
          if (!v27) {
            break;
          }
          unint64_t v22 = v22 >> 1;
        }
        while (result <= v22);
        *(unsigned char *)(v18 + 8) = v25;
        *(unsigned char *)(v18 + 9) = (*(unsigned char *)(v18 + 9) & 0xE0 | ((*(unsigned char *)(v18 + 9) & 0xE0)
                                                           - 31 * (((*(unsigned char *)(v18 + 9) & 0xE0u) + v24) / 0x1F))) ^ 0x1F;
        if (!v14) {
          goto LABEL_32;
        }
      }
      unint64_t result = sub_1003B398C(a1, 1229209940, (Bytef *)(v18 + 8), v14);
LABEL_32:
      *(_DWORD *)(a1 + 292) |= 4u;
      *(void *)(a1 + 336) = v19;
      *(_DWORD *)(a1 + 344) = v14;
    }
    while (a4 && !v17);
    if (v17) {
      break;
    }
    if (!a3)
    {
      if (a4 == 4) {
        sub_1003A34AC(a1, "Z_OK on Z_FINISH with output space");
      }
      return result;
    }
  }
  if (a4 != 4 || v17 != 1)
  {
    sub_10039F92C(a1, v17);
    goto LABEL_59;
  }
  uint64_t v28 = *(void *)(a1 + 424);
  int v29 = *(_DWORD *)(a1 + 432);
  if ((*(unsigned char *)(a1 + 292) & 4) == 0 && !*(unsigned char *)(a1 + 1040))
  {
    unint64_t result = sub_1003B4698(a1);
    if (result <= 0x4000)
    {
      unint64_t v30 = *(unsigned __int8 *)(v28 + 8);
      if ((v30 & 0xF) == 8 && (v30 & 0xF0) <= 0x70)
      {
        unint64_t v31 = v30 >> 4;
        unint64_t v32 = 128 << (*(unsigned char *)(v28 + 8) >> 4);
        if (result <= v32)
        {
          int v33 = ((v31 & 0xF) << 12) | 0x800;
          char v34 = (v30 & 0xF0) + 8;
          int v35 = v31 - 1;
          do
          {
            v33 -= 4096;
            v34 -= 16;
            BOOL v27 = v35-- != 0;
            if (!v27) {
              break;
            }
            unint64_t v32 = v32 >> 1;
          }
          while (result <= v32);
          *(unsigned char *)(v28 + 8) = v34;
          *(unsigned char *)(v28 + 9) = (*(unsigned char *)(v28 + 9) & 0xE0 | ((*(unsigned char *)(v28 + 9) & 0xE0)
                                                             - 31 * (((*(unsigned char *)(v28 + 9) & 0xE0u) + v33) / 0x1F))) ^ 0x1F;
        }
      }
    }
  }
  if (v29 != v14) {
    unint64_t result = sub_1003B398C(a1, 1229209940, (Bytef *)(v28 + 8), (v29 - v14));
  }
  *(_DWORD *)(a1 + 344) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 292) |= 0xCu;
  *(_DWORD *)(a1 + 304) = 0;
  return result;
}

uint64_t sub_1003B43EC(uint64_t a1, int a2, unint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 304);
  if (!v6)
  {
LABEL_5:
    if (a2 == 1229209940)
    {
      int v8 = *(_DWORD *)(a1 + 436);
      int v9 = *(_DWORD *)(a1 + 440);
      int v10 = *(_DWORD *)(a1 + 444);
      int v11 = *(_DWORD *)(a1 + 448);
      if (*(unsigned char *)(a1 + 296))
      {
        int v12 = *(_DWORD *)(a1 + 452);
        if (a3 > 0x4000) {
          goto LABEL_14;
        }
      }
      else
      {
        int v12 = *(unsigned __int8 *)(a1 + 606) != 8;
        if (a3 > 0x4000) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      int v8 = *(_DWORD *)(a1 + 456);
      int v9 = *(_DWORD *)(a1 + 460);
      int v10 = *(_DWORD *)(a1 + 464);
      int v11 = *(_DWORD *)(a1 + 468);
      int v12 = *(_DWORD *)(a1 + 472);
      if (a3 > 0x4000) {
        goto LABEL_14;
      }
    }
    unint64_t v13 = (1 << (v10 - 1));
    if (a3 + 262 <= v13)
    {
      do
      {
        LODWORD(v13) = v13 >> 1;
        --v10;
      }
      while (v13 >= (int)a3 + 262);
    }
LABEL_14:
    unsigned int v14 = *(_DWORD *)(a1 + 296);
    if ((v14 & 2) != 0
      && (*(_DWORD *)(a1 + 476) != v8
       || *(_DWORD *)(a1 + 480) != v9
       || *(_DWORD *)(a1 + 484) != v10
       || *(_DWORD *)(a1 + 488) != v11
       || *(_DWORD *)(a1 + 492) != v12))
    {
      if (deflateEnd((z_streamp)(a1 + 312))) {
        sub_1003A3704(a1, (uint64_t)"deflateEnd failed (ignored)");
      }
      unsigned int v14 = *(_DWORD *)(a1 + 296) & 0xFFFFFFFD;
      *(_DWORD *)(a1 + 296) = v14;
    }
    int v15 = (z_stream *)(a1 + 312);
    *(void *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 320) = 0;
    *(void *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    if ((v14 & 2) != 0)
    {
      uint64_t v7 = deflateReset(v15);
      if (!v7) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v7 = deflateInit2_(v15, v8, v9, v10, v11, v12, "1.2.12", 112);
      if (!v7)
      {
        *(_DWORD *)(a1 + 296) |= 2u;
LABEL_29:
        uint64_t v7 = 0;
        *(_DWORD *)(a1 + 304) = a2;
        return v7;
      }
    }
    sub_10039F92C(a1, v7);
    return v7;
  }
  v17[0] = HIBYTE(a2);
  v17[1] = BYTE2(a2);
  v17[2] = BYTE1(a2);
  v17[3] = a2;
  __int16 v18 = 8250;
  char v19 = HIBYTE(v6);
  char v20 = BYTE2(v6);
  char v21 = BYTE1(v6);
  char v22 = v6;
  sub_1003A3544((uint64_t)v17, 0x40uLL, 0xAuLL, " using zstream");
  sub_1003A3704(a1, (uint64_t)v17);
  if (*(_DWORD *)(a1 + 304) != 1229209940)
  {
    *(_DWORD *)(a1 + 304) = 0;
    goto LABEL_5;
  }
  *(void *)(a1 + 360) = "in use by IDAT";
  return 4294967294;
}

unint64_t sub_1003B4698(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 500);
  unint64_t v2 = *(void *)(a1 + 512);
  if (v2 >> 15) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v1 >> 15 == 0;
  }
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  if (!*(unsigned char *)(a1 + 604)) {
    return v1 + v1 * v2;
  }
  unint64_t v5 = *(unsigned int *)(a1 + 496);
  unsigned int v6 = v5 + 7;
  if (*(unsigned __int8 *)(a1 + 610) > 7u)
  {
    unsigned int v7 = *(unsigned char *)(a1 + 610) >> 3;
    if (v6 >= 8)
    {
      unint64_t result = ((v1 + 7) >> 3) + ((v1 + 7) >> 3) * (*(unsigned char *)(a1 + 610) >> 3) * (unint64_t)(v6 >> 3);
      unsigned int v8 = v5 + 3;
      if ((v5 + 3) >= 8) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t result = 0;
      unsigned int v8 = v5 + 3;
      if ((v5 + 3) >= 8)
      {
LABEL_10:
        result += ((v1 + 7) >> 3) + ((v1 + 7) >> 3) * v7 * (unint64_t)(v8 >> 3);
LABEL_17:
        result += ((v1 + 3) >> 3) + ((v1 + 3) >> 3) * v7 * (unint64_t)(v8 >> 2);
LABEL_18:
        unsigned int v11 = v5 + 1;
        if ((v5 + 1) >= 4)
        {
          result += ((v1 + 3) >> 2) + ((v1 + 3) >> 2) * v7 * (unint64_t)(v11 >> 2);
        }
        else if (v11 < 2)
        {
          if (v5 < 2) {
            goto LABEL_21;
          }
          goto LABEL_33;
        }
        result += ((v1 + 1) >> 2) + ((v1 + 1) >> 2) * v7 * (unint64_t)(v11 >> 1);
        if (v5 < 2)
        {
LABEL_21:
          if (!v5) {
            return result;
          }
LABEL_34:
          result += (v1 >> 1) + (v1 >> 1) * v5 * (unint64_t)v7;
          return result;
        }
LABEL_33:
        result += ((v1 + 1) >> 1) + ((v1 + 1) >> 1) * (v5 >> 1) * (unint64_t)v7;
        goto LABEL_34;
      }
    }
    if (v8 < 4) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + 610);
  if (v6 >= 8)
  {
    unint64_t result = ((v1 + 7) >> 3)
           + ((v1 + 7) >> 3) * ((*(unsigned __int8 *)(a1 + 610) * (unint64_t)(v6 >> 3) + 7) >> 3);
    unsigned int v10 = v5 + 3;
    if ((v5 + 3) >= 8) {
      goto LABEL_14;
    }
LABEL_24:
    if (v10 < 4) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  unint64_t result = 0;
  unsigned int v10 = v5 + 3;
  if ((v5 + 3) < 8) {
    goto LABEL_24;
  }
LABEL_14:
  result += ((v1 + 7) >> 3) + ((v1 + 7) >> 3) * ((v9 * (unint64_t)(v10 >> 3) + 7) >> 3);
LABEL_25:
  result += ((v1 + 3) >> 3)
          + ((v1 + 3) >> 3) * ((v9 * (unint64_t)(v10 >> 2) + 7) >> 3);
LABEL_26:
  unsigned int v12 = v5 + 1;
  if ((v5 + 1) >= 4)
  {
    result += ((v1 + 3) >> 2)
            + ((v1 + 3) >> 2) * ((v9 * (unint64_t)(v12 >> 2) + 7) >> 3);
  }
  else if (v12 < 2)
  {
    if (v5 < 2) {
      goto LABEL_29;
    }
LABEL_37:
    result += ((v1 + 1) >> 1)
            + ((v1 + 1) >> 1) * (((v5 >> 1) * (unint64_t)v9 + 7) >> 3);
    goto LABEL_38;
  }
  result += ((v1 + 1) >> 2)
          + ((v1 + 1) >> 2) * ((v9 * (unint64_t)(v12 >> 1) + 7) >> 3);
  if (v5 >= 2) {
    goto LABEL_37;
  }
LABEL_29:
  if (v5) {
LABEL_38:
  }
    result += (v1 >> 1) + (v1 >> 1) * ((v5 * (unint64_t)v9 + 7) >> 3);
  return result;
}

uint64_t sub_1003B4920(uint64_t result)
{
  unint64_t v1 = (_DWORD *)result;
  if (result)
  {
    *(_DWORD *)(result + 1124) = 34;
    int v2 = 1145980233;
    sub_1003B1C70(result);
    v1[132] = 1229278788;
    sub_10039EEB8((uint64_t)v1);
    sub_10039EEEC((uint64_t)v1, (Bytef *)&v2, 4);
    v1[281] = 130;
    unint64_t result = sub_1003B1C70((uint64_t)v1);
  }
  v1[73] |= 0x10u;
  return result;
}

uint64_t sub_1003B49FC(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = bswap32(a2);
  return sub_1003B398C(a1, 1732332865, (Bytef *)&v3, 4uLL);
}

uint64_t sub_1003B4A34(uint64_t a1, int a2)
{
  Bytef v2 = a2;
  if (a2 >= 4) {
    sub_1003A3704(a1, (uint64_t)"Invalid sRGB rendering intent specified");
  }
  Bytef v5 = v2;
  return sub_1003B398C(a1, 1934772034, &v5, 1uLL);
}

uint64_t sub_1003B4A94(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a3) {
    sub_1003A34AC(a1, "No profile for iCCP chunk");
  }
  uint64_t v5 = _byteswap_ulong(*(_DWORD *)a3);
  if (v5 <= 0x83) {
    sub_1003A34AC(a1, "ICC profile too short");
  }
  if ((*(unsigned char *)(a3 + 3) & 3) != 0 && *(unsigned __int8 *)(a3 + 8) >= 4u) {
    sub_1003A34AC(a1, "ICC profile length invalid (not a multiple of 4)");
  }
  memset(&v21[2], 0, 496);
  int v7 = sub_1003B1178(a1, a2, buf);
  if (!v7) {
    sub_1003A34AC(a1, "iCCP: invalid keyword");
  }
  buf[v7 + 1] = 0;
  uint64_t v8 = (v7 + 2);
  v21[0] = a3;
  v21[1] = v5;
  LODWORD(v21[2]) = 0;
  uint64_t result = sub_1003B4DB0(a1, 1766015824, (uint64_t)v21, v8);
  if (result) {
    sub_1003A34AC(a1, *(const char **)(a1 + 360));
  }
  int v10 = v21[2];
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v23) = (v10 + v8) >> 24;
    BYTE1(v23) = (v10 + v8) >> 16;
    BYTE2(v23) = (unsigned __int16)(v10 + v8) >> 8;
    HIBYTE(v23) = v10 + v8;
    int v24 = 1346585449;
    sub_1003B1C70(a1);
    *(_DWORD *)(a1 + 528) = 1766015824;
    sub_10039EEB8(a1);
    uint64_t result = sub_10039EEEC(a1, (Bytef *)&v24, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    if (v8)
    {
      sub_1003B1C70(a1);
      uint64_t result = sub_10039EEEC(a1, buf, v8);
    }
    unsigned int v11 = v21[2];
    unsigned int v12 = (Bytef *)&v21[2] + 4;
    unint64_t v13 = *(void **)(a1 + 424);
    if (LODWORD(v21[2]) <= 0x400) {
      uint64_t v14 = LODWORD(v21[2]);
    }
    else {
      uint64_t v14 = 1024;
    }
    if (v14)
    {
LABEL_16:
      sub_1003B1C70(a1);
      uint64_t result = sub_10039EEEC(a1, v12, v14);
    }
    while (1)
    {
      v11 -= v14;
      BOOL v15 = v11 == 0;
      if (!v11 || v13 == 0) {
        break;
      }
      unsigned int v17 = *(_DWORD *)(a1 + 432);
      unsigned int v12 = (Bytef *)(v13 + 1);
      unint64_t v13 = (void *)*v13;
      if (v17 >= v11) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = v17;
      }
      if (v14) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (LODWORD(v21[2]) < 0x401 || (__int16 v18 = (void *)MEMORY[0x1A8]) == 0)
    {
      if (LODWORD(v21[2]) <= 0x400) {
        return result;
      }
LABEL_48:
      sub_1003A34AC(a1, "error writing ancillary chunked compressed data");
    }
    unsigned int v19 = LODWORD(v21[2]) - 1024;
    do
    {
      BOOL v20 = v19 > MEMORY[0x1B0];
      if (v19 >= MEMORY[0x1B0]) {
        v19 -= MEMORY[0x1B0];
      }
      else {
        unsigned int v19 = 0;
      }
      BOOL v15 = !v20;
      if (!v20) {
        break;
      }
      __int16 v18 = (void *)*v18;
    }
    while (v18);
  }
  if (!v15) {
    goto LABEL_48;
  }
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 130;
    unsigned int v23 = bswap32(*(_DWORD *)(a1 + 580));
    return sub_1003B1C70(a1);
  }
  return result;
}

uint64_t sub_1003B4DB0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7 = sub_1003B43EC(a1, a2, *(void *)(a3 + 8));
  if (!v7)
  {
    uint64_t v8 = (void **)(a1 + 424);
    unint64_t v9 = *(void *)(a3 + 8);
    *(void *)(a1 + 312) = *(void *)a3;
    *(void *)(a1 + 336) = a3 + 20;
    int v10 = 1024;
    *(_DWORD *)(a1 + 344) = 1024;
    do
    {
      if (v9 >= 0xFFFFFFFF) {
        uint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v13 = v9;
      }
      v9 -= v13;
      *(_DWORD *)(a1 + 320) = v13;
      if (!*(_DWORD *)(a1 + 344))
      {
        if (v10 + a4 < 0) {
          goto LABEL_13;
        }
        uint64_t v14 = *v8;
        if (!*v8)
        {
          uint64_t v14 = sub_1003A47DC(a1, *(unsigned int *)(a1 + 432) + 8);
          if (!v14)
          {
LABEL_13:
            uint64_t v7 = 4294967292;
            goto LABEL_15;
          }
          *uint64_t v14 = 0;
          *uint64_t v8 = v14;
        }
        *(void *)(a1 + 336) = v14 + 1;
        int v11 = *(_DWORD *)(a1 + 432);
        *(_DWORD *)(a1 + 344) = v11;
        v10 += v11;
        uint64_t v8 = (void **)v14;
      }
      uint64_t v12 = deflate((z_streamp)(a1 + 312), 4 * (v9 == 0));
      v9 += *(unsigned int *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = 0;
    }
    while (!v12);
    uint64_t v7 = v12;
LABEL_15:
    int v15 = v10 - *(_DWORD *)(a1 + 344);
    *(_DWORD *)(a1 + 344) = 0;
    *(_DWORD *)(a3 + 16) = v15;
    if ((v15 + a4) >= 0x7FFFFFFF)
    {
      *(void *)(a1 + 360) = "compressed data too long";
      *(_DWORD *)(a1 + 304) = 0;
      return 4294967292;
    }
    sub_10039F92C(a1, v7);
    *(_DWORD *)(a1 + 304) = 0;
    if (v7 == 1 && !v9)
    {
      unint64_t v16 = *(void *)(a3 + 8);
      if (v16 > 0x4000) {
        return 0;
      }
      uint64_t v7 = 0;
      unint64_t v17 = *(unsigned __int8 *)(a3 + 20);
      if ((v17 & 0xF) == 8 && (v17 & 0xF0) <= 0x70)
      {
        unint64_t v18 = v17 >> 4;
        unint64_t v19 = 128 << (*(unsigned char *)(a3 + 20) >> 4);
        if (v16 > v19) {
          return 0;
        }
        int v21 = ((v18 & 0xF) << 12) | 0x800;
        char v22 = (v17 & 0xF0) + 8;
        int v23 = v18 - 1;
        do
        {
          v21 -= 4096;
          v22 -= 16;
          if (v23-- == 0) {
            break;
          }
          unint64_t v19 = v19 >> 1;
        }
        while (v16 <= v19);
        uint64_t v7 = 0;
        *(unsigned char *)(a3 + 20) = v22;
        *(unsigned char *)(a3 + 21) = (*(unsigned char *)(a3 + 21) & 0xE0 | ((*(unsigned char *)(a3 + 21) & 0xE0)
                                                           - 31 * (((*(unsigned char *)(a3 + 21) & 0xE0u) + v21) / 0x1F))) ^ 0x1F;
      }
    }
  }
  return v7;
}

uint64_t sub_1003B4FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (Bytef *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8) == 8) {
    uint64_t v5 = 6;
  }
  else {
    uint64_t v5 = 10;
  }
  int v6 = *(_DWORD *)(a2 + 24);
  uint64_t result = sub_1003B1178(a1, *(unsigned __int8 **)a2, buf);
  if (!result) {
    sub_1003A34AC(a1, "sPLT: invalid keyword");
  }
  if (!a1)
  {
    int v19 = *(_DWORD *)(a2 + 24);
    if (v19 > 0)
    {
      BOOL v20 = *(unsigned __int16 **)(a2 + 16);
      int v21 = &v20[5 * v19];
      if (*(unsigned char *)(a2 + 8) == 8)
      {
        do
        {
          v8.i64[0] = *(void *)v20;
          *(_DWORD *)char v22 = vmovn_s16(v8).u32[0];
          LOWORD(v23) = bswap32(v20[4]) >> 16;
          v20 += 5;
        }
        while (v20 < v21);
      }
      else
      {
        do
        {
          *(_WORD *)char v22 = bswap32(*v20) >> 16;
          *(_WORD *)&v22[2] = bswap32(v20[1]) >> 16;
          LOWORD(v23) = bswap32(v20[2]) >> 16;
          HIWORD(v23) = bswap32(v20[3]) >> 16;
          v24[0] = bswap32(v20[4]) >> 16;
          v20 += 5;
        }
        while (v20 < v21);
      }
    }
LABEL_19:
    if (!a1) {
      return result;
    }
    goto LABEL_20;
  }
  int v9 = result;
  *(_DWORD *)(a1 + 1124) = 34;
  v22[0] = (result + v6 * v5 + 2) >> 24;
  v22[1] = (result + v6 * v5 + 2) >> 16;
  v22[2] = (unsigned __int16)(result + v6 * v5 + 2) >> 8;
  v22[3] = result + v6 * v5 + 2;
  int v23 = 1414287475;
  sub_1003B1C70(a1);
  *(_DWORD *)(a1 + 528) = 1934642260;
  sub_10039EEB8(a1);
  sub_10039EEEC(a1, (Bytef *)&v23, 4);
  *(_DWORD *)(a1 + 1124) = 66;
  BOOL v10 = __CFADD__(v9, 1);
  uint64_t v11 = (v9 + 1);
  if (!v10)
  {
    sub_1003B1C70(a1);
    sub_10039EEEC(a1, buf, v11);
  }
  sub_1003B1C70(a1);
  sub_10039EEEC(a1, v4, 1);
  if (*(int *)(a2 + 24) > 0)
  {
    uint64_t v12 = (unsigned __int16 *)(*(void *)(a2 + 16) + 4);
    do
    {
      unint64_t v18 = v12 - 2;
      if (*v4 == 8)
      {
        v22[0] = *(v12 - 2);
        v22[1] = *((unsigned char *)v12 - 2);
        v22[2] = *(unsigned char *)v12;
        unsigned __int16 v13 = v12[1];
        int v15 = &v23;
        uint64_t v14 = &v22[3];
        unint64_t v16 = (char *)&v23 + 1;
      }
      else
      {
        *(_WORD *)char v22 = __rev16(*(v12 - 2));
        *(_WORD *)&v22[2] = bswap32(*(v12 - 1)) >> 16;
        LOWORD(v23) = bswap32(*v12) >> 16;
        unsigned __int16 v13 = v12[1];
        BYTE2(v23) = HIBYTE(v13);
        uint64_t v14 = (Bytef *)&v23 + 3;
        int v15 = (int *)v24;
        unint64_t v16 = (char *)v24 + 1;
      }
      *uint64_t v14 = v13;
      unsigned __int16 v17 = v12[2];
      *(unsigned char *)int v15 = HIBYTE(v17);
      unsigned char *v16 = v17;
      sub_1003B1C70(a1);
      uint64_t result = sub_10039EEEC(a1, v22, v5);
      v12 += 5;
    }
    while ((unint64_t)(v18 + 5) < *(void *)(a2 + 16) + 10 * *(int *)(a2 + 24));
    goto LABEL_19;
  }
LABEL_20:
  *(_DWORD *)(a1 + 1124) = 130;
  return sub_1003B1C70(a1);
}

uint64_t sub_1003B5338(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if ((a3 & 2) != 0)
  {
    if (a3 == 3)
    {
      unsigned int v4 = 8;
      unsigned int v5 = *a2;
      if (*a2) {
        BOOL v6 = v5 <= 8;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        goto LABEL_24;
      }
    }
    else
    {
      unsigned int v4 = *(unsigned __int8 *)(a1 + 609);
      unsigned int v5 = *a2;
      if (*a2) {
        BOOL v7 = v4 >= v5;
      }
      else {
        BOOL v7 = 0;
      }
      if (!v7) {
        goto LABEL_24;
      }
    }
    unsigned int v8 = a2[1];
    if (a2[1])
    {
      if (v4 >= v8)
      {
        unsigned int v9 = a2[2];
        if (a2[2])
        {
          if (v4 >= v9)
          {
            v12[0] = v5;
            v12[1] = v8;
            unint64_t v3 = 3;
            v12[2] = v9;
            if ((a3 & 4) == 0) {
              return sub_1003B398C(a1, 1933723988, v12, v3);
            }
            goto LABEL_22;
          }
        }
      }
    }
  }
  else if (a2[3] && a2[3] <= *(unsigned __int8 *)(a1 + 609))
  {
    v12[0] = a2[3];
    unint64_t v3 = 1;
    if ((a3 & 4) == 0) {
      return sub_1003B398C(a1, 1933723988, v12, v3);
    }
LABEL_22:
    unsigned int v10 = a2[4];
    if (!a2[4] || v10 > *(unsigned __int8 *)(a1 + 609)) {
      goto LABEL_24;
    }
    v12[v3++] = v10;
    return sub_1003B398C(a1, 1933723988, v12, v3);
  }
LABEL_24:

  return sub_1003A3704(a1, (uint64_t)"Invalid sBIT depth specified");
}

uint64_t sub_1003B5438(uint64_t a1, unsigned int *a2)
{
  sub_10039F878(&v5, a2[6]);
  sub_10039F878(&v6, a2[7]);
  sub_10039F878(&v7, *a2);
  sub_10039F878(&v8, a2[1]);
  sub_10039F878(&v9, a2[2]);
  sub_10039F878(&v10, a2[3]);
  sub_10039F878(&v11, a2[4]);
  sub_10039F878(&v12, a2[5]);
  return sub_1003B398C(a1, 1665684045, (Bytef *)&v5, 0x20uLL);
}

uint64_t sub_1003B5514(uint64_t a1, Bytef *a2, unsigned __int16 *a3, int a4, int a5)
{
  if (a5)
  {
    if (a5 == 2)
    {
      unsigned int v8 = a3[1];
      unsigned int v9 = v8 >> 8;
      v15[0] = __rev16(v8);
      unsigned int v10 = a3[2];
      unsigned int v11 = v10 >> 8;
      v15[1] = __rev16(v10);
      unsigned int v12 = a3[3];
      v15[2] = __rev16(v12);
      int v13 = v11 | (v12 >> 8) | v9;
      if (*(unsigned char *)(a1 + 608) == 8 && v13 != 0)
      {
        int v5 = "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8";
        return sub_1003A3E84(a1, v5);
      }
      return sub_1003B398C(a1, 1951551059, (Bytef *)v15, 6uLL);
    }
    else
    {
      if (a5 != 3)
      {
        int v5 = "Can't write tRNS with an alpha channel";
        return sub_1003A3E84(a1, v5);
      }
      if (a4 < 1 || *(unsigned __int16 *)(a1 + 592) < a4)
      {
        int v5 = "Invalid number of transparent colors specified";
        return sub_1003A3E84(a1, v5);
      }
      return sub_1003B398C(a1, 1951551059, a2, a4);
    }
  }
  else
  {
    signed int v7 = a3[4];
    if (1 << *(unsigned char *)(a1 + 608) <= v7)
    {
      int v5 = "Ignoring attempt to write tRNS chunk out-of-range for bit_depth";
      return sub_1003A3E84(a1, v5);
    }
    v15[0] = __rev16(v7);
    return sub_1003B398C(a1, 1951551059, (Bytef *)v15, 2uLL);
  }
}

uint64_t sub_1003B56B4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3 == 3)
  {
    if (!*(_WORD *)(a1 + 592) && (*(unsigned char *)(a1 + 976) & 1) != 0)
    {
      LOBYTE(v3) = *a2;
    }
    else
    {
      unsigned int v3 = *a2;
      if (*(unsigned __int16 *)(a1 + 592) <= v3)
      {
        unsigned int v4 = "Invalid background palette index";
        return sub_1003A3704(a1, (uint64_t)v4);
      }
    }
    LOBYTE(v14[0]) = v3;
    return sub_1003B398C(a1, 1649100612, (Bytef *)v14, 1uLL);
  }
  else if ((a3 & 2) != 0)
  {
    unsigned int v7 = *((unsigned __int16 *)a2 + 1);
    unsigned int v8 = v7 >> 8;
    v14[0] = __rev16(v7);
    unsigned int v9 = *((unsigned __int16 *)a2 + 2);
    unsigned int v10 = v9 >> 8;
    v14[1] = __rev16(v9);
    unsigned int v11 = *((unsigned __int16 *)a2 + 3);
    v14[2] = __rev16(v11);
    int v12 = v10 | (v11 >> 8) | v8;
    if (*(unsigned char *)(a1 + 608) == 8 && v12 != 0)
    {
      unsigned int v4 = "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8";
      return sub_1003A3704(a1, (uint64_t)v4);
    }
    return sub_1003B398C(a1, 1649100612, (Bytef *)v14, 6uLL);
  }
  else
  {
    signed int v6 = *((unsigned __int16 *)a2 + 4);
    if (1 << *(unsigned char *)(a1 + 608) <= v6)
    {
      unsigned int v4 = "Ignoring attempt to write bKGD chunk out-of-range for bit_depth";
      return sub_1003A3704(a1, (uint64_t)v4);
    }
    v14[0] = __rev16(v6);
    return sub_1003B398C(a1, 1649100612, (Bytef *)v14, 2uLL);
  }
}

uint64_t sub_1003B5828(uint64_t result, Bytef *a2, int a3)
{
  LODWORD(v3) = a3;
  unsigned int v4 = a2;
  int v5 = (_DWORD *)result;
  if (!result)
  {
    if (a3 > 0) {
      Bytef buf = a2[a3 - 1];
    }
LABEL_8:
    if (!v5) {
      return result;
    }
    goto LABEL_9;
  }
  *(_DWORD *)(result + 1124) = 34;
  LOBYTE(v8) = HIBYTE(a3);
  BYTE1(v8) = BYTE2(a3);
  BYTE2(v8) = BYTE1(a3);
  HIBYTE(v8) = a3;
  int v9 = 1716082789;
  sub_1003B1C70(result);
  v5[132] = 1700284774;
  sub_10039EEB8((uint64_t)v5);
  sub_10039EEEC((uint64_t)v5, (Bytef *)&v9, 4);
  v5[281] = 66;
  if ((int)v3 > 0)
  {
    uint64_t v3 = v3;
    do
    {
      Bytef v6 = *v4++;
      Bytef buf = v6;
      sub_1003B1C70((uint64_t)v5);
      uint64_t result = sub_10039EEEC((uint64_t)v5, &buf, 1);
      --v3;
    }
    while (v3);
    goto LABEL_8;
  }
LABEL_9:
  v5[281] = 130;
  unsigned int v8 = bswap32(v5[145]);
  return sub_1003B1C70((uint64_t)v5);
}

uint64_t sub_1003B5980(uint64_t a1, unsigned __int16 *a2, unsigned int a3)
{
  if (*(unsigned __int16 *)(a1 + 592) >= (int)a3)
  {
    LODWORD(v5) = a3;
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v9) = a3 >> 23;
    BYTE1(v9) = a3 >> 15;
    BYTE2(v9) = a3 >> 7;
    HIBYTE(v9) = 2 * a3;
    int v10 = 1414744424;
    sub_1003B1C70(a1);
    *(_DWORD *)(a1 + 528) = 1749635924;
    sub_10039EEB8(a1);
    sub_10039EEEC(a1, (Bytef *)&v10, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    if ((int)v5 >= 1)
    {
      uint64_t v5 = v5;
      do
      {
        unsigned int v7 = *a2++;
        *(_WORD *)Bytef buf = bswap32(v7) >> 16;
        sub_1003B1C70(a1);
        sub_10039EEEC(a1, buf, 2);
        --v5;
      }
      while (v5);
    }
    *(_DWORD *)(a1 + 1124) = 130;
    unsigned int v9 = bswap32(*(_DWORD *)(a1 + 580));
    return sub_1003B1C70(a1);
  }
  else
  {
    return sub_1003A3704(a1, (uint64_t)"Invalid number of histogram entries specified");
  }
}

unint64_t sub_1003B5B18(_DWORD *a1, unsigned __int8 *a2, char *a3)
{
  unint64_t result = sub_1003B1178((uint64_t)a1, a2, v11);
  if (!result) {
    sub_1003A34AC((uint64_t)a1, "tEXt: invalid keyword");
  }
  int v6 = result;
  if (a3)
  {
    if (!*a3)
    {
      uint64_t v7 = 0;
      if (!a1) {
        return result;
      }
      goto LABEL_8;
    }
    unint64_t result = strlen(a3);
    uint64_t v7 = result;
    if (result > (2147483646 - v6)) {
      sub_1003A34AC((uint64_t)a1, "tEXt: text too long");
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (!a1) {
    return result;
  }
LABEL_8:
  BOOL v8 = __CFADD__(v6, 1);
  uint64_t v9 = (v6 + 1);
  char v10 = v8;
  a1[281] = 34;
  LOBYTE(v12) = (v9 + v7) >> 24;
  BYTE1(v12) = (v9 + v7) >> 16;
  BYTE2(v12) = (unsigned __int16)(v9 + v7) >> 8;
  HIBYTE(v12) = v9 + v7;
  int v13 = 1951942004;
  sub_1003B1C70((uint64_t)a1);
  a1[132] = 1950701684;
  sub_10039EEB8((uint64_t)a1);
  sub_10039EEEC((uint64_t)a1, (Bytef *)&v13, 4);
  a1[281] = 66;
  if ((v10 & 1) == 0)
  {
    sub_1003B1C70((uint64_t)a1);
    sub_10039EEEC((uint64_t)a1, v11, v9);
  }
  if (a3)
  {
    if (v7)
    {
      sub_1003B1C70((uint64_t)a1);
      sub_10039EEEC((uint64_t)a1, (Bytef *)a3, v7);
    }
  }
  a1[281] = 130;
  unsigned int v12 = bswap32(a1[145]);
  return sub_1003B1C70((uint64_t)a1);
}

unint64_t sub_1003B5CDC(uint64_t a1, unsigned __int8 *a2, char *a3, int a4)
{
  if (a4)
  {
    if (a4 != -1) {
      sub_1003A34AC(a1, "zTXt: invalid compression type");
    }
    return sub_1003B5B18((_DWORD *)a1, a2, a3);
  }
  memset(&v21[2], 0, 496);
  int v7 = sub_1003B1178(a1, a2, buf);
  if (!v7) {
    sub_1003A34AC(a1, "zTXt: invalid keyword");
  }
  buf[v7 + 1] = 0;
  uint64_t v8 = (v7 + 2);
  if (a3) {
    size_t v9 = strlen(a3);
  }
  else {
    size_t v9 = 0;
  }
  v21[0] = a3;
  v21[1] = v9;
  LODWORD(v21[2]) = 0;
  unint64_t result = sub_1003B4DB0(a1, 2052348020, (uint64_t)v21, v8);
  if (result) {
    sub_1003A34AC(a1, *(const char **)(a1 + 360));
  }
  int v10 = v21[2];
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v23) = (v10 + v8) >> 24;
    BYTE1(v23) = (v10 + v8) >> 16;
    BYTE2(v23) = (unsigned __int16)(v10 + v8) >> 8;
    HIBYTE(v23) = v10 + v8;
    int v24 = 1951945850;
    sub_1003B1C70(a1);
    *(_DWORD *)(a1 + 528) = 2052348020;
    sub_10039EEB8(a1);
    unint64_t result = sub_10039EEEC(a1, (Bytef *)&v24, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    if (v8)
    {
      sub_1003B1C70(a1);
      unint64_t result = sub_10039EEEC(a1, buf, v8);
    }
    unsigned int v11 = v21[2];
    unsigned int v12 = (Bytef *)&v21[2] + 4;
    int v13 = *(void **)(a1 + 424);
    if (LODWORD(v21[2]) <= 0x400) {
      uint64_t v14 = LODWORD(v21[2]);
    }
    else {
      uint64_t v14 = 1024;
    }
    if (v14)
    {
LABEL_18:
      sub_1003B1C70(a1);
      unint64_t result = sub_10039EEEC(a1, v12, v14);
    }
    while (1)
    {
      v11 -= v14;
      BOOL v15 = v11 == 0;
      if (!v11 || v13 == 0) {
        break;
      }
      unsigned int v17 = *(_DWORD *)(a1 + 432);
      unsigned int v12 = (Bytef *)(v13 + 1);
      int v13 = (void *)*v13;
      if (v17 >= v11) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = v17;
      }
      if (v14) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    if (LODWORD(v21[2]) < 0x401 || (unint64_t v18 = (void *)MEMORY[0x1A8]) == 0)
    {
      if (LODWORD(v21[2]) <= 0x400) {
        return result;
      }
LABEL_48:
      sub_1003A34AC(a1, "error writing ancillary chunked compressed data");
    }
    unsigned int v19 = LODWORD(v21[2]) - 1024;
    do
    {
      BOOL v20 = v19 > MEMORY[0x1B0];
      if (v19 >= MEMORY[0x1B0]) {
        v19 -= MEMORY[0x1B0];
      }
      else {
        unsigned int v19 = 0;
      }
      BOOL v15 = !v20;
      if (!v20) {
        break;
      }
      unint64_t v18 = (void *)*v18;
    }
    while (v18);
  }
  if (!v15) {
    goto LABEL_48;
  }
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 130;
    unsigned int v23 = bswap32(*(_DWORD *)(a1 + 580));
    return sub_1003B1C70(a1);
  }
  return result;
}

size_t sub_1003B5FF8(uint64_t a1, int a2, unsigned __int8 *a3, char *a4, char *a5, char *a6)
{
  memset(&v34[2], 0, 496);
  int v11 = sub_1003B1178(a1, a3, buf);
  if (!v11) {
    sub_1003A34AC(a1, "iTXt: invalid keyword");
  }
  char v12 = a2 + 1;
  if ((a2 + 1) >= 4) {
    sub_1003A34AC(a1, "iTXt: invalid compression");
  }
  int v13 = v11;
  buf[v11 + 1] = 0x1000100u >> (8 * v12);
  buf[v11 + 2] = 0;
  uint64_t v14 = (v11 + 3);
  if (a4) {
    BOOL v15 = a4;
  }
  else {
    BOOL v15 = "";
  }
  unint64_t v16 = strlen(v15) + 1;
  if (!a5) {
    a5 = "";
  }
  unint64_t v17 = strlen(a5) + 1;
  if (!a6) {
    a6 = "";
  }
  int v18 = v14 + v16;
  if (v16 > (2147483644 - v13)) {
    int v18 = 0x7FFFFFFF;
  }
  unint64_t v19 = v18 ^ 0x7FFFFFFFu;
  int v20 = v18 + v17;
  if (v17 <= v19) {
    int v21 = v20;
  }
  else {
    int v21 = 0x7FFFFFFF;
  }
  size_t result = strlen(a6);
  v34[0] = a6;
  v34[1] = result;
  LODWORD(v34[2]) = 0;
  if ((v12 & 1) == 0)
  {
    if (result > (v21 ^ 0x7FFFFFFFu)) {
      sub_1003A34AC(a1, "iTXt: uncompressed text too long");
    }
    LODWORD(v34[2]) = result;
    if (!a1) {
      return result;
    }
    goto LABEL_21;
  }
  if (sub_1003B4DB0(a1, 1767135348, (uint64_t)v34, v21)) {
    sub_1003A34AC(a1, *(const char **)(a1 + 360));
  }
  size_t result = LODWORD(v34[2]);
  if (a1)
  {
LABEL_21:
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v36) = (result + v21) >> 24;
    BYTE1(v36) = (result + v21) >> 16;
    BYTE2(v36) = (unsigned __int16)(result + v21) >> 8;
    HIBYTE(v36) = result + v21;
    int v37 = 1951945833;
    sub_1003B1C70(a1);
    *(_DWORD *)(a1 + 528) = 1767135348;
    sub_10039EEB8(a1);
    sub_10039EEEC(a1, (Bytef *)&v37, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    if (v14)
    {
      sub_1003B1C70(a1);
      sub_10039EEEC(a1, buf, v14);
    }
    if (v16)
    {
      sub_1003B1C70(a1);
      sub_10039EEEC(a1, (Bytef *)v15, v16);
    }
    if (v17)
    {
      sub_1003B1C70(a1);
      sub_10039EEEC(a1, (Bytef *)a5, v17);
    }
    if ((v12 & 1) == 0)
    {
      uint64_t v23 = LODWORD(v34[2]);
      if (LODWORD(v34[2]))
      {
        sub_1003B1C70(a1);
        sub_10039EEEC(a1, (Bytef *)a6, v23);
      }
LABEL_45:
      *(_DWORD *)(a1 + 1124) = 130;
      unsigned int v36 = bswap32(*(_DWORD *)(a1 + 580));
      return sub_1003B1C70(a1);
    }
    unsigned int v24 = v34[2];
    char v25 = (Bytef *)&v34[2] + 4;
    int v26 = *(void **)(a1 + 424);
    if (LODWORD(v34[2]) <= 0x400) {
      uint64_t v27 = LODWORD(v34[2]);
    }
    else {
      uint64_t v27 = 1024;
    }
    if (v27)
    {
LABEL_34:
      sub_1003B1C70(a1);
      sub_10039EEEC(a1, v25, v27);
    }
    while (1)
    {
      v24 -= v27;
      if (!v24 || v26 == 0) {
        break;
      }
      unsigned int v29 = *(_DWORD *)(a1 + 432);
      char v25 = (Bytef *)(v26 + 1);
      int v26 = (void *)*v26;
      if (v29 >= v24) {
        uint64_t v27 = v24;
      }
      else {
        uint64_t v27 = v29;
      }
      if (v27) {
        goto LABEL_34;
      }
    }
    if (!v24) {
      goto LABEL_45;
    }
LABEL_64:
    sub_1003A34AC(a1, "error writing ancillary chunked compressed data");
  }
  BOOL v30 = LODWORD(v34[2]) < 0x401;
  if (LODWORD(v34[2]) >= 0x401)
  {
    unint64_t v31 = (void *)MEMORY[0x1A8];
    if (MEMORY[0x1A8])
    {
      unsigned int v32 = LODWORD(v34[2]) - 1024;
      do
      {
        BOOL v33 = v32 > MEMORY[0x1B0];
        if (v32 >= MEMORY[0x1B0]) {
          v32 -= MEMORY[0x1B0];
        }
        else {
          unsigned int v32 = 0;
        }
        BOOL v30 = !v33;
        if (!v33) {
          break;
        }
        unint64_t v31 = (void *)*v31;
      }
      while (v31);
    }
  }
  if (!v30) {
    goto LABEL_64;
  }
  return result;
}

uint64_t sub_1003B6470(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  char v4 = a4;
  if (a4 >= 2) {
    sub_1003A3704(a1, (uint64_t)"Unrecognized unit type for oFFs chunk");
  }
  sub_10039F878(&v9, a2);
  sub_10039F878(&v10, a3);
  char v11 = v4;
  return sub_1003B398C(a1, 1866876531, (Bytef *)&v9, 9uLL);
}

void sub_1003B6530(uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6, const char *a7, Bytef **a8)
{
  if (a5 >= 4) {
    sub_1003A34AC(a1, "Unrecognized equation type for pCAL chunk");
  }
  char v12 = a5;
  int v15 = sub_1003B1178(a1, a2, buf);
  if (!v15) {
    sub_1003A34AC(a1, "pCAL: invalid keyword");
  }
  unsigned int v39 = a3;
  unsigned int v40 = a4;
  char v41 = v12;
  uint64_t v16 = (v15 + 1);
  unsigned __int8 v42 = (Bytef *)a7;
  size_t v17 = strlen(a7);
  if (a6) {
    size_t v18 = v17 + 1;
  }
  else {
    size_t v18 = v17;
  }
  uint64_t v38 = v18;
  int v19 = v16 + v18 + 10;
  int v20 = sub_1003A4784((void *)a1, 8 * a6);
  uint64_t v21 = a6;
  uint64_t v22 = (a6 - 1);
  unsigned int v43 = v20;
  if (a6 >= 1)
  {
    uint64_t v23 = a6;
    unsigned int v24 = (const char **)a8;
    char v25 = (size_t *)v20;
    do
    {
      int v26 = *v24++;
      size_t v27 = strlen(v26);
      BOOL v28 = v22-- != 0;
      if (v28) {
        size_t v29 = v27 + 1;
      }
      else {
        size_t v29 = v27;
      }
      *v25++ = v29;
      v19 += v27 + v28;
      --v23;
    }
    while (v23);
  }
  if (a1)
  {
    *(_DWORD *)(a1 + 1124) = 34;
    LOBYTE(v45) = HIBYTE(v19);
    BYTE1(v45) = BYTE2(v19);
    BYTE2(v45) = BYTE1(v19);
    HIBYTE(v45) = v19;
    int v46 = 1279345520;
    sub_1003B1C70(a1);
    *(_DWORD *)(a1 + 528) = 1883455820;
    sub_10039EEB8(a1);
    sub_10039EEEC(a1, (Bytef *)&v46, 4);
    *(_DWORD *)(a1 + 1124) = 66;
    BOOL v30 = v42;
    char v31 = v41;
    unsigned int v32 = v39;
    if (v16)
    {
      sub_1003B1C70(a1);
      sub_10039EEEC(a1, buf, v16);
    }
  }
  else
  {
    BOOL v30 = v42;
    char v31 = v41;
    unsigned int v32 = v39;
  }
  sub_10039F878(&v45, v32);
  sub_10039F878(&v46, v40);
  char v47 = v31;
  char v48 = a6;
  if (a1)
  {
    sub_1003B1C70(a1);
    sub_10039EEEC(a1, (Bytef *)&v45, 10);
    if (v30 && v38)
    {
      sub_1003B1C70(a1);
      sub_10039EEEC(a1, v30, v38);
    }
    if (a6 >= 1)
    {
      BOOL v33 = v43;
      do
      {
        char v34 = *a8;
        uint64_t v36 = *v33++;
        uint64_t v35 = v36;
        if (*a8) {
          BOOL v37 = v35 == 0;
        }
        else {
          BOOL v37 = 1;
        }
        if (!v37)
        {
          sub_1003B1C70(a1);
          sub_10039EEEC(a1, v34, v35);
        }
        ++a8;
        --v21;
      }
      while (v21);
    }
    sub_1003A46CC(a1, v43);
    *(_DWORD *)(a1 + 1124) = 130;
    sub_1003B1C70(a1);
  }
  else
  {
    sub_1003A46CC(0, v43);
  }
}

uint64_t sub_1003B6840(uint64_t a1, Bytef a2, char *__s, const char *a4)
{
  size_t v7 = strlen(__s);
  size_t v8 = strlen(a4);
  unint64_t v9 = v7 + v8 + 2;
  if (v9 < 0x41)
  {
    size_t v11 = v8;
    v12[0] = a2;
    __memcpy_chk();
    memcpy(&v12[v7 + 2], a4, v11);
    return sub_1003B398C(a1, 1933787468, v12, v9);
  }
  else
  {
    return sub_1003A3704(a1, (uint64_t)"Can't write sCAL (buffer too small)");
  }
}

uint64_t sub_1003B6978(uint64_t a1, int a2, int a3, int a4)
{
  Bytef v4 = a4;
  if (a4 >= 2) {
    sub_1003A3704(a1, (uint64_t)"Unrecognized unit type for pHYs chunk");
  }
  v9[0] = HIBYTE(a2);
  v9[1] = BYTE2(a2);
  v9[2] = BYTE1(a2);
  v9[3] = a2;
  v9[4] = HIBYTE(a3);
  v9[5] = BYTE2(a3);
  v9[6] = BYTE1(a3);
  v9[7] = a3;
  v9[8] = v4;
  return sub_1003B398C(a1, 1883789683, v9, 9uLL);
}

uint64_t sub_1003B6A4C(uint64_t a1, unsigned __int16 *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 2);
  if ((v2 - 13) >= 0xFFFFFFF4
    && (int v3 = *((unsigned __int8 *)a2 + 3), (v3 - 32) >= 0xFFFFFFE1)
    && (unsigned int v4 = *((unsigned __int8 *)a2 + 4), v4 <= 0x17)
    && (unsigned int v5 = *((unsigned __int8 *)a2 + 6), v5 < 0x3D))
  {
    unsigned __int16 v7 = *a2;
    v8[0] = HIBYTE(*a2);
    v8[1] = v7;
    v8[2] = v2;
    v8[3] = v3;
    Bytef v8[4] = v4;
    v8[5] = *((unsigned char *)a2 + 5);
    v8[6] = v5;
    return sub_1003B398C(a1, 1950960965, v8, 7uLL);
  }
  else
  {
    return sub_1003A3704(a1, (uint64_t)"Invalid time specified for tIME chunk");
  }
}

unsigned char *sub_1003B6B00(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 609) * *(unsigned __int8 *)(a1 + 612);
  unsigned int v3 = *(_DWORD *)(a1 + 496);
  unint64_t v4 = (v3 * (unint64_t)v2 + 7) >> 3;
  unint64_t v5 = v3 * (unint64_t)(v2 >> 3);
  if (v2 < 8) {
    unint64_t v5 = v4;
  }
  size_t v6 = v5 + 1;
  *(unsigned char *)(a1 + 615) = *(unsigned char *)(a1 + 610);
  *(unsigned char *)(a1 + 614) = v2;
  size_t result = sub_1003A4784((void *)a1, v5 + 1);
  *(void *)(a1 + 544) = result;
  *size_t result = 0;
  unsigned int v8 = *(unsigned __int8 *)(a1 + 606);
  if (*(_DWORD *)(a1 + 500) == 1) {
    v8 &= 0x1Fu;
  }
  if (*(_DWORD *)(a1 + 496) == 1) {
    v8 &= 0x2Fu;
  }
  if ((_BYTE)v8) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = 8;
  }
  *(unsigned char *)(a1 + 606) = v9;
  if (v9 >= 0x10)
  {
    if (!*(void *)(a1 + 552))
    {
      size_t result = sub_1003A4784((void *)a1, v6);
      *(void *)(a1 + 552) = result;
      if (((v9 >> 5) & 1) + (v9 >> 7) + ((v9 >> 4) & 1) + ((v9 >> 6) & 1) >= 2)
      {
        size_t result = sub_1003A4784((void *)a1, v6);
        *(void *)(a1 + 560) = result;
      }
    }
    if (v9 >= 0x20)
    {
      size_t result = sub_1003A46EC(a1, v6);
      *(void *)(a1 + 536) = result;
    }
  }
  if (*(unsigned char *)(a1 + 604))
  {
    int v10 = *(_DWORD *)(a1 + 500);
    if ((*(unsigned char *)(a1 + 300) & 2) == 0)
    {
      *(_DWORD *)(a1 + 504) = (v10 + 7) >> 3;
      *(_DWORD *)(a1 + 508) = (*(_DWORD *)(a1 + 496) + 7) >> 3;
      return result;
    }
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 500);
  }
  *(_DWORD *)(a1 + 504) = v10;
  *(_DWORD *)(a1 + 508) = *(_DWORD *)(a1 + 496);
  return result;
}

void sub_1003B6C64(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 524) + 1;
  *(_DWORD *)(a1 + 524) = v1;
  if (v1 >= *(_DWORD *)(a1 + 504))
  {
    if (!*(unsigned char *)(a1 + 604)) {
      goto LABEL_16;
    }
    *(_DWORD *)(a1 + 524) = 0;
    unsigned int v2 = *(unsigned __int8 *)(a1 + 605);
    if ((*(unsigned char *)(a1 + 300) & 2) != 0)
    {
      unsigned __int8 v3 = v2 + 1;
    }
    else
    {
      unsigned __int8 v3 = v2 + 1;
      if ((v2 + 1) <= 6u)
      {
        unsigned int v4 = byte_10040C9DD[(v2 + 1)];
        unsigned int v5 = *(_DWORD *)(a1 + 496) + v4 + ~byte_10040C9D6[(v2 + 1)];
        *(_DWORD *)(a1 + 508) = v5 / v4;
        unsigned int v6 = byte_10040C9CF[(v2 + 1)];
        unsigned int v7 = *(_DWORD *)(a1 + 500) + v6 + ~byte_10040C9C8[(v2 + 1)];
        *(_DWORD *)(a1 + 504) = v7 / v6;
        if (v5 < v4 || v7 < v6)
        {
          unsigned __int8 v3 = v2 + 2;
          if ((v2 + 2) <= 6u)
          {
            unsigned int v13 = byte_10040C9DD[(v2 + 2)];
            unsigned int v14 = *(_DWORD *)(a1 + 496) + v13 + ~byte_10040C9D6[(v2 + 2)];
            *(_DWORD *)(a1 + 508) = v14 / v13;
            unsigned int v15 = byte_10040C9CF[(v2 + 2)];
            unsigned int v16 = *(_DWORD *)(a1 + 500) + v15 + ~byte_10040C9C8[(v2 + 2)];
            *(_DWORD *)(a1 + 504) = v16 / v15;
            if (v14 < v13 || v16 < v15)
            {
              unsigned __int8 v3 = v2 + 3;
              if ((v2 + 3) <= 6u)
              {
                unsigned int v17 = byte_10040C9DD[(v2 + 3)];
                unsigned int v18 = *(_DWORD *)(a1 + 496) + v17 + ~byte_10040C9D6[(v2 + 3)];
                *(_DWORD *)(a1 + 508) = v18 / v17;
                unsigned int v19 = byte_10040C9CF[(v2 + 3)];
                unsigned int v20 = *(_DWORD *)(a1 + 500) + v19 + ~byte_10040C9C8[(v2 + 3)];
                *(_DWORD *)(a1 + 504) = v20 / v19;
                if (v18 < v17 || v20 < v19)
                {
                  unsigned __int8 v3 = v2 + 4;
                  if ((v2 + 4) <= 6u)
                  {
                    unsigned int v21 = byte_10040C9DD[(v2 + 4)];
                    unsigned int v22 = *(_DWORD *)(a1 + 496) + v21 + ~byte_10040C9D6[(v2 + 4)];
                    *(_DWORD *)(a1 + 508) = v22 / v21;
                    unsigned int v23 = byte_10040C9CF[(v2 + 4)];
                    unsigned int v24 = *(_DWORD *)(a1 + 500) + v23 + ~byte_10040C9C8[(v2 + 4)];
                    *(_DWORD *)(a1 + 504) = v24 / v23;
                    if (v22 < v21 || v24 < v23)
                    {
                      unsigned __int8 v3 = v2 + 5;
                      if ((v2 + 5) <= 6u)
                      {
                        unsigned int v25 = byte_10040C9DD[(v2 + 5)];
                        unsigned int v26 = *(_DWORD *)(a1 + 496) + v25 + ~byte_10040C9D6[(v2 + 5)];
                        *(_DWORD *)(a1 + 508) = v26 / v25;
                        unsigned int v27 = byte_10040C9CF[(v2 + 5)];
                        unsigned int v28 = *(_DWORD *)(a1 + 500) + v27 + ~byte_10040C9C8[(v2 + 5)];
                        *(_DWORD *)(a1 + 504) = v28 / v27;
                        if (v26 < v25 || v28 < v27)
                        {
                          unsigned __int8 v3 = v2 + 6;
                          if ((v2 + 6) <= 6u)
                          {
                            unsigned int v29 = byte_10040C9DD[(v2 + 6)];
                            unsigned int v30 = *(_DWORD *)(a1 + 496) + v29 + ~byte_10040C9D6[(v2 + 6)];
                            *(_DWORD *)(a1 + 508) = v30 / v29;
                            unsigned int v31 = byte_10040C9CF[(v2 + 6)];
                            unsigned int v32 = *(_DWORD *)(a1 + 500) + v31 + ~byte_10040C9C8[(v2 + 6)];
                            *(_DWORD *)(a1 + 504) = v32 / v31;
                            if (v30 < v29 || v32 < v31)
                            {
                              unsigned __int8 v3 = v2 + 7;
                              if (v2 >= 0xF9)
                              {
                                unsigned int v33 = byte_10040C9DD[(v2 + 7)];
                                unsigned int v34 = *(_DWORD *)(a1 + 496) + v33 + ~byte_10040C9D6[(v2 + 7)];
                                *(_DWORD *)(a1 + 508) = v34 / v33;
                                unsigned int v35 = byte_10040C9CF[(v2 + 7)];
                                unsigned int v36 = *(_DWORD *)(a1 + 500) + v35 + ~byte_10040C9C8[(v2 + 7)];
                                *(_DWORD *)(a1 + 504) = v36 / v35;
                                if (v34 < v33 || v36 < v35)
                                {
                                  unsigned __int8 v3 = v2 + 8;
                                  if ((v2 + 8) <= 6u)
                                  {
                                    *(_DWORD *)(a1 + 508) = (*(_DWORD *)(a1 + 496)
                                                           + byte_10040C9DD[(v2 + 8)]
                                                           + ~byte_10040C9D6[(v2 + 8)])
                                                          / byte_10040C9DD[(v2 + 8)];
                                    *(_DWORD *)(a1 + 504) = (*(_DWORD *)(a1 + 500)
                                                           + byte_10040C9CF[(v2 + 8)]
                                                           + ~byte_10040C9C8[(v2 + 8)])
                                                          / byte_10040C9CF[(v2 + 8)];
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    *(unsigned char *)(a1 + 605) = v3;
    if (v3 <= 6u)
    {
      if (*(void *)(a1 + 536))
      {
        unsigned int v8 = *(unsigned __int8 *)(a1 + 609) * *(unsigned __int8 *)(a1 + 612);
        unsigned int v9 = *(_DWORD *)(a1 + 496);
        BOOL v10 = v8 >= 8;
        unint64_t v11 = (v9 * (unint64_t)v8 + 7) >> 3;
        unint64_t v12 = v9 * (unint64_t)(v8 >> 3);
        if (!v10) {
          unint64_t v12 = v11;
        }
        bzero(*(void **)(a1 + 536), v12 + 1);
      }
    }
    else
    {
LABEL_16:
      sub_1003B4054(a1, 0, 0, 4);
    }
  }
}

uint64_t sub_1003B7030(uint64_t result, unsigned __int8 *__dst, int a3)
{
  if (a3 > 5) {
    return result;
  }
  uint64_t v4 = result;
  unint64_t v5 = *(unsigned __int8 *)(result + 19);
  switch(v5)
  {
    case 4:
      unsigned int v14 = *(_DWORD *)result;
      uint64_t v7 = a3;
      unsigned int v8 = byte_10040C9D6[a3];
      if (*(_DWORD *)result <= v8) {
        goto LABEL_31;
      }
      int v9 = 0;
      int v15 = byte_10040C9DD[a3];
      int v16 = 4 * v8;
      int v17 = 4 * v15;
      unsigned int v18 = byte_10040C9D6[a3];
      int v19 = 4;
      unsigned int v13 = __dst;
      do
      {
        while (1)
        {
          size_t result = ~v16 & 4;
          v9 |= ((__dst[(unint64_t)v18 >> 1] >> (~(_BYTE)v16 & 4)) & 0xF) << v19;
          if (!v19) {
            break;
          }
          v19 -= 4;
          v18 += v15;
          v16 += v17;
          if (v18 >= v14) {
            goto LABEL_17;
          }
        }
        *v13++ = v9;
        int v19 = 4;
        int v9 = 0;
        v18 += v15;
        v16 += v17;
      }
      while (v18 < v14);
LABEL_17:
      if (v19 == 4) {
        goto LABEL_31;
      }
      break;
    case 2:
      unsigned int v20 = *(_DWORD *)result;
      uint64_t v7 = a3;
      unsigned int v8 = byte_10040C9D6[a3];
      if (*(_DWORD *)result <= v8) {
        goto LABEL_31;
      }
      int v9 = 0;
      int v21 = byte_10040C9DD[a3];
      int v22 = 2 * v8;
      int v23 = 2 * v21;
      unsigned int v24 = byte_10040C9D6[a3];
      int v25 = 6;
      unsigned int v13 = __dst;
      do
      {
        while (1)
        {
          size_t result = ~v22 & 6;
          v9 |= ((__dst[(unint64_t)v24 >> 2] >> (~(_BYTE)v22 & 6)) & 3) << v25;
          if (!v25) {
            break;
          }
          v25 -= 2;
          v24 += v21;
          v22 += v23;
          if (v24 >= v20) {
            goto LABEL_24;
          }
        }
        *v13++ = v9;
        int v25 = 6;
        int v9 = 0;
        v24 += v21;
        v22 += v23;
      }
      while (v24 < v20);
LABEL_24:
      if (v25 == 6) {
        goto LABEL_31;
      }
      break;
    case 1:
      unsigned int v6 = *(_DWORD *)result;
      uint64_t v7 = a3;
      unsigned int v8 = byte_10040C9D6[a3];
      if (*(_DWORD *)result <= v8) {
        goto LABEL_31;
      }
      int v9 = 0;
      int v10 = byte_10040C9DD[a3];
      unsigned int v11 = byte_10040C9D6[a3];
      int v12 = 7;
      unsigned int v13 = __dst;
      do
      {
        while (1)
        {
          v9 |= ((__dst[(unint64_t)v11 >> 3] >> (~(_BYTE)v11 & 7)) & 1) << v12;
          if (v12) {
            break;
          }
          *v13++ = v9;
          int v12 = 7;
          int v9 = 0;
          v11 += v10;
          if (v11 >= v6) {
            goto LABEL_10;
          }
        }
        --v12;
        v11 += v10;
      }
      while (v11 < v6);
LABEL_10:
      if (v12 == 7) {
        goto LABEL_31;
      }
      break;
    default:
      unsigned int v26 = *(_DWORD *)result;
      uint64_t v7 = a3;
      unsigned int v8 = byte_10040C9D6[a3];
      if (*(_DWORD *)result > v8)
      {
        size_t v27 = v5 >> 3;
        int v28 = byte_10040C9DD[a3];
        unsigned int v29 = byte_10040C9D6[a3];
        unsigned int v30 = __dst;
        do
        {
          unsigned int v31 = &__dst[v27 * (unint64_t)v29];
          if (v30 != v31) {
            size_t result = (uint64_t)memcpy(v30, v31, v27);
          }
          v30 += v27;
          v29 += v28;
        }
        while (v29 < v26);
      }
      goto LABEL_31;
  }
  *unsigned int v13 = v9;
LABEL_31:
  unsigned int v32 = (*(_DWORD *)v4 + ~v8 + byte_10040C9DD[v7]) / byte_10040C9DD[v7];
  *(_DWORD *)uint64_t v4 = v32;
  unint64_t v33 = *(unsigned __int8 *)(v4 + 19);
  unint64_t v34 = (v33 * v32 + 7) >> 3;
  unint64_t v35 = (v33 >> 3) * (unint64_t)v32;
  if (v33 < 8) {
    unint64_t v35 = v34;
  }
  *(void *)(v4 + 8) = v35;
  return result;
}

void sub_1003B7314(uint64_t a1, uint64_t a2, double a3, double a4, int64x2_t a5, double a6, double a7, int8x16_t a8, double a9, int8x16_t a10)
{
  int v12 = *(unsigned __int8 *)(a1 + 606);
  unint64_t v13 = *(void *)(a2 + 8);
  uint64_t v14 = *(unsigned __int8 *)(a2 + 19);
  unint64_t v15 = (unint64_t)(v14 + 7) >> 3;
  uint64_t v16 = *(void *)(a1 + 544);
  if (v13 >= 0x1FFFFFFFFFFFFFFLL)
  {
    v12 &= -v12;
    unint64_t v17 = -257;
    goto LABEL_3;
  }
  unint64_t v17 = -257;
  if ((v12 & 8) != 0 && v12 != 8)
  {
    if (!v13)
    {
      unint64_t v17 = 0;
      goto LABEL_3;
    }
    if (v13 < 8)
    {
      unint64_t v34 = 0;
      unint64_t v17 = 0;
      unint64_t v35 = *(void *)(a1 + 544);
      goto LABEL_217;
    }
    if (v13 >= 0x10)
    {
      unint64_t v34 = v13 & 0x1FFFFFFFFFFFFF0;
      int v303 = (int8x16_t *)(v16 + 1);
      int64x2_t v304 = 0uLL;
      a8.i64[0] = 0x10000000100;
      a8.i64[1] = 0x10000000100;
      int64x2_t v305 = 0uLL;
      unint64_t v306 = v13 & 0xFFFFFFFFFFFFFFF0;
      a10 = 0uLL;
      int64x2_t v307 = 0uLL;
      int64x2_t v308 = 0uLL;
      int16x8_t v10 = 0uLL;
      int64x2_t v309 = 0uLL;
      int64x2_t v310 = 0uLL;
      do
      {
        int8x16_t v311 = *v303++;
        int32x4_t v312 = (int32x4_t)vqtbl1q_s8(v311, (int8x16_t)xmmword_1004048C0);
        int32x4_t v313 = (int32x4_t)vqtbl1q_s8(v311, (int8x16_t)xmmword_1004048B0);
        int32x4_t v314 = (int32x4_t)vqtbl1q_s8(v311, (int8x16_t)xmmword_1004048A0);
        int32x4_t v315 = (int32x4_t)vqtbl1q_s8(v311, (int8x16_t)xmmword_100404890);
        int8x16_t v316 = vcltzq_s8(v311);
        int16x8_t v317 = vmovl_s8(*(int8x8_t *)v316.i8);
        int16x8_t v318 = vmovl_high_s8(v316);
        int8x16_t v319 = (int8x16_t)vmovl_s16(*(int16x4_t *)v318.i8);
        uint32x4_t v320 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v318), (int8x16_t)vsubq_s32((int32x4_t)a8, v312), (int8x16_t)v312);
        uint32x4_t v321 = (uint32x4_t)vbslq_s8(v319, (int8x16_t)vsubq_s32((int32x4_t)a8, v313), (int8x16_t)v313);
        uint32x4_t v322 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v317), (int8x16_t)vsubq_s32((int32x4_t)a8, v314), (int8x16_t)v314);
        uint32x4_t v323 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v317.i8), (int8x16_t)vsubq_s32((int32x4_t)a8, v315), (int8x16_t)v315);
        int64x2_t v309 = (int64x2_t)vaddw_u32((uint64x2_t)v309, *(uint32x2_t *)v320.i8);
        int16x8_t v10 = (int16x8_t)vaddw_high_u32((uint64x2_t)v10, v321);
        int64x2_t v307 = (int64x2_t)vaddw_high_u32((uint64x2_t)v307, v322);
        int64x2_t v310 = (int64x2_t)vaddw_high_u32((uint64x2_t)v310, v320);
        int64x2_t v308 = (int64x2_t)vaddw_u32((uint64x2_t)v308, *(uint32x2_t *)v321.i8);
        a10 = (int8x16_t)vaddw_u32((uint64x2_t)a10, *(uint32x2_t *)v322.i8);
        int64x2_t v305 = (int64x2_t)vaddw_high_u32((uint64x2_t)v305, v323);
        int64x2_t v304 = (int64x2_t)vaddw_u32((uint64x2_t)v304, *(uint32x2_t *)v323.i8);
        v306 -= 16;
      }
      while (v306);
      a5 = vaddq_s64(v307, v310);
      unint64_t v17 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v304, v308), vaddq_s64((int64x2_t)a10, v309)), vaddq_s64(vaddq_s64(v305, (int64x2_t)v10), a5)));
      if (v13 == v34) {
        goto LABEL_3;
      }
      if ((v13 & 8) == 0)
      {
        unint64_t v35 = v16 + v34;
LABEL_217:
        unint64_t v324 = v13 - v34;
        unsigned int v325 = (unsigned __int8 *)(v35 + 1);
        do
        {
          int v327 = *v325++;
          LODWORD(v326) = v327;
          unsigned int v328 = 256 - v327;
          if ((v327 & 0x80u) == 0) {
            uint64_t v326 = v326;
          }
          else {
            uint64_t v326 = v328;
          }
          v17 += v326;
          --v324;
        }
        while (v324);
        goto LABEL_3;
      }
    }
    else
    {
      unint64_t v17 = 0;
      unint64_t v34 = 0;
    }
    unint64_t v70 = v34;
    unint64_t v34 = v13 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v35 = v16 + (v13 & 0xFFFFFFFFFFFFFFF8);
    int64x2_t v71 = 0uLL;
    int64x2_t v72 = (int64x2_t)v17;
    uint64_t v73 = (int8x8_t *)(v70 + v16 + 1);
    unint64_t v74 = v70 - (v13 & 0xFFFFFFFFFFFFFFF8);
    a5.i64[1] = 0xFFFFFF07FFFFFF06;
    v75.i64[0] = 0x10000000100;
    v75.i64[1] = 0x10000000100;
    a8 = 0uLL;
    int64x2_t v76 = 0uLL;
    do
    {
      int8x8_t v77 = *v73++;
      *(int8x8_t *)a10.uint64_t i8 = v77;
      int32x4_t v78 = (int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1004048A0);
      int32x4_t v79 = (int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_100404890);
      int16x8_t v80 = vcltzq_s16(vmovl_s8(v77));
      int8x16_t v81 = (int8x16_t)vmovl_s16(*(int16x4_t *)v80.i8);
      a10 = vbslq_s8((int8x16_t)vmovl_high_s16(v80), (int8x16_t)vsubq_s32(v75, v78), (int8x16_t)v78);
      int16x8_t v10 = (int16x8_t)vbslq_s8(v81, (int8x16_t)vsubq_s32(v75, v79), (int8x16_t)v79);
      int64x2_t v76 = (int64x2_t)vaddw_high_u32((uint64x2_t)v76, (uint32x4_t)a10);
      a8 = (int8x16_t)vaddw_u32((uint64x2_t)a8, *(uint32x2_t *)a10.i8);
      int64x2_t v71 = (int64x2_t)vaddw_high_u32((uint64x2_t)v71, (uint32x4_t)v10);
      int64x2_t v72 = (int64x2_t)vaddw_u32((uint64x2_t)v72, *(uint32x2_t *)v10.i8);
      v74 += 8;
    }
    while (v74);
    unint64_t v17 = vaddvq_s64(vaddq_s64(vaddq_s64(v72, (int64x2_t)a8), vaddq_s64(v71, v76)));
    if (v13 == v34) {
      goto LABEL_3;
    }
    goto LABEL_217;
  }
LABEL_3:
  if (v12 != 16)
  {
    if ((v12 & 0x10) == 0)
    {
      uint64_t v18 = v16;
      goto LABEL_64;
    }
    uint64_t v36 = *(void *)(a1 + 552);
    *(unsigned char *)uint64_t v36 = 1;
    BOOL v37 = (int8x16_t *)(v36 + 1);
    uint64_t v38 = (int8x16_t *)(v16 + 1);
    unint64_t v39 = 0;
    if (v14)
    {
      if (v14 < 0x79 || (unint64_t)(v36 - v16) < 0x10)
      {
        char v41 = (__int8 *)(v16 + 1);
        unint64_t v40 = 0;
      }
      else
      {
        unint64_t v40 = ((unint64_t)(v14 + 7) >> 3) & 0x30;
        char v41 = &v38->i8[v40];
        int8x16_t v42 = *v38;
        *BOOL v37 = *v38;
        uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)v42.i8);
        int8x16_t v44 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v43.i8);
        uint16x8_t v45 = vmovl_high_u8((uint8x16_t)v42);
        v46.i64[0] = 0x10000000100;
        v46.i64[1] = 0x10000000100;
        int16x8_t v10 = (int16x8_t)vsubw_u16(v46, *(uint16x4_t *)v43.i8);
        int8x16_t v47 = vcltzq_s8(v42);
        int16x8_t v48 = vmovl_s8(*(int8x8_t *)v47.i8);
        int16x8_t v49 = vmovl_high_s8(v47);
        int8x16_t v50 = (int8x16_t)vmovl_s16(*(int16x4_t *)v49.i8);
        int32x4_t v51 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v49), (int8x16_t)vsubw_high_u16(v46, v45), (int8x16_t)vmovl_high_u16(v45));
        int32x4_t v52 = (int32x4_t)vbslq_s8(v50, (int8x16_t)vsubw_u16(v46, *(uint16x4_t *)v45.i8), (int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8));
        int32x4_t v53 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v48), (int8x16_t)vsubw_high_u16(v46, v43), (int8x16_t)vmovl_high_u16(v43));
        int32x4_t v54 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v48.i8), (int8x16_t)v10, v44);
        if (v40 != 16)
        {
          int8x16_t v55 = *(int8x16_t *)(v16 + 17);
          *(int8x16_t *)(v36 + 17) = v55;
          uint16x8_t v56 = vmovl_high_u8((uint8x16_t)v55);
          int8x16_t v57 = (int8x16_t)vmovl_high_u16(v56);
          int16x8_t v10 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v56.i8);
          uint16x8_t v58 = vmovl_u8(*(uint8x8_t *)v55.i8);
          int8x16_t v59 = (int8x16_t)vmovl_high_u16(v58);
          int8x16_t v60 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v58.i8);
          int8x16_t v61 = (int8x16_t)vsubw_high_u16(v46, v56);
          int8x16_t v62 = (int8x16_t)vsubw_u16(v46, *(uint16x4_t *)v56.i8);
          int8x16_t v63 = (int8x16_t)vsubw_high_u16(v46, v58);
          int8x16_t v64 = (int8x16_t)vsubw_u16(v46, *(uint16x4_t *)v58.i8);
          int8x16_t v65 = vcltzq_s8(v55);
          int16x8_t v66 = vmovl_high_s8(v65);
          int16x8_t v67 = vmovl_s8(*(int8x8_t *)v65.i8);
          int32x4_t v51 = vaddq_s32(v51, (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v66), v61, v57));
          int32x4_t v52 = vaddq_s32(v52, (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v66.i8), v62, (int8x16_t)v10));
          int32x4_t v53 = vaddq_s32(v53, (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v67), v63, v59));
          int32x4_t v54 = vaddq_s32(v54, (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v67.i8), v64, v60));
        }
        a8 = (int8x16_t)vaddl_high_u32((uint32x4_t)v53, (uint32x4_t)v51);
        int64x2_t v68 = vaddq_s64((int64x2_t)vaddl_high_u32((uint32x4_t)v54, (uint32x4_t)v52), (int64x2_t)a8);
        a5 = (int64x2_t)vaddl_u32(*(uint32x2_t *)v54.i8, *(uint32x2_t *)v52.i8);
        unint64_t v39 = vaddvq_s64(vaddq_s64(vaddq_s64(a5, (int64x2_t)vaddl_u32(*(uint32x2_t *)v53.i8, *(uint32x2_t *)v51.i8)), v68));
        BOOL v37 = (int8x16_t *)((char *)v37 + (((unint64_t)(v14 + 7) >> 3) & 0x30));
        if (v40 == v15) {
          goto LABEL_50;
        }
      }
      unint64_t v82 = v15 - v40;
      do
      {
        int v84 = *v41++;
        LODWORD(v83) = v84;
        v37->i8[0] = v84;
        BOOL v37 = (int8x16_t *)((char *)v37 + 1);
        unsigned int v85 = 256 - v84;
        if ((v84 & 0x80u) == 0) {
          uint64_t v83 = v83;
        }
        else {
          uint64_t v83 = v85;
        }
        v39 += v83;
        --v82;
      }
      while (v82);
    }
    else
    {
      char v41 = (__int8 *)(v16 + 1);
    }
LABEL_50:
    if (v13 > v15)
    {
      unint64_t v86 = v15 + 1;
      do
      {
        char v88 = *v41++;
        char v87 = v88;
        __int8 v89 = v38->i8[0];
        uint64_t v38 = (int8x16_t *)((char *)v38 + 1);
        LOBYTE(v90) = v87 - v89;
        v37->i8[0] = v90;
        BOOL v37 = (int8x16_t *)((char *)v37 + 1);
        if ((v90 & 0x80u) == 0) {
          uint64_t v90 = v90;
        }
        else {
          uint64_t v90 = 256 - v90;
        }
        v39 += v90;
      }
      while (v39 <= v17 && v86++ < v13);
    }
    uint64_t v18 = v16;
    if (v39 < v17)
    {
      uint64_t v92 = *(void *)(a1 + 560);
      if (v92)
      {
        *(void *)(a1 + 552) = v92;
        *(void *)(a1 + 560) = v36;
      }
      unint64_t v17 = v39;
      uint64_t v18 = v36;
    }
    goto LABEL_64;
  }
  uint64_t v18 = *(void *)(a1 + 552);
  *(unsigned char *)uint64_t v18 = 1;
  int v19 = (int8x16_t *)(v18 + 1);
  unsigned int v20 = (int8x16_t *)(v16 + 1);
  if (v14)
  {
    unint64_t v21 = 0;
    if (v14 < 0x79 || (unint64_t)(v18 - v16) < 0x10) {
      goto LABEL_10;
    }
    unint64_t v21 = ((unint64_t)(v14 + 7) >> 3) & 0x30;
    *int v19 = *v20;
    if (v21 != 16) {
      *(_OWORD *)(v18 + 17) = *(_OWORD *)(v16 + 17);
    }
    unsigned int v20 = (int8x16_t *)((char *)v20 + (((unint64_t)(v14 + 7) >> 3) & 0x30));
    int v19 = (int8x16_t *)((char *)v19 + (((unint64_t)(v14 + 7) >> 3) & 0x30));
    if (v21 != v15)
    {
LABEL_10:
      unint64_t v22 = v15 - v21;
      do
      {
        __int8 v23 = v20->i8[0];
        unsigned int v20 = (int8x16_t *)((char *)v20 + 1);
        v19->i8[0] = v23;
        int v19 = (int8x16_t *)((char *)v19 + 1);
        --v22;
      }
      while (v22);
    }
  }
  unint64_t v24 = v13 - v15;
  if (v13 > v15)
  {
    if (v24 < 8 || (unint64_t)v19->u64 + ~v16 < 0x20 || (unint64_t)((char *)v19 - (char *)v20) < 0x20)
    {
      unint64_t v25 = (unint64_t)(v14 + 7) >> 3;
      uint64_t v26 = v16;
      size_t v27 = v19;
      int v28 = v20;
      goto LABEL_15;
    }
    if (v24 < 0x20)
    {
      unint64_t v69 = 0;
      goto LABEL_277;
    }
    unint64_t v69 = v24 & 0xFFFFFFFFFFFFFFE0;
    int v359 = v20 + 1;
    double v360 = (int8x16_t *)(v16 + 17);
    uint64_t v361 = v19 + 1;
    unint64_t v362 = v24 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      a5 = (int64x2_t)v360[-1];
      int8x16_t v363 = vsubq_s8(*v359, *v360);
      v361[-1] = vsubq_s8(v359[-1], (int8x16_t)a5);
      *uint64_t v361 = v363;
      v359 += 2;
      v360 += 2;
      v361 += 2;
      v362 -= 32;
    }
    while (v362);
    if (v24 != v69)
    {
      if ((v24 & 0x18) == 0)
      {
        int v28 = (int8x16_t *)((char *)v20 + v69);
        size_t v27 = (int8x16_t *)((char *)v19 + v69);
        uint64_t v26 = v16 + v69;
        unint64_t v25 = v69 + v15;
        goto LABEL_15;
      }
LABEL_277:
      unint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + v15;
      uint64_t v26 = v16 + (v24 & 0xFFFFFFFFFFFFFFF8);
      size_t v27 = (int8x16_t *)((char *)v19 + (v24 & 0xFFFFFFFFFFFFFFF8));
      int v28 = (int8x16_t *)((char *)v20 + (v24 & 0xFFFFFFFFFFFFFFF8));
      int v364 = (int8x8_t *)(v69 + v16 + 1);
      int v365 = (int8x8_t *)&v20->i8[v69];
      uint64_t v366 = (int8x8_t *)&v19->i8[v69];
      unint64_t v367 = v69 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        int8x8_t v368 = *v365++;
        int8x8_t v369 = v368;
        int8x8_t v370 = *v364++;
        *v366++ = vsub_s8(v369, v370);
        v367 += 8;
      }
      while (v367);
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_64;
      }
LABEL_15:
      unint64_t v29 = v13 - v25;
      unsigned int v30 = (char *)(v26 + 1);
      do
      {
        __int8 v32 = v28->i8[0];
        int v28 = (int8x16_t *)((char *)v28 + 1);
        char v31 = v32;
        char v33 = *v30++;
        v27->i8[0] = v31 - v33;
        size_t v27 = (int8x16_t *)((char *)v27 + 1);
        --v29;
      }
      while (v29);
    }
  }
LABEL_64:
  if (v12 != 32)
  {
    if ((v12 & 0x20) != 0)
    {
      int8x8_t v104 = *(unsigned char **)(a1 + 552);
      *int8x8_t v104 = 2;
      unint64_t v105 = 0;
      if (v13)
      {
        int v106 = (char *)(v16 + 1);
        __int8 v107 = (char *)(*(void *)(a1 + 536) + 1);
        int v108 = v104 + 1;
        unint64_t v109 = v13 - 1;
        do
        {
          char v111 = *v106++;
          char v110 = v111;
          char v112 = *v107++;
          LOBYTE(v113) = v110 - v112;
          *v108++ = v113;
          if ((v113 & 0x80u) == 0) {
            uint64_t v113 = v113;
          }
          else {
            uint64_t v113 = 256 - v113;
          }
          v105 += v113;
        }
        while (v105 <= v17 && v109-- != 0);
      }
      if (v105 < v17)
      {
        uint64_t v115 = *(void *)(a1 + 560);
        if (v115)
        {
          *(void *)(a1 + 552) = v115;
          *(void *)(a1 + 560) = v104;
        }
        unint64_t v17 = v105;
        uint64_t v18 = (uint64_t)v104;
      }
    }
    goto LABEL_87;
  }
  uint64_t v18 = *(void *)(a1 + 552);
  *(unsigned char *)uint64_t v18 = 2;
  if (!v13) {
    goto LABEL_266;
  }
  uint64_t v93 = *(void *)(a1 + 536);
  if (v13 < 8)
  {
    unint64_t v94 = 0;
LABEL_68:
    uint64_t v95 = v18;
    uint64_t v96 = v16;
    goto LABEL_69;
  }
  unint64_t v94 = 0;
  if ((unint64_t)(v18 - v16) < 0x20) {
    goto LABEL_68;
  }
  uint64_t v95 = v18;
  uint64_t v96 = v16;
  if ((unint64_t)(v18 - v93) < 0x20) {
    goto LABEL_69;
  }
  if (v13 >= 0x20)
  {
    uint64_t v329 = 0;
    unint64_t v94 = v13 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v330 = v16 + 17;
    uint64_t v331 = v93 + 17;
    do
    {
      uint64_t v332 = v18 + v329;
      a5 = *(int64x2_t *)(v331 + v329 - 16);
      int8x16_t v333 = vsubq_s8(*(int8x16_t *)(v330 + v329), *(int8x16_t *)(v331 + v329));
      *(int8x16_t *)(v332 + 1) = vsubq_s8(*(int8x16_t *)(v330 + v329 - 16), (int8x16_t)a5);
      *(int8x16_t *)(v332 + 17) = v333;
      v329 += 32;
    }
    while (v94 != v329);
    if (v13 == v94) {
      goto LABEL_87;
    }
    if ((v13 & 0x18) != 0) {
      goto LABEL_227;
    }
    uint64_t v96 = v16 + v94;
    uint64_t v95 = v18 + v94;
    v93 += v94;
LABEL_69:
    unint64_t v97 = v13 - v94;
    uint64_t v98 = (char *)(v93 + 1);
    uint64_t v99 = (unsigned char *)(v95 + 1);
    unsigned int v100 = (char *)(v96 + 1);
    do
    {
      char v102 = *v100++;
      char v101 = v102;
      char v103 = *v98++;
      *v99++ = v101 - v103;
      --v97;
    }
    while (v97);
    goto LABEL_87;
  }
  unint64_t v94 = 0;
LABEL_227:
  unint64_t v334 = v94;
  unint64_t v94 = v13 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v335 = v93 + (v13 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v95 = v18 + (v13 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v96 = v16 + (v13 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v336 = v93 + 1;
  do
  {
    *(int8x8_t *)(v18 + v334 + 1) = vsub_s8(*(int8x8_t *)(v16 + 1 + v334), *(int8x8_t *)(v336 + v334));
    v334 += 8;
  }
  while (v94 != v334);
  uint64_t v93 = v335;
  if (v13 != v94) {
    goto LABEL_69;
  }
LABEL_87:
  if (v12 != 64)
  {
    if ((v12 & 0x40) == 0) {
      goto LABEL_149;
    }
    uint64_t v129 = *(unsigned char **)(a1 + 552);
    *uint64_t v129 = 3;
    uint64_t v130 = (int8x16_t *)(v129 + 1);
    uint64_t v131 = *(void *)(a1 + 536);
    int8x16_t v132 = (uint8x16_t *)(v131 + 1);
    uint64_t v133 = (unsigned __int8 *)(v16 + 1);
    if (v14)
    {
      uint64_t v134 = (v15 - 1);
      if (v134 < 0xF)
      {
        unint64_t v135 = 0;
        LODWORD(v136) = 0;
LABEL_130:
        int v159 = (unsigned __int8 *)(v16 + 1);
        unsigned int v158 = v132;
        unint64_t v157 = v129 + 1;
        goto LABEL_131;
      }
      LODWORD(v136) = 0;
      unint64_t v135 = 0;
      if ((unint64_t)&v129[-v16] < 0x10 || (unint64_t)&v129[-v131] < 0x10) {
        goto LABEL_130;
      }
      uint64_t v160 = v134 + 1;
      uint64_t v136 = (v134 + 1) & 0x1FFFFFFF0;
      int v159 = &v133[v136];
      unsigned int v158 = (uint8x16_t *)((char *)v132 + v136);
      unint64_t v157 = &v130->i8[v136];
      int64x2_t v161 = 0uLL;
      v162.i64[0] = 0x10000000100;
      v162.i64[1] = 0x10000000100;
      a8 = 0uLL;
      uint64_t v163 = v136;
      unsigned int v164 = (int8x16_t *)(v16 + 1);
      int64x2_t v165 = 0uLL;
      int64x2_t v166 = 0uLL;
      int64x2_t v167 = 0uLL;
      int16x8_t v10 = 0uLL;
      int64x2_t v168 = 0uLL;
      int64x2_t v169 = 0uLL;
      do
      {
        int8x16_t v170 = *v164++;
        int8x16_t v171 = v170;
        uint8x16_t v172 = *v132++;
        int8x16_t v173 = vsubq_s8(v171, (int8x16_t)vshrq_n_u8(v172, 1uLL));
        *v130++ = v173;
        int32x4_t v174 = (int32x4_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_1004048C0);
        int32x4_t v175 = (int32x4_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_1004048B0);
        int32x4_t v176 = (int32x4_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_1004048A0);
        int32x4_t v177 = (int32x4_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_100404890);
        int8x16_t v178 = vcltzq_s8(v173);
        int16x8_t v179 = vmovl_s8(*(int8x8_t *)v178.i8);
        int16x8_t v180 = vmovl_high_s8(v178);
        int8x16_t v181 = (int8x16_t)vmovl_s16(*(int16x4_t *)v180.i8);
        uint32x4_t v182 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v180), (int8x16_t)vsubq_s32(v162, v174), (int8x16_t)v174);
        uint32x4_t v183 = (uint32x4_t)vbslq_s8(v181, (int8x16_t)vsubq_s32(v162, v175), (int8x16_t)v175);
        uint32x4_t v184 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v179), (int8x16_t)vsubq_s32(v162, v176), (int8x16_t)v176);
        uint32x4_t v185 = (uint32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v179.i8), (int8x16_t)vsubq_s32(v162, v177), (int8x16_t)v177);
        int64x2_t v169 = (int64x2_t)vaddw_high_u32((uint64x2_t)v169, v182);
        int64x2_t v168 = (int64x2_t)vaddw_u32((uint64x2_t)v168, *(uint32x2_t *)v182.i8);
        int16x8_t v10 = (int16x8_t)vaddw_high_u32((uint64x2_t)v10, v183);
        int64x2_t v166 = (int64x2_t)vaddw_high_u32((uint64x2_t)v166, v184);
        int64x2_t v167 = (int64x2_t)vaddw_u32((uint64x2_t)v167, *(uint32x2_t *)v183.i8);
        int64x2_t v165 = (int64x2_t)vaddw_u32((uint64x2_t)v165, *(uint32x2_t *)v184.i8);
        a8 = (int8x16_t)vaddw_high_u32((uint64x2_t)a8, v185);
        int64x2_t v161 = (int64x2_t)vaddw_u32((uint64x2_t)v161, *(uint32x2_t *)v185.i8);
        v163 -= 16;
      }
      while (v163);
      a5 = vaddq_s64(v166, v169);
      unint64_t v135 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v161, v167), vaddq_s64(v165, v168)), vaddq_s64(vaddq_s64((int64x2_t)a8, (int64x2_t)v10), a5)));
      if (v160 != v136)
      {
LABEL_131:
        int v186 = v15 - v136;
        do
        {
          char v188 = *v159++;
          char v187 = v188;
          unsigned int v189 = v158->u8[0];
          unsigned int v158 = (uint8x16_t *)((char *)v158 + 1);
          LOBYTE(v190) = v187 - (v189 >> 1);
          *v157++ = v190;
          if ((v190 & 0x80u) == 0) {
            uint64_t v190 = v190;
          }
          else {
            uint64_t v190 = 256 - v190;
          }
          v135 += v190;
          --v186;
        }
        while (v186);
      }
    }
    else
    {
      unint64_t v135 = 0;
      unint64_t v157 = v129 + 1;
      unsigned int v158 = (uint8x16_t *)(v131 + 1);
      int v159 = (unsigned __int8 *)(v16 + 1);
    }
    if (v13 > v15)
    {
      unsigned int v191 = v15 + 1;
      do
      {
        char v193 = *v159++;
        char v192 = v193;
        int v195 = v158->u8[0];
        unsigned int v158 = (uint8x16_t *)((char *)v158 + 1);
        int v194 = v195;
        int v196 = *v133++;
        LOBYTE(v197) = v192 - ((v196 + v194) >> 1);
        *v157++ = v197;
        if ((v197 & 0x80u) == 0) {
          uint64_t v197 = v197;
        }
        else {
          uint64_t v197 = 256 - v197;
        }
        v135 += v197;
        unint64_t v198 = v191++;
        BOOL v199 = v135 <= v17 && v13 > v198;
      }
      while (v199);
    }
    if (v135 < v17)
    {
      uint64_t v200 = *(void *)(a1 + 560);
      if (v200)
      {
        *(void *)(a1 + 552) = v200;
        *(void *)(a1 + 560) = v129;
      }
      unint64_t v17 = v135;
      uint64_t v18 = (uint64_t)v129;
    }
    goto LABEL_149;
  }
  uint64_t v18 = *(void *)(a1 + 552);
  *(unsigned char *)uint64_t v18 = 3;
  int v116 = (int8x16_t *)(v18 + 1);
  uint64_t v117 = *(void *)(a1 + 536);
  uint64_t v118 = (uint8x16_t *)(v117 + 1);
  unsigned int v119 = (int8x16_t *)(v16 + 1);
  if (v14)
  {
    uint64_t v120 = (v15 - 1);
    if (v120 >= 0xF)
    {
      LODWORD(v121) = 0;
      if ((unint64_t)(v18 - v16) >= 0x10 && (unint64_t)(v18 - v117) >= 0x10)
      {
        uint64_t v150 = v120 + 1;
        uint64_t v121 = (v120 + 1) & 0x1FFFFFFF0;
        unsigned long long v122 = (int8x16_t *)((char *)v119 + v121);
        int8x16_t v123 = (uint8x16_t *)((char *)v118 + v121);
        int v124 = &v116->i8[v121];
        uint64_t v151 = v121;
        do
        {
          int8x16_t v152 = *v119++;
          int8x16_t v153 = v152;
          uint8x16_t v154 = *v118++;
          *v116++ = vsubq_s8(v153, (int8x16_t)vshrq_n_u8(v154, 1uLL));
          v151 -= 16;
        }
        while (v151);
        if (v150 == v121) {
          goto LABEL_104;
        }
        goto LABEL_92;
      }
    }
    else
    {
      LODWORD(v121) = 0;
    }
    unsigned long long v122 = (int8x16_t *)(v16 + 1);
    int8x16_t v123 = v118;
    int v124 = (__int8 *)(v18 + 1);
LABEL_92:
    int v125 = v15 - v121;
    do
    {
      __int8 v127 = v122->i8[0];
      unsigned long long v122 = (int8x16_t *)((char *)v122 + 1);
      __int8 v126 = v127;
      unsigned int v128 = v123->u8[0];
      int8x16_t v123 = (uint8x16_t *)((char *)v123 + 1);
      *v124++ = v126 - (v128 >> 1);
      --v125;
    }
    while (v125);
    goto LABEL_104;
  }
  int v124 = (__int8 *)(v18 + 1);
  int8x16_t v123 = (uint8x16_t *)(v117 + 1);
  unsigned long long v122 = (int8x16_t *)(v16 + 1);
LABEL_104:
  unint64_t v137 = v13 - v15;
  if (v13 <= v15) {
    goto LABEL_149;
  }
  if (v137 < 8
    || (unint64_t v155 = v13 + ~(unint64_t)v15, -2 - (int)v15 < v155)
    || HIDWORD(v155)
    || (unint64_t)&v124[~v16] < 0x20
    || (unint64_t)(v124 - (__int8 *)v122) < 0x20
    || (unint64_t)(v124 - (__int8 *)v123) < 0x20)
  {
    unint64_t v138 = (unint64_t)(v14 + 7) >> 3;
    uint64_t v139 = v16;
    unsigned int v140 = (unsigned __int8 *)v123;
    int v141 = v124;
    unsigned int v142 = v122;
    goto LABEL_107;
  }
  if (v137 < 0x20)
  {
    unint64_t v156 = 0;
    goto LABEL_290;
  }
  unint64_t v156 = v137 & 0xFFFFFFFFFFFFFFE0;
  __int16 v414 = v122 + 1;
  uint64_t v415 = (uint8x16_t *)(v16 + 17);
  uint64_t v416 = (int8x16_t *)(v124 + 16);
  uint64_t v417 = v123 + 1;
  unint64_t v418 = v137 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    a8 = *(int8x16_t *)v415;
    a5 = (int64x2_t)vhaddq_u8(v415[-1], v417[-1]);
    int8x16_t v419 = vsubq_s8(v414[-1], (int8x16_t)a5);
    int8x16_t v420 = vsubq_s8(*v414, (int8x16_t)vhaddq_u8(*v415, *v417));
    v414 += 2;
    v416[-1] = v419;
    *uint64_t v416 = v420;
    v415 += 2;
    v416 += 2;
    v417 += 2;
    v418 -= 32;
  }
  while (v418);
  if (v137 != v156)
  {
    if ((v137 & 0x18) == 0)
    {
      unsigned int v142 = (int8x16_t *)((char *)v122 + v156);
      int v141 = &v124[v156];
      unsigned int v140 = &v123->u8[v156];
      uint64_t v139 = v16 + v156;
      LODWORD(v138) = v15 + v156;
      goto LABEL_107;
    }
LABEL_290:
    LODWORD(v138) = v15 + (v137 & 0xFFFFFFF8);
    uint64_t v139 = v16 + (v137 & 0xFFFFFFFFFFFFFFF8);
    unsigned int v140 = &v123->u8[v137 & 0xFFFFFFFFFFFFFFF8];
    int v141 = &v124[v137 & 0xFFFFFFFFFFFFFFF8];
    unsigned int v142 = (int8x16_t *)((char *)v122 + (v137 & 0xFFFFFFFFFFFFFFF8));
    int8x8_t v421 = (uint8x8_t *)(v156 + v16 + 1);
    int8x8_t v422 = (int8x8_t *)&v122->i8[v156];
    int8x8_t v423 = (int8x8_t *)&v124[v156];
    uint64_t v424 = (uint8x8_t *)&v123->i8[v156];
    unint64_t v425 = v156 - (v137 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v426 = *v422++;
      int8x8_t v427 = v426;
      uint8x8_t v428 = *v424++;
      uint8x8_t v429 = v428;
      uint8x8_t v430 = *v421++;
      *v423++ = vsub_s8(v427, (int8x8_t)vhadd_u8(v430, v429));
      v425 += 8;
    }
    while (v425);
    if (v137 == (v137 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_149;
    }
LABEL_107:
    unsigned int v143 = v138 + 1;
    int v144 = (unsigned __int8 *)(v139 + 1);
    do
    {
      __int8 v146 = v142->i8[0];
      unsigned int v142 = (int8x16_t *)((char *)v142 + 1);
      char v145 = v146;
      int v148 = *v140++;
      int v147 = v148;
      int v149 = *v144++;
      *v141++ = v145 - ((v149 + v147) >> 1);
      BOOL v199 = v13 > v143++;
    }
    while (v199);
  }
LABEL_149:
  if (v12 == 128)
  {
    uint64_t v18 = *(void *)(a1 + 552);
    *(unsigned char *)uint64_t v18 = 4;
    char v201 = (int8x16_t *)(v18 + 1);
    uint64_t v202 = *(void *)(a1 + 536);
    unint64_t v203 = v15;
    uint64_t v204 = (int8x16_t *)(v202 + 1);
    uint64_t v205 = (int8x16_t *)(v16 + 1);
    if (!v14)
    {
      uint64_t v208 = (__int8 *)(v202 + 1);
      uint64_t v207 = (__int8 *)(v16 + 1);
      goto LABEL_162;
    }
    if (v14 >= 0x79)
    {
      unint64_t v206 = 0;
      if ((unint64_t)(v18 - v16) >= 0x10 && (unint64_t)(v18 - v202) >= 0x10)
      {
        unint64_t v206 = ((unint64_t)(v14 + 7) >> 3) & 0x30;
        uint64_t v207 = &v205->i8[v206];
        uint64_t v208 = &v204->i8[v203 & 0x30];
        int8x16_t *v201 = vsubq_s8(*v205, *v204);
        if ((v203 & 0x30) != 0x10) {
          *(int8x16_t *)(v18 + 17) = vsubq_s8(*(int8x16_t *)(v16 + 17), *(int8x16_t *)(v202 + 17));
        }
        char v201 = (int8x16_t *)((char *)v201 + (v203 & 0x30));
        if (v206 == v203)
        {
LABEL_162:
          unint64_t v223 = v13 - v203;
          if (v13 <= v203) {
            goto LABEL_266;
          }
          if (v223 < 8
            || ((unint64_t)v201->u64 + ~v202 >= 0x10
              ? (BOOL v224 = (unint64_t)((char *)v201 - v208) >= 0x10)
              : (BOOL v224 = 0),
                v224 ? (BOOL v225 = (unint64_t)((char *)v201 - v207) >= 0x10) : (BOOL v225 = 0),
                v225 ? (BOOL v226 = (unint64_t)v201->u64 + ~v16 >= 0x10) : (BOOL v226 = 0),
                !v226))
          {
            uint64_t v227 = v16;
            uint64_t v228 = v202;
            int v229 = v208;
            int v230 = v201;
            uint64_t v231 = v207;
            goto LABEL_175;
          }
          if (v223 >= 0x10)
          {
            unint64_t v275 = v223 & 0xFFFFFFFFFFFFFFF0;
            a5.i64[1] = 0xFFFFFF07FFFFFF06;
            unint64_t v371 = v223 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v372 = (int8x16_t *)v208;
            uint64_t v373 = v201;
            unsigned int v374 = (int8x16_t *)v207;
            do
            {
              int8x16_t v375 = *v372++;
              int8x16_t v376 = v375;
              int32x4_t v377 = (int32x4_t)vqtbl1q_s8(v375, (int8x16_t)xmmword_1004048C0);
              int32x4_t v378 = (int32x4_t)vqtbl1q_s8(v375, (int8x16_t)xmmword_1004048B0);
              int32x4_t v379 = (int32x4_t)vqtbl1q_s8(v375, (int8x16_t)xmmword_1004048A0);
              int32x4_t v380 = (int32x4_t)vqtbl1q_s8(v375, (int8x16_t)xmmword_100404890);
              int8x16_t v381 = *v204++;
              int8x16_t v382 = v381;
              int32x4_t v383 = (int32x4_t)vqtbl1q_s8(v381, (int8x16_t)xmmword_1004048C0);
              int32x4_t v384 = (int32x4_t)vqtbl1q_s8(v381, (int8x16_t)xmmword_1004048B0);
              int32x4_t v385 = (int32x4_t)vqtbl1q_s8(v381, (int8x16_t)xmmword_1004048A0);
              int32x4_t v386 = (int32x4_t)vqtbl1q_s8(v381, (int8x16_t)xmmword_100404890);
              int8x16_t v387 = *v205++;
              int32x4_t v388 = (int32x4_t)vqtbl1q_s8(v387, (int8x16_t)xmmword_1004048C0);
              int32x4_t v389 = (int32x4_t)vqtbl1q_s8(v387, (int8x16_t)xmmword_1004048B0);
              int32x4_t v390 = (int32x4_t)vqtbl1q_s8(v387, (int8x16_t)xmmword_1004048A0);
              int32x4_t v391 = (int32x4_t)vqtbl1q_s8(v387, (int8x16_t)xmmword_100404890);
              int32x4_t v392 = vsubq_s32(v380, v386);
              int32x4_t v393 = vsubq_s32(v379, v385);
              int32x4_t v394 = vsubq_s32(v378, v384);
              int32x4_t v395 = vsubq_s32(v377, v383);
              int32x4_t v396 = vsubq_s32(v391, v386);
              int32x4_t v397 = vsubq_s32(v390, v385);
              int32x4_t v398 = vsubq_s32(v389, v384);
              int32x4_t v399 = vsubq_s32(v388, v383);
              uint32x4_t v400 = vabdq_u32((uint32x4_t)v386, (uint32x4_t)v380);
              uint32x4_t v401 = vabdq_u32((uint32x4_t)v385, (uint32x4_t)v379);
              uint32x4_t v402 = vabdq_u32((uint32x4_t)v384, (uint32x4_t)v378);
              uint32x4_t v403 = vabdq_u32((uint32x4_t)v383, (uint32x4_t)v377);
              uint32x4_t v404 = vabdq_u32((uint32x4_t)v386, (uint32x4_t)v391);
              uint32x4_t v405 = vabdq_u32((uint32x4_t)v385, (uint32x4_t)v390);
              uint32x4_t v406 = vabdq_u32((uint32x4_t)v384, (uint32x4_t)v389);
              uint32x4_t v407 = vabdq_u32((uint32x4_t)v383, (uint32x4_t)v388);
              uint32x4_t v408 = (uint32x4_t)vabsq_s32(vaddq_s32(v396, v392));
              uint32x4_t v409 = (uint32x4_t)vabsq_s32(vaddq_s32(v397, v393));
              uint32x4_t v410 = (uint32x4_t)vabsq_s32(vaddq_s32(v398, v394));
              uint32x4_t v411 = (uint32x4_t)vabsq_s32(vaddq_s32(v399, v395));
              a8 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v400, vminq_u32(v404, v408)), (int16x8_t)vcgtq_u32(v401, vminq_u32(v405, v409))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v402, vminq_u32(v406, v410)), (int16x8_t)vcgtq_u32(v403, vminq_u32(v407, v411))));
              int16x8_t v10 = (int16x8_t)vcgtq_u32(v404, v408);
              int8x16_t v412 = vbslq_s8(a8, vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16(v10, (int16x8_t)vcgtq_u32(v405, v409)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v406, v410), (int16x8_t)vcgtq_u32(v407, v411))), v382, v376), v387);
              int8x16_t v413 = *v374++;
              a8.i64[1] = v413.i64[1];
              *v373++ = vsubq_s8(v413, v412);
              v371 -= 16;
            }
            while (v371);
            if (v223 == v275) {
              goto LABEL_266;
            }
            if ((v223 & 8) == 0)
            {
              uint64_t v231 = &v207[v275];
              int v230 = (int8x16_t *)((char *)v201 + v275);
              int v229 = &v208[v275];
              uint64_t v228 = v202 + v275;
              uint64_t v227 = v16 + v275;
              v203 += v275;
LABEL_175:
              uint64_t v232 = v13 - v203;
              int v233 = (unsigned __int8 *)(v227 + 1);
              int v234 = (unsigned __int8 *)(v228 + 1);
              do
              {
                int v236 = *v229++;
                int v235 = v236;
                int v238 = *v234++;
                int v237 = v238;
                int v240 = *v233++;
                char v239 = v240;
                int v241 = v240 - v237;
                if (v235 - v237 >= 0) {
                  unsigned int v242 = v235 - v237;
                }
                else {
                  unsigned int v242 = v237 - v235;
                }
                if (v241 >= 0) {
                  unsigned int v243 = v241;
                }
                else {
                  unsigned int v243 = -v241;
                }
                int v244 = v241 + v235 - v237;
                if (v244 < 0) {
                  int v244 = -v244;
                }
                if (v243 > v244) {
                  LOBYTE(v235) = v237;
                }
                if (v242 <= v244 && v242 <= v243) {
                  LOBYTE(v235) = v239;
                }
                char v246 = *v231++;
                v230->i8[0] = v246 - v235;
                int v230 = (int8x16_t *)((char *)v230 + 1);
                --v232;
              }
              while (v232);
              goto LABEL_266;
            }
          }
          else
          {
            unint64_t v275 = 0;
          }
          v203 += v223 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v227 = v16 + (v223 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v228 = v202 + (v223 & 0xFFFFFFFFFFFFFFF8);
          int v229 = &v208[v223 & 0xFFFFFFFFFFFFFFF8];
          int v230 = (int8x16_t *)((char *)v201 + (v223 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v231 = &v207[v223 & 0xFFFFFFFFFFFFFFF8];
          int v276 = (int8x8_t *)(v16 + v275 + 1);
          uint64_t v277 = (unint64_t *)(v202 + v275 + 1);
          unsigned int v278 = (int8x8_t *)&v207[v275];
          unsigned int v279 = (int8x8_t *)&v201->i8[v275];
          unsigned int v280 = (unint64_t *)&v208[v275];
          unint64_t v281 = v275 - (v223 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            unint64_t v282 = *v280++;
            a5.i64[0] = v282;
            int32x4_t v283 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1004048A0);
            int32x4_t v284 = (int32x4_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_100404890);
            unint64_t v285 = *v277++;
            a8.i64[0] = v285;
            int32x4_t v286 = (int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1004048A0);
            int32x4_t v287 = (int32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_100404890);
            int8x8_t v288 = *v276++;
            *(int8x8_t *)v10.uint64_t i8 = v288;
            int32x4_t v289 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_1004048A0);
            int32x4_t v290 = (int32x4_t)vqtbl1q_s8((int8x16_t)v10, (int8x16_t)xmmword_100404890);
            int32x4_t v291 = vsubq_s32(v284, v287);
            int32x4_t v292 = vsubq_s32(v283, v286);
            int32x4_t v293 = vsubq_s32(v290, v287);
            int32x4_t v294 = vsubq_s32(v289, v286);
            uint32x4_t v295 = vabdq_u32((uint32x4_t)v287, (uint32x4_t)v284);
            uint32x4_t v296 = vabdq_u32((uint32x4_t)v286, (uint32x4_t)v283);
            uint32x4_t v297 = vabdq_u32((uint32x4_t)v287, (uint32x4_t)v290);
            uint32x4_t v298 = vabdq_u32((uint32x4_t)v286, (uint32x4_t)v289);
            uint32x4_t v299 = (uint32x4_t)vabsq_s32(vaddq_s32(v293, v291));
            uint32x4_t v300 = (uint32x4_t)vabsq_s32(vaddq_s32(v294, v292));
            int8x8_t v301 = vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v295, vminq_u32(v297, v299)), (int16x8_t)vcgtq_u32(v296, vminq_u32(v298, v300)))), vbsl_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(v297, v299), (int16x8_t)vcgtq_u32(v298, v300))), *(int8x8_t *)a8.i8, *(int8x8_t *)a5.i8), v288);
            int8x8_t v302 = *v278++;
            *v279++ = vsub_s8(v302, v301);
            v281 += 8;
          }
          while (v281);
          if (v223 == (v223 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_266;
          }
          goto LABEL_175;
        }
LABEL_154:
        uint64_t v209 = v203 - v206;
        do
        {
          char v211 = *v207++;
          char v210 = v211;
          char v212 = *v208++;
          v201->i8[0] = v210 - v212;
          char v201 = (int8x16_t *)((char *)v201 + 1);
          --v209;
        }
        while (v209);
        goto LABEL_162;
      }
    }
    else
    {
      unint64_t v206 = 0;
    }
    uint64_t v207 = (__int8 *)(v16 + 1);
    uint64_t v208 = (__int8 *)(v202 + 1);
    goto LABEL_154;
  }
  if ((v12 & 0x80) == 0) {
    goto LABEL_266;
  }
  uint64_t v213 = *(void *)(a1 + 552);
  *(unsigned char *)uint64_t v213 = 4;
  uint64_t v214 = (int8x16_t *)(v213 + 1);
  uint64_t v215 = *(void *)(a1 + 536);
  unint64_t v216 = v15;
  int v217 = (int8x16_t *)(v215 + 1);
  __int16 v218 = (int8x16_t *)(v16 + 1);
  if (v14)
  {
    if (v14 >= 0x79)
    {
      unint64_t v219 = 0;
      if ((unint64_t)(v213 - v16) < 0x10 || (unint64_t)(v213 - v215) < 0x10)
      {
        char v221 = (__int8 *)(v16 + 1);
        int v222 = (__int8 *)(v215 + 1);
        unint64_t v220 = 0;
      }
      else
      {
        unint64_t v220 = v216 & 0x30;
        char v221 = &v218->i8[v220];
        int v222 = &v217->i8[v220];
        int8x16_t v247 = vsubq_s8(*v218, *v217);
        *uint64_t v214 = v247;
        uint16x8_t v248 = vmovl_u8(*(uint8x8_t *)v247.i8);
        int8x16_t v249 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v248.i8);
        uint16x8_t v250 = vmovl_high_u8((uint8x16_t)v247);
        v251.i64[0] = 0x10000000100;
        v251.i64[1] = 0x10000000100;
        int8x16_t v252 = (int8x16_t)vsubw_u16(v251, *(uint16x4_t *)v248.i8);
        int8x16_t v253 = vcltzq_s8(v247);
        int16x8_t v254 = vmovl_s8(*(int8x8_t *)v253.i8);
        int16x8_t v255 = vmovl_high_s8(v253);
        int8x16_t v256 = (int8x16_t)vmovl_s16(*(int16x4_t *)v255.i8);
        int32x4_t v257 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v255), (int8x16_t)vsubw_high_u16(v251, v250), (int8x16_t)vmovl_high_u16(v250));
        int32x4_t v258 = (int32x4_t)vbslq_s8(v256, (int8x16_t)vsubw_u16(v251, *(uint16x4_t *)v250.i8), (int8x16_t)vmovl_u16(*(uint16x4_t *)v250.i8));
        int32x4_t v259 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v254), (int8x16_t)vsubw_high_u16(v251, v248), (int8x16_t)vmovl_high_u16(v248));
        int32x4_t v260 = (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v254.i8), v252, v249);
        if (v220 != 16)
        {
          int8x16_t v261 = vsubq_s8(*(int8x16_t *)(v16 + 17), *(int8x16_t *)(v215 + 17));
          *(int8x16_t *)(v213 + 17) = v261;
          uint16x8_t v262 = vmovl_high_u8((uint8x16_t)v261);
          int8x16_t v263 = (int8x16_t)vmovl_high_u16(v262);
          int8x16_t v264 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v262.i8);
          uint16x8_t v265 = vmovl_u8(*(uint8x8_t *)v261.i8);
          int8x16_t v266 = (int8x16_t)vmovl_high_u16(v265);
          int8x16_t v267 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v265.i8);
          int8x16_t v268 = (int8x16_t)vsubw_high_u16(v251, v262);
          int8x16_t v269 = (int8x16_t)vsubw_u16(v251, *(uint16x4_t *)v262.i8);
          int8x16_t v270 = (int8x16_t)vsubw_high_u16(v251, v265);
          int8x16_t v271 = (int8x16_t)vsubw_u16(v251, *(uint16x4_t *)v265.i8);
          int8x16_t v272 = vcltzq_s8(v261);
          int16x8_t v273 = vmovl_high_s8(v272);
          int16x8_t v274 = vmovl_s8(*(int8x8_t *)v272.i8);
          int32x4_t v257 = vaddq_s32(v257, (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v273), v268, v263));
          int32x4_t v258 = vaddq_s32(v258, (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v273.i8), v269, v264));
          int32x4_t v259 = vaddq_s32(v259, (int32x4_t)vbslq_s8((int8x16_t)vmovl_high_s16(v274), v270, v266));
          int32x4_t v260 = vaddq_s32(v260, (int32x4_t)vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v274.i8), v271, v267));
        }
        unint64_t v219 = vaddvq_s64(vaddq_s64(vaddq_s64((int64x2_t)vaddl_u32(*(uint32x2_t *)v260.i8, *(uint32x2_t *)v258.i8), (int64x2_t)vaddl_u32(*(uint32x2_t *)v259.i8, *(uint32x2_t *)v257.i8)), vaddq_s64((int64x2_t)vaddl_high_u32((uint32x4_t)v260, (uint32x4_t)v258), (int64x2_t)vaddl_high_u32((uint32x4_t)v259, (uint32x4_t)v257))));
        uint64_t v214 = (int8x16_t *)((char *)v214 + (v216 & 0x30));
        if (v220 == v216) {
          goto LABEL_237;
        }
      }
    }
    else
    {
      unint64_t v219 = 0;
      unint64_t v220 = 0;
      char v221 = (__int8 *)(v16 + 1);
      int v222 = (__int8 *)(v215 + 1);
    }
    unint64_t v337 = v216 - v220;
    do
    {
      char v339 = *v221++;
      char v338 = v339;
      char v340 = *v222++;
      LOBYTE(v341) = v338 - v340;
      v214->i8[0] = v341;
      uint64_t v214 = (int8x16_t *)((char *)v214 + 1);
      if ((v341 & 0x80u) == 0) {
        uint64_t v341 = v341;
      }
      else {
        uint64_t v341 = 256 - v341;
      }
      v219 += v341;
      --v337;
    }
    while (v337);
  }
  else
  {
    unint64_t v219 = 0;
    int v222 = (__int8 *)(v215 + 1);
    char v221 = (__int8 *)(v16 + 1);
  }
LABEL_237:
  if (v13 > v216)
  {
    unint64_t v342 = v216 + 1;
    do
    {
      int v344 = *v222++;
      LODWORD(v343) = v344;
      int v346 = v217->u8[0];
      int v217 = (int8x16_t *)((char *)v217 + 1);
      int v345 = v346;
      int v348 = v218->u8[0];
      __int16 v218 = (int8x16_t *)((char *)v218 + 1);
      char v347 = v348;
      int v349 = v348 - v345;
      if ((int)v343 - v345 >= 0) {
        unsigned int v350 = v343 - v345;
      }
      else {
        unsigned int v350 = v345 - v343;
      }
      if (v349 >= 0) {
        unsigned int v351 = v349;
      }
      else {
        unsigned int v351 = -v349;
      }
      int v352 = v349 + v343 - v345;
      if (v352 < 0) {
        int v352 = -v352;
      }
      if (v351 > v352) {
        LOBYTE(v343) = v345;
      }
      if (v350 <= v352 && v350 <= v351) {
        LOBYTE(v343) = v347;
      }
      char v354 = *v221++;
      LOBYTE(v343) = v354 - v343;
      v214->i8[0] = v343;
      uint64_t v214 = (int8x16_t *)((char *)v214 + 1);
      if ((v343 & 0x80u) == 0) {
        uint64_t v343 = v343;
      }
      else {
        uint64_t v343 = 256 - v343;
      }
      v219 += v343;
    }
    while (v219 <= v17 && v342++ < v13);
  }
  if (v219 < v17)
  {
    uint64_t v356 = *(void *)(a1 + 560);
    if (v356)
    {
      *(void *)(a1 + 552) = v356;
      *(void *)(a1 + 560) = v213;
    }
    uint64_t v18 = v213;
  }
LABEL_266:
  sub_1003B4054(a1, v18, *(void *)(a2 + 8) + 1, 0);
  uint64_t v357 = *(void *)(a1 + 536);
  if (v357)
  {
    *(void *)(a1 + 536) = *(void *)(a1 + 544);
    *(void *)(a1 + 544) = v357;
  }
  sub_1003B6C64(a1);
  unsigned int v358 = *(_DWORD *)(a1 + 660) + 1;
  *(_DWORD *)(a1 + 660) = v358;
  if (*(_DWORD *)(a1 + 656) - 1 < v358)
  {
    sub_1003B29A4(a1);
  }
}

double sub_1003B8664(char *a1, int a2, uint64_t a3)
{
  *((void *)a1 + 1) = 0;
  if (a2 != 90)
  {
    *(void *)(*(void *)a1 + 40) = 0x5A0000000DLL;
    *(_DWORD *)(*(void *)a1 + 48) = a2;
    (**(void (***)(char *))a1)(a1);
  }
  if (a3 != 568)
  {
    *(void *)(*(void *)a1 + 40) = 0x23800000016;
    *(_DWORD *)(*(void *)a1 + 48) = a3;
    (**(void (***)(char *))a1)(a1);
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 3);
  bzero(a1, 0x238uLL);
  *(void *)a1 = v5;
  *((void *)a1 + 3) = v6;
  a1[32] = 0;
  sub_1003E9E88(a1);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 5) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *((void *)a1 + 17) = 0;
  memset_pattern16(a1 + 144, &unk_10040CD90, 0x10uLL);
  double result = 0.0;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_DWORD *)a1 + 115) = 8;
  *((void *)a1 + 58) = dword_10040DA60;
  *((_DWORD *)a1 + 118) = 63;
  *((void *)a1 + 69) = 0;
  *((void *)a1 + 8) = 0x3FF0000000000000;
  *((_DWORD *)a1 + 9) = 100;
  return result;
}

void *sub_1003B8788(void *result, char a2)
{
  uint64_t v2 = result[14];
  if (v2) {
    *(unsigned char *)(v2 + 128) = a2;
  }
  uint64_t v3 = result[15];
  if (v3) {
    *(unsigned char *)(v3 + 128) = a2;
  }
  uint64_t v4 = result[16];
  if (v4) {
    *(unsigned char *)(v4 + 128) = a2;
  }
  uint64_t v5 = result[17];
  if (v5) {
    *(unsigned char *)(v5 + 128) = a2;
  }
  uint64_t v6 = result[20];
  if (v6) {
    *(unsigned char *)(v6 + 273) = a2;
  }
  uint64_t v7 = result[24];
  if (v7) {
    *(unsigned char *)(v7 + 273) = a2;
  }
  uint64_t v8 = result[21];
  if (v8) {
    *(unsigned char *)(v8 + 273) = a2;
  }
  uint64_t v9 = result[25];
  if (v9) {
    *(unsigned char *)(v9 + 273) = a2;
  }
  uint64_t v10 = result[22];
  if (v10) {
    *(unsigned char *)(v10 + 273) = a2;
  }
  uint64_t v11 = result[26];
  if (v11) {
    *(unsigned char *)(v11 + 273) = a2;
  }
  uint64_t v12 = result[23];
  if (v12) {
    *(unsigned char *)(v12 + 273) = a2;
  }
  uint64_t v13 = result[27];
  if (v13) {
    *(unsigned char *)(v13 + 273) = a2;
  }
  return result;
}

uint64_t sub_1003B881C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if ((v2 - 101) >= 2)
  {
    if (v2 == 103) {
      goto LABEL_8;
    }
    uint64_t v5 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v5 + 10) = 21;
    *((_DWORD *)v5 + 11) = v2;
    uint64_t v4 = *(void (***)(uint64_t))a1;
  }
  else
  {
    if (*(_DWORD *)(a1 + 328) < *(_DWORD *)(a1 + 52))
    {
      uint64_t v3 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v3 + 10) = 69;
      (*v3)(a1);
    }
    uint64_t v4 = (void (**)(uint64_t))(*(void *)(a1 + 480) + 16);
  }
  (*v4)(a1);
LABEL_8:
  for (uint64_t i = *(void *)(a1 + 480); !*(unsigned char *)(i + 25); uint64_t i = *(void *)(a1 + 480))
  {
    (*(void (**)(uint64_t))i)(a1);
    unint64_t v8 = *(unsigned int *)(a1 + 352);
    if (v8)
    {
      for (unint64_t j = 0; j < v8; ++j)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        if (v10)
        {
          *(void *)(v10 + 8) = j;
          *(void *)(v10 + 16) = v8;
          (*(void (**)(uint64_t))v10)(a1);
        }
        if (!(*(unsigned int (**)(uint64_t, void))(*(void *)(a1 + 504) + 8))(a1, 0))
        {
          uint64_t v11 = *(void (***)(uint64_t))a1;
          *((_DWORD *)v11 + 10) = 25;
          (*v11)(a1);
        }
        unint64_t v8 = *(unsigned int *)(a1 + 352);
      }
    }
    (*(void (**)(uint64_t))(*(void *)(a1 + 480) + 16))(a1);
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 512) + 24))(a1);
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 32))(a1);

  return sub_1003C5714(a1);
}

uint64_t sub_1003B8984(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 36);
  if (v4 != 100)
  {
    uint64_t v5 = *(void (***)(void))a1;
    *((_DWORD *)v5 + 10) = 21;
    *((_DWORD *)v5 + 11) = v4;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if (a2) {
    sub_1003B8788((void *)a1, 0);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1);
  sub_1003C05B0(a1);
  uint64_t result = (**(uint64_t (***)(uint64_t))(a1 + 480))(a1);
  *(_DWORD *)(a1 + 328) = 0;
  if (*(unsigned char *)(a1 + 288)) {
    int v7 = 102;
  }
  else {
    int v7 = 101;
  }
  *(_DWORD *)(a1 + 36) = v7;
  return result;
}

uint64_t sub_1003B8A30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(_DWORD *)(a1 + 36);
  if (v6 == 101)
  {
    if (*(_DWORD *)(a1 + 328) < *(_DWORD *)(a1 + 52)) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v13 + 10) = 21;
    *((_DWORD *)v13 + 11) = v6;
    (**(void (***)(uint64_t))a1)(a1);
    if (*(_DWORD *)(a1 + 328) < *(_DWORD *)(a1 + 52))
    {
LABEL_3:
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v14 = *(void (***)(uint64_t))a1;
  *((_DWORD *)v14 + 10) = 126;
  ((void (*)(uint64_t, uint64_t))v14[1])(a1, 0xFFFFFFFFLL);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
LABEL_4:
    uint64_t v8 = *(unsigned int *)(a1 + 52);
    *(void *)(v7 + 8) = *(unsigned int *)(a1 + 328);
    *(void *)(v7 + 16) = v8;
    (*(void (**)(uint64_t))v7)(a1);
  }
LABEL_5:
  uint64_t v9 = *(void *)(a1 + 480);
  if (*(unsigned char *)(v9 + 24)) {
    (*(void (**)(uint64_t))(v9 + 8))(a1);
  }
  unsigned int v10 = *(_DWORD *)(a1 + 52) - *(_DWORD *)(a1 + 328);
  if (v10 >= a3) {
    uint64_t v11 = a3;
  }
  else {
    uint64_t v11 = v10;
  }
  unsigned int v15 = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(void *)(a1 + 488) + 8))(a1, a2, &v15, v11);
  uint64_t result = v15;
  *(_DWORD *)(a1 + 328) += v15;
  return result;
}

_OWORD *sub_1003B8B50(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 544) = v2;
  *(void *)uint64_t v2 = sub_1003B8BE8;
  *(void *)(v2 + 16) = sub_1003B8E40;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(unsigned char *)(v2 + 360) = 113;
  *(_OWORD *)(v2 + 104) = 0u;
  uint64_t result = (_OWORD *)(v2 + 104);
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  return result;
}

double sub_1003B8BE8(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 544);
  if (a2)
  {
    int v4 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v4 + 10) = 49;
    (*v4)(a1);
  }
  if (!*(unsigned char *)(a1 + 332))
  {
    *(void *)(v3 + 8) = sub_1003B9C40;
    if (*(int *)(a1 + 356) < 1) {
      goto LABEL_32;
    }
    goto LABEL_16;
  }
  int v5 = *(_DWORD *)(a1 + 444);
  if (*(_DWORD *)(a1 + 452))
  {
    if (v5)
    {
      *(void *)(v3 + 8) = sub_1003B99D8;
      if (*(int *)(a1 + 356) < 1) {
        goto LABEL_32;
      }
    }
    else
    {
      *(void *)(v3 + 8) = sub_1003B9920;
      if (*(int *)(a1 + 356) < 1) {
        goto LABEL_32;
      }
    }
    goto LABEL_16;
  }
  if (v5)
  {
    *(void *)(v3 + 8) = sub_1003B9624;
    if (*(int *)(a1 + 356) < 1) {
      goto LABEL_32;
    }
    goto LABEL_16;
  }
  *(void *)(v3 + 8) = sub_1003B93DC;
  if (*(int *)(a1 + 356) >= 1)
  {
LABEL_16:
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(a1 + 8 * v6 + 360);
      if (!*(_DWORD *)(a1 + 444) && !*(_DWORD *)(a1 + 452)) {
        break;
      }
      if (*(_DWORD *)(a1 + 448)) {
        goto LABEL_24;
      }
LABEL_20:
      if (++v6 >= *(int *)(a1 + 356)) {
        goto LABEL_32;
      }
    }
    unsigned int v14 = *(_DWORD *)(v11 + 20);
    if (v14 >= 0x10)
    {
      unsigned int v15 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v15 + 10) = 50;
      *((_DWORD *)v15 + 11) = v14;
      (**(void (***)(uint64_t))a1)(a1);
    }
    uint64_t v16 = v3 + 8 * (int)v14;
    int v19 = *(_OWORD **)(v16 + 104);
    uint64_t v18 = (void *)(v16 + 104);
    unint64_t v17 = v19;
    if (!v19)
    {
      unint64_t v17 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 64);
      *uint64_t v18 = v17;
    }
    v17[2] = 0u;
    v17[3] = 0u;
    *unint64_t v17 = 0u;
    v17[1] = 0u;
    uint64_t v20 = v3 + 4 * v6;
    *(_DWORD *)(v20 + 64) = 0;
    *(_DWORD *)(v20 + 80) = 0;
    if (!*(_DWORD *)(a1 + 448)) {
      goto LABEL_20;
    }
LABEL_24:
    unsigned int v12 = *(_DWORD *)(v11 + 24);
    if (v12 >= 0x10)
    {
      uint64_t v13 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v13 + 10) = 50;
      *((_DWORD *)v13 + 11) = v12;
      (**(void (***)(uint64_t))a1)(a1);
    }
    uint64_t v7 = v3 + 8 * (int)v12;
    unsigned int v10 = *(_OWORD **)(v7 + 232);
    uint64_t v9 = (void *)(v7 + 232);
    uint64_t v8 = v10;
    if (!v10)
    {
      uint64_t v8 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
      *uint64_t v9 = v8;
    }
    v8[14] = 0u;
    v8[15] = 0u;
    v8[12] = 0u;
    v8[13] = 0u;
    v8[10] = 0u;
    v8[11] = 0u;
    v8[8] = 0u;
    v8[9] = 0u;
    v8[6] = 0u;
    Bytef v8[7] = 0u;
    Bytef v8[4] = 0u;
    v8[5] = 0u;
    v8[2] = 0u;
    v8[3] = 0u;
    *uint64_t v8 = 0u;
    v8[1] = 0u;
    goto LABEL_20;
  }
LABEL_32:
  *(_OWORD *)(v3 + 24) = xmmword_10040CDA0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  double result = NAN;
  *(void *)(v3 + 56) = -4294967285;
  *(void *)(v3 + 96) = *(unsigned int *)(a1 + 304);
  return result;
}

uint64_t sub_1003B8E40(uint64_t result)
{
  unsigned int v1 = (uint64_t *)result;
  uint64_t v2 = *(void *)(result + 544);
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = (*(_DWORD *)(v2 + 32) + v3 - 1) & 0xFFFF0000;
  if (v4 >= v3) {
    uint64_t v5 = (*(_DWORD *)(v2 + 32) + v3 - 1) & 0xFFFF0000;
  }
  else {
    uint64_t v5 = v4 | 0x8000;
  }
  int v6 = *(_DWORD *)(v2 + 60);
  uint64_t v7 = v5 << *(_DWORD *)(v2 + 56);
  *(void *)(v2 + 24) = v7;
  if ((v7 & 0xF8000000) != 0)
  {
    if ((v6 & 0x80000000) == 0)
    {
      if (*(void *)(v2 + 48))
      {
        do
        {
          uint64_t v9 = v1[5];
          unsigned int v10 = (unsigned char *)(*(void *)v9)++;
          *unsigned int v10 = 0;
          uint64_t v11 = *(void *)(v9 + 8) - 1;
          *(void *)(v9 + 8) = v11;
          if (!v11)
          {
            double result = (*(uint64_t (**)(uint64_t *))(v9 + 24))(v1);
            if (!result)
            {
              uint64_t v12 = *v1;
              *(_DWORD *)(v12 + 40) = 25;
              double result = (*(uint64_t (**)(uint64_t *))v12)(v1);
            }
          }
          uint64_t v8 = *(void *)(v2 + 48) - 1;
          *(void *)(v2 + 48) = v8;
        }
        while (v8);
        int v6 = *(_DWORD *)(v2 + 60);
      }
      uint64_t v18 = v1[5];
      int v19 = (unsigned char *)(*(void *)v18)++;
      *int v19 = v6 + 1;
      uint64_t v20 = *(void *)(v18 + 8) - 1;
      *(void *)(v18 + 8) = v20;
      if (!v20)
      {
        double result = (*(uint64_t (**)(uint64_t *))(v18 + 24))(v1);
        if (!result)
        {
          uint64_t v21 = *v1;
          *(_DWORD *)(v21 + 40) = 25;
          double result = (*(uint64_t (**)(uint64_t *))v21)(v1);
        }
      }
      if (*(_DWORD *)(v2 + 60) == 254)
      {
        uint64_t v22 = v1[5];
        __int8 v23 = (unsigned char *)(*(void *)v22)++;
        *__int8 v23 = 0;
        uint64_t v24 = *(void *)(v22 + 8) - 1;
        *(void *)(v22 + 8) = v24;
        if (!v24)
        {
          double result = (*(uint64_t (**)(uint64_t *))(v22 + 24))(v1);
          if (!result)
          {
            uint64_t v25 = *v1;
            *(_DWORD *)(v25 + 40) = 25;
            double result = (*(uint64_t (**)(uint64_t *))v25)(v1);
          }
        }
      }
    }
    uint64_t v26 = *(void *)(v2 + 48) + *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    *(void *)(v2 + 48) = v26;
  }
  else
  {
    if (v6)
    {
      if ((v6 & 0x80000000) == 0)
      {
        if (*(void *)(v2 + 48))
        {
          do
          {
            uint64_t v14 = v1[5];
            unsigned int v15 = (unsigned char *)(*(void *)v14)++;
            *unsigned int v15 = 0;
            uint64_t v16 = *(void *)(v14 + 8) - 1;
            *(void *)(v14 + 8) = v16;
            if (!v16)
            {
              double result = (*(uint64_t (**)(uint64_t *))(v14 + 24))(v1);
              if (!result)
              {
                uint64_t v17 = *v1;
                *(_DWORD *)(v17 + 40) = 25;
                double result = (*(uint64_t (**)(uint64_t *))v17)(v1);
              }
            }
            uint64_t v13 = *(void *)(v2 + 48) - 1;
            *(void *)(v2 + 48) = v13;
          }
          while (v13);
          int v6 = *(_DWORD *)(v2 + 60);
        }
        uint64_t v49 = v1[5];
        int8x16_t v50 = (unsigned char *)(*(void *)v49)++;
        *int8x16_t v50 = v6;
        uint64_t v51 = *(void *)(v49 + 8) - 1;
        *(void *)(v49 + 8) = v51;
        if (!v51)
        {
          double result = (*(uint64_t (**)(uint64_t *))(v49 + 24))(v1);
          if (!result)
          {
            uint64_t v52 = *v1;
            *(_DWORD *)(v52 + 40) = 25;
            double result = (*(uint64_t (**)(uint64_t *))v52)(v1);
          }
        }
      }
    }
    else
    {
      ++*(void *)(v2 + 48);
    }
    if (*(void *)(v2 + 40))
    {
      if (*(void *)(v2 + 48))
      {
        do
        {
          uint64_t v54 = v1[5];
          int8x16_t v55 = (unsigned char *)(*(void *)v54)++;
          *int8x16_t v55 = 0;
          uint64_t v56 = *(void *)(v54 + 8) - 1;
          *(void *)(v54 + 8) = v56;
          if (!v56)
          {
            double result = (*(uint64_t (**)(uint64_t *))(v54 + 24))(v1);
            if (!result)
            {
              uint64_t v57 = *v1;
              *(_DWORD *)(v57 + 40) = 25;
              double result = (*(uint64_t (**)(uint64_t *))v57)(v1);
            }
          }
          uint64_t v53 = *(void *)(v2 + 48) - 1;
          *(void *)(v2 + 48) = v53;
        }
        while (v53);
      }
      do
      {
        uint64_t v59 = v1[5];
        int8x16_t v60 = (unsigned char *)(*(void *)v59)++;
        unsigned char *v60 = -1;
        uint64_t v61 = *(void *)(v59 + 8) - 1;
        *(void *)(v59 + 8) = v61;
        if (!v61)
        {
          double result = (*(uint64_t (**)(uint64_t *))(v59 + 24))(v1);
          if (!result)
          {
            uint64_t v62 = *v1;
            *(_DWORD *)(v62 + 40) = 25;
            double result = (*(uint64_t (**)(uint64_t *))v62)(v1);
          }
        }
        uint64_t v63 = v1[5];
        int8x16_t v64 = (unsigned char *)(*(void *)v63)++;
        *int8x16_t v64 = 0;
        uint64_t v65 = *(void *)(v63 + 8) - 1;
        *(void *)(v63 + 8) = v65;
        if (!v65)
        {
          double result = (*(uint64_t (**)(uint64_t *))(v63 + 24))(v1);
          if (!result)
          {
            uint64_t v66 = *v1;
            *(_DWORD *)(v66 + 40) = 25;
            double result = (*(uint64_t (**)(uint64_t *))v66)(v1);
          }
        }
        uint64_t v58 = *(void *)(v2 + 40) - 1;
        *(void *)(v2 + 40) = v58;
      }
      while (v58);
    }
  }
  unint64_t v27 = *(void *)(v2 + 24);
  if ((v27 & 0x7FFF800) != 0)
  {
    if (*(void *)(v2 + 48))
    {
      do
      {
        uint64_t v29 = v1[5];
        unsigned int v30 = (unsigned char *)(*(void *)v29)++;
        *unsigned int v30 = 0;
        uint64_t v31 = *(void *)(v29 + 8) - 1;
        *(void *)(v29 + 8) = v31;
        if (!v31)
        {
          double result = (*(uint64_t (**)(uint64_t *))(v29 + 24))(v1);
          if (!result)
          {
            uint64_t v32 = *v1;
            *(_DWORD *)(v32 + 40) = 25;
            double result = (*(uint64_t (**)(uint64_t *))v32)(v1);
          }
        }
        uint64_t v28 = *(void *)(v2 + 48) - 1;
        *(void *)(v2 + 48) = v28;
      }
      while (v28);
      unint64_t v27 = *(void *)(v2 + 24);
    }
    uint64_t v33 = v1[5];
    unint64_t v34 = (unsigned char *)(*(void *)v33)++;
    *unint64_t v34 = v27 >> 19;
    uint64_t v35 = *(void *)(v33 + 8) - 1;
    *(void *)(v33 + 8) = v35;
    if (!v35)
    {
      double result = (*(uint64_t (**)(uint64_t *))(v33 + 24))(v1);
      if (!result)
      {
        uint64_t v36 = *v1;
        *(_DWORD *)(v36 + 40) = 25;
        double result = (*(uint64_t (**)(uint64_t *))v36)(v1);
      }
    }
    if ((~*(_DWORD *)(v2 + 24) & 0x7F80000) != 0
      || (uint64_t v37 = v1[5],
          uint64_t v38 = *(unsigned char **)v37,
          ++*(void *)v37,
          *uint64_t v38 = 0,
          uint64_t v39 = *(void *)(v37 + 8) - 1,
          (*(void *)(v37 + 8) = v39) != 0)
      || (double result = (*(uint64_t (**)(uint64_t *))(v37 + 24))(v1), result))
    {
      unint64_t v40 = *(void *)(v2 + 24);
      if ((v40 & 0x7F800) == 0) {
        return result;
      }
    }
    else
    {
      uint64_t v68 = *v1;
      *(_DWORD *)(v68 + 40) = 25;
      double result = (*(uint64_t (**)(uint64_t *))v68)(v1);
      unint64_t v40 = *(void *)(v2 + 24);
      if ((v40 & 0x7F800) == 0) {
        return result;
      }
    }
    uint64_t v41 = v1[5];
    int8x16_t v42 = (unsigned char *)(*(void *)v41)++;
    unsigned char *v42 = v40 >> 11;
    uint64_t v43 = *(void *)(v41 + 8) - 1;
    *(void *)(v41 + 8) = v43;
    if (v43 || (double result = (*(uint64_t (**)(uint64_t *))(v41 + 24))(v1), result))
    {
      if ((~*(_DWORD *)(v2 + 24) & 0x7F800) != 0) {
        return result;
      }
    }
    else
    {
      uint64_t v67 = *v1;
      *(_DWORD *)(v67 + 40) = 25;
      double result = (*(uint64_t (**)(uint64_t *))v67)(v1);
      if ((~*(_DWORD *)(v2 + 24) & 0x7F800) != 0) {
        return result;
      }
    }
    uint64_t v44 = v1[5];
    uint16x8_t v45 = (unsigned char *)(*(void *)v44)++;
    *uint16x8_t v45 = 0;
    uint64_t v46 = *(void *)(v44 + 8) - 1;
    *(void *)(v44 + 8) = v46;
    if (!v46)
    {
      double result = (*(uint64_t (**)(uint64_t *))(v44 + 24))(v1);
      if (!result)
      {
        uint64_t v47 = *v1;
        *(_DWORD *)(v47 + 40) = 25;
        int16x8_t v48 = *(uint64_t (**)(uint64_t *))v47;
        return v48(v1);
      }
    }
  }
  return result;
}

uint64_t sub_1003B93DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    int v4 = *(_DWORD *)(v3 + 96);
    if (!v4)
    {
      sub_1003BA114(a1, *(_DWORD *)(v3 + 100));
      int v4 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v3 + 100) = (*(_DWORD *)(v3 + 100) + 1) & 7;
    }
    *(_DWORD *)(v3 + 96) = v4 - 1;
  }
  if (*(int *)(a1 + 400) >= 1)
  {
    uint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = *(int *)(a1 + 4 * v5 + 404);
      uint64_t v7 = *(int *)(*(void *)(a1 + 8 * v6 + 360) + 20);
      uint64_t v8 = v3 + 8 * v7;
      uint64_t v11 = *(void *)(v8 + 104);
      unsigned int v10 = (void *)(v8 + 104);
      uint64_t v9 = v11;
      uint64_t v12 = v3 + 4 * v6;
      LODWORD(v11) = *(_DWORD *)(v12 + 64);
      uint64_t v13 = (int *)(v12 + 64);
      int v14 = **(__int16 **)(a2 + 8 * v5) >> *(_DWORD *)(a1 + 456);
      unsigned int v15 = v13 + 4;
      uint64_t v16 = (unsigned char *)(v9 + v13[4]);
      int v17 = v14 - v11;
      if (v14 != v11) {
        break;
      }
      sub_1003BA2A8(a1, (unsigned char *)(v9 + v13[4]), 0);
      *unsigned int v15 = 0;
LABEL_8:
      if (++v5 >= *(int *)(a1 + 400)) {
        return 1;
      }
    }
    *uint64_t v13 = v14;
    sub_1003BA2A8(a1, v16, 1);
    BOOL v18 = v17 <= 0;
    if (v17 <= 0) {
      uint64_t v19 = 3;
    }
    else {
      uint64_t v19 = 2;
    }
    if (v17 <= 0) {
      int v20 = 8;
    }
    else {
      int v20 = 4;
    }
    if (v17 <= 0) {
      int v17 = -v17;
    }
    sub_1003BA2A8(a1, v16 + 1, v18);
    uint64_t v21 = &v16[v19];
    *unsigned int v15 = v20;
    unsigned int v22 = v17 - 1;
    if (v22)
    {
      int v23 = 1;
      sub_1003BA2A8(a1, v21, 1);
      uint64_t v21 = (unsigned char *)(*v10 + 20);
      if (v22 != 1)
      {
        unsigned int v24 = v22;
        do
        {
          sub_1003BA2A8(a1, v21, 1);
          v23 *= 2;
          ++v21;
          BOOL v25 = v24 > 3;
          v24 >>= 1;
        }
        while (v25);
      }
    }
    else
    {
      int v23 = 0;
    }
    sub_1003BA2A8(a1, v21, 0);
    int v26 = 0;
    if (v23 >= (int)((unint64_t)(1 << *(unsigned char *)(a1 + v7 + 224)) >> 1))
    {
      if (v23 <= (int)((unint64_t)(1 << *(unsigned char *)(a1 + v7 + 240)) >> 1)) {
        goto LABEL_28;
      }
      int v26 = *v15 + 8;
    }
    *unsigned int v15 = v26;
LABEL_28:
    if (v23 >= 2)
    {
      unint64_t v27 = v21 + 14;
      do
      {
        sub_1003BA2A8(a1, v27, ((v23 >> 1) & v22) != 0);
        BOOL v25 = v23 > 3;
        v23 >>= 1;
      }
      while (v25);
    }
    goto LABEL_8;
  }
  return 1;
}

uint64_t sub_1003B9624(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    int v5 = *(_DWORD *)(v4 + 96);
    if (!v5)
    {
      sub_1003BA114(a1, *(_DWORD *)(v4 + 100));
      int v5 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v4 + 100) = (*(_DWORD *)(v4 + 100) + 1) & 7;
    }
    *(_DWORD *)(v4 + 96) = v5 - 1;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 464);
  uint64_t v8 = *a2;
  uint64_t v9 = *(int *)(*(void *)(a1 + 360) + 24);
  uint64_t v10 = *(int *)(a1 + 448);
  int v11 = *(_DWORD *)(a1 + 448);
  uint64_t v12 = v7 + 4 * v10;
  int v13 = v10 - 1;
  do
  {
    unsigned int v14 = *(__int16 *)(v8 + 2 * *(int *)(v12 + 4 * v6));
    if ((v14 & 0x80000000) != 0) {
      unsigned int v14 = -v14;
    }
    if (v14 >> *(_DWORD *)(a1 + 456))
    {
      int v16 = v11 + v6;
      int v19 = *(_DWORD *)(a1 + 444);
      int v18 = v19 - 1;
      if (v19 > v16) {
        goto LABEL_36;
      }
      goto LABEL_13;
    }
  }
  while (v13 + v6--);
  int v16 = 0;
  int v17 = *(_DWORD *)(a1 + 444);
  int v18 = v17 - 1;
  if (v17 <= 0)
  {
LABEL_13:
    int v20 = (uint64_t *)(v4 + 8 * v9 + 232);
    uint64_t v39 = *(int *)(*(void *)(a1 + 360) + 24);
    uint64_t v40 = v4;
    uint64_t v41 = (unsigned __int8 *)(a1 + v9 + 256);
    uint64_t v42 = v7 + 4;
    uint64_t v43 = (unsigned char *)(v4 + 360);
    while (1)
    {
      uint64_t v21 = (unsigned char *)(*v20 + 3 * v18);
      sub_1003BA2A8(a1, v21, 0);
      unsigned int v22 = (int *)(v42 + 4 * v18);
      int v23 = v21 + 1;
      for (int i = v18; ; ++i)
      {
        uint64_t v26 = *v22++;
        unsigned int v27 = *(__int16 *)(v8 + 2 * v26);
        if ((v27 & 0x80000000) != 0) {
          break;
        }
        unsigned int v25 = v27 >> *(_DWORD *)(a1 + 456);
        if (v25)
        {
          int v28 = 0;
          goto LABEL_23;
        }
LABEL_18:
        sub_1003BA2A8(a1, v23, 0);
        v23 += 3;
      }
      unsigned int v25 = -v27 >> *(_DWORD *)(a1 + 456);
      if (!v25) {
        goto LABEL_18;
      }
      int v28 = 1;
LABEL_23:
      sub_1003BA2A8(a1, v23, 1);
      sub_1003BA2A8(a1, v43, v28);
      uint64_t v29 = v23 + 1;
      unsigned int v30 = v25 - 1;
      if (v25 == 1 || (sub_1003BA2A8(a1, v29, 1), v25 == 2))
      {
        sub_1003BA2A8(a1, v29, 0);
      }
      else
      {
        sub_1003BA2A8(a1, v29, 1);
        uint64_t v31 = *v20;
        uint64_t v32 = 217;
        if (i < *v41) {
          uint64_t v32 = 189;
        }
        uint64_t v33 = (unsigned char *)(v31 + v32);
        if (v25 >= 5)
        {
          int v35 = 2;
          unsigned int v36 = v30;
          do
          {
            sub_1003BA2A8(a1, v33, 1);
            v35 *= 2;
            ++v33;
            BOOL v37 = v36 >= 8;
            v36 >>= 1;
          }
          while (v37);
          sub_1003BA2A8(a1, v33, 0);
          if (v35)
          {
            unint64_t v34 = v33 + 14;
            goto LABEL_33;
          }
        }
        else
        {
          sub_1003BA2A8(a1, (unsigned char *)(v31 + v32), 0);
          unint64_t v34 = v33 + 14;
          int v35 = 2;
          do
          {
LABEL_33:
            sub_1003BA2A8(a1, v34, ((v35 >> 1) & v30) != 0);
            BOOL v37 = v35 >= 4;
            v35 >>= 1;
          }
          while (v37);
        }
      }
      int v18 = i + 1;
      if (v16 <= i + 1)
      {
        int v11 = *(_DWORD *)(a1 + 448);
        int v18 = i + 1;
        uint64_t v9 = v39;
        uint64_t v4 = v40;
        break;
      }
    }
  }
LABEL_36:
  if (v18 < v11) {
    sub_1003BA2A8(a1, (unsigned char *)(*(void *)(v4 + 8 * v9 + 232) + 3 * v18), 1);
  }
  return 1;
}

uint64_t sub_1003B9920(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    int v5 = *(_DWORD *)(v4 + 96);
    if (!v5)
    {
      sub_1003BA114(a1, *(_DWORD *)(v4 + 100));
      int v5 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v4 + 100) = (*(_DWORD *)(v4 + 100) + 1) & 7;
    }
    *(_DWORD *)(v4 + 96) = v5 - 1;
  }
  if (*(int *)(a1 + 400) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (unsigned char *)(v4 + 360);
    int v8 = *(_DWORD *)(a1 + 456);
    do
      sub_1003BA2A8(a1, v7, (**(__int16 **)(a2 + 8 * v6++) >> v8) & 1);
    while (v6 < *(int *)(a1 + 400));
  }
  return 1;
}

uint64_t sub_1003B99D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    int v5 = *(_DWORD *)(v4 + 96);
    if (!v5)
    {
      sub_1003BA114(a1, *(_DWORD *)(v4 + 100));
      int v5 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v4 + 100) = (*(_DWORD *)(v4 + 100) + 1) & 7;
    }
    *(_DWORD *)(v4 + 96) = v5 - 1;
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 464);
  uint64_t v8 = *a2;
  uint64_t v9 = *(int *)(*(void *)(a1 + 360) + 24);
  uint64_t v10 = *(int *)(a1 + 448);
  int v11 = *(_DWORD *)(a1 + 448);
  while (1)
  {
    unsigned int v12 = *(__int16 *)(v8 + 2 * *(int *)(v7 + 4 * v10 + 4 * v6));
    if ((v12 & 0x80000000) != 0) {
      unsigned int v12 = -v12;
    }
    if (v12 >> *(_DWORD *)(a1 + 456)) {
      break;
    }
    int v13 = v10 + v6--;
    if (v13 == 1)
    {
      int v14 = 0;
LABEL_18:
      LODWORD(v15) = 0;
      goto LABEL_19;
    }
  }
  int v14 = v11 + v6;
  if (v11 + (int)v6 > 0)
  {
    uint64_t v15 = (v10 + v6);
    while (1)
    {
      unsigned int v16 = *(__int16 *)(v8 + 2 * *(int *)(v7 + 4 * v15));
      if ((v16 & 0x80000000) != 0) {
        unsigned int v16 = -v16;
      }
      if (v16 >> *(_DWORD *)(a1 + 452)) {
        break;
      }
      if (v15-- <= 1) {
        goto LABEL_18;
      }
    }
LABEL_19:
    int v18 = *(_DWORD *)(a1 + 444);
    int v19 = v18 - 1;
    if (v18 > v14) {
      goto LABEL_35;
    }
    goto LABEL_20;
  }
  LODWORD(v15) = v11 + v6;
  int v33 = *(_DWORD *)(a1 + 444);
  int v19 = v33 - 1;
  if (v33 <= v14)
  {
LABEL_20:
    uint64_t v34 = *(int *)(*(void *)(a1 + 360) + 24);
    uint64_t v35 = v4;
    int v20 = (void *)(v4 + 8 * v9 + 232);
    uint64_t v21 = (unsigned char *)(v4 + 360);
    uint64_t v22 = v7 + 4;
    while (1)
    {
      uint64_t v26 = *v20 + 3 * v19;
      if (v19 >= (int)v15) {
        sub_1003BA2A8(a1, (unsigned char *)(*v20 + 3 * v19), 0);
      }
      unsigned int v27 = (int *)(v22 + 4 * v19++);
      for (int i = (unsigned char *)(v26 + 1); ; i += 3)
      {
        uint64_t v30 = *v27++;
        unsigned int v31 = *(__int16 *)(v8 + 2 * v30);
        if ((v31 & 0x80000000) != 0) {
          break;
        }
        unsigned int v29 = v31 >> *(_DWORD *)(a1 + 456);
        if (v29)
        {
          if (v29 == 1)
          {
            sub_1003BA2A8(a1, i, 1);
            uint64_t v25 = a1;
            int v23 = v21;
            int v24 = 0;
            goto LABEL_22;
          }
LABEL_21:
          int v23 = i + 1;
          int v24 = v29 & 1;
          uint64_t v25 = a1;
          goto LABEL_22;
        }
LABEL_27:
        sub_1003BA2A8(a1, i, 0);
        ++v19;
      }
      unsigned int v29 = -v31 >> *(_DWORD *)(a1 + 456);
      if (!v29) {
        goto LABEL_27;
      }
      if (v29 != 1) {
        goto LABEL_21;
      }
      sub_1003BA2A8(a1, i, 1);
      uint64_t v25 = a1;
      int v23 = v21;
      int v24 = 1;
LABEL_22:
      sub_1003BA2A8(v25, v23, v24);
      if (v14 <= v19)
      {
        int v11 = *(_DWORD *)(a1 + 448);
        uint64_t v9 = v34;
        uint64_t v4 = v35;
        break;
      }
    }
  }
LABEL_35:
  if (v19 < v11) {
    sub_1003BA2A8(a1, (unsigned char *)(*(void *)(v4 + 8 * v9 + 232) + 3 * v19), 1);
  }
  return 1;
}

uint64_t sub_1003B9C40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 544);
  if (*(_DWORD *)(a1 + 304))
  {
    int v4 = *(_DWORD *)(v3 + 96);
    if (!v4)
    {
      sub_1003BA114(a1, *(_DWORD *)(v3 + 100));
      int v4 = *(_DWORD *)(a1 + 304);
      *(_DWORD *)(v3 + 100) = (*(_DWORD *)(v3 + 100) + 1) & 7;
    }
    *(_DWORD *)(v3 + 96) = v4 - 1;
  }
  if (*(int *)(a1 + 400) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v58 = *(void *)(a1 + 464);
    while (1)
    {
      uint64_t v6 = *(__int16 **)(a2 + 8 * v5);
      uint64_t v7 = *(int *)(a1 + 4 * v5 + 404);
      uint64_t v8 = *(void *)(a1 + 8 * v7 + 360);
      uint64_t v9 = *(int *)(v8 + 20);
      uint64_t v10 = v3 + 8 * v9;
      uint64_t v13 = *(void *)(v10 + 104);
      unsigned int v12 = (void *)(v10 + 104);
      uint64_t v11 = v13;
      uint64_t v14 = v3 + 4 * v7;
      LODWORD(v13) = *(_DWORD *)(v14 + 64);
      uint64_t v15 = (_DWORD *)(v14 + 64);
      unsigned int v16 = v15 + 4;
      int v17 = (unsigned char *)(v11 + (int)v15[4]);
      int v18 = *v6;
      int v19 = v18 - v13;
      uint64_t v54 = v5;
      uint64_t v56 = v8;
      if (v18 != v13) {
        break;
      }
      sub_1003BA2A8(a1, v17, 0);
      int *v16 = 0;
LABEL_31:
      int v29 = *(_DWORD *)(a1 + 472);
      uint64_t v30 = (unsigned char *)(v3 + 360);
      if (!v29) {
        goto LABEL_7;
      }
      uint64_t v31 = 0;
      uint64_t v32 = *(int *)(v56 + 24);
      while (!v6[*(int *)(v58 + 4 * v29 + 4 * v31)])
      {
        if (!(v29 - 1 + v31--)) {
          goto LABEL_60;
        }
      }
      if (v29 + (int)v31 > 0)
      {
        int v34 = 0;
        int v57 = v29 + v31;
        uint64_t v35 = (uint64_t *)(v3 + 8 * v32 + 232);
        uint64_t v52 = v32;
        int8x16_t v55 = (unsigned __int8 *)(a1 + v32 + 256);
        while (1)
        {
          unsigned int v36 = (unsigned char *)(*v35 + 3 * v34);
          sub_1003BA2A8(a1, v36, 0);
          LOWORD(v37) = v6[*(int *)(v58 + 4 * (v34 + 1))];
          if ((_WORD)v37)
          {
            int v38 = v34++;
          }
          else
          {
            uint64_t v39 = (int *)(v58 + 4 + 4 * (v34 + 1));
            do
            {
              sub_1003BA2A8(a1, v36 + 1, 0);
              v36 += 3;
              uint64_t v40 = *v39++;
              LOWORD(v37) = v6[v40];
              ++v34;
            }
            while (!(_WORD)v37);
            int v38 = v34++;
          }
          sub_1003BA2A8(a1, v36 + 1, 1);
          BOOL v41 = (__int16)v37 < 1;
          if ((v37 & 0x8000u) == 0) {
            int v37 = (__int16)v37;
          }
          else {
            int v37 = -(__int16)v37;
          }
          sub_1003BA2A8(a1, v30, v41);
          uint64_t v42 = v36 + 2;
          unsigned int v43 = v37 - 1;
          if (v37 == 1 || (sub_1003BA2A8(a1, v42, 1), v37 == 2))
          {
            sub_1003BA2A8(a1, v42, 0);
          }
          else
          {
            sub_1003BA2A8(a1, v42, 1);
            uint64_t v44 = *v35;
            uint64_t v45 = 217;
            if (v38 < *v55) {
              uint64_t v45 = 189;
            }
            uint64_t v46 = (unsigned char *)(v44 + v45);
            if (v43 >= 4)
            {
              int v48 = 2;
              int v49 = v37 - 1;
              do
              {
                sub_1003BA2A8(a1, v46, 1);
                v48 *= 2;
                ++v46;
                BOOL v50 = v49 >= 8;
                v49 >>= 1;
              }
              while (v50);
              sub_1003BA2A8(a1, v46, 0);
              uint64_t v30 = (unsigned char *)(v3 + 360);
              if (!v48) {
                goto LABEL_39;
              }
              uint64_t v47 = v46 + 14;
            }
            else
            {
              sub_1003BA2A8(a1, (unsigned char *)(v44 + v45), 0);
              uint64_t v47 = v46 + 14;
              int v48 = 2;
            }
            do
            {
              sub_1003BA2A8(a1, v47, ((v48 >> 1) & v43) != 0);
              BOOL v50 = v48 >= 4;
              v48 >>= 1;
            }
            while (v50);
          }
LABEL_39:
          if (v34 >= v57)
          {
            uint64_t v32 = v52;
            if (v34 < *(_DWORD *)(a1 + 472)) {
              goto LABEL_63;
            }
            goto LABEL_7;
          }
        }
      }
LABEL_60:
      int v34 = 0;
      if (v29 > 0) {
LABEL_63:
      }
        sub_1003BA2A8(a1, (unsigned char *)(*(void *)(v3 + 8 * v32 + 232) + 3 * v34), 1);
LABEL_7:
      uint64_t v5 = v54 + 1;
      if (v54 + 1 >= *(int *)(a1 + 400)) {
        return 1;
      }
    }
    *uint64_t v15 = v18;
    sub_1003BA2A8(a1, v17, 1);
    BOOL v20 = v19 <= 0;
    if (v19 <= 0) {
      uint64_t v21 = 3;
    }
    else {
      uint64_t v21 = 2;
    }
    if (v19 <= 0) {
      int v22 = 8;
    }
    else {
      int v22 = 4;
    }
    if (v19 <= 0) {
      int v19 = -v19;
    }
    sub_1003BA2A8(a1, v17 + 1, v20);
    int v23 = &v17[v21];
    int *v16 = v22;
    if (v19 == 1)
    {
      int v24 = 0;
    }
    else
    {
      int v24 = 1;
      sub_1003BA2A8(a1, v23, 1);
      int v23 = (unsigned char *)(*v12 + 20);
      if (v19 != 2)
      {
        unsigned int v25 = v19 - 1;
        do
        {
          sub_1003BA2A8(a1, v23, 1);
          v24 *= 2;
          ++v23;
          BOOL v26 = v25 > 3;
          v25 >>= 1;
        }
        while (v26);
      }
    }
    sub_1003BA2A8(a1, v23, 0);
    int v27 = 0;
    if (v24 >= (int)((unint64_t)(1 << *(unsigned char *)(a1 + v9 + 224)) >> 1))
    {
      if (v24 <= (int)((unint64_t)(1 << *(unsigned char *)(a1 + v9 + 240)) >> 1)) {
        goto LABEL_28;
      }
      int v27 = *v16 + 8;
    }
    int *v16 = v27;
LABEL_28:
    if (v24 >= 2)
    {
      int v28 = v23 + 14;
      do
      {
        sub_1003BA2A8(a1, v28, ((v24 >> 1) & (v19 - 1)) != 0);
        BOOL v26 = v24 > 3;
        v24 >>= 1;
      }
      while (v26);
    }
    goto LABEL_31;
  }
  return 1;
}

double sub_1003BA114(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 544);
  sub_1003B8E40(a1);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (unsigned char *)(*(void *)v5)++;
  *uint64_t v6 = -1;
  uint64_t v7 = *(void *)(v5 + 8) - 1;
  *(void *)(v5 + 8) = v7;
  if (!v7 && !(*(unsigned int (**)(uint64_t))(v5 + 24))(a1))
  {
    uint64_t v8 = *(void *)a1;
    *(_DWORD *)(v8 + 40) = 25;
    (*(void (**)(uint64_t))v8)(a1);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = (unsigned char *)(*(void *)v9)++;
  *uint64_t v10 = a2 - 48;
  uint64_t v11 = *(void *)(v9 + 8) - 1;
  *(void *)(v9 + 8) = v11;
  if (!v11 && !(*(unsigned int (**)(uint64_t))(v9 + 24))(a1))
  {
    uint64_t v12 = *(void *)a1;
    *(_DWORD *)(v12 + 40) = 25;
    (*(void (**)(uint64_t))v12)(a1);
  }
  if (*(int *)(a1 + 356) >= 1)
  {
    uint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)(a1 + 360 + 8 * v13);
      if (!*(_DWORD *)(a1 + 444) && !*(_DWORD *)(a1 + 452)) {
        break;
      }
      if (*(_DWORD *)(a1 + 448)) {
        goto LABEL_13;
      }
LABEL_9:
      if (++v13 >= *(int *)(a1 + 356)) {
        goto LABEL_16;
      }
    }
    unsigned int v16 = *(_OWORD **)(v4 + 8 * *(int *)(v14 + 20) + 104);
    v16[2] = 0uLL;
    v16[3] = 0uLL;
    _OWORD *v16 = 0uLL;
    v16[1] = 0uLL;
    uint64_t v17 = v4 + 4 * v13;
    *(_DWORD *)(v17 + 64) = 0;
    *(_DWORD *)(v17 + 80) = 0;
    if (!*(_DWORD *)(a1 + 448)) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t v15 = *(_OWORD **)(v4 + 8 * *(int *)(v14 + 24) + 232);
    v15[14] = 0uLL;
    v15[15] = 0uLL;
    v15[12] = 0uLL;
    v15[13] = 0uLL;
    v15[10] = 0uLL;
    v15[11] = 0uLL;
    v15[8] = 0uLL;
    v15[9] = 0uLL;
    v15[6] = 0uLL;
    v15[7] = 0uLL;
    v15[4] = 0uLL;
    v15[5] = 0uLL;
    v15[2] = 0uLL;
    _WORD v15[3] = 0uLL;
    *uint64_t v15 = 0uLL;
    v15[1] = 0uLL;
    goto LABEL_9;
  }
LABEL_16:
  *(_OWORD *)(v4 + 24) = xmmword_10040CDA0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  double result = NAN;
  *(void *)(v4 + 56) = -4294967285;
  return result;
}

uint64_t sub_1003BA2A8(uint64_t result, unsigned char *a2, int a3)
{
  uint64_t v3 = (uint64_t *)result;
  unsigned int v4 = *a2;
  uint64_t v5 = qword_10040C9E8[v4 & 0x7F];
  uint64_t v6 = *(void *)(result + 544);
  uint64_t v7 = v5 >> 16;
  uint64_t v8 = *(void *)(v6 + 32) - (v5 >> 16);
  *(void *)(v6 + 32) = v8;
  if (a3 != v4 >> 7)
  {
    if (v8 >= v7)
    {
      *(void *)(v6 + 24) += v8;
      *(void *)(v6 + 32) = v7;
    }
    char v9 = v5 ^ v4 & 0x80;
    goto LABEL_10;
  }
  if (v8 < 0x8000)
  {
    unsigned int v10 = v5 >> 8;
    if (v8 < v7)
    {
      *(void *)(v6 + 24) += v8;
      *(void *)(v6 + 32) = v7;
    }
    char v9 = v10 ^ v4 & 0x80;
LABEL_10:
    *a2 = v9;
    uint64_t v12 = *(void *)(v6 + 24);
    uint64_t v11 = *(void *)(v6 + 32);
    int v13 = *(_DWORD *)(v6 + 56);
    while (1)
    {
      v11 *= 2;
      v12 *= 2;
      *(void *)(v6 + 24) = v12;
      *(void *)(v6 + 32) = v11;
      *(_DWORD *)(v6 + 56) = --v13;
      if (v13) {
        goto LABEL_14;
      }
      if (v12 >= 0x8000000) {
        break;
      }
      if (v12 >> 19 == 255)
      {
        ++*(void *)(v6 + 40);
        goto LABEL_13;
      }
      int v21 = *(_DWORD *)(v6 + 60);
      if (v21)
      {
        if ((v21 & 0x80000000) == 0)
        {
          if (*(void *)(v6 + 48))
          {
            do
            {
              uint64_t v23 = v3[5];
              int v24 = (unsigned char *)(*(void *)v23)++;
              *int v24 = 0;
              uint64_t v25 = *(void *)(v23 + 8) - 1;
              *(void *)(v23 + 8) = v25;
              if (!v25)
              {
                double result = (*(uint64_t (**)(uint64_t *))(v23 + 24))(v3);
                if (!result)
                {
                  uint64_t v26 = *v3;
                  *(_DWORD *)(v26 + 40) = 25;
                  double result = (*(uint64_t (**)(uint64_t *))v26)(v3);
                }
              }
              uint64_t v22 = *(void *)(v6 + 48) - 1;
              *(void *)(v6 + 48) = v22;
            }
            while (v22);
            int v21 = *(_DWORD *)(v6 + 60);
          }
          uint64_t v34 = v3[5];
          uint64_t v35 = (unsigned char *)(*(void *)v34)++;
          *uint64_t v35 = v21;
          uint64_t v36 = *(void *)(v34 + 8) - 1;
          *(void *)(v34 + 8) = v36;
          if (!v36)
          {
            double result = (*(uint64_t (**)(uint64_t *))(v34 + 24))(v3);
            if (!result)
            {
              uint64_t v37 = *v3;
              *(_DWORD *)(v37 + 40) = 25;
              double result = (*(uint64_t (**)(uint64_t *))v37)(v3);
            }
          }
        }
      }
      else
      {
        ++*(void *)(v6 + 48);
      }
      if (*(void *)(v6 + 40))
      {
        if (*(void *)(v6 + 48))
        {
          do
          {
            uint64_t v39 = v3[5];
            uint64_t v40 = (unsigned char *)(*(void *)v39)++;
            unsigned char *v40 = 0;
            uint64_t v41 = *(void *)(v39 + 8) - 1;
            *(void *)(v39 + 8) = v41;
            if (!v41)
            {
              double result = (*(uint64_t (**)(uint64_t *))(v39 + 24))(v3);
              if (!result)
              {
                uint64_t v42 = *v3;
                *(_DWORD *)(v42 + 40) = 25;
                double result = (*(uint64_t (**)(uint64_t *))v42)(v3);
              }
            }
            uint64_t v38 = *(void *)(v6 + 48) - 1;
            *(void *)(v6 + 48) = v38;
          }
          while (v38);
        }
        do
        {
          uint64_t v44 = v3[5];
          uint64_t v45 = (unsigned char *)(*(void *)v44)++;
          *uint64_t v45 = -1;
          uint64_t v46 = *(void *)(v44 + 8) - 1;
          *(void *)(v44 + 8) = v46;
          if (!v46)
          {
            double result = (*(uint64_t (**)(uint64_t *))(v44 + 24))(v3);
            if (!result)
            {
              uint64_t v47 = *v3;
              *(_DWORD *)(v47 + 40) = 25;
              double result = (*(uint64_t (**)(uint64_t *))v47)(v3);
            }
          }
          uint64_t v48 = v3[5];
          int v49 = (unsigned char *)(*(void *)v48)++;
          *int v49 = 0;
          uint64_t v50 = *(void *)(v48 + 8) - 1;
          *(void *)(v48 + 8) = v50;
          if (!v50)
          {
            double result = (*(uint64_t (**)(uint64_t *))(v48 + 24))(v3);
            if (!result)
            {
              uint64_t v51 = *v3;
              *(_DWORD *)(v51 + 40) = 25;
              double result = (*(uint64_t (**)(uint64_t *))v51)(v3);
            }
          }
          uint64_t v43 = *(void *)(v6 + 40) - 1;
          *(void *)(v6 + 40) = v43;
        }
        while (v43);
      }
LABEL_12:
      *(_DWORD *)(v6 + 60) = (v12 >> 19);
LABEL_13:
      uint64_t v11 = *(void *)(v6 + 32);
      uint64_t v12 = *(void *)(v6 + 24) & 0x7FFFFLL;
      *(void *)(v6 + 24) = v12;
      int v13 = *(_DWORD *)(v6 + 56) + 8;
      *(_DWORD *)(v6 + 56) = v13;
LABEL_14:
      if (v11 >= 0x8000) {
        return result;
      }
    }
    int v15 = *(_DWORD *)(v6 + 60);
    if ((v15 & 0x80000000) == 0)
    {
      if (*(void *)(v6 + 48))
      {
        do
        {
          uint64_t v17 = v3[5];
          int v18 = (unsigned char *)(*(void *)v17)++;
          *int v18 = 0;
          uint64_t v19 = *(void *)(v17 + 8) - 1;
          *(void *)(v17 + 8) = v19;
          if (!v19)
          {
            double result = (*(uint64_t (**)(uint64_t *))(v17 + 24))(v3);
            if (!result)
            {
              uint64_t v20 = *v3;
              *(_DWORD *)(v20 + 40) = 25;
              double result = (*(uint64_t (**)(uint64_t *))v20)(v3);
            }
          }
          uint64_t v16 = *(void *)(v6 + 48) - 1;
          *(void *)(v6 + 48) = v16;
        }
        while (v16);
        int v15 = *(_DWORD *)(v6 + 60);
      }
      uint64_t v27 = v3[5];
      int v28 = (unsigned char *)(*(void *)v27)++;
      unsigned char *v28 = v15 + 1;
      uint64_t v29 = *(void *)(v27 + 8) - 1;
      *(void *)(v27 + 8) = v29;
      if (v29 || (double result = (*(uint64_t (**)(uint64_t *))(v27 + 24))(v3), result))
      {
        if (*(_DWORD *)(v6 + 60) == 254) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v52 = *v3;
        *(_DWORD *)(v52 + 40) = 25;
        double result = (*(uint64_t (**)(uint64_t *))v52)(v3);
        if (*(_DWORD *)(v6 + 60) == 254)
        {
LABEL_38:
          uint64_t v30 = v3[5];
          uint64_t v31 = (unsigned char *)(*(void *)v30)++;
          unsigned char *v31 = 0;
          uint64_t v32 = *(void *)(v30 + 8) - 1;
          *(void *)(v30 + 8) = v32;
          if (!v32)
          {
            double result = (*(uint64_t (**)(uint64_t *))(v30 + 24))(v3);
            if (!result)
            {
              uint64_t v33 = *v3;
              *(_DWORD *)(v33 + 40) = 25;
              double result = (*(uint64_t (**)(uint64_t *))v33)(v3);
            }
          }
        }
      }
    }
    uint64_t v14 = *(void *)(v6 + 48) + *(void *)(v6 + 40);
    *(void *)(v6 + 40) = 0;
    *(void *)(v6 + 48) = v14;
    goto LABEL_12;
  }
  return result;
}

uint64_t (**sub_1003BA6EC(uint64_t a1, int a2))(uint64_t result, int a2)
{
  double result = (uint64_t (**)(uint64_t, int))(**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v5 = result;
  *(void *)(a1 + 504) = result;
  *double result = sub_1003BA82C;
  if (a2)
  {
    if (*(int *)(a1 + 92) >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = result + 14;
      uint64_t v8 = (unsigned int *)(*(void *)(a1 + 104) + 28);
      do
      {
        char v9 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)(a1 + 8) + 40);
        uint64_t v10 = sub_1003EE800(*v8, (int)*(v8 - 5));
        uint64_t v11 = sub_1003EE800(v8[1], (int)*(v8 - 4));
        double result = (uint64_t (**)(uint64_t, int))v9(a1, 1, 0, v10, v11, *(v8 - 4));
        v7[v6++] = result;
        v8 += 24;
      }
      while (v6 < *(int *)(a1 + 92));
    }
  }
  else
  {
    double result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 1280);
    v5[4] = (uint64_t (*)(uint64_t, int))result;
    v5[5] = (uint64_t (*)(uint64_t, int))(result + 16);
    v5[6] = (uint64_t (*)(uint64_t, int))(result + 32);
    v5[7] = (uint64_t (*)(uint64_t, int))(result + 48);
    v5[8] = (uint64_t (*)(uint64_t, int))(result + 64);
    v5[9] = (uint64_t (*)(uint64_t, int))(result + 80);
    v5[10] = (uint64_t (*)(uint64_t, int))(result + 96);
    v5[11] = (uint64_t (*)(uint64_t, int))(result + 112);
    v5[12] = (uint64_t (*)(uint64_t, int))(result + 128);
    v5[13] = (uint64_t (*)(uint64_t, int))(result + 144);
    v5[14] = 0;
  }
  return result;
}

uint64_t sub_1003BA82C(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 504);
  *(_DWORD *)(v2 + 16) = 0;
  if (*(int *)(result + 356) < 2)
  {
    uint64_t v3 = *(void *)(result + 360);
    if (*(_DWORD *)(result + 352) == 1)
    {
      int v4 = *(_DWORD *)(v3 + 76);
      *(_DWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 28) = v4;
      *(_DWORD *)(v2 + 20) = 0;
      if (a2 != 3) {
        goto LABEL_6;
      }
    }
    else
    {
      int v6 = *(_DWORD *)(v3 + 12);
      *(_DWORD *)(v2 + 24) = 0;
      *(_DWORD *)(v2 + 28) = v6;
      *(_DWORD *)(v2 + 20) = 0;
      if (a2 != 3) {
        goto LABEL_6;
      }
    }
LABEL_12:
    if (!*(void *)(v2 + 112))
    {
      uint64_t v9 = *(void *)result;
      *(_DWORD *)(v9 + 40) = 3;
      double result = (*(uint64_t (**)(uint64_t))v9)(result);
    }
    *(void *)(v2 + 8) = sub_1003BACB4;
    return result;
  }
  *(_DWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 28) = 1;
  *(_DWORD *)(v2 + 20) = 0;
  if (a2 == 3) {
    goto LABEL_12;
  }
LABEL_6:
  if (a2 == 2)
  {
    if (!*(void *)(v2 + 112))
    {
      uint64_t v10 = *(void *)result;
      *(_DWORD *)(v10 + 40) = 3;
      double result = (*(uint64_t (**)(uint64_t))v10)(result);
    }
    *(void *)(v2 + 8) = sub_1003BB0D4;
  }
  else if (a2)
  {
    uint64_t v7 = *(void *)result;
    *(_DWORD *)(v7 + 40) = 3;
    uint64_t v8 = *(uint64_t (**)(void))v7;
    return v8();
  }
  else
  {
    if (*(void *)(v2 + 112))
    {
      uint64_t v5 = *(void *)result;
      *(_DWORD *)(v5 + 40) = 3;
      double result = (*(uint64_t (**)(uint64_t))v5)(result);
    }
    *(void *)(v2 + 8) = sub_1003BA9B8;
  }
  return result;
}

uint64_t sub_1003BA9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 504);
  int v4 = v3[7];
  uint64_t v5 = v3;
  int v33 = v3[6];
  if (v33 >= v4)
  {
LABEL_30:
    ++v3[4];
    if (*(int *)(a1 + 356) < 2)
    {
      uint64_t v28 = *(void *)(a1 + 360);
      if (v5[4] >= (*(_DWORD *)(a1 + 352) - 1)) {
        int v27 = *(_DWORD *)(v28 + 76);
      }
      else {
        int v27 = *(_DWORD *)(v28 + 12);
      }
    }
    else
    {
      int v27 = 1;
    }
    v5[6] = 0;
    v5[7] = v27;
    v5[5] = 0;
    return 1;
  }
  else
  {
    unsigned int v30 = *(_DWORD *)(a1 + 392) - 1;
    unsigned int v6 = *(_DWORD *)(a1 + 352) - 1;
    uint64_t v32 = v3 + 8;
    unsigned int v7 = v3[5];
    while (v7 > v30)
    {
LABEL_3:
      unsigned int v7 = 0;
      v3[5] = 0;
      if (++v33 >= v4)
      {
        uint64_t v5 = *(_DWORD **)(a1 + 504);
        goto LABEL_30;
      }
    }
    while (1)
    {
      int v8 = *(_DWORD *)(a1 + 356);
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        int v10 = 0;
        unsigned int v29 = v7;
        do
        {
          uint64_t v11 = *(int **)(a1 + 8 * v9 + 360);
          uint64_t v12 = 18;
          if (v7 < v30) {
            uint64_t v12 = 14;
          }
          if (v11[15] >= 1)
          {
            int v13 = 0;
            uint64_t v14 = v11[v12];
            int v15 = *(void (**)(uint64_t, int *, void, void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 536) + 8 * v11[1] + 8);
            uint64_t v16 = v11[17] * v7;
            uint64_t v17 = (v11[10] * v33);
            uint64_t v31 = v9;
            do
            {
              if (v3[4] >= v6 && v13 + v33 >= v11[19])
              {
                bzero(*(void **)&v3[2 * v10 + 8], (uint64_t)v11[14] << 7);
                int v18 = v11[14];
                if (v18 >= 1)
                {
                  uint64_t v21 = 2 * v10;
                  uint64_t v22 = *(_WORD **)&v3[v21 + 6];
                  uint64_t v23 = (_WORD **)&v32[v21];
                  uint64_t v24 = v11[14];
                  do
                  {
                    uint64_t v25 = *v23++;
                    _WORD *v25 = *v22;
                    --v24;
                  }
                  while (v24);
                }
              }
              else
              {
                v15(a1, v11, *(void *)(a2 + 8 * v11[1]), *(void *)&v3[2 * v10 + 8], v17, v16, v14);
                int v18 = v11[14];
                if (v18 > (int)v14)
                {
                  bzero(*(void **)&v3[2 * v10 + 8 + 2 * (int)v14], (uint64_t)(v18 - (int)v14) << 7);
                  int v18 = v11[14];
                  if ((int)v14 < v18)
                  {
                    uint64_t v19 = (_WORD **)&v32[2 * v14 + 2 * v10];
                    uint64_t v20 = v18 - v14;
                    do
                    {
                      **uint64_t v19 = **(v19 - 1);
                      ++v19;
                      --v20;
                    }
                    while (v20);
                  }
                }
              }
              v10 += v18;
              uint64_t v17 = (v11[10] + v17);
              ++v13;
            }
            while (v13 < v11[15]);
            int v8 = *(_DWORD *)(a1 + 356);
            unsigned int v7 = v29;
            uint64_t v9 = v31;
          }
          ++v9;
        }
        while (v9 < v8);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)(a1 + 544) + 8))(a1, v32);
      if (!result) {
        break;
      }
      if (++v7 > v30)
      {
        int v4 = v3[7];
        goto LABEL_3;
      }
    }
    v3[5] = v7;
    v3[6] = v33;
  }
  return result;
}