uint64_t sub_1003BACB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  size_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  char *v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v47;
  uint64_t v48;
  int v49;
  size_t v50;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t vars8;

  v1 = a1;
  if (*(int *)(a1 + 92) >= 1)
  {
    v2 = 0;
    v48 = *(void *)(a1 + 504);
    v47 = *(_DWORD *)(a1 + 352) - 1;
    v3 = *(_DWORD **)(a1 + 104);
    do
    {
      v53 = v2;
      v4 = (*(uint64_t (**)(uint64_t, void, void, void, uint64_t))(*(void *)(v1 + 8) + 64))(v1, *(void *)(v48 + 8 * v2 + 112), (v3[3] * *(_DWORD *)(v48 + 16)), v3[3], 1);
      v5 = v4;
      if (*(_DWORD *)(v48 + 16) >= v47)
      {
        v7 = v3[3];
        if (v3[8] % v7) {
          v6 = v3[8] % v7;
        }
        else {
          v6 = v3[3];
        }
      }
      else
      {
        v6 = v3[3];
      }
      v8 = v3[7];
      v54 = v3;
      v9 = (int)v3[2];
      if ((int)(v8 % v9) <= 0) {
        v10 = v8 % v9;
      }
      else {
        v10 = v9 - v8 % v9;
      }
      v49 = v6;
      v52 = v4;
      if (v6 >= 1)
      {
        v11 = *(void (**)(uint64_t))(*(void *)(v1 + 536) + 8 * v2 + 8);
        if ((int)v10 > 0)
        {
          v12 = 0;
          v13 = v8 << 7;
          while (1)
          {
            v14 = *(void *)(v5 + 8 * v12);
            v11(v1);
            bzero((void *)(v14 + (v8 << 7)), (unint64_t)v10 << 7);
            v15 = *(_WORD *)(v14 + (v8 << 7) - 128);
            if (v10 == 1)
            {
              v16 = 0;
              v1 = a1;
            }
            else
            {
              v17 = (_WORD *)(v14 + v13 + 128);
              v18 = v10 & 0xFFFFFFFE;
              do
              {
                *(v17 - 64) = v15;
                *v17 = v15;
                v17 += 128;
                v18 -= 2;
              }
              while (v18);
              v16 = v10 & 0xFFFFFFFE;
              v1 = a1;
              if (v16 == v10) {
                goto LABEL_15;
              }
            }
            v19 = (_WORD *)(v14 + v13 + (v16 << 7));
            v20 = v10 - v16;
            do
            {
              *v19 = v15;
              v19 += 64;
              --v20;
            }
            while (v20);
LABEL_15:
            ++v12;
            v5 = v52;
            if (v12 == v49) {
              goto LABEL_26;
            }
          }
        }
        v21 = 0;
        do
        {
          v11(v1);
          ++v21;
        }
        while (v49 != v21);
      }
LABEL_26:
      v22 = v54;
      if (*(_DWORD *)(v48 + 16) == v47 && v49 < v54[3])
      {
        v23 = (unint64_t)(v10 + v8) << 7;
        v24 = v49;
        if (v9 > (int)v10 + (int)v8)
        {
          do
            bzero(*(void **)(v52 + 8 * v24++), (unint64_t)(v10 + v8) << 7);
          while (v24 < (int)v54[3]);
        }
        else
        {
          if (((int)v10 + (int)v8) / v9 <= 1) {
            v25 = 1;
          }
          else {
            v25 = ((int)v10 + (int)v8) / v9;
          }
          if ((int)v9 <= 0)
          {
            do
              bzero(*(void **)(v52 + 8 * v24++), (unint64_t)(v10 + v8) << 7);
            while (v24 < (int)v54[3]);
          }
          else
          {
            v26 = ((unint64_t)v9 << 7) & 0x7FFFFFFF00;
            v27 = v9 << 7;
            v50 = v23;
            v28 = (v9 - 1) << 7;
            v29 = v52;
            do
            {
              v30 = (void **)(v29 + 8 * v24);
              v31 = v23;
              v32 = (uint64_t)*(v30 - 1);
              v33 = (char *)*v30;
              bzero(*v30, v31);
              if (v9 > 1)
              {
                if (v9 == (unint64_t)(v9 & 0xFFFFFFFE))
                {
                  v36 = 0;
                  do
                  {
                    v37 = 0;
                    v38 = *(_WORD *)(v32 + v28);
                    do
                    {
                      v39 = &v33[v37];
                      *(_WORD *)v39 = v38;
                      *((_WORD *)v39 + 64) = v38;
                      v37 += 256;
                    }
                    while (v26 != v37);
                    v32 += v9 << 7;
                    ++v36;
                    v33 += v27;
                  }
                  while (v36 != v25);
                }
                else
                {
                  v40 = 0;
                  do
                  {
                    v41 = 0;
                    v42 = *(_WORD *)(v32 + v28);
                    do
                    {
                      v43 = &v33[v41];
                      *(_WORD *)v43 = v42;
                      *((_WORD *)v43 + 64) = v42;
                      v41 += 256;
                    }
                    while (v26 != v41);
                    v44 = ((unint64_t)v9 << 7) & 0x7FFFFFFF00;
                    v45 = v9 - (unint64_t)(v9 & 0xFFFFFFFE);
                    do
                    {
                      *(_WORD *)&v33[v44] = v42;
                      v44 += 128;
                      --v45;
                    }
                    while (v45);
                    v32 += v9 << 7;
                    ++v40;
                    v33 += v27;
                  }
                  while (v40 != v25);
                }
              }
              else
              {
                v34 = 0;
                v35 = v25;
                do
                {
                  *(_WORD *)&v33[v34] = *(_WORD *)(v32 + v28 + v34);
                  v34 += v27;
                  --v35;
                }
                while (v35);
              }
              ++v24;
              v22 = v54;
              v29 = v52;
              v23 = v50;
            }
            while (v24 < (int)v54[3]);
          }
        }
      }
      v2 = v53 + 1;
      v3 = v22 + 24;
      v1 = a1;
    }
    while (v53 + 1 < *(int *)(a1 + 92));
  }

  return sub_1003BB0D4(v1);
}

uint64_t sub_1003BB0D4(uint64_t a1)
{
  v2 = *(_DWORD **)(a1 + 504);
  memset(v42, 0, sizeof(v42));
  LODWORD(v3) = *(_DWORD *)(a1 + 356);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      *((void *)v42 + v4) = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)(a1 + 8)
                                                                                                 + 64))(a1, *(void *)&v2[2 * *(int *)(*(void *)(a1 + 8 * v4 + 360) + 4) + 28], (*(_DWORD *)(*(void *)(a1 + 8 * v4 + 360) + 12) * v2[4]), *(unsigned int *)(*(void *)(a1 + 8 * v4 + 360) + 12), 0);
      ++v4;
      uint64_t v3 = *(int *)(a1 + 356);
    }
    while (v4 < v3);
  }
  int v5 = v2[7];
  uint64_t v6 = (int)v2[6];
  if ((int)v6 >= v5)
  {
LABEL_37:
    ++v2[4];
    v39 = *(_DWORD **)(a1 + 504);
    if ((int)v3 < 2)
    {
      uint64_t v41 = *(void *)(a1 + 360);
      if (v39[4] >= (*(_DWORD *)(a1 + 352) - 1)) {
        int v40 = *(_DWORD *)(v41 + 76);
      }
      else {
        int v40 = *(_DWORD *)(v41 + 12);
      }
    }
    else
    {
      int v40 = 1;
    }
    v39[6] = 0;
    v39[7] = v40;
    v39[5] = 0;
    return 1;
  }
  else
  {
    unsigned int v7 = v2[5];
    unsigned int v8 = *(_DWORD *)(a1 + 392);
    v9 = v2 + 12;
    uint64_t v10 = 8 * v6;
    int64x2_t v11 = (int64x2_t)xmmword_10040CDC0;
    int64x2_t v12 = (int64x2_t)xmmword_10040CDD0;
    while (v7 >= v8)
    {
LABEL_6:
      unsigned int v7 = 0;
      v2[5] = 0;
      ++v6;
      v10 += 8;
      if (v6 >= v5)
      {
        LODWORD(v3) = *(_DWORD *)(a1 + 356);
        goto LABEL_37;
      }
    }
    while (1)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 356);
      if ((int)v13 >= 1)
      {
        uint64_t v14 = 0;
        int v15 = 0;
        do
        {
          uint64_t v16 = *(void *)(a1 + 8 * v14 + 360);
          uint64_t v17 = *(unsigned int *)(v16 + 60);
          if ((int)v17 >= 1)
          {
            unint64_t v18 = *(unsigned int *)(v16 + 56);
            if ((int)v18 >= 1)
            {
              uint64_t v19 = v18 * v7;
              uint64_t v20 = *((void *)v42 + v14);
              if (v18 > 3)
              {
                if ((v18 & 0xFFFFFFFC) == v18)
                {
                  for (uint64_t i = 0; i != v17; ++i)
                  {
                    v25 = (int64x2_t *)&v9[2 * v15];
                    unint64_t v26 = *(void *)(v20 + 8 * (i + v6)) + (v19 << 7);
                    v15 += v18;
                    uint64_t v27 = v18 & 0xFFFFFFFC;
                    do
                    {
                      int64x2_t v28 = vdupq_n_s64(v26);
                      v25[-1] = vaddq_s64(v28, v11);
                      int64x2_t *v25 = vaddq_s64(v28, v12);
                      v26 += 512;
                      v25 += 2;
                      v27 -= 4;
                    }
                    while (v27);
                  }
                }
                else
                {
                  for (uint64_t j = 0; j != v17; ++j)
                  {
                    uint64_t v30 = 2 * v15;
                    v31 = (unint64_t *)&v2[8 * (v18 >> 2) + 8 + v30];
                    v32 = (int64x2_t *)&v9[v30];
                    unint64_t v33 = *(void *)(v20 + 8 * (j + v6)) + (v19 << 7);
                    v15 += v18;
                    unint64_t v34 = v33 + ((unint64_t)(v18 & 0xFFFFFFFC) << 7);
                    uint64_t v35 = v18 & 0xFFFFFFFC;
                    do
                    {
                      int64x2_t v36 = vdupq_n_s64(v33);
                      v32[-1] = vaddq_s64(v36, v11);
                      int64x2_t *v32 = vaddq_s64(v36, v12);
                      v33 += 512;
                      v32 += 2;
                      v35 -= 4;
                    }
                    while (v35);
                    int v37 = v18 - 4 * (v18 >> 2);
                    do
                    {
                      *v31++ = v34;
                      v34 += 128;
                      --v37;
                    }
                    while (v37);
                  }
                }
              }
              else
              {
                v21 = (void *)(v20 + v10);
                do
                {
                  uint64_t v22 = *v21 + (v19 << 7);
                  uint64_t v23 = v15 + 1;
                  *(void *)&v2[2 * v15 + 8] = v22;
                  if (v18 + v15 != v23)
                  {
                    *(void *)&v2[2 * v23 + 8] = v22 + 128;
                    if (v18 + v15 != v15 + 2) {
                      *(void *)&v2[2 * v15 + 12] = v22 + 256;
                    }
                  }
                  ++v21;
                  v15 += v18;
                  --v17;
                }
                while (v17);
              }
            }
          }
          ++v14;
        }
        while (v14 != v13);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)(a1 + 544) + 8))(a1, v2 + 8);
      if (!result) {
        break;
      }
      ++v7;
      unsigned int v8 = *(_DWORD *)(a1 + 392);
      int64x2_t v12 = (int64x2_t)xmmword_10040CDD0;
      int64x2_t v11 = (int64x2_t)xmmword_10040CDC0;
      if (v7 >= v8)
      {
        int v5 = v2[7];
        goto LABEL_6;
      }
    }
    v2[5] = v7;
    v2[6] = v6;
  }
  return result;
}

void *sub_1003BB42C(uint64_t *a1)
{
  uint64_t result = (void *)(*(uint64_t (**)(void))a1[1])();
  uint64_t v3 = result;
  a1[65] = (uint64_t)result;
  *uint64_t result = nullsub_101;
  switch(*((_DWORD *)a1 + 15))
  {
    case 1:
      if (*((_DWORD *)a1 + 14) != 1) {
        goto LABEL_3;
      }
      break;
    case 2:
    case 3:
    case 6:
    case 7:
      if (*((_DWORD *)a1 + 14) != 3) {
        goto LABEL_3;
      }
      break;
    case 4:
    case 5:
      if (*((_DWORD *)a1 + 14) != 4) {
        goto LABEL_3;
      }
      break;
    default:
      if (*((int *)a1 + 14) <= 0)
      {
LABEL_3:
        uint64_t v4 = *a1;
        *(_DWORD *)(v4 + 40) = 10;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v4)(a1);
      }
      break;
  }
  if (*((_DWORD *)a1 + 81) && (*((_DWORD *)a1 + 24) | 4) != 6)
  {
    uint64_t v9 = *a1;
    *(_DWORD *)(v9 + 40) = 28;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v9)(a1);
    int v5 = *((_DWORD *)a1 + 24);
    int v6 = v5 - 1;
    if ((v5 - 1) > 6)
    {
LABEL_17:
      if (v5 != *((_DWORD *)a1 + 15) || *((_DWORD *)a1 + 23) != *((_DWORD *)a1 + 14))
      {
        uint64_t v10 = *a1;
        *(_DWORD *)(v10 + 40) = 28;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v10)(a1);
      }
LABEL_20:
      v3[1] = sub_1003BC1C4;
      return result;
    }
  }
  else
  {
    int v5 = *((_DWORD *)a1 + 24);
    int v6 = v5 - 1;
  }
  switch(v6)
  {
    case 0:
      if (*((_DWORD *)a1 + 23) != 1)
      {
        uint64_t v11 = *a1;
        *(_DWORD *)(v11 + 40) = 11;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v11)(a1);
      }
      switch(*((_DWORD *)a1 + 15))
      {
        case 1:
        case 3:
        case 7:
          v3[1] = sub_1003BB8CC;
          break;
        case 2:
          *uint64_t v3 = sub_1003BB920;
          v3[1] = sub_1003BB9EC;
          break;
        default:
          goto LABEL_50;
      }
      return result;
    case 1:
    case 5:
      if (*((_DWORD *)a1 + 23) != 3)
      {
        uint64_t v7 = *a1;
        *(_DWORD *)(v7 + 40) = 11;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v7)(a1);
        int v5 = *((_DWORD *)a1 + 24);
      }
      if (*((_DWORD *)a1 + 15) != v5) {
        goto LABEL_50;
      }
      int v8 = *((_DWORD *)a1 + 81);
      if (v8 == 1)
      {
        v3[1] = sub_1003BBD70;
      }
      else
      {
        if (v8) {
          goto LABEL_50;
        }
        v3[1] = sub_1003BBA6C;
      }
      break;
    case 2:
      if (*((_DWORD *)a1 + 23) != 3)
      {
        uint64_t v12 = *a1;
        *(_DWORD *)(v12 + 40) = 11;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v12)(a1);
      }
      int v13 = *((_DWORD *)a1 + 15);
      if (v13 == 3) {
        goto LABEL_20;
      }
      if (v13 != 2) {
        goto LABEL_50;
      }
      goto LABEL_49;
    case 3:
      if (*((_DWORD *)a1 + 23) != 4)
      {
        uint64_t v14 = *a1;
        *(_DWORD *)(v14 + 40) = 11;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v14)(a1);
      }
      if (*((_DWORD *)a1 + 15) == 4) {
        goto LABEL_20;
      }
      goto LABEL_50;
    case 4:
      if (*((_DWORD *)a1 + 23) != 4)
      {
        uint64_t v15 = *a1;
        *(_DWORD *)(v15 + 40) = 11;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v15)(a1);
      }
      int v16 = *((_DWORD *)a1 + 15);
      if (v16 == 5) {
        goto LABEL_20;
      }
      if (v16 != 4) {
        goto LABEL_50;
      }
      *uint64_t v3 = sub_1003BB920;
      v3[1] = sub_1003BC238;
      return result;
    case 6:
      if (*((_DWORD *)a1 + 23) != 3)
      {
        uint64_t v17 = *a1;
        *(_DWORD *)(v17 + 40) = 11;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v17)(a1);
      }
      int v18 = *((_DWORD *)a1 + 15);
      switch(v18)
      {
        case 7:
          goto LABEL_20;
        case 3:
          uint64_t v22 = a1[13];
          *(unsigned char *)(v22 + 148) = 1;
          *(unsigned char *)(v22 + 244) = 1;
          v3[1] = sub_1003BC1C4;
          break;
        case 2:
          uint64_t v19 = a1[13];
          *(unsigned char *)(v19 + 148) = 1;
          *(unsigned char *)(v19 + 244) = 1;
LABEL_49:
          *uint64_t v3 = sub_1003BB920;
          v3[1] = sub_1003BC0F8;
          break;
        default:
LABEL_50:
          uint64_t v20 = *a1;
          *(_DWORD *)(v20 + 40) = 28;
          v21 = *(uint64_t (**)(uint64_t *))v20;
          uint64_t result = (void *)v21(a1);
          break;
      }
      break;
    default:
      goto LABEL_17;
  }
  return result;
}

uint64_t sub_1003BB8CC(uint64_t result, unsigned char **a2, void *a3, unsigned int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 48);
    if (v5)
    {
      uint64_t v6 = *(int *)(result + 56);
      do
      {
        uint64_t v7 = *a2;
        int v8 = *(unsigned char **)(*a3 + 8 * a4);
        uint64_t v9 = v5;
        do
        {
          *v8++ = *v7;
          v7 += v6;
          --v9;
        }
        while (v9);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

void *sub_1003BB920(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 520);
  uint64_t result = (void *)(**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  *(void *)(v1 + 16) = result;
  uint64_t v10 = 0x8000;
  do
  {
    *uint64_t result = v8;
    result[256] = v5;
    result[512] = v10;
    uint64_t v11 = v9 + 8421375;
    v9 += 0x8000;
    result[1792] = v7;
    v8 += 19595;
    v7 -= 5329;
    result[768] = v3;
    result[1024] = v4;
    result[1280] = v11;
    result[1536] = v6;
    ++result;
    v6 -= 27439;
    v5 += 38470;
    v10 += 7471;
    v4 -= 21710;
    v3 -= 11058;
  }
  while (v9 != 0x800000);
  return result;
}

uint64_t sub_1003BB9EC(uint64_t result, unsigned __int8 **a2, void *a3, unsigned int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 48);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(result + 520) + 16);
      do
      {
        uint64_t v7 = *a2;
        uint64_t v8 = *(unsigned char **)(*a3 + 8 * a4);
        uint64_t v9 = v5;
        do
        {
          *v8++ = (*(_DWORD *)(v6 + 8 * v7[1] + 2048)
                 + *(void *)(v6 + 8 * *v7)
                 + *(_DWORD *)(v6 + 8 * v7[2] + 4096)) >> 16;
          v7 += 3;
          --v9;
        }
        while (v9);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

int8x16_t *sub_1003BBA6C(int8x16_t *result, const char **a2, void *a3, unsigned int a4, int a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v5 = result[3].u32[0];
  if (!v5) {
    return result;
  }
  if (v5 >= 8)
  {
    while (1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = (int8x16_t *)*a2;
      uint64_t v15 = 8 * a4;
      uint64_t result = *(int8x16_t **)(*a3 + v15);
      int v16 = *(int8x16_t **)(a3[1] + v15);
      uint64_t v17 = *(int8x16_t **)(a3[2] + v15);
      int v18 = (int8x16_t *)((char *)result + v5);
      unint64_t v19 = (unint64_t)v16->u64 + v5;
      unint64_t v20 = (unint64_t)v17->u64 + v5;
      unint64_t v21 = (unint64_t)&(*a2)[3 * v5];
      BOOL v23 = result < (int8x16_t *)&v17->i8[v5] && v17 < v18;
      BOOL v25 = (unint64_t)result < v21 && v14 < v18;
      BOOL v27 = (unint64_t)v16 < v20 && (unint64_t)v17 < v19;
      BOOL v29 = (unint64_t)v16 < v21 && (unint64_t)v14 < v19;
      BOOL v31 = (unint64_t)v17 < v21 && (unint64_t)v14 < v20;
      BOOL v32 = v16 >= v18 || (unint64_t)result >= v19;
      if (!v32 || v23 || v25 || v27 || v29 || v31)
      {
        unint64_t v34 = (__int8 *)*a2;
      }
      else
      {
        if (v5 < 0x20)
        {
          uint64_t v33 = 0;
LABEL_62:
          unint64_t v34 = &v14->i8[3 * (v5 & 0xFFFFFFF8)];
          uint64_t v41 = (int8x8_t *)&result->i8[v33];
          v42 = (int8x8_t *)&v16->i8[v33];
          v43 = (int8x8_t *)&v17->i8[v33];
          v44 = &v14->i8[3 * v33];
          uint64_t v45 = v33 - (v5 & 0xFFFFFFF8);
          do
          {
            int8x8x3_t v49 = vld3_s8(v44);
            v44 += 24;
            *v41++ = v49.val[0];
            *v42++ = v49.val[1];
            *v43++ = v49.val[2];
            v45 += 8;
          }
          while (v45);
          uint64_t v13 = v5 & 0xFFFFFFF8;
          if (v13 == v5) {
            goto LABEL_14;
          }
          goto LABEL_67;
        }
        uint64_t v35 = result + 1;
        int64x2_t v36 = v16 + 1;
        int v37 = v17 + 1;
        v38 = *a2;
        uint64_t v39 = v5 & 0xFFFFFFE0;
        do
        {
          int v40 = v38;
          v38 += 96;
          int8x16x3_t v50 = vld3q_s8(v40);
          v40 += 48;
          int8x16x3_t v51 = vld3q_s8(v40);
          v35[-1] = v50.val[0];
          *uint64_t v35 = v51.val[0];
          v36[-1] = v50.val[1];
          *int64x2_t v36 = v51.val[1];
          v37[-1] = v50.val[2];
          *int v37 = v51.val[2];
          v35 += 2;
          v36 += 2;
          v37 += 2;
          v39 -= 32;
        }
        while (v39);
        if ((v5 & 0xFFFFFFE0) == v5) {
          goto LABEL_14;
        }
        uint64_t v33 = v5 & 0xFFFFFFE0;
        if ((v5 & 0x18) != 0) {
          goto LABEL_62;
        }
        unint64_t v34 = &v14->i8[3 * (v5 & 0xFFFFFFE0)];
        uint64_t v13 = v5 & 0xFFFFFFE0;
      }
LABEL_67:
      uint64_t result = (int8x16_t *)((char *)result + v13);
      v46 = &v16->i8[v13];
      v47 = &v17->i8[v13];
      uint64_t v48 = v5 - v13;
      do
      {
        result->i8[0] = *v34;
        uint64_t result = (int8x16_t *)((char *)result + 1);
        *v46++ = v34[1];
        *v47++ = v34[2];
        v34 += 3;
        --v48;
      }
      while (v48);
LABEL_14:
      ++a2;
      ++a4;
      if (a5-- <= 1) {
        return result;
      }
    }
  }
  int v6 = a5 + 1;
  do
  {
    uint64_t v7 = 8 * a4;
    uint64_t v8 = *(char **)(*a3 + v7);
    uint64_t v9 = *(unsigned char **)(a3[1] + v7);
    uint64_t v10 = *(unsigned char **)(a3[2] + v7);
    uint64_t v11 = *a2;
    *uint64_t v8 = **a2;
    unsigned char *v9 = v11[1];
    *uint64_t v10 = v11[2];
    if (v5 != 1)
    {
      v8[1] = v11[3];
      v9[1] = v11[4];
      v10[1] = v11[5];
      if (v5 != 2)
      {
        v8[2] = v11[6];
        v9[2] = v11[7];
        v10[2] = v11[8];
        if (v5 != 3)
        {
          v8[3] = v11[9];
          v9[3] = v11[10];
          v10[3] = v11[11];
          if (v5 != 4)
          {
            v8[4] = v11[12];
            v9[4] = v11[13];
            v10[4] = v11[14];
            if (v5 != 5)
            {
              v8[5] = v11[15];
              v9[5] = v11[16];
              v10[5] = v11[17];
              if (v5 != 6)
              {
                v8[6] = v11[18];
                v9[6] = v11[19];
                v10[6] = v11[20];
              }
            }
          }
        }
      }
    }
    ++a2;
    ++a4;
    --v6;
  }
  while (v6 > 1);
  return result;
}

const char *sub_1003BBD70(const char *result, const char **a2, void *a3, unsigned int a4, int a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v5 = *((unsigned int *)result + 12);
  if (!v5) {
    return result;
  }
  if (v5 >= 8)
  {
    v27.i64[0] = 0x8080808080808080;
    v27.i64[1] = 0x8080808080808080;
    while (1)
    {
      uint64_t v29 = 0;
      uint64_t result = *a2;
      uint64_t v30 = 8 * a4;
      BOOL v31 = *(int8x16_t **)(*a3 + v30);
      BOOL v32 = *(int8x16_t **)(a3[1] + v30);
      uint64_t v33 = *(int8x16_t **)(a3[2] + v30);
      unint64_t v34 = (int8x16_t *)((char *)v31 + v5);
      uint64_t v35 = (int8x16_t *)((char *)v32 + v5);
      int64x2_t v36 = (int8x16_t *)((char *)v33 + v5);
      unint64_t v37 = (unint64_t)&(*a2)[3 * v5];
      BOOL v39 = v31 < (int8x16_t *)&v33->i8[v5] && v33 < v34;
      BOOL v41 = (unint64_t)v31 < v37 && result < (const char *)v34;
      BOOL v43 = v32 < v36 && v33 < v35;
      BOOL v45 = (unint64_t)v32 < v37 && result < (const char *)v35;
      BOOL v47 = (unint64_t)v33 < v37 && result < (const char *)v36;
      BOOL v48 = v32 >= v34 || v31 >= v35;
      if (!v48 || v39 || v41 || v43 || v45 || v47)
      {
        int8x16x3_t v50 = *a2;
      }
      else
      {
        if (v5 < 0x10)
        {
          uint64_t v49 = 0;
LABEL_63:
          int8x16x3_t v50 = &result[3 * (v5 & 0xFFFFFFF8)];
          v56 = (int8x8_t *)&v31->i8[v49];
          v57 = (int8x8_t *)&v32->i8[v49];
          v58 = (int8x8_t *)&v33->i8[v49];
          result += 3 * v49;
          uint64_t v59 = v49 - (v5 & 0xFFFFFFF8);
          do
          {
            int8x8x3_t v65 = vld3_s8(result);
            result += 24;
            *v56++ = veor_s8(vsub_s8(v65.val[0], v65.val[1]), (int8x8_t)0x8080808080808080);
            *v57++ = v65.val[1];
            *v58++ = veor_s8(vsub_s8(v65.val[2], v65.val[1]), (int8x8_t)0x8080808080808080);
            v59 += 8;
          }
          while (v59);
          uint64_t v29 = v5 & 0xFFFFFFF8;
          if (v29 == v5) {
            goto LABEL_14;
          }
          goto LABEL_66;
        }
        uint64_t v51 = v5 & 0xFFFFFFF0;
        v52 = *a2;
        v53 = v33;
        v54 = v32;
        v55 = v31;
        do
        {
          int8x16x3_t v66 = vld3q_s8(v52);
          v52 += 48;
          *v55++ = veorq_s8(vsubq_s8(v66.val[0], v66.val[1]), v27);
          *v54++ = v66.val[1];
          *v53++ = veorq_s8(vsubq_s8(v66.val[2], v66.val[1]), v27);
          v51 -= 16;
        }
        while (v51);
        if ((v5 & 0xFFFFFFF0) == v5) {
          goto LABEL_14;
        }
        uint64_t v49 = v5 & 0xFFFFFFF0;
        if ((v5 & 8) != 0) {
          goto LABEL_63;
        }
        int8x16x3_t v50 = &result[3 * (v5 & 0xFFFFFFF0)];
        uint64_t v29 = v5 & 0xFFFFFFF0;
      }
LABEL_66:
      v60 = &v31->i8[v29];
      v61 = &v32->i8[v29];
      v62 = &v33->i8[v29];
      uint64_t result = (const char *)(v5 - v29);
      do
      {
        __int8 v63 = v50[1];
        char v64 = v50[2];
        *v60++ = (*v50 - v63) ^ 0x80;
        *v61++ = v63;
        *v62++ = (v64 - v63) ^ 0x80;
        v50 += 3;
        --result;
      }
      while (result);
LABEL_14:
      ++a2;
      ++a4;
      if (a5-- <= 1) {
        return result;
      }
    }
  }
  int v6 = a5 + 1;
  do
  {
    uint64_t v7 = 8 * a4;
    uint64_t v8 = *(unsigned char **)(*a3 + v7);
    uint64_t v9 = *(char **)(a3[1] + v7);
    uint64_t v10 = *(unsigned char **)(a3[2] + v7);
    uint64_t v11 = *a2;
    char v12 = (*a2)[1];
    char v13 = (*a2)[2];
    *uint64_t v8 = (**a2 - v12) ^ 0x80;
    char *v9 = v12;
    *uint64_t v10 = (v13 - v12) ^ 0x80;
    if (v5 != 1)
    {
      char v14 = v11[4];
      char v15 = v11[5];
      v8[1] = (v11[3] - v14) ^ 0x80;
      v9[1] = v14;
      v10[1] = (v15 - v14) ^ 0x80;
      if (v5 != 2)
      {
        char v16 = v11[7];
        char v17 = v11[8];
        v8[2] = (v11[6] - v16) ^ 0x80;
        v9[2] = v16;
        v10[2] = (v17 - v16) ^ 0x80;
        if (v5 != 3)
        {
          char v18 = v11[10];
          char v19 = v11[11];
          v8[3] = (v11[9] - v18) ^ 0x80;
          v9[3] = v18;
          v10[3] = (v19 - v18) ^ 0x80;
          if (v5 != 4)
          {
            char v20 = v11[13];
            char v21 = v11[14];
            v8[4] = (v11[12] - v20) ^ 0x80;
            v9[4] = v20;
            v10[4] = (v21 - v20) ^ 0x80;
            if (v5 != 5)
            {
              char v22 = v11[16];
              char v23 = v11[17];
              v8[5] = (v11[15] - v22) ^ 0x80;
              v9[5] = v22;
              v10[5] = (v23 - v22) ^ 0x80;
              if (v5 != 6)
              {
                char v24 = v11[18];
                char v25 = v11[19];
                char v26 = v11[20];
                v8[6] = (v24 - v25) ^ 0x80;
                v9[6] = v25;
                v10[6] = (v26 - v25) ^ 0x80;
              }
            }
          }
        }
      }
    }
    ++a2;
    ++a4;
    --v6;
  }
  while (v6 > 1);
  return result;
}

uint64_t sub_1003BC0F8(uint64_t result, unsigned __int8 **a2, void *a3, unsigned int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 48);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(result + 520) + 16);
      do
      {
        uint64_t v7 = *a2;
        uint64_t v8 = 8 * a4;
        uint64_t v9 = *(unsigned char **)(*a3 + v8);
        uint64_t v10 = *(unsigned char **)(a3[1] + v8);
        uint64_t v11 = *(unsigned char **)(a3[2] + v8);
        uint64_t v12 = v5;
        do
        {
          uint64_t v13 = v6 + 8 * *v7;
          char v14 = (_DWORD *)(v6 + 8 * v7[1]);
          uint64_t result = v6 + 8 * v7[2];
          *v9++ = (v14[512] + *(void *)v13 + *(_DWORD *)(result + 4096)) >> 16;
          *v10++ = (v14[2048] + *(_DWORD *)(v13 + 6144) + *(_DWORD *)(result + 10240)) >> 16;
          *v11++ = (v14[3072] + *(_DWORD *)(v13 + 10240) + *(_DWORD *)(result + 14336)) >> 16;
          v7 += 3;
          --v12;
        }
        while (v12);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t sub_1003BC1C4(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(int *)(result + 92);
    int v6 = *(_DWORD *)(result + 48);
    if ((int)v5 >= 1 && v6 != 0)
    {
      do
      {
        uint64_t v8 = 0;
        do
        {
          uint64_t v9 = *a2;
          uint64_t v10 = *(unsigned char **)(*(void *)(a3 + 8 * v8) + 8 * a4);
          int v11 = v6;
          do
          {
            *v10++ = *(unsigned char *)(v9 + v8);
            v9 += v5;
            --v11;
          }
          while (v11);
          ++v8;
        }
        while (v8 != v5);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t sub_1003BC238(uint64_t result, unsigned char **a2, void *a3, unsigned int a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 48);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(result + 520) + 16);
      do
      {
        uint64_t v7 = *a2;
        uint64_t v8 = 8 * a4;
        uint64_t v9 = *(unsigned char **)(*a3 + v8);
        uint64_t v10 = *(unsigned char **)(a3[1] + v8);
        int v11 = *(unsigned char **)(a3[2] + v8);
        uint64_t v12 = v5;
        uint64_t v13 = *(unsigned char **)(a3[3] + v8);
        do
        {
          unsigned __int8 v14 = ~*v7;
          int v15 = v7[1] ^ 0xFF;
          int v16 = v7[2] ^ 0xFF;
          *v13++ = v7[3];
          *v9++ = (*(void *)(v6 + 8 * (v15 | 0x100u))
                 + *(void *)(v6 + 8 * v14)
                 + *(void *)(v6 + 8 * (v16 | 0x200u))) >> 16;
          *v10++ = (*(void *)(v6 + 8 * (v15 | 0x400u))
                  + *(void *)(v6 + 8 * (v14 | 0x300u))
                  + *(void *)(v6 + 8 * (v16 | 0x500u))) >> 16;
          uint64_t result = (*(void *)(v6 + 8 * (v15 | 0x600u))
                  + *(void *)(v6 + 8 * (v14 | 0x500u))
                  + *(void *)(v6 + 8 * (v16 | 0x700u))) >> 16;
          *v11++ = result;
          v7 += 4;
          --v12;
        }
        while (v12);
        ++a2;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t (**sub_1003BC348(uint64_t a1))(uint64_t result, double a2, double a3, double a4)
{
  uint64_t result = (uint64_t (**)(uint64_t, double, double, double))(**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 536) = result;
  *uint64_t result = sub_1003BC3DC;
  if (*(int *)(a1 + 92) >= 1)
  {
    int v3 = 0;
    uint64_t v4 = (uint64_t (***)(uint64_t, double, double, double))(*(void *)(a1 + 104) + 88);
    do
    {
      uint64_t result = (uint64_t (**)(uint64_t, double, double, double))(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
      *uint64_t v4 = result;
      v4 += 12;
      ++v3;
    }
    while (v3 < *(_DWORD *)(a1 + 92));
  }
  return result;
}

uint64_t sub_1003BC3DC(uint64_t result, double a2, double a3, double a4)
{
  if (*(int *)(result + 92) >= 1)
  {
    uint64_t v4 = (int *)result;
    uint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = *(void *)(result + 536);
    for (uint64_t i = *(void *)(result + 104); ; i += 96)
    {
      int v11 = *(_DWORD *)(i + 36);
      int v12 = *(_DWORD *)(i + 40) + (v11 << 8);
      if (v12 <= 1805)
      {
        if (v12 > 1027)
        {
          if (v12 > 1538)
          {
            if (v12 > 1547)
            {
              if (v12 == 1548)
              {
                int v6 = 0;
                *(void *)(v7 + 8 * v5 + 88) = sub_1003E1164;
                goto LABEL_92;
              }
              if (v12 == 1799)
              {
                int v6 = 0;
                *(void *)(v7 + 8 * v5 + 88) = sub_1003DB7A4;
                goto LABEL_92;
              }
            }
            else
            {
              if (v12 == 1539)
              {
                int v6 = 0;
                *(void *)(v7 + 8 * v5 + 88) = sub_1003E0370;
                goto LABEL_92;
              }
              if (v12 == 1542)
              {
                int v6 = 0;
                *(void *)(v7 + 8 * v5 + 88) = sub_1003DBA74;
                goto LABEL_92;
              }
            }
          }
          else if (v12 > 1284)
          {
            if (v12 == 1285)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003DBF44;
              goto LABEL_92;
            }
            if (v12 == 1290)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003E14CC;
              goto LABEL_92;
            }
          }
          else
          {
            if (v12 == 1028)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003DC494;
              goto LABEL_92;
            }
            if (v12 == 1032)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003E17E0;
              goto LABEL_92;
            }
          }
        }
        else if (v12 > 515)
        {
          if (v12 > 773)
          {
            if (v12 == 774)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003E1C8C;
              goto LABEL_92;
            }
            if (v12 == 1026)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003E06F4;
              goto LABEL_92;
            }
          }
          else
          {
            if (v12 == 516)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003E205C;
              goto LABEL_92;
            }
            if (v12 == 771)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003DC7A8;
              goto LABEL_92;
            }
          }
        }
        else if (v12 > 512)
        {
          if (v12 == 513)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003E0860;
            goto LABEL_92;
          }
          if (v12 == 514)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DC96C;
            goto LABEL_92;
          }
        }
        else
        {
          if (v12 == 257)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DC9F0;
            goto LABEL_92;
          }
          if (v12 == 258)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003E21AC;
            goto LABEL_92;
          }
        }
        goto LABEL_87;
      }
      if (v12 > 3077)
      {
        if (v12 > 3597)
        {
          if (v12 > 4103)
          {
            if (v12 == 4104)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003DEF64;
              goto LABEL_92;
            }
            if (v12 == 4112)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003DE980;
              goto LABEL_92;
            }
          }
          else
          {
            if (v12 == 3598)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003DDFA4;
              goto LABEL_92;
            }
            if (v12 == 3855)
            {
              int v6 = 0;
              *(void *)(v7 + 8 * v5 + 88) = sub_1003DE46C;
              goto LABEL_92;
            }
          }
        }
        else if (v12 > 3340)
        {
          if (v12 == 3341)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DDA24;
            goto LABEL_92;
          }
          if (v12 == 3591)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DF360;
            goto LABEL_92;
          }
        }
        else
        {
          if (v12 == 3078)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DF6F8;
            goto LABEL_92;
          }
          if (v12 == 3084)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DD5F8;
            goto LABEL_92;
          }
        }
        goto LABEL_87;
      }
      if (v12 > 2312)
      {
        if (v12 > 2569)
        {
          if (v12 == 2570)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DCD68;
            goto LABEL_92;
          }
          if (v12 == 2827)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DD124;
            goto LABEL_92;
          }
        }
        else
        {
          if (v12 == 2313)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DCA2C;
            goto LABEL_92;
          }
          if (v12 == 2565)
          {
            int v6 = 0;
            *(void *)(v7 + 8 * v5 + 88) = sub_1003DF9CC;
            goto LABEL_92;
          }
        }
        goto LABEL_87;
      }
      if (v12 <= 2055) {
        break;
      }
      if (v12 != 2056)
      {
        if (v12 == 2064)
        {
          int v6 = 0;
          *(void *)(v7 + 8 * v5 + 88) = sub_1003E08B0;
          goto LABEL_92;
        }
LABEL_87:
        uint64_t v14 = *(void *)v4;
        *(_DWORD *)(v14 + 40) = 7;
        *(_DWORD *)(v14 + 44) = v11;
        *(_DWORD *)(*(void *)v4 + 48) = *(_DWORD *)(i + 40);
        int v15 = *(uint64_t (***)(int *))v4;
        goto LABEL_91;
      }
      int v13 = v4[75];
      switch(v13)
      {
        case 2:
          *(void *)(v7 + 8 * v5 + 168) = sub_1003DAF28;
          int v6 = 2;
          goto LABEL_92;
        case 1:
          *(void *)(v7 + 8 * v5 + 88) = sub_1003DB1D0;
          int v6 = 1;
          goto LABEL_92;
        case 0:
          int v6 = 0;
          *(void *)(v7 + 8 * v5 + 88) = sub_1003DB4C4;
          goto LABEL_92;
      }
      int v15 = *(uint64_t (***)(int *))v4;
      *(_DWORD *)(*(void *)v4 + 40) = 49;
LABEL_91:
      uint64_t result = (*v15)(v4);
LABEL_92:
      uint64_t v16 = *(unsigned int *)(i + 16);
      if (v16 > 3 || !*(void *)&v4[2 * v16 + 28])
      {
        char v17 = *(uint64_t (***)(int *))v4;
        *((_DWORD *)v17 + 10) = 54;
        *((_DWORD *)v17 + 11) = v16;
        uint64_t result = (**(uint64_t (***)(int *))v4)(v4);
      }
      uint64_t v18 = *(void *)&v4[2 * (int)v16 + 28];
      if (v6 == 2)
      {
        uint64_t v22 = 0;
        int v23 = 0;
        uint64_t v24 = *(void *)(i + 88);
        if (*(unsigned char *)(i + 52)) {
          double v25 = 16.0;
        }
        else {
          double v25 = 8.0;
        }
        do
        {
          uint64_t v26 = 0;
          double v27 = dbl_10040CE60[v22];
          int v28 = v23;
          uint64_t v29 = v18 + 2 * v23;
          uint64_t v30 = v24 + 4 * v23;
          do
          {
            LOWORD(a4) = *(_WORD *)(v29 + 2 * v26);
            a4 = 1.0 / (v27 * (double)*(unint64_t *)&a4 * dbl_10040CE60[v26] * v25);
            *(float *)&a4 = a4;
            *(_DWORD *)(v30 + 4 * v26++) = LODWORD(a4);
          }
          while (v26 != 8);
          ++v22;
          int v23 = v28 + 8;
        }
        while (v22 != 8);
        uint64_t v9 = v7 + 8 * v5;
        uint64_t v10 = sub_1003BCCC8;
      }
      else
      {
        if (v6 == 1)
        {
          uint64_t v31 = 0;
          uint64_t v32 = *(void *)(i + 88);
          if (*(unsigned char *)(i + 52)) {
            char v33 = 10;
          }
          else {
            char v33 = 11;
          }
          do
          {
            *(_DWORD *)(v32 + 4 * v31) = (uint64_t)((1 << (v33 - 1))
                                                 + word_10040CDE0[v31]
                                                 * (unint64_t)*(unsigned __int16 *)(v18 + 2 * v31)) >> v33;
            ++v31;
          }
          while (v31 != 64);
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(i + 88);
          if (*(unsigned char *)(i + 52)) {
            char v21 = 4;
          }
          else {
            char v21 = 3;
          }
          do
          {
            *(_DWORD *)(v20 + 4 * v19) = *(unsigned __int16 *)(v18 + 2 * v19) << v21;
            ++v19;
          }
          while (v19 != 64);
        }
        uint64_t v9 = v7 + 8 * v5;
        uint64_t v10 = sub_1003BCB90;
      }
      *(void *)(v9 + 8) = v10;
      if (++v5 >= v4[23]) {
        return result;
      }
    }
    if (v12 == 1806)
    {
      int v6 = 0;
      *(void *)(v7 + 8 * v5 + 88) = sub_1003E0D48;
      goto LABEL_92;
    }
    if (v12 == 2052)
    {
      int v6 = 0;
      *(void *)(v7 + 8 * v5 + 88) = sub_1003DFC4C;
      goto LABEL_92;
    }
    goto LABEL_87;
  }
  return result;
}

uint64_t sub_1003BCB90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  if (a7)
  {
    LODWORD(v7) = a6;
    uint64_t v10 = 0;
    int v11 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)(result + 536) + 8 * *(int *)(a2 + 4) + 88);
    uint64_t v12 = *(void *)(a2 + 88);
    uint64_t v13 = a3 + 8 * a5;
    uint64_t v14 = a7;
    for (uint64_t result = v11(v22, v13, a6); ; uint64_t result = v11(v22, v13, v7))
    {
      for (uint64_t i = 0; i != 64; ++i)
      {
        int v17 = *(_DWORD *)(v12 + 4 * i);
        int v18 = v22[i];
        int v19 = v17 >> 1;
        if (v18 < 0)
        {
          int v21 = v19 - v18;
          if (v21 >= v17) {
            int v16 = -(v21 / v17);
          }
          else {
            LOWORD(v16) = 0;
          }
        }
        else
        {
          int v20 = v18 + v19;
          if (v20 >= v17) {
            int v16 = v20 / v17;
          }
          else {
            LOWORD(v16) = 0;
          }
        }
        *(_WORD *)(a4 + 2 * i) = v16;
      }
      ++v10;
      uint64_t v7 = (*(_DWORD *)(a2 + 36) + v7);
      a4 += 128;
      if (v10 == v14) {
        break;
      }
    }
  }
  return result;
}

uint64_t sub_1003BCCC8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7)
{
  if (a7)
  {
    uint64_t v10 = 0;
    int v11 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)(result + 536) + 8 * *(int *)(a2 + 4) + 168);
    uint64_t v12 = *(void *)(a2 + 88);
    uint64_t v13 = a3 + 8 * a5;
    uint64_t v14 = a7;
    do
    {
      uint64_t result = v11(v16, v13, a6);
      for (uint64_t i = 0; i != 64; ++i)
        *(_WORD *)(a4 + 2 * i) = (int)(float)((float)(*(float *)&v16[i] * *(float *)(v12 + 4 * i)) + 16384.0) - 0x4000;
      ++v10;
      a6 = (*(_DWORD *)(a2 + 36) + a6);
      a4 += 128;
    }
    while (v10 != v14);
  }
  return result;
}

uint64_t sub_1003BCDD0(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 544) = result;
  *(void *)uint64_t result = sub_1003BCE38;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  if (*(unsigned char *)(a1 + 332)) {
    *(void *)(result + 240) = 0;
  }
  return result;
}

void sub_1003BCE38(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 544);
  if (a2)
  {
    *(void *)(v4 + 16) = sub_1003BD100;
    if (!*(unsigned char *)(a1 + 332))
    {
      *(void *)(v4 + 8) = sub_1003BE7DC;
      if (*(int *)(a1 + 356) < 1) {
        goto LABEL_40;
      }
      goto LABEL_18;
    }
  }
  else
  {
    *(void *)(v4 + 16) = sub_1003BD238;
    if (!*(unsigned char *)(a1 + 332))
    {
      *(void *)(v4 + 8) = sub_1003BEA5C;
      if (*(int *)(a1 + 356) < 1) {
        goto LABEL_40;
      }
      goto LABEL_18;
    }
  }
  *(void *)(v4 + 216) = a1;
  *(unsigned char *)(v4 + 192) = a2;
  int v5 = *(_DWORD *)(a1 + 444);
  if (!*(_DWORD *)(a1 + 452))
  {
    if (v5) {
      int v6 = sub_1003BD5C4;
    }
    else {
      int v6 = sub_1003BD40C;
    }
    goto LABEL_16;
  }
  if (!v5)
  {
    int v6 = sub_1003BD9F4;
LABEL_16:
    *(void *)(v4 + 8) = v6;
    goto LABEL_17;
  }
  *(void *)(v4 + 8) = sub_1003BDC24;
  if (!*(void *)(v4 + 240)) {
    *(void *)(v4 + 240) = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1000);
  }
LABEL_17:
  int v7 = *(_DWORD *)(*(void *)(a1 + 360) + 24);
  *(_DWORD *)(v4 + 228) = 0;
  *(_DWORD *)(v4 + 232) = 0;
  *(_DWORD *)(v4 + 224) = v7;
  if (*(int *)(a1 + 356) >= 1)
  {
LABEL_18:
    uint64_t v8 = 0;
    uint64_t v9 = v4 + 36;
    do
    {
      uint64_t v14 = *(void *)(a1 + 8 * v8 + 360);
      if (*(_DWORD *)(a1 + 444) || *(_DWORD *)(a1 + 452))
      {
        if (*(_DWORD *)(a1 + 448)) {
          goto LABEL_26;
        }
      }
      else
      {
        signed int v18 = *(_DWORD *)(v14 + 20);
        uint64_t v19 = v18;
        if (a2)
        {
          if (v18 >= 4)
          {
            int v20 = *(void (***)(uint64_t))a1;
            *((_DWORD *)v20 + 10) = 52;
            *((_DWORD *)v20 + 11) = v18;
            (**(void (***)(uint64_t))a1)(a1);
          }
          uint64_t v21 = v4 + 8 * v19;
          uint64_t v24 = *(void **)(v21 + 128);
          int v23 = (void *)(v21 + 128);
          uint64_t v22 = v24;
          if (v24)
          {
            bzero(v22, 0x808uLL);
            *(_DWORD *)(v9 + 4 * v8) = 0;
            if (*(_DWORD *)(a1 + 448)) {
              goto LABEL_26;
            }
          }
          else
          {
            double v25 = (void *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2056);
            *int v23 = v25;
            bzero(v25, 0x808uLL);
            *(_DWORD *)(v9 + 4 * v8) = 0;
            if (*(_DWORD *)(a1 + 448))
            {
LABEL_26:
              signed int v15 = *(_DWORD *)(v14 + 24);
              uint64_t v16 = v15;
              if (a2)
              {
                if (v15 >= 4)
                {
                  int v17 = *(void (***)(uint64_t))a1;
                  *((_DWORD *)v17 + 10) = 52;
                  *((_DWORD *)v17 + 11) = v15;
                  (**(void (***)(uint64_t))a1)(a1);
                }
                uint64_t v10 = v4 + 8 * v16;
                uint64_t v13 = *(void **)(v10 + 160);
                uint64_t v12 = (void *)(v10 + 160);
                int v11 = v13;
                if (!v13)
                {
                  int v11 = (void *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2056);
                  *uint64_t v12 = v11;
                }
                bzero(v11, 0x808uLL);
              }
              else
              {
                sub_1003BF4D0((void *)a1, 0, v15, (void *)(v4 + 8 * v15 + 96));
              }
            }
          }
        }
        else
        {
          sub_1003BF4D0((void *)a1, 1, v18, (void *)(v4 + 8 * v18 + 64));
          *(_DWORD *)(v9 + 4 * v8) = 0;
          if (*(_DWORD *)(a1 + 448)) {
            goto LABEL_26;
          }
        }
      }
      ++v8;
    }
    while (v8 < *(int *)(a1 + 356));
  }
LABEL_40:
  *(void *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(void *)(v4 + 56) = *(unsigned int *)(a1 + 304);
}

uint64_t sub_1003BD100(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 544);
  if (*(unsigned char *)(result + 332)) {
    uint64_t result = sub_1003BFBAC(*(void *)(result + 544));
  }
  uint64_t v16 = 0;
  if (*(int *)(v1 + 356) >= 1)
  {
    for (uint64_t i = 45; ; ++i)
    {
      uint64_t v5 = *(void *)(v1 + 8 * i);
      if (!*(_DWORD *)(v1 + 444) && !*(_DWORD *)(v1 + 452))
      {
        uint64_t v6 = *(int *)(v5 + 20);
        if (!*((unsigned char *)&v16 + v6 + 4)) {
          break;
        }
      }
      if (*(_DWORD *)(v1 + 448)) {
        goto LABEL_11;
      }
LABEL_6:
      uint64_t v4 = i - 44;
      if (v4 >= *(int *)(v1 + 356)) {
        return result;
      }
    }
    uint64_t v12 = v1 + 8 * v6;
    uint64_t v15 = *(void *)(v12 + 160);
    uint64_t v14 = (uint64_t *)(v12 + 160);
    uint64_t v13 = v15;
    if (!v15)
    {
      uint64_t v13 = sub_1003C57D8(v1);
      *uint64_t v14 = v13;
    }
    uint64_t result = (uint64_t)sub_1003BFC98((uint64_t *)v1, v13, *(void *)(v2 + 8 * v6 + 128));
    *((unsigned char *)&v16 + v6 + 4) = 1;
    if (!*(_DWORD *)(v1 + 448)) {
      goto LABEL_6;
    }
LABEL_11:
    uint64_t v7 = *(int *)(v5 + 24);
    if (!*((unsigned char *)&v16 + v7))
    {
      uint64_t v8 = v1 + 8 * v7;
      uint64_t v11 = *(void *)(v8 + 192);
      uint64_t v10 = (uint64_t *)(v8 + 192);
      uint64_t v9 = v11;
      if (!v11)
      {
        uint64_t v9 = sub_1003C57D8(v1);
        *uint64_t v10 = v9;
      }
      uint64_t result = (uint64_t)sub_1003BFC98((uint64_t *)v1, v9, *(void *)(v2 + 8 * v7 + 160));
      *((unsigned char *)&v16 + v7) = 1;
    }
    goto LABEL_6;
  }
  return result;
}

__n128 sub_1003BD238(uint64_t *a1)
{
  uint64_t v2 = a1[68];
  int v3 = (void *)a1[5];
  uint64_t v4 = (unsigned char *)*v3;
  if (*((unsigned char *)a1 + 332))
  {
    *(void *)(v2 + 200) = v4;
    *(void *)(v2 + 208) = v3[1];
    sub_1003BFBAC(v2);
    sub_1003C030C(v2);
    uint64_t v6 = (void *)a1[5];
    *uint64_t v6 = *(void *)(v2 + 200);
    v6[1] = *(void *)(v2 + 208);
    return result;
  }
  uint64_t v7 = v3[1];
  uint64_t v8 = *(void *)(v2 + 24);
  int v9 = *(_DWORD *)(v2 + 32);
  __n128 v16 = *(__n128 *)(v2 + 36);
  int v17 = *(_DWORD *)(v2 + 52);
  if (v9 >= 1)
  {
    uint64_t v10 = (127 << (17 - v9)) | v8;
    for (int i = v9 + 15; i > 15; i -= 8)
    {
      *v4++ = BYTE2(v10);
      if (--v7)
      {
        if ((~v10 & 0xFF0000) != 0) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v12 = a1[5];
        if (!(*(unsigned int (**)(uint64_t *))(v12 + 24))(a1)) {
          goto LABEL_14;
        }
        uint64_t v4 = *(unsigned char **)v12;
        uint64_t v7 = *(void *)(v12 + 8);
        if ((~v10 & 0xFF0000) != 0) {
          goto LABEL_6;
        }
      }
      *v4++ = 0;
      if (!--v7)
      {
        uint64_t v13 = a1[5];
        if (!(*(unsigned int (**)(uint64_t *))(v13 + 24))(a1))
        {
LABEL_14:
          uint64_t v14 = *a1;
          *(_DWORD *)(v14 + 40) = 25;
          (*(void (**)(uint64_t *))v14)(a1);
          uint64_t v7 = 0;
          goto LABEL_16;
        }
        uint64_t v4 = *(unsigned char **)v13;
        uint64_t v7 = *(void *)(v13 + 8);
      }
LABEL_6:
      LODWORD(v10) = v10 << 8;
    }
  }
  int v9 = 0;
  uint64_t v8 = 0;
LABEL_16:
  uint64_t v15 = (void *)a1[5];
  *uint64_t v15 = v4;
  v15[1] = v7;
  *(void *)(v2 + 24) = v8;
  *(_DWORD *)(v2 + 32) = v9;
  __n128 result = v16;
  *(__n128 *)(v2 + 36) = v16;
  *(_DWORD *)(v2 + 52) = v17;
  return result;
}

uint64_t sub_1003BD40C(int *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 68);
  uint64_t v5 = (uint64_t *)*((void *)a1 + 5);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(v4 + 200) = v7;
  *(void *)(v4 + 208) = v6;
  if (a1[76] && !*(_DWORD *)(v4 + 56))
  {
    sub_1003C0468(v4, *(_DWORD *)(v4 + 60));
    if (a1[100] >= 1) {
      goto LABEL_4;
    }
  }
  else if (a1[100] >= 1)
  {
LABEL_4:
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = a1[v8 + 101];
      uint64_t v10 = *(int *)(*(void *)&a1[2 * v9 + 90] + 20);
      int v11 = **(__int16 **)(a2 + 8 * v8) >> a1[114];
      uint64_t v12 = v4 + 4 * v9;
      int v13 = *(_DWORD *)(v12 + 36);
      *(_DWORD *)(v12 + 36) = v11;
      int v14 = v11 - v13;
      if (v11 == v13)
      {
        unsigned int v15 = 0;
      }
      else
      {
        if (v14 >= 0) {
          unsigned int v16 = v11 - v13;
        }
        else {
          unsigned int v16 = v13 - v11;
        }
        unsigned int v17 = -1;
        do
        {
          ++v17;
          BOOL v18 = v16 > 1;
          v16 >>= 1;
        }
        while (v18);
        unsigned int v15 = v17 + 1;
        if (v17 >= 0xB)
        {
          uint64_t v19 = *(void *)a1;
          *(_DWORD *)(v19 + 40) = 6;
          (*(void (**)(int *))v19)(a1);
        }
      }
      if (*(unsigned char *)(v4 + 192)) {
        break;
      }
      sub_1003BFFB8(v4, *(_DWORD *)(*(void *)(v4 + 8 * v10 + 64) + 4 * v15), *(char *)(*(void *)(v4 + 8 * v10 + 64) + v15 + 1024));
      if (v15) {
        goto LABEL_19;
      }
LABEL_5:
      if (++v8 >= a1[100]) {
        goto LABEL_21;
      }
    }
    ++*(void *)(*(void *)(v4 + 8 * v10 + 128) + 8 * v15);
    if (!v15) {
      goto LABEL_5;
    }
LABEL_19:
    sub_1003BFFB8(v4, v14 + (v14 >> 31), v15);
    goto LABEL_5;
  }
LABEL_21:
  int v20 = (void *)*((void *)a1 + 5);
  uint64_t v21 = *(void *)(v4 + 208);
  *int v20 = *(void *)(v4 + 200);
  v20[1] = v21;
  int v22 = a1[76];
  if (v22)
  {
    int v23 = *(_DWORD *)(v4 + 56);
    if (!v23)
    {
      *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
      int v23 = v22;
    }
    *(_DWORD *)(v4 + 56) = v23 - 1;
  }
  return 1;
}

uint64_t sub_1003BD5C4(uint64_t *a1, uint64_t *a2)
{
  int v3 = a1;
  uint64_t v4 = a1[68];
  uint64_t v5 = (uint64_t *)a1[5];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(v4 + 200) = v7;
  *(void *)(v4 + 208) = v6;
  if (*((_DWORD *)a1 + 76) && !*(_DWORD *)(v4 + 56))
  {
    sub_1003C0468(v4, *(_DWORD *)(v4 + 60));
    int v8 = *((_DWORD *)v3 + 112);
    uint64_t v9 = *((int *)v3 + 111);
    if ((int)v9 > v8) {
      goto LABEL_58;
    }
  }
  else
  {
    int v8 = *((_DWORD *)a1 + 112);
    uint64_t v9 = *((int *)a1 + 111);
    if ((int)v9 > v8) {
      goto LABEL_58;
    }
  }
  signed int v10 = 0;
  int v11 = *((_DWORD *)v3 + 114);
  uint64_t v57 = v3[58];
  int v56 = v8 + 1;
  v54 = v3;
  uint64_t v55 = *a2;
  do
  {
    while (1)
    {
      int v12 = *(__int16 *)(v55 + 2 * *(int *)(v57 + 4 * v9));
      if (*(_WORD *)(v55 + 2 * *(int *)(v57 + 4 * v9)))
      {
        unsigned int v13 = v12 >= 0 ? v12 >> v11 : -v12 >> v11;
        unsigned int v14 = v12 < 0 ? ~(-v12 >> v11) : v12 >> v11;
        if (v13) {
          break;
        }
      }
      ++v10;
      if (v56 == ++v9) {
        goto LABEL_54;
      }
    }
    if (*(_DWORD *)(v4 + 228)) {
      sub_1003BFBAC(v4);
    }
    if (v10 < 16)
    {
LABEL_22:
      if (v13 < 2) {
        goto LABEL_23;
      }
      goto LABEL_46;
    }
    int v15 = *(unsigned __int8 *)(v4 + 192);
    if (*(unsigned char *)(v4 + 192))
    {
      if (v10 >= 31) {
        int v17 = 31;
      }
      else {
        int v17 = v10;
      }
      unsigned int v18 = v10 - v17 + 15;
      signed int v10 = v10 - (v18 & 0xFFFFFFF0) - 16;
      uint64_t v16 = *(void *)(v4 + 8 * *(int *)(v4 + 224) + 160);
      *(void *)(v16 + 1920) += (v18 >> 4) + 1;
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v20 = *(int *)(v4 + 224);
      if (v15)
      {
        ++*(void *)(*(void *)(v4 + 8 * v20 + 160) + 1920);
        goto LABEL_44;
      }
      uint64_t v21 = *(void *)(v4 + 8 * v20 + 96);
      unsigned int v22 = *(_DWORD *)(v21 + 960);
      int v23 = *(char *)(v21 + 1264);
      if (*(unsigned char *)(v21 + 1264)
        || (v42 = *(uint64_t **)(v4 + 216),
            uint64_t v43 = *v42,
            *(_DWORD *)(v43 + 40) = 41,
            (*(void (**)(uint64_t *))v43)(v42),
            !*(unsigned char *)(v4 + 192)))
      {
        uint64_t v24 = ~(-1 << v23) & v22;
        int v25 = *(_DWORD *)(v4 + 32) + v23;
        uint64_t v26 = (v24 << (24 - v25)) | *(void *)(v4 + 24);
        if (v25 < 8)
        {
          int v27 = v25;
LABEL_30:
          *(void *)(v4 + 24) = v26;
          *(_DWORD *)(v4 + 32) = v27;
          goto LABEL_44;
        }
        while (2)
        {
          uint64_t v30 = *(unsigned char **)(v4 + 200);
          *(void *)(v4 + 200) = v30 + 1;
          *uint64_t v30 = BYTE2(v26);
          uint64_t v31 = *(void *)(v4 + 208) - 1;
          *(void *)(v4 + 208) = v31;
          if (v31)
          {
            if ((~v26 & 0xFF0000) == 0) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v32 = *(void *)(*(void *)(v4 + 216) + 40);
            if ((*(unsigned int (**)(void))(v32 + 24))())
            {
              uint64_t v33 = *(void *)(v32 + 8);
              *(void *)(v4 + 200) = *(void *)v32;
              *(void *)(v4 + 208) = v33;
              if ((~v26 & 0xFF0000) == 0) {
                goto LABEL_40;
              }
            }
            else
            {
              unint64_t v34 = *(uint64_t **)(v4 + 216);
              uint64_t v35 = *v34;
              *(_DWORD *)(v35 + 40) = 25;
              (*(void (**)(uint64_t *))v35)(v34);
              uint64_t v36 = *(void *)(v32 + 8);
              *(void *)(v4 + 200) = *(void *)v32;
              *(void *)(v4 + 208) = v36;
              if ((~v26 & 0xFF0000) == 0)
              {
LABEL_40:
                unint64_t v37 = *(unsigned char **)(v4 + 200);
                *(void *)(v4 + 200) = v37 + 1;
                *unint64_t v37 = 0;
                uint64_t v38 = *(void *)(v4 + 208) - 1;
                *(void *)(v4 + 208) = v38;
                if (!v38)
                {
                  uint64_t v39 = *(void *)(*(void *)(v4 + 216) + 40);
                  if (!(*(unsigned int (**)(void))(v39 + 24))())
                  {
                    int v40 = *(uint64_t **)(v4 + 216);
                    uint64_t v41 = *v40;
                    *(_DWORD *)(v41 + 40) = 25;
                    (*(void (**)(uint64_t *))v41)(v40);
                  }
                  uint64_t v28 = *(void *)(v39 + 8);
                  *(void *)(v4 + 200) = *(void *)v39;
                  *(void *)(v4 + 208) = v28;
                }
              }
            }
          }
          v26 <<= 8;
          int v27 = v25 - 8;
          BOOL v29 = v25 <= 15;
          v25 -= 8;
          if (v29) {
            goto LABEL_30;
          }
          continue;
        }
      }
LABEL_44:
      if (v10 <= 31) {
        break;
      }
      int v15 = *(unsigned __int8 *)(v4 + 192);
      v10 -= 16;
    }
    v10 -= 16;
    int v3 = v54;
    if (v13 < 2)
    {
LABEL_23:
      int v19 = 1;
      goto LABEL_50;
    }
LABEL_46:
    unsigned int v44 = 0;
    do
    {
      ++v44;
      BOOL v29 = v13 > 3;
      v13 >>= 1;
    }
    while (v29);
    int v19 = v44 + 1;
    if (v44 >= 0xA)
    {
      uint64_t v45 = *v3;
      *(_DWORD *)(v45 + 40) = 6;
      (*(void (**)(uint64_t *))v45)(v3);
    }
LABEL_50:
    uint64_t v46 = v19 + 16 * v10;
    uint64_t v47 = v4 + 8 * *(int *)(v4 + 224);
    if (*(unsigned char *)(v4 + 192)) {
      ++*(void *)(*(void *)(v47 + 160) + 8 * v46);
    }
    else {
      sub_1003BFFB8(v4, *(_DWORD *)(*(void *)(v47 + 96) + 4 * v46), *(char *)(*(void *)(v47 + 96) + v46 + 1024));
    }
    sub_1003BFFB8(v4, v14, v19);
    signed int v10 = 0;
    ++v9;
  }
  while (v56 != v9);
LABEL_54:
  if (v10 >= 1)
  {
    int v48 = *(_DWORD *)(v4 + 228) + 1;
    *(_DWORD *)(v4 + 228) = v48;
    if (v48 == 0x7FFF) {
      sub_1003BFBAC(v4);
    }
  }
LABEL_58:
  uint64_t v49 = (void *)v3[5];
  uint64_t v50 = *(void *)(v4 + 208);
  *uint64_t v49 = *(void *)(v4 + 200);
  v49[1] = v50;
  int v51 = *((_DWORD *)v3 + 76);
  if (v51)
  {
    int v52 = *(_DWORD *)(v4 + 56);
    if (!v52)
    {
      *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
      int v52 = v51;
    }
    *(_DWORD *)(v4 + 56) = v52 - 1;
  }
  return 1;
}

uint64_t sub_1003BD9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 544);
  uint64_t v5 = *(uint64_t **)(a1 + 40);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *(void *)(v4 + 200) = v7;
  *(void *)(v4 + 208) = v6;
  if (*(_DWORD *)(a1 + 304) && !*(_DWORD *)(v4 + 56))
  {
    sub_1003C0468(v4, *(_DWORD *)(v4 + 60));
    int v8 = *(_DWORD *)(a1 + 400);
    if (v8 < 1) {
      goto LABEL_27;
    }
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 400);
    if (v8 < 1) {
      goto LABEL_27;
    }
  }
  if (!*(unsigned char *)(v4 + 192))
  {
    uint64_t v9 = 0;
    int v10 = *(_DWORD *)(a1 + 456);
LABEL_6:
    int v11 = *(_DWORD *)(v4 + 32);
    unint64_t v12 = ((unint64_t)((**(__int16 **)(a2 + 8 * v9) >> v10) & 1) << (23 - v11)) | *(void *)(v4 + 24);
    if (v11 >= 7)
    {
      int v13 = v11 + 9;
      while (1)
      {
        int v15 = *(unsigned char **)(v4 + 200);
        *(void *)(v4 + 200) = v15 + 1;
        *int v15 = BYTE2(v12);
        uint64_t v16 = *(void *)(v4 + 208) - 1;
        *(void *)(v4 + 208) = v16;
        if (v16)
        {
          if ((~v12 & 0xFF0000) == 0) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v17 = *(void *)(*(void *)(v4 + 216) + 40);
          if ((*(unsigned int (**)(void))(v17 + 24))())
          {
            uint64_t v18 = *(void *)(v17 + 8);
            *(void *)(v4 + 200) = *(void *)v17;
            *(void *)(v4 + 208) = v18;
            if ((~v12 & 0xFF0000) == 0) {
              goto LABEL_17;
            }
          }
          else
          {
            int v19 = *(uint64_t **)(v4 + 216);
            uint64_t v20 = *v19;
            *(_DWORD *)(v20 + 40) = 25;
            (*(void (**)(uint64_t *))v20)(v19);
            uint64_t v21 = *(void *)(v17 + 8);
            *(void *)(v4 + 200) = *(void *)v17;
            *(void *)(v4 + 208) = v21;
            if ((~v12 & 0xFF0000) == 0)
            {
LABEL_17:
              unsigned int v22 = *(unsigned char **)(v4 + 200);
              *(void *)(v4 + 200) = v22 + 1;
              *unsigned int v22 = 0;
              uint64_t v23 = *(void *)(v4 + 208) - 1;
              *(void *)(v4 + 208) = v23;
              if (!v23)
              {
                uint64_t v24 = *(void *)(*(void *)(v4 + 216) + 40);
                if (!(*(unsigned int (**)(void))(v24 + 24))())
                {
                  int v25 = *(uint64_t **)(v4 + 216);
                  uint64_t v26 = *v25;
                  *(_DWORD *)(v26 + 40) = 25;
                  (*(void (**)(uint64_t *))v26)(v25);
                }
                uint64_t v14 = *(void *)(v24 + 8);
                *(void *)(v4 + 200) = *(void *)v24;
                *(void *)(v4 + 208) = v14;
              }
            }
          }
        }
        v12 <<= 8;
        v13 -= 8;
        if (v13 <= 15)
        {
          int v8 = *(_DWORD *)(a1 + 400);
          int v27 = v13 - 8;
          goto LABEL_22;
        }
      }
    }
    int v27 = v11 + 1;
LABEL_22:
    *(void *)(v4 + 24) = v12;
    *(_DWORD *)(v4 + 32) = v27;
    while (++v9 < v8)
    {
      if (!*(unsigned char *)(v4 + 192)) {
        goto LABEL_6;
      }
    }
  }
LABEL_27:
  uint64_t v28 = *(void **)(a1 + 40);
  uint64_t v29 = *(void *)(v4 + 208);
  *uint64_t v28 = *(void *)(v4 + 200);
  v28[1] = v29;
  int v30 = *(_DWORD *)(a1 + 304);
  if (v30)
  {
    int v31 = *(_DWORD *)(v4 + 56);
    if (!v31)
    {
      *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
      int v31 = v30;
    }
    *(_DWORD *)(v4 + 56) = v31 - 1;
  }
  return 1;
}

uint64_t sub_1003BDC24(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 544);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(v4 + 200) = *v5;
  *(void *)(v4 + 208) = v5[1];
  if (*(_DWORD *)(a1 + 304) && !*(_DWORD *)(v4 + 56))
  {
    sub_1003C0468(v4, *(_DWORD *)(v4 + 60));
    int v6 = *(_DWORD *)(a1 + 448);
    int v7 = *(_DWORD *)(a1 + 444);
    uint64_t v139 = a1;
    if (v7 > v6) {
      goto LABEL_4;
    }
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 448);
    int v7 = *(_DWORD *)(a1 + 444);
    uint64_t v139 = a1;
    if (v7 > v6)
    {
LABEL_4:
      LODWORD(v8) = 0;
      unsigned int v9 = 0;
      goto LABEL_149;
    }
  }
  int v10 = 0;
  int v11 = *(_DWORD *)(a1 + 456);
  uint64_t v12 = *a2;
  int v13 = v6 + 1;
  uint64_t v14 = v7;
  uint64_t v138 = *(void *)(a1 + 464);
  int v15 = (int *)(v138 + 4 * v7);
  uint64_t v16 = &v144[v7];
  do
  {
    uint64_t v17 = *v15++;
    int v18 = *(__int16 *)(v12 + 2 * v17);
    if (v18 < 0) {
      int v18 = -v18;
    }
    unsigned int v19 = v18 >> v11;
    *v16++ = v19;
    if (v19 == 1) {
      int v10 = v7;
    }
    ++v7;
  }
  while (v13 != v7);
  uint64_t v137 = v12;
  unsigned int v9 = 0;
  uint64_t v20 = 0;
  uint64_t v140 = v10;
  uint64_t v21 = (unsigned char *)(*(void *)(v4 + 240) + *(unsigned int *)(v4 + 232));
  int v141 = v13;
  do
  {
    while (1)
    {
      int v22 = v144[v14];
      if (v22) {
        break;
      }
      LODWORD(v8) = v20 + 1;
      ++v14;
      uint64_t v20 = (v20 + 1);
      if (v13 == v14) {
        goto LABEL_149;
      }
    }
    int v142 = v144[v14];
    uint64_t v143 = v14;
    if ((int)v20 < 16)
    {
      uint64_t v8 = v20;
      unsigned int v23 = v9;
      if (v22 >= 2) {
        goto LABEL_18;
      }
      goto LABEL_128;
    }
    uint64_t v8 = v20;
    unsigned int v23 = v9;
    if (v14 <= v140)
    {
      while (1)
      {
        int v25 = *(_DWORD *)(v4 + 228);
        if (v25) {
          break;
        }
LABEL_88:
        uint64_t v81 = *(int *)(v4 + 224);
        if (*(unsigned char *)(v4 + 192))
        {
          ++*(void *)(*(void *)(v4 + 8 * v81 + 160) + 1920);
          goto LABEL_20;
        }
        uint64_t v82 = *(void *)(v4 + 8 * v81 + 96);
        unsigned int v83 = *(_DWORD *)(v82 + 960);
        int v84 = *(char *)(v82 + 1264);
        if (!*(unsigned char *)(v82 + 1264))
        {
          v113 = *(uint64_t **)(v4 + 216);
          uint64_t v114 = *v113;
          *(_DWORD *)(v114 + 40) = 41;
          (*(void (**)(uint64_t *))v114)(v113);
          if (*(unsigned char *)(v4 + 192)) {
            goto LABEL_20;
          }
        }
        int v85 = *(_DWORD *)(v4 + 32) + v84;
        unint64_t v86 = ((unint64_t)(~(-1 << v84) & v83) << (24 - (*(unsigned char *)(v4 + 32) + v84))) | *(void *)(v4 + 24);
        if (v85 < 8)
        {
          int v87 = 0;
          *(void *)(v4 + 24) = v86;
          *(_DWORD *)(v4 + 32) = v85;
          if (v9) {
            goto LABEL_105;
          }
          goto LABEL_20;
        }
        do
        {
          int v88 = v85;
          v89 = *(unsigned char **)(v4 + 200);
          *(void *)(v4 + 200) = v89 + 1;
          unsigned char *v89 = BYTE2(v86);
          uint64_t v90 = *(void *)(v4 + 208) - 1;
          *(void *)(v4 + 208) = v90;
          if (v90)
          {
            if ((~v86 & 0xFF0000) != 0) {
              goto LABEL_94;
            }
LABEL_101:
            v94 = *(unsigned char **)(v4 + 200);
            *(void *)(v4 + 200) = v94 + 1;
            unsigned char *v94 = 0;
            uint64_t v95 = *(void *)(v4 + 208) - 1;
            *(void *)(v4 + 208) = v95;
            if (!v95)
            {
              uint64_t v96 = *(void *)(*(void *)(v4 + 216) + 40);
              if (!(*(unsigned int (**)(void))(v96 + 24))())
              {
                v97 = *(uint64_t **)(v4 + 216);
                uint64_t v98 = *v97;
                *(_DWORD *)(v98 + 40) = 25;
                (*(void (**)(uint64_t *))v98)(v97);
              }
              *(void *)(v4 + 200) = *(void *)v96;
              *(void *)(v4 + 208) = *(void *)(v96 + 8);
            }
            goto LABEL_94;
          }
          uint64_t v91 = *(void *)(*(void *)(v4 + 216) + 40);
          if (!(*(unsigned int (**)(void))(v91 + 24))())
          {
            v92 = *(uint64_t **)(v4 + 216);
            uint64_t v93 = *v92;
            *(_DWORD *)(v93 + 40) = 25;
            (*(void (**)(uint64_t *))v93)(v92);
          }
          *(void *)(v4 + 200) = *(void *)v91;
          *(void *)(v4 + 208) = *(void *)(v91 + 8);
          if ((~v86 & 0xFF0000) == 0) {
            goto LABEL_101;
          }
LABEL_94:
          v86 <<= 8;
          int v85 = v88 - 8;
        }
        while (v88 > 15);
        int v87 = *(unsigned __int8 *)(v4 + 192);
        *(void *)(v4 + 24) = v86;
        *(_DWORD *)(v4 + 32) = v85;
        if (v9)
        {
LABEL_105:
          if (!v87)
          {
LABEL_106:
            int v99 = *(_DWORD *)(v4 + 32);
            unint64_t v100 = ((unint64_t)(*v21 & 1) << (23 - v99)) | *(void *)(v4 + 24);
            if (v99 >= 7)
            {
              int v101 = v99 + 9;
              while (1)
              {
                v102 = *(unsigned char **)(v4 + 200);
                *(void *)(v4 + 200) = v102 + 1;
                unsigned char *v102 = BYTE2(v100);
                uint64_t v103 = *(void *)(v4 + 208) - 1;
                *(void *)(v4 + 208) = v103;
                if (!v103) {
                  break;
                }
                if ((~v100 & 0xFF0000) == 0) {
                  goto LABEL_116;
                }
LABEL_109:
                v100 <<= 8;
                v101 -= 8;
                if (v101 <= 15)
                {
                  int v112 = v101 - 8;
                  goto LABEL_121;
                }
              }
              uint64_t v104 = *(void *)(*(void *)(v4 + 216) + 40);
              if (!(*(unsigned int (**)(void))(v104 + 24))())
              {
                v105 = *(uint64_t **)(v4 + 216);
                uint64_t v106 = *v105;
                *(_DWORD *)(v106 + 40) = 25;
                (*(void (**)(uint64_t *))v106)(v105);
              }
              *(void *)(v4 + 200) = *(void *)v104;
              *(void *)(v4 + 208) = *(void *)(v104 + 8);
              if ((~v100 & 0xFF0000) != 0) {
                goto LABEL_109;
              }
LABEL_116:
              v107 = *(unsigned char **)(v4 + 200);
              *(void *)(v4 + 200) = v107 + 1;
              unsigned char *v107 = 0;
              uint64_t v108 = *(void *)(v4 + 208) - 1;
              *(void *)(v4 + 208) = v108;
              if (!v108)
              {
                uint64_t v109 = *(void *)(*(void *)(v4 + 216) + 40);
                if (!(*(unsigned int (**)(void))(v109 + 24))())
                {
                  v110 = *(uint64_t **)(v4 + 216);
                  uint64_t v111 = *v110;
                  *(_DWORD *)(v111 + 40) = 25;
                  (*(void (**)(uint64_t *))v111)(v110);
                }
                *(void *)(v4 + 200) = *(void *)v109;
                *(void *)(v4 + 208) = *(void *)(v109 + 8);
              }
              goto LABEL_109;
            }
            int v112 = v99 + 1;
LABEL_121:
            *(void *)(v4 + 24) = v100;
            *(_DWORD *)(v4 + 32) = v112;
            while (--v9)
            {
              ++v21;
              if (!*(unsigned char *)(v4 + 192)) {
                goto LABEL_106;
              }
            }
          }
        }
LABEL_20:
        unsigned int v9 = 0;
        unsigned int v23 = 0;
        uint64_t v8 = (v20 - 16);
        uint64_t v21 = *(unsigned char **)(v4 + 240);
        BOOL v24 = (int)v20 <= 31;
        LODWORD(v20) = v20 - 16;
        if (v24) {
          goto LABEL_17;
        }
      }
      if (v25 == 1)
      {
        unsigned int v26 = 0;
      }
      else
      {
        unsigned int v27 = -1;
        do
        {
          ++v27;
          BOOL v24 = v25 > 3;
          v25 >>= 1;
        }
        while (v24);
        unsigned int v26 = v27 + 1;
        if (v27 >= 0xE)
        {
          uint64_t v28 = *(uint64_t **)(v4 + 216);
          uint64_t v29 = *v28;
          *(_DWORD *)(v29 + 40) = 41;
          (*(void (**)(uint64_t *))v29)(v28);
        }
      }
      uint64_t v30 = *(int *)(v4 + 224);
      int v31 = *(unsigned __int8 *)(v4 + 192);
      uint64_t v32 = (int)(16 * v26);
      if (*(unsigned char *)(v4 + 192))
      {
        ++*(void *)(*(void *)(v4 + 8 * v30 + 160) + 8 * v32);
        goto LABEL_47;
      }
      uint64_t v33 = *(void *)(v4 + 8 * v30 + 96);
      unsigned int v34 = *(_DWORD *)(v33 + 4 * v32);
      uint64_t v35 = v33 + v32;
      int v36 = *(char *)(v35 + 1024);
      if (!*(unsigned char *)(v35 + 1024))
      {
        uint64_t v50 = *(uint64_t **)(v4 + 216);
        uint64_t v51 = *v50;
        *(_DWORD *)(v51 + 40) = 41;
        (*(void (**)(uint64_t *))v51)(v50);
        int v31 = *(unsigned __int8 *)(v4 + 192);
        if (*(unsigned char *)(v4 + 192))
        {
LABEL_47:
          if (!v26) {
            goto LABEL_65;
          }
          if (v31)
          {
            *(_DWORD *)(v4 + 228) = 0;
LABEL_87:
            *(_DWORD *)(v4 + 232) = 0;
            goto LABEL_88;
          }
          int v52 = *(_DWORD *)(v4 + 32) + v26;
          unint64_t v53 = ((*(unsigned int *)(v4 + 228) & (unint64_t)~(-1 << v26)) << (24
                                                                                    - (*(unsigned char *)(v4 + 32)
                                                                                     + v26))) | *(void *)(v4 + 24);
          if (v52 < 8)
          {
            int v31 = 0;
            goto LABEL_64;
          }
          while (1)
          {
            int v54 = v52;
            uint64_t v55 = *(unsigned char **)(v4 + 200);
            *(void *)(v4 + 200) = v55 + 1;
            unsigned char *v55 = BYTE2(v53);
            uint64_t v56 = *(void *)(v4 + 208) - 1;
            *(void *)(v4 + 208) = v56;
            if (!v56) {
              break;
            }
            if ((~v53 & 0xFF0000) == 0) {
              goto LABEL_60;
            }
LABEL_53:
            v53 <<= 8;
            int v52 = v54 - 8;
            if (v54 <= 15)
            {
              int v31 = *(unsigned __int8 *)(v4 + 192);
LABEL_64:
              *(void *)(v4 + 24) = v53;
              *(_DWORD *)(v4 + 32) = v52;
LABEL_65:
              *(_DWORD *)(v4 + 228) = 0;
              int v65 = *(_DWORD *)(v4 + 232);
              if (!v65 || v31) {
                goto LABEL_87;
              }
              int8x16x3_t v66 = *(unsigned char **)(v4 + 240);
LABEL_68:
              int v67 = *(_DWORD *)(v4 + 32);
              unint64_t v68 = ((unint64_t)(*v66 & 1) << (23 - v67)) | *(void *)(v4 + 24);
              if (v67 < 7)
              {
                int v80 = v67 + 1;
LABEL_83:
                *(void *)(v4 + 24) = v68;
                *(_DWORD *)(v4 + 32) = v80;
                while (--v65)
                {
                  ++v66;
                  if (!*(unsigned char *)(v4 + 192)) {
                    goto LABEL_68;
                  }
                }
                goto LABEL_87;
              }
              int v69 = v67 + 9;
              while (2)
              {
                v70 = *(unsigned char **)(v4 + 200);
                *(void *)(v4 + 200) = v70 + 1;
                unsigned char *v70 = BYTE2(v68);
                uint64_t v71 = *(void *)(v4 + 208) - 1;
                *(void *)(v4 + 208) = v71;
                if (v71)
                {
                  if ((~v68 & 0xFF0000) == 0) {
                    goto LABEL_78;
                  }
                }
                else
                {
                  uint64_t v72 = *(void *)(*(void *)(v4 + 216) + 40);
                  if (!(*(unsigned int (**)(void))(v72 + 24))())
                  {
                    v73 = *(uint64_t **)(v4 + 216);
                    uint64_t v74 = *v73;
                    *(_DWORD *)(v74 + 40) = 25;
                    (*(void (**)(uint64_t *))v74)(v73);
                  }
                  *(void *)(v4 + 200) = *(void *)v72;
                  *(void *)(v4 + 208) = *(void *)(v72 + 8);
                  if ((~v68 & 0xFF0000) == 0)
                  {
LABEL_78:
                    v75 = *(unsigned char **)(v4 + 200);
                    *(void *)(v4 + 200) = v75 + 1;
                    unsigned char *v75 = 0;
                    uint64_t v76 = *(void *)(v4 + 208) - 1;
                    *(void *)(v4 + 208) = v76;
                    if (!v76)
                    {
                      uint64_t v77 = *(void *)(*(void *)(v4 + 216) + 40);
                      if (!(*(unsigned int (**)(void))(v77 + 24))())
                      {
                        v78 = *(uint64_t **)(v4 + 216);
                        uint64_t v79 = *v78;
                        *(_DWORD *)(v79 + 40) = 25;
                        (*(void (**)(uint64_t *))v79)(v78);
                      }
                      *(void *)(v4 + 200) = *(void *)v77;
                      *(void *)(v4 + 208) = *(void *)(v77 + 8);
                    }
                  }
                }
                v68 <<= 8;
                v69 -= 8;
                if (v69 <= 15)
                {
                  int v80 = v69 - 8;
                  goto LABEL_83;
                }
                continue;
              }
            }
          }
          uint64_t v57 = *(void *)(*(void *)(v4 + 216) + 40);
          if (!(*(unsigned int (**)(void))(v57 + 24))())
          {
            v58 = *(uint64_t **)(v4 + 216);
            uint64_t v59 = *v58;
            *(_DWORD *)(v59 + 40) = 25;
            (*(void (**)(uint64_t *))v59)(v58);
          }
          *(void *)(v4 + 200) = *(void *)v57;
          *(void *)(v4 + 208) = *(void *)(v57 + 8);
          if ((~v53 & 0xFF0000) != 0) {
            goto LABEL_53;
          }
LABEL_60:
          v60 = *(unsigned char **)(v4 + 200);
          *(void *)(v4 + 200) = v60 + 1;
          unsigned char *v60 = 0;
          uint64_t v61 = *(void *)(v4 + 208) - 1;
          *(void *)(v4 + 208) = v61;
          if (!v61)
          {
            uint64_t v62 = *(void *)(*(void *)(v4 + 216) + 40);
            if (!(*(unsigned int (**)(void))(v62 + 24))())
            {
              __int8 v63 = *(uint64_t **)(v4 + 216);
              uint64_t v64 = *v63;
              *(_DWORD *)(v64 + 40) = 25;
              (*(void (**)(uint64_t *))v64)(v63);
            }
            *(void *)(v4 + 200) = *(void *)v62;
            *(void *)(v4 + 208) = *(void *)(v62 + 8);
          }
          goto LABEL_53;
        }
      }
      int v37 = *(_DWORD *)(v4 + 32) + v36;
      unint64_t v38 = ((unint64_t)(~(-1 << v36) & v34) << (24 - (*(unsigned char *)(v4 + 32) + v36))) | *(void *)(v4 + 24);
      if (v37 < 8)
      {
        int v31 = 0;
        goto LABEL_45;
      }
      while (1)
      {
        int v39 = v37;
        int v40 = *(unsigned char **)(v4 + 200);
        *(void *)(v4 + 200) = v40 + 1;
        *int v40 = BYTE2(v38);
        uint64_t v41 = *(void *)(v4 + 208) - 1;
        *(void *)(v4 + 208) = v41;
        if (!v41) {
          break;
        }
        if ((~v38 & 0xFF0000) == 0) {
          goto LABEL_41;
        }
LABEL_34:
        v38 <<= 8;
        int v37 = v39 - 8;
        if (v39 <= 15)
        {
          int v31 = *(unsigned __int8 *)(v4 + 192);
LABEL_45:
          *(void *)(v4 + 24) = v38;
          *(_DWORD *)(v4 + 32) = v37;
          goto LABEL_47;
        }
      }
      uint64_t v42 = *(void *)(*(void *)(v4 + 216) + 40);
      if (!(*(unsigned int (**)(void))(v42 + 24))())
      {
        uint64_t v43 = *(uint64_t **)(v4 + 216);
        uint64_t v44 = *v43;
        *(_DWORD *)(v44 + 40) = 25;
        (*(void (**)(uint64_t *))v44)(v43);
      }
      *(void *)(v4 + 200) = *(void *)v42;
      *(void *)(v4 + 208) = *(void *)(v42 + 8);
      if ((~v38 & 0xFF0000) != 0) {
        goto LABEL_34;
      }
LABEL_41:
      uint64_t v45 = *(unsigned char **)(v4 + 200);
      *(void *)(v4 + 200) = v45 + 1;
      *uint64_t v45 = 0;
      uint64_t v46 = *(void *)(v4 + 208) - 1;
      *(void *)(v4 + 208) = v46;
      if (!v46)
      {
        uint64_t v47 = *(void *)(*(void *)(v4 + 216) + 40);
        if (!(*(unsigned int (**)(void))(v47 + 24))())
        {
          int v48 = *(uint64_t **)(v4 + 216);
          uint64_t v49 = *v48;
          *(_DWORD *)(v49 + 40) = 25;
          (*(void (**)(uint64_t *))v49)(v48);
        }
        *(void *)(v4 + 200) = *(void *)v47;
        *(void *)(v4 + 208) = *(void *)(v47 + 8);
      }
      goto LABEL_34;
    }
LABEL_17:
    LOBYTE(v22) = v142;
    if (v142 >= 2)
    {
LABEL_18:
      unsigned int v9 = v23 + 1;
      v21[v23] = v22 & 1;
      goto LABEL_148;
    }
LABEL_128:
    sub_1003BFBAC(v4);
    uint64_t v115 = *(int *)(v4 + 224);
    uint64_t v116 = (16 * (int)v8) | 1;
    if (*(unsigned char *)(v4 + 192))
    {
      ++*(void *)(*(void *)(v4 + 8 * v115 + 160) + 8 * v116);
      goto LABEL_147;
    }
    sub_1003BFFB8(v4, *(_DWORD *)(*(void *)(v4 + 8 * v115 + 96) + 4 * v116), *(char *)(*(void *)(v4 + 8 * v115 + 96) + v116 + 1024));
    if (!*(unsigned char *)(v4 + 192))
    {
      int v117 = *(_DWORD *)(v4 + 32);
      unint64_t v118 = ((unint64_t)((*(unsigned __int16 *)(v137 + 2 * *(int *)(v138 + 4 * v143)) >> 15) ^ 1u) << (23 - v117)) | *(void *)(v4 + 24);
      if (v117 < 7)
      {
        int v130 = v117 + 1;
        goto LABEL_146;
      }
      int v119 = v117 + 9;
      while (1)
      {
        v120 = *(unsigned char **)(v4 + 200);
        *(void *)(v4 + 200) = v120 + 1;
        unsigned char *v120 = BYTE2(v118);
        uint64_t v121 = *(void *)(v4 + 208) - 1;
        *(void *)(v4 + 208) = v121;
        if (!v121) {
          break;
        }
        if ((~v118 & 0xFF0000) == 0) {
          goto LABEL_141;
        }
LABEL_134:
        v118 <<= 8;
        v119 -= 8;
        if (v119 <= 15)
        {
          int v130 = v119 - 8;
LABEL_146:
          *(void *)(v4 + 24) = v118;
          *(_DWORD *)(v4 + 32) = v130;
          goto LABEL_147;
        }
      }
      uint64_t v122 = *(void *)(*(void *)(v4 + 216) + 40);
      if (!(*(unsigned int (**)(void))(v122 + 24))())
      {
        v123 = *(uint64_t **)(v4 + 216);
        uint64_t v124 = *v123;
        *(_DWORD *)(v124 + 40) = 25;
        (*(void (**)(uint64_t *))v124)(v123);
      }
      *(void *)(v4 + 200) = *(void *)v122;
      *(void *)(v4 + 208) = *(void *)(v122 + 8);
      if ((~v118 & 0xFF0000) != 0) {
        goto LABEL_134;
      }
LABEL_141:
      v125 = *(unsigned char **)(v4 + 200);
      *(void *)(v4 + 200) = v125 + 1;
      unsigned char *v125 = 0;
      uint64_t v126 = *(void *)(v4 + 208) - 1;
      *(void *)(v4 + 208) = v126;
      if (!v126)
      {
        uint64_t v127 = *(void *)(*(void *)(v4 + 216) + 40);
        if (!(*(unsigned int (**)(void))(v127 + 24))())
        {
          v128 = *(uint64_t **)(v4 + 216);
          uint64_t v129 = *v128;
          *(_DWORD *)(v129 + 40) = 25;
          (*(void (**)(uint64_t *))v129)(v128);
        }
        *(void *)(v4 + 200) = *(void *)v127;
        *(void *)(v4 + 208) = *(void *)(v127 + 8);
      }
      goto LABEL_134;
    }
LABEL_147:
    sub_1003C016C(v4, v21, v23);
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    uint64_t v21 = *(unsigned char **)(v4 + 240);
LABEL_148:
    int v13 = v141;
    uint64_t v14 = v143 + 1;
    uint64_t v20 = v8;
  }
  while (v141 != v143 + 1);
LABEL_149:
  if ((int)v8 > 0 || v9)
  {
    int v131 = *(_DWORD *)(v4 + 228) + 1;
    unsigned int v132 = *(_DWORD *)(v4 + 232) + v9;
    *(_DWORD *)(v4 + 228) = v131;
    *(_DWORD *)(v4 + 232) = v132;
    if (v131 == 0x7FFF || v132 >= 0x3AA) {
      sub_1003BFBAC(v4);
    }
  }
  v133 = *(void **)(v139 + 40);
  void *v133 = *(void *)(v4 + 200);
  v133[1] = *(void *)(v4 + 208);
  int v134 = *(_DWORD *)(v139 + 304);
  if (v134)
  {
    int v135 = *(_DWORD *)(v4 + 56);
    if (!v135)
    {
      *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
      int v135 = v134;
    }
    *(_DWORD *)(v4 + 56) = v135 - 1;
  }
  return 1;
}

uint64_t sub_1003BE7DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[68];
  if (*((_DWORD *)a1 + 76))
  {
    int v4 = *(_DWORD *)(v3 + 56);
    if (!v4)
    {
      if (*((int *)a1 + 89) < 1)
      {
        int v4 = *((_DWORD *)a1 + 76);
      }
      else
      {
        uint64_t v5 = 0;
        do
          *(_DWORD *)(v3 + 36 + 4 * v5++) = 0;
        while (v5 < *((int *)a1 + 89));
        int v4 = *((_DWORD *)a1 + 76);
      }
    }
    *(_DWORD *)(v3 + 56) = v4 - 1;
  }
  if (*((int *)a1 + 100) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v33 = v3;
    uint64_t v34 = a2;
    do
    {
      uint64_t v7 = *((int *)a1 + v6 + 101);
      uint64_t v8 = a1[v7 + 45];
      unsigned int v9 = *(__int16 **)(a2 + 8 * v6);
      uint64_t v10 = v3 + 4 * v7;
      int v12 = *(_DWORD *)(v10 + 36);
      int v11 = (_DWORD *)(v10 + 36);
      uint64_t v13 = *(void *)(v3 + 8 * *(int *)(v8 + 20) + 128);
      uint64_t v14 = *(void **)(v3 + 8 * *(int *)(v8 + 24) + 160);
      uint64_t v15 = *((unsigned int *)a1 + 118);
      uint64_t v16 = a1[58];
      LODWORD(v8) = *v9;
      int v17 = v8 - v12;
      if (v8 == v12)
      {
        unsigned int v18 = 0;
      }
      else
      {
        if (v17 >= 0) {
          unsigned int v19 = v17;
        }
        else {
          unsigned int v19 = -v17;
        }
        unsigned int v20 = -1;
        do
        {
          ++v20;
          BOOL v21 = v19 > 1;
          v19 >>= 1;
        }
        while (v21);
        unsigned int v18 = v20 + 1;
        if (v20 >= 0xB)
        {
          uint64_t v22 = *a1;
          *(_DWORD *)(v22 + 40) = 6;
          (*(void (**)(uint64_t *))v22)(a1);
        }
      }
      ++*(void *)(v13 + 8 * v18);
      if ((int)v15 >= 1)
      {
        unsigned int v23 = 0;
        uint64_t v24 = v15 + 1;
        uint64_t v25 = 1;
        do
        {
          while (1)
          {
            signed int v26 = v23;
            LOWORD(v23) = v9[*(int *)(v16 + 4 * v25)];
            if (!(_WORD)v23) {
              break;
            }
            if (v26 >= 16)
            {
              if (v26 >= 31) {
                int v27 = 31;
              }
              else {
                int v27 = v26;
              }
              unsigned int v28 = v26 - v27 + 15;
              signed int v26 = v26 - (v28 & 0xFFFFFFF0) - 16;
              v14[240] += (v28 >> 4) + 1;
            }
            if ((v23 & 0x8000u) != 0) {
              unsigned int v23 = -(__int16)v23;
            }
            unsigned int v23 = (unsigned __int16)v23;
            if ((unsigned __int16)v23 >= 2u)
            {
              unsigned int v30 = 0;
              do
              {
                ++v30;
                BOOL v21 = v23 > 3;
                v23 >>= 1;
              }
              while (v21);
              int v29 = v30 + 1;
              if (v30 >= 0xA)
              {
                uint64_t v31 = *a1;
                *(_DWORD *)(v31 + 40) = 6;
                (*(void (**)(uint64_t *))v31)(a1);
              }
            }
            else
            {
              int v29 = 1;
            }
            unsigned int v23 = 0;
            ++v14[16 * v26 + v29];
            if (++v25 == v24) {
              goto LABEL_11;
            }
          }
          unsigned int v23 = v26 + 1;
          ++v25;
        }
        while (v25 != v24);
        if ((v26 & 0x80000000) == 0) {
          ++*v14;
        }
      }
LABEL_11:
      uint64_t v3 = v33;
      a2 = v34;
      *int v11 = **(__int16 **)(v34 + 8 * v6++);
    }
    while (v6 < *((int *)a1 + 100));
  }
  return 1;
}

uint64_t sub_1003BEA5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (int *)a1;
  uint64_t v4 = a1[68];
  unsigned int v132 = 0;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v129 = 0u;
  uint64_t v5 = a1[5];
  uint64_t v6 = *(unsigned char **)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  *(void *)&long long v129 = *(void *)v5;
  *((void *)&v129 + 1) = v7;
  long long v8 = *(_OWORD *)(v4 + 40);
  long long v130 = *(_OWORD *)(v4 + 24);
  long long v131 = v8;
  unsigned int v132 = (int *)a1;
  if (!*((_DWORD *)a1 + 76) || *(_DWORD *)(v4 + 56)) {
    goto LABEL_3;
  }
  int v107 = *(_DWORD *)(v4 + 60);
  if (SDWORD2(v130) < 1) {
    goto LABEL_139;
  }
  uint64_t v108 = v130 | (127 << (17 - BYTE8(v130)));
  int v109 = DWORD2(v130) + 15;
  do
  {
    v110 = (unsigned char *)v129;
    *(void *)&long long v129 = v129 + 1;
    unsigned char *v110 = BYTE2(v108);
    if (--*((void *)&v129 + 1))
    {
      if ((~v108 & 0xFF0000) != 0) {
        goto LABEL_129;
      }
    }
    else
    {
      uint64_t v111 = *((void *)v132 + 5);
      uint64_t result = (*(uint64_t (**)(void))(v111 + 24))();
      if (!result) {
        return result;
      }
      uint64_t v112 = *(void *)(v111 + 8);
      *(void *)&long long v129 = *(void *)v111;
      *((void *)&v129 + 1) = v112;
      if ((~v108 & 0xFF0000) != 0) {
        goto LABEL_129;
      }
    }
    v113 = (unsigned char *)v129;
    *(void *)&long long v129 = v129 + 1;
    unsigned char *v113 = 0;
    if (!--*((void *)&v129 + 1))
    {
      uint64_t v114 = *((void *)v132 + 5);
      uint64_t result = (*(uint64_t (**)(void))(v114 + 24))();
      if (!result) {
        return result;
      }
      uint64_t v115 = *(void *)(v114 + 8);
      *(void *)&long long v129 = *(void *)v114;
      *((void *)&v129 + 1) = v115;
    }
LABEL_129:
    LODWORD(v108) = v108 << 8;
    v109 -= 8;
  }
  while (v109 > 15);
  uint64_t v6 = (unsigned char *)v129;
LABEL_139:
  DWORD2(v130) = 0;
  *(void *)&long long v130 = 0;
  *(void *)&long long v129 = v6 + 1;
  *uint64_t v6 = -1;
  if (--*((void *)&v129 + 1))
  {
    uint64_t v116 = (unsigned char *)v129;
    goto LABEL_143;
  }
  uint64_t v117 = *((void *)v132 + 5);
  uint64_t result = (*(uint64_t (**)(void))(v117 + 24))();
  if (result)
  {
    uint64_t v116 = *(unsigned char **)v117;
    *((void *)&v129 + 1) = *(void *)(v117 + 8);
LABEL_143:
    *(void *)&long long v129 = v116 + 1;
    *uint64_t v116 = v107 - 48;
    unint64_t v118 = (uint64_t *)v132;
    uint64_t v7 = --*((void *)&v129 + 1);
    if (*((void *)&v129 + 1))
    {
      if (v132[89] < 1) {
        goto LABEL_3;
      }
LABEL_148:
      uint64_t v120 = 0;
      do
        *((_DWORD *)&v130 + v120++ + 3) = 0;
      while (v120 < *((int *)v118 + 89));
LABEL_3:
      if (v3[100] < 1) {
        goto LABEL_121;
      }
      uint64_t v9 = 0;
      uint64_t v123 = a2;
      while (1)
      {
        uint64_t v10 = v3[v9 + 101];
        int v11 = *(__int16 **)(a2 + 8 * v9);
        int v12 = (char *)&v129 + 4 * v10;
        int v13 = *((_DWORD *)v12 + 7);
        uint64_t v14 = *(void *)&v3[2 * v10 + 90];
        uint64_t v15 = *(void *)(v4 + 8 * *(int *)(v14 + 20) + 64);
        uint64_t v16 = (uint64_t *)v132;
        uint64_t v127 = v132[118];
        v128 = *(unsigned int **)(v4 + 8 * *(int *)(v14 + 24) + 96);
        uint64_t v125 = v9;
        uint64_t v126 = *((void *)v132 + 58);
        LODWORD(v14) = *v11;
        int v17 = v14 - v13;
        uint64_t v124 = v12 + 28;
        if (v14 == v13)
        {
          unsigned int v18 = 0;
        }
        else
        {
          if (v17 >= 0) {
            unsigned int v19 = v17;
          }
          else {
            unsigned int v19 = -v17;
          }
          unsigned int v20 = -1;
          do
          {
            ++v20;
            BOOL v21 = v19 > 1;
            v19 >>= 1;
          }
          while (v21);
          unsigned int v18 = v20 + 1;
          if (v20 >= 0xB)
          {
            uint64_t v22 = *(void *)v132;
            *(_DWORD *)(v22 + 40) = 6;
            (*(void (**)(uint64_t *))v22)(v16);
          }
        }
        uint64_t v23 = v18;
        unsigned int v24 = *(_DWORD *)(v15 + 4 * v18);
        int v25 = *(char *)(v15 + v23 + 1024);
        if (!v25)
        {
          uint64_t v26 = *v16;
          *(_DWORD *)(v26 + 40) = 41;
          (*(void (**)(uint64_t *))v26)(v16);
        }
        int v27 = DWORD2(v130) + v25;
        unint64_t v28 = ((unint64_t)(~(-1 << v25) & v24) << (24 - (BYTE8(v130) + v25))) | v130;
        if (DWORD2(v130) + v25 >= 8) {
          break;
        }
        int v29 = DWORD2(v130) + v25;
LABEL_18:
        *(void *)&long long v130 = v28;
        DWORD2(v130) = v29;
        if (!v23) {
          goto LABEL_22;
        }
        uint64_t v30 = ~(-1 << v23) & (v17 + (v17 >> 31));
        int v31 = v29 + v23;
        v28 |= v30 << (24 - v31);
        if (v31 >= 8)
        {
          while (1)
          {
            int v85 = (unsigned char *)v129;
            *(void *)&long long v129 = v129 + 1;
            *int v85 = BYTE2(v28);
            uint64_t v7 = --*((void *)&v129 + 1);
            if (*((void *)&v129 + 1))
            {
              if ((~v28 & 0xFF0000) != 0) {
                goto LABEL_96;
              }
            }
            else
            {
              uint64_t v86 = *((void *)v132 + 5);
              uint64_t result = (*(uint64_t (**)(void))(v86 + 24))();
              if (!result) {
                return result;
              }
              uint64_t v7 = *(void *)(v86 + 8);
              *(void *)&long long v129 = *(void *)v86;
              *((void *)&v129 + 1) = v7;
              if ((~v28 & 0xFF0000) != 0) {
                goto LABEL_96;
              }
            }
            int v87 = (unsigned char *)v129;
            *(void *)&long long v129 = v129 + 1;
            *int v87 = 0;
            uint64_t v7 = --*((void *)&v129 + 1);
            if (!*((void *)&v129 + 1))
            {
              uint64_t v88 = *((void *)v132 + 5);
              uint64_t result = (*(uint64_t (**)(void))(v88 + 24))();
              if (!result) {
                return result;
              }
              uint64_t v7 = *(void *)(v88 + 8);
              *(void *)&long long v129 = *(void *)v88;
              *((void *)&v129 + 1) = v7;
            }
LABEL_96:
            v28 <<= 8;
            int v29 = v31 - 8;
            BOOL v21 = v31 <= 15;
            v31 -= 8;
            if (v21) {
              goto LABEL_21;
            }
          }
        }
        int v29 = v31;
LABEL_21:
        *(void *)&long long v130 = v28;
        DWORD2(v130) = v29;
LABEL_22:
        uint64_t v32 = v126;
        if ((int)v127 < 1) {
          goto LABEL_110;
        }
        uint64_t v33 = 1;
        uint64_t v122 = (uint64_t *)v3;
        do
        {
          int v34 = 0;
          uint64_t v35 = v33;
          while (1)
          {
            uint64_t v36 = *(int *)(v32 + 4 * v35);
            int v37 = v11[v36];
            if (v11[v36]) {
              break;
            }
            ++v34;
            if (v127 + 1 == ++v35)
            {
              unsigned int v89 = *v128;
              int v90 = *((char *)v128 + 1024);
              if (!*((unsigned char *)v128 + 1024))
              {
                uint64_t v91 = (uint64_t *)v132;
                uint64_t v92 = *(void *)v132;
                *(_DWORD *)(v92 + 40) = 41;
                (*(void (**)(uint64_t *))v92)(v91);
              }
              uint64_t v93 = ~(-1 << v90) & v89;
              int v94 = v29 + v90;
              unint64_t v95 = (v93 << (24 - (v29 + v90))) | v28;
              uint64_t v3 = (int *)v122;
              if (v29 + v90 < 8)
              {
                int v96 = v29 + v90;
LABEL_109:
                *(void *)&long long v130 = v95;
                DWORD2(v130) = v96;
                goto LABEL_110;
              }
              while (2)
              {
                v97 = (unsigned char *)v129;
                *(void *)&long long v129 = v129 + 1;
                unsigned char *v97 = BYTE2(v95);
                uint64_t v7 = --*((void *)&v129 + 1);
                if (*((void *)&v129 + 1))
                {
                  if ((~v95 & 0xFF0000) == 0)
                  {
LABEL_118:
                    unint64_t v100 = (unsigned char *)v129;
                    *(void *)&long long v129 = v129 + 1;
                    *unint64_t v100 = 0;
                    uint64_t v7 = --*((void *)&v129 + 1);
                    if (!*((void *)&v129 + 1))
                    {
                      int v101 = (uint64_t *)*((void *)v132 + 5);
                      uint64_t result = ((uint64_t (*)(void))v101[3])();
                      if (!result) {
                        return result;
                      }
                      uint64_t v102 = *v101;
                      uint64_t v7 = v101[1];
                      *(void *)&long long v129 = v102;
                      *((void *)&v129 + 1) = v7;
                    }
                  }
                }
                else
                {
                  uint64_t v98 = (uint64_t *)*((void *)v132 + 5);
                  uint64_t result = ((uint64_t (*)(void))v98[3])();
                  if (!result) {
                    return result;
                  }
                  uint64_t v99 = *v98;
                  uint64_t v7 = v98[1];
                  *(void *)&long long v129 = v99;
                  *((void *)&v129 + 1) = v7;
                  if ((~v95 & 0xFF0000) == 0) {
                    goto LABEL_118;
                  }
                }
                v95 <<= 8;
                int v96 = v94 - 8;
                BOOL v21 = v94 <= 15;
                v94 -= 8;
                if (v21) {
                  goto LABEL_109;
                }
                continue;
              }
            }
          }
          uint64_t v121 = v4;
          if (v34 >= 0x10)
          {
            while (1)
            {
              unsigned int v41 = v128[240];
              int v42 = *((char *)v128 + 1264);
              if (!*((unsigned char *)v128 + 1264))
              {
                uint64_t v43 = (uint64_t *)v132;
                uint64_t v44 = *(void *)v132;
                *(_DWORD *)(v44 + 40) = 41;
                (*(void (**)(uint64_t *))v44)(v43);
              }
              uint64_t v45 = ~(-1 << v42) & v41;
              unsigned int v46 = v29 + v42;
              v28 |= v45 << (24 - (v29 + v42));
              if (v29 + v42 >= 8) {
                break;
              }
              v29 += v42;
LABEL_35:
              *(void *)&long long v130 = v28;
              DWORD2(v130) = v29;
              int v38 = v34 - 16;
              BOOL v21 = v34 <= 31;
              v34 -= 16;
              if (v21) {
                goto LABEL_30;
              }
            }
            while (1)
            {
              uint64_t v47 = (unsigned char *)v129;
              *(void *)&long long v129 = v129 + 1;
              unsigned char *v47 = BYTE2(v28);
              uint64_t v7 = --*((void *)&v129 + 1);
              if (*((void *)&v129 + 1))
              {
                if ((~v28 & 0xFF0000) != 0) {
                  goto LABEL_40;
                }
              }
              else
              {
                int v48 = (uint64_t *)*((void *)v132 + 5);
                uint64_t result = ((uint64_t (*)(void))v48[3])();
                if (!result) {
                  return result;
                }
                uint64_t v50 = *v48;
                uint64_t v7 = v48[1];
                *(void *)&long long v129 = v50;
                *((void *)&v129 + 1) = v7;
                if ((~v28 & 0xFF0000) != 0) {
                  goto LABEL_40;
                }
              }
              uint64_t v51 = (unsigned char *)v129;
              *(void *)&long long v129 = v129 + 1;
              *uint64_t v51 = 0;
              uint64_t v7 = --*((void *)&v129 + 1);
              if (!*((void *)&v129 + 1))
              {
                int v52 = (uint64_t *)*((void *)v132 + 5);
                uint64_t result = ((uint64_t (*)(void))v52[3])();
                if (!result) {
                  return result;
                }
                uint64_t v53 = *v52;
                uint64_t v7 = v52[1];
                *(void *)&long long v129 = v53;
                *((void *)&v129 + 1) = v7;
              }
LABEL_40:
              v28 <<= 8;
              int v29 = v46 - 8;
              BOOL v21 = v46 > 0xF;
              v46 -= 8;
              if (!v21) {
                goto LABEL_35;
              }
            }
          }
          int v38 = v34;
LABEL_30:
          if (v37 >= 0) {
            unsigned int v39 = v37;
          }
          else {
            unsigned int v39 = -v37;
          }
          if (v39 >= 2)
          {
            unsigned int v54 = 0;
            do
            {
              ++v54;
              BOOL v21 = v39 > 3;
              v39 >>= 1;
            }
            while (v21);
            int v40 = v54 + 1;
            if (v54 >= 0xA)
            {
              uint64_t v55 = (uint64_t *)v132;
              uint64_t v56 = *(void *)v132;
              *(_DWORD *)(v56 + 40) = 6;
              (*(void (**)(uint64_t *))v56)(v55);
            }
          }
          else
          {
            int v40 = 1;
          }
          int v57 = v40 + 16 * v38;
          unsigned int v58 = v128[v57];
          uint64_t v59 = (uint64_t)v128 + v57;
          int v60 = *(char *)(v59 + 1024);
          if (!*(unsigned char *)(v59 + 1024))
          {
            uint64_t v61 = (uint64_t *)v132;
            uint64_t v62 = *(void *)v132;
            *(_DWORD *)(v62 + 40) = 41;
            (*(void (**)(uint64_t *))v62)(v61);
          }
          uint64_t v63 = ~(-1 << v60) & v58;
          unsigned int v64 = v29 + v60;
          unint64_t v65 = (v63 << (24 - (v29 + v60))) | v28;
          if (v29 + v60 >= 8)
          {
            uint64_t v4 = v121;
            while (1)
            {
              unint64_t v68 = (unsigned char *)v129;
              *(void *)&long long v129 = v129 + 1;
              *unint64_t v68 = BYTE2(v65);
              uint64_t v7 = --*((void *)&v129 + 1);
              if (*((void *)&v129 + 1))
              {
                if ((~v65 & 0xFF0000) != 0) {
                  goto LABEL_59;
                }
              }
              else
              {
                int v69 = (uint64_t *)*((void *)v132 + 5);
                uint64_t result = ((uint64_t (*)(void))v69[3])();
                if (!result) {
                  return result;
                }
                uint64_t v70 = *v69;
                uint64_t v7 = v69[1];
                *(void *)&long long v129 = v70;
                *((void *)&v129 + 1) = v7;
                if ((~v65 & 0xFF0000) != 0) {
                  goto LABEL_59;
                }
              }
              uint64_t v71 = (unsigned char *)v129;
              *(void *)&long long v129 = v129 + 1;
              *uint64_t v71 = 0;
              uint64_t v7 = --*((void *)&v129 + 1);
              if (!*((void *)&v129 + 1))
              {
                uint64_t v72 = (uint64_t *)*((void *)v132 + 5);
                uint64_t result = ((uint64_t (*)(void))v72[3])();
                if (!result) {
                  return result;
                }
                uint64_t v66 = *v72;
                uint64_t v7 = v72[1];
                *(void *)&long long v129 = v66;
                *((void *)&v129 + 1) = v7;
              }
LABEL_59:
              v65 <<= 8;
              unsigned int v67 = v64 - 8;
              BOOL v21 = v64 > 0xF;
              v64 -= 8;
              if (!v21) {
                goto LABEL_70;
              }
            }
          }
          unsigned int v67 = v29 + v60;
          uint64_t v4 = v121;
LABEL_70:
          unsigned int v73 = v67 + v40;
          unint64_t v28 = ((unint64_t)(~(-1 << v40) & (v37 + (v37 >> 15))) << (24
                                                                                        - (v67
                                                                                         + v40))) | v65;
          if ((int)(v67 + v40) >= 8)
          {
            while (1)
            {
              v75 = (unsigned char *)v129;
              *(void *)&long long v129 = v129 + 1;
              unsigned char *v75 = BYTE2(v28);
              uint64_t v7 = --*((void *)&v129 + 1);
              if (*((void *)&v129 + 1))
              {
                if ((~v28 & 0xFF0000) != 0) {
                  goto LABEL_75;
                }
              }
              else
              {
                uint64_t v76 = (uint64_t *)*((void *)v132 + 5);
                uint64_t result = ((uint64_t (*)(void))v76[3])();
                if (!result) {
                  return result;
                }
                uint64_t v77 = *v76;
                uint64_t v7 = v76[1];
                *(void *)&long long v129 = v77;
                *((void *)&v129 + 1) = v7;
                if ((~v28 & 0xFF0000) != 0) {
                  goto LABEL_75;
                }
              }
              v78 = (unsigned char *)v129;
              *(void *)&long long v129 = v129 + 1;
              unsigned char *v78 = 0;
              uint64_t v7 = --*((void *)&v129 + 1);
              if (!*((void *)&v129 + 1))
              {
                uint64_t v79 = (uint64_t *)*((void *)v132 + 5);
                uint64_t result = ((uint64_t (*)(void))v79[3])();
                if (!result) {
                  return result;
                }
                uint64_t v80 = *v79;
                uint64_t v7 = v79[1];
                *(void *)&long long v129 = v80;
                *((void *)&v129 + 1) = v7;
              }
LABEL_75:
              v28 <<= 8;
              int v29 = v73 - 8;
              BOOL v21 = v73 > 0xF;
              v73 -= 8;
              if (!v21) {
                goto LABEL_72;
              }
            }
          }
          int v29 = v67 + v40;
LABEL_72:
          *(void *)&long long v130 = v28;
          DWORD2(v130) = v29;
          uint64_t v33 = v35 + 1;
          BOOL v74 = v127 == v35;
          uint64_t v3 = (int *)v122;
          uint64_t v32 = v126;
        }
        while (!v74);
LABEL_110:
        a2 = v123;
        *uint64_t v124 = **(__int16 **)(v123 + 8 * v125);
        uint64_t v9 = v125 + 1;
        if (v125 + 1 >= v3[100])
        {
LABEL_121:
          uint64_t v103 = (void *)*((void *)v3 + 5);
          *uint64_t v103 = v129;
          v103[1] = v7;
          long long v104 = v131;
          *(_OWORD *)(v4 + 24) = v130;
          *(_OWORD *)(v4 + 40) = v104;
          int v105 = v3[76];
          if (v105)
          {
            int v106 = *(_DWORD *)(v4 + 56);
            if (!v106)
            {
              *(_DWORD *)(v4 + 60) = (*(_DWORD *)(v4 + 60) + 1) & 7;
              int v106 = v105;
            }
            *(_DWORD *)(v4 + 56) = v106 - 1;
          }
          return 1;
        }
      }
      while (2)
      {
        uint64_t v81 = (unsigned char *)v129;
        *(void *)&long long v129 = v129 + 1;
        *uint64_t v81 = BYTE2(v28);
        uint64_t v7 = --*((void *)&v129 + 1);
        if (*((void *)&v129 + 1))
        {
          if ((~v28 & 0xFF0000) == 0)
          {
LABEL_92:
            unsigned int v83 = (unsigned char *)v129;
            *(void *)&long long v129 = v129 + 1;
            *unsigned int v83 = 0;
            uint64_t v7 = --*((void *)&v129 + 1);
            if (!*((void *)&v129 + 1))
            {
              uint64_t v84 = *((void *)v132 + 5);
              uint64_t result = (*(uint64_t (**)(void))(v84 + 24))();
              if (!result) {
                return result;
              }
              uint64_t v7 = *(void *)(v84 + 8);
              *(void *)&long long v129 = *(void *)v84;
              *((void *)&v129 + 1) = v7;
            }
          }
        }
        else
        {
          uint64_t v82 = *((void *)v132 + 5);
          uint64_t result = (*(uint64_t (**)(void))(v82 + 24))();
          if (!result) {
            return result;
          }
          uint64_t v7 = *(void *)(v82 + 8);
          *(void *)&long long v129 = *(void *)v82;
          *((void *)&v129 + 1) = v7;
          if ((~v28 & 0xFF0000) == 0) {
            goto LABEL_92;
          }
        }
        v28 <<= 8;
        int v29 = v27 - 8;
        BOOL v21 = v27 <= 15;
        v27 -= 8;
        if (v21) {
          goto LABEL_18;
        }
        continue;
      }
    }
    uint64_t v119 = *((void *)v132 + 5);
    uint64_t result = (*(uint64_t (**)(int *))(v119 + 24))(v132);
    if (result)
    {
      uint64_t v7 = *(void *)(v119 + 8);
      *(void *)&long long v129 = *(void *)v119;
      *((void *)&v129 + 1) = v7;
      if (v132[89] < 1) {
        goto LABEL_3;
      }
      goto LABEL_148;
    }
  }
  return result;
}

void *sub_1003BF4D0(void *result, int a2, unsigned int a3, void *a4)
{
  uint64_t v7 = result;
  if (a3 >= 4)
  {
    long long v8 = (uint64_t (**)(void))*result;
    *((_DWORD *)v8 + 10) = 52;
    *((_DWORD *)v8 + 11) = a3;
    uint64_t result = (void *)(*(uint64_t (**)(void *))*result)(result);
  }
  uint64_t v9 = &v7[a3];
  uint64_t v10 = (unsigned __int8 **)(v9 + 20);
  int v11 = (unsigned __int8 **)(v9 + 24);
  if (a2) {
    int v11 = v10;
  }
  int v12 = *v11;
  if (*v11)
  {
    int v13 = (_OWORD *)*a4;
    if (*a4) {
      goto LABEL_7;
    }
  }
  else
  {
    int v60 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v60 + 10) = 52;
    *((_DWORD *)v60 + 11) = a3;
    uint64_t result = (void *)(*(uint64_t (**)(void *))*v7)(v7);
    int v13 = (_OWORD *)*a4;
    if (*a4)
    {
LABEL_7:
      size_t v14 = v12[1];
      int v69 = a2;
      if (!v12[1]) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))v7[1])(v7, 1, 1280);
  int v13 = result;
  *a4 = result;
  size_t v14 = v12[1];
  int v69 = a2;
  if (v12[1]) {
LABEL_8:
  }
    uint64_t result = memset(__b, 1, v14);
LABEL_9:
  size_t v15 = v12[2];
  if ((v14 + v15) >= 0x101)
  {
    uint64_t v16 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v16 + 10) = 9;
    uint64_t result = (void *)(*v16)(v7);
  }
  if (v15)
  {
    uint64_t result = memset(&__b[v14], 2, v15);
    LODWORD(v14) = v14 + v15;
  }
  size_t v17 = v12[3];
  if ((int)v14 + (int)v17 >= 257)
  {
    unsigned int v18 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v18 + 10) = 9;
    uint64_t result = (void *)(*v18)(v7);
  }
  if (v17)
  {
    uint64_t result = memset(&__b[v14], 3, v17);
    LODWORD(v14) = v14 + v17;
  }
  size_t v19 = v12[4];
  if ((int)v14 + (int)v19 >= 257)
  {
    unsigned int v20 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v20 + 10) = 9;
    uint64_t result = (void *)(*v20)(v7);
  }
  if (v19)
  {
    uint64_t result = memset(&__b[v14], 4, v19);
    LODWORD(v14) = v14 + v19;
  }
  size_t v21 = v12[5];
  if ((int)v14 + (int)v21 >= 257)
  {
    uint64_t v22 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v22 + 10) = 9;
    uint64_t result = (void *)(*v22)(v7);
  }
  if (v21)
  {
    uint64_t result = memset(&__b[v14], 5, v21);
    LODWORD(v14) = v14 + v21;
  }
  size_t v23 = v12[6];
  if ((int)v14 + (int)v23 >= 257)
  {
    unsigned int v24 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v24 + 10) = 9;
    uint64_t result = (void *)(*v24)(v7);
  }
  if (v23)
  {
    uint64_t result = memset(&__b[v14], 6, v23);
    LODWORD(v14) = v14 + v23;
  }
  size_t v25 = v12[7];
  if ((int)v14 + (int)v25 >= 257)
  {
    uint64_t v26 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v26 + 10) = 9;
    uint64_t result = (void *)(*v26)(v7);
  }
  if (v25)
  {
    uint64_t result = memset(&__b[v14], 7, v25);
    LODWORD(v14) = v14 + v25;
  }
  size_t v27 = v12[8];
  if ((int)v14 + (int)v27 >= 257)
  {
    unint64_t v28 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v28 + 10) = 9;
    uint64_t result = (void *)(*v28)(v7);
  }
  if (v27)
  {
    uint64_t result = memset(&__b[v14], 8, v27);
    LODWORD(v14) = v14 + v27;
  }
  size_t v29 = v12[9];
  if ((int)v14 + (int)v29 >= 257)
  {
    uint64_t v30 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v30 + 10) = 9;
    uint64_t result = (void *)(*v30)(v7);
  }
  if (v29)
  {
    uint64_t result = memset(&__b[v14], 9, v29);
    LODWORD(v14) = v14 + v29;
  }
  size_t v31 = v12[10];
  if ((int)v14 + (int)v31 >= 257)
  {
    uint64_t v32 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v32 + 10) = 9;
    uint64_t result = (void *)(*v32)(v7);
  }
  if (v31)
  {
    uint64_t result = memset(&__b[v14], 10, v31);
    LODWORD(v14) = v14 + v31;
  }
  size_t v33 = v12[11];
  if ((int)v14 + (int)v33 >= 257)
  {
    int v34 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v34 + 10) = 9;
    uint64_t result = (void *)(*v34)(v7);
  }
  if (v33)
  {
    uint64_t result = memset(&__b[v14], 11, v33);
    LODWORD(v14) = v14 + v33;
  }
  size_t v35 = v12[12];
  if ((int)v14 + (int)v35 >= 257)
  {
    uint64_t v36 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v36 + 10) = 9;
    uint64_t result = (void *)(*v36)(v7);
  }
  if (v35)
  {
    uint64_t result = memset(&__b[v14], 12, v35);
    LODWORD(v14) = v14 + v35;
  }
  size_t v37 = v12[13];
  if ((int)v14 + (int)v37 >= 257)
  {
    int v38 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v38 + 10) = 9;
    uint64_t result = (void *)(*v38)(v7);
  }
  if (v37)
  {
    uint64_t result = memset(&__b[v14], 13, v37);
    LODWORD(v14) = v14 + v37;
  }
  size_t v39 = v12[14];
  if ((int)v14 + (int)v39 >= 257)
  {
    int v40 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v40 + 10) = 9;
    uint64_t result = (void *)(*v40)(v7);
  }
  if (v39)
  {
    uint64_t result = memset(&__b[v14], 14, v39);
    LODWORD(v14) = v14 + v39;
  }
  size_t v41 = v12[15];
  if ((int)v14 + (int)v41 >= 257)
  {
    int v42 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v42 + 10) = 9;
    uint64_t result = (void *)(*v42)(v7);
  }
  if (v41)
  {
    uint64_t result = memset(&__b[v14], 15, v41);
    LODWORD(v14) = v14 + v41;
  }
  size_t v43 = v12[16];
  if ((int)v14 + (int)v43 >= 257)
  {
    uint64_t v44 = (uint64_t (**)(void))*v7;
    *((_DWORD *)v44 + 10) = 9;
    uint64_t result = (void *)(*v44)(v7);
  }
  if (v43)
  {
    uint64_t result = memset(&__b[v14], 16, v43);
    LODWORD(v14) = v14 + v43;
  }
  __b[v14] = 0;
  int v45 = __b[0];
  if (__b[0])
  {
    unsigned int v46 = 0;
    int v47 = 0;
    char v48 = __b[0];
    do
    {
      if (v45 == v48)
      {
        uint64_t v49 = &v70[v47];
        uint64_t v50 = &__b[v47 + 1];
        do
        {
          *v49++ = v46++;
          int v51 = *v50++;
          ++v47;
        }
        while (v45 == v51);
      }
      if (1 << v45 <= v46)
      {
        int v52 = (uint64_t (**)(void))*v7;
        *((_DWORD *)v52 + 10) = 9;
        uint64_t result = (void *)(*v52)(v7);
      }
      v46 *= 2;
      ++v45;
      char v48 = __b[v47];
    }
    while (v48);
  }
  v13[79] = 0u;
  v13[78] = 0u;
  v13[77] = 0u;
  v13[76] = 0u;
  v13[75] = 0u;
  v13[74] = 0u;
  v13[73] = 0u;
  v13[72] = 0u;
  v13[71] = 0u;
  v13[70] = 0u;
  v13[69] = 0u;
  v13[68] = 0u;
  v13[67] = 0u;
  v13[66] = 0u;
  v13[65] = 0u;
  v13[64] = 0u;
  if ((int)v14 >= 1)
  {
    size_t v14 = v14;
    if (v69)
    {
      uint64_t v53 = v12 + 17;
      unsigned int v54 = __b;
      uint64_t v55 = v70;
      do
      {
        unsigned int v59 = *v53++;
        uint64_t v58 = v59;
        if (v59 > 0xFuLL || *((unsigned char *)v13 + v58 + 1024))
        {
          uint64_t v56 = (uint64_t (**)(void))*v7;
          *((_DWORD *)v56 + 10) = 9;
          uint64_t result = (void *)(*v56)(v7);
        }
        int v57 = *v55++;
        *((_DWORD *)v13 + v58) = v57;
        LOBYTE(v57) = *v54++;
        *((unsigned char *)v13 + v58 + 1024) = v57;
        --v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v61 = v12 + 17;
      uint64_t v62 = v70;
      uint64_t v63 = __b;
      do
      {
        unsigned int v66 = *v61++;
        uint64_t v65 = v66;
        unsigned int v67 = (char *)v13 + v66;
        if (v67[1024])
        {
          unint64_t v68 = (uint64_t (**)(void))*v7;
          *((_DWORD *)v68 + 10) = 9;
          uint64_t result = (void *)(*v68)(v7);
        }
        int v64 = *v62++;
        *((_DWORD *)v13 + v65) = v64;
        LOBYTE(v64) = *v63++;
        v67[1024] = v64;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t sub_1003BFBAC(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 228);
  if (v1)
  {
    uint64_t v2 = result;
    if (v1 == 1)
    {
      int v3 = 0;
    }
    else
    {
      unsigned int v4 = -1;
      do
      {
        ++v4;
        BOOL v5 = v1 > 3;
        v1 >>= 1;
      }
      while (v5);
      int v3 = v4 + 1;
      if (v4 >= 0xE)
      {
        uint64_t v6 = *(uint64_t **)(result + 216);
        uint64_t v7 = *v6;
        *(_DWORD *)(v7 + 40) = 41;
        (*(void (**)(uint64_t *))v7)(v6);
      }
    }
    uint64_t v8 = 16 * v3;
    uint64_t v9 = v2 + 8 * *(int *)(v2 + 224);
    if (*(unsigned char *)(v2 + 192))
    {
      ++*(void *)(*(void *)(v9 + 160) + 8 * v8);
      if (!v3)
      {
LABEL_11:
        *(_DWORD *)(v2 + 228) = 0;
        uint64_t result = sub_1003C016C(v2, *(unsigned char **)(v2 + 240), *(_DWORD *)(v2 + 232));
        *(_DWORD *)(v2 + 232) = 0;
        return result;
      }
    }
    else
    {
      sub_1003BFFB8(v2, *(_DWORD *)(*(void *)(v9 + 96) + 4 * v8), *(char *)(*(void *)(v9 + 96) + v8 + 1024));
      if (!v3) {
        goto LABEL_11;
      }
    }
    sub_1003BFFB8(v2, *(_DWORD *)(v2 + 228), v3);
    goto LABEL_11;
  }
  return result;
}

void *sub_1003BFC98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  long long v42 = 0u;
  long long v43 = 0u;
  char v44 = 0;
  bzero(v41, 0x404uLL);
  uint64_t result = memset(__b, 255, sizeof(__b));
  uint64_t v7 = 0;
  *(void *)(a3 + 2048) = 1;
LABEL_2:
  LODWORD(v8) = -1;
  uint64_t v9 = 1000000000;
  while (1)
  {
    do
    {
      uint64_t v10 = *(void *)(a3 + 8 * v7);
      if (v10) {
        BOOL v11 = v10 <= v9;
      }
      else {
        BOOL v11 = 0;
      }
      int v12 = !v11;
      if (v12) {
        uint64_t v8 = v8;
      }
      else {
        uint64_t v8 = v7;
      }
      if (!v12) {
        uint64_t v9 = *(void *)(a3 + 8 * v7);
      }
      ++v7;
    }
    while (v7 != 257);
    uint64_t v13 = 0;
    LODWORD(v14) = -1;
    uint64_t v15 = 1000000000;
    do
    {
      uint64_t v16 = *(void *)(a3 + 8 * v13);
      if (v16) {
        BOOL v17 = v16 <= v15;
      }
      else {
        BOOL v17 = 0;
      }
      BOOL v18 = !v17 || v8 == v13;
      if (v18) {
        uint64_t v14 = v14;
      }
      else {
        uint64_t v14 = v13;
      }
      if (!v18) {
        uint64_t v15 = *(void *)(a3 + 8 * v13);
      }
      ++v13;
    }
    while (v13 != 257);
    if ((v14 & 0x80000000) != 0) {
      break;
    }
    uint64_t v19 = 8 * v14;
    *(void *)(a3 + 8 * (int)v8) += *(void *)(a3 + v19);
    *(void *)(a3 + v19) = 0;
    uint64_t v20 = (int)v8;
    ++v41[v20];
    uint64_t v21 = __b[v20];
    if ((v21 & 0x80000000) != 0)
    {
      uint64_t v8 = (int)v8;
    }
    else
    {
      do
      {
        uint64_t v8 = v21;
        uint64_t v22 = v21;
        ++v41[v22];
        uint64_t v21 = __b[v22];
      }
      while ((v21 & 0x80000000) == 0);
    }
    uint64_t v7 = 0;
    __b[v8] = v14;
    ++v41[v14];
    uint64_t v23 = __b[v14];
    LODWORD(v8) = -1;
    uint64_t v9 = 1000000000;
    if ((v23 & 0x80000000) == 0)
    {
      do
      {
        ++v41[v23];
        uint64_t v23 = __b[v23];
      }
      while ((v23 & 0x80000000) == 0);
      uint64_t v7 = 0;
      goto LABEL_2;
    }
  }
  for (uint64_t i = 0; i != 257; ++i)
  {
    uint64_t v25 = (int)v41[i];
    if (v25)
    {
      if ((int)v25 >= 33)
      {
        uint64_t v26 = *a1;
        *(_DWORD *)(v26 + 40) = 40;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v26)(a1);
      }
      ++*((unsigned char *)&v42 + v25);
    }
  }
  size_t v27 = (char *)&v43 + 15;
  uint64_t v28 = 0x2000000000;
  unint64_t v29 = 32;
  do
  {
    for (char j = *((unsigned char *)&v42 + v29); j; char j = *((unsigned char *)&v42 + v29))
    {
      size_t v31 = v27;
      uint64_t v32 = v28;
      do
      {
        int v33 = *--v31;
        v32 -= 0x100000000;
      }
      while (!v33);
      *((unsigned char *)&v42 + v29) = j - 2;
      ++*((unsigned char *)&v42 + v29 - 1);
      *((unsigned char *)&v42 + (v32 >> 32)) += 2;
      --*v31;
    }
    v28 -= 0x100000000;
    --v27;
    BOOL v11 = v29-- > 0x11;
  }
  while (v11);
  int v34 = (char *)&v43 + 1;
  do
  {
    int v36 = *--v34;
    char v35 = v36;
  }
  while (!v36);
  int v37 = 0;
  *int v34 = v35 - 1;
  *(_OWORD *)a2 = v42;
  *(unsigned char *)(a2 + 16) = v43;
  for (int k = 1; k != 33; ++k)
  {
    for (uint64_t m = 0; m != 256; ++m)
    {
      if (v41[m] == k) {
        *(unsigned char *)(a2 + v37++ + 17) = m;
      }
    }
  }
  *(unsigned char *)(a2 + 273) = 0;
  return result;
}

uint64_t sub_1003BFFB8(uint64_t result, unsigned int a2, int a3)
{
  uint64_t v5 = result;
  if (a3)
  {
    if (*(unsigned char *)(result + 192)) {
      return result;
    }
  }
  else
  {
    uint64_t v6 = *(uint64_t **)(result + 216);
    uint64_t v7 = *v6;
    *(_DWORD *)(v7 + 40) = 41;
    uint64_t result = (*(uint64_t (**)(uint64_t *))v7)(v6);
    if (*(unsigned char *)(v5 + 192)) {
      return result;
    }
  }
  uint64_t v8 = ~(-1 << a3) & a2;
  int v9 = *(_DWORD *)(v5 + 32) + a3;
  uint64_t v10 = (v8 << (24 - v9)) | *(void *)(v5 + 24);
  if (v9 >= 8)
  {
    while (1)
    {
      uint64_t v14 = *(unsigned char **)(v5 + 200);
      *(void *)(v5 + 200) = v14 + 1;
      *uint64_t v14 = BYTE2(v10);
      uint64_t v15 = *(void *)(v5 + 208) - 1;
      *(void *)(v5 + 208) = v15;
      if (v15)
      {
        if ((~v10 & 0xFF0000) == 0) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v16 = *(void *)(*(void *)(v5 + 216) + 40);
        uint64_t result = (*(uint64_t (**)(void))(v16 + 24))();
        if (result)
        {
          uint64_t v17 = *(void *)(v16 + 8);
          *(void *)(v5 + 200) = *(void *)v16;
          *(void *)(v5 + 208) = v17;
          if ((~v10 & 0xFF0000) == 0) {
            goto LABEL_16;
          }
        }
        else
        {
          BOOL v18 = *(uint64_t **)(v5 + 216);
          uint64_t v19 = *v18;
          *(_DWORD *)(v19 + 40) = 25;
          uint64_t result = (*(uint64_t (**)(uint64_t *))v19)(v18);
          uint64_t v20 = *(void *)(v16 + 8);
          *(void *)(v5 + 200) = *(void *)v16;
          *(void *)(v5 + 208) = v20;
          if ((~v10 & 0xFF0000) == 0)
          {
LABEL_16:
            uint64_t v21 = *(unsigned char **)(v5 + 200);
            *(void *)(v5 + 200) = v21 + 1;
            unsigned char *v21 = 0;
            uint64_t v22 = *(void *)(v5 + 208) - 1;
            *(void *)(v5 + 208) = v22;
            if (!v22)
            {
              uint64_t v23 = *(void *)(*(void *)(v5 + 216) + 40);
              uint64_t result = (*(uint64_t (**)(void))(v23 + 24))();
              if (!result)
              {
                unsigned int v24 = *(uint64_t **)(v5 + 216);
                uint64_t v25 = *v24;
                *(_DWORD *)(v25 + 40) = 25;
                uint64_t result = (*(uint64_t (**)(uint64_t *))v25)(v24);
              }
              uint64_t v11 = *(void *)(v23 + 8);
              *(void *)(v5 + 200) = *(void *)v23;
              *(void *)(v5 + 208) = v11;
            }
          }
        }
      }
      v10 <<= 8;
      int v12 = v9 - 8;
      BOOL v13 = v9 <= 15;
      v9 -= 8;
      if (v13) {
        goto LABEL_20;
      }
    }
  }
  int v12 = v9;
LABEL_20:
  *(void *)(v5 + 24) = v10;
  *(_DWORD *)(v5 + 32) = v12;
  return result;
}

uint64_t sub_1003C016C(uint64_t result, unsigned char *a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    if (!*(unsigned char *)(result + 192))
    {
      int v4 = a3;
LABEL_4:
      int v6 = *(_DWORD *)(v3 + 32);
      unint64_t v7 = ((unint64_t)(*a2 & 1) << (23 - v6)) | *(void *)(v3 + 24);
      if (v6 >= 7)
      {
        int v8 = v6 + 9;
        while (1)
        {
          uint64_t v10 = *(unsigned char **)(v3 + 200);
          *(void *)(v3 + 200) = v10 + 1;
          *uint64_t v10 = BYTE2(v7);
          uint64_t v11 = *(void *)(v3 + 208) - 1;
          *(void *)(v3 + 208) = v11;
          if (v11)
          {
            if ((~v7 & 0xFF0000) == 0) {
              goto LABEL_15;
            }
          }
          else
          {
            uint64_t v12 = *(void *)(*(void *)(v3 + 216) + 40);
            uint64_t result = (*(uint64_t (**)(void))(v12 + 24))();
            if (result)
            {
              uint64_t v13 = *(void *)(v12 + 8);
              *(void *)(v3 + 200) = *(void *)v12;
              *(void *)(v3 + 208) = v13;
              if ((~v7 & 0xFF0000) == 0) {
                goto LABEL_15;
              }
            }
            else
            {
              uint64_t v14 = *(uint64_t **)(v3 + 216);
              uint64_t v15 = *v14;
              *(_DWORD *)(v15 + 40) = 25;
              uint64_t result = (*(uint64_t (**)(uint64_t *))v15)(v14);
              uint64_t v16 = *(void *)(v12 + 8);
              *(void *)(v3 + 200) = *(void *)v12;
              *(void *)(v3 + 208) = v16;
              if ((~v7 & 0xFF0000) == 0)
              {
LABEL_15:
                uint64_t v17 = *(unsigned char **)(v3 + 200);
                *(void *)(v3 + 200) = v17 + 1;
                *uint64_t v17 = 0;
                uint64_t v18 = *(void *)(v3 + 208) - 1;
                *(void *)(v3 + 208) = v18;
                if (!v18)
                {
                  uint64_t v19 = *(void *)(*(void *)(v3 + 216) + 40);
                  uint64_t result = (*(uint64_t (**)(void))(v19 + 24))();
                  if (!result)
                  {
                    uint64_t v20 = *(uint64_t **)(v3 + 216);
                    uint64_t v21 = *v20;
                    *(_DWORD *)(v21 + 40) = 25;
                    uint64_t result = (*(uint64_t (**)(uint64_t *))v21)(v20);
                  }
                  uint64_t v9 = *(void *)(v19 + 8);
                  *(void *)(v3 + 200) = *(void *)v19;
                  *(void *)(v3 + 208) = v9;
                }
              }
            }
          }
          v7 <<= 8;
          v8 -= 8;
          if (v8 <= 15)
          {
            int v22 = v8 - 8;
            goto LABEL_20;
          }
        }
      }
      int v22 = v6 + 1;
LABEL_20:
      *(void *)(v3 + 24) = v7;
      *(_DWORD *)(v3 + 32) = v22;
      while (--v4)
      {
        ++a2;
        if (!*(unsigned char *)(v3 + 192)) {
          goto LABEL_4;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003C030C(uint64_t result)
{
  uint64_t v1 = result;
  if (!*(unsigned char *)(result + 192))
  {
    int v2 = *(_DWORD *)(result + 32);
    if (v2 >= 1)
    {
      uint64_t v3 = (127 << (17 - v2)) | *(void *)(result + 24);
      for (int i = v2 + 15; i > 15; i -= 8)
      {
        int v6 = *(unsigned char **)(v1 + 200);
        *(void *)(v1 + 200) = v6 + 1;
        *int v6 = BYTE2(v3);
        uint64_t v7 = *(void *)(v1 + 208) - 1;
        *(void *)(v1 + 208) = v7;
        if (v7)
        {
          if ((~v3 & 0xFF0000) == 0) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(*(void *)(v1 + 216) + 40);
          uint64_t result = (*(uint64_t (**)(void))(v8 + 24))();
          if (result)
          {
            uint64_t v9 = *(void *)(v8 + 8);
            *(void *)(v1 + 200) = *(void *)v8;
            *(void *)(v1 + 208) = v9;
            if ((~v3 & 0xFF0000) == 0) {
              goto LABEL_14;
            }
          }
          else
          {
            uint64_t v10 = *(uint64_t **)(v1 + 216);
            uint64_t v11 = *v10;
            *(_DWORD *)(v11 + 40) = 25;
            uint64_t result = (*(uint64_t (**)(uint64_t *))v11)(v10);
            uint64_t v12 = *(void *)(v8 + 8);
            *(void *)(v1 + 200) = *(void *)v8;
            *(void *)(v1 + 208) = v12;
            if ((~v3 & 0xFF0000) == 0)
            {
LABEL_14:
              uint64_t v13 = *(unsigned char **)(v1 + 200);
              *(void *)(v1 + 200) = v13 + 1;
              *uint64_t v13 = 0;
              uint64_t v14 = *(void *)(v1 + 208) - 1;
              *(void *)(v1 + 208) = v14;
              if (!v14)
              {
                uint64_t v15 = *(void *)(*(void *)(v1 + 216) + 40);
                uint64_t result = (*(uint64_t (**)(void))(v15 + 24))();
                if (!result)
                {
                  uint64_t v16 = *(uint64_t **)(v1 + 216);
                  uint64_t v17 = *v16;
                  *(_DWORD *)(v17 + 40) = 25;
                  uint64_t result = (*(uint64_t (**)(uint64_t *))v17)(v16);
                }
                uint64_t v5 = *(void *)(v15 + 8);
                *(void *)(v1 + 200) = *(void *)v15;
                *(void *)(v1 + 208) = v5;
              }
            }
          }
        }
        LODWORD(v3) = v3 << 8;
      }
    }
  }
  *(void *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_1003C0468(uint64_t a1, char a2)
{
  uint64_t result = sub_1003BFBAC(a1);
  if (*(unsigned char *)(a1 + 192)) {
    goto LABEL_8;
  }
  uint64_t result = sub_1003C030C(a1);
  uint64_t v5 = *(unsigned char **)(a1 + 200);
  *(void *)(a1 + 200) = v5 + 1;
  *uint64_t v5 = -1;
  uint64_t v6 = *(void *)(a1 + 208) - 1;
  *(void *)(a1 + 208) = v6;
  if (v6)
  {
    uint64_t v7 = *(unsigned char **)(a1 + 200);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 216) + 40);
    uint64_t result = (*(uint64_t (**)(void))(v8 + 24))();
    if (!result)
    {
      uint64_t v9 = *(uint64_t **)(a1 + 216);
      uint64_t v10 = *v9;
      *(_DWORD *)(v10 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t *))v10)(v9);
    }
    uint64_t v7 = *(unsigned char **)v8;
    *(void *)(a1 + 208) = *(void *)(v8 + 8);
  }
  *(void *)(a1 + 200) = v7 + 1;
  *uint64_t v7 = a2 - 48;
  uint64_t v11 = *(void *)(a1 + 208) - 1;
  *(void *)(a1 + 208) = v11;
  if (v11)
  {
LABEL_8:
    uint64_t v12 = *(void *)(a1 + 216);
    if (*(_DWORD *)(v12 + 444))
    {
LABEL_9:
      *(_DWORD *)(a1 + 228) = 0;
      *(_DWORD *)(a1 + 232) = 0;
      return result;
    }
  }
  else
  {
    uint64_t v13 = *(void *)(*(void *)(a1 + 216) + 40);
    uint64_t result = (*(uint64_t (**)(void))(v13 + 24))();
    if (!result)
    {
      uint64_t v14 = *(uint64_t **)(a1 + 216);
      uint64_t v15 = *v14;
      *(_DWORD *)(v15 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t *))v15)(v14);
    }
    uint64_t v16 = *(void *)(v13 + 8);
    *(void *)(a1 + 200) = *(void *)v13;
    *(void *)(a1 + 208) = v16;
    uint64_t v12 = *(void *)(a1 + 216);
    if (*(_DWORD *)(v12 + 444)) {
      goto LABEL_9;
    }
  }
  if (*(int *)(v12 + 356) >= 1)
  {
    uint64_t v17 = 0;
    do
      *(_DWORD *)(a1 + 36 + 4 * v17++) = 0;
    while (v17 < *(int *)(v12 + 356));
  }
  return result;
}

uint64_t sub_1003C05B0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 88);
  if (v2 != 8)
  {
    uint64_t v3 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v3 + 10) = 16;
    *((_DWORD *)v3 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if (*(_DWORD *)(a1 + 52) && (unsigned int v4 = *(_DWORD *)(a1 + 48)) != 0 && (v5 = *(_DWORD *)(a1 + 56), v5 > 0))
  {
    if (!((v5 * (unint64_t)v4) >> 32)) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v7 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v7 + 10) = 33;
    (*v7)(a1);
    if (!((*(int *)(a1 + 56) * (unint64_t)*(unsigned int *)(a1 + 48)) >> 32))
    {
LABEL_7:
      sub_1003C4444((int32x2_t *)a1, 0);
      if (*(unsigned char *)(a1 + 288)) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  int32x2_t v8 = *(int32x2_t *)a1;
  *(_DWORD *)(*(void *)&v8 + 40) = 72;
  (**(void (***)(uint64_t))&v8)(a1);
  sub_1003C4444((int32x2_t *)a1, 0);
  if (*(unsigned char *)(a1 + 288))
  {
LABEL_8:
    sub_1003BC348(a1);
    if (*(unsigned char *)(a1 + 289)) {
      goto LABEL_9;
    }
LABEL_14:
    sub_1003BCDD0(a1);
    if (*(int *)(a1 + 272) > 1) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_13:
  sub_1003BB42C((uint64_t *)a1);
  sub_1003C979C((uint64_t *)a1);
  sub_1003C8D98((uint64_t *)a1, 0);
  sub_1003BC348(a1);
  if (!*(unsigned char *)(a1 + 289)) {
    goto LABEL_14;
  }
LABEL_9:
  sub_1003B8B50(a1);
  if (*(int *)(a1 + 272) > 1)
  {
LABEL_10:
    BOOL v6 = 1;
    goto LABEL_16;
  }
LABEL_15:
  BOOL v6 = *(unsigned char *)(a1 + 290) != 0;
LABEL_16:
  sub_1003BA6EC(a1, v6);
  sub_1003C075C((int *)a1, 0);
  sub_1003C0A1C(a1);
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 48))(a1);
  uint64_t v9 = **(uint64_t (***)(uint64_t))(a1 + 512);

  return v9(a1);
}

uint64_t (**sub_1003C075C(int *a1, int a2))(uint64_t result, int a2)
{
  uint64_t result = (uint64_t (**)(uint64_t, int))(**((uint64_t (***)(void))a1 + 1))();
  *((void *)a1 + 61) = result;
  *uint64_t result = sub_1003C0850;
  if (!*((unsigned char *)a1 + 288))
  {
    if (a2)
    {
      uint64_t v5 = *(void *)a1;
      *(_DWORD *)(v5 + 40) = 3;
      BOOL v6 = *(uint64_t (**)(int *))v5;
      return (uint64_t (**)(uint64_t, int))v6(a1);
    }
    else if (a1[23] >= 1)
    {
      uint64_t v7 = 0;
      int32x2_t v8 = result + 4;
      uint64_t v9 = (int *)(*((void *)a1 + 13) + 40);
      do
      {
        uint64_t v10 = (*(v9 - 1) * *(v9 - 3));
        int v11 = *(v9 - 7);
        int v12 = *v9;
        v9 += 24;
        uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(int *, uint64_t, uint64_t, void))(*((void *)a1 + 1) + 16))(a1, 1, v10, (v12 * v11));
        v8[v7++] = result;
      }
      while (v7 < a1[23]);
    }
  }
  return result;
}

uint64_t sub_1003C0850(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 288))
  {
    uint64_t v2 = *(void *)(result + 488);
    *(unsigned char *)(v2 + 24) = 0;
    *(void *)(v2 + 16) = 0;
    *(_DWORD *)(v2 + 28) = a2;
    if (a2)
    {
      uint64_t v3 = *(void *)result;
      *(_DWORD *)(v3 + 40) = 3;
      return (*(uint64_t (**)(uint64_t))v3)(result);
    }
    else
    {
      *(void *)(v2 + 8) = sub_1003C0898;
    }
  }
  return result;
}

uint64_t sub_1003C0898(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 488);
  if (*(_DWORD *)(v4 + 16) < *(_DWORD *)(result + 352))
  {
    uint64_t v8 = result;
    uint64_t v10 = (unsigned int *)(v4 + 20);
    unsigned int v9 = *(_DWORD *)(v4 + 20);
    unsigned int v11 = *(_DWORD *)(result + 348);
    if (v9 < v11)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(result + 496)
                                                                                                + 8))(result, a2, a3, a4, v4 + 32, v4 + 20);
      unsigned int v9 = *v10;
      unsigned int v11 = *(_DWORD *)(v8 + 348);
    }
    if (v9 == v11)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 + 504) + 8))(v8, v4 + 32);
      BOOL v12 = *(unsigned char *)(v4 + 24) == 0;
      if (result)
      {
        if (*(unsigned char *)(v4 + 24))
        {
LABEL_7:
          ++*a3;
          *(unsigned char *)(v4 + 24) = 0;
        }
        while (1)
        {
          unsigned int v13 = *(_DWORD *)(v4 + 16) + 1;
          *(void *)(v4 + 16) = v13;
          if (v13 >= *(_DWORD *)(v8 + 352)) {
            break;
          }
          if (*(_DWORD *)(v8 + 348))
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 496) + 8))(v8, a2, a3, a4, v4 + 32, v4 + 20);
            if (*v10 != *(_DWORD *)(v8 + 348)) {
              break;
            }
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 + 504) + 8))(v8, v4 + 32);
          BOOL v12 = *(unsigned char *)(v4 + 24) == 0;
          if (!result) {
            goto LABEL_14;
          }
          if (*(unsigned char *)(v4 + 24)) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_14:
        if (v12)
        {
          --*a3;
          *(unsigned char *)(v4 + 24) = 1;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003C0A1C(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 512) = result;
  *(void *)uint64_t result = sub_1003C0AC8;
  *(void *)(result + 8) = sub_1003C16B4;
  *(void *)(result + 16) = sub_1003C22E4;
  *(void *)(result + 24) = sub_1003C2E4C;
  *(void *)(result + 32) = sub_1003C2F24;
  *(void *)(result + 40) = sub_1003C31B4;
  *(void *)(result + 48) = sub_1003C3360;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t sub_1003C0AC8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 512);
  uint64_t v3 = *(void *)(result + 40);
  uint64_t v4 = (unsigned char *)(*(void *)v3)++;
  *uint64_t v4 = -1;
  uint64_t v5 = *(void *)(v3 + 8) - 1;
  *(void *)(v3 + 8) = v5;
  if (!v5)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v3 + 24))(result);
    if (!result)
    {
      uint64_t v6 = *(void *)v1;
      *(_DWORD *)(v6 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v6)(v1);
    }
  }
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = (unsigned char *)(*(void *)v7)++;
  *uint64_t v8 = -40;
  uint64_t v9 = *(void *)(v7 + 8) - 1;
  *(void *)(v7 + 8) = v9;
  if (v9 || (uint64_t result = (*(uint64_t (**)(uint64_t))(v7 + 24))(v1), result))
  {
    *(_DWORD *)(v2 + 56) = 0;
    if (!*(unsigned char *)(v1 + 312)) {
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v87 = *(void *)v1;
    *(_DWORD *)(v87 + 40) = 25;
    uint64_t result = (*(uint64_t (**)(uint64_t))v87)(v1);
    *(_DWORD *)(v2 + 56) = 0;
    if (!*(unsigned char *)(v1 + 312)) {
      goto LABEL_62;
    }
  }
  uint64_t v10 = *(void *)(v1 + 40);
  unsigned int v11 = (unsigned char *)(*(void *)v10)++;
  *unsigned int v11 = -1;
  uint64_t v12 = *(void *)(v10 + 8) - 1;
  *(void *)(v10 + 8) = v12;
  if (!v12)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v10 + 24))(v1);
    if (!result)
    {
      uint64_t v13 = *(void *)v1;
      *(_DWORD *)(v13 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v13)(v1);
    }
  }
  uint64_t v14 = *(void *)(v1 + 40);
  uint64_t v15 = (unsigned char *)(*(void *)v14)++;
  *uint64_t v15 = -32;
  uint64_t v16 = *(void *)(v14 + 8) - 1;
  *(void *)(v14 + 8) = v16;
  if (!v16)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v14 + 24))(v1);
    if (!result)
    {
      uint64_t v17 = *(void *)v1;
      *(_DWORD *)(v17 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v17)(v1);
    }
  }
  uint64_t v18 = *(void *)(v1 + 40);
  uint64_t v19 = (unsigned char *)(*(void *)v18)++;
  *uint64_t v19 = 0;
  uint64_t v20 = *(void *)(v18 + 8) - 1;
  *(void *)(v18 + 8) = v20;
  if (!v20)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v18 + 24))(v1);
    if (!result)
    {
      uint64_t v21 = *(void *)v1;
      *(_DWORD *)(v21 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v21)(v1);
    }
  }
  uint64_t v22 = *(void *)(v1 + 40);
  uint64_t v23 = (unsigned char *)(*(void *)v22)++;
  *uint64_t v23 = 16;
  uint64_t v24 = *(void *)(v22 + 8) - 1;
  *(void *)(v22 + 8) = v24;
  if (!v24)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v22 + 24))(v1);
    if (!result)
    {
      uint64_t v25 = *(void *)v1;
      *(_DWORD *)(v25 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v25)(v1);
    }
  }
  uint64_t v26 = *(void *)(v1 + 40);
  size_t v27 = (unsigned char *)(*(void *)v26)++;
  *size_t v27 = 74;
  uint64_t v28 = *(void *)(v26 + 8) - 1;
  *(void *)(v26 + 8) = v28;
  if (!v28)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v26 + 24))(v1);
    if (!result)
    {
      uint64_t v29 = *(void *)v1;
      *(_DWORD *)(v29 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v29)(v1);
    }
  }
  uint64_t v30 = *(void *)(v1 + 40);
  size_t v31 = (unsigned char *)(*(void *)v30)++;
  unsigned char *v31 = 70;
  uint64_t v32 = *(void *)(v30 + 8) - 1;
  *(void *)(v30 + 8) = v32;
  if (!v32)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v30 + 24))(v1);
    if (!result)
    {
      uint64_t v33 = *(void *)v1;
      *(_DWORD *)(v33 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v33)(v1);
    }
  }
  uint64_t v34 = *(void *)(v1 + 40);
  char v35 = (unsigned char *)(*(void *)v34)++;
  *char v35 = 73;
  uint64_t v36 = *(void *)(v34 + 8) - 1;
  *(void *)(v34 + 8) = v36;
  if (!v36)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v34 + 24))(v1);
    if (!result)
    {
      uint64_t v37 = *(void *)v1;
      *(_DWORD *)(v37 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v37)(v1);
    }
  }
  uint64_t v38 = *(void *)(v1 + 40);
  size_t v39 = (unsigned char *)(*(void *)v38)++;
  unsigned char *v39 = 70;
  uint64_t v40 = *(void *)(v38 + 8) - 1;
  *(void *)(v38 + 8) = v40;
  if (!v40)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v38 + 24))(v1);
    if (!result)
    {
      uint64_t v41 = *(void *)v1;
      *(_DWORD *)(v41 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v41)(v1);
    }
  }
  uint64_t v42 = *(void *)(v1 + 40);
  long long v43 = (unsigned char *)(*(void *)v42)++;
  unsigned char *v43 = 0;
  uint64_t v44 = *(void *)(v42 + 8) - 1;
  *(void *)(v42 + 8) = v44;
  if (!v44)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v42 + 24))(v1);
    if (!result)
    {
      uint64_t v45 = *(void *)v1;
      *(_DWORD *)(v45 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v45)(v1);
    }
  }
  char v46 = *(unsigned char *)(v1 + 313);
  uint64_t v47 = *(void *)(v1 + 40);
  char v48 = (unsigned char *)(*(void *)v47)++;
  *char v48 = v46;
  uint64_t v49 = *(void *)(v47 + 8) - 1;
  *(void *)(v47 + 8) = v49;
  if (!v49)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v47 + 24))(v1);
    if (!result)
    {
      uint64_t v50 = *(void *)v1;
      *(_DWORD *)(v50 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v50)(v1);
    }
  }
  char v51 = *(unsigned char *)(v1 + 314);
  uint64_t v52 = *(void *)(v1 + 40);
  uint64_t v53 = (unsigned char *)(*(void *)v52)++;
  unsigned char *v53 = v51;
  uint64_t v54 = *(void *)(v52 + 8) - 1;
  *(void *)(v52 + 8) = v54;
  if (!v54)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v52 + 24))(v1);
    if (!result)
    {
      uint64_t v55 = *(void *)v1;
      *(_DWORD *)(v55 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v55)(v1);
    }
  }
  char v56 = *(unsigned char *)(v1 + 315);
  uint64_t v57 = *(void *)(v1 + 40);
  uint64_t v58 = (unsigned char *)(*(void *)v57)++;
  unsigned char *v58 = v56;
  uint64_t v59 = *(void *)(v57 + 8) - 1;
  *(void *)(v57 + 8) = v59;
  if (!v59)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v57 + 24))(v1);
    if (!result)
    {
      uint64_t v60 = *(void *)v1;
      *(_DWORD *)(v60 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v60)(v1);
    }
  }
  __int16 v61 = *(_WORD *)(v1 + 316);
  uint64_t v62 = *(void *)(v1 + 40);
  uint64_t v63 = (unsigned char *)(*(void *)v62)++;
  *uint64_t v63 = HIBYTE(v61);
  uint64_t v64 = *(void *)(v62 + 8) - 1;
  *(void *)(v62 + 8) = v64;
  if (!v64)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v62 + 24))(v1);
    if (!result)
    {
      uint64_t v65 = *(void *)v1;
      *(_DWORD *)(v65 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v65)(v1);
    }
  }
  uint64_t v66 = *(void *)(v1 + 40);
  unsigned int v67 = (unsigned char *)(*(void *)v66)++;
  *unsigned int v67 = v61;
  uint64_t v68 = *(void *)(v66 + 8) - 1;
  *(void *)(v66 + 8) = v68;
  if (!v68)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v66 + 24))(v1);
    if (!result)
    {
      uint64_t v69 = *(void *)v1;
      *(_DWORD *)(v69 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v69)(v1);
    }
  }
  __int16 v70 = *(_WORD *)(v1 + 318);
  uint64_t v71 = *(void *)(v1 + 40);
  uint64_t v72 = (unsigned char *)(*(void *)v71)++;
  *uint64_t v72 = HIBYTE(v70);
  uint64_t v73 = *(void *)(v71 + 8) - 1;
  *(void *)(v71 + 8) = v73;
  if (!v73)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v71 + 24))(v1);
    if (!result)
    {
      uint64_t v74 = *(void *)v1;
      *(_DWORD *)(v74 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v74)(v1);
    }
  }
  uint64_t v75 = *(void *)(v1 + 40);
  uint64_t v76 = (unsigned char *)(*(void *)v75)++;
  *uint64_t v76 = v70;
  uint64_t v77 = *(void *)(v75 + 8) - 1;
  *(void *)(v75 + 8) = v77;
  if (!v77)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v75 + 24))(v1);
    if (!result)
    {
      uint64_t v78 = *(void *)v1;
      *(_DWORD *)(v78 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v78)(v1);
    }
  }
  uint64_t v79 = *(void *)(v1 + 40);
  uint64_t v80 = (unsigned char *)(*(void *)v79)++;
  *uint64_t v80 = 0;
  uint64_t v81 = *(void *)(v79 + 8) - 1;
  *(void *)(v79 + 8) = v81;
  if (!v81)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v79 + 24))(v1);
    if (!result)
    {
      uint64_t v82 = *(void *)v1;
      *(_DWORD *)(v82 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v82)(v1);
    }
  }
  uint64_t v83 = *(void *)(v1 + 40);
  uint64_t v84 = (unsigned char *)(*(void *)v83)++;
  *uint64_t v84 = 0;
  uint64_t v85 = *(void *)(v83 + 8) - 1;
  *(void *)(v83 + 8) = v85;
  if (!v85)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v83 + 24))(v1);
    if (!result)
    {
      uint64_t v86 = *(void *)v1;
      *(_DWORD *)(v86 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v86)(v1);
    }
  }
LABEL_62:
  if (!*(unsigned char *)(v1 + 320)) {
    return result;
  }
  uint64_t v88 = *(void *)(v1 + 40);
  unsigned int v89 = (unsigned char *)(*(void *)v88)++;
  unsigned char *v89 = -1;
  uint64_t v90 = *(void *)(v88 + 8) - 1;
  *(void *)(v88 + 8) = v90;
  if (!v90)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v88 + 24))(v1);
    if (!result)
    {
      uint64_t v91 = *(void *)v1;
      *(_DWORD *)(v91 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v91)(v1);
    }
  }
  uint64_t v92 = *(void *)(v1 + 40);
  uint64_t v93 = (unsigned char *)(*(void *)v92)++;
  *uint64_t v93 = -18;
  uint64_t v94 = *(void *)(v92 + 8) - 1;
  *(void *)(v92 + 8) = v94;
  if (!v94)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v92 + 24))(v1);
    if (!result)
    {
      uint64_t v95 = *(void *)v1;
      *(_DWORD *)(v95 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v95)(v1);
    }
  }
  uint64_t v96 = *(void *)(v1 + 40);
  v97 = (unsigned char *)(*(void *)v96)++;
  unsigned char *v97 = 0;
  uint64_t v98 = *(void *)(v96 + 8) - 1;
  *(void *)(v96 + 8) = v98;
  if (!v98)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v96 + 24))(v1);
    if (!result)
    {
      uint64_t v99 = *(void *)v1;
      *(_DWORD *)(v99 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v99)(v1);
    }
  }
  uint64_t v100 = *(void *)(v1 + 40);
  int v101 = (unsigned char *)(*(void *)v100)++;
  *int v101 = 14;
  uint64_t v102 = *(void *)(v100 + 8) - 1;
  *(void *)(v100 + 8) = v102;
  if (!v102)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v100 + 24))(v1);
    if (!result)
    {
      uint64_t v103 = *(void *)v1;
      *(_DWORD *)(v103 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v103)(v1);
    }
  }
  uint64_t v104 = *(void *)(v1 + 40);
  int v105 = (unsigned char *)(*(void *)v104)++;
  unsigned char *v105 = 65;
  uint64_t v106 = *(void *)(v104 + 8) - 1;
  *(void *)(v104 + 8) = v106;
  if (!v106)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v104 + 24))(v1);
    if (!result)
    {
      uint64_t v107 = *(void *)v1;
      *(_DWORD *)(v107 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v107)(v1);
    }
  }
  uint64_t v108 = *(void *)(v1 + 40);
  int v109 = (unsigned char *)(*(void *)v108)++;
  *int v109 = 100;
  uint64_t v110 = *(void *)(v108 + 8) - 1;
  *(void *)(v108 + 8) = v110;
  if (!v110)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v108 + 24))(v1);
    if (!result)
    {
      uint64_t v111 = *(void *)v1;
      *(_DWORD *)(v111 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v111)(v1);
    }
  }
  uint64_t v112 = *(void *)(v1 + 40);
  v113 = (unsigned char *)(*(void *)v112)++;
  unsigned char *v113 = 111;
  uint64_t v114 = *(void *)(v112 + 8) - 1;
  *(void *)(v112 + 8) = v114;
  if (!v114)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v112 + 24))(v1);
    if (!result)
    {
      uint64_t v115 = *(void *)v1;
      *(_DWORD *)(v115 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v115)(v1);
    }
  }
  uint64_t v116 = *(void *)(v1 + 40);
  uint64_t v117 = (unsigned char *)(*(void *)v116)++;
  *uint64_t v117 = 98;
  uint64_t v118 = *(void *)(v116 + 8) - 1;
  *(void *)(v116 + 8) = v118;
  if (!v118)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v116 + 24))(v1);
    if (!result)
    {
      uint64_t v119 = *(void *)v1;
      *(_DWORD *)(v119 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v119)(v1);
    }
  }
  uint64_t v120 = *(void *)(v1 + 40);
  uint64_t v121 = (unsigned char *)(*(void *)v120)++;
  *uint64_t v121 = 101;
  uint64_t v122 = *(void *)(v120 + 8) - 1;
  *(void *)(v120 + 8) = v122;
  if (!v122)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v120 + 24))(v1);
    if (!result)
    {
      uint64_t v123 = *(void *)v1;
      *(_DWORD *)(v123 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v123)(v1);
    }
  }
  uint64_t v124 = *(void *)(v1 + 40);
  uint64_t v125 = (unsigned char *)(*(void *)v124)++;
  unsigned char *v125 = 0;
  uint64_t v126 = *(void *)(v124 + 8) - 1;
  *(void *)(v124 + 8) = v126;
  if (!v126)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v124 + 24))(v1);
    if (!result)
    {
      uint64_t v127 = *(void *)v1;
      *(_DWORD *)(v127 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v127)(v1);
    }
  }
  uint64_t v128 = *(void *)(v1 + 40);
  long long v129 = (unsigned char *)(*(void *)v128)++;
  *long long v129 = 100;
  uint64_t v130 = *(void *)(v128 + 8) - 1;
  *(void *)(v128 + 8) = v130;
  if (!v130)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v128 + 24))(v1);
    if (!result)
    {
      uint64_t v131 = *(void *)v1;
      *(_DWORD *)(v131 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v131)(v1);
    }
  }
  uint64_t v132 = *(void *)(v1 + 40);
  v133 = (unsigned char *)(*(void *)v132)++;
  unsigned char *v133 = 0;
  uint64_t v134 = *(void *)(v132 + 8) - 1;
  *(void *)(v132 + 8) = v134;
  if (!v134)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v132 + 24))(v1);
    if (!result)
    {
      uint64_t v135 = *(void *)v1;
      *(_DWORD *)(v135 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v135)(v1);
    }
  }
  uint64_t v136 = *(void *)(v1 + 40);
  uint64_t v137 = (unsigned char *)(*(void *)v136)++;
  *uint64_t v137 = 0;
  uint64_t v138 = *(void *)(v136 + 8) - 1;
  *(void *)(v136 + 8) = v138;
  if (!v138)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v136 + 24))(v1);
    if (!result)
    {
      uint64_t v139 = *(void *)v1;
      *(_DWORD *)(v139 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v139)(v1);
    }
  }
  uint64_t v140 = *(void *)(v1 + 40);
  int v141 = (unsigned char *)(*(void *)v140)++;
  *int v141 = 0;
  uint64_t v142 = *(void *)(v140 + 8) - 1;
  *(void *)(v140 + 8) = v142;
  if (!v142)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v140 + 24))(v1);
    if (!result)
    {
      uint64_t v143 = *(void *)v1;
      *(_DWORD *)(v143 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v143)(v1);
    }
  }
  uint64_t v144 = *(void *)(v1 + 40);
  v145 = (unsigned char *)(*(void *)v144)++;
  unsigned char *v145 = 0;
  uint64_t v146 = *(void *)(v144 + 8) - 1;
  *(void *)(v144 + 8) = v146;
  if (v146 || (uint64_t result = (*(uint64_t (**)(uint64_t))(v144 + 24))(v1), result))
  {
    int v147 = *(_DWORD *)(v1 + 96);
    if (v147 != 5) {
      goto LABEL_108;
    }
LABEL_114:
    uint64_t v148 = *(void *)(v1 + 40);
    v154 = (unsigned char *)(*(void *)v148)++;
    unsigned char *v154 = 2;
    uint64_t v155 = *(void *)(v148 + 8) - 1;
    *(void *)(v148 + 8) = v155;
    if (v155) {
      return result;
    }
    goto LABEL_115;
  }
  uint64_t v153 = *(void *)v1;
  *(_DWORD *)(v153 + 40) = 25;
  uint64_t result = (*(uint64_t (**)(uint64_t))v153)(v1);
  int v147 = *(_DWORD *)(v1 + 96);
  if (v147 == 5) {
    goto LABEL_114;
  }
LABEL_108:
  if (v147 == 3)
  {
    uint64_t v148 = *(void *)(v1 + 40);
    v149 = (unsigned char *)(*(void *)v148)++;
    unsigned char *v149 = 1;
    uint64_t v150 = *(void *)(v148 + 8) - 1;
    *(void *)(v148 + 8) = v150;
    if (v150) {
      return result;
    }
  }
  else
  {
    uint64_t v148 = *(void *)(v1 + 40);
    v151 = (unsigned char *)(*(void *)v148)++;
    unsigned char *v151 = 0;
    uint64_t v152 = *(void *)(v148 + 8) - 1;
    *(void *)(v148 + 8) = v152;
    if (v152) {
      return result;
    }
  }
LABEL_115:
  uint64_t result = (*(uint64_t (**)(uint64_t))(v148 + 24))(v1);
  if (!result)
  {
    uint64_t v156 = *(void *)v1;
    *(_DWORD *)(v156 + 40) = 25;
    v157 = *(uint64_t (**)(uint64_t))v156;
    return v157(v1);
  }
  return result;
}

uint64_t sub_1003C16B4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 92);
  if (v2 < 1)
  {
    int v3 = 0;
    if (*(unsigned char *)(a1 + 289)) {
      goto LABEL_7;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
    uint64_t v5 = (int *)(*(void *)(a1 + 104) + 16);
    do
    {
      int v6 = *v5;
      v5 += 24;
      v3 += sub_1003C33E0(a1, v6);
      ++v4;
      int v2 = *(_DWORD *)(a1 + 92);
    }
    while (v4 < v2);
    if (*(unsigned char *)(a1 + 289)) {
      goto LABEL_7;
    }
  }
  if (*(unsigned char *)(a1 + 332)) {
    goto LABEL_22;
  }
  if (*(_DWORD *)(a1 + 88) == 8 && *(_DWORD *)(a1 + 460) == 8)
  {
    if (v2 < 1)
    {
      int v9 = 1;
    }
    else
    {
      uint64_t v8 = (int *)(*(void *)(a1 + 104) + 24);
      int v9 = 1;
      do
      {
        if (*(v8 - 1) > 1 || *v8 >= 2) {
          int v9 = 0;
        }
        v8 += 24;
        --v2;
      }
      while (v2);
    }
    if (v3 && v9)
    {
      uint64_t v154 = *(void *)a1;
      *(_DWORD *)(v154 + 40) = 77;
      (*(void (**)(uint64_t, void))(v154 + 8))(a1, 0);
      if (!*(unsigned char *)(a1 + 289))
      {
        if (!*(unsigned char *)(a1 + 332)) {
          goto LABEL_141;
        }
        goto LABEL_22;
      }
LABEL_7:
      if (*(unsigned char *)(a1 + 332)) {
        char v7 = -54;
      }
      else {
        char v7 = -55;
      }
      goto LABEL_23;
    }
  }
  else
  {
    int v9 = 0;
  }
  if (*(unsigned char *)(a1 + 332))
  {
LABEL_22:
    char v7 = -62;
    goto LABEL_23;
  }
  if (!v9)
  {
LABEL_141:
    char v7 = -63;
    goto LABEL_23;
  }
  char v7 = -64;
LABEL_23:
  uint64_t result = sub_1003C3788(a1, v7);
  int v11 = *(_DWORD *)(a1 + 324);
  if (!v11) {
    goto LABEL_104;
  }
  if (v11 != 1 || *(int *)(a1 + 92) <= 2)
  {
    uint64_t v12 = *(void *)a1;
    *(_DWORD *)(v12 + 40) = 28;
    uint64_t result = (*(uint64_t (**)(uint64_t))v12)(a1);
  }
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = (unsigned char *)(*(void *)v13)++;
  *uint64_t v14 = -1;
  uint64_t v15 = *(void *)(v13 + 8) - 1;
  *(void *)(v13 + 8) = v15;
  if (!v15)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v13 + 24))(a1);
    if (!result)
    {
      uint64_t v16 = *(void *)a1;
      *(_DWORD *)(v16 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v16)(a1);
    }
  }
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = (unsigned char *)(*(void *)v17)++;
  *uint64_t v18 = -8;
  uint64_t v19 = *(void *)(v17 + 8) - 1;
  *(void *)(v17 + 8) = v19;
  if (!v19)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v17 + 24))(a1);
    if (!result)
    {
      uint64_t v20 = *(void *)a1;
      *(_DWORD *)(v20 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v20)(a1);
    }
  }
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v22 = (unsigned char *)(*(void *)v21)++;
  *uint64_t v22 = 0;
  uint64_t v23 = *(void *)(v21 + 8) - 1;
  *(void *)(v21 + 8) = v23;
  if (!v23)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v21 + 24))(a1);
    if (!result)
    {
      uint64_t v24 = *(void *)a1;
      *(_DWORD *)(v24 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v24)(a1);
    }
  }
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v26 = (unsigned char *)(*(void *)v25)++;
  *uint64_t v26 = 24;
  uint64_t v27 = *(void *)(v25 + 8) - 1;
  *(void *)(v25 + 8) = v27;
  if (!v27)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v25 + 24))(a1);
    if (!result)
    {
      uint64_t v28 = *(void *)a1;
      *(_DWORD *)(v28 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v28)(a1);
    }
  }
  uint64_t v29 = *(void *)(a1 + 40);
  uint64_t v30 = (unsigned char *)(*(void *)v29)++;
  *uint64_t v30 = 13;
  uint64_t v31 = *(void *)(v29 + 8) - 1;
  *(void *)(v29 + 8) = v31;
  if (!v31)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v29 + 24))(a1);
    if (!result)
    {
      uint64_t v32 = *(void *)a1;
      *(_DWORD *)(v32 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v32)(a1);
    }
  }
  uint64_t v33 = *(void *)(a1 + 40);
  uint64_t v34 = (unsigned char *)(*(void *)v33)++;
  *uint64_t v34 = 0;
  uint64_t v35 = *(void *)(v33 + 8) - 1;
  *(void *)(v33 + 8) = v35;
  if (!v35)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v33 + 24))(a1);
    if (!result)
    {
      uint64_t v36 = *(void *)a1;
      *(_DWORD *)(v36 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v36)(a1);
    }
  }
  uint64_t v37 = *(void *)(a1 + 40);
  uint64_t v38 = (unsigned char *)(*(void *)v37)++;
  unsigned char *v38 = -1;
  uint64_t v39 = *(void *)(v37 + 8) - 1;
  *(void *)(v37 + 8) = v39;
  if (!v39)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v37 + 24))(a1);
    if (!result)
    {
      uint64_t v40 = *(void *)a1;
      *(_DWORD *)(v40 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v40)(a1);
    }
  }
  uint64_t v41 = *(void *)(a1 + 40);
  uint64_t v42 = (unsigned char *)(*(void *)v41)++;
  unsigned char *v42 = 3;
  uint64_t v43 = *(void *)(v41 + 8) - 1;
  *(void *)(v41 + 8) = v43;
  if (!v43)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v41 + 24))(a1);
    if (!result)
    {
      uint64_t v44 = *(void *)a1;
      *(_DWORD *)(v44 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v44)(a1);
    }
  }
  char v45 = *(_DWORD *)(*(void *)(a1 + 104) + 96);
  uint64_t v46 = *(void *)(a1 + 40);
  uint64_t v47 = (unsigned char *)(*(void *)v46)++;
  unsigned char *v47 = v45;
  uint64_t v48 = *(void *)(v46 + 8) - 1;
  *(void *)(v46 + 8) = v48;
  if (!v48)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v46 + 24))(a1);
    if (!result)
    {
      uint64_t v49 = *(void *)a1;
      *(_DWORD *)(v49 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v49)(a1);
    }
  }
  char v50 = **(_DWORD **)(a1 + 104);
  uint64_t v51 = *(void *)(a1 + 40);
  uint64_t v52 = (unsigned char *)(*(void *)v51)++;
  unsigned char *v52 = v50;
  uint64_t v53 = *(void *)(v51 + 8) - 1;
  *(void *)(v51 + 8) = v53;
  if (!v53)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v51 + 24))(a1);
    if (!result)
    {
      uint64_t v54 = *(void *)a1;
      *(_DWORD *)(v54 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v54)(a1);
    }
  }
  char v55 = *(_DWORD *)(*(void *)(a1 + 104) + 192);
  uint64_t v56 = *(void *)(a1 + 40);
  uint64_t v57 = (unsigned char *)(*(void *)v56)++;
  unsigned char *v57 = v55;
  uint64_t v58 = *(void *)(v56 + 8) - 1;
  *(void *)(v56 + 8) = v58;
  if (!v58)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v56 + 24))(a1);
    if (!result)
    {
      uint64_t v59 = *(void *)a1;
      *(_DWORD *)(v59 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v59)(a1);
    }
  }
  uint64_t v60 = *(void *)(a1 + 40);
  __int16 v61 = (unsigned char *)(*(void *)v60)++;
  unsigned char *v61 = 0x80;
  uint64_t v62 = *(void *)(v60 + 8) - 1;
  *(void *)(v60 + 8) = v62;
  if (!v62)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v60 + 24))(a1);
    if (!result)
    {
      uint64_t v63 = *(void *)a1;
      *(_DWORD *)(v63 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v63)(a1);
    }
  }
  uint64_t v64 = *(void *)(a1 + 40);
  uint64_t v65 = (unsigned char *)(*(void *)v64)++;
  *uint64_t v65 = 0;
  uint64_t v66 = *(void *)(v64 + 8) - 1;
  *(void *)(v64 + 8) = v66;
  if (!v66)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v64 + 24))(a1);
    if (!result)
    {
      uint64_t v67 = *(void *)a1;
      *(_DWORD *)(v67 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v67)(a1);
    }
  }
  uint64_t v68 = *(void *)(a1 + 40);
  uint64_t v69 = (unsigned char *)(*(void *)v68)++;
  *uint64_t v69 = 0;
  uint64_t v70 = *(void *)(v68 + 8) - 1;
  *(void *)(v68 + 8) = v70;
  if (!v70)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v68 + 24))(a1);
    if (!result)
    {
      uint64_t v71 = *(void *)a1;
      *(_DWORD *)(v71 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v71)(a1);
    }
  }
  uint64_t v72 = *(void *)(a1 + 40);
  uint64_t v73 = (unsigned char *)(*(void *)v72)++;
  unsigned char *v73 = 0;
  uint64_t v74 = *(void *)(v72 + 8) - 1;
  *(void *)(v72 + 8) = v74;
  if (!v74)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v72 + 24))(a1);
    if (!result)
    {
      uint64_t v75 = *(void *)a1;
      *(_DWORD *)(v75 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v75)(a1);
    }
  }
  uint64_t v76 = *(void *)(a1 + 40);
  uint64_t v77 = (unsigned char *)(*(void *)v76)++;
  *uint64_t v77 = 0;
  uint64_t v78 = *(void *)(v76 + 8) - 1;
  *(void *)(v76 + 8) = v78;
  if (!v78)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v76 + 24))(a1);
    if (!result)
    {
      uint64_t v79 = *(void *)a1;
      *(_DWORD *)(v79 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v79)(a1);
    }
  }
  uint64_t v80 = *(void *)(a1 + 40);
  uint64_t v81 = (unsigned char *)(*(void *)v80)++;
  *uint64_t v81 = 0;
  uint64_t v82 = *(void *)(v80 + 8) - 1;
  *(void *)(v80 + 8) = v82;
  if (!v82)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v80 + 24))(a1);
    if (!result)
    {
      uint64_t v83 = *(void *)a1;
      *(_DWORD *)(v83 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v83)(a1);
    }
  }
  uint64_t v84 = *(void *)(a1 + 40);
  uint64_t v85 = (unsigned char *)(*(void *)v84)++;
  *uint64_t v85 = 0;
  uint64_t v86 = *(void *)(v84 + 8) - 1;
  *(void *)(v84 + 8) = v86;
  if (!v86)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v84 + 24))(a1);
    if (!result)
    {
      uint64_t v87 = *(void *)a1;
      *(_DWORD *)(v87 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v87)(a1);
    }
  }
  uint64_t v88 = *(void *)(a1 + 40);
  unsigned int v89 = (unsigned char *)(*(void *)v88)++;
  unsigned char *v89 = 1;
  uint64_t v90 = *(void *)(v88 + 8) - 1;
  *(void *)(v88 + 8) = v90;
  if (!v90)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v88 + 24))(a1);
    if (!result)
    {
      uint64_t v91 = *(void *)a1;
      *(_DWORD *)(v91 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v91)(a1);
    }
  }
  uint64_t v92 = *(void *)(a1 + 40);
  uint64_t v93 = (unsigned char *)(*(void *)v92)++;
  *uint64_t v93 = 0;
  uint64_t v94 = *(void *)(v92 + 8) - 1;
  *(void *)(v92 + 8) = v94;
  if (!v94)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v92 + 24))(a1);
    if (!result)
    {
      uint64_t v95 = *(void *)a1;
      *(_DWORD *)(v95 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v95)(a1);
    }
  }
  uint64_t v96 = *(void *)(a1 + 40);
  v97 = (unsigned char *)(*(void *)v96)++;
  unsigned char *v97 = 0;
  uint64_t v98 = *(void *)(v96 + 8) - 1;
  *(void *)(v96 + 8) = v98;
  if (!v98)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v96 + 24))(a1);
    if (!result)
    {
      uint64_t v99 = *(void *)a1;
      *(_DWORD *)(v99 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v99)(a1);
    }
  }
  uint64_t v100 = *(void *)(a1 + 40);
  int v101 = (unsigned char *)(*(void *)v100)++;
  *int v101 = 0;
  uint64_t v102 = *(void *)(v100 + 8) - 1;
  *(void *)(v100 + 8) = v102;
  if (!v102)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v100 + 24))(a1);
    if (!result)
    {
      uint64_t v103 = *(void *)a1;
      *(_DWORD *)(v103 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v103)(a1);
    }
  }
  uint64_t v104 = *(void *)(a1 + 40);
  int v105 = (unsigned char *)(*(void *)v104)++;
  unsigned char *v105 = 0;
  uint64_t v106 = *(void *)(v104 + 8) - 1;
  *(void *)(v104 + 8) = v106;
  if (!v106)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v104 + 24))(a1);
    if (!result)
    {
      uint64_t v107 = *(void *)a1;
      *(_DWORD *)(v107 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v107)(a1);
    }
  }
  uint64_t v108 = *(void *)(a1 + 40);
  int v109 = (unsigned char *)(*(void *)v108)++;
  *int v109 = 1;
  uint64_t v110 = *(void *)(v108 + 8) - 1;
  *(void *)(v108 + 8) = v110;
  if (!v110)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v108 + 24))(a1);
    if (!result)
    {
      uint64_t v111 = *(void *)a1;
      *(_DWORD *)(v111 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v111)(a1);
    }
  }
  uint64_t v112 = *(void *)(a1 + 40);
  v113 = (unsigned char *)(*(void *)v112)++;
  unsigned char *v113 = 0;
  uint64_t v114 = *(void *)(v112 + 8) - 1;
  *(void *)(v112 + 8) = v114;
  if (!v114)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v112 + 24))(a1);
    if (!result)
    {
      uint64_t v115 = *(void *)a1;
      *(_DWORD *)(v115 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v115)(a1);
    }
  }
  uint64_t v116 = *(void *)(a1 + 40);
  uint64_t v117 = (unsigned char *)(*(void *)v116)++;
  *uint64_t v117 = 0;
  uint64_t v118 = *(void *)(v116 + 8) - 1;
  *(void *)(v116 + 8) = v118;
  if (v118 || (uint64_t result = (*(uint64_t (**)(uint64_t))(v116 + 24))(a1), result))
  {
LABEL_104:
    if (!*(unsigned char *)(a1 + 332)) {
      return result;
    }
  }
  else
  {
    uint64_t v153 = *(void *)a1;
    *(_DWORD *)(v153 + 40) = 25;
    uint64_t result = (*(uint64_t (**)(uint64_t))v153)(a1);
    if (!*(unsigned char *)(a1 + 332)) {
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 460) != 8)
  {
    uint64_t v119 = *(void *)(a1 + 40);
    uint64_t v120 = (unsigned char *)(*(void *)v119)++;
    unsigned char *v120 = -1;
    uint64_t v121 = *(void *)(v119 + 8) - 1;
    *(void *)(v119 + 8) = v121;
    if (!v121)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v119 + 24))(a1);
      if (!result)
      {
        uint64_t v122 = *(void *)a1;
        *(_DWORD *)(v122 + 40) = 25;
        uint64_t result = (*(uint64_t (**)(uint64_t))v122)(a1);
      }
    }
    uint64_t v123 = *(void *)(a1 + 40);
    uint64_t v124 = (unsigned char *)(*(void *)v123)++;
    *uint64_t v124 = -38;
    uint64_t v125 = *(void *)(v123 + 8) - 1;
    *(void *)(v123 + 8) = v125;
    if (!v125)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v123 + 24))(a1);
      if (!result)
      {
        uint64_t v126 = *(void *)a1;
        *(_DWORD *)(v126 + 40) = 25;
        uint64_t result = (*(uint64_t (**)(uint64_t))v126)(a1);
      }
    }
    uint64_t v127 = *(void *)(a1 + 40);
    uint64_t v128 = (unsigned char *)(*(void *)v127)++;
    unsigned char *v128 = 0;
    uint64_t v129 = *(void *)(v127 + 8) - 1;
    *(void *)(v127 + 8) = v129;
    if (!v129)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v127 + 24))(a1);
      if (!result)
      {
        uint64_t v130 = *(void *)a1;
        *(_DWORD *)(v130 + 40) = 25;
        uint64_t result = (*(uint64_t (**)(uint64_t))v130)(a1);
      }
    }
    uint64_t v131 = *(void *)(a1 + 40);
    uint64_t v132 = (unsigned char *)(*(void *)v131)++;
    *uint64_t v132 = 6;
    uint64_t v133 = *(void *)(v131 + 8) - 1;
    *(void *)(v131 + 8) = v133;
    if (!v133)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v131 + 24))(a1);
      if (!result)
      {
        uint64_t v134 = *(void *)a1;
        *(_DWORD *)(v134 + 40) = 25;
        uint64_t result = (*(uint64_t (**)(uint64_t))v134)(a1);
      }
    }
    uint64_t v135 = *(void *)(a1 + 40);
    uint64_t v136 = (unsigned char *)(*(void *)v135)++;
    *uint64_t v136 = 0;
    uint64_t v137 = *(void *)(v135 + 8) - 1;
    *(void *)(v135 + 8) = v137;
    if (!v137)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v135 + 24))(a1);
      if (!result)
      {
        uint64_t v138 = *(void *)a1;
        *(_DWORD *)(v138 + 40) = 25;
        uint64_t result = (*(uint64_t (**)(uint64_t))v138)(a1);
      }
    }
    uint64_t v139 = *(void *)(a1 + 40);
    uint64_t v140 = (unsigned char *)(*(void *)v139)++;
    *uint64_t v140 = 0;
    uint64_t v141 = *(void *)(v139 + 8) - 1;
    *(void *)(v139 + 8) = v141;
    if (!v141)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v139 + 24))(a1);
      if (!result)
      {
        uint64_t v142 = *(void *)a1;
        *(_DWORD *)(v142 + 40) = 25;
        uint64_t result = (*(uint64_t (**)(uint64_t))v142)(a1);
      }
    }
    uint64_t v143 = *(void *)(a1 + 40);
    char v144 = *(_DWORD *)(a1 + 460) * *(_DWORD *)(a1 + 460) - 1;
    v145 = (unsigned char *)(*(void *)v143)++;
    unsigned char *v145 = v144;
    uint64_t v146 = *(void *)(v143 + 8) - 1;
    *(void *)(v143 + 8) = v146;
    if (!v146)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v143 + 24))(a1);
      if (!result)
      {
        uint64_t v147 = *(void *)a1;
        *(_DWORD *)(v147 + 40) = 25;
        uint64_t result = (*(uint64_t (**)(uint64_t))v147)(a1);
      }
    }
    uint64_t v148 = *(void *)(a1 + 40);
    v149 = (unsigned char *)(*(void *)v148)++;
    unsigned char *v149 = 0;
    uint64_t v150 = *(void *)(v148 + 8) - 1;
    *(void *)(v148 + 8) = v150;
    if (!v150)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(v148 + 24))(a1);
      if (!result)
      {
        uint64_t v151 = *(void *)a1;
        *(_DWORD *)(v151 + 40) = 25;
        uint64_t v152 = *(uint64_t (**)(uint64_t))v151;
        return v152(a1);
      }
    }
  }
  return result;
}

uint64_t *sub_1003C22E4(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[64];
  if (!*((unsigned char *)result + 289))
  {
    if (*((int *)result + 89) < 1) {
      goto LABEL_73;
    }
    uint64_t v6 = 45;
    while (1)
    {
      uint64_t v8 = v1[v6];
      if (!*((_DWORD *)v1 + 111) && !*((_DWORD *)v1 + 113)) {
        break;
      }
      if (*((_DWORD *)v1 + 112)) {
        goto LABEL_13;
      }
LABEL_9:
      uint64_t v7 = v6 - 44;
      ++v6;
      if (v7 >= *((int *)v1 + 89)) {
        goto LABEL_73;
      }
    }
    uint64_t result = sub_1003C3C34(v1, *(_DWORD *)(v8 + 20), 0);
    if (!*((_DWORD *)v1 + 112)) {
      goto LABEL_9;
    }
LABEL_13:
    uint64_t result = sub_1003C3C34(v1, *(_DWORD *)(v8 + 24), 1);
    goto LABEL_9;
  }
  int8x16_t v150 = 0uLL;
  int8x16_t v151 = 0uLL;
  uint64_t v3 = *((unsigned int *)result + 89);
  if ((int)v3 < 1) {
    goto LABEL_43;
  }
  int v4 = *((_DWORD *)result + 112);
  if (!*((_DWORD *)result + 111))
  {
    if (*((_DWORD *)result + 113))
    {
      if (!v4) {
        goto LABEL_43;
      }
      if (v3 >= 2)
      {
        uint64_t v9 = v3 & 0xFFFFFFFE;
        uint64_t v19 = result + 46;
        uint64_t v20 = v9;
        do
        {
          uint64_t v21 = *(int *)(*v19 + 24);
          v150.i8[*(int *)(*(v19 - 1) + 24)] = 1;
          v150.i8[v21] = 1;
          v19 += 2;
          v20 -= 2;
        }
        while (v20);
        if (v9 == v3) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      uint64_t v22 = v3 - v9;
      uint64_t v23 = &result[v9 + 45];
      do
      {
        uint64_t v24 = *v23++;
        v150.i8[*(int *)(v24 + 24)] = 1;
        --v22;
      }
      while (v22);
      goto LABEL_43;
    }
    if (v4)
    {
      uint64_t v16 = result + 45;
      do
      {
        uint64_t v17 = *v16++;
        uint64_t v18 = *(int *)(v17 + 24);
        v151.i8[*(int *)(v17 + 20)] = 1;
        v150.i8[v18] = 1;
        --v3;
      }
      while (v3);
      goto LABEL_43;
    }
    if (v3 >= 2)
    {
      uint64_t v25 = v3 & 0xFFFFFFFE;
      uint64_t v26 = result + 46;
      uint64_t v27 = v25;
      do
      {
        uint64_t v28 = *(int *)(*v26 + 20);
        v151.i8[*(int *)(*(v26 - 1) + 20)] = 1;
        v151.i8[v28] = 1;
        v26 += 2;
        v27 -= 2;
      }
      while (v27);
      if (v25 == v3) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v29 = v3 - v25;
    uint64_t v30 = &result[v25 + 45];
    do
    {
      uint64_t v31 = *v30++;
      v151.i8[*(int *)(v31 + 20)] = 1;
      --v29;
    }
    while (v29);
    goto LABEL_43;
  }
  if (!v4) {
    goto LABEL_43;
  }
  if (v3 < 2)
  {
    uint64_t v5 = 0;
LABEL_23:
    uint64_t v13 = v3 - v5;
    uint64_t v14 = &result[v5 + 45];
    do
    {
      uint64_t v15 = *v14++;
      v150.i8[*(int *)(v15 + 24)] = 1;
      --v13;
    }
    while (v13);
    goto LABEL_43;
  }
  uint64_t v5 = v3 & 0xFFFFFFFE;
  uint64_t v10 = result + 46;
  uint64_t v11 = v5;
  do
  {
    uint64_t v12 = *(int *)(*v10 + 24);
    v150.i8[*(int *)(*(v10 - 1) + 24)] = 1;
    v150.i8[v12] = 1;
    v10 += 2;
    v11 -= 2;
  }
  while (v11);
  if (v5 != v3) {
    goto LABEL_23;
  }
LABEL_43:
  int16x8_t v32 = vmovl_s8(*(int8x8_t *)v150.i8);
  int16x8_t v33 = vmovl_s8(*(int8x8_t *)v151.i8);
  int16x8_t v34 = vmovl_high_s8(v150);
  int16x8_t v35 = vmovl_high_s8(v151);
  int v36 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddl_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v32.i8), vaddl_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v34.i8)), vaddq_s32(vaddl_high_s16(v33, v32), vaddl_high_s16(v35, v34))));
  if (v36)
  {
    uint64_t v37 = result[5];
    uint64_t v38 = (unsigned char *)(*(void *)v37)++;
    unsigned char *v38 = -1;
    uint64_t v39 = *(void *)(v37 + 8) - 1;
    *(void *)(v37 + 8) = v39;
    if (!v39)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v37 + 24))(result);
      if (!result)
      {
        uint64_t v40 = *v1;
        *(_DWORD *)(v40 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v40)(v1);
      }
    }
    uint64_t v41 = v1[5];
    uint64_t v42 = (unsigned char *)(*(void *)v41)++;
    unsigned char *v42 = -52;
    uint64_t v43 = *(void *)(v41 + 8) - 1;
    *(void *)(v41 + 8) = v43;
    if (!v43)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v41 + 24))(v1);
      if (!result)
      {
        uint64_t v44 = *v1;
        *(_DWORD *)(v44 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v44)(v1);
      }
    }
    __int16 v45 = 2 * v36 + 2;
    uint64_t v46 = v1[5];
    uint64_t v47 = (unsigned char *)(*(void *)v46)++;
    unsigned char *v47 = HIBYTE(v45);
    uint64_t v48 = *(void *)(v46 + 8) - 1;
    *(void *)(v46 + 8) = v48;
    if (!v48)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v46 + 24))(v1);
      if (!result)
      {
        uint64_t v49 = *v1;
        *(_DWORD *)(v49 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v49)(v1);
      }
    }
    uint64_t v50 = v1[5];
    uint64_t v51 = (unsigned char *)(*(void *)v50)++;
    *uint64_t v51 = v45;
    uint64_t v52 = *(void *)(v50 + 8) - 1;
    *(void *)(v50 + 8) = v52;
    if (!v52)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v50 + 24))(v1);
      if (!result)
      {
        uint64_t v53 = *v1;
        *(_DWORD *)(v53 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v53)(v1);
      }
    }
    for (uint64_t i = 0; i != 16; ++i)
    {
      if (!v151.i8[i]) {
        goto LABEL_137;
      }
      uint64_t v55 = v1[5];
      uint64_t v56 = (unsigned char *)(*(void *)v55)++;
      unsigned char *v56 = i;
      uint64_t v57 = *(void *)(v55 + 8) - 1;
      *(void *)(v55 + 8) = v57;
      if (!v57)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v55 + 24))(v1);
        if (!result)
        {
          uint64_t v58 = *v1;
          *(_DWORD *)(v58 + 40) = 25;
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v58)(v1);
        }
      }
      char v59 = *((unsigned char *)v1 + i + 224) + 16 * *((unsigned char *)v1 + i + 240);
      uint64_t v60 = v1[5];
      __int16 v61 = (unsigned char *)(*(void *)v60)++;
      unsigned char *v61 = v59;
      uint64_t v62 = *(void *)(v60 + 8) - 1;
      *(void *)(v60 + 8) = v62;
      if (v62 || (uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v60 + 24))(v1), result))
      {
LABEL_137:
        if (v150.i8[i]) {
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v72 = *v1;
        *(_DWORD *)(v72 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v72)(v1);
        if (v150.i8[i])
        {
LABEL_65:
          uint64_t v63 = v1[5];
          uint64_t v64 = (unsigned char *)(*(void *)v63)++;
          *uint64_t v64 = i + 16;
          uint64_t v65 = *(void *)(v63 + 8) - 1;
          *(void *)(v63 + 8) = v65;
          if (!v65)
          {
            uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v63 + 24))(v1);
            if (!result)
            {
              uint64_t v66 = *v1;
              *(_DWORD *)(v66 + 40) = 25;
              uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v66)(v1);
            }
          }
          char v67 = *((unsigned char *)v1 + i + 256);
          uint64_t v68 = v1[5];
          uint64_t v69 = (unsigned char *)(*(void *)v68)++;
          *uint64_t v69 = v67;
          uint64_t v70 = *(void *)(v68 + 8) - 1;
          *(void *)(v68 + 8) = v70;
          if (!v70)
          {
            uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v68 + 24))(v1);
            if (!result)
            {
              uint64_t v71 = *v1;
              *(_DWORD *)(v71 + 40) = 25;
              uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v71)(v1);
            }
          }
        }
      }
    }
  }
LABEL_73:
  if (*((_DWORD *)v1 + 76) != *(_DWORD *)(v2 + 56))
  {
    uint64_t v73 = v1[5];
    uint64_t v74 = (unsigned char *)(*(void *)v73)++;
    *uint64_t v74 = -1;
    uint64_t v75 = *(void *)(v73 + 8) - 1;
    *(void *)(v73 + 8) = v75;
    if (!v75)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v73 + 24))(v1);
      if (!result)
      {
        uint64_t v76 = *v1;
        *(_DWORD *)(v76 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v76)(v1);
      }
    }
    uint64_t v77 = v1[5];
    uint64_t v78 = (unsigned char *)(*(void *)v77)++;
    unsigned char *v78 = -35;
    uint64_t v79 = *(void *)(v77 + 8) - 1;
    *(void *)(v77 + 8) = v79;
    if (!v79)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v77 + 24))(v1);
      if (!result)
      {
        uint64_t v80 = *v1;
        *(_DWORD *)(v80 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v80)(v1);
      }
    }
    uint64_t v81 = v1[5];
    uint64_t v82 = (unsigned char *)(*(void *)v81)++;
    *uint64_t v82 = 0;
    uint64_t v83 = *(void *)(v81 + 8) - 1;
    *(void *)(v81 + 8) = v83;
    if (!v83)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v81 + 24))(v1);
      if (!result)
      {
        uint64_t v84 = *v1;
        *(_DWORD *)(v84 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v84)(v1);
      }
    }
    uint64_t v85 = v1[5];
    uint64_t v86 = (unsigned char *)(*(void *)v85)++;
    *uint64_t v86 = 4;
    uint64_t v87 = *(void *)(v85 + 8) - 1;
    *(void *)(v85 + 8) = v87;
    if (!v87)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v85 + 24))(v1);
      if (!result)
      {
        uint64_t v88 = *v1;
        *(_DWORD *)(v88 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v88)(v1);
      }
    }
    int v89 = *((_DWORD *)v1 + 76);
    uint64_t v90 = v1[5];
    uint64_t v91 = (unsigned char *)(*(void *)v90)++;
    *uint64_t v91 = BYTE1(v89);
    uint64_t v92 = *(void *)(v90 + 8) - 1;
    *(void *)(v90 + 8) = v92;
    if (!v92)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v90 + 24))(v1);
      if (!result)
      {
        uint64_t v93 = *v1;
        *(_DWORD *)(v93 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v93)(v1);
      }
    }
    uint64_t v94 = v1[5];
    uint64_t v95 = (unsigned char *)(*(void *)v94)++;
    *uint64_t v95 = v89;
    uint64_t v96 = *(void *)(v94 + 8) - 1;
    *(void *)(v94 + 8) = v96;
    if (!v96)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v94 + 24))(v1);
      if (!result)
      {
        uint64_t v97 = *v1;
        *(_DWORD *)(v97 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v97)(v1);
      }
    }
    *(_DWORD *)(v2 + 56) = *((_DWORD *)v1 + 76);
  }
  uint64_t v98 = v1[5];
  uint64_t v99 = (unsigned char *)(*(void *)v98)++;
  *uint64_t v99 = -1;
  uint64_t v100 = *(void *)(v98 + 8) - 1;
  *(void *)(v98 + 8) = v100;
  if (!v100)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v98 + 24))(v1);
    if (!result)
    {
      uint64_t v101 = *v1;
      *(_DWORD *)(v101 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v101)(v1);
    }
  }
  uint64_t v102 = v1[5];
  uint64_t v103 = (unsigned char *)(*(void *)v102)++;
  *uint64_t v103 = -38;
  uint64_t v104 = *(void *)(v102 + 8) - 1;
  *(void *)(v102 + 8) = v104;
  if (!v104)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v102 + 24))(v1);
    if (!result)
    {
      uint64_t v105 = *v1;
      *(_DWORD *)(v105 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v105)(v1);
    }
  }
  int v106 = 2 * *((_DWORD *)v1 + 89) + 6;
  uint64_t v107 = v1[5];
  uint64_t v108 = (unsigned char *)(*(void *)v107)++;
  *uint64_t v108 = BYTE1(v106);
  uint64_t v109 = *(void *)(v107 + 8) - 1;
  *(void *)(v107 + 8) = v109;
  if (!v109)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v107 + 24))(v1);
    if (!result)
    {
      uint64_t v110 = *v1;
      *(_DWORD *)(v110 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v110)(v1);
    }
  }
  uint64_t v111 = v1[5];
  uint64_t v112 = (unsigned char *)(*(void *)v111)++;
  *uint64_t v112 = v106;
  uint64_t v113 = *(void *)(v111 + 8) - 1;
  *(void *)(v111 + 8) = v113;
  if (!v113)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v111 + 24))(v1);
    if (!result)
    {
      uint64_t v114 = *v1;
      *(_DWORD *)(v114 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v114)(v1);
    }
  }
  char v115 = *((_DWORD *)v1 + 89);
  uint64_t v116 = v1[5];
  uint64_t v117 = (unsigned char *)(*(void *)v116)++;
  *uint64_t v117 = v115;
  uint64_t v118 = *(void *)(v116 + 8) - 1;
  *(void *)(v116 + 8) = v118;
  if (!v118)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v116 + 24))(v1);
    if (!result)
    {
      uint64_t v119 = *v1;
      *(_DWORD *)(v119 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v119)(v1);
    }
  }
  if (*((int *)v1 + 89) >= 1)
  {
    for (uint64_t j = 0; j < *((int *)v1 + 89); ++j)
    {
      uint64_t v121 = (_DWORD *)v1[j + 45];
      char v122 = *v121;
      uint64_t v123 = v1[5];
      uint64_t v124 = (unsigned char *)(*(void *)v123)++;
      *uint64_t v124 = v122;
      uint64_t v125 = *(void *)(v123 + 8) - 1;
      *(void *)(v123 + 8) = v125;
      if (v125 || (uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v123 + 24))(v1), result))
      {
        if (*((_DWORD *)v1 + 111)) {
          goto LABEL_118;
        }
      }
      else
      {
        uint64_t v128 = *v1;
        *(_DWORD *)(v128 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v128)(v1);
        if (*((_DWORD *)v1 + 111))
        {
LABEL_118:
          LOBYTE(v126) = 0;
          int v127 = *((_DWORD *)v1 + 112);
          if (!v127) {
            goto LABEL_120;
          }
LABEL_119:
          int v127 = v121[6];
          goto LABEL_120;
        }
      }
      if (*((_DWORD *)v1 + 113)) {
        goto LABEL_118;
      }
      int v126 = v121[5];
      int v127 = *((_DWORD *)v1 + 112);
      if (v127) {
        goto LABEL_119;
      }
LABEL_120:
      char v129 = v127 + 16 * v126;
      uint64_t v130 = v1[5];
      uint64_t v131 = (unsigned char *)(*(void *)v130)++;
      *uint64_t v131 = v129;
      uint64_t v132 = *(void *)(v130 + 8) - 1;
      *(void *)(v130 + 8) = v132;
      if (!v132)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v130 + 24))(v1);
        if (!result)
        {
          uint64_t v133 = *v1;
          *(_DWORD *)(v133 + 40) = 25;
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v133)(v1);
        }
      }
    }
  }
  char v134 = *((_DWORD *)v1 + 111);
  uint64_t v135 = v1[5];
  uint64_t v136 = (unsigned char *)(*(void *)v135)++;
  *uint64_t v136 = v134;
  uint64_t v137 = *(void *)(v135 + 8) - 1;
  *(void *)(v135 + 8) = v137;
  if (!v137)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v135 + 24))(v1);
    if (!result)
    {
      uint64_t v138 = *v1;
      *(_DWORD *)(v138 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v138)(v1);
    }
  }
  char v139 = *((_DWORD *)v1 + 112);
  uint64_t v140 = v1[5];
  uint64_t v141 = (unsigned char *)(*(void *)v140)++;
  *uint64_t v141 = v139;
  uint64_t v142 = *(void *)(v140 + 8) - 1;
  *(void *)(v140 + 8) = v142;
  if (!v142)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v140 + 24))(v1);
    if (!result)
    {
      uint64_t v143 = *v1;
      *(_DWORD *)(v143 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v143)(v1);
    }
  }
  char v144 = *((_DWORD *)v1 + 114) + 16 * *((unsigned char *)v1 + 452);
  uint64_t v145 = v1[5];
  uint64_t v146 = (unsigned char *)(*(void *)v145)++;
  *uint64_t v146 = v144;
  uint64_t v147 = *(void *)(v145 + 8) - 1;
  *(void *)(v145 + 8) = v147;
  if (!v147)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v145 + 24))(v1);
    if (!result)
    {
      uint64_t v148 = *v1;
      *(_DWORD *)(v148 + 40) = 25;
      v149 = *(uint64_t (**)(uint64_t *))v148;
      return (uint64_t *)v149(v1);
    }
  }
  return result;
}

uint64_t sub_1003C2E4C(uint64_t result)
{
  uint64_t v1 = (uint64_t *)result;
  uint64_t v2 = *(void *)(result + 40);
  uint64_t v3 = (unsigned char *)(*(void *)v2)++;
  *uint64_t v3 = -1;
  uint64_t v4 = *(void *)(v2 + 8) - 1;
  *(void *)(v2 + 8) = v4;
  if (!v4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v2 + 24))(result);
    if (!result)
    {
      uint64_t v5 = *v1;
      *(_DWORD *)(v5 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t *))v5)(v1);
    }
  }
  uint64_t v6 = v1[5];
  uint64_t v7 = (unsigned char *)(*(void *)v6)++;
  *uint64_t v7 = -39;
  uint64_t v8 = *(void *)(v6 + 8) - 1;
  *(void *)(v6 + 8) = v8;
  if (!v8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t *))(v6 + 24))(v1);
    if (!result)
    {
      uint64_t v9 = *v1;
      *(_DWORD *)(v9 + 40) = 25;
      uint64_t v10 = *(uint64_t (**)(uint64_t *))v9;
      return v10(v1);
    }
  }
  return result;
}

uint64_t sub_1003C2F24(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 40);
  uint64_t v3 = (unsigned char *)(*(void *)v2)++;
  *uint64_t v3 = -1;
  uint64_t v4 = *(void *)(v2 + 8) - 1;
  *(void *)(v2 + 8) = v4;
  if (!v4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v2 + 24))(result);
    if (!result)
    {
      uint64_t v5 = *(void *)v1;
      *(_DWORD *)(v5 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v5)(v1);
    }
  }
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v7 = (unsigned char *)(*(void *)v6)++;
  *uint64_t v7 = -40;
  uint64_t v8 = *(void *)(v6 + 8) - 1;
  *(void *)(v6 + 8) = v8;
  if (!v8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v6 + 24))(v1);
    if (!result)
    {
      uint64_t v9 = *(void *)v1;
      *(_DWORD *)(v9 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v9)(v1);
    }
  }
  if (*(void *)(v1 + 112)) {
    uint64_t result = sub_1003C33E0(v1, 0);
  }
  if (*(void *)(v1 + 120)) {
    uint64_t result = sub_1003C33E0(v1, 1);
  }
  if (*(void *)(v1 + 128)) {
    uint64_t result = sub_1003C33E0(v1, 2);
  }
  if (*(void *)(v1 + 136)) {
    uint64_t result = sub_1003C33E0(v1, 3);
  }
  if (!*(unsigned char *)(v1 + 289))
  {
    if (*(void *)(v1 + 160)) {
      uint64_t result = (uint64_t)sub_1003C3C34((uint64_t *)v1, 0, 0);
    }
    if (*(void *)(v1 + 192)) {
      uint64_t result = (uint64_t)sub_1003C3C34((uint64_t *)v1, 0, 1);
    }
    if (*(void *)(v1 + 168)) {
      uint64_t result = (uint64_t)sub_1003C3C34((uint64_t *)v1, 1, 0);
    }
    if (*(void *)(v1 + 200)) {
      uint64_t result = (uint64_t)sub_1003C3C34((uint64_t *)v1, 1, 1);
    }
    if (*(void *)(v1 + 176)) {
      uint64_t result = (uint64_t)sub_1003C3C34((uint64_t *)v1, 2, 0);
    }
    if (*(void *)(v1 + 208)) {
      uint64_t result = (uint64_t)sub_1003C3C34((uint64_t *)v1, 2, 1);
    }
    if (*(void *)(v1 + 184)) {
      uint64_t result = (uint64_t)sub_1003C3C34((uint64_t *)v1, 3, 0);
    }
    if (*(void *)(v1 + 216)) {
      uint64_t result = (uint64_t)sub_1003C3C34((uint64_t *)v1, 3, 1);
    }
  }
  uint64_t v10 = *(void *)(v1 + 40);
  uint64_t v11 = (unsigned char *)(*(void *)v10)++;
  *uint64_t v11 = -1;
  uint64_t v12 = *(void *)(v10 + 8) - 1;
  *(void *)(v10 + 8) = v12;
  if (!v12)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v10 + 24))(v1);
    if (!result)
    {
      uint64_t v13 = *(void *)v1;
      *(_DWORD *)(v13 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v13)(v1);
    }
  }
  uint64_t v14 = *(void *)(v1 + 40);
  uint64_t v15 = (unsigned char *)(*(void *)v14)++;
  *uint64_t v15 = -39;
  uint64_t v16 = *(void *)(v14 + 8) - 1;
  *(void *)(v14 + 8) = v16;
  if (!v16)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v14 + 24))(v1);
    if (!result)
    {
      uint64_t v17 = *(void *)v1;
      *(_DWORD *)(v17 + 40) = 25;
      uint64_t v18 = *(uint64_t (**)(uint64_t))v17;
      return v18(v1);
    }
  }
  return result;
}

uint64_t *sub_1003C31B4(uint64_t *result, char a2, unsigned int a3)
{
  __int16 v3 = a3;
  uint64_t v5 = result;
  if (a3 >= 0xFFFE)
  {
    uint64_t v6 = *result;
    *(_DWORD *)(v6 + 40) = 12;
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v6)(result);
  }
  uint64_t v7 = v5[5];
  uint64_t v8 = (unsigned char *)(*(void *)v7)++;
  *uint64_t v8 = -1;
  uint64_t v9 = *(void *)(v7 + 8) - 1;
  *(void *)(v7 + 8) = v9;
  if (!v9)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v7 + 24))(v5);
    if (!result)
    {
      uint64_t v10 = *v5;
      *(_DWORD *)(v10 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v10)(v5);
    }
  }
  uint64_t v11 = v5[5];
  uint64_t v12 = (unsigned char *)(*(void *)v11)++;
  *uint64_t v12 = a2;
  uint64_t v13 = *(void *)(v11 + 8) - 1;
  *(void *)(v11 + 8) = v13;
  if (!v13)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v11 + 24))(v5);
    if (!result)
    {
      uint64_t v14 = *v5;
      *(_DWORD *)(v14 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v14)(v5);
    }
  }
  __int16 v15 = v3 + 2;
  uint64_t v16 = v5[5];
  uint64_t v17 = (unsigned char *)(*(void *)v16)++;
  *uint64_t v17 = HIBYTE(v15);
  uint64_t v18 = *(void *)(v16 + 8) - 1;
  *(void *)(v16 + 8) = v18;
  if (!v18)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v16 + 24))(v5);
    if (!result)
    {
      uint64_t v19 = *v5;
      *(_DWORD *)(v19 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v19)(v5);
    }
  }
  uint64_t v20 = v5[5];
  uint64_t v21 = (unsigned char *)(*(void *)v20)++;
  unsigned char *v21 = v15;
  uint64_t v22 = *(void *)(v20 + 8) - 1;
  *(void *)(v20 + 8) = v22;
  if (!v22)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v20 + 24))(v5);
    if (!result)
    {
      uint64_t v23 = *v5;
      *(_DWORD *)(v23 + 40) = 25;
      uint64_t v24 = *(uint64_t (**)(uint64_t *))v23;
      return (uint64_t *)v24(v5);
    }
  }
  return result;
}

uint64_t sub_1003C3360(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 40);
  __int16 v3 = (unsigned char *)(*(void *)v2)++;
  *__int16 v3 = a2;
  uint64_t v4 = *(void *)(v2 + 8) - 1;
  *(void *)(v2 + 8) = v4;
  if (!v4)
  {
    uint64_t v5 = (uint64_t *)result;
    uint64_t result = (*(uint64_t (**)(void))(v2 + 24))();
    if (!result)
    {
      uint64_t v6 = *v5;
      *(_DWORD *)(v6 + 40) = 25;
      uint64_t v7 = *(uint64_t (**)(uint64_t *))v6;
      return v7(v5);
    }
  }
  return result;
}

uint64_t sub_1003C33E0(uint64_t a1, int a2)
{
  char v2 = a2;
  uint64_t v4 = *(void *)(a1 + 8 * a2 + 112);
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 472);
    if ((v5 & 0x80000000) == 0)
    {
LABEL_3:
      LODWORD(v6) = 0;
      uint64_t v7 = *(int **)(a1 + 464);
      uint64_t v8 = v5 + 1;
      do
      {
        uint64_t v9 = *v7++;
        if (*(unsigned __int16 *)(v4 + 2 * v9) > 0xFFu) {
          uint64_t v6 = 1;
        }
        else {
          uint64_t v6 = v6;
        }
        --v8;
      }
      while (v8);
      if (*(unsigned char *)(v4 + 128)) {
        return v6;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v11 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v11 + 10) = 54;
    *((_DWORD *)v11 + 11) = a2;
    (**(void (***)(uint64_t))a1)(a1);
    uint64_t v5 = *(unsigned int *)(a1 + 472);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
  if (*(unsigned char *)(v4 + 128)) {
    return v6;
  }
LABEL_12:
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = (unsigned char *)(*(void *)v12)++;
  *uint64_t v13 = -1;
  uint64_t v14 = *(void *)(v12 + 8) - 1;
  *(void *)(v12 + 8) = v14;
  if (!v14 && !(*(unsigned int (**)(uint64_t))(v12 + 24))(a1))
  {
    __int16 v15 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v15 + 10) = 25;
    (*v15)(a1);
  }
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = (unsigned char *)(*(void *)v16)++;
  *uint64_t v17 = -37;
  uint64_t v18 = *(void *)(v16 + 8) - 1;
  *(void *)(v16 + 8) = v18;
  if (!v18 && !(*(unsigned int (**)(uint64_t))(v16 + 24))(a1))
  {
    uint64_t v19 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v19 + 10) = 25;
    (*v19)(a1);
  }
  int v20 = *(_DWORD *)(a1 + 472);
  __int16 v21 = 2 * v20 + 5;
  __int16 v22 = v20 + 4;
  if (v6) {
    __int16 v23 = v21;
  }
  else {
    __int16 v23 = v22;
  }
  uint64_t v24 = *(void *)(a1 + 40);
  uint64_t v25 = (unsigned char *)(*(void *)v24)++;
  unsigned char *v25 = HIBYTE(v23);
  uint64_t v26 = *(void *)(v24 + 8) - 1;
  *(void *)(v24 + 8) = v26;
  if (!v26 && !(*(unsigned int (**)(uint64_t))(v24 + 24))(a1))
  {
    uint64_t v27 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v27 + 10) = 25;
    (*v27)(a1);
  }
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v29 = (unsigned char *)(*(void *)v28)++;
  *uint64_t v29 = v23;
  uint64_t v30 = *(void *)(v28 + 8) - 1;
  *(void *)(v28 + 8) = v30;
  if (!v30 && !(*(unsigned int (**)(uint64_t))(v28 + 24))(a1))
  {
    uint64_t v31 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v31 + 10) = 25;
    (*v31)(a1);
  }
  uint64_t v32 = *(void *)(a1 + 40);
  int16x8_t v33 = (unsigned char *)(*(void *)v32)++;
  *int16x8_t v33 = v2 + 16 * v6;
  uint64_t v34 = *(void *)(v32 + 8) - 1;
  *(void *)(v32 + 8) = v34;
  if (!v34 && !(*(unsigned int (**)(uint64_t))(v32 + 24))(a1))
  {
    int16x8_t v35 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v35 + 10) = 25;
    (*v35)(a1);
  }
  if ((*(_DWORD *)(a1 + 472) & 0x80000000) == 0)
  {
    uint64_t v36 = 0;
    if (v6)
    {
      do
      {
        __int16 v38 = *(_WORD *)(v4 + 2 * *(int *)(*(void *)(a1 + 464) + 4 * v36));
        uint64_t v39 = *(void *)(a1 + 40);
        uint64_t v40 = (unsigned char *)(*(void *)v39)++;
        *uint64_t v40 = HIBYTE(v38);
        uint64_t v41 = *(void *)(v39 + 8) - 1;
        *(void *)(v39 + 8) = v41;
        if (!v41 && !(*(unsigned int (**)(uint64_t))(v39 + 24))(a1))
        {
          uint64_t v42 = *(void (***)(uint64_t))a1;
          *((_DWORD *)v42 + 10) = 25;
          (*v42)(a1);
        }
        uint64_t v43 = *(void *)(a1 + 40);
        uint64_t v44 = (unsigned char *)(*(void *)v43)++;
        unsigned char *v44 = v38;
        uint64_t v45 = *(void *)(v43 + 8) - 1;
        *(void *)(v43 + 8) = v45;
        if (!v45 && !(*(unsigned int (**)(uint64_t))(v43 + 24))(a1))
        {
          uint64_t v46 = *(void (***)(uint64_t))a1;
          *((_DWORD *)v46 + 10) = 25;
          (*v46)(a1);
        }
        BOOL v37 = v36++ < *(int *)(a1 + 472);
      }
      while (v37);
    }
    else
    {
      do
      {
        char v47 = *(_WORD *)(v4 + 2 * *(int *)(*(void *)(a1 + 464) + 4 * v36));
        uint64_t v48 = *(void *)(a1 + 40);
        uint64_t v49 = (unsigned char *)(*(void *)v48)++;
        *uint64_t v49 = v47;
        uint64_t v50 = *(void *)(v48 + 8) - 1;
        *(void *)(v48 + 8) = v50;
        if (!v50 && !(*(unsigned int (**)(uint64_t))(v48 + 24))(a1))
        {
          uint64_t v51 = *(void (***)(uint64_t))a1;
          *((_DWORD *)v51 + 10) = 25;
          (*v51)(a1);
        }
        BOOL v37 = v36++ < *(int *)(a1 + 472);
      }
      while (v37);
    }
  }
  *(unsigned char *)(v4 + 128) = 1;
  return v6;
}

uint64_t sub_1003C3788(uint64_t result, char a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 40);
  uint64_t v5 = (unsigned char *)(*(void *)v4)++;
  *uint64_t v5 = -1;
  uint64_t v6 = *(void *)(v4 + 8) - 1;
  *(void *)(v4 + 8) = v6;
  if (!v6)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v4 + 24))(result);
    if (!result)
    {
      uint64_t v7 = *(void *)v3;
      *(_DWORD *)(v7 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v7)(v3);
    }
  }
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = (unsigned char *)(*(void *)v8)++;
  unsigned char *v9 = a2;
  uint64_t v10 = *(void *)(v8 + 8) - 1;
  *(void *)(v8 + 8) = v10;
  if (!v10)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v8 + 24))(v3);
    if (!result)
    {
      uint64_t v11 = *(void *)v3;
      *(_DWORD *)(v11 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v11)(v3);
    }
  }
  int v12 = 3 * *(_DWORD *)(v3 + 92) + 8;
  uint64_t v13 = *(void *)(v3 + 40);
  uint64_t v14 = (unsigned char *)(*(void *)v13)++;
  *uint64_t v14 = BYTE1(v12);
  uint64_t v15 = *(void *)(v13 + 8) - 1;
  *(void *)(v13 + 8) = v15;
  if (!v15)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v13 + 24))(v3);
    if (!result)
    {
      uint64_t v16 = *(void *)v3;
      *(_DWORD *)(v16 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v16)(v3);
    }
  }
  uint64_t v17 = *(void *)(v3 + 40);
  uint64_t v18 = (unsigned char *)(*(void *)v17)++;
  *uint64_t v18 = v12;
  uint64_t v19 = *(void *)(v17 + 8) - 1;
  *(void *)(v17 + 8) = v19;
  if (v19 || (uint64_t result = (*(uint64_t (**)(uint64_t))(v17 + 24))(v3), result))
  {
    if (!*(_WORD *)(v3 + 86)) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v20 = *(void *)v3;
    *(_DWORD *)(v20 + 40) = 25;
    uint64_t result = (*(uint64_t (**)(uint64_t))v20)(v3);
    if (!*(_WORD *)(v3 + 86))
    {
LABEL_13:
      if (*(_DWORD *)(v3 + 80) < 0x10000u) {
        goto LABEL_17;
      }
    }
  }
  *(void *)(*(void *)v3 + 40) = 0xFFFF0000002ALL;
  uint64_t result = (**(uint64_t (***)(uint64_t))v3)(v3);
LABEL_17:
  char v21 = *(_DWORD *)(v3 + 88);
  uint64_t v22 = *(void *)(v3 + 40);
  __int16 v23 = (unsigned char *)(*(void *)v22)++;
  *__int16 v23 = v21;
  uint64_t v24 = *(void *)(v22 + 8) - 1;
  *(void *)(v22 + 8) = v24;
  if (!v24)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v22 + 24))(v3);
    if (!result)
    {
      uint64_t v25 = *(void *)v3;
      *(_DWORD *)(v25 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v25)(v3);
    }
  }
  int v26 = *(_DWORD *)(v3 + 84);
  uint64_t v27 = *(void *)(v3 + 40);
  uint64_t v28 = (unsigned char *)(*(void *)v27)++;
  *uint64_t v28 = BYTE1(v26);
  uint64_t v29 = *(void *)(v27 + 8) - 1;
  *(void *)(v27 + 8) = v29;
  if (!v29)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v27 + 24))(v3);
    if (!result)
    {
      uint64_t v30 = *(void *)v3;
      *(_DWORD *)(v30 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v30)(v3);
    }
  }
  uint64_t v31 = *(void *)(v3 + 40);
  uint64_t v32 = (unsigned char *)(*(void *)v31)++;
  unsigned char *v32 = v26;
  uint64_t v33 = *(void *)(v31 + 8) - 1;
  *(void *)(v31 + 8) = v33;
  if (!v33)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v31 + 24))(v3);
    if (!result)
    {
      uint64_t v34 = *(void *)v3;
      *(_DWORD *)(v34 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v34)(v3);
    }
  }
  int v35 = *(_DWORD *)(v3 + 80);
  uint64_t v36 = *(void *)(v3 + 40);
  BOOL v37 = (unsigned char *)(*(void *)v36)++;
  *BOOL v37 = BYTE1(v35);
  uint64_t v38 = *(void *)(v36 + 8) - 1;
  *(void *)(v36 + 8) = v38;
  if (!v38)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v36 + 24))(v3);
    if (!result)
    {
      uint64_t v39 = *(void *)v3;
      *(_DWORD *)(v39 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v39)(v3);
    }
  }
  uint64_t v40 = *(void *)(v3 + 40);
  uint64_t v41 = (unsigned char *)(*(void *)v40)++;
  *uint64_t v41 = v35;
  uint64_t v42 = *(void *)(v40 + 8) - 1;
  *(void *)(v40 + 8) = v42;
  if (!v42)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v40 + 24))(v3);
    if (!result)
    {
      uint64_t v43 = *(void *)v3;
      *(_DWORD *)(v43 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v43)(v3);
    }
  }
  char v44 = *(_DWORD *)(v3 + 92);
  uint64_t v45 = *(void *)(v3 + 40);
  uint64_t v46 = (unsigned char *)(*(void *)v45)++;
  unsigned char *v46 = v44;
  uint64_t v47 = *(void *)(v45 + 8) - 1;
  *(void *)(v45 + 8) = v47;
  if (!v47)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v45 + 24))(v3);
    if (!result)
    {
      uint64_t v48 = *(void *)v3;
      *(_DWORD *)(v48 + 40) = 25;
      uint64_t result = (*(uint64_t (**)(uint64_t))v48)(v3);
    }
  }
  if (*(int *)(v3 + 92) >= 1)
  {
    int v49 = 0;
    uint64_t v50 = *(void *)(v3 + 104);
    do
    {
      char v51 = *(_DWORD *)v50;
      uint64_t v52 = *(void *)(v3 + 40);
      uint64_t v53 = (unsigned char *)(*(void *)v52)++;
      unsigned char *v53 = v51;
      uint64_t v54 = *(void *)(v52 + 8) - 1;
      *(void *)(v52 + 8) = v54;
      if (!v54)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v52 + 24))(v3);
        if (!result)
        {
          uint64_t v55 = *(void *)v3;
          *(_DWORD *)(v55 + 40) = 25;
          uint64_t result = (*(uint64_t (**)(uint64_t))v55)(v3);
        }
      }
      char v56 = *(_DWORD *)(v50 + 12) + 16 * *(unsigned char *)(v50 + 8);
      uint64_t v57 = *(void *)(v3 + 40);
      uint64_t v58 = (unsigned char *)(*(void *)v57)++;
      unsigned char *v58 = v56;
      uint64_t v59 = *(void *)(v57 + 8) - 1;
      *(void *)(v57 + 8) = v59;
      if (!v59)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v57 + 24))(v3);
        if (!result)
        {
          uint64_t v60 = *(void *)v3;
          *(_DWORD *)(v60 + 40) = 25;
          uint64_t result = (*(uint64_t (**)(uint64_t))v60)(v3);
        }
      }
      char v61 = *(_DWORD *)(v50 + 16);
      uint64_t v62 = *(void *)(v3 + 40);
      uint64_t v63 = (unsigned char *)(*(void *)v62)++;
      *uint64_t v63 = v61;
      uint64_t v64 = *(void *)(v62 + 8) - 1;
      *(void *)(v62 + 8) = v64;
      if (!v64)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(v62 + 24))(v3);
        if (!result)
        {
          uint64_t v65 = *(void *)v3;
          *(_DWORD *)(v65 + 40) = 25;
          uint64_t result = (*(uint64_t (**)(uint64_t))v65)(v3);
        }
      }
      ++v49;
      v50 += 96;
    }
    while (v49 < *(_DWORD *)(v3 + 92));
  }
  return result;
}

uint64_t *sub_1003C3C34(uint64_t *result, int a2, int a3)
{
  uint64_t v3 = result;
  uint64_t v4 = &result[a2];
  uint64_t v5 = v4 + 24;
  uint64_t v6 = v4 + 20;
  if (a3) {
    int v7 = a2 + 16;
  }
  else {
    int v7 = a2;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  uint64_t v8 = *v6;
  if (*v6)
  {
    if (*(unsigned char *)(v8 + 273)) {
      return result;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t (**)(void))*result;
    *((_DWORD *)v9 + 10) = 52;
    *((_DWORD *)v9 + 11) = v7;
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*result)(result);
    if (MEMORY[0x111]) {
      return result;
    }
  }
  uint64_t v10 = v3[5];
  uint64_t v11 = (unsigned char *)(*(void *)v10)++;
  *uint64_t v11 = -1;
  uint64_t v12 = *(void *)(v10 + 8) - 1;
  *(void *)(v10 + 8) = v12;
  if (!v12)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v10 + 24))(v3);
    if (!result)
    {
      uint64_t v13 = *v3;
      *(_DWORD *)(v13 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v13)(v3);
    }
  }
  uint64_t v14 = v3[5];
  uint64_t v15 = (unsigned char *)(*(void *)v14)++;
  *uint64_t v15 = -60;
  uint64_t v16 = *(void *)(v14 + 8) - 1;
  *(void *)(v14 + 8) = v16;
  if (!v16)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v14 + 24))(v3);
    if (!result)
    {
      uint64_t v17 = *v3;
      *(_DWORD *)(v17 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v17)(v3);
    }
  }
  uint8x16_t v18 = *(uint8x16_t *)(v8 + 1);
  uint16x8_t v19 = vmovl_high_u8(v18);
  uint16x8_t v20 = vmovl_u8(*(uint8x8_t *)v18.i8);
  v20.i32[0] = vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8), (int32x4_t)vaddl_high_u16(v20, v19)));
  unint64_t v21 = v20.u32[0];
  char v22 = v20.i8[0] + 19;
  uint64_t v23 = v3[5];
  uint64_t v24 = (unsigned char *)(*(void *)v23)++;
  *uint64_t v24 = (unsigned __int16)(v20.i16[0] + 19) >> 8;
  uint64_t v25 = *(void *)(v23 + 8) - 1;
  *(void *)(v23 + 8) = v25;
  if (!v25)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v23 + 24))(v3);
    if (!result)
    {
      uint64_t v26 = *v3;
      *(_DWORD *)(v26 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v26)(v3);
    }
  }
  uint64_t v27 = v3[5];
  uint64_t v28 = (unsigned char *)(*(void *)v27)++;
  *uint64_t v28 = v22;
  uint64_t v29 = *(void *)(v27 + 8) - 1;
  *(void *)(v27 + 8) = v29;
  if (!v29)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v27 + 24))(v3);
    if (!result)
    {
      uint64_t v30 = *v3;
      *(_DWORD *)(v30 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v30)(v3);
    }
  }
  uint64_t v31 = v3[5];
  uint64_t v32 = (unsigned char *)(*(void *)v31)++;
  unsigned char *v32 = v7;
  uint64_t v33 = *(void *)(v31 + 8) - 1;
  *(void *)(v31 + 8) = v33;
  if (!v33)
  {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v31 + 24))(v3);
    if (!result)
    {
      uint64_t v34 = *v3;
      *(_DWORD *)(v34 + 40) = 25;
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v34)(v3);
    }
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    char v36 = *(unsigned char *)(v8 + 1 + i);
    uint64_t v37 = v3[5];
    uint64_t v38 = (unsigned char *)(*(void *)v37)++;
    unsigned char *v38 = v36;
    uint64_t v39 = *(void *)(v37 + 8) - 1;
    *(void *)(v37 + 8) = v39;
    if (!v39)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v37 + 24))(v3);
      if (!result)
      {
        uint64_t v40 = *v3;
        *(_DWORD *)(v40 + 40) = 25;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v40)(v3);
      }
    }
  }
  if (v21)
  {
    for (unint64_t j = 0; j < v21; ++j)
    {
      char v42 = *(unsigned char *)(v8 + 17 + j);
      uint64_t v43 = v3[5];
      char v44 = (unsigned char *)(*(void *)v43)++;
      unsigned char *v44 = v42;
      uint64_t v45 = *(void *)(v43 + 8) - 1;
      *(void *)(v43 + 8) = v45;
      if (!v45)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v43 + 24))(v3);
        if (!result)
        {
          uint64_t v46 = *v3;
          *(_DWORD *)(v46 + 40) = 25;
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))v46)(v3);
        }
      }
    }
  }
  *(unsigned char *)(v8 + 273) = 1;
  return result;
}

double sub_1003C3F58(int32x2_t *a1)
{
  if (a1[6].i8[3] || a1[6].i8[7])
  {
    *(void *)(*(void *)a1 + 40) = 0xFFDC0000002ALL;
    (**(void (***)(int32x2_t *))a1)(a1);
  }
  unsigned int v2 = a1[9].u32[0];
  uint64_t v3 = a1[57].i32[1];
  unsigned int v4 = v3 * a1[9].i32[1];
  if (v2 >= v4)
  {
    a1[10] = vmul_s32(a1[6], vdup_n_s32(v3));
    *(void *)&double result = 0x100000001;
    a1[43] = (int32x2_t)0x100000001;
  }
  else if (v4 <= 2 * v2)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 2);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 2);
    *(void *)&double result = 0x200000002;
    a1[43] = (int32x2_t)0x200000002;
  }
  else if (3 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 3);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 3);
    *(void *)&double result = 0x300000003;
    a1[43] = (int32x2_t)0x300000003;
  }
  else if (v4 <= 4 * v2)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 4);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 4);
    *(void *)&double result = 0x400000004;
    a1[43] = (int32x2_t)0x400000004;
  }
  else if (5 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 5);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 5);
    *(void *)&double result = 0x500000005;
    a1[43] = (int32x2_t)0x500000005;
  }
  else if (6 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 6);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 6);
    *(void *)&double result = 0x600000006;
    a1[43] = (int32x2_t)0x600000006;
  }
  else if (7 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 7);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 7);
    *(void *)&double result = 0x700000007;
    a1[43] = (int32x2_t)0x700000007;
  }
  else if (v4 <= 8 * v2)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 8);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 8);
    *(void *)&double result = 0x800000008;
    a1[43] = (int32x2_t)0x800000008;
  }
  else if (9 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 9);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 9);
    *(void *)&double result = 0x900000009;
    a1[43] = (int32x2_t)0x900000009;
  }
  else if (10 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 10);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 10);
    *(void *)&double result = 0xA0000000ALL;
    a1[43] = (int32x2_t)0xA0000000ALL;
  }
  else if (11 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 11);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 11);
    *(void *)&double result = 0xB0000000BLL;
    a1[43] = (int32x2_t)0xB0000000BLL;
  }
  else if (12 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 12);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 12);
    *(void *)&double result = 0xC0000000CLL;
    a1[43] = (int32x2_t)0xC0000000CLL;
  }
  else if (13 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 13);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 13);
    *(void *)&double result = 0xD0000000DLL;
    a1[43] = (int32x2_t)0xD0000000DLL;
  }
  else if (14 * v2 >= v4)
  {
    a1[10].i32[0] = sub_1003EE7F0(a1[6].u32[0] * v3, 14);
    a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 14);
    *(void *)&double result = 0xE0000000ELL;
    a1[43] = (int32x2_t)0xE0000000ELL;
  }
  else
  {
    uint64_t v5 = a1[6].u32[0] * v3;
    if (15 * v2 >= v4)
    {
      a1[10].i32[0] = sub_1003EE7F0(v5, 15);
      a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 15);
      *(void *)&double result = 0xF0000000FLL;
      a1[43] = (int32x2_t)0xF0000000FLL;
    }
    else
    {
      a1[10].i32[0] = sub_1003EE7F0(v5, 16);
      a1[10].i32[1] = sub_1003EE7F0(a1[57].i32[1] * (unint64_t)a1[6].u32[1], 16);
      *(void *)&double result = 0x1000000010;
      a1[43] = (int32x2_t)0x1000000010;
    }
  }
  return result;
}

void sub_1003C4444(int32x2_t *a1, int a2)
{
  uint64_t v4 = (**(uint64_t (***)(void))&a1[1])();
  a1[60] = (int32x2_t)v4;
  *(void *)uint64_t v4 = sub_1003C5014;
  *(void *)(v4 + 8) = sub_1003C520C;
  *(void *)(v4 + 16) = sub_1003C525C;
  *(unsigned char *)(v4 + 25) = 0;
  if (a2)
  {
    int v5 = a1[43].i32[0];
    if (v5 != a1[43].i32[1])
    {
      int32x2_t v6 = *a1;
      *(_DWORD *)(*(void *)&v6 + 40) = 7;
      *(_DWORD *)(*(void *)&v6 + 44) = v5;
      *(_DWORD *)(*(void *)a1 + 48) = a1[43].i32[1];
      (**(void (***)(int32x2_t *))a1)(a1);
      int v5 = a1[43].i32[0];
    }
    a1[57].i32[1] = v5;
    if ((v5 - 17) <= 0xFFFFFFEF) {
      goto LABEL_5;
    }
  }
  else
  {
    sub_1003C3F58(a1);
    int v5 = a1[57].i32[1];
    if ((v5 - 17) <= 0xFFFFFFEF)
    {
LABEL_5:
      int32x2_t v7 = *a1;
      *(_DWORD *)(*(void *)&v7 + 40) = 7;
      *(_DWORD *)(*(void *)&v7 + 44) = v5;
      *(_DWORD *)(*(void *)a1 + 48) = a1[57].i32[1];
      (**(void (***)(int32x2_t *))a1)(a1);
      int v5 = a1[57].i32[1];
    }
  }
  if ((v5 - 2) > 5) {
    uint64_t v8 = dword_10040DA60;
  }
  else {
    uint64_t v8 = (int *)*(&off_10049C7D0 + v5 - 2);
  }
  a1[58] = (int32x2_t)v8;
  if (v5 >= 8) {
    int v9 = 63;
  }
  else {
    int v9 = v5 * v5 - 1;
  }
  a1[59].i32[0] = v9;
  unsigned int v10 = a1[10].u32[1];
  if (v10 && a1[10].i32[0] && a1[11].i32[1] > 0)
  {
    if (v10 > 0xFFDC)
    {
LABEL_19:
      *(void *)(*(void *)a1 + 40) = 0xFFDC0000002ALL;
      (**(void (***)(int32x2_t *))a1)(a1);
      __int32 v12 = a1[11].i32[0];
      if ((v12 - 13) > 0xFFFFFFFA) {
        goto LABEL_20;
      }
      goto LABEL_24;
    }
  }
  else
  {
    int32x2_t v11 = *a1;
    *(_DWORD *)(*(void *)&v11 + 40) = 33;
    (**(void (***)(int32x2_t *))&v11)(a1);
    if (a1[10].i32[1] > 0xFFDCu) {
      goto LABEL_19;
    }
  }
  if (a1[10].i32[0] >= 0xFFDDu) {
    goto LABEL_19;
  }
  __int32 v12 = a1[11].i32[0];
  if ((v12 - 13) > 0xFFFFFFFA)
  {
LABEL_20:
    int v13 = a1[11].i32[1];
    if (v13 >= 11) {
      goto LABEL_21;
    }
LABEL_25:
    a1[42] = (int32x2_t)0x100000001;
    if (v13 < 1) {
      goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_24:
  int32x2_t v16 = *a1;
  *(_DWORD *)(*(void *)&v16 + 40) = 16;
  *(_DWORD *)(*(void *)&v16 + 44) = v12;
  (**(void (***)(int32x2_t *))a1)(a1);
  int v13 = a1[11].i32[1];
  if (v13 < 11) {
    goto LABEL_25;
  }
LABEL_21:
  int32x2_t v14 = *a1;
  *(_DWORD *)(*(void *)&v14 + 40) = 27;
  *(_DWORD *)(*(void *)&v14 + 44) = v13;
  *(_DWORD *)(*(void *)a1 + 48) = 10;
  (**(void (***)(int32x2_t *))a1)(a1);
  int v13 = a1[11].i32[1];
  a1[42] = (int32x2_t)0x100000001;
  if (v13 < 1)
  {
LABEL_22:
    int v15 = 1;
    goto LABEL_59;
  }
LABEL_26:
  int v17 = 0;
  uint8x16_t v18 = (int *)(*(void *)&a1[13] + 12);
  int v15 = 1;
  int v19 = 1;
  do
  {
    int v21 = *(v18 - 1);
    if ((v21 - 5) < 0xFFFFFFFC || (int v22 = *v18, (*v18 - 5) <= 0xFFFFFFFB))
    {
      int32x2_t v20 = *a1;
      *(_DWORD *)(*(void *)&v20 + 40) = 19;
      (**(void (***)(int32x2_t *))&v20)(a1);
      int v19 = a1[42].i32[0];
      int v21 = *(v18 - 1);
      int v22 = *v18;
      int v15 = a1[42].i32[1];
      int v13 = a1[11].i32[1];
    }
    if (v19 <= v21) {
      int v19 = v21;
    }
    a1[42].i32[0] = v19;
    if (v15 <= v22) {
      int v15 = v22;
    }
    a1[42].i32[1] = v15;
    ++v17;
    v18 += 24;
  }
  while (v17 < v13);
  if (v13 >= 1)
  {
    __int32 v23 = 0;
    int32x2_t v24 = a1[13];
    do
    {
      *(_DWORD *)(*(void *)&v24 + 4) = v23;
      int v25 = a1[43].i32[0];
      if (a1[36].i8[4]) {
        int v26 = 8;
      }
      else {
        int v26 = 4;
      }
      if (v25 <= v26)
      {
        __int32 v28 = a1[42].i32[0];
        int v29 = *(_DWORD *)(*(void *)&v24 + 8);
        int v27 = a1[43].i32[0];
        if (!(v28 % (2 * v29)))
        {
          int v30 = 2;
          do
          {
            int v27 = v30 * v25;
            if (v30 * v25 > v26) {
              break;
            }
            v30 *= 2;
          }
          while (!(v28 % (v30 * v29)));
        }
      }
      else
      {
        int v27 = a1[43].i32[0];
      }
      *(_DWORD *)(*(void *)&v24 + 36) = v27;
      int v31 = a1[43].i32[1];
      if (v31 <= v26)
      {
        __int32 v33 = a1[42].i32[1];
        int v34 = *(_DWORD *)(*(void *)&v24 + 12);
        int v32 = a1[43].i32[1];
        if (!(v33 % (2 * v34)))
        {
          int v35 = 2;
          do
          {
            int v32 = v35 * v31;
            if (v35 * v31 > v26) {
              break;
            }
            v35 *= 2;
          }
          while (!(v33 % (v35 * v34)));
        }
      }
      else
      {
        int v32 = a1[43].i32[1];
      }
      *(_DWORD *)(*(void *)&v24 + 40) = v32;
      if (v27 > 2 * v32)
      {
        *(_DWORD *)(*(void *)&v24 + 36) = 2 * v32;
      }
      else if (v32 > 2 * v27)
      {
        *(_DWORD *)(*(void *)&v24 + 40) = 2 * v27;
      }
      *(_DWORD *)(*(void *)&v24 + 28) = sub_1003EE7F0(*(int *)(*(void *)&v24 + 8) * (unint64_t)a1[10].u32[0], a1[57].i32[1] * (uint64_t)a1[42].i32[0]);
      *(_DWORD *)(*(void *)&v24 + 32) = sub_1003EE7F0(*(int *)(*(void *)&v24 + 12) * (unint64_t)a1[10].u32[1], a1[57].i32[1] * (uint64_t)a1[42].i32[1]);
      *(_DWORD *)(*(void *)&v24 + 44) = sub_1003EE7F0(*(int *)(*(void *)&v24 + 36)* (uint64_t)*(int *)(*(void *)&v24 + 8)* a1[10].u32[0], a1[57].i32[1] * (uint64_t)a1[42].i32[0]);
      *(_DWORD *)(*(void *)&v24 + 48) = sub_1003EE7F0(*(int *)(*(void *)&v24 + 40)* (uint64_t)*(int *)(*(void *)&v24 + 12)* a1[10].u32[1], a1[57].i32[1] * (uint64_t)a1[42].i32[1]);
      *(unsigned char *)(*(void *)&v24 + 52) = 0;
      ++v23;
      *(void *)&v24 += 96;
    }
    while (v23 < a1[11].i32[1]);
    int v15 = a1[42].i32[1];
  }
LABEL_59:
  a1[44].i32[0] = sub_1003EE7F0(a1[10].u32[1], a1[57].i32[1] * (uint64_t)v15);
  char v36 = (unsigned int *)a1[35];
  if (!v36)
  {
    a1[41].i8[4] = 0;
    int v37 = 1;
LABEL_165:
    a1[34].i32[0] = v37;
    goto LABEL_166;
  }
  if (a1[34].i32[0] <= 0)
  {
    *(void *)(*(void *)a1 + 40) = 20;
    (**(void (***)(int32x2_t *))a1)(a1);
    char v36 = (unsigned int *)a1[35];
    if (v36[5]) {
      goto LABEL_71;
    }
  }
  else if (v36[5])
  {
    goto LABEL_71;
  }
  if (v36[6] != 63)
  {
LABEL_71:
    int v39 = 1;
    a1[41].i8[4] = 1;
    uint64_t v38 = a1[11].u32[1];
    if ((int)v38 >= 1)
    {
      memset(__b, 255, v38 << 8);
      int v39 = 1;
    }
    goto LABEL_73;
  }
  a1[41].i8[4] = 0;
  LODWORD(v38) = a1[11].i32[1];
  if ((int)v38 >= 1) {
    bzero(v100, a1[11].u32[1]);
  }
  int v39 = 0;
LABEL_73:
  if (a1[34].i32[0] < 1) {
    goto LABEL_142;
  }
  int v93 = a2;
  uint64_t v94 = v4;
  int v40 = 1;
  do
  {
    uint64_t v41 = *v36;
    if ((v41 - 5) > 0xFFFFFFFB
      || (int32x2_t v42 = *a1,
          *(_DWORD *)(*(void *)&v42 + 40) = 27,
          *(_DWORD *)(*(void *)&v42 + 44) = v41,
          *(_DWORD *)(*(void *)a1 + 48) = 4,
          (**(void (***)(int32x2_t *))a1)(a1),
          (int)v41 >= 1))
    {
      __int32 v43 = v36[1];
      if (v43 < 0 || v43 >= a1[11].i32[1])
      {
        int32x2_t v44 = *a1;
        *(_DWORD *)(*(void *)&v44 + 40) = 20;
        *(_DWORD *)(*(void *)&v44 + 44) = v40;
        (**(void (***)(int32x2_t *))a1)(a1);
      }
      if (v41 == 1)
      {
LABEL_83:
        int v45 = 1;
        uint64_t v46 = (int)v36[5];
        int v98 = v36[6];
        unsigned int v48 = v36[7];
        int v47 = v36[8];
        if (!a1[41].i8[4]) {
          goto LABEL_133;
        }
        goto LABEL_84;
      }
      uint64_t v67 = 0;
      while (1)
      {
        signed int v68 = v36[v67 + 2];
        if (v68 < 0 || v68 >= a1[11].i32[1])
        {
          int32x2_t v69 = *a1;
          *(_DWORD *)(*(void *)&v69 + 40) = 20;
          *(_DWORD *)(*(void *)&v69 + 44) = v40;
          (**(void (***)(int32x2_t *))a1)(a1);
          if (v68 <= (int)v36[v67 + 1])
          {
LABEL_131:
            int32x2_t v70 = *a1;
            *(_DWORD *)(*(void *)&v70 + 40) = 20;
            *(_DWORD *)(*(void *)&v70 + 44) = v40;
            (**(void (***)(int32x2_t *))a1)(a1);
          }
        }
        else if (v68 <= (int)v36[v67 + 1])
        {
          goto LABEL_131;
        }
        if (v41 - 1 == ++v67) {
          goto LABEL_83;
        }
      }
    }
    int v45 = 0;
    uint64_t v46 = (int)v36[5];
    int v98 = v36[6];
    unsigned int v48 = v36[7];
    int v47 = v36[8];
    if (!a1[41].i8[4])
    {
LABEL_133:
      if (v48 | v46 || v98 != 63 || v47)
      {
        int32x2_t v71 = *a1;
        *(_DWORD *)(*(void *)&v71 + 40) = 18;
        *(_DWORD *)(*(void *)&v71 + 44) = v40;
        (**(void (***)(int32x2_t *))a1)(a1);
      }
      if (v45)
      {
        uint64_t v72 = 0;
        do
        {
          uint64_t v73 = (int)v36[v72 + 1];
          if (v100[v73])
          {
            int32x2_t v74 = *a1;
            *(_DWORD *)(*(void *)&v74 + 40) = 20;
            *(_DWORD *)(*(void *)&v74 + 44) = v40;
            (**(void (***)(int32x2_t *))a1)(a1);
          }
          v100[v73] = 1;
          ++v72;
        }
        while (v41 != v72);
      }
      goto LABEL_75;
    }
LABEL_84:
    if (v46 > 0x3F || v98 < (int)v46 || v98 > 63 || v48 > 0xA || v47 < 0 || v47 >= 11)
    {
      int32x2_t v66 = *a1;
      *(_DWORD *)(*(void *)&v66 + 40) = 18;
      *(_DWORD *)(*(void *)&v66 + 44) = v40;
      (**(void (***)(int32x2_t *))a1)(a1);
      uint64_t v97 = v41;
      if (v46)
      {
LABEL_91:
        if (v41 == 1) {
          goto LABEL_93;
        }
LABEL_92:
        int32x2_t v49 = *a1;
        *(_DWORD *)(*(void *)&v49 + 40) = 18;
        *(_DWORD *)(*(void *)&v49 + 44) = v40;
        (**(void (***)(int32x2_t *))a1)(a1);
        goto LABEL_93;
      }
    }
    else
    {
      uint64_t v97 = v41;
      if (v46) {
        goto LABEL_91;
      }
    }
    if (v98) {
      goto LABEL_92;
    }
LABEL_93:
    if (v45)
    {
      uint64_t v50 = 0;
      int v96 = v98 - v46 + 1;
      uint64_t v95 = &__b[v46];
      do
      {
        char v51 = v36;
        uint64_t v52 = (int)v36[v50 + 1];
        if (v46 && (__b[64 * v52] & 0x80000000) != 0)
        {
          int32x2_t v59 = *a1;
          *(_DWORD *)(*(void *)&v59 + 40) = 18;
          *(_DWORD *)(*(void *)&v59 + 44) = v40;
          (**(void (***)(int32x2_t *))a1)(a1);
          uint64_t v53 = v46;
          if ((int)v46 <= v98)
          {
LABEL_99:
            if (v48)
            {
              uint64_t v54 = (int *)&v95[256 * v52];
              int v55 = v96;
              do
              {
                BOOL v56 = v48 != *v54 || *v54 < 0;
                char v57 = !v56;
                if (((v47 == v48 - 1) & v57) == 0)
                {
                  int32x2_t v58 = *a1;
                  *(_DWORD *)(*(void *)&v58 + 40) = 18;
                  *(_DWORD *)(*(void *)&v58 + 44) = v40;
                  (**(void (***)(int32x2_t *))a1)(a1);
                }
                *v54++ = v47;
                --v55;
              }
              while (v55);
            }
            else if (v47 == -1)
            {
              uint64_t v60 = (int *)&v95[256 * v52];
              int v61 = v96;
              do
              {
                if (*v60 >= 1)
                {
                  int32x2_t v62 = *a1;
                  *(_DWORD *)(*(void *)&v62 + 40) = 18;
                  *(_DWORD *)(*(void *)&v62 + 44) = v40;
                  (**(void (***)(int32x2_t *))a1)(a1);
                }
                *v60++ = v47;
                --v61;
              }
              while (v61);
            }
            else
            {
              uint64_t v63 = (int *)&v95[256 * v52];
              int v64 = v96;
              do
              {
                if ((*v63 & 0x80000000) == 0)
                {
                  int32x2_t v65 = *a1;
                  *(_DWORD *)(*(void *)&v65 + 40) = 18;
                  *(_DWORD *)(*(void *)&v65 + 44) = v40;
                  (**(void (***)(int32x2_t *))a1)(a1);
                }
                *v63++ = v47;
                --v64;
              }
              while (v64);
            }
          }
        }
        else
        {
          uint64_t v53 = v46;
          if ((int)v46 <= v98) {
            goto LABEL_99;
          }
        }
        ++v50;
        uint64_t v46 = v53;
        char v36 = v51;
      }
      while (v50 != v97);
    }
LABEL_75:
    v36 += 9;
    BOOL v56 = v40++ < a1[34].i32[0];
  }
  while (v56);
  int v39 = a1[41].u8[4];
  LODWORD(v38) = a1[11].i32[1];
  uint64_t v4 = v94;
  a2 = v93;
LABEL_142:
  if (v39)
  {
    if ((int)v38 >= 1)
    {
      uint64_t v75 = 0;
      uint64_t v76 = __b;
      do
      {
        if ((*v76 & 0x80000000) != 0)
        {
          int32x2_t v77 = *a1;
          *(_DWORD *)(*(void *)&v77 + 40) = 46;
          (**(void (***)(int32x2_t *))&v77)(a1);
          LODWORD(v38) = a1[11].i32[1];
        }
        v76 += 64;
        ++v75;
      }
      while (v75 < (int)v38);
    }
  }
  else if ((int)v38 >= 1)
  {
    uint64_t v78 = 0;
    do
    {
      if (!v100[v78])
      {
        int32x2_t v79 = *a1;
        *(_DWORD *)(*(void *)&v79 + 40) = 46;
        (**(void (***)(int32x2_t *))&v79)(a1);
        LODWORD(v38) = a1[11].i32[1];
      }
      ++v78;
    }
    while (v78 < (int)v38);
  }
  if (a1[57].i32[1] <= 7)
  {
    if (a1[34].i32[0] >= 1)
    {
      uint64_t v80 = 0;
      int v37 = 0;
      int32x2_t v81 = a1[35];
      int32x2_t v82 = v81;
      while (1)
      {
        if (v80 == v37)
        {
          __int32 v83 = a1[59].i32[0];
          if (*(_DWORD *)(*(void *)&v81 + 36 * v37 + 20) <= v83) {
            goto LABEL_162;
          }
        }
        else
        {
          uint64_t v84 = *(void *)&v81 + 36 * v37;
          long long v85 = *(_OWORD *)*(void *)&v82;
          long long v86 = *(_OWORD *)(*(void *)&v82 + 16);
          *(_DWORD *)(v84 + 32) = *(_DWORD *)(*(void *)&v82 + 32);
          *(_OWORD *)uint64_t v84 = v85;
          *(_OWORD *)(v84 + 16) = v86;
          __int32 v83 = a1[59].i32[0];
          if (*(_DWORD *)(*(void *)&v81 + 36 * v37 + 20) <= v83)
          {
LABEL_162:
            uint64_t v87 = *(void *)&v81 + 36 * v37;
            __int32 v89 = *(_DWORD *)(v87 + 24);
            uint64_t v88 = (__int32 *)(v87 + 24);
            if (v89 > v83) {
              *uint64_t v88 = v83;
            }
            ++v37;
          }
        }
        ++v80;
        *(void *)&v82 += 36;
        if (v80 >= a1[34].i32[0]) {
          goto LABEL_165;
        }
      }
    }
    int v37 = 0;
    goto LABEL_165;
  }
LABEL_166:
  int v90 = a1[36].u8[2];
  if (a1[36].i8[2])
  {
    a1[36].i8[1] = 0;
    goto LABEL_169;
  }
  if (a1[36].i8[1] || !a1[41].i8[4] && (a1[57].i32[1] - 2) >= 6)
  {
LABEL_169:
    if (a2)
    {
      if (v90) {
        goto LABEL_171;
      }
      *(_DWORD *)(v4 + 44) = 0;
      *(void *)(v4 + 32) = 2;
    }
    else
    {
      *(_DWORD *)(v4 + 44) = 0;
      *(void *)(v4 + 32) = 0;
      if (v90) {
        goto LABEL_174;
      }
    }
    int v92 = a1[34].i32[0];
    goto LABEL_177;
  }
  a1[36].i8[2] = 1;
  if (!a2)
  {
    int v91 = 0;
    goto LABEL_172;
  }
LABEL_171:
  int v91 = 1;
LABEL_172:
  *(_DWORD *)(v4 + 44) = 0;
  *(_DWORD *)(v4 + 32) = v91;
  *(_DWORD *)(v4 + 36) = 0;
LABEL_174:
  int v92 = 2 * a1[34].i32[0];
LABEL_177:
  *(_DWORD *)(v4 + 40) = v92;
}

uint64_t sub_1003C5014(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 480);
  int v3 = *(_DWORD *)(v2 + 32);
  if (v3 == 2) {
    goto LABEL_16;
  }
  if (v3 == 1)
  {
    sub_1003C5310(a1);
    sub_1003C5544(a1);
    if (*(_DWORD *)(a1 + 444) || !*(_DWORD *)(a1 + 452))
    {
      (**(void (***)(uint64_t, uint64_t))(a1 + 544))(a1, 1);
      uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t))(a1 + 504))(a1, 2);
      goto LABEL_21;
    }
    int v7 = *(_DWORD *)(v2 + 36) + 1;
    *(_DWORD *)(v2 + 32) = 2;
    *(_DWORD *)(v2 + 36) = v7;
LABEL_16:
    if (!*(unsigned char *)(a1 + 290))
    {
      sub_1003C5310(a1);
      sub_1003C5544(a1);
    }
    (**(void (***)(uint64_t, void))(a1 + 544))(a1, 0);
    (**(void (***)(uint64_t, uint64_t))(a1 + 504))(a1, 2);
    if (!*(_DWORD *)(v2 + 44)) {
      (*(void (**)(uint64_t))(*(void *)(a1 + 512) + 8))(a1);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 512) + 16))(a1);
    goto LABEL_21;
  }
  if (v3)
  {
    uint64_t v6 = *(void *)a1;
    *(_DWORD *)(v6 + 40) = 49;
    uint64_t result = (*(uint64_t (**)(uint64_t))v6)(a1);
    goto LABEL_22;
  }
  sub_1003C5310(a1);
  sub_1003C5544(a1);
  if (!*(unsigned char *)(a1 + 288))
  {
    (**(void (***)(uint64_t))(a1 + 520))(a1);
    (**(void (***)(uint64_t))(a1 + 528))(a1);
    (**(void (***)(uint64_t, void))(a1 + 496))(a1, 0);
  }
  (**(void (***)(uint64_t))(a1 + 536))(a1);
  (**(void (***)(uint64_t, void))(a1 + 544))(a1, *(unsigned __int8 *)(a1 + 290));
  if (*(int *)(v2 + 40) <= 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 3;
  }
  (**(void (***)(uint64_t, uint64_t))(a1 + 504))(a1, v4);
  uint64_t result = (**(uint64_t (***)(uint64_t, void))(a1 + 488))(a1, 0);
  if (!*(unsigned char *)(a1 + 290))
  {
    *(unsigned char *)(v2 + 24) = 1;
    goto LABEL_22;
  }
LABEL_21:
  *(unsigned char *)(v2 + 24) = 0;
LABEL_22:
  int v8 = *(_DWORD *)(v2 + 36);
  int v9 = *(_DWORD *)(v2 + 40);
  *(unsigned char *)(v2 + 25) = v8 == v9 - 1;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    *(_DWORD *)(v10 + 24) = v8;
    *(_DWORD *)(v10 + 28) = v9;
  }
  return result;
}

uint64_t sub_1003C520C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 480) + 24) = 0;
  (*(void (**)(void))(*(void *)(a1 + 512) + 8))();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 512) + 16);

  return v2(a1);
}

uint64_t sub_1003C525C(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 480);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 544) + 16))();
  int v4 = v2[8];
  if (v4 == 2)
  {
    if (*(unsigned char *)(a1 + 290)) {
      v2[8] = 1;
    }
LABEL_8:
    ++v2[11];
    ++v2[9];
    return result;
  }
  if (v4 != 1)
  {
    if (v4 || (v2[8] = 2, *(unsigned char *)(a1 + 290)))
    {
      ++v2[9];
      return result;
    }
    goto LABEL_8;
  }
  int v5 = v2[9] + 1;
  v2[8] = 2;
  v2[9] = v5;
  return result;
}

uint64_t sub_1003C5310(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = (int64x2_t *)(result + 360);
  uint64_t v3 = *(void *)(result + 280);
  if (v3)
  {
    int v4 = *(_DWORD *)(*(void *)(result + 480) + 44);
    uint64_t v5 = *(unsigned int *)(v3 + 36 * v4);
    *(_DWORD *)(result + 356) = v5;
    if ((int)v5 < 1) {
      goto LABEL_15;
    }
    unint64_t v6 = *(void *)(result + 104);
    if (v5 >= 8)
    {
      uint64_t v7 = v5 & 0x7FFFFFF8;
      int v13 = (int32x2_t *)(v3 + 36 * v4 + 20);
      int64x2_t v14 = vdupq_n_s64(v6);
      v15.i64[0] = 0x6000000060;
      v15.i64[1] = 0x6000000060;
      uint64_t v16 = v5 & 0xFFFFFFF8;
      int v17 = (int64x2_t *)(result + 360);
      do
      {
        int32x4_t v18 = *(int32x4_t *)v13[-2].i8;
        int32x4_t v19 = *(int32x4_t *)v13->i8;
        int64x2_t v20 = vmlal_s32(v14, *(int32x2_t *)v18.i8, (int32x2_t)0x6000000060);
        int64x2_t v21 = vmlal_high_s32(v14, v18, v15);
        int64x2_t v22 = vmlal_s32(v14, *v13, (int32x2_t)0x6000000060);
        *int v17 = v20;
        v17[1] = v21;
        v17[2] = v22;
        v17[3] = vmlal_high_s32(v14, v19, v15);
        v13 += 4;
        v17 += 4;
        v16 -= 8;
      }
      while (v16);
      if (v7 == v5)
      {
LABEL_15:
        if (*(unsigned char *)(result + 332))
        {
          uint64_t v27 = v3 + 36 * v4;
          *(void *)(result + 444) = *(void *)(v27 + 20);
          int v28 = *(_DWORD *)(v27 + 28);
          LODWORD(v27) = *(_DWORD *)(v27 + 32);
          *(_DWORD *)(result + 452) = v28;
          *(_DWORD *)(result + 456) = v27;
          return result;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    __int32 v23 = (int *)(36 * v4 + 4 * v7 + v3 + 4);
    int32x2_t v24 = (void *)(result + 8 * v7 + 360);
    uint64_t v25 = v5 - v7;
    do
    {
      int v26 = *v23++;
      *v24++ = v6 + 96 * v26;
      --v25;
    }
    while (v25);
    goto LABEL_15;
  }
  int v8 = *(_DWORD *)(result + 92);
  if (v8 >= 5)
  {
    uint64_t v9 = *(void *)result;
    *(_DWORD *)(v9 + 40) = 27;
    *(_DWORD *)(v9 + 44) = v8;
    *(_DWORD *)(*(void *)result + 48) = 4;
    uint64_t result = (**(uint64_t (***)(uint64_t))result)(result);
    int v8 = *(_DWORD *)(v1 + 92);
  }
  *(_DWORD *)(v1 + 356) = v8;
  if (v8 < 1) {
    goto LABEL_22;
  }
  unint64_t v10 = *(void *)(v1 + 104);
  uint64_t v11 = v8;
  if (v8 >= 4)
  {
    int64x2_t v29 = (int64x2_t)xmmword_1004027B0;
    uint64_t v12 = v8 & 0xFFFFFFFC;
    int64x2_t v30 = vdupq_n_s64(v10);
    int64x2_t v31 = vdupq_n_s64(0xC0uLL);
    int64x2_t v32 = vdupq_n_s64(4uLL);
    uint64_t v33 = v11 & 0xFFFFFFFC;
    do
    {
      v34.i64[0] = 96 * v29.i64[0];
      v34.i64[1] = 96 * v29.i64[1];
      int64x2_t v35 = vaddq_s64(v30, v34);
      int64x2_t *v2 = v35;
      v2[1] = vaddq_s64(v35, v31);
      v2 += 2;
      int64x2_t v29 = vaddq_s64(v29, v32);
      v33 -= 4;
    }
    while (v33);
    if (v12 == v11) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  unint64_t v36 = v10 + 96 * v12;
  int v37 = (unint64_t *)(v1 + 8 * v12 + 360);
  uint64_t v38 = v11 - v12;
  do
  {
    *v37++ = v36;
    v36 += 96;
    --v38;
  }
  while (v38);
LABEL_22:
  *(_DWORD *)(v1 + 444) = 0;
  *(void *)(v1 + 448) = (*(_DWORD *)(v1 + 460) * *(_DWORD *)(v1 + 460) - 1);
  *(_DWORD *)(v1 + 456) = 0;
  return result;
}

uint64_t sub_1003C5544(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 356);
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(result + 360);
    unsigned int v4 = *(_DWORD *)(v3 + 32);
    *(_DWORD *)(result + 392) = *(_DWORD *)(v3 + 28);
    *(_DWORD *)(result + 396) = v4;
    int v5 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 64) = 1;
    *(_DWORD *)(v3 + 68) = v5;
    unsigned int v6 = *(_DWORD *)(v3 + 12);
    int v7 = v4 % v6;
    *(void *)(v3 + 56) = 0x100000001;
    if (!v7) {
      int v7 = v6;
    }
    *(_DWORD *)(v3 + 72) = 1;
    *(_DWORD *)(v3 + 76) = v7;
    *(void *)(result + 400) = 1;
  }
  else
  {
    if ((v2 - 5) <= 0xFFFFFFFB)
    {
      uint64_t v8 = *(void *)result;
      *(_DWORD *)(v8 + 40) = 27;
      *(_DWORD *)(v8 + 44) = v2;
      *(_DWORD *)(*(void *)result + 48) = 4;
      (**(void (***)(uint64_t))result)(result);
    }
    *(_DWORD *)(v1 + 392) = sub_1003EE7F0(*(unsigned int *)(v1 + 80), *(int *)(v1 + 460) * (uint64_t)*(int *)(v1 + 336));
    uint64_t result = sub_1003EE7F0(*(unsigned int *)(v1 + 84), *(int *)(v1 + 460) * (uint64_t)*(int *)(v1 + 340));
    *(void *)(v1 + 396) = result;
    if (*(int *)(v1 + 356) >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        unint64_t v10 = *(_DWORD **)(v1 + 8 * v9 + 360);
        unsigned int v11 = v10[2];
        unsigned int v12 = v10[3];
        int v13 = v12 * v11;
        unsigned int v14 = v10[8];
        int v15 = v10[9] * v11;
        v10[16] = v12 * v11;
        v10[17] = v15;
        int v16 = v10[7] % v11;
        v10[14] = v11;
        v10[15] = v12;
        if (v16) {
          unsigned int v11 = v16;
        }
        if (v14 % v12) {
          unsigned int v12 = v14 % v12;
        }
        v10[18] = v11;
        v10[19] = v12;
        if (*(_DWORD *)(v1 + 400) + v13 >= 11)
        {
          uint64_t v17 = *(void *)v1;
          *(_DWORD *)(v17 + 40) = 14;
          uint64_t result = (*(uint64_t (**)(uint64_t))v17)(v1);
        }
        if (v13 >= 1)
        {
          unsigned int v18 = v13 + 1;
          do
          {
            uint64_t v19 = *(int *)(v1 + 400);
            *(_DWORD *)(v1 + 400) = v19 + 1;
            *(_DWORD *)(v1 + 4 * v19 + 404) = v9;
            --v18;
          }
          while (v18 > 1);
        }
        ++v9;
      }
      while (v9 < *(int *)(v1 + 356));
    }
  }
  int v20 = *(_DWORD *)(v1 + 308);
  if (v20 >= 1)
  {
    unint64_t v21 = *(unsigned int *)(v1 + 392) * (unint64_t)v20;
    if (v21 >= 0xFFFF) {
      LODWORD(v21) = 0xFFFF;
    }
    *(_DWORD *)(v1 + 304) = v21;
  }
  return result;
}

uint64_t sub_1003C5714(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = (*(uint64_t (**)(void))(v1 + 72))();
    if (*(unsigned char *)(v2 + 32))
    {
      *(_DWORD *)(v2 + 36) = 200;
      *(void *)(v2 + 376) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 36) = 100;
    }
  }
  return result;
}

uint64_t sub_1003C5770(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  if (v2) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v2 + 80))(result);
  }
  *(void *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t sub_1003C57AC(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(unsigned char *)(result + 128) = 0;
  return result;
}

uint64_t sub_1003C57D8(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(unsigned char *)(result + 273) = 0;
  return result;
}

int16x8_t sub_1003C5804(uint64_t a1, int a2)
{
  unint64_t v4 = *(int *)(a1 + 144);
  int v5 = *(_DWORD *)(a1 + 36);
  if (v5 != 100)
  {
    unsigned int v6 = *(void (***)(void))a1;
    *((_DWORD *)v6 + 10) = 21;
    *((_DWORD *)v6 + 11) = v5;
    (**(void (***)(uint64_t))a1)(a1);
  }
  int v7 = *(int16x8_t **)(a1 + 112);
  if (!v7)
  {
    int v7 = (int16x8_t *)sub_1003C57AC(a1);
    *(void *)(a1 + 112) = v7;
  }
  int64x2_t v8 = vdupq_n_s64(0x32uLL);
  int32x2_t v9 = vdup_n_s32(v4);
  int64x2_t v10 = vmlal_s32(v8, v9, (int32x2_t)0xB00000010);
  int64x2_t v11 = vmlal_s32(v8, v9, (int32x2_t)0x3D00000033);
  int64x2_t v12 = vmlal_s32(v8, v9, (int32x2_t)0x100000000ALL);
  v10.i64[0] /= 100;
  v10.i64[1] /= 100;
  v12.i64[0] /= 100;
  v12.i64[1] /= 100;
  int64x2_t v178 = v12;
  int64x2_t v179 = v10;
  int64x2_t v13 = vmlal_s32(v8, v9, (int32x2_t)0x2800000018);
  v14.i64[0] = v13.i64[0] / 100;
  uint64_t v15 = v11.i64[1] / 100;
  v10.i64[0] = v11.i64[0] / 100;
  int64x2_t v16 = vmlal_s32(v8, v9, (int32x2_t)0x370000003CLL);
  int64x2_t v17 = vmlal_s32(v8, v9, (int32x2_t)0x3A0000001ALL);
  int64x2_t v18 = vmlal_s32(v8, v9, (int32x2_t)0x130000000ELL);
  int64x2_t v19 = vmlal_s32(v8, v9, (int32x2_t)0xC0000000CLL);
  int64x2_t v20 = vmlal_s32(v8, v9, (int32x2_t)0x3800000045);
  int64x2_t v21 = vmlal_s32(v8, v9, (int32x2_t)0x3900000028);
  int64x2_t v22 = vmlal_s32(v8, v9, (int32x2_t)0x1800000010);
  int64x2_t v23 = vmlal_s32(v8, v9, (int32x2_t)0xD0000000ELL);
  int64x2_t v24 = vmlal_s32(v8, v9, (int32x2_t)0x3E00000050);
  int64x2_t v25 = vmlal_s32(v8, v9, (int32x2_t)0x5700000033);
  int64x2_t v26 = vmlal_s32(v8, v9, (int32x2_t)0x1D00000016);
  int64x2_t v27 = vmlal_s32(v8, v9, (int32x2_t)0x110000000ELL);
  int64x2_t v28 = vmlal_s32(v8, v9, (int32x2_t)0x4D00000067);
  int64x2_t v29 = vmlal_s32(v8, v9, (int32x2_t)0x6D00000044);
  int64x2_t v30 = vmlal_s32(v8, v9, (int32x2_t)0x3800000025);
  int64x2_t v31 = vmlal_s32(v8, v9, (int32x2_t)0x1600000012);
  int64x2_t v32 = vmlal_s32(v8, v9, (int32x2_t)0x5C00000071);
  int64x2_t v33 = vmlal_s32(v8, v9, (int32x2_t)0x6800000051);
  int64x2_t v34 = vmlal_s32(v8, v9, (int32x2_t)0x4000000037);
  int64x2_t v35 = vmlal_s32(v8, v9, (int32x2_t)0x2300000018);
  int64x2_t v36 = vmlal_s32(v8, v9, (int32x2_t)0x6500000078);
  int64x2_t v37 = vmlal_s32(v8, v9, (int32x2_t)0x7900000067);
  int64x2_t v38 = vmlal_s32(v8, v9, (int32x2_t)0x570000004ELL);
  int64x2_t v39 = vmlal_s32(v8, v9, (int32x2_t)0x4000000031);
  v12.i64[0] = v19.i64[0] / 100;
  v14.i64[1] = v13.i64[1] / 100;
  v10.i64[1] = v15;
  int64x2_t v40 = vdupq_n_s64(1uLL);
  v12.i64[1] = v19.i64[1] / 100;
  v41.i64[0] = v18.i64[0] / 100;
  v41.i64[1] = v18.i64[1] / 100;
  v13.i64[0] = v17.i64[0] / 100;
  v13.i64[1] = v17.i64[1] / 100;
  v42.i64[0] = v16.i64[0] / 100;
  v42.i64[1] = v16.i64[1] / 100;
  v43.i64[0] = v23.i64[0] / 100;
  v43.i64[1] = v23.i64[1] / 100;
  v22.i64[0] /= 100;
  v22.i64[1] /= 100;
  v21.i64[0] /= 100;
  v21.i64[1] /= 100;
  v23.i64[0] = v20.i64[0] / 100;
  v23.i64[1] = v20.i64[1] / 100;
  v20.i64[0] = v27.i64[0] / 100;
  v20.i64[1] = v27.i64[1] / 100;
  v26.i64[0] /= 100;
  v26.i64[1] /= 100;
  v25.i64[0] /= 100;
  v25.i64[1] /= 100;
  v27.i64[0] = v24.i64[0] / 100;
  v27.i64[1] = v24.i64[1] / 100;
  v24.i64[0] = v31.i64[0] / 100;
  v24.i64[1] = v31.i64[1] / 100;
  v30.i64[0] /= 100;
  v30.i64[1] /= 100;
  v29.i64[0] /= 100;
  v29.i64[1] /= 100;
  v31.i64[0] = v28.i64[0] / 100;
  v31.i64[1] = v28.i64[1] / 100;
  v28.i64[0] = v35.i64[0] / 100;
  v28.i64[1] = v35.i64[1] / 100;
  v34.i64[0] /= 100;
  v34.i64[1] /= 100;
  v33.i64[0] /= 100;
  v33.i64[1] /= 100;
  v32.i64[0] /= 100;
  v32.i64[1] /= 100;
  v35.i64[0] = v38.i64[0] / 100;
  v35.i64[1] = v38.i64[1] / 100;
  v37.i64[0] /= 100;
  v37.i64[1] /= 100;
  v36.i64[0] /= 100;
  v36.i64[1] /= 100;
  uint64_t v44 = v39.i64[1];
  uint64_t v45 = v39.i64[0] / 100;
  int8x16_t v46 = (int8x16_t)vcgtq_s64(v10, v40);
  int8x16_t v47 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v10, v46), (int64x2_t)vmvnq_s8(v46));
  int8x16_t v48 = (int8x16_t)vcgtq_s64(v14, v40);
  int8x16_t v49 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v14, v48), (int64x2_t)vmvnq_s8(v48));
  int8x16_t v50 = (int8x16_t)vcgtq_s64(v178, v40);
  int8x16_t v51 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v178, v50), (int64x2_t)vmvnq_s8(v50));
  int8x16_t v52 = (int8x16_t)vcgtq_s64(v179, v40);
  int8x16_t v53 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v179, v52), (int64x2_t)vmvnq_s8(v52));
  int8x16_t v54 = (int8x16_t)vcgtq_s64(v42, v40);
  int8x16_t v55 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v42, v54), (int64x2_t)vmvnq_s8(v54));
  int8x16_t v56 = (int8x16_t)vcgtq_s64(v13, v40);
  int8x16_t v57 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v13, v56), (int64x2_t)vmvnq_s8(v56));
  int8x16_t v58 = (int8x16_t)vcgtq_s64(v41, v40);
  int8x16_t v59 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v41, v58), (int64x2_t)vmvnq_s8(v58));
  int8x16_t v60 = (int8x16_t)vcgtq_s64(v12, v40);
  int8x16_t v61 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v12, v60), (int64x2_t)vmvnq_s8(v60));
  int8x16_t v62 = (int8x16_t)vcgtq_s64(v23, v40);
  int8x16_t v63 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v23, v62), (int64x2_t)vmvnq_s8(v62));
  int8x16_t v64 = (int8x16_t)vcgtq_s64(v21, v40);
  int8x16_t v65 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v21, v64), (int64x2_t)vmvnq_s8(v64));
  int8x16_t v66 = (int8x16_t)vcgtq_s64(v22, v40);
  int8x16_t v67 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v22, v66), (int64x2_t)vmvnq_s8(v66));
  int8x16_t v68 = (int8x16_t)vcgtq_s64(v43, v40);
  int8x16_t v69 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v43, v68), (int64x2_t)vmvnq_s8(v68));
  int8x16_t v70 = (int8x16_t)vcgtq_s64(v27, v40);
  int8x16_t v71 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v27, v70), (int64x2_t)vmvnq_s8(v70));
  int8x16_t v72 = (int8x16_t)vcgtq_s64(v25, v40);
  int8x16_t v73 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v25, v72), (int64x2_t)vmvnq_s8(v72));
  int8x16_t v74 = (int8x16_t)vcgtq_s64(v26, v40);
  int8x16_t v75 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v26, v74), (int64x2_t)vmvnq_s8(v74));
  int8x16_t v76 = (int8x16_t)vcgtq_s64(v20, v40);
  int8x16_t v77 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v20, v76), (int64x2_t)vmvnq_s8(v76));
  int8x16_t v78 = (int8x16_t)vcgtq_s64(v31, v40);
  int8x16_t v79 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v31, v78), (int64x2_t)vmvnq_s8(v78));
  int8x16_t v80 = (int8x16_t)vcgtq_s64(v29, v40);
  int8x16_t v81 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v29, v80), (int64x2_t)vmvnq_s8(v80));
  int8x16_t v82 = (int8x16_t)vcgtq_s64(v30, v40);
  int8x16_t v83 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v30, v82), (int64x2_t)vmvnq_s8(v82));
  int8x16_t v84 = (int8x16_t)vcgtq_s64(v24, v40);
  int8x16_t v85 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v24, v84), (int64x2_t)vmvnq_s8(v84));
  int8x16_t v86 = (int8x16_t)vcgtq_s64(v32, v40);
  int8x16_t v87 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v86), (int64x2_t)vmvnq_s8(v86));
  int8x16_t v88 = (int8x16_t)vcgtq_s64(v33, v40);
  int8x16_t v89 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v33, v88), (int64x2_t)vmvnq_s8(v88));
  int8x16_t v90 = (int8x16_t)vcgtq_s64(v34, v40);
  int8x16_t v91 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v90), (int64x2_t)vmvnq_s8(v90));
  int8x16_t v92 = (int8x16_t)vcgtq_s64(v28, v40);
  int8x16_t v93 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v28, v92), (int64x2_t)vmvnq_s8(v92));
  int8x16_t v94 = (int8x16_t)vcgtq_s64(v36, v40);
  int8x16_t v95 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v36, v94), (int64x2_t)vmvnq_s8(v94));
  int8x16_t v96 = (int8x16_t)vcgtq_s64(v37, v40);
  int8x16_t v97 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v37, v96), (int64x2_t)vmvnq_s8(v96));
  int64x2_t v98 = vcgtq_s64(v35, v40);
  int8x16_t v99 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v35, (int8x16_t)v98), (int64x2_t)vmvnq_s8((int8x16_t)v98));
  v98.i64[0] = v45;
  v98.i64[1] = v44 / 100;
  int8x16_t v100 = (int8x16_t)vcgtq_s64(v98, v40);
  int8x16_t v101 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v98, v100), (int64x2_t)vmvnq_s8(v100));
  int64x2_t v102 = vdupq_n_s64(v4);
  if (a2)
  {
    v103.i64[0] = 255;
    v103.i64[1] = 255;
  }
  else
  {
    int8x16_t v103 = (int8x16_t)vdupq_n_s64(0x7FFFuLL);
  }
  *int v7 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v53), v53, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v51), v51, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v49), v49, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v47), v47, v103)));
  v7[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v61), v61, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v59), v59, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v57), v57, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v55), v55, v103)));
  v7[2] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v69), v69, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v67), v67, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v65), v65, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v63), v63, v103)));
  v7[3] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v77), v77, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v75), v75, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v73), v73, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v71), v71, v103)));
  v7[4] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v85), v85, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v83), v83, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v81), v81, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v79), v79, v103)));
  v7[5] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v93), v93, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v91), v91, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v89), v89, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v87), v87, v103)));
  v7[6] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v101), v101, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v99), v99, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v97), v97, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v95), v95, v103)));
  v104.i64[0] = 95 * v102.i64[0];
  v104.i64[1] = 98 * v102.i64[1];
  v105.i64[0] = 72 * v102.i64[0];
  v105.i64[1] = 92 * v102.i64[1];
  v106.i64[0] = 103 * v102.i64[0];
  v106.i64[1] = 99 * v102.i64[1];
  v107.i64[0] = 112 * v102.i64[0];
  v107.i64[1] = 100 * v102.i64[1];
  int64x2_t v108 = vdupq_n_s64(0x32uLL);
  int64x2_t v109 = vaddq_s64(v106, v108);
  int64x2_t v110 = vaddq_s64(v105, v108);
  int64x2_t v111 = vaddq_s64(v104, v108);
  v111.i64[0] /= 100;
  v111.i64[1] /= 100;
  v110.i64[0] /= 100;
  v110.i64[1] /= 100;
  v109.i64[0] /= 100;
  v109.i64[1] /= 100;
  int64x2_t v112 = vaddq_s64(v107, v108);
  v112.i64[0] /= 100;
  v112.i64[1] /= 100;
  int64x2_t v113 = vdupq_n_s64(1uLL);
  int8x16_t v114 = (int8x16_t)vcgtq_s64(v112, v113);
  int8x16_t v115 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v112, v114), (int64x2_t)vmvnq_s8(v114));
  int8x16_t v116 = (int8x16_t)vcgtq_s64(v109, v113);
  int8x16_t v117 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v109, v116), (int64x2_t)vmvnq_s8(v116));
  int8x16_t v118 = (int8x16_t)vcgtq_s64(v110, v113);
  int8x16_t v119 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v110, v118), (int64x2_t)vmvnq_s8(v118));
  int8x16_t v120 = (int8x16_t)vcgtq_s64(v111, v113);
  int8x16_t v121 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v111, v120), (int64x2_t)vmvnq_s8(v120));
  v7[7] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v119), v119, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v121), v121, v103)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v115), v115, v103), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v103, (uint64x2_t)v117), v117, v103)));
  v7[8].i8[0] = 0;
  unint64_t v122 = *(int *)(a1 + 148);
  int v123 = *(_DWORD *)(a1 + 36);
  if (v123 != 100)
  {
    uint64_t v124 = *(void (***)(void))a1;
    *((_DWORD *)v124 + 10) = 21;
    *((_DWORD *)v124 + 11) = v123;
    (**(void (***)(uint64_t))a1)(a1);
  }
  uint64_t v125 = *(void *)(a1 + 120);
  if (!v125)
  {
    uint64_t v125 = sub_1003C57AC(a1);
    *(void *)(a1 + 120) = v125;
  }
  int64x2_t v126 = vdupq_n_s64(v122);
  int32x2_t v127 = vdup_n_s32(v122);
  int64x2_t v128 = vdupq_n_s64(0x32uLL);
  int64x2_t v129 = vmlal_s32(v128, v127, (int32x2_t)0x1200000011);
  v129.i64[0] /= 100;
  v129.i64[1] /= 100;
  int64x2_t v130 = vmlal_s32(v128, v127, (int32x2_t)0x2F00000018);
  v131.i64[0] = v130.i64[0] / 100;
  v131.i64[1] = v130.i64[1] / 100;
  int64x2_t v132 = vdupq_n_s64(1uLL);
  int8x16_t v133 = (int8x16_t)vcgtq_s64(v131, v132);
  int8x16_t v134 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v131, v133), (int64x2_t)vmvnq_s8(v133));
  int8x16_t v135 = (int8x16_t)vcgtq_s64(v129, v132);
  int64x2_t v136 = vmlal_s32(v128, v127, (int32x2_t)0x6300000063);
  v137.i64[0] = v136.i64[0] / 100;
  v137.i64[1] = v136.i64[1] / 100;
  int8x16_t v138 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v129, v135), (int64x2_t)vmvnq_s8(v135));
  int8x16_t v139 = (int8x16_t)vcgtq_s64(v137, v132);
  int8x16_t v140 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v137, v139), (int64x2_t)vmvnq_s8(v139));
  int64x2_t v141 = vmlal_s32(v128, v127, (int32x2_t)0x420000001ALL);
  int64x2_t v142 = vmlal_s32(v128, v127, (int32x2_t)0x1500000012);
  v142.i64[0] /= 100;
  v142.i64[1] /= 100;
  v137.i64[0] = v141.i64[0] / 100;
  v137.i64[1] = v141.i64[1] / 100;
  int8x16_t v143 = (int8x16_t)vcgtq_s64(v137, v132);
  int8x16_t v144 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v137, v143), (int64x2_t)vmvnq_s8(v143));
  int64x2_t v145 = vmlal_s32(v128, v127, (int32x2_t)0x6300000038);
  int64x2_t v146 = vmlal_s32(v128, v127, (int32x2_t)0x1A00000018);
  int8x16_t v147 = (int8x16_t)vcgtq_s64(v142, v132);
  v148.i64[0] = v146.i64[0] / 100;
  v148.i64[1] = v146.i64[1] / 100;
  v145.i64[0] /= 100;
  v145.i64[1] /= 100;
  int8x16_t v149 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v142, v147), (int64x2_t)vmvnq_s8(v147));
  int8x16_t v150 = (int8x16_t)vcgtq_s64(v145, v132);
  int8x16_t v151 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v145, v150), (int64x2_t)vmvnq_s8(v150));
  int8x16_t v152 = (int8x16_t)vcgtq_s64(v148, v132);
  int8x16_t v153 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v148, v152), (int64x2_t)vmvnq_s8(v152));
  int64x2_t v154 = vmlal_s32(v128, v127, (int32x2_t)0x420000002FLL);
  v155.i64[0] = v154.i64[0] / 100;
  v155.i64[1] = v154.i64[1] / 100;
  int8x16_t v156 = (int8x16_t)vcgtq_s64(v155, v132);
  int8x16_t v157 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v155, v156), (int64x2_t)vmvnq_s8(v156));
  if (a2)
  {
    v158.i64[0] = 255;
    v158.i64[1] = 255;
  }
  else
  {
    int8x16_t v158 = (int8x16_t)vdupq_n_s64(0x7FFFuLL);
  }
  int32x4_t v159 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v140), v140, v158);
  int16x8_t v160 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v138), v138, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v134), v134, v158));
  int16x8_t v161 = (int16x8_t)vuzp1q_s32(v159, v159);
  *(int16x8_t *)uint64_t v125 = vuzp1q_s16(v160, v161);
  *(int16x8_t *)(v125 + 16) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v149), v149, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v144), v144, v158)), v161);
  *(int16x8_t *)(v125 + 32) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v153), v153, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v151), v151, v158)), v161);
  *(int16x8_t *)(v125 + 48) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v157), v157, v158), v159), v161);
  int16x8_t v162 = vuzp1q_s16(v161, v161);
  *(int16x8_t *)(v125 + 64) = v162;
  *(int16x8_t *)(v125 + 80) = v162;
  *(int16x8_t *)(v125 + 96) = v162;
  v126.i64[0] *= 99;
  v126.i64[1] *= 99;
  int64x2_t v163 = vdupq_n_s64(0x32uLL);
  int64x2_t v164 = vaddq_s64(v126, v163);
  v164.i64[0] /= 100;
  v164.i64[1] /= 100;
  int64x2_t v165 = v164;
  int64x2_t v166 = v164;
  int64x2_t v167 = vaddq_s64(v126, v163);
  v167.i64[0] /= 100;
  v167.i64[1] /= 100;
  int64x2_t v168 = vdupq_n_s64(1uLL);
  int8x16_t v169 = (int8x16_t)vcgtq_s64(v167, v168);
  int8x16_t v170 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v167, v169), (int64x2_t)vmvnq_s8(v169));
  int8x16_t v171 = (int8x16_t)vcgtq_s64(v164, v168);
  int8x16_t v172 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v164, v171), (int64x2_t)vmvnq_s8(v171));
  int8x16_t v173 = (int8x16_t)vcgtq_s64(v166, v168);
  int8x16_t v174 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v166, v173), (int64x2_t)vmvnq_s8(v173));
  int8x16_t v175 = (int8x16_t)vcgtq_s64(v165, v168);
  int8x16_t v176 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v165, v175), (int64x2_t)vmvnq_s8(v175));
  int16x8_t result = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v176), v176, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v174), v174, v158)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v172), v172, v158), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v158, (uint64x2_t)v170), v170, v158)));
  *(int16x8_t *)(v125 + 112) = result;
  *(unsigned char *)(v125 + 128) = 0;
  return result;
}

int16x8_t sub_1003C6B2C(uint64_t a1, signed int a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 36);
  if (v6 != 100)
  {
    int v7 = *(void (***)(void))a1;
    *((_DWORD *)v7 + 10) = 21;
    *((_DWORD *)v7 + 11) = v6;
    (**(void (***)(uint64_t))a1)(a1);
  }
  int64x2_t v8 = *(int16x8_t **)(a1 + 112);
  if (!v8)
  {
    int64x2_t v8 = (int16x8_t *)sub_1003C57AC(a1);
    *(void *)(a1 + 112) = v8;
  }
  int64x2_t v9 = vdupq_n_s64(0x32uLL);
  int32x2_t v10 = vdup_n_s32(a2);
  int64x2_t v11 = vmlal_s32(v9, v10, (int32x2_t)0xB00000010);
  int64x2_t v12 = vmlal_s32(v9, v10, (int32x2_t)0x3D00000033);
  int64x2_t v13 = vmlal_s32(v9, v10, (int32x2_t)0x100000000ALL);
  v11.i64[0] /= 100;
  v11.i64[1] /= 100;
  int64x2_t v217 = v11;
  int64x2_t v14 = vmlal_s32(v9, v10, (int32x2_t)0x2800000018);
  v15.i64[0] = v13.i64[0] / 100;
  v15.i64[1] = v13.i64[1] / 100;
  v16.i64[0] = v14.i64[0] / 100;
  v16.i64[1] = v14.i64[1] / 100;
  v17.i64[0] = v12.i64[0] / 100;
  v17.i64[1] = v12.i64[1] / 100;
  int64x2_t v18 = vdupq_n_s64(1uLL);
  int64x2_t v19 = vmlal_s32(v9, v10, (int32x2_t)0x370000003CLL);
  int64x2_t v20 = vmlal_s32(v9, v10, (int32x2_t)0x3A0000001ALL);
  int64x2_t v21 = vmlal_s32(v9, v10, (int32x2_t)0x130000000ELL);
  int64x2_t v22 = vmlal_s32(v9, v10, (int32x2_t)0xC0000000CLL);
  v23.i64[0] = v22.i64[0] / 100;
  v23.i64[1] = v22.i64[1] / 100;
  v24.i64[0] = v21.i64[0] / 100;
  v24.i64[1] = v21.i64[1] / 100;
  v25.i64[0] = v20.i64[0] / 100;
  v25.i64[1] = v20.i64[1] / 100;
  v26.i64[0] = v19.i64[0] / 100;
  v26.i64[1] = v19.i64[1] / 100;
  int64x2_t v27 = vmlal_s32(v9, v10, (int32x2_t)0x3800000045);
  int64x2_t v28 = vmlal_s32(v9, v10, (int32x2_t)0x3900000028);
  int64x2_t v29 = vmlal_s32(v9, v10, (int32x2_t)0x1800000010);
  int64x2_t v30 = vmlal_s32(v9, v10, (int32x2_t)0xD0000000ELL);
  v31.i64[0] = v30.i64[0] / 100;
  v31.i64[1] = v30.i64[1] / 100;
  v32.i64[0] = v29.i64[0] / 100;
  v32.i64[1] = v29.i64[1] / 100;
  v33.i64[0] = v28.i64[0] / 100;
  v33.i64[1] = v28.i64[1] / 100;
  v34.i64[0] = v27.i64[0] / 100;
  v34.i64[1] = v27.i64[1] / 100;
  int64x2_t v35 = vmlal_s32(v9, v10, (int32x2_t)0x3E00000050);
  int64x2_t v36 = vmlal_s32(v9, v10, (int32x2_t)0x5700000033);
  int64x2_t v37 = vmlal_s32(v9, v10, (int32x2_t)0x1D00000016);
  int64x2_t v38 = vmlal_s32(v9, v10, (int32x2_t)0x110000000ELL);
  v39.i64[0] = v38.i64[0] / 100;
  v39.i64[1] = v38.i64[1] / 100;
  v40.i64[0] = v37.i64[0] / 100;
  v40.i64[1] = v37.i64[1] / 100;
  v41.i64[0] = v36.i64[0] / 100;
  v41.i64[1] = v36.i64[1] / 100;
  v42.i64[0] = v35.i64[0] / 100;
  v42.i64[1] = v35.i64[1] / 100;
  int64x2_t v43 = vmlal_s32(v9, v10, (int32x2_t)0x4D00000067);
  int64x2_t v44 = vmlal_s32(v9, v10, (int32x2_t)0x6D00000044);
  int64x2_t v45 = vmlal_s32(v9, v10, (int32x2_t)0x3800000025);
  int64x2_t v46 = vmlal_s32(v9, v10, (int32x2_t)0x1600000012);
  v47.i64[0] = v46.i64[0] / 100;
  v47.i64[1] = v46.i64[1] / 100;
  v48.i64[0] = v45.i64[0] / 100;
  v48.i64[1] = v45.i64[1] / 100;
  v44.i64[0] /= 100;
  v44.i64[1] /= 100;
  v49.i64[0] = v43.i64[0] / 100;
  v49.i64[1] = v43.i64[1] / 100;
  int64x2_t v50 = vmlal_s32(v9, v10, (int32x2_t)0x5C00000071);
  int64x2_t v51 = vmlal_s32(v9, v10, (int32x2_t)0x6800000051);
  int64x2_t v52 = vmlal_s32(v9, v10, (int32x2_t)0x4000000037);
  int64x2_t v53 = vmlal_s32(v9, v10, (int32x2_t)0x2300000018);
  v53.i64[0] /= 100;
  v53.i64[1] /= 100;
  v54.i64[0] = v52.i64[0] / 100;
  v54.i64[1] = v52.i64[1] / 100;
  v55.i64[0] = v51.i64[0] / 100;
  v55.i64[1] = v51.i64[1] / 100;
  v56.i64[0] = v50.i64[0] / 100;
  v56.i64[1] = v50.i64[1] / 100;
  int64x2_t v57 = vmlal_s32(v9, v10, (int32x2_t)0x6500000078);
  int64x2_t v58 = vmlal_s32(v9, v10, (int32x2_t)0x7900000067);
  int64x2_t v59 = vmlal_s32(v9, v10, (int32x2_t)0x570000004ELL);
  v60.i64[0] = v59.i64[0] / 100;
  v60.i64[1] = v59.i64[1] / 100;
  v59.i64[0] = v58.i64[0] / 100;
  v59.i64[1] = v58.i64[1] / 100;
  v22.i64[0] = v57.i64[0] / 100;
  v22.i64[1] = v57.i64[1] / 100;
  int64x2_t v61 = vmlal_s32(v9, v10, (int32x2_t)0x4000000031);
  uint64_t v62 = v61.i64[1];
  uint64_t v63 = v61.i64[0] / 100;
  int8x16_t v64 = (int8x16_t)vcgtq_s64(v17, v18);
  int8x16_t v65 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v17, v64), (int64x2_t)vmvnq_s8(v64));
  int8x16_t v66 = (int8x16_t)vcgtq_s64(v16, v18);
  int8x16_t v67 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v16, v66), (int64x2_t)vmvnq_s8(v66));
  int8x16_t v68 = (int8x16_t)vcgtq_s64(v15, v18);
  int8x16_t v69 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v15, v68), (int64x2_t)vmvnq_s8(v68));
  int8x16_t v70 = (int8x16_t)vcgtq_s64(v217, v18);
  int8x16_t v71 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v217, v70), (int64x2_t)vmvnq_s8(v70));
  int8x16_t v72 = (int8x16_t)vcgtq_s64(v26, v18);
  int8x16_t v73 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v26, v72), (int64x2_t)vmvnq_s8(v72));
  int8x16_t v74 = (int8x16_t)vcgtq_s64(v25, v18);
  int8x16_t v75 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v25, v74), (int64x2_t)vmvnq_s8(v74));
  int8x16_t v76 = (int8x16_t)vcgtq_s64(v24, v18);
  int8x16_t v77 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v24, v76), (int64x2_t)vmvnq_s8(v76));
  int8x16_t v78 = (int8x16_t)vcgtq_s64(v23, v18);
  int8x16_t v79 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v23, v78), (int64x2_t)vmvnq_s8(v78));
  int8x16_t v80 = (int8x16_t)vcgtq_s64(v34, v18);
  int8x16_t v81 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v80), (int64x2_t)vmvnq_s8(v80));
  int8x16_t v82 = (int8x16_t)vcgtq_s64(v33, v18);
  int8x16_t v83 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v33, v82), (int64x2_t)vmvnq_s8(v82));
  int8x16_t v84 = (int8x16_t)vcgtq_s64(v32, v18);
  int8x16_t v85 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v84), (int64x2_t)vmvnq_s8(v84));
  int8x16_t v86 = (int8x16_t)vcgtq_s64(v31, v18);
  int8x16_t v87 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v31, v86), (int64x2_t)vmvnq_s8(v86));
  int8x16_t v88 = (int8x16_t)vcgtq_s64(v42, v18);
  int8x16_t v89 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v42, v88), (int64x2_t)vmvnq_s8(v88));
  int8x16_t v90 = (int8x16_t)vcgtq_s64(v41, v18);
  int8x16_t v91 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v41, v90), (int64x2_t)vmvnq_s8(v90));
  int8x16_t v92 = (int8x16_t)vcgtq_s64(v40, v18);
  int8x16_t v93 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v40, v92), (int64x2_t)vmvnq_s8(v92));
  int8x16_t v94 = (int8x16_t)vcgtq_s64(v39, v18);
  int8x16_t v95 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v39, v94), (int64x2_t)vmvnq_s8(v94));
  int8x16_t v96 = (int8x16_t)vcgtq_s64(v49, v18);
  int8x16_t v97 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v49, v96), (int64x2_t)vmvnq_s8(v96));
  int8x16_t v98 = (int8x16_t)vcgtq_s64(v44, v18);
  int8x16_t v99 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v44, v98), (int64x2_t)vmvnq_s8(v98));
  int8x16_t v100 = (int8x16_t)vcgtq_s64(v48, v18);
  int8x16_t v101 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v48, v100), (int64x2_t)vmvnq_s8(v100));
  int8x16_t v102 = (int8x16_t)vcgtq_s64(v47, v18);
  int8x16_t v103 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v47, v102), (int64x2_t)vmvnq_s8(v102));
  int8x16_t v104 = (int8x16_t)vcgtq_s64(v56, v18);
  int8x16_t v105 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v56, v104), (int64x2_t)vmvnq_s8(v104));
  int8x16_t v106 = (int8x16_t)vcgtq_s64(v55, v18);
  int8x16_t v107 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v55, v106), (int64x2_t)vmvnq_s8(v106));
  int8x16_t v108 = (int8x16_t)vcgtq_s64(v54, v18);
  int8x16_t v109 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v54, v108), (int64x2_t)vmvnq_s8(v108));
  int8x16_t v110 = (int8x16_t)vcgtq_s64(v53, v18);
  int8x16_t v111 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v53, v110), (int64x2_t)vmvnq_s8(v110));
  int8x16_t v112 = (int8x16_t)vcgtq_s64(v22, v18);
  int8x16_t v113 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v22, v112), (int64x2_t)vmvnq_s8(v112));
  int8x16_t v114 = (int8x16_t)vcgtq_s64(v59, v18);
  int8x16_t v115 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v59, v114), (int64x2_t)vmvnq_s8(v114));
  int64x2_t v116 = vcgtq_s64(v60, v18);
  int8x16_t v117 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v60, (int8x16_t)v116), (int64x2_t)vmvnq_s8((int8x16_t)v116));
  v116.i64[0] = v63;
  v116.i64[1] = v62 / 100;
  int8x16_t v118 = (int8x16_t)vcgtq_s64(v116, v18);
  int8x16_t v119 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v116, v118), (int64x2_t)vmvnq_s8(v118));
  int64x2_t v120 = vdupq_n_s64(a2);
  if (a3)
  {
    v121.i64[0] = 255;
    v121.i64[1] = 255;
    *int64x2_t v8 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v71), v71, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v69), v69, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v67), v67, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v65), v65, v121)));
    v8[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v79), v79, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v77), v77, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v75), v75, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v73), v73, v121)));
    v8[2] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v87), v87, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v85), v85, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v83), v83, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v81), v81, v121)));
    v8[3] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v95), v95, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v93), v93, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v91), v91, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v89), v89, v121)));
    v8[4] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v103), v103, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v101), v101, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v99), v99, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v97), v97, v121)));
    v8[5] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v111), v111, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v109), v109, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v107), v107, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v105), v105, v121)));
    int32x4_t v122 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v115), v115, v121);
    int32x4_t v123 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v113), v113, v121);
    int32x4_t v124 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v119), v119, v121);
    int32x4_t v125 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v117), v117, v121);
  }
  else
  {
    int8x16_t v121 = (int8x16_t)vdupq_n_s64(0x7FFFuLL);
    *int64x2_t v8 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v71), v71, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v69), v69, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v67), v67, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v65), v65, v121)));
    v8[1] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v79), v79, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v77), v77, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v75), v75, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v73), v73, v121)));
    v8[2] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v87), v87, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v85), v85, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v83), v83, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v81), v81, v121)));
    v8[3] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v95), v95, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v93), v93, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v91), v91, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v89), v89, v121)));
    v8[4] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v103), v103, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v101), v101, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v99), v99, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v97), v97, v121)));
    v8[5] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v111), v111, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v109), v109, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v107), v107, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v105), v105, v121)));
    int32x4_t v122 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v115), v115, v121);
    int32x4_t v123 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v113), v113, v121);
    int32x4_t v125 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v117), v117, v121);
    int32x4_t v124 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v119), v119, v121);
  }
  v8[6] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v124, v125), (int16x8_t)vuzp1q_s32(v122, v123));
  v126.i64[0] = 95 * v120.i64[0];
  v126.i64[1] = 98 * v120.i64[1];
  v127.i64[0] = 72 * v120.i64[0];
  v127.i64[1] = 92 * v120.i64[1];
  v128.i64[0] = 103 * v120.i64[0];
  v128.i64[1] = 99 * v120.i64[1];
  v129.i64[0] = 112 * v120.i64[0];
  v129.i64[1] = 100 * v120.i64[1];
  int64x2_t v130 = vdupq_n_s64(0x32uLL);
  int64x2_t v131 = vaddq_s64(v128, v130);
  int64x2_t v132 = vaddq_s64(v127, v130);
  int64x2_t v133 = vaddq_s64(v126, v130);
  v133.i64[0] /= 100;
  v133.i64[1] /= 100;
  v132.i64[0] /= 100;
  v132.i64[1] /= 100;
  v131.i64[0] /= 100;
  v131.i64[1] /= 100;
  int64x2_t v134 = vaddq_s64(v129, v130);
  v134.i64[0] /= 100;
  v134.i64[1] /= 100;
  int64x2_t v135 = vdupq_n_s64(1uLL);
  int8x16_t v136 = (int8x16_t)vcgtq_s64(v134, v135);
  int8x16_t v137 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v134, v136), (int64x2_t)vmvnq_s8(v136));
  int8x16_t v138 = (int8x16_t)vcgtq_s64(v131, v135);
  int8x16_t v139 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v131, v138), (int64x2_t)vmvnq_s8(v138));
  int8x16_t v140 = (int8x16_t)vcgtq_s64(v132, v135);
  int8x16_t v141 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v132, v140), (int64x2_t)vmvnq_s8(v140));
  int8x16_t v142 = (int8x16_t)vcgtq_s64(v133, v135);
  int8x16_t v143 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v133, v142), (int64x2_t)vmvnq_s8(v142));
  v8[7] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v141), v141, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v143), v143, v121)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v137), v137, v121), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v121, (uint64x2_t)v139), v139, v121)));
  v8[8].i8[0] = 0;
  int v144 = *(_DWORD *)(a1 + 36);
  if (v144 != 100)
  {
    int64x2_t v145 = *(void (***)(void))a1;
    *((_DWORD *)v145 + 10) = 21;
    *((_DWORD *)v145 + 11) = v144;
    (**(void (***)(uint64_t))a1)(a1);
  }
  uint64_t v146 = *(void *)(a1 + 120);
  if (!v146)
  {
    uint64_t v146 = sub_1003C57AC(a1);
    *(void *)(a1 + 120) = v146;
  }
  v147.i64[0] = 99 * v120.i64[0];
  v148.i64[0] = 24 * v120.i64[0];
  v149.i64[0] = 99 * v120.i64[0];
  v147.i64[1] = 99 * v120.i64[1];
  v148.i64[1] = 47 * v120.i64[1];
  v149.i64[1] = 99 * v120.i64[1];
  v150.i64[0] = 17 * v120.i64[0];
  v150.i64[1] = 18 * v120.i64[1];
  int64x2_t v151 = vdupq_n_s64(0x32uLL);
  int64x2_t v152 = vaddq_s64(v149, v151);
  int64x2_t v153 = vaddq_s64(v147, v151);
  int64x2_t v154 = vaddq_s64(v148, v151);
  v155.i64[0] = v153.i64[0] / 100;
  v155.i64[1] = v153.i64[1] / 100;
  v153.i64[0] = v154.i64[0] / 100;
  v153.i64[1] = v154.i64[1] / 100;
  v154.i64[0] = v152.i64[0] / 100;
  v154.i64[1] = v152.i64[1] / 100;
  int64x2_t v156 = vaddq_s64(v150, v151);
  v156.i64[0] /= 100;
  v156.i64[1] /= 100;
  int64x2_t v157 = vdupq_n_s64(1uLL);
  int8x16_t v158 = (int8x16_t)vcgtq_s64(v154, v157);
  int8x16_t v159 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v154, v158), (int64x2_t)vmvnq_s8(v158));
  int8x16_t v160 = (int8x16_t)vcgtq_s64(v153, v157);
  int8x16_t v161 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v153, v160), (int64x2_t)vmvnq_s8(v160));
  int8x16_t v162 = (int8x16_t)vcgtq_s64(v155, v157);
  int8x16_t v163 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v155, v162), (int64x2_t)vmvnq_s8(v162));
  int64x2_t v164 = vcgtq_s64(v156, v157);
  int8x16_t v165 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v156, (int8x16_t)v164), (int64x2_t)vmvnq_s8((int8x16_t)v164));
  v164.i64[0] = 18 * v120.i64[0];
  v164.i64[1] = 21 * v120.i64[1];
  v166.i64[0] = 26 * v120.i64[0];
  v166.i64[1] = 66 * v120.i64[1];
  int64x2_t v167 = vaddq_s64(v164, v151);
  int64x2_t v168 = vaddq_s64(v166, v151);
  v167.i64[0] /= 100;
  v167.i64[1] /= 100;
  v168.i64[0] /= 100;
  v168.i64[1] /= 100;
  int8x16_t v169 = (int8x16_t)vcgtq_s64(v167, v157);
  int8x16_t v170 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v167, v169), (int64x2_t)vmvnq_s8(v169));
  int8x16_t v171 = (int8x16_t)vcgtq_s64(v168, v157);
  v172.i64[0] = 56 * v120.i64[0];
  v172.i64[1] = 99 * v120.i64[1];
  v173.i64[0] = 24 * v120.i64[0];
  v173.i64[1] = 26 * v120.i64[1];
  int64x2_t v174 = vaddq_s64(v173, v151);
  int64x2_t v175 = vaddq_s64(v172, v151);
  v176.i64[0] = v175.i64[0] / 100;
  v176.i64[1] = v175.i64[1] / 100;
  v174.i64[0] /= 100;
  v174.i64[1] /= 100;
  int8x16_t v177 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v168, v171), (int64x2_t)vmvnq_s8(v171));
  int8x16_t v178 = (int8x16_t)vcgtq_s64(v174, v157);
  int8x16_t v179 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v174, v178), (int64x2_t)vmvnq_s8(v178));
  int8x16_t v180 = (int8x16_t)vcgtq_s64(v176, v157);
  int64x2_t v181 = (int64x2_t)vandq_s8((int8x16_t)v176, v180);
  v176.i64[0] = 99 * v120.i64[0];
  v176.i64[1] = 99 * v120.i64[1];
  int8x16_t v182 = (int8x16_t)vsubq_s64(v181, (int64x2_t)vmvnq_s8(v180));
  v181.i64[0] = 47 * v120.i64[0];
  v181.i64[1] = 66 * v120.i64[1];
  int64x2_t v183 = vaddq_s64(v176, v151);
  int64x2_t v184 = vaddq_s64(v181, v151);
  v183.i64[0] /= 100;
  v183.i64[1] /= 100;
  v185.i64[0] = v184.i64[0] / 100;
  v185.i64[1] = v184.i64[1] / 100;
  int8x16_t v186 = (int8x16_t)vcgtq_s64(v183, v157);
  int8x16_t v187 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v183, v186), (int64x2_t)vmvnq_s8(v186));
  int8x16_t v188 = (int8x16_t)vcgtq_s64(v185, v157);
  int8x16_t v189 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v185, v188), (int64x2_t)vmvnq_s8(v188));
  v185.i64[0] = 99 * v120.i64[0];
  v185.i64[1] = 99 * v120.i64[1];
  int64x2_t v190 = vaddq_s64(v185, v151);
  v190.i64[0] /= 100;
  v190.i64[1] /= 100;
  int8x16_t v191 = (int8x16_t)vcgtq_s64(v190, v157);
  int8x16_t v192 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v190, v191), (int64x2_t)vmvnq_s8(v191));
  if (a3)
  {
    v193.i64[0] = 255;
    v193.i64[1] = 255;
    int16x8_t v194 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v159), v159, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v163), v163, v193));
    *(int16x8_t *)uint64_t v146 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v165), v165, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v161), v161, v193)), v194);
    *(int16x8_t *)(v146 + 16) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v170), v170, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v177), v177, v193)), v194);
    int32x4_t v195 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v187), v187, v193);
    *(int16x8_t *)(v146 + 32) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v179), v179, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v182), v182, v193)), v194);
    *(int16x8_t *)(v146 + 48) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v189), v189, v193), v195), v194);
    int16x8_t v196 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v192), v192, v193), v195);
  }
  else
  {
    int8x16_t v193 = (int8x16_t)vdupq_n_s64(0x7FFFuLL);
    int16x8_t v194 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v159), v159, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v163), v163, v193));
    *(int16x8_t *)uint64_t v146 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v165), v165, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v161), v161, v193)), v194);
    *(int16x8_t *)(v146 + 16) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v170), v170, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v177), v177, v193)), v194);
    int32x4_t v197 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v187), v187, v193);
    *(int16x8_t *)(v146 + 32) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v179), v179, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v182), v182, v193)), v194);
    *(int16x8_t *)(v146 + 48) = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v189), v189, v193), v197), v194);
    int16x8_t v196 = (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v192), v192, v193), v197);
  }
  int64x2_t v198 = (int64x2_t)vuzp1q_s16(v196, v194);
  *(int64x2_t *)(v146 + 64) = v198;
  *(int64x2_t *)(v146 + 80) = v198;
  v199.i64[0] = 99 * v120.i64[0];
  v199.i64[1] = 99 * v120.i64[1];
  v200.i64[0] = 99 * v120.i64[0];
  v200.i64[1] = 99 * v120.i64[1];
  v201.i64[0] = 99 * v120.i64[0];
  v201.i64[1] = 99 * v120.i64[1];
  *(int64x2_t *)(v146 + 96) = v198;
  v198.i64[0] = 99 * v120.i64[0];
  v198.i64[1] = 99 * v120.i64[1];
  int64x2_t v202 = vdupq_n_s64(0x32uLL);
  int64x2_t v203 = vaddq_s64(v201, v202);
  int64x2_t v204 = vaddq_s64(v200, v202);
  int64x2_t v205 = vaddq_s64(v199, v202);
  v205.i64[0] /= 100;
  v205.i64[1] /= 100;
  v204.i64[0] /= 100;
  v204.i64[1] /= 100;
  v203.i64[0] /= 100;
  v203.i64[1] /= 100;
  int64x2_t v206 = vaddq_s64(v198, v202);
  v206.i64[0] /= 100;
  v206.i64[1] /= 100;
  int64x2_t v207 = vdupq_n_s64(1uLL);
  int8x16_t v208 = (int8x16_t)vcgtq_s64(v206, v207);
  int8x16_t v209 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v206, v208), (int64x2_t)vmvnq_s8(v208));
  int8x16_t v210 = (int8x16_t)vcgtq_s64(v203, v207);
  int8x16_t v211 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v203, v210), (int64x2_t)vmvnq_s8(v210));
  int8x16_t v212 = (int8x16_t)vcgtq_s64(v204, v207);
  int8x16_t v213 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v204, v212), (int64x2_t)vmvnq_s8(v212));
  int8x16_t v214 = (int8x16_t)vcgtq_s64(v205, v207);
  int8x16_t v215 = (int8x16_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v205, v214), (int64x2_t)vmvnq_s8(v214));
  int16x8_t result = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v215), v215, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v213), v213, v193)), (int16x8_t)vuzp1q_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v211), v211, v193), (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v193, (uint64x2_t)v209), v209, v193)));
  *(int16x8_t *)(v146 + 112) = result;
  *(unsigned char *)(v146 + 128) = 0;
  return result;
}

uint64_t sub_1003C7FE0(int a1)
{
  if (a1 <= 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = a1;
  }
  if (v1 >= 0x64) {
    unsigned int v1 = 100;
  }
  if (v1 > 0x31) {
    return 200 - 2 * v1;
  }
  else {
    return 0x1388u / (unsigned __int16)v1;
  }
}

double sub_1003C8018(uint64_t a1, int a2, int a3)
{
  if (a2 <= 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = a2;
  }
  if (v3 >= 0x64) {
    unsigned int v3 = 100;
  }
  if (v3 > 0x31) {
    unsigned int v4 = 200 - 2 * v3;
  }
  else {
    unsigned int v4 = 0x1388u / (unsigned __int16)v3;
  }
  *(void *)&double result = sub_1003C6B2C(a1, v4, a3).u64[0];
  return result;
}

double sub_1003C8050(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2 != 100)
  {
    unsigned int v3 = *(void (***)(void))a1;
    *((_DWORD *)v3 + 10) = 21;
    *((_DWORD *)v3 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if (!*(void *)(a1 + 104)) {
    *(void *)(a1 + 104) = (**(uint64_t (***)(uint64_t, void, uint64_t))(a1 + 8))(a1, 0, 960);
  }
  *(void *)(a1 + 72) = 0x100000001;
  *(_DWORD *)(a1 + 88) = 8;
  sub_1003C6B2C(a1, 50, 1);
  sub_1003C8CE0((uint64_t *)a1, (uint64_t *)(a1 + 160), &xmmword_10040D080, &unk_10040D091);
  sub_1003C8CE0((uint64_t *)a1, (uint64_t *)(a1 + 192), &xmmword_10040D0BA, &unk_10040D0CB);
  sub_1003C8CE0((uint64_t *)a1, (uint64_t *)(a1 + 168), &xmmword_10040D09D, &unk_10040D0AE);
  sub_1003C8CE0((uint64_t *)a1, (uint64_t *)(a1 + 200), &xmmword_10040D16D, &unk_10040D17E);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0x101010101010101;
  *(void *)(a1 + 248) = 0x101010101010101;
  *(void *)(a1 + 256) = 0x505050505050505;
  *(void *)(a1 + 264) = 0x505050505050505;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 289) = *(_DWORD *)(a1 + 88) > 8;
  *(_WORD *)(a1 + 290) = 0;
  *(unsigned char *)(a1 + 292) = 1;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 313) = 257;
  *(unsigned char *)(a1 + 315) = 0;
  *(_DWORD *)(a1 + 316) = 65537;
  *(_DWORD *)(a1 + 324) = 0;

  *(void *)&double result = sub_1003C81C0((uint64_t *)a1).n128_u64[0];
  return result;
}

__n128 sub_1003C81C0(uint64_t *a1)
{
  switch(*((_DWORD *)a1 + 15))
  {
    case 0:
      int v8 = *((_DWORD *)a1 + 9);
      if (v8 != 100)
      {
        int64x2_t v9 = (void (**)(void))*a1;
        *((_DWORD *)v9 + 10) = 21;
        *((_DWORD *)v9 + 11) = v8;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((unsigned char *)a1 + 312) = 0;
      *((unsigned char *)a1 + 320) = 0;
      unsigned int v10 = *((_DWORD *)a1 + 14);
      *(uint64_t *)((char *)a1 + 92) = v10;
      if (v10 - 11 <= 0xFFFFFFF5)
      {
        int64x2_t v11 = (void (**)(void))*a1;
        *((_DWORD *)v11 + 10) = 27;
        *((_DWORD *)v11 + 11) = v10;
        *(_DWORD *)(*a1 + 48) = 10;
        (*(void (**)(uint64_t *))*a1)(a1);
        unsigned int v10 = *((_DWORD *)a1 + 23);
        if ((int)v10 < 1) {
          return result;
        }
      }
      uint64_t v12 = a1[13];
      uint64_t v13 = v10;
      if (v10 < 2)
      {
        uint64_t v14 = 0;
LABEL_33:
        uint64_t v34 = v12 + 96 * v14;
        result.n128_u64[0] = 0x100000001;
        do
        {
          *(_DWORD *)uint64_t v34 = v14;
          *(_OWORD *)(v34 + 8) = xmmword_10040D000;
          *(_DWORD *)(v34 + 24) = 0;
          ++v14;
          v34 += 96;
        }
        while (v13 != v14);
        return result;
      }
      uint64_t v32 = 0;
      uint64_t v14 = v10 & 0xFFFFFFFE;
      result.n128_u64[0] = 0x100000001;
      uint64_t v33 = a1[13];
      do
      {
        *(_DWORD *)uint64_t v33 = v32;
        *(_DWORD *)(v33 + 96) = v32 + 1;
        *(_OWORD *)(v33 + 8) = xmmword_10040D000;
        *(_OWORD *)(v33 + 104) = xmmword_10040D000;
        v32 += 2;
        *(_DWORD *)(v33 + 24) = 0;
        *(_DWORD *)(v33 + 120) = 0;
        v33 += 192;
      }
      while (v14 != v32);
      if (v14 != v13) {
        goto LABEL_33;
      }
      return result;
    case 1:
      int v15 = *((_DWORD *)a1 + 9);
      if (v15 != 100)
      {
        uint64_t v16 = *a1;
        *(_DWORD *)(v16 + 40) = 21;
        *(_DWORD *)(v16 + 44) = v15;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((unsigned char *)a1 + 320) = 0;
      *((unsigned char *)a1 + 312) = 1;
      *(uint64_t *)((char *)a1 + 92) = 0x100000001;
      uint64_t v17 = a1[13];
      *(_DWORD *)uint64_t v17 = 1;
      result.n128_u64[0] = 0x100000001;
      *(_OWORD *)(v17 + 8) = xmmword_10040D000;
      *(_DWORD *)(v17 + 24) = 0;
      return result;
    case 2:
    case 3:
      int v2 = *((_DWORD *)a1 + 9);
      if (v2 != 100)
      {
        uint64_t v3 = *a1;
        *(_DWORD *)(v3 + 40) = 21;
        *(_DWORD *)(v3 + 44) = v2;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((unsigned char *)a1 + 320) = 0;
      *((unsigned char *)a1 + 312) = 1;
      *(uint64_t *)((char *)a1 + 92) = 0x300000003;
      uint64_t v4 = a1[13];
      *(_DWORD *)uint64_t v4 = 1;
      *(_OWORD *)(v4 + 8) = xmmword_10040CFF0;
      *(_DWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 96) = 2;
      result.n128_u64[0] = 0x100000001;
      result.n128_u64[1] = 0x100000001;
      *(__n128 *)(v4 + 104) = result;
      *(_DWORD *)(v4 + 120) = 1;
      *(_DWORD *)(v4 + 192) = 3;
      *(__n128 *)(v4 + 200) = result;
      *(_DWORD *)(v4 + 216) = 1;
      return result;
    case 4:
      int v18 = *((_DWORD *)a1 + 9);
      if (v18 != 100)
      {
        uint64_t v19 = *a1;
        *(_DWORD *)(v19 + 40) = 21;
        *(_DWORD *)(v19 + 44) = v18;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((unsigned char *)a1 + 312) = 0;
      *((unsigned char *)a1 + 320) = 1;
      *(uint64_t *)((char *)a1 + 92) = 0x400000004;
      uint64_t v20 = a1[13];
      *(_DWORD *)uint64_t v20 = 67;
      result.n128_u64[0] = 0x100000001;
      *(_OWORD *)(v20 + 8) = xmmword_10040D000;
      *(_DWORD *)(v20 + 24) = 0;
      *(_DWORD *)(v20 + 96) = 77;
      *(_OWORD *)(v20 + 104) = xmmword_10040D000;
      *(_DWORD *)(v20 + 120) = 0;
      *(_DWORD *)(v20 + 192) = 89;
      *(_OWORD *)(v20 + 200) = xmmword_10040D000;
      *(_DWORD *)(v20 + 216) = 0;
      *(_DWORD *)(v20 + 288) = 75;
      *(_OWORD *)(v20 + 296) = xmmword_10040D000;
      *(_DWORD *)(v20 + 312) = 0;
      return result;
    case 5:
      int v21 = *((_DWORD *)a1 + 9);
      if (v21 != 100)
      {
        uint64_t v22 = *a1;
        *(_DWORD *)(v22 + 40) = 21;
        *(_DWORD *)(v22 + 44) = v21;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((unsigned char *)a1 + 312) = 0;
      *((unsigned char *)a1 + 320) = 1;
      *(uint64_t *)((char *)a1 + 92) = 0x500000004;
      uint64_t v23 = a1[13];
      *(_DWORD *)uint64_t v23 = 1;
      result.n128_u64[0] = 0x200000002;
      *(_OWORD *)(v23 + 8) = xmmword_10040CFF0;
      *(_DWORD *)(v23 + 24) = 0;
      *(_DWORD *)(v23 + 96) = 2;
      *(void *)&long long v24 = 0x100000001;
      *((void *)&v24 + 1) = 0x100000001;
      *(_OWORD *)(v23 + 104) = v24;
      *(_DWORD *)(v23 + 120) = 1;
      *(_DWORD *)(v23 + 192) = 3;
      *(_OWORD *)(v23 + 200) = v24;
      *(_DWORD *)(v23 + 216) = 1;
      *(_DWORD *)(v23 + 288) = 4;
      *(_OWORD *)(v23 + 296) = xmmword_10040CFF0;
      *(_DWORD *)(v23 + 312) = 0;
      return result;
    case 6:
      int v25 = *((_DWORD *)a1 + 9);
      if (v25 != 100)
      {
        uint64_t v26 = *a1;
        *(_DWORD *)(v26 + 40) = 21;
        *(_DWORD *)(v26 + 44) = v25;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((unsigned char *)a1 + 320) = 0;
      *((_WORD *)a1 + 156) = 513;
      *(uint64_t *)((char *)a1 + 92) = 0x600000003;
      uint64_t v27 = a1[13];
      *(_DWORD *)uint64_t v27 = 114;
      result.n128_u64[0] = 0x100000001;
      *(void *)(v27 + 8) = 0x100000001;
      BOOL v28 = *((_DWORD *)a1 + 81) == 1;
      *(_DWORD *)(v27 + 16) = 0;
      *(_DWORD *)(v27 + 20) = v28;
      *(_DWORD *)(v27 + 24) = v28;
      *(_DWORD *)(v27 + 96) = 103;
      *(_OWORD *)(v27 + 104) = xmmword_10040D000;
      *(_DWORD *)(v27 + 120) = 0;
      *(_DWORD *)(v27 + 192) = 98;
      *(void *)(v27 + 200) = 0x100000001;
      *(_DWORD *)(v27 + 208) = 0;
      *(_DWORD *)(v27 + 212) = v28;
      *(_DWORD *)(v27 + 216) = v28;
      return result;
    case 7:
      int v29 = *((_DWORD *)a1 + 9);
      if (v29 != 100)
      {
        uint64_t v30 = *a1;
        *(_DWORD *)(v30 + 40) = 21;
        *(_DWORD *)(v30 + 44) = v29;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      *((unsigned char *)a1 + 320) = 0;
      *((_WORD *)a1 + 156) = 513;
      *(uint64_t *)((char *)a1 + 92) = 0x700000003;
      uint64_t v31 = a1[13];
      *(_DWORD *)uint64_t v31 = 1;
      *(_OWORD *)(v31 + 8) = xmmword_10040CFF0;
      *(_DWORD *)(v31 + 24) = 0;
      *(_DWORD *)(v31 + 96) = 34;
      result.n128_u64[0] = 0x100000001;
      result.n128_u64[1] = 0x100000001;
      *(__n128 *)(v31 + 104) = result;
      *(_DWORD *)(v31 + 120) = 1;
      *(_DWORD *)(v31 + 192) = 35;
      *(__n128 *)(v31 + 200) = result;
      *(_DWORD *)(v31 + 216) = 1;
      return result;
    default:
      uint64_t v6 = *a1;
      *(_DWORD *)(v6 + 40) = 10;
      int v7 = *(void (**)(void))v6;
      v7();
      return result;
  }
}

void *sub_1003C869C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 92);
  int v3 = *(_DWORD *)(a1 + 36);
  if (v3 != 100)
  {
    uint64_t v4 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v4 + 10) = 21;
    *((_DWORD *)v4 + 11) = v3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if (v2 == 3)
  {
    if ((*(_DWORD *)(a1 + 96) | 4) == 7)
    {
      int v5 = 10;
      __n128 result = *(void **)(a1 + 552);
      if (!result) {
        goto LABEL_12;
      }
LABEL_11:
      if (*(_DWORD *)(a1 + 560) >= v5) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
  }
  else if ((int)v2 >= 5)
  {
    int v5 = 6 * v2;
    __n128 result = *(void **)(a1 + 552);
    if (!result) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  int v5 = (4 * v2) | 2;
  __n128 result = *(void **)(a1 + 552);
  if (result) {
    goto LABEL_11;
  }
LABEL_12:
  if (v5 <= 10) {
    uint64_t v7 = 10;
  }
  else {
    uint64_t v7 = v5;
  }
  *(_DWORD *)(a1 + 560) = v7;
  __n128 result = (**(void *(***)(uint64_t __return_ptr, uint64_t, void, uint64_t))(a1 + 8))(v7, a1, 0, 36 * v7);
  *(void *)(a1 + 552) = result;
LABEL_16:
  *(void *)(a1 + 280) = result;
  *(_DWORD *)(a1 + 272) = v5;
  if (v2 != 3)
  {
    if ((int)v2 >= 5)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v2 & 0xFFFFFFFE;
      int v15 = (char *)result + 36 * v17;
      int v18 = (char *)result + 36;
      do
      {
        *((_DWORD *)v18 - 9) = 1;
        *((_DWORD *)v18 - 8) = v16;
        *(_DWORD *)int v18 = 1;
        *((_DWORD *)v18 + 1) = v16 + 1;
        v16 += 2;
        *((_OWORD *)v18 - 1) = xmmword_10040D010;
        *(_OWORD *)(v18 + 20) = xmmword_10040D010;
        v18 += 72;
      }
      while (v17 != v16);
      if (v17 != v2)
      {
        do
        {
          *(_DWORD *)int v15 = 1;
          *((_DWORD *)v15 + 1) = v17;
          *(_OWORD *)(v15 + 20) = xmmword_10040D010;
          v15 += 36;
          LODWORD(v17) = v17 + 1;
        }
        while (v2 != v17);
      }
    }
    else
    {
      *(_DWORD *)__n128 result = v2;
      if ((int)v2 >= 1)
      {
        *((_DWORD *)result + 1) = 0;
        if (v2 != 1)
        {
          *((_DWORD *)result + 2) = 1;
          if (v2 != 2)
          {
            *((_DWORD *)result + 3) = 2;
            *((_DWORD *)result + 4) = 3;
          }
        }
      }
      *(_OWORD *)((char *)result + 20) = xmmword_10040D010;
      int v15 = (char *)result + 36;
    }
    if ((int)v2 < 1)
    {
      *(_DWORD *)int v15 = v2;
LABEL_60:
      *(_OWORD *)(v15 + 20) = xmmword_1004027B0;
      int64x2_t v37 = v15 + 36;
      goto LABEL_61;
    }
    if (v2 == 1)
    {
      LODWORD(v24) = 0;
      int v25 = v15;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = v2 & 0xFFFFFFFE;
      int v25 = &v15[36 * v24];
      uint64_t v26 = v15 + 36;
      do
      {
        *((_DWORD *)v26 - 9) = 1;
        *((_DWORD *)v26 - 8) = v23;
        *(_DWORD *)uint64_t v26 = 1;
        *((_DWORD *)v26 + 1) = v23 + 1;
        v23 += 2;
        *((_OWORD *)v26 - 1) = xmmword_10040D020;
        *(_OWORD *)(v26 + 20) = xmmword_10040D020;
        v26 += 72;
      }
      while (v24 != v23);
      if (v24 == v2)
      {
LABEL_39:
        if (v2 >= 2)
        {
          uint64_t v29 = 0;
          uint64_t v27 = v2 & 0xFFFFFFFE;
          BOOL v28 = &v25[36 * v27];
          uint64_t v30 = v25 + 36;
          do
          {
            *((_DWORD *)v30 - 9) = 1;
            *((_DWORD *)v30 - 8) = v29;
            *(_DWORD *)uint64_t v30 = 1;
            *((_DWORD *)v30 + 1) = v29 + 1;
            v29 += 2;
            *((_OWORD *)v30 - 1) = xmmword_10040D030;
            *(_OWORD *)(v30 + 20) = xmmword_10040D030;
            v30 += 72;
          }
          while (v27 != v29);
          if (v27 == v2)
          {
LABEL_45:
            if (v2 >= 2)
            {
              uint64_t v32 = 0;
              uint64_t v31 = v2 & 0xFFFFFFFE;
              int v15 = &v28[36 * v31];
              uint64_t v33 = v28 + 36;
              do
              {
                *((_DWORD *)v33 - 9) = 1;
                *((_DWORD *)v33 - 8) = v32;
                *(_DWORD *)uint64_t v33 = 1;
                *((_DWORD *)v33 + 1) = v32 + 1;
                v32 += 2;
                *((_OWORD *)v33 - 1) = xmmword_10040D040;
                *(_OWORD *)(v33 + 20) = xmmword_10040D040;
                v33 += 72;
              }
              while (v31 != v32);
              if (v31 == v2)
              {
                uint64_t v34 = (uint64_t)&v28[36 * v31 - 36];
                if ((int)v2 < 5)
                {
LABEL_58:
                  uint64_t v39 = 0;
                  *(_DWORD *)int v15 = v2;
                  uint64_t v40 = v34 + 40;
                  do
                  {
                    *(_DWORD *)(v40 + 4 * v39) = v39;
                    ++v39;
                  }
                  while (v2 != v39);
                  goto LABEL_60;
                }
LABEL_51:
                uint64_t v35 = 0;
                uint64_t v36 = v2 & 0xFFFFFFFE;
                int64x2_t v37 = &v15[36 * v36];
                int64x2_t v38 = v15 + 36;
                do
                {
                  *((_DWORD *)v38 - 9) = 1;
                  *((_DWORD *)v38 - 8) = v35;
                  *(_DWORD *)int64x2_t v38 = 1;
                  *((_DWORD *)v38 + 1) = v35 + 1;
                  v35 += 2;
                  *((_OWORD *)v38 - 1) = xmmword_1004027B0;
                  *(_OWORD *)(v38 + 20) = xmmword_1004027B0;
                  v38 += 72;
                }
                while (v36 != v35);
                if (v36 != v2)
                {
                  do
                  {
                    *(_DWORD *)int64x2_t v37 = 1;
                    *((_DWORD *)v37 + 1) = v36;
                    *(_OWORD *)(v37 + 20) = xmmword_1004027B0;
                    v37 += 36;
                    LODWORD(v36) = v36 + 1;
                  }
                  while (v2 != v36);
                }
LABEL_61:
                if ((int)v2 < 1) {
                  return result;
                }
                if (v2 == 1)
                {
                  LODWORD(v42) = 0;
                  int64x2_t v43 = v37;
                }
                else
                {
                  uint64_t v41 = 0;
                  uint64_t v42 = v2 & 0xFFFFFFFE;
                  int64x2_t v43 = &v37[36 * v42];
                  int64x2_t v44 = v37 + 36;
                  do
                  {
                    *((_DWORD *)v44 - 9) = 1;
                    *((_DWORD *)v44 - 8) = v41;
                    *(_DWORD *)int64x2_t v44 = 1;
                    *((_DWORD *)v44 + 1) = v41 + 1;
                    v41 += 2;
                    *((_OWORD *)v44 - 1) = xmmword_10040D050;
                    *(_OWORD *)(v44 + 20) = xmmword_10040D050;
                    v44 += 72;
                  }
                  while (v42 != v41);
                  if (v42 == v2) {
                    return result;
                  }
                }
                do
                {
                  *(_DWORD *)int64x2_t v43 = 1;
                  *((_DWORD *)v43 + 1) = v42;
                  *(_OWORD *)(v43 + 20) = xmmword_10040D050;
                  LODWORD(v42) = v42 + 1;
                  v43 += 36;
                }
                while (v2 != v42);
                return result;
              }
            }
            else
            {
              LODWORD(v31) = 0;
              int v15 = v28;
            }
            do
            {
              *(_DWORD *)int v15 = 1;
              *((_DWORD *)v15 + 1) = v31;
              *(_OWORD *)(v15 + 20) = xmmword_10040D040;
              v15 += 36;
              LODWORD(v31) = v31 + 1;
            }
            while (v2 != v31);
            uint64_t v34 = (uint64_t)(v15 - 36);
            if ((int)v2 < 5) {
              goto LABEL_58;
            }
            goto LABEL_51;
          }
        }
        else
        {
          LODWORD(v27) = 0;
          BOOL v28 = v25;
        }
        do
        {
          *(_DWORD *)BOOL v28 = 1;
          *((_DWORD *)v28 + 1) = v27;
          *(_OWORD *)(v28 + 20) = xmmword_10040D030;
          v28 += 36;
          LODWORD(v27) = v27 + 1;
        }
        while (v2 != v27);
        goto LABEL_45;
      }
    }
    do
    {
      *(_DWORD *)int v25 = 1;
      *((_DWORD *)v25 + 1) = v24;
      *(_OWORD *)(v25 + 20) = xmmword_10040D020;
      v25 += 36;
      LODWORD(v24) = v24 + 1;
    }
    while (v2 != v24);
    goto LABEL_39;
  }
  if ((*(_DWORD *)(a1 + 96) | 4) == 7)
  {
    int v8 = 0;
    *(_OWORD *)__n128 result = xmmword_10040D060;
    *(_OWORD *)((char *)result + 20) = xmmword_10040D010;
    *(void *)((char *)result + 36) = 1;
    *(_OWORD *)(result + 7) = xmmword_10040D020;
    result[9] = 0x200000001;
    *(_OWORD *)((char *)result + 92) = xmmword_10040D070;
    *(void *)((char *)result + 108) = 0x100000001;
    *((_OWORD *)result + 8) = xmmword_10040D070;
    result[18] = 1;
    *(_OWORD *)((char *)result + 164) = xmmword_10040D030;
    *(void *)((char *)result + 180) = 1;
    int64x2_t v9 = (_DWORD *)result + 55;
    int v10 = 2;
    unsigned int v11 = 9;
    *((_DWORD *)result + 54) = 3;
    unsigned int v12 = 2;
    unsigned int v13 = 7;
    unsigned int v14 = 3;
    *(_OWORD *)(result + 25) = xmmword_10040D040;
  }
  else
  {
    int v10 = 0;
    *(_OWORD *)__n128 result = xmmword_10040D060;
    *(_OWORD *)((char *)result + 20) = xmmword_10040D010;
    *(void *)((char *)result + 36) = 1;
    *(_OWORD *)(result + 7) = xmmword_10040D020;
    result[9] = 0x100000001;
    *(_OWORD *)((char *)result + 92) = xmmword_10040D020;
    *(void *)((char *)result + 108) = 0x200000001;
    *((_OWORD *)result + 8) = xmmword_10040D020;
    result[18] = 1;
    *(_OWORD *)((char *)result + 164) = xmmword_10040D030;
    *(void *)((char *)result + 180) = 0x100000001;
    *(_OWORD *)(result + 25) = xmmword_10040D030;
    result[27] = 0x200000001;
    *(_OWORD *)((char *)result + 236) = xmmword_10040D030;
    *(void *)((char *)result + 252) = 1;
    *((_OWORD *)result + 17) = xmmword_10040D040;
    *(_OWORD *)((char *)result + 308) = xmmword_10040D040;
    *(void *)((char *)result + 324) = 0x200000001;
    int64x2_t v9 = (_DWORD *)result + 91;
    *(_OWORD *)(result + 43) = xmmword_10040D040;
    int v8 = 2;
    unsigned int v11 = 13;
    *((_DWORD *)result + 90) = 3;
    unsigned int v12 = 3;
    unsigned int v13 = 11;
    unsigned int v14 = 5;
    result[36] = 0x100000001;
  }
  _DWORD *v9 = 0;
  uint64_t v19 = &result[18 * v14 / 8];
  v19[1] = 0x200000001;
  *(_OWORD *)((char *)v19 + 20) = xmmword_1004027B0;
  uint64_t v20 = (char *)result + 36 * v13;
  *(_DWORD *)uint64_t v20 = 1;
  *((_DWORD *)v20 + 1) = v10;
  *(_OWORD *)(v20 + 20) = xmmword_10040D050;
  int v21 = &result[9 * v12 / 8];
  void *v21 = 0x100000001;
  *(_OWORD *)((char *)v21 + 20) = xmmword_10040D050;
  uint64_t v22 = (char *)result + 36 * v11;
  *(_DWORD *)uint64_t v22 = 1;
  *((_DWORD *)v22 + 1) = v8;
  *(_OWORD *)(v22 + 20) = xmmword_10040D050;
  return result;
}

void *sub_1003C8CE0(uint64_t *a1, uint64_t *a2, long long *a3, void *__src)
{
  uint64_t v8 = *a2;
  if (!*a2)
  {
    uint64_t v8 = sub_1003C57D8((uint64_t)a1);
    *a2 = v8;
  }
  long long v9 = *a3;
  *(unsigned char *)(v8 + 16) = *((unsigned char *)a3 + 16);
  *(_OWORD *)uint64_t v8 = v9;
  uint8x16_t v10 = *(uint8x16_t *)((char *)a3 + 1);
  uint16x8_t v11 = vmovl_high_u8(v10);
  uint16x8_t v12 = vmovl_u8(*(uint8x8_t *)v10.i8);
  v12.i32[0] = vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v12.i8, *(uint16x4_t *)v11.i8), (int32x4_t)vaddl_high_u16(v12, v11)));
  size_t v13 = v12.u32[0];
  if ((v12.i32[0] - 257) <= 0xFFFFFEFF)
  {
    uint64_t v14 = *a1;
    *(_DWORD *)(v14 + 40) = 9;
    (*(void (**)(uint64_t *))v14)(a1);
  }
  __n128 result = memcpy((void *)(*a2 + 17), __src, v13);
  *(unsigned char *)(*a2 + 273) = 0;
  return result;
}

void *sub_1003C8D98(uint64_t *a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *a1;
    *(_DWORD *)(v3 + 40) = 3;
    (*(void (**)(uint64_t *))v3)(a1);
  }
  __n128 result = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 112);
  int v5 = result;
  a1[62] = (uint64_t)result;
  *__n128 result = sub_1003C9228;
  if (*(unsigned char *)(a1[66] + 16))
  {
    result[1] = sub_1003C9280;
    uint64_t v49 = *((unsigned int *)a1 + 85);
    int v6 = 5 * v49;
    __n128 result = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 8 * *((_DWORD *)a1 + 23) * 5 * (int)v49);
    if (*((int *)a1 + 23) < 1) {
      return result;
    }
    uint64_t v7 = result;
    uint64_t v8 = a1[13];
    int v9 = 3 * v49;
    uint64_t v10 = v6;
    if ((int)v49 <= 0)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v5 + 2;
      uint64_t v23 = 8 * v10;
      uint64_t v24 = (unsigned int *)(v8 + 28);
      int v25 = (char *)&result[(int)v49];
      size_t v26 = 8 * v9;
      do
      {
        uint64_t v27 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void))(a1[1] + 16))(a1, 1, (uint64_t)(*((int *)a1 + 86) * (unint64_t)*v24 * *((int *)a1 + 84))/ (int)*(v24 - 5), (3 * v49));
        __n128 result = memcpy(v25, v27, v26);
        v22[v21++] = v25;
        v25 += v23;
        v24 += 24;
      }
      while (v21 < *((int *)a1 + 23));
      return result;
    }
    uint64_t v52 = 8 * v9;
    int v11 = 4 * v49;
    uint64_t v12 = 4 * (int)v49;
    uint64_t v51 = 8 * v6;
    if (v49 < 0x16)
    {
      uint64_t v13 = 0;
      uint64_t v14 = &result[v11];
      size_t v15 = 8 * v9;
      do
      {
        uint64_t v16 = (char *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a1[1] + 16))(a1, 1, (uint64_t)(*((int *)a1 + 86) * (unint64_t)*(unsigned int *)(v8 + 28) * *((int *)a1 + 84))/ *(int *)(v8 + 8));
        __n128 result = memcpy(&v7[(int)v49], v16, v15);
        for (uint64_t i = 0; i != v49; ++i)
        {
          v7[i] = *(void *)&v16[8 * (2 * v49) + i * 8];
          v14[i] = *(void *)&v16[i * 8];
        }
        size_t v15 = v52;
        v5[v13 + 2] = &v7[(int)v49];
        uint64_t v7 = (void *)((char *)v7 + v51);
        ++v13;
        v8 += 96;
        uint64_t v14 = (void *)((char *)v14 + v51);
      }
      while (v13 < *((int *)a1 + 23));
      return result;
    }
    uint64_t v28 = 0;
    int64x2_t v48 = &result[v11];
    uint64_t v50 = 8 * (2 * v49);
    uint64_t v29 = v48;
    uint64_t v30 = result;
    size_t v31 = 8 * v9;
    while (1)
    {
      uint64_t v32 = (char *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a1[1] + 16))(a1, 1, (uint64_t)(*((int *)a1 + 86) * (unint64_t)*(unsigned int *)(v8 + 28) * *((int *)a1 + 84))/ *(int *)(v8 + 8));
      __n128 result = memcpy(&v30[(int)v49], v32, v31);
      uint64_t v33 = 0;
      uint64_t v34 = (char *)v48 + v51 * v28;
      if ((unint64_t)(v34 - v32) < 0x20)
      {
        uint64_t v35 = v49;
      }
      else
      {
        uint64_t v35 = v49;
        if ((unint64_t)(v34 - &v32[v50]) >= 0x20)
        {
          uint64_t v36 = (char *)v7 + v51 * v28;
          if ((unint64_t)(v32 - v36) >= 0x20 && (unint64_t)(v36 - &v32[v50]) >= 0x20 && v12 != 0)
          {
            unint64_t v38 = 0;
            do
            {
              long long v39 = *(_OWORD *)&v32[v50 + 16 + v38];
              uint64_t v40 = &v30[v38 / 8];
              *uint64_t v40 = *(_OWORD *)&v32[v50 + v38];
              v40[1] = v39;
              long long v41 = *(_OWORD *)&v32[v38 + 16];
              uint64_t v42 = &v29[v38 / 8];
              _OWORD *v42 = *(_OWORD *)&v32[v38];
              v42[1] = v41;
              v38 += 32;
            }
            while (((8 * v49) & 0x7FFFFFFE0) != v38);
            uint64_t v33 = v49 & 0xFFFFFFFC;
            if (v33 == v49) {
              goto LABEL_20;
            }
          }
        }
      }
      uint64_t v43 = v35 - v33;
      uint64_t v44 = v12 + v33;
      uint64_t v45 = v33;
      int64x2_t v46 = &v32[v45 * 8];
      do
      {
        v30[v45] = *(void *)&v32[v50 + v45 * 8];
        uint64_t v47 = *(void *)v46;
        v46 += 8;
        v30[v44++] = v47;
        ++v45;
        --v43;
      }
      while (v43);
LABEL_20:
      size_t v31 = v52;
      v5[v28 + 2] = &v30[(int)v49];
      uint64_t v30 = (void *)((char *)v30 + v51);
      ++v28;
      v8 += 96;
      uint64_t v29 = (void *)((char *)v29 + v51);
      if (v28 >= *((int *)a1 + 23)) {
        return result;
      }
    }
  }
  result[1] = sub_1003C9514;
  if (*((int *)a1 + 23) >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = result + 2;
    uint64_t v20 = (unsigned int *)(a1[13] + 28);
    do
    {
      __n128 result = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void))(a1[1] + 16))(a1, 1, (uint64_t)(*((int *)a1 + 86) * (unint64_t)*v20 * *((int *)a1 + 84)) / (int)*(v20 - 5), *((unsigned int *)a1 + 85));
      v19[v18++] = result;
      v20 += 24;
    }
    while (v18 < *((int *)a1 + 23));
  }
  return result;
}

void *sub_1003C9228(void *result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (_DWORD *)result[62];
  if (a2)
  {
    uint64_t v4 = *result;
    *(_DWORD *)(v4 + 40) = 3;
    __n128 result = (void *)(*(uint64_t (**)(void *))v4)(result);
  }
  int v5 = *((_DWORD *)v2 + 13);
  v3[25] = 0;
  v3[26] = 0;
  v3[24] = v5;
  v3[27] = 2 * *((_DWORD *)v2 + 85);
  return result;
}

char *sub_1003C9280(char *result, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5, unsigned int *a6, unsigned int a7)
{
  if (*a6 < a7)
  {
    unsigned int v7 = a7;
    unsigned int v9 = a4;
    int v11 = result;
    uint64_t v12 = (_DWORD *)*((void *)result + 62);
    int v35 = 3 * *((_DWORD *)result + 85);
    unint64_t v38 = v12 + 4;
    do
    {
      uint64_t v14 = *a3;
      if (v9 <= v14)
      {
        if (v12[24]) {
          return result;
        }
        int v21 = v12[25];
        int v22 = v12[27];
        if (v21 < v22)
        {
          int v23 = *((_DWORD *)v11 + 23);
          if (v23 >= 1)
          {
            for (uint64_t i = 0; i < v23; ++i)
            {
              int v25 = v12[25];
              int v26 = v12[27];
              if (v25 < v26)
              {
                uint64_t v27 = *(char **)&v12[2 * i + 4];
                size_t v28 = *((unsigned int *)v11 + 12);
                int v29 = v25 - 1;
                do
                  sub_1003EE814(v27, v29, (uint64_t)v27, v25++, 1, v28);
                while (v26 != v25);
                int v23 = *((_DWORD *)v11 + 23);
              }
            }
            int v22 = v12[27];
            unsigned int v7 = a7;
            unsigned int v9 = a4;
          }
          v12[25] = v22;
          uint64_t v13 = *a6;
LABEL_32:
          __n128 result = (char *)(*(uint64_t (**)(char *, _DWORD *, void, uint64_t, uint64_t))(*((void *)v11 + 66)
                                                                                                 + 8))(v11, v38, v12[26], a5, v13);
          ++*a6;
          int v30 = *((_DWORD *)v11 + 85);
          int v31 = v12[25];
          int v32 = v12[26] + v30;
          if (v32 >= v35) {
            int v32 = 0;
          }
          v12[26] = v32;
          if (v31 >= v35)
          {
            int v31 = 0;
            v12[25] = 0;
          }
          v12[27] = v31 + v30;
          LODWORD(v13) = *a6;
          continue;
        }
      }
      else
      {
        if (v12[27] - v12[25] >= v9 - v14) {
          int v15 = v9 - v14;
        }
        else {
          int v15 = v12[27] - v12[25];
        }
        __n128 result = (char *)(*(uint64_t (**)(char *, uint64_t, _DWORD *))(*((void *)v11 + 65) + 8))(v11, a2 + 8 * v14, v38);
        if (v12[24] == *((_DWORD *)v11 + 13))
        {
          int v16 = *((_DWORD *)v11 + 23);
          if (v16 >= 1)
          {
            int v17 = *((_DWORD *)v11 + 85);
            if (v17 >= 1)
            {
              for (uint64_t j = 0; j < v16; ++j)
              {
                if (v17 >= 1)
                {
                  int v19 = 0;
                  int v20 = -1;
                  do
                  {
                    __n128 result = sub_1003EE814(*(char **)&v12[2 * j + 4], 0, *(void *)&v12[2 * j + 4], v20, 1, *((unsigned int *)v11 + 12));
                    int v17 = *((_DWORD *)v11 + 85);
                    ++v19;
                    --v20;
                  }
                  while (v19 < v17);
                  int v16 = *((_DWORD *)v11 + 23);
                }
              }
            }
          }
        }
        *a3 += v15;
        int v21 = v12[25] + v15;
        v12[24] -= v15;
        v12[25] = v21;
        int v22 = v12[27];
        unsigned int v9 = a4;
      }
      uint64_t v13 = *a6;
      if (v21 == v22) {
        goto LABEL_32;
      }
    }
    while (v13 < v7);
  }
  return result;
}

char *sub_1003C9514(char *result, uint64_t a2, unsigned int *a3, unsigned int a4, uint64_t a5, unsigned int *a6, unsigned int a7)
{
  unsigned int v7 = *a3;
  if (*a3 < a4)
  {
    unsigned int v8 = a7;
    uint64_t v10 = a5;
    unsigned int v11 = a4;
    uint64_t v13 = a2;
    uint64_t v14 = result;
    uint64_t v15 = *((void *)result + 62);
    uint64_t v41 = v15 + 16;
    do
    {
      if (*a6 >= v8) {
        return result;
      }
      if (*((_DWORD *)v14 + 85) - *(_DWORD *)(v15 + 100) >= v11 - v7) {
        int v16 = v11 - v7;
      }
      else {
        int v16 = *((_DWORD *)v14 + 85) - *(_DWORD *)(v15 + 100);
      }
      __n128 result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)v14 + 65) + 8))(v14, v13 + 8 * v7, v41);
      *a3 += v16;
      int v17 = *(_DWORD *)(v15 + 100) + v16;
      BOOL v18 = *(_DWORD *)(v15 + 96) == v16;
      *(_DWORD *)(v15 + 96) -= v16;
      *(_DWORD *)(v15 + 100) = v17;
      int v19 = *((_DWORD *)v14 + 85);
      if (v18 && v17 < v19)
      {
        int v21 = *((_DWORD *)v14 + 23);
        if (v21 >= 1)
        {
          for (uint64_t i = 0; i < v21; ++i)
          {
            int v23 = *(_DWORD *)(v15 + 100);
            int v24 = *((_DWORD *)v14 + 85);
            if (v23 < v24)
            {
              int v25 = *(char **)(v15 + 8 * i + 16);
              size_t v26 = *((unsigned int *)v14 + 12);
              int v27 = v23 - 1;
              do
                sub_1003EE814(v25, v27, (uint64_t)v25, v23++, 1, v26);
              while (v24 != v23);
              int v21 = *((_DWORD *)v14 + 23);
            }
          }
          int v19 = *((_DWORD *)v14 + 85);
          unsigned int v8 = a7;
          uint64_t v10 = a5;
          unsigned int v11 = a4;
          uint64_t v13 = a2;
        }
        *(_DWORD *)(v15 + 100) = v19;
      }
      else if (v17 != v19)
      {
        if (*(_DWORD *)(v15 + 96)) {
          goto LABEL_3;
        }
        goto LABEL_25;
      }
      __n128 result = (char *)(*(uint64_t (**)(char *, uint64_t, void, uint64_t, void))(*((void *)v14 + 66) + 8))(v14, v41, 0, v10, *a6);
      *(_DWORD *)(v15 + 100) = 0;
      ++*a6;
      if (*(_DWORD *)(v15 + 96)) {
        goto LABEL_3;
      }
LABEL_25:
      if (*a6 < v8)
      {
        int v28 = *((_DWORD *)v14 + 23);
        if (v28 >= 1)
        {
          uint64_t v29 = 0;
          int v30 = (_DWORD *)*((void *)v14 + 13);
          do
          {
            int v31 = v30[10] * v30[3] / *((_DWORD *)v14 + 87);
            int v32 = *a6 * v31;
            if (v32 < (int)(v31 * v8))
            {
              uint64_t v33 = *(char **)(v10 + 8 * v29);
              size_t v34 = (v30[9] * v30[7]);
              int v35 = v32 - 1;
              int v36 = v31 * (v8 - *a6);
              do
              {
                __n128 result = sub_1003EE814(v33, v35, (uint64_t)v33, v32++, 1, v34);
                --v36;
              }
              while (v36);
              int v28 = *((_DWORD *)v14 + 23);
              unsigned int v8 = a7;
              uint64_t v10 = a5;
            }
            ++v29;
            v30 += 24;
          }
          while (v29 < v28);
        }
        *a6 = v8;
        return result;
      }
LABEL_3:
      unsigned int v7 = *a3;
    }
    while (*a3 < v11);
  }
  return result;
}

uint64_t sub_1003C979C(uint64_t *a1)
{
  uint64_t result = (*(uint64_t (**)(void))a1[1])();
  uint64_t v3 = result;
  a1[66] = result;
  *(void *)uint64_t result = nullsub_102;
  *(void *)(result + 8) = sub_1003C99F8;
  *(unsigned char *)(result + 16) = 0;
  if (*((unsigned char *)a1 + 291))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)(v4 + 40) = 26;
    uint64_t result = (*(uint64_t (**)(uint64_t *))v4)(a1);
  }
  if (*((int *)a1 + 23) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v3 + 154;
    unsigned int v7 = (_DWORD *)(a1[13] + 40);
    int v8 = 1;
    while (1)
    {
      int v11 = *(v7 - 1) * *(v7 - 8);
      int v12 = *((_DWORD *)a1 + 86);
      int v13 = *v7 * *(v7 - 7) / *((_DWORD *)a1 + 87);
      int v14 = *((_DWORD *)a1 + 84);
      int v15 = *((_DWORD *)a1 + 85);
      *(_DWORD *)(v6 + 4 * v5 - 50) = v13;
      int v16 = v11 / v12;
      if (v14 == v16 && v15 == v13)
      {
        uint64_t v9 = v6 + 8 * v5;
        if (*((_DWORD *)a1 + 74))
        {
          int v17 = sub_1003C9AA0;
LABEL_26:
          *(void *)(v9 - 130) = v17;
          *(unsigned char *)(v3 + 16) = 1;
          goto LABEL_7;
        }
        uint64_t v10 = sub_1003CA0D0;
      }
      else if (v14 == 2 * v16 && v15 == v13)
      {
        int v8 = 0;
        uint64_t v9 = v6 + 8 * v5;
        uint64_t v10 = sub_1003CA168;
      }
      else
      {
        if (v14 != 2 * v16 || v15 != 2 * v13)
        {
          int v20 = v14 / v16;
          if (v14 % v16 || (int v21 = v15 / v13, v15 % v13))
          {
            uint64_t v22 = *a1;
            *(_DWORD *)(v22 + 40) = 39;
            uint64_t result = (*(uint64_t (**)(uint64_t *))v22)(a1);
          }
          else
          {
            int v8 = 0;
            *(void *)(v6 + 8 * v5 - 130) = sub_1003CAD88;
            int v23 = (unsigned char *)(v6 + v5);
            *(v23 - 10) = v20;
            *int v23 = v21;
          }
          goto LABEL_7;
        }
        uint64_t v9 = v6 + 8 * v5;
        if (*((_DWORD *)a1 + 74))
        {
          int v17 = sub_1003CA25C;
          goto LABEL_26;
        }
        uint64_t v10 = sub_1003CAC70;
      }
      *(void *)(v9 - 130) = v10;
LABEL_7:
      v7 += 24;
      if (++v5 >= *((int *)a1 + 23))
      {
        if (*((_DWORD *)a1 + 74) && !v8)
        {
          uint64_t v24 = *a1;
          *(_DWORD *)(v24 + 40) = 101;
          int v25 = *(uint64_t (**)(uint64_t *, void))(v24 + 8);
          return v25(a1, 0);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1003C99F8(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  if (*(int *)(result + 92) >= 1)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(result + 104);
    uint64_t v11 = a3;
    uint64_t v12 = *(void *)(result + 528) + 104;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8 * v9 - 80))(v8, v10, *(void *)(a2 + 8 * v9) + 8 * v11, *(void *)(a4 + 8 * v9) + 8 * (*(_DWORD *)(v12 + 4 * v9) * a5));
      ++v9;
      v10 += 96;
    }
    while (v9 < *(int *)(v8 + 92));
  }
  return result;
}

unint64_t sub_1003C9AA0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = result;
  int v7 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  int v8 = *(_DWORD *)(result + 340);
  uint64_t v9 = *(unsigned int *)(result + 48);
  if (v8 >= -1 && v7 - (int)v9 >= 1)
  {
    uint64_t v11 = (uint64_t *)(a3 - 8);
    uint64_t v12 = (v8 + 2);
    do
    {
      uint64_t v13 = *v11++;
      uint64_t result = (unint64_t)memset((void *)(v13 + v9), *(unsigned __int8 *)(v13 + v9 - 1), (v7 + ~v9) + 1);
      --v12;
    }
    while (v12);
    int v8 = *(_DWORD *)(v6 + 340);
  }
  if (v8 >= 1)
  {
    uint64_t v14 = *(int *)(v6 + 296);
    unint64_t v15 = 0x10000 - (v14 << 9);
    unint64_t v16 = (v14 << 6);
    uint64_t v17 = (v7 - 2);
    if (v7 != 2)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (v7 - 3);
      uint64_t v20 = v19 + 2;
      uint64_t v21 = v19 + 3;
      uint64_t v22 = v17 & 0xFFFFFFF0;
      int64x2_t v23 = vdupq_n_s64(v15);
      int64x2_t v24 = vdupq_n_s64(v16);
      int64x2_t v25 = vdupq_n_s64(0x8000uLL);
      while (1)
      {
        size_t v26 = *(unsigned char **)(a4 + 8 * v18);
        int v27 = (unsigned __int8 **)(a3 + 8 * v18);
        int v28 = *(v27 - 1);
        uint64_t v29 = (uint64_t)*v27;
        ++v18;
        int v30 = *(unsigned __int8 **)(a3 + 8 * v18);
        int v31 = v28 + 1;
        int v32 = v30 + 1;
        int v33 = **v27;
        unsigned int v34 = *v30 + *v28 + v33;
        uint64_t v35 = (uint64_t)*v27;
        int v37 = *(unsigned __int8 *)(v35 + 1);
        int v36 = (unsigned __int8 *)(v35 + 1);
        unsigned int v38 = v30[1] + v28[1] + v37;
        *size_t v26 = ((v38 - v33 + 2 * v34) * v16 + v15 * v33 + 0x8000) >> 16;
        long long v39 = (int64x2_t *)(v26 + 1);
        if (v17 < 0x10) {
          break;
        }
        uint64_t v40 = (uint8x16_t *)&v26[v20];
        uint64_t v41 = (uint8x16_t *)(v28 + 2);
        uint64_t v42 = &v28[v21];
        uint64_t v43 = (uint8x16_t *)(v30 + 2);
        uint64_t v44 = &v30[v21];
        BOOL v45 = v39 >= (int64x2_t *)v42 || v41 >= v40;
        BOOL v46 = !v45;
        BOOL v47 = v39 >= (int64x2_t *)v44 || v43 >= v40;
        BOOL v48 = !v47;
        BOOL v49 = v36 >= (unsigned __int8 *)v40 || (unint64_t)v39 >= v29 + v21;
        if (!v49 || v46 || v48) {
          break;
        }
        uint64_t v50 = (int64x2_t *)((char *)v39 + v22);
        v32 += v22;
        v31 += v22;
        v36 += v22;
        int32x4_t v51 = vdupq_n_s32(v34);
        int32x4_t v52 = vdupq_n_s32(v38);
        int64x2_t v53 = (uint8x8_t *)(v29 + 2);
        uint64_t v54 = v17 & 0xFFFFFFF0;
        do
        {
          uint8x16_t v55 = *(uint8x16_t *)((char *)&v53[-1].u32[1] + 3);
          uint16x8_t v56 = vmovl_high_u8(v55);
          int64x2_t v57 = (int64x2_t)vmovl_high_u16(v56);
          v58.i64[0] = v57.u32[2];
          v58.i64[1] = v57.u32[3];
          int64x2_t v59 = (int64x2_t)v58;
          uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)v56.i8);
          v58.i64[0] = v60.u32[2];
          v58.i64[1] = v60.u32[3];
          int64x2_t v61 = (int64x2_t)v58;
          v58.i64[0] = v57.u32[0];
          v58.i64[1] = v57.u32[1];
          int64x2_t v62 = (int64x2_t)v58;
          v58.i64[0] = v60.u32[0];
          v58.i64[1] = v60.u32[1];
          int64x2_t v63 = (int64x2_t)v58;
          uint16x8_t v64 = vmovl_u8(*(uint8x8_t *)v55.i8);
          uint32x4_t v65 = vmovl_high_u16(v64);
          v58.i64[0] = v65.u32[2];
          v58.i64[1] = v65.u32[3];
          int64x2_t v66 = (int64x2_t)v58;
          v58.i64[0] = v65.u32[0];
          v58.i64[1] = v65.u32[1];
          uint32x4_t v67 = vmovl_u16(*(uint16x4_t *)v64.i8);
          uint8x16_t v68 = *v41++;
          uint8x16_t v69 = v68;
          uint8x16_t v70 = *v43++;
          uint16x8_t v71 = vaddl_u8(*(uint8x8_t *)v70.i8, *(uint8x8_t *)v69.i8);
          uint16x8_t v72 = vaddl_high_u8(v70, v69);
          uint16x8_t v73 = vmovl_u8(*v53);
          uint16x8_t v74 = vmovl_high_u8(*(uint8x16_t *)v53->i8);
          int8x16_t v75 = (int8x16_t)vaddl_u16(*(uint16x4_t *)v71.i8, *(uint16x4_t *)v73.i8);
          uint32x4_t v76 = (uint32x4_t)vextq_s8((int8x16_t)v52, v75, 0xCuLL);
          int32x4_t v77 = vuzp2q_s32(v51, v52);
          int32x4_t v52 = (int32x4_t)vaddl_high_u16(v72, v74);
          int8x16_t v78 = (int8x16_t)vaddl_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v74.i8);
          int8x16_t v79 = (int8x16_t)vaddl_high_u16(v71, v73);
          uint32x4_t v80 = (uint32x4_t)vextq_s8(v75, v79, 0xCuLL);
          uint32x4_t v81 = (uint32x4_t)vextq_s8(v79, v78, 0xCuLL);
          v74.i64[0] = vuzp2q_s32(v77, v51).u64[0];
          int32x4_t v51 = (int32x4_t)vextq_s8(v78, (int8x16_t)v52, 0xCuLL);
          uint32x4_t v82 = (uint32x4_t)vextq_s8(v78, (int8x16_t)v52, 8uLL);
          uint32x4_t v83 = (uint32x4_t)vextq_s8(v79, v78, 8uLL);
          uint32x4_t v84 = (uint32x4_t)vextq_s8(v75, v79, 8uLL);
          uint64x2_t v85 = vaddl_high_u32(v82, (uint32x4_t)v51);
          uint64x2_t v86 = vaddl_high_u32(v83, v81);
          uint64x2_t v87 = vaddl_u32(*(uint32x2_t *)v83.i8, *(uint32x2_t *)v81.i8);
          uint64x2_t v88 = vaddl_high_u32(v84, v80);
          uint64x2_t v89 = vsubw_u32(vaddl_u32(*(uint32x2_t *)v84.i8, *(uint32x2_t *)v80.i8), *(uint32x2_t *)v65.i8);
          uint64x2_t v90 = vsubw_high_u32(v88, v65);
          uint64x2_t v91 = vsubw_u32(v87, *(uint32x2_t *)v60.i8);
          uint64x2_t v92 = vsubw_u32(vaddl_u32(*(uint32x2_t *)v82.i8, *(uint32x2_t *)v51.i8), *(uint32x2_t *)v57.i8);
          uint64x2_t v93 = vsubw_high_u32(v86, v60);
          uint64x2_t v94 = vsubw_u32(vaddl_u32(*(uint32x2_t *)v74.i8, *(uint32x2_t *)v76.i8), *(uint32x2_t *)v67.i8);
          int64x2_t v95 = (int64x2_t)vaddw_high_u32(v93, (uint32x4_t)v78);
          int64x2_t v96 = (int64x2_t)vaddw_u32(v91, *(uint32x2_t *)v78.i8);
          int64x2_t v97 = (int64x2_t)vaddw_high_u32(v90, (uint32x4_t)v79);
          int64x2_t v98 = (int64x2_t)vaddw_u32(v89, *(uint32x2_t *)v79.i8);
          int64x2_t v99 = (int64x2_t)vaddw_high_u32(vsubw_high_u32(v85, (uint32x4_t)v57), (uint32x4_t)v52);
          int64x2_t v100 = (int64x2_t)vaddw_u32(v92, *(uint32x2_t *)v52.i8);
          v57.i64[0] = v23.i64[0] * v67.u32[0];
          v101.i64[0] = v23.i64[0] * v67.u32[2];
          v102.i64[0] = v23.i64[0] * v58.i64[0];
          v66.i64[0] *= v23.i64[0];
          v63.i64[0] *= v23.i64[0];
          v57.i64[1] = v23.i64[1] * v67.u32[1];
          v101.i64[1] = v23.i64[1] * v67.u32[3];
          v62.i64[0] *= v23.i64[0];
          v102.i64[1] = v23.i64[1] * v58.i64[1];
          v61.i64[0] *= v23.i64[0];
          v66.i64[1] *= v23.i64[1];
          v63.i64[1] *= v23.i64[1];
          v62.i64[1] *= v23.i64[1];
          v59.i64[0] *= v23.i64[0];
          v61.i64[1] *= v23.i64[1];
          v59.i64[1] *= v23.i64[1];
          uint64_t v103 = v96.i64[1];
          uint64_t v104 = v96.i64[0];
          v96.i64[0] = v98.i64[0] * v24.i64[0];
          v97.i64[0] *= v24.i64[0];
          v98.i64[0] = v104 * v24.i64[0];
          v95.i64[0] *= v24.i64[0];
          uint64_t v105 = v99.i64[0] * v24.i64[0];
          v99.i64[0] = v100.i64[0] * v24.i64[0];
          int64x2_t v106 = (int64x2_t)vaddw_u32(v94, *(uint32x2_t *)v75.i8);
          v100.i64[0] = v105;
          v96.i64[1] = v98.i64[1] * v24.i64[1];
          v97.i64[1] *= v24.i64[1];
          v106.i64[0] *= v24.i64[0];
          v58.i64[0] = v75.u32[0];
          v58.i64[1] = v75.u32[1];
          v98.i64[1] = v103 * v24.i64[1];
          int64x2_t v107 = (int64x2_t)vaddw_high_u32(vsubw_high_u32(vaddw_high_u32(v58, v76), v67), (uint32x4_t)v75);
          v95.i64[1] *= v24.i64[1];
          uint64_t v108 = v99.i64[1] * v24.i64[1];
          v106.i64[1] *= v24.i64[1];
          v99.i64[1] = v100.i64[1] * v24.i64[1];
          v100.i64[1] = v108;
          v107.i64[0] *= v24.i64[0];
          v107.i64[1] *= v24.i64[1];
          uint64x2_t v109 = (uint64x2_t)vaddq_s64(vaddq_s64(v66, v25), v97);
          uint64x2_t v110 = (uint64x2_t)vaddq_s64(vaddq_s64(v57, v25), v106);
          v130.val[3] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v59, v25), v100), 0x10uLL);
          v130.val[1] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v61, v25), v95), 0x10uLL);
          v130.val[2] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v62, v25), v99), 0x10uLL);
          v130.val[0] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v63, v25), v98), 0x10uLL);
          v129.val[3] = (int8x16_t)vshrq_n_u64(v109, 0x10uLL);
          v129.val[2] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v102, v25), v96), 0x10uLL);
          v129.val[1] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v101, v25), v107), 0x10uLL);
          v129.val[0] = (int8x16_t)vshrq_n_u64(v110, 0x10uLL);
          v107.i64[0] = vqtbl4q_s8(v129, (int8x16_t)xmmword_10040A870).u64[0];
          v107.i64[1] = vqtbl4q_s8(v130, (int8x16_t)xmmword_10040A870).u64[0];
          *v39++ = v107;
          v53 += 2;
          v54 -= 16;
        }
        while (v54);
        unsigned int v38 = v52.u32[3];
        if (v22 != v17)
        {
          unsigned int v34 = v52.u32[2];
          int v111 = v17 - (v17 & 0xFFFFFFF0);
          goto LABEL_38;
        }
        uint64_t result = v51.u32[3];
LABEL_12:
        v50->i8[0] = ((result + 2 * v38 - *v36) * v16 + v15 * *v36 + 0x8000) >> 16;
        if (v18 >= *(int *)(v6 + 340)) {
          return result;
        }
      }
      uint64_t v50 = v39;
      int v111 = v17;
LABEL_38:
      int8x16_t v112 = v32 + 1;
      int8x16_t v113 = v31 + 1;
      do
      {
        int8x16_t v114 = v36;
        unsigned int v115 = v38;
        int v117 = *++v36;
        int v116 = v117;
        int v119 = *v113++;
        int v118 = v119;
        int v120 = *v112++;
        unsigned int v38 = v120 + v118 + v116;
        v50->i8[0] = ((v34 + v115 - *v114 + v38) * v16 + v15 * *v114 + 0x8000) >> 16;
        uint64_t v50 = (int64x2_t *)((char *)v50 + 1);
        unsigned int v34 = v115;
        --v111;
      }
      while (v111);
      uint64_t result = v115;
      goto LABEL_12;
    }
    uint64_t v121 = 0;
    do
    {
      int32x4_t v122 = *(unsigned char **)(a4 + 8 * v121);
      int32x4_t v123 = (unsigned __int8 **)(a3 + 8 * v121);
      int32x4_t v124 = *(v123 - 1);
      int32x4_t v125 = *v123;
      int64x2_t v126 = v123[1];
      int v127 = *v126;
      int v128 = *v125;
      LODWORD(v126) = v126[1] + v124[1] + v125[1];
      LODWORD(v124) = v127 + *v124 + v128;
      *int32x4_t v122 = ((v126 - v128 + 2 * v124) * v16 + v15 * v128 + 0x8000) >> 16;
      ++v121;
      v122[1] = ((v124 + 2 * v126 - v125[1]) * v16 + v15 * v125[1] + 0x8000) >> 16;
    }
    while (v121 < *(int *)(v6 + 340));
  }
  return result;
}

void *sub_1003CA0D0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4 = (uint64_t *)a4;
  uint64_t result = sub_1003EE814(a3, 0, a4, 0, *(_DWORD *)(a1 + 340), *(unsigned int *)(a1 + 48));
  uint64_t v8 = *(unsigned int *)(a1 + 340);
  uint64_t v9 = *(unsigned int *)(a1 + 48);
  int v10 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  if ((int)v8 >= 1 && v10 - (int)v9 >= 1)
  {
    size_t v12 = (v10 + ~v9) + 1;
    do
    {
      uint64_t v13 = *v4++;
      uint64_t result = memset((void *)(v13 + v9), *(unsigned __int8 *)(v13 + v9 - 1), v12);
      --v8;
    }
    while (v8);
  }
  return result;
}

unsigned int *sub_1003CA168(unsigned int *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v6 = result;
  int v7 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  uint64_t v8 = result[85];
  uint64_t v9 = result[12];
  if ((int)v8 >= 1 && 2 * v7 - (int)v9 >= 1)
  {
    uint64_t v11 = a3;
    do
    {
      uint64_t v12 = *v11++;
      uint64_t result = (unsigned int *)memset((void *)(v12 + v9), *(unsigned __int8 *)(v12 + v9 - 1), (2 * v7 + ~v9) + 1);
      --v8;
    }
    while (v8);
    LODWORD(v8) = v6[85];
  }
  if ((int)v8 >= 1 && v7 != 0)
  {
    uint64_t v14 = 0;
    do
    {
      int v15 = 0;
      unint64_t v16 = *(unsigned char **)(a4 + 8 * v14);
      uint64_t v17 = (unsigned __int8 *)a3[v14];
      int v18 = v7;
      do
      {
        *v16++ = (v15 + *v17 + v17[1]) >> 1;
        v15 ^= 1u;
        v17 += 2;
        --v18;
      }
      while (v18);
      ++v14;
    }
    while (v14 < (int)v6[85]);
  }
  return result;
}

unsigned __int8 *sub_1003CA25C(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  unint64_t v6 = result;
  int v7 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  int v8 = *((_DWORD *)result + 85);
  uint64_t v9 = *((unsigned int *)result + 12);
  if (v8 >= -1 && 2 * v7 - (int)v9 >= 1)
  {
    uint64_t v11 = (uint64_t *)(a3 - 8);
    uint64_t v12 = (v8 + 2);
    do
    {
      uint64_t v13 = *v11++;
      uint64_t result = (unsigned __int8 *)memset((void *)(v13 + v9), *(unsigned __int8 *)(v13 + v9 - 1), (2 * v7 + ~v9) + 1);
      --v12;
    }
    while (v12);
    int v8 = *((_DWORD *)v6 + 85);
  }
  if (v8 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = *((_DWORD *)v6 + 74);
    unint64_t v17 = (-80 * v16 + 0x4000);
    unint64_t v18 = (16 * v16);
    uint64_t v19 = (v7 - 2);
    uint64_t v20 = (v7 - 3);
    uint64_t v21 = v20 + 2;
    uint64_t v213 = 2 * v20 + 5;
    uint64_t v203 = 2 * (v19 & 0xFFFFFFF0);
    int8x16_t v22 = (int8x16_t)xmmword_1004048B0;
    int8x16_t v23 = (int8x16_t)xmmword_1004048A0;
    uint64_t v212 = v19 & 0xFFFFFFF0;
    int v202 = v19 - (v19 & 0xFFFFFFF0);
    uint64_t v209 = v5;
    uint64_t v210 = a4;
    int v207 = v17;
    int8x16_t v208 = v6;
    uint64_t v205 = v19;
    int v206 = v18;
    uint64_t v204 = v20 + 2;
    int64x2_t v217 = vdupq_n_s64(0x8000uLL);
    int64x2_t v215 = vdupq_n_s64(v18);
    int64x2_t v216 = vdupq_n_s64(v17);
    int8x16_t v214 = (int8x16_t)vdupq_n_s64(0x1FFFFFFFEuLL);
    do
    {
      size_t v26 = *(unsigned char **)(a4 + 8 * v15);
      int v27 = (unsigned __int8 **)(v5 + 8 * v14);
      uint64_t v29 = *(v27 - 1);
      uint64_t v28 = (uint64_t)*v27;
      int v30 = *(unsigned __int8 **)(v5 + ((8 * v14) | 8));
      v14 += 2;
      int v31 = *(unsigned __int8 **)(v5 + 8 * v14);
      int v32 = *v27 + 1;
      int v33 = *v30 + **v27;
      uint64_t result = *v27 + 2;
      unsigned int v34 = v30 + 2;
      uint64_t v35 = v29 + 2;
      int v36 = v31 + 2;
      *size_t v26 = ((*v31 + *v29 + v29[2] + v31[2] + 2 * (v33 + *v29 + v29[1] + *v31 + v31[1] + *result + v30[2]))
            * v18
            + (v33 + *v32 + v30[1]) * v17
            + 0x8000) >> 16;
      int v37 = (uint64x2_t *)(v26 + 1);
      if (v19)
      {
        if (v19 < 0x10) {
          goto LABEL_44;
        }
        unint64_t v38 = (unint64_t)&v26[v21];
        BOOL v39 = v37 >= (uint64x2_t *)&v30[v213] || (unint64_t)(v30 + 1) >= v38;
        BOOL v40 = !v39;
        BOOL v41 = v37 >= (uint64x2_t *)&v29[v213] || (unint64_t)(v29 + 1) >= v38;
        BOOL v42 = !v41;
        BOOL v43 = v37 >= (uint64x2_t *)&v31[v213] || (unint64_t)(v31 + 1) >= v38;
        BOOL v44 = !v43;
        BOOL v45 = (unint64_t)v32 >= v38 || (unint64_t)v37 >= v28 + v213;
        if (!v45 || v40 || v42 || v44)
        {
LABEL_44:
          int64x2_t v24 = v37;
          int v191 = v19;
        }
        else
        {
          uint64_t v211 = v15;
          uint64_t v46 = v212;
          int64x2_t v24 = (uint64x2_t *)((char *)v37 + v212);
          v36 += v203;
          v35 += v203;
          v34 += v203;
          result += v203;
          BOOL v47 = (const char *)(v28 + 3);
          BOOL v48 = (const char *)(v30 + 3);
          BOOL v49 = (const char *)(v31 + 3);
          uint64_t v50 = (const char *)(v29 + 3);
          do
          {
            uint64_t v229 = v46;
            v230 = v37;
            int32x4_t v51 = v47 - 2;
            int8x16x2_t v234 = vld2q_s8(v51);
            int8x16x2_t v233 = vld2q_s8(v47);
            v47 += 32;
            uint32x4_t v52 = (uint32x4_t)vqtbl1q_s8(v234.val[1], (int8x16_t)xmmword_1004048C0);
            uint32x4_t v53 = (uint32x4_t)vqtbl1q_s8(v234.val[1], v22);
            uint32x4_t v54 = (uint32x4_t)vqtbl1q_s8(v234.val[1], v23);
            uint32x4_t v55 = (uint32x4_t)vqtbl1q_s8(v233.val[0], (int8x16_t)xmmword_1004048C0);
            uint32x4_t v56 = (uint32x4_t)vqtbl1q_s8(v234.val[1], (int8x16_t)xmmword_100404890);
            uint32x4_t v57 = (uint32x4_t)vqtbl1q_s8(v233.val[0], v22);
            uint32x4_t v58 = (uint32x4_t)vqtbl1q_s8(v233.val[0], v23);
            uint32x4_t v59 = (uint32x4_t)vqtbl1q_s8(v233.val[0], (int8x16_t)xmmword_100404890);
            uint64x2_t v60 = vaddl_high_u32(v55, v52);
            int8x16_t v61 = v22;
            uint64x2_t v62 = vaddl_high_u32(v57, v53);
            int8x16_t v63 = v23;
            uint64x2_t v64 = vaddl_u32(*(uint32x2_t *)v55.i8, *(uint32x2_t *)v52.i8);
            uint32x4_t v65 = v48 - 2;
            int8x16x2_t v232 = vld2q_s8(v65);
            uint64x2_t v66 = vaddl_u32(*(uint32x2_t *)v57.i8, *(uint32x2_t *)v53.i8);
            uint64x2_t v67 = vaddl_high_u32(v58, v54);
            uint64x2_t v68 = vaddl_high_u32(v59, v56);
            uint64x2_t v69 = vaddl_u32(*(uint32x2_t *)v58.i8, *(uint32x2_t *)v54.i8);
            uint32x4_t v70 = (uint32x4_t)vqtbl1q_s8(v232.val[1], (int8x16_t)xmmword_100404890);
            uint32x4_t v71 = (uint32x4_t)vqtbl1q_s8(v232.val[1], v63);
            uint64x2_t v72 = vaddl_u32(*(uint32x2_t *)v59.i8, *(uint32x2_t *)v56.i8);
            uint32x4_t v73 = (uint32x4_t)vqtbl1q_s8(v232.val[1], v61);
            uint32x4_t v74 = (uint32x4_t)vqtbl1q_s8(v232.val[1], (int8x16_t)xmmword_1004048C0);
            uint64x2_t v75 = vaddw_u32(v69, *(uint32x2_t *)v71.i8);
            uint64x2_t v220 = vaddw_high_u32(v68, v70);
            uint64x2_t v221 = vaddw_u32(v72, *(uint32x2_t *)v70.i8);
            uint64x2_t v76 = vaddw_high_u32(v67, v71);
            int8x16x2_t v235 = vld2q_s8(v48);
            v48 += 32;
            uint64x2_t v77 = vaddw_u32(v66, *(uint32x2_t *)v73.i8);
            uint64x2_t v78 = vaddw_u32(v64, *(uint32x2_t *)v74.i8);
            uint32x4_t v79 = (uint32x4_t)vqtbl1q_s8(v235.val[0], (int8x16_t)xmmword_1004048C0);
            uint32x4_t v80 = (uint32x4_t)vqtbl1q_s8(v235.val[0], v61);
            uint32x4_t v81 = (uint32x4_t)vqtbl1q_s8(v235.val[0], v63);
            int8x16_t v223 = v235.val[1];
            uint32x4_t v82 = v50 - 2;
            uint64x2_t v83 = vaddw_high_u32(v62, v73);
            int8x16x2_t v231 = vld2q_s8(v82);
            uint32x4_t v84 = (uint32x4_t)vqtbl1q_s8(v231.val[1], (int8x16_t)xmmword_1004048C0);
            int8x16x2_t v236 = vld2q_s8(v50);
            v50 += 32;
            uint64x2_t v228 = vaddw_high_u32(vaddw_high_u32(v60, v74), v79);
            int8x16_t v225 = v231.val[0];
            uint32x4_t v85 = (uint32x4_t)vqtbl1q_s8(v231.val[1], v61);
            uint32x4_t v86 = (uint32x4_t)vqtbl1q_s8(v231.val[1], v63);
            uint32x4_t v87 = (uint32x4_t)vqtbl1q_s8(v231.val[1], (int8x16_t)xmmword_100404890);
            uint32x4_t v88 = (uint32x4_t)vqtbl1q_s8(v236.val[0], (int8x16_t)xmmword_1004048C0);
            uint32x4_t v89 = (uint32x4_t)vqtbl1q_s8(v236.val[0], v61);
            uint64x2_t v227 = vaddw_high_u32(v83, v80);
            v231.val[0] = vqtbl1q_s8(v236.val[0], v63);
            v231.val[1] = vqtbl1q_s8(v236.val[0], (int8x16_t)xmmword_100404890);
            uint64x2_t v90 = vaddl_high_u32(v88, v84);
            uint64x2_t v91 = vaddl_u32(*(uint32x2_t *)v88.i8, *(uint32x2_t *)v84.i8);
            uint64x2_t v92 = vaddl_high_u32(v89, v85);
            uint64x2_t v226 = vaddw_u32(v78, *(uint32x2_t *)v79.i8);
            uint64x2_t v93 = vaddl_u32(*(uint32x2_t *)v89.i8, *(uint32x2_t *)v85.i8);
            uint64x2_t v94 = vaddl_high_u32((uint32x4_t)v231.val[0], v86);
            uint64x2_t v95 = vaddl_high_u32((uint32x4_t)v231.val[1], v87);
            v231.val[0] = (int8x16_t)vaddl_u32(*(uint32x2_t *)v231.val[0].i8, *(uint32x2_t *)v86.i8);
            uint64x2_t v224 = vaddw_u32(v77, *(uint32x2_t *)v80.i8);
            int64x2_t v96 = v49 - 2;
            int8x16x2_t v237 = vld2q_s8(v96);
            uint32x4_t v97 = (uint32x4_t)vqtbl1q_s8(v237.val[1], (int8x16_t)xmmword_100404890);
            v231.val[1] = (int8x16_t)vaddw_u32(vaddl_u32(*(uint32x2_t *)v231.val[1].i8, *(uint32x2_t *)v87.i8), *(uint32x2_t *)v97.i8);
            uint64x2_t v98 = vaddw_high_u32(v95, v97);
            uint32x4_t v99 = (uint32x4_t)vqtbl1q_s8(v235.val[0], (int8x16_t)xmmword_100404890);
            uint64x2_t v100 = vaddw_high_u32(v76, v81);
            uint64x2_t v101 = vaddw_high_u32(v220, v99);
            uint64x2_t v102 = vaddw_u32(v75, *(uint32x2_t *)v81.i8);
            v235.val[0] = vqtbl1q_s8(v237.val[1], v63);
            v231.val[0] = (int8x16_t)vaddw_u32((uint64x2_t)v231.val[0], *(uint32x2_t *)v235.val[0].i8);
            v235.val[0] = (int8x16_t)vaddw_high_u32(v94, (uint32x4_t)v235.val[0]);
            uint32x4_t v103 = (uint32x4_t)vqtbl1q_s8(v237.val[1], v61);
            uint64x2_t v104 = vaddw_u32(v93, *(uint32x2_t *)v103.i8);
            uint64x2_t v105 = vaddw_u32(v221, *(uint32x2_t *)v99.i8);
            uint64x2_t v106 = vaddw_high_u32(v92, v103);
            int8x16x2_t v238 = vld2q_s8(v49);
            v49 += 32;
            uint32x4_t v107 = (uint32x4_t)vqtbl1q_s8(v237.val[1], (int8x16_t)xmmword_1004048C0);
            uint64x2_t v108 = vaddw_u32(v91, *(uint32x2_t *)v107.i8);
            uint64x2_t v109 = vaddw_high_u32(v90, v107);
            uint32x4_t v110 = (uint32x4_t)vqtbl1q_s8(v238.val[0], (int8x16_t)xmmword_1004048C0);
            v235.val[1] = (int8x16_t)vaddw_high_u32(v109, v110);
            uint64x2_t v111 = vaddw_u32(v108, *(uint32x2_t *)v110.i8);
            uint32x4_t v112 = (uint32x4_t)vqtbl1q_s8(v238.val[0], v61);
            uint64x2_t v113 = vaddw_high_u32(v106, v112);
            uint64x2_t v114 = vaddw_u32(v104, *(uint32x2_t *)v112.i8);
            uint32x4_t v115 = (uint32x4_t)vqtbl1q_s8(v238.val[0], v63);
            v235.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v235.val[0], v115);
            uint64x2_t v116 = vaddw_u32((uint64x2_t)v231.val[0], *(uint32x2_t *)v115.i8);
            uint32x4_t v117 = (uint32x4_t)vqtbl1q_s8(v238.val[0], (int8x16_t)xmmword_100404890);
            v231.val[0] = (int8x16_t)vaddw_high_u32(v98, v117);
            v231.val[1] = (int8x16_t)vaddw_u32((uint64x2_t)v231.val[1], *(uint32x2_t *)v117.i8);
            uint32x4_t v118 = (uint32x4_t)vqtbl1q_s8(v234.val[0], (int8x16_t)xmmword_100404890);
            uint32x4_t v119 = (uint32x4_t)vqtbl1q_s8(v234.val[0], v63);
            uint32x4_t v120 = (uint32x4_t)vqtbl1q_s8(v234.val[0], v61);
            v234.val[0] = vqtbl1q_s8(v234.val[0], (int8x16_t)xmmword_1004048C0);
            v231.val[1] = (int8x16_t)vaddw_u32((uint64x2_t)v231.val[1], *(uint32x2_t *)v118.i8);
            v231.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v231.val[0], v118);
            uint64x2_t v121 = vaddw_u32(v116, *(uint32x2_t *)v119.i8);
            uint64x2_t v122 = vaddw_high_u32((uint64x2_t)v235.val[0], v119);
            uint64x2_t v123 = vaddw_u32(v114, *(uint32x2_t *)v120.i8);
            uint64x2_t v124 = vaddw_u32(v111, *(uint32x2_t *)v234.val[0].i8);
            v235.val[0] = (int8x16_t)vaddw_high_u32(v113, v120);
            uint32x4_t v125 = (uint32x4_t)vqtbl1q_s8(v233.val[1], (int8x16_t)xmmword_1004048C0);
            uint32x4_t v126 = (uint32x4_t)vqtbl1q_s8(v233.val[1], v61);
            uint32x4_t v127 = (uint32x4_t)vqtbl1q_s8(v233.val[1], v63);
            v233.val[0] = vqtbl1q_s8(v233.val[1], (int8x16_t)xmmword_100404890);
            v234.val[0] = (int8x16_t)vaddw_high_u32(vaddw_high_u32((uint64x2_t)v235.val[1], (uint32x4_t)v234.val[0]), v125);
            v234.val[1] = (int8x16_t)vaddw_u32(v124, *(uint32x2_t *)v125.i8);
            uint64x2_t v128 = vaddw_high_u32((uint64x2_t)v235.val[0], v126);
            v235.val[1] = (int8x16_t)vaddw_u32(v123, *(uint32x2_t *)v126.i8);
            uint64x2_t v129 = vaddw_high_u32(v122, v127);
            uint64x2_t v130 = vaddw_u32(v121, *(uint32x2_t *)v127.i8);
            uint32x4_t v131 = (uint32x4_t)vqtbl1q_s8(v232.val[0], (int8x16_t)xmmword_100404890);
            uint32x4_t v132 = (uint32x4_t)vqtbl1q_s8(v232.val[0], v63);
            uint32x4_t v133 = (uint32x4_t)vqtbl1q_s8(v232.val[0], v61);
            v232.val[0] = vqtbl1q_s8(v232.val[0], (int8x16_t)xmmword_1004048C0);
            v232.val[1] = (int8x16_t)vaddw_u32(vaddw_u32((uint64x2_t)v231.val[1], *(uint32x2_t *)v233.val[0].i8), *(uint32x2_t *)v131.i8);
            uint64x2_t v134 = vaddw_high_u32(vaddw_high_u32((uint64x2_t)v231.val[0], (uint32x4_t)v233.val[0]), v131);
            uint64x2_t v135 = vaddw_high_u32(v129, v132);
            v233.val[0] = (int8x16_t)vaddw_u32((uint64x2_t)v235.val[1], *(uint32x2_t *)v133.i8);
            v233.val[1] = (int8x16_t)vaddw_high_u32(v128, v133);
            v221.i64[0] = v105.i64[1];
            uint64_t v219 = v105.i64[0];
            v220.i64[0] = v102.i64[1];
            uint64x2_t v136 = vaddw_u32((uint64x2_t)v234.val[1], *(uint32x2_t *)v232.val[0].i8);
            uint64_t v218 = v102.i64[0];
            uint32x4_t v137 = (uint32x4_t)vqtbl1q_s8(v223, (int8x16_t)xmmword_1004048C0);
            v234.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v234.val[0], (uint32x4_t)v232.val[0]);
            v232.val[0] = vqtbl1q_s8(v223, v61);
            uint32x4_t v138 = (uint32x4_t)vqtbl1q_s8(v223, v63);
            v231.val[0] = vqtbl1q_s8(v223, (int8x16_t)xmmword_100404890);
            v231.val[1] = (int8x16_t)vaddw_high_u32(v135, v138);
            int64x2_t v139 = (int64x2_t)vaddw_u32(vaddw_u32(v130, *(uint32x2_t *)v132.i8), *(uint32x2_t *)v138.i8);
            int64x2_t v140 = (int64x2_t)vaddw_u32((uint64x2_t)v232.val[1], *(uint32x2_t *)v231.val[0].i8);
            uint32x4_t v141 = (uint32x4_t)vqtbl1q_s8(v225, (int8x16_t)xmmword_100404890);
            uint32x4_t v142 = (uint32x4_t)vqtbl1q_s8(v225, v63);
            uint64_t v222 = v100.i64[1];
            uint64_t v143 = v100.i64[0];
            v232.val[1] = vqtbl1q_s8(v236.val[1], (int8x16_t)xmmword_100404890);
            int8x16_t v23 = v63;
            v235.val[0] = vqtbl1q_s8(v236.val[1], v63);
            uint32x4_t v144 = (uint32x4_t)vqtbl1q_s8(v237.val[0], (int8x16_t)xmmword_100404890);
            uint32x4_t v145 = (uint32x4_t)vqtbl1q_s8(v238.val[1], (int8x16_t)xmmword_100404890);
            uint64x2_t v146 = vaddw_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_u32(vaddl_u32(*(uint32x2_t *)v232.val[1].i8, *(uint32x2_t *)v141.i8), *(uint32x2_t *)v144.i8), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v140, v140), v214)), *(uint32x2_t *)v145.i8);
            uint64_t v147 = v146.i64[1];
            uint64_t v148 = v146.i64[0];
            uint32x4_t v149 = (uint32x4_t)vqtbl1q_s8(v237.val[0], v23);
            v235.val[1] = vqtbl1q_s8(v238.val[1], v23);
            uint64x2_t v150 = vaddw_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_u32(vaddl_u32(*(uint32x2_t *)v235.val[0].i8, *(uint32x2_t *)v142.i8), *(uint32x2_t *)v149.i8), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v139, v139), v214)), *(uint32x2_t *)v235.val[1].i8);
            uint64_t v151 = v150.i64[1];
            uint64_t v152 = v150.i64[0];
            int64x2_t v153 = (int64x2_t)vaddw_high_u32(v134, (uint32x4_t)v231.val[0]);
            uint64x2_t v154 = vaddw_high_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_high_u32(vaddl_high_u32((uint32x4_t)v232.val[1], v141), v144), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v153, v153), v214)), v145);
            int8x16_t v22 = v61;
            uint64_t v155 = v154.i64[1];
            uint64_t v156 = v154.i64[0];
            uint64x2_t v157 = vaddw_high_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_high_u32(vaddl_high_u32((uint32x4_t)v235.val[0], v142), v149), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v231.val[1], (int64x2_t)v231.val[1]), v214)), (uint32x4_t)v235.val[1]);
            uint64_t v158 = v157.i64[1];
            v231.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v234.val[0], v137);
            v231.val[1] = (int8x16_t)vaddw_high_u32((uint64x2_t)v233.val[1], (uint32x4_t)v232.val[0]);
            int64x2_t v159 = (int64x2_t)vaddw_u32(v136, *(uint32x2_t *)v137.i8);
            int64x2_t v160 = (int64x2_t)vaddw_u32((uint64x2_t)v233.val[0], *(uint32x2_t *)v232.val[0].i8);
            uint64_t v161 = v157.i64[0];
            uint32x4_t v162 = (uint32x4_t)vqtbl1q_s8(v225, v61);
            uint32x4_t v163 = (uint32x4_t)vqtbl1q_s8(v236.val[1], v61);
            v232.val[1] = vqtbl1q_s8(v237.val[0], v61);
            v232.val[0] = vqtbl1q_s8(v238.val[1], v61);
            uint64x2_t v164 = vaddw_u32((uint64x2_t)vaddq_s64((int64x2_t)vaddw_u32(vaddl_u32(*(uint32x2_t *)v163.i8, *(uint32x2_t *)v162.i8), *(uint32x2_t *)v232.val[1].i8), (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v160, v160), v214)), *(uint32x2_t *)v232.val[0].i8);
            uint64_t v165 = v164.i64[1];
            uint64_t v166 = v164.i64[0];
            uint32x4_t v167 = (uint32x4_t)vqtbl1q_s8(v225, (int8x16_t)xmmword_1004048C0);
            v235.val[0] = vqtbl1q_s8(v236.val[1], (int8x16_t)xmmword_1004048C0);
            uint64x2_t v168 = vaddl_high_u32(v163, v162);
            uint64x2_t v169 = vaddl_u32(*(uint32x2_t *)v235.val[0].i8, *(uint32x2_t *)v167.i8);
            uint64x2_t v170 = vaddl_high_u32((uint32x4_t)v235.val[0], v167);
            v235.val[0] = vqtbl1q_s8(v237.val[0], (int8x16_t)xmmword_1004048C0);
            v235.val[1].i64[0] = v219 * v216.i64[0];
            int64x2_t v171 = (int64x2_t)vaddw_high_u32(v168, (uint32x4_t)v232.val[1]);
            v232.val[1].i64[0] = v218 * v216.i64[0];
            int64x2_t v172 = (int64x2_t)vaddw_high_u32(v170, (uint32x4_t)v235.val[0]);
            int64x2_t v173 = (int64x2_t)vaddw_u32(v169, *(uint32x2_t *)v235.val[0].i8);
            v235.val[0].i64[0] = v101.i64[0] * v216.i64[0];
            int64x2_t v174 = (int64x2_t)vqtbl1q_s8(v238.val[1], (int8x16_t)xmmword_1004048C0);
            v236.val[0].i64[0] = v143 * v216.i64[0];
            uint64x2_t v175 = (uint64x2_t)vaddq_s64(v173, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64(v159, v159), v214));
            v173.i64[0] = v224.i64[0] * v216.i64[0];
            uint64x2_t v176 = (uint64x2_t)vaddq_s64(v171, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v231.val[1], (int64x2_t)v231.val[1]), v214));
            v231.val[1].i64[0] = v226.i64[0] * v216.i64[0];
            v231.val[0] = (int8x16_t)vaddq_s64(v172, (int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)v231.val[0], (int64x2_t)v231.val[0]), v214));
            v172.i64[0] = v227.i64[0] * v216.i64[0];
            v235.val[1].i64[1] = v221.i64[0] * v216.i64[1];
            v232.val[1].i64[1] = v220.i64[0] * v216.i64[1];
            v235.val[0].i64[1] = v101.i64[1] * v216.i64[1];
            v236.val[0].i64[1] = v222 * v216.i64[1];
            int64x2_t v177 = (int64x2_t)vaddw_u32(v175, *(uint32x2_t *)v174.i8);
            uint64_t v178 = v177.i64[1];
            v173.i64[1] = v224.i64[1] * v216.i64[1];
            uint64_t v179 = v177.i64[0];
            v177.i64[0] = v228.i64[0] * v216.i64[0];
            v231.val[1].i64[1] = v226.i64[1] * v216.i64[1];
            v172.i64[1] = v227.i64[1] * v216.i64[1];
            v231.val[0] = (int8x16_t)vaddw_high_u32((uint64x2_t)v231.val[0], (uint32x4_t)v174);
            v174.i64[0] = v148 * v215.i64[0];
            uint64_t v180 = v151 * v215.i64[1];
            int64x2_t v181 = (int64x2_t)vaddw_high_u32(v176, (uint32x4_t)v232.val[0]);
            v177.i64[1] = v228.i64[1] * v216.i64[1];
            v232.val[0].i64[0] = v152 * v215.i64[0];
            uint64_t v182 = v181.i64[1];
            uint64_t v183 = v181.i64[0];
            v174.i64[1] = v147 * v215.i64[1];
            v181.i64[0] = v156 * v215.i64[0];
            uint64_t v184 = v231.val[0].i64[1];
            v232.val[0].i64[1] = v180;
            uint64_t v185 = v231.val[0].i64[0];
            v231.val[0].i64[0] = v161 * v215.i64[0];
            v181.i64[1] = v155 * v215.i64[1];
            v235.val[1] = (int8x16_t)vaddq_s64(vaddq_s64((int64x2_t)v235.val[1], v217), v174);
            v174.i64[0] = v166 * v215.i64[0];
            v231.val[0].i64[1] = v158 * v215.i64[1];
            v174.i64[1] = v165 * v215.i64[1];
            v232.val[0] = (int8x16_t)vaddq_s64(vaddq_s64((int64x2_t)v232.val[1], v217), (int64x2_t)v232.val[0]);
            v232.val[1].i64[0] = v179 * v215.i64[0];
            v232.val[1].i64[1] = v178 * v215.i64[1];
            uint64x2_t v186 = (uint64x2_t)vaddq_s64(vaddq_s64((int64x2_t)v235.val[0], v217), v181);
            v235.val[0].i64[0] = v183 * v215.i64[0];
            v235.val[0].i64[1] = v182 * v215.i64[1];
            uint64x2_t v187 = (uint64x2_t)vaddq_s64(vaddq_s64(v173, v217), v174);
            v174.i64[0] = v185 * v215.i64[0];
            v174.i64[1] = v184 * v215.i64[1];
            uint64x2_t v188 = (uint64x2_t)vaddq_s64(vaddq_s64(v177, v217), v174);
            v237.val[0] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64((int64x2_t)v236.val[0], v217), (int64x2_t)v231.val[0]), 0x10uLL);
            v236.val[0] = (int8x16_t)vshrq_n_u64(v186, 0x10uLL);
            v236.val[1] = (int8x16_t)vshrq_n_u64((uint64x2_t)v232.val[0], 0x10uLL);
            uint64x2_t v189 = vshrq_n_u64((uint64x2_t)v235.val[1], 0x10uLL);
            v186.i64[0] = vqtbl4q_s8(*(int8x16x4_t *)v236.val[0].i8, (int8x16_t)xmmword_10040A870).u64[0];
            v236.val[0] = (int8x16_t)vshrq_n_u64(v188, 0x10uLL);
            v235.val[1] = (int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64(v172, v217), (int64x2_t)v235.val[0]), 0x10uLL);
            uint64x2_t v190 = vshrq_n_u64((uint64x2_t)vaddq_s64(vaddq_s64((int64x2_t)v231.val[1], v217), (int64x2_t)v232.val[1]), 0x10uLL);
            v235.val[0] = (int8x16_t)vshrq_n_u64(v187, 0x10uLL);
            v186.i64[1] = vqtbl4q_s8(*(int8x16x4_t *)v235.val[0].i8, (int8x16_t)xmmword_10040A870).u64[0];
            uint64x2_t *v230 = v186;
            int v37 = v230 + 1;
            uint64_t v46 = v229 - 16;
          }
          while (v229 != 16);
          int v191 = v202;
          LODWORD(v19) = v205;
          LODWORD(v18) = v206;
          uint64_t v5 = v209;
          a4 = v210;
          LODWORD(v17) = v207;
          unint64_t v6 = v208;
          uint64_t v15 = v211;
          uint64_t v21 = v204;
          if (v212 == v205) {
            goto LABEL_11;
          }
        }
        do
        {
          int v192 = result[1] + *result + *v34 + v34[1];
          int v193 = *(result - 1);
          int v194 = result[2];
          result += 2;
          int v195 = v35[1] + *v35 + *v36 + v36[1] + v193 + v194 + *(v34 - 1);
          int v196 = v34[2];
          v34 += 2;
          int v197 = v195 + v196;
          int v198 = *(v35 - 1);
          int v199 = v35[2];
          v35 += 2;
          int v200 = v199 + v198 + *(v36 - 1);
          int v201 = v36[2];
          v36 += 2;
          v24->i8[0] = ((v200 + 2 * v197 + v201) * v18 + v192 * v17 + 0x8000) >> 16;
          int64x2_t v24 = (uint64x2_t *)((char *)v24 + 1);
          --v191;
        }
        while (v191);
      }
      else
      {
        int64x2_t v24 = (uint64x2_t *)(v26 + 1);
      }
LABEL_11:
      int v25 = v34[1] + result[1];
      v24->i8[0] = ((v36[1]
                   + v35[1]
                   + *(v35 - 1)
                   + *(v36 - 1)
                   + 2 * (v25 + *v35 + v35[1] + *v36 + v36[1] + *(result - 1) + *(v34 - 1)))
                  * v18
                  + (v25 + *result + *v34) * v17
                  + 0x8000) >> 16;
      ++v15;
    }
    while (v14 < *((int *)v6 + 85));
  }
  return result;
}

unsigned int *sub_1003CAC70(unsigned int *result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v6 = result;
  int v7 = *(_DWORD *)(a2 + 36) * *(_DWORD *)(a2 + 28);
  uint64_t v8 = result[85];
  uint64_t v9 = result[12];
  if ((int)v8 >= 1 && 2 * v7 - (int)v9 >= 1)
  {
    uint64_t v11 = a3;
    do
    {
      uint64_t v12 = *v11++;
      uint64_t result = (unsigned int *)memset((void *)(v12 + v9), *(unsigned __int8 *)(v12 + v9 - 1), (2 * v7 + ~v9) + 1);
      --v8;
    }
    while (v8);
    LODWORD(v8) = v6[85];
  }
  if ((int)v8 >= 1 && v7 != 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      int v16 = *(unsigned char **)(a4 + 8 * v15);
      unint64_t v17 = (unsigned __int8 *)a3[v14];
      unint64_t v18 = *(unsigned __int8 **)((char *)a3 + ((8 * v14) | 8));
      int v19 = 1;
      int v20 = v7;
      do
      {
        uint64_t result = (unsigned int *)v18[1];
        *v16++ = (v19 + *v17 + v17[1] + *v18 + result) >> 2;
        v19 ^= 3u;
        v17 += 2;
        v18 += 2;
        --v20;
      }
      while (v20);
      v14 += 2;
      ++v15;
    }
    while (v14 < (int)v6[85]);
  }
  return result;
}

uint64_t sub_1003CAD88(uint64_t result, int *a2, void *a3, void **a4)
{
  unint64_t v6 = a3;
  uint64_t v7 = result;
  size_t v8 = (a2[9] * a2[7]);
  uint64_t v9 = *(void *)(result + 528) + a2[1];
  uint64_t v10 = *(unsigned __int8 *)(v9 + 144);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 154);
  uint64_t v12 = *(unsigned int *)(result + 340);
  uint64_t v13 = *(unsigned int *)(result + 48);
  if ((int)v12 >= 1 && (int)v8 * (int)v10 - (int)v13 >= 1)
  {
    uint64_t v15 = a3;
    do
    {
      uint64_t v16 = *v15++;
      uint64_t result = (uint64_t)memset((void *)(v16 + v13), *(unsigned __int8 *)(v16 + v13 - 1), (v8 * v10 + ~v13) + 1);
      --v12;
    }
    while (v12);
    LODWORD(v12) = *(_DWORD *)(v7 + 340);
  }
  if ((int)v12 >= 1 && v8)
  {
    uint64_t v17 = (v11 * v10);
    uint64_t v18 = v17 >> 1;
    if (!v11)
    {
      unsigned int v27 = v18 / v17;
      do
      {
        uint64_t v28 = *a4++;
        uint64_t result = (uint64_t)memset(v28, v27, v8);
      }
      while (*(int *)(v7 + 340) > 0);
      return result;
    }
    if (!v10)
    {
      int v29 = 0;
      unsigned int v30 = v18 / v17;
      do
      {
        int v31 = *a4++;
        uint64_t result = (uint64_t)memset(v31, v30, v8);
        v29 += v11;
      }
      while (v29 < *(_DWORD *)(v7 + 340));
      return result;
    }
    if (v10 < 8)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      do
      {
        unsigned int v21 = 0;
        int v22 = 0;
        int8x16_t v23 = a4[v20];
        do
        {
          uint64_t v24 = 0;
          int v25 = v6;
          uint64_t result = v11;
          do
          {
            size_t v26 = (unsigned __int8 *)(*v25 + v21);
            v24 += *v26;
            if (v10 != 1)
            {
              v24 += v26[1];
              if (v10 != 2)
              {
                v24 += v26[2];
                if (v10 != 3)
                {
                  v24 += v26[3];
                  if (v10 != 4)
                  {
                    v24 += v26[4];
                    if (v10 != 5)
                    {
                      v24 += v26[5];
                      if (v10 != 6) {
                        v24 += v26[6];
                      }
                    }
                  }
                }
              }
            }
            ++v25;
            --result;
          }
          while (result);
          *v23++ = (v24 + v18) / v17;
          ++v22;
          v21 += v10;
        }
        while (v22 != v8);
        v19 += v11;
        ++v20;
        v6 += v11;
      }
      while (v19 < *(int *)(v7 + 340));
      return result;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
LABEL_34:
    unsigned int v34 = 0;
    int v35 = 0;
    int v36 = a4[v33];
LABEL_36:
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    while (1)
    {
      uint64_t v39 = v6[v37 + v32] + v34;
      if (v10 < 0x10) {
        break;
      }
      int64x2_t v50 = 0uLL;
      int64x2_t v51 = (int64x2_t)(unint64_t)v38;
      uint64_t v52 = v10 & 0xF0;
      uint32x4_t v53 = (int8x16_t *)(v6[v37 + v32] + v34);
      int64x2_t v54 = 0uLL;
      int64x2_t v55 = 0uLL;
      int64x2_t v56 = 0uLL;
      int64x2_t v4 = 0uLL;
      int64x2_t v57 = 0uLL;
      int64x2_t v58 = 0uLL;
      do
      {
        int8x16_t v59 = *v53++;
        uint32x4_t v60 = (uint32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_1004048A0);
        uint32x4_t v61 = (uint32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_100404890);
        uint32x4_t v62 = (uint32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_1004048B0);
        uint32x4_t v63 = (uint32x4_t)vqtbl1q_s8(v59, (int8x16_t)xmmword_1004048C0);
        int64x2_t v50 = (int64x2_t)vaddw_high_u32((uint64x2_t)v50, v61);
        int64x2_t v55 = (int64x2_t)vaddw_high_u32((uint64x2_t)v55, v60);
        int64x2_t v54 = (int64x2_t)vaddw_u32((uint64x2_t)v54, *(uint32x2_t *)v60.i8);
        int64x2_t v51 = (int64x2_t)vaddw_u32((uint64x2_t)v51, *(uint32x2_t *)v61.i8);
        int64x2_t v56 = (int64x2_t)vaddw_u32((uint64x2_t)v56, *(uint32x2_t *)v62.i8);
        int64x2_t v4 = (int64x2_t)vaddw_high_u32((uint64x2_t)v4, v62);
        int64x2_t v57 = (int64x2_t)vaddw_u32((uint64x2_t)v57, *(uint32x2_t *)v63.i8);
        int64x2_t v58 = (int64x2_t)vaddw_high_u32((uint64x2_t)v58, v63);
        v52 -= 16;
      }
      while (v52);
      uint64_t v38 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v51, v56), vaddq_s64(v54, v57)), vaddq_s64(vaddq_s64(v50, v4), vaddq_s64(v55, v58))));
      if ((v10 & 0xF0) == v10) {
        goto LABEL_37;
      }
      uint64_t v40 = v10 & 0xF0;
      uint64_t v49 = v40;
      if ((v10 & 8) != 0) {
        goto LABEL_40;
      }
LABEL_48:
      uint64x2_t v64 = (unsigned __int8 *)(v39 + v49);
      int v65 = v10 - v49;
      do
      {
        unsigned int v66 = *v64++;
        v38 += v66;
        --v65;
      }
      while (v65);
LABEL_37:
      if (++v37 == v11)
      {
        uint64_t result = (v38 + v18) / v17;
        *v36++ = result;
        ++v35;
        v34 += v10;
        if (v35 == v8)
        {
          v32 += v11;
          ++v33;
          if (v32 >= *(int *)(v7 + 340)) {
            return result;
          }
          goto LABEL_34;
        }
        goto LABEL_36;
      }
    }
    uint64_t v40 = 0;
LABEL_40:
    int64x2_t v41 = 0uLL;
    int64x2_t v42 = (int64x2_t)(unint64_t)v38;
    BOOL v43 = (uint64_t *)(v39 + v40);
    uint64_t v44 = v40 - (v10 & 0xF8);
    int64x2_t v45 = 0uLL;
    int64x2_t v46 = 0uLL;
    do
    {
      uint64_t v47 = *v43++;
      v4.i64[0] = v47;
      uint32x4_t v48 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_1004048A0);
      int64x2_t v4 = (int64x2_t)vqtbl1q_s8((int8x16_t)v4, (int8x16_t)xmmword_100404890);
      int64x2_t v46 = (int64x2_t)vaddw_high_u32((uint64x2_t)v46, v48);
      int64x2_t v41 = (int64x2_t)vaddw_high_u32((uint64x2_t)v41, (uint32x4_t)v4);
      int64x2_t v45 = (int64x2_t)vaddw_u32((uint64x2_t)v45, *(uint32x2_t *)v48.i8);
      int64x2_t v42 = (int64x2_t)vaddw_u32((uint64x2_t)v42, *(uint32x2_t *)v4.i8);
      v44 += 8;
    }
    while (v44);
    uint64_t v38 = vaddvq_s64(vaddq_s64(vaddq_s64(v42, v45), vaddq_s64(v41, v46)));
    uint64_t v49 = v10 & 0xF8;
    if (v49 == v10) {
      goto LABEL_37;
    }
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_1003CB168(char *a1, int a2, uint64_t a3)
{
  *((void *)a1 + 1) = 0;
  if (a2 != 90)
  {
    *(void *)(*(void *)a1 + 40) = 0x5A0000000DLL;
    *(_DWORD *)(*(void *)a1 + 48) = a2;
    (**(void (***)(char *))a1)(a1);
  }
  if (a3 != 632)
  {
    *(void *)(*(void *)a1 + 40) = 0x27800000016;
    *(_DWORD *)(*(void *)a1 + 48) = a3;
    (**(void (***)(char *))a1)(a1);
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 3);
  bzero(a1, 0x278uLL);
  *(void *)a1 = v5;
  *((void *)a1 + 3) = v6;
  a1[32] = 1;
  sub_1003E9E88(a1);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 47) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  sub_1003D5F2C((uint64_t)a1);
  uint64_t result = sub_1003D476C((uint64_t)a1);
  *((_DWORD *)a1 + 9) = 200;
  return result;
}

uint64_t sub_1003CB268(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 36);
  if ((v4 & 0xFFFFFFFE) == 0xC8)
  {
    uint64_t v5 = sub_1003CB324((uint64_t *)a1);
    if (v5 != 2) {
      return v5;
    }
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 40) = 21;
    *(_DWORD *)(v7 + 44) = v4;
    (**(void (***)(uint64_t))a1)(a1);
    uint64_t v5 = sub_1003CB324((uint64_t *)a1);
    if (v5 != 2) {
      return v5;
    }
  }
  if (a2)
  {
    uint64_t v8 = *(void *)a1;
    *(_DWORD *)(v8 + 40) = 53;
    (*(void (**)(uint64_t))v8)(a1);
  }
  sub_1003C5714(a1);
  return v5;
}

uint64_t sub_1003CB324(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 9);
  uint64_t result = 1;
  switch(v2)
  {
    case 200:
      (*(void (**)(uint64_t *))(a1[72] + 8))(a1);
      (*(void (**)(uint64_t *))(a1[5] + 16))(a1);
      *((_DWORD *)a1 + 9) = 201;
      goto LABEL_6;
    case 201:
LABEL_6:
      uint64_t result = (*(uint64_t (**)(uint64_t *))a1[72])(a1);
      if (result != 1) {
        return result;
      }
      int v5 = *((_DWORD *)a1 + 14);
      switch(v5)
      {
        case 1:
          int v12 = 1;
          break;
        case 4:
          if (*((unsigned char *)a1 + 360) && (int v14 = *((unsigned __int8 *)a1 + 361), *((unsigned char *)a1 + 361)))
          {
            if (v14 != 2)
            {
              uint64_t v15 = *a1;
              *(_DWORD *)(v15 + 40) = 116;
              *(_DWORD *)(v15 + 44) = v14;
              (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
            }
            int v12 = 4;
            int v5 = 5;
          }
          else
          {
            int v5 = 4;
            int v12 = 4;
          }
          break;
        case 3:
          uint64_t v6 = (int *)a1[36];
          int v7 = *v6;
          int v8 = v6[24];
          int v9 = v6[48];
          if (v7 != 1 || v8 != 2 || v9 != 3)
          {
            if (v7 == 1 && v8 == 34 && v9 == 35)
            {
              int v12 = 2;
              int v5 = 7;
              break;
            }
            if (v7 == 82 && v8 == 71 && v9 == 66) {
              goto LABEL_34;
            }
            if (v7 == 114 && v8 == 103 && v9 == 98)
            {
              int v12 = 2;
              int v5 = 6;
              break;
            }
            if (!*((unsigned char *)a1 + 352))
            {
              if (*((unsigned char *)a1 + 360))
              {
                int v17 = *((unsigned __int8 *)a1 + 361);
                if (!*((unsigned char *)a1 + 361))
                {
LABEL_34:
                  int v5 = 2;
                  int v12 = 2;
                  break;
                }
                if (v17 != 1)
                {
                  uint64_t v18 = *a1;
                  *(_DWORD *)(v18 + 40) = 116;
                  *(_DWORD *)(v18 + 44) = v17;
                  (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
                }
              }
              else
              {
                uint64_t v19 = *a1;
                *(_DWORD *)(v19 + 48) = v8;
                *(_DWORD *)(v19 + 52) = v9;
                *(_DWORD *)(v19 + 40) = 113;
                *(_DWORD *)(v19 + 44) = v7;
                (*(void (**)(uint64_t *, uint64_t))(v19 + 8))(a1, 1);
              }
            }
          }
          int v12 = 2;
          int v5 = 3;
          break;
        default:
          int v5 = 0;
          int v12 = 0;
          break;
      }
      *((_DWORD *)a1 + 15) = v5;
      *((_DWORD *)a1 + 16) = v12;
      int v16 = *((_DWORD *)a1 + 131);
      *((_DWORD *)a1 + 17) = v16;
      *((_DWORD *)a1 + 18) = v16;
      a1[10] = 0x3FF0000000000000;
      *((_WORD *)a1 + 44) = 0;
      *((_DWORD *)a1 + 23) = 0;
      *((_WORD *)a1 + 48) = 257;
      *((unsigned char *)a1 + 98) = 0;
      *((_DWORD *)a1 + 25) = 2;
      uint64_t result = 1;
      *((unsigned char *)a1 + 104) = 1;
      *((_DWORD *)a1 + 27) = 256;
      a1[18] = 0;
      *((_WORD *)a1 + 56) = 0;
      *((unsigned char *)a1 + 114) = 0;
      *((_DWORD *)a1 + 9) = 202;
      return result;
    case 202:
      return result;
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
      int v4 = *(uint64_t (**)(uint64_t *))a1[72];
      return v4(a1);
    default:
      uint64_t v13 = *a1;
      *(_DWORD *)(v13 + 40) = 21;
      *(_DWORD *)(v13 + 44) = v2;
      (*(void (**)(uint64_t *))*a1)(a1);
      return 0;
  }
}

uint64_t sub_1003CB608(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if ((v2 - 205) > 1 || *(unsigned char *)(a1 + 88))
  {
    if (v2 == 210) {
      goto LABEL_10;
    }
    if (v2 != 207)
    {
      uint64_t v3 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v3 + 10) = 21;
      *((_DWORD *)v3 + 11) = v2;
      (**(void (***)(uint64_t))a1)(a1);
      goto LABEL_10;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 152) < *(_DWORD *)(a1 + 120))
    {
      int v4 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v4 + 10) = 69;
      (*v4)(a1);
    }
    (*(void (**)(uint64_t))(*(void *)(a1 + 544) + 8))(a1);
  }
  *(_DWORD *)(a1 + 36) = 210;
LABEL_10:
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 576);
    if (*(unsigned char *)(v5 + 33)) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))v5)(a1);
    if (!result) {
      return result;
    }
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 48))(a1);
  sub_1003C5714(a1);
  return 1;
}

uint64_t sub_1003CB6F4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2 == 204) {
    goto LABEL_23;
  }
  if (v2 == 203) {
    goto LABEL_9;
  }
  if (v2 != 202)
  {
    int v4 = *(void (***)(void))a1;
    *((_DWORD *)v4 + 10) = 21;
    *((_DWORD *)v4 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
    if (*(_DWORD *)(a1 + 36) != 204)
    {
LABEL_22:
      (**(void (***)(uint64_t))(a1 + 544))(a1);
      *(_DWORD *)(a1 + 152) = 0;
      *(_DWORD *)(a1 + 36) = 204;
    }
LABEL_23:
    if (*(unsigned char *)(*(void *)(a1 + 544) + 16))
    {
      unint64_t v9 = *(unsigned int *)(a1 + 152);
      do
      {
        while (1)
        {
          unint64_t v10 = *(unsigned int *)(a1 + 120);
          if (v9 < v10) {
            break;
          }
          (*(void (**)(uint64_t))(*(void *)(a1 + 544) + 8))(a1);
          (**(void (***)(uint64_t))(a1 + 544))(a1);
          unint64_t v9 = 0;
          *(_DWORD *)(a1 + 152) = 0;
          if (!*(unsigned char *)(*(void *)(a1 + 544) + 16)) {
            goto LABEL_33;
          }
        }
        uint64_t v11 = *(void *)(a1 + 16);
        if (v11)
        {
          *(void *)(v11 + 8) = v9;
          *(void *)(v11 + 16) = v10;
          (*(void (**)(uint64_t))v11)(a1);
          unint64_t v9 = *(unsigned int *)(a1 + 152);
        }
        (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)(a1 + 552) + 8))(a1, 0, a1 + 152, 0);
        BOOL v6 = *(unsigned int *)(a1 + 152) == v9;
        unint64_t v9 = *(unsigned int *)(a1 + 152);
      }
      while (!v6);
      return 0;
    }
    else
    {
LABEL_33:
      if (*(unsigned char *)(a1 + 89)) {
        int v12 = 206;
      }
      else {
        int v12 = 205;
      }
      *(_DWORD *)(a1 + 36) = v12;
      return 1;
    }
  }
  sub_1003D91AC(a1);
  if (*(unsigned char *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 36) = 207;
    return 1;
  }
  *(_DWORD *)(a1 + 36) = 203;
LABEL_9:
  if (!*(unsigned char *)(*(void *)(a1 + 576) + 32))
  {
LABEL_21:
    *(_DWORD *)(a1 + 164) = *(_DWORD *)(a1 + 156);
    if (*(_DWORD *)(a1 + 36) == 204) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (1)
  {
    if (v5) {
      (*(void (**)(uint64_t))v5)(a1);
    }
    uint64_t result = (**(uint64_t (***)(uint64_t))(a1 + 576))(a1);
    if (!result) {
      return result;
    }
    if (result == 2) {
      goto LABEL_21;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    BOOL v6 = (result & 0xFFFFFFFD) != 1 || v5 == 0;
    if (!v6)
    {
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 8) + 1;
      *(void *)(v5 + 8) = v8;
      if (v8 >= v7) {
        *(void *)(v5 + 16) = v7 + *(unsigned int *)(a1 + 400);
      }
    }
  }
}

uint64_t sub_1003CB908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 36);
  if (v6 != 205)
  {
    uint64_t v7 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v7 + 10) = 21;
    *((_DWORD *)v7 + 11) = v6;
    (**(void (***)(uint64_t))a1)(a1);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 152);
  uint64_t v9 = *(unsigned int *)(a1 + 120);
  if (v8 >= v9)
  {
    int v12 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v12 + 10) = 126;
    ((void (*)(uint64_t, uint64_t))v12[1])(a1, 0xFFFFFFFFLL);
    return 0;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      *(void *)(v10 + 8) = v8;
      *(void *)(v10 + 16) = v9;
      (*(void (**)(uint64_t))v10)(a1);
    }
    unsigned int v13 = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(void *)(a1 + 552) + 8))(a1, a2, &v13, a3);
    uint64_t result = v13;
    *(_DWORD *)(a1 + 152) += v13;
  }
  return result;
}

uint64_t sub_1003CB9F4(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 592) = result;
  *(void *)uint64_t result = sub_1003CBAE4;
  *(void *)(result + 16) = nullsub_103;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(unsigned char *)(result + 336) = 113;
  if (*(unsigned char *)(a1 + 297))
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, (uint64_t)*(int *)(a1 + 56) << 8);
    *(void *)(a1 + 176) = result;
    if (*(int *)(a1 + 56) >= 1)
    {
      int v3 = 0;
      *(void *)&long long v4 = -1;
      *((void *)&v4 + 1) = -1;
      do
      {
        *(_OWORD *)(result + 224) = v4;
        *(_OWORD *)(result + 240) = v4;
        *(_OWORD *)(result + 192) = v4;
        *(_OWORD *)(result + 208) = v4;
        *(_OWORD *)(result + 160) = v4;
        *(_OWORD *)(result + 176) = v4;
        *(_OWORD *)(result + 128) = v4;
        *(_OWORD *)(result + 144) = v4;
        *(_OWORD *)(result + 96) = v4;
        *(_OWORD *)(result + 112) = v4;
        *(_OWORD *)(result + 64) = v4;
        *(_OWORD *)(result + 80) = v4;
        *(_OWORD *)(result + 32) = v4;
        *(_OWORD *)(result + 48) = v4;
        *(_OWORD *)uint64_t result = v4;
        *(_OWORD *)(result + 16) = v4;
        result += 256;
        ++v3;
      }
      while (v3 < *(_DWORD *)(a1 + 56));
    }
  }
  return result;
}

uint64_t sub_1003CBAE4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 592);
  int v3 = *(_DWORD *)(result + 508);
  if (!*(unsigned char *)(result + 297))
  {
    if (v3
      || *(_DWORD *)(result + 516)
      || *(_DWORD *)(result + 520)
      || (int v32 = *(_DWORD *)(result + 512), v32 <= 63) && v32 != *(_DWORD *)(result + 536))
    {
      uint64_t v5 = *(void *)result;
      *(_DWORD *)(v5 + 40) = 125;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(result, 0xFFFFFFFFLL);
    }
    *(void *)(v2 + 8) = sub_1003CC8EC;
    if (*(int *)(v1 + 416) >= 1) {
      goto LABEL_41;
    }
    goto LABEL_59;
  }
  int v4 = *(_DWORD *)(result + 512);
  if (v3)
  {
    if (v4 < v3 || v4 > *(_DWORD *)(result + 536) || *(_DWORD *)(result + 416) != 1) {
      goto LABEL_17;
    }
  }
  else if (v4)
  {
    goto LABEL_17;
  }
  int v6 = *(_DWORD *)(result + 516);
  if (!v6)
  {
    if (*(int *)(result + 520) < 14) {
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = *(void *)result;
    *(_DWORD *)(v8 + 40) = 17;
    *(_DWORD *)(v8 + 44) = v3;
    *(_DWORD *)(*(void *)result + 48) = *(_DWORD *)(result + 512);
    *(_DWORD *)(*(void *)result + 52) = *(_DWORD *)(result + 516);
    *(_DWORD *)(*(void *)result + 56) = *(_DWORD *)(result + 520);
    uint64_t result = (**(uint64_t (***)(uint64_t))result)(result);
    goto LABEL_18;
  }
  int v7 = v6 - 1;
  if (v7 != *(_DWORD *)(result + 520) || v7 >= 14) {
    goto LABEL_17;
  }
LABEL_18:
  LODWORD(v9) = *(_DWORD *)(v1 + 416);
  if ((int)v9 >= 1)
  {
    for (uint64_t i = 0; i < v9; ++i)
    {
      uint64_t v11 = *(int *)(*(void *)(v1 + 8 * i + 424) + 4);
      int v12 = (_DWORD *)(*(void *)(v1 + 176) + (v11 << 8));
      int v13 = *(_DWORD *)(v1 + 508);
      if (v13 && (*v12 & 0x80000000) != 0)
      {
        uint64_t v17 = *(void *)v1;
        *(_DWORD *)(v17 + 40) = 118;
        *(_DWORD *)(v17 + 44) = v11;
        *(_DWORD *)(*(void *)v1 + 48) = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 8))(v1, 0xFFFFFFFFLL);
        int v13 = *(_DWORD *)(v1 + 508);
        if (v13 <= *(_DWORD *)(v1 + 512))
        {
LABEL_24:
          uint64_t v14 = v13;
          do
          {
            if (*(_DWORD *)(v1 + 516) != (v12[v14] & ~((int)v12[v14] >> 31)))
            {
              uint64_t v16 = *(void *)v1;
              *(_DWORD *)(v16 + 40) = 118;
              *(_DWORD *)(v16 + 44) = v11;
              *(_DWORD *)(*(void *)v1 + 48) = v14;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 8))(v1, 0xFFFFFFFFLL);
            }
            v12[v14] = *(_DWORD *)(v1 + 520);
          }
          while (v14++ < *(int *)(v1 + 512));
        }
      }
      else if (v13 <= *(_DWORD *)(v1 + 512))
      {
        goto LABEL_24;
      }
      uint64_t v9 = *(int *)(v1 + 416);
    }
  }
  int v18 = *(_DWORD *)(v1 + 508);
  if (*(_DWORD *)(v1 + 516))
  {
    if (v18)
    {
      *(void *)(v2 + 8) = sub_1003CC718;
      if ((int)v9 < 1) {
        goto LABEL_59;
      }
    }
    else
    {
      *(void *)(v2 + 8) = sub_1003CC660;
      if ((int)v9 < 1) {
        goto LABEL_59;
      }
    }
    goto LABEL_41;
  }
  if (v18)
  {
    *(void *)(v2 + 8) = sub_1003CC2DC;
    if ((int)v9 < 1) {
      goto LABEL_59;
    }
    goto LABEL_41;
  }
  *(void *)(v2 + 8) = sub_1003CBEFC;
  if ((int)v9 >= 1)
  {
LABEL_41:
    for (uint64_t j = 0; j < *(int *)(v1 + 416); ++j)
    {
      uint64_t v23 = *(void *)(v1 + 8 * j + 424);
      if (!*(unsigned char *)(v1 + 297)) {
        goto LABEL_49;
      }
      if (*(_DWORD *)(v1 + 508)) {
        goto LABEL_57;
      }
      if (!*(_DWORD *)(v1 + 516))
      {
LABEL_49:
        unsigned int v24 = *(_DWORD *)(v23 + 20);
        if (v24 >= 0x10)
        {
          uint64_t v25 = *(void *)v1;
          *(_DWORD *)(v25 + 40) = 50;
          *(_DWORD *)(v25 + 44) = v24;
          (**(void (***)(uint64_t))v1)(v1);
        }
        uint64_t v26 = v2 + 8 * (int)v24;
        uint64_t v28 = *(void *)(v26 + 80);
        unsigned int v27 = (uint64_t *)(v26 + 80);
        uint64_t result = v28;
        if (!v28)
        {
          uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 64);
          *unsigned int v27 = result;
        }
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)uint64_t result = 0u;
        *(_OWORD *)(result + 16) = 0u;
        uint64_t v29 = v2 + 4 * j;
        *(_DWORD *)(v29 + 44) = 0;
        *(_DWORD *)(v29 + 60) = 0;
        if (*(unsigned char *)(v1 + 297))
        {
          if (*(_DWORD *)(v1 + 508)) {
            goto LABEL_57;
          }
        }
        else if (*(_DWORD *)(v1 + 536))
        {
LABEL_57:
          unsigned int v30 = *(_DWORD *)(v23 + 24);
          if (v30 >= 0x10)
          {
            uint64_t v31 = *(void *)v1;
            *(_DWORD *)(v31 + 40) = 50;
            *(_DWORD *)(v31 + 44) = v30;
            (**(void (***)(uint64_t))v1)(v1);
          }
          uint64_t v20 = v2 + 8 * (int)v30;
          uint64_t v22 = *(void *)(v20 + 208);
          unsigned int v21 = (uint64_t *)(v20 + 208);
          uint64_t result = v22;
          if (!v22)
          {
            uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 256);
            uint64_t *v21 = result;
          }
          *(_OWORD *)(result + 224) = 0u;
          *(_OWORD *)(result + 240) = 0u;
          *(_OWORD *)(result + 192) = 0u;
          *(_OWORD *)(result + 208) = 0u;
          *(_OWORD *)(result + 160) = 0u;
          *(_OWORD *)(result + 176) = 0u;
          *(_OWORD *)(result + 128) = 0u;
          *(_OWORD *)(result + 144) = 0u;
          *(_OWORD *)(result + 96) = 0u;
          *(_OWORD *)(result + 112) = 0u;
          *(_OWORD *)(result + 64) = 0u;
          *(_OWORD *)(result + 80) = 0u;
          *(_OWORD *)(result + 32) = 0u;
          *(_OWORD *)(result + 48) = 0u;
          *(_OWORD *)uint64_t result = 0u;
          *(_OWORD *)(result + 16) = 0u;
        }
      }
    }
  }
LABEL_59:
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = -16;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(v1 + 348);
  return result;
}

uint64_t sub_1003CBEFC(int *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 74);
  if (a1[87])
  {
    int v4 = *(_DWORD *)(v3 + 76);
    if (!v4)
    {
      sub_1003CCFF0(a1);
      int v4 = *(_DWORD *)(v3 + 76);
    }
    *(_DWORD *)(v3 + 76) = v4 - 1;
  }
  if (*(_DWORD *)(v3 + 40) != -1 && a1[116] >= 1)
  {
    uint64_t v5 = 0;
    while (1)
    {
      int v7 = *(_WORD **)(a2 + 8 * v5);
      uint64_t v8 = a1[v5 + 117];
      uint64_t v9 = *(int *)(*(void *)&a1[2 * v8 + 106] + 20);
      uint64_t v10 = v3 + 8 * v9;
      uint64_t v13 = *(void *)(v10 + 80);
      int v12 = (void *)(v10 + 80);
      uint64_t v11 = v13;
      uint64_t v14 = v3 + 4 * v8;
      uint64_t v16 = *(int *)(v14 + 60);
      uint64_t v15 = (int *)(v14 + 60);
      uint64_t v17 = v11 + v16;
      if (sub_1003CD110((uint64_t *)a1, (unsigned char *)(v11 + v16))) {
        break;
      }
      *uint64_t v15 = 0;
      int v6 = *(_DWORD *)(v3 + 4 * v8 + 44);
LABEL_9:
      *int v7 = v6 << a1[130];
      if (++v5 >= a1[116]) {
        return 1;
      }
    }
    unsigned int v18 = sub_1003CD110((uint64_t *)a1, (unsigned char *)(v17 + 1));
    uint64_t v19 = (unsigned char *)(v17 + v18 + 2);
    if (sub_1003CD110((uint64_t *)a1, v19))
    {
      uint64_t v20 = (unsigned char *)*v12;
      uint64_t v19 = v20 + 20;
      if (sub_1003CD110((uint64_t *)a1, v20 + 20))
      {
        uint64_t v19 = v20 + 21;
        if (sub_1003CD110((uint64_t *)a1, v20 + 21))
        {
          uint64_t v19 = v20 + 22;
          if (sub_1003CD110((uint64_t *)a1, v20 + 22))
          {
            uint64_t v19 = v20 + 23;
            if (sub_1003CD110((uint64_t *)a1, v20 + 23))
            {
              uint64_t v19 = v20 + 24;
              if (sub_1003CD110((uint64_t *)a1, v20 + 24))
              {
                uint64_t v19 = v20 + 25;
                if (sub_1003CD110((uint64_t *)a1, v20 + 25))
                {
                  uint64_t v19 = v20 + 26;
                  if (sub_1003CD110((uint64_t *)a1, v20 + 26))
                  {
                    uint64_t v19 = v20 + 27;
                    if (sub_1003CD110((uint64_t *)a1, v20 + 27))
                    {
                      uint64_t v19 = v20 + 28;
                      if (sub_1003CD110((uint64_t *)a1, v20 + 28))
                      {
                        uint64_t v19 = v20 + 29;
                        if (sub_1003CD110((uint64_t *)a1, v20 + 29))
                        {
                          uint64_t v19 = v20 + 30;
                          if (sub_1003CD110((uint64_t *)a1, v20 + 30))
                          {
                            uint64_t v19 = v20 + 31;
                            if (sub_1003CD110((uint64_t *)a1, v20 + 31))
                            {
                              uint64_t v19 = v20 + 32;
                              if (sub_1003CD110((uint64_t *)a1, v20 + 32))
                              {
                                uint64_t v19 = v20 + 33;
                                if (sub_1003CD110((uint64_t *)a1, v20 + 33))
                                {
                                  uint64_t v19 = v20 + 34;
                                  if (sub_1003CD110((uint64_t *)a1, v20 + 34))
                                  {
                                    uint64_t v30 = *(void *)a1;
                                    *(_DWORD *)(v30 + 40) = 117;
                                    (*(void (**)(int *, uint64_t))(v30 + 8))(a1, 0xFFFFFFFFLL);
                                    *(_DWORD *)(v3 + 40) = -1;
                                    return 1;
                                  }
                                  char v21 = 0;
                                  unsigned int v22 = 0x4000;
                                }
                                else
                                {
                                  char v21 = 0;
                                  unsigned int v22 = 0x2000;
                                }
                              }
                              else
                              {
                                char v21 = 0;
                                unsigned int v22 = 4096;
                              }
                            }
                            else
                            {
                              char v21 = 0;
                              unsigned int v22 = 2048;
                            }
                          }
                          else
                          {
                            char v21 = 0;
                            unsigned int v22 = 1024;
                          }
                        }
                        else
                        {
                          char v21 = 0;
                          unsigned int v22 = 512;
                        }
                      }
                      else
                      {
                        char v21 = 0;
                        unsigned int v22 = 256;
                      }
                    }
                    else
                    {
                      char v21 = 0;
                      unsigned int v22 = 128;
                    }
                  }
                  else
                  {
                    char v21 = 0;
                    unsigned int v22 = 64;
                  }
                }
                else
                {
                  char v21 = 0;
                  unsigned int v22 = 32;
                }
              }
              else
              {
                char v21 = 0;
                unsigned int v22 = 16;
              }
            }
            else
            {
              char v21 = 0;
              unsigned int v22 = 8;
            }
          }
          else
          {
            char v21 = 0;
            unsigned int v22 = 4;
          }
        }
        else
        {
          char v21 = 0;
          unsigned int v22 = 2;
        }
      }
      else
      {
        char v21 = 1;
        unsigned int v22 = 1;
      }
    }
    else
    {
      unsigned int v22 = 0;
      char v21 = 1;
    }
    if ((int)v22 >= (int)((unint64_t)(1 << *((unsigned char *)a1 + v9 + 299)) >> 1))
    {
      int v27 = 4 * v18 + 4;
      if ((int)v22 > (int)((unint64_t)(1 << *((unsigned char *)a1 + v9 + 315)) >> 1)) {
        int v27 = 4 * v18 + 12;
      }
      *uint64_t v15 = v27;
      if ((v21 & 1) == 0) {
        goto LABEL_45;
      }
    }
    else
    {
      *uint64_t v15 = 0;
      if ((v21 & 1) == 0)
      {
LABEL_45:
        uint64_t v23 = v19 + 14;
        unsigned int v24 = v22;
        do
        {
          if (sub_1003CD110((uint64_t *)a1, v23)) {
            unsigned int v25 = v22 >> 1;
          }
          else {
            unsigned int v25 = 0;
          }
          v24 |= v25;
          BOOL v26 = v22 > 3;
          v22 >>= 1;
        }
        while (v26);
        goto LABEL_55;
      }
    }
    unsigned int v24 = v22;
LABEL_55:
    int v28 = ~v24;
    if (!v18) {
      int v28 = v24 + 1;
    }
    uint64_t v29 = v3 + 4 * v8;
    int v6 = *(_DWORD *)(v29 + 44) + v28;
    *(_DWORD *)(v29 + 44) = v6;
    goto LABEL_9;
  }
  return 1;
}

uint64_t sub_1003CC2DC(int *a1, uint64_t *a2)
{
  uint64_t v4 = *((void *)a1 + 74);
  if (a1[87])
  {
    int v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      sub_1003CCFF0(a1);
      int v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    uint64_t v6 = *((void *)a1 + 66);
    uint64_t v7 = *a2;
    uint64_t v8 = *(int *)(*((void *)a1 + 53) + 24);
    int v9 = a1[127] - 1;
    uint64_t v10 = (uint64_t *)(v4 + 8 * v8 + 208);
    uint64_t v30 = v6;
    int v28 = (unsigned __int8 *)a1 + v8 + 331;
    do
    {
      uint64_t v11 = (unsigned char *)(*v10 + 3 * v9);
      if (sub_1003CD110((uint64_t *)a1, v11)) {
        return 1;
      }
      int v12 = v11 + 2;
      uint64_t v13 = (int *)(v6 + 4 * (v9 + 1));
      while (1)
      {
        int v14 = v9 + 1;
        if (sub_1003CD110((uint64_t *)a1, v12 - 1)) {
          break;
        }
        v12 += 3;
        ++v13;
        ++v9;
        if (v14 >= a1[128]) {
          goto LABEL_56;
        }
      }
      int v15 = sub_1003CD110((uint64_t *)a1, (unsigned char *)(v4 + 336));
      uint64_t v29 = v7;
      if (sub_1003CD110((uint64_t *)a1, v12))
      {
        if (sub_1003CD110((uint64_t *)a1, v12))
        {
          uint64_t v16 = *v10;
          uint64_t v17 = 217;
          if (v9 < *v28) {
            uint64_t v17 = 189;
          }
          unsigned int v18 = (unsigned char *)(v16 + v17);
          if (sub_1003CD110((uint64_t *)a1, (unsigned char *)(v16 + v17)))
          {
            uint64_t v19 = v18 + 1;
            if (sub_1003CD110((uint64_t *)a1, v18 + 1))
            {
              uint64_t v19 = v18 + 2;
              if (sub_1003CD110((uint64_t *)a1, v18 + 2))
              {
                uint64_t v19 = v18 + 3;
                if (sub_1003CD110((uint64_t *)a1, v18 + 3))
                {
                  uint64_t v19 = v18 + 4;
                  if (sub_1003CD110((uint64_t *)a1, v18 + 4))
                  {
                    uint64_t v19 = v18 + 5;
                    if (sub_1003CD110((uint64_t *)a1, v18 + 5))
                    {
                      uint64_t v19 = v18 + 6;
                      if (sub_1003CD110((uint64_t *)a1, v18 + 6))
                      {
                        uint64_t v19 = v18 + 7;
                        if (sub_1003CD110((uint64_t *)a1, v18 + 7))
                        {
                          uint64_t v19 = v18 + 8;
                          if (sub_1003CD110((uint64_t *)a1, v18 + 8))
                          {
                            uint64_t v19 = v18 + 9;
                            if (sub_1003CD110((uint64_t *)a1, v18 + 9))
                            {
                              uint64_t v19 = v18 + 10;
                              if (sub_1003CD110((uint64_t *)a1, v18 + 10))
                              {
                                uint64_t v19 = v18 + 11;
                                if (sub_1003CD110((uint64_t *)a1, v18 + 11))
                                {
                                  uint64_t v19 = v18 + 12;
                                  if (sub_1003CD110((uint64_t *)a1, v18 + 12))
                                  {
                                    v18 += 13;
                                    if (sub_1003CD110((uint64_t *)a1, v18))
                                    {
LABEL_56:
                                      uint64_t v26 = *(void *)a1;
                                      *(_DWORD *)(v26 + 40) = 117;
                                      (*(void (**)(int *, uint64_t))(v26 + 8))(a1, 0xFFFFFFFFLL);
                                      *(_DWORD *)(v4 + 40) = -1;
                                      return 1;
                                    }
                                    unsigned int v20 = 0x4000;
                                    goto LABEL_47;
                                  }
                                  unsigned int v20 = 0x2000;
                                }
                                else
                                {
                                  unsigned int v20 = 4096;
                                }
                              }
                              else
                              {
                                unsigned int v20 = 2048;
                              }
                            }
                            else
                            {
                              unsigned int v20 = 1024;
                            }
                          }
                          else
                          {
                            unsigned int v20 = 512;
                          }
                        }
                        else
                        {
                          unsigned int v20 = 256;
                        }
                      }
                      else
                      {
                        unsigned int v20 = 128;
                      }
                    }
                    else
                    {
                      unsigned int v20 = 64;
                    }
                  }
                  else
                  {
                    unsigned int v20 = 32;
                  }
                }
                else
                {
                  unsigned int v20 = 16;
                }
              }
              else
              {
                unsigned int v20 = 8;
              }
            }
            else
            {
              unsigned int v20 = 4;
            }
            unsigned int v18 = v19;
          }
          else
          {
            unsigned int v20 = 2;
          }
LABEL_47:
          unsigned int v22 = v18 + 14;
          int v21 = v20;
          do
          {
            if (sub_1003CD110((uint64_t *)a1, v22)) {
              unsigned int v23 = v20 >> 1;
            }
            else {
              unsigned int v23 = 0;
            }
            v21 |= v23;
            BOOL v24 = v20 > 3;
            v20 >>= 1;
          }
          while (v24);
          goto LABEL_52;
        }
        int v21 = 1;
      }
      else
      {
        int v21 = 0;
      }
LABEL_52:
      int v25 = ~v21;
      if (!v15) {
        int v25 = v21 + 1;
      }
      uint64_t v7 = v29;
      uint64_t v6 = v30;
      *(_WORD *)(v29 + 2 * *v13) = v25 << a1[130];
      ++v9;
    }
    while (v14 < a1[128]);
  }
  return 1;
}

uint64_t sub_1003CC660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348))
  {
    int v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      sub_1003CCFF0((int *)a1);
      int v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(int *)(a1 + 464) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (unsigned char *)(v4 + 336);
    int v8 = 1 << *(_DWORD *)(a1 + 520);
    do
    {
      if (sub_1003CD110((uint64_t *)a1, v7)) {
        **(_WORD **)(a2 + 8 * v6) |= v8;
      }
      ++v6;
    }
    while (v6 < *(int *)(a1 + 464));
  }
  return 1;
}

uint64_t sub_1003CC718(int *a1, uint64_t *a2)
{
  uint64_t v4 = *((void *)a1 + 74);
  if (a1[87])
  {
    int v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      sub_1003CCFF0(a1);
      int v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    uint64_t v6 = *((void *)a1 + 66);
    uint64_t v7 = *a2;
    char v8 = a1[130];
    int v24 = 1 << v8;
    int v23 = -1 << v8;
    uint64_t v9 = a1[128];
    do
    {
      if (*(_WORD *)(v7 + 2 * *(int *)(v6 + 4 * v9))) {
        break;
      }
      --v9;
    }
    while (v9);
    int v10 = a1[127] - 1;
    uint64_t v11 = (void *)(v4 + 8 * *(int *)(*((void *)a1 + 53) + 24) + 208);
    uint64_t v12 = v6 + 4;
    do
    {
      uint64_t v13 = *v11 + 3 * v10;
      if (v10 >= (int)v9 && sub_1003CD110((uint64_t *)a1, (unsigned char *)(*v11 + 3 * v10))) {
        break;
      }
      uint64_t v14 = v10++;
      for (uint64_t i = (unsigned char *)(v13 + 2); ; i += 3)
      {
        uint64_t v16 = *(int *)(v12 + 4 * v14);
        if (*(_WORD *)(v7 + 2 * v16)) {
          break;
        }
        if (sub_1003CD110((uint64_t *)a1, i - 1))
        {
          uint64_t v17 = (__int16 *)(v7 + 2 * v16);
          int v20 = sub_1003CD110((uint64_t *)a1, (unsigned char *)(v4 + 336));
          __int16 v19 = v24;
          if (v20) {
            __int16 v19 = v23;
          }
          goto LABEL_23;
        }
        ++v14;
        ++v10;
        if (v14 >= a1[128])
        {
          uint64_t v21 = *(void *)a1;
          *(_DWORD *)(v21 + 40) = 117;
          (*(void (**)(int *, uint64_t))(v21 + 8))(a1, 0xFFFFFFFFLL);
          *(_DWORD *)(v4 + 40) = -1;
          return 1;
        }
      }
      if (!sub_1003CD110((uint64_t *)a1, i)) {
        continue;
      }
      uint64_t v17 = (__int16 *)(v7 + 2 * v16);
      int v18 = *v17;
      __int16 v19 = v18 < 0 ? v18 + v23 : v18 + v24;
LABEL_23:
      *uint64_t v17 = v19;
    }
    while (a1[128] > v10);
  }
  return 1;
}

uint64_t sub_1003CC8EC(int *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 74);
  if (a1[87])
  {
    int v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      sub_1003CCFF0(a1);
      int v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1 && a1[116] >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v54 = *((void *)a1 + 66);
    uint64_t v52 = a2;
    do
    {
      int64x2_t v55 = *(_WORD **)(a2 + 8 * v6);
      uint64_t v7 = a1[v6 + 117];
      uint64_t v8 = *(void *)&a1[2 * v7 + 106];
      uint64_t v9 = *(int *)(v8 + 20);
      uint64_t v10 = v4 + 8 * v9;
      uint64_t v13 = *(void *)(v10 + 80);
      uint64_t v12 = (void *)(v10 + 80);
      uint64_t v11 = v13;
      uint64_t v14 = v4 + 4 * v7;
      uint64_t v16 = *(int *)(v14 + 60);
      int v15 = (int *)(v14 + 60);
      uint64_t v17 = v11 + v16;
      if (!sub_1003CD110((uint64_t *)a1, (unsigned char *)(v11 + v16)))
      {
        *int v15 = 0;
        _WORD *v55 = *(_DWORD *)(v4 + 4 * v7 + 44);
        if (a1[134]) {
          goto LABEL_58;
        }
        goto LABEL_107;
      }
      unsigned int v18 = sub_1003CD110((uint64_t *)a1, (unsigned char *)(v17 + 1));
      __int16 v19 = (unsigned char *)(v17 + v18 + 2);
      if (sub_1003CD110((uint64_t *)a1, v19))
      {
        int v20 = (unsigned char *)*v12;
        __int16 v19 = v20 + 20;
        if (sub_1003CD110((uint64_t *)a1, v20 + 20))
        {
          __int16 v19 = v20 + 21;
          if (sub_1003CD110((uint64_t *)a1, v20 + 21))
          {
            __int16 v19 = v20 + 22;
            if (sub_1003CD110((uint64_t *)a1, v20 + 22))
            {
              __int16 v19 = v20 + 23;
              if (sub_1003CD110((uint64_t *)a1, v20 + 23))
              {
                __int16 v19 = v20 + 24;
                if (sub_1003CD110((uint64_t *)a1, v20 + 24))
                {
                  __int16 v19 = v20 + 25;
                  if (sub_1003CD110((uint64_t *)a1, v20 + 25))
                  {
                    __int16 v19 = v20 + 26;
                    if (sub_1003CD110((uint64_t *)a1, v20 + 26))
                    {
                      __int16 v19 = v20 + 27;
                      if (sub_1003CD110((uint64_t *)a1, v20 + 27))
                      {
                        __int16 v19 = v20 + 28;
                        if (sub_1003CD110((uint64_t *)a1, v20 + 28))
                        {
                          __int16 v19 = v20 + 29;
                          if (sub_1003CD110((uint64_t *)a1, v20 + 29))
                          {
                            __int16 v19 = v20 + 30;
                            if (sub_1003CD110((uint64_t *)a1, v20 + 30))
                            {
                              __int16 v19 = v20 + 31;
                              if (sub_1003CD110((uint64_t *)a1, v20 + 31))
                              {
                                __int16 v19 = v20 + 32;
                                if (sub_1003CD110((uint64_t *)a1, v20 + 32))
                                {
                                  __int16 v19 = v20 + 33;
                                  if (sub_1003CD110((uint64_t *)a1, v20 + 33))
                                  {
                                    __int16 v19 = v20 + 34;
                                    if (sub_1003CD110((uint64_t *)a1, v20 + 34))
                                    {
LABEL_109:
                                      uint64_t v49 = *(void *)a1;
                                      *(_DWORD *)(v49 + 40) = 117;
                                      (*(void (**)(int *, uint64_t))(v49 + 8))(a1, 0xFFFFFFFFLL);
                                      *(_DWORD *)(v4 + 40) = -1;
                                      return 1;
                                    }
                                    char v21 = 0;
                                    unsigned int v22 = 0x4000;
                                  }
                                  else
                                  {
                                    char v21 = 0;
                                    unsigned int v22 = 0x2000;
                                  }
                                }
                                else
                                {
                                  char v21 = 0;
                                  unsigned int v22 = 4096;
                                }
                              }
                              else
                              {
                                char v21 = 0;
                                unsigned int v22 = 2048;
                              }
                            }
                            else
                            {
                              char v21 = 0;
                              unsigned int v22 = 1024;
                            }
                          }
                          else
                          {
                            char v21 = 0;
                            unsigned int v22 = 512;
                          }
                        }
                        else
                        {
                          char v21 = 0;
                          unsigned int v22 = 256;
                        }
                      }
                      else
                      {
                        char v21 = 0;
                        unsigned int v22 = 128;
                      }
                    }
                    else
                    {
                      char v21 = 0;
                      unsigned int v22 = 64;
                    }
                  }
                  else
                  {
                    char v21 = 0;
                    unsigned int v22 = 32;
                  }
                }
                else
                {
                  char v21 = 0;
                  unsigned int v22 = 16;
                }
              }
              else
              {
                char v21 = 0;
                unsigned int v22 = 8;
              }
            }
            else
            {
              char v21 = 0;
              unsigned int v22 = 4;
            }
          }
          else
          {
            char v21 = 0;
            unsigned int v22 = 2;
          }
        }
        else
        {
          char v21 = 1;
          unsigned int v22 = 1;
        }
      }
      else
      {
        unsigned int v22 = 0;
        char v21 = 1;
      }
      if ((int)v22 >= (int)((unint64_t)(1 << *((unsigned char *)a1 + v9 + 299)) >> 1))
      {
        int v27 = 4 * v18 + 4;
        if ((int)v22 > (int)((unint64_t)(1 << *((unsigned char *)a1 + v9 + 315)) >> 1)) {
          int v27 = 4 * v18 + 12;
        }
        *int v15 = v27;
        if (v21)
        {
LABEL_54:
          unsigned int v24 = v22;
          goto LABEL_55;
        }
      }
      else
      {
        *int v15 = 0;
        if (v21) {
          goto LABEL_54;
        }
      }
      int v23 = v19 + 14;
      unsigned int v24 = v22;
      do
      {
        if (sub_1003CD110((uint64_t *)a1, v23)) {
          unsigned int v25 = v22 >> 1;
        }
        else {
          unsigned int v25 = 0;
        }
        v24 |= v25;
        BOOL v26 = v22 > 3;
        v22 >>= 1;
      }
      while (v26);
LABEL_55:
      int v28 = ~v24;
      if (!v18) {
        int v28 = v24 + 1;
      }
      uint64_t v29 = v4 + 4 * v7;
      int v30 = *(_DWORD *)(v29 + 44) + v28;
      *(_DWORD *)(v29 + 44) = v30;
      _WORD *v55 = v30;
      if (a1[134])
      {
LABEL_58:
        int v31 = 0;
        uint64_t v32 = *(int *)(v8 + 24);
        uint64_t v33 = (void *)(v4 + 8 * v32 + 208);
        int64x2_t v51 = (unsigned __int8 *)a1 + v32 + 331;
        do
        {
          unsigned int v34 = (unsigned char *)(*v33 + 3 * v31);
          if (sub_1003CD110((uint64_t *)a1, v34)) {
            break;
          }
          int v35 = v34 + 2;
          int v36 = (int *)(v54 + 4 * (v31 + 1));
          while (1)
          {
            int v37 = v31 + 1;
            if (sub_1003CD110((uint64_t *)a1, v35 - 1)) {
              break;
            }
            v35 += 3;
            ++v36;
            ++v31;
            if (v37 >= a1[134]) {
              goto LABEL_109;
            }
          }
          int v38 = sub_1003CD110((uint64_t *)a1, (unsigned char *)(v4 + 336));
          uint32x4_t v53 = v33;
          if (sub_1003CD110((uint64_t *)a1, v35))
          {
            if (sub_1003CD110((uint64_t *)a1, v35))
            {
              uint64_t v39 = *v33;
              uint64_t v40 = 217;
              if (v31 < *v51) {
                uint64_t v40 = 189;
              }
              int64x2_t v41 = (unsigned char *)(v39 + v40);
              if (sub_1003CD110((uint64_t *)a1, (unsigned char *)(v39 + v40)))
              {
                int64x2_t v42 = v41 + 1;
                if (sub_1003CD110((uint64_t *)a1, v41 + 1))
                {
                  int64x2_t v42 = v41 + 2;
                  if (sub_1003CD110((uint64_t *)a1, v41 + 2))
                  {
                    int64x2_t v42 = v41 + 3;
                    if (sub_1003CD110((uint64_t *)a1, v41 + 3))
                    {
                      int64x2_t v42 = v41 + 4;
                      if (sub_1003CD110((uint64_t *)a1, v41 + 4))
                      {
                        int64x2_t v42 = v41 + 5;
                        if (sub_1003CD110((uint64_t *)a1, v41 + 5))
                        {
                          int64x2_t v42 = v41 + 6;
                          if (sub_1003CD110((uint64_t *)a1, v41 + 6))
                          {
                            int64x2_t v42 = v41 + 7;
                            if (sub_1003CD110((uint64_t *)a1, v41 + 7))
                            {
                              int64x2_t v42 = v41 + 8;
                              if (sub_1003CD110((uint64_t *)a1, v41 + 8))
                              {
                                int64x2_t v42 = v41 + 9;
                                if (sub_1003CD110((uint64_t *)a1, v41 + 9))
                                {
                                  int64x2_t v42 = v41 + 10;
                                  if (sub_1003CD110((uint64_t *)a1, v41 + 10))
                                  {
                                    int64x2_t v42 = v41 + 11;
                                    if (sub_1003CD110((uint64_t *)a1, v41 + 11))
                                    {
                                      int64x2_t v42 = v41 + 12;
                                      int v43 = v38;
                                      if (sub_1003CD110((uint64_t *)a1, v41 + 12))
                                      {
                                        v41 += 13;
                                        if (sub_1003CD110((uint64_t *)a1, v41)) {
                                          goto LABEL_109;
                                        }
                                        unsigned int v44 = 0x4000;
                                        goto LABEL_99;
                                      }
                                      unsigned int v44 = 0x2000;
                                    }
                                    else
                                    {
                                      int v43 = v38;
                                      unsigned int v44 = 4096;
                                    }
                                  }
                                  else
                                  {
                                    int v43 = v38;
                                    unsigned int v44 = 2048;
                                  }
                                }
                                else
                                {
                                  int v43 = v38;
                                  unsigned int v44 = 1024;
                                }
                              }
                              else
                              {
                                int v43 = v38;
                                unsigned int v44 = 512;
                              }
                            }
                            else
                            {
                              int v43 = v38;
                              unsigned int v44 = 256;
                            }
                          }
                          else
                          {
                            int v43 = v38;
                            unsigned int v44 = 128;
                          }
                        }
                        else
                        {
                          int v43 = v38;
                          unsigned int v44 = 64;
                        }
                      }
                      else
                      {
                        int v43 = v38;
                        unsigned int v44 = 32;
                      }
                    }
                    else
                    {
                      int v43 = v38;
                      unsigned int v44 = 16;
                    }
                  }
                  else
                  {
                    int v43 = v38;
                    unsigned int v44 = 8;
                  }
                }
                else
                {
                  int v43 = v38;
                  unsigned int v44 = 4;
                }
                int64x2_t v41 = v42;
              }
              else
              {
                int v43 = v38;
                unsigned int v44 = 2;
              }
LABEL_99:
              int64x2_t v46 = v41 + 14;
              __int16 v45 = v44;
              do
              {
                if (sub_1003CD110((uint64_t *)a1, v46)) {
                  unsigned int v47 = v44 >> 1;
                }
                else {
                  LOWORD(v47) = 0;
                }
                v45 |= v47;
                BOOL v26 = v44 > 3;
                v44 >>= 1;
              }
              while (v26);
              goto LABEL_104;
            }
            int v43 = v38;
            __int16 v45 = 1;
          }
          else
          {
            int v43 = v38;
            __int16 v45 = 0;
          }
LABEL_104:
          __int16 v48 = ~v45;
          if (!v43) {
            __int16 v48 = v45 + 1;
          }
          v55[*v36] = v48;
          ++v31;
          uint64_t v33 = v53;
        }
        while (v37 < a1[134]);
      }
LABEL_107:
      ++v6;
      a2 = v52;
    }
    while (v6 < a1[116]);
  }
  return 1;
}

uint64_t sub_1003CCFF0(int *a1)
{
  uint64_t v2 = *((void *)a1 + 74);
  uint64_t result = (*(uint64_t (**)(void))(*((void *)a1 + 73) + 16))();
  if (result)
  {
    if (a1[104] < 1) {
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)a1;
  *(_DWORD *)(v4 + 40) = 25;
  uint64_t result = (*(uint64_t (**)(int *))v4)(a1);
  if (a1[104] >= 1)
  {
LABEL_5:
    for (uint64_t i = 0; i < a1[104]; ++i)
    {
      uint64_t v7 = *(void *)&a1[2 * i + 106];
      if (*((unsigned char *)a1 + 297))
      {
        if (a1[127]) {
          goto LABEL_7;
        }
        if (a1[129]) {
          continue;
        }
      }
      uint64_t v8 = *(_OWORD **)(v2 + 8 * *(int *)(v7 + 20) + 80);
      v8[2] = 0uLL;
      v8[3] = 0uLL;
      *uint64_t v8 = 0uLL;
      v8[1] = 0uLL;
      uint64_t v9 = v2 + 4 * i;
      *(_DWORD *)(v9 + 44) = 0;
      *(_DWORD *)(v9 + 60) = 0;
      if (*((unsigned char *)a1 + 297))
      {
        if (!a1[127]) {
          continue;
        }
LABEL_7:
        uint64_t v6 = *(_OWORD **)(v2 + 8 * *(int *)(v7 + 24) + 208);
        v6[14] = 0uLL;
        v6[15] = 0uLL;
        v6[12] = 0uLL;
        v6[13] = 0uLL;
        v6[10] = 0uLL;
        v6[11] = 0uLL;
        v6[8] = 0uLL;
        v6[9] = 0uLL;
        v6[6] = 0uLL;
        v6[7] = 0uLL;
        v6[4] = 0uLL;
        v6[5] = 0uLL;
        v6[2] = 0uLL;
        v6[3] = 0uLL;
        *uint64_t v6 = 0uLL;
        v6[1] = 0uLL;
        continue;
      }
      if (a1[134]) {
        goto LABEL_7;
      }
    }
  }
LABEL_15:
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = -16;
  *(_DWORD *)(v2 + 76) = a1[87];
  return result;
}

uint64_t sub_1003CD110(uint64_t *a1, unsigned char *a2)
{
  uint64_t v3 = a1[74];
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4 >= 0x8000)
  {
    int v6 = *(_DWORD *)(v3 + 40);
  }
  else
  {
    int v6 = *(_DWORD *)(v3 + 40);
    do
    {
      int v7 = v6--;
      *(_DWORD *)(v3 + 40) = v6;
      if (v7 <= 0)
      {
        if (*((_DWORD *)a1 + 135))
        {
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v9 = (unsigned __int8 **)a1[5];
          if (!v9[1] && !((unsigned int (*)(uint64_t *))v9[3])(a1))
          {
            uint64_t v10 = *a1;
            *(_DWORD *)(v10 + 40) = 25;
            (*(void (**)(uint64_t *))v10)(a1);
          }
          uint64_t v11 = *v9;
          uint64_t v12 = (uint64_t)(v9[1] - 1);
          ++*v9;
          v9[1] = (unsigned __int8 *)v12;
          uint64_t v8 = *v11;
          if (v8 == 255)
          {
            do
            {
              uint64_t v16 = a1[5];
              if (!*(void *)(v16 + 8) && !(*(unsigned int (**)(uint64_t *))(v16 + 24))(a1))
              {
                uint64_t v17 = *a1;
                *(_DWORD *)(v17 + 40) = 25;
                (*(void (**)(uint64_t *))v17)(a1);
              }
              uint64_t v13 = *(unsigned char **)v16;
              uint64_t v14 = *(void *)(v16 + 8) - 1;
              ++*(void *)v16;
              *(void *)(v16 + 8) = v14;
              int v15 = *v13;
            }
            while (v15 == 255);
            if (*v13)
            {
              uint64_t v8 = 0;
              *((_DWORD *)a1 + 135) = v15;
            }
            else
            {
              uint64_t v8 = 255;
            }
          }
          int v6 = *(_DWORD *)(v3 + 40);
        }
        *(void *)(v3 + 24) = v8 | (*(void *)(v3 + 24) << 8);
        *(_DWORD *)(v3 + 40) = v6 + 8;
        int v20 = v6 + 9;
        BOOL v18 = v6 == -9;
        BOOL v19 = v6 <= -9;
        v6 += 8;
        if (v19)
        {
          *(_DWORD *)(v3 + 40) = v20;
          int v6 = v20;
          if (v18)
          {
            int v6 = 0;
            *(void *)(v3 + 32) = 0x8000;
          }
        }
      }
      uint64_t v4 = 2 * *(void *)(v3 + 32);
      *(void *)(v3 + 32) = v4;
    }
    while (v4 < 0x8000);
  }
  unsigned int v21 = *a2;
  uint64_t v22 = qword_10040C9E8[v21 & 0x7F];
  uint64_t v23 = v22 >> 16;
  uint64_t v24 = v4 - (v22 >> 16);
  *(void *)(v3 + 32) = v24;
  uint64_t v25 = v24 << v6;
  uint64_t v26 = *(void *)(v3 + 24);
  BOOL v27 = __OFSUB__(v26, v25);
  uint64_t v28 = v26 - v25;
  if (v28 < 0 == v27)
  {
    *(void *)(v3 + 24) = v28;
    *(void *)(v3 + 32) = v23;
    char v29 = v21 & 0x80;
    if (v24 >= v23) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  if (v24 >= 0x8000) {
    return v21 >> 7;
  }
  char v29 = v21 & 0x80;
  if (v24 >= v23)
  {
LABEL_30:
    *a2 = v29 ^ BYTE1(v22);
    return v21 >> 7;
  }
LABEL_33:
  *a2 = v29 ^ v22;
  return (v21 ^ 0x80) >> 7;
}

void *sub_1003CD314(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a1 + 40);
  if (!result)
  {
    uint64_t result = (void *)(**(uint64_t (***)(uint64_t, void, uint64_t))(a1 + 8))(a1, 0, 56);
    *(void *)(a1 + 40) = result;
  }
  result[2] = sub_1003CD38C;
  result[3] = sub_1003CD3CC;
  result[4] = sub_1003CD430;
  result[5] = a2;
  return result;
}

uint64_t sub_1003CD38C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  v1[6] = result;
  *uint64_t v1 = result;
  v1[1] = 4096;
  return result;
}

uint64_t sub_1003CD3CC(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  if (fwrite(*(const void **)(v2 + 48), 1uLL, 0x1000uLL, *(FILE **)(v2 + 40)) != 4096)
  {
    uint64_t v3 = *a1;
    *(_DWORD *)(v3 + 40) = 38;
    (*(void (**)(uint64_t *))v3)(a1);
  }
  *(void *)uint64_t v2 = *(void *)(v2 + 48);
  *(void *)(v2 + 8) = 4096;
  return 1;
}

uint64_t sub_1003CD430(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void *)(v2 + 8);
  if (v3 != 4096 && fwrite(*(const void **)(v2 + 48), 1uLL, 4096 - v3, *(FILE **)(v2 + 40)) != 4096 - v3)
  {
    uint64_t v4 = *a1;
    *(_DWORD *)(v4 + 40) = 38;
    (*(void (**)(uint64_t *))v4)(a1);
  }
  fflush(*(FILE **)(v2 + 40));
  uint64_t result = ferror(*(FILE **)(v2 + 40));
  if (result)
  {
    uint64_t v6 = *a1;
    *(_DWORD *)(v6 + 40) = 38;
    int v7 = *(uint64_t (**)(uint64_t *))v6;
    return v7(a1);
  }
  return result;
}

uint64_t sub_1003CD4E8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void **)(result + 40);
  if (!v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = (**(uint64_t (***)(void))(result + 8))();
    *(void *)(v4 + 40) = v5;
    uint64_t result = (**(uint64_t (***)(uint64_t, void, uint64_t))(v4 + 8))(v4, 0, 4096);
    *(void *)(v5 + 64) = result;
    uint64_t v3 = *(void **)(v4 + 40);
  }
  v3[1] = 0;
  v3[2] = sub_1003CD5AC;
  v3[3] = sub_1003CD5BC;
  v3[4] = sub_1003CD65C;
  v3[5] = sub_1003D5C8C;
  v3[6] = nullsub_104;
  v3[7] = a2;
  *uint64_t v3 = 0;
  return result;
}

uint64_t sub_1003CD5AC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 40) + 72) = 1;
  return result;
}

uint64_t sub_1003CD5BC(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  size_t v3 = fread(*(void **)(v2 + 64), 1uLL, 0x1000uLL, *(FILE **)(v2 + 56));
  if (!v3)
  {
    if (*(unsigned char *)(v2 + 72))
    {
      uint64_t v4 = *a1;
      *(_DWORD *)(v4 + 40) = 43;
      (*(void (**)(uint64_t *))v4)(a1);
    }
    uint64_t v5 = *a1;
    *(_DWORD *)(v5 + 40) = 123;
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(a1, 0xFFFFFFFFLL);
    **(unsigned char **)(v2 + 64) = -1;
    *(unsigned char *)(*(void *)(v2 + 64) + 1) = -39;
    size_t v3 = 2;
  }
  *(void *)uint64_t v2 = *(void *)(v2 + 64);
  *(void *)(v2 + 8) = v3;
  *(unsigned char *)(v2 + 72) = 0;
  return 1;
}

uint64_t sub_1003CD65C(uint64_t result, uint64_t a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 40);
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5 < a2)
    {
      do
      {
        v2 -= v5;
        uint64_t result = (*(uint64_t (**)(uint64_t))(v4 + 24))(v3);
        uint64_t v5 = *(void *)(v4 + 8);
      }
      while (v2 > v5);
    }
    *(void *)v4 += v2;
    *(void *)(v4 + 8) = v5 - v2;
  }
  return result;
}

void sub_1003CD6D4(uint64_t a1, int a2)
{
  uint64_t v4 = (uint64_t (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 560) = v4;
  *uint64_t v4 = sub_1003CD88C;
  v4[2] = sub_1003CD8E0;
  v4[27] = 0;
  if (a2)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (unsigned int *)(*(void *)(a1 + 288) + 28);
      do
      {
        unsigned int v7 = *(v6 - 4);
        if (*(unsigned char *)(a1 + 297)) {
          uint64_t v8 = 3 * v7;
        }
        else {
          uint64_t v8 = v7;
        }
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 40);
        uint64_t v10 = sub_1003EE800(*v6, (int)*(v6 - 5));
        uint64_t v11 = sub_1003EE800(v6[1], (int)*(v6 - 4));
        v4[v5++ + 17] = (uint64_t (*)(uint64_t))v9(a1, 1, 1, v10, v11, v8);
        v6 += 24;
      }
      while (v5 < *(int *)(a1 + 56));
    }
    v4[1] = sub_1003CDA6C;
    v4[3] = (uint64_t (*)(uint64_t))sub_1003CDDE0;
    uint64_t v12 = (uint64_t (*)(uint64_t))(v4 + 17);
  }
  else
  {
    uint64_t v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 1280);
    v4[7] = (uint64_t (*)(uint64_t))v13;
    v4[8] = (uint64_t (*)(uint64_t))(v13 + 128);
    v4[9] = (uint64_t (*)(uint64_t))(v13 + 256);
    v4[10] = (uint64_t (*)(uint64_t))(v13 + 384);
    v4[11] = (uint64_t (*)(uint64_t))(v13 + 512);
    v4[12] = (uint64_t (*)(uint64_t))(v13 + 640);
    v4[13] = (uint64_t (*)(uint64_t))(v13 + 768);
    v4[14] = (uint64_t (*)(uint64_t))(v13 + 896);
    v4[15] = (uint64_t (*)(uint64_t))(v13 + 1024);
    v4[16] = (uint64_t (*)(uint64_t))(v13 + 1152);
    if (!*(_DWORD *)(a1 + 536)) {
      bzero(v13, 0x500uLL);
    }
    uint64_t v12 = 0;
    v4[1] = (uint64_t (*)(uint64_t))sub_1003CDFC4;
    v4[3] = (uint64_t (*)(uint64_t))sub_1003CDFCC;
  }
  v4[4] = v12;
}

uint64_t sub_1003CD88C(uint64_t result)
{
  *(_DWORD *)(result + 160) = 0;
  uint64_t v1 = *(void *)(result + 560);
  if (*(int *)(result + 416) < 2)
  {
    uint64_t v2 = *(void *)(result + 424);
    if (*(_DWORD *)(result + 400) == 1) {
      *(_DWORD *)(v1 + 48) = *(_DWORD *)(v2 + 76);
    }
    else {
      *(_DWORD *)(v1 + 48) = *(_DWORD *)(v2 + 12);
    }
    *(void *)(v1 + 40) = 0;
  }
  else
  {
    *(_DWORD *)(v1 + 48) = 1;
    *(void *)(v1 + 40) = 0;
  }
  return result;
}

uint64_t sub_1003CD8E0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void **)(result + 560);
  if (!v2[4]) {
    goto LABEL_24;
  }
  if (*(unsigned char *)(result + 97) && *(unsigned char *)(result + 297) && *(void *)(result + 176))
  {
    uint64_t result = v2[27];
    if (result)
    {
      if (*(int *)(v1 + 56) < 1) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 24 * *(int *)(v1 + 56));
      v2[27] = result;
      if (*(int *)(v1 + 56) < 1) {
        goto LABEL_22;
      }
    }
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    char v5 = 0;
    uint64_t v6 = (_WORD **)(*(void *)(v1 + 288) + 80);
    unsigned int v7 = (_DWORD *)(result + 12);
    while (1)
    {
      uint64_t v8 = *v6;
      if (!*v6) {
        break;
      }
      if (!*v8) {
        break;
      }
      if (!v8[1]) {
        break;
      }
      if (!v8[8]) {
        break;
      }
      if (!v8[16]) {
        break;
      }
      if (!v8[9]) {
        break;
      }
      if (!v8[2]) {
        break;
      }
      uint64_t v9 = *(void *)(v1 + 176);
      if ((*(_DWORD *)(v9 + v3) & 0x80000000) != 0) {
        break;
      }
      uint64_t v10 = (_DWORD *)(v9 + v3);
      *(v7 - 2) = v10[1];
      BOOL v11 = v10[1] == 0;
      *(v7 - 1) = v10[2];
      unsigned int v12 = v10[2];
      *unsigned int v7 = v10[3];
      unsigned int v13 = v10[3];
      v7[1] = v10[4];
      __int32 v14 = v10[4];
      uint64_t result = v10[5];
      v7[2] = result;
      v15.i64[0] = __PAIR64__(v13, v12);
      v15.i32[2] = v14;
      v15.i32[3] = v10[5];
      *(int16x4_t *)v15.i8 = vmovn_s32(vtstq_s32(v15, v15));
      v15.i16[0] = vmaxv_u16(*(uint16x4_t *)v15.i8);
      if ((v11 & ~v15.i32[0]) == 0) {
        char v5 = 1;
      }
      ++v4;
      v3 += 256;
      v6 += 12;
      v7 += 6;
      if (v4 >= *(int *)(v1 + 56))
      {
        uint64_t v16 = sub_1003CE2A0;
        if (v5) {
          goto LABEL_23;
        }
        break;
      }
    }
  }
LABEL_22:
  uint64_t v16 = sub_1003CDDE0;
LABEL_23:
  v2[3] = v16;
LABEL_24:
  *(_DWORD *)(v1 + 168) = 0;
  return result;
}

uint64_t sub_1003CDA6C(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 560);
  memset(v44, 0, sizeof(v44));
  if (*(int *)(a1 + 416) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      *((void *)v44 + v3) = (*(uint64_t (**)(uint64_t, void, void, void, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 64))(a1, *(void *)&v2[2 * *(int *)(*(void *)(a1 + 8 * v3 + 424) + 4) + 34], (*(_DWORD *)(*(void *)(a1 + 8 * v3 + 424) + 12) * *(_DWORD *)(a1 + 160)), *(unsigned int *)(*(void *)(a1 + 8 * v3 + 424) + 12), 1);
      ++v3;
    }
    while (v3 < *(int *)(a1 + 416));
  }
  int v4 = v2[12];
  uint64_t v5 = (int)v2[11];
  if ((int)v5 >= v4)
  {
LABEL_35:
    unsigned int v38 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v38;
    unsigned int v39 = *(_DWORD *)(a1 + 400);
    if (v38 >= v39)
    {
      (*(void (**)(uint64_t))(*(void *)(a1 + 576) + 24))(a1);
      return 4;
    }
    else
    {
      uint64_t v40 = *(void *)(a1 + 560);
      if (*(int *)(a1 + 416) < 2)
      {
        unsigned int v42 = v39 - 1;
        uint64_t v43 = *(void *)(a1 + 424);
        if (v38 >= v42) {
          int v41 = *(_DWORD *)(v43 + 76);
        }
        else {
          int v41 = *(_DWORD *)(v43 + 12);
        }
      }
      else
      {
        int v41 = 1;
      }
      *(_DWORD *)(v40 + 48) = v41;
      *(void *)(v40 + 40) = 0;
      return 3;
    }
  }
  else
  {
    unsigned int v6 = v2[10];
    unsigned int v7 = *(_DWORD *)(a1 + 456);
    uint64_t v8 = v2 + 18;
    uint64_t v9 = 8 * v5;
    int64x2_t v10 = (int64x2_t)xmmword_10040CDC0;
    int64x2_t v11 = (int64x2_t)xmmword_10040CDD0;
    while (v6 >= v7)
    {
LABEL_6:
      unsigned int v6 = 0;
      v2[10] = 0;
      ++v5;
      v9 += 8;
      if (v5 >= v4) {
        goto LABEL_35;
      }
    }
    while (1)
    {
      uint64_t v12 = *(unsigned int *)(a1 + 416);
      if ((int)v12 >= 1)
      {
        uint64_t v13 = 0;
        int v14 = 0;
        do
        {
          uint64_t v15 = *(void *)(a1 + 8 * v13 + 424);
          uint64_t v16 = *(unsigned int *)(v15 + 60);
          if ((int)v16 >= 1)
          {
            unint64_t v17 = *(unsigned int *)(v15 + 56);
            if ((int)v17 >= 1)
            {
              uint64_t v18 = v17 * v6;
              uint64_t v19 = *((void *)v44 + v13);
              if (v17 > 3)
              {
                if ((v17 & 0xFFFFFFFC) == v17)
                {
                  for (uint64_t i = 0; i != v16; ++i)
                  {
                    uint64_t v24 = (int64x2_t *)&v8[2 * v14];
                    unint64_t v25 = *(void *)(v19 + 8 * (i + v5)) + (v18 << 7);
                    v14 += v17;
                    uint64_t v26 = v17 & 0xFFFFFFFC;
                    do
                    {
                      int64x2_t v27 = vdupq_n_s64(v25);
                      v24[-1] = vaddq_s64(v27, v10);
                      *uint64_t v24 = vaddq_s64(v27, v11);
                      v25 += 512;
                      v24 += 2;
                      v26 -= 4;
                    }
                    while (v26);
                  }
                }
                else
                {
                  for (uint64_t j = 0; j != v16; ++j)
                  {
                    uint64_t v29 = 2 * v14;
                    int v30 = (unint64_t *)&v2[8 * (v17 >> 2) + 14 + v29];
                    int v31 = (int64x2_t *)&v8[v29];
                    unint64_t v32 = *(void *)(v19 + 8 * (j + v5)) + (v18 << 7);
                    v14 += v17;
                    unint64_t v33 = v32 + ((unint64_t)(v17 & 0xFFFFFFFC) << 7);
                    uint64_t v34 = v17 & 0xFFFFFFFC;
                    do
                    {
                      int64x2_t v35 = vdupq_n_s64(v32);
                      v31[-1] = vaddq_s64(v35, v10);
                      int64x2_t *v31 = vaddq_s64(v35, v11);
                      v32 += 512;
                      v31 += 2;
                      v34 -= 4;
                    }
                    while (v34);
                    int v36 = v17 - 4 * (v17 >> 2);
                    do
                    {
                      *v30++ = v33;
                      v33 += 128;
                      --v36;
                    }
                    while (v36);
                  }
                }
              }
              else
              {
                int v20 = (void *)(v19 + v9);
                do
                {
                  uint64_t v21 = *v20 + (v18 << 7);
                  uint64_t v22 = v14 + 1;
                  *(void *)&v2[2 * v14 + 14] = v21;
                  if (v17 + v14 != v22)
                  {
                    *(void *)&v2[2 * v22 + 14] = v21 + 128;
                    if (v17 + v14 != v14 + 2) {
                      *(void *)&v2[2 * v14 + 18] = v21 + 256;
                    }
                  }
                  ++v20;
                  v14 += v17;
                  --v16;
                }
                while (v16);
              }
            }
          }
          ++v13;
        }
        while (v13 != v12);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)(a1 + 592) + 8))(a1, v2 + 14);
      if (!result) {
        break;
      }
      ++v6;
      unsigned int v7 = *(_DWORD *)(a1 + 456);
      int64x2_t v11 = (int64x2_t)xmmword_10040CDD0;
      int64x2_t v10 = (int64x2_t)xmmword_10040CDC0;
      if (v6 >= v7)
      {
        int v4 = v2[12];
        goto LABEL_6;
      }
    }
    v2[10] = v6;
    v2[11] = v5;
  }
  return result;
}

uint64_t sub_1003CDDE0(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *(void *)(a1 + 560);
  unsigned int v18 = *(_DWORD *)(a1 + 400) - 1;
  while (1)
  {
    int v4 = *(_DWORD *)(a1 + 156);
    int v5 = *(_DWORD *)(a1 + 164);
    if (v4 >= v5 && (v4 != v5 || *(_DWORD *)(a1 + 160) > *(_DWORD *)(a1 + 168))) {
      break;
    }
    uint64_t result = (**(uint64_t (***)(uint64_t))(a1 + 576))(a1);
    if (!result) {
      return result;
    }
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 288);
    do
    {
      if (*(unsigned char *)(v7 + 52))
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)(a1 + 8) + 64))(a1, *(void *)(v19 + 8 * v6 + 136), (*(_DWORD *)(v7 + 12) * *(_DWORD *)(a1 + 168)), *(unsigned int *)(v7 + 12), 0);
        if (*(_DWORD *)(a1 + 168) >= v18)
        {
          if (*(_DWORD *)(v7 + 32) == (*(_DWORD *)(v7 + 32) / *(_DWORD *)(v7 + 12))
                                     * (unint64_t)*(unsigned int *)(v7 + 12))
            unint64_t v8 = *(unsigned int *)(v7 + 12);
          else {
            unint64_t v8 = *(unsigned int *)(v7 + 32)
          }
               - (*(_DWORD *)(v7 + 32) / *(_DWORD *)(v7 + 12))
               * (unint64_t)*(unsigned int *)(v7 + 12);
          if ((int)v8 >= 1)
          {
LABEL_17:
            if (*(_DWORD *)(v7 + 28))
            {
              uint64_t v9 = 0;
              int64x2_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 600)
                                                                                       + 8 * v6
                                                                                       + 8);
              uint64_t v11 = *(void *)(a2 + 8 * v6);
              unsigned int v12 = 1;
              do
              {
                if (v12)
                {
                  uint64_t v13 = 0;
                  unsigned int v14 = 0;
                  uint64_t v15 = *(void *)(v20 + 8 * v9);
                  do
                  {
                    v10(a1, v7, v15, v11, v13);
                    v15 += 128;
                    uint64_t v13 = (*(_DWORD *)(v7 + 36) + v13);
                    ++v14;
                    unsigned int v12 = *(_DWORD *)(v7 + 28);
                  }
                  while (v14 < v12);
                }
                v11 += 8 * *(int *)(v7 + 40);
                ++v9;
              }
              while (v9 != v8);
            }
          }
        }
        else
        {
          unint64_t v8 = *(unsigned int *)(v7 + 12);
          if ((int)v8 >= 1) {
            goto LABEL_17;
          }
        }
      }
      ++v6;
      v7 += 96;
    }
    while (v6 < *(int *)(a1 + 56));
  }
  unsigned int v16 = *(_DWORD *)(a1 + 168) + 1;
  *(_DWORD *)(a1 + 168) = v16;
  if (v16 < *(_DWORD *)(a1 + 400)) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t sub_1003CDFC4()
{
  return 0;
}

uint64_t sub_1003CDFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 560);
  unsigned int v4 = *(_DWORD *)(a1 + 400);
  int v5 = v3[12];
  int v36 = v3[11];
  if (v36 >= v5)
  {
LABEL_31:
    ++*(_DWORD *)(a1 + 168);
    unsigned int v26 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v26;
    if (v26 >= v4)
    {
      (*(void (**)(uint64_t))(*(void *)(a1 + 576) + 24))(a1);
      return 4;
    }
    else
    {
      uint64_t v27 = *(void *)(a1 + 560);
      if (*(int *)(a1 + 416) < 2)
      {
        unsigned int v29 = v4 - 1;
        uint64_t v30 = *(void *)(a1 + 424);
        if (v26 >= v29) {
          int v28 = *(_DWORD *)(v30 + 76);
        }
        else {
          int v28 = *(_DWORD *)(v30 + 12);
        }
      }
      else
      {
        int v28 = 1;
      }
      *(_DWORD *)(v27 + 48) = v28;
      *(void *)(v27 + 40) = 0;
      return 3;
    }
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 456) - 1;
    unsigned int v39 = v4 - 1;
    uint64_t v7 = (void **)(v3 + 14);
    unsigned int v8 = v3[10];
    int v31 = *(_DWORD **)(a1 + 560);
    unsigned int v32 = v6;
    while (v8 > v6)
    {
LABEL_29:
      unsigned int v8 = 0;
      v3[10] = 0;
      if (++v36 >= v5)
      {
        unsigned int v4 = *(_DWORD *)(a1 + 400);
        goto LABEL_31;
      }
    }
    while (1)
    {
      if (*(_DWORD *)(a1 + 536)) {
        bzero(*v7, (uint64_t)*(int *)(a1 + 464) << 7);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)(a1 + 592) + 8))(a1, v7);
      if (!result) {
        break;
      }
      int v10 = *(_DWORD *)(a1 + 416);
      if (v10 >= 1)
      {
        uint64_t v11 = 0;
        int v12 = 0;
        unsigned int v34 = v8;
        do
        {
          uint64_t v13 = *(void *)(a1 + 8 * v11 + 424);
          if (*(unsigned char *)(v13 + 52))
          {
            if (v8 >= v6) {
              uint64_t v14 = 72;
            }
            else {
              uint64_t v14 = 56;
            }
            int v15 = *(_DWORD *)(v13 + 60);
            if (v15 >= 1)
            {
              uint64_t v38 = *(unsigned int *)(v13 + v14);
              if ((int)v38 < 1)
              {
                v12 += *(_DWORD *)(v13 + 56) * v15;
              }
              else
              {
                uint64_t v35 = v11;
                int v16 = 0;
                uint64_t v17 = *(int *)(v13 + 4);
                unsigned int v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 600)
                                                                                         + 8 * v17
                                                                                         + 8);
                unsigned int v37 = *(_DWORD *)(v13 + 68) * v8;
                int v19 = *(_DWORD *)(v13 + 40);
                uint64_t v20 = *(void *)(a2 + 8 * v17) + 8 * v19 * v36;
                do
                {
                  if (*(_DWORD *)(a1 + 160) < v39 || v16 + v36 < *(_DWORD *)(v13 + 76))
                  {
                    uint64_t v21 = v7;
                    uint64_t v22 = &v7[v12];
                    uint64_t v23 = v38;
                    uint64_t v24 = v37;
                    do
                    {
                      uint64_t v25 = (uint64_t)*v22++;
                      v18(a1, v13, v25, v20, v24);
                      uint64_t v24 = (*(_DWORD *)(v13 + 36) + v24);
                      --v23;
                    }
                    while (v23);
                    int v19 = *(_DWORD *)(v13 + 40);
                    int v15 = *(_DWORD *)(v13 + 60);
                    uint64_t v7 = v21;
                  }
                  v12 += *(_DWORD *)(v13 + 56);
                  v20 += 8 * v19;
                  ++v16;
                }
                while (v16 < v15);
                int v10 = *(_DWORD *)(a1 + 416);
                unsigned int v6 = v32;
                unsigned int v8 = v34;
                uint64_t v11 = v35;
              }
            }
          }
          else
          {
            v12 += *(_DWORD *)(v13 + 64);
          }
          ++v11;
        }
        while (v11 < v10);
      }
      if (++v8 > v6)
      {
        uint64_t v3 = v31;
        int v5 = v31[12];
        goto LABEL_29;
      }
    }
    v31[10] = v8;
    v31[11] = v36;
  }
  return result;
}

uint64_t sub_1003CE2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v70 = *(void *)(a1 + 560);
  unsigned int v76 = *(_DWORD *)(a1 + 400) - 1;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long __dst = 0u;
  long long v103 = 0u;
  while (1)
  {
    int v4 = *(_DWORD *)(v2 + 156);
    int v5 = *(_DWORD *)(v2 + 164);
    if (v4 > v5) {
      break;
    }
    uint64_t v6 = *(void *)(v2 + 576);
    if (*(unsigned char *)(v6 + 33)) {
      break;
    }
    if (v4 == v5)
    {
      unsigned int v7 = *(_DWORD *)(v2 + 168);
      if (!*(_DWORD *)(v2 + 508)) {
        ++v7;
      }
      if (*(_DWORD *)(v2 + 160) > v7) {
        break;
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))v6)(v2);
    if (!result) {
      return result;
    }
  }
  if (*(int *)(v2 + 56) >= 1)
  {
    uint64_t v71 = 0;
    uint64_t v8 = *(void *)(v2 + 288);
    uint64_t v89 = v2;
    do
    {
      if (!*(unsigned char *)(v8 + 52)) {
        goto LABEL_11;
      }
      unsigned int v9 = *(_DWORD *)(v2 + 168);
      if (v9 < v76)
      {
        unsigned int v10 = *(_DWORD *)(v8 + 12);
        uint64_t v13 = 2 * v10;
        LODWORD(v12) = v10;
        if (v9) {
          goto LABEL_18;
        }
      }
      else
      {
        unsigned int v10 = *(_DWORD *)(v8 + 12);
        unsigned int v11 = *(_DWORD *)(v8 + 32) % v10;
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = v10;
        }
        uint64_t v13 = v12;
        if (v9)
        {
LABEL_18:
          uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)(v2 + 8) + 64))(v2, *(void *)(v70 + 8 * v71 + 136), v10 * (v9 - 1), v10 + v13, 0)+ 8 * *(int *)(v8 + 12);
          uint64_t v72 = (v12 - 1);
          if ((int)v12 >= 1) {
            goto LABEL_22;
          }
          goto LABEL_11;
        }
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void))(*(void *)(v2 + 8) + 64))(v2, *(void *)(v70 + 8 * v71 + 136), 0, v13, 0);
      uint64_t v72 = (v12 - 1);
      if ((int)v12 >= 1)
      {
LABEL_22:
        uint64_t v15 = 0;
        uint64x2_t v93 = *(void (**)(uint64_t, uint64_t, long long *, uint64_t, uint64_t))(*(void *)(v2 + 600) + 8 * v71 + 8);
        uint64_t v95 = *(void *)(a2 + 8 * v71);
        int v16 = *(unsigned __int16 **)(v8 + 80);
        uint64_t v17 = v16[2];
        uint64_t v18 = v16[9];
        uint64_t v19 = v16[16];
        uint64x2_t v90 = (_DWORD *)(*(void *)(v70 + 216) + 4 * (6 * v71));
        uint64_t v20 = v16[8];
        int v21 = *v16;
        uint64_t v22 = v16[1];
        int v92 = 9 * v21;
        int v91 = 36 * v21;
        unint64_t v87 = v22 << 8;
        uint64_t v88 = v22 << 7;
        uint64_t v86 = v20 << 7;
        unint64_t v85 = v20 << 8;
        unint64_t v83 = v19 << 8;
        uint64_t v84 = v19 << 7;
        uint64_t v81 = v18 << 7;
        int v82 = 5 * v21;
        uint64_t v79 = v17 << 7;
        unint64_t v80 = v18 << 8;
        unint64_t v78 = v17 << 8;
        uint64_t v73 = v12;
        uint64_t v74 = v14;
        uint64_t v94 = v8;
        unsigned int v75 = v9;
        do
        {
          uint64_t v23 = *(__int16 **)(v14 + 8 * v15);
          uint64_t v24 = v23;
          if (v9 | v15) {
            uint64_t v24 = *(__int16 **)(v14 + 8 * v15 - 8);
          }
          if (v9 < v76 || (uint64_t v25 = *(__int16 **)(v14 + 8 * v15), v15 != v72)) {
            uint64_t v25 = *(__int16 **)(v14 + 8 * v15 + 8);
          }
          uint64_t v77 = v15;
          uint64_t v26 = 0;
          unsigned int v27 = 0;
          int v30 = *v24;
          int v28 = v24 + 64;
          int v29 = v30;
          int v33 = *v25;
          int v31 = v25 + 64;
          int v32 = v33;
          unsigned int v34 = *(_DWORD *)(v8 + 28) - 1;
          int v35 = v33;
          int v99 = *v23;
          int v101 = v99;
          int v98 = v29;
          int v100 = v29;
          do
          {
            int v97 = v100;
            int v100 = v98;
            int v36 = v101;
            int v101 = v99;
            int v96 = v35;
            int v35 = v32;
            sub_1003EE870(v23, &__dst, 1u);
            if (v27 < v34)
            {
              int v98 = *v28;
              int v99 = v23[64];
              int v32 = *v31;
            }
            int v37 = v90[1];
            if (v37) {
              BOOL v38 = WORD1(__dst) == 0;
            }
            else {
              BOOL v38 = 0;
            }
            if (v38)
            {
              uint64_t v39 = v91 * (uint64_t)(v36 - v99);
              unint64_t v40 = (v88 - v39) / v87;
              if (1 << v37 <= (int)v40) {
                int v41 = (1 << v37) - 1;
              }
              else {
                int v41 = (v88 - v39) / v87;
              }
              if (v37 > 0) {
                LODWORD(v40) = v41;
              }
              if (1 << v37 <= (int)((v39 + v88) / v87)) {
                int v42 = (1 << v37) - 1;
              }
              else {
                LOWORD(v42) = (v39 + v88) / v87;
              }
              if (v37 >= 1) {
                LOWORD(v43) = v42;
              }
              else {
                LOWORD(v43) = (v39 + v88) / v87;
              }
              if (v39 < 0) {
                int v43 = -(int)v40;
              }
              WORD1(__dst) = v43;
            }
            int v44 = v90[2];
            if (v44 && !(_WORD)v103)
            {
              uint64_t v45 = v91 * (uint64_t)(v100 - v35);
              unint64_t v46 = (v86 - v45) / v85;
              if (1 << v44 <= (int)v46) {
                int v47 = (1 << v44) - 1;
              }
              else {
                int v47 = (v86 - v45) / v85;
              }
              if (v44 > 0) {
                LODWORD(v46) = v47;
              }
              if (1 << v44 <= (int)((v45 + v86) / v85)) {
                int v48 = (1 << v44) - 1;
              }
              else {
                LOWORD(v48) = (v45 + v86) / v85;
              }
              if (v44 >= 1) {
                LOWORD(v49) = v48;
              }
              else {
                LOWORD(v49) = (v45 + v86) / v85;
              }
              if (v45 < 0) {
                int v49 = -(int)v46;
              }
              LOWORD(v103) = v49;
            }
            int v50 = v90[3];
            if (v50 && !(_WORD)v104)
            {
              uint64_t v51 = v92 * (uint64_t)(v100 - 2 * v101 + v35);
              unint64_t v52 = (v84 - v51) / v83;
              if (1 << v50 <= (int)v52) {
                int v53 = (1 << v50) - 1;
              }
              else {
                int v53 = (v84 - v51) / v83;
              }
              if (v50 > 0) {
                LODWORD(v52) = v53;
              }
              if (1 << v50 <= (int)((v51 + v84) / v83)) {
                int v54 = (1 << v50) - 1;
              }
              else {
                LOWORD(v54) = (v51 + v84) / v83;
              }
              if (v50 >= 1) {
                LOWORD(v55) = v54;
              }
              else {
                LOWORD(v55) = (v51 + v84) / v83;
              }
              if (v51 < 0) {
                int v55 = -(int)v52;
              }
              LOWORD(v104) = v55;
            }
            int v56 = v90[4];
            if (v56 && !WORD1(v103))
            {
              uint64_t v57 = v82 * (uint64_t)(v97 - (v96 + v98) + v32);
              unint64_t v58 = (v81 - v57) / v80;
              if (1 << v56 <= (int)v58) {
                int v59 = (1 << v56) - 1;
              }
              else {
                int v59 = (v81 - v57) / v80;
              }
              if (v56 > 0) {
                LODWORD(v58) = v59;
              }
              if (1 << v56 <= (int)((v57 + v81) / v80)) {
                int v60 = (1 << v56) - 1;
              }
              else {
                LOWORD(v60) = (v57 + v81) / v80;
              }
              if (v56 >= 1) {
                LOWORD(v61) = v60;
              }
              else {
                LOWORD(v61) = (v57 + v81) / v80;
              }
              if (v57 < 0) {
                int v61 = -(int)v58;
              }
              WORD1(v103) = v61;
            }
            int v62 = v90[5];
            if (v62 && !WORD2(__dst))
            {
              uint64_t v63 = v92 * (uint64_t)(v36 - 2 * v101 + v99);
              unint64_t v64 = (v79 - v63) / v78;
              if (1 << v62 <= (int)v64) {
                int v65 = (1 << v62) - 1;
              }
              else {
                int v65 = (v79 - v63) / v78;
              }
              if (v62 > 0) {
                LODWORD(v64) = v65;
              }
              if (1 << v62 <= (int)((v63 + v79) / v78)) {
                int v66 = (1 << v62) - 1;
              }
              else {
                LOWORD(v66) = (v63 + v79) / v78;
              }
              if (v62 >= 1) {
                LOWORD(v67) = v66;
              }
              else {
                LOWORD(v67) = (v63 + v79) / v78;
              }
              if (v63 < 0) {
                int v67 = -(int)v64;
              }
              WORD2(__dst) = v67;
            }
            uint64_t v2 = v89;
            v93(v89, v94, &__dst, v95, v26);
            v23 += 64;
            uint64_t v26 = (*(_DWORD *)(v94 + 36) + v26);
            ++v27;
            v31 += 64;
            v28 += 64;
          }
          while (v27 <= v34);
          uint64_t v8 = v94;
          v95 += 8 * *(int *)(v94 + 40);
          uint64_t v15 = v77 + 1;
          uint64_t v14 = v74;
          unsigned int v9 = v75;
        }
        while (v77 + 1 != v73);
      }
LABEL_11:
      v8 += 96;
      ++v71;
    }
    while (v71 < *(int *)(v2 + 56));
  }
  unsigned int v68 = *(_DWORD *)(v2 + 168) + 1;
  *(_DWORD *)(v2 + 168) = v68;
  if (v68 < *(_DWORD *)(v2 + 400)) {
    return 3;
  }
  else {
    return 4;
  }
}

void *sub_1003CE8D4(uint64_t *a1)
{
  uint64_t result = (void *)(*(uint64_t (**)(void))a1[1])();
  uint64_t v3 = result;
  a1[77] = (uint64_t)result;
  *uint64_t result = nullsub_105;
  unsigned int v4 = *((_DWORD *)a1 + 15);
  if (v4 > 7) {
    goto LABEL_34;
  }
  if (((1 << v4) & 0xCC) == 0)
  {
    if (((1 << v4) & 0x30) != 0)
    {
      if (*((_DWORD *)a1 + 14) == 4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    if (v4 == 1)
    {
      if (*((_DWORD *)a1 + 14) == 1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
LABEL_34:
    if (*((int *)a1 + 14) > 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (*((_DWORD *)a1 + 14) != 3)
  {
LABEL_4:
    uint64_t v5 = *a1;
    *(_DWORD *)(v5 + 40) = 11;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v5)(a1);
  }
LABEL_5:
  if (*((_DWORD *)a1 + 91) && (*((_DWORD *)a1 + 15) | 4) != 6)
  {
    uint64_t v11 = *a1;
    *(_DWORD *)(v11 + 40) = 28;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v11)(a1);
    int v6 = *((_DWORD *)a1 + 16);
    int v7 = v6 - 1;
    if ((v6 - 1) > 5)
    {
LABEL_17:
      if (v6 == *((_DWORD *)a1 + 15))
      {
        *((_DWORD *)a1 + 31) = *((_DWORD *)a1 + 14);
LABEL_33:
        uint64_t v26 = sub_1003CFE74;
LABEL_46:
        v3[1] = v26;
      }
      else
      {
LABEL_44:
        uint64_t v43 = *a1;
        *(_DWORD *)(v43 + 40) = 28;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t *))v43)(a1);
      }
      goto LABEL_47;
    }
  }
  else
  {
    int v6 = *((_DWORD *)a1 + 16);
    int v7 = v6 - 1;
  }
  switch(v7)
  {
    case 0:
      *((_DWORD *)a1 + 31) = 1;
      switch(*((_DWORD *)a1 + 15))
      {
        case 1:
        case 3:
        case 7:
          v3[1] = sub_1003CF04C;
          uint64_t v8 = *((unsigned int *)a1 + 14);
          if ((int)v8 < 2) {
            goto LABEL_47;
          }
          uint64_t v9 = a1[36];
          if (v8 == 2)
          {
            uint64_t v10 = 1;
LABEL_57:
            int v60 = (unsigned char *)(v9 + 96 * v10 + 52);
            uint64_t v61 = v8 - v10;
            do
            {
              unsigned char *v60 = 0;
              v60 += 96;
              --v61;
            }
            while (v61);
            goto LABEL_47;
          }
          uint64_t v10 = (v8 - 1) | 1;
          unint64_t v58 = (unsigned char *)(v9 + 244);
          unint64_t v59 = (v8 - 1) & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            *(v58 - 96) = 0;
            unsigned char *v58 = 0;
            v58 += 192;
            v59 -= 2;
          }
          while (v59);
          if (v8 - 1 != ((v8 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_57;
          }
          break;
        case 2:
          int v28 = *((_DWORD *)a1 + 91);
          if (v28 == 1)
          {
            v3[1] = sub_1003CF0F4;
          }
          else if (v28)
          {
            uint64_t v62 = *a1;
            *(_DWORD *)(v62 + 40) = 28;
            (*(void (**)(uint64_t *))v62)(a1);
          }
          else
          {
            v3[1] = sub_1003CF068;
          }
          uint64_t v63 = a1[77];
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 6144);
          uint64_t v64 = 0;
          uint64_t v65 = 0;
          uint64_t v66 = 0;
          uint64_t v67 = 0;
          *(void *)(v63 + 48) = result;
          do
          {
            unsigned int v68 = &result[v67];
            *unsigned int v68 = v65;
            v68[1] = v65 + 19595;
            v68[256] = v64;
            v68[257] = v64 + 38470;
            uint64_t v69 = v66 + 0x8000;
            uint64_t v70 = v66 + 40239;
            v67 += 2;
            v66 += 14942;
            v68[512] = v69;
            v65 += 39190;
            v64 += 76940;
            v68[513] = v70;
          }
          while (v67 != 256);
          goto LABEL_47;
        default:
          goto LABEL_44;
      }
      break;
    case 1:
      *((_DWORD *)a1 + 31) = 3;
      switch(*((_DWORD *)a1 + 15))
      {
        case 1:
          uint64_t v26 = sub_1003CF190;
          goto LABEL_46;
        case 2:
          int v42 = *((_DWORD *)a1 + 91);
          if (v42 == 1) {
            goto LABEL_45;
          }
          if (v42) {
            goto LABEL_44;
          }
          goto LABEL_29;
        case 3:
          unint64_t v29 = -11728000;
          unint64_t v30 = -14831872;
          uint64_t v31 = 5990656;
          uint64_t v32 = 2919552;
          v3[1] = sub_1003CF4F8;
          int v33 = (void *)a1[77];
          v33[2] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
          v33[3] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
          v33[4] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
          uint64_t v34 = 0;
          v33[5] = result;
          uint64_t v35 = v33[2];
          uint64_t v36 = v33[3];
          uint64_t v37 = v33[4];
          do
          {
            uint64_t v38 = 4 * v34;
            uint64_t v39 = v34;
            *(void *)(v37 + v39 * 8) = v31;
            result[v39] = v32;
            ++v34;
            v32 -= 22553;
            v31 -= 46802;
            unint64_t v40 = v29 >> 16;
            unint64_t v41 = v30 >> 16;
            v30 += 116130;
            v29 += 91881;
            *(_DWORD *)(v35 + v38) = v40;
            *(_DWORD *)(v36 + v38) = v41;
          }
          while (v34 != 256);
          goto LABEL_47;
        case 7:
          v3[1] = sub_1003CF4F8;
          uint64_t v45 = (void *)a1[77];
          v45[2] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
          v45[3] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
          v45[4] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
          uint64_t v46 = 0;
          v45[5] = result;
          uint64_t v47 = v45[2];
          uint64_t v48 = v45[3];
          unint64_t v49 = -29696512;
          unint64_t v50 = -23488896;
          uint64_t v51 = 5806464;
          uint64_t v52 = 11981184;
          uint64_t v53 = v45[4];
          do
          {
            uint64_t v54 = 4 * v46;
            uint64_t v55 = v46;
            *(void *)(v53 + v55 * 8) = v52;
            result[v55] = v51;
            ++v46;
            v51 -= 45107;
            v52 -= 93603;
            unint64_t v56 = v50 >> 16;
            unint64_t v57 = v49 >> 16;
            v49 += 232260;
            v50 += 183763;
            *(_DWORD *)(v47 + v54) = v56;
            *(_DWORD *)(v48 + v54) = v57;
          }
          while (v46 != 256);
          goto LABEL_47;
        default:
          goto LABEL_44;
      }
    case 3:
      *((_DWORD *)a1 + 31) = 4;
      int v12 = *((_DWORD *)a1 + 15);
      if (v12 == 4) {
        goto LABEL_33;
      }
      if (v12 != 5) {
        goto LABEL_44;
      }
      unint64_t v13 = -11728000;
      unint64_t v14 = -14831872;
      uint64_t v15 = 5990656;
      uint64_t v16 = 2919552;
      v3[1] = sub_1003CFDA4;
      uint64_t v17 = (void *)a1[77];
      v17[2] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
      v17[3] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 1024);
      v17[4] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 2048);
      uint64_t v18 = 0;
      v17[5] = result;
      uint64_t v19 = v17[2];
      uint64_t v20 = v17[3];
      uint64_t v21 = v17[4];
      do
      {
        uint64_t v22 = 4 * v18;
        uint64_t v23 = v18;
        *(void *)(v21 + v23 * 8) = v15;
        result[v23] = v16;
        ++v18;
        v16 -= 22553;
        v15 -= 46802;
        unint64_t v24 = v13 >> 16;
        unint64_t v25 = v14 >> 16;
        v14 += 116130;
        v13 += 91881;
        *(_DWORD *)(v19 + v22) = v24;
        *(_DWORD *)(v20 + v22) = v25;
      }
      while (v18 != 256);
      break;
    case 5:
      *((_DWORD *)a1 + 31) = 3;
      if (*((_DWORD *)a1 + 15) != 6) {
        goto LABEL_44;
      }
      int v27 = *((_DWORD *)a1 + 91);
      if (v27 == 1)
      {
LABEL_45:
        uint64_t v26 = sub_1003CFA58;
      }
      else
      {
        if (v27) {
          goto LABEL_44;
        }
LABEL_29:
        uint64_t v26 = sub_1003CF5B0;
      }
      goto LABEL_46;
    default:
      goto LABEL_17;
  }
LABEL_47:
  if (*((unsigned char *)a1 + 98)) {
    int v44 = 1;
  }
  else {
    int v44 = *((_DWORD *)a1 + 31);
  }
  *((_DWORD *)a1 + 32) = v44;
  return result;
}

char *sub_1003CF04C(uint64_t a1, char **a2, int a3, uint64_t a4, int a5)
{
  return sub_1003EE814(*a2, a3, a4, 0, a5, *(unsigned int *)(a1 + 116));
}

uint64_t sub_1003CF068(uint64_t result, void *a2, unsigned int a3, void *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 116);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(result + 616) + 48);
      do
      {
        uint64_t v7 = 8 * a3;
        uint64_t v8 = *(unsigned __int8 **)(*a2 + v7);
        uint64_t v9 = *(unsigned __int8 **)(a2[1] + v7);
        uint64_t v10 = *(unsigned __int8 **)(a2[2] + v7);
        ++a3;
        uint64_t v11 = (unsigned char *)*a4;
        uint64_t v12 = v5;
        do
        {
          unsigned int v14 = *v8++;
          uint64_t v13 = v14;
          unsigned int v16 = *v9++;
          uint64_t v15 = v16;
          unsigned int v17 = *v10++;
          uint64_t result = v17;
          *v11++ = (*(_DWORD *)(v6 + 8 * v15 + 2048)
                  + *(void *)(v6 + 8 * v13)
                  + *(_DWORD *)(v6 + 8 * v17 + 4096)) >> 16;
          --v12;
        }
        while (v12);
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t sub_1003CF0F4(uint64_t result, void *a2, unsigned int a3, void *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 116);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(result + 616) + 48);
      do
      {
        uint64_t v7 = 8 * a3;
        uint64_t v8 = *(char **)(*a2 + v7);
        uint64_t v9 = *(unsigned __int8 **)(a2[1] + v7);
        uint64_t v10 = *(unsigned __int8 **)(a2[2] + v7);
        ++a3;
        uint64_t v11 = (unsigned char *)*a4;
        uint64_t v12 = v5;
        do
        {
          char v14 = *v8++;
          char v13 = v14;
          unsigned int v16 = *v9++;
          uint64_t v15 = v16;
          int v17 = *v10++;
          uint64_t result = (v15 ^ 0xFFFFFF80) + v17;
          *v11++ = (*(_DWORD *)(v6 + 8 * v15 + 2048)
                  + *(void *)(v6 + 8 * ((v15 ^ 0x80) + v13))
                  + *(_DWORD *)(v6 + 8 * ((v15 ^ 0x80) + v17) + 4096)) >> 16;
          --v12;
        }
        while (v12);
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

char *sub_1003CF190(char *result, void *a2, unsigned int a3, char **a4, int a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v5 = *((unsigned int *)result + 29);
  if (!v5) {
    return result;
  }
  if (v5 > 7)
  {
    uint64_t v16 = 3 * *((unsigned int *)result + 29);
    uint64_t v17 = v5 & 0xFFFFFFF8;
    uint64_t v18 = 3 * v17;
    if (v5 > 0x1F)
    {
      uint64_t v19 = v5 & 0xFFFFFFE0;
      if (v19 == v5)
      {
        do
        {
          int v33 = *(int8x16_t **)(*a2 + 8 * a3);
          uint64_t v34 = *a4;
          if (*a4 >= &v33->i8[v5] || v33 >= (int8x16_t *)&(*a4)[v16])
          {
            uint64_t v36 = v33 + 1;
            uint64_t v37 = v5 & 0xFFFFFFE0;
            do
            {
              v62.val[0] = v36[-1];
              v64.val[0] = *v36;
              v62.val[1] = v62.val[0];
              v62.val[2] = v62.val[0];
              v64.val[1] = *v36;
              v64.val[2] = *v36;
              uint64_t v38 = v34 + 96;
              vst3q_s8(v34, v62);
              uint64_t v39 = v34 + 48;
              vst3q_s8(v39, v64);
              v36 += 2;
              uint64_t v34 = v38;
              v37 -= 32;
            }
            while (v37);
          }
          else
          {
            unint64_t v40 = v34 + 2;
            uint64_t v41 = v5;
            do
            {
              __int8 v42 = v33->i8[0];
              int v33 = (int8x16_t *)((char *)v33 + 1);
              *unint64_t v40 = v42;
              *(v40 - 1) = v42;
              *(v40 - 2) = v42;
              v40 += 3;
              --v41;
            }
            while (v41);
          }
          ++a3;
          ++a4;
          BOOL v20 = a5-- <= 1;
        }
        while (!v20);
        return result;
      }
      while (1)
      {
        uint64_t v43 = *(int8x16_t **)(*a2 + 8 * a3);
        int v44 = *a4;
        if (*a4 >= &v43->i8[v5] || v43 >= (int8x16_t *)&(*a4)[v16])
        {
          uint64_t v46 = v43 + 1;
          uint64_t v47 = v5 & 0xFFFFFFE0;
          uint64_t v48 = *a4;
          do
          {
            v63.val[0] = v46[-1];
            v65.val[0] = *v46;
            v63.val[1] = v63.val[0];
            v63.val[2] = v63.val[0];
            v65.val[1] = *v46;
            v65.val[2] = *v46;
            unint64_t v49 = v48 + 96;
            vst3q_s8(v48, v63);
            unint64_t v50 = v48 + 48;
            vst3q_s8(v50, v65);
            v46 += 2;
            uint64_t v48 = v49;
            v47 -= 32;
          }
          while (v47);
          uint64_t result = &v44[3 * v19];
          if ((v5 & 0x18) != 0)
          {
            v44 += v18;
            uint64_t v51 = (int8x8_t *)&v43->i8[v19];
            uint64_t v52 = v17 - v19;
            do
            {
              int8x8_t v53 = *v51++;
              v61.val[0] = v53;
              v61.val[1] = v53;
              v61.val[2] = v53;
              vst3_s8(result, v61);
              result += 24;
              v52 -= 8;
            }
            while (v52);
            uint64_t v54 = v5 & 0xFFFFFFF8;
            if (v17 == v5) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v54 = v5 & 0xFFFFFFE0;
            v44 += 3 * v19;
          }
        }
        else
        {
          uint64_t v54 = 0;
        }
        uint64_t v55 = &v43->i8[v54];
        uint64_t result = (char *)(v5 - v54);
        unint64_t v56 = v44 + 2;
        do
        {
          char v57 = *v55++;
          unsigned char *v56 = v57;
          *(v56 - 1) = v57;
          *(v56 - 2) = v57;
          v56 += 3;
          --result;
        }
        while (result);
LABEL_40:
        ++a3;
        ++a4;
        BOOL v20 = a5-- <= 1;
        if (v20) {
          return result;
        }
      }
    }
    while (1)
    {
      uint64_t v21 = *(int8x8_t **)(*a2 + 8 * a3);
      uint64_t v22 = *a4;
      if (*a4 >= (char *)v21 + v5 || v21 >= (int8x8_t *)&(*a4)[v16])
      {
        v58.val[0] = *v21;
        v58.val[1] = *v21;
        v58.val[2] = *v21;
        unint64_t v24 = *a4;
        vst3_s8(v24, v58);
        unint64_t v25 = &v24[v18];
        if (v17 != 8)
        {
          uint64_t v26 = v22 + 24;
          v59.val[0] = v21[1];
          v59.val[1] = v59.val[0];
          v59.val[2] = v59.val[0];
          vst3_s8(v26, v59);
          if (v17 != 16)
          {
            int v27 = v22 + 48;
            v60.val[0] = v21[2];
            v60.val[1] = v60.val[0];
            v60.val[2] = v60.val[0];
            vst3_s8(v27, v60);
          }
        }
        uint64_t v28 = v5 & 0x18;
        uint64_t v22 = v25;
        if (v17 == v5) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v29 = v5 - v28;
      unint64_t v30 = (char *)v21 + v28;
      uint64_t v31 = v22 + 2;
      do
      {
        char v32 = *v30++;
        unsigned char *v31 = v32;
        *(v31 - 1) = v32;
        *(v31 - 2) = v32;
        v31 += 3;
        --v29;
      }
      while (v29);
LABEL_16:
      ++a3;
      ++a4;
      BOOL v20 = a5-- <= 1;
      if (v20) {
        return result;
      }
    }
  }
  int v6 = a5 + 1;
  do
  {
    uint64_t v7 = *(char **)(*a2 + 8 * a3);
    uint64_t v8 = *a4;
    char v9 = *v7;
    v8[2] = *v7;
    v8[1] = v9;
    *uint64_t v8 = v9;
    if (v5 != 1)
    {
      char v10 = v7[1];
      v8[5] = v10;
      v8[4] = v10;
      v8[3] = v10;
      if (v5 != 2)
      {
        char v11 = v7[2];
        v8[8] = v11;
        v8[7] = v11;
        v8[6] = v11;
        if (v5 != 3)
        {
          char v12 = v7[3];
          v8[11] = v12;
          v8[10] = v12;
          v8[9] = v12;
          if (v5 != 4)
          {
            char v13 = v7[4];
            v8[14] = v13;
            v8[13] = v13;
            v8[12] = v13;
            if (v5 != 5)
            {
              char v14 = v7[5];
              v8[17] = v14;
              v8[16] = v14;
              v8[15] = v14;
              if (v5 != 6)
              {
                char v15 = v7[6];
                v8[20] = v15;
                v8[19] = v15;
                v8[18] = v15;
              }
            }
          }
        }
      }
    }
    ++a3;
    ++a4;
    --v6;
  }
  while (v6 > 1);
  return result;
}

uint64_t sub_1003CF4F8(uint64_t result, void *a2, unsigned int a3, uint64_t *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 116);
    if (v5)
    {
      int v6 = *(void **)(result + 616);
      uint64_t v7 = *(void *)(result + 408);
      uint64_t v8 = v6[2];
      uint64_t v9 = v6[3];
      uint64_t v10 = v6[4];
      uint64_t v11 = v6[5];
      do
      {
        uint64_t v12 = 8 * a3;
        char v13 = *(unsigned __int8 **)(*a2 + v12);
        char v14 = *(unsigned __int8 **)(a2[1] + v12);
        char v15 = *(unsigned __int8 **)(a2[2] + v12);
        ++a3;
        uint64_t result = *a4;
        uint64_t v16 = v5;
        do
        {
          unsigned int v18 = *v13++;
          uint64_t v17 = v18;
          unsigned int v20 = *v14++;
          uint64_t v19 = v20;
          unsigned int v21 = *v15++;
          *(unsigned char *)uint64_t result = *(unsigned char *)(v7 + *(int *)(v8 + 4 * v21) + v17);
          *(unsigned char *)(result + 1) = *(unsigned char *)(v7
                                            + v17
                                            + (int)((*(void *)(v10 + 8 * v21) + *(void *)(v11 + 8 * v19)) >> 16));
          *(unsigned char *)(result + 2) = *(unsigned char *)(v7 + *(int *)(v9 + 4 * v19) + v17);
          result += 3;
          --v16;
        }
        while (v16);
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

int8x16_t *sub_1003CF5B0(int8x16_t *result, void *a2, unsigned int a3, char **a4, int a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v5 = result[7].u32[1];
  if (!v5) {
    return result;
  }
  if (v5 <= 7)
  {
    int v6 = a5 + 1;
    do
    {
      uint64_t v7 = 8 * a3;
      uint64_t v8 = *(char **)(*a2 + v7);
      uint64_t v9 = *(char **)(a2[1] + v7);
      uint64_t v10 = *(char **)(a2[2] + v7);
      uint64_t v11 = *a4;
      *uint64_t v11 = *v8;
      v11[1] = *v9;
      v11[2] = *v10;
      if (v5 != 1)
      {
        v11[3] = v8[1];
        v11[4] = v9[1];
        v11[5] = v10[1];
        if (v5 != 2)
        {
          v11[6] = v8[2];
          v11[7] = v9[2];
          v11[8] = v10[2];
          if (v5 != 3)
          {
            v11[9] = v8[3];
            v11[10] = v9[3];
            v11[11] = v10[3];
            if (v5 != 4)
            {
              v11[12] = v8[4];
              v11[13] = v9[4];
              v11[14] = v10[4];
              if (v5 != 5)
              {
                v11[15] = v8[5];
                v11[16] = v9[5];
                v11[17] = v10[5];
                if (v5 != 6)
                {
                  v11[18] = v8[6];
                  v11[19] = v9[6];
                  v11[20] = v10[6];
                }
              }
            }
          }
        }
      }
      ++a4;
      --v6;
      ++a3;
    }
    while (v6 > 1);
    return result;
  }
  uint64_t v12 = 3 * result[7].u32[1];
  uint64_t v13 = v5 & 0xFFFFFFF8;
  uint64_t v14 = 3 * v13;
  if (v5 >= 0x20)
  {
    uint64_t v55 = v5 & 0xFFFFFFE0;
    while (1)
    {
      uint64_t v57 = 0;
      uint64_t v58 = 8 * a3;
      int8x8x3_t v59 = *(int8x16_t **)(*a2 + v58);
      int8x8x3_t v60 = *(int8x16_t **)(a2[1] + v58);
      uint64_t result = *(int8x16_t **)(a2[2] + v58);
      int8x8x3_t v61 = *a4;
      int8x16x3_t v62 = (int8x16_t *)&(*a4)[v12];
      BOOL v64 = *a4 < &v60->i8[v5] && v60 < v62;
      BOOL v66 = v61 < &result->i8[v5] && result < v62;
      BOOL v67 = v59 >= v62 || v61 >= &v59->i8[v5];
      if (v67 && !v64 && !v66)
      {
        unsigned int v68 = v59 + 1;
        uint64_t v69 = v60 + 1;
        uint64_t v70 = result + 1;
        uint64_t v71 = *a4;
        uint64_t v72 = v5 & 0xFFFFFFE0;
        do
        {
          v96.val[0] = v68[-1];
          v97.val[0] = *v68;
          v96.val[1] = v69[-1];
          v97.val[1] = *v69;
          v96.val[2] = v70[-1];
          v97.val[2] = *v70;
          uint64_t v73 = v71 + 96;
          vst3q_s8(v71, v96);
          uint64_t v74 = v71 + 48;
          vst3q_s8(v74, v97);
          v68 += 2;
          v69 += 2;
          v70 += 2;
          uint64_t v71 = v73;
          v72 -= 32;
        }
        while (v72);
        if (v55 == v5) {
          goto LABEL_71;
        }
        uint64_t v56 = 3 * (v5 & 0xFFFFFFE0);
        unsigned int v75 = &v61[v56];
        if ((v5 & 0x18) != 0)
        {
          v61 += v14;
          unsigned int v76 = (int8x8_t *)&v59->i8[v55];
          uint64_t v77 = (int8x8_t *)&v60->i8[v55];
          unint64_t v78 = (int8x8_t *)&result->i8[v55];
          uint64_t v79 = v13 - (v5 & 0xFFFFFFE0);
          do
          {
            int8x8_t v80 = *v76++;
            v95.val[0] = v80;
            int8x8_t v81 = *v77++;
            v95.val[1] = v81;
            int8x8_t v82 = *v78++;
            v95.val[2] = v82;
            vst3_s8(v75, v95);
            v75 += 24;
            v79 -= 8;
          }
          while (v79);
          uint64_t v57 = v5 & 0xFFFFFFF8;
          if (v13 == v5) {
            goto LABEL_71;
          }
        }
        else
        {
          uint64_t v57 = v5 & 0xFFFFFFE0;
          v61 += v56;
        }
      }
      unint64_t v83 = &v59->i8[v57];
      uint64_t v84 = &v60->i8[v57];
      uint64_t result = (int8x16_t *)((char *)result + v57);
      uint64_t v85 = v5 - v57;
      do
      {
        char v86 = *v83++;
        char *v61 = v86;
        char v87 = *v84++;
        v61[1] = v87;
        __int8 v88 = result->i8[0];
        uint64_t result = (int8x16_t *)((char *)result + 1);
        v61[2] = v88;
        v61 += 3;
        --v85;
      }
      while (v85);
LABEL_71:
      ++a3;
      ++a4;
      BOOL v36 = a5-- <= 1;
      if (v36) {
        return result;
      }
    }
  }
  if (v13 == v5)
  {
    do
    {
      uint64_t v38 = 8 * a3;
      uint64_t v39 = *(int8x8_t **)(*a2 + v38);
      unint64_t v40 = *(int8x8_t **)(a2[1] + v38);
      uint64_t v41 = *(int8x8_t **)(a2[2] + v38);
      __int8 v42 = *a4;
      uint64_t v43 = (int8x8_t *)&(*a4)[v12];
      uint64_t result = (int8x16_t *)((char *)v39 + v5);
      BOOL v45 = *a4 < (char *)v40 + v5 && v40 < v43;
      BOOL v47 = v42 < (char *)v41 + v5 && v41 < v43;
      BOOL v48 = v39 >= v43 || v42 >= (char *)result;
      if (!v48 || v45 || v47)
      {
        uint64_t v51 = v5;
        do
        {
          char v52 = v39->i8[0];
          uint64_t v39 = (int8x8_t *)((char *)v39 + 1);
          char *v42 = v52;
          __int8 v53 = v40->i8[0];
          unint64_t v40 = (int8x8_t *)((char *)v40 + 1);
          v42[1] = v53;
          __int8 v54 = v41->i8[0];
          uint64_t v41 = (int8x8_t *)((char *)v41 + 1);
          _OWORD v42[2] = v54;
          v42 += 3;
          --v51;
        }
        while (v51);
      }
      else
      {
        v92.val[0] = *v39;
        v92.val[1] = *v40;
        v92.val[2] = *v41;
        vst3_s8(v42, v92);
        if (v13 != 8)
        {
          unint64_t v49 = v42 + 24;
          v93.val[0] = v39[1];
          v93.val[1] = v40[1];
          v93.val[2] = v41[1];
          vst3_s8(v49, v93);
          if (v13 != 16)
          {
            unint64_t v50 = v42 + 48;
            v94.val[0] = v39[2];
            v94.val[1] = v40[2];
            v94.val[2] = v41[2];
            vst3_s8(v50, v94);
          }
        }
      }
      ++a3;
      ++a4;
      BOOL v36 = a5-- <= 1;
    }
    while (!v36);
  }
  else
  {
    do
    {
      uint64_t v15 = 0;
      uint64_t v16 = 8 * a3;
      uint64_t v17 = *(int8x8_t **)(*a2 + v16);
      unsigned int v18 = *(int8x8_t **)(a2[1] + v16);
      uint64_t v19 = *(int8x8_t **)(a2[2] + v16);
      unsigned int v20 = *a4;
      unsigned int v21 = (int8x8_t *)&(*a4)[v12];
      BOOL v23 = *a4 < (char *)v18 + v5 && v18 < v21;
      BOOL v25 = v20 < (char *)v19 + v5 && v19 < v21;
      BOOL v26 = v17 >= v21 || v20 >= (char *)v17 + v5;
      if (!v26 || v23 || v25)
      {
        uint64_t v28 = *a4;
      }
      else
      {
        v89.val[0] = *v17;
        v89.val[1] = *v18;
        v89.val[2] = *v19;
        int v27 = *a4;
        vst3_s8(v27, v89);
        uint64_t v28 = &v27[v14];
        if (v13 == 8
          || (uint64_t v29 = v20 + 24, v90.val[0] = v17[1],
                              v90.val[1] = v18[1],
                              v90.val[2] = v19[1],
                              vst3_s8(v29, v90),
                              v13 == 16))
        {
          uint64_t v15 = v5 & 0x18;
        }
        else
        {
          uint64_t v37 = v20 + 48;
          v91.val[0] = v17[2];
          v91.val[1] = v18[2];
          v91.val[2] = v19[2];
          vst3_s8(v37, v91);
          uint64_t v15 = v5 & 0xFFFFFFF8;
        }
      }
      ++a3;
      uint64_t result = (int8x16_t *)(v5 - v15);
      unint64_t v30 = (char *)v19 + v15;
      uint64_t v31 = (char *)v18 + v15;
      char v32 = (char *)v17 + v15;
      do
      {
        char v33 = *v32++;
        *uint64_t v28 = v33;
        char v34 = *v31++;
        v28[1] = v34;
        char v35 = *v30++;
        v28[2] = v35;
        v28 += 3;
        uint64_t result = (int8x16_t *)((char *)result - 1);
      }
      while (result);
      ++a4;
      BOOL v36 = a5-- <= 1;
    }
    while (!v36);
  }
  return result;
}

char *sub_1003CFA58(char *result, void *a2, unsigned int a3, char **a4, int a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v5 = *((unsigned int *)result + 29);
  if (!v5) {
    return result;
  }
  if (v5 >= 8)
  {
    v26.i64[0] = 0x8080808080808080;
    v26.i64[1] = 0x8080808080808080;
    while (1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 8 * a3;
      unint64_t v30 = *(int8x16_t **)(*a2 + v29);
      uint64_t v31 = *(int8x16_t **)(a2[1] + v29);
      char v32 = *(int8x16_t **)(a2[2] + v29);
      char v33 = *a4;
      unint64_t v34 = (unint64_t)&(*a4)[3 * v5];
      BOOL v36 = *a4 < &v31->i8[v5] && (unint64_t)v31 < v34;
      BOOL v38 = v33 < &v32->i8[v5] && (unint64_t)v32 < v34;
      BOOL v39 = (unint64_t)v30 >= v34 || v33 >= &v30->i8[v5];
      if (!v39 || v36 || v38)
      {
        uint64_t result = *a4;
      }
      else
      {
        if (v5 < 0x10)
        {
          uint64_t v40 = 0;
LABEL_36:
          uint64_t result = &v33[3 * (v5 & 0xFFFFFFF8)];
          uint64_t v41 = (int8x8_t *)&v30->i8[v40];
          __int8 v42 = (int8x8_t *)&v31->i8[v40];
          uint64_t v43 = (int8x8_t *)&v32->i8[v40];
          int v44 = &v33[3 * v40];
          uint64_t v45 = v40 - (v5 & 0xFFFFFFF8);
          do
          {
            int8x8_t v46 = *v41++;
            int8x8_t v47 = v46;
            int8x8_t v48 = *v42++;
            v67.val[1] = v48;
            int8x8_t v49 = *v43++;
            v67.val[0] = veor_s8(vadd_s8(v67.val[1], v47), (int8x8_t)0x8080808080808080);
            v67.val[2] = veor_s8(vadd_s8(v49, v67.val[1]), (int8x8_t)0x8080808080808080);
            vst3_s8(v44, v67);
            v44 += 24;
            v45 += 8;
          }
          while (v45);
          uint64_t v28 = v5 & 0xFFFFFFF8;
          if (v28 == v5) {
            goto LABEL_14;
          }
          goto LABEL_41;
        }
        uint64_t result = (char *)(v5 & 0xFFFFFFF0);
        int8x8x3_t v59 = *a4;
        int8x8x3_t v60 = v32;
        int8x8x3_t v61 = v31;
        int8x16x3_t v62 = v30;
        do
        {
          int8x16_t v63 = *v62++;
          int8x16_t v64 = v63;
          int8x16_t v65 = *v61++;
          v68.val[1] = v65;
          int8x16_t v66 = *v60++;
          v68.val[0] = veorq_s8(vaddq_s8(v68.val[1], v64), v26);
          v68.val[2] = veorq_s8(vaddq_s8(v66, v68.val[1]), v26);
          vst3q_s8(v59, v68);
          v59 += 48;
          result -= 16;
        }
        while (result);
        if ((v5 & 0xFFFFFFF0) == v5) {
          goto LABEL_14;
        }
        uint64_t v40 = v5 & 0xFFFFFFF0;
        if ((v5 & 8) != 0) {
          goto LABEL_36;
        }
        uint64_t result = &v33[3 * (v5 & 0xFFFFFFF0)];
        uint64_t v28 = v5 & 0xFFFFFFF0;
      }
LABEL_41:
      unint64_t v50 = &v30->i8[v28];
      uint64_t v51 = &v31->i8[v28];
      char v52 = &v32->i8[v28];
      uint64_t v53 = v5 - v28;
      do
      {
        char v55 = *v50++;
        char v54 = v55;
        char v57 = *v51++;
        char v56 = v57;
        char v58 = *v52++;
        *uint64_t result = (v56 + v54) ^ 0x80;
        result[1] = v56;
        result[2] = (v58 + v56) ^ 0x80;
        result += 3;
        --v53;
      }
      while (v53);
LABEL_14:
      ++a3;
      ++a4;
      if (a5-- <= 1) {
        return result;
      }
    }
  }
  int v6 = a5 + 1;
  do
  {
    uint64_t v7 = 8 * a3;
    uint64_t v8 = *(unsigned char **)(*a2 + v7);
    uint64_t v9 = *(char **)(a2[1] + v7);
    uint64_t v10 = *(char **)(a2[2] + v7);
    uint64_t v11 = *a4;
    char v12 = *v9;
    char v13 = *v10;
    *uint64_t v11 = (*v9 + *v8) ^ 0x80;
    v11[1] = v12;
    v11[2] = (v13 + v12) ^ 0x80;
    if (v5 != 1)
    {
      char v14 = v9[1];
      char v15 = v10[1];
      v11[3] = (v14 + v8[1]) ^ 0x80;
      v11[4] = v14;
      v11[5] = (v15 + v14) ^ 0x80;
      if (v5 != 2)
      {
        char v16 = v9[2];
        char v17 = v10[2];
        v11[6] = (v16 + v8[2]) ^ 0x80;
        v11[7] = v16;
        v11[8] = (v17 + v16) ^ 0x80;
        if (v5 != 3)
        {
          char v18 = v9[3];
          char v19 = v10[3];
          v11[9] = (v18 + v8[3]) ^ 0x80;
          v11[10] = v18;
          v11[11] = (v19 + v18) ^ 0x80;
          if (v5 != 4)
          {
            char v20 = v9[4];
            char v21 = v10[4];
            v11[12] = (v20 + v8[4]) ^ 0x80;
            v11[13] = v20;
            v11[14] = (v21 + v20) ^ 0x80;
            if (v5 != 5)
            {
              char v22 = v9[5];
              char v23 = v10[5];
              v11[15] = (v22 + v8[5]) ^ 0x80;
              v11[16] = v22;
              v11[17] = (v23 + v22) ^ 0x80;
              if (v5 != 6)
              {
                char v24 = v9[6];
                char v25 = v10[6];
                v11[18] = (v24 + v8[6]) ^ 0x80;
                v11[19] = v24;
                v11[20] = (v25 + v24) ^ 0x80;
              }
            }
          }
        }
      }
    }
    ++a4;
    --v6;
    ++a3;
  }
  while (v6 > 1);
  return result;
}

unsigned char *sub_1003CFDA4(unsigned char *result, void *a2, unsigned int a3, unsigned char **a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *((unsigned int *)result + 29);
    if (v5)
    {
      int v6 = (void *)*((void *)result + 77);
      uint64_t v7 = *((void *)result + 51);
      uint64_t v8 = v6[2];
      uint64_t v9 = v6[3];
      uint64_t v10 = v6[4];
      uint64_t v11 = v6[5];
      do
      {
        uint64_t v12 = 8 * a3;
        char v13 = *(unsigned __int8 **)(*a2 + v12);
        char v14 = *(unsigned __int8 **)(a2[1] + v12);
        char v15 = *(unsigned __int8 **)(a2[2] + v12);
        uint64_t result = *(unsigned char **)(a2[3] + v12);
        ++a3;
        uint64_t v16 = v5;
        char v17 = *a4;
        do
        {
          int v19 = *v13++;
          int v18 = v19;
          unsigned int v21 = *v14++;
          uint64_t v20 = v21;
          unsigned int v22 = *v15++;
          v18 ^= 0xFFu;
          *char v17 = *(unsigned char *)(v7 + v18 - *(_DWORD *)(v8 + 4 * v22));
          v17[1] = *(unsigned char *)(v7 + (int)(v18 - ((*(void *)(v10 + 8 * v22) + *(void *)(v11 + 8 * v20)) >> 16)));
          v17[2] = *(unsigned char *)(v7 + v18 - *(_DWORD *)(v9 + 4 * v20));
          LOBYTE(v22) = *result++;
          v17[3] = v22;
          v17 += 4;
          --v16;
        }
        while (v16);
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

uint64_t sub_1003CFE74(uint64_t result, uint64_t a2, unsigned int a3, uint64_t *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(int *)(result + 56);
    int v6 = *(_DWORD *)(result + 116);
    if ((int)v5 >= 1 && v6 != 0)
    {
      do
      {
        uint64_t v8 = 0;
        do
        {
          uint64_t v9 = *(char **)(*(void *)(a2 + 8 * v8) + 8 * a3);
          uint64_t v10 = *a4;
          int v11 = v6;
          do
          {
            char v12 = *v9++;
            *(unsigned char *)(v10 + v8) = v12;
            v10 += v5;
            --v11;
          }
          while (v11);
          ++v8;
        }
        while (v8 != v5);
        ++a3;
        ++a4;
      }
      while (a5-- > 1);
    }
  }
  return result;
}

__n128 sub_1003CFEE8(uint64_t a1)
{
  uint64_t v2 = (uint64_t (**)(uint64_t, double, double, float64x2_t, double, float64x2_t, double, double))(**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 600) = v2;
  _DWORD *v2 = sub_1003CFFB4;
  if (*(int *)(a1 + 56) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2 + 11;
    int v6 = (void *)(*(void *)(a1 + 288) + 88);
    do
    {
      uint64_t v7 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
      *int v6 = v7;
      v6 += 12;
      __n128 result = 0uLL;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
      v7[2] = 0u;
      v7[3] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[6] = 0u;
      v7[7] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[10] = 0u;
      v7[11] = 0u;
      v7[12] = 0u;
      v7[13] = 0u;
      v7[14] = 0u;
      v7[15] = 0u;
      *((_DWORD *)v5 + v4++) = -1;
    }
    while (v4 < *(int *)(a1 + 56));
  }
  return result;
}

uint64_t sub_1003CFFB4(uint64_t result, double a2, double a3, float64x2_t a4, double a5, float64x2_t a6, double a7, double a8)
{
  if (*(int *)(result + 56) >= 1)
  {
    uint64_t v8 = (int *)result;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = *(void *)(result + 600);
    float32x4_t v13 = (float32x4_t)vdupq_n_s64(0x3FF63150B14861EFuLL);
    int64x2_t v108 = vdupq_n_s64(0x3FE92469C0A7BF3BuLL);
    float64_t v109 = *(double *)&v13.i64[1];
    char v14 = (void *)(v12 + 8);
    uint64_t v15 = v12 + 88;
    uint64_t v16 = (void *)(*(void *)(result + 288) + 88);
    __asm { FMOV            V0.2D, #1.0 }
    float64_t v107 = *(double *)&_Q0;
    __asm { FMOV            V0.2D, #0.125 }
    float64x2_t v106 = (float64x2_t)_Q0;
    _Q0.i64[0] = 0x587E625468624B42;
    do
    {
      int v31 = *((_DWORD *)v16 - 13);
      int v32 = *((_DWORD *)v16 - 12) + (v31 << 8);
      if (v32 > 1805)
      {
        if (v32 > 3077)
        {
          if (v32 > 3597)
          {
            if (v32 > 4103)
            {
              if (v32 == 4104)
              {
                int v11 = 0;
                uint64_t v10 = (uint64_t (*)())sub_1003E67CC;
                *char v14 = sub_1003E67CC;
                if (!*((unsigned char *)v16 - 36)) {
                  goto LABEL_5;
                }
              }
              else
              {
                if (v32 != 4112)
                {
LABEL_118:
                  uint64_t v34 = *(void *)v8;
                  *(_DWORD *)(v34 + 40) = 7;
                  *(_DWORD *)(v34 + 44) = v31;
                  *(_DWORD *)(*(void *)v8 + 48) = *((_DWORD *)v16 - 12);
                  char v35 = *(uint64_t (***)(int *))v8;
                  goto LABEL_120;
                }
                int v11 = 0;
                uint64_t v10 = (uint64_t (*)())sub_1003E619C;
                *char v14 = sub_1003E619C;
                if (!*((unsigned char *)v16 - 36)) {
                  goto LABEL_5;
                }
              }
            }
            else if (v32 == 3598)
            {
              int v11 = 0;
              uint64_t v10 = (uint64_t (*)())sub_1003E5734;
              *char v14 = sub_1003E5734;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
            }
            else
            {
              if (v32 != 3855) {
                goto LABEL_118;
              }
              int v11 = 0;
              uint64_t v10 = (uint64_t (*)())sub_1003E5C30;
              *char v14 = sub_1003E5C30;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
            }
          }
          else if (v32 > 3340)
          {
            if (v32 == 3341)
            {
              int v11 = 0;
              uint64_t v10 = (uint64_t (*)())sub_1003E51D0;
              *char v14 = sub_1003E51D0;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
            }
            else
            {
              if (v32 != 3591) {
                goto LABEL_118;
              }
              int v11 = 0;
              uint64_t v10 = (uint64_t (*)())sub_1003E6D34;
              *char v14 = sub_1003E6D34;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
            }
          }
          else if (v32 == 3078)
          {
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E7168;
            *char v14 = sub_1003E7168;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
          else
          {
            if (v32 != 3084) {
              goto LABEL_118;
            }
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E4D5C;
            *char v14 = sub_1003E4D5C;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
        }
        else if (v32 > 2312)
        {
          if (v32 > 2569)
          {
            if (v32 == 2570)
            {
              int v11 = 0;
              uint64_t v10 = (uint64_t (*)())sub_1003E44C0;
              *char v14 = sub_1003E44C0;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
            }
            else
            {
              if (v32 != 2827) {
                goto LABEL_118;
              }
              int v11 = 0;
              uint64_t v10 = (uint64_t (*)())sub_1003E48A0;
              *char v14 = sub_1003E48A0;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
            }
          }
          else if (v32 == 2313)
          {
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E4120;
            *char v14 = sub_1003E4120;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
          else
          {
            if (v32 != 2565) {
              goto LABEL_118;
            }
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E74C8;
            *char v14 = sub_1003E74C8;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
        }
        else if (v32 > 2055)
        {
          if (v32 == 2056)
          {
            unsigned int v33 = v8[23];
            if (v33 >= 3)
            {
              char v35 = *(uint64_t (***)(int *))v8;
              *(_DWORD *)(*(void *)v8 + 40) = 49;
LABEL_120:
              __n128 result = (*v35)(v8);
              *char v14 = v10;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
              goto LABEL_121;
            }
            uint64_t v10 = off_10049C800[v33];
            int v11 = v8[23];
            *char v14 = v10;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
          else
          {
            if (v32 != 2064) {
              goto LABEL_118;
            }
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E82C0;
            *char v14 = sub_1003E82C0;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
        }
        else if (v32 == 1806)
        {
          int v11 = 0;
          uint64_t v10 = (uint64_t (*)())sub_1003E87A0;
          *char v14 = sub_1003E87A0;
          if (!*((unsigned char *)v16 - 36)) {
            goto LABEL_5;
          }
        }
        else
        {
          if (v32 != 2052) {
            goto LABEL_118;
          }
          int v11 = 0;
          uint64_t v10 = (uint64_t (*)())sub_1003E77C0;
          *char v14 = sub_1003E77C0;
          if (!*((unsigned char *)v16 - 36)) {
            goto LABEL_5;
          }
        }
      }
      else if (v32 > 1027)
      {
        if (v32 > 1538)
        {
          if (v32 > 1547)
          {
            if (v32 == 1548)
            {
              int v11 = 0;
              uint64_t v10 = (uint64_t (*)())sub_1003E8BB8;
              *char v14 = sub_1003E8BB8;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
            }
            else
            {
              if (v32 != 1799) {
                goto LABEL_118;
              }
              int v11 = 0;
              uint64_t v10 = (uint64_t (*)())sub_1003E2E88;
              *char v14 = sub_1003E2E88;
              if (!*((unsigned char *)v16 - 36)) {
                goto LABEL_5;
              }
            }
          }
          else if (v32 == 1539)
          {
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E7CF8;
            *char v14 = sub_1003E7CF8;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
          else
          {
            if (v32 != 1542) {
              goto LABEL_118;
            }
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E31D8;
            *char v14 = sub_1003E31D8;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
        }
        else if (v32 > 1284)
        {
          if (v32 == 1285)
          {
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E3428;
            *char v14 = sub_1003E3428;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
          else
          {
            if (v32 != 1290) {
              goto LABEL_118;
            }
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E8F28;
            *char v14 = sub_1003E8F28;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
        }
        else if (v32 == 1028)
        {
          int v11 = 0;
          uint64_t v10 = (uint64_t (*)())sub_1003E3AEC;
          *char v14 = sub_1003E3AEC;
          if (!*((unsigned char *)v16 - 36)) {
            goto LABEL_5;
          }
        }
        else
        {
          if (v32 != 1032) {
            goto LABEL_118;
          }
          int v11 = 0;
          uint64_t v10 = (uint64_t (*)())sub_1003E9238;
          *char v14 = sub_1003E9238;
          if (!*((unsigned char *)v16 - 36)) {
            goto LABEL_5;
          }
        }
      }
      else if (v32 > 515)
      {
        if (v32 > 773)
        {
          if (v32 == 774)
          {
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E98A0;
            *char v14 = sub_1003E98A0;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
          else
          {
            if (v32 != 1026) {
              goto LABEL_118;
            }
            int v11 = 0;
            uint64_t v10 = (uint64_t (*)())sub_1003E8104;
            *char v14 = sub_1003E8104;
            if (!*((unsigned char *)v16 - 36)) {
              goto LABEL_5;
            }
          }
        }
        else if (v32 == 516)
        {
          int v11 = 0;
          uint64_t v10 = (uint64_t (*)())sub_1003E9CA8;
          *char v14 = sub_1003E9CA8;
          if (!*((unsigned char *)v16 - 36)) {
            goto LABEL_5;
          }
        }
        else
        {
          if (v32 != 771) {
            goto LABEL_118;
          }
          int v11 = 0;
          uint64_t v10 = (uint64_t (*)())sub_1003E3E70;
          *char v14 = sub_1003E3E70;
          if (!*((unsigned char *)v16 - 36)) {
            goto LABEL_5;
          }
        }
      }
      else if (v32 > 512)
      {
        if (v32 == 513)
        {
          int v11 = 0;
          uint64_t v10 = (uint64_t (*)())sub_1003E8270;
          *char v14 = sub_1003E8270;
          if (!*((unsigned char *)v16 - 36)) {
            goto LABEL_5;
          }
        }
        else
        {
          if (v32 != 514) {
            goto LABEL_118;
          }
          int v11 = 0;
          uint64_t v10 = (uint64_t (*)())sub_1003E404C;
          *char v14 = sub_1003E404C;
          if (!*((unsigned char *)v16 - 36)) {
            goto LABEL_5;
          }
        }
      }
      else if (v32 == 257)
      {
        int v11 = 0;
        uint64_t v10 = (uint64_t (*)())sub_1003E40EC;
        *char v14 = sub_1003E40EC;
        if (!*((unsigned char *)v16 - 36)) {
          goto LABEL_5;
        }
      }
      else
      {
        if (v32 != 258) {
          goto LABEL_118;
        }
        int v11 = 0;
        uint64_t v10 = (uint64_t (*)())sub_1003E9E30;
        *char v14 = sub_1003E9E30;
        if (!*((unsigned char *)v16 - 36)) {
          goto LABEL_5;
        }
      }
LABEL_121:
      if (*(_DWORD *)(v15 + 4 * v9) == v11) {
        goto LABEL_5;
      }
      uint64_t v36 = *(v16 - 1);
      if (!v36) {
        goto LABEL_5;
      }
      *(_DWORD *)(v15 + 4 * v9) = v11;
      if (v11 == 2)
      {
        _Q0.i16[0] = *(_WORD *)v36;
        v13.i16[0] = *(_WORD *)(v36 + 2);
        double v38 = (double)v13.u64[0];
        LOWORD(a4.f64[0]) = *(_WORD *)(v36 + 4);
        v39.f64[0] = (double)*(unint64_t *)&a4.f64[0];
        v40.f64[0] = v107;
        v40.f64[1] = v38;
        LOWORD(v38) = *(_WORD *)(v36 + 6);
        v39.f64[1] = (double)*(unint64_t *)&v38;
        v41.f64[1] = v109;
        v41.f64[0] = (double)_Q0.u64[0];
        float64x2_t v42 = vmulq_f64(v40, v41);
        float64x2_t v43 = vmulq_f64(vmulq_f64(v39, (float64x2_t)xmmword_10040D230), v106);
        float32x4_t v44 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v42, v106)), v43);
        LOWORD(v43.f64[0]) = *(_WORD *)(v36 + 8);
        v43.f64[0] = (double)*(unint64_t *)&v43.f64[0];
        LOWORD(v39.f64[0]) = *(_WORD *)(v36 + 10);
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 12);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0];
        LOWORD(a6.f64[0]) = *(_WORD *)(v36 + 14);
        double v45 = (double)*(unint64_t *)&a6.f64[0];
        v46.f64[0] = v107;
        v46.f64[1] = (double)*(unint64_t *)&v39.f64[0];
        v40.f64[1] = v45;
        *(void *)&v39.f64[1] = v108.i64[1];
        v39.f64[0] = v43.f64[0];
        LOWORD(v43.f64[0]) = *(_WORD *)(v36 + 16);
        LOWORD(v45) = *(_WORD *)(v36 + 18);
        double v47 = (double)*(unint64_t *)&v45 * 1.38703985;
        LOWORD(a8) = *(_WORD *)(v36 + 20);
        v48.f64[0] = (double)*(unint64_t *)&a8 * 1.38703985;
        v49.f64[0] = 1.38703985;
        v49.f64[1] = v47;
        LOWORD(v47) = *(_WORD *)(v36 + 22);
        v48.f64[1] = (double)*(unint64_t *)&v47 * 1.38703985;
        v50.f64[1] = v109;
        v50.f64[0] = (double)*(unint64_t *)&v43.f64[0];
        float64x2_t v51 = vmulq_f64(v46, v39);
        float64x2_t v52 = vmulq_f64(vmulq_f64(v40, (float64x2_t)xmmword_10040D240), v106);
        uint64_t v23 = *v16;
        *(float32x4_t *)uint64_t v23 = v44;
        *(float32x4_t *)(v23 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v51, v106)), v52);
        float64x2_t v53 = vmulq_f64(vmulq_f64(v48, (float64x2_t)xmmword_10040D230), v106);
        float32x4_t v54 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(v49, v50), v106)), v53);
        LOWORD(v53.f64[0]) = *(_WORD *)(v36 + 24);
        LOWORD(v52.f64[0]) = *(_WORD *)(v36 + 26);
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 28);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 1.38703985;
        LOWORD(v50.f64[0]) = *(_WORD *)(v36 + 30);
        v50.f64[0] = (double)*(unint64_t *)&v50.f64[0] * 1.38703985;
        v46.f64[0] = 1.38703985;
        v46.f64[1] = (double)*(unint64_t *)&v52.f64[0] * 1.38703985;
        v40.f64[1] = v50.f64[0];
        *(void *)&v52.f64[1] = v108.i64[1];
        v52.f64[0] = (double)*(unint64_t *)&v53.f64[0];
        float64x2_t v55 = vmulq_f64(v46, v52);
        float64x2_t v56 = vmulq_f64(vmulq_f64(v40, (float64x2_t)xmmword_10040D240), v106);
        float32x4_t v57 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v55, v106)), v56);
        LOWORD(v56.f64[0]) = *(_WORD *)(v36 + 32);
        v56.f64[0] = (double)*(unint64_t *)&v56.f64[0];
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 34);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 1.30656296;
        LOWORD(v50.f64[0]) = *(_WORD *)(v36 + 36);
        v50.f64[0] = (double)*(unint64_t *)&v50.f64[0] * 1.30656296;
        v46.f64[0] = 1.30656296;
        v46.f64[1] = v40.f64[0];
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 38);
        v50.f64[1] = (double)*(unint64_t *)&v40.f64[0] * 1.30656296;
        v40.f64[1] = v109;
        v40.f64[0] = v56.f64[0];
        *(float32x4_t *)(v23 + 32) = v54;
        *(float32x4_t *)(v23 + 48) = v57;
        float64x2_t v58 = vmulq_f64(vmulq_f64(v50, (float64x2_t)xmmword_10040D230), v106);
        float32x4_t v59 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(v46, v40), v106)), v58);
        LOWORD(v58.f64[0]) = *(_WORD *)(v36 + 40);
        LOWORD(v56.f64[0]) = *(_WORD *)(v36 + 42);
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 44);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 1.30656296;
        LOWORD(v50.f64[0]) = *(_WORD *)(v36 + 46);
        v46.f64[1] = (double)*(unint64_t *)&v56.f64[0] * 1.30656296;
        v40.f64[1] = (double)*(unint64_t *)&v50.f64[0] * 1.30656296;
        *(void *)&v56.f64[1] = v108.i64[1];
        v56.f64[0] = (double)*(unint64_t *)&v58.f64[0];
        float64x2_t v60 = vmulq_f64(v46, v56);
        float64x2_t v61 = vmulq_f64(vmulq_f64(v40, (float64x2_t)xmmword_10040D240), v106);
        float64x2_t v62 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v60, v106)), v61);
        *(float32x4_t *)(v23 + 64) = v59;
        *(float64x2_t *)(v23 + 80) = v62;
        v59.i16[0] = *(_WORD *)(v36 + 48);
        LOWORD(v62.f64[0]) = *(_WORD *)(v36 + 50);
        LOWORD(v61.f64[0]) = *(_WORD *)(v36 + 52);
        v61.f64[0] = (double)*(unint64_t *)&v61.f64[0] * 1.1758756;
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 54);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 1.1758756;
        v50.f64[0] = 1.1758756;
        v50.f64[1] = (double)*(unint64_t *)&v62.f64[0] * 1.1758756;
        v61.f64[1] = v40.f64[0];
        v62.f64[1] = v109;
        v62.f64[0] = (double)v59.u64[0];
        float64x2_t v63 = vmulq_f64(v50, v62);
        float64x2_t v64 = vmulq_f64(vmulq_f64(v61, (float64x2_t)xmmword_10040D230), v106);
        float32x4_t v65 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v63, v106)), v64);
        LOWORD(v64.f64[0]) = *(_WORD *)(v36 + 56);
        LOWORD(v61.f64[0]) = *(_WORD *)(v36 + 58);
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 60);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 1.1758756;
        LOWORD(v50.f64[0]) = *(_WORD *)(v36 + 62);
        v46.f64[0] = 1.1758756;
        v46.f64[1] = (double)*(unint64_t *)&v61.f64[0] * 1.1758756;
        v40.f64[1] = (double)*(unint64_t *)&v50.f64[0] * 1.1758756;
        *(void *)&v61.f64[1] = v108.i64[1];
        v61.f64[0] = (double)*(unint64_t *)&v64.f64[0];
        float64x2_t v66 = vmulq_f64(v46, v61);
        float64x2_t v67 = vmulq_f64(vmulq_f64(v40, (float64x2_t)xmmword_10040D240), v106);
        float64x2_t v68 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v66, v106)), v67);
        *(float32x4_t *)(v23 + 96) = v65;
        *(float64x2_t *)(v23 + 112) = v68;
        v65.i16[0] = *(_WORD *)(v36 + 64);
        LOWORD(v68.f64[0]) = *(_WORD *)(v36 + 66);
        LOWORD(v67.f64[0]) = *(_WORD *)(v36 + 68);
        v67.f64[0] = (double)*(unint64_t *)&v67.f64[0];
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 70);
        v50.f64[0] = v107;
        v50.f64[1] = (double)*(unint64_t *)&v68.f64[0];
        v67.f64[1] = (double)*(unint64_t *)&v40.f64[0];
        v68.f64[1] = v109;
        v68.f64[0] = (double)v65.u64[0];
        float64x2_t v69 = vmulq_f64(v50, v68);
        float64x2_t v70 = vmulq_f64(vmulq_f64(v67, (float64x2_t)xmmword_10040D230), v106);
        float32x4_t v71 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v69, v106)), v70);
        LOWORD(v70.f64[0]) = *(_WORD *)(v36 + 72);
        LOWORD(v67.f64[0]) = *(_WORD *)(v36 + 74);
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 76);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0];
        LOWORD(v50.f64[0]) = *(_WORD *)(v36 + 78);
        v50.f64[0] = (double)*(unint64_t *)&v50.f64[0];
        v46.f64[0] = v107;
        v46.f64[1] = (double)*(unint64_t *)&v67.f64[0];
        v40.f64[1] = v50.f64[0];
        *(void *)&v67.f64[1] = v108.i64[1];
        v67.f64[0] = (double)*(unint64_t *)&v70.f64[0];
        float64x2_t v72 = vmulq_f64(v46, v67);
        float64x2_t v73 = vmulq_f64(vmulq_f64(v40, (float64x2_t)xmmword_10040D240), v106);
        float32x4_t v74 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v72, v106)), v73);
        LOWORD(v73.f64[0]) = *(_WORD *)(v36 + 80);
        v73.f64[0] = (double)*(unint64_t *)&v73.f64[0];
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 82);
        a8 = 0.785694958;
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 0.785694958;
        LOWORD(v50.f64[0]) = *(_WORD *)(v36 + 84);
        v50.f64[0] = (double)*(unint64_t *)&v50.f64[0] * 0.785694958;
        v46.f64[0] = 0.785694958;
        v46.f64[1] = v40.f64[0];
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 86);
        v50.f64[1] = (double)*(unint64_t *)&v40.f64[0] * 0.785694958;
        v40.f64[1] = v109;
        v40.f64[0] = v73.f64[0];
        *(float32x4_t *)(v23 + 128) = v71;
        *(float32x4_t *)(v23 + 144) = v74;
        float64x2_t v75 = vmulq_f64(vmulq_f64(v50, (float64x2_t)xmmword_10040D230), v106);
        float32x4_t v76 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(v46, v40), v106)), v75);
        LOWORD(v75.f64[0]) = *(_WORD *)(v36 + 88);
        LOWORD(v73.f64[0]) = *(_WORD *)(v36 + 90);
        v73.f64[0] = (double)*(unint64_t *)&v73.f64[0] * 0.785694958;
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 92);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 0.785694958;
        v50.f64[0] = 0.785694958;
        v50.f64[1] = v73.f64[0];
        LOWORD(v73.f64[0]) = *(_WORD *)(v36 + 94);
        v40.f64[1] = (double)*(unint64_t *)&v73.f64[0] * 0.785694958;
        *(void *)&v73.f64[1] = v108.i64[1];
        v73.f64[0] = (double)*(unint64_t *)&v75.f64[0];
        float64x2_t v77 = vmulq_f64(v50, v73);
        float64x2_t v78 = vmulq_f64(vmulq_f64(v40, (float64x2_t)xmmword_10040D240), v106);
        float64x2_t v79 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v77, v106)), v78);
        *(float32x4_t *)(v23 + 160) = v76;
        *(float64x2_t *)(v23 + 176) = v79;
        v76.i16[0] = *(_WORD *)(v36 + 96);
        LOWORD(v79.f64[0]) = *(_WORD *)(v36 + 98);
        LOWORD(v78.f64[0]) = *(_WORD *)(v36 + 100);
        v78.f64[0] = (double)*(unint64_t *)&v78.f64[0] * 0.5411961;
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 102);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 0.5411961;
        v50.f64[0] = 0.5411961;
        v50.f64[1] = (double)*(unint64_t *)&v79.f64[0] * 0.5411961;
        v78.f64[1] = v40.f64[0];
        v79.f64[1] = v109;
        v79.f64[0] = (double)v76.u64[0];
        float64x2_t v80 = vmulq_f64(v50, v79);
        float64x2_t v81 = vmulq_f64(vmulq_f64(v78, (float64x2_t)xmmword_10040D230), v106);
        float32x4_t v82 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v80, v106)), v81);
        LOWORD(v81.f64[0]) = *(_WORD *)(v36 + 104);
        LOWORD(v78.f64[0]) = *(_WORD *)(v36 + 106);
        v78.f64[0] = (double)*(unint64_t *)&v78.f64[0] * 0.5411961;
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 108);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 0.5411961;
        v50.f64[1] = v78.f64[0];
        LOWORD(v78.f64[0]) = *(_WORD *)(v36 + 110);
        v40.f64[1] = (double)*(unint64_t *)&v78.f64[0] * 0.5411961;
        *(void *)&v78.f64[1] = v108.i64[1];
        v78.f64[0] = (double)*(unint64_t *)&v81.f64[0];
        float64x2_t v83 = vmulq_f64(v50, v78);
        float64x2_t v84 = vmulq_f64(vmulq_f64(v40, (float64x2_t)xmmword_10040D240), v106);
        float64x2_t v85 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v83, v106)), v84);
        *(float32x4_t *)(v23 + 192) = v82;
        *(float64x2_t *)(v23 + 208) = v85;
        v82.i16[0] = *(_WORD *)(v36 + 112);
        LOWORD(v85.f64[0]) = *(_WORD *)(v36 + 114);
        LOWORD(v84.f64[0]) = *(_WORD *)(v36 + 116);
        v84.f64[0] = (double)*(unint64_t *)&v84.f64[0] * 0.275899379;
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 118);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0] * 0.275899379;
        a6.f64[0] = 0.275899379;
        a6.f64[1] = (double)*(unint64_t *)&v85.f64[0] * 0.275899379;
        v84.f64[1] = v40.f64[0];
        v85.f64[1] = v109;
        v85.f64[0] = (double)v82.u64[0];
        float64x2_t v86 = vmulq_f64(a6, v85);
        float64x2_t v87 = vmulq_f64(vmulq_f64(v84, (float64x2_t)xmmword_10040D230), v106);
        _Q0 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v86, v106)), v87);
        LOWORD(v87.f64[0]) = *(_WORD *)(v36 + 120);
        LOWORD(v84.f64[0]) = *(_WORD *)(v36 + 122);
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 124);
        v40.f64[0] = (double)*(unint64_t *)&v40.f64[0];
        a6.f64[1] = (double)*(unint64_t *)&v84.f64[0] * 0.275899379;
        v84.f64[0] = v40.f64[0] * 0.275899379;
        LOWORD(v40.f64[0]) = *(_WORD *)(v36 + 126);
        v84.f64[1] = (double)*(unint64_t *)&v40.f64[0] * 0.275899379;
        *(void *)&v40.f64[1] = v108.i64[1];
        v40.f64[0] = (double)*(unint64_t *)&v87.f64[0];
        a4 = vmulq_f64(vmulq_f64(v84, (float64x2_t)xmmword_10040D240), v106);
        float32x4_t v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(a6, v40), v106)), a4);
      }
      else
      {
        if (v11 == 1)
        {
          int8x16_t v88 = *(int8x16_t *)(v36 + 16);
          v89.i64[0] = 0x80000000800;
          v89.i64[1] = 0x80000000800;
          v90.i64[0] = 0x80000000800;
          v90.i64[1] = 0x80000000800;
          uint64_t v91 = *v16;
          uint32x4_t v92 = vshrq_n_u32(vmlal_u16(v90, (uint16x4_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v36, *(int8x16_t *)v36, 8uLL), (uint16x4_t)0x11A822A332494000), 0xCuLL);
          *(uint32x4_t *)uint64_t v91 = vshrq_n_u32(vmlal_u16(v89, *(uint16x4_t *)v36, (uint16x4_t)0x4B42539F58C54000), 0xCuLL);
          *(uint32x4_t *)(v91 + 16) = v92;
          v92.i64[0] = vextq_s8(v88, v88, 8uLL).u64[0];
          v93.i64[0] = 0x80000000800;
          v93.i64[1] = 0x80000000800;
          uint32x4_t v94 = vmlal_u16(v93, *(uint16x4_t *)v88.i8, (uint16x4_t)0x686273FC7B2158C5);
          v88.i64[0] = 0x80000000800;
          v88.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v91 + 32) = vshrq_n_u32(v94, 0xCuLL);
          *(uint32x4_t *)(v91 + 48) = vshrq_n_u32(vmlal_u16((uint32x4_t)v88, *(uint16x4_t *)v92.i8, (uint16x4_t)0x187E300B45BF58C5), 0xCuLL);
          int8x16_t v95 = *(int8x16_t *)(v36 + 32);
          int8x16_t v96 = *(int8x16_t *)(v36 + 48);
          v94.i64[0] = vextq_s8(v95, v95, 8uLL).u64[0];
          v89.i64[0] = 0x80000000800;
          v89.i64[1] = 0x80000000800;
          uint32x4_t v97 = vmlal_u16(v89, *(uint16x4_t *)v95.i8, (uint16x4_t)0x62546D4173FC539FLL);
          v95.i64[0] = 0x80000000800;
          v95.i64[1] = 0x80000000800;
          a6.f64[0] = 1.51977652e-197;
          *(uint32x4_t *)(v91 + 64) = vshrq_n_u32(v97, 0xCuLL);
          *(uint32x4_t *)(v91 + 80) = vshrq_n_u32(vmlal_u16((uint32x4_t)v95, *(uint16x4_t *)v94.i8, (uint16x4_t)0x17122D4141B3539FLL), 0xCuLL);
          v95.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
          v94.i64[0] = 0x80000000800;
          v94.i64[1] = 0x80000000800;
          uint32x4_t v98 = vmlal_u16(v94, *(uint16x4_t *)v96.i8, (uint16x4_t)0x587E625468624B42);
          v96.i64[0] = 0x80000000800;
          v96.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v91 + 96) = vshrq_n_u32(v98, 0xCuLL);
          *(uint32x4_t *)(v91 + 112) = vshrq_n_u32(vmlal_u16((uint32x4_t)v96, *(uint16x4_t *)v95.i8, (uint16x4_t)0x14C328BA3B214B42), 0xCuLL);
          int8x16_t v99 = *(int8x16_t *)(v36 + 64);
          int8x16_t v100 = *(int8x16_t *)(v36 + 80);
          v98.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
          v97.i64[0] = 0x80000000800;
          v97.i64[1] = 0x80000000800;
          uint32x4_t v101 = vmlal_u16(v97, *(uint16x4_t *)v99.i8, (uint16x4_t)0x4B42539F58C54000);
          v99.i64[0] = 0x80000000800;
          v99.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v91 + 128) = vshrq_n_u32(v101, 0xCuLL);
          *(uint32x4_t *)(v91 + 144) = vshrq_n_u32(vmlal_u16((uint32x4_t)v99, *(uint16x4_t *)v98.i8, (uint16x4_t)0x11A822A332494000), 0xCuLL);
          v99.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
          v98.i64[0] = 0x80000000800;
          v98.i64[1] = 0x80000000800;
          uint32x4_t v102 = vmlal_u16(v98, *(uint16x4_t *)v100.i8, (uint16x4_t)0x3B2141B345BF3249);
          v100.i64[0] = 0x80000000800;
          v100.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v91 + 160) = vshrq_n_u32(v102, 0xCuLL);
          *(uint32x4_t *)(v91 + 176) = vshrq_n_u32(vmlal_u16((uint32x4_t)v100, *(uint16x4_t *)v99.i8, (uint16x4_t)0xDE01B3727823249), 0xCuLL);
          int8x16_t v103 = *(int8x16_t *)(v36 + 96);
          int8x16_t v104 = *(int8x16_t *)(v36 + 112);
          v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
          v101.i64[0] = 0x80000000800;
          v101.i64[1] = 0x80000000800;
          uint32x4_t v105 = vmlal_u16(v101, *(uint16x4_t *)v103.i8, (uint16x4_t)0x28BA2D41300B22A3);
          v103.i64[0] = 0x80000000800;
          v103.i64[1] = 0x80000000800;
          *(uint32x4_t *)(v91 + 192) = vshrq_n_u32(v105, 0xCuLL);
          *(uint32x4_t *)(v91 + 208) = vshrq_n_u32(vmlal_u16((uint32x4_t)v103, *(uint16x4_t *)v102.i8, (uint16x4_t)0x98E12BF1B3722A3), 0xCuLL);
          v103.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          v102.i64[0] = 0x80000000800;
          v102.i64[1] = 0x80000000800;
          a4 = (float64x2_t)vmlal_u16(v102, *(uint16x4_t *)v104.i8, (uint16x4_t)0x14C31712187E11A8);
          v104.i64[0] = 0x80000000800;
          v104.i64[1] = 0x80000000800;
          _Q0 = (float32x4_t)vshrq_n_u32(vmlal_u16((uint32x4_t)v104, *(uint16x4_t *)v103.i8, (uint16x4_t)0x4DF098E0DE011A8), 0xCuLL);
          float32x4_t v13 = (float32x4_t)vshrq_n_u32((uint32x4_t)a4, 0xCuLL);
          *(float32x4_t *)(v91 + 224) = v13;
          *(float32x4_t *)(v91 + 240) = _Q0;
          goto LABEL_5;
        }
        if (v11)
        {
          uint64_t v37 = *(uint64_t (***)(int *))v8;
          *((_DWORD *)v37 + 10) = 49;
          __n128 result = (*v37)(v8);
          goto LABEL_5;
        }
        uint64_t v23 = *v16;
        uint32x4_t v24 = vmovl_u16(*(uint16x4_t *)(v36 + 8));
        *(uint32x4_t *)uint64_t v23 = vmovl_u16(*(uint16x4_t *)v36);
        *(uint32x4_t *)(v23 + 16) = v24;
        uint32x4_t v25 = vmovl_u16(*(uint16x4_t *)(v36 + 24));
        *(uint32x4_t *)(v23 + 32) = vmovl_u16(*(uint16x4_t *)(v36 + 16));
        *(uint32x4_t *)(v23 + 48) = v25;
        uint32x4_t v26 = vmovl_u16(*(uint16x4_t *)(v36 + 40));
        *(uint32x4_t *)(v23 + 64) = vmovl_u16(*(uint16x4_t *)(v36 + 32));
        *(uint32x4_t *)(v23 + 80) = v26;
        uint32x4_t v27 = vmovl_u16(*(uint16x4_t *)(v36 + 56));
        *(uint32x4_t *)(v23 + 96) = vmovl_u16(*(uint16x4_t *)(v36 + 48));
        *(uint32x4_t *)(v23 + 112) = v27;
        uint32x4_t v28 = vmovl_u16(*(uint16x4_t *)(v36 + 72));
        *(uint32x4_t *)(v23 + 128) = vmovl_u16(*(uint16x4_t *)(v36 + 64));
        *(uint32x4_t *)(v23 + 144) = v28;
        uint32x4_t v29 = vmovl_u16(*(uint16x4_t *)(v36 + 88));
        *(uint32x4_t *)(v23 + 160) = vmovl_u16(*(uint16x4_t *)(v36 + 80));
        *(uint32x4_t *)(v23 + 176) = v29;
        uint32x4_t v30 = vmovl_u16(*(uint16x4_t *)(v36 + 104));
        *(uint32x4_t *)(v23 + 192) = vmovl_u16(*(uint16x4_t *)(v36 + 96));
        *(uint32x4_t *)(v23 + 208) = v30;
        _Q0 = (float32x4_t)vmovl_u16(*(uint16x4_t *)(v36 + 112));
        float32x4_t v13 = (float32x4_t)vmovl_u16(*(uint16x4_t *)(v36 + 120));
      }
      *(float32x4_t *)(v23 + 224) = _Q0;
      *(float32x4_t *)(v23 + 240) = v13;
LABEL_5:
      v16 += 12;
      ++v9;
      ++v14;
    }
    while (v9 < v8[14]);
  }
  return result;
}

double sub_1003D0F7C(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v3 = v2;
  *(void *)(a1 + 592) = v2;
  *(void *)uint64_t v2 = sub_1003D1068;
  *(void *)(v2 + 16) = sub_1003D170C;
  if (*(unsigned char *)(a1 + 297))
  {
    uint64_t v4 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, (uint64_t)*(int *)(a1 + 56) << 8);
    *(void *)(a1 + 176) = v4;
    if (*(int *)(a1 + 56) >= 1)
    {
      int v5 = 0;
      *(void *)&long long v6 = -1;
      *((void *)&v6 + 1) = -1;
      do
      {
        v4[14] = v6;
        v4[15] = v6;
        v4[12] = v6;
        v4[13] = v6;
        v4[10] = v6;
        v4[11] = v6;
        v4[8] = v6;
        v4[9] = v6;
        v4[6] = v6;
        v4[7] = v6;
        v4[4] = v6;
        v4[5] = v6;
        v4[2] = v6;
        v4[3] = v6;
        *uint64_t v4 = v6;
        v4[1] = v6;
        v4 += 16;
        ++v5;
      }
      while (v5 < *(_DWORD *)(a1 + 56));
    }
    double result = 0.0;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
  }
  return result;
}

void sub_1003D1068(_DWORD *a1)
{
  uint64_t v2 = *((void *)a1 + 74);
  int v3 = a1[127];
  if (!*((unsigned char *)a1 + 297))
  {
    if (v3 || a1[129] || a1[130] || ((int v74 = a1[128], *((unsigned char *)a1 + 296)) || v74 <= 63) && v74 != a1[134])
    {
      uint64_t v5 = *(void *)a1;
      *(_DWORD *)(v5 + 40) = 125;
      (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, 0xFFFFFFFFLL);
    }
    long long v6 = sub_1003D3618;
    if (a1[134] == 63) {
      long long v6 = sub_1003D3B00;
    }
    *(void *)(v2 + 8) = v6;
    if ((int)a1[104] >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)&a1[2 * v7 + 106];
        sub_1003D2370((uint64_t)a1, 1, *(_DWORD *)(v8 + 20), (void *)(v2 + 8 * *(int *)(v8 + 20) + 112));
        if (a1[134]) {
          sub_1003D2370((uint64_t)a1, 0, *(_DWORD *)(v8 + 24), (void *)(v2 + 8 * *(int *)(v8 + 24) + 144));
        }
        *(_DWORD *)(v2 + 44 + 4 * v7++) = 0;
      }
      while (v7 < (int)a1[104]);
    }
    if ((int)a1[116] >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v2 + 336;
      do
      {
        uint64_t v19 = *(void *)&a1[2 * a1[v9 + 117] + 106];
        uint64_t v20 = *(int *)(v19 + 24);
        uint64_t v21 = v10 + 8 * v9;
        *(void *)(v21 - 160) = *(void *)(v2 + 8 * *(int *)(v19 + 20) + 112);
        *(void *)(v21 - 80) = *(void *)(v2 + 8 * v20 + 144);
        if (*(unsigned char *)(v19 + 52))
        {
          int v22 = *(_DWORD *)(v19 + 36);
          int v23 = *(_DWORD *)(v19 + 40);
          int v18 = 1;
          switch(a1[134])
          {
            case 0:
              break;
            case 3:
              unsigned int v24 = v23 - 3;
              int v25 = v23 - 1;
              unsigned int v26 = v22 - 3;
              int v27 = v22 - 1;
              if (v24 < 0xFFFFFFFE) {
                int v28 = 1;
              }
              else {
                int v28 = v25;
              }
              if (v26 < 0xFFFFFFFE) {
                int v16 = 1;
              }
              else {
                int v16 = v27;
              }
              char v17 = (char *)&unk_10040D2F0 + 8 * v28;
              goto LABEL_27;
            case 8:
              unsigned int v29 = v23 - 4;
              int v30 = v23 - 1;
              unsigned int v31 = v22 - 4;
              int v32 = v22 - 1;
              if (v29 >= 0xFFFFFFFD) {
                int v33 = v30;
              }
              else {
                int v33 = 2;
              }
              if (v31 >= 0xFFFFFFFD) {
                int v16 = v32;
              }
              else {
                int v16 = 2;
              }
              char v17 = (char *)&unk_10040D300 + 12 * v33;
              goto LABEL_27;
            case 0xF:
              unsigned int v34 = v23 - 5;
              int v35 = v23 - 1;
              unsigned int v36 = v22 - 5;
              int v37 = v22 - 1;
              if (v34 >= 0xFFFFFFFC) {
                int v38 = v35;
              }
              else {
                int v38 = 3;
              }
              if (v36 >= 0xFFFFFFFC) {
                int v16 = v37;
              }
              else {
                int v16 = 3;
              }
              char v17 = (char *)&unk_10040D324 + 16 * v38;
              goto LABEL_27;
            case 0x18:
              unsigned int v39 = v23 - 6;
              int v40 = v23 - 1;
              unsigned int v41 = v22 - 6;
              int v42 = v22 - 1;
              if (v39 >= 0xFFFFFFFB) {
                int v43 = v40;
              }
              else {
                int v43 = 4;
              }
              if (v41 >= 0xFFFFFFFB) {
                int v16 = v42;
              }
              else {
                int v16 = 4;
              }
              char v17 = (char *)&unk_10040D364 + 20 * v43;
              goto LABEL_27;
            case 0x23:
              unsigned int v44 = v23 - 7;
              int v45 = v23 - 1;
              unsigned int v46 = v22 - 7;
              int v47 = v22 - 1;
              if (v44 >= 0xFFFFFFFA) {
                int v48 = v45;
              }
              else {
                int v48 = 5;
              }
              if (v46 >= 0xFFFFFFFA) {
                int v16 = v47;
              }
              else {
                int v16 = 5;
              }
              char v17 = (char *)&unk_10040D3C8 + 24 * v48;
              goto LABEL_27;
            case 0x30:
              unsigned int v49 = v23 - 8;
              int v50 = v23 - 1;
              unsigned int v51 = v22 - 8;
              int v52 = v22 - 1;
              if (v49 >= 0xFFFFFFF9) {
                int v53 = v50;
              }
              else {
                int v53 = 6;
              }
              if (v51 >= 0xFFFFFFF9) {
                int v16 = v52;
              }
              else {
                int v16 = 6;
              }
              char v17 = (char *)&unk_10040D458 + 28 * v53;
              goto LABEL_27;
            default:
              unsigned int v11 = v23 - 9;
              int v12 = v23 - 1;
              unsigned int v13 = v22 - 9;
              int v14 = v22 - 1;
              if (v11 >= 0xFFFFFFF8) {
                int v15 = v12;
              }
              else {
                int v15 = 7;
              }
              if (v13 >= 0xFFFFFFF8) {
                int v16 = v14;
              }
              else {
                int v16 = 7;
              }
              char v17 = (char *)&unk_10040D51C + 32 * v15;
LABEL_27:
              int v18 = *(_DWORD *)&v17[4 * v16] + 1;
              break;
          }
        }
        else
        {
          int v18 = 0;
        }
        *(_DWORD *)(v10 + 4 * v9++) = v18;
      }
      while (v9 < (int)a1[116]);
    }
    goto LABEL_107;
  }
  int v4 = a1[128];
  if (v3)
  {
    if (v4 < v3 || v4 > a1[134] || a1[104] != 1) {
      goto LABEL_78;
    }
  }
  else if (v4)
  {
    goto LABEL_78;
  }
  int v54 = a1[129];
  if (v54)
  {
    int v55 = v54 - 1;
    if (v55 == a1[130] && v55 < 14) {
      goto LABEL_79;
    }
  }
  else if ((int)a1[130] < 14)
  {
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v56 = *(void *)a1;
  *(_DWORD *)(v56 + 40) = 17;
  *(_DWORD *)(v56 + 44) = v3;
  *(_DWORD *)(*(void *)a1 + 48) = a1[128];
  *(_DWORD *)(*(void *)a1 + 52) = a1[129];
  *(_DWORD *)(*(void *)a1 + 56) = a1[130];
  (**(void (***)(_DWORD *))a1)(a1);
LABEL_79:
  LODWORD(v57) = a1[104];
  if ((int)v57 >= 1)
  {
    for (uint64_t i = 0; i < v57; ++i)
    {
      uint64_t v59 = *(int *)(*(void *)&a1[2 * i + 106] + 4);
      float64x2_t v60 = (_DWORD *)(*((void *)a1 + 22) + (v59 << 8));
      int v61 = a1[127];
      if (v61 && (*v60 & 0x80000000) != 0)
      {
        uint64_t v65 = *(void *)a1;
        *(_DWORD *)(v65 + 40) = 118;
        *(_DWORD *)(v65 + 44) = v59;
        *(_DWORD *)(*(void *)a1 + 48) = 0;
        (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 0xFFFFFFFFLL);
        int v61 = a1[127];
        if (v61 <= a1[128])
        {
LABEL_85:
          uint64_t v62 = v61;
          do
          {
            if (a1[129] != (v60[v62] & ~((int)v60[v62] >> 31)))
            {
              uint64_t v64 = *(void *)a1;
              *(_DWORD *)(v64 + 40) = 118;
              *(_DWORD *)(v64 + 44) = v59;
              *(_DWORD *)(*(void *)a1 + 48) = v62;
              (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 0xFFFFFFFFLL);
            }
            v60[v62] = a1[130];
          }
          while (v62++ < (int)a1[128]);
        }
      }
      else if (v61 <= a1[128])
      {
        goto LABEL_85;
      }
      uint64_t v57 = (int)a1[104];
    }
  }
  int v66 = a1[127];
  BOOL v67 = v66 == 0;
  if (v66) {
    float64x2_t v68 = sub_1003D19D4;
  }
  else {
    float64x2_t v68 = sub_1003D1738;
  }
  float64x2_t v69 = sub_1003D1E34;
  if (v67) {
    float64x2_t v69 = sub_1003D1CA8;
  }
  if (!a1[129]) {
    float64x2_t v69 = v68;
  }
  *(void *)(v2 + 8) = v69;
  if ((int)v57 >= 1)
  {
    uint64_t v70 = 0;
    do
    {
      uint64_t v73 = *(void *)&a1[2 * v70 + 106];
      if (a1[127])
      {
        uint64_t v71 = *(int *)(v73 + 24);
        uint64_t v72 = v2 + 8 * v71;
        sub_1003D2370((uint64_t)a1, 0, v71, (void *)(v72 + 72));
        *(void *)(v2 + 104) = *(void *)(v72 + 72);
      }
      else if (!a1[129])
      {
        sub_1003D2370((uint64_t)a1, 1, *(_DWORD *)(v73 + 20), (void *)(v2 + 8 * *(int *)(v73 + 20) + 72));
      }
      *(_DWORD *)(v2 + 44 + 4 * v70++) = 0;
    }
    while (v70 < (int)a1[104]);
  }
  *(_DWORD *)(v2 + 40) = 0;
LABEL_107:
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 60) = 0;
  *(_DWORD *)(v2 + 64) = a1[87];
}

uint64_t sub_1003D170C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 592);
  *(_DWORD *)(*(void *)(result + 584) + 32) += *(_DWORD *)(v1 + 32) / 8;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_1003D1738(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 592);
  int v5 = *(_DWORD *)(a1 + 520);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    uint64_t v25 = *(void *)(a1 + 584);
    *(_DWORD *)(v25 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(v25 + 16))(a1);
    if (!result) {
      return result;
    }
    if (*(int *)(a1 + 416) >= 1)
    {
      uint64_t v26 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v26++) = 0;
      while (v26 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540)) {
      *(unsigned char *)(v4 + 60) = 0;
    }
  }
  if (!*(unsigned char *)(v4 + 60))
  {
    uint64_t v33 = a1;
    long long v6 = *(unsigned __int8 ***)(a1 + 40);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    unsigned int v29 = *v6;
    int v30 = v8;
    uint64_t v9 = *(void *)(v4 + 24);
    int v10 = *(_DWORD *)(v4 + 32);
    long long v27 = *(_OWORD *)(v4 + 40);
    int v28 = *(_DWORD *)(v4 + 56);
    if (*(int *)(a1 + 464) >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      while (1)
      {
        char v17 = *(_WORD **)(a2 + 8 * v11);
        uint64_t v18 = *(int *)(a1 + 468 + 4 * v11);
        uint64_t v19 = *(void *)(v4 + 8 * *(int *)(*(void *)(a1 + 8 * v18 + 424) + 20) + 72);
        if (v10 > 7) {
          goto LABEL_16;
        }
        uint64_t result = sub_1003D3FE4(&v29, v9, v10, 0);
        if (!result) {
          return result;
        }
        uint64_t v9 = v31;
        int v10 = v32;
        if ((int)v32 > 7)
        {
LABEL_16:
          uint64_t v22 = v9 >> (v10 - 8);
          int v23 = *(_DWORD *)(v19 + 4 * v22 + 288);
          if (v23)
          {
            v10 -= v23;
            uint64_t v24 = v19 + v22;
            int v21 = *(unsigned __int8 *)(v24 + 1312);
            if (*(unsigned char *)(v24 + 1312)) {
              goto LABEL_21;
            }
            goto LABEL_18;
          }
          int v21 = sub_1003D415C((uint64_t)&v29, v9, v10, v19, 9);
          if (v21 < 0) {
            return 0;
          }
        }
        else
        {
          int v21 = sub_1003D415C((uint64_t)&v29, v31, v32, v19, 1);
          if (v21 < 0) {
            return 0;
          }
        }
        uint64_t v9 = v31;
        int v10 = v32;
        if (v21)
        {
LABEL_21:
          if (v10 < v21)
          {
            uint64_t result = sub_1003D3FE4(&v29, v9, v10, v21);
            if (!result) {
              return result;
            }
            uint64_t v9 = v31;
            int v10 = v32;
          }
          v10 -= v21;
          int v12 = dword_10040D61C[v21];
          int v13 = v12 & (v9 >> v10);
          if (v13 > dword_10040D61C[v21 - 1]) {
            int v12 = 0;
          }
          int v14 = v13 - v12;
          goto LABEL_10;
        }
LABEL_18:
        int v14 = 0;
LABEL_10:
        int v15 = (char *)&v27 + 4 * v18;
        int v16 = *((_DWORD *)v15 + 1) + v14;
        *((_DWORD *)v15 + 1) = v16;
        *char v17 = v16 << v5;
        if (++v11 >= *(int *)(a1 + 464))
        {
          long long v6 = *(unsigned __int8 ***)(a1 + 40);
          uint64_t v7 = v29;
          uint64_t v8 = v30;
          break;
        }
      }
    }
    *long long v6 = v7;
    v6[1] = v8;
    *(void *)(v4 + 24) = v9;
    *(_DWORD *)(v4 + 32) = v10;
    *(_OWORD *)(v4 + 40) = v27;
    *(_DWORD *)(v4 + 56) = v28;
  }
  --*(_DWORD *)(v4 + 64);
  return 1;
}

uint64_t sub_1003D19D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    uint64_t v7 = *(void *)(a1 + 584);
    *(_DWORD *)(v7 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(v7 + 16))(a1);
    if (!result) {
      return result;
    }
    if (*(int *)(a1 + 416) >= 1)
    {
      uint64_t v9 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v9++) = 0;
      while (v9 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540)) {
      *(unsigned char *)(v4 + 60) = 0;
    }
  }
  if (*(unsigned char *)(v4 + 60)) {
    goto LABEL_16;
  }
  int v5 = *(_DWORD *)(v4 + 40);
  if (v5)
  {
    int v6 = v5 - 1;
    goto LABEL_15;
  }
  int v10 = *(_DWORD *)(a1 + 512);
  int v11 = *(_DWORD *)(a1 + 520);
  uint64_t v12 = *(void *)(a1 + 528);
  uint64_t v38 = a1;
  uint64_t v13 = *(void *)(a1 + 40);
  int v15 = *(unsigned __int8 **)v13;
  uint64_t v14 = *(void *)(v13 + 8);
  unsigned int v34 = v15;
  uint64_t v35 = v14;
  uint64_t v16 = *(void *)(v4 + 24);
  int v17 = *(_DWORD *)(v4 + 32);
  int v18 = *(_DWORD *)(a1 + 508);
  if (v18 > v10)
  {
LABEL_13:
    int v6 = 0;
    goto LABEL_14;
  }
  uint64_t v21 = *a2;
  uint64_t v22 = *(void *)(v4 + 104);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  while (1)
  {
    while (1)
    {
      if (v17 <= 7)
      {
        uint64_t result = sub_1003D3FE4(&v34, v16, v17, 0);
        if (!result) {
          return result;
        }
        uint64_t v16 = v36;
        int v17 = v37;
        if ((int)v37 <= 7)
        {
          uint64_t v26 = v22;
          int v27 = 1;
          goto LABEL_32;
        }
      }
      uint64_t v28 = v16 >> (v17 - 8);
      int v29 = *(_DWORD *)(v22 + 4 * v28 + 288);
      if (v29) {
        break;
      }
      uint64_t v26 = v22;
      int v27 = 9;
LABEL_32:
      unsigned int v30 = sub_1003D415C((uint64_t)&v34, v16, v17, v26, v27);
      if ((v30 & 0x80000000) != 0) {
        return 0;
      }
      uint64_t v16 = v36;
      int v17 = v37;
      int v31 = v30 >> 4;
      int v32 = v30 & 0xF;
      if ((v30 & 0xF) == 0) {
        goto LABEL_28;
      }
LABEL_34:
      if (v17 < v32)
      {
        uint64_t result = sub_1003D3FE4(&v34, v16, v17, v32);
        if (!result) {
          return result;
        }
        uint64_t v16 = v36;
        int v17 = v37;
      }
      int v23 = v31 + v18;
      v17 -= v32;
      int v24 = dword_10040D61C[v32];
      int v25 = v24 & (v16 >> v17);
      if (v25 > dword_10040D61C[v32 - 1]) {
        int v24 = 0;
      }
      *(_WORD *)(v21 + 2 * *(int *)(v12 + 4 * v23)) = (v25 - v24) << v11;
      int v18 = v23 + 1;
      if (v23 >= v10) {
        goto LABEL_13;
      }
    }
    v17 -= v29;
    unsigned int v30 = *(unsigned __int8 *)(v22 + v28 + 1312);
    int v31 = v30 >> 4;
    int v32 = v30 & 0xF;
    if ((v30 & 0xF) != 0) {
      goto LABEL_34;
    }
LABEL_28:
    if (v31 != 15) {
      break;
    }
    int v33 = v18 + 15;
    v18 += 16;
    if (v33 >= v10) {
      goto LABEL_13;
    }
  }
  if (v30 < 0x10) {
    goto LABEL_13;
  }
  if (v17 >= v31) {
    goto LABEL_42;
  }
  uint64_t result = sub_1003D3FE4(&v34, v16, v17, v31);
  if (result)
  {
    uint64_t v16 = v36;
    int v17 = v37;
LABEL_42:
    v17 -= v31;
    int v6 = (dword_10040D61C[v31] & (v16 >> v17)) + ~(-1 << v31);
LABEL_14:
    uint64_t v19 = *(void **)(a1 + 40);
    uint64_t v20 = v35;
    *uint64_t v19 = v34;
    v19[1] = v20;
    *(void *)(v4 + 24) = v16;
    *(_DWORD *)(v4 + 32) = v17;
LABEL_15:
    *(_DWORD *)(v4 + 40) = v6;
LABEL_16:
    --*(_DWORD *)(v4 + 64);
    return 1;
  }
  return result;
}

uint64_t sub_1003D1CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    uint64_t v13 = *(void *)(a1 + 584);
    *(_DWORD *)(v13 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(v13 + 16))(a1);
    if (!result) {
      return result;
    }
    if (*(int *)(a1 + 416) >= 1)
    {
      uint64_t v14 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v14++) = 0;
      while (v14 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540)) {
      *(unsigned char *)(v4 + 60) = 0;
    }
  }
  uint64_t v19 = a1;
  int v5 = *(unsigned __int8 ***)(a1 + 40);
  int v6 = *v5;
  uint64_t v7 = v5[1];
  int v15 = *v5;
  uint64_t v16 = v7;
  unint64_t v8 = *(void *)(v4 + 24);
  int v9 = *(_DWORD *)(v4 + 32);
  if (*(int *)(a1 + 464) < 1) {
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  int v11 = 1 << *(_DWORD *)(a1 + 520);
  do
  {
    if (v9 <= 0)
    {
      uint64_t result = sub_1003D3FE4(&v15, v8, v9, 1);
      if (!result) {
        return result;
      }
      unint64_t v8 = v17;
      int v9 = v18 - 1;
      if ((v17 >> (v18 - 1))) {
LABEL_11:
      }
        **(_WORD **)(a2 + 8 * v10) |= v11;
    }
    else if ((v8 >> --v9))
    {
      goto LABEL_11;
    }
    ++v10;
  }
  while (v10 < *(int *)(a1 + 464));
  int v5 = *(unsigned __int8 ***)(a1 + 40);
  int v6 = v15;
  uint64_t v7 = v16;
LABEL_13:
  *int v5 = v6;
  v5[1] = v7;
  *(void *)(v4 + 24) = v8;
  *(_DWORD *)(v4 + 32) = v9;
  --*(_DWORD *)(v4 + 64);
  return 1;
}

uint64_t sub_1003D1E34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[74];
  if (*((_DWORD *)a1 + 87) && !*(_DWORD *)(v4 + 64))
  {
    uint64_t v23 = a1[73];
    *(_DWORD *)(v23 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t *))(v23 + 16))(a1);
    if (!result) {
      return result;
    }
    if (*((int *)a1 + 104) >= 1)
    {
      uint64_t v25 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v25++) = 0;
      while (v25 < *((int *)a1 + 104));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *((_DWORD *)a1 + 87);
    if (!*((_DWORD *)a1 + 135)) {
      *(unsigned char *)(v4 + 60) = 0;
    }
  }
  if (*(unsigned char *)(v4 + 60)) {
    goto LABEL_29;
  }
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  int v5 = *((_DWORD *)a1 + 128);
  char v6 = *((_DWORD *)a1 + 130);
  int v7 = 1 << v6;
  int v63 = -1 << v6;
  uint64_t v62 = a1[66];
  float64x2_t v68 = a1;
  uint64_t v8 = a1[5];
  uint64_t v10 = *(unsigned __int8 **)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v64 = v10;
  uint64_t v65 = v9;
  uint64_t v11 = *(void *)(v4 + 24);
  int v12 = *(_DWORD *)(v4 + 32);
  int v13 = *(_DWORD *)(v4 + 40);
  uint64_t v14 = *a2;
  int v15 = *((_DWORD *)a1 + 127);
  if (v13)
  {
    int v61 = 0;
LABEL_6:
    if (v15 <= v5) {
      int v16 = v5;
    }
    else {
      int v16 = v15;
    }
    unint64_t v17 = (int *)(v62 + 4 * v15);
    int v18 = v16 - v15 + 1;
    while (1)
    {
      uint64_t v20 = *v17++;
      uint64_t v19 = v20;
      if (*(_WORD *)(v14 + 2 * v20))
      {
        if (v12 <= 0)
        {
          if (!sub_1003D3FE4(&v64, v11, v12, 1)) {
            goto LABEL_79;
          }
          uint64_t v11 = v66;
          int v12 = v67 - 1;
          if (((v66 >> (v67 - 1)) & 1) == 0) {
            goto LABEL_10;
          }
LABEL_17:
          int v21 = *(__int16 *)(v14 + 2 * v19);
          if ((v7 & v21) == 0)
          {
            __int16 v22 = v63;
            if (v21 >= 0) {
              __int16 v22 = v7;
            }
            *(_WORD *)(v14 + 2 * v19) = v21 + v22;
          }
          goto LABEL_10;
        }
        if (((unint64_t)v11 >> --v12)) {
          goto LABEL_17;
        }
      }
LABEL_10:
      if (!--v18)
      {
        int v26 = v13 - 1;
        goto LABEL_28;
      }
    }
  }
  int v61 = 0;
  uint64_t v29 = *(void *)(v4 + 104);
  uint64_t v57 = v29;
  int v58 = v5;
  do
  {
    if (v12 > 7) {
      goto LABEL_38;
    }
    if (!sub_1003D3FE4(&v64, v11, v12, 0)) {
      goto LABEL_79;
    }
    uint64_t v11 = v66;
    int v12 = v67;
    if ((int)v67 > 7)
    {
LABEL_38:
      int v34 = *(_DWORD *)(v29 + 4 * (v11 >> (v12 - 8)) + 288);
      if (v34)
      {
        int v35 = v12 - v34;
        unsigned int v36 = *(unsigned __int8 *)(v29 + (v11 >> (v12 - 8)) + 1312);
        int v37 = v36 >> 4;
        int v38 = v36 & 0xF;
        if ((v36 & 0xF) != 0) {
          goto LABEL_45;
        }
        goto LABEL_40;
      }
      uint64_t v31 = v11;
      uint64_t v32 = v29;
      int v33 = 9;
    }
    else
    {
      uint64_t v31 = v66;
      uint64_t v32 = v29;
      int v33 = 1;
    }
    unsigned int v36 = sub_1003D415C((uint64_t)&v64, v31, v12, v32, v33);
    if ((v36 & 0x80000000) != 0) {
      goto LABEL_79;
    }
    uint64_t v11 = v66;
    int v35 = v67;
    int v37 = v36 >> 4;
    int v38 = v36 & 0xF;
    if ((v36 & 0xF) != 0)
    {
LABEL_45:
      if (v38 != 1)
      {
        uint64_t v39 = *a1;
        *(_DWORD *)(v39 + 40) = 121;
        (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(a1, 0xFFFFFFFFLL);
      }
      if (v35 <= 0)
      {
        if (!sub_1003D3FE4(&v64, v11, v35, 1)) {
          goto LABEL_79;
        }
        uint64_t v11 = v66;
        int v35 = v67;
      }
      --v35;
      int v40 = v63;
      if (((unint64_t)v11 >> v35)) {
        int v40 = v7;
      }
      int v60 = v40;
      goto LABEL_53;
    }
LABEL_40:
    if (v37 != 15)
    {
      int v13 = 1 << v37;
      if (v36 < 0x10)
      {
        int v12 = v35;
        goto LABEL_6;
      }
      if (v35 >= v37)
      {
LABEL_77:
        int v12 = v35 - v37;
        v13 += dword_10040D61C[v37] & (v11 >> (v35 - v37));
        if (!v13) {
          break;
        }
        goto LABEL_6;
      }
      if (sub_1003D3FE4(&v64, v11, v35, v37))
      {
        uint64_t v11 = v66;
        int v35 = v67;
        goto LABEL_77;
      }
LABEL_79:
      if (v61)
      {
        if (v61 == 1)
        {
          uint64_t v50 = 1;
        }
        else
        {
          uint64_t v51 = v61 & 0xFFFFFFFE;
          uint64_t v50 = v61 - v51;
          int v52 = &v69[v61 - 1];
          uint64_t v53 = v51;
          do
          {
            uint64_t v54 = *(v52 - 1);
            *(_WORD *)(v14 + 2 * *v52) = 0;
            *(_WORD *)(v14 + 2 * v54) = 0;
            v52 -= 2;
            v53 -= 2;
          }
          while (v53);
          if (v51 == v61) {
            return 0;
          }
        }
        uint64_t v55 = v50 - 1;
        do
          *(_WORD *)(v14 + 2 * (int)v69[v55]) = 0;
        while (v55--);
      }
      return 0;
    }
    int v60 = 0;
LABEL_53:
    if (v15 <= v5) {
      int v41 = v5;
    }
    else {
      int v41 = v15;
    }
    int v59 = v41 + 1;
    uint64_t v42 = v41 - (uint64_t)v15 + 1;
    int v43 = (int *)(v62 + 4 * v15);
    int v12 = v35;
    do
    {
      uint64_t v46 = *v43++;
      uint64_t v45 = v46;
      if (*(_WORD *)(v14 + 2 * v46))
      {
        if (v12 > 0)
        {
          if ((((unint64_t)v11 >> --v12) & 1) == 0) {
            goto LABEL_58;
          }
LABEL_65:
          int v47 = *(__int16 *)(v14 + 2 * v45);
          if ((v7 & v47) == 0)
          {
            __int16 v48 = v63;
            if (v47 >= 0) {
              __int16 v48 = v7;
            }
            *(_WORD *)(v14 + 2 * v45) = v47 + v48;
          }
          goto LABEL_58;
        }
        if (!sub_1003D3FE4(&v64, v11, v12, 1)) {
          goto LABEL_79;
        }
        uint64_t v11 = v66;
        int v12 = v67 - 1;
        if ((v66 >> (v67 - 1))) {
          goto LABEL_65;
        }
      }
      else
      {
        BOOL v44 = __OFSUB__(v37--, 1);
        if (v37 < 0 != v44) {
          goto LABEL_70;
        }
      }
LABEL_58:
      ++v15;
      --v42;
    }
    while (v42);
    int v15 = v59;
LABEL_70:
    int v5 = v58;
    uint64_t v29 = v57;
    if (v60)
    {
      uint64_t v49 = *(int *)(v62 + 4 * v15);
      *(_WORD *)(v14 + 2 * v49) = v60;
      v69[v61++] = v49;
    }
  }
  while (v15++ < v58);
  int v26 = 0;
LABEL_28:
  int v27 = (void *)a1[5];
  uint64_t v28 = v65;
  *int v27 = v64;
  v27[1] = v28;
  *(void *)(v4 + 24) = v11;
  *(_DWORD *)(v4 + 32) = v12;
  *(_DWORD *)(v4 + 40) = v26;
LABEL_29:
  --*(_DWORD *)(v4 + 64);
  return 1;
}

void sub_1003D2370(uint64_t a1, int a2, unsigned int a3, void *a4)
{
  if (a3 >= 4)
  {
    uint64_t v8 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v8 + 10) = 52;
    *((_DWORD *)v8 + 11) = a3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  uint64_t v9 = a1 + 8 * (int)a3;
  uint64_t v10 = (unsigned __int8 **)(v9 + 216);
  uint64_t v11 = (unsigned __int8 **)(v9 + 248);
  int v159 = a2;
  if (a2) {
    uint64_t v11 = v10;
  }
  int v12 = *v11;
  if (*v11)
  {
    int v13 = (void *)*a4;
    if (*a4) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v57 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v57 + 10) = 52;
    *((_DWORD *)v57 + 11) = a3;
    (**(void (***)(uint64_t))a1)(a1);
    int v13 = (void *)*a4;
    if (*a4)
    {
LABEL_7:
      v13[35] = v12;
      size_t v14 = v12[1];
      if (!v12[1]) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  int v13 = (void *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1568);
  *a4 = v13;
  v13[35] = v12;
  size_t v14 = v12[1];
  if (v12[1]) {
LABEL_8:
  }
    memset(__b, 1, v14);
LABEL_9:
  size_t v15 = v12[2];
  if ((v14 + v15) >= 0x101)
  {
    int v16 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v16 + 10) = 9;
    (*v16)(a1);
  }
  if (v15)
  {
    memset(&__b[v14], 2, v15);
    LODWORD(v14) = v14 + v15;
  }
  size_t v17 = v12[3];
  if ((int)v14 + (int)v17 >= 257)
  {
    int v18 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v18 + 10) = 9;
    (*v18)(a1);
  }
  if (v17)
  {
    memset(&__b[v14], 3, v17);
    LODWORD(v14) = v14 + v17;
  }
  size_t v19 = v12[4];
  if ((int)v14 + (int)v19 >= 257)
  {
    uint64_t v20 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v20 + 10) = 9;
    (*v20)(a1);
  }
  if (v19)
  {
    memset(&__b[v14], 4, v19);
    LODWORD(v14) = v14 + v19;
  }
  size_t v21 = v12[5];
  if ((int)v14 + (int)v21 >= 257)
  {
    __int16 v22 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v22 + 10) = 9;
    (*v22)(a1);
  }
  if (v21)
  {
    memset(&__b[v14], 5, v21);
    LODWORD(v14) = v14 + v21;
  }
  size_t v23 = v12[6];
  if ((int)v14 + (int)v23 >= 257)
  {
    int v24 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v24 + 10) = 9;
    (*v24)(a1);
  }
  if (v23)
  {
    memset(&__b[v14], 6, v23);
    LODWORD(v14) = v14 + v23;
  }
  size_t v25 = v12[7];
  if ((int)v14 + (int)v25 >= 257)
  {
    int v26 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v26 + 10) = 9;
    (*v26)(a1);
  }
  if (v25)
  {
    memset(&__b[v14], 7, v25);
    LODWORD(v14) = v14 + v25;
  }
  size_t v27 = v12[8];
  if ((int)v14 + (int)v27 >= 257)
  {
    uint64_t v28 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v28 + 10) = 9;
    (*v28)(a1);
  }
  if (v27)
  {
    memset(&__b[v14], 8, v27);
    LODWORD(v14) = v14 + v27;
  }
  size_t v29 = v12[9];
  if ((int)v14 + (int)v29 >= 257)
  {
    unsigned int v30 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v30 + 10) = 9;
    (*v30)(a1);
  }
  if (v29)
  {
    memset(&__b[v14], 9, v29);
    LODWORD(v14) = v14 + v29;
  }
  size_t v31 = v12[10];
  if ((int)v14 + (int)v31 >= 257)
  {
    uint64_t v32 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v32 + 10) = 9;
    (*v32)(a1);
  }
  if (v31)
  {
    memset(&__b[v14], 10, v31);
    LODWORD(v14) = v14 + v31;
  }
  size_t v33 = v12[11];
  if ((int)v14 + (int)v33 >= 257)
  {
    int v34 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v34 + 10) = 9;
    (*v34)(a1);
  }
  if (v33)
  {
    memset(&__b[v14], 11, v33);
    LODWORD(v14) = v14 + v33;
  }
  size_t v35 = v12[12];
  if ((int)v14 + (int)v35 >= 257)
  {
    unsigned int v36 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v36 + 10) = 9;
    (*v36)(a1);
  }
  if (v35)
  {
    memset(&__b[v14], 12, v35);
    LODWORD(v14) = v14 + v35;
  }
  size_t v37 = v12[13];
  if ((int)v14 + (int)v37 >= 257)
  {
    int v38 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v38 + 10) = 9;
    (*v38)(a1);
  }
  if (v37)
  {
    memset(&__b[v14], 13, v37);
    LODWORD(v14) = v14 + v37;
  }
  size_t v39 = v12[14];
  if ((int)v14 + (int)v39 >= 257)
  {
    int v40 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v40 + 10) = 9;
    (*v40)(a1);
  }
  if (v39)
  {
    memset(&__b[v14], 14, v39);
    LODWORD(v14) = v14 + v39;
  }
  size_t v41 = v12[15];
  if ((int)v14 + (int)v41 >= 257)
  {
    uint64_t v42 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v42 + 10) = 9;
    (*v42)(a1);
  }
  if (v41)
  {
    memset(&__b[v14], 15, v41);
    LODWORD(v14) = v14 + v41;
  }
  size_t v43 = v12[16];
  if ((int)v14 + (int)v43 >= 257)
  {
    BOOL v44 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v44 + 10) = 9;
    (*v44)(a1);
  }
  uint64_t v161 = (void *)a1;
  if (v43)
  {
    memset(&__b[v14], 16, v43);
    LODWORD(v14) = v14 + v43;
  }
  int v160 = v14;
  __b[v14] = 0;
  int v45 = __b[0];
  if (__b[0])
  {
    unsigned int v46 = 0;
    int v47 = 0;
    char v48 = __b[0];
    do
    {
      if (v45 == v48)
      {
        uint64_t v49 = &v162[v47];
        uint64_t v50 = &__b[v47 + 1];
        do
        {
          *v49++ = v46++;
          int v51 = *v50++;
          ++v47;
        }
        while (v45 == v51);
      }
      if (1 << v45 <= v46)
      {
        int v52 = v161;
        uint64_t v53 = *v161;
        *(_DWORD *)(v53 + 40) = 9;
        (*(void (**)(void *))v53)(v52);
      }
      v46 *= 2;
      ++v45;
      char v48 = __b[v47];
    }
    while (v48);
  }
  LODWORD(v54) = v12[1];
  if (v12[1])
  {
    v13[19] = -(uint64_t)v162[0];
    LODWORD(v54) = v12[1];
    uint64_t v55 = v161;
    v13[1] = v162[v12[1] - 1];
    if (v12[2]) {
      goto LABEL_79;
    }
  }
  else
  {
    uint64_t v55 = v161;
    v13[1] = -1;
    if (v12[2])
    {
LABEL_79:
      v13[20] = v54 - (unint64_t)v162[v54];
      unint64_t v54 = v54 + (unint64_t)v12[2];
      v13[2] = v162[v54 - 1];
      if (v12[3]) {
        goto LABEL_80;
      }
      goto LABEL_99;
    }
  }
  v13[2] = -1;
  if (v12[3])
  {
LABEL_80:
    v13[21] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[3];
    v13[3] = v162[v54 - 1];
    if (v12[4]) {
      goto LABEL_81;
    }
    goto LABEL_100;
  }
LABEL_99:
  v13[3] = -1;
  if (v12[4])
  {
LABEL_81:
    v13[22] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[4];
    v13[4] = v162[v54 - 1];
    if (v12[5]) {
      goto LABEL_82;
    }
    goto LABEL_101;
  }
LABEL_100:
  v13[4] = -1;
  if (v12[5])
  {
LABEL_82:
    v13[23] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[5];
    v13[5] = v162[v54 - 1];
    if (v12[6]) {
      goto LABEL_83;
    }
    goto LABEL_102;
  }
LABEL_101:
  v13[5] = -1;
  if (v12[6])
  {
LABEL_83:
    v13[24] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[6];
    v13[6] = v162[v54 - 1];
    if (v12[7]) {
      goto LABEL_84;
    }
    goto LABEL_103;
  }
LABEL_102:
  v13[6] = -1;
  if (v12[7])
  {
LABEL_84:
    v13[25] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[7];
    v13[7] = v162[v54 - 1];
    if (v12[8]) {
      goto LABEL_85;
    }
    goto LABEL_104;
  }
LABEL_103:
  v13[7] = -1;
  if (v12[8])
  {
LABEL_85:
    v13[26] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[8];
    v13[8] = v162[v54 - 1];
    if (v12[9]) {
      goto LABEL_86;
    }
    goto LABEL_105;
  }
LABEL_104:
  v13[8] = -1;
  if (v12[9])
  {
LABEL_86:
    v13[27] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[9];
    v13[9] = v162[v54 - 1];
    if (v12[10]) {
      goto LABEL_87;
    }
    goto LABEL_106;
  }
LABEL_105:
  v13[9] = -1;
  if (v12[10])
  {
LABEL_87:
    v13[28] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[10];
    v13[10] = v162[v54 - 1];
    if (v12[11]) {
      goto LABEL_88;
    }
    goto LABEL_107;
  }
LABEL_106:
  v13[10] = -1;
  if (v12[11])
  {
LABEL_88:
    v13[29] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[11];
    v13[11] = v162[v54 - 1];
    if (v12[12]) {
      goto LABEL_89;
    }
    goto LABEL_108;
  }
LABEL_107:
  v13[11] = -1;
  if (v12[12])
  {
LABEL_89:
    v13[30] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[12];
    v13[12] = v162[v54 - 1];
    if (v12[13]) {
      goto LABEL_90;
    }
    goto LABEL_109;
  }
LABEL_108:
  v13[12] = -1;
  if (v12[13])
  {
LABEL_90:
    v13[31] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[13];
    v13[13] = v162[v54 - 1];
    if (v12[14]) {
      goto LABEL_91;
    }
    goto LABEL_110;
  }
LABEL_109:
  v13[13] = -1;
  if (v12[14])
  {
LABEL_91:
    v13[32] = v54 - (unint64_t)v162[v54];
    unint64_t v54 = v54 + (unint64_t)v12[14];
    v13[14] = v162[v54 - 1];
    if (v12[15]) {
      goto LABEL_92;
    }
LABEL_111:
    v13[15] = -1;
    if (v12[16]) {
      goto LABEL_93;
    }
    goto LABEL_112;
  }
LABEL_110:
  v13[14] = -1;
  if (!v12[15]) {
    goto LABEL_111;
  }
LABEL_92:
  v13[33] = v54 - (unint64_t)v162[v54];
  unint64_t v54 = v54 + (unint64_t)v12[15];
  v13[15] = v162[v54 - 1];
  if (v12[16])
  {
LABEL_93:
    v13[34] = v54 - (unint64_t)v162[v54];
    uint64_t v56 = v162[v54 - 1 + (unint64_t)v12[16]];
    goto LABEL_113;
  }
LABEL_112:
  uint64_t v56 = -1;
LABEL_113:
  v13[16] = v56;
  v13[17] = 0xFFFFFLL;
  int v58 = v13 + 36;
  bzero(v13 + 36, 0x400uLL);
  LODWORD(v59) = v12[1];
  if (v12[1])
  {
    uint64_t v59 = 0;
    int v60 = v13 + 164;
    *(void *)&long long v61 = 0x100000001;
    *((void *)&v61 + 1) = 0x100000001;
    unsigned int v62 = 1;
    do
    {
      uint64_t v73 = (const char *)&v12[v59 + 17];
      uint64_t v74 = (int)(v162[v59] << 7);
      unint64_t v75 = (unint64_t)&v12[v59 + 18];
      unint64_t v76 = (unint64_t)v13 + 4 * v74 + 800;
      unint64_t v77 = (unint64_t)v60 + v74;
      unint64_t v78 = (unint64_t)v13 + v74 + 1440;
      BOOL v79 = (unint64_t)v58 + 4 * v74 >= v75 || (unint64_t)v73 >= v76;
      char v80 = !v79;
      BOOL v82 = v77 < v75 && (unint64_t)v73 < v78;
      BOOL v83 = v77 >= v76 || (unint64_t)v58 + 4 * v74 >= v78;
      if (!v83 || (v80 & 1) != 0 || v82)
      {
        for (unsigned int i = 129; i > 1; --i)
        {
          *((_DWORD *)v60 + v74 - 256) = 1;
          *((unsigned char *)v60 + v74++) = *v73;
        }
      }
      else
      {
        int8x16_t v63 = vld1q_dup_s8(v73);
        uint64_t v64 = (_OWORD *)((char *)v13 + 4 * v74 + 288);
        v64[2] = v61;
        v64[3] = v61;
        *uint64_t v64 = v61;
        v64[1] = v61;
        v64[6] = v61;
        v64[7] = v61;
        v64[4] = v61;
        v64[5] = v61;
        uint64_t v65 = (int8x16_t *)((char *)v13 + v74 + 1312);
        *uint64_t v65 = v63;
        v65[1] = v63;
        unint64_t v66 = (_OWORD *)((char *)v13 + 4 * (v74 | 0x20) + 288);
        v66[2] = v61;
        v66[3] = v61;
        *unint64_t v66 = v61;
        v66[1] = v61;
        v66[6] = v61;
        v66[7] = v61;
        v66[4] = v61;
        v66[5] = v61;
        uint64_t v67 = (int8x16_t *)((char *)v13 + (v74 | 0x20) + 1312);
        *uint64_t v67 = v63;
        v67[1] = v63;
        float64x2_t v68 = (_OWORD *)((char *)v13 + 4 * (v74 | 0x40) + 288);
        v68[2] = v61;
        v68[3] = v61;
        *float64x2_t v68 = v61;
        v68[1] = v61;
        v68[6] = v61;
        v68[7] = v61;
        v68[4] = v61;
        v68[5] = v61;
        float64x2_t v69 = (int8x16_t *)((char *)v13 + (v74 | 0x40) + 1312);
        *float64x2_t v69 = v63;
        v69[1] = v63;
        uint64_t v70 = v74 | 0x60;
        uint64_t v71 = (_OWORD *)((char *)v13 + 4 * v70 + 288);
        v71[2] = v61;
        v71[3] = v61;
        *uint64_t v71 = v61;
        v71[1] = v61;
        v71[6] = v61;
        v71[7] = v61;
        v71[4] = v61;
        v71[5] = v61;
        uint64_t v72 = (int8x16_t *)((char *)v13 + v70 + 1312);
        *uint64_t v72 = v63;
        v72[1] = v63;
      }
      ++v59;
      BOOL v79 = v62++ >= v12[1];
    }
    while (!v79);
  }
  if (v12[2])
  {
    uint64_t v85 = 0;
    uint64_t v59 = (int)v59;
    float64x2_t v86 = v13 + 36;
    float64x2_t v87 = v13 + 164;
    uint64_t v88 = (int)v59 + 17;
    uint64_t v89 = (int)v59 + 18;
    unsigned int v90 = 1;
    *(void *)&long long v91 = 0x200000002;
    *((void *)&v91 + 1) = 0x200000002;
    do
    {
      uint32x4_t v98 = (const char *)&v12[v59 + 17];
      uint64_t v99 = (int)(v162[v59] << 6);
      unint64_t v100 = (unint64_t)&v12[v89 + v85];
      uint32x4_t v101 = &v12[v88 + v85];
      unint64_t v102 = (unint64_t)v13 + 4 * v99 + 544;
      unint64_t v103 = (unint64_t)v87 + v99;
      unint64_t v104 = (unint64_t)v13 + v99 + 1376;
      BOOL v106 = (unint64_t)v86 + 4 * v99 < v100 && (unint64_t)v101 < v102;
      BOOL v108 = v103 < v100 && (unint64_t)v101 < v104;
      BOOL v109 = v103 >= v102 || (unint64_t)v86 + 4 * v99 >= v104;
      if (!v109 || v106 || v108)
      {
        for (unsigned int j = 65; j > 1; --j)
        {
          *((_DWORD *)v87 + v99 - 256) = 2;
          *((unsigned char *)v87 + v99++) = *v98;
        }
      }
      else
      {
        int8x16_t v92 = vld1q_dup_s8(v98);
        uint32x4_t v93 = (_OWORD *)((char *)v13 + 4 * v99 + 288);
        v93[2] = v91;
        v93[3] = v91;
        *uint32x4_t v93 = v91;
        v93[1] = v91;
        v93[6] = v91;
        v93[7] = v91;
        v93[4] = v91;
        v93[5] = v91;
        uint32x4_t v94 = (int8x16_t *)((char *)v13 + v99 + 1312);
        int8x16_t *v94 = v92;
        v94[1] = v92;
        uint64_t v95 = v99 | 0x20;
        int8x16_t v96 = (_OWORD *)((char *)v13 + 4 * v95 + 288);
        v96[2] = v91;
        v96[3] = v91;
        *int8x16_t v96 = v91;
        v96[1] = v91;
        v96[6] = v91;
        v96[7] = v91;
        v96[4] = v91;
        v96[5] = v91;
        uint32x4_t v97 = (int8x16_t *)((char *)v13 + v95 + 1312);
        int8x16_t *v97 = v92;
        v97[1] = v92;
      }
      ++v59;
      ++v85;
      BOOL v79 = v90++ >= v12[2];
    }
    while (!v79);
  }
  if (v12[3])
  {
    uint64_t v111 = 0;
    int v112 = v59;
    uint64_t v113 = (uint64_t)&v12[(int)v59 + 17];
    uint64x2_t v114 = &v162[(int)v59];
    do
    {
      int v115 = 32 * v114[v111];
      LODWORD(v13[v115 / 2u + 36]) = 3;
      uint64_t v116 = v115;
      uint32x4_t v117 = v13 + 164;
      LOBYTE(v117[v115 / 8u]) = *(unsigned char *)(v113 + v111);
      uint64_t v118 = v115 | 1;
      *((_DWORD *)v13 + v118 + 72) = 3;
      *((unsigned char *)v117 + v118) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 2) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 2)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 3) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 3)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 4) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 4)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 5) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 5)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 6) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 6)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 7) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 7)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 8) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 8)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 9) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 9)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xA) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0xA)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xB) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0xB)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xC) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0xC)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xD) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0xD)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xE) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0xE)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0xF) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0xF)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x10) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x10)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x11) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x11)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x12) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x12)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x13) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x13)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x14) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x14)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x15) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x15)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x16) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x16)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x17) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x17)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x18) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x18)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x19) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x19)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1A) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x1A)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1B) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x1B)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1C) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x1C)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1D) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x1D)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1E) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x1E)) = *(unsigned char *)(v113 + v111);
      *((_DWORD *)v13 + (v116 | 0x1F) + 72) = 3;
      *((unsigned char *)v117 + (v116 | 0x1F)) = *(unsigned char *)(v113 + v111++);
    }
    while (v111 < v12[3]);
    LODWORD(v59) = v112 + v111;
    uint64_t v55 = v161;
  }
  if (v12[4])
  {
    uint64_t v119 = 0;
    int v120 = v59;
    uint64_t v121 = (uint64_t)&v12[(int)v59 + 17];
    uint64x2_t v122 = &v162[(int)v59];
    do
    {
      uint64_t v123 = 16 * v122[v119];
      *((_DWORD *)v13 + v123 + 72) = 4;
      uint64x2_t v124 = v13 + 164;
      *((unsigned char *)v124 + v123) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 1) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 1)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 2) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 2)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 3) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 3)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 4) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 4)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 5) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 5)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 6) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 6)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 7) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 7)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 8) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 8)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 9) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 9)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xA) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 0xA)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xB) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 0xB)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xC) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 0xC)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xD) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 0xD)) = *(unsigned char *)(v121 + v119);
      *((_DWORD *)v13 + (v123 | 0xE) + 72) = 4;
      *((unsigned char *)v124 + (v123 | 0xE)) = *(unsigned char *)(v121 + v119);
      v123 |= 0xFuLL;
      *((_DWORD *)v13 + v123 + 72) = 4;
      *((unsigned char *)v124 + v123) = *(unsigned char *)(v121 + v119++);
    }
    while (v119 < v12[4]);
    LODWORD(v59) = v120 + v119;
  }
  if (v12[5])
  {
    uint64_t v125 = 0;
    int v126 = v59;
    uint64_t v127 = (uint64_t)&v12[(int)v59 + 17];
    uint64x2_t v128 = &v162[(int)v59];
    do
    {
      int v129 = 8 * v128[v125];
      LODWORD(v13[v129 / 2u + 36]) = 5;
      uint64x2_t v130 = v13 + 164;
      LOBYTE(v130[v129 / 8u]) = *(unsigned char *)(v127 + v125);
      uint64_t v131 = v129 | 1;
      *((_DWORD *)v13 + v131 + 72) = 5;
      *((unsigned char *)v130 + v131) = *(unsigned char *)(v127 + v125);
      uint64_t v132 = v129 | 2;
      *((_DWORD *)v13 + v132 + 72) = 5;
      *((unsigned char *)v130 + v132) = *(unsigned char *)(v127 + v125);
      uint64_t v133 = v129 | 3;
      *((_DWORD *)v13 + v133 + 72) = 5;
      *((unsigned char *)v130 + v133) = *(unsigned char *)(v127 + v125);
      uint64_t v134 = v129 | 4;
      *((_DWORD *)v13 + v134 + 72) = 5;
      *((unsigned char *)v130 + v134) = *(unsigned char *)(v127 + v125);
      uint64_t v135 = v129 | 5;
      *((_DWORD *)v13 + v135 + 72) = 5;
      *((unsigned char *)v130 + v135) = *(unsigned char *)(v127 + v125);
      uint64_t v136 = v129 | 6;
      *((_DWORD *)v13 + v136 + 72) = 5;
      *((unsigned char *)v130 + v136) = *(unsigned char *)(v127 + v125);
      uint64_t v137 = v129 | 7;
      *((_DWORD *)v13 + v137 + 72) = 5;
      *((unsigned char *)v130 + v137) = *(unsigned char *)(v127 + v125++);
    }
    while (v125 < v12[5]);
    LODWORD(v59) = v126 + v125;
  }
  if (v12[6])
  {
    uint64_t v138 = 0;
    int v139 = v59;
    uint64_t v140 = (uint64_t)&v12[(int)v59 + 17];
    uint32x4_t v141 = &v162[(int)v59];
    do
    {
      unint64_t v142 = 4 * v141[v138];
      LODWORD(v13[v142 / 2 + 36]) = 6;
      uint64_t v143 = v13 + 164;
      *((unsigned char *)v143 + v142) = *(unsigned char *)(v140 + v138);
      *((_DWORD *)v13 + (v142 | 1) + 72) = 6;
      *((unsigned char *)v143 + (v142 | 1)) = *(unsigned char *)(v140 + v138);
      *((_DWORD *)v13 + (v142 | 2) + 72) = 6;
      *((unsigned char *)v143 + (v142 | 2)) = *(unsigned char *)(v140 + v138);
      *((_DWORD *)v13 + (v142 | 3) + 72) = 6;
      *((unsigned char *)v143 + (v142 | 3)) = *(unsigned char *)(v140 + v138++);
    }
    while (v138 < v12[6]);
    LODWORD(v59) = v139 + v138;
  }
  if (v12[7])
  {
    uint64_t v144 = 0;
    int v145 = v59;
    uint64_t v146 = (uint64_t)&v12[(int)v59 + 17];
    uint64_t v147 = &v162[(int)v59];
    do
    {
      int v148 = 2 * v147[v144];
      LODWORD(v13[v148 / 2u + 36]) = 7;
      uint32x4_t v149 = v13 + 164;
      *((unsigned char *)v149 + v148) = *(unsigned char *)(v146 + v144);
      uint64_t v150 = v148 | 1;
      *((_DWORD *)v13 + v150 + 72) = 7;
      *((unsigned char *)v149 + v150) = *(unsigned char *)(v146 + v144++);
    }
    while (v144 < v12[7]);
    LODWORD(v59) = v145 + v144;
  }
  if (v12[8])
  {
    uint64_t v151 = 0;
    uint64_t v152 = (uint64_t)&v12[(int)v59 + 17];
    int64x2_t v153 = &v162[(int)v59];
    do
    {
      uint64_t v154 = (int)v153[v151];
      *((_DWORD *)v13 + v154 + 72) = 8;
      *((unsigned char *)v13 + v154 + 1312) = *(unsigned char *)(v152 + v151++);
    }
    while (v151 < v12[8]);
  }
  if (v159 && v160 >= 1)
  {
    uint64_t v155 = v160;
    uint64_t v156 = v12 + 17;
    do
    {
      unsigned int v157 = *v156++;
      if (v157 >= 0x10)
      {
        uint64_t v158 = *v55;
        *(_DWORD *)(v158 + 40) = 9;
        (*(void (**)(uint64_t *))v158)(v55);
      }
      --v155;
    }
    while (v155);
  }
}

uint64_t sub_1003D3618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    uint64_t v47 = *(void *)(a1 + 584);
    *(_DWORD *)(v47 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(v47 + 16))(a1);
    if (!result) {
      return result;
    }
    if (*(int *)(a1 + 416) >= 1)
    {
      uint64_t v48 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v48++) = 0;
      while (v48 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540)) {
      *(unsigned char *)(v4 + 60) = 0;
    }
  }
  if (*(unsigned char *)(v4 + 60))
  {
LABEL_4:
    --*(_DWORD *)(v4 + 64);
    return 1;
  }
  uint64_t v50 = *(void *)(a1 + 528);
  int v6 = *(_DWORD *)(a1 + 536);
  uint64_t v57 = a1;
  int v7 = *(unsigned __int8 ***)(a1 + 40);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v53 = *v7;
  unint64_t v54 = v9;
  uint64_t v10 = *(void *)(v4 + 24);
  int v11 = *(_DWORD *)(v4 + 32);
  long long v51 = *(_OWORD *)(v4 + 40);
  int v52 = *(_DWORD *)(v4 + 56);
  if (*(int *)(a1 + 464) < 1) {
    goto LABEL_77;
  }
  uint64_t v12 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v49 = a2;
LABEL_9:
  int v13 = *(_WORD **)(a2 + 8 * v12);
  uint64_t v14 = *(void *)(v4 + 8 * v12 + 176);
  if (v11 > 7) {
    goto LABEL_13;
  }
  uint64_t result = sub_1003D3FE4(&v53, v10, v11, 0);
  if (!result) {
    return result;
  }
  uint64_t v10 = v55;
  int v11 = v56;
  if ((int)v56 > 7)
  {
LABEL_13:
    uint64_t v17 = v10 >> (v11 - 8);
    int v18 = *(_DWORD *)(v14 + 4 * v17 + 288);
    if (v18)
    {
      v11 -= v18;
      int v19 = *(unsigned __int8 *)(v14 + v17 + 1312);
      uint64_t v20 = *(void *)(v4 + 8 * v12 + 256);
      int v21 = *(_DWORD *)(v4 + 4 * v12 + 336);
      if (!v21) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
    uint64_t v15 = v14;
    int v16 = 9;
  }
  else
  {
    uint64_t v15 = v14;
    int v16 = 1;
  }
  int v19 = sub_1003D415C((uint64_t)&v53, v10, v11, v15, v16);
  if (v19 < 0) {
    return 0;
  }
  uint64_t v10 = v55;
  int v11 = v56;
  uint64_t v20 = *(void *)(v4 + 8 * v12 + 256);
  int v21 = *(_DWORD *)(v4 + 4 * v12 + 336);
  if (v21)
  {
LABEL_23:
    if (v19)
    {
      if (v11 < v19)
      {
        uint64_t result = sub_1003D3FE4(&v53, v10, v11, v19);
        if (!result) {
          return result;
        }
        uint64_t v10 = v55;
        int v11 = v56;
      }
      v11 -= v19;
      int v22 = dword_10040D61C[v19];
      int v23 = v22 & (v10 >> v11);
      if (v23 > dword_10040D61C[v19 - 1]) {
        int v22 = 0;
      }
      int v24 = v23 - v22;
    }
    else
    {
      int v24 = 0;
    }
    size_t v25 = (char *)&v51 + 4 * *(int *)(a1 + 4 * v12 + 468);
    int v26 = *((_DWORD *)v25 + 1) + v24;
    *((_DWORD *)v25 + 1) = v26;
    *int v13 = v26;
    if (v21 >= 2)
    {
      int v27 = 1;
      while (1)
      {
        if (v11 <= 7)
        {
          uint64_t result = sub_1003D3FE4(&v53, v10, v11, 0);
          if (!result) {
            return result;
          }
          uint64_t v10 = v55;
          int v11 = v56;
          if ((int)v56 <= 7) {
            break;
          }
        }
        uint64_t v33 = v10 >> (v11 - 8);
        int v34 = *(_DWORD *)(v20 + 4 * v33 + 288);
        if (v34)
        {
          v11 -= v34;
          unsigned int v35 = *(unsigned __int8 *)(v20 + v33 + 1312);
          unsigned int v36 = v35 >> 4;
          int v37 = v35 & 0xF;
          if ((v35 & 0xF) == 0) {
            goto LABEL_42;
          }
LABEL_48:
          if (v11 < v37)
          {
            uint64_t result = sub_1003D3FE4(&v53, v10, v11, v37);
            if (!result) {
              return result;
            }
            uint64_t v10 = v55;
            int v11 = v56;
          }
          unsigned int v28 = v36 + v27;
          v11 -= v37;
          int v29 = dword_10040D61C[v37];
          int v30 = v29 & (v10 >> v11);
          if (v30 > dword_10040D61C[v37 - 1]) {
            LOWORD(v29) = 0;
          }
          v13[*(int *)(v50 + 4 * (int)v28)] = v30 - v29;
          int v27 = v28 + 1;
          if ((int)(v28 + 1) >= v21)
          {
            while (1)
            {
LABEL_54:
              if (v27 > v6) {
                goto LABEL_8;
              }
              if (v11 > 7) {
                goto LABEL_59;
              }
              uint64_t result = sub_1003D3FE4(&v53, v10, v11, 0);
              if (!result) {
                return result;
              }
              uint64_t v10 = v55;
              int v11 = v56;
              if ((int)v56 > 7)
              {
LABEL_59:
                uint64_t v41 = v10 >> (v11 - 8);
                int v42 = *(_DWORD *)(v20 + 4 * v41 + 288);
                if (v42)
                {
                  v11 -= v42;
                  unsigned int v43 = *(unsigned __int8 *)(v20 + v41 + 1312);
                  unsigned int v44 = v43 >> 4;
                  int v45 = v43 & 0xF;
                  if ((v43 & 0xF) == 0) {
                    goto LABEL_61;
                  }
                  goto LABEL_66;
                }
                uint64_t v39 = v20;
                int v40 = 9;
              }
              else
              {
                uint64_t v39 = v20;
                int v40 = 1;
              }
              unsigned int v46 = sub_1003D415C((uint64_t)&v53, v10, v11, v39, v40);
              if ((v46 & 0x80000000) != 0) {
                return 0;
              }
              uint64_t v10 = v55;
              int v11 = v56;
              unsigned int v44 = v46 >> 4;
              int v45 = v46 & 0xF;
              if ((v46 & 0xF) == 0)
              {
LABEL_61:
                if (v44 != 15) {
                  goto LABEL_8;
                }
                goto LABEL_53;
              }
LABEL_66:
              if (v11 < v45)
              {
                uint64_t result = sub_1003D3FE4(&v53, v10, v11, v45);
                if (!result) {
                  return result;
                }
                uint64_t v10 = v55;
                int v11 = v56;
              }
              v11 -= v45;
LABEL_53:
              v27 += v44 + 1;
            }
          }
        }
        else
        {
          uint64_t v31 = v20;
          int v32 = 9;
LABEL_46:
          unsigned int v38 = sub_1003D415C((uint64_t)&v53, v10, v11, v31, v32);
          if ((v38 & 0x80000000) != 0) {
            return 0;
          }
          uint64_t v10 = v55;
          int v11 = v56;
          unsigned int v36 = v38 >> 4;
          int v37 = v38 & 0xF;
          if ((v38 & 0xF) != 0) {
            goto LABEL_48;
          }
LABEL_42:
          if (v36 != 15)
          {
LABEL_8:
            ++v12;
            a2 = v49;
            if (v12 < *(int *)(a1 + 464)) {
              goto LABEL_9;
            }
            int v7 = *(unsigned __int8 ***)(a1 + 40);
            uint64_t v8 = v53;
            uint64_t v9 = v54;
LABEL_77:
            *int v7 = v8;
            v7[1] = v9;
            *(void *)(v4 + 24) = v10;
            *(_DWORD *)(v4 + 32) = v11;
            *(_OWORD *)(v4 + 40) = v51;
            *(_DWORD *)(v4 + 56) = v52;
            goto LABEL_4;
          }
          v27 += 16;
          if (v27 >= v21) {
            goto LABEL_54;
          }
        }
      }
      uint64_t v31 = v20;
      int v32 = 1;
      goto LABEL_46;
    }
LABEL_51:
    int v27 = 1;
    goto LABEL_54;
  }
LABEL_15:
  if (!v19) {
    goto LABEL_51;
  }
  if (v11 >= v19)
  {
LABEL_19:
    v11 -= v19;
    goto LABEL_51;
  }
  uint64_t result = sub_1003D3FE4(&v53, v10, v11, v19);
  if (result)
  {
    uint64_t v10 = v55;
    int v11 = v56;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1003D3B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 592);
  if (*(_DWORD *)(a1 + 348) && !*(_DWORD *)(v4 + 64))
  {
    uint64_t v44 = *(void *)(a1 + 584);
    *(_DWORD *)(v44 + 32) += *(_DWORD *)(v4 + 32) / 8;
    *(_DWORD *)(v4 + 32) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(v44 + 16))(a1);
    if (!result) {
      return result;
    }
    if (*(int *)(a1 + 416) >= 1)
    {
      uint64_t v45 = 0;
      do
        *(_DWORD *)(v4 + 44 + 4 * v45++) = 0;
      while (v45 < *(int *)(a1 + 416));
    }
    *(_DWORD *)(v4 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(a1 + 348);
    if (!*(_DWORD *)(a1 + 540)) {
      *(unsigned char *)(v4 + 60) = 0;
    }
  }
  if (*(unsigned char *)(v4 + 60)) {
    goto LABEL_4;
  }
  uint64_t v52 = a1;
  int v6 = *(unsigned __int8 ***)(a1 + 40);
  int v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v48 = *v6;
  uint64_t v49 = v8;
  uint64_t v9 = *(void *)(v4 + 24);
  int v10 = *(_DWORD *)(v4 + 32);
  long long v46 = *(_OWORD *)(v4 + 40);
  int v47 = *(_DWORD *)(v4 + 56);
  if (*(int *)(a1 + 464) < 1) {
    goto LABEL_78;
  }
  uint64_t v11 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  do
  {
    uint64_t v12 = *(_WORD **)(a2 + 8 * v11);
    uint64_t v13 = *(void *)(v4 + 8 * v11 + 176);
    if (v10 <= 7)
    {
      uint64_t result = sub_1003D3FE4(&v48, v9, v10, 0);
      if (!result) {
        return result;
      }
      uint64_t v9 = v50;
      int v10 = v51;
      if ((int)v51 <= 7)
      {
        uint64_t v14 = v13;
        int v15 = 1;
        goto LABEL_21;
      }
    }
    uint64_t v16 = v9 >> (v10 - 8);
    int v17 = *(_DWORD *)(v13 + 4 * v16 + 288);
    if (!v17)
    {
      uint64_t v14 = v13;
      int v15 = 9;
LABEL_21:
      int v18 = sub_1003D415C((uint64_t)&v48, v9, v10, v14, v15);
      if (v18 < 0) {
        return 0;
      }
      uint64_t v9 = v50;
      int v10 = v51;
      uint64_t v19 = *(void *)(v4 + 8 * v11 + 256);
      int v20 = *(_DWORD *)(v4 + 4 * v11 + 336);
      if (!v20)
      {
LABEL_14:
        if (v18)
        {
          if (v10 < v18)
          {
            uint64_t result = sub_1003D3FE4(&v48, v9, v10, v18);
            if (!result) {
              return result;
            }
            uint64_t v9 = v50;
            int v10 = v51;
          }
          v10 -= v18;
        }
        int v21 = 1;
        goto LABEL_57;
      }
      goto LABEL_23;
    }
    v10 -= v17;
    int v18 = *(unsigned __int8 *)(v13 + v16 + 1312);
    uint64_t v19 = *(void *)(v4 + 8 * v11 + 256);
    int v20 = *(_DWORD *)(v4 + 4 * v11 + 336);
    if (!v20) {
      goto LABEL_14;
    }
LABEL_23:
    if (v18)
    {
      if (v10 < v18)
      {
        uint64_t result = sub_1003D3FE4(&v48, v9, v10, v18);
        if (!result) {
          return result;
        }
        uint64_t v9 = v50;
        int v10 = v51;
      }
      v10 -= v18;
      int v22 = dword_10040D61C[v18];
      int v23 = v22 & (v9 >> v10);
      if (v23 > dword_10040D61C[v18 - 1]) {
        int v22 = 0;
      }
      int v24 = v23 - v22;
    }
    else
    {
      int v24 = 0;
    }
    size_t v25 = (char *)&v46 + 4 * *(int *)(a1 + 4 * v11 + 468);
    int v26 = *((_DWORD *)v25 + 1) + v24;
    *((_DWORD *)v25 + 1) = v26;
    *uint64_t v12 = v26;
    int v21 = 1;
    if (v20 < 2) {
      goto LABEL_57;
    }
    do
    {
      while (1)
      {
        if (v10 <= 7)
        {
          uint64_t result = sub_1003D3FE4(&v48, v9, v10, 0);
          if (!result) {
            return result;
          }
          uint64_t v9 = v50;
          int v10 = v51;
          if ((int)v51 <= 7)
          {
            uint64_t v30 = v19;
            int v31 = 1;
            goto LABEL_47;
          }
        }
        uint64_t v32 = v9 >> (v10 - 8);
        int v33 = *(_DWORD *)(v19 + 4 * v32 + 288);
        if (!v33) {
          break;
        }
        v10 -= v33;
        unsigned int v34 = *(unsigned __int8 *)(v19 + v32 + 1312);
        unsigned int v35 = v34 >> 4;
        int v36 = v34 & 0xF;
        if ((v34 & 0xF) != 0) {
          goto LABEL_49;
        }
LABEL_43:
        if (v35 != 15) {
          goto LABEL_53;
        }
        int v27 = v21 + 15;
        v21 += 16;
        if (v21 >= v20) {
          goto LABEL_52;
        }
      }
      uint64_t v30 = v19;
      int v31 = 9;
LABEL_47:
      unsigned int v37 = sub_1003D415C((uint64_t)&v48, v9, v10, v30, v31);
      if ((v37 & 0x80000000) != 0) {
        return 0;
      }
      uint64_t v9 = v50;
      int v10 = v51;
      unsigned int v35 = v37 >> 4;
      int v36 = v37 & 0xF;
      if ((v37 & 0xF) == 0) {
        goto LABEL_43;
      }
LABEL_49:
      if (v10 < v36)
      {
        uint64_t result = sub_1003D3FE4(&v48, v9, v10, v36);
        if (!result) {
          return result;
        }
        uint64_t v9 = v50;
        int v10 = v51;
      }
      int v27 = v35 + v21;
      v10 -= v36;
      int v28 = dword_10040D61C[v36];
      int v29 = v28 & (v9 >> v10);
      if (v29 > dword_10040D61C[v36 - 1]) {
        LOWORD(v28) = 0;
      }
      v12[dword_10040DA60[v27]] = v29 - v28;
      int v21 = v27 + 1;
    }
    while (v27 + 1 < v20);
LABEL_52:
    if (v27 <= 62)
    {
      do
      {
LABEL_57:
        if (v10 > 7) {
          goto LABEL_62;
        }
        uint64_t result = sub_1003D3FE4(&v48, v9, v10, 0);
        if (!result) {
          return result;
        }
        uint64_t v9 = v50;
        int v10 = v51;
        if ((int)v51 > 7)
        {
LABEL_62:
          uint64_t v39 = v9 >> (v10 - 8);
          int v40 = *(_DWORD *)(v19 + 4 * v39 + 288);
          if (v40)
          {
            v10 -= v40;
            unsigned int v41 = *(unsigned __int8 *)(v19 + v39 + 1312);
            unsigned int v42 = v41 >> 4;
            int v43 = v41 & 0xF;
            if ((v41 & 0xF) == 0) {
              goto LABEL_64;
            }
            goto LABEL_68;
          }
          unsigned int v38 = sub_1003D415C((uint64_t)&v48, v9, v10, v19, 9);
          if ((v38 & 0x80000000) != 0) {
            return 0;
          }
        }
        else
        {
          unsigned int v38 = sub_1003D415C((uint64_t)&v48, v50, v51, v19, 1);
          if ((v38 & 0x80000000) != 0) {
            return 0;
          }
        }
        uint64_t v9 = v50;
        int v10 = v51;
        unsigned int v42 = v38 >> 4;
        int v43 = v38 & 0xF;
        if ((v38 & 0xF) == 0)
        {
LABEL_64:
          if (v42 != 15) {
            break;
          }
          goto LABEL_56;
        }
LABEL_68:
        if (v10 < v43)
        {
          uint64_t result = sub_1003D3FE4(&v48, v9, v10, v43);
          if (!result) {
            return result;
          }
          uint64_t v9 = v50;
          int v10 = v51;
        }
        v10 -= v43;
LABEL_56:
        v21 += v42 + 1;
      }
      while (v21 < 64);
    }
LABEL_53:
    ++v11;
  }
  while (v11 < *(int *)(a1 + 464));
  int v6 = *(unsigned __int8 ***)(a1 + 40);
  int v7 = v48;
  uint64_t v8 = v49;
LABEL_78:
  *int v6 = v7;
  v6[1] = v8;
  *(void *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 32) = v10;
  *(_OWORD *)(v4 + 40) = v46;
  *(_DWORD *)(v4 + 56) = v47;
LABEL_4:
  --*(_DWORD *)(v4 + 64);
  return 1;
}

uint64_t sub_1003D3FE4(unsigned __int8 **a1, uint64_t a2, int a3, int a4)
{
  int v5 = a3;
  uint64_t v8 = *a1;
  uint64_t v9 = (uint64_t)a1[1];
  int v10 = a1[4];
  if (*((_DWORD *)v10 + 135))
  {
    if (a3 >= a4) {
      goto LABEL_23;
    }
    goto LABEL_3;
  }
  if (a3 > 24) {
    goto LABEL_23;
  }
  while (1)
  {
    while (1)
    {
      if (!v9)
      {
        uint64_t result = (*(uint64_t (**)(unsigned __int8 *))(*((void *)v10 + 5) + 24))(v10);
        if (!result) {
          return result;
        }
        uint64_t v16 = (unsigned __int8 **)*((void *)v10 + 5);
        uint64_t v9 = (uint64_t)(v16[1] - 1);
        uint64_t v8 = *v16 + 1;
        uint64_t v13 = **v16;
        if (v13 == 255) {
          goto LABEL_16;
        }
        goto LABEL_12;
      }
      --v9;
      unsigned int v14 = *v8++;
      uint64_t v13 = v14;
      if (v14 == 255) {
        break;
      }
LABEL_12:
      a2 = v13 | (a2 << 8);
      int v12 = v5 + 8;
      BOOL v17 = v5 < 17;
      v5 += 8;
      if (!v17) {
        goto LABEL_24;
      }
    }
    do
    {
LABEL_16:
      if (!v9)
      {
        uint64_t result = (*(uint64_t (**)(unsigned __int8 *))(*((void *)v10 + 5) + 24))(v10);
        if (!result) {
          return result;
        }
        int v18 = (unsigned __int8 **)*((void *)v10 + 5);
        uint64_t v8 = *v18;
        uint64_t v9 = (uint64_t)v18[1];
      }
      --v9;
      int v20 = *v8++;
      int v19 = v20;
    }
    while (v20 == 255);
    if (v19) {
      break;
    }
    a2 = (a2 << 8) | 0xFF;
    int v12 = v5 + 8;
    BOOL v17 = v5 < 17;
    v5 += 8;
    if (!v17) {
      goto LABEL_24;
    }
  }
  *((_DWORD *)v10 + 135) = v19;
  if (v5 < a4)
  {
LABEL_3:
    if (!*(unsigned char *)(*((void *)v10 + 74) + 60))
    {
      uint64_t v11 = *(void *)v10;
      *(_DWORD *)(v11 + 40) = 120;
      (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(v10, 0xFFFFFFFFLL);
      *(unsigned char *)(*((void *)v10 + 74) + 60) = 1;
    }
    int v12 = 25;
    a2 <<= 25 - v5;
    goto LABEL_24;
  }
LABEL_23:
  int v12 = v5;
LABEL_24:
  *a1 = v8;
  a1[1] = (unsigned __int8 *)v9;
  a1[2] = (unsigned __int8 *)a2;
  uint64_t result = 1;
  *((_DWORD *)a1 + 6) = v12;
  return result;
}

uint64_t sub_1003D415C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a3 >= a5)
  {
LABEL_4:
    int v8 = a3 - a5;
    uint64_t v9 = (int)(dword_10040D61C[a5] & (a2 >> v8));
    uint64_t v10 = a5;
    if (*(void *)(a4 + 8 * a5) >= v9)
    {
      uint64_t v11 = a5;
      *(void *)(a1 + 16) = a2;
      *(_DWORD *)(a1 + 24) = v8;
      if (a5 < 17) {
        return *(unsigned __int8 *)(*(void *)(a4 + 280) + *(_DWORD *)(a4 + 8 * v11 + 144) + (int)v9 + 17);
      }
    }
    else
    {
      do
      {
        if (v8 <= 0)
        {
          if (!sub_1003D3FE4((unsigned __int8 **)a1, a2, v8, 1)) {
            return 0xFFFFFFFFLL;
          }
          a2 = *(void *)(a1 + 16);
          int v8 = *(_DWORD *)(a1 + 24);
        }
        uint64_t v9 = ((unint64_t)a2 >> --v8) & 1 | (2 * v9);
        uint64_t v11 = v10 + 1;
        uint64_t v12 = *(void *)(a4 + 8 + 8 * v10++);
      }
      while (v9 > v12);
      *(void *)(a1 + 16) = a2;
      *(_DWORD *)(a1 + 24) = v8;
      if ((int)v11 < 17) {
        return *(unsigned __int8 *)(*(void *)(a4 + 280) + *(_DWORD *)(a4 + 8 * v11 + 144) + (int)v9 + 17);
      }
    }
    uint64_t v13 = *(uint64_t **)(a1 + 32);
    uint64_t v14 = *v13;
    *(_DWORD *)(v14 + 40) = 121;
    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v13, 0xFFFFFFFFLL);
    return 0;
  }
  if (sub_1003D3FE4((unsigned __int8 **)a1, a2, a3, a5))
  {
    a2 = *(void *)(a1 + 16);
    a3 = *(_DWORD *)(a1 + 24);
    goto LABEL_4;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1003D42C0(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 524);
  unsigned int v3 = *(_DWORD *)(a1 + 72);
  unsigned int v4 = v2 * *(_DWORD *)(a1 + 68);
  if (v4 <= v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(*(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(*(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x100000001;
    int v8 = 1;
  }
  else if (v4 <= 2 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(2 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(2 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x200000002;
    int v8 = 2;
  }
  else if (v4 <= 3 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(3 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(3 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x300000003;
    int v8 = 3;
  }
  else if (v4 <= 4 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(4 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(4 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x400000004;
    int v8 = 4;
  }
  else if (v4 <= 5 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(5 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(5 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x500000005;
    int v8 = 5;
  }
  else if (v4 <= 6 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(6 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(6 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x600000006;
    int v8 = 6;
  }
  else if (v4 <= 7 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(7 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(7 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x700000007;
    int v8 = 7;
  }
  else if (v4 <= 8 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(8 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(8 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x800000008;
    int v8 = 8;
  }
  else if (v4 <= 9 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(9 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(9 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0x900000009;
    int v8 = 9;
  }
  else if (v4 <= 10 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(10 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(10 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0xA0000000ALL;
    int v8 = 10;
  }
  else if (v4 <= 11 * v3)
  {
    int v8 = 11;
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(11 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(11 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0xB0000000BLL;
  }
  else if (v4 <= 12 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(12 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(12 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0xC0000000CLL;
    int v8 = 12;
  }
  else if (v4 <= 13 * v3)
  {
    int v8 = 13;
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(13 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(13 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0xD0000000DLL;
  }
  else if (v4 <= 14 * v3)
  {
    *(_DWORD *)(a1 + 116) = sub_1003EE7F0(14 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = sub_1003EE7F0(14 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
    *(_DWORD *)(a1 + 120) = result;
    *(void *)(a1 + 392) = 0xE0000000ELL;
    int v8 = 14;
  }
  else
  {
    unsigned int v5 = 15 * v3;
    uint64_t v6 = *(unsigned int *)(a1 + 48);
    if (v4 <= v5)
    {
      *(_DWORD *)(a1 + 116) = sub_1003EE7F0(15 * v6, v2);
      uint64_t result = sub_1003EE7F0(15 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
      *(_DWORD *)(a1 + 120) = result;
      *(void *)(a1 + 392) = 0xF0000000FLL;
      int v8 = 15;
    }
    else
    {
      *(_DWORD *)(a1 + 116) = sub_1003EE7F0(16 * v6, v2);
      uint64_t result = sub_1003EE7F0(16 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524));
      *(_DWORD *)(a1 + 120) = result;
      *(void *)(a1 + 392) = 0x1000000010;
      int v8 = 16;
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 56);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = *(void *)(a1 + 288);
    if (v9 == 1)
    {
      LODWORD(v11) = 0;
      uint64_t v12 = *(void *)(a1 + 288);
LABEL_38:
      int v15 = (int *)(v12 + 40);
      int v16 = v9 - v11;
      do
      {
        *(v15 - 1) = v8;
        *int v15 = v8;
        v15 += 24;
        --v16;
      }
      while (v16);
      return result;
    }
    uint64_t v11 = v9 & 0xFFFFFFFE;
    uint64_t v12 = v10 + 96 * v11;
    uint64_t v13 = (int *)(v10 + 136);
    uint64_t v14 = v11;
    do
    {
      *(v13 - 1) = v8;
      *uint64_t v13 = v8;
      *(v13 - 25) = v8;
      *(v13 - 24) = v8;
      v13 += 48;
      v14 -= 2;
    }
    while (v14);
    if (v11 != v9) {
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t sub_1003D476C(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 576) = result;
  *(void *)uint64_t result = sub_1003D47F0;
  *(void *)(result + 8) = sub_1003D4F6C;
  *(void *)(result + 16) = sub_1003D4FCC;
  *(void *)(result + 24) = sub_1003D5270;
  *(_WORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 1;
  return result;
}

uint64_t sub_1003D47F0(int32x2_t *a1)
{
  int32x2_t v1 = a1[72];
  uint64_t v2 = 2;
  if (*(unsigned char *)(*(void *)&v1 + 33)) {
    return v2;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)&a1[73] + 8))();
  if (v5 != 1)
  {
LABEL_4:
    if (v5 != 2) {
      return v5;
    }
    *(unsigned char *)(*(void *)&v1 + 33) = 1;
    if (*(_DWORD *)(*(void *)&v1 + 40))
    {
      if (*(unsigned char *)(*(void *)&a1[73] + 25))
      {
        int32x2_t v6 = *a1;
        *(_DWORD *)(*(void *)&v6 + 40) = 62;
        (**(void (***)(int32x2_t *))&v6)(a1);
      }
    }
    else
    {
      __int32 v26 = a1[19].i32[1];
      if (a1[20].i32[1] > v26) {
        a1[20].i32[1] = v26;
      }
    }
    return 2;
  }
  while (1)
  {
    while (1)
    {
      int v8 = *(_DWORD *)(*(void *)&v1 + 40);
      if (!v8) {
        break;
      }
      if (v8 != 1)
      {
        if (a1[52].i32[0]) {
          goto LABEL_73;
        }
        goto LABEL_43;
      }
      if (a1[6].i32[1] <= 0xFFDCu && a1[6].i32[0] < 0xFFDDu)
      {
        __int32 v9 = a1[35].i32[0];
        if ((v9 - 13) > 0xFFFFFFFA)
        {
LABEL_19:
          int v10 = a1[7].i32[0];
          if (v10 < 11) {
            goto LABEL_26;
          }
          goto LABEL_20;
        }
      }
      else
      {
        *(void *)(*(void *)a1 + 40) = 0xFFDC0000002ALL;
        (**(void (***)(int32x2_t *))a1)(a1);
        __int32 v9 = a1[35].i32[0];
        if ((v9 - 13) > 0xFFFFFFFA) {
          goto LABEL_19;
        }
      }
      int32x2_t v12 = *a1;
      *(_DWORD *)(*(void *)&v12 + 40) = 16;
      *(_DWORD *)(*(void *)&v12 + 44) = v9;
      (**(void (***)(int32x2_t *))a1)(a1);
      int v10 = a1[7].i32[0];
      if (v10 < 11)
      {
LABEL_26:
        a1[48] = (int32x2_t)0x100000001;
        if (v10 < 1) {
          goto LABEL_32;
        }
        goto LABEL_27;
      }
LABEL_20:
      int32x2_t v11 = *a1;
      *(_DWORD *)(*(void *)&v11 + 40) = 27;
      *(_DWORD *)(*(void *)&v11 + 44) = v10;
      *(_DWORD *)(*(void *)a1 + 48) = 10;
      (**(void (***)(int32x2_t *))a1)(a1);
      int v10 = a1[7].i32[0];
      a1[48] = (int32x2_t)0x100000001;
      if (v10 < 1) {
        goto LABEL_32;
      }
LABEL_27:
      int v13 = 0;
      uint64_t v14 = (int32x2_t *)(*(void *)&a1[36] + 8);
      int32x2_t v15 = (int32x2_t)0x100000001;
      do
      {
        while ((v14->i32[0] - 5) < 0xFFFFFFFC || (v14->i32[1] - 5) <= 0xFFFFFFFB)
        {
          int32x2_t v16 = *a1;
          *(_DWORD *)(*(void *)&v16 + 40) = 19;
          (**(void (***)(int32x2_t *))&v16)(a1);
          int32x2_t v17 = *v14;
          v14 += 12;
          int v10 = a1[7].i32[0];
          int32x2_t v15 = vmax_s32(a1[48], v17);
          a1[48] = v15;
          if (++v13 >= v10) {
            goto LABEL_32;
          }
        }
        int32x2_t v15 = vmax_s32(v15, *v14);
        a1[48] = v15;
        ++v13;
        v14 += 12;
      }
      while (v13 < v10);
LABEL_32:
      if (a1[37].i8[0] || a1[37].i8[1] && a1[52].i32[0])
      {
LABEL_33:
        int v18 = 8;
LABEL_34:
        a1[65].i32[1] = v18;
        a1[66] = (int32x2_t)&unk_10040DA60;
        a1[67].i32[0] = 63;
        goto LABEL_35;
      }
      int v23 = a1[64].i32[0];
      if (v23 > 119)
      {
        if (v23 > 194)
        {
          switch(v23)
          {
            case 195:
              int v18 = 14;
              goto LABEL_34;
            case 224:
              int v18 = 15;
              goto LABEL_34;
            case 255:
              int v18 = 16;
              goto LABEL_34;
          }
        }
        else
        {
          switch(v23)
          {
            case 120:
              int v18 = 11;
              goto LABEL_34;
            case 143:
              int v18 = 12;
              goto LABEL_34;
            case 168:
              int v18 = 13;
              goto LABEL_34;
          }
        }
LABEL_71:
        int32x2_t v24 = *a1;
        __int32 v25 = a1[63].i32[1];
        *(_DWORD *)(*(void *)&v24 + 40) = 17;
        *(_DWORD *)(*(void *)&v24 + 44) = v25;
        *(_DWORD *)(*(void *)a1 + 48) = a1[64].i32[0];
        *(_DWORD *)(*(void *)a1 + 52) = a1[64].i32[1];
        *(_DWORD *)(*(void *)a1 + 56) = a1[65].i32[0];
        (**(void (***)(int32x2_t *))a1)(a1);
        int v18 = a1[65].i32[1];
        int v10 = a1[7].i32[0];
      }
      else
      {
        switch(v23)
        {
          case 0:
            int v18 = 1;
            a1[65].i32[1] = 1;
            a1[66] = (int32x2_t)&unk_10040DA60;
            a1[67].i32[0] = 0;
            break;
          case 3:
            int v18 = 2;
            a1[65].i32[1] = 2;
            a1[66] = (int32x2_t)&unk_10040DEFC;
            a1[67].i32[0] = 3;
            break;
          case 8:
            int v18 = 3;
            a1[65].i32[1] = 3;
            a1[66] = (int32x2_t)&unk_10040DE98;
            a1[67].i32[0] = 8;
            break;
          case 15:
            int v18 = 4;
            a1[65].i32[1] = 4;
            a1[66] = (int32x2_t)&unk_10040DE18;
            a1[67].i32[0] = 15;
            break;
          case 24:
            int v18 = 5;
            a1[65].i32[1] = 5;
            a1[66] = (int32x2_t)&unk_10040DD74;
            a1[67].i32[0] = 24;
            break;
          case 35:
            int v18 = 6;
            a1[65].i32[1] = 6;
            a1[66] = (int32x2_t)&unk_10040DCA4;
            a1[67].i32[0] = 35;
            break;
          case 48:
            int v18 = 7;
            a1[65].i32[1] = 7;
            a1[66] = (int32x2_t)&unk_10040DBA0;
            a1[67].i32[0] = 48;
            break;
          case 63:
            goto LABEL_33;
          case 80:
            int v18 = 9;
            goto LABEL_34;
          case 99:
            int v18 = 10;
            goto LABEL_34;
          default:
            goto LABEL_71;
        }
      }
LABEL_35:
      a1[49].i32[0] = v18;
      a1[49].i32[1] = v18;
      if (v10 >= 1)
      {
        __int32 v19 = 0;
        uint64_t v20 = *(void *)&a1[36] + 40;
        do
        {
          __int32 v21 = a1[65].i32[1];
          *(_DWORD *)(v20 - 4) = v21;
          *(_DWORD *)uint64_t v20 = v21;
          *(_DWORD *)(v20 - 12) = sub_1003EE7F0(*(int *)(v20 - 32) * (unint64_t)a1[6].u32[0], a1[48].i32[0] * (uint64_t)v21);
          *(_DWORD *)(v20 - 8) = sub_1003EE7F0(*(int *)(v20 - 28) * (unint64_t)a1[6].u32[1], a1[65].i32[1] * (uint64_t)a1[48].i32[1]);
          *(_DWORD *)(v20 + 4) = sub_1003EE7F0(*(int *)(v20 - 32) * (unint64_t)a1[6].u32[0], a1[48].i32[0]);
          *(_DWORD *)(v20 + 8) = sub_1003EE7F0(*(int *)(v20 - 28) * (unint64_t)a1[6].u32[1], a1[48].i32[1]);
          *(unsigned char *)(v20 + 12) = 1;
          *(void *)(v20 + 40) = 0;
          ++v19;
          v20 += 96;
        }
        while (v19 < a1[7].i32[0]);
        int v18 = a1[65].i32[1];
      }
      a1[50].i32[0] = sub_1003EE7F0(a1[6].u32[1], a1[48].i32[1] * (uint64_t)v18);
      __int32 v22 = a1[52].i32[0];
      if (v22 >= a1[7].i32[0])
      {
        *(unsigned char *)(*(void *)&a1[72] + 32) = a1[37].i8[1] != 0;
        if (v22)
        {
LABEL_73:
          *(_DWORD *)(*(void *)&v1 + 40) = 0;
          return 1;
        }
      }
      else
      {
        *(unsigned char *)(*(void *)&a1[72] + 32) = 1;
        if (v22) {
          goto LABEL_73;
        }
      }
LABEL_43:
      *(_DWORD *)(*(void *)&v1 + 40) = 2;
      uint64_t v5 = (*(uint64_t (**)(int32x2_t *))(*(void *)&a1[73] + 8))(a1);
      if (v5 != 1) {
        goto LABEL_4;
      }
    }
    if (!*(unsigned char *)(*(void *)&v1 + 32)) {
      break;
    }
    if (a1[52].i32[0]) {
      goto LABEL_77;
    }
LABEL_10:
    uint64_t v5 = (*(uint64_t (**)(int32x2_t *))(*(void *)&a1[73] + 8))(a1);
    if (v5 != 1) {
      goto LABEL_4;
    }
  }
  int32x2_t v7 = *a1;
  *(_DWORD *)(*(void *)&v7 + 40) = 36;
  (**(void (***)(int32x2_t *))&v7)(a1);
  if (!a1[52].i32[0]) {
    goto LABEL_10;
  }
LABEL_77:
  sub_1003D4FCC((uint64_t *)a1);
  return 1;
}

uint64_t sub_1003D4F6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 576);
  *(void *)uint64_t v2 = sub_1003D47F0;
  *(_WORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t result = (**(uint64_t (***)(uint64_t))(a1 + 584))(a1);
  *(void *)(a1 + 176) = 0;
  return result;
}

uint64_t sub_1003D4FCC(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 104);
  if (v2 == 1)
  {
    uint64_t v3 = a1[53];
    unsigned int v4 = *(_DWORD *)(v3 + 32);
    *((_DWORD *)a1 + 114) = *(_DWORD *)(v3 + 28);
    *((_DWORD *)a1 + 115) = v4;
    *(void *)(v3 + 56) = 0x100000001;
    LODWORD(v5) = 1;
    int v6 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 64) = 1;
    *(_DWORD *)(v3 + 68) = v6;
    int v7 = v4 % *(_DWORD *)(v3 + 12);
    if (!v7) {
      int v7 = *(_DWORD *)(v3 + 12);
    }
    *(_DWORD *)(v3 + 72) = 1;
    *(_DWORD *)(v3 + 76) = v7;
    a1[58] = 1;
LABEL_21:
    uint64_t v20 = 0;
    do
    {
      uint64_t v29 = a1[v20 + 53];
      if (!*(void *)(v29 + 80))
      {
        uint64_t v30 = *(unsigned int *)(v29 + 16);
        if (v30 > 3 || !a1[v30 + 23])
        {
          __int32 v21 = (void (**)(void))*a1;
          *((_DWORD *)v21 + 10) = 54;
          *((_DWORD *)v21 + 11) = v30;
          (*(void (**)(uint64_t *))*a1)(a1);
        }
        uint64_t v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 130);
        uint64_t v5 = a1[(int)v30 + 23];
        *(_OWORD *)uint64_t v22 = *(_OWORD *)v5;
        long long v23 = *(_OWORD *)(v5 + 16);
        long long v24 = *(_OWORD *)(v5 + 32);
        long long v25 = *(_OWORD *)(v5 + 64);
        *(_OWORD *)(v22 + 48) = *(_OWORD *)(v5 + 48);
        *(_OWORD *)(v22 + 64) = v25;
        *(_OWORD *)(v22 + 16) = v23;
        *(_OWORD *)(v22 + 32) = v24;
        long long v26 = *(_OWORD *)(v5 + 80);
        long long v27 = *(_OWORD *)(v5 + 96);
        long long v28 = *(_OWORD *)(v5 + 112);
        *(_WORD *)(v22 + 128) = *(_WORD *)(v5 + 128);
        *(_OWORD *)(v22 + 96) = v27;
        *(_OWORD *)(v22 + 112) = v28;
        *(_OWORD *)(v22 + 80) = v26;
        *(void *)(v29 + 80) = v22;
        LODWORD(v5) = *((_DWORD *)a1 + 104);
      }
      ++v20;
    }
    while (v20 < (int)v5);
    goto LABEL_29;
  }
  if ((v2 - 5) <= 0xFFFFFFFB)
  {
    int v8 = (void (**)(void))*a1;
    *((_DWORD *)v8 + 10) = 27;
    *((_DWORD *)v8 + 11) = v2;
    *(_DWORD *)(*a1 + 48) = 4;
    (*(void (**)(uint64_t *))*a1)(a1);
  }
  *((_DWORD *)a1 + 114) = sub_1003EE7F0(*((unsigned int *)a1 + 12), *((int *)a1 + 131) * (uint64_t)*((int *)a1 + 96));
  *((_DWORD *)a1 + 115) = sub_1003EE7F0(*((unsigned int *)a1 + 13), *((int *)a1 + 131) * (uint64_t)*((int *)a1 + 97));
  *((_DWORD *)a1 + 116) = 0;
  if (*((int *)a1 + 104) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      int v10 = (_DWORD *)a1[v9 + 53];
      unsigned int v11 = v10[2];
      unsigned int v12 = v10[3];
      int v13 = v12 * v11;
      unsigned int v14 = v10[8];
      int v15 = v10[9] * v11;
      v10[16] = v12 * v11;
      v10[17] = v15;
      int v16 = v10[7] % v11;
      v10[14] = v11;
      v10[15] = v12;
      if (v16) {
        unsigned int v11 = v16;
      }
      if (v14 % v12) {
        unsigned int v12 = v14 % v12;
      }
      v10[18] = v11;
      v10[19] = v12;
      if (*((_DWORD *)a1 + 116) + v13 >= 11)
      {
        uint64_t v17 = *a1;
        *(_DWORD *)(v17 + 40) = 14;
        (*(void (**)(uint64_t *))v17)(a1);
      }
      if (v13 >= 1)
      {
        unsigned int v18 = v13 + 1;
        do
        {
          uint64_t v19 = *((int *)a1 + 116);
          *((_DWORD *)a1 + 116) = v19 + 1;
          *((_DWORD *)a1 + v19 + 117) = v9;
          --v18;
        }
        while (v18 > 1);
      }
      ++v9;
      uint64_t v5 = *((int *)a1 + 104);
    }
    while (v9 < v5);
    if ((int)v5 >= 1) {
      goto LABEL_21;
    }
  }
LABEL_29:
  (*(void (**)(uint64_t *))a1[74])(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t *))a1[70])(a1);
  *(void *)a1[72] = *(void *)(a1[70] + 8);
  return result;
}

uint64_t sub_1003D5270(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 592) + 16))();
  **(void **)(a1 + 576) = sub_1003D47F0;
  return result;
}

uint64_t (**sub_1003D52B0(uint64_t *a1, int a2))(uint64_t result, int a2)
{
  uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(void))a1[1])();
  uint64_t v5 = result;
  a1[69] = (uint64_t)result;
  *uint64_t result = sub_1003D5488;
  if (a2)
  {
    uint64_t v6 = *a1;
    *(_DWORD *)(v6 + 40) = 3;
    uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *))v6)(a1);
  }
  int v7 = *((_DWORD *)a1 + 99);
  if (!*(unsigned char *)(a1[76] + 16))
  {
    if (*((int *)a1 + 14) < 1) {
      return result;
    }
    goto LABEL_12;
  }
  if (v7 <= 1)
  {
    uint64_t v8 = *a1;
    *(_DWORD *)(v8 + 40) = 48;
    (*(void (**)(uint64_t *))v8)(a1);
    int v7 = *((_DWORD *)a1 + 99);
  }
  uint64_t v9 = a1[69];
  uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 16 * *((int *)a1 + 14));
  uint64_t v10 = *((int *)a1 + 14);
  *(void *)(v9 + 104) = result;
  *(void *)(v9 + 112) = &result[v10];
  if ((int)v10 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = v7 + 4;
    int v13 = (int *)(a1[36] + 40);
    do
    {
      int v14 = *(v13 - 7);
      int v15 = *v13;
      v13 += 24;
      int v16 = v15 * v14 / *((_DWORD *)a1 + 99);
      uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 16 * v16 * v12);
      uint64_t v17 = &result[v16];
      uint64_t v18 = 8 * v11;
      *(void *)(*(void *)(v9 + 104) + v18) = v17;
      *(void *)(*(void *)(v9 + 112) + v18) = &v17[v16 * v12];
      ++v11;
      uint64_t v10 = *((int *)a1 + 14);
    }
    while (v11 < v10);
  }
  int v7 = *((_DWORD *)a1 + 99) + 2;
  if ((int)v10 >= 1)
  {
LABEL_12:
    uint64_t v19 = 0;
    uint64_t v20 = v5 + 2;
    __int32 v21 = (_DWORD *)(a1[36] + 40);
    do
    {
      uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, void, void))(a1[1] + 16))(a1, 1, (*(v21 - 1) * *(v21 - 3)), (*v21 * *(v21 - 7) / *((_DWORD *)a1 + 99) * v7));
      v20[v19++] = (uint64_t (*)(uint64_t, int))result;
      v21 += 24;
    }
    while (v19 < *((int *)a1 + 14));
  }
  return result;
}

uint64_t sub_1003D5488(uint64_t result, int a2)
{
  uint64_t v3 = *(void *)(result + 552);
  if (a2 == 2)
  {
    *(void *)(v3 + 8) = sub_1003D5C68;
  }
  else if (a2)
  {
    uint64_t v46 = *(void *)result;
    *(_DWORD *)(v46 + 40) = 3;
    int v47 = *(uint64_t (**)(void))v46;
    return v47();
  }
  else if (*(unsigned char *)(*(void *)(result + 608) + 16))
  {
    *(void *)(v3 + 8) = sub_1003D5768;
    uint64_t v4 = *(unsigned int *)(result + 56);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      int v6 = *(_DWORD *)(result + 396);
      uint64_t v7 = *(void *)(result + 288);
      while (1)
      {
        int v8 = *(_DWORD *)(v7 + 40) * *(_DWORD *)(v7 + 12) / v6;
        uint64_t v9 = *(void **)(*(void *)(v3 + 104) + 8 * v5);
        uint64_t v10 = *(void *)(*(void *)(v3 + 112) + 8 * v5);
        uint64_t result = *(void *)(v3 + 8 * v5 + 16);
        uint64_t v11 = (v8 * (v6 + 2));
        if ((int)v11 < 1) {
          goto LABEL_12;
        }
        if (v11 < 0xA) {
          break;
        }
        uint64_t v12 = 0;
        if ((unint64_t)v9 - v10 < 0x20) {
          goto LABEL_10;
        }
        if ((unint64_t)(v10 - result) < 0x20) {
          goto LABEL_10;
        }
        if ((unint64_t)v9 - result < 0x20) {
          goto LABEL_10;
        }
        uint64_t v12 = v11 & 0x7FFFFFFC;
        long long v28 = (long long *)(result + 16);
        uint64_t v29 = (_OWORD *)(v10 + 16);
        uint64_t v30 = v9 + 2;
        uint64_t v31 = v11 & 0xFFFFFFFC;
        do
        {
          long long v32 = *(v28 - 1);
          long long v33 = *v28;
          *(v29 - 1) = v32;
          *uint64_t v29 = v33;
          *(v30 - 1) = v32;
          *uint64_t v30 = v33;
          v28 += 2;
          v29 += 2;
          v30 += 2;
          v31 -= 4;
        }
        while (v31);
        if (v12 != v11) {
          goto LABEL_10;
        }
LABEL_12:
        if (v8 >= 1)
        {
          LODWORD(v19) = 2 * v8;
          uint64_t v20 = v8 * v6;
          uint64_t v21 = v8 * (v6 - 2);
          if (2 * v8 <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = v19;
          }
          if (v19 < 0x1C)
          {
            uint64_t v22 = 0;
            goto LABEL_18;
          }
          uint64_t v22 = 0;
          uint64_t v34 = 8 * v20;
          uint64_t v35 = 8 * v20 + v10;
          uint64_t v36 = 8 * v21;
          uint64_t v37 = 8 * v21 + result;
          if ((unint64_t)(v35 - v37) < 0x20) {
            goto LABEL_18;
          }
          if ((unint64_t)(v35 - (v34 + result)) < 0x20) {
            goto LABEL_18;
          }
          uint64_t v38 = v36 + v10;
          if ((unint64_t)(v37 - (v36 + v10)) < 0x20) {
            goto LABEL_18;
          }
          if ((unint64_t)(v38 - (v34 + result)) < 0x20) {
            goto LABEL_18;
          }
          if ((unint64_t)(v35 - v38) < 0x20) {
            goto LABEL_18;
          }
          uint64_t v22 = v19 & 0x7FFFFFFC;
          uint64_t v39 = result + 16;
          uint64_t v40 = v10;
          uint64_t v41 = v22;
          do
          {
            long long v42 = *(_OWORD *)(v39 + 8 * v20);
            int v43 = (_OWORD *)(v40 + v36);
            _OWORD *v43 = *(_OWORD *)(v39 + v34 - 16);
            v43[1] = v42;
            long long v44 = *(_OWORD *)(v39 + 8 * v21);
            uint64_t v45 = (_OWORD *)(v40 + v34);
            *uint64_t v45 = *(_OWORD *)(v39 + v36 - 16);
            v45[1] = v44;
            v40 += 32;
            v39 += 32;
            v41 -= 4;
          }
          while (v41);
          if (v22 != v19)
          {
LABEL_18:
            uint64_t v23 = v19 - v22;
            uint64_t v24 = v22 + v21;
            uint64_t v25 = v22 + v20;
            do
            {
              *(void *)(v10 + 8 * v24) = *(void *)(result + 8 * v25);
              *(void *)(v10 + 8 * v25) = *(void *)(result + 8 * v24);
              result += 8;
              v10 += 8;
              --v23;
            }
            while (v23);
          }
          uint64_t v26 = -(uint64_t)v8;
          do
            v9[v26] = *v9;
          while (!__CFADD__(v26++, 1));
        }
        ++v5;
        v7 += 96;
        if (v5 == v4) {
          goto LABEL_44;
        }
      }
      uint64_t v12 = 0;
LABEL_10:
      uint64_t v13 = v11 - v12;
      uint64_t v14 = 8 * v12;
      int v15 = &v9[v12];
      int v16 = (void *)(v10 + v14);
      uint64_t v17 = (uint64_t *)(result + v14);
      do
      {
        uint64_t v18 = *v17++;
        *v16++ = v18;
        *v15++ = v18;
        --v13;
      }
      while (v13);
      goto LABEL_12;
    }
LABEL_44:
    *(void *)(v3 + 120) = 0;
    *(_DWORD *)(v3 + 132) = 0;
    *(unsigned char *)(v3 + 96) = 0;
    *(_DWORD *)(v3 + 100) = 0;
  }
  else
  {
    *(void *)(v3 + 8) = sub_1003D5BC0;
    *(unsigned char *)(v3 + 96) = 0;
    *(_DWORD *)(v3 + 100) = 0;
  }
  return result;
}

uint64_t sub_1003D5768(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void *)(result + 552);
  if (*(unsigned char *)(v8 + 96))
  {
    int v9 = *(_DWORD *)(v8 + 124);
    if (!v9) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)(result + 560) + 24))(result, *(void *)(v8 + 8 * *(int *)(v8 + 120) + 104));
    if (!result) {
      return result;
    }
    *(unsigned char *)(v8 + 96) = 1;
    ++*(_DWORD *)(v8 + 132);
    int v9 = *(_DWORD *)(v8 + 124);
    if (!v9) {
      goto LABEL_10;
    }
  }
  if (v9 == 1) {
    goto LABEL_27;
  }
  if (v9 != 2) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t, _DWORD *, uint64_t))(*(void *)(v7 + 568) + 8))(v7, *(void *)(v8 + 8 * *(int *)(v8 + 120) + 104), v8 + 100, *(unsigned int *)(v8 + 128), a2, a3, a4);
  if (*(_DWORD *)(v8 + 100) < *(_DWORD *)(v8 + 128)) {
    return result;
  }
  *(_DWORD *)(v8 + 124) = 0;
  if (*a3 >= a4) {
    return result;
  }
LABEL_10:
  *(_DWORD *)(v8 + 100) = 0;
  int v10 = *(_DWORD *)(v7 + 396);
  *(_DWORD *)(v8 + 128) = v10 - 1;
  if (*(_DWORD *)(v8 + 132) == *(_DWORD *)(v7 + 400))
  {
    uint64_t v11 = *(unsigned int *)(v7 + 56);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(_DWORD **)(v7 + 288);
      uint64_t v14 = *(void *)(v7 + 552);
      int v15 = (void *)(v14 + 8 * *(int *)(v14 + 120) + 104);
      do
      {
        int v16 = v13[10] * v13[3];
        int v17 = v16 / v10;
        int v18 = v13[12] % v16;
        if (!v18) {
          int v18 = v13[10] * v13[3];
        }
        if (v12)
        {
          if (v17 >= 1) {
            goto LABEL_20;
          }
        }
        else
        {
          *(_DWORD *)(v14 + 128) = (v18 - 1) / v17 + 1;
          if (v17 >= 1)
          {
LABEL_20:
            uint64_t v19 = *(void *)(*v15 + 8 * v12);
            LODWORD(v20) = 2 * v17;
            uint64_t v21 = v18 - 1;
            if ((int)v20 <= 1) {
              uint64_t v20 = 1;
            }
            else {
              uint64_t v20 = v20;
            }
            uint64_t v22 = (void *)(v19 + 8 * v18);
            do
            {
              *v22++ = *(void *)(v19 + 8 * v21);
              --v20;
            }
            while (v20);
          }
        }
        ++v12;
        v13 += 24;
      }
      while (v12 != v11);
    }
  }
  *(_DWORD *)(v8 + 124) = 1;
LABEL_27:
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t, _DWORD *, uint64_t))(*(void *)(v7 + 568) + 8))(v7, *(void *)(v8 + 8 * *(int *)(v8 + 120) + 104), v8 + 100, *(unsigned int *)(v8 + 128), a2, a3, a4);
  if (*(_DWORD *)(v8 + 100) >= *(_DWORD *)(v8 + 128))
  {
    int v23 = *(_DWORD *)(v7 + 396);
    if (*(_DWORD *)(v8 + 132) == 1)
    {
      uint64_t v24 = *(unsigned int *)(v7 + 56);
      if ((int)v24 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = *(void *)(v7 + 288);
        uint64_t v27 = *(void *)(v7 + 552);
        int v28 = v23 + 1;
        int v29 = v23 + 2;
        int v68 = v23;
        uint64_t v66 = v27;
        uint64_t v67 = v24;
        int v64 = v23 + 2;
        int v65 = v23 + 1;
        do
        {
          uint64_t v30 = (*(_DWORD *)(v26 + 40) * *(_DWORD *)(v26 + 12) / v23);
          if ((int)v30 >= 1)
          {
            uint64_t v31 = *(void *)(*(void *)(v27 + 104) + 8 * v25);
            uint64_t v32 = *(void *)(*(void *)(v27 + 112) + 8 * v25);
            unint64_t v33 = 8 * (int)v30 * v29;
            uint64_t v34 = 8 * v30;
            uint64_t result = 8 * (int)v30 * v28;
            if (v30 >= 0x32)
            {
              if (v33 + v31 - (v32 - v34) >= 0x10
                && (unint64_t)(v32 - (v31 - v34)) >= 0x10
                && (unint64_t)(result + v32 - (v31 - v34)) >= 0x10
                && v33 + v32 - (v31 - v34) >= 0x10
                && (unint64_t)(v32 - v31) >= 0x10
                && v33 + v34 >= 0x10
                && (unint64_t)(-8 * v30 - result) >= 0x10
                && v33 + v34 >= 0x10
                && (unint64_t)(v32 - v34 - (result + v31)) >= 0x10
                && (unint64_t)(-8 * v30 - result) >= 0x10
                && (unint64_t)(v31 - (v32 - v34)) >= 0x10
                && (unint64_t)(v32 - v31) >= 0x10
                && v33 - result >= 0x10
                && v33 + v31 - (result + v32) >= 0x10
                && v33 >= 0x10
                && v32 - (v33 + v31) >= 0x10
                && v33 + v32 - (result + v31) >= 0x10
                && v33 - result >= 0x10
                && v33 + v32 - v31 >= 0x10)
              {
                uint64_t v35 = v30 & 0xFFFFFFFE;
                uint64_t v54 = v35;
                uint64_t v55 = *(_OWORD **)(*(void *)(v27 + 104) + 8 * v25);
                uint64_t v56 = *(_OWORD **)(*(void *)(v27 + 112) + 8 * v25);
                do
                {
                  *(_OWORD *)((char *)v55 - 8 * v30) = *(_OWORD *)((char *)v55 + result);
                  *(_OWORD *)((char *)v56 - 8 * v30) = *(_OWORD *)((char *)v56 + result);
                  *(_OWORD *)((char *)v55 + 8 * (int)v30 * v29) = *v55;
                  *(_OWORD *)((char *)v56 + 8 * (int)v30 * v29) = *v56;
                  ++v56;
                  ++v55;
                  v54 -= 2;
                }
                while (v54);
                int v23 = v68;
                uint64_t v27 = v66;
                uint64_t v24 = v67;
                int v29 = v64;
                int v28 = v65;
                if (v35 == v30) {
                  goto LABEL_31;
                }
              }
              else
              {
                uint64_t v35 = 0;
                int v23 = v68;
                uint64_t v27 = v66;
                uint64_t v24 = v67;
                int v29 = v64;
                int v28 = v65;
              }
            }
            else
            {
              uint64_t v35 = 0;
            }
            uint64_t v57 = v32 + v33;
            uint64_t v58 = v31 + v33;
            uint64_t v59 = v32 - v34;
            uint64_t v60 = v31 - v34;
            uint64_t v61 = v32 + result;
            result += v31;
            do
            {
              uint64_t v62 = 8 * v35;
              *(void *)(v60 + v62) = *(void *)(result + 8 * v35);
              *(void *)(v59 + v62) = *(void *)(v61 + 8 * v35);
              *(void *)(v58 + v62) = *(void *)(v31 + 8 * v35);
              *(void *)(v57 + v62) = *(void *)(v32 + 8 * v35++);
            }
            while (v30 != v35);
          }
LABEL_31:
          ++v25;
          v26 += 96;
        }
        while (v25 != v24);
      }
    }
    int v63 = *(_DWORD *)(v8 + 120) ^ 1;
    *(unsigned char *)(v8 + 96) = 0;
    *(_DWORD *)(v8 + 100) = v23 + 1;
    *(_DWORD *)(v8 + 120) = v63;
    *(_DWORD *)(v8 + 124) = 2;
    *(_DWORD *)(v8 + 128) = v23 + 2;
  }
  return result;
}

uint64_t sub_1003D5BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 552);
  if (!*(unsigned char *)(v8 + 96))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 560) + 24))(a1, v8 + 16);
    if (!result) {
      return result;
    }
    *(unsigned char *)(v8 + 96) = 1;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 396);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 568) + 8))(a1, v8 + 16, v8 + 100, v10, a2, a3, a4);
  if (*(_DWORD *)(v8 + 100) >= v10)
  {
    *(unsigned char *)(v8 + 96) = 0;
    *(_DWORD *)(v8 + 100) = 0;
  }
  return result;
}

uint64_t sub_1003D5C68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 568) + 8))();
}

uint64_t sub_1003D5C8C(_DWORD *a1, int a2)
{
  int v4 = a1[135];
  uint64_t v5 = *(void *)a1;
  *(_DWORD *)(v5 + 40) = 124;
  *(_DWORD *)(v5 + 44) = v4;
  *(_DWORD *)(*(void *)a1 + 48) = a2;
  (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 0xFFFFFFFFLL);
  if (v4 < 192)
  {
LABEL_7:
    while (1)
    {
      uint64_t v6 = *(void *)a1;
      *(_DWORD *)(v6 + 40) = 99;
      *(_DWORD *)(v6 + 44) = v4;
      *(_DWORD *)(*(void *)a1 + 48) = 2;
      (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 4);
      if (!sub_1003D5E0C(a1)) {
        return 0;
      }
      int v4 = a1[135];
      if (v4 >= 192) {
        goto LABEL_2;
      }
    }
  }
  else
  {
LABEL_2:
    if ((v4 - 216) < 0xFFFFFFF8
      || v4 == (((_BYTE)a2 + 1) & 7 | 0xD0)
      || v4 == (((_BYTE)a2 + 2) & 7 | 0xD0))
    {
      uint64_t v8 = *(void *)a1;
      *(_DWORD *)(v8 + 40) = 99;
      *(_DWORD *)(v8 + 44) = v4;
      *(_DWORD *)(*(void *)a1 + 48) = 3;
      (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 4);
      return 1;
    }
    else
    {
      if (v4 == (((_BYTE)a2 - 1) & 7 | 0xD0) || v4 == ((a2 + 6) & 7 | 0xD0)) {
        goto LABEL_7;
      }
      uint64_t v9 = *(void *)a1;
      *(_DWORD *)(v9 + 40) = 99;
      *(_DWORD *)(v9 + 44) = v4;
      uint64_t v7 = 1;
      *(_DWORD *)(*(void *)a1 + 48) = 1;
      (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 4);
      a1[135] = 0;
    }
  }
  return v7;
}

uint64_t sub_1003D5E0C(void *a1)
{
  uint64_t v2 = (unsigned __int8 **)a1[5];
  uint64_t v3 = *v2;
  for (uint64_t i = (uint64_t)v2[1]; i; v2[1] = (unsigned __int8 *)i)
  {
LABEL_2:
    int v5 = *v3++;
    --i;
    if (v5 == 255) {
      goto LABEL_8;
    }
LABEL_3:
    ++*(_DWORD *)(a1[73] + 32);
    _DWORD *v2 = v3;
  }
  while (1)
  {
    uint64_t result = ((uint64_t (*)(void *))v2[3])(a1);
    if (!result) {
      return result;
    }
    uint64_t v3 = *v2 + 1;
    uint64_t i = (uint64_t)(v2[1] - 1);
    if (**v2 != 255) {
      goto LABEL_3;
    }
    do
    {
LABEL_8:
      if (!i)
      {
        uint64_t result = ((uint64_t (*)(void *))v2[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v3 = *v2;
        uint64_t i = (uint64_t)v2[1];
      }
      --i;
      int v8 = *v3++;
      int v7 = v8;
    }
    while (v8 == 255);
    if (v7)
    {
      int v9 = *(_DWORD *)(a1[73] + 32);
      if (v9)
      {
        uint64_t v10 = *a1;
        *(_DWORD *)(v10 + 40) = 119;
        *(_DWORD *)(v10 + 44) = v9;
        *(_DWORD *)(*a1 + 48) = v7;
        (*(void (**)(void *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
        *(_DWORD *)(a1[73] + 32) = 0;
      }
      *((_DWORD *)a1 + 135) = v7;
      uint64_t result = 1;
      _DWORD *v2 = v3;
      v2[1] = (unsigned __int8 *)i;
      return result;
    }
    *(_DWORD *)(a1[73] + 32) += 2;
    _DWORD *v2 = v3;
    v2[1] = (unsigned __int8 *)i;
    if (i) {
      goto LABEL_2;
    }
  }
}

double sub_1003D5F2C(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 584) = v2;
  *(void *)uint64_t v2 = sub_1003D6004;
  *(void *)(v2 + 8) = sub_1003D6024;
  *(void *)(v2 + 16) = sub_1003D80B0;
  *(void *)(v2 + 40) = sub_1003D8164;
  *(_DWORD *)(v2 + 176) = 0;
  memset_pattern16((void *)(v2 + 48), off_10049C820, 0x80uLL);
  double result = 0.0;
  *(_OWORD *)(v2 + 228) = 0u;
  *(_OWORD *)(v2 + 212) = 0u;
  *(_OWORD *)(v2 + 196) = 0u;
  *(_OWORD *)(v2 + 180) = 0u;
  *(void *)(v2 + 48) = sub_1003D8260;
  *(void *)(v2 + 160) = sub_1003D8260;
  uint64_t v4 = *(void *)(a1 + 584);
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 540) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(void *)(v4 + 248) = 0;
  return result;
}

uint64_t sub_1003D6004(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 584);
  *(void *)(result + 288) = 0;
  *(_DWORD *)(result + 156) = 0;
  *(_DWORD *)(result + 540) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(void *)(v1 + 248) = 0;
  return result;
}

uint64_t sub_1003D6024(uint64_t a1)
{
  v325 = (void *)(a1 + 299);
  v323 = (void *)(a1 + 331);
  v324 = (void *)(a1 + 315);
  int v2 = *(_DWORD *)(a1 + 540);
  while (2)
  {
    if (!v2)
    {
      if (*(unsigned char *)(*(void *)(a1 + 584) + 24))
      {
        uint64_t result = sub_1003D5E0C((void *)a1);
        if (!result) {
          return result;
        }
        int v2 = *(_DWORD *)(a1 + 540);
        int v4 = v2 - 1;
        if ((v2 - 1) > 0xFD)
        {
LABEL_26:
          uint64_t v6 = *(void *)a1;
          *(_DWORD *)(*(void *)a1 + 40) = 70;
LABEL_14:
          *(_DWORD *)(v6 + 44) = v2;
          (**(void (***)(uint64_t))a1)(a1);
          goto LABEL_3;
        }
        goto LABEL_6;
      }
      int v7 = *(uint64_t **)(a1 + 40);
      int v8 = (unsigned __int8 *)v7[1];
      if (v8)
      {
        int v9 = (unsigned __int8 *)(*v7 + 1);
        int v10 = *(unsigned __int8 *)*v7;
        uint64_t v11 = v8 - 1;
        if (v8 != (unsigned __int8 *)1) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t result = ((uint64_t (*)(uint64_t))v7[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v14 = (unsigned __int8 *)v7[1];
        int v9 = (unsigned __int8 *)(*v7 + 1);
        int v10 = *(unsigned __int8 *)*v7;
        uint64_t v11 = v14 - 1;
        if (v14 != (unsigned __int8 *)1)
        {
LABEL_17:
          int v13 = *v9;
          uint64_t v12 = (uint64_t)(v9 + 1);
          int v2 = v13;
          if (v10 != 255) {
            goto LABEL_25;
          }
LABEL_23:
          if (v2 == 216)
          {
            *(_DWORD *)(a1 + 540) = 216;
            *int v7 = v12;
            v7[1] = (uint64_t)(v11 - 1);
            int v4 = 215;
            goto LABEL_6;
          }
LABEL_25:
          uint64_t v15 = *(void *)a1;
          *(_DWORD *)(v15 + 40) = 55;
          *(_DWORD *)(v15 + 44) = v10;
          *(_DWORD *)(*(void *)a1 + 48) = v2;
          (**(void (***)(uint64_t))a1)(a1);
          *(_DWORD *)(a1 + 540) = v2;
          *int v7 = v12;
          v7[1] = (uint64_t)(v11 - 1);
          int v4 = v2 - 1;
          if ((v2 - 1) > 0xFD) {
            goto LABEL_26;
          }
          goto LABEL_6;
        }
      }
      uint64_t result = ((uint64_t (*)(uint64_t))v7[3])(a1);
      if (!result) {
        return result;
      }
      uint64_t v11 = (unsigned __int8 *)v7[1];
      uint64_t v12 = *v7 + 1;
      int v2 = *(unsigned __int8 *)*v7;
      if (v10 != 255) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
    int v4 = v2 - 1;
LABEL_6:
    switch(v4)
    {
      case 0:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
        uint64_t v3 = *(void *)a1;
        *(_DWORD *)(v3 + 40) = 94;
        *(_DWORD *)(v3 + 44) = v2;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
        goto LABEL_3;
      case 191:
        uint64_t result = sub_1003D84DC((uint64_t *)a1, 1, 0, 0);
        if (result) {
          goto LABEL_3;
        }
        return result;
      case 192:
        uint64_t result = sub_1003D84DC((uint64_t *)a1, 0, 0, 0);
        if (result) {
          goto LABEL_3;
        }
        return result;
      case 193:
        uint64_t result = sub_1003D84DC((uint64_t *)a1, 0, 1, 0);
        if (result) {
          goto LABEL_3;
        }
        return result;
      case 194:
      case 196:
      case 197:
      case 198:
      case 199:
      case 202:
      case 204:
      case 205:
      case 206:
        uint64_t v6 = *(void *)a1;
        *(_DWORD *)(*(void *)a1 + 40) = 63;
        goto LABEL_14;
      case 195:
        int v16 = *(unsigned __int8 ***)(a1 + 40);
        int v17 = v16[1];
        if (v17)
        {
          uint64_t v19 = *v16 + 1;
          uint64_t v18 = **v16;
          uint64_t v20 = (uint64_t)(v17 - 1);
          if (v20) {
            goto LABEL_69;
          }
        }
        else
        {
          if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
            return 0;
          }
          uint64_t v19 = *v16 + 1;
          uint64_t v18 = **v16;
          uint64_t v20 = (uint64_t)(v16[1] - 1);
          if (v16[1] != (unsigned __int8 *)1) {
            goto LABEL_69;
          }
        }
        if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
          return 0;
        }
        uint64_t v19 = *v16;
        uint64_t v20 = (uint64_t)v16[1];
LABEL_69:
        uint64_t v59 = v18 << 8;
        uint64_t v60 = (unsigned __int8 *)(v20 - 1);
        unsigned int v62 = *v19;
        uint64_t v61 = v19 + 1;
        unint64_t v63 = v59 | v62;
        uint64_t v64 = v63 - 2;
        if (v63 >= 0x13)
        {
          v306 = v16;
          do
          {
            if (!v60)
            {
              if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
                return 0;
              }
              uint64_t v61 = *v16;
              uint64_t v60 = v16[1];
            }
            unsigned int v76 = *v61;
            unint64_t v75 = v61 + 1;
            uint64_t v77 = *(void *)a1;
            *(_DWORD *)(v77 + 40) = 82;
            *(_DWORD *)(v77 + 44) = v76;
            uint64_t v308 = v76;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
            if (v60 == (unsigned __int8 *)1)
            {
              if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
                return 0;
              }
              unint64_t v78 = *v16 + 1;
              int v322 = **v16;
              uint64_t v80 = (uint64_t)(v16[1] - 1);
              if (v16[1] != (unsigned __int8 *)1)
              {
LABEL_79:
                int v82 = *v78;
                float64x2_t v81 = v78 + 1;
                int v321 = v82;
                uint64_t v83 = v80 - 1;
                if (v83) {
                  goto LABEL_80;
                }
                goto LABEL_98;
              }
            }
            else
            {
              int v79 = *v75;
              unint64_t v78 = v75 + 1;
              int v322 = v79;
              uint64_t v80 = (uint64_t)(v60 - 2);
              if (v60 != (unsigned __int8 *)2) {
                goto LABEL_79;
              }
            }
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            float64x2_t v81 = *v16 + 1;
            int v321 = **v16;
            uint64_t v83 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_80:
              int v85 = *v81;
              float64x2_t v84 = v81 + 1;
              int v320 = v85;
              uint64_t v86 = v83 - 1;
              if (v86) {
                goto LABEL_81;
              }
              goto LABEL_100;
            }
LABEL_98:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            float64x2_t v84 = *v16 + 1;
            int v320 = **v16;
            uint64_t v86 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_81:
              int v88 = *v84;
              float64x2_t v87 = v84 + 1;
              int v319 = v88;
              uint64_t v89 = v86 - 1;
              if (v89) {
                goto LABEL_82;
              }
              goto LABEL_102;
            }
LABEL_100:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            float64x2_t v87 = *v16 + 1;
            int v319 = **v16;
            uint64_t v89 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_82:
              int v91 = *v87;
              unsigned int v90 = v87 + 1;
              int v318 = v91;
              uint64_t v92 = v89 - 1;
              if (v92) {
                goto LABEL_83;
              }
              goto LABEL_104;
            }
LABEL_102:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            unsigned int v90 = *v16 + 1;
            int v318 = **v16;
            uint64_t v92 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_83:
              int v94 = *v90;
              uint32x4_t v93 = v90 + 1;
              int v317 = v94;
              uint64_t v95 = v92 - 1;
              if (v95) {
                goto LABEL_84;
              }
              goto LABEL_106;
            }
LABEL_104:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            uint32x4_t v93 = *v16 + 1;
            int v317 = **v16;
            uint64_t v95 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_84:
              int v97 = *v93;
              int8x16_t v96 = v93 + 1;
              int v316 = v97;
              uint64_t v98 = v95 - 1;
              if (v98) {
                goto LABEL_85;
              }
              goto LABEL_108;
            }
LABEL_106:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            int8x16_t v96 = *v16 + 1;
            int v316 = **v16;
            uint64_t v98 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_85:
              int v100 = *v96;
              uint64_t v99 = v96 + 1;
              int v315 = v100;
              uint64_t v101 = v98 - 1;
              if (v101) {
                goto LABEL_86;
              }
              goto LABEL_110;
            }
LABEL_108:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            uint64_t v99 = *v16 + 1;
            int v315 = **v16;
            uint64_t v101 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_86:
              int v103 = *v99;
              unint64_t v102 = v99 + 1;
              int v326 = v103;
              uint64_t v104 = v101 - 1;
              if (v104) {
                goto LABEL_87;
              }
              goto LABEL_112;
            }
LABEL_110:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            unint64_t v102 = *v16 + 1;
            int v326 = **v16;
            uint64_t v104 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_87:
              int v106 = *v102;
              uint32x4_t v105 = v102 + 1;
              int v314 = v106;
              uint64_t v107 = v104 - 1;
              if (v107) {
                goto LABEL_88;
              }
              goto LABEL_114;
            }
LABEL_112:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            uint32x4_t v105 = *v16 + 1;
            int v314 = **v16;
            uint64_t v107 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_88:
              int v109 = *v105;
              BOOL v108 = v105 + 1;
              int v313 = v109;
              uint64_t v110 = v107 - 1;
              if (v110) {
                goto LABEL_89;
              }
              goto LABEL_116;
            }
LABEL_114:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            BOOL v108 = *v16 + 1;
            int v313 = **v16;
            uint64_t v110 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_89:
              int v112 = *v108;
              uint64_t v111 = v108 + 1;
              int v312 = v112;
              uint64_t v113 = v110 - 1;
              if (v113) {
                goto LABEL_90;
              }
              goto LABEL_118;
            }
LABEL_116:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            uint64_t v111 = *v16 + 1;
            int v312 = **v16;
            uint64_t v113 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_90:
              int v115 = *v111;
              uint64x2_t v114 = v111 + 1;
              int v311 = v115;
              uint64_t v116 = v113 - 1;
              if (v116) {
                goto LABEL_91;
              }
              goto LABEL_120;
            }
LABEL_118:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            uint64x2_t v114 = *v16 + 1;
            int v311 = **v16;
            uint64_t v116 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_91:
              int v118 = *v114;
              uint32x4_t v117 = v114 + 1;
              int v310 = v118;
              uint64_t v119 = v116 - 1;
              if (v119) {
                goto LABEL_92;
              }
              goto LABEL_122;
            }
LABEL_120:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            uint32x4_t v117 = *v16 + 1;
            int v310 = **v16;
            uint64_t v119 = (uint64_t)(v16[1] - 1);
            if (v16[1] != (unsigned __int8 *)1)
            {
LABEL_92:
              int v121 = *v117;
              int v120 = v117 + 1;
              int v309 = v121;
              uint64_t v122 = v119 - 1;
              if (!v122) {
                goto LABEL_124;
              }
              goto LABEL_93;
            }
LABEL_122:
            if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
              return 0;
            }
            int v120 = *v16 + 1;
            int v309 = **v16;
            uint64_t v122 = (uint64_t)(v16[1] - 1);
            if (v16[1] == (unsigned __int8 *)1)
            {
LABEL_124:
              if (!((unsigned int (*)(uint64_t))v16[3])(a1)) {
                return 0;
              }
              uint64_t v123 = v64;
              int v120 = *v16;
              v307 = v16[1];
              goto LABEL_126;
            }
LABEL_93:
            v307 = (unsigned __int8 *)v122;
            uint64_t v123 = v64;
LABEL_126:
            int v124 = *v120;
            uint64_t v61 = v120 + 1;
            uint64_t v125 = *(void *)a1;
            *(_DWORD *)(v125 + 48) = v321;
            *(_DWORD *)(v125 + 52) = v320;
            unint64_t v126 = v123 - 17;
            *(_DWORD *)(v125 + 56) = v319;
            *(_DWORD *)(v125 + 60) = v318;
            *(_DWORD *)(v125 + 64) = v317;
            *(_DWORD *)(v125 + 68) = v316;
            *(_DWORD *)(v125 + 72) = v315;
            *(_DWORD *)(v125 + 40) = 88;
            *(_DWORD *)(v125 + 44) = v322;
            (*(void (**)(uint64_t, uint64_t))(v125 + 8))(a1, 2);
            uint64_t v127 = *(void *)a1;
            *(_DWORD *)(v127 + 48) = v314;
            *(_DWORD *)(v127 + 52) = v313;
            unint64_t v128 = v126;
            *(_DWORD *)(v127 + 56) = v312;
            *(_DWORD *)(v127 + 60) = v311;
            char v129 = v124;
            unint64_t v130 = (v321
                                + v322
                                + v320
                                + v319
                                + v318
                                + v317
                                + v316
                                + v315
                                + v326
                                + v314
                                + v313
                                + v312
                                + v311
                                + v310
                                + v309
                                + v124);
            *(_DWORD *)(v127 + 64) = v310;
            *(_DWORD *)(v127 + 68) = v309;
            *(_DWORD *)(v127 + 72) = v124;
            *(_DWORD *)(v127 + 40) = 88;
            *(_DWORD *)(v127 + 44) = v326;
            (*(void (**)(uint64_t, uint64_t))(v127 + 8))(a1, 2);
            if (v130 > 0x100 || v126 < v130)
            {
              uint64_t v131 = *(void *)a1;
              *(_DWORD *)(v131 + 40) = 9;
              (*(void (**)(uint64_t))v131)(a1);
            }
            uint64_t v60 = v307 - 1;
            long long v342 = 0u;
            long long v343 = 0u;
            long long v340 = 0u;
            long long v341 = 0u;
            long long v338 = 0u;
            long long v339 = 0u;
            long long v336 = 0u;
            long long v337 = 0u;
            long long v334 = 0u;
            long long v335 = 0u;
            long long v332 = 0u;
            long long v333 = 0u;
            long long v330 = 0u;
            long long v331 = 0u;
            long long v328 = 0u;
            long long v329 = 0u;
            if (v130)
            {
              uint64_t v132 = &v328;
              unint64_t v133 = v130;
              int v16 = v306;
              while (1)
              {
                if (!v60)
                {
                  if (!((unsigned int (*)(uint64_t))v306[3])(a1)) {
                    return 0;
                  }
                  uint64_t v61 = *v306;
                  uint64_t v60 = v306[1];
                }
                --v60;
                char v134 = *v61++;
                *(unsigned char *)uint64_t v132 = v134;
                uint64_t v132 = (long long *)((char *)v132 + 1);
                if (!--v133) {
                  goto LABEL_137;
                }
              }
            }
            int v16 = v306;
LABEL_137:
            unsigned int v135 = v308 - 16;
            if ((v308 & 0x10) != 0)
            {
              uint64_t v136 = (unsigned char **)(a1 + 8 * (v308 - 16) + 248);
            }
            else
            {
              unsigned int v135 = v308;
              uint64_t v136 = (unsigned char **)(a1 + 8 * v308 + 216);
            }
            if (v135 >= 4)
            {
              uint64_t v137 = *(void *)a1;
              *(_DWORD *)(v137 + 40) = 31;
              *(_DWORD *)(v137 + 44) = v135;
              (**(void (***)(uint64_t))a1)(a1);
            }
            int v65 = *v136;
            if (!*v136)
            {
              int v65 = (unsigned char *)sub_1003C57D8(a1);
              *uint64_t v136 = v65;
            }
            *int v65 = 0;
            v65[1] = v322;
            v65[2] = v321;
            v65[3] = v320;
            v65[4] = v319;
            v65[5] = v318;
            v65[6] = v317;
            v65[7] = v316;
            v65[8] = v315;
            v65[9] = v326;
            v65[10] = v314;
            v65[11] = v313;
            v65[12] = v312;
            v65[13] = v311;
            v65[14] = v310;
            v65[15] = v309;
            v65[16] = v129;
            uint64_t v66 = *v136;
            long long v67 = v341;
            *(_OWORD *)(v66 + 209) = v340;
            *(_OWORD *)(v66 + 225) = v67;
            long long v68 = v343;
            *(_OWORD *)(v66 + 241) = v342;
            long long v69 = v337;
            *(_OWORD *)(v66 + 145) = v336;
            *(_OWORD *)(v66 + 161) = v69;
            long long v70 = v339;
            *(_OWORD *)(v66 + 177) = v338;
            *(_OWORD *)(v66 + 193) = v70;
            long long v71 = v333;
            *(_OWORD *)(v66 + 81) = v332;
            *(_OWORD *)(v66 + 97) = v71;
            long long v72 = v335;
            *(_OWORD *)(v66 + 113) = v334;
            *(_OWORD *)(v66 + 129) = v72;
            long long v73 = v329;
            *(_OWORD *)(v66 + 17) = v328;
            *(_OWORD *)(v66 + 33) = v73;
            long long v74 = v331;
            *(_OWORD *)(v66 + 49) = v330;
            *(_OWORD *)(v66 + 65) = v74;
            uint64_t v64 = v128 - v130;
            *(_OWORD *)(v66 + 257) = v68;
          }
          while (v64 > 16);
        }
        if (v64)
        {
          uint64_t v138 = *(void *)a1;
          *(_DWORD *)(v138 + 40) = 12;
          (*(void (**)(uint64_t))v138)(a1);
        }
        *int v16 = v61;
        v16[1] = v60;
LABEL_3:
        int v2 = 0;
        *(_DWORD *)(a1 + 540) = 0;
        continue;
      case 200:
        uint64_t result = sub_1003D84DC((uint64_t *)a1, 0, 0, 1);
        if (result) {
          goto LABEL_3;
        }
        return result;
      case 201:
        uint64_t result = sub_1003D84DC((uint64_t *)a1, 0, 1, 1);
        if (result) {
          goto LABEL_3;
        }
        return result;
      case 203:
        uint64_t v21 = *(unsigned __int8 ***)(a1 + 40);
        uint64_t v22 = v21[1];
        if (v22)
        {
          int v23 = *v21 + 1;
          uint64_t v24 = **v21;
          uint64_t v25 = (uint64_t)(v22 - 1);
          if (v25)
          {
LABEL_42:
            unsigned int v27 = *v23;
            uint64_t v26 = v23 + 1;
            unint64_t v28 = (v24 << 8) | v27;
            uint64_t v29 = v25 - 1;
            if (v28 >= 3) {
              goto LABEL_156;
            }
LABEL_149:
            unint64_t v139 = v28 - 2;
LABEL_150:
            if (v139)
            {
              uint64_t v140 = *(void *)a1;
              *(_DWORD *)(v140 + 40) = 12;
              (*(void (**)(uint64_t))v140)(a1);
            }
            _DWORD *v21 = v26;
            v21[1] = (unsigned __int8 *)v29;
            goto LABEL_3;
          }
        }
        else
        {
          uint64_t result = ((uint64_t (*)(uint64_t))v21[3])(a1);
          if (!result) {
            return result;
          }
          int v23 = *v21 + 1;
          uint64_t v24 = **v21;
          uint64_t v25 = (uint64_t)(v21[1] - 1);
          if (v21[1] != (unsigned __int8 *)1) {
            goto LABEL_42;
          }
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v21[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v26 = *v21 + 1;
        unint64_t v28 = (v24 << 8) | **v21;
        uint64_t v29 = (uint64_t)(v21[1] - 1);
        if (v28 < 3) {
          goto LABEL_149;
        }
        while (1)
        {
LABEL_156:
          if (v29)
          {
            unsigned int v144 = *v26;
            unint64_t v142 = v26 + 1;
            uint64_t v143 = v144;
            uint64_t v145 = v29 - 1;
            if (v145) {
              goto LABEL_163;
            }
          }
          else
          {
            uint64_t result = ((uint64_t (*)(uint64_t))v21[3])(a1);
            if (!result) {
              return result;
            }
            unint64_t v142 = *v21 + 1;
            uint64_t v143 = **v21;
            uint64_t v145 = (uint64_t)(v21[1] - 1);
            if (v21[1] != (unsigned __int8 *)1) {
              goto LABEL_163;
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t))v21[3])(a1);
          if (!result) {
            return result;
          }
          unint64_t v142 = *v21;
          uint64_t v145 = (uint64_t)v21[1];
LABEL_163:
          unsigned int v146 = *v142;
          uint64_t v147 = *(void *)a1;
          *(_DWORD *)(v147 + 40) = 81;
          *(_DWORD *)(v147 + 44) = v143;
          *(_DWORD *)(*(void *)a1 + 48) = v146;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
          if (v143 >= 0x20)
          {
            uint64_t v141 = *(void *)a1;
            *(_DWORD *)(v141 + 40) = 29;
            *(_DWORD *)(v141 + 44) = v143;
            (**(void (***)(uint64_t))a1)(a1);
          }
          else if (v143 < 0x10)
          {
            uint64_t v148 = a1 + v143;
            *(unsigned char *)(v148 + 299) = v146 & 0xF;
            *(unsigned char *)(v148 + 315) = v146 >> 4;
            if ((v146 & 0xF) > v146 >> 4)
            {
              uint64_t v149 = *(void *)a1;
              *(_DWORD *)(v149 + 40) = 30;
              *(_DWORD *)(v149 + 44) = v146;
              (**(void (***)(uint64_t))a1)(a1);
            }
            goto LABEL_155;
          }
          *(unsigned char *)(a1 + (v143 - 16) + 331) = v146;
LABEL_155:
          uint64_t v26 = v142 + 1;
          uint64_t v29 = v145 - 1;
          v28 -= 2;
          unint64_t v139 = v28 - 2;
          if (v28 <= 2) {
            goto LABEL_150;
          }
        }
      case 215:
        uint64_t v30 = *(void *)a1;
        *(_DWORD *)(v30 + 40) = 104;
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a1, 1);
        uint64_t v31 = *(void *)(a1 + 584);
        if (*(unsigned char *)(v31 + 24))
        {
          uint64_t v32 = *(void *)a1;
          *(_DWORD *)(v32 + 40) = 64;
          (*(void (**)(uint64_t))v32)(a1);
          uint64_t v31 = *(void *)(a1 + 584);
        }
        void *v325 = 0;
        v325[1] = 0;
        void *v324 = 0x101010101010101;
        v324[1] = 0x101010101010101;
        void *v323 = 0x505050505050505;
        v323[1] = 0x505050505050505;
        *(_DWORD *)(a1 + 348) = 0;
        *(_DWORD *)(a1 + 60) = 0;
        *(_DWORD *)(a1 + 364) = 0;
        *(unsigned char *)(a1 + 368) = 0;
        *(_DWORD *)(a1 + 352) = 65792;
        *(_DWORD *)(a1 + 356) = 65537;
        *(_WORD *)(a1 + 360) = 0;
        *(unsigned char *)(v31 + 24) = 1;
        goto LABEL_3;
      case 216:
        uint64_t v254 = *(void *)a1;
        *(_DWORD *)(v254 + 40) = 87;
        (*(void (**)(uint64_t, uint64_t))(v254 + 8))(a1, 1);
        *(_DWORD *)(a1 + 540) = 0;
        return 2;
      case 217:
        v255 = *(unsigned __int8 ***)(a1 + 40);
        v256 = *v255;
        v257 = v255[1];
        if (!*(unsigned char *)(*(void *)(a1 + 584) + 25))
        {
          uint64_t v258 = *(void *)a1;
          *(_OWORD *)(v258 + 60) = unk_10040D678;
          *(_OWORD *)(v258 + 76) = xmmword_10040D688;
          *(_OWORD *)(v258 + 92) = unk_10040D698;
          *(_OWORD *)(v258 + 108) = xmmword_10040D6A8;
          *(_DWORD *)(v258 + 40) = 60;
          *(_OWORD *)(v258 + 44) = xmmword_10040D668;
          (**(void (***)(uint64_t))a1)(a1);
        }
        if (v257) {
          goto LABEL_339;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v255[3])(a1);
        if (!result) {
          return result;
        }
        v256 = *v255;
        v257 = v255[1];
LABEL_339:
        unsigned int v261 = *v256;
        v259 = v256 + 1;
        uint64_t v260 = v261;
        v262 = v257 - 1;
        if (v257 != (unsigned __int8 *)1) {
          goto LABEL_342;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v255[3])(a1);
        if (!result) {
          return result;
        }
        v259 = *v255;
        v262 = v255[1];
LABEL_342:
        unsigned int v265 = *v259;
        v263 = v259 + 1;
        uint64_t v264 = v265;
        v266 = v262 - 1;
        if (v262 != (unsigned __int8 *)1) {
          goto LABEL_345;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v255[3])(a1);
        if (!result) {
          return result;
        }
        v263 = *v255;
        v266 = v255[1];
LABEL_345:
        uint64_t v267 = (v260 << 8) | v264;
        uint64_t v268 = *v263;
        uint64_t v269 = *(void *)a1;
        *(_DWORD *)(v269 + 40) = 105;
        *(_DWORD *)(v269 + 44) = v268;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
        if (v267 != 2 * v268 + 6 || v268 > 4) {
          goto LABEL_350;
        }
        if (v268)
        {
          *(_DWORD *)(a1 + 416) = v268;
          v272 = v263 + 1;
          v273 = v266 - 1;
          goto LABEL_354;
        }
        if (*(unsigned char *)(a1 + 297))
        {
          *(_DWORD *)(a1 + 416) = 0;
          v272 = v263 + 1;
          v273 = v266 - 1;
        }
        else
        {
LABEL_350:
          uint64_t v271 = *(void *)a1;
          *(_DWORD *)(v271 + 40) = 12;
          (*(void (**)(uint64_t))v271)(a1);
          *(_DWORD *)(a1 + 416) = v268;
          v272 = v263 + 1;
          v273 = v266 - 1;
          if (v268)
          {
LABEL_354:
            unint64_t v274 = 0;
            uint64_t v275 = a1 + 424;
            uint64_t v276 = -1;
            while (1)
            {
              if (!v273)
              {
                uint64_t result = ((uint64_t (*)(uint64_t))v255[3])(a1);
                if (!result) {
                  return result;
                }
                v272 = *v255;
                v273 = v255[1];
              }
              int v282 = *v272;
              v277 = v272 + 1;
              int v281 = v282;
              if (v274) {
                break;
              }
LABEL_364:
              v286 = *(_DWORD **)(a1 + 288);
              int v287 = *(_DWORD *)(a1 + 56);
              int v288 = v287 - 1;
              if (v287 < 1) {
                goto LABEL_386;
              }
LABEL_382:
              uint64_t v293 = (uint64_t)&v286[24 * v288 + 24];
              do
              {
                if (v281 == *v286) {
                  goto LABEL_387;
                }
                v286 += 24;
                --v287;
              }
              while (v287);
              v286 = (_DWORD *)v293;
LABEL_386:
              uint64_t v294 = *(void *)a1;
              *(_DWORD *)(v294 + 40) = 4;
              *(_DWORD *)(v294 + 44) = v281;
              (**(void (***)(uint64_t))a1)(a1);
LABEL_387:
              *(void *)(a1 + 8 * v274 + 424) = v286;
              v278 = v273 - 1;
              if (!v278)
              {
                uint64_t result = ((uint64_t (*)(uint64_t))v255[3])(a1);
                if (!result) {
                  return result;
                }
                v277 = *v255;
                v278 = v255[1];
              }
              unsigned int v279 = *v277;
              v272 = v277 + 1;
              v286[5] = v279 >> 4;
              v286[6] = v279 & 0xF;
              uint64_t v280 = *(void *)a1;
              *(_DWORD *)(v280 + 44) = *v286;
              *(_DWORD *)(v280 + 48) = v286[5];
              *(_DWORD *)(v280 + 52) = v286[6];
              *(_DWORD *)(v280 + 40) = 106;
              (*(void (**)(uint64_t, uint64_t))(v280 + 8))(a1, 1);
              ++v274;
              v273 = v278 - 1;
              ++v276;
              if (v274 == v268)
              {
                char v295 = 0;
                goto LABEL_394;
              }
            }
            uint64_t v283 = 0;
            unint64_t v284 = v276 & 0xFFFFFFFFFFFFFFFELL;
            unint64_t v285 = v274 - 1;
            while (**(_DWORD **)(v275 + 8 * v283) != v281)
            {
              if (v274 == ++v283) {
                goto LABEL_364;
              }
            }
            int v289 = **(_DWORD **)(a1 + 424);
            if (v274 >= 2)
            {
              if (v274 == 2)
              {
                for (uint64_t i = 1; i != v274; ++i)
                {
LABEL_378:
                  if (**(_DWORD **)(v275 + 8 * i) > v289) {
                    int v289 = **(_DWORD **)(v275 + 8 * i);
                  }
                }
                goto LABEL_381;
              }
              uint64_t i = v285 | 1;
              v291 = (int **)(a1 + 440);
              int v292 = **(_DWORD **)(a1 + 424);
              do
              {
                if (**(v291 - 1) > v289) {
                  int v289 = **(v291 - 1);
                }
                if (**v291 > v292) {
                  int v292 = **v291;
                }
                v291 += 2;
                v284 -= 2;
              }
              while (v284);
              if (v289 <= v292) {
                int v289 = v292;
              }
              if (v285 != (v285 & 0xFFFFFFFFFFFFFFFELL)) {
                goto LABEL_378;
              }
            }
LABEL_381:
            int v281 = v289 + 1;
            v286 = *(_DWORD **)(a1 + 288);
            int v287 = *(_DWORD *)(a1 + 56);
            int v288 = v287 - 1;
            if (v287 < 1) {
              goto LABEL_386;
            }
            goto LABEL_382;
          }
        }
        char v295 = 1;
LABEL_394:
        if (v273) {
          goto LABEL_397;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v255[3])(a1);
        if (!result) {
          return result;
        }
        v272 = *v255;
        v273 = v255[1];
LABEL_397:
        int v297 = *v272;
        v296 = v272 + 1;
        *(_DWORD *)(a1 + 508) = v297;
        v298 = v273 - 1;
        if (v273 != (unsigned __int8 *)1) {
          goto LABEL_400;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v255[3])(a1);
        if (!result) {
          return result;
        }
        v296 = *v255;
        v298 = v255[1];
LABEL_400:
        int v300 = *v296;
        v299 = v296 + 1;
        *(_DWORD *)(a1 + 512) = v300;
        v301 = v298 - 1;
        if (v301) {
          goto LABEL_403;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v255[3])(a1);
        if (result)
        {
          v299 = *v255;
          v301 = v255[1];
LABEL_403:
          v302 = v301 - 1;
          unsigned int v304 = *v299;
          v303 = v299 + 1;
          *(_DWORD *)(a1 + 516) = v304 >> 4;
          *(_DWORD *)(a1 + 520) = v304 & 0xF;
          uint64_t v305 = *(void *)a1;
          *(_DWORD *)(v305 + 44) = *(_DWORD *)(a1 + 508);
          *(_DWORD *)(v305 + 48) = *(_DWORD *)(a1 + 512);
          *(_DWORD *)(v305 + 52) = *(_DWORD *)(a1 + 516);
          *(_DWORD *)(v305 + 56) = *(_DWORD *)(a1 + 520);
          *(_DWORD *)(v305 + 40) = 107;
          (*(void (**)(uint64_t, uint64_t))(v305 + 8))(a1, 1);
          *(_DWORD *)(*(void *)(a1 + 584) + 28) = 0;
          if ((v295 & 1) == 0) {
            ++*(_DWORD *)(a1 + 156);
          }
          *v255 = v303;
          v255[1] = v302;
          uint64_t result = 1;
          *(_DWORD *)(a1 + 540) = 0;
        }
        return result;
      case 218:
        unint64_t v33 = *(unsigned __int8 ***)(a1 + 40);
        uint64_t v34 = v33[1];
        if (v34)
        {
          uint64_t v35 = *v33 + 1;
          uint64_t v36 = **v33;
          uint64_t v37 = (uint64_t)(v34 - 1);
          if (v37) {
            goto LABEL_171;
          }
        }
        else
        {
          uint64_t result = ((uint64_t (*)(uint64_t))v33[3])(a1);
          if (!result) {
            return result;
          }
          uint64_t v35 = *v33 + 1;
          uint64_t v36 = **v33;
          uint64_t v37 = (uint64_t)(v33[1] - 1);
          if (v33[1] != (unsigned __int8 *)1) {
            goto LABEL_171;
          }
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v33[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v35 = *v33;
        uint64_t v37 = (uint64_t)v33[1];
LABEL_171:
        uint64_t v150 = (unsigned __int8 *)(v37 - 1);
        unsigned int v152 = *v35;
        uint64_t v151 = v35 + 1;
        unint64_t v153 = (v36 << 8) | v152;
        uint64_t v154 = v153 - 2;
        if (v153 < 3)
        {
LABEL_172:
          if (v154)
          {
            uint64_t v155 = *(void *)a1;
            *(_DWORD *)(v155 + 40) = 12;
            (*(void (**)(uint64_t))v155)(a1);
          }
          *unint64_t v33 = v151;
          v33[1] = v150;
          goto LABEL_3;
        }
        while (1)
        {
          if (!v150)
          {
            uint64_t result = ((uint64_t (*)(uint64_t))v33[3])(a1);
            if (!result) {
              return result;
            }
            uint64_t v151 = *v33;
            uint64_t v150 = v33[1];
          }
          unsigned int v157 = *v151;
          uint64_t v158 = v157 & 0xF;
          uint64_t v159 = *(void *)a1;
          *(_DWORD *)(v159 + 40) = 83;
          *(_DWORD *)(v159 + 44) = v157 & 0xF;
          *(_DWORD *)(*(void *)a1 + 48) = v157 >> 4;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
          if ((v157 & 0xF) < 4)
          {
            uint64_t v167 = a1 + 8 * v158;
            uint64x2_t v168 = *(uint16x4_t **)(v167 + 184);
            uint32x4_t v163 = (uint16x4_t **)(v167 + 184);
            uint32x4_t v162 = v168;
            if (!v168)
            {
LABEL_184:
              uint32x4_t v162 = (uint16x4_t *)sub_1003C57AC(a1);
              *uint32x4_t v163 = v162;
              unint64_t v165 = v154 - 1;
              uint64_t v327 = v154 - 1;
              if (v157 >= 0x10) {
                goto LABEL_185;
              }
              goto LABEL_189;
            }
          }
          else
          {
            uint64_t v160 = *(void *)a1;
            *(_DWORD *)(v160 + 40) = 32;
            *(_DWORD *)(v160 + 44) = v158;
            (**(void (***)(uint64_t))a1)(a1);
            uint64_t v161 = a1 + 8 * v158;
            uint64x2_t v164 = *(uint16x4_t **)(v161 + 184);
            uint32x4_t v163 = (uint16x4_t **)(v161 + 184);
            uint32x4_t v162 = v164;
            if (!v164) {
              goto LABEL_184;
            }
          }
          unint64_t v165 = v154 - 1;
          uint64_t v327 = v154 - 1;
          if (v157 >= 0x10)
          {
LABEL_185:
            if ((unint64_t)v154 > 0x80) {
              goto LABEL_193;
            }
            memset_pattern16(v162, &unk_10040D710, 0x80uLL);
            uint64_t v166 = v165 >> 1;
            goto LABEL_191;
          }
LABEL_189:
          if ((unint64_t)v154 > 0x40)
          {
LABEL_193:
            ++v151;
            --v150;
            uint64x2_t v169 = (int *)&unk_10040DA60;
            uint64_t v166 = 64;
            if (v157 >= 0x10) {
              goto LABEL_208;
            }
            goto LABEL_194;
          }
          memset_pattern16(v162, &unk_10040D710, 0x80uLL);
          uint64_t v166 = v165;
LABEL_191:
          uint64x2_t v169 = (int *)&unk_10040DEFC;
          switch(v166)
          {
            case 4:
              break;
            case 9:
              uint64x2_t v169 = (int *)&unk_10040DE98;
              break;
            case 16:
              uint64x2_t v169 = (int *)&unk_10040DE18;
              break;
            case 25:
              uint64x2_t v169 = (int *)&unk_10040DD74;
              break;
            case 36:
              uint64x2_t v169 = (int *)&unk_10040DCA4;
              break;
            case 49:
              uint64x2_t v169 = (int *)&unk_10040DBA0;
              break;
            default:
              ++v151;
              --v150;
              if (!v166) {
                goto LABEL_217;
              }
              uint64x2_t v169 = (int *)&unk_10040DA60;
              if (v157 >= 0x10) {
                goto LABEL_208;
              }
              goto LABEL_194;
          }
          ++v151;
          --v150;
          if (v157 >= 0x10)
          {
LABEL_208:
            uint64_t v172 = 0;
            while (1)
            {
              if (v150)
              {
                __int16 v176 = *v151;
                int64x2_t v174 = v151 + 1;
                __int16 v175 = v176;
                int64x2_t v177 = v150 - 1;
                if (v150 != (unsigned __int8 *)1) {
                  goto LABEL_209;
                }
              }
              else
              {
                uint64_t result = ((uint64_t (*)(uint64_t))v33[3])(a1);
                if (!result) {
                  return result;
                }
                uint64_t v178 = v33[1];
                int64x2_t v174 = *v33 + 1;
                __int16 v175 = **v33;
                int64x2_t v177 = v178 - 1;
                if (v178 != (unsigned __int8 *)1) {
                  goto LABEL_209;
                }
              }
              uint64_t result = ((uint64_t (*)(uint64_t))v33[3])(a1);
              if (!result) {
                return result;
              }
              int64x2_t v174 = *v33;
              int64x2_t v177 = v33[1];
LABEL_209:
              __int16 v173 = *v174;
              uint64_t v151 = v174 + 1;
              v162->i16[v169[v172++]] = (v175 << 8) | v173;
              uint64_t v150 = v177 - 1;
              if (v166 == v172) {
                goto LABEL_217;
              }
            }
          }
LABEL_194:
          uint64_t v170 = 0;
          do
          {
            if (!v150)
            {
              uint64_t result = ((uint64_t (*)(uint64_t))v33[3])(a1);
              if (!result) {
                return result;
              }
              uint64_t v151 = *v33;
              uint64_t v150 = v33[1];
            }
            __int16 v171 = *v151++;
            v162->i16[v169[v170++]] = v171;
            --v150;
          }
          while (v166 != v170);
LABEL_217:
          uint64_t v179 = *(void *)a1;
          if (*(int *)(*(void *)a1 + 124) >= 2)
          {
            *(uint32x4_t *)(v179 + 44) = vmovl_u16(*v162);
            *(uint32x4_t *)(v179 + 60) = vmovl_u16(v162[1]);
            *(_DWORD *)(v179 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v179 + 8))(a1, 2);
            uint64_t v180 = *(void *)a1;
            *(uint32x4_t *)(v180 + 44) = vmovl_u16(v162[2]);
            *(uint32x4_t *)(v180 + 60) = vmovl_u16(v162[3]);
            *(_DWORD *)(v180 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v180 + 8))(a1, 2);
            uint64_t v181 = *(void *)a1;
            *(uint32x4_t *)(v181 + 44) = vmovl_u16(v162[4]);
            *(uint32x4_t *)(v181 + 60) = vmovl_u16(v162[5]);
            *(_DWORD *)(v181 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v181 + 8))(a1, 2);
            uint64_t v182 = *(void *)a1;
            *(uint32x4_t *)(v182 + 44) = vmovl_u16(v162[6]);
            *(uint32x4_t *)(v182 + 60) = vmovl_u16(v162[7]);
            *(_DWORD *)(v182 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v182 + 8))(a1, 2);
            uint64_t v183 = *(void *)a1;
            *(uint32x4_t *)(v183 + 44) = vmovl_u16(v162[8]);
            *(uint32x4_t *)(v183 + 60) = vmovl_u16(v162[9]);
            *(_DWORD *)(v183 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v183 + 8))(a1, 2);
            uint64_t v184 = *(void *)a1;
            *(uint32x4_t *)(v184 + 44) = vmovl_u16(v162[10]);
            *(uint32x4_t *)(v184 + 60) = vmovl_u16(v162[11]);
            *(_DWORD *)(v184 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v184 + 8))(a1, 2);
            uint64_t v185 = *(void *)a1;
            *(uint32x4_t *)(v185 + 44) = vmovl_u16(v162[12]);
            *(uint32x4_t *)(v185 + 60) = vmovl_u16(v162[13]);
            *(_DWORD *)(v185 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v185 + 8))(a1, 2);
            uint64_t v186 = *(void *)a1;
            *(uint32x4_t *)(v186 + 44) = vmovl_u16(v162[14]);
            *(uint32x4_t *)(v186 + 60) = vmovl_u16(v162[15]);
            *(_DWORD *)(v186 + 40) = 95;
            (*(void (**)(uint64_t, uint64_t))(v186 + 8))(a1, 2);
          }
          if (v157 >= 0x10) {
            uint64_t v156 = v166;
          }
          else {
            uint64_t v156 = 0;
          }
          uint64_t v154 = v327 - v166 - v156;
          if (v154 <= 0) {
            goto LABEL_172;
          }
        }
      case 219:
        uint64_t v38 = *(unsigned __int8 ***)(a1 + 40);
        uint64_t v39 = v38[1];
        if (v39)
        {
          uint64_t v41 = *v38 + 1;
          uint64_t v40 = **v38;
          uint64_t v42 = (uint64_t)(v39 - 1);
          if (v42) {
            goto LABEL_223;
          }
        }
        else
        {
          uint64_t result = ((uint64_t (*)(uint64_t))v38[3])(a1);
          if (!result) {
            return result;
          }
          uint64_t v41 = *v38 + 1;
          uint64_t v40 = **v38;
          uint64_t v42 = (uint64_t)(v38[1] - 1);
          if (v38[1] != (unsigned __int8 *)1) {
            goto LABEL_223;
          }
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v38[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v41 = *v38;
        uint64_t v42 = (uint64_t)v38[1];
LABEL_223:
        uint64x2_t v187 = (unsigned __int8 *)(v42 - 1);
        unint64_t v188 = (v40 << 8) | *v41;
        uint64_t v189 = *(void *)a1;
        *(_DWORD *)(v189 + 40) = 93;
        *(_DWORD *)(v189 + 44) = *(_DWORD *)(a1 + 540);
        *(_DWORD *)(*(void *)a1 + 48) = v188 - 2;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
        char *v38 = v41 + 1;
        v38[1] = v187;
        if (v188 >= 3) {
          (*(void (**)(uint64_t, unint64_t))(*(void *)(a1 + 40) + 32))(a1, v188 - 2);
        }
        goto LABEL_3;
      case 220:
        int v43 = *(unsigned __int8 ***)(a1 + 40);
        long long v44 = v43[1];
        if (v44)
        {
          uint64_t v45 = *v43 + 1;
          uint64_t v46 = **v43;
          int v47 = v44 - 1;
          if (v44 != (unsigned __int8 *)1) {
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t result = ((uint64_t (*)(uint64_t))v43[3])(a1);
          if (!result) {
            return result;
          }
          uint64x2_t v190 = v43[1];
          uint64_t v45 = *v43 + 1;
          uint64_t v46 = **v43;
          int v47 = v190 - 1;
          if (v190 != (unsigned __int8 *)1)
          {
LABEL_55:
            unsigned int v49 = *v45;
            uint64_t v48 = v45 + 1;
            if (((v46 << 8) | v49) == 4) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v43[3])(a1);
        if (!result) {
          return result;
        }
        int v47 = v43[1];
        uint64_t v48 = *v43 + 1;
        if (((v46 << 8) | **v43) == 4)
        {
LABEL_57:
          uint64_t v51 = v47 - 1;
          if (v47 == (unsigned __int8 *)1)
          {
            uint64_t result = ((uint64_t (*)(uint64_t))v43[3])(a1);
            if (!result) {
              return result;
            }
            uint64_t v52 = *v43 + 1;
            int v53 = **v43;
            uint64_t v55 = (uint64_t)(v43[1] - 1);
            if (v43[1] == (unsigned __int8 *)1) {
              goto LABEL_246;
            }
          }
          else
          {
            int v54 = *v48;
            uint64_t v52 = v48 + 1;
            int v53 = v54;
            uint64_t v55 = (uint64_t)(v51 - 1);
            if (!v55)
            {
LABEL_246:
              uint64_t result = ((uint64_t (*)(uint64_t))v43[3])(a1);
              if (!result) {
                return result;
              }
              uint64_t v52 = *v43;
              uint64_t v55 = (uint64_t)v43[1];
            }
          }
          int v210 = v53 << 8;
          uint64_t v211 = (unsigned __int8 *)(v55 - 1);
          int v212 = v210 | *v52;
          uint64_t v213 = *(void *)a1;
          *(_DWORD *)(v213 + 40) = 84;
          *(_DWORD *)(v213 + 44) = v212;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
          *(_DWORD *)(a1 + 348) = v212;
          _OWORD *v43 = v52 + 1;
          v43[1] = v211;
          goto LABEL_3;
        }
LABEL_56:
        uint64_t v50 = *(void *)a1;
        *(_DWORD *)(v50 + 40) = 12;
        (*(void (**)(uint64_t))v50)(a1);
        goto LABEL_57;
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 584) + 8 * (v2 - 224) + 48))(a1);
        if (result) {
          goto LABEL_3;
        }
        return result;
      case 247:
        uint64_t v56 = *(unsigned __int8 ***)(a1 + 40);
        uint64_t v58 = *v56;
        uint64_t v57 = (uint64_t)v56[1];
        if (*(unsigned char *)(*(void *)(a1 + 584) + 25))
        {
          if (*(int *)(a1 + 56) < 3) {
            goto LABEL_329;
          }
        }
        else
        {
          uint64_t v191 = *(void *)a1;
          *(_DWORD *)(v191 + 40) = 60;
          *(_OWORD *)(v191 + 60) = unk_10040D6C9;
          *(_OWORD *)(v191 + 76) = xmmword_10040D6D9;
          *(_OWORD *)(v191 + 92) = unk_10040D6E9;
          *(_OWORD *)(v191 + 108) = xmmword_10040D6F9;
          *(_OWORD *)(v191 + 44) = xmmword_10040D6B9;
          (**(void (***)(uint64_t))a1)(a1);
          if (*(int *)(a1 + 56) < 3) {
            goto LABEL_329;
          }
        }
        if (v57)
        {
          unsigned int v194 = *v58;
          int v192 = v58 + 1;
          uint64_t v193 = v194;
          uint64_t v195 = v57 - 1;
          if (v195) {
            goto LABEL_233;
          }
        }
        else
        {
          uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
          if (!result) {
            return result;
          }
          int v192 = *v56 + 1;
          uint64_t v193 = **v56;
          uint64_t v195 = (uint64_t)(v56[1] - 1);
          if (v56[1] != (unsigned __int8 *)1)
          {
LABEL_233:
            unsigned int v197 = *v192;
            int v196 = v192 + 1;
            if (((v193 << 8) | v197) == 0x18) {
              goto LABEL_235;
            }
            goto LABEL_234;
          }
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v195 = (uint64_t)v56[1];
        int v196 = *v56 + 1;
        if (((v193 << 8) | **v56) == 0x18)
        {
LABEL_235:
          int v199 = (unsigned __int8 *)(v195 - 1);
          if (!v199)
          {
            uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
            if (!result) {
              return result;
            }
            int v196 = *v56;
            int v199 = v56[1];
          }
          int v201 = *v196;
          int v200 = v196 + 1;
          if (v201 != 13)
          {
            uint64_t v202 = *(void *)a1;
            *(_DWORD *)(v202 + 40) = 70;
            *(_DWORD *)(v202 + 44) = *(_DWORD *)(a1 + 540);
            (**(void (***)(uint64_t))a1)(a1);
          }
          uint64_t v203 = v199 - 1;
          if (v199 == (unsigned __int8 *)1)
          {
            uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
            if (!result) {
              return result;
            }
            uint64_t v205 = *v56 + 1;
            int v204 = **v56;
            uint64_t v207 = (uint64_t)(v56[1] - 1);
            if (v56[1] != (unsigned __int8 *)1)
            {
LABEL_242:
              int v208 = v204 << 8;
              uint64_t v57 = v207 - 1;
              int v209 = *v205;
              uint64_t v58 = v205 + 1;
              if ((v208 | v209) != 0xFF) {
                goto LABEL_329;
              }
LABEL_258:
              if (v57)
              {
                --v57;
                int v215 = *v58++;
                if (v215 != 3) {
                  goto LABEL_329;
                }
              }
              else
              {
                uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                if (!result) {
                  return result;
                }
                uint64_t v57 = (uint64_t)(v56[1] - 1);
                uint64_t v58 = *v56 + 1;
                if (**v56 != 3) {
                  goto LABEL_329;
                }
              }
              if (!v57)
              {
                uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                if (!result) {
                  return result;
                }
                uint64_t v58 = *v56;
                uint64_t v57 = (uint64_t)v56[1];
              }
              --v57;
              int v216 = *v58++;
              int64x2_t v217 = *(_DWORD **)(a1 + 288);
              if (v217[24] == v216)
              {
                if (!v57)
                {
                  uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                  if (!result) {
                    return result;
                  }
                  uint64_t v58 = *v56;
                  uint64_t v57 = (uint64_t)v56[1];
                  int64x2_t v217 = *(_DWORD **)(a1 + 288);
                }
                --v57;
                int v218 = *v58++;
                if (*v217 == v218)
                {
                  if (!v57)
                  {
                    uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                    if (!result) {
                      return result;
                    }
                    uint64_t v58 = *v56;
                    uint64_t v57 = (uint64_t)v56[1];
                    int64x2_t v217 = *(_DWORD **)(a1 + 288);
                  }
                  --v57;
                  int v219 = *v58++;
                  if (v217[48] == v219)
                  {
                    if (!v57)
                    {
                      uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                      if (!result) {
                        return result;
                      }
                      uint64_t v58 = *v56;
                      uint64_t v57 = (uint64_t)v56[1];
                    }
                    --v57;
                    int v220 = *v58++;
                    if (v220 == 128)
                    {
                      if (!v57)
                      {
                        uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                        if (!result) {
                          return result;
                        }
                        uint64_t v58 = *v56;
                        uint64_t v57 = (uint64_t)v56[1];
                      }
                      int v223 = *v58;
                      uint64x2_t v221 = v58 + 1;
                      int v222 = v223;
                      uint64x2_t v224 = (unsigned __int8 *)(v57 - 1);
                      if (v57 == 1)
                      {
                        uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                        if (!result) {
                          return result;
                        }
                        uint64x2_t v221 = *v56;
                        uint64x2_t v224 = v56[1];
                      }
                      uint64_t v57 = (uint64_t)(v224 - 1);
                      int v225 = *v221;
                      uint64_t v58 = v221 + 1;
                      if (!((v222 << 8) | v225))
                      {
                        if (v224 == (unsigned __int8 *)1)
                        {
                          uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                          if (!result) {
                            return result;
                          }
                          uint64_t v58 = *v56;
                          uint64_t v57 = (uint64_t)v56[1];
                        }
                        int v228 = *v58;
                        uint64x2_t v226 = v58 + 1;
                        int v227 = v228;
                        uint64_t v229 = (unsigned __int8 *)(v57 - 1);
                        if (v57 == 1)
                        {
                          uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                          if (!result) {
                            return result;
                          }
                          uint64x2_t v226 = *v56;
                          uint64_t v229 = v56[1];
                        }
                        uint64_t v57 = (uint64_t)(v229 - 1);
                        int v230 = *v226;
                        uint64_t v58 = v226 + 1;
                        if (!((v227 << 8) | v230))
                        {
                          if (v229 == (unsigned __int8 *)1)
                          {
                            uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                            if (!result) {
                              return result;
                            }
                            uint64_t v58 = *v56;
                            uint64_t v57 = (uint64_t)v56[1];
                          }
                          --v57;
                          if (!*v58++)
                          {
                            if (!v57)
                            {
                              uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                              if (!result) {
                                return result;
                              }
                              uint64_t v58 = *v56;
                              uint64_t v57 = (uint64_t)v56[1];
                            }
                            int v234 = *v58;
                            int8x16x2_t v232 = v58 + 1;
                            int v233 = v234;
                            int8x16x2_t v235 = (unsigned __int8 *)(v57 - 1);
                            if (v57 == 1)
                            {
                              uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                              if (!result) {
                                return result;
                              }
                              int8x16x2_t v232 = *v56;
                              int8x16x2_t v235 = v56[1];
                            }
                            uint64_t v57 = (uint64_t)(v235 - 1);
                            int v236 = *v232;
                            uint64_t v58 = v232 + 1;
                            if (((v233 << 8) | v236) == 1)
                            {
                              if (v235 == (unsigned __int8 *)1)
                              {
                                uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                                if (!result) {
                                  return result;
                                }
                                uint64_t v58 = *v56;
                                uint64_t v57 = (uint64_t)v56[1];
                              }
                              int v239 = *v58;
                              int8x16x2_t v237 = v58 + 1;
                              int v238 = v239;
                              v240 = (unsigned __int8 *)(v57 - 1);
                              if (v57 == 1)
                              {
                                uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                                if (!result) {
                                  return result;
                                }
                                int8x16x2_t v237 = *v56;
                                v240 = v56[1];
                              }
                              uint64_t v57 = (uint64_t)(v240 - 1);
                              int v241 = *v237;
                              uint64_t v58 = v237 + 1;
                              if (!((v238 << 8) | v241))
                              {
                                if (v240 == (unsigned __int8 *)1)
                                {
                                  uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                                  if (!result) {
                                    return result;
                                  }
                                  uint64_t v58 = *v56;
                                  uint64_t v57 = (uint64_t)v56[1];
                                }
                                --v57;
                                if (!*v58++)
                                {
                                  if (!v57)
                                  {
                                    uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                                    if (!result) {
                                      return result;
                                    }
                                    uint64_t v58 = *v56;
                                    uint64_t v57 = (uint64_t)v56[1];
                                  }
                                  int v245 = *v58;
                                  v243 = v58 + 1;
                                  int v244 = v245;
                                  v246 = (unsigned __int8 *)(v57 - 1);
                                  if (v57 == 1)
                                  {
                                    uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                                    if (!result) {
                                      return result;
                                    }
                                    v243 = *v56;
                                    v246 = v56[1];
                                  }
                                  uint64_t v57 = (uint64_t)(v246 - 1);
                                  int v247 = *v243;
                                  uint64_t v58 = v243 + 1;
                                  if (((v244 << 8) | v247) == 1)
                                  {
                                    if (v246 == (unsigned __int8 *)1)
                                    {
                                      uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                                      if (!result) {
                                        return result;
                                      }
                                      uint64_t v58 = *v56;
                                      uint64_t v57 = (uint64_t)v56[1];
                                    }
                                    int v250 = *v58;
                                    v248 = v58 + 1;
                                    int v249 = v250;
                                    v251 = (unsigned __int8 *)(v57 - 1);
                                    if (v57 == 1)
                                    {
                                      uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
                                      if (!result) {
                                        return result;
                                      }
                                      v248 = *v56;
                                      v251 = v56[1];
                                    }
                                    uint64_t v57 = (uint64_t)(v251 - 1);
                                    int v252 = *v248;
                                    uint64_t v58 = v248 + 1;
                                    if (!((v249 << 8) | v252))
                                    {
LABEL_330:
                                      *(_DWORD *)(a1 + 364) = 1;
                                      _OWORD *v56 = v58;
                                      v56[1] = (unsigned __int8 *)v57;
                                      goto LABEL_3;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_329:
              uint64_t v253 = *(void *)a1;
              *(_DWORD *)(v253 + 40) = 28;
              (*(void (**)(uint64_t))v253)(a1);
              goto LABEL_330;
            }
          }
          else
          {
            int v206 = *v200;
            uint64_t v205 = v200 + 1;
            int v204 = v206;
            uint64_t v207 = (uint64_t)(v203 - 1);
            if (v207) {
              goto LABEL_242;
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t))v56[3])(a1);
          if (!result) {
            return result;
          }
          int v214 = v204 << 8;
          uint64_t v57 = (uint64_t)(v56[1] - 1);
          uint64_t v58 = *v56 + 1;
          if ((v214 | **v56) != 0xFF) {
            goto LABEL_329;
          }
          goto LABEL_258;
        }
LABEL_234:
        uint64_t v198 = *(void *)a1;
        *(_DWORD *)(v198 + 40) = 12;
        (*(void (**)(uint64_t))v198)(a1);
        goto LABEL_235;
      case 253:
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 584) + 40))(a1);
        if (result) {
          goto LABEL_3;
        }
        return result;
      default:
        goto LABEL_26;
    }
  }
}

uint64_t sub_1003D80B0(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 135);
  if (!v2)
  {
    uint64_t result = sub_1003D5E0C(a1);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1[73] + 28);
    if (*((_DWORD *)a1 + 135) == v3 + 208) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = (*(uint64_t (**)(uint64_t *))(a1[5] + 40))(a1);
    if (!result) {
      return result;
    }
    goto LABEL_7;
  }
  int v3 = *(_DWORD *)(a1[73] + 28);
  if (v2 != v3 + 208) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = *a1;
  *(_DWORD *)(v4 + 40) = 100;
  *(_DWORD *)(v4 + 44) = v3;
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 3);
  *((_DWORD *)a1 + 135) = 0;
LABEL_7:
  *(_DWORD *)(a1[73] + 28) = (*(_DWORD *)(a1[73] + 28) + 1) & 7;
  return 1;
}

uint64_t sub_1003D8164(void *a1)
{
  int v2 = (unsigned __int8 **)a1[5];
  int v3 = v2[1];
  if (v3)
  {
    int v5 = *v2 + 1;
    uint64_t v4 = **v2;
    uint64_t v6 = (uint64_t)(v3 - 1);
    if (v6) {
      goto LABEL_7;
    }
    goto LABEL_3;
  }
  if (!((unsigned int (*)(void *))v2[3])(a1)) {
    return 0;
  }
  int v5 = *v2 + 1;
  uint64_t v4 = **v2;
  uint64_t v6 = (uint64_t)(v2[1] - 1);
  if (v2[1] == (unsigned __int8 *)1)
  {
LABEL_3:
    if (((unsigned int (*)(void *))v2[3])(a1))
    {
      int v5 = *v2;
      uint64_t v6 = (uint64_t)v2[1];
      goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  int v7 = (unsigned __int8 *)(v6 - 1);
  unint64_t v8 = (v4 << 8) | *v5;
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a1 + 135);
  *(_DWORD *)(v9 + 40) = 93;
  *(_DWORD *)(v9 + 44) = v10;
  *(_DWORD *)(*a1 + 48) = v8 - 2;
  uint64_t v11 = 1;
  (*(void (**)(void *, uint64_t))(*a1 + 8))(a1, 1);
  _DWORD *v2 = v5 + 1;
  v2[1] = v7;
  if (v8 >= 3) {
    (*(void (**)(void *, unint64_t))(a1[5] + 32))(a1, v8 - 2);
  }
  return v11;
}

uint64_t sub_1003D8260(uint64_t *a1, uint8x8_t a2)
{
  int v3 = (unsigned __int8 **)a1[5];
  uint64_t v4 = v3[1];
  if (v4)
  {
    uint64_t v6 = *v3 + 1;
    uint64_t v5 = **v3;
    uint64_t v7 = (uint64_t)(v4 - 1);
    if (v7) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v3[3])(a1);
    if (!result) {
      return result;
    }
    uint64_t v6 = *v3 + 1;
    uint64_t v5 = **v3;
    uint64_t v7 = (uint64_t)(v3[1] - 1);
    if (v3[1] != (unsigned __int8 *)1) {
      goto LABEL_8;
    }
  }
  uint64_t result = ((uint64_t (*)(uint64_t *))v3[3])(a1);
  if (!result) {
    return result;
  }
  uint64_t v6 = *v3;
  uint64_t v7 = (uint64_t)v3[1];
LABEL_8:
  unsigned int v10 = *v6;
  uint64_t v9 = v6 + 1;
  unint64_t v11 = (v5 << 8) | v10;
  uint64_t v12 = v11 - 2;
  if (v11 <= 2) {
    unsigned int v13 = 0;
  }
  else {
    unsigned int v13 = v11 - 2;
  }
  if (v11 <= 0xF) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 14;
  }
  uint64_t v15 = (unsigned __int8 *)(v7 - 1);
  if (!v14)
  {
    int v19 = *((_DWORD *)a1 + 135);
    if (v19 != 238) {
      goto LABEL_22;
    }
LABEL_26:
    if (v14 >= 0xC
      && (a2.i32[0] = v26, vmovn_s16((int16x8_t)vmovl_u8(a2)).u32[0] == 1651467329)
      && v27 == 101)
    {
      unsigned int v20 = __rev16(v28);
      unsigned int v21 = __rev16(v30);
      int v22 = v31;
      uint64_t v23 = *a1;
      *(_DWORD *)(v23 + 48) = __rev16(v29);
      *(_DWORD *)(v23 + 52) = v21;
      *(_DWORD *)(v23 + 56) = v22;
      *(_DWORD *)(v23 + 40) = 78;
      *(_DWORD *)(v23 + 44) = v20;
      (*(void (**)(uint64_t *, uint64_t))(v23 + 8))(a1, 1);
      *((unsigned char *)a1 + 360) = 1;
      *((unsigned char *)a1 + 361) = v22;
      *int v3 = v9;
      v3[1] = v15;
      if (v12 < 1) {
        return 1;
      }
    }
    else
    {
      uint64_t v25 = *a1;
      *(_DWORD *)(v25 + 40) = 80;
      *(_DWORD *)(v25 + 44) = v14 + v12;
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
      *int v3 = v9;
      v3[1] = v15;
      if (v12 < 1) {
        return 1;
      }
    }
    goto LABEL_32;
  }
  int v16 = &v26;
  uint64_t v17 = v14;
  do
  {
    if (!v15)
    {
      uint64_t result = ((uint64_t (*)(uint64_t *))v3[3])(a1);
      if (!result) {
        return result;
      }
      uint64_t v9 = *v3;
      uint64_t v15 = v3[1];
    }
    char v18 = *v9++;
    *(unsigned char *)int v16 = v18;
    int v16 = (__int32 *)((char *)v16 + 1);
    --v15;
    --v17;
  }
  while (v17);
  v12 -= v14;
  int v19 = *((_DWORD *)a1 + 135);
  if (v19 == 238) {
    goto LABEL_26;
  }
LABEL_22:
  if (v19 == 224)
  {
    sub_1003D89F4(a1, (uint64_t)&v26, v14, v12);
    *int v3 = v9;
    v3[1] = v15;
    if (v12 < 1) {
      return 1;
    }
    goto LABEL_32;
  }
  uint64_t v24 = *a1;
  *(_DWORD *)(v24 + 40) = 70;
  *(_DWORD *)(v24 + 44) = v19;
  (*(void (**)(uint64_t *))*a1)(a1);
  *int v3 = v9;
  v3[1] = v15;
  if (v12 >= 1) {
LABEL_32:
  }
    (*(void (**)(uint64_t *, uint64_t))(a1[5] + 32))(a1, v12);
  return 1;
}

uint64_t sub_1003D84DC(uint64_t *a1, char a2, char a3, char a4)
{
  uint64_t v5 = (unsigned __int8 **)a1[5];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *((unsigned char *)a1 + 296) = a2;
  *((unsigned char *)a1 + 297) = a3;
  *((unsigned char *)a1 + 298) = a4;
  if (v6)
  {
    unsigned int v10 = *v7;
    unint64_t v8 = v7 + 1;
    uint64_t v9 = v10;
    uint64_t v11 = (uint64_t)(v6 - 1);
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    unint64_t v8 = *v5 + 1;
    uint64_t v9 = **v5;
    uint64_t v11 = (uint64_t)(v5[1] - 1);
    if (v5[1] != (unsigned __int8 *)1)
    {
LABEL_3:
      unsigned int v14 = *v8;
      uint64_t v12 = v8 + 1;
      uint64_t v13 = v14;
      uint64_t v15 = v11 - 1;
      if (v15) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!result) {
    return result;
  }
  uint64_t v12 = *v5 + 1;
  uint64_t v13 = **v5;
  uint64_t v15 = (uint64_t)(v5[1] - 1);
  if (v5[1] != (unsigned __int8 *)1)
  {
LABEL_4:
    int v17 = *v12;
    int v16 = v12 + 1;
    *((_DWORD *)a1 + 70) = v17;
    uint64_t v18 = v15 - 1;
    if (v18) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_14:
  uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!result) {
    return result;
  }
  uint64_t v34 = v5[1];
  int v16 = *v5 + 1;
  *((_DWORD *)a1 + 70) = **v5;
  uint64_t v18 = (uint64_t)(v34 - 1);
  if (v18)
  {
LABEL_5:
    int v20 = *v16;
    int v19 = v16 + 1;
    int v21 = v20 << 8;
    *((_DWORD *)a1 + 13) = v20 << 8;
    int v22 = (unsigned __int8 *)(v18 - 1);
    if (v22) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_16:
  uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!result) {
    return result;
  }
  uint64_t v35 = v5[1];
  int v19 = *v5 + 1;
  int v21 = **v5 << 8;
  *((_DWORD *)a1 + 13) = v21;
  int v22 = v35 - 1;
  if (v22)
  {
LABEL_6:
    int v24 = *v19;
    uint64_t v23 = v19 + 1;
    *((_DWORD *)a1 + 13) = v21 + v24;
    uint64_t v25 = v22 - 1;
    if (v25) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_18:
  uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!result) {
    return result;
  }
  uint64_t v36 = v5[1];
  uint64_t v23 = *v5 + 1;
  *((_DWORD *)a1 + 13) += **v5;
  uint64_t v25 = v36 - 1;
  if (v25)
  {
LABEL_7:
    int v27 = *v23;
    __int32 v26 = v23 + 1;
    int v28 = v27 << 8;
    *((_DWORD *)a1 + 12) = v27 << 8;
    unsigned __int16 v29 = v25 - 1;
    if (v29) {
      goto LABEL_8;
    }
LABEL_22:
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    uint64_t v38 = v5[1];
    unsigned __int16 v30 = *v5 + 1;
    *((_DWORD *)a1 + 12) += **v5;
    uint64_t v32 = v38 - 1;
    if (v38 != (unsigned __int8 *)1) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
LABEL_20:
  uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!result) {
    return result;
  }
  uint64_t v37 = v5[1];
  __int32 v26 = *v5 + 1;
  int v28 = **v5 << 8;
  *((_DWORD *)a1 + 12) = v28;
  unsigned __int16 v29 = v37 - 1;
  if (!v29) {
    goto LABEL_22;
  }
LABEL_8:
  int v31 = *v26;
  unsigned __int16 v30 = v26 + 1;
  *((_DWORD *)a1 + 12) = v28 + v31;
  uint64_t v32 = v29 - 1;
  if (v29 != (unsigned __int8 *)1) {
    goto LABEL_26;
  }
LABEL_24:
  uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
  if (!result) {
    return result;
  }
  unsigned __int16 v30 = *v5;
  uint64_t v32 = v5[1];
LABEL_26:
  uint64_t v39 = (v9 << 8) | v13;
  *((_DWORD *)a1 + 14) = *v30;
  uint64_t v40 = *a1;
  *(_DWORD *)(v40 + 44) = *((_DWORD *)a1 + 135);
  *(_DWORD *)(v40 + 48) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v40 + 52) = *((_DWORD *)a1 + 13);
  *(_DWORD *)(v40 + 56) = *((_DWORD *)a1 + 14);
  *(_DWORD *)(v40 + 40) = 102;
  (*(void (**)(uint64_t *, uint64_t))(v40 + 8))(a1, 1);
  if (*(unsigned char *)(a1[73] + 25))
  {
    uint64_t v41 = *a1;
    *(_DWORD *)(v41 + 40) = 61;
    (*(void (**)(uint64_t *))v41)(a1);
  }
  uint64_t v42 = v39 - 8;
  if (*((_DWORD *)a1 + 13) && *((_DWORD *)a1 + 12) && (int v43 = *((_DWORD *)a1 + 14), v43 > 0))
  {
    if (v42 == 3 * v43) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v46 = *a1;
    *(_DWORD *)(v46 + 40) = 33;
    (*(void (**)(uint64_t *))v46)(a1);
    int v43 = *((_DWORD *)a1 + 14);
    if (v42 == 3 * v43)
    {
LABEL_32:
      if (a1[36]) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }
  uint64_t v47 = *a1;
  *(_DWORD *)(v47 + 40) = 12;
  (*(void (**)(uint64_t *))v47)(a1);
  int v43 = *((_DWORD *)a1 + 14);
  if (a1[36])
  {
LABEL_33:
    long long v44 = v30 + 1;
    uint64_t v45 = v32 - 1;
    if (v43 < 1) {
      goto LABEL_74;
    }
    goto LABEL_38;
  }
LABEL_37:
  a1[36] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 96 * v43);
  long long v44 = v30 + 1;
  uint64_t v45 = v32 - 1;
  if (*((int *)a1 + 14) >= 1)
  {
LABEL_38:
    unsigned int v48 = 0;
    unsigned int v49 = -2;
    do
    {
      if (v45)
      {
        int v56 = *v44;
        uint64_t v55 = v44 + 1;
        int v54 = v56;
        uint64_t v57 = (_DWORD *)a1[36];
        if (v48) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v45 = v5[1];
        uint64_t v55 = *v5 + 1;
        int v54 = **v5;
        uint64_t v57 = (_DWORD *)a1[36];
        if (v48)
        {
LABEL_48:
          uint64_t v60 = (v49 + 1) & 0x1FFFFFFFELL;
          uint64_t v61 = v48 - 2 + 1;
          unsigned int v62 = v48;
          unint64_t v63 = v57;
          while (*v63 != v54)
          {
            v63 += 24;
            if (!--v62)
            {
              uint64_t v57 = v63;
              *unint64_t v63 = v54;
              v63[1] = v48;
              uint64_t v58 = v45 - 1;
              if (v58) {
                goto LABEL_44;
              }
              goto LABEL_70;
            }
          }
          uint64_t v64 = v57 + 24;
          int v65 = *v57;
          if (v48 < 2) {
            goto LABEL_69;
          }
          if (v48 == 2)
          {
            int v66 = 1;
          }
          else
          {
            v64 += 24 * (v61 & 0x1FFFFFFFELL);
            int v66 = (v48 - 1) | 1;
            long long v67 = v57 + 48;
            int v68 = *v57;
            do
            {
              int v69 = *(v67 - 24);
              int v71 = *v67;
              v67 += 48;
              int v70 = v71;
              if (v69 > v65) {
                int v65 = v69;
              }
              if (v70 > v68) {
                int v68 = v70;
              }
              v60 -= 2;
            }
            while (v60);
            if (v65 <= v68) {
              int v65 = v68;
            }
            if (v61 == (v61 & 0x1FFFFFFFELL))
            {
LABEL_69:
              uint64_t v57 = v64;
              *uint64_t v64 = v65 + 1;
              v64[1] = v48;
              uint64_t v58 = v45 - 1;
              if (v58) {
                goto LABEL_44;
              }
LABEL_70:
              uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
              if (!result) {
                return result;
              }
              long long v74 = v5[1];
              uint64_t v50 = *v5 + 1;
              unsigned int v75 = **v5;
              v57[2] = v75 >> 4;
              v57[3] = v75 & 0xF;
              uint64_t v51 = v74 - 1;
              if (v74 != (unsigned __int8 *)1) {
                goto LABEL_40;
              }
              goto LABEL_72;
            }
          }
          do
          {
            int v73 = *v64;
            v64 += 24;
            int v72 = v73;
            if (v73 > v65) {
              int v65 = v72;
            }
            ++v66;
          }
          while (v48 != v66);
          goto LABEL_69;
        }
      }
      _DWORD *v57 = v54;
      v57[1] = v48;
      uint64_t v58 = v45 - 1;
      if (!v58) {
        goto LABEL_70;
      }
LABEL_44:
      unsigned int v59 = *v55;
      uint64_t v50 = v55 + 1;
      v57[2] = v59 >> 4;
      v57[3] = v59 & 0xF;
      uint64_t v51 = v58 - 1;
      if (v58 != (unsigned __int8 *)1) {
        goto LABEL_40;
      }
LABEL_72:
      uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
      if (!result) {
        return result;
      }
      uint64_t v50 = *v5;
      uint64_t v51 = v5[1];
LABEL_40:
      int v52 = *v50;
      long long v44 = v50 + 1;
      v57[4] = v52;
      uint64_t v53 = *a1;
      *(_DWORD *)(v53 + 44) = *v57;
      *(_DWORD *)(v53 + 48) = v57[2];
      *(_DWORD *)(v53 + 52) = v57[3];
      *(_DWORD *)(v53 + 56) = v57[4];
      *(_DWORD *)(v53 + 40) = 103;
      (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(a1, 1);
      ++v48;
      uint64_t v45 = v51 - 1;
      ++v49;
    }
    while ((signed int)v48 < *((_DWORD *)a1 + 14));
  }
LABEL_74:
  uint64_t result = 1;
  *(unsigned char *)(a1[73] + 25) = 1;
  *uint64_t v5 = v44;
  v5[1] = v45;
  return result;
}

uint64_t sub_1003D89F4(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = a4 + a3;
  if (a3 < 0xE)
  {
    if (a3 < 6 || *(unsigned char *)a2 != 74) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)a2 != 74) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(a2 + 1) != 70 || *(unsigned char *)(a2 + 2) != 73 || *(unsigned char *)(a2 + 3) != 70 || *(unsigned char *)(a2 + 4))
  {
LABEL_15:
    if (*(unsigned char *)(a2 + 1) == 70 && *(unsigned char *)(a2 + 2) == 88 && *(unsigned char *)(a2 + 3) == 88 && !*(unsigned char *)(a2 + 4))
    {
      int v21 = *(unsigned __int8 *)(a2 + 5);
      switch(v21)
      {
        case 19:
          uint64_t v18 = *a1;
          int v19 = 112;
          break;
        case 17:
          uint64_t v18 = *a1;
          int v19 = 111;
          break;
        case 16:
          uint64_t v18 = *a1;
          int v19 = 110;
          break;
        default:
          uint64_t v23 = *a1;
          *(_DWORD *)(v23 + 40) = 91;
          *(_DWORD *)(v23 + 44) = *(unsigned __int8 *)(a2 + 5);
          *(_DWORD *)(*a1 + 48) = v6;
          goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v18 = *a1;
    int v19 = 79;
LABEL_20:
    *(_DWORD *)(v18 + 40) = v19;
    *(_DWORD *)(v18 + 44) = v6;
LABEL_21:
    int v20 = *(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8);
    return v20(a1, 1);
  }
  *((unsigned char *)a1 + 352) = 1;
  int v7 = *(unsigned __int8 *)(a2 + 5);
  *((unsigned char *)a1 + 353) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 6);
  *((unsigned char *)a1 + 354) = v8;
  int v9 = *(unsigned __int8 *)(a2 + 7);
  *((unsigned char *)a1 + 355) = v9;
  unsigned int v10 = bswap32(*(unsigned __int16 *)(a2 + 8)) >> 16;
  *((_WORD *)a1 + 178) = v10;
  unsigned int v11 = bswap32(*(unsigned __int16 *)(a2 + 10)) >> 16;
  *((_WORD *)a1 + 179) = v11;
  if ((v7 - 1) >= 2)
  {
    uint64_t v12 = *a1;
    *(_DWORD *)(v12 + 40) = 122;
    *(_DWORD *)(v12 + 44) = v7;
    *(_DWORD *)(*a1 + 48) = *((unsigned __int8 *)a1 + 354);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
    int v7 = *((unsigned __int8 *)a1 + 353);
    int v8 = *((unsigned __int8 *)a1 + 354);
    unsigned int v10 = *((unsigned __int16 *)a1 + 178);
    unsigned int v11 = *((unsigned __int16 *)a1 + 179);
    int v9 = *((unsigned __int8 *)a1 + 355);
  }
  uint64_t v13 = *a1;
  *(_DWORD *)(v13 + 48) = v8;
  *(_DWORD *)(v13 + 52) = v10;
  *(_DWORD *)(v13 + 56) = v11;
  *(_DWORD *)(v13 + 60) = v9;
  *(_DWORD *)(v13 + 40) = 89;
  *(_DWORD *)(v13 + 44) = v7;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(a1, 1);
  unsigned int v15 = *(unsigned __int8 *)(a2 + 12);
  unsigned int v16 = *(unsigned __int8 *)(a2 + 13);
  if (v16 | v15)
  {
    uint64_t v17 = *a1;
    *(_DWORD *)(v17 + 40) = 92;
    *(_DWORD *)(v17 + 44) = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)(*a1 + 48) = *(unsigned __int8 *)(a2 + 13);
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
    unsigned int v15 = *(unsigned __int8 *)(a2 + 12);
    unsigned int v16 = *(unsigned __int8 *)(a2 + 13);
  }
  if (v6 - 14 != 3 * v15 * (unint64_t)v16)
  {
    uint64_t v22 = *a1;
    *(_DWORD *)(v22 + 40) = 90;
    *(_DWORD *)(v22 + 44) = v6 - 14;
    goto LABEL_21;
  }
  return result;
}

BOOL sub_1003D8C64(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2 != 202)
  {
    int v3 = *(void (***)(void))a1;
    *((_DWORD *)v3 + 10) = 21;
    *((_DWORD *)v3 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  sub_1003D42C0(a1);
  uint64_t v4 = *(unsigned int *)(a1 + 56);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 288);
    int v6 = *(_DWORD *)(a1 + 392);
    if (*(unsigned char *)(a1 + 96)) {
      int v7 = 8;
    }
    else {
      int v7 = 4;
    }
    int v8 = *(_DWORD *)(a1 + 396);
    if (v6 <= v7)
    {
      int v13 = *(_DWORD *)(a1 + 384);
      if (v8 <= v7)
      {
        int v27 = 0;
        int v28 = *(_DWORD *)(a1 + 388);
        unsigned __int16 v29 = *(_DWORD **)(a1 + 288);
        do
        {
          int v30 = v29[2];
          int v31 = v6;
          if (!(v13 % (2 * v30)))
          {
            int v32 = 2;
            do
            {
              int v31 = v6 * v32;
              if (v6 * v32 > v7) {
                break;
              }
              v32 *= 2;
            }
            while (!(v13 % (v32 * v30)));
          }
          v29[9] = v31;
          int v33 = v29[3];
          int v34 = v8;
          if (!(v28 % (2 * v33)))
          {
            int v35 = 2;
            do
            {
              int v34 = v8 * v35;
              if (v8 * v35 > v7) {
                break;
              }
              v35 *= 2;
            }
            while (!(v28 % (v35 * v33)));
          }
          v29[10] = v34;
          if (v31 > 2 * v34)
          {
            v29[9] = 2 * v34;
          }
          else
          {
            int v36 = 2 * v31;
            if (v34 > v36) {
              v29[10] = v36;
            }
          }
          ++v27;
          v29 += 24;
        }
        while (v27 != v4);
      }
      else
      {
        int v14 = 0;
        int v15 = 2 * v8;
        unsigned int v16 = *(_DWORD **)(a1 + 288);
        do
        {
          int v17 = v16[2];
          int v18 = v6;
          if (!(v13 % (2 * v17)))
          {
            int v19 = 2;
            do
            {
              int v18 = v6 * v19;
              if (v6 * v19 > v7) {
                break;
              }
              v19 *= 2;
            }
            while (!(v13 % (v19 * v17)));
          }
          v16[9] = v18;
          v16[10] = v8;
          if (v18 > v15)
          {
            v16[9] = v15;
          }
          else
          {
            int v20 = 2 * v18;
            if (v8 > v20) {
              v16[10] = v20;
            }
          }
          ++v14;
          v16 += 24;
        }
        while (v14 != v4);
      }
      goto LABEL_69;
    }
    int v9 = 2 * v6;
    if (v8 <= v7)
    {
      int v21 = 0;
      int v22 = *(_DWORD *)(a1 + 388);
      uint64_t v23 = *(_DWORD **)(a1 + 288);
      do
      {
        v23[9] = v6;
        int v24 = v23[3];
        int v25 = v8;
        if (!(v22 % (2 * v24)))
        {
          int v26 = 2;
          do
          {
            int v25 = v8 * v26;
            if (v8 * v26 > v7) {
              break;
            }
            v26 *= 2;
          }
          while (!(v22 % (v26 * v24)));
        }
        v23[10] = v25;
        if (v6 > 2 * v25)
        {
          v23[9] = 2 * v25;
        }
        else if (v25 > v9)
        {
          v23[10] = v9;
        }
        ++v21;
        v23 += 24;
      }
      while (v21 != v4);
      goto LABEL_69;
    }
    int v10 = 2 * v8;
    if (v6 <= 2 * v8)
    {
      if (v8 <= v9)
      {
        if (v4 >= 2)
        {
          uint64_t v43 = v4 & 0xFFFFFFFE;
          uint64_t v44 = v5 + 96 * v43;
          unsigned int v49 = (int *)(v5 + 136);
          uint64_t v50 = v43;
          do
          {
            *(v49 - 1) = v6;
            *unsigned int v49 = v8;
            *(v49 - 25) = v6;
            *(v49 - 24) = v8;
            v49 += 48;
            v50 -= 2;
          }
          while (v50);
          if (v43 == v4) {
            goto LABEL_69;
          }
        }
        else
        {
          LODWORD(v43) = 0;
          uint64_t v44 = *(void *)(a1 + 288);
        }
        uint64_t v51 = (int *)(v44 + 40);
        int v52 = v4 - v43;
        do
        {
          *(v51 - 1) = v6;
          *uint64_t v51 = v8;
          v51 += 24;
          --v52;
        }
        while (v52);
      }
      else
      {
        if (v4 >= 2)
        {
          uint64_t v37 = v4 & 0xFFFFFFFE;
          uint64_t v38 = v5 + 96 * v37;
          uint64_t v45 = (int *)(v5 + 136);
          uint64_t v46 = v37;
          do
          {
            *(v45 - 1) = v6;
            *uint64_t v45 = v9;
            *(v45 - 25) = v6;
            *(v45 - 24) = v9;
            v45 += 48;
            v46 -= 2;
          }
          while (v46);
          if (v37 == v4) {
            goto LABEL_69;
          }
        }
        else
        {
          LODWORD(v37) = 0;
          uint64_t v38 = *(void *)(a1 + 288);
        }
        uint64_t v47 = (int *)(v38 + 40);
        int v48 = v4 - v37;
        do
        {
          *(v47 - 1) = v6;
          int *v47 = v9;
          v47 += 24;
          --v48;
        }
        while (v48);
      }
    }
    else
    {
      if (v4 >= 2)
      {
        uint64_t v11 = v4 & 0xFFFFFFFE;
        uint64_t v12 = v5 + 96 * v11;
        uint64_t v39 = (int *)(v5 + 136);
        uint64_t v40 = v11;
        do
        {
          *(v39 - 1) = v10;
          int *v39 = v8;
          *(v39 - 25) = v10;
          *(v39 - 24) = v8;
          v39 += 48;
          v40 -= 2;
        }
        while (v40);
        if (v11 == v4) {
          goto LABEL_69;
        }
      }
      else
      {
        LODWORD(v11) = 0;
        uint64_t v12 = *(void *)(a1 + 288);
      }
      uint64_t v41 = (int *)(v12 + 40);
      int v42 = v4 - v11;
      do
      {
        *(v41 - 1) = v10;
        *uint64_t v41 = v8;
        v41 += 24;
        --v42;
      }
      while (v42);
    }
LABEL_69:
    int v53 = 0;
    int v54 = (_DWORD *)(v5 + 48);
    do
    {
      *(v54 - 1) = sub_1003EE7F0((int)*(v54 - 3) * (uint64_t)(int)*(v54 - 10) * *(unsigned int *)(a1 + 48), *(int *)(a1 + 524) * (uint64_t)*(int *)(a1 + 384));
      _DWORD *v54 = sub_1003EE7F0((int)*(v54 - 2) * (uint64_t)(int)*(v54 - 9) * *(unsigned int *)(a1 + 52), *(int *)(a1 + 524) * (uint64_t)*(int *)(a1 + 388));
      v54 += 24;
      ++v53;
      LODWORD(v4) = *(_DWORD *)(a1 + 56);
    }
    while (v53 < (int)v4);
  }
  int v55 = *(_DWORD *)(a1 + 64) - 1;
  if (v55 <= 6) {
    LODWORD(v4) = dword_10040D720[v55];
  }
  if (*(unsigned char *)(a1 + 98)) {
    int v56 = 1;
  }
  else {
    int v56 = v4;
  }
  *(_DWORD *)(a1 + 124) = v4;
  *(_DWORD *)(a1 + 128) = v56;
  BOOL result = sub_1003D90C0(a1);
  if (result) {
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 388);
  }
  else {
    *(_DWORD *)(a1 + 132) = 1;
  }
  return result;
}

BOOL sub_1003D90C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 368)
    && (*(_DWORD *)(a1 + 60) | 4) == 7
    && *(_DWORD *)(a1 + 56) == 3
    && *(_DWORD *)(a1 + 64) == 2
    && *(_DWORD *)(a1 + 124) == 3
    && !*(_DWORD *)(a1 + 364)
    && (int v2 = *(_DWORD **)(a1 + 288), v2[2] == 2)
    && v2[26] == 1
    && v2[50] == 1
    && (int)v2[3] <= 2
    && v2[27] == 1
    && v2[51] == 1
    && (int v3 = v2[9], v3 == *(_DWORD *)(a1 + 392))
    && v2[33] == v3
    && v2[57] == v3
    && (int v4 = v2[10], v4 == *(_DWORD *)(a1 + 396))
    && v2[34] == v4)
  {
    return v2[58] == v4;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1003D91AC(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 544) = v2;
  *(void *)uint64_t v2 = sub_1003D9650;
  *(void *)(v2 + 8) = sub_1003D9824;
  *(unsigned char *)(v2 + 16) = 0;
  int v3 = *(_DWORD *)(a1 + 280);
  if (v3 != 8)
  {
    int v4 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v4 + 10) = 16;
    *((_DWORD *)v4 + 11) = v3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  sub_1003D8C64(a1);
  uint64_t v5 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1280);
  *uint64_t v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  v5[28] = 0u;
  v5[29] = 0u;
  v5[30] = 0u;
  v5[31] = 0u;
  *(void *)(a1 + 408) = v5 + 32;
  v5[32] = xmmword_10040BED0;
  v5[33] = xmmword_10040BEE0;
  v5[39] = xmmword_10040BF40;
  v5[40] = xmmword_10040BF50;
  v5[41] = xmmword_10040BF60;
  v5[42] = xmmword_10040BF70;
  v5[43] = xmmword_10040BF80;
  v5[44] = xmmword_10040BF90;
  v5[45] = xmmword_10040BFA0;
  v5[46] = xmmword_10040BFB0;
  v5[47] = xmmword_10040BFC0;
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  v5[48] = v6;
  v5[49] = v6;
  v5[50] = v6;
  v5[51] = v6;
  v5[52] = v6;
  v5[53] = v6;
  v5[54] = v6;
  v5[55] = v6;
  v5[56] = v6;
  v5[57] = v6;
  v5[58] = v6;
  v5[59] = v6;
  v5[60] = v6;
  v5[61] = v6;
  v5[62] = v6;
  v5[63] = v6;
  v5[64] = v6;
  v5[65] = v6;
  v5[66] = v6;
  v5[67] = v6;
  v5[68] = v6;
  v5[69] = v6;
  v5[70] = v6;
  v5[71] = v6;
  v5[72] = v6;
  v5[73] = v6;
  v5[74] = v6;
  v5[75] = v6;
  v5[76] = v6;
  v5[77] = v6;
  v5[78] = v6;
  v5[79] = v6;
  if (!*(_DWORD *)(a1 + 120) || (unsigned int v7 = *(_DWORD *)(a1 + 116)) == 0 || (v8 = *(_DWORD *)(a1 + 124), v8 <= 0))
  {
    int v9 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v9 + 10) = 33;
    (*v9)(a1);
    unsigned int v7 = *(_DWORD *)(a1 + 116);
    int v8 = *(_DWORD *)(a1 + 124);
  }
  if (((unint64_t)v7 * v8) >> 32)
  {
    int v10 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v10 + 10) = 72;
    (*v10)(a1);
  }
  *(_DWORD *)(v2 + 24) = 0;
  BOOL v11 = sub_1003D90C0(a1);
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 28) = v11;
  *(void *)(v2 + 40) = 0;
  if (*(unsigned char *)(a1 + 98))
  {
    if (!*(unsigned char *)(a1 + 88))
    {
      *(_WORD *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 114) = 0;
    }
    if (*(unsigned char *)(a1 + 89))
    {
      uint64_t v12 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v12 + 10) = 48;
      (*v12)(a1);
    }
    if (*(_DWORD *)(a1 + 124) == 3)
    {
      if (*(void *)(a1 + 144))
      {
        *(unsigned char *)(a1 + 113) = 1;
      }
      else if (*(unsigned char *)(a1 + 104))
      {
        *(unsigned char *)(a1 + 114) = 1;
      }
      else
      {
        *(unsigned char *)(a1 + 112) = 1;
      }
    }
    else
    {
      *(_WORD *)(a1 + 112) = 1;
      *(unsigned char *)(a1 + 114) = 0;
      *(void *)(a1 + 144) = 0;
    }
    if (*(unsigned char *)(a1 + 112))
    {
      sub_1003EB270(a1);
      *(void *)(v2 + 32) = *(void *)(a1 + 624);
    }
    if (*(unsigned char *)(a1 + 114) || *(unsigned char *)(a1 + 113))
    {
      sub_1003EC5DC(a1);
      *(void *)(v2 + 40) = *(void *)(a1 + 624);
    }
  }
  else
  {
    *(_WORD *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 114) = 0;
  }
  if (*(unsigned char *)(a1 + 89))
  {
    sub_1003CFEE8(a1);
    if (*(unsigned char *)(a1 + 298)) {
      goto LABEL_26;
    }
  }
  else
  {
    if (*(unsigned char *)(v2 + 28))
    {
      sub_1003D9864(a1);
    }
    else
    {
      sub_1003CE8D4((uint64_t *)a1);
      sub_1003DA444((uint64_t *)a1);
    }
    sub_1003D9F48(a1, *(unsigned __int8 *)(a1 + 114));
    sub_1003CFEE8(a1);
    if (*(unsigned char *)(a1 + 298))
    {
LABEL_26:
      sub_1003CB9F4(a1);
      if (*(unsigned char *)(*(void *)(a1 + 576) + 32)) {
        goto LABEL_27;
      }
LABEL_45:
      sub_1003CD6D4(a1, *(unsigned char *)(a1 + 88) != 0);
      if (*(unsigned char *)(a1 + 89)) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  sub_1003D0F7C(a1);
  if (!*(unsigned char *)(*(void *)(a1 + 576) + 32)) {
    goto LABEL_45;
  }
LABEL_27:
  sub_1003CD6D4(a1, 1);
  if (!*(unsigned char *)(a1 + 89)) {
LABEL_28:
  }
    sub_1003D52B0((uint64_t *)a1, 0);
LABEL_29:
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 48))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 576) + 16))(a1);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14 && !*(unsigned char *)(a1 + 88) && *(unsigned char *)(*(void *)(a1 + 576) + 32))
  {
    if (*(unsigned char *)(a1 + 297)) {
      int v15 = 3 * *(_DWORD *)(a1 + 56) + 2;
    }
    else {
      int v15 = *(_DWORD *)(a1 + 56);
    }
    uint64_t v16 = *(unsigned int *)(a1 + 400);
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = v15 * v16;
    if (*(unsigned char *)(a1 + 114)) {
      int v17 = 3;
    }
    else {
      int v17 = 2;
    }
    *(_DWORD *)(v14 + 24) = 0;
    *(_DWORD *)(v14 + 28) = v17;
    ++*(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_1003D9650(uint64_t *a1)
{
  uint64_t v2 = a1[68];
  if (*(unsigned char *)(v2 + 16))
  {
    *(unsigned char *)(v2 + 16) = 0;
    (*(void (**)(uint64_t *, void))a1[78])(a1, 0);
    uint64_t v3 = 2;
    (*(void (**)(uint64_t *, uint64_t))a1[71])(a1, 2);
LABEL_3:
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))a1[69])(a1, v3);
    goto LABEL_7;
  }
  if (*((unsigned char *)a1 + 98) && !a1[18])
  {
    if (*((unsigned char *)a1 + 104) && *((unsigned char *)a1 + 114))
    {
      a1[78] = *(void *)(v2 + 40);
      *(unsigned char *)(v2 + 16) = 1;
    }
    else if (*((unsigned char *)a1 + 112))
    {
      a1[78] = *(void *)(v2 + 32);
    }
    else
    {
      uint64_t v11 = *a1;
      *(_DWORD *)(v11 + 40) = 47;
      (*(void (**)(uint64_t *))v11)(a1);
    }
  }
  (*(void (**)(uint64_t *))a1[75])(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(a1[70] + 16))(a1);
  if (!*((unsigned char *)a1 + 89))
  {
    if (!*(unsigned char *)(v2 + 28)) {
      (*(void (**)(uint64_t *))a1[77])(a1);
    }
    (*(void (**)(uint64_t *))a1[76])(a1);
    if (*((unsigned char *)a1 + 98)) {
      (*(void (**)(uint64_t *, void))a1[78])(a1, *(unsigned __int8 *)(v2 + 16));
    }
    if (*(unsigned char *)(v2 + 16)) {
      uint64_t v10 = 3;
    }
    else {
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t *, uint64_t))a1[71])(a1, v10);
    uint64_t v3 = 0;
    goto LABEL_3;
  }
LABEL_7:
  uint64_t v5 = a1[2];
  if (v5)
  {
    int v6 = *(_DWORD *)(v2 + 24);
    int v7 = *(unsigned char *)(v2 + 16) ? 2 : 1;
    int v8 = v7 + v6;
    *(_DWORD *)(v5 + 24) = v6;
    *(_DWORD *)(v5 + 28) = v8;
    if (*((unsigned char *)a1 + 88))
    {
      if (!*(unsigned char *)(a1[72] + 33))
      {
        if (*((unsigned char *)a1 + 114)) {
          int v9 = 2;
        }
        else {
          int v9 = 1;
        }
        *(_DWORD *)(v5 + 28) = v9 + v8;
      }
    }
  }
  return result;
}

uint64_t sub_1003D9824(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 544);
  if (*(unsigned char *)(result + 98)) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 624) + 16))();
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t sub_1003D9864(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v3 = (void *)v2;
  *(void *)(a1 + 608) = v2;
  *(void *)uint64_t v2 = sub_1003D9AB8;
  *(unsigned char *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(a1 + 124) * *(_DWORD *)(a1 + 116);
  if (*(_DWORD *)(a1 + 388) == 2)
  {
    *(void *)(v2 + 8) = sub_1003D9ACC;
    *(void *)(v2 + 24) = sub_1003D9C00;
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1);
  }
  else
  {
    uint64_t v4 = 0;
    v3[1] = sub_1003D9DD4;
    v3[3] = sub_1003D9E28;
  }
  v3[8] = v4;
  int v5 = *(_DWORD *)(a1 + 60);
  int v6 = *(void **)(a1 + 608);
  v6[4] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v6[5] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v6[6] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  v6[7] = result;
  uint64_t v8 = v6[4];
  uint64_t v9 = v6[5];
  uint64_t v10 = v6[6];
  if (v5 == 7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = -29696512;
    unint64_t v13 = -23488896;
    uint64_t v14 = 5806464;
    uint64_t v15 = 11981184;
    do
    {
      uint64_t v16 = 4 * v11;
      uint64_t v17 = 8 * v11;
      *(void *)(v10 + v17) = v15;
      *(void *)(result + v17) = v14;
      ++v11;
      v14 -= 45107;
      v15 -= 93603;
      unint64_t v18 = v13 >> 16;
      unint64_t v19 = v12 >> 16;
      v12 += 232260;
      v13 += 183763;
      *(_DWORD *)(v8 + v16) = v18;
      *(_DWORD *)(v9 + v16) = v19;
    }
    while (v11 != 256);
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v21 = -14831872;
    unint64_t v22 = -11728000;
    uint64_t v23 = 2919552;
    uint64_t v24 = 5990656;
    do
    {
      uint64_t v25 = 4 * v20;
      uint64_t v26 = 8 * v20;
      *(void *)(v10 + v26) = v24;
      *(void *)(result + v26) = v23;
      ++v20;
      v23 -= 22553;
      v24 -= 46802;
      unint64_t v27 = v22 >> 16;
      unint64_t v28 = v21 >> 16;
      v21 += 116130;
      v22 += 91881;
      *(_DWORD *)(v8 + v25) = v27;
      *(_DWORD *)(v9 + v25) = v28;
    }
    while (v20 != 256);
  }
  return result;
}

uint64_t sub_1003D9AB8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 608);
  *(unsigned char *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(result + 120);
  return result;
}

char *sub_1003D9ACC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v9 = *(void *)(a1 + 608);
  if (*(unsigned char *)(v9 + 72))
  {
    uint64_t result = sub_1003EE814((char *)(v9 + 64), 0, a5 + 8 * *a6, 0, 1, *(unsigned int *)(v9 + 76));
    *(unsigned char *)(v9 + 72) = 0;
    ++*a6;
    --*(_DWORD *)(v9 + 80);
LABEL_3:
    ++*a3;
    return result;
  }
  unsigned int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = *a6;
  if (v11 >= a7 - (int)v12) {
    unsigned int v11 = a7 - v12;
  }
  if (v11 >= 2) {
    unsigned int v13 = 2;
  }
  else {
    unsigned int v13 = v11;
  }
  uint64_t v16 = *(void *)(a5 + 8 * v12);
  if (v13 < 2)
  {
    uint64_t v14 = *(void *)(v9 + 64);
    *(unsigned char *)(v9 + 72) = 1;
  }
  else
  {
    uint64_t v14 = *(void *)(a5 + 8 * (v12 + 1));
  }
  uint64_t v17 = v14;
  uint64_t result = (char *)(*(uint64_t (**)(void))(v9 + 24))();
  int v15 = *(unsigned __int8 *)(v9 + 72);
  *a6 += v13;
  *(_DWORD *)(v9 + 80) -= v13;
  if (!v15) {
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_1003D9C00(uint64_t result, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(result + 608);
  uint64_t v5 = *(void *)(result + 408);
  uint64_t v7 = v4[4];
  uint64_t v6 = v4[5];
  uint64_t v8 = v4[6];
  uint64_t v9 = v4[7];
  uint64_t v10 = *(unsigned __int8 **)(*a2 + 16 * a3);
  unsigned int v11 = *(unsigned __int8 **)(*a2 + 8 * ((2 * a3) | 1));
  uint64_t v12 = 8 * a3;
  unsigned int v13 = *(unsigned __int8 **)(a2[1] + v12);
  uint64_t v14 = *(unsigned __int8 **)(a2[2] + v12);
  uint64_t v16 = *(unsigned char **)a4;
  int v15 = *(unsigned char **)(a4 + 8);
  unint64_t v17 = *(unsigned int *)(result + 116);
  if (v17 < 2)
  {
    if ((v17 & 1) == 0) {
      return result;
    }
LABEL_7:
    uint64_t v32 = *v14;
    uint64_t v33 = *(int *)(v7 + 4 * v32);
    uint64_t v34 = *v13;
    uint64_t v35 = *(void *)(v8 + 8 * v32) + *(void *)(v9 + 8 * v34);
    uint64_t v36 = *(int *)(v6 + 4 * v34);
    uint64_t v37 = *v10;
    *uint64_t v16 = *(unsigned char *)(v5 + v33 + v37);
    uint64_t v38 = (int)(v35 >> 16);
    v16[1] = *(unsigned char *)(v5 + v37 + v38);
    v16[2] = *(unsigned char *)(v5 + v36 + v37);
    uint64_t v39 = *v11;
    *int v15 = *(unsigned char *)(v5 + v33 + v39);
    v15[1] = *(unsigned char *)(v5 + v39 + v38);
    v15[2] = *(unsigned char *)(v5 + v36 + v39);
    return result;
  }
  uint64_t v18 = 0;
  unint64_t v19 = v17 >> 1;
  do
  {
    uint64_t v20 = v13[v18];
    uint64_t v21 = v14[v18];
    uint64_t v22 = *(int *)(v7 + 4 * v21);
    uint64_t v23 = *(void *)(v8 + 8 * v21) + *(void *)(v9 + 8 * v20);
    uint64_t v24 = *v10;
    uint64_t v25 = *(int *)(v6 + 4 * v20);
    *uint64_t v16 = *(unsigned char *)(v5 + v22 + v24);
    uint64_t v26 = (int)(v23 >> 16);
    v16[1] = *(unsigned char *)(v5 + v24 + v26);
    v16[2] = *(unsigned char *)(v5 + v25 + v24);
    uint64_t v27 = v10[1];
    v16[3] = *(unsigned char *)(v5 + v22 + v27);
    v16[4] = *(unsigned char *)(v5 + v27 + v26);
    v16[5] = *(unsigned char *)(v5 + v25 + v27);
    uint64_t v28 = *v11;
    *int v15 = *(unsigned char *)(v5 + v22 + v28);
    v15[1] = *(unsigned char *)(v5 + v28 + v26);
    v15[2] = *(unsigned char *)(v5 + v25 + v28);
    uint64_t v29 = v11[1];
    v15[3] = *(unsigned char *)(v5 + v22 + v29);
    LOBYTE(v22) = *(unsigned char *)(v5 + v29 + v26);
    int v30 = v10 + 2;
    int v31 = v11 + 2;
    v15[4] = v22;
    v16 += 6;
    v15[5] = *(unsigned char *)(v5 + v25 + v29);
    v15 += 6;
    ++v18;
    v11 += 2;
    v10 += 2;
  }
  while (v19 != v18);
  v14 += v18;
  v13 += v18;
  uint64_t v10 = v30;
  unsigned int v11 = v31;
  if (*(_DWORD *)(result + 116)) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1003D9DD4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 608) + 24))();
  ++*a6;
  ++*a3;
  return result;
}

uint64_t sub_1003D9E28(uint64_t result, void *a2, unsigned int a3, unsigned char **a4)
{
  uint64_t v4 = *(void **)(result + 608);
  uint64_t v5 = *(void *)(result + 408);
  uint64_t v7 = v4[4];
  uint64_t v6 = v4[5];
  uint64_t v8 = v4[6];
  uint64_t v9 = v4[7];
  uint64_t v10 = 8 * a3;
  unsigned int v11 = *(unsigned __int8 **)(*a2 + v10);
  uint64_t v12 = *(unsigned __int8 **)(a2[1] + v10);
  unsigned int v13 = *(unsigned __int8 **)(a2[2] + v10);
  uint64_t v14 = *a4;
  unsigned int v15 = *(_DWORD *)(result + 116);
  if (v15 < 2)
  {
    if ((v15 & 1) == 0) {
      return result;
    }
LABEL_7:
    uint64_t v27 = *v12;
    uint64_t v28 = *v13;
    uint64_t v29 = (*(void *)(v8 + 8 * v28) + *(void *)(v9 + 8 * v27)) >> 16;
    uint64_t v30 = *(int *)(v6 + 4 * v27);
    uint64_t v31 = *v11;
    *uint64_t v14 = *(unsigned char *)(v5 + *(int *)(v7 + 4 * v28) + v31);
    v14[1] = *(unsigned char *)(v5 + v31 + (int)v29);
    v14[2] = *(unsigned char *)(v5 + v30 + v31);
    return result;
  }
  unsigned int v16 = v15 >> 1;
  do
  {
    unsigned int v18 = *v12++;
    uint64_t v17 = v18;
    unsigned int v19 = *v13++;
    uint64_t v20 = *(int *)(v7 + 4 * v19);
    uint64_t v21 = *(void *)(v8 + 8 * v19) + *(void *)(v9 + 8 * v17);
    uint64_t v22 = *(int *)(v6 + 4 * v17);
    uint64_t v23 = *v11;
    *uint64_t v14 = *(unsigned char *)(v5 + v20 + v23);
    uint64_t v24 = (int)(v21 >> 16);
    v14[1] = *(unsigned char *)(v5 + v23 + v24);
    v14[2] = *(unsigned char *)(v5 + v22 + v23);
    uint64_t v25 = v11 + 2;
    uint64_t v26 = v11[1];
    v14[3] = *(unsigned char *)(v5 + v20 + v26);
    v14[4] = *(unsigned char *)(v5 + v26 + v24);
    v14[5] = *(unsigned char *)(v5 + v22 + v26);
    v14 += 6;
    unsigned int v11 = v25;
    --v16;
  }
  while (v16);
  unsigned int v11 = v25;
  if (*(_DWORD *)(result + 116)) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1003D9F48(uint64_t a1, int a2)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 568) = result;
  *(void *)uint64_t result = sub_1003DA020;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  if (*(unsigned char *)(a1 + 98))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(unsigned int *)(a1 + 388);
    *(_DWORD *)(result + 32) = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = *(_DWORD *)(a1 + 116);
    int v9 = *(_DWORD *)(a1 + 124);
    uint64_t v10 = (v9 * v8);
    if (a2)
    {
      unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))(v7 + 32);
      uint64_t v12 = sub_1003EE800(*(unsigned int *)(a1 + 120), v6);
      uint64_t result = v11(a1, 1, 0, v10, v12, *(unsigned int *)(v5 + 32));
      *(void *)(v5 + 16) = result;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(v7 + 16))(a1, 1, (v9 * v8));
      *(void *)(v5 + 24) = result;
    }
  }
  return result;
}

uint64_t sub_1003DA020(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 568);
  if (a2 == 3)
  {
    if (!*(void *)(v2 + 16))
    {
      uint64_t v4 = *(void *)result;
      *(_DWORD *)(v4 + 40) = 3;
      uint64_t result = (*(uint64_t (**)(uint64_t))v4)(result);
    }
    *(void *)(v2 + 8) = sub_1003DA238;
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  else if (a2 == 2)
  {
    if (!*(void *)(v2 + 16))
    {
      uint64_t v5 = *(void *)result;
      *(_DWORD *)(v5 + 40) = 3;
      uint64_t result = (*(uint64_t (**)(uint64_t))v5)(result);
    }
    *(void *)(v2 + 8) = sub_1003DA35C;
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  else if (a2)
  {
    uint64_t v3 = *(void *)result;
    *(_DWORD *)(v3 + 40) = 3;
    uint64_t result = (*(uint64_t (**)(uint64_t))v3)(result);
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  else if (*(unsigned char *)(result + 98))
  {
    *(void *)(v2 + 8) = sub_1003DA1A0;
    if (!*(void *)(v2 + 24))
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 8) + 56))();
      *(void *)(v2 + 24) = result;
    }
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  else
  {
    *(void *)(v2 + 8) = *(void *)(*(void *)(result + 608) + 8);
    *(_DWORD *)(v2 + 36) = 0;
    *(_DWORD *)(v2 + 40) = 0;
  }
  return result;
}

uint64_t sub_1003DA1A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v9 = a1[71];
  (*(void (**)(void))(a1[76] + 8))();
  uint64_t result = (*(uint64_t (**)(void *, void, uint64_t, void))(a1[78] + 8))(a1, *(void *)(v9 + 24), a5 + 8 * *a6, 0);
  *a6 = *a6;
  return result;
}

uint64_t sub_1003DA238(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v11 = a1[71];
  unsigned int v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    uint64_t v13 = *(void *)(v11 + 24);
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(void *, void, void, void, uint64_t))(a1[1] + 56))(a1, *(void *)(v11 + 16), *(unsigned int *)(v11 + 36), *(unsigned int *)(v11 + 32), 1);
    *(void *)(v11 + 24) = v13;
    unsigned int v12 = *(_DWORD *)(v11 + 40);
  }
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1[76] + 8))(a1, a2, a3, a4, v13, v11 + 40, *(unsigned int *)(v11 + 32));
  unsigned int v15 = *(_DWORD *)(v11 + 40);
  uint64_t v16 = v15 - v12;
  if (v15 <= v12)
  {
    unsigned int v17 = *(_DWORD *)(v11 + 32);
    if (v15 < v17) {
      return result;
    }
LABEL_8:
    *(void *)(v11 + 36) = *(_DWORD *)(v11 + 36) + v17;
    return result;
  }
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, uint64_t))(a1[78] + 8))(a1, *(void *)(v11 + 24) + 8 * v12, 0, v16);
  *a6 += v16;
  unsigned int v17 = *(_DWORD *)(v11 + 32);
  if (*(_DWORD *)(v11 + 40) >= v17) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1003DA35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v11 = *(void *)(a1 + 568);
  unsigned int v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    uint64_t v13 = *(void *)(v11 + 24);
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)(a1 + 8) + 56))(a1, *(void *)(v11 + 16), *(unsigned int *)(v11 + 36), *(unsigned int *)(v11 + 32), 0);
    *(void *)(v11 + 24) = v13;
    unsigned int v12 = *(_DWORD *)(v11 + 40);
  }
  unsigned int v14 = *(_DWORD *)(v11 + 32) - v12;
  uint64_t v15 = *a6;
  if (v14 >= a7 - (int)v15) {
    unsigned int v14 = a7 - v15;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 120) - *(_DWORD *)(v11 + 36);
  if (v14 >= v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v14;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 624) + 8))(a1, v13 + 8 * v12, a5 + 8 * v15, v17);
  *a6 += v17;
  unsigned int v19 = *(_DWORD *)(v11 + 40) + v17;
  *(_DWORD *)(v11 + 40) = v19;
  unsigned int v20 = *(_DWORD *)(v11 + 32);
  if (v19 >= v20) {
    *(void *)(v11 + 36) = *(_DWORD *)(v11 + 36) + v20;
  }
  return result;
}

uint64_t sub_1003DA444(uint64_t *a1)
{
  uint64_t result = (*(uint64_t (**)(void))a1[1])();
  uint64_t v3 = result;
  a1[76] = result;
  *(void *)uint64_t result = sub_1003DA654;
  *(void *)(result + 8) = sub_1003DA668;
  *(unsigned char *)(result + 16) = 0;
  if (*((unsigned char *)a1 + 368))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)(v4 + 40) = 26;
    uint64_t result = (*(uint64_t (**)(uint64_t *))v4)(a1);
  }
  if (*((int *)a1 + 14) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v3 + 192;
    uint64_t v7 = (void *)(v3 + 104);
    uint64_t v8 = a1[36] + 36;
    do
    {
      while (1)
      {
        int v10 = *((_DWORD *)a1 + 98);
        int v11 = *(_DWORD *)(v8 - 28);
        int v12 = *(_DWORD *)v8;
        int v13 = *(_DWORD *)(v8 + 4) * *(_DWORD *)(v8 - 24) / *((_DWORD *)a1 + 99);
        int v14 = *((_DWORD *)a1 + 96);
        int v15 = *((_DWORD *)a1 + 97);
        *(_DWORD *)(v6 + 4 * v5) = v13;
        if (*(unsigned char *)(v8 + 16)) {
          break;
        }
        uint64_t v9 = sub_1003DA7B0;
LABEL_6:
        *v7++ = v9;
        v8 += 96;
        if (++v5 >= *((int *)a1 + 14)) {
          return result;
        }
      }
      int v16 = v12 * v11 / v10;
      if (v16 == v14 && v13 == v15)
      {
        uint64_t v9 = sub_1003DA7B8;
        goto LABEL_6;
      }
      if (2 * v16 == v14 && v13 == v15)
      {
        uint64_t v22 = sub_1003DA7C0;
      }
      else
      {
        if (2 * v16 != v14 || 2 * v13 != v15)
        {
          int v19 = v14 / v16;
          if (v14 % v16 || (int v20 = v15 / v13, v15 % v13))
          {
            uint64_t v21 = *a1;
            *(_DWORD *)(v21 + 40) = 39;
            (*(void (**)(uint64_t *))v21)(a1);
          }
          else
          {
            *uint64_t v7 = sub_1003DAABC;
            uint64_t v25 = v6 + v5;
            *(unsigned char *)(v25 + 40) = v19;
            *(unsigned char *)(v25 + 50) = v20;
          }
          goto LABEL_25;
        }
        uint64_t v22 = sub_1003DA920;
      }
      *uint64_t v7 = v22;
LABEL_25:
      uint64_t v23 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void))(a1[1] + 16);
      uint64_t v24 = sub_1003EE800(*((unsigned int *)a1 + 29), *((int *)a1 + 96));
      uint64_t result = v23(a1, 1, v24, *((unsigned int *)a1 + 97));
      *(v7 - 10) = result;
      v8 += 96;
      ++v5;
      ++v7;
    }
    while (v5 < *((int *)a1 + 14));
  }
  return result;
}

uint64_t sub_1003DA654(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 608);
  int v2 = *(_DWORD *)(result + 120);
  *(_DWORD *)(v1 + 184) = *(_DWORD *)(result + 388);
  *(_DWORD *)(v1 + 188) = v2;
  return result;
}

uint64_t sub_1003DA668(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v11 = *(void *)(a1 + 608);
  int v12 = *(_DWORD *)(v11 + 184);
  int v13 = *(_DWORD *)(a1 + 388);
  if (v12 >= v13)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(a1 + 288);
      uint64_t v17 = (void (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 104);
      do
      {
        unsigned int v18 = v17 - 10;
        int v19 = *v17++;
        v19(a1, v16, *(void *)(a2 + 8 * v15) + 8 * (*(_DWORD *)(v11 + 192 + 4 * v15) * *a3), v18);
        ++v15;
        v16 += 96;
      }
      while (v15 < *(int *)(a1 + 56));
      int v13 = *(_DWORD *)(a1 + 388);
    }
    int v12 = 0;
    *(_DWORD *)(v11 + 184) = 0;
  }
  unsigned int v20 = v13 - v12;
  if (v20 >= *(_DWORD *)(v11 + 188)) {
    unsigned int v20 = *(_DWORD *)(v11 + 188);
  }
  if (v20 >= a7 - *a6) {
    unsigned int v21 = a7 - *a6;
  }
  else {
    unsigned int v21 = v20;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 616) + 8))(a1, v11 + 24);
  *a6 += v21;
  unsigned int v23 = *(_DWORD *)(v11 + 188) - v21;
  signed int v24 = *(_DWORD *)(v11 + 184) + v21;
  *(_DWORD *)(v11 + 184) = v24;
  *(_DWORD *)(v11 + 188) = v23;
  if (v24 >= *(_DWORD *)(a1 + 388)) {
    ++*a3;
  }
  return result;
}

void sub_1003DA7B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = 0;
}

void sub_1003DA7B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = a3;
}

uint64_t sub_1003DA7C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4 = *(_DWORD *)(result + 388);
  if (v4 >= 1)
  {
    if (*(_DWORD *)(result + 116))
    {
      uint64_t v5 = 0;
      uint64_t v6 = *a4;
      while (1)
      {
        uint64_t v7 = *(unsigned int *)(result + 116);
        if (!v7) {
          goto LABEL_5;
        }
        unint64_t v8 = *(void *)(v6 + 8 * v5);
        unint64_t v9 = v8 + v7;
        int v10 = *(int8x16_t **)(a3 + 8 * v5);
        unint64_t v11 = v8 + 2;
        if (v9 > v8 + 2) {
          unint64_t v11 = v9;
        }
        unint64_t v12 = v11 + ~v8;
        if (v12 >= 0xE
          && (v8 >= (unint64_t)v10->u64 + (v12 >> 1) + 1
           || (unint64_t)v10 >= v8 + (v12 & 0xFFFFFFFFFFFFFFFELL) + 2))
        {
          uint64_t v14 = (v12 >> 1) + 1;
          if (v12 < 0x3E)
          {
            uint64_t v15 = 0;
LABEL_21:
            unint64_t v20 = v8 + 2 * (v14 & 0xFFFFFFFFFFFFFFF8);
            unsigned int v21 = (int8x16_t *)((char *)v10 + (v14 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v22 = (int8x8_t *)&v10->i8[v15];
            unsigned int v23 = (char *)(v8 + 2 * v15);
            uint64_t v24 = v15 - (v14 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              int8x8_t v25 = *v22++;
              v28.val[0] = v25;
              v28.val[1] = v25;
              vst2_s8(v23, v28);
              v23 += 16;
              v24 += 8;
            }
            while (v24);
            unint64_t v8 = v20;
            int v10 = v21;
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_4;
            }
            goto LABEL_26;
          }
          uint64_t v15 = v14 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v16 = v10 + 1;
          uint64_t v17 = (char *)(v8 + 32);
          unint64_t v18 = v14 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int v19 = v17 - 32;
            v29.val[0] = v16[-1];
            v30.val[0] = *v16;
            v29.val[1] = v29.val[0];
            vst2q_s8(v19, v29);
            v30.val[1] = v30.val[0];
            vst2q_s8(v17, v30);
            v16 += 2;
            v17 += 64;
            v18 -= 32;
          }
          while (v18);
          if (v14 == v15) {
            goto LABEL_4;
          }
          if ((v14 & 0x18) != 0) {
            goto LABEL_21;
          }
          int v10 = (int8x16_t *)((char *)v10 + v15);
          v8 += 2 * v15;
        }
        do
        {
LABEL_26:
          __int8 v26 = v10->i8[0];
          int v10 = (int8x16_t *)((char *)v10 + 1);
          *(unsigned char *)unint64_t v8 = v26;
          *(unsigned char *)(v8 + 1) = v26;
          v8 += 2;
        }
        while (v8 < v9);
LABEL_4:
        int v4 = *(_DWORD *)(result + 388);
LABEL_5:
        if (++v5 >= v4) {
          return result;
        }
      }
    }
    for (uint64_t i = 0; i < v4; ++i)
      ;
  }
  return result;
}

char *sub_1003DA920(char *result, uint64_t a2, uint64_t a3, char **a4)
{
  if (*((int *)result + 97) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = *a4;
    while (1)
    {
      uint64_t v10 = *((unsigned int *)v5 + 29);
      if (v10) {
        break;
      }
      size_t v9 = 0;
LABEL_4:
      uint64_t result = sub_1003EE814(v8, v7, (uint64_t)v8, v7 | 1, 1, v9);
      ++v6;
      v7 += 2;
      if (*((_DWORD *)v5 + 97) <= (int)v7) {
        return result;
      }
    }
    unint64_t v11 = *(void *)&v8[8 * v7];
    unint64_t v12 = v11 + v10;
    int v13 = *(int8x16_t **)(a3 + 8 * v6);
    unint64_t v14 = v11 + 2;
    if (v12 > v11 + 2) {
      unint64_t v14 = v12;
    }
    unint64_t v15 = v14 + ~v11;
    if (v15 < 0xE) {
      goto LABEL_25;
    }
    if (v11 < (unint64_t)v13->u64 + (v15 >> 1) + 1
      && (unint64_t)v13 < v11 + (v15 & 0xFFFFFFFFFFFFFFFELL) + 2)
    {
      goto LABEL_25;
    }
    uint64_t v17 = (v15 >> 1) + 1;
    if (v15 >= 0x3E)
    {
      unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFE0;
      int v19 = v13 + 1;
      unint64_t v20 = (char *)(v11 + 32);
      unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint64_t v22 = v20 - 32;
        v31.val[0] = v19[-1];
        v32.val[0] = *v19;
        v31.val[1] = v31.val[0];
        vst2q_s8(v22, v31);
        v32.val[1] = v32.val[0];
        vst2q_s8(v20, v32);
        v19 += 2;
        v20 += 64;
        v21 -= 32;
      }
      while (v21);
      if (v17 == v18) {
        goto LABEL_26;
      }
      if ((v17 & 0x18) == 0)
      {
        int v13 = (int8x16_t *)((char *)v13 + v18);
        v11 += 2 * v18;
        do
        {
LABEL_25:
          __int8 v29 = v13->i8[0];
          int v13 = (int8x16_t *)((char *)v13 + 1);
          *(unsigned char *)unint64_t v11 = v29;
          *(unsigned char *)(v11 + 1) = v29;
          v11 += 2;
        }
        while (v11 < v12);
LABEL_26:
        size_t v9 = *((unsigned int *)v5 + 29);
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    unint64_t v23 = v11 + 2 * (v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (int8x16_t *)((char *)v13 + (v17 & 0xFFFFFFFFFFFFFFF8));
    int8x8_t v25 = (int8x8_t *)&v13->i8[v18];
    __int8 v26 = (char *)(v11 + 2 * v18);
    unint64_t v27 = v18 - (v17 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v28 = *v25++;
      v30.val[0] = v28;
      v30.val[1] = v28;
      vst2_s8(v26, v30);
      v26 += 16;
      v27 += 8;
    }
    while (v27);
    unint64_t v11 = v23;
    int v13 = v24;
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  return result;
}

_DWORD *sub_1003DAABC(_DWORD *result, uint64_t a2, uint64_t a3, char **a4)
{
  int v4 = result[97];
  if (v4 >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = *a4;
    uint64_t v7 = *((void *)result + 76) + *(int *)(a2 + 4);
    unsigned __int8 v8 = *(unsigned char *)(v7 + 232);
    unsigned __int8 v9 = *(unsigned char *)(v7 + 242);
    uint64_t v10 = v9;
    uint64_t v11 = v9 - 1;
    size_t v12 = v8;
    if (!v8)
    {
      if (v9 < 2u)
      {
        int v30 = 0;
        while (!result[29])
        {
          v30 += v10;
          if (v30 >= v4) {
            return result;
          }
        }
      }
      else
      {
        int v22 = 0;
        while (!v5[29])
        {
          uint64_t result = sub_1003EE814(v6, v22, (uint64_t)v6, v22 + 1, (int)v10 - 1, 0);
          v22 += v10;
          if (v22 >= v5[97]) {
            return result;
          }
        }
      }
      while (1)
        ;
    }
    if (v9 > 1u)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v31 = v9;
      do
      {
        uint64_t v16 = v5[29];
        if (v16)
        {
          uint64_t v17 = v11;
          unint64_t v18 = *(char **)&v6[8 * v14];
          int v19 = &v18[v16];
          unint64_t v20 = *(unsigned __int8 **)(a3 + 8 * v13);
          do
          {
            int v21 = *v20++;
            memset(v18, v21, v12);
            v18 += (v12 - 1) + 1;
          }
          while (v18 < v19);
          size_t v15 = v5[29];
          uint64_t v11 = v17;
          uint64_t v10 = v31;
        }
        else
        {
          size_t v15 = 0;
        }
        uint64_t result = sub_1003EE814(v6, v14, (uint64_t)v6, (int)v14 + 1, v11, v15);
        ++v13;
        v14 += v10;
      }
      while (v5[97] > (int)v14);
    }
    else
    {
      uint64_t v23 = 0;
      for (uint64_t i = 0; i < v4; i += v10)
      {
        uint64_t v25 = v5[29];
        if (v25)
        {
          __int8 v26 = *(char **)&v6[8 * i];
          unint64_t v27 = &v26[v25];
          int8x8_t v28 = *(unsigned __int8 **)(a3 + 8 * v23);
          do
          {
            int v29 = *v28++;
            uint64_t result = memset(v26, v29, v12);
            v26 += v12;
          }
          while (v26 < v27);
          int v4 = v5[97];
        }
        ++v23;
      }
    }
  }
  return result;
}

uint64_t sub_1003DAC8C(uint64_t result)
{
  *(void *)uint64_t result = sub_1003DAD00;
  *(void *)(result + 8) = sub_1003DAD30;
  *(void *)(result + 16) = sub_1003DADA8;
  *(void *)(result + 24) = sub_1003DAE28;
  *(void *)(result + 32) = sub_1003DAF18;
  *(_DWORD *)(result + 124) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = off_10049C830;
  *(_DWORD *)(result + 144) = 126;
  *(void *)(result + 152) = 0;
  *(void *)(result + 160) = 0;
  return result;
}

void sub_1003DAD00(uint64_t a1)
{
}

uint64_t *sub_1003DAD30(uint64_t *result, int a2)
{
  uint64_t v2 = *result;
  if (a2 < 0)
  {
    uint64_t v4 = *(void *)(v2 + 128);
    if (!v4 || *(int *)(v2 + 124) >= 3)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(v2 + 16))();
      uint64_t v4 = *(void *)(v2 + 128);
    }
    *(void *)(v2 + 128) = v4 + 1;
  }
  else if (*(_DWORD *)(v2 + 124) >= a2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 16);
    return (uint64_t *)v3();
  }
  return result;
}

uint64_t sub_1003DADA8(uint64_t a1)
{
  (*(void (**)(uint64_t, char *))(*(void *)a1 + 24))(a1, v2);
  return fprintf(__stderrp, "%s\n", v2);
}

uint64_t sub_1003DAE28(uint64_t *a1, char *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(unsigned int *)(*a1 + 40);
  if ((int)v3 < 1 || (int)v3 > *(_DWORD *)(v2 + 144))
  {
    uint64_t v4 = *(void *)(v2 + 152);
    if (v4)
    {
      int v5 = *(_DWORD *)(v2 + 160);
      BOOL v6 = __OFSUB__(v3, v5);
      int v7 = v3 - v5;
      if (v7 < 0 == v6 && (int)v3 <= *(_DWORD *)(v2 + 164))
      {
        unsigned __int8 v8 = *(const char **)(v4 + 8 * v7);
        if (v8) {
          goto LABEL_10;
        }
      }
    }
    goto LABEL_9;
  }
  unsigned __int8 v8 = *(const char **)(*(void *)(v2 + 136) + 8 * v3);
  if (!v8)
  {
LABEL_9:
    *(_DWORD *)(v2 + 44) = v3;
    unsigned __int8 v8 = **(const char ***)(v2 + 136);
  }
LABEL_10:
  unsigned __int8 v9 = v8;
  while (1)
  {
    int v11 = *(unsigned __int8 *)v9++;
    int v10 = v11;
    if (!v11) {
      break;
    }
    if (v10 == 37)
    {
      if (*v9 == 115) {
        return sprintf(a2, v8, v2 + 44);
      }
      return sprintf(a2, v8, *(unsigned int *)(v2 + 44), *(unsigned int *)(v2 + 48), *(unsigned int *)(v2 + 52), *(unsigned int *)(v2 + 56), *(unsigned int *)(v2 + 60), *(unsigned int *)(v2 + 64), *(unsigned int *)(v2 + 68), *(unsigned int *)(v2 + 72));
    }
  }
  return sprintf(a2, v8, *(unsigned int *)(v2 + 44), *(unsigned int *)(v2 + 48), *(unsigned int *)(v2 + 52), *(unsigned int *)(v2 + 56), *(unsigned int *)(v2 + 60), *(unsigned int *)(v2 + 64), *(unsigned int *)(v2 + 68), *(unsigned int *)(v2 + 72));
}

uint64_t *sub_1003DAF18(uint64_t *result)
{
  uint64_t v1 = *result;
  *(void *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

float32x4_t sub_1003DAF28(float32x4_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3;
  do
  {
    int v5 = (unsigned __int8 *)(*(void *)(a2 + v3 * 4) + v4);
    int v6 = *v5;
    int v7 = v5[7];
    float v8 = (float)(v7 + v6);
    float v9 = (float)(v6 - v7);
    int v10 = v5[1];
    int v11 = v5[6];
    float v12 = (float)(v11 + v10);
    f32 = a1[v3].f32;
    int v14 = v10 - v11;
    int v15 = v5[2];
    int v16 = v5[5];
    float v17 = (float)v14;
    float v18 = (float)(v16 + v15);
    float v19 = (float)(v15 - v16);
    int v20 = v5[3];
    LODWORD(v5) = v5[4];
    float v21 = v8 + (float)((int)v5 + v20);
    float v22 = v8 - (float)((int)v5 + v20);
    float v23 = v12 + v18;
    float v24 = v12 - v18;
    float v25 = v23 + v21;
    float v26 = v21 - v23;
    float v27 = v19 + (float)(v20 - (int)v5);
    float v28 = (float)(v27 - (float)(v9 + v17)) * 0.38268;
    float v29 = v28 + (float)(v27 * 0.5412);
    float v30 = v28 + (float)((float)(v9 + v17) * 1.3066);
    float v31 = (float)(v24 + v22) * 0.70711;
    float v32 = v22 + v31;
    float v33 = v22 - v31;
    float v34 = (float)(v17 + v19) * 0.70711;
    float v35 = v34 + v9;
    float v36 = v9 - v34;
    float *f32 = v25 + -1024.0;
    f32[1] = v35 + v30;
    f32[4] = v26;
    f32[5] = v36 + v29;
    f32[2] = v32;
    f32[3] = v36 - v29;
    f32[6] = v33;
    f32[7] = v35 - v30;
    v3 += 2;
  }
  while (v3 != 16);
  float32x4_t v37 = a1[1];
  float32x4_t v38 = a1[14];
  float32x4_t v39 = a1[15];
  float32x4_t v40 = vaddq_f32(*a1, v38);
  float32x4_t v41 = vsubq_f32(*a1, v38);
  float32x4_t v42 = a1[2];
  float32x4_t v43 = a1[3];
  float32x4_t v44 = a1[12];
  float32x4_t v45 = a1[13];
  float32x4_t v46 = vaddq_f32(v42, v44);
  float32x4_t v47 = vsubq_f32(v42, v44);
  float32x4_t v48 = a1[4];
  float32x4_t v49 = a1[5];
  float32x4_t v50 = a1[10];
  float32x4_t v51 = a1[11];
  float32x4_t v52 = vaddq_f32(v48, v50);
  float32x4_t v53 = vsubq_f32(v48, v50);
  float32x4_t v54 = a1[6];
  float32x4_t v55 = a1[7];
  float32x4_t v56 = a1[8];
  float32x4_t v57 = a1[9];
  float32x4_t v58 = vaddq_f32(v54, v56);
  float32x4_t v59 = vsubq_f32(v54, v56);
  float32x4_t v60 = vaddq_f32(v40, v58);
  float32x4_t v61 = vsubq_f32(v40, v58);
  float32x4_t v62 = vaddq_f32(v46, v52);
  float32x4_t v63 = vsubq_f32(v46, v52);
  float32x4_t v64 = vaddq_f32(v62, v60);
  float32x4_t v65 = vsubq_f32(v60, v62);
  float32x4_t v66 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
  float32x4_t v67 = vmulq_f32(vaddq_f32(v63, v61), v66);
  float32x4_t v68 = vaddq_f32(v61, v67);
  float32x4_t v69 = vsubq_f32(v61, v67);
  float32x4_t v70 = vaddq_f32(v53, v59);
  float32x4_t v71 = vaddq_f32(v47, v53);
  float32x4_t v72 = vaddq_f32(v41, v47);
  float32x4_t v73 = (float32x4_t)vdupq_n_s32(0x3EC3EF15u);
  float32x4_t v74 = vmulq_f32(vsubq_f32(v70, v72), v73);
  float32x4_t v75 = (float32x4_t)vdupq_n_s32(0x3F0A8BD4u);
  float32x4_t v76 = vmlaq_f32(v74, v75, v70);
  float32x4_t v77 = (float32x4_t)vdupq_n_s32(0x3FA73D75u);
  float32x4_t v78 = vmlaq_f32(v74, v77, v72);
  float32x4_t v79 = vmulq_f32(v71, v66);
  float32x4_t v80 = vaddq_f32(v41, v79);
  float32x4_t v81 = vsubq_f32(v41, v79);
  float32x4_t v82 = vaddq_f32(v81, v76);
  float32x4_t v83 = vsubq_f32(v81, v76);
  float32x4_t v84 = vaddq_f32(v80, v78);
  float32x4_t v85 = vsubq_f32(v80, v78);
  float32x4_t v86 = vaddq_f32(v37, v39);
  float32x4_t v87 = vsubq_f32(v37, v39);
  float32x4_t v88 = vaddq_f32(v43, v45);
  float32x4_t v89 = vsubq_f32(v43, v45);
  float32x4_t v90 = vaddq_f32(v49, v51);
  float32x4_t v91 = vsubq_f32(v49, v51);
  float32x4_t v92 = vaddq_f32(v55, v57);
  float32x4_t v93 = vsubq_f32(v55, v57);
  float32x4_t v94 = vaddq_f32(v86, v92);
  float32x4_t v95 = vsubq_f32(v86, v92);
  float32x4_t v96 = vaddq_f32(v88, v90);
  *a1 = v64;
  a1[1] = vaddq_f32(v96, v94);
  a1[8] = v65;
  a1[9] = vsubq_f32(v94, v96);
  float32x4_t v97 = vmulq_f32(vaddq_f32(vsubq_f32(v88, v90), v95), v66);
  a1[4] = v68;
  a1[5] = vaddq_f32(v95, v97);
  a1[12] = v69;
  a1[13] = vsubq_f32(v95, v97);
  float32x4_t v98 = vaddq_f32(v91, v93);
  float32x4_t v99 = vaddq_f32(v89, v91);
  float32x4_t v100 = vaddq_f32(v87, v89);
  float32x4_t v101 = vmulq_f32(vsubq_f32(v98, v100), v73);
  float32x4_t v102 = vmlaq_f32(v101, v75, v98);
  float32x4_t v103 = vmlaq_f32(v101, v77, v100);
  float32x4_t v104 = vmulq_f32(v99, v66);
  float32x4_t v105 = vaddq_f32(v87, v104);
  float32x4_t v106 = vsubq_f32(v87, v104);
  a1[10] = v82;
  a1[11] = vaddq_f32(v106, v102);
  a1[6] = v83;
  a1[7] = vsubq_f32(v106, v102);
  a1[2] = v84;
  a1[3] = vaddq_f32(v105, v103);
  float32x4_t result = vsubq_f32(v105, v103);
  a1[14] = v85;
  a1[15] = result;
  return result;
}

int32x4_t sub_1003DB1D0(int32x4_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3;
  do
  {
    int v5 = &a1[v3];
    int v6 = (unsigned __int8 *)(*(void *)(a2 + v3 * 4) + v4);
    int v7 = *v6;
    int v8 = v6[7];
    int v9 = v8 + v7;
    int v10 = v7 - v8;
    int v11 = v6[1];
    int v12 = v6[6];
    int v13 = v12 + v11;
    int v14 = v11 - v12;
    int v15 = v6[2];
    int v16 = v6[5];
    int v17 = v16 + v15;
    int v18 = v15 - v16;
    int v19 = v6[3];
    LODWORD(v6) = v6[4];
    int v20 = v6 + v19;
    LODWORD(v6) = v19 - v6;
    int v21 = v20 + v9;
    int v22 = v9 - v20;
    int v23 = v17 + v13;
    int v24 = v13 - v17;
    int v25 = v21 + v23;
    __int32 v26 = v21 - v23;
    int v27 = (181 * (v24 + v22)) >> 8;
    __int32 v28 = v27 + v22;
    __int32 v29 = v22 - v27;
    LODWORD(v6) = v6 + v18;
    int v30 = v18 + v14;
    int v31 = v14 + v10;
    int v32 = (98 * ((int)v6 - v31)) >> 8;
    LODWORD(v6) = v32 + ((139 * (int)v6) >> 8);
    int v33 = (181 * v30) >> 8;
    v5[1].i32[0] = v26;
    v5[1].i32[1] = v6 + v10 - v33;
    int v34 = v32 + ((334 * v31) >> 8);
    v5->i32[2] = v28;
    v5->i32[3] = v10 - v33 - v6;
    v5->i32[0] = v25 - 1024;
    v5->i32[1] = v34 + v33 + v10;
    v5[1].i32[2] = v29;
    v5[1].i32[3] = v33 + v10 - v34;
    v3 += 2;
  }
  while (v3 != 16);
  int32x4_t v35 = a1[1];
  int32x4_t v36 = a1[14];
  int32x4_t v37 = a1[15];
  int32x4_t v38 = vaddq_s32(v36, *a1);
  int32x4_t v39 = vsubq_s32(*a1, v36);
  int32x4_t v40 = a1[2];
  int32x4_t v41 = a1[3];
  int32x4_t v42 = a1[12];
  int32x4_t v43 = a1[13];
  int32x4_t v44 = vaddq_s32(v42, v40);
  int32x4_t v45 = vsubq_s32(v40, v42);
  int32x4_t v46 = a1[4];
  int32x4_t v47 = a1[5];
  int32x4_t v48 = a1[10];
  int32x4_t v49 = a1[11];
  int32x4_t v50 = vaddq_s32(v48, v46);
  int32x4_t v51 = vsubq_s32(v46, v48);
  int32x4_t v52 = a1[6];
  int32x4_t v53 = a1[7];
  int32x4_t v54 = a1[8];
  int32x4_t v55 = a1[9];
  int32x4_t v56 = vaddq_s32(v54, v52);
  int32x4_t v57 = vsubq_s32(v52, v54);
  int32x4_t v58 = vaddq_s32(v56, v38);
  int32x4_t v59 = vsubq_s32(v38, v56);
  int32x4_t v60 = vaddq_s32(v50, v44);
  int32x4_t v61 = vsubq_s32(v44, v50);
  int32x4_t v62 = vaddq_s32(v58, v60);
  int32x4_t v63 = vsubq_s32(v58, v60);
  int32x4_t v64 = vaddq_s32(v61, v59);
  v60.i64[0] = 0xB5000000B5;
  v60.i64[1] = 0xB5000000B5;
  int32x4_t v65 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v64.i8, (int32x2_t)0xB5000000B5), 8uLL), vmull_high_s32(v64, v60), 8uLL);
  int32x4_t v66 = vaddq_s32(v59, v65);
  int32x4_t v67 = vsubq_s32(v59, v65);
  int32x4_t v68 = vaddq_s32(v57, v51);
  int32x4_t v69 = vaddq_s32(v51, v45);
  int32x4_t v70 = vaddq_s32(v45, v39);
  int32x4_t v71 = vsubq_s32(v68, v70);
  v72.i64[0] = 0x6200000062;
  v72.i64[1] = 0x6200000062;
  int32x4_t v73 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v71.i8, (int32x2_t)0x6200000062), 8uLL), vmull_high_s32(v71, v72), 8uLL);
  v74.i64[0] = 0x8B0000008BLL;
  v74.i64[1] = 0x8B0000008BLL;
  int32x4_t v75 = vdupq_n_s32(0x14Eu);
  int32x4_t v76 = vaddq_s32(v73, vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v68.i8, (int32x2_t)0x8B0000008BLL), 8uLL), vmull_high_s32(v68, v74), 8uLL));
  int32x4_t v77 = vaddq_s32(v73, vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v70.i8, *(int32x2_t *)v75.i8), 8uLL), vmull_high_s32(v70, v75), 8uLL));
  int32x4_t v78 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v69.i8, (int32x2_t)0xB5000000B5), 8uLL), vmull_high_s32(v69, v60), 8uLL);
  int32x4_t v79 = vaddq_s32(v39, v78);
  int32x4_t v80 = vsubq_s32(v39, v78);
  int32x4_t v81 = vaddq_s32(v76, v80);
  int32x4_t v82 = vsubq_s32(v80, v76);
  int32x4_t v83 = vaddq_s32(v37, v35);
  int32x4_t v84 = vsubq_s32(v35, v37);
  int32x4_t v85 = vaddq_s32(v43, v41);
  int32x4_t v86 = vsubq_s32(v41, v43);
  int32x4_t v87 = vaddq_s32(v49, v47);
  int32x4_t v88 = vsubq_s32(v47, v49);
  int32x4_t v89 = vaddq_s32(v55, v53);
  int32x4_t v90 = vsubq_s32(v53, v55);
  int32x4_t v91 = vaddq_s32(v89, v83);
  int32x4_t v92 = vsubq_s32(v83, v89);
  int32x4_t v93 = vaddq_s32(v87, v85);
  *a1 = v62;
  a1[1] = vaddq_s32(v91, v93);
  a1[8] = v63;
  a1[9] = vsubq_s32(v91, v93);
  int32x4_t v94 = vaddq_s32(vsubq_s32(v85, v87), v92);
  int32x4_t v95 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v94.i8, (int32x2_t)0xB5000000B5), 8uLL), vmull_high_s32(v94, v60), 8uLL);
  a1[4] = v66;
  a1[5] = vaddq_s32(v92, v95);
  a1[12] = v67;
  a1[13] = vsubq_s32(v92, v95);
  int32x4_t v96 = vaddq_s32(v90, v88);
  int32x4_t v97 = vaddq_s32(v88, v86);
  int32x4_t v98 = vaddq_s32(v86, v84);
  int32x4_t v99 = vsubq_s32(v96, v98);
  int32x4_t v100 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v99.i8, (int32x2_t)0x6200000062), 8uLL), vmull_high_s32(v99, v72), 8uLL);
  int32x4_t v101 = vaddq_s32(v100, vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v96.i8, (int32x2_t)0x8B0000008BLL), 8uLL), vmull_high_s32(v96, v74), 8uLL));
  int32x4_t v102 = vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v97.i8, (int32x2_t)0xB5000000B5), 8uLL), vmull_high_s32(v97, v60), 8uLL);
  int32x4_t v103 = vsubq_s32(v84, v102);
  a1[10] = v81;
  a1[11] = vaddq_s32(v101, v103);
  a1[6] = v82;
  a1[7] = vsubq_s32(v103, v101);
  int32x4_t v104 = vaddq_s32(v100, vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v75.i8), 8uLL), vmull_high_s32(v98, v75), 8uLL));
  int32x4_t v105 = vaddq_s32(v84, v102);
  a1[2] = vaddq_s32(v77, v79);
  a1[3] = vaddq_s32(v104, v105);
  int32x4_t result = vsubq_s32(v105, v104);
  a1[14] = vsubq_s32(v79, v77);
  a1[15] = result;
  return result;
}

uint64_t sub_1003DB4C4(uint64_t result, uint64_t a2, unsigned int a3)
{
  for (uint64_t i = 0; i != 64; i += 8)
  {
    uint64_t v4 = (_DWORD *)(result + 4 * i);
    int v5 = (unsigned __int8 *)(*(void *)(a2 + i) + a3);
    int v6 = *v5;
    int v7 = v5[7];
    int v8 = v5[1];
    int v9 = v5[6];
    uint64_t v10 = (v9 + v8);
    int v11 = v5[2];
    int v12 = v5[5];
    uint64_t v13 = (v12 + v11);
    int v14 = v5[3];
    LODWORD(v5) = v5[4];
    int v15 = v5 + v14 + v7 + v6;
    int v16 = v7 + v6 - (v5 + v14);
    int v17 = v13 + v10;
    uint64_t v18 = v10 - v13;
    int v19 = v6 - v7;
    int v20 = v8 - v9;
    int v21 = v11 - v12;
    LODWORD(v5) = v14 - v5;
    uint64_t v22 = 4433 * (v16 + (int)v18) + 1024;
    unint64_t v23 = (unint64_t)(v22 + 6270 * v16) >> 11;
    unint64_t v24 = (unint64_t)(v22 + 0x7FFFFFFC4DFLL * v18) >> 11;
    uint64_t v25 = 9633 * ((int)v5 + v20 + v21 + v19) + 1024;
    uint64_t v26 = v25 - 3196 * (v21 + v19);
    uint64_t v27 = v25 - 16069 * ((int)v5 + v20);
    *uint64_t v4 = 4 * (v15 + v17) - 4096;
    v4[1] = (unint64_t)(12299 * v19 - 7373 * ((int)v5 + v19) + v26) >> 11;
    v4[2] = v23;
    v4[3] = (unint64_t)(25172 * v20 - 20995 * (v21 + v20) + v27) >> 11;
    v4[4] = 4 * (v15 - v17);
    v4[5] = (unint64_t)(16819 * v21 - 20995 * (v21 + v20) + v26) >> 11;
    v4[6] = v24;
    v4[7] = (unint64_t)(2446 * (int)v5 - 7373 * ((int)v5 + v19) + v27) >> 11;
  }
  uint64_t v28 = 0;
  do
  {
    __int32 v29 = (_DWORD *)(result + v28);
    int v30 = *(_DWORD *)(result + v28);
    int v31 = *(_DWORD *)(result + v28 + 224);
    uint64_t v32 = v31 + v30;
    int v33 = *(_DWORD *)(result + v28 + 32);
    int v34 = *(_DWORD *)(result + v28 + 192);
    uint64_t v35 = v34 + v33;
    int v36 = *(_DWORD *)(result + v28 + 64);
    int v37 = *(_DWORD *)(result + v28 + 160);
    uint64_t v38 = v37 + v36;
    int v39 = *(_DWORD *)(result + v28 + 96);
    int v40 = *(_DWORD *)(result + v28 + 128);
    uint64_t v41 = v40 + v39;
    uint64_t v42 = v32 + v41 + 2;
    uint64_t v43 = v32 - v41;
    uint64_t v44 = v38 + v35;
    uint64_t v45 = v35 - v38;
    int v46 = v30 - v31;
    int v47 = v33 - v34;
    uint64_t v48 = v36 - v37;
    uint64_t v49 = v39 - v40;
    *__int32 v29 = (unint64_t)(v42 + v44) >> 2;
    v29[32] = (unint64_t)(v42 - v44) >> 2;
    uint64_t v50 = 4433 * (v43 + v45) + 0x4000;
    v29[16] = (unint64_t)(v50 + 6270 * v43) >> 15;
    v29[48] = (unint64_t)(v50 + 0x7FFFFFFFC4DFLL * v45) >> 15;
    uint64_t v51 = v48 + v46;
    uint64_t v52 = v49 + v47;
    uint64_t v53 = 9633 * (v52 + v51) + 0x4000;
    uint64_t v54 = v53 - 3196 * v51;
    uint64_t v55 = v53 - 16069 * v52;
    uint64_t v56 = -7373 * (v49 + v46);
    uint64_t v57 = -20995 * (v48 + v47);
    v29[8] = (unint64_t)(v56 + 12299 * v46 + v54) >> 15;
    v29[24] = (unint64_t)(v57 + 25172 * v47 + v55) >> 15;
    v29[40] = (unint64_t)(v57 + 16819 * v48 + v54) >> 15;
    v29[56] = (unint64_t)(v56 + 2446 * v49 + v55) >> 15;
    v28 += 4;
  }
  while (v28 != 32);
  return result;
}

_OWORD *sub_1003DB7A4(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  result[2] = 0u;
  result[3] = 0u;
  *int32x4_t result = 0u;
  result[1] = 0u;
  do
  {
    uint64_t v4 = &result[v3];
    int v5 = (unsigned __int8 *)(*(void *)(a2 + v3 * 4) + a3);
    int v6 = *v5;
    int v7 = v5[6];
    int v8 = v7 + v6;
    int v9 = v5[1];
    int v10 = v5[5];
    uint64_t v11 = (v10 + v9);
    int v12 = v5[2];
    int v13 = v5[4];
    int v14 = v13 + v12;
    unsigned int v15 = v5[3];
    int v16 = v6 - v7;
    int v17 = v9 - v10;
    LODWORD(v5) = v12 - v13;
    int v18 = v13 + v12 + v8;
    int v19 = 4 * (v15 + v11 + v18) - 3584;
    int v20 = v18 - 4 * v15;
    int v21 = v8 - (v13 + v12);
    int v22 = v11 - v14;
    unint64_t v23 = (unint64_t)(7542 * v21 + 2578 * ((int)v11 - v14) + 2896 * v20 + 1024) >> 11;
    uint64_t v24 = 7223 * (v8 - (int)v11) + 1024;
    unint64_t v25 = (v24 + 2578 * v22 + 0x7FFFFFFE95FLL * (v11 - 2 * (unint64_t)v15)) >> 11;
    v4[6] = (unint64_t)(v24 - 7542 * v21 + 2896 * v20) >> 11;
    LODWORD(v24) = v17 + v16;
    uint64_t v26 = 1395 * (v16 - v17);
    int v27 = v5 + v17;
    uint64_t v28 = 5027 * ((int)v5 + v16) + 1024;
    *uint64_t v4 = v19;
    v4[1] = (unint64_t)(v28 - v26 + 7663 * (int)v24) >> 11;
    v4[2] = v23;
    v4[3] = (unint64_t)(v26 - 11295 * v27 + 7663 * (int)v24 + 1024) >> 11;
    v4[4] = v25;
    v4[5] = (unint64_t)(v28 + 15326 * (int)v5 - 11295 * v27) >> 11;
    v3 += 2;
  }
  while (v3 != 14);
  uint64_t v29 = 0;
  do
  {
    int v30 = (_DWORD *)((char *)result + v29);
    int v31 = *(_DWORD *)((char *)result + v29);
    int v32 = *(_DWORD *)((char *)result + v29 + 192);
    uint64_t v33 = v32 + v31;
    int v34 = *(_DWORD *)((char *)result + v29 + 32);
    int v35 = *(_DWORD *)((char *)result + v29 + 160);
    uint64_t v36 = v35 + v34;
    int v37 = *(_DWORD *)((char *)result + v29 + 64);
    int v38 = *(_DWORD *)((char *)result + v29 + 128);
    uint64_t v39 = v38 + v37;
    uint64_t v40 = *(int *)((char *)result + v29 + 96);
    uint64_t v41 = v31 - v32;
    uint64_t v42 = v34 - v35;
    int v43 = v37 - v38;
    *int v30 = (unint64_t)(10700 * (v40 + v36 + v39 + v33) + 0x4000) >> 15;
    uint64_t v44 = 3783 * (v39 + v33 - 4 * v40);
    uint64_t v45 = 9850 * (v33 - v39);
    uint64_t v46 = 3367 * (v36 - v39);
    v30[16] = (unint64_t)(v46 + v45 + v44 + 0x4000) >> 15;
    uint64_t v47 = 9434 * (v33 - v36) + 0x4000;
    v30[32] = (unint64_t)(v47 + v46 + 0x7FFFFFFFE272 * (v36 - 2 * v40)) >> 15;
    v30[48] = (unint64_t)(v47 - v45 + v44) >> 15;
    uint64_t v48 = 10009 * (v42 + v41);
    uint64_t v49 = 1822 * (v41 - v42);
    uint64_t v50 = -14752 * (v43 + v42);
    uint64_t v51 = 6565 * (v43 + v41) + 0x4000;
    v30[8] = (unint64_t)(v51 - v49 + v48) >> 15;
    v30[24] = (unint64_t)(v50 + v49 + v48 + 0x4000) >> 15;
    v30[40] = (unint64_t)(v51 + 20017 * v43 + v50) >> 15;
    v29 += 4;
  }
  while (v29 != 28);
  return result;
}

uint64_t sub_1003DBA74(uint64_t result, void *a2, unsigned int a3)
{
  uint64_t v3 = 0;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)int32x4_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  uint64_t v4 = a3;
  uint64_t v5 = a2[1];
  int v6 = (unsigned __int8 *)(*a2 + a3);
  int v7 = *v6;
  int v8 = v6[5];
  int v9 = v6[1];
  int v10 = v6[4];
  int v11 = v10 + v9;
  int v12 = v6[2];
  LODWORD(v6) = v6[3];
  int v13 = v6 + v12 + v8 + v7;
  int v14 = v8 + v7 - (v6 + v12);
  int v15 = v9 - v10;
  int v16 = v12 - v6;
  int v17 = 4 * (v13 + v11) - 3072;
  unint64_t v18 = (unint64_t)(5793 * (v13 - 2 * v11) + 1024) >> 11;
  unint64_t v19 = (unint64_t)(2998 * (v16 + v7 - v8) + 1024) >> 11;
  *(_DWORD *)int32x4_t result = v17;
  *(_DWORD *)(result + 4) = v19 + 4 * (v15 + v7 - v8);
  *(_DWORD *)(result + 8) = (10033 * v14 + 1024) >> 11;
  *(_DWORD *)(result + 12) = 4 * (v7 - v8 - (v15 + v16));
  *(_DWORD *)(result + 16) = v18;
  *(_DWORD *)(result + 20) = v19 + 4 * (v16 - v15);
  int v20 = (unsigned __int8 *)(v5 + v4);
  int v21 = *v20;
  int v22 = v20[5];
  int v23 = v20[1];
  int v24 = v20[4];
  LODWORD(v19) = v20[2];
  LODWORD(v20) = v20[3];
  int v25 = v20 + v19 + v22 + v21;
  LODWORD(v18) = v22 + v21 - (v20 + v19);
  int v26 = v21 - v22;
  LODWORD(v20) = v19 - v20;
  unint64_t v27 = (unint64_t)(2998 * ((int)v20 + v26) + 1024) >> 11;
  *(_DWORD *)(result + 32) = 4 * (v25 + v24 + v23) - 3072;
  *(_DWORD *)(result + 36) = v27 + 4 * (v23 - v24 + v26);
  *(_DWORD *)(result + 40) = (10033 * (int)v18 + 1024) >> 11;
  *(_DWORD *)(result + 44) = 4 * (v26 - (v23 - v24 + v20));
  *(_DWORD *)(result + 48) = (unint64_t)(5793 * (v25 - 2 * (v24 + v23)) + 1024) >> 11;
  *(_DWORD *)(result + 52) = v27 + 4 * (v20 - (v23 - v24));
  uint64_t v28 = a2[3];
  uint64_t v29 = (unsigned __int8 *)(a2[2] + v4);
  int v30 = *v29;
  LODWORD(v18) = v29[5];
  int v31 = v29[2];
  LODWORD(v27) = v29[3];
  int v32 = v27 + v31 + v18 + v30;
  int v33 = v18 + v30 - (v27 + v31);
  int v34 = v29[1];
  LODWORD(v29) = v29[4];
  int v35 = v30 - v18;
  LODWORD(v18) = v29 + v34;
  LODWORD(v29) = v34 - v29;
  int v36 = v31 - v27;
  unint64_t v37 = (unint64_t)(2998 * (v36 + v35) + 1024) >> 11;
  *(_DWORD *)(result + 64) = 4 * (v32 + v18) - 3072;
  *(_DWORD *)(result + 68) = v37 + 4 * (v29 + v35);
  *(_DWORD *)(result + 72) = (10033 * v33 + 1024) >> 11;
  *(_DWORD *)(result + 76) = 4 * (v35 - (v29 + v36));
  *(_DWORD *)(result + 80) = (unint64_t)(5793 * (v32 - 2 * (int)v18) + 1024) >> 11;
  *(_DWORD *)(result + 84) = v37 + 4 * (v36 - v29);
  int v38 = (unsigned __int8 *)(v28 + v4);
  LODWORD(v28) = *(unsigned __int8 *)(v28 + v4);
  int v39 = v38[5];
  int v40 = v38[1];
  int v41 = v38[4];
  LODWORD(v27) = v38[2];
  LODWORD(v38) = v38[3];
  int v42 = v38 + v27 + v39 + v28;
  LODWORD(v18) = v39 + v28 - (v38 + v27);
  LODWORD(v28) = v28 - v39;
  LODWORD(v38) = v27 - v38;
  unint64_t v43 = (unint64_t)(2998 * ((int)v38 + (int)v28) + 1024) >> 11;
  *(_DWORD *)(result + 96) = 4 * (v42 + v41 + v40) - 3072;
  *(_DWORD *)(result + 100) = v43 + 4 * (v40 - v41 + v28);
  *(_DWORD *)(result + 104) = (10033 * (int)v18 + 1024) >> 11;
  *(_DWORD *)(result + 108) = 4 * (v28 - (v40 - v41 + v38));
  *(_DWORD *)(result + 112) = (unint64_t)(5793 * (v42 - 2 * (v41 + v40)) + 1024) >> 11;
  *(_DWORD *)(result + 116) = v43 + 4 * (v38 - (v40 - v41));
  uint64_t v44 = a2[5];
  uint64_t v45 = (unsigned __int8 *)(a2[4] + v4);
  int v46 = *v45;
  LODWORD(v18) = v45[5];
  int v47 = v45[1];
  int v48 = v45[4];
  LODWORD(v43) = v45[2];
  LODWORD(v45) = v45[3];
  int v49 = v45 + v43 + v18 + v46;
  int v50 = v18 + v46 - (v45 + v43);
  int v51 = v46 - v18;
  LODWORD(v45) = v43 - v45;
  unint64_t v52 = (unint64_t)(2998 * ((int)v45 + v51) + 1024) >> 11;
  *(_DWORD *)(result + 128) = 4 * (v49 + v48 + v47) - 3072;
  *(_DWORD *)(result + 132) = v52 + 4 * (v47 - v48 + v51);
  *(_DWORD *)(result + 136) = (10033 * v50 + 1024) >> 11;
  *(_DWORD *)(result + 140) = 4 * (v51 - (v47 - v48 + v45));
  *(_DWORD *)(result + 144) = (unint64_t)(5793 * (v49 - 2 * (v48 + v47)) + 1024) >> 11;
  *(_DWORD *)(result + 148) = v52 + 4 * (v45 - (v47 - v48));
  uint64_t v53 = (unsigned __int8 *)(v44 + v4);
  LODWORD(v45) = *v53;
  LODWORD(v44) = v53[5];
  LODWORD(v18) = v53[1];
  int v54 = v53[4];
  int v55 = v53[2];
  LODWORD(v53) = v53[3];
  LODWORD(v37) = v53 + v55 + v44 + v45;
  int v56 = v44 + v45 - (v53 + v55);
  LODWORD(v45) = v45 - v44;
  LODWORD(v53) = v55 - v53;
  unint64_t v57 = (unint64_t)(2998 * ((int)v53 + (int)v45) + 1024) >> 11;
  *(_DWORD *)(result + 160) = 4 * (v37 + v54 + v18) - 3072;
  *(_DWORD *)(result + 164) = v57 + 4 * (v18 - v54 + v45);
  *(_DWORD *)(result + 168) = (10033 * v56 + 1024) >> 11;
  *(_DWORD *)(result + 172) = 4 * (v45 - (v18 - v54 + v53));
  *(_DWORD *)(result + 176) = (unint64_t)(5793 * ((int)v37 - 2 * (v54 + (int)v18)) + 1024) >> 11;
  *(_DWORD *)(result + 180) = v57 + 4 * (v53 - (v18 - v54));
  do
  {
    int32x4_t v58 = (_DWORD *)(result + v3);
    int v59 = *(_DWORD *)(result + v3);
    int v60 = *(_DWORD *)(result + v3 + 160);
    uint64_t v61 = v60 + v59;
    int v62 = *(_DWORD *)(result + v3 + 32);
    int v63 = *(_DWORD *)(result + v3 + 128);
    int v64 = v63 + v62;
    int v65 = *(_DWORD *)(result + v3 + 64);
    int v66 = *(_DWORD *)(result + v3 + 96);
    uint64_t v67 = v66 + v65;
    uint64_t v68 = v59 - v60;
    uint64_t v69 = v62 - v63;
    uint64_t v70 = v65 - v66;
    _DWORD *v58 = (unint64_t)(14564 * (v67 + v61 + v64) + 0x4000) >> 15;
    v58[16] = (unint64_t)(17837 * (v61 - v67) + 0x4000) >> 15;
    v58[32] = (unint64_t)(10298 * (v67 + v61 - 2 * v64) + 0x4000) >> 15;
    uint64_t v71 = 5331 * (v70 + v68) + 0x4000;
    v58[8] = (unint64_t)(v71 + 14564 * (v69 + v68)) >> 15;
    v58[24] = (unint64_t)(14564 * (v68 - (v69 + v70)) + 0x4000) >> 15;
    v58[40] = (unint64_t)(v71 + 14564 * (v70 - v69)) >> 15;
    v3 += 4;
  }
  while (v3 != 24);
  return result;
}

double sub_1003DBF44(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a3;
  uint64_t v5 = a2[1];
  int v6 = (unsigned __int8 *)(*a2 + a3);
  int v7 = *v6;
  int v8 = v6[4];
  uint64_t v9 = v6[1];
  uint64_t v10 = v6[3];
  LODWORD(v6) = v6[2];
  int v11 = v10 + v9 + v8 + v7;
  int v12 = v7 - v8;
  int v13 = 8 * (v11 + v6) - 5120;
  LODWORD(v6) = v11 - 4 * v6;
  uint64_t v14 = 6476 * (v8 + v7 - ((int)v10 + (int)v9)) + 512;
  *(_DWORD *)(a1 + 16) = (unint64_t)(v14 - 2896 * (int)v6) >> 10;
  uint64_t v15 = 6810 * ((int)v9 - (int)v10 + v12) + 512;
  *(_DWORD *)a1 = v13;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v15 + 4209 * v12) >> 10;
  *(_DWORD *)(a1 + 8) = (unint64_t)(v14 + 2896 * (int)v6) >> 10;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v15 + 0x3FFFFFFBA5CLL * (v9 - v10)) >> 10;
  int v16 = (unsigned __int8 *)(v5 + a3);
  int v17 = *v16;
  int v18 = v16[4];
  uint64_t v19 = v16[1];
  uint64_t v20 = v16[3];
  LODWORD(v16) = v16[2];
  int v21 = v20 + v19 + v18 + v17;
  int v22 = v18 + v17 - (v20 + v19);
  int v23 = v17 - v18;
  uint64_t v24 = v19 - v20;
  LODWORD(v19) = 8 * (v21 + v16) - 5120;
  LODWORD(v16) = v21 - 4 * v16;
  uint64_t v25 = 6476 * v22 + 512;
  unint64_t v26 = (unint64_t)(v25 + 2896 * (int)v16) >> 10;
  *(_DWORD *)(a1 + 48) = (unint64_t)(v25 - 2896 * (int)v16) >> 10;
  uint64_t v27 = 6810 * ((int)v24 + v23) + 512;
  *(_DWORD *)(a1 + 32) = v19;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v27 + 4209 * v23) >> 10;
  *(_DWORD *)(a1 + 40) = v26;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v27 + 0x3FFFFFFBA5CLL * v24) >> 10;
  uint64_t v28 = a2[3];
  uint64_t v29 = (unsigned __int8 *)(a2[2] + v4);
  LODWORD(v24) = *v29;
  LODWORD(v25) = v29[4];
  uint64_t v30 = v29[1];
  uint64_t v31 = v29[3];
  LODWORD(v29) = v29[2];
  int v32 = v31 + v30 + v25 + v24;
  LODWORD(v19) = v25 + v24 - (v31 + v30);
  LODWORD(v24) = v24 - v25;
  uint64_t v33 = v30 - v31;
  LODWORD(v30) = 8 * (v32 + v29) - 5120;
  LODWORD(v29) = v32 - 4 * v29;
  uint64_t v34 = 6476 * (int)v19 + 512;
  unint64_t v35 = (unint64_t)(v34 + 2896 * (int)v29) >> 10;
  *(_DWORD *)(a1 + 80) = (unint64_t)(v34 - 2896 * (int)v29) >> 10;
  uint64_t v36 = 6810 * ((int)v33 + (int)v24) + 512;
  *(_DWORD *)(a1 + 64) = v30;
  *(_DWORD *)(a1 + 68) = (unint64_t)(v36 + 4209 * (int)v24) >> 10;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = (unint64_t)(v36 + 0x3FFFFFFBA5CLL * v33) >> 10;
  unint64_t v37 = (unsigned __int8 *)(v28 + v4);
  LODWORD(v28) = *(unsigned __int8 *)(v28 + v4);
  LODWORD(v24) = v37[4];
  uint64_t v38 = v37[1];
  uint64_t v39 = v37[3];
  int v40 = v37[2];
  int v41 = v39 + v38 + v24 + v28;
  LODWORD(v33) = v24 + v28 - (v39 + v38);
  LODWORD(v28) = v28 - v24;
  uint64_t v42 = v38 - v39;
  LODWORD(v37) = 8 * (v41 + v40) - 5120;
  LODWORD(v38) = v41 - 4 * v40;
  uint64_t v43 = 6476 * (int)v33 + 512;
  unint64_t v44 = (unint64_t)(v43 + 2896 * (int)v38) >> 10;
  unint64_t v45 = (unint64_t)(v43 - 2896 * (int)v38) >> 10;
  uint64_t v46 = 6810 * ((int)v42 + (int)v28) + 512;
  int v47 = (unsigned __int8 *)(a2[4] + v4);
  *(_DWORD *)(a1 + 108) = (unint64_t)(v46 + 0x3FFFFFFBA5CLL * v42) >> 10;
  *(_DWORD *)(a1 + 112) = v45;
  *(_DWORD *)(a1 + 96) = v37;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v46 + 4209 * (int)v28) >> 10;
  *(_DWORD *)(a1 + 104) = v44;
  LODWORD(v28) = *v47;
  LODWORD(v42) = v47[4];
  uint64_t v48 = v47[1];
  uint64_t v49 = v47[3];
  LODWORD(v35) = v49 + v48 + v42 + v28;
  int v50 = v47[2];
  LODWORD(v47) = 8 * (v35 + v50) - 5120;
  LODWORD(v10) = v35 - 4 * v50;
  int v51 = v42 + v28 - (v49 + v48);
  LODWORD(v28) = v28 - v42;
  uint64_t v52 = 6476 * v51 + 512;
  unint64_t v53 = (unint64_t)(v52 + 2896 * (int)v10) >> 10;
  unint64_t v54 = (unint64_t)(v52 - 2896 * (int)v10) >> 10;
  uint64_t v55 = 6810 * ((int)v48 - (int)v49 + (int)v28) + 512;
  unint64_t v56 = (unint64_t)(v55 + 4209 * (int)v28) >> 10;
  unint64_t v57 = (unint64_t)(v55 + 0x3FFFFFFBA5CLL * (v48 - v49)) >> 10;
  LODWORD(v6) = *(_DWORD *)a1;
  LODWORD(v42) = *(_DWORD *)(a1 + 4);
  uint64_t v58 = (int)v47 + *(_DWORD *)a1;
  LODWORD(v10) = *(_DWORD *)(a1 + 32);
  LODWORD(v52) = *(_DWORD *)(a1 + 36);
  uint64_t v59 = (int)v37 + (int)v10;
  uint64_t v60 = v59 + v58;
  *(_DWORD *)(a1 + 140) = v57;
  *(_DWORD *)(a1 + 144) = v54;
  uint64_t v61 = v58 - v59;
  uint64_t v62 = (int)v10 - (int)v37;
  uint64_t v64 = *(int *)(a1 + 64);
  uint64_t v63 = *(int *)(a1 + 68);
  *(_DWORD *)(a1 + 136) = v53;
  uint64_t v65 = 3707 * (v60 - 4 * v64);
  uint64_t v66 = 8290 * v61 + 0x4000;
  uint64_t v67 = 8716 * (v62 + (int)v6 - (int)v47) + 0x4000;
  unint64_t v68 = (unint64_t)(v67 + 5387 * ((int)v6 - (int)v47)) >> 15;
  unint64_t v69 = (unint64_t)(v67 + 0x7FFFFFFFA6DCLL * v62) >> 15;
  uint64_t v70 = (int)v42 + (int)v56;
  int v71 = *(_DWORD *)(a1 + 100);
  int v72 = *(_DWORD *)(a1 + 104);
  uint64_t v73 = v71 + (int)v52;
  LODWORD(v56) = v42 - v56;
  uint64_t v74 = (int)v52 - v71;
  *(_DWORD *)a1 = (unint64_t)(10486 * (v60 + v64) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 4) = (unint64_t)(10486 * (v73 + v70 + v63) + 0x4000) >> 15;
  uint64_t v75 = 3707 * (v73 + v70 - 4 * v63);
  uint64_t v76 = 8290 * (v70 - v73) + 0x4000;
  *(_DWORD *)(a1 + 64) = (unint64_t)(v66 + v65) >> 15;
  *(_DWORD *)(a1 + 68) = (unint64_t)(v76 + v75) >> 15;
  *(_DWORD *)(a1 + 128) = (unint64_t)(v66 - v65) >> 15;
  *(_DWORD *)(a1 + 132) = (unint64_t)(v76 - v75) >> 15;
  uint64_t v77 = 8716 * (v74 + (int)v56) + 0x4000;
  *(_DWORD *)(a1 + 32) = v68;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v77 + 5387 * (int)v56) >> 15;
  *(_DWORD *)(a1 + 96) = v69;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v77 + 0x7FFFFFFFA6DCLL * v74) >> 15;
  LODWORD(v69) = *(_DWORD *)(a1 + 8);
  LODWORD(v56) = *(_DWORD *)(a1 + 12);
  LODWORD(v74) = *(_DWORD *)(a1 + 136);
  LODWORD(v77) = *(_DWORD *)(a1 + 140);
  uint64_t v78 = (int)v74 + (int)v69;
  LODWORD(v60) = *(_DWORD *)(a1 + 40);
  LODWORD(v44) = *(_DWORD *)(a1 + 44);
  uint64_t v79 = v72 + (int)v60;
  uint64_t v80 = v79 + v78;
  uint64_t v81 = v78 - v79;
  LODWORD(v69) = v69 - v74;
  uint64_t v82 = (int)v60 - v72;
  uint64_t v83 = *(int *)(a1 + 72);
  uint64_t v84 = *(int *)(a1 + 76);
  uint64_t v85 = v80 + v83;
  uint64_t v86 = 3707 * (v80 - 4 * v83);
  uint64_t v87 = 8290 * v81 + 0x4000;
  unint64_t v88 = v87 + v86;
  unint64_t v89 = v87 - v86;
  uint64_t v90 = 8716 * (v82 + (int)v69) + 0x4000;
  unint64_t v91 = v90 + 5387 * (int)v69;
  unint64_t v92 = v90 + 0x7FFFFFFFA6DCLL * v82;
  uint64_t v93 = (int)v77 + (int)v56;
  int v94 = *(_DWORD *)(a1 + 108);
  int v95 = *(_DWORD *)(a1 + 112);
  uint64_t v96 = v94 + (int)v44;
  LODWORD(v56) = v56 - v77;
  *(_DWORD *)(a1 + 8) = (unint64_t)(10486 * v85 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 12) = (unint64_t)(10486 * (v96 + v93 + v84) + 0x4000) >> 15;
  uint64_t v97 = (int)v44 - v94;
  uint64_t v98 = 3707 * (v96 + v93 - 4 * v84);
  uint64_t v99 = 8290 * (v93 - v96) + 0x4000;
  *(_DWORD *)(a1 + 72) = v88 >> 15;
  *(_DWORD *)(a1 + 76) = (unint64_t)(v99 + v98) >> 15;
  *(_DWORD *)(a1 + 136) = v89 >> 15;
  *(_DWORD *)(a1 + 140) = (unint64_t)(v99 - v98) >> 15;
  uint64_t v100 = 8716 * (v97 + (int)v56) + 0x4000;
  *(_DWORD *)(a1 + 40) = v91 >> 15;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v100 + 5387 * (int)v56) >> 15;
  *(_DWORD *)(a1 + 104) = v92 >> 15;
  *(_DWORD *)(a1 + 108) = (unint64_t)(v100 + 0x7FFFFFFFA6DCLL * v97) >> 15;
  LODWORD(v91) = *(_DWORD *)(a1 + 16);
  LODWORD(v56) = *(_DWORD *)(a1 + 144);
  uint64_t v101 = (int)v56 + (int)v91;
  LODWORD(v100) = *(_DWORD *)(a1 + 48);
  uint64_t v102 = v95 + (int)v100;
  uint64_t v103 = *(int *)(a1 + 80);
  LODWORD(v91) = v91 - v56;
  uint64_t v104 = (int)v100 - v95;
  *(_DWORD *)(a1 + 16) = (unint64_t)(10486 * (v102 + v101 + v103) + 0x4000) >> 15;
  uint64_t v105 = 3707 * (v102 + v101 - 4 * v103);
  uint64_t v106 = 8290 * (v101 - v102) + 0x4000;
  *(_DWORD *)(a1 + 80) = (unint64_t)(v106 + v105) >> 15;
  *(_DWORD *)(a1 + 144) = (unint64_t)(v106 - v105) >> 15;
  uint64_t v107 = 8716 * (v104 + (int)v91) + 0x4000;
  *(_DWORD *)(a1 + 48) = (unint64_t)(v107 + 5387 * (int)v91) >> 15;
  *(_DWORD *)(a1 + 112) = (unint64_t)(v107 + 0x7FFFFFFFA6DCLL * v104) >> 15;
  return result;
}

double sub_1003DC494(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2[1];
  uint64_t v5 = (unsigned __int8 *)(*a2 + a3);
  int v6 = *v5;
  int v7 = v5[3];
  int v8 = v7 + v6;
  uint64_t v9 = v5[1];
  uint64_t v10 = v5[2];
  int v11 = v10 + v9;
  int v12 = v6 - v7;
  uint64_t v13 = v9 - v10;
  int v14 = 16 * (v11 + v8) - 0x2000;
  int v15 = 16 * (v8 - v11);
  uint64_t v16 = 4433 * ((int)v13 + v12) + 256;
  *(_DWORD *)a1 = v14;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v16 + 6270 * v12) >> 9;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v16 + 0x1FFFFFFC4DFLL * v13) >> 9;
  int v17 = (unsigned __int8 *)(v4 + a3);
  int v18 = *v17;
  LODWORD(v13) = v17[3];
  LODWORD(v16) = v13 + v18;
  uint64_t v19 = v17[1];
  uint64_t v20 = v17[2];
  int v21 = v20 + v19;
  int v22 = v18 - v13;
  uint64_t v23 = v19 - v20;
  uint64_t v24 = 4433 * ((int)v23 + v22) + 256;
  *(_DWORD *)(a1 + 32) = 16 * (v21 + v16) - 0x2000;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v24 + 6270 * v22) >> 9;
  *(_DWORD *)(a1 + 40) = 16 * (v16 - v21);
  *(_DWORD *)(a1 + 44) = (unint64_t)(v24 + 0x1FFFFFFC4DFLL * v23) >> 9;
  uint64_t v25 = a2[3];
  unint64_t v26 = (unsigned __int8 *)(a2[2] + a3);
  int v27 = *v26;
  LODWORD(v16) = v26[3];
  LODWORD(v24) = v16 + v27;
  uint64_t v28 = v26[1];
  uint64_t v29 = v26[2];
  int v30 = v29 + v28;
  int v31 = v27 - v16;
  uint64_t v32 = v28 - v29;
  LODWORD(v29) = 16 * (v29 + v28 + v24) - 0x2000;
  uint64_t v33 = 4433 * ((int)v32 + v31) + 256;
  unint64_t v34 = (unint64_t)(v33 + 6270 * v31) >> 9;
  *(_DWORD *)(a1 + 64) = v29;
  *(_DWORD *)(a1 + 68) = v34;
  *(_DWORD *)(a1 + 72) = 16 * (v24 - v30);
  *(_DWORD *)(a1 + 76) = (unint64_t)(v33 + 0x1FFFFFFC4DFLL * v32) >> 9;
  unint64_t v35 = (unsigned __int8 *)(v25 + a3);
  LODWORD(v25) = *v35;
  LODWORD(v32) = v35[3];
  LODWORD(v24) = v32 + v25;
  uint64_t v36 = v35[1];
  uint64_t v37 = v35[2];
  int v38 = v37 + v36;
  LODWORD(v32) = v25 - v32;
  uint64_t v39 = v36 - v37;
  LODWORD(v36) = 16 * (v38 + v24) - 0x2000;
  LODWORD(v25) = v24 - v38;
  uint64_t v40 = 4433 * ((int)v39 + (int)v32) + 256;
  unint64_t v41 = (unint64_t)(v40 + 6270 * (int)v32) >> 9;
  unint64_t v42 = v40 + 0x1FFFFFFC4DFLL * v39;
  LODWORD(v40) = *(_DWORD *)(a1 + 4);
  uint64_t v43 = (int)v36 + *(_DWORD *)a1 + 2;
  int v44 = *(_DWORD *)(a1 + 32);
  int v45 = *(_DWORD *)(a1 + 36);
  uint64_t v46 = (int)v29 + v44;
  int v47 = *(_DWORD *)a1 - v36;
  uint64_t v48 = v44 - (int)v29;
  unint64_t v49 = (unint64_t)(v43 + v46) >> 2;
  unint64_t v50 = v43 - v46;
  uint64_t v51 = 4433 * (v48 + v47) + 0x4000;
  unint64_t v52 = v51 + 6270 * v47;
  unint64_t v53 = v51 + 0x7FFFFFFFC4DFLL * v48;
  uint64_t v54 = (int)v40 + (int)v41 + 2;
  LODWORD(v41) = v40 - v41;
  uint64_t v55 = v45 + (int)v34;
  *(_DWORD *)a1 = v49;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v54 + v55) >> 2;
  LODWORD(v25) = 16 * v25;
  uint64_t v56 = v45 - (int)v34;
  *(_DWORD *)(a1 + 64) = v50 >> 2;
  *(_DWORD *)(a1 + 68) = (unint64_t)(v54 - v55) >> 2;
  uint64_t v57 = 4433 * (v56 + (int)v41) + 0x4000;
  *(_DWORD *)(a1 + 32) = v52 >> 15;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v57 + 6270 * (int)v41) >> 15;
  *(_DWORD *)(a1 + 96) = v53 >> 15;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v57 + 0x7FFFFFFFC4DFLL * v56) >> 15;
  LODWORD(v56) = *(_DWORD *)(a1 + 8);
  LODWORD(v41) = *(_DWORD *)(a1 + 12);
  uint64_t v58 = (int)v25 + (int)v56 + 2;
  LODWORD(v56) = v56 - v25;
  LODWORD(v25) = *(_DWORD *)(a1 + 40);
  LODWORD(v53) = *(_DWORD *)(a1 + 44);
  LODWORD(v50) = *(_DWORD *)(a1 + 72);
  LODWORD(v49) = *(_DWORD *)(a1 + 76);
  uint64_t v59 = (int)v50 + (int)v25;
  uint64_t v60 = (int)v25 - (int)v50;
  unint64_t v61 = v58 + v59;
  unint64_t v62 = v58 - v59;
  uint64_t v63 = 4433 * (v60 + (int)v56) + 0x4000;
  v42 >>= 9;
  *(_DWORD *)(a1 + 104) = (unint64_t)(v63 + 0x7FFFFFFFC4DFLL * v60) >> 15;
  *(_DWORD *)(a1 + 108) = v42;
  uint64_t v64 = (int)v42 + (int)v41 + 2;
  LODWORD(v42) = v41 - v42;
  uint64_t v65 = (int)v49 + (int)v53;
  uint64_t v66 = (int)v53 - (int)v49;
  *(_DWORD *)(a1 + 8) = v61 >> 2;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v64 + v65) >> 2;
  *(_DWORD *)(a1 + 72) = v62 >> 2;
  *(_DWORD *)(a1 + 76) = (unint64_t)(v64 - v65) >> 2;
  uint64_t v67 = 4433 * (v66 + (int)v42) + 0x4000;
  *(_DWORD *)(a1 + 40) = (unint64_t)(v63 + 6270 * (int)v56) >> 15;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v67 + 6270 * (int)v42) >> 15;
  *(_DWORD *)(a1 + 108) = (unint64_t)(v67 + 0x7FFFFFFFC4DFLL * v66) >> 15;
  return result;
}

double sub_1003DC7A8(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a3;
  uint64_t v5 = a2[1];
  int v6 = (unsigned __int8 *)(*a2 + a3);
  int v7 = *v6;
  int v8 = v6[2];
  int v9 = v8 + v7;
  LODWORD(v6) = v6[1];
  int v10 = v7 - v8;
  int v11 = 16 * (v9 + v6) - 6144;
  *(_DWORD *)(a1 + 8) = (5793 * (v9 - 2 * (int)v6) + 256) >> 9;
  int v12 = (10033 * v10 + 256) >> 9;
  *(_DWORD *)a1 = v11;
  *(_DWORD *)(a1 + 4) = v12;
  uint64_t v13 = (unsigned __int8 *)(v5 + a3);
  LODWORD(v5) = *v13;
  int v14 = v13[2];
  int v15 = v14 + v5;
  LODWORD(v13) = v13[1];
  int v16 = v5 - v14;
  int v17 = 16 * (v15 + v13) - 6144;
  LODWORD(v5) = 5793 * (v15 - 2 * v13) + 256;
  int v18 = (10033 * v16 + 256) >> 9;
  *(_DWORD *)(a1 + 32) = v17;
  *(_DWORD *)(a1 + 36) = v18;
  *(_DWORD *)(a1 + 40) = (int)v5 >> 9;
  uint64_t v19 = (unsigned __int8 *)(a2[2] + v4);
  int v20 = *v19;
  int v21 = v19[2];
  LODWORD(v19) = v19[1];
  int v22 = 16 * (v21 + v20 + v19) - 6144;
  LODWORD(v19) = (5793 * (v21 + v20 - 2 * (int)v19) + 256) >> 9;
  int v23 = (10033 * (v20 - v21) + 256) >> 9;
  uint64_t v24 = v22 + v11;
  *(_DWORD *)a1 = (unint64_t)(14564 * (v24 + v17) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 4) = (unint64_t)(14564 * (v23 + v12 + v18) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 64) = (unint64_t)(10298 * (v24 - 2 * v17) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 68) = (unint64_t)(10298 * (v23 + v12 - 2 * v18) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 32) = (unint64_t)(17837 * (v11 - v22) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 36) = (unint64_t)(17837 * (v12 - v23) + 0x4000) >> 15;
  int v25 = *(_DWORD *)(a1 + 8);
  uint64_t v26 = (int)v19 + v25;
  *(_DWORD *)(a1 + 8) = (unint64_t)(14564 * (v26 + ((uint64_t)(int)v5 >> 9)) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 72) = (unint64_t)(10298 * (v26 - 2 * ((int)v5 >> 9)) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 40) = (unint64_t)(17837 * (v25 - (int)v19) + 0x4000) >> 15;
  return result;
}

double sub_1003DC96C(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (unsigned __int8 *)(*a2 + a3);
  int v5 = *v4;
  LODWORD(v4) = v4[1];
  int v6 = v4 + v5;
  LODWORD(v4) = v5 - v4;
  int v7 = (unsigned __int8 *)(a2[1] + a3);
  int v8 = *v7;
  LODWORD(v7) = v7[1];
  int v9 = v7 + v8;
  LODWORD(v7) = v8 - v7;
  *(_DWORD *)a1 = 16 * (v9 + v6) - 0x2000;
  *(_DWORD *)(a1 + 4) = 16 * (v7 + v4);
  *(_DWORD *)(a1 + 32) = 16 * (v6 - v9);
  *(_DWORD *)(a1 + 36) = 16 * (v4 - v7);
  return result;
}

double sub_1003DC9F0(_OWORD *a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *(_DWORD *)a1 = (*(unsigned __int8 *)(*a2 + a3) << 6) - 0x2000;
  return result;
}

_DWORD *sub_1003DCA2C(_DWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  for (uint64_t i = result; ; i += 8)
  {
    while (1)
    {
      int v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + a3);
      int v6 = *v5;
      int v7 = v5[8];
      uint64_t v8 = (v7 + v6);
      int v9 = v5[1];
      int v10 = v5[7];
      uint64_t v11 = (v10 + v9);
      int v12 = v5[2];
      int v13 = v5[6];
      uint64_t v14 = (v13 + v12);
      int v15 = v5[3];
      int v16 = v5[5];
      uint64_t v17 = (v16 + v15);
      uint64_t v18 = v5[4];
      int v19 = v6 - v7;
      LODWORD(v5) = v9 - v10;
      int v20 = v12 - v13;
      uint64_t v21 = v14 + v8 + v17;
      int v22 = 2 * (v21 + v18 + v11) - 2304;
      unint64_t v23 = (unint64_t)(5793 * (v21 - 2 * (v18 + v11)) + 2048) >> 12;
      LODWORD(v11) = v11 - 2 * v18;
      uint64_t v24 = 10887 * ((int)v8 - (int)v14) + 2048;
      unint64_t v25 = (unint64_t)(v24 + 2012 * ((int)v17 - (int)v8) - 5793 * (int)v11) >> 12;
      i[2] = (unint64_t)(v24 + 8875 * ((int)v14 - (int)v17) + 5793 * (int)v11) >> 12;
      i[3] = (unint64_t)(10033 * (v19 - (v20 + v15 - v16)) + 2048) >> 12;
      uint64_t v26 = 7447 * (v20 + v19);
      uint64_t v27 = 3962 * (v15 - v16 + v19);
      *uint64_t i = v22;
      i[1] = (unint64_t)(v26 + 10033 * (int)v5 + v27 + 2048) >> 12;
      int v28 = v20 - (v15 - v16);
      i[4] = v25;
      i[5] = (unint64_t)(v26 - 11409 * v28 - 10033 * (int)v5 + 2048) >> 12;
      i[6] = v23;
      i[7] = (unint64_t)(v27 - 10033 * (int)v5 + 11409 * v28 + 2048) >> 12;
      if (v3 != 7) {
        break;
      }
      uint64_t i = v54;
      ++v3;
    }
    if (v3 == 8) {
      break;
    }
    ++v3;
  }
  uint64_t v29 = 0;
  do
  {
    int v30 = &result[v29];
    int v31 = result[v29];
    int v32 = *(_DWORD *)&v54[v29 * 4];
    uint64_t v33 = v32 + v31;
    int v34 = result[v29 + 8];
    int v35 = result[v29 + 56];
    uint64_t v36 = v35 + v34;
    int v37 = result[v29 + 16];
    int v38 = result[v29 + 48];
    uint64_t v39 = v38 + v37;
    int v40 = result[v29 + 24];
    int v41 = result[v29 + 40];
    uint64_t v42 = v41 + v40;
    uint64_t v43 = (int)result[v29 + 32];
    uint64_t v44 = v31 - v32;
    int v45 = v34 - v35;
    uint64_t v46 = v37 - v38;
    uint64_t v47 = v40 - v41;
    uint64_t v48 = v39 + v33 + v42;
    *int v30 = (unint64_t)(12945 * (v48 + v43 + v36) + 0x4000) >> 15;
    v30[48] = (unint64_t)(9154 * (v48 - 2 * (v43 + v36)) + 0x4000) >> 15;
    uint64_t v49 = 9154 * (v36 - 2 * v43);
    uint64_t v50 = 17203 * (v33 - v39) + 0x4000;
    v30[16] = (unint64_t)(v50 + 14024 * (v39 - v42) + v49) >> 15;
    v30[32] = (unint64_t)(v50 + 3179 * (v42 - v33) - v49) >> 15;
    v30[24] = (unint64_t)(15855 * (v44 - (v46 + v47)) + 0x4000) >> 15;
    uint64_t v51 = 11768 * (v46 + v44);
    uint64_t v52 = 6262 * (v47 + v44);
    v30[8] = (unint64_t)(v51 + 15855 * v45 + v52 + 0x4000) >> 15;
    uint64_t v53 = 18029 * (v46 - v47);
    v30[40] = (unint64_t)(v51 - 15855 * v45 - v53 + 0x4000) >> 15;
    v30[56] = (unint64_t)(v52 - 15855 * v45 + v53 + 0x4000) >> 15;
    ++v29;
  }
  while ((v29 * 4) != 32);
  return result;
}

unint64_t sub_1003DCD68(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  for (uint64_t i = a1; ; i += 8)
  {
    while (1)
    {
      int v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + a3);
      int v6 = *v5;
      int v7 = v5[9];
      uint64_t v8 = v5[1];
      uint64_t v9 = v5[8];
      uint64_t v10 = (v9 + v8);
      uint64_t v11 = v5[3];
      uint64_t v12 = v5[6];
      uint64_t v13 = (v12 + v11);
      int v14 = v5[4];
      int v15 = v5[5];
      int v16 = v15 + v14 + v7 + v6;
      int v17 = v7 + v6 - (v15 + v14);
      uint64_t v18 = v13 + v10;
      uint64_t v19 = v10 - v13;
      int v20 = v6 - v7;
      uint64_t v21 = v5[2];
      uint64_t v22 = v5[7];
      uint64_t v23 = v8 - v9;
      LODWORD(v8) = v22 + v21;
      uint64_t v24 = v21 - v22;
      uint64_t v25 = v11 - v12;
      LODWORD(v12) = v8 + v16 + v18;
      unint64_t v26 = (0xFFFFFFFF204 * (v18 - (unint64_t)(2 * v8)) + 9373 * (v16 - 2 * (int)v8) + 2048) >> 12;
      uint64_t v27 = 6810 * (v17 + (int)v19) + 2048;
      LODWORD(v8) = v14 - v15 + v20;
      i[4] = v26;
      i[5] = 2 * (v8 - (v23 - v25 + v24));
      v24 <<= 13;
      *uint64_t i = 2 * v12 - 2560;
      i[1] = (unint64_t)(10323 * (int)v23
                              + 11443 * v20
                              + v24
                              + 5260 * (int)v25
                              + 1812 * (v14 - v15)
                              + 2048) >> 12;
      uint64_t v28 = -4815 * ((int)v25 + (int)v23) + 7791 * (v20 - (v14 - v15));
      uint64_t v29 = 2531 * ((int)v8 + (int)v23 - (int)v25) - v24 + ((v23 - v25) << 12);
      v28 += 2048;
      i[2] = (unint64_t)(v27 + 4209 * v17) >> 12;
      i[3] = (unint64_t)(v28 + v29) >> 12;
      i[6] = (unint64_t)(v27 + 0xFFFFFFFBA5CLL * v19) >> 12;
      i[7] = (unint64_t)(v28 - v29) >> 12;
      if (v3 != 7) {
        break;
      }
      uint64_t i = v64;
      ++v3;
    }
    if (v3 == 9) {
      break;
    }
    ++v3;
  }
  uint64_t v30 = 0;
  do
  {
    int v31 = &a1[v30];
    int v32 = a1[v30];
    int v33 = *(_DWORD *)&v64[v30 * 4 + 32];
    uint64_t v34 = v33 + v32;
    int v35 = a1[v30 + 8];
    int v36 = *(_DWORD *)&v64[v30 * 4];
    uint64_t v37 = v36 + v35;
    int v38 = a1[v30 + 24];
    int v39 = a1[v30 + 48];
    uint64_t v40 = v39 + v38;
    int v41 = a1[v30 + 32];
    int v42 = a1[v30 + 40];
    uint64_t v43 = v42 + v41;
    uint64_t v44 = v43 + v34;
    uint64_t v45 = v34 - v43;
    uint64_t v46 = v40 + v37;
    uint64_t v47 = v37 - v40;
    LODWORD(v40) = a1[v30 + 16];
    int v48 = v32 - v33;
    int v49 = a1[v30 + 56];
    int v50 = v35 - v36;
    int v51 = v49 + v40;
    int v52 = v40 - v49;
    _DWORD *v31 = (unint64_t)(10486 * (v46 + v51 + v44) + 0x4000) >> 15;
    uint64_t v53 = 2 * v51;
    uint64_t v54 = v44 - v53;
    uint64_t v55 = v46 - v53;
    uint64_t v56 = v38 - v39;
    v31[32] = (unint64_t)(11997 * v54 + 0x7FFFFFFFEE1ALL * v55 + 0x4000) >> 15;
    uint64_t v57 = 8716 * (v45 + v47) + 0x4000;
    v31[16] = (unint64_t)(v57 + 5387 * v45) >> 15;
    v31[48] = (unint64_t)(v57 + 0x7FFFFFFFA6DCLL * v47) >> 15;
    uint64_t v58 = v41 - v42 + (uint64_t)v48;
    uint64_t v59 = v50 - v56;
    v31[40] = (unint64_t)(10486 * (v58 - (v59 + v52)) + 0x4000) >> 15;
    v31[8] = (unint64_t)(13213 * v50
                              + 14647 * v48
                              + 10486 * v52
                              + 6732 * v56
                              + 2320 * (v41 - v42)
                              + 0x4000) >> 15;
    uint64_t v60 = 5243 * v59 - 10486 * v52 + 3240 * (v58 + v59);
    uint64_t v61 = -6163 * (v56 + v50) + 9973 * (v48 - (uint64_t)(v41 - v42)) + 0x4000;
    unint64_t result = (unint64_t)(v61 + v60) >> 15;
    v31[24] = result;
    v31[56] = (unint64_t)(v61 - v60) >> 15;
    ++v30;
  }
  while ((v30 * 4) != 32);
  return result;
}

uint64_t sub_1003DD124(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  for (uint64_t i = a1; ; i += 8)
  {
    while (1)
    {
      int v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + a3);
      uint64_t v6 = *v5;
      uint64_t v7 = v5[10];
      uint64_t v8 = (v7 + v6);
      int v9 = v5[2];
      int v10 = v5[8];
      uint64_t v11 = (v10 + v9);
      int v12 = v5[3];
      int v13 = v5[7];
      uint64_t v14 = (v13 + v12);
      uint64_t v15 = v5[4];
      uint64_t v16 = v5[6];
      uint64_t v17 = (v16 + v15);
      int v18 = v5[5];
      uint64_t v19 = 2 * v5[5];
      int v20 = v17 - v19;
      uint64_t v21 = 1649 * ((int)v11 - (int)v19 + (int)v17 - (int)v19) + 11116 * ((int)v8 - (int)v19 + (int)v14 - (int)v19);
      int v22 = v5[1];
      LODWORD(v5) = v5[9];
      uint64_t v23 = v6 - v7;
      uint64_t v24 = (v5 + v22);
      int v25 = v22 - v5;
      LODWORD(v7) = v12 - v13;
      uint64_t v26 = v15 - v16;
      int v27 = v24 - v14;
      int v28 = v17 + v24 + v8 + v11 + v14 + v18;
      uint64_t v29 = 0xFFFFFFFDF6ALL * (v14 - v19) + 7587 * ((int)v24 - (int)v14) + 0xFFFFFFFD37DLL * (v17 - v19);
      uint64_t v30 = 9746 * ((int)v8 - (int)v24) + 2048;
      uint64_t v31 = v30 + 0xFFFFFFFCC25 * (v8 - v19);
      uint64_t v32 = v30 - (v24 - v19) + ((v24 - v19) << 9) + 0xFFFFFFFD494 * (v11 - v19) + 4813 * v20;
      uint64_t v33 = v29 + v21;
      unint64_t v34 = v32 + 7587 * v27;
      unint64_t v35 = v31 + 0xFFFFFFFE6C3 * (v11 - v19) + v21;
      LODWORD(v31) = v9 - v10 + v23;
      uint64_t v36 = 10538 * (v25 + (int)v23) + 2048;
      *uint64_t i = 2 * v28 - 2816;
      i[1] = (unint64_t)(v36
                              + 0xFFFFFFFC8F6 * v23
                              + 8756 * (int)v31
                              + 6263 * ((int)v7 + (int)v23)
                              + 3264 * (int)v26) >> 12;
      unint64_t v37 = (unint64_t)(v33 + 2048) >> 12;
      LODWORD(v33) = v9 - v10 + v25;
      i[2] = v37;
      i[3] = (unint64_t)(v36
                              + 10456 * v25
                              - 6263 * (int)v33
                              - 11467 * ((int)v7 + v25)
                              + 0xFFFFFFFDDCCLL * v26) >> 12;
      uint64_t v38 = -16294 * (v9 - v10) - 6263 * (int)v33 + 8756 * (int)v31;
      LODWORD(v33) = v7 + v9 - v10;
      i[4] = v34 >> 12;
      i[5] = (unint64_t)(v38 + 3264 * (int)v33 + 11467 * (int)v26 + 2048) >> 12;
      i[6] = v35 >> 12;
      i[7] = (unint64_t)(10695 * (int)v7
                              + 3264 * (int)v33
                              - 11467 * ((int)v7 + v25)
                              + 6263 * ((int)v7 + (int)v23)
                              + 0xFFFFFFFD6D6 * v26
                              + 2048) >> 12;
      if (v3 != 7) {
        break;
      }
      uint64_t i = v79;
      ++v3;
    }
    if (v3 == 10) {
      break;
    }
    ++v3;
  }
  uint64_t v39 = 0;
  do
  {
    uint64_t v40 = &a1[v39];
    int v41 = a1[v39];
    int v42 = *(_DWORD *)&v79[v39 * 4 + 64];
    uint64_t v43 = v42 + v41;
    int v44 = a1[v39 + 8];
    int v45 = *(_DWORD *)&v79[v39 * 4 + 32];
    uint64_t v46 = v45 + v44;
    int v47 = a1[v39 + 16];
    int v48 = *(_DWORD *)&v79[v39 * 4];
    uint64_t v49 = v48 + v47;
    int v50 = a1[v39 + 24];
    int v51 = a1[v39 + 56];
    uint64_t v52 = v51 + v50;
    int v53 = a1[v39 + 32];
    int v54 = v41 - v42;
    int v55 = a1[v39 + 48];
    int v56 = v44 - v45;
    uint64_t v57 = v55 + v53;
    int v58 = v47 - v48;
    uint64_t v59 = (int)a1[v39 + 40];
    int v60 = v50 - v51;
    int v61 = v53 - v55;
    *uint64_t v40 = (unint64_t)(8666 * (v46 + v43 + v49 + v52 + v57 + v59) + 0x4000) >> 15;
    v59 *= 2;
    uint64_t v62 = v43 - v59;
    uint64_t v63 = v49 - v59;
    uint64_t v64 = v57 - v59;
    uint64_t v65 = 1744 * (v63 + v57 - v59);
    uint64_t v66 = v46 - v59;
    uint64_t v67 = v52 - v59;
    uint64_t v68 = v65 + 11759 * (v62 + v67);
    uint64_t v69 = 8026 * (v66 - v67);
    v40[16] = (unint64_t)(v69 + 0x7FFFFFFFDD87 * v67 + 0x7FFFFFFFD0EALL * v64 + v68 + 0x4000) >> 15;
    uint64_t v70 = 10310 * (v62 - v66) + 0x4000;
    v40[32] = (unint64_t)(v70 + 540 * v66 + 0x7FFFFFFFD211 * v63 + 5091 * v64 + v69) >> 15;
    v40[48] = (unint64_t)(v70 + 0x7FFFFFFFC925 * v62 + 0x7FFFFFFFE54DLL * v63 + v68) >> 15;
    uint64_t v71 = 9262 * (v58 + (uint64_t)v54);
    uint64_t v72 = 6626 * (v60 + (uint64_t)v54);
    uint64_t v73 = 11148 * (v56 + (uint64_t)v54) + 0x4000;
    v40[8] = (unint64_t)(v73 + 0x7FFFFFFFC5C7 * v54 + v71 + v72 + 3453 * v61) >> 15;
    uint64_t v74 = -6626 * (v58 + (uint64_t)v56);
    uint64_t v75 = 3453 * (v60 + (uint64_t)v58);
    uint64_t result = 0x7FFFFFFFD474;
    v40[24] = (unint64_t)(v73 + 11061 * v56 + v74 - 12131 * (v60 + (uint64_t)v56) + 0x7FFFFFFFDBD2 * v61) >> 15;
    v40[40] = (unint64_t)(v74 - 17237 * v58 + v71 + v75 + 12131 * v61 + 0x4000) >> 15;
    v40[56] = (unint64_t)(v75
                               + 11314 * v60
                               + -12131 * (v60 + (uint64_t)v56)
                               + v72
                               + 0x7FFFFFFFD474 * v61
                               + 0x4000) >> 15;
    ++v39;
  }
  while ((v39 * 4) != 32);
  return result;
}

uint64_t sub_1003DD5F8(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  for (uint64_t i = a1; ; i += 8)
  {
    while (1)
    {
      int v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + a3);
      uint64_t v6 = *v5;
      uint64_t v7 = v5[11];
      int v8 = v5[1];
      uint64_t v9 = v5[2];
      uint64_t v10 = v5[9];
      uint64_t v11 = (v10 + v9);
      int v12 = v5[3];
      int v13 = v5[8];
      uint64_t v14 = (v13 + v12);
      uint64_t v15 = v5[5];
      uint64_t v16 = v5[6];
      int v17 = v16 + v15 + v7 + v6;
      int v18 = v7 + v6 - (v16 + v15);
      int v19 = v14 + v11;
      uint64_t v20 = v11 - v14;
      int v21 = v5[10];
      uint64_t v22 = v6 - v7;
      uint64_t v23 = (v21 + v8);
      int v24 = v8 - v21;
      uint64_t v25 = v9 - v10;
      LODWORD(v6) = v5[4];
      int v26 = v5[7];
      uint64_t v27 = (v26 + v6);
      LODWORD(v10) = v6 - v26;
      uint64_t v28 = v15 - v16;
      uint64_t v29 = v23 - v27;
      LODWORD(v23) = v19 + v23 + v27 + v17 - 1536;
      int v30 = v18 - (v29 + v20);
      int v31 = v17 - v19;
      uint64_t v32 = v29 - v20 + 11190 * (v18 + (int)v20);
      uint64_t v33 = 6270 * v24 + 4433 * ((int)v10 + v24);
      uint64_t v34 = -15137 * (int)v10 + 4433 * ((int)v10 + v24);
      int v35 = v12 - v13 + v22;
      uint64_t v36 = 9191 * ((int)v25 + (int)v22) + 4096;
      *uint64_t i = v23;
      i[1] = (unint64_t)(v36 + 0x1FFFFFFFED6ALL * v22 + 7053 * v35 + v33 + 1512 * (int)v28) >> 13;
      i[2] = (unint64_t)(v32 + 4096) >> 13;
      i[3] = (unint64_t)(v34 + 10703 * ((int)v22 - (v12 - v13)) + 0x1FFFFFFFEEAFLL * (v28 + v25) + 4096) >> 13;
      int v37 = v12 - v13 + v25;
      i[4] = (unint64_t)(10033 * v31 + 4096) >> 13;
      i[5] = (unint64_t)(v36 - 19165 * (int)v25 - 1512 * v37 - v34 + 7053 * (int)v28) >> 13;
      i[6] = v30;
      i[7] = (unint64_t)(5946 * (v12 - v13) + 7053 * v35 - 1512 * v37 - v33 + 0x1FFFFFFFDC19 * v28 + 4096) >> 13;
      if (v3 != 7) {
        break;
      }
      uint64_t i = v70;
      ++v3;
    }
    if (v3 == 11) {
      break;
    }
    ++v3;
  }
  uint64_t v38 = 0;
  do
  {
    uint64_t v39 = &a1[v38];
    int v40 = a1[v38];
    int v41 = *(_DWORD *)&v70[v38 * 4 + 96];
    uint64_t v42 = v41 + v40;
    int v43 = a1[v38 + 16];
    int v44 = *(_DWORD *)&v70[v38 * 4 + 32];
    uint64_t v45 = v44 + v43;
    int v46 = a1[v38 + 24];
    int v47 = *(_DWORD *)&v70[v38 * 4];
    uint64_t v48 = v47 + v46;
    int v49 = a1[v38 + 40];
    int v50 = a1[v38 + 48];
    uint64_t v51 = v50 + v49;
    uint64_t v52 = v51 + v42;
    uint64_t v53 = v42 - v51;
    uint64_t v54 = v48 + v45;
    uint64_t v55 = v45 - v48;
    LODWORD(v42) = a1[v38 + 8];
    int v56 = *(_DWORD *)&v70[v38 * 4 + 64];
    LODWORD(v48) = v40 - v41;
    int v57 = v56 + v42;
    int v58 = v42 - v56;
    LODWORD(v42) = a1[v38 + 32];
    int v59 = v43 - v44;
    int v60 = a1[v38 + 56];
    int v61 = v60 + v42;
    int v62 = v42 - v60;
    LODWORD(v42) = v49 - v50;
    uint64_t v63 = v57 - (uint64_t)v61;
    _DWORD *v39 = (unint64_t)(7282 * (v54 + v57 + (uint64_t)v61 + v52) + 0x2000) >> 14;
    v39[48] = (unint64_t)(7282 * (v53 - (v63 + v55)) + 0x2000) >> 14;
    v39[32] = (unint64_t)(8918 * (v52 - v54) + 0x2000) >> 14;
    v39[16] = (unint64_t)(9947 * (v53 + v55) + 7282 * (v63 - v55) + 0x2000) >> 14;
    uint64_t v64 = 3941 * (v62 + (uint64_t)v58);
    uint64_t v65 = v64 + 5573 * v58;
    uint64_t v66 = v64 - 13455 * v62;
    uint64_t result = 6269 * (v46 - v47 + (uint64_t)(int)v48);
    uint64_t v68 = 8170 * (v59 + (uint64_t)(int)v48) + 0x2000;
    v39[8] = (unint64_t)(v68 + 0x3FFFFFFFEF7BLL * (int)v48 + result + v65 + 1344 * (int)v42) >> 14;
    v39[24] = (unint64_t)(v66
                               + 9514 * ((int)v48 - (uint64_t)(v46 - v47))
                               + 0x3FFFFFFFF09BLL * ((int)v42 + (uint64_t)v59)
                               + 0x2000) >> 14;
    v39[40] = (unint64_t)(v68 - 17036 * v59 - 1344 * (v46 - v47 + (uint64_t)v59) - v66 + 6269 * (int)v42) >> 14;
    v39[56] = (unint64_t)(result
                               + 5285 * (v46 - v47)
                               - 1344 * (v46 - v47 + (uint64_t)v59)
                               - v65
                               + 0x3FFFFFFFE016 * (int)v42
                               + 0x2000) >> 14;
    ++v38;
  }
  while ((v38 * 4) != 32);
  return result;
}

uint64_t sub_1003DDA24(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  uint64_t v90 = a1;
  uint64_t v91 = a3;
  while (1)
  {
    while (1)
    {
      uint64_t v93 = v3;
      uint64_t v4 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + v91);
      uint64_t v5 = *v4;
      uint64_t v6 = v4[12];
      int v7 = v4[1];
      int v8 = v4[6];
      uint64_t v9 = 2 * v4[6];
      int v10 = v6 + v5 - v9;
      int v11 = v4[11];
      int v12 = v11 + v7;
      int v13 = v11 + v7 - v9;
      int v14 = v4[2];
      int v15 = v4[10];
      int v16 = v15 + v14 - v9;
      int v17 = v4[3];
      int v18 = v4[9];
      uint64_t v19 = (v18 + v17);
      int v20 = v19 - v9;
      uint64_t v21 = v4[4];
      uint64_t v22 = v4[8];
      uint64_t v23 = (v22 + v21);
      int v24 = v23 - v9;
      uint64_t v25 = v4[5];
      uint64_t v26 = v4[7];
      uint64_t v27 = (v26 + v25);
      int v28 = v27 - v9;
      uint64_t v29 = 11249 * v10
          + 8672 * v13
          + 4108 * v16
          + 0x1FFFFFFFFA8CLL * (v19 - v9)
          + 0x1FFFFFFFE64BLL * (v23 - v9)
          + 0x1FFFFFFFD7EELL * (v27 - v9);
      int v30 = v7 - v11;
      uint64_t v31 = v21 - v22;
      uint64_t v32 = v25 - v26;
      uint64_t v33 = 9465 * (v10 - v16) - 3570 * (v20 - v24) - 2592 * (v13 - v28);
      int v34 = v27 + v12 + v6 + v5 + v15 + v14 + v19 + v23 + v8 - 1664;
      uint64_t v35 = 793 * (v10 + v16) - 7678 * (v20 + v24) + 3989 * (v13 + v28);
      uint64_t v36 = v35 + v33;
      uint64_t v37 = v33 - v35;
      uint64_t v38 = 7682 * (v17 - v18 + (int)v5 - (int)v6) + 2773 * ((int)v32 + (int)v31);
      uint64_t v39 = -2773 * (v14 - v15 + v30) + 7682 * ((int)v31 - (int)v32);
      uint64_t v40 = 10832 * (v30 + (int)v5 - (int)v6) + 4096;
      int v41 = v14 - v15 + v5 - v6;
      *a1 = v34;
      a1[1] = (unint64_t)(v40 + 0x1FFFFFFFBF5BLL * (v5 - v6) + 9534 * v41 + 2611 * (int)v31 + v38) >> 13;
      uint64_t v42 = v40 + 6859 * v30;
      int v43 = v17 - v18 + v30;
      a1[2] = (unint64_t)(v29 + 4096) >> 13;
      a1[3] = (unint64_t)(v42 - 9534 * v43 + 0x1FFFFFFFB511 * v31 + v39) >> 13;
      LODWORD(v42) = v17 - v18 + v14 - v15;
      a1[4] = (unint64_t)(v36 + 4096) >> 13;
      a1[5] = (unint64_t)(-12879 * (v14 - v15)
                               + 9534 * v41
                               - 5384 * (int)v42
                               + 18515 * (int)v32
                               + v39
                               + 4096) >> 13;
      a1[6] = (unint64_t)(v37 + 4096) >> 13;
      a1[7] = (unint64_t)(18068 * (v17 - v18)
                               - 5384 * (int)v42
                               - 9534 * v43
                               + 0x1FFFFFFFC83FLL * v32
                               + v38
                               + 4096) >> 13;
      if (v93 != 7) {
        break;
      }
      a1 = v94;
      uint64_t v3 = v93 + 1;
    }
    if (v93 == 12) {
      break;
    }
    a1 += 8;
    uint64_t v3 = v93 + 1;
  }
  uint64_t v44 = 0;
  do
  {
    uint64_t v45 = &v90[v44];
    int v46 = v90[v44];
    int v47 = *(_DWORD *)&v94[v44 * 4 + 128];
    uint64_t v48 = v47 + v46;
    int v49 = v90[v44 + 8];
    int v50 = *(_DWORD *)&v94[v44 * 4 + 96];
    int v51 = v90[v44 + 16];
    uint64_t v52 = v50 + v49;
    int v53 = *(_DWORD *)&v94[v44 * 4 + 64];
    int v54 = v90[v44 + 24];
    int v55 = *(_DWORD *)&v94[v44 * 4 + 32];
    uint64_t v56 = v53 + v51;
    uint64_t v57 = v55 + v54;
    int v58 = v90[v44 + 32];
    int v59 = *(_DWORD *)&v94[v44 * 4];
    int v60 = v90[v44 + 40];
    uint64_t v61 = v59 + v58;
    int v62 = v90[v44 + 56];
    uint64_t v63 = (int)v90[v44 + 48];
    int v64 = v46 - v47;
    int v65 = v49 - v50;
    uint64_t v66 = v62 + v60;
    int v67 = v51 - v53;
    int v68 = v54 - v55;
    uint64_t v69 = v52 + v48;
    uint64_t v70 = v56 + v57;
    uint64_t v71 = v61 + v66;
    uint64_t v72 = v48 - 2 * v63;
    uint64_t v73 = v52 - 2 * v63;
    uint64_t v74 = v56 - 2 * v63;
    uint64_t v75 = v57 - 2 * v63;
    uint64_t v76 = v61 - 2 * v63;
    uint64_t v77 = v69 + v70;
    uint64_t v78 = v66 - 2 * v63;
    uint64_t v79 = 7169 * (v72 - v74) - 2704 * (v75 - v76) - 1963 * (v73 - v78);
    uint64_t v80 = v77 + v71 + v63;
    LODWORD(v63) = v58 - v59;
    int v81 = v60 - v62;
    *uint64_t v45 = (unint64_t)(6205 * v80 + 0x2000) >> 14;
    uint64_t result = 8520 * v72 + 6568 * v73 + 3112 * v74 + 0x3FFFFFFFFBDELL * v75 + 0x3FFFFFFFEC87 * v76;
    uint64_t v83 = 601 * (v72 + v74) - 5816 * (v75 + v76) + 3021 * (v73 + v78);
    uint64_t v84 = v83 + v79;
    uint64_t v85 = 5819 * (v68 + (uint64_t)v64) + 2100 * (v81 + (uint64_t)(int)v63);
    uint64_t v86 = v79 - v83;
    uint64_t v87 = -2100 * (v67 + (uint64_t)v65) + 5819 * ((int)v63 - (uint64_t)v81);
    uint64_t v88 = 8204 * (v65 + (uint64_t)v64) + 0x2000;
    uint64_t v89 = 7221 * (v67 + (uint64_t)v64);
    v45[8] = (unint64_t)(v88 + 0x3FFFFFFFCF0ALL * v64 + v89 + 1978 * (int)v63 + v85) >> 14;
    v45[32] = (unint64_t)(v84 + 0x2000) >> 14;
    v45[24] = (unint64_t)(v88 + 5195 * v65 - 7221 * (v68 + (uint64_t)v65) + 0x3FFFFFFFC73FLL * (int)v63 + v87) >> 14;
    v45[48] = (unint64_t)(v86 + 0x2000) >> 14;
    v45[40] = (unint64_t)(v89 - 9754 * v67 - 4078 * (v68 + (uint64_t)v67) + 14023 * v81 + v87 + 0x2000) >> 14;
    v45[16] = (unint64_t)(result + 0x3FFFFFFFE1A6 * v78 + 0x2000) >> 14;
    v45[56] = (unint64_t)(-4078 * (v68 + (uint64_t)v67)
                               + 13685 * v68
                               - 7221 * (v68 + (uint64_t)v65)
                               + 0x3FFFFFFFD5C5 * v81
                               + v85
                               + 0x2000) >> 14;
    ++v44;
  }
  while ((v44 * 4) != 32);
  return result;
}

uint64_t sub_1003DDFA4(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  for (uint64_t i = a1; ; i += 8)
  {
    while (1)
    {
      uint64_t v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + a3);
      uint64_t v6 = *v5;
      uint64_t v7 = v5[13];
      uint64_t v8 = v5[1];
      uint64_t v9 = v5[12];
      uint64_t v10 = (v9 + v8);
      uint64_t v11 = v5[2];
      uint64_t v12 = v5[11];
      uint64_t v13 = (v12 + v11);
      int v14 = v5[4];
      int v15 = v5[9];
      uint64_t v16 = (v15 + v14);
      uint64_t v17 = v5[5];
      uint64_t v18 = v5[8];
      uint64_t v19 = (v18 + v17);
      uint64_t v20 = v5[6];
      uint64_t v21 = v5[7];
      int v22 = v21 + v20 + v7 + v6;
      int v23 = v7 + v6 - (v21 + v20);
      int v24 = v19 + v10;
      uint64_t v25 = v10 - v19;
      uint64_t v26 = v16 + v13;
      uint64_t v27 = v13 - v16;
      uint64_t v28 = v6 - v7;
      uint64_t v29 = v8 - v9;
      uint64_t v30 = v5[3];
      uint64_t v31 = v5[10];
      uint64_t v32 = v11 - v12;
      LODWORD(v12) = v31 + v30;
      uint64_t v33 = v30 - v31;
      LODWORD(v11) = v14 - v15;
      uint64_t v34 = v17 - v18;
      LODWORD(v8) = v12 + v24 + v26 + v22;
      uint64_t v35 = 9058 * (v23 + (int)v25) + 4096;
      unint64_t v36 = v35 + 5027 * (int)v27 + 2237 * v23;
      LODWORD(v17) = v17 - v18 - v11;
      i[6] = (unint64_t)(v35 + 0x1FFFFFFFD3E1 * v27 + 0x1FFFFFFFC8FCLL * v25) >> 13;
      i[7] = v28 + v33 - (v20 - v21) - (v32 + v29 + v17);
      uint64_t v37 = v33 << 13;
      uint64_t v38 = 11512 * (int)v17 - (v33 << 13) - 1297 * ((int)v32 + (int)v29);
      uint64_t v39 = 9810 * ((int)v32 + (int)v28) + 6164 * ((int)v20 - (int)v21 + (int)v11);
      v38 += 4096;
      i[4] = (0x1FFFFFFFE3C9 * (v26 - (unint64_t)(2 * v12))
            + 2578 * (v24 - 2 * (int)v12)
            + 10438 * (v22 - 2 * (int)v12)
            + 4096) >> 13;
      i[5] = (unint64_t)(v38 + 0x1FFFFFFFB409 * v32 + 9175 * (int)v11 + v39) >> 13;
      uint64_t v40 = 10935 * ((int)v29 + (int)v28) + 3826 * ((int)v34 - ((int)v20 - (int)v21));
      i[2] = v36 >> 13;
      i[3] = (unint64_t)(v38 + 0x1FFFFFFFF26ELL * v29 + 0x1FFFFFFF9DC4 * v34 + v40) >> 13;
      *uint64_t i = v8 - 1792;
      i[1] = (unint64_t)(v40 + v37 + v20 - v21 + 0x1FFFFFFFDBF0 * (v20 - v21 + v28) + v39 + 4096) >> 13;
      if (v3 != 7) {
        break;
      }
      uint64_t i = v83;
      ++v3;
    }
    if (v3 == 13) {
      break;
    }
    ++v3;
  }
  uint64_t v41 = 0;
  do
  {
    uint64_t v42 = &a1[v41];
    int v43 = a1[v41];
    int v44 = *(_DWORD *)&v83[v41 * 4 + 160];
    uint64_t v45 = v44 + v43;
    int v46 = a1[v41 + 8];
    int v47 = *(_DWORD *)&v83[v41 * 4 + 128];
    int v48 = a1[v41 + 16];
    int v49 = *(_DWORD *)&v83[v41 * 4 + 96];
    uint64_t v50 = v47 + v46;
    uint64_t v51 = v49 + v48;
    int v52 = a1[v41 + 32];
    int v53 = *(_DWORD *)&v83[v41 * 4 + 32];
    uint64_t v54 = v53 + v52;
    int v55 = a1[v41 + 40];
    int v56 = a1[v41 + 48];
    int v57 = a1[v41 + 56];
    uint64_t v58 = *(_DWORD *)&v83[v41 * 4] + v55;
    uint64_t v59 = v57 + v56;
    uint64_t v60 = v59 + v45;
    uint64_t v61 = v45 - v59;
    uint64_t v62 = v58 + v50;
    uint64_t v63 = v50 - v58;
    uint64_t v64 = v54 + v51;
    uint64_t v65 = v51 - v54;
    LODWORD(v51) = v43 - v44;
    int v66 = a1[v41 + 24];
    int v67 = *(_DWORD *)&v83[v41 * 4 + 64];
    int v68 = v67 + v66;
    int v69 = v66 - v67;
    uint64_t v70 = (int)v51;
    uint64_t v71 = v46 - v47;
    uint64_t v72 = v48 - v49;
    uint64_t v73 = v52 - v53;
    uint64_t v74 = v55 - *(_DWORD *)&v83[v41 * 4];
    uint64_t v75 = v56 - v57;
    _DWORD *v42 = (unint64_t)(5350 * (v64 + v68 + v62 + v60) + 0x2000) >> 14;
    uint64_t v76 = 5915 * (v61 + v63) + 0x2000;
    v42[56] = (unint64_t)(5350 * ((int)v51 + (uint64_t)v69 - (v72 + v71 + v74 - v73 + v75)) + 0x2000) >> 14;
    unint64_t v77 = v76 + 0x3FFFFFFFE330 * v65 + 0x3FFFFFFFDC12 * v63;
    v42[16] = (unint64_t)(v76 + 3283 * v65 + 1461 * v61) >> 14;
    uint64_t v78 = 7518 * (v74 - v73) - 5350 * v69 - 847 * (v72 + v71) + 0x2000;
    v42[48] = v77 >> 14;
    v42[32] = (unint64_t)(1684 * (v62 - 2 * v68)
                               + 0x3FFFFFFFED93 * (v64 - 2 * v68)
                               + 6817 * (v60 - 2 * v68)
                               + 0x2000) >> 14;
    uint64_t v79 = 7141 * (v71 + (int)v51) + 2499 * (v74 - v75);
    uint64_t result = v79 + 0x3FFFFFFFE873 * (int)v51 + 5350 * v69 + 0x3FFFFFFFFD59 * v75;
    uint64_t v81 = 6406 * (v72 + v70) + 4025 * (v75 + v73);
    v42[40] = (unint64_t)(v78 + 0x3FFFFFFFCE64 * v72 + 5992 * v73 + v81) >> 14;
    v42[24] = (unint64_t)(v78 + 0x3FFFFFFFF723 * v71 + 0x3FFFFFFFBFD9 * v74 + v79) >> 14;
    v42[8] = (unint64_t)(result + v81 + 0x2000) >> 14;
    ++v41;
  }
  while ((v41 * 4) != 32);
  return result;
}

uint64_t sub_1003DE46C(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  for (uint64_t i = a1; ; i += 8)
  {
    while (1)
    {
      uint64_t v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + a3);
      uint64_t v6 = *v5;
      uint64_t v7 = v5[14];
      uint64_t v8 = (v7 + v6);
      int v9 = v5[1];
      int v10 = v5[13];
      uint64_t v11 = (v10 + v9);
      uint64_t v12 = v5[2];
      uint64_t v13 = v5[12];
      uint64_t v14 = (v13 + v12);
      uint64_t v15 = v5[3];
      uint64_t v16 = v5[11];
      uint64_t v17 = (v16 + v15);
      uint64_t v18 = v5[4];
      uint64_t v19 = v5[10];
      uint64_t v20 = (v19 + v18);
      uint64_t v21 = v5[5];
      uint64_t v22 = v5[9];
      uint64_t v23 = (v22 + v21);
      uint64_t v24 = v6 - v7;
      uint64_t v25 = v5[6];
      int v26 = v9 - v10;
      uint64_t v27 = v5[8];
      uint64_t v28 = (v27 + v25);
      uint64_t v29 = v5[7];
      uint64_t v30 = v15 - v16;
      uint64_t v31 = v25 - v27;
      uint64_t v32 = v20 + v8 + v23;
      uint64_t v33 = v17 + v11 + v28;
      LODWORD(v27) = v29 + v14 + v32 + v33;
      uint64_t v34 = 0x1FFFFFFFF204 * (v33 - 2 * (v29 + v14)) + 9373 * (v32 - 2 * (v29 + v14));
      uint64_t v35 = v14 - 2 * v29 + ((unint64_t)(v20 + v11) >> 1);
      uint64_t v36 = 11332 * ((int)v8 - (int)v17) + 6476 * ((int)v11 - (int)v20) + 7752 * ((int)v28 - (int)v23) + 4096;
      unint64_t v37 = v36 + 12543 * (v17 - v35) + 0x1FFFFFFFB860 * (v28 - v35);
      unint64_t v38 = v36 + 6541 * (v23 - v35) + 0x1FFFFFFFFD14 * (v8 - v35);
      uint64_t v39 = 11018 * ((int)v18 - (int)v19 + v26)
          + 4712 * ((int)v21 - (int)v22 + (int)v30)
          + 11522 * ((int)v24 - (int)v31);
      *uint64_t i = v27 - 1920;
      i[1] = (unint64_t)(3897 * (int)v30
                              + 10033 * ((int)v12 - (int)v13)
                              + 0x1FFFFFFFEF8FLL * (v18 - v19)
                              + 13930 * (int)v31
                              + v39
                              + 4096) >> 13;
      i[2] = v37 >> 13;
      i[3] = (unint64_t)(6810 * (v26 - ((int)v30 + (int)v31))
                              + 11018 * ((int)v24 - ((int)v18 - (int)v19 + (int)v21 - (int)v22))
                              + 4096) >> 13;
      i[4] = v38 >> 13;
      i[5] = (unint64_t)(10033 * (v24 - (v12 - v13 + v30) + v21 - v22 + v31) + 4096) >> 13;
      i[6] = (unint64_t)(v34 + 4096) >> 13;
      i[7] = (unint64_t)(-17828 * v26
                              - 2912 * (int)v24
                              - 10033 * ((int)v12 - (int)v13)
                              + 0x1FFFFFFFE42FLL * (v21 - v22)
                              + v39
                              + 4096) >> 13;
      if (v3 != 7) {
        break;
      }
      uint64_t i = v84;
      ++v3;
    }
    if (v3 == 14) {
      break;
    }
    ++v3;
  }
  uint64_t v40 = 0;
  do
  {
    uint64_t v41 = &a1[v40];
    int v42 = a1[v40];
    int v43 = *(_DWORD *)&v84[v40 * 4 + 192];
    uint64_t v44 = v43 + v42;
    int v45 = a1[v40 + 8];
    int v46 = *(_DWORD *)&v84[v40 * 4 + 160];
    int v47 = a1[v40 + 16];
    int v48 = *(_DWORD *)&v84[v40 * 4 + 128];
    uint64_t v49 = v46 + v45;
    uint64_t v50 = v48 + v47;
    int v51 = a1[v40 + 24];
    int v52 = *(_DWORD *)&v84[v40 * 4 + 96];
    uint64_t v53 = v52 + v51;
    int v54 = a1[v40 + 32];
    int v55 = *(_DWORD *)&v84[v40 * 4 + 64];
    int v56 = a1[v40 + 40];
    int v57 = *(_DWORD *)&v84[v40 * 4 + 32];
    uint64_t v58 = v55 + v54;
    int v59 = a1[v40 + 48];
    int v60 = *(_DWORD *)&v84[v40 * 4];
    int v61 = v42 - v43;
    int v62 = v60 + v59;
    uint64_t v63 = v57 + v56;
    int v64 = v45 - v46;
    uint64_t v65 = (int)a1[v40 + 56];
    int v66 = v47 - v48;
    int v67 = v51 - v52;
    int v68 = v54 - v55;
    int v69 = v56 - v57;
    int v70 = v59 - v60;
    uint64_t v71 = v58 + v44 + v63;
    uint64_t v72 = v53 + v49 + v62;
    uint64_t v73 = 2 * (v65 + v50);
    uint64_t v74 = v72 + v71 + v65 + v50;
    uint64_t v75 = v50 - 2 * v65 + ((v58 + v49) >> 1);
    uint64_t v76 = v53 - v75;
    *uint64_t v41 = (unint64_t)(9321 * v74 + 0x4000) >> 15;
    v41[48] = (unint64_t)(0x7FFFFFFFF017 * (v72 - v73) + 10664 * (v71 - v73) + 0x4000) >> 15;
    uint64_t v77 = 12893 * (v44 - v53) + 7369 * (v49 - v58) + 8820 * (v62 - v63) + 0x4000;
    unint64_t v78 = v77 + 14271 * v76 + 0x7FFFFFFFAE82 * (v62 - v75);
    unint64_t v79 = v77 + 7442 * (v63 - v75) + 0x7FFFFFFFFCACLL * (v44 - v75);
    uint64_t result = 4434 * v67 + 11415 * v66 + 0x7FFFFFFFED4CLL * v68;
    uint64_t v81 = 12536 * (v68 + (uint64_t)v64) + 5361 * (v69 + (uint64_t)v67) + 13109 * (v61 - (uint64_t)v70);
    v41[8] = (unint64_t)(result + 15850 * v70 + v81 + 0x4000) >> 15;
    v41[24] = (unint64_t)(7748 * (v64 - (v67 + (uint64_t)v70)) + 12536 * (v61 - (v68 + (uint64_t)v69)) + 0x4000) >> 15;
    v41[40] = (unint64_t)(11415 * (v61 - (v67 + (uint64_t)v66) + v69 + (uint64_t)v70) + 0x4000) >> 15;
    v41[16] = v78 >> 15;
    v41[32] = v79 >> 15;
    v41[56] = (unint64_t)(-20284 * v64 - 3314 * v61 - 11415 * v66 + 0x7FFFFFFFE05ALL * v69 + v81 + 0x4000) >> 15;
    ++v40;
  }
  while ((v40 * 4) != 32);
  return result;
}

uint64_t sub_1003DE980(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  uint64_t v81 = a3;
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * v4) + v81);
      uint64_t v85 = *v5;
      uint64_t v87 = v5[15];
      uint64_t v89 = v4;
      uint64_t v6 = (v87 + v85);
      int v83 = v5[1];
      int v7 = v5[14];
      int v8 = v5[2];
      int v9 = v5[13];
      int v10 = v5[3];
      int v11 = v5[12];
      uint64_t v12 = (v11 + v10);
      int v13 = v5[4];
      int v14 = v5[11];
      uint64_t v15 = (v14 + v13);
      int v16 = v5[5];
      int v17 = v5[10];
      uint64_t v18 = v5[6];
      int v19 = v5[7];
      int v20 = v5[8];
      uint64_t v21 = (v20 + v19);
      int v22 = v21 + v6;
      uint64_t v23 = v5[9];
      LODWORD(v5) = v23 + v18 + v7 + v83;
      int v24 = v17 + v16 + v9 + v8;
      uint64_t v25 = 10703 * ((int)v21 + (int)v6 - ((int)v15 + (int)v12)) + 4433 * ((int)v5 - v24);
      uint64_t v26 = v6 - v21;
      int v27 = v7 + v83 - (v23 + v18);
      int v28 = v9 + v8 - (v17 + v16);
      LODWORD(v6) = v83 - v7;
      int v29 = v8 - v9;
      uint64_t v30 = 2260 * ((int)v12 - (int)v15 - v27) + 11363 * ((int)v26 - v28) + 1024;
      unint64_t v31 = v30 + 17799 * v28 + 11893 * v27;
      int v32 = v10 - v11;
      uint64_t v33 = v18 - v23;
      int v34 = v24 + v15 + v12 + v5 + v22;
      unint64_t v35 = v30 + 0x7FFFFFFDE07 * (v12 - v15) + 0x7FFFFFFF93ELL * v26;
      uint64_t v36 = 11086 * ((int)v6 + (int)v85 - (int)v87) + 3363 * ((int)v33 - (v19 - v20));
      uint64_t v37 = 10217 * (v29 + (int)v85 - (int)v87) + 5461 * (v19 - v20 + v16 - v17);
      uint64_t v38 = 8956 * (v10 - v11 + (int)v85 - (int)v87) + 7350 * (v13 - v14 - (v19 - v20));
      uint64_t v39 = 1136 * (v29 + (int)v6) + 11529 * ((int)v33 - (v16 - v17));
      uint64_t v40 = -5461 * (v10 - v11 + (int)v6) - 10217 * ((int)v33 + v13 - v14);
      uint64_t v41 = -11086 * (v10 - v11 + v29) + 3363 * (v16 - v17 - (v13 - v14));
      *uint64_t v3 = 4 * v34 - 0x2000;
      v3[1] = (unint64_t)(v37 + 0x7FFFFFFB6D6 * (v85 - v87) + 6387 * (v19 - v20) + v36 + v38 + 1024) >> 11;
      v3[2] = v31 >> 11;
      v3[3] = (unint64_t)(v40 + 589 * (int)v6 + 0x7FFFFFFCAC1 * v33 + v39 + v36 + 1024) >> 11;
      v3[4] = (unint64_t)(v25 + 1024) >> 11;
      v3[5] = (unint64_t)(v41 + 1024 - 9222 * v29 + 10055 * (v16 - v17) + v39 + v37) >> 11;
      v3[6] = v35 >> 11;
      v3[7] = (unint64_t)(v41 + 1024 + 8728 * v32 + 17760 * (v13 - v14) + v40 + v38) >> 11;
      if (v89 != 7) {
        break;
      }
      uint64_t v3 = v91;
      uint64_t v4 = v89 + 1;
    }
    if (v89 == 15) {
      break;
    }
    v3 += 8;
    uint64_t v4 = v89 + 1;
  }
  uint64_t v42 = 0;
  do
  {
    int v43 = &a1[v42];
    int v88 = a1[v42];
    int v90 = *(_DWORD *)&v91[v42 * 4 + 224];
    uint64_t v44 = v90 + v88;
    int v84 = a1[v42 + 8];
    int v86 = *(_DWORD *)&v91[v42 * 4 + 192];
    uint64_t v45 = v86 + v84;
    int v46 = a1[v42 + 16];
    int v47 = *(_DWORD *)&v91[v42 * 4 + 160];
    uint64_t v48 = v47 + v46;
    int v49 = a1[v42 + 24];
    int v50 = *(_DWORD *)&v91[v42 * 4 + 128];
    uint64_t v51 = v50 + v49;
    int v52 = a1[v42 + 32];
    int v53 = *(_DWORD *)&v91[v42 * 4 + 96];
    uint64_t v54 = v53 + v52;
    int v55 = a1[v42 + 40];
    int v56 = *(_DWORD *)&v91[v42 * 4 + 64];
    uint64_t v57 = v56 + v55;
    int v58 = a1[v42 + 48];
    int v59 = a1[v42 + 56];
    int v60 = *(_DWORD *)&v91[v42 * 4];
    uint64_t v61 = v60 + v59;
    uint64_t v62 = v61 + v44;
    int v63 = *(_DWORD *)&v91[v42 * 4 + 32];
    uint64_t v64 = v63 + v58;
    uint64_t v65 = v64 + v45;
    uint64_t v66 = 10703 * (v61 + v44 - (v54 + v51)) + 4433 * (v64 + v45 - (v57 + v48));
    uint64_t v67 = v44 - v61;
    uint64_t v68 = v45 - v64;
    int v69 = v46 - v47;
    LODWORD(v44) = v52 - v53;
    uint64_t v70 = v88 - v90;
    _DWORD *v43 = (unint64_t)(v54 + v51 + v57 + v48 + v65 + v62 + 8) >> 4;
    v43[32] = (unint64_t)(v66 + 0x10000) >> 17;
    uint64_t v71 = v58 - v63;
    uint64_t v72 = 2260 * (v51 - v54 - v68) + 11363 * (v67 - (v48 - v57)) + 0x10000;
    uint64_t v73 = v59 - v60;
    v43[16] = (unint64_t)(v72 + 17799 * (v48 - v57) + 11893 * v68) >> 17;
    v43[48] = (unint64_t)(v72 + 0x1FFFFFFFFDE07 * (v51 - v54) + 0x1FFFFFFFFF93ELL * v67) >> 17;
    uint64_t v74 = 11086 * (v84 - v86 + v70) + 3363 * (v71 - v73);
    uint64_t result = 10217 * (v69 + v70) + 5461 * (v73 + v55 - v56);
    uint64_t v76 = 8956 * (v49 - v50 + v70) + 7350 * ((int)v44 - v73);
    uint64_t v77 = 1136 * (v69 + (uint64_t)(v84 - v86)) + 11529 * (v71 - (v55 - v56));
    uint64_t v78 = -5461 * (v49 - v50 + (uint64_t)(v84 - v86)) - 10217 * (v71 + (int)v44);
    v43[8] = (unint64_t)(result + 0x1FFFFFFFFB6D6 * v70 + 6387 * (v59 - v60) + v74 + v76 + 0x10000) >> 17;
    v43[24] = (unint64_t)(v78 + 589 * (v84 - v86) + 0x1FFFFFFFFCAC1 * v71 + v77 + v74 + 0x10000) >> 17;
    uint64_t v79 = -11086 * (v49 - v50 + (uint64_t)v69) + 3363 * (v55 - v56 - (uint64_t)(int)v44) + 0x10000;
    v43[40] = (unint64_t)(v79 - 9222 * v69 + 10055 * (v55 - v56) + v77 + result) >> 17;
    v43[56] = (unint64_t)(v79 + 8728 * (v49 - v50) + 17760 * (int)v44 + v78 + v76) >> 17;
    ++v42;
  }
  while ((v42 * 4) != 32);
  return result;
}

uint64_t sub_1003DEF64(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3;
  do
  {
    uint64_t v5 = (unsigned __int8 *)(*(void *)(a2 + v3) + v4);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[15];
    uint64_t v8 = (v7 + v6);
    int v9 = v5[1];
    int v10 = v5[14];
    int v11 = v5[2];
    int v12 = v5[13];
    int v13 = v5[3];
    int v14 = v5[5];
    int v15 = v5[10];
    uint64_t v16 = v5[6];
    uint64_t v17 = v5[9];
    int v18 = v5[7];
    int v19 = v5[8];
    uint64_t v20 = (v19 + v18);
    int v21 = v20 + v8;
    uint64_t v22 = v8 - v20;
    int v23 = v17 + v16 + v10 + v9;
    int v24 = v10 + v9 - (v17 + v16);
    int v25 = v15 + v14 + v12 + v11;
    int v26 = v12 + v11 - (v15 + v14);
    LODWORD(v8) = v5[12];
    uint64_t v27 = v6 - v7;
    int v28 = v5[4];
    LODWORD(v7) = v9 - v10;
    uint64_t v29 = (v8 + v13);
    int v30 = v5[11];
    LODWORD(v6) = v11 - v12;
    uint64_t v31 = (v30 + v28);
    LODWORD(v5) = v13 - v8;
    uint64_t v32 = v29 - v31;
    LODWORD(v29) = v31 + v29;
    uint64_t v33 = v16 - v17;
    int v34 = v18 - v19;
    uint64_t v35 = 11086 * ((int)v7 + (int)v27) + 3363 * ((int)v16 - (int)v17 - v34);
    int v36 = v28 - v30;
    LODWORD(v31) = v14 - v15;
    uint64_t v37 = 10703 * (v21 - (int)v29) + 4433 * (v23 - v25);
    int v38 = v25 + v29 + v23 + v21;
    uint64_t v39 = 2260 * ((int)v32 - v24) + 11363 * ((int)v22 - v26) + 1024;
    uint64_t v40 = v39 + 17799 * v26;
    uint64_t v41 = 10217 * ((int)v6 + (int)v27) + 5461 * (v34 + (int)v31);
    uint64_t v42 = 8956 * ((int)v5 + (int)v27) + 7350 * (v36 - v34);
    uint64_t v43 = v39 + 0x7FFFFFFDE07 * v32;
    uint64_t v44 = 1136 * ((int)v6 + (int)v7) + 11529 * ((int)v33 - (int)v31);
    unint64_t v45 = v40 + 11893 * v24;
    uint64_t v46 = -5461 * ((int)v5 + (int)v7) - 10217 * ((int)v33 + v36);
    uint64_t v47 = v41 + 0x7FFFFFFB6D6 * v27 + 6387 * v34 + v35 + v42;
    uint64_t v48 = v46 + 589 * (int)v7 + 0x7FFFFFFCAC1 * v33 + v44 + v35;
    uint64_t v49 = -11086 * ((int)v5 + (int)v6) + 3363 * ((int)v31 - v36) + 1024;
    int v50 = (_DWORD *)(result + 4 * v3);
    v50[4] = (unint64_t)(v37 + 1024) >> 11;
    v50[5] = (unint64_t)(v49 - 9222 * (int)v6 + 10055 * (int)v31 + v44 + v41) >> 11;
    *int v50 = 4 * v38 - 0x2000;
    v50[1] = (unint64_t)(v47 + 1024) >> 11;
    v50[2] = v45 >> 11;
    v50[3] = (unint64_t)(v48 + 1024) >> 11;
    v50[6] = (unint64_t)(v43 + 0x7FFFFFFF93ELL * v22) >> 11;
    v50[7] = (unint64_t)(v49 + 8728 * (int)v5 + 17760 * v36 + v46 + v42) >> 11;
    v3 += 8;
  }
  while (v3 != 64);
  uint64_t v51 = 0;
  do
  {
    int v52 = (_DWORD *)(result + v51);
    int v53 = *(_DWORD *)(result + v51);
    int v54 = *(_DWORD *)(result + v51 + 224);
    uint64_t v55 = v54 + v53;
    int v56 = *(_DWORD *)(result + v51 + 32);
    int v57 = *(_DWORD *)(result + v51 + 192);
    uint64_t v58 = v57 + v56;
    int v59 = *(_DWORD *)(result + v51 + 64);
    int v60 = *(_DWORD *)(result + v51 + 160);
    uint64_t v61 = v60 + v59;
    int v62 = *(_DWORD *)(result + v51 + 96);
    int v63 = *(_DWORD *)(result + v51 + 128);
    uint64_t v64 = v63 + v62;
    uint64_t v65 = v64 + v55;
    uint64_t v66 = v55 - v64;
    uint64_t v67 = v61 + v58;
    uint64_t v68 = v58 - v61;
    int v69 = v53 - v54;
    int v70 = v56 - v57;
    uint64_t v71 = v59 - v60;
    uint64_t v72 = v62 - v63;
    _DWORD *v52 = (unint64_t)(v67 + v65 + 4) >> 3;
    v52[32] = (unint64_t)(v65 - v67 + 4) >> 3;
    uint64_t v73 = 4433 * (v66 + v68) + 0x8000;
    v52[16] = (unint64_t)(v73 + 6270 * v66) >> 16;
    v52[48] = (unint64_t)(v73 + 0xFFFFFFFFC4DFLL * v68) >> 16;
    uint64_t v74 = v71 + v69;
    uint64_t v75 = v72 + v70;
    uint64_t v76 = 9633 * (v75 + v74);
    uint64_t v77 = v76 - 3196 * v74;
    uint64_t v78 = v76 - 16069 * v75;
    uint64_t v79 = -7373 * (v72 + v69) + 0x8000;
    v52[8] = (unint64_t)(v79 + 12299 * v69 + v77) >> 16;
    uint64_t v80 = -20995 * (v71 + v70) + 0x8000;
    v52[24] = (unint64_t)(v80 + 25172 * v70 + v78) >> 16;
    v52[40] = (unint64_t)(v80 + 16819 * v71 + v77) >> 16;
    v52[56] = (unint64_t)(v79 + 2446 * v72 + v78) >> 16;
    v51 += 4;
  }
  while (v51 != 32);
  return result;
}

uint64_t sub_1003DF360(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  do
  {
    uint64_t v4 = (unsigned __int8 *)(*(void *)(a2 + v3) + a3);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[13];
    uint64_t v7 = v4[1];
    uint64_t v8 = v4[12];
    uint64_t v9 = v4[2];
    uint64_t v10 = v4[11];
    uint64_t v11 = (v8 + v7);
    uint64_t v12 = v4[3];
    uint64_t v13 = v4[5];
    uint64_t v14 = v4[8];
    uint64_t v15 = v4[6];
    uint64_t v16 = v4[7];
    uint64_t v17 = (v14 + v13);
    int v18 = v16 + v15 + v6 + v5;
    int v19 = v6 + v5 - (v16 + v15);
    int v20 = v17 + v11;
    uint64_t v21 = v11 - v17;
    uint64_t v22 = (v10 + v9);
    uint64_t v23 = v5 - v6;
    uint64_t v24 = v4[10];
    uint64_t v25 = v7 - v8;
    LODWORD(v7) = v4[4];
    uint64_t v26 = v9 - v10;
    LODWORD(v10) = v24 + v12;
    LODWORD(v4) = v4[9];
    uint64_t v27 = v12 - v24;
    uint64_t v28 = (v4 + v7);
    LODWORD(v4) = v7 - v4;
    uint64_t v29 = v28 + v22;
    uint64_t v30 = v22 - v28;
    uint64_t v31 = v13 - v14;
    uint64_t v32 = v15 - v16;
    uint64_t v33 = (2 * v10);
    LODWORD(v10) = v10 + v20 + v29 + v18;
    uint64_t v34 = 9058 * (v19 + (int)v21) + 1024;
    uint64_t v35 = 0x7FFFFFFE3C9 * (v29 - v33) + 2578 * (v20 - (int)v33) + 10438 * (v18 - (int)v33);
    uint64_t v36 = v34 + 0x7FFFFFFD3E1 * v30;
    int v37 = v23 + v27 - v32 - (v26 + v25 + v31 - v4);
    v27 <<= 13;
    unint64_t v38 = v34 + 5027 * (int)v30 + 2237 * v19;
    uint64_t v39 = 9810 * ((int)v26 + (int)v23) + 6164 * ((int)v32 + (int)v4);
    uint64_t v40 = 10935 * ((int)v25 + (int)v23) + 3826 * ((int)v31 - (int)v32);
    uint64_t v41 = 11512 * ((int)v31 - (int)v4) - v27 - 1297 * ((int)v26 + (int)v25) + 1024;
    uint64_t v42 = (_DWORD *)(result + 4 * v3);
    v42[6] = (unint64_t)(v36 + 0x7FFFFFFC8FCLL * v21) >> 11;
    v42[7] = 4 * v37;
    v42[4] = (unint64_t)(v35 + 1024) >> 11;
    v42[5] = (unint64_t)(v41 + 0x7FFFFFFB409 * v26 + 9175 * (int)v4 + v39) >> 11;
    _OWORD v42[2] = v38 >> 11;
    v42[3] = (unint64_t)(v41 + 0x7FFFFFFF26ELL * v25 + 0x7FFFFFF9DC4 * v31 + v40) >> 11;
    _DWORD *v42 = 4 * v10 - 7168;
    v42[1] = (unint64_t)(v40 + v27 + v32 + 0x7FFFFFFDBF0 * (v32 + v23) + v39 + 1024) >> 11;
    v3 += 8;
  }
  while (v3 != 56);
  uint64_t v43 = 0;
  do
  {
    uint64_t v44 = (_DWORD *)(result + v43);
    int v45 = *(_DWORD *)(result + v43);
    int v46 = *(_DWORD *)(result + v43 + 192);
    uint64_t v47 = v46 + v45;
    int v48 = *(_DWORD *)(result + v43 + 32);
    int v49 = *(_DWORD *)(result + v43 + 160);
    uint64_t v50 = v49 + v48;
    int v51 = *(_DWORD *)(result + v43 + 64);
    int v52 = *(_DWORD *)(result + v43 + 128);
    uint64_t v53 = v52 + v51;
    uint64_t v54 = *(int *)(result + v43 + 96);
    uint64_t v55 = v45 - v46;
    uint64_t v56 = v48 - v49;
    int v57 = v51 - v52;
    _DWORD *v44 = (unint64_t)(10700 * (v54 + v50 + v53 + v47) + 0x8000) >> 16;
    uint64_t v58 = 3783 * (v53 + v47 - 4 * v54);
    uint64_t v59 = 9850 * (v47 - v53);
    uint64_t v60 = 3367 * (v50 - v53);
    v44[16] = (unint64_t)(v60 + v59 + v58 + 0x8000) >> 16;
    uint64_t v61 = 9434 * (v47 - v50) + 0x8000;
    v44[32] = (unint64_t)(v61 + v60 + 0xFFFFFFFFE272 * (v50 - 2 * v54)) >> 16;
    v44[48] = (unint64_t)(v61 - v59 + v58) >> 16;
    uint64_t v62 = 10009 * (v56 + v55);
    uint64_t v63 = 1822 * (v55 - v56);
    uint64_t v64 = -14752 * (v57 + v56);
    uint64_t v65 = 6565 * (v57 + v55) + 0x8000;
    v44[8] = (unint64_t)(v65 - v63 + v62) >> 16;
    v44[24] = (unint64_t)(v64 + v63 + v62 + 0x8000) >> 16;
    v44[40] = (unint64_t)(v65 + 20017 * v57 + v64) >> 16;
    v43 += 4;
  }
  while (v43 != 32);
  return result;
}

_OWORD *sub_1003DF6F8(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  do
  {
    uint64_t v4 = (unsigned __int8 *)(*(void *)(a2 + v3 * 4) + a3);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[11];
    int v7 = v4[1];
    uint64_t v8 = v4[2];
    uint64_t v9 = v4[9];
    uint64_t v10 = (v9 + v8);
    int v11 = v4[3];
    int v12 = v4[8];
    uint64_t v13 = (v12 + v11);
    uint64_t v14 = v4[5];
    uint64_t v15 = v4[6];
    int v16 = v15 + v14 + v6 + v5;
    int v17 = v6 + v5 - (v15 + v14);
    int v18 = v13 + v10;
    uint64_t v19 = v10 - v13;
    int v20 = v4[10];
    uint64_t v21 = v5 - v6;
    uint64_t v22 = (v20 + v7);
    int v23 = v7 - v20;
    uint64_t v24 = v8 - v9;
    LODWORD(v6) = v4[4];
    LODWORD(v4) = v4[7];
    uint64_t v25 = (v4 + v6);
    LODWORD(v9) = v6 - v4;
    uint64_t v26 = &result[v3];
    uint64_t v27 = v14 - v15;
    uint64_t v28 = v22 - v25;
    LODWORD(v8) = 4 * (v18 + v22 + v25 + v16) - 6144;
    LODWORD(v25) = v17 - (v22 - v25 + v19);
    LODWORD(v15) = v16 - v18;
    uint64_t v29 = v28 - v19 + 11190 * (v17 + (int)v19);
    uint64_t v30 = 6270 * v23 + 4433 * ((int)v9 + v23);
    uint64_t v31 = -15137 * (int)v9 + 4433 * ((int)v9 + v23);
    LODWORD(v22) = v11 - v12 + v21;
    uint64_t v32 = 9191 * ((int)v24 + (int)v21) + 1024;
    *uint64_t v26 = v8;
    v26[1] = (unint64_t)(v32 + 0x7FFFFFFED6ALL * v21 + 7053 * (int)v22 + v30 + 1512 * (int)v27) >> 11;
    v26[2] = (unint64_t)(v29 + 1024) >> 11;
    v26[3] = (unint64_t)(v31 + 10703 * ((int)v21 - (v11 - v12)) + 0x7FFFFFFEEAFLL * (v27 + v24) + 1024) >> 11;
    int v33 = v11 - v12 + v24;
    v26[4] = (unint64_t)(10033 * (int)v15 + 1024) >> 11;
    v26[5] = (unint64_t)(v32 - 19165 * (int)v24 - 1512 * v33 - v31 + 7053 * (int)v27) >> 11;
    v26[6] = 4 * v25;
    v26[7] = (unint64_t)(5946 * (v11 - v12)
                              + 7053 * (int)v22
                              - 1512 * v33
                              - v30
                              + 0x7FFFFFFDC19 * v27
                              + 1024) >> 11;
    v3 += 2;
  }
  while (v3 != 12);
  uint64_t v34 = 0;
  do
  {
    uint64_t v35 = (_DWORD *)((char *)result + v34);
    int v36 = *(_DWORD *)((char *)result + v34);
    int v37 = *(_DWORD *)((char *)result + v34 + 160);
    uint64_t v38 = v37 + v36;
    int v39 = *(_DWORD *)((char *)result + v34 + 32);
    int v40 = *(_DWORD *)((char *)result + v34 + 128);
    int v41 = v40 + v39;
    int v42 = *(_DWORD *)((char *)result + v34 + 64);
    int v43 = *(_DWORD *)((char *)result + v34 + 96);
    uint64_t v44 = v43 + v42;
    uint64_t v45 = v36 - v37;
    uint64_t v46 = v39 - v40;
    uint64_t v47 = v42 - v43;
    *uint64_t v35 = (unint64_t)(14564 * (v44 + v38 + v41) + 0x8000) >> 16;
    v35[16] = (unint64_t)(17837 * (v38 - v44) + 0x8000) >> 16;
    v35[32] = (unint64_t)(10298 * (v44 + v38 - 2 * v41) + 0x8000) >> 16;
    uint64_t v48 = 5331 * (v47 + v45) + 0x8000;
    v35[8] = (unint64_t)(v48 + 14564 * (v46 + v45)) >> 16;
    v35[24] = (unint64_t)(14564 * (v45 - (v46 + v47)) + 0x8000) >> 16;
    v35[40] = (unint64_t)(v48 + 14564 * (v47 - v46)) >> 16;
    v34 += 4;
  }
  while (v34 != 32);
  return result;
}

_OWORD *sub_1003DF9CC(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  do
  {
    uint64_t v4 = (unsigned __int8 *)(*(void *)(a2 + v3 * 4) + a3);
    int v5 = *v4;
    int v6 = v4[9];
    uint64_t v7 = v4[1];
    uint64_t v8 = v4[8];
    uint64_t v9 = (v8 + v7);
    uint64_t v10 = v4[3];
    uint64_t v11 = v4[6];
    uint64_t v12 = (v11 + v10);
    int v13 = v4[4];
    int v14 = v4[5];
    int v15 = v14 + v13 + v6 + v5;
    int v16 = v6 + v5 - (v14 + v13);
    uint64_t v17 = v12 + v9;
    uint64_t v18 = v9 - v12;
    int v19 = v5 - v6;
    uint64_t v20 = v4[2];
    uint64_t v21 = v4[7];
    uint64_t v22 = v7 - v8;
    LODWORD(v8) = v21 + v20;
    uint64_t v23 = v20 - v21;
    uint64_t v24 = &result[v3];
    uint64_t v25 = v10 - v11;
    LODWORD(v12) = v8 + v15 + v17;
    unint64_t v26 = (0x7FFFFFFF204 * (v17 - (unint64_t)(2 * v8)) + 9373 * (v15 - 2 * (int)v8) + 1024) >> 11;
    uint64_t v27 = 6810 * (v16 + (int)v18) + 1024;
    LODWORD(v8) = v13 - v14 + v19;
    v24[4] = v26;
    v24[5] = 4 * (v8 - (v22 - v25 + v23));
    v23 <<= 13;
    *uint64_t v24 = 4 * v12 - 5120;
    v24[1] = (unint64_t)(10323 * (int)v22
                              + 11443 * v19
                              + v23
                              + 5260 * (int)v25
                              + 1812 * (v13 - v14)
                              + 1024) >> 11;
    uint64_t v28 = -4815 * ((int)v25 + (int)v22) + 7791 * (v19 - (v13 - v14));
    uint64_t v29 = 2531 * ((int)v8 + (int)v22 - (int)v25) - v23 + ((v22 - v25) << 12);
    v28 += 1024;
    v24[2] = (unint64_t)(v27 + 4209 * v16) >> 11;
    v24[3] = (unint64_t)(v28 + v29) >> 11;
    v24[6] = (unint64_t)(v27 + 0x7FFFFFFBA5CLL * v18) >> 11;
    v24[7] = (unint64_t)(v28 - v29) >> 11;
    v3 += 2;
  }
  while (v3 != 10);
  uint64_t v30 = 0;
  do
  {
    uint64_t v31 = (_DWORD *)((char *)result + v30);
    int v32 = *(_DWORD *)((char *)result + v30);
    int v33 = *(_DWORD *)((char *)result + v30 + 128);
    uint64_t v34 = v33 + v32;
    int v35 = *(_DWORD *)((char *)result + v30 + 32);
    int v36 = *(_DWORD *)((char *)result + v30 + 96);
    uint64_t v37 = v36 + v35;
    uint64_t v38 = *(int *)((char *)result + v30 + 64);
    int v39 = v32 - v33;
    uint64_t v40 = v35 - v36;
    _DWORD *v31 = (unint64_t)(10486 * (v37 + v34 + v38) + 0x4000) >> 15;
    uint64_t v41 = 3707 * (v37 + v34 - 4 * v38);
    uint64_t v42 = 8290 * (v34 - v37) + 0x4000;
    v31[16] = (unint64_t)(v42 + v41) >> 15;
    v31[32] = (unint64_t)(v42 - v41) >> 15;
    uint64_t v43 = 8716 * (v40 + v39) + 0x4000;
    v31[8] = (unint64_t)(v43 + 5387 * v39) >> 15;
    v31[24] = (unint64_t)(v43 + 0x7FFFFFFFA6DCLL * v40) >> 15;
    v30 += 4;
  }
  while (v30 != 32);
  return result;
}

double sub_1003DFC4C(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v4 = a3;
  uint64_t v5 = a2[1];
  int v6 = (unsigned __int8 *)(*a2 + a3);
  int v7 = *v6;
  int v8 = v6[7];
  int v9 = v6[1];
  int v10 = v6[6];
  uint64_t v11 = (v10 + v9);
  int v12 = v6[2];
  int v13 = v6[5];
  uint64_t v14 = (v13 + v12);
  int v15 = v6[3];
  LODWORD(v6) = v6[4];
  int v16 = v6 + v15 + v8 + v7;
  int v17 = v8 + v7 - (v6 + v15);
  int v18 = v14 + v11;
  uint64_t v19 = v11 - v14;
  int v20 = v7 - v8;
  int v21 = v9 - v10;
  uint64_t v22 = 4433 * (v17 + (int)v19) + 512;
  unint64_t v23 = (unint64_t)(v22 + 6270 * v17) >> 10;
  unint64_t v24 = (unint64_t)(v22 + 0x3FFFFFFC4DFLL * v19) >> 10;
  int v25 = v12 - v13 + v20;
  uint64_t v26 = 9633 * (v15 - (int)v6 + v21 + v25) + 512;
  uint64_t v27 = v26 - 3196 * v25;
  uint64_t v28 = v26 - 16069 * (v15 - (int)v6 + v21);
  *(_DWORD *)a1 = 8 * (v16 + v18) - 0x2000;
  *(_DWORD *)(a1 + 4) = (unint64_t)(12299 * v20 - 7373 * (v15 - (int)v6 + v20) + v27) >> 10;
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 12) = (unint64_t)(25172 * v21 - 20995 * (v12 - v13 + v21) + v28) >> 10;
  *(_DWORD *)(a1 + 16) = 8 * (v16 - v18);
  *(_DWORD *)(a1 + 20) = (unint64_t)(16819 * (v12 - v13) - 20995 * (v12 - v13 + v21) + v27) >> 10;
  *(_DWORD *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 28) = (unint64_t)(2446 * (v15 - (int)v6) - 7373 * (v15 - (int)v6 + v20) + v28) >> 10;
  uint64_t v29 = (unsigned __int8 *)(v5 + v4);
  int v30 = *v29;
  int v31 = v29[7];
  int v32 = v29[1];
  LODWORD(v23) = v29[6];
  uint64_t v33 = (v23 + v32);
  LODWORD(v27) = v29[2];
  LODWORD(v28) = v29[5];
  uint64_t v34 = (v28 + v27);
  int v35 = v29[3];
  LODWORD(v29) = v29[4];
  int v36 = v29 + v35 + v31 + v30;
  int v37 = v31 + v30 - (v29 + v35);
  int v38 = v34 + v33;
  uint64_t v39 = v33 - v34;
  int v40 = v30 - v31;
  int v41 = v32 - v23;
  int v42 = v27 - v28;
  LODWORD(v29) = v35 - v29;
  uint64_t v43 = 4433 * (v37 + (int)v39) + 512;
  unint64_t v44 = (unint64_t)(v43 + 6270 * v37) >> 10;
  unint64_t v45 = (unint64_t)(v43 + 0x3FFFFFFC4DFLL * v39) >> 10;
  uint64_t v46 = 9633 * ((int)v29 + v41 + v42 + v40) + 512;
  uint64_t v47 = v46 - 3196 * (v42 + v40);
  uint64_t v48 = v46 - 16069 * ((int)v29 + v41);
  *(_DWORD *)(a1 + 32) = 8 * (v36 + v38) - 0x2000;
  *(_DWORD *)(a1 + 36) = (unint64_t)(12299 * v40 - 7373 * ((int)v29 + v40) + v47) >> 10;
  *(_DWORD *)(a1 + 40) = v44;
  *(_DWORD *)(a1 + 44) = (unint64_t)(25172 * v41 - 20995 * (v42 + v41) + v48) >> 10;
  *(_DWORD *)(a1 + 48) = 8 * (v36 - v38);
  *(_DWORD *)(a1 + 52) = (unint64_t)(16819 * v42 - 20995 * (v42 + v41) + v47) >> 10;
  *(_DWORD *)(a1 + 56) = v45;
  *(_DWORD *)(a1 + 60) = (unint64_t)(2446 * (int)v29 - 7373 * ((int)v29 + v40) + v48) >> 10;
  int v49 = (unsigned __int8 *)(a2[2] + v4);
  int v50 = *v49;
  int v51 = v49[7];
  int v52 = v49[1];
  LODWORD(v23) = v49[6];
  uint64_t v53 = (v23 + v52);
  LODWORD(v27) = v49[2];
  LODWORD(v47) = v49[5];
  uint64_t v54 = (v47 + v27);
  LODWORD(v46) = v49[3];
  LODWORD(v49) = v49[4];
  int v55 = v49 + v46 + v51 + v50;
  LODWORD(v44) = v51 + v50 - (v49 + v46);
  int v56 = v54 + v53;
  uint64_t v57 = v53 - v54;
  int v58 = v50 - v51;
  int v59 = v52 - v23;
  int v60 = v27 - v47;
  LODWORD(v49) = v46 - v49;
  uint64_t v61 = 4433 * ((int)v44 + (int)v57) + 512;
  unint64_t v62 = (unint64_t)(v61 + 6270 * (int)v44) >> 10;
  unint64_t v63 = (unint64_t)(v61 + 0x3FFFFFFC4DFLL * v57) >> 10;
  uint64_t v64 = 9633 * ((int)v49 + v59 + v60 + v58) + 512;
  uint64_t v65 = v64 - 3196 * (v60 + v58);
  uint64_t v66 = v64 - 16069 * ((int)v49 + v59);
  uint64_t v67 = (unsigned __int8 *)(a2[3] + v4);
  *(_DWORD *)(a1 + 64) = 8 * (v55 + v56) - 0x2000;
  *(_DWORD *)(a1 + 68) = (unint64_t)(12299 * v58 - 7373 * ((int)v49 + v58) + v65) >> 10;
  *(_DWORD *)(a1 + 72) = v62;
  *(_DWORD *)(a1 + 76) = (unint64_t)(25172 * v59 - 20995 * (v60 + v59) + v66) >> 10;
  *(_DWORD *)(a1 + 80) = 8 * (v55 - v56);
  *(_DWORD *)(a1 + 84) = (unint64_t)(16819 * v60 - 20995 * (v60 + v59) + v65) >> 10;
  *(_DWORD *)(a1 + 88) = v63;
  *(_DWORD *)(a1 + 92) = (unint64_t)(2446 * (int)v49 - 7373 * ((int)v49 + v58) + v66) >> 10;
  int v68 = *v67;
  LODWORD(v49) = v67[7];
  int v69 = v67[1];
  LODWORD(v62) = v67[6];
  uint64_t v70 = (v62 + v69);
  LODWORD(v23) = v67[2];
  LODWORD(v63) = v67[5];
  uint64_t v71 = (v63 + v23);
  LODWORD(v65) = v67[3];
  LODWORD(v67) = v67[4];
  LODWORD(v64) = v67 + v65 + v49 + v68;
  int v72 = v49 + v68 - (v67 + v65);
  LODWORD(v66) = v71 + v70;
  uint64_t v73 = v70 - v71;
  LODWORD(v71) = v68 - v49;
  int v74 = v69 - v62;
  LODWORD(v62) = v23 - v63;
  int v75 = 8 * (v64 + v66) - 0x2000;
  uint64_t v76 = 4433 * (v72 + (int)v73) + 512;
  unint64_t v77 = (unint64_t)(v76 + 6270 * v72) >> 10;
  uint64_t v78 = 9633 * ((int)v65 - (int)v67 + v74 + (int)v62 + (int)v71) + 512;
  uint64_t v79 = v78 - 3196 * ((int)v62 + (int)v71);
  uint64_t v80 = v78 - 16069 * ((int)v65 - (int)v67 + v74);
  unint64_t v81 = (unint64_t)(12299 * (int)v71 - 7373 * ((int)v65 - (int)v67 + (int)v71) + v79) >> 10;
  unint64_t v82 = (unint64_t)(25172 * v74 - 20995 * ((int)v62 + v74) + v80) >> 10;
  unint64_t v83 = (unint64_t)(16819 * (int)v62 - 20995 * ((int)v62 + v74) + v79) >> 10;
  unint64_t v84 = (unint64_t)(2446 * ((int)v65 - (int)v67) - 7373 * ((int)v65 - (int)v67 + (int)v71) + v80) >> 10;
  int v85 = *(_DWORD *)(a1 + 4);
  uint64_t v86 = v75 + *(_DWORD *)a1 + 2;
  LODWORD(v78) = *(_DWORD *)(a1 + 32);
  LODWORD(v79) = *(_DWORD *)(a1 + 36);
  int v87 = *(_DWORD *)(a1 + 64);
  int v88 = *(_DWORD *)(a1 + 68);
  uint64_t v89 = v87 + (int)v78;
  LODWORD(v26) = *(_DWORD *)a1 - v75;
  *(_DWORD *)(a1 + 104) = v77;
  *(_DWORD *)(a1 + 108) = v82;
  *(_DWORD *)(a1 + 112) = 8 * (v64 - v66);
  *(_DWORD *)(a1 + 116) = v83;
  *(_DWORD *)(a1 + 120) = (unint64_t)(v76 + 0x3FFFFFFC4DFLL * v73) >> 10;
  *(_DWORD *)(a1 + 124) = v84;
  uint64_t v90 = (int)v78 - v87;
  uint64_t v91 = 4433 * (v90 + (int)v26) + 0x4000;
  unint64_t v92 = (unint64_t)(v91 + 6270 * (int)v26) >> 15;
  unint64_t v93 = (unint64_t)(v91 + 0x7FFFFFFFC4DFLL * v90) >> 15;
  uint64_t v94 = v85 + (int)v81 + 2;
  uint64_t v95 = v88 + (int)v79;
  LODWORD(v81) = v85 - v81;
  uint64_t v96 = (int)v79 - v88;
  *(_DWORD *)a1 = (unint64_t)(v86 + v89) >> 2;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v94 + v95) >> 2;
  *(_DWORD *)(a1 + 64) = (unint64_t)(v86 - v89) >> 2;
  *(_DWORD *)(a1 + 68) = (unint64_t)(v94 - v95) >> 2;
  uint64_t v97 = 4433 * (v96 + (int)v81) + 0x4000;
  *(_DWORD *)(a1 + 32) = v92;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v97 + 6270 * (int)v81) >> 15;
  *(_DWORD *)(a1 + 96) = v93;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v97 + 0x7FFFFFFFC4DFLL * v96) >> 15;
  LODWORD(v81) = *(_DWORD *)(a1 + 8);
  LODWORD(v93) = *(_DWORD *)(a1 + 12);
  LODWORD(v97) = *(_DWORD *)(a1 + 104);
  LODWORD(v92) = *(_DWORD *)(a1 + 108);
  uint64_t v98 = (int)v97 + (int)v81 + 2;
  LODWORD(v86) = *(_DWORD *)(a1 + 40);
  LODWORD(v94) = *(_DWORD *)(a1 + 44);
  LODWORD(v95) = *(_DWORD *)(a1 + 72);
  LODWORD(v79) = *(_DWORD *)(a1 + 76);
  uint64_t v99 = (int)v95 + (int)v86;
  LODWORD(v81) = v81 - v97;
  uint64_t v100 = (int)v86 - (int)v95;
  unint64_t v101 = (unint64_t)(v98 + v99) >> 2;
  unint64_t v102 = (unint64_t)(v98 - v99) >> 2;
  uint64_t v103 = 4433 * (v100 + (int)v81) + 0x4000;
  unint64_t v104 = (unint64_t)(v103 + 6270 * (int)v81) >> 15;
  unint64_t v105 = (unint64_t)(v103 + 0x7FFFFFFFC4DFLL * v100) >> 15;
  uint64_t v106 = (int)v92 + (int)v93 + 2;
  uint64_t v107 = (int)v79 + (int)v94;
  LODWORD(v93) = v93 - v92;
  uint64_t v108 = (int)v94 - (int)v79;
  *(_DWORD *)(a1 + 8) = v101;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v106 + v107) >> 2;
  *(_DWORD *)(a1 + 72) = v102;
  *(_DWORD *)(a1 + 76) = (unint64_t)(v106 - v107) >> 2;
  uint64_t v109 = 4433 * (v108 + (int)v93) + 0x4000;
  *(_DWORD *)(a1 + 40) = v104;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v109 + 6270 * (int)v93) >> 15;
  *(_DWORD *)(a1 + 104) = v105;
  *(_DWORD *)(a1 + 108) = (unint64_t)(v109 + 0x7FFFFFFFC4DFLL * v108) >> 15;
  LODWORD(v104) = *(_DWORD *)(a1 + 16);
  LODWORD(v93) = *(_DWORD *)(a1 + 20);
  LODWORD(v105) = *(_DWORD *)(a1 + 112);
  LODWORD(v108) = *(_DWORD *)(a1 + 116);
  uint64_t v110 = (int)v105 + (int)v104 + 2;
  LODWORD(v101) = *(_DWORD *)(a1 + 48);
  LODWORD(v94) = *(_DWORD *)(a1 + 52);
  LODWORD(v106) = *(_DWORD *)(a1 + 80);
  LODWORD(v79) = *(_DWORD *)(a1 + 84);
  uint64_t v111 = (int)v106 + (int)v101;
  LODWORD(v104) = v104 - v105;
  uint64_t v112 = (int)v101 - (int)v106;
  unint64_t v113 = (unint64_t)(v110 + v111) >> 2;
  unint64_t v114 = (unint64_t)(v110 - v111) >> 2;
  uint64_t v115 = 4433 * (v112 + (int)v104) + 0x4000;
  unint64_t v116 = (unint64_t)(v115 + 6270 * (int)v104) >> 15;
  unint64_t v117 = (unint64_t)(v115 + 0x7FFFFFFFC4DFLL * v112) >> 15;
  uint64_t v118 = (int)v108 + (int)v93 + 2;
  uint64_t v119 = (int)v79 + (int)v94;
  LODWORD(v93) = v93 - v108;
  uint64_t v120 = (int)v94 - (int)v79;
  *(_DWORD *)(a1 + 16) = v113;
  *(_DWORD *)(a1 + 20) = (unint64_t)(v118 + v119) >> 2;
  *(_DWORD *)(a1 + 80) = v114;
  *(_DWORD *)(a1 + 84) = (unint64_t)(v118 - v119) >> 2;
  uint64_t v121 = 4433 * (v120 + (int)v93) + 0x4000;
  *(_DWORD *)(a1 + 48) = v116;
  *(_DWORD *)(a1 + 52) = (unint64_t)(v121 + 6270 * (int)v93) >> 15;
  *(_DWORD *)(a1 + 112) = v117;
  *(_DWORD *)(a1 + 116) = (unint64_t)(v121 + 0x7FFFFFFFC4DFLL * v120) >> 15;
  LODWORD(v116) = *(_DWORD *)(a1 + 24);
  LODWORD(v93) = *(_DWORD *)(a1 + 28);
  LODWORD(v117) = *(_DWORD *)(a1 + 120);
  LODWORD(v120) = *(_DWORD *)(a1 + 124);
  uint64_t v122 = (int)v117 + (int)v116 + 2;
  LODWORD(v113) = *(_DWORD *)(a1 + 56);
  LODWORD(v94) = *(_DWORD *)(a1 + 60);
  LODWORD(v118) = *(_DWORD *)(a1 + 88);
  LODWORD(v79) = *(_DWORD *)(a1 + 92);
  uint64_t v123 = (int)v118 + (int)v113;
  LODWORD(v116) = v116 - v117;
  uint64_t v124 = (int)v113 - (int)v118;
  unint64_t v125 = (unint64_t)(v122 + v123) >> 2;
  unint64_t v126 = (unint64_t)(v122 - v123) >> 2;
  uint64_t v127 = 4433 * (v124 + (int)v116) + 0x4000;
  unint64_t v128 = (unint64_t)(v127 + 6270 * (int)v116) >> 15;
  unint64_t v129 = (unint64_t)(v127 + 0x7FFFFFFFC4DFLL * v124) >> 15;
  uint64_t v130 = (int)v120 + (int)v93 + 2;
  uint64_t v131 = (int)v79 + (int)v94;
  LODWORD(v93) = v93 - v120;
  uint64_t v132 = (int)v94 - (int)v79;
  *(_DWORD *)(a1 + 24) = v125;
  *(_DWORD *)(a1 + 28) = (unint64_t)(v130 + v131) >> 2;
  *(_DWORD *)(a1 + 88) = v126;
  *(_DWORD *)(a1 + 92) = (unint64_t)(v130 - v131) >> 2;
  uint64_t v133 = 4433 * (v132 + (int)v93) + 0x4000;
  *(_DWORD *)(a1 + 56) = v128;
  *(_DWORD *)(a1 + 60) = (unint64_t)(v133 + 6270 * (int)v93) >> 15;
  *(_DWORD *)(a1 + 120) = v129;
  *(_DWORD *)(a1 + 124) = (unint64_t)(v133 + 0x7FFFFFFFC4DFLL * v132) >> 15;
  return result;
}

double sub_1003E0370(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a3;
  uint64_t v5 = a2[1];
  int v6 = (unsigned __int8 *)(*a2 + a3);
  int v7 = *v6;
  int v8 = v6[5];
  int v9 = v6[1];
  int v10 = v6[4];
  int v11 = v6[2];
  LODWORD(v6) = v6[3];
  int v12 = v6 + v11 + v8 + v7;
  int v13 = v8 + v7 - (v6 + v11);
  LODWORD(v6) = v11 - v6;
  int v14 = 8 * (v12 + v10 + v9) - 6144;
  unint64_t v15 = (unint64_t)(5793 * (v12 - 2 * (v10 + v9)) + 512) >> 10;
  unint64_t v16 = (unint64_t)(2998 * ((int)v6 + v7 - v8) + 512) >> 10;
  *(_DWORD *)a1 = v14;
  *(_DWORD *)(a1 + 4) = v16 + 8 * (v9 - v10 + v7 - v8);
  *(_DWORD *)(a1 + 8) = (10033 * v13 + 512) >> 10;
  *(_DWORD *)(a1 + 12) = 8 * (v7 - v8 - (v9 - v10 + v6));
  *(_DWORD *)(a1 + 16) = v15;
  *(_DWORD *)(a1 + 20) = v16 + 8 * (v6 - (v9 - v10));
  int v17 = (unsigned __int8 *)(v5 + a3);
  LODWORD(v5) = *v17;
  LODWORD(v15) = v17[5];
  int v18 = v17[1];
  LODWORD(v16) = v17[4];
  int v19 = v16 + v18;
  int v20 = v17[2];
  LODWORD(v17) = v17[3];
  int v21 = v17 + v20 + v15 + v5;
  int v22 = v15 + v5 - (v17 + v20);
  LODWORD(v15) = v5 - v15;
  int v23 = v18 - v16;
  LODWORD(v16) = v20 - v17;
  LODWORD(v17) = 8 * (v21 + v19) - 6144;
  uint64_t v24 = (2998 * ((int)v16 + (int)v15) + 512) >> 10;
  LODWORD(v5) = v24 + 8 * (v23 + v15);
  *(_DWORD *)(a1 + 32) = v17;
  *(_DWORD *)(a1 + 36) = v5;
  *(_DWORD *)(a1 + 40) = (10033 * v22 + 512) >> 10;
  *(_DWORD *)(a1 + 44) = 8 * (v15 - (v23 + v16));
  *(_DWORD *)(a1 + 48) = (unint64_t)(5793 * (v21 - 2 * v19) + 512) >> 10;
  *(_DWORD *)(a1 + 52) = v24 + 8 * (v16 - v23);
  int v25 = (unsigned __int8 *)(a2[2] + v4);
  LODWORD(v15) = *v25;
  int v26 = v25[5];
  int v27 = v25[1];
  LODWORD(v16) = v25[4];
  LODWORD(v24) = v25[2];
  LODWORD(v25) = v25[3];
  int v28 = v25 + v24 + v26 + v15;
  int v29 = 8 * (v28 + v16 + v27) - 6144;
  int v30 = v26 + v15 - (v25 + v24);
  LODWORD(v15) = v15 - v26;
  LODWORD(v25) = v24 - v25;
  int v31 = (10033 * v30 + 512) >> 10;
  unint64_t v32 = (unint64_t)(2998 * ((int)v25 + (int)v15) + 512) >> 10;
  int v33 = v32 + 8 * (v27 - v16 + v15);
  int v34 = 8 * (v15 - (v27 - v16 + v25));
  *(_DWORD *)(a1 + 80) = (unint64_t)(5793 * (v28 - 2 * ((int)v16 + v27)) + 512) >> 10;
  *(_DWORD *)(a1 + 84) = v32 + 8 * (v25 - (v27 - v16));
  LODWORD(v15) = *(_DWORD *)(a1 + 4);
  uint64_t v35 = v29 + *(_DWORD *)a1;
  unint64_t v36 = (unint64_t)(17837 * (*(_DWORD *)a1 - v29) + 0x4000) >> 15;
  uint64_t v37 = (int)v15 + v33;
  *(_DWORD *)a1 = (unint64_t)(14564 * (v35 + (int)v17) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 4) = (unint64_t)(14564 * (v37 + (int)v5) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 64) = (unint64_t)(10298 * (v35 - 2 * (int)v17) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 68) = (unint64_t)(10298 * (v37 - 2 * (int)v5) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 32) = v36;
  *(_DWORD *)(a1 + 36) = (unint64_t)(17837 * ((int)v15 - v33) + 0x4000) >> 15;
  LODWORD(v5) = *(_DWORD *)(a1 + 8);
  LODWORD(v36) = *(_DWORD *)(a1 + 12);
  uint64_t v38 = v31 + (int)v5;
  LODWORD(v5) = v5 - v31;
  uint64_t v39 = *(int *)(a1 + 40);
  uint64_t v40 = *(int *)(a1 + 44);
  unint64_t v41 = (unint64_t)(14564 * (v38 + v39) + 0x4000) >> 15;
  unint64_t v42 = (unint64_t)(10298 * (v38 - 2 * v39) + 0x4000) >> 15;
  uint64_t v43 = v34 + (int)v36;
  *(_DWORD *)(a1 + 8) = v41;
  *(_DWORD *)(a1 + 12) = (unint64_t)(14564 * (v43 + v40) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 72) = v42;
  *(_DWORD *)(a1 + 76) = (unint64_t)(10298 * (v43 - 2 * v40) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 40) = (unint64_t)(17837 * (int)v5 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 44) = (unint64_t)(17837 * ((int)v36 - v34) + 0x4000) >> 15;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  LODWORD(v42) = *(_DWORD *)(a1 + 20);
  int v44 = *(_DWORD *)(a1 + 80);
  LODWORD(v36) = *(_DWORD *)(a1 + 84);
  uint64_t v45 = v44 + (int)v5;
  LODWORD(v5) = v5 - v44;
  uint64_t v46 = *(int *)(a1 + 48);
  uint64_t v47 = *(int *)(a1 + 52);
  unint64_t v48 = (unint64_t)(14564 * (v45 + v46) + 0x4000) >> 15;
  unint64_t v49 = (unint64_t)(10298 * (v45 - 2 * v46) + 0x4000) >> 15;
  uint64_t v50 = (int)v36 + (int)v42;
  *(_DWORD *)(a1 + 16) = v48;
  *(_DWORD *)(a1 + 20) = (unint64_t)(14564 * (v50 + v47) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 80) = v49;
  *(_DWORD *)(a1 + 84) = (unint64_t)(10298 * (v50 - 2 * v47) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 48) = (unint64_t)(17837 * (int)v5 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 52) = (unint64_t)(17837 * ((int)v42 - (int)v36) + 0x4000) >> 15;
  return result;
}

double sub_1003E06F4(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2[1];
  uint64_t v5 = (unsigned __int8 *)(*a2 + a3);
  int v6 = *v5;
  int v7 = v5[3];
  int v8 = v7 + v6;
  uint64_t v9 = v5[1];
  uint64_t v10 = v5[2];
  int v11 = v10 + v9;
  int v12 = v6 - v7;
  uint64_t v13 = v9 - v10;
  uint64_t v14 = (32 * (v11 + v8));
  int v15 = v8 - v11;
  uint64_t v16 = 4433 * ((int)v13 + v12) + 128;
  uint64_t v17 = v16 + 6270 * v12;
  *(_DWORD *)a1 = v14 - 0x4000;
  *(_DWORD *)(a1 + 4) = (unint64_t)v17 >> 8;
  uint64_t v18 = v16 + 0xFFFFFFC4DFLL * v13;
  *(_DWORD *)(a1 + 8) = 32 * v15;
  *(_DWORD *)(a1 + 12) = (unint64_t)v18 >> 8;
  int v19 = (unsigned __int8 *)(v4 + a3);
  LODWORD(v4) = *v19;
  int v20 = v19[3];
  LODWORD(v16) = v20 + v4;
  uint64_t v21 = v19[1];
  uint64_t v22 = v19[2];
  int v23 = v22 + v21;
  LODWORD(v4) = v4 - v20;
  uint64_t v24 = v21 - v22;
  int v25 = 32 * (v23 + v16) - 0x4000;
  LODWORD(v16) = 32 * (v16 - v23);
  uint64_t v26 = 4433 * ((int)v24 + (int)v4) + 128;
  v14 -= 16382;
  uint64_t v27 = (v17 >> 8) + 2;
  uint64_t v28 = (v26 + 6270 * (int)v4) >> 8;
  *(_DWORD *)a1 = (unint64_t)(v14 + v25) >> 2;
  *(_DWORD *)(a1 + 4) = (unint64_t)(v27 + v28) >> 2;
  *(_DWORD *)(a1 + 32) = (unint64_t)(v14 - v25) >> 2;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v27 - v28) >> 2;
  uint64_t v29 = (32 * v15) | 2;
  uint64_t v30 = (int)(v18 >> 8) + 2;
  uint64_t v31 = (int)((v26 + 0xFFFFFFC4DFLL * v24) >> 8);
  *(_DWORD *)(a1 + 8) = (unint64_t)(v29 + (int)v16) >> 2;
  *(_DWORD *)(a1 + 12) = (unint64_t)(v30 + v31) >> 2;
  *(_DWORD *)(a1 + 40) = (unint64_t)(v29 - (int)v16) >> 2;
  *(_DWORD *)(a1 + 44) = (unint64_t)(v30 - v31) >> 2;
  return result;
}

double sub_1003E0860(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = (unsigned __int8 *)(*a2 + a3);
  int v5 = *v4;
  LODWORD(v4) = v4[1];
  *(_DWORD *)a1 = 32 * (v4 + v5) - 0x2000;
  *(_DWORD *)(a1 + 4) = 32 * (v5 - v4);
  return result;
}

uint64_t sub_1003E08B0(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = a1;
  for (uint64_t i = 0; ; ++i)
  {
    while (1)
    {
      int v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * i) + a3);
      int v6 = *v5;
      int v7 = v5[7];
      int v8 = v5[1];
      int v9 = v5[6];
      uint64_t v10 = (v9 + v8);
      int v11 = v5[2];
      int v12 = v5[5];
      uint64_t v13 = (v12 + v11);
      int v14 = v5[3];
      LODWORD(v5) = v5[4];
      int v15 = v5 + v14 + v7 + v6;
      int v16 = v7 + v6 - (v5 + v14);
      int v17 = v13 + v10;
      uint64_t v18 = v10 - v13;
      int v19 = v6 - v7;
      int v20 = v8 - v9;
      int v21 = v11 - v12;
      LODWORD(v5) = v14 - v5;
      uint64_t v22 = 4433 * (v16 + (int)v18) + 1024;
      unint64_t v23 = (unint64_t)(v22 + 6270 * v16) >> 11;
      unint64_t v24 = (unint64_t)(v22 + 0x7FFFFFFC4DFLL * v18) >> 11;
      LODWORD(v13) = v5 + v20 + v21 + v19;
      uint64_t v25 = -3196 * (v21 + v19) + 9633 * (int)v13;
      uint64_t v26 = -16069 * ((int)v5 + v20) + 9633 * (int)v13;
      uint64_t v27 = -20995 * (v21 + v20);
      uint64_t v28 = -7373 * ((int)v5 + v19) + 1024;
      *uint64_t v3 = 4 * (v15 + v17) - 4096;
      v3[1] = (unint64_t)(v28 + 12299 * v19 + v25) >> 11;
      v3[2] = v23;
      v3[3] = (unint64_t)(v27 + 1024 + 25172 * v20 + v26) >> 11;
      v3[4] = 4 * (v15 - v17);
      v3[5] = (unint64_t)(v27 + 1024 + 16819 * v21 + v25) >> 11;
      v3[6] = v24;
      v3[7] = (unint64_t)(v28 + 2446 * (int)v5 + v26) >> 11;
      if (i != 7) {
        break;
      }
      uint64_t v3 = v73;
      ++i;
    }
    if (i == 15) {
      break;
    }
    v3 += 8;
  }
  uint64_t v29 = 0;
  do
  {
    uint64_t v30 = &a1[v29];
    int v71 = a1[v29];
    int v72 = *(_DWORD *)&v73[v29 * 4 + 224];
    uint64_t v31 = v72 + v71;
    int v69 = a1[v29 + 8];
    int v70 = *(_DWORD *)&v73[v29 * 4 + 192];
    uint64_t v32 = v70 + v69;
    int v33 = a1[v29 + 16];
    int v34 = *(_DWORD *)&v73[v29 * 4 + 160];
    uint64_t v35 = v34 + v33;
    int v36 = a1[v29 + 24];
    int v37 = *(_DWORD *)&v73[v29 * 4 + 128];
    uint64_t v38 = v37 + v36;
    int v39 = a1[v29 + 32];
    int v40 = *(_DWORD *)&v73[v29 * 4 + 96];
    uint64_t v41 = v40 + v39;
    int v42 = a1[v29 + 40];
    int v43 = *(_DWORD *)&v73[v29 * 4 + 64];
    uint64_t v44 = v43 + v42;
    int v45 = a1[v29 + 48];
    int v46 = a1[v29 + 56];
    int v47 = *(_DWORD *)&v73[v29 * 4];
    uint64_t v48 = v47 + v46;
    int v49 = *(_DWORD *)&v73[v29 * 4 + 32];
    uint64_t v50 = v49 + v45;
    uint64_t v51 = v50 + v32;
    uint64_t v52 = v44 + v35;
    uint64_t v53 = 10703 * (v48 + v31 - (v41 + v38)) + 4433 * (v50 + v32 - (v44 + v35));
    uint64_t v54 = v32 - v50;
    uint64_t v55 = v35 - v44;
    int v56 = v33 - v34;
    uint64_t v57 = v71 - v72;
    *uint64_t v30 = (unint64_t)(v41 + v38 + v52 + v51 + v48 + v31 + 4) >> 3;
    v30[32] = (unint64_t)(v53 + 0x8000) >> 16;
    uint64_t v58 = v45 - v49;
    uint64_t v59 = 2260 * (v38 - v41 - v54) + 11363 * (v31 - v48 - v55) + 0x8000;
    unint64_t v60 = v59 + 17799 * v55 + 11893 * v54;
    uint64_t v61 = v46 - v47;
    v30[16] = v60 >> 16;
    v30[48] = (unint64_t)(v59 + 0xFFFFFFFFDE07 * (v38 - v41) + 0xFFFFFFFFF93ELL * (v31 - v48)) >> 16;
    uint64_t v62 = 11086 * (v69 - v70 + v57) + 3363 * (v58 - v61);
    uint64_t v63 = 10217 * (v56 + v57) + 5461 * (v61 + v42 - v43);
    uint64_t result = 8956 * (v36 - v37 + v57) + 7350 * (v39 - v40 - v61);
    uint64_t v65 = 1136 * (v56 + (uint64_t)(v69 - v70)) + 11529 * (v58 - (v42 - v43));
    uint64_t v66 = -5461 * (v36 - v37 + (uint64_t)(v69 - v70)) - 10217 * (v58 + v39 - v40);
    v30[8] = (unint64_t)(v63 + 0xFFFFFFFFB6D6 * v57 + 6387 * (v46 - v47) + v62 + result + 0x8000) >> 16;
    v30[24] = (unint64_t)(v66 + 589 * (v69 - v70) + 0xFFFFFFFFCAC1 * v58 + v65 + v62 + 0x8000) >> 16;
    uint64_t v67 = -11086 * (v36 - v37 + (uint64_t)v56) + 3363 * (v42 - v43 - (uint64_t)(v39 - v40)) + 0x8000;
    v30[40] = (unint64_t)(v67 - 9222 * v56 + 10055 * (v42 - v43) + v65 + v63) >> 16;
    v30[56] = (unint64_t)(v67 + 8728 * (v36 - v37) + 17760 * (v39 - v40) + v66 + result) >> 16;
    ++v29;
  }
  while ((v29 * 4) != 32);
  return result;
}

_OWORD *sub_1003E0D48(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  result[2] = 0u;
  result[3] = 0u;
  uint64_t v4 = result;
  *uint64_t result = 0u;
  result[1] = 0u;
  while (1)
  {
    while (1)
    {
      int v5 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + a3);
      int v6 = *v5;
      int v7 = v5[6];
      int v8 = v7 + v6;
      int v9 = v5[1];
      int v10 = v5[5];
      uint64_t v11 = (v10 + v9);
      int v12 = v5[2];
      int v13 = v5[4];
      int v14 = v13 + v12;
      unsigned int v15 = v5[3];
      int v16 = v6 - v7;
      int v17 = v9 - v10;
      LODWORD(v5) = v12 - v13;
      int v18 = v13 + v12 + v8;
      int v19 = 4 * (v15 + v11 + v18) - 3584;
      int v20 = v18 - 4 * v15;
      int v21 = v8 - (v13 + v12);
      int v22 = v11 - v14;
      unint64_t v23 = (unint64_t)(7542 * v21 + 2578 * ((int)v11 - v14) + 2896 * v20 + 1024) >> 11;
      uint64_t v24 = 7223 * (v8 - (int)v11) + 1024;
      unint64_t v25 = (v24 + 2578 * v22 + 0x7FFFFFFE95FLL * (v11 - 2 * (unint64_t)v15)) >> 11;
      v4[6] = (unint64_t)(v24 - 7542 * v21 + 2896 * v20) >> 11;
      LODWORD(v24) = v17 + v16;
      uint64_t v26 = 1395 * (v16 - v17);
      int v27 = v5 + v17;
      uint64_t v28 = 5027 * ((int)v5 + v16) + 1024;
      *uint64_t v4 = v19;
      v4[1] = (unint64_t)(v28 - v26 + 7663 * (int)v24) >> 11;
      v4[2] = v23;
      v4[3] = (unint64_t)(v26 - 11295 * v27 + 7663 * (int)v24 + 1024) >> 11;
      v4[4] = v25;
      v4[5] = (unint64_t)(v28 + 15326 * (int)v5 - 11295 * v27) >> 11;
      if (v3 != 7) {
        break;
      }
      uint64_t v4 = v69;
      ++v3;
    }
    if (v3 == 13) {
      break;
    }
    v4 += 8;
    ++v3;
  }
  uint64_t v29 = 0;
  do
  {
    uint64_t v30 = (_DWORD *)((char *)result + v29);
    int v31 = *(_DWORD *)((char *)result + v29);
    int v32 = *(_DWORD *)&v69[v29 + 160];
    uint64_t v33 = v32 + v31;
    int v34 = *(_DWORD *)((char *)result + v29 + 32);
    int v35 = *(_DWORD *)&v69[v29 + 128];
    int v36 = *(_DWORD *)((char *)result + v29 + 64);
    int v37 = *(_DWORD *)&v69[v29 + 96];
    uint64_t v38 = v35 + v34;
    uint64_t v39 = v37 + v36;
    int v40 = *(_DWORD *)((char *)result + v29 + 128);
    int v41 = *(_DWORD *)&v69[v29 + 32];
    uint64_t v42 = v41 + v40;
    int v43 = *(_DWORD *)((char *)result + v29 + 160);
    int v44 = *(_DWORD *)&v69[v29];
    int v45 = *(_DWORD *)((char *)result + v29 + 192);
    int v46 = *(_DWORD *)((char *)result + v29 + 224);
    uint64_t v47 = v44 + v43;
    uint64_t v48 = v46 + v45;
    uint64_t v49 = v48 + v33;
    uint64_t v50 = v33 - v48;
    uint64_t v51 = v47 + v38;
    uint64_t v52 = v38 - v47;
    uint64_t v53 = v42 + v39;
    uint64_t v54 = v39 - v42;
    LODWORD(v42) = v31 - v32;
    int v55 = *(_DWORD *)((char *)result + v29 + 96);
    int v56 = *(_DWORD *)&v69[v29 + 64];
    int v57 = v56 + v55;
    int v58 = v55 - v56;
    uint64_t v59 = v34 - v35;
    uint64_t v60 = v36 - v37;
    uint64_t v61 = v40 - v41;
    uint64_t v62 = v43 - v44;
    uint64_t v63 = v45 - v46;
    *uint64_t v30 = (unint64_t)(5350 * (v53 + v57 + v51 + v49) + 0x4000) >> 15;
    uint64_t v64 = 5915 * (v50 + v52) + 0x4000;
    v30[56] = (unint64_t)(5350 * ((int)v42 + (uint64_t)v58 - (v60 + v59 + v62 - v61 + v63)) + 0x4000) >> 15;
    unint64_t v65 = v64 + 0x7FFFFFFFE330 * v54 + 0x7FFFFFFFDC12 * v52;
    v30[16] = (unint64_t)(v64 + 3283 * v54 + 1461 * v50) >> 15;
    uint64_t v66 = 7518 * (v62 - v61) - 5350 * v58 - 847 * (v60 + v59) + 0x4000;
    v30[48] = v65 >> 15;
    v30[32] = (unint64_t)(1684 * (v51 - 2 * v57)
                               + 0x7FFFFFFFED93 * (v53 - 2 * v57)
                               + 6817 * (v49 - 2 * v57)
                               + 0x4000) >> 15;
    uint64_t v67 = 7141 * (v59 + (int)v42) + 2499 * (v62 - v63);
    uint64_t v68 = 6406 * (v60 + (int)v42) + 4025 * (v63 + v61);
    v30[40] = (unint64_t)(v66 + 0x7FFFFFFFCE64 * v60 + 5992 * v61 + v68) >> 15;
    v30[24] = (unint64_t)(v66 + 0x7FFFFFFFF723 * v59 + 0x7FFFFFFFBFD9 * v62 + v67) >> 15;
    v30[8] = (unint64_t)(v67 + 0x7FFFFFFFE873 * (int)v42 + 5350 * v58 + 0x7FFFFFFFFD59 * v63 + v68 + 0x4000) >> 15;
    v29 += 4;
  }
  while (v29 != 28);
  return result;
}

int *sub_1003E1164(int *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  uint64_t v4 = a3;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  int v5 = result;
  *(_OWORD *)uint64_t result = 0u;
  *((_OWORD *)result + 1) = 0u;
  while (1)
  {
    while (1)
    {
      int v6 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + v4);
      int v7 = *v6;
      int v8 = v6[5];
      int v9 = v6[1];
      int v10 = v6[4];
      int v11 = v10 + v9;
      int v12 = v6[2];
      LODWORD(v6) = v6[3];
      int v13 = v6 + v12 + v8 + v7;
      int v14 = v8 + v7 - (v6 + v12);
      int v15 = v7 - v8;
      int v16 = v9 - v10;
      LODWORD(v6) = v12 - v6;
      int v17 = 4 * (v13 + v10 + v9) - 3072;
      unint64_t v18 = (unint64_t)(5793 * (v13 - 2 * v11) + 1024) >> 11;
      unint64_t v19 = (unint64_t)(2998 * ((int)v6 + v15) + 1024) >> 11;
      *int v5 = v17;
      v5[1] = v19 + 4 * (v16 + v15);
      v5[2] = (10033 * v14 + 1024) >> 11;
      v5[3] = 4 * (v15 - (v16 + v6));
      v5[4] = v18;
      v5[5] = v19 + 4 * (v6 - v16);
      if (v3 != 7) {
        break;
      }
      int v5 = (int *)v54;
      ++v3;
    }
    if (v3 == 11) {
      break;
    }
    v5 += 8;
    ++v3;
  }
  uint64_t v20 = 0;
  do
  {
    int v21 = &result[v20];
    int v22 = result[v20];
    int v23 = *(_DWORD *)&v54[v20 * 4 + 96];
    uint64_t v24 = v23 + v22;
    int v25 = result[v20 + 16];
    int v26 = *(_DWORD *)&v54[v20 * 4 + 32];
    uint64_t v27 = v26 + v25;
    int v28 = result[v20 + 24];
    int v29 = *(_DWORD *)&v54[v20 * 4];
    uint64_t v30 = v29 + v28;
    int v31 = result[v20 + 40];
    int v32 = result[v20 + 48];
    uint64_t v33 = v32 + v31;
    uint64_t v34 = v33 + v24;
    uint64_t v35 = v24 - v33;
    uint64_t v36 = v30 + v27;
    uint64_t v37 = v27 - v30;
    LODWORD(v27) = result[v20 + 8];
    int v38 = *(_DWORD *)&v54[v20 * 4 + 64];
    int v39 = v22 - v23;
    int v40 = v38 + v27;
    LODWORD(v27) = v27 - v38;
    int v41 = result[v20 + 32];
    int v42 = v25 - v26;
    int v43 = result[v20 + 56];
    int v44 = v43 + v41;
    int v45 = v41 - v43;
    uint64_t v46 = v40;
    int v47 = v31 - v32;
    uint64_t v48 = v46 - v44;
    int *v21 = (unint64_t)(7282 * (v36 + v46 + v44 + v34) + 0x4000) >> 15;
    v21[48] = (unint64_t)(7282 * (v35 - (v48 + v37)) + 0x4000) >> 15;
    v21[32] = (unint64_t)(8918 * (v34 - v36) + 0x4000) >> 15;
    v21[16] = (unint64_t)(9947 * (v35 + v37) + 7282 * (v48 - v37) + 0x4000) >> 15;
    uint64_t v49 = 3941 * (v45 + (uint64_t)(int)v27);
    uint64_t v50 = v49 + 5573 * (int)v27;
    uint64_t v51 = v49 - 13455 * v45;
    uint64_t v52 = 6269 * (v28 - v29 + (uint64_t)v39);
    uint64_t v53 = 8170 * (v42 + (uint64_t)v39) + 0x4000;
    v21[8] = (unint64_t)(v53 + 0x7FFFFFFFEF7BLL * v39 + v52 + v50 + 1344 * v47) >> 15;
    v21[24] = (unint64_t)(v51
                               + 9514 * (v39 - (uint64_t)(v28 - v29))
                               + 0x7FFFFFFFF09BLL * (v47 + (uint64_t)v42)
                               + 0x4000) >> 15;
    v21[40] = (unint64_t)(v53 - 17036 * v42 - 1344 * (v28 - v29 + (uint64_t)v42) - v51 + 6269 * v47) >> 15;
    v21[56] = (unint64_t)(v52
                               + 5285 * (v28 - v29)
                               - 1344 * (v28 - v29 + (uint64_t)v42)
                               - v50
                               + 0x7FFFFFFFE016 * v47
                               + 0x4000) >> 15;
    ++v20;
  }
  while ((v20 * 4) != 24);
  return result;
}

_OWORD *sub_1003E14CC(_OWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = 0;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  uint64_t v4 = a3;
  result[2] = 0u;
  result[3] = 0u;
  int v5 = result;
  *uint64_t result = 0u;
  result[1] = 0u;
  while (1)
  {
    while (1)
    {
      int v6 = (unsigned __int8 *)(*(void *)(a2 + 8 * v3) + v4);
      int v7 = *v6;
      int v8 = v6[4];
      int v9 = v8 + v7;
      uint64_t v10 = v6[1];
      uint64_t v11 = v6[3];
      int v12 = v11 + v10;
      LODWORD(v6) = v6[2];
      int v13 = v7 - v8;
      uint64_t v14 = v10 - v11;
      LODWORD(v10) = 4 * (v11 + v10 + v9 + v6) - 2560;
      LODWORD(v6) = v12 + v9 - 4 * v6;
      uint64_t v15 = 6476 * (v9 - v12) + 1024;
      unint64_t v16 = (unint64_t)(v15 + 2896 * (int)v6) >> 11;
      v5[4] = (unint64_t)(v15 - 2896 * (int)v6) >> 11;
      uint64_t v17 = 6810 * ((int)v14 + v13) + 1024;
      *int v5 = v10;
      v5[1] = (unint64_t)(v17 + 4209 * v13) >> 11;
      v5[2] = v16;
      v5[3] = (unint64_t)(v17 + 0x7FFFFFFBA5CLL * v14) >> 11;
      if (v3 != 7) {
        break;
      }
      int v5 = v48;
      ++v3;
    }
    if (v3 == 9) {
      break;
    }
    v5 += 8;
    ++v3;
  }
  uint64_t v18 = 0;
  do
  {
    unint64_t v19 = (_DWORD *)((char *)result + v18);
    int v20 = *(_DWORD *)((char *)result + v18);
    int v21 = *(_DWORD *)&v48[v18 + 32];
    uint64_t v22 = v21 + v20;
    int v23 = *(_DWORD *)((char *)result + v18 + 32);
    int v24 = *(_DWORD *)&v48[v18];
    uint64_t v25 = v24 + v23;
    int v26 = *(_DWORD *)((char *)result + v18 + 96);
    int v27 = *(_DWORD *)((char *)result + v18 + 192);
    uint64_t v28 = v27 + v26;
    int v29 = *(_DWORD *)((char *)result + v18 + 128);
    int v30 = *(_DWORD *)((char *)result + v18 + 160);
    uint64_t v31 = v30 + v29;
    uint64_t v32 = v31 + v22;
    uint64_t v33 = v22 - v31;
    uint64_t v34 = v28 + v25;
    uint64_t v35 = v25 - v28;
    LODWORD(v28) = *(_DWORD *)((char *)result + v18 + 64);
    int v36 = v20 - v21;
    int v37 = *(_DWORD *)((char *)result + v18 + 224);
    int v38 = v23 - v24;
    int v39 = v37 + v28;
    int v40 = v28 - v37;
    int v41 = v26 - v27;
    int v42 = v29 - v30;
    *unint64_t v19 = (unint64_t)(10486 * (v34 + v39 + v32) + 0x4000) >> 15;
    v19[32] = (unint64_t)(11997 * (v32 - 2 * v39) + 0x7FFFFFFFEE1ALL * (v34 - 2 * v39) + 0x4000) >> 15;
    uint64_t v43 = 8716 * (v33 + v35) + 0x4000;
    v19[16] = (unint64_t)(v43 + 5387 * v33) >> 15;
    v19[48] = (unint64_t)(v43 + 0x7FFFFFFFA6DCLL * v35) >> 15;
    uint64_t v44 = v42 + (uint64_t)v36;
    uint64_t v45 = v38 - (uint64_t)v41;
    v19[40] = (unint64_t)(10486 * (v44 - (v45 + v40)) + 0x4000) >> 15;
    v19[8] = (unint64_t)(13213 * v38 + 14647 * v36 + 10486 * v40 + 6732 * v41 + 2320 * v42 + 0x4000) >> 15;
    uint64_t v46 = 5243 * v45 - 10486 * v40 + 3240 * (v44 + v45);
    uint64_t v47 = -6163 * (v41 + (uint64_t)v38) + 9973 * (v36 - (uint64_t)v42) + 0x4000;
    v19[24] = (unint64_t)(v47 + v46) >> 15;
    v19[56] = (unint64_t)(v47 - v46) >> 15;
    v18 += 4;
  }
  while (v18 != 20);
  return result;
}

uint64_t sub_1003E17E0(uint64_t result, void *a2, unsigned int a3)
{
  uint64_t v3 = 0;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  uint64_t v4 = a3;
  uint64_t v5 = a2[1];
  int v6 = (unsigned __int8 *)(*a2 + a3);
  int v7 = *v6;
  int v8 = v6[3];
  int v9 = v8 + v7;
  uint64_t v10 = v6[1];
  uint64_t v11 = v6[2];
  int v12 = v11 + v10;
  int v13 = v7 - v8;
  uint64_t v14 = v10 - v11;
  int v15 = 8 * (v12 + v9) - 4096;
  int v16 = 8 * (v9 - v12);
  uint64_t v17 = 4433 * ((int)v14 + v13) + 512;
  *(_DWORD *)uint64_t result = v15;
  *(_DWORD *)(result + 4) = (unint64_t)(v17 + 6270 * v13) >> 10;
  *(_DWORD *)(result + 8) = v16;
  *(_DWORD *)(result + 12) = (unint64_t)(v17 + 0x3FFFFFFC4DFLL * v14) >> 10;
  uint64_t v18 = (unsigned __int8 *)(v5 + a3);
  int v19 = *v18;
  LODWORD(v14) = v18[3];
  LODWORD(v17) = v14 + v19;
  uint64_t v20 = v18[1];
  uint64_t v21 = v18[2];
  int v22 = v21 + v20;
  int v23 = v19 - v14;
  uint64_t v24 = v20 - v21;
  uint64_t v25 = 4433 * ((int)v24 + v23) + 512;
  *(_DWORD *)(result + 32) = 8 * (v22 + v17) - 4096;
  *(_DWORD *)(result + 36) = (unint64_t)(v25 + 6270 * v23) >> 10;
  *(_DWORD *)(result + 40) = 8 * (v17 - v22);
  *(_DWORD *)(result + 44) = (unint64_t)(v25 + 0x3FFFFFFC4DFLL * v24) >> 10;
  uint64_t v26 = a2[3];
  int v27 = (unsigned __int8 *)(a2[2] + v4);
  LODWORD(v14) = *v27;
  LODWORD(v17) = v27[3];
  LODWORD(v25) = v17 + v14;
  uint64_t v28 = v27[1];
  uint64_t v29 = v27[2];
  int v30 = v29 + v28;
  LODWORD(v14) = v14 - v17;
  uint64_t v31 = v28 - v29;
  uint64_t v32 = 4433 * ((int)v31 + (int)v14) + 512;
  *(_DWORD *)(result + 64) = 8 * (v30 + v25) - 4096;
  *(_DWORD *)(result + 68) = (unint64_t)(v32 + 6270 * (int)v14) >> 10;
  *(_DWORD *)(result + 72) = 8 * (v25 - v30);
  *(_DWORD *)(result + 76) = (unint64_t)(v32 + 0x3FFFFFFC4DFLL * v31) >> 10;
  uint64_t v33 = (unsigned __int8 *)(v26 + v4);
  LODWORD(v26) = *(unsigned __int8 *)(v26 + v4);
  LODWORD(v14) = v33[3];
  LODWORD(v17) = v14 + v26;
  uint64_t v34 = v33[1];
  uint64_t v35 = v33[2];
  LODWORD(v32) = v35 + v34;
  LODWORD(v26) = v26 - v14;
  uint64_t v36 = v34 - v35;
  uint64_t v37 = 4433 * ((int)v36 + (int)v26) + 512;
  *(_DWORD *)(result + 96) = 8 * (v32 + v17) - 4096;
  *(_DWORD *)(result + 100) = (unint64_t)(v37 + 6270 * (int)v26) >> 10;
  *(_DWORD *)(result + 104) = 8 * (v17 - v32);
  *(_DWORD *)(result + 108) = (unint64_t)(v37 + 0x3FFFFFFC4DFLL * v36) >> 10;
  uint64_t v38 = a2[5];
  int v39 = (unsigned __int8 *)(a2[4] + v4);
  LODWORD(v14) = *v39;
  LODWORD(v17) = v39[3];
  LODWORD(v37) = v17 + v14;
  uint64_t v40 = v39[1];
  uint64_t v41 = v39[2];
  int v42 = v41 + v40;
  LODWORD(v14) = v14 - v17;
  uint64_t v43 = v40 - v41;
  uint64_t v44 = 4433 * ((int)v43 + (int)v14) + 512;
  *(_DWORD *)(result + 128) = 8 * (v42 + v37) - 4096;
  *(_DWORD *)(result + 132) = (unint64_t)(v44 + 6270 * (int)v14) >> 10;
  *(_DWORD *)(result + 136) = 8 * (v37 - v42);
  *(_DWORD *)(result + 140) = (unint64_t)(v44 + 0x3FFFFFFC4DFLL * v43) >> 10;
  uint64_t v45 = (unsigned __int8 *)(v38 + v4);
  LODWORD(v38) = *(unsigned __int8 *)(v38 + v4);
  LODWORD(v14) = v45[3];
  LODWORD(v17) = v14 + v38;
  uint64_t v46 = v45[1];
  uint64_t v47 = v45[2];
  LODWORD(v44) = v47 + v46;
  LODWORD(v38) = v38 - v14;
  uint64_t v48 = v46 - v47;
  uint64_t v49 = 4433 * ((int)v48 + (int)v38) + 512;
  *(_DWORD *)(result + 160) = 8 * (v44 + v17) - 4096;
  *(_DWORD *)(result + 164) = (unint64_t)(v49 + 6270 * (int)v38) >> 10;
  *(_DWORD *)(result + 168) = 8 * (v17 - v44);
  *(_DWORD *)(result + 172) = (unint64_t)(v49 + 0x3FFFFFFC4DFLL * v48) >> 10;
  uint64_t v50 = a2[7];
  uint64_t v51 = (unsigned __int8 *)(a2[6] + v4);
  LODWORD(v14) = *v51;
  LODWORD(v17) = v51[3];
  LODWORD(v49) = v17 + v14;
  uint64_t v52 = v51[1];
  uint64_t v53 = v51[2];
  LODWORD(v44) = v53 + v52;
  LODWORD(v14) = v14 - v17;
  uint64_t v54 = v52 - v53;
  uint64_t v55 = 4433 * ((int)v54 + (int)v14) + 512;
  *(_DWORD *)(result + 192) = 8 * (v44 + v49) - 4096;
  *(_DWORD *)(result + 196) = (unint64_t)(v55 + 6270 * (int)v14) >> 10;
  *(_DWORD *)(result + 200) = 8 * (v49 - v44);
  *(_DWORD *)(result + 204) = (unint64_t)(v55 + 0x3FFFFFFC4DFLL * v54) >> 10;
  int v56 = (unsigned __int8 *)(v50 + v4);
  LODWORD(v54) = *v56;
  LODWORD(v50) = v56[3];
  LODWORD(v14) = v50 + v54;
  uint64_t v57 = v56[1];
  uint64_t v58 = v56[2];
  LODWORD(v49) = v58 + v57;
  LODWORD(v54) = v54 - v50;
  uint64_t v59 = v57 - v58;
  LODWORD(v50) = 8 * (v49 + v14) - 4096;
  LODWORD(v49) = 8 * (v14 - v49);
  uint64_t v60 = 4433 * ((int)v59 + (int)v54) + 512;
  *(_DWORD *)(result + 224) = v50;
  *(_DWORD *)(result + 228) = (unint64_t)(v60 + 6270 * (int)v54) >> 10;
  *(_DWORD *)(result + 232) = v49;
  *(_DWORD *)(result + 236) = (unint64_t)(v60 + 0x3FFFFFFC4DFLL * v59) >> 10;
  do
  {
    uint64_t v61 = (_DWORD *)(result + v3);
    int v62 = *(_DWORD *)(result + v3);
    int v63 = *(_DWORD *)(result + v3 + 224);
    uint64_t v64 = v63 + v62;
    int v65 = *(_DWORD *)(result + v3 + 32);
    int v66 = *(_DWORD *)(result + v3 + 192);
    uint64_t v67 = v66 + v65;
    int v68 = *(_DWORD *)(result + v3 + 64);
    int v69 = *(_DWORD *)(result + v3 + 160);
    uint64_t v70 = v69 + v68;
    int v71 = *(_DWORD *)(result + v3 + 96);
    int v72 = *(_DWORD *)(result + v3 + 128);
    uint64_t v73 = v72 + v71;
    uint64_t v74 = v64 + v73 + 2;
    uint64_t v75 = v64 - v73;
    uint64_t v76 = v70 + v67;
    uint64_t v77 = v67 - v70;
    int v78 = v62 - v63;
    int v79 = v65 - v66;
    uint64_t v80 = v68 - v69;
    uint64_t v81 = v71 - v72;
    _DWORD *v61 = (unint64_t)(v74 + v76) >> 2;
    v61[32] = (unint64_t)(v74 - v76) >> 2;
    uint64_t v82 = 4433 * (v75 + v77) + 0x4000;
    v61[16] = (unint64_t)(v82 + 6270 * v75) >> 15;
    v61[48] = (unint64_t)(v82 + 0x7FFFFFFFC4DFLL * v77) >> 15;
    uint64_t v83 = v80 + v78;
    uint64_t v84 = v81 + v79;
    uint64_t v85 = 9633 * (v84 + v83) + 0x4000;
    uint64_t v86 = v85 - 3196 * v83;
    uint64_t v87 = v85 - 16069 * v84;
    uint64_t v88 = -7373 * (v81 + v78);
    uint64_t v89 = -20995 * (v80 + v79);
    v61[8] = (unint64_t)(v88 + 12299 * v78 + v86) >> 15;
    v61[24] = (unint64_t)(v89 + 25172 * v79 + v87) >> 15;
    v61[40] = (unint64_t)(v89 + 16819 * v80 + v86) >> 15;
    v61[56] = (unint64_t)(v88 + 2446 * v81 + v87) >> 15;
    v3 += 4;
  }
  while (v3 != 16);
  return result;
}

double sub_1003E1C8C(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2[1];
  uint64_t v5 = (unsigned __int8 *)(*a2 + a3);
  int v6 = *v5;
  int v7 = v5[2];
  LODWORD(v5) = v5[1];
  *(_DWORD *)(a1 + 8) = (5793 * (v7 + v6 - 2 * (int)v5) + 512) >> 10;
  *(_DWORD *)a1 = 8 * (v7 + v6 + v5) - 3072;
  *(_DWORD *)(a1 + 4) = (10033 * (v6 - v7) + 512) >> 10;
  int v8 = (unsigned __int8 *)(v4 + a3);
  int v9 = *v8;
  int v10 = v8[2];
  LODWORD(v8) = v8[1];
  *(_DWORD *)(a1 + 40) = (5793 * (v10 + v9 - 2 * (int)v8) + 512) >> 10;
  *(_DWORD *)(a1 + 32) = 8 * (v10 + v9 + v8) - 3072;
  *(_DWORD *)(a1 + 36) = (10033 * (v9 - v10) + 512) >> 10;
  uint64_t v11 = a2[3];
  int v12 = (unsigned __int8 *)(a2[2] + a3);
  int v13 = *v12;
  int v14 = v12[2];
  LODWORD(v12) = v12[1];
  *(_DWORD *)(a1 + 72) = (5793 * (v14 + v13 - 2 * (int)v12) + 512) >> 10;
  *(_DWORD *)(a1 + 64) = 8 * (v14 + v13 + v12) - 3072;
  *(_DWORD *)(a1 + 68) = (10033 * (v13 - v14) + 512) >> 10;
  int v15 = (unsigned __int8 *)(v11 + a3);
  LODWORD(v11) = *v15;
  int v16 = v15[2];
  int v17 = v16 + v11;
  LODWORD(v15) = v15[1];
  int v18 = v11 - v16;
  LODWORD(v11) = 8 * (v17 + v15) - 3072;
  *(_DWORD *)(a1 + 104) = (5793 * (v17 - 2 * (int)v15) + 512) >> 10;
  *(_DWORD *)(a1 + 96) = v11;
  *(_DWORD *)(a1 + 100) = (10033 * v18 + 512) >> 10;
  uint64_t v19 = a2[5];
  uint64_t v20 = (unsigned __int8 *)(a2[4] + a3);
  int v21 = *v20;
  int v22 = v20[2];
  int v23 = v22 + v21;
  LODWORD(v20) = v20[1];
  int v24 = v21 - v22;
  int v25 = 8 * (v23 + v20) - 3072;
  *(_DWORD *)(a1 + 136) = (5793 * (v23 - 2 * (int)v20) + 512) >> 10;
  LODWORD(v20) = (10033 * v24 + 512) >> 10;
  *(_DWORD *)(a1 + 128) = v25;
  *(_DWORD *)(a1 + 132) = v20;
  uint64_t v26 = (unsigned __int8 *)(v19 + a3);
  LODWORD(v19) = *v26;
  int v27 = v26[2];
  LODWORD(v26) = v26[1];
  int v28 = v27 + v19 - 2 * v26;
  LODWORD(v26) = 8 * (v27 + v19 + v26) - 3072;
  int v29 = *(_DWORD *)(a1 + 4);
  uint64_t v30 = (int)v26 + *(_DWORD *)a1;
  int v32 = *(_DWORD *)(a1 + 32);
  int v31 = *(_DWORD *)(a1 + 36);
  int v34 = *(_DWORD *)(a1 + 64);
  int v33 = *(_DWORD *)(a1 + 68);
  uint64_t v35 = (int)v11 + v34;
  uint64_t v36 = v35 + v30 - 2 * (v25 + v32);
  int v37 = 5793 * v28 + 512;
  int v38 = (10033 * ((int)v19 - v27) + 512) >> 10;
  uint64_t v39 = v25 + v32;
  uint64_t v40 = *(_DWORD *)a1 - (int)v26;
  uint64_t v41 = v32 - v25;
  uint64_t v42 = v34 - (int)v11;
  uint64_t v43 = 5331 * (v42 + v40) + 0x4000;
  unint64_t v44 = v43 + 14564 * (v41 + v40);
  uint64_t v45 = v40 - (v41 + v42);
  unint64_t v46 = v43 + 14564 * (v42 - v41);
  uint64_t v47 = v38 + v29;
  int v48 = *(_DWORD *)(a1 + 100);
  LODWORD(v43) = *(_DWORD *)(a1 + 104);
  uint64_t v49 = v48 + v33;
  *(_DWORD *)(a1 + 168) = v37 >> 10;
  int v50 = v29 - v38;
  int v51 = v20 + v31;
  LODWORD(v20) = v31 - v20;
  *(_DWORD *)a1 = (unint64_t)(14564 * (v35 + v30 + v39) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 4) = (unint64_t)(14564 * (v49 + v47 + v51) + 0x4000) >> 15;
  uint64_t v52 = v33 - v48;
  *(_DWORD *)(a1 + 64) = (unint64_t)(17837 * (v30 - v35) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 68) = (unint64_t)(17837 * (v47 - v49) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 128) = (unint64_t)(10298 * v36 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 132) = (unint64_t)(10298 * (v49 + v47 - 2 * v51) + 0x4000) >> 15;
  uint64_t v53 = 5331 * (v52 + v50) + 0x4000;
  *(_DWORD *)(a1 + 32) = v44 >> 15;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v53 + 14564 * ((int)v20 + (uint64_t)v50)) >> 15;
  *(_DWORD *)(a1 + 96) = (unint64_t)(14564 * v45 + 0x4000) >> 15;
  *(_DWORD *)(a1 + 100) = (unint64_t)(14564 * (v50 - ((int)v20 + v52)) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 160) = v46 >> 15;
  *(_DWORD *)(a1 + 164) = (unint64_t)(v53 + 14564 * (v52 - (int)v20)) >> 15;
  LODWORD(v20) = *(_DWORD *)(a1 + 8);
  LODWORD(v44) = *(_DWORD *)(a1 + 168);
  uint64_t v54 = (int)v44 + (int)v20;
  LODWORD(v46) = *(_DWORD *)(a1 + 40);
  LODWORD(v53) = *(_DWORD *)(a1 + 136);
  uint64_t v55 = (int)v53 + (int)v46;
  int v56 = *(_DWORD *)(a1 + 72);
  uint64_t v57 = (int)v43 + v56;
  uint64_t v58 = (int)v20 - (int)v44;
  uint64_t v59 = (int)v46 - (int)v53;
  uint64_t v60 = v56 - (int)v43;
  *(_DWORD *)(a1 + 8) = (unint64_t)(14564 * (v57 + v54 + v55) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 72) = (unint64_t)(17837 * (v54 - v57) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 136) = (unint64_t)(10298 * (v57 + v54 - 2 * v55) + 0x4000) >> 15;
  uint64_t v61 = 5331 * (v60 + v58) + 0x4000;
  *(_DWORD *)(a1 + 40) = (unint64_t)(v61 + 14564 * (v59 + v58)) >> 15;
  *(_DWORD *)(a1 + 104) = (unint64_t)(14564 * (v58 - (v59 + v60)) + 0x4000) >> 15;
  *(_DWORD *)(a1 + 168) = (unint64_t)(v61 + 14564 * (v60 - v59)) >> 15;
  return result;
}

double sub_1003E205C(uint64_t a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v4 = a2[1];
  uint64_t v5 = (unsigned __int8 *)(*a2 + a3);
  int v6 = *v5;
  LODWORD(v5) = v5[1];
  int v7 = 8 * (v5 + v6) - 2048;
  LODWORD(v5) = 8 * (v6 - v5);
  *(_DWORD *)a1 = v7;
  *(_DWORD *)(a1 + 4) = v5;
  int v8 = (unsigned __int8 *)(v4 + a3);
  int v9 = *v8;
  LODWORD(v8) = v8[1];
  int v10 = 8 * (v8 + v9) - 2048;
  LODWORD(v8) = 8 * (v9 - v8);
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v8;
  uint64_t v11 = a2[3];
  int v12 = (unsigned __int8 *)(a2[2] + a3);
  int v13 = *v12;
  LODWORD(v12) = v12[1];
  int v14 = 8 * (v12 + v13) - 2048;
  LODWORD(v12) = 8 * (v13 - v12);
  *(_DWORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 68) = v12;
  int v15 = (unsigned __int8 *)(v11 + a3);
  LODWORD(v11) = *v15;
  LODWORD(v15) = v15[1];
  int v16 = 8 * (v15 + v11) - 2048;
  LODWORD(v15) = 8 * (v11 - v15);
  LODWORD(v11) = v16 + v7;
  int v17 = v14 + v10;
  int v18 = v7 - v16;
  uint64_t v19 = v10 - v14;
  uint64_t v20 = 4433 * (v19 + v18) + 4096;
  unint64_t v21 = v20 + 6270 * v18;
  unint64_t v22 = v20 + 0x1FFFFFFFC4DFLL * v19;
  LODWORD(v20) = v15 + v5;
  LODWORD(v15) = v5 - v15;
  LODWORD(v5) = v12 + v8;
  LODWORD(v8) = v8 - v12;
  *(_DWORD *)a1 = v17 + v11;
  *(_DWORD *)(a1 + 4) = v5 + v20;
  *(_DWORD *)(a1 + 64) = v11 - v17;
  *(_DWORD *)(a1 + 68) = v20 - v5;
  uint64_t v23 = 4433 * ((int)v8 + (int)v15) + 4096;
  *(_DWORD *)(a1 + 32) = v21 >> 13;
  *(_DWORD *)(a1 + 36) = (unint64_t)(v23 + 6270 * (int)v15) >> 13;
  *(_DWORD *)(a1 + 96) = v22 >> 13;
  *(_DWORD *)(a1 + 100) = (unint64_t)(v23 + 0x1FFFFFFFC4DFLL * (int)v8) >> 13;
  return result;
}

double sub_1003E21AC(_OWORD *a1, void *a2, unsigned int a3)
{
  double result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  int v4 = *(unsigned __int8 *)(*a2 + a3);
  int v5 = *(unsigned __int8 *)(a2[1] + a3);
  *(_DWORD *)a1 = 32 * (v5 + v4) - 0x2000;
  *((_DWORD *)a1 + 8) = 32 * (v4 - v5);
  return result;
}

uint64_t sub_1003E2200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 408);
  int v16 = (_WORD *)(a3 + 64);
  uint64_t v17 = *(void *)(a2 + 88) + 128;
  for (unsigned int i = 9; i > 1; --i)
  {
    uint64_t v19 = v17 + v14;
    int v20 = (unsigned __int16)*(v16 - 24);
    int v21 = (unsigned __int16)*(v16 - 16);
    if (v20 | v21) {
      goto LABEL_9;
    }
    if (*(v16 - 8) || *v16 || v16[8] || v16[16] || v16[24])
    {
      LOWORD(v21) = 0;
LABEL_9:
      LOWORD(a6) = *(v16 - 32);
      *(void *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
      *(float *)&a6 = *(float *)(v19 - 128) * (float)SLODWORD(a6);
      LODWORD(a8) = *(_DWORD *)(v19 - 64);
      float v22 = *(float *)&a8 * (float)(__int16)v21;
      LOWORD(a8) = *v16;
      *(void *)&a8 = vmovl_s16(*(int16x4_t *)&a8).u64[0];
      LODWORD(a9) = *(_DWORD *)v19;
      *(float *)&a8 = *(float *)v19 * (float)SLODWORD(a8);
      LOWORD(a9) = v16[16];
      *(void *)&a9 = vmovl_s16(*(int16x4_t *)&a9).u64[0];
      *(float *)&a9 = *(float *)(v19 + 64) * (float)SLODWORD(a9);
      float v23 = *(float *)&a6 + *(float *)&a8;
      *(float *)&a6 = *(float *)&a6 - *(float *)&a8;
      *(float *)&a8 = v22 + *(float *)&a9;
      float v24 = -(float)((float)(v22 + *(float *)&a9) - (float)((float)(v22 - *(float *)&a9) * 1.4142));
      float v25 = v23 + *(float *)&a8;
      *(float *)&a8 = v23 - *(float *)&a8;
      float v26 = *(float *)&a6 + v24;
      *(float *)&a6 = *(float *)&a6 - v24;
      LODWORD(a12) = *(_DWORD *)(v19 - 96);
      float v27 = *(float *)&a12 * (float)(__int16)v20;
      LOWORD(a12) = *(v16 - 8);
      *(void *)&a12 = vmovl_s16(*(int16x4_t *)&a12).u64[0];
      LODWORD(a13) = *(_DWORD *)(v19 - 32);
      *(float *)&a12 = *(float *)&a13 * (float)SLODWORD(a12);
      LOWORD(a13) = v16[8];
      *(void *)&a13 = vmovl_s16(*(int16x4_t *)&a13).u64[0];
      v13.i32[0] = *(_DWORD *)(v19 + 32);
      *(float *)&a13 = *(float *)v13.i32 * (float)SLODWORD(a13);
      v13.i16[0] = v16[24];
      int16x4_t v13 = (int16x4_t)vmovl_s16(v13).u64[0];
      *(float *)v13.i32 = *(float *)(v19 + 96) * (float)v13.i32[0];
      float v28 = *(float *)&a12 + *(float *)&a13;
      *(float *)&a12 = *(float *)&a13 - *(float *)&a12;
      *(float *)&a13 = v27 + *(float *)v13.i32;
      float v29 = v27 - *(float *)v13.i32;
      *(float *)v13.i32 = v28 + *(float *)&a13;
      *(float *)&a9 = (float)(*(float *)&a13 - v28) * 1.4142;
      *(float *)&a13 = (float)(*(float *)&a12 + v29) * 1.8478;
      *(float *)&a12 = (float)(*(float *)&a13 + (float)(*(float *)&a12 * -2.6131)) - *(float *)v13.i32;
      *(float *)&a9 = *(float *)&a9 - *(float *)&a12;
      float v30 = (float)(*(float *)&a13 + (float)(v29 * -1.0824)) - *(float *)&a9;
      int v31 = (float *)&v63[v14];
      float *v31 = v25 + *(float *)v13.i32;
      v31[56] = v25 - *(float *)v13.i32;
      v31[8] = v26 + *(float *)&a12;
      v31[48] = v26 - *(float *)&a12;
      v31[16] = *(float *)&a6 + *(float *)&a9;
      v31[40] = *(float *)&a6 - *(float *)&a9;
      v31[24] = *(float *)&a8 + v30;
      *(float *)&a6 = *(float *)&a8 - v30;
      uint64_t v32 = 32;
      goto LABEL_10;
    }
    LOWORD(a6) = *(v16 - 32);
    *(void *)&a6 = vmovl_s16(*(int16x4_t *)&a6).u64[0];
    *(float *)&a6 = *(float *)(v19 - 128) * (float)SLODWORD(a6);
    int v33 = &v63[v14];
    *int v33 = LODWORD(a6);
    v33[8] = LODWORD(a6);
    v33[16] = LODWORD(a6);
    v33[24] = LODWORD(a6);
    v33[32] = LODWORD(a6);
    v33[40] = LODWORD(a6);
    v33[48] = LODWORD(a6);
    uint64_t v32 = 56;
LABEL_10:
    *(_DWORD *)&v63[4 * v32 + v14] = LODWORD(a6);
    v14 += 4;
    ++v16;
  }
  uint64_t v34 = 0;
  uint64_t v35 = v15 - 384;
  do
  {
    uint64_t v36 = (float *)&v63[4 * v34];
    int v37 = (unsigned char *)(*(void *)(a4 + v34) + a5);
    float v38 = v36[1];
    float v39 = *v36 + 512.5;
    float v41 = v36[4];
    float v40 = v36[5];
    float v42 = v39 + v41;
    float v43 = v36[2];
    float v44 = v36[3];
    float v45 = v39 - v41;
    float v47 = v36[6];
    float v46 = v36[7];
    float v48 = v43 + v47;
    float v49 = -(float)((float)(v43 + v47) - (float)((float)(v43 - v47) * 1.4142));
    float v50 = v42 + v48;
    float v51 = v42 - v48;
    float v52 = v40 + v44;
    float v53 = v40 - v44;
    float v54 = v38 + v46;
    float v55 = v38 - v46;
    float v56 = v45 + v49;
    float v57 = v45 - v49;
    float v58 = (float)(v53 + v55) * 1.8478;
    float v59 = v58 + (float)(v55 * -1.0824);
    float v60 = (float)(v58 + (float)(v53 * -2.6131)) - (float)(v52 + v54);
    float v61 = (float)((float)(v54 - v52) * 1.4142) - v60;
    *int v37 = *(unsigned char *)(v35 + ((int)(float)(v50 + (float)(v52 + v54)) & 0x3FFLL));
    v37[7] = *(unsigned char *)(v35 + ((int)(float)(v50 - (float)(v52 + v54)) & 0x3FFLL));
    v37[1] = *(unsigned char *)(v35 + ((int)(float)(v56 + v60) & 0x3FFLL));
    v37[6] = *(unsigned char *)(v35 + ((int)(float)(v56 - v60) & 0x3FFLL));
    v37[2] = *(unsigned char *)(v35 + ((int)(float)(v57 + v61) & 0x3FFLL));
    v37[5] = *(unsigned char *)(v35 + ((int)(float)(v57 - v61) & 0x3FFLL));
    v37[3] = *(unsigned char *)(v35 + ((int)(float)(v51 + (float)(v59 - v61)) & 0x3FFLL));
    uint64_t result = *(unsigned __int8 *)(v35 + ((int)(float)(v51 - (float)(v59 - v61)) & 0x3FFLL));
    v37[4] = result;
    v34 += 8;
  }
  while (v34 != 64);
  return result;
}

int8x8_t sub_1003E25E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 408);
  int v7 = (__int16 *)(a3 + 64);
  uint64_t v8 = *(void *)(a2 + 88) + 128;
  for (unsigned int i = 9; i > 1; --i)
  {
    int v10 = (_DWORD *)(v8 + v5);
    unsigned __int16 v11 = *(v7 - 16);
    if ((unsigned __int16)*(v7 - 24) | v11) {
      goto LABEL_9;
    }
    if (*(v7 - 8) || *v7 || v7[8] || v7[16] || v7[24])
    {
      unsigned __int16 v11 = 0;
LABEL_9:
      int v12 = *(v10 - 32) * *(v7 - 32);
      int v13 = *(v10 - 16) * (__int16)v11;
      int v14 = *v10 * *v7;
      int v15 = v10[16] * v7[16];
      int v16 = v14 + v12;
      int v17 = v12 - v14;
      int v18 = v15 + v13;
      int v19 = ((unint64_t)(362 * (v13 - v15)) >> 8) - (v15 + v13);
      int v20 = v18 + v16;
      int v21 = v16 - v18;
      int v22 = v19 + v17;
      int v23 = v17 - v19;
      int v24 = *(v10 - 24) * *(v7 - 24);
      int v25 = *(v10 - 8) * *(v7 - 8);
      int v26 = v10[8] * v7[8];
      int v27 = v10[24] * v7[24];
      int v28 = v26 + v25;
      int v29 = v26 - v25;
      int v30 = v27 + v24;
      int v31 = v24 - v27;
      int v32 = v30 + v28;
      unint64_t v33 = (unint64_t)(362 * (v30 - v28)) >> 8;
      uint64_t v34 = &v73[v5];
      *uint64_t v34 = v32 + v20;
      unint64_t v35 = (unint64_t)(473 * (v31 + v29)) >> 8;
      int v36 = v35 - (v32 + ((unint64_t)(669 * v29) >> 8));
      LODWORD(v33) = v33 - v36;
      v34[56] = v20 - v32;
      v34[8] = v36 + v22;
      int v37 = v35 - ((unint64_t)(277 * v31) >> 8) - v33;
      v34[48] = v22 - v36;
      v34[16] = v33 + v23;
      v34[40] = v23 - v33;
      v34[24] = v37 + v21;
      int v38 = v21 - v37;
      uint64_t v39 = 32;
      goto LABEL_10;
    }
    int v38 = *(v10 - 32) * *(v7 - 32);
    float v40 = (int *)&v73[v5];
    *float v40 = v38;
    v40[8] = v38;
    v40[16] = v38;
    v40[24] = v38;
    v40[32] = v38;
    v40[40] = v38;
    v40[48] = v38;
    uint64_t v39 = 56;
LABEL_10:
    *(_DWORD *)&v73[4 * v39 + v5] = v38;
    v5 += 4;
    ++v7;
  }
  uint64_t v41 = v6 - 384;
  uint64_t v42 = 28;
  uint64_t v43 = a5;
  do
  {
    while (1)
    {
      float v44 = (int *)&v73[v42];
      float v45 = (unsigned char *)(*a4 + v43);
      int v46 = *(_DWORD *)&v73[v42 - 24];
      unint64_t v47 = (*(_DWORD *)&v73[v42 - 28] + 16400);
      int v48 = *(_DWORD *)&v73[v42 - 20];
      if (!*(void *)&v73[v42 - 24]) {
        break;
      }
LABEL_20:
      int v50 = *(v44 - 4);
      int v49 = *(v44 - 3);
      int v51 = v49 + v47;
      int v52 = v47 - v49;
      int v54 = *(v44 - 2);
      int v53 = *(v44 - 1);
      int v55 = v53 + v48;
      int v56 = ((362 * (unint64_t)(v48 - v53)) >> 8) - (v53 + v48);
      int v57 = v55 + v51;
      int v58 = v51 - v55;
      int v59 = v56 + v52;
      int v60 = v52 - v56;
      int v61 = v50 + v54;
      unsigned int v62 = v54 - v50;
      int v63 = *v44;
      int v64 = v63 + v46;
      unsigned int v65 = v46 - v63;
      int v66 = v64 + v61;
      unint64_t v67 = (362 * (unint64_t)(v64 - v61)) >> 8;
      *float v45 = *(unsigned char *)(v41 + (((unint64_t)(v66 + v57) >> 5) & 0x3FF));
      unint64_t v68 = (473 * (unint64_t)(v65 + v62)) >> 8;
      int v69 = v66 + ((669 * (unint64_t)v62) >> 8);
      v45[7] = *(unsigned char *)(v41 + (((unint64_t)(v57 - v66) >> 5) & 0x3FF));
      v45[1] = *(unsigned char *)(v41 + (((unint64_t)(v68 - v69 + v59) >> 5) & 0x3FF));
      LODWORD(v67) = v67 - (v68 - v69);
      v45[6] = *(unsigned char *)(v41 + (((unint64_t)(v59 - (v68 - v69)) >> 5) & 0x3FF));
      v45[2] = *(unsigned char *)(v41 + (((unint64_t)(v67 + v60) >> 5) & 0x3FF));
      int v70 = v68 - ((277 * (unint64_t)v65) >> 8) - v67;
      v45[5] = *(unsigned char *)(v41 + (((unint64_t)(v60 - v67) >> 5) & 0x3FF));
      v45[3] = *(unsigned char *)(v41 + (((unint64_t)(v70 + v58) >> 5) & 0x3FF));
      v45[4] = *(unsigned char *)(v41 + (((unint64_t)(v58 - v70) >> 5) & 0x3FF));
      ++a4;
      v42 += 32;
      if (v42 == 284) {
        return result;
      }
    }
    if (*(v44 - 4)
      || *(_DWORD *)&v73[v42 - 12]
      || *(_DWORD *)&v73[v42 - 8]
      || *(_DWORD *)&v73[v42 - 4]
      || *(_DWORD *)&v73[v42])
    {
      int v48 = 0;
      goto LABEL_20;
    }
    unsigned int v71 = *(unsigned __int8 *)(v41 + ((v47 >> 5) & 0x3FF));
    int8x8_t result = vdup_n_s8(v71);
    *(_DWORD *)float v45 = result.i32[0];
    v45[4] = v71;
    v45[5] = v71;
    v45[6] = v71;
    v45[7] = v71;
    ++a4;
    v42 += 32;
  }
  while (v42 != 284);
  return result;
}

int8x8_t sub_1003E29F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = (__int16 *)(a3 + 64);
  uint64_t v7 = *(void *)(a2 + 88) + 128;
  uint64_t v75 = *(void *)(a1 + 408);
  for (unsigned int i = 9; i > 1; --i)
  {
    int v9 = (_DWORD *)(v7 + v5);
    unsigned __int16 v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10) {
      goto LABEL_9;
    }
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      unsigned __int16 v10 = 0;
LABEL_9:
      uint64_t v11 = (uint64_t)(*v9 * *v6) << 13;
      uint64_t v12 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      uint64_t v13 = v11 + v12;
      uint64_t v14 = v12 - v11;
      uint64_t v15 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      uint64_t v16 = (int)v9[16] * (uint64_t)v6[16];
      uint64_t v17 = 4433 * (v15 + v16);
      uint64_t v18 = v17 + 6270 * v15;
      uint64_t v19 = v17 - 15137 * v16;
      uint64_t v20 = v18 + v13;
      uint64_t v21 = v13 - v18;
      uint64_t v22 = v19 + v14;
      uint64_t v23 = v14 - v19;
      uint64_t v24 = (int)v9[24] * (uint64_t)v6[24];
      uint64_t v25 = (int)v9[8] * (uint64_t)v6[8];
      int v26 = *(v9 - 8);
      uint64_t v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      uint64_t v28 = v24 + v26 * (uint64_t)*(v6 - 8);
      uint64_t v29 = 9633 * (v25 + v27 + v28);
      uint64_t v30 = v29 - 16069 * v28;
      uint64_t v31 = v29 - 3196 * (v25 + v27);
      uint64_t v32 = -7373 * (v24 + v27);
      uint64_t v33 = v32 + 2446 * v24 + v30;
      uint64_t v34 = v32 + 12299 * v27 + v31;
      uint64_t v35 = -20995 * (v25 + v26 * (uint64_t)*(v6 - 8));
      uint64_t v36 = v35 + 16819 * v25 + v31;
      uint64_t v37 = v35 + 25172 * v26 * (uint64_t)*(v6 - 8) + v30;
      int v38 = &v77[v5];
      _DWORD *v38 = (unint64_t)(v34 + v20) >> 11;
      v38[56] = (unint64_t)(v20 - v34) >> 11;
      v38[8] = (unint64_t)(v37 + v22) >> 11;
      v38[48] = (unint64_t)(v22 - v37) >> 11;
      v38[16] = (unint64_t)(v36 + v23) >> 11;
      v38[40] = (unint64_t)(v23 - v36) >> 11;
      v38[24] = (unint64_t)(v33 + v21) >> 11;
      unint64_t v39 = (unint64_t)(v21 - v33) >> 11;
      uint64_t v40 = 32;
      goto LABEL_10;
    }
    LODWORD(v39) = 4 * *(v6 - 32) * *(v9 - 32);
    uint64_t v41 = &v77[v5];
    *uint64_t v41 = v39;
    v41[8] = v39;
    v41[16] = v39;
    v41[24] = v39;
    v41[32] = v39;
    v41[40] = v39;
    v41[48] = v39;
    uint64_t v40 = 56;
LABEL_10:
    *(_DWORD *)&v77[4 * v40 + v5] = v39;
    v5 += 4;
    ++v6;
  }
  uint64_t v42 = v75 - 384;
  for (uint64_t j = 28; j != 284; j += 32)
  {
    while (1)
    {
      float v44 = (int *)&v77[j];
      float v45 = (unsigned char *)(*a4 + a5);
      int v46 = *(_DWORD *)&v77[j - 24];
      unint64_t v47 = *(int *)&v77[j - 28] + 16400;
      uint64_t v48 = *(unsigned int *)&v77[j - 20];
      if (v46) {
        BOOL v49 = 0;
      }
      else {
        BOOL v49 = v48 == 0;
      }
      if (!v49) {
        goto LABEL_24;
      }
      if (!*(v44 - 4)
        && !*(_DWORD *)&v77[j - 12]
        && !*(_DWORD *)&v77[j - 8]
        && !*(_DWORD *)&v77[j - 4]
        && !*(_DWORD *)&v77[j])
      {
        break;
      }
      LODWORD(v48) = 0;
LABEL_24:
      int v51 = *(v44 - 4);
      int v50 = *(v44 - 3);
      int v52 = (v47 + v50) << 13;
      int v53 = (v47 - v50) << 13;
      int v55 = *(v44 - 2);
      int v54 = *(v44 - 1);
      int v56 = 4433 * (v54 + v48);
      int v57 = v56 + 6270 * v48;
      int v58 = v56 - 15137 * v54;
      int v59 = v57 + v52;
      int v60 = v52 - v57;
      int v61 = v58 + v53;
      int v62 = v53 - v58;
      int v63 = *v44;
      int v64 = 9633 * (v51 + v63 + v55 + v46);
      int v65 = v64 - 16069 * (v51 + v63);
      int v66 = v64 - 3196 * (v55 + v46);
      int v67 = -7373 * (v63 + v46);
      int v68 = v67 + 12299 * v46 + v66;
      *float v45 = *(unsigned char *)(v42 + (((unint64_t)(v68 + v59) >> 18) & 0x3FF));
      unint64_t v69 = (v59 - v68);
      int v70 = -20995 * (v51 + v55);
      int v71 = v70 + 25172 * v51 + v65;
      v45[7] = *(unsigned char *)(v42 + ((v69 >> 18) & 0x3FF));
      v45[1] = *(unsigned char *)(v42 + (((unint64_t)(v71 + v61) >> 18) & 0x3FF));
      int v72 = v70 + 16819 * v55 + v66;
      v45[6] = *(unsigned char *)(v42 + (((unint64_t)(v61 - v71) >> 18) & 0x3FF));
      v45[2] = *(unsigned char *)(v42 + (((unint64_t)(v72 + v62) >> 18) & 0x3FF));
      LODWORD(v69) = v67 + 2446 * v63 + v65;
      v45[5] = *(unsigned char *)(v42 + (((unint64_t)(v62 - v72) >> 18) & 0x3FF));
      v45[3] = *(unsigned char *)(v42 + (((unint64_t)(v69 + v60) >> 18) & 0x3FF));
      v45[4] = *(unsigned char *)(v42 + (((unint64_t)(v60 - v69) >> 18) & 0x3FF));
      ++a4;
      j += 32;
      if (j == 284) {
        return result;
      }
    }
    unsigned int v73 = *(unsigned __int8 *)(v42 + ((v47 >> 5) & 0x3FF));
    int8x8_t result = vdup_n_s8(v73);
    *(_DWORD *)float v45 = result.i32[0];
    v45[4] = v73;
    v45[5] = v73;
    v45[6] = v73;
    v45[7] = v73;
    ++a4;
  }
  return result;
}

uint64_t sub_1003E2E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v61 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = &v63[4 * v5];
    uint64_t v8 = (_DWORD *)(v6 + 4 * v5);
    int v9 = (__int16 *)(a3 + 2 * v5);
    uint64_t v10 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    uint64_t v11 = (int)v8[16] * (uint64_t)v9[16];
    uint64_t v12 = (int)v8[32] * (uint64_t)v9[32];
    uint64_t v13 = (int)v8[48] * (uint64_t)v9[48];
    uint64_t v14 = 7223 * (v12 - v13);
    uint64_t v15 = 2578 * (v11 - v12);
    uint64_t v16 = v10 - 15083 * v12 + v15 + v14;
    uint64_t v17 = v10 + 10438 * (v11 + v13);
    uint64_t v18 = v14 - 637 * v13 + v17;
    uint64_t v19 = v15 - 20239 * v11 + v17;
    unint64_t v20 = v10 + 11585 * (v12 - (v11 + v13));
    uint64_t v21 = (int)v8[8] * (uint64_t)v9[8];
    uint64_t v22 = (int)v8[24] * (uint64_t)v9[24];
    uint64_t v23 = (int)v8[40] * (uint64_t)v9[40];
    uint64_t v24 = 7663 * (v21 + v22);
    uint64_t v25 = 1395 * (v21 - v22);
    uint64_t v26 = v24 - v25;
    uint64_t v27 = v24 + v25 - 11295 * (v22 + v23);
    uint64_t v28 = 5027 * (v21 + v23);
    uint64_t v29 = v28 + v26;
    uint64_t v30 = v28 + 15326 * v23 - 11295 * (v22 + v23);
    *uint64_t v7 = (unint64_t)(v29 + v18) >> 11;
    v7[42] = (unint64_t)(v18 - v29) >> 11;
    v7[7] = (unint64_t)(v27 + v16) >> 11;
    v7[35] = (unint64_t)(v16 - v27) >> 11;
    v7[14] = (unint64_t)(v30 + v19) >> 11;
    v7[28] = (unint64_t)(v19 - v30) >> 11;
    v7[21] = v20 >> 11;
    ++v5;
  }
  while (v5 != 7);
  uint64_t v31 = 0;
  uint64_t v32 = v61 - 384;
  uint64_t result = 11585;
  do
  {
    uint64_t v34 = *a4++;
    int v35 = *(_DWORD *)&v63[v31 + 4];
    int v36 = (*(_DWORD *)&v63[v31] << 13) + 134348800;
    int v38 = *(_DWORD *)&v63[v31 + 20];
    int v37 = *(_DWORD *)&v63[v31 + 24];
    int v39 = *(_DWORD *)&v63[v31 + 16];
    int v40 = 7223 * (v39 - v37);
    int v42 = *(_DWORD *)&v63[v31 + 8];
    int v41 = *(_DWORD *)&v63[v31 + 12];
    int v43 = 2578 * (v42 - v39);
    int v44 = v43 + v40;
    int v45 = v37 + v42;
    int v46 = v40 - 637 * v37;
    int v47 = 7663 * (v41 + v35);
    int v48 = v43 - 20239 * v42;
    int v49 = 1395 * (v35 - v41);
    int v50 = v47 - v49;
    int v51 = v47 + v49;
    int v52 = v36 + 10438 * v45;
    int v53 = v46 + v52;
    int v54 = 5027 * (v38 + v35);
    int v55 = v50 + v54;
    int v56 = v36 - 15083 * v39 + v44;
    int v57 = (unsigned char *)(v34 + a5);
    unsigned char *v57 = *(unsigned char *)(v32 + (((unint64_t)(v55 + v53) >> 18) & 0x3FF));
    int v58 = -11295 * (v38 + v41);
    int v59 = v51 + v58;
    v57[6] = *(unsigned char *)(v32 + (((unint64_t)(v53 - v55) >> 18) & 0x3FF));
    int v60 = v54 + 15326 * v38 + v58;
    v57[1] = *(unsigned char *)(v32 + (((unint64_t)(v59 + v56) >> 18) & 0x3FF));
    v57[5] = *(unsigned char *)(v32 + (((unint64_t)(v56 - v59) >> 18) & 0x3FF));
    v57[2] = *(unsigned char *)(v32 + (((unint64_t)(v60 + v48 + v52) >> 18) & 0x3FF));
    v57[4] = *(unsigned char *)(v32 + (((unint64_t)(v48 + v52 - v60) >> 18) & 0x3FF));
    v57[3] = *(unsigned char *)(v32 + (((unint64_t)(v36 + 11585 * (v39 - v45)) >> 18) & 0x3FF));
    v31 += 28;
  }
  while (v31 != 196);
  return result;
}

unsigned char *sub_1003E31D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 408);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v43[4 * v5];
    int v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[32] * (uint64_t)v10[32];
    uint64_t v13 = v11 + 5793 * v12;
    unint64_t v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    uint64_t v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    uint64_t v16 = v15 + v13;
    uint64_t v17 = v13 - v15;
    uint64_t v18 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v19 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v20 = (int)v9[40] * (uint64_t)v10[40];
    uint64_t v21 = 2998 * (v18 + v20);
    uint64_t v22 = v21 + ((v18 + v19) << 13);
    uint64_t v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = 4 * (v18 - (v19 + v20));
    *uint64_t v8 = (unint64_t)(v22 + v16) >> 11;
    v8[30] = (unint64_t)(v16 - v22) >> 11;
    v8[6] = v18 + v14;
    v8[24] = v14 - v18;
    v8[12] = (unint64_t)(v23 + v17) >> 11;
    v8[18] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while (v5 != 6);
  uint64_t v24 = 0;
  uint64_t v25 = v6 - 384;
  uint64_t v26 = a5;
  do
  {
    uint64_t v27 = *a4++;
    uint64_t result = (unsigned char *)(v27 + v26);
    int v29 = *(_DWORD *)&v43[v24 + 4];
    int v30 = *(_DWORD *)&v43[v24 + 16];
    int v31 = *(_DWORD *)&v43[v24 + 20];
    int v32 = (*(_DWORD *)&v43[v24] << 13) + 134348800;
    int v33 = v32 + 5793 * v30;
    int v34 = *(_DWORD *)&v43[v24 + 12];
    int v35 = 10033 * *(_DWORD *)&v43[v24 + 8];
    int v36 = 2998 * (v31 + v29);
    int v37 = v31 - v34;
    int v38 = v34 + v31;
    int v39 = v36 + ((v34 + v29) << 13);
    int v40 = v32 - 11586 * v30;
    int v41 = (v29 - v38) << 13;
    *uint64_t result = *(unsigned char *)(v25 + (((unint64_t)(v39 + v33 + v35) >> 18) & 0x3FF));
    int v42 = v36 + (v37 << 13);
    result[5] = *(unsigned char *)(v25 + (((unint64_t)(v33 + v35 - v39) >> 18) & 0x3FF));
    result[1] = *(unsigned char *)(v25 + (((unint64_t)(v41 + v40) >> 18) & 0x3FF));
    result[4] = *(unsigned char *)(v25 + (((unint64_t)(v40 - v41) >> 18) & 0x3FF));
    result[2] = *(unsigned char *)(v25 + (((unint64_t)(v42 + v33 - v35) >> 18) & 0x3FF));
    result[3] = *(unsigned char *)(v25 + (((unint64_t)(v33 - v35 - v42) >> 18) & 0x3FF));
    v24 += 24;
  }
  while (v24 != 144);
  return result;
}

uint64_t sub_1003E3428(uint64_t a1, uint64_t a2, __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(_DWORD **)(a2 + 88);
  int v6 = ((*v5 * *a3) << 13) | 0x400;
  int v7 = v5[16] * a3[16];
  int v8 = v5[33];
  int v9 = v5[32] * a3[32];
  int v10 = v9 + v7;
  int v11 = v7 - v9;
  int v104 = v10;
  int v106 = v6 + 2896 * v11;
  unsigned int v111 = v6 - 11584 * v11;
  int v12 = v5[8] * a3[8];
  int v13 = v5[24] * a3[24];
  uint64_t v14 = ((uint64_t)(v5[1] * a3[1]) << 13) | 0x400;
  uint64_t v15 = (int)v5[17] * (uint64_t)a3[17];
  uint64_t v16 = v15 + v8 * (uint64_t)a3[33];
  uint64_t v17 = v15 - v8 * (uint64_t)a3[33];
  uint64_t v18 = v14 + 2896 * v17;
  unint64_t v109 = v14 + 0x7FFFFFFD2C0 * v17;
  uint64_t v19 = (int)v5[9] * (uint64_t)a3[9];
  uint64_t v20 = (int)v5[25] * (uint64_t)a3[25];
  uint64_t v21 = 6810 * (v19 + v20);
  uint64_t v97 = v21 + 4209 * v19;
  uint64_t v107 = v21 - 17828 * v20;
  uint64_t v22 = ((uint64_t)(v5[2] * a3[2]) << 13) | 0x400;
  uint64_t v23 = (int)v5[18] * (uint64_t)a3[18];
  int v25 = v5[34];
  int v24 = v5[35];
  uint64_t v26 = v23 + v25 * (uint64_t)a3[34];
  uint64_t v27 = v23 - v25 * (uint64_t)a3[34];
  uint64_t v28 = v22 + 2896 * v27;
  unint64_t v99 = v22 + 0x7FFFFFFD2C0 * v27;
  uint64_t v29 = (int)v5[19] * (uint64_t)a3[19];
  uint64_t v30 = v29 + v24 * (uint64_t)a3[35];
  uint64_t v31 = v29 - v24 * (uint64_t)a3[35];
  uint64_t v32 = (int)v5[20] * (uint64_t)a3[20];
  int v33 = v5[36];
  uint64_t v34 = v32 + v33 * (uint64_t)a3[36];
  uint64_t v35 = v32 - v33 * (uint64_t)a3[36];
  uint64_t v36 = (int)v5[10] * (uint64_t)a3[10];
  uint64_t v37 = (int)v5[26] * (uint64_t)a3[26];
  uint64_t v38 = 6810 * (v36 + v37);
  uint64_t v103 = v38 + 4209 * v36;
  uint64_t v39 = v38 - 17828 * v37;
  uint64_t v40 = ((uint64_t)(v5[3] * a3[3]) << 13) | 0x400;
  uint64_t v41 = v40 + 2896 * v31;
  unint64_t v94 = v40 + 0x7FFFFFFD2C0 * v31;
  uint64_t v42 = (int)v5[11] * (uint64_t)a3[11];
  uint64_t v43 = (int)v5[27] * (uint64_t)a3[27];
  uint64_t v44 = 6810 * (v42 + v43);
  uint64_t v96 = v44 + 4209 * v42;
  uint64_t v45 = v44 - 17828 * v43;
  uint64_t v46 = ((uint64_t)(v5[4] * a3[4]) << 13) | 0x400;
  unint64_t v93 = v46 + 0x7FFFFFFD2C0 * v35;
  uint64_t v47 = v46 + 2896 * v35;
  uint64_t v48 = (int)v5[12] * (uint64_t)a3[12];
  uint64_t v49 = (int)v5[28] * (uint64_t)a3[28];
  uint64_t v50 = 6810 * (v48 + v49);
  uint64_t v51 = v50 - 17828 * v49;
  uint64_t v52 = 6476 * v26;
  uint64_t v101 = v50 + 4209 * v48;
  uint64_t v102 = v28 + 6476 * v26;
  unint64_t v53 = (unint64_t)(v103 + v102) >> 11;
  uint64_t v54 = 6476 * v34;
  uint64_t v100 = v47 + 6476 * v34;
  unint64_t v55 = (unint64_t)(v101 + v100) >> 11;
  LODWORD(v36) = v53 - v55;
  LODWORD(v48) = 6476 * v104;
  int v56 = v13;
  LODWORD(v43) = 6810 * (v13 + v12);
  int v105 = v43 + 4209 * v12;
  int v98 = v106 + v48;
  LODWORD(v46) = ((v105 + v106 + v48) >> 11 << 13) + 134348800;
  LODWORD(v53) = 6476 * (v55 + v53);
  LODWORD(v34) = v46 + 2896 * v36;
  LODWORD(v35) = v34 + v53;
  LODWORD(v34) = v34 - v53;
  unint64_t v57 = (v46 + 268423872 * v36);
  uint64_t v58 = 6476 * v16;
  uint64_t v59 = v18;
  uint64_t v108 = v18 + 6476 * v16;
  unint64_t v60 = (unint64_t)(v97 + v108) >> 11;
  uint64_t v95 = v41 + 6476 * v30;
  unint64_t v61 = (unint64_t)(v96 + v95) >> 11;
  uint64_t result = *(void *)(a1 + 408) - 384;
  int v63 = (unsigned char *)(*a4 + a5);
  int v64 = 6810 * (v61 + v60);
  LODWORD(v60) = v64 + 4209 * v60;
  *int v63 = *(unsigned char *)(result + (((unint64_t)(v60 + v35) >> 18) & 0x3FF));
  int v65 = v64 - 17828 * v61;
  v63[4] = *(unsigned char *)(result + (((unint64_t)(v35 - v60) >> 18) & 0x3FF));
  v63[1] = *(unsigned char *)(result + (((unint64_t)(v65 + v34) >> 18) & 0x3FF));
  v63[3] = *(unsigned char *)(result + (((unint64_t)(v34 - v65) >> 18) & 0x3FF));
  v63[2] = *(unsigned char *)(result + ((v57 >> 18) & 0x3FF));
  LODWORD(v35) = v106 - v48;
  LODWORD(v61) = v43 - 17828 * v56;
  uint64_t v66 = v59 - v58;
  uint64_t v67 = v41 - 6476 * v30;
  uint64_t v68 = v47 - v54;
  unint64_t v69 = (unint64_t)(v39 + v28 - v52) >> 11;
  unint64_t v70 = (unint64_t)(v51 + v47 - v54) >> 11;
  int v71 = v70 + v69;
  LODWORD(v69) = v69 - v70;
  LODWORD(v70) = ((v61 + v35) >> 11 << 13) + 134348800;
  v71 *= 6476;
  LODWORD(v54) = v70 + 2896 * v69;
  LODWORD(v63) = v54 + v71;
  int v72 = v54 - v71;
  unint64_t v73 = (v70 + 268423872 * v69);
  unint64_t v74 = (unint64_t)(v107 + v66) >> 11;
  unint64_t v75 = (unint64_t)(v45 + v67) >> 11;
  int v76 = 6810 * (v75 + v74);
  LODWORD(v74) = v76 + 4209 * v74;
  uint64_t v77 = (unsigned char *)(a4[1] + a5);
  *uint64_t v77 = *(unsigned char *)(result + (((unint64_t)(v74 + v63) >> 18) & 0x3FF));
  LODWORD(v75) = v76 - 17828 * v75;
  v77[4] = *(unsigned char *)(result + (((unint64_t)(v63 - v74) >> 18) & 0x3FF));
  v77[1] = *(unsigned char *)(result + (((unint64_t)(v75 + v72) >> 18) & 0x3FF));
  v77[3] = *(unsigned char *)(result + (((unint64_t)(v72 - v75) >> 18) & 0x3FF));
  v77[2] = *(unsigned char *)(result + ((v73 >> 18) & 0x3FF));
  unint64_t v78 = v68 - v51;
  LODWORD(v74) = (v111 >> 11 << 13) + 134348800;
  int v79 = 6476 * ((v93 >> 11) + (v99 >> 11));
  int v80 = (v99 >> 11) - (v93 >> 11);
  LODWORD(v73) = v74 + 2896 * v80;
  LODWORD(v75) = v73 + v79;
  LODWORD(v73) = v73 - v79;
  unint64_t v81 = (v74 + 268423872 * v80);
  LODWORD(v74) = 6810 * ((v94 >> 11) + (v109 >> 11));
  int v82 = v74 + 4209 * (v109 >> 11);
  uint64_t v83 = (unsigned char *)(a4[2] + a5);
  *uint64_t v83 = *(unsigned char *)(result + (((unint64_t)(v82 + v75) >> 18) & 0x3FF));
  LODWORD(v74) = v74 - 17828 * (v94 >> 11);
  v83[4] = *(unsigned char *)(result + (((unint64_t)(v75 - v82) >> 18) & 0x3FF));
  v83[1] = *(unsigned char *)(result + (((unint64_t)(v74 + v73) >> 18) & 0x3FF));
  unint64_t v84 = (unint64_t)(v66 - v107) >> 11;
  unint64_t v85 = (unint64_t)(v28 - v52 - v39) >> 11;
  unint64_t v86 = (unint64_t)(v67 - v45) >> 11;
  v83[3] = *(unsigned char *)(result + (((unint64_t)(v73 - v74) >> 18) & 0x3FF));
  v78 >>= 11;
  v83[2] = *(unsigned char *)(result + ((v81 >> 18) & 0x3FF));
  LODWORD(v35) = ((v35 - v61) >> 11 << 13) + 134348800;
  LODWORD(v73) = 6476 * (v78 + v85);
  LODWORD(v85) = v85 - v78;
  LODWORD(v78) = v35 + 2896 * v85;
  LODWORD(v74) = v78 + v73;
  LODWORD(v78) = v78 - v73;
  LODWORD(v73) = 6810 * (v86 + v84);
  LODWORD(v84) = v73 + 4209 * v84;
  uint64_t v87 = (unsigned char *)(a4[3] + a5);
  *uint64_t v87 = *(unsigned char *)(result + (((unint64_t)(v84 + v74) >> 18) & 0x3FF));
  LODWORD(v86) = v73 - 17828 * v86;
  v87[4] = *(unsigned char *)(result + (((unint64_t)(v74 - v84) >> 18) & 0x3FF));
  v87[1] = *(unsigned char *)(result + (((unint64_t)(v86 + v78) >> 18) & 0x3FF));
  v87[3] = *(unsigned char *)(result + (((unint64_t)(v78 - v86) >> 18) & 0x3FF));
  v87[2] = *(unsigned char *)(result + (((unint64_t)(v35 + 268423872 * v85) >> 18) & 0x3FF));
  unint64_t v88 = (unint64_t)(v102 - v103) >> 11;
  unint64_t v89 = (unint64_t)(v100 - v101) >> 11;
  LODWORD(v86) = ((v98 - v105) >> 11 << 13) + 134348800;
  LODWORD(v78) = 6476 * (v89 + v88);
  unint64_t v90 = (unint64_t)(v108 - v97) >> 11;
  unint64_t v91 = (unint64_t)(v95 - v96) >> 11;
  LODWORD(v88) = v88 - v89;
  LODWORD(v89) = 6810 * (v91 + v90);
  LODWORD(v90) = v89 + 4209 * v90;
  LODWORD(v74) = v86 + 2896 * v88;
  LODWORD(v91) = v89 - 17828 * v91;
  unint64_t v92 = (unsigned char *)(a4[4] + a5);
  unsigned char *v92 = *(unsigned char *)(result + (((unint64_t)(v90 + v74 + v78) >> 18) & 0x3FF));
  v92[4] = *(unsigned char *)(result + (((unint64_t)(v74 + v78 - v90) >> 18) & 0x3FF));
  v92[1] = *(unsigned char *)(result + (((unint64_t)(v91 + v74 - v78) >> 18) & 0x3FF));
  v92[3] = *(unsigned char *)(result + (((unint64_t)(v74 - v78 - v91) >> 18) & 0x3FF));
  v92[2] = *(unsigned char *)(result + (((unint64_t)(v86 + 268423872 * v88) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_1003E3AEC(uint64_t a1, uint64_t a2, __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(a1 + 408);
  int v6 = *(_DWORD **)(a2 + 88);
  int v7 = *v6 * *a3;
  int v8 = v6[16] * a3[16];
  int v9 = 4 * (v8 + v7);
  int v10 = 4 * (v7 - v8);
  uint64_t v11 = (int)v6[8] * (uint64_t)a3[8];
  uint64_t v12 = (int)v6[24] * (uint64_t)a3[24];
  uint64_t v13 = 4433 * (v11 + v12) + 1024;
  unint64_t v14 = (unint64_t)(v13 + 6270 * v11) >> 11;
  unint64_t v15 = (unint64_t)(v13 - 15137 * v12) >> 11;
  LODWORD(v11) = v9 - v14;
  int v16 = v6[1] * a3[1];
  int v17 = v6[17] * a3[17];
  LODWORD(v13) = 4 * (v17 + v16);
  int v18 = 4 * (v16 - v17);
  uint64_t v19 = (int)v6[9] * (uint64_t)a3[9];
  uint64_t v20 = (int)v6[25] * (uint64_t)a3[25];
  uint64_t v21 = 4433 * (v19 + v20) + 1024;
  unint64_t v22 = (unint64_t)(v21 + 6270 * v19) >> 11;
  unint64_t v23 = (unint64_t)(v21 - 15137 * v20) >> 11;
  int v24 = v22 + v13;
  LODWORD(v22) = v13 - v22;
  int v25 = v23 + v18;
  int v26 = v18 - v23;
  LODWORD(v23) = v6[2] * a3[2];
  LODWORD(v13) = v6[18] * a3[18];
  LODWORD(v20) = v13 + v23;
  LODWORD(v23) = v23 - v13;
  uint64_t v27 = (int)v6[10] * (uint64_t)a3[10];
  uint64_t v28 = (int)v6[26] * (uint64_t)a3[26];
  LODWORD(v13) = v10 - v15;
  LODWORD(v20) = 4 * v20;
  int v29 = 4 * v23;
  uint64_t v30 = 4433 * (v27 + v28) + 1024;
  unint64_t v31 = (unint64_t)(v30 + 6270 * v27) >> 11;
  unint64_t v32 = (unint64_t)(v30 - 15137 * v28) >> 11;
  LODWORD(v28) = v31 + v20;
  LODWORD(v30) = v20 - v31;
  LODWORD(v31) = v32 + v29;
  LODWORD(v20) = v29 - v32;
  int v33 = v6[3] * a3[3];
  int v34 = v6[19] * a3[19];
  LODWORD(v32) = 4 * (v34 + v33);
  int v35 = 4 * (v33 - v34);
  uint64_t v36 = (int)v6[11] * (uint64_t)a3[11];
  uint64_t v37 = (int)v6[27] * (uint64_t)a3[27];
  uint64_t v38 = 4433 * (v36 + v37) + 1024;
  unint64_t v39 = (unint64_t)(v38 + 6270 * v36) >> 11;
  unint64_t v40 = (unint64_t)(v38 - 15137 * v37) >> 11;
  int v41 = v39 + v32;
  LODWORD(v38) = v32 - v39;
  v5 -= 384;
  uint64_t v42 = (unsigned char *)(*a4 + a5);
  int v43 = v14 + v9 + 16400;
  LODWORD(v14) = (v43 + v28) << 13;
  LODWORD(v37) = (v43 - v28) << 13;
  LODWORD(v32) = 4433 * (v39 + v32 + v24);
  int v44 = v32 + 6270 * v24;
  unsigned char *v42 = *(unsigned char *)(v5 + (((unint64_t)(v44 + v14) >> 18) & 0x3FF));
  LOBYTE(v14) = *(unsigned char *)(v5 + (((unint64_t)(v14 - v44) >> 18) & 0x3FF));
  int v45 = v32 - 15137 * v41;
  v42[3] = v14;
  int v46 = v40 + v35;
  v42[1] = *(unsigned char *)(v5 + (((unint64_t)(v45 + v37) >> 18) & 0x3FF));
  LOBYTE(v14) = *(unsigned char *)(v5 + (((unint64_t)(v37 - v45) >> 18) & 0x3FF));
  int v47 = v35 - v40;
  _OWORD v42[2] = v14;
  uint64_t v48 = (unsigned char *)(a4[1] + a5);
  int v49 = v15 + v10 + 16400;
  LODWORD(v15) = (v49 + v31) << 13;
  int v50 = (v49 - v31) << 13;
  LODWORD(v40) = 4433 * (v40 + v35 + v25);
  int v51 = v40 + 6270 * v25;
  LODWORD(v40) = v40 - 15137 * v46;
  *uint64_t v48 = *(unsigned char *)(v5 + (((unint64_t)(v51 + v15) >> 18) & 0x3FF));
  v48[3] = *(unsigned char *)(v5 + (((unint64_t)(v15 - v51) >> 18) & 0x3FF));
  v48[1] = *(unsigned char *)(v5 + (((unint64_t)(v40 + v50) >> 18) & 0x3FF));
  v48[2] = *(unsigned char *)(v5 + (((unint64_t)(v50 - v40) >> 18) & 0x3FF));
  uint64_t v52 = (unsigned char *)(a4[2] + a5);
  uint64_t result = ((v13 + 16400 + v20) << 13);
  LODWORD(v15) = (v13 + 16400 - v20) << 13;
  LODWORD(v13) = 4433 * (v47 + v26);
  int v54 = v13 + 6270 * v26;
  LODWORD(v13) = v13 - 15137 * v47;
  unsigned char *v52 = *(unsigned char *)(v5 + (((unint64_t)(v54 + result) >> 18) & 0x3FF));
  v52[3] = *(unsigned char *)(v5 + (((unint64_t)(result - v54) >> 18) & 0x3FF));
  v52[1] = *(unsigned char *)(v5 + (((unint64_t)(v13 + v15) >> 18) & 0x3FF));
  v52[2] = *(unsigned char *)(v5 + (((unint64_t)(v15 - v13) >> 18) & 0x3FF));
  unint64_t v55 = (unsigned char *)(a4[3] + a5);
  LODWORD(v11) = v11 + 16400;
  LODWORD(v52) = (v11 + v30) << 13;
  int v56 = 4433 * (v38 + v22) + 6270 * v22;
  LODWORD(v11) = (v11 - v30) << 13;
  unsigned char *v55 = *(unsigned char *)(v5 + (((unint64_t)(v56 + v52) >> 18) & 0x3FF));
  int v57 = 4433 * (v38 + v22) - 15137 * v38;
  v55[3] = *(unsigned char *)(v5 + (((unint64_t)(v52 - v56) >> 18) & 0x3FF));
  v55[1] = *(unsigned char *)(v5 + (((unint64_t)(v57 + v11) >> 18) & 0x3FF));
  v55[2] = *(unsigned char *)(v5 + (((unint64_t)(v11 - v57) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_1003E3E70(uint64_t a1, uint64_t a2, __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(a1 + 408);
  int v6 = *(_DWORD **)(a2 + 88);
  int v7 = ((*v6 * *a3) << 13) | 0x400;
  int v8 = v6[16] * a3[16];
  int v9 = v7 + 5793 * v8;
  unsigned int v10 = v7 - 11586 * v8;
  int v11 = 10033 * v6[8] * a3[8];
  unsigned int v12 = v11 + v9;
  unsigned int v13 = v9 - v11;
  uint64_t v14 = ((uint64_t)(v6[1] * a3[1]) << 13) | 0x400;
  uint64_t v15 = (int)v6[17] * (uint64_t)a3[17];
  uint64_t v16 = v14 + 5793 * v15;
  unint64_t v17 = v14 + 0x7FFFFFFD2BELL * v15;
  uint64_t v18 = 10033 * (int)v6[9] * (uint64_t)a3[9];
  unint64_t v19 = (unint64_t)(v18 + v16) >> 11;
  unint64_t v20 = (unint64_t)(v16 - v18) >> 11;
  uint64_t v21 = ((uint64_t)(v6[2] * a3[2]) << 13) | 0x400;
  uint64_t v22 = (int)v6[18] * (uint64_t)a3[18];
  uint64_t v23 = v21 + 5793 * v22;
  unint64_t v24 = v21 + 0x7FFFFFFD2BELL * v22;
  uint64_t v25 = 10033 * (int)v6[10] * (uint64_t)a3[10];
  unint64_t v26 = (unint64_t)(v25 + v23) >> 11;
  unint64_t v27 = (unint64_t)(v23 - v25) >> 11;
  unint64_t v28 = v24 >> 11;
  v5 -= 384;
  uint64_t v29 = a5;
  uint64_t v30 = (unsigned char *)(*a4 + a5);
  int v31 = (v12 >> 11 << 13) + 134348800;
  LODWORD(v23) = v31 + 5793 * v26;
  LODWORD(v19) = 10033 * v19;
  *uint64_t v30 = *(unsigned char *)(v5 + (((unint64_t)(v23 + v19) >> 18) & 0x3FF));
  v30[2] = *(unsigned char *)(v5 + (((unint64_t)(v23 - v19) >> 18) & 0x3FF));
  v30[1] = *(unsigned char *)(v5 + (((unint64_t)(v31 + 268423870 * v26) >> 18) & 0x3FF));
  unint64_t v32 = (unsigned char *)(a4[1] + v29);
  int v33 = (v10 >> 11 << 13) + 134348800;
  LODWORD(v19) = v33 + 5793 * v28;
  unint64_t v34 = (v33 + 268423870 * v28);
  LODWORD(v17) = 10033 * (v17 >> 11);
  uint64_t result = *(unsigned __int8 *)(v5 + (((unint64_t)(v19 + v17) >> 18) & 0x3FF));
  unsigned char *v32 = result;
  v32[2] = *(unsigned char *)(v5 + (((unint64_t)(v19 - v17) >> 18) & 0x3FF));
  v32[1] = *(unsigned char *)(v5 + ((v34 >> 18) & 0x3FF));
  int v36 = (v13 >> 11 << 13) + 134348800;
  int v37 = v36 + 5793 * v27;
  uint64_t v38 = (unsigned char *)(a4[2] + v29);
  unsigned char *v38 = *(unsigned char *)(v5 + (((unint64_t)(v37 + 10033 * v20) >> 18) & 0x3FF));
  v38[2] = *(unsigned char *)(v5 + (((unint64_t)(v37 - 10033 * v20) >> 18) & 0x3FF));
  v38[1] = *(unsigned char *)(v5 + (((unint64_t)(v36 + 268423870 * v27) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_1003E404C(uint64_t result, uint64_t a2, unsigned __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(result + 408) - 384;
  int v6 = *(_DWORD **)(a2 + 88);
  int v7 = *v6 * *a3 + 4100;
  int v8 = v6[8] * a3[8];
  int v9 = v8 + v7;
  int v10 = v7 - v8;
  int v11 = v6[1] * a3[1];
  LODWORD(v6) = v6[9] * a3[9];
  int v12 = v6 + v11;
  LODWORD(v6) = v11 - v6;
  unsigned int v13 = (unsigned char *)(*a4 + a5);
  *unsigned int v13 = *(unsigned char *)(v5 + (((unint64_t)(v12 + v9) >> 3) & 0x3FF));
  v13[1] = *(unsigned char *)(v5 + (((unint64_t)(v9 - v12) >> 3) & 0x3FF));
  uint64_t v14 = (unsigned char *)(a4[1] + a5);
  *uint64_t v14 = *(unsigned char *)(v5 + (((unint64_t)(v6 + v10) >> 3) & 0x3FF));
  v14[1] = *(unsigned char *)(v5 + (((unint64_t)(v10 - v6) >> 3) & 0x3FF));
  return result;
}

uint64_t sub_1003E40EC(uint64_t result, uint64_t a2, unsigned __int16 *a3, void *a4, unsigned int a5)
{
  *(unsigned char *)(*a4 + a5) = *(unsigned char *)(*(void *)(result + 408)
                                  + (((unint64_t)(**(_DWORD **)(a2 + 88) * *a3 + 4100) >> 3) & 0x3FF)
                                  - 384);
  return result;
}

uint64_t sub_1003E4120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 408);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    int v8 = (_DWORD *)(v7 + 4 * v5);
    int v9 = (__int16 *)(a3 + 2 * v5);
    uint64_t v10 = (int)v8[16] * (uint64_t)v9[16];
    uint64_t v11 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    int v12 = v8[32];
    uint64_t v13 = (int)v8[48] * (uint64_t)v9[48];
    uint64_t v14 = v11 + 5793 * v13;
    uint64_t v15 = v11 - 11586 * v13;
    uint64_t v16 = (int)v8[8] * (uint64_t)v9[8];
    uint64_t v17 = (int)v8[40] * (uint64_t)v9[40];
    uint64_t v18 = v16 + v17;
    uint64_t v19 = v16 - v17;
    int v20 = v8[56];
    uint64_t v21 = v16 + v20 * (uint64_t)v9[56];
    uint64_t v22 = v17 - v20 * (uint64_t)v9[56];
    uint64_t v23 = v19 - v20 * (uint64_t)v9[56];
    uint64_t v24 = v10 - v12 * (uint64_t)v9[32];
    uint64_t v25 = v15 + 5793 * v24;
    unint64_t v26 = v15 + 0x7FFFFFFD2BELL * v24;
    uint64_t v27 = v12 * (uint64_t)v9[32];
    uint64_t v28 = 10887 * (v10 + v27);
    v10 *= 8875;
    uint64_t v29 = 2012 * v27;
    uint64_t v30 = v28 - 2012 * v27 + v14;
    uint64_t v31 = v14 - v28 + v10;
    uint64_t v32 = v14 - v10 + v29;
    uint64_t v33 = -10033 * (int)v8[24] * (uint64_t)v9[24];
    v22 *= 11409;
    v18 *= 7447;
    uint64_t v34 = v33 - v22 + v18;
    int v35 = &v70[v5];
    uint64_t v36 = v18 - v33 + 3962 * v21;
    uint64_t v37 = v22 + v33 + 3962 * v21;
    *int v35 = (unint64_t)(v36 + v30) >> 11;
    v23 *= 10033;
    v35[64] = (unint64_t)(v30 - v36) >> 11;
    v35[8] = (unint64_t)(v23 + v25) >> 11;
    v35[56] = (unint64_t)(v25 - v23) >> 11;
    v35[16] = (unint64_t)(v34 + v31) >> 11;
    v35[48] = (unint64_t)(v31 - v34) >> 11;
    v35[24] = (unint64_t)(v37 + v32) >> 11;
    v35[40] = (unint64_t)(v32 - v37) >> 11;
    v35[32] = v26 >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v38 = 0;
  uint64_t v39 = v6 - 384;
  uint64_t result = 4294957263;
  do
  {
    int v41 = &v70[v38];
    int v42 = v41[1];
    int v43 = v41[6];
    int v44 = v41[7];
    int v45 = (*v41 << 13) + 134348800;
    int v46 = v45 + 5793 * v43;
    int v47 = v41[2];
    int v48 = v41[3];
    int v49 = v41[4];
    LODWORD(v41) = v41[5];
    int v50 = v45 - 11586 * v43;
    int v51 = v47 - v49;
    int v52 = v50 + 5793 * (v47 - v49);
    int v53 = 10887 * (v49 + v47);
    v47 *= 8875;
    unint64_t v54 = (v50 + 268423870 * v51);
    int v55 = 2012 * v49;
    int v56 = v53 - 2012 * v49 + v46;
    int v57 = v46 - v53;
    int v58 = v46 - v47;
    int v59 = v57 + v47;
    v48 *= -10033;
    int v60 = 7447 * (v41 + v42);
    int v61 = 3962 * (v44 + v42);
    int v62 = v58 + v55;
    int v63 = v60 - v48 + v61;
    int v64 = v41 - v44;
    LODWORD(v41) = v42 - (v41 + v44);
    int v65 = (unsigned char *)(*(void *)(a4 + v38) + a5);
    *int v65 = *(unsigned char *)(v39 + (((unint64_t)(v63 + v56) >> 18) & 0x3FF));
    LODWORD(v41) = 10033 * v41;
    v65[8] = *(unsigned char *)(v39 + (((unint64_t)(v56 - v63) >> 18) & 0x3FF));
    v65[1] = *(unsigned char *)(v39 + (((unint64_t)(v41 + v52) >> 18) & 0x3FF));
    v64 *= 11409;
    int v66 = v48 - v64 + v60;
    v65[7] = *(unsigned char *)(v39 + (((unint64_t)(v52 - v41) >> 18) & 0x3FF));
    v65[2] = *(unsigned char *)(v39 + (((unint64_t)(v66 + v59) >> 18) & 0x3FF));
    int v67 = v64 + v48 + v61;
    v65[6] = *(unsigned char *)(v39 + (((unint64_t)(v59 - v66) >> 18) & 0x3FF));
    v65[3] = *(unsigned char *)(v39 + (((unint64_t)(v67 + v62) >> 18) & 0x3FF));
    v65[5] = *(unsigned char *)(v39 + (((unint64_t)(v62 - v67) >> 18) & 0x3FF));
    v65[4] = *(unsigned char *)(v39 + ((v54 >> 18) & 0x3FF));
    v38 += 8;
  }
  while (v38 != 72);
  return result;
}

uint64_t sub_1003E44C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v67 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v10 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v11 = v9 + 9373 * v10;
    uint64_t v12 = v9 - 3580 * v10;
    unint64_t v13 = v9 - 11586 * v10;
    uint64_t v14 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v15 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v16 = 6810 * (v14 + v15);
    uint64_t v17 = v16 + 4209 * v14;
    uint64_t v18 = v16 - 17828 * v15;
    uint64_t v19 = v17 + v11;
    uint64_t v20 = v11 - v17;
    uint64_t v21 = v18 + v12;
    uint64_t v22 = v12 - v18;
    uint64_t v23 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v24 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v26 = v24 + (int)v7 * (uint64_t)(int)v8;
    uint64_t v27 = v24 - (int)v7 * (uint64_t)(int)v8;
    uint64_t v28 = (v25 << 13) + 2531 * v27;
    uint64_t v29 = 7791 * v26 + 11443 * v23 + v28;
    uint64_t v30 = 1812 * v23 - 7791 * v26 + v28;
    uint64_t v31 = (v25 << 13) - 6627 * v27;
    LODWORD(v27) = v23 - v25 - v27;
    uint64_t v32 = 10323 * v23 - (4815 * v26 + v31);
    uint64_t v33 = &v69[v5];
    uint64_t v34 = 5260 * v23 - 4815 * v26 + v31;
    *uint64_t v33 = (unint64_t)(v29 + v19) >> 11;
    v33[72] = (unint64_t)(v19 - v29) >> 11;
    v33[8] = (unint64_t)(v32 + v21) >> 11;
    LODWORD(v27) = 4 * v27;
    v33[64] = (unint64_t)(v21 - v32) >> 11;
    v33[16] = v27 + (v13 >> 11);
    v33[56] = (v13 >> 11) - v27;
    v33[24] = (unint64_t)(v34 + v22) >> 11;
    v33[48] = (unint64_t)(v22 - v34) >> 11;
    v33[32] = (unint64_t)(v30 + v20) >> 11;
    v33[40] = (unint64_t)(v20 - v30) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v35 = 0;
  uint64_t v36 = v67 - 384;
  uint64_t result = 2531;
  do
  {
    uint64_t v38 = &v69[v35];
    uint64_t v39 = (unsigned char *)(*(void *)(a4 + v35) + a5);
    int v40 = v38[1];
    int v41 = (*v38 << 13) + 134348800;
    int v42 = v38[4];
    int v43 = v38[5];
    int v44 = v41 + 9373 * v42;
    int v45 = v41 - 3580 * v42;
    int v46 = v41 - 11586 * v42;
    int v48 = v38[2];
    int v47 = v38[3];
    uint64_t v49 = a4;
    int v51 = v38[6];
    int v50 = v38[7];
    LODWORD(v38) = 6810 * (v51 + v48);
    int v52 = v38 + 4209 * v48;
    int v53 = v38 - 17828 * v51;
    int v54 = v52 + v44;
    LODWORD(v38) = v44 - v52;
    int v55 = v53 + v45;
    int v56 = v45 - v53;
    int v57 = v50 + v47;
    int v58 = v47 - v50;
    int v59 = (v43 << 13) + 2531 * v58;
    int v60 = (v43 << 13) - 6627 * v58;
    int v61 = v40 - v43 - v58;
    int v62 = 7791 * v57 + 11443 * v40 + v59;
    int v63 = 1812 * v40 - 7791 * v57 + v59;
    unsigned char *v39 = *(unsigned char *)(v36 + (((unint64_t)(v62 + v54) >> 18) & 0x3FF));
    unint64_t v64 = (v54 - v62);
    int v65 = 10323 * v40 - (4815 * v57 + v60);
    v39[9] = *(unsigned char *)(v36 + ((v64 >> 18) & 0x3FF));
    v39[1] = *(unsigned char *)(v36 + (((unint64_t)(v65 + v55) >> 18) & 0x3FF));
    v61 <<= 13;
    v39[8] = *(unsigned char *)(v36 + (((unint64_t)(v55 - v65) >> 18) & 0x3FF));
    int v66 = 5260 * v40 - 4815 * v57;
    v39[2] = *(unsigned char *)(v36 + (((unint64_t)(v61 + v46) >> 18) & 0x3FF));
    v39[7] = *(unsigned char *)(v36 + (((unint64_t)(v46 - v61) >> 18) & 0x3FF));
    v39[3] = *(unsigned char *)(v36 + (((unint64_t)(v66 + v60 + v56) >> 18) & 0x3FF));
    a4 = v49;
    v39[6] = *(unsigned char *)(v36 + (((unint64_t)(v56 - (v66 + v60)) >> 18) & 0x3FF));
    v39[4] = *(unsigned char *)(v36 + (((unint64_t)(v63 + v38) >> 18) & 0x3FF));
    v39[5] = *(unsigned char *)(v36 + (((unint64_t)(v38 - v63) >> 18) & 0x3FF));
    v35 += 8;
  }
  while (v35 != 80);
  return result;
}

uint64_t sub_1003E48A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v79 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    int v9 = *v7 * *v8;
    uint64_t v10 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v11 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v12 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v13 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v14 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v15 = (int)v7[40] * (uint64_t)v8[40];
    uint64_t v16 = (int)v7[56] * (uint64_t)v8[56];
    uint64_t v17 = v10 + v12 - v11;
    uint64_t v18 = v13 + v16;
    uint64_t v19 = 3264 * (v13 + v14 + v15 + v16);
    uint64_t v20 = 7274 * (v13 + v14);
    uint64_t v21 = 5492 * (v13 + v15);
    uint64_t v22 = v20 - 7562 * v13 + v21;
    uint64_t v23 = v19 - 9527 * (v14 + v15);
    uint64_t v24 = v21 - 9766 * v15 + v23;
    uint64_t v25 = v20 + 16984 * v14 - 14731 * (v14 + v16) + v23;
    uint64_t v26 = v19 + 3000 * v18;
    uint64_t v27 = v22 + v26;
    uint64_t v28 = -14731 * (v14 + v16) + 17223 * v16 + v26;
    uint64_t v29 = &v82[v5];
    uint64_t v30 = ((uint64_t)v9 << 13) | 0x400;
    uint64_t v31 = v30 + 11116 * v17;
    uint64_t v32 = 20862 * (v11 - v12);
    uint64_t v33 = v31 + 3529 * (v11 - v10);
    uint64_t v34 = -12019 * v14 + 8203 * v15 - 13802 * v16;
    uint64_t v35 = v31 + v32;
    uint64_t v36 = v34 + v19;
    uint64_t v37 = v33 - 14924 * v11 + v32;
    uint64_t v38 = v35 + 17333 * v12;
    *uint64_t v29 = (unint64_t)(v27 + v38) >> 11;
    v29[80] = (unint64_t)(v38 - v27) >> 11;
    unint64_t v39 = v25 + v37;
    unint64_t v40 = v37 - v25;
    uint64_t v41 = v31 - 9467 * (v10 + v12);
    v29[8] = v39 >> 11;
    uint64_t v42 = -11395 * v10 + 15929 * v11 + v41;
    uint64_t v43 = v41 - 6461 * v12;
    v29[16] = (unint64_t)(v24 + v43) >> 11;
    v29[64] = (unint64_t)(v43 - v24) >> 11;
    v29[72] = v40 >> 11;
    uint64_t v44 = v33 - 12399 * v10;
    v29[24] = (unint64_t)(v28 + v44) >> 11;
    v29[56] = (unint64_t)(v44 - v28) >> 11;
    v29[32] = (unint64_t)(v36 + v42) >> 11;
    v29[48] = (unint64_t)(v42 - v36) >> 11;
    v29[40] = (unint64_t)(v30 + 0x7FFFFFFD2BFLL * v17) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v45 = 0;
  uint64_t v46 = v79 - 384;
  do
  {
    int v47 = &v82[v45];
    int v48 = v47[1];
    uint64_t v49 = (unsigned char *)(*(void *)(a4 + v45) + a5);
    int v50 = (*v47 << 13) + 134348800;
    int v51 = v47[4];
    int v52 = v47[5];
    int v54 = v47[6];
    int v53 = v47[7];
    int v55 = 20862 * (v51 - v54);
    int v56 = v47[2];
    int v57 = v47[3];
    int v58 = v54 + v56 - v51;
    int v59 = v50 + 11116 * v58;
    LODWORD(v47) = v59 + 3529 * (v51 - v56);
    int v60 = v47 - 14924 * v51;
    int v61 = v59 + v55 + 17333 * v54;
    int v62 = v47 - 12399 * v56;
    int v63 = v59 - 9467 * (v54 + v56);
    int v64 = -11395 * v56 + 15929 * v51;
    unint64_t v65 = (v50 + 268423871 * v58);
    int v66 = v63 - 6461 * v54;
    int v67 = 3264 * (v57 + v48 + v52 + v53);
    int v68 = 7274 * (v57 + v48);
    int v69 = v64 + v63;
    int v70 = 5492 * (v52 + v48);
    int v71 = v67 + 3000 * (v53 + v48);
    int v72 = v60 + v55;
    int v73 = v68 - 7562 * v48 + v70 + v71;
    *uint64_t v49 = *(unsigned char *)(v46 + (((unint64_t)(v73 + v61) >> 18) & 0x3FF));
    int v74 = v67 - 9527 * (v52 + v57);
    int v75 = v70 - 9766 * v52 + v74;
    int v76 = v68 + 16984 * v57 - 14731 * (v53 + v57) + v74;
    v49[10] = *(unsigned char *)(v46 + (((unint64_t)(v61 - v73) >> 18) & 0x3FF));
    v49[1] = *(unsigned char *)(v46 + (((unint64_t)(v76 + v72) >> 18) & 0x3FF));
    LOBYTE(v73) = *(unsigned char *)(v46 + (((unint64_t)(v72 - v76) >> 18) & 0x3FF));
    uint64_t result = (-14731 * (v53 + v57) + 17223 * v53 + v71);
    v49[9] = v73;
    v49[2] = *(unsigned char *)(v46 + (((unint64_t)(v75 + v66) >> 18) & 0x3FF));
    v49[8] = *(unsigned char *)(v46 + (((unint64_t)(v66 - v75) >> 18) & 0x3FF));
    v49[3] = *(unsigned char *)(v46 + (((unint64_t)(result + v62) >> 18) & 0x3FF));
    int v78 = -12019 * v57 + 8203 * v52 - 13802 * v53 + v67;
    v49[7] = *(unsigned char *)(v46 + (((unint64_t)(v62 - result) >> 18) & 0x3FF));
    v49[4] = *(unsigned char *)(v46 + (((unint64_t)(v78 + v69) >> 18) & 0x3FF));
    v49[6] = *(unsigned char *)(v46 + (((unint64_t)(v69 - v78) >> 18) & 0x3FF));
    v49[5] = *(unsigned char *)(v46 + ((v65 >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 88);
  return result;
}

unsigned char *sub_1003E4D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v80 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v10 = 10033 * (int)v7[32] * (uint64_t)v8[32];
    uint64_t v11 = v10 + v9;
    uint64_t v12 = v9 - v10;
    uint64_t v13 = (int)v7[16] * (uint64_t)v8[16];
    int v14 = v7[48];
    uint64_t v15 = (v14 * (uint64_t)v8[48]) << 13;
    uint64_t v16 = (v13 - v14 * (uint64_t)v8[48]) << 13;
    uint64_t v17 = v16 + v9;
    uint64_t v18 = v9 - v16;
    uint64_t v19 = v15 + 11190 * v13;
    uint64_t v20 = v19 + v11;
    uint64_t v21 = v11 - v19;
    uint64_t v22 = 2998 * v13 - v15;
    uint64_t v23 = v22 + v12;
    uint64_t v24 = v12 - v22;
    uint64_t v25 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v26 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v27 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v28 = 10703 * v26;
    uint64_t v29 = -4433 * v26;
    uint64_t v30 = 7053 * (v25 + v27 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v31 = v30 + 2139 * (v25 + v27);
    uint64_t v32 = v26 - v27;
    uint64_t v33 = v28 + 2295 * v25 + v31;
    uint64_t v34 = -8565 * (v27 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v35 = v29 - 12112 * v27 - 8565 * (v27 + (int)v7 * (uint64_t)(int)v8) + v31;
    uint64_t v36 = (int)v7 * (uint64_t)(int)v8;
    uint64_t v37 = v25 - v36;
    uint64_t v38 = v29 - 5540 * v25 - 16244 * v36;
    unint64_t v39 = &v82[v5];
    uint64_t v40 = 12998 * v36 - v28 + v34 + v30;
    uint64_t v41 = v38 + v30;
    uint64_t v42 = 4433 * (v37 + v32);
    uint64_t v43 = v42 + 6270 * v37;
    uint64_t v44 = v42 - 15137 * v32;
    _DWORD *v39 = (unint64_t)(v33 + v20) >> 11;
    v39[88] = (unint64_t)(v20 - v33) >> 11;
    v39[8] = (unint64_t)(v43 + v17) >> 11;
    v39[80] = (unint64_t)(v17 - v43) >> 11;
    v39[16] = (unint64_t)(v35 + v23) >> 11;
    v39[72] = (unint64_t)(v23 - v35) >> 11;
    v39[24] = (unint64_t)(v40 + v24) >> 11;
    v39[64] = (unint64_t)(v24 - v40) >> 11;
    v39[32] = (unint64_t)(v44 + v18) >> 11;
    v39[56] = (unint64_t)(v18 - v44) >> 11;
    v39[40] = (unint64_t)(v41 + v21) >> 11;
    v39[48] = (unint64_t)(v21 - v41) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v45 = 0;
  uint64_t v46 = v80 - 384;
  do
  {
    int v47 = &v82[v45];
    int v48 = v47[1];
    int v49 = (*v47 << 13) + 134348800;
    int v50 = v47[5];
    int v51 = 10033 * v47[4];
    int v52 = v49 + v51;
    int v54 = v47[6];
    int v53 = v47[7];
    int v55 = v54 << 13;
    int v56 = v47[2];
    int v57 = v47[3];
    int v58 = v49 - v51;
    LODWORD(v47) = (v56 - v54) << 13;
    int v59 = v47 + v49;
    int v60 = v49 - v47;
    LODWORD(v47) = v55 + 11190 * v56;
    int v61 = v47 + v52;
    LODWORD(v47) = v52 - v47;
    int v62 = 2998 * v56 - v55;
    int v63 = 10703 * v57;
    int v64 = -4433 * v57;
    int v65 = v62 + v58;
    int v66 = 7053 * (v50 + v48 + v53);
    int v67 = v66 + 2139 * (v50 + v48);
    int v68 = v58 - v62;
    int v69 = 10703 * v57 + 2295 * v48 + v67;
    int v70 = -8565 * (v53 + v50);
    int v71 = -4433 * v57 - 12112 * v50 - 8565 * (v53 + v50) + v67;
    int v72 = v57 - v50;
    uint64_t result = (unsigned char *)(*(void *)(a4 + v45) + a5);
    *uint64_t result = *(unsigned char *)(v46 + (((unint64_t)(v69 + v61) >> 18) & 0x3FF));
    unint64_t v74 = (v61 - v69);
    int v75 = 4433 * (v48 - v53 + v72);
    int v76 = v75 + 6270 * (v48 - v53);
    result[11] = *(unsigned char *)(v46 + ((v74 >> 18) & 0x3FF));
    result[1] = *(unsigned char *)(v46 + (((unint64_t)(v76 + v59) >> 18) & 0x3FF));
    LODWORD(v74) = 12998 * v53 - v63 + v66 + v70;
    result[10] = *(unsigned char *)(v46 + (((unint64_t)(v59 - v76) >> 18) & 0x3FF));
    result[2] = *(unsigned char *)(v46 + (((unint64_t)(v71 + v65) >> 18) & 0x3FF));
    result[9] = *(unsigned char *)(v46 + (((unint64_t)(v65 - v71) >> 18) & 0x3FF));
    int v77 = v64 - 5540 * v48 - 16244 * v53 + v66;
    result[3] = *(unsigned char *)(v46 + (((unint64_t)(v74 + v68) >> 18) & 0x3FF));
    int v78 = v75 - 15137 * v72;
    result[8] = *(unsigned char *)(v46 + (((unint64_t)(v68 - v74) >> 18) & 0x3FF));
    result[4] = *(unsigned char *)(v46 + (((unint64_t)(v78 + v60) >> 18) & 0x3FF));
    result[7] = *(unsigned char *)(v46 + (((unint64_t)(v60 - v78) >> 18) & 0x3FF));
    result[5] = *(unsigned char *)(v46 + (((unint64_t)(v77 + v47) >> 18) & 0x3FF));
    result[6] = *(unsigned char *)(v46 + (((unint64_t)(v47 - v77) >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 96);
  return result;
}

uint64_t sub_1003E51D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v93 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    int v9 = v8[16];
    int v10 = v7[16];
    uint64_t v11 = v10 * (uint64_t)v8[16];
    uint64_t v12 = (int)v7[32] * (uint64_t)v8[32];
    int v13 = v7[48];
    uint64_t v14 = v12 + v13 * (uint64_t)v8[48];
    uint64_t v15 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v16 = v12 - v13 * (uint64_t)v8[48];
    uint64_t v17 = v15 + 793 * v16;
    uint64_t v18 = 9465 * v14 + 11249 * v11;
    uint64_t v19 = 2592 * v14 - 10258 * v11;
    uint64_t v20 = 3570 * v14 - 6581 * v11;
    uint64_t v21 = -9465 * v14 + 4108 * v11;
    uint64_t v22 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v23 = -2592 * v14 + 8672 * v11;
    uint64_t v24 = (int)v7[24] * (uint64_t)v8[24];
    int v25 = v8[40];
    int v26 = v7[40];
    LODWORD(v8) = v8[56];
    int v27 = v7[56];
    uint64_t v28 = -3570 * v14 - 1396 * v11;
    uint64_t v29 = 10832 * (v22 + v24);
    uint64_t v30 = 9534 * (v22 + v26 * (uint64_t)v25);
    uint64_t v31 = v22 + v27 * (uint64_t)(int)v8;
    uint64_t v32 = v18 + v17;
    uint64_t v33 = v29 - 16549 * v22 + v30 + 7682 * v31;
    uint64_t v34 = v26 * (uint64_t)v25;
    uint64_t v35 = v21 + v17;
    uint64_t v36 = -2773 * (v24 + v34);
    uint64_t v37 = -9534 * (v24 + v27 * (uint64_t)(int)v8);
    uint64_t v38 = v29 + 6859 * v24 + v36 - 9534 * (v24 + v27 * (uint64_t)(int)v8);
    uint64_t v39 = v27 * (uint64_t)(int)v8;
    uint64_t v40 = v15 + 3989 * v16;
    uint64_t v41 = v19 + v40;
    uint64_t v42 = v23 + v40;
    uint64_t v43 = v36 - 12879 * v34 + v30 - 5384 * (v34 + v39);
    uint64_t v44 = v37 + 18068 * v39 + 7682 * v31 - 5384 * (v34 + v39);
    uint64_t v45 = v16 - v10 * (uint64_t)v9;
    uint64_t v46 = &v97[v5];
    uint64_t v47 = v15 - 7678 * v16;
    uint64_t v48 = v20 + v47;
    uint64_t v49 = v28 + v47;
    _DWORD *v46 = (unint64_t)(v33 + v32) >> 11;
    v46[96] = (unint64_t)(v32 - v33) >> 11;
    v46[8] = (unint64_t)(v38 + v42) >> 11;
    v46[88] = (unint64_t)(v42 - v38) >> 11;
    v46[16] = (unint64_t)(v43 + v35) >> 11;
    uint64_t v50 = 7682 * (v34 - v24) + 2773 * v31;
    v46[80] = (unint64_t)(v35 - v43) >> 11;
    v46[24] = (unint64_t)(v44 + v49) >> 11;
    v46[72] = (unint64_t)(v49 - v44) >> 11;
    uint64_t v51 = v50 + 2611 * v22 - 3818 * v24;
    v46[32] = (unint64_t)(v51 + v48) >> 11;
    v46[64] = (unint64_t)(v48 - v51) >> 11;
    uint64_t v52 = v50 + 3150 * v34 - 14273 * v39;
    v46[40] = (unint64_t)(v52 + v41) >> 11;
    v46[56] = (unint64_t)(v41 - v52) >> 11;
    v46[48] = (unint64_t)(v15 + 11585 * v45) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v53 = 0;
  uint64_t v54 = v93 - 384;
  do
  {
    int v55 = &v97[v53];
    int v56 = v55[1];
    int v58 = v55[4];
    int v57 = v55[5];
    int v59 = (*v55 << 13) + 134348800;
    int v60 = v55[6];
    int v61 = v55[7];
    int v62 = v60 + v58;
    int v63 = v58 - v60;
    int v64 = 9465 * (v60 + v58);
    int v65 = v59 + 793 * v63;
    int v67 = v55[2];
    int v66 = v55[3];
    int v68 = 4108 * v67 - v64;
    int v69 = v64 + 11249 * v67 + v65;
    int v70 = v59 + 3989 * v63;
    int v71 = -2592 * v62 + 8672 * v67;
    LODWORD(v55) = 2592 * v62 - 10258 * v67;
    v62 *= 3570;
    int v72 = v55 + v70;
    int v73 = v59 - 7678 * v63;
    int v74 = -v62 - 1396 * v67;
    int v75 = v62 - 6581 * v67 + v73;
    int v76 = v68 + v65;
    unint64_t v77 = (v59 + 11585 * (v63 - v67));
    int v78 = 10832 * (v66 + v56);
    int v79 = v71 + v70;
    int v80 = 9534 * (v57 + v56);
    int v81 = v74 + v73;
    int v82 = v78 - 16549 * v56 + v80 + 7682 * (v61 + v56);
    int v83 = -2773 * (v57 + v66);
    int v84 = v78 + 6859 * v66 + v83 - 9534 * (v61 + v66);
    int v85 = v83 - 12879 * v57 + v80 - 5384 * (v61 + v57);
    unint64_t v86 = (unsigned char *)(*(void *)(a4 + v53) + a5);
    *unint64_t v86 = *(unsigned char *)(v54 + (((unint64_t)(v82 + v69) >> 18) & 0x3FF));
    v86[12] = *(unsigned char *)(v54 + (((unint64_t)(v69 - v82) >> 18) & 0x3FF));
    int v87 = -9534 * (v61 + v66) + 18068 * v61 + 7682 * (v61 + v56) - 5384 * (v61 + v57);
    v86[1] = *(unsigned char *)(v54 + (((unint64_t)(v84 + v79) >> 18) & 0x3FF));
    v86[11] = *(unsigned char *)(v54 + (((unint64_t)(v79 - v84) >> 18) & 0x3FF));
    v86[2] = *(unsigned char *)(v54 + (((unint64_t)(v85 + v76) >> 18) & 0x3FF));
    unint64_t v88 = (v76 - v85);
    int v89 = 7682 * (v57 - v66) + 2773 * (v61 + v56);
    v86[10] = *(unsigned char *)(v54 + ((v88 >> 18) & 0x3FF));
    v86[3] = *(unsigned char *)(v54 + (((unint64_t)(v87 + v81) >> 18) & 0x3FF));
    int v90 = v89 + 2611 * v56 - 3818 * v66;
    v86[9] = *(unsigned char *)(v54 + (((unint64_t)(v81 - v87) >> 18) & 0x3FF));
    v86[4] = *(unsigned char *)(v54 + (((unint64_t)(v90 + v75) >> 18) & 0x3FF));
    int v91 = v89 + 3150 * v57 - 14273 * v61;
    v86[8] = *(unsigned char *)(v54 + (((unint64_t)(v75 - v90) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v54 + (((unint64_t)(v91 + v72) >> 18) & 0x3FF));
    v86[5] = result;
    v86[7] = *(unsigned char *)(v54 + (((unint64_t)(v72 - v91) >> 18) & 0x3FF));
    v86[6] = *(unsigned char *)(v54 + ((v77 >> 18) & 0x3FF));
    v53 += 8;
  }
  while (v53 != 104);
  return result;
}

uint64_t sub_1003E5734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v82 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v11 = v10 + 10438 * v9;
    uint64_t v12 = v10 + 2578 * v9;
    uint64_t v13 = v10 - 7223 * v9;
    uint64_t v14 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v15 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v16 = 9058 * (v14 + v15);
    uint64_t v17 = v16 + 2237 * v14;
    uint64_t v18 = v16 - 14084 * v15;
    uint64_t v19 = 5027 * v14 - 11295 * v15;
    uint64_t v20 = v17 + v11;
    uint64_t v21 = v11 - v17;
    uint64_t v22 = v18 + v12;
    uint64_t v23 = v12 - v18;
    uint64_t v24 = v19 + v13;
    uint64_t v25 = v13 - v19;
    uint64_t v26 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v27 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v28 = (int)v7[40] * (uint64_t)v8[40];
    uint64_t v29 = (int)v7[56] * (uint64_t)v8[56];
    uint64_t v30 = 10935 * (v26 + v27);
    uint64_t v31 = 9810 * (v26 + v28);
    uint64_t v32 = v30 - 9232 * v26 + v31 + (v29 << 13);
    uint64_t v33 = -8192 * v29 - 1297 * (v27 + v28);
    uint64_t v34 = v30 - 3474 * v27 + v33;
    uint64_t v35 = v31 - 19447 * v28 + v33;
    uint64_t v36 = 6164 * (v26 + v28);
    uint64_t v37 = 11512 * (v28 - v27);
    uint64_t v38 = v37 - 13850 * v28 + v36 + (v29 << 13);
    LODWORD(v17) = v26 - v27;
    uint64_t v39 = v37 + 5529 * v27;
    uint64_t v40 = -8192 * v29 + 3826 * (v26 - v27);
    uint64_t v41 = v36 - 8693 * v26 + v40;
    uint64_t v42 = v39 + v40;
    uint64_t v43 = &v85[v5];
    _DWORD *v43 = (unint64_t)(v32 + v20) >> 11;
    v43[104] = (unint64_t)(v20 - v32) >> 11;
    v43[8] = (unint64_t)(v34 + v22) >> 11;
    v43[96] = (unint64_t)(v22 - v34) >> 11;
    v43[16] = (unint64_t)(v35 + v24) >> 11;
    unint64_t v44 = (unint64_t)(v10 - 11586 * v9) >> 11;
    LODWORD(v22) = 4 * (v17 - v28 + v29);
    v43[88] = (unint64_t)(v24 - v35) >> 11;
    v43[24] = v22 + v44;
    v43[80] = v44 - v22;
    v43[32] = (unint64_t)(v38 + v25) >> 11;
    v43[72] = (unint64_t)(v25 - v38) >> 11;
    v43[40] = (unint64_t)(v42 + v23) >> 11;
    v43[64] = (unint64_t)(v23 - v42) >> 11;
    v43[48] = (unint64_t)(v41 + v21) >> 11;
    v43[56] = (unint64_t)(v21 - v41) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v45 = 0;
  uint64_t v46 = v82 - 384;
  do
  {
    uint64_t v47 = &v85[v45];
    int v48 = v47[1];
    int v49 = (*v47 << 13) + 134348800;
    int v51 = v47[4];
    int v50 = v47[5];
    int v52 = v49 + 10438 * v51;
    int v53 = v49 + 2578 * v51;
    int v54 = v49 - 7223 * v51;
    int v56 = v47[2];
    int v55 = v47[3];
    int v57 = v47[6];
    int v58 = v47[7];
    int v59 = v49 - 11586 * v51;
    LODWORD(v47) = 9058 * (v57 + v56);
    int v60 = v47 + 2237 * v56;
    int v61 = v47 - 14084 * v57;
    LODWORD(v47) = 5027 * v56 - 11295 * v57;
    int v62 = v60 + v52;
    int v63 = v52 - v60;
    int v64 = v47 + v54;
    LODWORD(v47) = v54 - v47;
    int v65 = v61 + v53;
    int v66 = 10935 * (v55 + v48);
    int v67 = v53 - v61;
    int v68 = v66 - 9232 * v48 + 9810 * (v50 + v48) + (v58 << 13);
    int v69 = -8192 * v58 - 1297 * (v50 + v55);
    int v70 = v66 - 3474 * v55 + v69;
    int v71 = 9810 * (v50 + v48) - 19447 * v50 + v69;
    int v72 = (unsigned char *)(*(void *)(a4 + v45) + a5);
    *int v72 = *(unsigned char *)(v46 + (((unint64_t)(v68 + v62) >> 18) & 0x3FF));
    v72[13] = *(unsigned char *)(v46 + (((unint64_t)(v62 - v68) >> 18) & 0x3FF));
    v72[1] = *(unsigned char *)(v46 + (((unint64_t)(v70 + v65) >> 18) & 0x3FF));
    int v73 = -8192 * v58 + 3826 * (v48 - v55);
    v72[12] = *(unsigned char *)(v46 + (((unint64_t)(v65 - v70) >> 18) & 0x3FF));
    int v74 = v48 - v55 - v50 + v58;
    v72[2] = *(unsigned char *)(v46 + (((unint64_t)(v71 + v64) >> 18) & 0x3FF));
    unint64_t v75 = (v64 - v71);
    int v76 = (v58 << 13) - 13850 * v50;
    uint64_t result = (6164 * (v50 + v48));
    int v78 = 11512 * (v50 - v55);
    v74 <<= 13;
    v72[11] = *(unsigned char *)(v46 + ((v75 >> 18) & 0x3FF));
    int v79 = v76 + v78 + result;
    v72[3] = *(unsigned char *)(v46 + (((unint64_t)(v74 + v59) >> 18) & 0x3FF));
    v72[10] = *(unsigned char *)(v46 + (((unint64_t)(v59 - v74) >> 18) & 0x3FF));
    v72[4] = *(unsigned char *)(v46 + (((unint64_t)(v79 + v47) >> 18) & 0x3FF));
    int v80 = result - 8693 * v48 + v73;
    int v81 = v78 + 5529 * v55 + v73;
    v72[9] = *(unsigned char *)(v46 + (((unint64_t)(v47 - v79) >> 18) & 0x3FF));
    v72[5] = *(unsigned char *)(v46 + (((unint64_t)(v81 + v67) >> 18) & 0x3FF));
    v72[8] = *(unsigned char *)(v46 + (((unint64_t)(v67 - v81) >> 18) & 0x3FF));
    v72[6] = *(unsigned char *)(v46 + (((unint64_t)(v80 + v63) >> 18) & 0x3FF));
    v72[7] = *(unsigned char *)(v46 + (((unint64_t)(v63 - v80) >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 112);
  return result;
}

uint64_t sub_1003E5C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v89 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v11 = (int)v7[48] * (uint64_t)v8[48];
    int v12 = v7[32];
    uint64_t v13 = v10 - 3580 * v11;
    uint64_t v14 = v10 + 9373 * v11;
    uint64_t v15 = v9 - v12 * (uint64_t)v8[32];
    uint64_t v16 = v9 + v12 * (uint64_t)v8[32];
    uint64_t v17 = 11795 * v9;
    uint64_t v18 = 374 * v15 + 10958 * v16 + v14;
    uint64_t v19 = 11795 * v9 - 10958 * v16 + 374 * v15 + v13;
    uint64_t v20 = -3271 * v15 - 4482 * v16 + v14;
    uint64_t v21 = 4482 * v16 - v17 + -3271 * v15 + v13;
    uint64_t v22 = 6476 * v16;
    uint64_t v23 = 2896 * v15 + 6476 * v16 + v13;
    uint64_t v24 = v14 - v22 + 2896 * v15;
    uint64_t v25 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v26 = (int)v7[24] * (uint64_t)v8[24];
    int v27 = v8[40];
    int v28 = v7[40];
    uint64_t v29 = 10033 * v28 * (uint64_t)v8[40];
    uint64_t v30 = (int)v7[56] * (uint64_t)v8[56];
    uint64_t v31 = -11018 * v26;
    uint64_t v32 = v29 + 11522 * (v25 - v30);
    uint64_t v33 = 11018 * v26 + 20131 * v30 + v32;
    uint64_t v34 = -6810 * v26 - 9113 * v25 + v32;
    uint64_t v35 = v26 - v30;
    uint64_t v36 = &v93[v5];
    uint64_t v37 = 4712 * (v25 + v30);
    uint64_t v38 = -6810 * v26 + 3897 * v25 - v29 + v37;
    uint64_t v39 = v29 + v31 - 7121 * v30 + v37;
    *uint64_t v36 = (unint64_t)(v33 + v18) >> 11;
    v36[112] = (unint64_t)(v18 - v33) >> 11;
    uint64_t v40 = 6810 * (v35 + v25);
    uint64_t v41 = v40 + 4209 * v25;
    v36[8] = (unint64_t)(v41 + v23) >> 11;
    v36[104] = (unint64_t)(v23 - v41) >> 11;
    uint64_t v42 = v10 - 11586 * v11;
    uint64_t v43 = v42 + 5792 * v15;
    uint64_t v44 = 10033 * (v25 - v30 - v28 * (uint64_t)v27);
    v36[16] = (unint64_t)(v44 + v43) >> 11;
    v36[96] = (unint64_t)(v43 - v44) >> 11;
    v36[24] = (unint64_t)(v38 + v19) >> 11;
    v36[88] = (unint64_t)(v19 - v38) >> 11;
    uint64_t v45 = v40 - 17828 * v35;
    v36[32] = (unint64_t)(v45 + v24) >> 11;
    v36[80] = (unint64_t)(v24 - v45) >> 11;
    v36[40] = (unint64_t)(v39 + v20) >> 11;
    v36[72] = (unint64_t)(v20 - v39) >> 11;
    v36[48] = (unint64_t)(v34 + v21) >> 11;
    v36[64] = (unint64_t)(v21 - v34) >> 11;
    v36[56] = (unint64_t)(v42 + 0x7FFFFFFD2C0 * v15) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v46 = 0;
  uint64_t v47 = v89 - 384;
  do
  {
    int v48 = &v93[v46];
    int v49 = (unsigned char *)(*(void *)(a4 + v46) + a5);
    int v50 = v48[1];
    int v51 = (*v48 << 13) + 134348800;
    int v52 = v48[6];
    int v53 = v48[7];
    int v54 = v51 - 3580 * v52;
    int v55 = v51 + 9373 * v52;
    int v56 = v48[2];
    int v57 = v48[3];
    int v58 = v48[4];
    int v59 = v48[5];
    LODWORD(v48) = v51 - 11586 * v52;
    int v60 = v56 - v58;
    int v61 = v58 + v56;
    v56 *= 11795;
    int v62 = 374 * v60 + 10958 * v61 + v55;
    int v63 = v56 - 10958 * v61 + 374 * v60;
    int v64 = -3271 * v60 - 4482 * v61 + v55;
    int v65 = 4482 * v61 - v56 - 3271 * v60;
    v61 *= 6476;
    int v66 = 2896 * v60;
    int v67 = v63 + v54;
    int v68 = 2896 * v60 + v61 + v54;
    int v69 = v55 - v61;
    int v70 = v48 + 5792 * v60;
    unint64_t v71 = (v48 + 268423872 * v60);
    int v72 = v65 + v54;
    int v73 = 10033 * v59;
    int v74 = v57 - v53;
    int v75 = -11018 * v57;
    int v76 = 10033 * v59 + 11522 * (v50 - v53);
    int v77 = v69 + v66;
    int v78 = 11018 * v57 + 20131 * v53 + v76;
    unint64_t v79 = (v78 + v62);
    unint64_t v80 = (v62 - v78);
    int v81 = 6810 * (v57 - v53 + v50);
    *int v49 = *(unsigned char *)(v47 + ((v79 >> 18) & 0x3FF));
    LODWORD(v79) = v81 + 4209 * v50;
    v49[14] = *(unsigned char *)(v47 + ((v80 >> 18) & 0x3FF));
    v49[1] = *(unsigned char *)(v47 + (((unint64_t)(v79 + v68) >> 18) & 0x3FF));
    int v82 = 10033 * (v50 - v53 - v59);
    v49[13] = *(unsigned char *)(v47 + (((unint64_t)(v68 - v79) >> 18) & 0x3FF));
    v57 *= -6810;
    v49[2] = *(unsigned char *)(v47 + (((unint64_t)(v82 + v70) >> 18) & 0x3FF));
    LODWORD(v80) = 4712 * (v53 + v50);
    unint64_t v83 = (v70 - v82);
    int v84 = v57 + 3897 * v50 - v73 + v80;
    v49[12] = *(unsigned char *)(v47 + ((v83 >> 18) & 0x3FF));
    int v85 = v81 - 17828 * v74;
    v49[3] = *(unsigned char *)(v47 + (((unint64_t)(v84 + v67) >> 18) & 0x3FF));
    uint64_t result = (v73 + v75);
    v49[11] = *(unsigned char *)(v47 + (((unint64_t)(v67 - v84) >> 18) & 0x3FF));
    v49[4] = *(unsigned char *)(v47 + (((unint64_t)(v85 + v77) >> 18) & 0x3FF));
    int v87 = result - 7121 * v53 + v80;
    v49[10] = *(unsigned char *)(v47 + (((unint64_t)(v77 - v85) >> 18) & 0x3FF));
    v49[5] = *(unsigned char *)(v47 + (((unint64_t)(v87 + v64) >> 18) & 0x3FF));
    int v88 = v57 - 9113 * v50 + v76;
    v49[9] = *(unsigned char *)(v47 + (((unint64_t)(v64 - v87) >> 18) & 0x3FF));
    v49[6] = *(unsigned char *)(v47 + (((unint64_t)(v88 + v72) >> 18) & 0x3FF));
    v49[8] = *(unsigned char *)(v47 + (((unint64_t)(v72 - v88) >> 18) & 0x3FF));
    v49[7] = *(unsigned char *)(v47 + ((v71 >> 18) & 0x3FF));
    v46 += 8;
  }
  while (v46 != 120);
  return result;
}

uint64_t sub_1003E619C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v110 = *(void *)(a1 + 408);
  uint64_t v113 = *(void *)(a2 + 88);
  do
  {
    uint64_t v6 = (_DWORD *)(v113 + 4 * v5);
    uint64_t v7 = (__int16 *)(a3 + 2 * v5);
    uint64_t v8 = (int)v6[32] * (uint64_t)v7[32];
    uint64_t v9 = ((uint64_t)(*v6 * *v7) << 13) | 0x400;
    uint64_t v10 = 10703 * v8;
    v8 *= 4433;
    uint64_t v11 = v10 + v9;
    uint64_t v12 = v9 - v10;
    uint64_t v13 = v8 + v9;
    uint64_t v14 = v9 - v8;
    uint64_t v15 = (int)v6[16] * (uint64_t)v7[16];
    uint64_t v16 = (int)v6[48] * (uint64_t)v7[48];
    uint64_t v17 = 2260 * (v15 - v16);
    uint64_t v18 = 11363 * (v15 - v16);
    uint64_t v19 = v18 + 20995 * v16;
    uint64_t v20 = v17 + 7373 * v15;
    uint64_t v21 = v18 - 4926 * v15;
    uint64_t v22 = v17 - 4176 * v16;
    uint64_t v23 = v19 + v11;
    uint64_t v116 = v11 - v19;
    uint64_t v24 = v20 + v13;
    uint64_t v115 = v13 - v20;
    uint64_t v25 = v21 + v14;
    uint64_t v26 = v14 - v21;
    uint64_t v27 = v22 + v12;
    uint64_t v28 = v12 - v22;
    uint64_t v29 = (int)v6[8] * (uint64_t)v7[8];
    uint64_t v30 = (int)v6[24] * (uint64_t)v7[24];
    int v31 = v7[40];
    int v32 = v6[40];
    int v33 = v7[56];
    int v34 = v6[56];
    uint64_t v35 = v29 + v32 * (uint64_t)v7[40];
    uint64_t v36 = 11086 * (v29 + v30);
    uint64_t v37 = 10217 * v35;
    uint64_t v38 = 8956 * (v29 + v34 * (uint64_t)v33);
    uint64_t v39 = 7350 * (v29 - v34 * (uint64_t)v33);
    uint64_t v40 = 5461 * v35;
    uint64_t v41 = 3363 * (v29 - v30);
    uint64_t v42 = v36 - 18730 * v29 + 10217 * v35 + v38;
    uint64_t v43 = v41 - 15038 * v29 + 5461 * v35 + v39;
    uint64_t v44 = 1136 * (v30 + v32 * (uint64_t)v31);
    uint64_t v45 = v30 + v34 * (uint64_t)v33;
    uint64_t v46 = -5461 * v45;
    uint64_t v47 = v36 + 589 * v30 + v44 - 5461 * v45;
    uint64_t v48 = v32 * (uint64_t)v31;
    uint64_t v49 = 11529 * (v48 - v30);
    uint64_t v50 = -10217 * v45;
    uint64_t v51 = v41 + 16154 * v30 + v49 - 10217 * v45;
    uint64_t v52 = v44 - 9222 * v48 + v37 - 11086 * (v48 + v34 * (uint64_t)v33);
    uint64_t v53 = v38 - 11086 * (v48 + v34 * (uint64_t)v33);
    uint64_t v54 = v34 * (uint64_t)v33;
    uint64_t v55 = v46 + 8728 * v54 + v53;
    uint64_t v56 = 3363 * (v54 - v48);
    uint64_t v57 = v50 + 25733 * v54 + v39 + v56;
    int v58 = &v117[v5];
    uint64_t v59 = v49 - 6278 * v48 + v40 + v56;
    _DWORD *v58 = (unint64_t)(v42 + v23) >> 11;
    v58[120] = (unint64_t)(v23 - v42) >> 11;
    v58[8] = (unint64_t)(v47 + v24) >> 11;
    v58[112] = (unint64_t)(v24 - v47) >> 11;
    v58[16] = (unint64_t)(v52 + v25) >> 11;
    v58[104] = (unint64_t)(v25 - v52) >> 11;
    v58[24] = (unint64_t)(v55 + v27) >> 11;
    v58[96] = (unint64_t)(v27 - v55) >> 11;
    v58[32] = (unint64_t)(v57 + v28) >> 11;
    v58[88] = (unint64_t)(v28 - v57) >> 11;
    v58[40] = (unint64_t)(v59 + v26) >> 11;
    v58[80] = (unint64_t)(v26 - v59) >> 11;
    v58[48] = (unint64_t)(v51 + v115) >> 11;
    v58[72] = (unint64_t)(v115 - v51) >> 11;
    v58[56] = (unint64_t)(v43 + v116) >> 11;
    v58[64] = (unint64_t)(v116 - v43) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v60 = 0;
  uint64_t v61 = v110 - 384;
  do
  {
    int v62 = &v117[v60];
    int v63 = v62[1];
    int v64 = v62[4];
    int v65 = v62[5];
    int v66 = (*v62 << 13) + 134348800;
    int v67 = 10703 * v64;
    v64 *= 4433;
    int v68 = v66 + v67;
    int v69 = v66 - v67;
    int v71 = v62[2];
    int v70 = v62[3];
    int v72 = v66 + v64;
    int v73 = v62[6];
    int v74 = v62[7];
    int v75 = 2260 * (v71 - v73);
    int v76 = v66 - v64;
    LODWORD(v62) = 11363 * (v71 - v73);
    int v77 = v62 + 20995 * v73;
    int v78 = v75 + 7373 * v71;
    int v79 = v62 - 4926 * v71;
    int v80 = v75 - 4176 * v73;
    int v81 = v77 + v68;
    LODWORD(v62) = v68 - v77;
    int v82 = v78 + v72;
    int v83 = v72 - v78;
    int v84 = v79 + v76;
    uint64_t result = (v76 - v79);
    int v86 = 11086 * (v70 + v63);
    int v87 = 10217 * (v65 + v63);
    int v88 = 8956 * (v74 + v63);
    int v89 = v80 + v69;
    int v90 = 7350 * (v63 - v74);
    int v91 = 5461 * (v65 + v63);
    int v92 = 3363 * (v63 - v70);
    int v93 = v69 - v80;
    int v94 = v86 - 18730 * v63 + v87 + v88;
    int v95 = v92 - 15038 * v63 + v91 + v90;
    int v96 = 1136 * (v65 + v70);
    int v97 = v96 - 9222 * v65;
    int v98 = v86 + 589 * v70 + v96 - 5461 * (v74 + v70);
    int v99 = v97 + v87 - 11086 * (v74 + v65);
    int v100 = -5461 * (v74 + v70) + 8728 * v74 + v88 - 11086 * (v74 + v65);
    uint64_t v101 = (unsigned char *)(*(void *)(a4 + v60) + a5);
    *uint64_t v101 = *(unsigned char *)(v61 + (((unint64_t)(v94 + v81) >> 18) & 0x3FF));
    v101[15] = *(unsigned char *)(v61 + (((unint64_t)(v81 - v94) >> 18) & 0x3FF));
    v101[1] = *(unsigned char *)(v61 + (((unint64_t)(v98 + v82) >> 18) & 0x3FF));
    int v102 = -10217 * (v74 + v70);
    int v103 = v102 + 25733 * v74;
    int v104 = 3363 * (v74 - v65);
    int v105 = v103 + v90 + v104;
    v101[14] = *(unsigned char *)(v61 + (((unint64_t)(v82 - v98) >> 18) & 0x3FF));
    v101[2] = *(unsigned char *)(v61 + (((unint64_t)(v99 + v84) >> 18) & 0x3FF));
    v101[13] = *(unsigned char *)(v61 + (((unint64_t)(v84 - v99) >> 18) & 0x3FF));
    v101[3] = *(unsigned char *)(v61 + (((unint64_t)(v100 + v89) >> 18) & 0x3FF));
    v101[12] = *(unsigned char *)(v61 + (((unint64_t)(v89 - v100) >> 18) & 0x3FF));
    v101[4] = *(unsigned char *)(v61 + (((unint64_t)(v105 + v93) >> 18) & 0x3FF));
    int v106 = v92 + 16154 * v70;
    int v107 = 11529 * (v65 - v70);
    int v108 = v107 - 6278 * v65 + v91 + v104;
    v101[11] = *(unsigned char *)(v61 + (((unint64_t)(v93 - v105) >> 18) & 0x3FF));
    v101[5] = *(unsigned char *)(v61 + (((unint64_t)(v108 + result) >> 18) & 0x3FF));
    int v109 = v106 + v107 + v102;
    v101[10] = *(unsigned char *)(v61 + (((unint64_t)(result - v108) >> 18) & 0x3FF));
    v101[6] = *(unsigned char *)(v61 + (((unint64_t)(v109 + v83) >> 18) & 0x3FF));
    v101[9] = *(unsigned char *)(v61 + (((unint64_t)(v83 - v109) >> 18) & 0x3FF));
    v101[7] = *(unsigned char *)(v61 + (((unint64_t)(v95 + v62) >> 18) & 0x3FF));
    v101[8] = *(unsigned char *)(v61 + (((unint64_t)(v62 - v95) >> 18) & 0x3FF));
    v60 += 8;
  }
  while (v60 != 128);
  return result;
}

uint64_t sub_1003E67CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = (__int16 *)(a3 + 64);
  uint64_t v7 = *(void *)(a2 + 88) + 128;
  uint64_t v91 = *(void *)(a1 + 408);
  for (unsigned int i = 9; i > 1; --i)
  {
    uint64_t v9 = (_DWORD *)(v7 + v5);
    unsigned __int16 v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10) {
      goto LABEL_9;
    }
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      unsigned __int16 v10 = 0;
LABEL_9:
      uint64_t v11 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      uint64_t v12 = (int)v9[16] * (uint64_t)v6[16];
      uint64_t v13 = 4433 * (v11 + v12);
      uint64_t v14 = v13 + 6270 * v11;
      uint64_t v15 = v13 - 15137 * v12;
      uint64_t v16 = (uint64_t)(*v9 * *v6) << 13;
      uint64_t v17 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      uint64_t v18 = v16 + v17;
      uint64_t v19 = v17 - v16;
      uint64_t v20 = v18 + v14;
      uint64_t v21 = v18 - v14;
      uint64_t v22 = v19 + v15;
      uint64_t v23 = v19 - v15;
      uint64_t v24 = (int)v9[24] * (uint64_t)v6[24];
      uint64_t v25 = (int)v9[8] * (uint64_t)v6[8];
      uint64_t v26 = (int)*(v9 - 8) * (uint64_t)*(v6 - 8);
      uint64_t v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      uint64_t v28 = 9633 * (v25 + v27 + v24 + v26);
      uint64_t v29 = v28 - 16069 * (v24 + v26);
      uint64_t v30 = v28 - 3196 * (v25 + v27);
      uint64_t v31 = -7373 * (v24 + v27);
      uint64_t v32 = v31 + 2446 * v24 + v29;
      uint64_t v33 = v31 + 12299 * v27 + v30;
      uint64_t v34 = -20995 * (v25 + v26);
      uint64_t v35 = v34 + 16819 * v25 + v30;
      uint64_t v36 = v34 + 25172 * v26 + v29;
      uint64_t v37 = &v94[v5];
      *uint64_t v37 = (unint64_t)(v33 + v20) >> 11;
      v37[56] = (unint64_t)(v20 - v33) >> 11;
      v37[8] = (unint64_t)(v36 + v22) >> 11;
      v37[48] = (unint64_t)(v22 - v36) >> 11;
      v37[16] = (unint64_t)(v35 + v23) >> 11;
      v37[40] = (unint64_t)(v23 - v35) >> 11;
      v37[24] = (unint64_t)(v32 + v21) >> 11;
      unint64_t v38 = (unint64_t)(v21 - v32) >> 11;
      uint64_t v39 = 32;
      goto LABEL_10;
    }
    LODWORD(v38) = 4 * *(v6 - 32) * *(v9 - 32);
    uint64_t v40 = &v94[v5];
    *uint64_t v40 = v38;
    v40[8] = v38;
    v40[16] = v38;
    v40[24] = v38;
    v40[32] = v38;
    v40[40] = v38;
    v40[48] = v38;
    uint64_t v39 = 56;
LABEL_10:
    *(_DWORD *)&v94[4 * v39 + v5] = v38;
    v5 += 4;
    ++v6;
  }
  uint64_t v41 = 0;
  uint64_t v42 = v91 - 384;
  do
  {
    uint64_t v43 = &v94[4 * v41];
    int v44 = v43[1];
    int v45 = v43[4];
    int v46 = v43[5];
    int v47 = (*v43 << 13) + 134348800;
    int v48 = 10703 * v45;
    v45 *= 4433;
    int v49 = v47 + v48;
    int v50 = v47 - v48;
    int v52 = v43[2];
    int v51 = v43[3];
    int v53 = v47 + v45;
    int v54 = v43[6];
    int v55 = v43[7];
    int v56 = 2260 * (v52 - v54);
    int v57 = v47 - v45;
    LODWORD(v43) = 11363 * (v52 - v54);
    int v58 = v43 + 20995 * v54;
    int v59 = v56 + 7373 * v52;
    int v60 = v43 - 4926 * v52;
    int v61 = v56 - 4176 * v54;
    int v62 = v58 + v49;
    LODWORD(v43) = v49 - v58;
    int v63 = v59 + v53;
    int v64 = v53 - v59;
    int v65 = v60 + v57;
    uint64_t result = (v57 - v60);
    int v67 = 11086 * (v51 + v44);
    int v68 = 10217 * (v46 + v44);
    int v69 = 8956 * (v55 + v44);
    int v70 = v61 + v50;
    int v71 = 7350 * (v44 - v55);
    int v72 = 5461 * (v46 + v44);
    int v73 = 3363 * (v44 - v51);
    int v74 = v50 - v61;
    int v75 = v67 - 18730 * v44 + v68 + v69;
    int v76 = v73 - 15038 * v44 + v72 + v71;
    int v77 = 1136 * (v46 + v51);
    int v78 = v77 - 9222 * v46;
    int v79 = v67 + 589 * v51 + v77 - 5461 * (v55 + v51);
    int v80 = v78 + v68 - 11086 * (v55 + v46);
    int v81 = -5461 * (v55 + v51) + 8728 * v55 + v69 - 11086 * (v55 + v46);
    int v82 = (unsigned char *)(*(void *)(a4 + v41) + a5);
    *int v82 = *(unsigned char *)(v42 + (((unint64_t)(v75 + v62) >> 18) & 0x3FF));
    v82[15] = *(unsigned char *)(v42 + (((unint64_t)(v62 - v75) >> 18) & 0x3FF));
    v82[1] = *(unsigned char *)(v42 + (((unint64_t)(v79 + v63) >> 18) & 0x3FF));
    int v83 = -10217 * (v55 + v51);
    int v84 = v83 + 25733 * v55;
    int v85 = 3363 * (v55 - v46);
    int v86 = v84 + v71 + v85;
    v82[14] = *(unsigned char *)(v42 + (((unint64_t)(v63 - v79) >> 18) & 0x3FF));
    v82[2] = *(unsigned char *)(v42 + (((unint64_t)(v80 + v65) >> 18) & 0x3FF));
    v82[13] = *(unsigned char *)(v42 + (((unint64_t)(v65 - v80) >> 18) & 0x3FF));
    v82[3] = *(unsigned char *)(v42 + (((unint64_t)(v81 + v70) >> 18) & 0x3FF));
    v82[12] = *(unsigned char *)(v42 + (((unint64_t)(v70 - v81) >> 18) & 0x3FF));
    v82[4] = *(unsigned char *)(v42 + (((unint64_t)(v86 + v74) >> 18) & 0x3FF));
    int v87 = v73 + 16154 * v51;
    int v88 = 11529 * (v46 - v51);
    int v89 = v88 - 6278 * v46 + v72 + v85;
    v82[11] = *(unsigned char *)(v42 + (((unint64_t)(v74 - v86) >> 18) & 0x3FF));
    v82[5] = *(unsigned char *)(v42 + (((unint64_t)(v89 + result) >> 18) & 0x3FF));
    int v90 = v87 + v88 + v83;
    v82[10] = *(unsigned char *)(v42 + (((unint64_t)(result - v89) >> 18) & 0x3FF));
    v82[6] = *(unsigned char *)(v42 + (((unint64_t)(v90 + v64) >> 18) & 0x3FF));
    v82[9] = *(unsigned char *)(v42 + (((unint64_t)(v64 - v90) >> 18) & 0x3FF));
    v82[7] = *(unsigned char *)(v42 + (((unint64_t)(v76 + v43) >> 18) & 0x3FF));
    v82[8] = *(unsigned char *)(v42 + (((unint64_t)(v43 - v76) >> 18) & 0x3FF));
    v41 += 8;
  }
  while (v41 != 64);
  return result;
}

uint64_t sub_1003E6D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v69 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = &v72[v5];
    uint64_t v8 = (_DWORD *)(v6 + 4 * v5);
    uint64_t v9 = (__int16 *)(a3 + 2 * v5);
    uint64_t v10 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    uint64_t v11 = (int)v8[16] * (uint64_t)v9[16];
    uint64_t v12 = (int)v8[32] * (uint64_t)v9[32];
    uint64_t v13 = (int)v8[48] * (uint64_t)v9[48];
    uint64_t v14 = 7223 * (v12 - v13);
    uint64_t v15 = 2578 * (v11 - v12);
    uint64_t v16 = v10 - 15083 * v12 + v15 + v14;
    uint64_t v17 = v10 + 10438 * (v11 + v13);
    uint64_t v18 = v14 - 637 * v13 + v17;
    uint64_t v19 = v15 - 20239 * v11 + v17;
    unint64_t v20 = v10 + 11585 * (v12 - (v11 + v13));
    uint64_t v21 = (int)v8[8] * (uint64_t)v9[8];
    uint64_t v22 = (int)v8[24] * (uint64_t)v9[24];
    uint64_t v23 = (int)v8[40] * (uint64_t)v9[40];
    uint64_t v24 = 7663 * (v21 + v22);
    uint64_t v25 = 1395 * (v21 - v22);
    uint64_t v26 = v24 - v25;
    uint64_t v27 = v24 + v25 - 11295 * (v22 + v23);
    uint64_t v28 = 5027 * (v21 + v23);
    uint64_t v29 = v28 + v26;
    uint64_t v30 = v28 + 15326 * v23 - 11295 * (v22 + v23);
    *uint64_t v7 = (unint64_t)(v29 + v18) >> 11;
    v7[48] = (unint64_t)(v18 - v29) >> 11;
    v7[8] = (unint64_t)(v27 + v16) >> 11;
    v7[40] = (unint64_t)(v16 - v27) >> 11;
    v7[16] = (unint64_t)(v30 + v19) >> 11;
    v7[32] = (unint64_t)(v19 - v30) >> 11;
    v7[24] = v20 >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v31 = 0;
  uint64_t v32 = v69 - 384;
  do
  {
    uint64_t v33 = &v72[v31];
    int v34 = v33[1];
    int v35 = (*v33 << 13) + 134348800;
    int v36 = v33[4];
    int v37 = v33[5];
    int v38 = v35 + 10438 * v36;
    int v39 = v35 + 2578 * v36;
    int v40 = v35 - 7223 * v36;
    int v42 = v33[2];
    int v41 = v33[3];
    int v43 = v33[6];
    int v44 = v33[7];
    int v45 = v35 - 11586 * v36;
    LODWORD(v33) = 9058 * (v43 + v42);
    int v46 = v33 + 2237 * v42;
    int v47 = v33 - 14084 * v43;
    LODWORD(v33) = 5027 * v42 - 11295 * v43;
    int v48 = v46 + v38;
    int v49 = v38 - v46;
    int v50 = v33 + v40;
    LODWORD(v33) = v40 - v33;
    int v51 = v44 << 13;
    int v52 = v47 + v39;
    int v53 = 10935 * (v41 + v34);
    int v54 = v39 - v47;
    int v55 = v53 - 9232 * v34 + 9810 * (v37 + v34) + (v44 << 13);
    int v56 = -8192 * v44 - 1297 * (v37 + v41);
    int v57 = v53 - 3474 * v41 + v56;
    int v58 = 9810 * (v37 + v34) - 19447 * v37 + v56;
    int v59 = (unsigned char *)(*(void *)(a4 + v31) + a5);
    *int v59 = *(unsigned char *)(v32 + (((unint64_t)(v55 + v48) >> 18) & 0x3FF));
    v59[13] = *(unsigned char *)(v32 + (((unint64_t)(v48 - v55) >> 18) & 0x3FF));
    v59[1] = *(unsigned char *)(v32 + (((unint64_t)(v57 + v52) >> 18) & 0x3FF));
    LOBYTE(v48) = *(unsigned char *)(v32 + (((unint64_t)(v52 - v57) >> 18) & 0x3FF));
    int v60 = -8192 * v44 + 3826 * (v34 - v41);
    v59[12] = v48;
    int v61 = v34 - v41 - v37 + v44;
    v59[2] = *(unsigned char *)(v32 + (((unint64_t)(v58 + v50) >> 18) & 0x3FF));
    unint64_t v62 = (v50 - v58);
    int v63 = v51 - 13850 * v37;
    uint64_t result = (6164 * (v37 + v34));
    int v65 = 11512 * (v37 - v41);
    v61 <<= 13;
    v59[11] = *(unsigned char *)(v32 + ((v62 >> 18) & 0x3FF));
    int v66 = v63 + v65 + result;
    v59[3] = *(unsigned char *)(v32 + (((unint64_t)(v61 + v45) >> 18) & 0x3FF));
    v59[10] = *(unsigned char *)(v32 + (((unint64_t)(v45 - v61) >> 18) & 0x3FF));
    v59[4] = *(unsigned char *)(v32 + (((unint64_t)(v66 + v33) >> 18) & 0x3FF));
    int v67 = result - 8693 * v34 + v60;
    int v68 = v65 + 5529 * v41 + v60;
    v59[9] = *(unsigned char *)(v32 + (((unint64_t)(v33 - v66) >> 18) & 0x3FF));
    v59[5] = *(unsigned char *)(v32 + (((unint64_t)(v68 + v54) >> 18) & 0x3FF));
    v59[8] = *(unsigned char *)(v32 + (((unint64_t)(v54 - v68) >> 18) & 0x3FF));
    v59[6] = *(unsigned char *)(v32 + (((unint64_t)(v67 + v49) >> 18) & 0x3FF));
    v59[7] = *(unsigned char *)(v32 + (((unint64_t)(v49 - v67) >> 18) & 0x3FF));
    v31 += 8;
  }
  while (v31 != 56);
  return result;
}

uint64_t sub_1003E7168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 408);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v59[v5];
    uint64_t v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[32] * (uint64_t)v10[32];
    uint64_t v13 = v11 + 5793 * v12;
    unint64_t v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    uint64_t v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    uint64_t v16 = v15 + v13;
    uint64_t v17 = v13 - v15;
    uint64_t v18 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v19 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v20 = (int)v9[40] * (uint64_t)v10[40];
    uint64_t v21 = 2998 * (v18 + v20);
    uint64_t v22 = v21 + ((v18 + v19) << 13);
    uint64_t v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = 4 * (v18 - (v19 + v20));
    *uint64_t v8 = (unint64_t)(v22 + v16) >> 11;
    v8[40] = (unint64_t)(v16 - v22) >> 11;
    v8[8] = v18 + v14;
    v8[32] = v14 - v18;
    v8[16] = (unint64_t)(v23 + v17) >> 11;
    v8[24] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v24 = 0;
  uint64_t v25 = v6 - 384;
  do
  {
    uint64_t v26 = &v59[v24];
    int v27 = v26[1];
    int v28 = (*v26 << 13) + 134348800;
    int v29 = v26[5];
    int v30 = 10033 * v26[4];
    int v31 = v28 + v30;
    int v33 = v26[6];
    int v32 = v26[7];
    int v34 = v33 << 13;
    int v35 = v26[2];
    int v36 = v26[3];
    int v37 = v28 - v30;
    LODWORD(v26) = (v35 - v33) << 13;
    int v38 = v26 + v28;
    int v39 = v28 - v26;
    LODWORD(v26) = v34 + 11190 * v35;
    int v40 = v26 + v31;
    LODWORD(v26) = v31 - v26;
    int v41 = 2998 * v35 - v34;
    int v42 = 10703 * v36;
    int v43 = -4433 * v36;
    int v44 = v41 + v37;
    int v45 = 7053 * (v29 + v27 + v32);
    int v46 = v45 + 2139 * (v29 + v27);
    int v47 = v37 - v41;
    int v48 = 10703 * v36 + 2295 * v27 + v46;
    int v49 = -8565 * (v32 + v29);
    int v50 = -4433 * v36 - 12112 * v29 - 8565 * (v32 + v29) + v46;
    int v51 = v36 - v29;
    int v52 = (unsigned char *)(*(void *)(a4 + v24) + a5);
    unsigned char *v52 = *(unsigned char *)(v25 + (((unint64_t)(v48 + v40) >> 18) & 0x3FF));
    unint64_t v53 = (v40 - v48);
    uint64_t result = (4433 * (v27 - v32 + v51));
    int v55 = result + 6270 * (v27 - v32);
    v52[11] = *(unsigned char *)(v25 + ((v53 >> 18) & 0x3FF));
    v52[1] = *(unsigned char *)(v25 + (((unint64_t)(v55 + v38) >> 18) & 0x3FF));
    int v56 = 12998 * v32 - v42 + v45 + v49;
    v52[10] = *(unsigned char *)(v25 + (((unint64_t)(v38 - v55) >> 18) & 0x3FF));
    v52[2] = *(unsigned char *)(v25 + (((unint64_t)(v50 + v44) >> 18) & 0x3FF));
    v52[9] = *(unsigned char *)(v25 + (((unint64_t)(v44 - v50) >> 18) & 0x3FF));
    int v57 = v43 - 5540 * v27 - 16244 * v32 + v45;
    v52[3] = *(unsigned char *)(v25 + (((unint64_t)(v56 + v47) >> 18) & 0x3FF));
    LOBYTE(v47) = *(unsigned char *)(v25 + (((unint64_t)(v47 - v56) >> 18) & 0x3FF));
    int v58 = result - 15137 * v51;
    v52[8] = v47;
    v52[4] = *(unsigned char *)(v25 + (((unint64_t)(v58 + v39) >> 18) & 0x3FF));
    v52[7] = *(unsigned char *)(v25 + (((unint64_t)(v39 - v58) >> 18) & 0x3FF));
    v52[5] = *(unsigned char *)(v25 + (((unint64_t)(v57 + v26) >> 18) & 0x3FF));
    v52[6] = *(unsigned char *)(v25 + (((unint64_t)(v26 - v57) >> 18) & 0x3FF));
    v24 += 8;
  }
  while (v24 != 48);
  return result;
}

uint64_t sub_1003E74C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 408);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v55[v5];
    uint64_t v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[16] * (uint64_t)v10[16];
    int v13 = v9[32];
    uint64_t v14 = 6476 * (v12 + v13 * (uint64_t)v10[32]);
    uint64_t v15 = v12 - v13 * (uint64_t)v10[32];
    uint64_t v16 = v11 + 2896 * v15;
    uint64_t v17 = v16 + v14;
    uint64_t v18 = v16 - v14;
    unint64_t v19 = v11 + 0x7FFFFFFD2C0 * v15;
    uint64_t v20 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v21 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v22 = 6810 * (v20 + v21);
    uint64_t v23 = v22 + 4209 * v20;
    uint64_t v24 = v22 - 17828 * v21;
    *uint64_t v8 = (unint64_t)(v23 + v17) >> 11;
    v8[32] = (unint64_t)(v17 - v23) >> 11;
    v8[8] = (unint64_t)(v24 + v18) >> 11;
    v8[24] = (unint64_t)(v18 - v24) >> 11;
    v8[16] = v19 >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v25 = 0;
  uint64_t v26 = v6 - 384;
  uint64_t result = 2531;
  do
  {
    int v28 = &v55[v25];
    int v29 = (unsigned char *)(*(void *)(a4 + v25) + a5);
    int v30 = v28[1];
    int v31 = (*v28 << 13) + 134348800;
    int v32 = v28[4];
    int v33 = v28[5];
    int v34 = v31 + 9373 * v32;
    int v35 = v31 - 3580 * v32;
    int v36 = v31 - 11586 * v32;
    int v38 = v28[2];
    int v37 = v28[3];
    int v39 = v28[6];
    int v40 = v28[7];
    LODWORD(v28) = 6810 * (v39 + v38);
    int v41 = v28 + 4209 * v38;
    int v42 = v28 - 17828 * v39;
    int v43 = v41 + v34;
    LODWORD(v28) = v34 - v41;
    int v44 = v42 + v35;
    int v45 = v35 - v42;
    int v46 = v40 + v37;
    int v47 = v37 - v40;
    int v48 = (v33 << 13) + 2531 * v47;
    int v49 = (v33 << 13) - 6627 * v47;
    int v50 = v30 - v33 - v47;
    int v51 = 7791 * v46 + 11443 * v30 + v48;
    int v52 = 1812 * v30 - 7791 * v46 + v48;
    *int v29 = *(unsigned char *)(v26 + (((unint64_t)(v51 + v43) >> 18) & 0x3FF));
    unint64_t v53 = (v43 - v51);
    int v54 = 10323 * v30 - (4815 * v46 + v49);
    v29[9] = *(unsigned char *)(v26 + ((v53 >> 18) & 0x3FF));
    v29[1] = *(unsigned char *)(v26 + (((unint64_t)(v54 + v44) >> 18) & 0x3FF));
    v50 <<= 13;
    v29[8] = *(unsigned char *)(v26 + (((unint64_t)(v44 - v54) >> 18) & 0x3FF));
    v29[2] = *(unsigned char *)(v26 + (((unint64_t)(v50 + v36) >> 18) & 0x3FF));
    LODWORD(v53) = 5260 * v30 - 4815 * v46 + v49;
    v29[7] = *(unsigned char *)(v26 + (((unint64_t)(v36 - v50) >> 18) & 0x3FF));
    v29[3] = *(unsigned char *)(v26 + (((unint64_t)(v53 + v45) >> 18) & 0x3FF));
    v29[6] = *(unsigned char *)(v26 + (((unint64_t)(v45 - v53) >> 18) & 0x3FF));
    v29[4] = *(unsigned char *)(v26 + (((unint64_t)(v52 + v28) >> 18) & 0x3FF));
    v29[5] = *(unsigned char *)(v26 + (((unint64_t)(v28 - v52) >> 18) & 0x3FF));
    v25 += 8;
  }
  while (v25 != 40);
  return result;
}

uint64_t sub_1003E77C0(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *(_DWORD **)(a2 + 88);
  int v7 = *v6 * *a3;
  int v8 = v6[16] * a3[16];
  uint64_t v9 = (int)v6[8] * (uint64_t)a3[8];
  uint64_t v10 = (int)v6[24] * (uint64_t)a3[24];
  uint64_t v11 = 4433 * (v9 + v10) + 1024;
  int v12 = 4 * (v8 + v7);
  int v13 = 4 * (v7 - v8);
  unint64_t v14 = (unint64_t)(v11 + 6270 * v9) >> 11;
  unint64_t v15 = (unint64_t)(v11 - 15137 * v10) >> 11;
  LODWORD(v11) = v14 + v12;
  LODWORD(v14) = v12 - v14;
  int v16 = v15 + v13;
  LODWORD(v15) = v13 - v15;
  int v17 = v6[1] * a3[1];
  int v18 = v6[17] * a3[17];
  int v19 = 4 * (v18 + v17);
  int v20 = 4 * (v17 - v18);
  uint64_t v21 = (int)v6[9] * (uint64_t)a3[9];
  uint64_t v22 = (int)v6[25] * (uint64_t)a3[25];
  uint64_t v23 = 4433 * (v21 + v22) + 1024;
  unint64_t v24 = (unint64_t)(v23 + 6270 * v21) >> 11;
  unint64_t v25 = (unint64_t)(v23 - 15137 * v22) >> 11;
  v98[0] = v11;
  v98[1] = v24 + v19;
  v98[24] = v14;
  v98[25] = v19 - v24;
  v98[8] = v16;
  v98[9] = v25 + v20;
  v98[16] = v15;
  v98[17] = v20 - v25;
  int v26 = v6[2] * a3[2];
  LODWORD(v24) = v6[18] * a3[18];
  LODWORD(v14) = 4 * (v24 + v26);
  int v27 = 4 * (v26 - v24);
  uint64_t v28 = (int)v6[10] * (uint64_t)a3[10];
  uint64_t v29 = (int)v6[26] * (uint64_t)a3[26];
  uint64_t v30 = 4433 * (v28 + v29) + 1024;
  unint64_t v31 = (unint64_t)(v30 + 6270 * v28) >> 11;
  unint64_t v32 = (unint64_t)(v30 - 15137 * v29) >> 11;
  int v33 = v31 + v14;
  LODWORD(v31) = v14 - v31;
  LODWORD(v14) = v32 + v27;
  int v34 = v27 - v32;
  LODWORD(v25) = v6[3] * a3[3];
  int v35 = v6[19] * a3[19];
  LODWORD(v32) = 4 * (v35 + v25);
  LODWORD(v25) = 4 * (v25 - v35);
  uint64_t v36 = (int)v6[11] * (uint64_t)a3[11];
  uint64_t v37 = (int)v6[27] * (uint64_t)a3[27];
  uint64_t v38 = 4433 * (v36 + v37) + 1024;
  unint64_t v39 = (unint64_t)(v38 + 6270 * v36) >> 11;
  unint64_t v40 = (unint64_t)(v38 - 15137 * v37) >> 11;
  v98[2] = v33;
  v98[3] = v39 + v32;
  v98[26] = v31;
  v98[27] = v32 - v39;
  v98[10] = v14;
  v98[11] = v40 + v25;
  v98[18] = v34;
  v98[19] = v25 - v40;
  int v41 = v6[4] * a3[4];
  LODWORD(v31) = v6[20] * a3[20];
  LODWORD(v14) = 4 * (v31 + v41);
  int v42 = 4 * (v41 - v31);
  uint64_t v43 = (int)v6[12] * (uint64_t)a3[12];
  uint64_t v44 = (int)v6[28] * (uint64_t)a3[28];
  uint64_t v45 = 4433 * (v43 + v44) + 1024;
  unint64_t v46 = (unint64_t)(v45 + 6270 * v43) >> 11;
  unint64_t v47 = (unint64_t)(v45 - 15137 * v44) >> 11;
  int v48 = v46 + v14;
  LODWORD(v46) = v14 - v46;
  LODWORD(v14) = v47 + v42;
  int v49 = v42 - v47;
  LODWORD(v25) = v6[5] * a3[5];
  LODWORD(v39) = v6[21] * a3[21];
  LODWORD(v47) = 4 * (v39 + v25);
  LODWORD(v25) = 4 * (v25 - v39);
  uint64_t v50 = (int)v6[13] * (uint64_t)a3[13];
  uint64_t v51 = (int)v6[29] * (uint64_t)a3[29];
  uint64_t v52 = 4433 * (v50 + v51) + 1024;
  unint64_t v53 = (unint64_t)(v52 + 6270 * v50) >> 11;
  unint64_t v54 = (unint64_t)(v52 - 15137 * v51) >> 11;
  v98[4] = v48;
  v98[5] = v53 + v47;
  v98[28] = v46;
  v98[29] = v47 - v53;
  v98[12] = v14;
  v98[13] = v54 + v25;
  LODWORD(v46) = v25 - v54;
  LODWORD(v25) = v6[6] * a3[6];
  LODWORD(v14) = v6[22] * a3[22];
  LODWORD(v47) = v14 + v25;
  LODWORD(v25) = v25 - v14;
  uint64_t v55 = (int)v6[14] * (uint64_t)a3[14];
  uint64_t v56 = (int)v6[30] * (uint64_t)a3[30];
  LODWORD(v47) = 4 * v47;
  LODWORD(v25) = 4 * v25;
  uint64_t v57 = 4433 * (v55 + v56) + 1024;
  unint64_t v58 = (unint64_t)(v57 + 6270 * v55) >> 11;
  unint64_t v59 = (unint64_t)(v57 - 15137 * v56) >> 11;
  LODWORD(v51) = v58 + v47;
  LODWORD(v58) = v47 - v58;
  LODWORD(v47) = v59 + v25;
  LODWORD(v59) = v25 - v59;
  LODWORD(v25) = v6[7] * a3[7];
  LODWORD(v53) = v6[23] * a3[23];
  LODWORD(v54) = v53 + v25;
  LODWORD(v25) = v25 - v53;
  uint64_t v60 = (int)v6[15] * (uint64_t)a3[15];
  uint64_t v61 = (int)v6[31] * (uint64_t)a3[31];
  uint64_t v62 = 4433 * (v60 + v61) + 1024;
  uint64_t v63 = *(void *)(a1 + 408);
  LODWORD(v25) = 4 * v25;
  unint64_t v64 = (unint64_t)(v62 + 6270 * v60) >> 11;
  unint64_t v65 = (unint64_t)(v62 - 15137 * v61) >> 11;
  int v66 = v64 + 4 * v54;
  int v67 = 4 * v54 - v64;
  LODWORD(v64) = v65 + v25;
  v98[20] = v49;
  v98[21] = v46;
  v98[6] = v51;
  v98[7] = v66;
  LODWORD(v54) = v25 - v65;
  uint64_t v68 = v63 - 384;
  v98[30] = v58;
  v98[31] = v67;
  v98[14] = v47;
  v98[15] = v64;
  uint64_t result = 4294964100;
  v98[22] = v59;
  v98[23] = v54;
  do
  {
    int v70 = &v98[v5];
    int v71 = v70[1];
    int v72 = v70[4];
    int v73 = v70[5];
    int v74 = *v70 + 16400;
    int v75 = v74 + v72;
    int v76 = v74 - v72;
    int v77 = v70[6];
    int v78 = v70[7];
    v75 <<= 13;
    int v79 = v70[2];
    LODWORD(v70) = v70[3];
    int v80 = 4433 * (v77 + v79);
    int v81 = v80 + 6270 * v79;
    int v82 = v80 - 15137 * v77;
    int v83 = v70 + v78;
    int v84 = v71 + v73;
    int v85 = -7373 * (v71 + v78);
    int v86 = v85 + 2446 * v78;
    int v87 = v85 + 12299 * v71;
    int v88 = 9633 * (v71 + v73 + v83);
    int v89 = v88 - 3196 * v84;
    int v90 = v87 + v89;
    int v91 = v88 - 16069 * v83;
    int v92 = -20995 * (v70 + v73);
    int v93 = (unsigned char *)(*(void *)(a4 + v5) + a5);
    int v94 = v76 << 13;
    *int v93 = *(unsigned char *)(v68 + (((unint64_t)(v90 + v81 + v75) >> 18) & 0x3FF));
    int v95 = v82 + (v76 << 13);
    LODWORD(v70) = v92 + 25172 * v70 + v91;
    int v96 = v94 - v82;
    v93[7] = *(unsigned char *)(v68 + (((unint64_t)(v81 + v75 - v90) >> 18) & 0x3FF));
    int v97 = v92 + 16819 * v73 + v89;
    v93[1] = *(unsigned char *)(v68 + (((unint64_t)(v70 + v95) >> 18) & 0x3FF));
    v93[6] = *(unsigned char *)(v68 + (((unint64_t)(v95 - v70) >> 18) & 0x3FF));
    v93[2] = *(unsigned char *)(v68 + (((unint64_t)(v97 + v96) >> 18) & 0x3FF));
    v93[5] = *(unsigned char *)(v68 + (((unint64_t)(v96 - v97) >> 18) & 0x3FF));
    v93[3] = *(unsigned char *)(v68 + (((unint64_t)(v86 + v91 + v75 - v81) >> 18) & 0x3FF));
    v93[4] = *(unsigned char *)(v68 + (((unint64_t)(v75 - v81 - (v86 + v91)) >> 18) & 0x3FF));
    v5 += 8;
  }
  while (v5 != 32);
  return result;
}

uint64_t sub_1003E7CF8(uint64_t a1, uint64_t a2, __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(a1 + 408);
  uint64_t v6 = *(_DWORD **)(a2 + 88);
  int v7 = ((*v6 * *a3) << 13) | 0x400;
  int v8 = v6[16] * a3[16];
  int v9 = v7 + 5793 * v8;
  unsigned int v10 = v7 - 11586 * v8;
  int v11 = 10033 * v6[8] * a3[8];
  unsigned int v12 = v11 + v9;
  unsigned int v13 = v9 - v11;
  uint64_t v14 = ((uint64_t)(v6[1] * a3[1]) << 13) | 0x400;
  uint64_t v15 = (int)v6[17] * (uint64_t)a3[17];
  uint64_t v16 = v14 + 5793 * v15;
  unint64_t v17 = v14 + 0x7FFFFFFD2BELL * v15;
  uint64_t v18 = 10033 * (int)v6[9] * (uint64_t)a3[9];
  unint64_t v19 = v18 + v16;
  unint64_t v74 = v16 - v18;
  uint64_t v20 = ((uint64_t)(v6[2] * a3[2]) << 13) | 0x400;
  uint64_t v21 = (int)v6[18] * (uint64_t)a3[18];
  uint64_t v22 = v20 + 5793 * v21;
  unint64_t v23 = v20 + 0x7FFFFFFD2BELL * v21;
  uint64_t v24 = 10033 * (int)v6[10] * (uint64_t)a3[10];
  unint64_t v25 = (unint64_t)(v24 + v22) >> 11;
  unint64_t v26 = (unint64_t)(v22 - v24) >> 11;
  unint64_t v27 = v23 >> 11;
  uint64_t v28 = ((uint64_t)(v6[3] * a3[3]) << 13) | 0x400;
  uint64_t v29 = (int)v6[19] * (uint64_t)a3[19];
  uint64_t v30 = v28 + 5793 * v29;
  unint64_t v31 = v28 + 0x7FFFFFFD2BELL * v29;
  uint64_t v32 = 10033 * (int)v6[11] * (uint64_t)a3[11];
  unint64_t v33 = v32 + v30;
  unint64_t v34 = v30 - v32;
  int v35 = v6[5];
  uint64_t v36 = ((uint64_t)(v6[4] * a3[4]) << 13) | 0x400;
  int v37 = v6[21];
  uint64_t v38 = (int)v6[20] * (uint64_t)a3[20];
  uint64_t v39 = v36 + 5793 * v38;
  int v40 = v6[13];
  uint64_t v41 = 10033 * (int)v6[12] * (uint64_t)a3[12];
  unint64_t v42 = (unint64_t)(v41 + v39) >> 11;
  unint64_t v43 = (unint64_t)(v39 - v41) >> 11;
  unint64_t v44 = (unint64_t)(v36 + 0x7FFFFFFD2BELL * v38) >> 11;
  uint64_t v45 = ((uint64_t)(v35 * a3[5]) << 13) | 0x400;
  uint64_t v46 = v37 * (uint64_t)a3[21];
  uint64_t v47 = v45 + 5793 * v46;
  unint64_t v48 = v45 + 0x7FFFFFFD2BELL * v46;
  uint64_t v49 = 10033 * v40 * (uint64_t)a3[13];
  unint64_t v50 = v49 + v47;
  unint64_t v51 = v47 - v49;
  v5 -= 384;
  int v52 = (v12 >> 11 << 13) + 134348800;
  int v53 = v52 + 5793 * v42;
  int v54 = v52 - 11586 * v42;
  LODWORD(v25) = 10033 * v25;
  LODWORD(v42) = v53 + v25;
  LODWORD(v25) = v53 - v25;
  v33 >>= 11;
  v50 >>= 11;
  int v55 = 2998 * (v50 + (v19 >> 11));
  int v56 = v55 + ((v33 + (v19 >> 11)) << 13);
  uint64_t v57 = (unsigned char *)(*a4 + a5);
  unsigned char *v57 = *(unsigned char *)(v5 + (((unint64_t)(v56 + v42) >> 18) & 0x3FF));
  LODWORD(v18) = ((v19 >> 11) - (v33 + v50)) << 13;
  v57[5] = *(unsigned char *)(v5 + (((unint64_t)(v42 - v56) >> 18) & 0x3FF));
  v57[1] = *(unsigned char *)(v5 + (((unint64_t)(v18 + v54) >> 18) & 0x3FF));
  LOBYTE(v18) = *(unsigned char *)(v5 + (((unint64_t)(v54 - v18) >> 18) & 0x3FF));
  int v58 = v55 + ((v50 - v33) << 13);
  v57[4] = v18;
  v57[2] = *(unsigned char *)(v5 + (((unint64_t)(v58 + v25) >> 18) & 0x3FF));
  v57[3] = *(unsigned char *)(v5 + (((unint64_t)(v25 - v58) >> 18) & 0x3FF));
  unint64_t v59 = (unsigned char *)(a4[1] + a5);
  int v60 = (v10 >> 11 << 13) + 134348800;
  int v61 = v60 + 5793 * v44;
  int v62 = v60 - 11586 * v44;
  LODWORD(v27) = 10033 * v27;
  LODWORD(v44) = v61 + v27;
  LODWORD(v27) = v61 - v27;
  v17 >>= 11;
  v31 >>= 11;
  unint64_t v63 = v48 >> 11;
  LODWORD(v48) = 2998 * ((v48 >> 11) + v17);
  LODWORD(v25) = v48 + ((v31 + v17) << 13);
  LODWORD(v48) = v48 + ((v63 - v31) << 13);
  LODWORD(v17) = (v17 - (v31 + v63)) << 13;
  *unint64_t v59 = *(unsigned char *)(v5 + (((unint64_t)(v25 + v44) >> 18) & 0x3FF));
  v59[5] = *(unsigned char *)(v5 + (((unint64_t)(v44 - v25) >> 18) & 0x3FF));
  v59[1] = *(unsigned char *)(v5 + (((unint64_t)(v17 + v62) >> 18) & 0x3FF));
  v59[4] = *(unsigned char *)(v5 + (((unint64_t)(v62 - v17) >> 18) & 0x3FF));
  v59[2] = *(unsigned char *)(v5 + (((unint64_t)(v48 + v27) >> 18) & 0x3FF));
  v59[3] = *(unsigned char *)(v5 + (((unint64_t)(v27 - v48) >> 18) & 0x3FF));
  unint64_t v64 = (unsigned char *)(a4[2] + a5);
  int v65 = (v13 >> 11 << 13) + 134348800;
  int v66 = v65 + 5793 * v43;
  int v67 = v65 - 11586 * v43;
  int v68 = 10033 * v26;
  LODWORD(v26) = v66 + 10033 * v26;
  int v69 = v66 - v68;
  v34 >>= 11;
  unint64_t v70 = v51 >> 11;
  LODWORD(v17) = 2998 * ((v51 >> 11) + (v74 >> 11));
  LODWORD(v43) = v17 + ((v34 + (v74 >> 11)) << 13);
  uint64_t result = v34 + (v51 >> 11);
  *unint64_t v64 = *(unsigned char *)(v5 + (((unint64_t)(v43 + v26) >> 18) & 0x3FF));
  unsigned int v72 = ((v74 >> 11) - result) << 13;
  v64[5] = *(unsigned char *)(v5 + (((unint64_t)(v26 - v43) >> 18) & 0x3FF));
  v64[1] = *(unsigned char *)(v5 + (((unint64_t)(v72 + v67) >> 18) & 0x3FF));
  LOBYTE(v72) = *(unsigned char *)(v5 + (((unint64_t)(v67 - v72) >> 18) & 0x3FF));
  int v73 = v17 + ((v70 - v34) << 13);
  v64[4] = v72;
  v64[2] = *(unsigned char *)(v5 + (((unint64_t)(v73 + v69) >> 18) & 0x3FF));
  v64[3] = *(unsigned char *)(v5 + (((unint64_t)(v69 - v73) >> 18) & 0x3FF));
  return result;
}

unsigned char *sub_1003E8104(uint64_t a1, uint64_t a2, __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(_DWORD **)(a2 + 88);
  int v6 = *v5 * *a3;
  int v7 = v5[8] * a3[8];
  int v8 = v7 + v6;
  int v9 = v6 - v7;
  int v10 = v5[1] * a3[1];
  int v11 = v5[9] * a3[9];
  int v12 = v11 + v10;
  int v13 = v10 - v11;
  int v14 = v5[2] * a3[2];
  int v15 = v5[10] * a3[10];
  int v16 = v15 + v14;
  int v17 = v14 - v15;
  int v18 = v5[3] * a3[3];
  LODWORD(v5) = v5[11] * a3[11];
  int v19 = v5 + v18;
  LODWORD(v5) = v18 - v5;
  uint64_t v20 = *(void *)(a1 + 408) - 384;
  uint64_t result = (unsigned char *)(*a4 + a5);
  v8 += 4100;
  int v22 = (v8 + v16) << 13;
  int v23 = v8 - v16;
  int v24 = 4433 * (v19 + v12);
  int v25 = v24 + 6270 * v12;
  int v26 = v24 - 15137 * v19;
  v23 <<= 13;
  *uint64_t result = *(unsigned char *)(v20 + (((unint64_t)(v25 + v22) >> 16) & 0x3FF));
  result[3] = *(unsigned char *)(v20 + (((unint64_t)(v22 - v25) >> 16) & 0x3FF));
  result[1] = *(unsigned char *)(v20 + (((unint64_t)(v26 + v23) >> 16) & 0x3FF));
  result[2] = *(unsigned char *)(v20 + (((unint64_t)(v23 - v26) >> 16) & 0x3FF));
  unint64_t v27 = (unsigned char *)(a4[1] + a5);
  v9 += 4100;
  int v28 = (v9 + v17) << 13;
  int v29 = v9 - v17;
  int v30 = 4433 * (v5 + v13);
  int v31 = v30 + 6270 * v13;
  v29 <<= 13;
  *unint64_t v27 = *(unsigned char *)(v20 + (((unint64_t)(v31 + v28) >> 16) & 0x3FF));
  LODWORD(v5) = v30 - 15137 * v5;
  v27[3] = *(unsigned char *)(v20 + (((unint64_t)(v28 - v31) >> 16) & 0x3FF));
  v27[1] = *(unsigned char *)(v20 + (((unint64_t)(v5 + v29) >> 16) & 0x3FF));
  v27[2] = *(unsigned char *)(v20 + (((unint64_t)(v29 - v5) >> 16) & 0x3FF));
  return result;
}

uint64_t sub_1003E8270(uint64_t result, uint64_t a2, unsigned __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(result + 408) - 384;
  int v6 = *(_DWORD **)(a2 + 88);
  int v7 = (unsigned char *)(*a4 + a5);
  int v8 = *v6 * *a3 + 4100;
  LODWORD(v6) = v6[1] * a3[1];
  *int v7 = *(unsigned char *)(v5 + (((unint64_t)(v6 + v8) >> 3) & 0x3FF));
  v7[1] = *(unsigned char *)(v5 + (((unint64_t)(v8 - v6) >> 3) & 0x3FF));
  return result;
}

uint64_t sub_1003E82C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v89 = *(void *)(a1 + 408);
  uint64_t v92 = *(void *)(a2 + 88);
  do
  {
    int v6 = (_DWORD *)(v92 + 4 * v5);
    int v7 = (__int16 *)(a3 + 2 * v5);
    uint64_t v8 = (int)v6[32] * (uint64_t)v7[32];
    uint64_t v9 = ((uint64_t)(*v6 * *v7) << 13) | 0x400;
    uint64_t v10 = 10703 * v8;
    v8 *= 4433;
    uint64_t v11 = v10 + v9;
    uint64_t v12 = v9 - v10;
    uint64_t v13 = v8 + v9;
    uint64_t v14 = v9 - v8;
    uint64_t v15 = (int)v6[16] * (uint64_t)v7[16];
    uint64_t v16 = (int)v6[48] * (uint64_t)v7[48];
    uint64_t v17 = 2260 * (v15 - v16);
    uint64_t v18 = 11363 * (v15 - v16);
    uint64_t v19 = v18 + 20995 * v16;
    uint64_t v20 = v17 + 7373 * v15;
    uint64_t v21 = v18 - 4926 * v15;
    uint64_t v22 = v17 - 4176 * v16;
    uint64_t v23 = v19 + v11;
    uint64_t v95 = v11 - v19;
    uint64_t v24 = v20 + v13;
    uint64_t v94 = v13 - v20;
    uint64_t v25 = v21 + v14;
    uint64_t v26 = v14 - v21;
    uint64_t v27 = v22 + v12;
    uint64_t v28 = v12 - v22;
    uint64_t v29 = (int)v6[8] * (uint64_t)v7[8];
    uint64_t v30 = (int)v6[24] * (uint64_t)v7[24];
    LODWORD(v22) = v7[40];
    int v31 = v6[40];
    int v32 = v7[56];
    int v33 = v6[56];
    uint64_t v34 = v29 + v31 * (uint64_t)v7[40];
    uint64_t v35 = 11086 * (v29 + v30);
    uint64_t v36 = 10217 * v34;
    uint64_t v37 = 8956 * (v29 + v33 * (uint64_t)v32);
    uint64_t v38 = 7350 * (v29 - v33 * (uint64_t)v32);
    uint64_t v39 = 5461 * v34;
    uint64_t v40 = 3363 * (v29 - v30);
    uint64_t v41 = v35 - 18730 * v29 + 10217 * v34 + v37;
    uint64_t v42 = v40 - 15038 * v29 + 5461 * v34 + v38;
    uint64_t v43 = 1136 * (v30 + v31 * (uint64_t)(int)v22);
    uint64_t v44 = v30 + v33 * (uint64_t)v32;
    uint64_t v45 = -5461 * v44;
    uint64_t v46 = v35 + 589 * v30 + v43 - 5461 * v44;
    uint64_t v47 = v31 * (uint64_t)(int)v22;
    uint64_t v48 = 11529 * (v47 - v30);
    v44 *= -10217;
    uint64_t v49 = v40 + 16154 * v30 + v48 + v44;
    uint64_t v50 = v43 - 9222 * v47 + v36 - 11086 * (v47 + v33 * (uint64_t)v32);
    uint64_t v51 = v37 - 11086 * (v47 + v33 * (uint64_t)v32);
    uint64_t v52 = v33 * (uint64_t)v32;
    uint64_t v53 = v45 + 8728 * v52 + v51;
    uint64_t v54 = 3363 * (v52 - v47);
    uint64_t v55 = v44 + 25733 * v52 + v38 + v54;
    int v56 = &v96[v5];
    uint64_t v57 = v48 - 6278 * v47 + v39 + v54;
    _DWORD *v56 = (unint64_t)(v41 + v23) >> 11;
    v56[120] = (unint64_t)(v23 - v41) >> 11;
    v56[8] = (unint64_t)(v46 + v24) >> 11;
    v56[112] = (unint64_t)(v24 - v46) >> 11;
    v56[16] = (unint64_t)(v50 + v25) >> 11;
    v56[104] = (unint64_t)(v25 - v50) >> 11;
    v56[24] = (unint64_t)(v53 + v27) >> 11;
    v56[96] = (unint64_t)(v27 - v53) >> 11;
    v56[32] = (unint64_t)(v55 + v28) >> 11;
    v56[88] = (unint64_t)(v28 - v55) >> 11;
    v56[40] = (unint64_t)(v57 + v26) >> 11;
    v56[80] = (unint64_t)(v26 - v57) >> 11;
    v56[48] = (unint64_t)(v49 + v94) >> 11;
    v56[72] = (unint64_t)(v94 - v49) >> 11;
    v56[56] = (unint64_t)(v42 + v95) >> 11;
    v56[64] = (unint64_t)(v95 - v42) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v58 = 0;
  uint64_t v59 = v89 - 384;
  uint64_t result = 4294959923;
  do
  {
    int v61 = &v96[v58];
    int v62 = v61[1];
    int v63 = v61[4];
    int v64 = v61[5];
    int v65 = *v61 + 16400;
    int v66 = v65 + v63;
    int v67 = v65 - v63;
    int v68 = v61[6];
    int v69 = v61[7];
    v66 <<= 13;
    int v70 = v61[2];
    LODWORD(v61) = v61[3];
    int v71 = 4433 * (v68 + v70);
    int v72 = v71 + 6270 * v70;
    int v73 = v71 - 15137 * v68;
    int v74 = v61 + v69;
    int v75 = v62 + v64;
    int v76 = -7373 * (v62 + v69);
    int v77 = v76 + 2446 * v69;
    int v78 = v76 + 12299 * v62;
    int v79 = 9633 * (v75 + v74);
    int v80 = v79 - 3196 * v75;
    int v81 = v78 + v80;
    int v82 = v79 - 16069 * v74;
    int v83 = -20995 * (v61 + v64);
    unint64_t v84 = (v72 + v66 - v81);
    int v85 = (unsigned char *)(*(void *)(a4 + v58) + a5);
    v67 <<= 13;
    *int v85 = *(unsigned char *)(v59 + (((unint64_t)(v81 + v72 + v66) >> 18) & 0x3FF));
    int v86 = v73 + v67;
    LODWORD(v61) = v83 + 25172 * v61 + v82;
    int v87 = v67 - v73;
    v85[7] = *(unsigned char *)(v59 + ((v84 >> 18) & 0x3FF));
    int v88 = v83 + 16819 * v64 + v80;
    v85[1] = *(unsigned char *)(v59 + (((unint64_t)(v61 + v86) >> 18) & 0x3FF));
    v85[6] = *(unsigned char *)(v59 + (((unint64_t)(v86 - v61) >> 18) & 0x3FF));
    v85[2] = *(unsigned char *)(v59 + (((unint64_t)(v88 + v87) >> 18) & 0x3FF));
    v85[5] = *(unsigned char *)(v59 + (((unint64_t)(v87 - v88) >> 18) & 0x3FF));
    v85[3] = *(unsigned char *)(v59 + (((unint64_t)(v77 + v82 + v66 - v72) >> 18) & 0x3FF));
    v85[4] = *(unsigned char *)(v59 + (((unint64_t)(v66 - v72 - (v77 + v82)) >> 18) & 0x3FF));
    v58 += 8;
  }
  while (v58 != 128);
  return result;
}

uint64_t sub_1003E87A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v75 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    int v7 = (_DWORD *)(v6 + 4 * v5);
    uint64_t v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v11 = v10 + 10438 * v9;
    uint64_t v12 = v10 + 2578 * v9;
    uint64_t v13 = v10 - 7223 * v9;
    uint64_t v14 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v15 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v16 = 9058 * (v14 + v15);
    uint64_t v17 = v16 + 2237 * v14;
    uint64_t v18 = v16 - 14084 * v15;
    uint64_t v19 = 5027 * v14 - 11295 * v15;
    uint64_t v20 = v17 + v11;
    uint64_t v21 = v11 - v17;
    uint64_t v22 = v18 + v12;
    uint64_t v23 = v12 - v18;
    uint64_t v24 = v19 + v13;
    uint64_t v25 = v13 - v19;
    uint64_t v26 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v27 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v28 = (int)v7[40] * (uint64_t)v8[40];
    uint64_t v29 = (int)v7[56] * (uint64_t)v8[56];
    uint64_t v30 = 10935 * (v26 + v27);
    uint64_t v31 = 9810 * (v26 + v28);
    uint64_t v32 = v30 - 9232 * v26 + v31 + (v29 << 13);
    uint64_t v33 = -8192 * v29 - 1297 * (v27 + v28);
    uint64_t v34 = v30 - 3474 * v27 + v33;
    uint64_t v35 = v31 - 19447 * v28 + v33;
    uint64_t v36 = 6164 * (v26 + v28);
    uint64_t v37 = 11512 * (v28 - v27);
    uint64_t v38 = v37 - 13850 * v28 + v36 + (v29 << 13);
    LODWORD(v17) = v26 - v27;
    uint64_t v39 = v37 + 5529 * v27;
    uint64_t v40 = -8192 * v29 + 3826 * (v26 - v27);
    uint64_t v41 = v36 - 8693 * v26 + v40;
    uint64_t v42 = v39 + v40;
    uint64_t v43 = &v77[4 * v5];
    _DWORD *v43 = (unint64_t)(v32 + v20) >> 11;
    v43[91] = (unint64_t)(v20 - v32) >> 11;
    v43[7] = (unint64_t)(v34 + v22) >> 11;
    v43[84] = (unint64_t)(v22 - v34) >> 11;
    v43[14] = (unint64_t)(v35 + v24) >> 11;
    unint64_t v44 = (unint64_t)(v10 - 11586 * v9) >> 11;
    LODWORD(v22) = 4 * (v17 - v28 + v29);
    v43[77] = (unint64_t)(v24 - v35) >> 11;
    v43[21] = v22 + v44;
    v43[70] = v44 - v22;
    v43[28] = (unint64_t)(v38 + v25) >> 11;
    v43[63] = (unint64_t)(v25 - v38) >> 11;
    v43[35] = (unint64_t)(v42 + v23) >> 11;
    v43[56] = (unint64_t)(v23 - v42) >> 11;
    v43[42] = (unint64_t)(v41 + v21) >> 11;
    v43[49] = (unint64_t)(v21 - v41) >> 11;
    ++v5;
  }
  while (v5 != 7);
  uint64_t v45 = 0;
  uint64_t v46 = v75 - 384;
  uint64_t result = 11585;
  do
  {
    uint64_t v48 = *a4++;
    int v49 = *(_DWORD *)&v77[v45 + 4];
    int v50 = (*(_DWORD *)&v77[v45] << 13) + 134348800;
    int v52 = *(_DWORD *)&v77[v45 + 20];
    int v51 = *(_DWORD *)&v77[v45 + 24];
    int v53 = *(_DWORD *)&v77[v45 + 16];
    int v54 = 7223 * (v53 - v51);
    int v56 = *(_DWORD *)&v77[v45 + 8];
    int v55 = *(_DWORD *)&v77[v45 + 12];
    int v57 = 2578 * (v56 - v53);
    int v58 = v57 + v54;
    int v59 = v51 + v56;
    int v60 = v54 - 637 * v51;
    int v61 = 7663 * (v55 + v49);
    int v62 = v57 - 20239 * v56;
    int v63 = 1395 * (v49 - v55);
    int v64 = v61 - v63;
    int v65 = v61 + v63;
    int v66 = v50 + 10438 * v59;
    int v67 = v60 + v66;
    int v68 = 5027 * (v52 + v49);
    int v69 = v64 + v68;
    int v70 = v50 - 15083 * v53 + v58;
    int v71 = (unsigned char *)(v48 + a5);
    *int v71 = *(unsigned char *)(v46 + (((unint64_t)(v69 + v67) >> 18) & 0x3FF));
    int v72 = -11295 * (v52 + v55);
    int v73 = v65 + v72;
    v71[6] = *(unsigned char *)(v46 + (((unint64_t)(v67 - v69) >> 18) & 0x3FF));
    int v74 = v68 + 15326 * v52 + v72;
    v71[1] = *(unsigned char *)(v46 + (((unint64_t)(v73 + v70) >> 18) & 0x3FF));
    v71[5] = *(unsigned char *)(v46 + (((unint64_t)(v70 - v73) >> 18) & 0x3FF));
    v71[2] = *(unsigned char *)(v46 + (((unint64_t)(v74 + v62 + v66) >> 18) & 0x3FF));
    v71[4] = *(unsigned char *)(v46 + (((unint64_t)(v62 + v66 - v74) >> 18) & 0x3FF));
    v71[3] = *(unsigned char *)(v46 + (((unint64_t)(v50 + 11585 * (v53 - v59)) >> 18) & 0x3FF));
    v45 += 28;
  }
  while (v45 != 392);
  return result;
}

unsigned char *sub_1003E8BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v63 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    int v7 = (_DWORD *)(v6 + 4 * v5);
    uint64_t v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v10 = 10033 * (int)v7[32] * (uint64_t)v8[32];
    uint64_t v11 = v10 + v9;
    uint64_t v12 = v9 - v10;
    uint64_t v13 = (int)v7[16] * (uint64_t)v8[16];
    int v14 = v7[48];
    uint64_t v15 = (v14 * (uint64_t)v8[48]) << 13;
    uint64_t v16 = (v13 - v14 * (uint64_t)v8[48]) << 13;
    uint64_t v17 = v16 + v9;
    uint64_t v18 = v9 - v16;
    uint64_t v19 = v15 + 11190 * v13;
    uint64_t v20 = v19 + v11;
    uint64_t v21 = v11 - v19;
    uint64_t v22 = 2998 * v13 - v15;
    uint64_t v23 = v22 + v12;
    uint64_t v24 = v12 - v22;
    uint64_t v25 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v26 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v27 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v28 = 10703 * v26;
    uint64_t v29 = -4433 * v26;
    uint64_t v30 = 7053 * (v25 + v27 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v31 = v30 + 2139 * (v25 + v27);
    uint64_t v32 = v26 - v27;
    uint64_t v33 = v28 + 2295 * v25 + v31;
    uint64_t v34 = -8565 * (v27 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v35 = v29 - 12112 * v27 - 8565 * (v27 + (int)v7 * (uint64_t)(int)v8) + v31;
    uint64_t v36 = (int)v7 * (uint64_t)(int)v8;
    uint64_t v37 = v25 - v36;
    uint64_t v38 = v29 - 5540 * v25 - 16244 * v36;
    uint64_t v39 = &v65[4 * v5];
    uint64_t v40 = 12998 * v36 - v28 + v34 + v30;
    uint64_t v41 = v38 + v30;
    uint64_t v42 = 4433 * (v37 + v32);
    uint64_t v43 = v42 + 6270 * v37;
    uint64_t v44 = v42 - 15137 * v32;
    _DWORD *v39 = (unint64_t)(v33 + v20) >> 11;
    v39[66] = (unint64_t)(v20 - v33) >> 11;
    v39[6] = (unint64_t)(v43 + v17) >> 11;
    v39[60] = (unint64_t)(v17 - v43) >> 11;
    v39[12] = (unint64_t)(v35 + v23) >> 11;
    v39[54] = (unint64_t)(v23 - v35) >> 11;
    v39[18] = (unint64_t)(v40 + v24) >> 11;
    v39[48] = (unint64_t)(v24 - v40) >> 11;
    v39[24] = (unint64_t)(v44 + v18) >> 11;
    v39[42] = (unint64_t)(v18 - v44) >> 11;
    v39[30] = (unint64_t)(v41 + v21) >> 11;
    v39[36] = (unint64_t)(v21 - v41) >> 11;
    ++v5;
  }
  while (v5 != 6);
  uint64_t v45 = 0;
  uint64_t v46 = v63 - 384;
  do
  {
    uint64_t v47 = *a4++;
    uint64_t result = (unsigned char *)(v47 + a5);
    int v49 = *(_DWORD *)&v65[v45 + 4];
    int v50 = *(_DWORD *)&v65[v45 + 16];
    int v51 = *(_DWORD *)&v65[v45 + 20];
    int v52 = (*(_DWORD *)&v65[v45] << 13) + 134348800;
    int v53 = v52 + 5793 * v50;
    int v54 = *(_DWORD *)&v65[v45 + 12];
    int v55 = 10033 * *(_DWORD *)&v65[v45 + 8];
    int v56 = 2998 * (v51 + v49);
    int v57 = v51 - v54;
    int v58 = v54 + v51;
    int v59 = v56 + ((v54 + v49) << 13);
    int v60 = v52 - 11586 * v50;
    int v61 = (v49 - v58) << 13;
    *uint64_t result = *(unsigned char *)(v46 + (((unint64_t)(v59 + v53 + v55) >> 18) & 0x3FF));
    int v62 = v56 + (v57 << 13);
    result[5] = *(unsigned char *)(v46 + (((unint64_t)(v53 + v55 - v59) >> 18) & 0x3FF));
    result[1] = *(unsigned char *)(v46 + (((unint64_t)(v61 + v60) >> 18) & 0x3FF));
    result[4] = *(unsigned char *)(v46 + (((unint64_t)(v60 - v61) >> 18) & 0x3FF));
    result[2] = *(unsigned char *)(v46 + (((unint64_t)(v62 + v53 - v55) >> 18) & 0x3FF));
    result[3] = *(unsigned char *)(v46 + (((unint64_t)(v53 - v55 - v62) >> 18) & 0x3FF));
    v45 += 24;
  }
  while (v45 != 288);
  return result;
}

uint64_t sub_1003E8F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v53 = *(void *)(a1 + 408);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    int v7 = (_DWORD *)(v6 + 4 * v5);
    uint64_t v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v10 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v11 = v9 + 9373 * v10;
    uint64_t v12 = v9 - 3580 * v10;
    unint64_t v13 = v9 - 11586 * v10;
    uint64_t v14 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v15 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v16 = 6810 * (v14 + v15);
    uint64_t v17 = v16 + 4209 * v14;
    uint64_t v18 = v16 - 17828 * v15;
    uint64_t v19 = v17 + v11;
    uint64_t v20 = v11 - v17;
    uint64_t v21 = v18 + v12;
    uint64_t v22 = v12 - v18;
    uint64_t v23 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v24 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v26 = v24 + (int)v7 * (uint64_t)(int)v8;
    uint64_t v27 = v24 - (int)v7 * (uint64_t)(int)v8;
    uint64_t v28 = (v25 << 13) + 2531 * v27;
    uint64_t v29 = 7791 * v26 + 11443 * v23 + v28;
    uint64_t v30 = 1812 * v23 - 7791 * v26 + v28;
    uint64_t v31 = (v25 << 13) - 6627 * v27;
    LODWORD(v27) = v23 - v25 - v27;
    uint64_t v32 = 10323 * v23 - (4815 * v26 + v31);
    uint64_t v33 = &v55[4 * v5];
    uint64_t v34 = 5260 * v23 - 4815 * v26 + v31;
    *uint64_t v33 = (unint64_t)(v29 + v19) >> 11;
    v33[45] = (unint64_t)(v19 - v29) >> 11;
    v33[5] = (unint64_t)(v32 + v21) >> 11;
    LODWORD(v27) = 4 * v27;
    v33[40] = (unint64_t)(v21 - v32) >> 11;
    v33[10] = v27 + (v13 >> 11);
    v33[35] = (v13 >> 11) - v27;
    v33[15] = (unint64_t)(v34 + v22) >> 11;
    v33[30] = (unint64_t)(v22 - v34) >> 11;
    v33[20] = (unint64_t)(v30 + v20) >> 11;
    v33[25] = (unint64_t)(v20 - v30) >> 11;
    ++v5;
  }
  while (v5 != 5);
  uint64_t v35 = 0;
  uint64_t v36 = v53 - 384;
  uint64_t result = a5;
  do
  {
    uint64_t v38 = *a4++;
    int v39 = *(_DWORD *)&v55[v35 + 4];
    uint64_t v40 = (unsigned char *)(v38 + a5);
    int v41 = (*(_DWORD *)&v55[v35] << 13) + 134348800;
    int v42 = *(_DWORD *)&v55[v35 + 8];
    int v43 = *(_DWORD *)&v55[v35 + 12];
    int v44 = *(_DWORD *)&v55[v35 + 16];
    int v45 = 6476 * (v44 + v42);
    int v46 = v42 - v44;
    int v47 = v41 + 2896 * v46;
    int v48 = 6810 * (v43 + v39);
    int v49 = v47 + v45;
    int v50 = v48 + 4209 * v39;
    int v51 = v48 - 17828 * v43;
    *uint64_t v40 = *(unsigned char *)(v36 + (((unint64_t)(v50 + v47 + v45) >> 18) & 0x3FF));
    int v52 = v47 - v45;
    v40[4] = *(unsigned char *)(v36 + (((unint64_t)(v49 - v50) >> 18) & 0x3FF));
    v40[1] = *(unsigned char *)(v36 + (((unint64_t)(v51 + v52) >> 18) & 0x3FF));
    v40[3] = *(unsigned char *)(v36 + (((unint64_t)(v52 - v51) >> 18) & 0x3FF));
    v40[2] = *(unsigned char *)(v36 + (((unint64_t)(v41 + 268423872 * v46) >> 18) & 0x3FF));
    v35 += 20;
  }
  while (v35 != 200);
  return result;
}

uint64_t sub_1003E9238(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = (__int16 *)(a3 + 64);
  uint64_t v7 = *(void *)(a2 + 88) + 128;
  uint64_t v95 = *(void *)(a1 + 408);
  for (unsigned int i = 5; i > 1; --i)
  {
    uint64_t v9 = (_DWORD *)(v7 + v5);
    unsigned __int16 v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10) {
      goto LABEL_9;
    }
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      unsigned __int16 v10 = 0;
LABEL_9:
      uint64_t v11 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      uint64_t v12 = (int)v9[16] * (uint64_t)v6[16];
      uint64_t v13 = 4433 * (v11 + v12);
      uint64_t v14 = v13 + 6270 * v11;
      uint64_t v15 = v13 - 15137 * v12;
      uint64_t v16 = (uint64_t)(*v9 * *v6) << 13;
      uint64_t v17 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      uint64_t v18 = v16 + v17;
      uint64_t v19 = v17 - v16;
      uint64_t v20 = v18 + v14;
      uint64_t v21 = v18 - v14;
      uint64_t v22 = v19 + v15;
      uint64_t v23 = v19 - v15;
      uint64_t v24 = (int)v9[24] * (uint64_t)v6[24];
      uint64_t v25 = (int)v9[8] * (uint64_t)v6[8];
      int v26 = *(v9 - 8);
      uint64_t v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      uint64_t v28 = v24 + v26 * (uint64_t)*(v6 - 8);
      uint64_t v29 = 9633 * (v25 + v27 + v28);
      uint64_t v30 = v29 - 16069 * v28;
      uint64_t v31 = v29 - 3196 * (v25 + v27);
      uint64_t v32 = -7373 * (v24 + v27);
      uint64_t v33 = v32 + 2446 * v24 + v30;
      uint64_t v34 = v32 + 12299 * v27 + v31;
      uint64_t v35 = -20995 * (v25 + v26 * (uint64_t)*(v6 - 8));
      uint64_t v36 = v35 + 16819 * v25 + v31;
      uint64_t v37 = v35 + 25172 * v26 * (uint64_t)*(v6 - 8) + v30;
      uint64_t v38 = (int *)((char *)&v98 + v5);
      _DWORD *v38 = (unint64_t)(v34 + v20) >> 11;
      v38[28] = (unint64_t)(v20 - v34) >> 11;
      v38[4] = (unint64_t)(v37 + v22) >> 11;
      v38[24] = (unint64_t)(v22 - v37) >> 11;
      v38[8] = (unint64_t)(v36 + v23) >> 11;
      v38[20] = (unint64_t)(v23 - v36) >> 11;
      v38[12] = (unint64_t)(v33 + v21) >> 11;
      unint64_t v39 = (unint64_t)(v21 - v33) >> 11;
      uint64_t v40 = 16;
      goto LABEL_10;
    }
    LODWORD(v39) = 4 * *(v6 - 32) * *(v9 - 32);
    int v41 = (int *)((char *)&v98 + v5);
    *int v41 = v39;
    v41[4] = v39;
    v41[8] = v39;
    v41[12] = v39;
    v41[16] = v39;
    v41[20] = v39;
    v41[24] = v39;
    uint64_t v40 = 28;
LABEL_10:
    *(int *)((char *)&v98 + 4 * v40 + v5) = v39;
    v5 += 4;
    ++v6;
  }
  int v42 = (unsigned char *)(*a4 + a5);
  int v43 = v101;
  int v44 = (v98 + 16400 + v100) << 13;
  int v45 = (v98 + 16400 - v100) << 13;
  int v46 = 4433 * (v101 + v99);
  int v47 = v46 + 6270 * v99;
  unsigned char *v42 = *(unsigned char *)(v95 - 384 + (((unint64_t)(v47 + v44) >> 18) & 0x3FF));
  int v48 = v46 - 15137 * v43;
  v42[3] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v44 - v47) >> 18) & 0x3FF));
  v42[1] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v48 + v45) >> 18) & 0x3FF));
  _OWORD v42[2] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v45 - v48) >> 18) & 0x3FF));
  int v49 = (unsigned char *)(a4[1] + a5);
  int v50 = v105;
  int v51 = (v102 + 16400 + v104) << 13;
  int v52 = 4433 * (v105 + v103);
  int v53 = v52 + 6270 * v103;
  int v54 = (v102 + 16400 - v104) << 13;
  *int v49 = *(unsigned char *)(v95 - 384 + (((unint64_t)(v53 + v51) >> 18) & 0x3FF));
  int v55 = v52 - 15137 * v50;
  v49[3] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v51 - v53) >> 18) & 0x3FF));
  v49[1] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v55 + v54) >> 18) & 0x3FF));
  v49[2] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v54 - v55) >> 18) & 0x3FF));
  int v56 = (unsigned char *)(a4[2] + a5);
  int v57 = v109;
  int v58 = (v106 + 16400 + v108) << 13;
  int v59 = 4433 * (v109 + v107);
  int v60 = v59 + 6270 * v107;
  int v61 = (v106 + 16400 - v108) << 13;
  unsigned char *v56 = *(unsigned char *)(v95 - 384 + (((unint64_t)(v60 + v58) >> 18) & 0x3FF));
  int v62 = v59 - 15137 * v57;
  v56[3] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v58 - v60) >> 18) & 0x3FF));
  v56[1] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v62 + v61) >> 18) & 0x3FF));
  v56[2] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v61 - v62) >> 18) & 0x3FF));
  uint64_t v63 = (unsigned char *)(a4[3] + a5);
  int v64 = v113;
  int v65 = (v110 + 16400 + v112) << 13;
  int v66 = 4433 * (v113 + v111);
  int v67 = v66 + 6270 * v111;
  int v68 = (v110 + 16400 - v112) << 13;
  *uint64_t v63 = *(unsigned char *)(v95 - 384 + (((unint64_t)(v67 + v65) >> 18) & 0x3FF));
  int v69 = v66 - 15137 * v64;
  v63[3] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v65 - v67) >> 18) & 0x3FF));
  v63[1] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v69 + v68) >> 18) & 0x3FF));
  v63[2] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v68 - v69) >> 18) & 0x3FF));
  int v70 = (unsigned char *)(a4[4] + a5);
  int v71 = v117;
  int v72 = (v114 + 16400 + v116) << 13;
  int v73 = v114 + 16400 - v116;
  int v74 = 4433 * (v117 + v115);
  int v75 = v74 + 6270 * v115;
  unsigned char *v70 = *(unsigned char *)(v95 - 384 + (((unint64_t)(v75 + v72) >> 18) & 0x3FF));
  v73 <<= 13;
  int v76 = v74 - 15137 * v71;
  v70[3] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v72 - v75) >> 18) & 0x3FF));
  v70[1] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v76 + v73) >> 18) & 0x3FF));
  v70[2] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v73 - v76) >> 18) & 0x3FF));
  int v77 = (unsigned char *)(a4[5] + a5);
  int v78 = (v118 + 16400 + v120) << 13;
  int v79 = 4433 * (v121 + v119);
  int v80 = v79 + 6270 * v119;
  int v81 = v79 - 15137 * v121;
  int v82 = (v118 + 16400 - v120) << 13;
  *int v77 = *(unsigned char *)(v95 - 384 + (((unint64_t)(v80 + v78) >> 18) & 0x3FF));
  v77[3] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v78 - v80) >> 18) & 0x3FF));
  v77[1] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v81 + v82) >> 18) & 0x3FF));
  v77[2] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v82 - v81) >> 18) & 0x3FF));
  int v83 = (unsigned char *)(a4[6] + a5);
  int v84 = (v122 + 16400 + v124) << 13;
  int v85 = (v122 + 16400 - v124) << 13;
  int v86 = 4433 * (v125 + v123);
  int v87 = v86 + 6270 * v123;
  int v88 = v86 - 15137 * v125;
  uint64_t result = *(unsigned __int8 *)(v95 - 384 + (((unint64_t)(v87 + v84) >> 18) & 0x3FF));
  *int v83 = result;
  v83[3] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v84 - v87) >> 18) & 0x3FF));
  v83[1] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v88 + v85) >> 18) & 0x3FF));
  v83[2] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v85 - v88) >> 18) & 0x3FF));
  int v90 = (unsigned char *)(a4[7] + a5);
  int v91 = (v126 + 16400 + v128) << 13;
  int v92 = (v126 + 16400 - v128) << 13;
  int v93 = 4433 * (v129 + v127) + 6270 * v127;
  int v94 = 4433 * (v129 + v127) - 15137 * v129;
  *int v90 = *(unsigned char *)(v95 - 384 + (((unint64_t)(v93 + v91) >> 18) & 0x3FF));
  v90[3] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v91 - v93) >> 18) & 0x3FF));
  v90[1] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v94 + v92) >> 18) & 0x3FF));
  v90[2] = *(unsigned char *)(v95 - 384 + (((unint64_t)(v92 - v94) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_1003E98A0(uint64_t a1, uint64_t a2, __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(a1 + 408);
  uint64_t v6 = *(_DWORD **)(a2 + 88);
  uint64_t v7 = ((uint64_t)(*v6 * *a3) << 13) | 0x400;
  uint64_t v8 = (int)v6[32] * (uint64_t)a3[32];
  int v9 = v7 + 5793 * v8;
  unint64_t v10 = (unint64_t)(v7 - 11586 * v8) >> 11;
  LODWORD(v8) = 10033 * v6[16] * a3[16];
  int v11 = v8 + v9;
  int v12 = v9 - v8;
  LODWORD(v8) = v6[8] * a3[8];
  int v13 = v6[25];
  int v14 = v6[24] * a3[24];
  int v15 = v6[40] * a3[40];
  int v16 = 2998 * (v15 + v8);
  int v17 = v16 + ((v14 + v8) << 13);
  int v18 = v16 + ((v15 - v14) << 13);
  int v19 = 4 * (v8 - v14 - v15);
  unsigned int v20 = v17 + v11;
  LODWORD(v8) = v11 - v17;
  int v21 = v19 + v10;
  int v22 = v10 - v19;
  unsigned int v23 = v18 + v12;
  LODWORD(v10) = v12 - v18;
  uint64_t v24 = ((uint64_t)(v6[1] * a3[1]) << 13) | 0x400;
  uint64_t v25 = (int)v6[33] * (uint64_t)a3[33];
  uint64_t v26 = v24 + 5793 * v25;
  unint64_t v27 = (unint64_t)(v24 - 11586 * v25) >> 11;
  uint64_t v28 = 10033 * (int)v6[17] * (uint64_t)a3[17];
  uint64_t v29 = v28 + v26;
  uint64_t v30 = v26 - v28;
  uint64_t v31 = (int)v6[9] * (uint64_t)a3[9];
  uint64_t v32 = (int)v6[41] * (uint64_t)a3[41];
  uint64_t v33 = 2998 * (v31 + v32);
  uint64_t v34 = v33 + ((v31 + v13 * (uint64_t)a3[25]) << 13);
  uint64_t v35 = v33 + ((v32 - v13 * (uint64_t)a3[25]) << 13);
  LODWORD(v26) = 4 * (v31 - (v13 * a3[25] + v32));
  unint64_t v36 = (unint64_t)(v34 + v29) >> 11;
  unint64_t v37 = (unint64_t)(v29 - v34) >> 11;
  int v38 = v26 + v27;
  LODWORD(v27) = v27 - v26;
  unint64_t v39 = (unint64_t)(v35 + v30) >> 11;
  unint64_t v40 = (unint64_t)(v30 - v35) >> 11;
  uint64_t v41 = ((uint64_t)(v6[2] * a3[2]) << 13) | 0x400;
  uint64_t v42 = (int)v6[34] * (uint64_t)a3[34];
  uint64_t v43 = v41 + 5793 * v42;
  unint64_t v44 = (unint64_t)(v41 - 11586 * v42) >> 11;
  uint64_t v45 = 10033 * (int)v6[18] * (uint64_t)a3[18];
  uint64_t v46 = v45 + v43;
  uint64_t v47 = v43 - v45;
  uint64_t v48 = (int)v6[10] * (uint64_t)a3[10];
  LODWORD(v34) = a3[26];
  LODWORD(v32) = v6[26];
  uint64_t v49 = (int)v6[42] * (uint64_t)a3[42];
  uint64_t v50 = 2998 * (v48 + v49);
  uint64_t v51 = v50 + ((v48 + (int)v32 * (uint64_t)a3[26]) << 13);
  uint64_t v52 = v50 + ((v49 - (int)v32 * (uint64_t)(int)v34) << 13);
  LODWORD(v48) = 4 * (v48 - (v32 * v34 + v49));
  unint64_t v53 = (unint64_t)(v51 + v46) >> 11;
  unint64_t v54 = (unint64_t)(v46 - v51) >> 11;
  LODWORD(v32) = v48 + v44;
  LODWORD(v48) = v44 - v48;
  unint64_t v55 = (unint64_t)(v52 + v47) >> 11;
  unint64_t v56 = (unint64_t)(v47 - v52) >> 11;
  v5 -= 384;
  int v57 = (unsigned char *)(*a4 + a5);
  int v58 = (v20 >> 11 << 13) + 134348800;
  int v59 = v58 + 5793 * v53;
  LODWORD(v36) = 10033 * v36;
  unsigned char *v57 = *(unsigned char *)(v5 + (((unint64_t)(v59 + v36) >> 18) & 0x3FF));
  v57[2] = *(unsigned char *)(v5 + (((unint64_t)(v59 - v36) >> 18) & 0x3FF));
  v57[1] = *(unsigned char *)(v5 + (((unint64_t)(v58 + 268423870 * v53) >> 18) & 0x3FF));
  int v60 = (unsigned char *)(a4[1] + a5);
  int v61 = (v21 << 13) + 134348800;
  LODWORD(v36) = v61 + 5793 * v32;
  v38 *= 10033;
  unsigned char *v60 = *(unsigned char *)(v5 + (((unint64_t)(v36 + v38) >> 18) & 0x3FF));
  v60[2] = *(unsigned char *)(v5 + (((unint64_t)(v36 - v38) >> 18) & 0x3FF));
  v60[1] = *(unsigned char *)(v5 + (((unint64_t)(v61 + 268423870 * v32) >> 18) & 0x3FF));
  int v62 = (unsigned char *)(a4[2] + a5);
  int v63 = (v23 >> 11 << 13) + 134348800;
  int v64 = v63 + 5793 * v55;
  LODWORD(v39) = 10033 * v39;
  unsigned char *v62 = *(unsigned char *)(v5 + (((unint64_t)(v64 + v39) >> 18) & 0x3FF));
  v62[2] = *(unsigned char *)(v5 + (((unint64_t)(v64 - v39) >> 18) & 0x3FF));
  v62[1] = *(unsigned char *)(v5 + (((unint64_t)(v63 + 268423870 * v55) >> 18) & 0x3FF));
  int v65 = (unsigned char *)(a4[3] + a5);
  LODWORD(v10) = (v10 >> 11 << 13) + 134348800;
  LODWORD(v39) = v10 + 5793 * v56;
  LODWORD(v40) = 10033 * v40;
  *int v65 = *(unsigned char *)(v5 + (((unint64_t)(v39 + v40) >> 18) & 0x3FF));
  v65[2] = *(unsigned char *)(v5 + (((unint64_t)(v39 - v40) >> 18) & 0x3FF));
  v65[1] = *(unsigned char *)(v5 + (((unint64_t)(v10 + 268423870 * v56) >> 18) & 0x3FF));
  int v66 = (unsigned char *)(a4[4] + a5);
  int v67 = (v22 << 13) + 134348800;
  LODWORD(v40) = v67 + 5793 * v48;
  LODWORD(v27) = 10033 * v27;
  uint64_t result = *(unsigned __int8 *)(v5 + (((unint64_t)(v40 + v27) >> 18) & 0x3FF));
  *int v66 = result;
  v66[2] = *(unsigned char *)(v5 + (((unint64_t)(v40 - v27) >> 18) & 0x3FF));
  v66[1] = *(unsigned char *)(v5 + (((unint64_t)(v67 + 268423870 * v48) >> 18) & 0x3FF));
  LODWORD(v8) = (v8 >> 11 << 13) + 134348800;
  int v69 = v8 + 5793 * v54;
  int v70 = (unsigned char *)(a4[5] + a5);
  unsigned char *v70 = *(unsigned char *)(v5 + (((unint64_t)(v69 + 10033 * v37) >> 18) & 0x3FF));
  v70[2] = *(unsigned char *)(v5 + (((unint64_t)(v69 - 10033 * v37) >> 18) & 0x3FF));
  v70[1] = *(unsigned char *)(v5 + (((unint64_t)(v8 + 268423870 * v54) >> 18) & 0x3FF));
  return result;
}

uint64_t sub_1003E9CA8(uint64_t a1, uint64_t a2, __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(a1 + 408);
  uint64_t v6 = *(_DWORD **)(a2 + 88);
  int v7 = *v6 * *a3;
  int v8 = v6[16] * a3[16];
  int v9 = (v8 + v7) << 13;
  int v10 = (v7 - v8) << 13;
  int v11 = v6[8] * a3[8];
  int v12 = v6[24] * a3[24];
  int v13 = 4433 * (v12 + v11);
  int v14 = v13 + 6270 * v11;
  int v15 = v13 - 15137 * v12;
  int v16 = v9 - v14;
  int v17 = v10 - v15;
  int v18 = v6[1] * a3[1];
  int v19 = v6[17] * a3[17];
  int v20 = (v19 + v18) << 13;
  int v21 = (v18 - v19) << 13;
  int v22 = v6[9] * a3[9];
  LODWORD(v6) = v6[25] * a3[25];
  int v23 = 4433 * (v6 + v22);
  int v24 = v23 + 6270 * v22;
  LODWORD(v6) = v23 - 15137 * v6;
  int v25 = v24 + v20;
  int v26 = v20 - v24;
  uint64_t result = (v6 + v21);
  v5 -= 384;
  int v28 = v14 + v9 + 33587200;
  uint64_t v29 = (unsigned char *)(*a4 + a5);
  *uint64_t v29 = *(unsigned char *)(v5 + (((unint64_t)(v28 + v25) >> 16) & 0x3FF));
  LODWORD(v6) = v21 - v6;
  v29[1] = *(unsigned char *)(v5 + (((unint64_t)(v28 - v25) >> 16) & 0x3FF));
  uint64_t v30 = (unsigned char *)(a4[1] + a5);
  int v31 = v15 + v10 + 33587200;
  *uint64_t v30 = *(unsigned char *)(v5 + (((unint64_t)(v31 + result) >> 16) & 0x3FF));
  v30[1] = *(unsigned char *)(v5 + (((unint64_t)(v31 - result) >> 16) & 0x3FF));
  uint64_t v32 = (unsigned char *)(a4[2] + a5);
  unsigned char *v32 = *(unsigned char *)(v5 + (((unint64_t)(v17 + 33587200 + v6) >> 16) & 0x3FF));
  v32[1] = *(unsigned char *)(v5 + (((unint64_t)(v17 + 33587200 - v6) >> 16) & 0x3FF));
  uint64_t v33 = (unsigned char *)(a4[3] + a5);
  *uint64_t v33 = *(unsigned char *)(v5 + (((unint64_t)(v16 + 33587200 + v26) >> 16) & 0x3FF));
  v33[1] = *(unsigned char *)(v5 + (((unint64_t)(v16 + 33587200 - v26) >> 16) & 0x3FF));
  return result;
}

uint64_t sub_1003E9E30(uint64_t result, uint64_t a2, unsigned __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(result + 408) - 384;
  uint64_t v6 = *(_DWORD **)(a2 + 88);
  int v7 = *v6 * *a3 + 4100;
  LODWORD(v6) = v6[8] * a3[8];
  *(unsigned char *)(*a4 + a5) = *(unsigned char *)(v5 + (((unint64_t)(v6 + v7) >> 3) & 0x3FF));
  *(unsigned char *)(a4[1] + a5) = *(unsigned char *)(v5 + (((unint64_t)(v7 - v6) >> 3) & 0x3FF));
  return result;
}

const char *sub_1003E9E88(void *a1)
{
  a1[1] = 0;
  uint64_t v2 = OpenCVWrapperContours.startIndex.getter();
  uint64_t v7 = v2;
  uint64_t v3 = (char *)sub_1003EB22C((int)a1, 0xA8uLL);
  if (!v3)
  {
    nullsub_1(a1);
    *(void *)(*a1 + 40) = 56;
    (*(void (**)(void *))*a1)(a1);
  }
  *(void *)uint64_t v3 = sub_1003EA038;
  *((void *)v3 + 1) = sub_1003EA1F4;
  *((void *)v3 + 2) = sub_1003EA314;
  *((void *)v3 + 3) = sub_1003EA4EC;
  *((void *)v3 + 4) = sub_1003EA6FC;
  *((void *)v3 + 5) = sub_1003EA7A0;
  *((void *)v3 + 6) = sub_1003EA844;
  *((void *)v3 + 7) = sub_1003EAA44;
  *((void *)v3 + 8) = sub_1003EAD58;
  *((void *)v3 + 9) = sub_1003EB07C;
  *((void *)v3 + 11) = v2;
  *((void *)v3 + 12) = 1000000000;
  *((void *)v3 + 10) = sub_1003EB1D0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *((void *)v3 + 19) = 168;
  a1[1] = v3;
  uint64_t result = getenv("JPEGMEM");
  if (result)
  {
    char v6 = 120;
    uint64_t result = (const char *)sscanf(result, "%ld%c", &v7, &v6);
    if ((int)result >= 1)
    {
      if ((v6 & 0xDF) == 0x4D) {
        uint64_t v5 = 1000 * v7;
      }
      else {
        uint64_t v5 = v7;
      }
      *((void *)v3 + 11) = 1000 * v5;
    }
  }
  return result;
}

uint64_t sub_1003EA038(void *a1, signed int a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  if (a3 > 0x3B9AC9E8)
  {
    *(void *)(*a1 + 40) = 0x100000038;
    (*(void (**)(void *))*a1)(a1);
    unint64_t v7 = a3 + 7;
    if (a2 < 2)
    {
LABEL_3:
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v9 = v6 + 8 * a2;
      int v12 = *(void **)(v9 + 104);
      int v11 = (void *)(v9 + 104);
      int v10 = v12;
      if (v12) {
        goto LABEL_4;
      }
LABEL_9:
      int v13 = 0;
LABEL_10:
      unint64_t v17 = v8 + 24;
      int v18 = &unk_10040D778;
      if (!v13) {
        int v18 = &unk_10040D768;
      }
      if (v18[a2] >= 999999976 - v8) {
        unint64_t v19 = 999999976 - v8;
      }
      else {
        unint64_t v19 = v18[a2];
      }
      unint64_t v20 = v17 + v19;
      for (unsigned int i = sub_1003EB22C((int)a1, v17 + v19); !i; unsigned int i = sub_1003EB22C((int)a1, v17 + v19))
      {
        if (v19 <= 0x63)
        {
          *(void *)(*a1 + 40) = 0x200000038;
          (*(void (**)(void *))*a1)(a1);
        }
        v19 >>= 1;
        unint64_t v20 = v17 + v19;
      }
      *(void *)(v6 + 152) += v20;
      *unsigned int i = 0;
      i[1] = 0;
      i[2] = v19 + v8;
      if (v13) {
        int v22 = v13;
      }
      else {
        int v22 = v11;
      }
      *int v22 = i;
      int v13 = i;
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v7 = a3 + 7;
    if (a2 < 2) {
      goto LABEL_3;
    }
  }
  uint64_t v14 = *a1;
  *(_DWORD *)(v14 + 40) = 15;
  *(_DWORD *)(v14 + 44) = a2;
  (*(void (**)(void *))*a1)(a1);
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = v6 + 8 * a2;
  int v16 = *(void **)(v15 + 104);
  int v11 = (void *)(v15 + 104);
  int v10 = v16;
  if (!v16) {
    goto LABEL_9;
  }
LABEL_4:
  while (1)
  {
    int v13 = v10;
    if (v10[2] >= v8) {
      break;
    }
    int v10 = (void *)*v10;
    if (!*v13) {
      goto LABEL_10;
    }
  }
LABEL_20:
  uint64_t v23 = v13[1];
  uint64_t result = (uint64_t)v13 + v23 + 24;
  unint64_t v25 = v13[2] - v8;
  v13[1] = v23 + v8;
  v13[2] = v25;
  return result;
}

void *sub_1003EA1F4(void *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  if (a3 < 0x3B9AC9E9)
  {
    unint64_t v7 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (a2 < 2) {
      goto LABEL_3;
    }
LABEL_6:
    int v12 = (void (**)(void))*a1;
    *((_DWORD *)v12 + 10) = 15;
    *((_DWORD *)v12 + 11) = a2;
    (*(void (**)(void *))*a1)(a1);
    unint64_t v8 = v7 + 24;
    uint64_t v9 = sub_1003EB244((int)a1, v7 + 24);
    if (v9) {
      goto LABEL_4;
    }
LABEL_7:
    *(void *)(*a1 + 40) = 0x400000038;
    (*(void (**)(void *))*a1)(a1);
    goto LABEL_4;
  }
  *(void *)(*a1 + 40) = 0x300000038;
  (*(void (**)(void *))*a1)(a1);
  unint64_t v7 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (a2 >= 2) {
    goto LABEL_6;
  }
LABEL_3:
  unint64_t v8 = v7 + 24;
  uint64_t v9 = sub_1003EB244((int)a1, v7 + 24);
  if (!v9) {
    goto LABEL_7;
  }
LABEL_4:
  *(void *)(v6 + 152) += v8;
  uint64_t v10 = v6 + 8 * (int)a2;
  void *v9 = *(void *)(v10 + 120);
  v9[1] = v7;
  v9[2] = 0;
  *(void *)(v10 + 120) = v9;
  return v9 + 3;
}

uint64_t sub_1003EA314(void *a1, signed int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7 = a1[1];
  unsigned int v8 = 0x3B9AC9E8 / a3;
  if (a3 > 0x3B9AC9E8)
  {
    uint64_t v9 = *a1;
    *(_DWORD *)(v9 + 40) = 72;
    (*(void (**)(void *))v9)(a1);
  }
  if (v8 >= a4) {
    unsigned int v10 = a4;
  }
  else {
    unsigned int v10 = v8;
  }
  *(_DWORD *)(v7 + 160) = v10;
  uint64_t v11 = sub_1003EA038(a1, a2, 8 * a4);
  if (a4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a3;
    do
    {
      if (v10 >= a4 - v12) {
        unsigned int v10 = a4 - v12;
      }
      unint64_t v15 = v13 * (unint64_t)v10;
      uint64_t v16 = a1[1];
      if (v15 >= 0x3B9AC9E9)
      {
        *(void *)(*a1 + 40) = 0x300000038;
        (*(void (**)(void *))*a1)(a1);
      }
      if (a2 >= 2)
      {
        uint64_t v17 = *a1;
        *(_DWORD *)(v17 + 40) = 15;
        *(_DWORD *)(v17 + 44) = a2;
        (*(void (**)(void *))*a1)(a1);
      }
      uint64_t v18 = (v15 + 7) & 0x7FFFFFFFFFFFFFF8;
      unint64_t v19 = sub_1003EB244((int)a1, v18 + 24);
      if (!v19)
      {
        *(void *)(*a1 + 40) = 0x400000038;
        (*(void (**)(void *))*a1)(a1);
      }
      *(void *)(v16 + 152) += v18 + 24;
      uint64_t v20 = v16 + 8 * a2;
      *unint64_t v19 = *(void *)(v20 + 120);
      v19[1] = v18;
      v19[2] = 0;
      *(void *)(v20 + 120) = v19;
      if (v10)
      {
        int v21 = v19 + 3;
        unsigned int v22 = v10;
        do
        {
          uint64_t v14 = (v12 + 1);
          *(void *)(v11 + 8 * v12) = v21;
          int v21 = (void *)((char *)v21 + v13);
          LODWORD(v12) = v12 + 1;
          --v22;
        }
        while (v22);
      }
      else
      {
        uint64_t v14 = v12;
      }
      uint64_t v12 = v14;
    }
    while (v14 < a4);
  }
  return v11;
}

uint64_t sub_1003EA4EC(void *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7 = a1[1];
  unint64_t v23 = (unint64_t)a3 << 7;
  if (a3 >= 0x773594)
  {
    uint64_t v8 = *a1;
    *(_DWORD *)(v8 + 40) = 72;
    (*(void (**)(void *))v8)(a1);
  }
  if (0x3B9AC9E8 / v23 >= a4) {
    LODWORD(v9) = a4;
  }
  else {
    LODWORD(v9) = 0x3B9AC9E8 / v23;
  }
  *(_DWORD *)(v7 + 160) = v9;
  uint64_t v10 = sub_1003EA038(a1, a2, 8 * a4);
  if (a4)
  {
    uint64_t v11 = 0;
    unint64_t v12 = (unint64_t)a3 << 7;
    do
    {
      if (v9 >= a4 - v11) {
        uint64_t v9 = a4 - v11;
      }
      else {
        uint64_t v9 = v9;
      }
      unint64_t v14 = v23 * v9;
      uint64_t v15 = a1[1];
      if (v23 * v9 > 0x3B9AC9E8)
      {
        *(void *)(*a1 + 40) = 0x300000038;
        (*(void (**)(void *))*a1)(a1);
        if (a2 < 2)
        {
LABEL_15:
          uint64_t v16 = v14 | 0x18;
          uint64_t v17 = sub_1003EB244((int)a1, v14 | 0x18);
          if (!v17) {
            goto LABEL_22;
          }
          goto LABEL_16;
        }
      }
      else if (a2 < 2)
      {
        goto LABEL_15;
      }
      uint64_t v21 = *a1;
      *(_DWORD *)(v21 + 40) = 15;
      *(_DWORD *)(v21 + 44) = a2;
      (*(void (**)(void *))*a1)(a1);
      uint64_t v16 = v14 | 0x18;
      uint64_t v17 = sub_1003EB244((int)a1, v14 | 0x18);
      if (!v17)
      {
LABEL_22:
        *(void *)(*a1 + 40) = 0x400000038;
        (*(void (**)(void *))*a1)(a1);
      }
LABEL_16:
      *(void *)(v15 + 152) += v16;
      uint64_t v18 = v15 + 8 * (int)a2;
      *uint64_t v17 = *(void *)(v18 + 120);
      v17[1] = v14;
      v17[2] = 0;
      *(void *)(v18 + 120) = v17;
      if (v9)
      {
        unint64_t v19 = v17 + 3;
        int v20 = v9;
        do
        {
          uint64_t v13 = (v11 + 1);
          *(void *)(v10 + 8 * v11) = v19;
          unint64_t v19 = (void *)((char *)v19 + v12);
          LODWORD(v11) = v11 + 1;
          --v20;
        }
        while (v20);
      }
      else
      {
        uint64_t v13 = v11;
      }
      uint64_t v11 = v13;
    }
    while (v13 < a4);
  }
  return v10;
}

uint64_t sub_1003EA6FC(void *a1, signed int a2, char a3, int a4, int a5, int a6)
{
  uint64_t v12 = a1[1];
  if (a2 != 1)
  {
    uint64_t v13 = (void (**)(void))*a1;
    *((_DWORD *)v13 + 10) = 15;
    *((_DWORD *)v13 + 11) = a2;
    (*(void (**)(void *))*a1)(a1);
  }
  uint64_t result = sub_1003EA038(a1, a2, 0x90uLL);
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a6;
  *(unsigned char *)(result + 36) = a3;
  *(unsigned char *)(result + 38) = 0;
  *(void *)(result + 40) = *(void *)(v12 + 136);
  *(void *)(v12 + 136) = result;
  return result;
}

uint64_t sub_1003EA7A0(void *a1, signed int a2, char a3, int a4, int a5, int a6)
{
  uint64_t v12 = a1[1];
  if (a2 != 1)
  {
    uint64_t v13 = (void (**)(void))*a1;
    *((_DWORD *)v13 + 10) = 15;
    *((_DWORD *)v13 + 11) = a2;
    (*(void (**)(void *))*a1)(a1);
  }
  uint64_t result = sub_1003EA038(a1, a2, 0x90uLL);
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a6;
  *(unsigned char *)(result + 36) = a3;
  *(unsigned char *)(result + 38) = 0;
  *(void *)(result + 40) = *(void *)(v12 + 144);
  *(void *)(v12 + 144) = result;
  return result;
}

uint64_t sub_1003EA844(uint64_t result)
{
  uint64_t v1 = (uint64_t *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(v2 + 136);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    do
    {
      if (!*(void *)v3)
      {
        unsigned int v6 = *(_DWORD *)(v3 + 12);
        v5 += v6 * (unint64_t)*(unsigned int *)(v3 + 16);
        v4 += *(unsigned int *)(v3 + 8) * (unint64_t)v6;
      }
      uint64_t v3 = *(void *)(v3 + 40);
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  for (uint64_t i = *(void *)(v2 + 144); i; uint64_t i = *(void *)(i + 40))
  {
    if (!*(void *)i)
    {
      unsigned int v10 = *(_DWORD *)(i + 12);
      v5 += (*(unsigned int *)(i + 16) * (unint64_t)v10) << 7;
      v4 += (v10 * (unint64_t)*(unsigned int *)(i + 8)) << 7;
    }
  }
  if (v5 >= 1)
  {
    uint64_t result = sub_1003EB254(result, v5, v4);
    if (result >= v4)
    {
      uint64_t v8 = 1000000000;
      uint64_t v9 = *(void *)(v2 + 136);
      if (!v9) {
        goto LABEL_26;
      }
    }
    else
    {
      if (result / v5 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = result / v5;
      }
      uint64_t v9 = *(void *)(v2 + 136);
      if (!v9)
      {
LABEL_26:
        for (uint64_t j = *(void *)(v2 + 144); j; uint64_t j = *(void *)(j + 40))
        {
          if (!*(void *)j)
          {
            uint64_t v14 = *(unsigned int *)(j + 8);
            uint64_t v15 = *(unsigned int *)(j + 16);
            if ((v14 - 1) / v15 >= v8)
            {
              *(_DWORD *)(j + 20) = v15 * v8;
              sub_1003EB25C(v1);
              *(unsigned char *)(j + 38) = 1;
              LODWORD(v14) = *(_DWORD *)(j + 20);
            }
            else
            {
              *(_DWORD *)(j + 20) = v14;
            }
            uint64_t result = sub_1003EA4EC(v1, 1u, *(_DWORD *)(j + 12), v14);
            *(void *)uint64_t j = result;
            *(void *)(j + 24) = *(unsigned int *)(v2 + 160);
            *(_DWORD *)(j + 32) = 0;
            *(unsigned char *)(j + 37) = 0;
          }
        }
        return result;
      }
    }
    do
    {
      if (!*(void *)v9)
      {
        uint64_t v11 = *(unsigned int *)(v9 + 8);
        uint64_t v12 = *(unsigned int *)(v9 + 16);
        if ((v11 - 1) / v12 >= v8)
        {
          *(_DWORD *)(v9 + 20) = v12 * v8;
          sub_1003EB25C(v1);
          *(unsigned char *)(v9 + 38) = 1;
          LODWORD(v11) = *(_DWORD *)(v9 + 20);
        }
        else
        {
          *(_DWORD *)(v9 + 20) = v11;
        }
        uint64_t result = sub_1003EA314(v1, 1, *(_DWORD *)(v9 + 12), v11);
        *(void *)uint64_t v9 = result;
        *(void *)(v9 + 24) = *(unsigned int *)(v2 + 160);
        *(_DWORD *)(v9 + 32) = 0;
        *(unsigned char *)(v9 + 37) = 0;
      }
      uint64_t v9 = *(void *)(v9 + 40);
    }
    while (v9);
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_1003EAA44(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9 = a4 + a3;
  if (v9 <= *(_DWORD *)(a2 + 8) && *(_DWORD *)(a2 + 16) >= a4 && *(void *)a2)
  {
    unsigned int v10 = *(_DWORD *)(a2 + 28);
    if (v10 > a3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v11 = *a1;
    *(_DWORD *)(v11 + 40) = 23;
    (*(void (**)(uint64_t *))v11)(a1);
    unsigned int v10 = *(_DWORD *)(a2 + 28);
    if (v10 > a3) {
      goto LABEL_8;
    }
  }
  if (v9 <= *(_DWORD *)(a2 + 20) + v10) {
    goto LABEL_35;
  }
LABEL_8:
  if (!*(unsigned char *)(a2 + 38))
  {
    uint64_t v12 = *a1;
    *(_DWORD *)(v12 + 40) = 71;
    (*(void (**)(uint64_t *))v12)(a1);
  }
  if (*(unsigned char *)(a2 + 37))
  {
    unint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = *(unsigned int *)(a2 + 12);
      uint64_t v16 = *(unsigned int *)(a2 + 24);
      unint64_t v17 = *(unsigned int *)(a2 + 28) * (unint64_t)v15;
      do
      {
        uint64_t v18 = v13 - v14;
        if (v18 >= v16) {
          uint64_t v18 = v16;
        }
        unint64_t v19 = v14 + *(unsigned int *)(a2 + 28);
        if (v18 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v19)) {
          uint64_t v18 = *(unsigned int *)(a2 + 32) - v19;
        }
        uint64_t v20 = *(unsigned int *)(a2 + 8) - v19;
        if (v18 >= v20) {
          uint64_t v18 = v20;
        }
        if (v18 < 1) {
          break;
        }
        uint64_t v21 = v18 * v15;
        (*(void (**)(uint64_t *, uint64_t, void, unint64_t, uint64_t))(a2 + 56))(a1, a2 + 48, *(void *)(*(void *)a2 + 8 * v14), v17, v18 * v15);
        v17 += v21;
        unint64_t v13 = *(unsigned int *)(a2 + 20);
        uint64_t v16 = *(unsigned int *)(a2 + 24);
        v14 += v16;
      }
      while (v14 < v13);
    }
    *(unsigned char *)(a2 + 37) = 0;
  }
  if (*(_DWORD *)(a2 + 28) >= a3)
  {
    unint64_t v22 = *(unsigned int *)(a2 + 20);
    unsigned int v23 = (v9 - v22) & ~((uint64_t)(v9 - v22) >> 63);
    *(_DWORD *)(a2 + 28) = v23;
    if (!v22) {
      goto LABEL_35;
    }
  }
  else
  {
    LODWORD(v22) = *(_DWORD *)(a2 + 20);
    unsigned int v23 = a3;
    *(_DWORD *)(a2 + 28) = a3;
    if (!v22) {
      goto LABEL_35;
    }
  }
  unint64_t v24 = 0;
  uint64_t v25 = *(unsigned int *)(a2 + 12);
  unint64_t v22 = v22;
  unint64_t v26 = v25 * (unint64_t)v23;
  uint64_t v27 = *(unsigned int *)(a2 + 24);
  do
  {
    uint64_t v28 = v22 - v24;
    if (v28 >= v27) {
      uint64_t v28 = v27;
    }
    unint64_t v29 = v24 + *(unsigned int *)(a2 + 28);
    if (v28 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v29)) {
      uint64_t v28 = *(unsigned int *)(a2 + 32) - v29;
    }
    uint64_t v30 = *(unsigned int *)(a2 + 8) - v29;
    if (v28 >= v30) {
      uint64_t v28 = v30;
    }
    if (v28 < 1) {
      break;
    }
    uint64_t v31 = v28 * v25;
    (*(void (**)(uint64_t *, uint64_t, void, unint64_t, uint64_t))(a2 + 48))(a1, a2 + 48, *(void *)(*(void *)a2 + 8 * v24), v26, v28 * v25);
    v26 += v31;
    unint64_t v22 = *(unsigned int *)(a2 + 20);
    uint64_t v27 = *(unsigned int *)(a2 + 24);
    v24 += v27;
  }
  while (v24 < v22);
LABEL_35:
  unsigned int v32 = *(_DWORD *)(a2 + 32);
  if (v32 >= v9) {
    goto LABEL_46;
  }
  if (v32 < a3)
  {
    if (a5)
    {
      uint64_t v33 = *a1;
      *(_DWORD *)(v33 + 40) = 23;
      (*(void (**)(uint64_t *))v33)(a1);
      unsigned int v32 = a3;
      goto LABEL_40;
    }
    unsigned int v32 = a3;
    if (*(unsigned char *)(a2 + 36)) {
      goto LABEL_43;
    }
LABEL_50:
    uint64_t v39 = *a1;
    *(_DWORD *)(v39 + 40) = 23;
    (*(void (**)(uint64_t *))v39)(a1);
    return *(void *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
  }
  if (a5)
  {
LABEL_40:
    *(_DWORD *)(a2 + 32) = v9;
    if (!*(unsigned char *)(a2 + 36)) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  if (!*(unsigned char *)(a2 + 36)) {
    goto LABEL_50;
  }
LABEL_43:
  int v34 = *(_DWORD *)(a2 + 28);
  if (v32 - v34 < (int)v9 - v34)
  {
    size_t v35 = *(unsigned int *)(a2 + 12);
    uint64_t v36 = 8 * (v32 - v34);
    unsigned int v37 = a4 + a3 - v32;
    do
    {
      bzero(*(void **)(*(void *)a2 + v36), v35);
      v36 += 8;
      --v37;
    }
    while (v37);
  }
LABEL_46:
  if (a5) {
LABEL_47:
  }
    *(unsigned char *)(a2 + 37) = 1;
  return *(void *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
}

uint64_t sub_1003EAD58(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v9 = a4 + a3;
  if (v9 <= *(_DWORD *)(a2 + 8) && *(_DWORD *)(a2 + 16) >= a4 && *(void *)a2)
  {
    unsigned int v10 = *(_DWORD *)(a2 + 28);
    if (v10 > a3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v11 = *a1;
    *(_DWORD *)(v11 + 40) = 23;
    (*(void (**)(uint64_t *))v11)(a1);
    unsigned int v10 = *(_DWORD *)(a2 + 28);
    if (v10 > a3) {
      goto LABEL_8;
    }
  }
  if (v9 <= *(_DWORD *)(a2 + 20) + v10) {
    goto LABEL_35;
  }
LABEL_8:
  if (!*(unsigned char *)(a2 + 38))
  {
    uint64_t v12 = *a1;
    *(_DWORD *)(v12 + 40) = 71;
    (*(void (**)(uint64_t *))v12)(a1);
  }
  if (*(unsigned char *)(a2 + 37))
  {
    unint64_t v13 = *(unsigned int *)(a2 + 20);
    if (v13)
    {
      unint64_t v14 = 0;
      unint64_t v15 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
      uint64_t v16 = *(unsigned int *)(a2 + 24);
      unint64_t v17 = v15 * *(unsigned int *)(a2 + 28);
      do
      {
        uint64_t v18 = v13 - v14;
        if (v18 >= v16) {
          uint64_t v18 = v16;
        }
        unint64_t v19 = v14 + *(unsigned int *)(a2 + 28);
        if (v18 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v19)) {
          uint64_t v18 = *(unsigned int *)(a2 + 32) - v19;
        }
        uint64_t v20 = *(unsigned int *)(a2 + 8) - v19;
        if (v18 >= v20) {
          uint64_t v18 = v20;
        }
        if (v18 < 1) {
          break;
        }
        unint64_t v21 = v18 * v15;
        (*(void (**)(uint64_t *, uint64_t, void, unint64_t, unint64_t))(a2 + 56))(a1, a2 + 48, *(void *)(*(void *)a2 + 8 * v14), v17, v18 * v15);
        v17 += v21;
        unint64_t v13 = *(unsigned int *)(a2 + 20);
        uint64_t v16 = *(unsigned int *)(a2 + 24);
        v14 += v16;
      }
      while (v14 < v13);
    }
    *(unsigned char *)(a2 + 37) = 0;
  }
  if (*(_DWORD *)(a2 + 28) >= a3)
  {
    unint64_t v22 = *(unsigned int *)(a2 + 20);
    unsigned int v23 = (v9 - v22) & ~((uint64_t)(v9 - v22) >> 63);
    *(_DWORD *)(a2 + 28) = v23;
    if (!v22) {
      goto LABEL_35;
    }
  }
  else
  {
    LODWORD(v22) = *(_DWORD *)(a2 + 20);
    unsigned int v23 = a3;
    *(_DWORD *)(a2 + 28) = a3;
    if (!v22) {
      goto LABEL_35;
    }
  }
  unint64_t v24 = 0;
  unint64_t v25 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
  unint64_t v22 = v22;
  unint64_t v26 = v25 * v23;
  uint64_t v27 = *(unsigned int *)(a2 + 24);
  do
  {
    uint64_t v28 = v22 - v24;
    if (v28 >= v27) {
      uint64_t v28 = v27;
    }
    unint64_t v29 = v24 + *(unsigned int *)(a2 + 28);
    if (v28 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v29)) {
      uint64_t v28 = *(unsigned int *)(a2 + 32) - v29;
    }
    uint64_t v30 = *(unsigned int *)(a2 + 8) - v29;
    if (v28 >= v30) {
      uint64_t v28 = v30;
    }
    if (v28 < 1) {
      break;
    }
    unint64_t v31 = v28 * v25;
    (*(void (**)(uint64_t *, uint64_t, void, unint64_t, unint64_t))(a2 + 48))(a1, a2 + 48, *(void *)(*(void *)a2 + 8 * v24), v26, v28 * v25);
    v26 += v31;
    unint64_t v22 = *(unsigned int *)(a2 + 20);
    uint64_t v27 = *(unsigned int *)(a2 + 24);
    v24 += v27;
  }
  while (v24 < v22);
LABEL_35:
  unsigned int v32 = *(_DWORD *)(a2 + 32);
  if (v32 >= v9) {
    goto LABEL_46;
  }
  if (v32 < a3)
  {
    if (a5)
    {
      uint64_t v33 = *a1;
      *(_DWORD *)(v33 + 40) = 23;
      (*(void (**)(uint64_t *))v33)(a1);
      unsigned int v32 = a3;
      goto LABEL_40;
    }
    unsigned int v32 = a3;
    if (*(unsigned char *)(a2 + 36)) {
      goto LABEL_43;
    }
LABEL_50:
    uint64_t v39 = *a1;
    *(_DWORD *)(v39 + 40) = 23;
    (*(void (**)(uint64_t *))v39)(a1);
    return *(void *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
  }
  if (a5)
  {
LABEL_40:
    *(_DWORD *)(a2 + 32) = v9;
    if (!*(unsigned char *)(a2 + 36)) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  if (!*(unsigned char *)(a2 + 36)) {
    goto LABEL_50;
  }
LABEL_43:
  int v34 = *(_DWORD *)(a2 + 28);
  if (v32 - v34 < (int)v9 - v34)
  {
    size_t v35 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
    uint64_t v36 = 8 * (v32 - v34);
    unsigned int v37 = a4 + a3 - v32;
    do
    {
      bzero(*(void **)(*(void *)a2 + v36), v35);
      v36 += 8;
      --v37;
    }
    while (v37);
  }
LABEL_46:
  if (a5) {
LABEL_47:
  }
    *(unsigned char *)(a2 + 37) = 1;
  return *(void *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
}

void sub_1003EB07C(void *a1, signed int a2)
{
  uint64_t v4 = (void *)a1[1];
  if (a2 < 2)
  {
    if (a2 == 1)
    {
      for (uint64_t i = v4[17]; i; uint64_t i = *(void *)(i + 40))
      {
        if (*(unsigned char *)(i + 38))
        {
          *(unsigned char *)(i + 38) = 0;
          (*(void (**)(void *, uint64_t))(i + 64))(a1, i + 48);
        }
      }
      v4[17] = 0;
      for (uint64_t j = v4[18]; j; uint64_t j = *(void *)(j + 40))
      {
        if (*(unsigned char *)(j + 38))
        {
          *(unsigned char *)(j + 38) = 0;
          (*(void (**)(void *, uint64_t))(j + 64))(a1, j + 48);
        }
      }
      v4[18] = 0;
    }
  }
  else
  {
    uint64_t v5 = (void (**)(void))*a1;
    *((_DWORD *)v5 + 10) = 15;
    *((_DWORD *)v5 + 11) = a2;
    (*(void (**)(void *))*a1)(a1);
  }
  uint64_t v8 = a2;
  uint64_t v9 = &v4[a2];
  unsigned int v10 = (void *)v9[15];
  v9[15] = 0;
  if (v10)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      uint64_t v12 = v10[1] + v10[2] + 24;
      sub_1003EB23C((int)a1, v10);
      v4[19] -= v12;
      unsigned int v10 = v11;
    }
    while (v11);
  }
  unint64_t v13 = &v4[v8];
  unint64_t v14 = (void *)v13[13];
  v13[13] = 0;
  if (v14)
  {
    do
    {
      unint64_t v15 = (void *)*v14;
      uint64_t v16 = v14[1] + v14[2] + 24;
      sub_1003EB23C((int)a1, v14);
      v4[19] -= v16;
      unint64_t v14 = v15;
    }
    while (v15);
  }
}

uint64_t sub_1003EB1D0(uint64_t a1)
{
  sub_1003EB07C((void *)a1, 1);
  sub_1003EB07C((void *)a1, 0);
  sub_1003EB23C(a1, *(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;

  return nullsub_1(a1);
}

void *sub_1003EB22C(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x69A4C161uLL);
}

void sub_1003EB23C(int a1, void *a2)
{
}

void *sub_1003EB244(int a1, size_t size)
{
  return malloc_type_malloc(size, 0xFA110552uLL);
}

uint64_t sub_1003EB254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1003EB25C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(_DWORD *)(v1 + 40) = 51;
  return (*(uint64_t (**)(uint64_t *))v1)(a1);
}

uint64_t sub_1003EB270(uint64_t a1)
{
  uint64_t v2 = (void (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 624) = v2;
  _DWORD *v2 = sub_1003EB7C4;
  v2[2] = (void (*)(uint64_t))nullsub_106;
  v2[3] = (void (*)(uint64_t))sub_1003EBBF0;
  v2[14] = 0;
  v2[10] = 0;
  if (*(int *)(a1 + 124) >= 5)
  {
    *(void *)(*(void *)a1 + 40) = 0x400000039;
    (**(void (***)(uint64_t))a1)(a1);
    int v3 = *(_DWORD *)(a1 + 108);
    if (v3 < 257)
    {
LABEL_3:
      uint64_t v4 = *(unsigned int *)(a1 + 124);
      uint64_t v5 = v3;
      if ((int)v4 >= 2) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 108);
    if (v3 < 257) {
      goto LABEL_3;
    }
  }
  *(void *)(*(void *)a1 + 40) = 0x1000000003BLL;
  (**(void (***)(uint64_t))a1)(a1);
  uint64_t v4 = *(unsigned int *)(a1 + 124);
  uint64_t v5 = *(int *)(a1 + 108);
  if ((int)v4 >= 2)
  {
LABEL_4:
    if (v4 == 2)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = (v6 + 2) * (v6 + 2);
        ++v6;
      }
      while (v7 <= v5);
    }
    else if (v4 - 1 == ((v4 - 1) & 0xFFFFFFFE))
    {
      uint64_t v51 = 1;
      do
      {
        LODWORD(v6) = v51++;
        int v52 = (v4 - 1) & 0xFFFFFFFE;
        uint64_t v53 = v51;
        uint64_t v54 = 1;
        do
        {
          v53 *= v51;
          v54 *= v51;
          v52 -= 2;
        }
        while (v52);
        uint64_t v7 = v54 * v53;
      }
      while (v7 <= v5);
    }
    else
    {
      uint64_t v59 = 1;
      do
      {
        LODWORD(v6) = v59++;
        int v60 = (v4 - 1) & 0xFFFFFFFE;
        uint64_t v61 = v59;
        uint64_t v62 = 1;
        do
        {
          v61 *= v59;
          v62 *= v59;
          v60 -= 2;
        }
        while (v60);
        uint64_t v7 = v62 * v61;
        int v63 = v4 - ((v4 - 1) | 1);
        do
        {
          v7 *= v59;
          --v63;
        }
        while (v63);
      }
      while (v7 <= v5);
    }
    goto LABEL_14;
  }
LABEL_10:
  if ((int)v5 <= 1) {
    LODWORD(v6) = 1;
  }
  else {
    LODWORD(v6) = v5;
  }
  LODWORD(v7) = v6 + 1;
LABEL_14:
  uint64_t v8 = *(void *)(a1 + 624);
  if (v6 <= 1)
  {
    uint64_t v9 = *(void *)a1;
    *(_DWORD *)(v9 + 40) = 58;
    *(_DWORD *)(v9 + 44) = v7;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if ((int)v4 < 1)
  {
    uint64_t v11 = 1;
    goto LABEL_33;
  }
  if (v4 < 8)
  {
    uint64_t v10 = 0;
    LODWORD(v11) = 1;
LABEL_23:
    uint64_t v18 = v4 - v10;
    unint64_t v19 = (_DWORD *)(v8 + 4 * v10 + 60);
    do
    {
      *v19++ = v6;
      uint64_t v11 = (v11 * v6);
      --v18;
    }
    while (v18);
    goto LABEL_25;
  }
  uint64_t v10 = v4 & 0x7FFFFFF8;
  int32x4_t v12 = vdupq_n_s32(v6);
  unint64_t v13 = (int32x4_t *)(v8 + 76);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  uint64_t v15 = v4 & 0xFFFFFFF8;
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  do
  {
    v13[-1] = v12;
    *unint64_t v13 = v12;
    int32x4_t v14 = vmulq_s32(v14, v12);
    int32x4_t v16 = vmulq_s32(v16, v12);
    v13 += 2;
    v15 -= 8;
  }
  while (v15);
  int8x16_t v17 = (int8x16_t)vmulq_s32(vuzp1q_s32(v14, v16), vuzp2q_s32(v14, v16));
  *(int32x2_t *)v17.i8 = vmul_s32(*(int32x2_t *)v17.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
  uint64_t v11 = (v17.i32[0] * v17.i32[1]);
  if (v10 != v4) {
    goto LABEL_23;
  }
LABEL_25:
  uint64_t v20 = (int *)(v8 + 60);
  uint64_t v21 = (v4 - 1);
  if (*(_DWORD *)(a1 + 64) == 2)
  {
    uint64_t v22 = *(int *)(v8 + 64);
    int v23 = v22 + 1;
    uint64_t v24 = (int)v11 / (int)v22 * (v22 + 1);
    if (v24 <= v5)
    {
      uint64_t v25 = 0;
      unint64_t v26 = (int *)(v8 + 64);
      do
      {
        do
        {
          *unint64_t v26 = v23;
          uint64_t v11 = v24;
          if (v25 == v21) {
            break;
          }
          unint64_t v26 = &v20[dword_10040D898[++v25]];
          uint64_t v28 = *v26;
          int v29 = v28 + 1;
          uint64_t v24 = (int)v11 / (int)v28 * (v28 + 1);
          int v23 = v29;
        }
        while (v24 <= v5);
        uint64_t v25 = 0;
        uint64_t v27 = *(int *)(v8 + 64);
        int v23 = v27 + 1;
        uint64_t v24 = (int)v11 / (int)v27 * (v27 + 1);
        unint64_t v26 = (int *)(v8 + 64);
      }
      while (v24 <= v5);
    }
  }
  else
  {
    uint64_t v30 = *v20;
    int v31 = v30 + 1;
    uint64_t v32 = (int)v11 / (int)v30 * (v30 + 1);
    if (v32 <= v5)
    {
      uint64_t v55 = 0;
      do
      {
        do
        {
          v20[v55] = v31;
          uint64_t v11 = v32;
          if (v55 == v21) {
            break;
          }
          uint64_t v57 = v20[++v55];
          int v58 = v57 + 1;
          uint64_t v32 = (int)v11 / (int)v57 * (v57 + 1);
          int v31 = v58;
        }
        while (v32 <= v5);
        uint64_t v55 = 0;
        uint64_t v56 = *v20;
        int v31 = v56 + 1;
        uint64_t v32 = (int)v11 / (int)v56 * (v56 + 1);
      }
      while (v32 <= v5);
    }
  }
LABEL_33:
  int v33 = *(_DWORD *)(a1 + 124);
  int v34 = *(void (***)(uint64_t, uint64_t))a1;
  *(_DWORD *)(*(void *)a1 + 44) = v11;
  if (v33 == 3)
  {
    *((_DWORD *)v34 + 12) = *(_DWORD *)(v8 + 60);
    *((_DWORD *)v34 + 13) = *(_DWORD *)(v8 + 64);
    *((_DWORD *)v34 + 14) = *(_DWORD *)(v8 + 68);
    int v35 = 96;
    uint64_t v36 = v34;
  }
  else
  {
    uint64_t v36 = *(void (***)(uint64_t, uint64_t))a1;
    int v35 = 97;
  }
  *((_DWORD *)v34 + 10) = v35;
  v36[1](a1, 1);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 8) + 16))(a1, 1, v11, *(unsigned int *)(a1 + 124));
  int v38 = *(_DWORD *)(a1 + 124);
  if (v38 >= 1)
  {
    uint64_t v39 = 0;
    int v40 = v11;
    do
    {
      uint64_t v41 = *(unsigned int *)(v8 + 4 * v39 + 60);
      uint64_t v42 = (v40 / (int)v41);
      if ((int)v41 >= 1 && (int)v42 >= 1)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        do
        {
          if (v43 * v42 < (int)v11)
          {
            uint64_t v45 = v44;
            do
            {
              for (uint64_t i = 0; i != v42; ++i)
                *(unsigned char *)(*(void *)(v37 + 8 * v39) + v45 + i) = ((unint64_t)((v41 - 1) >> 1)
                                                                  - v43
                                                                  + (v43 << 8))
                                                                 / (v41 - 1);
              v45 += v40;
            }
            while (v45 < (int)v11);
          }
          ++v43;
          v44 += v42;
        }
        while (v43 != v41);
        int v38 = *(_DWORD *)(a1 + 124);
      }
      ++v39;
      v40 /= (int)v41;
    }
    while (v39 < v38);
  }
  *(void *)(v8 + 32) = v37;
  *(_DWORD *)(v8 + 40) = v11;
  uint64_t result = sub_1003EBC04(a1);
  if (*(_DWORD *)(a1 + 100) == 2 && *(int *)(a1 + 124) >= 1)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 2 * (*(_DWORD *)(a1 + 116) + 2);
    uint64_t v50 = *(void *)(a1 + 624) + 112;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, v49);
      *(void *)(v50 + 8 * v48++) = result;
    }
    while (v48 < *(int *)(a1 + 124));
  }
  return result;
}

void sub_1003EB7C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 624);
  *(void *)(a1 + 144) = *(void *)(v2 + 32);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(v2 + 40);
  int v3 = *(_DWORD *)(a1 + 100);
  if (v3 == 2)
  {
    *(void *)(v2 + 8) = sub_1003EC260;
    *(unsigned char *)(v2 + 144) = 0;
    if (*(void *)(v2 + 112))
    {
      LODWORD(v5) = *(_DWORD *)(a1 + 124);
    }
    else
    {
      if (*(int *)(a1 + 124) < 1) {
        return;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 2 * (*(_DWORD *)(a1 + 116) + 2);
      do
      {
        *(void *)(v2 + 112 + 8 * v9++) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                + 8))(a1, 1, v10);
        uint64_t v5 = *(int *)(a1 + 124);
      }
      while (v9 < v5);
    }
    if ((int)v5 >= 1)
    {
      uint64_t v11 = 0;
      size_t v12 = 2 * (*(_DWORD *)(a1 + 116) + 2);
      uint64_t v13 = v2 + 112;
      do
        bzero(*(void **)(v13 + 8 * v11++), v12);
      while (v11 < *(int *)(a1 + 124));
    }
  }
  else if (v3 == 1)
  {
    uint64_t v6 = sub_1003EC10C;
    if (*(_DWORD *)(a1 + 124) == 3) {
      uint64_t v6 = sub_1003EC018;
    }
    *(void *)(v2 + 8) = v6;
    *(_DWORD *)(v2 + 76) = 0;
    if (*(unsigned char *)(v2 + 56))
    {
      if (*(void *)(v2 + 80)) {
        return;
      }
    }
    else
    {
      sub_1003EBC04(a1);
      if (*(void *)(v2 + 80)) {
        return;
      }
    }
    int v14 = *(_DWORD *)(a1 + 124);
    if (v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(a1 + 624);
      uint64_t v17 = v16 + 60;
      do
      {
        while (1)
        {
          int v19 = *(_DWORD *)(v16 + 4 * v15 + 60);
          if (!v15) {
            break;
          }
          uint64_t v20 = 0;
          while (v19 != *(_DWORD *)(v17 + 4 * v20))
          {
            if (v15 == ++v20) {
              goto LABEL_34;
            }
          }
          uint64_t v18 = *(void *)(v17 + 8 * v20 + 20);
          if (!v18) {
            break;
          }
          *(void *)(v16 + 8 * v15++ + 80) = v18;
          if (v15 >= v14) {
            return;
          }
        }
LABEL_34:
        uint64_t v21 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
        uint64_t v22 = 0;
        uint64_t v23 = (uint64_t)(v19 - 1) << 9;
        uint64_t v24 = (unsigned __int8 *)&byte_10040D79F;
        do
        {
          uint64_t v25 = (_DWORD *)(v21 + v22);
          _DWORD *v25 = 255 * (255 - 2 * *(v24 - 7)) / v23;
          v25[1] = 255 * (255 - 2 * *(v24 - 6)) / v23;
          v25[2] = 255 * (255 - 2 * *(v24 - 5)) / v23;
          v25[3] = 255 * (255 - 2 * *(v24 - 4)) / v23;
          v25[4] = 255 * (255 - 2 * *(v24 - 3)) / v23;
          v25[5] = 255 * (255 - 2 * *(v24 - 2)) / v23;
          v25[6] = 255 * (255 - 2 * *(v24 - 1)) / v23;
          v25[7] = 255 * (255 - 2 * *v24) / v23;
          v25[8] = 255 * (255 - 2 * v24[1]) / v23;
          v25[9] = 255 * (255 - 2 * v24[2]) / v23;
          v25[10] = 255 * (255 - 2 * v24[3]) / v23;
          v25[11] = 255 * (255 - 2 * v24[4]) / v23;
          v25[12] = 255 * (255 - 2 * v24[5]) / v23;
          v25[13] = 255 * (255 - 2 * v24[6]) / v23;
          v25[14] = 255 * (255 - 2 * v24[7]) / v23;
          v25[15] = 255 * (255 - 2 * v24[8]) / v23;
          v22 += 64;
          v24 += 16;
        }
        while (v22 != 1024);
        int v14 = *(_DWORD *)(a1 + 124);
        *(void *)(v16 + 8 * v15++ + 80) = v21;
      }
      while (v15 < v14);
    }
  }
  else if (v3)
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 40) = 49;
    uint64_t v8 = *(void (**)(void))v7;
    v8();
  }
  else
  {
    if (*(_DWORD *)(a1 + 124) == 3) {
      uint64_t v4 = sub_1003EBDDC;
    }
    else {
      uint64_t v4 = sub_1003EBE54;
    }
    *(void *)(v2 + 8) = v4;
  }
}

uint64_t sub_1003EBBF0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(_DWORD *)(v1 + 40) = 47;
  return (*(uint64_t (**)(uint64_t *))v1)(a1);
}

uint64_t sub_1003EBC04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 624);
  int v3 = *(_DWORD *)(a1 + 100);
  if (v3 == 1) {
    uint64_t v4 = 766;
  }
  else {
    uint64_t v4 = 256;
  }
  *(unsigned char *)(v2 + 56) = v3 == 1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 8) + 16))(a1, 1, v4, *(unsigned int *)(a1 + 124));
  *(void *)(v2 + 48) = result;
  if (*(int *)(a1 + 124) >= 1)
  {
    int v6 = *(_DWORD *)(v2 + 40);
    if (v3 == 1)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = 0;
        int v9 = 0;
        uint64_t v10 = *(int *)(v2 + 4 * v7 + 60);
        v6 /= (int)v10;
        *(void *)(*(void *)(v2 + 48) + 8 * v7) += 255;
        uint64_t v11 = *(char **)(*(void *)(v2 + 48) + 8 * v7);
        uint64_t v12 = v10 - 1;
        uint64_t v13 = v10 + 254;
        uint64_t v14 = 2 * ((int)v10 - 1);
        uint64_t v15 = v13 / v14;
        do
        {
          if (v8 > (int)v15)
          {
            int v16 = 2 * v9 + 3;
            do
            {
              uint64_t v15 = (v12 - v16 + ((uint64_t)v16 << 8)) / v14;
              ++v9;
              v16 += 2;
            }
            while (v8 > (int)v15);
          }
          v11[v8++] = v9 * v6;
        }
        while (v8 != 256);
        uint64_t v17 = 0;
        char v18 = *v11;
        int v19 = v11 + 256;
        do
        {
          v11[v17 - 1] = v18;
          *v19++ = v11[255];
          --v17;
        }
        while (v17 != -255);
        ++v7;
      }
      while (v7 < *(int *)(a1 + 124));
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = 0;
        int v22 = 0;
        uint64_t v23 = *(int *)(v2 + 4 * v20 + 60);
        v6 /= (int)v23;
        uint64_t v24 = *(void *)(*(void *)(v2 + 48) + 8 * v20);
        uint64_t v25 = v23 - 1;
        uint64_t v26 = v23 + 254;
        uint64_t v27 = 2 * ((int)v23 - 1);
        uint64_t v28 = v26 / v27;
        do
        {
          if (v21 > (int)v28)
          {
            int v29 = 2 * v22 + 3;
            do
            {
              uint64_t v28 = (v25 - v29 + ((uint64_t)v29 << 8)) / v27;
              ++v22;
              v29 += 2;
            }
            while (v21 > (int)v28);
          }
          *(unsigned char *)(v24 + v21++) = v22 * v6;
        }
        while (v21 != 256);
        ++v20;
      }
      while (v20 < *(int *)(a1 + 124));
    }
  }
  return result;
}

uint64_t sub_1003EBDDC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = *(_DWORD *)(result + 116);
    if (v4)
    {
      uint64_t v5 = 0;
      int v6 = *(uint64_t **)(*(void *)(result + 624) + 48);
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      uint64_t v9 = v6[2];
      do
      {
        uint64_t v10 = *(unsigned __int8 **)(a2 + 8 * v5);
        uint64_t v11 = *(unsigned char **)(a3 + 8 * v5);
        int v12 = v4;
        do
        {
          uint64_t result = *(unsigned __int8 *)(v8 + v10[1]);
          *v11++ = result + *(unsigned char *)(v7 + *v10) + *(unsigned char *)(v9 + v10[2]);
          v10 += 3;
          --v12;
        }
        while (v12);
        ++v5;
      }
      while (v5 != a4);
    }
  }
  return result;
}

void sub_1003EBE54(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  if (a4 >= 1)
  {
    size_t v4 = *(unsigned int *)(a1 + 116);
    if (v4)
    {
      uint64_t v5 = a3;
      uint64_t v6 = *(unsigned int *)(a1 + 124);
      uint64_t v7 = a4;
      if ((int)v6 <= 0)
      {
        do
        {
          uint64_t v14 = *v5++;
          bzero(v14, v4);
          --v7;
        }
        while (v7);
      }
      else
      {
        uint64_t v8 = *(void **)(*(void *)(a1 + 624) + 48);
        if (v6 == 1)
        {
          for (uint64_t i = 0; i != a4; ++i)
          {
            uint64_t v10 = *(unsigned __int8 **)(a2 + 8 * i);
            uint64_t v11 = a3[i];
            int v12 = v4;
            do
            {
              char v13 = *(unsigned char *)(*v8 + *v10);
              v10 += v6;
              *v11++ = v13;
              --v12;
            }
            while (v12);
          }
        }
        else
        {
          uint64_t v15 = v6 & 0xFFFFFFFE;
          if (v15 == v6)
          {
            for (uint64_t j = 0; j != a4; ++j)
            {
              uint64_t v17 = *(void *)(a2 + 8 * j);
              char v18 = v5[j];
              int v19 = v4;
              do
              {
                uint64_t v20 = 0;
                char v21 = 0;
                char v22 = 0;
                do
                {
                  uint64_t v23 = &v8[v20];
                  v21 += *(unsigned char *)(*v23 + *(unsigned __int8 *)(v17 + v20));
                  v22 += *(unsigned char *)(v23[1] + *(unsigned __int8 *)(v17 + v20 + 1));
                  v20 += 2;
                }
                while (v15 != v20);
                v17 += v6;
                *v18++ = v22 + v21;
                --v19;
              }
              while (v19);
            }
          }
          else
          {
            for (uint64_t k = 0; k != a4; ++k)
            {
              uint64_t v25 = *(void *)(a2 + 8 * k);
              uint64_t v26 = v5[k];
              int v27 = v4;
              do
              {
                uint64_t v28 = 0;
                char v29 = 0;
                char v30 = 0;
                do
                {
                  int v31 = &v8[v28];
                  v29 += *(unsigned char *)(*v31 + *(unsigned __int8 *)(v25 + v28));
                  v30 += *(unsigned char *)(v31[1] + *(unsigned __int8 *)(v25 + v28 + 1));
                  v28 += 2;
                }
                while (v15 != v28);
                char v32 = v30 + v29;
                uint64_t v33 = v6 & 0xFFFFFFFE;
                do
                {
                  v32 += *(unsigned char *)(v8[v33] + *(unsigned __int8 *)(v25 + v33));
                  ++v33;
                }
                while (v6 != v33);
                v25 += v6;
                *v26++ = v32;
                --v27;
              }
              while (v27);
            }
          }
        }
      }
    }
  }
}

unsigned char *sub_1003EC018(unsigned char *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = *((void *)result + 78);
    int v5 = *((_DWORD *)result + 29);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(uint64_t **)(v4 + 48);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      uint64_t v10 = v7[2];
      uint64_t v11 = a4;
      int v12 = *(_DWORD *)(v4 + 76);
      do
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(unsigned __int8 **)(a2 + 8 * v6);
        uint64_t result = *(unsigned char **)(a3 + 8 * v6);
        uint64_t v15 = (uint64_t)v12 << 6;
        uint64_t v16 = *(void *)(v4 + 80) + v15;
        uint64_t v17 = *(void *)(v4 + 88) + v15;
        uint64_t v18 = *(void *)(v4 + 96) + v15;
        int v19 = v5;
        do
        {
          *result++ = *(unsigned char *)(v9 + *(int *)(v17 + 4 * v13) + (unint64_t)v14[1])
                    + *(unsigned char *)(v8 + *(int *)(v16 + 4 * v13) + (unint64_t)*v14)
                    + *(unsigned char *)(v10 + *(int *)(v18 + 4 * v13) + (unint64_t)v14[2]);
          uint64_t v13 = ((_BYTE)v13 + 1) & 0xF;
          v14 += 3;
          --v19;
        }
        while (v19);
        int v12 = ((_BYTE)v12 + 1) & 0xF;
        *(_DWORD *)(v4 + 76) = v12;
        ++v6;
      }
      while (v6 != v11);
    }
    else
    {
      int v20 = *(_DWORD *)(v4 + 76);
      do
      {
        int v20 = ((_BYTE)v20 + 1) & 0xF;
        --a4;
      }
      while (a4);
      *(_DWORD *)(v4 + 76) = v20;
    }
  }
  return result;
}

void sub_1003EC10C(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 624);
    uint64_t v6 = *(unsigned int *)(a1 + 124);
    size_t v7 = *(unsigned int *)(a1 + 116);
    if ((int)v6 <= 0)
    {
      uint64_t v20 = a4;
      do
      {
        char v21 = *a3++;
        bzero(v21, v7);
        *(_DWORD *)(v5 + 76) = (*(_DWORD *)(v5 + 76) + 1) & 0xF;
        --v20;
      }
      while (v20);
    }
    else
    {
      uint64_t v8 = a4;
      if (v7)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          bzero(a3[i], v7);
          uint64_t v11 = 0;
          uint64_t v12 = *(int *)(v5 + 76);
          do
          {
            uint64_t v13 = 0;
            uint64_t v14 = *(void *)(a2 + 8 * i);
            uint64_t v15 = a3[i];
            uint64_t v16 = *(void *)(*(void *)(v5 + 48) + 8 * v11);
            uint64_t v17 = *(void *)(v5 + 8 * v11 + 80) + (v12 << 6);
            int v18 = v7;
            do
            {
              *v15++ += *(unsigned char *)(v16 + *(int *)(v17 + 4 * v13) + (unint64_t)*(unsigned __int8 *)(v14 + v11));
              uint64_t v13 = ((_BYTE)v13 + 1) & 0xF;
              v14 += (int)v6;
              --v18;
            }
            while (v18);
            ++v11;
          }
          while (v11 != v6);
          *(_DWORD *)(v5 + 76) = ((_BYTE)v12 + 1) & 0xF;
        }
      }
      else
      {
        do
        {
          int v19 = *a3++;
          bzero(v19, v7);
          *(_DWORD *)(v5 + 76) = (*(_DWORD *)(v5 + 76) + 1) & 0xF;
          --v8;
        }
        while (v8);
      }
    }
  }
}

void sub_1003EC260(uint64_t a1, uint64_t a2, void **a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 624);
    uint64_t v6 = *(unsigned int *)(a1 + 124);
    size_t v7 = *(unsigned int *)(a1 + 116);
    if ((int)v6 <= 0)
    {
      uint64_t v27 = a4;
      do
      {
        uint64_t v28 = *a3++;
        bzero(v28, v7);
        *(unsigned char *)(v5 + 144) = *(unsigned char *)(v5 + 144) == 0;
        --v27;
      }
      while (v27);
    }
    else
    {
      uint64_t v50 = a4;
      if (v7)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 408);
        uint64_t v11 = (v7 - 1);
        do
        {
          bzero(a3[v9], v7);
          for (uint64_t i = 0; i != v6; ++i)
          {
            uint64_t v13 = (unsigned __int8 *)(*(void *)(a2 + 8 * v9) + i);
            uint64_t v14 = a3[v9];
            if (*(unsigned char *)(v5 + 144))
            {
              v13 += (v11 * v6);
              v14 += v11;
              uint64_t v15 = *(void *)(v5 + 8 * i + 112) + 2 * (v7 + 1);
              uint64_t v16 = -1;
              int v17 = -(int)v6;
            }
            else
            {
              uint64_t v15 = *(void *)(v5 + 8 * i + 112);
              uint64_t v16 = 1;
              int v17 = v6;
            }
            uint64_t v18 = 0;
            __int16 v19 = 0;
            __int16 v20 = 0;
            int v21 = 0;
            uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * i);
            uint64_t v23 = *(void *)(*(void *)(v5 + 32) + 8 * i);
            int v24 = v7;
            do
            {
              uint64_t v25 = *(unsigned __int8 *)(v10 + *v13 + (uint64_t)((v21 + *(__int16 *)(v15 + 2 * v16 + 2 * v18) + 8) >> 4));
              uint64_t v26 = *(unsigned __int8 *)(v22 + v25);
              v14[v18] += v26;
              LODWORD(v26) = v25 - *(unsigned __int8 *)(v23 + v26);
              *(_WORD *)(v15 + 2 * v18) = 3 * v26 + v19;
              __int16 v19 = 5 * v26 + v20;
              int v21 = 7 * v26;
              v13 += v17;
              v18 += v16;
              __int16 v20 = v26;
              --v24;
            }
            while (v24);
            *(_WORD *)(v15 + 2 * v18) = v19;
          }
          *(unsigned char *)(v5 + 144) = *(unsigned char *)(v5 + 144) == 0;
          ++v9;
        }
        while (v9 != v50);
      }
      else
      {
        uint64_t v29 = v6 & 0xFFFFFFFE;
        if (v6 >= 2)
        {
          for (uint64_t j = 0; j != v50; ++j)
          {
            bzero(a3[j], v7);
            int v36 = *(unsigned __int8 *)(v5 + 144);
            uint64_t v37 = v6 & 0xFFFFFFFE;
            int v38 = (_WORD **)(v5 + 120);
            if (*(unsigned char *)(v5 + 144))
            {
              uint64_t v43 = v6 & 0xFFFFFFFE;
              uint64_t v44 = (uint64_t *)(v5 + 120);
              do
              {
                uint64_t v45 = *v44;
                *(_WORD *)(*(v44 - 1) + 2 * (v7 + 1)) = 0;
                *(_WORD *)(v45 + 2 * (v7 + 1)) = 0;
                v44 += 2;
                v43 -= 2;
              }
              while (v43);
              uint64_t v46 = v6 & 0xFFFFFFFE;
              if (v6 != v29)
              {
                uint64_t v47 = (uint64_t *)(v5 + 112 + 8 * v46);
                uint64_t v48 = v6 - v46;
                do
                {
                  uint64_t v49 = *v47++;
                  *(_WORD *)(v49 + 2 * (v7 + 1)) = 0;
                  --v48;
                }
                while (v48);
              }
            }
            else
            {
              do
              {
                uint64_t v39 = *v38;
                **(v38 - 1) = 0;
                _WORD *v39 = 0;
                v38 += 2;
                v37 -= 2;
              }
              while (v37);
              uint64_t v40 = v6 - v29;
              uint64_t v41 = (_WORD **)(v5 + 112 + ((8 * v6) & 0x7FFFFFFF0));
              if (v6 != v29)
              {
                do
                {
                  uint64_t v42 = *v41++;
                  _WORD *v42 = 0;
                  --v40;
                }
                while (v40);
              }
            }
            *(unsigned char *)(v5 + 144) = v36 == 0;
          }
        }
        else
        {
          for (uint64_t k = 0; k != v50; ++k)
          {
            bzero(a3[k], v7);
            int v31 = *(unsigned __int8 *)(v5 + 144);
            if (*(unsigned char *)(v5 + 144))
            {
              uint64_t v32 = v6;
              uint64_t v33 = (uint64_t *)(v5 + 112);
              do
              {
                uint64_t v34 = *v33++;
                *(_WORD *)(v34 + 2 * (v7 + 1)) = 0;
                --v32;
              }
              while (v32);
            }
            else
            {
              **(_WORD **)(v5 + 112) = 0;
            }
            *(unsigned char *)(v5 + 144) = v31 == 0;
          }
        }
      }
    }
  }
}

uint64_t sub_1003EC5DC(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 624) = v2;
  *(void *)uint64_t v2 = sub_1003ECB64;
  *(void *)(v2 + 24) = sub_1003ECE6C;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 80) = 0;
  if (*(_DWORD *)(a1 + 124) != 3)
  {
    uint64_t v3 = *(void *)a1;
    *(_DWORD *)(v3 + 40) = 48;
    (*(void (**)(uint64_t))v3)(a1);
  }
  *(void *)(v2 + 48) = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
  **(void **)(v2 + 48) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                 + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 40) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 48) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 56) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 64) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 72) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 80) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 88) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 96) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 104) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 112) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 120) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 128) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 136) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 144) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 152) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 160) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 168) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 176) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 184) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 192) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 200) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 208) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 216) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 224) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 232) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 240) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
  *(void *)(*(void *)(v2 + 48) + 248) = result;
  *(unsigned char *)(v2 + 56) = 1;
  if (*(unsigned char *)(a1 + 114))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 108);
    if ((int)v5 >= 8)
    {
      if (v5 < 0x101) {
        goto LABEL_11;
      }
      uint64_t v6 = 0x1000000003BLL;
    }
    else
    {
      uint64_t v6 = 0x80000003ALL;
    }
    *(void *)(*(void *)a1 + 40) = v6;
    (**(void (***)(uint64_t))a1)(a1);
LABEL_11:
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 16))(a1, 1, v5, 3);
    *(void *)(v2 + 32) = result;
    *(_DWORD *)(v2 + 40) = v5;
    if (!*(_DWORD *)(a1 + 100)) {
      return result;
    }
    goto LABEL_12;
  }
  *(void *)(v2 + 32) = 0;
  if (!*(_DWORD *)(a1 + 100)) {
    return result;
  }
LABEL_12:
  *(_DWORD *)(a1 + 100) = 2;
  *(void *)(v2 + 64) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 6 * (*(_DWORD *)(a1 + 116) + 2));

  return sub_1003ECE7C(a1);
}

void sub_1003ECB64(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 624);
  uint64_t v4 = *(void ***)(v3 + 48);
  if (*(_DWORD *)(a1 + 100))
  {
    *(_DWORD *)(a1 + 100) = 2;
    uint64_t v5 = sub_1003ED42C;
    if (a2)
    {
LABEL_3:
      *(void *)(v3 + 8) = sub_1003ECFF0;
      *(void *)(v3 + 16) = sub_1003ED070;
      *(unsigned char *)(v3 + 56) = 1;
LABEL_9:
      bzero(*v4, 0x1000uLL);
      bzero(v4[1], 0x1000uLL);
      bzero(v4[2], 0x1000uLL);
      bzero(v4[3], 0x1000uLL);
      bzero(v4[4], 0x1000uLL);
      bzero(v4[5], 0x1000uLL);
      bzero(v4[6], 0x1000uLL);
      bzero(v4[7], 0x1000uLL);
      bzero(v4[8], 0x1000uLL);
      bzero(v4[9], 0x1000uLL);
      bzero(v4[10], 0x1000uLL);
      bzero(v4[11], 0x1000uLL);
      bzero(v4[12], 0x1000uLL);
      bzero(v4[13], 0x1000uLL);
      bzero(v4[14], 0x1000uLL);
      bzero(v4[15], 0x1000uLL);
      bzero(v4[16], 0x1000uLL);
      bzero(v4[17], 0x1000uLL);
      bzero(v4[18], 0x1000uLL);
      bzero(v4[19], 0x1000uLL);
      bzero(v4[20], 0x1000uLL);
      bzero(v4[21], 0x1000uLL);
      bzero(v4[22], 0x1000uLL);
      bzero(v4[23], 0x1000uLL);
      bzero(v4[24], 0x1000uLL);
      bzero(v4[25], 0x1000uLL);
      bzero(v4[26], 0x1000uLL);
      bzero(v4[27], 0x1000uLL);
      bzero(v4[28], 0x1000uLL);
      bzero(v4[29], 0x1000uLL);
      bzero(v4[30], 0x1000uLL);
      bzero(v4[31], 0x1000uLL);
      *(unsigned char *)(v3 + 56) = 0;
      return;
    }
  }
  else
  {
    uint64_t v5 = sub_1003ED744;
    if (a2) {
      goto LABEL_3;
    }
  }
  *(void *)(v3 + 8) = v5;
  *(void *)(v3 + 16) = nullsub_107;
  int v6 = *(_DWORD *)(a1 + 136);
  if (v6 < 1)
  {
    uint64_t v7 = 0x10000003ALL;
  }
  else
  {
    if (v6 < 0x101)
    {
      if (*(_DWORD *)(a1 + 100) != 2) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
    uint64_t v7 = 0x1000000003BLL;
  }
  *(void *)(*(void *)a1 + 40) = v7;
  (**(void (***)(uint64_t))a1)(a1);
  if (*(_DWORD *)(a1 + 100) != 2)
  {
LABEL_8:
    if (!*(unsigned char *)(v3 + 56)) {
      return;
    }
    goto LABEL_9;
  }
LABEL_14:
  unsigned int v8 = *(_DWORD *)(a1 + 116) + 2;
  size_t v9 = 6 * v8;
  uint64_t v10 = *(void **)(v3 + 64);
  if (v10)
  {
    bzero(v10, 6 * v8);
    if (*(void *)(v3 + 80)) {
      goto LABEL_16;
    }
LABEL_19:
    sub_1003ECE7C(a1);
    *(unsigned char *)(v3 + 72) = 0;
    if (!*(unsigned char *)(v3 + 56)) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(void *)(a1 + 8) + 8))(a1, 1, v9);
  *(void *)(v3 + 64) = v11;
  bzero(v11, v9);
  if (!*(void *)(v3 + 80)) {
    goto LABEL_19;
  }
LABEL_16:
  *(unsigned char *)(v3 + 72) = 0;
  if (*(unsigned char *)(v3 + 56)) {
    goto LABEL_9;
  }
}

uint64_t sub_1003ECE6C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 624) + 56) = 1;
  return result;
}

uint64_t sub_1003ECE7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 624);
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(v1 + 80) = result + 1020;
  *(_OWORD *)(result + 1008) = xmmword_10040D8D0;
  *(_OWORD *)(result + 1024) = xmmword_10040D8E0;
  *(_OWORD *)(result + 1040) = xmmword_10040D900;
  *(_OWORD *)(result + 1056) = xmmword_10040D920;
  *(_OWORD *)(result + 976) = xmmword_10040D910;
  *(_OWORD *)(result + 992) = xmmword_10040D8F0;
  *(_OWORD *)(result + 1072) = xmmword_10040D940;
  *(_OWORD *)(result + 1088) = xmmword_10040D960;
  *(_OWORD *)(result + 944) = xmmword_10040D950;
  *(_OWORD *)(result + 960) = xmmword_10040D930;
  *(_OWORD *)(result + 1104) = xmmword_10040D980;
  *(_OWORD *)(result + 1120) = xmmword_10040D9A0;
  *(_OWORD *)(result + 912) = xmmword_10040D990;
  *(_OWORD *)(result + 928) = xmmword_10040D970;
  *(_OWORD *)(result + 1136) = xmmword_10040D9C0;
  *(_OWORD *)(result + 1152) = xmmword_10040D9E0;
  *(_OWORD *)(result + 880) = xmmword_10040D9D0;
  *(_OWORD *)(result + 896) = xmmword_10040D9B0;
  *(_OWORD *)(result + 1168) = xmmword_10040DA00;
  *(_OWORD *)(result + 1184) = xmmword_10040DA20;
  *(void *)(result + 1200) = 0x1F0000001ELL;
  *(_DWORD *)(result + 1208) = 31;
  uint64_t v3 = 1212;
  uint64_t v4 = 828;
  *(_OWORD *)(result + 848) = xmmword_10040DA10;
  *(_OWORD *)(result + 864) = xmmword_10040D9F0;
  *(_OWORD *)(result + 832) = xmmword_10040DA30;
  do
  {
    *(_DWORD *)(result + v3) = 32;
    *(_DWORD *)(result + v4) = -32;
    v3 += 4;
    v4 -= 4;
  }
  while (v4 != -4);
  return result;
}

uint64_t sub_1003ECFF0(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = *(_DWORD *)(result + 116);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(*(void *)(result + 624) + 48);
      do
      {
        uint64_t v7 = *(unsigned char **)(a2 + 8 * v5);
        int v8 = v4;
        do
        {
          uint64_t v9 = *(void *)(v6 + (*v7 & 0xF8)) + ((16 * v7[1]) & 0xFC0);
          unint64_t v10 = ((unint64_t)v7[2] >> 2) & 0x3E;
          int v11 = *(unsigned __int16 *)(v9 + v10);
          if (((v11 + 1) & 0x10000) == 0) {
            LOWORD(v11) = v11 + 1;
          }
          *(_WORD *)(v9 + v10) = v11;
          v7 += 3;
          --v8;
        }
        while (v8);
        ++v5;
      }
      while (v5 != a4);
    }
  }
  return result;
}

uint64_t sub_1003ED070(uint64_t *a1)
{
  uint64_t v2 = a1[78];
  a1[18] = *(void *)(v2 + 32);
  uint64_t v58 = v2;
  int v3 = *(_DWORD *)(v2 + 40);
  uint64_t v4 = (*(uint64_t (**)(void))a1[1])();
  *(_OWORD *)uint64_t v4 = xmmword_10040DA40;
  *(void *)(v4 + 16) = 0x1F00000000;
  sub_1003ED830(*(void *)(a1[78] + 48), (int *)v4);
  unsigned int v5 = 1;
  if (v3 < 2) {
    goto LABEL_34;
  }
  uint64_t v6 = 1;
  while (1)
  {
    if (v3 >= (unint64_t)(2 * v6))
    {
      uint64_t v9 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = v6;
      uint64_t v28 = v4;
      do
      {
        if (*(void *)(v28 + 32) > v26 && *(uint64_t *)(v28 + 24) > 0)
        {
          uint64_t v26 = *(void *)(v28 + 32);
          uint64_t v9 = (int *)v28;
        }
        v28 += 40;
        --v27;
      }
      while (v27);
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = v6;
      uint64_t v12 = v4;
      do
      {
        if (*(void *)(v12 + 24) > v10)
        {
          uint64_t v10 = *(void *)(v12 + 24);
          uint64_t v9 = (int *)v12;
        }
        v12 += 40;
        --v11;
      }
      while (v11);
    }
    if (!v9) {
      break;
    }
    uint64_t v13 = v4 + 40 * v6;
    *(_DWORD *)(v13 + 20) = v9[5];
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v9;
    int v14 = v9[5];
    *(_DWORD *)(v13 + 16) = v9[4];
    uint64_t v15 = (_DWORD *)(v13 + 16);
    int v17 = *v9;
    int v16 = v9[1];
    int v18 = 16 * (v16 - *v9);
    int v20 = v9[2];
    int v19 = v9[3];
    int v21 = 12 * (v19 - v20);
    int v22 = v9[4];
    BOOL v23 = v18 <= v21;
    if (v18 <= v21) {
      int v18 = 12 * (v19 - v20);
    }
    if (v18 >= 8 * (v14 - v22)) {
      int v24 = v23;
    }
    else {
      int v24 = 2;
    }
    if (v24 == 2)
    {
      int v7 = v22 + v14;
      if (v22 + v14 < 0 != __OFADD__(v22, v14)) {
        ++v7;
      }
      int v8 = v7 >> 1;
      v9[5] = v8;
    }
    else if (v24 == 1)
    {
      uint64_t v15 = (_DWORD *)(v4 + 40 * v6 + 8);
      int v29 = v20 + v19;
      if (v20 + v19 < 0 != __OFADD__(v20, v19)) {
        ++v29;
      }
      int v8 = v29 >> 1;
      v9[3] = v8;
    }
    else
    {
      int v25 = v17 + v16;
      if (v17 + v16 < 0 != __OFADD__(v17, v16)) {
        ++v25;
      }
      int v8 = v25 >> 1;
      v9[1] = v25 >> 1;
      uint64_t v15 = (_DWORD *)(v4 + 40 * v6);
    }
    *uint64_t v15 = v8 + 1;
    sub_1003ED830(*(void *)(a1[78] + 48), v9);
    sub_1003ED830(*(void *)(a1[78] + 48), (int *)(v4 + 40 * v6++));
    if (v6 == v3) {
      goto LABEL_33;
    }
  }
  int v3 = v6;
LABEL_33:
  unsigned int v5 = v3;
  if (v3 >= 1)
  {
LABEL_34:
    uint64_t v30 = 0;
    unsigned int v57 = v5;
    uint64_t v59 = v5;
    do
    {
      int v35 = (int *)(v4 + 40 * v30);
      int v36 = v35[1];
      uint64_t v37 = *v35;
      if ((int)v37 <= v36
        && ((v38 = v35[3], v39 = v35[2], int v40 = v35[5], v41 = *(_DWORD *)(v4 + 40 * v30 + 16), (int)v39 <= v38)
          ? (BOOL v42 = v41 <= v40)
          : (BOOL v42 = 0),
            v42))
      {
        uint64_t v34 = 0;
        uint64_t v33 = 0;
        uint64_t v32 = 0;
        uint64_t v31 = 0;
        int v43 = v38 + 1;
        int v44 = v36 + 1;
        int v45 = v40 - v41 + 1;
        do
        {
          uint64_t v46 = v39;
          do
          {
            int v47 = (8 * v41) | 4;
            int v48 = v45;
            uint64_t v49 = (unsigned __int16 *)(*(void *)(*(void *)(a1[78] + 48) + 8 * v37) + (v46 << 6) + 2 * v41);
            do
            {
              unsigned int v50 = *v49++;
              uint64_t v51 = v31 + v50;
              uint64_t v52 = v32 + (int)v50 * (uint64_t)(int)((8 * v37) | 4);
              uint64_t v53 = v33 + (int)v50 * (uint64_t)(int)((4 * v46) | 2);
              uint64_t v54 = v34 + (int)v50 * (uint64_t)v47;
              if (v50)
              {
                uint64_t v31 = v51;
                uint64_t v32 = v52;
                uint64_t v33 = v53;
                uint64_t v34 = v54;
              }
              v47 += 8;
              --v48;
            }
            while (v48);
            ++v46;
          }
          while (v43 != v46);
          ++v37;
        }
        while (v44 != v37);
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
      }
      *(unsigned char *)(*(void *)a1[18] + v30) = (v32 + (v31 >> 1)) / v31;
      *(unsigned char *)(*(void *)(a1[18] + 8) + v30) = (v33 + (v31 >> 1)) / v31;
      *(unsigned char *)(*(void *)(a1[18] + 16) + v30++) = (v34 + (v31 >> 1)) / v31;
    }
    while (v30 != v59);
    unsigned int v5 = v57;
  }
  *((_DWORD *)a1 + 34) = v5;
  uint64_t v55 = *a1;
  *(_DWORD *)(v55 + 40) = 98;
  *(_DWORD *)(v55 + 44) = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
  *(unsigned char *)(v58 + 56) = 1;
  return result;
}

uint64_t sub_1003ED42C(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = *(void *)(result + 624);
    int v5 = *(_DWORD *)(result + 116);
    int v6 = 3 * v5;
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(v4 + 48);
      uint64_t v9 = *(void *)(result + 408);
      uint64_t v10 = *(void *)(v4 + 80);
      uint64_t v11 = *(uint64_t **)(result + 144);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = v11[2];
      uint64_t v50 = (v5 - 1);
      uint64_t v51 = (v6 + 3);
      uint64_t v49 = (v6 - 3);
      uint64_t v52 = a4;
      uint64_t v54 = *(void *)(result + 624);
      int v53 = *(_DWORD *)(result + 116);
      uint64_t v62 = v9;
      uint64_t v63 = v8;
      uint64_t v60 = *v11;
      uint64_t v61 = v10;
      uint64_t v58 = v14;
      uint64_t v59 = v13;
      do
      {
        uint64_t v15 = *(void *)(a2 + 8 * v7);
        int v16 = *(unsigned char **)(a3 + 8 * v7);
        uint64_t v57 = v7;
        if (*(unsigned char *)(v4 + 72))
        {
          char v17 = 0;
          v15 += v49;
          v16 += v50;
          uint64_t v18 = *(void *)(v4 + 64) + 2 * v51;
          int v19 = -3;
          uint64_t v20 = -1;
        }
        else
        {
          uint64_t v18 = *(void *)(v4 + 64);
          int v19 = 3;
          char v17 = 1;
          uint64_t v20 = 1;
        }
        int v21 = 0;
        __int16 v22 = 0;
        __int16 v23 = 0;
        __int16 v24 = 0;
        __int16 v25 = 0;
        __int16 v26 = 0;
        int v27 = 0;
        int v28 = 0;
        *(unsigned char *)(v4 + 72) = v17;
        __int16 v29 = 0;
        uint64_t v67 = v19;
        uint64_t v66 = v19;
        uint64_t v30 = (_WORD *)(v18 + 2);
        uint64_t v31 = (unsigned __int8 *)(v15 + 2);
        uint64_t v64 = v20;
        do
        {
          __int16 v68 = v26;
          __int16 v69 = v25;
          __int16 v70 = v24;
          __int16 v71 = v23;
          __int16 v72 = v22;
          int v38 = &v30[v66];
          unint64_t v39 = *(unsigned __int8 *)(v9
                                   + *(int *)(v10 + 4 * ((v21 + (__int16)v30[v66 - 1] + 8) >> 4))
                                   + (unint64_t)*(v31 - 2));
          unint64_t v40 = *(unsigned __int8 *)(v9
                                   + *(int *)(v10 + 4 * ((v28 + (__int16)v30[v66] + 8) >> 4))
                                   + (unint64_t)*(v31 - 1));
          unint64_t v41 = *(unsigned __int8 *)(v9
                                   + *(int *)(v10 + 4 * ((v27 + (__int16)v30[v66 + 1] + 8) >> 4))
                                   + (unint64_t)*v31);
          BOOL v42 = (_WORD *)(*(void *)(v8 + 8 * (v39 >> 3)) + (v40 >> 2 << 6) + 2 * (v41 >> 3));
          unsigned int v43 = (unsigned __int16)*v42;
          if (!*v42)
          {
            uint64_t v44 = result;
            __int16 v65 = v29;
            sub_1003EDDA0(result, v39 >> 3, v40 >> 2, v41 >> 3);
            __int16 v29 = v65;
            uint64_t v8 = v63;
            uint64_t v20 = v64;
            uint64_t v13 = v59;
            uint64_t v12 = v60;
            uint64_t v10 = v61;
            uint64_t v9 = v62;
            uint64_t result = v44;
            uint64_t v14 = v58;
            unsigned int v43 = (unsigned __int16)*v42;
          }
          uint64_t v32 = v43 - 1;
          *int v16 = v32;
          int v33 = v39 - *(unsigned __int8 *)(v12 + v32);
          int v34 = v40 - *(unsigned __int8 *)(v13 + v32);
          int v35 = v41 - *(unsigned __int8 *)(v14 + v32);
          __int16 v24 = 5 * v33 + v29;
          __int16 v36 = 3 * (v40 - *(unsigned __int8 *)(v13 + v32)) + v71;
          __int16 v23 = 5 * v34 + v68;
          __int16 v37 = 3 * (v41 - *(unsigned __int8 *)(v14 + v32)) + v72;
          int v21 = 7 * v33;
          __int16 v22 = 5 * v35 + v69;
          int v28 = 7 * v34;
          *(v30 - 1) = 3 * (v39 - *(unsigned __int8 *)(v12 + v32)) + v70;
          *uint64_t v30 = v36;
          int v27 = 7 * v35;
          v16 += v20;
          v31 += v67;
          v30[1] = v37;
          uint64_t v30 = (_WORD *)((char *)v30 + v66 * 2);
          __int16 v25 = v35;
          __int16 v26 = v34;
          __int16 v29 = v33;
          --v5;
        }
        while (v5);
        *(v38 - 1) = v24;
        _WORD *v38 = v23;
        v38[1] = v22;
        uint64_t v7 = v57 + 1;
        uint64_t v4 = v54;
        int v5 = v53;
      }
      while (v57 + 1 != v52);
    }
    else
    {
      char v45 = *(unsigned char *)(v4 + 72);
      uint64_t v46 = *(void *)(v4 + 64);
      do
      {
        char v45 = v45 == 0;
        if (v45) {
          uint64_t v47 = 0;
        }
        else {
          uint64_t v47 = (3 * v5 + 3);
        }
        uint64_t v48 = v46 + 2 * v47;
        *(_DWORD *)uint64_t v48 = 0;
        *(_WORD *)(v48 + 4) = 0;
        --a4;
      }
      while (a4);
      *(unsigned char *)(v4 + 72) = v45;
    }
  }
  return result;
}

unsigned char *sub_1003ED744(unsigned char *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = (uint64_t)result;
    int v5 = *((_DWORD *)result + 29);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(*((void *)result + 78) + 48);
      uint64_t v9 = a4;
      do
      {
        uint64_t v10 = *(unsigned __int8 **)(a2 + 8 * v7);
        uint64_t v11 = *(unsigned char **)(a3 + 8 * v7);
        int v12 = v5;
        do
        {
          unint64_t v13 = (unint64_t)*v10 >> 3;
          unint64_t v14 = (unint64_t)v10[1] >> 2;
          unint64_t v15 = (unint64_t)v10[2] >> 3;
          int v16 = (__int16 *)(*(void *)(v8 + 8 * v13) + (v14 << 6) + 2 * v15);
          __int16 v17 = *v16;
          if (!*v16)
          {
            uint64_t result = sub_1003EDDA0(v4, v13, v14, v15);
            LOBYTE(v17) = *(unsigned char *)v16;
          }
          *v11++ = v17 - 1;
          v10 += 3;
          --v12;
        }
        while (v12);
        ++v7;
      }
      while (v7 != v9);
    }
  }
  return result;
}

uint64_t sub_1003ED830(uint64_t result, int *a2)
{
  LODWORD(v3) = *a2;
  int v2 = a2[1];
  int v4 = a2[2];
  int v5 = a2[3];
  uint64_t v6 = v4;
  int v7 = a2[4];
  int v8 = a2[5];
  uint64_t v9 = v7;
  BOOL v10 = v2 > *a2 && v4 <= v5;
  if (v10 && v7 <= v8)
  {
    uint64_t v12 = (int)v3;
    if (v2 <= (int)v3) {
      int v13 = *a2;
    }
    else {
      int v13 = a2[1];
    }
    int v14 = v13 + 1;
    do
    {
      uint64_t v15 = v4;
      while (2)
      {
        int v16 = (_WORD *)(*(void *)(result + 8 * v12) + (v15 << 6) + 2 * v7);
        int v17 = v8 - v7 + 1;
        do
        {
          if (*v16)
          {
            *a2 = v12;
            LODWORD(v3) = v12;
            goto LABEL_21;
          }
          ++v16;
          --v17;
        }
        while (v17);
        if (v5 + 1 != ++v15) {
          continue;
        }
        break;
      }
      ++v12;
    }
    while (v14 != v12);
  }
LABEL_21:
  if (v2 > (int)v3 && v4 <= v5 && v7 <= v8)
  {
    uint64_t v20 = v2;
    do
    {
      uint64_t v21 = v4;
      while (2)
      {
        __int16 v22 = (_WORD *)(*(void *)(result + 8 * v20) + (v21 << 6) + 2 * v7);
        int v23 = v8 - v7 + 1;
        do
        {
          if (*v22)
          {
            a2[1] = v20;
            int v2 = v20;
            goto LABEL_39;
          }
          ++v22;
          --v23;
        }
        while (v23);
        if (v5 + 1 != ++v21) {
          continue;
        }
        break;
      }
      BOOL v10 = v20-- <= (int)v3;
    }
    while (!v10);
  }
LABEL_39:
  if (v5 > v4 && v2 >= (int)v3 && v7 <= v8)
  {
    if (v4 <= v5) {
      int v24 = v5;
    }
    else {
      int v24 = v4;
    }
    int v25 = v24 + 1;
    do
    {
      uint64_t v26 = (int)v3;
      while (2)
      {
        int v27 = (_WORD *)(*(void *)(result + 8 * v26) + (v6 << 6) + 2 * v7);
        int v28 = v8 - v7 + 1;
        do
        {
          if (*v27)
          {
            a2[2] = v6;
            int v4 = v6;
            goto LABEL_54;
          }
          ++v27;
          --v28;
        }
        while (v28);
        if (v2 + 1 != ++v26) {
          continue;
        }
        break;
      }
      ++v6;
    }
    while (v25 != v6);
  }
LABEL_54:
  if (v5 > v4 && v2 >= (int)v3 && v7 <= v8)
  {
    uint64_t v29 = v5;
    do
    {
      uint64_t v30 = (int)v3;
      while (2)
      {
        uint64_t v31 = (_WORD *)(*(void *)(result + 8 * v30) + (v29 << 6) + 2 * v7);
        int v32 = v8 - v7 + 1;
        do
        {
          if (*v31)
          {
            a2[3] = v29;
            int v5 = v29;
            goto LABEL_67;
          }
          ++v31;
          --v32;
        }
        while (v32);
        if (v2 + 1 != ++v30) {
          continue;
        }
        break;
      }
      BOOL v10 = v29-- <= v4;
    }
    while (!v10);
  }
LABEL_67:
  if (v8 > v7 && v2 >= (int)v3 && v5 >= v4)
  {
    if (v7 <= v8) {
      int v33 = v8;
    }
    else {
      int v33 = v7;
    }
    int v34 = v33 + 1;
    do
    {
      uint64_t v35 = (int)v3;
      while (2)
      {
        __int16 v36 = (_WORD *)(*(void *)(result + 8 * v35) + ((uint64_t)v4 << 6) + 2 * v9);
        int v37 = v5 - v4 + 1;
        do
        {
          if (*v36)
          {
            a2[4] = v9;
            int v7 = v9;
            goto LABEL_82;
          }
          v36 += 32;
          --v37;
        }
        while (v37);
        if (v2 + 1 != ++v35) {
          continue;
        }
        break;
      }
      ++v9;
    }
    while (v34 != v9);
  }
LABEL_82:
  if (v8 > v7 && v2 >= (int)v3 && v5 >= v4)
  {
    uint64_t v38 = v8;
    do
    {
      uint64_t v39 = (int)v3;
      while (2)
      {
        unint64_t v40 = (_WORD *)(*(void *)(result + 8 * v39) + ((uint64_t)v4 << 6) + 2 * v38);
        int v41 = v5 - v4 + 1;
        do
        {
          if (*v40)
          {
            a2[5] = v38;
            int v8 = v38;
            goto LABEL_95;
          }
          v40 += 32;
          --v41;
        }
        while (v41);
        if (v2 + 1 != ++v39) {
          continue;
        }
        break;
      }
      BOOL v10 = v38-- <= v7;
    }
    while (!v10);
  }
LABEL_95:
  uint64_t v42 = (v8 - v7);
  *((void *)a2 + 3) = 12 * (v5 - v4) * (uint64_t)(12 * (v5 - v4))
                      + 16 * (v2 - (int)v3) * (uint64_t)(16 * (v2 - (int)v3))
                      + 8 * (int)v42 * (uint64_t)(8 * (int)v42);
  if (v2 < (int)v3)
  {
    uint64_t v43 = 0;
LABEL_97:
    *((void *)a2 + 4) = v43;
    return result;
  }
  if (v5 >= v4)
  {
    int v44 = v8 - v7;
    if (v8 >= v7)
    {
      int v46 = v5 + 1;
      uint64_t v3 = (int)v3;
      int v47 = v2 + 1;
      if (v42 >= 0xF)
      {
        uint64_t v43 = 0;
        uint64_t v53 = v42 + 1;
        uint64_t v54 = (v42 + 1) & 0x1FFFFFFF0;
        int v55 = v44 - v54 + 1;
        int8x16_t v56 = (int8x16_t)vdupq_n_s64(1uLL);
        do
        {
          uint64_t v57 = *(void *)(result + 8 * v3);
          uint64_t v58 = (int16x8_t *)(v57 + ((uint64_t)v4 << 6) + 2 * v7 + 16);
          uint64_t v59 = v4;
          do
          {
            int64x2_t v60 = 0uLL;
            int64x2_t v61 = (int64x2_t)(unint64_t)v43;
            uint64_t v62 = (unsigned __int16 *)(v57 + (v59 << 6) + 2 * v7 + 2 * v54);
            uint64_t v63 = v54;
            uint64_t v64 = v58;
            int64x2_t v65 = 0uLL;
            int64x2_t v66 = 0uLL;
            int64x2_t v67 = 0uLL;
            int64x2_t v68 = 0uLL;
            int64x2_t v69 = 0uLL;
            int64x2_t v70 = 0uLL;
            do
            {
              uint16x8_t v71 = (uint16x8_t)vtstq_s16(v64[-1], v64[-1]);
              uint32x4_t v72 = vmovl_u16(*(uint16x4_t *)v71.i8);
              v73.i64[0] = v72.u32[0];
              v73.i64[1] = v72.u32[1];
              int64x2_t v74 = (int64x2_t)vandq_s8(v73, v56);
              v73.i64[0] = v72.u32[2];
              v73.i64[1] = v72.u32[3];
              int64x2_t v75 = (int64x2_t)vandq_s8(v73, v56);
              uint32x4_t v76 = vmovl_high_u16(v71);
              v73.i64[0] = v76.u32[0];
              v73.i64[1] = v76.u32[1];
              int64x2_t v77 = (int64x2_t)vandq_s8(v73, v56);
              v73.i64[0] = v76.u32[2];
              v73.i64[1] = v76.u32[3];
              int64x2_t v78 = (int64x2_t)vandq_s8(v73, v56);
              uint16x8_t v79 = (uint16x8_t)vtstq_s16(*v64, *v64);
              uint32x4_t v80 = vmovl_u16(*(uint16x4_t *)v79.i8);
              v73.i64[0] = v80.u32[0];
              v73.i64[1] = v80.u32[1];
              int64x2_t v81 = (int64x2_t)vandq_s8(v73, v56);
              v73.i64[0] = v80.u32[2];
              v73.i64[1] = v80.u32[3];
              int64x2_t v82 = (int64x2_t)vandq_s8(v73, v56);
              uint32x4_t v83 = vmovl_high_u16(v79);
              v73.i64[0] = v83.u32[0];
              v73.i64[1] = v83.u32[1];
              int64x2_t v84 = (int64x2_t)vandq_s8(v73, v56);
              v73.i64[0] = v83.u32[2];
              v73.i64[1] = v83.u32[3];
              int64x2_t v66 = vaddq_s64(v66, v78);
              int64x2_t v65 = vaddq_s64(v65, v77);
              int64x2_t v60 = vaddq_s64(v60, v75);
              int64x2_t v61 = vaddq_s64(v61, v74);
              int64x2_t v70 = vaddq_s64(v70, (int64x2_t)vandq_s8(v73, v56));
              int64x2_t v69 = vaddq_s64(v69, v84);
              int64x2_t v68 = vaddq_s64(v68, v82);
              int64x2_t v67 = vaddq_s64(v67, v81);
              v64 += 2;
              v63 -= 16;
            }
            while (v63);
            uint64_t v43 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v67, v61), vaddq_s64(v69, v65)), vaddq_s64(vaddq_s64(v68, v60), vaddq_s64(v70, v66))));
            if (v53 != v54)
            {
              int v85 = v55;
              do
              {
                if (*v62++) {
                  ++v43;
                }
                --v85;
              }
              while (v85);
            }
            ++v59;
            v58 += 4;
          }
          while (v46 != v59);
          ++v3;
        }
        while (v47 != v3);
      }
      else
      {
        uint64_t v43 = 0;
        int v48 = v44 + 1;
        do
        {
          uint64_t v49 = v4;
          do
          {
            uint64_t v50 = (unsigned __int16 *)(*(void *)(result + 8 * v3) + (v49 << 6) + 2 * v7);
            int v51 = v48;
            do
            {
              if (*v50++) {
                ++v43;
              }
              --v51;
            }
            while (v51);
            ++v49;
          }
          while (v46 != v49);
          ++v3;
        }
        while (v47 != v3);
      }
      goto LABEL_97;
    }
    int v45 = v2 - v3 + 1;
    do
      --v45;
    while (v45);
    *((void *)a2 + 4) = 0;
  }
  else
  {
    *((void *)a2 + 4) = 0;
  }
  return result;
}

unsigned char *sub_1003EDDA0(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v117 = *(void *)(*(void *)(a1 + 624) + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 136);
  if ((int)v4 <= 0) {
    goto LABEL_102;
  }
  uint64_t v5 = 0;
  int v6 = (32 * (a2 >> 2)) | 4;
  uint64_t v7 = 4 * a3;
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFE0 | 2;
  uint64_t v9 = 8 * a4;
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFE0 | 4;
  int v11 = (8 * a2) | 0x1C;
  uint64_t v12 = v7 | 0x1E;
  unsigned int v13 = (v8 + (v7 | 0x1E)) >> 1;
  uint64_t v14 = v9 | 0x1C;
  uint64_t v15 = *(uint64_t **)(a1 + 144);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = v15[2];
  uint64_t v19 = 0x7FFFFFFFLL;
  do
  {
    signed int v40 = *(unsigned __int8 *)(v16 + v5);
    int v21 = v40 - v6;
    if (v40 < v6)
    {
      uint64_t v20 = 2 * v21 * (uint64_t)(2 * v21);
      int v21 = v40 - v11;
LABEL_4:
      int v22 = 2 * v21;
      goto LABEL_5;
    }
    int v41 = v40 - v11;
    if (v40 > v11)
    {
      uint64_t v20 = 2 * v41 * (uint64_t)(2 * v41);
      goto LABEL_4;
    }
    if ((v6 + v11) >> 1 < v40)
    {
      uint64_t v20 = 0;
      goto LABEL_4;
    }
    uint64_t v20 = 0;
    int v22 = 2 * v41;
LABEL_5:
    uint64_t v23 = v22 * (uint64_t)v22;
    uint64_t v24 = *(unsigned __int8 *)(v17 + v5);
    uint64_t v25 = 3 * (v24 - (int)v8) * 3 * (v24 - (int)v8);
    uint64_t v26 = 3 * (v24 - (int)v12);
    uint64_t v27 = v26 * v26;
    if (v13 < v24) {
      uint64_t v27 = 3 * (v24 - (int)v8) * 3 * (v24 - (int)v8);
    }
    uint64_t v28 = v20 + v26 * v26;
    if ((int)v24 <= (int)v12)
    {
      uint64_t v28 = v20;
      uint64_t v25 = v27;
    }
    unint64_t v29 = v20 + 3 * (v24 - v8) * 3 * (v24 - v8);
    if ((int)v24 < (int)v8)
    {
      uint64_t v30 = 3 * (v24 - v12) * 3 * (v24 - v12);
    }
    else
    {
      unint64_t v29 = v28;
      uint64_t v30 = v25;
    }
    uint64_t v31 = v30 + v23;
    uint64_t v32 = *(unsigned __int8 *)(v18 + v5);
    uint64_t v33 = (v32 - (int)v10) * (v32 - (int)v10);
    uint64_t v34 = v32 - (int)v14;
    uint64_t v35 = v34 * v34;
    if ((v10 + v14) >> 1 < v32) {
      uint64_t v35 = (v32 - (int)v10) * (v32 - (int)v10);
    }
    unint64_t v36 = v29 + v34 * v34;
    if ((int)v32 <= (int)v14)
    {
      unint64_t v36 = v29;
      uint64_t v33 = v35;
    }
    unint64_t v37 = v29 + (v32 - v10) * (v32 - v10);
    if ((int)v32 < (int)v10)
    {
      uint64_t v38 = (v32 - v14) * (v32 - v14);
    }
    else
    {
      unint64_t v37 = v36;
      uint64_t v38 = v33;
    }
    uint64_t v39 = v31 + v38;
    __b[v5] = v37;
    if (v39 < v19) {
      uint64_t v19 = v39;
    }
    ++v5;
  }
  while (v4 != v5);
  uint64_t v42 = 0;
  int v43 = 0;
  do
  {
    if (__b[v42] <= v19) {
      v119[v43++ + 113] = v42;
    }
    ++v42;
  }
  while (v4 != v42);
  memset_pattern16(__b, &unk_10040DA50, 0x400uLL);
  if (v43 >= 1)
  {
    uint64_t v44 = 0;
    uint64_t v45 = (int)v8;
    uint64_t v46 = (int)v10;
    uint64_t v47 = v43;
    do
    {
      uint64_t v48 = 0;
      uint64_t v49 = v119[v44 + 113];
      int v50 = 2 * (v6 - *(unsigned __int8 *)(*v15 + v49));
      uint64_t v51 = v45 - *(unsigned __int8 *)(v17 + v49);
      uint64_t v52 = v46 - *(unsigned __int8 *)(v18 + v49);
      uint64_t v53 = 3 * v51 * 3 * v51 + v50 * (uint64_t)v50 + v52 * v52;
      uint64_t v54 = 32 * v50 + 256;
      uint64_t v55 = 72 * v51;
      uint64_t v56 = 72 * v51 + 144;
      uint64_t v57 = 16 * v52;
      uint64_t v58 = 16 * v52 + 64;
      uint64_t v59 = v57 + 192;
      uint64_t v60 = v57 + 320;
      uint64_t v61 = v55 + 432;
      uint64_t v62 = v55 + 720;
      uint64_t v63 = v55 + 1008;
      uint64_t v64 = v55 + 1296;
      uint64_t v65 = v55 + 1584;
      uint64_t v66 = v55 + 1872;
      int64x2_t v67 = v119;
      int64x2_t v68 = &v121;
      do
      {
        if (v53 < *(v68 - 16))
        {
          *(v68 - 16) = v53;
          *(v67 - 15) = v49;
          uint64_t v69 = v53 + v58;
          if (v53 + v58 >= *(v68 - 15))
          {
LABEL_39:
            uint64_t v70 = v69 + v59;
            if (v70 >= *(v68 - 14)) {
              goto LABEL_40;
            }
            goto LABEL_72;
          }
        }
        else
        {
          uint64_t v69 = v53 + v58;
          if (v53 + v58 >= *(v68 - 15)) {
            goto LABEL_39;
          }
        }
        *(v68 - 15) = v69;
        *(v67 - 14) = v49;
        uint64_t v70 = v69 + v59;
        if (v70 >= *(v68 - 14))
        {
LABEL_40:
          uint64_t v71 = v70 + v60;
          if (v71 >= *(v68 - 13)) {
            goto LABEL_41;
          }
          goto LABEL_73;
        }
LABEL_72:
        *(v68 - 14) = v70;
        *(v67 - 13) = v49;
        uint64_t v71 = v70 + v60;
        if (v71 >= *(v68 - 13))
        {
LABEL_41:
          uint64_t v72 = v56 + v53;
          if (v56 + v53 >= *(v68 - 12)) {
            goto LABEL_42;
          }
          goto LABEL_74;
        }
LABEL_73:
        *(v68 - 13) = v71;
        *(v67 - 12) = v49;
        uint64_t v72 = v56 + v53;
        if (v56 + v53 >= *(v68 - 12))
        {
LABEL_42:
          uint64_t v73 = v72 + v58;
          if (v72 + v58 >= *(v68 - 11)) {
            goto LABEL_43;
          }
          goto LABEL_75;
        }
LABEL_74:
        *(v68 - 12) = v72;
        *(v67 - 11) = v49;
        uint64_t v73 = v72 + v58;
        if (v72 + v58 >= *(v68 - 11))
        {
LABEL_43:
          uint64_t v74 = v73 + v59;
          if (v74 >= *(v68 - 10)) {
            goto LABEL_44;
          }
          goto LABEL_76;
        }
LABEL_75:
        *(v68 - 11) = v73;
        *(v67 - 10) = v49;
        uint64_t v74 = v73 + v59;
        if (v74 >= *(v68 - 10))
        {
LABEL_44:
          uint64_t v75 = v74 + v60;
          if (v75 >= *(v68 - 9)) {
            goto LABEL_45;
          }
          goto LABEL_77;
        }
LABEL_76:
        *(v68 - 10) = v74;
        *(v67 - 9) = v49;
        uint64_t v75 = v74 + v60;
        if (v75 >= *(v68 - 9))
        {
LABEL_45:
          uint64_t v76 = v61 + v72;
          if (v76 >= *(v68 - 8)) {
            goto LABEL_46;
          }
          goto LABEL_78;
        }
LABEL_77:
        *(v68 - 9) = v75;
        *(v67 - 8) = v49;
        uint64_t v76 = v61 + v72;
        if (v76 >= *(v68 - 8))
        {
LABEL_46:
          uint64_t v77 = v76 + v58;
          if (v76 + v58 >= *(v68 - 7)) {
            goto LABEL_47;
          }
          goto LABEL_79;
        }
LABEL_78:
        *(v68 - 8) = v76;
        *(v67 - 7) = v49;
        uint64_t v77 = v76 + v58;
        if (v76 + v58 >= *(v68 - 7))
        {
LABEL_47:
          uint64_t v78 = v77 + v59;
          if (v78 >= *(v68 - 6)) {
            goto LABEL_48;
          }
          goto LABEL_80;
        }
LABEL_79:
        *(v68 - 7) = v77;
        *(v67 - 6) = v49;
        uint64_t v78 = v77 + v59;
        if (v78 >= *(v68 - 6))
        {
LABEL_48:
          uint64_t v79 = v78 + v60;
          if (v79 >= *(v68 - 5)) {
            goto LABEL_49;
          }
          goto LABEL_81;
        }
LABEL_80:
        *(v68 - 6) = v78;
        *(v67 - 5) = v49;
        uint64_t v79 = v78 + v60;
        if (v79 >= *(v68 - 5))
        {
LABEL_49:
          uint64_t v80 = v62 + v76;
          if (v80 >= *(v68 - 4)) {
            goto LABEL_50;
          }
          goto LABEL_82;
        }
LABEL_81:
        *(v68 - 5) = v79;
        *(v67 - 4) = v49;
        uint64_t v80 = v62 + v76;
        if (v80 >= *(v68 - 4))
        {
LABEL_50:
          uint64_t v81 = v80 + v58;
          if (v80 + v58 >= *(v68 - 3)) {
            goto LABEL_51;
          }
          goto LABEL_83;
        }
LABEL_82:
        *(v68 - 4) = v80;
        *(v67 - 3) = v49;
        uint64_t v81 = v80 + v58;
        if (v80 + v58 >= *(v68 - 3))
        {
LABEL_51:
          uint64_t v82 = v81 + v59;
          if (v82 >= *(v68 - 2)) {
            goto LABEL_52;
          }
          goto LABEL_84;
        }
LABEL_83:
        *(v68 - 3) = v81;
        *(v67 - 2) = v49;
        uint64_t v82 = v81 + v59;
        if (v82 >= *(v68 - 2))
        {
LABEL_52:
          uint64_t v83 = v82 + v60;
          if (v83 >= *(v68 - 1)) {
            goto LABEL_53;
          }
          goto LABEL_85;
        }
LABEL_84:
        *(v68 - 2) = v82;
        *(v67 - 1) = v49;
        uint64_t v83 = v82 + v60;
        if (v83 >= *(v68 - 1))
        {
LABEL_53:
          uint64_t v84 = v63 + v80;
          if (v84 >= *v68) {
            goto LABEL_54;
          }
          goto LABEL_86;
        }
LABEL_85:
        *(v68 - 1) = v83;
        *int64x2_t v67 = v49;
        uint64_t v84 = v63 + v80;
        if (v84 >= *v68)
        {
LABEL_54:
          uint64_t v85 = v84 + v58;
          if (v84 + v58 >= v68[1]) {
            goto LABEL_55;
          }
          goto LABEL_87;
        }
LABEL_86:
        *int64x2_t v68 = v84;
        v67[1] = v49;
        uint64_t v85 = v84 + v58;
        if (v84 + v58 >= v68[1])
        {
LABEL_55:
          uint64_t v86 = v85 + v59;
          if (v86 >= v68[2]) {
            goto LABEL_56;
          }
          goto LABEL_88;
        }
LABEL_87:
        v68[1] = v85;
        v67[2] = v49;
        uint64_t v86 = v85 + v59;
        if (v86 >= v68[2])
        {
LABEL_56:
          uint64_t v87 = v86 + v60;
          if (v87 >= v68[3]) {
            goto LABEL_57;
          }
          goto LABEL_89;
        }
LABEL_88:
        v68[2] = v86;
        v67[3] = v49;
        uint64_t v87 = v86 + v60;
        if (v87 >= v68[3])
        {
LABEL_57:
          uint64_t v88 = v64 + v84;
          if (v88 >= v68[4]) {
            goto LABEL_58;
          }
          goto LABEL_90;
        }
LABEL_89:
        v68[3] = v87;
        v67[4] = v49;
        uint64_t v88 = v64 + v84;
        if (v88 >= v68[4])
        {
LABEL_58:
          uint64_t v89 = v88 + v58;
          if (v88 + v58 >= v68[5]) {
            goto LABEL_59;
          }
          goto LABEL_91;
        }
LABEL_90:
        v68[4] = v88;
        v67[5] = v49;
        uint64_t v89 = v88 + v58;
        if (v88 + v58 >= v68[5])
        {
LABEL_59:
          uint64_t v90 = v89 + v59;
          if (v90 >= v68[6]) {
            goto LABEL_60;
          }
          goto LABEL_92;
        }
LABEL_91:
        v68[5] = v89;
        v67[6] = v49;
        uint64_t v90 = v89 + v59;
        if (v90 >= v68[6])
        {
LABEL_60:
          uint64_t v91 = v90 + v60;
          if (v91 >= v68[7]) {
            goto LABEL_61;
          }
          goto LABEL_93;
        }
LABEL_92:
        v68[6] = v90;
        v67[7] = v49;
        uint64_t v91 = v90 + v60;
        if (v91 >= v68[7])
        {
LABEL_61:
          uint64_t v92 = v65 + v88;
          if (v92 >= v68[8]) {
            goto LABEL_62;
          }
          goto LABEL_94;
        }
LABEL_93:
        v68[7] = v91;
        v67[8] = v49;
        uint64_t v92 = v65 + v88;
        if (v92 >= v68[8])
        {
LABEL_62:
          uint64_t v93 = v92 + v58;
          if (v92 + v58 >= v68[9]) {
            goto LABEL_63;
          }
          goto LABEL_95;
        }
LABEL_94:
        v68[8] = v92;
        v67[9] = v49;
        uint64_t v93 = v92 + v58;
        if (v92 + v58 >= v68[9])
        {
LABEL_63:
          uint64_t v94 = v93 + v59;
          if (v94 >= v68[10]) {
            goto LABEL_64;
          }
          goto LABEL_96;
        }
LABEL_95:
        v68[9] = v93;
        v67[10] = v49;
        uint64_t v94 = v93 + v59;
        if (v94 >= v68[10])
        {
LABEL_64:
          uint64_t v95 = v94 + v60;
          if (v95 >= v68[11]) {
            goto LABEL_65;
          }
          goto LABEL_97;
        }
LABEL_96:
        v68[10] = v94;
        v67[11] = v49;
        uint64_t v95 = v94 + v60;
        if (v95 >= v68[11])
        {
LABEL_65:
          uint64_t v96 = v66 + v92;
          if (v96 >= v68[12]) {
            goto LABEL_66;
          }
          goto LABEL_98;
        }
LABEL_97:
        v68[11] = v95;
        v67[12] = v49;
        uint64_t v96 = v66 + v92;
        if (v96 >= v68[12])
        {
LABEL_66:
          uint64_t v97 = v96 + v58;
          if (v97 >= v68[13]) {
            goto LABEL_67;
          }
          goto LABEL_99;
        }
LABEL_98:
        v68[12] = v96;
        v67[13] = v49;
        uint64_t v97 = v96 + v58;
        if (v97 >= v68[13])
        {
LABEL_67:
          uint64_t v98 = v97 + v59;
          if (v98 < v68[14]) {
            goto LABEL_100;
          }
          goto LABEL_68;
        }
LABEL_99:
        v68[13] = v97;
        v67[14] = v49;
        uint64_t v98 = v97 + v59;
        if (v98 < v68[14])
        {
LABEL_100:
          v68[14] = v98;
          v67[15] = v49;
          uint64_t v99 = v98 + v60;
          if (v99 >= v68[15]) {
            goto LABEL_36;
          }
          goto LABEL_101;
        }
LABEL_68:
        uint64_t v99 = v98 + v60;
        if (v99 >= v68[15]) {
          goto LABEL_36;
        }
LABEL_101:
        v68[15] = v99;
        v67[16] = v49;
LABEL_36:
        v53 += v54 + v48;
        v48 += 512;
        v68 += 32;
        v67 += 32;
      }
      while (v48 != 2048);
      ++v44;
    }
    while (v44 != v47);
  }
LABEL_102:
  uint64_t v100 = 0;
  unint64_t v101 = a3 & 0xFFFFFFFFFFFFFFF8;
  int v102 = (uint64_t *)(v117 + 8 * (int)(a2 & 0xFFFFFFFC));
  uint64_t result = v118;
  uint64_t v104 = 2 * (a4 & 0xFFFFFFFC);
  do
  {
    uint64_t v105 = *v102++;
    int v106 = (_WORD *)(v105 + (v101 << 6) + v104);
    *int v106 = v118[v100] + 1;
    v106[1] = v118[v100 + 1] + 1;
    v106[2] = v118[v100 + 2] + 1;
    v106[3] = v118[v100 + 3] + 1;
    int v107 = (_WORD *)(v105 + ((v101 | 1) << 6) + v104);
    _WORD *v107 = v118[v100 + 4] + 1;
    v107[1] = v118[v100 + 5] + 1;
    v107[2] = v118[v100 + 6] + 1;
    v107[3] = v118[v100 + 7] + 1;
    int v108 = (_WORD *)(v105 + ((v101 | 2) << 6) + v104);
    *int v108 = v118[v100 + 8] + 1;
    v108[1] = v118[v100 + 9] + 1;
    v108[2] = v118[v100 + 10] + 1;
    v108[3] = v118[v100 + 11] + 1;
    int v109 = (_WORD *)(v105 + ((v101 | 3) << 6) + v104);
    *int v109 = v118[v100 + 12] + 1;
    v109[1] = v118[v100 + 13] + 1;
    v109[2] = v118[v100 + 14] + 1;
    v109[3] = v118[v100 + 15] + 1;
    int v110 = (_WORD *)(v105 + ((v101 | 4) << 6) + v104);
    _WORD *v110 = v119[v100 + 1] + 1;
    v110[1] = v119[v100 + 2] + 1;
    v110[2] = v119[v100 + 3] + 1;
    v110[3] = v119[v100 + 4] + 1;
    int v111 = (_WORD *)(v105 + ((v101 | 5) << 6) + v104);
    *int v111 = v119[v100 + 5] + 1;
    v111[1] = v119[v100 + 6] + 1;
    v111[2] = v119[v100 + 7] + 1;
    v111[3] = v119[v100 + 8] + 1;
    int v112 = (_WORD *)(v105 + ((v101 | 6) << 6) + v104);
    *int v112 = v119[v100 + 9] + 1;
    v112[1] = v119[v100 + 10] + 1;
    v112[2] = v119[v100 + 11] + 1;
    v112[3] = v119[v100 + 12] + 1;
    int v113 = (_WORD *)(v105 + ((v101 | 7) << 6) + v104);
    _WORD *v113 = v119[v100 + 13] + 1;
    v113[1] = v119[v100 + 14] + 1;
    v113[2] = v119[v100 + 15] + 1;
    v113[3] = v119[v100 + 16] + 1;
    v100 += 32;
  }
  while (v100 != 128);
  return result;
}

uint64_t sub_1003EE7F0(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) / a2;
}

uint64_t sub_1003EE800(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) / a2 * a2;
}

char *sub_1003EE814(char *result, int a2, uint64_t a3, int a4, int a5, size_t __n)
{
  if (a5 >= 1)
  {
    size_t v6 = __n;
    uint64_t v7 = (void **)(a3 + 8 * a4);
    unsigned int v8 = a5 + 1;
    uint64_t v9 = (const void **)&result[8 * a2];
    do
    {
      int v11 = *v9++;
      unint64_t v10 = v11;
      uint64_t v12 = *v7++;
      uint64_t result = (char *)memcpy(v12, v10, v6);
      --v8;
    }
    while (v8 > 1);
  }
  return result;
}

void *sub_1003EE870(void *__src, void *__dst, unsigned int a3)
{
  return memcpy(__dst, __src, (unint64_t)a3 << 7);
}

void sub_1003EE884()
{
  __assert_rtn("safeUnsignedCast", "OpenCVWrapperInternal.h", 73, "value >= 0 && \"int outside of valid range to cast to size_t\"");
}

uint64_t AppDependency.wrappedValue.getter()
{
  return AppDependency.wrappedValue.getter();
}

uint64_t AppDependency.__allocating_init(key:manager:)()
{
  return AppDependency.__allocating_init(key:manager:)();
}

uint64_t AppDependencyManager.add<A>(key:dependency:)()
{
  return AppDependencyManager.add<A>(key:dependency:)();
}

uint64_t static AppDependencyManager.shared.getter()
{
  return static AppDependencyManager.shared.getter();
}

uint64_t type metadata accessor for AppDependencyManager()
{
  return type metadata accessor for AppDependencyManager();
}

uint64_t static AppIntent.description.getter()
{
  return static AppIntent.description.getter();
}

uint64_t static AppIntent.isDiscoverable.getter()
{
  return static AppIntent.isDiscoverable.getter();
}

uint64_t static AppIntent.parameterSummary.getter()
{
  return static AppIntent.parameterSummary.getter();
}

uint64_t static AppIntent.authenticationPolicy.getter()
{
  return static AppIntent.authenticationPolicy.getter();
}

uint64_t type metadata accessor for IntentDialog()
{
  return type metadata accessor for IntentDialog();
}

uint64_t static IntentResult.result<>()()
{
  return static IntentResult.result<>()();
}

uint64_t IntentParameter.wrappedValue.modify()
{
  return IntentParameter.wrappedValue.modify();
}

uint64_t IntentParameter.wrappedValue.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t IntentParameter.wrappedValue.setter()
{
  return IntentParameter.wrappedValue.setter();
}

uint64_t IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)()
{
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)();
}

uint64_t type metadata accessor for DisplayRepresentation.Image()
{
  return type metadata accessor for DisplayRepresentation.Image();
}

uint64_t DisplayRepresentation.init(title:subtitle:image:)()
{
  return DisplayRepresentation.init(title:subtitle:image:)();
}

uint64_t type metadata accessor for DisplayRepresentation()
{
  return type metadata accessor for DisplayRepresentation();
}

uint64_t type metadata accessor for InputConnectionBehavior()
{
  return type metadata accessor for InputConnectionBehavior();
}

uint64_t static PersistentlyIdentifiable.persistentIdentifier.getter()
{
  return static PersistentlyIdentifiable.persistentIdentifier.getter();
}

uint64_t TypeDisplayRepresentation.init(name:numericFormat:)()
{
  return TypeDisplayRepresentation.init(name:numericFormat:)();
}

uint64_t type metadata accessor for TypeDisplayRepresentation()
{
  return type metadata accessor for TypeDisplayRepresentation();
}

uint64_t static JSONEncoder.OutputFormatting.prettyPrinted.getter()
{
  return static JSONEncoder.OutputFormatting.prettyPrinted.getter();
}

uint64_t type metadata accessor for JSONEncoder.OutputFormatting()
{
  return type metadata accessor for JSONEncoder.OutputFormatting();
}

uint64_t dispatch thunk of JSONEncoder.outputFormatting.setter()
{
  return dispatch thunk of JSONEncoder.outputFormatting.setter();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t Measurement.init(value:unit:)()
{
  return Measurement.init(value:unit:)();
}

uint64_t Measurement.value.getter()
{
  return Measurement.value.getter();
}

uint64_t Measurement<>.converted(to:)()
{
  return Measurement<>.converted(to:)();
}

uint64_t static CharacterSet.whitespaces.getter()
{
  return static CharacterSet.whitespaces.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.name.getter()
{
  return Notification.name.getter();
}

uint64_t Notification.object.getter()
{
  return Notification.object.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t URLComponents.queryItems.modify()
{
  return URLComponents.queryItems.modify();
}

uint64_t URLComponents.queryItems.setter()
{
  return URLComponents.queryItems.setter();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.init(string:)()
{
  return URLComponents.init(string:)();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t LocalizedStringResource.init(stringLiteral:)()
{
  return LocalizedStringResource.init(stringLiteral:)();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return type metadata accessor for LocalizedStringResource();
}

uint64_t NSKeyValueObservedChange.newValue.getter()
{
  return NSKeyValueObservedChange.newValue.getter();
}

uint64_t _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)()
{
  return _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return URL.init(fileURLWithPath:isDirectory:)();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:)()
{
  return URL.appendingPathComponent(_:)();
}

uint64_t URL.appendingPathExtension(_:)()
{
  return URL.appendingPathExtension(_:)();
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL.== infix(_:_:)()
{
  return static URL.== infix(_:_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t static Date.timeIntervalSinceReferenceDate.getter()
{
  return static Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t Date.init(timeIntervalSince1970:)()
{
  return Date.init(timeIntervalSince1970:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t Date.distance(to:)()
{
  return Date.distance(to:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t static Locale.preferredLanguages.getter()
{
  return static Locale.preferredLanguages.getter();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t static Locale.current.getter()
{
  return static Locale.current.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

NSIndexPath __swiftcall IndexPath._bridgeToObjectiveC()()
{
  return (NSIndexPath)IndexPath._bridgeToObjectiveC()();
}

uint64_t static IndexPath._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t IndexPath.init(row:section:)()
{
  return IndexPath.init(row:section:)();
}

uint64_t IndexPath.row.getter()
{
  return IndexPath.row.getter();
}

uint64_t IndexPath.item.getter()
{
  return IndexPath.item.getter();
}

uint64_t IndexPath.section.getter()
{
  return IndexPath.section.getter();
}

uint64_t type metadata accessor for IndexPath()
{
  return type metadata accessor for IndexPath();
}

uint64_t CGFloat.init(truncating:)()
{
  return CGFloat.init(truncating:)();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)CGFloat._bridgeToObjectiveC()();
}

uint64_t static CGFloat._forceBridgeFromObjectiveC(_:result:)()
{
  return static CGFloat._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static CGFloat._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t CGFloat.piDiv2.unsafeMutableAddressor()
{
  return CGFloat.piDiv2.unsafeMutableAddressor();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t MeasureObjectState.description.getter()
{
  return MeasureObjectState.description.getter();
}

Swift::Bool __swiftcall MeasureObjectState.isCapturable()()
{
  return MeasureObjectState.isCapturable()();
}

Swift::Bool __swiftcall MeasureObjectState.isMovable()()
{
  return MeasureObjectState.isMovable()();
}

uint64_t MeasureCore.initialize(sceneView:motion:)()
{
  return MeasureCore.initialize(sceneView:motion:)();
}

uint64_t MeasureCore.isOccluded(_:in:withTolerance:)()
{
  return MeasureCore.isOccluded(_:in:withTolerance:)();
}

uint64_t MeasureCore.edgeHitTest(screenPoint:frame:orientation:planeTypes:useHyperLocalStrategy:)()
{
  return MeasureCore.edgeHitTest(screenPoint:frame:orientation:planeTypes:useHyperLocalStrategy:)();
}

Swift::Void __swiftcall MeasureCore.updatePlanes(with:)(ARFrame with)
{
}

uint64_t MeasureCore.allPlaneAnchors.getter()
{
  return MeasureCore.allPlaneAnchors.getter();
}

uint64_t MeasureCore.planeSelectionStats.getter()
{
  return MeasureCore.planeSelectionStats.getter();
}

uint64_t MeasureCore.isTrackingVGAEnabled.unsafeMutableAddressor()
{
  return MeasureCore.isTrackingVGAEnabled.unsafeMutableAddressor();
}

Swift::OpaquePointer_optional __swiftcall MeasureCore.adHitTestPositionOnly(screenPoints:frame:)(Swift::OpaquePointer screenPoints, ARFrame frame)
{
  int v2 = (void *)MeasureCore.adHitTestPositionOnly(screenPoints:frame:)(screenPoints._rawValue, frame.super.isa);
  result.value._rawValue = v2;
  result.is_nil = v3;
  return result;
}

Swift::Void __swiftcall MeasureCore.didAdd(anchors:)(Swift::OpaquePointer anchors)
{
}

uint64_t MeasureCore.shared.unsafeMutableAddressor()
{
  return MeasureCore.shared.unsafeMutableAddressor();
}

uint64_t MeasureCore.hitTest(screenPoint:frame:orientation:context:planeTypes:)()
{
  return MeasureCore.hitTest(screenPoint:frame:orientation:context:planeTypes:)();
}

uint64_t MeasureCore.mlLabel(of:kernelRadius:)()
{
  return MeasureCore.mlLabel(of:kernelRadius:)();
}

uint64_t MeasureCore.mlNormal(of:)()
{
  return MeasureCore.mlNormal(of:)();
}

Swift::Void __swiftcall MeasureCore.didRemove(anchors:)(Swift::OpaquePointer anchors)
{
}

Swift::Void __swiftcall MeasureCore.didUpdate(with:)(ARFrame with)
{
}

Swift::Void __swiftcall MeasureCore.didUpdate(anchors:)(Swift::OpaquePointer anchors)
{
}

uint64_t static MeasureCamera.isOnScreen(screenPoint:viewRect:)()
{
  return static MeasureCamera.isOnScreen(screenPoint:viewRect:)();
}

uint64_t static MeasureCamera.planeTooFar(for:transform:)()
{
  return static MeasureCamera.planeTooFar(for:transform:)();
}

uint64_t static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)()
{
  return static MeasureCamera.projectPoint(_:viewProjection:viewportSize:)();
}

uint64_t static MeasureCamera.planeTooClose(for:transform:)()
{
  return static MeasureCamera.planeTooClose(for:transform:)();
}

uint64_t static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)()
{
  return static MeasureCamera.unprojectPoint(_:viewProjectionInv:viewportSize:)();
}

uint64_t static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)()
{
  return static MeasureCamera.viewSpacePoint(fromWorldSpace:view:)();
}

uint64_t static MeasureCamera.getLayerTransform(for:view:)()
{
  return static MeasureCamera.getLayerTransform(for:view:)();
}

uint64_t type metadata accessor for MeasureCamera()
{
  return type metadata accessor for MeasureCamera();
}

uint64_t type metadata accessor for MeasureObject()
{
  return type metadata accessor for MeasureObject();
}

uint64_t ARKeyFrame.init(arFrame:interfaceOrientation:)()
{
  return ARKeyFrame.init(arFrame:interfaceOrientation:)();
}

MTLRenderPassDescriptor_optional __swiftcall MetalScene.makeDefaultRenderPassDescriptor()()
{
  v0 = (objc_class *)MetalScene.makeDefaultRenderPassDescriptor()();
  result.value.super.isa = v0;
  result.is_nil = v1;
  return result;
}

uint64_t ObjectPool.init(allocator:deallocator:synchronized:)()
{
  return ObjectPool.init(allocator:deallocator:synchronized:)();
}

Swift::Void __swiftcall RingBuffer.clear()()
{
}

uint64_t RingBuffer.append(_:)()
{
  return RingBuffer.append(_:)();
}

uint64_t RingBuffer<A>.average()()
{
  return RingBuffer<A>.average()();
}

uint64_t RingBuffer.subscript.getter()
{
  return RingBuffer.subscript.getter();
}

uint64_t static SearchArea.__derived_struct_equals(_:_:)()
{
  return static SearchArea.__derived_struct_equals(_:_:)();
}

uint64_t static WorldPlane.== infix(_:_:)()
{
  return static WorldPlane.== infix(_:_:)();
}

uint64_t WorldPlane.init(anchor:type:uncertainty:confidenceMultiplier:)()
{
  return WorldPlane.init(anchor:type:uncertainty:confidenceMultiplier:)();
}

uint64_t type metadata accessor for WorldPlane()
{
  return type metadata accessor for WorldPlane();
}

uint64_t WorldPoint.init(anchor:type:state:)()
{
  return WorldPoint.init(anchor:type:state:)();
}

uint64_t type metadata accessor for WorldPoint()
{
  return type metadata accessor for WorldPoint();
}

uint64_t lineInRect(rectOrigin:rectSize:lineP1:lineP2:)()
{
  return lineInRect(rectOrigin:rectSize:lineP1:lineP2:)();
}

Swift::Void __swiftcall logCVError(_:label:)(Swift::Int32 _, Swift::String label)
{
}

uint64_t ADProcessor.transformer.getter()
{
  return ADProcessor.transformer.getter();
}

uint64_t ADProcessor.outputDepthTexture.getter()
{
  return ADProcessor.outputDepthTexture.getter();
}

uint64_t type metadata accessor for ScreenPoint()
{
  return type metadata accessor for ScreenPoint();
}

uint64_t ScreenPoint.init(_:)()
{
  return ScreenPoint.init(_:)();
}

uint64_t Transformer.viewToCamera.getter()
{
  return Transformer.viewToCamera.getter();
}

uint64_t Transformer.clipToCameraNormalized.getter()
{
  return Transformer.clipToCameraNormalized.getter();
}

uint64_t Transformer.viewToCameraNormalized.getter()
{
  return Transformer.viewToCameraNormalized.getter();
}

uint64_t static WorldAnchor.forEachAnchor(_:)()
{
  return static WorldAnchor.forEachAnchor(_:)();
}

uint64_t static WorldAnchor.resetPlanesConfidence()()
{
  return static WorldAnchor.resetPlanesConfidence()();
}

uint64_t WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)()
{
  return WorldAnchor.__allocating_init(anchor:shouldAutoUpdate:)();
}

uint64_t static WorldAnchor.didAdd(anchors:)()
{
  return static WorldAnchor.didAdd(anchors:)();
}

uint64_t WorldAnchor.delegate.unsafeMutableAddressor()
{
  return WorldAnchor.delegate.unsafeMutableAddressor();
}

uint64_t WorldAnchor.arSession.unsafeMutableAddressor()
{
  return WorldAnchor.arSession.unsafeMutableAddressor();
}

uint64_t static WorldAnchor.didRemove(anchors:)()
{
  return static WorldAnchor.didRemove(anchors:)();
}

uint64_t static WorldAnchor.didUpdate(anchors:camera:forceUpdate:)()
{
  return static WorldAnchor.didUpdate(anchors:camera:forceUpdate:)();
}

uint64_t WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)()
{
  return WorldAnchor.init(transform:viewTransform:plane:confidence:shouldAutoUpdate:viewTarget:)();
}

uint64_t type metadata accessor for WorldAnchor()
{
  return type metadata accessor for WorldAnchor();
}

uint64_t type metadata accessor for WorldPerson()
{
  return type metadata accessor for WorldPerson();
}

uint64_t WorldPerson.init(_:)()
{
  return WorldPerson.init(_:)();
}

uint64_t type metadata accessor for PatchTracker.Patch()
{
  return type metadata accessor for PatchTracker.Patch();
}

uint64_t PatchTracker.DebugOptions.showPoints.unsafeMutableAddressor()
{
  return PatchTracker.DebugOptions.showPoints.unsafeMutableAddressor();
}

uint64_t PatchTracker.DebugOptions.drawPatches.unsafeMutableAddressor()
{
  return PatchTracker.DebugOptions.drawPatches.unsafeMutableAddressor();
}

uint64_t PatchTracker.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  return PatchTracker.DebugOptions.keyForFeature.unsafeMutableAddressor();
}

uint64_t PatchTracker.DebugOptions.keys.unsafeMutableAddressor()
{
  return PatchTracker.DebugOptions.keys.unsafeMutableAddressor();
}

uint64_t PatchTracker.DebugOptions.paintMode.unsafeMutableAddressor()
{
  return PatchTracker.DebugOptions.paintMode.unsafeMutableAddressor();
}

uint64_t Synchronized.init(wrappedValue:)()
{
  return Synchronized.init(wrappedValue:)();
}

uint64_t Synchronized.wrappedValue.getter()
{
  return Synchronized.wrappedValue.getter();
}

uint64_t Synchronized.wrappedValue.setter()
{
  return Synchronized.wrappedValue.setter();
}

uint64_t ADTransformer.viewToAD.getter()
{
  return ADTransformer.viewToAD.getter();
}

uint64_t PlaneSelector.DebugOptions.showHitRay.unsafeMutableAddressor()
{
  return PlaneSelector.DebugOptions.showHitRay.unsafeMutableAddressor();
}

uint64_t PlaneSelector.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  return PlaneSelector.DebugOptions.keyForFeature.unsafeMutableAddressor();
}

uint64_t PlaneSelector.DebugOptions.showHitPoints.unsafeMutableAddressor()
{
  return PlaneSelector.DebugOptions.showHitPoints.unsafeMutableAddressor();
}

uint64_t PlaneSelector.DebugOptions.keys.unsafeMutableAddressor()
{
  return PlaneSelector.DebugOptions.keys.unsafeMutableAddressor();
}

uint64_t PlaneSelector.debugOptions.getter()
{
  return PlaneSelector.debugOptions.getter();
}

uint64_t PlaneSelector.debugOptions.setter()
{
  return PlaneSelector.debugOptions.setter();
}

uint64_t ariadne_trace(_:_:_:_:_:)()
{
  return ariadne_trace(_:_:_:_:_:)();
}

Swift::Int __swiftcall fillIOSurface(_:with:fromPlaneIndex:)(IOSurface _, CVBufferRef with, Swift::Int fromPlaneIndex)
{
  return fillIOSurface(_:with:fromPlaneIndex:)(_.super.isa, _._impl, with, fromPlaneIndex);
}

uint64_t DepthProcessor.transformer.getter()
{
  return DepthProcessor.transformer.getter();
}

Swift::OpaquePointer_optional __swiftcall DepthProcessor.getJasperPointsPosition(requestedMinConfidence:currentFrame:)(Swift::Float requestedMinConfidence, ARFrame currentFrame)
{
  int v2 = (void *)DepthProcessor.getJasperPointsPosition(requestedMinConfidence:currentFrame:)(currentFrame.super.isa, requestedMinConfidence);
  result.value._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t SurfaceTexture.init(width:height:backgroundColor:)()
{
  return SurfaceTexture.init(width:height:backgroundColor:)();
}

uint64_t WorldLineGuide.init(guideType:end1:end2:primarySegmentEnd1:primarySegmentEnd2:backingPlanes:anchorState:)()
{
  return WorldLineGuide.init(guideType:end1:end2:primarySegmentEnd1:primarySegmentEnd2:backingPlanes:anchorState:)();
}

uint64_t type metadata accessor for WorldLineGuide()
{
  return type metadata accessor for WorldLineGuide();
}

uint64_t WorldPointType.description.getter()
{
  return WorldPointType.description.getter();
}

uint64_t WorldPointType.isSnappable.getter()
{
  return WorldPointType.isSnappable.getter();
}

Swift::Bool __swiftcall WorldPointType.isSnap()()
{
  return WorldPointType.isSnap()();
}

uint64_t WorldRectangle.init(data:edges:splitters:)()
{
  return WorldRectangle.init(data:edges:splitters:)();
}

uint64_t type metadata accessor for WorldRectangle()
{
  return type metadata accessor for WorldRectangle();
}

uint64_t clipLineToRect(rectOrigin:rectSize:lineP1:lineP2:)()
{
  return clipLineToRect(rectOrigin:rectSize:lineP1:lineP2:)();
}

uint64_t static DefaultsManager.registerDefaults()()
{
  return static DefaultsManager.registerDefaults()();
}

uint64_t static DefaultsManager.reset()()
{
  return static DefaultsManager.reset()();
}

uint64_t static HashableWeakRef.== infix(_:_:)()
{
  return static HashableWeakRef.== infix(_:_:)();
}

Swift::String __swiftcall benchmarkFormat(seconds:)(Swift::Double seconds)
{
  uint64_t v1 = benchmarkFormat(seconds:)(seconds);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t createTransform(normal:forward:position:)()
{
  return createTransform(normal:forward:position:)();
}

uint64_t createTransform(forward:normal:position:)()
{
  return createTransform(forward:normal:position:)();
}

CVBufferRef_optional __swiftcall makePixelBuffer(width:height:pixelFormat:)(Swift::Int width, Swift::Int height, Swift::UInt32 pixelFormat)
{
  return (CVBufferRef_optional)makePixelBuffer(width:height:pixelFormat:)(width, height, *(void *)&pixelFormat);
}

uint64_t sceneKitToARKit(_:)()
{
  return sceneKitToARKit(_:)();
}

uint64_t MeasurementEvent.init(name:results:)()
{
  return MeasurementEvent.init(name:results:)();
}

uint64_t OverlayMetalView.populateScene(depthProcessor:)()
{
  return OverlayMetalView.populateScene(depthProcessor:)();
}

Swift::Void __swiftcall OverlayMetalView.didUpdate(frame:)(ARFrame frame)
{
}

uint64_t type metadata accessor for OverlayMetalView()
{
  return type metadata accessor for OverlayMetalView();
}

uint64_t lineIntersection(line1P1:line1P2:line2P1:line2P2:)()
{
  return lineIntersection(line1P1:line1P2:line2P1:line2P2:)();
}

Swift::String __swiftcall EdgePlanesMetrics.metricDescriptionForBestPlaneType()()
{
  uint64_t v0 = EdgePlanesMetrics.metricDescriptionForBestPlaneType()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall EdgePlanesMetrics.metricDescriptionForOtherPlaneType()()
{
  uint64_t v0 = EdgePlanesMetrics.metricDescriptionForOtherPlaneType()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t OrderedDictionary.removeValue(forKey:)()
{
  return OrderedDictionary.removeValue(forKey:)();
}

uint64_t OrderedDictionary.values.getter()
{
  return OrderedDictionary.values.getter();
}

Swift::Void __swiftcall OrderedDictionary.removeAll()()
{
}

uint64_t static OrderedDictionary<>.__derived_struct_equals(_:_:)()
{
  return static OrderedDictionary<>.__derived_struct_equals(_:_:)();
}

uint64_t OrderedDictionary.init()()
{
  return OrderedDictionary.init()();
}

uint64_t OrderedDictionary.subscript.setter()
{
  return OrderedDictionary.subscript.setter();
}

uint64_t LocalPlaneDetector.DebugOptions.showPlane.unsafeMutableAddressor()
{
  return LocalPlaneDetector.DebugOptions.showPlane.unsafeMutableAddressor();
}

uint64_t LocalPlaneDetector.DebugOptions.showPoints.unsafeMutableAddressor()
{
  return LocalPlaneDetector.DebugOptions.showPoints.unsafeMutableAddressor();
}

uint64_t LocalPlaneDetector.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  return LocalPlaneDetector.DebugOptions.keyForFeature.unsafeMutableAddressor();
}

uint64_t LocalPlaneDetector.DebugOptions.keys.unsafeMutableAddressor()
{
  return LocalPlaneDetector.DebugOptions.keys.unsafeMutableAddressor();
}

Swift::tuple_actualPoints_OpaquePointer_bestPoints_OpaquePointer __swiftcall LocalPlaneDetector.getPointsForDebug()()
{
  uint64_t v0 = (void *)LocalPlaneDetector.getPointsForDebug()();
  result.bestPoints._rawValue = v1;
  result.actualPoints._rawValue = v0;
  return result;
}

uint64_t RecordReplayOption.recordFile.getter()
{
  return RecordReplayOption.recordFile.getter();
}

uint64_t RecordReplayOption.replayFile.getter()
{
  return RecordReplayOption.replayFile.getter();
}

uint64_t static RecordReplayOption.insertTimestamp(to:)()
{
  return static RecordReplayOption.insertTimestamp(to:)();
}

uint64_t SegmentationResult.Label.debugColor.getter()
{
  return SegmentationResult.Label.debugColor.getter();
}

uint64_t static WorldRectangleData.pointLiesWithinRectangle(point:rectangle:pointsCoplanar:)()
{
  return static WorldRectangleData.pointLiesWithinRectangle(point:rectangle:pointsCoplanar:)();
}

uint64_t WorldRectangleData.init(_:screenCoordinates:keyFrame:)()
{
  return WorldRectangleData.init(_:screenCoordinates:keyFrame:)();
}

uint64_t closestPointOnLine(lineP1:lineP2:point:)()
{
  return closestPointOnLine(lineP1:lineP2:point:)();
}

{
  return closestPointOnLine(lineP1:lineP2:point:)();
}

uint64_t * infix(_:_:)()
{
  return * infix(_:_:)();
}

{
  return * infix(_:_:)();
}

{
  return * infix(_:_:)();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t - infix(_:_:)()
{
  return - infix(_:_:)();
}

uint64_t makeIOSurfaceTexture(device:width:height:pixelFormat:iosurface:)()
{
  return makeIOSurfaceTexture(device:width:height:pixelFormat:iosurface:)();
}

uint64_t pointClosestToOrigin(_:)()
{
  return pointClosestToOrigin(_:)();
}

uint64_t OptionalSmoothedValue.updated(with:)()
{
  return OptionalSmoothedValue.updated(with:)();
}

uint64_t SegmentationProcessor.DebugOptions.keyForFeature.unsafeMutableAddressor()
{
  return SegmentationProcessor.DebugOptions.keyForFeature.unsafeMutableAddressor();
}

uint64_t SegmentationProcessor.DebugOptions.showSampledPoints.unsafeMutableAddressor()
{
  return SegmentationProcessor.DebugOptions.showSampledPoints.unsafeMutableAddressor();
}

uint64_t SegmentationProcessor.DebugOptions.showUnprojectedTrail.unsafeMutableAddressor()
{
  return SegmentationProcessor.DebugOptions.showUnprojectedTrail.unsafeMutableAddressor();
}

uint64_t SegmentationProcessor.DebugOptions.showNormalsBackground.unsafeMutableAddressor()
{
  return SegmentationProcessor.DebugOptions.showNormalsBackground.unsafeMutableAddressor();
}

uint64_t SegmentationProcessor.DebugOptions.showSegmentedBackground.unsafeMutableAddressor()
{
  return SegmentationProcessor.DebugOptions.showSegmentedBackground.unsafeMutableAddressor();
}

uint64_t type metadata accessor for SegmentationProcessor.SegmentedTexture()
{
  return type metadata accessor for SegmentationProcessor.SegmentedTexture();
}

uint64_t static ComputedCameraProperties.updateShared(_:viewportSize:)()
{
  return static ComputedCameraProperties.updateShared(_:viewportSize:)();
}

uint64_t static ComputedCameraProperties.__derived_struct_equals(_:_:)()
{
  return static ComputedCameraProperties.__derived_struct_equals(_:_:)();
}

uint64_t ComputedCameraProperties.init(camera:viewportSize:orientation:)()
{
  return ComputedCameraProperties.init(camera:viewportSize:orientation:)();
}

uint64_t static ComputedCameraProperties.shared(for:)()
{
  return static ComputedCameraProperties.shared(for:)();
}

uint64_t static ComputedCameraProperties.shared.getter()
{
  return static ComputedCameraProperties.shared.getter();
}

uint64_t ComputedCameraProperties.init()()
{
  return ComputedCameraProperties.init()();
}

IOSurface_optional __swiftcall makeIOSurfaceOfFirstPlane(from:)(CVBufferRef from)
{
  uint64_t v1 = (objc_class *)makeIOSurfaceOfFirstPlane(from:)(from);
  result.value._impl = v2;
  result.value.super.isa = v1;
  result.is_nil = v3;
  return result;
}

uint64_t convertToDisplayCoordinates(_:forKeyFrame:viewSize:)()
{
  return convertToDisplayCoordinates(_:forKeyFrame:viewSize:)();
}

uint64_t effectiveStatusBarOrientation.unsafeMutableAddressor()
{
  return effectiveStatusBarOrientation.unsafeMutableAddressor();
}

uint64_t *= infix(_:_:)()
{
  return *= infix(_:_:)();
}

uint64_t += infix(_:_:)()
{
  return += infix(_:_:)();
}

Swift::Void __swiftcall Log.debug(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
}

Swift::Void __swiftcall Log.error(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
}

Swift::Void __swiftcall Log.default(_:isPrivate:)(Swift::String _, Swift::Bool isPrivate)
{
}

uint64_t Log.init(category:enabledInDebugKey:)()
{
  return Log.init(category:enabledInDebugKey:)();
}

uint64_t mix(_:_:_:)()
{
  return mix(_:_:_:)();
}

{
  return mix(_:_:_:)();
}

uint64_t slerp(transform1:transform2:percent:)()
{
  return slerp(transform1:transform2:percent:)();
}

uint64_t static CVUtil.emboss(srcBuffer:dstBuffer:tempBuffer:flags:)()
{
  return static CVUtil.emboss(srcBuffer:dstBuffer:tempBuffer:flags:)();
}

uint64_t type metadata accessor for CVUtil()
{
  return type metadata accessor for CVUtil();
}

Swift::Double __swiftcall spring(tension:friction:velocity:elapsed:)(Swift::Double tension, Swift::Double friction, Swift::Double velocity, Swift::Double elapsed)
{
  spring(tension:friction:velocity:elapsed:)(tension, friction, velocity, elapsed);
  return result;
}

uint64_t Segment.isEqual(to:)()
{
  return Segment.isEqual(to:)();
}

uint64_t Defaults.dateLastUse.unsafeMutableAddressor()
{
  return Defaults.dateLastUse.unsafeMutableAddressor();
}

uint64_t Defaults.peADTestMode.unsafeMutableAddressor()
{
  return Defaults.peADTestMode.unsafeMutableAddressor();
}

uint64_t Defaults.showStatistics.unsafeMutableAddressor()
{
  return Defaults.showStatistics.unsafeMutableAddressor();
}

uint64_t Defaults.drawDebugPlanes.unsafeMutableAddressor()
{
  return Defaults.drawDebugPlanes.unsafeMutableAddressor();
}

uint64_t Defaults.measurementBias.unsafeMutableAddressor()
{
  return Defaults.measurementBias.unsafeMutableAddressor();
}

uint64_t Defaults.divisionsEnabled.unsafeMutableAddressor()
{
  return Defaults.divisionsEnabled.unsafeMutableAddressor();
}

uint64_t Defaults.maxDeviceRotation.unsafeMutableAddressor()
{
  return Defaults.maxDeviceRotation.unsafeMutableAddressor();
}

uint64_t Defaults.peShowADIndicator.unsafeMutableAddressor()
{
  return Defaults.peShowADIndicator.unsafeMutableAddressor();
}

uint64_t Defaults.showFeaturePoints.unsafeMutableAddressor()
{
  return Defaults.showFeaturePoints.unsafeMutableAddressor();
}

uint64_t Defaults.showOppositeUnits.unsafeMutableAddressor()
{
  return Defaults.showOppositeUnits.unsafeMutableAddressor();
}

uint64_t Defaults.disableAllCoaching.unsafeMutableAddressor()
{
  return Defaults.disableAllCoaching.unsafeMutableAddressor();
}

uint64_t Defaults.snapReticleToEdges.unsafeMutableAddressor()
{
  return Defaults.snapReticleToEdges.unsafeMutableAddressor();
}

uint64_t Defaults.exportSceneFilePath.unsafeMutableAddressor()
{
  return Defaults.exportSceneFilePath.unsafeMutableAddressor();
}

uint64_t Defaults.pePatchTrackingMode.unsafeMutableAddressor()
{
  return Defaults.pePatchTrackingMode.unsafeMutableAddressor();
}

uint64_t Defaults.maxDeviceAcceleration.unsafeMutableAddressor()
{
  return Defaults.maxDeviceAcceleration.unsafeMutableAddressor();
}

uint64_t Defaults.coachingCalloutEnabled.unsafeMutableAddressor()
{
  return Defaults.coachingCalloutEnabled.unsafeMutableAddressor();
}

uint64_t Defaults.showPreciseMeasurement.unsafeMutableAddressor()
{
  return Defaults.showPreciseMeasurement.unsafeMutableAddressor();
}

uint64_t Defaults.showRectangleDebugInfo.unsafeMutableAddressor()
{
  return Defaults.showRectangleDebugInfo.unsafeMutableAddressor();
}

uint64_t Defaults.peFirstPointMaxDistance.unsafeMutableAddressor()
{
  return Defaults.peFirstPointMaxDistance.unsafeMutableAddressor();
}

uint64_t Defaults.hideRectangleSuggestions.unsafeMutableAddressor()
{
  return Defaults.hideRectangleSuggestions.unsafeMutableAddressor();
}

uint64_t Defaults.showWorldAnchorDebugInfo.unsafeMutableAddressor()
{
  return Defaults.showWorldAnchorDebugInfo.unsafeMutableAddressor();
}

uint64_t Defaults.edgeDetectionUniqueContours.unsafeMutableAddressor()
{
  return Defaults.edgeDetectionUniqueContours.unsafeMutableAddressor();
}

uint64_t Defaults.resetDefaultSettingsOnStart.unsafeMutableAddressor()
{
  return Defaults.resetDefaultSettingsOnStart.unsafeMutableAddressor();
}

uint64_t Defaults.showLightIntensityDebugInfo.unsafeMutableAddressor()
{
  return Defaults.showLightIntensityDebugInfo.unsafeMutableAddressor();
}

uint64_t Defaults.peShowPatchTrackingIndicator.unsafeMutableAddressor()
{
  return Defaults.peShowPatchTrackingIndicator.unsafeMutableAddressor();
}

uint64_t Defaults.edgeDetectionDebugReticleEnabled.unsafeMutableAddressor()
{
  return Defaults.edgeDetectionDebugReticleEnabled.unsafeMutableAddressor();
}

uint64_t static LineUtil.isParallel(_:_:)()
{
  return static LineUtil.isParallel(_:_:)();
}

uint64_t type metadata accessor for LineUtil()
{
  return type metadata accessor for LineUtil();
}

uint64_t SnapType.worldCorner.unsafeMutableAddressor()
{
  return SnapType.worldCorner.unsafeMutableAddressor();
}

uint64_t SnapType.all.unsafeMutableAddressor()
{
  return SnapType.all.unsafeMutableAddressor();
}

uint64_t SnapType.standard.unsafeMutableAddressor()
{
  return SnapType.standard.unsafeMutableAddressor();
}

uint64_t SnapType.userLine.unsafeMutableAddressor()
{
  return SnapType.userLine.unsafeMutableAddressor();
}

uint64_t SnapType.guideLine.unsafeMutableAddressor()
{
  return SnapType.guideLine.unsafeMutableAddressor();
}

uint64_t SnapType.userPoint.unsafeMutableAddressor()
{
  return SnapType.userPoint.unsafeMutableAddressor();
}

uint64_t SnapType.worldEdge.unsafeMutableAddressor()
{
  return SnapType.worldEdge.unsafeMutableAddressor();
}

uint64_t MetalNode.init()()
{
  return MetalNode.init()();
}

uint64_t MetalNode.deinit()
{
  return MetalNode.deinit();
}

uint64_t static PlaneUtil.findBestPlane(points:facing:)()
{
  return static PlaneUtil.findBestPlane(points:facing:)();
}

uint64_t static PlaneUtil.getIntersection(ray:plane:)()
{
  return static PlaneUtil.getIntersection(ray:plane:)();
}

uint64_t static PlaneUtil.distance(point:plane:)()
{
  return static PlaneUtil.distance(point:plane:)();
}

uint64_t type metadata accessor for PlaneUtil()
{
  return type metadata accessor for PlaneUtil();
}

uint64_t WorldEdge.getClosestScreenSpacePoint(from:for:)()
{
  return WorldEdge.getClosestScreenSpacePoint(from:for:)();
}

uint64_t WorldEdge.projected(for:)()
{
  return WorldEdge.projected(for:)();
}

uint64_t WorldEdge.init(transform:p1:p2:type:adVariance:)()
{
  return WorldEdge.init(transform:p1:p2:type:adVariance:)();
}

uint64_t type metadata accessor for WorldEdge()
{
  return type metadata accessor for WorldEdge();
}

uint64_t WorldLine.init(end1:end2:initialState:)()
{
  return WorldLine.init(end1:end2:initialState:)();
}

uint64_t type metadata accessor for WorldLine()
{
  return type metadata accessor for WorldLine();
}

uint64_t / infix(_:_:)()
{
  return / infix(_:_:)();
}

uint64_t UTType.identifier.getter()
{
  return UTType.identifier.getter();
}

uint64_t static UTType.png.getter()
{
  return static UTType.png.getter();
}

uint64_t type metadata accessor for UTType()
{
  return type metadata accessor for UTType();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t type metadata accessor for UIPointerShape()
{
  return type metadata accessor for UIPointerShape();
}

uint64_t type metadata accessor for UIPointerEffect.TintMode()
{
  return type metadata accessor for UIPointerEffect.TintMode();
}

uint64_t type metadata accessor for UIPointerEffect()
{
  return type metadata accessor for UIPointerEffect();
}

uint64_t CustomCombineIdentifierConvertible<>.combineIdentifier.getter()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t Publishers.CompactMap.map<A>(_:)()
{
  return Publishers.CompactMap.map<A>(_:)();
}

uint64_t Publishers.MergeMany.init<A>(_:)()
{
  return Publishers.MergeMany.init<A>(_:)();
}

uint64_t dispatch thunk of Subscriber.receive(subscription:)()
{
  return dispatch thunk of Subscriber.receive(subscription:)();
}

uint64_t dispatch thunk of Subscriber.receive(_:)()
{
  return dispatch thunk of Subscriber.receive(_:)();
}

uint64_t static Subscribers.Demand.unlimited.getter()
{
  return static Subscribers.Demand.unlimited.getter();
}

uint64_t AnyCancellable.store<A>(in:)()
{
  return AnyCancellable.store<A>(in:)();
}

Swift::Void __swiftcall AnyCancellable.cancel()()
{
}

uint64_t PassthroughSubject.send(_:)()
{
  return PassthroughSubject.send(_:)();
}

uint64_t PassthroughSubject.init()()
{
  return PassthroughSubject.init()();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return CurrentValueSubject.send(_:)();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return CurrentValueSubject.init(_:)();
}

uint64_t Just.init(_:)()
{
  return Just.init(_:)();
}

uint64_t Future.init(_:)()
{
  return Future.init(_:)();
}

uint64_t Subject<>.send()()
{
  return Subject<>.send()();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t Published.projectedValue.getter()
{
  return Published.projectedValue.getter();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t Publisher.compactMap<A>(_:)()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t Publisher.map<A>(_:)()
{
  return Publisher.map<A>(_:)();
}

uint64_t Publisher.sink(receiveCompletion:receiveValue:)()
{
  return Publisher.sink(receiveCompletion:receiveValue:)();
}

uint64_t Publisher.filter(_:)()
{
  return Publisher.filter(_:)();
}

uint64_t Publisher.collect()()
{
  return Publisher.collect()();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t Publisher<>.flatMap<A>(maxPublishers:_:)()
{
  return Publisher<>.flatMap<A>(maxPublishers:_:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.background.getter()
{
  return static DispatchQoS.background.getter();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t StateValue.wrappedValue.getter()
{
  return StateValue.wrappedValue.getter();
}

uint64_t StateValue.mutateImmediatelyNotifyAsync(_:)()
{
  return StateValue.mutateImmediatelyNotifyAsync(_:)();
}

uint64_t StateValue.previous.getter()
{
  return StateValue.previous.getter();
}

uint64_t StateValue.ifUpdated(_:)()
{
  return StateValue.ifUpdated(_:)();
}

uint64_t StateValue.publisher.getter()
{
  return StateValue.publisher.getter();
}

uint64_t StateObserver.init(configuration:)()
{
  return StateObserver.init(configuration:)();
}

uint64_t StateObserver.deinit()
{
  return StateObserver.deinit();
}

uint64_t PublishedValue.init(wrappedValue:)()
{
  return PublishedValue.init(wrappedValue:)();
}

uint64_t PublishedValue.wrappedValue.getter()
{
  return PublishedValue.wrappedValue.getter();
}

Swift::Void __swiftcall StateObserving.setup()()
{
}

uint64_t MutableStateValue.__allocating_init(_:_:)()
{
  return MutableStateValue.__allocating_init(_:_:)();
}

uint64_t MutableStateBinding.__allocating_init(_:_:)()
{
  return MutableStateBinding.__allocating_init(_:_:)();
}

uint64_t StateObservingNSObject.init(configuration:)()
{
  return StateObservingNSObject.init(configuration:)();
}

uint64_t Contexts.PrivateQueue.init(_:)()
{
  return Contexts.PrivateQueue.init(_:)();
}

uint64_t Contexts.UIKit.init()()
{
  return Contexts.UIKit.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return BidirectionalCollection<>.starts<A>(with:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.init(contentsOfFile:encoding:)()
{
  return String.init(contentsOfFile:encoding:)();
}

uint64_t String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)()
{
  return String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
}

Swift::Void __swiftcall String.LocalizationValue.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for String.LocalizationValue.StringInterpolation()
{
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t String.LocalizationValue.init(stringInterpolation:)()
{
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t type metadata accessor for String.LocalizationValue()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String.localizedStringWithFormat(_:_:)()
{
  return static String.localizedStringWithFormat(_:_:)();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t String.Encoding.rawValue.getter()
{
  return String.Encoding.rawValue.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init(localized:table:bundle:locale:comment:)()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

Swift::Void __swiftcall String.append(contentsOf:)(Swift::String contentsOf)
{
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t static MainActor.shared.getter()
{
  return static MainActor.shared.getter();
}

uint64_t type metadata accessor for MainActor()
{
  return type metadata accessor for MainActor();
}

NSNumber __swiftcall Double._bridgeToObjectiveC()()
{
  return (NSNumber)Double._bridgeToObjectiveC()();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  return (NSNumber)Float._bridgeToObjectiveC()();
}

uint64_t Float.description.getter()
{
  return Float.description.getter();
}

uint64_t Float.degreesToRadians.unsafeMutableAddressor()
{
  return Float.degreesToRadians.unsafeMutableAddressor();
}

uint64_t Float.pi2.unsafeMutableAddressor()
{
  return Float.pi2.unsafeMutableAddressor();
}

uint64_t Float.piDiv2.unsafeMutableAddressor()
{
  return Float.piDiv2.unsafeMutableAddressor();
}

uint64_t Float.write<A>(to:)()
{
  return Float.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._forceBridgeFromObjectiveC(_:result:)()
{
  return static Set._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t Collection.count.getter()
{
  return Collection.count.getter();
}

uint64_t Collection.isEmpty.getter()
{
  return Collection.isEmpty.getter();
}

uint64_t RangeReplaceableCollection<>.idToObjectMap.getter()
{
  return RangeReplaceableCollection<>.idToObjectMap.getter();
}

uint64_t RangeReplaceableCollection<>.removingFirst(_:)()
{
  return RangeReplaceableCollection<>.removingFirst(_:)();
}

uint64_t SCNMatrix4.forward.getter()
{
  return SCNMatrix4.forward.getter();
}

uint64_t SCNMatrix4.position.getter()
{
  return SCNMatrix4.position.getter();
}

uint64_t SCNMatrix4.init(_:)()
{
  return SCNMatrix4.init(_:)();
}

uint64_t SCNVector3.floats.getter()
{
  return SCNVector3.floats.getter();
}

NSValue __swiftcall SCNVector3._bridgeToObjectiveC()()
{
  return (NSValue)SCNVector3._bridgeToObjectiveC()();
}

uint64_t SCNVector3.init(_:_:_:)()
{
  return SCNVector3.init(_:_:_:)();
}

__C::SCNVector3 __swiftcall SCNVector3.init(_:_:_:)(Swift::Double a1, Swift::Double a2, Swift::Double a3)
{
  SCNVector3.init(_:_:_:)(a1, a2, a3);
  result.z = v5;
  result.y = v4;
  result.x = v3;
  return result;
}

uint64_t SCNVector3.init(_:)()
{
  return SCNVector3.init(_:)();
}

NSValue __swiftcall SCNVector4._bridgeToObjectiveC()()
{
  return (NSValue)SCNVector4._bridgeToObjectiveC()();
}

uint64_t SCNVector4.init(_:_:_:_:)()
{
  return SCNVector4.init(_:_:_:_:)();
}

__C::SCNVector4 __swiftcall SCNVector4.init(_:_:_:_:)(Swift::Float a1, Swift::Float a2, Swift::Float a3, Swift::Float a4)
{
  SCNVector4.init(_:_:_:_:)(a1, a2, a3, a4);
  result.w = v7;
  result.z = v6;
  result.y = v5;
  result.x = v4;
  return result;
}

CVBufferRef_optional __swiftcall CVBufferRef.copiedPlane(_:with:format:)(Swift::Int _, Swift::tuple_width_Int_height_Int with, Swift::UInt32 format)
{
  return (CVBufferRef_optional)CVBufferRef.copiedPlane(_:with:format:)(_, with.width, with.height, *(void *)&format);
}

uint64_t CGContextRef.move(to:)()
{
  return CGContextRef.move(to:)();
}

uint64_t CGContextRef.addLine(to:)()
{
  return CGContextRef.addLine(to:)();
}

uint64_t type metadata accessor for ARPlaneAnchor.Classification()
{
  return type metadata accessor for ARPlaneAnchor.Classification();
}

uint64_t ARPlaneAnchor.classification.getter()
{
  return ARPlaneAnchor.classification.getter();
}

NSValue __swiftcall CATransform3D._bridgeToObjectiveC()()
{
  return (NSValue)CATransform3D._bridgeToObjectiveC()();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t simd_float3x3.copy(from:)()
{
  return simd_float3x3.copy(from:)();
}

uint64_t simd_float4x4.translated(to:)()
{
  return simd_float4x4.translated(to:)();
}

uint64_t static simd_float4x4.makeRotation(_:_:_:_:)()
{
  return static simd_float4x4.makeRotation(_:_:_:_:)();
}

Swift::Bool __swiftcall simd_float4x4.isAlmostHorizontal(marginInDegrees:)(Swift::Float marginInDegrees)
{
  return simd_float4x4.isAlmostHorizontal(marginInDegrees:)(marginInDegrees);
}

uint64_t simd_float4x4.up.getter()
{
  return simd_float4x4.up.getter();
}

uint64_t static simd_float4x4.make(position:normalizedForward:)()
{
  return static simd_float4x4.make(position:normalizedForward:)();
}

uint64_t simd_float4x4.right.getter()
{
  return simd_float4x4.right.getter();
}

uint64_t simd_float4x4.forward.getter()
{
  return simd_float4x4.forward.getter();
}

uint64_t simd_float4x4.position.getter()
{
  return simd_float4x4.position.getter();
}

Swift::Void __swiftcall vImage_Buffer.deallocate()()
{
}

uint64_t static vImage_Buffer.scalePlanar8(srcImageBuffer:dstImageBuffer:scaleFactor:flags:tempBuffer:)()
{
  return static vImage_Buffer.scalePlanar8(srcImageBuffer:dstImageBuffer:scaleFactor:flags:tempBuffer:)();
}

uint64_t vImage_Buffer.draw(onto:within:bytesPerPixel:)()
{
  return vImage_Buffer.draw(onto:within:bytesPerPixel:)();
}

uint64_t vImage_Buffer.draw(onto:offsetX:offsetY:bytesPerPixel:)()
{
  return vImage_Buffer.draw(onto:offsetX:offsetY:bytesPerPixel:)();
}

uint64_t vImage_Buffer.fill(value:)()
{
  return vImage_Buffer.fill(value:)();
}

uint64_t static vImage_Buffer.make(width:height:rowBytes:allocating:)()
{
  return static vImage_Buffer.make(width:height:rowBytes:allocating:)();
}

uint64_t static vImage_Buffer.wrap(pixelBuffer:planeIndex:srcRect:)()
{
  return static vImage_Buffer.wrap(pixelBuffer:planeIndex:srcRect:)();
}

uint64_t vImage_Buffer.clone()()
{
  return vImage_Buffer.clone()();
}

uint64_t NSUserDefaults.performOnChange<A>(to:on:action:)()
{
  return NSUserDefaults.performOnChange<A>(to:on:action:)();
}

uint64_t NSUserDefaults.recordReplayOption.unsafeMutableAddressor()
{
  return NSUserDefaults.recordReplayOption.unsafeMutableAddressor();
}

uint64_t static NSUserDefaults.update<A>(_:key:feature:)()
{
  return static NSUserDefaults.update<A>(_:key:feature:)();
}

uint64_t static NSUserDefaults.observe(observer:keys:)()
{
  return static NSUserDefaults.observe(observer:keys:)();
}

uint64_t UIPointerStyle.init(effect:shape:)()
{
  return UIPointerStyle.init(effect:shape:)();
}

uint64_t ARPlaneGeometry.vertices.getter()
{
  return ARPlaneGeometry.vertices.getter();
}

uint64_t static CGAffineTransform.== infix(_:_:)()
{
  return static CGAffineTransform.== infix(_:_:)();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return static OS_dispatch_queue.Attributes.concurrent.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerOptions()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerOptions();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t OS_dispatch_queue.label.getter()
{
  return OS_dispatch_queue.label.getter();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t SCNBoundingVolume.boundingBox.getter()
{
  return SCNBoundingVolume.boundingBox.getter();
}

SCNGeometrySource __swiftcall SCNGeometrySource.init(normals:)(Swift::OpaquePointer normals)
{
  return (SCNGeometrySource)SCNGeometrySource.init(normals:)(normals._rawValue);
}

SCNGeometrySource __swiftcall SCNGeometrySource.init(vertices:)(Swift::OpaquePointer vertices)
{
  return (SCNGeometrySource)SCNGeometrySource.init(vertices:)(vertices._rawValue);
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t UIDeviceOrientation.description.getter()
{
  return UIDeviceOrientation.description.getter();
}

uint64_t UIContentSizeCategory.isAccessibilityCategory.getter()
{
  return UIContentSizeCategory.isAccessibilityCategory.getter();
}

uint64_t static UIContentSizeCategory.> infix(_:_:)()
{
  return static UIContentSizeCategory.> infix(_:_:)();
}

uint64_t VNRectangleObservation.quad.getter()
{
  return VNRectangleObservation.quad.getter();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t NSSet.init(objects:)()
{
  return NSSet.init(objects:)();
}

uint64_t CGRect.init(centerPoint:size:)()
{
  return CGRect.init(centerPoint:size:)();
}

uint64_t CGRect.centerPoint.getter()
{
  return CGRect.centerPoint.getter();
}

uint64_t CGRect.init(p1:p2:)()
{
  return CGRect.init(p1:p2:)();
}

uint64_t CGRect.withWidth(_:)()
{
  return CGRect.withWidth(_:)();
}

uint64_t CGRect.center.getter()
{
  return CGRect.center.getter();
}

uint64_t CGSize.divide(by:)()
{
  return CGSize.divide(by:)();
}

uint64_t CGSize.init(_:_:)()
{
  return CGSize.init(_:_:)();
}

uint64_t static CGSize./ infix(_:_:)()
{
  return static CGSize./ infix(_:_:)();
}

uint64_t static CGSize.* infix(_:_:)()
{
  return static CGSize.* infix(_:_:)();
}

uint64_t static CGSize.- infix(_:_:)()
{
  return static CGSize.- infix(_:_:)();
}

uint64_t ARFrame.viewToCamera(screenPoint:sceneView:orientation:)()
{
  return ARFrame.viewToCamera(screenPoint:sceneView:orientation:)();
}

Swift::Bool __swiftcall ARFrame.isVIOTrackingUnacceptable()()
{
  return ARFrame.isVIOTrackingUnacceptable()();
}

uint64_t ARFrame.getHitRay(cameraPoint:)()
{
  return ARFrame.getHitRay(cameraPoint:)();
}

Swift::Void __swiftcall CALayer.pauseAnimations()()
{
}

Swift::Void __swiftcall CALayer.resumeAnimations()()
{
}

uint64_t CGPoint.debugDescription.getter()
{
  return CGPoint.debugDescription.getter();
}

uint64_t static CGPoint.distanceSq(_:_:)()
{
  return static CGPoint.distanceSq(_:_:)();
}

uint64_t CGPoint.elementSum()()
{
  return CGPoint.elementSum()();
}

uint64_t CGPoint.normalized()()
{
  return CGPoint.normalized()();
}

uint64_t static CGPoint.- prefix(_:)()
{
  return static CGPoint.- prefix(_:)();
}

uint64_t CGPoint.init(xy:)()
{
  return CGPoint.init(xy:)();
}

uint64_t CGPoint.add(_:)()
{
  return CGPoint.add(_:)();
}

uint64_t CGPoint.divide(by:)()
{
  return CGPoint.divide(by:)();
}

uint64_t CGPoint.floats.getter()
{
  return CGPoint.floats.getter();
}

Swift::Float __swiftcall CGPoint.length()()
{
  CGPoint.length()();
  return result;
}

uint64_t CGPoint.lerped<A>(newValue:t:)()
{
  return CGPoint.lerped<A>(newValue:t:)();
}

uint64_t static CGPoint.distance(_:_:)()
{
  return static CGPoint.distance(_:_:)();
}

uint64_t CGPoint.multiply(by:)()
{
  return CGPoint.multiply(by:)();
}

uint64_t CGPoint.subtract(_:)()
{
  return CGPoint.subtract(_:)();
}

uint64_t CGPoint.init(_:)()
{
  return CGPoint.init(_:)();
}

{
  return CGPoint.init(_:)();
}

uint64_t static CGPoint.+ infix(_:_:)()
{
  return static CGPoint.+ infix(_:_:)();
}

uint64_t static CGPoint.- infix(_:_:)()
{
  return static CGPoint.- infix(_:_:)();
}

Swift::Bool __swiftcall SCNNode.isDecendent(of:)(SCNNode of)
{
  return SCNNode.isDecendent(of:)(of.super.isa);
}

uint64_t SCNNode.boundingSize.getter()
{
  return SCNNode.boundingSize.getter();
}

Swift::Void __swiftcall SCNNode.removeAllChildren()()
{
}

uint64_t SCNNode.setForwardDirection(direction:)()
{
  return SCNNode.setForwardDirection(direction:)();
}

UIColor __swiftcall UIColor.init(argb:)(Swift::UInt32 argb)
{
  return (UIColor)UIColor.init(argb:)(*(void *)&argb);
}

uint64_t UIColor.rgba.getter()
{
  return UIColor.rgba.getter();
}

UIColor __swiftcall UIColor.init(_colorLiteralRed:green:blue:alpha:)(Swift::Float _colorLiteralRed, Swift::Float green, Swift::Float blue, Swift::Float alpha)
{
  return (UIColor)UIColor.init(_colorLiteralRed:green:blue:alpha:)(_colorLiteralRed, green, blue, alpha);
}

uint64_t UIImage.rotated(to:)()
{
  return UIImage.rotated(to:)();
}

uint64_t ARCamera.TrackingState.description.getter()
{
  return ARCamera.TrackingState.description.getter();
}

uint64_t ARCamera.TrackingState.analyticsDescription.getter()
{
  return ARCamera.TrackingState.analyticsDescription.getter();
}

uint64_t static ARCamera.TrackingState.== infix(_:_:)()
{
  return static ARCamera.TrackingState.== infix(_:_:)();
}

uint64_t type metadata accessor for ARCamera.TrackingState.Reason()
{
  return type metadata accessor for ARCamera.TrackingState.Reason();
}

uint64_t type metadata accessor for ARCamera.TrackingState()
{
  return type metadata accessor for ARCamera.TrackingState();
}

uint64_t ARCamera.trackingState.getter()
{
  return ARCamera.trackingState.getter();
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)NSNumber.init(floatLiteral:)(floatLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t static NSThread.prettyPrintCallStack(toDepth:)()
{
  return static NSThread.prettyPrintCallStack(toDepth:)();
}

uint64_t static UIDevice.isDeviceQualified(family:minVersion:)()
{
  return static UIDevice.isDeviceQualified(family:minVersion:)();
}

uint64_t static UIDevice.shouldLockFramerate()()
{
  return static UIDevice.shouldLockFramerate()();
}

uint64_t static UIDevice.hasHWAcceleratedFeatureDetection()()
{
  return static UIDevice.hasHWAcceleratedFeatureDetection()();
}

uint64_t static UIDevice.isIPad()()
{
  return static UIDevice.isIPad()();
}

uint64_t static UIDevice.isIPhone()()
{
  return static UIDevice.isIPhone()();
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return type metadata accessor for NSRunLoop.SchedulerOptions();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t StringProtocol.write(to:atomically:encoding:)()
{
  return StringProtocol.write(to:atomically:encoding:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of AnyKeyPath._kvcKeyPathString.getter()
{
  return dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
}

uint64_t dispatch thunk of static AnyKeyPath._rootAndValueType.getter()
{
  return dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
}

uint64_t static AnyKeyPath.== infix(_:_:)()
{
  return static AnyKeyPath.== infix(_:_:)();
}

uint64_t type metadata accessor for AnyKeyPath()
{
  return type metadata accessor for AnyKeyPath();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return static __CocoaSet.Index.== infix(_:_:)();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return __CocoaSet.endIndex.getter();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static CommandLine.unsafeArgv.getter()
{
  return static CommandLine.unsafeArgv.getter();
}

uint64_t static CommandLine.argc.getter()
{
  return static CommandLine.argc.getter();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

Swift::Void __swiftcall _NativeDictionary.removeAll(isUnique:)(Swift::Bool isUnique)
{
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)()
{
  return KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)()
{
  return dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t SIMD.description.getter()
{
  return SIMD.description.getter();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t static SIMD2<>.average(_:)()
{
  return static SIMD2<>.average(_:)();
}

uint64_t SIMD2<>.init(_:)()
{
  return SIMD2<>.init(_:)();
}

{
  return SIMD2<>.init(_:)();
}

uint64_t SIMD3.debugDescription.getter()
{
  return SIMD3.debugDescription.getter();
}

uint64_t SIMD3<>.isAlmostVertical(withinDegrees:)()
{
  return SIMD3<>.isAlmostVertical(withinDegrees:)();
}

uint64_t SIMD3<>.isAlmostHorizontal(withinDegrees:)()
{
  return SIMD3<>.isAlmostHorizontal(withinDegrees:)();
}

uint64_t SIMD3<>.up.unsafeMutableAddressor()
{
  return SIMD3<>.up.unsafeMutableAddressor();
}

uint64_t SIMD3<>.zero.unsafeMutableAddressor()
{
  return SIMD3<>.zero.unsafeMutableAddressor();
}

uint64_t static SIMD3<>.average(_:)()
{
  return static SIMD3<>.average(_:)();
}

uint64_t SIMD3<>.forward.unsafeMutableAddressor()
{
  return SIMD3<>.forward.unsafeMutableAddressor();
}

uint64_t SIMD3<>.init(_:)()
{
  return SIMD3<>.init(_:)();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t ARCameraImageToViewTransform()
{
  return _ARCameraImageToViewTransform();
}

uint64_t ARReplaySensorClassForMovieURL()
{
  return _ARReplaySensorClassForMovieURL();
}

uint64_t ARViewToCameraImageTransform()
{
  return _ARViewToCameraImageTransform();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

CFTimeInterval CACurrentMediaTime(void)
{
  return _CACurrentMediaTime();
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform(CATransform3D *__return_ptr retstr, CGAffineTransform *m)
{
  return _CATransform3DMakeAffineTransform(retstr, m);
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return _CATransform3DMakeRotation(retstr, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return _CATransform3DMakeScale(retstr, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DMakeTranslation(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return _CATransform3DMakeTranslation(retstr, tx, ty, tz);
}

CATransform3D *__cdecl CATransform3DScale(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return _CATransform3DScale(retstr, t, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return _CATransform3DTranslate(retstr, t, tx, ty, tz);
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return _CGAffineTransformConcat(retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return _CGAffineTransformInvert(retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return _CGAffineTransformMakeRotation(retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformMakeTranslation(retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformScale(retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return _CGAffineTransformTranslate(retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return _CGBitmapContextCreate(data, width, height, bitsPerComponent, bytesPerRow, space, bitmapInfo);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return _CGColorSpaceCreateDeviceGray();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return _CGColorSpaceCreateDeviceRGB();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return _CGColorSpaceCreateWithName(name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return _CGColorSpaceGetModel(space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return _CGDataProviderCreateWithCFData(data);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return _CGImageCreate(width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, bitmapInfo, provider, decode, shouldInterpolate, intent);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return _CGImageCreateWithImageInRect(image, rect);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return _CGImageGetColorSpace(image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

void CGImageRelease(CGImageRef image)
{
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCopyPropertiesAtIndex(isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCreateThumbnailAtIndex(isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithData(data, options);
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  CGPoint v4 = _CGPointApplyAffineTransform(point, t);
  double y = v4.y;
  double x = v4.x;
  result.double y = y;
  result.double x = x;
  return result;
}

CGPoint CGPointFromString(NSString *string)
{
  CGPoint v3 = _CGPointFromString(string);
  double y = v3.y;
  double x = v3.x;
  result.double y = y;
  result.double x = x;
  return result;
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  return _CGRectApplyAffineTransform(rect, t);
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return _CGRectContainsPoint(rect, point);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  return _CGRectGetMaxX(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  return _CGRectGetMidX(rect);
}

CGFloat CGRectGetMidY(CGRect rect)
{
  return _CGRectGetMidY(rect);
}

CGFloat CGRectGetMinX(CGRect rect)
{
  return _CGRectGetMinX(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectInset(rect, dx, dy);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  return _CGRectOffset(rect, dx, dy);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetBaseAddress(pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetHeight(pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return _CVPixelBufferGetHeightOfPlane(pixelBuffer, planeIndex);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetPixelFormatType(pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return _CVPixelBufferGetWidth(pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return _CVPixelBufferGetWidthOfPlane(pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return _CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return _CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return _IOSurfaceGetHeight(buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return _IOSurfaceGetWidth(buffer);
}

id MTLCreateSystemDefaultDevice(void)
{
  return _MTLCreateSystemDefaultDevice();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return _NSStringFromPoint(aPoint);
}

BOOL UIAccessibilityDarkerSystemColorsEnabled(void)
{
  return _UIAccessibilityDarkerSystemColorsEnabled();
}

BOOL UIAccessibilityIsBoldTextEnabled(void)
{
  return _UIAccessibilityIsBoldTextEnabled();
}

BOOL UIAccessibilityIsInvertColorsEnabled(void)
{
  return _UIAccessibilityIsInvertColorsEnabled();
}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
}

int UIApplicationMain(int argc, char **argv, NSString *principalClassName, NSString *delegateClassName)
{
  return _UIApplicationMain(argc, argv, principalClassName, delegateClassName);
}

void UIGraphicsBeginImageContext(CGSize size)
{
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
}

void UIGraphicsEndImageContext(void)
{
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return _UIGraphicsGetCurrentContext();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return _UIGraphicsGetImageFromCurrentImageContext();
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return _UIImageJPEGRepresentation(image, compressionQuality);
}

uint64_t UIRoundToScreenScale()
{
  return _UIRoundToScreenScale();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return _VTPixelTransferSessionCreate(allocator, pixelTransferSessionOut);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return _VTPixelTransferSessionTransferImage(session, sourceBuffer, destinationBuffer);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return std::string::find(this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return std::string::rfind(this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return std::stringbuf::str();
}

{
  return std::stringbuf::str();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return std::locale::use_facet(this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return std::logic_error::logic_error(this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return std::bad_array_new_length::bad_array_new_length(this);
}

std::string::reference std::string::at(std::string *this, std::string::size_type __n)
{
  return std::string::at(this, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return std::string::append(this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return std::string::append(this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return std::string::append(this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return std::string::assign(this, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::filebuf::open()
{
  return std::filebuf::open();
}

uint64_t std::filebuf::close()
{
  return std::filebuf::close();
}

uint64_t std::filebuf::basic_filebuf()
{
  return std::filebuf::basic_filebuf();
}

uint64_t std::filebuf::~filebuf()
{
  return std::filebuf::~filebuf();
}

uint64_t std::istream::sentry::sentry()
{
  return std::istream::sentry::sentry();
}

uint64_t std::istream::~istream()
{
  return std::istream::~istream();
}

uint64_t std::istream::operator>>()
{
  return std::istream::operator>>();
}

uint64_t std::ostream::put()
{
  return std::ostream::put();
}

uint64_t std::ostream::flush()
{
  return std::ostream::flush();
}

uint64_t std::ostream::sentry::sentry()
{
  return std::ostream::sentry::sentry();
}

uint64_t std::ostream::sentry::~sentry()
{
  return std::ostream::sentry::~sentry();
}

uint64_t std::ostream::~ostream()
{
  return std::ostream::~ostream();
}

uint64_t std::ostream::operator<<()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

uint64_t std::iostream::~basic_iostream()
{
  return std::iostream::~basic_iostream();
}

uint64_t std::streambuf::basic_streambuf()
{
  return std::streambuf::basic_streambuf();
}

uint64_t std::streambuf::~streambuf()
{
  return std::streambuf::~streambuf();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return std::ios::~ios();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return ___cxa_allocate_exception(thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return ___cxa_atexit(lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return ___cxa_begin_catch(a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return ___cxa_guard_acquire((uint64_t *)a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return ___error();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

__double2 __sincos_stret(double a1)
{
  __double2 v3 = ___sincos_stret(a1);
  double cosval = v3.__cosval;
  double sinval = v3.__sinval;
  result.__double cosval = cosval;
  result.__double sinval = sinval;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  __float2 v3 = ___sincosf_stret(a1);
  float cosval = v3.__cosval;
  float sinval = v3.__sinval;
  result.__float cosval = cosval;
  result.__float sinval = sinval;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return ___toupper(a1);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return __swift_stdlib_strtod_clocale();
}

void abort(void)
{
}

long double acos(long double __x)
{
  return _acos(__x);
}

float acosf(float a1)
{
  return _acosf(a1);
}

uLong adler32(uLong adler, const Bytef *buf, uInt len)
{
  return _adler32(adler, buf, len);
}

long double atan2(long double __y, long double __x)
{
  return _atan2(__y, __x);
}

float atan2f(float a1, float a2)
{
  return _atan2f(a1, a2);
}

int atoi(const char *a1)
{
  return _atoi(a1);
}

void bzero(void *a1, size_t a2)
{
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return _class_addMethod(cls, name, imp, types);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return _class_getInstanceMethod(cls, name);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return _class_replaceMethod(cls, name, imp, types);
}

float cosf(float a1)
{
  return _cosf(a1);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return _crc32(crc, buf, len);
}

int deflate(z_streamp strm, int flush)
{
  return _deflate(strm, flush);
}

int deflateEnd(z_streamp strm)
{
  return _deflateEnd(strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return _deflateInit2_(strm, level, method, windowBits, memLevel, strategy, version, stream_size);
}

int deflateReset(z_streamp strm)
{
  return _deflateReset(strm);
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  return _exp(__x);
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

int feof(FILE *a1)
{
  return _feof(a1);
}

int ferror(FILE *a1)
{
  return _ferror(a1);
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

int fgetc(FILE *a1)
{
  return _fgetc(a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return _fgets(a1, a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return _fputc(a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return _fputs(a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fread(__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

float frexpf(float a1, int *a2)
{
  return _frexpf(a1, a2);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return _fseek(a1, a2, a3);
}

uint64_t ftell(FILE *a1)
{
  return _ftell(a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

int gzclose(gzFile file)
{
  return _gzclose(file);
}

int gzeof(gzFile file)
{
  return _gzeof(file);
}

char *__cdecl gzgets(gzFile file, char *buf, int len)
{
  return _gzgets(file, buf, len);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return _gzopen(a1, a2);
}

int gzputs(gzFile file, const char *s)
{
  return _gzputs(file, s);
}

int gzrewind(gzFile file)
{
  return _gzrewind(file);
}

int inflate(z_streamp strm, int flush)
{
  return _inflate(strm, flush);
}

int inflateEnd(z_streamp strm)
{
  return _inflateEnd(strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return _inflateInit2_(strm, windowBits, version, stream_size);
}

int inflateReset(z_streamp strm)
{
  return _inflateReset(strm);
}

int inflateReset2(z_streamp strm, int windowBits)
{
  return _inflateReset2(strm, windowBits);
}

int inflateValidate(z_streamp a1, int a2)
{
  return _inflateValidate(a1, a2);
}

long double ldexp(long double __x, int __e)
{
  return _ldexp(__x, __e);
}

long double log(long double __x)
{
  return _log(__x);
}

long double log10(long double __x)
{
  return _log10(__x);
}

void longjmp(jmp_buf a1, int a2)
{
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_posix_memalign(memptr, alignment, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void method_exchangeImplementations(Method m1, Method m2)
{
}

IMP method_getImplementation(Method m)
{
  return _method_getImplementation(m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return _method_getTypeEncoding(m);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

long double pow(long double __x, long double __y)
{
  return _pow(__x, __y);
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return _pthread_getspecific(a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return _pthread_key_create(a1, a2);
}

int pthread_key_delete(pthread_key_t a1)
{
  return _pthread_key_delete(a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return _pthread_mutex_destroy(a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return _pthread_mutex_init(a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return _pthread_mutex_lock(a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return _pthread_mutex_unlock(a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return _pthread_mutexattr_destroy(a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return _pthread_mutexattr_init(a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return _pthread_mutexattr_settype(a1, a2);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return _pthread_setspecific(a1, a2);
}

void rewind(FILE *a1)
{
}

int setjmp(jmp_buf a1)
{
  return _setjmp(a1);
}

long double sin(long double __x)
{
  return _sin(__x);
}

long double sinh(long double __x)
{
  return _sinh(__x);
}

int sprintf(char *a1, const char *a2, ...)
{
  return _sprintf(a1, a2);
}

void srand48(uint64_t a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return _sscanf(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return _strcpy(__dst, __src);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return _strncpy(__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return _strrchr(__s, __c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return _strstr(__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  return _strtod(a1, a2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return _swift_dynamicCastClassUnconditional();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout3()
{
  return _swift_getTupleTypeLayout3();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_modifyAtWritableKeyPath()
{
  return _swift_modifyAtWritableKeyPath();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return _swift_setAtReferenceWritableKeyPath();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectUnownedAssign()
{
  return _swift_unknownObjectUnownedAssign();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return _swift_unknownObjectUnownedDestroy();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return _swift_unknownObjectUnownedInit();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return _swift_unknownObjectUnownedLoadStrong();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

vImage_Error vImageBufferFill_ARGB8888(const vImage_Buffer *dest, const Pixel_8888 color, vImage_Flags flags)
{
  return _vImageBufferFill_ARGB8888(dest, color, flags);
}

vImage_Error vImageConvert_Planar8toARGB8888(const vImage_Buffer *srcA, const vImage_Buffer *srcR, const vImage_Buffer *srcG, const vImage_Buffer *srcB, const vImage_Buffer *dest, vImage_Flags flags)
{
  return _vImageConvert_Planar8toARGB8888(srcA, srcR, srcG, srcB, dest, flags);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return _vsnprintf(__str, __size, __format, a4);
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _[a1 CGColor];
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _[a1 CGImage];
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _[a1 CGPath];
}

id objc_msgSend__hasHomeButton(void *a1, const char *a2, ...)
{
  return _[a1 _hasHomeButton];
}

id objc_msgSend__referenceBounds(void *a1, const char *a2, ...)
{
  return _[a1 _referenceBounds];
}

id objc_msgSend__setInterfaceOrientation_(void *a1, const char *a2, ...)
{
  return [a1 _setInterfaceOrientation:];
}

id objc_msgSend__solveForInput_(void *a1, const char *a2, ...)
{
  return [a1 _solveForInput:];
}

id objc_msgSend__updateForRotation_shiftAngle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateForRotation:shiftAngle:");
}

id objc_msgSend__updateOffsetLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateOffsetLabel:");
}

id objc_msgSend_activateWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return [a1 activateWithCompletionBlock:];
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return [a1 addChildViewController:];
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return [a1 addGestureRecognizer:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:selector:name:object:];
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return [a1 addSublayer:];
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return [a1 addSubview:];
}

id objc_msgSend_addToRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return [a1 addToRunLoop:forMode:];
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return [a1 animateAlongsideTransition:];
}

id objc_msgSend_attitude(void *a1, const char *a2, ...)
{
  return _[a1 attitude];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_bezierPathWithOvalInRect_(void *a1, const char *a2, ...)
{
  return [a1 bezierPathWithOvalInRect:];
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _[a1 blackColor];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return [a1 BOOLForKey:];
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _[a1 bounds];
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _[a1 center];
}

id objc_msgSend_childViewControllers(void *a1, const char *a2, ...)
{
  return _[a1 childViewControllers];
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _[a1 clearColor];
}

id objc_msgSend_clone(void *a1, const char *a2, ...)
{
  return _[a1 clone];
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _[a1 commit];
}

id objc_msgSend_configure(void *a1, const char *a2, ...)
{
  return _[a1 configure];
}

id objc_msgSend_contours(void *a1, const char *a2, ...)
{
  return _[a1 contours];
}

id objc_msgSend_corners(void *a1, const char *a2, ...)
{
  return _[a1 corners];
}

id objc_msgSend_correctionRotationAngleForReferenceOrientation_targetOrientation_(void *a1, const char *a2, ...)
{
  return [a1 correctionRotationAngleForReferenceOrientation:targetOrientation:];
}

id objc_msgSend_correctionRotationBoundsForReferenceOrientation_targetOrientation_bounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "correctionRotationBoundsForReferenceOrientation:targetOrientation:bounds:");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_counterRotateChildrenForBoundsOrOrientationChange(void *a1, const char *a2, ...)
{
  return _[a1 counterRotateChildrenForBoundsOrOrientationChange];
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _[a1 currentDevice];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytes:length:];
}

id objc_msgSend_deactivate(void *a1, const char *a2, ...)
{
  return _[a1 deactivate];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultConfiguration];
}

id objc_msgSend_deviceMotion(void *a1, const char *a2, ...)
{
  return _[a1 deviceMotion];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return [a1 didMoveToParentViewController:];
}

id objc_msgSend_displayLinkWithTarget_selector_(void *a1, const char *a2, ...)
{
  return [a1 displayLinkWithTarget:selector:];
}

id objc_msgSend_filterWithType_(void *a1, const char *a2, ...)
{
  return [a1 filterWithType:];
}

id objc_msgSend_floatForKey_(void *a1, const char *a2, ...)
{
  return [a1 floatForKey:];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_functionWithName_(void *a1, const char *a2, ...)
{
  return [a1 functionWithName:];
}

id objc_msgSend_getRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return [a1 getRed:green:blue:alpha:];
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _[a1 image];
}

id objc_msgSend_imageWithCGImage_(void *a1, const char *a2, ...)
{
  return [a1 imageWithCGImage:];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCapacity:];
}

id objc_msgSend_initWithConfiguration_view_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfiguration:view:];
}

id objc_msgSend_initWithContours_originalImageSize_(void *a1, const char *a2, ...)
{
  return [a1 initWithContours:originalImageSize:];
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return [a1 initWithFrame:];
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return [a1 initWithImage:];
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return [a1 initWithTarget:action:];
}

id objc_msgSend_interfaceLockedToPortrait(void *a1, const char *a2, ...)
{
  return _[a1 interfaceLockedToPortrait];
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _[a1 interfaceOrientation];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_isAutorotationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isAutorotationEnabled];
}

id objc_msgSend_isOverriddingStatusBarOrientation(void *a1, const char *a2, ...)
{
  return _[a1 isOverriddingStatusBarOrientation];
}

id objc_msgSend_isViewLoaded(void *a1, const char *a2, ...)
{
  return _[a1 isViewLoaded];
}

id objc_msgSend_labelFont(void *a1, const char *a2, ...)
{
  return _[a1 labelFont];
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _[a1 layer];
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringForKey:value:table:];
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringWithFormat:];
}

id objc_msgSend_lockRendererOrientation(void *a1, const char *a2, ...)
{
  return _[a1 lockRendererOrientation];
}

id objc_msgSend_lockedOrientation(void *a1, const char *a2, ...)
{
  return _[a1 lockedOrientation];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _[a1 mainScreen];
}

id objc_msgSend_multiplyByInverseOfAttitude_(void *a1, const char *a2, ...)
{
  return [a1 multiplyByInverseOfAttitude];
}

id objc_msgSend_notifyViewHidden(void *a1, const char *a2, ...)
{
  return _[a1 notifyViewHidden];
}

id objc_msgSend_notifyViewShown(void *a1, const char *a2, ...)
{
  return _[a1 notifyViewShown];
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return [a1 numberWithFloat:];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndex:];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndexedSubscript:];
}

id objc_msgSend_orientation(void *a1, const char *a2, ...)
{
  return _[a1 orientation];
}

id objc_msgSend_orientationLockedView(void *a1, const char *a2, ...)
{
  return _[a1 orientationLockedView];
}

id objc_msgSend_orientationToLockTo(void *a1, const char *a2, ...)
{
  return _[a1 orientationToLockTo];
}

id objc_msgSend_originalImageSize(void *a1, const char *a2, ...)
{
  return _[a1 originalImageSize];
}

id objc_msgSend_performWhileInterfaceOrientationLocked_(void *a1, const char *a2, ...)
{
  return [a1 performWhileInterfaceOrientationLocked:];
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return [a1 performWithoutAnimation:];
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return [a1 registerDefaults:];
}

id objc_msgSend_removeFromRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return [a1 removeFromRunLoop:forMode:];
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver];
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:name:object:];
}

id objc_msgSend_renderer(void *a1, const char *a2, ...)
{
  return _[a1 renderer];
}

id objc_msgSend_rotationAngleForOrientation_(void *a1, const char *a2, ...)
{
  return [a1 rotationAngleForOrientation:];
}

id objc_msgSend_rotationMatrix(void *a1, const char *a2, ...)
{
  return _[a1 rotationMatrix];
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return [a1 scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:];
}

id objc_msgSend_setAllowsEdgeAntialiasing_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsEdgeAntialiasing:];
}

id objc_msgSend_setAnchorPoint_(void *a1, const char *a2, ...)
{
  return [a1 setAnchorPoint:];
}

id objc_msgSend_setAutoresizingMask_(void *a1, const char *a2, ...)
{
  return [a1 setAutoresizingMask:];
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return [a1 setBackgroundColor:];
}

id objc_msgSend_setCenter_(void *a1, const char *a2, ...)
{
  return [a1 setCenter:];
}

id objc_msgSend_setClipsToBounds_(void *a1, const char *a2, ...)
{
  return [a1 setClipsToBounds:];
}

id objc_msgSend_setCompositingFilter_(void *a1, const char *a2, ...)
{
  return [a1 setCompositingFilter:];
}

id objc_msgSend_setDeviceMotionUpdateInterval_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceMotionUpdateInterval:];
}

id objc_msgSend_setDisableActions_(void *a1, const char *a2, ...)
{
  return [a1 setDisableActions:];
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return [a1 setFillColor:];
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return [a1 setFont:];
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return [a1 setFrame:];
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return [a1 setHidden:];
}

id objc_msgSend_setHoldAttitude_(void *a1, const char *a2, ...)
{
  return [a1 setHoldAttitude:];
}

id objc_msgSend_setIdleTimerDisabled_(void *a1, const char *a2, ...)
{
  return [a1 setIdleTimerDisabled:];
}

id objc_msgSend_setInterfaceLockedToPortrait_(void *a1, const char *a2, ...)
{
  return [a1 setInterfaceLockedToPortrait:];
}

id objc_msgSend_setOverriddenStatusBarOrientation_(void *a1, const char *a2, ...)
{
  return [a1 setOverriddenStatusBarOrientation];
}

id objc_msgSend_setOverriddingStatusBarOrientation_(void *a1, const char *a2, ...)
{
  return [a1 setOverriddingStatusBarOrientation:];
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return [a1 setPath:];
}

id objc_msgSend_setPosition_(void *a1, const char *a2, ...)
{
  return [a1 setPosition:];
}

id objc_msgSend_setPreviousOrientation_(void *a1, const char *a2, ...)
{
  return [a1 setPreviousOrientation];
}

id objc_msgSend_setShowsDeviceMovementDisplay_(void *a1, const char *a2, ...)
{
  return [a1 setShowsDeviceMovementDisplay:];
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return [a1 setText:];
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return [a1 setTextColor:];
}

id objc_msgSend_setTransform_(void *a1, const char *a2, ...)
{
  return [a1 setTransform:];
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _[a1 sharedApplication];
}

id objc_msgSend_sizeToFit(void *a1, const char *a2, ...)
{
  return _[a1 sizeToFit];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_startDeviceMotionUpdatesUsingReferenceFrame_(void *a1, const char *a2, ...)
{
  return [a1 startDeviceMotionUpdatesUsingReferenceFrame:];
}

id objc_msgSend_statusBarOrientation(void *a1, const char *a2, ...)
{
  return _[a1 statusBarOrientation];
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _[a1 superview];
}

id objc_msgSend_systemGreenColor(void *a1, const char *a2, ...)
{
  return _[a1 systemGreenColor];
}

id objc_msgSend_systemRedColor(void *a1, const char *a2, ...)
{
  return _[a1 systemRedColor];
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _[a1 traitCollection];
}

id objc_msgSend_transitionCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 transitionCoordinator];
}

id objc_msgSend_tweakedConfigurationForCaller_usage_(void *a1, const char *a2, ...)
{
  return [a1 tweakedConfigurationForCaller:usage:];
}

id objc_msgSend_updateColors(void *a1, const char *a2, ...)
{
  return _[a1 updateColors];
}

id objc_msgSend_updateDegreesLabel(void *a1, const char *a2, ...)
{
  return _[a1 updateDegreesLabel];
}

id objc_msgSend_updateLevelWithForcedInterfaceUpdate_(void *a1, const char *a2, ...)
{
  return [a1 updateLevelWithForcedInterfaceUpdate:];
}

id objc_msgSend_updateTicsForOrientation_(void *a1, const char *a2, ...)
{
  return [a1 updateTicsForOrientation:];
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _[a1 userInterfaceIdiom];
}

id objc_msgSend_valueWithCGPoint_(void *a1, const char *a2, ...)
{
  return [a1 valueWithCGPoint:];
}

id objc_msgSend_verticalSizeClass(void *a1, const char *a2, ...)
{
  return _[a1 verticalSizeClass];
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _[a1 view];
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _[a1 whiteColor];
}

id objc_msgSend_xxx_sizeThatFits_(void *a1, const char *a2, ...)
{
  return [a1 xxx_sizeThatFits:];
}