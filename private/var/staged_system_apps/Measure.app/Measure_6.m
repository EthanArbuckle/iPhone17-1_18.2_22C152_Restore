void sub_1002FF260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  sub_1002D1A1C(&a41);
  sub_1000094F4((uint64_t)&a53);
  sub_1000094F4(v53 - 224);
  sub_10020FA00(v53 - 120);
  _Unwind_Resume(a1);
}

void sub_1002FF97C(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = sub_10029A230((_DWORD *)a1);
  if (a2 < 0 && v6 == 0x10000)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    long long v8 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v7;
    *(_OWORD *)(a3 + 16) = v8;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v7 + 32);
    uint64_t v9 = *(void *)(v7 + 56);
    *(void *)(a3 + 48) = *(void *)(v7 + 48);
    *(void *)(a3 + 56) = v9;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 64) = a3 + 8;
    *(void *)(a3 + 72) = a3 + 80;
    *(void *)(a3 + 88) = 0;
    if (v9) {
      atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 1u);
    }
    if (*(int *)(v7 + 4) > 2)
    {
      *(_DWORD *)(a3 + 4) = 0;
      sub_1002931A8(a3, v7);
    }
    else
    {
      v10 = *(void **)(v7 + 72);
      v11 = *(void **)(a3 + 72);
      void *v11 = *v10;
      v11[1] = v10[1];
    }
  }
  else
  {
    sub_100299554(a1, a2, a3);
  }
}

uint64_t sub_1002FFA74()
{
  return 0;
}

uint64_t sub_1002FFCD0(uint64_t a1, int a2, int a3, uint64_t a4, float32x2_t *a5, char a6)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 40) = a6;
  sub_100300044(a1);
  if (a5)
  {
    float64x2_t v29 = vcvtq_f64_f32(*a5);
    double v30 = a5[1].f32[0];
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2FC0, memory_order_acquire)) {
      goto LABEL_5;
    }
  }
  else
  {
    float64x2_t v29 = (float64x2_t)xmmword_1004F73E0;
    double v30 = *(double *)&qword_1004F73F0;
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2FC0, memory_order_acquire)) {
      goto LABEL_5;
    }
  }
  if (__cxa_guard_acquire(&qword_1004D2FC0))
  {
    sub_1002C7414(&qword_1004D2FB8, 4096);
    __cxa_guard_release(&qword_1004D2FC0);
  }
LABEL_5:
  if (dword_1004D2FB0 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v22 = a1 + 4 * a3;
    uint64_t v23 = a1 + 4 * (a3 ^ 2);
    v10 = (uint64_t *)&v29;
    uint64_t v11 = 1;
    do
    {
      float64x2_t v27 = 0uLL;
      uint64_t v12 = (v11 - 1);
      v28[0] = 0;
      if (a4)
      {
        v13 = (float32x2_t *)(a4 + 4 * v12);
        float64x2_t v27 = vcvtq_f64_f32(*v13);
        *(double *)v28 = v13[1].f32[0];
      }
      else
      {
        v14 = &byte_1004F7270[8 * v12];
        if (v14 + 400 != (char *)&v27) {
          v27.f64[0] = *((float64_t *)v14 + 50);
        }
        v15 = (float64_t *)(v14 + 408);
        if (v15 != &v27.f64[1]) {
          v27.f64[1] = *v15;
        }
        v16 = (unint64_t *)&byte_1004F7270[8 * v12 + 416];
        if (v16 != v28) {
          v28[0] = *v16;
        }
      }
      sub_1002C79DC(&qword_1004D2FB8, (unint64_t *)&v27, &v26);
      sub_1002C7C94(&v26, v10, (unint64_t *)v25);
      *(_DWORD *)(v23 + 4 * v11) = sub_1002C7638(v25);
      sub_1002C79DC(&qword_1004D2FB8, (unint64_t *)&v27.f64[1], &v26);
      sub_1002C7C94(&v26, v10, (unint64_t *)v25);
      uint64_t v17 = a1 + 4 * v11;
      *(_DWORD *)(v17 + 4) = sub_1002C7638(v25);
      v18 = (_DWORD *)(v17 + 4);
      sub_1002C79DC(&qword_1004D2FB8, v28, &v26);
      sub_1002C7C94(&v26, v10, (unint64_t *)v25);
      *(_DWORD *)(v22 + 4 * v11) = sub_1002C7638(v25);
      int v19 = *(_DWORD *)(a1 + 4 * v12 + 4);
      if (v19 < 0
        || (*v18 & 0x80000000) != 0
        || (int v20 = *(_DWORD *)(a1 + 4 * (v11 + 1) + 4), v20 < 0)
        || (*v18 + v19 + v20) >= 0x2000)
      {
        v25[0] = 0;
        v25[1] = 0;
        qmemcpy((void *)sub_1002D19D8(v25, 128), "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && coeffs[i*3] + coeffs[i*3+1] + coeffs[i*3+2] < 2*(1 << xyz_shift)", 128);
        sub_1002D2278(-215, v25, "RGB2Lab_b", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 6378);
      }
      ++v9;
      v11 += 3;
      ++v10;
    }
    while (v9 < dword_1004D2FB0);
  }
  return a1;
}

void sub_1002FFFFC(_Unwind_Exception *a1)
{
}

void sub_100300014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100300044(uint64_t a1)
{
  uint64_t result = __chkstk_darwin(a1);
  if ((byte_1004F7270[0] & 1) == 0)
  {
    bzero(v71, 0x1004uLL);
    bzero(v70, 0x1004uLL);
    bzero(v69, 0x1004uLL);
    LODWORD(v61[0]) = 1065353216;
    LODWORD(v60) = dword_1004F7274;
    sub_1002C70C8((int *)v61, (unsigned int *)&v60, &v59);
    uint64_t v2 = -1025;
    for (i = (unint64_t *)v71; ; i = (unint64_t *)((char *)i + 4))
    {
      sub_1002C6CF0((unsigned int *)&v60, v2 + 1025);
      sub_1002C6E7C(&v59, (int *)&v60, v61);
      if (sub_1002C739C((unsigned int *)v61, &dword_1004F7290)) {
        sub_1002C8054((uint64_t)v61, dword_1004F7294, &dword_1004F7294[1], (int *)&v60);
      }
      else {
        sub_1002C9A94((unint64_t *)v61, (int *)&v60);
      }
      if (i != &v60) {
        *(_DWORD *)i = v60;
      }
      BOOL v4 = __CFADD__(v2++, 1);
      if (v4)
      {
        qword_1004F7310 = (uint64_t)sub_100302434((uint64_t)v71);
        LODWORD(v60) = 1065353216;
        LODWORD(v72) = 1149239296;
        sub_1002C70C8((int *)&v60, (unsigned int *)&v72, v61);
        uint64_t v5 = 0;
        int v59 = v61[0];
        for (uint64_t j = -1025; ; ++j)
        {
          sub_1002C6CF0((unsigned int *)&v60, j + 1025);
          sub_1002C6E7C(&v59, (int *)&v60, v61);
          unsigned int v58 = v61[0];
          sub_1003026BC(&v60, &v58);
          if (&v70[v5] != (unsigned char *)&v60) {
            *(_DWORD *)&v70[v5] = v60;
          }
          unsigned int v57 = v61[0];
          sub_100302784(&v60, &v57);
          if (&v69[v5] != (unsigned char *)&v60) {
            *(_DWORD *)&v69[v5] = v60;
          }
          v5 += 4;
          BOOL v4 = __CFADD__(j, 1);
          if (v4)
          {
            qword_1004F7318 = (uint64_t)sub_100302434((uint64_t)v70);
            qword_1004F7320 = (uint64_t)sub_100302434((uint64_t)v69);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7328, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1004F7328))
            {
              sub_1002C6CF0(&dword_1004F72A0, 2040);
              __cxa_guard_release(&qword_1004F7328);
            }
            for (uint64_t k = 0; k != 256; ++k)
            {
              sub_1002C6CF0((unsigned int *)&v60, k);
              sub_1002C70C8((int *)&v60, (unsigned int *)&dword_1004F729C, v61);
              unsigned int v56 = v61[0];
              sub_1003026BC(&v72, &v56);
              sub_1002C6E7C((int *)&dword_1004F72A0, (int *)&v72, &v60);
              __int16 v8 = sub_1002C757C((unsigned int *)&v60);
              uint64_t v9 = &byte_1004F7270[2 * k];
              *((_WORD *)v9 + 276) = v8;
              *((_WORD *)v9 + 532) = 8 * k;
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7330, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1004F7330))
            {
              LODWORD(v61[0]) = 1065353216;
              sub_1002C6CF0((unsigned int *)&v60, 4096);
              sub_1002C70C8((int *)v61, (unsigned int *)&v60, &dword_1004F72A4);
              __cxa_guard_release(&qword_1004F7330);
            }
            for (uint64_t m = 0; m != 4096; ++m)
            {
              sub_1002C6CF0((unsigned int *)&v60, m);
              sub_1002C6E7C(&dword_1004F72A4, (int *)&v60, v61);
              unsigned int v55 = v61[0];
              sub_100302784(&v72, &v55);
              sub_1002C6E7C(&dword_1004F729C, (int *)&v72, &v60);
              word_1004E1A70[m] = sub_1002C757C((unsigned int *)&v60);
              sub_1002C6E7C(&dword_1004F729C, (int *)v61, &v60);
              word_1004E3A70[m] = sub_1002C7508((int *)&v60);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7338, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1004F7338))
            {
              *(float *)&dword_1004F72A8 = 1.0 / (float)(*(float *)&dword_1004F729C * 8.0);
              __cxa_guard_release(&qword_1004F7338);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7340, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1004F7340))
            {
              sub_1002C6CF0(&dword_1004F72AC, 0x8000);
              __cxa_guard_release(&qword_1004F7340);
            }
            for (uint64_t n = 0; n != 3072; ++n)
            {
              sub_1002C6CF0((unsigned int *)&v60, n);
              sub_1002C6E7C(&dword_1004F72A8, (int *)&v60, v61);
              if (sub_1002C739C((unsigned int *)v61, &dword_1004F7290)) {
                sub_1002C8054((uint64_t)v61, dword_1004F7294, &dword_1004F7294[1], (int *)&v72);
              }
              else {
                sub_1002C9A94((unint64_t *)v61, (int *)&v72);
              }
              sub_1002C6E7C((int *)&dword_1004F72AC, (int *)&v72, &v60);
              word_1004E5A70[n] = sub_1002C757C((unsigned int *)&v60);
            }
            int v12 = 0;
            int v13 = 0;
            int v14 = 0;
            unint64_t v15 = 0;
            v16 = &word_1004F789A;
            do
            {
              if (v15 > 0x14)
              {
                sub_1002C6CF0((unsigned int *)&v72, v12);
                sub_1002C6CF0((unsigned int *)&v68, 29580);
                sub_1002C70C8((int *)&v72, (unsigned int *)&v68, &v60);
                sub_1002C6CF0((unsigned int *)&v66, 0x40000);
                sub_1002C6CF0(&v65, 116);
                sub_1002C70C8((int *)&v66, &v65, &v67);
                sub_1002C6E34((unsigned int *)&v60, (unsigned int *)&v67, (int *)v61);
                __int16 v17 = sub_1002C757C((unsigned int *)v61);
                sub_1002C6E7C((int *)v61, (int *)v61, &v68);
                sub_1002C6E7C((int *)&v68, (int *)v61, &v72);
                sub_1002C6CF0((unsigned int *)&v67, 0x10000000);
                sub_1002C70C8((int *)&v72, (unsigned int *)&v67, &v60);
                __int16 v18 = sub_1002C757C((unsigned int *)&v60);
              }
              else
              {
                sub_1002C6CF0((unsigned int *)&v60, v13);
                sub_1002C6CF0((unsigned int *)&v72, 414613);
                sub_1002C70C8((int *)&v60, (unsigned int *)&v72, v61);
                __int16 v18 = sub_1002C757C((unsigned int *)v61);
                sub_1002C6CF0((unsigned int *)&v60, 0x4000);
                sub_1002C6CF0((unsigned int *)&v67, 16);
                sub_1002C6CF0((unsigned int *)&v66, 116);
                sub_1002C70C8((int *)&v67, (unsigned int *)&v66, &v68);
                sub_1002C6CF0((unsigned int *)&v64, v14);
                sub_1002C6CF0((unsigned int *)&v63, 1479);
                sub_1002C70C8(&v64, (unsigned int *)&v63, &v65);
                sub_1002C6E34((unsigned int *)&v68, &v65, (int *)&v72);
                sub_1002C6E7C((int *)&v60, (int *)&v72, v61);
                __int16 v17 = sub_1002C757C((unsigned int *)v61);
              }
              ++v15;
              v14 += 5;
              *(v16 - 1) = v18;
              __int16 *v16 = v17;
              v16 += 2;
              v13 += 2949120;
              v12 += 1638400;
            }
            while (v15 != 256);
            int v19 = sub_10020FDF8(0x24000uLL);
            uint64_t v20 = 0;
            int v21 = -879660;
            do
            {
              if (v20 - 8145 <= 3390) {
                unsigned int v22 = v21 / 841 - 290;
              }
              else {
                unsigned int v22 = ((((v20 - 8145) * (v20 - 8145)) >> 14) * (v20 - 8145)) >> 14;
              }
              v19[v20] = v22;
              v21 += 108;
              ++v20;
            }
            while (v20 != 36864);
            qword_1004F7348 = (uint64_t)v19;
            sub_1002C7414(&v68, 15);
            sub_1002C79DC((unint64_t *)&xmmword_1004F73E0 + 1, &v68, &v72);
            sub_1002C7984((unint64_t *)&xmmword_1004F73E0, &v72, &v60);
            sub_1002C7414(&v66, 3);
            sub_1002C79DC((unint64_t *)&qword_1004F73F0, &v66, &v67);
            sub_1002C7984(&v60, &v67, (unint64_t *)v61);
            sub_1002C7860(v61, &v54);
            LODWORD(v60) = 1065353216;
            LODWORD(v68) = 872415232;
            if (sub_1002C7324((unsigned int *)&v54, (unsigned int *)&v68)) {
              uint64_t v23 = &v54;
            }
            else {
              uint64_t v23 = (int *)&v68;
            }
            LODWORD(v72) = *v23;
            sub_1002C70C8((int *)&v60, (unsigned int *)&v72, v61);
            int v54 = v61[0];
            sub_1002C6CF0((unsigned int *)&v60, 52);
            sub_1002C6E7C(&v54, (int *)&v60, v61);
            sub_1002C7860((uint64_t *)&xmmword_1004F73E0, &v72);
            sub_1002C6E7C((int *)v61, (int *)&v72, &v53);
            sub_1002C6CF0((unsigned int *)&v60, 117);
            sub_1002C6E7C(&v54, (int *)&v60, v61);
            sub_1002C7860((uint64_t *)&xmmword_1004F73E0 + 1, &v72);
            sub_1002C6E7C((int *)v61, (int *)&v72, &v52);
            LODWORD(v60) = 1065353216;
            sub_1002C6CF0((unsigned int *)&v72, 4);
            sub_1002C70C8((int *)&v60, (unsigned int *)&v72, v61);
            v48 = sub_10020FDF8(0x40000uLL);
            v24 = sub_10020FDF8(0x40000uLL);
            v25 = sub_10020FDF8(0x80000uLL);
            uint64_t v50 = 0;
            uint64_t v26 = 0;
            for (ii = v48; ; ii += 256)
            {
              v28 = (int *)sub_1002C6CF0((unsigned int *)&v72, 100 * (int)v26);
              sub_1002C70C8(v28, (unsigned int *)&dword_1004F729C, &v60);
              for (juint64_t j = 0; jj != 256; ++jj)
              {
                sub_1002C6CF0((unsigned int *)&v66, jj);
                sub_1002C6E7C((int *)&v66, (int *)&dword_1004F7280, &v67);
                sub_1002C70C8((int *)&v67, (unsigned int *)&dword_1004F729C, &v68);
                sub_1002C6E34((unsigned int *)&v68, (unsigned int *)&dword_1004F7278, (int *)&v72);
                sub_1002C6CF0((unsigned int *)&v67, 9);
                sub_1002C6E7C((int *)&v60, &v53, &v65);
                sub_1002C6E34((unsigned int *)&v72, &v65, (int *)&v66);
                sub_1002C6E7C((int *)&v67, (int *)&v66, &v68);
                sub_1002C6CF0((unsigned int *)&v66, 16);
                sub_1002C6E7C((int *)&v68, (int *)&v66, &v67);
                ii[jj] = sub_1002C757C((unsigned int *)&v67);
              }
              uint64_t v30 = -256;
              uint64_t v31 = v50;
              do
              {
                sub_1002C6CF0((unsigned int *)&v66, v30 + 256);
                sub_1002C6E7C((int *)&v66, (int *)&dword_1004F728C, &v67);
                sub_1002C70C8((int *)&v67, (unsigned int *)&dword_1004F729C, &v68);
                sub_1002C6E34((unsigned int *)&v68, (unsigned int *)&dword_1004F7284, (int *)&v72);
                sub_1002C6E7C((int *)&v60, &v52, &v66);
                sub_1002C6E34((unsigned int *)&v72, (unsigned int *)&v66, (int *)&v67);
                sub_1002C70C8((int *)v61, (unsigned int *)&v67, &v68);
                if (sub_1002C7324((unsigned int *)&v68, (unsigned int *)v61)) {
                  LODWORD(v68) = v61[0];
                }
                LODWORD(v67) = LODWORD(v61[0]) ^ 0x80000000;
                if (sub_1002C739C((unsigned int *)&v68, (unsigned int *)&v67)) {
                  LODWORD(v68) = LODWORD(v61[0]) ^ 0x80000000;
                }
                sub_1002C6CF0((unsigned int *)&v66, 0x1000000);
                sub_1002C6E7C((int *)&v68, (int *)&v66, &v67);
                int v32 = sub_1002C757C((unsigned int *)&v67);
                v24[v31] = v32;
                v25[v31++] = 249600 * v32 * (int)v26;
                BOOL v4 = __CFADD__(v30++, 1);
              }
              while (!v4);
              ++v26;
              v50 += 256;
              if (v26 == 256)
              {
                qword_1004F7350 = (uint64_t)v48;
                *(void *)algn_1004F7358 = v24;
                qword_1004F7360 = (uint64_t)v25;
                v61[0] = 0x3FF0000000000000;
                sub_1002C7C94((unint64_t *)v61, (uint64_t *)&xmmword_1004F73E0, &v72);
                unint64_t v73 = 0x3FF0000000000000;
                unint64_t v60 = 0x3FF0000000000000;
                sub_1002C7C94(&v60, &qword_1004F73F0, &v74);
                sub_1002C7860((uint64_t *)&xmmword_1004F7400, v61);
                int v51 = v61[0];
                sub_1002C7860((uint64_t *)&xmmword_1004F7400 + 1, v61);
                int v49 = v61[0];
                sub_1002C7860(&qword_1004F7410, v61);
                int v47 = v61[0];
                sub_1002C79DC((unint64_t *)&qword_1004F7410, &v72, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                int v46 = v60;
                sub_1002C79DC((unint64_t *)&xmmword_1004F7400 + 1, &v72, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                int v45 = v60;
                sub_1002C79DC((unint64_t *)&xmmword_1004F7400, &v72, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                int v44 = v60;
                sub_1002C7860((uint64_t *)&qword_1004F7418, v61);
                int v43 = v61[0];
                sub_1002C7860((uint64_t *)&qword_1004F7420, v61);
                int v42 = v61[0];
                sub_1002C7860(&qword_1004F7428, v61);
                int v33 = v61[0];
                sub_1002C79DC((unint64_t *)&qword_1004F7428, &v73, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                int v34 = v60;
                sub_1002C79DC(&qword_1004F7420, &v73, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                int v35 = v60;
                sub_1002C79DC(&qword_1004F7418, &v73, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                int v36 = v60;
                sub_1002C7860((uint64_t *)&xmmword_1004F7430, v61);
                int v37 = v61[0];
                sub_1002C7860((uint64_t *)&xmmword_1004F7430 + 1, v61);
                int v38 = v61[0];
                sub_1002C7860(&qword_1004F7440, v61);
                int v39 = v61[0];
                sub_1002C79DC((unint64_t *)&qword_1004F7440, &v74, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                int v40 = v60;
                sub_1002C79DC((unint64_t *)&xmmword_1004F7430 + 1, &v74, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                int v41 = v60;
                sub_1002C79DC((unint64_t *)&xmmword_1004F7430, &v74, (unint64_t *)v61);
                sub_1002C7860(v61, &v60);
                v62[277] = v46;
                v62[276] = v45;
                v62[275] = v44;
                v62[274] = v34;
                v62[273] = v35;
                v62[272] = v36;
                v62[271] = v40;
                v62[270] = v41;
                v62[269] = v60;
                v62[268] = v47;
                v62[267] = v49;
                v62[266] = v51;
                v62[265] = v33;
                v62[264] = v42;
                v62[263] = v43;
                v62[262] = v39;
                v62[261] = v38;
                v62[260] = v37;
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7368, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F7368))
                {
                  sub_1002C6CF0(&dword_1004F72B0, 32);
                  __cxa_guard_release(&qword_1004F7368);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7370, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F7370))
                {
                  sub_1002C6CF0(&dword_1004F72B4, 116);
                  __cxa_guard_release(&qword_1004F7370);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7378, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F7378))
                {
                  sub_1002C6CF0(&dword_1004F72B8, 16);
                  __cxa_guard_release(&qword_1004F7378);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7380, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F7380))
                {
                  sub_1002C6CF0(&dword_1004F72BC, 500);
                  __cxa_guard_release(&qword_1004F7380);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7388, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F7388))
                {
                  sub_1002C6CF0(&dword_1004F72C0, 200);
                  __cxa_guard_release(&qword_1004F7388);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7390, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F7390))
                {
                  sub_1002C6CF0(&dword_1004F72C4, 100);
                  __cxa_guard_release(&qword_1004F7390);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F7398, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F7398))
                {
                  sub_1002C6CF0(&dword_1004F72C8, 128);
                  __cxa_guard_release(&qword_1004F7398);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F73A0, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F73A0))
                {
                  sub_1002C6CF0(&dword_1004F72CC, 256);
                  __cxa_guard_release(&qword_1004F73A0);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F73A8, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F73A8))
                {
                  sub_1002C6CF0(&dword_1004F72D0, 0x4000);
                  __cxa_guard_release(&qword_1004F73A8);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F73B0, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F73B0))
                {
                  sub_1002C6CF0((unsigned int *)v61, 24389);
                  sub_1002C6CF0((unsigned int *)&v60, 27);
                  sub_1002C70C8((int *)v61, (unsigned int *)&v60, &dword_1004F72D4);
                  __cxa_guard_release(&qword_1004F73B0);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F73B8, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F73B8))
                {
                  sub_1002C6CF0((unsigned int *)v61, 9);
                  sub_1002C6CF0((unsigned int *)&v60, 4);
                  sub_1002C70C8((int *)v61, (unsigned int *)&v60, &dword_1004F72D8);
                  __cxa_guard_release(&qword_1004F73B8);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F73C0, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_1004F73C0))
                {
                  sub_1002C6CF0(&dword_1004F72DC, 15);
                  __cxa_guard_release(&qword_1004F73C0);
                }
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004F73C8, memory_order_acquire) & 1) == 0)
                {
                  if (__cxa_guard_acquire(&qword_1004F73C8))
                  {
                    sub_1002C6CF0((unsigned int *)&unk_1004F72E0, 3);
                    __cxa_guard_release(&qword_1004F73C8);
                  }
                }
                v61[0] = (uint64_t)v62;
                v61[1] = 107811;
                operator new[]();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10030215C(_Unwind_Exception *a1)
{
}

void sub_100302174(_Unwind_Exception *a1)
{
}

void sub_10030218C(_Unwind_Exception *a1)
{
}

void sub_1003021A4(_Unwind_Exception *a1)
{
}

void sub_1003021BC(_Unwind_Exception *a1)
{
}

void sub_1003021D4(_Unwind_Exception *a1)
{
}

void sub_1003021EC(_Unwind_Exception *a1)
{
}

void sub_100302204(_Unwind_Exception *a1)
{
}

void sub_10030221C(_Unwind_Exception *a1)
{
}

void sub_100302234(_Unwind_Exception *a1)
{
}

void sub_10030224C(_Unwind_Exception *a1)
{
}

void sub_100302264(_Unwind_Exception *a1)
{
}

void sub_10030227C(_Unwind_Exception *a1)
{
}

void sub_100302294(_Unwind_Exception *a1)
{
}

void sub_1003022AC(_Unwind_Exception *a1)
{
}

void sub_1003022C4(_Unwind_Exception *a1)
{
}

void sub_1003022DC(_Unwind_Exception *a1)
{
}

void sub_1003022F4(_Unwind_Exception *a1)
{
}

void sub_10030230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43 != a11 && a43 != 0) {
    operator delete[]();
  }
  if (STACK[0x530] != a12 && STACK[0x530] != 0) {
    operator delete[]();
  }
  _Unwind_Resume(a1);
}

void *sub_100302434(uint64_t a1)
{
  uint64_t v2 = sub_10020FDF8(0x4000uLL);
  sub_1002C6CF0((unsigned int *)&v22, 2);
  sub_1002C6CF0((unsigned int *)&v21, 3);
  sub_1002C6CF0(&v20, 4);
  sub_1002C6CF0((unsigned int *)&v19, 0);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  *uint64_t v2 = 0;
  do
  {
    sub_1002C6E7C((int *)(a1 + v4 + 4), &v22, &v15);
    sub_1002C6E58((unsigned int *)(a1 + v4 + 8), (unsigned int *)&v15, (unsigned int *)&v16);
    sub_1002C6E34((unsigned int *)&v16, (unsigned int *)(a1 + v4), (int *)&v17);
    sub_1002C6E7C((int *)&v17, &v21, &v18);
    int v16 = 1065353216;
    uint64_t v5 = &v2[v3];
    sub_1002C6E58(&v20, (unsigned int *)&v2[v3], (unsigned int *)&v15);
    sub_1002C70C8(&v16, (unsigned int *)&v15, &v17);
    if (&v2[v3 + 2] != (void *)&v17) {
      v5[4] = v17;
    }
    sub_1002C6E58((unsigned int *)&v18, v5 + 1, (unsigned int *)&v15);
    sub_1002C6E7C(&v15, (int *)&v17, &v16);
    if (v5 + 5 != &v16) {
      v5[5] = v16;
    }
    v4 += 4;
    v3 += 2;
  }
  while (v4 != 4092);
  int v6 = (unsigned int *)(a1 + 4092);
  uint64_t v7 = 2048;
  do
  {
    __int16 v8 = (unsigned int *)&v2[v7 - 1] - 1;
    uint64_t v9 = (int *)&v2[v7 - 2];
    sub_1002C6E7C(v9, &v19, &v17);
    sub_1002C6E58(v8, &v17, (unsigned int *)&v18);
    sub_1002C6E58(v6 + 1, v6, (unsigned int *)&v16);
    sub_1002C6E7C(&v18, &v22, &v13);
    sub_1002C6E34((unsigned int *)&v19, &v13, &v14);
    sub_1002C70C8(&v14, (unsigned int *)&v21, &v15);
    sub_1002C6E58((unsigned int *)&v16, (unsigned int *)&v15, &v17);
    sub_1002C6E58((unsigned int *)&v19, (unsigned int *)&v18, (unsigned int *)&v15);
    sub_1002C70C8(&v15, (unsigned int *)&v21, &v16);
    if (v6 != (unsigned int *)v9) {
      *uint64_t v9 = *v6;
    }
    if (v8 != &v17) {
      *__int16 v8 = v17;
    }
    v10 = (int *)&v2[v7 - 1];
    if (v10 != &v18) {
      int *v10 = v18;
    }
    uint64_t v11 = (int *)&v2[v7 - 1] + 1;
    if (v11 != &v16) {
      int *v11 = v16;
    }
    int v19 = v18;
    --v6;
    v7 -= 2;
  }
  while (v7 * 8);
  return v2;
}

uint64_t *sub_1003026BC(_DWORD *a1, unsigned int *a2)
{
  sub_1002C6D64(a2, &v9);
  if (sub_1002C7FCC(&v9, &qword_1004F72E8))
  {
    sub_1002C7C94(&v9, (uint64_t *)&qword_1004F72F8, (unint64_t *)&v8);
  }
  else
  {
    sub_1002C7984(&v9, &qword_1004F7308, &v6);
    unint64_t v4 = 0x3FF0000000000000;
    sub_1002C7984(&v4, &qword_1004F7308, (unint64_t *)&v5);
    sub_1002C7C94(&v6, &v5, &v7);
    sub_1002C92F0(&v7, &qword_1004F7300, (unint64_t *)&v8);
  }
  return sub_1002C7860(&v8, a1);
}

uint64_t *sub_100302784(_DWORD *a1, unsigned int *a2)
{
  sub_1002C6D64(a2, &v11);
  if (sub_1002C7FCC(&v11, &qword_1004F72F0))
  {
    sub_1002C79DC(&v11, &qword_1004F72F8, (unint64_t *)&v10);
  }
  else
  {
    unint64_t v6 = 0x3FF0000000000000;
    sub_1002C7C94(&v6, (uint64_t *)&qword_1004F7300, &v7);
    sub_1002C92F0(&v11, &v7, &v8);
    unint64_t v4 = 0x3FF0000000000000;
    sub_1002C7984(&v4, &qword_1004F7308, &v5);
    sub_1002C79DC(&v8, &v5, &v9);
    sub_1002C79B0(&v9, &qword_1004F7308, (unint64_t *)&v10);
  }
  return sub_1002C7860(&v10, a1);
}

uint64_t sub_100302860(uint64_t a1, int a2, int a3, uint64_t a4, float32x2_t *a5, char a6)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a3;
  int v21 = 3;
  sub_100300044(a1);
  if (a4 | (unint64_t)a5)
  {
    *(unsigned char *)(a1 + 41) = 0;
    if (a5)
    {
      float64x2_t v26 = vcvtq_f64_f32(*a5);
      double v27 = a5[1].f32[0];
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 41) = *(unsigned char *)(a1 + 40);
  }
  float64x2_t v26 = (float64x2_t)xmmword_1004F73E0;
  double v27 = *(double *)&qword_1004F73F0;
LABEL_6:
  v18[0] = 0x3FF0000000000000;
  sub_1002C7C94((unint64_t *)v18, (uint64_t *)&v26, v24);
  v24[1] = 0x3FF0000000000000;
  unint64_t v22 = 0x3FF0000000000000;
  sub_1002C7C94(&v22, (uint64_t *)&v27, &v25);
  if (v21 >= 1)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = v24;
    do
    {
      float v23 = 0.0;
      unint64_t v22 = 0;
      uint64_t v12 = v9;
      if (a4)
      {
        double v19 = *(float *)(a4 + 4 * v9);
        sub_1002C79DC(v11, (unint64_t *)&v19, (unint64_t *)v18);
        sub_1002C7860(v18, &v20);
        LODWORD(v22) = v20;
        double v19 = *(float *)(a4 + 4 * v12 + 4);
        sub_1002C79DC(v11, (unint64_t *)&v19, (unint64_t *)v18);
        sub_1002C7860(v18, &v20);
        HIDWORD(v22) = v20;
        double v19 = *(float *)(a4 + 4 * v12 + 8);
        sub_1002C79DC(v11, (unint64_t *)&v19, (unint64_t *)v18);
        sub_1002C7860(v18, &v20);
        unsigned int v13 = v20;
      }
      else
      {
        sub_1002C79DC(v11, (unint64_t *)&byte_1004F7270[8 * v9 + 400], (unint64_t *)v18);
        sub_1002C7860(v18, &v19);
        LODWORD(v22) = LODWORD(v19);
        sub_1002C79DC(v11, (unint64_t *)&byte_1004F7270[8 * v12 + 408], (unint64_t *)v18);
        sub_1002C7860(v18, &v19);
        HIDWORD(v22) = LODWORD(v19);
        sub_1002C79DC(v11, (unint64_t *)&byte_1004F7270[8 * v12 + 416], (unint64_t *)v18);
        sub_1002C7860(v18, &v19);
        unsigned int v13 = LODWORD(v19);
      }
      float v23 = *(float *)&v13;
      int v14 = *(_DWORD *)(a1 + 44);
      unint64_t v15 = v22;
      *(_DWORD *)(a1 + 4 + 4 * (int)(v12 + (v14 ^ 2))) = v22;
      *(_DWORD *)(a1 + 4 + 4 * (v12 + 1)) = HIDWORD(v15);
      float v16 = v23;
      *(float *)(a1 + 4 + 4 * ((int)v12 + v14)) = v23;
      if (*(float *)&v15 < 0.0
        || *((float *)&v15 + 1) < 0.0
        || v16 < 0.0
        || (sub_1002C6E34((unsigned int *)&v22, (unsigned int *)&v22 + 1, (int *)&v19),
            sub_1002C6E34((unsigned int *)&v19, (unsigned int *)&v23, (int *)v18),
            sub_1002C6CF0(&v20, 1024),
            !sub_1002C739C((unsigned int *)v18, &v20)))
      {
        v18[0] = 0;
        v18[1] = 0;
        qmemcpy((void *)sub_1002D19D8(v18, 93), "c[0] >= 0 && c[1] >= 0 && c[2] >= 0 && c[0] + c[1] + c[2] < softfloat((int)LAB_CBRT_TAB_SIZE)", 93);
        sub_1002D2278(-215, v18, "RGB2Lab_f", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 6454);
      }
      ++v10;
      unsigned int v9 = v12 + 3;
      ++v11;
    }
    while (v10 < v21);
  }
  return a1;
}

void sub_100302BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

float32x4_t *sub_100302C00(float32x4_t *a1, __int32 a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  a1->i32[0] = a2;
  uint64_t v12 = sub_100302D70((uint64_t)a1->i64 + 4, 3, a3, a4, a5, a6);
  a1[3].i32[2] = a2;
  a1[3].i32[3] = a3;
  sub_100300044(v12);
  if (a4 | a5) {
    char v13 = 0;
  }
  else {
    char v13 = a6;
  }
  a1[10].i8[8] = v13;
  int v22 = 1065353216;
  sub_1002C70C8(&v22, (unsigned int *)&dword_1004F729C, &v23);
  float32x4_t v14 = vld1q_dup_f32((const float *)&v23);
  a1[5] = v14;
  sub_1002C6CF0((unsigned int *)&v22, 100);
  sub_1002C70C8(&dword_1004F729C, (unsigned int *)&v22, &v23);
  float32x4_t v15 = vld1q_dup_f32((const float *)&v23);
  a1[4] = v15;
  sub_1002C70C8(&dword_1004F729C, &dword_1004F7280, &v23);
  float32x4_t v16 = vld1q_dup_f32((const float *)&v23);
  a1[6] = v16;
  unsigned int v21 = dword_1004F7278 ^ 0x80000000;
  sub_1002C6E7C((int *)&v21, &dword_1004F729C, &v22);
  sub_1002C70C8(&v22, &dword_1004F7280, &v23);
  float32x4_t v17 = vld1q_dup_f32((const float *)&v23);
  a1[7] = v17;
  sub_1002C70C8(&dword_1004F729C, &dword_1004F728C, &v23);
  float32x4_t v18 = vld1q_dup_f32((const float *)&v23);
  a1[8] = v18;
  unsigned int v21 = dword_1004F7284 ^ 0x80000000;
  sub_1002C6E7C((int *)&v21, &dword_1004F729C, &v22);
  sub_1002C70C8(&v22, &dword_1004F728C, &v23);
  float32x4_t v19 = vld1q_dup_f32((const float *)&v23);
  a1[9] = v19;
  a1[10].i64[0] = -1;
  return a1;
}

uint64_t sub_100302D70(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 48) = a6;
  sub_100300044(a1);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  int i = 0;
  if (a5)
  {
    do
    {
      *((double *)&v29 + i) = *(float *)(a5 + 4 * i);
      ++i;
    }
    while (i < 3);
  }
  else
  {
    do
    {
      float32x4_t v18 = &byte_1004F7270[8 * i + 368];
      float32x4_t v19 = &v29 + i;
      if (v18 != (char *)v19) {
        *float32x4_t v19 = *(void *)v18;
      }
      ++i;
    }
    while (i < 3);
  }
  for (int i = 0; i < 3; ++i)
  {
    if (a4)
    {
      *(_DWORD *)(a1 + 4 + 12 * i) = *(_DWORD *)(a4 + 12 * i);
      *(_DWORD *)(a1 + 4 + 12 * i + 4) = *(_DWORD *)(a4 + 12 * i + 4);
      *(_DWORD *)(a1 + 12 * i + 12) = *(_DWORD *)(a4 + 12 * i + 8);
      if (a3) {
        goto LABEL_6;
      }
    }
    else
    {
      float v10 = *((double *)&xmmword_1004F7400 + 3 * i);
      *(float *)(a1 + 4 + 12 * i) = v10;
      float v11 = *((double *)&xmmword_1004F7400 + 3 * i + 1);
      *(float *)(a1 + 4 + 12 * i + 4) = v11;
      float v12 = *((double *)&xmmword_1004F7400 + 3 * i + 2);
      *(float *)(a1 + 12 * i + 12) = v12;
      if (a3)
      {
LABEL_6:
        if (*(float *)(a1 + 12 * i + 4) < 0.0) {
          goto LABEL_13;
        }
        goto LABEL_10;
      }
    }
    uint64_t v13 = 12 * i;
    float32x4_t v14 = (int *)(a1 + 4 + v13);
    int v15 = *v14;
    int *v14 = v14[2];
    v14[2] = v15;
    if (*(float *)(a1 + 12 * i + 4) < 0.0) {
      goto LABEL_13;
    }
LABEL_10:
    if (*(float *)(a1 + 12 * i + 8) >= 0.0 && *(float *)(a1 + 12 * i + 12) >= 0.0)
    {
      LODWORD(v23) = *(_DWORD *)(a1 + 4 + 12 * i);
      LODWORD(v22) = *(_DWORD *)(a1 + 4 + 12 * i + 4);
      sub_1002C6E34((unsigned int *)&v23, (unsigned int *)&v22, (int *)&v24);
      LODWORD(v21) = *(_DWORD *)(a1 + 12 * i + 12);
      sub_1002C6E34((unsigned int *)&v24, (unsigned int *)&v21, (int *)&v26);
      LODWORD(v20) = 1069547520;
      if (sub_1002C739C((unsigned int *)&v26, (unsigned int *)&v20)) {
        continue;
      }
    }
LABEL_13:
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    qmemcpy((void *)sub_1002D19D8(&v26, 158), "coeffs[i*3] >= 0 && coeffs[i*3+1] >= 0 && coeffs[i*3+2] >= 0 && softfloat(coeffs[i*3]) + softfloat(coeffs[i*3+1]) + softfloat(coeffs[i*3+2]) < softfloat(1.5f)", 158);
    sub_1002D2278(-215, &v26, "RGB2Luvfloat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 7532);
  }
  sub_1002C7414(&v22, 15);
  sub_1002C79DC((unint64_t *)&v30, &v22, &v23);
  sub_1002C7984((unint64_t *)&v29, &v23, &v24);
  sub_1002C7414(&v20, 3);
  sub_1002C79DC(&v31, &v20, &v21);
  sub_1002C7984(&v24, &v21, (unint64_t *)&v26);
  sub_1002C7860(&v26, &v25);
  LODWORD(v24) = 1065353216;
  LODWORD(v22) = 872415232;
  if (sub_1002C7324((unsigned int *)&v25, (unsigned int *)&v22)) {
    float32x4_t v16 = &v25;
  }
  else {
    float32x4_t v16 = (int *)&v22;
  }
  LODWORD(v23) = *v16;
  sub_1002C70C8((int *)&v24, (unsigned int *)&v23, &v26);
  int v25 = v26;
  sub_1002C6CF0((unsigned int *)&v23, 52);
  sub_1002C6E7C(&v25, (int *)&v23, &v24);
  sub_1002C7860(&v29, &v22);
  sub_1002C6E7C((int *)&v24, (int *)&v22, &v26);
  *(_DWORD *)(a1 + 40) = v26;
  sub_1002C6CF0((unsigned int *)&v23, 117);
  sub_1002C6E7C(&v25, (int *)&v23, &v24);
  sub_1002C7860(&v30, &v22);
  sub_1002C6E7C((int *)&v24, (int *)&v22, &v26);
  *(_DWORD *)(a1 + 44) = v26;
  uint64_t v26 = 0x3FF0000000000000;
  if (!sub_1002C7F7C(&v30, &v26))
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    qmemcpy((void *)sub_1002D19D8(&v26, 31), "whitePt[1] == softdouble::one()", 31);
    sub_1002D2278(-215, &v26, "RGB2Luvfloat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 7546);
  }
  return a1;
}

void sub_100303280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003032C8(uint64_t a1, int a2, int a3, float *a4, float32x2_t *a5, char a6)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 52) = a3;
  sub_100300044(a1);
  if (a5)
  {
    float64x2_t v30 = vcvtq_f64_f32(*a5);
    double v31 = a5[1].f32[0];
    double v27 = 0.0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    if (a4)
    {
LABEL_3:
      *(double *)&unint64_t v9 = a4[3];
      double v27 = *a4;
      uint64_t v28 = v9;
      *(double *)&uint64_t v10 = a4[6];
      goto LABEL_6;
    }
  }
  else
  {
    float64x2_t v30 = (float64x2_t)xmmword_1004F73E0;
    double v31 = *(double *)&qword_1004F73F0;
    double v27 = 0.0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    if (a4) {
      goto LABEL_3;
    }
  }
  double v27 = *(double *)&xmmword_1004F7450;
  uint64_t v28 = qword_1004F7468;
  uint64_t v10 = qword_1004F7480;
LABEL_6:
  uint64_t v29 = v10;
  sub_1002C79DC((unint64_t *)&v27, (unint64_t *)&v30, (unint64_t *)&v26);
  float v11 = v26;
  *(float *)(a1 + 4 + 12 * (*(_DWORD *)(a1 + 52) ^ 2)) = v11;
  sub_1002C79DC((unint64_t *)&v28, (unint64_t *)&v30, (unint64_t *)&v26);
  float v12 = v26;
  *(float *)(a1 + 16) = v12;
  sub_1002C79DC((unint64_t *)&v29, (unint64_t *)&v30, (unint64_t *)&v26);
  float v13 = v26;
  *(float *)(a1 + 4 + 12 * *(int *)(a1 + 52)) = v13;
  double v27 = 0.0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (a4)
  {
    *(double *)&unint64_t v14 = a4[4];
    double v27 = a4[1];
    uint64_t v28 = v14;
    *(double *)&uint64_t v15 = a4[7];
  }
  else
  {
    double v27 = *((double *)&xmmword_1004F7450 + 1);
    uint64_t v28 = xmmword_1004F7470;
    uint64_t v15 = qword_1004F7488;
  }
  uint64_t v29 = v15;
  sub_1002C79DC((unint64_t *)&v27, (unint64_t *)&v30.f64[1], (unint64_t *)&v26);
  float v16 = v26;
  *(float *)(a1 + 4 + 12 * (*(_DWORD *)(a1 + 52) ^ 2) + 4) = v16;
  sub_1002C79DC((unint64_t *)&v28, (unint64_t *)&v30.f64[1], (unint64_t *)&v26);
  float v17 = v26;
  *(float *)(a1 + 20) = v17;
  sub_1002C79DC((unint64_t *)&v29, (unint64_t *)&v30.f64[1], (unint64_t *)&v26);
  float v18 = v26;
  *(float *)(a1 + 4 + 12 * *(int *)(a1 + 52) + 4) = v18;
  double v27 = 0.0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  if (a4)
  {
    *(double *)&unint64_t v19 = a4[5];
    double v27 = a4[2];
    uint64_t v28 = v19;
    *(double *)&uint64_t v20 = a4[8];
  }
  else
  {
    double v27 = *(double *)&qword_1004F7460;
    uint64_t v28 = *((void *)&xmmword_1004F7470 + 1);
    uint64_t v20 = qword_1004F7490;
  }
  uint64_t v29 = v20;
  sub_1002C79DC((unint64_t *)&v27, (unint64_t *)&v31, (unint64_t *)&v26);
  float v21 = v26;
  *(float *)(a1 + 4 + 12 * (*(_DWORD *)(a1 + 52) ^ 2) + 8) = v21;
  sub_1002C79DC((unint64_t *)&v28, (unint64_t *)&v31, (unint64_t *)&v26);
  float v22 = v26;
  *(float *)(a1 + 24) = v22;
  sub_1002C79DC((unint64_t *)&v29, (unint64_t *)&v31, (unint64_t *)&v26);
  float v23 = v26;
  *(float *)(a1 + 4 + 12 * *(int *)(a1 + 52) + 8) = v23;
  sub_1002C6CF0((unsigned int *)&v27, 8);
  *(_DWORD *)(a1 + 44) = LODWORD(v27);
  sub_1002C6CF0((unsigned int *)&v26, 6);
  sub_1002C6CF0(&v25, 29);
  sub_1002C70C8((int *)&v26, &v25, &v27);
  *(_DWORD *)(a1 + 48) = LODWORD(v27);
  return a1;
}

uint64_t sub_100303624(uint64_t a1, int a2, int a3, float *a4, float32x2_t *a5, int a6)
{
  *(_DWORD *)a1 = a2;
  if (a5)
  {
    float64x2_t v23 = vcvtq_f64_f32(*a5);
    double v24 = a5[1].f32[0];
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2FD0, memory_order_acquire)) {
      goto LABEL_5;
    }
  }
  else
  {
    float64x2_t v23 = (float64x2_t)xmmword_1004F73E0;
    double v24 = *(double *)&qword_1004F73F0;
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2FD0, memory_order_acquire)) {
      goto LABEL_5;
    }
  }
  if (__cxa_guard_acquire(&qword_1004D2FD0))
  {
    sub_1002C7414(&qword_1004D2FC8, 4096);
    __cxa_guard_release(&qword_1004D2FD0);
  }
LABEL_5:
  double v20 = 0.0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a4)
  {
    *(double *)&unint64_t v10 = a4[3];
    double v20 = *a4;
    uint64_t v21 = v10;
    *(double *)&uint64_t v11 = a4[6];
  }
  else
  {
    double v20 = *(double *)&xmmword_1004F7450;
    uint64_t v21 = qword_1004F7468;
    uint64_t v11 = qword_1004F7480;
  }
  uint64_t v22 = v11;
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v20, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v23, (unint64_t *)&v19);
  *(_DWORD *)(a1 + 12 * a3 + 4) = sub_1002C7638(&v19);
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v21, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v23, (unint64_t *)&v19);
  *(_DWORD *)(a1 + 16) = sub_1002C7638(&v19);
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v22, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v23, (unint64_t *)&v19);
  *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 4) = sub_1002C7638(&v19);
  double v20 = 0.0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a4)
  {
    *(double *)&unint64_t v12 = a4[4];
    double v20 = a4[1];
    uint64_t v21 = v12;
    *(double *)&uint64_t v13 = a4[7];
  }
  else
  {
    double v20 = *((double *)&xmmword_1004F7450 + 1);
    uint64_t v21 = xmmword_1004F7470;
    uint64_t v13 = qword_1004F7488;
  }
  uint64_t v22 = v13;
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v20, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v23.f64[1], (unint64_t *)&v19);
  *(_DWORD *)(a1 + 12 * a3 + 8) = sub_1002C7638(&v19);
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v21, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v23.f64[1], (unint64_t *)&v19);
  *(_DWORD *)(a1 + 20) = sub_1002C7638(&v19);
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v22, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v23.f64[1], (unint64_t *)&v19);
  *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 8) = sub_1002C7638(&v19);
  double v20 = 0.0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (a4)
  {
    *(double *)&unint64_t v14 = a4[5];
    double v20 = a4[2];
    uint64_t v21 = v14;
    *(double *)&uint64_t v15 = a4[8];
  }
  else
  {
    double v20 = *(double *)&qword_1004F7460;
    uint64_t v21 = *((void *)&xmmword_1004F7470 + 1);
    uint64_t v15 = qword_1004F7490;
  }
  uint64_t v22 = v15;
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v20, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v24, (unint64_t *)&v19);
  *(_DWORD *)(a1 + 12 * a3 + 12) = sub_1002C7638(&v19);
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v21, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v24, (unint64_t *)&v19);
  *(_DWORD *)(a1 + 24) = sub_1002C7638(&v19);
  sub_1002C79DC(&qword_1004D2FC8, (unint64_t *)&v22, &v18);
  sub_1002C79DC(&v18, (unint64_t *)&v24, (unint64_t *)&v19);
  *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 12) = sub_1002C7638(&v19);
  float v16 = word_1004E3A70;
  if (a6) {
    float v16 = word_1004E1A70;
  }
  *(void *)(a1 + 40) = v16;
  return a1;
}

void sub_100303A2C(_Unwind_Exception *a1)
{
}

uint64_t sub_100303A48(uint64_t a1, int a2, int a3, _DWORD *a4, float32x2_t *a5, char a6)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 48) = a6;
  sub_100300044(a1);
  if (a5)
  {
    float64x2_t v36 = vcvtq_f64_f32(*a5);
    double v37 = a5[1].f32[0];
    uint64_t v10 = 3 * (a3 ^ 2);
    uint64_t v11 = 3 * a3;
    if (a4)
    {
LABEL_3:
      int v12 = a4[3];
      int v13 = a4[6];
      unint64_t v14 = (_DWORD *)(a1 + 4 + 4 * v10);
      _DWORD *v14 = *a4;
      *(_DWORD *)(a1 + 16) = v12;
      uint64_t v15 = (_DWORD *)(a1 + 4 + 4 * v11);
      _DWORD *v15 = v13;
      int v16 = a4[4];
      int v17 = a4[7];
      v14[1] = a4[1];
      *(_DWORD *)(a1 + 20) = v16;
      v15[1] = v17;
      int v18 = a4[2];
      int v19 = a4[5];
      int v20 = a4[8];
      goto LABEL_6;
    }
  }
  else
  {
    float64x2_t v36 = (float64x2_t)xmmword_1004F73E0;
    double v37 = *(double *)&qword_1004F73F0;
    uint64_t v10 = 3 * (a3 ^ 2);
    uint64_t v11 = 3 * a3;
    if (a4) {
      goto LABEL_3;
    }
  }
  sub_1002C7860((uint64_t *)&xmmword_1004F7450, v29);
  int v21 = v29[0];
  sub_1002C7860(&qword_1004F7468, v29);
  int v22 = v29[0];
  sub_1002C7860(&qword_1004F7480, v29);
  int v23 = v29[0];
  *(_DWORD *)(a1 + 4 + 4 * v10) = v21;
  *(_DWORD *)(a1 + 16) = v22;
  *(_DWORD *)(a1 + 4 + 4 * v11) = v23;
  sub_1002C7860((uint64_t *)&xmmword_1004F7450 + 1, v29);
  int v24 = v29[0];
  sub_1002C7860((uint64_t *)&xmmword_1004F7470, v29);
  int v25 = v29[0];
  sub_1002C7860(&qword_1004F7488, v29);
  int v26 = v29[0];
  *(_DWORD *)(a1 + 4 + 4 * v10 + 4) = v24;
  *(_DWORD *)(a1 + 20) = v25;
  *(_DWORD *)(a1 + 4 + 4 * v11 + 4) = v26;
  sub_1002C7860(&qword_1004F7460, v29);
  int v18 = v29[0];
  sub_1002C7860((uint64_t *)&xmmword_1004F7470 + 1, v29);
  int v19 = v29[0];
  sub_1002C7860(&qword_1004F7490, v29);
  int v20 = v29[0];
LABEL_6:
  *(_DWORD *)(a1 + 4 + 4 * v10 + 8) = v18;
  *(_DWORD *)(a1 + 24) = v19;
  *(_DWORD *)(a1 + 4 + 4 * v11 + 8) = v20;
  sub_1002C7414(&v32, 15);
  sub_1002C79DC((unint64_t *)&v36.f64[1], &v32, &v33);
  sub_1002C7984((unint64_t *)&v36, &v33, &v34);
  sub_1002C7414(&v30, 3);
  sub_1002C79DC((unint64_t *)&v37, &v30, &v31);
  sub_1002C7984(&v34, &v31, (unint64_t *)v29);
  sub_1002C7860(v29, &v35);
  LODWORD(v34) = 1065353216;
  LODWORD(v32) = 872415232;
  if (sub_1002C7324((unsigned int *)&v35, (unsigned int *)&v32)) {
    double v27 = &v35;
  }
  else {
    double v27 = (int *)&v32;
  }
  LODWORD(v33) = *v27;
  sub_1002C70C8((int *)&v34, (unsigned int *)&v33, v29);
  int v35 = v29[0];
  sub_1002C6CF0((unsigned int *)&v33, 52);
  sub_1002C6E7C((int *)&v33, &v35, &v34);
  sub_1002C7860((uint64_t *)&v36, &v32);
  sub_1002C6E7C((int *)&v34, (int *)&v32, v29);
  *(_DWORD *)(a1 + 40) = v29[0];
  sub_1002C6CF0((unsigned int *)&v33, 117);
  sub_1002C6E7C((int *)&v33, &v35, &v34);
  sub_1002C7860((uint64_t *)&v36.f64[1], &v32);
  sub_1002C6E7C((int *)&v34, (int *)&v32, v29);
  *(_DWORD *)(a1 + 44) = v29[0];
  v29[0] = 0x3FF0000000000000;
  if (!sub_1002C7F7C((uint64_t *)&v36.f64[1], v29))
  {
    v29[0] = 0;
    v29[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v29, 31), "whitePt[1] == softdouble::one()", 31);
    sub_1002D2278(-215, v29, "Luv2RGBfloat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/color.cpp", 7871);
  }
  return a1;
}

void sub_100303E08(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100303E38(uint64_t a1, int a2, int a3, float *a4, uint64_t a5, int a6)
{
  *(_DWORD *)a1 = a2;
  sub_100300044(a1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2FE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1004D2FE0))
  {
    sub_1002C7414(&qword_1004D2FD8, 4096);
    __cxa_guard_release(&qword_1004D2FE0);
  }
  if (a4)
  {
    *(double *)&unint64_t v10 = a4[3];
    double v14 = *a4;
    uint64_t v15 = v10;
    *(double *)&uint64_t v16 = a4[6];
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v14, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 12 * a3 + 4) = sub_1002C7638(&v13);
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v15, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 16) = sub_1002C7638(&v13);
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v16, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 4) = sub_1002C7638(&v13);
    double v14 = a4[1];
    *(double *)&uint64_t v15 = a4[4];
    *(double *)&uint64_t v16 = a4[7];
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v14, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 12 * a3 + 8) = sub_1002C7638(&v13);
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v15, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 20) = sub_1002C7638(&v13);
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v16, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 8) = sub_1002C7638(&v13);
    double v14 = a4[2];
    *(double *)&uint64_t v15 = a4[5];
    *(double *)&uint64_t v16 = a4[8];
  }
  else
  {
    double v14 = *(double *)&xmmword_1004F7450;
    uint64_t v15 = qword_1004F7468;
    uint64_t v16 = qword_1004F7480;
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v14, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 12 * a3 + 4) = sub_1002C7638(&v13);
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v15, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 16) = sub_1002C7638(&v13);
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v16, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 4) = sub_1002C7638(&v13);
    double v14 = *((double *)&xmmword_1004F7450 + 1);
    uint64_t v15 = *(uint64_t *)&xmmword_1004F7470;
    uint64_t v16 = qword_1004F7488;
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v14, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 12 * a3 + 8) = sub_1002C7638(&v13);
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v15, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 20) = sub_1002C7638(&v13);
    sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v16, (unint64_t *)&v13);
    *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 8) = sub_1002C7638(&v13);
    double v14 = *(double *)&qword_1004F7460;
    uint64_t v15 = *((uint64_t *)&xmmword_1004F7470 + 1);
    uint64_t v16 = qword_1004F7490;
  }
  sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v14, (unint64_t *)&v13);
  *(_DWORD *)(a1 + 12 * a3 + 12) = sub_1002C7638(&v13);
  sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v15, (unint64_t *)&v13);
  *(_DWORD *)(a1 + 24) = sub_1002C7638(&v13);
  sub_1002C79DC(&qword_1004D2FD8, (unint64_t *)&v16, (unint64_t *)&v13);
  *(_DWORD *)(a1 + 12 * (a3 ^ 2) + 12) = sub_1002C7638(&v13);
  uint64_t v11 = word_1004E3A70;
  if (a6) {
    uint64_t v11 = word_1004E1A70;
  }
  *(void *)(a1 + 40) = v11;
  return a1;
}

void sub_100304268(_Unwind_Exception *a1)
{
}

void sub_100304284(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_1003042BC(uint64_t result, int *a2)
{
  int v2 = a2[1];
  uint64_t v3 = *a2;
  if ((int)v3 < v2)
  {
    uint64_t v4 = *(int *)(result + 56);
    int v5 = *(_DWORD *)(result + 48);
    if (v5 >= 0) {
      int v6 = *(_DWORD *)(result + 48);
    }
    else {
      int v6 = v5 + 1;
    }
    int v7 = v6 >> 1;
    int v55 = *(_DWORD *)(result + 52) / 2;
    int v8 = 2 * v4;
    uint64_t v9 = 2 * (int)v4;
    int v60 = v4 * v5;
    if ((int)v4 * v5 > 2 * (int)v4) {
      int v8 = v4 * v5;
    }
    unsigned int v57 = v8 - 1;
    int v10 = 2 * v3;
    uint64_t v58 = *(int *)(result + 56);
    uint64_t v56 = v4 + 1;
    int v11 = (2 * v3) | 1;
    do
    {
      uint64_t v13 = *(void *)(result + 8);
      uint64_t v12 = *(void *)(result + 16);
      uint64_t v14 = v13 + v12 * 2 * (int)v3;
      uint64_t v15 = v13 + v12 * (int)((2 * v3) | 1);
      if (*(unsigned char *)(result + 60))
      {
        uint64_t v16 = v14 + 2;
        uint64_t v17 = v15 + 2;
        uint64_t v19 = *(void *)(result + 32);
        uint64_t v18 = *(void *)(result + 40);
        if (!*(unsigned char *)(result + 62)) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v16 = v13 + v12 * 2 * (int)v3;
        v14 += 2;
        uint64_t v17 = v13 + v12 * (int)((2 * v3) | 1);
        v15 += 2;
        uint64_t v19 = *(void *)(result + 32);
        uint64_t v18 = *(void *)(result + 40);
        if (!*(unsigned char *)(result + 62))
        {
LABEL_13:
          if ((int)v3 >= 0) {
            int v22 = v3;
          }
          else {
            int v22 = v3 + 1;
          }
          uint64_t v20 = v19 + v18 * ((uint64_t)v22 >> 1) + (int)(v3 - (v22 & 0xFFFFFFFE)) * (uint64_t)v7;
          int v23 = v55 + v3;
          if (v55 + (int)v3 >= 0) {
            int v24 = v55 + v3;
          }
          else {
            int v24 = v23 + 1;
          }
          uint64_t v21 = v19 + v18 * ((uint64_t)v24 >> 1) + (int)(v23 - (v24 & 0xFFFFFFFE)) * (uint64_t)v7;
          goto LABEL_20;
        }
      }
      uint64_t v20 = v19 + v18 * v3;
      uint64_t v21 = v20 + 1;
LABEL_20:
      int v25 = v10;
      int v26 = v11;
      if (*(unsigned char *)(result + 61)) {
        uint64_t v27 = v21;
      }
      else {
        uint64_t v27 = v20;
      }
      if (*(unsigned char *)(result + 61)) {
        uint64_t v28 = v20;
      }
      else {
        uint64_t v28 = v21;
      }
      if (v60 >= 1)
      {
        uint64_t v62 = v3;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v67 = *(void *)(result + 24) + v18 * v10;
        uint64_t v32 = v12 * v10;
        uint64_t v66 = v13 + v56 + v32;
        uint64_t v65 = v16 + v58;
        int v61 = v11;
        uint64_t v33 = v12 * v11;
        uint64_t v63 = v13 + v56 + v33;
        uint64_t v64 = v15 + v58;
        uint64_t v34 = v13 + 1;
        uint64_t v35 = v34 + v32;
        uint64_t v36 = v34 + v33;
        do
        {
          int v37 = *(unsigned __int8 *)(v14 + v31);
          uint64_t v38 = v28;
          int v39 = *(unsigned __int8 *)(v35 + v31);
          int v40 = *(unsigned __int8 *)(v16 + v31);
          uint64_t v41 = v16;
          uint64_t v42 = v15;
          int v43 = *(unsigned __int8 *)(v64 + v31);
          int v44 = *(unsigned __int8 *)(v63 + v31);
          int v45 = 528482 * *(unsigned __int8 *)(v66 + v31)
              + 269484 * *(unsigned __int8 *)(v14 + v58 + v31)
              + 102760 * *(unsigned __int8 *)(v65 + v31);
          int v46 = *(unsigned __int8 *)(v17 + v58 + v31);
          int v47 = 528482 * *(unsigned __int8 *)(v36 + v31)
              + 269484 * *(unsigned __int8 *)(v15 + v31)
              + 102760 * *(unsigned __int8 *)(v17 + v31);
          v48 = (unsigned char *)(v67 + v29);
          unsigned char *v48 = (528482 * v39 + 269484 * v37 + 102760 * v40 + 17301504) >> 20;
          v48[1] = (v45 + 17301504) >> 20;
          v48[*(void *)(result + 40)] = (v47 + 17301504) >> 20;
          v48[*(void *)(result + 40) + 1] = (528482 * v44 + 269484 * v43 + 102760 * v46 + 17301504) >> 20;
          int v49 = 268130321 * v39 + 268280268 * v37;
          uint64_t v15 = v42;
          int v50 = 268049581 * v39;
          uint64_t v28 = v38;
          unsigned int v51 = v49 + 460324 * v40 + 134742016;
          int v52 = v50 + 460324 * v37 + 268361008 * v40;
          unsigned int v53 = v51 >> 20;
          if (*(unsigned char *)(result + 62)) {
            uint64_t v54 = v29;
          }
          else {
            uint64_t v54 = v30;
          }
          *(unsigned char *)(v27 + v54) = v53;
          uint64_t v16 = v41;
          *(unsigned char *)(v38 + v54) = (v52 + 134742016) >> 20;
          v31 += v9;
          ++v30;
          v29 += 2;
        }
        while (v57 / v9 + 1 != v30);
        int v2 = a2[1];
        int v25 = v10;
        uint64_t v3 = v62;
        int v26 = v61;
      }
      ++v3;
      int v10 = v25 + 2;
      int v11 = v26 + 2;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_100304668(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003046A0(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004981B8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    int v5 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_100304754(*(void *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

uint64_t sub_100304754(uint64_t result, uint64_t a2, char *a3, int a4)
{
  int v4 = *(_DWORD *)result;
  uint64_t v5 = *(int *)(result + 8);
  if (*(_DWORD *)(result + 4) == 3)
  {
    int v6 = 3 * a4;
    if (v4 == 3)
    {
      if (a4 >= 16)
      {
        uint64_t v7 = 0;
        do
        {
          uint64_t v14 = (const char *)(a2 + v7);
          int8x16x3_t v43 = vld3q_s8(v14);
          *(int8x16x3_t *)v41.val[0].i8 = v43;
          v43.val[0] = v41.val[v5];
          v43.val[2] = v41.val[(int)(v5 ^ 2)];
          uint64_t v15 = &a3[v7];
          vst3q_s8(v15, v43);
          v7 += 48;
        }
        while (v7 <= v6 - 48);
        a2 += v7;
        int v8 = v6 - 24;
        if ((int)v7 > v6 - 24)
        {
LABEL_18:
          if ((int)v7 < v6)
          {
            uint64_t v17 = &a3[v7 + 2];
            do
            {
              char v18 = *(unsigned char *)(a2 + 1);
              char v19 = *(unsigned char *)(a2 + (v5 ^ 2));
              *(v17 - 2) = *(unsigned char *)(a2 + v5);
              *(v17 - 1) = v18;
              *uint64_t v17 = v19;
              v17 += 3;
              a2 += 3;
              LODWORD(v7) = v7 + 3;
            }
            while (v6 > (int)v7);
          }
          return result;
        }
      }
      else
      {
        LODWORD(v7) = 0;
        int v8 = v6 - 24;
        if (v6 - 24 < 0) {
          goto LABEL_18;
        }
      }
      uint64_t v7 = v7;
      do
      {
        int8x8x3_t v42 = vld3_s8((const char *)a2);
        a2 += 24;
        *(int8x8x3_t *)v41.val[0].i8 = v42;
        v42.val[0] = (int8x8_t)v41.val[0].i64[v5];
        v42.val[2] = (int8x8_t)v41.val[0].i64[(int)(v5 ^ 2)];
        uint64_t v16 = &a3[v7];
        vst3_s8(v16, v42);
        v7 += 24;
      }
      while (v7 <= v8);
      goto LABEL_18;
    }
    if (a4 >= 16)
    {
      uint64_t v11 = 0;
      do
      {
        int8x16x4_t v48 = vld4q_s8((const char *)a2);
        a2 += 64;
        int8x16x4_t v41 = v48;
        v48.val[0] = v41.val[v5];
        v48.val[2] = v41.val[(int)(v5 ^ 2)];
        int v26 = &a3[v11];
        vst3q_s8(v26, *(int8x16x3_t *)v48.val[0].i8);
        v11 += 48;
      }
      while (v11 <= v6 - 48);
    }
    else
    {
      LODWORD(v11) = 0;
    }
    if ((int)v11 <= v6 - 24)
    {
      uint64_t v11 = v11;
      do
      {
        int8x8x4_t v45 = vld4_s8((const char *)a2);
        a2 += 32;
        *(int8x8x4_t *)v41.val[0].i8 = v45;
        v45.val[0] = (int8x8_t)v41.val[0].i64[v5];
        v45.val[2] = (int8x8_t)v41.val[0].i64[(int)(v5 ^ 2)];
        uint64_t v27 = &a3[v11];
        vst3_s8(v27, *(int8x8x3_t *)v45.val[0].i8);
        v11 += 24;
      }
      while (v11 <= v6 - 24);
    }
    if ((int)v11 < v6)
    {
      uint64_t v28 = &a3[v11 + 2];
      do
      {
        char v29 = *(unsigned char *)(a2 + 1);
        char v30 = *(unsigned char *)(a2 + (v5 ^ 2));
        *(v28 - 2) = *(unsigned char *)(a2 + v5);
        *(v28 - 1) = v29;
        char *v28 = v30;
        v28 += 3;
        a2 += 4;
        LODWORD(v11) = v11 + 3;
      }
      while (v6 > (int)v11);
    }
  }
  else if (v4 == 3)
  {
    int v9 = 3 * a4;
    if (a4 >= 16)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v20 = (const char *)(a2 + v10);
        *(int8x16x3_t *)v47.val[0].i8 = vld3q_s8(v20);
        v41.val[v5] = v47.val[0];
        v41.val[1] = v47.val[1];
        v41.val[(int)(v5 ^ 2)] = v47.val[2];
        v47.val[3] = *(int8x16_t *)(result + 16);
        v47.val[0] = v41.val[0];
        v47.val[1] = v41.val[1];
        v47.val[2] = v41.val[2];
        vst4q_s8(a3, v47);
        a3 += 64;
        v10 += 48;
      }
      while (v10 <= v9 - 48);
    }
    else
    {
      LODWORD(v10) = 0;
    }
    if ((int)v10 <= v9 - 24)
    {
      uint64_t v10 = v10;
      do
      {
        uint64_t v21 = (const char *)(a2 + v10);
        *(int8x8x3_t *)v44.val[0].i8 = vld3_s8(v21);
        v41.val[0].i64[v5] = (uint64_t)v44.val[0];
        v41.val[0].i64[1] = (uint64_t)v44.val[1];
        v41.val[0].i64[(int)(v5 ^ 2)] = (uint64_t)v44.val[2];
        v44.val[3] = *(int8x8_t *)(result + 32);
        *(int8x16_t *)v44.val[0].i8 = v41.val[0];
        v44.val[2] = (int8x8_t)v41.val[1].i64[0];
        vst4_s8(a3, v44);
        a3 += 32;
        v10 += 24;
      }
      while (v10 <= v9 - 24);
    }
    if ((int)v10 < v9)
    {
      int v22 = (char *)(a2 + v10 + 2);
      do
      {
        char v23 = *(v22 - 2);
        char v24 = *(v22 - 1);
        char v25 = *v22;
        v22 += 3;
        a3[v5] = v23;
        a3[1] = v24;
        a3[v5 ^ 2] = v25;
        a3[3] = -1;
        a3 += 4;
        LODWORD(v10) = v10 + 3;
      }
      while (v9 > (int)v10);
    }
  }
  else
  {
    int v12 = 4 * a4;
    if (a4 >= 16)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v31 = (const char *)(a2 + v13);
        int8x16x4_t v49 = vld4q_s8(v31);
        int8x16x4_t v41 = v49;
        v49.val[0] = v41.val[v5];
        v49.val[2] = v41.val[v5 ^ 2];
        uint64_t v32 = &a3[v13];
        vst4q_s8(v32, v49);
        v13 += 64;
      }
      while (v13 <= v12 - 64);
    }
    else
    {
      LODWORD(v13) = 0;
    }
    if ((int)v13 <= v12 - 32)
    {
      uint64_t v13 = v13;
      do
      {
        uint64_t v33 = (const char *)(a2 + v13);
        int8x8x4_t v46 = vld4_s8(v33);
        *(int8x8x4_t *)v41.val[0].i8 = v46;
        v46.val[0] = (int8x8_t)v41.val[0].i64[v5];
        v46.val[2] = (int8x8_t)v41.val[0].i64[v5 ^ 2];
        uint64_t v34 = &a3[v13];
        vst4_s8(v34, v46);
        v13 += 32;
      }
      while (v13 <= v12 - 32);
    }
    if ((int)v13 < v12)
    {
      uint64_t v13 = v13;
      uint64_t v35 = &a3[v5 ^ 2];
      uint64_t v36 = &a3[v5];
      do
      {
        uint64_t v37 = v13 & 0xFFFFFFFE | 1;
        char v38 = *(unsigned char *)(a2 + v37);
        uint64_t v39 = v13 & 0xFFFFFFFC | 3;
        uint64_t result = *(unsigned __int8 *)(a2 + v39);
        char v40 = *(unsigned char *)(a2 + (v13 & 0xFFFFFFFD) + 2);
        v36[v13] = *(unsigned char *)(a2 + v13);
        a3[v37] = v38;
        v35[v13] = v40;
        a3[v39] = result;
        v13 += 4;
      }
      while (v13 < v12);
    }
  }
  return result;
}

void sub_100304B40(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100304B78(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498218);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_100304C2C(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

int *sub_100304C2C(int *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[2];
  if (result[1] == 3)
  {
    if (a4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 2 * v4;
      int v8 = (_WORD *)(a3 + 2);
      do
      {
        __int16 v9 = *(_WORD *)(a2 + 2);
        __int16 v10 = *(_WORD *)(a2 + 2 * (int)(v5 ^ 2));
        *(v8 - 1) = *(_WORD *)(a2 + 2 * v5);
        *int v8 = v9;
        v8[1] = v10;
        v6 += 3;
        a2 += v7;
        v8 += 3;
      }
      while (v6 < 3 * a4);
    }
  }
  else if (v4 == 3)
  {
    if (a4 >= 1)
    {
      uint64_t v11 = 0;
      int v12 = (__int16 *)(a2 + 2);
      do
      {
        __int16 v13 = *v12;
        __int16 v14 = v12[1];
        *(_WORD *)(a3 + 2 * v5) = *(v12 - 1);
        *(_WORD *)(a3 + 2) = v13;
        *(_WORD *)(a3 + 2 * (int)(v5 ^ 2)) = v14;
        *(_WORD *)(a3 + 6) = -1;
        v11 += 3;
        a3 += 8;
        v12 += 3;
      }
      while (v11 < 3 * a4);
    }
  }
  else if (a4 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (__int16 *)(a2 + 4);
    do
    {
      __int16 v17 = *(v16 - 1);
      __int16 v18 = *v16;
      __int16 v19 = v16[1];
      *(_WORD *)(a3 + 2 * v5) = *(v16 - 2);
      *(_WORD *)(a3 + 2) = v17;
      *(_WORD *)(a3 + 2 * (int)(v5 ^ 2)) = v18;
      *(_WORD *)(a3 + 6) = v19;
      v15 += 4;
      a3 += 8;
      v16 += 4;
    }
    while (v15 < 4 * a4);
  }
  return result;
}

void sub_100304D50(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100304D88(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498278);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_100304E3C(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

float sub_100304E3C(int *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[2];
  if (a1[1] == 3)
  {
    if (a4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 4 * v4;
      int v8 = (float *)(a3 + 4);
      do
      {
        float result = *(float *)(a2 + 4 * v5);
        int v10 = *(_DWORD *)(a2 + 4);
        int v11 = *(_DWORD *)(a2 + 4 * (int)(v5 ^ 2));
        *(v8 - 1) = result;
        *(_DWORD *)int v8 = v10;
        *((_DWORD *)v8 + 1) = v11;
        v6 += 3;
        a2 += v7;
        v8 += 3;
      }
      while (v6 < 3 * a4);
    }
  }
  else if (v4 == 3)
  {
    if (a4 >= 1)
    {
      uint64_t v12 = 0;
      __int16 v13 = (float *)(a2 + 4);
      do
      {
        float result = *(v13 - 1);
        float v14 = *v13;
        int v15 = *((_DWORD *)v13 + 1);
        *(float *)(a3 + 4 * v5) = result;
        *(float *)(a3 + 4) = v14;
        *(_DWORD *)(a3 + 4 * (int)(v5 ^ 2)) = v15;
        *(_DWORD *)(a3 + 12) = 1065353216;
        v12 += 3;
        a3 += 16;
        v13 += 3;
      }
      while (v12 < 3 * a4);
    }
  }
  else if (a4 >= 1)
  {
    uint64_t v16 = 0;
    __int16 v17 = (float *)(a2 + 8);
    do
    {
      float result = *(v17 - 2);
      int v18 = *((_DWORD *)v17 - 1);
      float v19 = *v17;
      int v20 = *((_DWORD *)v17 + 1);
      v17 += 4;
      *(float *)(a3 + 4 * v5) = result;
      *(_DWORD *)(a3 + 4) = v18;
      *(float *)(a3 + 4 * (int)(v5 ^ 2)) = v19;
      *(_DWORD *)(a3 + 12) = v20;
      v16 += 4;
      a3 += 16;
    }
    while (v16 < 4 * a4);
  }
  return result;
}

void sub_100304F4C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100304F84(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004982D8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (int8x16_t *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_10030504C(*(void *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      uint64_t v5 = (int8x16_t *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100305038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_10030504C(unint64_t result, uint64_t a2, int8x16_t *a3, unsigned int a4)
{
  int v4 = *(_DWORD *)result;
  uint64_t v5 = *(int *)(result + 4);
  if (*(_DWORD *)(result + 8) != 6)
  {
    if (v4 == 3)
    {
      if ((int)a4 >= 8)
      {
        unint64_t v7 = 0;
        int v22 = a3;
        do
        {
          int8x8x3_t v199 = vld3_s8((const char *)a2);
          a2 += 24;
          *(int8x8x3_t *)v197.val[0].i8 = v199;
          *v22++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(*(int8x8_t *)(result + 24), v199.val[1]), 2uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v197.val[v5], 3uLL))), (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v197.val[v5 ^ 2], *(int8x8_t *)(result + 24)), 7uLL));
          v7 += 8;
        }
        while (v7 <= a4 - 8);
      }
      else
      {
        LODWORD(v7) = 0;
      }
      if ((int)v7 >= (int)a4) {
        return result;
      }
      uint64_t v23 = v5 ^ 2;
      uint64_t v24 = v7;
      unint64_t v25 = a4 - (unint64_t)v7;
      if (v25 >= 9)
      {
        unint64_t v26 = (unint64_t)a3 + 2 * v7;
        unint64_t v27 = (unint64_t)a3 + 2 * a4;
        float result = 3 * a4 + v23 - 3 * v7 + a2 - 2;
        BOOL v28 = v26 >= a2 + 3 * a4 + ~(3 * (unint64_t)v7) || a2 + 1 >= v27;
        BOOL v29 = !v28;
        BOOL v30 = v26 >= 3 * a4 + v5 - 3 * (unint64_t)v7 + a2 - 2 || a2 + v5 >= v27;
        BOOL v31 = !v30;
        BOOL v32 = a2 + v23 >= v27 || v26 >= result;
        if (v32 && !v29 && !v31)
        {
          if (v25 < 0x11)
          {
            unint64_t v33 = 0;
LABEL_133:
            if ((v25 & 7) != 0) {
              uint64_t v115 = v25 & 7;
            }
            else {
              uint64_t v115 = 8;
            }
            unint64_t v116 = v25 - v115;
            uint64_t v117 = a4 - v115;
            uint64_t v118 = a2 + 3 * v116;
            uint64_t v119 = a2 + 3 * v33;
            unint64_t v120 = v33 + v7;
            uint64_t v121 = v120 + v115 - a4;
            v122 = (int8x16_t *)((char *)a3 + 2 * v120);
            do
            {
              v123 = (const char *)(v119 + v5);
              unint64_t v124 = (unint64_t)vld3_s8(v123);
              v125 = (const char *)(v119 + 1);
              unint64_t v126 = (unint64_t)vld3_s8(v125);
              v127 = (const char *)(v119 + v23);
              unint64_t v128 = (unint64_t)vld3_s8(v127);
              *v122++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v126, (int8x8_t)0xF8F8F8F8F8F8F8F8), 2uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v124, 3uLL))), (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v128, (int8x8_t)0xF8F8F8F8F8F8F8F8), 7uLL));
              v119 += 24;
              v121 += 8;
            }
            while (v121);
            uint64_t v24 = v117;
            a2 = v118;
            goto LABEL_139;
          }
          unint64_t v99 = 16;
          if ((v25 & 0xF) != 0) {
            unint64_t v99 = v25 & 0xF;
          }
          unint64_t v33 = v25 - v99;
          v100 = (int8x16_t *)((char *)a3 + 2 * v7);
          v101.i64[0] = 0xF8F8F8F8F8F8F8F8;
          v101.i64[1] = 0xF8F8F8F8F8F8F8F8;
          unint64_t v102 = a4 - (unint64_t)v7;
          uint64_t v103 = a2;
          do
          {
            v104 = (const char *)(v103 + v5);
            unsigned long long v105 = (unsigned __int128)vld3q_s8(v104);
            uint8x16_t v106 = vshrq_n_u8((uint8x16_t)v105, 3uLL);
            int8x16_t v107 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v106.i8);
            v108 = (const char *)(v103 + 1);
            unsigned long long v109 = (unsigned __int128)vld3q_s8(v108);
            uint8x16_t v110 = (uint8x16_t)vandq_s8((int8x16_t)v109, v101);
            int8x16_t v111 = vorrq_s8((int8x16_t)vshll_high_n_u8(v110, 2uLL), (int8x16_t)vmovl_high_u8(v106));
            float result = v103 + v23;
            unsigned long long v112 = (unsigned __int128)vld3q_s8((const char *)result);
            int8x16_t v113 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v110.i8, 2uLL), v107);
            uint8x16_t v114 = (uint8x16_t)vandq_s8((int8x16_t)v112, v101);
            int8x16_t *v100 = vorrq_s8(v113, (int8x16_t)vshll_n_u8(*(uint8x8_t *)v114.i8, 7uLL));
            v100[1] = vorrq_s8(v111, (int8x16_t)vshll_high_n_u8(v114, 7uLL));
            v100 += 2;
            v103 += 48;
            v102 -= 16;
          }
          while (v99 != v102);
          if (v99 > 8) {
            goto LABEL_133;
          }
          a2 += 3 * v33;
          uint64_t v24 = v33 + v7;
        }
      }
LABEL_139:
      v129 = &a3->i16[v24];
      uint64_t v130 = a4 - v24;
      do
      {
        *v129++ = (*(unsigned char *)(a2 + v5) >> 3) & 0x1F | (32 * (((*(unsigned char *)(a2 + 1) & 0xF8) >> 3) & 0x1F)) & 0x83FF | ((((*(unsigned char *)(a2 + v23) & 0xF8) >> 3) & 0x1F) << 10);
        a2 += 3;
        --v130;
      }
      while (v130);
      return result;
    }
    if ((int)a4 >= 8)
    {
      unint64_t v9 = 0;
      int8x16x4_t v48 = a3;
      do
      {
        int8x8x4_t v201 = vld4_s8((const char *)a2);
        a2 += 32;
        int8x8x4_t v197 = v201;
        int8x8_t v49 = *(int8x8_t *)(result + 24);
        int8x16_t v50 = (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v49, v201.val[1]), 2uLL);
        *(_OWORD *)v201.val[1].i8 = *(_OWORD *)(result + 48);
        *(int8x16_t *)v201.val[0].i8 = veorq_s8(*(int8x16_t *)(result + 64), (int8x16_t)vceqq_s16(*(int16x8_t *)v201.val[1].i8, (int16x8_t)vmovl_u8((uint8x8_t)v201.val[3])));
        *v48++ = vorrq_s8(vorrq_s8(vorrq_s8(v50, (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v197.val[v5], 3uLL))), (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v197.val[v5 ^ 2], v49), 7uLL)), vorrq_s8(vbicq_s8(*(int8x16_t *)v201.val[1].i8, *(int8x16_t *)v201.val[0].i8), vandq_s8(*(int8x16_t *)v201.val[0].i8, *(int8x16_t *)(result + 32))));
        v9 += 8;
      }
      while (v9 <= a4 - 8);
    }
    else
    {
      LODWORD(v9) = 0;
    }
    if ((int)v9 >= (int)a4) {
      return result;
    }
    uint64_t v51 = v5 ^ 2;
    uint64_t v52 = v9;
    unint64_t v53 = a4 - (unint64_t)v9;
    if (v53 >= 9)
    {
      unint64_t v54 = (unint64_t)a3 + 2 * v9;
      unint64_t v55 = (unint64_t)a3 + 2 * a4;
      float result = a2 + 4 * a4 - 4 * v9;
      BOOL v56 = v54 >= 4 * a4 + v51 - 4 * (unint64_t)v9 + a2 - 3 || a2 + v51 >= v55;
      BOOL v57 = !v56;
      BOOL v58 = v54 >= 4 * a4 + v5 - 4 * (unint64_t)v9 + a2 - 3 || a2 + v5 >= v55;
      BOOL v59 = !v58;
      BOOL v60 = a2 + 1 >= v55 || v54 >= result;
      if (v60 && !v57 && !v59)
      {
        if (v53 < 0x11)
        {
          unint64_t v61 = 0;
LABEL_163:
          if ((v53 & 7) != 0) {
            uint64_t v181 = v53 & 7;
          }
          else {
            uint64_t v181 = 8;
          }
          unint64_t v182 = v53 - v181;
          uint64_t v183 = a4 - v181;
          uint64_t v184 = a2 + 4 * v182;
          uint64_t v185 = a2 + 4 * v61;
          unint64_t v186 = v61 + v9;
          uint64_t v187 = v186 + v181 - a4;
          v188 = (int8x16_t *)((char *)a3 + 2 * v186);
          v189.i64[0] = 0x8000800080008000;
          v189.i64[1] = 0x8000800080008000;
          do
          {
            v190 = (const char *)(v185 + v5);
            unint64_t v191 = (unint64_t)vld4_s8(v190);
            v192 = (const char *)(v185 + 1);
            int8x8x4_t v202 = vld4_s8(v192);
            v193 = (const char *)(v185 + v51);
            unint64_t v194 = (unint64_t)vld4_s8(v193);
            *v188++ = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v202.val[0], (int8x8_t)0xF8F8F8F8F8F8F8F8), 2uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v191, 3uLL))), (int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v194, (int8x8_t)0xF8F8F8F8F8F8F8F8), 7uLL)), vbicq_s8(v189, (int8x16_t)vmovl_s8(vceqz_s8(v202.val[2]))));
            v185 += 32;
            v187 += 8;
          }
          while (v187);
          uint64_t v52 = v183;
          a2 = v184;
          goto LABEL_169;
        }
        unint64_t v165 = 16;
        if ((v53 & 0xF) != 0) {
          unint64_t v165 = v53 & 0xF;
        }
        unint64_t v61 = v53 - v165;
        v166 = (int8x16_t *)((char *)a3 + 2 * v9);
        v167.i64[0] = 0xF8F8F8F8F8F8F8F8;
        v167.i64[1] = 0xF8F8F8F8F8F8F8F8;
        v168.i64[0] = 0x8000800080008000;
        v168.i64[1] = 0x8000800080008000;
        unint64_t v169 = a4 - (unint64_t)v9;
        uint64_t v170 = a2;
        do
        {
          v171 = (const char *)(v170 + v5);
          unsigned long long v172 = (unsigned __int128)vld4q_s8(v171);
          uint8x16_t v173 = vshrq_n_u8((uint8x16_t)v172, 3uLL);
          int8x16_t v174 = (int8x16_t)vmovl_high_u8(v173);
          v175 = (const char *)(v170 + 1);
          int8x16x4_t v203 = vld4q_s8(v175);
          uint8x16_t v176 = (uint8x16_t)vandq_s8(v203.val[0], v167);
          int8x16_t v177 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v176.i8, 2uLL), (int8x16_t)vmovl_u8(*(uint8x8_t *)v173.i8));
          int8x16_t v178 = vorrq_s8((int8x16_t)vshll_high_n_u8(v176, 2uLL), v174);
          float result = v170 + v51;
          unsigned long long v179 = (unsigned __int128)vld4q_s8((const char *)result);
          uint8x16_t v180 = (uint8x16_t)vandq_s8((int8x16_t)v179, v167);
          v203.val[0] = vceqzq_s8(v203.val[2]);
          int8x16_t *v166 = vorrq_s8(vorrq_s8(v177, (int8x16_t)vshll_n_u8(*(uint8x8_t *)v180.i8, 7uLL)), vbicq_s8(v168, (int8x16_t)vmovl_s8(*(int8x8_t *)v203.val[0].i8)));
          v166[1] = vorrq_s8(vorrq_s8(v178, (int8x16_t)vshll_high_n_u8(v180, 7uLL)), vbicq_s8(v168, (int8x16_t)vmovl_high_s8(v203.val[0])));
          v166 += 2;
          v170 += 64;
          v169 -= 16;
        }
        while (v165 != v169);
        if (v165 > 8) {
          goto LABEL_163;
        }
        a2 += 4 * v61;
        uint64_t v52 = v61 + v9;
      }
    }
LABEL_169:
    v195 = &a3->i16[v52];
    uint64_t v196 = a4 - v52;
    do
    {
      *v195++ = (*(unsigned char *)(a2 + v5) >> 3) & 0x1F | (32 * (((*(unsigned char *)(a2 + 1) & 0xF8) >> 3) & 0x1F)) & 0x83FF | ((((*(unsigned char *)(a2 + v51) & 0xF8) >> 3) & 0x1F) << 10) | ((*(unsigned char *)(a2 + 3) != 0) << 15);
      a2 += 4;
      --v196;
    }
    while (v196);
    return result;
  }
  if (v4 != 3)
  {
    if ((int)a4 >= 8)
    {
      unint64_t v8 = 0;
      uint64_t v34 = a3;
      do
      {
        int8x8x4_t v200 = vld4_s8((const char *)a2);
        a2 += 32;
        int8x8x4_t v197 = v200;
        *v34++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(*(int8x8_t *)(result + 16), v200.val[1]), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v197.val[v5], 3uLL))), (int8x16_t)vshll_n_s8(vand_s8(*(int8x8_t *)(result + 24), v197.val[(int)(v5 ^ 2)]), 8uLL));
        v8 += 8;
      }
      while (v8 <= a4 - 8);
    }
    else
    {
      LODWORD(v8) = 0;
    }
    if ((int)v8 >= (int)a4) {
      return result;
    }
    uint64_t v35 = v5 ^ 2;
    uint64_t v36 = v8;
    uint64_t v37 = a4;
    unint64_t v38 = a4 - v36;
    if (v38 >= 9)
    {
      unint64_t v39 = (unint64_t)a3 + 2 * v36;
      unint64_t v40 = (unint64_t)a3 + 2 * a4;
      unint64_t v41 = 4 * a4 + v35 - 4 * v36 + a2 - 3;
      float result = 4 * v37 + v5 - 4 * v36 + a2 - 3;
      BOOL v42 = v39 >= 4 * v37 - 4 * v36 + a2 - 2 || a2 + 1 >= v40;
      BOOL v43 = !v42;
      BOOL v44 = v39 >= result || a2 + v5 >= v40;
      BOOL v45 = !v44;
      BOOL v46 = a2 + v35 >= v40 || v39 >= v41;
      if (v46 && !v43 && !v45)
      {
        if (v38 < 0x11)
        {
          unint64_t v47 = 0;
LABEL_148:
          if ((v38 & 7) != 0) {
            uint64_t v149 = v38 & 7;
          }
          else {
            uint64_t v149 = 8;
          }
          unint64_t v150 = v38 - v149;
          uint64_t v151 = v38 - v149 + v36;
          uint64_t v152 = a2 + 4 * v150;
          uint64_t v153 = a2 + 4 * v47;
          uint64_t v154 = v47 + v36;
          uint64_t v155 = v154 + v149 - v37;
          v156 = (int8x16_t *)((char *)a3 + 2 * v154);
          do
          {
            v157 = (const char *)(v153 + v5);
            unint64_t v158 = (unint64_t)vld4_s8(v157);
            v159 = (const char *)(v153 + 1);
            unint64_t v160 = (unint64_t)vld4_s8(v159);
            v161 = (const char *)(v153 + v35);
            unint64_t v162 = (unint64_t)vld4_s8(v161);
            *v156++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v160, (int8x8_t)0xFCFCFCFCFCFCFCFCLL), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v158, 3uLL))), (int8x16_t)vshll_n_s8(vand_s8((int8x8_t)v162, (int8x8_t)0xF8F8F8F8F8F8F8F8), 8uLL));
            v153 += 32;
            v155 += 8;
          }
          while (v155);
          uint64_t v36 = v151;
          a2 = v152;
          goto LABEL_154;
        }
        unint64_t v131 = 16;
        if ((v38 & 0xF) != 0) {
          unint64_t v131 = v38 & 0xF;
        }
        unint64_t v47 = v38 - v131;
        v132 = (int8x16_t *)((char *)a3 + 2 * v36);
        v133.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
        v133.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
        v134.i64[0] = 0xF8F8F8F8F8F8F8F8;
        v134.i64[1] = 0xF8F8F8F8F8F8F8F8;
        unint64_t v135 = v38;
        uint64_t v136 = a2;
        do
        {
          v137 = (const char *)(v136 + v5);
          unsigned long long v138 = (unsigned __int128)vld4q_s8(v137);
          uint8x16_t v139 = vshrq_n_u8((uint8x16_t)v138, 3uLL);
          int8x16_t v140 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v139.i8);
          v141 = (const char *)(v136 + 1);
          unsigned long long v142 = (unsigned __int128)vld4q_s8(v141);
          uint8x16_t v143 = (uint8x16_t)vandq_s8((int8x16_t)v142, v133);
          int8x16_t v144 = vorrq_s8((int8x16_t)vshll_high_n_u8(v143, 3uLL), (int8x16_t)vmovl_high_u8(v139));
          float result = v136 + v35;
          unsigned long long v145 = (unsigned __int128)vld4q_s8((const char *)result);
          int8x16_t v146 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v143.i8, 3uLL), v140);
          _Q4 = vandq_s8((int8x16_t)v145, v134);
          __asm { SHLL2           V5.8H, V4.16B, #8 }
          int8x16_t *v132 = vorrq_s8(v146, (int8x16_t)vshll_n_s8(*(int8x8_t *)_Q4.i8, 8uLL));
          v132[1] = vorrq_s8(v144, _Q5);
          v132 += 2;
          v136 += 64;
          v135 -= 16;
        }
        while (v131 != v135);
        if (v131 > 8) {
          goto LABEL_148;
        }
        a2 += 4 * v47;
        v36 += v47;
      }
    }
LABEL_154:
    v163 = &a3->i16[v36];
    uint64_t v164 = v37 - v36;
    do
    {
      *v163++ = (*(unsigned char *)(a2 + v5) >> 3) & 0x1F | (32 * (((*(unsigned char *)(a2 + 1) & 0xFC) >> 2) & 0x3F)) & 0x7FF | ((((*(unsigned char *)(a2 + v35) & 0xF8) >> 3) & 0x1F) << 11);
      a2 += 4;
      --v164;
    }
    while (v164);
    return result;
  }
  if ((int)a4 >= 8)
  {
    unint64_t v6 = 0;
    int v10 = a3;
    do
    {
      int8x8x3_t v198 = vld3_s8((const char *)a2);
      a2 += 24;
      *(int8x8x3_t *)v197.val[0].i8 = v198;
      *v10++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(*(int8x8_t *)(result + 16), v198.val[1]), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v197.val[v5], 3uLL))), (int8x16_t)vshll_n_s8(vand_s8(*(int8x8_t *)(result + 24), v197.val[(int)(v5 ^ 2)]), 8uLL));
      v6 += 8;
    }
    while (v6 <= a4 - 8);
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((int)v6 < (int)a4)
  {
    uint64_t v11 = v5 ^ 2;
    uint64_t v12 = v6;
    unint64_t v13 = a4 - (unint64_t)v6;
    if (v13 < 9) {
      goto LABEL_124;
    }
    unint64_t v14 = (unint64_t)a3 + 2 * v6;
    unint64_t v15 = (unint64_t)a3 + 2 * a4;
    float result = 3 * a4 + v11 - 3 * v6 + a2 - 2;
    _CF = v14 >= a2 + 3 * a4 + ~(3 * (unint64_t)v6) || a2 + 1 >= v15;
    BOOL v17 = !_CF;
    BOOL v18 = v14 >= 3 * a4 + v5 - 3 * (unint64_t)v6 + a2 - 2 || a2 + v5 >= v15;
    BOOL v19 = !v18;
    BOOL v20 = a2 + v11 >= v15 || v14 >= result;
    if (!v20 || v17 || v19) {
      goto LABEL_124;
    }
    if (v13 >= 0x11)
    {
      unint64_t v62 = 16;
      if ((v13 & 0xF) != 0) {
        unint64_t v62 = v13 & 0xF;
      }
      unint64_t v21 = v13 - v62;
      uint64_t v63 = (int8x16_t *)((char *)a3 + 2 * v6);
      v64.i64[0] = 0xFCFCFCFCFCFCFCFCLL;
      v64.i64[1] = 0xFCFCFCFCFCFCFCFCLL;
      v65.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v65.i64[1] = 0xF8F8F8F8F8F8F8F8;
      unint64_t v66 = a4 - (unint64_t)v6;
      uint64_t v67 = a2;
      do
      {
        unint64_t v68 = (const char *)(v67 + v5);
        unsigned long long v69 = (unsigned __int128)vld3q_s8(v68);
        uint8x16_t v70 = vshrq_n_u8((uint8x16_t)v69, 3uLL);
        int8x16_t v71 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v70.i8);
        unint64_t v72 = (const char *)(v67 + 1);
        unsigned long long v73 = (unsigned __int128)vld3q_s8(v72);
        uint8x16_t v74 = (uint8x16_t)vandq_s8((int8x16_t)v73, v64);
        int8x16_t v75 = vorrq_s8((int8x16_t)vshll_high_n_u8(v74, 3uLL), (int8x16_t)vmovl_high_u8(v70));
        float result = v67 + v11;
        unsigned long long v76 = (unsigned __int128)vld3q_s8((const char *)result);
        int8x16_t v77 = vorrq_s8((int8x16_t)vshll_n_u8(*(uint8x8_t *)v74.i8, 3uLL), v71);
        _Q4 = vandq_s8((int8x16_t)v76, v65);
        __asm { SHLL2           V5.8H, V4.16B, #8 }
        *uint64_t v63 = vorrq_s8(v77, (int8x16_t)vshll_n_s8(*(int8x8_t *)_Q4.i8, 8uLL));
        v63[1] = vorrq_s8(v75, _Q5);
        v63 += 2;
        v67 += 48;
        v66 -= 16;
      }
      while (v62 != v66);
      if (v62 <= 8)
      {
        a2 += 3 * v21;
        uint64_t v12 = v21 + v6;
LABEL_124:
        v97 = &a3->i16[v12];
        uint64_t v98 = a4 - v12;
        do
        {
          *v97++ = (*(unsigned char *)(a2 + v5) >> 3) & 0x1F | (32 * (((*(unsigned char *)(a2 + 1) & 0xFC) >> 2) & 0x3F)) & 0x7FF | ((((*(unsigned char *)(a2 + v11) & 0xF8) >> 3) & 0x1F) << 11);
          a2 += 3;
          --v98;
        }
        while (v98);
        return result;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    if ((v13 & 7) != 0) {
      uint64_t v83 = v13 & 7;
    }
    else {
      uint64_t v83 = 8;
    }
    unint64_t v84 = v13 - v83;
    uint64_t v85 = a4 - v83;
    uint64_t v86 = a2 + 3 * v84;
    uint64_t v87 = a2 + 3 * v21;
    unint64_t v88 = v21 + v6;
    uint64_t v89 = v88 + v83 - a4;
    v90 = (int8x16_t *)((char *)a3 + 2 * v88);
    do
    {
      v91 = (const char *)(v87 + v5);
      unint64_t v92 = (unint64_t)vld3_s8(v91);
      v93 = (const char *)(v87 + 1);
      unint64_t v94 = (unint64_t)vld3_s8(v93);
      v95 = (const char *)(v87 + v11);
      unint64_t v96 = (unint64_t)vld3_s8(v95);
      *v90++ = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8((int8x8_t)v94, (int8x8_t)0xFCFCFCFCFCFCFCFCLL), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8((uint8x8_t)v92, 3uLL))), (int8x16_t)vshll_n_s8(vand_s8((int8x8_t)v96, (int8x8_t)0xF8F8F8F8F8F8F8F8), 8uLL));
      v87 += 24;
      v89 += 8;
    }
    while (v89);
    uint64_t v12 = v85;
    a2 = v86;
    goto LABEL_124;
  }
  return result;
}

void sub_100305AB0(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100305AE8(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498338);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    unint64_t v6 = (int16x8_t *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_100305BB0(*(int8x16_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      unint64_t v6 = (int16x8_t *)((char *)v6 + *(void *)(a1 + 16));
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100305B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int8x16_t *sub_100305BB0(int8x16_t *result, int16x8_t *a2, char *a3, int a4)
{
  uint64_t v4 = result->i32[0];
  uint64_t v5 = result->i32[1];
  if (result->i32[2] == 6)
  {
    unint64_t v6 = (a4 - 16);
    if (a4 >= 16)
    {
      unint64_t v7 = 0;
      uint64_t v10 = (int)(v5 ^ 2);
      uint64_t v11 = 16 * v4;
      uint64_t v12 = a2 + 1;
      do
      {
        while (1)
        {
          int16x8_t v13 = v12[-1];
          *(int8x8_t *)v14.i8 = vshl_n_s8(vmovn_s16(v13), 3uLL);
          v14.u64[1] = (unint64_t)vshl_n_s8(vmovn_s16(*v12), 3uLL);
          int8x16_t v15 = vuzp1q_s8(vandq_s8(result[1], (int8x16_t)vshrq_n_u16((uint16x8_t)v13, 3uLL)), vandq_s8((int8x16_t)vshrq_n_u16(*(uint16x8_t *)v12, 3uLL), result[1]));
          int8x16_t v16 = vuzp1q_s8(vandq_s8(result[2], (int8x16_t)vshrq_n_u16((uint16x8_t)v13, 8uLL)), vandq_s8(result[2], (int8x16_t)vshrq_n_u16(*(uint16x8_t *)v12, 8uLL)));
          if (v4 == 3) {
            break;
          }
          v38.val[v5] = v14;
          v38.val[1] = v15;
          v38.val[v10] = v16;
          v41.val[3] = result[4];
          v41.val[0] = v38.val[0];
          v41.val[1] = v38.val[1];
          v41.val[2] = v38.val[2];
          vst4q_s8(a3, v41);
          v7 += 16;
          a3 += v11;
          v12 += 2;
          if (v7 > v6) {
            goto LABEL_10;
          }
        }
        v38.val[v5] = v14;
        v38.val[1] = v15;
        v38.val[v10] = v16;
        int8x16x3_t v39 = v38;
        vst3q_s8(a3, v39);
        v7 += 16;
        a3 += v11;
        v12 += 2;
      }
      while (v7 <= v6);
    }
    else
    {
      LODWORD(v7) = 0;
    }
LABEL_10:
    if ((int)v7 < a4)
    {
      uint64_t v17 = v5 ^ 2;
      uint64_t v18 = v7;
      BOOL v19 = (unsigned __int16 *)a2 + v7;
      uint64_t v20 = a4 - v18;
      if (v4 == 4)
      {
        do
        {
          unsigned int v21 = *v19++;
          a3[v5] = 8 * v21;
          a3[1] = (v21 >> 3) & 0xFC;
          a3[v17] = BYTE1(v21) & 0xF8;
          a3[3] = -1;
          a3 += v4;
          --v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          unsigned int v22 = *v19++;
          a3[v5] = 8 * v22;
          a3[1] = (v22 >> 3) & 0xFC;
          a3[v17] = BYTE1(v22) & 0xF8;
          a3 += v4;
          --v20;
        }
        while (v20);
      }
    }
  }
  else
  {
    unint64_t v8 = (a4 - 16);
    if (a4 >= 16)
    {
      unint64_t v9 = 0;
      uint64_t v23 = (int)(v5 ^ 2);
      uint64_t v24 = 16 * v4;
      unint64_t v25 = a2 + 1;
      do
      {
        while (1)
        {
          int16x8_t v26 = v25[-1];
          int8x16_t v27 = *(int8x16_t *)v25;
          *(int8x8_t *)v28.i8 = vshl_n_s8(vmovn_s16(v26), 3uLL);
          v28.u64[1] = (unint64_t)vshl_n_s8(vmovn_s16(*v25), 3uLL);
          int8x16_t v29 = result[2];
          int8x16_t v30 = vuzp1q_s8(vandq_s8(v29, (int8x16_t)vshrq_n_u16((uint16x8_t)v26, 2uLL)), vandq_s8((int8x16_t)vshrq_n_u16(*(uint16x8_t *)v25, 2uLL), v29));
          int8x16_t v31 = vuzp1q_s8(vandq_s8(v29, (int8x16_t)vshrq_n_u16((uint16x8_t)v26, 7uLL)), vandq_s8((int8x16_t)vshrq_n_u16(*(uint16x8_t *)v25, 7uLL), v29));
          if (v4 == 3) {
            break;
          }
          v38.val[v5] = v28;
          v38.val[1] = v30;
          v38.val[v23] = v31;
          v42.val[3] = vbslq_s8((int8x16_t)vqmovn_high_u16(vqmovn_u16((uint16x8_t)vandq_s8(result[3], (int8x16_t)v26)), (uint16x8_t)vandq_s8(result[3], v27)), result[4], result[5]);
          v42.val[0] = v38.val[0];
          v42.val[1] = v38.val[1];
          v42.val[2] = v38.val[2];
          vst4q_s8(a3, v42);
          v9 += 16;
          a3 += v24;
          v25 += 2;
          if (v9 > v8) {
            goto LABEL_20;
          }
        }
        v38.val[v5] = v28;
        v38.val[1] = v30;
        v38.val[v23] = v31;
        int8x16x3_t v40 = v38;
        vst3q_s8(a3, v40);
        v9 += 16;
        a3 += v24;
        v25 += 2;
      }
      while (v9 <= v8);
    }
    else
    {
      LODWORD(v9) = 0;
    }
LABEL_20:
    if ((int)v9 < a4)
    {
      uint64_t v32 = v5 ^ 2;
      uint64_t v33 = v9;
      uint64_t v34 = (unsigned __int16 *)a2 + v9;
      uint64_t v35 = a4 - v33;
      if (v4 == 4)
      {
        do
        {
          unsigned int v36 = (__int16)*v34++;
          a3[v5] = 8 * v36;
          a3[1] = (v36 >> 2) & 0xF8;
          a3[v32] = (v36 >> 7) & 0xF8;
          a3[3] = v36 >> 15;
          a3 += v4;
          --v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          unsigned int v37 = *v34++;
          a3[v5] = 8 * v37;
          a3[1] = (v37 >> 2) & 0xF8;
          a3[v32] = (v37 >> 7) & 0xF8;
          a3 += v4;
          --v35;
        }
        while (v35);
      }
    }
  }
  return result;
}

void sub_100305EB4(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100305EEC(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v16, &off_100498398);
  int v4 = *a2;
  int v5 = a2[1];
  if (*a2 < v5 && *(int *)(a1 + 40) >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = (unsigned char *)(*(void *)(a1 + 24) + v6 * v4);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 8) + v8 * v4;
    do
    {
      uint64_t v10 = *(unsigned int *)(a1 + 40);
      if ((int)v10 >= 1)
      {
        uint64_t v11 = *(int **)(a1 + 48);
        uint64_t v12 = v11 + 1;
        uint64_t v13 = *v11;
        int8x16_t v14 = (unsigned __int8 *)(v9 + 2);
        int8x16_t v15 = v7;
        do
        {
          *v15++ = (v12[*(v14 - 1) + 256] + v12[*(v14 - 2)] + v12[*v14 + 512]) >> 14;
          v14 += v13;
          --v10;
        }
        while (v10);
        uint64_t v8 = *(void *)(a1 + 16);
        uint64_t v6 = *(void *)(a1 + 32);
        int v5 = a2[1];
      }
      ++v4;
      v9 += v8;
      v7 += v6;
    }
    while (v4 < v5);
  }
  if (v17) {
    sub_1002D6888(v16);
  }
}

void sub_100305FF0(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100306028(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004983F8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    int v5 = (int16x8_t *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    uint64_t v6 = (const __int16 *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_1003060F0(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      uint64_t v6 = (const __int16 *)((char *)v6 + *(void *)(a1 + 16));
      int v5 = (int16x8_t *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_1003060DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x4_t *sub_1003060F0(int32x4_t *result, const __int16 *a2, int16x8_t *a3, int a4)
{
  int v4 = result->i32[1];
  uint64_t v5 = result->i32[0];
  int v6 = result->i32[2];
  int v7 = result->i32[3];
  if (a4 >= 8)
  {
    int64_t v8 = 0;
    int8x16_t v16 = a3;
    do
    {
      if (v5 == 3) {
        *(int16x8x3_t *)v19.val[0].i8 = vld3q_s16(a2);
      }
      else {
        int16x8x4_t v19 = vld4q_s16(a2);
      }
      *v16++ = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v19.val[1].i8, (uint16x4_t)result[1].u64[1]), *(uint16x4_t *)v19.val[0].i8, *(uint16x4_t *)result[1].i8), *(uint16x4_t *)v19.val[2].i8, *(uint16x4_t *)result[2].i8), result[3]), 0xEuLL), vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v19.val[1], (int8x16_t)v19.val[1], 8uLL), (uint16x4_t)result[1].u64[1]), (uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v19.val[0], (int8x16_t)v19.val[0], 8uLL), *(uint16x4_t *)result[1].i8),
                                (uint16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v19.val[2], (int8x16_t)v19.val[2], 8uLL),
                                *(uint16x4_t *)result[2].i8),
                   result[3]),
                 0xEuLL);
      v8 += 8;
      a2 += 8 * v5;
    }
    while (v8 <= (unint64_t)(a4 - 8));
  }
  else
  {
    LODWORD(v8) = 0;
  }
  int v9 = a4 - 4;
  if ((int)v8 <= a4 - 4)
  {
    int64_t v8 = v8;
    uint64_t v10 = 8 * v5;
    uint64_t v11 = (int16x4_t *)((char *)a3 + 2 * v8);
    if (v5 == 3)
    {
      do
      {
        int16x4x3_t v17 = vld3_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v10);
        *v11++ = vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v17.val[1], (uint16x4_t)result[1].u64[1]), (uint16x4_t)v17.val[0], *(uint16x4_t *)result[1].i8), (uint16x4_t)v17.val[2], *(uint16x4_t *)result[2].i8), result[3]), 0xEuLL);
        v8 += 4;
      }
      while (v8 <= v9);
    }
    else
    {
      do
      {
        int16x4x4_t v18 = vld4_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v10);
        *v11++ = vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v18.val[1], (uint16x4_t)result[1].u64[1]), (uint16x4_t)v18.val[0], *(uint16x4_t *)result[1].i8), (uint16x4_t)v18.val[2], *(uint16x4_t *)result[2].i8), result[3]), 0xEuLL);
        v8 += 4;
      }
      while (v8 <= v9);
    }
  }
  if ((int)v8 < a4)
  {
    uint64_t v12 = &a3->i16[v8];
    uint64_t v13 = (unsigned __int16 *)(a2 + 1);
    uint64_t v14 = 2 * v5;
    unint64_t v15 = a4 - (unint64_t)v8;
    do
    {
      *v12++ = (v6 * *v13 + v4 * *(v13 - 1) + v7 * v13[1] + 0x2000) >> 14;
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v14);
      --v15;
    }
    while (v15);
  }
  return result;
}

void sub_100306268(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003062A0(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v30, &off_100498458);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (float32x4_t *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    int v6 = (const float *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      int v7 = *(float32x4_t **)(a1 + 48);
      uint64_t v8 = *(int *)(a1 + 40);
      uint64_t v9 = *(unsigned int *)(a1 + 40);
      uint64_t v10 = v7->i32[0];
      float v11 = v7->f32[1];
      float v12 = v7->f32[2];
      float v13 = v7->f32[3];
      if (v10 == 3)
      {
        if ((int)v8 >= 8)
        {
          unint64_t v14 = 0;
          int16x4x4_t v18 = v5 + 1;
          unint64_t v15 = v6;
          do
          {
            int16x8x4_t v19 = v15;
            float32x4x3_t v32 = vld3q_f32(v19);
            v19 += 12;
            v18[-1] = vmlaq_f32(vmlaq_f32(vmulq_f32(v32.val[0], v7[1]), v7[2], v32.val[1]), v7[3], v32.val[2]);
            float32x4x3_t v33 = vld3q_f32(v19);
            float32x4_t *v18 = vmlaq_f32(vmlaq_f32(vmulq_f32(v33.val[0], v7[1]), v7[2], v33.val[1]), v7[3], v33.val[2]);
            v18 += 2;
            v14 += 8;
            v15 += 24;
          }
          while (v14 <= (v9 - 8));
          unint64_t v14 = v14;
          int64_t v16 = v8 - 4;
          if ((int)v14 > (int)v16) {
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v14 = 0;
          unint64_t v15 = v6;
          int64_t v16 = v8 - 4;
          if ((int)v16 < 0) {
            goto LABEL_23;
          }
        }
        uint64_t v20 = (float32x4_t *)((char *)v5 + 4 * v14);
        do
        {
          float32x4x3_t v34 = vld3q_f32(v15);
          v15 += 12;
          *v20++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v34.val[0], v7[1]), v7[2], v34.val[1]), v7[3], v34.val[2]);
          v14 += 4;
        }
        while ((uint64_t)v14 <= v16);
      }
      else
      {
        if ((int)v8 >= 8)
        {
          unint64_t v14 = 0;
          unsigned int v21 = v5 + 1;
          unint64_t v15 = v6;
          do
          {
            uint64_t v23 = &v15[4 * v10];
            float32x4x4_t v35 = vld4q_f32(v15);
            uint64_t v22 = 32 * v10;
            unint64_t v15 = (const float *)((char *)v15 + v22);
            v21[-1] = vmlaq_f32(vmlaq_f32(vmulq_f32(v35.val[0], v7[1]), v7[2], v35.val[1]), v7[3], v35.val[2]);
            float32x4x4_t v36 = vld4q_f32(v23);
            *unsigned int v21 = vmlaq_f32(vmlaq_f32(vmulq_f32(v36.val[0], v7[1]), v7[2], v36.val[1]), v7[3], v36.val[2]);
            v21 += 2;
            v14 += 8;
          }
          while (v14 <= (v8 - 8));
          unint64_t v14 = v14;
          int64_t v17 = v8 - 4;
          if ((int)v14 > (int)v17) {
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v14 = 0;
          unint64_t v15 = v6;
          int64_t v17 = v8 - 4;
          if ((int)v17 < 0) {
            goto LABEL_23;
          }
        }
        uint64_t v24 = (float32x4_t *)((char *)v5 + 4 * v14);
        do
        {
          float32x4x4_t v37 = vld4q_f32(v15);
          uint64_t v25 = 16 * v10;
          unint64_t v15 = (const float *)((char *)v15 + v25);
          *v24++ = vmlaq_f32(vmlaq_f32(vmulq_f32(v37.val[0], v7[1]), v7[2], v37.val[1]), v7[3], v37.val[2]);
          v14 += 4;
        }
        while ((uint64_t)v14 <= v17);
      }
      unint64_t v14 = v14;
LABEL_23:
      if ((int)v14 < (int)v9)
      {
        uint64_t v26 = v9 - v14;
        int8x16_t v27 = (float *)(v15 + 2);
        uint64_t v28 = 4 * v10;
        int8x16_t v29 = &v5->f32[v14];
        do
        {
          *v29++ = (float)((float)(v12 * *(v27 - 1)) + (float)(*(v27 - 2) * v11)) + (float)(*v27 * v13);
          int8x16_t v27 = (float *)((char *)v27 + v28);
          --v26;
        }
        while (v26);
      }
      ++v4;
      int v6 = (const float *)((char *)v6 + *(void *)(a1 + 16));
      uint64_t v5 = (float32x4_t *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v31) {
    sub_1002D6888(v30);
  }
}

void sub_10030651C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100306554(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v49, &off_1004984B8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    unint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    v7.i64[0] = -1;
    v7.i64[1] = -1;
    uint64_t v8 = -1;
    do
    {
      uint64_t v9 = *(unsigned int *)(a1 + 40);
      if (**(_DWORD **)(a1 + 48) == 3)
      {
        if ((int)v9 >= 1)
        {
          if (v9 < 8
            || ((unint64_t)v5 < v6 + v9 ? (BOOL v10 = v6 >= (unint64_t)&v5[3 * v9]) : (BOOL v10 = 1), !v10))
          {
            uint64_t v11 = 0;
            unint64_t v14 = v5;
            goto LABEL_24;
          }
          if (v9 >= 0x20)
          {
            uint64_t v11 = v9 & 0x7FFFFFE0;
            uint64_t v24 = (int8x16_t *)(v6 + 16);
            uint64_t v25 = v9 & 0xFFFFFFE0;
            uint64_t v26 = v5;
            do
            {
              v52.val[0] = v24[-1];
              v53.val[0] = *v24;
              v52.val[1] = v52.val[0];
              v52.val[2] = v52.val[0];
              v53.val[1] = *v24;
              v53.val[2] = *v24;
              int8x16_t v27 = v26 + 96;
              vst3q_s8(v26, v52);
              uint64_t v28 = v26 + 48;
              vst3q_s8(v28, v53);
              v24 += 2;
              uint64_t v26 = v27;
              v25 -= 32;
            }
            while (v25);
            if (v11 == v9) {
              goto LABEL_3;
            }
            if ((v9 & 0x18) == 0)
            {
              unint64_t v14 = &v5[3 * v11];
LABEL_24:
              uint64_t v15 = v9 - v11;
              int64_t v16 = (char *)(v6 + v11);
              int64_t v17 = v14 + 2;
              do
              {
                char v18 = *v16++;
                *int64_t v17 = v18;
                *(v17 - 1) = v18;
                *(v17 - 2) = v18;
                v17 += 3;
                --v15;
              }
              while (v15);
              goto LABEL_3;
            }
          }
          else
          {
            uint64_t v11 = 0;
          }
          uint64_t v29 = v11;
          uint64_t v11 = v9 & 0xFFFFFFF8;
          unint64_t v14 = &v5[3 * v11];
          int8x16_t v30 = (int8x8_t *)(v6 + v29);
          int v31 = &v5[3 * v29];
          uint64_t v32 = v29 - v11;
          do
          {
            int8x8_t v33 = *v30++;
            v51.val[0] = v33;
            v51.val[1] = v33;
            v51.val[2] = v33;
            vst3_s8(v31, v51);
            v31 += 24;
            v32 += 8;
          }
          while (v32);
          if (v11 == v9) {
            goto LABEL_3;
          }
          goto LABEL_24;
        }
      }
      else if ((int)v9 >= 1)
      {
        if (v9 < 8
          || ((unint64_t)v5 < v6 + v9 ? (BOOL v12 = v6 >= (unint64_t)&v5[4 * v9]) : (BOOL v12 = 1), !v12))
        {
          uint64_t v13 = 0;
          int16x8x4_t v19 = v5;
          goto LABEL_28;
        }
        if (v9 >= 0x20)
        {
          uint64_t v13 = v9 & 0x7FFFFFE0;
          float32x4x3_t v34 = (int8x16_t *)(v6 + 16);
          float32x4x4_t v35 = v5 + 64;
          uint64_t v36 = v9 & 0xFFFFFFE0;
          do
          {
            float32x4x4_t v37 = v35 - 64;
            int8x16_t v38 = v34[-1];
            v54.val[0] = *v34;
            int8x16_t v39 = v38;
            int8x16_t v40 = v38;
            v54.val[1] = *v34;
            v54.val[2] = *v34;
            v54.val[3] = v7;
            vst4q_s8(v37, *(int8x16x4_t *)(&v7 - 3));
            vst4q_s8(v35, v54);
            v34 += 2;
            v35 += 128;
            v36 -= 32;
          }
          while (v36);
          if (v13 == v9) {
            goto LABEL_3;
          }
          if ((v9 & 0x18) == 0)
          {
            int16x8x4_t v19 = &v5[4 * v13];
LABEL_28:
            uint64_t v20 = v9 - v13;
            unsigned int v21 = (char *)(v6 + v13);
            uint64_t v22 = v19 + 3;
            do
            {
              char v23 = *v21++;
              *(v22 - 1) = v23;
              *(v22 - 2) = v23;
              *(v22 - 3) = v23;
              *uint64_t v22 = -1;
              v22 += 4;
              --v20;
            }
            while (v20);
            goto LABEL_3;
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v41 = v13;
        uint64_t v13 = v9 & 0xFFFFFFF8;
        int16x8x4_t v19 = &v5[4 * v13];
        int8x16x4_t v42 = (uint64_t *)(v6 + v41);
        BOOL v43 = &v5[4 * v41];
        uint64_t v44 = v41 - v13;
        do
        {
          uint64_t v45 = *v42++;
          uint64_t v46 = v45;
          uint64_t v47 = v45;
          uint64_t v48 = v45;
          vst4_s8(v43, *(int8x8x4_t *)(&v8 - 3));
          v43 += 32;
          v44 += 8;
        }
        while (v44);
        if (v13 == v9) {
          goto LABEL_3;
        }
        goto LABEL_28;
      }
LABEL_3:
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v50) {
    sub_1002D6888(v49);
  }
}

void sub_100306818(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100306850(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v62, &off_100498518);
  int v4 = a2[1];
  uint64_t v5 = *a2;
  if ((int)v5 >= v4) {
    goto LABEL_53;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = v6 * v5;
  unint64_t v9 = v7 + v6 * v5;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v12 = v10 * v5;
  uint64_t v13 = (int16x4_t *)(v11 + v10 * v5);
  unint64_t v14 = *(unsigned int *)(a1 + 40);
  if (**(_DWORD **)(a1 + 48) == 3)
  {
    if ((int)v14 < 1) {
      goto LABEL_53;
    }
    if (v14 < 0x10)
    {
      uint64_t v15 = 2 * v14;
      uint64_t v16 = v12 + v11 + 2;
      do
      {
        uint64_t v17 = 0;
        char v18 = (_WORD *)v16;
        do
        {
          __int16 v19 = *(_WORD *)(v9 + v17);
          v18[1] = v19;
          _WORD *v18 = v19;
          *(v18 - 1) = v19;
          v17 += 2;
          v18 += 3;
        }
        while (v15 != v17);
        LODWORD(v5) = v5 + 1;
        v9 += v6;
        v16 += v10;
      }
      while (v5 != v4);
      goto LABEL_53;
    }
    uint64_t v23 = 0;
    uint64_t v24 = v8 + v7 + 16;
    unint64_t v25 = v8 + 2 * v14;
    while (1)
    {
      if ((unint64_t)v13 >= v7 + v25 + v6 * v23
        || v9 >= v11 + v12 + 6 * (unint64_t)v14 + v10 * v23)
      {
        uint64_t v27 = 0;
        int v31 = (int16x4_t *)((char *)v13 + 6 * (v14 & 0xFFFFFFF0));
        uint64_t v28 = (int16x8_t *)v24;
        do
        {
          uint64_t v29 = (__int16 *)&v13[v27];
          v64.val[0] = v28[-1];
          v65.val[0] = *v28;
          v64.val[1] = v64.val[0];
          v64.val[2] = v64.val[0];
          v65.val[1] = *v28;
          v65.val[2] = *v28;
          vst3q_s16(v29, v64);
          v29 += 24;
          vst3q_s16(v29, v65);
          v27 += 12;
          v28 += 2;
        }
        while (12 * (v14 >> 4) != v27);
        uint64_t v30 = v14 & 0x7FFFFFF0;
        if ((v14 & 0xFFFFFFF0) == v14) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v30 = 0;
        int v31 = v13;
      }
      uint64_t v32 = (_WORD *)v31 + 2;
      do
      {
        __int16 v33 = *(_WORD *)(v9 + 2 * v30);
        *uint64_t v32 = v33;
        *(v32 - 1) = v33;
        *(v32 - 2) = v33;
        ++v30;
        v32 += 3;
      }
      while (v14 != v30);
LABEL_17:
      LODWORD(v5) = v5 + 1;
      v9 += v6;
      uint64_t v13 = (int16x4_t *)((char *)v13 + v10);
      ++v23;
      v24 += v6;
      if (v5 == v4) {
        goto LABEL_53;
      }
    }
  }
  if ((int)v14 >= 1)
  {
    if (v14 > 0xF)
    {
      unint64_t v34 = v12 + 8 * v14;
      unint64_t v35 = v8 + 2 * v14;
      if ((v14 & 0xFFFFFFF0) == v14)
      {
        uint64_t v36 = 0;
        uint64_t v37 = v12 + v11 + 64;
        v38.i64[0] = -1;
        v38.i64[1] = -1;
        do
        {
          uint64_t v39 = 0;
          if ((unint64_t)v13 >= v7 + v35 + v6 * v36 || v9 >= v11 + v34 + v10 * v36)
          {
            uint64_t v41 = (__int16 *)v37;
            do
            {
              int8x16x4_t v42 = v41 - 32;
              long long v43 = *(_OWORD *)(v9 + v39);
              v66.val[0] = *(int16x8_t *)(v9 + v39 + 16);
              long long v44 = v43;
              long long v45 = v43;
              v66.val[1] = v66.val[0];
              v66.val[2] = v66.val[0];
              v66.val[3] = v38;
              vst4q_s16(v42, *(int16x8x4_t *)(&v38 - 3));
              vst4q_s16(v41, v66);
              v39 += 32;
              v41 += 64;
            }
            while (((2 * v14) & 0x1FFFFFFE0) != v39);
          }
          else
          {
            do
            {
              int16x4_t v46 = (int16x4_t)-1;
              v46.i16[0] = *(_WORD *)(v9 + 2 * v39);
              int16x4_t v47 = vzip1_s16(v46, v46);
              v47.i16[2] = v46.i16[0];
              v13[v39++] = v47;
            }
            while (v14 != v39);
          }
          LODWORD(v5) = v5 + 1;
          v9 += v6;
          uint64_t v13 = (int16x4_t *)((char *)v13 + v10);
          ++v36;
          v37 += v10;
        }
        while (v5 != v4);
      }
      else
      {
        uint64_t v48 = 0;
        uint64_t v49 = v8 + v7 + 16;
        v50.i64[0] = -1;
        v50.i64[1] = -1;
        do
        {
          if ((unint64_t)v13 >= v7 + v35 + v6 * v48 || v9 >= v11 + v34 + v10 * v48)
          {
            unint64_t v52 = 0;
            BOOL v59 = &v13[v14 & 0xFFFFFFF0];
            int8x16x3_t v53 = (int16x8_t *)v49;
            do
            {
              int8x16x4_t v54 = (__int16 *)&v13[v52 / 8];
              int16x8_t v55 = v53[-1];
              v67.val[0] = *v53;
              int16x8_t v56 = v55;
              int16x8_t v57 = v55;
              v67.val[1] = *v53;
              v67.val[2] = *v53;
              v67.val[3] = v50;
              vst4q_s16(v54, *(int16x8x4_t *)(&v50 - 3));
              v54 += 32;
              vst4q_s16(v54, v67);
              v52 += 128;
              v53 += 2;
            }
            while (((8 * v14) & 0x7FFFFFF80) != v52);
            uint64_t v58 = v14 & 0x7FFFFFF0;
          }
          else
          {
            uint64_t v58 = 0;
            BOOL v59 = v13;
          }
          do
          {
            int16x4_t v60 = (int16x4_t)-1;
            v60.i16[0] = *(_WORD *)(v9 + 2 * v58);
            int16x4_t v61 = vzip1_s16(v60, v60);
            v61.i16[2] = v60.i16[0];
            *v59++ = v61;
            ++v58;
          }
          while (v14 != v58);
          LODWORD(v5) = v5 + 1;
          v9 += v6;
          uint64_t v13 = (int16x4_t *)((char *)v13 + v10);
          ++v48;
          v49 += v6;
        }
        while (v5 != v4);
      }
    }
    else
    {
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          int16x4_t v21 = (int16x4_t)-1;
          v21.i16[0] = *(_WORD *)(v9 + 2 * i);
          int16x4_t v22 = vzip1_s16(v21, v21);
          v22.i16[2] = v21.i16[0];
          v13[i] = v22;
        }
        LODWORD(v5) = v5 + 1;
        v9 += v6;
        uint64_t v13 = (int16x4_t *)((char *)v13 + v10);
      }
      while (v5 != v4);
    }
  }
LABEL_53:
  if (v63) {
    sub_1002D6888(v62);
  }
}

void sub_100306C10(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100306C48(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v84, &off_100498578);
  int v4 = a2[1];
  uint64_t v5 = *a2;
  int v6 = v4 - v5;
  if (v4 <= (int)v5) {
    goto LABEL_62;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = v7 * v5;
  unint64_t v10 = v8 + v7 * v5;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v13 = v11 * v5;
  unint64_t v14 = (int32x4_t *)(v12 + v11 * v5);
  unint64_t v15 = *(unsigned int *)(a1 + 40);
  if (**(_DWORD **)(a1 + 48) == 3)
  {
    if ((int)v15 < 1) {
      goto LABEL_62;
    }
    if (v15 < 8)
    {
      uint64_t v16 = (int *)(v9 + v8 + 12);
      uint64_t v17 = (int *)(v13 + v12 + 40);
      do
      {
        int v18 = *(v16 - 3);
        *(v17 - 9) = v18;
        *(v17 - 8) = v18;
        *(v17 - 10) = v18;
        if (v15 != 1)
        {
          int v19 = *(v16 - 2);
          *(v17 - 6) = v19;
          *(v17 - 5) = v19;
          *(v17 - 7) = v19;
          if (v15 != 2)
          {
            int v20 = *(v16 - 1);
            *(v17 - 3) = v20;
            *(v17 - 2) = v20;
            *(v17 - 4) = v20;
            if (v15 != 3)
            {
              int v21 = *v16;
              *uint64_t v17 = *v16;
              v17[1] = v21;
              *(v17 - 1) = v21;
              if (v15 != 4)
              {
                int v22 = v16[1];
                v17[3] = v22;
                v17[4] = v22;
                v17[2] = v22;
                if (v15 != 5)
                {
                  int v23 = v16[2];
                  v17[6] = v23;
                  v17[7] = v23;
                  v17[5] = v23;
                  if (v15 != 6)
                  {
                    int v24 = v16[3];
                    v17[9] = v24;
                    v17[10] = v24;
                    v17[8] = v24;
                  }
                }
              }
            }
          }
        }
        uint64_t v16 = (int *)((char *)v16 + v7);
        uint64_t v17 = (int *)((char *)v17 + v11);
        --v6;
      }
      while (v6);
      goto LABEL_62;
    }
    uint64_t v45 = 0;
    uint64_t v46 = v9 + v8 + 16;
    unint64_t v47 = v9 + 4 * v15;
    while (1)
    {
      if ((unint64_t)v14 >= v8 + v47 + v7 * v45
        || v10 >= v12 + v13 + 12 * (unint64_t)v15 + v11 * v45)
      {
        uint64_t v49 = 0;
        int8x16x3_t v53 = (int32x4_t *)((char *)v14 + 12 * (v15 & 0xFFFFFFF8));
        int16x8_t v50 = (float32x4_t *)v46;
        do
        {
          i32 = (float *)v14[v49].i32;
          v86.val[0] = v50[-1];
          v87.val[0] = *v50;
          v86.val[1] = v86.val[0];
          v86.val[2] = v86.val[0];
          v87.val[1] = *v50;
          v87.val[2] = *v50;
          vst3q_f32(i32, v86);
          i32 += 12;
          vst3q_f32(i32, v87);
          v49 += 6;
          v50 += 2;
        }
        while (6 * (v15 >> 3) != v49);
        uint64_t v52 = v15 & 0x7FFFFFF8;
        if ((v15 & 0xFFFFFFF8) == v15) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v52 = 0;
        int8x16x3_t v53 = v14;
      }
      int8x16x4_t v54 = &v53->i32[2];
      do
      {
        int v55 = *(_DWORD *)(v10 + 4 * v52);
        *(v54 - 1) = v55;
        *int8x16x4_t v54 = v55;
        *(v54 - 2) = v55;
        ++v52;
        v54 += 3;
      }
      while (v15 != v52);
LABEL_26:
      LODWORD(v5) = v5 + 1;
      v10 += v7;
      unint64_t v14 = (int32x4_t *)((char *)v14 + v11);
      ++v45;
      v46 += v7;
      if (v5 == v4) {
        goto LABEL_62;
      }
    }
  }
  if ((int)v15 >= 1)
  {
    if (v15 > 7)
    {
      unint64_t v56 = v13 + 16 * v15;
      unint64_t v57 = v9 + 4 * v15;
      if ((v15 & 0xFFFFFFF8) == v15)
      {
        uint64_t v58 = 0;
        uint64_t v59 = v13 + v12 + 64;
        __asm { FMOV            V3.4S, #1.0 }
        do
        {
          uint64_t v61 = 0;
          if ((unint64_t)v14 >= v8 + v57 + v7 * v58 || v10 >= v12 + v56 + v11 * v58)
          {
            int v63 = (float *)v59;
            do
            {
              int16x8x3_t v64 = v63 - 16;
              long long v65 = *(_OWORD *)(v10 + v61);
              v88.val[0] = *(float32x4_t *)(v10 + v61 + 16);
              long long v66 = v65;
              long long v67 = v65;
              v88.val[1] = v88.val[0];
              v88.val[2] = v88.val[0];
              v88.val[3] = _Q3;
              vst4q_f32(v64, *(float32x4x4_t *)(&_Q3 - 3));
              vst4q_f32(v63, v88);
              v61 += 32;
              v63 += 32;
            }
            while (((4 * v15) & 0x3FFFFFFE0) != v61);
          }
          else
          {
            do
            {
              int32x4_t v68 = (int32x4_t)_Q3;
              v68.i32[0] = *(_DWORD *)(v10 + 4 * v61);
              int32x4_t v69 = vzip1q_s32(v68, v68);
              v69.i32[2] = *(_DWORD *)(v10 + 4 * v61);
              v14[v61++] = v69;
            }
            while (v15 != v61);
          }
          LODWORD(v5) = v5 + 1;
          v10 += v7;
          unint64_t v14 = (int32x4_t *)((char *)v14 + v11);
          ++v58;
          v59 += v11;
        }
        while (v5 != v4);
      }
      else
      {
        uint64_t v70 = 0;
        uint64_t v71 = v9 + v8 + 16;
        __asm { FMOV            V3.4S, #1.0 }
        do
        {
          if ((unint64_t)v14 >= v8 + v57 + v7 * v70 || v10 >= v12 + v56 + v11 * v70)
          {
            unint64_t v74 = 0;
            v81 = &v14[v15 & 0xFFFFFFF8];
            int8x16_t v75 = (float32x4_t *)v71;
            do
            {
              unsigned long long v76 = (float *)v14[v74 / 0x10].i32;
              float32x4_t v77 = v75[-1];
              v89.val[0] = *v75;
              float32x4_t v78 = v77;
              float32x4_t v79 = v77;
              v89.val[1] = *v75;
              v89.val[2] = *v75;
              v89.val[3] = _Q3;
              vst4q_f32(v76, *(float32x4x4_t *)(&_Q3 - 3));
              v76 += 16;
              vst4q_f32(v76, v89);
              v74 += 128;
              v75 += 2;
            }
            while (((16 * v15) & 0xFFFFFFF80) != v74);
            uint64_t v80 = v15 & 0x7FFFFFF8;
          }
          else
          {
            uint64_t v80 = 0;
            v81 = v14;
          }
          do
          {
            int32x4_t v82 = (int32x4_t)_Q3;
            v82.i32[0] = *(_DWORD *)(v10 + 4 * v80);
            int32x4_t v83 = vzip1q_s32(v82, v82);
            v83.i32[2] = *(_DWORD *)(v10 + 4 * v80);
            *v81++ = v83;
            ++v80;
          }
          while (v15 != v80);
          LODWORD(v5) = v5 + 1;
          v10 += v7;
          unint64_t v14 = (int32x4_t *)((char *)v14 + v11);
          ++v70;
          v71 += v7;
        }
        while (v5 != v4);
      }
    }
    else
    {
      unint64_t v25 = (__int32 *)(v9 + v8 + 12);
      uint64_t v26 = (int32x4_t *)(v13 + v12 + 48);
      __asm { FMOV            V0.4S, #1.0 }
      do
      {
        int32x4_t v31 = _Q0;
        v31.i32[0] = *(v25 - 3);
        int32x4_t v32 = vzip1q_s32(v31, v31);
        v32.i32[2] = *(v25 - 3);
        v26[-3] = v32;
        if (v15 != 1)
        {
          int32x4_t v33 = _Q0;
          v33.i32[0] = *(v25 - 2);
          int32x4_t v34 = vzip1q_s32(v33, v33);
          v34.i32[2] = *(v25 - 2);
          v26[-2] = v34;
          if (v15 != 2)
          {
            int32x4_t v35 = _Q0;
            v35.i32[0] = *(v25 - 1);
            int32x4_t v36 = vzip1q_s32(v35, v35);
            v36.i32[2] = *(v25 - 1);
            v26[-1] = v36;
            if (v15 != 3)
            {
              int32x4_t v37 = _Q0;
              v37.i32[0] = *v25;
              int32x4_t v38 = vzip1q_s32(v37, v37);
              v38.i32[2] = *v25;
              *uint64_t v26 = v38;
              if (v15 != 4)
              {
                int32x4_t v39 = _Q0;
                v39.i32[0] = v25[1];
                int32x4_t v40 = vzip1q_s32(v39, v39);
                v40.i32[2] = v25[1];
                v26[1] = v40;
                if (v15 != 5)
                {
                  int32x4_t v41 = _Q0;
                  v41.i32[0] = v25[2];
                  int32x4_t v42 = vzip1q_s32(v41, v41);
                  v42.i32[2] = v25[2];
                  v26[2] = v42;
                  if (v15 != 6)
                  {
                    int32x4_t v43 = _Q0;
                    v43.i32[0] = v25[3];
                    int32x4_t v44 = vzip1q_s32(v43, v43);
                    v44.i32[2] = v25[3];
                    v26[3] = v44;
                  }
                }
              }
            }
          }
        }
        unint64_t v25 = (__int32 *)((char *)v25 + v7);
        uint64_t v26 = (int32x4_t *)((char *)v26 + v11);
        --v6;
      }
      while (v6);
    }
  }
LABEL_62:
  if (v85) {
    sub_1002D6888(v84);
  }
}

void sub_100307128(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100307160(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004985D8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    int v6 = (int16x8_t *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_100307228(*(void *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      int v6 = (int16x8_t *)((char *)v6 + *(void *)(a1 + 16));
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100307214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100307228(uint64_t result, int16x8_t *a2, uint64_t a3, unsigned int a4)
{
  if (*(_DWORD *)result != 6)
  {
    if ((int)a4 >= 8)
    {
      unint64_t v5 = 0;
      int v18 = a2;
      do
      {
        int16x8_t v19 = *v18++;
        int8x16_t v20 = *(int8x16_t *)(result + 48);
        int8x16_t v21 = vandq_s8((int8x16_t)vshlq_n_s16(v19, 3uLL), v20);
        int8x16_t v22 = vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v19, 2uLL), v20);
        int8x16_t v23 = vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v19, 7uLL), v20);
        *(int8x8_t *)(a3 + v5) = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)(result + 16)), *(uint16x4_t *)v21.i8, *(uint16x4_t *)(result + 8)), *(uint16x4_t *)v23.i8, *(uint16x4_t *)(result + 24)), *(int32x4_t *)(result + 32)), 0xEuLL), vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(uint16x4_t *)(result + 16)), (uint16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL),
                                                      *(uint16x4_t *)(result + 8)),
                                                    (uint16x4_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL),
                                                    *(uint16x4_t *)(result + 24)),
                                       *(int32x4_t *)(result + 32)),
                                     0xEuLL));
        v5 += 8;
      }
      while (v5 <= a4 - 8);
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if ((int)v5 >= (int)a4) {
      return result;
    }
    unint64_t v24 = a4 - (unint64_t)v5;
    if (v24 < 8
      || a3 + (unint64_t)v5 < (unint64_t)a2 + 2 * a4
      && (unint64_t)a2 + 2 * v5 < a3 + (unint64_t)a4)
    {
      unint64_t v25 = v5;
      goto LABEL_23;
    }
    if (v24 >= 0x10)
    {
      unint64_t v31 = v24 & 0xFFFFFFFFFFFFFFF0;
      int16x4_t v60 = (int8x16_t *)(a3 + v5);
      v61.i64[0] = 0xF8000000F8;
      v61.i64[1] = 0xF8000000F8;
      unint64_t v62 = (uint16x8_t *)((char *)a2 + 2 * v5);
      uint16x4_t v63 = (uint16x4_t)vdup_n_s16(0x74Cu);
      uint16x4_t v64 = (uint16x4_t)vdup_n_s16(0x2591u);
      uint16x4_t v65 = (uint16x4_t)vdup_n_s16(0x1323u);
      v66.i64[0] = 0x200000002000;
      v66.i64[1] = 0x200000002000;
      unint64_t v67 = v24 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint16x8_t v69 = *v62;
        uint16x8_t v68 = v62[1];
        v62 += 2;
        uint32x4_t v70 = vmovl_u16(*(uint16x4_t *)v69.i8);
        uint32x4_t v71 = vmovl_u16(*(uint16x4_t *)v68.i8);
        uint32x4_t v72 = vmovl_high_u16(v69);
        uint32x4_t v73 = vmovl_high_u16(v68);
        v88.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v73, 2uLL), v61)), v64), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v68, 3uLL), v61)), v63), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v73, 7uLL), v61)), v65), v66), 0xEuLL);
        v88.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v72, 2uLL), v61)), v64), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v69, 3uLL), v61)), v63), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v72, 7uLL), v61)), v65), v66), 0xEuLL);
        v88.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v71, 2uLL), v61)), v64), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v68.i8, 3uLL), v61)), v63), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v71, 7uLL), v61)), v65), v66), 0xEuLL);
        v88.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v70, 2uLL), v61)), v64), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v69.i8, 3uLL), v61)), v63), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v70, 7uLL), v61)), v65), v66), 0xEuLL);
        *v60++ = vqtbl4q_s8(v88, (int8x16_t)xmmword_1004047C0);
        v67 -= 16;
      }
      while (v67);
      if (v24 == v31) {
        return result;
      }
      if ((v24 & 8) == 0)
      {
        unint64_t v25 = v31 + v5;
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v31 = 0;
    }
    unint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + v5;
    unint64_t v74 = v31 - (v24 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v75 = v31 + v5;
    unsigned long long v76 = (void *)(a3 + v75);
    v77.i64[0] = 0xF8000000F8;
    v77.i64[1] = 0xF8000000F8;
    uint16x4_t v78 = (uint16x4_t)vdup_n_s16(0x74Cu);
    uint16x4_t v79 = (uint16x4_t)vdup_n_s16(0x2591u);
    uint64_t v80 = (uint16x8_t *)((char *)a2 + 2 * v75);
    uint16x4_t v81 = (uint16x4_t)vdup_n_s16(0x1323u);
    v82.i64[0] = 0x200000002000;
    v82.i64[1] = 0x200000002000;
    do
    {
      uint16x8_t v83 = *v80++;
      uint32x4_t v84 = vmovl_u16(*(uint16x4_t *)v83.i8);
      uint32x4_t v85 = vmovl_high_u16(v83);
      v87.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v85, 2uLL), v77)), v79), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v83, 3uLL), v77)), v78), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v85, 7uLL), v77)), v81), v82), 0xEuLL);
      v87.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v84, 2uLL), v77)), v79), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v83.i8, 3uLL), v77)), v78), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v84, 7uLL), v77)), v81), v82), 0xEuLL);
      *v76++ = vqtbl2q_s8(v87, (int8x16_t)xmmword_1004047D0).u64[0];
      v74 += 8;
    }
    while (v74);
    if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
      return result;
    }
LABEL_23:
    uint64_t v26 = (unsigned char *)(a3 + v25);
    unint64_t v27 = a4 - v25;
    uint64_t v28 = (unsigned __int16 *)a2 + v25;
    do
    {
      unsigned int v29 = *v28++;
      *v26++ = (14944 * (v29 & 0x1F) + 9617 * ((v29 >> 2) & 0xF8) + 4899 * ((v29 >> 7) & 0xF8) + 0x2000) >> 14;
      --v27;
    }
    while (v27);
    return result;
  }
  if ((int)a4 >= 8)
  {
    unint64_t v4 = 0;
    int v6 = a2;
    do
    {
      int16x8_t v7 = *v6++;
      int8x16_t v8 = *(int8x16_t *)(result + 48);
      int8x16_t v9 = vandq_s8((int8x16_t)vshlq_n_s16(v7, 3uLL), v8);
      int8x16_t v10 = vandq_s8(*(int8x16_t *)(result + 64), (int8x16_t)vshrq_n_u16((uint16x8_t)v7, 3uLL));
      int8x16_t v11 = vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v7, 8uLL), v8);
      *(int8x8_t *)(a3 + v4) = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)(result + 16)), *(uint16x4_t *)v9.i8, *(uint16x4_t *)(result + 8)), *(uint16x4_t *)v11.i8, *(uint16x4_t *)(result + 24)), *(int32x4_t *)(result + 32)), 0xEuLL), vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), *(uint16x4_t *)(result + 16)), (uint16x4_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL),
                                                    *(uint16x4_t *)(result + 8)),
                                                  (uint16x4_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL),
                                                  *(uint16x4_t *)(result + 24)),
                                     *(int32x4_t *)(result + 32)),
                                   0xEuLL));
      v4 += 8;
    }
    while (v4 <= a4 - 8);
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((int)v4 < (int)a4)
  {
    unint64_t v12 = a4 - (unint64_t)v4;
    if (v12 < 8
      || a3 + (unint64_t)v4 < (unint64_t)a2 + 2 * a4
      && (unint64_t)a2 + 2 * v4 < a3 + (unint64_t)a4)
    {
      unint64_t v13 = v4;
      goto LABEL_13;
    }
    if (v12 >= 0x10)
    {
      unint64_t v30 = v12 & 0xFFFFFFFFFFFFFFF0;
      int32x4_t v32 = (uint16x8_t *)((char *)a2 + 2 * v4);
      int32x4_t v33 = (int8x16_t *)(a3 + v4);
      uint16x4_t v34 = (uint16x4_t)vdup_n_s16(0x74Cu);
      v35.i64[0] = 0xF8000000F8;
      v35.i64[1] = 0xF8000000F8;
      v36.i64[0] = 0xFC000000FCLL;
      v36.i64[1] = 0xFC000000FCLL;
      uint16x4_t v37 = (uint16x4_t)vdup_n_s16(0x2591u);
      uint16x4_t v38 = (uint16x4_t)vdup_n_s16(0x1323u);
      v39.i64[0] = 0x200000002000;
      v39.i64[1] = 0x200000002000;
      unint64_t v40 = v12 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint16x8_t v42 = *v32;
        uint16x8_t v41 = v32[1];
        v32 += 2;
        uint32x4_t v43 = vmovl_u16(*(uint16x4_t *)v42.i8);
        uint32x4_t v44 = vmovl_u16(*(uint16x4_t *)v41.i8);
        uint32x4_t v45 = vmovl_high_u16(v42);
        uint32x4_t v46 = vmovl_high_u16(v41);
        v89.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v46, 3uLL), v36)), v37), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v41, 3uLL), v35)), v34), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v46, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v38), v39), 0xEuLL);
        v89.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v45, 3uLL), v36)), v37), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v42, 3uLL), v35)), v34), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v45, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v38), v39), 0xEuLL);
        v89.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v44, 3uLL), v36)), v37), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v41.i8, 3uLL), v35)), v34), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v44, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v38), v39), 0xEuLL);
        v89.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v43, 3uLL), v36)), v37), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v42.i8, 3uLL), v35)), v34), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v43, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v38), v39), 0xEuLL);
        *v33++ = vqtbl4q_s8(v89, (int8x16_t)xmmword_1004047C0);
        v40 -= 16;
      }
      while (v40);
      if (v12 == v30) {
        return result;
      }
      if ((v12 & 8) == 0)
      {
        unint64_t v13 = v30 + v4;
LABEL_13:
        unint64_t v14 = (unsigned char *)(a3 + v13);
        unint64_t v15 = a4 - v13;
        uint64_t v16 = (unsigned __int16 *)a2 + v13;
        do
        {
          unsigned int v17 = *v16++;
          *v14++ = (14944 * (v17 & 0x1F) + 9617 * ((v17 >> 3) & 0xFC) + 4899 * ((v17 >> 8) & 0xF8) + 0x2000) >> 14;
          --v15;
        }
        while (v15);
        return result;
      }
    }
    else
    {
      unint64_t v30 = 0;
    }
    unint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + v4;
    unint64_t v47 = v30 - (v12 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v48 = v30 + v4;
    uint64_t v49 = (void *)(a3 + v48);
    uint16x4_t v50 = (uint16x4_t)vdup_n_s16(0x74Cu);
    v51.i64[0] = 0xF8000000F8;
    v51.i64[1] = 0xF8000000F8;
    v52.i64[0] = 0xFC000000FCLL;
    v52.i64[1] = 0xFC000000FCLL;
    int8x16x3_t v53 = (uint16x8_t *)((char *)a2 + 2 * v48);
    uint16x4_t v54 = (uint16x4_t)vdup_n_s16(0x2591u);
    uint16x4_t v55 = (uint16x4_t)vdup_n_s16(0x1323u);
    v56.i64[0] = 0x200000002000;
    v56.i64[1] = 0x200000002000;
    do
    {
      uint16x8_t v57 = *v53++;
      uint32x4_t v58 = vmovl_u16(*(uint16x4_t *)v57.i8);
      uint32x4_t v59 = vmovl_high_u16(v57);
      v86.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v59, 3uLL), v52)), v54), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_high_n_u16(v57, 3uLL), v51)), v50), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v59, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v55), v56), 0xEuLL);
      v86.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v58, 3uLL), v52)), v54), (uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v57.i8, 3uLL), v51)), v50), (uint16x4_t)vmovn_s32((int32x4_t)(*(_OWORD *)&vshrq_n_u32(v58, 8uLL) & __PAIR128__(0xFFFFFFF8FFFFFFF8, 0xFFFFFFF8FFFFFFF8))), v55), v56), 0xEuLL);
      *v49++ = vqtbl2q_s8(v86, (int8x16_t)xmmword_1004047D0).u64[0];
      v47 += 8;
    }
    while (v47);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_13;
    }
  }
  return result;
}

void sub_1003078EC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100307924(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v55, &off_100498638);
  int v5 = *a2;
  if (*a2 < a2[1])
  {
    int v6 = (int8x16_t *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v5);
    uint64_t v7 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v5;
    int16x8_t v8 = vdupq_n_s16(0x421u);
    do
    {
      int8x16_t v9 = *(int8x8_t **)(a1 + 48);
      uint64_t v10 = *(unsigned int *)(a1 + 40);
      if (v9->i32[0] == 6)
      {
        if ((int)v10 >= 8)
        {
          unint64_t v11 = 0;
          unint64_t v13 = v6;
          do
          {
            int8x16_t v4 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_u8((uint8x8_t)vand_s8(v9[2], *(int8x8_t *)(v7 + v11)), 3uLL), (int8x16_t)vmovl_u8(vshr_n_u8(*(uint8x8_t *)(v7 + v11), 3uLL))), (int8x16_t)vshll_n_s8(vand_s8(v9[1], *(int8x8_t *)(v7 + v11)), 8uLL));
            *v13++ = v4;
            v11 += 8;
          }
          while (v11 <= (v10 - 8));
          unint64_t v11 = v11;
          if ((int)v11 >= (int)v10) {
            goto LABEL_3;
          }
LABEL_14:
          unint64_t v14 = v10 - v11;
          if (v10 - v11 < 8 || (unint64_t)v6 + 2 * v11 < v7 + v10 && v7 + v11 < (unint64_t)v6 + 2 * v10)
          {
            unint64_t v15 = v11;
            goto LABEL_18;
          }
          if (v14 >= 0x10)
          {
            unint64_t v28 = v14 & 0xFFFFFFFFFFFFFFF0;
            uint16x4_t v37 = (int8x16_t *)(v7 + v11);
            uint16x4_t v38 = (int8x16_t *)((char *)v6 + 2 * v11);
            unint64_t v39 = v14 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              int8x16_t v40 = *v37++;
              int32x4_t v41 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_100404890);
              int32x4_t v42 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1004048A0);
              int32x4_t v43 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1004048B0);
              int32x4_t v44 = (int32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_1004048C0);
              int8x16_t v4 = (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v43, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v43, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v43, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))), (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v44, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v44, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v44, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))));
              *(int16x8_t *)uint16x4_t v38 = vuzp1q_s16((int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v41, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v41, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v41, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))), (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v42, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v42, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v42, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))));
              v38[1] = v4;
              v38 += 2;
              v39 -= 16;
            }
            while (v39);
            if (v14 == v28) {
              goto LABEL_3;
            }
            if ((v14 & 8) == 0)
            {
              unint64_t v15 = v28 + v11;
LABEL_18:
              uint64_t v16 = v10 - v15;
              unsigned int v17 = &v6->i16[v15];
              int v18 = (unsigned __int8 *)(v7 + v15);
              do
              {
                unsigned int v19 = *v18++;
                *v17++ = (v19 >> 3) & 0x1F | (32 * (v19 >> 2)) & 0x7FF | (v19 >> 3 << 11);
                --v16;
              }
              while (v16);
              goto LABEL_3;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          unint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + v11;
          unint64_t v29 = v28 - (v14 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v30 = v28 + v11;
          unint64_t v31 = (uint64_t *)(v7 + v30);
          int32x4_t v32 = (int8x16_t *)((char *)v6 + 2 * v30);
          do
          {
            uint64_t v33 = *v31++;
            v4.i64[0] = v33;
            int32x4_t v34 = (int32x4_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_100404890);
            int32x4_t v35 = (int32x4_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_1004048A0);
            int8x16_t v4 = (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v34, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v34, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v34, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))), (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)(*(_OWORD *)&vshlq_n_s32(v35, 3uLL) & __PAIR128__(0xFFFFFFE7FFFFFFE7, 0xFFFFFFE7FFFFFFE7)), (int8x16_t)vshrq_n_u32((uint32x4_t)v35, 3uLL)), (int8x16_t)(*(_OWORD *)&vshlq_n_s32(v35, 8uLL) & __PAIR128__(0xFFFFF8FFFFFFF8FFLL, 0xFFFFF8FFFFFFF8FFLL))));
            *v32++ = v4;
            v29 += 8;
          }
          while (v29);
          if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_3;
          }
          goto LABEL_18;
        }
        unint64_t v11 = 0;
        if ((int)v10 > 0) {
          goto LABEL_14;
        }
      }
      else
      {
        if ((int)v10 >= 8)
        {
          unint64_t v20 = 0;
          int8x16_t v21 = v6;
          do
          {
            int8x16_t v4 = (int8x16_t)vmulq_s16((int16x8_t)vmovl_u8(vshr_n_u8(*(uint8x8_t *)(v7 + v20), 3uLL)), v8);
            *v21++ = v4;
            v20 += 8;
          }
          while (v20 <= (v10 - 8));
          uint64_t v12 = v20;
          if ((int)v20 >= (int)v10) {
            goto LABEL_3;
          }
LABEL_24:
          unint64_t v22 = v10 - v12;
          if ((unint64_t)(v10 - v12) < 8
            || (unint64_t)v6 + 2 * v12 < v7 + v10 && v7 + v12 < (unint64_t)v6 + 2 * v10)
          {
            uint64_t v23 = v12;
            goto LABEL_28;
          }
          if (v22 >= 0x20)
          {
            unint64_t v36 = v22 & 0xFFFFFFFFFFFFFFE0;
            uint32x4_t v45 = (uint8x16_t *)(v7 + v12 + 16);
            uint64_t v46 = (uint64_t)v6[2].i64 + 2 * v12;
            unint64_t v47 = v22 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              uint8x16_t v48 = vshrq_n_u8(v45[-1], 3uLL);
              uint8x16_t v49 = vshrq_n_u8(*v45, 3uLL);
              *(int16x8_t *)(v46 - 32) = vmulq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v48.i8), v8);
              *(int16x8_t *)(v46 - 16) = vmulq_s16((int16x8_t)vmovl_high_u8(v48), v8);
              int8x16_t v4 = (int8x16_t)vmulq_s16((int16x8_t)vmovl_high_u8(v49), v8);
              *(int16x8_t *)uint64_t v46 = vmulq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v49.i8), v8);
              *(int8x16_t *)(v46 + 16) = v4;
              v46 += 64;
              v45 += 2;
              v47 -= 32;
            }
            while (v47);
            if (v22 == v36) {
              goto LABEL_3;
            }
            if ((v22 & 0x18) == 0)
            {
              uint64_t v23 = v36 + v12;
LABEL_28:
              uint64_t v24 = v10 - v23;
              unint64_t v25 = &v6->i16[v23];
              uint64_t v26 = (unsigned __int8 *)(v7 + v23);
              do
              {
                unsigned int v27 = *v26++;
                *v25++ = 1057 * (v27 >> 3);
                --v24;
              }
              while (v24);
              goto LABEL_3;
            }
          }
          else
          {
            unint64_t v36 = 0;
          }
          uint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + v12;
          unint64_t v50 = v36 - (v22 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v51 = v36 + v12;
          int8x16_t v52 = (uint8x8_t *)(v7 + v51);
          int8x16x3_t v53 = (int8x16_t *)((char *)v6 + 2 * v51);
          do
          {
            uint8x8_t v54 = *v52++;
            int8x16_t v4 = (int8x16_t)vmulq_s16((int16x8_t)vmovl_u8(vshr_n_u8(v54, 3uLL)), v8);
            *v53++ = v4;
            v50 += 8;
          }
          while (v50);
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_3;
          }
          goto LABEL_28;
        }
        uint64_t v12 = 0;
        if ((int)v10 > 0) {
          goto LABEL_24;
        }
      }
LABEL_3:
      ++v5;
      v7 += *(void *)(a1 + 16);
      int v6 = (int8x16_t *)((char *)v6 + *(void *)(a1 + 32));
    }
    while (v5 < a2[1]);
  }
  if (v56) {
    sub_1002D6888(v55);
  }
}

void sub_100307D6C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100307DA4(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498698);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    int v6 = (const char *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_100307E6C(*(void *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100307E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100307E6C(uint64_t result, const char *a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(int *)result;
  uint64_t v5 = *(int *)(result + 4);
  int v6 = *(unsigned __int8 *)(result + 28);
  int v7 = *(_DWORD *)(result + 8);
  int v8 = *(_DWORD *)(result + 12);
  int v9 = *(_DWORD *)(result + 16);
  int v10 = *(_DWORD *)(result + 20);
  int v11 = 3 * a4;
  int v12 = *(_DWORD *)(result + 24);
  if (a4 >= 8)
  {
    uint64_t v13 = 0;
    uint64_t v25 = 1;
    if (*(unsigned char *)(result + 28)) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = 2;
    }
    if (*(unsigned char *)(result + 28)) {
      uint64_t v25 = 2;
    }
    do
    {
      if (v4 == 3) {
        *(int8x8x3_t *)v47.val[0].i8 = vld3_s8(a2);
      }
      else {
        int8x8x4_t v47 = vld4_s8(a2);
      }
      int8x16_t v27 = (int8x16_t)vmovl_u8((uint8x8_t)v47.val[2]);
      int8x16_t v28 = (int8x16_t)vmovl_u8((uint8x8_t)v47.val[1]);
      int8x16_t v29 = (int8x16_t)vmovl_u8((uint8x8_t)v47.val[0]);
      int16x4_t v30 = *(int16x4_t *)(result + 32);
      int16x4_t v31 = *(int16x4_t *)(result + 40);
      int32x4_t v32 = vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, v31), *(int16x4_t *)v29.i8, v30);
      int16x4_t v33 = (int16x4_t)vextq_s8(v29, v29, 8uLL).u64[0];
      v29.i64[1] = v28.i64[0];
      *(int8x16_t *)uint32x4_t v45 = v29;
      *(void *)&v45[16] = v27.i64[0];
      v29.i64[0] = *(void *)(result + 48);
      int32x4_t v34 = *(int32x4_t *)(result + 112);
      int32x4_t v35 = vshrq_n_s32(vaddq_s32(vmlal_s16(v32, *(int16x4_t *)v27.i8, *(int16x4_t *)v29.i8), v34), 0xEuLL);
      int32x4_t v36 = vaddq_s32(*(int32x4_t *)(result + 96), v34);
      int32x4_t v37 = *(int32x4_t *)(result + 64);
      int32x4_t v38 = *(int32x4_t *)(result + 80);
      int32x4_t v39 = vshrq_n_s32(vmlaq_s32(v36, vsubq_s32(vmovl_s16(*(int16x4_t *)&v45[8 * (int)(v5 ^ 2)]), v35), v37), 0xEuLL);
      int32x4_t v40 = vshrq_n_s32(vmlaq_s32(v36, vsubq_s32(vmovl_s16(*(int16x4_t *)&v45[8 * v5]), v35), v38), 0xEuLL);
      *(int16x4_t *)uint32x4_t v45 = v33;
      v28.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
      v28.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
      *(int8x16_t *)&v45[8] = v28;
      int32x4_t v41 = vshrq_n_s32(vmlal_s16(vmlal_s16(vmlal_s16(v34, v33, v30), *(int16x4_t *)v28.i8, v31), (int16x4_t)v28.u64[1], *(int16x4_t *)v29.i8), 0xEuLL);
      int32x4_t v42 = vshrq_n_s32(vmlaq_s32(v36, vsubq_s32(vmovl_s16(*(int16x4_t *)&v45[8 * (int)(v5 ^ 2)]), v41), v37), 0xEuLL);
      int32x4_t v43 = vshrq_n_s32(vmlaq_s32(v36, vsubq_s32(vmovl_s16(*(int16x4_t *)&v45[8 * v5]), v41), v38), 0xEuLL);
      *(int8x8_t *)v35.i8 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v35), v41));
      v46[0] = v35.i64[0];
      v46[v26] = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v39), v42));
      v46[v25] = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v40), v43));
      v27.i64[0] = v46[1];
      v28.i64[0] = v46[2];
      int32x4_t v44 = (char *)(a3 + v13);
      vst3_s8(v44, *(int8x8x3_t *)((char *)&v27 - 8));
      v13 += 24;
      a2 += 8 * v4;
    }
    while (v13 <= v11 - 24);
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if ((int)v13 < v11)
  {
    float result = 2105344;
    BOOL v14 = v6 == 0;
    if (v6) {
      int v15 = 1;
    }
    else {
      int v15 = 2;
    }
    uint64_t v16 = v13;
    if (v14) {
      int v17 = 1;
    }
    else {
      int v17 = 2;
    }
    int64_t v18 = (unint64_t)(v17 + v13) << 32;
    do
    {
      int v19 = v8 * *((unsigned __int8 *)a2 + 1) + v7 * *(unsigned __int8 *)a2 + v9 * *((unsigned __int8 *)a2 + 2) + 0x2000;
      int v20 = (a2[v5 ^ 2] - (v19 >> 14)) * v10 + 2105344;
      int v21 = (a2[v5] - (v19 >> 14)) * v12 + 2105344;
      int v22 = (v19 >> 14) & ~(v19 >> 31);
      if (v22 >= 255) {
        LOBYTE(v22) = -1;
      }
      *(unsigned char *)(a3 + v16) = v22;
      int v23 = (v20 >> 14) & ~(v20 >> 31);
      if (v23 >= 255) {
        LOBYTE(v23) = -1;
      }
      *(unsigned char *)(a3 + (v15 + v16)) = v23;
      int v24 = (v21 >> 14) & ~(v21 >> 31);
      if (v24 >= 255) {
        LOBYTE(v24) = -1;
      }
      *(unsigned char *)(a3 + (v18 >> 32)) = v24;
      v16 += 3;
      a2 += v4;
      v18 += 0x300000000;
    }
    while (v16 < v11);
  }
  return result;
}

void sub_1003080E0(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100308118(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004986F8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (__int16 *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    int v6 = (const __int16 *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_1003081E0(*(void *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      int v6 = (const __int16 *)((char *)v6 + *(void *)(a1 + 16));
      uint64_t v5 = (__int16 *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_1003081CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003081E0(uint64_t result, const __int16 *a2, __int16 *a3, int a4)
{
  uint64_t v5 = *(int *)result;
  uint64_t v4 = *(int *)(result + 4);
  int v6 = *(unsigned __int8 *)(result + 28);
  int v7 = *(_DWORD *)(result + 8);
  int v8 = *(_DWORD *)(result + 12);
  int v9 = *(_DWORD *)(result + 16);
  int v10 = *(_DWORD *)(result + 20);
  int v11 = 3 * a4;
  int v12 = *(_DWORD *)(result + 24);
  if (a4 >= 8)
  {
    uint64_t v13 = 0;
    uint64_t v33 = 1;
    if (*(unsigned char *)(result + 28)) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = 2;
    }
    if (*(unsigned char *)(result + 28)) {
      uint64_t v33 = 2;
    }
    int32x4_t v35 = a3;
    do
    {
      if (v5 == 3) {
        *(int16x8x3_t *)v60.val[0].i8 = vld3q_s16(a2);
      }
      else {
        int16x8x4_t v60 = vld4q_s16(a2);
      }
      int32x4_t v49 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.val[0].i8);
      int32x4_t v50 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.val[1].i8);
      int32x4_t v51 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.val[2].i8);
      int32x4_t v36 = *(int32x4_t *)(result + 32);
      int32x4_t v37 = *(int32x4_t *)(result + 48);
      int32x4_t v38 = *(int32x4_t *)(result + 64);
      int32x4_t v39 = *(int32x4_t *)(result + 80);
      int32x4_t v40 = *(int32x4_t *)(result + 128);
      int32x4_t v41 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v36, v49), v37, v50), v38, v51), v40), 0xEuLL);
      int32x4_t v42 = *(int32x4_t *)(result + 96);
      int32x4_t v43 = vaddq_s32(*(int32x4_t *)(result + 112), v40);
      int32x4_t v44 = vshrq_n_s32(vmlaq_s32(v43, vsubq_s32(*(&v49 + (int)(v4 ^ 2)), v41), v39), 0xEuLL);
      int32x4_t v45 = vshrq_n_s32(vmlaq_s32(v43, vsubq_s32(*(&v49 + v4), v41), v42), 0xEuLL);
      int32x4_t v49 = (int32x4_t)vmovl_high_u16((uint16x8_t)v60.val[0]);
      int32x4_t v50 = (int32x4_t)vmovl_high_u16((uint16x8_t)v60.val[1]);
      int32x4_t v51 = (int32x4_t)vmovl_high_u16((uint16x8_t)v60.val[2]);
      int32x4_t v46 = vshrq_n_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v36, v49), v37, v50), v38, v51), v40), 0xEuLL);
      int32x4_t v47 = vshrq_n_s32(vmlaq_s32(v43, vsubq_s32(*(&v49 + (int)(v4 ^ 2)), v46), v39), 0xEuLL);
      int32x4_t v48 = vshrq_n_s32(vmlaq_s32(v43, vsubq_s32(*(&v49 + v4), v46), v42), 0xEuLL);
      v58.val[0] = vqmovun_high_s32(vqmovun_s32(v41), v46);
      int32x4_t v52 = (int32x4_t)v58.val[0];
      *((int16x8_t *)&v52 + v34) = vqmovun_high_s32(vqmovun_s32(v44), v47);
      *((int16x8_t *)&v52 + v33) = vqmovun_high_s32(vqmovun_s32(v45), v48);
      v58.val[1] = (int16x8_t)v53;
      v58.val[2] = v54;
      vst3q_s16(v35, v58);
      v35 += 24;
      v13 += 24;
      a2 += 8 * v5;
    }
    while (v13 <= v11 - 24);
  }
  else
  {
    LODWORD(v13) = 0;
  }
  int v14 = v11 - 12;
  if ((int)v13 <= v11 - 12)
  {
    uint64_t v15 = (int)(v4 ^ 2);
    uint64_t v16 = 1;
    if (v6) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = 2;
    }
    if (v6) {
      uint64_t v16 = 2;
    }
    uint64_t v18 = 8 * v5;
    int v19 = &a3[v13];
    if (v5 == 3)
    {
      do
      {
        int16x4x3_t v55 = vld3_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v18);
        int32x4_t v52 = (int32x4_t)vmovl_u16((uint16x4_t)v55.val[0]);
        int32x4_t v53 = (int32x4_t)vmovl_u16((uint16x4_t)v55.val[1]);
        *(uint32x4_t *)v55.val[0].i8 = vmovl_u16((uint16x4_t)v55.val[2]);
        *(_OWORD *)v55.val[2].i8 = *(_OWORD *)(result + 48);
        *(int32x4_t *)v55.val[1].i8 = vmulq_s32(*(int32x4_t *)(result + 32), v52);
        int16x8_t v54 = *(int16x8_t *)v55.val[0].i8;
        *(int32x4_t *)v55.val[1].i8 = vmlaq_s32(vmlaq_s32(*(int32x4_t *)v55.val[1].i8, *(int32x4_t *)v55.val[2].i8, v53), *(int32x4_t *)(result + 64), *(int32x4_t *)v55.val[0].i8);
        *(_OWORD *)v55.val[0].i8 = *(_OWORD *)(result + 128);
        *(int32x4_t *)v55.val[1].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v55.val[1].i8, *(int32x4_t *)v55.val[0].i8), 0xEuLL);
        *(int32x4_t *)v55.val[0].i8 = vaddq_s32(*(int32x4_t *)(result + 112), *(int32x4_t *)v55.val[0].i8);
        int32x4_t v20 = vshrq_n_s32(vmlaq_s32(*(int32x4_t *)v55.val[0].i8, vsubq_s32(*(&v52 + v15), *(int32x4_t *)v55.val[1].i8), *(int32x4_t *)(result + 80)), 0xEuLL);
        *(int32x4_t *)v55.val[0].i8 = vshrq_n_s32(vmlaq_s32(*(int32x4_t *)v55.val[0].i8, vsubq_s32(*(&v52 + v4), *(int32x4_t *)v55.val[1].i8), *(int32x4_t *)(result + 96)), 0xEuLL);
        v56.val[0] = vqmovun_s32(*(int32x4_t *)v55.val[1].i8);
        v49.i64[0] = (uint64_t)v56.val[0];
        *(int16x4_t *)&v49.i8[8 * v17] = vqmovun_s32(v20);
        *(int16x4_t *)&v49.i8[8 * v16] = vqmovun_s32(*(int32x4_t *)v55.val[0].i8);
        v56.val[1] = (int16x4_t)v49.i64[1];
        v56.val[2] = (int16x4_t)v50.i64[0];
        vst3_s16(v19, v56);
        v19 += 12;
        LODWORD(v13) = v13 + 12;
      }
      while (v14 >= (int)v13);
    }
    else
    {
      do
      {
        int16x4x4_t v59 = vld4_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v18);
        int32x4_t v52 = (int32x4_t)vmovl_u16((uint16x4_t)v59.val[0]);
        int32x4_t v53 = (int32x4_t)vmovl_u16((uint16x4_t)v59.val[1]);
        *(uint32x4_t *)v59.val[0].i8 = vmovl_u16((uint16x4_t)v59.val[2]);
        *(_OWORD *)v59.val[2].i8 = *(_OWORD *)(result + 48);
        *(int32x4_t *)v59.val[1].i8 = vmulq_s32(*(int32x4_t *)(result + 32), v52);
        int16x8_t v54 = *(int16x8_t *)v59.val[0].i8;
        *(int32x4_t *)v59.val[1].i8 = vmlaq_s32(vmlaq_s32(*(int32x4_t *)v59.val[1].i8, *(int32x4_t *)v59.val[2].i8, v53), *(int32x4_t *)(result + 64), *(int32x4_t *)v59.val[0].i8);
        *(_OWORD *)v59.val[0].i8 = *(_OWORD *)(result + 128);
        *(int32x4_t *)v59.val[1].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v59.val[1].i8, *(int32x4_t *)v59.val[0].i8), 0xEuLL);
        *(int32x4_t *)v59.val[0].i8 = vaddq_s32(*(int32x4_t *)(result + 112), *(int32x4_t *)v59.val[0].i8);
        *(int32x4_t *)v59.val[3].i8 = vshrq_n_s32(vmlaq_s32(*(int32x4_t *)v59.val[0].i8, vsubq_s32(*(&v52 + v15), *(int32x4_t *)v59.val[1].i8), *(int32x4_t *)(result + 80)), 0xEuLL);
        *(int32x4_t *)v59.val[0].i8 = vshrq_n_s32(vmlaq_s32(*(int32x4_t *)v59.val[0].i8, vsubq_s32(*(&v52 + v4), *(int32x4_t *)v59.val[1].i8), *(int32x4_t *)(result + 96)), 0xEuLL);
        v57.val[0] = vqmovun_s32(*(int32x4_t *)v59.val[1].i8);
        v49.i64[0] = (uint64_t)v57.val[0];
        *(int16x4_t *)&v49.i8[8 * v17] = vqmovun_s32(*(int32x4_t *)v59.val[3].i8);
        *(int16x4_t *)&v49.i8[8 * v16] = vqmovun_s32(*(int32x4_t *)v59.val[0].i8);
        v57.val[1] = (int16x4_t)v49.i64[1];
        v57.val[2] = (int16x4_t)v50.i64[0];
        vst3_s16(v19, v57);
        v19 += 12;
        LODWORD(v13) = v13 + 12;
      }
      while (v14 >= (int)v13);
    }
  }
  if ((int)v13 < v11)
  {
    float result = 536879104;
    BOOL v21 = v6 == 0;
    if (v6) {
      int v22 = 1;
    }
    else {
      int v22 = 2;
    }
    uint64_t v23 = (int)v13;
    if (v21) {
      int v24 = 1;
    }
    else {
      int v24 = 2;
    }
    int64_t v25 = (unint64_t)(v24 + v13) << 32;
    uint64_t v26 = 2 * v5;
    do
    {
      int v27 = v8 * *((unsigned __int16 *)a2 + 1)
          + v7 * *(unsigned __int16 *)a2
          + v9 * *((unsigned __int16 *)a2 + 2)
          + 0x2000;
      int v28 = ((unsigned __int16)a2[v4 ^ 2] - (v27 >> 14)) * v10 + 536879104;
      int v29 = ((unsigned __int16)a2[v4] - (v27 >> 14)) * v12 + 536879104;
      int v30 = (v27 >> 14) & ~(v27 >> 31);
      if (v30 >= 0xFFFF) {
        LOWORD(v30) = -1;
      }
      a3[v23] = v30;
      int v31 = (v28 >> 14) & ~(v28 >> 31);
      if (v31 >= 0xFFFF) {
        LOWORD(v31) = -1;
      }
      a3[(v22 + v23)] = v31;
      int v32 = (v29 >> 14) & ~(v29 >> 31);
      if (v32 >= 0xFFFF) {
        LOWORD(v32) = -1;
      }
      *(__int16 *)((char *)a3 + (v25 >> 31)) = v32;
      v23 += 3;
      v25 += 0x300000000;
      a2 = (const __int16 *)((char *)a2 + v26);
    }
    while (v23 < v11);
  }
  return result;
}

void sub_1003085A0(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003085D8(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498758);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (float *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_1003086A0(*(float32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      uint64_t v5 = (float *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10030868C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float32_t sub_1003086A0(float32x4_t *a1, uint64_t a2, float *a3, int a4)
{
  uint64_t v5 = a1->i32[0];
  uint64_t v4 = a1->i32[1];
  int v6 = a1->u8[8];
  float32_t result = a1->f32[3];
  float v8 = a1[1].f32[0];
  float v9 = a1[1].f32[1];
  float v10 = a1[1].f32[2];
  float v11 = a1[1].f32[3];
  int v12 = 3 * a4;
  if (v5 == 3)
  {
    if (a4 >= 4)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 1;
      if (a1->i8[8]) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = 2;
      }
      if (a1->i8[8]) {
        uint64_t v14 = 2;
      }
      uint64_t v16 = a3;
      do
      {
        float32x4x3_t v39 = vld3q_f32((const float *)a2);
        a2 += 48;
        v35.val[0] = v39.val[0];
        v35.val[1] = v39.val[1];
        float32x4_t v17 = a1[2];
        float32x4_t v18 = a1[3];
        v35.val[2] = v39.val[2];
        v40.val[0] = vmlaq_f32(vmlaq_f32(vmulq_f32(v39.val[0], v17), v18, v39.val[1]), a1[4], v39.val[2]);
        v39.val[2] = a1[6];
        v39.val[1] = a1[7];
        float32x4_t v19 = vmlaq_f32(v39.val[1], a1[5], vsubq_f32(v35.val[(int)(v4 ^ 2)], v40.val[0]));
        float32x4_t v36 = v40.val[0];
        v39.val[0] = vsubq_f32(v35.val[v4], v40.val[0]);
        *(&v36 + v15) = v19;
        *(&v36 + v14) = vmlaq_f32(v39.val[1], v39.val[2], v39.val[0]);
        v40.val[1] = v37;
        v40.val[2] = v38;
        vst3q_f32(v16, v40);
        v16 += 12;
        v13 += 12;
      }
      while (v13 <= v12 - 12);
      if ((int)v13 >= v12) {
        return result;
      }
LABEL_23:
      BOOL v26 = v6 == 0;
      if (v6) {
        int v27 = 1;
      }
      else {
        int v27 = 2;
      }
      uint64_t v28 = v13;
      if (v26) {
        int v29 = 1;
      }
      else {
        int v29 = 2;
      }
      int64_t v30 = (unint64_t)(v29 + v13) << 32;
      uint64_t v31 = 4 * v5;
      do
      {
        float v32 = (float)((float)(v8 * *(float *)(a2 + 4)) + (float)(*(float *)a2 * result))
            + (float)(*(float *)(a2 + 8) * v9);
        float v33 = *(float *)(a2 + 4 * (v4 ^ 2)) - v32;
        float v34 = *(float *)(a2 + 4 * v4);
        a3[v28] = v32;
        a3[(v27 + v28)] = (float)(v33 * v10) + 0.5;
        *(float *)((char *)a3 + (v30 >> 30)) = (float)((float)(v34 - v32) * v11) + 0.5;
        v28 += 3;
        v30 += 0x300000000;
        a2 += v31;
      }
      while (v28 < v12);
      return result;
    }
LABEL_13:
    LODWORD(v13) = 0;
    if (v12 <= 0) {
      return result;
    }
    goto LABEL_23;
  }
  if (a4 < 4) {
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  uint64_t v20 = 1;
  if (a1->i8[8]) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = 2;
  }
  if (a1->i8[8]) {
    uint64_t v20 = 2;
  }
  int v22 = a3;
  do
  {
    float32x4x4_t v42 = vld4q_f32((const float *)a2);
    a2 += 64;
    float32x4_t v23 = a1[5];
    v41.val[0] = vmlaq_f32(vmlaq_f32(vmulq_f32(v42.val[0], a1[2]), a1[3], v42.val[1]), a1[4], v42.val[2]);
    float32x4x4_t v35 = v42;
    float32x4_t v36 = v41.val[0];
    v42.val[0] = a1[6];
    float32x4_t v24 = a1[7];
    float32x4_t v25 = vsubq_f32(v35.val[v4], v41.val[0]);
    *(&v36 + v21) = vmlaq_f32(v24, v23, vsubq_f32(v35.val[(int)(v4 ^ 2)], v41.val[0]));
    *(&v36 + v20) = vmlaq_f32(v24, v42.val[0], v25);
    v41.val[1] = v37;
    v41.val[2] = v38;
    vst3q_f32(v22, v41);
    v22 += 12;
    v13 += 12;
  }
  while (v13 <= v12 - 12);
  if ((int)v13 < v12) {
    goto LABEL_23;
  }
  return result;
}

void sub_1003088A8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003088E0(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004987B8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_1003089A8(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100308994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x4_t *sub_1003089A8(int32x4_t *result, uint64_t a2, char *a3, int a4)
{
  uint64_t v4 = result->i32[0];
  uint64_t v5 = result->i32[1];
  int v6 = result->u8[8];
  int v7 = result->i32[3];
  int v8 = result[1].i32[0];
  int v9 = 3 * a4;
  int v10 = result[1].i32[1];
  int v11 = result[1].i32[2];
  if (a4 >= 8)
  {
    uint64_t v12 = 0;
    int v13 = v9 - 24;
    uint64_t v14 = 1;
    if (result->i8[8]) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = 2;
    }
    if (result->i8[8]) {
      uint64_t v14 = 2;
    }
    uint64_t v16 = v5 ^ 2;
    uint64_t v17 = 8 * v4;
    do
    {
      while (1)
      {
        float32x4_t v18 = (const char *)(a2 + v12);
        int8x8x3_t v65 = vld3_s8(v18);
        int8x16_t v19 = (int8x16_t)vmovl_u8((uint8x8_t)v65.val[0]);
        uint16x8_t v63 = vmovl_u8((uint8x8_t)v65.val[1]);
        uint16x8_t v64 = vmovl_u8((uint8x8_t)v65.val[2]);
        int8x16_t v20 = *(int8x16_t *)v62[1].val[2 * v15 + 1].i8;
        int8x16_t v21 = *(int8x16_t *)v62[1].val[2 * v14 + 1].i8;
        int16x4_t v22 = *(int16x4_t *)result[7].i8;
        int32x4_t v23 = vsubl_s16(*(int16x4_t *)v21.i8, v22);
        int32x4_t v24 = result[5];
        int32x4_t v26 = result[3];
        int32x4_t v25 = result[4];
        int32x4_t v27 = vmlaq_s32(result[6], v23, v24);
        int32x4_t v28 = vsubl_s16(*(int16x4_t *)v20.i8, v22);
        int32x4_t v29 = result[2];
        int32x4_t v30 = vmlaq_s32(vmlaq_s32(result[6], v28, v26), v25, v23);
        int32x4_t v31 = vmlaq_s32(result[6], v29, v28);
        v28.i64[0] = vextq_s8(v19, v19, 8uLL).u64[0];
        v19.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
        int16x8_t v32 = (int16x8_t)vsubl_s16((int16x4_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), v22);
        int32x4_t v33 = vmlaq_s32(result[6], (int32x4_t)v32, v24);
        int16x8_t v34 = (int16x8_t)vsubl_s16(*(int16x4_t *)v19.i8, v22);
        int32x4_t v35 = vmlaq_s32(vmlaq_s32(result[6], (int32x4_t)v34, v26), v25, (int32x4_t)v32);
        int32x4_t v36 = vmlaq_s32(result[6], v29, (int32x4_t)v34);
        *(int16x4_t *)v34.i8 = vshrn_n_s32(v27, 0xEuLL);
        v34.i64[0] = vaddw_u8((uint16x8_t)v34, (uint8x8_t)v65.val[0]).u64[0];
        v34.u64[1] = (unint64_t)vadd_s16(*(int16x4_t *)v28.i8, vshrn_n_s32(v33, 0xEuLL));
        int8x8_t v37 = vqmovun_s16(v34);
        *(int16x4_t *)v32.i8 = vshrn_n_s32(v30, 0xEuLL);
        v32.i64[0] = vaddw_u8((uint16x8_t)v32, (uint8x8_t)v65.val[0]).u64[0];
        v32.u64[1] = (unint64_t)vadd_s16(*(int16x4_t *)v28.i8, vshrn_n_s32(v35, 0xEuLL));
        int8x8_t v38 = vqmovun_s16(v32);
        *(int16x4_t *)v33.i8 = vshrn_n_s32(v31, 0xEuLL);
        v65.val[0] = (int8x8_t)vaddw_u8((uint16x8_t)v33, (uint8x8_t)v65.val[0]).u64[0];
        int16x4_t v39 = vadd_s16(*(int16x4_t *)v28.i8, vshrn_n_s32(v36, 0xEuLL));
        int8x8_t v40 = vqmovun_s16(*(int16x8_t *)v65.val[0].i8);
        if (v4 == 3) {
          break;
        }
        v62[0].val[v5] = v37;
        v62[0].val[1] = v38;
        v62[0].val[v16] = v40;
        v67.val[3] = (int8x8_t)result[7].i64[1];
        v67.val[0] = v62[0].val[0];
        v67.val[1] = v62[0].val[1];
        v67.val[2] = v62[0].val[2];
        vst4_s8(a3, v67);
        v12 += 24;
        a3 += v17;
        if (v12 > v13) {
          goto LABEL_12;
        }
      }
      v62[0].val[v5] = v37;
      v62[0].val[1] = v38;
      v62[0].val[v16] = v40;
      int8x8x3_t v66 = v62[0];
      vst3_s8(a3, v66);
      v12 += 24;
      a3 += v17;
    }
    while (v12 <= v13);
  }
  else
  {
    LODWORD(v12) = 0;
  }
LABEL_12:
  if ((int)v12 < v9)
  {
    BOOL v41 = v6 == 0;
    if (v6) {
      int v42 = 1;
    }
    else {
      int v42 = 2;
    }
    if (v41) {
      int v43 = 1;
    }
    else {
      int v43 = 2;
    }
    float32_t result = (int32x4_t *)(v5 ^ 2);
    uint64_t v12 = v12;
    if (v4 == 4)
    {
      do
      {
        int v44 = *(unsigned __int8 *)(a2 + v12);
        int v45 = *(unsigned __int8 *)(a2 + v43 + (int)v12) - 128;
        int v46 = v44 + ((v45 * v11 + 0x2000) >> 14);
        int v47 = *(unsigned __int8 *)(a2 + (v42 + v12)) - 128;
        int v48 = v44 + ((v45 * v10 + v47 * v8 + 0x2000) >> 14);
        int v49 = v44 + ((v47 * v7 + 0x2000) >> 14);
        int v50 = v46 & ~(v46 >> 31);
        if (v50 >= 255) {
          LOBYTE(v50) = -1;
        }
        a3[v5] = v50;
        int v51 = v48 & ~(v48 >> 31);
        if (v51 >= 255) {
          LOBYTE(v51) = -1;
        }
        a3[1] = v51;
        int v52 = v49 & ~(v49 >> 31);
        if (v52 >= 255) {
          LOBYTE(v52) = -1;
        }
        result->i8[(void)a3] = v52;
        a3[3] = -1;
        v12 += 3;
        a3 += v4;
      }
      while (v12 < v9);
    }
    else
    {
      do
      {
        int v53 = *(unsigned __int8 *)(a2 + v12);
        int v54 = *(unsigned __int8 *)(a2 + v43 + (int)v12) - 128;
        int v55 = v53 + ((v54 * v11 + 0x2000) >> 14);
        int v56 = *(unsigned __int8 *)(a2 + (v42 + v12)) - 128;
        int v57 = v53 + ((v54 * v10 + v56 * v8 + 0x2000) >> 14);
        int v58 = v53 + ((v56 * v7 + 0x2000) >> 14);
        int v59 = v55 & ~(v55 >> 31);
        if (v59 >= 255) {
          LOBYTE(v59) = -1;
        }
        a3[v5] = v59;
        int v60 = v57 & ~(v57 >> 31);
        if (v60 >= 255) {
          LOBYTE(v60) = -1;
        }
        a3[1] = v60;
        int v61 = v58 & ~(v58 >> 31);
        if (v61 >= 255) {
          LOBYTE(v61) = -1;
        }
        result->i8[(void)a3] = v61;
        v12 += 3;
        a3 += v4;
      }
      while (v12 < v9);
    }
  }
  return result;
}

void sub_100308C6C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100308CA4(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498818);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (__int16 *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    int v6 = (const __int16 *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_100308D6C(*(void *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      int v6 = (const __int16 *)((char *)v6 + *(void *)(a1 + 16));
      uint64_t v5 = (__int16 *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100308D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100308D6C(uint64_t result, const __int16 *a2, __int16 *a3, int a4)
{
  uint64_t v4 = *(int *)result;
  uint64_t v5 = *(int *)(result + 4);
  int v6 = *(unsigned __int8 *)(result + 8);
  int v7 = *(_DWORD *)(result + 12);
  int v8 = *(_DWORD *)(result + 16);
  int v9 = 3 * a4;
  int v10 = *(_DWORD *)(result + 20);
  int v11 = *(_DWORD *)(result + 24);
  if (a4 >= 8)
  {
    uint64_t v12 = 0;
    int v13 = v9 - 24;
    uint64_t v14 = 1;
    if (*(unsigned char *)(result + 8)) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = 2;
    }
    if (*(unsigned char *)(result + 8)) {
      uint64_t v14 = 2;
    }
    uint64_t v16 = (int)(v5 ^ 2);
    uint64_t v17 = 16 * v4;
    float32x4_t v18 = a2;
    do
    {
      while (1)
      {
        int16x8x3_t v73 = vld3q_s16(v18);
        int16x8_t v67 = v73.val[1];
        int16x8_t v68 = v73.val[2];
        uint16x8_t v19 = *(uint16x8_t *)&v65[16 * v15 + 64];
        int32x4_t v20 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.val[0].i8);
        uint16x8_t v21 = *(uint16x8_t *)&v65[16 * v14 + 64];
        int32x4_t v22 = *(int32x4_t *)(result + 112);
        int32x4_t v23 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v21.i8), v22);
        int32x4_t v25 = *(int32x4_t *)(result + 64);
        int32x4_t v24 = *(int32x4_t *)(result + 80);
        int32x4_t v26 = vsraq_n_s32(v20, vmlaq_s32(*(int32x4_t *)(result + 96), v23, v24), 0xEuLL);
        int32x4_t v27 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8), v22);
        int32x4_t v29 = *(int32x4_t *)(result + 32);
        int32x4_t v28 = *(int32x4_t *)(result + 48);
        int32x4_t v30 = vsraq_n_s32(v20, vmlaq_s32(vmlaq_s32(*(int32x4_t *)(result + 96), v28, v27), v25, v23), 0xEuLL);
        int32x4_t v31 = vsraq_n_s32(v20, vmlaq_s32(*(int32x4_t *)(result + 96), v29, v27), 0xEuLL);
        int32x4_t v32 = vsubq_s32((int32x4_t)vmovl_high_u16(v21), v22);
        int32x4_t v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlaq_s32(*(int32x4_t *)(result + 96), v32, v24), 0xEuLL), (uint16x8_t)v73.val[0]);
        int32x4_t v34 = vsubq_s32((int32x4_t)vmovl_high_u16(v19), v22);
        int32x4_t v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlaq_s32(vmlaq_s32(*(int32x4_t *)(result + 96), v28, v34), v25, v32), 0xEuLL), (uint16x8_t)v73.val[0]);
        int32x4_t v36 = (int32x4_t)vaddw_high_u16((uint32x4_t)vshrq_n_s32(vmlaq_s32(*(int32x4_t *)(result + 96), v29, v34), 0xEuLL), (uint16x8_t)v73.val[0]);
        int16x8_t v37 = vqmovun_high_s32(vqmovun_s32(v26), v33);
        int16x8_t v38 = vqmovun_high_s32(vqmovun_s32(v30), v35);
        int16x8_t v39 = vqmovun_high_s32(vqmovun_s32(v31), v36);
        if (v4 == 3) {
          break;
        }
        *(int16x8_t *)&v65[16 * v5] = v37;
        *(int16x8_t *)&v65[16] = v38;
        *(int16x8_t *)&v65[16 * v16] = v39;
        v75.val[3] = *(int16x8_t *)(result + 128);
        v75.val[0] = *(int16x8_t *)v65;
        v75.val[1] = *(int16x8_t *)&v65[16];
        v75.val[2] = *(int16x8_t *)&v65[32];
        vst4q_s16(a3, v75);
        v12 += 24;
        v18 += 24;
        a3 = (__int16 *)((char *)a3 + v17);
        if (v12 > v13) {
          goto LABEL_12;
        }
      }
      *(int16x8_t *)&v65[16 * v5] = v37;
      *(int16x8_t *)&v65[16] = v38;
      *(int16x8_t *)&v65[16 * v16] = v39;
      int16x8x3_t v74 = *(int16x8x3_t *)v65;
      vst3q_s16(a3, v74);
      v12 += 24;
      v18 += 24;
      a3 = (__int16 *)((char *)a3 + v17);
    }
    while (v12 <= v13);
  }
  else
  {
    LODWORD(v12) = 0;
  }
LABEL_12:
  int v40 = v9 - 12;
  if ((int)v12 <= v9 - 12)
  {
    uint64_t v41 = 1;
    if (v6) {
      uint64_t v42 = 1;
    }
    else {
      uint64_t v42 = 2;
    }
    if (v6) {
      uint64_t v41 = 2;
    }
    uint64_t v43 = v5 ^ 2;
    uint64_t v44 = 8 * v4;
    int v45 = &a2[v12];
    if (v4 == 3)
    {
      do
      {
        int16x4x3_t v69 = vld3_s16(v45);
        v45 += 12;
        int16x4_t v66 = v69.val[1];
        v67.i64[0] = (uint64_t)v69.val[2];
        *(uint32x4_t *)v69.val[0].i8 = vmovl_u16((uint16x4_t)v69.val[0]);
        int32x4_t v46 = *(int32x4_t *)(result + 112);
        *(int32x4_t *)v69.val[2].i8 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)&v65[8 * v41 + 64]), v46);
        *(int32x4_t *)v69.val[1].i8 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)&v65[8 * v42 + 64]), v46);
        int32x4_t v47 = vsraq_n_s32(*(int32x4_t *)v69.val[0].i8, vmlaq_s32(*(int32x4_t *)(result + 96), *(int32x4_t *)v69.val[2].i8, *(int32x4_t *)(result + 80)), 0xEuLL);
        *(int32x4_t *)v69.val[2].i8 = vsraq_n_s32(*(int32x4_t *)v69.val[0].i8, vmlaq_s32(vmlaq_s32(*(int32x4_t *)(result + 96), *(int32x4_t *)(result + 48), *(int32x4_t *)v69.val[1].i8), *(int32x4_t *)(result + 64), *(int32x4_t *)v69.val[2].i8), 0xEuLL);
        *(int32x4_t *)v69.val[0].i8 = vsraq_n_s32(*(int32x4_t *)v69.val[0].i8, vmlaq_s32(*(int32x4_t *)(result + 96), *(int32x4_t *)(result + 32), *(int32x4_t *)v69.val[1].i8), 0xEuLL);
        *(int16x4_t *)&v65[8 * v5] = vqmovun_s32(v47);
        *(int16x4_t *)&v65[8] = vqmovun_s32(*(int32x4_t *)v69.val[2].i8);
        *(int16x4_t *)&v65[8 * v43] = vqmovun_s32(*(int32x4_t *)v69.val[0].i8);
        int16x4x3_t v70 = *(int16x4x3_t *)v65;
        vst3_s16(a3, v70);
        a3 = (__int16 *)((char *)a3 + v44);
        LODWORD(v12) = v12 + 12;
      }
      while (v40 >= (int)v12);
    }
    else
    {
      do
      {
        int16x4x3_t v71 = vld3_s16(v45);
        v45 += 12;
        int16x4_t v66 = v71.val[1];
        v67.i64[0] = (uint64_t)v71.val[2];
        *(uint32x4_t *)v71.val[0].i8 = vmovl_u16((uint16x4_t)v71.val[0]);
        int32x4_t v49 = *(int32x4_t *)(result + 96);
        int32x4_t v48 = *(int32x4_t *)(result + 112);
        *(int32x4_t *)v71.val[2].i8 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)&v65[8 * v41 + 64]), v48);
        *(int32x4_t *)v71.val[1].i8 = vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)&v65[8 * v42 + 64]), v48);
        int32x4_t v50 = vmlaq_s32(vmlaq_s32(v49, *(int32x4_t *)(result + 48), *(int32x4_t *)v71.val[1].i8), *(int32x4_t *)(result + 64), *(int32x4_t *)v71.val[2].i8);
        *(int32x4_t *)v71.val[2].i8 = vsraq_n_s32(*(int32x4_t *)v71.val[0].i8, vmlaq_s32(v49, *(int32x4_t *)v71.val[2].i8, *(int32x4_t *)(result + 80)), 0xEuLL);
        int32x4_t v51 = vsraq_n_s32(*(int32x4_t *)v71.val[0].i8, v50, 0xEuLL);
        *(int32x4_t *)v71.val[0].i8 = vsraq_n_s32(*(int32x4_t *)v71.val[0].i8, vmlaq_s32(v49, *(int32x4_t *)(result + 32), *(int32x4_t *)v71.val[1].i8), 0xEuLL);
        *(int16x4_t *)&v65[8 * v5] = vqmovun_s32(*(int32x4_t *)v71.val[2].i8);
        *(int16x4_t *)&v65[8] = vqmovun_s32(v51);
        *(int16x4_t *)&v65[8 * v43] = vqmovun_s32(*(int32x4_t *)v71.val[0].i8);
        v51.i64[0] = *(void *)(result + 144);
        int16x4x3_t v72 = *(int16x4x3_t *)v65;
        vst4_s16(a3, *(int16x4x4_t *)((char *)&v51 - 24));
        a3 = (__int16 *)((char *)a3 + v44);
        LODWORD(v12) = v12 + 12;
      }
      while (v40 >= (int)v12);
    }
  }
  if ((int)v12 < v9)
  {
    BOOL v52 = v6 == 0;
    if (v6) {
      int v53 = 1;
    }
    else {
      int v53 = 2;
    }
    float32_t result = (int)v12;
    if (v52) {
      int v54 = 1;
    }
    else {
      int v54 = 2;
    }
    int64_t v55 = (unint64_t)(v54 + v12) << 32;
    do
    {
      int v56 = (unsigned __int16)a2[result];
      int v57 = *(unsigned __int16 *)((char *)a2 + (v55 >> 31)) - 0x8000;
      int v58 = v56 + ((v57 * v11 + 0x2000) >> 14);
      int v59 = (unsigned __int16)a2[(v53 + result)] - 0x8000;
      int v60 = v56 + ((v57 * v10 + v59 * v8 + 0x2000) >> 14);
      int v61 = v56 + ((v59 * v7 + 0x2000) >> 14);
      int v62 = v58 & ~(v58 >> 31);
      if (v62 >= 0xFFFF) {
        LOWORD(v62) = -1;
      }
      a3[v5] = v62;
      int v63 = v60 & ~(v60 >> 31);
      if (v63 >= 0xFFFF) {
        LOWORD(v63) = -1;
      }
      a3[1] = v63;
      int v64 = v61 & ~(v61 >> 31);
      if (v64 >= 0xFFFF) {
        LOWORD(v64) = -1;
      }
      a3[(int)(v5 ^ 2)] = v64;
      if (v4 == 4) {
        a3[3] = -1;
      }
      result += 3;
      v55 += 0x300000000;
      a3 += v4;
    }
    while (result < v9);
  }
  return result;
}

void sub_10030913C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100309174(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498878);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    int v6 = (const float *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_10030923C(*(float32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      int v6 = (const float *)((char *)v6 + *(void *)(a1 + 16));
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100309228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float32x4_t *sub_10030923C(float32x4_t *result, const float *a2, uint64_t a3, int a4)
{
  uint64_t v5 = result->i32[0];
  uint64_t v4 = result->i32[1];
  int v6 = result->u8[8];
  float v7 = result->f32[3];
  float v8 = result[1].f32[0];
  float v9 = result[1].f32[1];
  float v10 = result[1].f32[2];
  int v11 = 3 * a4;
  if (v5 != 3)
  {
    if (a4 >= 4)
    {
      uint64_t v12 = 0;
      uint64_t v25 = 1;
      if (result->i8[8]) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = 2;
      }
      if (result->i8[8]) {
        uint64_t v25 = 2;
      }
      int32x4_t v27 = a2;
      do
      {
        float32x4x3_t v47 = vld3q_f32(v27);
        v27 += 12;
        v44.val[1] = v47.val[1];
        v44.val[2] = v47.val[2];
        v48.val[3] = result[6];
        float32x4_t v28 = result[7];
        float32x4_t v29 = vsubq_f32(v44.val[v25], v28);
        float32x4_t v30 = vsubq_f32(v44.val[v26], v28);
        float32x4_t v31 = vmlaq_f32(v47.val[0], result[5], v29);
        float32x4_t v32 = vaddq_f32(v47.val[0], vmlaq_f32(vmulq_f32(v29, result[4]), result[3], v30));
        v47.val[0] = vmlaq_f32(v47.val[0], result[2], v30);
        *(&v41 + v4) = v31;
        float32x4_t v42 = v32;
        *(&v41 + (int)(v4 ^ 2)) = v47.val[0];
        v48.val[0] = v41;
        v48.val[1] = v42;
        v48.val[2] = v43;
        vst4q_f32((float *)a3, v48);
        a3 += 64;
        v12 += 12;
      }
      while (v12 <= v11 - 12);
      if ((int)v12 >= v11) {
        return result;
      }
    }
    else
    {
      LODWORD(v12) = 0;
      if (v11 <= 0) {
        return result;
      }
    }
    goto LABEL_31;
  }
  if (a4 < 4)
  {
    if (a4 < 1) {
      return result;
    }
    LODWORD(v12) = 0;
    if (result->i8[8]) {
      int v13 = 1;
    }
    else {
      int v13 = 2;
    }
    if (result->i8[8]) {
      int v14 = 2;
    }
    else {
      int v14 = 1;
    }
    uint64_t v15 = (int)(v4 ^ 2);
    uint64_t v5 = 3;
    goto LABEL_41;
  }
  uint64_t v12 = 0;
  uint64_t v16 = 1;
  if (result->i8[8]) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = 2;
  }
  if (result->i8[8]) {
    uint64_t v16 = 2;
  }
  float32x4_t v18 = a2;
  do
  {
    float32x4x3_t v45 = vld3q_f32(v18);
    v18 += 12;
    float32x4_t v42 = v45.val[1];
    float32x4_t v43 = v45.val[2];
    float32x4_t v19 = result[7];
    float32x4_t v20 = vsubq_f32(*(&v41 + v16), v19);
    float32x4_t v21 = vmlaq_f32(v45.val[0], result[5], v20);
    float32x4_t v22 = vmulq_f32(v20, result[4]);
    float32x4_t v23 = vsubq_f32(*(&v41 + v17), v19);
    v44.val[v4] = v21;
    float32x4_t v24 = vaddq_f32(v45.val[0], vmlaq_f32(v22, result[3], v23));
    v45.val[0] = vmlaq_f32(v45.val[0], result[2], v23);
    v44.val[1] = v24;
    v44.val[(int)(v4 ^ 2)] = v45.val[0];
    float32x4x3_t v46 = v44;
    vst3q_f32((float *)a3, v46);
    a3 += 48;
    v12 += 12;
  }
  while (v12 <= v11 - 12);
  if ((int)v12 < v11)
  {
LABEL_31:
    if (v6) {
      int v13 = 1;
    }
    else {
      int v13 = 2;
    }
    if (v6) {
      int v14 = 2;
    }
    else {
      int v14 = 1;
    }
    uint64_t v15 = (int)(v4 ^ 2);
    if (v5 != 4)
    {
LABEL_41:
      uint64_t v12 = v12;
      uint64_t v37 = 4 * v5;
      do
      {
        float v38 = a2[v12];
        float v39 = a2[v14 + (int)v12] + -0.5;
        float v40 = a2[(v13 + v12)] + -0.5;
        *(float *)(a3 + 4 * v4) = v38 + (float)(v39 * v10);
        *(float *)(a3 + 4) = (float)(v38 + (float)(v39 * v9)) + (float)(v40 * v8);
        *(float *)(a3 + 4 * v15) = v38 + (float)(v40 * v7);
        v12 += 3;
        a3 += v37;
      }
      while (v12 < v11);
      return result;
    }
    uint64_t v33 = 4 * v5;
    uint64_t v12 = v12;
    do
    {
      float v34 = a2[v12];
      float v35 = a2[v14 + (int)v12] + -0.5;
      float v36 = a2[(v13 + v12)] + -0.5;
      *(float *)(a3 + 4 * v4) = v34 + (float)(v35 * v10);
      *(float *)(a3 + 4) = (float)(v34 + (float)(v35 * v9)) + (float)(v36 * v8);
      *(float *)(a3 + 4 * v15) = v34 + (float)(v36 * v7);
      *(_DWORD *)(a3 + 12) = 1065353216;
      v12 += 3;
      a3 += v33;
    }
    while (v12 < v11);
  }
  return result;
}

void sub_1003094CC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100309504(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004988D8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    int v6 = (const char *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_1003095CC(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_1003095B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x4_t *sub_1003095CC(int32x4_t *result, const char *a2, uint64_t a3, int a4)
{
  int v4 = result->i32[1];
  uint64_t v5 = result->i32[0];
  int v6 = result->i32[2];
  int v7 = result->i32[3];
  int v8 = result[1].i32[0];
  int v9 = result[1].i32[1];
  int v10 = result[1].i32[2];
  int v11 = result[1].i32[3];
  int v12 = 3 * a4;
  int v13 = result[2].i32[0];
  int v14 = result[2].i32[1];
  if (a4 >= 8)
  {
    uint64_t v15 = 0;
    do
    {
      if (v5 == 3) {
        *(int8x8x3_t *)v45.val[0].i8 = vld3_s8(a2);
      }
      else {
        int8x8x4_t v45 = vld4_s8(a2);
      }
      int8x16_t v27 = (int8x16_t)vmovl_u8((uint8x8_t)v45.val[2]);
      int8x16_t v28 = (int8x16_t)vmovl_u8((uint8x8_t)v45.val[1]);
      int8x16_t v29 = (int8x16_t)vmovl_u8((uint8x8_t)v45.val[0]);
      uint16x4_t v30 = (uint16x4_t)result[2].u64[1];
      uint16x4_t v31 = *(uint16x4_t *)result[3].i8;
      uint16x4_t v32 = (uint16x4_t)result[3].u64[1];
      uint16x4_t v33 = *(uint16x4_t *)result[4].i8;
      uint16x4_t v34 = (uint16x4_t)result[4].u64[1];
      uint16x4_t v35 = *(uint16x4_t *)result[5].i8;
      uint16x4_t v36 = (uint16x4_t)result[5].u64[1];
      uint16x4_t v37 = *(uint16x4_t *)result[6].i8;
      uint16x4_t v38 = (uint16x4_t)result[6].u64[1];
      int32x4_t v39 = result[7];
      int32x4_t v40 = vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v28.i8, v31), *(uint16x4_t *)v29.i8, v30), *(uint16x4_t *)v27.i8, v32), v39);
      int32x4_t v41 = vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v28.i8, v34), *(uint16x4_t *)v29.i8, v33), *(uint16x4_t *)v27.i8, v35), v39);
      int32x4_t v42 = vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v28.i8, v37), *(uint16x4_t *)v29.i8, v36), *(uint16x4_t *)v27.i8, v38), v39);
      v29.i64[0] = vextq_s8(v29, v29, 8uLL).u64[0];
      v28.i64[0] = vextq_s8(v28, v28, 8uLL).u64[0];
      v27.i64[0] = vextq_s8(v27, v27, 8uLL).u64[0];
      uint8x8_t v43 = vqmovn_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32(v40, 0xCuLL), (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v39, *(uint16x4_t *)v29.i8, v30), *(uint16x4_t *)v28.i8, v31), *(uint16x4_t *)v27.i8, v32), 0xCuLL));
      *(uint8x8_t *)v40.i8 = vqmovn_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32(v41, 0xCuLL), (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v39, *(uint16x4_t *)v29.i8, v33), *(uint16x4_t *)v28.i8, v34), *(uint16x4_t *)v27.i8, v35), 0xCuLL));
      *(uint8x8_t *)v27.i8 = vqmovn_u16((uint16x8_t)vshrn_high_n_s32(vshrn_n_s32(v42, 0xCuLL), (int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v39, *(uint16x4_t *)v29.i8, v36), *(uint16x4_t *)v28.i8, v37), *(uint16x4_t *)v27.i8, v38), 0xCuLL));
      float32x4x3_t v44 = (char *)(a3 + v15);
      vst3_s8(v44, *(int8x8x3_t *)(&v27 - 1));
      v15 += 24;
      a2 += 8 * v5;
    }
    while (v15 <= v12 - 24);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  if ((int)v15 < v12)
  {
    float32_t result = (int32x4_t *)v12;
    uint64_t v16 = (unsigned __int8 *)(a2 + 1);
    uint64_t v15 = v15;
    do
    {
      int v17 = *(v16 - 1);
      int v18 = *v16;
      int v19 = v16[1];
      int v20 = v6 * v18 + v4 * v17 + v7 * v19 + 2048;
      int v21 = v9 * v18 + v8 * v17 + v10 * v19 + 2048;
      int v22 = v13 * v18 + v11 * v17 + v14 * v19 + 2048;
      int v23 = (v20 >> 12) & ~(v20 >> 31);
      if (v23 >= 255) {
        LOBYTE(v23) = -1;
      }
      uint64_t v24 = a3 + v15;
      *(unsigned char *)(a3 + v15) = v23;
      int v25 = (v21 >> 12) & ~(v21 >> 31);
      if (v25 >= 255) {
        LOBYTE(v25) = -1;
      }
      *(unsigned char *)(v24 + 1) = v25;
      int v26 = (v22 >> 12) & ~(v22 >> 31);
      if (v26 >= 255) {
        LOBYTE(v26) = -1;
      }
      *(unsigned char *)(v24 + 2) = v26;
      v15 += 3;
      v16 += v5;
    }
    while (v15 < v12);
  }
  return result;
}

void sub_1003097A0(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003097D8(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498938);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (__int16 *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    int v6 = (const __int16 *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_1003098A0(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      int v6 = (const __int16 *)((char *)v6 + *(void *)(a1 + 16));
      uint64_t v5 = (__int16 *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10030988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x4_t *sub_1003098A0(int32x4_t *result, const __int16 *a2, __int16 *a3, int a4)
{
  int v4 = result->i32[1];
  uint64_t v5 = result->i32[0];
  int v6 = result->i32[2];
  int v7 = result->i32[3];
  int v8 = result[1].i32[0];
  int v9 = result[1].i32[1];
  int v10 = result[1].i32[2];
  int v11 = result[1].i32[3];
  int v12 = 3 * a4;
  int v13 = result[2].i32[0];
  int v14 = result[2].i32[1];
  if (a4 >= 8)
  {
    uint64_t v15 = 0;
    uint16x4_t v35 = a3;
    do
    {
      if (v5 == 3) {
        *(int16x8x3_t *)v56.val[0].i8 = vld3q_s16(a2);
      }
      else {
        int16x8x4_t v56 = vld4q_s16(a2);
      }
      uint16x4_t v36 = (uint16x4_t)result[2].u64[1];
      uint16x4_t v37 = *(uint16x4_t *)result[3].i8;
      uint16x4_t v38 = (uint16x4_t)result[3].u64[1];
      uint16x4_t v39 = *(uint16x4_t *)result[4].i8;
      uint16x4_t v40 = (uint16x4_t)result[4].u64[1];
      uint16x4_t v41 = *(uint16x4_t *)result[5].i8;
      uint16x4_t v42 = (uint16x4_t)result[5].u64[1];
      uint16x4_t v43 = *(uint16x4_t *)result[6].i8;
      uint16x4_t v44 = (uint16x4_t)result[6].u64[1];
      int32x4_t v45 = result[7];
      uint32x4_t v46 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v56.val[1].i8, v37), *(uint16x4_t *)v56.val[0].i8, v36), *(uint16x4_t *)v56.val[2].i8, v38), v45), 0xCuLL);
      uint32x4_t v47 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v56.val[1].i8, v40), *(uint16x4_t *)v56.val[0].i8, v39), *(uint16x4_t *)v56.val[2].i8, v41), v45), 0xCuLL);
      uint32x4_t v48 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v56.val[1].i8, v43), *(uint16x4_t *)v56.val[0].i8, v42), *(uint16x4_t *)v56.val[2].i8, v44), v45), 0xCuLL);
      uint16x4_t v49 = (uint16x4_t)vextq_s8((int8x16_t)v56.val[0], (int8x16_t)v56.val[0], 8uLL).u64[0];
      uint16x4_t v50 = (uint16x4_t)vextq_s8((int8x16_t)v56.val[1], (int8x16_t)v56.val[1], 8uLL).u64[0];
      uint16x4_t v51 = (uint16x4_t)vextq_s8((int8x16_t)v56.val[2], (int8x16_t)v56.val[2], 8uLL).u64[0];
      v54.val[0] = (int16x8_t)vqmovn_high_u32(vqmovn_u32(v46), vshrq_n_u32(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v45, v49, v36), v50, v37), v51, v38), 0xCuLL));
      v54.val[1] = (int16x8_t)vqmovn_high_u32(vqmovn_u32(v47), vshrq_n_u32(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v45, v49, v39), v50, v40), v51, v41), 0xCuLL));
      v54.val[2] = (int16x8_t)vqmovn_high_u32(vqmovn_u32(v48), vshrq_n_u32(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)v45, v49, v42), v50, v43), v51, v44), 0xCuLL));
      vst3q_s16(v35, v54);
      v35 += 24;
      v15 += 24;
      a2 += 8 * v5;
    }
    while (v15 <= v12 - 24);
  }
  else
  {
    LODWORD(v15) = 0;
  }
  int v16 = v12 - 12;
  if ((int)v15 <= v12 - 12)
  {
    uint64_t v17 = 8 * v5;
    int v18 = &a3[v15];
    if (v5 == 3)
    {
      do
      {
        int16x4x3_t v52 = vld3_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v17);
        int32x4_t v19 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v52.val[1], *(uint16x4_t *)result[3].i8), (uint16x4_t)v52.val[0], (uint16x4_t)result[2].u64[1]), (uint16x4_t)v52.val[2], (uint16x4_t)result[3].u64[1]);
        int32x4_t v20 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v52.val[1], (uint16x4_t)result[4].u64[1]), (uint16x4_t)v52.val[0], *(uint16x4_t *)result[4].i8), (uint16x4_t)v52.val[2], *(uint16x4_t *)result[5].i8);
        int32x4_t v21 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v52.val[1], *(uint16x4_t *)result[6].i8), (uint16x4_t)v52.val[0], (uint16x4_t)result[5].u64[1]), (uint16x4_t)v52.val[2], (uint16x4_t)result[6].u64[1]);
        *(int32x4_t *)v52.val[0].i8 = result[7];
        v53.val[0] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v19, *(int32x4_t *)v52.val[0].i8), 0xCuLL));
        v53.val[1] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v20, *(int32x4_t *)v52.val[0].i8), 0xCuLL));
        v53.val[2] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v21, *(int32x4_t *)v52.val[0].i8), 0xCuLL));
        vst3_s16(v18, v53);
        v18 += 12;
        LODWORD(v15) = v15 + 12;
      }
      while (v16 >= (int)v15);
    }
    else
    {
      do
      {
        int16x4x4_t v55 = vld4_s16(a2);
        a2 = (const __int16 *)((char *)a2 + v17);
        int32x4_t v22 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v55.val[1], *(uint16x4_t *)result[3].i8), (uint16x4_t)v55.val[0], (uint16x4_t)result[2].u64[1]), (uint16x4_t)v55.val[2], (uint16x4_t)result[3].u64[1]);
        int32x4_t v23 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v55.val[1], (uint16x4_t)result[4].u64[1]), (uint16x4_t)v55.val[0], *(uint16x4_t *)result[4].i8), (uint16x4_t)v55.val[2], *(uint16x4_t *)result[5].i8);
        int32x4_t v24 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)v55.val[1], *(uint16x4_t *)result[6].i8), (uint16x4_t)v55.val[0], (uint16x4_t)result[5].u64[1]), (uint16x4_t)v55.val[2], (uint16x4_t)result[6].u64[1]);
        *(int32x4_t *)v55.val[0].i8 = result[7];
        v55.val[1] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v22, *(int32x4_t *)v55.val[0].i8), 0xCuLL));
        v55.val[2] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v23, *(int32x4_t *)v55.val[0].i8), 0xCuLL));
        v55.val[3] = (int16x4_t)vqmovn_u32(vshrq_n_u32((uint32x4_t)vaddq_s32(v24, *(int32x4_t *)v55.val[0].i8), 0xCuLL));
        vst3_s16(v18, *(int16x4x3_t *)v55.val[1].i8);
        v18 += 12;
        LODWORD(v15) = v15 + 12;
      }
      while (v16 >= (int)v15);
    }
  }
  if ((int)v15 < v12)
  {
    float32_t result = (int32x4_t *)(a2 + 1);
    int v25 = &a3[v15 + 1];
    do
    {
      int v26 = result[-1].u16[7];
      int v27 = result->u16[0];
      int v28 = result->u16[1];
      int v29 = v6 * v27 + v4 * v26 + v7 * v28 + 2048;
      int v30 = v9 * v27 + v8 * v26 + v10 * v28 + 2048;
      int v31 = v13 * v27 + v11 * v26 + v14 * v28 + 2048;
      int v32 = (v29 >> 12) & ~(v29 >> 31);
      if (v32 >= 0xFFFF) {
        LOWORD(v32) = -1;
      }
      *(v25 - 1) = v32;
      int v33 = (v30 >> 12) & ~(v30 >> 31);
      if (v33 >= 0xFFFF) {
        LOWORD(v33) = -1;
      }
      __int16 *v25 = v33;
      int v34 = (v31 >> 12) & ~(v31 >> 31);
      if (v34 >= 0xFFFF) {
        LOWORD(v34) = -1;
      }
      v25[1] = v34;
      float32_t result = (int32x4_t *)((char *)result + 2 * v5);
      LODWORD(v15) = v15 + 3;
      v25 += 3;
    }
    while (v12 > (int)v15);
  }
  return result;
}

void sub_100309B88(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100309BC0(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v33, &off_100498998);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (float *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    int v6 = (const float *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      int v7 = *(float32x4_t **)(a1 + 48);
      uint64_t v8 = *(int *)(a1 + 40);
      uint64_t v9 = v7->i32[0];
      float v10 = v7->f32[1];
      float v11 = v7->f32[2];
      float v12 = v7->f32[3];
      float v13 = v7[1].f32[0];
      float v14 = v7[1].f32[1];
      float v15 = v7[1].f32[2];
      float v16 = v7[1].f32[3];
      float v17 = v7[2].f32[0];
      float v18 = v7[2].f32[1];
      uint64_t v19 = 3 * v8;
      if (v9 == 3)
      {
        if ((int)v8 < 4) {
          goto LABEL_10;
        }
        uint64_t v20 = 0;
        int32x4_t v21 = v5;
        int32x4_t v22 = v6;
        do
        {
          float32x4x3_t v35 = vld3q_f32(v22);
          v22 += 12;
          v36.val[0] = vmlaq_f32(vmlaq_f32(vmulq_f32(v35.val[0], v7[3]), v7[4], v35.val[1]), v7[5], v35.val[2]);
          v36.val[1] = vmlaq_f32(vmlaq_f32(vmulq_f32(v35.val[0], v7[6]), v7[7], v35.val[1]), v7[8], v35.val[2]);
          v36.val[2] = vmlaq_f32(vmlaq_f32(vmulq_f32(v35.val[0], v7[9]), v7[10], v35.val[1]), v7[11], v35.val[2]);
          vst3q_f32(v21, v36);
          v21 += 12;
          v20 += 12;
        }
        while (v20 <= (int)v19 - 12);
      }
      else
      {
        if ((int)v8 < 4)
        {
LABEL_10:
          uint64_t v23 = 0;
          int32x4_t v22 = v6;
          if ((int)v19 > 0) {
            goto LABEL_15;
          }
          goto LABEL_3;
        }
        uint64_t v20 = 0;
        int32x4_t v24 = v5;
        int32x4_t v22 = v6;
        do
        {
          float32x4x4_t v38 = vld4q_f32(v22);
          v22 += 16;
          v37.val[0] = vmlaq_f32(vmlaq_f32(vmulq_f32(v38.val[0], v7[3]), v7[4], v38.val[1]), v7[5], v38.val[2]);
          v37.val[1] = vmlaq_f32(vmlaq_f32(vmulq_f32(v38.val[0], v7[6]), v7[7], v38.val[1]), v7[8], v38.val[2]);
          v37.val[2] = vmlaq_f32(vmlaq_f32(vmulq_f32(v38.val[0], v7[9]), v7[10], v38.val[1]), v7[11], v38.val[2]);
          vst3q_f32(v24, v37);
          v24 += 12;
          v20 += 12;
        }
        while (v20 <= v19 - 12);
      }
      uint64_t v23 = v20;
      if ((int)v20 < (int)v19)
      {
LABEL_15:
        int v25 = (float *)(v22 + 2);
        uint64_t v26 = 4 * v9;
        int v27 = &v5[v23 + 1];
        do
        {
          float v28 = *(v25 - 2);
          float v29 = *(v25 - 1);
          float v30 = (float)((float)(v11 * v29) + (float)(v28 * v10)) + (float)(*v25 * v12);
          float v31 = (float)((float)(v14 * v29) + (float)(v28 * v13)) + (float)(*v25 * v15);
          float v32 = (float)((float)(v17 * v29) + (float)(v28 * v16)) + (float)(*v25 * v18);
          *(v27 - 1) = v30;
          *int v27 = v31;
          v27[1] = v32;
          v23 += 3;
          int v25 = (float *)((char *)v25 + v26);
          v27 += 3;
        }
        while (v23 < (int)v19);
      }
LABEL_3:
      ++v4;
      int v6 = (const float *)((char *)v6 + *(void *)(a1 + 16));
      uint64_t v5 = (float *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v34) {
    sub_1002D6888(v33);
  }
}

void sub_100309DD4(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100309E0C(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004989F8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_100309ED4(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100309EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x4_t *sub_100309ED4(int32x4_t *result, uint64_t a2, char *a3, int a4)
{
  uint64_t v4 = result->i32[0];
  int v5 = result->i32[2];
  int v6 = result->i32[3];
  int v7 = result[1].i32[0];
  int v8 = result[1].i32[1];
  int v9 = result[1].i32[2];
  int v10 = result[1].i32[3];
  int v11 = result[2].i32[0];
  int v12 = result[2].i32[1];
  int v13 = 3 * a4;
  int v14 = result[2].i32[2];
  if (a4 >= 8)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 8 * v4;
    uint64_t v17 = v13 - 24;
    do
    {
      while (1)
      {
        uint64_t v19 = (const char *)(a2 + v15);
        int8x8x3_t v58 = vld3_s8(v19);
        int8x16_t v20 = (int8x16_t)vmovl_u8((uint8x8_t)v58.val[0]);
        int8x16_t v21 = (int8x16_t)vmovl_u8((uint8x8_t)v58.val[1]);
        *(uint16x8_t *)v58.val[0].i8 = vmovl_u8((uint8x8_t)v58.val[2]);
        v58.val[1] = (int8x8_t)result[3].i64[0];
        v58.val[2] = (int8x8_t)result[3].i64[1];
        int16x4_t v22 = *(int16x4_t *)result[4].i8;
        int16x4_t v23 = (int16x4_t)result[4].u64[1];
        int16x4_t v24 = *(int16x4_t *)result[5].i8;
        int16x4_t v25 = (int16x4_t)result[5].u64[1];
        int16x4_t v26 = *(int16x4_t *)result[6].i8;
        int16x4_t v27 = (int16x4_t)result[6].u64[1];
        int16x4_t v28 = *(int16x4_t *)result[7].i8;
        int32x4_t v29 = result[8];
        int32x4_t v30 = vshrq_n_s32(vaddq_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, (int16x4_t)v58.val[2]), *(int16x4_t *)v20.i8, (int16x4_t)v58.val[1]), (int16x4_t)v58.val[0], v22), v29), 0xCuLL);
        int32x4_t v31 = vshrq_n_s32(vaddq_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, v24), *(int16x4_t *)v20.i8, v23), (int16x4_t)v58.val[0], v25), v29), 0xCuLL);
        int32x4_t v32 = vshrq_n_s32(vaddq_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, v27), *(int16x4_t *)v20.i8, v26), (int16x4_t)v58.val[0], v28), v29), 0xCuLL);
        v20.i64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
        v21.i64[0] = vextq_s8(v21, v21, 8uLL).u64[0];
        v58.val[0] = (int8x8_t)vextq_s8(*(int8x16_t *)v58.val[0].i8, *(int8x16_t *)v58.val[0].i8, 8uLL).u64[0];
        *(int32x4_t *)v58.val[1].i8 = vshrq_n_s32(vmlal_s16(vmlal_s16(vmlal_s16(v29, *(int16x4_t *)v20.i8, (int16x4_t)v58.val[1]), *(int16x4_t *)v21.i8, (int16x4_t)v58.val[2]), (int16x4_t)v58.val[0], v22), 0xCuLL);
        int32x4_t v33 = vshrq_n_s32(vmlal_s16(vmlal_s16(vmlal_s16(v29, *(int16x4_t *)v20.i8, v23), *(int16x4_t *)v21.i8, v24), (int16x4_t)v58.val[0], v25), 0xCuLL);
        int32x4_t v34 = vshrq_n_s32(vmlal_s16(vmlal_s16(vmlal_s16(v29, *(int16x4_t *)v20.i8, v26), *(int16x4_t *)v21.i8, v27), (int16x4_t)v58.val[0], v28), 0xCuLL);
        int8x8_t v35 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v30), *(int32x4_t *)v58.val[1].i8));
        int8x8_t v36 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v31), v33));
        int8x8_t v37 = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(v32), v34));
        if (v4 == 3) {
          break;
        }
        uint64_t v18 = result[7].i64[1];
        vst4_s8(a3, *(int8x8x4_t *)v35.i8);
        v15 += 24;
        a3 += v16;
        if (v15 > v17) {
          goto LABEL_7;
        }
      }
      vst3_s8(a3, *(int8x8x3_t *)v35.i8);
      v15 += 24;
      a3 += v16;
    }
    while (v15 <= v17);
  }
  else
  {
    LODWORD(v15) = 0;
  }
LABEL_7:
  if ((int)v15 < v13)
  {
    float32_t result = (int32x4_t *)v13;
    uint64_t v15 = v15;
    if (v4 == 4)
    {
      float32x4x4_t v38 = a3 + 3;
      do
      {
        int v39 = *(unsigned __int8 *)(a2 + v15);
        int v40 = *(unsigned __int8 *)(a2 + v15 + 1);
        int v41 = *(unsigned __int8 *)(a2 + v15 + 2);
        int v42 = v6 * v40 + v5 * v39 + v7 * v41 + 2048;
        int v43 = v9 * v40 + v8 * v39 + v10 * v41 + 2048;
        int v44 = v12 * v40 + v11 * v39 + v14 * v41 + 2048;
        int v45 = (v42 >> 12) & ~(v42 >> 31);
        if (v45 >= 255) {
          LOBYTE(v45) = -1;
        }
        *(v38 - 3) = v45;
        int v46 = (v43 >> 12) & ~(v43 >> 31);
        if (v46 >= 255) {
          LOBYTE(v46) = -1;
        }
        *(v38 - 2) = v46;
        int v47 = (v44 >> 12) & ~(v44 >> 31);
        if (v47 >= 255) {
          LOBYTE(v47) = -1;
        }
        *(v38 - 1) = v47;
        *float32x4x4_t v38 = -1;
        v15 += 3;
        v38 += v4;
      }
      while (v15 < v13);
    }
    else
    {
      uint32x4_t v48 = a3 + 1;
      do
      {
        int v49 = *(unsigned __int8 *)(a2 + v15);
        int v50 = *(unsigned __int8 *)(a2 + v15 + 1);
        int v51 = *(unsigned __int8 *)(a2 + v15 + 2);
        int v52 = v6 * v50 + v5 * v49 + v7 * v51 + 2048;
        int v53 = v9 * v50 + v8 * v49 + v10 * v51 + 2048;
        int v54 = v12 * v50 + v11 * v49 + v14 * v51 + 2048;
        int v55 = (v52 >> 12) & ~(v52 >> 31);
        if (v55 >= 255) {
          LOBYTE(v55) = -1;
        }
        *(v48 - 1) = v55;
        int v56 = (v53 >> 12) & ~(v53 >> 31);
        if (v56 >= 255) {
          LOBYTE(v56) = -1;
        }
        unsigned char *v48 = v56;
        int v57 = (v54 >> 12) & ~(v54 >> 31);
        if (v57 >= 255) {
          LOBYTE(v57) = -1;
        }
        v48[1] = v57;
        v15 += 3;
        v48 += v4;
      }
      while (v15 < v13);
    }
  }
  return result;
}

void sub_10030A178(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030A1B0(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498A58);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    int v5 = (__int16 *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    int v6 = (const __int16 *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_10030A264(*(int32x4_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      int v6 = (const __int16 *)((char *)v6 + *(void *)(a1 + 16));
      int v5 = (__int16 *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

int32x4_t *sub_10030A264(int32x4_t *result, const __int16 *a2, __int16 *a3, int a4)
{
  uint64_t v4 = result->i32[0];
  int v5 = result->i32[2];
  int v6 = result->i32[3];
  int v7 = result[1].i32[0];
  int v8 = result[1].i32[1];
  int v9 = result[1].i32[2];
  int v10 = result[1].i32[3];
  int v11 = result[2].i32[0];
  int v12 = result[2].i32[1];
  int v13 = 3 * a4;
  int v14 = result[2].i32[2];
  if (a4 >= 8)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v13 - 24;
    uint64_t v17 = 16 * v4;
    uint64_t v18 = a2;
    do
    {
      while (1)
      {
        int16x8x3_t v70 = vld3q_s16(v18);
        int32x4_t v20 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.val[0].i8);
        int32x4_t v21 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.val[1].i8);
        int32x4_t v22 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.val[2].i8);
        int32x4_t v23 = result[3];
        int32x4_t v24 = result[4];
        int32x4_t v25 = result[5];
        int32x4_t v26 = result[6];
        int32x4_t v27 = vmlaq_s32(vmlaq_s32(vmulq_s32(v23, v20), v24, v21), v25, v22);
        int32x4_t v28 = result[7];
        int32x4_t v29 = result[8];
        int32x4_t v30 = vmlaq_s32(vmlaq_s32(vmulq_s32(v26, v20), v28, v21), v29, v22);
        int32x4_t v31 = result[9];
        int32x4_t v32 = result[10];
        int32x4_t v33 = vmlaq_s32(vmulq_s32(v31, v20), v32, v21);
        int32x4_t v34 = result[11];
        int32x4_t v35 = result[12];
        int32x4_t v36 = vmlaq_s32(v33, v34, v22);
        int32x4_t v37 = vshrq_n_s32(vaddq_s32(v27, v35), 0xCuLL);
        int32x4_t v38 = vshrq_n_s32(vaddq_s32(v30, v35), 0xCuLL);
        int32x4_t v39 = vshrq_n_s32(vaddq_s32(v36, v35), 0xCuLL);
        int32x4_t v40 = (int32x4_t)vmovl_high_u16((uint16x8_t)v70.val[0]);
        int32x4_t v41 = (int32x4_t)vmovl_high_u16((uint16x8_t)v70.val[1]);
        v70.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v70.val[2]);
        v70.val[1] = (int16x8_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v23, v40), v24, v41), v25, (int32x4_t)v70.val[0]);
        v70.val[2] = (int16x8_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v26, v40), v28, v41), v29, (int32x4_t)v70.val[0]);
        int32x4_t v42 = vmlaq_s32(vmlaq_s32(vmulq_s32(v31, v40), v32, v41), v34, (int32x4_t)v70.val[0]);
        int16x8_t v43 = vqmovun_high_s32(vqmovun_s32(v37), vshrq_n_s32(vaddq_s32((int32x4_t)v70.val[1], v35), 0xCuLL));
        int16x8_t v44 = vqmovun_high_s32(vqmovun_s32(v38), vshrq_n_s32(vaddq_s32((int32x4_t)v70.val[2], v35), 0xCuLL));
        int16x8_t v45 = vqmovun_high_s32(vqmovun_s32(v39), vshrq_n_s32(vaddq_s32(v42, v35), 0xCuLL));
        if (v4 == 3) {
          break;
        }
        int32x4_t v19 = result[14];
        vst4q_s16(a3, *(int16x8x4_t *)v43.i8);
        v15 += 24;
        v18 += 24;
        a3 = (__int16 *)((char *)a3 + v17);
        if (v15 > v16) {
          goto LABEL_7;
        }
      }
      vst3q_s16(a3, *(int16x8x3_t *)v43.i8);
      v15 += 24;
      v18 += 24;
      a3 = (__int16 *)((char *)a3 + v17);
    }
    while (v15 <= v16);
  }
  else
  {
    LODWORD(v15) = 0;
  }
LABEL_7:
  int v46 = v13 - 12;
  if ((int)v15 <= v13 - 12)
  {
    uint64_t v47 = 8 * v4;
    uint32x4_t v48 = &a2[v15];
    if (v4 == 3)
    {
      do
      {
        int16x4x3_t v68 = vld3_s16(v48);
        v48 += 12;
        int32x4_t v49 = (int32x4_t)vmovl_u16((uint16x4_t)v68.val[0]);
        int32x4_t v50 = (int32x4_t)vmovl_u16((uint16x4_t)v68.val[1]);
        *(uint32x4_t *)v68.val[0].i8 = vmovl_u16((uint16x4_t)v68.val[2]);
        *(int32x4_t *)v68.val[1].i8 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[3], v49), result[4], v50), result[5], *(int32x4_t *)v68.val[0].i8);
        *(int32x4_t *)v68.val[2].i8 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[6], v49), result[7], v50), result[8], *(int32x4_t *)v68.val[0].i8);
        int32x4_t v51 = result[12];
        int32x4_t v52 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[9], v49), result[10], v50), result[11], *(int32x4_t *)v68.val[0].i8);
        *(int32x4_t *)v68.val[0].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v68.val[1].i8, v51), 0xCuLL);
        *(int32x4_t *)v68.val[1].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v68.val[2].i8, v51), 0xCuLL);
        *(int32x4_t *)v68.val[2].i8 = vshrq_n_s32(vaddq_s32(v52, v51), 0xCuLL);
        *(int16x4_t *)v52.i8 = vqmovun_s32(*(int32x4_t *)v68.val[0].i8);
        *(int16x4_t *)v50.i8 = vqmovun_s32(*(int32x4_t *)v68.val[1].i8);
        *(int16x4_t *)v51.i8 = vqmovun_s32(*(int32x4_t *)v68.val[2].i8);
        vst3_s16(a3, *(int16x4x3_t *)((char *)&v50 - 8));
        a3 = (__int16 *)((char *)a3 + v47);
        LODWORD(v15) = v15 + 12;
      }
      while (v46 >= (int)v15);
    }
    else
    {
      do
      {
        int16x4x3_t v69 = vld3_s16(v48);
        v48 += 12;
        int32x4_t v53 = (int32x4_t)vmovl_u16((uint16x4_t)v69.val[0]);
        int32x4_t v54 = (int32x4_t)vmovl_u16((uint16x4_t)v69.val[1]);
        *(uint32x4_t *)v69.val[0].i8 = vmovl_u16((uint16x4_t)v69.val[2]);
        *(int32x4_t *)v69.val[1].i8 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[3], v53), result[4], v54), result[5], *(int32x4_t *)v69.val[0].i8);
        *(int32x4_t *)v69.val[2].i8 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[6], v53), result[7], v54), result[8], *(int32x4_t *)v69.val[0].i8);
        int32x4_t v55 = result[12];
        int32x4_t v56 = vmlaq_s32(vmlaq_s32(vmulq_s32(result[9], v53), result[10], v54), result[11], *(int32x4_t *)v69.val[0].i8);
        *(int32x4_t *)v69.val[0].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v69.val[1].i8, v55), 0xCuLL);
        *(int32x4_t *)v69.val[1].i8 = vshrq_n_s32(vaddq_s32(*(int32x4_t *)v69.val[2].i8, v55), 0xCuLL);
        *(int32x4_t *)v69.val[2].i8 = vshrq_n_s32(vaddq_s32(v56, v55), 0xCuLL);
        *(int16x4_t *)v56.i8 = vqmovun_s32(*(int32x4_t *)v69.val[0].i8);
        *(int16x4_t *)v54.i8 = vqmovun_s32(*(int32x4_t *)v69.val[1].i8);
        *(int16x4_t *)v55.i8 = vqmovun_s32(*(int32x4_t *)v69.val[2].i8);
        uint64_t v57 = result[13].i64[0];
        vst4_s16(a3, *(int16x4x4_t *)((char *)&v54 - 8));
        a3 = (__int16 *)((char *)a3 + v47);
        LODWORD(v15) = v15 + 12;
      }
      while (v46 >= (int)v15);
    }
  }
  if ((int)v15 < v13)
  {
    float32_t result = (int32x4_t *)(a3 + 2);
    int8x8x3_t v58 = &a2[v15 + 1];
    do
    {
      int v59 = *((unsigned __int16 *)v58 - 1);
      int v60 = *(unsigned __int16 *)v58;
      int v61 = *((unsigned __int16 *)v58 + 1);
      int v62 = v6 * v60 + v5 * v59 + v7 * v61 + 2048;
      int v63 = v9 * v60 + v8 * v59 + v10 * v61 + 2048;
      int v64 = v12 * v60 + v11 * v59 + v14 * v61 + 2048;
      int v65 = (v62 >> 12) & ~(v62 >> 31);
      if (v65 >= 0xFFFF) {
        LOWORD(v65) = -1;
      }
      result[-1].i16[6] = v65;
      int v66 = (v63 >> 12) & ~(v63 >> 31);
      if (v66 >= 0xFFFF) {
        LOWORD(v66) = -1;
      }
      result[-1].i16[7] = v66;
      int v67 = (v64 >> 12) & ~(v64 >> 31);
      if (v67 >= 0xFFFF) {
        LOWORD(v67) = -1;
      }
      result->i16[0] = v67;
      if (v4 == 4) {
        result->i16[1] = -1;
      }
      v58 += 3;
      float32_t result = (int32x4_t *)((char *)result + 2 * v4);
      LODWORD(v15) = v15 + 3;
    }
    while (v13 > (int)v15);
  }
  return result;
}

void sub_10030A5A4(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030A5DC(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v53, &off_100498AB8);
  int v4 = a2[1];
  uint64_t v5 = *a2;
  if ((int)v5 < v4)
  {
    uint64_t v6 = *(int *)(a1 + 40);
    if ((int)v6 >= 1)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v9 = v7 * v5;
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = *(float **)(a1 + 48);
      uint64_t v12 = 3 * v6;
      uint64_t v13 = *(int *)v11;
      uint64_t v14 = v10 * v5 + *(void *)(a1 + 24) + 8;
      if (v13 == 4)
      {
        uint64_t v15 = 4 * v13;
        uint64_t v16 = v9 + v8 + 4;
        do
        {
          uint64_t v17 = 0;
          float v18 = v11[2];
          float v19 = v11[3];
          float v20 = v11[4];
          float v21 = v11[5];
          float v22 = v11[6];
          float v23 = v11[7];
          float v24 = v11[8];
          float v25 = v11[9];
          int32x4_t v26 = (float *)v16;
          uint64_t v27 = v14;
          float v28 = v11[10];
          do
          {
            float v29 = *(v26 - 1);
            float v30 = v26[1];
            float v31 = (float)((float)(v19 * *v26) + (float)(v29 * v18)) + (float)(v30 * v20);
            float v32 = (float)((float)(v22 * *v26) + (float)(v29 * v21)) + (float)(v30 * v23);
            float v33 = (float)((float)(v25 * *v26) + (float)(v29 * v24)) + (float)(v30 * v28);
            *(float *)(v27 - 8) = v31;
            *(float *)(v27 - 4) = v32;
            *(float *)uint64_t v27 = v33;
            *(_DWORD *)(v27 + 4) = 1065353216;
            v17 += 3;
            v27 += v15;
            v26 += 3;
          }
          while (v17 < v12);
          LODWORD(v5) = v5 + 1;
          v14 += v10;
          v16 += v7;
        }
        while (v5 != v4);
      }
      else
      {
        uint64_t v34 = 4 * v13;
        uint64_t v35 = v9 + v8 + 4;
        do
        {
          uint64_t v36 = 0;
          float v37 = v11[2];
          float v38 = v11[3];
          float v39 = v11[4];
          float v40 = v11[5];
          float v41 = v11[6];
          float v42 = v11[7];
          float v43 = v11[8];
          float v44 = v11[9];
          int16x8_t v45 = (float *)v35;
          int v46 = (float *)v14;
          float v47 = v11[10];
          do
          {
            float v48 = *(v45 - 1);
            float v49 = v45[1];
            float v50 = (float)((float)(v38 * *v45) + (float)(v48 * v37)) + (float)(v49 * v39);
            float v51 = (float)((float)(v41 * *v45) + (float)(v48 * v40)) + (float)(v49 * v42);
            float v52 = (float)((float)(v44 * *v45) + (float)(v48 * v43)) + (float)(v49 * v47);
            *(v46 - 2) = v50;
            *(v46 - 1) = v51;
            *int v46 = v52;
            v36 += 3;
            int v46 = (float *)((char *)v46 + v34);
            v45 += 3;
          }
          while (v36 < v12);
          LODWORD(v5) = v5 + 1;
          v14 += v10;
          v35 += v7;
        }
        while (v5 != v4);
      }
    }
  }
  if (v54) {
    sub_1002D6888(v53);
  }
}

void sub_10030A794(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030A7CC(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498B18);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_10030A894(*(void *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10030A880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10030A894(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = *(int *)result;
  uint64_t v4 = *(int *)(result + 4);
  int v6 = *(_DWORD *)(result + 8);
  if (v6 == 180) {
    uint64_t v7 = dword_1004D34B8;
  }
  else {
    uint64_t v7 = dword_1004D38B8;
  }
  if (byte_1004D3CB8)
  {
    if (a4 < 1) {
      return result;
    }
  }
  else
  {
    dword_1004D38B8[0] = 0;
    dword_1004D34B8[0] = 0;
    dword_1004D30B8[0] = 0;
    uint64_t v8 = 1;
    float32_t result = 0x4126800000000000;
    do
    {
      uint64_t v9 = v8;
      double v10 = (double)(int)v8 * 6.0;
      dword_1004D30B8[v9] = (uint64_t)rint(1044480.0 / (double)(int)v8);
      dword_1004D34B8[v9] = (uint64_t)rint(737280.0 / v10);
      dword_1004D38B8[v9] = (uint64_t)rint(1048576.0 / v10);
      ++v8;
    }
    while (v8 != 256);
    byte_1004D3CB8 = 1;
    if (a4 < 1) {
      return result;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 3 * a4;
  float32_t result = 2048;
  do
  {
    uint64_t v25 = *(unsigned __int8 *)(a2 + v4);
    uint64_t v26 = *(unsigned __int8 *)(a2 + 1);
    int v27 = *(unsigned __int8 *)(a2 + (v4 ^ 2));
    int v28 = v26 - v25;
    int v29 = byte_10040BBC8[(v26 - v25 + 256)] + v25;
    if (v27 - v29 < -256) {
      int v30 = 0;
    }
    else {
      int v30 = byte_10040BBC8[v27 - v29 + 256];
    }
    int v31 = v25 - byte_10040BBC8[(v25 | 0x100) - v26];
    if (v31 - v27 >= -256) {
      int v13 = byte_10040BBC8[v31 - v27 + 256];
    }
    else {
      int v13 = 0;
    }
    int v14 = v30 + v29;
    int v15 = (v14 - v31 + v13) & ~((v14 - v31 + v13) >> 31);
    if (v15 >= 255) {
      int v15 = 255;
    }
    unsigned int v16 = (v15 * dword_1004D30B8[v14] + 2048) >> 12;
    int v17 = v25 - v27 + 2 * v15;
    if (v14 == v26) {
      int v18 = v17;
    }
    else {
      int v18 = v27 - v26 + 4 * v15;
    }
    if (v14 == v27) {
      int v19 = v28;
    }
    else {
      int v19 = v18;
    }
    int v20 = v19 * v7[v15];
    int v21 = v20 + 2048;
    if (v20 >= -2048) {
      int v22 = 0;
    }
    else {
      int v22 = v6;
    }
    int v23 = (v22 + (v21 >> 12)) & ~((v22 + (v21 >> 12)) >> 31);
    if (v23 >= 255) {
      LOBYTE(v23) = -1;
    }
    float v24 = (unsigned char *)(a3 + v11);
    unsigned char *v24 = v23;
    v24[1] = v16;
    unint64_t v24[2] = v14;
    v11 += 3;
    a2 += v5;
  }
  while (v11 < v12);
  return result;
}

void sub_10030AA94(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030AACC(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v32, &off_100498B78);
  int v4 = a2[1];
  uint64_t v5 = *a2;
  if ((int)v5 < v4)
  {
    uint64_t v6 = *(int *)(a1 + 40);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 8) + v7 * v5;
      uint64_t v9 = *(void *)(a1 + 32);
      double v10 = *(float **)(a1 + 48);
      uint64_t v11 = 3 * v6;
      uint64_t v12 = *((int *)v10 + 1);
      uint64_t v14 = 4 * *(int *)v10;
      uint64_t v15 = v9 * v5 + *(void *)(a1 + 24) + 8;
      do
      {
        uint64_t v16 = 0;
        float v17 = v10[2] * 0.0027778;
        int v18 = (float *)v15;
        uint64_t v19 = v8;
        do
        {
          float v20 = *(float *)(v19 + 4 * v12);
          float v21 = *(float *)(v19 + 4);
          uint64_t v13 = v12 ^ 2;
          float v22 = *(float *)(v19 + 4 * (v12 ^ 2));
          if (v22 >= v21) {
            float v23 = *(float *)(v19 + 4 * v13);
          }
          else {
            float v23 = *(float *)(v19 + 4);
          }
          if (v22 <= v21) {
            float v24 = *(float *)(v19 + 4 * v13);
          }
          else {
            float v24 = *(float *)(v19 + 4);
          }
          if (v23 < v20) {
            float v23 = *(float *)(v19 + 4 * v12);
          }
          if (v24 > v20) {
            float v24 = *(float *)(v19 + 4 * v12);
          }
          float v25 = v23 - v24;
          float v26 = 60.0 / (float)(v25 + 0.00000011921);
          float v27 = v25 / (float)(fabsf(v23) + 0.00000011921);
          float v28 = (float)(v21 - v20) * v26;
          BOOL v29 = v23 == v21;
          float v30 = (float)((float)(v20 - v22) * v26) + 120.0;
          float v31 = (float)((float)(v22 - v21) * v26) + 240.0;
          if (!v29) {
            float v30 = v31;
          }
          if (v23 == v22) {
            float v30 = v28;
          }
          if (v30 < 0.0) {
            float v30 = v30 + 360.0;
          }
          *(v18 - 2) = v17 * v30;
          *(v18 - 1) = v27;
          float *v18 = v23;
          v18 += 3;
          v16 += 3;
          v19 += v14;
        }
        while (v16 < v11);
        LODWORD(v5) = v5 + 1;
        v8 += v7;
        v15 += v9;
      }
      while (v5 != v4);
    }
  }
  if (v33) {
    sub_1002D6888(v32);
  }
}

void sub_10030AC50(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030AC88(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v8, &off_100498BD8);
  int v5 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v6 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v5;
    uint64_t v7 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v5;
    do
    {
      sub_10030AD50(*(void *)(a1 + 48), v7, v6, *(_DWORD *)(a1 + 40), v4);
      ++v5;
      v7 += *(void *)(a1 + 16);
      v6 += *(void *)(a1 + 32);
    }
    while (v5 < a2[1]);
  }
  if (v9) {
    sub_1002D6888(v8);
  }
}

void sub_10030AD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10030AD50(uint64_t result, uint64_t a2, uint64_t a3, int a4, float32x4_t a5)
{
  if (a4 >= 1)
  {
    uint64_t v7 = (float32x4_t *)result;
    int v8 = 0;
    uint64_t v9 = *(int *)result;
    uint64_t v10 = 8 * v9;
    uint64_t v11 = (float *)&v140;
    float32_t result = 255;
    while (1)
    {
      if (a4 - v8 >= 256) {
        int v12 = 256;
      }
      else {
        int v12 = a4 - v8;
      }
      int v13 = 3 * v12;
      unint64_t v14 = 0;
      unint64_t v15 = (v13 - 24);
      if (v13 - 24 >= 0)
      {
        a5 = v7[2];
        uint64_t v16 = (float *)v139;
        do
        {
          if (v9 == 3) {
            *(int8x8x3_t *)v144.val[0].i8 = vld3_s8((const char *)a2);
          }
          else {
            int8x8x4_t v144 = vld4_s8((const char *)a2);
          }
          uint16x8_t v17 = vmovl_u8((uint8x8_t)v144.val[0]);
          uint16x8_t v18 = vmovl_u8((uint8x8_t)v144.val[1]);
          uint16x8_t v19 = vmovl_u8((uint8x8_t)v144.val[2]);
          v141.val[0] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v17.i8)));
          v141.val[1] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8)));
          v141.val[2] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19.i8)));
          float v20 = v16;
          vst3q_f32(v20, v141);
          v20 += 12;
          v141.val[0] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v17)));
          v141.val[1] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v18)));
          v141.val[2] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v19)));
          vst3q_f32(v20, v141);
          v14 += 24;
          a2 += v10;
          v16 += 24;
        }
        while (v14 <= v15);
        unint64_t v14 = v14;
      }
      if ((int)v14 < v13)
      {
        float v21 = &v11[v14];
        do
        {
          a5.i8[0] = *(unsigned char *)a2;
          *(float *)&unsigned int v22 = (float)a5.u32[0] * 0.0039216;
          *(v21 - 1) = *(float *)&v22;
          LOBYTE(v22) = *(unsigned char *)(a2 + 1);
          *(float *)&unsigned int v23 = (float)v22 * 0.0039216;
          *float v21 = *(float *)&v23;
          LOBYTE(v23) = *(unsigned char *)(a2 + 2);
          a5.f32[0] = (float)v23 * 0.0039216;
          v21[1] = a5.f32[0];
          v14 += 3;
          a2 += v9;
          v21 += 3;
        }
        while ((uint64_t)v14 < v13);
      }
      if (a4 - v8 >= 1)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v7->i32[2];
        a5.i32[0] = v7->i32[3];
        uint64_t v27 = 4 * v7->i32[1];
        float v28 = (float *)v139;
        BOOL v29 = v11;
        do
        {
          float v30 = v28[v25];
          float v31 = v28[1];
          uint64_t v26 = v25 ^ 2;
          float v32 = v28[v25 ^ 2];
          if (v32 >= v31) {
            float v33 = v28[v26];
          }
          else {
            float v33 = v28[1];
          }
          if (v32 <= v31) {
            float v34 = v28[v26];
          }
          else {
            float v34 = v28[1];
          }
          if (v33 >= v30) {
            float v35 = v33;
          }
          else {
            float v35 = v28[v25];
          }
          if (v34 <= v30) {
            float v36 = v34;
          }
          else {
            float v36 = v28[v25];
          }
          float v37 = v35 - v36;
          float v38 = (float)(v35 + v36) * 0.5;
          float v39 = 0.0;
          float v40 = 0.0;
          if ((float)(v35 - v36) > 0.00000011921)
          {
            float v41 = (float)(2.0 - v35) - v36;
            if (v38 < 0.5) {
              float v41 = v35 + v36;
            }
            float v40 = v37 / v41;
            float v42 = 60.0 / v37;
            float v43 = (float)((float)(v32 - v31) * (float)(60.0 / v37)) + 240.0;
            if (v35 == v31) {
              float v43 = (float)((float)(v30 - v32) * v42) + 120.0;
            }
            float v44 = (float)(v31 - v30) * v42;
            if (v35 == v32) {
              float v39 = v44;
            }
            else {
              float v39 = v43;
            }
            if (v39 < 0.0) {
              float v39 = v39 + 360.0;
            }
          }
          *(v29 - 1) = v39 * a5.f32[0];
          *BOOL v29 = v38;
          v29[1] = v40;
          v24 += 3;
          float v28 = (float *)((char *)v28 + v27);
          v29 += 3;
        }
        while (v24 < v13);
      }
      if ((v15 & 0x80000000) == 0) {
        break;
      }
      uint64_t v72 = 0;
      if (v13 > 0) {
        goto LABEL_67;
      }
LABEL_3:
      v8 += 256;
      a3 += 768;
      if (v8 >= a4) {
        return result;
      }
    }
    uint64_t v45 = 0;
    int v46 = (const float *)v139;
    do
    {
      float v47 = v46;
      float32x4x3_t v143 = vld3q_f32(v47);
      v47 += 12;
      float32x4x3_t v142 = vld3q_f32(v47);
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int v133 = a4;
        int v127 = v8;
        uint64_t v115 = v11;
        uint64_t v121 = v10;
        float32x4x3_t v109 = v142;
        float32x4x3_t v103 = v143;
        int v60 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4x3_t v143 = v103;
        float32x4x3_t v142 = v109;
        *(void *)&long long v61 = 0x3F0000003F000000;
        *((void *)&v61 + 1) = 0x3F0000003F000000;
        uint64_t v11 = v115;
        uint64_t v10 = v121;
        int v8 = v127;
        a4 = v133;
        if (v60)
        {
          xmmword_1004D2D90 = v61;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4x3_t v143 = v103;
          float32x4x3_t v142 = v109;
          uint64_t v11 = v115;
          uint64_t v10 = v121;
          int v8 = v127;
          a4 = v133;
        }
      }
      float32x4_t v48 = (float32x4_t)xmmword_1004D2D90;
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int v134 = a4;
        int v128 = v8;
        unint64_t v116 = v11;
        uint64_t v122 = v10;
        float32x4x3_t v110 = v142;
        float32x4x3_t v104 = v143;
        float32x4_t v98 = v48;
        int v62 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v48 = v98;
        float32x4x3_t v143 = v104;
        float32x4x3_t v142 = v110;
        *(void *)&long long v63 = 0x3F0000003F000000;
        *((void *)&v63 + 1) = 0x3F0000003F000000;
        uint64_t v11 = v116;
        uint64_t v10 = v122;
        int v8 = v128;
        a4 = v134;
        if (v62)
        {
          xmmword_1004D2D90 = v63;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v48 = v98;
          float32x4x3_t v143 = v104;
          float32x4x3_t v142 = v110;
          uint64_t v11 = v116;
          uint64_t v10 = v122;
          int v8 = v128;
          a4 = v134;
        }
      }
      float32x4_t v49 = (float32x4_t)xmmword_1004D2D90;
      float32x4_t v50 = v7[1];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int v135 = a4;
        int v129 = v8;
        uint64_t v117 = v11;
        uint64_t v123 = v10;
        float32x4x3_t v111 = v142;
        float32x4x3_t v105 = v143;
        float32x4_t v94 = v50;
        float32x4_t v99 = v48;
        float32x4_t v90 = v49;
        int v64 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v49 = v90;
        float32x4_t v50 = v94;
        float32x4_t v48 = v99;
        float32x4x3_t v143 = v105;
        float32x4x3_t v142 = v111;
        *(void *)&long long v65 = 0x3F0000003F000000;
        *((void *)&v65 + 1) = 0x3F0000003F000000;
        uint64_t v11 = v117;
        uint64_t v10 = v123;
        int v8 = v129;
        a4 = v135;
        if (v64)
        {
          xmmword_1004D2D90 = v65;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v49 = v90;
          float32x4_t v50 = v94;
          float32x4_t v48 = v99;
          float32x4x3_t v143 = v105;
          float32x4x3_t v142 = v111;
          uint64_t v11 = v117;
          uint64_t v10 = v123;
          int v8 = v129;
          a4 = v135;
        }
      }
      float32x4_t v51 = (float32x4_t)xmmword_1004D2D90;
      float32x4_t v52 = v7[1];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int v136 = a4;
        int v130 = v8;
        uint64_t v118 = v11;
        uint64_t v124 = v10;
        float32x4x3_t v112 = v142;
        float32x4x3_t v106 = v143;
        float32x4_t v95 = v50;
        float32x4_t v100 = v48;
        float32x4_t v87 = v52;
        float32x4_t v91 = v49;
        float32x4_t v84 = v51;
        int v66 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v51 = v84;
        float32x4_t v52 = v87;
        float32x4_t v49 = v91;
        float32x4_t v50 = v95;
        float32x4_t v48 = v100;
        float32x4x3_t v143 = v106;
        float32x4x3_t v142 = v112;
        *(void *)&long long v67 = 0x3F0000003F000000;
        *((void *)&v67 + 1) = 0x3F0000003F000000;
        uint64_t v11 = v118;
        uint64_t v10 = v124;
        int v8 = v130;
        a4 = v136;
        if (v66)
        {
          xmmword_1004D2D90 = v67;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v51 = v84;
          float32x4_t v52 = v87;
          float32x4_t v49 = v91;
          float32x4_t v50 = v95;
          float32x4_t v48 = v100;
          float32x4x3_t v143 = v106;
          float32x4x3_t v142 = v112;
          uint64_t v11 = v118;
          uint64_t v10 = v124;
          int v8 = v130;
          a4 = v136;
        }
      }
      float32x4_t v53 = (float32x4_t)xmmword_1004D2D90;
      float32x4_t v54 = v7[1];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int v137 = a4;
        int v131 = v8;
        uint64_t v119 = v11;
        uint64_t v125 = v10;
        float32x4x3_t v113 = v142;
        float32x4x3_t v107 = v143;
        float32x4_t v96 = v50;
        float32x4_t v101 = v48;
        float32x4_t v88 = v52;
        float32x4_t v92 = v49;
        float32x4_t v82 = v54;
        float32x4_t v85 = v51;
        float32x4_t v80 = v53;
        int v68 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v53 = v80;
        float32x4_t v54 = v82;
        float32x4_t v51 = v85;
        float32x4_t v52 = v88;
        float32x4_t v49 = v92;
        float32x4_t v50 = v96;
        float32x4_t v48 = v101;
        float32x4x3_t v143 = v107;
        float32x4x3_t v142 = v113;
        *(void *)&long long v69 = 0x3F0000003F000000;
        *((void *)&v69 + 1) = 0x3F0000003F000000;
        uint64_t v11 = v119;
        uint64_t v10 = v125;
        int v8 = v131;
        a4 = v137;
        if (v68)
        {
          xmmword_1004D2D90 = v69;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v53 = v80;
          float32x4_t v54 = v82;
          float32x4_t v51 = v85;
          float32x4_t v52 = v88;
          float32x4_t v49 = v92;
          float32x4_t v50 = v96;
          float32x4_t v48 = v101;
          float32x4x3_t v143 = v107;
          float32x4x3_t v142 = v113;
          uint64_t v11 = v119;
          uint64_t v10 = v125;
          int v8 = v131;
          a4 = v137;
        }
      }
      float32x4_t v55 = (float32x4_t)xmmword_1004D2D90;
      float32x4_t v56 = v7[1];
      if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
      {
        int v138 = a4;
        int v132 = v8;
        unint64_t v120 = v11;
        uint64_t v126 = v10;
        float32x4x3_t v114 = v142;
        float32x4x3_t v108 = v143;
        float32x4_t v97 = v50;
        float32x4_t v102 = v48;
        float32x4_t v89 = v52;
        float32x4_t v93 = v49;
        float32x4_t v83 = v54;
        float32x4_t v86 = v51;
        float32x4_t v79 = v56;
        float32x4_t v81 = v53;
        float32x4_t v78 = v55;
        int v70 = __cxa_guard_acquire(qword_1004D2DA0);
        float32x4_t v55 = v78;
        float32x4_t v56 = v79;
        float32x4_t v53 = v81;
        float32x4_t v54 = v83;
        float32x4_t v51 = v86;
        float32x4_t v52 = v89;
        float32x4_t v49 = v93;
        float32x4_t v50 = v97;
        float32x4_t v48 = v102;
        float32x4x3_t v143 = v108;
        float32x4x3_t v142 = v114;
        *(void *)&long long v71 = 0x3F0000003F000000;
        *((void *)&v71 + 1) = 0x3F0000003F000000;
        uint64_t v11 = v120;
        uint64_t v10 = v126;
        int v8 = v132;
        a4 = v138;
        if (v70)
        {
          xmmword_1004D2D90 = v71;
          __cxa_guard_release(qword_1004D2DA0);
          float32x4_t v55 = v78;
          float32x4_t v56 = v79;
          float32x4_t v53 = v81;
          float32x4_t v54 = v83;
          float32x4_t v51 = v86;
          float32x4_t v52 = v89;
          float32x4_t v49 = v93;
          float32x4_t v50 = v97;
          float32x4_t v48 = v102;
          float32x4x3_t v143 = v108;
          float32x4x3_t v142 = v114;
          uint64_t v11 = v120;
          uint64_t v10 = v126;
          int v8 = v132;
          a4 = v138;
        }
      }
      *(uint8x8_t *)a5.f32 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(v143.val[0], v48))), vcvtq_u32_f32(vaddq_f32(v142.val[0], v49))));
      uint8x8_t v57 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v143.val[1], v50), v51))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v142.val[1], v52), v53))));
      uint8x8_t v58 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v143.val[2], v54), v55))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v142.val[2], v56), (float32x4_t)xmmword_1004D2D90))));
      int v59 = (char *)(a3 + v45);
      vst3_s8(v59, *(int8x8x3_t *)a5.f32);
      v45 += 24;
      v46 += 24;
    }
    while ((int)v15 >= (int)v45);
    uint64_t v72 = v45;
    float32_t result = 255;
    if ((int)v45 >= v13) {
      goto LABEL_3;
    }
LABEL_67:
    int16x8x3_t v73 = &v11[v72];
    do
    {
      float v74 = v73[1];
      v75.i32[0] = (uint64_t)rintf(*(v73 - 1));
      v75.i32[1] = (uint64_t)rintf(*v73 * 255.0);
      *(int32x2_t *)a5.f32 = vmin_s32(vmax_s32(v75, 0), (int32x2_t)0xFF000000FFLL);
      unsigned long long v76 = (unsigned char *)(a3 + v72);
      *unsigned long long v76 = a5.i8[0];
      a5.f32[0] = rintf(v74 * 255.0);
      v76[1] = a5.i8[4];
      if ((int)((uint64_t)a5.f32[0] & ~((int)(uint64_t)a5.f32[0] >> 31)) >= 255) {
        char v77 = -1;
      }
      else {
        char v77 = (uint64_t)a5.f32[0] & ~((int)(uint64_t)a5.f32[0] >> 31);
      }
      v76[2] = v77;
      v72 += 3;
      v73 += 3;
    }
    while (v13 > (int)v72);
    goto LABEL_3;
  }
  return result;
}

void sub_10030B6F8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030B730(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v36, &off_100498C38);
  int v4 = a2[1];
  uint64_t v5 = *a2;
  if ((int)v5 < v4)
  {
    uint64_t v6 = *(int *)(a1 + 40);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 8) + v7 * v5;
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 3 * v6;
      uint64_t v11 = *(float **)(a1 + 48);
      uint64_t v12 = *((int *)v11 + 1);
      uint64_t v14 = 4 * *(int *)v11;
      uint64_t v15 = v9 * v5 + *(void *)(a1 + 24) + 8;
      do
      {
        uint64_t v16 = 0;
        uint16x8_t v17 = (float *)v15;
        uint64_t v18 = v8;
        do
        {
          float v19 = *(float *)(v18 + 4 * v12);
          float v20 = *(float *)(v18 + 4);
          uint64_t v13 = v12 ^ 2;
          float v21 = *(float *)(v18 + 4 * (v12 ^ 2));
          if (v21 >= v20) {
            float v22 = *(float *)(v18 + 4 * v13);
          }
          else {
            float v22 = *(float *)(v18 + 4);
          }
          if (v21 <= v20) {
            float v23 = *(float *)(v18 + 4 * v13);
          }
          else {
            float v23 = *(float *)(v18 + 4);
          }
          if (v22 >= v19) {
            float v24 = v22;
          }
          else {
            float v24 = *(float *)(v18 + 4 * v12);
          }
          if (v23 <= v19) {
            float v25 = v23;
          }
          else {
            float v25 = *(float *)(v18 + 4 * v12);
          }
          float v26 = v24 - v25;
          float v27 = (float)(v24 + v25) * 0.5;
          float v28 = 0.0;
          float v29 = 0.0;
          if ((float)(v24 - v25) > 0.00000011921)
          {
            float v30 = (float)(2.0 - v24) - v25;
            if (v27 < 0.5) {
              float v30 = v24 + v25;
            }
            float v29 = v26 / v30;
            float v31 = 60.0 / v26;
            float v32 = (float)(v20 - v19) * (float)(60.0 / v26);
            BOOL v33 = v24 == v20;
            float v34 = (float)((float)(v19 - v21) * v31) + 120.0;
            float v35 = (float)((float)(v21 - v20) * v31) + 240.0;
            if (v33) {
              float v35 = v34;
            }
            if (v24 == v21) {
              float v28 = v32;
            }
            else {
              float v28 = v35;
            }
            if (v28 < 0.0) {
              float v28 = v28 + 360.0;
            }
          }
          *(v17 - 2) = v28 * v11[2];
          *(v17 - 1) = v27;
          *uint16x8_t v17 = v29;
          v17 += 3;
          v16 += 3;
          v18 += v14;
        }
        while (v16 < v10);
        LODWORD(v5) = v5 + 1;
        v8 += v7;
        v15 += v9;
      }
      while (v5 != v4);
    }
  }
  if (v37) {
    sub_1002D6888(v36);
  }
}

void sub_10030B8D8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030B910(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v10, &off_100498C98);
  int v7 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v8 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v7);
    uint64_t v9 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v7;
    do
    {
      sub_10030B9D8(*(float32x4_t **)(a1 + 48), v9, v8, *(_DWORD *)(a1 + 40), v4, v5, v6);
      ++v7;
      v9 += *(void *)(a1 + 16);
      v8 += *(void *)(a1 + 32);
    }
    while (v7 < a2[1]);
  }
  if (v11) {
    sub_1002D6888(v10);
  }
}

void sub_10030B9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10030B9D8(float32x4_t *a1, uint64_t a2, char *a3, int a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  if (a4 >= 1)
  {
    int v10 = 0;
    int v11 = 0;
    uint64_t v12 = a1->i32[0];
    float32x4x3_t v143 = &a1->f32[1];
    float32x2_t v13 = (float32x2_t)vdup_n_s32(0x3B808081u);
    int8x16_t v14 = (int8x16_t)xmmword_100404890;
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
    int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
    int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
    int v19 = a4;
    int v144 = a4;
    float32x4_t v145 = v15;
    do
    {
      int v147 = v19 - 256;
      if (v19 >= 256) {
        int v23 = 256;
      }
      else {
        int v23 = v19;
      }
      int v149 = v10;
      int v24 = a4 - (v10 << 8);
      if (v24 >= 256) {
        int v24 = 256;
      }
      int v148 = v11;
      if (a4 - v11 >= 256) {
        int v25 = 256;
      }
      else {
        int v25 = a4 - v11;
      }
      int v26 = 3 * v25;
      unint64_t v27 = 0;
      unint64_t v28 = (3 * v25 - 24);
      if (3 * v25 - 24 >= 0)
      {
        a5 = a1[2];
        float v29 = (float *)v150;
        do
        {
          float v30 = (const char *)(a2 + v27);
          int8x8x3_t v151 = vld3_s8(v30);
          uint16x8_t v31 = vmovl_u8((uint8x8_t)v151.val[0]);
          uint16x8_t v32 = vmovl_u8((uint8x8_t)v151.val[1]);
          *(uint16x8_t *)v151.val[0].i8 = vmovl_u8((uint8x8_t)v151.val[2]);
          v154.val[0] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8));
          v154.val[1] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v32.i8)));
          v154.val[2] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16((uint16x4_t)v151.val[0])));
          BOOL v33 = v29;
          vst3q_f32(v33, v154);
          v33 += 12;
          a7 = vcvtq_f32_u32(vmovl_high_u16(v31));
          *(float32x4_t *)v151.val[2].i8 = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v32)));
          a6 = vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v151.val[0].i8));
          float32x4_t v34 = vmulq_f32(a5, a6);
          vst3q_f32(v33, *(float32x4x3_t *)a7.f32);
          v27 += 24;
          v29 += 24;
        }
        while (v27 <= v28);
        unint64_t v27 = v27;
      }
      if ((int)v27 >= v26) {
        goto LABEL_44;
      }
      uint64_t v35 = 3 * v24;
      uint64_t v36 = v27 + 3;
      if ((uint64_t)(v27 + 3) > v35) {
        uint64_t v35 = v27 + 3;
      }
      uint64_t v37 = v35 - 3;
      if (v37 == v27) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = -1;
      }
      uint64_t v39 = 1;
      if (v37 != v27) {
        uint64_t v39 = 2;
      }
      unint64_t v40 = v39 + (v37 - (v37 != v27) - v27) / 3;
      if (v40 >= 8)
      {
        uint64_t v42 = 3 * v23;
        if (v40 < 0x10)
        {
          uint64_t v43 = 0;
LABEL_37:
          uint64_t v41 = 3 * (v40 & 0x7FFFFFFFFFFFFFF8) + v27;
          if (v36 <= v42) {
            uint64_t v36 = v42;
          }
          unint64_t v53 = v43 - ((v39 + (v36 + v38 - v27 - 3) / 3) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v54 = 3 * v43 + v27;
          float32x4_t v55 = (float *)&v150[12 * v43 + 4 * v27];
          do
          {
            float32x4_t v56 = (const char *)(a2 + v54);
            *(int8x8x3_t *)a5.f32 = vld3_s8(v56);
            v152.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v16));
            v152.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v16)), v15);
            v152.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v16)), v15);
            v156.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v14));
            v156.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v14)), v15);
            a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v14));
            v156.val[2] = vmulq_f32(a5, v15);
            uint8x8_t v57 = v55 + 24;
            vst3q_f32(v55, v156);
            uint8x8_t v58 = v55 + 12;
            vst3q_f32(v58, v152);
            v54 += 24;
            float32x4_t v55 = v57;
            v53 += 8;
          }
          while (v53);
          if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_44;
          }
          goto LABEL_42;
        }
        uint64_t v43 = v40 & 0x7FFFFFFFFFFFFFF0;
        if (v36 <= v42) {
          unint64_t v44 = v42;
        }
        else {
          unint64_t v44 = v27 + 3;
        }
        unint64_t v45 = (v39 + (v44 + v38 - v27 - 3) / 3) & 0xFFFFFFFFFFFFFFF0;
        int v46 = (float *)&v150[4 * v27];
        unint64_t v47 = v27;
        do
        {
          float32x4_t v48 = (const char *)(a2 + v47);
          *(int8x16x3_t *)(&a6 - 1) = vld3q_s8(v48);
          v155.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v14));
          v155.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v14)), v15);
          v155.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v14)), v15);
          float32x4_t v50 = v46;
          vst3q_f32(v50, v155);
          v50 += 12;
          v155.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v18));
          v153.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v17));
          v159.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v16));
          v159.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v16)), v15);
          v159.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v16)), v15);
          vst3q_f32(v50, v159);
          v153.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v17)), v15);
          v153.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v17)), v15);
          float32x4_t v51 = v46 + 24;
          vst3q_f32(v51, v153);
          v155.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v18)), v15);
          a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v18));
          v155.val[2] = vmulq_f32(a5, v15);
          float32x4_t v52 = v46 + 36;
          vst3q_f32(v52, v155);
          v47 += 48;
          v46 += 48;
          v45 -= 16;
        }
        while (v45);
        if (v40 == v43) {
          goto LABEL_44;
        }
        if ((v40 & 8) != 0) {
          goto LABEL_37;
        }
        uint64_t v41 = 3 * v43 + v27;
      }
      else
      {
        uint64_t v41 = v27;
      }
LABEL_42:
      int v59 = &v150[4 * v41 + 4];
      do
      {
        a5.i8[0] = *(unsigned char *)(a2 + v41);
        *((float *)v59 - 1) = (float)a5.u32[0];
        v60.i32[0] = *(unsigned __int8 *)(a2 + v41 + 1);
        v60.i32[1] = *(unsigned __int8 *)(a2 + v41 + 2);
        *(float32x2_t *)a5.f32 = vmul_f32(vcvt_f32_u32(v60), v13);
        *int v59 = a5.i64[0];
        int v59 = (void *)((char *)v59 + 12);
        v41 += 3;
      }
      while (v41 < v26);
LABEL_44:
      int v146 = 3 * v25;
      sub_10030C3E8(v143, (uint64_t)v150, (uint64_t)v150, v25);
      int v61 = 0;
      if ((v28 & 0x80000000) != 0)
      {
        float32x4_t v15 = v145;
        int8x16_t v14 = (int8x16_t)xmmword_100404890;
        int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
        int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
        int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
      }
      else
      {
        int v62 = (const float *)v150;
        uint64_t v63 = 8 * v12;
        float32x4_t v15 = v145;
        int8x16_t v14 = (int8x16_t)xmmword_100404890;
        int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
        int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
        int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
        do
        {
          while (1)
          {
            int v64 = v62;
            float32x4x3_t v158 = vld3q_f32(v64);
            v64 += 12;
            float32x4x3_t v157 = vld3q_f32(v64);
            float32x4_t v65 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v137 = v157;
              float32x4x3_t v131 = v158;
              float32x4_t v125 = v65;
              int v77 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v65 = v125;
              float32x4x3_t v158 = v131;
              float32x4x3_t v157 = v137;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v77)
              {
                *(void *)&long long v78 = 0x3F0000003F000000;
                *((void *)&v78 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v78;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v65 = v125;
                float32x4x3_t v158 = v131;
                float32x4x3_t v157 = v137;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            a7 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v66 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v138 = v157;
              float32x4x3_t v132 = v158;
              float32x4_t v120 = v66;
              float32x4_t v126 = v65;
              float32x4_t v115 = a7;
              int v79 = __cxa_guard_acquire(qword_1004D2DA0);
              a7 = v115;
              float32x4_t v66 = v120;
              float32x4_t v65 = v126;
              float32x4x3_t v158 = v132;
              float32x4x3_t v157 = v138;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v79)
              {
                *(void *)&long long v80 = 0x3F0000003F000000;
                *((void *)&v80 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v80;
                __cxa_guard_release(qword_1004D2DA0);
                a7 = v115;
                float32x4_t v66 = v120;
                float32x4_t v65 = v126;
                float32x4x3_t v158 = v132;
                float32x4x3_t v157 = v138;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            float32x4_t v67 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v68 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v139 = v157;
              float32x4x3_t v133 = v158;
              float32x4_t v121 = v66;
              float32x4_t v127 = v65;
              float32x4_t v111 = v68;
              float32x4_t v116 = a7;
              float32x4_t v107 = v67;
              int v81 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v67 = v107;
              float32x4_t v68 = v111;
              a7 = v116;
              float32x4_t v66 = v121;
              float32x4_t v65 = v127;
              float32x4x3_t v158 = v133;
              float32x4x3_t v157 = v139;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v81)
              {
                *(void *)&long long v82 = 0x3F0000003F000000;
                *((void *)&v82 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v82;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v67 = v107;
                float32x4_t v68 = v111;
                a7 = v116;
                float32x4_t v66 = v121;
                float32x4_t v65 = v127;
                float32x4x3_t v158 = v133;
                float32x4x3_t v157 = v139;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            float32x4_t v69 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v70 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v140 = v157;
              float32x4x3_t v134 = v158;
              float32x4_t v122 = v66;
              float32x4_t v128 = v65;
              float32x4_t v112 = v68;
              float32x4_t v117 = a7;
              float32x4_t v104 = v70;
              float32x4_t v108 = v67;
              float32x4_t v101 = v69;
              int v83 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v69 = v101;
              float32x4_t v70 = v104;
              float32x4_t v67 = v108;
              float32x4_t v68 = v112;
              a7 = v117;
              float32x4_t v66 = v122;
              float32x4_t v65 = v128;
              float32x4x3_t v158 = v134;
              float32x4x3_t v157 = v140;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v83)
              {
                *(void *)&long long v84 = 0x3F0000003F000000;
                *((void *)&v84 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v84;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v69 = v101;
                float32x4_t v70 = v104;
                float32x4_t v67 = v108;
                float32x4_t v68 = v112;
                a7 = v117;
                float32x4_t v66 = v122;
                float32x4_t v65 = v128;
                float32x4x3_t v158 = v134;
                float32x4x3_t v157 = v140;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            float32x4_t v71 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v72 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v141 = v157;
              float32x4x3_t v135 = v158;
              float32x4_t v123 = v66;
              float32x4_t v129 = v65;
              float32x4_t v113 = v68;
              float32x4_t v118 = a7;
              float32x4_t v105 = v70;
              float32x4_t v109 = v67;
              float32x4_t v99 = v72;
              float32x4_t v102 = v69;
              float32x4_t v97 = v71;
              int v85 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v71 = v97;
              float32x4_t v72 = v99;
              float32x4_t v69 = v102;
              float32x4_t v70 = v105;
              float32x4_t v67 = v109;
              float32x4_t v68 = v113;
              a7 = v118;
              float32x4_t v66 = v123;
              float32x4_t v65 = v129;
              float32x4x3_t v158 = v135;
              float32x4x3_t v157 = v141;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v85)
              {
                *(void *)&long long v86 = 0x3F0000003F000000;
                *((void *)&v86 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v86;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v71 = v97;
                float32x4_t v72 = v99;
                float32x4_t v69 = v102;
                float32x4_t v70 = v105;
                float32x4_t v67 = v109;
                float32x4_t v68 = v113;
                a7 = v118;
                float32x4_t v66 = v123;
                float32x4_t v65 = v129;
                float32x4x3_t v158 = v135;
                float32x4x3_t v157 = v141;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            float32x4_t v73 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v74 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v142 = v157;
              float32x4x3_t v136 = v158;
              float32x4_t v124 = v66;
              float32x4_t v130 = v65;
              float32x4_t v114 = v68;
              float32x4_t v119 = a7;
              float32x4_t v106 = v70;
              float32x4_t v110 = v67;
              float32x4_t v100 = v72;
              float32x4_t v103 = v69;
              float32x4_t v96 = v74;
              float32x4_t v98 = v71;
              float32x4_t v95 = v73;
              int v87 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v73 = v95;
              float32x4_t v74 = v96;
              float32x4_t v71 = v98;
              float32x4_t v72 = v100;
              float32x4_t v69 = v103;
              float32x4_t v70 = v106;
              float32x4_t v67 = v110;
              float32x4_t v68 = v114;
              a7 = v119;
              float32x4_t v66 = v124;
              float32x4_t v65 = v130;
              float32x4x3_t v158 = v136;
              float32x4x3_t v157 = v142;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v87)
              {
                *(void *)&long long v88 = 0x3F0000003F000000;
                *((void *)&v88 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v88;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v73 = v95;
                float32x4_t v74 = v96;
                float32x4_t v71 = v98;
                float32x4_t v72 = v100;
                float32x4_t v69 = v103;
                float32x4_t v70 = v106;
                float32x4_t v67 = v110;
                float32x4_t v68 = v114;
                a7 = v119;
                float32x4_t v66 = v124;
                float32x4_t v65 = v130;
                float32x4x3_t v158 = v136;
                float32x4x3_t v157 = v142;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            a6 = (float32x4_t)vcvtq_u32_f32(vaddq_f32(vmulq_f32(v157.val[0], v66), v67));
            a5 = (float32x4_t)vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v158.val[0], v65), a7))), (uint32x4_t)a6);
            *(uint8x8_t *)a5.f32 = vqmovn_u16((uint16x8_t)a5);
            *(uint8x8_t *)a6.f32 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v158.val[1], v68), v69))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v157.val[1], v70), v71))));
            uint8x8_t v75 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v158.val[2], v72), v73))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v157.val[2], v74), (float32x4_t)xmmword_1004D2D90))));
            if (v12 == 4) {
              break;
            }
            vst3_s8(a3, *(int8x8x3_t *)a5.f32);
            a3 += v63;
            v62 += 24;
            v61 += 24;
            if ((int)v28 < v61) {
              goto LABEL_69;
            }
          }
          uint64_t v76 = a1[3].i64[0];
          vst4_s8(a3, *(int8x8x4_t *)a5.f32);
          a3 += v63;
          v62 += 24;
          v61 += 24;
        }
        while ((int)v28 >= v61);
      }
LABEL_69:
      if (v61 >= v146)
      {
        a4 = v144;
        int v20 = v149;
        int v21 = v148;
        int v22 = v147;
      }
      else
      {
        float32x4_t v89 = (float *)&v150[4 * v61 + 4];
        a4 = v144;
        int v20 = v149;
        int v21 = v148;
        int v22 = v147;
        do
        {
          float v90 = rintf(*(v89 - 1) * 255.0);
          int v91 = (uint64_t)v90 & ~((int)(uint64_t)v90 >> 31);
          if (v91 >= 255) {
            LOBYTE(v91) = -1;
          }
          *a3 = v91;
          float v92 = rintf(*v89 * 255.0);
          int v93 = (uint64_t)v92 & ~((int)(uint64_t)v92 >> 31);
          if (v93 >= 255) {
            LOBYTE(v93) = -1;
          }
          a3[1] = v93;
          a5.f32[0] = rintf(v89[1] * 255.0);
          int v94 = (uint64_t)a5.f32[0] & ~((int)(uint64_t)a5.f32[0] >> 31);
          if (v94 >= 255) {
            LOBYTE(v94) = -1;
          }
          a3[2] = v94;
          if (v12 == 4) {
            a3[3] = -1;
          }
          a3 += v12;
          v89 += 3;
          v61 += 3;
        }
        while (v146 > v61);
      }
      int v11 = v21 + 256;
      a2 += 768;
      int v10 = v20 + 1;
      int v19 = v22;
    }
    while (v11 < a4);
  }
}

float *sub_10030C3E8(float *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    float v5 = result[2];
    uint64_t v6 = *(int *)result;
    uint64_t v7 = *((int *)result + 1);
    uint64_t v8 = v7 ^ 2;
    while (1)
    {
      uint64_t v9 = a2 + 4 * v4;
      float v11 = *(float *)(v9 + 4);
      float v10 = *(float *)(v9 + 8);
      if (v11 != 0.0) {
        break;
      }
      *(float *)(a3 + 4 * v7) = v10;
      *(float *)(a3 + 4) = v10;
      *(float *)(a3 + 4 * v8) = v10;
      if (v6 == 4) {
        goto LABEL_12;
      }
LABEL_3:
      v4 += 3;
      a3 += 4 * v6;
      if (v4 >= 3 * a4) {
        return result;
      }
    }
    float v12 = v5 * *(float *)(a2 + 4 * v4);
    if (v12 >= 0.0)
    {
      while (v12 >= 6.0)
        float v12 = v12 + -6.0;
    }
    else
    {
      do
        float v12 = v12 + 6.0;
      while (v12 < 0.0);
    }
    unsigned int v13 = (__PAIR64__((int)v12, LODWORD(v12)) - COERCE_UNSIGNED_INT((float)(int)v12)) >> 32;
    float v14 = v12 - (float)(int)v13;
    if (v13 > 5)
    {
      float v14 = 0.0;
      unsigned int v13 = 0;
    }
    *(float *)int8x16_t v18 = v10;
    *(float *)&v18[1] = v10 * (float)(1.0 - v11);
    *(float *)&uint64_t v18[2] = v10 * (float)(1.0 - (float)(v11 * v14));
    *(float *)&v18[3] = v10 * (float)(1.0 - (float)(v11 * (float)(1.0 - v14)));
    float32x4_t v15 = (int *)((char *)&unk_100407EA0 + 12 * v13);
    float32_t result = (float *)*v15;
    int v16 = v18[v15[1]];
    int v17 = v18[v15[2]];
    *(_DWORD *)(a3 + 4 * v7) = v18[(void)result];
    *(_DWORD *)(a3 + 4) = v16;
    *(_DWORD *)(a3 + 4 * v8) = v17;
    if (v6 != 4) {
      goto LABEL_3;
    }
LABEL_12:
    *(_DWORD *)(a3 + 12) = 1065353216;
    goto LABEL_3;
  }
  return result;
}

void sub_10030C56C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030C5A4(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498CF8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_10030C3E8(*(float **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10030C658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10030C670(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030C6A8(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v10, &off_100498D58);
  int v7 = *a2;
  if (*a2 < a2[1])
  {
    int v8 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v7);
    uint64_t v9 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v7;
    do
    {
      sub_10030C770(*(float32x4_t **)(a1 + 48), v9, v8, *(_DWORD *)(a1 + 40), v4, v5, v6);
      ++v7;
      v9 += *(void *)(a1 + 16);
      v8 += *(void *)(a1 + 32);
    }
    while (v7 < a2[1]);
  }
  if (v11) {
    sub_1002D6888(v10);
  }
}

void sub_10030C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10030C770(float32x4_t *a1, uint64_t a2, char *a3, int a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  if (a4 >= 1)
  {
    int v10 = 0;
    int v11 = 0;
    uint64_t v12 = a1->i32[0];
    float32x4x3_t v143 = &a1->f32[1];
    float32x2_t v13 = (float32x2_t)vdup_n_s32(0x3B808081u);
    int8x16_t v14 = (int8x16_t)xmmword_100404890;
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
    int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
    int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
    int v19 = a4;
    int v144 = a4;
    float32x4_t v145 = v15;
    do
    {
      int v147 = v19 - 256;
      if (v19 >= 256) {
        int v23 = 256;
      }
      else {
        int v23 = v19;
      }
      int v149 = v10;
      int v24 = a4 - (v10 << 8);
      if (v24 >= 256) {
        int v24 = 256;
      }
      int v148 = v11;
      if (a4 - v11 >= 256) {
        int v25 = 256;
      }
      else {
        int v25 = a4 - v11;
      }
      int v26 = 3 * v25;
      unint64_t v27 = 0;
      unint64_t v28 = (3 * v25 - 24);
      if (3 * v25 - 24 >= 0)
      {
        a5 = a1[2];
        float v29 = (float *)v150;
        do
        {
          float v30 = (const char *)(a2 + v27);
          int8x8x3_t v151 = vld3_s8(v30);
          uint16x8_t v31 = vmovl_u8((uint8x8_t)v151.val[0]);
          uint16x8_t v32 = vmovl_u8((uint8x8_t)v151.val[1]);
          *(uint16x8_t *)v151.val[0].i8 = vmovl_u8((uint8x8_t)v151.val[2]);
          v154.val[0] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8));
          v154.val[1] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v32.i8)));
          v154.val[2] = vmulq_f32(a5, vcvtq_f32_u32(vmovl_u16((uint16x4_t)v151.val[0])));
          BOOL v33 = v29;
          vst3q_f32(v33, v154);
          v33 += 12;
          a7 = vcvtq_f32_u32(vmovl_high_u16(v31));
          *(float32x4_t *)v151.val[2].i8 = vmulq_f32(a5, vcvtq_f32_u32(vmovl_high_u16(v32)));
          a6 = vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v151.val[0].i8));
          float32x4_t v34 = vmulq_f32(a5, a6);
          vst3q_f32(v33, *(float32x4x3_t *)a7.f32);
          v27 += 24;
          v29 += 24;
        }
        while (v27 <= v28);
        unint64_t v27 = v27;
      }
      if ((int)v27 >= v26) {
        goto LABEL_44;
      }
      uint64_t v35 = 3 * v24;
      uint64_t v36 = v27 + 3;
      if ((uint64_t)(v27 + 3) > v35) {
        uint64_t v35 = v27 + 3;
      }
      uint64_t v37 = v35 - 3;
      if (v37 == v27) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = -1;
      }
      uint64_t v39 = 1;
      if (v37 != v27) {
        uint64_t v39 = 2;
      }
      unint64_t v40 = v39 + (v37 - (v37 != v27) - v27) / 3;
      if (v40 >= 8)
      {
        uint64_t v42 = 3 * v23;
        if (v40 < 0x10)
        {
          uint64_t v43 = 0;
LABEL_37:
          uint64_t v41 = 3 * (v40 & 0x7FFFFFFFFFFFFFF8) + v27;
          if (v36 <= v42) {
            uint64_t v36 = v42;
          }
          unint64_t v53 = v43 - ((v39 + (v36 + v38 - v27 - 3) / 3) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v54 = 3 * v43 + v27;
          float32x4_t v55 = (float *)&v150[12 * v43 + 4 * v27];
          do
          {
            float32x4_t v56 = (const char *)(a2 + v54);
            *(int8x8x3_t *)a5.f32 = vld3_s8(v56);
            v152.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v16));
            v152.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v16)), v15);
            v152.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v16)), v15);
            v156.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a5, v14));
            v156.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v14)), v15);
            a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v14));
            v156.val[2] = vmulq_f32(a5, v15);
            uint8x8_t v57 = v55 + 24;
            vst3q_f32(v55, v156);
            uint8x8_t v58 = v55 + 12;
            vst3q_f32(v58, v152);
            v54 += 24;
            float32x4_t v55 = v57;
            v53 += 8;
          }
          while (v53);
          if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_44;
          }
          goto LABEL_42;
        }
        uint64_t v43 = v40 & 0x7FFFFFFFFFFFFFF0;
        if (v36 <= v42) {
          unint64_t v44 = v42;
        }
        else {
          unint64_t v44 = v27 + 3;
        }
        unint64_t v45 = (v39 + (v44 + v38 - v27 - 3) / 3) & 0xFFFFFFFFFFFFFFF0;
        int v46 = (float *)&v150[4 * v27];
        unint64_t v47 = v27;
        do
        {
          float32x4_t v48 = (const char *)(a2 + v47);
          *(int8x16x3_t *)(&a6 - 1) = vld3q_s8(v48);
          v155.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v14));
          v155.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v14)), v15);
          v155.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v14)), v15);
          float32x4_t v50 = v46;
          vst3q_f32(v50, v155);
          v50 += 12;
          v155.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v18));
          v153.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v17));
          v159.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v49, v16));
          v159.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v16)), v15);
          v159.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v16)), v15);
          vst3q_f32(v50, v159);
          v153.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v17)), v15);
          v153.val[2] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v17)), v15);
          float32x4_t v51 = v46 + 24;
          vst3q_f32(v51, v153);
          v155.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a6, v18)), v15);
          a5 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, v18));
          v155.val[2] = vmulq_f32(a5, v15);
          float32x4_t v52 = v46 + 36;
          vst3q_f32(v52, v155);
          v47 += 48;
          v46 += 48;
          v45 -= 16;
        }
        while (v45);
        if (v40 == v43) {
          goto LABEL_44;
        }
        if ((v40 & 8) != 0) {
          goto LABEL_37;
        }
        uint64_t v41 = 3 * v43 + v27;
      }
      else
      {
        uint64_t v41 = v27;
      }
LABEL_42:
      int v59 = &v150[4 * v41 + 4];
      do
      {
        a5.i8[0] = *(unsigned char *)(a2 + v41);
        *((float *)v59 - 1) = (float)a5.u32[0];
        v60.i32[0] = *(unsigned __int8 *)(a2 + v41 + 1);
        v60.i32[1] = *(unsigned __int8 *)(a2 + v41 + 2);
        *(float32x2_t *)a5.f32 = vmul_f32(vcvt_f32_u32(v60), v13);
        *int v59 = a5.i64[0];
        int v59 = (void *)((char *)v59 + 12);
        v41 += 3;
      }
      while (v41 < v26);
LABEL_44:
      int v146 = 3 * v25;
      sub_10030D180(v143, (uint64_t)v150, (uint64_t)v150, v25);
      int v61 = 0;
      if ((v28 & 0x80000000) != 0)
      {
        float32x4_t v15 = v145;
        int8x16_t v14 = (int8x16_t)xmmword_100404890;
        int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
        int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
        int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
      }
      else
      {
        int v62 = (const float *)v150;
        uint64_t v63 = 8 * v12;
        float32x4_t v15 = v145;
        int8x16_t v14 = (int8x16_t)xmmword_100404890;
        int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
        int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
        int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
        do
        {
          while (1)
          {
            int v64 = v62;
            float32x4x3_t v158 = vld3q_f32(v64);
            v64 += 12;
            float32x4x3_t v157 = vld3q_f32(v64);
            float32x4_t v65 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v137 = v157;
              float32x4x3_t v131 = v158;
              float32x4_t v125 = v65;
              int v77 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v65 = v125;
              float32x4x3_t v158 = v131;
              float32x4x3_t v157 = v137;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v77)
              {
                *(void *)&long long v78 = 0x3F0000003F000000;
                *((void *)&v78 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v78;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v65 = v125;
                float32x4x3_t v158 = v131;
                float32x4x3_t v157 = v137;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            a7 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v66 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v138 = v157;
              float32x4x3_t v132 = v158;
              float32x4_t v120 = v66;
              float32x4_t v126 = v65;
              float32x4_t v115 = a7;
              int v79 = __cxa_guard_acquire(qword_1004D2DA0);
              a7 = v115;
              float32x4_t v66 = v120;
              float32x4_t v65 = v126;
              float32x4x3_t v158 = v132;
              float32x4x3_t v157 = v138;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v79)
              {
                *(void *)&long long v80 = 0x3F0000003F000000;
                *((void *)&v80 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v80;
                __cxa_guard_release(qword_1004D2DA0);
                a7 = v115;
                float32x4_t v66 = v120;
                float32x4_t v65 = v126;
                float32x4x3_t v158 = v132;
                float32x4x3_t v157 = v138;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            float32x4_t v67 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v68 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v139 = v157;
              float32x4x3_t v133 = v158;
              float32x4_t v121 = v66;
              float32x4_t v127 = v65;
              float32x4_t v111 = v68;
              float32x4_t v116 = a7;
              float32x4_t v107 = v67;
              int v81 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v67 = v107;
              float32x4_t v68 = v111;
              a7 = v116;
              float32x4_t v66 = v121;
              float32x4_t v65 = v127;
              float32x4x3_t v158 = v133;
              float32x4x3_t v157 = v139;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v81)
              {
                *(void *)&long long v82 = 0x3F0000003F000000;
                *((void *)&v82 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v82;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v67 = v107;
                float32x4_t v68 = v111;
                a7 = v116;
                float32x4_t v66 = v121;
                float32x4_t v65 = v127;
                float32x4x3_t v158 = v133;
                float32x4x3_t v157 = v139;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            float32x4_t v69 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v70 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v140 = v157;
              float32x4x3_t v134 = v158;
              float32x4_t v122 = v66;
              float32x4_t v128 = v65;
              float32x4_t v112 = v68;
              float32x4_t v117 = a7;
              float32x4_t v104 = v70;
              float32x4_t v108 = v67;
              float32x4_t v101 = v69;
              int v83 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v69 = v101;
              float32x4_t v70 = v104;
              float32x4_t v67 = v108;
              float32x4_t v68 = v112;
              a7 = v117;
              float32x4_t v66 = v122;
              float32x4_t v65 = v128;
              float32x4x3_t v158 = v134;
              float32x4x3_t v157 = v140;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v83)
              {
                *(void *)&long long v84 = 0x3F0000003F000000;
                *((void *)&v84 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v84;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v69 = v101;
                float32x4_t v70 = v104;
                float32x4_t v67 = v108;
                float32x4_t v68 = v112;
                a7 = v117;
                float32x4_t v66 = v122;
                float32x4_t v65 = v128;
                float32x4x3_t v158 = v134;
                float32x4x3_t v157 = v140;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            float32x4_t v71 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v72 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v141 = v157;
              float32x4x3_t v135 = v158;
              float32x4_t v123 = v66;
              float32x4_t v129 = v65;
              float32x4_t v113 = v68;
              float32x4_t v118 = a7;
              float32x4_t v105 = v70;
              float32x4_t v109 = v67;
              float32x4_t v99 = v72;
              float32x4_t v102 = v69;
              float32x4_t v97 = v71;
              int v85 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v71 = v97;
              float32x4_t v72 = v99;
              float32x4_t v69 = v102;
              float32x4_t v70 = v105;
              float32x4_t v67 = v109;
              float32x4_t v68 = v113;
              a7 = v118;
              float32x4_t v66 = v123;
              float32x4_t v65 = v129;
              float32x4x3_t v158 = v135;
              float32x4x3_t v157 = v141;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v85)
              {
                *(void *)&long long v86 = 0x3F0000003F000000;
                *((void *)&v86 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v86;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v71 = v97;
                float32x4_t v72 = v99;
                float32x4_t v69 = v102;
                float32x4_t v70 = v105;
                float32x4_t v67 = v109;
                float32x4_t v68 = v113;
                a7 = v118;
                float32x4_t v66 = v123;
                float32x4_t v65 = v129;
                float32x4x3_t v158 = v135;
                float32x4x3_t v157 = v141;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            float32x4_t v73 = (float32x4_t)xmmword_1004D2D90;
            float32x4_t v74 = a1[1];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
            {
              float32x4x3_t v142 = v157;
              float32x4x3_t v136 = v158;
              float32x4_t v124 = v66;
              float32x4_t v130 = v65;
              float32x4_t v114 = v68;
              float32x4_t v119 = a7;
              float32x4_t v106 = v70;
              float32x4_t v110 = v67;
              float32x4_t v100 = v72;
              float32x4_t v103 = v69;
              float32x4_t v96 = v74;
              float32x4_t v98 = v71;
              float32x4_t v95 = v73;
              int v87 = __cxa_guard_acquire(qword_1004D2DA0);
              float32x4_t v73 = v95;
              float32x4_t v74 = v96;
              float32x4_t v71 = v98;
              float32x4_t v72 = v100;
              float32x4_t v69 = v103;
              float32x4_t v70 = v106;
              float32x4_t v67 = v110;
              float32x4_t v68 = v114;
              a7 = v119;
              float32x4_t v66 = v124;
              float32x4_t v65 = v130;
              float32x4x3_t v158 = v136;
              float32x4x3_t v157 = v142;
              int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
              int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
              int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
              float32x4_t v15 = v145;
              int8x16_t v14 = (int8x16_t)xmmword_100404890;
              uint64_t v63 = 8 * v12;
              if (v87)
              {
                *(void *)&long long v88 = 0x3F0000003F000000;
                *((void *)&v88 + 1) = 0x3F0000003F000000;
                xmmword_1004D2D90 = v88;
                __cxa_guard_release(qword_1004D2DA0);
                float32x4_t v73 = v95;
                float32x4_t v74 = v96;
                float32x4_t v71 = v98;
                float32x4_t v72 = v100;
                float32x4_t v69 = v103;
                float32x4_t v70 = v106;
                float32x4_t v67 = v110;
                float32x4_t v68 = v114;
                a7 = v119;
                float32x4_t v66 = v124;
                float32x4_t v65 = v130;
                float32x4x3_t v158 = v136;
                float32x4x3_t v157 = v142;
                int8x16_t v18 = (int8x16_t)xmmword_1004048C0;
                int8x16_t v17 = (int8x16_t)xmmword_1004048B0;
                int8x16_t v16 = (int8x16_t)xmmword_1004048A0;
                float32x4_t v15 = v145;
                int8x16_t v14 = (int8x16_t)xmmword_100404890;
                uint64_t v63 = 8 * v12;
              }
            }
            a6 = (float32x4_t)vcvtq_u32_f32(vaddq_f32(vmulq_f32(v157.val[0], v66), v67));
            a5 = (float32x4_t)vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v158.val[0], v65), a7))), (uint32x4_t)a6);
            *(uint8x8_t *)a5.f32 = vqmovn_u16((uint16x8_t)a5);
            *(uint8x8_t *)a6.f32 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v158.val[1], v68), v69))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v157.val[1], v70), v71))));
            uint8x8_t v75 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v158.val[2], v72), v73))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v157.val[2], v74), (float32x4_t)xmmword_1004D2D90))));
            if (v12 == 4) {
              break;
            }
            vst3_s8(a3, *(int8x8x3_t *)a5.f32);
            a3 += v63;
            v62 += 24;
            v61 += 24;
            if ((int)v28 < v61) {
              goto LABEL_69;
            }
          }
          uint64_t v76 = a1[3].i64[0];
          vst4_s8(a3, *(int8x8x4_t *)a5.f32);
          a3 += v63;
          v62 += 24;
          v61 += 24;
        }
        while ((int)v28 >= v61);
      }
LABEL_69:
      if (v61 >= v146)
      {
        a4 = v144;
        int v20 = v149;
        int v21 = v148;
        int v22 = v147;
      }
      else
      {
        float32x4_t v89 = (float *)&v150[4 * v61 + 4];
        a4 = v144;
        int v20 = v149;
        int v21 = v148;
        int v22 = v147;
        do
        {
          float v90 = rintf(*(v89 - 1) * 255.0);
          int v91 = (uint64_t)v90 & ~((int)(uint64_t)v90 >> 31);
          if (v91 >= 255) {
            LOBYTE(v91) = -1;
          }
          *a3 = v91;
          float v92 = rintf(*v89 * 255.0);
          int v93 = (uint64_t)v92 & ~((int)(uint64_t)v92 >> 31);
          if (v93 >= 255) {
            LOBYTE(v93) = -1;
          }
          a3[1] = v93;
          a5.f32[0] = rintf(v89[1] * 255.0);
          int v94 = (uint64_t)a5.f32[0] & ~((int)(uint64_t)a5.f32[0] >> 31);
          if (v94 >= 255) {
            LOBYTE(v94) = -1;
          }
          a3[2] = v94;
          if (v12 == 4) {
            a3[3] = -1;
          }
          a3 += v12;
          v89 += 3;
          v61 += 3;
        }
        while (v146 > v61);
      }
      int v11 = v21 + 256;
      a2 += 768;
      int v10 = v20 + 1;
      int v19 = v22;
    }
    while (v11 < a4);
  }
}

float *sub_10030D180(float *result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    float v5 = result[2];
    uint64_t v6 = *(int *)result;
    uint64_t v7 = *((int *)result + 1);
    uint64_t v8 = v7 ^ 2;
    while (1)
    {
      uint64_t v9 = (float *)(a2 + 4 * v4);
      float v10 = v9[1];
      float v11 = v9[2];
      if (v11 != 0.0) {
        break;
      }
      *(float *)(a3 + 4 * v7) = v10;
      *(float *)(a3 + 4) = v10;
      *(float *)(a3 + 4 * v8) = v10;
      if (v6 == 4) {
        goto LABEL_12;
      }
LABEL_3:
      v4 += 3;
      a3 += 4 * v6;
      if (v4 >= 3 * a4) {
        return result;
      }
    }
    float v12 = (float)(v10 + v11) - (float)(v10 * v11);
    float v13 = v10 * (float)(v11 + 1.0);
    if (v10 > 0.5) {
      float v13 = v12;
    }
    float v14 = v5 * *v9;
    if (v14 >= 0.0)
    {
      while (v14 >= 6.0)
        float v14 = v14 + -6.0;
    }
    else
    {
      do
        float v14 = v14 + 6.0;
      while (v14 < 0.0);
    }
    int v15 = (__PAIR64__((int)v14, LODWORD(v14)) - COERCE_UNSIGNED_INT((float)(int)v14)) >> 32;
    float v16 = v14 - (float)v15;
    float v21 = v13;
    float v22 = -(float)(v13 - (float)(v10 * 2.0));
    float v17 = v13 - v22;
    float v23 = v22 + (float)(v17 * (float)(1.0 - v16));
    float v24 = v22 + (float)(v17 * v16);
    int8x16_t v18 = (int *)((char *)&unk_100407F40 + 12 * v15);
    float32_t result = (float *)*v18;
    int v19 = *((_DWORD *)&v21 + v18[1]);
    int v20 = *((_DWORD *)&v21 + v18[2]);
    *(float *)(a3 + 4 * v7) = *(&v21 + (void)result);
    *(_DWORD *)(a3 + 4) = v19;
    *(_DWORD *)(a3 + 4 * v8) = v20;
    if (v6 != 4) {
      goto LABEL_3;
    }
LABEL_12:
    *(_DWORD *)(a3 + 12) = 1065353216;
    goto LABEL_3;
  }
  return result;
}

void sub_10030D30C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030D344(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498DB8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_10030D180(*(float **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10030D3FC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030D434(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498E18);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_10030D4E8(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

int *sub_10030D4E8(int *result, uint64_t a2, uint64_t a3, int a4)
{
  if (*((unsigned char *)result + 40)) {
    int v4 = (unsigned __int16 *)&unk_1004F7498;
  }
  else {
    int v4 = (unsigned __int16 *)&unk_1004F7698;
  }
  if (a4 >= 1)
  {
    uint64_t v5 = 0;
    int v6 = result[2];
    int v7 = result[3];
    int v8 = result[4];
    int v9 = result[5];
    int v10 = result[6];
    int v11 = result[7];
    int v12 = result[8];
    int v13 = result[9];
    uint64_t v14 = 3 * a4;
    int v15 = (unsigned __int8 *)(a2 + 1);
    int v16 = result[1];
    float32_t result = (int *)*result;
    do
    {
      int v17 = v4[*(v15 - 1)];
      int v18 = v4[*v15];
      int v19 = v4[v15[1]];
      int v20 = word_1004E5A70[(v6 * v18 + v16 * v17 + v7 * v19 + 2048) >> 12];
      int v21 = (v9 * v18 + v8 * v17 + v10 * v19 + 2048) >> 12;
      int v22 = v12 * v18 + v11 * v17 + v13 * v19;
      unsigned int v23 = word_1004E5A70[v21];
      unsigned int v24 = v20 - v23;
      int v25 = (unsigned char *)(a3 + v5);
      int v26 = 200 * (v23 - word_1004E5A70[(v22 + 2048) >> 12]) + 4210688;
      int32x2_t v27 = vmin_s32(vmax_s32(vshr_n_s32(vmla_s32((int32x2_t)0x404000FFEBD99ALL, (int32x2_t)__PAIR64__(v24, v23), (int32x2_t)0x1F400000128), 0xFuLL), 0), (int32x2_t)0xFF000000FFLL);
      unsigned char *v25 = v27.i8[0];
      int v28 = (v26 >> 15) & ~(v26 >> 31);
      v25[1] = v27.i8[4];
      if (v28 >= 255) {
        LOBYTE(v28) = -1;
      }
      uint64_t v25[2] = v28;
      v5 += 3;
      int v15 = (unsigned __int8 *)result + (void)v15;
    }
    while (v5 < v14);
  }
  return result;
}

void sub_10030D63C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030D674(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498E78);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (float *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    int v6 = (float *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_10030D73C(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      int v6 = (float *)((char *)v6 + *(void *)(a1 + 16));
      uint64_t v5 = (float *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_10030D728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10030D73C(int *a1, float *a2, float *a3, int a4)
{
  uint64_t v237 = *a1;
  if (*((unsigned char *)a1 + 40)) {
    uint64_t v5 = qword_1004F7318;
  }
  else {
    uint64_t v5 = 0;
  }
  float v245 = *((float *)a1 + 2);
  float v246 = *((float *)a1 + 1);
  float v243 = *((float *)a1 + 4);
  float v244 = *((float *)a1 + 3);
  float v241 = *((float *)a1 + 6);
  float v242 = *((float *)a1 + 5);
  float v239 = *((float *)a1 + 8);
  float v240 = *((float *)a1 + 7);
  float v238 = *((float *)a1 + 9);
  int v6 = 3 * a4;
  if (*((unsigned char *)a1 + 41))
  {
    uint64_t v7 = a1[11];
    int v231 = 3 * a4;
    int v8 = 0;
    if (a4 >= 9)
    {
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v235 = (float32x4_t)vdupq_n_s32(0x46800000u);
      float32x4_t v236 = _Q1;
      float32x4_t v233 = (float32x4_t)vdupq_n_s32(0x3C800000u);
      float32x4_t v234 = (float32x4_t)vdupq_n_s32(0x3BC80000u);
      uint64_t v14 = a3;
      do
      {
        if (v237 == 3)
        {
          int v15 = a2;
          float32x4x3_t v251 = vld3q_f32(v15);
          v15 += 12;
          float32x4x3_t v253 = vld3q_f32(v15);
          if (v7) {
            goto LABEL_9;
          }
        }
        else
        {
          int v18 = a2;
          uint64_t v19 = 4 * v237;
          *(float32x4x4_t *)v251.val[0].f32 = vld4q_f32(v18);
          int v20 = &v18[v19];
          *(float32x4x4_t *)v253.val[0].f32 = vld4q_f32(v20);
          if (v7)
          {
LABEL_9:
            float32x4_t v16 = v253.val[0];
            float32x4_t v17 = v251.val[0];
            if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0) {
              goto LABEL_26;
            }
            goto LABEL_13;
          }
        }
        float32x4_t v16 = v253.val[2];
        v253.val[2] = v253.val[0];
        float32x4_t v17 = v251.val[2];
        v251.val[2] = v251.val[0];
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
LABEL_26:
          float32x4_t v207 = v251.val[1];
          float32x4_t v219 = v251.val[2];
          float32x4_t v183 = v253.val[1];
          float32x4_t v195 = v253.val[2];
          float32x4_t v159 = v17;
          float32x4_t v171 = v16;
          int v40 = __cxa_guard_acquire(qword_1004D2D60);
          float32x4_t v17 = v159;
          float32x4_t v16 = v171;
          v253.val[1] = v183;
          v253.val[2] = v195;
          v251.val[1] = v207;
          v251.val[2] = v219;
          if (v40)
          {
            *(void *)&long long v41 = 0x8000000080000000;
            *((void *)&v41 + 1) = 0x8000000080000000;
            xmmword_1004D2D50 = v41;
            __cxa_guard_release(qword_1004D2D60);
            float32x4_t v17 = v159;
            float32x4_t v16 = v171;
            v253.val[1] = v183;
            v253.val[2] = v195;
            v251.val[1] = v207;
            v251.val[2] = v219;
          }
        }
LABEL_13:
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v208 = v251.val[1];
          float32x4_t v220 = v251.val[2];
          float32x4_t v184 = v253.val[1];
          float32x4_t v196 = v253.val[2];
          float32x4_t v160 = v17;
          float32x4_t v172 = v16;
          int v42 = __cxa_guard_acquire(qword_1004D2D80);
          float32x4_t v17 = v160;
          float32x4_t v16 = v172;
          v253.val[1] = v184;
          v253.val[2] = v196;
          v251.val[1] = v208;
          v251.val[2] = v220;
          if (v42)
          {
            *(void *)&long long v43 = 0x3F0000003F000000;
            *((void *)&v43 + 1) = 0x3F0000003F000000;
            xmmword_1004D2D70 = v43;
            __cxa_guard_release(qword_1004D2D80);
            float32x4_t v17 = v160;
            float32x4_t v16 = v172;
            v253.val[1] = v184;
            v253.val[2] = v196;
            v251.val[1] = v208;
            v251.val[2] = v220;
          }
        }
        int8x16_t v21 = (int8x16_t)xmmword_1004D2D70;
        int8x16_t v22 = (int8x16_t)xmmword_1004D2D50;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v209 = v251.val[1];
          float32x4_t v221 = v251.val[2];
          float32x4_t v185 = v253.val[1];
          float32x4_t v197 = v253.val[2];
          float32x4_t v161 = v17;
          float32x4_t v173 = v16;
          int8x16_t v139 = v22;
          int8x16_t v149 = v21;
          int v44 = __cxa_guard_acquire(qword_1004D2D60);
          int8x16_t v22 = v139;
          int8x16_t v21 = v149;
          float32x4_t v17 = v161;
          float32x4_t v16 = v173;
          v253.val[1] = v185;
          v253.val[2] = v197;
          v251.val[1] = v209;
          v251.val[2] = v221;
          if (v44)
          {
            *(void *)&long long v45 = 0x8000000080000000;
            *((void *)&v45 + 1) = 0x8000000080000000;
            xmmword_1004D2D50 = v45;
            __cxa_guard_release(qword_1004D2D60);
            int8x16_t v22 = v139;
            int8x16_t v21 = v149;
            float32x4_t v17 = v161;
            float32x4_t v16 = v173;
            v253.val[1] = v185;
            v253.val[2] = v197;
            v251.val[1] = v209;
            v251.val[2] = v221;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v210 = v251.val[1];
          float32x4_t v222 = v251.val[2];
          float32x4_t v186 = v253.val[1];
          float32x4_t v198 = v253.val[2];
          float32x4_t v162 = v17;
          float32x4_t v174 = v16;
          int8x16_t v140 = v22;
          int8x16_t v150 = v21;
          int v46 = __cxa_guard_acquire(qword_1004D2D80);
          int8x16_t v22 = v140;
          int8x16_t v21 = v150;
          float32x4_t v17 = v162;
          float32x4_t v16 = v174;
          v253.val[1] = v186;
          v253.val[2] = v198;
          v251.val[1] = v210;
          v251.val[2] = v222;
          if (v46)
          {
            *(void *)&long long v47 = 0x3F0000003F000000;
            *((void *)&v47 + 1) = 0x3F0000003F000000;
            xmmword_1004D2D70 = v47;
            __cxa_guard_release(qword_1004D2D80);
            int8x16_t v22 = v140;
            int8x16_t v21 = v150;
            float32x4_t v17 = v162;
            float32x4_t v16 = v174;
            v253.val[1] = v186;
            v253.val[2] = v198;
            v251.val[1] = v210;
            v251.val[2] = v222;
          }
        }
        int8x16_t v23 = (int8x16_t)xmmword_1004D2D70;
        int8x16_t v24 = (int8x16_t)xmmword_1004D2D50;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v211 = v251.val[1];
          float32x4_t v223 = v251.val[2];
          float32x4_t v187 = v253.val[1];
          float32x4_t v199 = v253.val[2];
          float32x4_t v163 = v17;
          float32x4_t v175 = v16;
          int8x16_t v141 = v22;
          int8x16_t v151 = v21;
          int8x16_t v123 = v24;
          int8x16_t v131 = v23;
          int v48 = __cxa_guard_acquire(qword_1004D2D60);
          int8x16_t v24 = v123;
          int8x16_t v23 = v131;
          int8x16_t v22 = v141;
          int8x16_t v21 = v151;
          float32x4_t v17 = v163;
          float32x4_t v16 = v175;
          v253.val[1] = v187;
          v253.val[2] = v199;
          v251.val[1] = v211;
          v251.val[2] = v223;
          if (v48)
          {
            *(void *)&long long v49 = 0x8000000080000000;
            *((void *)&v49 + 1) = 0x8000000080000000;
            xmmword_1004D2D50 = v49;
            __cxa_guard_release(qword_1004D2D60);
            int8x16_t v24 = v123;
            int8x16_t v23 = v131;
            int8x16_t v22 = v141;
            int8x16_t v21 = v151;
            float32x4_t v17 = v163;
            float32x4_t v16 = v175;
            v253.val[1] = v187;
            v253.val[2] = v199;
            v251.val[1] = v211;
            v251.val[2] = v223;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v212 = v251.val[1];
          float32x4_t v224 = v251.val[2];
          float32x4_t v188 = v253.val[1];
          float32x4_t v200 = v253.val[2];
          float32x4_t v164 = v17;
          float32x4_t v176 = v16;
          int8x16_t v142 = v22;
          int8x16_t v152 = v21;
          int8x16_t v124 = v24;
          int8x16_t v132 = v23;
          int v50 = __cxa_guard_acquire(qword_1004D2D80);
          int8x16_t v24 = v124;
          int8x16_t v23 = v132;
          int8x16_t v22 = v142;
          int8x16_t v21 = v152;
          float32x4_t v17 = v164;
          float32x4_t v16 = v176;
          v253.val[1] = v188;
          v253.val[2] = v200;
          v251.val[1] = v212;
          v251.val[2] = v224;
          if (v50)
          {
            *(void *)&long long v51 = 0x3F0000003F000000;
            *((void *)&v51 + 1) = 0x3F0000003F000000;
            xmmword_1004D2D70 = v51;
            __cxa_guard_release(qword_1004D2D80);
            int8x16_t v24 = v124;
            int8x16_t v23 = v132;
            int8x16_t v22 = v142;
            int8x16_t v21 = v152;
            float32x4_t v17 = v164;
            float32x4_t v16 = v176;
            v253.val[1] = v188;
            v253.val[2] = v200;
            v251.val[1] = v212;
            v251.val[2] = v224;
          }
        }
        int8x16_t v25 = (int8x16_t)xmmword_1004D2D70;
        int8x16_t v26 = (int8x16_t)xmmword_1004D2D50;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v213 = v251.val[1];
          float32x4_t v225 = v251.val[2];
          float32x4_t v189 = v253.val[1];
          float32x4_t v201 = v253.val[2];
          float32x4_t v165 = v17;
          float32x4_t v177 = v16;
          int8x16_t v143 = v22;
          int8x16_t v153 = v21;
          int8x16_t v125 = v24;
          int8x16_t v133 = v23;
          int8x16_t v111 = v26;
          int8x16_t v117 = v25;
          int v52 = __cxa_guard_acquire(qword_1004D2D60);
          int8x16_t v26 = v111;
          int8x16_t v25 = v117;
          int8x16_t v24 = v125;
          int8x16_t v23 = v133;
          int8x16_t v22 = v143;
          int8x16_t v21 = v153;
          float32x4_t v17 = v165;
          float32x4_t v16 = v177;
          v253.val[1] = v189;
          v253.val[2] = v201;
          v251.val[1] = v213;
          v251.val[2] = v225;
          if (v52)
          {
            *(void *)&long long v53 = 0x8000000080000000;
            *((void *)&v53 + 1) = 0x8000000080000000;
            xmmword_1004D2D50 = v53;
            __cxa_guard_release(qword_1004D2D60);
            int8x16_t v26 = v111;
            int8x16_t v25 = v117;
            int8x16_t v24 = v125;
            int8x16_t v23 = v133;
            int8x16_t v22 = v143;
            int8x16_t v21 = v153;
            float32x4_t v17 = v165;
            float32x4_t v16 = v177;
            v253.val[1] = v189;
            v253.val[2] = v201;
            v251.val[1] = v213;
            v251.val[2] = v225;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v214 = v251.val[1];
          float32x4_t v226 = v251.val[2];
          float32x4_t v190 = v253.val[1];
          float32x4_t v202 = v253.val[2];
          float32x4_t v166 = v17;
          float32x4_t v178 = v16;
          int8x16_t v144 = v22;
          int8x16_t v154 = v21;
          int8x16_t v126 = v24;
          int8x16_t v134 = v23;
          int8x16_t v112 = v26;
          int8x16_t v118 = v25;
          int v54 = __cxa_guard_acquire(qword_1004D2D80);
          int8x16_t v26 = v112;
          int8x16_t v25 = v118;
          int8x16_t v24 = v126;
          int8x16_t v23 = v134;
          int8x16_t v22 = v144;
          int8x16_t v21 = v154;
          float32x4_t v17 = v166;
          float32x4_t v16 = v178;
          v253.val[1] = v190;
          v253.val[2] = v202;
          v251.val[1] = v214;
          v251.val[2] = v226;
          if (v54)
          {
            *(void *)&long long v55 = 0x3F0000003F000000;
            *((void *)&v55 + 1) = 0x3F0000003F000000;
            xmmword_1004D2D70 = v55;
            __cxa_guard_release(qword_1004D2D80);
            int8x16_t v26 = v112;
            int8x16_t v25 = v118;
            int8x16_t v24 = v126;
            int8x16_t v23 = v134;
            int8x16_t v22 = v144;
            int8x16_t v21 = v154;
            float32x4_t v17 = v166;
            float32x4_t v16 = v178;
            v253.val[1] = v190;
            v253.val[2] = v202;
            v251.val[1] = v214;
            v251.val[2] = v226;
          }
        }
        int8x16_t v27 = (int8x16_t)xmmword_1004D2D70;
        int8x16_t v28 = (int8x16_t)xmmword_1004D2D50;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v215 = v251.val[1];
          float32x4_t v227 = v251.val[2];
          float32x4_t v191 = v253.val[1];
          float32x4_t v203 = v253.val[2];
          float32x4_t v167 = v17;
          float32x4_t v179 = v16;
          int8x16_t v145 = v22;
          int8x16_t v155 = v21;
          int8x16_t v127 = v24;
          int8x16_t v135 = v23;
          int8x16_t v113 = v26;
          int8x16_t v119 = v25;
          int8x16_t v103 = v28;
          int8x16_t v107 = v27;
          int v56 = __cxa_guard_acquire(qword_1004D2D60);
          int8x16_t v28 = v103;
          int8x16_t v27 = v107;
          int8x16_t v26 = v113;
          int8x16_t v25 = v119;
          int8x16_t v24 = v127;
          int8x16_t v23 = v135;
          int8x16_t v22 = v145;
          int8x16_t v21 = v155;
          float32x4_t v17 = v167;
          float32x4_t v16 = v179;
          v253.val[1] = v191;
          v253.val[2] = v203;
          v251.val[1] = v215;
          v251.val[2] = v227;
          if (v56)
          {
            *(void *)&long long v57 = 0x8000000080000000;
            *((void *)&v57 + 1) = 0x8000000080000000;
            xmmword_1004D2D50 = v57;
            __cxa_guard_release(qword_1004D2D60);
            int8x16_t v28 = v103;
            int8x16_t v27 = v107;
            int8x16_t v26 = v113;
            int8x16_t v25 = v119;
            int8x16_t v24 = v127;
            int8x16_t v23 = v135;
            int8x16_t v22 = v145;
            int8x16_t v21 = v155;
            float32x4_t v17 = v167;
            float32x4_t v16 = v179;
            v253.val[1] = v191;
            v253.val[2] = v203;
            v251.val[1] = v215;
            v251.val[2] = v227;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v216 = v251.val[1];
          float32x4_t v228 = v251.val[2];
          float32x4_t v192 = v253.val[1];
          float32x4_t v204 = v253.val[2];
          float32x4_t v168 = v17;
          float32x4_t v180 = v16;
          int8x16_t v146 = v22;
          int8x16_t v156 = v21;
          int8x16_t v128 = v24;
          int8x16_t v136 = v23;
          int8x16_t v114 = v26;
          int8x16_t v120 = v25;
          int8x16_t v104 = v28;
          int8x16_t v108 = v27;
          int v58 = __cxa_guard_acquire(qword_1004D2D80);
          int8x16_t v28 = v104;
          int8x16_t v27 = v108;
          int8x16_t v26 = v114;
          int8x16_t v25 = v120;
          int8x16_t v24 = v128;
          int8x16_t v23 = v136;
          int8x16_t v22 = v146;
          int8x16_t v21 = v156;
          float32x4_t v17 = v168;
          float32x4_t v16 = v180;
          v253.val[1] = v192;
          v253.val[2] = v204;
          v251.val[1] = v216;
          v251.val[2] = v228;
          if (v58)
          {
            *(void *)&long long v59 = 0x3F0000003F000000;
            *((void *)&v59 + 1) = 0x3F0000003F000000;
            xmmword_1004D2D70 = v59;
            __cxa_guard_release(qword_1004D2D80);
            int8x16_t v28 = v104;
            int8x16_t v27 = v108;
            int8x16_t v26 = v114;
            int8x16_t v25 = v120;
            int8x16_t v24 = v128;
            int8x16_t v23 = v136;
            int8x16_t v22 = v146;
            int8x16_t v21 = v156;
            float32x4_t v17 = v168;
            float32x4_t v16 = v180;
            v253.val[1] = v192;
            v253.val[2] = v204;
            v251.val[1] = v216;
            v251.val[2] = v228;
          }
        }
        int8x16_t v29 = (int8x16_t)xmmword_1004D2D70;
        int8x16_t v30 = (int8x16_t)xmmword_1004D2D50;
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v217 = v251.val[1];
          float32x4_t v229 = v251.val[2];
          float32x4_t v193 = v253.val[1];
          float32x4_t v205 = v253.val[2];
          float32x4_t v169 = v17;
          float32x4_t v181 = v16;
          int8x16_t v147 = v22;
          int8x16_t v157 = v21;
          int8x16_t v129 = v24;
          int8x16_t v137 = v23;
          int8x16_t v115 = v26;
          int8x16_t v121 = v25;
          int8x16_t v105 = v28;
          int8x16_t v109 = v27;
          int v60 = __cxa_guard_acquire(qword_1004D2D60);
          int8x16_t v28 = v105;
          int8x16_t v27 = v109;
          int8x16_t v26 = v115;
          int8x16_t v25 = v121;
          int8x16_t v24 = v129;
          int8x16_t v23 = v137;
          int8x16_t v22 = v147;
          int8x16_t v21 = v157;
          float32x4_t v17 = v169;
          float32x4_t v16 = v181;
          v253.val[1] = v193;
          v253.val[2] = v205;
          v251.val[1] = v217;
          v251.val[2] = v229;
          if (v60)
          {
            *(void *)&long long v61 = 0x8000000080000000;
            *((void *)&v61 + 1) = 0x8000000080000000;
            xmmword_1004D2D50 = v61;
            __cxa_guard_release(qword_1004D2D60);
            int8x16_t v28 = v105;
            int8x16_t v27 = v109;
            int8x16_t v26 = v115;
            int8x16_t v25 = v121;
            int8x16_t v24 = v129;
            int8x16_t v23 = v137;
            int8x16_t v22 = v147;
            int8x16_t v21 = v157;
            float32x4_t v17 = v169;
            float32x4_t v16 = v181;
            v253.val[1] = v193;
            v253.val[2] = v205;
            v251.val[1] = v217;
            v251.val[2] = v229;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
        {
          float32x4_t v218 = v251.val[1];
          float32x4_t v230 = v251.val[2];
          float32x4_t v194 = v253.val[1];
          float32x4_t v206 = v253.val[2];
          float32x4_t v170 = v17;
          float32x4_t v182 = v16;
          int8x16_t v148 = v22;
          int8x16_t v158 = v21;
          int8x16_t v130 = v24;
          int8x16_t v138 = v23;
          int8x16_t v116 = v26;
          int8x16_t v122 = v25;
          int8x16_t v106 = v28;
          int8x16_t v110 = v27;
          int v62 = __cxa_guard_acquire(qword_1004D2D80);
          int8x16_t v28 = v106;
          int8x16_t v27 = v110;
          int8x16_t v26 = v116;
          int8x16_t v25 = v122;
          int8x16_t v24 = v130;
          int8x16_t v23 = v138;
          int8x16_t v22 = v148;
          int8x16_t v21 = v158;
          float32x4_t v17 = v170;
          float32x4_t v16 = v182;
          v253.val[1] = v194;
          v253.val[2] = v206;
          v251.val[1] = v218;
          v251.val[2] = v230;
          if (v62)
          {
            *(void *)&long long v63 = 0x3F0000003F000000;
            *((void *)&v63 + 1) = 0x3F0000003F000000;
            xmmword_1004D2D70 = v63;
            __cxa_guard_release(qword_1004D2D80);
            int8x16_t v28 = v106;
            int8x16_t v27 = v110;
            int8x16_t v26 = v116;
            int8x16_t v25 = v122;
            int8x16_t v24 = v130;
            int8x16_t v23 = v138;
            int8x16_t v22 = v148;
            int8x16_t v21 = v158;
            float32x4_t v17 = v170;
            float32x4_t v16 = v182;
            v253.val[1] = v194;
            v253.val[2] = v206;
            v251.val[1] = v218;
            v251.val[2] = v230;
          }
        }
        int8x16_t v31 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(v251.val[2], (float32x4_t)0), v236), v235);
        int8x16_t v32 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(v251.val[1], (float32x4_t)0), v236), v235);
        int8x16_t v33 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(v17, (float32x4_t)0), v236), v235);
        int8x16_t v34 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(v253.val[2], (float32x4_t)0), v236), v235);
        int8x16_t v35 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(v253.val[1], (float32x4_t)0), v236), v235);
        int8x16_t v36 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(v16, (float32x4_t)0), v236), v235);
        sub_10030E4A0(qword_1004F73D0, v249, (uint16x8_t *)&v248, (uint16x8_t *)&v247, (uint16x8_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v31, (float32x4_t)vorrq_s8(vandq_s8(v22, v31), v21)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v34, (float32x4_t)vorrq_s8(vandq_s8(v24, v34), v23)))), (uint16x8_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vorrq_s8(vandq_s8(v26, v32), v25)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v35, (float32x4_t)vorrq_s8(vandq_s8(v28, v35), v27)))), (uint16x8_t)vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v33, (float32x4_t)vorrq_s8(vandq_s8(v30, v33), v29)))), vcvtq_s32_f32(
                          vaddq_f32((float32x4_t)v36, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_1004D2D50, v36), (int8x16_t)xmmword_1004D2D70)))));
        v252.val[0] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v249[0].i8)), v234);
        v37.i64[0] = 0xC3000000C3000000;
        v37.i64[1] = 0xC3000000C3000000;
        v252.val[1] = vaddq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v248.i8)), v233), v37);
        v252.val[2] = vaddq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v247.i8)), v233), v37);
        v250.val[0] = vmulq_f32(vcvtq_f32_s32(vmovl_high_s16((int16x8_t)v249[0])), v234);
        v250.val[1] = vaddq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v248)), v233), v37);
        v250.val[2] = vaddq_f32(vmulq_f32(vcvtq_f32_s32(vmovl_high_s16(v247)), v233), v37);
        uint64_t v38 = v14 + 24;
        vst3q_f32(v14, v252);
        uint64_t v39 = v14 + 12;
        vst3q_f32(v39, v250);
        v8 += 24;
        a2 += 8 * v237;
        uint64_t v14 = v38;
      }
      while (v6 - 24 > v8);
    }
    int v6 = v231;
    if (v8 < v231)
    {
      uint64_t v64 = qword_1004F73D0;
      float32x4_t v65 = (float32x2_t *)&a3[v8 + 1];
      uint64_t v66 = v7;
      float32x4_t v67 = a2 + 1;
      uint64_t v68 = v7 ^ 2;
      float32x2_t v69 = (float32x2_t)vdup_n_s32(0x38800000u);
      float32x2_t v70 = (float32x2_t)vdup_n_s32(0x43800000u);
      do
      {
        float v71 = v67[v66 - 1];
        if (v71 <= 1.0) {
          float v72 = v67[v66 - 1];
        }
        else {
          float v72 = 1.0;
        }
        if (v71 >= 0.0) {
          float v73 = v72;
        }
        else {
          float v73 = 0.0;
        }
        if (*v67 <= 1.0) {
          float v74 = *v67;
        }
        else {
          float v74 = 1.0;
        }
        if (*v67 >= 0.0) {
          float v75 = v74;
        }
        else {
          float v75 = 0.0;
        }
        float v76 = v67[v68 - 1];
        if (v76 <= 1.0) {
          float v77 = v67[v68 - 1];
        }
        else {
          float v77 = 1.0;
        }
        uint64_t v78 = (uint64_t)rintf(v73 * 16384.0);
        if (v76 >= 0.0) {
          float v79 = v77;
        }
        else {
          float v79 = 0.0;
        }
        v249[0].i32[0] = 0;
        v248.i32[0] = 0;
        v247.i32[0] = 0;
        sub_10030E9B8(v78, (uint64_t)rintf(v75 * 16384.0), (uint64_t)rintf(v79 * 16384.0), v64, v249[0].i32, v248.i32, v247.i32);
        v65[-1].f32[1] = (float)((float)v249[0].i32[0] * 0.000061035) * 100.0;
        *float32x4_t v65 = vmla_f32((float32x2_t)0xC3000000C3000000, v70, vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v247.u32[0], v248.u32[0])), v69));
        float32x4_t v65 = (float32x2_t *)((char *)v65 + 12);
        v8 += 3;
        v67 += v237;
      }
      while (v231 > v8);
      a2 = v67 - 1;
    }
  }
  else
  {
    int v8 = 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D3D18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_1004D3D18))
  {
    sub_1002C6CF0((unsigned int *)&v248, 16);
    sub_1002C6CF0((unsigned int *)&v247, 116);
    sub_1002C70C8(v248.i32, (unsigned int *)&v247, v249);
    dword_1004D3D10 = v249[0].i32[0];
    __cxa_guard_release(qword_1004D3D18);
  }
  if (v8 < v6)
  {
    uint64_t v80 = v8;
    int v81 = a2 + 1;
    long long v82 = &a3[v8 + 1];
    do
    {
      float v85 = *(v81 - 1);
      if (v85 <= 1.0) {
        float v86 = *(v81 - 1);
      }
      else {
        float v86 = 1.0;
      }
      if (v85 >= 0.0) {
        float v87 = v86;
      }
      else {
        float v87 = 0.0;
      }
      float v88 = 0.0;
      if (*v81 >= 0.0)
      {
        float v88 = 1.0;
        if (*v81 <= 1.0) {
          float v88 = *v81;
        }
      }
      float v89 = v81[1];
      if (v89 <= 1.0) {
        float v90 = v81[1];
      }
      else {
        float v90 = 1.0;
      }
      if (v89 >= 0.0) {
        float v91 = v90;
      }
      else {
        float v91 = 0.0;
      }
      if (v5)
      {
        int v92 = vcvts_n_s32_f32(v87, 0xAuLL);
        int v93 = v92 & ~(v92 >> 31);
        if (v93 >= 0x3FF) {
          int v93 = 1023;
        }
        float v87 = *(float *)(v5 + 4 * (4 * v93))
            + (float)((float)(*(float *)(v5 + 4 * (4 * v93) + 4)
                            + (float)((float)(*(float *)(v5 + 4 * (4 * v93) + 8)
                                            + (float)(*(float *)(v5 + 4 * (4 * v93) + 12)
                                                    * (float)((float)(v87 * 1024.0) - (float)v93)))
                                    * (float)((float)(v87 * 1024.0) - (float)v93)))
                    * (float)((float)(v87 * 1024.0) - (float)v93));
        int v94 = vcvts_n_s32_f32(v88, 0xAuLL);
        int v95 = v94 & ~(v94 >> 31);
        if (v95 >= 0x3FF) {
          int v95 = 1023;
        }
        float v88 = *(float *)(v5 + 4 * (4 * v95))
            + (float)((float)(*(float *)(v5 + 4 * (4 * v95) + 4)
                            + (float)((float)(*(float *)(v5 + 4 * (4 * v95) + 8)
                                            + (float)(*(float *)(v5 + 4 * (4 * v95) + 12)
                                                    * (float)((float)(v88 * 1024.0) - (float)v95)))
                                    * (float)((float)(v88 * 1024.0) - (float)v95)))
                    * (float)((float)(v88 * 1024.0) - (float)v95));
        int v96 = vcvts_n_s32_f32(v91, 0xAuLL);
        int v97 = v96 & ~(v96 >> 31);
        if (v97 >= 0x3FF) {
          int v97 = 1023;
        }
        float v91 = *(float *)(v5 + 4 * (4 * v97))
            + (float)((float)(*(float *)(v5 + 4 * (4 * v97) + 4)
                            + (float)((float)(*(float *)(v5 + 4 * (4 * v97) + 8)
                                            + (float)(*(float *)(v5 + 4 * (4 * v97) + 12)
                                                    * (float)((float)(v91 * 1024.0) - (float)v97)))
                                    * (float)((float)(v91 * 1024.0) - (float)v97)))
                    * (float)((float)(v91 * 1024.0) - (float)v97));
      }
      float v98 = (float)((float)(v245 * v88) + (float)(v87 * v246)) + (float)(v91 * v244);
      if (v98 <= 0.008856) {
        float v99 = *(float *)&dword_1004D3D10 + (float)(v98 * 7.787);
      }
      else {
        float v99 = sub_10026BBE0(v98);
      }
      float v100 = (float)((float)(v242 * v88) + (float)(v87 * v243)) + (float)(v91 * v241);
      if (v100 <= 0.008856) {
        float v101 = *(float *)&dword_1004D3D10 + (float)(v100 * 7.787);
      }
      else {
        float v101 = sub_10026BBE0((float)((float)(v242 * v88) + (float)(v87 * v243)) + (float)(v91 * v241));
      }
      float v102 = (float)((float)(v239 * v88) + (float)(v87 * v240)) + (float)(v91 * v238);
      if (v102 <= 0.008856) {
        float v83 = *(float *)&dword_1004D3D10 + (float)(v102 * 7.787);
      }
      else {
        float v83 = sub_10026BBE0(v102);
      }
      float v84 = (float)(v101 * 116.0) + -16.0;
      if (v100 <= 0.008856) {
        float v84 = v100 * 903.3;
      }
      *(v82 - 1) = v84;
      *long long v82 = (float)(v99 - v101) * 500.0;
      v82[1] = (float)(v101 - v83) * 200.0;
      v80 += 3;
      v81 += v237;
      v82 += 3;
    }
    while (v80 < v6);
  }
}

void sub_10030E470(_Unwind_Exception *a1)
{
}

void sub_10030E488(_Unwind_Exception *a1)
{
}

uint16x8_t sub_10030E4A0(uint64_t a1, uint16x8_t *a2, uint16x8_t *a3, uint16x8_t *a4, uint16x8_t a5, uint16x8_t a6, uint16x8_t a7)
{
  v7.i64[0] = 0x8000800080008;
  v7.i64[1] = 0x8000800080008;
  uint16x8_t v8 = vshlq_u16(a5, v7);
  uint16x8_t v9 = vshlq_u16(a6, v7);
  uint16x8_t v10 = vshlq_u16(a7, v7);
  v11.i64[0] = 0x4000400040004;
  v11.i64[1] = 0x4000400040004;
  v12.i64[0] = 0xF000F000F000FLL;
  v12.i64[1] = 0xF000F000F000FLL;
  uint16x8_t v13 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(a5, v11), v12);
  uint16x8_t v14 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(a6, v11), v12);
  uint16x8_t v15 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(a7, v11), v12);
  v16.i64[0] = 0x18001800180018;
  v16.i64[1] = 0x18001800180018;
  uint16x8_t v17 = (uint16x8_t)vdupq_n_s16(0x318u);
  uint16x8_t v18 = (uint16x8_t)vdupq_n_s16(0x6618u);
  uint16x8_t v19 = (uint16x8_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v17.i8, *(uint16x4_t *)v9.i8), (uint16x4_t)0x18001800180018, *(uint16x4_t *)v8.i8), *(uint16x4_t *)v18.i8, *(uint16x4_t *)v10.i8);
  uint16x8_t v20 = (uint16x8_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v17, v9), v16, v8), v18, v10);
  int8x16_t v21 = (int16x8_t *)(a1 + 2 * v19.u32[0]);
  int16x8_t v23 = *v21;
  int16x8_t v22 = v21[1];
  int16x8_t v24 = v21[2];
  int8x16_t v25 = (int16x8_t *)(a1 + 2 * v19.u32[1]);
  int16x8_t v27 = *v25;
  int16x8_t v26 = v25[1];
  int16x8_t v28 = v25[2];
  uint64_t v29 = v19.u32[3];
  *(void *)&long long v30 = v20.u32[2];
  *((void *)&v30 + 1) = v20.u32[3];
  long long v31 = v30;
  *((void *)&v30 + 1) = v20.u32[1];
  uint64_t v32 = v20.u32[0];
  int8x16_t v33 = (int16x8_t *)(a1 + 2 * v19.u32[2]);
  v20.i64[0] = 0x8000800080008;
  v20.i64[1] = 0x8000800080008;
  int16x8_t v35 = *v33;
  int16x8_t v34 = v33[1];
  int16x8_t v36 = v33[2];
  v19.i64[0] = 0x80008000800080;
  v19.i64[1] = 0x80008000800080;
  uint64_t v37 = *((void *)&v30 + 1);
  uint32x4_t v38 = vmlal_u16(vmull_u16((uint16x4_t)0x80008000800080, *(uint16x4_t *)v14.i8), (uint16x4_t)0x8000800080008, *(uint16x4_t *)v13.i8);
  uint32x4_t v39 = vmlal_high_u16(vmull_high_u16(v19, v14), v20, v13);
  v13.i64[0] = 0x800080008000800;
  v13.i64[1] = 0x800080008000800;
  uint32x4_t v40 = vmlal_u16(v38, (uint16x4_t)0x800080008000800, *(uint16x4_t *)v15.i8);
  uint32x4_t v41 = vmlal_high_u16(v39, v13, v15);
  int16x8_t v42 = *(int16x8_t *)((char *)&unk_1004E7270 + 2 * v40.u32[0]);
  *(void *)&long long v30 = v40.u32[2];
  *((void *)&v30 + 1) = v40.u32[3];
  long long v43 = v30;
  *(void *)&long long v30 = v41.u32[2];
  *((void *)&v30 + 1) = v41.u32[3];
  int16x8_t v44 = *(int16x8_t *)((char *)&unk_1004E7270 + 2 * v40.u32[1]);
  int16x8_t v45 = *(int16x8_t *)((char *)&unk_1004E7270 + 2 * v43);
  int16x8_t v46 = *(int16x8_t *)((char *)&unk_1004E7270 + 2 * *((void *)&v43 + 1));
  int16x8_t v47 = *(int16x8_t *)((char *)&unk_1004E7270 + 2 * v41.u32[0]);
  int16x8_t v48 = *(int16x8_t *)((char *)&unk_1004E7270 + 2 * v41.u32[1]);
  int16x8_t v49 = *(int16x8_t *)((char *)&unk_1004E7270 + 2 * v30);
  uint64_t v50 = a1 + 2 * v29;
  uint64_t v51 = a1 + 2 * v32;
  int16x8_t v52 = *(int16x8_t *)((char *)&unk_1004E7270 + 2 * *((void *)&v30 + 1));
  uint64_t v53 = a1 + 2 * v37;
  uint64_t v54 = a1 + 2 * v31;
  uint64_t v55 = a1 + 2 * *((void *)&v31 + 1);
  int32x4_t v56 = vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v42.i8);
  int32x4_t v57 = vmull_high_s16(v23, v42);
  int32x4_t v58 = vaddq_s32(vuzp1q_s32(v56, v57), vuzp2q_s32(v56, v57));
  int32x4_t v59 = vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v44.i8);
  int32x4_t v60 = vmull_high_s16(v27, v44);
  int32x4_t v61 = vaddq_s32(vuzp1q_s32(v59, v60), vuzp2q_s32(v59, v60));
  int32x4_t v62 = vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v45.i8);
  int32x4_t v63 = vmull_high_s16(v35, v45);
  int32x4_t v64 = vaddq_s32(vuzp1q_s32(v62, v63), vuzp2q_s32(v62, v63));
  int16x8_t v65 = *(int16x8_t *)(v50 + 16);
  int32x4_t v66 = vmull_s16(*(int16x4_t *)v50, *(int16x4_t *)v46.i8);
  int32x4_t v67 = vmull_high_s16(*(int16x8_t *)v50, v46);
  int32x4_t v68 = vaddq_s32(vuzp1q_s32(v66, v67), vuzp2q_s32(v66, v67));
  *(int32x2_t *)v69.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v58, v58), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v61, v61), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)));
  v69.i32[2] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v64, v64), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL)).u32[0];
  v69.i32[3] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v68, v68), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)).u32[0];
  int16x8_t v70 = *(int16x8_t *)(v51 + 16);
  int32x4_t v71 = vmull_s16(*(int16x4_t *)v51, *(int16x4_t *)v47.i8);
  int32x4_t v72 = vmull_high_s16(*(int16x8_t *)v51, v47);
  int32x4_t v73 = vaddq_s32(vuzp1q_s32(v71, v72), vuzp2q_s32(v71, v72));
  int16x8_t v74 = *(int16x8_t *)(v53 + 16);
  int32x4_t v75 = vmull_s16(*(int16x4_t *)v53, *(int16x4_t *)v48.i8);
  int32x4_t v76 = vmull_high_s16(*(int16x8_t *)v53, v48);
  int16x8_t v77 = *(int16x8_t *)(v54 + 16);
  int32x4_t v78 = vaddq_s32(vuzp1q_s32(v75, v76), vuzp2q_s32(v75, v76));
  int16x8_t v79 = *(int16x8_t *)(v55 + 16);
  int32x4_t v80 = vmull_s16(*(int16x4_t *)v54, *(int16x4_t *)v49.i8);
  int32x4_t v81 = vmull_high_s16(*(int16x8_t *)v54, v49);
  int32x4_t v82 = vaddq_s32(vuzp1q_s32(v80, v81), vuzp2q_s32(v80, v81));
  __int32 v83 = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v82, v82), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL)).u32[0];
  int32x4_t v84 = vmull_s16(*(int16x4_t *)v55, *(int16x4_t *)v52.i8);
  int32x4_t v85 = vmull_high_s16(*(int16x8_t *)v55, v52);
  int16x8_t v86 = *(int16x8_t *)(v50 + 32);
  int32x4_t v87 = vaddq_s32(vuzp1q_s32(v84, v85), vuzp2q_s32(v84, v85));
  int16x8_t v88 = *(int16x8_t *)(v51 + 32);
  *(int32x2_t *)v89.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v73, v73), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v78, v78), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL)));
  int16x8_t v90 = *(int16x8_t *)(v53 + 32);
  v89.i32[2] = v83;
  int16x8_t v91 = *(int16x8_t *)(v54 + 32);
  v89.i32[3] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v87, v87), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL)).u32[0];
  int16x8_t v92 = *(int16x8_t *)(v55 + 32);
  *a2 = vqrshrn_high_n_u32(vqrshrn_n_u32(v69, 0xCuLL), v89, 0xCuLL);
  int32x4_t v93 = vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v42.i8);
  int32x4_t v94 = vmull_high_s16(v22, v42);
  int32x4_t v95 = vaddq_s32(vuzp1q_s32(v93, v94), vuzp2q_s32(v93, v94));
  int32x4_t v96 = vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v44.i8);
  int32x4_t v97 = vmull_high_s16(v26, v44);
  int32x4_t v98 = vaddq_s32(vuzp1q_s32(v96, v97), vuzp2q_s32(v96, v97));
  int32x4_t v99 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v45.i8);
  int32x4_t v100 = vmull_high_s16(v34, v45);
  int32x4_t v101 = vaddq_s32(vuzp1q_s32(v99, v100), vuzp2q_s32(v99, v100));
  int32x4_t v102 = vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v46.i8);
  int32x4_t v103 = vmull_high_s16(v65, v46);
  int32x4_t v104 = vaddq_s32(vuzp1q_s32(v102, v103), vuzp2q_s32(v102, v103));
  *(int32x2_t *)v98.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v95, v95), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v98, v98), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL)));
  v98.i32[2] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v101, v101), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL)).u32[0];
  v98.i32[3] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v104, v104), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL)).u32[0];
  int32x4_t v105 = vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v47.i8);
  int32x4_t v106 = vmull_high_s16(v70, v47);
  int32x4_t v107 = vaddq_s32(vuzp1q_s32(v105, v106), vuzp2q_s32(v105, v106));
  int32x4_t v108 = vmull_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v48.i8);
  int32x4_t v109 = vmull_high_s16(v74, v48);
  int32x4_t v110 = vaddq_s32(vuzp1q_s32(v108, v109), vuzp2q_s32(v108, v109));
  int32x4_t v111 = vmull_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v49.i8);
  int32x4_t v112 = vmull_high_s16(v77, v49);
  int32x4_t v113 = vaddq_s32(vuzp1q_s32(v111, v112), vuzp2q_s32(v111, v112));
  int32x4_t v114 = vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v52.i8);
  int32x4_t v115 = vmull_high_s16(v79, v52);
  int32x4_t v116 = vaddq_s32(vuzp1q_s32(v114, v115), vuzp2q_s32(v114, v115));
  *(int32x2_t *)v107.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v107, v107), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v110, v110), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL)));
  v107.i64[1] = __PAIR64__(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v116, v116), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL)).u32[0], vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v113, v113), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL)).u32[0]);
  *a3 = vqrshrn_high_n_u32(vqrshrn_n_u32((uint32x4_t)v98, 0xCuLL), (uint32x4_t)v107, 0xCuLL);
  int32x4_t v117 = vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v42.i8);
  int32x4_t v118 = vmull_high_s16(v24, v42);
  int32x4_t v119 = vaddq_s32(vuzp1q_s32(v117, v118), vuzp2q_s32(v117, v118));
  int32x4_t v120 = vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v44.i8);
  int32x4_t v121 = vmull_high_s16(v28, v44);
  int32x4_t v122 = vaddq_s32(vuzp1q_s32(v120, v121), vuzp2q_s32(v120, v121));
  int32x4_t v123 = vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v45.i8);
  int32x4_t v124 = vmull_high_s16(v36, v45);
  int32x4_t v125 = vaddq_s32(vuzp1q_s32(v123, v124), vuzp2q_s32(v123, v124));
  int32x4_t v126 = vmull_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v46.i8);
  int32x4_t v127 = vmull_high_s16(v86, v46);
  int32x4_t v128 = vaddq_s32(vuzp1q_s32(v126, v127), vuzp2q_s32(v126, v127));
  *(int32x2_t *)v122.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v119, v119), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v122, v122), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL)));
  v122.i64[1] = __PAIR64__(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v128, v128), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL)).u32[0], vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v125, v125), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL)).u32[0]);
  int32x4_t v129 = vmull_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v47.i8);
  int32x4_t v130 = vmull_high_s16(v88, v47);
  int32x4_t v131 = vaddq_s32(vuzp1q_s32(v129, v130), vuzp2q_s32(v129, v130));
  int32x4_t v132 = vmull_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v48.i8);
  int32x4_t v133 = vmull_high_s16(v90, v48);
  int32x4_t v134 = vaddq_s32(vuzp1q_s32(v132, v133), vuzp2q_s32(v132, v133));
  int32x4_t v135 = vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v49.i8);
  int32x4_t v136 = vmull_high_s16(v91, v49);
  int32x4_t v137 = vaddq_s32(vuzp1q_s32(v135, v136), vuzp2q_s32(v135, v136));
  int32x4_t v138 = vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v52.i8);
  int32x4_t v139 = vmull_high_s16(v92, v52);
  int32x4_t v140 = vaddq_s32(vuzp1q_s32(v138, v139), vuzp2q_s32(v138, v139));
  *(int32x2_t *)v131.i8 = vzip1_s32(vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v131, v131), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL)), vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v134, v134), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL)));
  v131.i32[2] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v137, v137), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL)).u32[0];
  v131.i32[3] = vpadd_s32((int32x2_t)*(_OWORD *)&vpaddq_s32(v140, v140), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL)).u32[0];
  uint16x8_t result = vqrshrn_high_n_u32(vqrshrn_n_u32((uint32x4_t)v122, 0xCuLL), (uint32x4_t)v131, 0xCuLL);
  *a4 = result;
  return result;
}

uint64_t sub_10030E9B8(uint64_t result, int a2, int a3, uint64_t a4, int *a5, int *a6, int *a7)
{
  uint16x8_t v7 = (__int16 *)(a4 + 2 * (24 * ((int)result >> 9) + 792 * (a2 >> 9) + 26136 * (a3 >> 9)));
  uint16x8_t v8 = (__int16 *)((char *)&unk_1004E7270
                 + 2
                 * ((result >> 2) & 0x78 | (((a2 >> 5) & 0xF) << 7) & 0xFFFF87FF | (((a3 >> 5) & 0xF) << 11)));
  int v9 = *v8;
  int v10 = v8[1];
  int v11 = v9 * *v7 + v10 * v7[1];
  int v12 = v7[8] * v9 + v7[9] * v10;
  int v13 = v7[16] * v9 + v7[17] * v10;
  int v14 = v8[2];
  int v15 = v11 + v14 * v7[2];
  int v16 = v12 + v7[10] * v14;
  int v17 = v13 + v7[18] * v14;
  int v18 = v8[3];
  int v19 = v15 + v18 * v7[3];
  int v20 = v16 + v7[11] * v18;
  int v21 = v17 + v7[19] * v18;
  int v22 = v8[4];
  int v23 = v19 + v22 * v7[4];
  int v24 = v20 + v7[12] * v22;
  int v25 = v21 + v7[20] * v22;
  int v26 = v8[5];
  int v27 = v23 + v26 * v7[5];
  int v28 = v24 + v7[13] * v26;
  int v29 = v25 + v7[21] * v26;
  int v30 = v8[6];
  LODWORD(v8) = v8[7];
  int v31 = v27 + v30 * v7[6] + v8 * v7[7];
  int v32 = v28 + v7[14] * v30 + v7[15] * v8;
  LODWORD(v7) = v29 + v7[22] * v30 + v7[23] * v8;
  *a5 = v31;
  *a6 = v32;
  *a7 = (int)v7;
  *a5 = (*a5 + 2048) >> 12;
  *a6 = (*a6 + 2048) >> 12;
  *a7 = (*a7 + 2048) >> 12;
  return result;
}

void sub_10030EB28(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_10030EB60(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v9, &off_100498ED8);
  int v6 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v7 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v6;
    uint64_t v8 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v6;
    do
    {
      sub_10030EC28(*(int **)(a1 + 48), v8, v7, *(_DWORD *)(a1 + 40), v4, v5);
      ++v6;
      v8 += *(void *)(a1 + 16);
      v7 += *(void *)(a1 + 32);
    }
    while (v6 < a2[1]);
  }
  if (v10) {
    sub_1002D6888(v9);
  }
}

void sub_10030EC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10030EC28(int *a1, uint64_t a2, uint64_t a3, int a4, uint16x8_t a5, float32x4_t a6)
{
  int v6 = a4;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  if (!*((unsigned char *)a1 + 168))
  {
    if (a4 < 1) {
      return;
    }
    int v11 = 0;
    uint64_t v12 = *a1;
    uint64_t v13 = 8 * v12;
    int32x4_t v134 = (float32x2_t *)(a1 + 1);
    while (1)
    {
      if (v6 - v11 >= 256) {
        int v14 = 256;
      }
      else {
        int v14 = v6 - v11;
      }
      int v136 = 3 * v14;
      unint64_t v15 = (3 * v14 - 24);
      int v135 = v11;
      if (3 * v14 - 24 < 0)
      {
        uint64_t v23 = 0;
        if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3D38, memory_order_acquire)) {
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v16 = 0;
        float32x4_t v17 = *((float32x4_t *)a1 + 5);
        int v18 = v139;
        do
        {
          if (v12 == 3) {
            *(int8x8x3_t *)v144.val[0].i8 = vld3_s8((const char *)v8);
          }
          else {
            int8x8x4_t v144 = vld4_s8((const char *)v8);
          }
          uint16x8_t v19 = vmovl_u8((uint8x8_t)v144.val[0]);
          uint16x8_t v20 = vmovl_u8((uint8x8_t)v144.val[1]);
          uint16x8_t v21 = vmovl_u8((uint8x8_t)v144.val[2]);
          v141.val[0] = vmulq_f32(v17, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19.i8)));
          v141.val[1] = vmulq_f32(v17, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v20.i8)));
          v141.val[2] = vmulq_f32(v17, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v21.i8)));
          int v22 = v18;
          vst3q_f32(v22, v141);
          v22 += 12;
          v141.val[0] = vmulq_f32(v17, vcvtq_f32_u32(vmovl_high_u16(v19)));
          v141.val[1] = vmulq_f32(v17, vcvtq_f32_u32(vmovl_high_u16(v20)));
          a6 = vcvtq_f32_u32(vmovl_high_u16(v21));
          v141.val[2] = vmulq_f32(v17, a6);
          vst3q_f32(v22, v141);
          v16 += 24;
          v8 += v13;
          v18 += 24;
        }
        while (v16 <= v15);
        uint64_t v23 = v16;
        if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3D38, memory_order_acquire)) {
          goto LABEL_20;
        }
      }
      int v132 = v14;
      int v73 = __cxa_guard_acquire(&qword_1004D3D38);
      int v14 = v132;
      if (v73)
      {
        int v138 = 1065353216;
        sub_1002C70C8(&v138, (unsigned int *)&dword_1004F729C, &dword_1004D3D30);
        __cxa_guard_release(&qword_1004D3D38);
        int v6 = a4;
        int v14 = v132;
      }
LABEL_20:
      if ((int)v23 < v136)
      {
        float v24 = *(float *)&dword_1004D3D30;
        int v25 = &v139[v23 + 1];
        do
        {
          a6.i8[0] = *(unsigned char *)v8;
          *(float *)&unsigned int v26 = v24 * (float)a6.u32[0];
          *(v25 - 1) = *(float *)&v26;
          LOBYTE(v26) = *(unsigned char *)(v8 + 1);
          *(float *)&unsigned int v27 = v24 * (float)v26;
          float *v25 = *(float *)&v27;
          LOBYTE(v27) = *(unsigned char *)(v8 + 2);
          a6.f32[0] = v24 * (float)v27;
          v25[1] = a6.f32[0];
          v23 += 3;
          v8 += v12;
          v25 += 3;
        }
        while (v23 < v136);
      }
      sub_10030F8A0(v134, v139, v139, v14);
      if ((v15 & 0x80000000) == 0)
      {
        uint64_t v28 = 0;
        int v29 = v139;
        do
        {
          int v30 = v29;
          float32x4x3_t v143 = vld3q_f32(v30);
          v30 += 12;
          float32x4x3_t v142 = vld3q_f32(v30);
          float32x4_t v31 = *((float32x4_t *)a1 + 4);
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
          {
            float32x4x3_t v126 = v142;
            float32x4x3_t v120 = v143;
            float32x4_t v114 = v31;
            int v49 = __cxa_guard_acquire(qword_1004D2DA0);
            float32x4_t v31 = v114;
            float32x4x3_t v143 = v120;
            float32x4x3_t v142 = v126;
            if (v49)
            {
              *(void *)&long long v50 = 0x3F0000003F000000;
              *((void *)&v50 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D90 = v50;
              __cxa_guard_release(qword_1004D2DA0);
              float32x4_t v31 = v114;
              float32x4x3_t v143 = v120;
              float32x4x3_t v142 = v126;
            }
          }
          float32x4_t v32 = (float32x4_t)xmmword_1004D2D90;
          float32x4_t v33 = *((float32x4_t *)a1 + 4);
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
          {
            float32x4x3_t v127 = v142;
            float32x4x3_t v121 = v143;
            float32x4_t v109 = v33;
            float32x4_t v115 = v31;
            float32x4_t v104 = v32;
            int v51 = __cxa_guard_acquire(qword_1004D2DA0);
            float32x4_t v32 = v104;
            float32x4_t v33 = v109;
            float32x4_t v31 = v115;
            float32x4x3_t v143 = v121;
            float32x4x3_t v142 = v127;
            if (v51)
            {
              *(void *)&long long v52 = 0x3F0000003F000000;
              *((void *)&v52 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D90 = v52;
              __cxa_guard_release(qword_1004D2DA0);
              float32x4_t v32 = v104;
              float32x4_t v33 = v109;
              float32x4_t v31 = v115;
              float32x4x3_t v143 = v121;
              float32x4x3_t v142 = v127;
            }
          }
          float32x4_t v34 = (float32x4_t)xmmword_1004D2D90;
          float32x4_t v35 = *((float32x4_t *)a1 + 6);
          float32x4_t v36 = *((float32x4_t *)a1 + 7);
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
          {
            float32x4x3_t v128 = v142;
            float32x4x3_t v122 = v143;
            float32x4_t v110 = v33;
            float32x4_t v116 = v31;
            float32x4_t v100 = v35;
            float32x4_t v105 = v32;
            float32x4_t v92 = v34;
            float32x4_t v96 = v36;
            int v53 = __cxa_guard_acquire(qword_1004D2DA0);
            float32x4_t v34 = v92;
            float32x4_t v36 = v96;
            float32x4_t v35 = v100;
            float32x4_t v32 = v105;
            float32x4_t v33 = v110;
            float32x4_t v31 = v116;
            float32x4x3_t v143 = v122;
            float32x4x3_t v142 = v128;
            if (v53)
            {
              *(void *)&long long v54 = 0x3F0000003F000000;
              *((void *)&v54 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D90 = v54;
              __cxa_guard_release(qword_1004D2DA0);
              float32x4_t v34 = v92;
              float32x4_t v36 = v96;
              float32x4_t v35 = v100;
              float32x4_t v32 = v105;
              float32x4_t v33 = v110;
              float32x4_t v31 = v116;
              float32x4x3_t v143 = v122;
              float32x4x3_t v142 = v128;
            }
          }
          float32x4_t v37 = (float32x4_t)xmmword_1004D2D90;
          float32x4_t v38 = *((float32x4_t *)a1 + 6);
          float32x4_t v39 = *((float32x4_t *)a1 + 7);
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
          {
            float32x4x3_t v129 = v142;
            float32x4x3_t v123 = v143;
            float32x4_t v111 = v33;
            float32x4_t v117 = v31;
            float32x4_t v101 = v35;
            float32x4_t v106 = v32;
            float32x4_t v93 = v34;
            float32x4_t v97 = v36;
            float32x4_t v86 = v39;
            float32x4_t v89 = v38;
            float32x4_t v83 = v37;
            int v55 = __cxa_guard_acquire(qword_1004D2DA0);
            float32x4_t v37 = v83;
            float32x4_t v39 = v86;
            float32x4_t v38 = v89;
            float32x4_t v34 = v93;
            float32x4_t v36 = v97;
            float32x4_t v35 = v101;
            float32x4_t v32 = v106;
            float32x4_t v33 = v111;
            float32x4_t v31 = v117;
            float32x4x3_t v143 = v123;
            float32x4x3_t v142 = v129;
            if (v55)
            {
              *(void *)&long long v56 = 0x3F0000003F000000;
              *((void *)&v56 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D90 = v56;
              __cxa_guard_release(qword_1004D2DA0);
              float32x4_t v37 = v83;
              float32x4_t v39 = v86;
              float32x4_t v38 = v89;
              float32x4_t v34 = v93;
              float32x4_t v36 = v97;
              float32x4_t v35 = v101;
              float32x4_t v32 = v106;
              float32x4_t v33 = v111;
              float32x4_t v31 = v117;
              float32x4x3_t v143 = v123;
              float32x4x3_t v142 = v129;
            }
          }
          float32x4_t v40 = (float32x4_t)xmmword_1004D2D90;
          float32x4_t v41 = *((float32x4_t *)a1 + 8);
          float32x4_t v42 = *((float32x4_t *)a1 + 9);
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
          {
            float32x4x3_t v130 = v142;
            float32x4x3_t v124 = v143;
            float32x4_t v112 = v33;
            float32x4_t v118 = v31;
            float32x4_t v102 = v35;
            float32x4_t v107 = v32;
            float32x4_t v94 = v34;
            float32x4_t v98 = v36;
            float32x4_t v87 = v39;
            float32x4_t v90 = v38;
            float32x4_t v81 = v41;
            float32x4_t v84 = v37;
            float32x4_t v77 = v40;
            float32x4_t v79 = v42;
            int v57 = __cxa_guard_acquire(qword_1004D2DA0);
            float32x4_t v40 = v77;
            float32x4_t v42 = v79;
            float32x4_t v41 = v81;
            float32x4_t v37 = v84;
            float32x4_t v39 = v87;
            float32x4_t v38 = v90;
            float32x4_t v34 = v94;
            float32x4_t v36 = v98;
            float32x4_t v35 = v102;
            float32x4_t v32 = v107;
            float32x4_t v33 = v112;
            float32x4_t v31 = v118;
            float32x4x3_t v143 = v124;
            float32x4x3_t v142 = v130;
            if (v57)
            {
              *(void *)&long long v58 = 0x3F0000003F000000;
              *((void *)&v58 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D90 = v58;
              __cxa_guard_release(qword_1004D2DA0);
              float32x4_t v40 = v77;
              float32x4_t v42 = v79;
              float32x4_t v41 = v81;
              float32x4_t v37 = v84;
              float32x4_t v39 = v87;
              float32x4_t v38 = v90;
              float32x4_t v34 = v94;
              float32x4_t v36 = v98;
              float32x4_t v35 = v102;
              float32x4_t v32 = v107;
              float32x4_t v33 = v112;
              float32x4_t v31 = v118;
              float32x4x3_t v143 = v124;
              float32x4x3_t v142 = v130;
            }
          }
          float32x4_t v43 = (float32x4_t)xmmword_1004D2D90;
          float32x4_t v44 = *((float32x4_t *)a1 + 8);
          float32x4_t v45 = *((float32x4_t *)a1 + 9);
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2DA0, memory_order_acquire) & 1) == 0)
          {
            float32x4x3_t v131 = v142;
            float32x4x3_t v125 = v143;
            float32x4_t v113 = v33;
            float32x4_t v119 = v31;
            float32x4_t v103 = v35;
            float32x4_t v108 = v32;
            float32x4_t v95 = v34;
            float32x4_t v99 = v36;
            float32x4_t v88 = v39;
            float32x4_t v91 = v38;
            float32x4_t v82 = v41;
            float32x4_t v85 = v37;
            float32x4_t v78 = v40;
            float32x4_t v80 = v42;
            float32x4_t v75 = v45;
            float32x4_t v76 = v44;
            float32x4_t v74 = v43;
            int v59 = __cxa_guard_acquire(qword_1004D2DA0);
            float32x4_t v43 = v74;
            float32x4_t v45 = v75;
            float32x4_t v44 = v76;
            float32x4_t v40 = v78;
            float32x4_t v42 = v80;
            float32x4_t v41 = v82;
            float32x4_t v37 = v85;
            float32x4_t v39 = v88;
            float32x4_t v38 = v91;
            float32x4_t v34 = v95;
            float32x4_t v36 = v99;
            float32x4_t v35 = v103;
            float32x4_t v32 = v108;
            float32x4_t v33 = v113;
            float32x4_t v31 = v119;
            float32x4x3_t v143 = v125;
            float32x4x3_t v142 = v131;
            if (v59)
            {
              *(void *)&long long v60 = 0x3F0000003F000000;
              *((void *)&v60 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D90 = v60;
              __cxa_guard_release(qword_1004D2DA0);
              float32x4_t v43 = v74;
              float32x4_t v45 = v75;
              float32x4_t v44 = v76;
              float32x4_t v40 = v78;
              float32x4_t v42 = v80;
              float32x4_t v41 = v82;
              float32x4_t v37 = v85;
              float32x4_t v39 = v88;
              float32x4_t v38 = v91;
              float32x4_t v34 = v95;
              float32x4_t v36 = v99;
              float32x4_t v35 = v103;
              float32x4_t v32 = v108;
              float32x4_t v33 = v113;
              float32x4_t v31 = v119;
              float32x4x3_t v143 = v125;
              float32x4x3_t v142 = v131;
            }
          }
          uint8x8_t v46 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vmulq_f32(v143.val[0], v31), v32))), vcvtq_u32_f32(vaddq_f32(vmulq_f32(v142.val[0], v33), v34))));
          *(uint8x8_t *)a6.f32 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmulq_f32(v143.val[1], v35), v36), v37))), vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmulq_f32(v142.val[1], v38), v39), v40))));
          uint8x8_t v47 = vqmovn_u16(vqmovn_high_u32(vqmovn_u32(vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmulq_f32(v143.val[2], v41), v42), v43))), vcvtq_u32_f32(vaddq_f32(vaddq_f32(vmulq_f32(v142.val[2], v44), v45), (float32x4_t)xmmword_1004D2D90))));
          int16x8_t v48 = (char *)(v7 + v28);
          vst3_s8(v48, *(int8x8x3_t *)((char *)&a6 - 8));
          v28 += 24;
          v29 += 24;
        }
        while ((int)v15 >= (int)v28);
        uint64_t v61 = v28;
        int v6 = a4;
        int v62 = v136;
        if (atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3D48, memory_order_acquire)) {
          goto LABEL_48;
        }
LABEL_64:
        if (__cxa_guard_acquire(&qword_1004D3D48))
        {
          sub_1002C6CF0((unsigned int *)&v138, 100);
          sub_1002C70C8(&dword_1004F729C, (unsigned int *)&v138, &dword_1004D3D40);
          __cxa_guard_release(&qword_1004D3D48);
          int v6 = a4;
          int v62 = v136;
        }
        goto LABEL_48;
      }
      uint64_t v61 = 0;
      int v62 = v136;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3D48, memory_order_acquire) & 1) == 0) {
        goto LABEL_64;
      }
LABEL_48:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3D58, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1004D3D58))
      {
        sub_1002C70C8(&dword_1004F729C, &dword_1004F7280, &dword_1004D3D50);
        __cxa_guard_release(&qword_1004D3D58);
        int v6 = a4;
        int v62 = v136;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3D68, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1004D3D68))
      {
        sub_1002C70C8(&dword_1004F729C, &dword_1004F728C, &dword_1004D3D60);
        __cxa_guard_release(&qword_1004D3D68);
        int v6 = a4;
        int v62 = v136;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3D78, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1004D3D78))
      {
        unsigned int v137 = dword_1004F7278 ^ 0x80000000;
        sub_1002C6E7C((int *)&v137, &dword_1004F729C, &v138);
        sub_1002C70C8(&v138, &dword_1004F7280, &dword_1004D3D70);
        __cxa_guard_release(&qword_1004D3D78);
        int v6 = a4;
        int v62 = v136;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3D88, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1004D3D88))
      {
        unsigned int v137 = dword_1004F7284 ^ 0x80000000;
        sub_1002C6E7C((int *)&v137, &dword_1004F729C, &v138);
        sub_1002C70C8(&v138, &dword_1004F728C, &dword_1004D3D80);
        __cxa_guard_release(&qword_1004D3D88);
        int v6 = a4;
        int v62 = v136;
      }
      if ((int)v61 < v62)
      {
        int32x4_t v63 = &v139[v61 + 1];
        do
        {
          float v64 = *v63;
          float v65 = rintf(*(v63 - 1) * *(float *)&dword_1004D3D40);
          int v66 = (uint64_t)v65 & ~((int)(uint64_t)v65 >> 31);
          if (v66 >= 255) {
            LOBYTE(v66) = -1;
          }
          uint64_t v67 = v7 + v61;
          *(unsigned char *)(v7 + v61) = v66;
          float v68 = v63[1];
          float v69 = rintf(*(float *)&dword_1004D3D70 + (float)(v64 * *(float *)&dword_1004D3D50));
          int v70 = (uint64_t)v69 & ~((int)(uint64_t)v69 >> 31);
          if (v70 >= 255) {
            LOBYTE(v70) = -1;
          }
          *(unsigned char *)(v67 + 1) = v70;
          a6.i32[0] = dword_1004D3D80;
          float v71 = rintf(*(float *)&dword_1004D3D80 + (float)(v68 * *(float *)&dword_1004D3D60));
          int v72 = (uint64_t)v71 & ~((int)(uint64_t)v71 >> 31);
          if (v72 >= 255) {
            LOBYTE(v72) = -1;
          }
          *(unsigned char *)(v67 + 2) = v72;
          v61 += 3;
          v63 += 3;
        }
        while (v62 > (int)v61);
      }
      int v11 = v135 + 256;
      v7 += 768;
      uint64_t v13 = 8 * v12;
      if (v135 + 256 >= v6) {
        return;
      }
    }
  }
  int v10 = a1 + 14;

  sub_10030F670(v10, a2, a3, a4, a5, (uint16x8_t)a6);
}

void sub_10030F5DC(_Unwind_Exception *a1)
{
}

void sub_10030F5F4(_Unwind_Exception *a1)
{
}

void sub_10030F60C(_Unwind_Exception *a1)
{
}

void sub_10030F624(_Unwind_Exception *a1)
{
}

void sub_10030F63C(_Unwind_Exception *a1)
{
}

void sub_10030F654(_Unwind_Exception *a1)
{
}

void sub_10030F670(int *a1, uint64_t a2, uint64_t a3, int a4, uint16x8_t a5, uint16x8_t a6)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  int v10 = 3 * a4;
  if (a4 < 17)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = qword_1004F73D8;
    do
    {
      if (v8 == 3) {
        *(int8x16x3_t *)v36.val[0].i8 = vld3q_s8((const char *)a2);
      }
      else {
        int8x16x4_t v36 = vld4q_s8((const char *)a2);
      }
      a5.i32[0] = 0;
      a6.i32[0] = v9;
      int8x16_t v13 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)a6, (int32x4_t)a5), 0);
      uint8x16_t v14 = (uint8x16_t)vbslq_s8(v13, v36.val[2], v36.val[0]);
      uint8x16_t v15 = (uint8x16_t)vbslq_s8(v13, v36.val[0], v36.val[2]);
      uint16x8_t v27 = vshll_high_n_u8((uint8x16_t)v36.val[1], 6uLL);
      uint16x8_t v28 = vshll_high_n_u8(v15, 6uLL);
      uint16x8_t v26 = vshll_high_n_u8(v14, 6uLL);
      sub_10030E4A0(v12, &v34, &v33, &v32, vshll_n_u8(*(uint8x8_t *)v15.i8, 6uLL), vshll_n_u8(*(uint8x8_t *)v36.val[1].i8, 6uLL), vshll_n_u8(*(uint8x8_t *)v14.i8, 6uLL));
      sub_10030E4A0(v12, &v31, &v30, &v29, v28, v27, v26);
      v16.i64[0] = 0x5000500050005;
      v16.i64[1] = 0x5000500050005;
      a5 = vshlq_u16(v34, v16);
      a6 = vshlq_u16(v31, v16);
      v35.val[0] = (int8x16_t)vqmovn_high_u16(vqmovn_u16(a5), a6);
      v35.val[1] = (int8x16_t)vqmovn_high_u16(vqmovn_u16(vshlq_u16(v33, v16)), vshlq_u16(v30, v16));
      v35.val[2] = (int8x16_t)vqmovn_high_u16(vqmovn_u16(vshlq_u16(v32, v16)), vshlq_u16(v29, v16));
      float32x4_t v17 = (char *)(a3 + v11);
      vst3q_s8(v17, v35);
      v11 += 48;
      a2 += 16 * v8;
    }
    while (v11 < v10 - 48);
  }
  if ((int)v11 < v10)
  {
    uint64_t v18 = qword_1004F73D8;
    uint64_t v11 = v11;
    do
    {
      int v19 = *(unsigned __int8 *)(a2 + 1);
      int v20 = *(unsigned __int8 *)(a2 + (v9 ^ 2));
      uint64_t v21 = *(unsigned __int8 *)(a2 + v9) << 6;
      v34.i32[0] = 0;
      v33.i32[0] = 0;
      v32.i32[0] = 0;
      sub_10030E9B8(v21, v19 << 6, v20 << 6, v18, v34.i32, v33.i32, v32.i32);
      __int32 v22 = (v34.i32[0] / 64) & ~((v34.i32[0] + (v34.i32[0] < 0 ? 0x3F : 0)) >> 31);
      if (v22 >= 255) {
        LOBYTE(v22) = -1;
      }
      uint64_t v23 = a3 + v11;
      *(unsigned char *)(a3 + v11) = v22;
      __int32 v24 = (v33.i32[0] / 64) & ~((v33.i32[0] + (v33.i32[0] < 0 ? 0x3F : 0)) >> 31);
      if (v24 >= 255) {
        LOBYTE(v24) = -1;
      }
      *(unsigned char *)(v23 + 1) = v24;
      __int32 v25 = (v32.i32[0] / 64) & ~((v32.i32[0] + (v32.i32[0] < 0 ? 0x3F : 0)) >> 31);
      if (v25 >= 255) {
        LOBYTE(v25) = -1;
      }
      *(unsigned char *)(v23 + 2) = v25;
      v11 += 3;
      a2 += v8;
    }
    while (v11 < v10);
  }
}

float32x2_t *sub_10030F8A0(float32x2_t *result, const float *a2, float *a3, int a4)
{
  uint64_t v4 = result->i32[0];
  if (result[6].i8[0]) {
    uint64_t v5 = qword_1004F7318;
  }
  else {
    uint64_t v5 = 0;
  }
  _S2 = result[1].i32[1];
  _S5 = result[3].i32[0];
  _S16 = result[4].i32[1];
  int v9 = 3 * a4;
  if (v4 == 3)
  {
    if (a4 >= 4)
    {
      uint64_t v10 = 0;
      uint64_t v11 = (const float *)&dword_1004F7274;
      float32x4_t v12 = vld1q_dup_f32(v11);
      uint64_t v13 = qword_1004F7310;
      __asm { FMOV            V19.4S, #1.0 }
      float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x447FC000u);
      float32x4_t v20 = (float32x4_t)vdupq_n_s32(0x42E80000u);
      __asm
      {
        FMOV            V22.4S, #-16.0
        FMOV            V23.4S, #15.0
        FMOV            V24.4S, #3.0
      }
      v24.i64[0] = 0x3400000034000000;
      v24.i64[1] = 0x3400000034000000;
      float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x42500000u);
      __asm { FMOV            V27.4S, #2.25 }
      uint16x8_t v27 = a3;
      do
      {
        float32x4x3_t v226 = vld3q_f32(a2);
        float32x4_t v53 = vminq_f32(vmaxq_f32(v226.val[0], (float32x4_t)0), _Q19);
        float32x4_t v54 = vminq_f32(vmaxq_f32(v226.val[1], (float32x4_t)0), _Q19);
        float32x4_t v55 = vminq_f32(vmaxq_f32(v226.val[2], (float32x4_t)0), _Q19);
        if (v5)
        {
          float32x4_t v56 = (float32x4_t)vdupq_n_s32(0x44800000u);
          float32x4_t v57 = vmulq_f32(v53, v56);
          float32x4_t v58 = vmulq_f32(v54, v56);
          float32x4_t v59 = vmulq_f32(v55, v56);
          int32x4_t v60 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v57, (float32x4_t)0), v19));
          float32x4_t v61 = vsubq_f32(v57, vcvtq_f32_s32(v60));
          int32x4_t v62 = vshlq_n_s32(v60, 2uLL);
          int32x4_t v63 = *(int32x4_t *)(v5 + 4 * v62.i32[0]);
          int32x4_t v64 = *(int32x4_t *)(v5 + 4 * v62.i32[1]);
          int32x4_t v65 = *(int32x4_t *)(v5 + 4 * v62.i32[2]);
          int32x4_t v66 = *(int32x4_t *)(v5 + 4 * v62.i32[3]);
          float32x4_t v67 = (float32x4_t)vtrn1q_s32(v63, v64);
          float32x4_t v68 = (float32x4_t)vtrn2q_s32(v63, v64);
          int64x2_t v69 = (int64x2_t)vtrn1q_s32(v65, v66);
          float32x4_t v70 = (float32x4_t)vzip2q_s64((int64x2_t)v67, v69);
          v67.i64[1] = v69.i64[0];
          int64x2_t v71 = (int64x2_t)vtrn2q_s32(v65, v66);
          float32x4_t v72 = (float32x4_t)vzip2q_s64((int64x2_t)v68, v71);
          v68.i64[1] = v71.i64[0];
          float32x4_t v53 = vmlaq_f32(v67, v61, vmlaq_f32(v68, v61, vmlaq_f32(v70, v61, v72)));
          int32x4_t v73 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v58, (float32x4_t)0), v19));
          float32x4_t v74 = vcvtq_f32_s32(v73);
          int32x4_t v75 = vshlq_n_s32(v73, 2uLL);
          *(void *)&long long v76 = v75.i32[2];
          *((void *)&v76 + 1) = v75.i32[3];
          long long v77 = v76;
          *((void *)&v76 + 1) = v75.i32[1];
          int32x4_t v78 = *(int32x4_t *)(v5 + 4 * v75.i32[0]);
          int32x4_t v79 = *(int32x4_t *)(v5 + 4 * *((void *)&v76 + 1));
          uint64_t v80 = *((void *)&v77 + 1);
          int32x4_t v81 = *(int32x4_t *)(v5 + 4 * v77);
          float32x4_t v82 = vsubq_f32(v58, v74);
          float32x4_t v83 = *(float32x4_t *)(v5 + 4 * v80);
          int64x2_t v84 = (int64x2_t)vtrn1q_s32(v78, v79);
          float32x4_t v85 = (float32x4_t)vtrn2q_s32(v78, v79);
          int64x2_t v86 = (int64x2_t)vtrn1q_s32(v81, (int32x4_t)v83);
          int64x2_t v87 = (int64x2_t)vtrn2q_s32(v81, (int32x4_t)v83);
          float32x4_t v88 = (float32x4_t)vzip2q_s64(v84, v86);
          v83.i64[0] = v84.i64[0];
          v83.i64[1] = v86.i64[0];
          float32x4_t v89 = (float32x4_t)vzip2q_s64((int64x2_t)v85, v87);
          v85.i64[1] = v87.i64[0];
          float32x4_t v90 = vmlaq_f32(v85, v82, vmlaq_f32(v88, v82, v89));
          int32x4_t v91 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v59, (float32x4_t)0), v19));
          int32x4_t v92 = vshlq_n_s32(v91, 2uLL);
          *(void *)&long long v76 = v92.i32[2];
          *((void *)&v76 + 1) = v92.i32[3];
          long long v93 = v76;
          *((void *)&v76 + 1) = v92.i32[1];
          int32x4_t v94 = *(int32x4_t *)(v5 + 4 * v92.i32[0]);
          int32x4_t v95 = *(int32x4_t *)(v5 + 4 * *((void *)&v76 + 1));
          uint64_t v96 = *((void *)&v93 + 1);
          int32x4_t v97 = *(int32x4_t *)(v5 + 4 * v93);
          float32x4_t v54 = vmlaq_f32(v83, v82, v90);
          float32x4_t v98 = vsubq_f32(v59, vcvtq_f32_s32(v91));
          float32x4_t v99 = *(float32x4_t *)(v5 + 4 * v96);
          int64x2_t v100 = (int64x2_t)vtrn1q_s32(v94, v95);
          float32x4_t v101 = (float32x4_t)vtrn2q_s32(v94, v95);
          int64x2_t v102 = (int64x2_t)vtrn1q_s32(v97, (int32x4_t)v99);
          int64x2_t v103 = (int64x2_t)vtrn2q_s32(v97, (int32x4_t)v99);
          float32x4_t v104 = (float32x4_t)vzip2q_s64(v100, v102);
          v99.i64[0] = v100.i64[0];
          v99.i64[1] = v102.i64[0];
          float32x4_t v105 = (float32x4_t)vzip2q_s64((int64x2_t)v101, v103);
          v101.i64[1] = v103.i64[0];
          float32x4_t v55 = vmlaq_f32(v99, v98, vmlaq_f32(v101, v98, vmlaq_f32(v104, v98, v105)));
        }
        float32x4_t v28 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v53, result->f32[1]), v54, result[1].f32[0]), v55, result[1].f32[1]);
        float32x4_t v29 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v53, result[2].f32[0]), v54, result[2].f32[1]), v55, result[3].f32[0]);
        float32x4_t v30 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v53, result[3].f32[1]), v54, result[4].f32[0]), v55, result[4].f32[1]);
        float32x4_t v31 = vmulq_f32(v29, v12);
        int32x4_t v32 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v31, (float32x4_t)0), v19));
        int32x4_t v33 = vshlq_n_s32(v32, 2uLL);
        *(void *)&long long v34 = v33.i32[2];
        *((void *)&v34 + 1) = v33.i32[3];
        long long v35 = v34;
        *((void *)&v34 + 1) = v33.i32[1];
        int32x4_t v36 = *(int32x4_t *)(v13 + 4 * v33.i32[0]);
        int32x4_t v37 = *(int32x4_t *)(v13 + 4 * *((void *)&v34 + 1));
        uint64_t v38 = *((void *)&v35 + 1);
        int32x4_t v39 = *(int32x4_t *)(v13 + 4 * v35);
        float32x4_t v40 = vsubq_f32(v31, vcvtq_f32_s32(v32));
        int32x4_t v41 = *(int32x4_t *)(v13 + 4 * v38);
        float32x4_t v42 = (float32x4_t)vtrn1q_s32(v36, v37);
        float32x4_t v43 = (float32x4_t)vtrn2q_s32(v36, v37);
        int64x2_t v44 = (int64x2_t)vtrn1q_s32(v39, v41);
        int64x2_t v45 = (int64x2_t)vtrn2q_s32(v39, v41);
        float32x4_t v46 = (float32x4_t)vzip2q_s64((int64x2_t)v42, v44);
        v42.i64[1] = v44.i64[0];
        float32x4_t v47 = (float32x4_t)vzip2q_s64((int64x2_t)v43, v45);
        v43.i64[1] = v45.i64[0];
        v224.val[0] = vmlaq_f32(_Q22, v20, vmlaq_f32(v42, v40, vmlaq_f32(v43, v40, vmlaq_f32(v46, v40, v47))));
        float32x4_t v48 = vmaxq_f32(vmlaq_f32(vmlaq_f32(v28, _Q23, v29), _Q24, v30), v24);
        float32x4_t v49 = vrecpeq_f32(v48);
        float32x4_t v50 = vmulq_f32(v49, vrecpsq_f32(v48, v49));
        float32x4_t v51 = vmulq_f32(vmulq_f32(vrecpsq_f32(v48, v50), v50), v25);
        v50.f32[0] = -result[5].f32[0];
        float32x4_t v52 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 0), v51, v28);
        v224.val[1] = vmulq_f32(v224.val[0], v52);
        v52.f32[0] = -result[5].f32[1];
        v224.val[2] = vmulq_f32(v224.val[0], vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0), v51, vmulq_f32(v29, _Q27)));
        vst3q_f32(v27, v224);
        v27 += 12;
        v10 += 12;
        a2 += 12;
      }
      while (v10 <= v9 - 12);
LABEL_12:
      if ((int)v10 >= v9) {
        return result;
      }
      goto LABEL_19;
    }
LABEL_11:
    LODWORD(v10) = 0;
    goto LABEL_12;
  }
  if (a4 < 4) {
    goto LABEL_11;
  }
  uint64_t v10 = 0;
  float32x4_t v106 = (const float *)&dword_1004F7274;
  float32x4_t v107 = vld1q_dup_f32(v106);
  uint64_t v108 = qword_1004F7310;
  __asm { FMOV            V19.4S, #1.0 }
  float32x4_t v110 = (float32x4_t)vdupq_n_s32(0x447FC000u);
  float32x4_t v111 = (float32x4_t)vdupq_n_s32(0x42E80000u);
  __asm
  {
    FMOV            V22.4S, #-16.0
    FMOV            V23.4S, #15.0
    FMOV            V24.4S, #3.0
  }
  v115.i64[0] = 0x3400000034000000;
  v115.i64[1] = 0x3400000034000000;
  float32x4_t v116 = (float32x4_t)vdupq_n_s32(0x42500000u);
  __asm { FMOV            V27.4S, #2.25 }
  float32x4_t v118 = a3;
  do
  {
    float32x4x4_t v227 = vld4q_f32(a2);
    float32x4_t v144 = vminq_f32(vmaxq_f32(v227.val[0], (float32x4_t)0), _Q19);
    float32x4_t v145 = vminq_f32(vmaxq_f32(v227.val[1], (float32x4_t)0), _Q19);
    float32x4_t v146 = vminq_f32(vmaxq_f32(v227.val[2], (float32x4_t)0), _Q19);
    if (v5)
    {
      float32x4_t v147 = (float32x4_t)vdupq_n_s32(0x44800000u);
      float32x4_t v148 = vmulq_f32(v144, v147);
      float32x4_t v149 = vmulq_f32(v145, v147);
      float32x4_t v150 = vmulq_f32(v146, v147);
      int32x4_t v151 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v148, (float32x4_t)0), v110));
      float32x4_t v152 = vsubq_f32(v148, vcvtq_f32_s32(v151));
      int32x4_t v153 = vshlq_n_s32(v151, 2uLL);
      int32x4_t v154 = *(int32x4_t *)(v5 + 4 * v153.i32[0]);
      int32x4_t v155 = *(int32x4_t *)(v5 + 4 * v153.i32[1]);
      int32x4_t v156 = *(int32x4_t *)(v5 + 4 * v153.i32[2]);
      int32x4_t v157 = *(int32x4_t *)(v5 + 4 * v153.i32[3]);
      float32x4_t v158 = (float32x4_t)vtrn1q_s32(v154, v155);
      float32x4_t v159 = (float32x4_t)vtrn2q_s32(v154, v155);
      int64x2_t v160 = (int64x2_t)vtrn1q_s32(v156, v157);
      float32x4_t v161 = (float32x4_t)vzip2q_s64((int64x2_t)v158, v160);
      v158.i64[1] = v160.i64[0];
      int64x2_t v162 = (int64x2_t)vtrn2q_s32(v156, v157);
      float32x4_t v163 = (float32x4_t)vzip2q_s64((int64x2_t)v159, v162);
      v159.i64[1] = v162.i64[0];
      float32x4_t v144 = vmlaq_f32(v158, v152, vmlaq_f32(v159, v152, vmlaq_f32(v161, v152, v163)));
      int32x4_t v164 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v149, (float32x4_t)0), v110));
      float32x4_t v165 = vcvtq_f32_s32(v164);
      int32x4_t v166 = vshlq_n_s32(v164, 2uLL);
      *(void *)&long long v167 = v166.i32[2];
      *((void *)&v167 + 1) = v166.i32[3];
      long long v168 = v167;
      *((void *)&v167 + 1) = v166.i32[1];
      int32x4_t v169 = *(int32x4_t *)(v5 + 4 * v166.i32[0]);
      int32x4_t v170 = *(int32x4_t *)(v5 + 4 * *((void *)&v167 + 1));
      uint64_t v171 = *((void *)&v168 + 1);
      int32x4_t v172 = *(int32x4_t *)(v5 + 4 * v168);
      float32x4_t v173 = vsubq_f32(v149, v165);
      float32x4_t v174 = *(float32x4_t *)(v5 + 4 * v171);
      int64x2_t v175 = (int64x2_t)vtrn1q_s32(v169, v170);
      float32x4_t v176 = (float32x4_t)vtrn2q_s32(v169, v170);
      int64x2_t v177 = (int64x2_t)vtrn1q_s32(v172, (int32x4_t)v174);
      int64x2_t v178 = (int64x2_t)vtrn2q_s32(v172, (int32x4_t)v174);
      float32x4_t v179 = (float32x4_t)vzip2q_s64(v175, v177);
      v174.i64[0] = v175.i64[0];
      v174.i64[1] = v177.i64[0];
      float32x4_t v180 = (float32x4_t)vzip2q_s64((int64x2_t)v176, v178);
      v176.i64[1] = v178.i64[0];
      float32x4_t v181 = vmlaq_f32(v176, v173, vmlaq_f32(v179, v173, v180));
      int32x4_t v182 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v150, (float32x4_t)0), v110));
      int32x4_t v183 = vshlq_n_s32(v182, 2uLL);
      *(void *)&long long v167 = v183.i32[2];
      *((void *)&v167 + 1) = v183.i32[3];
      long long v184 = v167;
      *((void *)&v167 + 1) = v183.i32[1];
      int32x4_t v185 = *(int32x4_t *)(v5 + 4 * v183.i32[0]);
      int32x4_t v186 = *(int32x4_t *)(v5 + 4 * *((void *)&v167 + 1));
      uint64_t v187 = *((void *)&v184 + 1);
      int32x4_t v188 = *(int32x4_t *)(v5 + 4 * v184);
      float32x4_t v145 = vmlaq_f32(v174, v173, v181);
      float32x4_t v189 = vsubq_f32(v150, vcvtq_f32_s32(v182));
      float32x4_t v190 = *(float32x4_t *)(v5 + 4 * v187);
      int64x2_t v191 = (int64x2_t)vtrn1q_s32(v185, v186);
      float32x4_t v192 = (float32x4_t)vtrn2q_s32(v185, v186);
      int64x2_t v193 = (int64x2_t)vtrn1q_s32(v188, (int32x4_t)v190);
      int64x2_t v194 = (int64x2_t)vtrn2q_s32(v188, (int32x4_t)v190);
      float32x4_t v195 = (float32x4_t)vzip2q_s64(v191, v193);
      v190.i64[0] = v191.i64[0];
      v190.i64[1] = v193.i64[0];
      float32x4_t v196 = (float32x4_t)vzip2q_s64((int64x2_t)v192, v194);
      v192.i64[1] = v194.i64[0];
      float32x4_t v146 = vmlaq_f32(v190, v189, vmlaq_f32(v192, v189, vmlaq_f32(v195, v189, v196)));
    }
    float32x4_t v119 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v144, result->f32[1]), v145, result[1].f32[0]), v146, result[1].f32[1]);
    float32x4_t v120 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v144, result[2].f32[0]), v145, result[2].f32[1]), v146, result[3].f32[0]);
    float32x4_t v121 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v144, result[3].f32[1]), v145, result[4].f32[0]), v146, result[4].f32[1]);
    float32x4_t v122 = vmulq_f32(v120, v107);
    int32x4_t v123 = vcvtq_s32_f32(vminq_f32(vmaxq_f32(v122, (float32x4_t)0), v110));
    int32x4_t v124 = vshlq_n_s32(v123, 2uLL);
    *(void *)&long long v125 = v124.i32[2];
    *((void *)&v125 + 1) = v124.i32[3];
    long long v126 = v125;
    *((void *)&v125 + 1) = v124.i32[1];
    int32x4_t v127 = *(int32x4_t *)(v108 + 4 * v124.i32[0]);
    int32x4_t v128 = *(int32x4_t *)(v108 + 4 * *((void *)&v125 + 1));
    uint64_t v129 = *((void *)&v126 + 1);
    int32x4_t v130 = *(int32x4_t *)(v108 + 4 * v126);
    float32x4_t v131 = vsubq_f32(v122, vcvtq_f32_s32(v123));
    int32x4_t v132 = *(int32x4_t *)(v108 + 4 * v129);
    float32x4_t v133 = (float32x4_t)vtrn1q_s32(v127, v128);
    float32x4_t v134 = (float32x4_t)vtrn2q_s32(v127, v128);
    int64x2_t v135 = (int64x2_t)vtrn1q_s32(v130, v132);
    int64x2_t v136 = (int64x2_t)vtrn2q_s32(v130, v132);
    float32x4_t v137 = (float32x4_t)vzip2q_s64((int64x2_t)v133, v135);
    v133.i64[1] = v135.i64[0];
    float32x4_t v138 = (float32x4_t)vzip2q_s64((int64x2_t)v134, v136);
    v134.i64[1] = v136.i64[0];
    v225.val[0] = vmlaq_f32(_Q22, v111, vmlaq_f32(v133, v131, vmlaq_f32(v134, v131, vmlaq_f32(v137, v131, v138))));
    float32x4_t v139 = vmaxq_f32(vmlaq_f32(vmlaq_f32(v119, _Q23, v120), _Q24, v121), v115);
    float32x4_t v140 = vrecpeq_f32(v139);
    float32x4_t v141 = vmulq_f32(v140, vrecpsq_f32(v139, v140));
    float32x4_t v142 = vmulq_f32(vmulq_f32(vrecpsq_f32(v139, v141), v141), v116);
    v141.f32[0] = -result[5].f32[0];
    float32x4_t v143 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v141.f32, 0), v142, v119);
    v225.val[1] = vmulq_f32(v225.val[0], v143);
    v143.f32[0] = -result[5].f32[1];
    v225.val[2] = vmulq_f32(v225.val[0], vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 0), v142, vmulq_f32(v120, _Q27)));
    vst3q_f32(v118, v225);
    v118 += 12;
    v10 += 12;
    a2 += 4 * v4;
  }
  while (v10 <= v9 - 12);
  if ((int)v10 < v9)
  {
LABEL_19:
    float v197 = *(float *)&dword_1004F7274;
    uint64_t v198 = qword_1004F7310;
    float32x4_t v199 = (float32x2_t *)&a3[v10 + 1];
    float32x4_t v200 = (int8x8_t *)(a2 + 1);
    uint64_t v201 = 4 * v4;
    __asm { FMOV            V20.2S, #1.0 }
    uint64_t v10 = v10;
    float32x2_t v203 = (float32x2_t)vdup_n_s32(0x44800000u);
    do
    {
      float32x2_t v213 = (float32x2_t)vbic_s8(*v200, (int8x8_t)vcltz_f32((float32x2_t)*v200));
      _D30 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v213, _D20), (int8x8_t)_D20, (int8x8_t)v213);
      if (v5)
      {
        float32x2_t v215 = vmul_f32(_D30, v203);
        float32x2_t v216 = (float32x2_t)vmin_u32((uint32x2_t)vmax_s32(vcvt_n_s32_f32(_D30, 0xAuLL), 0), (uint32x2_t)0x300000003);
        float32x2_t v217 = vcvt_f32_s32((int32x2_t)v216);
        float32x4_t v218 = (__int32 *)(v5 + 4 * (4 * v216.i32[0]));
        v220.i32[0] = v218[2];
        v219.i32[0] = v218[3];
        v216.i32[0] = *v218;
        v221.i32[0] = v218[1];
        float32x2_t v222 = vsub_f32(v215, v217);
        float32x4_t v223 = (__int32 *)(v5 + 4 * (4 * v216.i32[1]));
        v219.i32[1] = v223[3];
        v220.i32[1] = v223[2];
        v221.i32[1] = v223[1];
        v216.i32[1] = *v223;
        _D30 = vmla_f32(v216, v222, vmla_f32(v221, v222, vmla_f32(v220, v222, v219)));
      }
      __asm
      {
        FMLA            S31, S2, V30.S[1]
        FMLA            S8, S5, V30.S[1]
        FMLA            S29, S16, V30.S[1]
      }
      int v207 = (int)(float)(v197 * _S8) & ~((int)(float)(v197 * _S8) >> 31);
      if (v207 >= 0x3FF) {
        int v207 = 1023;
      }
      float v208 = (float)((float)(*(float *)(v198 + 4 * (4 * v207))
                           + (float)((float)(*(float *)(v198 + 4 * (4 * v207) + 4)
                                           + (float)((float)(*(float *)(v198 + 4 * (4 * v207) + 8)
                                                           + (float)(*(float *)(v198
                                                                              + 4 * (4 * v207)
                                                                              + 12)
                                                                   * (float)((float)(v197 * _S8) - (float)v207)))
                                                   * (float)((float)(v197 * _S8) - (float)v207)))
                                   * (float)((float)(v197 * _S8) - (float)v207)))
                   * 116.0)
           + -16.0;
      float v209 = (float)(_D31.f32[0] + (float)(_S8 * 15.0)) + (float)(_S29 * 3.0);
      float v210 = 52.0 / v209;
      _NF = v209 < 0.00000011921;
      float v211 = 436210000.0;
      if (!_NF) {
        float v211 = v210;
      }
      _D31.f32[1] = _S8 * 2.25;
      float32x2_t v212 = vmul_n_f32(vmla_n_f32(vneg_f32(result[5]), _D31, v211), v208);
      v199[-1].f32[1] = v208;
      *float32x4_t v199 = v212;
      float32x4_t v199 = (float32x2_t *)((char *)v199 + 12);
      v10 += 3;
      float32x4_t v200 = (int8x8_t *)((char *)v200 + v201);
    }
    while (v10 < v9);
  }
  return result;
}

void sub_100310174(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003101AC(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498F38);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = (float *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v4);
    int v6 = (const float *)(*(void *)(a1 + 8) + *(void *)(a1 + 16) * v4);
    do
    {
      sub_10030F8A0(*(float32x2_t **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      int v6 = (const float *)((char *)v6 + *(void *)(a1 + 16));
      uint64_t v5 = (float *)((char *)v5 + *(void *)(a1 + 32));
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100310260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100310278(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003102B0(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v11, &off_100498F98);
  int v8 = *a2;
  if (*a2 < a2[1])
  {
    int v9 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v8);
    uint64_t v10 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v8;
    do
    {
      sub_10031037C((int *)(*(void *)(a1 + 48) + 56), v10, v9, *(_DWORD *)(a1 + 40), v4, v5, v6, v7);
      ++v8;
      v10 += *(void *)(a1 + 16);
      v9 += *(void *)(a1 + 32);
    }
    while (v8 < a2[1]);
  }
  if (v12) {
    sub_1002D6888(v11);
  }
}

void sub_100310368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10031037C(int *a1, uint64_t a2, char *a3, int a4, double a5, double a6, double a7, uint16x8_t a8)
{
  uint64_t v10 = *a1;
  int v73 = 3 * a4;
  if (a4 >= 16)
  {
    uint64_t v11 = 0;
    int v74 = 3 * a4 - 48;
    *(void *)&long long v31 = -1;
    *((void *)&v31 + 1) = -1;
    uint64_t v75 = a2;
    do
    {
      long long v76 = v31;
      int32x4_t v32 = (const char *)(a2 + v11);
      int8x16x3_t v95 = vld3q_s8(v32);
      int8x16_t v78 = v95.val[1];
      int8x16_t v79 = v95.val[0];
      int8x16_t v77 = v95.val[2];
      sub_10031086C(*(double *)v95.val[0].i64, *(double *)v95.val[1].i64, *(double *)v95.val[2].i64, *(int8x8_t *)a8.i8, (uint64_t)a1, (uint8x8_t *)&v79, (uint8x8_t *)&v78, (uint8x8_t *)&v77, &v91, &v87, &v83, &v92, &v88, &v84, &v93, &v89, &v85, &v94, &v90,
        &v86);
      v33.i64[0] = 0xF0000000FLL;
      v33.i64[1] = 0xF0000000FLL;
      v34.i64[0] = 0xD0000000DLL;
      v34.i64[1] = 0xD0000000DLL;
      v35.i64[0] = 0x200000002000;
      v35.i64[1] = 0x200000002000;
      uint64_t v36 = 0;
      int32x4_t v37 = (const float *)(a1 + 1);
      uint64_t v38 = (const float *)(a1 + 2);
      int32x4_t v39 = (const float *)(a1 + 3);
      float32x4_t v40 = (const float *)(a1 + 4);
      int32x4_t v41 = (const float *)(a1 + 5);
      float32x4_t v42 = (const float *)(a1 + 6);
      int32x4_t v43 = (int32x4_t)vld1q_dup_f32(v38);
      int32x4_t v44 = (int32x4_t)vld1q_dup_f32(v40);
      int64x2_t v45 = (const float *)(a1 + 7);
      float32x4_t v46 = (const float *)(a1 + 8);
      int32x4_t v47 = (int32x4_t)vld1q_dup_f32(v42);
      int32x4_t v48 = (int32x4_t)vld1q_dup_f32(v46);
      int32x4_t v49 = (int32x4_t)vld1q_dup_f32(v39);
      int32x4_t v50 = (int32x4_t)vld1q_dup_f32(v45);
      int32x4_t v51 = (int32x4_t)vld1q_dup_f32(v37);
      float32x4_t v52 = (const float *)(a1 + 9);
      int32x4_t v53 = (int32x4_t)vld1q_dup_f32(v41);
      int32x4_t v54 = (int32x4_t)vld1q_dup_f32(v52);
      uint64_t v55 = *((void *)a1 + 5);
      do
      {
        int32x4_t v56 = *(int32x4_t *)((char *)&v91 + v36 * 16);
        int32x4_t v57 = *(int32x4_t *)((char *)&v87 + v36 * 16);
        int32x4_t v58 = *(int32x4_t *)((char *)&v83 + v36 * 16);
        int32x4_t v59 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v57, v43), v56, v51), v58, v49), v35), v34);
        int32x4_t v60 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v57, v53), v56, v44), v58, v47), v35), v34);
        int32x4_t v61 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v57, v48), v56, v50), v58, v54), v35), v34);
        int32x4_t v62 = vmaxq_s32(vminq_s32(v59, v33), (int32x4_t)0);
        uint64_t v63 = v62.u32[1];
        __int32 v64 = *(unsigned __int16 *)(v55 + 2 * v62.u32[0]);
        v62.i16[1] = v62.i16[5];
        v62.i16[0] = *(_WORD *)(v55 + 2 * v62.u32[2]);
        v62.i32[1] = *(unsigned __int16 *)(v55 + 2 * v62.u32[3]);
        v59.i32[0] = v64;
        v59.i32[1] = *(unsigned __int16 *)(v55 + 2 * v63);
        v59.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v62.i8, (int8x8_t)0xFFFF0000FFFFLL);
        int32x4_t v65 = vmaxq_s32(vminq_s32(v60, v33), (int32x4_t)0);
        v82[v36] = (uint32x4_t)v59;
        unsigned int v66 = *(unsigned __int16 *)(v55 + 2 * v65.u32[0]);
        LODWORD(v63) = *(unsigned __int16 *)(v55 + 2 * v65.u32[1]);
        v65.i16[1] = v65.i16[5];
        v65.i16[0] = *(_WORD *)(v55 + 2 * v65.u32[2]);
        v65.i32[1] = *(unsigned __int16 *)(v55 + 2 * v65.u32[3]);
        v58.i64[0] = __PAIR64__(v63, v66);
        v58.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v65.i8, (int8x8_t)0xFFFF0000FFFFLL);
        v81[v36] = (uint32x4_t)v58;
        int32x4_t v67 = vmaxq_s32(vminq_s32(v61, v33), (int32x4_t)0);
        v68.i64[0] = v67.u32[2];
        v68.i64[1] = v67.u32[3];
        uint32x4_t v69 = v68;
        v68.i64[0] = v67.u32[0];
        v68.i64[1] = v67.u32[1];
        v67.i16[0] = *(_WORD *)(v55 + 2 * v69.i64[0]);
        v67.i32[1] = *(unsigned __int16 *)(v55 + 2 * v69.i64[1]);
        v69.i32[0] = *(unsigned __int16 *)(v55 + 2 * v68.i64[0]);
        v69.i32[1] = *(unsigned __int16 *)(v55 + 2 * v68.i64[1]);
        v69.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v67.i8, (int8x8_t)0xFFFF0000FFFFLL);
        v80[v36++] = v69;
      }
      while (v36 != 4);
      a8 = vqmovn_high_u32(vqmovn_u32(v81[2]), v81[3]);
      long long v31 = v76;
      uint8x16_t v70 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v80[0]), v80[1])), vqmovn_high_u32(vqmovn_u32(v80[2]), v80[3]));
      uint8x16_t v71 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v81[0]), v81[1])), a8);
      uint8x16_t v72 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v82[0]), v82[1])), vqmovn_high_u32(vqmovn_u32(v82[2]), v82[3]));
      if (v10 == 4) {
        vst4q_s8(a3, *(int8x16x4_t *)(&v31 - 3));
      }
      else {
        vst3q_s8(a3, *(int8x16x3_t *)v70.i8);
      }
      a2 = v75;
      v11 += 48;
      a3 += 16 * v10;
    }
    while (v74 >= (int)v11);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  if ((int)v11 < v73)
  {
    uint64_t v12 = v11;
    uint64_t v13 = qword_1004F7348;
    uint8x16_t v14 = a3 + 1;
    do
    {
      int v15 = word_1004F7898[2 * *(unsigned __int8 *)(a2 + v12)];
      int v16 = word_1004F7898[(2 * *(unsigned __int8 *)(a2 + v12)) | 1];
      int v17 = *(_DWORD *)(v13
                      + 4 * (v16 + ((268435 * *(unsigned __int8 *)(a2 + v12 + 1) + 128) >> 13) + 3951));
      int v18 = *(_DWORD *)(v13
                      + 4
                      * (int)(v16 - ((41943 * *(unsigned __int8 *)(a2 + v12 + 2) + 16) >> 9) + 18629));
      int v19 = (a1[2] * v15 + a1[1] * v17 + a1[3] * v18 + 0x2000) >> 14;
      int v20 = (a1[5] * v15 + a1[4] * v17 + a1[6] * v18 + 0x2000) >> 14;
      int v21 = (a1[8] * v15 + a1[7] * v17 + a1[9] * v18 + 0x2000) >> 14;
      if (v19 >= 4095) {
        int v19 = 4095;
      }
      unsigned int v22 = v19 & ~(v19 >> 31);
      if (v20 >= 4095) {
        int v23 = 4095;
      }
      else {
        int v23 = v20;
      }
      unsigned int v24 = v23 & ~(v23 >> 31);
      if (v21 >= 4095) {
        int v21 = 4095;
      }
      uint64_t v25 = *((void *)a1 + 5);
      int v26 = *(unsigned __int16 *)(v25 + 2 * v22);
      int v27 = *(unsigned __int16 *)(v25 + 2 * v24);
      int v28 = *(unsigned __int16 *)(v25 + 2 * (v21 & ~(v21 >> 31)));
      if (v28 >= 255) {
        LOBYTE(v28) = -1;
      }
      *(v14 - 1) = v28;
      if (v27 >= 255) {
        char v29 = -1;
      }
      else {
        char v29 = v27;
      }
      char *v14 = v29;
      if (v26 >= 255) {
        char v30 = -1;
      }
      else {
        char v30 = v26;
      }
      v14[1] = v30;
      if (v10 == 4) {
        v14[2] = -1;
      }
      v12 += 3;
      v14 += v10;
    }
    while (v73 > (int)v12);
  }
}

__n128 sub_10031086C(double a1, double a2, double a3, int8x8_t a4, uint64_t a5, uint8x8_t *a6, uint8x8_t *a7, uint8x8_t *a8, uint32x4_t *a9, uint32x4_t *a10, uint32x4_t *a11, uint32x4_t *a12, _OWORD *a13, uint32x4_t *a14, uint32x4_t *a15, _OWORD *a16, uint32x4_t *a17, uint32x4_t *a18, int16x8_t *a19, __n128 *a20)
{
  uint16x8_t v20 = vshll_n_u8(*a6, 1uLL);
  int16x8_t v21 = (int16x8_t)vshll_high_n_u8(*(uint8x16_t *)a6->i8, 1uLL);
  unsigned int v22 = (unsigned __int16 *)((char *)&unk_1004F7898 + 2 * v20.u16[0]);
  int v23 = (unsigned __int16 *)((char *)&unk_1004F7898 + 2 * v20.u16[1]);
  unsigned int v24 = (__int16 *)((char *)&unk_1004F7898 + 2 * v20.u16[2]);
  uint64_t v25 = (__int16 *)((char *)&unk_1004F7898 + 2 * v20.u16[3]);
  a4.i16[0] = *v24;
  a4.i16[2] = *v25;
  v26.i32[0] = *v22;
  v26.i32[1] = *v23;
  v26.u64[1] = (unint64_t)vand_s8(a4, (int8x8_t)0xFFFF0000FFFFLL);
  *a10 = v26;
  int v27 = (unsigned __int16 *)((char *)&unk_1004F7898 + 2 * v20.u16[4]);
  int v28 = (unsigned __int16 *)((char *)&unk_1004F7898 + 2 * v20.u16[5]);
  char v29 = (__int16 *)((char *)&unk_1004F7898 + 2 * v20.u16[6]);
  v20.i16[0] = *v29;
  char v30 = (__int16 *)((char *)&unk_1004F7898 + 2 * v20.u16[7]);
  v20.i16[2] = *v30;
  LODWORD(v31) = *v27;
  DWORD1(v31) = *v28;
  *(int8x8_t *)v20.i8 = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0xFFFF0000FFFFLL);
  *((void *)&v31 + 1) = v20.i64[0];
  *a13 = v31;
  int32x4_t v32 = (unsigned __int16 *)((char *)&unk_1004F7898 + 2 * v21.u16[0]);
  int32x4_t v33 = (unsigned __int16 *)((char *)&unk_1004F7898 + 2 * v21.u16[1]);
  int32x4_t v34 = (__int16 *)((char *)&unk_1004F7898 + 2 * v21.u16[2]);
  int32x4_t v35 = (__int16 *)((char *)&unk_1004F7898 + 2 * v21.u16[3]);
  v20.i16[0] = *v34;
  v20.i16[2] = *v35;
  LODWORD(v31) = *v32;
  DWORD1(v31) = *v33;
  *((int8x8_t *)&v31 + 1) = vand_s8(*(int8x8_t *)v20.i8, (int8x8_t)0xFFFF0000FFFFLL);
  *a16 = v31;
  uint64_t v36 = (unsigned __int16 *)((char *)&unk_1004F7898 + 2 * v21.u16[4]);
  int32x4_t v37 = (unsigned __int16 *)((char *)&unk_1004F7898 + 2 * v21.u16[5]);
  uint64_t v38 = (__int16 *)((char *)&unk_1004F7898 + 2 * v21.u16[6]);
  int32x4_t v39 = (__int16 *)((char *)&unk_1004F7898 + 2 * v21.u16[7]);
  v21.i16[0] = *v38;
  v21.i16[2] = *v39;
  v40.i32[0] = *v36;
  v40.i32[1] = *v37;
  v40.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v21.i8, (int8x8_t)0xFFFF0000FFFFLL);
  *a19 = v40;
  v21.i16[0] = v22[1];
  v21.i16[1] = v23[1];
  v21.i16[2] = v24[1];
  v21.i16[3] = v25[1];
  v21.i16[4] = v27[1];
  v21.i16[5] = v28[1];
  v21.i16[6] = v29[1];
  v21.i16[7] = v30[1];
  v40.i16[0] = v32[1];
  v40.i16[1] = v33[1];
  v40.i16[2] = v34[1];
  v40.i16[3] = v35[1];
  v40.i16[4] = v36[1];
  v40.i16[5] = v37[1];
  v40.i16[6] = v38[1];
  v40.i16[7] = v39[1];
  uint16x8_t v41 = vmovl_u8(*a8);
  uint16x8_t v42 = vmovl_high_u8(*(uint8x16_t *)a8->i8);
  uint16x8_t v43 = vqaddq_u16(vmovl_u8(*a7), vshll_n_u8(*a7, 2uLL));
  uint16x8_t v44 = (uint16x8_t)vdupq_n_s16(0xD1B7u);
  uint16x8_t v45 = vqaddq_u16(vmovl_high_u8(*(uint8x16_t *)a7->i8), vshll_high_n_u8(*(uint8x16_t *)a7->i8, 2uLL));
  v26.i64[0] = 0x8000000080;
  v26.i64[1] = 0x8000000080;
  v46.i64[0] = 0x8000000080;
  v46.i64[1] = 0x8000000080;
  v47.i64[0] = 0xC0000000CLL;
  v47.i64[1] = 0xC0000000CLL;
  v48.i64[0] = 0x8000000080;
  v48.i64[1] = 0x8000000080;
  int16x8_t v49 = (int16x8_t)vqmovn_high_u32(vqmovn_u32(vshlq_u32(vmlal_u16(v46, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v44.i8), v47)), vshlq_u32(vmlal_high_u16(v48, v43, v44), v47));
  v43.i64[0] = 0x8000000080;
  v43.i64[1] = 0x8000000080;
  int16x8_t v50 = (int16x8_t)vqmovn_high_u32(vqmovn_u32(vshlq_u32(vmlal_u16((uint32x4_t)v43, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v44.i8), v47)), vshlq_u32(vmlal_high_u16(v26, v45, v44), v47));
  uint16x8_t v51 = (uint16x8_t)vdupq_n_s16(0xA3D7u);
  v26.i64[0] = 0x1000000010;
  v26.i64[1] = 0x1000000010;
  v44.i64[0] = 0x1000000010;
  v44.i64[1] = 0x1000000010;
  v47.i64[0] = 0x800000008;
  v47.i64[1] = 0x800000008;
  v48.i64[0] = 0x1000000010;
  v48.i64[1] = 0x1000000010;
  int16x8_t v52 = (int16x8_t)vqmovn_high_u32(vqmovn_u32(vshlq_u32(vmlal_u16((uint32x4_t)v44, *(uint16x4_t *)v41.i8, *(uint16x4_t *)v51.i8), v47)), vshlq_u32(vmlal_high_u16(v48, v41, v51), v47));
  v41.i64[0] = 0x1000000010;
  v41.i64[1] = 0x1000000010;
  int16x8_t v53 = (int16x8_t)vqmovn_high_u32(vqmovn_u32(vshlq_u32(vmlal_u16((uint32x4_t)v41, *(uint16x4_t *)v42.i8, *(uint16x4_t *)v51.i8), v47)), vshlq_u32(vmlal_high_u16(v26, v42, v51), v47));
  int16x8_t v54 = vdupq_n_s16(0xF6Fu);
  uint16x8_t v55 = (uint16x8_t)vaddq_s16(v21, vaddq_s16(v49, v54));
  uint16x8_t v56 = (uint16x8_t)vaddq_s16(v40, vaddq_s16(v50, v54));
  int16x8_t v57 = vdupq_n_s16(0x48C5u);
  uint16x8_t v58 = (uint16x8_t)vaddq_s16(vsubq_s16(v21, v52), v57);
  uint16x8_t v59 = (uint16x8_t)vaddq_s16(vsubq_s16(v40, v53), v57);
  uint64_t v60 = qword_1004F7348;
  uint32x4_t v61 = vmovl_high_u16(v55);
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)v55.i8);
  v62.i32[0] = *(_DWORD *)(qword_1004F7348 + 4 * v62.u32[0]);
  v62.i32[1] = *(_DWORD *)(qword_1004F7348 + 4 * v62.u32[1]);
  v62.i32[2] = *(_DWORD *)(qword_1004F7348 + 4 * v62.u32[2]);
  v62.i32[3] = *(_DWORD *)(qword_1004F7348 + 4 * v62.u32[3]);
  *a9 = v62;
  v61.i32[0] = *(_DWORD *)(v60 + 4 * v61.u32[0]);
  v61.i32[1] = *(_DWORD *)(v60 + 4 * v61.u32[1]);
  v61.i32[2] = *(_DWORD *)(v60 + 4 * v61.u32[2]);
  v61.i32[3] = *(_DWORD *)(v60 + 4 * v61.u32[3]);
  *a12 = v61;
  uint32x4_t v63 = vmovl_high_u16(v56);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)v56.i8);
  v64.i32[0] = *(_DWORD *)(v60 + 4 * v64.u32[0]);
  v64.i32[1] = *(_DWORD *)(v60 + 4 * v64.u32[1]);
  v64.i32[2] = *(_DWORD *)(v60 + 4 * v64.u32[2]);
  v64.i32[3] = *(_DWORD *)(v60 + 4 * v64.u32[3]);
  *a15 = v64;
  v63.i32[0] = *(_DWORD *)(v60 + 4 * v63.u32[0]);
  v63.i32[1] = *(_DWORD *)(v60 + 4 * v63.u32[1]);
  v63.i32[2] = *(_DWORD *)(v60 + 4 * v63.u32[2]);
  v63.i32[3] = *(_DWORD *)(v60 + 4 * v63.u32[3]);
  *a18 = v63;
  uint32x4_t v65 = vmovl_high_u16(v58);
  uint32x4_t v66 = vmovl_u16(*(uint16x4_t *)v58.i8);
  v66.i32[0] = *(_DWORD *)(v60 + 4 * v66.u32[0]);
  v66.i32[1] = *(_DWORD *)(v60 + 4 * v66.u32[1]);
  v66.i32[2] = *(_DWORD *)(v60 + 4 * v66.u32[2]);
  v66.i32[3] = *(_DWORD *)(v60 + 4 * v66.u32[3]);
  *a11 = v66;
  v65.i32[0] = *(_DWORD *)(v60 + 4 * v65.u32[0]);
  v65.i32[1] = *(_DWORD *)(v60 + 4 * v65.u32[1]);
  v65.i32[2] = *(_DWORD *)(v60 + 4 * v65.u32[2]);
  v65.i32[3] = *(_DWORD *)(v60 + 4 * v65.u32[3]);
  *a14 = v65;
  uint32x4_t v67 = vmovl_high_u16(v59);
  uint32x4_t v68 = vmovl_u16(*(uint16x4_t *)v59.i8);
  v68.i32[0] = *(_DWORD *)(v60 + 4 * v68.u32[0]);
  v68.i32[1] = *(_DWORD *)(v60 + 4 * v68.u32[1]);
  v68.i32[2] = *(_DWORD *)(v60 + 4 * v68.u32[2]);
  v68.i32[3] = *(_DWORD *)(v60 + 4 * v68.u32[3]);
  *a17 = v68;
  result.n128_u32[0] = *(_DWORD *)(v60 + 4 * v67.u32[0]);
  result.n128_u32[1] = *(_DWORD *)(v60 + 4 * v67.u32[1]);
  result.n128_u32[2] = *(_DWORD *)(v60 + 4 * v67.u32[2]);
  result.n128_u32[3] = *(_DWORD *)(v60 + 4 * v67.u32[3]);
  *a20 = result;
  return result;
}

void sub_100310D14(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100310D4C(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_100498FF8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_100310E14(*(int **)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100310E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *sub_100310E14(int *result, uint64_t a2, uint64_t a3, int a4)
{
  if (*((unsigned char *)result + 40)) {
    uint64_t v4 = qword_1004F7320;
  }
  else {
    uint64_t v4 = 0;
  }
  if (a4 >= 1)
  {
    uint64_t v5 = 0;
    float v6 = *((float *)result + 1);
    float v7 = *((float *)result + 2);
    float v8 = *((float *)result + 3);
    float v9 = *((float *)result + 4);
    float v10 = *((float *)result + 5);
    float v11 = *((float *)result + 6);
    float v12 = *((float *)result + 7);
    float v13 = *((float *)result + 8);
    uint64_t v14 = *result;
    uint64_t v15 = a3 + 8;
    int v16 = (float *)(a2 + 4);
    float v17 = *((float *)result + 9);
    do
    {
      float v18 = *(v16 - 1);
      float v19 = *((float *)result + 12);
      BOOL v20 = v18 > *((float *)result + 11);
      float v21 = (float)(v18 + 16.0) / 116.0;
      float v22 = v18 / 903.3;
      if (v20) {
        float v22 = v21 * (float)(v21 * v21);
      }
      else {
        float v21 = (float)(v22 * 7.787) + 0.13793;
      }
      float v23 = (float)(*v16 / 500.0) + v21;
      float v24 = v21 + (float)(v16[1] / -200.0);
      BOOL v20 = v23 > v19;
      float v25 = v23 * (float)(v23 * v23);
      float v26 = (float)(v23 + -0.13793) / 7.787;
      if (v20) {
        float v26 = v25;
      }
      BOOL v20 = v24 > v19;
      float v27 = v24 * (float)(v24 * v24);
      float v28 = (float)(v24 + -0.13793) / 7.787;
      if (v20) {
        float v28 = v27;
      }
      float v29 = (float)((float)(v7 * v22) + (float)(v6 * v26)) + (float)(v8 * v28);
      float v30 = (float)((float)(v10 * v22) + (float)(v9 * v26)) + (float)(v11 * v28);
      float v31 = (float)((float)(v13 * v22) + (float)(v12 * v26)) + (float)(v17 * v28);
      if (v29 <= 1.0) {
        float v32 = v29;
      }
      else {
        float v32 = 1.0;
      }
      if (v29 < 0.0) {
        float v32 = 0.0;
      }
      if (v30 <= 1.0) {
        float v33 = v30;
      }
      else {
        float v33 = 1.0;
      }
      if (v30 < 0.0) {
        float v33 = 0.0;
      }
      if (v31 <= 1.0) {
        float v34 = v31;
      }
      else {
        float v34 = 1.0;
      }
      if (v31 < 0.0) {
        float v34 = 0.0;
      }
      if (v4)
      {
        int v35 = vcvts_n_s32_f32(v32, 0xAuLL);
        int v36 = v35 & ~(v35 >> 31);
        if (v36 >= 0x3FF) {
          int v36 = 1023;
        }
        float v32 = *(float *)(v4 + 4 * (4 * v36))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v36) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v36) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v36) + 12)
                                                    * (float)((float)(v32 * 1024.0) - (float)v36)))
                                    * (float)((float)(v32 * 1024.0) - (float)v36)))
                    * (float)((float)(v32 * 1024.0) - (float)v36));
        int v37 = vcvts_n_s32_f32(v33, 0xAuLL);
        int v38 = v37 & ~(v37 >> 31);
        if (v38 >= 0x3FF) {
          int v38 = 1023;
        }
        float v33 = *(float *)(v4 + 4 * (4 * v38))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v38) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v38) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v38) + 12)
                                                    * (float)((float)(v33 * 1024.0) - (float)v38)))
                                    * (float)((float)(v33 * 1024.0) - (float)v38)))
                    * (float)((float)(v33 * 1024.0) - (float)v38));
        int v39 = vcvts_n_s32_f32(v34, 0xAuLL);
        int v40 = v39 & ~(v39 >> 31);
        if (v40 >= 0x3FF) {
          int v40 = 1023;
        }
        float v34 = *(float *)(v4 + 4 * (4 * v40))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v40) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v40) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v40) + 12)
                                                    * (float)((float)(v34 * 1024.0) - (float)v40)))
                                    * (float)((float)(v34 * 1024.0) - (float)v40)))
                    * (float)((float)(v34 * 1024.0) - (float)v40));
      }
      *(float *)(v15 - 8) = v32;
      *(float *)(v15 - 4) = v33;
      *(float *)uint64_t v15 = v34;
      if (v14 == 4) {
        *(_DWORD *)(v15 + 4) = 1065353216;
      }
      v5 += 3;
      v15 += 4 * v14;
      v16 += 3;
    }
    while (v5 < 3 * a4);
  }
  return result;
}

void sub_100311074(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003110AC(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v14, &off_100499058);
  int v11 = *a2;
  if (*a2 < a2[1])
  {
    float v12 = (char *)(*(void *)(a1 + 24) + *(void *)(a1 + 32) * v11);
    uint64_t v13 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v11;
    do
    {
      sub_100311174(*(int **)(a1 + 48), v13, v12, *(_DWORD *)(a1 + 40), v4, v5, v6, v7, v8, v9, v10);
      ++v11;
      v13 += *(void *)(a1 + 16);
      v12 += *(void *)(a1 + 32);
    }
    while (v11 < a2[1]);
  }
  if (v15) {
    sub_1002D6888(v14);
  }
}

void sub_100311160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100311174(int *a1, uint64_t a2, char *a3, int a4, double a5, uint16x8_t a6, uint16x8_t a7, int32x4_t a8, float32x4_t a9, int32x4_t a10, int32x4_t a11)
{
  int v14 = a4;
  int v15 = a3;
  uint64_t v16 = a2;
  if (*((unsigned char *)a1 + 104))
  {
    float v18 = a1 + 14;
    sub_100311D7C(v18, a2, a3, a4);
    return;
  }
  uint64_t v19 = *a1;
  uint64_t v169 = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3DB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1004D3DB8))
  {
    sub_1002C6CF0((unsigned int *)&v175, 100);
    sub_1002C70C8(&v175, (unsigned int *)&dword_1004F729C, &dword_1004D3DB0);
    __cxa_guard_release(&qword_1004D3DB8);
    int v14 = a4;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3DC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1004D3DC8))
  {
    sub_1002C70C8((int *)&dword_1004F7280, (unsigned int *)&dword_1004F729C, &dword_1004D3DC0);
    __cxa_guard_release(&qword_1004D3DC8);
    int v14 = a4;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D3DD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1004D3DD8))
  {
    sub_1002C70C8((int *)&dword_1004F728C, (unsigned int *)&dword_1004F729C, &dword_1004D3DD0);
    __cxa_guard_release(&qword_1004D3DD8);
    int v14 = a4;
  }
  if (v14 >= 1)
  {
    int v20 = 0;
    int v21 = 0;
    int v22 = v14;
    do
    {
      int v172 = v22 - 256;
      int v173 = v21;
      if (v22 >= 256) {
        int v23 = 256;
      }
      else {
        int v23 = v22;
      }
      int v24 = v14 - (v20 << 8);
      if (v24 >= 256) {
        int v24 = 256;
      }
      int v25 = v14 - v21;
      if (v25 >= 256) {
        int v26 = 256;
      }
      else {
        int v26 = v25;
      }
      float v27 = *(float *)&dword_1004D3DB0;
      a6.i32[0] = dword_1004D3DC0;
      a7.i32[0] = dword_1004D3DD0;
      a8.i32[0] = dword_1004F7278;
      a9.i32[0] = dword_1004F7284;
      int v174 = 3 * v26;
      unint64_t v28 = (3 * v26 - 48);
      if ((int)v28 < 1)
      {
        uint64_t v43 = 0;
        if (v174 <= 0) {
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v29 = 0;
        a10.i64[0] = __PAIR64__(dword_1004D3DC0, dword_1004D3DB0);
        a10.i64[1] = __PAIR64__(dword_1004D3DB0, dword_1004D3DD0);
        a11.i64[0] = __PAIR64__(dword_1004D3DD0, dword_1004D3DC0);
        a11.i64[1] = __PAIR64__(dword_1004D3DC0, dword_1004D3DB0);
        v30.i64[0] = __PAIR64__(dword_1004D3DB0, dword_1004D3DD0);
        v30.i64[1] = __PAIR64__(dword_1004D3DD0, dword_1004D3DC0);
        v31.i32[0] = 0;
        v31.i32[1] = dword_1004F7278;
        v31.i64[1] = dword_1004F7284;
        v11.i32[2] = 0;
        v11.i64[0] = __PAIR64__(dword_1004F7284, dword_1004F7278);
        v11.i32[3] = dword_1004F7278;
        v12.i64[0] = dword_1004F7284;
        v12.i64[1] = __PAIR64__(dword_1004F7284, dword_1004F7278);
        float v32 = (float32x4_t *)&v178;
        do
        {
          uint8x16_t v33 = *(uint8x16_t *)(v16 + v29);
          uint8x16_t v34 = *(uint8x16_t *)(v16 + v29 + 16);
          uint16x8_t v35 = vmovl_u8(*(uint8x8_t *)v33.i8);
          uint16x8_t v36 = vmovl_high_u8(v33);
          v32[-6] = vmlaq_f32(v31, (float32x4_t)a10, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v35.i8)));
          v32[-5] = vmlaq_f32((float32x4_t)v11, (float32x4_t)a11, vcvtq_f32_u32(vmovl_high_u16(v35)));
          v32[-4] = vmlaq_f32((float32x4_t)v12, v30, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v36.i8)));
          v32[-3] = vmlaq_f32(v31, (float32x4_t)a10, vcvtq_f32_u32(vmovl_high_u16(v36)));
          uint16x8_t v37 = vmovl_u8(*(uint8x8_t *)v34.i8);
          uint16x8_t v38 = vmovl_high_u8(v34);
          v32[-2] = vmlaq_f32((float32x4_t)v11, (float32x4_t)a11, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8)));
          v32[-1] = vmlaq_f32((float32x4_t)v12, v30, vcvtq_f32_u32(vmovl_high_u16(v37)));
          *float v32 = vmlaq_f32(v31, (float32x4_t)a10, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v38.i8)));
          v32[1] = vmlaq_f32((float32x4_t)v11, (float32x4_t)a11, vcvtq_f32_u32(vmovl_high_u16(v38)));
          uint8x16_t v39 = *(uint8x16_t *)(v16 + v29 + 32);
          uint16x8_t v40 = vmovl_u8(*(uint8x8_t *)v39.i8);
          uint16x8_t v41 = vmovl_high_u8(v39);
          v32[2] = vmlaq_f32((float32x4_t)v12, v30, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v40.i8)));
          v32[3] = vmlaq_f32(v31, (float32x4_t)a10, vcvtq_f32_u32(vmovl_high_u16(v40)));
          float32x4_t v42 = vmlaq_f32((float32x4_t)v11, (float32x4_t)a11, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v41.i8)));
          int8x16_t v13 = (int8x16_t)vcvtq_f32_u32(vmovl_high_u16(v41));
          v32[4] = v42;
          v32[5] = vmlaq_f32((float32x4_t)v12, v30, (float32x4_t)v13);
          v29 += 48;
          v32 += 12;
        }
        while (v29 < v28);
        uint64_t v43 = v29;
        if ((int)v29 >= v174) {
          goto LABEL_52;
        }
      }
      uint64_t v44 = 3 * v24;
      uint64_t v45 = v43 + 3;
      if (v43 + 3 > v44) {
        uint64_t v44 = v43 + 3;
      }
      uint64_t v46 = v44 - 3;
      if (v46 == v43) {
        uint64_t v47 = 0;
      }
      else {
        uint64_t v47 = -1;
      }
      uint64_t v48 = 1;
      if (v46 != v43) {
        uint64_t v48 = 2;
      }
      unint64_t v49 = v48 + (v46 - (unint64_t)(v46 != v43) - v43) / 3;
      if (v49 < 8)
      {
        uint64_t v50 = v43;
        goto LABEL_50;
      }
      uint64_t v51 = 3 * v23;
      if (v49 >= 0x10)
      {
        uint64_t v52 = v49 & 0x7FFFFFFFFFFFFFF0;
        a10 = vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
        a11 = vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
        float32x4_t v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.i8, 0);
        float32x4_t v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0);
        if (v45 <= v51) {
          uint64_t v63 = v51;
        }
        else {
          uint64_t v63 = v43 + 3;
        }
        unint64_t v64 = (v48 + (v63 + v47 - v43 - 3) / 3uLL) & 0xFFFFFFFFFFFFFFF0;
        uint32x4_t v65 = (float *)&v176[4 * v43];
        uint64_t v66 = v43;
        do
        {
          uint32x4_t v67 = (const char *)(v16 + v66);
          *(int8x16x3_t *)(&v12 - 1) = vld3q_s8(v67);
          v185.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v68, (int8x16_t)xmmword_1004048C0)), v27);
          v180.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v68, (int8x16_t)xmmword_100404890)), v27);
          v180.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_100404890)));
          v180.val[2] = vmlaq_f32(v62, v61, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_100404890)));
          v181.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v68, (int8x16_t)xmmword_1004048B0)), v27);
          uint32x4_t v69 = v65;
          vst3q_f32(v69, v180);
          v69 += 12;
          v183.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v68, (int8x16_t)xmmword_1004048A0)), v27);
          v183.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_1004048A0)));
          v183.val[2] = vmlaq_f32(v62, v61, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_1004048A0)));
          vst3q_f32(v69, v183);
          v181.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_1004048B0)));
          v181.val[2] = vmlaq_f32(v62, v61, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_1004048B0)));
          uint8x16_t v70 = v65 + 24;
          vst3q_f32(v70, v181);
          v185.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_1004048C0)));
          int8x16_t v11 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_1004048C0));
          v185.val[2] = vmlaq_f32(v62, v61, (float32x4_t)v11);
          uint8x16_t v71 = v65 + 36;
          vst3q_f32(v71, v185);
          v66 += 48;
          v65 += 48;
          v64 -= 16;
        }
        while (v64);
        if (v49 == v52) {
          goto LABEL_52;
        }
        if ((v49 & 8) == 0)
        {
          uint64_t v50 = 3 * v52 + v43;
LABEL_50:
          uint8x16_t v72 = (float *)&v176[4 * v50 + 4];
          do
          {
            a10.i8[0] = *(unsigned char *)(v16 + v50);
            *(float *)&unsigned int v73 = (float)a10.u32[0];
            float v74 = v27 * *(float *)&v73;
            LOBYTE(v73) = *(unsigned char *)(v16 + v50 + 1);
            *(float *)a10.i32 = *(float *)a8.i32 + (float)((float)v73 * *(float *)a6.i32);
            a11.i8[0] = *(unsigned char *)(v16 + v50 + 2);
            *(float *)a11.i32 = a9.f32[0] + (float)((float)a11.u32[0] * *(float *)a7.i32);
            *(v72 - 1) = v74;
            *uint8x16_t v72 = *(float *)a10.i32;
            v72[1] = *(float *)a11.i32;
            v50 += 3;
            v72 += 3;
          }
          while (v50 < v174);
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v52 = 0;
      }
      uint64_t v50 = 3 * (v49 & 0x7FFFFFFFFFFFFFF8) + v43;
      a10 = vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
      a11 = vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
      float32x4_t v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.i8, 0);
      float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0);
      if (v45 <= v51) {
        uint64_t v45 = v51;
      }
      unint64_t v55 = v52 - ((v48 + (v45 + v47 - v43 - 3) / 3uLL) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v56 = 3 * v52 + v43;
      int16x8_t v57 = (float *)&v176[12 * v52 + 4 * v43];
      do
      {
        uint16x8_t v58 = (const char *)(v16 + v56);
        *(int8x8x3_t *)v11.i8 = vld3_s8(v58);
        v182.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_1004048A0)), v27);
        v182.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_1004048A0)));
        v182.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_1004048A0)));
        v184.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_100404890)), v27);
        v184.val[1] = vmlaq_f32((float32x4_t)a11, (float32x4_t)a10, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v12, (int8x16_t)xmmword_100404890)));
        int8x16_t v11 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_100404890));
        v184.val[2] = vmlaq_f32(v54, v53, (float32x4_t)v11);
        uint16x8_t v59 = v57 + 24;
        vst3q_f32(v57, v184);
        uint64_t v60 = v57 + 12;
        vst3q_f32(v60, v182);
        v56 += 24;
        int16x8_t v57 = v59;
        v55 += 8;
      }
      while (v55);
      if (v49 != (v49 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_50;
      }
LABEL_52:
      sub_100312368((uint64_t)(a1 + 1), (uint64_t)v176, (uint64_t)v176, v26);
      int v171 = v20;
      if (v174 >= 17)
      {
        uint64_t v75 = 0;
        long long v76 = (float32x4_t *)&v177;
        do
        {
          float32x4_t v77 = v76[-2];
          float32x4_t v78 = v76[-1];
          float32x4_t v79 = *v76;
          float32x4_t v80 = v76[1];
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v153 = v79;
            float32x4_t v161 = v80;
            float32x4_t v137 = v77;
            float32x4_t v145 = v78;
            int v90 = __cxa_guard_acquire(qword_1004D2D60);
            float32x4_t v77 = v137;
            float32x4_t v78 = v145;
            float32x4_t v79 = v153;
            float32x4_t v80 = v161;
            if (v90)
            {
              *(void *)&long long v91 = 0x8000000080000000;
              *((void *)&v91 + 1) = 0x8000000080000000;
              xmmword_1004D2D50 = v91;
              __cxa_guard_release(qword_1004D2D60);
              float32x4_t v77 = v137;
              float32x4_t v78 = v145;
              float32x4_t v79 = v153;
              float32x4_t v80 = v161;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v154 = v79;
            float32x4_t v162 = v80;
            float32x4_t v138 = v77;
            float32x4_t v146 = v78;
            int v92 = __cxa_guard_acquire(qword_1004D2D80);
            float32x4_t v77 = v138;
            float32x4_t v78 = v146;
            float32x4_t v79 = v154;
            float32x4_t v80 = v162;
            if (v92)
            {
              *(void *)&long long v93 = 0x3F0000003F000000;
              *((void *)&v93 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D70 = v93;
              __cxa_guard_release(qword_1004D2D80);
              float32x4_t v77 = v138;
              float32x4_t v78 = v146;
              float32x4_t v79 = v154;
              float32x4_t v80 = v162;
            }
          }
          a11 = (int32x4_t)xmmword_1004D2D70;
          int8x16_t v81 = (int8x16_t)xmmword_1004D2D50;
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v155 = v79;
            float32x4_t v163 = v80;
            float32x4_t v139 = v77;
            float32x4_t v147 = v78;
            int8x16_t v125 = v81;
            int32x4_t v131 = a11;
            int v94 = __cxa_guard_acquire(qword_1004D2D60);
            int8x16_t v81 = v125;
            a11 = v131;
            float32x4_t v77 = v139;
            float32x4_t v78 = v147;
            float32x4_t v79 = v155;
            float32x4_t v80 = v163;
            if (v94)
            {
              *(void *)&long long v95 = 0x8000000080000000;
              *((void *)&v95 + 1) = 0x8000000080000000;
              xmmword_1004D2D50 = v95;
              __cxa_guard_release(qword_1004D2D60);
              int8x16_t v81 = v125;
              a11 = v131;
              float32x4_t v77 = v139;
              float32x4_t v78 = v147;
              float32x4_t v79 = v155;
              float32x4_t v80 = v163;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v156 = v79;
            float32x4_t v164 = v80;
            float32x4_t v140 = v77;
            float32x4_t v148 = v78;
            int8x16_t v126 = v81;
            int32x4_t v132 = a11;
            int v96 = __cxa_guard_acquire(qword_1004D2D80);
            int8x16_t v81 = v126;
            a11 = v132;
            float32x4_t v77 = v140;
            float32x4_t v78 = v148;
            float32x4_t v79 = v156;
            float32x4_t v80 = v164;
            if (v96)
            {
              *(void *)&long long v97 = 0x3F0000003F000000;
              *((void *)&v97 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D70 = v97;
              __cxa_guard_release(qword_1004D2D80);
              int8x16_t v81 = v126;
              a11 = v132;
              float32x4_t v77 = v140;
              float32x4_t v78 = v148;
              float32x4_t v79 = v156;
              float32x4_t v80 = v164;
            }
          }
          int8x16_t v82 = (int8x16_t)xmmword_1004D2D70;
          int8x16_t v83 = (int8x16_t)xmmword_1004D2D50;
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v157 = v79;
            float32x4_t v165 = v80;
            float32x4_t v141 = v77;
            float32x4_t v149 = v78;
            int8x16_t v127 = v81;
            int32x4_t v133 = a11;
            int8x16_t v117 = v83;
            int8x16_t v121 = v82;
            int v98 = __cxa_guard_acquire(qword_1004D2D60);
            int8x16_t v83 = v117;
            int8x16_t v82 = v121;
            int8x16_t v81 = v127;
            a11 = v133;
            float32x4_t v77 = v141;
            float32x4_t v78 = v149;
            float32x4_t v79 = v157;
            float32x4_t v80 = v165;
            if (v98)
            {
              *(void *)&long long v99 = 0x8000000080000000;
              *((void *)&v99 + 1) = 0x8000000080000000;
              xmmword_1004D2D50 = v99;
              __cxa_guard_release(qword_1004D2D60);
              int8x16_t v83 = v117;
              int8x16_t v82 = v121;
              int8x16_t v81 = v127;
              a11 = v133;
              float32x4_t v77 = v141;
              float32x4_t v78 = v149;
              float32x4_t v79 = v157;
              float32x4_t v80 = v165;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v158 = v79;
            float32x4_t v166 = v80;
            float32x4_t v142 = v77;
            float32x4_t v150 = v78;
            int8x16_t v128 = v81;
            int32x4_t v134 = a11;
            int8x16_t v118 = v83;
            int8x16_t v122 = v82;
            int v100 = __cxa_guard_acquire(qword_1004D2D80);
            int8x16_t v83 = v118;
            int8x16_t v82 = v122;
            int8x16_t v81 = v128;
            a11 = v134;
            float32x4_t v77 = v142;
            float32x4_t v78 = v150;
            float32x4_t v79 = v158;
            float32x4_t v80 = v166;
            if (v100)
            {
              *(void *)&long long v101 = 0x3F0000003F000000;
              *((void *)&v101 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D70 = v101;
              __cxa_guard_release(qword_1004D2D80);
              int8x16_t v83 = v118;
              int8x16_t v82 = v122;
              int8x16_t v81 = v128;
              a11 = v134;
              float32x4_t v77 = v142;
              float32x4_t v78 = v150;
              float32x4_t v79 = v158;
              float32x4_t v80 = v166;
            }
          }
          int8x16_t v11 = (int8x16_t)xmmword_1004D2D70;
          int8x16_t v12 = (int8x16_t)xmmword_1004D2D50;
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v159 = v79;
            float32x4_t v167 = v80;
            float32x4_t v143 = v77;
            float32x4_t v151 = v78;
            int8x16_t v129 = v81;
            int32x4_t v135 = a11;
            int8x16_t v119 = v83;
            int8x16_t v123 = v82;
            int8x16_t v113 = v12;
            int8x16_t v115 = v11;
            int v102 = __cxa_guard_acquire(qword_1004D2D60);
            int8x16_t v12 = v113;
            int8x16_t v11 = v115;
            int8x16_t v83 = v119;
            int8x16_t v82 = v123;
            int8x16_t v81 = v129;
            a11 = v135;
            float32x4_t v77 = v143;
            float32x4_t v78 = v151;
            float32x4_t v79 = v159;
            float32x4_t v80 = v167;
            if (v102)
            {
              *(void *)&long long v103 = 0x8000000080000000;
              *((void *)&v103 + 1) = 0x8000000080000000;
              xmmword_1004D2D50 = v103;
              __cxa_guard_release(qword_1004D2D60);
              int8x16_t v12 = v113;
              int8x16_t v11 = v115;
              int8x16_t v83 = v119;
              int8x16_t v82 = v123;
              int8x16_t v81 = v129;
              a11 = v135;
              float32x4_t v77 = v143;
              float32x4_t v78 = v151;
              float32x4_t v79 = v159;
              float32x4_t v80 = v167;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            float32x4_t v160 = v79;
            float32x4_t v168 = v80;
            float32x4_t v144 = v77;
            float32x4_t v152 = v78;
            int8x16_t v130 = v81;
            int32x4_t v136 = a11;
            int8x16_t v120 = v83;
            int8x16_t v124 = v82;
            int8x16_t v114 = v12;
            int8x16_t v116 = v11;
            int v104 = __cxa_guard_acquire(qword_1004D2D80);
            int8x16_t v12 = v114;
            int8x16_t v11 = v116;
            int8x16_t v83 = v120;
            int8x16_t v82 = v124;
            int8x16_t v81 = v130;
            a11 = v136;
            float32x4_t v77 = v144;
            float32x4_t v78 = v152;
            float32x4_t v79 = v160;
            float32x4_t v80 = v168;
            if (v104)
            {
              *(void *)&long long v105 = 0x3F0000003F000000;
              *((void *)&v105 + 1) = 0x3F0000003F000000;
              xmmword_1004D2D70 = v105;
              __cxa_guard_release(qword_1004D2D80);
              int8x16_t v12 = v114;
              int8x16_t v11 = v116;
              int8x16_t v83 = v120;
              int8x16_t v82 = v124;
              int8x16_t v81 = v130;
              a11 = v136;
              float32x4_t v77 = v144;
              float32x4_t v78 = v152;
              float32x4_t v79 = v160;
              float32x4_t v80 = v168;
            }
          }
          float32x4_t v84 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          int8x16_t v85 = (int8x16_t)vmulq_f32(v77, v84);
          int32x4_t v86 = vcvtq_s32_f32(vaddq_f32((float32x4_t)v85, (float32x4_t)vorrq_s8(vandq_s8(v81, v85), (int8x16_t)a11)));
          int8x16_t v87 = (int8x16_t)vmulq_f32(v78, v84);
          int8x16_t v88 = (int8x16_t)vmulq_f32(v79, v84);
          a8 = vcvtq_s32_f32(vaddq_f32((float32x4_t)v88, (float32x4_t)vorrq_s8(vandq_s8(v12, v88), v11)));
          int8x16_t v89 = (int8x16_t)vmulq_f32(v80, v84);
          a10 = (int32x4_t)vandq_s8((int8x16_t)xmmword_1004D2D50, v89);
          a9 = (float32x4_t)vorrq_s8((int8x16_t)a10, (int8x16_t)xmmword_1004D2D70);
          a6 = (uint16x8_t)vqmovn_high_s32(vqmovn_s32(v86), vcvtq_s32_f32(vaddq_f32((float32x4_t)v87, (float32x4_t)vorrq_s8(vandq_s8(v83, v87), v82))));
          a7 = (uint16x8_t)vqmovn_high_s32(vqmovn_s32(a8), vcvtq_s32_f32(vaddq_f32((float32x4_t)v89, a9)));
          *(uint8x16_t *)&v15[v75] = vqmovn_high_u16(vqmovn_u16(a6), a7);
          v75 += 16;
          v76 += 4;
        }
        while (v174 - 16 > (int)v75);
        v15 += v75;
        int v14 = a4;
        uint64_t v19 = v169;
        if ((int)v75 >= v174) {
          goto LABEL_10;
        }
LABEL_83:
        float32x4_t v106 = (float *)&v176[4 * v75 + 4];
        do
        {
          float v107 = rintf(*(v106 - 1) * 255.0);
          int v108 = (uint64_t)v107 & ~((int)(uint64_t)v107 >> 31);
          if (v108 >= 255) {
            LOBYTE(v108) = -1;
          }
          char *v15 = v108;
          float v109 = rintf(*v106 * 255.0);
          int v110 = (uint64_t)v109 & ~((int)(uint64_t)v109 >> 31);
          if (v110 >= 255) {
            LOBYTE(v110) = -1;
          }
          v15[1] = v110;
          float v111 = rintf(v106[1] * 255.0);
          int v112 = (uint64_t)v111 & ~((int)(uint64_t)v111 >> 31);
          if (v112 >= 255) {
            LOBYTE(v112) = -1;
          }
          v15[2] = v112;
          if (v19 == 4) {
            v15[3] = -1;
          }
          v15 += v19;
          v106 += 3;
          LODWORD(v75) = v75 + 3;
        }
        while (v174 > (int)v75);
        goto LABEL_10;
      }
      LODWORD(v75) = 0;
      if (v174 > 0) {
        goto LABEL_83;
      }
LABEL_10:
      int v22 = v172;
      int v21 = v173 + 256;
      v16 += 768;
      int v20 = v171 + 1;
    }
    while (v173 + 256 < v14);
  }
}

void sub_100311D30(_Unwind_Exception *a1)
{
}

void sub_100311D48(_Unwind_Exception *a1)
{
}

void sub_100311D60(_Unwind_Exception *a1)
{
}

int *sub_100311D7C(int *result, uint64_t a2, char *a3, int a4)
{
  uint64_t v5 = *result;
  int v6 = 3 * a4;
  if (a4 < 17)
  {
    LODWORD(v7) = 0;
    if (v6 <= 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t v7 = 0;
  uint64_t v8 = qword_1004F7350;
  uint64_t v9 = *(void *)algn_1004F7358;
  uint64_t v10 = qword_1004F7360;
  uint64_t v92 = *result;
  uint64_t v91 = 16 * v5;
  uint64_t v90 = v6 - 48;
  v11.i64[0] = 0x200000002000;
  v11.i64[1] = 0x200000002000;
  v12.i64[0] = 0xD0000000DLL;
  v12.i64[1] = 0xD0000000DLL;
  v13.i64[0] = 0xF0000000FLL;
  v13.i64[1] = 0xF0000000FLL;
  *(void *)&long long v14 = -1;
  *((void *)&v14 + 1) = -1;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = a2;
    float v17 = (const char *)(a2 + v7);
    int8x16x3_t v100 = vld3q_s8(v17);
    v98[0] = v100.val[0];
    v97[0] = v100.val[1];
    v96[0] = v100.val[2];
    float v18 = (int *)v99;
    do
    {
      unsigned int v19 = *((unsigned __int8 *)v96 + v15) | (*((unsigned __int8 *)v98 + v15) << 8);
      uint64_t v20 = *(unsigned __int16 *)&byte_1004F7270[4 * *((unsigned __int8 *)v98 + v15) + 1576];
      unint64_t v21 = *(int *)(v9 + 4 * v19)
          * (uint64_t)*(int *)(v8 + 4 * (*((unsigned __int8 *)v97 + v15) | (*((unsigned __int8 *)v98 + v15) << 8)));
      unint64_t v22 = ((((*(void *)(v10 + 8 * v19) - 85 * v21) >> 14) + 0x3FFFFEC14000) * v20) >> 14;
      int v23 = (int)((v21 >> 14) * v20) >> 14;
      int v24 = (int)v22 / 256 + (int)v22 / 0x10000;
      if (v23 >= 0x8000) {
        int v23 = 0x8000;
      }
      int v25 = v23 & ~(v23 >> 31);
      if (v24 >= 0x8000) {
        int v24 = 0x8000;
      }
      *(v18 - 32) = v25;
      *(v18 - 16) = v20;
      *v18++ = v24 & ~(v24 >> 31);
      ++v15;
    }
    while (v15 != 16);
    uint64_t v26 = 0;
    v98[0] = v98[4];
    v98[1] = v98[5];
    v98[2] = v98[6];
    v98[3] = v98[7];
    v97[0] = v98[8];
    v97[1] = v98[9];
    v97[2] = v98[10];
    v97[3] = v98[11];
    v96[2] = v99[2];
    v96[3] = v99[3];
    v96[0] = v99[0];
    v96[1] = v99[1];
    float v27 = (const float *)(result + 1);
    unint64_t v28 = (const float *)(result + 2);
    unint64_t v29 = (const float *)(result + 3);
    float32x4_t v30 = (const float *)(result + 4);
    float32x4_t v31 = (const float *)(result + 5);
    float v32 = (const float *)(result + 6);
    uint8x16_t v33 = (const float *)(result + 7);
    uint8x16_t v34 = (const float *)(result + 8);
    int32x4_t v35 = (int32x4_t)vld1q_dup_f32(v28);
    int32x4_t v36 = (int32x4_t)vld1q_dup_f32(v30);
    int32x4_t v37 = (int32x4_t)vld1q_dup_f32(v32);
    int32x4_t v38 = (int32x4_t)vld1q_dup_f32(v34);
    int32x4_t v39 = (int32x4_t)vld1q_dup_f32(v29);
    int32x4_t v40 = (int32x4_t)vld1q_dup_f32(v33);
    int32x4_t v41 = (int32x4_t)vld1q_dup_f32(v27);
    float32x4_t v42 = (const float *)(result + 9);
    int32x4_t v43 = (int32x4_t)vld1q_dup_f32(v31);
    int32x4_t v44 = (int32x4_t)vld1q_dup_f32(v42);
    uint64_t v45 = *((void *)result + 5);
    do
    {
      int32x4_t v46 = (int32x4_t)v98[v26];
      int32x4_t v47 = (int32x4_t)v97[v26];
      int32x4_t v48 = (int32x4_t)v96[v26];
      int32x4_t v49 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v47, v35), v46, v41), v48, v39), v11), v12);
      int32x4_t v50 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v47, v43), v46, v36), v48, v37), v11), v12);
      int32x4_t v51 = vshlq_s32(vaddq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32(v47, v38), v46, v40), v48, v44), v11), v12);
      int32x4_t v52 = vmaxq_s32(vminq_s32(v49, v13), (int32x4_t)0);
      uint64_t v53 = v52.u32[1];
      __int32 v54 = *(unsigned __int16 *)(v45 + 2 * v52.u32[0]);
      v52.i16[1] = v52.i16[5];
      v52.i16[0] = *(_WORD *)(v45 + 2 * v52.u32[2]);
      v52.i32[1] = *(unsigned __int16 *)(v45 + 2 * v52.u32[3]);
      v49.i32[0] = v54;
      v49.i32[1] = *(unsigned __int16 *)(v45 + 2 * v53);
      v49.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v52.i8, (int8x8_t)0xFFFF0000FFFFLL);
      int32x4_t v55 = vmaxq_s32(vminq_s32(v50, v13), (int32x4_t)0);
      v95[v26] = (uint32x4_t)v49;
      unsigned int v56 = *(unsigned __int16 *)(v45 + 2 * v55.u32[0]);
      LODWORD(v53) = *(unsigned __int16 *)(v45 + 2 * v55.u32[1]);
      v55.i16[1] = v55.i16[5];
      v55.i16[0] = *(_WORD *)(v45 + 2 * v55.u32[2]);
      v55.i32[1] = *(unsigned __int16 *)(v45 + 2 * v55.u32[3]);
      v48.i64[0] = __PAIR64__(v53, v56);
      v48.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v55.i8, (int8x8_t)0xFFFF0000FFFFLL);
      v94[v26] = (uint32x4_t)v48;
      int32x4_t v57 = vmaxq_s32(vminq_s32(v51, v13), (int32x4_t)0);
      v58.i64[0] = v57.u32[2];
      v58.i64[1] = v57.u32[3];
      uint32x4_t v59 = v58;
      v58.i64[0] = v57.u32[0];
      v58.i64[1] = v57.u32[1];
      v57.i16[0] = *(_WORD *)(v45 + 2 * v59.i64[0]);
      v57.i32[1] = *(unsigned __int16 *)(v45 + 2 * v59.i64[1]);
      v59.i32[0] = *(unsigned __int16 *)(v45 + 2 * v58.i64[0]);
      v59.i32[1] = *(unsigned __int16 *)(v45 + 2 * v58.i64[1]);
      v59.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v57.i8, (int8x8_t)0xFFFF0000FFFFLL);
      v93[v26++] = v59;
    }
    while (v26 != 4);
    uint8x16_t v60 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v93[0]), v93[1])), vqmovn_high_u32(vqmovn_u32(v93[2]), v93[3]));
    uint8x16_t v61 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v94[0]), v94[1])), vqmovn_high_u32(vqmovn_u32(v94[2]), v94[3]));
    uint8x16_t v62 = vqmovn_high_u16(vqmovn_u16(vqmovn_high_u32(vqmovn_u32(v95[0]), v95[1])), vqmovn_high_u32(vqmovn_u32(v95[2]), v95[3]));
    if (v92 == 4) {
      vst4q_s8(a3, *(int8x16x4_t *)(&v14 - 3));
    }
    else {
      vst3q_s8(a3, *(int8x16x3_t *)v60.i8);
    }
    a2 = v16;
    v7 += 48;
    a3 += v91;
  }
  while (v7 < v90);
  uint64_t v5 = v92;
  int v6 = 3 * a4;
  if ((int)v7 < 3 * a4)
  {
LABEL_18:
    uint64_t v63 = qword_1004F7350;
    uint64_t v64 = *(void *)algn_1004F7358;
    uint32x4_t v65 = a3 + 1;
    uint64_t v66 = qword_1004F7360;
    uint64_t v7 = v7;
    do
    {
      uint64_t v67 = *(unsigned __int16 *)&byte_1004F7270[4 * *(unsigned __int8 *)(a2 + v7) + 1576];
      unsigned int v68 = *(unsigned __int8 *)(a2 + v7 + 2) | (*(unsigned __int8 *)(a2 + v7) << 8);
      uint64_t v69 = *(int *)(v64 + 4 * v68)
          * (uint64_t)*(int *)(v63 + 4 * (*(unsigned __int8 *)(a2 + v7 + 1) | (*(unsigned __int8 *)(a2 + v7) << 8)));
      unint64_t v70 = v69 + 0x3FFF;
      if (v69 >= 0) {
        unint64_t v70 = *(int *)(v64 + 4 * v68)
      }
            * (uint64_t)*(int *)(v63 + 4 * (*(unsigned __int8 *)(a2 + v7 + 1) | (*(unsigned __int8 *)(a2 + v7) << 8)));
      int v71 = (int)((v70 >> 14) * v67) / 0x4000;
      uint64_t v72 = *(void *)(v66 + 8 * v68) - 85 * v69;
      unint64_t v73 = ((v72 / 0x4000 - 20889600) * v67 + ((v72 / 0x4000 - 20889600) * v67 < 0 ? 0x3FFFuLL : 0)) >> 14;
      int v74 = (int)v73 / 256 + (int)v73 / 0x10000;
      if (v71 >= 0x8000) {
        int v71 = 0x8000;
      }
      int v75 = v71 & ~(v71 >> 31);
      if (v74 >= 0x8000) {
        int v74 = 0x8000;
      }
      int v76 = v74 & ~(v74 >> 31);
      int v77 = (v75 * result[1] + result[2] * (int)v67 + v76 * result[3] + 0x2000) >> 14;
      int v78 = (v75 * result[4] + result[5] * (int)v67 + v76 * result[6] + 0x2000) >> 14;
      int v79 = (result[8] * (int)v67 + result[7] * v75 + v76 * result[9] + 0x2000) >> 14;
      if (v77 >= 4095) {
        int v80 = 4095;
      }
      else {
        int v80 = v77;
      }
      unsigned int v81 = v80 & ~(v80 >> 31);
      if (v78 >= 4095) {
        int v82 = 4095;
      }
      else {
        int v82 = v78;
      }
      unsigned int v83 = v82 & ~(v82 >> 31);
      if (v79 >= 4095) {
        int v79 = 4095;
      }
      uint64_t v84 = *((void *)result + 5);
      int v85 = *(unsigned __int16 *)(v84 + 2 * v81);
      int v86 = *(unsigned __int16 *)(v84 + 2 * v83);
      int v87 = *(unsigned __int16 *)(v84 + 2 * (v79 & ~(v79 >> 31)));
      if (v87 >= 255) {
        LOBYTE(v87) = -1;
      }
      *(v65 - 1) = v87;
      if (v86 >= 255) {
        char v88 = -1;
      }
      else {
        char v88 = v86;
      }
      *uint32x4_t v65 = v88;
      if (v85 >= 255) {
        char v89 = -1;
      }
      else {
        char v89 = v85;
      }
      v65[1] = v89;
      if (v5 == 4) {
        v65[2] = -1;
      }
      v7 += 3;
      v65 += v5;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t sub_100312368(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(result + 48)) {
    uint64_t v4 = qword_1004F7320;
  }
  else {
    uint64_t v4 = 0;
  }
  if (a4 >= 1)
  {
    uint64_t v5 = 0;
    float v6 = *(float *)(result + 4);
    float v7 = *(float *)(result + 8);
    float v8 = *(float *)(result + 12);
    float v9 = *(float *)(result + 16);
    float v10 = *(float *)(result + 20);
    float v11 = *(float *)(result + 24);
    float v12 = *(float *)(result + 28);
    float v13 = *(float *)(result + 32);
    uint64_t v14 = *(int *)result;
    uint64_t v15 = 3 * a4;
    uint64_t v16 = a3 + 8;
    float v17 = (float *)(a2 + 4);
    float v18 = *(float *)(result + 36);
    float v19 = *(float *)(result + 40);
    float v20 = *(float *)(result + 44);
    __n128 result = 1023;
    do
    {
      float v21 = *(v17 - 1);
      float v22 = v21 * 0.0011071;
      if (v21 >= 8.0) {
        float v22 = (float)((float)(v21 + 16.0) * 0.0086207)
      }
            * (float)((float)((float)(v21 + 16.0) * 0.0086207) * (float)((float)(v21 + 16.0) * 0.0086207));
      float v23 = (float)(*v17 + (float)(v21 * v19)) * 3.0;
      float v24 = 0.25 / (float)(v17[1] + (float)(v21 * v20));
      if (v24 > 0.25) {
        float v24 = 0.25;
      }
      if (v24 < -0.25) {
        float v24 = -0.25;
      }
      float v25 = v24 * (float)(v23 * (float)(v22 * 3.0));
      float v26 = (float)((float)((float)-(float)(v23 - (float)(v21 * 156.0)) * v24) + -5.0) * v22;
      float v27 = (float)((float)(v7 * v22) + (float)(v25 * v6)) + (float)(v26 * v8);
      float v28 = (float)((float)(v10 * v22) + (float)(v25 * v9)) + (float)(v26 * v11);
      float v29 = (float)((float)(v13 * v22) + (float)(v25 * v12)) + (float)(v26 * v18);
      if (v27 >= 0.0) {
        float v30 = v27;
      }
      else {
        float v30 = 0.0;
      }
      if (v30 > 1.0) {
        float v30 = 1.0;
      }
      if (v28 >= 0.0) {
        float v31 = v28;
      }
      else {
        float v31 = 0.0;
      }
      if (v31 > 1.0) {
        float v31 = 1.0;
      }
      if (v29 >= 0.0) {
        float v32 = v29;
      }
      else {
        float v32 = 0.0;
      }
      if (v32 > 1.0) {
        float v32 = 1.0;
      }
      if (v4)
      {
        int v33 = vcvts_n_s32_f32(v30, 0xAuLL);
        int v34 = v33 & ~(v33 >> 31);
        if (v34 >= 0x3FF) {
          int v34 = 1023;
        }
        float v30 = *(float *)(v4 + 4 * (4 * v34))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v34) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v34) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v34) + 12)
                                                    * (float)((float)(v30 * 1024.0) - (float)v34)))
                                    * (float)((float)(v30 * 1024.0) - (float)v34)))
                    * (float)((float)(v30 * 1024.0) - (float)v34));
        int v35 = vcvts_n_s32_f32(v31, 0xAuLL);
        int v36 = v35 & ~(v35 >> 31);
        if (v36 >= 0x3FF) {
          int v36 = 1023;
        }
        float v31 = *(float *)(v4 + 4 * (4 * v36))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v36) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v36) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v36) + 12)
                                                    * (float)((float)(v31 * 1024.0) - (float)v36)))
                                    * (float)((float)(v31 * 1024.0) - (float)v36)))
                    * (float)((float)(v31 * 1024.0) - (float)v36));
        int v37 = vcvts_n_s32_f32(v32, 0xAuLL);
        int v38 = v37 & ~(v37 >> 31);
        if (v38 >= 0x3FF) {
          int v38 = 1023;
        }
        float v32 = *(float *)(v4 + 4 * (4 * v38))
            + (float)((float)(*(float *)(v4 + 4 * (4 * v38) + 4)
                            + (float)((float)(*(float *)(v4 + 4 * (4 * v38) + 8)
                                            + (float)(*(float *)(v4 + 4 * (4 * v38) + 12)
                                                    * (float)((float)(v32 * 1024.0) - (float)v38)))
                                    * (float)((float)(v32 * 1024.0) - (float)v38)))
                    * (float)((float)(v32 * 1024.0) - (float)v38));
      }
      *(float *)(v16 - 8) = v30;
      *(float *)(v16 - 4) = v31;
      *(float *)uint64_t v16 = v32;
      if (v14 == 4) {
        *(_DWORD *)(v16 + 4) = 1065353216;
      }
      v5 += 3;
      v16 += 4 * v14;
      v17 += 3;
    }
    while (v5 < v15);
  }
  return result;
}

void sub_1003125A8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003125E0(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v7, &off_1004990B8);
  int v4 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v5 = *(void *)(a1 + 24) + *(void *)(a1 + 32) * v4;
    uint64_t v6 = *(void *)(a1 + 8) + *(void *)(a1 + 16) * v4;
    do
    {
      sub_100312368(*(void *)(a1 + 48), v6, v5, *(_DWORD *)(a1 + 40));
      ++v4;
      v6 += *(void *)(a1 + 16);
      v5 += *(void *)(a1 + 32);
    }
    while (v4 < a2[1]);
  }
  if (v8) {
    sub_1002D6888(v7);
  }
}

void sub_100312694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003126A8(uint64_t result, int *a2)
{
  uint64_t v2 = 2 * *a2;
  uint64_t v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = *(void *)(result + 48);
      uint64_t v6 = *(void *)(result + 32) + v5 * v2;
      unint64_t v7 = *(void *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      uint64_t v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(result + 8);
          uint64_t v11 = *(void *)(result + 16);
          float v12 = (unsigned char *)(v10 + v11 * v8 + 2);
          float v13 = (unsigned char *)(v10 + v11 * v2 + 3);
          uint64_t v14 = v6 + 1 + v5;
          do
          {
            int v15 = *(unsigned __int8 *)(v7 + v9) - 128;
            unsigned int v16 = *(unsigned __int8 *)(v6 + v9);
            if (v16 <= 0x10) {
              unsigned int v16 = 16;
            }
            unsigned int v17 = 1220542 * v16 - 19528672;
            int32x2_t v18 = vmla_s32((int32x2_t)((0x80000 - 409993 * v15) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v7 + 1 + v9) - 128), (int32x2_t)0x198937FFF2FDF4);
            int v19 = 2116026 * v15 + 0x80000;
            int32x2_t v20 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v17), v18), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            *(v13 - 2) = v20.i8[0];
            int v21 = ((int)(v17 + v19) >> 20) & ~((int)(v17 + v19) >> 31);
            *(v13 - 1) = v20.i8[4];
            if (v21 >= 255) {
              LOBYTE(v21) = -1;
            }
            *(v13 - 3) = v21;
            unsigned int v22 = *(unsigned __int8 *)(v6 + 1 + v9);
            if (v22 <= 0x10) {
              unsigned int v22 = 16;
            }
            unsigned int v23 = 1220542 * v22 - 19528672;
            __int32 v24 = v18.i32[1];
            int v25 = ((int)(v23 + v18.i32[1]) >> 20) & ~((int)(v23 + v18.i32[1]) >> 31);
            int32x2_t v26 = vdup_n_s32(v23);
            int32x2_t v27 = vdup_lane_s32(v18, 0);
            if (v25 >= 255) {
              char v28 = -1;
            }
            else {
              char v28 = v25;
            }
            v27.i32[0] = v19;
            v13[2] = v28;
            int32x2_t v29 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(v26, v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            unsigned char *v13 = v29.i8[0];
            v13[1] = v29.i8[4];
            unsigned int v30 = *(unsigned __int8 *)(v14 + v9 - 1);
            if (v30 <= 0x10) {
              unsigned int v30 = 16;
            }
            unsigned int v31 = 1220542 * v30 - 19528672;
            int v32 = ((int)(v31 + v24) >> 20) & ~((int)(v31 + v24) >> 31);
            int32x2_t v33 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v31), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            if (v32 >= 255) {
              LOBYTE(v32) = -1;
            }
            *float v12 = v32;
            *(v12 - 2) = v33.i8[0];
            *(v12 - 1) = v33.i8[4];
            unsigned int v34 = *(unsigned __int8 *)(v14 + v9);
            if (v34 <= 0x10) {
              unsigned int v34 = 16;
            }
            unsigned int v35 = 1220542 * v34 - 19528672;
            int v36 = ((int)(v35 + v24) >> 20) & ~((int)(v35 + v24) >> 31);
            if (v36 >= 255) {
              LOBYTE(v36) = -1;
            }
            v12[3] = v36;
            int32x2_t v37 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v35), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v12[1] = v37.i8[0];
            v12[2] = v37.i8[4];
            v9 += 2;
            uint64_t v4 = *(int *)(result + 24);
            v12 += 6;
            v13 += 6;
          }
          while (v9 < v4);
          uint64_t v5 = *(void *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_100312914(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_10031294C(uint64_t result, int *a2)
{
  uint64_t v2 = 2 * *a2;
  uint64_t v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = *(void *)(result + 48);
      uint64_t v6 = *(void *)(result + 32) + v5 * v2;
      unint64_t v7 = *(void *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      uint64_t v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = v6 + v5;
          uint64_t v11 = *(void *)(result + 8);
          uint64_t v12 = *(void *)(result + 16);
          float v13 = (unsigned char *)(v11 + v12 * v8 + 2);
          uint64_t v14 = (unsigned char *)(v11 + v12 * v2 + 3);
          do
          {
            int v15 = *(unsigned __int8 *)(v7 + v9 + 1) - 128;
            unsigned int v16 = *(unsigned __int8 *)(v6 + v9);
            if (v16 <= 0x10) {
              unsigned int v16 = 16;
            }
            unsigned int v17 = 1220542 * v16 - 19528672;
            int32x2_t v18 = vmla_s32((int32x2_t)((0x80000 - 409993 * v15) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v7 + v9) - 128), (int32x2_t)0x198937FFF2FDF4);
            int v19 = 2116026 * v15 + 0x80000;
            int32x2_t v20 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v17), v18), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            *(v14 - 2) = v20.i8[0];
            int v21 = ((int)(v17 + v19) >> 20) & ~((int)(v17 + v19) >> 31);
            *(v14 - 1) = v20.i8[4];
            if (v21 >= 255) {
              LOBYTE(v21) = -1;
            }
            *(v14 - 3) = v21;
            unsigned int v22 = *(unsigned __int8 *)(v6 + v9 + 1);
            if (v22 <= 0x10) {
              unsigned int v22 = 16;
            }
            unsigned int v23 = 1220542 * v22 - 19528672;
            __int32 v24 = v18.i32[1];
            int v25 = ((int)(v23 + v18.i32[1]) >> 20) & ~((int)(v23 + v18.i32[1]) >> 31);
            int32x2_t v26 = vdup_n_s32(v23);
            int32x2_t v27 = vdup_lane_s32(v18, 0);
            if (v25 >= 255) {
              char v28 = -1;
            }
            else {
              char v28 = v25;
            }
            v27.i32[0] = v19;
            v14[2] = v28;
            int32x2_t v29 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(v26, v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            unsigned char *v14 = v29.i8[0];
            v14[1] = v29.i8[4];
            unsigned int v30 = *(unsigned __int8 *)(v10 + v9);
            if (v30 <= 0x10) {
              unsigned int v30 = 16;
            }
            unsigned int v31 = 1220542 * v30 - 19528672;
            int v32 = ((int)(v31 + v24) >> 20) & ~((int)(v31 + v24) >> 31);
            int32x2_t v33 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v31), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            if (v32 >= 255) {
              LOBYTE(v32) = -1;
            }
            unsigned char *v13 = v32;
            *(v13 - 2) = v33.i8[0];
            *(v13 - 1) = v33.i8[4];
            unsigned int v34 = *(unsigned __int8 *)(v10 + v9 + 1);
            if (v34 <= 0x10) {
              unsigned int v34 = 16;
            }
            unsigned int v35 = 1220542 * v34 - 19528672;
            int v36 = ((int)(v35 + v24) >> 20) & ~((int)(v35 + v24) >> 31);
            if (v36 >= 255) {
              LOBYTE(v36) = -1;
            }
            v13[3] = v36;
            int32x2_t v37 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v35), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v13[1] = v37.i8[0];
            v13[2] = v37.i8[4];
            v9 += 2;
            uint64_t v4 = *(int *)(result + 24);
            v13 += 6;
            v14 += 6;
          }
          while (v9 < v4);
          uint64_t v5 = *(void *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_100312BA8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100312BE0(uint64_t result, int *a2)
{
  uint64_t v2 = 2 * *a2;
  uint64_t v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = *(void *)(result + 48);
      uint64_t v6 = *(void *)(result + 32) + v5 * v2;
      unint64_t v7 = *(void *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      uint64_t v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(result + 16);
          uint64_t v11 = *(void *)(result + 8) + 2;
          uint64_t v12 = (unsigned char *)(v11 + v10 * v8);
          float v13 = (unsigned char *)(v11 + v10 * v2);
          uint64_t v14 = v6 + 1 + v5;
          do
          {
            int v15 = *(unsigned __int8 *)(v7 + v9) - 128;
            int v16 = *(unsigned __int8 *)(v7 + 1 + v9) - 128;
            int v17 = 1673527 * v16 + 0x80000;
            int v18 = -852492 * v16;
            int v19 = 2116026 * v15 + 0x80000;
            int v20 = v18 - 409993 * v15;
            unsigned int v21 = *(unsigned __int8 *)(v6 + v9);
            if (v21 <= 0x10) {
              unsigned int v21 = 16;
            }
            int v22 = 1220542 * v21 - 19528672;
            int v23 = v20 + 0x80000;
            int v24 = ((v22 + v17) >> 20) & ~((v22 + v17) >> 31);
            if (v24 >= 255) {
              LOBYTE(v24) = -1;
            }
            *(v13 - 2) = v24;
            int v25 = ((v22 + v23) >> 20) & ~((v22 + v23) >> 31);
            if (v25 >= 255) {
              LOBYTE(v25) = -1;
            }
            *(v13 - 1) = v25;
            int v26 = ((v22 + v19) >> 20) & ~((v22 + v19) >> 31);
            if (v26 >= 255) {
              LOBYTE(v26) = -1;
            }
            unsigned char *v13 = v26;
            unsigned int v27 = *(unsigned __int8 *)(v6 + 1 + v9);
            if (v27 <= 0x10) {
              unsigned int v27 = 16;
            }
            int v28 = 1220542 * v27 - 19528672;
            int v29 = ((v28 + v17) >> 20) & ~((v28 + v17) >> 31);
            if (v29 >= 255) {
              LOBYTE(v29) = -1;
            }
            v13[1] = v29;
            int v30 = ((v28 + v23) >> 20) & ~((v28 + v23) >> 31);
            if (v30 >= 255) {
              LOBYTE(v30) = -1;
            }
            v13[2] = v30;
            int v31 = ((v28 + v19) >> 20) & ~((v28 + v19) >> 31);
            if (v31 >= 255) {
              LOBYTE(v31) = -1;
            }
            v13[3] = v31;
            unsigned int v32 = *(unsigned __int8 *)(v14 + v9 - 1);
            if (v32 <= 0x10) {
              unsigned int v32 = 16;
            }
            int v33 = 1220542 * v32 - 19528672;
            int v34 = ((v33 + v17) >> 20) & ~((v33 + v17) >> 31);
            if (v34 >= 255) {
              LOBYTE(v34) = -1;
            }
            *(v12 - 2) = v34;
            if ((((v33 + v23) >> 20) & ~((v33 + v23) >> 31)) >= 255) {
              char v35 = -1;
            }
            else {
              char v35 = ((v33 + v23) >> 20) & ~((v33 + v23) >> 31);
            }
            int v36 = ((v33 + v19) >> 20) & ~((v33 + v19) >> 31);
            *(v12 - 1) = v35;
            if (v36 >= 255) {
              LOBYTE(v36) = -1;
            }
            *uint64_t v12 = v36;
            unsigned int v37 = *(unsigned __int8 *)(v14 + v9);
            if (v37 <= 0x10) {
              unsigned int v37 = 16;
            }
            int v38 = 1220542 * v37 - 19528672;
            int v39 = ((v38 + v17) >> 20) & ~((v38 + v17) >> 31);
            if (v39 >= 255) {
              LOBYTE(v39) = -1;
            }
            v12[1] = v39;
            int v40 = ((v38 + v23) >> 20) & ~((v38 + v23) >> 31);
            if (v40 >= 255) {
              LOBYTE(v40) = -1;
            }
            int v41 = ((v38 + v19) >> 20) & ~((v38 + v19) >> 31);
            if (v41 >= 255) {
              LOBYTE(v41) = -1;
            }
            v12[2] = v40;
            v12[3] = v41;
            v9 += 2;
            uint64_t v4 = *(int *)(result + 24);
            v12 += 6;
            v13 += 6;
          }
          while (v9 < v4);
          uint64_t v5 = *(void *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_100312E84(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100312EBC(uint64_t result, int *a2)
{
  uint64_t v2 = 2 * *a2;
  uint64_t v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = *(void *)(result + 48);
      uint64_t v6 = *(void *)(result + 32) + v5 * v2;
      unint64_t v7 = *(void *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      uint64_t v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = v6 + v5;
          uint64_t v11 = *(void *)(result + 16);
          uint64_t v12 = *(void *)(result + 8) + 2;
          float v13 = (unsigned char *)(v12 + v11 * v8);
          uint64_t v14 = (unsigned char *)(v12 + v11 * v2);
          do
          {
            int v15 = *(unsigned __int8 *)(v7 + v9 + 1) - 128;
            int v16 = *(unsigned __int8 *)(v7 + v9) - 128;
            int v17 = 1673527 * v16 + 0x80000;
            int v18 = -852492 * v16;
            int v19 = 2116026 * v15 + 0x80000;
            int v20 = v18 - 409993 * v15;
            unsigned int v21 = *(unsigned __int8 *)(v6 + v9);
            if (v21 <= 0x10) {
              unsigned int v21 = 16;
            }
            int v22 = 1220542 * v21 - 19528672;
            int v23 = v20 + 0x80000;
            int v24 = ((v22 + v17) >> 20) & ~((v22 + v17) >> 31);
            if (v24 >= 255) {
              LOBYTE(v24) = -1;
            }
            *(v14 - 2) = v24;
            int v25 = ((v22 + v23) >> 20) & ~((v22 + v23) >> 31);
            if (v25 >= 255) {
              LOBYTE(v25) = -1;
            }
            *(v14 - 1) = v25;
            int v26 = ((v22 + v19) >> 20) & ~((v22 + v19) >> 31);
            if (v26 >= 255) {
              LOBYTE(v26) = -1;
            }
            unsigned char *v14 = v26;
            unsigned int v27 = *(unsigned __int8 *)(v6 + v9 + 1);
            if (v27 <= 0x10) {
              unsigned int v27 = 16;
            }
            int v28 = 1220542 * v27 - 19528672;
            int v29 = ((v28 + v17) >> 20) & ~((v28 + v17) >> 31);
            if (v29 >= 255) {
              LOBYTE(v29) = -1;
            }
            v14[1] = v29;
            int v30 = ((v28 + v23) >> 20) & ~((v28 + v23) >> 31);
            if (v30 >= 255) {
              LOBYTE(v30) = -1;
            }
            v14[2] = v30;
            int v31 = ((v28 + v19) >> 20) & ~((v28 + v19) >> 31);
            if (v31 >= 255) {
              LOBYTE(v31) = -1;
            }
            v14[3] = v31;
            unsigned int v32 = *(unsigned __int8 *)(v10 + v9);
            if (v32 <= 0x10) {
              unsigned int v32 = 16;
            }
            int v33 = 1220542 * v32 - 19528672;
            int v34 = ((v33 + v17) >> 20) & ~((v33 + v17) >> 31);
            if (v34 >= 255) {
              LOBYTE(v34) = -1;
            }
            *(v13 - 2) = v34;
            if ((((v33 + v23) >> 20) & ~((v33 + v23) >> 31)) >= 255) {
              char v35 = -1;
            }
            else {
              char v35 = ((v33 + v23) >> 20) & ~((v33 + v23) >> 31);
            }
            int v36 = ((v33 + v19) >> 20) & ~((v33 + v19) >> 31);
            *(v13 - 1) = v35;
            if (v36 >= 255) {
              LOBYTE(v36) = -1;
            }
            unsigned char *v13 = v36;
            unsigned int v37 = *(unsigned __int8 *)(v10 + v9 + 1);
            if (v37 <= 0x10) {
              unsigned int v37 = 16;
            }
            int v38 = 1220542 * v37 - 19528672;
            int v39 = ((v38 + v17) >> 20) & ~((v38 + v17) >> 31);
            if (v39 >= 255) {
              LOBYTE(v39) = -1;
            }
            v13[1] = v39;
            int v40 = ((v38 + v23) >> 20) & ~((v38 + v23) >> 31);
            if (v40 >= 255) {
              LOBYTE(v40) = -1;
            }
            int v41 = ((v38 + v19) >> 20) & ~((v38 + v19) >> 31);
            if (v41 >= 255) {
              LOBYTE(v41) = -1;
            }
            v13[2] = v40;
            v13[3] = v41;
            v9 += 2;
            uint64_t v4 = *(int *)(result + 24);
            v13 += 6;
            v14 += 6;
          }
          while (v9 < v4);
          uint64_t v5 = *(void *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_10031314C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100313184(uint64_t result, int *a2)
{
  uint64_t v2 = 2 * *a2;
  uint64_t v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = *(void *)(result + 48);
      uint64_t v6 = *(void *)(result + 32) + v5 * v2;
      unint64_t v7 = *(void *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      uint64_t v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(result + 8);
          uint64_t v11 = *(void *)(result + 16);
          uint64_t v12 = v11 * v2;
          uint64_t v13 = v11 * v8;
          uint64_t v14 = v6 + 1 + v5;
          do
          {
            int v15 = *(unsigned __int8 *)(v7 + v9) - 128;
            unsigned int v16 = *(unsigned __int8 *)(v6 + v9);
            if (v16 <= 0x10) {
              unsigned int v16 = 16;
            }
            unsigned int v17 = 1220542 * v16 - 19528672;
            int32x2_t v18 = vmla_s32((int32x2_t)((0x80000 - 409993 * v15) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v7 + 1 + v9) - 128), (int32x2_t)0x198937FFF2FDF4);
            int v19 = 2116026 * v15 + 0x80000;
            int32x2_t v20 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v17), v18), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            unsigned int v21 = (unsigned char *)(v10 + v12);
            *(unsigned char *)(v10 + v12 + 1) = v20.i8[0];
            int v22 = ((int)(v17 + v19) >> 20) & ~((int)(v17 + v19) >> 31);
            if (v22 >= 255) {
              LOBYTE(v22) = -1;
            }
            *unsigned int v21 = v22;
            v21[3] = -1;
            v21[2] = v20.i8[4];
            unsigned int v23 = *(unsigned __int8 *)(v6 + 1 + v9);
            if (v23 <= 0x10) {
              unsigned int v23 = 16;
            }
            __int32 v24 = v18.i32[1];
            unsigned int v25 = 1220542 * v23 - 19528672;
            int v26 = ((int)(v25 + v18.i32[1]) >> 20) & ~((int)(v25 + v18.i32[1]) >> 31);
            int32x2_t v27 = vdup_lane_s32(v18, 0);
            v27.i32[0] = v19;
            int32x2_t v28 = vadd_s32(vdup_n_s32(v25), v27);
            if (v26 >= 255) {
              char v29 = -1;
            }
            else {
              char v29 = v26;
            }
            int32x2_t v30 = vmin_s32(vmax_s32(vshr_n_s32(v28, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v21[6] = v29;
            v21[4] = v30.i8[0];
            v21[5] = v30.i8[4];
            v21[7] = -1;
            int v31 = (unsigned char *)(v10 + v13);
            unsigned int v32 = *(unsigned __int8 *)(v14 + v9 - 1);
            if (v32 <= 0x10) {
              unsigned int v32 = 16;
            }
            unsigned int v33 = 1220542 * v32 - 19528672;
            int32x2_t v34 = vadd_s32(vdup_n_s32(v33), v27);
            if ((((int)(v33 + v24) >> 20) & ~((int)(v33 + v24) >> 31)) >= 255) {
              char v35 = -1;
            }
            else {
              char v35 = ((int)(v33 + v24) >> 20) & ~((int)(v33 + v24) >> 31);
            }
            int32x2_t v36 = vmin_s32(vmax_s32(vshr_n_s32(v34, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v31[2] = v35;
            *int v31 = v36.i8[0];
            v31[1] = v36.i8[4];
            v31[3] = -1;
            unsigned int v37 = *(unsigned __int8 *)(v14 + v9);
            if (v37 <= 0x10) {
              unsigned int v37 = 16;
            }
            unsigned int v38 = 1220542 * v37 - 19528672;
            int v39 = ((int)(v38 + v24) >> 20) & ~((int)(v38 + v24) >> 31);
            if (v39 >= 255) {
              LOBYTE(v39) = -1;
            }
            v31[6] = v39;
            int32x2_t v40 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v38), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v31[5] = v40.i8[4];
            v31[4] = v40.i8[0];
            v31[7] = -1;
            v9 += 2;
            uint64_t v4 = *(int *)(result + 24);
            v10 += 8;
          }
          while (v9 < v4);
          uint64_t v5 = *(void *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_10031340C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100313444(uint64_t result, int *a2)
{
  uint64_t v2 = 2 * *a2;
  uint64_t v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = *(void *)(result + 48);
      uint64_t v6 = *(void *)(result + 32) + v5 * v2;
      unint64_t v7 = *(void *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      uint64_t v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = v6 + v5;
          uint64_t v11 = *(void *)(result + 8);
          uint64_t v12 = *(void *)(result + 16);
          uint64_t v13 = v12 * v2;
          uint64_t v14 = v12 * v8;
          do
          {
            int v15 = *(unsigned __int8 *)(v7 + v9 + 1) - 128;
            unsigned int v16 = *(unsigned __int8 *)(v6 + v9);
            if (v16 <= 0x10) {
              unsigned int v16 = 16;
            }
            unsigned int v17 = 1220542 * v16 - 19528672;
            int32x2_t v18 = vmla_s32((int32x2_t)((0x80000 - 409993 * v15) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v7 + v9) - 128), (int32x2_t)0x198937FFF2FDF4);
            int v19 = 2116026 * v15 + 0x80000;
            int32x2_t v20 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v17), v18), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            unsigned int v21 = (unsigned char *)(v11 + v13);
            *(unsigned char *)(v11 + v13 + 1) = v20.i8[0];
            int v22 = ((int)(v17 + v19) >> 20) & ~((int)(v17 + v19) >> 31);
            if (v22 >= 255) {
              LOBYTE(v22) = -1;
            }
            *unsigned int v21 = v22;
            v21[3] = -1;
            v21[2] = v20.i8[4];
            unsigned int v23 = *(unsigned __int8 *)(v6 + v9 + 1);
            if (v23 <= 0x10) {
              unsigned int v23 = 16;
            }
            __int32 v24 = v18.i32[1];
            unsigned int v25 = 1220542 * v23 - 19528672;
            int v26 = ((int)(v25 + v18.i32[1]) >> 20) & ~((int)(v25 + v18.i32[1]) >> 31);
            int32x2_t v27 = vdup_lane_s32(v18, 0);
            v27.i32[0] = v19;
            int32x2_t v28 = vadd_s32(vdup_n_s32(v25), v27);
            if (v26 >= 255) {
              char v29 = -1;
            }
            else {
              char v29 = v26;
            }
            int32x2_t v30 = vmin_s32(vmax_s32(vshr_n_s32(v28, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v21[6] = v29;
            v21[4] = v30.i8[0];
            v21[5] = v30.i8[4];
            v21[7] = -1;
            int v31 = (unsigned char *)(v11 + v14);
            unsigned int v32 = *(unsigned __int8 *)(v10 + v9);
            if (v32 <= 0x10) {
              unsigned int v32 = 16;
            }
            unsigned int v33 = 1220542 * v32 - 19528672;
            int32x2_t v34 = vadd_s32(vdup_n_s32(v33), v27);
            if ((((int)(v33 + v24) >> 20) & ~((int)(v33 + v24) >> 31)) >= 255) {
              char v35 = -1;
            }
            else {
              char v35 = ((int)(v33 + v24) >> 20) & ~((int)(v33 + v24) >> 31);
            }
            int32x2_t v36 = vmin_s32(vmax_s32(vshr_n_s32(v34, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v31[2] = v35;
            *int v31 = v36.i8[0];
            v31[1] = v36.i8[4];
            v31[3] = -1;
            unsigned int v37 = *(unsigned __int8 *)(v10 + v9 + 1);
            if (v37 <= 0x10) {
              unsigned int v37 = 16;
            }
            unsigned int v38 = 1220542 * v37 - 19528672;
            int v39 = ((int)(v38 + v24) >> 20) & ~((int)(v38 + v24) >> 31);
            if (v39 >= 255) {
              LOBYTE(v39) = -1;
            }
            v31[6] = v39;
            int32x2_t v40 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v38), v27), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
            v31[5] = v40.i8[4];
            v31[4] = v40.i8[0];
            v31[7] = -1;
            v9 += 2;
            uint64_t v4 = *(int *)(result + 24);
            v11 += 8;
          }
          while (v9 < v4);
          uint64_t v5 = *(void *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_1003136BC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_1003136F4(uint64_t result, int *a2)
{
  uint64_t v2 = 2 * *a2;
  uint64_t v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = *(void *)(result + 48);
      uint64_t v6 = *(void *)(result + 32) + v5 * v2;
      unint64_t v7 = *(void *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      uint64_t v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = *(void *)(result + 16);
          uint64_t v11 = *(void *)(result + 8) + 3;
          uint64_t v12 = (unsigned char *)(v11 + v10 * v8);
          uint64_t v13 = (unsigned char *)(v11 + v10 * v2);
          uint64_t v14 = v6 + 1 + v5;
          do
          {
            int v15 = *(unsigned __int8 *)(v7 + v9) - 128;
            int v16 = *(unsigned __int8 *)(v7 + 1 + v9) - 128;
            int v17 = 1673527 * v16 + 0x80000;
            int v18 = -852492 * v16 - 409993 * v15;
            int v19 = 2116026 * v15 + 0x80000;
            int v20 = v18 + 0x80000;
            if (*(unsigned __int8 *)(v6 + v9) <= 0x10u) {
              int v21 = 16;
            }
            else {
              int v21 = *(unsigned __int8 *)(v6 + v9);
            }
            int v22 = 1220542 * v21 - 19528672;
            int v23 = ((v22 + v17) >> 20) & ~((v22 + v17) >> 31);
            if (v23 >= 255) {
              LOBYTE(v23) = -1;
            }
            *(v13 - 3) = v23;
            int v24 = ((v22 + v20) >> 20) & ~((v22 + v20) >> 31);
            if (v24 >= 255) {
              LOBYTE(v24) = -1;
            }
            int v25 = ((v22 + v19) >> 20) & ~((v22 + v19) >> 31);
            *(v13 - 2) = v24;
            if (v25 >= 255) {
              LOBYTE(v25) = -1;
            }
            *(v13 - 1) = v25;
            unsigned char *v13 = -1;
            unsigned int v26 = *(unsigned __int8 *)(v6 + 1 + v9);
            if (v26 <= 0x10) {
              unsigned int v26 = 16;
            }
            int v27 = 1220542 * v26 - 19528672;
            int v28 = ((v27 + v17) >> 20) & ~((v27 + v17) >> 31);
            if (v28 >= 255) {
              LOBYTE(v28) = -1;
            }
            v13[1] = v28;
            int v29 = ((v27 + v20) >> 20) & ~((v27 + v20) >> 31);
            if (v29 >= 255) {
              LOBYTE(v29) = -1;
            }
            int v30 = ((v27 + v19) >> 20) & ~((v27 + v19) >> 31);
            if (v30 >= 255) {
              LOBYTE(v30) = -1;
            }
            v13[2] = v29;
            v13[3] = v30;
            v13[4] = -1;
            unsigned int v31 = *(unsigned __int8 *)(v14 + v9 - 1);
            if (v31 <= 0x10) {
              unsigned int v31 = 16;
            }
            int v32 = 1220542 * v31 - 19528672;
            int v33 = ((v32 + v17) >> 20) & ~((v32 + v17) >> 31);
            if (v33 >= 255) {
              LOBYTE(v33) = -1;
            }
            *(v12 - 3) = v33;
            int v34 = ((v32 + v20) >> 20) & ~((v32 + v20) >> 31);
            if (v34 >= 255) {
              LOBYTE(v34) = -1;
            }
            int v35 = ((v32 + v19) >> 20) & ~((v32 + v19) >> 31);
            if (v35 >= 255) {
              LOBYTE(v35) = -1;
            }
            *(v12 - 2) = v34;
            *(v12 - 1) = v35;
            *uint64_t v12 = -1;
            unsigned int v36 = *(unsigned __int8 *)(v14 + v9);
            if (v36 <= 0x10) {
              unsigned int v36 = 16;
            }
            int v37 = 1220542 * v36 - 19528672;
            int v38 = ((v37 + v17) >> 20) & ~((v37 + v17) >> 31);
            if (v38 >= 255) {
              LOBYTE(v38) = -1;
            }
            v12[1] = v38;
            int v39 = ((v37 + v20) >> 20) & ~((v37 + v20) >> 31);
            if (v39 >= 255) {
              LOBYTE(v39) = -1;
            }
            v12[2] = v39;
            int v40 = ((v37 + v19) >> 20) & ~((v37 + v19) >> 31);
            if (v40 >= 255) {
              LOBYTE(v40) = -1;
            }
            v12[3] = v40;
            v12[4] = -1;
            v9 += 2;
            uint64_t v4 = *(int *)(result + 24);
            v12 += 8;
            v13 += 8;
          }
          while (v9 < v4);
          uint64_t v5 = *(void *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_10031399C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_1003139D4(uint64_t result, int *a2)
{
  uint64_t v2 = 2 * *a2;
  uint64_t v3 = 2 * a2[1];
  if ((int)v2 < (int)v3)
  {
    LODWORD(v4) = *(_DWORD *)(result + 24);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = *(void *)(result + 48);
      uint64_t v6 = *(void *)(result + 32) + v5 * v2;
      unint64_t v7 = *(void *)(result + 40) + ((unint64_t)(v5 * v2) >> 1);
      uint64_t v8 = v2 + 1;
      do
      {
        if ((int)v4 >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = v6 + v5;
          uint64_t v11 = *(void *)(result + 16);
          uint64_t v12 = *(void *)(result + 8) + 3;
          uint64_t v13 = (unsigned char *)(v12 + v11 * v8);
          uint64_t v14 = (unsigned char *)(v12 + v11 * v2);
          do
          {
            int v15 = *(unsigned __int8 *)(v7 + v9 + 1) - 128;
            int v16 = *(unsigned __int8 *)(v7 + v9) - 128;
            int v17 = 1673527 * v16 + 0x80000;
            int v18 = -852492 * v16 - 409993 * v15;
            int v19 = 2116026 * v15 + 0x80000;
            int v20 = v18 + 0x80000;
            if (*(unsigned __int8 *)(v6 + v9) <= 0x10u) {
              int v21 = 16;
            }
            else {
              int v21 = *(unsigned __int8 *)(v6 + v9);
            }
            int v22 = 1220542 * v21 - 19528672;
            int v23 = ((v22 + v17) >> 20) & ~((v22 + v17) >> 31);
            if (v23 >= 255) {
              LOBYTE(v23) = -1;
            }
            *(v14 - 3) = v23;
            int v24 = ((v22 + v20) >> 20) & ~((v22 + v20) >> 31);
            if (v24 >= 255) {
              LOBYTE(v24) = -1;
            }
            int v25 = ((v22 + v19) >> 20) & ~((v22 + v19) >> 31);
            *(v14 - 2) = v24;
            if (v25 >= 255) {
              LOBYTE(v25) = -1;
            }
            *(v14 - 1) = v25;
            unsigned char *v14 = -1;
            unsigned int v26 = *(unsigned __int8 *)(v6 + v9 + 1);
            if (v26 <= 0x10) {
              unsigned int v26 = 16;
            }
            int v27 = 1220542 * v26 - 19528672;
            int v28 = ((v27 + v17) >> 20) & ~((v27 + v17) >> 31);
            if (v28 >= 255) {
              LOBYTE(v28) = -1;
            }
            v14[1] = v28;
            int v29 = ((v27 + v20) >> 20) & ~((v27 + v20) >> 31);
            if (v29 >= 255) {
              LOBYTE(v29) = -1;
            }
            int v30 = ((v27 + v19) >> 20) & ~((v27 + v19) >> 31);
            if (v30 >= 255) {
              LOBYTE(v30) = -1;
            }
            v14[2] = v29;
            v14[3] = v30;
            v14[4] = -1;
            unsigned int v31 = *(unsigned __int8 *)(v10 + v9);
            if (v31 <= 0x10) {
              unsigned int v31 = 16;
            }
            int v32 = 1220542 * v31 - 19528672;
            int v33 = ((v32 + v17) >> 20) & ~((v32 + v17) >> 31);
            if (v33 >= 255) {
              LOBYTE(v33) = -1;
            }
            *(v13 - 3) = v33;
            int v34 = ((v32 + v20) >> 20) & ~((v32 + v20) >> 31);
            if (v34 >= 255) {
              LOBYTE(v34) = -1;
            }
            int v35 = ((v32 + v19) >> 20) & ~((v32 + v19) >> 31);
            if (v35 >= 255) {
              LOBYTE(v35) = -1;
            }
            *(v13 - 2) = v34;
            *(v13 - 1) = v35;
            unsigned char *v13 = -1;
            unsigned int v36 = *(unsigned __int8 *)(v10 + v9 + 1);
            if (v36 <= 0x10) {
              unsigned int v36 = 16;
            }
            int v37 = 1220542 * v36 - 19528672;
            int v38 = ((v37 + v17) >> 20) & ~((v37 + v17) >> 31);
            if (v38 >= 255) {
              LOBYTE(v38) = -1;
            }
            v13[1] = v38;
            int v39 = ((v37 + v20) >> 20) & ~((v37 + v20) >> 31);
            if (v39 >= 255) {
              LOBYTE(v39) = -1;
            }
            v13[2] = v39;
            int v40 = ((v37 + v19) >> 20) & ~((v37 + v19) >> 31);
            if (v40 >= 255) {
              LOBYTE(v40) = -1;
            }
            v13[3] = v40;
            v13[4] = -1;
            v9 += 2;
            uint64_t v4 = *(int *)(result + 24);
            v13 += 8;
            v14 += 8;
          }
          while (v9 < v4);
          uint64_t v5 = *(void *)(result + 48);
        }
        v2 += 2;
        v6 += 2 * v5;
        v7 += v5;
        v8 += 2;
      }
      while (v2 < v3);
    }
  }
  return result;
}

void sub_100313C6C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100313CA4(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = 2 * v2;
  uint64_t v4 = 2 * a2[1];
  int v5 = *(_DWORD *)(result + 24);
  if (v5 >= 0) {
    int v6 = *(_DWORD *)(result + 24);
  }
  else {
    int v6 = v5 + 1;
  }
  int v7 = v6 >> 1;
  uint64_t v9 = *(void *)(result + 48);
  uint64_t v8 = *(void *)(result + 56);
  v54[0] = v7;
  v54[1] = v8 - v7;
  int v11 = *(_DWORD *)(result + 64);
  int v10 = *(_DWORD *)(result + 68);
  if ((int)v2 >= 0) {
    int v12 = v2;
  }
  else {
    int v12 = v2 + 1;
  }
  uint64_t v13 = v8 * ((uint64_t)v12 >> 1);
  uint64_t v14 = *(void *)(result + 40) + v13;
  uint64_t v15 = v9 + v13;
  if ((v2 & 0x80000001) == 1)
  {
    uint64_t v16 = v11++ & 1;
    v14 += (int)v54[v16];
    uint64_t v17 = v10++ & 1;
    v15 += (int)v54[v17];
  }
  if ((int)v3 < (int)v4)
  {
    int v18 = (unsigned __int8 *)(*(void *)(result + 32) + v8 * v3);
    uint64_t v19 = v3 + 1;
    do
    {
      if (v5 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v24 = *(void *)(result + 8);
        uint64_t v23 = *(void *)(result + 16);
        uint64_t v25 = v23 * v3;
        uint64_t v26 = v23 * v19;
        int v27 = v18;
        do
        {
          int v28 = *(unsigned __int8 *)(v14 + v22) - 128;
          unsigned int v29 = *v27;
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          unsigned int v30 = 1220542 * v29 - 19528672;
          int32x2_t v31 = vmla_s32((int32x2_t)((0x80000 - 409993 * v28) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v15 + v22) - 128), (int32x2_t)0x198937FFF2FDF4);
          int v32 = 2116026 * v28 + 0x80000;
          int32x2_t v33 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v30), v31), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          int v34 = (unsigned char *)(v24 + v25);
          v34[1] = v33.i8[0];
          v34[2] = v33.i8[4];
          int v35 = ((int)(v30 + v32) >> 20) & ~((int)(v30 + v32) >> 31);
          if (v35 >= 255) {
            LOBYTE(v35) = -1;
          }
          *int v34 = v35;
          unsigned int v36 = v27[1];
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          unsigned int v37 = 1220542 * v36 - 19528672;
          __int32 v38 = v31.i32[1];
          int v39 = v37 + v31.i32[1];
          int32x2_t v40 = vdup_lane_s32(v31, 0);
          v40.i32[0] = v32;
          int32x2_t v41 = vshr_n_s32(vadd_s32(vdup_n_s32(v37), v40), 0x14uLL);
          if (((v39 >> 20) & ~(v39 >> 31)) >= 255) {
            char v42 = -1;
          }
          else {
            char v42 = (v39 >> 20) & ~(v39 >> 31);
          }
          int32x2_t v43 = vmin_s32(vmax_s32(v41, 0), (int32x2_t)0xFF000000FFLL);
          v34[5] = v42;
          v34[3] = v43.i8[0];
          v34[4] = v43.i8[4];
          unsigned int v44 = v27[v8];
          uint64_t v45 = (unsigned char *)(v24 + v26);
          if (v44 <= 0x10) {
            unsigned int v44 = 16;
          }
          unsigned int v46 = 1220542 * v44 - 19528672;
          int v47 = ((int)(v46 + v38) >> 20) & ~((int)(v46 + v38) >> 31);
          if (v47 >= 255) {
            LOBYTE(v47) = -1;
          }
          v45[2] = v47;
          int32x2_t v48 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v46), v40), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *uint64_t v45 = v48.i8[0];
          v45[1] = v48.i8[4];
          unsigned int v49 = v27[v8 + 1];
          if (v49 <= 0x10) {
            unsigned int v49 = 16;
          }
          unsigned int v50 = 1220542 * v49 - 19528672;
          int v51 = ((int)(v50 + v38) >> 20) & ~((int)(v50 + v38) >> 31);
          int32x2_t v52 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v50), v40), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          if (v51 >= 255) {
            LOBYTE(v51) = -1;
          }
          v45[5] = v51;
          v45[3] = v52.i8[0];
          v45[4] = v52.i8[4];
          int v5 = *(_DWORD *)(result + 24);
          ++v22;
          if (v5 >= 0) {
            int v53 = *(_DWORD *)(result + 24);
          }
          else {
            int v53 = v5 + 1;
          }
          v24 += 6;
          v27 += 2;
        }
        while (v22 < v53 >> 1);
        uint64_t v8 = *(void *)(result + 56);
      }
      v3 += 2;
      v18 += 2 * v8;
      int v20 = v11++ & 1;
      v14 += (int)v54[v20];
      uint64_t v21 = (int)v54[v10++ & 1];
      v15 += v21;
      v19 += 2;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_100313FD4(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_10031400C(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = 2 * v2;
  uint64_t v4 = 2 * a2[1];
  int v5 = *(_DWORD *)(result + 24);
  if (v5 >= 0) {
    int v6 = *(_DWORD *)(result + 24);
  }
  else {
    int v6 = v5 + 1;
  }
  int v7 = v6 >> 1;
  uint64_t v9 = *(void *)(result + 48);
  uint64_t v8 = *(void *)(result + 56);
  v57[0] = v7;
  v57[1] = v8 - v7;
  int v11 = *(_DWORD *)(result + 64);
  int v10 = *(_DWORD *)(result + 68);
  if ((int)v2 >= 0) {
    int v12 = v2;
  }
  else {
    int v12 = v2 + 1;
  }
  uint64_t v13 = v8 * ((uint64_t)v12 >> 1);
  uint64_t v14 = *(void *)(result + 40) + v13;
  uint64_t v15 = v9 + v13;
  if ((v2 & 0x80000001) == 1)
  {
    uint64_t v16 = v11++ & 1;
    v14 += (int)v57[v16];
    uint64_t v17 = v10++ & 1;
    v15 += (int)v57[v17];
  }
  if ((int)v3 < (int)v4)
  {
    int v18 = (unsigned __int8 *)(*(void *)(result + 32) + v8 * v3);
    uint64_t v19 = v3 + 1;
    uint64_t v56 = v4;
    do
    {
      if (v5 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(result + 16);
        uint64_t v24 = *(void *)(result + 8) + 2;
        uint64_t v25 = (char *)(v24 + v23 * v3);
        uint64_t v26 = (unsigned char *)(v24 + v23 * v19);
        int v27 = v18;
        do
        {
          int v28 = *(unsigned __int8 *)(v14 + v22) - 128;
          int v29 = *(unsigned __int8 *)(v15 + v22) - 128;
          int v30 = 1673527 * v29 + 0x80000;
          int v31 = -852492 * v29 - 409993 * v28;
          int v32 = 2116026 * v28 + 0x80000;
          unsigned int v33 = *v27;
          int v34 = v31 + 0x80000;
          if (v33 <= 0x10) {
            unsigned int v33 = 16;
          }
          int v35 = 1220542 * v33 - 19528672;
          int v36 = ((v35 + v30) >> 20) & ~((v35 + v30) >> 31);
          if (v36 >= 255) {
            LOBYTE(v36) = -1;
          }
          *(v25 - 2) = v36;
          int v37 = ((v35 + v34) >> 20) & ~((v35 + v34) >> 31);
          if (v37 >= 255) {
            LOBYTE(v37) = -1;
          }
          int v38 = ((v35 + v32) >> 20) & ~((v35 + v32) >> 31);
          *(v25 - 1) = v37;
          if (v38 >= 255) {
            char v39 = -1;
          }
          else {
            char v39 = v38;
          }
          char *v25 = v39;
          unsigned int v40 = v27[1];
          if (v40 <= 0x10) {
            unsigned int v40 = 16;
          }
          int v41 = 1220542 * v40 - 19528672;
          int v42 = ((v41 + v30) >> 20) & ~((v41 + v30) >> 31);
          if (v42 >= 255) {
            LOBYTE(v42) = -1;
          }
          v25[1] = v42;
          int v43 = ((v41 + v34) >> 20) & ~((v41 + v34) >> 31);
          if (v43 >= 255) {
            LOBYTE(v43) = -1;
          }
          uint64_t v25[2] = v43;
          int v44 = ((v41 + v32) >> 20) & ~((v41 + v32) >> 31);
          if (v44 >= 255) {
            LOBYTE(v44) = -1;
          }
          v25[3] = v44;
          unsigned int v45 = v27[v8];
          if (v45 <= 0x10) {
            unsigned int v45 = 16;
          }
          int v46 = 1220542 * v45 - 19528672;
          int v47 = ((v46 + v30) >> 20) & ~((v46 + v30) >> 31);
          if (v47 >= 255) {
            LOBYTE(v47) = -1;
          }
          *(v26 - 2) = v47;
          int v48 = ((v46 + v34) >> 20) & ~((v46 + v34) >> 31);
          if (v48 >= 255) {
            LOBYTE(v48) = -1;
          }
          *(v26 - 1) = v48;
          int v49 = ((v46 + v32) >> 20) & ~((v46 + v32) >> 31);
          if (v49 >= 255) {
            LOBYTE(v49) = -1;
          }
          *uint64_t v26 = v49;
          unsigned int v50 = v27[v8 + 1];
          if (v50 <= 0x10) {
            unsigned int v50 = 16;
          }
          int v51 = 1220542 * v50 - 19528672;
          int v52 = ((v51 + v30) >> 20) & ~((v51 + v30) >> 31);
          if (v52 >= 255) {
            LOBYTE(v52) = -1;
          }
          v26[1] = v52;
          if ((((v51 + v34) >> 20) & ~((v51 + v34) >> 31)) >= 255) {
            char v53 = -1;
          }
          else {
            char v53 = ((v51 + v34) >> 20) & ~((v51 + v34) >> 31);
          }
          int v54 = ((v51 + v32) >> 20) & ~((v51 + v32) >> 31);
          v26[2] = v53;
          if (v54 >= 255) {
            LOBYTE(v54) = -1;
          }
          v26[3] = v54;
          int v5 = *(_DWORD *)(result + 24);
          ++v22;
          if (v5 >= 0) {
            int v55 = *(_DWORD *)(result + 24);
          }
          else {
            int v55 = v5 + 1;
          }
          v25 += 6;
          v27 += 2;
          v26 += 6;
        }
        while (v22 < v55 >> 1);
        uint64_t v8 = *(void *)(result + 56);
        uint64_t v4 = v56;
      }
      v3 += 2;
      v18 += 2 * v8;
      int v20 = v11++ & 1;
      v14 += (int)v57[v20];
      uint64_t v21 = (int)v57[v10++ & 1];
      v15 += v21;
      v19 += 2;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_100314368(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_1003143A0(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = 2 * v2;
  uint64_t v4 = 2 * a2[1];
  int v5 = *(_DWORD *)(result + 24);
  if (v5 >= 0) {
    int v6 = *(_DWORD *)(result + 24);
  }
  else {
    int v6 = v5 + 1;
  }
  int v7 = v6 >> 1;
  uint64_t v9 = *(void *)(result + 48);
  uint64_t v8 = *(void *)(result + 56);
  v56[0] = v7;
  v56[1] = v8 - v7;
  int v11 = *(_DWORD *)(result + 64);
  int v10 = *(_DWORD *)(result + 68);
  if ((int)v2 >= 0) {
    int v12 = v2;
  }
  else {
    int v12 = v2 + 1;
  }
  uint64_t v13 = v8 * ((uint64_t)v12 >> 1);
  uint64_t v14 = *(void *)(result + 40) + v13;
  uint64_t v15 = v9 + v13;
  if ((v2 & 0x80000001) == 1)
  {
    uint64_t v16 = v11++ & 1;
    v14 += (int)v56[v16];
    uint64_t v17 = v10++ & 1;
    v15 += (int)v56[v17];
  }
  if ((int)v3 < (int)v4)
  {
    int v18 = (unsigned __int8 *)(*(void *)(result + 32) + v8 * v3);
    uint64_t v19 = v3 + 1;
    do
    {
      if (v5 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v24 = *(void *)(result + 8);
        uint64_t v23 = *(void *)(result + 16);
        uint64_t v25 = v23 * v3;
        uint64_t v26 = v23 * v19;
        int v27 = v18;
        do
        {
          int v28 = *(unsigned __int8 *)(v14 + v22) - 128;
          unsigned int v29 = *v27;
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          unsigned int v30 = 1220542 * v29 - 19528672;
          int v31 = (unsigned char *)(v24 + v25);
          int32x2_t v32 = vmla_s32((int32x2_t)((0x80000 - 409993 * v28) | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v15 + v22) - 128), (int32x2_t)0x198937FFF2FDF4);
          int v33 = 2116026 * v28 + 0x80000;
          int32x2_t v34 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v30), v32), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(unsigned char *)(v24 + v25 + 1) = v34.i8[0];
          int v35 = ((int)(v30 + v33) >> 20) & ~((int)(v30 + v33) >> 31);
          if (v35 >= 255) {
            LOBYTE(v35) = -1;
          }
          v31[2] = v34.i8[4];
          *int v31 = v35;
          v31[3] = -1;
          unsigned int v36 = v27[1];
          if (v36 <= 0x10) {
            unsigned int v36 = 16;
          }
          unsigned int v37 = 1220542 * v36 - 19528672;
          __int32 v38 = v32.i32[1];
          int32x2_t v39 = vdup_n_s32(v37);
          int v40 = ((int)(v37 + v32.i32[1]) >> 20) & ~((int)(v37 + v32.i32[1]) >> 31);
          int32x2_t v41 = vdup_lane_s32(v32, 0);
          v41.i32[0] = v33;
          if (v40 >= 255) {
            char v42 = -1;
          }
          else {
            char v42 = v40;
          }
          int32x2_t v43 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(v39, v41), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          v31[6] = v42;
          v31[4] = v43.i8[0];
          v31[7] = -1;
          v31[5] = v43.i8[4];
          unsigned int v44 = v27[v8];
          if (v44 <= 0x10) {
            unsigned int v44 = 16;
          }
          unsigned int v45 = 1220542 * v44 - 19528672;
          int v46 = (unsigned char *)(v24 + v26);
          int32x2_t v47 = vdup_n_s32(v45);
          if ((((int)(v45 + v38) >> 20) & ~((int)(v45 + v38) >> 31)) >= 255) {
            char v48 = -1;
          }
          else {
            char v48 = ((int)(v45 + v38) >> 20) & ~((int)(v45 + v38) >> 31);
          }
          int32x2_t v49 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(v47, v41), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          v46[2] = v48;
          *int v46 = v49.i8[0];
          void v46[3] = -1;
          v46[1] = v49.i8[4];
          unsigned int v50 = v27[v8 + 1];
          if (v50 <= 0x10) {
            unsigned int v50 = 16;
          }
          unsigned int v51 = 1220542 * v50 - 19528672;
          int32x2_t v52 = vadd_s32(vdup_n_s32(v51), v41);
          if ((((int)(v51 + v38) >> 20) & ~((int)(v51 + v38) >> 31)) >= 255) {
            char v53 = -1;
          }
          else {
            char v53 = ((int)(v51 + v38) >> 20) & ~((int)(v51 + v38) >> 31);
          }
          int32x2_t v54 = vmin_s32(vmax_s32(vshr_n_s32(v52, 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          v46[6] = v53;
          v46[5] = v54.i8[4];
          v46[4] = v54.i8[0];
          v46[7] = -1;
          int v5 = *(_DWORD *)(result + 24);
          ++v22;
          if (v5 >= 0) {
            int v55 = *(_DWORD *)(result + 24);
          }
          else {
            int v55 = v5 + 1;
          }
          v24 += 8;
          v27 += 2;
        }
        while (v22 < v55 >> 1);
        uint64_t v8 = *(void *)(result + 56);
      }
      v3 += 2;
      v18 += 2 * v8;
      int v20 = v11++ & 1;
      v14 += (int)v56[v20];
      uint64_t v21 = (int)v56[v10++ & 1];
      v15 += v21;
      v19 += 2;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_1003146E0(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100314718(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = 2 * v2;
  uint64_t v4 = 2 * a2[1];
  int v5 = *(_DWORD *)(result + 24);
  if (v5 >= 0) {
    int v6 = *(_DWORD *)(result + 24);
  }
  else {
    int v6 = v5 + 1;
  }
  int v7 = v6 >> 1;
  uint64_t v9 = *(void *)(result + 48);
  uint64_t v8 = *(void *)(result + 56);
  v58[0] = v7;
  v58[1] = v8 - v7;
  int v11 = *(_DWORD *)(result + 64);
  int v10 = *(_DWORD *)(result + 68);
  if ((int)v2 >= 0) {
    int v12 = v2;
  }
  else {
    int v12 = v2 + 1;
  }
  uint64_t v13 = v8 * ((uint64_t)v12 >> 1);
  uint64_t v14 = *(void *)(result + 40) + v13;
  uint64_t v15 = v9 + v13;
  if ((v2 & 0x80000001) == 1)
  {
    uint64_t v16 = v11++ & 1;
    v14 += (int)v58[v16];
    uint64_t v17 = v10++ & 1;
    v15 += (int)v58[v17];
  }
  if ((int)v3 < (int)v4)
  {
    int v18 = (unsigned __int8 *)(*(void *)(result + 32) + v8 * v3);
    uint64_t v19 = v3 + 1;
    uint64_t v56 = v4;
    do
    {
      if (v5 >= 2)
      {
        int v57 = v10;
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(result + 16);
        uint64_t v24 = *(void *)(result + 8) + 3;
        uint64_t v25 = (unsigned char *)(v24 + v23 * v3);
        uint64_t v26 = (unsigned char *)(v24 + v23 * v19);
        int v27 = v18;
        do
        {
          int v28 = *(unsigned __int8 *)(v14 + v22) - 128;
          int v29 = *(unsigned __int8 *)(v15 + v22) - 128;
          int v30 = 1673527 * v29 + 0x80000;
          int v31 = -852492 * v29 - 409993 * v28;
          int v32 = 2116026 * v28 + 0x80000;
          int v33 = v31 + 0x80000;
          unsigned int v34 = *v27;
          if (v34 <= 0x10) {
            unsigned int v34 = 16;
          }
          int v35 = 1220542 * v34 - 19528672;
          int v36 = ((v35 + v30) >> 20) & ~((v35 + v30) >> 31);
          if (v36 >= 255) {
            LOBYTE(v36) = -1;
          }
          *(v25 - 3) = v36;
          int v37 = ((v35 + v33) >> 20) & ~((v35 + v33) >> 31);
          if (v37 >= 255) {
            LOBYTE(v37) = -1;
          }
          *(v25 - 2) = v37;
          int v38 = ((v35 + v32) >> 20) & ~((v35 + v32) >> 31);
          if (v38 >= 255) {
            LOBYTE(v38) = -1;
          }
          *(v25 - 1) = v38;
          unsigned char *v25 = -1;
          unsigned int v39 = v27[1];
          if (v39 <= 0x10) {
            unsigned int v39 = 16;
          }
          int v40 = 1220542 * v39 - 19528672;
          int v41 = ((v40 + v30) >> 20) & ~((v40 + v30) >> 31);
          if (v41 >= 255) {
            LOBYTE(v41) = -1;
          }
          int v42 = ((v40 + v33) >> 20) & ~((v40 + v33) >> 31);
          v25[1] = v41;
          if (v42 >= 255) {
            LOBYTE(v42) = -1;
          }
          int v43 = ((v40 + v32) >> 20) & ~((v40 + v32) >> 31);
          uint64_t v25[2] = v42;
          if (v43 >= 255) {
            LOBYTE(v43) = -1;
          }
          v25[3] = v43;
          v25[4] = -1;
          unsigned int v44 = v27[v8];
          if (v44 <= 0x10) {
            unsigned int v44 = 16;
          }
          int v45 = 1220542 * v44 - 19528672;
          int v46 = ((v45 + v30) >> 20) & ~((v45 + v30) >> 31);
          int v47 = ((v45 + v33) >> 20) & ~((v45 + v33) >> 31);
          if (v46 >= 255) {
            LOBYTE(v46) = -1;
          }
          *(v26 - 3) = v46;
          if (v47 >= 255) {
            LOBYTE(v47) = -1;
          }
          int v48 = ((v45 + v32) >> 20) & ~((v45 + v32) >> 31);
          *(v26 - 2) = v47;
          if (v48 >= 255) {
            char v49 = -1;
          }
          else {
            char v49 = v48;
          }
          *(v26 - 1) = v49;
          *uint64_t v26 = -1;
          unsigned int v50 = v27[v8 + 1];
          if (v50 <= 0x10) {
            unsigned int v50 = 16;
          }
          int v51 = 1220542 * v50 - 19528672;
          int v52 = ((v51 + v30) >> 20) & ~((v51 + v30) >> 31);
          if (v52 >= 255) {
            LOBYTE(v52) = -1;
          }
          v26[1] = v52;
          if ((((v51 + v33) >> 20) & ~((v51 + v33) >> 31)) >= 255) {
            char v53 = -1;
          }
          else {
            char v53 = ((v51 + v33) >> 20) & ~((v51 + v33) >> 31);
          }
          int v54 = ((v51 + v32) >> 20) & ~((v51 + v32) >> 31);
          v26[2] = v53;
          if (v54 >= 255) {
            LOBYTE(v54) = -1;
          }
          v26[3] = v54;
          v26[4] = -1;
          int v5 = *(_DWORD *)(result + 24);
          ++v22;
          if (v5 >= 0) {
            int v55 = *(_DWORD *)(result + 24);
          }
          else {
            int v55 = v5 + 1;
          }
          v25 += 8;
          v27 += 2;
          v26 += 8;
        }
        while (v22 < v55 >> 1);
        uint64_t v8 = *(void *)(result + 56);
        uint64_t v4 = v56;
        int v10 = v57;
      }
      v3 += 2;
      v18 += 2 * v8;
      int v20 = v11++ & 1;
      v14 += (int)v58[v20];
      uint64_t v21 = (int)v58[v10++ & 1];
      v15 += v21;
      v19 += 2;
    }
    while (v3 < v4);
  }
  return result;
}

void sub_100314A88(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100314AC0(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2 + 3);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          unsigned int v10 = 0x80000 - 409993 * v9;
          int v11 = 2116026 * v9 + 0x80000;
          unsigned int v12 = *(unsigned __int8 *)(v5 + v7);
          if (v12 <= 0x10) {
            unsigned int v12 = 16;
          }
          unsigned int v13 = 1220542 * v12 - 19528672;
          int32x2_t v14 = vmla_s32((int32x2_t)(v10 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v5 + v7 + 3) - 128), (int32x2_t)0x198937FFF2FDF4);
          int32x2_t v15 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v13), v14), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 1) = v15.i8[4];
          *(v8 - 2) = v15.i8[0];
          int v16 = ((int)(v13 + v11) >> 20) & ~((int)(v13 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *(v8 - 3) = v16;
          unsigned int v17 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v17 <= 0x10) {
            unsigned int v17 = 16;
          }
          unsigned int v18 = 1220542 * v17 - 19528672;
          int v19 = ((int)(v18 + v14.i32[1]) >> 20) & ~((int)(v18 + v14.i32[1]) >> 31);
          if (v19 >= 255) {
            LOBYTE(v19) = -1;
          }
          v8[2] = v19;
          int32x2_t v20 = vdup_lane_s32(v14, 0);
          v20.i32[0] = v11;
          int32x2_t v21 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v18), v20), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *uint64_t v8 = v21.i8[0];
          v8[1] = v21.i8[4];
          v7 += 4;
          uint64_t v6 = *(int *)(result + 40);
          v8 += 6;
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100314C34(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100314C6C(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2 + 3);
        uint64_t v9 = v5 + 3;
        do
        {
          int v10 = *(unsigned __int8 *)(v5 + v7) - 128;
          unsigned int v11 = 0x80000 - 409993 * v10;
          int v12 = 2116026 * v10 + 0x80000;
          unsigned int v13 = *(unsigned __int8 *)(v9 + v7 - 2);
          if (v13 <= 0x10) {
            unsigned int v13 = 16;
          }
          unsigned int v14 = 1220542 * v13 - 19528672;
          int32x2_t v15 = vmla_s32((int32x2_t)(v11 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v9 + v7 - 1) - 128), (int32x2_t)0x198937FFF2FDF4);
          int32x2_t v16 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v14), v15), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 1) = v16.i8[4];
          *(v8 - 2) = v16.i8[0];
          int v17 = ((int)(v14 + v12) >> 20) & ~((int)(v14 + v12) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          *(v8 - 3) = v17;
          unsigned int v18 = *(unsigned __int8 *)(v9 + v7);
          if (v18 <= 0x10) {
            unsigned int v18 = 16;
          }
          unsigned int v19 = 1220542 * v18 - 19528672;
          int v20 = ((int)(v19 + v15.i32[1]) >> 20) & ~((int)(v19 + v15.i32[1]) >> 31);
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          v8[2] = v20;
          int32x2_t v21 = vdup_lane_s32(v15, 0);
          v21.i32[0] = v12;
          int32x2_t v22 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v19), v21), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *uint64_t v8 = v22.i8[0];
          v8[1] = v22.i8[4];
          v7 += 4;
          uint64_t v6 = *(int *)(result + 40);
          v8 += 6;
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100314DEC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100314E24(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2 + 3);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          unsigned int v10 = 0x80000 - 409993 * v9;
          int v11 = 2116026 * v9 + 0x80000;
          unsigned int v12 = *(unsigned __int8 *)(v5 + v7);
          if (v12 <= 0x10) {
            unsigned int v12 = 16;
          }
          unsigned int v13 = 1220542 * v12 - 19528672;
          int32x2_t v14 = vmla_s32((int32x2_t)(v10 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v5 + v7 + 1) - 128), (int32x2_t)0x198937FFF2FDF4);
          int32x2_t v15 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v13), v14), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 1) = v15.i8[4];
          *(v8 - 2) = v15.i8[0];
          int v16 = ((int)(v13 + v11) >> 20) & ~((int)(v13 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *(v8 - 3) = v16;
          unsigned int v17 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v17 <= 0x10) {
            unsigned int v17 = 16;
          }
          unsigned int v18 = 1220542 * v17 - 19528672;
          int v19 = ((int)(v18 + v14.i32[1]) >> 20) & ~((int)(v18 + v14.i32[1]) >> 31);
          if (v19 >= 255) {
            LOBYTE(v19) = -1;
          }
          v8[2] = v19;
          int32x2_t v20 = vdup_lane_s32(v14, 0);
          v20.i32[0] = v11;
          int32x2_t v21 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v18), v20), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *uint64_t v8 = v21.i8[0];
          v8[1] = v21.i8[4];
          v7 += 4;
          uint64_t v6 = *(int *)(result + 40);
          v8 += 6;
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100314F98(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100314FD0(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          int v10 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          int v11 = 1673527 * v10 + 0x80000;
          int v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          int v13 = 2116026 * v9 + 0x80000;
          unsigned int v14 = *(unsigned __int8 *)(v5 + v7);
          if (v14 <= 0x10) {
            unsigned int v14 = 16;
          }
          int v15 = 1220542 * v14 - 19528672;
          int v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *uint64_t v8 = v16;
          int v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          v8[1] = v17;
          int v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255) {
            LOBYTE(v18) = -1;
          }
          v8[2] = v18;
          unsigned int v19 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v19 <= 0x10) {
            unsigned int v19 = 16;
          }
          int v20 = 1220542 * v19 - 19528672;
          int v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          v8[3] = v21;
          int v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          v8[4] = v22;
          int v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255) {
            LOBYTE(v23) = -1;
          }
          v8[5] = v23;
          v7 += 4;
          v8 += 6;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100315158(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100315190(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7) - 128;
          int v10 = *(unsigned __int8 *)(v5 + v7 + 2) - 128;
          int v11 = 1673527 * v10 + 0x80000;
          int v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          int v13 = 2116026 * v9 + 0x80000;
          unsigned int v14 = *(unsigned __int8 *)(v5 + v7 + 1);
          if (v14 <= 0x10) {
            unsigned int v14 = 16;
          }
          int v15 = 1220542 * v14 - 19528672;
          int v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *uint64_t v8 = v16;
          int v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          v8[1] = v17;
          int v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255) {
            LOBYTE(v18) = -1;
          }
          v8[2] = v18;
          unsigned int v19 = *(unsigned __int8 *)(v5 + v7 + 3);
          if (v19 <= 0x10) {
            unsigned int v19 = 16;
          }
          int v20 = 1220542 * v19 - 19528672;
          int v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          v8[3] = v21;
          int v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          v8[4] = v22;
          int v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255) {
            LOBYTE(v23) = -1;
          }
          v8[5] = v23;
          v7 += 4;
          v8 += 6;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100315318(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100315350(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          int v10 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          int v11 = 1673527 * v10 + 0x80000;
          int v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          int v13 = 2116026 * v9 + 0x80000;
          unsigned int v14 = *(unsigned __int8 *)(v5 + v7);
          if (v14 <= 0x10) {
            unsigned int v14 = 16;
          }
          int v15 = 1220542 * v14 - 19528672;
          int v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *uint64_t v8 = v16;
          int v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          v8[1] = v17;
          int v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255) {
            LOBYTE(v18) = -1;
          }
          v8[2] = v18;
          unsigned int v19 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v19 <= 0x10) {
            unsigned int v19 = 16;
          }
          int v20 = 1220542 * v19 - 19528672;
          int v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          v8[3] = v21;
          int v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          v8[4] = v22;
          int v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255) {
            LOBYTE(v23) = -1;
          }
          v8[5] = v23;
          v7 += 4;
          v8 += 6;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1003154D8(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100315510(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2 + 7);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          unsigned int v10 = 0x80000 - 409993 * v9;
          int v11 = 2116026 * v9 + 0x80000;
          unsigned int v12 = *(unsigned __int8 *)(v5 + v7);
          if (v12 <= 0x10) {
            unsigned int v12 = 16;
          }
          unsigned int v13 = 1220542 * v12 - 19528672;
          int32x2_t v14 = vmla_s32((int32x2_t)(v10 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v5 + v7 + 3) - 128), (int32x2_t)0x198937FFF2FDF4);
          int32x2_t v15 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v13), v14), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 5) = v15.i8[4];
          *(v8 - 6) = v15.i8[0];
          int v16 = ((int)(v13 + v11) >> 20) & ~((int)(v13 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *(v8 - 7) = v16;
          *(v8 - 4) = -1;
          unsigned int v17 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v17 <= 0x10) {
            unsigned int v17 = 16;
          }
          unsigned int v18 = 1220542 * v17 - 19528672;
          int v19 = ((int)(v18 + v14.i32[1]) >> 20) & ~((int)(v18 + v14.i32[1]) >> 31);
          if (v19 >= 255) {
            LOBYTE(v19) = -1;
          }
          *(v8 - 1) = v19;
          int32x2_t v20 = vdup_lane_s32(v14, 0);
          v20.i32[0] = v11;
          int32x2_t v21 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v18), v20), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 2) = v21.i8[4];
          *(v8 - 3) = v21.i8[0];
          *uint64_t v8 = -1;
          v8 += 8;
          v7 += 4;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100315688(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_1003156C0(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2 + 7);
        uint64_t v9 = v5 + 3;
        do
        {
          int v10 = *(unsigned __int8 *)(v5 + v7) - 128;
          unsigned int v11 = 0x80000 - 409993 * v10;
          int v12 = 2116026 * v10 + 0x80000;
          unsigned int v13 = *(unsigned __int8 *)(v9 + v7 - 2);
          if (v13 <= 0x10) {
            unsigned int v13 = 16;
          }
          unsigned int v14 = 1220542 * v13 - 19528672;
          int32x2_t v15 = vmla_s32((int32x2_t)(v11 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v9 + v7 - 1) - 128), (int32x2_t)0x198937FFF2FDF4);
          int32x2_t v16 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v14), v15), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 5) = v16.i8[4];
          *(v8 - 6) = v16.i8[0];
          int v17 = ((int)(v14 + v12) >> 20) & ~((int)(v14 + v12) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          *(v8 - 7) = v17;
          *(v8 - 4) = -1;
          unsigned int v18 = *(unsigned __int8 *)(v9 + v7);
          if (v18 <= 0x10) {
            unsigned int v18 = 16;
          }
          unsigned int v19 = 1220542 * v18 - 19528672;
          int v20 = ((int)(v19 + v15.i32[1]) >> 20) & ~((int)(v19 + v15.i32[1]) >> 31);
          if (v20 >= 255) {
            LOBYTE(v20) = -1;
          }
          *(v8 - 1) = v20;
          int32x2_t v21 = vdup_lane_s32(v15, 0);
          v21.i32[0] = v12;
          int32x2_t v22 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v19), v21), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 2) = v22.i8[4];
          *(v8 - 3) = v22.i8[0];
          *uint64_t v8 = -1;
          v8 += 8;
          v7 += 4;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100315844(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_10031587C(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2 + 7);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          unsigned int v10 = 0x80000 - 409993 * v9;
          int v11 = 2116026 * v9 + 0x80000;
          unsigned int v12 = *(unsigned __int8 *)(v5 + v7);
          if (v12 <= 0x10) {
            unsigned int v12 = 16;
          }
          unsigned int v13 = 1220542 * v12 - 19528672;
          int32x2_t v14 = vmla_s32((int32x2_t)(v10 | 0x8000000000000), vdup_n_s32(*(unsigned __int8 *)(v5 + v7 + 1) - 128), (int32x2_t)0x198937FFF2FDF4);
          int32x2_t v15 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v13), v14), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 5) = v15.i8[4];
          *(v8 - 6) = v15.i8[0];
          int v16 = ((int)(v13 + v11) >> 20) & ~((int)(v13 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *(v8 - 7) = v16;
          *(v8 - 4) = -1;
          unsigned int v17 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v17 <= 0x10) {
            unsigned int v17 = 16;
          }
          unsigned int v18 = 1220542 * v17 - 19528672;
          int v19 = ((int)(v18 + v14.i32[1]) >> 20) & ~((int)(v18 + v14.i32[1]) >> 31);
          if (v19 >= 255) {
            LOBYTE(v19) = -1;
          }
          *(v8 - 1) = v19;
          int32x2_t v20 = vdup_lane_s32(v14, 0);
          v20.i32[0] = v11;
          int32x2_t v21 = vmin_s32(vmax_s32(vshr_n_s32(vadd_s32(vdup_n_s32(v18), v20), 0x14uLL), 0), (int32x2_t)0xFF000000FFLL);
          *(v8 - 2) = v21.i8[4];
          *(v8 - 3) = v21.i8[0];
          *uint64_t v8 = -1;
          v8 += 8;
          v7 += 4;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1003159F4(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100315A2C(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          int v10 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          int v11 = 1673527 * v10 + 0x80000;
          int v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          int v13 = 2116026 * v9 + 0x80000;
          unsigned int v14 = *(unsigned __int8 *)(v5 + v7);
          if (v14 <= 0x10) {
            unsigned int v14 = 16;
          }
          int v15 = 1220542 * v14 - 19528672;
          int v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *uint64_t v8 = v16;
          int v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          v8[1] = v17;
          int v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255) {
            LOBYTE(v18) = -1;
          }
          v8[2] = v18;
          v8[3] = -1;
          unsigned int v19 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v19 <= 0x10) {
            unsigned int v19 = 16;
          }
          int v20 = 1220542 * v19 - 19528672;
          int v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          v8[4] = v21;
          int v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          v8[5] = v22;
          int v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255) {
            LOBYTE(v23) = -1;
          }
          v8[6] = v23;
          v8[7] = -1;
          v7 += 4;
          v8 += 8;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100315BBC(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100315BF4(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7) - 128;
          int v10 = *(unsigned __int8 *)(v5 + v7 + 2) - 128;
          int v11 = 1673527 * v10 + 0x80000;
          int v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          int v13 = 2116026 * v9 + 0x80000;
          unsigned int v14 = *(unsigned __int8 *)(v5 + v7 + 1);
          if (v14 <= 0x10) {
            unsigned int v14 = 16;
          }
          int v15 = 1220542 * v14 - 19528672;
          int v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *uint64_t v8 = v16;
          int v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          v8[1] = v17;
          int v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255) {
            LOBYTE(v18) = -1;
          }
          v8[2] = v18;
          v8[3] = -1;
          unsigned int v19 = *(unsigned __int8 *)(v5 + v7 + 3);
          if (v19 <= 0x10) {
            unsigned int v19 = 16;
          }
          int v20 = 1220542 * v19 - 19528672;
          int v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          v8[4] = v21;
          int v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          v8[5] = v22;
          int v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255) {
            LOBYTE(v23) = -1;
          }
          v8[6] = v23;
          v8[7] = -1;
          v7 += 4;
          v8 += 8;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100315D84(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

uint64_t sub_100315DBC(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if ((int)v2 < (int)v3)
  {
    uint64_t v4 = *(void *)(result + 32);
    uint64_t v5 = *(void *)(result + 24) + v4 * v2;
    LODWORD(v6) = *(_DWORD *)(result + 40);
    do
    {
      if ((int)v6 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = (unsigned char *)(*(void *)(result + 8) + *(void *)(result + 16) * v2);
        do
        {
          int v9 = *(unsigned __int8 *)(v5 + v7 + 3) - 128;
          int v10 = *(unsigned __int8 *)(v5 + v7 + 1) - 128;
          int v11 = 1673527 * v10 + 0x80000;
          int v12 = -852492 * v10 - 409993 * v9 + 0x80000;
          int v13 = 2116026 * v9 + 0x80000;
          unsigned int v14 = *(unsigned __int8 *)(v5 + v7);
          if (v14 <= 0x10) {
            unsigned int v14 = 16;
          }
          int v15 = 1220542 * v14 - 19528672;
          int v16 = ((v15 + v11) >> 20) & ~((v15 + v11) >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *uint64_t v8 = v16;
          int v17 = ((v15 + v12) >> 20) & ~((v15 + v12) >> 31);
          if (v17 >= 255) {
            LOBYTE(v17) = -1;
          }
          v8[1] = v17;
          int v18 = ((v15 + v13) >> 20) & ~((v15 + v13) >> 31);
          if (v18 >= 255) {
            LOBYTE(v18) = -1;
          }
          v8[2] = v18;
          v8[3] = -1;
          unsigned int v19 = *(unsigned __int8 *)(v5 + v7 + 2);
          if (v19 <= 0x10) {
            unsigned int v19 = 16;
          }
          int v20 = 1220542 * v19 - 19528672;
          int v21 = ((v20 + v11) >> 20) & ~((v20 + v11) >> 31);
          if (v21 >= 255) {
            LOBYTE(v21) = -1;
          }
          v8[4] = v21;
          int v22 = ((v20 + v12) >> 20) & ~((v20 + v12) >> 31);
          if (v22 >= 255) {
            LOBYTE(v22) = -1;
          }
          v8[5] = v22;
          int v23 = ((v20 + v13) >> 20) & ~((v20 + v13) >> 31);
          if (v23 >= 255) {
            LOBYTE(v23) = -1;
          }
          v8[6] = v23;
          v8[7] = -1;
          v7 += 4;
          v8 += 8;
          uint64_t v6 = *(int *)(result + 40);
        }
        while (v7 < 2 * v6);
        uint64_t v4 = *(void *)(result + 32);
      }
      ++v2;
      v5 += v4;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100315F4C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100315F88(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_100315FC0(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v29, &off_100499718);
  int v4 = *a2;
  int v5 = a2[1];
  if (*a2 < v5 && *(int *)(a1 + 40) >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = *(void *)(a1 + 24) + v6 * v4;
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = *(void *)(a1 + 8) + v8 * v4;
    uint16x8_t v10 = (uint16x8_t)vdupq_n_s16(0x8081u);
    do
    {
      uint64_t v11 = *(unsigned int *)(a1 + 40);
      if ((int)v11 < 1) {
        goto LABEL_5;
      }
      if (v11 >= 8
        && ((uint64_t v12 = 4 * (v11 - 1), v7 < v9 + v12 + 4) ? (v13 = v9 >= v7 + v12 + 4) : (v13 = 1), v13))
      {
        uint64_t v14 = v11 & 0x7FFFFFF8;
        uint64_t v15 = 4 * (v11 & 0xFFFFFFF8);
        int v16 = (unsigned __int8 *)(v9 + v15);
        int v17 = (unsigned char *)(v7 + v15);
        uint64_t v18 = v11 & 0xFFFFFFF8;
        unsigned int v19 = (const char *)v9;
        int v20 = (char *)v7;
        do
        {
          v21.i64[0] = 0x80008000800080;
          v21.i64[1] = 0x80008000800080;
          int8x8x4_t v31 = vld4_s8(v19);
          v19 += 32;
          uint16x8_t v22 = vmlal_u8(v21, (uint8x8_t)v31.val[3], (uint8x8_t)v31.val[0]);
          v31.val[0] = vshrn_n_s16(vuzp2q_s16((int16x8_t)vmull_u16(*(uint16x4_t *)v22.i8, *(uint16x4_t *)v10.i8), (int16x8_t)vmull_high_u16(v22, v10)), 7uLL);
          v22.i64[0] = 0x80008000800080;
          v22.i64[1] = 0x80008000800080;
          uint16x8_t v23 = vmlal_u8(v22, (uint8x8_t)v31.val[3], (uint8x8_t)v31.val[1]);
          v31.val[1] = vshrn_n_s16(vuzp2q_s16((int16x8_t)vmull_u16(*(uint16x4_t *)v23.i8, *(uint16x4_t *)v10.i8), (int16x8_t)vmull_high_u16(v23, v10)), 7uLL);
          v23.i64[0] = 0x80008000800080;
          v23.i64[1] = 0x80008000800080;
          uint16x8_t v24 = vmlal_u8(v23, (uint8x8_t)v31.val[3], (uint8x8_t)v31.val[2]);
          v31.val[2] = vshrn_n_s16(vuzp2q_s16((int16x8_t)vmull_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v10.i8), (int16x8_t)vmull_high_u16(v24, v10)), 7uLL);
          vst4_s8(v20, v31);
          v20 += 32;
          v18 -= 8;
        }
        while (v18);
        if (v14 == v11) {
          goto LABEL_4;
        }
      }
      else
      {
        LODWORD(v14) = 0;
        int v16 = (unsigned __int8 *)v9;
        int v17 = (unsigned char *)v7;
      }
      int v25 = v11 - v14;
      do
      {
        __int16 v26 = v16[1];
        __int16 v27 = v16[2];
        __int16 v28 = v16[3];
        *int v17 = (unsigned __int16)(v28 * *v16 + 128) / 0xFFu;
        v17[1] = (unsigned __int16)(v28 * v26 + 128) / 0xFFu;
        v17[2] = (unsigned __int16)(v28 * v27 + 128) / 0xFFu;
        v17[3] = v28;
        v17 += 4;
        v16 += 4;
        --v25;
      }
      while (v25);
LABEL_4:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 32);
      int v5 = a2[1];
LABEL_5:
      ++v4;
      v9 += v8;
      v7 += v6;
    }
    while (v4 < v5);
  }
  if (v30) {
    sub_1002D6888(v29);
  }
}

void sub_10031619C(uint64_t a1)
{
  nullsub_1(a1);

  operator delete();
}

void sub_1003161D4(uint64_t a1, int *a2)
{
  sub_1002D6AE8(v17, &off_100499778);
  int v4 = *a2;
  int v5 = a2[1];
  if (*a2 < v5 && *(int *)(a1 + 40) >= 1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = (unsigned char *)(*(void *)(a1 + 24) + v6 * v4);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 8) + v8 * v4;
    do
    {
      int v10 = *(_DWORD *)(a1 + 40);
      if (v10 >= 1)
      {
        uint64_t v11 = (unsigned char *)(v9 + 3);
        uint64_t v12 = v7;
        do
        {
          unsigned int v16 = *v11;
          if (*v11)
          {
            unsigned int v13 = (unsigned __int16)((v16 >> 1) - *(v11 - 3) + (*(v11 - 3) << 8))
                / v16;
            unsigned int v14 = (unsigned __int16)((v16 >> 1) - *(v11 - 2) + (*(v11 - 2) << 8))
                / v16;
            unsigned int v15 = (unsigned __int16)((v16 >> 1) - *(v11 - 1) + (*(v11 - 1) << 8))
                / v16;
          }
          else
          {
            LOBYTE(v13) = 0;
            LOBYTE(v14) = 0;
            LOBYTE(v15) = 0;
          }
          *uint64_t v12 = v13;
          v12[1] = v14;
          v12[2] = v15;
          v12[3] = v16;
          v12 += 4;
          v11 += 4;
          --v10;
        }
        while (v10);
        uint64_t v8 = *(void *)(a1 + 16);
        uint64_t v6 = *(void *)(a1 + 32);
        int v5 = a2[1];
      }
      ++v4;
      v9 += v8;
      v7 += v6;
    }
    while (v4 < v5);
  }
  if (v18) {
    sub_1002D6888(v17);
  }
}

unsigned int *sub_100316304()
{
  xmmword_1004F7400 = xmmword_100407750;
  *(_OWORD *)&qword_1004F7410 = xmmword_100407760;
  unk_1004F7420 = xmmword_100407770;
  xmmword_1004F7430 = xmmword_100407780;
  qword_1004F7440 = 0x3FEE68427418D691;
  xmmword_1004F7450 = xmmword_100407790;
  *(_OWORD *)&qword_1004F7460 = xmmword_1004077A0;
  xmmword_1004F7470 = xmmword_1004077B0;
  *(_OWORD *)&qword_1004F7480 = xmmword_1004077C0;
  qword_1004F7490 = 0x3FF0EABEF06B3786;
  xmmword_1004F73E0 = xmmword_1004077D0;
  qword_1004F73F0 = 0x3FF16B8950763A19;
  sub_1002C6CF0((unsigned int *)&v4, 2048);
  sub_1002C6CF0(&v3, 3);
  sub_1002C70C8((int *)&v4, &v3, &v5);
  dword_1004F7274 = v5;
  sub_1002C6CF0((unsigned int *)&dword_1004F7278, -134);
  v0 = sub_1002C6CF0((unsigned int *)algn_1004F727C, 220);
  sub_1002C6E58(v0, (unsigned int *)&dword_1004F7278, &dword_1004F7280);
  sub_1002C6CF0((unsigned int *)&dword_1004F7284, -140);
  v1 = sub_1002C6CF0(&dword_1004F7288, 122);
  sub_1002C6E58(v1, (unsigned int *)&dword_1004F7284, &dword_1004F728C);
  sub_1002C7414(&v5, 809);
  sub_1002C7414(&v4, 20000);
  sub_1002C7C94(&v5, &v4, &qword_1004F72E8);
  sub_1002C7414(&v5, 7827);
  sub_1002C7414(&v4, 2500000);
  sub_1002C7C94(&v5, &v4, &qword_1004F72F0);
  sub_1002C7414(&v5, 323);
  sub_1002C7414(&v4, 25);
  sub_1002C7C94(&v5, &v4, &qword_1004F72F8);
  sub_1002C7414(&v5, 12);
  sub_1002C7414(&v4, 5);
  sub_1002C7C94(&v5, &v4, &qword_1004F7300);
  sub_1002C7414(&v5, 11);
  sub_1002C7414(&v4, 200);
  sub_1002C7C94(&v5, &v4, &qword_1004F7308);
  sub_1002C6CF0((unsigned int *)&v5, 216);
  sub_1002C6CF0((unsigned int *)&v4, 24389);
  sub_1002C70C8((int *)&v5, (unsigned int *)&v4, &dword_1004F7290);
  sub_1002C6CF0((unsigned int *)&v5, 841);
  sub_1002C6CF0((unsigned int *)&v4, 108);
  sub_1002C70C8((int *)&v5, (unsigned int *)&v4, dword_1004F7294);
  sub_1002C6CF0((unsigned int *)&v5, 16);
  sub_1002C6CF0((unsigned int *)&v4, 116);
  sub_1002C70C8((int *)&v5, (unsigned int *)&v4, &dword_1004F7294[1]);
  return sub_1002C6CF0((unsigned int *)&dword_1004F729C, 255);
}

double sub_1003165A8(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1002D2278(-27, &v5, "cvStartReadChainPoints", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 60);
  }
  if (*(_DWORD *)(a1 + 44) != 1 || *(int *)(a1 + 4) <= 103)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1002D2278(-201, &v5, "cvStartReadChainPoints", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 63);
  }
  sub_10025AD4C(a1, a2, 0);
  *(void *)(a2 + 68) = *(void *)(a1 + 96);
  *(_DWORD *)(a2 + 76) = -16711679;
  *(unsigned char *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 81) = -1;
  *(void *)&double result = 130816;
  *(_DWORD *)(a2 + 85) = 130816;
  *(_WORD *)(a2 + 89) = 257;
  *(unsigned char *)(a2 + 91) = 1;
  return result;
}

void sub_10031669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003166CC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  if (!a2)
  {
    v71[0] = 0;
    v71[1] = 0;
    sub_1002D2278(-27, v71, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 188);
  }
  uint64_t v13 = sub_1002324D4(a1, (uint64_t)v71, 0, 0);
  BOOL v14 = (*(_DWORD *)v13 & 0xFFF) == 4;
  if (a4 == 2 && v14) {
    int v15 = 4;
  }
  else {
    int v15 = a4;
  }
  int v66 = v15;
  if (v15 != 4) {
    BOOL v14 = 0;
  }
  BOOL v16 = v15 < 4 && (*(_DWORD *)v13 & 0xFFE) == 0;
  if (!v16 && !v14)
  {
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    qmemcpy((void *)sub_1002D19D8(&v69, 119), "[Start]FindContours supports only CV_8UC1 images when mode != CV_RETR_FLOODFILL otherwise supports CV_32SC1 images only", 119);
    sub_1002D2278(-210, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 199);
  }
  uint64_t v67 = *(unsigned int *)(v13 + 36);
  uint64_t v68 = *(unsigned int *)(v13 + 32);
  int v17 = *(_DWORD *)(v13 + 4);
  int v18 = *(char **)(v13 + 24);
  if (a5 >= 5)
  {
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    sub_1002D2278(-211, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 206);
  }
  if (a5) {
    int v19 = 128;
  }
  else {
    int v19 = 104;
  }
  if (v19 > a3)
  {
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    sub_1002D2278(-201, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 209);
  }
  int v64 = a7;
  uint32x4_t v65 = (_DWORD *)v13;
  uint64_t v20 = sub_10020FEBC(0x598uLL);
  bzero((void *)(v20 + 16), 0x588uLL);
  *(void *)uint64_t v20 = a2;
  *(void *)(v20 + 8) = a2;
  uint64_t v21 = a2;
  uint16x8_t v22 = &v18[v17];
  uint64_t v63 = v18;
  *(void *)(v20 + 80) = v18;
  *(void *)(v20 + 88) = v22;
  *(_DWORD *)(v20 + 96) = v17;
  *(_DWORD *)(v20 + 100) = v67 - 1;
  int v23 = v68 - 1;
  *(_DWORD *)(v20 + 104) = v68 - 1;
  *(_DWORD *)(v20 + 376) = v66;
  *(void *)(v20 + 108) = a6;
  *(void *)(v20 + 116) = 0x100000001;
  *(void *)(v20 + 128) = 0x200000001;
  *(void *)(v20 + 224) = 0;
  *(void *)(v20 + 232) = v20 + 272;
  *(_DWORD *)(v20 + 264) = 1;
  *(void *)(v20 + 216) = 0;
  *(void *)(v20 + 248) = (v68 << 32) | v67;
  *(_DWORD *)(v20 + 380) = 0;
  *(_DWORD *)(v20 + 272) = 0x8000;
  *(_DWORD *)(v20 + 368) = a5;
  *(_DWORD *)(v20 + 372) = a5;
  if ((a5 - 3) >= 2)
  {
    if (a5)
    {
      int v26 = 20492;
      *(_DWORD *)(v20 + 384) = 20492;
      *(_DWORD *)(v20 + 388) = a3;
      int v25 = 8;
      *(_DWORD *)(v20 + 392) = 8;
      int v24 = 20492;
    }
    else
    {
      int v26 = 20480;
      *(_DWORD *)(v20 + 384) = 20480;
      *(_DWORD *)(v20 + 388) = a3;
      int v25 = 1;
      *(_DWORD *)(v20 + 392) = 1;
      int v24 = 20480;
    }
  }
  else
  {
    *(_DWORD *)(v20 + 368) = 0;
    *(void *)(v20 + 384) = 0x6800005000;
    *(_DWORD *)(v20 + 392) = 1;
    int v24 = 20492;
    int v25 = 8;
    int v26 = 20480;
  }
  *(_DWORD *)(v20 + 400) = a3;
  *(_DWORD *)(v20 + 404) = v25;
  *(_DWORD *)(v20 + 384) = v26;
  *(_DWORD *)(v20 + 396) = v24;
  sub_10025A2E8(v21, v20 + 32);
  if (a5 <= 2)
  {
    if (v66 < 2) {
      goto LABEL_28;
    }
LABEL_31:
    sub_100259FE0(*(void *)(v20 + 8));
    *(void *)(v20 + 16) = v28;
    *(void *)(v20 + 24) = sub_10025EB10(0, 112, 64, v28);
    if (v17 < 0) {
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  sub_100259FE0(*(void *)(v20 + 8));
  *(void *)uint64_t v20 = v27;
  if (v66 >= 2) {
    goto LABEL_31;
  }
LABEL_28:
  if (v17 < 0)
  {
LABEL_32:
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v29 = sub_1002D19D8(&v69, 9);
    *(unsigned char *)(v29 + 8) = 48;
    *(void *)uint64_t v29 = *(void *)"step >= 0";
    sub_1002D2278(-215, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 289);
  }
LABEL_33:
  if ((int)v68 <= 0)
  {
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    *(_OWORD *)sub_1002D19D8(&v69, 16) = *(_OWORD *)"size.height >= 1";
    sub_1002D2278(-215, &v69, "cvStartFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 290);
  }
  if (v64)
  {
    uint64_t v30 = (((*v65 >> 3) & 0x1FFu) + 1) << ((0xFA50u >> (2 * (*(unsigned char *)v65 & 7))) & 3);
    bzero(v63, (int)v30 * (int)v67);
    bzero(&v63[v17 * (uint64_t)v23], (int)v30 * (int)v67);
    if ((int)v68 >= 3)
    {
      uint64_t v31 = (int)v30 * ((int)v67 - 1);
      if (v30 <= 7)
      {
        int v32 = 1;
        do
        {
          uint64_t v33 = 0;
          do
          {
            v22[v31 + v33] = 0;
            v22[v33++] = 0;
          }
          while (v30 != v33);
          ++v32;
          v22 += v17;
        }
        while (v32 != v23);
        goto LABEL_42;
      }
      int v35 = &v63[v17];
      int v36 = &v35[v31];
      uint64_t v37 = v30 & 0x1FF8;
      if (v30 <= 0x1F)
      {
        uint64_t v38 = 0;
        int v39 = 1;
        while (1)
        {
          if ((unint64_t)-v31 > 0x1F)
          {
            *(void *)&v22[v31] = 0;
            *(void *)uint16x8_t v22 = 0;
            if (v37 != 8)
            {
              *(void *)&v22[v31 + 8] = 0;
              *((void *)v22 + 1) = 0;
              if (v37 != 16)
              {
                *(void *)&v22[v31 + 16] = 0;
                *((void *)v22 + 2) = 0;
              }
            }
            uint64_t v40 = v30 & 0x18;
            if (v37 == v30) {
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v40 = 0;
          }
          uint64_t v41 = v30 - v40;
          int v42 = &v22[v40];
          uint64_t v43 = v31 + v40;
          do
          {
            v22[v43] = 0;
            *v42++ = 0;
            ++v43;
            --v41;
          }
          while (v41);
LABEL_47:
          ++v39;
          v22 += v17;
          ++v38;
          if (v39 == v23) {
            goto LABEL_42;
          }
        }
      }
      uint64_t v44 = v30 & 0x1FE0;
      if (v44 == v30)
      {
        uint64_t v45 = 0;
        uint64_t v46 = (uint64_t)&v63[v17 + 16 + v31];
        int v47 = 1;
        do
        {
          if ((unint64_t)-v31 >= 0x20)
          {
            unint64_t v49 = 0;
            do
            {
              unsigned int v50 = (_OWORD *)(v46 + v49);
              *(v50 - 1) = 0uLL;
              *unsigned int v50 = 0uLL;
              int v51 = &v22[v49];
              *(_OWORD *)int v51 = 0uLL;
              *((_OWORD *)v51 + 1) = 0uLL;
              v49 += 32;
            }
            while (v44 != v49);
          }
          else
          {
            for (uint64_t i = 0; i != v30; ++i)
            {
              v22[v31 + i] = 0;
              v22[i] = 0;
            }
          }
          ++v47;
          v22 += v17;
          ++v45;
          v46 += v17;
        }
        while (v47 != v23);
        goto LABEL_42;
      }
      uint64_t v52 = 0;
      char v53 = &v63[v17 + v31];
      int v54 = v53 + 16;
      uint64_t v55 = v44 + v31;
      int v56 = 1;
      do
      {
        if ((unint64_t)(&v35[v52 * v17] - &v36[v52 * v17]) >= 0x20)
        {
          unint64_t v58 = 0;
          do
          {
            uint32x4_t v59 = &v54[v58];
            *((_OWORD *)v59 - 1) = 0uLL;
            *(_OWORD *)uint32x4_t v59 = 0uLL;
            uint8x16_t v60 = &v22[v58];
            *(_OWORD *)uint8x16_t v60 = 0uLL;
            *((_OWORD *)v60 + 1) = 0uLL;
            v58 += 32;
          }
          while (v44 != v58);
          uint64_t v57 = v30 & 0x1FE0;
          if ((v30 & 0x18) != 0)
          {
            uint64_t v61 = v55;
            uint64_t v62 = v30 & 0x1FE0;
            do
            {
              *(void *)&v22[v61] = 0;
              *(void *)&v22[v62] = 0;
              v62 += 8;
              v61 += 8;
            }
            while (v37 != v62);
            uint64_t v57 = v30 & 0x1FF8;
            if (v37 == v30) {
              goto LABEL_68;
            }
          }
        }
        else
        {
          uint64_t v57 = 0;
        }
        do
        {
          v53[v57] = 0;
          v22[v57++] = 0;
        }
        while (v30 != v57);
LABEL_68:
        ++v56;
        v22 += v17;
        ++v52;
        v54 += v17;
        v53 += v17;
      }
      while (v56 != v23);
    }
  }
LABEL_42:
  if ((*v65 & 0xFFF) != 4) {
    sub_10039A280((uint64_t)v65, (uint64_t)v65, 0, 0.0, 1.0);
  }
  return v20;
}

void sub_100316DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100316E6C(void **a1, double a2, double a3, __n128 a4)
{
  uint64_t v4 = a1;
  if (!a1)
  {
    long long v224 = 0uLL;
    sub_1002D2278(-27, (uint64_t *)&v224, "cvFindNextContour", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1012);
  }
  if ((a1[12] & 0x80000000) != 0)
  {
    long long v224 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v224, 22), "scanner->img_step >= 0", 22);
    sub_1002D2278(-215, (uint64_t *)&v224, "cvFindNextContour", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1018);
  }
  uint64_t v5 = a1[17];
  if (v5)
  {
    if (*((_DWORD *)a1 + 95))
    {
      sub_10025A2E8((uint64_t)a1[1], (uint64_t)&v224);
      uint64_t v4 = a1;
      if ((void *)v224 == a1[8] && DWORD2(v224) == *((_DWORD *)a1 + 18))
      {
        sub_10025A374((uint64_t)a1[1], (uint64_t *)a1 + 6);
        uint64_t v4 = a1;
      }
      *((_DWORD *)v4 + 95) = 0;
    }
    uint64_t v6 = v5[3];
    if (v6)
    {
      sub_10025FC00(v6, *(void *)(v5[2] + 24), (uint64_t)(v4 + 34));
      uint64_t v4 = a1;
    }
    v4[17] = 0;
  }
  unint64_t v7 = v4[11];
  uint64_t v8 = *((unsigned int *)v4 + 30);
  int v216 = *((_DWORD *)v4 + 26);
  int v9 = *((_DWORD *)v4 + 94);
  uint64_t v10 = *((int *)v4 + 29) - 1;
  if (v9 == 4)
  {
    int v11 = *((_DWORD *)v7 + v10);
    int v12 = -1073741824;
    if ((int)v8 >= v216) {
      return 0;
    }
  }
  else
  {
    int v11 = *((char *)v7 + v10);
    int v12 = -2;
    if ((int)v8 >= v216) {
      return 0;
    }
  }
  int v13 = *((_DWORD *)v4 + 24);
  uint64_t v14 = *((int *)v4 + 25);
  uint64_t v15 = v13;
  int v16 = v13 >> 2;
  int v17 = v4[10];
  int v181 = v13 >> 2;
  float32x4x3_t v182 = v17;
  if (v9 != 4) {
    int v17 = 0;
  }
  int v175 = v17;
  int v192 = v12;
  int v203 = ~v12;
  int v205 = v13 >> 2;
  HIDWORD(v180) = -v16;
  LODWORD(v180) = 1 - v16;
  int v179 = ~v16;
  int v19 = *((_DWORD *)v4 + 31);
  LODWORD(v18) = *((_DWORD *)v4 + 32);
  int v178 = v16 - 1;
  int v177 = v16 + 1;
  int v196 = *((_DWORD *)v4 + 33);
  HIDWORD(v187) = -v13;
  LODWORD(v187) = 1 - v13;
  int v186 = ~v13;
  unsigned int v188 = *((_DWORD *)v4 + 24);
  int v184 = v13 + 1;
  int v185 = v13 - 1;
  float32x4_t v190 = v4 + 26;
  int64x2_t v191 = (uint64_t *)(v4 + 6);
  float32x4_t v176 = (int32x2_t *)(v4 + 18);
  int v20 = *((_DWORD *)v4 + 29);
  uint64_t v214 = v13;
  int v189 = *((_DWORD *)v4 + 94);
  while (1)
  {
    uint64_t v21 = v9 == 4 ? v7 : 0;
    if (v20 < (int)v14) {
      break;
    }
LABEL_22:
    int v11 = 0;
    int v19 = 0;
    uint64_t v18 = (v8 + 1);
    unint64_t v7 = (void *)((char *)v7 + v15);
    int v20 = 1;
    uint64_t v8 = v18;
    if (v18 == v216) {
      return 0;
    }
  }
  uint64_t v22 = v205 * (uint64_t)(int)v18;
  uint64_t v209 = v8 << 32;
  a4.n128_u64[0] = (unint64_t)vdup_n_s32(v8);
  uint64_t v23 = (int)v15 * (uint64_t)(int)v18;
  while (1)
  {
    if (v21)
    {
      if (v20 >= (int)v14) {
        goto LABEL_22;
      }
      uint64_t v24 = v20;
      while (1)
      {
        unsigned int v25 = *((_DWORD *)v21 + v24);
        if (v25 != v11 && ((v25 ^ v11) & v203) != 0) {
          break;
        }
        ++v24;
        int v11 = v25;
        if (v14 == v24) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (v20 >= (int)v14) {
        goto LABEL_22;
      }
      uint64_t v24 = v20;
      while (1)
      {
        unsigned int v25 = *((char *)v7 + v24);
        if (v11 != v25) {
          break;
        }
        if (v14 == ++v24) {
          goto LABEL_21;
        }
      }
    }
    if ((int)v14 <= (int)v24)
    {
LABEL_21:
      uint64_t v15 = v214;
      goto LABEL_22;
    }
    if (v21) {
      break;
    }
    if (!v11 && v25 == 1) {
      goto LABEL_56;
    }
    if (!v25 && v11 >= 1)
    {
      unsigned int v25 = 0;
      int v33 = v11 & v192;
      int v28 = v24 - 1;
      if (v33) {
        int v19 = v24 - 1;
      }
      if (v9)
      {
LABEL_67:
        int v202 = v18;
        uint64_t v197 = v8;
        float32x4_t v200 = v7;
        if (v9 < 2)
        {
          int v30 = 0;
          int v31 = 1;
          int v32 = v28;
          unsigned int v29 = 1;
          goto LABEL_79;
        }
        int v30 = 0;
        int v31 = 0;
        unsigned int v29 = 1;
        int v32 = v28;
        int32x2_t v198 = (int32x2_t)v190;
        if (v19 < 1) {
          goto LABEL_80;
        }
        goto LABEL_73;
      }
    }
LABEL_302:
    if (v25 >= 2) {
      int v19 = v24;
    }
    int v20 = v24 + 1;
    int v11 = v25;
    uint64_t v15 = v214;
    if ((int)v24 + 1 >= (int)v14) {
      goto LABEL_22;
    }
  }
  BOOL v27 = (v11 & v192) != 0 || v11 == 0;
  if (!v27 || (v25 & v192) != 0)
  {
    if ((v192 & (v11 | v25)) == 0)
    {
      int v28 = v24 - 1;
      if (v9) {
        goto LABEL_67;
      }
    }
    goto LABEL_302;
  }
LABEL_56:
  if (!v9)
  {
    if (*((char *)v182 + v23 + v19) <= 0)
    {
      int v202 = v18;
      uint64_t v197 = v8;
      float32x4_t v200 = v7;
LABEL_71:
      unsigned int v29 = 0;
      int v31 = 1;
      int v32 = v24;
      int v30 = 1;
      goto LABEL_79;
    }
    goto LABEL_302;
  }
  float32x4_t v200 = v7;
  uint64_t v197 = v8;
  int v202 = v18;
  if (v9 < 2) {
    goto LABEL_71;
  }
  if (v19 < 1)
  {
    int v31 = 0;
    unsigned int v29 = 0;
    int v30 = 1;
    goto LABEL_78;
  }
  unsigned int v29 = 0;
  int v30 = 1;
  if (v9 == 2)
  {
    int v31 = 0;
LABEL_78:
    int v32 = v24;
LABEL_79:
    int32x2_t v198 = (int32x2_t)v190;
    goto LABEL_80;
  }
  int v28 = v24;
  int v31 = 0;
  int v32 = v24;
  int32x2_t v198 = (int32x2_t)v190;
  if (v9 == 4) {
    goto LABEL_80;
  }
LABEL_73:
  if (v175)
  {
    unsigned int v34 = (int32x2_t *)v4[(*((_DWORD *)v175 + v22 + v19) & 0x7F) + 51];
    if (!v34) {
      goto LABEL_310;
    }
  }
  else
  {
    unsigned int v34 = (int32x2_t *)v4[(*((unsigned char *)v182 + v23 + v19) & 0x7F) + 51];
    if (!v34) {
      goto LABEL_310;
    }
  }
  int8x16_t v126 = 0;
  int8x16_t v127 = (_DWORD *)v21 + v19;
  int8x16_t v128 = (char *)v200 + v19;
  while (2)
  {
    if ((v19 - v34[4].i32[0]) >= v34[5].i32[0] || (v202 - v34[4].i32[1]) >= v34[5].i32[1])
    {
      int8x16_t v129 = v126;
      goto LABEL_232;
    }
    int8x16_t v129 = v34;
    if (!v126)
    {
LABEL_232:
      unsigned int v34 = (int32x2_t *)v34[1];
      int8x16_t v126 = v129;
      if (!v34) {
        goto LABEL_271;
      }
      continue;
    }
    break;
  }
  uint64_t v130 = v126[6].i32[0];
  int v131 = v126[6].i32[1];
  unint64_t v132 = v126[7].u32[0];
  if (v175)
  {
    int32x4_t v133 = (_DWORD *)v175 + v131 * (uint64_t)v205 + v130;
    int v134 = *v133 & 0x3FFFFFFF;
    LODWORD(v224) = 1;
    *(void *)((char *)&v224 + 4) = v180;
    HIDWORD(v224) = v179;
    LODWORD(v225) = -1;
    *(void *)((char *)&v225 + 4) = __PAIR64__(v181, v178);
    HIDWORD(v225) = v177;
    long long v226 = v224;
    long long v227 = v225;
    LODWORD(v132) = v132 == 0;
    uint64_t v135 = 4 * v132;
    LOBYTE(v132) = 4 * v132;
    do
    {
      unint64_t v132 = ((_BYTE)v132 - 1) & 7;
      uint64_t v136 = *((int *)&v224 + v132);
    }
    while (v132 != v135 && (v133[v136] & 0x3FFFFFFF) != v134);
    if (v132 != v135)
    {
      float32x4_t v138 = &v133[v136];
      for (uint64_t i = v133; ; uint64_t i = v143)
      {
        do
        {
          unint64_t v140 = v132;
          float32x4_t v141 = (char *)&v224 + 4 * v132++;
          uint64_t v142 = *((int *)v141 + 1);
        }
        while (v140 <= 0xD && (i[v142] & 0x3FFFFFFF) != v134);
        if (i == v127) {
          break;
        }
        float32x4_t v143 = &i[v142];
        if (i == v138 && v143 == v133)
        {
          int32x4_t v133 = v138;
          goto LABEL_252;
        }
        unint64_t v132 = ((_BYTE)v132 + 4) & 7;
      }
      goto LABEL_271;
    }
LABEL_252:
    int8x16_t v129 = v34;
    if (v133 == v127) {
      goto LABEL_271;
    }
    goto LABEL_232;
  }
  float32x4_t v144 = (char *)v182 + v131 * (uint64_t)(int)v214 + v130;
  LODWORD(v224) = 1;
  *(void *)((char *)&v224 + 4) = v187;
  HIDWORD(v224) = v186;
  LODWORD(v225) = -1;
  *(void *)((char *)&v225 + 4) = __PAIR64__(v188, v185);
  HIDWORD(v225) = v184;
  long long v226 = v224;
  long long v227 = v225;
  int v145 = 4 * (v132 == 0);
  LOBYTE(v146) = 4 * (v132 == 0);
  do
  {
    LODWORD(v146) = ((_BYTE)v146 - 1) & 7;
    uint64_t v147 = *((int *)&v224 + v146);
    if (v144[v147]) {
      BOOL v148 = 1;
    }
    else {
      BOOL v148 = v146 == v145;
    }
  }
  while (!v148);
  if (v146 == v145)
  {
LABEL_270:
    int8x16_t v129 = v34;
    if (v144 == v128) {
      goto LABEL_271;
    }
    goto LABEL_232;
  }
  float32x4_t v149 = &v144[v147];
  for (uint64_t j = v144; ; uint64_t j = v154)
  {
    unint64_t v146 = v146;
    do
    {
      unint64_t v151 = v146;
      float32x4_t v152 = (char *)&v224 + 4 * v146++;
      uint64_t v153 = *((int *)v152 + 1);
    }
    while (v151 <= 0xD && !j[v153]);
    if (j == v128) {
      break;
    }
    float32x4_t v154 = &j[v153];
    if (j == v149 && v154 == v144)
    {
      float32x4_t v144 = v149;
      goto LABEL_270;
    }
    LODWORD(v146) = ((_BYTE)v146 + 4) & 7;
  }
LABEL_271:
  if (!v126)
  {
LABEL_310:
    long long v224 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v224, 13), "par_info != 0", 13);
    sub_1002D2278(-215, (uint64_t *)&v224, "cvFindNextContour", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1182);
  }
  int32x2_t v155 = (int32x2_t)v126;
  if (v126[7].i32[0] == v29)
  {
    int32x2_t v155 = (int32x2_t)v190;
    if (v126[2]) {
      int32x2_t v155 = v126[2];
    }
  }
  int32x2_t v198 = v155;
  if (!*(void *)(*(void *)&v155 + 24))
  {
    unint64_t v7 = v200;
    uint64_t v8 = v197;
    LODWORD(v18) = v202;
    goto LABEL_302;
  }
  int v31 = 0;
  int v32 = v28;
LABEL_80:
  int v206 = v32;
  unsigned int v201 = v29;
  uint64_t v193 = v23;
  uint64_t v194 = v22;
  __n128 v195 = a4;
  float32x4_t v204 = v21;
  sub_10025A2E8((uint64_t)v4[1], (uint64_t)v191);
  float v210 = (int32x2_t *)sub_10025A7E4(*((_DWORD *)a1 + 96), *((int *)a1 + 97), *((int *)a1 + 98), (uint64_t)*a1);
  if (v30) {
    int v35 = 0;
  }
  else {
    int v35 = 0x8000;
  }
  v210->i32[0] |= v35;
  if (!v31)
  {
    float32x2_t v220 = 0;
    sub_10025EC10((uint64_t)a1[3], 0, &v220);
    float32x4x3_t v183 = v220;
    if (v204)
    {
      int v46 = v204[v206];
      int32x2_t v47 = *(int32x2_t *)((char *)a1 + 108);
      int v207 = *((_DWORD *)a1 + 92);
      int v48 = &v204[(int)v24 - v29];
      unsigned int v49 = *v48;
      LODWORD(v224) = 1;
      *(void *)((char *)&v224 + 4) = v180;
      HIDWORD(v224) = v179;
      LODWORD(v225) = -1;
      *(void *)((char *)&v225 + 4) = __PAIR64__(v181, v178);
      HIDWORD(v225) = v177;
      long long v226 = v224;
      long long v227 = v225;
      sub_10025B304(v210, (uint64_t)v221);
      __n128 v51 = v195;
      v51.n128_u32[0] = v206;
      int32x2_t v52 = vadd_s32(v47, (int32x2_t)v51.n128_u64[0]);
      if (v207 <= 0) {
        v210[12] = v52;
      }
      int v174 = v46 & 0x7F;
      int v53 = v49 & 0x3FFFFFFF;
      int v54 = ~((unsigned __int32)v210->i32[0] >> 13) & 4;
      LOBYTE(v55) = v54;
      do
      {
        unsigned int v55 = ((_BYTE)v55 - 1) & 7;
        uint64_t v56 = *((int *)&v224 + v55);
      }
      while ((v48[v56] & 0x3FFFFFFF) != v53 && v55 != v54);
      if (v55 == v54)
      {
        unsigned int *v48 = v49 | 0xC0000000;
        if (v207 >= 1)
        {
          unint64_t v58 = (int32x2_t *)v222;
          if ((unint64_t)v222 >= v223)
          {
            sub_10025B664(v221);
            unint64_t v58 = (int32x2_t *)v222;
          }
          *unint64_t v58 = v52;
          ++v222;
        }
        v217.n128_u64[0] = (unint64_t)v52;
      }
      else
      {
        float v211 = &v48[v56];
        int v77 = v55 ^ 4;
        int v78 = v48;
        int32x2_t v79 = v52;
        v51.n128_u64[0] = (unint64_t)v52;
        if (v207 < 1)
        {
          __n128 v217 = v51;
          while (1)
          {
            unint64_t v116 = v55;
            do
            {
              unint64_t v117 = v116;
              uint64_t v118 = *((int *)&v224 + ++v116);
            }
            while (v117 <= 0xD && (v78[v118] & 0x3FFFFFFF) != v53);
            unsigned int v119 = v49 | 0xC0000000;
            if ((v116 & 7) - 1 < v55 || (unsigned int v119 = v49 & 0x3FFFFFFF | 0x40000000, *v78 == v53)) {
              *int v78 = v119;
            }
            int8x16_t v120 = v222;
            if ((unint64_t)v222 >= v223)
            {
              sub_10025B664(v221);
              int8x16_t v120 = v222;
            }
            *int8x16_t v120 = v116 & 7;
            float32x2_t v222 = (void *)((char *)v222 + 1);
            v51.n128_u32[0] = v77;
            v50.i32[0] = v116 & 7;
            int8x8_t v121 = (int8x8_t)vdup_lane_s32(vceq_s32(v50, (int32x2_t)v51.n128_u64[0]), 0);
            v122.n128_u64[1] = v217.n128_u64[1];
            int32x2_t v52 = (int32x2_t)vbsl_s8(v121, (int8x8_t)v52, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v217.n128_u64[0], v79), (int8x8_t)v52, (int8x8_t)vmax_s32(v79, v52)));
            int32x2_t v50 = vmin_s32(v79, (int32x2_t)v217.n128_u64[0]);
            v122.n128_u64[0] = (unint64_t)vbsl_s8(v121, (int8x8_t)v217.n128_u64[0], (int8x8_t)v50);
            __n128 v217 = v122;
            if (v78 == v211 && &v78[v118] == v48) {
              break;
            }
            v51.n128_u64[0] = *((void *)&unk_1004085A8 + (v116 & 7));
            int32x2_t v79 = vadd_s32((int32x2_t)v51.n128_u64[0], v79);
            unsigned int v55 = ((_BYTE)v116 + 4) & 7;
            v78 += v118;
            int v77 = v116 & 7;
          }
        }
        else
        {
          __n128 v217 = v51;
          while (1)
          {
            unint64_t v80 = v55;
            do
            {
              unint64_t v81 = v80;
              uint64_t v82 = *((int *)&v224 + ++v80);
            }
            while (v81 <= 0xD && (v78[v82] & 0x3FFFFFFF) != v53);
            unsigned int v83 = v49 | 0xC0000000;
            if ((v80 & 7) - 1 < v55 || (unsigned int v83 = v49 & 0x3FFFFFFF | 0x40000000, *v78 == v53)) {
              *int v78 = v83;
            }
            if (v207 == 1 || (v80 & 7) != v77)
            {
              uint64_t v84 = (int32x2_t *)v222;
              if ((unint64_t)v222 >= v223)
              {
                sub_10025B664(v221);
                uint64_t v84 = (int32x2_t *)v222;
              }
              *uint64_t v84 = v79;
              ++v222;
            }
            v51.n128_u32[0] = v77;
            v50.i32[0] = v80 & 7;
            int8x8_t v85 = (int8x8_t)vdup_lane_s32(vceq_s32(v50, (int32x2_t)v51.n128_u64[0]), 0);
            v86.n128_u64[1] = v217.n128_u64[1];
            int32x2_t v52 = (int32x2_t)vbsl_s8(v85, (int8x8_t)v52, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v217.n128_u64[0], v79), (int8x8_t)v52, (int8x8_t)vmax_s32(v79, v52)));
            int32x2_t v50 = vmin_s32(v79, (int32x2_t)v217.n128_u64[0]);
            v86.n128_u64[0] = (unint64_t)vbsl_s8(v85, (int8x8_t)v217.n128_u64[0], (int8x8_t)v50);
            __n128 v217 = v86;
            if (v78 == v211 && &v78[v82] == v48) {
              break;
            }
            v51.n128_u64[0] = *((void *)&unk_1004085A8 + (v80 & 7));
            int32x2_t v79 = vadd_s32((int32x2_t)v51.n128_u64[0], v79);
            unsigned int v55 = ((_BYTE)v80 + 4) & 7;
            v78 += v82;
            int v77 = v80 & 7;
          }
        }
      }
      sub_10025B52C(v221);
      int32x2_t v123 = vadd_s32(vsub_s32(v52, (int32x2_t)v217.n128_u64[0]), (int32x2_t)0x100000001);
      uint64_t v115 = (uint64_t)v210;
      if (v207)
      {
        *(void *)&long long v124 = v217.n128_u64[0];
        *((int32x2_t *)&v124 + 1) = v123;
        *(_OWORD *)v210[12].i8 = v124;
      }
      float v111 = v183;
      v183[4] = (int32x2_t)v217.n128_u64[0];
      v183[5] = v123;
      int v112 = a1;
      unsigned int v113 = v201;
      unsigned int v114 = v206;
      int v125 = v174;
    }
    else
    {
      int32x2_t v66 = *(int32x2_t *)((char *)a1 + 108);
      if ((((_BYTE)v196 + 1) & 0x7F) != 0) {
        int v67 = 0;
      }
      else {
        int v67 = 3;
      }
      int v208 = *((_DWORD *)a1 + 92);
      LODWORD(v224) = 1;
      *(void *)((char *)&v224 + 4) = v187;
      HIDWORD(v224) = v186;
      LODWORD(v225) = -1;
      *(void *)((char *)&v225 + 4) = __PAIR64__(v188, v185);
      HIDWORD(v225) = v184;
      long long v226 = v224;
      long long v227 = v225;
      sub_10025B304(v210, (uint64_t)v221);
      __n128 v69 = v195;
      v69.n128_u32[0] = v206;
      int32x2_t v70 = vadd_s32(v66, (int32x2_t)v69.n128_u64[0]);
      if (v208 <= 0) {
        v210[12] = v70;
      }
      int v199 = v67 + (((_BYTE)v196 + 1) & 0x7F);
      int v71 = (char *)v200 + (int)v24 - v29;
      int v72 = ~((unsigned __int32)v210->i32[0] >> 13) & 4;
      LOBYTE(v73) = v72;
      do
      {
        unsigned int v73 = ((_BYTE)v73 - 1) & 7;
        uint64_t v74 = *((int *)&v224 + v73);
        if (v71[v74]) {
          BOOL v75 = 1;
        }
        else {
          BOOL v75 = v73 == v72;
        }
      }
      while (!v75);
      if (v73 == v72)
      {
        *int v71 = v196 | 0x80;
        if (v208 >= 1)
        {
          int v76 = (int32x2_t *)v222;
          if ((unint64_t)v222 >= v223)
          {
            sub_10025B664(v221);
            int v76 = (int32x2_t *)v222;
          }
          *int v76 = v70;
          ++v222;
        }
        v219.n128_u64[0] = (unint64_t)v70;
      }
      else
      {
        float32x2_t v212 = &v71[v74];
        int v94 = v73 ^ 4;
        long long v95 = (char *)v200 + (int)v24 - v29;
        int32x2_t v96 = v70;
        v69.n128_u64[0] = (unint64_t)v70;
        if (v208 < 1)
        {
          __n128 v219 = v69;
          while (1)
          {
            unint64_t v156 = v73;
            do
            {
              unint64_t v157 = v156;
              uint64_t v158 = *((int *)&v224 + ++v156);
            }
            while (v157 <= 0xD && !v95[v158]);
            char v159 = v196 | 0x80;
            if ((v156 & 7) - 1 < v73 || (char v159 = v196, *v95 == 1)) {
              unsigned char *v95 = v159;
            }
            float32x4_t v160 = v222;
            if ((unint64_t)v222 >= v223)
            {
              sub_10025B664(v221);
              float32x4_t v160 = v222;
            }
            *float32x4_t v160 = v156 & 7;
            float32x2_t v222 = (void *)((char *)v222 + 1);
            v69.n128_u32[0] = v94;
            v68.i32[0] = v156 & 7;
            int8x8_t v161 = (int8x8_t)vdup_lane_s32(vceq_s32(v68, (int32x2_t)v69.n128_u64[0]), 0);
            v162.n128_u64[1] = v219.n128_u64[1];
            int32x2_t v70 = (int32x2_t)vbsl_s8(v161, (int8x8_t)v70, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v219.n128_u64[0], v96), (int8x8_t)v70, (int8x8_t)vmax_s32(v96, v70)));
            int32x2_t v68 = vmin_s32(v96, (int32x2_t)v219.n128_u64[0]);
            v162.n128_u64[0] = (unint64_t)vbsl_s8(v161, (int8x8_t)v219.n128_u64[0], (int8x8_t)v68);
            __n128 v219 = v162;
            if (v95 == v212 && &v95[v158] == v71) {
              break;
            }
            v69.n128_u64[0] = *((void *)&unk_1004085A8 + (v156 & 7));
            int32x2_t v96 = vadd_s32((int32x2_t)v69.n128_u64[0], v96);
            unsigned int v73 = ((_BYTE)v156 + 4) & 7;
            v95 += v158;
            int v94 = v156 & 7;
          }
        }
        else
        {
          __n128 v219 = v69;
          while (1)
          {
            unint64_t v97 = v73;
            do
            {
              unint64_t v98 = v97;
              uint64_t v99 = *((int *)&v224 + ++v97);
            }
            while (v98 <= 0xD && !v95[v99]);
            char v100 = v196 | 0x80;
            if ((v97 & 7) - 1 < v73 || (char v100 = v196, *v95 == 1)) {
              unsigned char *v95 = v100;
            }
            if (v208 == 1 || (v97 & 7) != v94)
            {
              long long v101 = (int32x2_t *)v222;
              if ((unint64_t)v222 >= v223)
              {
                sub_10025B664(v221);
                long long v101 = (int32x2_t *)v222;
              }
              *long long v101 = v96;
              ++v222;
            }
            v69.n128_u32[0] = v94;
            v68.i32[0] = v97 & 7;
            int8x8_t v102 = (int8x8_t)vdup_lane_s32(vceq_s32(v68, (int32x2_t)v69.n128_u64[0]), 0);
            v103.n128_u64[1] = v219.n128_u64[1];
            int32x2_t v70 = (int32x2_t)vbsl_s8(v102, (int8x8_t)v70, vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)v219.n128_u64[0], v96), (int8x8_t)v70, (int8x8_t)vmax_s32(v96, v70)));
            int32x2_t v68 = vmin_s32(v96, (int32x2_t)v219.n128_u64[0]);
            v103.n128_u64[0] = (unint64_t)vbsl_s8(v102, (int8x8_t)v219.n128_u64[0], (int8x8_t)v68);
            __n128 v219 = v103;
            if (v95 == v212 && &v95[v99] == v71) {
              break;
            }
            v69.n128_u64[0] = *((void *)&unk_1004085A8 + (v97 & 7));
            int32x2_t v96 = vadd_s32((int32x2_t)v69.n128_u64[0], v96);
            unsigned int v73 = ((_BYTE)v97 + 4) & 7;
            v95 += v99;
            int v94 = v97 & 7;
          }
        }
      }
      sub_10025B52C(v221);
      v163.i32[1] = v219.n128_i32[1];
      v163.i32[0] = 1;
      v164.i32[0] = vsub_s32(vadd_s32(v70, v163), (int32x2_t)v219.n128_u64[0]).u32[0];
      v164.i32[1] = vadd_s32(vsub_s32(v70, *(int32x2_t *)&v219), (int32x2_t)(*(unsigned int *)&v219 | 0x100000000)).i32[1];
      uint64_t v115 = (uint64_t)v210;
      if (v208)
      {
        *(void *)&long long v165 = v219.n128_u64[0];
        *((int32x2_t *)&v165 + 1) = v164;
        *(_OWORD *)v210[12].i8 = v165;
      }
      float v111 = v183;
      v183[4] = (int32x2_t)v219.n128_u64[0];
      v183[5] = v164;
      int v125 = v196;
      int v196 = v199;
      int v112 = a1;
      unsigned int v113 = v29;
      unsigned int v114 = v206;
    }
    v111[4] = vsub_s32(v111[4], *(int32x2_t *)((char *)v112 + 108));
    float32x4_t v166 = (int32x2_t *)&v112[v125];
    v111[1] = v166[51];
    v166[51] = (int32x2_t)v111;
    goto LABEL_294;
  }
  int v36 = *((_DWORD *)a1 + 27);
  int v37 = *((_DWORD *)a1 + 28);
  int v213 = *((_DWORD *)a1 + 92);
  LODWORD(v224) = 1;
  *(void *)((char *)&v224 + 4) = v187;
  HIDWORD(v224) = v186;
  LODWORD(v225) = -1;
  *(void *)((char *)&v225 + 4) = __PAIR64__(v188, v185);
  HIDWORD(v225) = v184;
  long long v226 = v224;
  long long v227 = v225;
  sub_10025B304(v210, (uint64_t)v221);
  __int32 v38 = v36 + v206;
  __int32 v39 = v37 + v197;
  if (v213 <= 0)
  {
    v210[12].i32[0] = v38;
    v210[12].i32[1] = v39;
  }
  uint64_t v40 = (char *)v200 + (int)v24 - v29;
  int v41 = ~((unsigned __int32)v210->i32[0] >> 13) & 4;
  LOBYTE(v42) = v41;
  do
  {
    unsigned int v42 = ((_BYTE)v42 - 1) & 7;
    uint64_t v43 = *((int *)&v224 + v42);
    if (v40[v43]) {
      BOOL v44 = 1;
    }
    else {
      BOOL v44 = v42 == v41;
    }
  }
  while (!v44);
  if (v42 != v41)
  {
    float32x4_t v218 = &v40[v43];
    if (v213 > 0)
    {
      if (v213 == 1)
      {
        for (uint64_t k = (char *)v200 + (int)v24 - v29; ; k += v63)
        {
          unsigned int v60 = v42;
          unint64_t v61 = v42;
          do
          {
            unint64_t v62 = v61;
            uint64_t v63 = *((int *)&v224 + ++v61);
          }
          while (v62 <= 0xD && !k[v63]);
          if ((v61 & 7) - 1 >= v60)
          {
            if (*k != 1) {
              goto LABEL_124;
            }
            char v64 = 2;
          }
          else
          {
            char v64 = -126;
          }
          *uint64_t k = v64;
LABEL_124:
          uint32x4_t v65 = (__int32 *)v222;
          if ((unint64_t)v222 >= v223)
          {
            sub_10025B664(v221);
            uint32x4_t v65 = (__int32 *)v222;
          }
          *uint32x4_t v65 = v38;
          v65[1] = v39;
          ++v222;
          if (k == v218 && &k[v63] == v40) {
            goto LABEL_211;
          }
          v39 += *((_DWORD *)&unk_1004085A8 + 2 * (v61 & 7) + 1);
          v38 += *((_DWORD *)&unk_1004085A8 + 2 * (v61 & 7));
          unsigned int v42 = ((_BYTE)v61 + 4) & 7;
        }
      }
      int v104 = v42 ^ 4;
      for (uint64_t m = (char *)v200 + (int)v24 - v29; ; m += v108)
      {
        unint64_t v106 = v42;
        do
        {
          unint64_t v107 = v106;
          uint64_t v108 = *((int *)&v224 + ++v106);
        }
        while (v107 <= 0xD && !m[v108]);
        if ((v106 & 7) - 1 >= v42)
        {
          if (*m != 1) {
            goto LABEL_205;
          }
          char v109 = 2;
        }
        else
        {
          char v109 = -126;
        }
        *uint64_t m = v109;
LABEL_205:
        if ((v106 & 7) != v104)
        {
          int v110 = (__int32 *)v222;
          if ((unint64_t)v222 >= v223)
          {
            sub_10025B664(v221);
            int v110 = (__int32 *)v222;
          }
          *int v110 = v38;
          v110[1] = v39;
          ++v222;
          int v104 = v106 & 7;
        }
        if (m == v218 && &m[v108] == v40) {
          goto LABEL_211;
        }
        v39 += *((_DWORD *)&unk_1004085A8 + 2 * (v106 & 7) + 1);
        v38 += *((_DWORD *)&unk_1004085A8 + 2 * (v106 & 7));
        unsigned int v42 = ((_BYTE)v106 + 4) & 7;
      }
    }
    for (uint64_t n = (char *)v200 + (int)v24 - v29; ; n += v91)
    {
      unsigned int v88 = v42;
      unint64_t v89 = v42;
      do
      {
        unint64_t v90 = v89;
        uint64_t v91 = *((int *)&v224 + ++v89);
      }
      while (v90 <= 0xD && !n[v91]);
      if ((v89 & 7) - 1 >= v88)
      {
        if (*n != 1) {
          goto LABEL_173;
        }
        char v92 = 2;
      }
      else
      {
        char v92 = -126;
      }
      *uint64_t n = v92;
LABEL_173:
      long long v93 = v222;
      if ((unint64_t)v222 >= v223)
      {
        sub_10025B664(v221);
        long long v93 = v222;
      }
      unsigned char *v93 = v89 & 7;
      float32x2_t v222 = (void *)((char *)v222 + 1);
      if (n == v218 && &n[v91] == v40) {
        goto LABEL_211;
      }
      unsigned int v42 = ((_BYTE)v89 + 4) & 7;
    }
  }
  *uint64_t v40 = -126;
  if (v213 < 1)
  {
LABEL_211:
    sub_10025B52C(v221);
    if (v213) {
      goto LABEL_212;
    }
  }
  else
  {
    uint64_t v45 = (__int32 *)v222;
    if ((unint64_t)v222 >= v223)
    {
      sub_10025B664(v221);
      uint64_t v45 = (__int32 *)v222;
    }
    *uint64_t v45 = v38;
    v45[1] = v39;
    ++v222;
    sub_10025B52C(v221);
LABEL_212:
    sub_1003876C8(v210, 1);
  }
  float v111 = v176;
  int v112 = a1;
  unsigned int v113 = v201;
  unsigned int v114 = v206;
  uint64_t v115 = (uint64_t)v210;
LABEL_294:
  v111[7].i32[0] = v113;
  v111[6] = (int32x2_t)(v209 | v114);
  float32x4_t v167 = v111;
  v111[2] = v198;
  v111[3] = (int32x2_t)v115;
  int v168 = *((_DWORD *)v112 + 93);
  if (*((_DWORD *)v112 + 92) != v168)
  {
    v111[3] = (int32x2_t)sub_1002F1920(v115, *((_DWORD *)v112 + 100), (uint64_t)v112[1], v168);
    sub_10025A23C(*a1);
    int v112 = a1;
    uint64_t v169 = v204;
    *(void *)(*(void *)&v167[3] + 24) = *(void *)(*(void *)&v167[2] + 24);
    if (*(void *)(*(void *)&v198 + 24)) {
      goto LABEL_307;
    }
LABEL_298:
    v167[3] = 0;
    int32x4_t v170 = *v112;
    if (*v112 == v112[1]) {
      sub_10025A374((uint64_t)v170, v191);
    }
    else {
      sub_10025A23C(v170);
    }
    unint64_t v7 = v200;
    unsigned int v25 = *((char *)v200 + (int)v24);
    uint64_t v4 = a1;
    uint64_t v8 = v197;
    int v9 = v189;
    LODWORD(v18) = v202;
    uint64_t v21 = v204;
    uint64_t v23 = v193;
    uint64_t v22 = v194;
    a4 = v195;
    int v19 = v206;
    goto LABEL_302;
  }
  uint64_t v169 = v204;
  *(void *)(v115 + 24) = *(void *)(*(void *)&v198 + 24);
  if (!*(void *)(*(void *)&v198 + 24)) {
    goto LABEL_298;
  }
LABEL_307:
  BOOL v172 = v169 == 0;
  sub_10025A2E8((uint64_t)v112[1], (uint64_t)(v112 + 8));
  a1[17] = v167;
  unsigned int v173 = v201;
  if (v172) {
    unsigned int v173 = 0;
  }
  *((_DWORD *)a1 + 29) = v24 - v173 + 1;
  *((_DWORD *)a1 + 30) = v197;
  *((_DWORD *)a1 + 31) = v206;
  *((_DWORD *)a1 + 32) = v202;
  a1[11] = v200;
  *((_DWORD *)a1 + 33) = v196;
  return (uint64_t)v167[3];
}

void sub_1003183A4()
{
  sub_1002D1A1C((uint64_t *)(v0 - 192));
  __break(1u);
}

void sub_1003183B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100318410(void **a1)
{
  if (!a1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_1002D2278(-27, &v6, "cvEndFindContours", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1328);
  }
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = v2[17];
    if (v3)
    {
      if (*((_DWORD *)v2 + 95))
      {
        sub_10025A2E8(v2[1], (uint64_t)&v6);
        if (v6 == v2[8] && v7 == *((_DWORD *)v2 + 18)) {
          sub_10025A374(v2[1], v2 + 6);
        }
        *((_DWORD *)v2 + 95) = 0;
      }
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4) {
        sub_10025FC00(v4, *(void *)(*(void *)(v3 + 16) + 24), (uint64_t)(v2 + 34));
      }
      v2[17] = 0;
    }
    if (*v2 != v2[1]) {
      sub_10025A060((void **)v2);
    }
    if (v2[2]) {
      sub_10025A060((void **)v2 + 2);
    }
    uint64_t v2 = (void *)v2[38];
    j__free(*a1);
    *a1 = 0;
  }
  return v2;
}

void sub_10031851C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100318534(uint64_t a1, uint64_t a2, void *a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  unint64_t v107 = 0;
  if (!a3)
  {
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    qmemcpy((void *)sub_1002D19D8(&v111, 25), "NULL double CvSeq pointer", 25);
    sub_1002D2278(-27, &v111, "cvFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1817);
  }
  *a3 = 0;
  if (a6 == 5)
  {
    if (a7)
    {
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      qmemcpy((void *)sub_1002D19D8(&v111, 51), "Nonzero offset is not supported in CV_LINK_RUNS yet", 51);
      sub_1002D2278(-211, &v111, "cvFindContours_Impl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1825);
    }
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    if (!a2)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v9 = sub_1002D19D8(&v109, 20);
      *(_DWORD *)(v9 + 16) = 1919251566;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)"NULL storage pointer";
      sub_1002D2278(-27, &v109, "icvFindContoursInInterval", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1508);
    }
    if (a4 <= 127)
    {
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      qmemcpy((void *)sub_1002D19D8(&v109, 48), "Contour header size must be >= sizeof(CvContour)", 48);
      sub_1002D2278(-201, &v109, "icvFindContoursInInterval", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1514);
    }
    sub_100259FE0(a2);
    if (v10) {
      operator new();
    }
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    sub_100259FE0(a2);
    if (v15) {
      operator new();
    }
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    uint64_t v16 = sub_1002324D4(a1, (uint64_t)&v109, 0, 0);
    if ((*(_WORD *)v16 & 0xFFE) != 0)
    {
      v108[0] = 0;
      v108[1] = 0;
      qmemcpy((void *)sub_1002D19D8(v108, 32), "Input array must be 8uC1 or 8sC1", 32);
      sub_1002D2278(-5, v108, "icvFindContoursInInterval", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1525);
    }
    uint64_t v17 = *(void *)(v16 + 24);
    uint64_t v105 = *(int *)(v16 + 4);
    int v18 = *(_DWORD *)(v16 + 36);
    int v98 = *(_DWORD *)(v16 + 32);
    int v104 = sub_10025A7E4(0, 0x60uLL, 0x18uLL, 0);
    sub_10025B304(v104, (uint64_t)&v115);
    sub_10025B3B8(0, 96, 8, 0, (uint64_t)v122);
    sub_10025B3B8(0, 96, 8, 0, (uint64_t)v119);
    int v19 = v117;
    if ((unint64_t)v117 >= v118)
    {
      sub_10025B664(&v115);
      int v19 = v117;
    }
    *int v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
    int v20 = v117 + 3;
    unint64_t v117 = v20;
    uint64_t v21 = (char *)v20 - *(int *)(v116 + 44);
    uint64_t v22 = v21;
    if (v18 >= 1)
    {
      int v23 = 0;
      uint64_t v22 = (char *)v20 - *(int *)(v116 + 44);
      do
      {
        uint64_t v24 = (unsigned __int8 *)(v17 + v23);
        int v25 = v23 + 1;
        while (!*v24++)
        {
          ++v23;
          ++v25;
          if (v18 == v23) {
            goto LABEL_42;
          }
        }
        if (v18 == v23) {
          break;
        }
        BOOL v27 = v117;
        if ((unint64_t)v117 >= v118)
        {
          sub_10025B664(&v115);
          BOOL v27 = v117;
        }
        *BOOL v27 = 0;
        v27[1] = 0;
        *((_DWORD *)v27 + 4) = v23;
        *((_DWORD *)v27 + 5) = 0;
        int v28 = v117 + 3;
        unint64_t v117 = v28;
        unsigned int v29 = (void *)((char *)v28 - *(int *)(v116 + 44));
        *((void *)v22 + 1) = v29;
        if (v18 <= ++v23)
        {
LABEL_35:
          if ((unint64_t)v28 < v118) {
            goto LABEL_39;
          }
        }
        else
        {
          int v30 = (unsigned __int8 *)(v17 + v25);
          while (*v30++)
          {
            if (v18 == ++v25)
            {
              int v23 = v18;
              goto LABEL_35;
            }
          }
          int v23 = v25;
          if ((unint64_t)v28 < v118) {
            goto LABEL_39;
          }
        }
        sub_10025B664(&v115);
        int v28 = v117;
LABEL_39:
        void *v28 = 0;
        v28[1] = 0;
        *((_DWORD *)v28 + 4) = v23 - 1;
        *((_DWORD *)v28 + 5) = 0;
        v117 += 3;
        int v32 = (char *)v117 - *(int *)(v116 + 44);
        *unsigned int v29 = v32;
        v29[1] = v32;
        int v33 = v123;
        if ((unint64_t)v123 >= v124)
        {
          sub_10025B664(v122);
          int v33 = v123;
        }
        *int v33 = v29;
        ++v123;
        uint64_t v22 = (char *)v29[1];
      }
      while (v23 < v18);
    }
LABEL_42:
    sub_10025B46C(&v115);
    uint64_t v34 = *((void *)v21 + 1);
    int v35 = v104[10] - 1;
    *((void *)v22 + 1) = 0;
    if (v98 > 1)
    {
      uint64_t v36 = 0;
      int v106 = 1;
      while (1)
      {
        uint64_t v37 = v34;
        __int32 v38 = v22;
        int v102 = v104[10];
        if (v18 >= 1)
        {
          int v39 = 0;
          do
          {
            uint64_t v40 = v105 + v39;
            int v41 = v39 + 1;
            while (!*(unsigned char *)(v17 + v40))
            {
              ++v39;
              ++v40;
              ++v41;
              if (v18 == v39) {
                goto LABEL_64;
              }
            }
            if (v18 == v39) {
              break;
            }
            unsigned int v42 = v117;
            if ((unint64_t)v117 >= v118)
            {
              sub_10025B664(&v115);
              unsigned int v42 = v117;
            }
            *unsigned int v42 = 0;
            v42[1] = 0;
            *((_DWORD *)v42 + 4) = v39;
            *((_DWORD *)v42 + 5) = v106;
            uint64_t v43 = v117 + 3;
            unint64_t v117 = v43;
            uint64_t v44 = (uint64_t)v43 - *(int *)(v116 + 44);
            *((void *)v22 + 1) = v44;
            if (v18 <= ++v39)
            {
LABEL_59:
              if ((unint64_t)v43 < v118) {
                goto LABEL_63;
              }
            }
            else
            {
              uint64_t v45 = v105 + v41;
              while (*(unsigned char *)(v17 + v45))
              {
                ++v41;
                ++v45;
                if (v18 == v41)
                {
                  int v39 = v18;
                  goto LABEL_59;
                }
              }
              int v39 = v41;
              if ((unint64_t)v43 < v118) {
                goto LABEL_63;
              }
            }
            sub_10025B664(&v115);
            uint64_t v43 = v117;
LABEL_63:
            *uint64_t v43 = 0;
            v43[1] = 0;
            *((_DWORD *)v43 + 4) = v39 - 1;
            *((_DWORD *)v43 + 5) = v106;
            v117 += 3;
            uint64_t v22 = (char *)v117 - *(int *)(v116 + 44);
            *(void *)(v44 + 8) = v22;
          }
          while (v39 < v18);
        }
LABEL_64:
        sub_10025B46C(&v115);
        uint64_t v34 = *((void *)v38 + 1);
        int v46 = v104[10] - v102;
        __n128 v103 = v22;
        *((void *)v22 + 1) = 0;
        if (v35 >= 0) {
          int v47 = v35;
        }
        else {
          int v47 = v35 + 1;
        }
        int v48 = v47 >> 1;
        if (v46 >= 0) {
          int v49 = v46;
        }
        else {
          int v49 = v46 + 1;
        }
        int v50 = v49 >> 1;
        int v101 = v46;
        if (v35 < 2 || v46 < 2)
        {
          int v53 = 0;
          int v52 = 0;
          int v51 = 0;
          uint64_t v54 = v34;
          if (v46 <= 1) {
            goto LABEL_119;
          }
LABEL_115:
          *(void *)uint64_t v54 = *(void *)(v54 + 8);
          int32x2_t v70 = v123;
          if ((unint64_t)v123 >= v124)
          {
            sub_10025B664(v122);
            int32x2_t v70 = v123;
          }
          *int32x2_t v70 = v54;
          ++v123;
          uint64_t v66 = *(void *)(v54 + 8);
          if (v52 + 1 == v50) {
            goto LABEL_118;
          }
LABEL_110:
          int v67 = v123;
          int v68 = ~v52 + v50;
          do
          {
            __n128 v69 = *(void **)(v66 + 8);
            *__n128 v69 = v69[1];
            if ((unint64_t)v67 >= v124)
            {
              sub_10025B664(v122);
              int v67 = v123;
            }
            *int v67 = v69;
            int v67 = ++v123;
            uint64_t v66 = v69[1];
            --v68;
          }
          while (v68);
          int v51 = 0;
          if (v53 < v48) {
            goto LABEL_120;
          }
          goto LABEL_44;
        }
        int v51 = 0;
        int v52 = 0;
        int v53 = 0;
        uint64_t v54 = v34;
        do
        {
          if (v51 == -1)
          {
            uint64_t v63 = *(void *)(v37 + 8);
            if (*(_DWORD *)(v54 + 16) > *(_DWORD *)(v63 + 16) + 1)
            {
              int v51 = 0;
              *(void *)uint64_t v63 = v36;
              ++v53;
              uint64_t v37 = *(void *)(v63 + 8);
              if (v53 >= v48) {
                break;
              }
              continue;
            }
            char v64 = v120;
            if ((unint64_t)v120 >= v121)
            {
              sub_10025B664(v119);
              char v64 = v120;
            }
            *char v64 = v54;
            ++v120;
            *(void *)uint64_t v54 = v36;
            uint64_t v36 = *(void *)(v54 + 8);
            uint64_t v57 = *(void *)(v37 + 8);
            if (*(_DWORD *)(v36 + 16) < *(_DWORD *)(v57 + 16))
            {
              ++v52;
              uint64_t v54 = *(void *)(v36 + 8);
              int v51 = -1;
              if (v53 >= v48) {
                break;
              }
              continue;
            }
            ++v53;
            uint64_t v37 = *(void *)(v57 + 8);
            int v51 = 1;
            goto LABEL_106;
          }
          if (v51 == 1)
          {
            uint64_t v57 = *(void *)(v54 + 8);
            int v62 = *(_DWORD *)(v57 + 16);
            if (*(_DWORD *)(v37 + 16) > v62 + 1)
            {
              int v51 = 0;
              *(void *)uint64_t v36 = v57;
              goto LABEL_102;
            }
            *(void *)uint64_t v36 = v37;
            uint64_t v36 = *(void *)(v37 + 8);
            if (*(_DWORD *)(v36 + 16) < v62)
            {
              ++v53;
              uint64_t v37 = *(void *)(v36 + 8);
              int v51 = 1;
              if (v53 >= v48) {
                break;
              }
              continue;
            }
            ++v52;
            uint64_t v54 = *(void *)(v57 + 8);
            int v51 = -1;
LABEL_106:
            uint64_t v36 = v57;
            if (v53 >= v48) {
              break;
            }
            continue;
          }
          uint64_t v55 = *(void *)(v37 + 8);
          int v56 = *(_DWORD *)(v55 + 16);
          uint64_t v57 = *(void *)(v54 + 8);
          int v58 = *(_DWORD *)(v57 + 16);
          if (v56 >= v58)
          {
            if (*(_DWORD *)(v37 + 16) <= v58 + 1)
            {
              *(void *)uint64_t v54 = v37;
              int v51 = -1;
              uint64_t v36 = v57;
            }
            else
            {
              *(void *)uint64_t v54 = v57;
              uint32x4_t v65 = v123;
              if ((unint64_t)v123 >= v124)
              {
                sub_10025B664(v122);
                uint32x4_t v65 = v123;
              }
              int v51 = 0;
              *uint32x4_t v65 = v54;
              ++v123;
              uint64_t v57 = *(void *)(v54 + 8);
            }
LABEL_102:
            ++v52;
            uint64_t v54 = *(void *)(v57 + 8);
            if (v53 >= v48) {
              break;
            }
            continue;
          }
          int v59 = *(_DWORD *)(v54 + 16) - 1;
          BOOL v60 = v56 < v59;
          int v51 = v56 >= v59;
          if (v60) {
            unint64_t v61 = *(void **)(v37 + 8);
          }
          else {
            unint64_t v61 = (void *)v54;
          }
          if (!v60) {
            uint64_t v36 = *(void *)(v37 + 8);
          }
          *unint64_t v61 = v37;
          ++v53;
          uint64_t v37 = *(void *)(v55 + 8);
          if (v53 >= v48) {
            break;
          }
        }
        while (v52 < v50);
        if (v52 >= v50) {
          goto LABEL_119;
        }
        if (!v51) {
          goto LABEL_115;
        }
        uint64_t v66 = *(void *)(v54 + 8);
        *(void *)uint64_t v36 = v66;
        if (v52 + 1 != v50) {
          goto LABEL_110;
        }
LABEL_118:
        int v51 = 0;
LABEL_119:
        if (v53 < v48)
        {
LABEL_120:
          int v71 = *(void **)(v37 + 8);
          if (v51) {
            uint64_t v72 = v36;
          }
          else {
            uint64_t v72 = v37;
          }
          *int v71 = v72;
          if (v53 + 1 != v48)
          {
            int v73 = ~v53 + v48;
            do
            {
              uint64_t v74 = v71[1];
              int v71 = *(void **)(v74 + 8);
              *int v71 = v74;
              --v73;
            }
            while (v73);
          }
        }
LABEL_44:
        v17 += v105;
        ++v106;
        uint64_t v22 = v103;
        int v35 = v101;
        if (v106 == v98) {
          goto LABEL_133;
        }
      }
    }
    if (v35 >= 0) {
      int v75 = v35;
    }
    else {
      int v75 = v35 + 1;
    }
    int v50 = v75 >> 1;
LABEL_133:
    if (v35 >= 2)
    {
      do
      {
        int v76 = *(void **)(v34 + 8);
        *int v76 = v34;
        uint64_t v34 = v76[1];
        --v50;
      }
      while (v50);
    }
    uint64_t v77 = sub_10025B52C(v122);
    uint64_t v78 = sub_10025B52C(v119);
    sub_10025AD4C(v77, (uint64_t)&v111, 0);
    if (*(int *)(v77 + 40) < 1)
    {
      uint64_t v82 = 0;
      uint64_t v80 = 0;
      unsigned int v79 = 0;
    }
    else
    {
      unsigned int v79 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      do
      {
        unsigned int v83 = *v113++;
        if ((unint64_t)v113 >= v114) {
          sub_10025BA48(&v111, 1);
        }
        if (*v83)
        {
          sub_10025B3B8(0x500Cu, a4, 8, a2, (uint64_t)&v115);
          uint64_t v84 = v117;
          int8x8_t v85 = v83;
          do
          {
            if ((unint64_t)v84 >= v118)
            {
              sub_10025B664(&v115);
              uint64_t v84 = v117;
            }
            *uint64_t v84 = v85[2];
            uint64_t v84 = ++v117;
            __n128 v86 = (void *)*v85;
            *int8x8_t v85 = 0;
            int8x8_t v85 = v86;
          }
          while (v86 != v83);
          uint64_t v82 = sub_10025B52C(&v115);
          sub_1003876C8((_DWORD *)v82, 1);
          if (v80)
          {
            *(void *)(v82 + 8) = v81;
            *(void *)(v81 + 16) = v82;
          }
          else
          {
            uint64_t v80 = v82;
          }
        }
        else
        {
          uint64_t v82 = v81;
        }
        ++v79;
        uint64_t v81 = v82;
      }
      while ((signed int)v79 < *(_DWORD *)(v77 + 40));
    }
    v87.n128_f64[0] = sub_10025AD4C(v78, (uint64_t)&v111, 0);
    if (*(int *)(v78 + 40) >= 1)
    {
      int v88 = 0;
      do
      {
        unint64_t v90 = *v113++;
        if ((unint64_t)v113 >= v114) {
          sub_10025BA48(&v111, 1);
        }
        if (*v90)
        {
          sub_10025B3B8(0x500Cu, a4, 8, a2, (uint64_t)&v115);
          uint64_t v91 = v117;
          char v92 = v90;
          do
          {
            if ((unint64_t)v91 >= v118)
            {
              sub_10025B664(&v115);
              uint64_t v91 = v117;
            }
            void *v91 = v92[2];
            uint64_t v91 = ++v117;
            long long v93 = (void *)*v92;
            *char v92 = 0;
            char v92 = v93;
          }
          while (v93 != v90);
          uint64_t v89 = sub_10025B52C(&v115);
          sub_1003876C8((_DWORD *)v89, 1);
          *(_DWORD *)v89 |= 0x8000u;
          if (v80)
          {
            *(void *)(v89 + 8) = v82;
            *(void *)(v82 + 16) = v89;
          }
          else
          {
            uint64_t v80 = v89;
          }
        }
        else
        {
          uint64_t v89 = v82;
        }
        ++v88;
        ++v79;
        uint64_t v82 = v89;
      }
      while (v88 < *(_DWORD *)(v78 + 40));
    }
    *a3 = v80;
    uint64_t v94 = v125;
    if (v125 && atomic_fetch_add((atomic_uint *volatile)(v125 + 8), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t, __n128))(*(void *)v94 + 16))(v94, v87);
    }
    uint64_t v95 = v127;
    if (v127 && atomic_fetch_add((atomic_uint *volatile)(v127 + 8), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t, __n128))(*(void *)v95 + 16))(v95, v87);
    }
    if (v80) {
      return v79;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    unint64_t v107 = (void **)sub_1003166CC(a1, a2, a4, a5, a6, a7, a8);
    LODWORD(v14) = -1;
    do
      uint64_t v14 = (v14 + 1);
    while (sub_100316E6C(v107, v11, v12, v13));
    *a3 = sub_100318410((void **)&v107);
  }
  return v14;
}

void sub_100319268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1002D1A1C((uint64_t *)va);
  sub_100319CC8(v13 - 120);
  sub_100319CC8(v13 - 104);
  _Unwind_Resume(a1);
}

void sub_100319368(uint64_t a1, int *a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  sub_1002D6AE8(v74, &off_100499798);
  if (sub_10029A230(a2) != 0x40000
    && sub_10029A230(a2) != 327680
    && sub_10029A230(a2) != 720896)
  {
    *(void *)int32x2_t v70 = 0;
    *(void *)&v70[8] = 0;
    qmemcpy((void *)sub_1002D19D8(v70, 155), "(_contours.kind() == _InputArray::STD_VECTOR_VECTOR || _contours.kind() == _InputArray::STD_VECTOR_MAT || _contours.kind() == _InputArray::STD_VECTOR_UMAT)", 155);
    sub_1002D2278(-215, (uint64_t *)v70, "findContours", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1892);
  }
  if (!sub_10029D69C((uint64_t)a2)
    && (sub_10029D67C(a2, -1) != 2 || sub_10029D660(a2, -1) != 4))
  {
    *(void *)int32x2_t v70 = 0;
    *(void *)&v70[8] = 0;
    qmemcpy((void *)sub_1002D19D8(v70, 74), "_contours.empty() || (_contours.channels() == 2 && _contours.depth() == 4)", 74);
    sub_1002D2278(-215, (uint64_t *)v70, "findContours", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1894);
  }
  *(_DWORD *)int32x2_t v70 = 1124007936;
  memset(&v70[4], 0, 60);
  int v71 = &v70[8];
  uint64_t v72 = v73;
  v73[0] = 0;
  v73[1] = 0;
  LODWORD(v56) = 33619968;
  *((void *)&v56 + 1) = v70;
  *(void *)&long long v57 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  sub_10025834C(a1, (uint64_t)&v56, 1, 1, 1, 1, 16, (double *)&v49);
  sub_100259F30(0);
  if (v12) {
    operator new();
  }
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v65 = *(void *)&v70[16];
  int v13 = *(_DWORD *)&v70[12];
  if (*(_DWORD *)&v70[4] == 1) {
    int v13 = 1;
  }
  uint64_t v63 = 0;
  int v64 = 0;
  int v66 = *(_DWORD *)&v70[8];
  int v67 = v13;
  uint64_t v14 = *v72;
  v62[0] = *(_WORD *)v70 & 0x4FFF | 0x42420000;
  v62[1] = v14;
  uint64_t v61 = 0;
  if (sub_10029FDC8(a3)) {
    sub_10029FCA4(a3);
  }
  sub_100318534((uint64_t)v62, 0, &v61, 128, a4, a5, (*a6 - 1) | ((unint64_t)(a6[1] - 1) << 32), 0);
  if (v61)
  {
    uint64_t v15 = sub_10025F89C(v61, 96, 0);
    uint64_t v16 = (uint64_t)v15;
    if (v15)
    {
      if (v15[11] != 8)
      {
        long long v49 = 0uLL;
        qmemcpy((void *)sub_1002D19D8(&v49, 39), "!_seq || _seq->elem_size == sizeof(_Tp)", 39);
        sub_1002D2278(-215, (uint64_t *)&v49, "Seq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/core_c.h", 2974);
      }
      signed int v17 = v15[10];
    }
    else
    {
      signed int v17 = 0;
    }
    sub_10029EDE8((uint64_t)a2, v17, 1u, 0, -1, 1, 0);
    sub_10025AD4C(v16, (uint64_t)&v56, 0);
    uint64_t v47 = a3;
    int v60 = 0;
    if (v17 >= 1)
    {
      for (signed int i = 0; i != v17; ++i)
      {
        uint64_t v20 = **((void **)&v57 + 1);
        *(_DWORD *)(v20 + 112) = i;
        sub_10029EDE8((uint64_t)a2, *(_DWORD *)(v20 + 40), 1u, 12, i, 1, 0);
        sub_10029A230(a2);
        sub_100299554((uint64_t)a2, i, (uint64_t)&v49);
        if ((BYTE1(v49) & 0x40) == 0)
        {
          v48[0] = 0;
          v48[1] = 0;
          uint64_t v21 = sub_1002D19D8(v48, 17);
          *(unsigned char *)(v21 + 16) = 41;
          *(_OWORD *)uint64_t v21 = *(_OWORD *)"ci.isContinuous()";
          sub_1002D2278(-215, v48, "findContours", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/contours.cpp", 1919);
        }
        sub_10025ABDC(v20, (char *)v50, 0x3FFFFFFF00000000);
        if (*((void *)&v52 + 1)
          && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v52 + 1) + 20), 0xFFFFFFFF) == 1)
        {
          sub_1002932F4((uint64_t)&v49);
        }
        *((void *)&v52 + 1) = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        if (SDWORD1(v49) >= 1)
        {
          uint64_t v22 = 0;
          int v23 = v53;
          do
            *(_DWORD *)&v23[4 * v22++] = 0;
          while (v22 < SDWORD1(v49));
        }
        if (v54 != v55) {
          j__free(v54);
        }
        *((void *)&v57 + 1) += 8;
        if (*((void *)&v57 + 1) >= *((void *)&v58 + 1)) {
          sub_10025BA48(&v56, 1);
        }
        if (v60 + 1 < 2 * *(_DWORD *)(*((void *)&v56 + 1) + 40)) {
          int v19 = v60 + 1;
        }
        else {
          int v19 = 0;
        }
        int v60 = v19;
      }
    }
    if (sub_10029FDC8(v47))
    {
      sub_10029EDE8(v47, 1u, v17, 28, -1, 1, 0);
      if (sub_10029A230((_DWORD *)v47) == 0x10000)
      {
        uint64_t v24 = *(void *)(v47 + 8);
        long long v25 = *(_OWORD *)(v24 + 16);
        long long v49 = *(_OWORD *)v24;
        long long v50 = v25;
        long long v51 = *(_OWORD *)(v24 + 32);
        uint64_t v26 = *(void *)(v24 + 56);
        *(void *)&long long v52 = *(void *)(v24 + 48);
        *((void *)&v52 + 1) = v26;
        int v53 = (char *)&v49 + 8;
        uint64_t v54 = v55;
        v55[0] = 0;
        v55[1] = 0;
        if (v26) {
          atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
        }
        if (*(int *)(v24 + 4) > 2)
        {
          DWORD1(v49) = 0;
          sub_1002931A8((uint64_t)&v49, v24);
        }
        else
        {
          BOOL v27 = *(void **)(v24 + 72);
          int v28 = v54;
          *(void *)uint64_t v54 = *v27;
          v28[1] = v27[1];
        }
      }
      else
      {
        sub_100299554(v47, -1, (uint64_t)&v49);
      }
      uint64_t v29 = v50;
      if (*((void *)&v52 + 1)
        && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v52 + 1) + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)&v49);
      }
      *((void *)&v52 + 1) = 0;
      long long v50 = 0u;
      long long v51 = 0u;
      if (SDWORD1(v49) >= 1)
      {
        uint64_t v30 = 0;
        int v31 = v53;
        do
          *(_DWORD *)&v31[4 * v30++] = 0;
        while (v30 < SDWORD1(v49));
      }
      if (v54 != v55) {
        j__free(v54);
      }
      sub_10025AD4C(v16, (uint64_t)&v49, 0);
      long long v58 = v51;
      long long v59 = v52;
      int v60 = 0;
      long long v56 = v49;
      long long v57 = v50;
      if (v17 >= 1)
      {
        uint64_t v32 = v17;
        int v33 = (int *)(v29 + 8);
        do
        {
          int v35 = (void *)**((void **)&v57 + 1);
          uint64_t v36 = *(void *)(**((void **)&v57 + 1) + 16);
          if (v36)
          {
            int v37 = *(_DWORD *)(v36 + 112);
            uint64_t v38 = v35[1];
            if (v38) {
              goto LABEL_64;
            }
          }
          else
          {
            int v37 = -1;
            uint64_t v38 = v35[1];
            if (v38)
            {
LABEL_64:
              int v39 = *(_DWORD *)(v38 + 112);
              uint64_t v40 = v35[4];
              if (v40) {
                goto LABEL_65;
              }
              goto LABEL_69;
            }
          }
          int v39 = -1;
          uint64_t v40 = v35[4];
          if (v40)
          {
LABEL_65:
            int v41 = *(_DWORD *)(v40 + 112);
            uint64_t v42 = v35[3];
            if (!v42) {
              goto LABEL_70;
            }
            goto LABEL_66;
          }
LABEL_69:
          int v41 = -1;
          uint64_t v42 = v35[3];
          if (!v42)
          {
LABEL_70:
            int v43 = -1;
            goto LABEL_71;
          }
LABEL_66:
          int v43 = *(_DWORD *)(v42 + 112);
LABEL_71:
          *(v33 - 2) = v37;
          *(v33 - 1) = v39;
          *int v33 = v41;
          v33[1] = v43;
          *((void *)&v57 + 1) += 8;
          if (*((void *)&v57 + 1) >= *((void *)&v58 + 1)) {
            sub_10025BA48(&v56, 1);
          }
          if (v60 + 1 < 2 * *(_DWORD *)(*((void *)&v56 + 1) + 40)) {
            int v34 = v60 + 1;
          }
          else {
            int v34 = 0;
          }
          int v60 = v34;
          v33 += 4;
          --v32;
        }
        while (v32);
      }
    }
    uint64_t v44 = v68;
    if (v68 && atomic_fetch_add((atomic_uint *volatile)(v68 + 8), 0xFFFFFFFF) == 1) {
      (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
    }
  }
  else
  {
    sub_10029FCA4((uint64_t)a2);
  }
  if (*(void *)&v70[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v70[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v70);
  }
  *(void *)&v70[56] = 0;
  memset(&v70[16], 0, 32);
  if (*(int *)&v70[4] >= 1)
  {
    uint64_t v45 = 0;
    int v46 = v71;
    do
      *(_DWORD *)&v46[4 * v45++] = 0;
    while (v45 < *(int *)&v70[4]);
  }
  if (v72 != v73) {
    j__free(v72);
  }
  if (v75) {
    sub_1002D6888(v74);
  }
}

void sub_100319BAC(_Unwind_Exception *a1)
{
  sub_1002D1A1C((uint64_t *)(v1 - 208));
  sub_10020FA00(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_100319CC8(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100319D34(uint64_t a1, int *a2, int a3, int a4, uint64_t *a5)
{
  sub_1002D6AE8(v12, &off_1004997B8);
  uint64_t v10 = sub_1002A02C4();
  uint64_t v11 = *a5;
  sub_100319368(a1, a2, (uint64_t)v10, a3, a4, &v11);
  if (v13) {
    sub_1002D6888(v12);
  }
}

void sub_100319DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100319DE0()
{
}

uint64_t sub_100319DF4(void **a1)
{
  sub_10023416C((uint64_t)(a1 + 3), a1[2]);
  uint64_t v2 = (uint64_t (*)(void **))(*a1)[1];

  return v2(a1);
}

void sub_100319E54(uint64_t a1, uint64_t a2, int a3, BOOL a4)
{
  sub_1002D6AE8(v118, &off_100499818);
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8))
  {
    uint64_t v108 = 0;
    unint64_t v107 = 0;
    qmemcpy((void *)sub_1002D19D8(&v107, 34), "_points.getObj() != _hull.getObj()", 34);
    sub_1002D2278(-215, (uint64_t *)&v107, "convexHull", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/convhull.cpp", 133);
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    long long v8 = *(_OWORD *)(v7 + 16);
    long long v110 = *(_OWORD *)v7;
    long long v111 = v8;
    long long v112 = *(_OWORD *)(v7 + 32);
    uint64_t v9 = *(void *)(v7 + 56);
    uint64_t v113 = *(void *)(v7 + 48);
    uint64_t v114 = v9;
    uint64_t v115 = (char *)&v110 + 8;
    uint64_t v116 = v117;
    v117[0] = 0;
    v117[1] = 0;
    if (v9) {
      atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 1u);
    }
    if (*(int *)(v7 + 4) > 2)
    {
      DWORD1(v110) = 0;
      sub_1002931A8((uint64_t)&v110, v7);
    }
    else
    {
      uint64_t v10 = *(void **)(v7 + 72);
      uint64_t v11 = v116;
      *uint64_t v116 = *v10;
      v11[1] = v10[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v110);
  }
  int v12 = sub_100298CD4((unsigned int *)&v110, 2, -1, 1);
  int v13 = v12;
  char v14 = v110;
  if (v12 < 0 || (v110 & 6) != 4)
  {
    uint64_t v108 = 0;
    unint64_t v107 = 0;
    qmemcpy((void *)sub_1002D19D8(&v107, 40), "total >= 0 && (depth == 5 || depth == 4)", 40);
    sub_1002D2278(-215, (uint64_t *)&v107, "convexHull", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/convhull.cpp", 137);
  }
  if (!v12)
  {
    sub_10029E05C(a2);
    goto LABEL_142;
  }
  if (sub_10029E6C8((_DWORD *)a2)) {
    a4 = sub_10029AB74((int *)a2, -1) != 4;
  }
  unint64_t v107 = (int64x2_t *)v109;
  uint64_t v108 = v13;
  if (v13 > 0x88) {
    operator new[]();
  }
  int v104 = v106;
  uint64_t v105 = (v13 + 2);
  uint64_t v15 = v103;
  int v101 = v103;
  uint64_t v102 = v13;
  uint64_t v16 = (uint64_t)v107;
  uint64_t v17 = v111;
  if ((BYTE1(v110) & 0x40) == 0)
  {
    long long v93 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v93, 21), "points.isContinuous()", 21);
    sub_1002D2278(-215, (uint64_t *)&v93, "convexHull", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/convhull.cpp", 156);
  }
  int v18 = v14 & 7;
  if (v13 >= 1)
  {
    if (v13 < 4)
    {
      uint64_t v19 = 0;
LABEL_27:
      BOOL v27 = (void *)(v16 + 8 * v19);
      uint64_t v28 = v17 + 8 * v19;
      uint64_t v29 = v13 - v19;
      do
      {
        *v27++ = v28;
        v28 += 8;
        --v29;
      }
      while (v29);
      goto LABEL_29;
    }
    uint64_t v19 = v13 & 0xFFFFFFFC;
    int64x2_t v20 = (int64x2_t)xmmword_1004027B0;
    uint64_t v21 = v107 + 1;
    int64x2_t v22 = vdupq_n_s64(v111);
    int64x2_t v23 = vdupq_n_s64(0x10uLL);
    int64x2_t v24 = vdupq_n_s64(4uLL);
    uint64_t v25 = v19;
    do
    {
      int64x2_t v26 = vaddq_s64(v22, vshlq_n_s64(v20, 3uLL));
      v21[-1] = v26;
      *uint64_t v21 = vaddq_s64(v26, v23);
      int64x2_t v20 = vaddq_s64(v20, v24);
      v21 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v19 != v13) {
      goto LABEL_27;
    }
  }
LABEL_29:
  uint64_t v30 = (char *)(v16 + 8 * v13);
  uint64_t v31 = 126 - 2 * __clz(v13);
  *(void *)unint64_t v90 = a2;
  BOOL v89 = a4;
  if (v18 == 5)
  {
    sub_10031BF30(v16, v30, (uint64_t)&v93, v31, 1);
    if (v13 >= 2)
    {
      int v32 = 0;
      int v33 = 0;
      for (uint64_t i = 1; i != v13; ++i)
      {
        float v35 = *(float *)(*(void *)(v16 + 8 * i) + 4);
        if (*(float *)(*(void *)(v16 + 8 * v33) + 4) > v35) {
          int v33 = i;
        }
        if (*(float *)(*(void *)(v16 + 8 * v32) + 4) < v35) {
          int v32 = i;
        }
      }
      goto LABEL_47;
    }
LABEL_46:
    int v33 = 0;
    int v32 = 0;
    goto LABEL_47;
  }
  sub_10031AE64(v16, v30, (uint64_t)&v93, v31, 1);
  if (v13 < 2) {
    goto LABEL_46;
  }
  int v32 = 0;
  int v33 = 0;
  for (uint64_t j = 1; j != v13; ++j)
  {
    int v37 = *(_DWORD *)(*(void *)(v16 + 8 * j) + 4);
    if (*(_DWORD *)(*(void *)(v16 + 8 * v33) + 4) > v37) {
      int v33 = j;
    }
    if (*(_DWORD *)(*(void *)(v16 + 8 * v32) + 4) < v37) {
      int v32 = j;
    }
  }
LABEL_47:
  uint64_t v38 = v13 - 1;
  int v39 = *(_DWORD **)(v16 + 8 * v38);
  if (**(_DWORD **)v16 == *v39 && *(_DWORD *)(*(void *)v16 + 4) == v39[1])
  {
    v103[0] = 0;
    signed int v40 = 1;
    uint64_t v41 = *(void *)v90;
    BOOL v42 = v89;
    goto LABEL_101;
  }
  int v91 = v18;
  if (v18 == 5)
  {
    int v43 = sub_10031ACF8(v16, 0, v32, v106, -1, 1);
    uint64_t v44 = &v106[v43];
    int v45 = sub_10031ACF8(v16, v13 - 1, v32, v44, -1, -1);
    if ((a3 & 1) == 0) {
      goto LABEL_52;
    }
LABEL_55:
    int v46 = v106;
    int v47 = v43;
    int v43 = v45;
    if (v47 < 2) {
      goto LABEL_53;
    }
    goto LABEL_56;
  }
  int v43 = sub_10031AB98(v16, 0, v32, v106, -1, 1);
  uint64_t v44 = &v106[v43];
  int v45 = sub_10031AB98(v16, v13 - 1, v32, v44, -1, -1);
  if (a3) {
    goto LABEL_55;
  }
LABEL_52:
  int v46 = v44;
  int v47 = v45;
  uint64_t v44 = v106;
  if (v45 < 2)
  {
LABEL_53:
    signed int v40 = 0;
    goto LABEL_58;
  }
LABEL_56:
  signed int v40 = v47 - 1;
  uint64_t v48 = (v47 - 1);
  long long v49 = v103;
  long long v50 = v46;
  do
  {
    uint64_t v51 = *v50++;
    *v49++ = (unint64_t)(*(void *)(v16 + 8 * v51) - v17) >> 3;
    --v48;
  }
  while (v48);
LABEL_58:
  if (v43 >= 2)
  {
    unint64_t v52 = v43 + 1;
    int v53 = &v103[v40];
    do
    {
      *v53++ = (unint64_t)(*(void *)(v16 + 8 * v44[(v52 - 2)]) - v17) >> 3;
      --v52;
      ++v40;
    }
    while (v52 > 2);
    if (v43 >= 3)
    {
      unsigned int v54 = v44[1];
      uint64_t v55 = v16;
      if (v91 == 5) {
        goto LABEL_68;
      }
LABEL_66:
      int v58 = sub_10031AB98(v55, 0, v33, v106, 1, -1);
      long long v59 = &v106[v58];
      int v60 = sub_10031AB98(v16, v38, v33, v59, 1, 1);
      goto LABEL_69;
    }
  }
  BOOL v56 = __OFSUB__(v47, 2);
  int v57 = v47 - 2;
  if ((v57 < 0) ^ v56 | (v57 == 0))
  {
    unsigned int v54 = -1;
    uint64_t v55 = v16;
    if (v91 != 5) {
      goto LABEL_66;
    }
  }
  else
  {
    unsigned int v54 = v46[v57];
    uint64_t v55 = v16;
    if (v91 != 5) {
      goto LABEL_66;
    }
  }
LABEL_68:
  int v58 = sub_10031ACF8(v55, 0, v33, v106, 1, -1);
  long long v59 = &v106[v58];
  int v60 = sub_10031ACF8(v16, v38, v33, v59, 1, 1);
LABEL_69:
  if (a3) {
    uint64_t v61 = v59;
  }
  else {
    uint64_t v61 = v106;
  }
  if (a3) {
    int v62 = v60;
  }
  else {
    int v62 = v58;
  }
  if (a3) {
    uint64_t v63 = v106;
  }
  else {
    uint64_t v63 = v59;
  }
  if (a3) {
    int v64 = v58;
  }
  else {
    int v64 = v60;
  }
  uint64_t v41 = *(void *)v90;
  BOOL v42 = v89;
  if ((v54 & 0x80000000) != 0)
  {
    int v18 = v91;
  }
  else
  {
    int v18 = v91;
    if (v62 < 3)
    {
      if (v64 + v62 <= 2) {
        goto LABEL_95;
      }
      uint64_t v65 = v63[2 - v62];
      if (v65 == v54)
      {
LABEL_91:
        if (v62 >= 2) {
          int v62 = 2;
        }
        if (v64 >= 2) {
          int v64 = 2;
        }
        goto LABEL_95;
      }
    }
    else
    {
      uint64_t v65 = v61[1];
      if (v65 == v54) {
        goto LABEL_91;
      }
    }
    if ((v65 & 0x80000000) == 0)
    {
      int v66 = *(_DWORD **)(v16 + 8 * v65);
      int v67 = *(_DWORD **)(v16 + 8 * v54);
      if (*v66 == *v67 && v66[1] == v67[1]) {
        goto LABEL_91;
      }
    }
  }
LABEL_95:
  if (v62 >= 2)
  {
    uint64_t v68 = (v62 - 1);
    uint64_t v69 = &v103[v40];
    v40 += v68;
    do
    {
      uint64_t v70 = *v61++;
      *v69++ = (unint64_t)(*(void *)(v16 + 8 * v70) - v17) >> 3;
      --v68;
    }
    while (v68);
  }
  if (v64 >= 2)
  {
    unint64_t v71 = v64 + 1;
    uint64_t v72 = &v103[v40];
    do
    {
      *v72++ = (unint64_t)(*(void *)(v16 + 8 * v63[(v71 - 2)]) - v17) >> 3;
      --v71;
      ++v40;
    }
    while (v71 > 2);
  }
LABEL_101:
  if (v42)
  {
    sub_10029EDE8(v41, v40, 1u, v18 | 8, -1, 0, 0);
    if (sub_10029A230((_DWORD *)v41) == 0x10000)
    {
      uint64_t v73 = *(void *)(v41 + 8);
      long long v74 = *(_OWORD *)(v73 + 16);
      long long v93 = *(_OWORD *)v73;
      long long v94 = v74;
      long long v95 = *(_OWORD *)(v73 + 32);
      uint64_t v75 = *(void *)(v73 + 56);
      uint64_t v96 = *(void *)(v73 + 48);
      uint64_t v97 = v75;
      int v98 = (char *)&v93 + 8;
      uint64_t v99 = &v100;
      int64x2_t v100 = 0uLL;
      if (v75) {
        atomic_fetch_add((atomic_uint *volatile)(v75 + 20), 1u);
      }
      if (*(int *)(v73 + 4) > 2)
      {
        DWORD1(v93) = 0;
        sub_1002931A8((uint64_t)&v93, v73);
      }
      else
      {
        int v76 = *(void **)(v73 + 72);
        uint64_t v77 = v99;
        *(void *)uint64_t v99 = *v76;
        v77[1] = v76[1];
      }
    }
    else
    {
      sub_100299554(v41, -1, (uint64_t)&v93);
    }
    if ((BYTE1(v93) & 0x40) != 0)
    {
      uint64_t v81 = 8;
      if (v40 < 1) {
        goto LABEL_123;
      }
    }
    else
    {
      uint64_t v81 = *(void *)v99;
      if (v40 < 1) {
        goto LABEL_123;
      }
    }
    uint64_t v82 = (void *)v94;
    uint64_t v83 = v40;
    do
    {
      uint64_t v84 = *v15++;
      *uint64_t v82 = *(void *)(v17 + 8 * v84);
      uint64_t v82 = (void *)((char *)v82 + v81);
      --v83;
    }
    while (v83);
LABEL_123:
    if (v97 && atomic_fetch_add((atomic_uint *volatile)(v97 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v93);
    }
    uint64_t v97 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
    if (SDWORD1(v93) >= 1)
    {
      uint64_t v85 = 0;
      __n128 v86 = v98;
      do
        *(_DWORD *)&v86[4 * v85++] = 0;
      while (v85 < SDWORD1(v93));
    }
    uint64_t v80 = v99;
    if (v99 == &v100) {
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  *((void *)&v93 + 1) = v40 | 0x100000000;
  *(void *)&long long v94 = v103;
  *((void *)&v94 + 1) = v103;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  int v98 = (char *)&v93 + 8;
  uint64_t v99 = &v100;
  *(void *)&long long v93 = 0x242FF4004;
  int64x2_t v100 = vdupq_n_s64(4uLL);
  *(void *)&long long v95 = &v103[v40];
  *((void *)&v95 + 1) = v95;
  sub_10025401C((uint64_t)&v93, v41);
  if (v97 && atomic_fetch_add((atomic_uint *volatile)(v97 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v93);
  }
  uint64_t v97 = 0;
  long long v94 = 0u;
  long long v95 = 0u;
  if (SDWORD1(v93) >= 1)
  {
    uint64_t v78 = 0;
    unsigned int v79 = v98;
    do
      *(_DWORD *)&v79[4 * v78++] = 0;
    while (v78 < SDWORD1(v93));
  }
  uint64_t v80 = v99;
  if (v99 == &v100) {
    goto LABEL_131;
  }
LABEL_130:
  j__free(v80);
LABEL_131:
  if (v101 != v103)
  {
    if (v101) {
      operator delete[]();
    }
    uint64_t v102 = 264;
  }
  if (v104 != v106)
  {
    if (v104) {
      operator delete[]();
    }
    uint64_t v105 = 264;
  }
  if (v107 != (int64x2_t *)v109 && v107) {
    operator delete[]();
  }
LABEL_142:
  if (v114 && atomic_fetch_add((atomic_uint *volatile)(v114 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v110);
  }
  uint64_t v114 = 0;
  long long v111 = 0u;
  long long v112 = 0u;
  if (SDWORD1(v110) >= 1)
  {
    uint64_t v87 = 0;
    int v88 = v115;
    do
      *(_DWORD *)&v88[4 * v87++] = 0;
    while (v87 < SDWORD1(v110));
  }
  if (v116 != v117) {
    j__free(v116);
  }
  if (v119) {
    sub_1002D6888(v118);
  }
}

void sub_10031A9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (STACK[0x4C0] == a11)
  {
    unint64_t v15 = STACK[0x8F0];
    if (STACK[0x8F0] == a13) {
      goto LABEL_9;
    }
  }
  else
  {
    if (STACK[0x4C0]) {
      operator delete[]();
    }
    STACK[0x4C8] = 264;
    unint64_t v15 = STACK[0x8F0];
    if (STACK[0x8F0] == a13)
    {
LABEL_9:
      sub_1000094F4(v13 - 208);
      sub_10020FA00(v13 - 104);
      _Unwind_Resume(a1);
    }
  }
  if (v15) {
    operator delete[]();
  }
  goto LABEL_9;
}

uint64_t sub_10031AB98(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int a5, int a6)
{
  if (a3 > (int)a2) {
    int v6 = 1;
  }
  else {
    int v6 = -1;
  }
  if (a2 == a3
    || (long long v8 = *(_DWORD **)(a1 + 8 * (int)a2), v9 = *(_DWORD **)(a1 + 8 * a3), *v8 == *v9) && v8[1] == v9[1])
  {
    *a4 = a2;
    return 1;
  }
  else
  {
    uint64_t v10 = (v6 + a2);
    uint64_t v11 = (v10 + v6);
    *a4 = a2;
    a4[1] = v10;
    a4[2] = v11;
    if (v10 == a3)
    {
      int v12 = 3;
    }
    else
    {
      int v13 = v6 + a3;
      int v12 = 3;
      uint64_t v14 = a2;
      do
      {
        uint64_t v16 = *(int **)(a1 + 8 * (int)v10);
        uint64_t v17 = *(_DWORD **)(a1 + 8 * (int)v11);
        int v18 = v16[1];
        int v19 = v17[1] - v18;
        if (((v17[1] != v18) | (v19 >> 31)) == a5)
        {
          uint64_t v11 = (v11 + v6);
          a4[v12 - 1] = v11;
          uint64_t v15 = v14;
          uint64_t v14 = v10;
        }
        else
        {
          int v20 = *v16;
          uint64_t v21 = *(int **)(a1 + 8 * (int)v14);
          int v22 = *v21;
          int v23 = v21[1];
          int v24 = (v18 - v23) * (*v17 - v20);
          int v25 = (v20 - v22) * v19;
          BOOL v26 = v24 < v25;
          int v27 = v24 != v25;
          if (v26) {
            int v27 = -1;
          }
          if (v27 != a6 || (v20 == v22 ? (BOOL v28 = v18 == v23) : (BOOL v28 = 0), v28))
          {
            if (v14 == a2)
            {
              a4[1] = v11;
              uint64_t v14 = v11;
              uint64_t v11 = (v11 + v6);
              a4[2] = v11;
              uint64_t v15 = a2;
            }
            else
            {
              uint64_t v29 = &a4[v12];
              *(v29 - 2) = v11;
              uint64_t v15 = *(v29 - 4);
              --v12;
            }
          }
          else
          {
            uint64_t v14 = v11;
            uint64_t v11 = (v11 + v6);
            a4[v12++] = v11;
            uint64_t v15 = v10;
          }
        }
        uint64_t v10 = v14;
        uint64_t v14 = v15;
      }
      while (v11 != v13);
    }
    return (v12 - 1);
  }
}

uint64_t sub_10031ACF8(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int a5, int a6)
{
  if (a3 > (int)a2) {
    int v6 = 1;
  }
  else {
    int v6 = -1;
  }
  if (a2 == a3
    || (uint64_t v7 = *(float **)(a1 + 8 * (int)a2), v8 = *(float **)(a1 + 8 * a3), *v7 == *v8) && v7[1] == v8[1])
  {
    *a4 = a2;
    return 1;
  }
  else
  {
    uint64_t v10 = (v6 + a2);
    uint64_t v11 = (v10 + v6);
    *a4 = a2;
    a4[1] = v10;
    a4[2] = v11;
    if (v10 == a3)
    {
      return 2;
    }
    else
    {
      int v12 = 3;
      uint64_t v13 = a2;
      do
      {
        uint64_t v15 = *(float **)(a1 + 8 * (int)v10);
        float v16 = v15[1];
        uint64_t v17 = *(float **)(a1 + 8 * (int)v11);
        float v18 = v17[1] - v16;
        if ((__PAIR64__(v18 > 0.0, LODWORD(v18)) - COERCE_UNSIGNED_INT(0.0)) >> 32 == a5)
        {
          uint64_t v11 = (v11 + v6);
          a4[v12 - 1] = v11;
          uint64_t v14 = v13;
          uint64_t v13 = v10;
        }
        else
        {
          float v19 = *v15;
          int v20 = *(float **)(a1 + 8 * (int)v13);
          float v21 = v19 - *v20;
          float v22 = v16 - v20[1];
          *(float *)&unsigned int v23 = (float)(v22 * (float)(*v17 - v19)) - (float)(v21 * v18);
          if ((__PAIR64__(*(float *)&v23 > 0.0, v23) - COERCE_UNSIGNED_INT(0.0)) >> 32 != a6
            || v21 == 0.0 && v22 == 0.0)
          {
            if (v13 == a2)
            {
              a4[1] = v11;
              uint64_t v13 = v11;
              uint64_t v11 = (v11 + v6);
              a4[2] = v11;
              uint64_t v14 = a2;
            }
            else
            {
              int v24 = &a4[v12];
              *(v24 - 2) = v11;
              uint64_t v14 = *(v24 - 4);
              --v12;
            }
          }
          else
          {
            uint64_t v13 = v11;
            uint64_t v11 = (v11 + v6);
            a4[v12++] = v11;
            uint64_t v14 = v10;
          }
        }
        uint64_t v10 = v13;
        uint64_t v13 = v14;
      }
      while (v11 != v6 + a3);
      return (v12 - 1);
    }
  }
}

uint64_t sub_10031AE64(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = (int **)(a2 - 8);
  uint64_t v65 = (int **)(a2 - 24);
  int v66 = (int **)(a2 - 16);
  int v12 = (int **)v10;
  int v67 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - (char *)v12;
    unint64_t v16 = (a2 - (char *)v12) >> 3;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          BOOL v28 = (int *)*((void *)a2 - 1);
          uint64_t v29 = *v12;
          int v30 = **v12;
          if (*v28 < v30 || *v28 == v30 && v28[1] < v29[1])
          {
            *int v12 = v28;
            *((void *)a2 - 1) = v29;
          }
          break;
        case 3uLL:
          double result = sub_10031B3E8(v12, v12 + 1, v11);
          break;
        case 4uLL:
          uint64_t v31 = v12 + 1;
          int v32 = v12 + 2;
          double result = sub_10031B3E8(v12, v12 + 1, v12 + 2);
          int v33 = (int *)*((void *)a2 - 1);
          int v34 = v12[2];
          if (*v33 < *v34 || *v33 == *v34 && v33[1] < v34[1])
          {
            *int v32 = v33;
            *((void *)a2 - 1) = v34;
            float v35 = *v32;
            uint64_t v36 = *v31;
            int v37 = **v32;
            int v38 = **v31;
            if (v37 < v38 || v37 == v38 && v35[1] < v36[1])
            {
              v12[1] = v35;
              v12[2] = v36;
              int v39 = *v12;
              int v40 = **v12;
              if (v37 < v40 || v37 == v40 && v35[1] < v39[1])
              {
                *int v12 = v35;
                v12[1] = v39;
              }
            }
          }
          break;
        case 5uLL:
          double result = sub_10031BA9C(v12, v12 + 1, v12 + 2, v12 + 3, v11);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (int **)a2)
      {
        unint64_t v54 = (v16 - 2) >> 1;
        unint64_t v55 = v54 + 1;
        BOOL v56 = &v12[v54];
        do
        {
          sub_10031BC7C((uint64_t)v12, a3, (a2 - (char *)v12) >> 3, v56--);
          --v55;
        }
        while (v55);
        return (uint64_t)sub_10031BDB8((char *)v12, a2);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    float v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 < 0x401)
    {
      sub_10031B3E8(v18, v12, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_10031B3E8(v12, v18, v11);
      uint64_t v19 = a5;
      int v20 = v11;
      float v21 = &v12[v17];
      sub_10031B3E8(v12 + 1, v21 - 1, v66);
      sub_10031B3E8(v12 + 2, &v12[v17 + 1], v65);
      sub_10031B3E8(v21 - 1, v18, &v12[v17 + 1]);
      float v22 = *v12;
      *int v12 = *v21;
      *float v21 = v22;
      uint64_t v11 = v20;
      a5 = v19;
      a2 = v67;
      if (a5) {
        goto LABEL_15;
      }
    }
    unsigned int v23 = *(v12 - 1);
    int v24 = **v12;
    if (*v23 >= v24 && (*v23 != v24 || v23[1] >= (*v12)[1]))
    {
      double result = (uint64_t)sub_10031B500(v12, (int **)a2);
      int v12 = (int **)result;
      goto LABEL_20;
    }
LABEL_15:
    int v25 = sub_10031B65C(v12, (int **)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v27 = sub_10031B7B0(v12, v25);
    int v12 = v25 + 1;
    double result = sub_10031B7B0(v25 + 1, (int **)a2);
    if (result)
    {
      a4 = -v14;
      a2 = (char *)v25;
      if (v27) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v27)
    {
LABEL_18:
      double result = sub_10031AE64(v10, v25, a3, -v14, a5 & 1);
      int v12 = v25 + 1;
LABEL_20:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  uint64_t v41 = (char *)(v12 + 1);
  BOOL v43 = v12 == (int **)a2 || v41 == a2;
  if (a5)
  {
    if (!v43)
    {
      uint64_t v44 = 0;
      int v45 = v12;
      do
      {
        int v46 = v45;
        int v45 = (int **)v41;
        uint64_t v48 = *v46;
        int v47 = v46[1];
        int v49 = *v47;
        int v50 = **v46;
        if (*v47 < v50 || v49 == v50 && v47[1] < v48[1])
        {
          v46[1] = v48;
          uint64_t v51 = v12;
          if (v46 != v12)
          {
            uint64_t v52 = v44;
            while (1)
            {
              int v53 = *(int **)((char *)v12 + v52 - 8);
              if (v49 >= *v53)
              {
                if (v49 != *v53)
                {
                  uint64_t v51 = (int **)((char *)v12 + v52);
                  goto LABEL_47;
                }
                if (v47[1] >= v53[1]) {
                  break;
                }
              }
              --v46;
              *(int **)((char *)v12 + v52) = v53;
              v52 -= 8;
              if (!v52)
              {
                uint64_t v51 = v12;
                goto LABEL_47;
              }
            }
            uint64_t v51 = v46;
          }
LABEL_47:
          *uint64_t v51 = v47;
        }
        uint64_t v41 = (char *)(v45 + 1);
        v44 += 8;
      }
      while (v45 + 1 != (int **)a2);
    }
  }
  else if (!v43)
  {
    do
    {
      int v57 = (int **)v10;
      uint64_t v10 = (uint64_t)v41;
      long long v59 = *v57;
      int v58 = v57[1];
      int v60 = *v58;
      int v61 = **v57;
      if (*v58 < v61 || v60 == v61 && v58[1] < v59[1])
      {
        do
        {
          do
          {
            int v62 = v57;
            uint64_t v63 = *--v57;
            _DWORD v57[2] = v59;
            long long v59 = v63;
            int v64 = *v63;
          }
          while (v60 < *v63);
        }
        while (v60 == v64 && v58[1] < v59[1]);
        *int v62 = v58;
      }
      uint64_t v41 = (char *)(v10 + 8);
    }
    while ((char *)(v10 + 8) != a2);
  }
  return result;
}

uint64_t sub_10031B3E8(int **a1, int **a2, int **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  int v5 = **a2;
  int v6 = **a1;
  if (v5 < v6 || v5 == v6 && v3[1] < v4[1])
  {
    uint64_t v7 = *a3;
    int v8 = **a3;
    if (v8 < v5 || v8 == v5 && v7[1] < v3[1])
    {
      *a1 = v7;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    unint64_t v16 = *a3;
    int v17 = **a3;
    if (v17 < v6 || v17 == v6 && v16[1] < v4[1])
    {
      *a2 = v16;
      *a3 = v4;
      return 2;
    }
  }
  else
  {
    uint64_t v10 = *a3;
    int v11 = **a3;
    if (v11 >= v5 && (v11 != v5 || v10[1] >= v3[1])) {
      return 0;
    }
    *a2 = v10;
    *a3 = v3;
    int v12 = *a2;
    uint64_t v13 = *a1;
    int v14 = **a2;
    int v15 = **a1;
    if (v14 < v15 || v14 == v15 && v12[1] < v13[1])
    {
      *a1 = v12;
      *a2 = v13;
      return 2;
    }
  }
  return 1;
}

int **sub_10031B500(int **a1, int **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(a2 - 1);
  int v4 = **a1;
  int v5 = *v3;
  if (v4 < *v3 || v4 == v5 && v2[1] < v3[1])
  {
    uint64_t i = a1;
    do
    {
      int v8 = i[1];
      ++i;
      uint64_t v7 = v8;
      int v9 = *v8;
    }
    while (v4 >= *v8 && (v4 != v9 || v2[1] >= v7[1]));
  }
  else
  {
    for (uint64_t i = a1 + 1; i < a2; ++i)
    {
      int v10 = **i;
      if (v4 < v10 || v4 == v10 && v2[1] < (*i)[1]) {
        break;
      }
    }
  }
  if (i < a2)
  {
    --a2;
    while (v4 < v5 || v4 == v5 && v2[1] < v3[1])
    {
      int v11 = *--a2;
      uint64_t v3 = v11;
      int v5 = *v11;
    }
  }
  if (i < a2)
  {
    int v12 = *i;
    uint64_t v13 = *a2;
    do
    {
      _DWORD *i = v13;
      *a2 = v12;
      do
      {
        int v14 = i[1];
        ++i;
        int v12 = v14;
        int v15 = *v14;
      }
      while (v4 >= *v14 && (v4 != v15 || v2[1] >= v12[1]));
      do
      {
        do
        {
          unint64_t v16 = *--a2;
          uint64_t v13 = v16;
          int v17 = *v16;
        }
        while (v4 < *v16);
      }
      while (v4 == v17 && v2[1] < v13[1]);
    }
    while (i < a2);
  }
  if (i - 1 != a1) {
    *a1 = *(i - 1);
  }
  *(i - 1) = v2;
  return i;
}

int **sub_10031B65C(int **a1, int **a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  int v4 = **a1;
  while (1)
  {
    int v5 = a1[v2 + 1];
    if (*v5 >= v4 && (*v5 != v4 || v5[1] >= v3[1])) {
      break;
    }
    ++v2;
  }
  int v6 = &a1[v2];
  unint64_t v7 = (unint64_t)&a1[v2 + 1];
  if (v2 * 8)
  {
    do
    {
      int v9 = *--a2;
      int v8 = v9;
      int v10 = *v9;
    }
    while (*v9 >= v4 && (v10 != v4 || v8[1] >= v3[1]));
  }
  else
  {
LABEL_19:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        int v12 = *--a2;
        int v11 = v12;
        int v13 = *v12;
        if (*v12 < v4) {
          break;
        }
        if (v13 != v4) {
          goto LABEL_19;
        }
      }
      while (v11[1] >= v3[1] && v7 < (unint64_t)a2);
    }
  }
  if (v7 < (unint64_t)a2)
  {
    int v15 = *a2;
    unint64_t v16 = (int **)v7;
    int v17 = a2;
    do
    {
      *v16++ = v15;
      *int v17 = v5;
      while (1)
      {
        int v5 = *v16;
        int v18 = **v16;
        if (v18 >= v4 && (v18 != v4 || v5[1] >= v3[1])) {
          break;
        }
        ++v16;
      }
      do
      {
        uint64_t v19 = *--v17;
        int v15 = v19;
        int v20 = *v19;
      }
      while (*v19 >= v4 && (v20 != v4 || v15[1] >= v3[1]));
    }
    while (v16 < v17);
    int v6 = v16 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  *int v6 = v3;
  return v6;
}

BOOL sub_10031B7B0(int **a1, int **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v17 = *(a2 - 1);
      int v18 = *a1;
      int v19 = **a1;
      if (*v17 < v19 || *v17 == v19 && v17[1] < v18[1])
      {
        *a1 = v17;
        *(a2 - 1) = v18;
      }
      return result;
    case 3:
      sub_10031B3E8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      int v20 = a1 + 1;
      float v21 = a1 + 2;
      sub_10031B3E8(a1, a1 + 1, a1 + 2);
      float v22 = *(a2 - 1);
      unsigned int v23 = a1[2];
      if (*v22 >= *v23 && (*v22 != *v23 || v22[1] >= v23[1])) {
        return 1;
      }
      *float v21 = v22;
      *(a2 - 1) = v23;
      int v24 = *v21;
      int v25 = *v20;
      int v26 = **v21;
      int v27 = **v20;
      if (v26 >= v27 && (v26 != v27 || v24[1] >= v25[1])) {
        return 1;
      }
      a1[1] = v24;
      a1[2] = v25;
      BOOL v28 = *a1;
      int v29 = **a1;
      if (v26 >= v29 && (v26 != v29 || v24[1] >= v28[1])) {
        return 1;
      }
      *a1 = v24;
      a1[1] = v28;
      return 1;
    case 5:
      sub_10031BA9C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v6 = a1 + 2;
      sub_10031B3E8(a1, a1 + 1, a1 + 2);
      unint64_t v7 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    int v11 = *v7;
    int v12 = *v6;
    int v13 = **v7;
    int v14 = **v6;
    if (v13 < v14 || v13 == v14 && v11[1] < v12[1])
    {
      *unint64_t v7 = v12;
      int v10 = a1;
      if (v6 != a1)
      {
        uint64_t v15 = v8;
        while (1)
        {
          unint64_t v16 = *(int **)((char *)a1 + v15 + 8);
          if (v13 >= *v16)
          {
            if (v13 != *v16)
            {
              int v10 = v6;
              goto LABEL_6;
            }
            if (v11[1] >= v16[1]) {
              break;
            }
          }
          --v6;
          *(int **)((char *)a1 + v15 + 16) = v16;
          v15 -= 8;
          if (v15 == -16)
          {
            int v10 = a1;
            goto LABEL_6;
          }
        }
        int v10 = (int **)((char *)a1 + v15 + 16);
      }
LABEL_6:
      int *v10 = v11;
      if (++v9 == 8) {
        return v7 + 1 == a2;
      }
    }
    int v6 = v7;
    v8 += 8;
    if (++v7 == a2) {
      return 1;
    }
  }
}

uint64_t sub_10031BA9C(int **a1, int **a2, int **a3, int **a4, int **a5)
{
  uint64_t result = sub_10031B3E8(a1, a2, a3);
  int v11 = *a4;
  int v12 = *a3;
  int v13 = **a4;
  int v14 = **a3;
  if (v13 < v14 || v13 == v14 && v11[1] < v12[1])
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v15 = *a3;
    unint64_t v16 = *a2;
    int v17 = **a3;
    int v18 = **a2;
    if (v17 < v18 || v17 == v18 && v15[1] < v16[1])
    {
      *a2 = v15;
      *a3 = v16;
      int v19 = *a2;
      int v20 = *a1;
      int v21 = **a2;
      int v22 = **a1;
      if (v21 < v22 || v21 == v22 && v19[1] < v20[1])
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  unsigned int v23 = *a5;
  int v24 = *a4;
  int v25 = **a5;
  int v26 = **a4;
  if (v25 < v26 || v25 == v26 && v23[1] < v24[1])
  {
    *a4 = v23;
    *a5 = v24;
    int v27 = *a4;
    BOOL v28 = *a3;
    int v29 = **a4;
    int v30 = **a3;
    if (v29 < v30 || v29 == v30 && v27[1] < v28[1])
    {
      *a3 = v27;
      *a4 = v28;
      uint64_t v31 = *a3;
      int v32 = *a2;
      int v33 = **a3;
      int v34 = **a2;
      if (v33 < v34 || v33 == v34 && v31[1] < v32[1])
      {
        *a2 = v31;
        *a3 = v32;
        float v35 = *a2;
        uint64_t v36 = *a1;
        int v37 = **a2;
        int v38 = **a1;
        if (v37 < v38 || v37 == v38 && v35[1] < v36[1])
        {
          *a1 = v35;
          *a2 = v36;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10031BC7C(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (int **)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[1];
        int v11 = **v8;
        if (v11 < *v10 || v11 == *v10 && (*v8)[1] < v10[1])
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      int v12 = *v8;
      int v13 = *a4;
      int v14 = **v8;
      int v15 = **a4;
      if (v14 >= v15 && (v14 != v15 || v12[1] >= v13[1]))
      {
        *a4 = v12;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v17 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unint64_t v16 = (int **)(result + 8 * v7);
            uint64_t v18 = v17 + 2;
            if (v18 < a3)
            {
              int v19 = v16[1];
              int v20 = **v16;
              if (v20 < *v19 || v20 == *v19 && (*v16)[1] < v19[1])
              {
                ++v16;
                uint64_t v7 = v18;
              }
            }
            int v21 = *v16;
            int v22 = **v16;
            if (v22 < v15 || v22 == v15 && v21[1] < v13[1]) {
              break;
            }
            *uint64_t v8 = v21;
            uint64_t v8 = v16;
            if (v5 < v7) {
              goto LABEL_13;
            }
          }
        }
        unint64_t v16 = v8;
LABEL_13:
        int *v16 = v13;
      }
    }
  }
  return result;
}

char *sub_10031BDB8(char *result, char *a2)
{
  if (a2 - result >= 9)
  {
    uint64_t v2 = (unint64_t)(a2 - result) >> 3;
    do
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(int **)result;
      uint64_t v3 = result;
      do
      {
        uint64_t v7 = v3;
        v3 += 8 * v5 + 8;
        uint64_t v8 = 2 * v5;
        uint64_t v5 = (2 * v5) | 1;
        uint64_t v9 = v8 + 2;
        if (v9 < v2)
        {
          int v10 = (_DWORD *)*((void *)v3 + 1);
          int v11 = **(_DWORD **)v3;
          if (v11 < *v10 || v11 == *v10 && *(_DWORD *)(*(void *)v3 + 4) < v10[1])
          {
            v3 += 8;
            uint64_t v5 = v9;
          }
        }
        *(void *)uint64_t v7 = *(void *)v3;
      }
      while (v5 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 8;
      if (v3 != a2)
      {
        *(void *)uint64_t v3 = *(void *)a2;
        *(void *)a2 = v6;
        uint64_t v12 = v3 - result + 8;
        if (v12 < 9) {
          continue;
        }
        unint64_t v13 = ((unint64_t)v12 >> 3) - 2;
        unint64_t v14 = v13 >> 1;
        int v15 = &result[8 * (v13 >> 1)];
        unint64_t v16 = *(int **)v15;
        uint64_t v6 = *(int **)v3;
        int v17 = **(_DWORD **)v15;
        int v18 = **(_DWORD **)v3;
        if (v17 >= v18 && (v17 != v18 || v16[1] >= v6[1])) {
          continue;
        }
        *(void *)uint64_t v3 = v16;
        if (v13 >= 2)
        {
          while (1)
          {
            unint64_t v19 = v14 - 1;
            unint64_t v14 = (v14 - 1) >> 1;
            uint64_t v3 = &result[8 * v14];
            int v20 = *(int **)v3;
            int v21 = **(_DWORD **)v3;
            if (v21 >= v18 && (v21 != v18 || v20[1] >= v6[1])) {
              break;
            }
            *(void *)int v15 = v20;
            int v15 = &result[8 * v14];
            if (v19 <= 1) {
              goto LABEL_4;
            }
          }
        }
        uint64_t v3 = v15;
      }
LABEL_4:
      *(void *)uint64_t v3 = v6;
    }
    while (v2-- > 2);
  }
  return result;
}

uint64_t sub_10031BF30(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = result;
LABEL_2:
  int v11 = (float **)(a2 - 8);
  uint64_t v65 = (float **)(a2 - 24);
  int v66 = (float **)(a2 - 16);
  uint64_t v12 = (float **)v10;
  int v67 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - (char *)v12;
    unint64_t v16 = (a2 - (char *)v12) >> 3;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          BOOL v28 = (float *)*((void *)a2 - 1);
          int v29 = *v12;
          float v30 = **v12;
          if (*v28 < v30 || *v28 == v30 && v28[1] < v29[1])
          {
            *uint64_t v12 = v28;
            *((void *)a2 - 1) = v29;
          }
          break;
        case 3uLL:
          uint64_t result = sub_10031C4A8(v12, v12 + 1, v11);
          break;
        case 4uLL:
          uint64_t v31 = v12 + 1;
          int v32 = v12 + 2;
          uint64_t result = sub_10031C4A8(v12, v12 + 1, v12 + 2);
          int v33 = (float *)*((void *)a2 - 1);
          int v34 = v12[2];
          if (*v33 < *v34 || *v33 == *v34 && v33[1] < v34[1])
          {
            *int v32 = v33;
            *((void *)a2 - 1) = v34;
            float v35 = *v32;
            uint64_t v36 = *v31;
            float v37 = **v32;
            float v38 = **v31;
            if (v37 < v38 || v37 == v38 && v35[1] < v36[1])
            {
              v12[1] = v35;
              v12[2] = v36;
              int v39 = *v12;
              float v40 = **v12;
              if (v37 < v40 || v37 == v40 && v35[1] < v39[1])
              {
                *uint64_t v12 = v35;
                v12[1] = v39;
              }
            }
          }
          break;
        case 5uLL:
          uint64_t result = sub_10031CB48(v12, v12 + 1, v12 + 2, v12 + 3, v11);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (float **)a2)
      {
        unint64_t v54 = (v16 - 2) >> 1;
        unint64_t v55 = v54 + 1;
        BOOL v56 = &v12[v54];
        do
        {
          sub_10031CCFC((uint64_t)v12, a3, (a2 - (char *)v12) >> 3, v56--);
          --v55;
        }
        while (v55);
        return (uint64_t)sub_10031CE38((char *)v12, a2);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    int v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 < 0x401)
    {
      sub_10031C4A8(v18, v12, v11);
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_10031C4A8(v12, v18, v11);
      uint64_t v19 = a5;
      int v20 = v11;
      int v21 = &v12[v17];
      sub_10031C4A8(v12 + 1, v21 - 1, v66);
      sub_10031C4A8(v12 + 2, &v12[v17 + 1], v65);
      sub_10031C4A8(v21 - 1, v18, &v12[v17 + 1]);
      int v22 = *v12;
      *uint64_t v12 = *v21;
      *int v21 = v22;
      int v11 = v20;
      a5 = v19;
      a2 = v67;
      if (a5) {
        goto LABEL_15;
      }
    }
    unsigned int v23 = *(v12 - 1);
    float v24 = **v12;
    if (*v23 >= v24 && (*v23 != v24 || v23[1] >= (*v12)[1]))
    {
      uint64_t result = (uint64_t)sub_10031C5BC(v12, (float **)a2);
      uint64_t v12 = (float **)result;
      goto LABEL_20;
    }
LABEL_15:
    int v25 = sub_10031C718(v12, (float **)a2);
    if ((v26 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v27 = sub_10031C86C(v12, v25);
    uint64_t v12 = v25 + 1;
    uint64_t result = sub_10031C86C(v25 + 1, (float **)a2);
    if (result)
    {
      a4 = -v14;
      a2 = (char *)v25;
      if (v27) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v27)
    {
LABEL_18:
      uint64_t result = sub_10031BF30(v10, v25, a3, -v14, a5 & 1);
      uint64_t v12 = v25 + 1;
LABEL_20:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  uint64_t v41 = (char *)(v12 + 1);
  BOOL v43 = v12 == (float **)a2 || v41 == a2;
  if (a5)
  {
    if (!v43)
    {
      uint64_t v44 = 0;
      int v45 = v12;
      do
      {
        int v46 = v45;
        int v45 = (float **)v41;
        uint64_t v48 = *v46;
        int v47 = v46[1];
        float v49 = *v47;
        float v50 = **v46;
        if (*v47 < v50 || *v47 == v50 && v47[1] < v48[1])
        {
          v46[1] = v48;
          uint64_t v51 = v12;
          if (v46 != v12)
          {
            uint64_t v52 = v44;
            while (1)
            {
              int v53 = *(float **)((char *)v12 + v52 - 8);
              if (v49 >= *v53)
              {
                if (v49 != *v53)
                {
                  uint64_t v51 = (float **)((char *)v12 + v52);
                  goto LABEL_53;
                }
                if (v47[1] >= v53[1]) {
                  break;
                }
              }
              --v46;
              *(float **)((char *)v12 + v52) = v53;
              v52 -= 8;
              if (!v52)
              {
                uint64_t v51 = v12;
                goto LABEL_53;
              }
            }
            uint64_t v51 = v46;
          }
LABEL_53:
          *uint64_t v51 = v47;
        }
        uint64_t v41 = (char *)(v45 + 1);
        v44 += 8;
      }
      while (v45 + 1 != (float **)a2);
    }
  }
  else if (!v43)
  {
    do
    {
      uint64_t v57 = v10;
      uint64_t v10 = (uint64_t)v41;
      long long v59 = *(float **)v57;
      int v58 = *(float **)(v57 + 8);
      float v60 = *v58;
      float v61 = **(float **)v57;
      if (*v58 < v61 || *v58 == v61 && v58[1] < v59[1])
      {
        do
        {
          do
          {
            int v62 = (float **)v57;
            uint64_t v63 = *(float **)(v57 - 8);
            v57 -= 8;
            *(void *)(v57 + 16) = v59;
            long long v59 = v63;
            BOOL v64 = v60 == *v63;
          }
          while (v60 < *v63);
        }
        while (v64 && v58[1] < v59[1]);
        *int v62 = v58;
      }
      uint64_t v41 = (char *)(v10 + 8);
    }
    while ((char *)(v10 + 8) != a2);
  }
  return result;
}

uint64_t sub_10031C4A8(float **a1, float **a2, float **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  float v5 = **a2;
  float v6 = **a1;
  if (v5 < v6 || v5 == v6 && v3[1] < v4[1])
  {
    uint64_t v7 = *a3;
    float v8 = **a3;
    if (v8 < v5 || v8 == v5 && v7[1] < v3[1])
    {
      *a1 = v7;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    unint64_t v16 = *a3;
    float v17 = **a3;
    if (v17 < v6 || v17 == v6 && v16[1] < v4[1])
    {
      *a2 = v16;
      *a3 = v4;
      return 2;
    }
    return 1;
  }
  uint64_t v10 = *a3;
  float v11 = **a3;
  if (v11 < v5 || v11 == v5 && v10[1] < v3[1])
  {
    *a2 = v10;
    *a3 = v3;
    uint64_t v12 = *a2;
    uint64_t v13 = *a1;
    float v14 = **a2;
    float v15 = **a1;
    if (v14 < v15 || v14 == v15 && v12[1] < v13[1])
    {
      *a1 = v12;
      *a2 = v13;
      return 2;
    }
    return 1;
  }
  return 0;
}

float **sub_10031C5BC(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(a2 - 1);
  float v4 = **a1;
  float v5 = *v3;
  if (v4 < *v3 || v4 == *v3 && v2[1] < v3[1])
  {
    uint64_t i = a1;
    do
    {
      float v8 = i[1];
      ++i;
      uint64_t v7 = v8;
      float v9 = *v8;
    }
    while (v4 >= *v8 && (v4 != v9 || v2[1] >= v7[1]));
  }
  else
  {
    for (uint64_t i = a1 + 1; i < a2; ++i)
    {
      float v10 = **i;
      if (v4 < v10 || v4 == v10 && v2[1] < (*i)[1]) {
        break;
      }
    }
  }
  if (i < a2)
  {
    --a2;
    while (v4 < v5 || v4 == v5 && v2[1] < v3[1])
    {
      float v11 = *--a2;
      uint64_t v3 = v11;
      float v5 = *v11;
    }
  }
  if (i < a2)
  {
    uint64_t v12 = *i;
    uint64_t v13 = *a2;
    do
    {
      _DWORD *i = v13;
      *a2 = v12;
      do
      {
        float v14 = i[1];
        ++i;
        uint64_t v12 = v14;
        float v15 = *v14;
      }
      while (v4 >= *v14 && (v4 != v15 || v2[1] >= v12[1]));
      do
      {
        do
        {
          unint64_t v16 = *--a2;
          uint64_t v13 = v16;
          BOOL v17 = v4 == *v16;
        }
        while (v4 < *v16);
      }
      while (v17 && v2[1] < v13[1]);
    }
    while (i < a2);
  }
  if (i - 1 != a1) {
    *a1 = *(i - 1);
  }
  *(i - 1) = v2;
  return i;
}

float **sub_10031C718(float **a1, float **a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  float v4 = **a1;
  while (1)
  {
    float v5 = a1[v2 + 1];
    if (*v5 >= v4 && (*v5 != v4 || v5[1] >= v3[1])) {
      break;
    }
    ++v2;
  }
  float v6 = &a1[v2];
  unint64_t v7 = (unint64_t)&a1[v2 + 1];
  if (v2 * 8)
  {
    do
    {
      float v9 = *--a2;
      float v8 = v9;
      float v10 = *v9;
    }
    while (*v9 >= v4 && (v10 != v4 || v8[1] >= v3[1]));
  }
  else
  {
LABEL_19:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        uint64_t v12 = *--a2;
        float v11 = v12;
        float v13 = *v12;
        if (*v12 < v4) {
          break;
        }
        if (v13 != v4) {
          goto LABEL_19;
        }
      }
      while (v11[1] >= v3[1] && v7 < (unint64_t)a2);
    }
  }
  if (v7 < (unint64_t)a2)
  {
    float v15 = *a2;
    unint64_t v16 = (float **)v7;
    BOOL v17 = a2;
    do
    {
      *v16++ = v15;
      *BOOL v17 = v5;
      while (1)
      {
        float v5 = *v16;
        float v18 = **v16;
        if (v18 >= v4 && (v18 != v4 || v5[1] >= v3[1])) {
          break;
        }
        ++v16;
      }
      do
      {
        uint64_t v19 = *--v17;
        float v15 = v19;
        float v20 = *v19;
      }
      while (*v19 >= v4 && (v20 != v4 || v15[1] >= v3[1]));
    }
    while (v16 < v17);
    float v6 = v16 - 1;
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  *float v6 = v3;
  return v6;
}

BOOL sub_10031C86C(float **a1, float **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v17 = *(a2 - 1);
      float v18 = *a1;
      float v19 = **a1;
      if (*v17 < v19 || *v17 == v19 && v17[1] < v18[1])
      {
        *a1 = v17;
        *(a2 - 1) = v18;
      }
      return result;
    case 3:
      sub_10031C4A8(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      float v20 = a1 + 1;
      int v21 = a1 + 2;
      sub_10031C4A8(a1, a1 + 1, a1 + 2);
      int v22 = *(a2 - 1);
      unsigned int v23 = a1[2];
      if (*v22 >= *v23 && (*v22 != *v23 || v22[1] >= v23[1])) {
        return 1;
      }
      *int v21 = v22;
      *(a2 - 1) = v23;
      float v24 = *v21;
      int v25 = *v20;
      float v26 = **v21;
      float v27 = **v20;
      if (v26 >= v27 && (v26 != v27 || v24[1] >= v25[1])) {
        return 1;
      }
      a1[1] = v24;
      a1[2] = v25;
      BOOL v28 = *a1;
      float v29 = **a1;
      if (v26 >= v29 && (v26 != v29 || v24[1] >= v28[1])) {
        return 1;
      }
      *a1 = v24;
      a1[1] = v28;
      return 1;
    case 5:
      sub_10031CB48(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      float v6 = a1 + 2;
      sub_10031C4A8(a1, a1 + 1, a1 + 2);
      unint64_t v7 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    float v11 = *v7;
    uint64_t v12 = *v6;
    float v13 = **v7;
    float v14 = **v6;
    if (v13 < v14 || v13 == v14 && v11[1] < v12[1])
    {
      *unint64_t v7 = v12;
      float v10 = a1;
      if (v6 != a1)
      {
        uint64_t v15 = v8;
        while (1)
        {
          unint64_t v16 = *(float **)((char *)a1 + v15 + 8);
          if (v13 >= *v16)
          {
            if (v13 != *v16)
            {
              float v10 = v6;
              goto LABEL_6;
            }
            if (v11[1] >= v16[1]) {
              break;
            }
          }
          --v6;
          *(float **)((char *)a1 + v15 + 16) = v16;
          v15 -= 8;
          if (v15 == -16)
          {
            float v10 = a1;
            goto LABEL_6;
          }
        }
        float v10 = (float **)((char *)a1 + v15 + 16);
      }
LABEL_6:
      float *v10 = v11;
      if (++v9 == 8) {
        return v7 + 1 == a2;
      }
    }
    float v6 = v7;
    v8 += 8;
    if (++v7 == a2) {
      return 1;
    }
  }
}

uint64_t sub_10031CB48(float **a1, float **a2, float **a3, float **a4, float **a5)
{
  uint64_t result = sub_10031C4A8(a1, a2, a3);
  float v11 = *a4;
  uint64_t v12 = *a3;
  float v13 = **a4;
  float v14 = **a3;
  if (v13 < v14 || v13 == v14 && v11[1] < v12[1])
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v15 = *a3;
    unint64_t v16 = *a2;
    float v17 = **a3;
    float v18 = **a2;
    if (v17 < v18 || v17 == v18 && v15[1] < v16[1])
    {
      *a2 = v15;
      *a3 = v16;
      float v19 = *a2;
      float v20 = *a1;
      float v21 = **a2;
      float v22 = **a1;
      if (v21 < v22 || v21 == v22 && v19[1] < v20[1])
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  unsigned int v23 = *a5;
  float v24 = *a4;
  float v25 = **a5;
  float v26 = **a4;
  if (v25 < v26 || v25 == v26 && v23[1] < v24[1])
  {
    *a4 = v23;
    *a5 = v24;
    float v27 = *a4;
    BOOL v28 = *a3;
    float v29 = **a4;
    float v30 = **a3;
    if (v29 < v30 || v29 == v30 && v27[1] < v28[1])
    {
      *a3 = v27;
      *a4 = v28;
      uint64_t v31 = *a3;
      int v32 = *a2;
      float v33 = **a3;
      float v34 = **a2;
      if (v33 < v34 || v33 == v34 && v31[1] < v32[1])
      {
        *a2 = v31;
        *a3 = v32;
        float v35 = *a2;
        uint64_t v36 = *a1;
        float v37 = **a2;
        float v38 = **a1;
        if (v37 < v38 || v37 == v38 && v35[1] < v36[1])
        {
          *a1 = v35;
          *a2 = v36;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10031CCFC(uint64_t result, uint64_t a2, uint64_t a3, float **a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (float **)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        float v10 = v8[1];
        float v11 = **v8;
        if (v11 < *v10 || v11 == *v10 && (*v8)[1] < v10[1])
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      uint64_t v12 = *v8;
      float v13 = *a4;
      float v14 = **v8;
      float v15 = **a4;
      if (v14 >= v15 && (v14 != v15 || v12[1] >= v13[1]))
      {
        *a4 = v12;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v17 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unint64_t v16 = (float **)(result + 8 * v7);
            uint64_t v18 = v17 + 2;
            if (v18 < a3)
            {
              float v19 = v16[1];
              float v20 = **v16;
              if (v20 < *v19 || v20 == *v19 && (*v16)[1] < v19[1])
              {
                ++v16;
                uint64_t v7 = v18;
              }
            }
            float v21 = *v16;
            float v22 = **v16;
            if (v22 < v15 || v22 == v15 && v21[1] < v13[1]) {
              break;
            }
            *uint64_t v8 = v21;
            uint64_t v8 = v16;
            if (v5 < v7) {
              goto LABEL_13;
            }
          }
        }
        unint64_t v16 = v8;
LABEL_13:
        float *v16 = v13;
      }
    }
  }
  return result;
}

char *sub_10031CE38(char *result, char *a2)
{
  if (a2 - result >= 9)
  {
    uint64_t v2 = (unint64_t)(a2 - result) >> 3;
    do
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(float **)result;
      uint64_t v3 = result;
      do
      {
        uint64_t v7 = v3;
        v3 += 8 * v5 + 8;
        uint64_t v8 = 2 * v5;
        uint64_t v5 = (2 * v5) | 1;
        uint64_t v9 = v8 + 2;
        if (v9 < v2)
        {
          float v10 = (float *)*((void *)v3 + 1);
          float v11 = **(float **)v3;
          if (v11 < *v10 || v11 == *v10 && *(float *)(*(void *)v3 + 4) < v10[1])
          {
            v3 += 8;
            uint64_t v5 = v9;
          }
        }
        *(void *)uint64_t v7 = *(void *)v3;
      }
      while (v5 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 8;
      if (v3 != a2)
      {
        *(void *)uint64_t v3 = *(void *)a2;
        *(void *)a2 = v6;
        uint64_t v12 = v3 - result + 8;
        if (v12 < 9) {
          continue;
        }
        unint64_t v13 = ((unint64_t)v12 >> 3) - 2;
        unint64_t v14 = v13 >> 1;
        float v15 = (float **)&result[8 * (v13 >> 1)];
        unint64_t v16 = *v15;
        uint64_t v6 = *(float **)v3;
        float v17 = **v15;
        float v18 = **(float **)v3;
        if (v17 >= v18 && (v17 != v18 || v16[1] >= v6[1])) {
          continue;
        }
        *(void *)uint64_t v3 = v16;
        if (v13 >= 2)
        {
          while (1)
          {
            unint64_t v19 = v14 - 1;
            unint64_t v14 = (v14 - 1) >> 1;
            uint64_t v3 = &result[8 * v14];
            float v20 = *(float **)v3;
            float v21 = **(float **)v3;
            if (v21 >= v18 && (v21 != v18 || v20[1] >= v6[1])) {
              break;
            }
            float *v15 = v20;
            float v15 = (float **)&result[8 * v14];
            if (v19 <= 1) {
              goto LABEL_4;
            }
          }
        }
        uint64_t v3 = (char *)v15;
      }
LABEL_4:
      *(void *)uint64_t v3 = v6;
    }
    while (v2-- > 2);
  }
  return result;
}

void sub_10031CFAC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  sub_1002D6AE8(v985, &off_100499838);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    long long v9 = *(_OWORD *)(v8 + 16);
    long long v977 = *(_OWORD *)v8;
    long long v978 = v9;
    long long v979 = *(_OWORD *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 56);
    uint64_t v980 = *(void *)(v8 + 48);
    uint64_t v981 = v10;
    v982 = (int32x2_t *)&v977 + 1;
    v983 = v984;
    v984[1] = 0;
    v984[0] = 0;
    if (v10) {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
    }
    if (*(int *)(v8 + 4) > 2)
    {
      DWORD1(v977) = 0;
      sub_1002931A8((uint64_t)&v977, v8);
    }
    else
    {
      float v11 = *(void **)(v8 + 72);
      uint64_t v12 = v983;
      *(void *)v983 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v977);
  }
  *(_DWORD *)v972 = 1124007936;
  memset(&v972[4], 0, 60);
  v973 = (int *)&v972[8];
  v974 = &v975;
  unint64_t v976 = 0;
  unint64_t v975 = 0;
  __int32 v13 = v982->i32[0];
  int v14 = v977 & 7;
  if ((v977 & 5 | 2) != 2)
  {
    v988[0] = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v988, 24), "depth == 0 || depth == 2", 24);
    sub_1002D2278(-215, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1624);
  }
  if (!(void)v978) {
    goto LABEL_20;
  }
  if (SDWORD1(v977) >= 3)
  {
    unint64_t v16 = (int *)v982 + 1;
    uint64_t v17 = 1;
    uint64_t v18 = DWORD1(v977) & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v15 = v19 * v17;
    unint64_t v20 = DWORD1(v977) - (unint64_t)(DWORD1(v977) & 0xFFFFFFFE);
    if (v20)
    {
      float v21 = (int32x2_t *)((char *)v982 + ((4 * DWORD1(v977)) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = v21->i32[0];
        float v21 = (int32x2_t *)((char *)v21 + 4);
        v15 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v15 = SHIDWORD(v977) * (uint64_t)SDWORD2(v977);
  }
  if (!DWORD1(v977) || !v15)
  {
LABEL_20:
    v988[0] = 0uLL;
    uint64_t v23 = sub_1002D19D8(v988, 12);
    *(_DWORD *)(v23 + 8) = 690518388;
    *(void *)uint64_t v23 = *(void *)"!src.empty()";
    sub_1002D2278(-215, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1625);
  }
  unsigned int v24 = (v977 >> 3) & 0x1FF;
  switch(a3)
  {
    case 46:
    case 47:
    case 48:
    case 49:
    case 62:
    case 63:
    case 64:
    case 65:
    case 139:
    case 140:
    case 141:
    case 142:
      if (a4 < 1) {
        a4 = 3;
      }
      if ((a4 - 3) > 1 || v24)
      {
        v988[0] = 0uLL;
        qmemcpy((void *)sub_1002D19D8(v988, 34), "scn == 1 && (dcn == 3 || dcn == 4)", 34);
        sub_1002D2278(-215, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1651);
      }
      v970.i32[0] = v982->i32[1];
      v970.i32[1] = v13;
      sub_10029E6D4(a2, &v970, (v14 | (8 * a4)) - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v25 = *(void *)(a2 + 8);
        long long v26 = *(_OWORD *)(v25 + 16);
        long long v962 = *(_OWORD *)v25;
        long long v963 = v26;
        long long v964 = *(_OWORD *)(v25 + 32);
        uint64_t v27 = *(void *)(v25 + 56);
        uint64_t v965 = *(void *)(v25 + 48);
        uint64_t v966 = v27;
        v967 = (int *)&v962 + 2;
        v968 = v969;
        v969[1] = 0;
        v969[0] = 0;
        if (v27) {
          atomic_fetch_add((atomic_uint *volatile)(v27 + 20), 1u);
        }
        if (*(int *)(v25 + 4) > 2)
        {
          DWORD1(v962) = 0;
          sub_1002931A8((uint64_t)&v962, v25);
        }
        else
        {
          BOOL v28 = *(void **)(v25 + 72);
          float v29 = v968;
          *(void *)v968 = *v28;
          v29[1] = v28[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)&v962);
      }
      if ((a3 - 139) < 4 || (a3 - 46) <= 3)
      {
        if (v14)
        {
          if (v14 != 2)
          {
            v988[0] = 0uLL;
            qmemcpy((void *)sub_1002D19D8(v988, 53), "Bayer->RGB demosaicing only supports 8u and 16u types", 53);
            sub_1002D2278(-210, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1666);
          }
          unint64_t v42 = v969[0];
          unsigned int v43 = v962;
          int32x2_t v44 = *v982;
          int32x2_t v45 = vadd_s32(*v982, (int32x2_t)0x100000001);
          int32x2_t v993 = vrev64_s32(v45);
          if (v44.i32[0] >= 3)
          {
            BOOL v47 = a3 == 47 || a3 == 49;
            if ((a3 & 0xFFFFFFFE) == 0x2E) {
              int v48 = -1;
            }
            else {
              int v48 = 1;
            }
            v987[0] = 0;
            v987[1] = v45.i32[0];
            sub_10032322C((uint64_t)v988, (uint64_t)&v977, (uint64_t)&v962, v47, v48, &v993);
            if (SDWORD1(v962) >= 3)
            {
              uint64_t v85 = v967 + 1;
              uint64_t v86 = 1;
              uint64_t v87 = DWORD1(v962) & 0xFFFFFFFE;
              uint64_t v88 = 1;
              do
              {
                v86 *= *(v85 - 1);
                v88 *= *v85;
                v85 += 2;
                v87 -= 2;
              }
              while (v87);
              uint64_t v49 = v88 * v86;
              unint64_t v89 = DWORD1(v962) - (unint64_t)(DWORD1(v962) & 0xFFFFFFFE);
              if (v89)
              {
                unint64_t v90 = (int *)((char *)v967 + ((4 * DWORD1(v962)) & 0x3FFFFFFF8));
                do
                {
                  uint64_t v91 = *v90++;
                  v49 *= v91;
                  --v89;
                }
                while (v89);
              }
            }
            else
            {
              uint64_t v49 = SHIDWORD(v962) * (uint64_t)SDWORD2(v962);
            }
            sub_1002ABC90(v987, (uint64_t)v988, (double)(unint64_t)v49 * 0.0000152587891);
            sub_100323B4C((uint64_t)v988);
          }
          unint64_t v92 = v42 >> 1;
          uint64_t v93 = v963;
          int v94 = *v967;
          uint64_t v95 = v967[1] * (((v43 >> 3) & 0x1FF) + 1);
          if (*v967 > 2)
          {
            if ((int)v95 < 1) {
              goto LABEL_78;
            }
            uint64_t v96 = (int)v92;
            int v97 = (v94 - 1) * v92;
            uint64_t v98 = (*v967 - 2) * (int)v92;
            uint64_t v99 = v97;
            if (v95 >= 0x10)
            {
              uint64_t v100 = 0;
              uint64_t v577 = 2 * v99;
              if ((unint64_t)(2 * v99) >= 0x20)
              {
                uint64_t v578 = 2 * (int)v92;
                if ((unint64_t)(v578 + 31) >= 0x20)
                {
                  uint64_t v579 = 2 * v98;
                  if ((unint64_t)(2 * v98) >= 0x20
                    && (unint64_t)(v577 - v578) >= 0x20
                    && (unint64_t)(v577 - v579) >= 0x20)
                  {
                    uint64_t v100 = v95 & 0x7FFFFFF0;
                    v580 = (_OWORD *)(v963 + 16);
                    uint64_t v581 = v95 & 0xFFFFFFF0;
                    do
                    {
                      long long v582 = *(_OWORD *)((char *)v580 + 2 * v96);
                      *(v580 - 1) = *(_OWORD *)((char *)v580 + 2 * v96 - 16);
                      _OWORD *v580 = v582;
                      long long v583 = *(_OWORD *)((char *)v580 + 2 * v98);
                      v584 = (_OWORD *)((char *)v580 + v577);
                      *(v584 - 1) = *(_OWORD *)((char *)v580 + v579 - 16);
                      _OWORD *v584 = v583;
                      v580 += 2;
                      v581 -= 16;
                    }
                    while (v581);
                    if (v100 == v95) {
                      goto LABEL_78;
                    }
                  }
                }
              }
            }
            else
            {
              uint64_t v100 = 0;
            }
            v585 = (_WORD *)(v93 + 2 * (v100 + v99));
            uint64_t v586 = v95 - v100;
            v587 = (__int16 *)(v93 + 2 * (v100 + v98));
            v588 = (_WORD *)(v93 + 2 * v100);
            v589 = (__int16 *)(v93 + 2 * (v100 + v96));
            do
            {
              __int16 v590 = *v589++;
              *v588++ = v590;
              __int16 v591 = *v587++;
              *v585++ = v591;
              --v586;
            }
            while (v586);
            goto LABEL_78;
          }
          if ((int)v95 >= 1)
          {
            uint64_t v101 = 0;
            int v102 = (v94 - 1) * v92;
            uint64_t v103 = v102;
            if (v95 < 0x10) {
              goto LABEL_194;
            }
            if ((unint64_t)(-2 * v102) < 0x20) {
              goto LABEL_194;
            }
            uint64_t v101 = v95 & 0x7FFFFFF0;
            uint64_t v104 = v95 & 0xFFFFFFF0;
            uint64_t v105 = (_OWORD *)v963;
            do
            {
              int v106 = (_OWORD *)((char *)v105 + 2 * v102);
              *int v106 = 0uLL;
              v106[1] = 0uLL;
              *uint64_t v105 = 0uLL;
              v105[1] = 0uLL;
              v105 += 2;
              v104 -= 16;
            }
            while (v104);
            if (v101 != v95)
            {
LABEL_194:
              uint64_t v107 = v95 - v101;
              uint64_t v108 = (_WORD *)(v93 + 2 * v101);
              uint64_t v109 = (_WORD *)(v93 + 2 * (v101 + v103));
              do
              {
                *v109++ = 0;
                *v108++ = 0;
                --v107;
              }
              while (v107);
            }
          }
LABEL_78:
          if (v966 && atomic_fetch_add((atomic_uint *volatile)(v966 + 20), 0xFFFFFFFF) == 1) {
            sub_1002932F4((uint64_t)&v962);
          }
          uint64_t v966 = 0;
          long long v963 = 0u;
          long long v964 = 0u;
          if (SDWORD1(v962) >= 1)
          {
            uint64_t v53 = 0;
            unint64_t v54 = v967;
            do
              v54[v53++] = 0;
            while (v53 < SDWORD1(v962));
          }
          if (v968 != v969) {
            j__free(v968);
          }
          goto LABEL_86;
        }
LABEL_77:
        sub_100320FB4((uint64_t)&v977, (unsigned int *)&v962, a3);
        goto LABEL_78;
      }
      if (v14)
      {
        v988[0] = 0uLL;
        uint64_t v50 = sub_1002D19D8(v988, 10);
        *(_WORD *)(v50 + 8) = 12320;
        *(void *)uint64_t v50 = *(void *)"depth == 0";
        sub_1002D2278(-215, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1670);
      }
      uint64_t v51 = v982->i32[1];
      if ((int)v51 >= v982->i32[0]) {
        int v52 = v982->i32[0];
      }
      else {
        int v52 = v982->i32[1];
      }
      if (v52 <= 7) {
        goto LABEL_77;
      }
      uint64_t v820 = v978;
      int v729 = v969[0];
      uint64_t v730 = v982->i32[0];
      BOOL v111 = a3 != 62 && a3 != 64;
      BOOL v112 = (a3 & 0xFFFFFFFE) != 62;
      *(void *)&v988[0] = &v988[1];
      *((void *)&v988[0] + 1) = 147 * (int)v51;
      if ((147 * v51) >= 0x209) {
        operator new[]();
      }
      char v782 = v111;
      int v113 = 3 * v51;
      int v114 = 5 * v51;
      uint64_t v115 = (v51 - 3);
      uint64_t v116 = 2 * v115;
      unint64_t v117 = (char *)&v988[1] + 2 * v51;
      uint64_t v854 = 2 * v51;
      unint64_t v118 = v117 + 2;
      v770 = v117 + 4;
      unint64_t v119 = (unint64_t)&v117[2 * v115 + 4];
      uint64_t v853 = 4 * v51;
      v819 = (char *)&v988[1] + (v853 | 2);
      v818 = (char *)&v988[1] + 2 * v115 + v853 + 4;
      uint64_t v949 = 6 * v51;
      v934 = (char *)&v988[1] + v949 + 2;
      v769 = (char *)&v988[1] + v949 + 4;
      int8x16_t v120 = &v769[2 * v115];
      uint64_t v121 = 8 * v51;
      __n128 v122 = (char *)&v988[1] + (v121 | 2);
      uint64_t v948 = v121;
      v957 = (char *)&v988[1] + v121;
      v768 = (char *)&v988[1] + v121 + 4;
      uint64_t v123 = 10 * v51;
      BOOL v124 = v117 + 2 >= v818 || (unint64_t)&v988[1] + (v853 | 2) >= v119;
      char v125 = !v124;
      char v813 = v125;
      BOOL v127 = v118 < v120 && (unint64_t)&v988[1] + v949 + 2 < v119;
      uint64_t v128 = &v768[v116];
      BOOL v130 = v118 < &v768[v116] && (unint64_t)v122 < v119;
      BOOL v131 = v127 || v130;
      uint64_t v947 = 2 * v114;
      unint64_t v132 = (char *)&v988[1] + v123 + 2;
      v766 = (char *)&v988[1] + v123 + 4;
      int32x4_t v133 = &v766[v116];
      BOOL v135 = v118 < &v766[v116] && (unint64_t)v132 < v119;
      BOOL v136 = v131 || v135;
      uint64_t v137 = v116 + 4;
      uint64_t v138 = 12 * v51;
      float32x4_t v139 = (char *)&v988[1] + (v138 | 2);
      uint64_t v946 = v138;
      unint64_t v140 = (char *)&v988[1] + v138;
      float32x4_t v141 = &v140[v116 + 4];
      unint64_t v817 = (unint64_t)v118;
      unint64_t v816 = v119;
      BOOL v143 = v118 < v141 && (unint64_t)v139 < v119;
      BOOL v810 = v136 || v143;
      LODWORD(v781) = 2 * v112;
      uint64_t v144 = ~LODWORD(v984[0]);
      uint64_t v145 = ((v984[0] << 32) - 0x100000000) >> 32;
      uint64_t v146 = -LODWORD(v984[0]);
      uint64_t v147 = ((uint64_t)&_mh_execute_header - (v984[0] << 32)) >> 32;
      uint64_t v148 = ((uint64_t)&_mh_execute_header + (v984[0] << 32)) >> 32;
      int v953 = v114 - 1;
      int v950 = v114 + 1;
      int v149 = 2 * LODWORD(v984[0]);
      uint64_t v933 = SLODWORD(v984[0]);
      uint64_t v150 = (int)v51 - 2;
      uint64_t v765 = v113 - 9;
      uint64_t v764 = 3 * ((int)v51 - 2);
      uint64_t v928 = 4 * v51 + v150;
      uint64_t v927 = 4 * v51 - 1;
      uint64_t v926 = 5 * v51 + v150;
      uint64_t v925 = 5 * v51 - 1;
      uint64_t v924 = 3 * v51 + v150;
      uint64_t v923 = 3 * v51 - 1;
      uint64_t v922 = 6 * v51 + v150;
      uint64_t v921 = 6 * v51 - 1;
      v809 = (char *)&v988[1] + v137;
      uint64_t v151 = v144 + 2 * LODWORD(v984[0]);
      uint64_t v776 = v151 + 1;
      uint64_t v152 = (v51 - 3);
      uint64_t v153 = v145 + 2 * LODWORD(v984[0]);
      uint64_t v761 = v153 + v115 + 2;
      uint64_t v762 = v151 + v115 + 2;
      uint64_t v154 = v146 + 2 * LODWORD(v984[0]);
      uint64_t v775 = v154 + 1;
      uint64_t v760 = v154 + v115 + 2;
      uint64_t v155 = v147 + 2 * LODWORD(v984[0]);
      uint64_t v759 = v155 + v115 + 2;
      uint64_t v774 = v155 + 1;
      uint64_t v156 = 2 * SLODWORD(v984[0]);
      uint64_t v940 = v155 + v156 + v978;
      uint64_t v773 = v153 + 1;
      uint64_t v955 = v153 + v156 + v978;
      uint64_t v157 = v148 + 2 * LODWORD(v984[0]);
      uint64_t v158 = v157 + v156 + v978;
      uint64_t v159 = v157 + 1;
      uint64_t v160 = v157 + v152 + 2;
      uint64_t v161 = 2 * LODWORD(v984[0]) + v152;
      uint64_t v162 = v152;
      uint64_t v756 = v161 + 2;
      uint64_t v757 = v160;
      uint64_t v754 = v161 + 3;
      uint64_t v755 = v161 + 1;
      BOOL v164 = v819 < v120 && v934 < v818;
      BOOL v808 = v164;
      BOOL v166 = v819 < v128 && v122 < v818;
      BOOL v807 = v166;
      BOOL v168 = v819 < v133 && v132 < v818;
      BOOL v806 = v168;
      BOOL v170 = v819 < v141 && v139 < v818;
      BOOL v805 = v170;
      BOOL v172 = v934 < v128 && v122 < v120;
      BOOL v804 = v172;
      BOOL v174 = v934 < v133 && v132 < v120;
      BOOL v803 = v174;
      v815 = v120;
      BOOL v176 = v934 < v141 && v139 < v120;
      BOOL v802 = v176;
      BOOL v178 = v122 < v133 && v132 < v128;
      BOOL v801 = v178;
      v932 = v122;
      v814 = v128;
      BOOL v180 = v122 < v141 && v139 < v128;
      BOOL v800 = v180;
      v931 = v132;
      v811 = v141;
      v812 = v133;
      v930 = v139;
      BOOL v181 = v132 >= v141 || v139 >= v133;
      uint64_t v871 = v148 + 1;
      uint64_t v870 = v147 + 1;
      uint64_t v869 = v146 + 1;
      uint64_t v868 = v145 + 1;
      v753 = (char *)&v988[1] + 2 * v113 + 6;
      int v920 = 49 * v51;
      int v752 = 49 * v51;
      v750 = (char *)&v988[1] + 12 * (int)v51 + 2;
      v751 = (char *)&v988[1] + 4 * (int)v51 + 2;
      v748 = (char *)&v988[1] + 2 * v950 + 4;
      v749 = v140 + 6;
      uint64_t v728 = (3 * v51);
      v746 = (char *)&v988[1] + 2 * v113 + 2;
      v747 = (char *)&v988[1] + 8 * (int)v51 + 2;
      int v867 = v51 - 1;
      v744 = (char *)&v988[1] + 2 * (int)v51 + 2;
      v745 = (char *)&v988[1] + 2 * (int)v51 + 6;
      uint64_t v919 = v150 + v51;
      uint64_t v918 = v51 - 1;
      uint64_t v182 = SLODWORD(v984[0]);
      v741 = v957 + 6;
      v742 = (char *)&v988[1] + 2 * v953 + 4;
      uint64_t v780 = v149 + SLODWORD(v984[0]) + (void)v978 + 2;
      uint64_t v785 = v963 + 2 * SLODWORD(v969[0]) + 7;
      uint64_t v183 = v156 + v149 + -2 * LODWORD(v984[0]) + v978 + 3;
      uint64_t v860 = v156 + v149 + (int)(v149 ^ 0xFFFFFFFE) + v978 + 3;
      uint64_t v945 = v156 + v149 + SLODWORD(v984[0]) + (void)v978 + 2;
      unsigned int v184 = 2;
      uint64_t v865 = v156 + 2 * v149 + v978 + 3;
      uint64_t v864 = v156 + v149 + v149 - 2 + v978 + 3;
      uint64_t v859 = v156 + v149 + (((v984[0] << 32) - 0x200000000) >> 32) + v978 + 2;
      uint64_t v858 = v156 + v149 + ((uint64_t)(0xFFFFFFFE00000000 - (v984[0] << 32)) >> 32) + v978 + 2;
      uint64_t v797 = v156 + v149 + v149 + 2 + v978 + 2;
      uint64_t v796 = v978 + v156;
      uint64_t v857 = v156 + v149 + (((v984[0] << 32) + 0x200000000) >> 32) + v978 + 2;
      uint64_t v185 = 4 * v51;
      uint64_t v856 = v156 + v149 + ((0x200000000 - (v984[0] << 32)) >> 32) + v978 + 2;
      uint64_t v866 = v144 + 1;
      uint64_t v186 = v978 + v156 + v149;
      uint64_t v795 = v156 + v149 + 2 - v149 + v978 + 2;
      uint64_t v952 = v940 + 2;
      uint64_t v944 = v955 + 2;
      uint64_t v863 = v156 + v149 + v144 + v978 + 2;
      uint64_t v187 = 0;
      unsigned int v188 = 0;
      uint64_t v862 = v158 + 2;
      uint64_t v941 = v978 + v149;
      uint64_t v772 = (v730 - 4);
      uint64_t v929 = (int)v51 - 2;
      uint64_t v917 = v854 + v150;
      uint64_t v763 = v149;
      uint64_t v739 = v149 + 2;
      unsigned int v951 = v51 - 3;
      uint64_t v189 = v162 + 1;
      char v190 = !v181;
      char v799 = v190;
      int v738 = v189 & 0xFFFFFFF0 | 1;
      uint64_t v789 = v189 & 0x1FFFFFFF0;
      uint64_t v737 = 2 * (v189 & 0x1FFFFFFF0);
      uint64_t v798 = v162 + 1;
      uint64_t v191 = v189 & 0x1FFFFFFF8;
      uint64_t v787 = 2 * v191;
      uint64_t v788 = v191;
      int v786 = v191 | 1;
      uint64_t v758 = v159;
      uint64_t v736 = v978 + v159;
      uint64_t v740 = v149 | 1;
      uint64_t v734 = v978 + v740;
      uint64_t v735 = v978 + v774;
      uint64_t v733 = v978 + v775;
      uint64_t v732 = v978 + v773;
      uint64_t v731 = v776 + v978;
      unsigned int v192 = 1;
      uint64_t v193 = 3;
      uint64_t v194 = 2;
      uint64_t v771 = v963;
      uint64_t v767 = SLODWORD(v969[0]);
      int v743 = v51 - 4;
LABEL_298:
      uint64_t v943 = v186;
      uint64_t v794 = v183;
      uint64_t v201 = 0;
      unsigned int v779 = v184;
      uint64_t v202 = 2 * (int)(v752 * (v184 % 3));
      v852 = &v753[v202];
      v851 = &v769[v202];
      v850 = &v751[v202];
      v849 = (char *)&v988[1] + v853 + v202 + 4;
      v793 = &v750[v202];
      v792 = &v749[v202];
      v848 = &v748[v202];
      v847 = &v747[v202];
      v939 = (char *)&v988[1] + v202;
      unsigned int v778 = v192;
      uint64_t v203 = 2 * (int)(v752 * (v192 % 3));
      v846 = &v753[v203];
      v845 = &v746[v203];
      v844 = &v769[v203];
      v843 = &v751[v203];
      v855 = (char *)&v988[1] + v203;
      v842 = &v766[v203];
      v841 = &v768[v203];
      v938 = &v745[v203];
      v937 = &v770[v203];
      v936 = &v744[v203];
      unsigned int v784 = v188;
      uint64_t v204 = 2 * (int)(v752 * (v188 % 3));
      v840 = &v746[v204];
      v839 = &v769[v204];
      v935 = (char *)&v988[1] + v204;
      v791 = &v749[v204];
      v790 = &v750[v204];
      v838 = &v742[v204];
      v837 = &v741[v204];
      if (v194 == 2) {
        uint64_t v205 = -1;
      }
      else {
        uint64_t v205 = 1;
      }
      uint64_t v783 = v187;
      uint64_t v206 = v187 + v205;
      uint64_t v207 = v182 * (v205 + v194);
      uint64_t v208 = v182 * (v206 + 3);
      uint64_t v836 = v740 + v208;
      uint64_t v835 = v756 + v208;
      uint64_t v777 = v193;
      uint64_t v209 = v734 + v182 * (v205 + v193);
      uint64_t v834 = v776 + v207;
      uint64_t v833 = v762 + v207;
      uint64_t v832 = v773 + v207;
      uint64_t v831 = v761 + v207;
      uint64_t v830 = v775 + v207;
      uint64_t v829 = v760 + v207;
      uint64_t v828 = v774 + v207;
      uint64_t v827 = v759 + v207;
      uint64_t v826 = v758 + v207;
      uint64_t v825 = v757 + v207;
      uint64_t v824 = v207 + v763;
      uint64_t v823 = v755 + v207;
      uint64_t v822 = v739 + v207;
      uint64_t v821 = v754 + v207;
      uint64_t v210 = v941 + v207;
      uint64_t v211 = v736 + v207;
      uint64_t v212 = v735 + v207;
      uint64_t v213 = v733 + v207;
      uint64_t v214 = v732 + v207;
      uint64_t v215 = v731 + v207;
      uint64_t v216 = v854;
      uint64_t v942 = v194;
      while (1)
      {
        uint64_t v958 = v211;
        uint64_t v959 = v210;
        uint64_t v960 = v209;
        uint64_t v954 = v205;
        int v217 = ((int)v205 + (int)v194 - 1) % 3 * v920;
        float32x4_t v218 = (int16x8_t *)((char *)&v988[1] + 2 * v217 + 2);
        v218->i16[v929] = 0;
        v218[-1].i16[7] = 0;
        v218->i16[v919] = 0;
        v218->i16[v918] = 0;
        v218->i16[v917] = 0;
        v218->i16[v854 - 1] = 0;
        v218->i16[v924] = 0;
        v218->i16[v923] = 0;
        v218->i16[v928] = 0;
        v218->i16[v927] = 0;
        v218->i16[v926] = 0;
        v218->i16[v925] = 0;
        v218->i16[v922] = 0;
        v218->i16[v921] = 0;
        uint64_t v219 = v941 + (v205 + v194) * v182;
        uint64_t v956 = v201;
        if (v951 < 7)
        {
          int v220 = 1;
          goto LABEL_305;
        }
        uint64_t v891 = v215;
        uint64_t v896 = v214;
        uint64_t v899 = v213;
        uint64_t v910 = v212;
        uint64_t v248 = v217;
        uint64_t v249 = v182 * v201;
        unint64_t v882 = v820 + v821 + v182 * v201;
        unint64_t v881 = v820 + v822 + v182 * v201;
        unint64_t v250 = v820 + v823 + v182 * v201;
        unint64_t v878 = v820 + v824 + v182 * v201;
        unint64_t v251 = v820 + v825 + v182 * v201;
        unint64_t v252 = v820 + v826 + v182 * v201;
        unint64_t v253 = v820 + v827 + v182 * v201;
        unint64_t v254 = v820 + v828 + v182 * v201;
        unint64_t v255 = v820 + v835 + v182 * v201;
        unint64_t v256 = v820 + v836 + v182 * v201;
        unint64_t v257 = v820 + v829 + v182 * v201;
        unint64_t v258 = v820 + v830 + v249;
        unint64_t v259 = v820 + v831 + v249;
        unint64_t v260 = v820 + v832 + v249;
        unint64_t v261 = v820 + v833 + v249;
        unint64_t v262 = v820 + v834 + v249;
        uint64_t v861 = v248;
        uint64_t v263 = 2 * v248;
        v264 = &v809[2 * v248];
        unint64_t v265 = v816 + 2 * v248;
        v266 = &v818[2 * v248];
        unint64_t v267 = (unint64_t)&v815[2 * v248];
        unint64_t v268 = (unint64_t)&v814[2 * v248];
        unint64_t v269 = (unint64_t)&v812[2 * v248];
        unint64_t v270 = (unint64_t)&v811[2 * v248];
        BOOL v272 = (unint64_t)v218 < v265 && v817 < (unint64_t)v809;
        if (v218 < (int16x8_t *)v266 && v819 < v809) {
          BOOL v272 = 1;
        }
        if ((unint64_t)v218 < v267 && v934 < v809) {
          BOOL v272 = 1;
        }
        if ((unint64_t)v218 < v268 && v932 < v809) {
          BOOL v272 = 1;
        }
        if ((unint64_t)v218 < v269 && v931 < v809) {
          BOOL v272 = 1;
        }
        if ((unint64_t)v218 < v270 && v930 < v809) {
          BOOL v272 = 1;
        }
        char v279 = (unint64_t)v218 < v261 && v262 < (unint64_t)v264 || v272;
        char v916 = v279;
        BOOL v281 = (unint64_t)v218 < v259 && v260 < (unint64_t)v264;
        BOOL v915 = v281;
        BOOL v283 = (unint64_t)v218 < v257 && v258 < (unint64_t)v264;
        BOOL v914 = v283;
        BOOL v285 = (unint64_t)v218 < v255 && v256 < (unint64_t)v264;
        BOOL v913 = v285;
        unint64_t v286 = v254;
        BOOL v288 = (unint64_t)v218 < v253 && v254 < (unint64_t)v264;
        BOOL v912 = v288;
        BOOL v290 = (unint64_t)v218 < v251 && v252 < (unint64_t)v264;
        BOOL v911 = v290;
        BOOL v292 = (unint64_t)v218 < v250 && v878 < (unint64_t)v264;
        BOOL v293 = (unint64_t)v218 >= v882 || v881 >= (unint64_t)v264;
        unint64_t v294 = v817 + v263;
        char v295 = !v293;
        char v909 = v295;
        BOOL v297 = v294 < v261 && v262 < v265;
        BOOL v908 = v297;
        BOOL v299 = v294 < v259 && v260 < v265;
        BOOL v907 = v299;
        BOOL v301 = v294 < v257 && v258 < v265;
        BOOL v906 = v301;
        BOOL v303 = v294 < v255 && v256 < v265;
        BOOL v905 = v303;
        BOOL v305 = v294 < v253 && v254 < v265;
        BOOL v904 = v305;
        BOOL v307 = v294 < v251 && v252 < v265;
        BOOL v903 = v307;
        unint64_t v308 = v250;
        BOOL v310 = v294 < v250 && v878 < v265;
        BOOL v311 = v294 >= v882 || v881 >= v265;
        v312 = &v819[v263];
        char v313 = !v311;
        char v902 = v313;
        BOOL v315 = (unint64_t)v312 < v261 && v262 < (unint64_t)v266;
        BOOL v901 = v315;
        BOOL v317 = (unint64_t)v312 < v259 && v260 < (unint64_t)v266;
        BOOL v900 = v317;
        BOOL v319 = (unint64_t)v312 < v257 && v258 < (unint64_t)v266;
        BOOL v898 = v319;
        BOOL v321 = (unint64_t)v312 < v255 && v256 < (unint64_t)v266;
        BOOL v897 = v321;
        BOOL v323 = (unint64_t)v312 < v253 && v254 < (unint64_t)v266;
        BOOL v895 = v323;
        unint64_t v324 = v251;
        unint64_t v325 = v252;
        BOOL v327 = (unint64_t)v312 < v251 && v252 < (unint64_t)v266;
        BOOL v329 = (unint64_t)v312 < v250 && v878 < (unint64_t)v266;
        BOOL v330 = (unint64_t)v312 >= v882 || v881 >= (unint64_t)v266;
        v331 = &v934[v263];
        char v332 = !v330;
        char v894 = v332;
        BOOL v334 = (unint64_t)v331 < v261 && v262 < v267;
        BOOL v893 = v334;
        BOOL v336 = (unint64_t)v331 < v259 && v260 < v267;
        BOOL v892 = v336;
        BOOL v338 = (unint64_t)v331 < v257 && v258 < v267;
        BOOL v340 = (unint64_t)v331 < v255 && v256 < v267;
        BOOL v342 = (unint64_t)v331 < v253 && v254 < v267;
        BOOL v890 = v342;
        BOOL v344 = (unint64_t)v331 < v324 && v325 < v267;
        BOOL v889 = v344;
        BOOL v346 = (unint64_t)v331 < v308 && v878 < v267;
        BOOL v888 = v346;
        BOOL v347 = (unint64_t)v331 >= v882 || v881 >= v267;
        v348 = &v932[v263];
        char v349 = !v347;
        char v887 = v349;
        BOOL v351 = (unint64_t)v348 < v261 && v262 < v268;
        BOOL v886 = v351;
        BOOL v353 = (unint64_t)v348 < v259 && v260 < v268;
        BOOL v885 = v353;
        BOOL v355 = (unint64_t)v348 < v257 && v258 < v268;
        BOOL v884 = v355;
        BOOL v357 = (unint64_t)v348 < v255 && v256 < v268;
        BOOL v883 = v357;
        unint64_t v358 = v253;
        BOOL v124 = (unint64_t)v348 >= v253;
        unint64_t v359 = v286;
        char v361 = !v124 && v286 < v268;
        char v880 = v361;
        unint64_t v362 = v324;
        BOOL v364 = (unint64_t)v348 < v324 && v325 < v268;
        BOOL v879 = v364;
        BOOL v366 = (unint64_t)v348 < v308 && v878 < v268;
        BOOL v367 = (unint64_t)v348 >= v882 || v881 >= v268;
        v368 = &v931[v263];
        char v369 = !v367;
        char v877 = v369;
        BOOL v371 = (unint64_t)v368 < v261 && v262 < v269;
        BOOL v876 = v371;
        BOOL v373 = (unint64_t)v368 < v259 && v260 < v269;
        BOOL v875 = v373;
        BOOL v375 = (unint64_t)v368 < v257 && v258 < v269;
        BOOL v874 = v375;
        BOOL v377 = (unint64_t)v368 < v255 && v256 < v269;
        BOOL v873 = v377;
        BOOL v379 = (unint64_t)v368 < v358 && v359 < v269;
        BOOL v872 = v379;
        BOOL v381 = (unint64_t)v368 < v362 && v325 < v269;
        BOOL v383 = (unint64_t)v368 < v308 && v878 < v269;
        BOOL v384 = (unint64_t)v368 >= v882 || v881 >= v269;
        v385 = &v930[v263];
        char v386 = !v384;
        BOOL v388 = (unint64_t)v385 < v261 && v262 < v270;
        BOOL v390 = (unint64_t)v385 < v259 && v260 < v270;
        BOOL v392 = (unint64_t)v385 < v257 && v258 < v270;
        BOOL v394 = (unint64_t)v385 < v255 && v256 < v270;
        BOOL v396 = (unint64_t)v385 < v358 && v359 < v270;
        BOOL v398 = (unint64_t)v385 < v362 && v325 < v270;
        BOOL v400 = (unint64_t)v385 < v308 && v878 < v270;
        BOOL v402 = (unint64_t)v385 < v882 && v881 < v270;
        int v220 = 1;
        if (((v916 | (v915 || v914 || v913 || v912 || v911 || v292) | v909 | v813 | (v810 || v908 || v907 || v906 || v905 || v904 || v903 || v310) | v902 | v808 | v807 | v806 | v805 | v901 | v900 | v898 | v897 | (v895 || v327 || v329) | v894 | v804 | v803 | v802 | v893 | v892 | v338 | (v340 || v890 || v889 || v888) | v887 | v801 | v800 | v886 | v885 | v884 | v883) | (v880 | v879 | v366 | v877 | v799)))
        {
          uint64_t v216 = v854;
          uint64_t v185 = v853;
          uint64_t v212 = v910;
          uint64_t v213 = v899;
          uint64_t v214 = v896;
          uint64_t v215 = v891;
LABEL_305:
          uint64_t v221 = 0;
          float32x2_t v222 = &v218->i8[v949];
          unint64_t v223 = &v218->i8[v185];
          int v224 = v867 - v220;
          uint64_t v225 = v219 + v871;
          uint64_t v226 = v219 + v870;
          uint64_t v227 = v219 + v933 + 1;
          uint64_t v228 = v219 + v869;
          uint64_t v229 = v219 + v868;
          uint64_t v230 = v219 + v866;
          do
          {
            int v231 = (unsigned __int8 *)(v219 + v221);
            int v232 = *(unsigned __int8 *)(v230 + v221) - *(unsigned __int8 *)(v229 + v221);
            if (v232 < 0) {
              LOWORD(v232) = *(unsigned __int8 *)(v229 + v221) - *(unsigned __int8 *)(v230 + v221);
            }
            int v233 = *(unsigned __int8 *)(v228 + v221) - *(unsigned __int8 *)(v227 + v221);
            if (v233 < 0) {
              LOWORD(v233) = *(unsigned __int8 *)(v227 + v221) - *(unsigned __int8 *)(v228 + v221);
            }
            __int16 v234 = v232 + 2 * v233;
            int v235 = *(unsigned __int8 *)(v226 + v221) - *(unsigned __int8 *)(v225 + v221);
            if (v235 < 0) {
              LOWORD(v235) = *(unsigned __int8 *)(v225 + v221) - *(unsigned __int8 *)(v226 + v221);
            }
            v218->i16[v221] = v234 + v235;
            int v236 = *(unsigned __int8 *)(v230 + v221) - *(unsigned __int8 *)(v226 + v221);
            if (v236 < 0) {
              LOWORD(v236) = *(unsigned __int8 *)(v226 + v221) - *(unsigned __int8 *)(v230 + v221);
            }
            int v237 = *v231 - v231[2];
            if (v237 < 0) {
              LOWORD(v237) = v231[2] - *v231;
            }
            __int16 v238 = v236 + 2 * v237;
            int v239 = *(unsigned __int8 *)(v229 + v221) - *(unsigned __int8 *)(v225 + v221);
            if (v239 < 0) {
              LOWORD(v239) = *(unsigned __int8 *)(v225 + v221) - *(unsigned __int8 *)(v229 + v221);
            }
            *(__int16 *)((char *)&v218->i16[v221] + v216) = v238 + v239;
            int v240 = *(unsigned __int8 *)(v226 + v221) - *(unsigned __int8 *)(v229 + v221);
            if (v240 < 0) {
              LOWORD(v240) = *(unsigned __int8 *)(v229 + v221) - *(unsigned __int8 *)(v226 + v221);
            }
            *(_WORD *)&v223[2 * v221] = 2 * v240;
            int v241 = *(unsigned __int8 *)(v230 + v221) - *(unsigned __int8 *)(v225 + v221);
            if (v241 < 0) {
              LOWORD(v241) = *(unsigned __int8 *)(v225 + v221) - *(unsigned __int8 *)(v230 + v221);
            }
            *(_WORD *)&v222[2 * v221] = 2 * v241;
            int v242 = *(unsigned __int8 *)(v228 + v221) - *v231;
            if (v242 < 0) {
              LOWORD(v242) = *v231 - *(unsigned __int8 *)(v228 + v221);
            }
            __int16 v243 = v242 + *(_WORD *)&v223[2 * v221];
            int v244 = *(unsigned __int8 *)(v227 + v221) - v231[2];
            if (v244 < 0) {
              LOWORD(v244) = v231[2] - *(unsigned __int8 *)(v227 + v221);
            }
            *(__int16 *)((char *)&v218->i16[v221] + v948) = v243 + v244;
            int v245 = *(unsigned __int8 *)(v228 + v221) - v231[2];
            if (v245 < 0) {
              LOWORD(v245) = v231[2] - *(unsigned __int8 *)(v228 + v221);
            }
            __int16 v246 = v245 + *(_WORD *)&v222[2 * v221];
            int v247 = *(unsigned __int8 *)(v227 + v221) - *v231;
            if (v247 < 0) {
              LOWORD(v247) = *v231 - *(unsigned __int8 *)(v227 + v221);
            }
            v218->i16[v221 + (unint64_t)v947 / 2] = v246 + v247;
            *(__int16 *)((char *)&v218->i16[v221] + v946) = (*v231
                                                           + *(unsigned __int8 *)(v228 + v221)
                                                           + v231[2]
                                                           + *(unsigned __int8 *)(v227 + v221)) >> 1;
            ++v221;
          }
          while (v224 != v221);
          goto LABEL_302;
        }
        uint64_t v216 = v854;
        uint64_t v185 = v853;
        uint64_t v212 = v910;
        uint64_t v213 = v899;
        uint64_t v214 = v896;
        uint64_t v215 = v891;
        if (v876
          || v875
          || v874
          || v873
          || v872
          || v381
          || v383
          || (v386 & 1) != 0
          || v388
          || v390
          || v392
          || v394
          || v396
          || v398
          || v400
          || v402)
        {
          goto LABEL_305;
        }
        if (v951 >= 0xF)
        {
          uint64_t v439 = 0;
          v440 = v218;
          do
          {
            uint8x16_t v441 = *(uint8x16_t *)(v891 + v439);
            uint8x16_t v442 = *(uint8x16_t *)(v896 + v439);
            uint8x16_t v443 = vabdq_u8(v441, v442);
            uint16x8_t v444 = vmovl_high_u8(v443);
            uint8x16_t v445 = *(uint8x16_t *)(v899 + v439);
            uint8x16_t v446 = *(uint8x16_t *)(v960 + v439);
            uint16x8_t v447 = vmovl_u8(*(uint8x8_t *)v443.i8);
            uint8x16_t v448 = vabdq_u8(v445, v446);
            int8x16_t v449 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v448.i8);
            int16x4_t v450 = (int16x4_t)vextq_s8(v449, v449, 8uLL).u64[0];
            int8x16_t v451 = (int8x16_t)vmovl_high_u8(v448);
            int16x4_t v452 = (int16x4_t)vextq_s8(v451, v451, 8uLL).u64[0];
            uint32x4_t v453 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v450, v450)), v447);
            uint32x4_t v454 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v449.i8, *(int16x4_t *)v449.i8), *(uint16x4_t *)v447.i8);
            uint8x16_t v455 = *(uint8x16_t *)(v910 + v439);
            uint8x16_t v456 = *(uint8x16_t *)(v958 + v439);
            uint32x4_t v457 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v452, v452)), v444);
            uint32x4_t v458 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v451.i8, *(int16x4_t *)v451.i8), *(uint16x4_t *)v444.i8);
            uint8x16_t v459 = vabdq_u8(v455, v456);
            uint16x8_t v460 = vmovl_u8(*(uint8x8_t *)v459.i8);
            uint16x8_t v461 = vmovl_high_u8(v459);
            int16x8_t *v440 = vuzp1q_s16((int16x8_t)vaddw_u16(v454, *(uint16x4_t *)v460.i8), (int16x8_t)vaddw_high_u16(v453, v460));
            v440[1] = vuzp1q_s16((int16x8_t)vaddw_u16(v458, *(uint16x4_t *)v461.i8), (int16x8_t)vaddw_high_u16(v457, v461));
            uint8x16_t v462 = vabdq_u8(v441, v455);
            uint16x8_t v463 = vmovl_high_u8(v462);
            uint8x16_t v464 = *(uint8x16_t *)(v959 + v439);
            uint8x16_t v465 = *(uint8x16_t *)(v959 + v439 + 2);
            uint8x16_t v466 = vabdq_u8(v464, v465);
            uint16x8_t v467 = vmovl_u8(*(uint8x8_t *)v462.i8);
            int8x16_t v468 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v466.i8);
            int16x4_t v469 = (int16x4_t)vextq_s8(v468, v468, 8uLL).u64[0];
            int8x16_t v470 = (int8x16_t)vmovl_high_u8(v466);
            int16x4_t v471 = (int16x4_t)vextq_s8(v470, v470, 8uLL).u64[0];
            uint32x4_t v472 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v468.i8, *(int16x4_t *)v468.i8), *(uint16x4_t *)v467.i8);
            uint32x4_t v473 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v470.i8, *(int16x4_t *)v470.i8), *(uint16x4_t *)v463.i8);
            uint32x4_t v474 = vmovl_u16((uint16x4_t)vadd_s16(v469, v469));
            uint8x16_t v475 = vabdq_u8(v442, v456);
            uint16x8_t v476 = vmovl_u8(*(uint8x8_t *)v475.i8);
            uint16x8_t v477 = vmovl_high_u8(v475);
            int16x8_t v478 = (int16x8_t)vaddw_u16(v473, *(uint16x4_t *)v477.i8);
            uint8x16_t v479 = vabdq_u8(v455, v442);
            int16x8_t v480 = (int16x8_t)vaddw_u16(v472, *(uint16x4_t *)v476.i8);
            uint16x8_t v481 = vshll_n_u8(*(uint8x8_t *)v479.i8, 1uLL);
            uint16x8_t v482 = vshll_high_n_u8(v479, 1uLL);
            uint8x16_t v483 = vabdq_u8(v441, v456);
            uint16x8_t v484 = vshll_high_n_u8(v483, 1uLL);
            uint8x16_t v485 = vabdq_u8(v445, v464);
            uint32x4_t v486 = vaddw_high_u16(v474, v467);
            uint16x8_t v487 = vmovl_high_u8(v485);
            uint16x8_t v488 = vmovl_u8(*(uint8x8_t *)v485.i8);
            uint8x16_t v489 = vabdq_u8(v446, v465);
            uint32x4_t v490 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v471, v471)), v463);
            uint16x8_t v491 = vmovl_high_u8(v489);
            int16x8_t v492 = (int16x8_t)vaddw_high_u16(v490, v477);
            uint16x8_t v493 = vmovl_u8(*(uint8x8_t *)v489.i8);
            int16x8_t v494 = vuzp1q_s16((int16x8_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v487.i8, *(uint16x4_t *)v482.i8), *(uint16x4_t *)v491.i8), (int16x8_t)vaddw_high_u16(vaddl_high_u16(v487, v482), v491));
            int16x8_t v495 = (int16x8_t)vaddw_high_u16(v486, v476);
            uint8x16_t v496 = vabdq_u8(v445, v465);
            uint16x8_t v497 = vmovl_high_u8(v496);
            uint8x16_t v498 = vabdq_u8(v446, v464);
            int16x8_t v499 = vuzp1q_s16(v480, v495);
            uint16x8_t v500 = vmovl_high_u8(v498);
            v501 = (int16x8_t *)((char *)v440 + v854);
            v502 = (uint16x8_t *)&v440->i8[v853];
            int16x8_t v503 = vuzp1q_s16(v478, v492);
            uint16x8_t v504 = vshll_n_u8(*(uint8x8_t *)v483.i8, 1uLL);
            v505 = (uint16x8_t *)&v440->i8[v949];
            v506 = (int16x8_t *)((char *)v440 + v948);
            uint16x8_t v507 = vmovl_u8(*(uint8x8_t *)v496.i8);
            int16x8_t *v501 = v499;
            v501[1] = v503;
            uint16x8_t v508 = vmovl_u8(*(uint8x8_t *)v498.i8);
            uint16x8_t *v502 = v481;
            v502[1] = v482;
            v509 = (int16x8_t *)((char *)v440 + v947);
            uint16x8_t *v505 = v504;
            v505[1] = v484;
            int16x8_t *v506 = vuzp1q_s16((int16x8_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v488.i8, *(uint16x4_t *)v481.i8), *(uint16x4_t *)v493.i8), (int16x8_t)vaddw_high_u16(vaddl_high_u16(v488, v481), v493));
            v506[1] = v494;
            int16x8_t *v509 = vuzp1q_s16((int16x8_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v507.i8, *(uint16x4_t *)v504.i8), *(uint16x4_t *)v508.i8), (int16x8_t)vaddw_high_u16(vaddl_high_u16(v507, v504), v508));
            v509[1] = vuzp1q_s16((int16x8_t)vaddw_u16(vaddl_u16(*(uint16x4_t *)v497.i8, *(uint16x4_t *)v484.i8), *(uint16x4_t *)v500.i8), (int16x8_t)vaddw_high_u16(vaddl_high_u16(v497, v484), v500));
            v510 = (uint16x8_t *)&v440->i8[v946];
            uint16x8_t *v510 = vshrq_n_u16(vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v464.i8, *(uint8x8_t *)v445.i8), *(uint8x8_t *)v465.i8), *(uint8x8_t *)v446.i8), 1uLL);
            v510[1] = vshrq_n_u16(vaddw_high_u8(vaddw_high_u8(vaddl_high_u8(v464, v445), v465), v446), 1uLL);
            v439 += 16;
            v440 += 2;
          }
          while (v789 != v439);
          if (v798 == v789) {
            goto LABEL_302;
          }
          uint64_t v403 = v789;
          uint64_t v404 = v949;
          uint64_t v405 = v948;
          uint64_t v406 = v947;
          uint64_t v407 = v946;
          uint64_t v408 = v960;
          uint64_t v409 = v959;
          uint64_t v410 = v958;
          if ((v798 & 8) == 0)
          {
            v219 += v789;
            float32x4_t v218 = (int16x8_t *)((char *)v218 + v737);
            int v220 = v738;
            goto LABEL_305;
          }
        }
        else
        {
          uint64_t v403 = 0;
          uint64_t v404 = v949;
          uint64_t v405 = v948;
          uint64_t v406 = v947;
          uint64_t v407 = v946;
          uint64_t v408 = v960;
          uint64_t v409 = v959;
          uint64_t v410 = v958;
        }
        float32x4_t v218 = (int16x8_t *)((char *)v218 + v787);
        v219 += v788;
        v411 = (int16x8_t *)((char *)&v988[1] + 2 * v403 + 2 * v861 + 2);
        do
        {
          uint8x8_t v412 = *(uint8x8_t *)(v891 + v403);
          uint8x8_t v413 = *(uint8x8_t *)(v896 + v403);
          uint16x8_t v414 = vabdl_u8(v412, v413);
          uint8x8_t v415 = *(uint8x8_t *)(v899 + v403);
          uint8x8_t v416 = *(uint8x8_t *)(v408 + v403);
          int8x16_t v417 = (int8x16_t)vabdl_u8(v415, v416);
          int16x4_t v418 = (int16x4_t)vextq_s8(v417, v417, 8uLL).u64[0];
          uint32x4_t v419 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v418, v418)), v414);
          uint8x8_t v420 = *(uint8x8_t *)(v910 + v403);
          uint32x4_t v421 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v417.i8, *(int16x4_t *)v417.i8), *(uint16x4_t *)v414.i8);
          v417.i64[0] = *(void *)(v410 + v403);
          uint16x8_t v422 = vabdl_u8(v420, *(uint8x8_t *)v417.i8);
          int16x8_t *v411 = vuzp1q_s16((int16x8_t)vaddw_u16(v421, *(uint16x4_t *)v422.i8), (int16x8_t)vaddw_high_u16(v419, v422));
          uint16x8_t v423 = vabdl_u8(v412, v420);
          v419.i64[0] = *(void *)(v409 + v403);
          v422.i64[0] = *(void *)(v409 + v403 + 2);
          int8x16_t v424 = (int8x16_t)vabdl_u8(*(uint8x8_t *)v419.i8, *(uint8x8_t *)v422.i8);
          int16x4_t v425 = (int16x4_t)vextq_s8(v424, v424, 8uLL).u64[0];
          uint32x4_t v426 = vaddw_high_u16(vmovl_u16((uint16x4_t)vadd_s16(v425, v425)), v423);
          uint32x4_t v427 = vaddl_u16((uint16x4_t)vadd_s16(*(int16x4_t *)v424.i8, *(int16x4_t *)v424.i8), *(uint16x4_t *)v423.i8);
          uint16x8_t v428 = vabdl_u8(v413, *(uint8x8_t *)v417.i8);
          *(int16x8_t *)((char *)v411 + v854) = vuzp1q_s16((int16x8_t)vaddw_u16(v427, *(uint16x4_t *)v428.i8), (int16x8_t)vaddw_high_u16(v426, v428));
          uint16x8_t v429 = vshll_n_u8(vabd_u8(v420, v413), 1uLL);
          *(uint16x8_t *)((char *)v411 + v853) = v429;
          uint16x8_t v430 = vshll_n_u8(vabd_u8(v412, *(uint8x8_t *)v417.i8), 1uLL);
          *(uint16x8_t *)((char *)v411 + v404) = v430;
          uint16x8_t v431 = vabdl_u8(v415, *(uint8x8_t *)v419.i8);
          uint32x4_t v432 = vaddl_u16(*(uint16x4_t *)v431.i8, *(uint16x4_t *)v429.i8);
          uint32x4_t v433 = vaddl_high_u16(v431, v429);
          uint16x8_t v434 = vabdl_u8(v416, *(uint8x8_t *)v422.i8);
          *(int16x8_t *)((char *)v411 + v405) = vuzp1q_s16((int16x8_t)vaddw_u16(v432, *(uint16x4_t *)v434.i8), (int16x8_t)vaddw_high_u16(v433, v434));
          uint16x8_t v435 = vabdl_u8(v415, *(uint8x8_t *)v422.i8);
          uint32x4_t v436 = vaddl_u16(*(uint16x4_t *)v435.i8, *(uint16x4_t *)v430.i8);
          uint32x4_t v437 = vaddl_high_u16(v435, v430);
          uint16x8_t v438 = vabdl_u8(v416, *(uint8x8_t *)v419.i8);
          *(int16x8_t *)((char *)v411 + v406) = vuzp1q_s16((int16x8_t)vaddw_u16(v436, *(uint16x4_t *)v438.i8), (int16x8_t)vaddw_high_u16(v437, v438));
          *(uint16x8_t *)((char *)v411 + v407) = vhaddq_u16(vaddw_u8(vaddl_u8(*(uint8x8_t *)v419.i8, v415), *(uint8x8_t *)v422.i8), vmovl_u8(v416));
          v403 += 8;
          ++v411;
        }
        while (v788 != v403);
        int v220 = v786;
        if (v798 != v788) {
          goto LABEL_305;
        }
LABEL_302:
        uint64_t v205 = v954 + 1;
        uint64_t v201 = v956 + 1;
        uint64_t v182 = v933;
        uint64_t v210 = v959 + v933;
        uint64_t v211 = v958 + v933;
        v212 += v933;
        uint64_t v209 = v960 + v933;
        v213 += v933;
        v214 += v933;
        v215 += v933;
        uint64_t v194 = v942;
        if (v954 == 1)
        {
          uint64_t v511 = 0;
          uint64_t v512 = v942 * v729;
          uint64_t v513 = v781;
          uint64_t v781 = v781 ^ 2;
          uint64_t v514 = v513 + 6;
          v515 = (unsigned char *)v785;
          uint64_t v516 = v853 + 4;
          char v517 = v782;
          uint64_t v518 = v771;
          uint64_t v519 = v794;
          uint64_t v520 = v943;
          v521 = v855;
          while (1)
          {
            uint64_t v525 = v520 + v511;
            int v531 = *(unsigned __int16 *)&v521[2 * v511 + 4];
            unsigned int v532 = v531 + *(unsigned __int16 *)&v935[2 * v511 + 4];
            unsigned int v533 = *(unsigned __int16 *)&v939[2 * v511 + 4] + v531;
            int v534 = *(unsigned __int16 *)&v937[2 * v511];
            unsigned int v535 = v534 + *(unsigned __int16 *)&v936[2 * v511];
            unsigned int v536 = *(unsigned __int16 *)&v938[2 * v511] + v534;
            if (v533 >= v532) {
              unsigned int v537 = v532;
            }
            else {
              unsigned int v537 = v533;
            }
            if (v535 < v537) {
              unsigned int v537 = v534 + *(unsigned __int16 *)&v936[2 * v511];
            }
            if (v536 >= v537) {
              unsigned int v538 = v537;
            }
            else {
              unsigned int v538 = *(unsigned __int16 *)&v938[2 * v511] + v534;
            }
            if (v532 <= v533) {
              unsigned int v539 = v533;
            }
            else {
              unsigned int v539 = v532;
            }
            if (v539 <= v535) {
              unsigned int v539 = v534 + *(unsigned __int16 *)&v936[2 * v511];
            }
            if (v539 <= v536) {
              unsigned int v540 = *(unsigned __int16 *)&v938[2 * v511] + v534;
            }
            else {
              unsigned int v540 = v539;
            }
            if ((v517 & 1) == 0)
            {
              int v554 = *(unsigned __int16 *)&v841[2 * v511];
              unsigned int v555 = v554 + *(unsigned __int16 *)&v837[2 * v511];
              unsigned int v556 = *(unsigned __int16 *)&v847[2 * v511] + v554;
              int v557 = *(unsigned __int16 *)&v842[2 * v511];
              unsigned int v558 = v557 + *(unsigned __int16 *)&v838[2 * v511];
              unsigned int v559 = *(unsigned __int16 *)&v848[2 * v511] + v557;
              if (v555 >= v538) {
                unsigned int v560 = v538;
              }
              else {
                unsigned int v560 = v555;
              }
              if (v556 < v560) {
                unsigned int v560 = v556;
              }
              if (v558 < v560) {
                unsigned int v560 = v557 + *(unsigned __int16 *)&v838[2 * v511];
              }
              if (v559 < v560) {
                unsigned int v560 = *(unsigned __int16 *)&v848[2 * v511] + v557;
              }
              if (v540 <= v555) {
                unsigned int v540 = v555;
              }
              if (v540 <= v556) {
                unsigned int v540 = v556;
              }
              if (v540 <= v558) {
                unsigned int v540 = v557 + *(unsigned __int16 *)&v838[2 * v511];
              }
              if (v540 <= v559) {
                unsigned int v540 = *(unsigned __int16 *)&v848[2 * v511] + v557;
              }
              if (v540 <= 1) {
                int v561 = 1;
              }
              else {
                int v561 = v540 >> 1;
              }
              unsigned int v562 = v561 + v560;
              LODWORD(v525) = *(unsigned __int8 *)(v525 + 2);
              if (v532 >= v562)
              {
                int v563 = 0;
                int v564 = 0;
                int v565 = 0;
                uint64_t v566 = 0;
                if (v533 >= v562) {
                  goto LABEL_811;
                }
              }
              else
              {
                int v563 = *(unsigned __int8 *)(v519 + v511 - 1) + v525;
                int v564 = 2 * *(unsigned __int8 *)(v780 + v511);
                int v565 = *(unsigned __int8 *)(v952 + v511) + *(unsigned __int8 *)(v863 + v511);
                uint64_t v566 = 1;
                if (v533 >= v562)
                {
LABEL_811:
                  uint64_t v520 = v943;
                  if (v535 < v562)
                  {
                    v563 += v525 + *(unsigned __int8 *)(v943 + v511);
                    v564 += 2 * *(unsigned __int8 *)(v943 + v511 + 1);
                    v565 += *(unsigned __int8 *)(v863 + v511) + *(unsigned __int8 *)(v944 + v511);
                    ++v566;
                    if (v536 < v562) {
                      goto LABEL_826;
                    }
LABEL_813:
                    if (v555 >= v562) {
                      goto LABEL_814;
                    }
LABEL_827:
                    v563 += v525 + *(unsigned __int8 *)(v795 + v511);
                    v564 += *(unsigned __int16 *)&v791[2 * v511];
                    v565 += 2 * *(unsigned __int8 *)(v952 + v511);
                    ++v566;
                    if (v556 < v562) {
                      goto LABEL_828;
                    }
LABEL_815:
                    if (v558 >= v562) {
                      goto LABEL_816;
                    }
LABEL_829:
                    v563 += v525 + *(unsigned __int8 *)(v796 + v511);
                    v564 += *(unsigned __int16 *)&v790[2 * v511];
                    v565 += 2 * *(unsigned __int8 *)(v952 + v511);
                    ++v566;
                    if (v559 < v562)
                    {
LABEL_817:
                      v563 += v525 + *(unsigned __int8 *)(v797 + v511);
                      v564 += *(unsigned __int16 *)&v792[2 * v511];
                      v565 += 2 * *(unsigned __int8 *)(v952 + v511);
                      ++v566;
                    }
                  }
                  else
                  {
                    if (v536 >= v562) {
                      goto LABEL_813;
                    }
LABEL_826:
                    v563 += v525 + *(unsigned __int8 *)(v943 + v511 + 4);
                    v564 += 2 * *(unsigned __int8 *)(v943 + v511 + 3);
                    v565 += *(unsigned __int8 *)(v952 + v511) + *(unsigned __int8 *)(v862 + v511);
                    ++v566;
                    if (v555 < v562) {
                      goto LABEL_827;
                    }
LABEL_814:
                    if (v556 >= v562) {
                      goto LABEL_815;
                    }
LABEL_828:
                    v563 += v525 + *(unsigned __int8 *)(v864 + v511 - 1);
                    v564 += *(unsigned __int16 *)&v793[2 * v511];
                    v565 += 2 * *(unsigned __int8 *)(v944 + v511);
                    ++v566;
                    if (v558 < v562) {
                      goto LABEL_829;
                    }
LABEL_816:
                    if (v559 < v562) {
                      goto LABEL_817;
                    }
                  }
                  float v567 = flt_100408638[v566];
                  float v568 = (float)(v565 - v563);
                  int v526 = v525 + (uint64_t)rintf(v567 * (float)(v564 - v563));
                  uint64_t v522 = (uint64_t)rintf(v567 * v568);
                  int v524 = v525;
                  goto LABEL_730;
                }
              }
              v563 += v525 + *(unsigned __int8 *)(v865 + v511 - 1);
              v564 += 2 * *(unsigned __int8 *)(v945 + v511);
              v565 += *(unsigned __int8 *)(v944 + v511) + *(unsigned __int8 *)(v862 + v511);
              ++v566;
              goto LABEL_811;
            }
            int v541 = *(unsigned __int16 *)&v521[v516];
            unsigned int v542 = *(unsigned __int16 *)&v935[v516 + 2]
                 + *(unsigned __int16 *)&v935[v516]
                 + v541
                 + *(unsigned __int16 *)&v521[v516 + 2];
            unsigned int v543 = *(unsigned __int16 *)&v843[2 * v511]
                 + v541
                 + *(unsigned __int16 *)&v849[2 * v511]
                 + *(unsigned __int16 *)&v850[2 * v511];
            int v544 = *(unsigned __int16 *)&v844[2 * v511];
            unsigned int v545 = *(unsigned __int16 *)&v840[2 * v511]
                 + *(unsigned __int16 *)&v839[2 * v511]
                 + v544
                 + *(unsigned __int16 *)&v845[2 * v511];
            unsigned int v546 = *(unsigned __int16 *)&v846[2 * v511]
                 + v544
                 + *(unsigned __int16 *)&v851[2 * v511]
                 + *(unsigned __int16 *)&v852[2 * v511];
            if (v542 >= v538) {
              unsigned int v547 = v538;
            }
            else {
              unsigned int v547 = v542;
            }
            if (v543 < v547) {
              unsigned int v547 = v543;
            }
            if (v545 < v547) {
              unsigned int v547 = *(unsigned __int16 *)&v840[2 * v511]
            }
                   + *(unsigned __int16 *)&v839[2 * v511]
                   + v544
                   + *(unsigned __int16 *)&v845[2 * v511];
            if (v546 < v547) {
              unsigned int v547 = *(unsigned __int16 *)&v846[2 * v511]
            }
                   + v544
                   + *(unsigned __int16 *)&v851[2 * v511]
                   + *(unsigned __int16 *)&v852[2 * v511];
            if (v540 <= v542) {
              unsigned int v540 = v542;
            }
            if (v540 <= v543) {
              unsigned int v540 = v543;
            }
            if (v540 <= v545) {
              unsigned int v540 = *(unsigned __int16 *)&v840[2 * v511]
            }
                   + *(unsigned __int16 *)&v839[2 * v511]
                   + v544
                   + *(unsigned __int16 *)&v845[2 * v511];
            if (v540 <= v546) {
              unsigned int v540 = *(unsigned __int16 *)&v846[2 * v511]
            }
                   + v544
                   + *(unsigned __int16 *)&v851[2 * v511]
                   + *(unsigned __int16 *)&v852[2 * v511];
            int v548 = v540 <= 1 ? 1 : v540 >> 1;
            unsigned int v549 = v548 + v547;
            if (v532 >= v549) {
              break;
            }
            int v550 = *(unsigned __int8 *)(v519 + v511) + *(unsigned __int8 *)(v860 + v511);
            int v551 = *(unsigned __int8 *)(v525 + 2) + *(unsigned __int8 *)(v519 + v511 - 1);
            int v552 = 2 * *(unsigned __int8 *)(v780 + v511);
            uint64_t v553 = 1;
            v521 = v855;
            if (v533 < v549) {
              goto LABEL_801;
            }
LABEL_802:
            uint64_t v520 = v943;
            if (v535 < v549)
            {
              v550 += 2 * *(unsigned __int8 *)(v943 + v511 + 1);
              v551 += *(unsigned __int8 *)(v943 + v511) + *(unsigned __int8 *)(v525 + 2);
              v552 += *(unsigned __int8 *)(v858 + v511) + *(unsigned __int8 *)(v859 + v511);
              ++v553;
              if (v536 >= v549)
              {
LABEL_804:
                if (v542 >= v549) {
                  goto LABEL_805;
                }
                goto LABEL_821;
              }
            }
            else if (v536 >= v549)
            {
              goto LABEL_804;
            }
            v550 += 2 * *(unsigned __int8 *)(v943 + v511 + 3);
            v551 += *(unsigned __int8 *)(v943 + v511 + 4) + *(unsigned __int8 *)(v525 + 2);
            v552 += *(unsigned __int8 *)(v856 + v511) + *(unsigned __int8 *)(v857 + v511);
            ++v553;
            if (v542 >= v549)
            {
LABEL_805:
              if (v543 >= v549) {
                goto LABEL_806;
              }
              goto LABEL_822;
            }
LABEL_821:
            v550 += *(unsigned __int8 *)(v519 + v511) + *(unsigned __int8 *)(v943 + v511 + 3);
            v551 += 2 * *(unsigned __int8 *)(v952 + v511);
            v552 += *(unsigned __int8 *)(v780 + v511) + *(unsigned __int8 *)(v856 + v511);
            ++v553;
            if (v543 >= v549)
            {
LABEL_806:
              if (v545 >= v549) {
                goto LABEL_807;
              }
              goto LABEL_823;
            }
LABEL_822:
            v550 += *(unsigned __int8 *)(v864 + v511) + *(unsigned __int8 *)(v943 + v511 + 1);
            v551 += 2 * *(unsigned __int8 *)(v944 + v511);
            v552 += *(unsigned __int8 *)(v945 + v511) + *(unsigned __int8 *)(v859 + v511);
            ++v553;
            if (v545 >= v549)
            {
LABEL_807:
              if (v546 < v549) {
                goto LABEL_824;
              }
              goto LABEL_729;
            }
LABEL_823:
            v550 += *(unsigned __int8 *)(v860 + v511) + *(unsigned __int8 *)(v943 + v511 + 1);
            v551 += 2 * *(unsigned __int8 *)(v863 + v511);
            v552 += *(unsigned __int8 *)(v858 + v511) + *(unsigned __int8 *)(v780 + v511);
            ++v553;
            if (v546 < v549)
            {
LABEL_824:
              v550 += *(unsigned __int8 *)(v865 + v511) + *(unsigned __int8 *)(v943 + v511 + 3);
              v551 += 2 * *(unsigned __int8 *)(v862 + v511);
              v552 += *(unsigned __int8 *)(v857 + v511) + *(unsigned __int8 *)(v945 + v511);
              ++v553;
            }
LABEL_729:
            LODWORD(v522) = *(unsigned __int8 *)(v525 + 2);
            float v523 = flt_100408638[v553];
            int v524 = (uint64_t)rintf(v523 * (float)(v550 - v551)) + v522;
            uint64_t v525 = (uint64_t)rintf(v523 * (float)(v552 - v551));
            int v526 = v522;
LABEL_730:
            int v527 = (v525 + v522) & ~(((int)v525 + (int)v522) >> 31);
            if (v527 >= 255) {
              LOBYTE(v527) = -1;
            }
            v515[v514 - 7] = v527;
            int v528 = v526 & ~(v526 >> 31);
            if (v528 >= 255) {
              LOBYTE(v528) = -1;
            }
            v529 = &v515[v781 + 6];
            unsigned char *v515 = v528;
            v515 += 3;
            int v530 = v524 & ~(v524 >> 31);
            if (v530 >= 255) {
              LOBYTE(v530) = -1;
            }
            *(v529 - 7) = v530;
            v517 ^= 1u;
            ++v511;
            v516 += 2;
            if (v743 == v511)
            {
              __n128 v195 = (unsigned char *)(v771 + v512);
              v195[5] = *(unsigned char *)(v771 + v512 + 8);
              int v196 = (unsigned char *)(v771 + v512 + v765);
              uint64_t v197 = (unsigned char *)(v771 + v512 + v764);
              *uint64_t v197 = *v196;
              uint64_t v198 = v512 << 32;
              uint64_t v199 = (v198 + 0x400000000) >> 32;
              *(unsigned char *)(v771 + v199) = *(unsigned char *)(v771 + ((v198 + 0x700000000) >> 32));
              v197[1] = v196[1];
              uint64_t v200 = (v198 + 0x300000000) >> 32;
              *(unsigned char *)(v771 + v200) = *(unsigned char *)(v771 + ((v198 + 0x600000000) >> 32));
              v197[2] = v196[2];
              *(unsigned char *)(v771 + ((v198 + 0x200000000) >> 32)) = *(unsigned char *)(v771 + ((v198 + 0x500000000) >> 32));
              v197[3] = v196[3];
              *(unsigned char *)(v771 + (((uint64_t)&_mh_execute_header + v198) >> 32)) = *(unsigned char *)(v771 + v199);
              v197[4] = v196[4];
              unsigned char *v195 = *(unsigned char *)(v771 + v200);
              v197[5] = v196[5];
              v782 ^= 1u;
              uint64_t v194 = v942 + 1;
              uint64_t v187 = v783 + 1;
              uint64_t v193 = v777 + 1;
              unsigned int v184 = v779 + 1;
              unsigned int v192 = v778 + 1;
              unsigned int v188 = v784 + 1;
              v780 += v933;
              v785 += v767;
              uint64_t v183 = v519 + v933;
              v860 += v933;
              v945 += v933;
              v865 += v933;
              v864 += v933;
              v859 += v933;
              v858 += v933;
              v797 += v933;
              v796 += v933;
              v857 += v933;
              v856 += v933;
              uint64_t v186 = v520 + v933;
              v795 += v933;
              v952 += v933;
              v944 += v933;
              v863 += v933;
              v862 += v933;
              uint64_t v185 = v853;
              if (v942 + 1 != v772) {
                goto LABEL_298;
              }
              uint64_t v569 = v728;
              if ((int)v728 >= 1)
              {
                uint64_t v570 = 2 * v729;
                uint64_t v571 = (v730 - 5) * v729;
                uint64_t v572 = (v730 - 1) * v729;
                uint64_t v573 = (v730 - 2) * v729;
                uint64_t v574 = (v730 - 3) * v729;
                uint64_t v575 = (int)v772 * v729;
                if (v728 < 8)
                {
                  uint64_t v576 = 0;
                  goto LABEL_969;
                }
                uint64_t v576 = 0;
                if ((unint64_t)(v767 + 15) < 0x10) {
                  goto LABEL_969;
                }
                uint64_t v672 = v771 + v572;
                if ((unint64_t)(v572 - v767) < 0x10) {
                  goto LABEL_969;
                }
                uint64_t v673 = v771 + v573;
                if ((unint64_t)(v573 - v767) < 0x10) {
                  goto LABEL_969;
                }
                uint64_t v674 = v771 + v574;
                if ((unint64_t)(v574 - v767) < 0x10) {
                  goto LABEL_969;
                }
                uint64_t v675 = v771 + v575;
                if ((unint64_t)(v575 - v767) < 0x10) {
                  goto LABEL_969;
                }
                uint64_t v676 = v771 + v570;
                if ((unint64_t)(v767 - v570) < 0x10) {
                  goto LABEL_969;
                }
                uint64_t v677 = v771 + v571;
                if ((unint64_t)(v571 - v767) < 0x10
                  || v572 < 0x10
                  || v573 < 0x10
                  || v574 < 0x10
                  || v575 < 0x10
                  || (unint64_t)(v570 + 15) < 0x10
                  || v571 < 0x10
                  || (unint64_t)(v673 - v672) < 0x10
                  || (unint64_t)(v674 - v672) < 0x10
                  || (unint64_t)(v675 - v672) < 0x10
                  || (unint64_t)(v672 - v676) < 0x10
                  || (unint64_t)(v672 - v677) < 0x10
                  || (unint64_t)(v674 - v673) < 0x10
                  || (unint64_t)(v675 - v673) < 0x10
                  || (unint64_t)(v673 - v676) < 0x10
                  || (unint64_t)(v673 - v677) < 0x10
                  || (unint64_t)(v675 - v674) < 0x10
                  || (unint64_t)(v674 - v676) < 0x10
                  || (unint64_t)(v674 - v677) < 0x10
                  || (unint64_t)(v675 - v676) < 0x10
                  || (unint64_t)(v675 - v677) < 0x10)
                {
                  goto LABEL_969;
                }
                if (v728 < 0x10)
                {
                  uint64_t v576 = 0;
                  goto LABEL_966;
                }
                uint64_t v703 = 0;
                uint64_t v576 = v728 & 0xFFFFFFF0;
                do
                {
                  long long v704 = *(_OWORD *)(v771 + v570 + v703);
                  *(_OWORD *)(v771 + v767 + v703) = v704;
                  *(_OWORD *)(v771 + v703) = v704;
                  long long v705 = *(_OWORD *)(v771 + v571 + v703);
                  *(_OWORD *)(v771 + v572 + v703) = v705;
                  *(_OWORD *)(v771 + v573 + v703) = v705;
                  *(_OWORD *)(v771 + v574 + v703) = v705;
                  *(_OWORD *)(v771 + v575 + v703) = v705;
                  v703 += 16;
                }
                while (v576 != v703);
                if (v576 != v728)
                {
                  if ((v728 & 8) == 0) {
                    goto LABEL_969;
                  }
LABEL_966:
                  uint64_t v706 = v771 + v570;
                  uint64_t v707 = v771 + v767;
                  uint64_t v708 = v771 + v571;
                  uint64_t v709 = v771 + v572;
                  uint64_t v710 = v771 + v573;
                  uint64_t v711 = v771 + v574;
                  uint64_t v712 = v771 + v575;
                  uint64_t v713 = v728 & 0xFFFFFFF8;
                  uint64_t v714 = v771;
                  do
                  {
                    uint64_t v715 = *(void *)(v706 + v576);
                    *(void *)(v707 + v576) = v715;
                    *(void *)(v714 + v576) = v715;
                    uint64_t v716 = *(void *)(v708 + v576);
                    *(void *)(v709 + v576) = v716;
                    *(void *)(v710 + v576) = v716;
                    *(void *)(v711 + v576) = v716;
                    *(void *)(v712 + v576) = v716;
                    v706 += 8;
                    v707 += 8;
                    v714 += 8;
                    v708 += 8;
                    v709 += 8;
                    v710 += 8;
                    v711 += 8;
                    v712 += 8;
                    v713 -= 8;
                  }
                  while (v576 != v713);
                  uint64_t v576 = v728 & 0x7FFFFFF8;
                  if (v576 != v728)
                  {
LABEL_969:
                    uint64_t v717 = v771 + v575;
                    uint64_t v718 = v771 + v574;
                    uint64_t v719 = v771 + v573;
                    uint64_t v720 = v771 + v572;
                    uint64_t v721 = v771 + v571;
                    uint64_t v722 = v771 + v767;
                    uint64_t v723 = v771 + v570;
                    do
                    {
                      char v724 = *(unsigned char *)(v723 + v576);
                      *(unsigned char *)(v722 + v576) = v724;
                      *(unsigned char *)(v518 + v576) = v724;
                      char v725 = *(unsigned char *)(v721 + v576);
                      *(unsigned char *)(v720 + v576) = v725;
                      *(unsigned char *)(v719 + v576) = v725;
                      *(unsigned char *)(v718 + v576) = v725;
                      *(unsigned char *)(v717 + v576) = v725;
                      --v569;
                      ++v717;
                      ++v718;
                      ++v719;
                      ++v720;
                      ++v721;
                      ++v518;
                      ++v722;
                      ++v723;
                    }
                    while (v576 != v569);
                  }
                }
              }
              if (*(_OWORD **)&v988[0] != &v988[1] && *(void *)&v988[0]) {
                operator delete[]();
              }
              goto LABEL_78;
            }
          }
          int v550 = 0;
          int v551 = 0;
          int v552 = 0;
          uint64_t v553 = 0;
          v521 = v855;
          if (v533 >= v549) {
            goto LABEL_802;
          }
LABEL_801:
          v550 += *(unsigned __int8 *)(v864 + v511) + *(unsigned __int8 *)(v865 + v511);
          uint64_t v519 = v794;
          v551 += *(unsigned __int8 *)(v865 + v511 - 1) + *(unsigned __int8 *)(v525 + 2);
          v552 += 2 * *(unsigned __int8 *)(v945 + v511);
          ++v553;
          goto LABEL_802;
        }
      }
    case 86:
    case 87:
    case 88:
    case 89:
      if (a4 > 1 || v24)
      {
        v988[0] = 0uLL;
        uint64_t v30 = sub_1002D19D8(v988, 20);
        *(_DWORD *)(v30 + 16) = 824196413;
        *(_OWORD *)uint64_t v30 = *(_OWORD *)"scn == 1 && dcn == 1";
        sub_1002D2278(-215, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1632);
      }
      v971.i32[0] = v982->i32[1];
      v971.i32[1] = v13;
      sub_10029E6D4(a2, &v971, (v14 | 8) - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v31 = *(void *)(a2 + 8);
        long long v32 = *(_OWORD *)(v31 + 16);
        v988[0] = *(_OWORD *)v31;
        v988[1] = v32;
        v988[2] = *(_OWORD *)(v31 + 32);
        uint64_t v33 = *(void *)(v31 + 56);
        *(void *)&v988[3] = *(void *)(v31 + 48);
        *((void *)&v988[3] + 1) = v33;
        v989 = (int *)v988 + 2;
        v990 = &v991;
        uint64_t v992 = 0;
        uint64_t v991 = 0;
        if (v33) {
          atomic_fetch_add((atomic_uint *volatile)(v33 + 20), 1u);
        }
        if (*(int *)(v31 + 4) > 2)
        {
          DWORD1(v988[0]) = 0;
          sub_1002931A8((uint64_t)v988, v31);
        }
        else
        {
          float v34 = *(uint64_t **)(v31 + 72);
          float v35 = v990;
          uint64_t *v990 = *v34;
          v35[1] = v34[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v988);
      }
      if (*(void *)&v972[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v972[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v972);
      }
      if (*(int *)&v972[4] >= 1)
      {
        uint64_t v59 = 0;
        float v60 = v973;
        do
          v60[v59++] = 0;
        while (v59 < *(int *)&v972[4]);
      }
      *(_OWORD *)v972 = v988[0];
      *(_OWORD *)&v972[16] = v988[1];
      *(_OWORD *)&v972[32] = v988[2];
      *(_OWORD *)&v972[48] = v988[3];
      if (v974 == &v975)
      {
        float v61 = (unint64_t *)v990;
        if (SDWORD1(v988[0]) <= 2) {
          goto LABEL_115;
        }
      }
      else
      {
        j__free(v974);
        v974 = &v975;
        v973 = (int *)&v972[8];
        float v61 = (unint64_t *)v990;
        if (SDWORD1(v988[0]) <= 2)
        {
LABEL_115:
          unint64_t v975 = *v61;
          unint64_t v976 = v61[1];
          goto LABEL_118;
        }
      }
      v974 = v61;
      v973 = v989;
      float v61 = (unint64_t *)&v991;
      v990 = &v991;
      v989 = (int *)v988 + 2;
LABEL_118:
      LODWORD(v988[0]) = 1124007936;
      memset((char *)v988 + 4, 0, 60);
      if (v61 != (unint64_t *)&v991) {
        j__free(v61);
      }
      if (v14)
      {
        if (v14 != 2)
        {
          v988[0] = 0uLL;
          qmemcpy((void *)sub_1002D19D8(v988, 54), "Bayer->Gray demosaicing only supports 8u and 16u types", 54);
          sub_1002D2278(-210, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1642);
        }
        int32x2_t v62 = *v982;
        int32x2_t v63 = vadd_s32(*v982, (int32x2_t)0x100000001);
        *(int32x2_t *)&long long v962 = vrev64_s32(v63);
        if (v62.i32[0] >= 3)
        {
          if ((a3 & 0xFFFFFFFE) == 0x56) {
            int v64 = 1868;
          }
          else {
            int v64 = 4899;
          }
          if ((a3 & 0xFFFFFFFE) == 0x56) {
            int v65 = 4899;
          }
          else {
            int v65 = 1868;
          }
          BOOL v67 = a3 == 87 || a3 == 89;
          v993.i32[0] = 0;
          v993.i32[1] = v63.i32[0];
          sub_1003228B0((uint64_t)v988, (uint64_t)&v977, (uint64_t)v972, v67, (a3 & 0xFFFFFFFE) == 86, &v962, v64, v65);
          if (*(int *)&v972[4] >= 3)
          {
            v623 = v973 + 1;
            uint64_t v624 = 1;
            uint64_t v625 = *(_DWORD *)&v972[4] & 0xFFFFFFFE;
            uint64_t v626 = 1;
            do
            {
              v624 *= *(v623 - 1);
              v626 *= *v623;
              v623 += 2;
              v625 -= 2;
            }
            while (v625);
            uint64_t v68 = v626 * v624;
            unint64_t v627 = *(unsigned int *)&v972[4] - (unint64_t)(*(_DWORD *)&v972[4] & 0xFFFFFFFE);
            if (v627)
            {
              v628 = (int *)((char *)v973 + ((4 * *(unsigned int *)&v972[4]) & 0x3FFFFFFF8));
              do
              {
                uint64_t v629 = *v628++;
                v68 *= v629;
                --v627;
              }
              while (v627);
            }
          }
          else
          {
            uint64_t v68 = *(int *)&v972[12] * (uint64_t)*(int *)&v972[8];
          }
          sub_1002ABC90(&v993, (uint64_t)v988, (double)(unint64_t)v68 * 0.0000152587891);
          sub_1003230F0((uint64_t)v988);
        }
        uint64_t v630 = *(void *)&v972[16];
        int v632 = *v973;
        uint64_t v631 = v973[1];
        unint64_t v633 = v975 >> 1;
        if (*v973 > 2)
        {
          if ((int)v631 < 1) {
            goto LABEL_86;
          }
          uint64_t v634 = (int)v633;
          int v635 = (v632 - 1) * v633;
          uint64_t v636 = (*v973 - 2) * (int)v633;
          if (v631 >= 0x10)
          {
            uint64_t v637 = 0;
            unint64_t v678 = 2 * v635;
            if (v678 >= 0x20)
            {
              uint64_t v679 = 2 * (int)v633;
              if ((unint64_t)(v679 + 31) >= 0x20)
              {
                uint64_t v680 = 2 * v636;
                if ((unint64_t)(2 * v636) >= 0x20 && v678 - v679 >= 0x20 && v678 - v680 >= 0x20)
                {
                  uint64_t v637 = v631 & 0x7FFFFFF0;
                  v681 = (_OWORD *)(*(void *)&v972[16] + 16);
                  uint64_t v682 = v631 & 0xFFFFFFF0;
                  do
                  {
                    long long v683 = *(_OWORD *)((char *)v681 + 2 * v634);
                    *(v681 - 1) = *(_OWORD *)((char *)v681 + 2 * v634 - 16);
                    _OWORD *v681 = v683;
                    long long v684 = *(_OWORD *)((char *)v681 + 2 * v636);
                    v685 = (_OWORD *)((char *)v681 + v678);
                    *(v685 - 1) = *(_OWORD *)((char *)v681 + v680 - 16);
                    _OWORD *v685 = v684;
                    v681 += 2;
                    v682 -= 16;
                  }
                  while (v682);
                  if (v637 == v631) {
                    goto LABEL_86;
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v637 = 0;
          }
          v686 = (_WORD *)(v630 + 2 * (v637 + v635));
          uint64_t v687 = v631 - v637;
          v688 = (__int16 *)(v630 + 2 * (v637 + v636));
          v689 = (_WORD *)(v630 + 2 * v637);
          v690 = (__int16 *)(v630 + 2 * (v637 + v634));
          do
          {
            __int16 v691 = *v690++;
            *v689++ = v691;
            __int16 v692 = *v688++;
            *v686++ = v692;
            --v687;
          }
          while (v687);
          goto LABEL_86;
        }
        if ((int)v631 >= 1)
        {
          uint64_t v638 = 0;
          int v639 = (v632 - 1) * v633;
          uint64_t v640 = v639;
          if (v631 < 0x10) {
            goto LABEL_891;
          }
          if ((unint64_t)(-2 * v639) < 0x20) {
            goto LABEL_891;
          }
          uint64_t v638 = v631 & 0x7FFFFFF0;
          uint64_t v641 = v631 & 0xFFFFFFF0;
          v642 = *(_OWORD **)&v972[16];
          do
          {
            v643 = (_OWORD *)((char *)v642 + 2 * v639);
            _OWORD *v643 = 0uLL;
            v643[1] = 0uLL;
            _OWORD *v642 = 0uLL;
            v642[1] = 0uLL;
            v642 += 2;
            v641 -= 16;
          }
          while (v641);
          if (v638 != v631)
          {
LABEL_891:
            uint64_t v644 = v631 - v638;
            v645 = (_WORD *)(v630 + 2 * v638);
            v646 = (_WORD *)(v630 + 2 * (v638 + v640));
            do
            {
              *v646++ = 0;
              *v645++ = 0;
              --v644;
            }
            while (v644);
          }
        }
      }
      else
      {
        int32x2_t v69 = *v982;
        int32x2_t v70 = vadd_s32(*v982, (int32x2_t)0x100000001);
        *(int32x2_t *)&long long v962 = vrev64_s32(v70);
        if (v69.i32[0] >= 3)
        {
          if ((a3 & 0xFFFFFFFE) == 0x56) {
            int v71 = 1868;
          }
          else {
            int v71 = 4899;
          }
          if ((a3 & 0xFFFFFFFE) == 0x56) {
            int v72 = 4899;
          }
          else {
            int v72 = 1868;
          }
          BOOL v74 = a3 == 87 || a3 == 89;
          v993.i32[0] = 0;
          v993.i32[1] = v70.i32[0];
          sub_100321D14((uint64_t)v988, (uint64_t)&v977, (uint64_t)v972, v74, (a3 & 0xFFFFFFFE) == 86, &v962, v71, v72);
          if (*(int *)&v972[4] >= 3)
          {
            v592 = v973 + 1;
            uint64_t v593 = 1;
            uint64_t v594 = *(_DWORD *)&v972[4] & 0xFFFFFFFE;
            uint64_t v595 = 1;
            do
            {
              v593 *= *(v592 - 1);
              v595 *= *v592;
              v592 += 2;
              v594 -= 2;
            }
            while (v594);
            uint64_t v75 = v595 * v593;
            unint64_t v596 = *(unsigned int *)&v972[4] - (unint64_t)(*(_DWORD *)&v972[4] & 0xFFFFFFFE);
            if (v596)
            {
              v597 = (int *)((char *)v973 + ((4 * *(unsigned int *)&v972[4]) & 0x3FFFFFFF8));
              do
              {
                uint64_t v598 = *v597++;
                v75 *= v598;
                --v596;
              }
              while (v596);
            }
          }
          else
          {
            uint64_t v75 = *(int *)&v972[12] * (uint64_t)*(int *)&v972[8];
          }
          sub_1002ABC90(&v993, (uint64_t)v988, (double)(unint64_t)v75 * 0.0000152587891);
          sub_100322774((uint64_t)v988);
        }
        uint64_t v599 = *(void *)&v972[16];
        int v601 = *v973;
        int v600 = v973[1];
        *(void *)&long long v962 = __PAIR64__(*v973, v600);
        if (v601 <= 2)
        {
          if (v600 >= 1)
          {
            uint64_t v605 = 0;
            uint64_t v606 = (int)v975;
            do
            {
              v607 = (unsigned char *)(v599 + v605);
              v607[(SDWORD1(v962) - 1) * v606] = 0;
              unsigned char *v607 = 0;
              ++v605;
            }
            while (v605 < (int)v962);
          }
        }
        else if (v600 >= 1)
        {
          uint64_t v602 = 0;
          int v603 = v975;
          do
          {
            v604 = (unsigned char *)(v599 + v602);
            unsigned char *v604 = *(unsigned char *)(v599 + v603 + v602);
            v604[(SDWORD1(v962) - 1) * v603] = *(unsigned char *)(v599 + v602++ + (SDWORD1(v962) - 2) * v603);
          }
          while (v602 < (int)v962);
        }
      }
LABEL_86:
      if (*(void *)&v972[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v972[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v972);
      }
      *(void *)&v972[56] = 0;
      memset(&v972[16], 0, 32);
      if (*(int *)&v972[4] >= 1)
      {
        uint64_t v55 = 0;
        BOOL v56 = v973;
        do
          v56[v55++] = 0;
        while (v55 < *(int *)&v972[4]);
      }
      if (v974 != &v975) {
        j__free(v974);
      }
      if (v981 && atomic_fetch_add((atomic_uint *volatile)(v981 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v977);
      }
      uint64_t v981 = 0;
      long long v978 = 0u;
      long long v979 = 0u;
      if (SDWORD1(v977) >= 1)
      {
        uint64_t v57 = 0;
        int v58 = v982;
        do
          v58->i32[v57++] = 0;
        while (v57 < SDWORD1(v977));
      }
      if (v983 != v984) {
        j__free(v983);
      }
      if (v986) {
        sub_1002D6888(v985);
      }
      return;
    case 135:
    case 136:
    case 137:
    case 138:
      if (a4 < 1) {
        a4 = 3;
      }
      if (a4 != 3 || v24)
      {
        v988[0] = 0uLL;
        uint64_t v36 = sub_1002D19D8(v988, 20);
        *(_DWORD *)(v36 + 16) = 857750845;
        *(_OWORD *)uint64_t v36 = *(_OWORD *)"scn == 1 && dcn == 3";
        sub_1002D2278(-215, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1680);
      }
      v961.i32[0] = v982->i32[1];
      v961.i32[1] = v13;
      sub_10029E6D4(a2, &v961, (v14 | 0x18) - 8, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a2) == 0x10000)
      {
        uint64_t v37 = *(void *)(a2 + 8);
        long long v38 = *(_OWORD *)(v37 + 16);
        v988[0] = *(_OWORD *)v37;
        v988[1] = v38;
        v988[2] = *(_OWORD *)(v37 + 32);
        uint64_t v39 = *(void *)(v37 + 56);
        *(void *)&v988[3] = *(void *)(v37 + 48);
        *((void *)&v988[3] + 1) = v39;
        v989 = (int *)v988 + 2;
        v990 = &v991;
        uint64_t v992 = 0;
        uint64_t v991 = 0;
        if (v39) {
          atomic_fetch_add((atomic_uint *volatile)(v39 + 20), 1u);
        }
        if (*(int *)(v37 + 4) > 2)
        {
          DWORD1(v988[0]) = 0;
          sub_1002931A8((uint64_t)v988, v37);
        }
        else
        {
          float v40 = *(uint64_t **)(v37 + 72);
          uint64_t v41 = v990;
          uint64_t *v990 = *v40;
          v41[1] = v40[1];
        }
      }
      else
      {
        sub_100299554(a2, -1, (uint64_t)v988);
      }
      if (*(void *)&v972[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v972[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v972);
      }
      if (*(int *)&v972[4] >= 1)
      {
        uint64_t v76 = 0;
        uint64_t v77 = v973;
        do
          v77[v76++] = 0;
        while (v76 < *(int *)&v972[4]);
      }
      *(_OWORD *)v972 = v988[0];
      *(_OWORD *)&v972[16] = v988[1];
      *(_OWORD *)&v972[32] = v988[2];
      *(_OWORD *)&v972[48] = v988[3];
      if (v974 == &v975)
      {
        uint64_t v78 = (unint64_t *)v990;
        if (SDWORD1(v988[0]) <= 2) {
          goto LABEL_162;
        }
      }
      else
      {
        j__free(v974);
        v974 = &v975;
        v973 = (int *)&v972[8];
        uint64_t v78 = (unint64_t *)v990;
        if (SDWORD1(v988[0]) <= 2)
        {
LABEL_162:
          unint64_t v975 = *v78;
          unint64_t v976 = v78[1];
          goto LABEL_165;
        }
      }
      v974 = v78;
      v973 = v989;
      uint64_t v78 = (unint64_t *)&v991;
      v990 = &v991;
      v989 = (int *)v988 + 2;
LABEL_165:
      LODWORD(v988[0]) = 1124007936;
      memset((char *)v988 + 4, 0, 60);
      if (v78 != (unint64_t *)&v991) {
        j__free(v78);
      }
      if (v14)
      {
        if (v14 != 2)
        {
          v988[0] = 0uLL;
          qmemcpy((void *)sub_1002D19D8(v988, 74), "Bayer->RGB Edge-Aware demosaicing only currently supports 8u and 16u types", 74);
          sub_1002D2278(-210, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1689);
        }
        int v79 = v982->i32[1];
        if (v79 >= 3)
        {
          int v80 = v982->i32[0] - 2;
          if (v982->i32[0] > 2)
          {
            LODWORD(v962) = v79 - 2;
            DWORD1(v962) = v80;
            sub_1003244E8((uint64_t)v988, (uint64_t)&v977, (uint64_t)v972, &v962, (a3 - 135) < 2, (a3 & 0xFFFFFFFD) == 136);
            v993.i32[0] = 0;
            v993.i32[1] = DWORD1(v962);
            if (*(int *)&v972[4] >= 3)
            {
              v647 = v973 + 1;
              uint64_t v648 = 1;
              uint64_t v649 = *(_DWORD *)&v972[4] & 0xFFFFFFFE;
              uint64_t v650 = 1;
              do
              {
                v648 *= *(v647 - 1);
                v650 *= *v647;
                v647 += 2;
                v649 -= 2;
              }
              while (v649);
              uint64_t v81 = v650 * v648;
              unint64_t v651 = *(unsigned int *)&v972[4] - (unint64_t)(*(_DWORD *)&v972[4] & 0xFFFFFFFE);
              if (v651)
              {
                v652 = (int *)((char *)v973 + ((4 * *(unsigned int *)&v972[4]) & 0x3FFFFFFF8));
                do
                {
                  uint64_t v653 = *v652++;
                  v81 *= v653;
                  --v651;
                }
                while (v651);
              }
            }
            else
            {
              uint64_t v81 = *(int *)&v972[12] * (uint64_t)*(int *)&v972[8];
            }
            sub_1002ABC90(&v993, (uint64_t)v988, (double)(unint64_t)v81 * 0.0000152587891);
            sub_100324BE4((uint64_t)v988);
            uint64_t v654 = *(void *)&v972[16];
            uint64_t v655 = *v973;
            uint64_t v656 = v973[1] + v973[1] * ((*(_DWORD *)v972 >> 3) & 0x1FFu);
            unint64_t v657 = v975 / ((0x88442211uLL >> (4 * (v972[0] & 7u))) & 0xF);
            uint64_t v658 = v655 - 1;
            uint64_t v659 = v657 * (v655 - 1);
            uint64_t v660 = *(void *)&v972[16] + 2 * v659;
            if ((int)v655 > 2)
            {
              if ((int)v656 < 1) {
                goto LABEL_86;
              }
              uint64_t v661 = 2 * v657;
              uint64_t v662 = *(void *)&v972[16] + 2 * v657;
              unint64_t v663 = v660 - 2 * v657;
              if (v656 >= 0x18)
              {
                uint64_t v664 = 0;
                unint64_t v693 = 2 * v659;
                if (v693 >= 0x20 && (unint64_t)(v661 + 31) >= 0x20)
                {
                  unint64_t v694 = v657 * (2 * v658 - 2);
                  if (v694 >= 0x20 && v693 - v661 >= 0x20 && v693 - v694 >= 0x20)
                  {
                    uint64_t v695 = 0;
                    uint64_t v664 = v656 & 0xFFFFFFF0;
                    v696 = (_OWORD *)(*(void *)&v972[16] + 16);
                    uint64_t v697 = v664;
                    do
                    {
                      v698 = (_OWORD *)(v662 + 2 * v695);
                      long long v699 = v698[1];
                      *(v696 - 1) = *v698;
                      _OWORD *v696 = v699;
                      v700 = (_OWORD *)(v663 + 2 * v695);
                      long long v701 = v700[1];
                      v702 = (_OWORD *)(v660 + 2 * v695);
                      _OWORD *v702 = *v700;
                      v702[1] = v701;
                      v695 += 16;
                      v696 += 2;
                      v697 -= 16;
                    }
                    while (v697);
                    if (v664 == v656) {
                      goto LABEL_86;
                    }
                  }
                }
              }
              else
              {
                uint64_t v664 = 0;
              }
              uint64_t v665 = v656 - v664;
              v666 = (_WORD *)(v654 + 2 * v664);
              do
              {
                *v666++ = *(_WORD *)(v662 + 2 * v664);
                *(_WORD *)(v660 + 2 * v664) = *(_WORD *)(v663 + 2 * v664);
                ++v664;
                --v665;
              }
              while (v665);
              goto LABEL_86;
            }
            if ((int)v656 < 1) {
              goto LABEL_86;
            }
            if (v656 < 0x10)
            {
              uint64_t v667 = 0;
            }
            else
            {
              uint64_t v667 = 0;
              if ((unint64_t)(-2 * v659) >= 0x20)
              {
                uint64_t v668 = 0;
                uint64_t v667 = v656 & 0xFFFFFFF0;
                v669 = (_OWORD *)(*(void *)&v972[16] + 16);
                uint64_t v670 = v667;
                do
                {
                  v671 = (_OWORD *)(v660 + 2 * v668);
                  _OWORD *v671 = 0uLL;
                  v671[1] = 0uLL;
                  *(v669 - 1) = 0uLL;
                  _OWORD *v669 = 0uLL;
                  v668 += 16;
                  v669 += 2;
                  v670 -= 16;
                }
                while (v670);
                if (v667 == v656) {
                  goto LABEL_86;
                }
              }
            }
            uint64_t v726 = v656 - v667;
            v727 = (_WORD *)(v654 + 2 * v667);
            do
            {
              *(_WORD *)(v660 + 2 * v667) = 0;
              *v727++ = 0;
              ++v667;
              --v726;
            }
            while (v726);
            goto LABEL_86;
          }
        }
      }
      else
      {
        int v82 = v982->i32[1];
        if (v82 >= 3)
        {
          int v83 = v982->i32[0] - 2;
          if (v982->i32[0] > 2)
          {
            LODWORD(v962) = v82 - 2;
            DWORD1(v962) = v83;
            sub_100323C88((uint64_t)v988, (uint64_t)&v977, (uint64_t)v972, &v962, (a3 - 135) < 2, (a3 & 0xFFFFFFFD) == 136);
            v993.i32[0] = 0;
            v993.i32[1] = DWORD1(v962);
            if (*(int *)&v972[4] >= 3)
            {
              v608 = v973 + 1;
              uint64_t v609 = 1;
              uint64_t v610 = *(_DWORD *)&v972[4] & 0xFFFFFFFE;
              uint64_t v611 = 1;
              do
              {
                v609 *= *(v608 - 1);
                v611 *= *v608;
                v608 += 2;
                v610 -= 2;
              }
              while (v610);
              uint64_t v84 = v611 * v609;
              unint64_t v612 = *(unsigned int *)&v972[4] - (unint64_t)(*(_DWORD *)&v972[4] & 0xFFFFFFFE);
              if (v612)
              {
                v613 = (int *)((char *)v973 + ((4 * *(unsigned int *)&v972[4]) & 0x3FFFFFFF8));
                do
                {
                  uint64_t v614 = *v613++;
                  v84 *= v614;
                  --v612;
                }
                while (v612);
              }
            }
            else
            {
              uint64_t v84 = *(int *)&v972[12] * (uint64_t)*(int *)&v972[8];
            }
            sub_1002ABC90(&v993, (uint64_t)v988, (double)(unint64_t)v84 * 0.0000152587891);
            sub_1003243AC((uint64_t)v988);
            uint64_t v615 = *(void *)&v972[16];
            int v616 = v973[1] + v973[1] * ((*(_DWORD *)v972 >> 3) & 0x1FF);
            DWORD1(v962) = *v973;
            LODWORD(v962) = v616;
            unint64_t v617 = v975 / ((0x88442211uLL >> (4 * (v972[0] & 7u))) & 0xF);
            uint64_t v618 = *(void *)&v972[16] + v617 * (SDWORD1(v962) - 1);
            if (SDWORD1(v962) <= 2)
            {
              if (v616 >= 1)
              {
                uint64_t v622 = 0;
                do
                {
                  *(unsigned char *)(v618 + v622) = 0;
                  *(unsigned char *)(v615 + v622++) = 0;
                }
                while (v622 < (int)v962);
              }
            }
            else if (v616 >= 1)
            {
              uint64_t v619 = 0;
              unint64_t v620 = *(void *)&v972[16] + v617;
              unint64_t v621 = v618 - v617;
              do
              {
                *(unsigned char *)(v615 + v619) = *(unsigned char *)(v620 + v619);
                *(unsigned char *)(v618 + v619) = *(unsigned char *)(v621 + v619);
                ++v619;
              }
              while (v619 < (int)v962);
            }
            goto LABEL_86;
          }
        }
      }
      memset(v988, 0, 32);
      sub_100255390((uint64_t)v972, (uint64_t)v988);
      goto LABEL_86;
    default:
      v988[0] = 0uLL;
      qmemcpy((void *)sub_1002D19D8(v988, 43), "Unknown / unsupported color conversion code", 43);
      sub_1002D2278(-206, (uint64_t *)v988, "demosaicing", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/demosaicing.cpp", 1694);
  }
}

void sub_100320C48(_Unwind_Exception *a1)
{
}

void sub_100320E1C(_Unwind_Exception *a1)
{
}

uint64_t sub_100320FB4(uint64_t result, unsigned int *a2, int a3)
{
  uint64_t v4 = *((void *)a2 + 10);
  unint64_t v5 = *a2;
  int32x2_t v6 = **(int32x2_t **)(result + 64);
  int32x2_t v7 = vadd_s32(v6, (int32x2_t)0x100000001);
  int32x2_t v32 = vrev64_s32(v7);
  if (v6.i32[0] >= 3)
  {
    BOOL v9 = a3 == 47 || a3 == 49;
    if ((a3 & 0xFFFFFFFE) == 0x2E) {
      int v10 = -1;
    }
    else {
      int v10 = 1;
    }
    v31[0] = 0;
    v31[1] = v7.i32[0];
    sub_1003211B0((uint64_t)v30, result, (uint64_t)a2, v9, v10, &v32);
    uint64_t v11 = a2[1];
    if ((int)v11 >= 3)
    {
      uint64_t v13 = *((void *)a2 + 8);
      int v14 = (int *)(v13 + 4);
      uint64_t v15 = 1;
      uint64_t v16 = v11 & 0xFFFFFFFE;
      uint64_t v17 = 1;
      do
      {
        v15 *= *(v14 - 1);
        v17 *= *v14;
        v14 += 2;
        v16 -= 2;
      }
      while (v16);
      uint64_t v12 = v17 * v15;
      uint64_t v18 = v11 - (v11 & 0xFFFFFFFE);
      if (v18)
      {
        uint64_t v19 = (int *)(v13 + ((4 * v11) & 0x3FFFFFFF8));
        do
        {
          uint64_t v20 = *v19++;
          v12 *= v20;
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v12 = (int)a2[3] * (uint64_t)(int)a2[2];
    }
    sub_1002ABC90(v31, (uint64_t)v30, (double)(unint64_t)v12 * 0.0000152587891);
    uint64_t result = sub_100321BD8((uint64_t)v30);
  }
  uint64_t v21 = ((v5 >> 3) & 0x1FF) + 1;
  uint64_t v22 = (int *)*((void *)a2 + 8);
  int v23 = *v22;
  v32.i32[0] = v22[1];
  v32.i32[1] = v23;
  uint64_t v24 = *((void *)a2 + 2);
  int v25 = v32.i32[0] * v21;
  if (v23 <= 2)
  {
    if (v25 >= 1)
    {
      uint64_t v28 = 0;
      do
      {
        float v29 = (unsigned char *)(v24 + v28);
        v29[(v32.i32[1] - 1) * (int)v4] = 0;
        *float v29 = 0;
        ++v28;
      }
      while (v28 < v32.i32[0] * (uint64_t)(int)v21);
    }
  }
  else if (v25 >= 1)
  {
    uint64_t v26 = 0;
    do
    {
      uint64_t v27 = (unsigned char *)(v24 + v26);
      *uint64_t v27 = *(unsigned char *)(v24 + (int)v4 + v26);
      v27[(v32.i32[1] - 1) * (int)v4] = *(unsigned char *)(v24 + v26++ + (v32.i32[1] - 2) * (int)v4);
    }
    while (v26 < v32.i32[0] * (uint64_t)(int)v21);
  }
  return result;
}

void sub_100321198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100321BD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003211B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, void *a6)
{
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_100499868;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v13 = *(void **)(a2 + 72);
    int v14 = *(void **)(a1 + 80);
    void *v14 = *v13;
    v14[1] = v13[1];
  }
  long long v15 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v17 = *(void *)(a3 + 48);
  uint64_t v16 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v16;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v15;
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v18 = *(void **)(a3 + 72);
    uint64_t v19 = *(void **)(a1 + 176);
    *uint64_t v19 = *v18;
    v19[1] = v18[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = *a6;
  return a1;
}

void sub_100321308(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100321324(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100321338(uint64_t a1)
{
  sub_100321BD8(a1);

  operator delete();
}

uint64_t sub_100321370(uint64_t result, _DWORD *a2, double a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  int v8 = *a2;
  if (*a2 < a2[1])
  {
    unint64_t v9 = (((unint64_t)*(unsigned int *)(result + 104) >> 3) & 0x1FF) + 1;
    if (v8) {
      int v10 = *(_DWORD *)(result + 200) == 0;
    }
    else {
      int v10 = *(_DWORD *)(result + 200);
    }
    if (v8) {
      int v11 = -*(_DWORD *)(result + 204);
    }
    else {
      int v11 = *(_DWORD *)(result + 204);
    }
    uint64_t v12 = *(void *)(result + 184);
    uint64_t v13 = (unsigned char *)(*(void *)(result + 120) + (int)v12 + (int)v12 * v8 + v9 + 1);
    uint64_t v14 = *(void *)(result + 88);
    uint64_t v15 = (int)v14;
    uint64_t v16 = *(void *)(result + 24) + v8 * (uint64_t)(int)v14;
    uint64_t v17 = (2 * v9);
    uint64_t v18 = 2 * (int)v14;
    uint64_t v84 = v18 | 1;
    uint64_t v19 = v14 << 32;
    uint64_t v20 = ((v14 << 32) + 0x200000000) >> 32;
    uint64_t v21 = ((uint64_t)&_mh_execute_header + v19) >> 32;
    uint64_t v22 = (int)v18 + 2;
    uint64_t v23 = (v19 + 0x300000000) >> 32;
    v24.i64[0] = -1;
    v24.i64[1] = -1;
    int v82 = a2;
    do
    {
      uint64_t v28 = *(int *)(result + 208);
      if ((int)v28 <= 0)
      {
        if (v9 == 3)
        {
          v13[3 * v28 + 1] = 0;
          v13[3 * *(int *)(result + 208)] = 0;
          v13[3 * *(int *)(result + 208) - 1] = 0;
          *(_WORD *)(v13 - 3) = 0;
          *(v13 - 4) = 0;
        }
        else
        {
          v13[(int)v28 * (uint64_t)(int)v9 + 1] = 0;
          v13[*(int *)(result + 208) * (uint64_t)(int)v9] = 0;
          v13[*(int *)(result + 208) * (uint64_t)(int)v9 - 1] = 0;
          *(v13 - 3) = 0;
          *(_WORD *)(v13 - 5) = 0;
          v13[*(int *)(result + 208) * (uint64_t)(int)v9 + 2] = -1;
          *(v13 - 2) = -1;
        }
        goto LABEL_12;
      }
      float v29 = (uint16x8_t *)v16;
      uint64_t v30 = v13;
      if (v10)
      {
        float v29 = (uint16x8_t *)(v16 + 1);
        int v31 = *(unsigned __int8 *)(v16 + v15) + *(unsigned __int8 *)(v16 + v20);
        v13[-v11] = (*(unsigned __int8 *)(v16 + 1) + *(unsigned __int8 *)(v16 + v84) + 1) >> 1;
        unsigned char *v13 = *(unsigned char *)(v16 + v21);
        v13[v11] = (v31 + 1) >> 1;
        if (v9 == 4) {
          v13[2] = -1;
        }
        uint64_t v30 = &v13[v9];
      }
      int32x2_t v32 = &v29->i8[*(int *)(result + 208)];
      if (v9 == 4)
      {
        v85.val[3] = v24;
        unint64_t v33 = (unint64_t)(v32 - 18);
        LODWORD(v34) = v29;
        if (v33 >= (unint64_t)v29)
        {
          float v35 = v30 - 1;
          float v34 = v29;
          do
          {
            int16x8_t v36 = *(int16x8_t *)((char *)v34 + v15);
            uint16x8_t v37 = *(uint16x8_t *)((char *)v34 + v18);
            uint16x8_t v38 = *v34;
            float v34 = (uint16x8_t *)((char *)v34 + 14);
            int16x8_t v39 = (int16x8_t)vshrq_n_u16((uint16x8_t)v36, 8uLL);
            *(int8x8_t *)a8.i8 = vshrn_n_s16(v36, 8uLL);
            unsigned long long v40 = *(_OWORD *)&v36 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            int16x8_t v41 = (int16x8_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 2uLL);
            int16x8_t v42 = (int16x8_t)vsraq_n_u16(vsraq_n_u16((uint16x8_t)v40, v38, 8uLL), v37, 8uLL);
            int16x8_t v43 = vaddq_s16((int16x8_t)(*(_OWORD *)&v37 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)), (int16x8_t)(*(_OWORD *)&v38 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
            int16x8_t v44 = (int16x8_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 2uLL);
            int16x8_t v45 = vaddq_s16(v44, v43);
            *(int8x8_t *)v45.i8 = vrshrn_n_s16(v45, 2uLL);
            *(int8x8_t *)v44.i8 = vrshrn_n_s16(v44, 1uLL);
            int8x16_t v46 = vzip1q_s8((int8x16_t)v45, (int8x16_t)v44);
            v85.val[1 - v11] = v46;
            int16x8_t v47 = vaddq_s16(v42, v41);
            *(int8x8_t *)v47.i8 = vrshrn_n_s16(v47, 2uLL);
            *(int8x8_t *)v46.i8 = vmovn_s16(v41);
            v85.val[1] = vzip1q_s8((int8x16_t)v47, v46);
            int16x8_t v48 = vsubq_s16(v39, (int16x8_t)vmvnq_s8(vextq_s8((int8x16_t)v39, (int8x16_t)v39, 2uLL)));
            *(int8x8_t *)v48.i8 = vshrn_n_s16(v48, 1uLL);
            v85.val[v11 + 1] = vzip1q_s8(a8, (int8x16_t)v48);
            int8x16x4_t v87 = v85;
            vst4q_s8(v35, v87);
            v35 += 56;
          }
          while ((unint64_t)v34 <= v33);
        }
      }
      else
      {
        unint64_t v49 = (unint64_t)(v32 - 18);
        LODWORD(v34) = v29;
        if (v49 >= (unint64_t)v29)
        {
          uint64_t v50 = v30 - 1;
          float v34 = v29;
          do
          {
            int16x8_t v51 = *(int16x8_t *)((char *)v34 + v15);
            int16x8_t v52 = (int16x8_t)vshrq_n_u16((uint16x8_t)v51, 8uLL);
            *(int8x8_t *)a8.i8 = vshrn_n_s16(v51, 8uLL);
            v51.i16[0] = v51.u8[0];
            v51.i16[1] = BYTE2(*(_OWORD *)((char *)v34 + v15));
            v51.i16[2] = BYTE4(*(unint64_t *)((char *)v34->i64 + v15));
            v51.i16[3] = BYTE6(*(unint64_t *)((char *)v34->i64 + v15));
            v51.i16[4] = *(uint64_t *)((char *)&v34->i64[1] + v15);
            v51.i16[5] = BYTE2(*(uint64_t *)((char *)&v34->i64[1] + v15));
            v51.i16[6] = BYTE12(*(unsigned long long *)((char *)v34 + v15));
            v51.i16[7] = BYTE14(*(unsigned long long *)((char *)v34 + v15));
            int16x8_t v53 = (int16x8_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 2uLL);
            v54.i16[0] = v34->u8[0];
            v54.i16[1] = BYTE2(v34->u32[0]);
            v54.i16[2] = BYTE4(v34->i64[0]);
            v54.i16[3] = BYTE6(v34->i64[0]);
            v54.i16[4] = v34->i64[1];
            v54.i16[5] = BYTE2(v34->i64[1]);
            v54.i16[6] = BYTE12(*(unsigned long long *)v34);
            v54.i16[7] = BYTE14(*(unsigned long long *)v34);
            int16x8_t v55 = (int16x8_t)vsraq_n_u16(vsraq_n_u16((uint16x8_t)v51, *v34, 8uLL), *(uint16x8_t *)((char *)v34 + v18), 8uLL);
            v56.i16[0] = *(_OWORD *)((char *)v34 + v18);
            v56.i16[1] = BYTE2(*(_OWORD *)((char *)v34 + v18));
            v56.i16[2] = BYTE4(*(unint64_t *)((char *)v34->i64 + v18));
            v56.i16[3] = BYTE6(*(unint64_t *)((char *)v34->i64 + v18));
            v56.i16[4] = *(uint64_t *)((char *)&v34->i64[1] + v18);
            v56.i16[5] = BYTE2(*(uint64_t *)((char *)&v34->i64[1] + v18));
            v56.i16[6] = BYTE12(*(unsigned long long *)((char *)v34 + v18));
            v56.i16[7] = BYTE14(*(unsigned long long *)((char *)v34 + v18));
            int16x8_t v57 = vaddq_s16(v56, v54);
            int16x8_t v58 = (int16x8_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 2uLL);
            int16x8_t v59 = vaddq_s16(v58, v57);
            *(int8x8_t *)v59.i8 = vrshrn_n_s16(v59, 2uLL);
            *(int8x8_t *)v58.i8 = vrshrn_n_s16(v58, 1uLL);
            v85.val[1 - v11] = vzip1q_s8((int8x16_t)v59, (int8x16_t)v58);
            int16x8_t v60 = vaddq_s16(v55, v53);
            *(int8x8_t *)v60.i8 = vrshrn_n_s16(v60, 2uLL);
            *(int8x8_t *)v55.i8 = vmovn_s16(v53);
            v85.val[1] = vzip1q_s8((int8x16_t)v60, (int8x16_t)v55);
            int16x8_t v61 = vsubq_s16(v52, (int16x8_t)vmvnq_s8(vextq_s8((int8x16_t)v52, (int8x16_t)v52, 2uLL)));
            *(int8x8_t *)v61.i8 = vshrn_n_s16(v61, 1uLL);
            v85.val[v11 + 1] = vzip1q_s8(a8, (int8x16_t)v61);
            int8x16x3_t v86 = *(int8x16x3_t *)v85.val[0].i8;
            vst3q_s8(v50, v86);
            float v34 = (uint16x8_t *)((char *)v34 + 14);
            v50 += 42;
          }
          while ((unint64_t)v34 <= v49);
        }
      }
      uint64_t v62 = (int)v34 - (int)v29;
      int32x2_t v63 = &v29->u8[v62];
      int v64 = &v30[(int)v9 * (uint64_t)(int)v62];
      unint64_t v65 = v16 + v28 - 2;
      if (v9 == 3)
      {
        if (v11 <= 0)
        {
          if ((unint64_t)v63 <= v65)
          {
            int v83 = v10;
            int v66 = &v29->u8[v62 + 1];
            do
            {
              uint64_t v73 = v66 + 1;
              unsigned int v74 = (*v66 + v66[v15 - 1] + v66[v20 - 1] + v66[v18] + 2) >> 2;
              v64[1] = (*(v66 - 1) + v66[1] + v66[v18 - 1] + v66[v22 - 1] + 2) >> 2;
              *int v64 = v74;
              *(v64 - 1) = v66[v21 - 1];
              unsigned int v75 = (v66[v21 - 1] + v66[v23 - 1] + 1) >> 1;
              v64[4] = (v66[1] + v66[v22 - 1] + 1) >> 1;
              v64[3] = v66[v20 - 1];
              v64[2] = v75;
              v64 += v17;
              v66 += 2;
            }
            while ((unint64_t)v73 <= v65);
            goto LABEL_47;
          }
        }
        else if ((unint64_t)v63 <= v65)
        {
          int v83 = v10;
          int v66 = &v29->u8[v62 + 1];
          do
          {
            BOOL v67 = v66 + 1;
            unsigned int v68 = (*v66 + v66[v15 - 1] + v66[v20 - 1] + v66[v18] + 2) >> 2;
            *(v64 - 1) = (*(v66 - 1) + v66[1] + v66[v18 - 1] + v66[v22 - 1] + 2) >> 2;
            *int v64 = v68;
            v64[1] = v66[v21 - 1];
            unsigned int v69 = (v66[v21 - 1] + v66[v23 - 1] + 1) >> 1;
            v64[2] = (v66[1] + v66[v22 - 1] + 1) >> 1;
            v64[3] = v66[v20 - 1];
            v64[4] = v69;
            v64 += v17;
            v66 += 2;
          }
          while ((unint64_t)v67 <= v65);
LABEL_47:
          int32x2_t v63 = v66 - 1;
          a2 = v82;
          int v10 = v83;
        }
      }
      else if (v11 <= 0)
      {
        if ((unint64_t)v63 <= v65)
        {
          int v83 = v10;
          int v66 = &v29->u8[v62 + 1];
          do
          {
            uint64_t v76 = v66 + 1;
            unsigned int v77 = (*(v66 - 1) + v66[1] + v66[v18 - 1] + v66[v22 - 1] + 2) >> 2;
            unsigned int v78 = (*v66 + v66[v15 - 1] + v66[v20 - 1] + v66[v18] + 2) >> 2;
            *(v64 - 1) = v66[v21 - 1];
            *int v64 = v78;
            v64[1] = v77;
            v64[2] = -1;
            unsigned int v79 = (v66[1] + v66[v22 - 1] + 1) >> 1;
            v64[3] = (v66[v21 - 1] + v66[v23 - 1] + 1) >> 1;
            v64[4] = v66[v20 - 1];
            v64[5] = v79;
            v64[6] = -1;
            v64 += v17;
            v66 += 2;
          }
          while ((unint64_t)v76 <= v65);
          goto LABEL_47;
        }
      }
      else if ((unint64_t)v63 <= v65)
      {
        int v83 = v10;
        int v66 = &v29->u8[v62 + 1];
        do
        {
          int32x2_t v70 = v66 + 1;
          unsigned int v71 = (*v66 + v66[v15 - 1] + v66[v20 - 1] + v66[v18] + 2) >> 2;
          *(v64 - 1) = (*(v66 - 1) + v66[1] + v66[v18 - 1] + v66[v22 - 1] + 2) >> 2;
          *int v64 = v71;
          v64[1] = v66[v21 - 1];
          v64[2] = -1;
          unsigned int v72 = (v66[v21 - 1] + v66[v23 - 1] + 1) >> 1;
          v64[3] = (v66[1] + v66[v22 - 1] + 1) >> 1;
          v64[4] = v66[v20 - 1];
          v64[5] = v72;
          v64[6] = -1;
          v64 += v17;
          v66 += 2;
        }
        while ((unint64_t)v70 <= v65);
        goto LABEL_47;
      }
      if ((unint64_t)v63 < v16 + v28
        && (unsigned int v80 = (v63[1] + v63[v15] + v63[v20] + v63[v84] + 2) >> 2,
            v64[-v11] = (*v63 + v63[2] + v63[v18] + v63[v22] + 2) >> 2,
            *int v64 = v80,
            v64[v11] = v63[v21],
            v9 == 4))
      {
        v64[2] = -1;
      }
      else if (v9 == 3)
      {
        *(v13 - 4) = *(v13 - 1);
        *(_WORD *)(v13 - 3) = *(_WORD *)v13;
        v13[3 * *(_DWORD *)(result + 208) - 1] = v13[3 * *(int *)(result + 208) - 4];
        uint64_t v81 = &v13[3 * *(int *)(result + 208)];
        unsigned char *v81 = *(v81 - 3);
        int v26 = 3 * *(_DWORD *)(result + 208);
        int v27 = v26 + 1;
        goto LABEL_11;
      }
      *(_DWORD *)(v13 - 5) = *(_DWORD *)(v13 - 1);
      v13[*(_DWORD *)(result + 208) * (int)v9 - 1] = v13[*(int *)(result + 208) * (uint64_t)(int)v9 - 5];
      int v25 = &v13[*(int *)(result + 208) * (uint64_t)(int)v9];
      unsigned char *v25 = *(v25 - 4);
      v13[*(_DWORD *)(result + 208) * (int)v9 + 1] = v13[*(int *)(result + 208) * (uint64_t)(int)v9 - 3];
      int v26 = *(_DWORD *)(result + 208) * v9;
      int v27 = v26 + 2;
LABEL_11:
      int v10 = v10 == 0;
      v13[v27] = v13[v26 - 2];
      int v11 = -v11;
LABEL_12:
      v16 += v15;
      v13 += (int)v12;
      ++v8;
    }
    while (v8 < a2[1]);
  }
  return result;
}

uint64_t sub_100321BD8(uint64_t a1)
{
  *(void *)a1 = off_100499868;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  unint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100321D14(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, void *a6, int a7, int a8)
{
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_1004998A8;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v17 = *(void **)(a2 + 72);
    uint64_t v18 = *(void **)(a1 + 80);
    void *v18 = *v17;
    v18[1] = v17[1];
  }
  long long v19 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v21 = *(void *)(a3 + 48);
  uint64_t v20 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v21;
  *(void *)(a1 + 160) = v20;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v19;
  if (v20) {
    atomic_fetch_add((atomic_uint *volatile)(v20 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v22 = *(void **)(a3 + 72);
    uint64_t v23 = *(void **)(a1 + 176);
    *uint64_t v23 = *v22;
    v23[1] = v22[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(unsigned char *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = *a6;
  *(_DWORD *)(a1 + 216) = a7;
  *(_DWORD *)(a1 + 220) = a8;
  return a1;
}

void sub_100321E84(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100321EA0(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100321EB4(uint64_t a1)
{
  sub_100322774(a1);

  operator delete();
}

uint64_t sub_100321EEC(uint64_t result, _DWORD *a2)
{
  int v6 = *a2;
  if (*a2 < a2[1])
  {
    uint64_t v7 = 0;
    if (v6) {
      int v8 = *(_DWORD *)(result + 200) == 0;
    }
    else {
      int v8 = *(_DWORD *)(result + 200);
    }
    unsigned int v10 = *(_DWORD *)(result + 216);
    LODWORD(v9) = *(_DWORD *)(result + 220);
    if (v6) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v9;
    }
    if (v6) {
      uint64_t v9 = v9;
    }
    else {
      uint64_t v9 = v10;
    }
    uint64_t v12 = *(void *)(result + 184);
    uint64_t v13 = *(void *)(result + 88);
    uint64_t v14 = (int)v13;
    uint64_t v15 = *(void *)(result + 24) + v6 * (uint64_t)(int)v13;
    uint64_t v16 = 2 * (int)v13;
    uint64_t v17 = v16 | 1;
    uint64_t v18 = ((v13 << 32) + 0x200000000) >> 32;
    uint64_t v158 = (int)v16 + 2;
    uint64_t v19 = ((uint64_t)&_mh_execute_header + (v13 << 32)) >> 32;
    uint64_t v20 = (int)v12;
    uint64_t v21 = v15 - 1;
    uint64_t v153 = ((v13 << 32) + 0x300000000) >> 32;
    uint64_t v146 = v19 + 1;
    uint64_t v145 = v18 + 1;
    int8x16_t v22 = (int8x16_t)xmmword_1004048C0;
    int8x16_t v23 = (int8x16_t)xmmword_1004048B0;
    long long v24 = xmmword_1004048A0;
    uint16x4_t v25 = (uint16x4_t)vdup_n_s16(0x2591u);
    uint16x4_t v26 = (uint16x4_t)vdup_n_s16(0x4B22u);
    uint64_t v144 = (int)v13 + 1;
    int v27 = (unsigned char *)(*(void *)(result + 120) + (int)v12 + 1 + v6 * (int)v12);
    uint64_t v149 = v15 - 1;
    uint64_t v150 = (int)v12;
    uint64_t v154 = v19;
    uint64_t v155 = v18;
    uint64_t v151 = result;
    uint64_t v152 = a2;
    do
    {
      uint64_t v29 = *(int *)(result + 208);
      if ((int)v29 <= 0)
      {
        v27[v29] = 0;
        *(v27 - 1) = 0;
      }
      else
      {
        unint64_t v30 = *(int *)(result + 208);
        unint64_t v31 = v15;
        int32x2_t v32 = (int8x8_t *)v27;
        if (v8)
        {
          unint64_t v31 = v15 + 1;
          *int v27 = ((*(unsigned __int8 *)(v15 + v18) + *(unsigned __int8 *)(v15 + v14)) * v9
                + (*(unsigned __int8 *)(v15 + v17) + *(unsigned __int8 *)(v15 + 1)) * v11
                + 19234 * *(unsigned __int8 *)(v15 + v19)
                + 0x4000) >> 15;
          int32x2_t v32 = (int8x8_t *)(v27 + 1);
          unint64_t v30 = *(int *)(result + 208);
        }
        unint64_t v33 = v31 + v30 - 18;
        LODWORD(v30) = v31;
        if (v33 >= v31)
        {
          unint64_t v30 = v31;
          float v34 = v32;
          do
          {
            int8x16_t v35 = *(int8x16_t *)(v30 + v14);
            int16x8_t v36 = (int16x8_t)vshrq_n_u16((uint16x8_t)v35, 8uLL);
            int16x8_t v37 = (int16x8_t)vsraq_n_u16((uint16x8_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 2uLL), (uint16x8_t)v35, 8uLL);
            v35.i16[0] = v35.u8[0];
            v35.i16[1] = BYTE2(*(_OWORD *)(v30 + v14));
            v35.i16[2] = BYTE4(*(void *)(v30 + v14));
            v35.i16[3] = BYTE6(*(void *)(v30 + v14));
            v35.i16[4] = *(void *)(v30 + v14 + 8);
            v35.i16[5] = BYTE2(*(void *)(v30 + v14 + 8));
            v35.i16[6] = BYTE12(*(_OWORD *)(v30 + v14));
            v35.i16[7] = BYTE14(*(_OWORD *)(v30 + v14));
            int16x8_t v38 = (int16x8_t)vextq_s8(v35, v35, 2uLL);
            v39.i16[0] = *(_OWORD *)v30;
            v39.i16[1] = BYTE2(*(_OWORD *)v30);
            v39.i16[2] = BYTE4(*(void *)v30);
            v39.i16[3] = BYTE6(*(void *)v30);
            v39.i16[4] = *(void *)(v30 + 8);
            v39.i16[5] = BYTE2(*(void *)(v30 + 8));
            v39.i16[6] = BYTE12(*(_OWORD *)v30);
            v39.i16[7] = BYTE14(*(_OWORD *)v30);
            v40.i16[0] = *(_OWORD *)(v30 + v16);
            v40.i16[1] = BYTE2(*(_OWORD *)(v30 + v16));
            v40.i16[2] = BYTE4(*(void *)(v30 + v16));
            v40.i16[3] = BYTE6(*(void *)(v30 + v16));
            v40.i16[4] = *(void *)(v30 + v16 + 8);
            v40.i16[5] = BYTE2(*(void *)(v30 + v16 + 8));
            v40.i16[6] = BYTE12(*(_OWORD *)(v30 + v16));
            v40.i16[7] = BYTE14(*(_OWORD *)(v30 + v16));
            int16x8_t v41 = vaddq_s16(v40, v39);
            int16x8_t v42 = (int16x8_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 2uLL);
            int16x8_t v43 = vdupq_n_s16(0x4B22u);
            v2.i32[0] = 2 * v11;
            v3.i32[0] = 4 * v11;
            v4.i32[0] = 2 * v9;
            v5.i32[0] = 4 * v9;
            *(int8x8_t *)v35.i8 = vrshrn_n_s16(vaddq_s16(vqdmulhq_s16(vaddq_s16((int16x8_t)vsraq_n_u16(vsraq_n_u16((uint16x8_t)v35, *(uint16x8_t *)v30, 8uLL), *(uint16x8_t *)(v30 + v16), 8uLL), v38), v43), vaddq_s16(vqdmulhq_lane_s16(vaddq_s16(v42, v41), *(int16x4_t *)v2.i8, 0), vqdmulhq_lane_s16(vshlq_n_s16(v36, 2uLL), v4, 0))), 2uLL);
            *(int8x8_t *)v41.i8 = vrshrn_n_s16(vaddq_s16(vaddq_s16(vqdmulhq_s16(vshlq_n_s16(v38, 2uLL), v43), vqdmulhq_lane_s16(v42, *(int16x4_t *)v3.i8, 0)), vqdmulhq_lane_s16(v37, *(int16x4_t *)v5.i8, 0)), 2uLL);
            *float v34 = vzip1_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v41.i8);
            v34[1] = vzip2_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v41.i8);
            v30 += 14;
            float v34 = (int8x8_t *)((char *)v34 + 14);
          }
          while (v30 <= v33);
        }
        unint64_t v44 = v15 + v29;
        uint64_t v45 = (int)v30 - (int)v31;
        int8x16_t v46 = (unsigned __int8 *)(v31 + v45);
        int16x8_t v47 = (char *)v32 + v45;
        unint64_t v48 = v15 + v29 - 2;
        if (v31 + v45 <= v48)
        {
          unint64_t v156 = v15 + v29;
          int v157 = v8;
          unsigned int v49 = 4 * v9;
          uint64_t v50 = v46 + 2;
          unint64_t v51 = v149 + v14 * v7 + v29;
          if ((unint64_t)(v46 + 2) > v51) {
            unint64_t v51 = (unint64_t)(v46 + 2);
          }
          unint64_t v52 = v51 + ~v31 - v45;
          if (v52 >= 0x20)
          {
            uint64_t v53 = (v52 & 0xFFFFFFFFFFFFFFFELL) + v45;
            unint64_t v54 = (unint64_t)v32 + v53 + 2;
            uint64_t v55 = v31 + v53;
            unint64_t v56 = v31 + v18 + v45;
            BOOL v58 = (unint64_t)v47 < v31 + v53 + v146 && v31 + v19 + v45 < v54;
            BOOL v148 = v58;
            BOOL v60 = (unint64_t)v47 < v55 + v16 + 2 && v31 + v16 + v45 < v54;
            BOOL v147 = v60;
            BOOL v62 = (unint64_t)v47 < v55 + v145 && v56 < v54;
            BOOL v64 = (unint64_t)v47 < v55 + v144 && v31 + v14 + v45 < v54;
            BOOL v66 = (unint64_t)v47 < v55 + 3 && (unint64_t)v46 < v54;
            BOOL v68 = (unint64_t)v47 < v55 + (int)v16 + 3 && v31 + v158 + v45 < v54;
            if (v31 + v153 + v45 >= v54 || (unint64_t)v47 >= v55 + v153 + 1)
            {
              uint64_t v19 = v154;
              if (v148 || v147 || v62 || v64 || v66)
              {
                uint64_t v18 = v155;
              }
              else
              {
                uint64_t v18 = v155;
                if (!v68)
                {
                  uint64_t v70 = (v52 >> 1) + 1;
                  uint64_t v71 = v70 & 0xF;
                  if ((v70 & 0xF) == 0) {
                    uint64_t v71 = 16;
                  }
                  uint64_t v72 = 2 * (v70 - v71);
                  v47 += v72;
                  int32x4_t v73 = vdupq_n_s32(v11);
                  int32x4_t v74 = vdupq_n_s32(v49);
                  v46 += v72;
                  int32x4_t v75 = vdupq_n_s32(v9);
                  uint64_t v76 = (unsigned __int8 *)(v21 + v29);
                  if ((unint64_t)v50 > v21 + v29) {
                    uint64_t v76 = v50;
                  }
                  uint64_t v77 = ~((unint64_t)&v76[~v31 - v45] >> 1) + v71;
                  unint64_t v78 = v31 + v153;
                  unint64_t v79 = v31 + v154;
                  unint64_t v80 = v31 + v155;
                  uint64_t v81 = v31 + v14;
                  unint64_t v82 = v31 + v158;
                  unint64_t v83 = v31 + v16;
                  unint64_t v84 = v31 + 2;
                  int8x16_t v85 = (int8x16_t)v24;
                  do
                  {
                    int8x16x3_t v86 = (const char *)(v84 + v45);
                    int8x16x4_t v87 = (const char *)(v84 + v45 - 2);
                    unsigned long long v88 = (unsigned __int128)vld2q_s8(v87);
                    unsigned long long v89 = (unsigned __int128)vld2q_s8(v86);
                    unint64_t v90 = (const char *)(v83 + v45);
                    int8x16x2_t v159 = vld2q_s8(v90);
                    uint16x4_t v91 = v26;
                    uint16x8_t v92 = vaddl_u8(*(uint8x8_t *)&v89, *(uint8x8_t *)&v88);
                    uint16x8_t v93 = vaddl_high_u8((uint8x16_t)v89, (uint8x16_t)v88);
                    uint16x8_t v94 = vmovl_u8(*(uint8x8_t *)v159.val[0].i8);
                    uint16x8_t v95 = vmovl_high_u8((uint8x16_t)v159.val[0]);
                    int32x4_t v96 = (int32x4_t)vaddl_high_u16(v93, v95);
                    int32x4_t v97 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v93.i8, *(uint16x4_t *)v95.i8);
                    int32x4_t v98 = (int32x4_t)vaddl_high_u16(v92, v94);
                    int32x4_t v99 = (int32x4_t)vaddl_u16(*(uint16x4_t *)v92.i8, *(uint16x4_t *)v94.i8);
                    uint64_t v100 = (const char *)(v82 + v45);
                    unsigned long long v101 = (unsigned __int128)vld2q_s8(v100);
                    int32x4_t v102 = (int32x4_t)vqtbl1q_s8((int8x16_t)v101, v22);
                    int32x4_t v103 = (int32x4_t)vqtbl1q_s8((int8x16_t)v101, v23);
                    int32x4_t v104 = (int32x4_t)vqtbl1q_s8((int8x16_t)v101, v85);
                    uint64_t v105 = (const char *)(v84 + v45 - 1);
                    int8x16x2_t v160 = vld2q_s8(v105);
                    int32x4_t v106 = (int32x4_t)vqtbl1q_s8((int8x16_t)v101, (int8x16_t)xmmword_100404890);
                    uint64_t v107 = (const char *)(v81 + v45);
                    unsigned long long v108 = (unsigned __int128)vld2q_s8(v107);
                    int8x16_t v109 = v22;
                    uint16x8_t v110 = vaddl_u8(*(uint8x8_t *)&v108, *(uint8x8_t *)v160.val[0].i8);
                    BOOL v111 = (const char *)(v80 + v45);
                    unsigned long long v112 = (unsigned __int128)vld2q_s8(v111);
                    int8x16_t v113 = v23;
                    uint16x8_t v114 = vaddl_high_u8((uint8x16_t)v108, (uint8x16_t)v160.val[0]);
                    int32x4_t v115 = (int32x4_t)vqtbl1q_s8((int8x16_t)v112, (int8x16_t)xmmword_100404890);
                    int32x4_t v116 = (int32x4_t)vqtbl1q_s8((int8x16_t)v112, v85);
                    int32x4_t v117 = (int32x4_t)vqtbl1q_s8((int8x16_t)v112, v113);
                    int32x4_t v118 = (int32x4_t)vqtbl1q_s8((int8x16_t)v112, v109);
                    uint32x4_t v119 = vaddw_high_u16((uint32x4_t)v118, v114);
                    uint32x4_t v120 = vaddw_u16((uint32x4_t)v117, *(uint16x4_t *)v114.i8);
                    uint16x8_t v121 = vmovl_high_u8((uint8x16_t)v159.val[1]);
                    v159.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v159.val[1].i8);
                    v159.val[1] = (int8x16_t)vaddw_u16(vaddw_u16((uint32x4_t)v115, *(uint16x4_t *)v110.i8), *(uint16x4_t *)v159.val[0].i8);
                    v159.val[0] = (int8x16_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v116, v110), (uint16x8_t)v159.val[0]);
                    __n128 v122 = (const char *)(v79 + v45);
                    unsigned long long v123 = (unsigned __int128)vld2q_s8(v122);
                    int32x4_t v124 = (int32x4_t)vaddw_u16(v120, *(uint16x4_t *)v121.i8);
                    int32x4_t v125 = (int32x4_t)vaddw_high_u16(v119, v121);
                    int32x4_t v126 = (int32x4_t)vqtbl1q_s8((int8x16_t)v123, v109);
                    int32x4_t v127 = (int32x4_t)vqtbl1q_s8((int8x16_t)v123, v113);
                    int32x4_t v128 = (int32x4_t)vqtbl1q_s8((int8x16_t)v123, v85);
                    int32x4_t v129 = (int32x4_t)vqtbl1q_s8((int8x16_t)v123, (int8x16_t)xmmword_100404890);
                    int8x16_t v23 = v113;
                    int32x4_t v130 = (int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vaddq_s32(v99, v106), v73), (uint16x4_t)vmovn_s32((int32x4_t)v159.val[1]), v25);
                    v159.val[1] = (int8x16_t)vmulq_s32(vaddq_s32(v98, v104), v73);
                    int16x4_t v4 = vmovn_s32(v124);
                    int8x16_t v22 = v109;
                    v159.val[1] = (int8x16_t)vmlal_u16((uint32x4_t)v159.val[1], (uint16x4_t)vmovn_s32((int32x4_t)v159.val[0]), v25);
                    v2.i64[0] = 0x800000008000;
                    v2.i64[1] = 0x800000008000;
                    v162.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vaddq_s32(v96, v102), v73), (uint16x4_t)vmovn_s32(v125), v25), v74, v126), v2), 0x10uLL);
                    v162.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(vmlaq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32(vaddq_s32(v97, v103), v73), (uint16x4_t)v4, v25), v74, v127), v2), 0x10uLL);
                    int32x4_t v3 = vmlaq_s32((int32x4_t)v159.val[1], v74, v128);
                    v162.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v3, v2), 0x10uLL);
                    int32x4_t v5 = vmlaq_s32(v130, v74, v129);
                    v162.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v5, v2), 0x10uLL);
                    v2.i32[1] = 471340048;
                    v162.val[2] = vqtbl4q_s8(v162, (int8x16_t)xmmword_1004047C0);
                    uint16x8_t v131 = vmovl_high_u8((uint8x16_t)v160.val[1]);
                    v160.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v160.val[1].i8);
                    int32x4_t v132 = (int32x4_t)vaddw_u16((uint32x4_t)v106, *(uint16x4_t *)v160.val[0].i8);
                    int32x4_t v133 = (int32x4_t)vaddw_high_u16((uint32x4_t)v104, (uint16x8_t)v160.val[0]);
                    int v134 = (const char *)(v78 + v45);
                    v160.val[0] = (int8x16_t)vld2q_s8(v134);
                    uint32x4_t v135 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v160.val[0], v85), v128), v75), v133, v73);
                    uint32x4_t v136 = (uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v160.val[0], v23), v127), v75), (int32x4_t)vaddw_u16((uint32x4_t)v103, *(uint16x4_t *)v131.i8), v73);
                    uint16x4_t v26 = v91;
                    v137.i64[0] = 0x400000004000;
                    v137.i64[1] = 0x400000004000;
                    v161.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v160.val[0], v22), v126), v75), (int32x4_t)vaddw_high_u16((uint32x4_t)v102, v131), v73), (uint16x4_t)vmovn_s32(v118), v26), v137), 0xFuLL);
                    v161.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v136, (uint16x4_t)vmovn_s32(v117), v26), v137), 0xFuLL);
                    v161.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v135, (uint16x4_t)vmovn_s32(v116), v26), v137), 0xFuLL);
                    v161.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32(vaddq_s32((int32x4_t)vqtbl1q_s8(v160.val[0], (int8x16_t)xmmword_100404890), v129), v75), v132, v73), (uint16x4_t)vmovn_s32(v115), v26), v137), 0xFuLL);
                    v162.val[3] = vqtbl4q_s8(v161, (int8x16_t)xmmword_1004047C0);
                    uint64_t v138 = (char *)v32 + v45;
                    vst2q_s8(v138, *(int8x16x2_t *)v162.val[2].i8);
                    v78 += 32;
                    v79 += 32;
                    v80 += 32;
                    v81 += 32;
                    v32 += 4;
                    v82 += 32;
                    v83 += 32;
                    v84 += 32;
                    v77 += 16;
                  }
                  while (v77);
                  uint64_t v19 = v154;
                  uint64_t v18 = v155;
                  long long v24 = (__int128)v85;
                }
              }
            }
            else
            {
              uint64_t v19 = v154;
              uint64_t v18 = v155;
            }
          }
          uint64_t v139 = 0;
          unint64_t v140 = &v46[v19];
          float32x4_t v141 = &v46[v18];
          uint64_t v142 = &v46[v158];
          do
          {
            BOOL v143 = &v47[v139];
            *BOOL v143 = (9617 * (v46[v14 + v139] + v46[v139 + 1] + v141[v139] + v46[v16 + 1 + v139])
                   + (v46[v139 + 2] + v46[v139] + v46[v16 + v139] + v142[v139]) * v11
                   + v49 * v140[v139]
                   + 0x8000) >> 16;
            v143[1] = ((v46[v153 + v139] + v140[v139]) * v9
                     + (v142[v139] + v46[v139 + 2]) * v11
                     + 19234 * v141[v139]
                     + 0x4000) >> 15;
            v139 += 2;
          }
          while ((unint64_t)&v46[v139] <= v48);
          v47 += v139;
          v46 += v139;
          uint64_t result = v151;
          a2 = v152;
          int v8 = v157;
          uint64_t v20 = v150;
          uint64_t v17 = v16 | 1;
          uint64_t v19 = v154;
          uint64_t v18 = v155;
          unint64_t v44 = v156;
        }
        if ((unint64_t)v46 < v44) {
          *int16x8_t v47 = (9617 * (v46[v14] + v46[1] + v46[v18] + v46[v17])
        }
                + (v46[2] + *v46 + v46[v16] + v46[v158]) * v11
                + 4 * v9 * v46[v19]
                + 0x8000) >> 16;
        int v8 = v8 == 0;
        *(v27 - 1) = *v27;
        v27[*(int *)(result + 208)] = v27[*(int *)(result + 208) - 1];
        uint64_t v28 = v11;
        uint64_t v11 = v9;
        uint64_t v9 = v28;
      }
      ++v6;
      v15 += v14;
      v27 += v20;
      ++v7;
      v21 += v14;
    }
    while (v6 < a2[1]);
  }
  return result;
}

uint64_t sub_100322774(uint64_t a1)
{
  *(void *)a1 = off_1004998A8;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  int32x4_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_1003228B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, void *a6, int a7, int a8)
{
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_1004998E8;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v17 = *(void **)(a2 + 72);
    uint64_t v18 = *(void **)(a1 + 80);
    void *v18 = *v17;
    v18[1] = v17[1];
  }
  long long v19 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v21 = *(void *)(a3 + 48);
  uint64_t v20 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v21;
  *(void *)(a1 + 160) = v20;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v19;
  if (v20) {
    atomic_fetch_add((atomic_uint *volatile)(v20 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    int8x16_t v22 = *(void **)(a3 + 72);
    int8x16_t v23 = *(void **)(a1 + 176);
    *int8x16_t v23 = *v22;
    v23[1] = v22[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(unsigned char *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = *a6;
  *(_DWORD *)(a1 + 216) = a7;
  *(_DWORD *)(a1 + 220) = a8;
  return a1;
}

void sub_100322A20(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100322A3C(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100322A50(uint64_t a1)
{
  sub_1003230F0(a1);

  operator delete();
}

uint64_t sub_100322A88(uint64_t result, int *a2)
{
  int v3 = *a2;
  int v2 = a2[1];
  LODWORD(v4) = *(_DWORD *)(result + 216);
  unsigned int v5 = *(_DWORD *)(result + 220);
  if (v3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = v5;
  }
  if (v3) {
    int v7 = *(_DWORD *)(result + 200) == 0;
  }
  else {
    int v7 = *(_DWORD *)(result + 200);
  }
  int v8 = v2 - v3;
  if (v2 > v3)
  {
    uint64_t v9 = *(void *)(result + 184);
    unsigned int v10 = (_WORD *)(*(void *)(result + 120)
                  + ((uint64_t)((uint64_t)&_mh_execute_header + ((unint64_t)v9 >> 1 << 32)) >> 31)
                  + 2 * (int)(v3 * ((unint64_t)v9 >> 1)));
    uint64_t v11 = *(int *)(result + 208);
    uint64_t v12 = (int)(v9 >> 1);
    if ((int)v11 <= 0)
    {
      do
      {
        v10[v11] = 0;
        *(v10 - 1) = 0;
        v10 += v12;
        --v8;
      }
      while (v8);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(result + 88) >> 1;
      uint64_t v15 = v14 << 32;
      uint64_t v16 = (int)v14;
      int v17 = v14;
      uint64_t v18 = 2 * (int)v14;
      uint64_t v19 = (int)v18 | 1;
      uint64_t v20 = ((v14 << 32) + 0x200000000) >> 32;
      uint64_t v21 = (uint64_t)&_mh_execute_header + (v14 << 32);
      uint64_t v22 = v21 >> 32;
      uint64_t v23 = *(void *)(result + 24);
      uint64_t result = v15 + 0x300000000;
      uint64_t v102 = v11;
      uint64_t v24 = (int)v11 - 1;
      unint64_t v25 = v23 + 2 * v3 * (uint64_t)v17;
      uint64_t v26 = v11;
      uint64_t v27 = v15 >> 31;
      uint64_t v101 = (v15 + 0x300000000) >> 31;
      uint64_t v100 = v21 >> 31;
      uint64_t v99 = (v21 >> 31) + 2;
      uint64_t v111 = v18;
      uint64_t v120 = 2 * v18;
      uint64_t v98 = 2 * v18 + 4;
      uint64_t v97 = (v15 + 0x200000000) >> 31;
      uint64_t v96 = (v15 >> 31) + 2;
      uint64_t v107 = (int)v18 + 2;
      uint64_t v119 = 2 * v107;
      uint64_t v118 = 2 * ((v15 + 0x300000000) >> 32);
      uint64_t v117 = 2 * (v21 >> 32);
      uint64_t v116 = 2 * v20;
      uint64_t v115 = 2 * v16;
      int32x4_t v28 = vdupq_n_s32(0x2591u);
      uint16x8_t v29 = (uint16x8_t)vdupq_n_s16(0x4B22u);
      uint64_t v104 = v15 >> 31;
      uint64_t v105 = v23 + 2 * (v11 + v3 * (uint64_t)v17) - 3;
      unint64_t v30 = v105;
      int v114 = v2;
      uint64_t v112 = v16;
      uint64_t v113 = (int)(v9 >> 1);
      uint64_t v109 = (v15 + 0x200000000) >> 32;
      uint64_t v110 = v19;
      uint64_t v108 = v21 >> 32;
      uint64_t v106 = v24;
      do
      {
        uint64_t v32 = v4;
        unint64_t v33 = v25;
        float v34 = v10;
        if (v7)
        {
          unint64_t v33 = v25 + 2;
          _WORD *v10 = ((*(unsigned __int16 *)(v25 + 2 * v20) + *(unsigned __int16 *)(v25 + 2 * v16)) * v6
                + (*(unsigned __int16 *)(v25 + 2 * v19) + *(unsigned __int16 *)(v25 + 2)) * v32
                + 19234 * *(unsigned __int16 *)(v25 + 2 * v22)
                + 0x4000) >> 15;
          float v34 = v10 + 1;
        }
        unint64_t v35 = v25 + 2 * v26;
        unint64_t v36 = v35 - 4;
        if (v33 <= v35 - 4)
        {
          unint64_t v121 = v25 + 2 * v26;
          unint64_t v37 = v105 + v27 * v13;
          unsigned int v38 = 4 * v6;
          if (v37 <= v33 + 4) {
            unint64_t v37 = v33 + 4;
          }
          unint64_t v39 = v37 + ~v33;
          if (v39 >= 0x20)
          {
            unint64_t v40 = (unint64_t)v34 + (v39 & 0xFFFFFFFFFFFFFFFCLL) + 4;
            unint64_t v41 = v33 + (v39 & 0xFFFFFFFFFFFFFFFCLL);
            unint64_t v103 = v41 + v101 + 2;
            unint64_t v42 = v41 + v98;
            unint64_t v43 = v41 + v97 + 2;
            unint64_t v44 = v41 + v96;
            unint64_t v45 = v41 + 6;
            unint64_t v46 = v41 + ((2 * v107) | 2);
            BOOL v48 = (unint64_t)v34 < v41 + v99 && v33 + v100 < v40;
            BOOL v50 = (unint64_t)v34 < v42 && v33 + v120 < v40;
            BOOL v52 = (unint64_t)v34 < v43 && v33 + v97 < v40;
            BOOL v54 = (unint64_t)v34 < v44 && v33 + v27 < v40;
            BOOL v56 = (unint64_t)v34 < v45 && v33 < v40;
            BOOL v58 = (unint64_t)v34 < v46 && v33 + v119 < v40;
            if (v33 + v101 >= v40 || (unint64_t)v34 >= v103)
            {
              uint64_t v26 = v102;
              if (!v48 && !v50 && !v52 && !v54 && !v56 && !v58)
              {
                unint64_t v60 = 0;
                uint64_t v61 = (v39 >> 2) + 1;
                uint64_t v62 = v61 & 7;
                if ((v61 & 7) == 0) {
                  uint64_t v62 = 8;
                }
                uint64_t v63 = 2 * (v61 - v62);
                BOOL v64 = &v34[v63];
                unint64_t v65 = v33 + v63 * 2;
                int32x4_t v66 = vdupq_n_s32(v32);
                int32x4_t v67 = vdupq_n_s32(v38);
                int32x4_t v68 = vdupq_n_s32(v6);
                if (v30 <= v33 + 4) {
                  unint64_t v69 = v33 + 4;
                }
                else {
                  unint64_t v69 = v30;
                }
                unint64_t v70 = ~((~v33 + v69) >> 2) + v62;
                do
                {
                  uint64_t v71 = (const __int16 *)(v33 + v60);
                  unsigned long long v72 = (unsigned __int128)vld2q_s16(v71);
                  int32x4_t v73 = (const __int16 *)(v33 + v120 + v60);
                  int16x8x2_t v122 = vld2q_s16(v73);
                  int32x4_t v74 = (const __int16 *)(v33 + v119 + v60);
                  unsigned long long v75 = (unsigned __int128)vld2q_s16(v74);
                  uint64_t v76 = (const __int16 *)(v33 + v60 + 4);
                  unsigned long long v77 = (unsigned __int128)vld2q_s16(v76);
                  unint64_t v78 = (const __int16 *)(v33 + v60 + 2);
                  int16x8x2_t v123 = vld2q_s16(v78);
                  uint32x4_t v79 = vaddl_u16(*(uint16x4_t *)&v77, *(uint16x4_t *)&v72);
                  unint64_t v80 = (const __int16 *)(v33 + v115 + v60);
                  unsigned long long v81 = (unsigned __int128)vld2q_s16(v80);
                  uint32x4_t v82 = vaddl_high_u16((uint16x8_t)v77, (uint16x8_t)v72);
                  unint64_t v83 = (const __int16 *)(v33 + v116 + v60);
                  unsigned long long v84 = (unsigned __int128)vld2q_s16(v83);
                  uint32x4_t v85 = vaddw_u16(v79, *(uint16x4_t *)v122.val[0].i8);
                  int8x16x3_t v86 = (const __int16 *)(v33 + v117 + v60);
                  unsigned long long v87 = (unsigned __int128)vld2q_s16(v86);
                  int32x4_t v88 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(v82, (uint16x8_t)v122.val[0]), (uint16x8_t)v75);
                  v122.val[0] = (int16x8_t)vmulq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v81, (uint16x8_t)v123.val[0]), (uint16x8_t)v84), (uint16x8_t)v122.val[1]), v28);
                  int32x4_t v89 = vmlaq_s32(vmulq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)&v81, *(uint16x4_t *)v123.val[0].i8), *(uint16x4_t *)&v84), *(uint16x4_t *)v122.val[1].i8), v28), (int32x4_t)vaddw_u16(v85, *(uint16x4_t *)&v75), v66);
                  unint64_t v90 = (const __int16 *)(v33 + v118 + v60);
                  v122.val[1] = (int16x8_t)vld2q_s16(v90);
                  v123.val[0] = vraddhn_high_s32(vraddhn_s32(vmlaq_s32(v89, v67, (int32x4_t)vmovl_u16(*(uint16x4_t *)&v87)), (int32x4_t)0), vmlaq_s32(vmlaq_s32((int32x4_t)v122.val[0], v88, v66), v67, (int32x4_t)vmovl_high_u16((uint16x8_t)v87)), (int32x4_t)0);
                  v123.val[1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v122.val[1].i8, *(uint16x4_t *)&v87), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)&v75, *(uint16x4_t *)v123.val[1].i8), v66), *(uint16x4_t *)&v84, *(uint16x4_t *)v29.i8), 0xFuLL), (int32x4_t)vmlal_high_u16((uint32x4_t)vmlaq_s32(vmulq_s32((int32x4_t)vaddl_high_u16(
                                                                            (uint16x8_t)v122.val[1],
                                                                            (uint16x8_t)v87),
                                                               v68),
                                                             (int32x4_t)vaddl_high_u16((uint16x8_t)v75, (uint16x8_t)v123.val[1]), v66), (uint16x8_t)v84, v29), 0xFuLL);
                  uint16x4_t v91 = &v34[v60 / 2];
                  vst2q_s16(v91, v123);
                  v60 += 32;
                  v70 += 8;
                }
                while (v70);
                float v34 = v64;
                unint64_t v33 = v65;
              }
            }
            else
            {
              uint64_t v26 = v102;
            }
          }
          unint64_t v92 = 0;
          uint64_t result = v33 + v117;
          unint64_t v93 = v33 + v116;
          unint64_t v94 = v33 + v119;
          do
          {
            uint16x8_t v95 = &v34[v92 / 2];
            _WORD *v95 = (9617
                  * (*(unsigned __int16 *)(v33 + v115 + v92)
                   + *(unsigned __int16 *)(v33 + v92 + 2)
                   + *(unsigned __int16 *)(v93 + v92)
                   + *(unsigned __int16 *)(v33 + v120 + v92 + 2))
                  + (*(unsigned __int16 *)(v33 + v92 + 4)
                   + *(unsigned __int16 *)(v33 + v92)
                   + *(unsigned __int16 *)(v33 + v120 + v92)
                   + *(unsigned __int16 *)(v94 + v92))
                  * v32
                  + v38 * *(unsigned __int16 *)(result + v92)
                  + 0x8000) >> 16;
            v95[1] = ((*(unsigned __int16 *)(v33 + v118 + v92) + *(unsigned __int16 *)(result + v92)) * v6
                    + (*(unsigned __int16 *)(v94 + v92) + *(unsigned __int16 *)(v33 + v92 + 4)) * v32
                    + 19234 * *(unsigned __int16 *)(v93 + v92)
                    + 0x4000) >> 15;
            v92 += 4;
          }
          while (v33 + v92 <= v36);
          float v34 = (_WORD *)((char *)v34 + v92);
          v33 += v92;
          int v2 = v114;
          uint64_t v16 = v112;
          uint64_t v12 = v113;
          uint64_t v20 = v109;
          uint64_t v19 = v110;
          uint64_t v22 = v108;
          uint64_t v24 = v106;
          uint64_t v27 = v104;
          unint64_t v35 = v121;
        }
        if (v33 < v35) {
          *float v34 = (9617
        }
                * (*(unsigned __int16 *)(v33 + 2 * v16)
                 + *(unsigned __int16 *)(v33 + 2)
                 + *(unsigned __int16 *)(v33 + 2 * v20)
                 + *(unsigned __int16 *)(v33 + 2 * v19))
                + (*(unsigned __int16 *)(v33 + 4)
                 + *(unsigned __int16 *)v33
                 + *(unsigned __int16 *)(v33 + 2 * v111)
                 + *(unsigned __int16 *)(v33 + 2 * v107))
                * v32
                + 4 * v6 * *(unsigned __int16 *)(v33 + 2 * v22)
                + 0x8000) >> 16;
        int v7 = v7 == 0;
        __int16 v31 = v10[v24];
        v25 += 2 * v16;
        *(v10 - 1) = *v10;
        v10[v26] = v31;
        v10 += v12;
        ++v3;
        ++v13;
        v30 += v27;
        uint64_t v4 = v6;
        uint64_t v6 = v32;
      }
      while (v3 != v2);
    }
  }
  return result;
}

uint64_t sub_1003230F0(uint64_t a1)
{
  *(void *)a1 = off_1004998E8;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unsigned int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_10032322C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, void *a6)
{
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_100499928;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v13 = *(void **)(a2 + 72);
    uint64_t v14 = *(void **)(a1 + 80);
    void *v14 = *v13;
    v14[1] = v13[1];
  }
  long long v15 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v17 = *(void *)(a3 + 48);
  uint64_t v16 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v16;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v15;
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v18 = *(void **)(a3 + 72);
    uint64_t v19 = *(void **)(a1 + 176);
    *uint64_t v19 = *v18;
    v19[1] = v18[1];
  }
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a5;
  *(void *)(a1 + 208) = *a6;
  return a1;
}

void sub_100323384(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003233A0(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_1003233B4(uint64_t a1)
{
  sub_100323B4C(a1);

  operator delete();
}

uint64_t sub_1003233EC(uint64_t result, int *a2)
{
  int v2 = *a2;
  int v3 = a2[1];
  int v4 = v3 - *a2;
  if (v3 > *a2)
  {
    unint64_t v5 = *(unsigned int *)(result + 104);
    uint64_t v6 = ((v5 >> 3) & 0x1FF) + 1;
    uint64_t v7 = *(void *)(result + 184) >> 1;
    uint64_t v8 = *(void *)(result + 120);
    int v9 = v7 + v7 * v2;
    uint64_t v10 = *(int *)(result + 208);
    uint64_t v64 = 3 * v10 - 1;
    uint64_t v63 = 3 * (int)v10;
    int v61 = 3 * v10;
    uint64_t v62 = 3 * (int)v10 + 1;
    uint64_t v72 = (int)v10 * (int)v6 - 1;
    uint64_t v73 = v10;
    uint64_t v71 = (int)v10 * (int)v6;
    uint64_t v69 = (int)v10 * (int)v6 + 1;
    uint64_t v70 = (int)v10 * (int)v6 + 2;
    uint64_t v74 = (int)v7;
    if ((int)v10 >= 1)
    {
      long long v11 = (_WORD *)(v8 + 2 * v9 + 2 * v6 + 2);
      uint64_t v12 = *(void *)(result + 88);
      unint64_t v13 = (unint64_t)v12 >> 1;
      uint64_t v14 = (int)(v12 >> 1);
      uint64_t v15 = 2 * (int)v14;
      uint64_t v75 = v15 | 1;
      uint64_t v16 = (uint64_t)((v13 << 32) + 0x200000000) >> 32;
      uint64_t v17 = (uint64_t)((uint64_t)&_mh_execute_header + (v13 << 32)) >> 32;
      uint64_t v18 = v15 + 2;
      uint64_t v67 = (int)v10 * (int)v6 - 5;
      int v68 = v10 * v6;
      if (v2) {
        int v19 = -*(_DWORD *)(result + 204);
      }
      else {
        int v19 = *(_DWORD *)(result + 204);
      }
      if (v2) {
        int v20 = *(_DWORD *)(result + 200) == 0;
      }
      else {
        int v20 = *(_DWORD *)(result + 200);
      }
      uint64_t v21 = *(void *)(result + 24);
      uint64_t v66 = v18;
      uint64_t result = 2 * v18;
      uint64_t v22 = v16;
      uint64_t v23 = 2 * v14;
      uint64_t v24 = v17;
      unint64_t v25 = (unsigned __int16 *)(v21 + 2 * v2 * (int)v13);
      uint64_t v26 = 4 * ((v5 >> 3) & 0x1FF) + 4;
      uint64_t v27 = (uint64_t)((v13 << 32) + 0x300000000) >> 32;
      int v65 = a2[1];
      while (1)
      {
        unint64_t v37 = v25;
        unsigned int v38 = v11;
        if (v20)
        {
          unint64_t v37 = v25 + 1;
          int v39 = v25[v14] + v25[v16];
          uint64_t v40 = 2 * v19;
          v11[v40 / 0xFFFFFFFFFFFFFFFELL] = (v25[1] + v25[v75] + 1) >> 1;
          _WORD *v11 = v25[v17];
          v11[(unint64_t)v40 / 2] = (v39 + 1) >> 1;
          if (((v5 >> 3) & 0x1FF) == 3) {
            v11[2] = -1;
          }
          unsigned int v38 = &v11[v6];
        }
        unint64_t v41 = (unint64_t)&v25[v73];
        unint64_t v42 = v41 - 4;
        if (((v5 >> 3) & 0x1FF) == 2)
        {
          if (v19 <= 0)
          {
            if ((unint64_t)v37 <= v42)
            {
              unint64_t v43 = v37 + 1;
              do
              {
                BOOL v50 = v43 + 1;
                unsigned int v51 = (*v43 + v43[v14 - 1] + v43[v22 - 1] + v43[2 * v14] + 2) >> 2;
                v38[1] = (*(v43 - 1) + v43[1] + v43[v23 - 1] + v43[(unint64_t)result / 2 - 1] + 2) >> 2;
                *unsigned int v38 = v51;
                *(v38 - 1) = v43[v24 - 1];
                unsigned int v52 = (v43[v24 - 1] + v43[v27 - 1] + 1) >> 1;
                v38[4] = (v43[1] + v43[(unint64_t)result / 2 - 1] + 1) >> 1;
                v38[3] = v43[v22 - 1];
                v38[2] = v52;
                v43 += 2;
                unsigned int v38 = (_WORD *)((char *)v38 + v26);
              }
              while ((unint64_t)v50 <= v42);
              goto LABEL_35;
            }
          }
          else if ((unint64_t)v37 <= v42)
          {
            unint64_t v43 = v37 + 1;
            do
            {
              unint64_t v44 = v43 + 1;
              unsigned int v45 = (*v43 + v43[v14 - 1] + v43[v22 - 1] + v43[2 * v14] + 2) >> 2;
              *(v38 - 1) = (*(v43 - 1) + v43[1] + v43[v23 - 1] + v43[(unint64_t)result / 2 - 1] + 2) >> 2;
              *unsigned int v38 = v45;
              v38[1] = v43[v24 - 1];
              unsigned int v46 = (v43[v24 - 1] + v43[v27 - 1] + 1) >> 1;
              v38[2] = (v43[1] + v43[(unint64_t)result / 2 - 1] + 1) >> 1;
              v38[3] = v43[v22 - 1];
              v38[4] = v46;
              v43 += 2;
              unsigned int v38 = (_WORD *)((char *)v38 + v26);
            }
            while ((unint64_t)v44 <= v42);
LABEL_35:
            unint64_t v37 = v43 - 1;
            int v3 = v65;
          }
        }
        else if (v19 <= 0)
        {
          if ((unint64_t)v37 <= v42)
          {
            unint64_t v43 = v37 + 1;
            do
            {
              uint64_t v53 = v43 + 1;
              unsigned int v54 = (*(v43 - 1) + v43[1] + v43[v23 - 1] + v43[(unint64_t)result / 2 - 1] + 2) >> 2;
              unsigned int v55 = (*v43 + v43[v14 - 1] + v43[v22 - 1] + v43[2 * v14] + 2) >> 2;
              *(v38 - 1) = v43[v24 - 1];
              *unsigned int v38 = v55;
              v38[1] = v54;
              v38[2] = -1;
              unsigned int v56 = (v43[1] + v43[(unint64_t)result / 2 - 1] + 1) >> 1;
              v38[3] = (v43[v24 - 1] + v43[v27 - 1] + 1) >> 1;
              v38[4] = v43[v22 - 1];
              v38[5] = v56;
              v38[6] = -1;
              v43 += 2;
              unsigned int v38 = (_WORD *)((char *)v38 + v26);
            }
            while ((unint64_t)v53 <= v42);
            goto LABEL_35;
          }
        }
        else if ((unint64_t)v37 <= v42)
        {
          unint64_t v43 = v37 + 1;
          do
          {
            int16x8_t v47 = v43 + 1;
            unsigned int v48 = (*v43 + v43[v14 - 1] + v43[v22 - 1] + v43[2 * v14] + 2) >> 2;
            *(v38 - 1) = (*(v43 - 1) + v43[1] + v43[v23 - 1] + v43[(unint64_t)result / 2 - 1] + 2) >> 2;
            *unsigned int v38 = v48;
            v38[1] = v43[v24 - 1];
            v38[2] = -1;
            unsigned int v49 = (v43[v24 - 1] + v43[v27 - 1] + 1) >> 1;
            v38[3] = (v43[1] + v43[(unint64_t)result / 2 - 1] + 1) >> 1;
            v38[4] = v43[v22 - 1];
            v38[5] = v49;
            v38[6] = -1;
            v43 += 2;
            unsigned int v38 = (_WORD *)((char *)v38 + v26);
          }
          while ((unint64_t)v47 <= v42);
          goto LABEL_35;
        }
        if ((unint64_t)v37 < v41
          && (unsigned int v57 = (v37[1] + v37[v14] + v37[v16] + v37[v75] + 2) >> 2,
              uint64_t v58 = 2 * v19,
              v38[v58 / 0xFFFFFFFFFFFFFFFELL] = (*v37 + v37[2] + v37[2 * v14] + v37[v66] + 2) >> 2,
              *unsigned int v38 = v57,
              v38[(unint64_t)v58 / 2] = v37[v17],
              ((v5 >> 3) & 0x1FF) == 3))
        {
          v38[2] = -1;
        }
        else if (((v5 >> 3) & 0x1FF) == 2)
        {
          uint64_t v31 = -2;
          uint64_t v29 = -3;
          int32x4_t v28 = v11;
          uint64_t v32 = 1;
          *(v11 - 4) = *(v11 - 1);
          uint64_t v34 = v62;
          int v33 = v61;
          uint64_t v35 = v63;
          uint64_t v30 = v64;
          goto LABEL_12;
        }
        *(v11 - 5) = *(v11 - 1);
        int32x4_t v28 = v11 + 2;
        uint64_t v29 = -2;
        uint64_t v30 = v71;
        uint64_t v31 = v72;
        *((_DWORD *)v11 - 2) = *(_DWORD *)v11;
        uint64_t v32 = v67;
        int v33 = v68;
        uint64_t v35 = v69;
        uint64_t v34 = v70;
LABEL_12:
        v11[v29] = *v28;
        v11[v31] = v11[v32];
        unint64_t v36 = &v11[v33];
        v11[v30] = *(v36 - 4);
        v11[v35] = *(v36 - 3);
        v11[v34] = *(v36 - 2);
        int v20 = v20 == 0;
        int v19 = -v19;
        v25 += v14;
        v11 += v74;
        if (++v2 == v3) {
          return result;
        }
      }
    }
    if (((*(_DWORD *)(result + 104) >> 3) & 0x1FF) == 2)
    {
      uint64_t v59 = 2 * v9 + 2 * ((v5 >> 3) & 0x1FF) + v8 - 4;
      do
      {
        *(_WORD *)(v59 + 2 * v62 + 4 + 4) = 0;
        *(_WORD *)(v59 + 2 * v63 + 4 + 4) = 0;
        *(_WORD *)(v59 + 2 * v64 + 4 + 4) = 0;
        *(_DWORD *)(v59 + 2) = 0;
        *(_WORD *)uint64_t v59 = 0;
        v59 += 2 * (int)v7;
        --v4;
      }
      while (v4);
    }
    else
    {
      unint64_t v60 = (_WORD *)(v8 + 2 * v9 + 2 * ((v5 >> 3) & 0x1FF));
      do
      {
        v60[v69 + 2] = 0;
        v60[v71 + 2] = 0;
        v60[v72 + 2] = 0;
        *(v60 - 1) = 0;
        *(_DWORD *)(v60 - 3) = 0;
        v60[v70 + 2] = -1;
        *unint64_t v60 = -1;
        v60 += (int)v7;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t sub_100323B4C(uint64_t a1)
{
  *(void *)a1 = off_100499928;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  unint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  int v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_100323C88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_100499968;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    unint64_t v13 = *(void **)(a2 + 72);
    uint64_t v14 = *(void **)(a1 + 80);
    void *v14 = *v13;
    v14[1] = v13[1];
  }
  long long v15 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v17 = *(void *)(a3 + 48);
  uint64_t v16 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v16;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v15;
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v18 = *(void **)(a3 + 72);
    int v19 = *(void **)(a1 + 176);
    *int v19 = *v18;
    v19[1] = v18[1];
  }
  *(void *)(a1 + 200) = *a4;
  *(_DWORD *)(a1 + 208) = a5;
  *(_DWORD *)(a1 + 212) = a6;
  return a1;
}

void sub_100323DE0(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100323DFC(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100323E10(uint64_t a1)
{
  sub_1003243AC(a1);

  operator delete();
}

uint64_t sub_100323E48(uint64_t result, _DWORD *a2)
{
  int v2 = *a2;
  if (*a2 < a2[1])
  {
    unint64_t v3 = *(unsigned int *)(result + 104);
    uint64_t v4 = (v3 >> 3) & 0x1FF;
    uint64_t v5 = v4 + 1;
    int v6 = *a2 & 1 ^ *(_DWORD *)(result + 208);
    int v7 = *a2 & 1 ^ *(_DWORD *)(result + 212);
    unint64_t v8 = *(void *)(result + 184);
    uint64_t v9 = v2 + 1;
    uint64_t v10 = (unsigned char *)(*(void *)(result + 120) + v8 * v9 + v4 + 1);
    long long v11 = (unsigned char *)(*(void *)(result + 24) + **(void **)(result + 80) * v9 + 1);
    unint64_t v12 = *(void *)(result + 88) / ((0x88442211uLL >> (4 * (*(_DWORD *)(result + 8) & 7u))) & 0xF);
    uint64_t v13 = (2 * (v4 + 1));
    uint64_t v14 = -(int)v12;
    uint64_t v15 = ~v12;
    uint64_t v85 = (uint64_t)((v12 << 32) - 0x100000000) >> 32;
    uint64_t v86 = (uint64_t)((uint64_t)&_mh_execute_header - (v12 << 32)) >> 32;
    uint64_t v84 = (uint64_t)((uint64_t)&_mh_execute_header + (v12 << 32)) >> 32;
    unint64_t v16 = v8 / ((0x88442211uLL >> (4 * (v3 & 7u))) & 0xF);
    unsigned int v17 = v13 - v16;
    LODWORD(v16) = v4 + 1 - v16;
    uint64_t v18 = (int)v17;
    uint64_t v19 = (int)v16;
    unint64_t v20 = ~(unint64_t)v4;
    BOOL v23 = v16 < 0x20 || v4 < 0x1F || v17 < 0x20;
    char v82 = v23;
    uint64_t v78 = v5 & 0x18;
    uint64_t v79 = v4 + 1;
    uint64_t v24 = -(uint64_t)v4;
    uint64_t v83 = v5 & 0x3E0;
    uint64_t v76 = (v5 & 0x3F8) - v83;
    uint64_t v77 = v5 & 0x3F8;
    int v80 = v4;
    unsigned long long v81 = a2;
    do
    {
      int v25 = 2 * v6;
      if (v7)
      {
        v10[v25] = (v11[(int)v12] + v11[v14]) >> 1;
        v10[1] = *v11;
        int v26 = *++v11;
        v10[-v25 + 2] = (v26 + *(v11 - 2)) >> 1;
        v10 += v5;
        int v27 = 2;
        int v28 = *(_DWORD *)(result + 200);
        BOOL v29 = v28 > 2;
        if (v6) {
          goto LABEL_15;
        }
      }
      else
      {
        int v27 = 1;
        int v28 = *(_DWORD *)(result + 200);
        BOOL v29 = v28 > 1;
        if (v6)
        {
LABEL_15:
          if (v29)
          {
            uint64_t v30 = 0;
            uint64_t v31 = &v11[v84];
            uint64_t v32 = &v11[v86];
            int v33 = v11;
            do
            {
              uint64_t v34 = &v11[v30];
              unsigned char *v10 = v11[v30];
              int v35 = v11[v30 - 1];
              int v36 = v11[v30 + 1];
              unsigned int v37 = v35 - v36;
              if (v35 - v36 < 0) {
                unsigned int v37 = v36 - v35;
              }
              int v38 = v33[(int)v12];
              int v39 = v11[v14 + v30];
              unsigned int v40 = v38 - v39;
              if (v38 - v39 < 0) {
                unsigned int v40 = v39 - v38;
              }
              int v41 = v39 + v38;
              int v42 = v36 + v35;
              if (v37 > v40) {
                int v42 = v41;
              }
              v10[1] = (v42 + 1) >> 1;
              v10[2] = (v32[v30]
                      + v33[v15]
                      + v11[v85 + v30]
                      + v31[v30]) >> 2;
              v10[3] = (*v34 + v34[2] + 1) >> 1;
              v10[4] = v34[1];
              v33 += 2;
              v10[5] = (v32[v30] + v31[v30] + 1) >> 1;
              v10 += v13;
              int v28 = *(_DWORD *)(result + 200);
              v30 += 2;
            }
            while (v27 + (int)v30 < v28);
LABEL_37:
            v27 += v30;
            v11 += v30;
            LODWORD(v4) = v80;
            a2 = v81;
            uint64_t v5 = v79;
            goto LABEL_38;
          }
          goto LABEL_38;
        }
      }
      if (v29)
      {
        uint64_t v30 = 0;
        unint64_t v43 = &v11[v84];
        unint64_t v44 = &v11[v86];
        unsigned int v45 = v11;
        do
        {
          unsigned int v46 = &v11[v30];
          unsigned char *v10 = (v45[v15]
                + v44[v30]
                + v11[v85 + v30]
                + v43[v30]
                + 2) >> 2;
          int v47 = v11[v30 - 1];
          int v48 = v11[v30 + 1];
          unsigned int v49 = v47 - v48;
          int v50 = v45[(int)v12];
          if (v47 - v48 < 0) {
            unsigned int v49 = v48 - v47;
          }
          int v51 = v11[v14 + v30];
          unsigned int v52 = v50 - v51;
          if (v50 - v51 < 0) {
            unsigned int v52 = v51 - v50;
          }
          int v53 = v51 + v50;
          int v54 = v48 + v47;
          if (v49 > v52) {
            int v54 = v53;
          }
          v10[1] = (v54 + 1) >> 1;
          v10[2] = *v46;
          v10[3] = (v44[v30] + v43[v30] + 1) >> 1;
          v10[4] = v46[1];
          v45 += 2;
          v10[5] = (*v46 + v46[2] + 1) >> 1;
          v10 += v13;
          int v28 = *(_DWORD *)(result + 200);
          v30 += 2;
        }
        while (v27 + (int)v30 < v28);
        goto LABEL_37;
      }
LABEL_38:
      if (v27 <= v28)
      {
        v10[v25] = (v11[v15]
                  + v11[v86]
                  + v11[v85]
                  + v11[v84]
                  + 2) >> 2;
        int v55 = *(v11 - 1);
        int v56 = v11[1];
        unsigned int v57 = v55 - v56;
        if (v55 - v56 < 0) {
          unsigned int v57 = v56 - v55;
        }
        int v58 = v11[(int)v12];
        int v59 = v11[v14];
        unsigned int v60 = v58 - v59;
        if (v58 - v59 < 0) {
          unsigned int v60 = v59 - v58;
        }
        int v61 = v59 + v58;
        int v62 = v56 + v55;
        if (v57 > v60) {
          int v62 = v61;
        }
        v10[1] = (v62 + 1) >> 1;
        v10[-v25 + 2] = *v11;
        v10 += v5;
        ++v11;
      }
      if (v4 >= 7)
      {
        uint64_t v63 = 0;
        char v64 = v82;
        if (v19 - v20 < 0x20) {
          char v64 = 1;
        }
        if ((v64 & 1) == 0 && (unint64_t)(v19 - v18) >= 0x20)
        {
          uint64_t v65 = 0;
          uint64_t v66 = v83;
          uint64_t v67 = v10;
          do
          {
            long long v68 = *(_OWORD *)((char *)v67 + v24 + 15);
            *uint64_t v67 = *(_OWORD *)((char *)v67 + v24 - 1);
            v67[1] = v68;
            v67 += 2;
            uint64_t v69 = (long long *)&v10[v65 + v18];
            long long v70 = *v69;
            long long v71 = v69[1];
            uint64_t v72 = &v10[v65 + v19];
            *uint64_t v72 = v70;
            v72[1] = v71;
            v65 += 32;
            v66 -= 32;
          }
          while (v66);
          if (v83 == v5) {
            goto LABEL_12;
          }
          uint64_t v63 = v83;
          if (v78)
          {
            uint64_t v73 = v83;
            uint64_t v74 = &v10[v83];
            uint64_t v75 = v76;
            do
            {
              *uint64_t v74 = *(void *)((char *)v74 + v20);
              ++v74;
              *(void *)&v10[v73 + v19] = *(void *)&v10[v73 + v18];
              v73 += 8;
              v75 -= 8;
            }
            while (v75);
            uint64_t v63 = v77;
            if (v77 == v5) {
              goto LABEL_12;
            }
          }
        }
      }
      else
      {
        uint64_t v63 = 0;
      }
      do
      {
        v10[v63] = v10[v24 - 1 + v63];
        v10[v63 + v19] = v10[v63 + v18];
        ++v63;
      }
      while (v24 + v63 != 1);
LABEL_12:
      v7 ^= 1u;
      v6 ^= 1u;
      v11 += 2;
      v10 += v13;
      ++v2;
    }
    while (v2 < a2[1]);
  }
  return result;
}

uint64_t sub_1003243AC(uint64_t a1)
{
  *(void *)a1 = off_100499968;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  uint64_t v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

uint64_t sub_1003244E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a1 = off_1004999A8;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 48);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  if (v12) {
    atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
  }
  if (*(int *)(a2 + 4) > 2)
  {
    *(_DWORD *)(a1 + 12) = 0;
    sub_1002931A8(a1 + 8, a2);
  }
  else
  {
    uint64_t v13 = *(void **)(a2 + 72);
    uint64_t v14 = *(void **)(a1 + 80);
    void *v14 = *v13;
    v14[1] = v13[1];
  }
  long long v15 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a3 + 32);
  uint64_t v17 = *(void *)(a3 + 48);
  uint64_t v16 = *(void *)(a3 + 56);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = v17;
  *(void *)(a1 + 160) = v16;
  *(void *)(a1 + 168) = a1 + 112;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 104) = v15;
  if (v16) {
    atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
  }
  if (*(int *)(a3 + 4) > 2)
  {
    *(_DWORD *)(a1 + 108) = 0;
    sub_1002931A8(a1 + 104, a3);
  }
  else
  {
    uint64_t v18 = *(void **)(a3 + 72);
    uint64_t v19 = *(void **)(a1 + 176);
    *uint64_t v19 = *v18;
    v19[1] = v18[1];
  }
  *(void *)(a1 + 200) = *a4;
  *(_DWORD *)(a1 + 208) = a5;
  *(_DWORD *)(a1 + 212) = a6;
  return a1;
}

void sub_100324640(_Unwind_Exception *a1)
{
  sub_1000094F4(v2);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_10032465C(_Unwind_Exception *a1)
{
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

void sub_100324670(uint64_t a1)
{
  sub_100324BE4(a1);

  operator delete();
}

uint64_t sub_1003246A8(uint64_t result, int *a2)
{
  int v2 = *a2;
  int v77 = a2[1];
  if (*a2 < v77)
  {
    unint64_t v3 = *(unsigned int *)(result + 104);
    uint64_t v76 = (v3 >> 3) & 0x1FF;
    int v4 = *a2 & 1 ^ *(_DWORD *)(result + 208);
    int v5 = *a2 & 1 ^ *(_DWORD *)(result + 212);
    unint64_t v6 = *(void *)(result + 184);
    uint64_t v7 = v2 + 1;
    uint64_t v8 = (_WORD *)(*(void *)(result + 120) + v6 * v7 + 2 * (v76 + 1));
    unint64_t v9 = *(void *)(result + 88) / ((0x88442211uLL >> (4 * (*(_DWORD *)(result + 8) & 7u))) & 0xF);
    uint64_t v10 = ~v9;
    unint64_t v11 = v6 / ((0x88442211uLL >> (4 * (v3 & 7u))) & 0xF);
    uint64_t v75 = (2 * (v76 + 1));
    uint64_t v12 = (int)v75 - (int)v11;
    uint64_t v13 = (int)v76 + 1 - (int)v11;
    unint64_t v74 = 2 * v13;
    uint64_t v14 = v76 + 1;
    uint64_t v15 = 2 * ((*(_DWORD *)(result + 104) >> 3) & 0x1FFu);
    unint64_t v73 = 2 * v12;
    uint64_t v16 = -(int)v9;
    uint64_t v17 = (_WORD *)(*(void *)(result + 24) + **(void **)(result + 80) * v7 + 2);
    uint64_t v70 = (uint64_t)((uint64_t)&_mh_execute_header + (v9 << 32)) >> 32;
    uint64_t v18 = v70;
    uint64_t v71 = (uint64_t)((v9 << 32) - 0x100000000) >> 32;
    uint64_t v72 = (uint64_t)((uint64_t)&_mh_execute_header - (v9 << 32)) >> 32;
    uint64_t v19 = v71;
    uint64_t v20 = v72;
    uint64_t result = *(unsigned int *)(result + 200);
    uint64_t v21 = 4 * v76 + 4;
    uint64_t v22 = v16;
    uint64_t v69 = v15;
    unint64_t v23 = v15 ^ 0xFFFFFFFFFFFFFFFELL;
    do
    {
      int v24 = 2 * v4;
      if (v5)
      {
        v8[v24] = ((unsigned __int16)v17[(int)v9] + (unsigned __int16)v17[v16]) >> 1;
        v8[1] = *v17;
        int v25 = (unsigned __int16)v17[1];
        ++v17;
        int v26 = 2;
        v8[2 - v24] = (v25 + (unsigned __int16)*(v17 - 2)) >> 1;
        v8 += v14;
        BOOL v27 = (int)result > 2;
        if (v4) {
          goto LABEL_6;
        }
      }
      else
      {
        int v26 = 1;
        BOOL v27 = (int)result > 1;
        if (v4)
        {
LABEL_6:
          if (v27)
          {
            int v28 = v17 - 1;
            BOOL v29 = v17 - 1;
            do
            {
              *uint64_t v8 = v28[1];
              int v31 = v29[2];
              v29 += 2;
              int v30 = v31;
              int v32 = *v28;
              unsigned int v33 = v32 - v31;
              if (v32 - v31 < 0) {
                unsigned int v33 = -v33;
              }
              int v34 = (unsigned __int16)v17[(int)v9];
              int v35 = v28[v22 + 1];
              unsigned int v36 = v34 - v35;
              if (v34 - v35 < 0) {
                unsigned int v36 = v35 - v34;
              }
              int v37 = v35 + v34;
              int v38 = v30 + v32;
              if (v33 <= v36) {
                int v37 = v38;
              }
              v8[1] = (v37 + 1) >> 1;
              v8[2] = (v28[v20 + 1] + (unsigned __int16)v17[v10] + v28[v19 + 1] + v28[v18 + 1]) >> 2;
              v17 += 2;
              v8[3] = (v28[1] + v28[3] + 1) >> 1;
              v8[4] = *v29;
              v8[5] = (v28[v20 + 1] + v28[v18 + 1] + 1) >> 1;
              v26 += 2;
              uint64_t v8 = (_WORD *)((char *)v8 + v21);
              int v28 = v29;
            }
            while (v26 < (int)result);
            uint64_t v17 = v29 + 1;
LABEL_29:
            uint64_t v16 = -(int)v9;
            uint64_t v14 = v76 + 1;
            goto LABEL_30;
          }
          goto LABEL_30;
        }
      }
      if (v27)
      {
        int v39 = v17 - 1;
        unsigned int v40 = v17 - 1;
        do
        {
          *uint64_t v8 = ((unsigned __int16)v17[v10] + v39[v20 + 1] + v39[v19 + 1] + v39[v18 + 1] + 2) >> 2;
          int v41 = *v39;
          int v43 = v40[2];
          v40 += 2;
          int v42 = v43;
          unsigned int v44 = v41 - v43;
          if (v41 - v43 < 0) {
            unsigned int v44 = -v44;
          }
          int v45 = (unsigned __int16)v17[(int)v9];
          int v46 = v39[v22 + 1];
          unsigned int v47 = v45 - v46;
          if (v45 - v46 < 0) {
            unsigned int v47 = v46 - v45;
          }
          int v48 = v46 + v45;
          int v49 = v42 + v41;
          if (v44 > v47) {
            int v49 = v48;
          }
          v8[1] = (v49 + 1) >> 1;
          v8[2] = v39[1];
          v8[3] = (v39[v20 + 1] + v39[v18 + 1] + 1) >> 1;
          v8[4] = *v40;
          v17 += 2;
          v8[5] = (v39[1] + v39[3] + 1) >> 1;
          v26 += 2;
          uint64_t v8 = (_WORD *)((char *)v8 + v21);
          int v39 = v40;
        }
        while (v26 < (int)result);
        uint64_t v17 = v40 + 1;
        goto LABEL_29;
      }
LABEL_30:
      if (v26 <= (int)result)
      {
        v8[v24] = ((unsigned __int16)v17[v10]
                 + (unsigned __int16)v17[v72]
                 + (unsigned __int16)v17[v71]
                 + (unsigned __int16)v17[v70]
                 + 2) >> 2;
        int v50 = (unsigned __int16)*(v17 - 1);
        int v51 = (unsigned __int16)v17[1];
        unsigned int v52 = v50 - v51;
        int v53 = (unsigned __int16)v17[(int)v9];
        if (v50 - v51 < 0) {
          unsigned int v52 = v51 - v50;
        }
        int v54 = (unsigned __int16)v17[v16];
        unsigned int v55 = v53 - v54;
        if (v53 - v54 < 0) {
          unsigned int v55 = v54 - v53;
        }
        int v56 = v54 + v53;
        int v57 = v51 + v50;
        if (v52 > v55) {
          int v57 = v56;
        }
        v8[1] = (v57 + 1) >> 1;
        v8[2 - v24] = *v17;
        v8 += v14;
        ++v17;
      }
      if (v76 >= 0xF)
      {
        uint64_t v58 = 0;
        if (v74 >= 0x20
          && (unint64_t)(v69 + 2) >= 0x20
          && v73 >= 0x20
          && v74 - (-v69 - 2) >= 0x20
          && v74 - v73 >= 0x20)
        {
          uint64_t v61 = 0;
          uint64_t v62 = (v76 + 1) & 0x3F0;
          uint64_t v63 = v8;
          do
          {
            long long v64 = *(_OWORD *)((char *)v63 - 2 * v76 + 14);
            *uint64_t v63 = *(_OWORD *)((char *)v63 - 2 * v76 - 2);
            v63[1] = v64;
            v63 += 2;
            uint64_t v65 = (long long *)&v8[v61 + v12];
            long long v66 = *v65;
            long long v67 = v65[1];
            long long v68 = &v8[v61 + v13];
            *long long v68 = v66;
            v68[1] = v67;
            v61 += 16;
            v62 -= 16;
          }
          while (v62);
          uint64_t v58 = (v76 + 1) & 0x3F0;
          if (v58 == v14) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        uint64_t v58 = 0;
      }
      int v59 = &v8[v58];
      uint64_t v60 = v76 + 1 - v58;
      do
      {
        *int v59 = *(_WORD *)((char *)v59 + v23);
        ++v59;
        v8[v58 + v13] = v8[v58 + v12];
        ++v58;
        --v60;
      }
      while (v60);
LABEL_3:
      v5 ^= 1u;
      v4 ^= 1u;
      v17 += 2;
      v8 += v75;
      ++v2;
    }
    while (v2 != v77);
  }
  return result;
}

uint64_t sub_100324BE4(uint64_t a1)
{
  *(void *)a1 = off_1004999A8;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 108));
  }
  int v5 = *(void **)(a1 + 176);
  if (v5 != (void *)(a1 + 184)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 12));
  }
  unint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88)) {
    j__free(v9);
  }

  return nullsub_1(a1);
}

void sub_100324D1C(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int8 a5, int a6)
{
  if ((a6 - 5) >= 2)
  {
    long long v58 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v58, 24), "ktype == 5 || ktype == 6", 24);
    sub_1002D2278(-215, (uint64_t *)&v58, "getScharrKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 61);
  }
  sub_10029EDE8(a1, 3u, 1u, a6, -1, 1, 0);
  sub_10029EDE8(a2, 3u, 1u, a6, -1, 1, 0);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    long long v13 = *(_OWORD *)(v12 + 16);
    long long v58 = *(_OWORD *)v12;
    long long v59 = v13;
    long long v60 = *(_OWORD *)(v12 + 32);
    uint64_t v14 = *(void *)(v12 + 56);
    uint64_t v61 = *(void *)(v12 + 48);
    uint64_t v62 = v14;
    uint64_t v63 = (char *)&v58 + 8;
    long long v64 = v65;
    v65[0] = 0;
    v65[1] = 0;
    if (v14) {
      atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
    }
    if (*(int *)(v12 + 4) > 2)
    {
      DWORD1(v58) = 0;
      sub_1002931A8((uint64_t)&v58, v12);
    }
    else
    {
      uint64_t v15 = *(void **)(v12 + 72);
      uint64_t v16 = v64;
      *(void *)long long v64 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v58);
  }
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v17 = *(void *)(a2 + 8);
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v50 = *(_OWORD *)v17;
    long long v19 = *(_OWORD *)(v17 + 32);
    long long v51 = v18;
    long long v52 = v19;
    uint64_t v20 = *(void *)(v17 + 56);
    uint64_t v53 = *(void *)(v17 + 48);
    uint64_t v54 = v20;
    unsigned int v55 = (char *)&v50 + 8;
    int v56 = v57;
    v57[0] = 0;
    v57[1] = 0;
    if (v20) {
      atomic_fetch_add((atomic_uint *volatile)(v20 + 20), 1u);
    }
    if (*(int *)(v17 + 4) > 2)
    {
      DWORD1(v50) = 0;
      sub_1002931A8((uint64_t)&v50, v17);
    }
    else
    {
      uint64_t v21 = *(void **)(v17 + 72);
      uint64_t v22 = v56;
      *(void *)int v56 = *v21;
      v22[1] = v21[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v50);
  }
  if ((a4 | a3) < 0 || a4 + a3 != 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    qmemcpy((void *)sub_1002D19D8(&v40, 32), "dx >= 0 && dy >= 0 && dx+dy == 1", 32);
    sub_1002D2278(-215, &v40, "getScharrKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 67);
  }
  if (a3)
  {
    if (a3 != 1) {
      goto LABEL_25;
    }
    uint64_t v23 = 0xFFFFFFFFLL;
    int v24 = 1;
  }
  else
  {
    uint64_t v23 = 0xA00000003;
    int v24 = 3;
  }
  uint64_t v66 = v23;
  int v67 = v24;
LABEL_25:
  uint64_t v41 = *((void *)&v58 + 1);
  *(void *)&long long v42 = &v66;
  *((void *)&v42 + 1) = &v66;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v46 = &v41;
  unsigned int v47 = &v48;
  uint64_t v40 = 0x242FF4004;
  uint64_t v48 = 4 * SHIDWORD(v58);
  uint64_t v49 = 4;
  *(void *)&long long v43 = (char *)&v66 + v48 * SDWORD2(v58);
  *((void *)&v43 + 1) = v43;
  int v37 = 33619968;
  int v38 = &v58;
  uint64_t v39 = 0;
  double v25 = 0.03125;
  if (((a3 != 1) & a5) == 0) {
    double v25 = 1.0;
  }
  sub_10024011C((unsigned int *)&v40, (uint64_t)&v37, a6, v25, 0.0);
  if (v45 && atomic_fetch_add((atomic_uint *volatile)(v45 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v40);
  }
  uint64_t v45 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  if (SHIDWORD(v40) >= 1)
  {
    uint64_t v26 = 0;
    BOOL v27 = v46;
    do
      *((_DWORD *)v27 + v26++) = 0;
    while (v26 < SHIDWORD(v40));
  }
  if (v47 != &v48) {
    j__free(v47);
  }
  if (a4 == 1)
  {
    uint64_t v28 = 0xFFFFFFFFLL;
    int v29 = 1;
  }
  else
  {
    if (a4) {
      goto LABEL_40;
    }
    uint64_t v28 = 0xA00000003;
    int v29 = 3;
  }
  uint64_t v66 = v28;
  int v67 = v29;
LABEL_40:
  uint64_t v41 = *((void *)&v50 + 1);
  *(void *)&long long v42 = &v66;
  *((void *)&v42 + 1) = &v66;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  int v46 = &v41;
  unsigned int v47 = &v48;
  uint64_t v40 = 0x242FF4004;
  uint64_t v48 = 4 * SHIDWORD(v50);
  uint64_t v49 = 4;
  *(void *)&long long v43 = (char *)&v66 + v48 * SDWORD2(v50);
  *((void *)&v43 + 1) = v43;
  int v37 = 33619968;
  int v38 = &v50;
  uint64_t v39 = 0;
  double v30 = 0.03125;
  if (((a4 != 1) & a5) == 0) {
    double v30 = 1.0;
  }
  sub_10024011C((unsigned int *)&v40, (uint64_t)&v37, a6, v30, 0.0);
  if (v45 && atomic_fetch_add((atomic_uint *volatile)(v45 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v40);
  }
  uint64_t v45 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  if (SHIDWORD(v40) >= 1)
  {
    uint64_t v31 = 0;
    int v32 = v46;
    do
      *((_DWORD *)v32 + v31++) = 0;
    while (v31 < SHIDWORD(v40));
  }
  if (v47 != &v48) {
    j__free(v47);
  }
  if (v54 && atomic_fetch_add((atomic_uint *volatile)(v54 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v50);
  }
  uint64_t v54 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  if (SDWORD1(v50) >= 1)
  {
    uint64_t v33 = 0;
    int v34 = v55;
    do
      *(_DWORD *)&v34[4 * v33++] = 0;
    while (v33 < SDWORD1(v50));
  }
  if (v56 != v57) {
    j__free(v56);
  }
  if (v62 && atomic_fetch_add((atomic_uint *volatile)(v62 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v58);
  }
  uint64_t v62 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  if (SDWORD1(v58) >= 1)
  {
    uint64_t v35 = 0;
    unsigned int v36 = v63;
    do
      *(_DWORD *)&v36[4 * v35++] = 0;
    while (v35 < SDWORD1(v58));
  }
  if (v64 != v65) {
    j__free(v64);
  }
}

void sub_1003252DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100325384(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  if (a3 > 0 && a5 == 1) {
    unsigned int v10 = 3;
  }
  else {
    unsigned int v10 = a5;
  }
  if (a4 > 0 && a5 == 1) {
    int v11 = 3;
  }
  else {
    int v11 = a5;
  }
  signed int v101 = v11;
  signed int v102 = v10;
  if ((a7 - 5) >= 2)
  {
    long long v126 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v126, 24), "ktype == 5 || ktype == 6", 24);
    sub_1002D2278(-215, (uint64_t *)&v126, "getSobelKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 96);
  }
  sub_10029EDE8(a1, v10, 1u, a7, -1, 1, 0);
  sub_10029EDE8(a2, v101, 1u, a7, -1, 1, 0);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    long long v13 = *(_OWORD *)(v12 + 16);
    long long v126 = *(_OWORD *)v12;
    long long v127 = v13;
    long long v128 = *(_OWORD *)(v12 + 32);
    uint64_t v14 = *(void *)(v12 + 56);
    uint64_t v129 = *(void *)(v12 + 48);
    uint64_t v130 = v14;
    uint16x8_t v131 = (char *)&v126 + 8;
    int32x4_t v132 = v133;
    v133[0] = 0;
    v133[1] = 0;
    if (v14) {
      atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
    }
    if (*(int *)(v12 + 4) > 2)
    {
      DWORD1(v126) = 0;
      sub_1002931A8((uint64_t)&v126, v12);
    }
    else
    {
      uint64_t v15 = *(void **)(v12 + 72);
      uint64_t v16 = v132;
      void *v132 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v126);
  }
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v17 = *(void *)(a2 + 8);
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v118 = *(_OWORD *)v17;
    long long v119 = v18;
    long long v120 = *(_OWORD *)(v17 + 32);
    uint64_t v19 = *(void *)(v17 + 56);
    uint64_t v121 = *(void *)(v17 + 48);
    uint64_t v122 = v19;
    int16x8x2_t v123 = (char *)&v118 + 8;
    int32x4_t v124 = v125;
    v125[0] = 0;
    v125[1] = 0;
    if (v19) {
      atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
    }
    if (*(int *)(v17 + 4) > 2)
    {
      DWORD1(v118) = 0;
      sub_1002931A8((uint64_t)&v118, v17);
    }
    else
    {
      uint64_t v20 = *(void **)(v17 + 72);
      uint64_t v21 = v124;
      *(void *)int32x4_t v124 = *v20;
      v21[1] = v20[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v118);
  }
  if (a5 > 31 || (a5 & 1) == 0)
  {
    uint64_t v106 = 0;
    unint64_t v107 = 0;
    qmemcpy((void *)sub_1002D19D8(&v106, 50), "The kernel size must be odd and not larger than 31", 50);
    sub_1002D2278(-211, &v106, "getSobelKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 104);
  }
  int v22 = v102;
  if (v102 <= v101) {
    int v22 = v101;
  }
  __p = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  int v23 = v22 + 1;
  if (v22 != -1)
  {
    if (v22 <= -2) {
      sub_10000B98C();
    }
    uint64_t v24 = v23;
    size_t v25 = 4 * v23;
    __p = operator new(v25);
    uint64_t v117 = (char *)__p + 4 * v24;
    bzero(__p, v25);
    uint64_t v116 = (char *)__p + v25;
  }
  if ((a4 | a3) < 0 || (a4 + a3 < 0) ^ __OFADD__(a4, a3) | (a4 + a3 == 0))
  {
    uint64_t v106 = 0;
    unint64_t v107 = 0;
    qmemcpy((void *)sub_1002D19D8(&v106, 31), "dx >= 0 && dy >= 0 && dx+dy > 0", 31);
    sub_1002D2278(-215, &v106, "getSobelKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 107);
  }
  char v26 = 1;
  do
  {
    char v27 = v26;
    if (v26) {
      uint64_t v28 = &v126;
    }
    else {
      uint64_t v28 = &v118;
    }
    if (v26) {
      int v29 = a3;
    }
    else {
      int v29 = a4;
    }
    if (v26) {
      int v30 = v102;
    }
    else {
      int v30 = v101;
    }
    if (v30 <= v29)
    {
      uint64_t v106 = 0;
      unint64_t v107 = 0;
      qmemcpy((void *)sub_1002D19D8(&v106, 13), "ksize > order", 13);
      sub_1002D2278(-215, &v106, "getSobelKernels", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/deriv.cpp", 115);
    }
    if (v30 == 3)
    {
      if (v29 == 1)
      {
        int v32 = (char *)__p;
        uint64_t v48 = (char *)__p;
        *(void *)__p = 0xFFFFFFFFLL;
        uint64_t v31 = v48 + 8;
      }
      else
      {
        int v32 = (char *)__p;
        uint64_t v33 = (char *)__p;
        if (v29) {
          *(void *)__p = 0xFFFFFFFE00000001;
        }
        else {
          *(void *)__p = 0x200000001;
        }
        uint64_t v31 = v33 + 8;
      }
      goto LABEL_68;
    }
    if (v30 == 1)
    {
      uint64_t v31 = __p;
      int v32 = (char *)__p;
LABEL_68:
      *uint64_t v31 = 1;
      goto LABEL_69;
    }
    int v32 = (char *)__p;
    *(_DWORD *)__p = 1;
    if (v30 >= 1) {
      bzero(v32 + 4, 4 * v30);
    }
    int v34 = v30 + ~v29;
    if (v34 >= 1 && v30 >= 1)
    {
      uint64_t v35 = (v30 + 1);
      if (v30 >= 8)
      {
        int v56 = 0;
        uint64_t v57 = v35 - 1;
        unint64_t v58 = (v35 - 1) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v59 = (unint64_t)&v32[32 * ((unint64_t)(v35 - 1) >> 3) + 4];
        uint64_t v60 = ~v58 + v35;
        do
        {
          int8x16_t v61 = (int8x16_t)vld1q_dup_f32((const float *)v32);
          unint64_t v62 = v58;
          uint64_t v63 = (int8x16_t *)(v32 + 20);
          int8x16_t v64 = v61;
          do
          {
            int32x4_t v65 = (int32x4_t)v63[-1];
            int32x4_t v66 = (int32x4_t)vextq_s8(v61, (int8x16_t)v65, 0xCuLL);
            int8x16_t v61 = *v63;
            int32x4_t v67 = (int32x4_t)vextq_s8((int8x16_t)v65, *v63, 0xCuLL);
            int8x16_t v68 = (int8x16_t)vaddq_s32(v66, v65);
            int8x16_t v69 = vextq_s8(v64, v68, 0xCuLL);
            int8x16_t v64 = (int8x16_t)vaddq_s32(v67, *(int32x4_t *)v63);
            *(int8x16_t *)((char *)v63 - 20) = v69;
            *(int8x16_t *)((char *)v63 - 4) = vextq_s8(v68, v64, 0xCuLL);
            v63 += 2;
            v62 -= 8;
          }
          while (v62);
          if (v57 != v58)
          {
            __int32 v70 = v64.i32[3];
            __int32 v71 = v61.i32[3];
            uint64_t v72 = v60;
            unint64_t v73 = (int *)v59;
            do
            {
              int v74 = *v73;
              *(v73 - 1) = v70;
              __int32 v70 = v71 + v74;
              ++v73;
              __int32 v71 = v74;
              --v72;
            }
            while (v72);
          }
          ++v56;
        }
        while (v56 != v34);
      }
      else
      {
        float v36 = *(float *)v32;
        int v37 = *((_DWORD *)v32 + 1);
        do
        {
          int v38 = LODWORD(v36) + v37;
          int v39 = *((_DWORD *)v32 + 2);
          *((_DWORD *)v32 + 1) = LODWORD(v36) + v37;
          if (v30 != 2)
          {
            int v40 = v37 + v39;
            int v41 = *((_DWORD *)v32 + 3);
            *((_DWORD *)v32 + 2) = v40;
            int v42 = v39 + v41;
            int v43 = *((_DWORD *)v32 + 4);
            *((_DWORD *)v32 + 3) = v42;
            if (v30 != 4)
            {
              int v44 = v41 + v43;
              int v45 = *((_DWORD *)v32 + 5);
              *((_DWORD *)v32 + 4) = v44;
              if (v30 != 5)
              {
                int v46 = v43 + v45;
                int v47 = *((_DWORD *)v32 + 6);
                *((_DWORD *)v32 + 5) = v46;
                if (v30 != 6) {
                  *((_DWORD *)v32 + 6) = v45 + v47;
                }
              }
            }
          }
          int v37 = v38;
          --v34;
        }
        while (v34);
        *(float *)int v32 = v36;
      }
    }
    if (v29 >= 1 && v30 >= 1)
    {
      int v75 = 0;
      uint64_t v76 = (v30 + 1);
      unint64_t v77 = (v76 - 1) & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float v78 = *(float *)v32;
        unsigned int v79 = -*(_DWORD *)v32;
        if (v30 >= 8)
        {
          int8x16_t v81 = (int8x16_t)vdupq_n_s32(LODWORD(v78));
          int8x16_t v82 = (int8x16_t)vdupq_n_s32(v79);
          unint64_t v83 = (v76 - 1) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v84 = (int8x16_t *)(v32 + 20);
          do
          {
            int32x4_t v85 = (int32x4_t)v84[-1];
            int32x4_t v86 = (int32x4_t)vextq_s8(v81, (int8x16_t)v85, 0xCuLL);
            int8x16_t v81 = *v84;
            int32x4_t v87 = (int32x4_t)vextq_s8((int8x16_t)v85, *v84, 0xCuLL);
            int8x16_t v88 = (int8x16_t)vsubq_s32(v86, v85);
            int8x16_t v89 = vextq_s8(v82, v88, 0xCuLL);
            int8x16_t v82 = (int8x16_t)vsubq_s32(v87, *(int32x4_t *)v84);
            *(int8x16_t *)((char *)v84 - 20) = v89;
            *(int8x16_t *)((char *)v84 - 4) = vextq_s8(v88, v82, 0xCuLL);
            v84 += 2;
            v83 -= 8;
          }
          while (v83);
          if (v76 - 1 == v77) {
            goto LABEL_95;
          }
          float v78 = *(float *)&v81.i32[3];
          unsigned int v79 = v82.u32[3];
          uint64_t v80 = v77 | 1;
        }
        else
        {
          uint64_t v80 = 1;
        }
        unint64_t v90 = (float *)&v32[4 * v80];
        uint64_t v91 = v76 - v80;
        do
        {
          float v92 = *v90;
          *((_DWORD *)v90 - 1) = v79;
          unsigned int v79 = LODWORD(v78) - LODWORD(v92);
          ++v90;
          float v78 = v92;
          --v91;
        }
        while (v91);
LABEL_95:
        ++v75;
      }
      while (v75 != v29);
    }
LABEL_69:
    uint64_t v49 = (char *)&v126 + 8;
    if ((v27 & 1) == 0) {
      uint64_t v49 = (char *)&v118 + 8;
    }
    uint64_t v50 = *(int *)v49;
    long long v51 = (int *)((unint64_t)&v126 | 0xC);
    if ((v27 & 1) == 0) {
      long long v51 = (int *)((unint64_t)&v118 | 0xC);
    }
    uint64_t v52 = *v51;
    unint64_t v107 = __PAIR64__(v52, v50);
    *(void *)&long long v108 = v32;
    *((void *)&v108 + 1) = v32;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = &v107;
    uint64_t v113 = v114;
    uint64_t v106 = 0x242FF4004;
    v114[0] = 4 * v52;
    v114[1] = 4;
    *(void *)&long long v109 = &v32[4 * v52 * v50];
    *((void *)&v109 + 1) = v109;
    double v53 = 1.0;
    if (a6) {
      double v53 = 1.0 / (double)(1 << (v30 + ~(_BYTE)v29));
    }
    int v103 = 33619968;
    uint64_t v104 = v28;
    uint64_t v105 = 0;
    sub_10024011C((unsigned int *)&v106, (uint64_t)&v103, a7, v53, 0.0);
    if (v111 && atomic_fetch_add((atomic_uint *volatile)(v111 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v106);
    }
    uint64_t v111 = 0;
    long long v108 = 0u;
    long long v109 = 0u;
    if (SHIDWORD(v106) >= 1)
    {
      uint64_t v54 = 0;
      unsigned int v55 = v112;
      do
        *((_DWORD *)v55 + v54++) = 0;
      while (v54 < SHIDWORD(v106));
    }
    if (v113 != v114) {
      j__free(v113);
    }
    char v26 = 0;
  }
  while ((v27 & 1) != 0);
  if (__p) {
    operator delete(__p);
  }
  if (v122 && atomic_fetch_add((atomic_uint *volatile)(v122 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v118);
  }
  uint64_t v122 = 0;
  long long v119 = 0u;
  long long v120 = 0u;
  if (SDWORD1(v118) >= 1)
  {
    uint64_t v93 = 0;
    unint64_t v94 = v123;
    do
      *(_DWORD *)&v94[4 * v93++] = 0;
    while (v93 < SDWORD1(v118));
  }
  if (v124 != v125) {
    j__free(v124);
  }
  if (v130 && atomic_fetch_add((atomic_uint *volatile)(v130 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v126);
  }
  uint64_t v130 = 0;
  long long v127 = 0u;
  long long v128 = 0u;
  if (SDWORD1(v126) >= 1)
  {
    uint64_t v95 = 0;
    uint64_t v96 = v131;
    do
      *(_DWORD *)&v96[4 * v95++] = 0;
    while (v95 < SDWORD1(v126));
  }
  if (v132 != v133) {
    j__free(v132);
  }
}

void sub_100325C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,char a31)
{
  sub_1002D1A1C(&a16);
  if (v31)
  {
    a29 = v31;
    operator delete(v31);
  }
  sub_1000094F4((uint64_t)&a31);
  sub_1000094F4(v32 - 240);
  _Unwind_Resume(a1);
}

void sub_100325D60(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, char a7, double a8)
{
  sub_1002D6AE8(v73, &off_1004999D8);
  __int16 v16 = sub_10029AB74((int *)a1, -1);
  __int16 v17 = v16;
  unsigned int v18 = v16 & 7;
  if (a3 < 0) {
    a3 = v16 & 7;
  }
  sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)&v72);
  sub_10029E6D4(a2, &v72, v17 & 0xFF8 | a3 & 7, -1, 0, 0);
  v67[0] = 1124007936;
  memset(&v67[1], 0, 32);
  if (a3 <= v18) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = a3;
  }
  *(_OWORD *)int8x16_t v68 = 0uLL;
  if (v19 <= 5) {
    int v20 = 5;
  }
  else {
    int v20 = v19;
  }
  *(_OWORD *)&v68[12] = 0uLL;
  int8x16_t v69 = &v67[2];
  __int32 v70 = v71;
  v71[0] = 0;
  v71[1] = 0;
  v63[0] = 1124007936;
  memset(&v63[1], 0, 60);
  int8x16_t v64 = &v63[2];
  int32x4_t v65 = v66;
  v66[0] = 0;
  v66[1] = 0;
  LODWORD(v55) = 33619968;
  *((void *)&v55 + 1) = v67;
  *(void *)&long long v56 = 0;
  LODWORD(v47) = 33619968;
  *((void *)&v47 + 1) = v63;
  *(void *)&long long v48 = 0;
  if (a6 <= 0) {
    sub_100324D1C((uint64_t)&v55, (uint64_t)&v47, a4, a5, 0, v20);
  }
  else {
    sub_100325384((uint64_t)&v55, (uint64_t)&v47, a4, a5, a6, 0, v20);
  }
  if (a8 != 1.0)
  {
    LODWORD(v55) = 33619968;
    if (a4)
    {
      *((void *)&v55 + 1) = v63;
      *(void *)&long long v56 = 0;
      sub_10024011C(v63, (uint64_t)&v55, -1, a8, 0.0);
    }
    else
    {
      *((void *)&v55 + 1) = v67;
      *(void *)&long long v56 = 0;
      sub_10024011C(v67, (uint64_t)&v55, -1, a8, 0.0);
    }
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v21 = *(void *)(a1 + 8);
    long long v22 = *(_OWORD *)(v21 + 16);
    long long v55 = *(_OWORD *)v21;
    long long v56 = v22;
    long long v57 = *(_OWORD *)(v21 + 32);
    uint64_t v23 = *(void *)(v21 + 56);
    uint64_t v58 = *(void *)(v21 + 48);
    uint64_t v59 = v23;
    uint64_t v60 = (char *)&v55 + 8;
    int8x16_t v61 = v62;
    v62[0] = 0;
    v62[1] = 0;
    if (v23) {
      atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
    }
    if (*(int *)(v21 + 4) > 2)
    {
      DWORD1(v55) = 0;
      sub_1002931A8((uint64_t)&v55, v21);
    }
    else
    {
      uint64_t v24 = *(void **)(v21 + 72);
      size_t v25 = v61;
      *(void *)int8x16_t v61 = *v24;
      v25[1] = v24[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v55);
  }
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v26 = *(void *)(a2 + 8);
    long long v27 = *(_OWORD *)(v26 + 16);
    long long v47 = *(_OWORD *)v26;
    long long v28 = *(_OWORD *)(v26 + 32);
    long long v48 = v27;
    long long v49 = v28;
    uint64_t v29 = *(void *)(v26 + 56);
    uint64_t v50 = *(void *)(v26 + 48);
    uint64_t v51 = v29;
    uint64_t v52 = (char *)&v47 + 8;
    double v53 = v54;
    v54[0] = 0;
    v54[1] = 0;
    if (v29) {
      atomic_fetch_add((atomic_uint *volatile)(v29 + 20), 1u);
    }
    if (*(int *)(v26 + 4) > 2)
    {
      DWORD1(v47) = 0;
      sub_1002931A8((uint64_t)&v47, v26);
    }
    else
    {
      int v30 = *(void **)(v26 + 72);
      uint64_t v31 = v53;
      *(void *)double v53 = *v30;
      v31[1] = v30[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v47);
  }
  uint64_t v46 = 0;
  int32x2_t v45 = vrev64_s32(*(int32x2_t *)((char *)&v55 + 8));
  if ((a7 & 0x10) == 0) {
    sub_1002951DC((uint64_t)&v55, &v45, &v46);
  }
  uint64_t v44 = 0;
  int v42 = 16842752;
  int v43 = &v55;
  int v39 = 33619968;
  int v40 = &v47;
  uint64_t v41 = 0;
  uint64_t v38 = 0;
  int v36 = 16842752;
  int v37 = v67;
  uint64_t v35 = 0;
  int v33 = 16842752;
  int v34 = v63;
  uint64_t v32 = -1;
  sub_100334370((uint64_t)&v42, (uint64_t)&v39, a3, (uint64_t)&v36, (uint64_t)&v33, (int *)&v32, a7);
}

void sub_1003262FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_1000094F4((uint64_t)&a25);
  sub_1000094F4((uint64_t)&a37);
  sub_1000094F4((uint64_t)&a50);
  sub_1000094F4(v50 - 232);
  sub_10020FA00(v50 - 128);
  _Unwind_Resume(a1);
}

void sub_100326374(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_100326388(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

BOOL sub_1003263F4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  sub_1002D6AE8(v27, &off_1004999F8);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *a1 - 1;
  if (*a1 < 1 || v7 < 1)
  {
    BOOL v10 = 0;
    if (!v28) {
      return v10;
    }
    goto LABEL_35;
  }
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  unsigned int v13 = ((unint64_t)*a2 >> 63) | (2 * (*a2 >= v6)) | (8 * (v12 >= v7)) | ((unint64_t)v12 >> 61) & 4;
  uint64_t v14 = a3[1];
  unsigned int v15 = ((unint64_t)*a3 >> 63) | (2 * (*a3 >= v6)) | (8 * (v14 >= v7)) | ((unint64_t)v14 >> 61) & 4;
  if ((v15 & v13) == 0 && (v15 | v13) != 0)
  {
    uint64_t v17 = v7 - 1;
    if (v13 >= 4)
    {
      if (v13 >= 8) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      v11 += (uint64_t)((double)(*a3 - v11) * (double)(v18 - v12) / (double)(v14 - v12));
      *a2 = v11;
      a2[1] = v18;
      unsigned int v13 = ((unint64_t)v11 >> 63) | (2 * (v11 >= v6));
      uint64_t v12 = v18;
      if (v15 < 4)
      {
LABEL_14:
        if ((v15 & v13) != 0) {
          goto LABEL_34;
        }
LABEL_24:
        if (v15 | v13)
        {
          if (v13)
          {
            if (v13 == 1) {
              uint64_t v21 = 0;
            }
            else {
              uint64_t v21 = v8;
            }
            uint64_t v22 = a2[1];
            double v23 = (double)(v21 - *a2) * (double)(a3[1] - v22) / (double)(*a3 - *a2);
            *a2 = v21;
            a2[1] = v22 + (uint64_t)v23;
          }
          unsigned int v13 = 0;
          if (v15)
          {
            if (v15 == 1) {
              uint64_t v8 = 0;
            }
            uint64_t v24 = a3[1];
            double v25 = (double)(v8 - *a3) * (double)(v24 - a2[1]) / (double)(*a3 - *a2);
            *a3 = v8;
            a3[1] = v24 + (uint64_t)v25;
            unsigned int v15 = 0;
          }
        }
        goto LABEL_34;
      }
    }
    else if (v15 < 4)
    {
      goto LABEL_14;
    }
    if (v15 >= 8) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *a3 + (uint64_t)((double)(v19 - a3[1]) * (double)(*a3 - v11) / (double)(a3[1] - v12));
    *a3 = v20;
    a3[1] = v19;
    unsigned int v15 = ((unint64_t)v20 >> 63) | (2 * (v20 >= v6));
    if ((v15 & v13) != 0) {
      goto LABEL_34;
    }
    goto LABEL_24;
  }
LABEL_34:
  BOOL v10 = (v13 | v15) == 0;
  if (v28) {
LABEL_35:
  }
    sub_1002D6888(v27);
  return v10;
}

uint64_t sub_10032663C(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4, int a5, int a6)
{
  *(_DWORD *)(a1 + 28) = -1;
  if (a5 != 4 && a5 != 8)
  {
    int64x2_t v56 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v56, 38), "connectivity == 8 || connectivity == 4", 38);
    sub_1002D2278(-215, v56.i64, "LineIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 170);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 12);
  unsigned int v13 = *a4;
  BOOL v14 = *a3 >= v12 || v13 >= v12;
  if (v14 || (unsigned int v15 = *(_DWORD *)(a2 + 8), a3[1] >= v15) || (v16 = a4[1], v16 >= v15))
  {
    uint64_t v17 = **(int **)(a2 + 64);
    uint64_t v18 = *(int *)(*(void *)(a2 + 64) + 4);
    uint64_t v19 = a3[1];
    v56.i64[0] = *a3;
    v56.i64[1] = v19;
    uint64_t v20 = (int)a4[1];
    uint64_t v54 = (int)v13;
    uint64_t v55 = v20;
    v53[0] = v18;
    v53[1] = v17;
    BOOL v21 = sub_1003263F4(v53, v56.i64, &v54);
    *(int32x2_t *)a3 = vmovn_s64(v56);
    unsigned int v13 = v54;
    unsigned int v16 = v55;
    *a4 = v54;
    a4[1] = v16;
    if (!v21)
    {
      *(void *)a1 = *(void *)(a2 + 16);
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      *(void *)(a1 + 40) = 0;
      return a1;
    }
  }
  int v22 = *(_DWORD *)(a2 + 4);
  BOOL v23 = __OFSUB__(v22, 1);
  int v24 = v22 - 1;
  if (v24 < 0 != v23)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a2 + 80);
    int v27 = *a3;
    int v28 = a3[1];
    int v29 = v13 - *a3;
    int v30 = v16 - v28;
    int v31 = v29 >> 31;
    if (a6) {
      goto LABEL_13;
    }
LABEL_16:
    int v32 = (v25 ^ v31) - v31;
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)(*(void *)(a2 + 72) + 8 * v24);
  uint64_t v26 = *(void *)(a2 + 80);
  int v27 = *a3;
  int v28 = a3[1];
  int v29 = v13 - *a3;
  int v30 = v16 - v28;
  int v31 = v29 >> 31;
  if (!a6) {
    goto LABEL_16;
  }
LABEL_13:
  int v30 = (v30 ^ v31) - v31;
  int v27 = v13 & v31 | v27 & ~v31;
  int v28 = v16 & v31 | v28 & ~v31;
  *a3 = v27;
  a3[1] = v28;
  int v32 = v25;
LABEL_17:
  int v33 = (v31 ^ v29) - v31;
  uint64_t v34 = *(void *)(a2 + 16);
  uint64_t v35 = v34 + v26 * v28;
  int v36 = v30 >> 31;
  if (v30 < 0) {
    int v30 = -v30;
  }
  int v37 = (v26 ^ v36) - v36;
  BOOL v38 = v30 <= v33;
  if (v30 <= v33) {
    int v39 = 0;
  }
  else {
    int v39 = -1;
  }
  int v40 = v30 & v39 ^ v33;
  int v41 = v40 & v39 ^ v30;
  int v42 = v41 & v39 ^ v40;
  if (v38) {
    int v43 = 0;
  }
  else {
    int v43 = -1;
  }
  int v44 = v37 & v43 ^ v32;
  int v45 = v44 & v43 ^ v37;
  int v46 = v45 & v43 ^ v44;
  int v47 = -2 * v41;
  int v48 = v42 + v41;
  int v49 = 2 * v41;
  if (a5 == 8) {
    int v48 = v42;
  }
  int v50 = v42 - v49;
  if (a5 == 8)
  {
    int v51 = -v49;
  }
  else
  {
    int v50 = 0;
    int v51 = v47;
  }
  if (a5 != 8) {
    v45 -= v46;
  }
  *(_DWORD *)(a1 + 32) = v51;
  *(_DWORD *)(a1 + 36) = 2 * v48;
  *(_DWORD *)(a1 + 40) = v46;
  *(_DWORD *)(a1 + 44) = v45;
  *(_DWORD *)(a1 + 24) = v50;
  *(_DWORD *)(a1 + 28) = v48 + 1;
  *(void *)a1 = v35 + v25 * v27;
  *(void *)(a1 + 8) = v34;
  *(_DWORD *)(a1 + 16) = v26;
  *(_DWORD *)(a1 + 20) = v25;
  return a1;
}

void sub_1003268C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1003268D8(uint64_t a1, double *a2, int a3, int a4, int a5, uint64_t a6, double **a7)
{
  sub_1002D6AE8(v75, &off_100499A18);
  int v14 = a3 + 360 * ((a3 >> 31) + ((a3 & ~(a3 >> 31)) - ((a3 >> 31) + a3)) / 0x168);
  if (v14 >= 360) {
    int v15 = 360;
  }
  else {
    int v15 = a3 + 360 * ((a3 >> 31) + ((a3 & ~(a3 >> 31)) - ((a3 >> 31) + a3)) / 0x168);
  }
  unsigned int v16 = v14 - 360 * ((v14 - v15 + 359) / 0x168u);
  if (a4 <= a5) {
    int v17 = a5;
  }
  else {
    int v17 = a4;
  }
  if (a4 >= a5) {
    int v18 = a5;
  }
  else {
    int v18 = a4;
  }
  if (v18 < 0)
  {
    if (v18 <= -360) {
      int v19 = -360;
    }
    else {
      int v19 = v18;
    }
    if (v18 >= 0xFFFFFE98) {
      int v20 = v18;
    }
    else {
      int v20 = v18 + 1;
    }
    unsigned int v21 = (v19 - v20) / 0x168u;
    if (v18 < 0xFFFFFE98) {
      ++v21;
    }
    int v22 = 360 * v21;
    v18 += v22 + 360;
    v17 += v22 + 360;
  }
  if (v17 >= 720) {
    int v23 = 720;
  }
  else {
    int v23 = v17;
  }
  unsigned int v24 = 360 * ((v17 - v23 + 359) / 0x168u);
  int v25 = v17 - v24 - 360;
  int v26 = v18 - v24 - 360;
  if (v17 < 361) {
    int v26 = v18;
  }
  else {
    int v17 = v25;
  }
  if (v17 - v26 <= 360) {
    int v27 = v17;
  }
  else {
    int v27 = 360;
  }
  if (v17 - v26 <= 360) {
    int v28 = v26;
  }
  else {
    int v28 = 0;
  }
  float v29 = flt_1004087F8[v16];
  float v30 = flt_1004087F8[450 - v16];
  int v31 = *a7;
  int v32 = a7[1];
  if (v32 != *a7)
  {
    a7[1] = v31;
    int v32 = v31;
  }
  if (v28 < v27 + (int)a6)
  {
    double v33 = v30;
    double v34 = v29;
    int v74 = v27;
    while (1)
    {
      while (1)
      {
        int v36 = v28 >= v27 ? v27 : v28;
        int v37 = v36 + (v36 < 0 ? 0x168 : 0);
        double v38 = a2[1] * flt_1004087F8[v37];
        double v39 = *a2 * flt_1004087F8[450 - v37];
        double v40 = *(double *)a1 + v39 * v33 - v38 * v34;
        double v41 = *(double *)(a1 + 8) + v39 * v34 + v38 * v33;
        unint64_t v42 = (unint64_t)a7[2];
        if ((unint64_t)v32 >= v42) {
          break;
        }
        *int v32 = v40;
        v32[1] = v41;
        v32 += 2;
        a7[1] = v32;
        BOOL v35 = v28 < v27;
        v28 += a6;
        if (!v35) {
          goto LABEL_81;
        }
      }
      int v43 = a2;
      uint64_t v44 = a1;
      uint64_t v45 = a6;
      int v46 = *a7;
      uint64_t v47 = (char *)v32 - (char *)*a7;
      uint64_t v48 = v47 >> 4;
      unint64_t v49 = (v47 >> 4) + 1;
      if (v49 >> 60) {
        sub_10000B98C();
      }
      uint64_t v50 = v42 - (void)v46;
      if (v50 >> 3 > v49) {
        unint64_t v49 = v50 >> 3;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51 >> 60) {
        sub_10000BA6C();
      }
      uint64_t v52 = (char *)operator new(16 * v51);
      double v53 = (double *)&v52[16 * v48];
      *double v53 = v40;
      v53[1] = v41;
      if (v32 == v46)
      {
        a6 = v45;
        a1 = v44;
        a2 = v43;
        int v32 = v53 + 2;
        *a7 = v53;
        a7[1] = v53 + 2;
        a7[2] = (double *)&v52[16 * v51];
        if (!v46) {
          goto LABEL_56;
        }
LABEL_55:
        operator delete(v46);
        goto LABEL_56;
      }
      unint64_t v54 = (char *)v32 - (char *)v46 - 16;
      if (v54 < 0x310) {
        break;
      }
      unint64_t v58 = v54 & 0xFFFFFFFFFFFFFFF0;
      if (&v52[v47 - 16 - (v54 & 0xFFFFFFFFFFFFFFF0)] > &v52[v47 - 16]) {
        break;
      }
      if ((double *)((char *)v32 - v58 - 16) > v32 - 2) {
        break;
      }
      unint64_t v59 = (unint64_t)&v52[v47 - 8];
      if (v59 - v58 > v59) {
        break;
      }
      uint64_t v60 = v32 - 1;
      if ((double *)((char *)v32 - v58 - 8) > v32 - 1) {
        break;
      }
      unint64_t v61 = v54 >> 4;
      unint64_t v62 = v47 - v58;
      uint64_t v63 = &v52[v62 - 16];
      BOOL v64 = &v52[v62 - 8] >= (char *)v32 || &v60[-2 * v61] >= v53;
      BOOL v65 = !v64;
      if ((unint64_t)&v32[-2 * v61 - 2] < v59 && v63 < (char *)v60) {
        break;
      }
      a6 = v45;
      if (v65)
      {
        uint64_t v55 = v32;
        int64x2_t v56 = (double *)&v52[16 * v48];
        goto LABEL_52;
      }
      unint64_t v67 = v61 + 1;
      uint64_t v68 = (v61 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      uint64_t v55 = &v32[-2 * v68];
      int64x2_t v56 = &v53[-2 * v68];
      int8x16_t v69 = v32 - 4;
      __int32 v70 = v53 - 4;
      uint64_t v71 = v68;
      a1 = v44;
      do
      {
        float64x2x2_t v77 = vld2q_f64(v69);
        int32x2_t v72 = v69 - 4;
        float64x2x2_t v78 = vld2q_f64(v72);
        vst2q_f64(v70, v77);
        unint64_t v73 = v70 - 4;
        vst2q_f64(v73, v78);
        v70 -= 8;
        v69 -= 8;
        v71 -= 4;
      }
      while (v71);
      a2 = v43;
      if (v67 != v68) {
        goto LABEL_53;
      }
LABEL_54:
      int v32 = v53 + 2;
      *a7 = v56;
      a7[1] = v53 + 2;
      a7[2] = (double *)&v52[16 * v51];
      if (v46) {
        goto LABEL_55;
      }
LABEL_56:
      int v27 = v74;
      a7[1] = v32;
      BOOL v35 = v28 < v74;
      v28 += a6;
      if (!v35)
      {
LABEL_81:
        int v31 = *a7;
        goto LABEL_82;
      }
    }
    uint64_t v55 = v32;
    int64x2_t v56 = (double *)&v52[16 * v48];
    a6 = v45;
LABEL_52:
    a1 = v44;
    a2 = v43;
    do
    {
LABEL_53:
      long long v57 = *((_OWORD *)v55 - 1);
      v55 -= 2;
      *((_OWORD *)v56 - 1) = v57;
      v56 -= 2;
    }
    while (v55 != v46);
    goto LABEL_54;
  }
LABEL_82:
  if ((char *)v32 - (char *)v31 == 16) {
    sub_100326D78((uint64_t)a7, 2uLL, (uint64_t *)a1);
  }
  if (v76) {
    sub_1002D6888(v75);
  }
}

void sub_100326D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100326D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100326D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

int64x2_t *sub_100326D78(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(uint64_t **)a1;
  uint64_t result = (int64x2_t *)v7;
  if (a2 > (v6 - (uint64_t)v7) >> 4)
  {
    if (v7)
    {
      *(void *)(a1 + 8) = v7;
      operator delete(v7);
      uint64_t v6 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a2 >> 60) {
      goto LABEL_60;
    }
    uint64_t v9 = v6 >> 3;
    if (v6 >> 3 <= a2) {
      uint64_t v9 = a2;
    }
    BOOL v31 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    if (!v31) {
      unint64_t v10 = v9;
    }
    if (v10 >> 60) {
LABEL_60:
    }
      sub_10000B98C();
    uint64_t v11 = v10;
    uint64_t result = (int64x2_t *)operator new(16 * v10);
    *(void *)a1 = result;
    *(void *)(a1 + 16) = &result[v11];
    unsigned int v12 = &result[a2];
    int64x2_t v13 = *(int64x2_t *)a3;
    unint64_t v14 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
    int v15 = result;
    if (v14 < 3) {
      goto LABEL_63;
    }
    unint64_t v16 = v14 + 1;
    int v15 = &result[v16 & 0x1FFFFFFFFFFFFFFCLL];
    int64x2_t v17 = vdupq_lane_s64(v13.i64[0], 0);
    int64x2_t v18 = vdupq_laneq_s64(v13, 1);
    int64x2_t v19 = vzip2q_s64(v17, v18);
    int64x2_t v20 = vzip1q_s64(v17, v18);
    unsigned int v21 = result + 2;
    uint64_t v22 = v16 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v21[-2] = v20;
      v21[-1] = v19;
      *unsigned int v21 = v20;
      v21[1] = v19;
      v21 += 4;
      v22 -= 4;
    }
    while (v22);
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
        *v15++ = v13;
      while (v15 != v12);
    }
    goto LABEL_42;
  }
  int v23 = *(_OWORD **)(a1 + 8);
  int64_t v24 = (char *)v23 - (char *)v7;
  unint64_t v25 = ((char *)v23 - (char *)v7) >> 4;
  if (v25 >= a2) {
    unint64_t v26 = a2;
  }
  else {
    unint64_t v26 = ((char *)v23 - (char *)v7) >> 4;
  }
  if (v26)
  {
    if (v26 < 0xA) {
      goto LABEL_64;
    }
    double v40 = a3 + 1;
    double v41 = &v7[2 * v26];
    unint64_t v42 = (unint64_t)(v41 - 1);
    BOOL v43 = v7 + 1 >= a3 + 2 || v40 >= v41;
    BOOL v44 = !v43;
    if (v42 > (unint64_t)a3 && v7 < v40) {
      goto LABEL_64;
    }
    if (v44) {
      goto LABEL_64;
    }
    uint64_t result = (int64x2_t *)&v7[2 * (v26 & 0xFFFFFFFFFFFFFFFCLL)];
    int v46 = (int64x2_t *)(v7 + 4);
    unint64_t v47 = v26 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v48 = *(int64x2_t *)a3;
      v48.i64[1] = a3[1];
      int64x2_t v49 = vzip2q_s64(vdupq_lane_s64(*a3, 0), vdupq_lane_s64(v48.i64[1], 0));
      v46[-2] = v48;
      v46[-1] = v49;
      *int v46 = v48;
      v46[1] = v49;
      v46 += 4;
      v47 -= 4;
    }
    while (v47);
    BOOL v50 = v26 == (v26 & 0xFFFFFFFFFFFFFFFCLL);
    v26 &= 3u;
    if (!v50)
    {
LABEL_64:
      do
      {
        *result++ = *(int64x2_t *)a3;
        --v26;
      }
      while (v26);
    }
  }
  BOOL v31 = a2 >= v25;
  unint64_t v27 = a2 - v25;
  if (v27 == 0 || !v31)
  {
    unsigned int v12 = (int64x2_t *)&v7[2 * a2];
LABEL_42:
    *(void *)(a1 + 8) = v12;
    return result;
  }
  int v28 = &v23[v27];
  unint64_t v29 = 16 * a2 - (v24 & 0xFFFFFFFFFFFFFFF0) - 16;
  if (v29 < 0x110) {
    goto LABEL_65;
  }
  unint64_t v30 = (unint64_t)(a3 + 1);
  BOOL v31 = (_OWORD *)((char *)v23 + 8) >= (_OWORD *)a3 + 1 || v30 >= (unint64_t)v23 + v29 + 16;
  BOOL v32 = !v31;
  if ((uint64_t *)((char *)v23 + (v29 | 8)) > a3 && (unint64_t)v23 < v30) {
    goto LABEL_65;
  }
  if (v32) {
    goto LABEL_65;
  }
  uint64_t v34 = (v29 >> 4) + 1;
  BOOL v35 = &v23[v34 & 0x1FFFFFFFFFFFFFFCLL];
  int v36 = (int64x2_t *)(v23 + 2);
  uint64_t v37 = v34 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    int64x2_t v38 = *(int64x2_t *)a3;
    v38.i64[1] = a3[1];
    int64x2_t v39 = vzip2q_s64(vdupq_lane_s64(*a3, 0), vdupq_lane_s64(v38.i64[1], 0));
    v36[-2] = v38;
    v36[-1] = v39;
    *int v36 = v38;
    v36[1] = v39;
    v36 += 4;
    v37 -= 4;
  }
  while (v37);
  int v23 = v35;
  if (v34 != (v34 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_65:
    do
      *v23++ = *(_OWORD *)a3;
    while (v23 != v28);
  }
  *(void *)(a1 + 8) = v28;
  return result;
}

void sub_10032700C(uint64_t a1, void *a2, void *a3, double *a4, unsigned int a5, int a6, unsigned int a7)
{
  sub_1002D6AE8(v34, &off_100499A38);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    long long v15 = *(_OWORD *)(v14 + 16);
    long long v26 = *(_OWORD *)v14;
    long long v27 = v15;
    long long v28 = *(_OWORD *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 56);
    uint64_t v29 = *(void *)(v14 + 48);
    uint64_t v30 = v16;
    BOOL v31 = (char *)&v26 + 8;
    BOOL v32 = v33;
    v33[0] = 0;
    v33[1] = 0;
    if (v16) {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v26) = 0;
      sub_1002931A8((uint64_t)&v26, v14);
    }
    else
    {
      int64x2_t v17 = *(void **)(v14 + 72);
      int64x2_t v18 = v32;
      *(void *)BOOL v32 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v26);
  }
  if ((v26 & 7) != 0) {
    int v19 = 8;
  }
  else {
    int v19 = 16;
  }
  if (a6 == 16) {
    a6 = v19;
  }
  if (a5 >= 0x8000)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&v36, 44), "0 <= thickness && thickness <= MAX_THICKNESS", 44);
    sub_1002D2278(-215, &v36, "line", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 1817);
  }
  if (a7 >= 0x11)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&v36, 31), "0 <= shift && shift <= XY_SHIFT", 31);
    sub_1002D2278(-215, &v36, "line", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 1818);
  }
  sub_100298DD4(a4, (uint64_t)&v36, v26 & 0xFFF, 0);
  v20.i64[0] = (int)*a2;
  v20.i64[1] = (int)HIDWORD(*a2);
  uint64x2_t v21 = (uint64x2_t)v20;
  v20.i64[0] = (int)*a3;
  v20.i64[1] = (int)HIDWORD(*a3);
  int64x2_t v24 = v20;
  uint64x2_t v25 = v21;
  sub_10032735C((unsigned int *)&v26, &v25, &v24, (unsigned __int8 *)&v36, a5, a6, 3, a7);
  if (v30 && atomic_fetch_add((atomic_uint *volatile)(v30 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v26);
  }
  uint64_t v30 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  if (SDWORD1(v26) >= 1)
  {
    uint64_t v22 = 0;
    int v23 = v31;
    do
      *(_DWORD *)&v23[4 * v22++] = 0;
    while (v22 < SDWORD1(v26));
  }
  if (v32 != v33) {
    j__free(v32);
  }
  if (v35) {
    sub_1002D6888(v34);
  }
}

void sub_1003272D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032732C(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_10032735C(unsigned int *a1, uint64x2_t *a2, int64x2_t *a3, unsigned __int8 *a4, int a5, int a6, char a7, int a8)
{
  *a2 = vshlq_u64(*a2, (uint64x2_t)vdupq_n_s64((16 - a8)));
  uint64_t v13 = a3->i64[0] << (16 - a8);
  uint64_t v14 = a3->i64[1] << (16 - a8);
  a3->i64[0] = v13;
  a3->i64[1] = v14;
  if (a5 > 1)
  {
    uint64_t v27 = a2->i64[0];
    uint64_t v28 = a2->i64[1];
    double v29 = (double)(a2->i64[0] - v13) * 0.0000152587891;
    double v30 = (double)(v14 - v28) * 0.0000152587891;
    double v31 = v30 * v30 + v29 * v29;
    int v32 = a5 << 15;
    if (fabs(v31) > 2.22044605e-16)
    {
      double v33 = ((double)v32 + (double)((a5 & 1) << 16) * 0.5) / sqrt(v31);
      uint64_t v34 = (int)(uint64_t)rint(v30 * v33);
      uint64_t v35 = (int)(uint64_t)rint(v29 * v33);
      v47[0] = v34 + v27;
      v47[1] = v35 + v28;
      v47[2] = v27 - v34;
      v47[3] = v28 - v35;
      v47[4] = v13 - v34;
      v47[5] = v14 - v35;
      v47[6] = v34 + v13;
      v47[7] = v35 + v14;
      sub_1003278E4((uint64_t)a1, v47, 4, a4, a6, 16);
    }
    if (a6 >= 16)
    {
      if (a7)
      {
        uint64x2_t v41 = *a2;
        v40.i64[0] = v32;
        v40.i64[1] = v32;
        sub_100327FCC(a1, (int64x2_t *)&v41, &v40, 0, 0, 360, a4, -1, a6);
      }
      uint64_t v38 = a3->i64[0];
      a2->i64[0] = a3->i64[0];
      uint64_t v39 = a3->i64[1];
      a2->i64[1] = v39;
      if ((a7 & 2) != 0)
      {
        v41.i64[0] = v38;
        v41.i64[1] = v39;
        v40.i64[0] = v32;
        v40.i64[1] = v32;
        sub_100327FCC(a1, (int64x2_t *)&v41, &v40, 0, 0, 360, a4, -1, a6);
      }
    }
    else
    {
      if (a7)
      {
        int32x2_t v42 = vrshrn_n_s64(*(int64x2_t *)a2, 0x10uLL);
        sub_100328648(a1, &v42, (v32 + 0x8000) >> 16, a4, 1);
      }
      uint64_t v36 = a3->i64[0];
      a2->i64[0] = a3->i64[0];
      uint64_t v37 = a3->i64[1];
      a2->i64[1] = v37;
      if ((a7 & 2) != 0)
      {
        v42.i32[0] = (unint64_t)(v36 + 0x8000) >> 16;
        v42.i32[1] = (unint64_t)(v37 + 0x8000) >> 16;
        sub_100328648(a1, &v42, (v32 + 0x8000) >> 16, a4, 1);
      }
    }
    *a2 = *(uint64x2_t *)a3;
  }
  else if (a6 > 15)
  {
    uint64x2_t v44 = *a2;
    v43[0] = v13;
    v43[1] = v14;
    sub_10032ADC4(a1, v44.i64, v43, a4);
  }
  else if (!a8 || a6 == 4 || a6 == 1)
  {
    int64x2_t v15 = vdupq_n_s64(0x8000uLL);
    *(int64x2_t *)a2 = vshrq_n_s64(vaddq_s64(*(int64x2_t *)a2, v15), 0x10uLL);
    int64x2_t v16 = vshrq_n_s64(vaddq_s64(*a3, v15), 0x10uLL);
    *a3 = v16;
    uint64_t v17 = 0xFFFFFFFF80000000;
    uint64_t v18 = a2->i64[0];
    int64_t v19 = a2->i64[1];
    if (a2->i64[0] <= (int64_t)0xFFFFFFFF80000000) {
      uint64_t v18 = 0xFFFFFFFF80000000;
    }
    if (v18 >= 0x7FFFFFFF) {
      int v20 = 0x7FFFFFFF;
    }
    else {
      int v20 = v18;
    }
    if (v19 <= (uint64_t)0xFFFFFFFF80000000) {
      uint64_t v21 = 0xFFFFFFFF80000000;
    }
    else {
      uint64_t v21 = a2->i64[1];
    }
    if (v21 >= 0x7FFFFFFF) {
      int v22 = 0x7FFFFFFF;
    }
    else {
      int v22 = v21;
    }
    uint64_t v23 = v16.i64[0];
    if (v16.i64[0] <= (uint64_t)0xFFFFFFFF80000000) {
      uint64_t v23 = 0xFFFFFFFF80000000;
    }
    if (v23 >= 0x7FFFFFFF) {
      unsigned int v24 = 0x7FFFFFFF;
    }
    else {
      unsigned int v24 = v23;
    }
    if (v16.i64[1] > (uint64_t)0xFFFFFFFF80000000) {
      uint64_t v17 = v16.i64[1];
    }
    if (v17 >= 0x7FFFFFFF) {
      unsigned int v25 = 0x7FFFFFFF;
    }
    else {
      unsigned int v25 = v17;
    }
    sub_10032A3EC((uint64_t)a1, v20, v22, v24, v25, a4, a6);
  }
  else
  {
    uint64x2_t v46 = *a2;
    v45[0] = v13;
    v45[1] = v14;
    sub_10032A5AC((uint64_t)a1, v46.i64, v45, a4);
  }
}

__n128 sub_100327738(unsigned int *a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5, int a6, int a7, unsigned int a8)
{
  if (a2 && (int)a3 >= 1)
  {
    if (a4) {
      char v14 = 2;
    }
    else {
      char v14 = 3;
    }
    if (a6 < 0 || a8 >= 0x11)
    {
      v28[0] = 0;
      v28[1] = 0;
      qmemcpy((void *)sub_1002D19D8(v28, 49), "0 <= shift && shift <= XY_SHIFT && thickness >= 0", 49);
      sub_1002D2278(-215, v28, "PolyLine", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 1726);
    }
    if ((a4 ^ 1u) < a3)
    {
      if (a4) {
        uint64_t v15 = a3 - 1;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = a3;
      uint64x2_t v17 = *(uint64x2_t *)(a2 + 16 * v15);
      int64x2_t v25 = *(int64x2_t *)(a2 + 16 * (a4 ^ 1u));
      int64x2_t v26 = v25;
      uint64x2_t v27 = v17;
      if (a4) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = 2;
      }
      sub_10032735C(a1, &v27, &v26, a5, a6, a7, v14, a8);
      uint64_t v20 = v16 - v18;
      if (v16 != v18)
      {
        uint64_t v21 = v25.i64[1];
        uint64_t v22 = v25.i64[0];
        uint64_t v23 = (__n128 *)(a2 + 16 * v18);
        do
        {
          v27.i64[0] = v22;
          v27.i64[1] = v21;
          __n128 v24 = *v23++;
          int64x2_t v26 = (int64x2_t)v24;
          sub_10032735C(a1, &v27, &v26, a5, a6, a7, 2, a8);
          __n128 result = v24;
          uint64_t v21 = v24.n128_i64[1];
          uint64_t v22 = v24.n128_u64[0];
          --v20;
        }
        while (v20);
      }
    }
  }
  return result;
}

void sub_1003278CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003278E4(uint64_t result, void *a2, int a3, unsigned __int8 *a4, int a5, int a6)
{
  uint64_t v6 = *(int **)(result + 64);
  int v7 = *(_DWORD *)(result + 4);
  BOOL v8 = __OFSUB__(v7, 1);
  int v9 = v7 - 1;
  if (v9 < 0 != v8) {
    LODWORD(v94) = 0;
  }
  else {
    uint64_t v94 = *(void *)(*(void *)(result + 72) + 8 * v9);
  }
  uint64_t v95 = *v6;
  char v97 = a6;
  int v99 = v6[1];
  BOOL v88 = a5 < 16;
  uint64_t v90 = *(void *)(result + 16);
  uint64_t v10 = 0xFFFFLL;
  if (a5 < 16) {
    uint64_t v10 = 0x8000;
  }
  uint64_t v93 = v10;
  char v11 = 16 - a6;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  char v106 = 16 - a6;
  uint64_t v107 = result;
  int v100 = a3 - 1;
  if (a3 < 1)
  {
    uint64_t v20 = 0;
    uint64_t v23 = *a2;
    uint64_t v22 = a2[1];
    uint64_t v18 = a4;
  }
  else
  {
    char v14 = &a2[2 * a3 - 2];
    uint64_t v15 = v14[1];
    unint64_t v16 = *v14 << v11;
    unint64_t v17 = v15 << v11;
    uint64_t v104 = a3;
    if (a5 >= 9)
    {
      uint64_t v28 = 0;
      LODWORD(v20) = 0;
      double v29 = a2 + 1;
      uint64_t v22 = a2[1];
      uint64_t v23 = *a2;
      uint64_t v18 = a4;
      do
      {
        uint64_t v30 = *(v29 - 1);
        uint64_t v31 = *v29;
        if (*v29 >= v22) {
          uint64_t v20 = v20;
        }
        else {
          uint64_t v20 = v28;
        }
        if (*v29 < v22) {
          uint64_t v22 = *v29;
        }
        if (v13 <= v31) {
          uint64_t v13 = *v29;
        }
        if (v12 <= v30) {
          uint64_t v12 = *(v29 - 1);
        }
        if (v23 >= v30) {
          uint64_t v23 = *(v29 - 1);
        }
        unint64_t v32 = v30 << v11;
        v109[0] = v16;
        v109[1] = v17;
        unint64_t v33 = v31 << v11;
        v108[0] = v30 << v11;
        v108[1] = v31 << v11;
        sub_10032ADC4((unsigned int *)v107, v109, v108, v18);
        char v11 = v106;
        __n128 result = v107;
        ++v28;
        v29 += 2;
        unint64_t v16 = v32;
        unint64_t v17 = v33;
      }
      while (v104 != v28);
    }
    else
    {
      uint64_t v18 = a4;
      if (a6)
      {
        uint64_t v19 = 0;
        LODWORD(v20) = 0;
        uint64_t v21 = a2 + 1;
        uint64_t v22 = a2[1];
        uint64_t v23 = *a2;
        do
        {
          uint64_t v24 = *(v21 - 1);
          uint64_t v25 = *v21;
          if (*v21 >= v22) {
            uint64_t v20 = v20;
          }
          else {
            uint64_t v20 = v19;
          }
          if (*v21 < v22) {
            uint64_t v22 = *v21;
          }
          if (v13 <= v25) {
            uint64_t v13 = *v21;
          }
          if (v12 <= v24) {
            uint64_t v12 = *(v21 - 1);
          }
          if (v23 >= v24) {
            uint64_t v23 = *(v21 - 1);
          }
          unint64_t v26 = v24 << v11;
          v111[0] = v16;
          v111[1] = v17;
          unint64_t v27 = v25 << v11;
          v110[0] = v24 << v11;
          v110[1] = v25 << v11;
          sub_10032A5AC(v107, v111, v110, v18);
          char v11 = v106;
          __n128 result = v107;
          ++v19;
          v21 += 2;
          unint64_t v16 = v26;
          unint64_t v17 = v27;
        }
        while (v104 != v19);
      }
      else
      {
        uint64_t v34 = 0;
        LODWORD(v20) = 0;
        uint64_t v35 = a2 + 1;
        uint64_t v22 = a2[1];
        uint64_t v23 = *a2;
        do
        {
          uint64_t v36 = *(v35 - 1);
          uint64_t v37 = *v35;
          if (*v35 >= v22) {
            uint64_t v20 = v20;
          }
          else {
            uint64_t v20 = v34;
          }
          if (*v35 < v22) {
            uint64_t v22 = *v35;
          }
          if (v13 <= v37) {
            uint64_t v13 = *v35;
          }
          unint64_t v38 = v36 << v11;
          unint64_t v39 = v37 << v11;
          if (v12 <= v36) {
            uint64_t v12 = *(v35 - 1);
          }
          if (v23 >= v36) {
            uint64_t v23 = *(v35 - 1);
          }
          sub_10032A3EC(v107, v16 >> 16, v17 >> 16, v38 >> 16, v39 >> 16, v18, a5);
          char v11 = v106;
          __n128 result = v107;
          ++v34;
          v35 += 2;
          unint64_t v16 = v38;
          unint64_t v17 = v39;
        }
        while (v104 != v34);
      }
    }
  }
  __src = v18;
  uint64x2_t v41 = a2;
  int v40 = a3;
  int v42 = a5;
  int v43 = v100;
  if (a3 < 3) {
    return result;
  }
  uint64_t v44 = 1 << v97 >> 1;
  if ((((v12 + v44) >> v97) & 0x80000000) != 0) {
    return result;
  }
  uint64_t v45 = (v13 + v44) >> v97;
  if ((v45 & 0x80000000) != 0) {
    return result;
  }
  char v46 = v97;
  if (v99 <= (int)((v23 + v44) >> v97)) {
    return result;
  }
  uint64_t v87 = (v22 + v44) >> v97;
  if ((int)v95 <= (int)v87) {
    return result;
  }
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  unint64_t v82 = (unint64_t)v88 << 15;
  if (v45 >= v95 - 1) {
    LODWORD(v47) = v95 - 1;
  }
  else {
    uint64_t v47 = (v13 + v44) >> v97;
  }
  uint64_t v113 = -65536;
  uint64_t v105 = -65536;
  uint64_t v112 = -65536;
  uint64_t v48 = v90 + *(void *)(result + 80) * (int)v87;
  int v91 = v47;
  if ((int)v87 <= (int)v47) {
    int v49 = v47;
  }
  else {
    int v49 = (v22 + v44) >> v97;
  }
  int v89 = v49;
  uint64_t v50 = -65536;
  LODWORD(v51) = (v22 + v44) >> v97;
  __n128 result = v20;
  uint64_t v96 = (v22 + v44) >> v97;
  int v52 = v51;
  int v53 = a3;
  uint64_t v83 = 1 << v97 >> 1;
  char v84 = v97;
  while (1)
  {
    if (v42 >= 16 && v52 >= v91 && v52 != v87)
    {
LABEL_83:
      if (v53 < 0) {
        return result;
      }
      uint64_t v98 = result;
      if ((v52 & 0x80000000) == 0) {
        goto LABEL_85;
      }
      goto LABEL_64;
    }
    uint64_t v55 = v96;
    if (v52 >= (int)v96)
    {
      BOOL v8 = __OFSUB__(v53--, 1);
      if (v53 < 0 == v8) {
        break;
      }
    }
LABEL_82:
    uint64_t v96 = v55;
    if (v52 < (int)v51) {
      goto LABEL_83;
    }
    if (v53 < 1) {
      return result;
    }
    if (v43 + (int)v20 >= v40) {
      int v74 = v40;
    }
    else {
      int v74 = 0;
    }
    int v75 = v43 + v20 - v74;
    uint64_t v51 = (v41[2 * v75 + 1] + v44) >> v46;
    if (v52 >= (int)v51)
    {
      while (1)
      {
        BOOL v8 = __OFSUB__(v53--, 1);
        if ((v53 < 0) ^ v8 | (v53 == 0)) {
          return result;
        }
        LODWORD(v20) = v75;
        int v77 = v75 + v43;
        if (v77 >= v40) {
          int v78 = v40;
        }
        else {
          int v78 = 0;
        }
        int v75 = v77 - v78;
        uint64_t v51 = (v41[2 * v75 + 1] + v44) >> v46;
        if (v52 < (int)v51)
        {
          uint64_t v76 = v75;
          --v53;
          goto LABEL_111;
        }
      }
    }
    uint64_t v76 = v75;
    --v53;
LABEL_111:
    uint64_t v79 = 2 * v76;
    uint64_t v80 = v41[2 * (int)v20];
    uint64_t v81 = 2 * ((v41[v79] - v80) << v11) + (int)v51 - v52;
    uint64_t v105 = v80 << v11;
    uint64_t v113 = v80 << v11;
    LODWORD(v20) = v75;
    uint64_t v86 = v81 / (2 * ((int)v51 - v52));
    uint64_t v98 = result;
    if ((v52 & 0x80000000) == 0)
    {
LABEL_85:
      unint64_t v64 = (v111[4 * (v50 <= v105) + 3] + v82) >> 16;
      if ((v64 & 0x80000000) == 0)
      {
        unint64_t v65 = (unint64_t)(v111[4 * (v50 > v105) + 3] + v93) >> 16;
        if (v99 > (int)v65)
        {
          uint64_t v66 = v65 & ~((int)v65 >> 31);
          int v67 = v99 - 1;
          if (v99 > (int)v64) {
            int v67 = (v111[4 * (v50 <= v105) + 3] + v82) >> 16;
          }
          int v68 = v66 * v94;
          int8x16_t v69 = (char *)(v48 + v66 * (int)v94);
          uint64_t v70 = (int)v94 + (int)v94 * (uint64_t)v67;
          unint64_t v71 = v48 + v70;
          if (v94 == 1)
          {
            memset(v69, *__src, v71 - (void)v69);
          }
          else
          {
            int32x2_t v72 = v69;
            if (v68 < (int)v70)
            {
              memcpy(v69, __src, (int)v94);
              int32x2_t v72 = &v69[(int)v94];
            }
            if ((unint64_t)v72 < v71)
            {
              size_t v73 = (int)v94;
              do
              {
                memcpy(v72, v69, v73);
                v72 += v73;
                if (v71 - (unint64_t)v72 >= 2 * v73) {
                  v73 *= 2;
                }
                else {
                  size_t v73 = v71 - (void)v72;
                }
              }
              while (v71 > (unint64_t)v72);
            }
          }
        }
      }
    }
LABEL_64:
    char v11 = v106;
    v50 += v85;
    uint64_t v112 = v50;
    v105 += v86;
    uint64_t v113 = v105;
    v48 += *(void *)(v107 + 80);
    BOOL v54 = v52++ == v89;
    uint64x2_t v41 = a2;
    int v40 = a3;
    int v43 = v100;
    uint64_t v44 = v83;
    char v46 = v84;
    int v42 = a5;
    __n128 result = v98;
    if (v54) {
      return result;
    }
  }
  if ((int)result + 1 >= v40) {
    int v56 = v40;
  }
  else {
    int v56 = 0;
  }
  uint64_t v57 = (result + 1 - v56);
  if (v52 < (int)((v41[2 * (int)v57 + 1] + v44) >> v46))
  {
    uint64_t v58 = (v41[2 * (int)v57 + 1] + v44) >> v46;
    uint64_t v59 = (int)v57;
LABEL_81:
    uint64_t v62 = v41[2 * (int)result];
    uint64_t v63 = 2 * ((v41[2 * v59] - v62) << v11) + (int)v58 - v52;
    uint64_t v50 = v62 << v11;
    uint64_t v112 = v62 << v11;
    __n128 result = v57;
    uint64_t v85 = v63 / (2 * ((int)v58 - v52));
    uint64_t v55 = v58;
    goto LABEL_82;
  }
  while (v53 > 0)
  {
    __n128 result = v57;
    int v60 = v57 + 1;
    if (v60 >= v40) {
      int v61 = v40;
    }
    else {
      int v61 = 0;
    }
    uint64_t v57 = (v60 - v61);
    --v53;
    uint64_t v58 = (v41[2 * (int)v57 + 1] + v44) >> v46;
    if (v52 < (int)v58)
    {
      uint64_t v59 = (int)v57;
      goto LABEL_81;
    }
  }
  return result;
}

void sub_100327FCC(unsigned int *a1, int64x2_t *a2, int64x2_t *a3, int a4, int a5, int a6, unsigned __int8 *a7, int a8, int a9)
{
  int v12 = a5;
  int64x2_t v14 = vabsq_s64(*a3);
  *a3 = v14;
  uint64_t v15 = v14.i64[1];
  if (v14.i64[0] > (unint64_t)v14.i64[1]) {
    uint64_t v15 = v14.i64[0];
  }
  unint64_t v16 = (unint64_t)(v15 + 0x8000) >> 16;
  if ((int)v16 >= 3)
  {
    if (v16 >= 0xA)
    {
      if (v16 >= 0xF) {
        uint64_t v17 = 5;
      }
      else {
        uint64_t v17 = 18;
      }
    }
    else
    {
      uint64_t v17 = 30;
    }
  }
  else
  {
    uint64_t v17 = 90;
  }
  int v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  float64x2_t v18 = vcvtq_f64_s64(*a2);
  float64x2_t v101 = vcvtq_f64_s64(v14);
  float64x2_t v102 = v18;
  sub_1003268D8((uint64_t)&v102, v101.f64, a4, a5, a6, v17, &v103);
  int v91 = a7;
  float v92 = a1;
  uint64_t v98 = 0;
  int v99 = 0;
  int v100 = 0;
  uint64_t v20 = v103;
  uint64_t v19 = v104;
  if (v104 == v103)
  {
    int v61 = a1;
    uint64_t v62 = a2;
    goto LABEL_60;
  }
  int v88 = v12;
  int v89 = a6;
  int v90 = a8;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unsigned int v23 = 0;
  uint64_t v24 = -1;
  uint64_t v25 = -1;
  do
  {
    unint64_t v26 = &v20[2 * v22];
    double v27 = v26[1];
    double v28 = rint(*v26 * 0.0000152587891);
    uint64_t v29 = (uint64_t)rint(v27 * 0.0000152587891) << 32 >> 16;
    uint64_t v30 = ((uint64_t)v28 << 32 >> 16) + (int)(uint64_t)rint(*v26 - (double)((uint64_t)v28 << 32 >> 16));
    uint64_t v31 = v29 + (int)(uint64_t)rint(v27 - (double)v29);
    BOOL v32 = v30 == v24 && v31 == v25;
    if (!v32)
    {
      if (v21 < v100)
      {
        *(void *)uint64_t v21 = v30;
        *((void *)v21 + 1) = v31;
        v21 += 16;
        goto LABEL_13;
      }
      unint64_t v33 = (char *)v98;
      int64_t v34 = v21 - (unsigned char *)v98;
      uint64_t v35 = (v21 - (unsigned char *)v98) >> 4;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 60) {
        sub_10000B98C();
      }
      uint64_t v37 = v100 - (unsigned char *)v98;
      if ((v100 - (unsigned char *)v98) >> 3 > v36) {
        unint64_t v36 = v37 >> 3;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38 >> 60) {
        sub_10000BA6C();
      }
      unint64_t v39 = (char *)operator new(16 * v38);
      int v40 = (uint64_t *)&v39[16 * v35];
      *int v40 = v30;
      v40[1] = v31;
      if (v21 == v33)
      {
        uint64_t v21 = (char *)(v40 + 2);
        uint64_t v98 = &v39[16 * v35];
        int v99 = (char *)(v40 + 2);
        int v100 = &v39[16 * v38];
        if (!v33) {
          goto LABEL_13;
        }
        goto LABEL_32;
      }
      unint64_t v41 = v21 - v33 - 16;
      if (v41 < 0x310) {
        goto LABEL_29;
      }
      unint64_t v45 = v41 & 0xFFFFFFFFFFFFFFF0;
      if (&v39[v34 - 16 - (v41 & 0xFFFFFFFFFFFFFFF0)] > &v39[v34 - 16]) {
        goto LABEL_29;
      }
      if (&v21[-v45 - 16] > v21 - 16) {
        goto LABEL_29;
      }
      unint64_t v46 = (unint64_t)&v39[v34 - 8];
      if (v46 - v45 > v46) {
        goto LABEL_29;
      }
      uint64_t v47 = v21 - 8;
      if (&v21[-v45 - 8] > v21 - 8) {
        goto LABEL_29;
      }
      unint64_t v48 = v41 >> 4;
      unint64_t v49 = v34 - v45;
      uint64_t v50 = &v39[v49 - 16];
      BOOL v51 = &v39[v49 - 8] >= v21 || &v47[-16 * v48] >= (char *)v40;
      BOOL v52 = !v51;
      BOOL v53 = (unint64_t)&v21[-16 * v48 - 16] >= v46 || v50 >= v47;
      if (!v53 || v52)
      {
LABEL_29:
        int v42 = v21;
        int v43 = (uint64_t *)&v39[16 * v35];
      }
      else
      {
        unint64_t v54 = v48 + 1;
        uint64_t v55 = (v48 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        int v42 = &v21[-16 * v55];
        int v43 = &v40[-2 * v55];
        int v56 = (const double *)(v21 - 32);
        uint64_t v57 = (double *)(v40 - 4);
        uint64_t v58 = v55;
        do
        {
          float64x2x2_t v106 = vld2q_f64(v56);
          uint64_t v59 = v56 - 4;
          float64x2x2_t v108 = vld2q_f64(v59);
          vst2q_f64(v57, v106);
          int v60 = v57 - 4;
          vst2q_f64(v60, v108);
          v57 -= 8;
          v56 -= 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == v55)
        {
LABEL_31:
          uint64_t v21 = (char *)(v40 + 2);
          uint64_t v98 = v43;
          int v99 = (char *)(v40 + 2);
          int v100 = &v39[16 * v38];
          if (v33)
          {
LABEL_32:
            operator delete(v33);
            uint64_t v20 = v103;
            uint64_t v19 = v104;
          }
LABEL_13:
          int v99 = v21;
          uint64_t v24 = v30;
          uint64_t v25 = v31;
          goto LABEL_14;
        }
      }
      do
      {
        long long v44 = *((_OWORD *)v42 - 1);
        v42 -= 16;
        *((_OWORD *)v43 - 1) = v44;
        v43 -= 2;
      }
      while (v42 != v33);
      goto LABEL_31;
    }
LABEL_14:
    uint64_t v22 = ++v23;
  }
  while (v23 < (unint64_t)(((char *)v19 - (char *)v20) >> 4));
  a6 = v89;
  a8 = v90;
  int v12 = v88;
  BOOL v32 = v21 - (unsigned char *)v98 == 16;
  int v61 = v92;
  uint64_t v62 = a2;
  if (v32) {
    sub_100326D78((uint64_t)&v98, 2uLL, a2->i64);
  }
LABEL_60:
  if (a8 < 0)
  {
    if (a6 - v12 < 360)
    {
      uint64_t v63 = v99;
      if (v99 >= v100)
      {
        unint64_t v65 = v98;
        int64_t v66 = v99 - (unsigned char *)v98;
        uint64_t v67 = (v99 - (unsigned char *)v98) >> 4;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 60) {
          sub_10000B98C();
        }
        uint64_t v69 = v100 - (unsigned char *)v98;
        if ((v100 - (unsigned char *)v98) >> 3 > v68) {
          unint64_t v68 = v69 >> 3;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70 >> 60) {
          sub_10000BA6C();
        }
        unint64_t v71 = (char *)operator new(16 * v70);
        int32x2_t v72 = (int64x2_t *)&v71[16 * v67];
        *int32x2_t v72 = *v62;
        i8 = v72[1].i8;
        if (v63 == v65)
        {
          int v74 = v72;
        }
        else
        {
          unint64_t v73 = v63 - v65 - 16;
          if (v73 < 0x130) {
            goto LABEL_75;
          }
          uint64_t v76 = &v63[-(v73 & 0xFFFFFFFFFFFFFFF0)];
          BOOL v77 = &v71[v66 - 8 - (v73 & 0xFFFFFFFFFFFFFFF0)] >= v63 || v76 - 8 >= (char *)v72;
          BOOL v78 = !v77;
          if (v76 - 16 < &v71[v66 - 8] && &v71[v66 - (v73 & 0xFFFFFFFFFFFFFFF0) - 16] < v63 - 8) {
            goto LABEL_75;
          }
          if (v78) {
            goto LABEL_75;
          }
          uint64_t v80 = (v73 >> 4) + 1;
          uint64_t v81 = 16 * (v80 & 0x1FFFFFFFFFFFFFFCLL);
          unint64_t v82 = &v63[-v81];
          int v74 = &v72[v81 / 0xFFFFFFFFFFFFFFF0];
          uint64_t v83 = (const double *)(v63 - 32);
          i64 = (double *)v72[-2].i64;
          uint64_t v85 = v80 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            float64x2x2_t v107 = vld2q_f64(v83);
            uint64_t v86 = v83 - 4;
            float64x2x2_t v109 = vld2q_f64(v86);
            vst2q_f64(i64, v107);
            uint64_t v87 = i64 - 4;
            vst2q_f64(v87, v109);
            i64 -= 8;
            v83 -= 8;
            v85 -= 4;
          }
          while (v85);
          uint64_t v63 = v82;
          int32x2_t v72 = v74;
          if (v80 != (v80 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_75:
            int v74 = v72;
            do
            {
              int64x2_t v75 = *((int64x2_t *)v63 - 1);
              v63 -= 16;
              v74[-1] = v75;
              --v74;
            }
            while (v63 != v65);
          }
        }
        uint64_t v98 = v74;
        int v99 = i8;
        int v100 = &v71[16 * v70];
        if (v65) {
          operator delete(v65);
        }
      }
      else
      {
        *(int64x2_t *)int v99 = *v62;
        i8 = v63 + 16;
      }
      int v99 = i8;
      __p = 0;
      uint64_t v96 = 0;
      uint64_t v97 = 0;
      uint64_t v94 = 0;
      sub_100328FE0(v61, (uint64_t)v98, (unint64_t)(i8 - (unsigned char *)v98) >> 4, (char **)&__p, v91, a9, 16, (int *)&v94);
      sub_100329344((uint64_t)v61, (uint64_t)&__p, v91);
      if (__p)
      {
        uint64_t v96 = __p;
        operator delete(__p);
      }
    }
    else
    {
      sub_1003278E4((uint64_t)v61, v98, (unint64_t)(v99 - (unsigned char *)v98) >> 4, v91, a9, 16);
    }
  }
  else
  {
    sub_100327738(v61);
  }
  if (v98)
  {
    int v99 = (char *)v98;
    operator delete(v98);
  }
  if (v103)
  {
    uint64_t v104 = v103;
    operator delete(v103);
  }
}

void sub_1003285CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = a18;
    if (!a18)
    {
LABEL_3:
      uint64_t v22 = *(void **)(v19 - 112);
      if (!v22) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = a18;
    if (!a18) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  uint64_t v22 = *(void **)(v19 - 112);
  if (!v22) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v19 - 104) = v22;
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void *sub_100328648(void *result, _DWORD *a2, int a3, unsigned __int8 *a4, int a5)
{
  int v5 = a3;
  uint64_t v6 = (unsigned int *)result[8];
  int v85 = v6[1];
  int v7 = *((_DWORD *)result + 1);
  BOOL v8 = __OFSUB__(v7, 1);
  int v9 = v7 - 1;
  if (v9 < 0 != v8) {
    LODWORD(v93) = 0;
  }
  else {
    uint64_t v93 = *(void *)(result[9] + 8 * v9);
  }
  unsigned int v84 = *v6;
  BOOL v10 = *a2 >= a3 && *a2 < v85 - a3;
  if (v10 && (int v11 = a2[1], v11 >= a3))
  {
    BOOL v92 = v11 < (int)(v84 - a3);
    if (a3 < 0) {
      return result;
    }
  }
  else
  {
    BOOL v92 = 0;
    if (a3 < 0) {
      return result;
    }
  }
  int v12 = 0;
  int v13 = 0;
  int v14 = 2 * a3 - 1;
  uint64_t v89 = result[2];
  uint64_t v90 = result[10];
  int v83 = v85 - 1;
  int v15 = 1;
  int v91 = a2;
  do
  {
    int v23 = a2[1];
    signed int v24 = v23 - v12;
    signed int v25 = v23 + v12;
    int v26 = *a2 - v5;
    int v27 = *a2 + v5;
    int v103 = v15;
    int v104 = v14;
    if (v92)
    {
      int v96 = v23 + v5;
      int v98 = *a2 + v12;
      uint64_t v28 = v89 + v90 * v24;
      uint64_t v29 = v89 + v90 * v25;
      uint64_t v30 = v26 * (uint64_t)(int)v93;
      uint64_t v31 = (char *)(v28 + v30);
      int v100 = *a2 - v12;
      int v94 = v23 - v5;
      if (a5)
      {
        uint64_t v32 = (int)v93 + (int)v93 * (uint64_t)v27;
        unint64_t v33 = v28 + v32;
        if (v93 == 1)
        {
          memset((void *)(v28 + v30), *a4, v33 - (void)v31);
          __n128 result = memset((void *)(v29 + v30), *a4, v32 - v30);
        }
        else
        {
          unint64_t v38 = (char *)(v28 + v30);
          if ((int)v30 < (int)v32)
          {
            __n128 result = memcpy(v31, a4, (int)v93);
            unint64_t v38 = &v31[(int)v93];
          }
          if ((unint64_t)v38 < v33)
          {
            size_t v39 = (int)v93;
            do
            {
              __n128 result = memcpy(v38, v31, v39);
              v38 += v39;
              if (v33 - (unint64_t)v38 >= 2 * v39) {
                v39 *= 2;
              }
              else {
                size_t v39 = v33 - (void)v38;
              }
            }
            while (v33 > (unint64_t)v38);
          }
          int v40 = (char *)(v29 + v30);
          unint64_t v41 = (char *)(v29 + v30);
          if ((int)v30 < (int)v32)
          {
            __n128 result = memcpy((void *)(v29 + v30), a4, (int)v93);
            unint64_t v41 = &v40[(int)v93];
          }
          unint64_t v42 = v29 + v32;
          if ((unint64_t)v41 < v29 + v32)
          {
            size_t v43 = (int)v93;
            do
            {
              __n128 result = memcpy(v41, v40, v43);
              v41 += v43;
              if (v42 - (unint64_t)v41 >= 2 * v43) {
                v43 *= 2;
              }
              else {
                size_t v43 = v42 - (void)v41;
              }
            }
            while (v42 > (unint64_t)v41);
          }
        }
        uint64_t v44 = v89 + v90 * v94;
        uint64_t v45 = v89 + v90 * v96;
        uint64_t v46 = (int)v93 * (uint64_t)v100;
        uint64_t v47 = (char *)(v44 + v46);
        uint64_t v48 = (int)v93 + (int)v93 * (uint64_t)v98;
        unint64_t v49 = v44 + v48;
        if (v93 == 1)
        {
          memset(v47, *a4, v49 - (void)v47);
          __n128 result = memset((void *)(v45 + v46), *a4, v48 - v46);
        }
        else
        {
          uint64_t v50 = (char *)(v44 + v46);
          if ((int)v46 < (int)v48)
          {
            __n128 result = memcpy(v47, a4, (int)v93);
            uint64_t v50 = &v47[(int)v93];
          }
          if ((unint64_t)v50 < v49)
          {
            size_t v51 = (int)v93;
            do
            {
              __n128 result = memcpy(v50, v47, v51);
              v50 += v51;
              if (v49 - (unint64_t)v50 >= 2 * v51) {
                v51 *= 2;
              }
              else {
                size_t v51 = v49 - (void)v50;
              }
            }
            while (v49 > (unint64_t)v50);
          }
          BOOL v52 = (char *)(v45 + v46);
          BOOL v53 = (char *)(v45 + v46);
          if ((int)v46 < (int)v48)
          {
            __n128 result = memcpy((void *)(v45 + v46), a4, (int)v93);
            BOOL v53 = &v52[(int)v93];
          }
          unint64_t v54 = v45 + v48;
          if ((unint64_t)v53 < v54)
          {
            size_t v55 = (int)v93;
            do
            {
              __n128 result = memcpy(v53, v52, v55);
              v53 += v55;
              if (v54 - (unint64_t)v53 >= 2 * v55) {
                v55 *= 2;
              }
              else {
                size_t v55 = v54 - (void)v53;
              }
            }
            while (v54 > (unint64_t)v53);
          }
        }
      }
      else
      {
        int v16 = *a2 + v5;
        memcpy((void *)(v28 + v30), a4, (int)v93);
        memcpy((void *)(v29 + v30), a4, (int)v93);
        memcpy((void *)(v28 + (int)v93 * (uint64_t)v16), a4, (int)v93);
        memcpy((void *)(v29 + (int)v93 * (uint64_t)v16), a4, (int)v93);
        uint64_t v17 = v89 + v90 * v94;
        uint64_t v18 = v89 + v90 * v96;
        memcpy((void *)(v17 + (int)v93 * (uint64_t)v100), a4, (int)v93);
        memcpy((void *)(v18 + (int)v93 * (uint64_t)v100), a4, (int)v93);
        memcpy((void *)(v17 + (int)v93 * (uint64_t)v98), a4, (int)v93);
        __n128 result = memcpy((void *)(v18 + (int)v93 * (uint64_t)v98), a4, (int)v93);
      }
    }
    else if (v26 < v85 && (v27 & 0x80000000) == 0 && v23 - v5 < (int)v84 && ((v23 + v5) & 0x80000000) == 0)
    {
      int v99 = *a2 + v12;
      int v101 = *a2 - v12;
      unsigned int v95 = v23 - v5;
      uint64_t v97 = (v23 + v5);
      if (a5)
      {
        v26 &= ~(v26 >> 31);
        if (v27 >= v83) {
          int v27 = v85 - 1;
        }
        int v87 = v27;
        if (v24 < v84)
        {
          uint64_t v34 = v89 + v90 * v24;
          uint64_t v35 = (char *)(v34 + v26 * (uint64_t)(int)v93);
          uint64_t v36 = (int)v93 + (int)v93 * (uint64_t)v27;
          unint64_t v37 = v34 + v36;
          if (v93 == 1)
          {
            __n128 result = memset(v35, *a4, v37 - (void)v35);
          }
          else
          {
            uint64_t v57 = (char *)(v34 + v26 * (uint64_t)(int)v93);
            if (v26 * (int)v93 < (int)v36)
            {
              __n128 result = memcpy(v35, a4, (int)v93);
              uint64_t v57 = &v35[(int)v93];
            }
            if ((unint64_t)v57 < v37)
            {
              size_t v58 = (int)v93;
              do
              {
                __n128 result = memcpy(v57, v35, v58);
                v57 += v58;
                if (v37 - (unint64_t)v57 >= 2 * v58) {
                  v58 *= 2;
                }
                else {
                  size_t v58 = v37 - (void)v57;
                }
              }
              while (v37 > (unint64_t)v57);
            }
          }
        }
      }
      else
      {
        int v87 = *a2 + v5;
        if (v24 < v84)
        {
          uint64_t v56 = v89 + v90 * v24;
          if ((v26 & 0x80000000) == 0)
          {
            __n128 result = memcpy((void *)(v56 + v26 * (uint64_t)(int)v93), a4, (int)v93);
            int v27 = v87;
          }
          if (v27 < v85) {
            __n128 result = memcpy((void *)(v56 + v27 * (uint64_t)(int)v93), a4, (int)v93);
          }
        }
      }
      if (v25 < v84)
      {
        uint64_t v59 = v89 + v90 * v25;
        if (a5)
        {
          int v60 = (char *)(v59 + v26 * (uint64_t)(int)v93);
          uint64_t v61 = (int)v93 + (int)v93 * (uint64_t)v87;
          unint64_t v62 = v59 + v61;
          if (v93 == 1)
          {
            __n128 result = memset(v60, *a4, v62 - (void)v60);
          }
          else
          {
            uint64_t v63 = v60;
            if (v26 * (int)v93 < (int)v61)
            {
              __n128 result = memcpy(v60, a4, (int)v93);
              uint64_t v63 = &v60[(int)v93];
            }
            if ((unint64_t)v63 < v62)
            {
              size_t v64 = (int)v93;
              do
              {
                __n128 result = memcpy(v63, v60, v64);
                v63 += v64;
                if (v62 - (unint64_t)v63 >= 2 * v64) {
                  v64 *= 2;
                }
                else {
                  size_t v64 = v62 - (void)v63;
                }
              }
              while (v62 > (unint64_t)v63);
            }
          }
        }
        else
        {
          if ((v26 & 0x80000000) == 0) {
            __n128 result = memcpy((void *)(v59 + v26 * (uint64_t)(int)v93), a4, (int)v93);
          }
          if (v87 < v85) {
            __n128 result = memcpy((void *)(v59 + v87 * (uint64_t)(int)v93), a4, (int)v93);
          }
        }
      }
      int v66 = v99;
      int v65 = v101;
      if (v101 < v85 && (v99 & 0x80000000) == 0)
      {
        if (a5)
        {
          int v65 = v101 & ~(v101 >> 31);
          if (v99 >= v83) {
            int v66 = v85 - 1;
          }
          else {
            int v66 = v99;
          }
          if (v95 < v84)
          {
            uint64_t v67 = v89 + v90 * (int)v95;
            unint64_t v68 = (char *)(v67 + v65 * (uint64_t)(int)v93);
            uint64_t v69 = (int)v93 + (int)v93 * (uint64_t)v66;
            unint64_t v70 = v67 + v69;
            if (v93 == 1)
            {
              __n128 result = memset(v68, *a4, v70 - (void)v68);
              int v65 = v101 & ~(v101 >> 31);
            }
            else
            {
              int v74 = (char *)(v67 + v65 * (uint64_t)(int)v93);
              if (v65 * (int)v93 < (int)v69)
              {
                __n128 result = memcpy(v68, a4, (int)v93);
                int v65 = v101 & ~(v101 >> 31);
                int v74 = &v68[(int)v93];
              }
              if ((unint64_t)v74 < v70)
              {
                int v102 = v65;
                int v75 = v66;
                size_t v76 = (int)v93;
                do
                {
                  __n128 result = memcpy(v74, v68, v76);
                  v74 += v76;
                  if (v70 - (unint64_t)v74 >= 2 * v76) {
                    v76 *= 2;
                  }
                  else {
                    size_t v76 = v70 - (void)v74;
                  }
                }
                while (v70 > (unint64_t)v74);
                int v66 = v75;
                int v65 = v102;
              }
            }
          }
        }
        else if (v95 < v84)
        {
          uint64_t v71 = v89 + v90 * (int)v95;
          if ((v101 & 0x80000000) == 0)
          {
            __n128 result = memcpy((void *)(v71 + v101 * (uint64_t)(int)v93), a4, (int)v93);
            int v65 = v101;
          }
          if (v99 < v85)
          {
            int32x2_t v72 = (void *)(v71 + v99 * (uint64_t)(int)v93);
            int v73 = v65;
            __n128 result = memcpy(v72, a4, (int)v93);
            int v65 = v73;
          }
        }
        if (v97 < v84)
        {
          uint64_t v77 = v89 + v90 * v97;
          if (a5)
          {
            BOOL v78 = (char *)(v77 + v65 * (uint64_t)(int)v93);
            uint64_t v79 = (int)v93 + (int)v93 * (uint64_t)v66;
            unint64_t v80 = v77 + v79;
            if (v93 == 1)
            {
              __n128 result = memset(v78, *a4, v80 - (void)v78);
            }
            else
            {
              uint64_t v81 = v78;
              if (v65 * (int)v93 < (int)v79)
              {
                __n128 result = memcpy(v78, a4, (int)v93);
                uint64_t v81 = &v78[(int)v93];
              }
              if ((unint64_t)v81 < v80)
              {
                size_t v82 = (int)v93;
                do
                {
                  __n128 result = memcpy(v81, v78, v82);
                  v81 += v82;
                  if (v80 - (unint64_t)v81 >= 2 * v82) {
                    v82 *= 2;
                  }
                  else {
                    size_t v82 = v80 - (void)v81;
                  }
                }
                while (v80 > (unint64_t)v81);
              }
            }
          }
          else
          {
            if ((v65 & 0x80000000) == 0) {
              __n128 result = memcpy((void *)(v77 + v65 * (uint64_t)(int)v93), a4, (int)v93);
            }
            if (v66 < v85) {
              __n128 result = memcpy((void *)(v77 + v66 * (uint64_t)(int)v93), a4, (int)v93);
            }
          }
        }
      }
    }
    int v15 = v103 + 2;
    if ((v103 + v13 < 0) ^ __OFADD__(v103, v13) | (v103 + v13 == 0)) {
      int v19 = 0;
    }
    else {
      int v19 = 1;
    }
    if ((v103 + v13 < 0) ^ __OFADD__(v103, v13) | (v103 + v13 == 0)) {
      int v20 = 0;
    }
    else {
      int v20 = -1;
    }
    int v21 = v104 & v20;
    if ((v103 + v13 < 0) ^ __OFADD__(v103, v13) | (v103 + v13 == 0)) {
      int v22 = 0;
    }
    else {
      int v22 = -2;
    }
    int v13 = v103 + v13 - v21;
    v5 -= v19;
    int v14 = v22 + v104;
    BOOL v10 = v5 <= v12++;
    a2 = v91;
  }
  while (!v10);
  return result;
}

void sub_100328FE0(unsigned int *a1, uint64_t a2, int a3, char **a4, unsigned char *a5, int a6, char a7, int *a8)
{
  uint64_t v10 = a2 + 16 * a3;
  uint64_t v12 = *(void *)(v10 - 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = *a8;
  uint64_t v14 = a8[1];
  int v16 = *a4;
  int v15 = a4[1];
  uint64_t v17 = (v15 - *a4) >> 5;
  unint64_t v18 = v17 + a3;
  if (v18 > (a4[2] - *a4) >> 5)
  {
    if (v18 >> 59) {
LABEL_67:
    }
      sub_10000B98C();
    uint64_t v19 = 32 * v18;
    int v20 = (char *)operator new(32 * v18);
    int v21 = &v20[32 * v17];
    if (v15 != v16)
    {
      int v22 = &v20[32 * v17];
      do
      {
        long long v23 = *((_OWORD *)v15 - 1);
        int v21 = v22 - 32;
        *((_OWORD *)v22 - 2) = *((_OWORD *)v15 - 2);
        *((_OWORD *)v22 - 1) = v23;
        v15 -= 32;
        v22 -= 32;
      }
      while (v15 != v16);
    }
    *a4 = v21;
    a4[1] = &v20[32 * v17];
    a4[2] = &v20[v19];
    if (v16) {
      operator delete(v16);
    }
  }
  int v24 = a6;
  if (a3 >= 1)
  {
    uint64_t v25 = 0;
    char v26 = a7;
    uint64_t v27 = v14 + (1 << a7 >> 1);
    uint64_t v28 = v12 + v13;
    char v29 = 16 - a7;
    uint64_t v30 = v28 << (16 - a7);
    uint64_t v66 = a3;
    uint64_t v31 = (v11 + v27) >> a7;
    uint64_t v62 = v27;
    char v63 = a7;
    char v61 = 16 - a7;
    do
    {
      unint64_t v33 = (void *)(a2 + 16 * v25);
      uint64_t v34 = (*v33 + *a8) << v29;
      uint64_t v35 = (v33[1] + v27) >> v26;
      if (v24 > 15)
      {
        v72[0] = v30;
        v72[1] = v31 << 16;
        v71[0] = v34;
        v71[1] = v35 << 16;
        sub_10032ADC4(a1, v72, v71, a5);
        if (v35 == v31) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v36 = (v30 + 0x8000) >> 16;
        if (v36 <= (uint64_t)0xFFFFFFFF80000000) {
          uint64_t v36 = 0xFFFFFFFF80000000;
        }
        if (v36 >= 0x7FFFFFFF) {
          int v37 = 0x7FFFFFFF;
        }
        else {
          int v37 = v36;
        }
        if (v31 <= (uint64_t)0xFFFFFFFF80000000) {
          uint64_t v38 = 0xFFFFFFFF80000000;
        }
        else {
          uint64_t v38 = v31;
        }
        if (v38 >= 0x7FFFFFFF) {
          int v39 = 0x7FFFFFFF;
        }
        else {
          int v39 = v38;
        }
        if ((v34 + 0x8000) >> 16 <= (uint64_t)0xFFFFFFFF80000000) {
          uint64_t v40 = 0xFFFFFFFF80000000;
        }
        else {
          uint64_t v40 = (v34 + 0x8000) >> 16;
        }
        if (v40 >= 0x7FFFFFFF) {
          unsigned int v41 = 0x7FFFFFFF;
        }
        else {
          unsigned int v41 = v40;
        }
        if (v35 <= (uint64_t)0xFFFFFFFF80000000) {
          uint64_t v42 = 0xFFFFFFFF80000000;
        }
        else {
          uint64_t v42 = v35;
        }
        if (v42 >= 0x7FFFFFFF) {
          unsigned int v43 = 0x7FFFFFFF;
        }
        else {
          unsigned int v43 = v42;
        }
        sub_10032A3EC((uint64_t)a1, v37, v39, v41, v43, a5, v24);
        if (v35 == v31) {
          goto LABEL_12;
        }
      }
      if (v31 >= v35) {
        int v44 = v35;
      }
      else {
        int v44 = v31;
      }
      if (v31 <= v35) {
        int v45 = v35;
      }
      else {
        int v45 = v31;
      }
      uint64_t v46 = v35 - v31;
      if (v35 <= v31) {
        uint64_t v47 = v34;
      }
      else {
        uint64_t v47 = v30;
      }
      uint64_t v48 = a4;
      uint64_t v50 = a4[1];
      unint64_t v49 = (unint64_t)a4[2];
      uint64_t v51 = (v34 - v30) / v46;
      if ((unint64_t)v50 < v49)
      {
        *(_DWORD *)uint64_t v50 = v44;
        *((_DWORD *)v50 + 1) = v45;
        *((void *)v50 + 1) = v47;
        *((void *)v50 + 2) = v51;
        uint64_t v32 = v50 + 32;
        *((void *)v50 + 3) = 0;
        int v24 = a6;
        char v29 = v61;
      }
      else
      {
        BOOL v52 = *a4;
        uint64_t v53 = (v50 - *a4) >> 5;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 59) {
          goto LABEL_67;
        }
        uint64_t v55 = v49 - (void)v52;
        if (v55 >> 4 > v54) {
          unint64_t v54 = v55 >> 4;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v54 = 0x7FFFFFFFFFFFFFFLL;
        }
        unint64_t v60 = v54;
        if (v54)
        {
          if (v54 >> 59) {
            sub_10000BA6C();
          }
          uint64_t v56 = (char *)operator new(32 * v54);
        }
        else
        {
          uint64_t v56 = 0;
        }
        uint64_t v57 = &v56[32 * v53];
        *(_DWORD *)uint64_t v57 = v44;
        *((_DWORD *)v57 + 1) = v45;
        *((void *)v57 + 1) = v47;
        *((void *)v57 + 2) = v51;
        *((void *)v57 + 3) = 0;
        size_t v58 = v57;
        if (v50 != v52)
        {
          int v24 = a6;
          char v29 = v61;
          do
          {
            long long v59 = *((_OWORD *)v50 - 1);
            *((_OWORD *)v58 - 2) = *((_OWORD *)v50 - 2);
            *((_OWORD *)v58 - 1) = v59;
            v58 -= 32;
            v50 -= 32;
          }
          while (v50 != v52);
          uint64_t v48 = a4;
          uint64_t v50 = *a4;
          uint64_t v32 = v57 + 32;
          *a4 = v58;
          a4[1] = v57 + 32;
          a4[2] = &v56[32 * v60];
          if (!v50) {
            goto LABEL_11;
          }
LABEL_65:
          operator delete(v50);
          goto LABEL_11;
        }
        uint64_t v48 = a4;
        int v24 = a6;
        char v29 = v61;
        uint64_t v32 = v57 + 32;
        *a4 = v57;
        a4[1] = v57 + 32;
        a4[2] = &v56[32 * v60];
        if (v50) {
          goto LABEL_65;
        }
      }
LABEL_11:
      v48[1] = v32;
      uint64_t v27 = v62;
      char v26 = v63;
LABEL_12:
      ++v25;
      uint64_t v31 = v35;
      uint64_t v30 = v34;
    }
    while (v25 != v66);
  }
}

void sub_100329344(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = (uint64_t *)a2;
  long long v119 = 0u;
  long long v120 = 0u;
  unint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *v3;
  uint64_t v7 = v5 - *v3;
  unint64_t v117 = v7 >> 5;
  int v8 = *(_DWORD *)(a1 + 4);
  BOOL v9 = __OFSUB__(v8, 1);
  int v10 = v8 - 1;
  uint64_t v114 = a1;
  if (v10 < 0 != v9)
  {
    LODWORD(v113) = 0;
    if ((int)v117 <= 1) {
      return;
    }
  }
  else
  {
    uint64_t v113 = *(void *)(*(void *)(a1 + 72) + 8 * v10);
    if ((int)v117 <= 1) {
      return;
    }
  }
  uint64_t v11 = *(signed __int32 **)(a1 + 64);
  uint64_t v115 = v11[1];
  unint64_t v12 = ((unint64_t)v7 >> 5);
  int8x8_t v13 = (int8x8_t)0x7FFFFFFFFFFFFFFFLL;
  if (v12 >= 5)
  {
    uint64_t v18 = ((unint64_t)v7 >> 5) & 3;
    int64x2_t v19 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    if (!v18) {
      uint64_t v18 = 4;
    }
    unint64_t v14 = v12 - v18;
    int v20 = (__int32 *)(v6 + 64);
    int32x2_t v21 = (int32x2_t)0x8000000080000000;
    v22.i64[0] = -1;
    v22.i64[1] = -1;
    int32x2_t v23 = (int32x2_t)0x8000000080000000;
    unint64_t v24 = v14;
    int32x2_t v25 = (int32x2_t)0x8000000080000000;
    int64x2_t v26 = v19;
    v27.i64[0] = -1;
    v27.i64[1] = -1;
    int32x2_t v28 = (int32x2_t)0x8000000080000000;
    do
    {
      char v29 = v20 - 8;
      uint64_t v30 = v20 + 8;
      uint64_t v31 = (const double *)(v20 - 14);
      uint64_t v32 = (const double *)(v20 + 2);
      float64x2x4_t v122 = vld4q_f64(v31);
      float64x2x4_t v123 = vld4q_f64(v32);
      __int32 v33 = *(v20 - 16);
      v34.i32[0] = *(v20 - 15);
      v34.i32[1] = *(v20 - 7);
      uint64_t v35 = v20 + 9;
      v37.i32[0] = *v20;
      v36.i32[0] = v20[1];
      v20 += 32;
      v36.i32[1] = *v35;
      v38.i32[0] = v33;
      v38.i32[1] = *v29;
      v37.i32[1] = *v30;
      int32x2_t v39 = vsub_s32(v36, v37);
      int32x2_t v40 = vsub_s32(v34, v38);
      uint64_t v41 = *(void *)&v122.val[1].f64[1] * v40.i32[1];
      uint64_t v42 = *(void *)&v123.val[1].f64[1] * v39.i32[1];
      uint64_t v43 = v39.i32[0];
      v44.i64[0] = *(void *)&v122.val[1].f64[0] * v40.i32[0];
      v45.i64[0] = *(void *)&v123.val[1].f64[0] * v43;
      v45.i64[1] = v42;
      v44.i64[1] = v41;
      int32x2_t v21 = vmin_s32(v38, v21);
      int32x2_t v28 = vmin_s32(v37, v28);
      int32x2_t v23 = vmax_s32(v23, v34);
      int32x2_t v25 = vmax_s32(v25, v36);
      int64x2_t v46 = vaddq_s64(v45, (int64x2_t)v123.val[0]);
      int64x2_t v47 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, (int64x2_t)v122.val[0]), (int8x16_t)v122.val[0], (int8x16_t)v19);
      int64x2_t v48 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v26, (int64x2_t)v123.val[0]), (int8x16_t)v123.val[0], (int8x16_t)v26);
      int64x2_t v49 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, (int64x2_t)v122.val[0]), (int8x16_t)v22, (int8x16_t)v122.val[0]);
      v122.val[0] = (float64x2_t)vaddq_s64(v44, (int64x2_t)v122.val[0]);
      int64x2_t v50 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v27, (int64x2_t)v123.val[0]), (int8x16_t)v27, (int8x16_t)v123.val[0]);
      int64x2_t v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v48, v46), (int8x16_t)v46, (int8x16_t)v48);
      int64x2_t v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v47, (int64x2_t)v122.val[0]), (int8x16_t)v122.val[0], (int8x16_t)v47);
      int64x2_t v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v49, (int64x2_t)v122.val[0]), (int8x16_t)v49, (int8x16_t)v122.val[0]);
      int64x2_t v27 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v50, v46), (int8x16_t)v50, (int8x16_t)v46);
      v24 -= 4;
    }
    while (v24);
    int32x2_t v51 = vmin_s32(v21, v28);
    signed __int32 v15 = vpmin_s32(v51, v51).u32[0];
    int8x16_t v52 = vbslq_s8((int8x16_t)vcgtq_s64(v22, v27), (int8x16_t)v22, (int8x16_t)v27);
    uint64_t v53 = vextq_s8(v52, v52, 8uLL).u64[0];
    int8x8_t v16 = vbsl_s8((int8x8_t)vcgtd_s64(v52.i64[0], v53), *(int8x8_t *)v52.i8, (int8x8_t)v53);
    int8x16_t v54 = vbslq_s8((int8x16_t)vcgtq_s64(v26, v19), (int8x16_t)v19, (int8x16_t)v26);
    v52.i64[0] = vextq_s8(v54, v54, 8uLL).u64[0];
    int8x8_t v13 = vbsl_s8((int8x8_t)vcgtd_s64(v52.i64[0], v54.i64[0]), *(int8x8_t *)v54.i8, *(int8x8_t *)v52.i8);
    int32x2_t v55 = vmax_s32(v23, v25);
    signed __int32 v17 = vpmax_s32(v55, v55).u32[0];
  }
  else
  {
    unint64_t v14 = 0;
    signed __int32 v15 = 0x7FFFFFFF;
    int8x8_t v16 = (int8x8_t)-1;
    signed __int32 v17 = 0x80000000;
  }
  signed __int32 v56 = *v11;
  uint64_t v57 = (int8x8_t *)(v6 + 32 * v14 + 8);
  unint64_t v58 = v12 - v14;
  do
  {
    signed __int32 v60 = v57[-1].i32[0];
    signed __int32 v59 = v57[-1].i32[1];
    int8x8_t v61 = *v57;
    int8x8_t v62 = v57[1];
    v57 += 4;
    int8x8_t v63 = (int8x8_t)(*(void *)&v61 + *(void *)&v62 * (v59 - v60));
    if (v60 < v15) {
      signed __int32 v15 = v60;
    }
    if (v17 <= v59) {
      signed __int32 v17 = v59;
    }
    if (*(void *)&v61 >= *(void *)&v13) {
      int8x8_t v64 = v13;
    }
    else {
      int8x8_t v64 = v61;
    }
    if (*(void *)&v16 <= *(void *)&v61) {
      int8x8_t v16 = v61;
    }
    if (*(void *)&v63 >= *(void *)&v64) {
      int8x8_t v13 = v64;
    }
    else {
      int8x8_t v13 = v63;
    }
    if (*(void *)&v16 <= *(void *)&v63) {
      int8x8_t v16 = v63;
    }
    --v58;
  }
  while (v58);
  if ((v17 & 0x80000000) == 0
    && v15 < v56
    && (*(void *)&v16 & 0x8000000000000000) == 0
    && *(void *)&v13 < v115 << 16)
  {
    unint64_t v65 = 126 - 2 * __clz(v117);
    uint64_t v66 = v5 == v6 ? 0 : v65;
    sub_10032C1DC(v6, v5, (uint64_t)&v121, v66, 1);
    LODWORD(v119) = 0x7FFFFFFF;
    unint64_t v68 = (_OWORD *)v3[1];
    unint64_t v67 = v3[2];
    if ((unint64_t)v68 >= v67)
    {
      uint64_t v71 = (_OWORD *)*v3;
      uint64_t v72 = ((uint64_t)v68 - *v3) >> 5;
      unint64_t v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 59) {
        sub_10000B98C();
      }
      uint64_t v74 = v67 - (void)v71;
      if (v74 >> 4 > v73) {
        unint64_t v73 = v74 >> 4;
      }
      unint64_t v75 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v73;
      if (v75)
      {
        if (v75 >> 59) {
          sub_10000BA6C();
        }
        size_t v76 = (char *)operator new(32 * v75);
      }
      else
      {
        size_t v76 = 0;
      }
      uint64_t v77 = &v76[32 * v72];
      long long v78 = v120;
      *(_OWORD *)uint64_t v77 = v119;
      *((_OWORD *)v77 + 1) = v78;
      unint64_t v70 = v77 + 32;
      if (v68 != v71)
      {
        do
        {
          long long v79 = *(v68 - 1);
          *((_OWORD *)v77 - 2) = *(v68 - 2);
          *((_OWORD *)v77 - 1) = v79;
          v77 -= 32;
          v68 -= 2;
        }
        while (v68 != v71);
        unint64_t v68 = (_OWORD *)*v3;
      }
      *uint64_t v3 = (uint64_t)v77;
      v3[1] = (uint64_t)v70;
      v3[2] = (uint64_t)&v76[32 * v75];
      if (v68) {
        operator delete(v68);
      }
    }
    else
    {
      long long v69 = v120;
      *unint64_t v68 = v119;
      v68[1] = v69;
      unint64_t v70 = v68 + 2;
    }
    v3[1] = (uint64_t)v70;
    *((void *)&v120 + 1) = 0;
    uint64_t v80 = *v3;
    signed __int32 v81 = v17 >= v56 ? v56 : v17;
    unsigned int v82 = *(_DWORD *)v80;
    signed __int32 v111 = v81;
    if (*(_DWORD *)v80 < v81)
    {
      uint64_t v83 = 0;
      uint64_t v116 = v3;
LABEL_58:
      int v84 = 0;
      uint64_t v85 = *((void *)&v120 + 1);
      uint64_t v86 = v82;
      for (uint64_t i = &v119; ; uint64_t i = (long long *)v88)
      {
        uint64_t v88 = v85;
        if (!v85) {
          break;
        }
        while (*(_DWORD *)(v88 + 4) == v86)
        {
          *((void *)i + 3) = *(void *)(v88 + 24);
          uint64_t v88 = *(void *)(v88 + 24);
          if (!v88) {
            goto LABEL_65;
          }
        }
        if (*(_DWORD *)v80 <= (int)v86 && *(void *)(v88 + 8) >= *(void *)(v80 + 8))
        {
          if ((int)v83 >= (int)v117) {
            goto LABEL_94;
          }
LABEL_71:
          *((void *)i + 3) = v80;
          *(void *)(v80 + 24) = v88;
          uint64_t v83 = (v83 + 1);
          uint64_t v90 = *v3 + 32 * (int)v83;
          uint64_t v85 = v88;
          uint64_t v88 = v80;
          if (!v84) {
            goto LABEL_61;
          }
          goto LABEL_76;
        }
        uint64_t v85 = *(void *)(v88 + 24);
        uint64_t v90 = v80;
        if (!v84) {
          goto LABEL_61;
        }
LABEL_76:
        uint64_t v118 = v83;
        if ((v86 & 0x80000000) == 0)
        {
          uint64_t v91 = *((void *)i + 1);
          uint64_t v92 = *(void *)(v88 + 8);
          BOOL v89 = v91 <= v92;
          unint64_t v93 = (unint64_t)(v91 + 0xFFFF) >> 16;
          unint64_t v94 = (unint64_t)v92 >> 16;
          uint64_t v95 = (v92 + 0xFFFF) >> 16;
          uint64_t v96 = v91 >> 16;
          if (v89)
          {
            LODWORD(v95) = v93;
            LODWORD(v96) = v94;
          }
          if ((int)v115 > (int)v95 && (v96 & 0x80000000) == 0)
          {
            uint64_t v97 = *(void *)(v114 + 16) + **(void **)(v114 + 72) * v86;
            uint64_t v98 = v95 & ~((int)v95 >> 31);
            int v99 = v115 - 1;
            if ((int)v115 > (int)v96) {
              int v99 = v96;
            }
            int v100 = v98 * v113;
            int v101 = (char *)(v97 + v98 * (int)v113);
            uint64_t v102 = (int)v113 + (int)v113 * (uint64_t)v99;
            unint64_t v103 = v97 + v102;
            if (v113 == 1)
            {
              memset(v101, *a3, v103 - (void)v101);
            }
            else
            {
              int v104 = v101;
              if (v100 < (int)v102)
              {
                memcpy(v101, a3, (int)v113);
                int v104 = &v101[(int)v113];
              }
              if ((unint64_t)v104 < v103)
              {
                size_t v105 = (int)v113;
                do
                {
                  memcpy(v104, v101, v105);
                  v104 += v105;
                  if (v103 - (unint64_t)v104 >= 2 * v105) {
                    v105 *= 2;
                  }
                  else {
                    size_t v105 = v103 - (void)v104;
                  }
                }
                while (v103 > (unint64_t)v104);
              }
            }
          }
        }
        *((void *)i + 1) += *((void *)i + 2);
        *(void *)(v88 + 8) += *(void *)(v88 + 16);
        uint64_t v3 = v116;
        uint64_t v83 = v118;
LABEL_61:
        v84 ^= 1u;
        uint64_t v80 = v90;
      }
LABEL_65:
      BOOL v89 = *(_DWORD *)v80 == v86 && (int)v83 < (int)v117;
      if (v89)
      {
        uint64_t v88 = 0;
        goto LABEL_71;
      }
LABEL_94:
      float64x2x2_t v106 = 0;
      int v107 = 0;
      uint64_t v108 = *((void *)&v120 + 1);
      while (1)
      {
        if ((long long *)v108 == v106)
        {
          uint64_t v110 = &v119;
LABEL_103:
          if (!v107)
          {
LABEL_57:
            unsigned int v82 = v86 + 1;
            if (v86 + 1 == v111) {
              return;
            }
            goto LABEL_58;
          }
        }
        else
        {
          float64x2x2_t v109 = &v119;
          while (1)
          {
            uint64_t v110 = *(long long **)(v108 + 24);
            if (!v110) {
              break;
            }
            if (*(void *)(v108 + 8) > *((void *)v110 + 1))
            {
              *((void *)v109 + 3) = v110;
              *(void *)(v108 + 24) = *((void *)v110 + 3);
              *((void *)v110 + 3) = v108;
              int v107 = 1;
              float64x2x2_t v109 = v110;
              if ((long long *)v108 == v106) {
                goto LABEL_103;
              }
            }
            else
            {
              uint64_t v110 = (long long *)v108;
              uint64_t v108 = *(void *)(v108 + 24);
              float64x2x2_t v109 = v110;
              if ((long long *)v108 == v106) {
                goto LABEL_103;
              }
            }
          }
          uint64_t v110 = v109;
          if (!v107) {
            goto LABEL_57;
          }
        }
        if (v110 != &v119)
        {
          uint64_t v108 = *((void *)&v120 + 1);
          int v107 = 1;
          float64x2x2_t v106 = v110;
          if (v110 != *((long long **)&v120 + 1)) {
            continue;
          }
        }
        goto LABEL_57;
      }
    }
  }
}

void sub_1003299E4(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, int a5, double *a6, int a7, int a8, unsigned int a9)
{
  sub_1002D6AE8(v36, &off_100499A58);
  if ((*a1 & 7) != 0) {
    int v14 = 8;
  }
  else {
    int v14 = 16;
  }
  if (a8 == 16) {
    a8 = v14;
  }
  if (a9 > 0x10 || a7 >= 0x8000 || !a2 || !a3 || (a7 | a4) < 0)
  {
    v38[0] = 0;
    v38[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v38, 112), "pts && npts && ncontours >= 0 && 0 <= thickness && thickness <= MAX_THICKNESS && 0 <= shift && shift <= XY_SHIFT", 112);
    sub_1002D2278(-215, v38, "polylines", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 2041);
  }
  sub_100298DD4(a6, (uint64_t)v38, *a1 & 0xFFF, 0);
  if (a4 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a4;
    do
    {
      signed __int32 v17 = *(const float **)(a2 + 8 * v15);
      uint64_t v18 = *(int *)(a3 + 4 * v15);
      if (v18)
      {
        uint64_t v19 = 8 * v18;
        if ((unint64_t)(8 * v18) >= 0x7FFFFFFFFFFFFFF9) {
          sub_10000B98C();
        }
        int v20 = (char *)operator new(16 * v18);
        int32x2_t v21 = v20;
        if ((unint64_t)(v19 - 8) >= 0x18)
        {
          unint64_t v24 = ((unint64_t)(v19 - 8) >> 3) + 1;
          int64x2_t v22 = &v17[2 * (v24 & 0x3FFFFFFFFFFFFFFCLL)];
          int32x2_t v23 = &v20[16 * (v24 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v25 = v24 & 0x3FFFFFFFFFFFFFFCLL;
          int64x2_t v26 = v17;
          int64x2_t v27 = (double *)v20;
          do
          {
            float32x4x2_t v39 = vld2q_f32(v26);
            v26 += 8;
            *(void *)&v28.f64[0] = v39.val[0].i32[2];
            *(void *)&v28.f64[1] = v39.val[0].i32[3];
            v40.val[0] = v28;
            *(void *)&v28.f64[0] = v39.val[1].i32[2];
            *(void *)&v28.f64[1] = v39.val[1].i32[3];
            v40.val[1] = v28;
            *(void *)&v28.f64[0] = v39.val[0].i32[0];
            *(void *)&v28.f64[1] = v39.val[0].i32[1];
            v41.val[0] = v28;
            *(void *)&v28.f64[0] = v39.val[1].i32[0];
            *(void *)&v28.f64[1] = v39.val[1].i32[1];
            v41.val[1] = v28;
            char v29 = v27 + 8;
            vst2q_f64(v27, v41);
            uint64_t v30 = v27 + 4;
            vst2q_f64(v30, v40);
            int64x2_t v27 = v29;
            v25 -= 4;
          }
          while (v25);
          if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_24;
          }
        }
        else
        {
          int64x2_t v22 = v17;
          int32x2_t v23 = v20;
        }
        do
        {
          uint64_t v31 = *(void *)v22;
          v22 += 2;
          *(void *)&long long v32 = (int)v31;
          *((void *)&v32 + 1) = SHIDWORD(v31);
          *(_OWORD *)int32x2_t v23 = v32;
          v23 += 16;
        }
        while (v22 != &v17[2 * v18]);
      }
      else
      {
        int32x2_t v21 = 0;
      }
LABEL_24:
      sub_100327738(a1, (uint64_t)v21, v18, a5, (unsigned __int8 *)v38, a7, a8, a9);
      if (v21) {
        operator delete(v21);
      }
      ++v15;
    }
    while (v15 != v16);
  }
  if (v37) {
    sub_1002D6888(v36);
  }
}

void sub_100329C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100329CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100329CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10020FA00((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100329D1C(uint64_t a1, uint64_t a2, int a3, double *a4, int a5, int a6, unsigned int a7)
{
  sub_1002D6AE8(v73, &off_100499A78);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    long long v15 = *(_OWORD *)(v14 + 16);
    long long v65 = *(_OWORD *)v14;
    long long v66 = v15;
    long long v67 = *(_OWORD *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 56);
    uint64_t v68 = *(void *)(v14 + 48);
    uint64_t v69 = v16;
    unint64_t v70 = (char *)&v65 + 8;
    uint64_t v71 = v72;
    v72[0] = 0;
    v72[1] = 0;
    if (v16) {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v65) = 0;
      sub_1002931A8((uint64_t)&v65, v14);
    }
    else
    {
      signed __int32 v17 = *(void **)(v14 + 72);
      uint64_t v18 = v71;
      *uint64_t v71 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v65);
  }
  if (sub_10029A230((_DWORD *)a2) == 0x40000 || sub_10029A230((_DWORD *)a2) == 327680)
  {
    uint64_t v19 = sub_10029D0B8(a2, 0xFFFFFFFF);
    if (!v19) {
      goto LABEL_59;
    }
    int v20 = v19;
    uint64_t v21 = (int)v19;
    int8x8_t v62 = v64;
    uint64_t v63 = (int)v19;
    int v48 = a5;
    int v49 = a6;
    int64x2_t v47 = a4;
    unsigned int v45 = a7;
    int v46 = a3;
    if ((unint64_t)(v19 << 32) >= 0x8800000001) {
      operator new[]();
    }
    int v22 = 1;
  }
  else
  {
    unsigned int v45 = a7;
    int v46 = a3;
    int64x2_t v47 = a4;
    int v48 = a5;
    int v49 = a6;
    int v22 = 0;
    uint64_t v21 = 1;
    int8x8_t v62 = v64;
    uint64_t v63 = 1;
    int v20 = 1;
  }
  signed __int32 v59 = v61;
  uint64_t v60 = v21;
  if (v20 >= 1)
  {
    for (uint64_t i = 0; i != v20; ++i)
    {
      if (v22) {
        signed int v24 = i;
      }
      else {
        signed int v24 = -1;
      }
      if (sub_10029A230((_DWORD *)a2) == 0x10000) {
        char v25 = v22;
      }
      else {
        char v25 = 1;
      }
      if (v25)
      {
        sub_100299554(a2, v24, (uint64_t)&v51);
      }
      else
      {
        uint64_t v26 = *(void *)(a2 + 8);
        long long v27 = *(_OWORD *)(v26 + 16);
        long long v51 = *(_OWORD *)v26;
        long long v52 = v27;
        long long v53 = *(_OWORD *)(v26 + 32);
        uint64_t v28 = *(void *)(v26 + 56);
        uint64_t v54 = *(void *)(v26 + 48);
        uint64_t v55 = v28;
        signed __int32 v56 = (char *)&v51 + 8;
        uint64_t v57 = v58;
        v58[0] = 0;
        v58[1] = 0;
        if (v28) {
          atomic_fetch_add((atomic_uint *volatile)(v28 + 20), 1u);
        }
        if (*(int *)(v26 + 4) <= 2)
        {
          char v29 = *(void **)(v26 + 72);
          uint64_t v30 = v57;
          *(void *)uint64_t v57 = *v29;
          v30[1] = v29[1];
          uint64_t v31 = DWORD1(v51);
          if (SDWORD1(v51) < 3) {
            goto LABEL_42;
          }
          goto LABEL_30;
        }
        DWORD1(v51) = 0;
        sub_1002931A8((uint64_t)&v51, v26);
      }
      uint64_t v31 = DWORD1(v51);
      if (SDWORD1(v51) < 3)
      {
LABEL_42:
        if (SHIDWORD(v51) * (uint64_t)SDWORD2(v51)) {
          goto LABEL_36;
        }
        goto LABEL_43;
      }
LABEL_30:
      long long v32 = (int *)(v56 + 4);
      uint64_t v33 = v31 & 0xFFFFFFFE;
      uint64_t v34 = 1;
      uint64_t v35 = 1;
      do
      {
        v34 *= *(v32 - 1);
        v35 *= *v32;
        v32 += 2;
        v33 -= 2;
      }
      while (v33);
      uint64_t v36 = v35 * v34;
      uint64_t v37 = v31 - (v31 & 0xFFFFFFFE);
      if (v37)
      {
        int32x2_t v38 = &v56[(4 * v31) & 0x3FFFFFFF8];
        do
        {
          uint64_t v39 = *(int *)v38;
          v38 += 4;
          v36 *= v39;
          --v37;
        }
        while (v37);
      }
      if (v36)
      {
LABEL_36:
        if ((sub_100298CD4((unsigned int *)&v51, 2, 4, 1) & 0x80000000) != 0)
        {
          v50[0] = 0;
          v50[1] = 0;
          qmemcpy((void *)sub_1002D19D8(v50, 24), "p.checkVector(2, 4) >= 0", 24);
          sub_1002D2278(-215, v50, "polylines", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/drawing.cpp", 2432);
        }
        v64[i] = v52;
        v61[i] = (int)(HIDWORD(v51) * DWORD2(v51) + HIDWORD(v51) * DWORD2(v51) * ((v51 >> 3) & 0x1FF)) / 2;
        uint64_t v40 = v55;
        if (!v55) {
          goto LABEL_46;
        }
LABEL_44:
        if (atomic_fetch_add((atomic_uint *volatile)(v40 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)&v51);
        }
        goto LABEL_46;
      }
LABEL_43:
      v64[i] = 0;
      v61[i] = 0;
      uint64_t v40 = v55;
      if (v55) {
        goto LABEL_44;
      }
LABEL_46:
      uint64_t v55 = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      if (SDWORD1(v51) >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v56;
        do
          *(_DWORD *)&v42[4 * v41++] = 0;
        while (v41 < SDWORD1(v51));
      }
      if (v57 != v58) {
        j__free(v57);
      }
    }
  }
  sub_1003299E4((unsigned int *)&v65, (uint64_t)v64, (uint64_t)v61, v20, v46, v47, v48, v49, v45);
  if (v59 != v61)
  {
    if (v59) {
      operator delete[]();
    }
    uint64_t v60 = 264;
  }
  if (v62 != v64)
  {
    if (v62) {
      operator delete[]();
    }
    uint64_t v63 = 136;
  }
LABEL_59:
  if (v69 && atomic_fetch_add((atomic_uint *volatile)(v69 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v65);
  }
  uint64_t v69 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  if (SDWORD1(v65) >= 1)
  {
    uint64_t v43 = 0;
    int64x2_t v44 = v70;
    do
      *(_DWORD *)&v44[4 * v43++] = 0;
    while (v43 < SDWORD1(v65));
  }
  if (v71 != v72) {
    j__free(v71);
  }
  if (v74) {
    sub_1002D6888(v73);
  }
}

void sub_10032A2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (STACK[0x4E0] != a14)
  {
    if (STACK[0x4E0]) {
      operator delete[]();
    }
    STACK[0x4E8] = 136;
  }
  sub_1000094F4(v14 - 208);
  sub_10020FA00(v14 - 104);
  _Unwind_Resume(a1);
}

char *sub_10032A3EC(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, unsigned char *a6, int a7)
{
  if (a7 == 1) {
    int v9 = 4;
  }
  else {
    int v9 = a7;
  }
  v23[0] = a2;
  v23[1] = a3;
  if (!a7) {
    int v9 = 8;
  }
  v22[0] = a4;
  v22[1] = a5;
  __n128 result = (char *)sub_10032663C((uint64_t)&__dst, a1, v23, v22, v9, 1);
  int v11 = v26;
  int v12 = *(_DWORD *)(a1 + 4);
  BOOL v13 = __OFSUB__(v12, 1);
  int v14 = v12 - 1;
  if (v14 < 0 != v13)
  {
    LODWORD(v15) = 0;
    if (v26 < 1) {
      return result;
    }
  }
  else
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8 * v14);
    if (v26 < 1) {
      return result;
    }
  }
  if (v15 == 1)
  {
    uint64_t v18 = __dst;
    do
    {
      unsigned char *v18 = *a6;
      int v19 = v25 >> 31;
      v25 += v27 + (v28 & (v25 >> 31));
      uint64_t v18 = (char *)__dst + v29 + (uint64_t)(v30 & v19);
      __dst = v18;
      --v11;
    }
    while (v11);
  }
  else if (v15 == 3)
  {
    uint64_t v16 = (char *)__dst;
    do
    {
      char *v16 = *a6;
      v16[1] = a6[1];
      v16[2] = a6[2];
      int v17 = v25 >> 31;
      v25 += v27 + (v28 & (v25 >> 31));
      uint64_t v16 = (char *)__dst + v29 + (uint64_t)(v30 & v17);
      __dst = v16;
      --v11;
    }
    while (v11);
  }
  else
  {
    size_t v20 = (int)v15;
    __n128 result = (char *)__dst;
    do
    {
      memcpy(result, a6, v20);
      int v21 = v25 >> 31;
      v25 += v27 + (v28 & (v25 >> 31));
      __n128 result = (char *)__dst + v29 + (uint64_t)(v30 & v21);
      __dst = result;
      --v11;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_10032A5AC(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned char *a4)
{
  int v7 = *(_DWORD *)(a1 + 4);
  BOOL v8 = __OFSUB__(v7, 1);
  int v9 = v7 - 1;
  if (v9 < 0 != v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 72) + 8 * v9);
  }
  char v11 = *a4;
  char v12 = a4[1];
  char v13 = a4[2];
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(int **)(a1 + 64);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v125 = *(void *)(a1 + 80);
  v126[0] = v16 << 16;
  v126[1] = v17 << 16;
  unint64_t result = sub_1003263F4(v126, a2, a3);
  if (!result) {
    return result;
  }
  uint64_t v20 = *a3;
  uint64_t v19 = a3[1];
  uint64_t v22 = *a2;
  uint64_t v21 = a2[1];
  uint64_t v23 = *a3 - *a2;
  uint64_t v24 = v19 - v21;
  if (v23 >= 0) {
    uint64_t v25 = *a3 - *a2;
  }
  else {
    uint64_t v25 = *a2 - *a3;
  }
  if (v24 >= 0) {
    uint64_t v26 = v19 - v21;
  }
  else {
    uint64_t v26 = v21 - v19;
  }
  if (v25 <= v26)
  {
    uint64_t v46 = v24 >> 63;
    uint64_t v47 = (v46 ^ v23) - v46;
    uint64_t v48 = v46 & v20 ^ v22;
    uint64_t v49 = v46 & v19 ^ v21;
    *a2 = v48;
    a2[1] = v49;
    uint64_t v50 = *a3 ^ v48 & v46;
    uint64_t v51 = a3[1] ^ v49 & v46;
    *a3 = v50;
    a3[1] = v51;
    uint64_t v52 = *a2 ^ v50 & v46;
    uint64_t v53 = a2[1] ^ v51 & v46;
    a2[1] = v53;
    uint64_t v38 = (v47 << 16) / (v26 | 1);
    unint64_t v37 = (unint64_t)(a3[1] - v53) >> 16;
    uint64_t v36 = 0x10000;
    *a2 = v52 + 0x8000;
    a2[1] = v53 + 0x8000;
    if (v10 != 1)
    {
LABEL_13:
      if (v10 == 3)
      {
        unint64_t v39 = (unint64_t)(*a3 + 0x8000) >> 16;
        if ((v39 & 0x80000000) == 0 && (int)v16 > (int)v39)
        {
          unint64_t v40 = a3[1] + 0x8000;
          if (((v40 >> 16) & 0x80000000) == 0 && (int)v17 > (int)(v40 >> 16))
          {
            uint64_t v41 = (unsigned char *)(v14 + (v40 >> 16) * v125 + 3 * (int)v39);
            *uint64_t v41 = v11;
            v41[1] = v12;
            v41[2] = v13;
          }
        }
        if (v25 <= v26)
        {
          uint64_t v89 = a2[1] >> 16;
          a2[1] = v89;
          if ((v37 & 0x80000000) == 0)
          {
            unint64_t v90 = *a2;
            int v91 = v37 + 1;
            do
            {
              unint64_t v92 = v90 >> 16;
              if (((v90 >> 16) & 0x80000000) == 0
                && (int)v16 > (int)v92
                && (v89 & 0x80000000) == 0
                && (int)v17 > (int)v89)
              {
                unint64_t v93 = (unsigned char *)(v14 + v89 * v125 + 3 * (int)v92);
                unsigned char *v93 = v11;
                v93[1] = v12;
                v93[2] = v13;
                unint64_t v90 = *a2;
                uint64_t v89 = a2[1];
              }
              v90 += v38;
              ++v89;
              *a2 = v90;
              a2[1] = v89;
              --v91;
            }
            while (v91);
          }
        }
        else
        {
          uint64_t v42 = *a2 >> 16;
          *a2 = v42;
          if ((v37 & 0x80000000) == 0)
          {
            unint64_t v43 = a2[1];
            int v44 = v37 + 1;
            do
            {
              if ((v42 & 0x80000000) == 0
                && (int)v16 > (int)v42
                && ((v43 >> 16) & 0x80000000) == 0
                && (int)v17 > (int)(v43 >> 16))
              {
                unsigned int v45 = (unsigned char *)(v14 + (v43 >> 16) * v125 + 3 * (int)v42);
                *unsigned int v45 = v11;
                v45[1] = v12;
                uint64_t v45[2] = v13;
                uint64_t v42 = *a2;
                unint64_t v43 = a2[1];
              }
              ++v42;
              v43 += v36;
              *a2 = v42;
              a2[1] = v43;
              --v44;
            }
            while (v44);
          }
        }
        return result;
      }
      unint64_t v59 = (unint64_t)(*a3 + 0x8000) >> 16;
      if ((v59 & 0x80000000) != 0) {
        goto LABEL_56;
      }
      if ((int)v16 <= (int)v59) {
        goto LABEL_56;
      }
      unint64_t v60 = a3[1] + 0x8000;
      if (((v60 >> 16) & 0x80000000) != 0 || (int)v17 <= (int)(v60 >> 16) || v10 << 32 < 1) {
        goto LABEL_56;
      }
      uint64_t v61 = (v60 >> 16) * v125;
      uint64_t v62 = (uint64_t)((v10 << 32) * v59) >> 32;
      if (v10 <= 1) {
        unint64_t v63 = 1;
      }
      else {
        unint64_t v63 = v10;
      }
      if (v63 < 8 || (unint64_t)(v62 + v14 + v61 - (void)a4) < 0x20)
      {
        uint64_t v64 = 0;
LABEL_54:
        uint64_t v65 = v63 - v64;
        long long v66 = (unsigned char *)(v14 + v64 + v62 + v61);
        long long v67 = &a4[v64];
        do
        {
          char v68 = *v67++;
          *v66++ = v68;
          --v65;
        }
        while (v65);
LABEL_56:
        if (v25 > v26)
        {
          uint64_t v69 = *a2 >> 16;
          *a2 = v69;
          if ((v37 & 0x80000000) != 0) {
            return result;
          }
          uint64_t v70 = v10 << 32;
          unint64_t v71 = (int)v10;
          if ((int)v10 <= 1) {
            unint64_t v71 = 1;
          }
          unint64_t result = a2[1];
          while (1)
          {
            if ((v69 & 0x80000000) != 0
              || (int)v16 <= (int)v69
              || ((result >> 16) & 0x80000000) != 0
              || (int)v17 <= (int)(result >> 16)
              || v70 < 1)
            {
              goto LABEL_62;
            }
            uint64_t v73 = (result >> 16) * v125;
            uint64_t v74 = (v70 * v69) >> 32;
            if (v71 >= 8 && (unint64_t)(v74 + v14 + v73 - (void)a4) >= 0x20)
            {
              if (v71 < 0x20)
              {
                unint64_t v80 = 0;
LABEL_80:
                uint64_t v85 = (uint64_t *)&a4[v80];
                uint64_t v86 = (void *)(v14 + v80 + v74 + v73);
                unint64_t v87 = v80 - (v71 & 0x7FFFFFF8);
                do
                {
                  uint64_t v88 = *v85++;
                  *v86++ = v88;
                  v87 += 8;
                }
                while (v87);
                unint64_t v75 = v71 & 0x7FFFFFF8;
                if (v71 == v75) {
                  goto LABEL_61;
                }
                goto LABEL_71;
              }
              signed __int32 v81 = (_OWORD *)(v14 + 16 + v74 + v73);
              unint64_t v82 = v71 & 0x7FFFFFE0;
              uint64_t v83 = (long long *)(a4 + 16);
              do
              {
                long long v84 = *v83;
                *(v81 - 1) = *(v83 - 1);
                _OWORD *v81 = v84;
                v83 += 2;
                v81 += 2;
                v82 -= 32;
              }
              while (v82);
              if (v71 == (v71 & 0x7FFFFFE0)) {
                goto LABEL_61;
              }
              unint64_t v80 = v71 & 0x7FFFFFE0;
              unint64_t v75 = v80;
              if ((v71 & 0x18) != 0) {
                goto LABEL_80;
              }
            }
            else
            {
              unint64_t v75 = 0;
            }
LABEL_71:
            unint64_t v76 = v71 - v75;
            uint64_t v77 = (unsigned char *)(v14 + v75 + v74 + v73);
            long long v78 = &a4[v75];
            do
            {
              char v79 = *v78++;
              *v77++ = v79;
              --v76;
            }
            while (v76);
LABEL_61:
            uint64_t v69 = *a2;
            unint64_t result = a2[1];
LABEL_62:
            ++v69;
            result += v36;
            *a2 = v69;
            a2[1] = result;
            BOOL v72 = (int)v37 <= 0;
            LODWORD(v37) = v37 - 1;
            if (v72) {
              return result;
            }
          }
        }
        unint64_t result = a2[1] >> 16;
        a2[1] = result;
        if ((v37 & 0x80000000) != 0) {
          return result;
        }
        uint64_t v98 = v10 << 32;
        unint64_t v99 = (int)v10;
        if ((int)v10 <= 1) {
          unint64_t v99 = 1;
        }
        unint64_t v100 = *a2;
        while (1)
        {
          unint64_t v101 = v100 >> 16;
          if (((v100 >> 16) & 0x80000000) != 0
            || (int)v16 <= (int)v101
            || (result & 0x80000000) != 0
            || (int)v17 <= (int)result
            || v98 < 1)
          {
            goto LABEL_105;
          }
          uint64_t v102 = result * v125;
          uint64_t v103 = (uint64_t)(v98 * v101) >> 32;
          if (v99 >= 8 && (unint64_t)(v103 + v14 + v102 - (void)a4) >= 0x20)
          {
            if (v99 < 0x20)
            {
              unint64_t v109 = 0;
LABEL_123:
              uint64_t v114 = (uint64_t *)&a4[v109];
              uint64_t v115 = (void *)(v14 + v109 + v103 + v102);
              unint64_t v116 = v109 - (v99 & 0x7FFFFFF8);
              do
              {
                uint64_t v117 = *v114++;
                *v115++ = v117;
                v116 += 8;
              }
              while (v116);
              unint64_t v104 = v99 & 0x7FFFFFF8;
              if (v99 == v104) {
                goto LABEL_104;
              }
              goto LABEL_114;
            }
            uint64_t v110 = (_OWORD *)(v14 + 16 + v103 + v102);
            unint64_t v111 = v99 & 0x7FFFFFE0;
            uint64_t v112 = (long long *)(a4 + 16);
            do
            {
              long long v113 = *v112;
              *(v110 - 1) = *(v112 - 1);
              *uint64_t v110 = v113;
              v112 += 2;
              v110 += 2;
              v111 -= 32;
            }
            while (v111);
            if (v99 == (v99 & 0x7FFFFFE0)) {
              goto LABEL_104;
            }
            unint64_t v109 = v99 & 0x7FFFFFE0;
            unint64_t v104 = v109;
            if ((v99 & 0x18) != 0) {
              goto LABEL_123;
            }
          }
          else
          {
            unint64_t v104 = 0;
          }
LABEL_114:
          unint64_t v105 = v99 - v104;
          float64x2x2_t v106 = (unsigned char *)(v14 + v104 + v103 + v102);
          int v107 = &a4[v104];
          do
          {
            char v108 = *v107++;
            *v106++ = v108;
            --v105;
          }
          while (v105);
LABEL_104:
          unint64_t v100 = *a2;
          unint64_t result = a2[1];
LABEL_105:
          v100 += v38;
          ++result;
          *a2 = v100;
          a2[1] = result;
          BOOL v72 = (int)v37 <= 0;
          LODWORD(v37) = v37 - 1;
          if (v72) {
            return result;
          }
        }
      }
      if (v63 >= 0x20)
      {
        uint64_t v64 = v63 & 0xFFFFFFE0;
        uint64_t v118 = (long long *)(a4 + 16);
        unint64_t result = v62 + v61 + v14 + 16;
        uint64_t v119 = v64;
        do
        {
          long long v120 = *v118;
          *(_OWORD *)(result - 16) = *(v118 - 1);
          *(_OWORD *)unint64_t result = v120;
          v118 += 2;
          result += 32;
          v119 -= 32;
        }
        while (v119);
        if (v63 == v64) {
          goto LABEL_56;
        }
        if ((v63 & 0x18) == 0) {
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v64 = 0;
      }
      uint64_t v121 = v64;
      uint64_t v64 = v63 & 0xFFFFFFF8;
      float64x2x4_t v122 = (uint64_t *)&a4[v121];
      unint64_t result = v14 + v121 + v62 + v61;
      uint64_t v123 = v121 - v64;
      do
      {
        uint64_t v124 = *v122++;
        *(void *)unint64_t result = v124;
        result += 8;
        v123 += 8;
      }
      while (v123);
      if (v63 == v64) {
        goto LABEL_56;
      }
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v27 = v23 >> 63;
    uint64_t v28 = (v24 ^ v27) - v27;
    uint64_t v29 = v27 & v20 ^ v22;
    uint64_t v30 = v27 & v19 ^ v21;
    *a2 = v29;
    a2[1] = v30;
    uint64_t v31 = *a3 ^ v29 & v27;
    uint64_t v32 = a3[1] ^ v30 & v27;
    *a3 = v31;
    a3[1] = v32;
    uint64_t v33 = a2[1];
    uint64_t v34 = *a2 ^ v31 & v27;
    *a2 = v34;
    uint64_t v35 = v33 ^ v32 & v27;
    uint64_t v36 = (v28 << 16) / (v25 | 1);
    unint64_t v37 = (*a3 - v34) >> 16;
    uint64_t v38 = 0x10000;
    *a2 = v34 + 0x8000;
    a2[1] = v35 + 0x8000;
    if (v10 != 1) {
      goto LABEL_13;
    }
  }
  unint64_t v54 = (unint64_t)(*a3 + 0x8000) >> 16;
  if ((v54 & 0x80000000) == 0 && (int)v16 > (int)v54)
  {
    unint64_t v55 = a3[1] + 0x8000;
    if (((v55 >> 16) & 0x80000000) == 0 && (int)v17 > (int)(v55 >> 16)) {
      *(unsigned char *)(v14 + (v55 >> 16) * v125 + v54) = v11;
    }
  }
  if (v25 <= v26)
  {
    uint64_t v94 = a2[1] >> 16;
    a2[1] = v94;
    if ((v37 & 0x80000000) == 0)
    {
      unint64_t v95 = *a2;
      int v96 = v37 + 1;
      do
      {
        unint64_t v97 = v95 >> 16;
        if (((v95 >> 16) & 0x80000000) == 0 && (int)v16 > (int)v97 && (v94 & 0x80000000) == 0 && (int)v17 > (int)v94)
        {
          *(unsigned char *)(v14 + v94 * v125 + v97) = v11;
          unint64_t v95 = *a2;
          uint64_t v94 = a2[1];
        }
        v95 += v38;
        ++v94;
        *a2 = v95;
        a2[1] = v94;
        --v96;
      }
      while (v96);
    }
  }
  else
  {
    uint64_t v56 = *a2 >> 16;
    *a2 = v56;
    if ((v37 & 0x80000000) == 0)
    {
      unint64_t v57 = a2[1];
      int v58 = v37 + 1;
      do
      {
        if ((v56 & 0x80000000) == 0
          && (int)v16 > (int)v56
          && ((v57 >> 16) & 0x80000000) == 0
          && (int)v17 > (int)(v57 >> 16))
        {
          *(unsigned char *)(v14 + (v57 >> 16) * v125 + v56) = v11;
          uint64_t v56 = *a2;
          unint64_t v57 = a2[1];
        }
        ++v56;
        v57 += v36;
        *a2 = v56;
        a2[1] = v57;
        --v58;
      }
      while (v58);
    }
  }
  return result;
}

uint64_t sub_10032ADC4(unsigned int *a1, uint64_t *a2, uint64_t *a3, unsigned char *a4)
{
  unint64_t v8 = *a1;
  uint64_t v9 = (v8 >> 3) & 0x1FF;
  if (v9 > 3 || v9 == 1 || (*a1 & 7) != 0)
  {
    int v12 = *(_DWORD *)((char *)a2 + 2);
    int v13 = *(_DWORD *)((char *)a2 + 10);
    unsigned int v14 = *(_DWORD *)((char *)a3 + 2);
    unsigned int v15 = *(_DWORD *)((char *)a3 + 10);
    return (uint64_t)sub_10032A3EC((uint64_t)a1, v12, v13, v14, v15, a4, 8);
  }
  v4.i32[0] = *(_DWORD *)a4;
  uint64_t v17 = *((void *)a1 + 2);
  uint64_t v18 = *((void *)a1 + 10);
  uint64_t v19 = **((void **)a1 + 8);
  v20.i64[0] = (int)v19;
  v20.i64[1] = SHIDWORD(v19);
  int64x2_t v21 = vdupq_n_s64(0xFFFFFFFFFFFE0000);
  *(int64x2_t *)a2 = vaddq_s64(*(int64x2_t *)a2, v21);
  *(int64x2_t *)a3 = vaddq_s64(*(int64x2_t *)a3, v21);
  int8x16_t v22 = (int8x16_t)vaddq_s64(vshlq_n_s64(v20, 0x10uLL), vdupq_n_s64(0xFFFFFFFFFFFB0001));
  int8x16_t v295 = vextq_s8(v22, v22, 8uLL);
  uint64_t result = sub_1003263F4(v295.i64, a2, a3);
  if (!result) {
    return result;
  }
  uint16x4_t v24 = (uint16x4_t)vmovl_u8(v4).u64[0];
  uint64_t v25 = 2 * v9 + 2 * v18;
  uint64_t v27 = *a3;
  uint64_t v26 = a3[1];
  uint64_t v29 = *a2;
  uint64_t v28 = a2[1];
  uint64_t v30 = *a3 - *a2;
  uint64_t v31 = v26 - v28;
  if (v30 >= 0) {
    uint64_t v32 = *a3 - *a2;
  }
  else {
    uint64_t v32 = *a2 - *a3;
  }
  if (v31 >= 0) {
    uint64_t v33 = v26 - v28;
  }
  else {
    uint64_t v33 = v28 - v26;
  }
  if (v32 <= v33)
  {
    uint64_t v53 = v31 >> 63;
    uint64_t v54 = v53 & v27 ^ v29;
    *a2 = v54;
    uint64_t v55 = *a3 ^ v54 & v53;
    *a3 = v55;
    uint64_t v56 = *a2 ^ v55 & v53;
    uint64_t v57 = v53 & v26 ^ v28;
    a2[1] = v57;
    uint64_t v58 = a3[1] ^ v57 & v53;
    a3[1] = v58;
    a2[1] ^= v58 & v53;
    uint64_t v48 = (((v53 ^ v30) - v53) << 16) / (v33 | 1);
    unint64_t v59 = a3[1] + 0x10000;
    a3[1] = v59;
    uint64_t v45 = a2[1];
    uint64_t v44 = (v59 >> 16) - ((unint64_t)v45 >> 16);
    uint64_t v43 = v56 + (-(v48 * (unsigned __int16)v45) >> 16) + 0x8000;
    *a2 = v43;
    unsigned int v46 = ((v48 >> 63) ^ (v48 >> 11)) & 0x3F;
    unint64_t v60 = v59 >> 9;
    uint64_t v42 = 0x10000;
    uint64_t v49 = v25 + v17;
    uint64_t v50 = ((unint64_t)v45 >> 9) & 0x78;
    int v51 = v60 & 0x78;
    if ((((v48 >> 63) ^ (v48 >> 11)) & 0x20) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v34 = v30 >> 63;
    uint64_t v35 = (v31 ^ v34) - v34;
    uint64_t v36 = v34 & v27 ^ v29;
    *a2 = v36;
    uint64_t v37 = *a3 ^ v36 & v34;
    *a3 = v37;
    uint64_t v38 = v34 & v26 ^ v28;
    *a2 ^= v37 & v34;
    a2[1] = v38;
    uint64_t v39 = *a3;
    uint64_t v40 = a3[1] ^ v38 & v34;
    a3[1] = v40;
    uint64_t v41 = a2[1] ^ v40 & v34;
    uint64_t v42 = (v35 << 16) / (v32 | 1);
    v39 += 0x10000;
    *a3 = v39;
    uint64_t v43 = *a2;
    uint64_t v44 = (v39 >> 16) - (*a2 >> 16);
    uint64_t v45 = v41 + (-(v42 * (unsigned __int16)*a2) >> 16) + 0x8000;
    a2[1] = v45;
    unsigned int v46 = ((v42 >> 63) ^ (v42 >> 11)) & 0x3F;
    uint64_t v47 = v39 >> 9;
    uint64_t v48 = 0x10000;
    uint64_t v49 = v25 + v17;
    uint64_t v50 = (v43 >> 9) & 0x78;
    int v51 = v47 & 0x78;
    if ((((v42 >> 63) ^ (v42 >> 11)) & 0x20) != 0)
    {
LABEL_20:
      unsigned int v52 = 256;
      goto LABEL_23;
    }
  }
  unsigned int v52 = byte_100408F04[v46];
LABEL_23:
  int32x4_t v61 = (int32x4_t)vmovl_u16(v24);
  uint64_t v62 = v49 + 2;
  unsigned int v63 = v52 * (124 - v50);
  unsigned int v64 = v52 * (v51 | 4);
  v296[8] = v52;
  int v65 = v51 - v50;
  uint64_t result = ((v65 & 0x78 | 4u) * (unint64_t)v52) >> 8;
  v296[0] = 0;
  v296[1] = result;
  v296[2] = v63 >> 8;
  v296[3] = result;
  v296[4] = (v52 * (v65 + 132)) >> 8;
  v296[5] = (v63 + (v52 << 7)) >> 8;
  v296[6] = v64 >> 8;
  v296[7] = (v64 + (v52 << 7)) >> 8;
  if (v9)
  {
    if (v9 == 2)
    {
      if (v32 <= v33)
      {
        if ((v44 & 0x80000000) == 0)
        {
          uint64_t v185 = v45 >> 16;
          uint64_t v186 = v62 + (v45 >> 16) * v18;
          uint32x4_t v187 = (uint32x4_t)vextq_s8(vextq_s8((int8x16_t)v61, (int8x16_t)v61, 0xCuLL), (int8x16_t)v61, 8uLL);
          v61.i32[3] = v61.i32[0];
          uint64_t v188 = 3 * (v43 >> 16);
          unsigned int v189 = v44 - 1;
          uint64_t v190 = v44 <= 1 ? 1 : 2;
          uint64_t result = (uint64_t)v296;
          unsigned int v191 = v296[v190 & (v44 | 2)];
          uint64_t v192 = v186 + v188;
          v193.i32[0] = dword_100408F24[((unsigned __int16)v43 >> 11) | 0x20];
          v193.i32[1] = dword_100408F24[(unsigned __int16)v43 >> 11];
          int8x8_t v194 = vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32(v193, vdup_n_s32(v191)), 8uLL), (int8x8_t)0xFF000000FFLL);
          unsigned int v195 = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v43 >> 11) ^ 0x3F])
                                                    * v191) >> 8);
          unsigned int v196 = *(unsigned __int8 *)(v186 + v188 + 5)
               + (((v61.i32[2] - *(unsigned __int8 *)(v186 + v188 + 5)) * v195 + 127) >> 8);
          int8x8_t v197 = *(int8x8_t *)(v186 + v188 - 3);
          int16x8_t v198 = (int16x8_t)vmovl_u8((uint8x8_t)v197);
          int32x4_t v199 = (int32x4_t)vsubw_high_u16(v187, (uint16x8_t)v198);
          v200.i32[0] = v194.i32[0];
          int32x4_t v201 = vdupq_n_s32(v195);
          v201.i32[0] = v194.i32[1];
          v200.i32[1] = v194.i32[0];
          v200.u64[1] = (unint64_t)v194;
          int32x4_t v202 = vtrn1q_s32(v201, v201);
          *(uint16x4_t *)v198.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_u16((uint32x4_t)v61, *(uint16x4_t *)v198.i8), v200)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
          v198.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(v199, v202)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
          int8x8_t v203 = vadd_s8(v197, vmovn_s16(v198));
          int16x8_t v204 = (int16x8_t)vmovl_u8((uint8x8_t)v203);
          int32x4_t v205 = (int32x4_t)vsubw_high_u16(v187, (uint16x8_t)v204);
          *(uint16x4_t *)v204.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_u16((uint32x4_t)v61, *(uint16x4_t *)v204.i8), v200)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
          v204.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(v205, v202)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
          *(int8x8_t *)(v192 - 3) = vadd_s8(v203, vmovn_s16(v204));
          *(unsigned char *)(v192 + 5) = v196 + ((unsigned __int16)((v61.i16[4] - v196) * v195 + 127) >> 8);
          uint64_t v206 = *a2 + v48;
          *a2 = v206;
          if (v44)
          {
            uint64_t v207 = v186 + v18;
            int v208 = v189 <= 1 ? 1 : 2;
            unsigned int v209 = v296[(v208 & (v189 | 2)) + 3];
            uint64_t v210 = v207 + 3 * (v206 >> 16);
            uint64_t result = (uint64_t)&dword_100408F24[(unsigned __int16)v206 >> 11];
            v211.i32[0] = dword_100408F24[((unsigned __int16)v206 >> 11) | 0x20];
            v211.i32[1] = *(_DWORD *)result;
            int8x8_t v212 = vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32(v211, vdup_n_s32(v209)), 8uLL), (int8x8_t)0xFF000000FFLL);
            unsigned int v213 = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v206 >> 11) ^ 0x3F])
                                                      * v209) >> 8);
            unsigned int v214 = *(unsigned __int8 *)(v210 + 5) + (((v61.i32[2] - *(unsigned __int8 *)(v210 + 5)) * v213 + 127) >> 8);
            __int16 v215 = (v61.i16[4]
                  - (*(unsigned char *)(v210 + 5)
                                    + ((unsigned __int16)((v61.i16[4] - *(unsigned __int8 *)(v210 + 5)) * v213 + 127) >> 8)))
                 * v213
                 + 127;
            int8x8_t v216 = *(int8x8_t *)(v210 - 3);
            uint16x8_t v217 = vmovl_u8((uint8x8_t)v216);
            v218.i32[0] = v212.i32[0];
            int32x4_t v219 = vdupq_n_s32(v213);
            v219.i32[0] = v212.i32[1];
            int32x4_t v220 = vtrn1q_s32(v219, v219);
            v218.i32[1] = v212.i32[0];
            v218.u64[1] = (unint64_t)v212;
            *(uint16x4_t *)v221.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_u16((uint32x4_t)v61, *(uint16x4_t *)v217.i8), v218)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            v221.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_high_u16(v187, v217), v220)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            *(int8x8_t *)v221.i8 = vadd_s8(v216, vmovn_s16(v221));
            uint16x8_t v222 = vmovl_u8(*(uint8x8_t *)v221.i8);
            *(uint16x4_t *)v223.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_u16((uint32x4_t)v61, *(uint16x4_t *)v222.i8), v218)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            v223.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32((int32x4_t)vsubw_high_u16(v187, v222), v220)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            *(int8x8_t *)(v210 - 3) = vadd_s8(*(int8x8_t *)v221.i8, vmovn_s16(v223));
            *(unsigned char *)(v210 + 5) = v214 + HIBYTE(v215);
            uint64_t v224 = *a2 + v48;
            *a2 = v224;
            if (v44 != 1)
            {
              LODWORD(result) = v44 - 2;
              uint64_t v225 = v17 + v18 * (v185 + 4) + 2 * ((v8 >> 3) & 0x1FF);
              do
              {
                uint64_t v226 = v225 + 3 * (v224 >> 16);
                int v227 = result | 2;
                uint64_t v228 = (result - 1);
                if (result <= 1) {
                  int v229 = 1;
                }
                else {
                  int v229 = 2;
                }
                unsigned int v230 = v296[(v229 & v227) + 6];
                v231.i32[0] = dword_100408F24[((unsigned __int16)v224 >> 11) | 0x20];
                v231.i32[1] = dword_100408F24[(unsigned __int16)v224 >> 11];
                int8x8_t v232 = vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32(v231, vdup_n_s32(v230)), 8uLL), (int8x8_t)0xFF000000FFLL);
                unsigned int v233 = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v224 >> 11) ^ 0x3F])
                                                          * v230) >> 8);
                LOBYTE(v230) = *(unsigned char *)(v226 + 7)
                             + ((unsigned __int16)((v61.i16[4] - *(unsigned __int8 *)(v226 + 7)) * v233 + 127) >> 8);
                int8x8_t v234 = *(int8x8_t *)(v226 - 1);
                uint16x8_t v235 = vmovl_u8((uint8x8_t)v234);
                int32x4_t v236 = (int32x4_t)vsubw_u16((uint32x4_t)v61, *(uint16x4_t *)v235.i8);
                v237.i32[0] = v232.i32[0];
                int32x4_t v238 = vdupq_n_s32(v233);
                v238.i32[0] = v232.i32[1];
                v237.i32[1] = v232.i32[0];
                v237.u64[1] = (unint64_t)v232;
                int32x4_t v239 = (int32x4_t)vsubw_high_u16(v187, v235);
                int32x4_t v240 = vtrn1q_s32(v238, v238);
                v238.i64[0] = 0x7F0000007FLL;
                v238.i64[1] = 0x7F0000007FLL;
                int32x4_t v241 = vmlaq_s32(v238, v236, v237);
                v236.i64[0] = 0x7F0000007FLL;
                v236.i64[1] = 0x7F0000007FLL;
                v299.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v236, v239, v240), 8uLL);
                v299.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)v241, 8uLL);
                *(int8x8_t *)v239.i8 = vadd_s8(v234, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v299, (int8x16_t)xmmword_1004047D0));
                uint16x8_t v242 = vmovl_u8(*(uint8x8_t *)v239.i8);
                v241.i64[0] = 0x7F0000007FLL;
                v241.i64[1] = 0x7F0000007FLL;
                v236.i64[0] = 0x7F0000007FLL;
                v236.i64[1] = 0x7F0000007FLL;
                v298.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v236, (int32x4_t)vsubw_high_u16(v187, v242), v240), 8uLL);
                v298.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v241, (int32x4_t)vsubw_u16((uint32x4_t)v61, *(uint16x4_t *)v242.i8), v237), 8uLL);
                *(int8x8_t *)(v226 - 1) = vadd_s8(*(int8x8_t *)v239.i8, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v298, (int8x16_t)xmmword_1004047D0));
                *(unsigned char *)(v226 + 7) = v230
                                     + ((unsigned __int16)((v61.i16[4] - v230) * v233 + 127) >> 8);
                uint64_t v224 = *a2 + v48;
                *a2 = v224;
                v225 += v18;
                uint64_t result = v228;
              }
              while (v228 != -1);
            }
          }
        }
      }
      else if ((v44 & 0x80000000) == 0)
      {
        unsigned int v66 = 0;
        uint64_t v67 = v62 + 3 * (v43 >> 16);
        uint64_t result = (uint64_t)dword_100408F24;
        do
        {
          uint64_t v68 = v45 >> 16;
          uint64_t v69 = (unsigned __int8 *)(v67 + ((v45 >> 16) - 1) * v18);
          if (v66 <= 1) {
            int v70 = 1;
          }
          else {
            int v70 = 2;
          }
          int v71 = 3 * (v70 & (v66 | 2));
          int v72 = v44 | 2;
          int v73 = v44 - 1;
          if (v44 <= 1) {
            int v74 = 1;
          }
          else {
            int v74 = 2;
          }
          int v75 = v296[v71 + (v74 & v72)];
          unsigned int v76 = (unsigned __int16)v45 >> 11;
          __int16 v77 = ((unsigned __int16)(LOWORD(dword_100408F24[v76 | 0x20]) * v75) >> 8);
          unsigned __int8 v78 = *v69 + ((unsigned __int16)((v61.i16[0] - *v69) * v77 + 127) >> 8);
          unsigned __int8 v79 = v69[1] + ((unsigned __int16)((v61.i16[2] - v69[1]) * v77 + 127) >> 8);
          unsigned __int8 v80 = v69[2] + ((unsigned __int16)((v61.i16[4] - v69[2]) * v77 + 127) >> 8);
          *uint64_t v69 = v78 + ((unsigned __int16)((v61.i16[0] - v78) * v77 + 127) >> 8);
          v69[1] = v79 + ((unsigned __int16)((v61.i16[2] - v79) * v77 + 127) >> 8);
          v69[2] = v80 + ((unsigned __int16)((v61.i16[4] - v80) * v77 + 127) >> 8);
          uint64_t v81 = v18 * v68;
          unint64_t v82 = (unsigned __int8 *)(v67 + v18 * v68);
          __int16 v83 = ((unsigned __int16)(LOWORD(dword_100408F24[v76]) * v75) >> 8);
          unsigned __int8 v84 = *v82 + ((unsigned __int16)((v61.i16[0] - *v82) * v83 + 127) >> 8);
          unsigned __int8 v85 = v82[1] + ((unsigned __int16)((v61.i16[2] - v82[1]) * v83 + 127) >> 8);
          unsigned __int8 v86 = v82[2] + ((unsigned __int16)((v61.i16[4] - v82[2]) * v83 + 127) >> 8);
          *unint64_t v82 = v84 + ((unsigned __int16)((v61.i16[0] - v84) * v83 + 127) >> 8);
          v82[1] = v85 + ((unsigned __int16)((v61.i16[2] - v85) * v83 + 127) >> 8);
          v82[2] = v86 + ((unsigned __int16)((v61.i16[4] - v86) * v83 + 127) >> 8);
          unint64_t v87 = (unsigned __int8 *)(v67 + v18 + v81);
          int v88 = ((unsigned __int16)(LOWORD(dword_100408F24[v76 ^ 0x3F]) * v75) >> 8);
          LOBYTE(v76) = *v87 + ((unsigned __int16)((v61.i16[0] - *v87) * v88 + 127) >> 8);
          LODWORD(v82) = v87[1] + (((v61.i32[1] - v87[1]) * v88 + 127) >> 8);
          unsigned int v89 = v87[2] + (((v61.i32[2] - v87[2]) * v88 + 127) >> 8);
          __int16 v90 = (v61.i16[2] - (v87[1] + ((unsigned __int16)((v61.i16[2] - v87[1]) * v88 + 127) >> 8)))
              * v88
              + 127;
          __int16 v91 = v61.i16[4] - (v87[2] + ((unsigned __int16)((v61.i16[4] - v87[2]) * v88 + 127) >> 8));
          *unint64_t v87 = v76 + ((unsigned __int16)((v61.i16[0] - v76) * v88 + 127) >> 8);
          v87[1] = (_BYTE)v82 + HIBYTE(v90);
          v87[2] = v89 + ((unsigned __int16)(v91 * v88 + 127) >> 8);
          uint64_t v45 = a2[1] + v42;
          a2[1] = v45;
          v67 += 3;
          ++v66;
          LODWORD(v44) = v73;
        }
        while (v73 != -1);
      }
    }
    else if (v32 <= v33)
    {
      if ((v44 & 0x80000000) == 0)
      {
        unsigned int v275 = 0;
        uint64_t v276 = v17 + v18 * ((v45 >> 16) + 2) + 2 * ((v8 >> 3) & 0x1FF);
        v277.i64[0] = 0xFF000000FFLL;
        v277.i64[1] = 0xFF000000FFLL;
        do
        {
          if (v275 <= 1) {
            int v278 = 1;
          }
          else {
            int v278 = 2;
          }
          int v279 = 3 * (v278 & (v275 | 2));
          int v280 = v44 | 2;
          int v281 = v44 - 1;
          if (v44 <= 1) {
            int v282 = 1;
          }
          else {
            int v282 = 2;
          }
          uint64_t result = v296[v279 + (v282 & v280)];
          v283.i32[0] = dword_100408F24[((unsigned __int16)v43 >> 11) | 0x20];
          v283.i32[1] = dword_100408F24[(unsigned __int16)v43 >> 11];
          uint64_t v44 = v276 + 4 * (v43 >> 16);
          int32x2_t v284 = (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)vmul_s32(v283, vdup_n_s32(result)), 8uLL), (int8x8_t)0xFF000000FFLL);
          int8x8_t v285 = *(int8x8_t *)(v44 - 2);
          uint16x8_t v286 = vmovl_u8((uint8x8_t)v285);
          v287.i64[0] = 0x7F0000007FLL;
          v287.i64[1] = 0x7F0000007FLL;
          v288.i64[0] = 0x7F0000007FLL;
          v288.i64[1] = 0x7F0000007FLL;
          v300.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_lane_s32(v288, (int32x4_t)vsubw_high_u16((uint32x4_t)v61, v286), v284, 1), 8uLL);
          v300.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_lane_s32(v287, (int32x4_t)vsubw_u16((uint32x4_t)v61, *(uint16x4_t *)v286.i8), v284, 0), 8uLL);
          int8x8_t v289 = vadd_s8(v285, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v300, (int8x16_t)xmmword_1004047D0));
          uint16x8_t v290 = vmovl_u8((uint8x8_t)v289);
          v287.i64[0] = 0x7F0000007FLL;
          v287.i64[1] = 0x7F0000007FLL;
          v288.i64[0] = 0x7F0000007FLL;
          v288.i64[1] = 0x7F0000007FLL;
          v300.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_lane_s32(v288, (int32x4_t)vsubw_high_u16((uint32x4_t)v61, v290), v284, 1), 8uLL);
          v300.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmlaq_lane_s32(v287, (int32x4_t)vsubw_u16((uint32x4_t)v61, *(uint16x4_t *)v290.i8), v284, 0), 8uLL);
          uint8x8_t v291 = (uint8x8_t)vadd_s8(v289, (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v300, (int8x16_t)xmmword_1004047D0));
          *(uint8x8_t *)(v44 - 2) = v291;
          v291.i32[0] = *(_DWORD *)(v44 + 6);
          int32x4_t v292 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(v291));
          int32x4_t v293 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v43 >> 11) ^ 0x3F])
                                                                * result) >> 8));
          v288.i64[0] = 0x7F0000007FLL;
          v288.i64[1] = 0x7F0000007FLL;
          *(int16x4_t *)v292.i8 = vshrn_n_s32(vmlaq_s32(v288, v292, v293), 8uLL);
          int16x8_t v294 = (int16x8_t)vaddw_u8((uint16x8_t)v292, v291);
          *(uint16x4_t *)v294.i8 = vsra_n_u16(*(uint16x4_t *)v294.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v294.i8), v277)), v293)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
          *(_DWORD *)(v44 + 6) = vmovn_s16(v294).u32[0];
          uint64_t v43 = *a2 + v48;
          *a2 = v43;
          ++v275;
          v276 += v18;
          LODWORD(v44) = v281;
        }
        while (v281 != -1);
      }
    }
    else if ((v44 & 0x80000000) == 0)
    {
      uint64_t v127 = v62 + 4 * (v43 >> 16);
      long long v128 = (__int32 *)(v127 + ((v45 >> 16) - 1) * v18);
      unsigned int v129 = v44 - 1;
      uint64_t v130 = v44 <= 1 ? 1 : 2;
      int v131 = v296[v130 & (v44 | 2)];
      unsigned int v132 = (unsigned __int16)v45 >> 11;
      v23.i32[0] = *v128;
      v133.i64[0] = 0xFF000000FFLL;
      v133.i64[1] = 0xFF000000FFLL;
      int32x4_t v134 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(v23));
      int32x4_t v135 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_100408F24[v132 | 0x20]) * v131) >> 8));
      v136.i64[0] = 0x7F0000007FLL;
      v136.i64[1] = 0x7F0000007FLL;
      v137.i64[0] = 0x7F0000007FLL;
      v137.i64[1] = 0x7F0000007FLL;
      *(int16x4_t *)v134.i8 = vshrn_n_s32(vmlaq_s32(v137, v134, v135), 8uLL);
      int16x8_t v138 = (int16x8_t)vaddw_u8((uint16x8_t)v134, v23);
      v139.i32[1] = 8323199;
      *(uint16x4_t *)v138.i8 = vsra_n_u16(*(uint16x4_t *)v138.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v138.i8), v133)), v135)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
      *(int8x8_t *)v138.i8 = vmovn_s16(v138);
      *long long v128 = v138.i32[0];
      unint64_t v140 = (__int32 *)((char *)v128 + v18);
      v138.i32[0] = *(__int32 *)((char *)v128 + v18);
      int32x4_t v141 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_100408F24[v132]) * v131) >> 8));
      int32x4_t v142 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v138.i8));
      v143.i64[0] = 0x7F0000007FLL;
      v143.i64[1] = 0x7F0000007FLL;
      *(int16x4_t *)v142.i8 = vshrn_n_s32(vmlaq_s32(v143, v142, v141), 8uLL);
      int16x8_t v144 = (int16x8_t)vaddw_u8((uint16x8_t)v142, *(uint8x8_t *)v138.i8);
      *(uint16x4_t *)v144.i8 = vsra_n_u16(*(uint16x4_t *)v144.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v144.i8), v133)), v141)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
      *(int8x8_t *)v144.i8 = vmovn_s16(v144);
      *unint64_t v140 = v144.i32[0];
      uint64_t result = dword_100408F24[v132 ^ 0x3F];
      v144.i32[0] = *(__int32 *)((char *)v128 + v18 + v18);
      int32x4_t v145 = vdupq_n_s32(((unsigned __int16)(result * v131) >> 8));
      int32x4_t v146 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v144.i8));
      v143.i64[0] = 0x7F0000007FLL;
      v143.i64[1] = 0x7F0000007FLL;
      *(int16x4_t *)v146.i8 = vshrn_n_s32(vmlaq_s32(v143, v146, v145), 8uLL);
      int16x8_t v147 = (int16x8_t)vaddw_u8((uint16x8_t)v146, *(uint8x8_t *)v144.i8);
      *(uint16x4_t *)v147.i8 = vsra_n_u16(*(uint16x4_t *)v147.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v147.i8), v133)), v145)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
      uint8x8_t v148 = (uint8x8_t)vmovn_s16(v147);
      *(_DWORD *)((char *)v140 + v18) = v148.i32[0];
      uint64_t v149 = a2[1] + v42;
      a2[1] = v149;
      if (v44)
      {
        uint64_t result = v127 + 4 + ((v149 >> 16) - 1) * v18;
        int v150 = v129 <= 1 ? 1 : 2;
        int v151 = v296[(v150 & (v129 | 2)) + 3];
        v148.i32[0] = *(_DWORD *)result;
        int32x4_t v152 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(v148));
        int32x4_t v153 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v149 >> 11) | 0x20])
                                                              * v151) >> 8));
        v154.i64[0] = 0x7F0000007FLL;
        v154.i64[1] = 0x7F0000007FLL;
        *(int16x4_t *)v152.i8 = vshrn_n_s32(vmlaq_s32(v154, v152, v153), 8uLL);
        int16x8_t v155 = (int16x8_t)vaddw_u8((uint16x8_t)v152, v148);
        *(uint16x4_t *)v155.i8 = vsra_n_u16(*(uint16x4_t *)v155.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v155.i8), v133)), v153)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
        *(int8x8_t *)v155.i8 = vmovn_s16(v155);
        *(_DWORD *)uint64_t result = v155.i32[0];
        unint64_t v156 = (_DWORD *)(result + v18);
        v155.i32[0] = *(_DWORD *)(result + v18);
        int32x4_t v157 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_100408F24[(unsigned __int16)v149 >> 11])
                                                              * v151) >> 8));
        int32x4_t v158 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v155.i8));
        v154.i64[0] = 0x7F0000007FLL;
        v154.i64[1] = 0x7F0000007FLL;
        *(int16x4_t *)v158.i8 = vshrn_n_s32(vmlaq_s32(v154, v158, v157), 8uLL);
        int16x8_t v159 = (int16x8_t)vaddw_u8((uint16x8_t)v158, *(uint8x8_t *)v155.i8);
        *(uint16x4_t *)v159.i8 = vsra_n_u16(*(uint16x4_t *)v159.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v159.i8), v133)), v157)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
        *(int8x8_t *)v159.i8 = vmovn_s16(v159);
        _DWORD *v156 = v159.i32[0];
        v159.i32[0] = *(_DWORD *)(result + v18 + v18);
        int32x4_t v160 = vdupq_n_s32(((unsigned __int16)(dword_100408F24[((unsigned __int16)v149 >> 11) ^ 0x3F]
                                                              * v151) >> 8));
        int32x4_t v161 = vmlaq_s32(v136, (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v159.i8)), v160);
        *(int16x4_t *)v161.i8 = vshrn_n_s32(v161, 8uLL);
        int16x8_t v162 = (int16x8_t)vaddw_u8((uint16x8_t)v161, *(uint8x8_t *)v159.i8);
        *(uint16x4_t *)v162.i8 = vsra_n_u16(*(uint16x4_t *)v162.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v162.i8), v133)), v160)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
        *(_DWORD *)((char *)v156 + v18) = vmovn_s16(v162).u32[0];
        uint64_t v163 = a2[1] + v42;
        a2[1] = v163;
        if (v44 != 1)
        {
          uint64_t v164 = 0;
          uint64_t v165 = v127 + 8;
          int v166 = v44 - 2;
          v167.i64[0] = 0xFF000000FFLL;
          v167.i64[1] = 0xFF000000FFLL;
          do
          {
            uint64_t v168 = v163 >> 16;
            uint64_t v169 = v165 + ((v163 >> 16) - 1) * v18;
            int v170 = v166 | 2;
            BOOL v117 = v166-- != 0;
            if (v166 != 0 && v117) {
              int v171 = 2;
            }
            else {
              int v171 = 1;
            }
            uint64_t result = v296[(v171 & v170) + 6];
            v139.i32[0] = *(_DWORD *)(v169 + 4 * v164);
            int32x4_t v172 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(v139));
            int32x4_t v173 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v163 >> 11) | 0x20])
                                                                  * result) >> 8));
            v174.i64[0] = 0x7F0000007FLL;
            v174.i64[1] = 0x7F0000007FLL;
            *(int16x4_t *)v172.i8 = vshrn_n_s32(vmlaq_s32(v174, v172, v173), 8uLL);
            int16x8_t v175 = (int16x8_t)vaddw_u8((uint16x8_t)v172, v139);
            *(uint16x4_t *)v175.i8 = vsra_n_u16(*(uint16x4_t *)v175.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v175.i8), v167)), v173)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            *(int8x8_t *)v175.i8 = vmovn_s16(v175);
            *(_DWORD *)(v169 + 4 * v164) = v175.i32[0];
            unsigned int v176 = (unsigned __int16)v163 >> 11;
            uint64_t v177 = v18 * v168;
            v175.i32[0] = *(_DWORD *)(v165 + v177 + 4 * v164);
            int32x4_t v178 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_100408F24[v176]) * result) >> 8));
            int32x4_t v179 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v175.i8));
            v174.i64[0] = 0x7F0000007FLL;
            v174.i64[1] = 0x7F0000007FLL;
            *(int16x4_t *)v179.i8 = vshrn_n_s32(vmlaq_s32(v174, v179, v178), 8uLL);
            int16x8_t v180 = (int16x8_t)vaddw_u8((uint16x8_t)v179, *(uint8x8_t *)v175.i8);
            *(uint16x4_t *)v180.i8 = vsra_n_u16(*(uint16x4_t *)v180.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v180.i8), v167)), v178)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            *(int8x8_t *)v180.i8 = vmovn_s16(v180);
            *(_DWORD *)(v165 + v177 + 4 * v164) = v180.i32[0];
            uint64_t v181 = v165 + v18 + v177;
            v180.i32[0] = *(_DWORD *)(v181 + 4 * v164);
            int32x4_t v182 = (int32x4_t)vsubw_u16((uint32x4_t)v61, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v180.i8));
            int32x4_t v183 = vdupq_n_s32(((unsigned __int16)(LOWORD(dword_100408F24[v176 ^ 0x3F]) * result) >> 8));
            v174.i64[0] = 0x7F0000007FLL;
            v174.i64[1] = 0x7F0000007FLL;
            *(int16x4_t *)v182.i8 = vshrn_n_s32(vmlaq_s32(v174, v182, v183), 8uLL);
            int16x8_t v184 = (int16x8_t)vaddw_u8((uint16x8_t)v182, *(uint8x8_t *)v180.i8);
            *(uint16x4_t *)v184.i8 = vsra_n_u16(*(uint16x4_t *)v184.i8, (uint16x4_t)vadd_s16(vmovn_s32(vmulq_s32(vsubq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v184.i8), v167)), v183)), (int16x4_t)0x7F007F007F007FLL), 8uLL);
            uint8x8_t v139 = (uint8x8_t)vmovn_s16(v184);
            *(_DWORD *)(v181 + 4 * v164) = v139.i32[0];
            uint64_t v163 = a2[1] + v42;
            a2[1] = v163;
            ++v164;
          }
          while (v44 - 1 != v164);
        }
      }
    }
  }
  else if (v32 <= v33)
  {
    if ((v44 & 0x80000000) == 0)
    {
      uint64_t v243 = v62 + (v45 >> 16) * v18;
      unsigned int v244 = v44 - 1;
      uint64_t v245 = v44 <= 1 ? 1 : 2;
      int v246 = v296[v245 & (v44 | 2)];
      uint64_t result = 32;
      __int16 v247 = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v43 >> 11) | 0x20]) * v246) >> 8);
      uint64_t v248 = (unsigned __int8 *)(v243 + (v43 >> 16));
      unsigned __int8 v249 = *(v248 - 1) + ((unsigned __int16)((v61.i16[0] - *(v248 - 1)) * v247 + 127) >> 8);
      *(v248 - 1) = v249 + ((unsigned __int16)((v61.i16[0] - v249) * v247 + 127) >> 8);
      __int16 v250 = ((unsigned __int16)(LOWORD(dword_100408F24[(unsigned __int16)v43 >> 11]) * v246) >> 8);
      *v248 += ((unsigned __int16)((v61.i16[0] - *v248) * v250 + 127) >> 8)
             + ((unsigned __int16)((v61.i16[0]
                                  - (*v248
                                                    + ((unsigned __int16)((v61.i16[0] - *v248) * v250 + 127) >> 8)))
                                 * v250
                                 + 127) >> 8);
      LOWORD(v246) = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v43 >> 11) ^ 0x3F])
                                                        * v246) >> 8);
      v248[1] += ((unsigned __int16)((v61.i16[0] - v248[1]) * v246 + 127) >> 8)
               + ((unsigned __int16)((v61.i16[0]
                                    - (v248[1]
                                                      + ((unsigned __int16)((v61.i16[0] - v248[1]) * v246 + 127) >> 8)))
                                   * v246
                                   + 127) >> 8);
      uint64_t v251 = *a2 + v48;
      *a2 = v251;
      if (v44)
      {
        uint64_t v252 = v243 + v18;
        int v253 = v244 <= 1 ? 1 : 2;
        int v254 = v296[(v253 & (v244 | 2)) + 3];
        int v255 = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v251 >> 11) | 0x20]) * v254) >> 8);
        unint64_t v256 = (unsigned __int8 *)(v252 + (v251 >> 16));
        uint64_t result = *(v256 - 1) + (((v61.i32[0] - *(v256 - 1)) * v255 + 127) >> 8);
        int v257 = ((unsigned __int16)(LOWORD(dword_100408F24[(unsigned __int16)v251 >> 11]) * v254) >> 8);
        unsigned int v258 = *v256 + (((v61.i32[0] - *v256) * v257 + 127) >> 8);
        __int16 v259 = v61.i16[0] - (*v256 + ((unsigned __int16)((v61.i16[0] - *v256) * v257 + 127) >> 8));
        int v260 = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v251 >> 11) ^ 0x3F]) * v254) >> 8);
        unsigned int v261 = v256[1] + (((v61.i32[0] - v256[1]) * v260 + 127) >> 8);
        __int16 v262 = v61.i16[0] - (v256[1] + ((unsigned __int16)((v61.i16[0] - v256[1]) * v260 + 127) >> 8));
        *(v256 - 1) += ((unsigned __int16)((v61.i16[0] - *(v256 - 1)) * v255 + 127) >> 8)
                     + ((unsigned __int16)((v61.i16[0]
                                          - (*(v256 - 1)
                                                            + ((unsigned __int16)((v61.i16[0] - *(v256 - 1)) * v255 + 127) >> 8)))
                                         * v255
                                         + 127) >> 8);
        *unint64_t v256 = v258 + ((unsigned __int16)(v259 * v257 + 127) >> 8);
        v256[1] = v261 + ((unsigned __int16)(v262 * v260 + 127) >> 8);
        uint64_t v263 = *a2 + v48;
        *a2 = v263;
        if (v44 != 1)
        {
          unsigned int v264 = v44 - 2;
          uint64_t v265 = v18 * ((v45 >> 16) + 4) + 2 * ((v8 >> 3) & 0x1FF) + v17 + 3;
          do
          {
            int v266 = v264 | 2;
            uint64_t result = v264 - 1;
            if (v264 <= 1) {
              int v267 = 1;
            }
            else {
              int v267 = 2;
            }
            int v268 = v296[(v267 & v266) + 6];
            unint64_t v269 = (unsigned char *)(v265 + (v263 >> 16));
            unsigned int v270 = (unsigned __int16)v263 >> 11;
            __int16 v271 = ((unsigned __int16)(LOWORD(dword_100408F24[v270 | 0x20]) * v268) >> 8);
            unsigned __int8 v272 = *(v269 - 2) + ((unsigned __int16)((v61.i16[0] - *(v269 - 2)) * v271 + 127) >> 8);
            *(v269 - 2) = v272 + ((unsigned __int16)((v61.i16[0] - v272) * v271 + 127) >> 8);
            __int16 v273 = ((unsigned __int16)(LOWORD(dword_100408F24[v270]) * v268) >> 8);
            *(v269 - 1) += ((unsigned __int16)((v61.i16[0] - *(v269 - 1)) * v273 + 127) >> 8)
                         + ((unsigned __int16)((v61.i16[0]
                                              - (*(v269 - 1)
                                                                + ((unsigned __int16)((v61.i16[0]
                                                                                     - *(v269 - 1))
                                                                                    * v273
                                                                                    + 127) >> 8)))
                                             * v273
                                             + 127) >> 8);
            __int16 v274 = ((unsigned __int16)(LOWORD(dword_100408F24[v270 ^ 0x3F]) * v268) >> 8);
            LOBYTE(v268) = *v269 + ((unsigned __int16)((v61.i16[0] - *v269) * v274 + 127) >> 8);
            *unint64_t v269 = v268 + ((unsigned __int16)((v61.i16[0] - v268) * v274 + 127) >> 8);
            uint64_t v263 = *a2 + v48;
            *a2 = v263;
            v265 += v18;
            unsigned int v264 = result;
          }
          while (result != -1);
        }
      }
    }
  }
  else if ((v44 & 0x80000000) == 0)
  {
    uint64_t v92 = v62 + (v43 >> 16);
    unint64_t v93 = (unsigned char *)(v92 + ((v45 >> 16) - 1) * v18);
    unsigned int v94 = v44 - 1;
    uint64_t v95 = v44 <= 1 ? 1 : 2;
    int v96 = v296[v95 & (v44 | 2)];
    __int16 v97 = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v45 >> 11) | 0x20]) * v96) >> 8);
    unsigned __int8 v98 = *v93 + ((unsigned __int16)((v61.i16[0] - *v93) * v97 + 127) >> 8);
    unsigned char *v93 = v98 + ((unsigned __int16)((v61.i16[0] - v98) * v97 + 127) >> 8);
    unint64_t v99 = &v93[v18];
    __int16 v100 = ((unsigned __int16)(LOWORD(dword_100408F24[(unsigned __int16)v45 >> 11]) * v96) >> 8);
    *v99 += ((unsigned __int16)((v61.i16[0] - *v99) * v100 + 127) >> 8)
          + ((unsigned __int16)((v61.i16[0]
                               - (*v99
                                                 + ((unsigned __int16)((v61.i16[0] - *v99) * v100 + 127) >> 8)))
                              * v100
                              + 127) >> 8);
    LOWORD(v96) = ((unsigned __int16)(LOWORD(dword_100408F24[((unsigned __int16)v45 >> 11) ^ 0x3F])
                                                     * v96) >> 8);
    v99[v18] += ((unsigned __int16)((v61.i16[0] - v99[v18]) * v96 + 127) >> 8)
              + ((unsigned __int16)((v61.i16[0]
                                   - (v99[v18]
                                                     + ((unsigned __int16)((v61.i16[0] - v99[v18])
                                                                         * v96
                                                                         + 127) >> 8)))
                                  * v96
                                  + 127) >> 8);
    uint64_t result = a2[1] + v42;
    a2[1] = result;
    if (v44)
    {
      int v101 = v94 <= 1 ? 1 : 2;
      int v102 = v296[(v101 & (v94 | 2)) + 3];
      uint64_t v103 = (unsigned char *)(v92 + ((result >> 16) - 1) * v18);
      unsigned int v104 = (unsigned __int16)result >> 11;
      __int16 v105 = ((unsigned __int16)(LOWORD(dword_100408F24[v104 | 0x20]) * v102) >> 8);
      __int16 v106 = *++v103;
      unsigned __int8 v107 = v106 + ((unsigned __int16)((v61.i16[0] - v106) * v105 + 127) >> 8);
      *uint64_t v103 = v107 + ((unsigned __int16)((v61.i16[0] - v107) * v105 + 127) >> 8);
      char v108 = &v103[v18];
      int v109 = ((unsigned __int16)(LOWORD(dword_100408F24[v104]) * v102) >> 8);
      uint64_t result = *v108 + (((v61.i32[0] - *v108) * v109 + 127) >> 8);
      *v108 += ((unsigned __int16)((v61.i16[0] - *v108) * v109 + 127) >> 8)
             + ((unsigned __int16)((v61.i16[0]
                                  - (*v108
                                                    + ((unsigned __int16)((v61.i16[0] - *v108) * v109
                                                                        + 127) >> 8)))
                                 * v109
                                 + 127) >> 8);
      LOWORD(v102) = ((unsigned __int16)(LOWORD(dword_100408F24[v104 ^ 0x3F]) * v102) >> 8);
      v108[v18] += ((unsigned __int16)((v61.i16[0] - v108[v18]) * v102 + 127) >> 8)
                 + ((unsigned __int16)((v61.i16[0]
                                      - (v108[v18]
                                                        + ((unsigned __int16)((v61.i16[0] - v108[v18])
                                                                            * v102
                                                                            + 127) >> 8)))
                                     * v102
                                     + 127) >> 8);
      uint64_t v110 = a2[1] + v42;
      a2[1] = v110;
      int v111 = v44 - 1;
      if (v44 != 1)
      {
        uint64_t v112 = 0;
        LODWORD(result) = v44 - 2;
        uint64_t v113 = v92 + 2;
        do
        {
          uint64_t v114 = v110 >> 16;
          uint64_t v115 = v113 + ((v110 >> 16) - 1) * v18;
          int v116 = result | 2;
          BOOL v117 = result != 0;
          uint64_t result = (result - 1);
          if (result != 0 && v117) {
            int v118 = 2;
          }
          else {
            int v118 = 1;
          }
          int v119 = v296[(v118 & v116) + 6];
          unsigned int v120 = (unsigned __int16)v110 >> 11;
          __int16 v121 = ((unsigned __int16)(LOWORD(dword_100408F24[v120 | 0x20]) * v119) >> 8);
          unsigned __int8 v122 = *(unsigned char *)(v115 + v112)
               + ((unsigned __int16)((v61.i16[0] - *(unsigned __int8 *)(v115 + v112)) * v121 + 127) >> 8);
          *(unsigned char *)(v115 + v112) = v122 + ((unsigned __int16)((v61.i16[0] - v122) * v121 + 127) >> 8);
          uint64_t v123 = v18 * v114;
          uint64_t v124 = v113 + v18 * v114;
          __int16 v125 = ((unsigned __int16)(LOWORD(dword_100408F24[v120]) * v119) >> 8);
          *(unsigned char *)(v124 + v112) += ((unsigned __int16)((v61.i16[0] - *(unsigned __int8 *)(v124 + v112)) * v125 + 127) >> 8)
                                   + ((unsigned __int16)((v61.i16[0]
                                                        - (*(unsigned char *)(v124 + v112)
                                                                          + ((unsigned __int16)((v61.i16[0]
                                                                                               - *(unsigned __int8 *)(v124 + v112))
                                                                                              * v125
                                                                                              + 127) >> 8)))
                                                       * v125
                                                       + 127) >> 8);
          uint64_t v126 = v113 + v18 + v123;
          LOWORD(v124) = ((unsigned __int16)(LOWORD(dword_100408F24[v120 ^ 0x3F]) * v119) >> 8);
          *(unsigned char *)(v126 + v112) += ((unsigned __int16)((v61.i16[0] - *(unsigned __int8 *)(v126 + v112)) * v124 + 127) >> 8)
                                   + ((unsigned __int16)((v61.i16[0]
                                                        - (*(unsigned char *)(v126 + v112)
                                                                          + ((unsigned __int16)((v61.i16[0]
                                                                                               - *(unsigned __int8 *)(v126 + v112))
                                                                                              * v124
                                                                                              + 127) >> 8)))
                                                       * v124
                                                       + 127) >> 8);
          uint64_t v110 = a2[1] + v42;
          a2[1] = v110;
          ++v112;
        }
        while (v111 != v112);
      }
    }
  }
  return result;
}

void sub_10032C1DC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_10032C784(long long *a1, int *a2, long long *a3)
{
  int v3 = *a2;
  BOOL v4 = *a2 < *(_DWORD *)a1;
  if (*a2 == *(_DWORD *)a1)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *((void *)a1 + 1);
    BOOL v4 = v5 < v6;
    if (v5 == v6) {
      BOOL v4 = *((void *)a2 + 2) < *((void *)a1 + 2);
    }
  }
  if (v4)
  {
    BOOL v7 = *(_DWORD *)a3 < v3;
    if (*(_DWORD *)a3 == v3 && (v8 = *((void *)a3 + 1), v9 = *((void *)a2 + 1), BOOL v7 = v8 < v9, v8 == v9))
    {
      if (*((void *)a3 + 2) >= *((void *)a2 + 2)) {
        goto LABEL_9;
      }
    }
    else if (!v7)
    {
LABEL_9:
      long long v11 = *a1;
      long long v10 = a1[1];
      long long v12 = *((_OWORD *)a2 + 1);
      *a1 = *(_OWORD *)a2;
      a1[1] = v12;
      *(_OWORD *)a2 = v11;
      *((_OWORD *)a2 + 1) = v10;
      if (*(_DWORD *)a3 == *a2)
      {
        uint64_t v13 = *((void *)a3 + 1);
        uint64_t v14 = *((void *)a2 + 1);
        if (v13 == v14)
        {
          if (*((void *)a3 + 2) >= *((void *)a2 + 2)) {
            return 1;
          }
        }
        else if (v13 >= v14)
        {
          return 1;
        }
      }
      else if (*(_DWORD *)a3 >= *a2)
      {
        return 1;
      }
      long long v28 = *(_OWORD *)a2;
      long long v27 = *((_OWORD *)a2 + 1);
      long long v29 = a3[1];
      *(_OWORD *)a2 = *a3;
      *((_OWORD *)a2 + 1) = v29;
      *a3 = v28;
      a3[1] = v27;
      return 2;
    }
    long long v20 = *a1;
    long long v19 = a1[1];
    long long v21 = a3[1];
    *a1 = *a3;
    a1[1] = v21;
    *a3 = v20;
    a3[1] = v19;
    return 1;
  }
  BOOL v15 = *(_DWORD *)a3 < v3;
  if (*(_DWORD *)a3 == v3 && (v16 = *((void *)a3 + 1), uint64_t v17 = *((void *)a2 + 1), v15 = v16 < v17, v16 == v17))
  {
    if (*((void *)a3 + 2) >= *((void *)a2 + 2)) {
      return 0;
    }
  }
  else if (!v15)
  {
    return 0;
  }
  long long v23 = *(_OWORD *)a2;
  long long v22 = *((_OWORD *)a2 + 1);
  long long v24 = a3[1];
  *(_OWORD *)a2 = *a3;
  *((_OWORD *)a2 + 1) = v24;
  *a3 = v23;
  a3[1] = v22;
  if (*a2 != *(_DWORD *)a1)
  {
    if (*a2 >= *(_DWORD *)a1) {
      return 1;
    }
    goto LABEL_33;
  }
  uint64_t v25 = *((void *)a2 + 1);
  uint64_t v26 = *((void *)a1 + 1);
  if (v25 == v26)
  {
    if (*((void *)a2 + 2) >= *((void *)a1 + 2)) {
      return 1;
    }
    goto LABEL_33;
  }
  if (v25 < v26)
  {
LABEL_33:
    long long v31 = *a1;
    long long v30 = a1[1];
    long long v32 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v32;
    *(_OWORD *)a2 = v31;
    *((_OWORD *)a2 + 1) = v30;
    return 2;
  }
  return 1;
}

long long *sub_10032C93C(long long *a1, unint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  int v5 = *(_DWORD *)(a2 - 32);
  int v6 = *(void *)a1;
  BOOL v7 = v6 < v5;
  if (v6 == v5)
  {
    uint64_t v8 = *(void *)(a2 - 24);
    BOOL v7 = v3 < v8;
    if (v3 == v8) {
      BOOL v7 = v4 < *(void *)(a2 - 16);
    }
  }
  if (v7)
  {
    uint64_t i = a1 + 2;
    int v10 = *((_DWORD *)a1 + 8);
    BOOL v11 = v6 < v10;
    if (v6 != v10) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v12 = *((void *)i + 1);
    BOOL v11 = v3 < v12;
    if (v3 == v12) {
      BOOL v11 = v4 < *((void *)i + 2);
    }
LABEL_9:
    while (!v11)
    {
      int v13 = *((_DWORD *)i + 8);
      i += 2;
      BOOL v11 = v6 < v13;
      if (v6 == v13) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    for (uint64_t i = a1 + 2; (unint64_t)i < a2; i += 2)
    {
      BOOL v14 = v6 < *(_DWORD *)i;
      if (v6 == *(_DWORD *)i)
      {
        uint64_t v15 = *((void *)i + 1);
        BOOL v14 = v3 < v15;
        if (v3 == v15) {
          BOOL v14 = v4 < *((void *)i + 2);
        }
      }
      if (v14) {
        break;
      }
    }
  }
  if ((unint64_t)i < a2)
  {
    a2 -= 32;
    BOOL v16 = v6 < v5;
    if (v6 != v5) {
      goto LABEL_22;
    }
LABEL_20:
    uint64_t v17 = *(void *)(a2 + 8);
    BOOL v16 = v3 < v17;
    if (v3 == v17) {
      BOOL v16 = v4 < *(void *)(a2 + 16);
    }
LABEL_22:
    while (v16)
    {
      int v18 = *(_DWORD *)(a2 - 32);
      a2 -= 32;
      BOOL v16 = v6 < v18;
      if (v6 == v18) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v19 = *((void *)a1 + 3);
LABEL_27:
  while ((unint64_t)i < a2)
  {
    long long v29 = *i;
    long long v30 = i[1];
    long long v20 = *(_OWORD *)(a2 + 16);
    long long *i = *(_OWORD *)a2;
    i[1] = v20;
    *(_OWORD *)a2 = v29;
    *(_OWORD *)(a2 + 16) = v30;
    do
    {
      while (1)
      {
        while (1)
        {
          int v21 = *((_DWORD *)i + 8);
          i += 2;
          BOOL v22 = v6 < v21;
          if (v6 == v21) {
            break;
          }
          if (v22) {
            goto LABEL_38;
          }
        }
        uint64_t v23 = *((void *)i + 1);
        if (v3 != v23) {
          break;
        }
        if (v4 < *((void *)i + 2)) {
          goto LABEL_38;
        }
      }
    }
    while (v3 >= v23);
    do
    {
      while (1)
      {
LABEL_38:
        while (1)
        {
          int v24 = *(_DWORD *)(a2 - 32);
          a2 -= 32;
          BOOL v25 = v6 < v24;
          if (v6 == v24) {
            break;
          }
          if (!v25) {
            goto LABEL_27;
          }
        }
        uint64_t v26 = *(void *)(a2 + 8);
        if (v3 != v26) {
          break;
        }
        if (v4 >= *(void *)(a2 + 16)) {
          goto LABEL_27;
        }
      }
    }
    while (v3 < v26);
  }
  if (i - 2 != a1)
  {
    long long v27 = *(i - 1);
    *a1 = *(i - 2);
    a1[1] = v27;
  }
  *((void *)i - 4) = v2;
  *((void *)i - 3) = v3;
  *((void *)i - 2) = v4;
  *((void *)i - 1) = v19;
  return i;
}

unint64_t sub_10032CADC(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  int v7 = *a1;
  uint64_t v8 = a1;
  int v9 = *((_DWORD *)a1 + 8);
  BOOL v10 = v9 < v7;
  if (v9 != v7) {
    goto LABEL_4;
  }
LABEL_2:
  uint64_t v11 = v8[5];
  BOOL v10 = v11 < v4;
  if (v11 == v4) {
    BOOL v10 = a1[v2 + 6] < v5;
  }
LABEL_4:
  while (v10)
  {
    v2 += 4;
    uint64_t v8 = &a1[v2];
    int v12 = a1[v2 + 4];
    BOOL v10 = v12 < v7;
    if (v12 == v7) {
      goto LABEL_2;
    }
  }
  unint64_t v13 = (unint64_t)&a1[v2 + 4];
  if (v2 * 8)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          int v14 = *(_DWORD *)(a2 - 32);
          a2 -= 32;
          BOOL v15 = v14 < v7;
          if (v14 == v7) {
            break;
          }
          if (v15) {
            goto LABEL_17;
          }
        }
        uint64_t v16 = *(void *)(a2 + 8);
        if (v16 != v4) {
          break;
        }
        if (*(void *)(a2 + 16) < v5) {
          goto LABEL_17;
        }
      }
    }
    while (v16 >= v4);
  }
  else if (v13 < a2)
  {
    do
    {
      int v27 = *(_DWORD *)(a2 - 32);
      a2 -= 32;
      BOOL v28 = v27 < v7;
      if (v27 == v7)
      {
        uint64_t v29 = *(void *)(a2 + 8);
        BOOL v28 = v29 < v4;
        if (v29 == v4) {
          BOOL v28 = *(void *)(a2 + 16) < v5;
        }
      }
    }
    while (!v28 && v13 < a2);
  }
LABEL_17:
  unint64_t v17 = v13;
  if (v13 < a2)
  {
    unint64_t v18 = a2;
    do
    {
      long long v32 = *(_OWORD *)v17;
      long long v33 = *(_OWORD *)(v17 + 16);
      long long v19 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v19;
      *(_OWORD *)unint64_t v18 = v32;
      *(_OWORD *)(v18 + 16) = v33;
      do
      {
        while (1)
        {
          while (1)
          {
            int v20 = *(_DWORD *)(v17 + 32);
            v17 += 32;
            BOOL v21 = v20 < v7;
            if (v20 == v7) {
              break;
            }
            if (!v21) {
              goto LABEL_30;
            }
          }
          uint64_t v22 = *(void *)(v17 + 8);
          if (v22 != v4) {
            break;
          }
          if (*(void *)(v17 + 16) >= v5) {
            goto LABEL_30;
          }
        }
      }
      while (v22 < v4);
      do
      {
        while (1)
        {
LABEL_30:
          while (1)
          {
            int v23 = *(_DWORD *)(v18 - 32);
            v18 -= 32;
            BOOL v24 = v23 < v7;
            if (v23 == v7) {
              break;
            }
            if (v24) {
              goto LABEL_19;
            }
          }
          uint64_t v25 = *(void *)(v18 + 8);
          if (v25 != v4) {
            break;
          }
          if (*(void *)(v18 + 16) < v5) {
            goto LABEL_19;
          }
        }
      }
      while (v25 >= v4);
LABEL_19:
      ;
    }
    while (v17 < v18);
  }
  if ((uint64_t *)(v17 - 32) != a1)
  {
    long long v30 = *(_OWORD *)(v17 - 16);
    *(_OWORD *)a1 = *(_OWORD *)(v17 - 32);
    *((_OWORD *)a1 + 1) = v30;
  }
  *(void *)(v17 - 32) = v3;
  *(void *)(v17 - 24) = v4;
  *(void *)(v17 - 16) = v5;
  *(void *)(v17 - 8) = v6;
  return v17 - 32;
}

BOOL sub_10032CC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v23 = (_OWORD *)(a2 - 32);
      int v24 = *(_DWORD *)(a2 - 32);
      BOOL v25 = v24 < *(_DWORD *)a1;
      if (v24 == *(_DWORD *)a1 && (uint64_t v26 = *(void *)(a2 - 24), v27 = *(void *)(a1 + 8), v25 = v26 < v27, v26 == v27))
      {
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 16)) {
          return result;
        }
      }
      else if (!v25)
      {
        return result;
      }
      long long v29 = *(_OWORD *)a1;
      long long v28 = *(_OWORD *)(a1 + 16);
      long long v30 = *(_OWORD *)(a2 - 16);
      *(_OWORD *)a1 = *v23;
      *(_OWORD *)(a1 + 16) = v30;
      *int v23 = v29;
      *(_OWORD *)(a2 - 16) = v28;
      return result;
    case 3:
      sub_10032C784((long long *)a1, (int *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_10032CF3C(a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a2 - 32));
      return 1;
    case 5:
      sub_10032D05C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      uint64_t v6 = a1 + 64;
      sub_10032C784((long long *)a1, (int *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v7 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    int v11 = *(_DWORD *)v7;
    if (*(_DWORD *)v7 == *(_DWORD *)v6)
    {
      uint64_t v12 = *(void *)(v7 + 8);
      uint64_t v13 = *(void *)(v6 + 8);
      if (v12 == v13)
      {
        if (*(void *)(v7 + 16) >= *(void *)(v6 + 16)) {
          goto LABEL_6;
        }
      }
      else if (v12 >= v13)
      {
        goto LABEL_6;
      }
    }
    else
    {
      if (v11 >= *(_DWORD *)v6) {
        goto LABEL_6;
      }
      uint64_t v12 = *(void *)(v7 + 8);
    }
    int v14 = *(_DWORD *)(v7 + 4);
    uint64_t v16 = *(void *)(v7 + 16);
    uint64_t v15 = *(void *)(v7 + 24);
    long long v17 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = v17;
    uint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_5;
    }
    uint64_t v18 = v8;
    while (1)
    {
      int v20 = *(_DWORD *)(a1 + v18 + 32);
      BOOL v21 = v11 < v20;
      if (v11 == v20)
      {
        uint64_t v22 = *(void *)(a1 + v18 + 40);
        BOOL v21 = v12 < v22;
        if (v12 == v22) {
          break;
        }
      }
      if (!v21)
      {
        uint64_t v10 = v6;
        goto LABEL_5;
      }
LABEL_18:
      v6 -= 32;
      long long v19 = *(_OWORD *)(a1 + v18 + 48);
      *(_OWORD *)(a1 + v18 + 64) = *(_OWORD *)(a1 + v18 + 32);
      *(_OWORD *)(a1 + v18 + 80) = v19;
      v18 -= 32;
      if (v18 == -64)
      {
        uint64_t v10 = a1;
        goto LABEL_5;
      }
    }
    if (v16 < *(void *)(a1 + v18 + 48)) {
      goto LABEL_18;
    }
    uint64_t v10 = a1 + v18 + 64;
LABEL_5:
    *(_DWORD *)uint64_t v10 = v11;
    *(_DWORD *)(v10 + 4) = v14;
    *(void *)(v10 + 8) = v12;
    *(void *)(v10 + 16) = v16;
    ++v9;
    *(void *)(v10 + 24) = v15;
    if (v9 == 8) {
      return v7 + 32 == a2;
    }
LABEL_6:
    uint64_t v6 = v7;
    v8 += 32;
    v7 += 32;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 sub_10032CF3C(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  sub_10032C784((long long *)a1, (int *)a2, a3);
  BOOL v9 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3
    && (v10 = *((void *)a4 + 1), v11 = *((void *)a3 + 1), BOOL v9 = v10 < v11, v10 == v11))
  {
    if (*((void *)a4 + 2) >= *((void *)a3 + 2)) {
      return result;
    }
  }
  else if (!v9)
  {
    return result;
  }
  long long v12 = *a3;
  __n128 result = (__n128)a3[1];
  long long v13 = a4[1];
  *a3 = *a4;
  a3[1] = v13;
  *a4 = v12;
  a4[1] = (__int128)result;
  BOOL v14 = *(_DWORD *)a3 < *(_DWORD *)a2;
  if (*(_DWORD *)a3 == *(_DWORD *)a2)
  {
    uint64_t v15 = *((void *)a3 + 1);
    uint64_t v16 = *((void *)a2 + 1);
    BOOL v14 = v15 < v16;
    if (v15 == v16) {
      BOOL v14 = *((void *)a3 + 2) < *((void *)a2 + 2);
    }
  }
  if (v14)
  {
    long long v17 = *a2;
    __n128 result = (__n128)a2[1];
    long long v18 = a3[1];
    *a2 = *a3;
    a2[1] = v18;
    *a3 = v17;
    a3[1] = (__int128)result;
    BOOL v19 = *(_DWORD *)a2 < *(_DWORD *)a1;
    if (*(_DWORD *)a2 == *(_DWORD *)a1)
    {
      uint64_t v20 = *((void *)a2 + 1);
      uint64_t v21 = *(void *)(a1 + 8);
      BOOL v19 = v20 < v21;
      if (v20 == v21) {
        BOOL v19 = *((void *)a2 + 2) < *(void *)(a1 + 16);
      }
    }
    if (v19)
    {
      long long v22 = *(_OWORD *)a1;
      __n128 result = *(__n128 *)(a1 + 16);
      long long v23 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v23;
      *a2 = v22;
      a2[1] = (__int128)result;
    }
  }
  return result;
}

__n128 sub_10032D05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_10032CF3C(a1, (long long *)a2, (long long *)a3, (long long *)a4).n128_u64[0];
  BOOL v11 = *(_DWORD *)a5 < *(_DWORD *)a4;
  if (*(_DWORD *)a5 == *(_DWORD *)a4
    && (v12 = *(void *)(a5 + 8), v13 = *(void *)(a4 + 8), BOOL v11 = v12 < v13, v12 == v13))
  {
    if (*(void *)(a5 + 16) >= *(void *)(a4 + 16)) {
      return result;
    }
  }
  else if (!v11)
  {
    return result;
  }
  long long v14 = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v15 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)(a4 + 16) = v15;
  *(_OWORD *)a5 = v14;
  *(__n128 *)(a5 + 16) = result;
  BOOL v16 = *(_DWORD *)a4 < *(_DWORD *)a3;
  if (*(_DWORD *)a4 == *(_DWORD *)a3)
  {
    uint64_t v17 = *(void *)(a4 + 8);
    uint64_t v18 = *(void *)(a3 + 8);
    BOOL v16 = v17 < v18;
    if (v17 == v18) {
      BOOL v16 = *(void *)(a4 + 16) < *(void *)(a3 + 16);
    }
  }
  if (v16)
  {
    long long v19 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 16);
    long long v20 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v20;
    *(_OWORD *)a4 = v19;
    *(__n128 *)(a4 + 16) = result;
    BOOL v21 = *(_DWORD *)a3 < *(_DWORD *)a2;
    if (*(_DWORD *)a3 == *(_DWORD *)a2)
    {
      uint64_t v22 = *(void *)(a3 + 8);
      uint64_t v23 = *(void *)(a2 + 8);
      BOOL v21 = v22 < v23;
      if (v22 == v23) {
        BOOL v21 = *(void *)(a3 + 16) < *(void *)(a2 + 16);
      }
    }
    if (v21)
    {
      long long v24 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)(a2 + 16);
      long long v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v25;
      *(_OWORD *)a3 = v24;
      *(__n128 *)(a3 + 16) = result;
      BOOL v26 = *(_DWORD *)a2 < *(_DWORD *)a1;
      if (*(_DWORD *)a2 == *(_DWORD *)a1)
      {
        uint64_t v27 = *(void *)(a2 + 8);
        uint64_t v28 = *(void *)(a1 + 8);
        BOOL v26 = v27 < v28;
        if (v27 == v28) {
          BOOL v26 = *(void *)(a2 + 16) < *(void *)(a1 + 16);
        }
      }
      if (v26)
      {
        long long v29 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        long long v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v30;
        *(_OWORD *)a2 = v29;
        *(__n128 *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

uint64_t sub_10032D1CC(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = result + 32 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = *(_DWORD *)(v8 + 32);
        BOOL v11 = *(_DWORD *)v8 < v10;
        if (*(_DWORD *)v8 == v10)
        {
          uint64_t v12 = result + 32 * v7;
          uint64_t v13 = *(void *)(v12 + 8);
          uint64_t v14 = *(void *)(v8 + 40);
          BOOL v11 = v13 < v14;
          if (v13 == v14) {
            BOOL v11 = *(void *)(v12 + 16) < *(void *)(v8 + 48);
          }
        }
        if (v11)
        {
          v8 += 32;
          uint64_t v7 = v9;
        }
      }
      int v15 = *a4;
      if (*(_DWORD *)v8 == *a4)
      {
        uint64_t v16 = *(void *)(v8 + 8);
        uint64_t v17 = *((void *)a4 + 1);
        if (v16 == v17)
        {
          uint64_t v17 = *(void *)(v8 + 8);
          if (*(void *)(v8 + 16) < *((void *)a4 + 2)) {
            return result;
          }
        }
        else if (v16 < v17)
        {
          return result;
        }
      }
      else
      {
        if (*(_DWORD *)v8 < v15) {
          return result;
        }
        uint64_t v17 = *((void *)a4 + 1);
      }
      int v18 = a4[1];
      uint64_t v19 = *((void *)a4 + 2);
      uint64_t v20 = *((void *)a4 + 3);
      long long v21 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a4 = *(_OWORD *)v8;
      *((_OWORD *)a4 + 1) = v21;
      if (v5 < v7)
      {
LABEL_31:
        *(_DWORD *)uint64_t v8 = v15;
        *(_DWORD *)(v8 + 4) = v18;
        *(void *)(v8 + 8) = v17;
        *(void *)(v8 + 16) = v19;
        *(void *)(v8 + 24) = v20;
      }
      else
      {
        while (1)
        {
          uint64_t v22 = v8;
          uint64_t v23 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = result + 32 * v7;
          uint64_t v24 = v23 + 2;
          if (v24 < a3)
          {
            int v25 = *(_DWORD *)(v8 + 32);
            BOOL v26 = *(_DWORD *)v8 < v25;
            if (*(_DWORD *)v8 == v25)
            {
              uint64_t v27 = result + 32 * v7;
              uint64_t v28 = *(void *)(v27 + 8);
              uint64_t v29 = *(void *)(v8 + 40);
              BOOL v26 = v28 < v29;
              if (v28 == v29) {
                BOOL v26 = *(void *)(v27 + 16) < *(void *)(v8 + 48);
              }
            }
            if (v26)
            {
              v8 += 32;
              uint64_t v7 = v24;
            }
          }
          BOOL v30 = *(_DWORD *)v8 < v15;
          if (*(_DWORD *)v8 == v15)
          {
            uint64_t v31 = *(void *)(v8 + 8);
            BOOL v30 = v31 < v17;
            if (v31 == v17) {
              BOOL v30 = *(void *)(v8 + 16) < v19;
            }
          }
          if (v30) {
            break;
          }
          long long v32 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v8;
          *(_OWORD *)(v22 + 16) = v32;
          if (v5 < v7) {
            goto LABEL_31;
          }
        }
        *(_DWORD *)uint64_t v22 = v15;
        *(_DWORD *)(v22 + 4) = v18;
        *(void *)(v22 + 8) = v17;
        *(void *)(v22 + 16) = v19;
        *(void *)(v22 + 24) = v20;
      }
    }
  }
  return result;
}

_OWORD *sub_10032D358(_OWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    long long v34 = *result;
    long long v35 = result[1];
    int64_t v5 = result;
    do
    {
      uint64_t v7 = v5;
      uint64_t v8 = v4 + 1;
      v5 += 2 * v4 + 2;
      uint64_t v9 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v10 = v9 + 2;
      if (v10 < a4)
      {
        int v11 = *((_DWORD *)v5 + 8);
        BOOL v12 = *(_DWORD *)v5 < v11;
        if (*(_DWORD *)v5 == v11)
        {
          uint64_t v13 = &v7[2 * v8];
          uint64_t v14 = *((void *)v13 + 1);
          uint64_t v15 = *((void *)v5 + 5);
          BOOL v12 = v14 < v15;
          if (v14 == v15) {
            BOOL v12 = *((void *)v13 + 2) < *((void *)v5 + 6);
          }
        }
        if (v12)
        {
          v5 += 2;
          uint64_t v4 = v10;
        }
      }
      long long v6 = v5[1];
      *uint64_t v7 = *v5;
      v7[1] = v6;
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    uint64_t v16 = (_OWORD *)(a2 - 32);
    if (v5 == (_OWORD *)(a2 - 32))
    {
      *int64_t v5 = v34;
      v5[1] = v35;
      return result;
    }
    long long v17 = *(_OWORD *)(a2 - 16);
    *int64_t v5 = *v16;
    v5[1] = v17;
    _OWORD *v16 = v34;
    *(_OWORD *)(a2 - 16) = v35;
    uint64_t v18 = (char *)v5 - (char *)result + 32;
    if (v18 < 33) {
      return result;
    }
    unint64_t v19 = ((unint64_t)v18 >> 5) - 2;
    unint64_t v20 = v19 >> 1;
    long long v21 = &result[2 * (v19 >> 1)];
    int v22 = *(_DWORD *)v5;
    if (*(_DWORD *)v21 == *(_DWORD *)v5)
    {
      uint64_t v23 = *((void *)v21 + 1);
      uint64_t v24 = *((void *)v5 + 1);
      if (v23 == v24)
      {
        uint64_t v24 = *((void *)v21 + 1);
        if (*(void *)&result[2 * v20 + 1] >= *((void *)v5 + 2)) {
          return result;
        }
      }
      else if (v23 >= v24)
      {
        return result;
      }
    }
    else
    {
      if (*(_DWORD *)v21 >= v22) {
        return result;
      }
      uint64_t v24 = *((void *)v5 + 1);
    }
    int v25 = *((_DWORD *)v5 + 1);
    uint64_t v26 = *((void *)v5 + 2);
    uint64_t v27 = *((void *)v5 + 3);
    long long v28 = v21[1];
    *int64_t v5 = *v21;
    v5[1] = v28;
    if (v19 >= 2)
    {
      while (1)
      {
        unint64_t v30 = v20 - 1;
        unint64_t v20 = (v20 - 1) >> 1;
        uint64_t v29 = &result[2 * v20];
        BOOL v31 = *(_DWORD *)v29 < v22;
        if (*(_DWORD *)v29 == v22)
        {
          uint64_t v32 = *((void *)v29 + 1);
          BOOL v31 = v32 < v24;
          if (v32 == v24) {
            BOOL v31 = *(void *)&result[2 * v20 + 1] < v26;
          }
        }
        if (!v31) {
          break;
        }
        long long v33 = v29[1];
        *long long v21 = *v29;
        v21[1] = v33;
        long long v21 = &result[2 * v20];
        if (v30 <= 1) {
          goto LABEL_29;
        }
      }
    }
    uint64_t v29 = v21;
LABEL_29:
    *(_DWORD *)uint64_t v29 = v22;
    *((_DWORD *)v29 + 1) = v25;
    *((void *)v29 + 1) = v24;
    *((void *)v29 + 2) = v26;
    *((void *)v29 + 3) = v27;
  }
  return result;
}

double sub_10032D504(void *a1)
{
  *a1 = off_100499AA8;
  double result = NAN;
  a1[1] = -1;
  return result;
}

double sub_10032D534(void *a1)
{
  *a1 = off_100499AD0;
  double result = NAN;
  a1[1] = -1;
  return result;
}

uint64_t sub_10032D568(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_10032D5D4(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_10032D640(uint64_t a1, long long *a2, long long *a3, long long *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, double *a10)
{
  *(void *)a1 = off_100499B00;
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 40) = -1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0x100000001;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  sub_10032D7CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_10032D710(_Unwind_Exception *a1)
{
  sub_10032DE20((uint64_t)(v1 + 36));
  sub_10032D568((uint64_t)(v1 + 34));
  sub_10032D5D4((uint64_t)(v1 + 32));
  int64_t v5 = (void *)v1[29];
  if (v5)
  {
    v1[30] = v5;
    operator delete(v5);
    long long v6 = (void *)v1[23];
    if (!v6)
    {
LABEL_3:
      uint64_t v7 = (void *)v1[20];
      if (!v7) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    long long v6 = (void *)v1[23];
    if (!v6) {
      goto LABEL_3;
    }
  }
  v1[24] = v6;
  operator delete(v6);
  uint64_t v7 = (void *)v1[20];
  if (!v7)
  {
LABEL_4:
    uint64_t v8 = (void *)v1[17];
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  v1[21] = v7;
  operator delete(v7);
  uint64_t v8 = (void *)v1[17];
  if (!v8)
  {
LABEL_5:
    uint64_t v9 = *v3;
    if (!*v3) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  v1[18] = v8;
  operator delete(v8);
  uint64_t v9 = *v3;
  if (!*v3)
  {
LABEL_6:
    uint64_t v10 = *v2;
    if (!*v2) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  v1[15] = v9;
  operator delete(v9);
  uint64_t v10 = *v2;
  if (!*v2) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_13:
  v1[11] = v10;
  operator delete(v10);
  _Unwind_Resume(a1);
}

double sub_10032D7CC(uint64_t a1, long long *a2, long long *a3, long long *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, double *a10)
{
  *(_DWORD *)(a1 + 8) = a5 & 0xFFF;
  *(_DWORD *)(a1 + 12) = a6 & 0xFFF;
  *(_DWORD *)(a1 + 16) = a7 & 0xFFF;
  long long v15 = *a2;
  if (*(void *)a2) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)a2 + 8), 1u);
  }
  uint64_t v16 = *(atomic_uint **)(a1 + 256);
  *(_OWORD *)(a1 + 256) = v15;
  if (v16 && atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
  }
  long long v17 = *a3;
  if (*(void *)a3) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)a3 + 8), 1u);
  }
  uint64_t v18 = *(atomic_uint **)(a1 + 272);
  *(_OWORD *)(a1 + 272) = v17;
  if (v18 && atomic_fetch_add(v18 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v18 + 16))(v18);
  }
  long long v19 = *a4;
  if (*(void *)a4) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)a4 + 8), 1u);
  }
  unint64_t v20 = *(atomic_uint **)(a1 + 288);
  *(_OWORD *)(a1 + 288) = v19;
  if (v20 && atomic_fetch_add(v20 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v20 + 16))(v20);
  }
  int v21 = a9;
  if (a9 < 0) {
    int v21 = a8;
  }
  *(_DWORD *)(a1 + 72) = a8;
  *(_DWORD *)(a1 + 76) = v21;
  if (v21 == 3)
  {
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    qmemcpy((void *)sub_1002D19D8(&v64, 31), "columnBorderType != BORDER_WRAP", 31);
    sub_1002D2278(-215, &v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 127);
  }
  int v22 = *(_DWORD **)(a1 + 264);
  if (v22)
  {
    if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a1 + 8))
    {
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      uint64_t v23 = sub_1002D19D8(&v64, 18);
      *(_WORD *)(v23 + 16) = 25968;
      *(_OWORD *)uint64_t v23 = *(_OWORD *)"bufType == srcType";
      sub_1002D2278(-215, &v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 137);
    }
    LODWORD(v24) = v22[2];
    *(_DWORD *)(a1 + 20) = v24;
    int v25 = v22[3];
    *(_DWORD *)(a1 + 24) = v25;
    int v26 = v22[4];
    *(_DWORD *)(a1 + 28) = v26;
    int v27 = v22[5];
    *(_DWORD *)(a1 + 32) = v27;
    if (v26 < 0) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 280);
    if (!v28 || (uint64_t v29 = *(void *)(a1 + 296)) == 0)
    {
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      qmemcpy((void *)sub_1002D19D8(&v64, 25), "rowFilter && columnFilter", 25);
      sub_1002D2278(-215, &v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 131);
    }
    LODWORD(v24) = *(_DWORD *)(v28 + 8);
    int v25 = *(_DWORD *)(v29 + 8);
    *(_DWORD *)(a1 + 20) = v24;
    *(_DWORD *)(a1 + 24) = v25;
    int v26 = *(_DWORD *)(v28 + 12);
    int v27 = *(_DWORD *)(v29 + 12);
    *(_DWORD *)(a1 + 28) = v26;
    *(_DWORD *)(a1 + 32) = v27;
    if (v26 < 0)
    {
LABEL_32:
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      qmemcpy((void *)sub_1002D19D8(&v64, 83), "0 <= anchor.x && anchor.x < ksize.width && 0 <= anchor.y && anchor.y < ksize.height", 83);
      sub_1002D2278(-215, &v64, "init", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 143);
    }
  }
  if (v26 >= (int)v24 || v27 < 0 || v27 >= v25) {
    goto LABEL_32;
  }
  uint64_t v30 = (((a5 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a5 & 7))) & 3);
  uint64_t v31 = *(void *)(a1 + 80);
  uint64_t v32 = v30 >> ((*(_DWORD *)(a1 + 8) >> 1) & 2);
  *(_DWORD *)(a1 + 104) = v32;
  if ((int)v24 <= 2) {
    uint64_t v24 = 2;
  }
  else {
    uint64_t v24 = v24;
  }
  uint64_t v33 = v24 - 1;
  unint64_t v34 = (v24 - 1) * v32;
  unint64_t v35 = (*(void *)(a1 + 88) - v31) >> 2;
  if (v34 <= v35)
  {
    if (v34 < v35) {
      *(void *)(a1 + 88) = v31 + 4 * v34;
    }
  }
  else
  {
    sub_10025FCA8(a1 + 80, v34 - v35);
  }
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(void *)(a1 + 192) = *(void *)(a1 + 184);
  if (!*(_DWORD *)(a1 + 72) || !*(_DWORD *)(a1 + 76))
  {
    unint64_t v36 = v33 * v30;
    uint64_t v38 = *(char **)(a1 + 160);
    uint64_t v37 = *(char **)(a1 + 168);
    unint64_t v39 = v37 - v38;
    size_t v40 = v36 - (v37 - v38);
    if (v36 <= v37 - v38)
    {
      if (v36 < v37 - v38) {
        *(void *)(a1 + 168) = &v38[v36];
      }
      goto LABEL_72;
    }
    uint64_t v41 = *(void *)(a1 + 176);
    if (v41 - (uint64_t)v37 >= v40)
    {
      bzero(*(void **)(a1 + 168), v36 - (v37 - v38));
      *(void *)(a1 + 168) = &v38[v36];
      goto LABEL_72;
    }
    unint64_t v42 = v41 - (void)v38;
    uint64_t v43 = 2 * v42;
    if (2 * v42 <= v36) {
      uint64_t v43 = v36;
    }
    if (v42 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v44 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v44 = v43;
    }
    long long v45 = operator new(v44);
    uint64_t v46 = (char *)v45 + v44;
    uint64_t v63 = (char *)v45 + v36;
    uint64_t v47 = (char *)v45 + v39;
    bzero((char *)v45 + v39, v40);
    if (v37 == v38)
    {
      *(void *)(a1 + 160) = v47;
      *(void *)(a1 + 168) = v63;
      *(void *)(a1 + 176) = v46;
      if (!v37) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
    if (v39 < 8 || (unint64_t)(v38 - (unsigned char *)v45) < 0x20) {
      goto LABEL_68;
    }
    if (v39 >= 0x20)
    {
      unint64_t v48 = v39 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v49 = v37 - 16;
      int v50 = (char *)v45 + v37 - 16 - v38;
      unint64_t v51 = v39 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v52 = *(_OWORD *)v49;
        *((_OWORD *)v50 - 1) = *((_OWORD *)v49 - 1);
        *(_OWORD *)int v50 = v52;
        v50 -= 32;
        v49 -= 32;
        v51 -= 32;
      }
      while (v51);
      if (v39 == v48)
      {
LABEL_70:
        uint64_t v37 = v38;
        *(void *)(a1 + 160) = v45;
        *(void *)(a1 + 168) = v63;
        *(void *)(a1 + 176) = v46;
        if (v38) {
LABEL_71:
        }
          operator delete(v37);
LABEL_72:
        unsigned int v59 = *(_DWORD *)(a1 + 8);
        int v60 = (v59 >> 3) & 0x1FF;
        if (((v59 >> 3) & 0x1FC) != 0) {
          int v61 = 24;
        }
        else {
          int v61 = 8 * v60;
        }
        sub_100298DD4(a10, *(void *)(a1 + 160), v61 & 0xFFFFFFF8 | *(_DWORD *)(a1 + 8) & 7, v33 + v33 * v60);
        goto LABEL_76;
      }
      if ((v39 & 0x18) == 0)
      {
        v47 -= v48;
        v37 -= v48;
        goto LABEL_68;
      }
    }
    else
    {
      unint64_t v48 = 0;
    }
    v47 -= v39 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v53 = &v37[-v48 - 8];
    uint64_t v54 = (char *)(v53 - v38);
    unint64_t v55 = v48 - (v39 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v56 = *(void *)v53;
      v53 -= 8;
      *(void *)&v54[(void)v45] = v56;
      v54 -= 8;
      v55 += 8;
    }
    while (v55);
    v37 -= v39 & 0xFFFFFFFFFFFFFFF8;
    if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_70;
    }
LABEL_68:
    uint64_t v57 = v47 - 1;
    do
    {
      char v58 = *--v37;
      *v57-- = v58;
    }
    while (v37 != v38);
    goto LABEL_70;
  }
LABEL_76:
  double result = NAN;
  *(void *)(a1 + 40) = -1;
  return result;
}

void sub_10032DDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032DE20(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_10032DE8C(uint64_t a1, long long *a2, long long *a3, long long *a4, unsigned int a5, __int16 a6, __int16 a7, int a8, int a9, double *a10)
{
  return sub_10032D640(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void *sub_10032DEA0(void *a1)
{
  *a1 = off_100499B00;
  uint64_t v2 = (atomic_uint *)a1[36];
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  a1[36] = 0;
  a1[37] = 0;
  uint64_t v3 = (atomic_uint *)a1[34];
  if (v3 && atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
  }
  a1[34] = 0;
  a1[35] = 0;
  uint64_t v4 = (atomic_uint *)a1[32];
  if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
  }
  a1[32] = 0;
  a1[33] = 0;
  int64_t v5 = (void *)a1[29];
  if (v5)
  {
    a1[30] = v5;
    operator delete(v5);
  }
  long long v6 = (void *)a1[23];
  if (v6)
  {
    a1[24] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[20];
  if (v7)
  {
    a1[21] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[17];
  if (v8)
  {
    a1[18] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[14];
  if (v9)
  {
    a1[15] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[10];
  if (v10)
  {
    a1[11] = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_10032E028(void *a1)
{
  sub_10032DEA0(a1);

  operator delete();
}

uint64_t sub_10032E060(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a4;
  *(void *)&long long v7 = *a2;
  *((void *)&v7 + 1) = v6;
  *(_OWORD *)(a1 + 40) = v7;
  int v8 = *a3;
  int v9 = a3[1];
  *(_DWORD *)(a1 + 56) = *a3;
  *(_DWORD *)(a1 + 60) = v9;
  if ((v6 & 0x80000000) != 0
    || v6 < 0
    || v8 < 0
    || v9 < 0
    || ((v10 = v9 + HIDWORD(v6), v8 + (int)v6 <= (int)v5) ? (BOOL v11 = v10 <= SHIDWORD(v5)) : (BOOL v11 = 0), !v11))
  {
    uint64_t v166 = 0;
    uint64_t v167 = 0;
    qmemcpy((void *)sub_1002D19D8(&v166, 143), "roi.x >= 0 && roi.y >= 0 && roi.width >= 0 && roi.height >= 0 && roi.x + roi.width <= wholeSize.width && roi.y + roi.height <= wholeSize.height", 143);
    sub_1002D2278(-215, &v166, "start", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 173);
  }
  int v12 = (((*(_DWORD *)(a1 + 8) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 8) & 7))) & 3);
  int v13 = (((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3);
  if (*(void *)(a1 + 160) == *(void *)(a1 + 168)) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(long long **)(a1 + 160);
  }
  int v15 = *(_DWORD *)(a1 + 24);
  int v17 = *(_DWORD *)(a1 + 32);
  int v16 = *(_DWORD *)(a1 + 36);
  int v18 = v15 + ~v17;
  int v19 = v15 + 3;
  if (v17 <= v18) {
    int v17 = v18;
  }
  int v20 = (2 * v17) | 1;
  if (v19 > v20) {
    int v20 = v19;
  }
  if (v16 >= v8)
  {
    uint64_t v21 = *(void *)(a1 + 232);
    uint64_t v22 = *(void *)(a1 + 240) - v21;
    if (v20 == ((unint64_t)v22 >> 3)) {
      goto LABEL_154;
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 232);
    uint64_t v22 = *(void *)(a1 + 240) - v21;
  }
  unint64_t v23 = v22 >> 3;
  if (v20 <= v23)
  {
    if (v20 < v23) {
      *(void *)(a1 + 240) = v21 + 8 * v20;
    }
  }
  else
  {
    sub_100335528((void **)(a1 + 232), v20 - v23);
    int v16 = *(_DWORD *)(a1 + 36);
    int v8 = *(_DWORD *)(a1 + 56);
  }
  if (v16 > v8) {
    int v8 = v16;
  }
  uint64_t v24 = *(char **)(a1 + 136);
  *(_DWORD *)(a1 + 36) = v8;
  unint64_t v25 = v12 * (uint64_t)(v8 + *(_DWORD *)(a1 + 20) - 1);
  int v26 = *(char **)(a1 + 144);
  unint64_t v27 = v26 - v24;
  size_t v28 = v25 - (v26 - v24);
  if (v25 <= v26 - v24)
  {
    if (v25 < v26 - v24) {
      *(void *)(a1 + 144) = &v24[v25];
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a1 + 152);
    if (v29 - (uint64_t)v26 >= v28)
    {
      bzero(*(void **)(a1 + 144), v25 - (v26 - v24));
      *(void *)(a1 + 144) = &v24[v25];
      goto LABEL_58;
    }
    int v162 = v13;
    if ((v25 & 0x80000000) != 0) {
      sub_10000B98C();
    }
    unint64_t v30 = v29 - (void)v24;
    uint64_t v31 = 2 * v30;
    if (2 * v30 <= v25) {
      uint64_t v31 = v25;
    }
    if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v32 = v31;
    }
    uint64_t v33 = operator new(v32);
    unint64_t v34 = (char *)v33 + v32;
    int32x4_t v160 = (char *)v33 + v25;
    unint64_t v35 = (char *)v33 + v27;
    bzero((char *)v33 + v27, v28);
    if (v26 != v24)
    {
      if (v27 < 8)
      {
        unint64_t v36 = v160;
        goto LABEL_54;
      }
      unint64_t v36 = v160;
      if ((unint64_t)(v24 - (unsigned char *)v33) >= 0x20)
      {
        if (v27 < 0x20)
        {
          unint64_t v37 = 0;
          goto LABEL_49;
        }
        unint64_t v37 = v27 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v38 = v26 - 16;
        unint64_t v39 = (char *)v33 + v26 - 16 - v24;
        unint64_t v40 = v27 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v41 = *(_OWORD *)v38;
          *((_OWORD *)v39 - 1) = *((_OWORD *)v38 - 1);
          *(_OWORD *)unint64_t v39 = v41;
          v39 -= 32;
          v38 -= 32;
          v40 -= 32;
        }
        while (v40);
        if (v27 == v37) {
          goto LABEL_56;
        }
        if ((v27 & 0x18) != 0)
        {
LABEL_49:
          v35 -= v27 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v26[-v37 - 8];
          uint64_t v43 = (char *)(v42 - v24);
          unint64_t v44 = v37 - (v27 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *(void *)&v43[(void)v33] = v45;
            v43 -= 8;
            v44 += 8;
          }
          while (v44);
          v26 -= v27 & 0xFFFFFFFFFFFFFFF8;
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_54;
          }
LABEL_56:
          int v26 = v24;
          *(void *)(a1 + 136) = v33;
          *(void *)(a1 + 144) = v36;
          *(void *)(a1 + 152) = v34;
          int v13 = v162;
          if (!v24) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
        v35 -= v37;
        v26 -= v37;
      }
LABEL_54:
      uint64_t v46 = v35 - 1;
      do
      {
        char v47 = *--v26;
        *v46-- = v47;
      }
      while (v26 != v24);
      goto LABEL_56;
    }
    *(void *)(a1 + 136) = v35;
    *(void *)(a1 + 144) = v160;
    *(void *)(a1 + 152) = v34;
    int v13 = v162;
    if (v26) {
LABEL_57:
    }
      operator delete(v26);
  }
LABEL_58:
  if (*(_DWORD *)(a1 + 76)) {
    goto LABEL_120;
  }
  if (!v14)
  {
    uint64_t v166 = 0;
    uint64_t v167 = 0;
    uint64_t v48 = sub_1002D19D8(&v166, 18);
    *(_WORD *)(v48 + 16) = 27756;
    *(_OWORD *)uint64_t v48 = *(_OWORD *)"constVal != __null";
    sub_1002D2278(-215, &v166, "start", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 191);
  }
  uint64_t v49 = *(char **)(a1 + 184);
  unint64_t v50 = ((((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3))
      * (uint64_t)(*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 20) + 63);
  unint64_t v51 = *(char **)(a1 + 192);
  unint64_t v52 = v51 - v49;
  size_t v53 = v50 - (v51 - v49);
  if (v50 <= v51 - v49)
  {
    if (v50 < v51 - v49) {
      *(void *)(a1 + 192) = &v49[v50];
    }
    goto LABEL_91;
  }
  uint64_t v54 = *(void *)(a1 + 200);
  if (v54 - (uint64_t)v51 < v53)
  {
    int v163 = v13;
    if ((v50 & 0x8000000000000000) != 0) {
      goto LABEL_201;
    }
    unint64_t v55 = v54 - (void)v49;
    uint64_t v56 = 2 * v55;
    if (2 * v55 <= v50) {
      uint64_t v56 = ((((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 16) & 7))) & 3))
    }
          * (uint64_t)(*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 20) + 63);
    if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v57 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v57 = v56;
    }
    char v58 = (char *)operator new(v57);
    unsigned int v59 = &v58[v57];
    int32x4_t v161 = &v58[v50];
    int v60 = &v58[v52];
    bzero(&v58[v52], v53);
    if (v51 == v49) {
      goto LABEL_89;
    }
    if (v52 >= 8 && (unint64_t)(v49 - v58) >= 0x20)
    {
      if (v52 < 0x20)
      {
        unint64_t v61 = 0;
        goto LABEL_81;
      }
      unint64_t v61 = v52 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v62 = v51 - 16;
      uint64_t v63 = &v58[v51 - 16 - v49];
      unint64_t v64 = v52 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v65 = *(_OWORD *)v62;
        *((_OWORD *)v63 - 1) = *((_OWORD *)v62 - 1);
        *(_OWORD *)uint64_t v63 = v65;
        v63 -= 32;
        v62 -= 32;
        v64 -= 32;
      }
      while (v64);
      if (v52 == v61) {
        goto LABEL_88;
      }
      if ((v52 & 0x18) != 0)
      {
LABEL_81:
        v60 -= v52 & 0xFFFFFFFFFFFFFFF8;
        int v66 = &v51[-v61 - 8];
        BOOL v67 = (char *)(v66 - v49);
        unint64_t v68 = v61 - (v52 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v69 = *(void *)v66;
          v66 -= 8;
          *(void *)&v67[(void)v58] = v69;
          v67 -= 8;
          v68 += 8;
        }
        while (v68);
        v51 -= v52 & 0xFFFFFFFFFFFFFFF8;
        if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_88;
        }
        goto LABEL_86;
      }
      v60 -= v61;
      v51 -= v61;
    }
LABEL_86:
    int v70 = v60 - 1;
    do
    {
      char v71 = *--v51;
      *v70-- = v71;
    }
    while (v51 != v49);
LABEL_88:
    unint64_t v51 = v49;
    int v60 = v58;
LABEL_89:
    int v13 = v163;
    *(void *)(a1 + 184) = v60;
    *(void *)(a1 + 192) = v161;
    *(void *)(a1 + 200) = v59;
    if (v51) {
      operator delete(v51);
    }
    goto LABEL_91;
  }
  bzero(*(void **)(a1 + 192), v50 - (v51 - v49));
  *(void *)(a1 + 192) = &v49[v50];
LABEL_91:
  int v72 = (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 20) - 1) * v12;
  uint64_t v73 = *(void *)(a1 + 264);
  unint64_t v74 = (*(void *)(a1 + 184) + 63) & 0xFFFFFFFFFFFFFFC0;
  if (!v73) {
    unint64_t v74 = *(void *)(a1 + 136);
  }
  if (v72 >= 1)
  {
    int v75 = 0;
    LODWORD(v76) = *(_DWORD *)(a1 + 168) - *(_DWORD *)(a1 + 160);
    while (1)
    {
      if (v72 - v75 >= (int)v76) {
        uint64_t v76 = v76;
      }
      else {
        uint64_t v76 = (v72 - v75);
      }
      if ((int)v76 < 1) {
        goto LABEL_95;
      }
      if (v76 >= 8 && v74 + v75 - (unint64_t)v14 >= 0x20)
      {
        if (v76 < 0x20)
        {
          uint64_t v77 = 0;
LABEL_113:
          uint64_t v87 = v77;
          uint64_t v77 = v76 & 0xFFFFFFF8;
          int v88 = (uint64_t *)((char *)v14 + v87);
          unsigned int v89 = (void *)(v74 + v87 + v75);
          uint64_t v90 = v87 - v77;
          do
          {
            uint64_t v91 = *v88++;
            *v89++ = v91;
            v90 += 8;
          }
          while (v90);
          if (v77 == v76) {
            goto LABEL_95;
          }
          goto LABEL_103;
        }
        uint64_t v77 = v76 & 0x7FFFFFE0;
        __int16 v83 = (_OWORD *)(v74 + 16 + v75);
        uint64_t v84 = v76 & 0xFFFFFFE0;
        unsigned __int8 v85 = v14 + 1;
        do
        {
          long long v86 = *v85;
          *(v83 - 1) = *(v85 - 1);
          *__int16 v83 = v86;
          v85 += 2;
          v83 += 2;
          v84 -= 32;
        }
        while (v84);
        if (v77 == v76) {
          goto LABEL_95;
        }
        if ((v76 & 0x18) != 0) {
          goto LABEL_113;
        }
      }
      else
      {
        uint64_t v77 = 0;
      }
LABEL_103:
      unsigned __int8 v78 = (unsigned char *)(v74 + v77 + v75);
      unsigned __int8 v79 = (char *)v14 + v77;
      uint64_t v80 = v77 - v76;
      do
      {
        char v81 = *v79++;
        *v78++ = v81;
      }
      while (!__CFADD__(v80++, 1));
LABEL_95:
      v75 += v76;
      if (v75 >= v72)
      {
        uint64_t v73 = *(void *)(a1 + 264);
        break;
      }
    }
  }
  if (!v73) {
    (*(void (**)(void, void))(**(void **)(a1 + 280) + 16))(*(void *)(a1 + 280), *(void *)(a1 + 136));
  }
LABEL_120:
  uint64_t v92 = *(void *)(a1 + 264);
  if (v92) {
    LODWORD(v92) = *(_DWORD *)(a1 + 20) - 1;
  }
  unint64_t v93 = *(char **)(a1 + 112);
  int v94 = v13;
  unint64_t v95 = (int)(v13 * ((*(_DWORD *)(a1 + 36) + v92 + 63) & 0xFFFFFFC0))
      * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3)
      + 64;
  int v96 = *(char **)(a1 + 120);
  unint64_t v97 = v96 - v93;
  size_t v98 = v95 - (v96 - v93);
  if (v95 <= v96 - v93)
  {
    int v13 = v94;
    if (v95 < v96 - v93) {
      *(void *)(a1 + 120) = &v93[v95];
    }
    goto LABEL_154;
  }
  uint64_t v99 = *(void *)(a1 + 128);
  if (v99 - (uint64_t)v96 >= v98)
  {
    bzero(*(void **)(a1 + 120), v95 - (v96 - v93));
    *(void *)(a1 + 120) = &v93[v95];
    int v13 = v94;
    goto LABEL_154;
  }
  if ((v95 & 0x8000000000000000) != 0) {
LABEL_201:
  }
    sub_10000B98C();
  unint64_t v100 = v99 - (void)v93;
  uint64_t v101 = 2 * v100;
  if (2 * v100 <= v95) {
    uint64_t v101 = v95;
  }
  if (v100 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v102 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v102 = v101;
  }
  uint64_t v103 = (char *)operator new(v102);
  uint64_t v165 = &v103[v102];
  unsigned int v104 = v103;
  uint64_t v164 = &v103[v95];
  __int16 v105 = &v103[v97];
  bzero(&v103[v97], v98);
  if (v96 != v93)
  {
    if (v97 < 8)
    {
      int v13 = v94;
      goto LABEL_150;
    }
    int v13 = v94;
    if ((unint64_t)(v93 - v104) >= 0x20)
    {
      if (v97 < 0x20)
      {
        unint64_t v106 = 0;
        goto LABEL_145;
      }
      unint64_t v106 = v97 & 0xFFFFFFFFFFFFFFE0;
      unsigned __int8 v107 = v96 - 16;
      char v108 = &v104[v96 - 16 - v93];
      unint64_t v109 = v97 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v110 = *(_OWORD *)v107;
        *((_OWORD *)v108 - 1) = *((_OWORD *)v107 - 1);
        *(_OWORD *)char v108 = v110;
        v108 -= 32;
        v107 -= 32;
        v109 -= 32;
      }
      while (v109);
      if (v97 == v106) {
        goto LABEL_152;
      }
      if ((v97 & 0x18) != 0)
      {
LABEL_145:
        v105 -= v97 & 0xFFFFFFFFFFFFFFF8;
        int v111 = &v96[-v106 - 8];
        uint64_t v112 = (char *)(v111 - v93);
        unint64_t v113 = v106 - (v97 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v114 = *(void *)v111;
          v111 -= 8;
          *(void *)&v112[(void)v104] = v114;
          v112 -= 8;
          v113 += 8;
        }
        while (v113);
        v96 -= v97 & 0xFFFFFFFFFFFFFFF8;
        if (v97 != (v97 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_150;
        }
LABEL_152:
        int v96 = v93;
        *(void *)(a1 + 112) = v104;
        *(void *)(a1 + 120) = v164;
        *(void *)(a1 + 128) = v165;
        if (!v93) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
      v105 -= v106;
      v96 -= v106;
    }
LABEL_150:
    uint64_t v115 = v105 - 1;
    do
    {
      char v116 = *--v96;
      *v115-- = v116;
    }
    while (v96 != v93);
    goto LABEL_152;
  }
  int v13 = v94;
  *(void *)(a1 + 112) = v105;
  *(void *)(a1 + 120) = v164;
  *(void *)(a1 + 128) = v165;
  if (v96) {
LABEL_153:
  }
    operator delete(v96);
LABEL_154:
  int v117 = *(_DWORD *)(a1 + 56);
  uint64_t v118 = *(void *)(a1 + 264);
  int v119 = *(_DWORD *)(a1 + 20);
  int v120 = v119 - 1;
  if (!v118) {
    int v120 = 0;
  }
  *(_DWORD *)(a1 + 208) = ((v117 + v120 + 15) & 0xFFFFFFF0) * v13;
  int v121 = *(_DWORD *)(a1 + 28);
  int v122 = *(_DWORD *)(a1 + 48);
  int v123 = v121 - v122;
  LODWORD(v124) = v123 & ~(v123 >> 31);
  int v125 = *(_DWORD *)(a1 + 40);
  int v126 = v117 + v122 + ~v121 + v119 - v125;
  *(_DWORD *)(a1 + 64) = v124;
  *(_DWORD *)(a1 + 68) = v126 & ~(v126 >> 31);
  if (v121 <= v122 && v126 < 1) {
    goto LABEL_158;
  }
  if (*(_DWORD *)(a1 + 72))
  {
    if (v121 >= v122) {
      int v134 = v122;
    }
    else {
      int v134 = v121;
    }
    int v135 = v134 - v122;
    uint64_t v136 = *(unsigned int *)(a1 + 104);
    int32x4_t v137 = *(int32x4_t **)(a1 + 80);
    if (v123 >= 1)
    {
      if ((int)v136 > 0)
      {
        uint64_t v138 = 0;
        uint64_t v139 = 0;
        unint64_t v140 = v137 + 1;
        while (1)
        {
          unsigned int v141 = (sub_10025811C((v139 - v124), v125, *(_DWORD *)(a1 + 72)) + v135) * v136;
          if (v136 >= 8)
          {
            int32x4_t v143 = vdupq_n_s32(v141);
            int32x4_t v144 = vdupq_n_s32(v141 + 4);
            uint64_t v145 = v136 & 0xFFFFFFF8;
            int32x4_t v146 = v140;
            int32x4_t v147 = (int32x4_t)xmmword_100404900;
            v148.i64[0] = 0x800000008;
            v148.i64[1] = 0x800000008;
            do
            {
              v146[-1] = vaddq_s32(v143, v147);
              *int32x4_t v146 = vaddq_s32(v144, v147);
              int32x4_t v147 = vaddq_s32(v147, v148);
              v146 += 2;
              v145 -= 8;
            }
            while (v145);
            uint64_t v142 = v136 & 0xFFFFFFF8;
            if (v142 == v136) {
              goto LABEL_172;
            }
          }
          else
          {
            uint64_t v142 = 0;
          }
          int v149 = v141 + v142;
          int v150 = &v137->i32[v142 + v138];
          uint64_t v151 = v136 - v142;
          do
          {
            *v150++ = v149++;
            --v151;
          }
          while (v151);
LABEL_172:
          ++v139;
          uint64_t v124 = *(int *)(a1 + 64);
          unint64_t v140 = (int32x4_t *)((char *)v140 + 4 * v136);
          v138 += v136;
          if (v139 >= v124) {
            goto LABEL_187;
          }
        }
      }
      int v153 = 0;
      do
      {
        sub_10025811C((v153 - v124), v125, *(_DWORD *)(a1 + 72));
        ++v153;
        LODWORD(v124) = *(_DWORD *)(a1 + 64);
      }
      while (v153 < (int)v124);
    }
LABEL_187:
    if (*(int *)(a1 + 68) >= 1)
    {
      int v154 = 0;
      do
      {
        int v155 = sub_10025811C((v154 + v125), v125, *(_DWORD *)(a1 + 72));
        if ((int)v136 >= 1)
        {
          uint64_t v156 = 0;
          do
          {
            v137->i32[v156 + (int)v136 * (v154 + *(_DWORD *)(a1 + 64))] = (v155 + v135) * v136 + v156;
            ++v156;
          }
          while (v136 != v156);
        }
        ++v154;
      }
      while (v154 < *(_DWORD *)(a1 + 68));
    }
    goto LABEL_158;
  }
  if (!v14)
  {
    uint64_t v166 = 0;
    uint64_t v167 = 0;
    uint64_t v157 = sub_1002D19D8(&v166, 18);
    *(_WORD *)(v157 + 16) = 27756;
    *(_OWORD *)uint64_t v157 = *(_OWORD *)"constVal != __null";
    sub_1002D2278(-215, &v166, "start", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 225);
  }
  if (v118)
  {
    uint64_t v152 = (*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3;
    if ((int)v152 < 1) {
      goto LABEL_158;
    }
  }
  else
  {
    LODWORD(v152) = 1;
  }
  int v158 = 0;
  do
  {
    if (*(void *)(a1 + 264)) {
      int16x8_t v159 = (char *)(((*(void *)(a1 + 112) + 63) & 0xFFFFFFFFFFFFFFC0) + *(int *)(a1 + 208) * (uint64_t)v158);
    }
    else {
      int16x8_t v159 = *(char **)(a1 + 136);
    }
    memcpy(v159, v14, *(int *)(a1 + 64) * (uint64_t)v12);
    memcpy(&v159[v12 * (uint64_t)(*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 56) + ~*(_DWORD *)(a1 + 68))], v14, *(_DWORD *)(a1 + 68) * v12);
    ++v158;
  }
  while (v152 != v158);
LABEL_158:
  *(void *)(a1 + 224) = 0;
  int v127 = *(_DWORD *)(a1 + 52);
  int v128 = *(_DWORD *)(a1 + 32);
  int v129 = (v127 - v128) & ~((v127 - v128) >> 31);
  *(_DWORD *)(a1 + 212) = v129;
  *(_DWORD *)(a1 + 216) = v129;
  int v130 = v127 + *(_DWORD *)(a1 + 60) + ~v128 + *(_DWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 44) < v130) {
    int v130 = *(_DWORD *)(a1 + 44);
  }
  *(_DWORD *)(a1 + 220) = v130;
  uint64_t v131 = *(void *)(a1 + 296);
  if (v131) {
    (*(void (**)(uint64_t))(*(void *)v131 + 24))(v131);
  }
  uint64_t v132 = *(void *)(a1 + 264);
  if (v132) {
    (*(void (**)(uint64_t))(*(void *)v132 + 24))(v132);
  }
  return *(unsigned int *)(a1 + 212);
}

void sub_10032ED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032ED88(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int32x2_t v7 = vrev64_s32(**(int32x2_t **)(a2 + 64));
  (*(void (**)(_DWORD *, uint64_t, int32x2_t *))(*(void *)a1 + 16))(a1, a3, &v7);
  return (a1[53] - *(_DWORD *)(a4 + 4));
}

uint64_t sub_10032EE00(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, unsigned int a6)
{
  if (*(int *)(a1 + 40) < 1 || *(int *)(a1 + 44) <= 0)
  {
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    qmemcpy((void *)sub_1002D19D8(&v88, 43), "wholeSize.width > 0 && wholeSize.height > 0", 43);
    sub_1002D2278(-215, &v88, "proceed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 288);
  }
  int v7 = *(_DWORD *)(a1 + 64);
  int v8 = *(_DWORD *)(a1 + 68);
  int v9 = *(_DWORD *)(a1 + 28);
  if (v9 >= *(_DWORD *)(a1 + 48)) {
    int v9 = *(_DWORD *)(a1 + 48);
  }
  BOOL v87 = (v7 > 0 || v8 >= 1) && *(_DWORD *)(a1 + 72) != 0;
  uint64_t v85 = *(void *)(a1 + 232);
  uint64_t v84 = *(int **)(a1 + 80);
  unsigned int v79 = *(_DWORD *)(a1 + 56);
  int v10 = *(_DWORD *)(a1 + 104);
  int v66 = *(_DWORD *)(a1 + 24);
  int v67 = *(_DWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 264);
  if (*(_DWORD *)(a1 + 220) - (*(_DWORD *)(a1 + 212) + *(_DWORD *)(a1 + 224)) >= a4) {
    int v12 = a4;
  }
  else {
    int v12 = *(_DWORD *)(a1 + 220) - (*(_DWORD *)(a1 + 212) + *(_DWORD *)(a1 + 224));
  }
  if (!a2 || !a5 || v12 <= 0)
  {
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    qmemcpy((void *)sub_1002D19D8(&v88, 23), "src && dst && count > 0", 23);
    sub_1002D2278(-215, &v88, "proceed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 307);
  }
  unsigned int v13 = 0;
  int v14 = (((*(_DWORD *)(a1 + 8) >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (*(_DWORD *)(a1 + 8) & 7))) & 3);
  unint64_t v15 = (unint64_t)(*(void *)(a1 + 240) - v85) >> 3;
  unsigned int v65 = ((*(_DWORD *)(a1 + 16) >> 3) & 0x1FF) + 1;
  int v16 = (char *)(a2 - v9 * v14);
  uint64_t v17 = (v7 * v14);
  uint64_t v86 = (int)v17;
  int v18 = *(_DWORD *)(a1 + 20) + v79 + ~v8;
  size_t v19 = (v18 - v7) * v14;
  int v82 = 4 * v10;
  int v83 = v14;
  uint64_t v81 = (v8 * v14);
  int v20 = v18 * v14;
  uint64_t v21 = (v7 * v10);
  uint64_t v80 = (v8 * v10);
  uint64_t v22 = a3;
  int v70 = v66 - 1;
  uint64_t v75 = v20;
  uint64_t v77 = v21;
  uint64_t v78 = v17;
  uint64_t v73 = v18 * v10;
  unint64_t v74 = &v84[(int)v17];
  int v72 = &v84[(int)v21];
  uint64_t v23 = a6;
  uint64_t v24 = a5;
  int v25 = v12;
  while (1)
  {
    unsigned int v76 = v13;
    uint64_t v71 = v24;
    int v26 = *(_DWORD *)(a1 + 52);
    int v27 = v15 - (v67 + *(_DWORD *)(a1 + 212) + *(_DWORD *)(a1 + 224));
    BOOL v28 = __OFADD__(v27, v26);
    int v29 = v27 + v26;
    if ((v29 < 0) ^ v28 | (v29 == 0)) {
      int v29 = v15 - v66 + 1;
    }
    if (v25 >= v29) {
      int v30 = v29;
    }
    else {
      int v30 = v25;
    }
    int v68 = v30;
    int v69 = v25;
    if (v30 >= 1)
    {
      while (1)
      {
        int v36 = *(_DWORD *)(a1 + 212);
        int v37 = *(_DWORD *)(a1 + 224);
        unint64_t v38 = ((*(void *)(a1 + 112) + 63) & 0xFFFFFFFFFFFFFFC0)
            + *(int *)(a1 + 208) * (uint64_t)((v36 - *(_DWORD *)(a1 + 216) + v37) % (int)v15);
        unint64_t v39 = (_DWORD *)v38;
        if (!v11) {
          break;
        }
        *(_DWORD *)(a1 + 224) = v37 + 1;
        if (v37 >= (int)v15) {
          goto LABEL_36;
        }
LABEL_37:
        memcpy((char *)v39 + v86, v16, v19);
        if (v87)
        {
          if (v82 == v83)
          {
            uint64_t v40 = v77;
            long long v41 = v84;
            unint64_t v42 = v39;
            if ((int)v77 >= 1)
            {
              do
              {
                uint64_t v43 = *v41++;
                *v42++ = *(_DWORD *)&v16[4 * v43];
                --v40;
              }
              while (v40);
            }
            if ((int)v80 >= 1)
            {
              unint64_t v44 = v72;
              uint64_t v45 = &v39[v73];
              uint64_t v46 = v80;
              do
              {
                uint64_t v47 = *v44++;
                *v45++ = *(_DWORD *)&v16[4 * v47];
                --v46;
              }
              while (v46);
            }
          }
          else
          {
            uint64_t v48 = v78;
            uint64_t v49 = v84;
            unint64_t v50 = v39;
            if ((int)v78 >= 1)
            {
              do
              {
                uint64_t v51 = *v49++;
                *v50++ = v16[v51];
                --v48;
              }
              while (v48);
            }
            if ((int)v81 >= 1)
            {
              unint64_t v52 = v74;
              size_t v53 = (char *)v39 + v75;
              uint64_t v54 = v81;
              do
              {
                uint64_t v55 = *v52++;
                *v53++ = v16[v55];
                --v54;
              }
              while (v54);
            }
          }
        }
        if (v11)
        {
          v16 += v22;
          BOOL v35 = v30-- <= 1;
          if (v35) {
            goto LABEL_27;
          }
        }
        else
        {
          (*(void (**)(void, _DWORD *, unint64_t, void, void))(**(void **)(a1 + 280) + 16))(*(void *)(a1 + 280), v39, v38, v79, ((*(_DWORD *)(a1 + 8) >> 3) & 0x1FFu) + 1);
          v16 += v22;
          BOOL v35 = v30-- <= 1;
          if (v35) {
            goto LABEL_27;
          }
        }
      }
      unint64_t v39 = *(_DWORD **)(a1 + 136);
      *(_DWORD *)(a1 + 224) = v37 + 1;
      if (v37 < (int)v15) {
        goto LABEL_37;
      }
LABEL_36:
      *(_DWORD *)(a1 + 224) = v37;
      *(_DWORD *)(a1 + 212) = v36 + 1;
      goto LABEL_37;
    }
LABEL_27:
    uint64_t v31 = v76;
    int v32 = v70 + *(_DWORD *)(a1 + 60) - (v76 + *(_DWORD *)(a1 + 228));
    uint64_t v33 = v32 >= (int)v15 ? v15 : v32;
    if ((int)v33 >= 1) {
      break;
    }
    LODWORD(v33) = 0;
    int v58 = v69;
    if (v66 > 0) {
      goto LABEL_69;
    }
LABEL_67:
    uint64_t v59 = (v33 - v70);
    uint64_t v60 = *(void *)(a1 + 264);
    if (v60) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v60 + 16))(v60, v85, v71, v23, v59, *(unsigned int *)(a1 + 56), v65);
    }
    else {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)(a1 + 296) + 16))(*(void *)(a1 + 296), v85, v71, v23, v59, *(_DWORD *)(a1 + 56) * v65);
    }
    int v25 = v58 - v68;
    uint64_t v24 = v71 + (int)v59 * (int)v23;
    unsigned int v13 = v59 + v76;
  }
  uint64_t v34 = 0;
  while (1)
  {
    while (1)
    {
      int v56 = sub_10025811C(v76 - v67 + v34 + *(_DWORD *)(a1 + 52) + *(_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 76));
      if ((v56 & 0x80000000) == 0) {
        break;
      }
      *(void *)(v85 + 8 * v34++) = (*(void *)(a1 + 184) + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v33 == v34) {
        goto LABEL_66;
      }
    }
    int v57 = *(_DWORD *)(a1 + 212);
    if (v56 < v57)
    {
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      qmemcpy((void *)sub_1002D19D8(&v88, 14), "srcY >= startY", 14);
      sub_1002D2278(-215, &v88, "proceed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 363);
    }
    if (v56 >= *(_DWORD *)(a1 + 224) + v57) {
      break;
    }
    *(void *)(v85 + 8 * v34++) = ((*(void *)(a1 + 112) + 63) & 0xFFFFFFFFFFFFFFC0)
                                 + *(int *)(a1 + 208) * (uint64_t)((v56 - *(_DWORD *)(a1 + 216)) % (int)v15);
    if (v33 == v34) {
      goto LABEL_66;
    }
  }
  LODWORD(v33) = v34;
LABEL_66:
  uint64_t v23 = a6;
  uint64_t v31 = v76;
  int v58 = v69;
  if ((int)v33 >= v66) {
    goto LABEL_67;
  }
LABEL_69:
  int v61 = *(_DWORD *)(a1 + 228) + v31;
  *(_DWORD *)(a1 + 228) = v61;
  if (v61 > *(_DWORD *)(a1 + 60))
  {
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v62 = sub_1002D19D8(&v88, 18);
    *(_WORD *)(v62 + 16) = 29800;
    *(_OWORD *)uint64_t v62 = *(_OWORD *)"dstY <= roi.height";
    sub_1002D2278(-215, &v88, "proceed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 380);
  }
  return v31;
}

void sub_10032F53C(_Unwind_Exception *a1)
{
  sub_1002D1A1C((uint64_t *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_10032F59C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1002D6AE8(v12, &off_100499B30);
  if ((*(_DWORD *)a2 & 0xFFF) != a1[2] || (*(_DWORD *)a3 & 0xFFF) != a1[3])
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v11, 46), "src.type() == srcType && dst.type() == dstType", 46);
    sub_1002D2278(-215, v11, "apply", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 388);
  }
  int v10 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, a4, a5);
  (*(void (**)(_DWORD *, void, void, void, void, void))(*(void *)a1 + 32))(a1, *(void *)(a2 + 16) + *(void *)(a2 + 80) * v10, *(void *)(a2 + 80), (a1[55] - a1[53]), *(void *)(a3 + 16), *(unsigned int *)(a3 + 80));
  if (v13) {
    sub_1002D6888(v12);
  }
}

void sub_10032F704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10032F730(uint64_t a1, _DWORD *a2)
{
  if (sub_10029A230((_DWORD *)a1) != 0x10000)
  {
    sub_100299554(a1, -1, (uint64_t)&v34);
    if ((v34 & 0xFF8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v34 = *(_OWORD *)v4;
  long long v6 = *(_OWORD *)(v4 + 32);
  long long v35 = v5;
  long long v36 = v6;
  uint64_t v7 = *(void *)(v4 + 56);
  uint64_t v37 = *(void *)(v4 + 48);
  uint64_t v38 = v7;
  unint64_t v39 = (char *)&v34 + 8;
  uint64_t v40 = v41;
  v41[0] = 0;
  v41[1] = 0;
  if (v7) {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 1u);
  }
  if (*(int *)(v4 + 4) <= 2)
  {
    int v8 = *(void **)(v4 + 72);
    int v9 = v40;
    *(void *)uint64_t v40 = *v8;
    v9[1] = v8[1];
    if ((v34 & 0xFF8) == 0) {
      goto LABEL_11;
    }
LABEL_10:
    *(_OWORD *)int v30 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v30, 23), "_kernel.channels() == 1", 23);
    sub_1002D2278(-215, (uint64_t *)v30, "getKernelType", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 407);
  }
  DWORD1(v34) = 0;
  sub_1002931A8((uint64_t)&v34, v4);
  if ((v34 & 0xFF8) != 0) {
    goto LABEL_10;
  }
LABEL_11:
  int v10 = DWORD2(v34);
  int v11 = HIDWORD(v34);
  *(_DWORD *)int v30 = 1124007936;
  memset(&v30[4], 0, 60);
  uint64_t v31 = &v30[8];
  int v32 = v33;
  v33[0] = 0;
  v33[1] = 0;
  int v27 = 33619968;
  BOOL v28 = v30;
  uint64_t v29 = 0;
  sub_10024011C((unsigned int *)&v34, (uint64_t)&v27, 6, 1.0, 0.0);
  uint64_t v12 = (v11 * v10);
  if (DWORD2(v34) == 1 || HIDWORD(v34) == 1)
  {
    unsigned int v13 = 12;
    if (((2 * *a2) | 1) == HIDWORD(v34))
    {
      if (((2 * a2[1]) | 1) == DWORD2(v34)) {
        unsigned int v13 = 15;
      }
      else {
        unsigned int v13 = 12;
      }
    }
  }
  else
  {
    unsigned int v13 = 12;
  }
  if ((int)v12 < 1)
  {
    double v14 = 0.0;
    uint64_t v21 = *(void *)&v30[56];
    if (!*(void *)&v30[56]) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  double v14 = 0.0;
  unint64_t v15 = *(double **)&v30[16];
  do
  {
    double v16 = *v15++;
    double v17 = v16;
    double v14 = v14 + v16;
    double v18 = *(double *)(*(void *)&v30[16] + 8 * (int)--v12);
    unsigned int v19 = v13 & 0xFFFFFFFE;
    if (v16 == v18) {
      unsigned int v19 = v13;
    }
    if (v17 != -v18) {
      v19 &= ~2u;
    }
    uint64_t v20 = (uint64_t)rint(v17);
    if (v17 < 0.0) {
      v19 &= ~4u;
    }
    if (v17 == (double)(int)v20) {
      unsigned int v13 = v19;
    }
    else {
      unsigned int v13 = v19 & 0xFFFFFFF7;
    }
  }
  while (v12);
  uint64_t v21 = *(void *)&v30[56];
  if (*(void *)&v30[56])
  {
LABEL_33:
    if (atomic_fetch_add((atomic_uint *volatile)(v21 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v30);
    }
  }
LABEL_35:
  *(void *)&v30[56] = 0;
  memset(&v30[16], 0, 32);
  if (*(int *)&v30[4] >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = v31;
    do
      *(_DWORD *)&v23[4 * v22++] = 0;
    while (v22 < *(int *)&v30[4]);
  }
  if (v32 != v33) {
    j__free(v32);
  }
  if (v38 && atomic_fetch_add((atomic_uint *volatile)(v38 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v34);
  }
  uint64_t v38 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  if (SDWORD1(v34) >= 1)
  {
    uint64_t v24 = 0;
    int v25 = v39;
    do
      *(_DWORD *)&v25[4 * v24++] = 0;
    while (v24 < SDWORD1(v34));
  }
  if (v40 != v41) {
    j__free(v40);
  }
  if (fabs(v14 + -1.0) <= (fabs(v14) + 1.0) * 0.00000011920929) {
    return v13;
  }
  else {
    return v13 & 0xFFFFFFFB;
  }
}

void sub_10032FAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1002D1A1C((uint64_t *)va);
  sub_1000094F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10032FAFC(uint64_t a1, unsigned __int16 a2, uint64_t a3, int a4, int a5)
{
  int v25 = a4;
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v9 = *(void *)(a3 + 8);
    long long v10 = *(_OWORD *)(v9 + 16);
    v19[0] = *(_OWORD *)v9;
    long long v11 = *(_OWORD *)(v9 + 32);
    v19[1] = v10;
    v19[2] = v11;
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v20 = *(void *)(v9 + 48);
    uint64_t v21 = v12;
    uint64_t v22 = (char *)v19 + 8;
    uint64_t v23 = v24;
    v24[0] = 0;
    v24[1] = 0;
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
    }
    if (*(int *)(v9 + 4) > 2)
    {
      DWORD1(v19[0]) = 0;
      sub_1002931A8((uint64_t)v19, v9);
    }
    else
    {
      uint64_t v13 = *(void **)(v9 + 72);
      uint64_t v14 = v23;
      *uint64_t v23 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)v19);
  }
  unsigned int v15 = a1 & 7;
  unsigned int v16 = a2 & 7;
  if (v15 <= 4) {
    unsigned int v17 = 4;
  }
  else {
    unsigned int v17 = a1 & 7;
  }
  if (v16 < v17 || ((a2 ^ (unsigned __int16)a1) & 0xFF8) != 0 || (v19[0] & 0xFFF) != v16)
  {
    long long v18 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v18, 109), "cn == ((((bufType) & ((512 - 1) << 3)) >> 3) + 1) && ddepth >= std::max(sdepth, 4) && kernel.type() == ddepth", 109);
    sub_1002D2278(-215, (uint64_t *)&v18, "getLinearRowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3605);
  }
  if ((a5 & 3) != 0 && HIDWORD(v19[0]) + DWORD2(v19[0]) <= 6)
  {
    if ((a1 & 7) == 0 && v16 == 4)
    {
      sub_100334D58((uint64_t)&v18, (uint64_t)v19, a5);
      operator new();
    }
    if (v15 == 5 && v16 == 5)
    {
      sub_100334F24((uint64_t)&v18, (uint64_t)v19, a5);
      operator new();
    }
  }
  if ((a1 & 7) == 0 && v16 == 4) {
    operator new();
  }
  if ((a1 & 7) == 0 && v16 == 5) {
    operator new();
  }
  if ((a1 & 7) == 0 && v16 == 6) {
    operator new();
  }
  if (v15 == 2 && v16 == 5) {
    operator new();
  }
  if (v15 == 2 && v16 == 6) {
    sub_1003306EC();
  }
  if (v15 == 3 && v16 == 5) {
    sub_100330824();
  }
  if (v15 == 3 && v16 == 6) {
    sub_100330960();
  }
  if (v15 == 5 && v16 == 5) {
    sub_100330A98();
  }
  if (v15 == 5 && v16 == 6) {
    sub_100330BD4();
  }
  if (v15 == 6 && v16 == 6) {
    sub_100330D0C();
  }
  sub_1002D1F78((uint64_t *)&v18, "Unsupported combination of source format (=%d), and buffer format (=%d)", a1, HIDWORD(a1));
  sub_1002D2278(-213, (uint64_t *)&v18, "getLinearRowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3644);
}

void sub_10033047C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1003305C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1);
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 64);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 4));
  }
  long long v5 = *(void **)(a1 + 72);
  if (v5 != (void *)(a1 + 80)) {
    j__free(v5);
  }
  return a1;
}

uint64_t sub_100330658(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1);
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 64);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 4));
  }
  long long v5 = *(void **)(a1 + 72);
  if (v5 != (void *)(a1 + 80)) {
    j__free(v5);
  }
  return a1;
}

void sub_1003306EC()
{
}

void sub_100330794()
{
}

uint64_t sub_1003307B8(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100330824()
{
}

void sub_1003308D0()
{
}

uint64_t sub_1003308F4(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100330960()
{
}

void sub_100330A08()
{
}

uint64_t sub_100330A2C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100330A98()
{
}

void sub_100330B44()
{
}

uint64_t sub_100330B68(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100330BD4()
{
}

void sub_100330C7C()
{
}

uint64_t sub_100330CA0(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100330D0C()
{
}

void sub_100330DB4()
{
}

uint64_t sub_100330DD8(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100330E44(uint64_t a1, unsigned __int16 a2, uint64_t a3, int a4, int a5, unsigned int a6, double a7)
{
  int v32 = a5;
  int v33 = a4;
  double v31 = a7;
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    long long v12 = *(_OWORD *)(v11 + 16);
    v25[0] = *(_OWORD *)v11;
    v25[1] = v12;
    uint64_t v25[2] = *(_OWORD *)(v11 + 32);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v26 = *(void *)(v11 + 48);
    uint64_t v27 = v13;
    BOOL v28 = (char *)v25 + 8;
    uint64_t v29 = v30;
    v30[0] = 0;
    v30[1] = 0;
    if (v13) {
      atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 1u);
    }
    if (*(int *)(v11 + 4) > 2)
    {
      DWORD1(v25[0]) = 0;
      sub_1002931A8((uint64_t)v25, v11);
    }
    else
    {
      uint64_t v14 = *(void **)(v11 + 72);
      unsigned int v15 = v29;
      *(void *)uint64_t v29 = *v14;
      v15[1] = v14[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)v25);
  }
  unsigned int v16 = a1 & 7;
  unsigned int v17 = a2 & 7;
  if (v17 <= 4) {
    unsigned int v18 = 4;
  }
  else {
    unsigned int v18 = a2 & 7;
  }
  if (((a2 ^ (unsigned __int16)a1) & 0xFF8) != 0 || v16 < v18 || (v25[0] & 0xFFF) != v16)
  {
    *(_OWORD *)uint64_t v22 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v22, 109), "cn == ((((bufType) & ((512 - 1) << 3)) >> 3) + 1) && sdepth >= std::max(ddepth, 4) && kernel.type() == sdepth", 109);
    sub_1002D2278(-215, v22, "getLinearColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3660);
  }
  if ((v32 & 3) != 0)
  {
    if (HIDWORD(v25[0]) + DWORD2(v25[0]) == 4)
    {
      if (v16 == 4 && (a2 & 7) == 0)
      {
        int v19 = 1 << (a6 - 1);
        if (!a6) {
          int v19 = 0;
        }
        unsigned int v23 = a6;
        int v24 = v19;
        sub_100335094((uint64_t)v22, (unsigned int *)v25, v32, a6, v31);
        operator new();
      }
      if (v16 == 4 && v17 == 3 && !a6)
      {
        sub_1003351D4((uint64_t)v22, (unsigned int *)v25, v32, 0, v31);
        operator new();
      }
      if (v16 == 5 && v17 == 5) {
        operator new();
      }
    }
    if (v16 == 4 && (a2 & 7) == 0)
    {
      int v21 = 1 << (a6 - 1);
      if (!a6) {
        int v21 = 0;
      }
      unsigned int v23 = a6;
      int v24 = v21;
      sub_100335094((uint64_t)v22, (unsigned int *)v25, v32, a6, v31);
      operator new();
    }
    if (v16 == 5 && (a2 & 7) == 0) {
      operator new();
    }
    if (v16 == 6 && (a2 & 7) == 0) {
      operator new();
    }
    if (v16 == 5 && v17 == 2) {
      operator new();
    }
    if (v16 == 6 && v17 == 2) {
      sub_1003329D0();
    }
    if (v16 == 4 && v17 == 3) {
      sub_100332B24();
    }
    if (v16 == 5 && v17 == 3)
    {
      sub_100335314((int *)v22, (uint64_t)v25, v32, v31);
      sub_100332C78();
    }
    if (v16 == 6 && v17 == 3) {
      sub_100332E6C();
    }
    if (v16 == 5 && v17 == 5) {
      sub_100332FC0();
    }
    if (v16 == 6 && v17 == 6) {
      sub_10033311C();
    }
  }
  else
  {
    if (v16 == 4 && (a2 & 7) == 0)
    {
      int v20 = 1 << (a6 - 1);
      if (!a6) {
        int v20 = 0;
      }
      v22[0] = __PAIR64__(v20, a6);
      operator new();
    }
    if (v16 == 5 && (a2 & 7) == 0) {
      operator new();
    }
    if (v16 == 6 && (a2 & 7) == 0) {
      operator new();
    }
    if (v16 == 5 && v17 == 2) {
      operator new();
    }
    if (v16 == 6 && v17 == 2) {
      sub_100332224();
    }
    if (v16 == 5 && v17 == 3) {
      sub_100332370();
    }
    if (v16 == 6 && v17 == 3) {
      sub_1003324BC();
    }
    if (v16 == 5 && v17 == 5) {
      sub_100332608();
    }
    if (v16 == 6 && v17 == 6) {
      sub_100332754();
    }
  }
  sub_1002D1F78(v22, "Unsupported combination of buffer format (=%d), and destination format (=%d)", a1, HIDWORD(a1));
  sub_1002D2278(-213, v22, "getLinearColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3741);
}

void sub_100331E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100331EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100331EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100331ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_100332224()
{
}

void sub_1003322E0()
{
}

uint64_t sub_100332304(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100332370()
{
}

void sub_10033242C()
{
}

uint64_t sub_100332450(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_1003324BC()
{
}

void sub_100332578()
{
}

uint64_t sub_10033259C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100332608()
{
}

void sub_1003326C4()
{
}

uint64_t sub_1003326E8(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100332754()
{
}

void sub_100332810()
{
}

uint64_t sub_100332834(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_1003328A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 12));
  }
  long long v5 = *(void **)(a1 + 80);
  if (v5 != (void *)(a1 + 88)) {
    j__free(v5);
  }
  return a1;
}

uint64_t sub_100332938(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 12));
  }
  long long v5 = *(void **)(a1 + 80);
  if (v5 != (void *)(a1 + 88)) {
    j__free(v5);
  }
  return a1;
}

void sub_1003329D0()
{
}

void sub_100332A94()
{
}

uint64_t sub_100332AB8(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100332B24()
{
}

void sub_100332BE8()
{
}

uint64_t sub_100332C0C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100332C78()
{
}

void sub_100332D44()
{
}

uint64_t sub_100332D68(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

uint64_t sub_100332DD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 12));
  }
  long long v5 = *(void **)(a1 + 80);
  if (v5 != (void *)(a1 + 88)) {
    j__free(v5);
  }
  return a1;
}

void sub_100332E6C()
{
}

void sub_100332F30()
{
}

uint64_t sub_100332F54(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100332FC0()
{
}

void sub_10033308C()
{
}

uint64_t sub_1003330B0(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_10033311C()
{
}

void sub_1003331E0()
{
}

uint64_t sub_100333204(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100333270(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v10 = *(void *)(a3 + 8);
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v62 = *(_OWORD *)v10;
    long long v63 = v11;
    long long v64 = *(_OWORD *)(v10 + 32);
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t v65 = *(void *)(v10 + 48);
    uint64_t v66 = v12;
    int v67 = (char *)&v62 + 8;
    int v68 = v69;
    v69[0] = 0;
    v69[1] = 0;
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v62) = 0;
      sub_1002931A8((uint64_t)&v62, v10);
    }
    else
    {
      uint64_t v13 = *(void **)(v10 + 72);
      uint64_t v14 = v68;
      *int v68 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)&v62);
  }
  if (sub_10029A230((_DWORD *)a4) == 0x10000)
  {
    uint64_t v15 = *(void *)(a4 + 8);
    long long v16 = *(_OWORD *)(v15 + 16);
    long long v55 = *(_OWORD *)v15;
    long long v56 = v16;
    long long v57 = *(_OWORD *)(v15 + 32);
    uint64_t v17 = *(void *)(v15 + 56);
    *(void *)&long long v58 = *(void *)(v15 + 48);
    *((void *)&v58 + 1) = v17;
    uint64_t v59 = (char *)&v55 + 8;
    uint64_t v60 = v61;
    v61[0] = 0;
    v61[1] = 0;
    if (v17) {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
    }
    if (*(int *)(v15 + 4) > 2)
    {
      DWORD1(v55) = 0;
      sub_1002931A8((uint64_t)&v55, v15);
    }
    else
    {
      unsigned int v18 = *(void **)(v15 + 72);
      int v19 = v60;
      *(void *)uint64_t v60 = *v18;
      v19[1] = v18[1];
    }
  }
  else
  {
    sub_100299554(a4, -1, (uint64_t)&v55);
  }
  int v20 = (a1 >> 3) & 0x1FF;
  if (v20 != ((a2 >> 3) & 0x1FF))
  {
    *(void *)uint64_t v49 = 0;
    *(void *)&char v49[8] = 0;
    qmemcpy((void *)sub_1002D19D8(v49, 50), "cn == ((((_dstType) & ((512 - 1) << 3)) >> 3) + 1)", 50);
    sub_1002D2278(-215, (uint64_t *)v49, "createSeparableLinearFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3759);
  }
  int v21 = *a5;
  if (*a5 < 0)
  {
    int v40 = DWORD2(v62) + HIDWORD(v62);
    if (DWORD2(v62) + HIDWORD(v62) - 1 >= 0) {
      int v40 = DWORD2(v62) + HIDWORD(v62) - 1;
    }
    int v21 = v40 >> 1;
    *a5 = v21;
    if ((a5[1] & 0x80000000) == 0)
    {
LABEL_19:
      *(_DWORD *)uint64_t v49 = 16842752;
      *(void *)&char v49[8] = &v62;
      *(void *)&v49[16] = 0;
      if (DWORD2(v62) == 1) {
        int v22 = v21;
      }
      else {
        int v22 = 0;
      }
      if (DWORD2(v62) == 1) {
        int v21 = 0;
      }
      v54[0] = v22;
      v54[1] = v21;
      int v23 = sub_10032F730((uint64_t)v49, v54);
      *(_DWORD *)uint64_t v49 = 16842752;
      *(void *)&char v49[8] = &v55;
      *(void *)&v49[16] = 0;
      int v24 = a5[1];
      if (DWORD2(v55) == 1) {
        int v25 = a5[1];
      }
      else {
        int v25 = 0;
      }
      if (DWORD2(v55) == 1) {
        int v24 = 0;
      }
      v53[0] = v25;
      v53[1] = v24;
      int v26 = sub_10032F730((uint64_t)v49, v53);
      *(_DWORD *)uint64_t v49 = 1124007936;
      unsigned int v27 = a2 & 7;
      memset(&v49[4], 0, 60);
      unint64_t v50 = &v49[8];
      uint64_t v51 = v52;
      v52[0] = 0;
      v52[1] = 0;
      *(_DWORD *)uint64_t v45 = 1124007936;
      memset(&v45[4], 0, 60);
      uint64_t v46 = &v45[8];
      uint64_t v47 = v48;
      v48[0] = 0;
      v48[1] = 0;
      if ((a1 & 7) <= v27) {
        unsigned int v28 = a2 & 7;
      }
      else {
        unsigned int v28 = a1 & 7;
      }
      if (v28 <= 5) {
        int v29 = 5;
      }
      else {
        int v29 = v28;
      }
      if ((a1 & 7) == 0
        && ((a2 & 7) == 0 && v23 == 5 && v26 == 5 || (v23 & 3) != 0
                                                  && (v26 & 3) != 0
                                                  && v27 == 3
                                                  && (v23 & v26 & 8) != 0))
      {
        LODWORD(v42) = 33619968;
        uint64_t v43 = v49;
        uint64_t v44 = 0;
        double v41 = (double)(1 << (8 * (v27 == 0)));
        sub_10024011C((unsigned int *)&v62, (uint64_t)&v42, 4, v41, 0.0);
        LODWORD(v42) = 33619968;
        uint64_t v43 = v45;
        uint64_t v44 = 0;
        sub_10024011C((unsigned int *)&v55, (uint64_t)&v42, 4, v41, 0.0);
        LOWORD(v29) = 4;
        goto LABEL_79;
      }
      if ((v62 & 0xFFF) != v29)
      {
        LODWORD(v42) = 33619968;
        uint64_t v43 = v49;
        uint64_t v44 = 0;
        sub_10024011C((unsigned int *)&v62, (uint64_t)&v42, v29, 1.0, 0.0);
        if ((v55 & 0xFFF) != v29)
        {
LABEL_75:
          LODWORD(v42) = 33619968;
          uint64_t v43 = v45;
          uint64_t v44 = 0;
          sub_10024011C((unsigned int *)&v55, (uint64_t)&v42, v29, 1.0, 0.0);
          goto LABEL_79;
        }
LABEL_48:
        if (*((void *)&v58 + 1)) {
          atomic_fetch_add((atomic_uint *volatile)(*((void *)&v58 + 1) + 20), 1u);
        }
        if (*(void *)&v45[56]
          && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v45[56] + 20), 0xFFFFFFFF) == 1)
        {
          sub_1002932F4((uint64_t)v45);
        }
        *(void *)&v45[56] = 0;
        memset(&v45[16], 0, 32);
        if (*(uint64_t *)v45 <= 0)
        {
          *(_DWORD *)uint64_t v45 = v55;
          int v37 = DWORD1(v55);
          if (SDWORD1(v55) <= 2)
          {
LABEL_58:
            *(_DWORD *)&v45[4] = v37;
            *(void *)&v45[8] = *((void *)&v55 + 1);
            uint64_t v38 = v60;
            unint64_t v39 = v47;
            *(void *)uint64_t v47 = *(void *)v60;
            v39[1] = v38[1];
LABEL_78:
            *(_OWORD *)&v45[16] = v56;
            *(_OWORD *)&v45[32] = v57;
            *(_OWORD *)&v45[48] = v58;
LABEL_79:
            LODWORD(v42) = 16842752;
            uint64_t v43 = v49;
            uint64_t v44 = 0;
            sub_10032FAFC(a1 & 0xFFF, v29 | (8 * v20), (uint64_t)&v42, *a5, v23);
          }
        }
        else
        {
          uint64_t v35 = 0;
          long long v36 = v46;
          do
            *(_DWORD *)&v36[4 * v35++] = 0;
          while (v35 < *(int *)&v45[4]);
          *(_DWORD *)uint64_t v45 = v55;
          if (*(int *)&v45[4] <= 2)
          {
            int v37 = DWORD1(v55);
            if (SDWORD1(v55) <= 2) {
              goto LABEL_58;
            }
          }
        }
        sub_1002931A8((uint64_t)v45, (uint64_t)&v55);
        goto LABEL_78;
      }
      if (v66)
      {
        atomic_fetch_add((atomic_uint *volatile)(v66 + 20), 1u);
        if (*(void *)&v49[56])
        {
          if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v49[56] + 20), 0xFFFFFFFF) == 1) {
            sub_1002932F4((uint64_t)v49);
          }
        }
      }
      *(void *)&v49[56] = 0;
      memset(&v49[16], 0, 32);
      if (*(int *)&v49[4] <= 0)
      {
        *(_DWORD *)uint64_t v49 = v62;
        int v32 = DWORD1(v62);
        if (SDWORD1(v62) <= 2)
        {
LABEL_46:
          *(_DWORD *)&v49[4] = v32;
          *(void *)&char v49[8] = *((void *)&v62 + 1);
          int v33 = v68;
          long long v34 = v51;
          *(void *)uint64_t v51 = *v68;
          v34[1] = v33[1];
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t v30 = 0;
        double v31 = v50;
        do
          *(_DWORD *)&v31[4 * v30++] = 0;
        while (v30 < *(int *)&v49[4]);
        *(_DWORD *)uint64_t v49 = v62;
        if (*(int *)&v49[4] <= 2)
        {
          int v32 = DWORD1(v62);
          if (SDWORD1(v62) <= 2) {
            goto LABEL_46;
          }
        }
      }
      sub_1002931A8((uint64_t)v49, (uint64_t)&v62);
LABEL_74:
      *(_OWORD *)&v49[16] = v63;
      *(_OWORD *)&v49[32] = v64;
      *(void *)&v49[48] = v65;
      *(void *)&v49[56] = v66;
      if ((v55 & 0xFFF) != v29) {
        goto LABEL_75;
      }
      goto LABEL_48;
    }
  }
  else if ((a5[1] & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  a5[1] = (DWORD2(v55) + HIDWORD(v55) - 1) / 2;
  goto LABEL_19;
}

void sub_100333C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_1000094F4((uint64_t)&a23);
  sub_1000094F4((uint64_t)&a35);
  sub_1000094F4((uint64_t)&a49);
  sub_1000094F4(v49 - 208);
  _Unwind_Resume(a1);
}

void sub_100333D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  sub_1000094F4(&a49);
  sub_1000094F4(v49 - 208);
  _Unwind_Resume(a1);
}

void sub_100333D44(_Unwind_Exception *a1)
{
  sub_1000094F4(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_100333D58(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, int a15, int a16, int a17)
{
  v31[0] = a13;
  v31[1] = 1;
  sub_10026BD1C((uint64_t)v32, v31, a3, a12, 0);
  v29[0] = a15;
  v29[1] = 1;
  sub_10026BD1C((uint64_t)v30, v29, a3, a14, 0);
  *(void *)&long long v22 = 0;
  int v20 = 16842752;
  int v21 = v32;
  uint64_t v28 = 0;
  v25[1] = a17;
  int v26 = 16842752;
  unsigned int v27 = v30;
  v25[0] = a16;
  long long v24 = 0u;
  long long v23 = 0u;
  sub_100333270(a1, a2, (uint64_t)&v20, (uint64_t)&v26, v25);
}

void sub_10033411C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, char a17, char a18, long long a19, long long a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,char a27,int a28,uint64_t a29,long long a30,long long a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,int a46,uint64_t a47,long long a48,long long a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,long long a59,long long a60)
{
  if (a22 && atomic_fetch_add((atomic_uint *volatile)(a22 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&a15);
  }
  a22 = 0;
  a19 = 0u;
  a20 = 0u;
  if (a16 >= 1)
  {
    uint64_t v62 = 0;
    uint64_t v63 = a23;
    do
      *(_DWORD *)(v63 + 4 * v62++) = 0;
    while (v62 < a16);
  }
  if (a24 != &a25) {
    j__free(a24);
  }
  if (a33 && atomic_fetch_add((atomic_uint *volatile)(a33 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&a27);
  }
  a33 = 0;
  a30 = 0u;
  a31 = 0u;
  if (a28 >= 1)
  {
    uint64_t v64 = 0;
    uint64_t v65 = a34;
    do
      *(_DWORD *)(v65 + 4 * v64++) = 0;
    while (v64 < a28);
  }
  if (a35 != &a36) {
    j__free(a35);
  }
  uint64_t v66 = a42;
  if (a42 && atomic_fetch_add((atomic_uint *volatile)(a42 + 8), 0xFFFFFFFF) == 1) {
    (*(void (**)(uint64_t))(*(void *)v66 + 16))(v66);
  }
  if (a51 && atomic_fetch_add((atomic_uint *volatile)(a51 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&a45);
  }
  a51 = 0;
  a48 = 0u;
  a49 = 0u;
  if (a46 >= 1)
  {
    uint64_t v67 = 0;
    uint64_t v68 = a52;
    do
      *(_DWORD *)(v68 + 4 * v67++) = 0;
    while (v67 < a46);
  }
  if (a53 != &a54) {
    j__free(a53);
  }
  uint64_t v69 = *(void *)(v60 - 152);
  if (v69 && atomic_fetch_add((atomic_uint *volatile)(v69 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(v60 - 208);
  }
  *(void *)(v60 - 152) = 0;
  a59 = 0u;
  a60 = 0u;
  if (*(int *)(v60 - 204) >= 1)
  {
    uint64_t v70 = 0;
    uint64_t v71 = *(void *)(v60 - 144);
    do
      *(_DWORD *)(v71 + 4 * v70++) = 0;
    while (v70 < *(int *)(v60 - 204));
  }
  int v72 = *(void **)(v60 - 136);
  if (v72 != (void *)(v60 - 128)) {
    j__free(v72);
  }
  _Unwind_Resume(exception_object);
}

void sub_100334370(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int *a6, char a7)
{
  sub_1002D6AE8(v82, &off_100499B50);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    long long v15 = *(_OWORD *)(v14 + 16);
    long long v74 = *(_OWORD *)v14;
    long long v75 = v15;
    long long v76 = *(_OWORD *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 56);
    uint64_t v77 = *(void *)(v14 + 48);
    uint64_t v78 = v16;
    unsigned int v79 = (int32x2_t *)&v74 + 1;
    uint64_t v80 = v81;
    v81[0] = 0;
    v81[1] = 0;
    if (v16) {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v74) = 0;
      sub_1002931A8((uint64_t)&v74, v14);
    }
    else
    {
      uint64_t v17 = *(uint64_t **)(v14 + 72);
      unsigned int v18 = v80;
      *uint64_t v80 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v74);
  }
  if (sub_10029A230((_DWORD *)a4) == 0x10000)
  {
    uint64_t v19 = *(void *)(a4 + 8);
    long long v20 = *(_OWORD *)(v19 + 16);
    long long v67 = *(_OWORD *)v19;
    long long v68 = v20;
    long long v69 = *(_OWORD *)(v19 + 32);
    uint64_t v21 = *(void *)(v19 + 56);
    *(void *)&long long v70 = *(void *)(v19 + 48);
    *((void *)&v70 + 1) = v21;
    uint64_t v71 = (char *)&v67 + 8;
    int v72 = v73;
    v73[1] = 0;
    v73[0] = 0;
    if (v21) {
      atomic_fetch_add((atomic_uint *volatile)(v21 + 20), 1u);
    }
    if (*(int *)(v19 + 4) > 2)
    {
      DWORD1(v67) = 0;
      sub_1002931A8((uint64_t)&v67, v19);
    }
    else
    {
      long long v22 = *(void **)(v19 + 72);
      long long v23 = v72;
      *(void *)int v72 = *v22;
      v23[1] = v22[1];
    }
  }
  else
  {
    sub_100299554(a4, -1, (uint64_t)&v67);
  }
  if (sub_10029A230((_DWORD *)a5) == 0x10000)
  {
    uint64_t v24 = *(void *)(a5 + 8);
    long long v25 = *(_OWORD *)(v24 + 16);
    long long v60 = *(_OWORD *)v24;
    long long v61 = v25;
    long long v62 = *(_OWORD *)(v24 + 32);
    uint64_t v26 = *(void *)(v24 + 56);
    *(void *)&long long v63 = *(void *)(v24 + 48);
    *((void *)&v63 + 1) = v26;
    uint64_t v64 = (char *)&v60 + 8;
    uint64_t v65 = v66;
    v66[0] = 0;
    v66[1] = 0;
    if (v26) {
      atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
    }
    if (*(int *)(v24 + 4) > 2)
    {
      DWORD1(v60) = 0;
      sub_1002931A8((uint64_t)&v60, v24);
    }
    else
    {
      unsigned int v27 = *(void **)(v24 + 72);
      uint64_t v28 = v65;
      *(void *)uint64_t v65 = *v27;
      v28[1] = v27[1];
    }
  }
  else
  {
    sub_100299554(a5, -1, (uint64_t)&v60);
  }
  if (a3 >= 0) {
    char v29 = a3;
  }
  else {
    char v29 = v74;
  }
  int32x2_t v59 = vrev64_s32(*v79);
  sub_10029E6D4(a2, &v59, v74 & 0xFF8 | v29 & 7, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v30 = *(void *)(a2 + 8);
    long long v31 = *(_OWORD *)(v30 + 16);
    long long v51 = *(_OWORD *)v30;
    long long v52 = v31;
    long long v53 = *(_OWORD *)(v30 + 32);
    uint64_t v32 = *(void *)(v30 + 56);
    uint64_t v54 = *(void *)(v30 + 48);
    uint64_t v55 = v32;
    long long v56 = (char *)&v51 + 8;
    long long v57 = v58;
    v58[0] = 0;
    v58[1] = 0;
    if (v32) {
      atomic_fetch_add((atomic_uint *volatile)(v32 + 20), 1u);
    }
    if (*(int *)(v30 + 4) > 2)
    {
      DWORD1(v51) = 0;
      sub_1002931A8((uint64_t)&v51, v30);
    }
    else
    {
      int v33 = *(void **)(v30 + 72);
      long long v34 = v57;
      *(void *)long long v57 = *v33;
      v34[1] = v33[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v51);
  }
  long long v50 = (unint64_t)vrev64_s32(*(int32x2_t *)((char *)&v74 + 8));
  if ((a7 & 0x10) == 0) {
    sub_1002951DC((uint64_t)&v74, &v50, (_DWORD *)&v50 + 2);
  }
  if ((((unsigned __int16)v60 ^ (unsigned __int16)v67) & 0xFFF) != 0
    || HIDWORD(v67) != 1 && DWORD2(v67) != 1
    || HIDWORD(v60) != 1 && DWORD2(v60) != 1)
  {
    *(_OWORD *)uint64_t v45 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v45, 120), "kernelX.type() == kernelY.type() && (kernelX.cols == 1 || kernelX.rows == 1) && (kernelY.cols == 1 || kernelY.rows == 1)", 120);
    sub_1002D2278(-215, (uint64_t *)v45, "sepFilter2D", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 4948);
  }
  if ((v67 & 0x4000) == 0)
  {
    *(_DWORD *)uint64_t v45 = 1124007936;
    memset(&v45[4], 0, 60);
    uint64_t v46 = &v45[8];
    uint64_t v47 = &v48;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    *(_DWORD *)int v40 = 33619968;
    *(_OWORD *)&v40[8] = (unint64_t)v45;
    sub_10025401C((uint64_t)&v67, (uint64_t)v40);
    goto LABEL_47;
  }
  *(_OWORD *)uint64_t v45 = v67;
  *(_OWORD *)&v45[16] = v68;
  *(_OWORD *)&v45[32] = v69;
  *(_OWORD *)&v45[48] = v70;
  uint64_t v46 = &v45[8];
  uint64_t v47 = &v48;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if (*((void *)&v70 + 1))
  {
    atomic_fetch_add((atomic_uint *volatile)(*((void *)&v70 + 1) + 20), 1u);
    if (SDWORD1(v67) <= 2)
    {
LABEL_44:
      uint64_t v35 = v72;
      long long v36 = v47;
      *(void *)uint64_t v47 = *(void *)v72;
      v36[1] = v35[1];
      goto LABEL_47;
    }
  }
  else if (SDWORD1(v67) <= 2)
  {
    goto LABEL_44;
  }
  *(_DWORD *)&v45[4] = 0;
  sub_1002931A8((uint64_t)v45, (uint64_t)&v67);
LABEL_47:
  if ((v60 & 0x4000) == 0)
  {
    *(_DWORD *)int v40 = 1124007936;
    memset(&v40[4], 0, 60);
    double v41 = &v40[8];
    uint64_t v42 = &v43;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int v83 = 33619968;
    uint64_t v84 = v40;
    uint64_t v85 = 0;
    sub_10025401C((uint64_t)&v60, (uint64_t)&v83);
    goto LABEL_54;
  }
  *(_OWORD *)int v40 = v60;
  *(_OWORD *)&v40[16] = v61;
  *(_OWORD *)&v40[32] = v62;
  *(_OWORD *)&v40[48] = v63;
  double v41 = &v40[8];
  uint64_t v42 = &v43;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  if (*((void *)&v63 + 1))
  {
    atomic_fetch_add((atomic_uint *volatile)(*((void *)&v63 + 1) + 20), 1u);
    if (SDWORD1(v60) <= 2)
    {
LABEL_51:
      int v37 = v65;
      uint64_t v38 = v42;
      *(void *)uint64_t v42 = *(void *)v65;
      v38[1] = v37[1];
      goto LABEL_54;
    }
  }
  else if (SDWORD1(v60) <= 2)
  {
    goto LABEL_51;
  }
  *(_DWORD *)&v40[4] = 0;
  sub_1002931A8((uint64_t)v40, (uint64_t)&v60);
LABEL_54:
  LODWORD(v39) = HIDWORD(v50);
  sub_100333D58(v74 & 0xFFF, v51 & 0xFFF, v67 & 0xFFF, v75, v81[0], v52, v58[0], HIDWORD(v51), __SPAIR64__(v50, DWORD2(v51)), *(uint64_t *)((char *)&v50 + 4), v39, *(uint64_t *)&v45[16], HIDWORD(v67) + DWORD2(v67) - 1, *(uint64_t *)&v40[16], HIDWORD(v60) + DWORD2(v60) - 1, *a6, a6[1]);
}

void sub_100334C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000094F4((uint64_t)&a29);
  sub_1000094F4((uint64_t)&a43);
  sub_1000094F4((uint64_t)&a57);
  sub_1000094F4((uint64_t)&a69);
  sub_1000094F4(v69 - 224);
  sub_10020FA00(v69 - 120);
  _Unwind_Resume(a1);
}

void sub_100334D20()
{
}

void sub_100334D28(_Unwind_Exception *a1)
{
  sub_1000094F4(v1 - 224);
  sub_10020FA00(v1 - 120);
  _Unwind_Resume(a1);
}

void sub_100334D44(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 120);
  _Unwind_Resume(a1);
}

uint64_t sub_100334D58(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)(a1 + 4) = 0u;
  long long v5 = (int *)(a1 + 4);
  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 8;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  if (a1 == a2)
  {
    uint64_t v17 = 0;
    int v14 = 0;
    int v13 = 0;
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 1u);
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4(a1);
      }
    }
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) > 0)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 64);
    do
    {
      *(_DWORD *)(v10 + 4 * v9++) = 0;
      uint64_t v11 = *v5;
    }
    while (v9 < v11);
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if ((int)v11 <= 2)
    {
      int v12 = *(_DWORD *)(a2 + 4);
      if (v12 <= 2) {
        goto LABEL_11;
      }
    }
LABEL_14:
    sub_1002931A8(a1, a2);
    int v13 = *(_DWORD *)(a1 + 8);
    int v14 = *(_DWORD *)(a1 + 12);
    goto LABEL_15;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v12 = *(_DWORD *)(a2 + 4);
  if (v12 > 2) {
    goto LABEL_14;
  }
LABEL_11:
  int v13 = *(_DWORD *)(a2 + 8);
  int v14 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 4) = v12;
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 12) = v14;
  long long v15 = *(void **)(a2 + 72);
  uint64_t v16 = *(void **)(a1 + 72);
  void *v16 = *v15;
  v16[1] = v15[1];
LABEL_15:
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = v18;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v17 = (int *)v18;
LABEL_16:
  *(_DWORD *)(a1 + 96) = a3;
  *(unsigned char *)(a1 + 100) = 1;
  uint64_t v19 = (v13 + v14 - 1);
  if ((int)v19 < 1) {
    return a1;
  }
  while (1)
  {
    int v20 = *v17++;
    if (v20 != (__int16)v20) {
      break;
    }
    if (!--v19) {
      return a1;
    }
  }
  *(unsigned char *)(a1 + 100) = 0;
  return a1;
}

void sub_100334F10(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100334F24(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)(a1 + 4) = 0u;
  long long v5 = (int *)(a1 + 4);
  *(_DWORD *)a1 = 1124007936;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 8;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  if (a1 != a2)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    if (v7)
    {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 1u);
      uint64_t v8 = *(void *)(a1 + 56);
      if (v8)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1);
        }
      }
    }
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) <= 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      int v12 = *(_DWORD *)(a2 + 4);
      if (v12 <= 2)
      {
LABEL_11:
        *(_DWORD *)(a1 + 4) = v12;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        int v13 = *(void **)(a2 + 72);
        int v14 = *(void **)(a1 + 72);
        void *v14 = *v13;
        v14[1] = v13[1];
LABEL_14:
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 64);
      do
      {
        *(_DWORD *)(v10 + 4 * v9++) = 0;
        uint64_t v11 = *v5;
      }
      while (v9 < v11);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      if ((int)v11 <= 2)
      {
        int v12 = *(_DWORD *)(a2 + 4);
        if (v12 <= 2) {
          goto LABEL_11;
        }
      }
    }
    sub_1002931A8(a1, a2);
    goto LABEL_14;
  }
LABEL_15:
  *(_DWORD *)(a1 + 96) = a3;
  return a1;
}

void sub_100335080(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100335094(uint64_t a1, unsigned int *a2, int a3, char a4, double a5)
{
  *(_DWORD *)(a1 + 8) = 1124007936;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)a1 = a3;
  LODWORD(v10) = 33619968;
  uint64_t v11 = a1 + 8;
  uint64_t v12 = 0;
  double v7 = (double)(1 << a4);
  sub_10024011C(a2, (uint64_t)&v10, 5, 1.0 / v7, 0.0);
  float v8 = a5 / v7;
  *(float *)(a1 + 4) = v8;
  if ((*(unsigned char *)a1 & 3) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    qmemcpy((void *)sub_1002D19D8(&v10, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, &v10, "SymmColumnVec_32s8u", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 2429);
  }
  return a1;
}

void sub_1003351A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D1A1C((uint64_t *)va);
  sub_1000094F4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003351D4(uint64_t a1, unsigned int *a2, int a3, char a4, double a5)
{
  *(_DWORD *)(a1 + 8) = 1124007936;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = a1 + 16;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)a1 = a3;
  LODWORD(v10) = 33619968;
  uint64_t v11 = a1 + 8;
  uint64_t v12 = 0;
  double v7 = (double)(1 << a4);
  sub_10024011C(a2, (uint64_t)&v10, 5, 1.0 / v7, 0.0);
  float v8 = a5 / v7;
  *(float *)(a1 + 4) = v8;
  if ((*(unsigned char *)a1 & 3) == 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    qmemcpy((void *)sub_1002D19D8(&v10, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, &v10, "SymmColumnSmallVec_32s16s", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 2581);
  }
  return a1;
}

void sub_1003352E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D1A1C((uint64_t *)va);
  sub_1000094F4(v2);
  _Unwind_Resume(a1);
}

int *sub_100335314(int *a1, uint64_t a2, int a3, double a4)
{
  a1[2] = 1124007936;
  uint64_t v6 = a1 + 2;
  *(_OWORD *)(a1 + 3) = 0u;
  double v7 = a1 + 3;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 14) = 0u;
  *((void *)a1 + 11) = 0;
  *((void *)a1 + 9) = a1 + 4;
  *((void *)a1 + 10) = a1 + 22;
  *((void *)a1 + 12) = 0;
  *a1 = a3;
  if (a1 + 2 != (int *)a2)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    if (v9)
    {
      atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 1u);
      uint64_t v10 = *((void *)a1 + 8);
      if (v10)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)(a1 + 2));
        }
      }
    }
    *((void *)a1 + 8) = 0;
    *(_OWORD *)(a1 + 6) = 0u;
    *(_OWORD *)(a1 + 10) = 0u;
    if (a1[3] <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v14 = *(_DWORD *)(a2 + 4);
      if (v14 <= 2)
      {
LABEL_11:
        a1[3] = v14;
        *((void *)a1 + 2) = *(void *)(a2 + 8);
        long long v15 = *(void **)(a2 + 72);
        uint64_t v16 = (void *)*((void *)a1 + 10);
        void *v16 = *v15;
        v16[1] = v15[1];
LABEL_14:
        *(_OWORD *)(a1 + 6) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 48);
        a3 = *a1;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = *((void *)a1 + 9);
      do
      {
        *(_DWORD *)(v12 + 4 * v11++) = 0;
        uint64_t v13 = *v7;
      }
      while (v11 < v13);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v13 <= 2)
      {
        int v14 = *(_DWORD *)(a2 + 4);
        if (v14 <= 2) {
          goto LABEL_11;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_14;
  }
LABEL_15:
  float v17 = a4;
  *((float *)a1 + 1) = v17;
  if ((a3 & 3) == 0)
  {
    v19[0] = 0;
    v19[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v19, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v19, "SymmColumnVec_32f16s", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 2760);
  }
  *((unsigned char *)a1 + 104) = sub_1002D21FC(100);
  return a1;
}

void sub_1003354FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4(v9);
  _Unwind_Resume(a1);
}

void sub_100335528(void **a1, unint64_t a2)
{
  long long v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    double v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_10000B98C();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_10000BA6C();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    float v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      long long v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

uint64_t sub_1003356DC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7 = sub_1003357D8(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_100499BB0;
  *(_DWORD *)(v7 + 216) = a4;
  if ((a4 & 3) == 0 || *(int *)(a1 + 8) >= 6)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 84), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", 84);
    sub_1002D2278(-215, v9, "SymmRowSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3112);
  }
  return a1;
}

void sub_1003357B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100335B90(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003357D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)(a1 + 8) = -1;
  *(void *)a1 = off_100499C08;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1124007936;
  unint64_t v10 = (_DWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 116) = 0u;
  uint64_t v11 = (int *)(a1 + 116);
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = a1 + 120;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 212) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(a2 + 56);
    if (v12)
    {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
      uint64_t v13 = *(void *)(a1 + 72);
      if (v13)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v8 = *(_DWORD *)a2;
      int v17 = *(_DWORD *)(a2 + 4);
      if (v17 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v17;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        unint64_t v18 = *(void **)(a2 + 72);
        uint64_t v19 = *(void **)(a1 + 88);
        *uint64_t v19 = *v18;
        v19[1] = v18[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v15 + 4 * v14++) = 0;
        uint64_t v16 = *v9;
      }
      while (v14 < v16);
      *uint64_t v8 = *(_DWORD *)a2;
      if ((int)v16 <= 2)
      {
        int v17 = *(_DWORD *)(a2 + 4);
        if (v17 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v32) = 33619968;
  uint64_t v33 = a1 + 16;
  uint64_t v34 = 0;
  sub_10025401C(a2, (uint64_t)&v32);
LABEL_17:
  int v21 = *(_DWORD *)(a1 + 24);
  int v20 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v21 + v20 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v21 != 1 && v20 != 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    qmemcpy((void *)sub_1002D19D8(&v32, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v32, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  if (v10 != (_DWORD *)a4)
  {
    uint64_t v22 = *(void *)(a4 + 56);
    if (v22) {
      atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 1u);
    }
    uint64_t v23 = *(void *)(a1 + 168);
    if (v23 && atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v10);
    }
    *(void *)(a1 + 168) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    if (*(int *)(a1 + 116) <= 0)
    {
      _DWORD *v10 = *(_DWORD *)a4;
      int v27 = *(_DWORD *)(a4 + 4);
      if (v27 <= 2)
      {
LABEL_32:
        *(_DWORD *)(a1 + 116) = v27;
        *(void *)(a1 + 120) = *(void *)(a4 + 8);
        uint64_t v28 = *(void **)(a4 + 72);
        char v29 = *(void **)(a1 + 184);
        *char v29 = *v28;
        v29[1] = v28[1];
LABEL_35:
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a4 + 32);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a4 + 48);
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = *(void *)(a1 + 176);
      do
      {
        *(_DWORD *)(v25 + 4 * v24++) = 0;
        uint64_t v26 = *v11;
      }
      while (v24 < v26);
      _DWORD *v10 = *(_DWORD *)a4;
      if ((int)v26 <= 2)
      {
        int v27 = *(_DWORD *)(a4 + 4);
        if (v27 <= 2) {
          goto LABEL_32;
        }
      }
    }
    sub_1002931A8((uint64_t)v10, a4);
    goto LABEL_35;
  }
LABEL_36:
  int v30 = *(_DWORD *)(a4 + 96);
  *(unsigned char *)(a1 + 212) = *(unsigned char *)(a4 + 100);
  *(_DWORD *)(a1 + 208) = v30;
  return a1;
}

void sub_100335B54(_Unwind_Exception *a1)
{
  sub_1003305C4(v2);
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100335B90(uint64_t a1)
{
  *(void *)a1 = off_100499C08;
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 112);
  }
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  if (*(int *)(a1 + 116) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 176);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 116));
  }
  long long v5 = *(void **)(a1 + 184);
  if (v5 != (void *)(a1 + 192)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  uint64_t v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96)) {
    j__free(v9);
  }
  return a1;
}

void sub_100335CB4(uint64_t a1)
{
  sub_100335B90(a1);

  operator delete();
}

unint64_t sub_100335CEC(uint64_t a1, uint64_t a2, __int16 *a3, int a4, int a5)
{
  int v571 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = (uint64_t)(v571 + (v571 < 0)) >> 1;
  uint64_t v10 = a5;
  uint64_t v11 = v571 / 2 * (uint64_t)a5;
  uint64_t v570 = *(void *)(a1 + 32);
  unint64_t v12 = v570 + 4 * (v571 / 2);
  int v13 = *(_DWORD *)(a1 + 216);
  unint64_t result = sub_100337EC4(a1 + 112, a2, a3, a4, a5);
  uint64_t v16 = (int)result;
  int64_t v17 = (int)result;
  unint64_t v18 = (int8x16_t *)(a2 + (int)result + v571 / 2 * (uint64_t)a5);
  int v19 = a5 * a4;
  int v20 = *(_DWORD *)(a1 + 8);
  if (v13)
  {
    if (v20 == 5)
    {
      float v147 = *(float *)v12;
      unsigned int v148 = *(_DWORD *)(v12 + 4);
      unsigned int v149 = *(_DWORD *)(v12 + 8);
      int v150 = v19 - 2;
      if (*(_DWORD *)v12 == -2 && v148 == 0 && v149 == 1)
      {
        if ((int)result <= v150)
        {
          uint64_t v340 = -2 * a5;
          uint64_t v341 = 2 * v10;
          uint64_t v342 = 2 * (int)v10;
          uint64_t v343 = 1 - v342;
          uint64_t v344 = v342 | 1;
          uint64_t v345 = v150;
          unint64_t v346 = v150 - (uint64_t)(int)result;
          if (v346 >= 0x40)
          {
            unint64_t v347 = v346 >> 1;
            v348 = &a3[2 * v16];
            unint64_t v349 = (unint64_t)&a3[4 * (v346 >> 1) + 4 + 2 * v16];
            unint64_t v350 = a2 + v341 + v16 + v11;
            unint64_t v351 = v16 + v11 + (v346 & 0xFFFFFFFFFFFFFFFELL);
            unint64_t v352 = v351 + v341 + a2 + 2;
            unint64_t v353 = v16 + v11 - v341 + a2 + 1;
            unint64_t v354 = a2 + v351 + 2 - v341;
            unint64_t v355 = a2 + v351 + 2;
            unint64_t v356 = a2 + v340 + v16 + v11;
            unint64_t v357 = v351 + v340 + a2 + 1;
            BOOL v358 = (unint64_t)v348 >= v354 || v353 >= v349;
            BOOL v359 = !v358;
            BOOL v360 = (unint64_t)v348 >= v355 || (unint64_t)v18 >= v349;
            BOOL v361 = !v360;
            BOOL v362 = (unint64_t)v348 >= v357 || v356 >= v349;
            BOOL v363 = !v362;
            BOOL v364 = v350 >= v349 || (unint64_t)v348 >= v352;
            if (v364 && !v359 && !v361 && !v363)
            {
              uint64_t v365 = 16;
              if (((v347 + 1) & 0xF) != 0) {
                uint64_t v365 = (v347 + 1) & 0xF;
              }
              uint64_t v366 = 2 * (v347 + 1 - v365);
              int64_t v17 = v366 + v16;
              BOOL v367 = &v18->u8[v366];
              v368 = (float *)&a3[2 * v16];
              uint64_t v369 = ~v347 + v365;
              v15.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
              v370 = (const char *)v18;
              do
              {
                int8x16x2_t v580 = vld2q_s8(v370);
                v370 += 32;
                int32x4_t v371 = (int32x4_t)vqtbl1q_s8(v580.val[0], (int8x16_t)xmmword_100404890);
                int32x4_t v372 = (int32x4_t)vqtbl1q_s8(v580.val[0], (int8x16_t)xmmword_1004048A0);
                int32x4_t v373 = (int32x4_t)vqtbl1q_s8(v580.val[0], (int8x16_t)xmmword_1004048B0);
                int32x4_t v374 = (int32x4_t)vqtbl1q_s8(v580.val[0], (int8x16_t)xmmword_1004048C0);
                BOOL v375 = &v18->i8[v340];
                unsigned long long v376 = (unsigned __int128)vld2q_s8(v375);
                uint32x4_t v377 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v376, (int8x16_t)xmmword_100404890), vaddq_s32(v371, v371));
                uint32x4_t v378 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v376, (int8x16_t)xmmword_1004048A0), vaddq_s32(v372, v372));
                uint32x4_t v379 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v376, (int8x16_t)xmmword_1004048B0), vaddq_s32(v373, v373));
                uint32x4_t v380 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v376, (int8x16_t)xmmword_1004048C0), vaddq_s32(v374, v374));
                BOOL v381 = &v18->i8[v341];
                int8x16x2_t v597 = vld2q_s8(v381);
                uint16x8_t v382 = vmovl_u8(*(uint8x8_t *)v597.val[0].i8);
                uint16x8_t v383 = vmovl_high_u8((uint8x16_t)v597.val[0]);
                v607.val[0] = (float32x4_t)vaddw_high_u16(v380, v383);
                BOOL v384 = &v18->i8[v343];
                unsigned long long v385 = (unsigned __int128)vld2q_s8(v384);
                int32x4_t v386 = (int32x4_t)vqtbl1q_s8(v580.val[1], (int8x16_t)xmmword_1004048C0);
                int32x4_t v387 = (int32x4_t)vqtbl1q_s8(v580.val[1], (int8x16_t)xmmword_1004048B0);
                uint16x8_t v388 = vmovl_high_u8((uint8x16_t)v597.val[1]);
                v616.val[0] = (float32x4_t)vaddw_u16(v379, *(uint16x4_t *)v383.i8);
                uint16x8_t v389 = vmovl_u8(*(uint8x8_t *)v597.val[1].i8);
                v597.val[0] = vqtbl1q_s8(v580.val[1], (int8x16_t)xmmword_1004048A0);
                v580.val[0] = vqtbl1q_s8(v580.val[1], (int8x16_t)xmmword_100404890);
                v619.val[0] = (float32x4_t)vaddw_high_u16(v378, v382);
                v580.val[1] = (int8x16_t)vaddw_u16(v377, *(uint16x4_t *)v382.i8);
                uint32x4_t v390 = vaddw_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v385, (int8x16_t)xmmword_100404890), vaddq_s32((int32x4_t)v580.val[0], (int32x4_t)v580.val[0])), *(uint16x4_t *)v389.i8);
                v391 = v368;
                vst2q_f32(v391, *(float32x4x2_t *)((char *)&v580 + 16));
                v391 += 8;
                v619.val[1] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v385, (int8x16_t)xmmword_1004048A0), vaddq_s32((int32x4_t)v597.val[0], (int32x4_t)v597.val[0])), v389);
                vst2q_f32(v391, v619);
                v616.val[1] = (float32x4_t)vaddw_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v385, (int8x16_t)xmmword_1004048B0), vaddq_s32(v387, v387)), *(uint16x4_t *)v388.i8);
                BOOL v392 = v368 + 16;
                vst2q_f32(v392, v616);
                v393 = v368 + 24;
                v368 += 32;
                unint64_t v18 = (int8x16_t *)v370;
                v607.val[1] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8((int8x16_t)v385, (int8x16_t)xmmword_1004048C0), vaddq_s32(v386, v386)), v388);
                vst2q_f32(v393, v607);
                v369 += 16;
              }
              while (v369);
              unint64_t v18 = (int8x16_t *)v367;
            }
          }
          uint64_t v269 = 0;
          BOOL v394 = (int *)&a3[2 * v17 + 2];
          v395 = &v18->u8[v340];
          BOOL v396 = &v18->u8[v344];
          v397 = &v18->u8[v343];
          do
          {
            int v398 = v396[v269] - 2 * v18->u8[v269 + 1] + v397[v269];
            *(v394 - 1) = v396[v269 - 1] - 2 * v18->u8[v269] + v395[v269];
            *BOOL v394 = v398;
            v269 += 2;
            v394 += 2;
          }
          while (v17 + v269 <= v345);
          goto LABEL_386;
        }
      }
      else if ((int)result <= v150)
      {
        uint64_t v153 = 2 * -(int)v10;
        uint64_t v154 = 2 * v10;
        uint64_t v155 = 1 - v10;
        uint64_t v156 = v10 + 1;
        uint64_t v157 = 1 - 2 * (int)v10;
        uint64_t v158 = v150;
        unint64_t v159 = v150 - (uint64_t)(int)result;
        if (v159 > 0x3F)
        {
          int32x4_t v160 = &a3[2 * (int)result];
          unint64_t v564 = v159 >> 1;
          unint64_t v161 = (unint64_t)&a3[4 * (v159 >> 1) + 4 + 2 * (int)result];
          uint64_t v162 = (int)result + v11;
          unint64_t v569 = a2 + v154 + v162;
          unint64_t v163 = v162 + (v159 & 0xFFFFFFFFFFFFFFFELL);
          unint64_t v568 = v163 + v154 + a2 + 2;
          unint64_t v565 = a2 + v163 + 2 - v154;
          unint64_t v164 = v163 + v156 + a2 + 1;
          unint64_t v165 = a2 + v162 - v10;
          unint64_t v166 = a2 + v163 + 2 - v10;
          unint64_t v167 = a2 + v163 + 2;
          unint64_t v566 = a2 + v153 + v162;
          unint64_t v168 = v163 + v153 + a2 + 1;
          unint64_t v169 = a2 + v10 + v162;
          unint64_t v170 = v163 + v10 + a2 + 1;
          BOOL v172 = (unint64_t)v160 < v565 && v162 - v154 + a2 + 1 < v161;
          BOOL v174 = (unint64_t)v160 < v164 && a2 + v156 + v162 < v161;
          BOOL v176 = (unint64_t)v160 < v166 && v165 < v161;
          BOOL v178 = (unint64_t)v160 < v167 && (unint64_t)v18 < v161;
          BOOL v180 = (unint64_t)v160 < v168 && v566 < v161;
          BOOL v182 = (unint64_t)v160 < v170 && v169 < v161;
          BOOL v183 = v569 >= v161 || (unint64_t)v160 >= v568;
          if (!v183 || v172 || v174 || v176 || v178)
          {
            uint64_t v155 = 1 - v10;
          }
          else
          {
            uint64_t v155 = 1 - v10;
            if (!v180 && !v182)
            {
              uint64_t v184 = (v564 + 1) & 0xF;
              if (!v184) {
                uint64_t v184 = 16;
              }
              uint64_t v185 = 2 * (v564 + 1 - v184);
              int64_t v17 = v185 + v16;
              uint64_t v186 = &v18->u8[v185];
              int32x4_t v187 = vdupq_n_s32(LODWORD(v147));
              int32x4_t v188 = vdupq_n_s32(v148);
              int32x4_t v189 = vdupq_n_s32(v149);
              uint64_t v190 = (float *)&a3[2 * v16];
              uint64_t v191 = ~v564 + v184;
              v15.i64[1] = 0xFFFFFF03FFFFFF02;
              uint64_t v192 = (const char *)v18;
              do
              {
                int8x16x2_t v604 = vld2q_s8(v192);
                v192 += 32;
                int32x2_t v193 = &v18->i8[-v10];
                int8x16x2_t v614 = vld2q_s8(v193);
                int8x8_t v194 = &v18->i8[v10];
                unsigned long long v195 = (unsigned __int128)vld2q_s8(v194);
                uint16x8_t v196 = vaddl_u8(*(uint8x8_t *)&v195, *(uint8x8_t *)v614.val[0].i8);
                uint16x8_t v197 = vaddl_high_u8((uint8x16_t)v195, (uint8x16_t)v614.val[0]);
                int32x4_t v198 = vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[0], (int8x16_t)xmmword_100404890)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v196.i8), v188);
                int32x4_t v199 = vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[0], (int8x16_t)xmmword_1004048A0)), (int32x4_t)vmovl_high_u16(v196), v188);
                int32x4_t v200 = vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[0], (int8x16_t)xmmword_1004048B0)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v197.i8), v188);
                int32x4_t v201 = vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[0], (int8x16_t)xmmword_1004048C0)), (int32x4_t)vmovl_high_u16(v197), v188);
                int32x4_t v202 = &v18->i8[v153];
                unsigned long long v203 = (unsigned __int128)vld2q_s8(v202);
                int16x8_t v204 = &v18->i8[v154];
                int8x16x2_t v618 = vld2q_s8(v204);
                uint16x8_t v205 = vaddl_high_u8((uint8x16_t)v618.val[0], (uint8x16_t)v203);
                uint16x8_t v206 = vaddl_u8(*(uint8x8_t *)v618.val[0].i8, *(uint8x8_t *)&v203);
                v589.val[0] = (float32x4_t)vmlaq_s32(v201, (int32x4_t)vmovl_high_u16(v205), v189);
                uint64_t v207 = &v18->i8[v156];
                unsigned long long v208 = (unsigned __int128)vld2q_s8(v207);
                uint16x8_t v209 = vaddl_high_u8((uint8x16_t)v208, (uint8x16_t)v614.val[1]);
                uint64_t v210 = &v18->i8[v157];
                unsigned long long v211 = (unsigned __int128)vld2q_s8(v210);
                uint16x8_t v212 = vaddl_high_u8((uint8x16_t)v618.val[1], (uint8x16_t)v211);
                v596.val[0] = (float32x4_t)vmlaq_s32(v200, (int32x4_t)vmovl_u16(*(uint16x4_t *)v205.i8), v189);
                v606.val[0] = (float32x4_t)vmlaq_s32(v199, (int32x4_t)vmovl_high_u16(v206), v189);
                v614.val[0] = (int8x16_t)vaddl_u8(*(uint8x8_t *)&v208, *(uint8x8_t *)v614.val[1].i8);
                v614.val[1] = (int8x16_t)vaddl_u8(*(uint8x8_t *)v618.val[1].i8, *(uint8x8_t *)&v211);
                v610.val[0] = (float32x4_t)vmlaq_s32(v198, (int32x4_t)vmovl_u16(*(uint16x4_t *)v206.i8), v189);
                v610.val[1] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[1], (int8x16_t)xmmword_100404890)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v614.val[0].i8), v188), (int32x4_t)vmovl_u16(*(uint16x4_t *)v614.val[1].i8), v189);
                unsigned int v213 = v190;
                vst2q_f32(v213, v610);
                v213 += 8;
                v606.val[1] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[1], (int8x16_t)xmmword_1004048A0)), (int32x4_t)vmovl_high_u16((uint16x8_t)v614.val[0]), v188), (int32x4_t)vmovl_high_u16((uint16x8_t)v614.val[1]), v189);
                vst2q_f32(v213, v606);
                v596.val[1] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[1], (int8x16_t)xmmword_1004048B0)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v209.i8), v188), (int32x4_t)vmovl_u16(*(uint16x4_t *)v212.i8), v189);
                unsigned int v214 = v190 + 16;
                vst2q_f32(v214, v596);
                v589.val[1] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmulq_s32(v187, (int32x4_t)vqtbl1q_s8(v604.val[1], (int8x16_t)xmmword_1004048C0)), (int32x4_t)vmovl_high_u16(v209), v188), (int32x4_t)vmovl_high_u16(v212), v189);
                __int16 v215 = v190 + 24;
                vst2q_f32(v215, v589);
                v190 += 32;
                unint64_t v18 = (int8x16_t *)v192;
                v191 += 16;
              }
              while (v191);
              unint64_t v18 = (int8x16_t *)v186;
            }
          }
        }
        uint64_t v269 = 0;
        v510 = (int *)&a3[2 * v17 + 2];
        uint64_t v511 = &v18->u8[v157];
        uint64_t v512 = &v18->u8[v153];
        uint64_t v513 = &v18->u8[v154];
        uint64_t v514 = &v18->u8[v155];
        v515 = &v18->u8[v156];
        do
        {
          int v516 = (v515[v269] + v514[v269]) * v148
               + LODWORD(v147) * v18->u8[v269 + 1]
               + (v513[v269 + 1] + v511[v269]) * v149;
          *(v510 - 1) = (v18->u8[v10 + v269] + v514[v269 - 1]) * v148
                      + LODWORD(v147) * v18->u8[v269]
                      + (v513[v269] + v512[v269]) * v149;
          int *v510 = v516;
          v269 += 2;
          v510 += 2;
        }
        while (v17 + v269 <= v158);
        goto LABEL_386;
      }
      goto LABEL_387;
    }
    if (v20 != 3)
    {
      if (v20 == 1 && *(_DWORD *)v12 == 1)
      {
        int v62 = v19 - 2;
        if ((int)result <= v19 - 2)
        {
          unint64_t v63 = v62 - (uint64_t)(int)result;
          if (v63 < 0x1E) {
            goto LABEL_51;
          }
          unint64_t v64 = (unint64_t)&a3[2 * (int)result];
          unint64_t v65 = (unint64_t)&a3[4 * (v63 >> 1) + 4 + 2 * (int)result];
          uint64_t v66 = v11 + 2 * (int)result;
          long long v67 = (const char *)(a2 + v66);
          if (v64 < v66 + (v63 & 0xFFFFFFFFFFFFFFFELL) + a2 + 2 && (unint64_t)v67 < v65) {
            goto LABEL_51;
          }
          uint64_t v69 = (v63 >> 1) + 1;
          int64_t v17 = v16 + 2 * (v69 & 0xFFFFFFFFFFFFFFF0);
          long long v70 = (float *)&a3[2 * v16];
          v15.i64[1] = 0xFFFFFF03FFFFFF02;
          unint64_t v71 = v69 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int8x16x2_t v577 = vld2q_s8(v67);
            v67 += 32;
            v582.val[0] = (float32x4_t)vqtbl1q_s8(v577.val[0], (int8x16_t)xmmword_1004048C0);
            v587.val[0] = (float32x4_t)vqtbl1q_s8(v577.val[0], (int8x16_t)xmmword_1004048B0);
            v594.val[0] = (float32x4_t)vqtbl1q_s8(v577.val[0], (int8x16_t)xmmword_1004048A0);
            v602.val[0] = (float32x4_t)vqtbl1q_s8(v577.val[0], (int8x16_t)xmmword_100404890);
            v587.val[1] = (float32x4_t)vqtbl1q_s8(v577.val[1], (int8x16_t)xmmword_1004048B0);
            v602.val[1] = (float32x4_t)vqtbl1q_s8(v577.val[1], (int8x16_t)xmmword_100404890);
            int v72 = v70;
            vst2q_f32(v72, v602);
            v72 += 8;
            v594.val[1] = (float32x4_t)vqtbl1q_s8(v577.val[1], (int8x16_t)xmmword_1004048A0);
            vst2q_f32(v72, v594);
            uint64_t v73 = v70 + 16;
            vst2q_f32(v73, v587);
            long long v74 = v70 + 24;
            v70 += 32;
            v582.val[1] = (float32x4_t)vqtbl1q_s8(v577.val[1], (int8x16_t)xmmword_1004048C0);
            vst2q_f32(v74, v582);
            v71 -= 16;
          }
          while (v71);
          if (v69 != (v69 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_51:
            long long v75 = &a3[2 * v17 + 2];
            do
            {
              int v76 = v18->u8[v17 + 1];
              *((_DWORD *)v75 - 1) = v18->u8[v17];
              *(_DWORD *)long long v75 = v76;
              v17 += 2;
              v75 += 4;
            }
            while (v17 <= v62);
          }
          unint64_t result = v17;
          int64_t v17 = (int)v17;
        }
        unint64_t v18 = (int8x16_t *)((char *)v18 + v17);
      }
      goto LABEL_387;
    }
    unsigned int v216 = *(_DWORD *)v12;
    if (*(_DWORD *)v12 == -2)
    {
      unsigned int v217 = *(_DWORD *)(v12 + 4);
      if (v217 == 1)
      {
        int v399 = v19 - 2;
        if ((int)result <= v19 - 2)
        {
          uint64_t v400 = v10 + 1;
          unint64_t v401 = v399 - (uint64_t)(int)result;
          if (v401 >= 0x40)
          {
            unint64_t v402 = v401 >> 1;
            uint64_t v403 = &a3[2 * (int)result];
            unint64_t v404 = (unint64_t)&a3[4 * (v401 >> 1) + 4 + 2 * (int)result];
            unint64_t v405 = a2 + v400 + (int)result + v11;
            unint64_t v406 = (int)result + v11 + (v401 & 0xFFFFFFFFFFFFFFFELL);
            unint64_t v407 = v406 + v400 + a2 + 1;
            unint64_t v408 = a2 + v406 + 2;
            unint64_t v409 = a2 + (int)result + v11 - v10;
            unint64_t v410 = a2 + v406 + 2 - v10;
            unint64_t v411 = a2 + v10 + v16 + v11;
            unint64_t v412 = v406 + v10 + a2 + 1;
            BOOL v413 = (unint64_t)v403 >= v408 || (unint64_t)v18 >= v404;
            BOOL v414 = !v413;
            BOOL v415 = (unint64_t)v403 >= v410 || v409 >= v404;
            BOOL v416 = !v415;
            BOOL v417 = (unint64_t)v403 >= v412 || v411 >= v404;
            BOOL v418 = !v417;
            BOOL v419 = v405 >= v404 || (unint64_t)v403 >= v407;
            if (v419 && !v414 && !v416 && !v418)
            {
              uint64_t v420 = 16;
              if (((v402 + 1) & 0xF) != 0) {
                uint64_t v420 = (v402 + 1) & 0xF;
              }
              uint64_t v421 = 2 * (v402 + 1 - v420);
              int64_t v17 = v421 + v16;
              uint16x8_t v422 = &v18->u8[v421];
              uint16x8_t v423 = (float *)&a3[2 * v16];
              uint64_t v424 = ~v402 + v420;
              v15.i64[1] = 0xFFFFFF03FFFFFF02;
              int16x4_t v425 = (const char *)v18;
              do
              {
                uint32x4_t v426 = &v18->i8[-v10];
                int8x16x2_t v585 = vld2q_s8(v426);
                int8x16x2_t v581 = vld2q_s8(v425);
                v425 += 32;
                int32x4_t v427 = (int32x4_t)vqtbl1q_s8(v581.val[0], (int8x16_t)xmmword_100404890);
                int32x4_t v428 = (int32x4_t)vqtbl1q_s8(v581.val[0], (int8x16_t)xmmword_1004048A0);
                int32x4_t v429 = (int32x4_t)vqtbl1q_s8(v581.val[0], (int8x16_t)xmmword_1004048B0);
                int32x4_t v430 = (int32x4_t)vqtbl1q_s8(v581.val[0], (int8x16_t)xmmword_1004048C0);
                uint32x4_t v431 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[0], (int8x16_t)xmmword_100404890), vaddq_s32(v427, v427));
                uint32x4_t v432 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[0], (int8x16_t)xmmword_1004048A0), vaddq_s32(v428, v428));
                uint32x4_t v433 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[0], (int8x16_t)xmmword_1004048B0), vaddq_s32(v429, v429));
                uint16x8_t v434 = &v18->i8[v10];
                unsigned long long v435 = (unsigned __int128)vld2q_s8(v434);
                uint16x8_t v436 = vmovl_u8(*(uint8x8_t *)&v435);
                uint16x8_t v437 = vmovl_high_u8((uint8x16_t)v435);
                v609.val[0] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[0], (int8x16_t)xmmword_1004048C0), vaddq_s32(v430, v430)), v437);
                uint16x8_t v438 = &v18->i8[v400];
                unsigned long long v439 = (unsigned __int128)vld2q_s8(v438);
                int32x4_t v440 = (int32x4_t)vqtbl1q_s8(v585.val[1], (int8x16_t)xmmword_1004048C0);
                int32x4_t v441 = (int32x4_t)vqtbl1q_s8(v581.val[1], (int8x16_t)xmmword_1004048B0);
                uint32x4_t v442 = (uint32x4_t)vsubq_s32((int32x4_t)vqtbl1q_s8(v585.val[1], (int8x16_t)xmmword_1004048B0), vaddq_s32(v441, v441));
                uint16x8_t v443 = vmovl_high_u8((uint8x16_t)v439);
                v617.val[0] = (float32x4_t)vaddw_u16(v433, *(uint16x4_t *)v437.i8);
                uint16x8_t v444 = vmovl_u8(*(uint8x8_t *)&v439);
                int32x4_t v445 = (int32x4_t)vqtbl1q_s8(v585.val[1], (int8x16_t)xmmword_1004048A0);
                v585.val[0] = vqtbl1q_s8(v585.val[1], (int8x16_t)xmmword_100404890);
                v585.val[1] = vqtbl1q_s8(v581.val[1], (int8x16_t)xmmword_100404890);
                v613.val[0] = (float32x4_t)vaddw_high_u16(v432, v436);
                v598.val[0] = (float32x4_t)vaddw_u16(v431, *(uint16x4_t *)v436.i8);
                v598.val[1] = (float32x4_t)vaddw_u16((uint32x4_t)vsubq_s32((int32x4_t)v585.val[0], vaddq_s32((int32x4_t)v585.val[1], (int32x4_t)v585.val[1])), *(uint16x4_t *)v444.i8);
                v585.val[0] = vqtbl1q_s8(v581.val[1], (int8x16_t)xmmword_1004048A0);
                uint8x16_t v446 = v423;
                vst2q_f32(v446, v598);
                v446 += 8;
                v613.val[1] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v445, vaddq_s32((int32x4_t)v585.val[0], (int32x4_t)v585.val[0])), v444);
                vst2q_f32(v446, v613);
                v617.val[1] = (float32x4_t)vaddw_u16(v442, *(uint16x4_t *)v443.i8);
                uint16x8_t v447 = v423 + 16;
                vst2q_f32(v447, v617);
                v581.val[0] = vqtbl1q_s8(v581.val[1], (int8x16_t)xmmword_1004048C0);
                uint8x16_t v448 = v423 + 24;
                v423 += 32;
                unint64_t v18 = (int8x16_t *)v425;
                v609.val[1] = (float32x4_t)vaddw_high_u16((uint32x4_t)vsubq_s32(v440, vaddq_s32((int32x4_t)v581.val[0], (int32x4_t)v581.val[0])), v443);
                vst2q_f32(v448, v609);
                v424 += 16;
              }
              while (v424);
              unint64_t v18 = (int8x16_t *)v422;
            }
          }
          uint64_t v269 = 0;
          int8x16_t v449 = (int *)&a3[2 * v17 + 2];
          int16x4_t v450 = &v18->u8[v400];
          do
          {
            int v451 = v450[v269] - 2 * v18->u8[v269 + 1] + v18->u8[1 - v10 + v269];
            *(v449 - 1) = v18->u8[v10 + v269] - 2 * v18->u8[v269] + v18->u8[v269 - v10];
            *int8x16_t v449 = v451;
            v269 += 2;
            v449 += 2;
          }
          while (v17 + v269 <= v399);
          goto LABEL_386;
        }
        goto LABEL_387;
      }
    }
    else if (v216 == 2)
    {
      unsigned int v217 = *(_DWORD *)(v12 + 4);
      if (v217 == 1)
      {
        int v218 = v19 - 2;
        if ((int)result <= v19 - 2)
        {
          uint64_t v219 = v10 + 1;
          unint64_t v220 = v218 - (uint64_t)(int)result;
          if (v220 >= 0x40)
          {
            unint64_t v221 = v220 >> 1;
            uint16x8_t v222 = &a3[2 * (int)result];
            unint64_t v223 = (unint64_t)&a3[4 * (v220 >> 1) + 4 + 2 * (int)result];
            unint64_t v224 = a2 + v219 + (int)result + v11;
            unint64_t v225 = (int)result + v11 + (v220 & 0xFFFFFFFFFFFFFFFELL);
            unint64_t v226 = v225 + v219 + a2 + 1;
            unint64_t v227 = a2 + v225 + 2;
            unint64_t v228 = a2 + (int)result + v11 - v10;
            unint64_t v229 = a2 + v225 + 2 - v10;
            unint64_t v230 = a2 + v10 + v16 + v11;
            unint64_t v231 = v225 + v10 + a2 + 1;
            BOOL v232 = (unint64_t)v222 >= v227 || (unint64_t)v18 >= v223;
            BOOL v233 = !v232;
            BOOL v234 = (unint64_t)v222 >= v229 || v228 >= v223;
            BOOL v235 = !v234;
            BOOL v236 = (unint64_t)v222 >= v231 || v230 >= v223;
            BOOL v237 = !v236;
            BOOL v238 = v224 >= v223 || (unint64_t)v222 >= v226;
            if (v238 && !v233 && !v235 && !v237)
            {
              uint64_t v239 = 16;
              if (((v221 + 1) & 0xF) != 0) {
                uint64_t v239 = (v221 + 1) & 0xF;
              }
              uint64_t v240 = 2 * (v221 + 1 - v239);
              int64_t v17 = v240 + v16;
              int32x4_t v241 = &v18->u8[v240];
              uint16x8_t v242 = (float *)&a3[2 * v16];
              uint64_t v243 = ~v221 + v239;
              v15.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
              unsigned int v244 = (const char *)v18;
              do
              {
                uint64_t v245 = &v18->i8[-v10];
                int8x16x2_t v584 = vld2q_s8(v245);
                uint16x8_t v246 = vmovl_high_u8((uint8x16_t)v584.val[0]);
                int8x16x2_t v579 = vld2q_s8(v244);
                v244 += 32;
                uint16x8_t v247 = vmovl_u8(*(uint8x8_t *)v584.val[0].i8);
                int32x4_t v248 = (int32x4_t)vqtbl1q_s8(v579.val[0], (int8x16_t)xmmword_100404890);
                int32x4_t v249 = (int32x4_t)vqtbl1q_s8(v579.val[0], (int8x16_t)xmmword_1004048A0);
                int32x4_t v250 = (int32x4_t)vqtbl1q_s8(v579.val[0], (int8x16_t)xmmword_1004048B0);
                int32x4_t v251 = (int32x4_t)vqtbl1q_s8(v579.val[0], (int8x16_t)xmmword_1004048C0);
                uint32x4_t v252 = vaddw_u16((uint32x4_t)vaddq_s32(v248, v248), *(uint16x4_t *)v247.i8);
                uint32x4_t v253 = vaddw_high_u16((uint32x4_t)vaddq_s32(v249, v249), v247);
                uint32x4_t v254 = vaddw_u16((uint32x4_t)vaddq_s32(v250, v250), *(uint16x4_t *)v246.i8);
                int v255 = &v18->i8[v10];
                unsigned long long v256 = (unsigned __int128)vld2q_s8(v255);
                uint16x8_t v257 = vmovl_u8(*(uint8x8_t *)&v256);
                unsigned int v258 = &v18->i8[v219];
                unsigned long long v259 = (unsigned __int128)vld2q_s8(v258);
                uint16x8_t v260 = vmovl_high_u8((uint8x16_t)v256);
                v612.val[0] = (float32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vaddq_s32(v251, v251), v246), v260);
                uint16x8_t v261 = vmovl_high_u8((uint8x16_t)v584.val[1]);
                uint16x8_t v262 = vmovl_high_u8((uint8x16_t)v259);
                v600.val[0] = (float32x4_t)vaddw_u16(v254, *(uint16x4_t *)v260.i8);
                int32x4_t v263 = (int32x4_t)vqtbl1q_s8(v579.val[1], (int8x16_t)xmmword_1004048B0);
                v584.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v584.val[1].i8);
                v615.val[0] = (float32x4_t)vaddw_high_u16(v253, v257);
                v584.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)&v259);
                v592.val[0] = (float32x4_t)vaddw_u16(v252, *(uint16x4_t *)v257.i8);
                int32x4_t v264 = (int32x4_t)vqtbl1q_s8(v579.val[1], (int8x16_t)xmmword_100404890);
                v592.val[1] = (float32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vaddq_s32(v264, v264), *(uint16x4_t *)v584.val[0].i8), *(uint16x4_t *)v584.val[1].i8);
                int32x4_t v265 = (int32x4_t)vqtbl1q_s8(v579.val[1], (int8x16_t)xmmword_1004048A0);
                int v266 = v242;
                vst2q_f32(v266, v592);
                v266 += 8;
                v615.val[1] = (float32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vaddq_s32(v265, v265), (uint16x8_t)v584.val[0]), (uint16x8_t)v584.val[1]);
                vst2q_f32(v266, v615);
                v600.val[1] = (float32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)vaddq_s32(v263, v263), *(uint16x4_t *)v261.i8), *(uint16x4_t *)v262.i8);
                int v267 = v242 + 16;
                vst2q_f32(v267, v600);
                v579.val[0] = vqtbl1q_s8(v579.val[1], (int8x16_t)xmmword_1004048C0);
                int v268 = v242 + 24;
                v242 += 32;
                unint64_t v18 = (int8x16_t *)v244;
                v612.val[1] = (float32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)v579.val[0], (int32x4_t)v579.val[0]), v261), v262);
                vst2q_f32(v268, v612);
                v243 += 16;
              }
              while (v243);
              unint64_t v18 = (int8x16_t *)v241;
            }
          }
          uint64_t v269 = 0;
          unsigned int v270 = (int *)&a3[2 * v17 + 2];
          __int16 v271 = &v18->u8[v219];
          do
          {
            int v272 = v18->u8[1 - v10 + v269] + 2 * v18->u8[v269 + 1] + v271[v269];
            *(v270 - 1) = v18->u8[v269 - v10] + 2 * v18->u8[v269] + v18->u8[v10 + v269];
            *unsigned int v270 = v272;
            v269 += 2;
            v270 += 2;
          }
          while (v17 + v269 <= v218);
LABEL_386:
          unint64_t result = (v17 + v269);
          unint64_t v18 = (int8x16_t *)((char *)v18 + v269);
          goto LABEL_387;
        }
        goto LABEL_387;
      }
    }
    else
    {
      unsigned int v217 = *(_DWORD *)(v12 + 4);
    }
    int v452 = v19 - 2;
    if ((int)result <= v19 - 2)
    {
      uint64_t v453 = v10 + 1;
      unint64_t v454 = v452 - (uint64_t)(int)result;
      if (v454 >= 0x20)
      {
        unint64_t v455 = v454 >> 1;
        uint8x16_t v456 = &a3[2 * (int)result];
        unint64_t v457 = (unint64_t)&a3[4 * (v454 >> 1) + 4 + 2 * (int)result];
        unint64_t v458 = a2 + v453 + (int)result + v11;
        unint64_t v459 = (int)result + v11 + (v454 & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v460 = v459 + v453 + a2 + 1;
        unint64_t v461 = a2 + (int)result + v11 - v10;
        unint64_t v462 = a2 + v459 + 2 - v10;
        unint64_t v463 = a2 + v459 + 2;
        unint64_t v464 = a2 + v10 + (int)result + v11;
        unint64_t v465 = v459 + v10 + a2 + 1;
        BOOL v466 = (unint64_t)v456 >= v462 || v461 >= v457;
        BOOL v467 = !v466;
        BOOL v468 = (unint64_t)v456 >= v463 || (unint64_t)v18 >= v457;
        BOOL v469 = !v468;
        BOOL v470 = (unint64_t)v456 >= v465 || v464 >= v457;
        BOOL v471 = !v470;
        BOOL v472 = v458 >= v457 || (unint64_t)v456 >= v460;
        if (v472 && !v467 && !v469 && !v471)
        {
          uint64_t v473 = 16;
          if (((v455 + 1) & 0xF) != 0) {
            uint64_t v473 = (v455 + 1) & 0xF;
          }
          uint64_t v474 = 2 * (v455 + 1 - v473);
          int64_t v17 = v474 + v16;
          uint8x16_t v475 = &v18->u8[v474];
          int32x4_t v476 = vdupq_n_s32(v216);
          int32x4_t v477 = vdupq_n_s32(v217);
          int16x8_t v478 = (float *)&a3[2 * v16];
          uint64_t v479 = ~v455 + v473;
          v15.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
          int16x8_t v480 = (const char *)v18;
          do
          {
            int8x16x2_t v599 = vld2q_s8(v480);
            v480 += 32;
            uint16x8_t v481 = &v18->i8[-v10];
            int8x16x2_t v608 = vld2q_s8(v481);
            uint16x8_t v482 = &v18->i8[v10];
            unsigned long long v483 = (unsigned __int128)vld2q_s8(v482);
            uint16x8_t v484 = vaddl_high_u8((uint8x16_t)v483, (uint8x16_t)v608.val[0]);
            uint16x8_t v485 = vaddl_u8(*(uint8x8_t *)&v483, *(uint8x8_t *)v608.val[0].i8);
            uint32x4_t v486 = &v18->i8[v453];
            unsigned long long v487 = (unsigned __int128)vld2q_s8(v486);
            v605.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[0], (int8x16_t)xmmword_1004048C0)), (int32x4_t)vmovl_high_u16(v484), v477);
            uint16x8_t v488 = vaddl_high_u8((uint8x16_t)v487, (uint8x16_t)v608.val[1]);
            v611.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[0], (int8x16_t)xmmword_1004048B0)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v484.i8), v477);
            v586.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[0], (int8x16_t)xmmword_1004048A0)), (int32x4_t)vmovl_high_u16(v485), v477);
            v608.val[0] = (int8x16_t)vaddl_u8(*(uint8x8_t *)&v487, *(uint8x8_t *)v608.val[1].i8);
            v591.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[0], (int8x16_t)xmmword_100404890)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v485.i8), v477);
            v591.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[1], (int8x16_t)xmmword_100404890)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v608.val[0].i8), v477);
            uint8x16_t v489 = v478;
            vst2q_f32(v489, v591);
            v489 += 8;
            v586.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[1], (int8x16_t)xmmword_1004048A0)), (int32x4_t)vmovl_high_u16((uint16x8_t)v608.val[0]), v477);
            vst2q_f32(v489, v586);
            v611.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[1], (int8x16_t)xmmword_1004048B0)), (int32x4_t)vmovl_u16(*(uint16x4_t *)v488.i8), v477);
            uint32x4_t v490 = v478 + 16;
            vst2q_f32(v490, v611);
            v605.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(v476, (int32x4_t)vqtbl1q_s8(v599.val[1], (int8x16_t)xmmword_1004048C0)), (int32x4_t)vmovl_high_u16(v488), v477);
            uint16x8_t v491 = v478 + 24;
            vst2q_f32(v491, v605);
            v478 += 32;
            unint64_t v18 = (int8x16_t *)v480;
            v479 += 16;
          }
          while (v479);
          unint64_t v18 = (int8x16_t *)v475;
        }
      }
      uint64_t v269 = 0;
      int16x8_t v492 = (int *)&a3[2 * v17 + 2];
      uint16x8_t v493 = &v18->u8[v453];
      do
      {
        int v494 = v216 * v18->u8[v269 + 1] + (v493[v269] + v18->u8[1 - v10 + v269]) * v217;
        *(v492 - 1) = v216 * v18->u8[v269] + (v18->u8[v10 + v269] + v18->u8[v269 - v10]) * v217;
        *int16x8_t v492 = v494;
        v269 += 2;
        v492 += 2;
      }
      while (v17 + v269 <= v452);
      goto LABEL_386;
    }
LABEL_387:
    if ((int)result >= v19) {
      return result;
    }
    if (v571 < 2)
    {
      unint64_t v517 = v19 - (uint64_t)(int)result;
      if (v517 < 8
        || ((unint64_t v518 = (unint64_t)&a3[2 * (int)result], v519 = &a3[2 * v19],
                                                            v518 < (unint64_t)v18->u64 + v517)
          ? (BOOL v520 = v18 >= (int8x16_t *)v519)
          : (BOOL v520 = 1),
            v520 ? (char v521 = 0) : (char v521 = 1),
            v12 < (unint64_t)v519 ? (BOOL v522 = v518 >= v570 + 4 * v9 + 4) : (BOOL v522 = 1),
            !v522 || (v521 & 1) != 0))
      {
        unint64_t v544 = (int)result;
        unsigned int v545 = (unsigned __int8 *)v18;
        goto LABEL_415;
      }
      if (v517 >= 0x20)
      {
        unint64_t v523 = v517 & 0xFFFFFFFFFFFFFFE0;
        int32x4_t v549 = (int32x4_t)vld1q_dup_f32((const float *)v12);
        int v550 = v18 + 1;
        uint64_t v551 = (uint64_t)&a3[2 * (int)result + 32];
        v15.i64[1] = 0xFFFFFF03FFFFFF02;
        unint64_t v552 = v517 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          int8x16_t v553 = v550[-1];
          int32x4_t v554 = (int32x4_t)vqtbl1q_s8(*v550, (int8x16_t)xmmword_1004048B0);
          int32x4_t v555 = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(*v550, (int8x16_t)xmmword_1004048C0));
          int32x4_t v556 = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(*v550, (int8x16_t)xmmword_100404890));
          int32x4_t v557 = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(*v550, (int8x16_t)xmmword_1004048A0));
          *(int32x4_t *)(v551 - 64) = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(v553, (int8x16_t)xmmword_100404890));
          *(int32x4_t *)(v551 - 48) = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(v553, (int8x16_t)xmmword_1004048A0));
          *(int32x4_t *)(v551 - 32) = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(v553, (int8x16_t)xmmword_1004048B0));
          *(int32x4_t *)(v551 - 16) = vmulq_s32(v549, (int32x4_t)vqtbl1q_s8(v553, (int8x16_t)xmmword_1004048C0));
          *(int32x4_t *)uint64_t v551 = v556;
          *(int32x4_t *)(v551 + 16) = v557;
          *(int32x4_t *)(v551 + 32) = vmulq_s32(v549, v554);
          *(int32x4_t *)(v551 + 48) = v555;
          v550 += 2;
          v551 += 128;
          v552 -= 32;
        }
        while (v552);
        if (v517 == v523) {
          return result;
        }
        if ((v517 & 0x18) == 0)
        {
          unsigned int v545 = &v18->u8[v523];
          unint64_t v544 = v523 + (int)result;
          goto LABEL_415;
        }
      }
      else
      {
        unint64_t v523 = 0;
      }
      unint64_t v544 = (v517 & 0xFFFFFFFFFFFFFFF8) + (int)result;
      unsigned int v545 = &v18->u8[v517 & 0xFFFFFFFFFFFFFFF8];
      int32x4_t v558 = (int32x4_t)vld1q_dup_f32((const float *)v12);
      unsigned int v559 = &v18->u8[v523];
      unint64_t v560 = v523 - (v517 & 0xFFFFFFFFFFFFFFF8);
      int v561 = (int32x4_t *)&a3[2 * v523 + 2 * (int)result];
      do
      {
        uint64_t v562 = *(void *)v559;
        v559 += 8;
        v15.i64[0] = v562;
        int32x4_t v563 = (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1004048A0);
        int32x4_t v15 = vmulq_s32(v558, (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_100404890));
        *int v561 = v15;
        v561[1] = vmulq_s32(v558, v563);
        v561 += 2;
        v560 += 8;
      }
      while (v560);
      if (v517 == (v517 & 0xFFFFFFFFFFFFFFF8)) {
        return result;
      }
LABEL_415:
      unsigned int v546 = &a3[2 * v544];
      unint64_t v547 = v19 - v544;
      do
      {
        int v548 = *v545++;
        *(_DWORD *)unsigned int v546 = *(_DWORD *)v12 * v548;
        v546 += 2;
        --v547;
      }
      while (v547);
      return result;
    }
    uint64_t v524 = (v571 / 2 + 1);
    uint64_t v525 = (int)result;
    unint64_t v526 = v524 - 1;
    uint64_t v527 = 2 * v10;
    int v528 = (unsigned __int8 *)v18 + 2 * v10;
    unint64_t result = v570 + 4 * v9;
    v529 = &v18->u8[v10];
    int v530 = (unsigned __int8 *)v18 - v10;
    for (uint64_t i = (unsigned __int8 *)v18 - 2 * v10; ; ++i)
    {
      int v532 = *(_DWORD *)v12 * v18->u8[0];
      if (v526 >= 2)
      {
        uint64_t v535 = 0;
        uint64_t v536 = 0;
        int v537 = 0;
        unsigned int v538 = (_DWORD *)(result + 8);
        unint64_t v539 = (v524 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v532 += (v530[v535] + v529[v536]) * *(v538 - 1);
          v537 += (i[v535] + v528[v536]) * *v538;
          v536 += v527;
          v538 += 2;
          v535 -= v527;
          v539 -= 2;
        }
        while (v539);
        v532 += v537;
        uint64_t v533 = (v524 - 1) | 1;
        uint64_t v534 = v533 * v10;
        if (v526 == ((v524 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_405;
        }
      }
      else
      {
        uint64_t v533 = 1;
        uint64_t v534 = v10;
      }
      unsigned int v540 = (int *)(result + 4 * v533);
      uint64_t v541 = v524 - v533;
      uint64_t v542 = -v534;
      do
      {
        int v543 = *v540++;
        v532 += (v18->u8[v542] + v18->u8[v534]) * v543;
        v534 += v10;
        v542 -= v10;
        --v541;
      }
      while (v541);
LABEL_405:
      *(_DWORD *)&a3[2 * v525++] = v532;
      unint64_t v18 = (int8x16_t *)((char *)v18 + 1);
      ++v528;
      ++v529;
      ++v530;
      if (v525 == v19) {
        return result;
      }
    }
  }
  if (v20 == 5)
  {
    int v77 = v19 - 2;
    if ((int)result <= v19 - 2)
    {
      unsigned int v78 = *(_DWORD *)(v12 + 4);
      unsigned int v79 = *(_DWORD *)(v12 + 8);
      uint64_t v80 = 2 * (int)v10;
      uint64_t v81 = -2 * v10;
      uint64_t v82 = v10 + 1;
      uint64_t v83 = 1 - v10;
      uint64_t v84 = 1 - v80;
      unint64_t v85 = v77 - (uint64_t)(int)result;
      if (v85 >= 0x40)
      {
        unint64_t v86 = (unint64_t)&a3[2 * (int)result];
        unint64_t v567 = v85 >> 1;
        unint64_t v87 = (unint64_t)&a3[4 * (v85 >> 1) + 4 + 2 * (int)result];
        unint64_t v88 = (int)result + v11 + (v85 & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v89 = a2 + v88 + 2 - v80;
        unint64_t v90 = a2 + v88 + 2 - v10;
        unint64_t v91 = a2 + v82 + (int)result + v11;
        unint64_t v92 = v88 + v82 + a2 + 1;
        unint64_t v93 = v88 + v81 + a2 + 1;
        unint64_t v94 = v88 + v10 + a2 + 1;
        BOOL v96 = v86 < v88 + v80 + a2 + 2 && a2 + v80 + (int)result + v11 < v87;
        BOOL v98 = v86 < v90 && a2 + (int)result + v11 - v10 < v87;
        BOOL v100 = v86 < v92 && v91 < v87;
        BOOL v102 = v86 < v93 && a2 - 2 * v10 + (int)result + v11 < v87;
        BOOL v104 = v86 < v94 && a2 + v10 + (int)result + v11 < v87;
        uint64_t v82 = v10 + 1;
        uint64_t v81 = -2 * v10;
        BOOL v105 = (int)result + v11 - v80 + a2 + 1 >= v87 || v86 >= v89;
        if (!v105 || v96)
        {
          uint64_t v83 = 1 - v10;
          uint64_t v84 = 1 - v80;
        }
        else
        {
          uint64_t v83 = 1 - v10;
          uint64_t v84 = 1 - v80;
          if (!v98 && !v100 && !v102 && !v104)
          {
            uint64_t v106 = (v567 + 1) & 0xF;
            if (!v106) {
              uint64_t v106 = 16;
            }
            uint64_t v107 = 2 * (v567 + 1 - v106);
            int64_t v17 = v107 + (int)result;
            unint64_t v18 = (int8x16_t *)((char *)v18 + v107);
            int32x4_t v108 = vdupq_n_s32(v78);
            int32x4_t v109 = vdupq_n_s32(v79);
            uint64_t v110 = (int)result - v80 + a2 + 1;
            uint64_t v111 = a2 + (int)result + v10 + 1;
            uint64_t v112 = a2 + (int)result - 2 * v10;
            uint64_t v113 = a2 + (int)result + v80;
            uint64_t v114 = a2 + (int)result - v10;
            uint64_t v115 = a2 + (int)result + v10;
            uint64_t v116 = ~v567 + v106;
            int v117 = (float *)&a3[2 * (int)result];
            do
            {
              uint64_t v118 = (const char *)(v115 + v11);
              unsigned long long v119 = (unsigned __int128)vld2q_s8(v118);
              int v120 = (const char *)(v114 + v11);
              int8x16x2_t v595 = vld2q_s8(v120);
              int16x8_t v121 = (int16x8_t)vsubl_high_u8((uint8x16_t)v119, (uint8x16_t)v595.val[0]);
              int16x8_t v122 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v119, *(uint8x8_t *)v595.val[0].i8);
              int32x4_t v123 = vmulq_s32(vmovl_s16(*(int16x4_t *)v122.i8), v108);
              int32x4_t v124 = vmulq_s32(vmovl_high_s16(v122), v108);
              int v125 = (const char *)(v113 + v11);
              int8x16x2_t v603 = vld2q_s8(v125);
              int v126 = (const char *)(v112 + v11);
              unsigned long long v127 = (unsigned __int128)vld2q_s8(v126);
              int16x8_t v128 = (int16x8_t)vsubl_high_u8((uint8x16_t)v603.val[0], (uint8x16_t)v127);
              int16x8_t v129 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v603.val[0].i8, *(uint8x8_t *)&v127);
              int32x4_t v130 = vmlaq_s32(vmulq_s32(vmovl_high_s16(v121), v108), vmovl_high_s16(v128), v109);
              uint64_t v131 = (const char *)(v111 + v11);
              unsigned long long v132 = (unsigned __int128)vld2q_s8(v131);
              int16x8_t v133 = (int16x8_t)vsubl_high_u8((uint8x16_t)v132, (uint8x16_t)v595.val[1]);
              int v134 = (const char *)(v110 + v11);
              unsigned long long v135 = (unsigned __int128)vld2q_s8(v134);
              int16x8_t v136 = (int16x8_t)vsubl_high_u8((uint8x16_t)v603.val[1], (uint8x16_t)v135);
              int32x4_t v15 = vmlaq_s32(vmulq_s32(vmovl_high_s16(v133), v108), vmovl_high_s16(v136), v109);
              v578.val[0] = (float32x4_t)vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v121.i8), v108), vmovl_s16(*(int16x4_t *)v128.i8), v109);
              v578.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v133.i8), v108), vmovl_s16(*(int16x4_t *)v136.i8), v109);
              v583.val[0] = (float32x4_t)vmlaq_s32(v124, vmovl_high_s16(v129), v109);
              v595.val[0] = (int8x16_t)vsubl_u8(*(uint8x8_t *)&v132, *(uint8x8_t *)v595.val[1].i8);
              v595.val[1] = (int8x16_t)vsubl_u8(*(uint8x8_t *)v603.val[1].i8, *(uint8x8_t *)&v135);
              v588.val[0] = (float32x4_t)vmlaq_s32(v123, vmovl_s16(*(int16x4_t *)v129.i8), v109);
              v588.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(vmovl_s16(*(int16x4_t *)v595.val[0].i8), v108), vmovl_s16(*(int16x4_t *)v595.val[1].i8), v109);
              int32x4_t v137 = v117;
              vst2q_f32(v137, v588);
              v137 += 8;
              v583.val[1] = (float32x4_t)vmlaq_s32(vmulq_s32(vmovl_high_s16((int16x8_t)v595.val[0]), v108), vmovl_high_s16((int16x8_t)v595.val[1]), v109);
              vst2q_f32(v137, v583);
              uint64_t v138 = v117 + 16;
              vst2q_f32(v138, v578);
              uint64_t v139 = v117 + 24;
              vst2q_f32(v139, *(float32x4x2_t *)(&v15 - 1));
              v117 += 32;
              v110 += 32;
              v111 += 32;
              v112 += 32;
              v113 += 32;
              v114 += 32;
              v115 += 32;
              v116 += 16;
            }
            while (v116);
          }
        }
      }
      uint64_t v140 = 0;
      unsigned int v141 = (int *)&a3[2 * v17 + 2];
      uint64_t v142 = &v18->u8[v84];
      int32x4_t v143 = &v18->u8[(2 * v10) | 1];
      int32x4_t v144 = &v18->u8[v82];
      uint64_t v145 = &v18->u8[v83];
      do
      {
        int v146 = (v143[v140] - v142[v140]) * v79 + (v144[v140] - v145[v140]) * v78;
        *(v141 - 1) = (v143[v140 - 1] - v18->u8[v81 + v140]) * v79 + (v18->u8[v10 + v140] - v145[v140 - 1]) * v78;
        int *v141 = v146;
        v140 += 2;
        v141 += 2;
      }
      while (v17 + v140 <= v77);
      unint64_t result = (v17 + v140);
      unint64_t v18 = (int8x16_t *)((char *)v18 + v140);
      uint64_t v9 = (uint64_t)(v571 + (v571 < 0)) >> 1;
    }
  }
  else
  {
    if (v20 != 3) {
      goto LABEL_233;
    }
    unsigned int v21 = *(_DWORD *)(v12 + 4);
    int v22 = v19 - 2;
    if (*(_DWORD *)v12) {
      BOOL v23 = 0;
    }
    else {
      BOOL v23 = v21 == 1;
    }
    if (v23)
    {
      if ((int)result > v22) {
        goto LABEL_233;
      }
      uint64_t v273 = v10 + 1;
      uint64_t v274 = v22;
      unint64_t v275 = v22 - (uint64_t)(int)result;
      if (v275 >= 0x40)
      {
        unint64_t v276 = v275 >> 1;
        int8x16_t v277 = &a3[2 * v16];
        unint64_t v278 = (unint64_t)&a3[4 * (v275 >> 1) + 4 + 2 * v16];
        unint64_t v279 = v16 + v11 + (v275 & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v280 = v279 - v10 + a2 + 2;
        unint64_t v281 = v279 + v273 + a2 + 1;
        unint64_t v282 = v279 + v10 + a2 + 1;
        BOOL v283 = (unint64_t)v277 >= v281 || a2 + v273 + v16 + v11 >= v278;
        BOOL v284 = !v283;
        BOOL v285 = (unint64_t)v277 >= v282 || a2 + v10 + v16 + v11 >= v278;
        BOOL v286 = !v285;
        BOOL v287 = a2 + v16 + v11 - v10 >= v278 || (unint64_t)v277 >= v280;
        if (v287 && !v284 && !v286)
        {
          if (((v276 + 1) & 0xF) != 0) {
            uint64_t v288 = (v276 + 1) & 0xF;
          }
          else {
            uint64_t v288 = 16;
          }
          uint64_t v289 = 2 * (v276 + 1 - v288);
          int64_t v17 = v289 + v16;
          unint64_t v18 = (int8x16_t *)((char *)v18 + v289);
          uint16x8_t v290 = (float *)&a3[2 * v16];
          uint64_t v291 = v16 + v11;
          int32x4_t v292 = (const char *)(a2 + v273 + v16 + v11);
          int32x4_t v293 = (const char *)(a2 + v291 - v10);
          int16x8_t v294 = (const char *)(a2 + v10 + v291);
          uint64_t v295 = ~v276 + v288;
          do
          {
            unsigned long long v296 = (unsigned __int128)vld2q_s8(v294);
            v294 += 32;
            float32x4x2_t v575 = (float32x4x2_t)vld2q_s8(v293);
            v293 += 32;
            int16x8_t v297 = (int16x8_t)vsubl_high_u8((uint8x16_t)v296, (uint8x16_t)v575.val[0]);
            unsigned long long v298 = (unsigned __int128)vld2q_s8(v292);
            v292 += 32;
            int16x8_t v299 = (int16x8_t)vsubl_high_u8((uint8x16_t)v298, (uint8x16_t)v575.val[1]);
            v590.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v297.i8);
            int16x8_t v300 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v296, *(uint8x8_t *)v575.val[0].f32);
            int16x8_t v301 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v298, *(uint8x8_t *)v575.val[1].f32);
            v575.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v300.i8);
            v575.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v301.i8);
            v302 = v290;
            vst2q_f32(v302, v575);
            v302 += 8;
            v575.val[0] = (float32x4_t)vmovl_high_s16(v300);
            int32x4_t v15 = vmovl_high_s16(v301);
            vst2q_f32(v302, *(float32x4x2_t *)(&v15 - 1));
            v590.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v299.i8);
            BOOL v303 = v290 + 16;
            vst2q_f32(v303, v590);
            v304 = v290 + 24;
            v290 += 32;
            v573.val[0] = (float32x4_t)vmovl_high_s16(v297);
            v573.val[1] = (float32x4_t)vmovl_high_s16(v299);
            vst2q_f32(v304, v573);
            v295 += 16;
          }
          while (v295);
        }
      }
      uint64_t v58 = 0;
      BOOL v305 = (int *)&a3[2 * v17 + 2];
      v306 = &v18->u8[v273];
      do
      {
        int v307 = v306[v58] - v18->u8[1 - v10 + v58];
        *(v305 - 1) = v18->u8[v10 + v58] - v18->u8[v58 - v10];
        *BOOL v305 = v307;
        v58 += 2;
        v305 += 2;
      }
      while (v17 + v58 <= v274);
    }
    else
    {
      if ((int)result > v22) {
        goto LABEL_233;
      }
      uint64_t v24 = v10 + 1;
      uint64_t v25 = v22;
      unint64_t v26 = v22 - (uint64_t)(int)result;
      if (v26 >= 0x40)
      {
        unint64_t v27 = v26 >> 1;
        uint64_t v28 = &a3[2 * (int)result];
        unint64_t v29 = (unint64_t)&a3[4 * (v26 >> 1) + 4 + 2 * v16];
        unint64_t v30 = v16 + v11 + (v26 & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v31 = v30 - v10 + a2 + 2;
        unint64_t v32 = v30 + v24 + a2 + 1;
        unint64_t v33 = v30 + v10 + a2 + 1;
        BOOL v34 = (unint64_t)v28 >= v32 || a2 + v24 + v16 + v11 >= v29;
        BOOL v35 = !v34;
        BOOL v36 = (unint64_t)v28 >= v33 || a2 + v10 + v16 + v11 >= v29;
        BOOL v37 = !v36;
        BOOL v38 = a2 + v16 + v11 - v10 >= v29 || (unint64_t)v28 >= v31;
        if (v38 && !v35 && !v37)
        {
          if (((v27 + 1) & 0xF) != 0) {
            uint64_t v39 = (v27 + 1) & 0xF;
          }
          else {
            uint64_t v39 = 16;
          }
          uint64_t v40 = 2 * (v27 + 1 - v39);
          int64_t v17 = v40 + v16;
          unint64_t v18 = (int8x16_t *)((char *)v18 + v40);
          int32x4_t v41 = vdupq_n_s32(v21);
          uint64_t v42 = (float *)&a3[2 * v16];
          uint64_t v43 = v16 + v11;
          uint64_t v44 = (const char *)(a2 + v24 + v16 + v11);
          uint64_t v45 = (const char *)(a2 + v43 - v10);
          uint64_t v46 = (const char *)(a2 + v10 + v43);
          uint64_t v47 = ~v27 + v39;
          do
          {
            unsigned long long v48 = (unsigned __int128)vld2q_s8(v46);
            v46 += 32;
            int8x16x2_t v576 = vld2q_s8(v45);
            v45 += 32;
            int16x8_t v49 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v48, *(uint8x8_t *)v576.val[0].i8);
            int16x8_t v50 = (int16x8_t)vsubl_high_u8((uint8x16_t)v48, (uint8x16_t)v576.val[0]);
            int32x4_t v51 = vmovl_s16(*(int16x4_t *)v50.i8);
            unsigned long long v52 = (unsigned __int128)vld2q_s8(v44);
            v44 += 32;
            v593.val[0] = (float32x4_t)vmulq_s32(vmovl_high_s16(v50), v41);
            int16x8_t v53 = (int16x8_t)vsubl_high_u8((uint8x16_t)v52, (uint8x16_t)v576.val[1]);
            v593.val[1] = (float32x4_t)vmulq_s32(vmovl_high_s16(v53), v41);
            v601.val[0] = (float32x4_t)vmulq_s32(v51, v41);
            v601.val[1] = (float32x4_t)vmulq_s32(vmovl_s16(*(int16x4_t *)v53.i8), v41);
            v574.val[0] = (float32x4_t)vmulq_s32(vmovl_high_s16(v49), v41);
            v576.val[0] = (int8x16_t)vsubl_u8(*(uint8x8_t *)&v52, *(uint8x8_t *)v576.val[1].i8);
            v576.val[1] = (int8x16_t)vmulq_s32(vmovl_s16(*(int16x4_t *)v49.i8), v41);
            int32x4_t v54 = vmulq_s32(vmovl_s16(*(int16x4_t *)v576.val[0].i8), v41);
            uint64_t v55 = v42;
            vst2q_f32(v55, *(float32x4x2_t *)((char *)&v576 + 16));
            v55 += 8;
            int32x4_t v15 = vmovl_high_s16((int16x8_t)v576.val[0]);
            v574.val[1] = (float32x4_t)vmulq_s32(v15, v41);
            vst2q_f32(v55, v574);
            long long v56 = v42 + 16;
            vst2q_f32(v56, v601);
            long long v57 = v42 + 24;
            v42 += 32;
            vst2q_f32(v57, v593);
            v47 += 16;
          }
          while (v47);
        }
      }
      uint64_t v58 = 0;
      int32x2_t v59 = (int *)&a3[2 * v17 + 2];
      long long v60 = &v18->u8[v24];
      do
      {
        int v61 = (v60[v58] - v18->u8[1 - v10 + v58]) * v21;
        *(v59 - 1) = (v18->u8[v10 + v58] - v18->u8[v58 - v10]) * v21;
        *int32x2_t v59 = v61;
        v58 += 2;
        v59 += 2;
      }
      while (v17 + v58 <= v25);
    }
    unint64_t result = (v17 + v58);
    unint64_t v18 = (int8x16_t *)((char *)v18 + v58);
  }
LABEL_233:
  if ((int)result >= v19) {
    return result;
  }
  if (v571 >= 2)
  {
    uint64_t v315 = (v9 + 1);
    uint64_t v316 = (int)result;
    unint64_t v317 = v315 - 1;
    uint64_t v318 = 2 * v10;
    BOOL v319 = (unsigned __int8 *)v18 + 2 * v10;
    unint64_t result = v570 + 4 * v9;
    v320 = &v18->u8[v10];
    BOOL v321 = (unsigned __int8 *)v18 - v10;
    for (uint64_t j = (unsigned __int8 *)v18 - 2 * v10; ; ++j)
    {
      int v323 = *(_DWORD *)v12 * v18->u8[0];
      if (v317 >= 2)
      {
        uint64_t v326 = 0;
        uint64_t v327 = 0;
        int v328 = 0;
        BOOL v329 = (_DWORD *)(result + 8);
        unint64_t v330 = (v315 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v323 += (v320[v327] - v321[v326]) * *(v329 - 1);
          v328 += (v319[v327] - j[v326]) * *v329;
          v327 += v318;
          v329 += 2;
          v326 -= v318;
          v330 -= 2;
        }
        while (v330);
        v323 += v328;
        uint64_t v324 = (v315 - 1) | 1;
        uint64_t v325 = v324 * v10;
        if (v317 == ((v315 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_251;
        }
      }
      else
      {
        uint64_t v324 = 1;
        uint64_t v325 = v10;
      }
      v331 = (int *)(result + 4 * v324);
      uint64_t v332 = v315 - v324;
      uint64_t v333 = -v325;
      do
      {
        int v334 = *v331++;
        v323 += (v18->u8[v325] - v18->u8[v333]) * v334;
        v325 += v10;
        v333 -= v10;
        --v332;
      }
      while (v332);
LABEL_251:
      *(_DWORD *)&a3[2 * v316++] = v323;
      unint64_t v18 = (int8x16_t *)((char *)v18 + 1);
      ++v319;
      ++v320;
      ++v321;
      if (v316 == v19) {
        return result;
      }
    }
  }
  unint64_t v308 = v19 - (uint64_t)(int)result;
  if (v308 < 8
    || ((v309 = (unint64_t)&a3[2 * (int)result], BOOL v310 = &a3[2 * v19], v309 < (unint64_t)v18->u64 + v308)
      ? (BOOL v311 = v18 >= (int8x16_t *)v310)
      : (BOOL v311 = 1),
        v311 ? (char v312 = 0) : (char v312 = 1),
        v12 < (unint64_t)v310 ? (BOOL v313 = v309 >= v570 + 4 * v9 + 4) : (BOOL v313 = 1),
        !v313 || (v312 & 1) != 0))
  {
    unint64_t v335 = (int)result;
    BOOL v336 = (unsigned __int8 *)v18;
    goto LABEL_261;
  }
  if (v308 < 0x20)
  {
    unint64_t v314 = 0;
    goto LABEL_378;
  }
  unint64_t v314 = v308 & 0xFFFFFFFFFFFFFFE0;
  int32x4_t v495 = (int32x4_t)vld1q_dup_f32((const float *)v12);
  uint8x16_t v496 = v18 + 1;
  uint64_t v497 = (uint64_t)&a3[2 * (int)result + 32];
  v15.i64[1] = 0xFFFFFF03FFFFFF02;
  unint64_t v498 = v308 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    int8x16_t v499 = v496[-1];
    int32x4_t v500 = (int32x4_t)vqtbl1q_s8(*v496, (int8x16_t)xmmword_1004048B0);
    int32x4_t v501 = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(*v496, (int8x16_t)xmmword_1004048C0));
    int32x4_t v502 = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(*v496, (int8x16_t)xmmword_100404890));
    int32x4_t v503 = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(*v496, (int8x16_t)xmmword_1004048A0));
    *(int32x4_t *)(v497 - 64) = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(v499, (int8x16_t)xmmword_100404890));
    *(int32x4_t *)(v497 - 48) = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(v499, (int8x16_t)xmmword_1004048A0));
    *(int32x4_t *)(v497 - 32) = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(v499, (int8x16_t)xmmword_1004048B0));
    *(int32x4_t *)(v497 - 16) = vmulq_s32(v495, (int32x4_t)vqtbl1q_s8(v499, (int8x16_t)xmmword_1004048C0));
    *(int32x4_t *)uint64_t v497 = v502;
    *(int32x4_t *)(v497 + 16) = v503;
    *(int32x4_t *)(v497 + 32) = vmulq_s32(v495, v500);
    *(int32x4_t *)(v497 + 48) = v501;
    v496 += 2;
    v497 += 128;
    v498 -= 32;
  }
  while (v498);
  if (v308 != v314)
  {
    if ((v308 & 0x18) == 0)
    {
      BOOL v336 = &v18->u8[v314];
      unint64_t v335 = v314 + (int)result;
      goto LABEL_261;
    }
LABEL_378:
    unint64_t v335 = (v308 & 0xFFFFFFFFFFFFFFF8) + (int)result;
    BOOL v336 = &v18->u8[v308 & 0xFFFFFFFFFFFFFFF8];
    int32x4_t v504 = (int32x4_t)vld1q_dup_f32((const float *)v12);
    v505 = &v18->u8[v314];
    unint64_t v506 = v314 - (v308 & 0xFFFFFFFFFFFFFFF8);
    uint16x8_t v507 = (int32x4_t *)&a3[2 * v314 + 2 * (int)result];
    do
    {
      uint64_t v508 = *(void *)v505;
      v505 += 8;
      v15.i64[0] = v508;
      int32x4_t v509 = (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_1004048A0);
      int32x4_t v15 = vmulq_s32(v504, (int32x4_t)vqtbl1q_s8((int8x16_t)v15, (int8x16_t)xmmword_100404890));
      *uint16x8_t v507 = v15;
      v507[1] = vmulq_s32(v504, v509);
      v507 += 2;
      v506 += 8;
    }
    while (v506);
    if (v308 == (v308 & 0xFFFFFFFFFFFFFFF8)) {
      return result;
    }
LABEL_261:
    v337 = &a3[2 * v335];
    unint64_t v338 = v19 - v335;
    do
    {
      int v339 = *v336++;
      *(_DWORD *)v337 = *(_DWORD *)v12 * v339;
      v337 += 2;
      --v338;
    }
    while (v338);
  }
  return result;
}

void sub_100337A4C(uint64_t a1)
{
  sub_100335B90(a1);

  operator delete();
}

unint64_t sub_100337A84(uint64_t a1, uint64_t a2, __int16 *a3, int a4, int a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v10 = *(const float **)(a1 + 32);
  unint64_t result = sub_100337EC4(a1 + 112, a2, a3, a4, a5);
  uint64_t v14 = a5 * (uint64_t)a4;
  int v15 = v14 - 4;
  LODWORD(v16) = result;
  if ((int)result <= (int)v14 - 4)
  {
    uint64_t v17 = (int)result;
    if ((int)v9 <= 1)
    {
      unint64_t v23 = v15 - (uint64_t)(int)result;
      if (v23 < 0x3C) {
        goto LABEL_8;
      }
      unint64_t v37 = v23 >> 2;
      unint64_t v38 = (unint64_t)&a3[2 * (int)result];
      unint64_t v39 = (unint64_t)&a3[8 * (v23 >> 2) + 8 + 2 * (int)result];
      unint64_t v40 = a2 + (int)result;
      unint64_t result = v40;
      BOOL v41 = v38 >= (v23 & 0xFFFFFFFFFFFFFFFCLL) + v17 + a2 + 4 || v40 >= v39;
      BOOL v42 = !v41;
      if ((unint64_t)v10 < v39 && v38 < (unint64_t)(v10 + 1)) {
        goto LABEL_8;
      }
      if (v42) {
        goto LABEL_8;
      }
      unint64_t v44 = v37 + 1;
      uint64_t v45 = (v37 + 1) & 0x7FFFFFFFFFFFFFF0;
      uint64_t v16 = v17 + 4 * v45;
      uint64_t v46 = (float *)&a3[2 * v17];
      uint64_t v47 = (const char *)(a2 + v17);
      v12.i32[1] = -255;
      v13.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
      uint64_t v48 = v45;
      do
      {
        int32x4_t v49 = (int32x4_t)vld1q_dup_f32(v10);
        int8x16x4_t v77 = vld4q_s8(v47);
        v47 += 64;
        v78.val[0] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[0], (int8x16_t)xmmword_100404890));
        v78.val[1] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[1], (int8x16_t)xmmword_100404890));
        v78.val[2] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[2], (int8x16_t)xmmword_100404890));
        v78.val[3] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[3], (int8x16_t)xmmword_100404890));
        int16x8_t v50 = v46;
        vst4q_f32(v50, v78);
        v50 += 16;
        v78.val[0] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[0], (int8x16_t)xmmword_1004048C0));
        v79.val[0] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[0], (int8x16_t)xmmword_1004048B0));
        v80.val[0] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[0], (int8x16_t)xmmword_1004048A0));
        v80.val[1] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[1], (int8x16_t)xmmword_1004048A0));
        v80.val[2] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[2], (int8x16_t)xmmword_1004048A0));
        v80.val[3] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[3], (int8x16_t)xmmword_1004048A0));
        vst4q_f32(v50, v80);
        v79.val[1] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[1], (int8x16_t)xmmword_1004048B0));
        v79.val[2] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[2], (int8x16_t)xmmword_1004048B0));
        v79.val[3] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[3], (int8x16_t)xmmword_1004048B0));
        int32x4_t v51 = v46 + 32;
        vst4q_f32(v51, v79);
        v78.val[1] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[1], (int8x16_t)xmmword_1004048C0));
        v78.val[2] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[2], (int8x16_t)xmmword_1004048C0));
        v78.val[3] = (float32x4_t)vmulq_s32(v49, (int32x4_t)vqtbl1q_s8(v77.val[3], (int8x16_t)xmmword_1004048C0));
        unsigned long long v52 = v46 + 48;
        vst4q_f32(v52, v78);
        v46 += 64;
        v48 -= 16;
      }
      while (v48);
      uint64_t v17 = v16;
      if (v44 != v45)
      {
LABEL_8:
        uint64_t v24 = (int32x4_t *)&a3[2 * v17];
        uint64_t v16 = v17;
        do
        {
          v12.i32[0] = *(_DWORD *)(a2 + v16);
          int32x4_t v25 = (int32x4_t)vld1q_dup_f32(v10);
          int32x4_t v12 = vmulq_s32(v25, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.i8)));
          *v24++ = v12;
          v16 += 4;
        }
        while (v16 <= v15);
      }
    }
    else
    {
      do
      {
        v12.i32[0] = *(_DWORD *)(a2 + v17);
        int32x4_t v18 = (int32x4_t)vld1q_dup_f32(v10);
        int32x4_t v12 = vmulq_s32(v18, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.i8)));
        uint64_t v19 = a2 + a5;
        uint64_t v20 = v9 - 1;
        unsigned int v21 = v10 + 1;
        do
        {
          v18.i32[0] = *(_DWORD *)(v19 + v17);
          int32x4_t v18 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v18.i8));
          int32x4_t v22 = (int32x4_t)vld1q_dup_f32(v21++);
          int32x4_t v12 = vmlaq_s32(v12, v22, v18);
          v19 += a5;
          --v20;
        }
        while (v20);
        *(int32x4_t *)&a3[2 * v17] = v12;
        v17 += 4;
      }
      while (v17 <= v15);
      LODWORD(v16) = v17;
    }
  }
  if ((int)v16 < (int)v14)
  {
    uint64_t v26 = (int)v16;
    if ((int)v9 > 1)
    {
      do
      {
        int v27 = *(_DWORD *)v10 * *(unsigned __int8 *)(a2 + v26);
        uint64_t v28 = a2 + a5;
        uint64_t v29 = v9 - 1;
        unint64_t v30 = (unsigned int *)(v10 + 1);
        do
        {
          unsigned int v31 = *v30++;
          unint64_t result = v31;
          v27 += v31 * *(unsigned __int8 *)(v28 + v26);
          v28 += a5;
          --v29;
        }
        while (v29);
        *(_DWORD *)&a3[2 * v26++] = v27;
      }
      while (v26 != v14);
      return result;
    }
    unint64_t v32 = v14 - (int)v16;
    if (v32 >= 8)
    {
      unint64_t v53 = (unint64_t)&a3[2 * (int)v16];
      int32x4_t v54 = &a3[2 * v14];
      unint64_t v55 = a2 + (int)v16;
      BOOL v56 = v53 >= a2 + v14 || v55 >= (unint64_t)v54;
      BOOL v57 = !v56;
      BOOL v58 = v10 >= (const float *)v54 || v53 >= (unint64_t)(v10 + 1);
      if (v58 && !v57)
      {
        if (v32 >= 0x20)
        {
          unint64_t v59 = v32 & 0xFFFFFFFFFFFFFFE0;
          int32x4_t v60 = (int32x4_t)vld1q_dup_f32(v10);
          int v61 = (int8x16_t *)(v26 + a2 + 16);
          uint64_t v62 = (uint64_t)&a3[2 * v26 + 32];
          v13.i64[1] = 0xFFFFFF03FFFFFF02;
          unint64_t v63 = v32 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            int8x16_t v64 = v61[-1];
            int32x4_t v65 = (int32x4_t)vqtbl1q_s8(*v61, (int8x16_t)xmmword_1004048B0);
            int32x4_t v66 = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(*v61, (int8x16_t)xmmword_1004048C0));
            int32x4_t v67 = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(*v61, (int8x16_t)xmmword_100404890));
            int32x4_t v68 = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(*v61, (int8x16_t)xmmword_1004048A0));
            *(int32x4_t *)(v62 - 64) = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_100404890));
            *(int32x4_t *)(v62 - 48) = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1004048A0));
            *(int32x4_t *)(v62 - 32) = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1004048B0));
            *(int32x4_t *)(v62 - 16) = vmulq_s32(v60, (int32x4_t)vqtbl1q_s8(v64, (int8x16_t)xmmword_1004048C0));
            *(int32x4_t *)uint64_t v62 = v67;
            *(int32x4_t *)(v62 + 16) = v68;
            *(int32x4_t *)(v62 + 32) = vmulq_s32(v60, v65);
            *(int32x4_t *)(v62 + 48) = v66;
            v61 += 2;
            v62 += 128;
            v63 -= 32;
          }
          while (v63);
          if (v32 == v59) {
            return result;
          }
          if ((v32 & 0x18) == 0)
          {
            v26 += v59;
            goto LABEL_17;
          }
        }
        else
        {
          unint64_t v59 = 0;
        }
        uint64_t v69 = (v32 & 0xFFFFFFFFFFFFFFF8) + v26;
        int32x4_t v70 = (int32x4_t)vld1q_dup_f32(v10);
        unint64_t v71 = v59 - (v32 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v72 = v59 + v26;
        uint64_t v73 = (uint64_t *)(a2 + v72);
        long long v74 = &a3[2 * v72];
        do
        {
          uint64_t v75 = *v73++;
          v13.i64[0] = v75;
          int32x4_t v76 = (int32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_1004048A0);
          int8x16_t v13 = (int8x16_t)vmulq_s32(v70, (int32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_100404890));
          *(int8x16_t *)long long v74 = v13;
          *((int32x4_t *)v74 + 1) = vmulq_s32(v70, v76);
          v74 += 16;
          v71 += 8;
        }
        while (v71);
        uint64_t v26 = v69;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8)) {
          return result;
        }
      }
    }
LABEL_17:
    unint64_t v33 = (unsigned __int8 *)(a2 + v26);
    BOOL v34 = &a3[2 * v26];
    uint64_t v35 = v14 - v26;
    do
    {
      int v36 = *v33++;
      *(_DWORD *)BOOL v34 = *(_DWORD *)v10 * v36;
      v34 += 2;
      --v35;
    }
    while (v35);
  }
  return result;
}

unint64_t sub_100337EC4(uint64_t a1, uint64_t a2, __int16 *a3, int a4, int a5)
{
  unint64_t result = sub_1002D21FC(100);
  if (!result) {
    return result;
  }
  int v11 = *(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 8);
  int v12 = v11 - 1;
  if (v11 < 1) {
    int v12 = *(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 8);
  }
  if (!*(unsigned char *)(a1 + 100)) {
    return 0;
  }
  int v13 = v12 >> 1;
  uint64_t v14 = (uint64_t)v12 >> 1;
  int v15 = (_DWORD *)(*(void *)(a1 + 16) + 4 * v13);
  uint64_t v16 = (int)v14 * (uint64_t)a5;
  int v17 = a5 * a4;
  if (*(unsigned char *)(a1 + 96))
  {
    int32x4_t v22 = (uint8x8_t *)(a2 + (int)v14 * (uint64_t)a5);
    if (v11 == 6)
    {
      if (*v15 == -2 && !v15[1])
      {
        if (v15[2] == 1 || v17 < 8) {
          return 0;
        }
      }
      else if (v17 < 8)
      {
        return 0;
      }
      unint64_t result = 0;
      v37.i64[0] = *(void *)v15;
      v37.i64[1] = v15[2];
      int16x4_t v38 = vqmovn_s32(v37);
      do
      {
        int16x8_t v39 = (int16x8_t)vmovl_u8(*v22);
        int16x8_t v40 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v22 + a5), *(uint8x8_t *)((char *)v22 - a5));
        int32x4_t v41 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, v38, 1), *(int16x4_t *)v39.i8, v38, 0);
        int32x4_t v42 = vmlal_high_lane_s16(vmull_high_lane_s16(v40, v38, 1), v39, v38, 0);
        int16x8_t v43 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v22 + 2 * a5), *(uint8x8_t *)((char *)v22 - 2 * a5));
        unint64_t v44 = (int32x4_t *)&a3[2 * result];
        *unint64_t v44 = vmlal_lane_s16(v41, *(int16x4_t *)v43.i8, v38, 2);
        v44[1] = vmlal_high_lane_s16(v42, v43, v38, 2);
        result += 8;
        ++v22;
      }
      while (result <= (v17 - 8));
      return result;
    }
    if (v11 != 4) {
      return 0;
    }
    if (*v15 == -2)
    {
      if (v15[1] == 1 || v17 < 8) {
        return 0;
      }
    }
    else
    {
      if (*v15 == 2 && v15[1] == 1)
      {
        if (v17 < 8) {
          return 0;
        }
        unint64_t result = 0;
        uint64_t v23 = a2 + v16 - a5;
        long long v24 = 0uLL;
        do
        {
          int16x8_t v25 = vaddq_s16((int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v22 + a5 + result), *(uint8x8_t *)(v23 + result)), (int16x8_t)vshll_n_u8(*(uint8x8_t *)((char *)v22 + result), 1uLL));
          vst2q_s16(a3, *(int16x8x2_t *)(&v24 - 1));
          a3 += 16;
          result += 8;
        }
        while (result <= (v17 - 8));
        return result;
      }
      if (v17 < 8) {
        return 0;
      }
    }
    unint64_t result = 0;
    v53.i32[3] = 0;
    v53.i32[0] = *v15;
    *(uint64_t *)((char *)v53.i64 + 4) = v15[1];
    unint64_t v54 = (v17 - 8);
    int16x4_t v55 = vqmovn_s32(v53);
    BOOL v56 = (int32x4_t *)(a3 + 8);
    uint64_t v57 = a2 + v16 - a5;
    do
    {
      int16x8_t v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v22 + result));
      int16x8_t v59 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v22 + a5 + result), *(uint8x8_t *)(v57 + result));
      v56[-1] = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v59.i8, v55, 1), *(int16x4_t *)v58.i8, v55, 0);
      *BOOL v56 = vmlal_high_lane_s16(vmull_high_lane_s16(v59, v55, 1), v58, v55, 0);
      result += 8;
      v56 += 2;
    }
    while (result <= v54);
    return result;
  }
  if (v11 == 6)
  {
    unint64_t v26 = (v17 - 8);
    if (v17 < 8) {
      return 0;
    }
    unint64_t result = 0;
    v27.i32[0] = 0;
    v27.i32[1] = v15[1];
    v27.i64[1] = v15[2];
    uint64_t v28 = 2 * a5;
    uint64_t v29 = a2 + v28 + v16;
    uint64_t v30 = v16 - a5;
    uint64_t v31 = a2 + a5 + v16;
    uint64_t v32 = v16 - v28;
    int16x4_t v33 = vqmovn_s32(v27);
    BOOL v34 = (int32x4_t *)(a3 + 8);
    do
    {
      int16x8_t v35 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v31 + result), *(uint8x8_t *)(a2 + v30 + result));
      int16x8_t v36 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v29 + result), *(uint8x8_t *)(a2 + v32 + result));
      v34[-1] = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, v33, 2), *(int16x4_t *)v35.i8, v33, 1);
      *BOOL v34 = vmlal_high_lane_s16(vmull_high_lane_s16(v36, v33, 2), v35, v33, 1);
      result += 8;
      v34 += 2;
    }
    while (result <= v26);
  }
  else
  {
    if (v11 != 4) {
      return 0;
    }
    if (!*v15 && v15[1] == 1)
    {
      if (v17 >= 8)
      {
        unint64_t result = 0;
        int32x4_t v18 = (int32x4_t *)(a3 + 8);
        uint64_t v19 = a2 + v16 - a5;
        uint64_t v20 = a2 + a5 + v16;
        do
        {
          int16x8_t v21 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v20 + result), *(uint8x8_t *)(v19 + result));
          v18[-1] = vmovl_s16(*(int16x4_t *)v21.i8);
          int32x4_t *v18 = vmovl_high_s16(v21);
          result += 8;
          v18 += 2;
        }
        while (result <= (v17 - 8));
        return result;
      }
      return 0;
    }
    if (v17 < 8) {
      return 0;
    }
    unint64_t result = 0;
    uint64_t v45 = (const float *)(v15 + 1);
    int32x4_t v46 = (int32x4_t)vld1q_dup_f32(v45);
    int16x4_t v47 = vqmovn_s32(v46);
    uint64_t v48 = (int32x4_t *)(a3 + 8);
    uint64_t v49 = a2 + v16 - a5;
    uint64_t v50 = a2 + a5 + v16;
    do
    {
      int16x8_t v51 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v50 + result), *(uint8x8_t *)(v49 + result));
      v48[-1] = vmull_lane_s16(*(int16x4_t *)v51.i8, v47, 1);
      int32x4_t *v48 = vmull_high_lane_s16(v51, v47, 1);
      result += 8;
      v48 += 2;
    }
    while (result <= (v17 - 8));
  }
  return result;
}

void sub_100338294()
{
}

uint64_t sub_1003382A8(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100338328(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7 = sub_100338424(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_100499C70;
  *(_DWORD *)(v7 + 216) = a4;
  if ((a4 & 3) == 0 || *(int *)(a1 + 8) >= 6)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 84), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0 && this->ksize <= 5", 84);
    sub_1002D2278(-215, v9, "SymmRowSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3112);
  }
  return a1;
}

void sub_1003383FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1003387D0(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100338424(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)(a1 + 8) = -1;
  *(void *)a1 = off_100499CC8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(_DWORD *)(a1 + 112) = 1124007936;
  uint64_t v10 = (_DWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 116) = 0u;
  int v11 = (int *)(a1 + 116);
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 120;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 200) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(a2 + 56);
    if (v12)
    {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
      uint64_t v13 = *(void *)(a1 + 72);
      if (v13)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v8 = *(_DWORD *)a2;
      int v17 = *(_DWORD *)(a2 + 4);
      if (v17 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v17;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        int32x4_t v18 = *(void **)(a2 + 72);
        uint64_t v19 = *(void **)(a1 + 88);
        *uint64_t v19 = *v18;
        v19[1] = v18[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v15 + 4 * v14++) = 0;
        uint64_t v16 = *v9;
      }
      while (v14 < v16);
      *uint64_t v8 = *(_DWORD *)a2;
      if ((int)v16 <= 2)
      {
        int v17 = *(_DWORD *)(a2 + 4);
        if (v17 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v31) = 33619968;
  uint64_t v32 = a1 + 16;
  uint64_t v33 = 0;
  sub_10025401C(a2, (uint64_t)&v31);
LABEL_17:
  int v21 = *(_DWORD *)(a1 + 24);
  int v20 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v21 + v20 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v21 != 1 && v20 != 1)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    qmemcpy((void *)sub_1002D19D8(&v31, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v31, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  if (v10 != (_DWORD *)a4)
  {
    uint64_t v22 = *(void *)(a4 + 56);
    if (v22) {
      atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 1u);
    }
    uint64_t v23 = *(void *)(a1 + 168);
    if (v23 && atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v10);
    }
    *(void *)(a1 + 168) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    if (*(int *)(a1 + 116) <= 0)
    {
      _DWORD *v10 = *(_DWORD *)a4;
      int v27 = *(_DWORD *)(a4 + 4);
      if (v27 <= 2)
      {
LABEL_32:
        *(_DWORD *)(a1 + 116) = v27;
        *(void *)(a1 + 120) = *(void *)(a4 + 8);
        uint64_t v28 = *(void **)(a4 + 72);
        uint64_t v29 = *(void **)(a1 + 184);
        *uint64_t v29 = *v28;
        v29[1] = v28[1];
LABEL_35:
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a4 + 32);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a4 + 48);
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = *(void *)(a1 + 176);
      do
      {
        *(_DWORD *)(v25 + 4 * v24++) = 0;
        uint64_t v26 = *v11;
      }
      while (v24 < v26);
      _DWORD *v10 = *(_DWORD *)a4;
      if ((int)v26 <= 2)
      {
        int v27 = *(_DWORD *)(a4 + 4);
        if (v27 <= 2) {
          goto LABEL_32;
        }
      }
    }
    sub_1002931A8((uint64_t)v10, a4);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a4 + 96);
  return a1;
}

void sub_100338794(_Unwind_Exception *a1)
{
  sub_100330658(v2);
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003387D0(uint64_t a1)
{
  *(void *)a1 = off_100499CC8;
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 112);
  }
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  if (*(int *)(a1 + 116) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 176);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 116));
  }
  long long v5 = *(void **)(a1 + 184);
  if (v5 != (void *)(a1 + 192)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  uint64_t v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96)) {
    j__free(v9);
  }
  return a1;
}

void sub_1003388F4(uint64_t a1)
{
  sub_1003387D0(a1);

  operator delete();
}

unint64_t sub_10033892C(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, int a5)
{
  int v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= 0) {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v11 = v10 + 1;
  }
  int v12 = (v11 >> 1) * a5;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v460 = (uint64_t)v11 >> 1;
  unint64_t v14 = v13 + 4 * (v11 >> 1);
  int v15 = *(_DWORD *)(a1 + 216);
  unint64_t result = sub_1002D21FC(100);
  if ((result & 1) == 0)
  {
    LODWORD(v26) = 0;
    int v25 = a5 * a4;
    goto LABEL_27;
  }
  int v20 = *(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 124);
  int v21 = v20 - 1;
  if (v20 - 1 >= 0) {
    --v20;
  }
  int v22 = v20 >> 1;
  uint64_t v23 = v22 * a5;
  uint64_t v24 = (_DWORD *)(*(void *)(a1 + 128) + 4 * v22);
  int v25 = a5 * a4;
  if (*(unsigned char *)(a1 + 208))
  {
    if (v21 == 5)
    {
      float v44 = *(float *)v24;
      if (*(float *)v24 == -2.0 && (v18.i32[0] = v24[1], v18.f32[0] == 0.0))
      {
        v19.i32[0] = v24[2];
        if (v19.f32[0] != 1.0 && v25 >= 4) {
          goto LABEL_25;
        }
      }
      else if (v25 >= 4)
      {
        v18.i32[0] = v24[1];
        v19.i32[0] = v24[2];
LABEL_25:
        unint64_t v46 = 0;
        unint64_t v26 = 0;
        float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
        uint64_t v47 = 4 * v22 * a5;
        uint64_t v48 = 8 * a5;
        uint64_t v49 = a2 + v48 + v47;
        uint64_t v50 = v47 - v48;
        uint64_t v51 = 4 * a5;
        uint64_t v52 = a2 + v51 + v47;
        float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0);
        uint64_t v53 = a2 + v50;
        uint64_t v54 = a2 + v47 - v51;
        do
        {
          a3[v46 / 0x10] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(a2 + v47 + v46), v44), v18, vaddq_f32(*(float32x4_t *)(v54 + v46), *(float32x4_t *)(v52 + v46))), v19, vaddq_f32(*(float32x4_t *)(v53 + v46), *(float32x4_t *)(v49 + v46)));
          v26 += 4;
          v46 += 16;
        }
        while (v26 <= (v25 - 4));
        goto LABEL_27;
      }
    }
    LODWORD(v26) = 0;
    goto LABEL_27;
  }
  LODWORD(v26) = 0;
  if (v21 == 5 && v25 >= 4)
  {
    unint64_t v26 = 0;
    int v27 = (const float *)(v24 + 2);
    uint64_t v28 = (const float *)(v24 + 1);
    float32x4_t v17 = vld1q_dup_f32(v28);
    float32x4_t v18 = vld1q_dup_f32(v27);
    uint64_t v29 = 4 * v23;
    uint64_t v30 = 8 * a5;
    uint64_t v31 = (float32x4_t *)(a2 + v30 + 4 * v23);
    uint64_t v32 = (float32x4_t *)(a2 + v29 - v30);
    uint64_t v33 = 4 * a5;
    BOOL v34 = (float32x4_t *)(a2 + v33 + v29);
    int16x8_t v35 = (float32x4_t *)(a2 + v29 - v33);
    int16x8_t v36 = a3;
    do
    {
      float32x4_t v37 = *v35++;
      float32x4_t v38 = v37;
      float32x4_t v39 = *v34++;
      float32x4_t v40 = v39;
      float32x4_t v41 = *v32++;
      float32x4_t v42 = v41;
      float32x4_t v43 = *v31++;
      float32x4_t v19 = vmlaq_f32(vmulq_f32(v17, vsubq_f32(v40, v38)), v18, vsubq_f32(v43, v42));
      *v36++ = v19;
      v26 += 4;
    }
    while (v26 <= (v25 - 4));
  }
LABEL_27:
  uint64_t v55 = (int)v26;
  BOOL v56 = (float32x2_t *)(a2 + 4 * (int)v26 + 4 * v12);
  int v57 = *(_DWORD *)(a1 + 8);
  if ((v15 & 1) == 0)
  {
    if (v57 != 5)
    {
      if (v57 != 3) {
        goto LABEL_224;
      }
      float v58 = *(float *)(v14 + 4);
      int v59 = v25 - 2;
      if (*(float *)v14 == 0.0 && v58 == 1.0)
      {
        if ((int)v26 > v59) {
          goto LABEL_224;
        }
        uint64_t v234 = a5 + 1;
        uint64_t v235 = v59;
        unint64_t v236 = v59 - v55;
        uint64_t v237 = 4 * a5;
        if (v236 >= 0x30)
        {
          uint64_t v238 = v55;
          unint64_t v239 = (unint64_t)a3->u64 + 4 * v55;
          unint64_t v240 = (4 * v236) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v241 = v240 + 4 * v55;
          unint64_t v242 = (unint64_t)&a3->u64[1] + v241;
          uint64_t v243 = 4 * v55 + 4 * v12;
          unint64_t v244 = v241 + 4 * v12;
          unint64_t v245 = v244 - v237 + a2 + 8;
          unint64_t v246 = v243 + a2 + v240 + v237 + 4;
          BOOL v247 = v239 >= v244 + 4 * v234 + a2 + 4 || a2 + 4 * v234 + v243 >= v242;
          unint64_t result = !v247;
          BOOL v248 = v239 >= v246 || a2 + v237 + v243 >= v242;
          BOOL v249 = !v248;
          BOOL v250 = a2 + v243 - v237 >= v242 || v239 >= v245;
          if (v250 && (result & 1) == 0 && !v249)
          {
            uint64_t v251 = (v236 >> 1) + 1;
            uint64_t v252 = v251 & 3;
            if ((v251 & 3) == 0) {
              uint64_t v252 = 4;
            }
            uint64_t v253 = v251 - v252;
            v55 += 2 * v253;
            v56 += v253;
            uint32x4_t v254 = &a3->f32[v238];
            uint64_t v255 = v238 * 4 + 4 * v12;
            unsigned long long v256 = (const float *)(a2 + v255 + 4 * v234);
            uint16x8_t v257 = (const float *)(a2 + v255 - v237);
            unint64_t result = a2 + v237 + v255;
            do
            {
              unsigned long long v258 = (unsigned __int128)vld2q_f32((const float *)result);
              result += 32;
              float32x4x2_t v466 = vld2q_f32(v257);
              v257 += 8;
              v461.val[0] = vsubq_f32((float32x4_t)v258, v466.val[0]);
              unsigned long long v259 = (unsigned __int128)vld2q_f32(v256);
              v256 += 8;
              v461.val[1] = vsubq_f32((float32x4_t)v259, v466.val[1]);
              vst2q_f32(v254, v461);
              v254 += 8;
              v253 -= 4;
            }
            while (v253);
          }
        }
        uint16x8_t v260 = &a3->f32[v55 + 1];
        do
        {
          float v261 = v56->f32[v234] - *(float *)((char *)v56->f32 + 4 - v237);
          *(v260 - 1) = v56->f32[a5] - v56->f32[-a5];
          *uint16x8_t v260 = v261;
          v55 += 2;
          ++v56;
          v260 += 2;
        }
        while (v55 <= v235);
      }
      else
      {
        if ((int)v26 > v59) {
          goto LABEL_224;
        }
        uint64_t v61 = a5 + 1;
        unint64_t v62 = v59 - (uint64_t)(int)v26;
        if (v62 >= 0x28)
        {
          uint64_t v63 = 4 * (int)v26;
          unint64_t v64 = (unint64_t)a3 + v63;
          unint64_t v65 = (4 * v62) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v66 = (unint64_t)&a3->u64[1] + v65 + v63;
          uint64_t v67 = v63 + 4 * v12;
          uint64_t v68 = 4 * a5;
          uint64_t v69 = v65 + v63 + 4 * v12;
          unint64_t v70 = v69 - v68 + a2 + 8;
          unint64_t v71 = v67 + a2 + v65 + v68 + 4;
          BOOL v72 = (unint64_t)a3 + v63 >= v69 + 4 * v61 + a2 + 4 || a2 + 4 * v61 + v67 >= v66;
          BOOL v73 = !v72;
          BOOL v74 = v64 >= v71 || a2 + 4 * a5 + v67 >= v66;
          unint64_t result = !v74;
          BOOL v75 = a2 + v67 - 4 * a5 >= v66 || v64 >= v70;
          if (v75 && !v73 && (result & 1) == 0)
          {
            uint64_t v76 = (v62 >> 1) + 1;
            uint64_t v77 = v76 & 3;
            if ((v76 & 3) == 0) {
              uint64_t v77 = 4;
            }
            uint64_t v78 = v76 - v77;
            uint64_t v55 = (int)v26 + 2 * v78;
            v56 += v78;
            unint64_t result = (unint64_t)a3 + v63;
            uint64_t v79 = v63 + 4 * v12;
            float32x4x4_t v80 = (const float *)(a2 + v79 + 4 * v61);
            uint64_t v81 = (const float *)(a2 + v79 - v68);
            uint64_t v82 = (const float *)(a2 + v68 + v79);
            do
            {
              unsigned long long v83 = (unsigned __int128)vld2q_f32(v82);
              v82 += 8;
              float32x4x2_t v467 = vld2q_f32(v81);
              v81 += 8;
              unsigned long long v84 = (unsigned __int128)vld2q_f32(v80);
              v80 += 8;
              v462.val[0] = vmulq_n_f32(vsubq_f32((float32x4_t)v83, v467.val[0]), v58);
              v462.val[1] = vmulq_n_f32(vsubq_f32((float32x4_t)v84, v467.val[1]), v58);
              vst2q_f32((float *)result, v462);
              result += 32;
              v78 -= 4;
            }
            while (v78);
          }
        }
        unint64_t v85 = (float32x2_t *)&a3->f32[v55];
        do
        {
          v86.i32[0] = v56->i32[a5];
          v86.i32[1] = v56->i32[v61];
          *v85++ = vmul_n_f32(vsub_f32(v86, *(float32x2_t *)((char *)v56 - 4 * a5)), v58);
          v55 += 2;
          ++v56;
        }
        while (v55 <= v59);
      }
      LODWORD(v26) = v55;
LABEL_224:
      if ((int)v26 < v25)
      {
        uint64_t v262 = (int)v26;
        uint64_t v263 = 4 * a5;
        do
        {
          float v264 = *(float *)v14 * v56->f32[0];
          if (v10 >= 2)
          {
            uint64_t v265 = -4 * a5;
            uint64_t v266 = 4 * a5;
            uint64_t v267 = (v460 + 1) - 1;
            unint64_t result = v13 + 4 * v460 + 4;
            do
            {
              float v268 = *(float *)result;
              result += 4;
              float v264 = v264
                   + (float)(v268 * (float)(*(float *)((char *)v56->f32 + v266) - *(float *)((char *)v56->f32 + v265)));
              v266 += v263;
              v265 -= v263;
              --v267;
            }
            while (v267);
          }
          a3->f32[v262++] = v264;
          BOOL v56 = (float32x2_t *)((char *)v56 + 4);
        }
        while (v262 != v25);
      }
      return result;
    }
    int v91 = v25 - 2;
    if ((int)v26 > v25 - 2) {
      goto LABEL_224;
    }
    v17.i32[0] = *(_DWORD *)(v14 + 4);
    float v92 = *(float *)(v14 + 8);
    unint64_t v93 = -2 * a5;
    uint64_t v94 = a5 + 1;
    uint64_t v95 = v91;
    unint64_t v96 = v91 - v55;
    uint64_t v97 = 4 * a5;
    uint64_t v98 = 8 * a5;
    if (v96 >= 0x30)
    {
      uint64_t v458 = v13;
      uint64_t v99 = 4 * v55;
      unint64_t v100 = (unint64_t)a3->u64 + 4 * v55;
      unint64_t v101 = (4 * v96) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v102 = v101 + 4 * v55;
      unint64_t v103 = (unint64_t)&a3->u64[1] + v102;
      uint64_t v104 = 4 * v12;
      uint64_t v105 = 4 * v55 + v104;
      unint64_t v456 = v105 - v98 + a2 + 4;
      unint64_t v106 = v102 + v104;
      unint64_t v455 = a2 + v106 + 8 - v98;
      unint64_t v107 = a2 + v105 - v97;
      unint64_t v108 = a2 + 4 * v94 + v105;
      uint64_t v109 = 4 * v93;
      unint64_t v110 = a2 + v105 + v109;
      unint64_t v111 = v106 + v109 + a2 + 4;
      unint64_t v112 = a2 + v97 + v105;
      unint64_t v113 = v105 + a2 + v101 + v97 + 4;
      BOOL v115 = v100 < v106 + v98 + a2 + 8 && a2 + v98 + v105 < v103;
      BOOL v117 = v100 < a2 + v106 + 8 - v97 && v107 < v103;
      BOOL v119 = v100 < v106 + 4 * v94 + a2 + 4 && v108 < v103;
      BOOL v121 = v100 < v111 && v110 < v103;
      BOOL v123 = v100 < v113 && v112 < v103;
      if (v456 >= v103 || v100 >= v455)
      {
        uint64_t v13 = v458;
        unint64_t v93 = -2 * a5;
        if (!v115)
        {
          uint64_t v94 = a5 + 1;
          if (!v117 && !v119 && !v121 && !v123)
          {
            uint64_t v125 = (v96 >> 1) + 1;
            uint64_t v126 = v125 & 3;
            if ((v125 & 3) == 0) {
              uint64_t v126 = 4;
            }
            uint64_t v127 = v125 - v126;
            v55 += 2 * v127;
            float32x4_t v128 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0);
            uint64_t v129 = v104 - v98 + a2 + 4;
            uint64_t v130 = a2 + v104 + 4 * (a5 + 1);
            uint64_t v131 = a2 + v104 + 4 * v93;
            uint64_t v132 = a2 + v104 + v98;
            uint64_t v133 = a2 + v104 - v97;
            uint64_t v134 = a2 + v97 + v104;
            unsigned long long v135 = a3;
            v56 += v127;
            do
            {
              int16x8_t v136 = (const float *)(v134 + v99);
              unsigned long long v137 = (unsigned __int128)vld2q_f32(v136);
              uint64_t v138 = (const float *)(v133 + v99);
              float32x4x2_t v472 = vld2q_f32(v138);
              uint64_t v139 = (const float *)(v132 + v99);
              float32x4x2_t v478 = vld2q_f32(v139);
              float32x4_t v140 = vsubq_f32((float32x4_t)v137, v472.val[0]);
              unsigned int v141 = (const float *)(v131 + v99);
              unsigned long long v142 = (unsigned __int128)vld2q_f32(v141);
              float32x4_t v143 = vsubq_f32(v478.val[0], (float32x4_t)v142);
              int32x4_t v144 = (const float *)(v130 + v99);
              unsigned long long v145 = (unsigned __int128)vld2q_f32(v144);
              v472.val[0] = vsubq_f32((float32x4_t)v145, v472.val[1]);
              int v146 = (const float *)(v129 + v99);
              v472.val[1] = (float32x4_t)vld2q_f32(v146);
              v481.val[0] = vmlaq_f32(vmulq_n_f32(v143, v92), v128, v140);
              v481.val[1] = vmlaq_f32(vmulq_n_f32(vsubq_f32(v478.val[1], v472.val[1]), v92), v128, v472.val[0]);
              float v147 = &v135->f32[(unint64_t)v99 / 4];
              vst2q_f32(v147, v481);
              v135 += 2;
              v129 += 32;
              v130 += 32;
              v131 += 32;
              v132 += 32;
              v133 += 32;
              v134 += 32;
              v127 -= 4;
            }
            while (v127);
          }
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v13 = v458;
        unint64_t v93 = -2 * a5;
      }
      uint64_t v94 = a5 + 1;
    }
LABEL_115:
    uint64_t v148 = 0;
    unint64_t v149 = 0;
    unint64_t result = (unint64_t)a3->u64 + 4 * v55;
    uint64_t v150 = (uint64_t)&v56[v98 / 0xFFFFFFFFFFFFFFF8] + 4;
    uint64_t v151 = (uint64_t)&v56[(unint64_t)v98 / 8] + 4;
    do
    {
      float v152 = (float)(v92 * (float)(*(float *)(v151 + v149) - *(float *)(v150 + v149)))
           + (float)((float)(v56->f32[v94 + v149 / 4] - v56->f32[v97 / 0xFFFFFFFFFFFFFFFCLL + 1 + v149 / 4]) * v17.f32[0]);
      uint64_t v153 = (float *)(result + v149);
      *uint64_t v153 = (float)(v92 * (float)(*(float *)(v151 + v149 - 4) - v56[v93 / 2 + v149 / 8].f32[0]))
            + (float)((float)(v56->f32[(unint64_t)v97 / 4 + v149 / 4]
                            - v56[v149 / 8].f32[v97 / 0xFFFFFFFFFFFFFFFCLL])
                    * v17.f32[0]);
      v153[1] = v152;
      v149 += 8;
      v148 += 2;
    }
    while (v55 + v148 <= v95);
    LODWORD(v26) = v55 + v148;
    BOOL v56 = (float32x2_t *)((char *)v56 + v149);
    goto LABEL_224;
  }
  if (v57 != 5)
  {
    if (v57 != 3)
    {
      if (v57 == 1 && *(float *)v14 == 1.0)
      {
        int v87 = v25 - 2;
        if ((int)v26 > v25 - 2) {
          goto LABEL_398;
        }
        uint64_t v88 = v87;
        unint64_t v89 = v87 - v55;
        if (v89 >= 0x1E)
        {
          unint64_t v441 = (4 * v89) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v442 = 8 * v55 + 4 * v12;
          unint64_t result = v442 + v441 + a2 + 8;
          if ((unint64_t)a3->u64 + 4 * v55 >= result
            || (uint64_t v90 = v55, a2 + v442 >= (unint64_t)&a3->u64[1] + 4 * v55 + v441))
          {
            uint64_t v443 = (v89 >> 1) + 1;
            uint64_t v90 = v55 + 2 * (v443 & 0xFFFFFFFFFFFFFFF8);
            uint16x8_t v444 = (_OWORD *)&a3[2].f32[v55];
            int32x4_t v445 = (long long *)(v442 + a2 + 32);
            unint64_t result = v443 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v447 = *(v445 - 2);
              long long v446 = *(v445 - 1);
              long long v449 = *v445;
              long long v448 = v445[1];
              v445 += 4;
              *(v444 - 2) = v447;
              *(v444 - 1) = v446;
              *uint16x8_t v444 = v449;
              v444[1] = v448;
              v444 += 4;
              result -= 8;
            }
            while (result);
            if (v443 == (v443 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_397;
            }
          }
        }
        else
        {
          uint64_t v90 = v55;
        }
        int16x4_t v450 = (uint64_t *)(a2 + 4 * v90 + 4 * v55 + 4 * v12);
        int v451 = (uint64_t *)((char *)a3->i64 + 4 * v90);
        do
        {
          uint64_t v452 = *v450++;
          *v451++ = v452;
          v90 += 2;
        }
        while (v90 <= v88);
LABEL_397:
        uint64_t v55 = (int)v90;
        LODWORD(v26) = v90;
LABEL_398:
        BOOL v56 = (float32x2_t *)((char *)v56 + 4 * v55);
        if ((int)v26 >= v25) {
          return result;
        }
        goto LABEL_363;
      }
      goto LABEL_362;
    }
    v18.i32[0] = *(_DWORD *)v14;
    if (*(float *)v14 == 2.0 && *(float *)(v14 + 4) == 1.0)
    {
      int v198 = v25 - 2;
      if ((int)v26 > v25 - 2) {
        goto LABEL_362;
      }
      uint64_t v199 = a5 + 1;
      unint64_t v200 = v198 - (uint64_t)(int)v26;
      if (v200 >= 0x28)
      {
        uint64_t v201 = 4 * (int)v26;
        unint64_t v202 = (unint64_t)a3 + v201;
        unint64_t v203 = (4 * v200) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v204 = (unint64_t)&a3->u64[1] + v203 + v201;
        unint64_t result = 4 * v12;
        unint64_t v205 = v203 + v201 + result;
        unint64_t v206 = v205 + 4 * v199 + a2 + 4;
        v205 += 8;
        unint64_t v207 = a2 + v205;
        uint64_t v208 = 4 * a5;
        unint64_t v209 = a2 + v205 - v208;
        unint64_t v210 = v201 + result + a2 + v203 + v208 + 4;
        BOOL v211 = (unint64_t)a3 + v201 >= v207 || (unint64_t)v56 >= v204;
        BOOL v212 = !v211;
        BOOL v213 = v202 >= v209 || a2 + v201 + result - v208 >= v204;
        BOOL v214 = !v213;
        BOOL v215 = v202 >= v210 || a2 + v208 + v201 + result >= v204;
        BOOL v216 = !v215;
        BOOL v217 = a2 + 4 * v199 + v201 + result >= v204 || v202 >= v206;
        if (v217 && !v212 && !v214 && !v216)
        {
          uint64_t v218 = (v200 >> 1) + 1;
          uint64_t v219 = v218 & 3;
          if ((v218 & 3) == 0) {
            uint64_t v219 = 4;
          }
          uint64_t v220 = v218 - v219;
          uint64_t v55 = (int)v26 + 2 * v220;
          v56 += v220;
          uint64_t v221 = a2 + result;
          uint64_t v222 = a2 + result + 4 * v199;
          uint64_t v223 = a2 + v208 + result;
          unint64_t result = a2 + result - v208;
          v224.i64[0] = 0x4000000040000000;
          v224.i64[1] = 0x4000000040000000;
          unint64_t v225 = a3;
          do
          {
            unint64_t v226 = (const float *)(result + v201);
            float32x4x2_t v464 = vld2q_f32(v226);
            unint64_t v227 = (const float *)(v221 + v201);
            float32x4x2_t v469 = vld2q_f32(v227);
            unint64_t v228 = (const float *)(v223 + v201);
            unsigned long long v229 = (unsigned __int128)vld2q_f32(v228);
            v474.val[0] = vaddq_f32(vmlaq_f32(v464.val[0], v224, v469.val[0]), (float32x4_t)v229);
            unint64_t v230 = (const float *)(v222 + v201);
            v469.val[0] = (float32x4_t)vld2q_f32(v230);
            v474.val[1] = vaddq_f32(vmlaq_f32(v464.val[1], v224, v469.val[1]), v469.val[0]);
            unint64_t v231 = &v225->f32[(unint64_t)v201 / 4];
            vst2q_f32(v231, v474);
            v225 += 2;
            v221 += 32;
            v222 += 32;
            v223 += 32;
            result += 32;
            v220 -= 4;
          }
          while (v220);
        }
      }
      BOOL v232 = (float32x2_t *)&a3->f32[v55];
      do
      {
        v233.i32[0] = v56->i32[a5];
        v233.i32[1] = v56->i32[v199];
        *v232++ = vadd_f32(vmla_f32(*(float32x2_t *)((char *)v56 - 4 * a5), (float32x2_t)0x4000000040000000, *v56), v233);
        v55 += 2;
        ++v56;
      }
      while (v55 <= v198);
    }
    else
    {
      float v269 = *(float *)(v14 + 4);
      int v270 = v25 - 2;
      if (v18.f32[0] == -2.0 && v269 == 1.0)
      {
        if ((int)v26 > v270) {
          goto LABEL_362;
        }
        uint64_t v382 = a5 + 1;
        unint64_t v383 = v270 - (uint64_t)(int)v26;
        if (v383 >= 0x28)
        {
          uint64_t v384 = 4 * (int)v26;
          unint64_t v385 = (unint64_t)a3 + v384;
          unint64_t v386 = (4 * v383) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v387 = (unint64_t)&a3->u64[1] + v386 + v384;
          unint64_t result = 4 * v12;
          unint64_t v388 = v386 + v384 + result;
          unint64_t v389 = v388 + 4 * v382 + a2 + 4;
          v388 += 8;
          unint64_t v390 = a2 + v388;
          uint64_t v391 = 4 * a5;
          unint64_t v392 = a2 + v388 - v391;
          unint64_t v393 = v384 + result + a2 + v386 + v391 + 4;
          BOOL v394 = (unint64_t)a3 + v384 >= v390 || (unint64_t)v56 >= v387;
          BOOL v395 = !v394;
          BOOL v396 = v385 >= v392 || a2 + v384 + result - v391 >= v387;
          BOOL v397 = !v396;
          BOOL v398 = v385 >= v393 || a2 + v391 + v384 + result >= v387;
          BOOL v399 = !v398;
          BOOL v400 = a2 + 4 * v382 + v384 + result >= v387 || v385 >= v389;
          if (v400 && !v395 && !v397 && !v399)
          {
            uint64_t v401 = (v383 >> 1) + 1;
            uint64_t v402 = v401 & 3;
            if ((v401 & 3) == 0) {
              uint64_t v402 = 4;
            }
            uint64_t v403 = v401 - v402;
            uint64_t v55 = (int)v26 + 2 * v403;
            v56 += v403;
            uint64_t v404 = a2 + result;
            uint64_t v405 = a2 + result + 4 * v382;
            uint64_t v406 = a2 + v391 + result;
            unint64_t result = a2 + result - v391;
            v407.i64[0] = 0x4000000040000000;
            v407.i64[1] = 0x4000000040000000;
            unint64_t v408 = a3;
            do
            {
              unint64_t v409 = (const float *)(result + v384);
              float32x4x2_t v465 = vld2q_f32(v409);
              unint64_t v410 = (const float *)(v404 + v384);
              float32x4x2_t v471 = vld2q_f32(v410);
              unint64_t v411 = (const float *)(v406 + v384);
              unsigned long long v412 = (unsigned __int128)vld2q_f32(v411);
              v477.val[0] = vaddq_f32(vmlsq_f32(v465.val[0], v407, v471.val[0]), (float32x4_t)v412);
              BOOL v413 = (const float *)(v405 + v384);
              v471.val[0] = (float32x4_t)vld2q_f32(v413);
              v477.val[1] = vaddq_f32(vmlsq_f32(v465.val[1], v407, v471.val[1]), v471.val[0]);
              BOOL v414 = &v408->f32[(unint64_t)v384 / 4];
              vst2q_f32(v414, v477);
              v408 += 2;
              v404 += 32;
              v405 += 32;
              v406 += 32;
              result += 32;
              v403 -= 4;
            }
            while (v403);
          }
        }
        BOOL v415 = (float32x2_t *)&a3->f32[v55];
        do
        {
          v416.i32[0] = v56->i32[a5];
          v416.i32[1] = v56->i32[v382];
          *v415++ = vadd_f32(vmla_f32(*(float32x2_t *)((char *)v56 - 4 * a5), (float32x2_t)0xC0000000C0000000, *v56), v416);
          v55 += 2;
          ++v56;
        }
        while (v55 <= v270);
      }
      else
      {
        if ((int)v26 > v270) {
          goto LABEL_362;
        }
        uint64_t v272 = a5 + 1;
        unint64_t v273 = v270 - (uint64_t)(int)v26;
        if (v273 >= 0x20)
        {
          uint64_t v274 = 4 * (int)v26;
          unint64_t v275 = (unint64_t)a3 + v274;
          unint64_t v276 = (4 * v273) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v277 = (unint64_t)&a3->u64[1] + v276 + v274;
          uint64_t v278 = 4 * v12;
          unint64_t v279 = v276 + v274 + v278;
          unint64_t v280 = v279 + 4 * v272 + a2 + 4;
          uint64_t v281 = 4 * a5;
          v279 += 8;
          unint64_t v282 = a2 + v279 - v281;
          unint64_t v283 = a2 + v279;
          unint64_t v284 = v274 + v278 + a2 + v276 + v281 + 4;
          BOOL v285 = (unint64_t)a3 + v274 >= v282 || a2 + v274 + v278 - 4 * a5 >= v277;
          BOOL v286 = !v285;
          BOOL v287 = v275 >= v283 || (unint64_t)v56 >= v277;
          BOOL v288 = !v287;
          BOOL v289 = v275 >= v284 || a2 + v281 + v274 + v278 >= v277;
          unint64_t result = !v289;
          BOOL v290 = a2 + 4 * v272 + v274 + v278 >= v277 || v275 >= v280;
          if (v290 && !v286 && !v288 && (result & 1) == 0)
          {
            uint64_t v291 = (v273 >> 1) + 1;
            uint64_t v292 = v291 & 3;
            if ((v291 & 3) == 0) {
              uint64_t v292 = 4;
            }
            uint64_t v293 = v291 - v292;
            uint64_t v55 = (int)v26 + 2 * v293;
            v56 += v293;
            float32x4_t v294 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
            uint64_t v295 = a2 + v278;
            unint64_t result = a2 + v278 + 4 * v272;
            uint64_t v296 = a2 + v281 + v278;
            uint64_t v297 = a2 + v278 - v281;
            unsigned long long v298 = a3;
            do
            {
              int16x8_t v299 = (const float *)(v295 + v274);
              float32x4x2_t v470 = vld2q_f32(v299);
              int16x8_t v300 = (const float *)(v297 + v274);
              float32x4x2_t v475 = vld2q_f32(v300);
              int16x8_t v301 = (const float *)(v296 + v274);
              unsigned long long v302 = (unsigned __int128)vld2q_f32(v301);
              v479.val[0] = vmlaq_f32(vmulq_n_f32(vaddq_f32(v475.val[0], (float32x4_t)v302), v269), v294, v470.val[0]);
              BOOL v303 = (const float *)(result + v274);
              unsigned long long v304 = (unsigned __int128)vld2q_f32(v303);
              v479.val[1] = vmlaq_f32(vmulq_n_f32(vaddq_f32(v475.val[1], (float32x4_t)v304), v269), v294, v470.val[1]);
              BOOL v305 = &v298->f32[(unint64_t)v274 / 4];
              vst2q_f32(v305, v479);
              v298 += 2;
              v295 += 32;
              result += 32;
              v296 += 32;
              v297 += 32;
              v293 -= 4;
            }
            while (v293);
          }
        }
        float32x2_t v306 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
        int v307 = (float32x2_t *)&a3->f32[v55];
        do
        {
          v308.i32[0] = v56->i32[a5];
          v308.i32[1] = v56->i32[v272];
          *v307++ = vmla_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)((char *)v56 - 4 * a5), v308), v269), v306, *v56);
          v55 += 2;
          ++v56;
        }
        while (v55 <= v270);
      }
    }
LABEL_361:
    LODWORD(v26) = v55;
    goto LABEL_362;
  }
  v19.i32[0] = *(_DWORD *)v14;
  float v154 = *(float *)(v14 + 4);
  v18.i32[0] = *(_DWORD *)(v14 + 8);
  int v155 = v25 - 2;
  if (*(float *)v14 != -2.0 || (v154 == 0.0 ? (BOOL v156 = v18.f32[0] == 1.0) : (BOOL v156 = 0), !v156))
  {
    if ((int)v26 <= v155)
    {
      unint64_t v309 = -2 * a5;
      uint64_t v310 = a5 + 1;
      uint64_t v311 = v155;
      unint64_t v312 = v155 - v55;
      uint64_t v313 = 4 * a5;
      uint64_t v314 = 8 * a5;
      if (v312 > 0x27)
      {
        int v459 = v25;
        uint64_t v315 = 4 * v55;
        unint64_t v316 = (unint64_t)a3->u64 + 4 * v55;
        unint64_t v317 = (4 * v312) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v318 = v317 + 4 * v55;
        unint64_t v319 = (unint64_t)&a3->u64[1] + v318;
        uint64_t v320 = 4 * v12;
        uint64_t v321 = 4 * v55 + v320;
        unint64_t v454 = a2 + v314 + v321;
        unint64_t v322 = v318 + v320;
        unint64_t v453 = v322 + v314 + a2 + 8;
        unint64_t v323 = v321 - v314 + a2 + 4;
        uint64_t v457 = 8 * a5;
        unint64_t v324 = a2 + v322 + 8 - v314;
        unint64_t v325 = a2 + 4 * v310 + v321;
        unint64_t v326 = v322 + 4 * v310 + a2 + 4;
        unint64_t v327 = a2 + v321 - v313;
        unint64_t v328 = a2 + v322 + 8 - v313;
        unint64_t v329 = a2 + v322 + 8;
        unint64_t v330 = a2 + v321 + 4 * v309;
        unint64_t v331 = v322 + 4 * v309 + a2 + 4;
        unint64_t v332 = a2 + v313 + v321;
        uint64_t v333 = 4 * a5;
        unint64_t v334 = v321 + a2 + v317 + v313 + 4;
        BOOL v336 = v316 < v324 && v323 < v319;
        BOOL v338 = v316 < v326 && v325 < v319;
        BOOL v340 = v316 < v328 && v327 < v319;
        BOOL v342 = v316 < v329 && (unint64_t)v56 < v319;
        BOOL v344 = v316 < v331 && v330 < v319;
        BOOL v346 = v316 < v334 && v332 < v319;
        if (v454 >= v319 || v316 >= v453)
        {
          int v25 = v459;
          unint64_t v309 = -2 * a5;
          uint64_t v314 = 8 * a5;
          uint64_t v313 = 4 * a5;
          if (v336)
          {
            uint64_t v310 = a5 + 1;
          }
          else
          {
            uint64_t v310 = a5 + 1;
            if (!v338 && !v340 && !v342 && !v344 && !v346)
            {
              uint64_t v348 = (v312 >> 1) + 1;
              uint64_t v349 = v348 & 3;
              if ((v348 & 3) == 0) {
                uint64_t v349 = 4;
              }
              uint64_t v350 = v348 - v349;
              float32x4_t v351 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0);
              v55 += 2 * v350;
              float32x4_t v352 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
              uint64_t v353 = a2 + v320;
              uint64_t v354 = v320 - v457 + a2 + 4;
              uint64_t v355 = a2 + v320 + 4 * (a5 + 1);
              uint64_t v356 = a2 + v320 + v457;
              uint64_t v357 = a2 + v320 + -8 * a5;
              uint64_t v358 = a2 + v333 + v320;
              uint64_t v359 = a2 + v320 - v333;
              BOOL v360 = a3;
              v56 += v350;
              do
              {
                BOOL v361 = (const float *)(v353 + v315);
                float32x4x2_t v476 = vld2q_f32(v361);
                BOOL v362 = (const float *)(v359 + v315);
                float32x4x2_t v480 = vld2q_f32(v362);
                BOOL v363 = (const float *)(v358 + v315);
                unsigned long long v364 = (unsigned __int128)vld2q_f32(v363);
                uint64_t v365 = (const float *)(v357 + v315);
                unsigned long long v366 = (unsigned __int128)vld2q_f32(v365);
                BOOL v367 = (const float *)(v356 + v315);
                float32x4x2_t v483 = vld2q_f32(v367);
                v482.val[0] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(vaddq_f32(v480.val[0], (float32x4_t)v364), v154), v351, v476.val[0]), v352, vaddq_f32((float32x4_t)v366, v483.val[0]));
                v368 = (const float *)(v355 + v315);
                unsigned long long v369 = (unsigned __int128)vld2q_f32(v368);
                v370 = (const float *)(v354 + v315);
                v480.val[0] = (float32x4_t)vld2q_f32(v370);
                v482.val[1] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(vaddq_f32(v480.val[1], (float32x4_t)v369), v154), v351, v476.val[1]), v352, vaddq_f32(v480.val[0], v483.val[1]));
                int32x4_t v371 = &v360->f32[(unint64_t)v315 / 4];
                v360 += 2;
                vst2q_f32(v371, v482);
                v353 += 32;
                v354 += 32;
                v355 += 32;
                v356 += 32;
                v357 += 32;
                v358 += 32;
                v359 += 32;
                v350 -= 4;
              }
              while (v350);
            }
          }
        }
        else
        {
          uint64_t v310 = a5 + 1;
          int v25 = v459;
          unint64_t v309 = -2 * a5;
          uint64_t v314 = 8 * a5;
          uint64_t v313 = 4 * a5;
        }
      }
      uint64_t v372 = 0;
      unint64_t v373 = 0;
      float32x2_t v374 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 0);
      unint64_t result = (unint64_t)a3->u64 + 4 * v55;
      float32x2_t v375 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.f32, 0);
      unsigned long long v376 = (char *)v56 - v313;
      uint32x4_t v377 = (char *)v56 + v313;
      uint32x4_t v378 = &v56[(unint64_t)v314 / 8];
      uint64_t v379 = (uint64_t)&v56[v314 / 0xFFFFFFFFFFFFFFF8] + 4;
      do
      {
        v380.i32[0] = *(_DWORD *)&v377[v373];
        v380.i32[1] = v56->i32[v310 + v373 / 4];
        float32x2_t v381 = vmla_f32(vmul_n_f32(vadd_f32(*(float32x2_t *)&v376[v373], v380), v154), v374, v56[v373 / 8]);
        v380.i32[0] = v56[v309 / 2 + v373 / 8].i32[0];
        v380.i32[1] = *(_DWORD *)(v379 + v373);
        *(float32x2_t *)(result + v373) = vmla_f32(v381, v375, vadd_f32(v380, v378[v373 / 8]));
        v373 += 8;
        v372 += 2;
      }
      while (v55 + v372 <= v311);
      LODWORD(v26) = v55 + v372;
      BOOL v56 = (float32x2_t *)((char *)v56 + v373);
      if ((int)v55 + (int)v372 >= v25) {
        return result;
      }
      goto LABEL_363;
    }
    goto LABEL_362;
  }
  if ((int)v26 <= v155)
  {
    unint64_t v157 = -2 * a5;
    uint64_t v158 = v155;
    unint64_t v159 = v155 - v55;
    uint64_t v160 = 8 * a5;
    if (v159 >= 0x28)
    {
      unint64_t v161 = v159 >> 1;
      uint64_t v162 = 4 * v55;
      unint64_t v163 = (unint64_t)a3->u64 + 4 * v55;
      uint64_t v164 = 4 * v55 + 8 * v161;
      unint64_t v165 = (unint64_t)&a3->u64[1] + v164;
      unint64_t result = 4 * v12;
      unint64_t v166 = 4 * v55 + result;
      unint64_t v167 = a2 + v160 + v166;
      unint64_t v168 = v164 + result;
      unint64_t v169 = v168 + v160 + a2 + 8;
      unint64_t v170 = a2 + v168 + 8 - v160;
      unint64_t v171 = a2 + v168 + 8;
      unint64_t v172 = a2 + v166 + 4 * v157;
      unint64_t v173 = v168 + 4 * v157 + a2 + 4;
      BOOL v174 = v163 >= v170 || v166 - v160 + a2 + 4 >= v165;
      BOOL v175 = !v174;
      BOOL v176 = v163 >= v171 || (unint64_t)v56 >= v165;
      BOOL v177 = !v176;
      BOOL v178 = v163 >= v173 || v172 >= v165;
      BOOL v179 = !v178;
      BOOL v180 = v167 >= v165 || v163 >= v169;
      if (v180 && !v175 && !v177 && !v179)
      {
        unint64_t v181 = v161 + 1;
        uint64_t v182 = (v161 + 1) & 3;
        if (!v182) {
          uint64_t v182 = 4;
        }
        unint64_t v183 = v181 - v182;
        v55 += 2 * v183;
        v56 += v183;
        uint64_t v184 = a2 + result;
        uint64_t v185 = result - v160 + a2 + 4;
        unint64_t v186 = a2 + result + v160;
        result += a2 + 4 * v157;
        v187.i64[0] = 0xC0000000C0000000;
        v187.i64[1] = 0xC0000000C0000000;
        int32x4_t v188 = a3;
        do
        {
          int32x4_t v189 = (const float *)(v184 + v162);
          float32x4x2_t v463 = vld2q_f32(v189);
          uint64_t v190 = (const float *)(result + v162);
          unsigned long long v191 = (unsigned __int128)vld2q_f32(v190);
          uint64_t v192 = (const float *)(v186 + v162);
          float32x4x2_t v473 = vld2q_f32(v192);
          v468.val[0] = vaddq_f32(vmlaq_f32((float32x4_t)v191, v187, v463.val[0]), v473.val[0]);
          int32x2_t v193 = (const float *)(v185 + v162);
          unsigned long long v194 = (unsigned __int128)vld2q_f32(v193);
          v468.val[1] = vaddq_f32(vmlaq_f32((float32x4_t)v194, v187, v463.val[1]), v473.val[1]);
          unsigned long long v195 = &v188->f32[(unint64_t)v162 / 4];
          vst2q_f32(v195, v468);
          v188 += 2;
          v184 += 32;
          v185 += 32;
          v186 += 32;
          result += 32;
          v183 -= 4;
        }
        while (v183);
      }
    }
    uint16x8_t v196 = (float32x2_t *)&a3->f32[v55];
    do
    {
      v197.i32[0] = v56[v157 / 2].i32[0];
      v197.i32[1] = *(__int32 *)((char *)v56->i32 + 4 - v160);
      *v196++ = vadd_f32(vmla_f32(v197, (float32x2_t)0xC0000000C0000000, *v56), v56[a5]);
      v55 += 2;
      ++v56;
    }
    while (v55 <= v158);
    goto LABEL_361;
  }
LABEL_362:
  if ((int)v26 >= v25) {
    return result;
  }
LABEL_363:
  if (v10 < 2)
  {
    uint64_t v417 = (int)v26;
    unint64_t v418 = v25 - (uint64_t)(int)v26;
    if (v418 < 0xC
      || ((unint64_t v419 = (unint64_t)a3->u64 + 4 * (int)v26,
           unint64_t v420 = (unint64_t)a3->u64 + 4 * v25,
           v419 < (unint64_t)v56 + 4 * v25 - 4 * v417)
        ? (BOOL v421 = (unint64_t)v56 >= v420)
        : (BOOL v421 = 1),
          v421 ? (char v422 = 0) : (char v422 = 1),
          v14 < v420 ? (BOOL v423 = v419 >= v13 + 4 * v460 + 4) : (BOOL v423 = 1),
          !v423 || (v422 & 1) != 0))
    {
      uint64_t v424 = v417;
      int16x4_t v425 = (float *)v56;
    }
    else
    {
      uint64_t v424 = (v418 & 0xFFFFFFFFFFFFFFF8) + v417;
      int16x4_t v425 = (float *)v56 + (v418 & 0xFFFFFFFFFFFFFFF8);
      float32x4_t v426 = vld1q_dup_f32((const float *)v14);
      int32x4_t v427 = (float32x4_t *)&v56[2];
      int32x4_t v428 = (float32x4_t *)((char *)a3 + 4 * v417 + 16);
      unint64_t v429 = v418 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v430 = vmulq_f32(v426, *v427);
        v428[-1] = vmulq_f32(v426, v427[-1]);
        *int32x4_t v428 = v430;
        v427 += 2;
        v428 += 2;
        v429 -= 8;
      }
      while (v429);
      if (v418 == (v418 & 0xFFFFFFFFFFFFFFF8)) {
        return result;
      }
    }
    uint16x8_t v438 = &a3->f32[v424];
    uint64_t v439 = v25 - v424;
    do
    {
      float v440 = *v425++;
      *v438++ = *(float *)v14 * v440;
      --v439;
    }
    while (v439);
    return result;
  }
  uint64_t v431 = (int)v26;
  uint64_t v432 = 4 * a5;
  do
  {
    float v433 = *(float *)v14 * v56->f32[0];
    uint64_t v434 = -4 * a5;
    uint64_t v435 = 4 * a5;
    uint64_t v436 = (v460 + 1) - 1;
    unint64_t result = v13 + 4 * v460 + 4;
    do
    {
      float v437 = *(float *)result;
      result += 4;
      float v433 = v433 + (float)(v437 * (float)(*(float *)((char *)v56->f32 + v435) + *(float *)((char *)v56->f32 + v434)));
      v435 += v432;
      v434 -= v432;
      --v436;
    }
    while (v436);
    a3->f32[v431++] = v433;
    BOOL v56 = (float32x2_t *)((char *)v56 + 4);
  }
  while (v431 != v25);
  return result;
}

void sub_100339ECC(uint64_t a1)
{
  sub_1003387D0(a1);

  operator delete();
}

uint64_t sub_100339F04(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, int a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  int v11 = *(float **)(a1 + 32);
  uint64_t result = sub_1002D21FC(100);
  if (result)
  {
    int v15 = *(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 124);
    int v16 = v15 - 1;
    if (v15 - 1 >= 0) {
      --v15;
    }
    int v17 = v15 >> 1;
    int v18 = v17 * a5;
    uint64_t v19 = v17 * a5;
    int v20 = (_DWORD *)(*(void *)(a1 + 128) + 4 * v17);
    int v21 = a5 * a4;
    if ((*(unsigned char *)(a1 + 208) & 1) == 0)
    {
      if (v16 == 5 && v21 >= 4)
      {
        uint64_t v23 = 0;
        uint64_t v24 = (const float *)(v20 + 2);
        int v25 = (const float *)(v20 + 1);
        float32x4_t v26 = vld1q_dup_f32(v25);
        float32x4_t v27 = vld1q_dup_f32(v24);
        uint64_t v28 = 4 * v19;
        uint64_t v29 = 8 * a5;
        uint64_t v30 = (float32x4_t *)(a2 + v29 + 4 * v19);
        uint64_t v31 = (float32x4_t *)(a2 + v28 - v29);
        uint64_t v32 = 4 * a5;
        uint64_t v33 = (float32x4_t *)(a2 + v32 + v28);
        BOOL v34 = (float32x4_t *)(a2 + v28 - v32);
        int16x8_t v35 = a3;
        do
        {
          float32x4_t v36 = *v34++;
          float32x4_t v37 = v36;
          float32x4_t v38 = *v33++;
          float32x4_t v39 = v38;
          float32x4_t v40 = *v31++;
          float32x4_t v41 = v40;
          float32x4_t v42 = *v30++;
          *v35++ = vmlaq_f32(vmulq_f32(v26, vsubq_f32(v39, v37)), v27, vsubq_f32(v42, v41));
          v23 += 4;
        }
        while (v23 <= (unint64_t)(v21 - 4));
        int v43 = v21 - 4;
        if ((int)v23 > v21 - 4) {
          goto LABEL_34;
        }
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    if (v16 == 5)
    {
      float v44 = *(float *)v20;
      if (*(float *)v20 == -2.0 && (v13.i32[0] = v20[1], *(float *)v13.i32 == 0.0))
      {
        v14.i32[0] = v20[2];
        if (*(float *)v14.i32 != 1.0 && v21 >= 4)
        {
LABEL_78:
          unint64_t v90 = 0;
          unint64_t v91 = 0;
          float32x4_t v92 = (float32x4_t)vdupq_lane_s32(v13, 0);
          uint64_t v93 = 4 * v18;
          uint64_t v94 = 8 * a5;
          uint64_t v95 = a2 + v94 + v93;
          uint64_t v96 = v93 - v94;
          uint64_t v97 = 4 * a5;
          uint64_t v98 = a2 + v97 + v93;
          float32x4_t v99 = (float32x4_t)vdupq_lane_s32(v14, 0);
          uint64_t v100 = a2 + v96;
          uint64_t v101 = a2 + v93 - v97;
          do
          {
            a3[v90 / 0x10] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(a2 + v93 + v90), v44), v92, vaddq_f32(*(float32x4_t *)(v101 + v90), *(float32x4_t *)(v98 + v90))), v99, vaddq_f32(*(float32x4_t *)(v100 + v90), *(float32x4_t *)(v95 + v90)));
            v91 += 4;
            v90 += 16;
          }
          while (v91 <= (v21 - 4));
          LODWORD(v23) = v91;
          int v43 = v21 - 4;
          if ((int)v23 > v21 - 4) {
            goto LABEL_34;
          }
          goto LABEL_25;
        }
      }
      else if (v21 >= 4)
      {
        v13.i32[0] = v20[1];
        v14.i32[0] = v20[2];
        goto LABEL_78;
      }
    }
LABEL_24:
    LODWORD(v23) = 0;
    int v43 = v21 - 4;
    if (v21 - 4 < 0) {
      goto LABEL_34;
    }
    goto LABEL_25;
  }
  LODWORD(v23) = 0;
  int v21 = a5 * a4;
  int v43 = a5 * a4 - 4;
  if (v43 < 0) {
    goto LABEL_34;
  }
LABEL_25:
  uint64_t v23 = (int)v23;
  if ((int)v10 <= 1)
  {
    uint64_t v52 = v21 - (uint64_t)(int)v23;
    unint64_t v53 = v52 - 4;
    if ((unint64_t)(v52 - 4) < 0x1C) {
      goto LABEL_32;
    }
    uint64_t v69 = 4 * (int)v23;
    unint64_t v70 = ((4 * v52 - 16) & 0xFFFFFFFFFFFFFFF0) + v69 + 16;
    unint64_t v71 = (unint64_t)a3 + v70;
    BOOL v72 = (unint64_t)a3 + v69 >= a2 + v70 || a2 + 4 * (int)v23 >= v71;
    BOOL v73 = !v72;
    if ((unint64_t)v11 < v71 && (char *)a3 + v69 < (char *)(v11 + 1)) {
      goto LABEL_32;
    }
    if (v73) {
      goto LABEL_32;
    }
    uint64_t v75 = (v53 >> 2) + 1;
    uint64_t v23 = (int)v23 + 4 * (v75 & 0x7FFFFFFFFFFFFFFCLL);
    uint64_t v76 = &a3->f32[(unint64_t)v69 / 4];
    uint64_t v77 = (const float *)(a2 + v69);
    uint64_t v78 = v75 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      float32x4x4_t v102 = vld4q_f32(v77);
      v77 += 16;
      v103.val[0] = vmulq_n_f32(v102.val[0], *v11);
      v103.val[1] = vmulq_n_f32(v102.val[1], *v11);
      v103.val[2] = vmulq_n_f32(v102.val[2], *v11);
      v103.val[3] = vmulq_n_f32(v102.val[3], *v11);
      vst4q_f32(v76, v103);
      v76 += 16;
      v78 -= 4;
    }
    while (v78);
    if (v75 != (v75 & 0x7FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      uint64_t v54 = (float32x4_t *)(a2 + 4 * v23);
      uint64_t v55 = (float32x4_t *)((char *)a3 + 4 * v23);
      do
      {
        float32x4_t v56 = *v54++;
        *v55++ = vmulq_n_f32(v56, *v11);
        v23 += 4;
      }
      while (v23 <= v43);
    }
  }
  else
  {
    uint64_t v46 = 4 * a5;
    uint64_t v47 = (float32x4_t *)(a2 + v46 + 4 * (int)v23);
    do
    {
      float32x4_t v48 = vmulq_n_f32(*(float32x4_t *)(a2 + 4 * v23), *v11);
      uint64_t v49 = v47;
      uint64_t v50 = v10 - 1;
      uint64_t result = (uint64_t)(v11 + 1);
      do
      {
        float v51 = *(float *)result;
        result += 4;
        float32x4_t v48 = vmlaq_n_f32(v48, *v49, v51);
        uint64_t v49 = (float32x4_t *)((char *)v49 + v46);
        --v50;
      }
      while (v50);
      *(float32x4_t *)((char *)a3 + 4 * v23) = v48;
      v23 += 4;
      ++v47;
    }
    while (v23 <= v43);
  }
LABEL_34:
  if ((int)v23 < v21)
  {
    uint64_t v23 = (int)v23;
    if ((int)v10 <= 1)
    {
      unint64_t v64 = v21 - (uint64_t)(int)v23;
      if (v64 < 0xC) {
        goto LABEL_42;
      }
      uint64_t v79 = 4 * (int)v23;
      unint64_t v80 = (unint64_t)a3->u64 + 4 * v21;
      BOOL v81 = (unint64_t)a3 + v79 >= a2 + 4 * v21 || a2 + 4 * (int)v23 >= v80;
      BOOL v82 = !v81;
      if ((unint64_t)v11 < v80 && (char *)a3 + v79 < (char *)(v11 + 1)) {
        goto LABEL_42;
      }
      if (v82) {
        goto LABEL_42;
      }
      uint64_t v23 = (v64 & 0xFFFFFFFFFFFFFFF8) + (int)v23;
      float32x4_t v84 = vld1q_dup_f32(v11);
      uint64_t v85 = v79 + 16;
      float32x2_t v86 = (float32x4_t *)(a2 + v79 + 16);
      int v87 = (float32x4_t *)((char *)a3 + v85);
      unint64_t v88 = v64 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v89 = vmulq_f32(v84, *v86);
        v87[-1] = vmulq_f32(v84, v86[-1]);
        *int v87 = v89;
        v86 += 2;
        v87 += 2;
        v88 -= 8;
      }
      while (v88);
      if (v64 != (v64 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_42:
        unint64_t v65 = (float *)(a2 + 4 * v23);
        unint64_t v66 = &a3->f32[v23];
        uint64_t v67 = v21 - v23;
        do
        {
          float v68 = *v65++;
          *v66++ = *v11 * v68;
          --v67;
        }
        while (v67);
      }
    }
    else
    {
      uint64_t v57 = 4 * a5;
      float v58 = (float *)(a2 + v57 + 4 * (int)v23);
      do
      {
        float v59 = *v11 * *(float *)(a2 + 4 * v23);
        int32x4_t v60 = v58;
        uint64_t v61 = v10 - 1;
        unint64_t v62 = v11 + 1;
        do
        {
          float v63 = *v62++;
          float v59 = v59 + (float)(v63 * *v60);
          int32x4_t v60 = (float *)((char *)v60 + v57);
          --v61;
        }
        while (v61);
        a3->f32[v23++] = v59;
        ++v58;
      }
      while (v23 != v21);
    }
  }
  return result;
}

void sub_10033A3B0()
{
}

uint64_t sub_10033A3C4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033A444(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_100499D30;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        int32x2_t v14 = *(void **)(a2 + 72);
        int v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033A680(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033A6B4(uint64_t a1)
{
  *(void *)a1 = off_100499D30;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033A764(uint64_t a1)
{
  *(void *)a1 = off_100499D30;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

float *sub_10033A834(float *result, const char *a2, unint64_t a3, int a4, int a5, int32x4_t a6, double a7, double a8, int8x16_t a9)
{
  uint64_t v9 = *((unsigned int *)result + 2);
  uint64_t v10 = (const float *)*((void *)result + 4);
  uint64_t v11 = (a5 * a4);
  unint64_t v12 = (v11 - 4);
  if ((int)v11 < 4)
  {
    LODWORD(v13) = 0;
    goto LABEL_13;
  }
  if ((int)v9 > 1)
  {
    unint64_t v13 = 0;
    int32x2_t v14 = (__int32 *)&a2[a5];
    do
    {
      a6.i32[0] = *(_DWORD *)&a2[v13];
      int32x4_t v15 = (int32x4_t)vld1q_dup_f32(v10);
      a6 = vmulq_s32(v15, (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8)));
      int v16 = v14;
      uint64_t result = (float *)(v9 - 1);
      int v17 = v10 + 1;
      do
      {
        v15.i32[0] = *v16;
        int32x4_t v15 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v15.i8));
        int32x4_t v18 = (int32x4_t)vld1q_dup_f32(v17++);
        a6 = vmlaq_s32(a6, v18, v15);
        int v16 = (__int32 *)((char *)v16 + a5);
        uint64_t result = (float *)((char *)result - 1);
      }
      while (result);
      *(int32x4_t *)(a3 + 4 * v13) = a6;
      v13 += 4;
      ++v14;
    }
    while (v13 <= v12);
    goto LABEL_13;
  }
  if (v12 < 0x3C)
  {
    unint64_t v13 = 0;
LABEL_11:
    uint64_t v19 = (int *)(a3 + 4 * v13 + 8);
    uint64_t v20 = a2 + 1;
    do
    {
      uint64_t result = (float *)(*(_DWORD *)v10 * v20[v13]);
      int v21 = *(_DWORD *)v10 * v20[v13 + 1];
      int v22 = *(_DWORD *)v10 * v20[v13 + 2];
      *(v19 - 2) = *(_DWORD *)v10 * a2[v13];
      *(v19 - 1) = (int)result;
      *uint64_t v19 = v21;
      v19[1] = v22;
      v19 += 4;
      v13 += 4;
    }
    while (v13 <= v12);
    goto LABEL_13;
  }
  unint64_t v13 = 0;
  unint64_t v35 = ((4 * v12) & 0x3FFFFFFF0) + a3 + 16;
  BOOL v37 = (unint64_t)&a2[(v12 & 0xFFFFFFFC) + 4] > a3 && v35 > (unint64_t)a2;
  if ((unint64_t)v10 < v35 && (unint64_t)(v10 + 1) > a3) {
    goto LABEL_11;
  }
  if (v37) {
    goto LABEL_11;
  }
  uint64_t v39 = (v12 >> 2) + 1;
  unint64_t v13 = 4 * (v39 & 0x7FFFFFF0);
  a9.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
  uint64_t v40 = v39 & 0x7FFFFFF0;
  float32x4_t v41 = (float *)a3;
  float32x4_t v42 = a2;
  do
  {
    int32x4_t v43 = (int32x4_t)vld1q_dup_f32(v10);
    int8x16x4_t v69 = vld4q_s8(v42);
    v42 += 64;
    v70.val[0] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[0], (int8x16_t)xmmword_100404890));
    v70.val[1] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[1], (int8x16_t)xmmword_100404890));
    v70.val[2] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[2], (int8x16_t)xmmword_100404890));
    v70.val[3] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[3], (int8x16_t)xmmword_100404890));
    float v44 = v41;
    vst4q_f32(v44, v70);
    v44 += 16;
    v70.val[0] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[0], (int8x16_t)xmmword_1004048C0));
    v71.val[0] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[0], (int8x16_t)xmmword_1004048B0));
    v72.val[0] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[0], (int8x16_t)xmmword_1004048A0));
    v72.val[1] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[1], (int8x16_t)xmmword_1004048A0));
    v72.val[2] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[2], (int8x16_t)xmmword_1004048A0));
    v72.val[3] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[3], (int8x16_t)xmmword_1004048A0));
    vst4q_f32(v44, v72);
    v71.val[1] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[1], (int8x16_t)xmmword_1004048B0));
    v71.val[2] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[2], (int8x16_t)xmmword_1004048B0));
    v71.val[3] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[3], (int8x16_t)xmmword_1004048B0));
    uint64_t v45 = v41 + 32;
    vst4q_f32(v45, v71);
    v70.val[1] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[1], (int8x16_t)xmmword_1004048C0));
    v70.val[2] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[2], (int8x16_t)xmmword_1004048C0));
    v70.val[3] = (float32x4_t)vmulq_s32(v43, (int32x4_t)vqtbl1q_s8(v69.val[3], (int8x16_t)xmmword_1004048C0));
    uint64_t result = v41 + 48;
    vst4q_f32(result, v70);
    v41 += 64;
    v40 -= 16;
  }
  while (v40);
  if (v39 != (v39 & 0x7FFFFFF0)) {
    goto LABEL_11;
  }
LABEL_13:
  if ((int)v13 >= (int)v11) {
    return result;
  }
  uint64_t v23 = v13;
  if ((int)v9 <= 1)
  {
    unint64_t v29 = v11 - v13;
    if (v29 < 8
      || ((unint64_t v46 = a3 + 4 * v13,
           unint64_t v47 = a3 + 4 * v11,
           float32x4_t v48 = &a2[v13],
           v46 < (unint64_t)&a2[v11])
        ? (BOOL v49 = (unint64_t)v48 >= v47)
        : (BOOL v49 = 1),
          v49 ? (char v50 = 0) : (char v50 = 1),
          (unint64_t)v10 < v47 ? (BOOL v51 = v46 >= (unint64_t)(v10 + 1)) : (BOOL v51 = 1),
          !v51 || (v50 & 1) != 0))
    {
      uint64_t v30 = v23;
      goto LABEL_22;
    }
    if (v29 >= 0x20)
    {
      unint64_t v52 = v29 & 0xFFFFFFFFFFFFFFE0;
      int32x4_t v53 = (int32x4_t)vld1q_dup_f32(v10);
      uint64_t v54 = (int8x16_t *)&a2[v23 + 16];
      uint64_t v55 = a3 + 4 * v23 + 64;
      a9.i64[1] = 0xFFFFFF03FFFFFF02;
      unint64_t v56 = v29 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v57 = v54[-1];
        int32x4_t v58 = (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_1004048B0);
        int32x4_t v59 = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_1004048C0));
        int32x4_t v60 = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_100404890));
        int32x4_t v61 = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(*v54, (int8x16_t)xmmword_1004048A0));
        *(int32x4_t *)(v55 - 64) = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_100404890));
        *(int32x4_t *)(v55 - 48) = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_1004048A0));
        *(int32x4_t *)(v55 - 32) = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_1004048B0));
        *(int32x4_t *)(v55 - 16) = vmulq_s32(v53, (int32x4_t)vqtbl1q_s8(v57, (int8x16_t)xmmword_1004048C0));
        *(int32x4_t *)uint64_t v55 = v60;
        *(int32x4_t *)(v55 + 16) = v61;
        *(int32x4_t *)(v55 + 32) = vmulq_s32(v53, v58);
        *(int32x4_t *)(v55 + 48) = v59;
        v54 += 2;
        v55 += 128;
        v56 -= 32;
      }
      while (v56);
      if (v29 == v52) {
        return result;
      }
      if ((v29 & 0x18) == 0)
      {
        uint64_t v30 = v52 + v23;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v52 = 0;
    }
    uint64_t v30 = (v29 & 0xFFFFFFFFFFFFFFF8) + v23;
    int32x4_t v62 = (int32x4_t)vld1q_dup_f32(v10);
    unint64_t v63 = v52 - (v29 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v64 = v52 + v23;
    unint64_t v65 = (unint64_t *)&a2[v64];
    unint64_t v66 = a3 + 4 * v64;
    do
    {
      unint64_t v67 = *v65++;
      a9.i64[0] = v67;
      int32x4_t v68 = (int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1004048A0);
      a9 = (int8x16_t)vmulq_s32(v62, (int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_100404890));
      *(int8x16_t *)unint64_t v66 = a9;
      *(int32x4_t *)(v66 + 16) = vmulq_s32(v62, v68);
      v66 += 32;
      v63 += 8;
    }
    while (v63);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8)) {
      return result;
    }
LABEL_22:
    uint64_t v31 = (_DWORD *)(a3 + 4 * v30);
    uint64_t v32 = &a2[v30];
    uint64_t v33 = v11 - v30;
    do
    {
      int v34 = *(unsigned __int8 *)v32++;
      *v31++ = *(_DWORD *)v10 * v34;
      --v33;
    }
    while (v33);
    return result;
  }
  uint64_t v24 = v9 - 1;
  do
  {
    int v25 = *(_DWORD *)v10 * a2[v23];
    float32x4_t v26 = &a2[a5];
    uint64_t v27 = v24;
    uint64_t result = (float *)(v10 + 1);
    do
    {
      float v28 = *result++;
      v25 += LODWORD(v28) * v26[v23];
      v26 += a5;
      --v27;
    }
    while (v27);
    *(_DWORD *)(a3 + 4 * v23++) = v25;
  }
  while (v23 != v11);
  return result;
}

void sub_10033AC48()
{
}

uint64_t sub_10033AC5C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033ACDC(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_100499DB0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        int32x2_t v14 = *(void **)(a2 + 72);
        int32x4_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033AF18(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033AF4C(uint64_t a1)
{
  *(void *)a1 = off_100499DB0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033AFFC(uint64_t a1)
{
  *(void *)a1 = off_100499DB0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

float *sub_10033B0CC(float *result, const char *a2, unint64_t a3, int a4, int a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, int8x16_t a9, float a10)
{
  uint64_t v10 = *((unsigned int *)result + 2);
  uint64_t v11 = (float *)*((void *)result + 4);
  uint64_t v12 = (a5 * a4);
  unint64_t v13 = (v12 - 4);
  if ((int)v12 < 4)
  {
    LODWORD(v14) = 0;
    goto LABEL_27;
  }
  if ((int)v10 > 1)
  {
    unint64_t v14 = 0;
    int32x4_t v15 = (unsigned __int32 *)&a2[a5];
    do
    {
      a7.i32[0] = *(_DWORD *)&a2[v14];
      a7 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a7.f32)));
      a6 = vmulq_n_f32(a7, *v11);
      int v16 = v15;
      uint64_t result = (float *)(v10 - 1);
      int v17 = v11 + 1;
      do
      {
        float v18 = *v17++;
        a8.i32[0] = *v16;
        a8 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a8.f32)));
        a6 = vmlaq_n_f32(a6, a8, v18);
        int v16 = (unsigned __int32 *)((char *)v16 + a5);
        uint64_t result = (float *)((char *)result - 1);
      }
      while (result);
      *(float32x4_t *)(a3 + 4 * v14) = a6;
      v14 += 4;
      ++v15;
    }
    while (v14 <= v13);
    goto LABEL_27;
  }
  if (v13 < 0x3C)
  {
    unint64_t v14 = 0;
LABEL_25:
    uint64_t v30 = (_DWORD *)(a3 + 4 * v14 + 8);
    uint64_t v31 = a2 + 1;
    do
    {
      a7.i8[0] = a2[v14];
      a7.f32[0] = *v11 * (float)a7.u32[0];
      a8.i8[0] = v31[v14];
      a8.f32[0] = *v11 * (float)a8.u32[0];
      a9.i8[0] = v31[v14 + 1];
      *(float *)a9.i32 = *v11 * (float)a9.u32[0];
      LOBYTE(a10) = v31[v14 + 2];
      a10 = (float)LODWORD(a10);
      a6.f32[0] = *v11 * a10;
      *(v30 - 2) = a7.i32[0];
      *(v30 - 1) = a8.i32[0];
      *uint64_t v30 = a9.i32[0];
      v30[1] = a6.i32[0];
      v30 += 4;
      v14 += 4;
    }
    while (v14 <= v13);
    goto LABEL_27;
  }
  unint64_t v14 = 0;
  unint64_t v19 = ((4 * v13) & 0x3FFFFFFF0) + a3 + 16;
  BOOL v21 = (unint64_t)&a2[(v13 & 0xFFFFFFFC) + 4] > a3 && v19 > (unint64_t)a2;
  if ((unint64_t)v11 < v19 && (unint64_t)(v11 + 1) > a3) {
    goto LABEL_25;
  }
  if (v21) {
    goto LABEL_25;
  }
  uint64_t v23 = (v13 >> 2) + 1;
  unint64_t v14 = 4 * (v23 & 0x7FFFFFF0);
  a6.i32[0] = -244;
  a7.i32[0] = -248;
  a8.i32[0] = -252;
  a9 = (int8x16_t)xmmword_100404890;
  uint64_t v24 = v23 & 0x7FFFFFF0;
  int v25 = (float *)a3;
  float32x4_t v26 = a2;
  do
  {
    a10 = *v11;
    int8x16x4_t v64 = vld4q_s8(v26);
    v26 += 64;
    v65.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[0], (int8x16_t)xmmword_1004048C0)), *v11);
    v65.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[1], (int8x16_t)xmmword_1004048C0)), *v11);
    v66.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[0], (int8x16_t)xmmword_1004048B0)), *v11);
    v63.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[0], (int8x16_t)xmmword_100404890)), *v11);
    v63.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[1], (int8x16_t)xmmword_100404890)), *v11);
    v63.val[2] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[2], (int8x16_t)xmmword_100404890)), *v11);
    v63.val[3] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[3], (int8x16_t)xmmword_100404890)), *v11);
    uint64_t v27 = v25;
    vst4q_f32(v27, v63);
    v27 += 16;
    v66.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[1], (int8x16_t)xmmword_1004048B0)), a10);
    float32x4_t v28 = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[0], (int8x16_t)xmmword_1004048A0)), a10);
    v63.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[1], (int8x16_t)xmmword_1004048A0)), a10);
    v63.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[2], (int8x16_t)xmmword_1004048A0)), a10);
    v63.val[2] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[3], (int8x16_t)xmmword_1004048A0)), a10);
    vst4q_f32(v27, v63);
    v66.val[2] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[2], (int8x16_t)xmmword_1004048B0)), a10);
    v66.val[3] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[3], (int8x16_t)xmmword_1004048B0)), a10);
    unint64_t v29 = v25 + 32;
    vst4q_f32(v29, v66);
    v65.val[2] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[2], (int8x16_t)xmmword_1004048C0)), a10);
    v65.val[3] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v64.val[3], (int8x16_t)xmmword_1004048C0)), a10);
    uint64_t result = v25 + 48;
    vst4q_f32(result, v65);
    v25 += 64;
    v24 -= 16;
  }
  while (v24);
  if (v23 != (v23 & 0x7FFFFFF0)) {
    goto LABEL_25;
  }
LABEL_27:
  if ((int)v14 >= (int)v12) {
    return result;
  }
  uint64_t v32 = v14;
  if ((int)v10 <= 1)
  {
    unint64_t v38 = v12 - v14;
    if (v38 < 8
      || ((unint64_t v39 = a3 + 4 * v14,
           unint64_t v40 = a3 + 4 * v12,
           float32x4_t v41 = &a2[v14],
           v39 < (unint64_t)&a2[v12])
        ? (BOOL v42 = (unint64_t)v41 >= v40)
        : (BOOL v42 = 1),
          v42 ? (char v43 = 0) : (char v43 = 1),
          (unint64_t)v11 < v40 ? (BOOL v44 = v39 >= (unint64_t)(v11 + 1)) : (BOOL v44 = 1),
          !v44 || (v43 & 1) != 0))
    {
      uint64_t v46 = v32;
      goto LABEL_50;
    }
    if (v38 >= 0x10)
    {
      float32x4_t v51 = vld1q_dup_f32(v11);
      unint64_t v45 = v38 & 0xFFFFFFFFFFFFFFF0;
      unint64_t v52 = (int8x16_t *)&a2[v32];
      a9.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
      unint64_t v53 = v38 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v54 = (float32x4_t *)(a3 + 4 * v32);
      do
      {
        int8x16_t v55 = *v52++;
        _DWORD v54[2] = vmulq_f32(v51, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1004048B0)));
        v54[3] = vmulq_f32(v51, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1004048C0)));
        *uint64_t v54 = vmulq_f32(v51, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_100404890)));
        v54[1] = vmulq_f32(v51, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_1004048A0)));
        v54 += 4;
        v53 -= 16;
      }
      while (v53);
      if (v38 == v45) {
        return result;
      }
      if ((v38 & 8) == 0)
      {
        uint64_t v46 = v45 + v32;
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v45 = 0;
    }
    uint64_t v46 = (v38 & 0xFFFFFFFFFFFFFFF8) + v32;
    float32x4_t v56 = vld1q_dup_f32(v11);
    unint64_t v57 = v45 - (v38 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v58 = v45 + v32;
    int32x4_t v59 = (unint64_t *)&a2[v58];
    unint64_t v60 = a3 + 4 * v58;
    do
    {
      unint64_t v61 = *v59++;
      a9.i64[0] = v61;
      uint32x4_t v62 = (uint32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_100404890);
      a9 = (int8x16_t)vmulq_f32(v56, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_1004048A0)));
      *(float32x4_t *)unint64_t v60 = vmulq_f32(v56, vcvtq_f32_u32(v62));
      *(int8x16_t *)(v60 + 16) = a9;
      v60 += 32;
      v57 += 8;
    }
    while (v57);
    if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8)) {
      return result;
    }
LABEL_50:
    unint64_t v47 = (float *)(a3 + 4 * v46);
    float32x4_t v48 = &a2[v46];
    uint64_t v49 = v12 - v46;
    do
    {
      unsigned int v50 = *(unsigned __int8 *)v48++;
      *v47++ = *v11 * (float)v50;
      --v49;
    }
    while (v49);
    return result;
  }
  uint64_t v33 = v10 - 1;
  do
  {
    a6.i8[0] = a2[v32];
    a6.f32[0] = *v11 * (float)a6.u32[0];
    int v34 = &a2[a5];
    uint64_t v35 = v33;
    float32x4_t v36 = v11 + 1;
    do
    {
      float v37 = *v36++;
      a8.i8[0] = v34[v32];
      a8.f32[0] = (float)a8.u32[0];
      a6.f32[0] = a6.f32[0] + (float)(v37 * a8.f32[0]);
      v34 += a5;
      --v35;
    }
    while (v35);
    *(_DWORD *)(a3 + 4 * v32++) = a6.i32[0];
  }
  while (v32 != v12);
  return result;
}

void sub_10033B530()
{
}

uint64_t sub_10033B544(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033B5C4(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_100499E30;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        unint64_t v14 = *(void **)(a2 + 72);
        int32x4_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033B800(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033B834(uint64_t a1)
{
  *(void *)a1 = off_100499E30;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033B8E4(uint64_t a1)
{
  *(void *)a1 = off_100499E30;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_10033B9B4(uint64_t result, const char *a2, unint64_t a3, int a4, int a5, double a6, double a7, float64x2_t a8, double a9, float64x2_t a10, double a11)
{
  uint64_t v11 = *(unsigned int *)(result + 8);
  uint64_t v12 = *(double **)(result + 32);
  uint64_t v13 = (a5 * a4);
  unint64_t v14 = (v13 - 4);
  if ((int)v13 < 4)
  {
    LODWORD(v15) = 0;
    goto LABEL_27;
  }
  if ((int)v11 > 1)
  {
    unint64_t v15 = 0;
    uint64_t v16 = (uint64_t)&a2[a5 + 1];
    do
    {
      LOBYTE(a6) = a2[v15];
      a6 = *v12 * (double)*(unint64_t *)&a6;
      LOBYTE(a7) = a2[v15 + 1];
      a7 = *v12 * (double)*(unint64_t *)&a7;
      LOBYTE(a8.f64[0]) = a2[v15 + 2];
      a8.f64[0] = *v12 * (double)*(unint64_t *)&a8.f64[0];
      LOBYTE(a10.f64[0]) = a2[v15 + 3];
      double v17 = *v12 * (double)*(unint64_t *)&a10.f64[0];
      float v18 = (unsigned char *)v16;
      uint64_t v19 = v11 - 1;
      uint64_t v20 = v12 + 1;
      do
      {
        double v21 = *v20++;
        a10.f64[0] = v21;
        LOBYTE(a11) = *(v18 - 1);
        *(double *)&unint64_t v22 = (double)*(unint64_t *)&a11;
        a6 = a6 + v21 * *(double *)&v22;
        LOBYTE(v22) = *v18;
        *(double *)&unint64_t v23 = (double)v22;
        a7 = a7 + v21 * *(double *)&v23;
        LOBYTE(v23) = v18[1];
        *(double *)&unint64_t v24 = (double)v23;
        a8.f64[0] = a8.f64[0] + v21 * *(double *)&v24;
        LOBYTE(v24) = v18[2];
        a11 = (double)v24;
        double v17 = v17 + v21 * a11;
        v18 += a5;
        --v19;
      }
      while (v19);
      *(double *)(a3 + 8 * v15) = a6;
      *(double *)(a3 + ((8 * v15) | 8)) = a7;
      uint64_t result = (8 * v15) | 0x10;
      *(float64_t *)(a3 + result) = a8.f64[0];
      *(double *)(a3 + ((8 * v15) | 0x18)) = v17;
      v15 += 4;
      v16 += 4;
    }
    while (v15 <= v14);
    goto LABEL_27;
  }
  if (v14 < 0x3C)
  {
    unint64_t v15 = 0;
LABEL_25:
    uint32x4_t v62 = (double *)(a3 + 8 * v15 + 16);
    float32x4x4_t v63 = a2 + 1;
    do
    {
      LOBYTE(a7) = a2[v15];
      a7 = *v12 * (double)*(unint64_t *)&a7;
      LOBYTE(a8.f64[0]) = v63[v15];
      a8.f64[0] = *v12 * (double)*(unint64_t *)&a8.f64[0];
      LOBYTE(a9) = v63[v15 + 1];
      a9 = *v12 * (double)*(unint64_t *)&a9;
      LOBYTE(a10.f64[0]) = v63[v15 + 2];
      a10.f64[0] = (double)*(unint64_t *)&a10.f64[0];
      a6 = *v12 * a10.f64[0];
      *(v62 - 2) = a7;
      *(v62 - 1) = a8.f64[0];
      *uint32x4_t v62 = a9;
      v62[1] = a6;
      v62 += 4;
      v15 += 4;
    }
    while (v15 <= v14);
    goto LABEL_27;
  }
  unint64_t v15 = 0;
  unint64_t v25 = ((8 * v14) & 0x7FFFFFFE0) + a3 + 32;
  BOOL v27 = (unint64_t)&a2[(v14 & 0xFFFFFFFC) + 4] > a3 && v25 > (unint64_t)a2;
  if ((unint64_t)v12 < v25 && (unint64_t)(v12 + 1) > a3) {
    goto LABEL_25;
  }
  if (v27) {
    goto LABEL_25;
  }
  uint64_t v29 = (v14 >> 2) + 1;
  unint64_t v15 = 4 * (v29 & 0x7FFFFFF0);
  *(void *)&a6 = 0xFF000000FFLL;
  uint64_t v30 = v29 & 0x7FFFFFF0;
  uint64_t v31 = (double *)a3;
  uint64_t v32 = a2;
  do
  {
    a7 = *v12;
    int8x16x4_t v130 = vld4q_s8(v32);
    v32 += 64;
    unint64_t v33 = vextq_s8(v130.val[0], v130.val[0], 8uLL).u64[0];
    v34.i32[0] = v130.val[0].u8[0];
    v34.i32[1] = v130.val[0].u8[1];
    int8x8_t v35 = vand_s8(v34, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v35.u32[0];
    v36.i64[1] = v35.u32[1];
    v37.i32[0] = v130.val[0].u8[2];
    v37.i32[1] = v130.val[0].u8[3];
    float64x2_t v38 = vcvtq_f64_u64(v36);
    int8x8_t v39 = vand_s8(v37, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v39.u32[0];
    v36.i64[1] = v39.u32[1];
    uint64x2_t v40 = v36;
    v41.i32[0] = v130.val[1].u8[0];
    v41.i32[1] = v130.val[1].u8[1];
    v131.val[0] = vmulq_n_f64(v38, *v12);
    *(int8x8_t *)&v38.f64[0] = vand_s8(v41, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), *v12);
    LODWORD(v38.f64[0]) = v130.val[2].u8[0];
    HIDWORD(v38.f64[0]) = v130.val[2].u8[1];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[2] = vmulq_n_f64(vcvtq_f64_u64(v36), *v12);
    LODWORD(v38.f64[0]) = v130.val[3].u8[0];
    HIDWORD(v38.f64[0]) = v130.val[3].u8[1];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[3] = vmulq_n_f64(vcvtq_f64_u64(v36), *v12);
    BOOL v42 = v31;
    vst4q_f64(v42, v131);
    v42 += 8;
    float64x2_t v43 = vmulq_n_f64(vcvtq_f64_u64(v40), a7);
    LODWORD(v38.f64[0]) = v130.val[1].u8[2];
    HIDWORD(v38.f64[0]) = v130.val[1].u8[3];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    LODWORD(v131.val[2].f64[0]) = v130.val[2].u8[2];
    HIDWORD(v131.val[2].f64[0]) = v130.val[2].u8[3];
    float64x2_t v44 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v131.val[2].f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[0] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[3].u8[2];
    HIDWORD(v38.f64[0]) = v130.val[3].u8[3];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[0].u8[4];
    HIDWORD(v38.f64[0]) = v130.val[0].u8[5];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    vst4q_f64(v42, v131);
    float64x2_t v45 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[1].u8[4];
    HIDWORD(v38.f64[0]) = v130.val[1].u8[5];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    float64x2_t v46 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[2].u8[4];
    HIDWORD(v38.f64[0]) = v130.val[2].u8[5];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[0] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[3].u8[4];
    HIDWORD(v38.f64[0]) = v130.val[3].u8[5];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[0].u8[6];
    HIDWORD(v38.f64[0]) = v130.val[0].u8[7];
    unint64_t v47 = v31 + 16;
    vst4q_f64(v47, v131);
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    float64x2_t v48 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[1].u8[6];
    HIDWORD(v38.f64[0]) = v130.val[1].u8[7];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    float64x2_t v49 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[2].u8[6];
    HIDWORD(v38.f64[0]) = v130.val[2].u8[7];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[0] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v130.val[3].u8[6];
    HIDWORD(v38.f64[0]) = v130.val[3].u8[7];
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v38.f64[0]) = v33;
    HIDWORD(v38.f64[0]) = BYTE1(v33);
    *(int8x8_t *)&v38.f64[0] = vand_s8(*(int8x8_t *)&v38.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v38.f64[0]);
    v36.i64[1] = HIDWORD(v38.f64[0]);
    unsigned int v50 = v31 + 24;
    vst4q_f64(v50, v131);
    LODWORD(v48.f64[0]) = BYTE2(v33);
    HIDWORD(v48.f64[0]) = BYTE3(v33);
    *(int8x8_t *)&v48.f64[0] = vand_s8(*(int8x8_t *)&v48.f64[0], (int8x8_t)0xFF000000FFLL);
    *(void *)&v49.f64[0] = vextq_s8(v130.val[1], v130.val[1], 8uLL).u64[0];
    *(void *)&v131.val[0].f64[0] = vextq_s8(v130.val[2], v130.val[2], 8uLL).u64[0];
    v130.val[0].i64[0] = vextq_s8(v130.val[3], v130.val[3], 8uLL).u64[0];
    v130.val[1].i32[0] = LOBYTE(v49.f64[0]);
    v130.val[1].i32[1] = BYTE1(v49.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    *(int8x8_t *)v130.val[1].i8 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[1].u32[0];
    v36.i64[1] = v130.val[1].u32[1];
    v131.val[2] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[1].i32[0] = LOBYTE(v131.val[0].f64[0]);
    v130.val[1].i32[1] = BYTE1(v131.val[0].f64[0]);
    v36.i64[0] = LODWORD(v48.f64[0]);
    v36.i64[1] = HIDWORD(v48.f64[0]);
    v130.val[2] = (int8x16_t)v36;
    *(int8x8_t *)v130.val[1].i8 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[1].u32[0];
    v36.i64[1] = v130.val[1].u32[1];
    v131.val[3] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[1].i32[0] = v130.val[0].u8[0];
    v130.val[1].i32[1] = v130.val[0].u8[1];
    *(int8x8_t *)v130.val[1].i8 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[1].u32[0];
    v36.i64[1] = v130.val[1].u32[1];
    float64x2_t v51 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[1].i32[0] = BYTE4(v33);
    v130.val[1].i32[1] = BYTE5(v33);
    unint64_t v52 = v31 + 32;
    vst4q_f64(v52, *(float64x2x4_t *)((char *)&v131 + 16));
    v130.val[3].i32[0] = BYTE2(v49.f64[0]);
    v130.val[3].i32[1] = BYTE3(v49.f64[0]);
    v131.val[1] = vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v130.val[2]), a7);
    *(int8x8_t *)v130.val[2].i8 = vand_s8(*(int8x8_t *)v130.val[3].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[2].u32[0];
    v36.i64[1] = v130.val[2].u32[1];
    v131.val[2] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[2].i32[0] = BYTE2(v131.val[0].f64[0]);
    v130.val[2].i32[1] = BYTE3(v131.val[0].f64[0]);
    *(int8x8_t *)v130.val[1].i8 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    *(int8x8_t *)v130.val[2].i8 = vand_s8(*(int8x8_t *)v130.val[2].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[2].u32[0];
    v36.i64[1] = v130.val[2].u32[1];
    v131.val[3] = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v130.val[2].i32[0] = v130.val[0].u8[2];
    v130.val[2].i32[1] = v130.val[0].u8[3];
    v36.i64[0] = v130.val[1].u32[0];
    v36.i64[1] = v130.val[1].u32[1];
    v130.val[1] = (int8x16_t)v36;
    *(int8x8_t *)v130.val[2].i8 = vand_s8(*(int8x8_t *)v130.val[2].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v130.val[2].u32[0];
    v36.i64[1] = v130.val[2].u32[1];
    float64x2_t v53 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    uint64_t v54 = v31 + 40;
    vst4q_f64(v54, *(float64x2x4_t *)((char *)&v131 + 16));
    v130.val[1] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64((uint64x2_t)v130.val[1]), a7);
    LODWORD(v48.f64[0]) = BYTE4(v49.f64[0]);
    HIDWORD(v48.f64[0]) = BYTE5(v49.f64[0]);
    *(int8x8_t *)&v48.f64[0] = vand_s8(*(int8x8_t *)&v48.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v48.f64[0]);
    v36.i64[1] = HIDWORD(v48.f64[0]);
    v130.val[2] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    LODWORD(v48.f64[0]) = BYTE4(v131.val[0].f64[0]);
    HIDWORD(v48.f64[0]) = BYTE5(v131.val[0].f64[0]);
    *(int8x8_t *)&v48.f64[0] = vand_s8(*(int8x8_t *)&v48.f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v48.f64[0]);
    v36.i64[1] = HIDWORD(v48.f64[0]);
    LODWORD(v131.val[1].f64[0]) = v130.val[0].u8[4];
    HIDWORD(v131.val[1].f64[0]) = v130.val[0].u8[5];
    v130.val[3] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    *(int8x8_t *)&v48.f64[0] = vand_s8(*(int8x8_t *)&v131.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = LODWORD(v48.f64[0]);
    v36.i64[1] = HIDWORD(v48.f64[0]);
    float64x2_t v55 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    float32x4_t v56 = v31 + 48;
    vst4q_f64(v56, *(float64x2x4_t *)((char *)&v130 + 16));
    v130.val[1].i32[0] = BYTE6(v33);
    v130.val[1].i32[1] = HIBYTE(v33);
    int8x8_t v57 = vand_s8(*(int8x8_t *)v130.val[1].i8, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v57.u32[0];
    v36.i64[1] = v57.u32[1];
    a10 = vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v57.i32[0] = BYTE6(v49.f64[0]);
    v57.i32[1] = HIBYTE(v49.f64[0]);
    int8x8_t v58 = vand_s8(v57, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v58.u32[0];
    v36.i64[1] = v58.u32[1];
    v130.val[2] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    v58.i32[0] = BYTE6(v131.val[0].f64[0]);
    v58.i32[1] = HIBYTE(v131.val[0].f64[0]);
    LODWORD(a9) = v130.val[0].u8[6];
    int8x8_t v59 = vand_s8(v58, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v59.u32[0];
    v36.i64[1] = v59.u32[1];
    HIDWORD(a9) = v130.val[0].u8[7];
    v130.val[3] = (int8x16_t)vmulq_n_f64(vcvtq_f64_u64(v36), a7);
    int8x8_t v60 = vand_s8(*(int8x8_t *)&a9, (int8x8_t)0xFF000000FFLL);
    v36.i64[0] = v60.u32[0];
    v36.i64[1] = v60.u32[1];
    a8 = vcvtq_f64_u64(v36);
    float64x2_t v61 = vmulq_n_f64(a8, a7);
    uint64_t result = (uint64_t)(v31 + 56);
    vst4q_f64((double *)result, *(float64x2x4_t *)a10.f64);
    v31 += 64;
    v30 -= 16;
  }
  while (v30);
  if (v29 != (v29 & 0x7FFFFFF0)) {
    goto LABEL_25;
  }
LABEL_27:
  if ((int)v15 >= (int)v13) {
    return result;
  }
  uint64_t v64 = v15;
  if ((int)v11 <= 1)
  {
    unint64_t v70 = v13 - v15;
    if (v70 < 8
      || ((unint64_t v71 = a3 + 8 * v15,
           unint64_t v72 = a3 + 8 * v13,
           BOOL v73 = &a2[v15],
           v71 < (unint64_t)&a2[v13])
        ? (BOOL v74 = (unint64_t)v73 >= v72)
        : (BOOL v74 = 1),
          v74 ? (char v75 = 0) : (char v75 = 1),
          (unint64_t)v12 < v72 ? (BOOL v76 = v71 >= (unint64_t)(v12 + 1)) : (BOOL v76 = 1),
          !v76 || (v75 & 1) != 0))
    {
      uint64_t v78 = v64;
      goto LABEL_50;
    }
    if (v70 >= 0x10)
    {
      unint64_t v77 = v70 & 0xFFFFFFFFFFFFFFF0;
      float64x2_t v83 = vld1q_dup_f64(v12);
      float32x4_t v84 = (int8x16_t *)&a2[v64];
      uint64_t v85 = (float64x2_t *)(a3 + 8 * v64);
      unint64_t v86 = v70 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v87 = *v84++;
        unint64_t v88 = vextq_s8(v87, v87, 8uLL).u64[0];
        v89.i32[0] = BYTE6(v88);
        v89.i32[1] = HIBYTE(v88);
        int8x8_t v90 = vand_s8(v89, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v90.u32[0];
        v91.i64[1] = v90.u32[1];
        v92.i32[0] = BYTE4(v88);
        float64x2_t v93 = vcvtq_f64_u64(v91);
        v92.i32[1] = BYTE5(v88);
        int8x8_t v94 = vand_s8(v92, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v94.u32[0];
        v91.i64[1] = v94.u32[1];
        v95.i32[0] = BYTE2(v88);
        v95.i32[1] = BYTE3(v88);
        float64x2_t v96 = vcvtq_f64_u64(v91);
        int8x8_t v97 = vand_s8(v95, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v97.u32[0];
        v91.i64[1] = v97.u32[1];
        float64x2_t v98 = vcvtq_f64_u64(v91);
        v99.i32[0] = v88;
        v99.i32[1] = BYTE1(v88);
        int8x8_t v100 = vand_s8(v99, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v100.u32[0];
        v91.i64[1] = v100.u32[1];
        v99.i32[0] = v87.u8[6];
        float64x2_t v101 = vcvtq_f64_u64(v91);
        v99.i32[1] = v87.u8[7];
        int8x8_t v102 = vand_s8(v99, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v102.u32[0];
        v91.i64[1] = v102.u32[1];
        v103.i32[0] = v87.u8[4];
        v103.i32[1] = v87.u8[5];
        float64x2_t v104 = vcvtq_f64_u64(v91);
        int8x8_t v105 = vand_s8(v103, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v105.u32[0];
        v91.i64[1] = v105.u32[1];
        float64x2_t v106 = vcvtq_f64_u64(v91);
        v107.i32[0] = v87.u8[2];
        v107.i32[1] = v87.u8[3];
        int8x8_t v108 = vand_s8(v107, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v108.u32[0];
        v91.i64[1] = v108.u32[1];
        v109.i32[0] = v87.u8[0];
        float64x2_t v110 = vcvtq_f64_u64(v91);
        v109.i32[1] = v87.u8[1];
        int8x8_t v111 = vand_s8(v109, (int8x8_t)0xFF000000FFLL);
        v91.i64[0] = v111.u32[0];
        v91.i64[1] = v111.u32[1];
        v85[2] = vmulq_f64(v83, v106);
        v85[3] = vmulq_f64(v83, v104);
        *uint64_t v85 = vmulq_f64(v83, vcvtq_f64_u64(v91));
        v85[1] = vmulq_f64(v83, v110);
        v85[6] = vmulq_f64(v83, v96);
        v85[7] = vmulq_f64(v83, v93);
        v85[4] = vmulq_f64(v83, v101);
        v85[5] = vmulq_f64(v83, v98);
        v85 += 8;
        v86 -= 16;
      }
      while (v86);
      if (v70 == v77) {
        return result;
      }
      if ((v70 & 8) == 0)
      {
        uint64_t v78 = v77 + v64;
        goto LABEL_50;
      }
    }
    else
    {
      unint64_t v77 = 0;
    }
    float64x2_t v112 = vld1q_dup_f64(v12);
    uint64_t v78 = (v70 & 0xFFFFFFFFFFFFFFF8) + v64;
    unint64_t v113 = v77 - (v70 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v114 = v77 + v64;
    BOOL v115 = &a2[v114];
    uint64_t v116 = (float64x2_t *)(a3 + 8 * v114);
    do
    {
      uint64_t v117 = *(void *)v115;
      v115 += 8;
      v118.i32[0] = BYTE6(v117);
      v118.i32[1] = HIBYTE(v117);
      int8x8_t v119 = vand_s8(v118, (int8x8_t)0xFF000000FFLL);
      v120.i64[0] = v119.u32[0];
      v120.i64[1] = v119.u32[1];
      v121.i32[0] = BYTE4(v117);
      float64x2_t v122 = vcvtq_f64_u64(v120);
      v121.i32[1] = BYTE5(v117);
      int8x8_t v123 = vand_s8(v121, (int8x8_t)0xFF000000FFLL);
      v120.i64[0] = v123.u32[0];
      v120.i64[1] = v123.u32[1];
      v124.i32[0] = BYTE2(v117);
      v124.i32[1] = BYTE3(v117);
      float64x2_t v125 = vcvtq_f64_u64(v120);
      int8x8_t v126 = vand_s8(v124, (int8x8_t)0xFF000000FFLL);
      v120.i64[0] = v126.u32[0];
      v120.i64[1] = v126.u32[1];
      float64x2_t v127 = vcvtq_f64_u64(v120);
      v128.i32[0] = v117;
      v128.i32[1] = BYTE1(v117);
      int8x8_t v129 = vand_s8(v128, (int8x8_t)0xFF000000FFLL);
      v120.i64[0] = v129.u32[0];
      v120.i64[1] = v129.u32[1];
      v116[2] = vmulq_f64(v112, v125);
      v116[3] = vmulq_f64(v112, v122);
      *uint64_t v116 = vmulq_f64(v112, vcvtq_f64_u64(v120));
      v116[1] = vmulq_f64(v112, v127);
      v116 += 4;
      v113 += 8;
    }
    while (v113);
    if (v70 == (v70 & 0xFFFFFFFFFFFFFFF8)) {
      return result;
    }
LABEL_50:
    uint64_t v79 = (double *)(a3 + 8 * v78);
    unint64_t v80 = &a2[v78];
    uint64_t v81 = v13 - v78;
    do
    {
      unsigned int v82 = *(unsigned __int8 *)v80++;
      *v79++ = *v12 * (double)v82;
      --v81;
    }
    while (v81);
    return result;
  }
  uint64_t v65 = v11 - 1;
  do
  {
    LOBYTE(a6) = a2[v64];
    a6 = *v12 * (double)*(unint64_t *)&a6;
    float32x4x4_t v66 = &a2[a5];
    uint64_t v67 = v65;
    int32x4_t v68 = v12 + 1;
    do
    {
      double v69 = *v68++;
      LOBYTE(a8.f64[0]) = v66[v64];
      a8.f64[0] = (double)*(unint64_t *)&a8.f64[0];
      a6 = a6 + v69 * a8.f64[0];
      v66 += a5;
      --v67;
    }
    while (v67);
    *(double *)(a3 + 8 * v64++) = a6;
  }
  while (v64 != v13);
  return result;
}

void sub_10033C2D8()
{
}

uint64_t sub_10033C2EC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033C36C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_100499EB0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        unint64_t v14 = *(void **)(a2 + 72);
        unint64_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033C5A8(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033C5DC(uint64_t a1)
{
  *(void *)a1 = off_100499EB0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033C68C(uint64_t a1)
{
  *(void *)a1 = off_100499EB0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

float *sub_10033C75C(float *result, const __int16 *a2, unint64_t a3, int a4, int a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, uint16x8_t a9, uint16x8_t a10)
{
  uint64_t v10 = *((unsigned int *)result + 2);
  uint64_t v11 = (float *)*((void *)result + 4);
  uint64_t v12 = (a5 * a4);
  unint64_t v13 = (v12 - 4);
  if ((int)v12 < 4)
  {
    LODWORD(v14) = 0;
    goto LABEL_15;
  }
  if ((int)v10 <= 1)
  {
    if (v13 >= 0x1C
      && ((unint64_t)(v11 + 1) <= a3 || (unint64_t)v11 >= ((4 * v13) & 0x3FFFFFFF0) + a3 + 16))
    {
      uint64_t v36 = (v13 >> 2) + 1;
      unint64_t v14 = 4 * (v36 & 0x7FFFFFF8);
      uint64_t v37 = v36 & 0x7FFFFFF8;
      float64x2_t v38 = (float *)a3;
      int8x8_t v39 = a2;
      do
      {
        a6.f32[0] = *v11;
        *(int16x8x4_t *)(&a8 - 1) = vld4q_s16(v39);
        v39 += 32;
        v49.val[0] = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v40)), *v11);
        v49.val[1] = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)a8)), *v11);
        v49.val[2] = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(a9)), *v11);
        v49.val[3] = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(a10)), *v11);
        v50.val[0] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v40.i8)), *v11);
        v50.val[1] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a8.f32)), *v11);
        v50.val[2] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a9.i8)), *v11);
        a7 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a10.i8));
        v50.val[3] = vmulq_n_f32(a7, *v11);
        uint64_t result = v38 + 32;
        vst4q_f32(v38, v50);
        int8x8_t v41 = v38 + 16;
        vst4q_f32(v41, v49);
        float64x2_t v38 = result;
        v37 -= 8;
      }
      while (v37);
      if (v36 == (v36 & 0x7FFFFFF8)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v20 = (_DWORD *)(a3 + 4 * v14 + 8);
    uint64_t v21 = (unsigned __int16 *)&a2[v14 + 2];
    do
    {
      a7.i16[0] = *(v21 - 2);
      a7.f32[0] = *v11 * (float)a7.u32[0];
      a8.i16[0] = *(v21 - 1);
      a8.f32[0] = *v11 * (float)a8.u32[0];
      a9.i16[0] = *v21;
      *(float *)a9.i32 = *v11 * (float)a9.u32[0];
      a10.i16[0] = v21[1];
      *(float *)a10.i32 = (float)a10.u32[0];
      a6.f32[0] = *v11 * *(float *)a10.i32;
      *(v20 - 2) = a7.i32[0];
      *(v20 - 1) = a8.i32[0];
      *uint64_t v20 = a9.i32[0];
      v20[1] = a6.i32[0];
      v20 += 4;
      v14 += 4;
      v21 += 4;
    }
    while (v14 <= v13);
    goto LABEL_15;
  }
  unint64_t v14 = 0;
  uint64_t v15 = a5;
  int v16 = (uint16x4_t *)&a2[v15];
  do
  {
    a6 = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&a2[v14])), *v11);
    int v17 = v16;
    uint64_t result = (float *)(v10 - 1);
    float v18 = v11 + 1;
    do
    {
      float v19 = *v18++;
      a8 = vcvtq_f32_u32(vmovl_u16(*v17));
      a6 = vmlaq_n_f32(a6, a8, v19);
      int v17 = (uint16x4_t *)((char *)v17 + v15 * 2);
      uint64_t result = (float *)((char *)result - 1);
    }
    while (result);
    *(float32x4_t *)(a3 + 4 * v14) = a6;
    v14 += 4;
    ++v16;
  }
  while (v14 <= v13);
LABEL_15:
  if ((int)v14 >= (int)v12) {
    return result;
  }
  uint64_t v22 = v14;
  if ((int)v10 <= 1)
  {
    unint64_t v30 = v12 - v14;
    if (v30 >= 0x10
      && ((unint64_t v31 = a3 + 4 * v14, v31 >= (unint64_t)(v11 + 1))
       || (unint64_t)v11 >= a3 + 4 * v12))
    {
      unint64_t v14 = (v30 & 0xFFFFFFFFFFFFFFF0) + v14;
      float32x4_t v42 = vld1q_dup_f32(v11);
      float64x2_t v43 = (uint16x8_t *)&a2[v22 + 8];
      float64x2_t v44 = (float32x4_t *)(v31 + 32);
      unint64_t v45 = v30 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint16x8_t v46 = v43[-1];
        float32x4_t v47 = vcvtq_f32_u32(vmovl_high_u16(*v43));
        float32x4_t v48 = vmulq_f32(v42, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v43->i8)));
        v44[-2] = vmulq_f32(v42, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v46.i8)));
        v44[-1] = vmulq_f32(v42, vcvtq_f32_u32(vmovl_high_u16(v46)));
        *float64x2_t v44 = v48;
        v44[1] = vmulq_f32(v42, v47);
        v44 += 4;
        v43 += 2;
        v45 -= 16;
      }
      while (v45);
      if (v30 == (v30 & 0xFFFFFFFFFFFFFFF0)) {
        return result;
      }
    }
    else
    {
      unint64_t v14 = v14;
    }
    uint64_t v32 = (float *)(a3 + 4 * v14);
    uint64_t v33 = v12 - v14;
    int8x8_t v34 = &a2[v14];
    do
    {
      unsigned int v35 = *(unsigned __int16 *)v34++;
      *v32++ = *v11 * (float)v35;
      --v33;
    }
    while (v33);
    return result;
  }
  uint64_t v23 = v10 - 1;
  uint64_t v24 = a5;
  unint64_t v25 = (unsigned __int16 *)&a2[v14 + v24];
  do
  {
    a6.i16[0] = a2[v22];
    a6.f32[0] = *v11 * (float)a6.u32[0];
    float32x4_t v26 = v25;
    uint64_t v27 = v23;
    float32x4_t v28 = v11 + 1;
    do
    {
      float v29 = *v28++;
      a8.i16[0] = *v26;
      a8.f32[0] = (float)a8.u32[0];
      a6.f32[0] = a6.f32[0] + (float)(v29 * a8.f32[0]);
      float32x4_t v26 = (unsigned __int16 *)((char *)v26 + v24 * 2);
      --v27;
    }
    while (v27);
    *(_DWORD *)(a3 + 4 * v22++) = a6.i32[0];
    ++v25;
  }
  while (v22 != v12);
  return result;
}

void sub_10033CA74()
{
}

uint64_t sub_10033CA88(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033CB08(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_100499F30;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        unint64_t v14 = *(void **)(a2 + 72);
        uint64_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033CD44(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033CD78(uint64_t a1)
{
  *(void *)a1 = off_100499F30;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033CE28(uint64_t a1)
{
  *(void *)a1 = off_100499F30;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_10033CEF8(uint64_t result, const __int16 *a2, unint64_t a3, int a4, int a5, double a6, float64x2_t a7, float64x2_t a8, float64x2_t a9, float64x2_t a10, double a11)
{
  uint64_t v11 = *(unsigned int *)(result + 8);
  uint64_t v12 = *(double **)(result + 32);
  uint64_t v13 = (a5 * a4);
  unint64_t v14 = (v13 - 4);
  if ((int)v13 < 4)
  {
    LODWORD(v15) = 0;
    goto LABEL_15;
  }
  if ((int)v11 <= 1)
  {
    if (v14 >= 0x1C
      && ((unint64_t)(v12 + 1) <= a3 || (unint64_t)v12 >= ((8 * v14) & 0x7FFFFFFE0) + a3 + 32))
    {
      uint64_t v43 = (v14 >> 2) + 1;
      unint64_t v15 = 4 * (v43 & 0x7FFFFFF8);
      uint64_t v44 = v43 & 0x7FFFFFF8;
      unint64_t v45 = (double *)a3;
      uint16x8_t v46 = a2;
      do
      {
        a6 = *v12;
        int16x8x4_t v73 = vld4q_s16(v46);
        v46 += 32;
        uint32x4_t v47 = vmovl_u16(*(uint16x4_t *)v73.val[0].i8);
        v48.i64[0] = v47.u32[0];
        v48.i64[1] = v47.u32[1];
        float64x2_t v49 = vcvtq_f64_u64(v48);
        v48.i64[0] = v47.u32[2];
        v48.i64[1] = v47.u32[3];
        float64x2_t v50 = vcvtq_f64_u64(v48);
        uint32x4_t v51 = vmovl_high_u16((uint16x8_t)v73.val[0]);
        v48.i64[0] = v51.u32[0];
        v48.i64[1] = v51.u32[1];
        float64x2_t v52 = vcvtq_f64_u64(v48);
        v48.i64[0] = v51.u32[2];
        v48.i64[1] = v51.u32[3];
        a7 = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        uint32x4_t v53 = vmovl_high_u16((uint16x8_t)v73.val[1]);
        v48.i64[0] = v53.u32[2];
        v48.i64[1] = v53.u32[3];
        a8 = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        uint32x4_t v54 = vmovl_high_u16((uint16x8_t)v73.val[2]);
        v74.val[0] = vmulq_n_f64(v52, *v12);
        v48.i64[0] = v53.u32[0];
        v48.i64[1] = v53.u32[1];
        v74.val[1] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v75.val[0] = vmulq_n_f64(v50, *v12);
        uint32x4_t v55 = vmovl_u16(*(uint16x4_t *)v73.val[1].i8);
        v48.i64[0] = v55.u32[2];
        v48.i64[1] = v55.u32[3];
        v75.val[1] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        uint32x4_t v56 = vmovl_u16(*(uint16x4_t *)v73.val[2].i8);
        v48.i64[0] = v56.u32[2];
        v48.i64[1] = v56.u32[3];
        v75.val[2] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        uint32x4_t v57 = vmovl_high_u16((uint16x8_t)v73.val[3]);
        v73.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v73.val[3].i8);
        v48.i64[0] = v73.val[0].u32[2];
        v48.i64[1] = v73.val[0].u32[3];
        v75.val[3] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v72.val[0] = vmulq_n_f64(v49, *v12);
        v48.i64[0] = v55.u32[0];
        v48.i64[1] = v55.u32[1];
        v72.val[1] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v48.i64[0] = v56.u32[0];
        v48.i64[1] = v56.u32[1];
        v72.val[2] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        v48.i64[0] = v54.u32[2];
        v48.i64[1] = v54.u32[3];
        uint64x2_t v58 = v48;
        v48.i64[0] = v54.u32[0];
        v48.i64[1] = v54.u32[1];
        uint64x2_t v59 = v48;
        v48.i64[0] = v73.val[0].u32[0];
        v48.i64[1] = v73.val[0].u32[1];
        v72.val[3] = vmulq_n_f64(vcvtq_f64_u64(v48), *v12);
        int8x8_t v60 = v45;
        vst4q_f64(v60, v72);
        v60 += 8;
        vst4q_f64(v60, v75);
        v74.val[2] = vmulq_n_f64(vcvtq_f64_u64(v59), a6);
        v48.i64[0] = v57.u32[0];
        v48.i64[1] = v57.u32[1];
        v74.val[3] = vmulq_n_f64(vcvtq_f64_u64(v48), a6);
        float64x2_t v61 = v45 + 16;
        vst4q_f64(v61, v74);
        a9 = vmulq_n_f64(vcvtq_f64_u64(v58), a6);
        v48.i64[0] = v57.u32[2];
        v48.i64[1] = v57.u32[3];
        a10 = vmulq_n_f64(vcvtq_f64_u64(v48), a6);
        uint64_t result = (uint64_t)(v45 + 24);
        vst4q_f64((double *)result, *(float64x2x4_t *)a7.f64);
        v45 += 32;
        v44 -= 8;
      }
      while (v44);
      if (v43 == (v43 & 0x7FFFFFF8)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v27 = a3 + 8 * v15 + 16;
    float32x4_t v28 = (unsigned __int16 *)&a2[v15 + 2];
    do
    {
      LOWORD(a7.f64[0]) = *(v28 - 2);
      a7.f64[0] = *v12 * (double)*(unint64_t *)&a7.f64[0];
      LOWORD(a8.f64[0]) = *(v28 - 1);
      a8.f64[0] = *v12 * (double)*(unint64_t *)&a8.f64[0];
      LOWORD(a9.f64[0]) = *v28;
      a9.f64[0] = *v12 * (double)*(unint64_t *)&a9.f64[0];
      LOWORD(a10.f64[0]) = v28[1];
      a10.f64[0] = (double)*(unint64_t *)&a10.f64[0];
      a6 = *v12 * a10.f64[0];
      *(float64_t *)(v27 - 16) = a7.f64[0];
      *(float64_t *)(v27 - 8) = a8.f64[0];
      *(float64_t *)uint64_t v27 = a9.f64[0];
      *(double *)(v27 + 8) = a6;
      v27 += 32;
      v15 += 4;
      v28 += 4;
    }
    while (v15 <= v14);
    goto LABEL_15;
  }
  unint64_t v15 = 0;
  uint64_t v16 = a5;
  uint64_t v17 = (uint64_t)&a2[v16 + 2];
  do
  {
    float v18 = &a2[v15];
    LOWORD(a6) = *v18;
    a6 = *v12 * (double)*(unint64_t *)&a6;
    LOWORD(a7.f64[0]) = v18[1];
    a7.f64[0] = *v12 * (double)*(unint64_t *)&a7.f64[0];
    LOWORD(a8.f64[0]) = v18[2];
    a8.f64[0] = *v12 * (double)*(unint64_t *)&a8.f64[0];
    LOWORD(a10.f64[0]) = v18[3];
    double v19 = *v12 * (double)*(unint64_t *)&a10.f64[0];
    uint64_t v20 = (_WORD *)v17;
    uint64_t v21 = v11 - 1;
    uint64_t v22 = v12 + 1;
    do
    {
      double v23 = *v22++;
      a10.f64[0] = v23;
      LOWORD(a11) = *(v20 - 2);
      *(double *)&unint64_t v24 = (double)*(unint64_t *)&a11;
      a6 = a6 + v23 * *(double *)&v24;
      LOWORD(v24) = *(v20 - 1);
      *(double *)&unint64_t v25 = (double)v24;
      a7.f64[0] = a7.f64[0] + v23 * *(double *)&v25;
      LOWORD(v25) = *v20;
      *(double *)&unint64_t v26 = (double)v25;
      a8.f64[0] = a8.f64[0] + v23 * *(double *)&v26;
      LOWORD(v26) = v20[1];
      a11 = (double)v26;
      double v19 = v19 + v23 * a11;
      uint64_t v20 = (_WORD *)((char *)v20 + v16 * 2);
      --v21;
    }
    while (v21);
    *(double *)(a3 + 8 * v15) = a6;
    *(float64_t *)(a3 + ((8 * v15) | 8)) = a7.f64[0];
    uint64_t result = (8 * v15) | 0x10;
    *(float64_t *)(a3 + result) = a8.f64[0];
    *(double *)(a3 + ((8 * v15) | 0x18)) = v19;
    v15 += 4;
    v17 += 8;
  }
  while (v15 <= v14);
LABEL_15:
  if ((int)v15 >= (int)v13) {
    return result;
  }
  uint64_t v29 = v15;
  if ((int)v11 <= 1)
  {
    unint64_t v37 = v13 - v15;
    if (v37 >= 8
      && ((float64x2_t v38 = (float64x2_t *)(a3 + 8 * v15), v38 >= (float64x2_t *)(v12 + 1))
       || (unint64_t)v12 >= a3 + 8 * v13))
    {
      unint64_t v15 = (v37 & 0xFFFFFFFFFFFFFFF8) + v15;
      float64x2_t v62 = vld1q_dup_f64(v12);
      float32x4x4_t v63 = (uint16x8_t *)&a2[v29];
      unint64_t v64 = v37 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        uint16x8_t v65 = *v63++;
        uint32x4_t v66 = vmovl_high_u16(v65);
        v67.i64[0] = v66.u32[2];
        v67.i64[1] = v66.u32[3];
        float64x2_t v68 = vcvtq_f64_u64(v67);
        v67.i64[0] = v66.u32[0];
        v67.i64[1] = v66.u32[1];
        float64x2_t v69 = vcvtq_f64_u64(v67);
        uint32x4_t v70 = vmovl_u16(*(uint16x4_t *)v65.i8);
        v67.i64[0] = v70.u32[2];
        v67.i64[1] = v70.u32[3];
        float64x2_t v71 = vcvtq_f64_u64(v67);
        v67.i64[0] = v70.u32[0];
        v67.i64[1] = v70.u32[1];
        v38[2] = vmulq_f64(v62, v69);
        v38[3] = vmulq_f64(v62, v68);
        *float64x2_t v38 = vmulq_f64(v62, vcvtq_f64_u64(v67));
        v38[1] = vmulq_f64(v62, v71);
        v38 += 4;
        v64 -= 8;
      }
      while (v64);
      if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8)) {
        return result;
      }
    }
    else
    {
      unint64_t v15 = v15;
    }
    int8x8_t v39 = (double *)(a3 + 8 * v15);
    uint64_t v40 = v13 - v15;
    int8x8_t v41 = &a2[v15];
    do
    {
      unsigned int v42 = *(unsigned __int16 *)v41++;
      *v39++ = *v12 * (double)v42;
      --v40;
    }
    while (v40);
    return result;
  }
  uint64_t v30 = v11 - 1;
  uint64_t v31 = a5;
  uint64_t v32 = (unsigned __int16 *)&a2[v15 + v31];
  do
  {
    LOWORD(a6) = a2[v29];
    a6 = *v12 * (double)*(unint64_t *)&a6;
    uint64_t v33 = v32;
    uint64_t v34 = v30;
    unsigned int v35 = v12 + 1;
    do
    {
      double v36 = *v35++;
      LOWORD(a8.f64[0]) = *v33;
      a8.f64[0] = (double)*(unint64_t *)&a8.f64[0];
      a6 = a6 + v36 * a8.f64[0];
      uint64_t v33 = (unsigned __int16 *)((char *)v33 + v31 * 2);
      --v34;
    }
    while (v34);
    *(double *)(a3 + 8 * v29++) = a6;
    ++v32;
  }
  while (v29 != v13);
  return result;
}

void sub_10033D308()
{
}

uint64_t sub_10033D31C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033D39C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_100499FB0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        unint64_t v14 = *(void **)(a2 + 72);
        unint64_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033D5D8(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033D60C(uint64_t a1)
{
  *(void *)a1 = off_100499FB0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033D6BC(uint64_t a1)
{
  *(void *)a1 = off_100499FB0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

float *sub_10033D78C(float *result, const __int16 *a2, unint64_t a3, int a4, int a5, double a6, float32x4_t a7, float32x4_t a8, int16x8_t a9, int16x8_t a10)
{
  uint64_t v10 = *((unsigned int *)result + 2);
  uint64_t v11 = (float *)*((void *)result + 4);
  uint64_t v12 = (a5 * a4);
  unint64_t v13 = (v12 - 4);
  if ((int)v12 < 4)
  {
    LODWORD(v14) = 0;
    goto LABEL_15;
  }
  if ((int)v10 <= 1)
  {
    if (v13 >= 0x1C
      && ((unint64_t)(v11 + 1) <= a3 || (unint64_t)v11 >= ((4 * v13) & 0x3FFFFFFF0) + a3 + 16))
    {
      uint64_t v39 = (v13 >> 2) + 1;
      unint64_t v14 = 4 * (v39 & 0x7FFFFFF8);
      uint64_t v40 = v39 & 0x7FFFFFF8;
      int8x8_t v41 = (float *)a3;
      unsigned int v42 = a2;
      do
      {
        *(int16x8x4_t *)(&a8 - 1) = vld4q_s16(v42);
        v42 += 32;
        v52.val[0] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v43)), *v11);
        v52.val[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16((int16x8_t)a8)), *v11);
        v52.val[2] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(a9)), *v11);
        v52.val[3] = vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(a10)), *v11);
        v53.val[0] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v43.i8)), *v11);
        v53.val[1] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a8.f32)), *v11);
        v53.val[2] = vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a9.i8)), *v11);
        a7 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a10.i8));
        v53.val[3] = vmulq_n_f32(a7, *v11);
        uint64_t result = v41 + 32;
        vst4q_f32(v41, v53);
        uint64_t v44 = v41 + 16;
        vst4q_f32(v44, v52);
        int8x8_t v41 = result;
        v40 -= 8;
      }
      while (v40);
      if (v39 == (v39 & 0x7FFFFFF8)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v21 = a3 + 4 * v14 + 8;
    uint64_t v22 = (unsigned __int16 *)&a2[v14 + 2];
    do
    {
      a7.i16[0] = *(v22 - 2);
      a7.i64[0] = vmovl_s16(*(int16x4_t *)a7.f32).u64[0];
      a7.f32[0] = *v11 * (float)a7.i32[0];
      a8.i16[0] = *(v22 - 1);
      a8.i64[0] = vmovl_s16(*(int16x4_t *)a8.f32).u64[0];
      a8.f32[0] = *v11 * (float)a8.i32[0];
      a9.i16[0] = *v22;
      a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.i8).u64[0];
      *(float *)a9.i32 = *v11 * (float)a9.i32[0];
      a10.i16[0] = v22[1];
      a10.i64[0] = vmovl_s16(*(int16x4_t *)a10.i8).u64[0];
      *(float *)a10.i32 = (float)a10.i32[0];
      float v23 = *v11 * *(float *)a10.i32;
      *(_DWORD *)(v21 - 8) = a7.i32[0];
      *(_DWORD *)(v21 - 4) = a8.i32[0];
      *(_DWORD *)uint64_t v21 = a9.i32[0];
      *(float *)(v21 + 4) = v23;
      v21 += 16;
      v14 += 4;
      v22 += 4;
    }
    while (v14 <= v13);
    goto LABEL_15;
  }
  unint64_t v14 = 0;
  uint64_t v15 = a5;
  int v16 = (int16x4_t *)&a2[v15];
  do
  {
    a7 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&a2[v14]));
    float32x4_t v17 = vmulq_n_f32(a7, *v11);
    float v18 = v16;
    uint64_t result = (float *)(v10 - 1);
    uint64_t v19 = v11 + 1;
    do
    {
      float v20 = *v19++;
      a7.i16[1] = HIWORD(v20);
      a8 = vcvtq_f32_s32(vmovl_s16(*v18));
      float32x4_t v17 = vmlaq_n_f32(v17, a8, v20);
      float v18 = (int16x4_t *)((char *)v18 + v15 * 2);
      uint64_t result = (float *)((char *)result - 1);
    }
    while (result);
    *(float32x4_t *)(a3 + 4 * v14) = v17;
    v14 += 4;
    ++v16;
  }
  while (v14 <= v13);
LABEL_15:
  if ((int)v14 >= (int)v12) {
    return result;
  }
  uint64_t v24 = v14;
  if ((int)v10 <= 1)
  {
    unint64_t v33 = v12 - v14;
    if (v33 >= 0x10
      && ((unint64_t v34 = a3 + 4 * v14, v34 >= (unint64_t)(v11 + 1))
       || (unint64_t)v11 >= a3 + 4 * v12))
    {
      unint64_t v14 = (v33 & 0xFFFFFFFFFFFFFFF0) + v14;
      float32x4_t v45 = vld1q_dup_f32(v11);
      uint16x8_t v46 = (int16x8_t *)&a2[v24 + 8];
      uint32x4_t v47 = (float32x4_t *)(v34 + 32);
      unint64_t v48 = v33 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int16x8_t v49 = v46[-1];
        float32x4_t v50 = vcvtq_f32_s32(vmovl_high_s16(*v46));
        float32x4_t v51 = vmulq_f32(v45, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v46->i8)));
        v47[-2] = vmulq_f32(v45, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v49.i8)));
        v47[-1] = vmulq_f32(v45, vcvtq_f32_s32(vmovl_high_s16(v49)));
        *uint32x4_t v47 = v51;
        v47[1] = vmulq_f32(v45, v50);
        v47 += 4;
        v46 += 2;
        v48 -= 16;
      }
      while (v48);
      if (v33 == (v33 & 0xFFFFFFFFFFFFFFF0)) {
        return result;
      }
    }
    else
    {
      unint64_t v14 = v14;
    }
    unsigned int v35 = (float *)(a3 + 4 * v14);
    uint64_t v36 = v12 - v14;
    unint64_t v37 = &a2[v14];
    do
    {
      int v38 = *v37++;
      *v35++ = *v11 * (float)v38;
      --v36;
    }
    while (v36);
    return result;
  }
  uint64_t v25 = v10 - 1;
  uint64_t v26 = a5;
  uint64_t v27 = (unsigned __int16 *)&a2[v14 + v26];
  do
  {
    a7.i16[0] = a2[v24];
    a7.i64[0] = vmovl_s16(*(int16x4_t *)a7.f32).u64[0];
    float v28 = *v11 * (float)a7.i32[0];
    uint64_t v29 = v27;
    uint64_t v30 = v25;
    uint64_t v31 = v11 + 1;
    do
    {
      float v32 = *v31++;
      a7.i16[1] = HIWORD(v32);
      a8.i16[0] = *v29;
      a8.i64[0] = vmovl_s16(*(int16x4_t *)a8.f32).u64[0];
      a8.f32[0] = (float)a8.i32[0];
      float v28 = v28 + (float)(v32 * a8.f32[0]);
      uint64_t v29 = (unsigned __int16 *)((char *)v29 + v26 * 2);
      --v30;
    }
    while (v30);
    *(float *)(a3 + 4 * v24++) = v28;
    ++v27;
  }
  while (v24 != v12);
  return result;
}

void sub_10033DABC()
{
}

uint64_t sub_10033DAD0(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033DB50(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A030;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        unint64_t v14 = *(void **)(a2 + 72);
        uint64_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033DD8C(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033DDC0(uint64_t a1)
{
  *(void *)a1 = off_10049A030;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033DE70(uint64_t a1)
{
  *(void *)a1 = off_10049A030;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_10033DF40(uint64_t result, const __int16 *a2, unint64_t a3, int a4, int a5, double a6, float64x2_t a7, float64x2_t a8, float64x2_t a9, float64x2_t a10, int16x4_t a11)
{
  uint64_t v11 = *(unsigned int *)(result + 8);
  uint64_t v12 = *(double **)(result + 32);
  uint64_t v13 = (a5 * a4);
  unint64_t v14 = (v13 - 4);
  if ((int)v13 < 4)
  {
    LODWORD(v15) = 0;
    goto LABEL_15;
  }
  if ((int)v11 <= 1)
  {
    if (v14 >= 0x1C
      && ((unint64_t)(v12 + 1) <= a3 || (unint64_t)v12 >= ((8 * v14) & 0x7FFFFFFE0) + a3 + 32))
    {
      uint64_t v45 = (v14 >> 2) + 1;
      unint64_t v15 = 4 * (v45 & 0x7FFFFFF8);
      uint64_t v46 = v45 & 0x7FFFFFF8;
      uint32x4_t v47 = (double *)a3;
      unint64_t v48 = a2;
      do
      {
        double v49 = *v12;
        int16x8x4_t v76 = vld4q_s16(v48);
        v48 += 32;
        int32x4_t v50 = vmovl_s16(*(int16x4_t *)v76.val[0].i8);
        v51.i64[0] = v50.i32[0];
        v51.i64[1] = v50.i32[1];
        float64x2_t v52 = vcvtq_f64_s64(v51);
        v51.i64[0] = v50.i32[2];
        v51.i64[1] = v50.i32[3];
        float64x2_t v53 = vcvtq_f64_s64(v51);
        int32x4_t v54 = vmovl_high_s16(v76.val[0]);
        v51.i64[0] = v54.i32[0];
        v51.i64[1] = v54.i32[1];
        float64x2_t v55 = vcvtq_f64_s64(v51);
        v51.i64[0] = v54.i32[2];
        v51.i64[1] = v54.i32[3];
        a7 = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        int32x4_t v56 = vmovl_high_s16(v76.val[1]);
        v51.i64[0] = v56.i32[2];
        v51.i64[1] = v56.i32[3];
        a8 = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        int32x4_t v57 = vmovl_high_s16(v76.val[2]);
        v77.val[0] = vmulq_n_f64(v55, *v12);
        v51.i64[0] = v56.i32[0];
        v51.i64[1] = v56.i32[1];
        v77.val[1] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v78.val[0] = vmulq_n_f64(v53, *v12);
        int32x4_t v58 = vmovl_s16(*(int16x4_t *)v76.val[1].i8);
        v51.i64[0] = v58.i32[2];
        v51.i64[1] = v58.i32[3];
        v78.val[1] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        int32x4_t v59 = vmovl_s16(*(int16x4_t *)v76.val[2].i8);
        v51.i64[0] = v59.i32[2];
        v51.i64[1] = v59.i32[3];
        v78.val[2] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        int32x4_t v60 = vmovl_high_s16(v76.val[3]);
        v76.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v76.val[3].i8);
        v51.i64[0] = v76.val[0].i32[2];
        v51.i64[1] = v76.val[0].i32[3];
        v78.val[3] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v75.val[0] = vmulq_n_f64(v52, *v12);
        v51.i64[0] = v58.i32[0];
        v51.i64[1] = v58.i32[1];
        v75.val[1] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v51.i64[0] = v59.i32[0];
        v51.i64[1] = v59.i32[1];
        v75.val[2] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        v51.i64[0] = v57.i32[2];
        v51.i64[1] = v57.i32[3];
        int64x2_t v61 = v51;
        v51.i64[0] = v57.i32[0];
        v51.i64[1] = v57.i32[1];
        int64x2_t v62 = v51;
        v51.i64[0] = v76.val[0].i32[0];
        v51.i64[1] = v76.val[0].i32[1];
        v75.val[3] = vmulq_n_f64(vcvtq_f64_s64(v51), *v12);
        float32x4x4_t v63 = v47;
        vst4q_f64(v63, v75);
        v63 += 8;
        vst4q_f64(v63, v78);
        v77.val[2] = vmulq_n_f64(vcvtq_f64_s64(v62), v49);
        v51.i64[0] = v60.i32[0];
        v51.i64[1] = v60.i32[1];
        v77.val[3] = vmulq_n_f64(vcvtq_f64_s64(v51), v49);
        unint64_t v64 = v47 + 16;
        vst4q_f64(v64, v77);
        a9 = vmulq_n_f64(vcvtq_f64_s64(v61), v49);
        v51.i64[0] = v60.i32[2];
        v51.i64[1] = v60.i32[3];
        a10 = vmulq_n_f64(vcvtq_f64_s64(v51), v49);
        uint64_t result = (uint64_t)(v47 + 24);
        vst4q_f64((double *)result, *(float64x2x4_t *)a7.f64);
        v47 += 32;
        v46 -= 8;
      }
      while (v46);
      if (v45 == (v45 & 0x7FFFFFF8)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v15 = 0;
    }
    uint64_t v27 = a3 + 8 * v15 + 16;
    float v28 = (unsigned __int16 *)&a2[v15 + 2];
    do
    {
      LOWORD(a7.f64[0]) = *(v28 - 2);
      a7.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
      LOWORD(a8.f64[0]) = *(v28 - 1);
      a8.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a8.f64[0]).i32[0];
      LOWORD(a9.f64[0]) = *v28;
      a9.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a9.f64[0]).i32[0];
      LOWORD(a10.f64[0]) = v28[1];
      a10.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a10.f64[0]).i32[0];
      double v29 = *v12 * a10.f64[0];
      *(float64_t *)(v27 - 16) = a7.f64[0];
      *(float64_t *)(v27 - 8) = a8.f64[0];
      *(float64_t *)uint64_t v27 = a9.f64[0];
      *(double *)(v27 + 8) = v29;
      v27 += 32;
      v15 += 4;
      v28 += 4;
    }
    while (v15 <= v14);
    goto LABEL_15;
  }
  unint64_t v15 = 0;
  uint64_t v16 = a5;
  uint64_t v17 = (uint64_t)&a2[v16 + 2];
  do
  {
    float v18 = &a2[v15];
    LOWORD(a6) = *v18;
    a6 = *v12 * (double)vmovl_s16(*(int16x4_t *)&a6).i32[0];
    LOWORD(a7.f64[0]) = v18[1];
    a7.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
    LOWORD(a8.f64[0]) = v18[2];
    a8.f64[0] = *v12 * (double)vmovl_s16(*(int16x4_t *)&a8.f64[0]).i32[0];
    LOWORD(a10.f64[0]) = v18[3];
    double v19 = *v12 * (double)vmovl_s16(*(int16x4_t *)&a10.f64[0]).i32[0];
    uint64_t v20 = (__int16 *)v17;
    uint64_t v21 = v11 - 1;
    uint64_t v22 = v12 + 1;
    do
    {
      double v23 = *v22++;
      a10.f64[0] = v23;
      a11.i16[0] = *(v20 - 2);
      *(double *)&int16x4_t v24 = (double)vmovl_s16(a11).i32[0];
      a6 = a6 + v23 * *(double *)&v24;
      v24.i16[0] = *(v20 - 1);
      *(double *)&int16x4_t v25 = (double)vmovl_s16(v24).i32[0];
      a7.f64[0] = a7.f64[0] + v23 * *(double *)&v25;
      v25.i16[0] = *v20;
      *(double *)&int16x4_t v26 = (double)vmovl_s16(v25).i32[0];
      a8.f64[0] = a8.f64[0] + v23 * *(double *)&v26;
      v26.i16[0] = v20[1];
      *(double *)&a11 = (double)vmovl_s16(v26).i32[0];
      double v19 = v19 + v23 * *(double *)&a11;
      uint64_t v20 = (__int16 *)((char *)v20 + v16 * 2);
      --v21;
    }
    while (v21);
    *(double *)(a3 + 8 * v15) = a6;
    *(float64_t *)(a3 + ((8 * v15) | 8)) = a7.f64[0];
    uint64_t result = (8 * v15) | 0x10;
    *(float64_t *)(a3 + result) = a8.f64[0];
    *(double *)(a3 + ((8 * v15) | 0x18)) = v19;
    v15 += 4;
    v17 += 8;
  }
  while (v15 <= v14);
LABEL_15:
  if ((int)v15 >= (int)v13) {
    return result;
  }
  uint64_t v30 = v15;
  if ((int)v11 <= 1)
  {
    unint64_t v39 = v13 - v15;
    if (v39 >= 8
      && ((uint64_t v40 = (float64x2_t *)(a3 + 8 * v15), v40 >= (float64x2_t *)(v12 + 1))
       || (unint64_t)v12 >= a3 + 8 * v13))
    {
      unint64_t v15 = (v39 & 0xFFFFFFFFFFFFFFF8) + v15;
      float64x2_t v65 = vld1q_dup_f64(v12);
      uint32x4_t v66 = (int16x8_t *)&a2[v30];
      unint64_t v67 = v39 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int16x8_t v68 = *v66++;
        int32x4_t v69 = vmovl_high_s16(v68);
        v70.i64[0] = v69.i32[2];
        v70.i64[1] = v69.i32[3];
        float64x2_t v71 = vcvtq_f64_s64(v70);
        v70.i64[0] = v69.i32[0];
        v70.i64[1] = v69.i32[1];
        float64x2_t v72 = vcvtq_f64_s64(v70);
        int32x4_t v73 = vmovl_s16(*(int16x4_t *)v68.i8);
        v70.i64[0] = v73.i32[2];
        v70.i64[1] = v73.i32[3];
        float64x2_t v74 = vcvtq_f64_s64(v70);
        v70.i64[0] = v73.i32[0];
        v70.i64[1] = v73.i32[1];
        v40[2] = vmulq_f64(v65, v72);
        v40[3] = vmulq_f64(v65, v71);
        *uint64_t v40 = vmulq_f64(v65, vcvtq_f64_s64(v70));
        v40[1] = vmulq_f64(v65, v74);
        v40 += 4;
        v67 -= 8;
      }
      while (v67);
      if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8)) {
        return result;
      }
    }
    else
    {
      unint64_t v15 = v15;
    }
    int8x8_t v41 = (double *)(a3 + 8 * v15);
    uint64_t v42 = v13 - v15;
    int16x8_t v43 = &a2[v15];
    do
    {
      int v44 = *v43++;
      *v41++ = *v12 * (double)v44;
      --v42;
    }
    while (v42);
    return result;
  }
  uint64_t v31 = v11 - 1;
  uint64_t v32 = a5;
  unint64_t v33 = (unsigned __int16 *)&a2[v15 + v32];
  do
  {
    LOWORD(a7.f64[0]) = a2[v30];
    double v34 = *v12 * (double)vmovl_s16(*(int16x4_t *)&a7.f64[0]).i32[0];
    unsigned int v35 = v33;
    uint64_t v36 = v31;
    unint64_t v37 = v12 + 1;
    do
    {
      double v38 = *v37++;
      a7.f64[0] = v38;
      LOWORD(a8.f64[0]) = *v35;
      a8.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a8.f64[0]).i32[0];
      double v34 = v34 + v38 * a8.f64[0];
      unsigned int v35 = (unsigned __int16 *)((char *)v35 + v32 * 2);
      --v36;
    }
    while (v36);
    *(double *)(a3 + 8 * v30++) = v34;
    ++v33;
  }
  while (v30 != v13);
  return result;
}

void sub_10033E3C0()
{
}

uint64_t sub_10033E3D4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033E454(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A0B0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        unint64_t v14 = *(void **)(a2 + 72);
        unint64_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033E690(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033E6C4(uint64_t a1)
{
  *(void *)a1 = off_10049A0B0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033E774(uint64_t a1)
{
  *(void *)a1 = off_10049A0B0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

float32_t sub_10033E844(uint64_t a1, const float *a2, unint64_t a3, int a4, int a5, float32x4_t a6)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(float **)(a1 + 32);
  uint64_t v8 = (a5 * a4);
  unint64_t v9 = (v8 - 4);
  if ((int)v8 < 4)
  {
    LODWORD(v10) = 0;
    goto LABEL_27;
  }
  if ((int)v6 > 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a5;
    uint64_t v12 = (float32x4_t *)&a2[v11];
    do
    {
      a6 = vmulq_n_f32(*(float32x4_t *)&a2[v10], *v7);
      int v13 = v12;
      uint64_t v14 = v6 - 1;
      unint64_t v15 = v7 + 1;
      do
      {
        float v16 = *v15++;
        a6 = vmlaq_n_f32(a6, *v13, v16);
        int v13 = (float32x4_t *)((char *)v13 + v11 * 4);
        --v14;
      }
      while (v14);
      *(float32x4_t *)(a3 + 4 * v10) = a6;
      v10 += 4;
      ++v12;
    }
    while (v10 <= v9);
    goto LABEL_27;
  }
  if (v9 < 0xC)
  {
    unint64_t v10 = 0;
LABEL_25:
    uint64_t v26 = 4 * v10 + 8;
    unint64_t v27 = a3 + v26;
    float v28 = (float *)((char *)a2 + v26);
    do
    {
      float v29 = *v7 * *(v28 - 2);
      float v30 = *v7 * *(v28 - 1);
      float v31 = *v28;
      float v32 = v28[1];
      v28 += 4;
      float v33 = *v7 * v31;
      a6.f32[0] = *v7 * v32;
      *(float *)(v27 - 8) = v29;
      *(float *)(v27 - 4) = v30;
      *(float *)unint64_t v27 = v33;
      *(_DWORD *)(v27 + 4) = a6.i32[0];
      v27 += 16;
      v10 += 4;
    }
    while (v10 <= v9);
    goto LABEL_27;
  }
  unint64_t v10 = 0;
  uint64_t v17 = ((4 * v9) & 0x3FFFFFFF0) + 16;
  unint64_t v18 = a3 + v17;
  BOOL v20 = (unint64_t)a2 + v17 > a3 && v18 > (unint64_t)a2;
  if ((unint64_t)v7 < v18 && (unint64_t)(v7 + 1) > a3) {
    goto LABEL_25;
  }
  if (v20) {
    goto LABEL_25;
  }
  uint64_t v22 = (v9 >> 2) + 1;
  unint64_t v10 = 4 * (v22 & 0x7FFFFFFC);
  uint64_t v23 = v22 & 0x7FFFFFFC;
  int16x4_t v24 = (float *)a3;
  int16x4_t v25 = a2;
  do
  {
    a6.f32[0] = *v7;
    float32x4x4_t v58 = vld4q_f32(v25);
    v25 += 16;
    v59.val[0] = vmulq_n_f32(v58.val[0], *v7);
    v59.val[1] = vmulq_n_f32(v58.val[1], *v7);
    v59.val[2] = vmulq_n_f32(v58.val[2], *v7);
    v59.val[3] = vmulq_n_f32(v58.val[3], *v7);
    vst4q_f32(v24, v59);
    v24 += 16;
    v23 -= 4;
  }
  while (v23);
  if (v22 != (v22 & 0x7FFFFFFC)) {
    goto LABEL_25;
  }
LABEL_27:
  if ((int)v10 < (int)v8)
  {
    uint64_t v34 = v10;
    if ((int)v6 <= 1)
    {
      unint64_t v42 = v8 - v10;
      if (v42 < 0xC) {
        goto LABEL_50;
      }
      uint64_t v43 = 4 * v10;
      unint64_t v44 = a3 + 4 * v8;
      BOOL v45 = a3 + v43 >= (unint64_t)&a2[v8] || (unint64_t)&a2[v10] >= v44;
      BOOL v46 = !v45;
      if ((unint64_t)v7 < v44 && a3 + v43 < (unint64_t)(v7 + 1)) {
        goto LABEL_50;
      }
      if (v46) {
        goto LABEL_50;
      }
      v34 += v42 & 0xFFFFFFFFFFFFFFF8;
      a6 = vld1q_dup_f32(v7);
      uint64_t v48 = v43 + 16;
      double v49 = (float32x4_t *)&a2[(unint64_t)v43 / 4 + 4];
      int32x4_t v50 = (float32x4_t *)(a3 + v48);
      unint64_t v51 = v42 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v52 = vmulq_f32(a6, *v49);
        v50[-1] = vmulq_f32(a6, v49[-1]);
        *int32x4_t v50 = v52;
        v49 += 2;
        v50 += 2;
        v51 -= 8;
      }
      while (v51);
      if (v42 != (v42 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_50:
        float64x2_t v53 = (_DWORD *)(a3 + 4 * v34);
        int32x4_t v54 = (float *)&a2[v34];
        uint64_t v55 = v8 - v34;
        do
        {
          float v56 = *v54++;
          a6.f32[0] = *v7 * v56;
          *v53++ = a6.i32[0];
          --v55;
        }
        while (v55);
      }
    }
    else
    {
      uint64_t v35 = v6 - 1;
      uint64_t v36 = a5;
      unint64_t v37 = (float *)&a2[v10 + v36];
      do
      {
        a6.f32[0] = *v7 * a2[v34];
        double v38 = v37;
        uint64_t v39 = v35;
        uint64_t v40 = v7 + 1;
        do
        {
          float v41 = *v40++;
          a6.f32[0] = a6.f32[0] + (float)(v41 * *v38);
          double v38 = (float *)((char *)v38 + v36 * 4);
          --v39;
        }
        while (v39);
        *(_DWORD *)(a3 + 4 * v34++) = a6.i32[0];
        ++v37;
      }
      while (v34 != v8);
    }
  }
  return a6.f32[0];
}

void sub_10033EAC8()
{
}

uint64_t sub_10033EADC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033EB5C(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A130;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v14 = *(void **)(a2 + 72);
        unint64_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033ED98(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033EDCC(uint64_t a1)
{
  *(void *)a1 = off_10049A130;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033EE7C(uint64_t a1)
{
  *(void *)a1 = off_10049A130;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  long long v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

double *sub_10033EF4C(double *result, const float *a2, unint64_t a3, int a4, int a5)
{
  uint64_t v5 = *((unsigned int *)result + 2);
  uint64_t v6 = (double *)*((void *)result + 4);
  uint64_t v7 = (a5 * a4);
  unint64_t v8 = (v7 - 4);
  if ((int)v7 < 4)
  {
    LODWORD(v9) = 0;
    goto LABEL_15;
  }
  if ((int)v5 <= 1)
  {
    if (v8 >= 0xC
      && ((unint64_t)(v6 + 1) <= a3 || (unint64_t)v6 >= ((8 * v8) & 0x7FFFFFFE0) + a3 + 32))
    {
      uint64_t v41 = (v8 >> 2) + 1;
      unint64_t v9 = 4 * (v41 & 0x7FFFFFFC);
      uint64_t v42 = v41 & 0x7FFFFFFC;
      uint64_t v43 = (double *)a3;
      unint64_t v44 = a2;
      do
      {
        float32x4x4_t v53 = vld4q_f32(v44);
        v44 += 16;
        v54.val[0] = vmulq_n_f64(vcvt_hight_f64_f32(v53.val[0]), *v6);
        v54.val[1] = vmulq_n_f64(vcvt_hight_f64_f32(v53.val[1]), *v6);
        v54.val[2] = vmulq_n_f64(vcvt_hight_f64_f32(v53.val[2]), *v6);
        v54.val[3] = vmulq_n_f64(vcvt_hight_f64_f32(v53.val[3]), *v6);
        v55.val[0] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v53.val[0].f32), *v6);
        v55.val[1] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v53.val[1].f32), *v6);
        v55.val[2] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v53.val[2].f32), *v6);
        v55.val[3] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v53.val[3].f32), *v6);
        uint64_t result = v43 + 16;
        vst4q_f64(v43, v55);
        BOOL v45 = v43 + 8;
        vst4q_f64(v45, v54);
        uint64_t v43 = result;
        v42 -= 4;
      }
      while (v42);
      if (v41 == (v41 & 0x7FFFFFFC)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t v18 = (double *)(a3 + 8 * v9 + 16);
    uint64_t v19 = (float *)&a2[v9 + 2];
    do
    {
      double v20 = *v6 * *(v19 - 2);
      double v21 = *v6 * *(v19 - 1);
      float v22 = *v19;
      float v23 = v19[1];
      v19 += 4;
      double v24 = *v6 * v22;
      double v25 = *v6 * v23;
      *(v18 - 2) = v20;
      *(v18 - 1) = v21;
      double *v18 = v24;
      v18[1] = v25;
      v18 += 4;
      v9 += 4;
    }
    while (v9 <= v8);
    goto LABEL_15;
  }
  unint64_t v9 = 0;
  uint64_t v10 = a5;
  uint64_t v11 = (uint64_t)&a2[v10 + 2];
  do
  {
    uint64_t v12 = (float32x2_t *)&a2[v9];
    float64x2_t v13 = vmulq_n_f64(vcvtq_f64_f32(*v12), *v6);
    float64x2_t v14 = vmulq_n_f64(vcvtq_f64_f32(v12[1]), *v6);
    unint64_t v15 = (float32x2_t *)v11;
    uint64_t result = (double *)(v5 - 1);
    int v16 = v6 + 1;
    do
    {
      float64x2_t v17 = vld1q_dup_f64(v16++);
      float64x2_t v13 = vmlaq_f64(v13, vcvtq_f64_f32(v15[-1]), v17);
      float64x2_t v14 = vmlaq_f64(v14, vcvtq_f64_f32(*v15), v17);
      unint64_t v15 = (float32x2_t *)((char *)v15 + v10 * 4);
      uint64_t result = (double *)((char *)result - 1);
    }
    while (result);
    *(float64x2_t *)(a3 + 8 * v9) = v13;
    *(float64x2_t *)(a3 + ((8 * v9) | 0x10)) = v14;
    v9 += 4;
    v11 += 16;
  }
  while (v9 <= v8);
LABEL_15:
  if ((int)v9 >= (int)v7) {
    return result;
  }
  uint64_t v26 = v9;
  if ((int)v5 <= 1)
  {
    unint64_t v35 = v7 - v9;
    if (v35 >= 8
      && ((unint64_t v36 = a3 + 8 * v9, v36 >= (unint64_t)(v6 + 1)) || (unint64_t)v6 >= a3 + 8 * v7))
    {
      unint64_t v9 = (v35 & 0xFFFFFFFFFFFFFFF8) + v9;
      float64x2_t v46 = vld1q_dup_f64(v6);
      uint32x4_t v47 = (float32x4_t *)&a2[v26 + 4];
      uint64_t v48 = (float64x2_t *)(v36 + 32);
      unint64_t v49 = v35 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v50 = v47[-1];
        float64x2_t v51 = vcvt_hight_f64_f32(*v47);
        float64x2_t v52 = vmulq_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v47->f32));
        v48[-2] = vmulq_f64(v46, vcvtq_f64_f32(*(float32x2_t *)v50.f32));
        v48[-1] = vmulq_f64(v46, vcvt_hight_f64_f32(v50));
        float64x2_t *v48 = v52;
        v48[1] = vmulq_f64(v46, v51);
        v48 += 4;
        v47 += 2;
        v49 -= 8;
      }
      while (v49);
      if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8)) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = v9;
    }
    unint64_t v37 = (double *)(a3 + 8 * v9);
    uint64_t v38 = v7 - v9;
    uint64_t v39 = (float *)&a2[v9];
    do
    {
      float v40 = *v39++;
      *v37++ = *v6 * v40;
      --v38;
    }
    while (v38);
    return result;
  }
  uint64_t v27 = v5 - 1;
  uint64_t v28 = a5;
  float v29 = (float *)&a2[v9 + v28];
  do
  {
    double v30 = *v6 * a2[v26];
    float v31 = v29;
    uint64_t v32 = v27;
    float v33 = v6 + 1;
    do
    {
      double v34 = *v33++;
      double v30 = v30 + v34 * *v31;
      float v31 = (float *)((char *)v31 + v28 * 4);
      --v32;
    }
    while (v32);
    *(double *)(a3 + 8 * v26++) = v30;
    ++v29;
  }
  while (v26 != v7);
  return result;
}

void sub_10033F240()
{
}

uint64_t sub_10033F254(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033F2D4(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v6 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v7 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A1B0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v6 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a2 + 56);
    if (v8)
    {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v6 = *(_DWORD *)a2;
      int v13 = *(_DWORD *)(a2 + 4);
      if (v13 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v13;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        float64x2_t v14 = *(void **)(a2 + 72);
        unint64_t v15 = *(void **)(a1 + 88);
        void *v15 = *v14;
        v15[1] = v14[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v11 + 4 * v10++) = 0;
        uint64_t v12 = *v7;
      }
      while (v10 < v12);
      *uint64_t v6 = *(_DWORD *)a2;
      if ((int)v12 <= 2)
      {
        int v13 = *(_DWORD *)(a2 + 4);
        if (v13 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v6, a2);
    goto LABEL_16;
  }
  LODWORD(v19) = 33619968;
  uint64_t v20 = a1 + 16;
  uint64_t v21 = 0;
  sub_10025401C(a2, (uint64_t)&v19);
LABEL_17:
  int v17 = *(_DWORD *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v17 + v16 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v17 != 1 && v16 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 77), "kernel.type() == DataType<DT>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v19, "RowFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3053);
  }
  return a1;
}

void sub_10033F510(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033F544(uint64_t a1)
{
  *(void *)a1 = off_10049A1B0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033F5F4(uint64_t a1)
{
  *(void *)a1 = off_10049A1B0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

float64_t sub_10033F6C4(uint64_t a1, const double *a2, unint64_t a3, int a4, int a5, float64x2_t a6)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 32);
  uint64_t v8 = (a5 * a4);
  unint64_t v9 = (v8 - 4);
  if ((int)v8 < 4)
  {
    LODWORD(v10) = 0;
    goto LABEL_27;
  }
  if ((int)v6 > 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = a5;
    uint64_t v12 = (uint64_t)&a2[v11 + 2];
    do
    {
      int v13 = (float64x2_t *)&a2[v10];
      float64x2_t v14 = vmulq_n_f64(*v13, *v7);
      a6 = vmulq_n_f64(v13[1], *v7);
      unint64_t v15 = (float64x2_t *)v12;
      uint64_t v16 = v6 - 1;
      int v17 = v7 + 1;
      do
      {
        float64x2_t v18 = vld1q_dup_f64(v17++);
        float64x2_t v14 = vmlaq_f64(v14, v15[-1], v18);
        a6 = vmlaq_f64(a6, *v15, v18);
        unint64_t v15 = (float64x2_t *)((char *)v15 + v11 * 8);
        --v16;
      }
      while (v16);
      *(float64x2_t *)(a3 + 8 * v10) = v14;
      *(float64x2_t *)(a3 + ((8 * v10) | 0x10)) = a6;
      v10 += 4;
      v12 += 32;
    }
    while (v10 <= v9);
    goto LABEL_27;
  }
  if (v9 < 0xC)
  {
    unint64_t v10 = 0;
LABEL_25:
    uint64_t v28 = 8 * v10 + 16;
    float v29 = (double *)(a3 + v28);
    double v30 = (double *)((char *)a2 + v28);
    do
    {
      double v31 = *v7 * *(v30 - 2);
      double v32 = *v7 * *(v30 - 1);
      double v33 = *v30;
      double v34 = v30[1];
      v30 += 4;
      double v35 = *v7 * v33;
      a6.f64[0] = *v7 * v34;
      *(v29 - 2) = v31;
      *(v29 - 1) = v32;
      *float v29 = v35;
      v29[1] = a6.f64[0];
      v29 += 4;
      v10 += 4;
    }
    while (v10 <= v9);
    goto LABEL_27;
  }
  unint64_t v10 = 0;
  uint64_t v19 = ((8 * v9) & 0x7FFFFFFE0) + 32;
  unint64_t v20 = a3 + v19;
  BOOL v22 = (unint64_t)a2 + v19 > a3 && v20 > (unint64_t)a2;
  if ((unint64_t)v7 < v20 && (unint64_t)(v7 + 1) > a3) {
    goto LABEL_25;
  }
  if (v22) {
    goto LABEL_25;
  }
  uint64_t v24 = (v9 >> 2) + 1;
  unint64_t v10 = 4 * (v24 & 0x7FFFFFFE);
  uint64_t v25 = v24 & 0x7FFFFFFE;
  uint64_t v26 = (double *)a3;
  uint64_t v27 = a2;
  do
  {
    a6.f64[0] = *v7;
    float64x2x4_t v60 = vld4q_f64(v27);
    v27 += 8;
    v61.val[0] = vmulq_n_f64(v60.val[0], *v7);
    v61.val[1] = vmulq_n_f64(v60.val[1], *v7);
    v61.val[2] = vmulq_n_f64(v60.val[2], *v7);
    v61.val[3] = vmulq_n_f64(v60.val[3], *v7);
    vst4q_f64(v26, v61);
    v26 += 8;
    v25 -= 2;
  }
  while (v25);
  if (v24 != (v24 & 0x7FFFFFFE)) {
    goto LABEL_25;
  }
LABEL_27:
  if ((int)v10 < (int)v8)
  {
    uint64_t v36 = v10;
    if ((int)v6 <= 1)
    {
      unint64_t v44 = v8 - v10;
      if (v44 < 0xA) {
        goto LABEL_50;
      }
      uint64_t v45 = 8 * v10;
      unint64_t v46 = a3 + 8 * v8;
      BOOL v47 = a3 + v45 >= (unint64_t)&a2[v8] || (unint64_t)&a2[v10] >= v46;
      BOOL v48 = !v47;
      if ((unint64_t)v7 < v46 && a3 + v45 < (unint64_t)(v7 + 1)) {
        goto LABEL_50;
      }
      if (v48) {
        goto LABEL_50;
      }
      v36 += v44 & 0xFFFFFFFFFFFFFFFCLL;
      a6 = vld1q_dup_f64(v7);
      uint64_t v50 = v45 + 16;
      float64x2_t v51 = (float64x2_t *)&a2[(unint64_t)v45 / 8 + 2];
      float64x2_t v52 = (float64x2_t *)(a3 + v50);
      unint64_t v53 = v44 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        float64x2_t v54 = vmulq_f64(a6, *v51);
        v52[-1] = vmulq_f64(a6, v51[-1]);
        *float64x2_t v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if (v44 != (v44 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_50:
        float64x2x4_t v55 = (void *)(a3 + 8 * v36);
        float v56 = (double *)&a2[v36];
        uint64_t v57 = v8 - v36;
        do
        {
          double v58 = *v56++;
          a6.f64[0] = *v7 * v58;
          *v55++ = *(void *)&a6.f64[0];
          --v57;
        }
        while (v57);
      }
    }
    else
    {
      uint64_t v37 = v6 - 1;
      uint64_t v38 = a5;
      uint64_t v39 = (double *)&a2[v10 + v38];
      do
      {
        a6.f64[0] = *v7 * a2[v36];
        float v40 = v39;
        uint64_t v41 = v37;
        uint64_t v42 = v7 + 1;
        do
        {
          double v43 = *v42++;
          a6.f64[0] = a6.f64[0] + v43 * *v40;
          float v40 = (double *)((char *)v40 + v38 * 8);
          --v41;
        }
        while (v41);
        *(float64_t *)(a3 + 8 * v36++) = a6.f64[0];
        ++v39;
      }
      while (v36 != v8);
    }
  }
  return a6.f64[0];
}

void sub_10033F964()
{
}

uint64_t sub_10033F978(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10033F9F8(uint64_t a1, uint64_t a2, int a3, void *a4, double a5)
{
  *(void *)(a1 + 8) = -1;
  *(void *)a1 = off_10049A230;
  *(_DWORD *)(a1 + 16) = 1124007936;
  unint64_t v10 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v11 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v10 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v12 = *(void *)(a2 + 56);
    if (v12)
    {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
      uint64_t v13 = *(void *)(a1 + 72);
      if (v13)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      _DWORD *v10 = *(_DWORD *)a2;
      int v17 = *(_DWORD *)(a2 + 4);
      if (v17 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v17;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        float64x2_t v18 = *(void **)(a2 + 72);
        uint64_t v19 = *(void **)(a1 + 88);
        *uint64_t v19 = *v18;
        v19[1] = v18[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v15 + 4 * v14++) = 0;
        uint64_t v16 = *v11;
      }
      while (v14 < v16);
      _DWORD *v10 = *(_DWORD *)a2;
      if ((int)v16 <= 2)
      {
        int v17 = *(_DWORD *)(a2 + 4);
        if (v17 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v10, a2);
    goto LABEL_16;
  }
  LODWORD(v23) = 33619968;
  uint64_t v24 = a1 + 16;
  uint64_t v25 = 0;
  sub_10025401C(a2, (uint64_t)&v23);
LABEL_17:
  int v21 = *(_DWORD *)(a1 + 24);
  int v20 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v21 + v20 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 124) = (uint64_t)rint(a5);
  *(void *)(a1 + 112) = *a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v21 != 1 && v20 != 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    qmemcpy((void *)sub_1002D19D8(&v23, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v23, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_10033FC58(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033FC8C(uint64_t a1)
{
  *(void *)a1 = off_10049A230;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10033FD3C(uint64_t a1)
{
  *(void *)a1 = off_10049A230;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_10033FE0C(uint64_t result, void *a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(const float **)(result + 32);
    unsigned int v7 = *(_DWORD *)(result + 124);
    unsigned int v8 = *(_DWORD *)(result + 112);
    unsigned int v9 = *(_DWORD *)(result + 116);
    uint64_t v10 = *(unsigned int *)(result + 8);
    uint64_t result = (v10 - 1) | 1;
    int32x4_t v11 = vdupq_n_s32(v7);
    int32x4_t v12 = vdupq_n_s32(v9);
    uint64_t v13 = a2 + 2;
    int32x4_t v14 = vnegq_s32(vdupq_n_s32(v8));
    v15.i64[0] = 0xFF000000FFLL;
    v15.i64[1] = 0xFF000000FFLL;
    while (a6 < 4)
    {
      uint64_t v16 = 0;
      if (a6 > 0) {
        goto LABEL_14;
      }
LABEL_3:
      a3 += a4;
      ++a2;
      ++v13;
      if (!--a5) {
        return result;
      }
    }
    uint64_t v16 = 0;
    do
    {
      int32x4_t v18 = (int32x4_t)vld1q_dup_f32(v6);
      int32x4_t v19 = vmlaq_s32(v11, *(int32x4_t *)(*a2 + 4 * v16), v18);
      if ((int)v10 >= 2)
      {
        for (uint64_t i = 1; i != v10; ++i)
        {
          int v21 = &v6[i];
          int32x4_t v22 = (int32x4_t)vld1q_dup_f32(v21);
          int32x4_t v19 = vmlaq_s32(v19, *(int32x4_t *)(a2[i] + 4 * v16), v22);
        }
      }
      int16x8_t v17 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v19, v12), v14), (int32x4_t)0), v15);
      *(int16x4_t *)v17.i8 = vmovn_s32((int32x4_t)v17);
      *(_DWORD *)(a3 + v16) = vmovn_s16(v17).u32[0];
      v16 += 4;
    }
    while (v16 <= a6 - 4);
    uint64_t v16 = v16;
    if ((int)v16 >= a6) {
      goto LABEL_3;
    }
LABEL_14:
    if ((int)v10 <= 1)
    {
      do
      {
        int v23 = (int)(v7 + *(_DWORD *)(*a2 + 4 * v16) * *(_DWORD *)v6 + v9) >> v8;
        int v24 = v23 & ~(v23 >> 31);
        if (v24 >= 255) {
          LOBYTE(v24) = -1;
        }
        *(unsigned char *)(a3 + v16++) = v24;
      }
      while (a6 != v16);
      goto LABEL_3;
    }
    while (1)
    {
      unsigned int v26 = v7 + *(_DWORD *)(*a2 + 4 * v16) * *(_DWORD *)v6;
      if (v10 >= 3)
      {
        int v28 = 0;
        float v29 = v13;
        double v30 = v6 + 2;
        unint64_t v31 = (v10 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v26 += *(_DWORD *)(*(v29 - 1) + 4 * v16) * *(v30 - 1);
          v28 += *(_DWORD *)(*v29 + 4 * v16) * *v30;
          v30 += 2;
          v29 += 2;
          v31 -= 2;
        }
        while (v31);
        v26 += v28;
        uint64_t v27 = (v10 - 1) | 1;
        if (v10 - 1 == ((v10 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v27 = 1;
      }
      do
      {
        v26 += *(_DWORD *)(a2[v27] + 4 * v16) * LODWORD(v6[v27]);
        ++v27;
      }
      while (v10 != v27);
LABEL_19:
      int v25 = ((int)(v26 + v9) >> v8) & ~((int)(v26 + v9) >> v8 >> 31);
      if (v25 >= 255) {
        LOBYTE(v25) = -1;
      }
      *(unsigned char *)(a3 + v16++) = v25;
      if (v16 == a6) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void sub_100340034()
{
}

uint64_t sub_100340048(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003400C8(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  unsigned int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  unsigned int v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A2B8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *unsigned int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v16 = *(void **)(a2 + 72);
        int16x8_t v17 = *(void **)(a1 + 88);
        *int16x8_t v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *unsigned int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v22) = 33619968;
  uint64_t v23 = a1 + 16;
  uint64_t v24 = 0;
  sub_10025401C(a2, (uint64_t)&v22);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    qmemcpy((void *)sub_1002D19D8(&v22, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v22, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100340318(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10034034C(uint64_t a1)
{
  *(void *)a1 = off_10049A2B8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_1003403FC(uint64_t a1)
{
  *(void *)a1 = off_10049A2B8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_1003404CC(unint64_t result, uint64_t a2, unsigned char *a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(float **)(result + 32);
    float v7 = *(float *)(result + 116);
    int v8 = a5 - 1;
    uint64_t v9 = a4;
    uint64_t v10 = *(unsigned int *)(result + 8);
    if (a6 >= 4)
    {
      uint64_t v24 = a3 + 4;
      v25.i64[0] = 0xFF000000FFLL;
      v25.i64[1] = 0xFF000000FFLL;
      do
      {
        uint64_t result = 0;
        int v26 = v8;
        uint64_t v27 = v24;
        uint64_t v28 = 4;
        do
        {
          unint64_t v32 = v28;
          double v33 = v27;
          double v34 = (float *)(*(void *)a2 + 4 * result);
          float v35 = v7 + (float)(*v6 * *v34);
          float v36 = v7 + (float)(*v6 * v34[1]);
          float v37 = v7 + (float)(*v6 * v34[2]);
          float v38 = v7 + (float)(*v6 * v34[3]);
          if ((int)v10 >= 2)
          {
            for (uint64_t i = 1; i != v10; ++i)
            {
              float v40 = (float *)(*(void *)(a2 + 8 * i) + 4 * result);
              float v41 = v6[i];
              float v35 = v35 + (float)(v41 * *v40);
              float v36 = v36 + (float)(v41 * v40[1]);
              float v37 = v37 + (float)(v41 * v40[2]);
              float v38 = v38 + (float)(v41 * v40[3]);
            }
          }
          uint64_t v29 = (uint64_t)rintf(v36);
          v30.i32[0] = (uint64_t)rintf(v35);
          v30.i32[1] = v29;
          v30.i64[1] = __PAIR64__((uint64_t)rintf(v38), (uint64_t)rintf(v37));
          int16x8_t v31 = (int16x8_t)vminq_s32(vmaxq_s32(v30, (int32x4_t)0), v25);
          *(int16x4_t *)v31.i8 = vmovn_s32((int32x4_t)v31);
          *(_DWORD *)&a3[result] = vmovn_s16(v31).u32[0];
          result += 4;
          uint64_t v28 = v32 + 4;
          uint64_t v27 = v33 + 4;
        }
        while (result <= (a6 - 4));
        if ((int)result < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              float v46 = rintf(v7 + (float)(*v6 * *(float *)(*(void *)a2 + 4 * v32)));
              LODWORD(result) = (uint64_t)v46 & ~((int)(uint64_t)v46 >> 31);
              if ((int)result >= 255) {
                uint64_t result = 255;
              }
              else {
                uint64_t result = result;
              }
              *v33++ = result;
              ++v32;
            }
            while (v32 < a6);
          }
          else
          {
            do
            {
              float v42 = v7 + (float)(*v6 * *(float *)(*(void *)a2 + 4 * v32));
              for (uint64_t j = 1; j != v10; ++j)
              {
                uint64_t result = *(void *)(a2 + 8 * j);
                float v42 = v42 + (float)(v6[j] * *(float *)(result + 4 * v32));
              }
              float v44 = rintf(v42);
              int v45 = (uint64_t)v44 & ~((int)(uint64_t)v44 >> 31);
              if (v45 >= 255) {
                LOBYTE(v45) = -1;
              }
              a3[v32++] = v45;
            }
            while (v32 < a6);
          }
        }
        a3 += v9;
        a2 += 8;
        int v8 = v26 - 1;
        v24 += v9;
      }
      while (v26);
    }
    else if (a6 >= 1)
    {
      if ((int)v10 <= 1)
      {
        BOOL v47 = a3 + 2;
        do
        {
          float v48 = rintf(v7 + (float)(*v6 * **(float **)a2));
          int v49 = (uint64_t)v48 & ~((int)(uint64_t)v48 >> 31);
          if (v49 >= 255) {
            LOBYTE(v49) = -1;
          }
          *(v47 - 2) = v49;
          if (a6 != 1)
          {
            float v50 = rintf(v7 + (float)(*v6 * *(float *)(*(void *)a2 + 4)));
            int v51 = (uint64_t)v50 & ~((int)(uint64_t)v50 >> 31);
            if (v51 >= 255) {
              LOBYTE(v51) = -1;
            }
            *(v47 - 1) = v51;
            if (a6 != 2)
            {
              float v52 = rintf(v7 + (float)(*v6 * *(float *)(*(void *)a2 + 8)));
              int v53 = (uint64_t)v52 & ~((int)(uint64_t)v52 >> 31);
              if (v53 >= 255) {
                LOBYTE(v53) = -1;
              }
              *BOOL v47 = v53;
            }
          }
          a2 += 8;
          v47 += a4;
          --a5;
        }
        while (a5);
      }
      else
      {
        do
        {
          int v11 = v8;
          float v12 = v7 + (float)(*v6 * **(float **)a2);
          for (uint64_t k = 1; k != v10; ++k)
            float v12 = v12 + (float)(v6[k] * **(float **)(a2 + 8 * k));
          float v14 = rintf(v12);
          int v15 = (uint64_t)v14 & ~((int)(uint64_t)v14 >> 31);
          if (v15 >= 255) {
            LOBYTE(v15) = -1;
          }
          *a3 = v15;
          if (a6 != 1)
          {
            float v16 = v7 + (float)(*v6 * *(float *)(*(void *)a2 + 4));
            for (uint64_t m = 1; m != v10; ++m)
              float v16 = v16 + (float)(v6[m] * *(float *)(*(void *)(a2 + 8 * m) + 4));
            float v18 = rintf(v16);
            int v19 = (uint64_t)v18 & ~((int)(uint64_t)v18 >> 31);
            if (v19 >= 255) {
              LOBYTE(v19) = -1;
            }
            a3[1] = v19;
            if (a6 != 2)
            {
              float v20 = v7 + (float)(*v6 * *(float *)(*(void *)a2 + 8));
              for (uint64_t n = 1; n != v10; ++n)
                float v20 = v20 + (float)(v6[n] * *(float *)(*(void *)(a2 + 8 * n) + 8));
              float v22 = rintf(v20);
              int v23 = (uint64_t)v22 & ~((int)(uint64_t)v22 >> 31);
              if (v23 >= 255) {
                LOBYTE(v23) = -1;
              }
              a3[2] = v23;
            }
          }
          a3 += a4;
          a2 += 8;
          --v8;
        }
        while (v11);
      }
    }
  }
  return result;
}

uint64_t sub_100340854(uint64_t a1)
{
  *(void *)a1 = off_10049A2B8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100340908()
{
}

uint64_t sub_10034091C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10034099C(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A340;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        float v16 = *(void **)(a2 + 72);
        int16x8_t v17 = *(void **)(a1 + 88);
        *int16x8_t v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v21) = 33619968;
  uint64_t v22 = a1 + 16;
  uint64_t v23 = 0;
  sub_10025401C(a2, (uint64_t)&v21);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v19 != 1 && v18 != 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    qmemcpy((void *)sub_1002D19D8(&v21, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v21, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100340BE8(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100340C1C(uint64_t a1)
{
  *(void *)a1 = off_10049A340;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100340CCC(uint64_t a1)
{
  *(void *)a1 = off_10049A340;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_100340D9C(uint64_t result, uint64_t a2, unsigned char *a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(double **)(result + 32);
    double v7 = *(double *)(result + 120);
    int v8 = a5 - 1;
    uint64_t v9 = a4;
    uint64_t v10 = *(unsigned int *)(result + 8);
    if (a6 >= 4)
    {
      uint64_t v25 = 8 * v10;
      int v26 = a3 + 4;
      v27.i64[0] = 0xFF000000FFLL;
      v27.i64[1] = 0xFF000000FFLL;
      do
      {
        unint64_t v28 = 0;
        int v29 = v8;
        uint64_t v30 = (uint64_t)v26;
        uint64_t v31 = 4;
        do
        {
          unint64_t v35 = v31;
          uint64_t result = v30;
          float v36 = (double *)(*(void *)a2 + 8 * v28);
          double v37 = v7 + *v6 * *v36;
          double v38 = v7 + *v6 * v36[1];
          double v39 = v7 + *v6 * v36[2];
          double v40 = v7 + *v6 * v36[3];
          if ((int)v10 >= 2)
          {
            uint64_t v41 = 8;
            do
            {
              float v42 = (double *)(*(void *)(a2 + v41) + 8 * v28);
              double v43 = v6[(unint64_t)v41 / 8];
              double v37 = v37 + v43 * *v42;
              double v38 = v38 + v43 * v42[1];
              double v39 = v39 + v43 * v42[2];
              double v40 = v40 + v43 * v42[3];
              v41 += 8;
            }
            while (v25 != v41);
          }
          uint64_t v32 = (uint64_t)rint(v38);
          v33.i32[0] = (uint64_t)rint(v37);
          v33.i32[1] = v32;
          v33.i64[1] = __PAIR64__((uint64_t)rint(v40), (uint64_t)rint(v39));
          int16x8_t v34 = (int16x8_t)vminq_s32(vmaxq_s32(v33, (int32x4_t)0), v27);
          *(int16x4_t *)v34.i8 = vmovn_s32((int32x4_t)v34);
          *(_DWORD *)&a3[v28] = vmovn_s16(v34).u32[0];
          v28 += 4;
          uint64_t v31 = v35 + 4;
          uint64_t v30 = result + 4;
        }
        while (v28 <= (a6 - 4));
        if ((int)v28 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              double v47 = rint(v7 + *v6 * *(double *)(*(void *)a2 + 8 * v35));
              int v48 = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
              if (v48 >= 255) {
                LOBYTE(v48) = -1;
              }
              *(unsigned char *)result++ = v48;
              ++v35;
            }
            while (v35 < a6);
          }
          else
          {
            do
            {
              double v44 = v7 + *v6 * *(double *)(*(void *)a2 + 8 * v35);
              uint64_t v45 = 8;
              do
              {
                double v44 = v44 + v6[(unint64_t)v45 / 8] * *(double *)(*(void *)(a2 + v45) + 8 * v35);
                v45 += 8;
              }
              while (v25 != v45);
              double v46 = rint(v44);
              LODWORD(result) = (uint64_t)v46 & ~((int)(uint64_t)v46 >> 31);
              if ((int)result >= 255) {
                uint64_t result = 255;
              }
              else {
                uint64_t result = result;
              }
              a3[v35++] = result;
            }
            while (v35 < a6);
          }
        }
        a3 += v9;
        a2 += 8;
        int v8 = v29 - 1;
        v26 += v9;
      }
      while (v29);
    }
    else if (a6 >= 1)
    {
      if ((int)v10 <= 1)
      {
        int v49 = a3 + 2;
        do
        {
          double v50 = rint(v7 + *v6 * **(double **)a2);
          int v51 = (uint64_t)v50 & ~((int)(uint64_t)v50 >> 31);
          if (v51 >= 255) {
            LOBYTE(v51) = -1;
          }
          *(v49 - 2) = v51;
          if (a6 != 1)
          {
            double v52 = rint(v7 + *v6 * *(double *)(*(void *)a2 + 8));
            int v53 = (uint64_t)v52 & ~((int)(uint64_t)v52 >> 31);
            if (v53 >= 255) {
              LOBYTE(v53) = -1;
            }
            *(v49 - 1) = v53;
            if (a6 != 2)
            {
              double v54 = rint(v7 + *v6 * *(double *)(*(void *)a2 + 16));
              int v55 = (uint64_t)v54 & ~((int)(uint64_t)v54 >> 31);
              if (v55 >= 255) {
                LOBYTE(v55) = -1;
              }
              *int v49 = v55;
            }
          }
          a2 += 8;
          v49 += a4;
          --a5;
        }
        while (a5);
      }
      else
      {
        uint64_t v11 = 8 * v10;
        do
        {
          int v12 = v8;
          double v13 = v7 + *v6 * **(double **)a2;
          uint64_t v14 = 8;
          do
          {
            double v13 = v13 + v6[(unint64_t)v14 / 8] * **(double **)(a2 + v14);
            v14 += 8;
          }
          while (v11 != v14);
          double v15 = rint(v13);
          int v16 = (uint64_t)v15 & ~((int)(uint64_t)v15 >> 31);
          if (v16 >= 255) {
            LOBYTE(v16) = -1;
          }
          *a3 = v16;
          if (a6 != 1)
          {
            double v17 = v7 + *v6 * *(double *)(*(void *)a2 + 8);
            uint64_t v18 = 8;
            do
            {
              double v17 = v17 + v6[(unint64_t)v18 / 8] * *(double *)(*(void *)(a2 + v18) + 8);
              v18 += 8;
            }
            while (v11 != v18);
            double v19 = rint(v17);
            int v20 = (uint64_t)v19 & ~((int)(uint64_t)v19 >> 31);
            if (v20 >= 255) {
              LOBYTE(v20) = -1;
            }
            a3[1] = v20;
            if (a6 != 2)
            {
              double v21 = v7 + *v6 * *(double *)(*(void *)a2 + 16);
              uint64_t v22 = 8;
              do
              {
                double v21 = v21 + v6[(unint64_t)v22 / 8] * *(double *)(*(void *)(a2 + v22) + 16);
                v22 += 8;
              }
              while (v11 != v22);
              double v23 = rint(v21);
              int v24 = (uint64_t)v23 & ~((int)(uint64_t)v23 >> 31);
              if (v24 >= 255) {
                LOBYTE(v24) = -1;
              }
              a3[2] = v24;
            }
          }
          a3 += a4;
          a2 += 8;
          --v8;
        }
        while (v12);
      }
    }
  }
  return result;
}

uint64_t sub_100341134(uint64_t a1)
{
  *(void *)a1 = off_10049A340;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_1003411E8()
{
}

uint64_t sub_1003411FC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10034127C(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A3C8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        int v16 = *(void **)(a2 + 72);
        double v17 = *(void **)(a1 + 88);
        *double v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v22) = 33619968;
  uint64_t v23 = a1 + 16;
  uint64_t v24 = 0;
  sub_10025401C(a2, (uint64_t)&v22);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    qmemcpy((void *)sub_1002D19D8(&v22, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v22, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1003414CC(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100341500(uint64_t a1)
{
  *(void *)a1 = off_10049A3C8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_1003415B0(uint64_t a1)
{
  *(void *)a1 = off_10049A3C8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_100341680(uint64_t result, float **a2, _WORD *a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(float **)(result + 32);
    float v7 = *(float *)(result + 116);
    int v8 = a5 - 1;
    uint64_t v9 = a4;
    uint64_t v10 = *(unsigned int *)(result + 8);
    if (a6 > 3)
    {
      float v26 = *v6;
      int32x4_t v27 = a3 + 4;
      v28.i64[0] = 0xFFFF0000FFFFLL;
      v28.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        unint64_t v29 = 0;
        int v30 = v8;
        uint64_t v31 = *a2;
        uint64_t v32 = (uint64_t)v27;
        uint64_t v33 = 4;
        do
        {
          unint64_t v36 = v33;
          uint64_t result = v32;
          double v37 = &v31[v29];
          float v38 = v7 + (float)(v26 * *v37);
          float v39 = v7 + (float)(v26 * v37[1]);
          float v40 = v7 + (float)(v26 * v37[2]);
          float v41 = v7 + (float)(v26 * v37[3]);
          if ((int)v10 >= 2)
          {
            for (uint64_t i = 1; i != v10; ++i)
            {
              double v43 = &a2[i][v29];
              float v44 = v6[i];
              float v38 = v38 + (float)(v44 * *v43);
              float v39 = v39 + (float)(v44 * v43[1]);
              float v40 = v40 + (float)(v44 * v43[2]);
              float v41 = v41 + (float)(v44 * v43[3]);
            }
          }
          uint64_t v34 = (uint64_t)rintf(v39);
          v35.i32[0] = (uint64_t)rintf(v38);
          v35.i32[1] = v34;
          v35.i64[1] = __PAIR64__((uint64_t)rintf(v41), (uint64_t)rintf(v40));
          *(int16x4_t *)&a3[v29] = vmovn_s32(vminq_s32(vmaxq_s32(v35, (int32x4_t)0), v28));
          v29 += 4;
          uint64_t v33 = v36 + 4;
          uint64_t v32 = result + 8;
        }
        while (v29 <= (a6 - 4));
        if ((int)v29 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              float v48 = rintf(v7 + (float)(v26 * v31[v36]));
              int v49 = (uint64_t)v48 & ~((int)(uint64_t)v48 >> 31);
              if (v49 >= 0xFFFF) {
                LOWORD(v49) = -1;
              }
              *(_WORD *)uint64_t result = v49;
              result += 2;
              ++v36;
            }
            while (v36 < a6);
          }
          else
          {
            do
            {
              float v45 = v7 + (float)(v26 * v31[v36]);
              for (uint64_t j = 1; j != v10; ++j)
                float v45 = v45 + (float)(v6[j] * a2[j][v36]);
              float v47 = rintf(v45);
              LODWORD(result) = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
              if ((int)result >= 0xFFFF) {
                uint64_t result = 0xFFFFLL;
              }
              else {
                uint64_t result = result;
              }
              a3[v36++] = result;
            }
            while (v36 < a6);
          }
        }
        a3 = (_WORD *)((char *)a3 + v9);
        ++a2;
        int v8 = v30 - 1;
        int32x4_t v27 = (_WORD *)((char *)v27 + v9);
      }
      while (v30);
    }
    else if (a6 >= 1)
    {
      float v11 = *v6;
      if ((int)v10 <= 1)
      {
        double v50 = a3 + 2;
        do
        {
          int v51 = *a2;
          float v52 = rintf(v7 + (float)(v11 * **a2));
          int v53 = (uint64_t)v52 & ~((int)(uint64_t)v52 >> 31);
          if (v53 >= 0xFFFF) {
            LOWORD(v53) = -1;
          }
          *(v50 - 2) = v53;
          if (a6 != 1)
          {
            float v54 = rintf(v7 + (float)(v11 * v51[1]));
            int v55 = (uint64_t)v54 & ~((int)(uint64_t)v54 >> 31);
            if (v55 >= 0xFFFF) {
              LOWORD(v55) = -1;
            }
            *(v50 - 1) = v55;
            if (a6 != 2)
            {
              float v56 = rintf(v7 + (float)(v11 * v51[2]));
              int v57 = (uint64_t)v56 & ~((int)(uint64_t)v56 >> 31);
              if (v57 >= 0xFFFF) {
                LOWORD(v57) = -1;
              }
              *double v50 = v57;
            }
          }
          ++a2;
          double v50 = (_WORD *)((char *)v50 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        do
        {
          int v12 = v8;
          uint64_t v13 = *a2;
          float v14 = v7 + (float)(v11 * **a2);
          for (uint64_t k = 1; k != v10; ++k)
            float v14 = v14 + (float)(v6[k] * *a2[k]);
          float v16 = rintf(v14);
          int v17 = (uint64_t)v16 & ~((int)(uint64_t)v16 >> 31);
          if (v17 >= 0xFFFF) {
            LOWORD(v17) = -1;
          }
          *a3 = v17;
          if (a6 != 1)
          {
            float v18 = v7 + (float)(v11 * v13[1]);
            for (uint64_t m = 1; m != v10; ++m)
              float v18 = v18 + (float)(v6[m] * a2[m][1]);
            float v20 = rintf(v18);
            int v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
            if (v21 >= 0xFFFF) {
              LOWORD(v21) = -1;
            }
            a3[1] = v21;
            if (a6 != 2)
            {
              float v22 = v7 + (float)(v11 * v13[2]);
              for (uint64_t n = 1; n != v10; ++n)
                float v22 = v22 + (float)(v6[n] * a2[n][2]);
              float v24 = rintf(v22);
              int v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
              if (v25 >= 0xFFFF) {
                LOWORD(v25) = -1;
              }
              a3[2] = v25;
            }
          }
          a3 = (_WORD *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v12);
      }
    }
  }
  return result;
}

uint64_t sub_1003419E0(uint64_t a1)
{
  *(void *)a1 = off_10049A3C8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100341A94()
{
}

uint64_t sub_100341AA8(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100341B28(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A450;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        float v16 = *(void **)(a2 + 72);
        int v17 = *(void **)(a1 + 88);
        *int v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v21) = 33619968;
  uint64_t v22 = a1 + 16;
  uint64_t v23 = 0;
  sub_10025401C(a2, (uint64_t)&v21);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v19 != 1 && v18 != 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    qmemcpy((void *)sub_1002D19D8(&v21, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v21, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100341D74(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100341DA8(uint64_t a1)
{
  *(void *)a1 = off_10049A450;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100341E58(uint64_t a1)
{
  *(void *)a1 = off_10049A450;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_100341F28(unint64_t result, double **a2, _WORD *a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(double **)(result + 32);
    double v7 = *(double *)(result + 120);
    int v8 = a5 - 1;
    uint64_t v9 = a4;
    uint64_t v10 = *(unsigned int *)(result + 8);
    if (a6 > 3)
    {
      double v27 = *v6;
      uint64_t v28 = 8 * v10;
      unint64_t v29 = a3 + 4;
      v30.i64[0] = 0xFFFF0000FFFFLL;
      v30.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        unint64_t v31 = 0;
        int v32 = v8;
        uint64_t v33 = *a2;
        uint64_t v34 = v29;
        uint64_t v35 = 4;
        do
        {
          uint64_t result = v35;
          float v38 = v34;
          float v39 = &v33[v31];
          double v40 = v7 + v27 * *v39;
          double v41 = v7 + v27 * v39[1];
          double v42 = v7 + v27 * v39[2];
          double v43 = v7 + v27 * v39[3];
          if ((int)v10 >= 2)
          {
            uint64_t v44 = 8;
            do
            {
              float v45 = &a2[(unint64_t)v44 / 8][v31];
              double v46 = v6[(unint64_t)v44 / 8];
              double v40 = v40 + v46 * *v45;
              double v41 = v41 + v46 * v45[1];
              double v42 = v42 + v46 * v45[2];
              double v43 = v43 + v46 * v45[3];
              v44 += 8;
            }
            while (v28 != v44);
          }
          uint64_t v36 = (uint64_t)rint(v41);
          v37.i32[0] = (uint64_t)rint(v40);
          v37.i32[1] = v36;
          v37.i64[1] = __PAIR64__((uint64_t)rint(v43), (uint64_t)rint(v42));
          *(int16x4_t *)&a3[v31] = vmovn_s32(vminq_s32(vmaxq_s32(v37, (int32x4_t)0), v30));
          v31 += 4;
          uint64_t v35 = result + 4;
          uint64_t v34 = v38 + 4;
        }
        while (v31 <= (a6 - 4));
        if ((int)v31 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              double v51 = rint(v7 + v27 * v33[result]);
              int v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
              if (v52 >= 0xFFFF) {
                LOWORD(v52) = -1;
              }
              *v38++ = v52;
              ++result;
            }
            while (result < a6);
          }
          else
          {
            do
            {
              double v47 = v7 + v27 * v33[result];
              uint64_t v48 = 8;
              do
              {
                double v47 = v47 + v6[(unint64_t)v48 / 8] * a2[(unint64_t)v48 / 8][result];
                v48 += 8;
              }
              while (v28 != v48);
              double v49 = rint(v47);
              int v50 = (uint64_t)v49 & ~((int)(uint64_t)v49 >> 31);
              if (v50 >= 0xFFFF) {
                LOWORD(v50) = -1;
              }
              a3[result++] = v50;
            }
            while (result < a6);
          }
        }
        a3 = (_WORD *)((char *)a3 + v9);
        ++a2;
        int v8 = v32 - 1;
        unint64_t v29 = (_WORD *)((char *)v29 + v9);
      }
      while (v32);
    }
    else if (a6 >= 1)
    {
      double v11 = *v6;
      if ((int)v10 <= 1)
      {
        int v53 = a3 + 2;
        do
        {
          float v54 = *a2;
          double v55 = rint(v7 + v11 * **a2);
          int v56 = (uint64_t)v55 & ~((int)(uint64_t)v55 >> 31);
          if (v56 >= 0xFFFF) {
            LOWORD(v56) = -1;
          }
          *(v53 - 2) = v56;
          if (a6 != 1)
          {
            double v57 = rint(v7 + v11 * v54[1]);
            int v58 = (uint64_t)v57 & ~((int)(uint64_t)v57 >> 31);
            if (v58 >= 0xFFFF) {
              LOWORD(v58) = -1;
            }
            *(v53 - 1) = v58;
            if (a6 != 2)
            {
              double v59 = rint(v7 + v11 * v54[2]);
              int v60 = (uint64_t)v59 & ~((int)(uint64_t)v59 >> 31);
              if (v60 >= 0xFFFF) {
                LOWORD(v60) = -1;
              }
              *int v53 = v60;
            }
          }
          ++a2;
          int v53 = (_WORD *)((char *)v53 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        uint64_t v12 = 8 * v10;
        do
        {
          int v13 = v8;
          uint64_t v14 = *a2;
          double v15 = v7 + v11 * **a2;
          uint64_t v16 = 8;
          do
          {
            double v15 = v15 + v6[(unint64_t)v16 / 8] * *a2[(unint64_t)v16 / 8];
            v16 += 8;
          }
          while (v12 != v16);
          double v17 = rint(v15);
          int v18 = (uint64_t)v17 & ~((int)(uint64_t)v17 >> 31);
          if (v18 >= 0xFFFF) {
            LOWORD(v18) = -1;
          }
          *a3 = v18;
          if (a6 != 1)
          {
            double v19 = v7 + v11 * v14[1];
            uint64_t v20 = 8;
            do
            {
              double v19 = v19 + v6[(unint64_t)v20 / 8] * a2[(unint64_t)v20 / 8][1];
              v20 += 8;
            }
            while (v12 != v20);
            double v21 = rint(v19);
            int v22 = (uint64_t)v21 & ~((int)(uint64_t)v21 >> 31);
            if (v22 >= 0xFFFF) {
              LOWORD(v22) = -1;
            }
            a3[1] = v22;
            if (a6 != 2)
            {
              double v23 = v7 + v11 * v14[2];
              uint64_t v24 = 8;
              do
              {
                double v23 = v23 + v6[(unint64_t)v24 / 8] * a2[(unint64_t)v24 / 8][2];
                v24 += 8;
              }
              while (v12 != v24);
              double v25 = rint(v23);
              int v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
              if (v26 >= 0xFFFF) {
                LOWORD(v26) = -1;
              }
              a3[2] = v26;
            }
          }
          a3 = (_WORD *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v13);
      }
    }
  }
  return result;
}

uint64_t sub_100342290(uint64_t a1)
{
  *(void *)a1 = off_10049A450;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100342344()
{
}

uint64_t sub_100342358(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003423D8(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A4D8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v16 = *(void **)(a2 + 72);
        double v17 = *(void **)(a1 + 88);
        *double v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v22) = 33619968;
  uint64_t v23 = a1 + 16;
  uint64_t v24 = 0;
  sub_10025401C(a2, (uint64_t)&v22);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    qmemcpy((void *)sub_1002D19D8(&v22, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v22, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100342628(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10034265C(uint64_t a1)
{
  *(void *)a1 = off_10049A4D8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034270C(uint64_t a1)
{
  *(void *)a1 = off_10049A4D8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_1003427DC(unint64_t result, float **a2, _WORD *a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = *(float **)(result + 32);
    float v7 = *(float *)(result + 116);
    int v8 = a5 - 1;
    uint64_t v9 = a4;
    uint64_t v10 = *(unsigned int *)(result + 8);
    if (a6 > 3)
    {
      float v23 = *v6;
      uint64_t v24 = a3 + 4;
      do
      {
        unint64_t v25 = 0;
        int v26 = v8;
        double v27 = *a2;
        uint64_t v28 = v24;
        uint64_t v29 = 4;
        do
        {
          uint64_t result = v29;
          int v32 = v28;
          uint64_t v33 = &v27[v25];
          float v34 = v7 + (float)(v23 * *v33);
          float v35 = v7 + (float)(v23 * v33[1]);
          float v36 = v7 + (float)(v23 * v33[2]);
          float v37 = v7 + (float)(v23 * v33[3]);
          if ((int)v10 >= 2)
          {
            for (uint64_t i = 1; i != v10; ++i)
            {
              float v39 = &a2[i][v25];
              float v40 = v6[i];
              float v34 = v34 + (float)(v40 * *v39);
              float v35 = v35 + (float)(v40 * v39[1]);
              float v36 = v36 + (float)(v40 * v39[2]);
              float v37 = v37 + (float)(v40 * v39[3]);
            }
          }
          uint64_t v30 = (uint64_t)rintf(v35);
          v31.i32[0] = (uint64_t)rintf(v34);
          v31.i32[1] = v30;
          v31.i64[1] = __PAIR64__((uint64_t)rintf(v37), (uint64_t)rintf(v36));
          *(int16x4_t *)&a3[v25] = vqmovn_s32(v31);
          v25 += 4;
          uint64_t v29 = result + 4;
          uint64_t v28 = v32 + 4;
        }
        while (v25 <= (a6 - 4));
        if ((int)v25 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              uint64_t v44 = (uint64_t)rintf(v7 + (float)(v23 * v27[result]));
              if ((int)v44 <= -32768) {
                LODWORD(v44) = -32768;
              }
              if ((int)v44 >= 0x7FFF) {
                LOWORD(v44) = 0x7FFF;
              }
              *v32++ = v44;
              ++result;
            }
            while (result < a6);
          }
          else
          {
            do
            {
              float v41 = v7 + (float)(v23 * v27[result]);
              for (uint64_t j = 1; j != v10; ++j)
                float v41 = v41 + (float)(v6[j] * a2[j][result]);
              uint64_t v43 = (uint64_t)rintf(v41);
              if ((int)v43 <= -32768) {
                LODWORD(v43) = -32768;
              }
              if ((int)v43 >= 0x7FFF) {
                LOWORD(v43) = 0x7FFF;
              }
              a3[result++] = v43;
            }
            while (result < a6);
          }
        }
        a3 = (_WORD *)((char *)a3 + v9);
        ++a2;
        int v8 = v26 - 1;
        uint64_t v24 = (_WORD *)((char *)v24 + v9);
      }
      while (v26);
    }
    else if (a6 >= 1)
    {
      float v11 = *v6;
      if ((int)v10 <= 1)
      {
        float v45 = a3 + 2;
        do
        {
          double v46 = *a2;
          uint64_t v47 = (uint64_t)rintf(v7 + (float)(v11 * **a2));
          if ((int)v47 <= -32768) {
            LODWORD(v47) = -32768;
          }
          if ((int)v47 >= 0x7FFF) {
            LOWORD(v47) = 0x7FFF;
          }
          *(v45 - 2) = v47;
          if (a6 != 1)
          {
            uint64_t v48 = (uint64_t)rintf(v7 + (float)(v11 * v46[1]));
            if ((int)v48 <= -32768) {
              LODWORD(v48) = -32768;
            }
            if ((int)v48 >= 0x7FFF) {
              LOWORD(v48) = 0x7FFF;
            }
            *(v45 - 1) = v48;
            if (a6 != 2)
            {
              uint64_t v49 = (uint64_t)rintf(v7 + (float)(v11 * v46[2]));
              if ((int)v49 <= -32768) {
                LODWORD(v49) = -32768;
              }
              if ((int)v49 >= 0x7FFF) {
                LOWORD(v49) = 0x7FFF;
              }
              *float v45 = v49;
            }
          }
          ++a2;
          float v45 = (_WORD *)((char *)v45 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        do
        {
          int v12 = v8;
          uint64_t v13 = *a2;
          float v14 = v7 + (float)(v11 * **a2);
          for (uint64_t k = 1; k != v10; ++k)
            float v14 = v14 + (float)(v6[k] * *a2[k]);
          uint64_t v16 = (uint64_t)rintf(v14);
          if ((int)v16 <= -32768) {
            LODWORD(v16) = -32768;
          }
          if ((int)v16 >= 0x7FFF) {
            LOWORD(v16) = 0x7FFF;
          }
          *a3 = v16;
          if (a6 != 1)
          {
            float v17 = v7 + (float)(v11 * v13[1]);
            for (uint64_t m = 1; m != v10; ++m)
              float v17 = v17 + (float)(v6[m] * a2[m][1]);
            uint64_t v19 = (uint64_t)rintf(v17);
            if ((int)v19 <= -32768) {
              LODWORD(v19) = -32768;
            }
            if ((int)v19 >= 0x7FFF) {
              LOWORD(v19) = 0x7FFF;
            }
            a3[1] = v19;
            if (a6 != 2)
            {
              float v20 = v7 + (float)(v11 * v13[2]);
              for (uint64_t n = 1; n != v10; ++n)
                float v20 = v20 + (float)(v6[n] * a2[n][2]);
              uint64_t v22 = (uint64_t)rintf(v20);
              if ((int)v22 <= -32768) {
                LODWORD(v22) = -32768;
              }
              if ((int)v22 >= 0x7FFF) {
                LOWORD(v22) = 0x7FFF;
              }
              a3[2] = v22;
            }
          }
          a3 = (_WORD *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v12);
      }
    }
  }
  return result;
}

void sub_100342B5C()
{
}

uint64_t sub_100342B70(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100342BF0(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A560;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v16 = *(void **)(a2 + 72);
        float v17 = *(void **)(a1 + 88);
        *float v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v21) = 33619968;
  uint64_t v22 = a1 + 16;
  uint64_t v23 = 0;
  sub_10025401C(a2, (uint64_t)&v21);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v19 != 1 && v18 != 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    qmemcpy((void *)sub_1002D19D8(&v21, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v21, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100342E3C(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100342E70(uint64_t a1)
{
  *(void *)a1 = off_10049A560;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100342F20(uint64_t a1)
{
  *(void *)a1 = off_10049A560;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

double *sub_100342FF0(double *result, double **a2, _WORD *a3, int a4, int a5, int a6)
{
  if (a5)
  {
    uint64_t v6 = (double *)*((void *)result + 4);
    double v7 = result[15];
    int v8 = a5 - 1;
    uint64_t v9 = a4;
    uint64_t v10 = *((unsigned int *)result + 2);
    if (a6 > 3)
    {
      double v24 = *v6;
      uint64_t v25 = 8 * v10;
      int v26 = a3 + 4;
      do
      {
        unint64_t v27 = 0;
        int v28 = v8;
        uint64_t result = *a2;
        uint64_t v29 = v26;
        uint64_t v30 = 4;
        do
        {
          unint64_t v33 = v30;
          float v34 = v29;
          float v35 = &result[v27];
          double v36 = v7 + v24 * *v35;
          double v37 = v7 + v24 * v35[1];
          double v38 = v7 + v24 * v35[2];
          double v39 = v7 + v24 * v35[3];
          if ((int)v10 >= 2)
          {
            uint64_t v40 = 8;
            do
            {
              float v41 = &a2[(unint64_t)v40 / 8][v27];
              double v42 = v6[(unint64_t)v40 / 8];
              double v36 = v36 + v42 * *v41;
              double v37 = v37 + v42 * v41[1];
              double v38 = v38 + v42 * v41[2];
              double v39 = v39 + v42 * v41[3];
              v40 += 8;
            }
            while (v25 != v40);
          }
          uint64_t v31 = (uint64_t)rint(v37);
          v32.i32[0] = (uint64_t)rint(v36);
          v32.i32[1] = v31;
          v32.i64[1] = __PAIR64__((uint64_t)rint(v39), (uint64_t)rint(v38));
          *(int16x4_t *)&a3[v27] = vqmovn_s32(v32);
          v27 += 4;
          uint64_t v30 = v33 + 4;
          uint64_t v29 = v34 + 4;
        }
        while (v27 <= (a6 - 4));
        if ((int)v27 < a6)
        {
          if ((int)v10 <= 1)
          {
            do
            {
              uint64_t v46 = (uint64_t)rint(v7 + v24 * result[v33]);
              if ((int)v46 <= -32768) {
                LODWORD(v46) = -32768;
              }
              if ((int)v46 >= 0x7FFF) {
                LOWORD(v46) = 0x7FFF;
              }
              *v34++ = v46;
              ++v33;
            }
            while (v33 < a6);
          }
          else
          {
            do
            {
              double v43 = v7 + v24 * result[v33];
              uint64_t v44 = 8;
              do
              {
                double v43 = v43 + v6[(unint64_t)v44 / 8] * a2[(unint64_t)v44 / 8][v33];
                v44 += 8;
              }
              while (v25 != v44);
              uint64_t v45 = (uint64_t)rint(v43);
              if ((int)v45 <= -32768) {
                LODWORD(v45) = -32768;
              }
              if ((int)v45 >= 0x7FFF) {
                LOWORD(v45) = 0x7FFF;
              }
              a3[v33++] = v45;
            }
            while (v33 < a6);
          }
        }
        a3 = (_WORD *)((char *)a3 + v9);
        ++a2;
        int v8 = v28 - 1;
        int v26 = (_WORD *)((char *)v26 + v9);
      }
      while (v28);
    }
    else if (a6 >= 1)
    {
      double v11 = *v6;
      if ((int)v10 <= 1)
      {
        uint64_t v47 = a3 + 2;
        do
        {
          uint64_t v48 = *a2;
          uint64_t v49 = (uint64_t)rint(v7 + v11 * **a2);
          if ((int)v49 <= -32768) {
            LODWORD(v49) = -32768;
          }
          if ((int)v49 >= 0x7FFF) {
            LOWORD(v49) = 0x7FFF;
          }
          *(v47 - 2) = v49;
          if (a6 != 1)
          {
            uint64_t v50 = (uint64_t)rint(v7 + v11 * v48[1]);
            if ((int)v50 <= -32768) {
              LODWORD(v50) = -32768;
            }
            if ((int)v50 >= 0x7FFF) {
              LOWORD(v50) = 0x7FFF;
            }
            *(v47 - 1) = v50;
            if (a6 != 2)
            {
              uint64_t v51 = (uint64_t)rint(v7 + v11 * v48[2]);
              if ((int)v51 <= -32768) {
                LODWORD(v51) = -32768;
              }
              if ((int)v51 >= 0x7FFF) {
                LOWORD(v51) = 0x7FFF;
              }
              *uint64_t v47 = v51;
            }
          }
          ++a2;
          uint64_t v47 = (_WORD *)((char *)v47 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        uint64_t v12 = 8 * v10;
        do
        {
          int v13 = v8;
          uint64_t v14 = *a2;
          double v15 = v7 + v11 * **a2;
          uint64_t v16 = 8;
          do
          {
            double v15 = v15 + v6[(unint64_t)v16 / 8] * *a2[(unint64_t)v16 / 8];
            v16 += 8;
          }
          while (v12 != v16);
          uint64_t v17 = (uint64_t)rint(v15);
          if ((int)v17 <= -32768) {
            LODWORD(v17) = -32768;
          }
          if ((int)v17 >= 0x7FFF) {
            LOWORD(v17) = 0x7FFF;
          }
          *a3 = v17;
          if (a6 != 1)
          {
            double v18 = v7 + v11 * v14[1];
            uint64_t v19 = 8;
            do
            {
              double v18 = v18 + v6[(unint64_t)v19 / 8] * a2[(unint64_t)v19 / 8][1];
              v19 += 8;
            }
            while (v12 != v19);
            uint64_t v20 = (uint64_t)rint(v18);
            if ((int)v20 <= -32768) {
              LODWORD(v20) = -32768;
            }
            if ((int)v20 >= 0x7FFF) {
              LOWORD(v20) = 0x7FFF;
            }
            a3[1] = v20;
            if (a6 != 2)
            {
              double v21 = v7 + v11 * v14[2];
              uint64_t v22 = 8;
              do
              {
                double v21 = v21 + v6[(unint64_t)v22 / 8] * a2[(unint64_t)v22 / 8][2];
                v22 += 8;
              }
              while (v12 != v22);
              uint64_t v23 = (uint64_t)rint(v21);
              if ((int)v23 <= -32768) {
                LODWORD(v23) = -32768;
              }
              if ((int)v23 >= 0x7FFF) {
                LOWORD(v23) = 0x7FFF;
              }
              a3[2] = v23;
            }
          }
          a3 = (_WORD *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v13);
      }
    }
  }
  return result;
}

uint64_t sub_10034337C(uint64_t a1)
{
  *(void *)a1 = off_10049A560;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100343430()
{
}

uint64_t sub_100343444(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003434C4(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A5E8;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v16 = *(void **)(a2 + 72);
        uint64_t v17 = *(void **)(a1 + 88);
        *uint64_t v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v22) = 33619968;
  uint64_t v23 = a1 + 16;
  uint64_t v24 = 0;
  sub_10025401C(a2, (uint64_t)&v22);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    qmemcpy((void *)sub_1002D19D8(&v22, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v22, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100343714(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100343748(uint64_t a1)
{
  *(void *)a1 = off_10049A5E8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_1003437F8(uint64_t a1)
{
  *(void *)a1 = off_10049A5E8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_1003438C8(uint64_t result, float **a2, float *a3, int a4, int a5, int a6, double a7)
{
  if (!a5) {
    return result;
  }
  double v7 = *(float **)(result + 32);
  LODWORD(a7) = *(_DWORD *)(result + 116);
  int v8 = a5 - 1;
  uint64_t v9 = a4;
  uint64_t v10 = *(unsigned int *)(result + 8);
  if (a6 <= 3)
  {
    if (a6 >= 1)
    {
      if ((int)v10 > 1)
      {
        do
        {
          int v12 = v8;
          uint64_t v13 = *a2;
          float v14 = *(float *)&a7 + (float)(*v7 * **a2);
          for (uint64_t i = 1; i != v10; ++i)
            float v14 = v14 + (float)(v7[i] * *a2[i]);
          *a3 = v14;
          if (a6 != 1)
          {
            float v16 = *(float *)&a7 + (float)(*v7 * v13[1]);
            for (uint64_t j = 1; j != v10; ++j)
              float v16 = v16 + (float)(v7[j] * a2[j][1]);
            a3[1] = v16;
            if (a6 != 2)
            {
              float v18 = *(float *)&a7 + (float)(*v7 * v13[2]);
              for (uint64_t k = 1; k != v10; ++k)
                float v18 = v18 + (float)(v7[k] * a2[k][2]);
              a3[2] = v18;
            }
          }
          a3 = (float *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v12);
      }
      else
      {
        uint64_t v11 = a3 + 2;
        do
        {
          float v20 = *a2;
          *(v11 - 2) = *(float *)&a7 + (float)(*v7 * **a2);
          if (a6 != 1)
          {
            *(v11 - 1) = *(float *)&a7 + (float)(*v7 * v20[1]);
            if (a6 != 2) {
              float *v11 = *(float *)&a7 + (float)(*v7 * v20[2]);
            }
          }
          ++a2;
          uint64_t v11 = (float *)((char *)v11 + a4);
          --a5;
        }
        while (a5);
      }
    }
    return result;
  }
  unint64_t v21 = (a6 - 4);
  if ((int)v10 <= 1)
  {
    uint64_t v31 = 0;
    if ((unint64_t)(v21 & 0xFFFFFFFC) + 5 <= a6) {
      uint64_t v32 = a6;
    }
    else {
      uint64_t v32 = (v21 & 0xFFFFFFFC) + 5;
    }
    uint64_t v33 = (4 * v21) & 0x3FFFFFFF0;
    uint64_t v34 = 4 * v32 - v33;
    float v35 = v7 + 1;
    unint64_t v36 = v32 - (v21 & 0xFFFFFFFC) - 4;
    uint64_t v37 = v33 + 16;
    uint64_t v80 = (v21 >> 2) + 1;
    uint64_t result = v80 & 0x7FFFFFFC;
    float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = a3;
    while (1)
    {
      int v41 = v8;
      uint64_t v42 = v31 * v9;
      double v43 = *a2;
      if (v21 < 0xC) {
        break;
      }
      unint64_t v44 = 0;
      uint64_t v47 = (float *)((char *)a3 + v37 + v42);
      BOOL v49 = v40 < (float *)((char *)v43 + v37) && v43 < v47;
      uint64_t v46 = 4;
      uint64_t v45 = 0;
      if (v7 < v47 && v40 < v35) {
        goto LABEL_54;
      }
      if (v49) {
        goto LABEL_54;
      }
      uint64_t v51 = 0;
      uint64_t v52 = v80 & 0x7FFFFFFC;
      do
      {
        int v53 = &v43[v51];
        float32x4x4_t v81 = vld4q_f32(v53);
        v82.val[0] = vmlaq_n_f32(v38, v81.val[0], *v7);
        v82.val[1] = vmlaq_n_f32(v38, v81.val[1], *v7);
        v82.val[2] = vmlaq_n_f32(v38, v81.val[2], *v7);
        v82.val[3] = vmlaq_n_f32(v38, v81.val[3], *v7);
        float v54 = &v40[v51];
        vst4q_f32(v54, v82);
        v51 += 16;
        v52 -= 4;
      }
      while (v52);
      unint64_t v44 = v80 & 0x7FFFFFFC;
      uint64_t v46 = (16 * ((v44 >> 2) & 0x1FFFFFFF)) | 4;
      uint64_t v45 = 4 * v44;
      unint64_t v55 = v44 - 1;
      uint64_t v56 = v45;
      int v57 = 4 * (v80 & 0x7FFFFFFC);
      if (v80 != result) {
        goto LABEL_54;
      }
LABEL_57:
      if (v57 < a6)
      {
        if (v36 >= 0x10)
        {
          uint64_t v67 = 4 * v55;
          int16x8_t v68 = (char *)&a3[v67 + 4] + v42;
          int32x4_t v69 = (float *)((char *)a3 + v34 + v42 + v67 * 4);
          int64x2_t v70 = &v43[v67];
          unint64_t v71 = (unint64_t)&v43[v67 + 4];
          BOOL v73 = v68 < (char *)v70 + v34 && v71 < (unint64_t)v69;
          if (v7 >= v69 || v68 >= (char *)v35)
          {
            if (v73)
            {
              unint64_t v66 = v56;
            }
            else
            {
              unint64_t v66 = v56 + v39;
              float32x4_t v75 = vld1q_dup_f32(v7);
              uint64_t v76 = v56;
              unint64_t v77 = v36 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                float32x4_t v78 = vmlaq_f32(v38, *(float32x4_t *)&v43[v76 + 4], v75);
                uint64_t v79 = (float32x4_t *)&v40[v76];
                *uint64_t v79 = vmlaq_f32(v38, *(float32x4_t *)&v43[v76], v75);
                v79[1] = v78;
                v76 += 8;
                v77 -= 8;
              }
              while (v77);
              if (v36 == v39) {
                goto LABEL_36;
              }
            }
          }
          else
          {
            unint64_t v66 = v56;
          }
        }
        else
        {
          unint64_t v66 = v56;
        }
        do
        {
          v40[v66] = *(float *)&a7 + (float)(*v7 * v43[v66]);
          ++v66;
        }
        while (v66 < a6);
      }
LABEL_36:
      uint64_t v40 = (float *)((char *)v40 + v9);
      ++a2;
      int v8 = v41 - 1;
      ++v31;
      if (!v41) {
        return result;
      }
    }
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 4;
LABEL_54:
    uint64_t v58 = 0;
    unint64_t v55 = v44 - 1;
    uint64_t v59 = v45;
    int v60 = v43 + 2;
    do
    {
      float v61 = *(float *)&a7 + (float)(*v7 * v60[v59 - 1]);
      float v62 = *(float *)&a7 + (float)(*v7 * v60[v59]);
      float v63 = *(float *)&a7 + (float)(*v7 * v60[v59 + 1]);
      unint64_t v64 = &v40[v59];
      *unint64_t v64 = *(float *)&a7 + (float)(*v7 * v43[v59]);
      uint64_t v65 = (uint64_t)&v40[v45 + v58];
      *(float *)(v65 + 4) = v61;
      *(float *)(v65 + 8) = v62;
      v64[3] = v63;
      ++v55;
      v58 += 4;
      int v57 = v45 + v58;
      v59 += 4;
    }
    while (v45 + v58 <= v21);
    uint64_t v56 = v46 + v58 - 4;
    goto LABEL_57;
  }
  float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  do
  {
    unint64_t v23 = 0;
    int v24 = v8;
    uint64_t v25 = *a2;
    uint64_t v26 = 4;
    do
    {
      unint64_t v27 = v26;
      float32x4_t v28 = vmlaq_n_f32(v22, *(float32x4_t *)&v25[v23], *v7);
      for (uint64_t result = 1; result != v10; ++result)
        float32x4_t v28 = vmlaq_n_f32(v28, *(float32x4_t *)&a2[result][v23], v7[result]);
      *(float32x4_t *)&a3[v23] = v28;
      v23 += 4;
      v26 += 4;
    }
    while (v23 <= v21);
    if ((int)v23 < a6)
    {
      do
      {
        float v29 = *(float *)&a7 + (float)(*v7 * v25[v27]);
        for (uint64_t m = 1; m != v10; ++m)
          float v29 = v29 + (float)(v7[m] * a2[m][v27]);
        a3[v27++] = v29;
      }
      while (v27 < a6);
    }
    a3 = (float *)((char *)a3 + a4);
    ++a2;
    --v8;
  }
  while (v24);
  return result;
}

uint64_t sub_100343DA4(uint64_t a1)
{
  *(void *)a1 = off_10049A5E8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100343E58()
{
}

uint64_t sub_100343E6C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100343EEC(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A670;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        float v16 = *(void **)(a2 + 72);
        uint64_t v17 = *(void **)(a1 + 88);
        *uint64_t v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v21) = 33619968;
  uint64_t v22 = a1 + 16;
  uint64_t v23 = 0;
  sub_10025401C(a2, (uint64_t)&v21);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(double *)(a1 + 120) = a4;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 6 || v19 != 1 && v18 != 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    qmemcpy((void *)sub_1002D19D8(&v21, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v21, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100344138(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10034416C(uint64_t a1)
{
  *(void *)a1 = off_10049A670;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034421C(uint64_t a1)
{
  *(void *)a1 = off_10049A670;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_1003442EC(uint64_t result, double **a2, double *a3, int a4, int a5, int a6)
{
  if (!a5) {
    return result;
  }
  uint64_t v6 = *(double **)(result + 32);
  uint64_t v7 = *(uint64_t *)(result + 120);
  int v8 = a5 - 1;
  int v9 = *(_DWORD *)(result + 8);
  if (a6 <= 3)
  {
    if (a6 >= 1)
    {
      if (v9 <= 1)
      {
        int8x16_t v87 = a3 + 2;
        do
        {
          unint64_t v88 = *a2;
          *(v87 - 2) = *(double *)&v7 + *v6 * **a2;
          if (a6 != 1)
          {
            *(v87 - 1) = *(double *)&v7 + *v6 * v88[1];
            if (a6 != 2) {
              *int8x16_t v87 = *(double *)&v7 + *v6 * v88[2];
            }
          }
          ++a2;
          int8x16_t v87 = (double *)((char *)v87 + a4);
          --a5;
        }
        while (a5);
      }
      else
      {
        uint64_t v10 = 8 * *(unsigned int *)(result + 8);
        do
        {
          int v11 = v8;
          uint64_t v12 = *a2;
          double v13 = *(double *)&v7 + *v6 * **a2;
          uint64_t v14 = 8;
          do
          {
            double v13 = v13 + v6[(unint64_t)v14 / 8] * *a2[(unint64_t)v14 / 8];
            v14 += 8;
          }
          while (v10 != v14);
          *a3 = v13;
          if (a6 != 1)
          {
            double v15 = *(double *)&v7 + *v6 * v12[1];
            uint64_t v16 = 8;
            do
            {
              double v15 = v15 + v6[(unint64_t)v16 / 8] * a2[(unint64_t)v16 / 8][1];
              v16 += 8;
            }
            while (v10 != v16);
            a3[1] = v15;
            if (a6 != 2)
            {
              double v17 = *(double *)&v7 + *v6 * v12[2];
              uint64_t v18 = 8;
              do
              {
                double v17 = v17 + v6[(unint64_t)v18 / 8] * a2[(unint64_t)v18 / 8][2];
                v18 += 8;
              }
              while (v10 != v18);
              a3[2] = v17;
            }
          }
          a3 = (double *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v11);
      }
    }
    return result;
  }
  unint64_t v19 = (a6 - 4);
  if (v9 <= 1)
  {
    uint64_t v36 = 0;
    if ((unint64_t)(v19 & 0xFFFFFFFC) + 5 <= a6) {
      uint64_t v37 = a6;
    }
    else {
      uint64_t v37 = (v19 & 0xFFFFFFFC) + 5;
    }
    uint64_t v38 = (8 * v19) & 0x7FFFFFFE0;
    uint64_t v39 = 8 * v37 - v38;
    uint64_t v40 = v6 + 1;
    unint64_t v41 = v37 - (v19 & 0xFFFFFFFC) - 4;
    uint64_t v42 = v38 + 32;
    uint64_t v43 = (v19 >> 2) + 1;
    uint64_t result = v43 & 0x7FFFFFFE;
    float64x2_t v44 = (float64x2_t)vdupq_lane_s64(v7, 0);
    uint64_t v89 = v37 & 3;
    uint64_t v45 = a3;
    while (1)
    {
      int v46 = v8;
      uint64_t v47 = v36 * a4;
      uint64_t v48 = *a2;
      if (v19 < 0xC) {
        break;
      }
      uint64_t v49 = 0;
      uint64_t v52 = (double *)((char *)a3 + v42 + v47);
      BOOL v54 = v45 < (double *)((char *)v48 + v42) && v48 < v52;
      uint64_t v51 = 4;
      uint64_t v50 = 0;
      if (v6 < v52 && v45 < v40) {
        goto LABEL_50;
      }
      if (v54) {
        goto LABEL_50;
      }
      uint64_t v56 = 0;
      uint64_t v57 = v43 & 0x7FFFFFFE;
      do
      {
        uint64_t v58 = &v48[v56];
        float64x2x4_t v90 = vld4q_f64(v58);
        v91.val[0] = vmlaq_n_f64(v44, v90.val[0], *v6);
        v91.val[1] = vmlaq_n_f64(v44, v90.val[1], *v6);
        v91.val[2] = vmlaq_n_f64(v44, v90.val[2], *v6);
        v91.val[3] = vmlaq_n_f64(v44, v90.val[3], *v6);
        uint64_t v59 = &v45[v56];
        vst4q_f64(v59, v91);
        v56 += 8;
        v57 -= 2;
      }
      while (v57);
      uint64_t v49 = v43 & 0x7FFFFFFE;
      uint64_t v60 = v49 - 1;
      uint64_t v51 = (4 * v43) | 4;
      uint64_t v50 = 4 * v49;
      uint64_t v61 = v50;
      int v62 = 4 * (v43 & 0x7FFFFFFE);
      if (v43 != result) {
        goto LABEL_50;
      }
LABEL_53:
      if (v62 < a6)
      {
        if (v41 >= 0xE)
        {
          uint64_t v72 = v47 + 32;
          uint64_t v73 = v39 + v47;
          uint64_t v74 = 4 * v60;
          float32x4_t v75 = (char *)&a3[4 * v60] + v72;
          uint64_t v76 = (double *)((char *)a3 + v73 + v74 * 8);
          unint64_t v77 = &v48[v74];
          unint64_t v78 = (unint64_t)&v48[v74 + 4];
          BOOL v80 = v75 < (char *)v77 + v39 && v78 < (unint64_t)v76;
          if (v6 >= v76 || v75 >= (char *)v40)
          {
            if (v80)
            {
              unint64_t v71 = v61;
            }
            else
            {
              unint64_t v71 = v61 + v41 - v89;
              float64x2_t v82 = vld1q_dup_f64(v6);
              uint64_t v83 = v61;
              unint64_t v84 = v41 - v89;
              do
              {
                float64x2_t v85 = vmlaq_f64(v44, *(float64x2_t *)&v48[v83 + 2], v82);
                unint64_t v86 = (float64x2_t *)&v45[v83];
                *unint64_t v86 = vmlaq_f64(v44, *(float64x2_t *)&v48[v83], v82);
                v86[1] = v85;
                v83 += 4;
                v84 -= 4;
              }
              while (v84);
              if (!v89) {
                goto LABEL_32;
              }
            }
          }
          else
          {
            unint64_t v71 = v61;
          }
        }
        else
        {
          unint64_t v71 = v61;
        }
        do
        {
          v45[v71] = *(double *)&v7 + *v6 * v48[v71];
          ++v71;
        }
        while (v71 < a6);
      }
LABEL_32:
      uint64_t v45 = (double *)((char *)v45 + a4);
      ++a2;
      int v8 = v46 - 1;
      ++v36;
      if (!v46) {
        return result;
      }
    }
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 4;
LABEL_50:
    uint64_t v63 = 0;
    uint64_t v60 = v49 - 1;
    uint64_t v64 = v50;
    uint64_t v65 = v48 + 2;
    do
    {
      double v66 = *(double *)&v7 + *v6 * v65[v64 - 1];
      double v67 = *(double *)&v7 + *v6 * v65[v64];
      double v68 = *(double *)&v7 + *v6 * v65[v64 + 1];
      int32x4_t v69 = &v45[v64];
      *int32x4_t v69 = *(double *)&v7 + *v6 * v48[v64];
      uint64_t v70 = (uint64_t)&v45[v50 + v63];
      *(double *)(v70 + 8) = v66;
      *(double *)(v70 + 16) = v67;
      v69[3] = v68;
      ++v60;
      v63 += 4;
      int v62 = v50 + v63;
      v64 += 4;
    }
    while (v50 + v63 <= v19);
    uint64_t v61 = v51 + v63 - 4;
    goto LABEL_53;
  }
  float64x2_t v20 = (float64x2_t)vdupq_lane_s64(v7, 0);
  uint64_t v21 = 8 * *(unsigned int *)(result + 8);
  do
  {
    unint64_t v22 = 0;
    int v23 = v8;
    int v24 = *a2;
    uint64_t v25 = 4;
    do
    {
      unint64_t v26 = v25;
      unint64_t v27 = &v24[v22];
      double v28 = *(double *)&v7 + *v6 * *v27;
      float64x2_t v29 = vmlaq_n_f64(v20, *(float64x2_t *)(v27 + 1), *v6);
      double v30 = *(double *)&v7 + *v6 * v27[3];
      uint64_t v31 = 8;
      do
      {
        uint64_t v32 = (uint64_t)&a2[(unint64_t)v31 / 8][v22];
        double v33 = v6[(unint64_t)v31 / 8];
        double v28 = v28 + v33 * *(double *)v32;
        float64x2_t v29 = vmlaq_n_f64(v29, *(float64x2_t *)(v32 + 8), v33);
        double v30 = v30 + v33 * *(double *)(v32 + 24);
        v31 += 8;
      }
      while (v21 != v31);
      a3[v22] = v28;
      uint64_t result = (8 * v22) | 8;
      *(float64x2_t *)((char *)a3 + result) = v29;
      *(double *)((char *)a3 + ((8 * v22) | 0x18)) = v30;
      v22 += 4;
      uint64_t v25 = v26 + 4;
    }
    while (v22 <= v19);
    if ((int)v22 < a6)
    {
      do
      {
        double v34 = *(double *)&v7 + *v6 * v24[v26];
        uint64_t v35 = 8;
        do
        {
          double v34 = v34 + v6[(unint64_t)v35 / 8] * a2[(unint64_t)v35 / 8][v26];
          v35 += 8;
        }
        while (v21 != v35);
        a3[v26++] = v34;
      }
      while (v26 < a6);
    }
    a3 = (double *)((char *)a3 + a4);
    ++a2;
    --v8;
  }
  while (v23);
  return result;
}

uint64_t sub_100344808(uint64_t a1)
{
  *(void *)a1 = off_10049A670;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_1003448BC()
{
}

uint64_t sub_1003448D0(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100344950(uint64_t a1, uint64_t a2, int a3, int a4, void *a5, uint64_t a6, double a7)
{
  uint64_t v8 = sub_100344A1C(a1, a2, a3, a4, a5, a6, a7);
  *(void *)uint64_t v8 = off_10049A6F8;
  if (*(_DWORD *)(v8 + 8) != 3)
  {
    v10[0] = 0;
    v10[1] = 0;
    *(_OWORD *)sub_1002D19D8(v10, 16) = *(_OWORD *)"this->ksize == 3";
    sub_1002D2278(-215, v10, "SymmColumnSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3420);
  }
  return a1;
}

void sub_1003449F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1003473E4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100344A1C(uint64_t a1, uint64_t a2, int a3, int a4, void *a5, uint64_t a6, double a7)
{
  uint64_t v9 = sub_100346FF0(a1, a2, a3, a5, a6, a7);
  *(void *)uint64_t v9 = off_10049A770;
  *(_DWORD *)(v9 + 228) = a4;
  if ((a4 & 3) == 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v11, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v11, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_100344AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1003473E4(v9);
  _Unwind_Resume(a1);
}

void sub_100344B00(uint64_t a1)
{
  sub_1003473E4(a1);

  operator delete();
}

int64_t sub_100344B38(int64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6 = (unsigned int *)(*(void *)(result + 32) + 4 * (*(_DWORD *)(result + 8) / 2));
  unsigned int v7 = *v6;
  if (*v6 == -2)
  {
    BOOL v11 = 0;
    BOOL v9 = 0;
    signed int v10 = v6[1];
    BOOL v8 = v10 == 1;
    if (!a5) {
      return result;
    }
LABEL_17:
    uint64_t v13 = *(void *)(result + 112);
    uint64_t v14 = (uint64_t *)(a2 + 8 * ((uint64_t)(*(_DWORD *)(result + 8) + (*(int *)(result + 8) < 0)) >> 1));
    int v15 = a5 - 1;
    uint64_t v431 = result + 120;
    int v432 = a6;
    unsigned int v16 = *(_DWORD *)(result + 224) + HIDWORD(v13);
    uint64_t v17 = a4;
    int64_t v18 = a6 - 4;
    uint64_t v19 = a6;
    uint64_t v428 = 4 * a6;
    uint64_t v430 = a4;
    if ((*(_DWORD *)(result + 228) & 1) == 0)
    {
      uint64_t v20 = 0;
      if (v9)
      {
        int32x4_t v21 = vdupq_n_s32(v13);
        int32x2_t v22 = vneg_s32(*(int32x2_t *)v21.i8);
        uint64_t v23 = a3;
        int32x4_t v505 = vdupq_n_s32(v16);
        int32x4_t v445 = vnegq_s32(v21);
        int32x2_t v435 = v22;
        while (1)
        {
          int v24 = v15;
          uint64_t v452 = a3 + v20 * v17;
          uint64_t result = sub_100347DDC(v431, v14, v23, a6);
          int32x4_t v25 = 0uLL;
          int32x4_t v26 = v505;
          uint64_t v28 = v14[1];
          ++v14;
          uint64_t v27 = v28;
          if (v10 >= 0) {
            uint64_t v29 = *(v14 - 2);
          }
          else {
            uint64_t v29 = v27;
          }
          if (v10 < 0) {
            uint64_t v27 = *(v14 - 2);
          }
          if ((int)result <= (int)v18)
          {
            uint64_t v30 = (int)result;
            unint64_t v31 = v18 - (int)result;
            if (v31 < 0x3C) {
              goto LABEL_44;
            }
            unint64_t v32 = v31 >> 2;
            unint64_t v33 = v452 + 4 + (v31 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
            uint64_t v34 = 4 * (int)result;
            unint64_t v35 = v34 + 16 * (v31 >> 2);
            unint64_t v36 = v29 + v35 + 16;
            BOOL v37 = v23 + (int)result >= v27 + v35 + 16 || v27 + v34 >= v33;
            BOOL v38 = !v37;
            BOOL v39 = v29 + v34 >= v33 || v23 + (int)result >= v36;
            if (!v39 || v38)
            {
LABEL_44:
              uint64_t result = (int)result;
LABEL_45:
              unint64_t v55 = (int32x2_t *)(v29 + 4 * result + 8);
              uint64_t v56 = (int32x2_t *)(v27 + 4 * result + 8);
              do
              {
                uint64_t v57 = (unsigned char *)(v23 + result);
                int32x2_t v58 = vmin_s32(vmax_s32(vshl_s32(vsub_s32(vadd_s32(*(int32x2_t *)v26.i8, v56[-1]), v55[-1]), v22), 0), (int32x2_t)0xFF000000FFLL);
                v57[1] = v58.i8[4];
                *uint64_t v57 = v58.i8[0];
                int32x2_t v59 = *v56;
                v56 += 2;
                int32x2_t v60 = v59;
                int32x2_t v61 = *v55;
                v55 += 2;
                int32x2_t v62 = vmin_s32(vmax_s32(vshl_s32(vsub_s32(vadd_s32(*(int32x2_t *)v26.i8, v60), v61), v22), 0), (int32x2_t)0xFF000000FFLL);
                v57[3] = v62.i8[4];
                void v57[2] = v62.i8[0];
                result += 4;
              }
              while (result <= v18);
              goto LABEL_47;
            }
            unint64_t v40 = v32 + 1;
            uint64_t result = (int)result + 4 * (v40 & 0x7FFFFFFFFFFFFFF0);
            unint64_t v41 = (const float *)(v27 + v34);
            uint64_t v42 = (const float *)(v29 + v34);
            uint64_t v43 = v40 & 0x7FFFFFFFFFFFFFF0;
            do
            {
              float64x2_t v44 = v41;
              float32x4x4_t v557 = vld4q_f32(v44);
              v44 += 16;
              uint64_t v45 = v41 + 32;
              int v46 = v41 + 48;
              float32x4x4_t v538 = vld4q_f32(v45);
              int32x4_t v471 = (int32x4_t)v538.val[1];
              int32x4_t v473 = (int32x4_t)v538.val[2];
              int32x4_t v475 = (int32x4_t)v538.val[3];
              int8x16x4_t v526 = (int8x16x4_t)vld4q_f32(v46);
              int32x4_t v502 = (int32x4_t)v526.val[1];
              int32x4_t v503 = (int32x4_t)v526.val[2];
              int32x4_t v504 = (int32x4_t)v526.val[3];
              float32x4x4_t v543 = vld4q_f32(v44);
              float32x4x4_t v481 = v543;
              uint64_t v47 = v42;
              int8x16x4_t v552 = (int8x16x4_t)vld4q_f32(v47);
              v47 += 16;
              uint64_t v48 = v42 + 32;
              uint64_t v49 = v42 + 48;
              int32x4_t v50 = vaddq_s32(v26, (int32x4_t)v557.val[0]);
              int8x16x4_t v544 = (int8x16x4_t)vld4q_f32(v48);
              float32x4x4_t v562 = vld4q_f32(v49);
              int32x4_t v51 = vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v526.val[0]), (int32x4_t)v562.val[0]), v445), (int32x4_t)0);
              v52.i64[0] = 0xFF000000FFLL;
              v52.i64[1] = 0xFF000000FFLL;
              v526.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(v50, (int32x4_t)v552.val[0]), v445), (int32x4_t)0), v52);
              v526.val[3] = (int8x16_t)vminq_s32(v51, v52);
              int32x4_t v53 = vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v538.val[0]), (int32x4_t)v544.val[0]), v445);
              float32x4x4_t v539 = vld4q_f32(v47);
              v526.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(v53, (int32x4_t)0), v52);
              v526.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v481.val[0]), (int32x4_t)v539.val[0]), v445), (int32x4_t)0), v52);
              v513.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v557.val[1]), (int32x4_t)v552.val[1]), v445), (int32x4_t)0), v52);
              v513.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, v502), (int32x4_t)v562.val[1]), v445), (int32x4_t)0), v52);
              v513.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, v471), (int32x4_t)v544.val[1]), v445), (int32x4_t)0), v52);
              v513.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v481.val[1]), (int32x4_t)v539.val[1]), v445), (int32x4_t)0), v52);
              v526.val[0] = vqtbl4q_s8(v526, (int8x16_t)xmmword_1004047C0);
              v526.val[1] = vqtbl4q_s8(v513, (int8x16_t)xmmword_1004047C0);
              v513.val[2] = (int8x16_t)vsubq_s32(vaddq_s32(v505, v473), (int32x4_t)v544.val[2]);
              v513.val[3] = (int8x16_t)vsubq_s32(vaddq_s32(v505, v475), (int32x4_t)v544.val[3]);
              v544.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v557.val[2]), (int32x4_t)v552.val[2]), v445), (int32x4_t)0), v52);
              v552.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, v503), (int32x4_t)v562.val[2]), v445), (int32x4_t)0), v52);
              v552.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v513.val[2], v445), (int32x4_t)0), v52);
              v544.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v481.val[2]), (int32x4_t)v539.val[2]), v445), (int32x4_t)0), v52);
              v526.val[2] = vqtbl4q_s8(v552, (int8x16_t)xmmword_1004047C0);
              int32x4_t v26 = v505;
              v544.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v557.val[3]), (int32x4_t)v552.val[3]), v445), (int32x4_t)0), v52);
              v544.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, v504), (int32x4_t)v562.val[3]), v445), (int32x4_t)0), v52);
              v544.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v513.val[3], v445), (int32x4_t)0), v52);
              v544.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v505, (int32x4_t)v481.val[3]), (int32x4_t)v539.val[3]), v445), (int32x4_t)0), v52);
              v526.val[3] = vqtbl4q_s8(v544, (int8x16_t)xmmword_1004047C0);
              BOOL v54 = (char *)(v23 + v30);
              vst4q_s8(v54, v526);
              v30 += 64;
              v41 += 64;
              v42 += 64;
              v43 -= 16;
            }
            while (v43);
            int32x4_t v25 = 0uLL;
            int32x2_t v22 = v435;
            if (v40 != (v40 & 0x7FFFFFFFFFFFFFF0)) {
              goto LABEL_45;
            }
          }
LABEL_47:
          a6 = v432;
          v63.i64[0] = 0xFF000000FFLL;
          v63.i64[1] = 0xFF000000FFLL;
          if ((int)result < v432)
          {
            uint64_t v64 = (int)result;
            unint64_t v65 = v19 - (int)result;
            if (v65 < 8)
            {
              uint64_t v66 = (int)result;
              goto LABEL_69;
            }
            unint64_t v67 = v452 + v19;
            unint64_t v68 = v23 + (int)result;
            uint64_t v69 = 4 * (int)result;
            uint64_t result = v27 + v428;
            BOOL v71 = v23 + v64 < (unint64_t)(v27 + v428) && v27 + v69 < v67;
            if (v29 + v69 < v67 && v68 < v29 + v428)
            {
              uint64_t v66 = v64;
              goto LABEL_69;
            }
            if (v71)
            {
              uint64_t v66 = v64;
              goto LABEL_69;
            }
            if (v65 >= 0x10)
            {
              unint64_t v73 = v65 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v84 = (int32x4_t *)(v27 + v69);
              float64x2_t v85 = (int32x4_t *)(v29 + v69);
              uint64_t v86 = v64;
              unint64_t v87 = v65 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int32x4_t v89 = v84[2];
                int32x4_t v88 = v84[3];
                int32x4_t v90 = *v84;
                int32x4_t v91 = v84[1];
                v84 += 4;
                v525.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v91), v85[1]), v445), v25), v63);
                v525.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v90), *v85), v445), v25), v63);
                v525.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v89), v85[2]), v445), v25), v63);
                v525.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v88), v85[3]), v445), v25), v63);
                *(int8x16_t *)(v23 + v86) = vqtbl4q_s8(v525, (int8x16_t)xmmword_1004047C0);
                v85 += 4;
                v86 += 16;
                v87 -= 16;
              }
              while (v87);
              if (v65 == v73) {
                goto LABEL_20;
              }
              if ((v65 & 8) == 0)
              {
                uint64_t v66 = v73 + v64;
                do
                {
LABEL_69:
                  int v82 = (int)(v16 + *(_DWORD *)(v27 + 4 * v66) - *(_DWORD *)(v29 + 4 * v66)) >> v13;
                  int v83 = v82 & ~(v82 >> 31);
                  if (v83 >= 255) {
                    LOBYTE(v83) = -1;
                  }
                  *(unsigned char *)(v23 + v66++) = v83;
                }
                while (v19 != v66);
                goto LABEL_20;
              }
            }
            else
            {
              unint64_t v73 = 0;
            }
            uint64_t v66 = (v65 & 0xFFFFFFFFFFFFFFF8) + v64;
            unint64_t v74 = v73 - (v65 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v75 = v73 + v64;
            uint64_t v76 = (int32x4_t *)(v27 + 4 * v75);
            unint64_t v77 = (int32x4_t *)(v29 + 4 * v75);
            do
            {
              int32x4_t v78 = *v76;
              int32x4_t v79 = v76[1];
              v76 += 2;
              int32x4_t v81 = *v77;
              int32x4_t v80 = v77[1];
              v77 += 2;
              v508.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v79), v80), v445), v25), v63);
              v508.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vsubq_s32(vaddq_s32(v26, v78), v81), v445), v25), v63);
              *(void *)(v23 + v75) = vqtbl2q_s8(v508, (int8x16_t)xmmword_1004047D0).u64[0];
              v75 += 8;
              v74 += 8;
            }
            while (v74);
            if (v65 != (v65 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_69;
            }
          }
LABEL_20:
          uint64_t v17 = v430;
          v23 += v430;
          int v15 = v24 - 1;
          ++v20;
          if (!v24) {
            return result;
          }
        }
      }
      int32x4_t v184 = vdupq_n_s32(v13);
      int32x2_t v185 = vneg_s32(*(int32x2_t *)v184.i8);
      uint64_t v186 = a3;
      int32x4_t v493 = vdupq_n_s32(v10);
      int32x4_t v482 = vdupq_n_s32(v16);
      int32x4_t v464 = vnegq_s32(v184);
      int32x2_t v455 = v185;
      while (1)
      {
        int v187 = v15;
        uint64_t v468 = a3 + v20 * v17;
        uint64_t result = sub_100347DDC(v431, v14, v186, a6);
        int32x4_t v188 = 0uLL;
        int32x4_t v189 = v482;
        int32x4_t v190 = v493;
        uint64_t v192 = v14[1];
        ++v14;
        uint64_t v191 = v192;
        uint64_t v193 = *(v14 - 2);
        if ((int)result > (int)v18) {
          goto LABEL_171;
        }
        uint64_t v194 = (int)result;
        unint64_t v195 = v18 - (int)result;
        if (v195 < 0x3C) {
          break;
        }
        unint64_t v196 = v195 >> 2;
        unint64_t v197 = v468 + 4 + (v195 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
        uint64_t v198 = 4 * (int)result;
        unint64_t v199 = v198 + 16 * (v195 >> 2);
        unint64_t v200 = v191 + v199 + 16;
        BOOL v201 = v186 + (int)result >= v193 + v199 + 16 || v193 + v198 >= v197;
        BOOL v202 = !v201;
        BOOL v203 = v191 + v198 >= v197 || v186 + (int)result >= v200;
        if (!v203 || v202) {
          break;
        }
        unint64_t v204 = v196 + 1;
        uint64_t result = (int)result + 4 * (v204 & 0x7FFFFFFFFFFFFFF0);
        unint64_t v205 = (const float *)(v191 + v198);
        unint64_t v206 = (const float *)(v193 + v198);
        uint64_t v207 = v204 & 0x7FFFFFFFFFFFFFF0;
        v208.i64[0] = 0xFF000000FFLL;
        v208.i64[1] = 0xFF000000FFLL;
        do
        {
          unint64_t v209 = v205;
          float32x4x4_t v517 = vld4q_f32(v209);
          v209 += 16;
          float32x4x4_t v507 = v517;
          unint64_t v210 = v205 + 32;
          BOOL v211 = v205 + 48;
          float32x4x4_t v546 = vld4q_f32(v210);
          int8x16x4_t v528 = (int8x16x4_t)vld4q_f32(v211);
          int8x16x4_t v558 = (int8x16x4_t)vld4q_f32(v209);
          BOOL v212 = v206;
          float32x4x4_t v554 = vld4q_f32(v212);
          v212 += 16;
          BOOL v213 = v206 + 32;
          BOOL v214 = v206 + 48;
          float32x4x4_t v563 = vld4q_f32(v213);
          float32x4x4_t v540 = vld4q_f32(v214);
          float32x4x4_t v518 = vld4q_f32(v212);
          int32x4_t v215 = vsubq_s32((int32x4_t)v558.val[0], (int32x4_t)v518.val[0]);
          int32x4_t v499 = vsubq_s32((int32x4_t)v558.val[1], (int32x4_t)v518.val[1]);
          int32x4_t v216 = vsubq_s32((int32x4_t)v558.val[2], (int32x4_t)v518.val[2]);
          v518.val[0] = (float32x4_t)vsubq_s32((int32x4_t)v558.val[3], (int32x4_t)v518.val[3]);
          v518.val[1] = (float32x4_t)vsubq_s32((int32x4_t)v546.val[0], (int32x4_t)v563.val[0]);
          v518.val[2] = (float32x4_t)vsubq_s32((int32x4_t)v546.val[1], (int32x4_t)v563.val[1]);
          v518.val[3] = (float32x4_t)vsubq_s32((int32x4_t)v546.val[2], (int32x4_t)v563.val[2]);
          v546.val[0] = (float32x4_t)vsubq_s32((int32x4_t)v546.val[3], (int32x4_t)v563.val[3]);
          int32x4_t v189 = v482;
          int32x4_t v190 = v493;
          v546.val[1] = (float32x4_t)vsubq_s32((int32x4_t)v528.val[0], (int32x4_t)v540.val[0]);
          v546.val[2] = (float32x4_t)vsubq_s32((int32x4_t)v528.val[1], (int32x4_t)v540.val[1]);
          v528.val[0] = (int8x16_t)vsubq_s32((int32x4_t)v528.val[3], (int32x4_t)v540.val[3]);
          int32x4_t v188 = 0uLL;
          v528.val[1] = (int8x16_t)vsubq_s32((int32x4_t)v507.val[0], (int32x4_t)v554.val[0]);
          v528.val[3] = (int8x16_t)vsubq_s32((int32x4_t)v507.val[2], (int32x4_t)v554.val[2]);
          v554.val[0] = (float32x4_t)vsubq_s32((int32x4_t)v507.val[3], (int32x4_t)v554.val[3]);
          v554.val[2] = (float32x4_t)vmlaq_s32(v482, (int32x4_t)v518.val[1], v493);
          v518.val[1] = (float32x4_t)vshlq_s32(vmlaq_s32(v482, (int32x4_t)v546.val[1], v493), v464);
          v546.val[1] = (float32x4_t)vmaxq_s32(vshlq_s32((int32x4_t)v554.val[2], v464), (int32x4_t)0);
          v554.val[2] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v528.val[1], v493), v464), (int32x4_t)0), v208);
          v558.val[1] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v518.val[1], (int32x4_t)0), v208);
          v558.val[0] = (int8x16_t)vminq_s32((int32x4_t)v546.val[1], v208);
          v558.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, vsubq_s32((int32x4_t)v507.val[1], (int32x4_t)v554.val[1]), v493), v464), (int32x4_t)0), v208);
          v563.val[1] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v546.val[2], v493), v464), (int32x4_t)0), v208);
          v563.val[0] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v518.val[2], v493), v464), (int32x4_t)0), v208);
          v554.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, v215, v493), v464), (int32x4_t)0), v208);
          v558.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, v499, v493), v464), (int32x4_t)0), v208);
          v554.val[1] = (float32x4_t)vqtbl4q_s8(v558, (int8x16_t)xmmword_1004047C0);
          v554.val[2] = (float32x4_t)vqtbl4q_s8(*(int8x16x4_t *)((char *)&v558 + 32), (int8x16_t)xmmword_1004047C0);
          v558.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v528.val[3], v493), v464), (int32x4_t)0), v208);
          v563.val[0] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, vsubq_s32((int32x4_t)v528.val[2], (int32x4_t)v540.val[2]), v493), v464), (int32x4_t)0), v208);
          v558.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v518.val[3], v493), v464), (int32x4_t)0), v208);
          v558.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, v216, v493), v464), (int32x4_t)0), v208);
          v554.val[3] = (float32x4_t)vqtbl4q_s8(*(int8x16x4_t *)((char *)&v558 + 16), (int8x16_t)xmmword_1004047C0);
          v518.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v554.val[0], v493), v464), (int32x4_t)0), v208);
          v528.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v528.val[0], v493), v464), (int32x4_t)0), v208);
          v528.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v546.val[0], v493), v464), (int32x4_t)0), v208);
          v528.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v482, (int32x4_t)v518.val[0], v493), v464), (int32x4_t)0), v208);
          v558.val[0] = vqtbl4q_s8(v528, (int8x16_t)xmmword_1004047C0);
          BOOL v217 = (char *)(v186 + v194);
          vst4q_s8(v217, v558);
          v194 += 64;
          v205 += 64;
          v206 += 64;
          v207 -= 16;
        }
        while (v207);
        int32x2_t v185 = v455;
        if (v204 != (v204 & 0x7FFFFFFFFFFFFFF0)) {
          goto LABEL_169;
        }
LABEL_171:
        a6 = v432;
        v226.i64[0] = 0xFF000000FFLL;
        v226.i64[1] = 0xFF000000FFLL;
        if ((int)result < v432)
        {
          uint64_t v227 = (int)result;
          unint64_t v228 = v19 - (int)result;
          if (v228 < 8)
          {
            uint64_t v229 = (int)result;
            goto LABEL_193;
          }
          unint64_t v230 = v468 + v19;
          unint64_t v231 = v186 + (int)result;
          uint64_t v232 = 4 * (int)result;
          uint64_t result = v193 + v428;
          BOOL v234 = v186 + v227 < (unint64_t)(v193 + v428) && v193 + v232 < v230;
          if (v191 + v232 < v230 && v231 < v191 + v428)
          {
            uint64_t v229 = v227;
            goto LABEL_193;
          }
          if (v234)
          {
            uint64_t v229 = v227;
            goto LABEL_193;
          }
          if (v228 >= 0x10)
          {
            unint64_t v236 = v228 & 0xFFFFFFFFFFFFFFF0;
            BOOL v248 = (int32x4_t *)(v191 + v232);
            BOOL v249 = (int32x4_t *)(v193 + v232);
            uint64_t v250 = v227;
            unint64_t v251 = v228 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v529.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v248[2], v249[2]), v190), v464), v188), v226);
              v529.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v248[1], v249[1]), v190), v464), v188), v226);
              v529.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(*v248, *v249), v190), v464), v188), v226);
              v529.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v248[3], v249[3]), v190), v464), v188), v226);
              *(int8x16_t *)(v186 + v250) = vqtbl4q_s8(v529, (int8x16_t)xmmword_1004047C0);
              v248 += 4;
              v249 += 4;
              v250 += 16;
              v251 -= 16;
            }
            while (v251);
            if (v228 == v236) {
              goto LABEL_149;
            }
            if ((v228 & 8) == 0)
            {
              uint64_t v229 = v236 + v227;
              do
              {
LABEL_193:
                int v246 = (int)(v16 + (*(_DWORD *)(v191 + 4 * v229) - *(_DWORD *)(v193 + 4 * v229)) * v10) >> v13;
                int v247 = v246 & ~(v246 >> 31);
                if (v247 >= 255) {
                  LOBYTE(v247) = -1;
                }
                *(unsigned char *)(v186 + v229++) = v247;
              }
              while (v19 != v229);
              goto LABEL_149;
            }
          }
          else
          {
            unint64_t v236 = 0;
          }
          uint64_t v229 = (v228 & 0xFFFFFFFFFFFFFFF8) + v227;
          unint64_t v237 = v236 - (v228 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v238 = v236 + v227;
          unint64_t v239 = (int32x4_t *)(v191 + 4 * v238);
          unint64_t v240 = (int32x4_t *)(v193 + 4 * v238);
          do
          {
            int32x4_t v242 = *v239;
            int32x4_t v241 = v239[1];
            v239 += 2;
            int32x4_t v244 = *v240;
            int32x4_t v243 = v240[1];
            v240 += 2;
            int32x4_t v245 = vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v242, v244), v190), v464), v188);
            v510.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(v189, vsubq_s32(v241, v243), v190), v464), v188), v226);
            v510.val[0] = (int8x16_t)vminq_s32(v245, v226);
            *(void *)(v186 + v238) = vqtbl2q_s8(v510, (int8x16_t)xmmword_1004047D0).u64[0];
            v238 += 8;
            v237 += 8;
          }
          while (v237);
          if (v228 != (v228 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_193;
          }
        }
LABEL_149:
        uint64_t v17 = v430;
        v186 += v430;
        int v15 = v187 - 1;
        ++v20;
        if (!v187) {
          return result;
        }
      }
      uint64_t result = (int)result;
LABEL_169:
      uint64_t v218 = (int32x2_t *)(v193 + 4 * result + 8);
      uint64_t v219 = (int32x2_t *)(v191 + 4 * result + 8);
      do
      {
        uint64_t v220 = (unsigned char *)(v186 + result);
        int32x2_t v221 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(*(int32x2_t *)v189.i8, vsub_s32(v219[-1], v218[-1]), *(int32x2_t *)v190.i8), v185), 0), (int32x2_t)0xFF000000FFLL);
        v220[1] = v221.i8[4];
        *uint64_t v220 = v221.i8[0];
        int32x2_t v222 = *v219;
        v219 += 2;
        int32x2_t v223 = v222;
        int32x2_t v224 = *v218;
        v218 += 2;
        int32x2_t v225 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(*(int32x2_t *)v189.i8, vsub_s32(v223, v224), *(int32x2_t *)v190.i8), v185), 0), (int32x2_t)0xFF000000FFLL);
        v220[3] = v225.i8[4];
        v220[2] = v225.i8[0];
        result += 4;
      }
      while (result <= v18);
      goto LABEL_171;
    }
    int32x4_t v506 = vdupq_n_s32(v16);
    int32x4_t v92 = vdupq_n_s32(v13);
    if (v11)
    {
      uint64_t v93 = 0;
      int32x4_t v498 = vnegq_s32(v92);
      int32x2_t v94 = vneg_s32(*(int32x2_t *)v92.i8);
      uint64_t v95 = a3;
      int32x2_t v426 = v94;
      while (1)
      {
        int v96 = v15;
        uint64_t v97 = a3 + v93 * v17;
        uint64_t result = sub_100347DDC(v431, v14, v95, a6);
        v98.i64[0] = 0xFF000000FFLL;
        v98.i64[1] = 0xFF000000FFLL;
        int32x4_t v99 = 0uLL;
        int32x4_t v100 = v506;
        uint64_t v101 = *(v14 - 1);
        uint64_t v102 = *v14;
        uint64_t v104 = v14[1];
        ++v14;
        uint64_t v103 = v104;
        if ((int)result > (int)v18) {
          goto LABEL_109;
        }
        uint64_t v105 = (int)result;
        unint64_t v106 = v18 - (int)result;
        if (v106 < 0x3C) {
          break;
        }
        unint64_t v107 = v106 >> 2;
        unint64_t v108 = v95 + (int)result;
        unint64_t v109 = v97 + 4 + (v106 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
        uint64_t v110 = 4 * (int)result;
        unint64_t v111 = v110 + 16 * (v106 >> 2);
        unint64_t v112 = v101 + v111 + 16;
        unint64_t v113 = v103 + v111 + 16;
        BOOL v114 = v108 >= v102 + v111 + 16 || v102 + 4 * (int)result >= v109;
        BOOL v115 = !v114;
        BOOL v116 = v108 >= v113 || v103 + 4 * (int)result >= v109;
        BOOL v117 = !v116;
        BOOL v118 = v101 + v110 >= v109 || v108 >= v112;
        if (!v118 || v115 || v117) {
          break;
        }
        unint64_t v119 = v107 + 1;
        uint64_t result = (int)result + 4 * (v119 & 0x7FFFFFFFFFFFFFF0);
        uint64x2_t v120 = (const float *)(v101 + v110);
        int8x8_t v121 = (const float *)(v102 + v110);
        float64x2_t v122 = (const float *)(v103 + v110);
        uint64_t v123 = v119 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          int8x8_t v124 = v120;
          float64x2_t v125 = v120 + 32;
          int8x8_t v126 = v120 + 48;
          float32x4x4_t v537 = vld4q_f32(v124);
          v124 += 16;
          float32x4x4_t v514 = vld4q_f32(v125);
          float32x4x4_t v492 = v514;
          int8x16x4_t v545 = (int8x16x4_t)vld4q_f32(v126);
          float32x4x4_t v515 = vld4q_f32(v124);
          float32x4x4_t v453 = v515;
          float64x2_t v127 = v121;
          float32x4x4_t v553 = vld4q_f32(v127);
          v127 += 16;
          int32x4_t v472 = (int32x4_t)v553.val[1];
          int32x4_t v474 = (int32x4_t)v553.val[2];
          int32x4_t v476 = (int32x4_t)v553.val[3];
          int8x8_t v128 = v121 + 32;
          int8x8_t v129 = v121 + 48;
          int8x16x4_t v516 = (int8x16x4_t)vld4q_f32(v128);
          int32x4_t v478 = (int32x4_t)v516.val[1];
          int32x4_t v479 = (int32x4_t)v516.val[2];
          int32x4_t v480 = (int32x4_t)v516.val[3];
          float32x4x4_t v561 = vld4q_f32(v129);
          int32x4_t v484 = (int32x4_t)v561.val[1];
          int32x4_t v487 = (int32x4_t)v561.val[2];
          int32x4_t v489 = (int32x4_t)v561.val[3];
          int32x4_t v446 = (int32x4_t)v537.val[2];
          int32x4_t v449 = (int32x4_t)v537.val[3];
          v516.val[1] = (int8x16_t)vaddq_s32(vaddq_s32(v100, (int32x4_t)v545.val[0]), vaddq_s32((int32x4_t)v561.val[0], (int32x4_t)v561.val[0]));
          *(float32x4x4_t *)((char *)&v553 + 16) = vld4q_f32(v127);
          int32x4_t v130 = vaddq_s32(vaddq_s32(v100, (int32x4_t)v492.val[0]), vaddq_s32((int32x4_t)v516.val[0], (int32x4_t)v516.val[0]));
          float64x2x4_t v131 = v122;
          uint64_t v132 = v122 + 48;
          float32x4x4_t v561 = vld4q_f32(v131);
          v131 += 16;
          int32x4_t v460 = v133;
          int8x16x4_t v516 = (int8x16x4_t)vld4q_f32(v132);
          uint64_t v134 = v122 + 32;
          int32x4_t v136 = (int32x4_t)v561.val[3];
          int32x4_t v441 = v137;
          int32x4_t v443 = (int32x4_t)v516.val[0];
          float32x4x4_t v535 = vld4q_f32(v134);
          int32x4_t v456 = (int32x4_t)v535.val[1];
          int32x4_t v458 = (int32x4_t)v535.val[2];
          v561.val[3].i64[0] = 0xFF000000FFLL;
          v561.val[3].i64[1] = 0xFF000000FFLL;
          v516.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, (int32x4_t)v537.val[0]), vaddq_s32((int32x4_t)v553.val[0], (int32x4_t)v553.val[0])), v135), v498), v99), (int32x4_t)v561.val[3]);
          v516.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32((int32x4_t)v516.val[1], (int32x4_t)v561.val[2]), v498), v99), (int32x4_t)v561.val[3]);
          int32x4_t v138 = vaddq_s32(v130, (int32x4_t)v535.val[0]);
          float32x4x4_t v535 = vld4q_f32(v131);
          int32x4_t v436 = (int32x4_t)v535.val[0];
          v516.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(v138, v498), (int32x4_t)0), (int32x4_t)v561.val[3]);
          v545.val[0].i64[0] = 0xFF000000FFLL;
          v545.val[0].i64[1] = 0xFF000000FFLL;
          v516.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, (int32x4_t)v453.val[0]), vaddq_s32((int32x4_t)v553.val[1], (int32x4_t)v553.val[1])), v139), v498), (int32x4_t)0), (int32x4_t)v545.val[0]);
          v535.val[0].i64[0] = 0xFF000000FFLL;
          v535.val[0].i64[1] = 0xFF000000FFLL;
          v537.val[2] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v537.val[1]), vaddq_s32(v472, v472)), v460), v498), (int32x4_t)0), (int32x4_t)v535.val[0]);
          int32x4_t v140 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v545.val[1]), vaddq_s32(v484, v484)), v136), v498), (int32x4_t)0), (int32x4_t)v535.val[0]);
          int32x4_t v141 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v492.val[1]), vaddq_s32(v478, v478)), v456), v498), (int32x4_t)0), (int32x4_t)v535.val[0]);
          v537.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v453.val[1]), vaddq_s32((int32x4_t)v553.val[2], (int32x4_t)v553.val[2])), v436), v498), (int32x4_t)0), (int32x4_t)v535.val[0]);
          v137.i64[0] = 0xFF000000FFLL;
          v137.i64[1] = 0xFF000000FFLL;
          v516.val[0] = vqtbl4q_s8(v516, (int8x16_t)xmmword_1004047C0);
          v516.val[1] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v537 + 32), (int8x16_t)xmmword_1004047C0);
          int32x4_t v99 = 0uLL;
          v545.val[0] = (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v545.val[2]), vaddq_s32(v487, v487)), v441);
          v545.val[1] = (int8x16_t)vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v545.val[3]), vaddq_s32(v489, v489)), v443);
          v545.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, v446), vaddq_s32(v474, v474)), (int32x4_t)v561.val[0]), v498), (int32x4_t)0), v137);
          v553.val[1] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v545.val[0], v498), (int32x4_t)0), v137);
          v553.val[0] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v492.val[2]), vaddq_s32(v479, v479)), v458), v498), (int32x4_t)0), v137);
          v545.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v453.val[2]), vaddq_s32((int32x4_t)v553.val[3], (int32x4_t)v553.val[3])), (int32x4_t)v535.val[1]), v498), (int32x4_t)0), v137);
          v516.val[2] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v545 + 32), (int8x16_t)xmmword_1004047C0);
          v98.i64[0] = 0xFF000000FFLL;
          v98.i64[1] = 0xFF000000FFLL;
          int32x4_t v100 = v506;
          v545.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, v449), vaddq_s32(v476, v476)), (int32x4_t)v561.val[1]), v498), (int32x4_t)0), v98);
          v545.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v545.val[1], v498), (int32x4_t)0), v98);
          v545.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v492.val[3]), vaddq_s32(v480, v480)), (int32x4_t)v535.val[3]), v498), (int32x4_t)0), v98);
          v545.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v506, (int32x4_t)v453.val[3]), vaddq_s32(v142, v142)), (int32x4_t)v535.val[2]), v498), (int32x4_t)0), v98);
          v516.val[3] = vqtbl4q_s8(v545, (int8x16_t)xmmword_1004047C0);
          float32x4_t v143 = (char *)(v95 + v105);
          vst4q_s8(v143, v516);
          v105 += 64;
          v120 += 64;
          v121 += 64;
          v122 += 64;
          v123 -= 16;
        }
        while (v123);
        int32x2_t v94 = v426;
        if (v119 != (v119 & 0x7FFFFFFFFFFFFFF0)) {
          goto LABEL_107;
        }
LABEL_109:
        a6 = v432;
        if ((int)result < v432)
        {
          uint64_t v155 = (int)result;
          unint64_t v156 = v19 - (int)result;
          if (v156 < 8)
          {
            uint64_t v157 = (int)result;
            goto LABEL_144;
          }
          unint64_t v158 = v97 + v19;
          unint64_t v159 = v95 + (int)result;
          uint64_t v160 = 4 * (int)result;
          uint64_t result = v101 + v160;
          BOOL v162 = v95 + v155 < (unint64_t)(v102 + v428) && v102 + 4 * v155 < v158;
          BOOL v164 = v159 < v103 + v428 && v103 + 4 * v155 < v158;
          if (result < v158 && v159 < v101 + v428)
          {
            uint64_t v157 = v155;
            goto LABEL_144;
          }
          if (v162)
          {
            uint64_t v157 = v155;
            do
            {
LABEL_144:
              int v182 = (int)(v16
                         + *(_DWORD *)(v101 + 4 * v157)
                         + 2 * *(_DWORD *)(v102 + 4 * v157)
                         + *(_DWORD *)(v103 + 4 * v157)) >> v13;
              int v183 = v182 & ~(v182 >> 31);
              if (v183 >= 255) {
                LOBYTE(v183) = -1;
              }
              *(unsigned char *)(v95 + v157++) = v183;
            }
            while (v19 != v157);
            goto LABEL_80;
          }
          if (v164)
          {
            uint64_t v157 = v155;
            goto LABEL_144;
          }
          if (v156 >= 0x10)
          {
            unint64_t v166 = v156 & 0xFFFFFFFFFFFFFFF0;
            unint64_t v167 = (int32x4_t *)(v101 + v160);
            unint64_t v168 = (int32x4_t *)(v102 + v160);
            unint64_t v169 = (int32x4_t *)(v103 + v160);
            uint64_t v170 = v155;
            uint64_t result = v156 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v527.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v167[1]), vaddq_s32(v168[1], v168[1])), v169[1]), v498), v99), v98);
              v527.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, *v167), vaddq_s32(*v168, *v168)), *v169), v498), v99), v98);
              v527.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v167[2]), vaddq_s32(v168[2], v168[2])), v169[2]), v498), v99), v98);
              v527.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v167[3]), vaddq_s32(v168[3], v168[3])), v169[3]), v498), v99), v98);
              *(int8x16_t *)(v95 + v170) = vqtbl4q_s8(v527, (int8x16_t)xmmword_1004047C0);
              v167 += 4;
              v168 += 4;
              v169 += 4;
              v170 += 16;
              result -= 16;
            }
            while (result);
            if (v156 == v166) {
              goto LABEL_80;
            }
            if ((v156 & 8) == 0)
            {
              uint64_t v157 = v166 + v155;
              goto LABEL_144;
            }
          }
          else
          {
            unint64_t v166 = 0;
          }
          uint64_t v157 = (v156 & 0xFFFFFFFFFFFFFFF8) + v155;
          unint64_t v171 = v166 - (v156 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v172 = v166 + v155;
          unint64_t v173 = (int32x4_t *)(v101 + 4 * v172);
          BOOL v174 = (int32x4_t *)(v102 + 4 * v172);
          uint64_t result = v103 + 4 * v172;
          do
          {
            int32x4_t v176 = *v173;
            int32x4_t v175 = v173[1];
            v173 += 2;
            int32x4_t v178 = *v174;
            int32x4_t v177 = v174[1];
            v174 += 2;
            int32x4_t v180 = *(int32x4_t *)result;
            int32x4_t v179 = *(int32x4_t *)(result + 16);
            result += 32;
            int32x4_t v181 = vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v176), vaddq_s32(v178, v178)), v180), v498), v99);
            v509.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v100, v175), vaddq_s32(v177, v177)), v179), v498), v99), v98);
            v509.val[0] = (int8x16_t)vminq_s32(v181, v98);
            *(void *)(v95 + v172) = vqtbl2q_s8(v509, (int8x16_t)xmmword_1004047D0).u64[0];
            v172 += 8;
            v171 += 8;
          }
          while (v171);
          if (v156 != (v156 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_144;
          }
        }
LABEL_80:
        uint64_t v17 = v430;
        v95 += v430;
        int v15 = v96 - 1;
        ++v93;
        if (!v96) {
          return result;
        }
      }
      uint64_t result = (int)result;
LABEL_107:
      int32x4_t v144 = (int32x2_t *)(v102 + 4 * result + 8);
      unsigned long long v145 = (int32x2_t *)(v103 + 4 * result + 8);
      int v146 = (int32x2_t *)(v101 + 4 * result + 8);
      do
      {
        int32x2_t v147 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vadd_s32(vadd_s32(*(int32x2_t *)v100.i8, v146[-1]), vadd_s32(v144[-1], v144[-1])), v145[-1]), v94), 0), (int32x2_t)0xFF000000FFLL);
        uint64_t v148 = (unsigned char *)(v95 + result);
        v148[1] = v147.i8[4];
        *uint64_t v148 = v147.i8[0];
        int32x2_t v149 = *v146;
        v146 += 2;
        int32x2_t v150 = v149;
        int32x2_t v151 = *v144;
        v144 += 2;
        int32x2_t v152 = vadd_s32(v151, v151);
        int32x2_t v153 = *v145;
        v145 += 2;
        int32x2_t v154 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vadd_s32(vadd_s32(*(int32x2_t *)v100.i8, v150), v152), v153), v94), 0), (int32x2_t)0xFF000000FFLL);
        v148[3] = v154.i8[4];
        result += 4;
        v148[2] = v154.i8[0];
      }
      while (result <= v18);
      goto LABEL_109;
    }
    if (v8)
    {
      uint64_t v252 = 0;
      int32x4_t v500 = vnegq_s32(v92);
      int32x2_t v253 = vneg_s32(*(int32x2_t *)v92.i8);
      uint64_t v254 = a3;
      int32x2_t v424 = v253;
      while (1)
      {
        int v255 = v15;
        uint64_t v256 = a3 + v252 * v17;
        uint64_t result = sub_100347DDC(v431, v14, v254, a6);
        v257.i64[0] = 0xFF000000FFLL;
        v257.i64[1] = 0xFF000000FFLL;
        int32x4_t v258 = 0uLL;
        int32x4_t v259 = v506;
        uint64_t v260 = *(v14 - 1);
        uint64_t v261 = *v14;
        uint64_t v263 = v14[1];
        ++v14;
        uint64_t v262 = v263;
        if ((int)result > (int)v18) {
          goto LABEL_233;
        }
        uint64_t v264 = (int)result;
        unint64_t v265 = v18 - (int)result;
        if (v265 < 0x3C) {
          break;
        }
        unint64_t v266 = v265 >> 2;
        unint64_t v267 = v254 + (int)result;
        unint64_t v268 = v256 + 4 + (v265 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
        uint64_t v269 = 4 * (int)result;
        unint64_t v270 = v269 + 16 * (v265 >> 2);
        unint64_t v271 = v260 + v270 + 16;
        unint64_t v272 = v262 + v270 + 16;
        BOOL v273 = v267 >= v261 + v270 + 16 || v261 + 4 * (int)result >= v268;
        BOOL v274 = !v273;
        BOOL v275 = v267 >= v272 || v262 + 4 * (int)result >= v268;
        BOOL v276 = !v275;
        BOOL v277 = v260 + v269 >= v268 || v267 >= v271;
        if (!v277 || v274 || v276) {
          break;
        }
        unint64_t v278 = v266 + 1;
        uint64_t result = (int)result + 4 * (v278 & 0x7FFFFFFFFFFFFFF0);
        unint64_t v279 = (const float *)(v260 + v269);
        unint64_t v280 = (const float *)(v261 + v269);
        uint64_t v281 = (const float *)(v262 + v269);
        uint64_t v282 = v278 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          unint64_t v283 = v279;
          unint64_t v284 = v279 + 32;
          BOOL v285 = v279 + 48;
          float32x4x4_t v564 = vld4q_f32(v283);
          v283 += 16;
          int8x16x4_t v519 = (int8x16x4_t)vld4q_f32(v284);
          int32x4_t v495 = (int32x4_t)v519.val[1];
          int32x4_t v496 = (int32x4_t)v519.val[2];
          int32x4_t v497 = (int32x4_t)v519.val[3];
          float32x4x4_t v547 = vld4q_f32(v285);
          int32x4_t v461 = (int32x4_t)v547.val[1];
          int32x4_t v462 = (int32x4_t)v547.val[2];
          int32x4_t v463 = (int32x4_t)v547.val[3];
          float32x4x4_t v530 = vld4q_f32(v283);
          float32x4x4_t v469 = v530;
          BOOL v286 = v280;
          float32x4x4_t v531 = vld4q_f32(v286);
          v286 += 16;
          BOOL v287 = v280 + 32;
          BOOL v288 = v280 + 48;
          float32x4x4_t v559 = vld4q_f32(v287);
          int32x4_t v457 = (int32x4_t)v559.val[1];
          float32x4x4_t v536 = vld4q_f32(v288);
          int32x4_t v466 = (int32x4_t)v536.val[1];
          int32x4_t v467 = (int32x4_t)v536.val[3];
          int32x4_t v454 = (int32x4_t)v564.val[3];
          v559.val[1] = v531.val[1];
          int32x4_t v447 = (int32x4_t)v531.val[2];
          int32x4_t v450 = (int32x4_t)v531.val[3];
          v519.val[1] = (int8x16_t)vsubq_s32(vaddq_s32(v259, (int32x4_t)v547.val[0]), vaddq_s32((int32x4_t)v536.val[0], (int32x4_t)v536.val[0]));
          int8x16x4_t v555 = (int8x16x4_t)vld4q_f32(v286);
          v531.val[1] = (float32x4_t)vsubq_s32(vaddq_s32(v259, (int32x4_t)v519.val[0]), vaddq_s32((int32x4_t)v559.val[0], (int32x4_t)v559.val[0]));
          BOOL v289 = v281;
          BOOL v290 = v281 + 48;
          float32x4x4_t v548 = vld4q_f32(v289);
          v289 += 16;
          int32x4_t v485 = (int32x4_t)v548.val[1];
          int32x4_t v488 = (int32x4_t)v548.val[2];
          int32x4_t v490 = (int32x4_t)v548.val[3];
          *(float32x4x4_t *)((char *)&v531 + 32) = vld4q_f32(v290);
          uint64_t v291 = v281 + 32;
          v519.val[2] = (int8x16_t)vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, (int32x4_t)v564.val[0]), vaddq_s32((int32x4_t)v531.val[0], (int32x4_t)v531.val[0])), (int32x4_t)v548.val[0]), v500);
          float32x4x4_t v549 = vld4q_f32(v291);
          int32x4_t v437 = (int32x4_t)v549.val[1];
          int32x4_t v438 = (int32x4_t)v549.val[2];
          int32x4_t v439 = (int32x4_t)v549.val[3];
          v531.val[0] = (float32x4_t)vmaxq_s32(vshlq_s32(vaddq_s32((int32x4_t)v519.val[1], (int32x4_t)v531.val[2]), v500), (int32x4_t)0);
          v519.val[0].i64[0] = 0xFF000000FFLL;
          v519.val[0].i64[1] = 0xFF000000FFLL;
          v519.val[0] = (int8x16_t)vminq_s32(vmaxq_s32((int32x4_t)v519.val[2], (int32x4_t)0), (int32x4_t)v519.val[0]);
          v531.val[2].i64[0] = 0xFF000000FFLL;
          v531.val[2].i64[1] = 0xFF000000FFLL;
          v519.val[3] = (int8x16_t)vminq_s32((int32x4_t)v531.val[0], (int32x4_t)v531.val[2]);
          int32x4_t v292 = vaddq_s32((int32x4_t)v531.val[1], (int32x4_t)v549.val[0]);
          int8x16x4_t v550 = (int8x16x4_t)vld4q_f32(v289);
          v531.val[1].i64[0] = 0xFF000000FFLL;
          v531.val[1].i64[1] = 0xFF000000FFLL;
          v519.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(v292, v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v519.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, (int32x4_t)v469.val[0]), vaddq_s32((int32x4_t)v555.val[0], (int32x4_t)v555.val[0])), (int32x4_t)v550.val[0]), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v536.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v564.val[1]), vaddq_s32((int32x4_t)v559.val[1], (int32x4_t)v559.val[1])), v485), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          int32x4_t v293 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v461), vaddq_s32(v466, v466)), (int32x4_t)v531.val[3]), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          int32x4_t v294 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v495), vaddq_s32(v457, v457)), v437), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v531.val[0].i64[0] = 0xFF000000FFLL;
          v531.val[0].i64[1] = 0xFF000000FFLL;
          int32x4_t v295 = vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v469.val[1]), vaddq_s32((int32x4_t)v555.val[1], (int32x4_t)v555.val[1])), (int32x4_t)v550.val[1]), v500), (int32x4_t)0), (int32x4_t)v531.val[0]);
          v519.val[0] = vqtbl4q_s8(v519, (int8x16_t)xmmword_1004047C0);
          v519.val[1] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v536 + 48), (int8x16_t)xmmword_1004047C0);
          int32x4_t v258 = 0uLL;
          v550.val[1] = (int8x16_t)vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v469.val[2]), vaddq_s32((int32x4_t)v555.val[2], (int32x4_t)v555.val[2])), (int32x4_t)v550.val[2]);
          v531.val[0] = (float32x4_t)vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v469.val[3]), vaddq_s32((int32x4_t)v555.val[3], (int32x4_t)v555.val[3])), (int32x4_t)v550.val[3]);
          v550.val[3].i64[0] = 0xFF000000FFLL;
          v550.val[3].i64[1] = 0xFF000000FFLL;
          v550.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, (int32x4_t)v564.val[2]), vaddq_s32(v447, v447)), v488), v500), (int32x4_t)0), (int32x4_t)v550.val[3]);
          v564.val[2].i64[0] = 0xFF000000FFLL;
          v564.val[2].i64[1] = 0xFF000000FFLL;
          v555.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v462), vaddq_s32((int32x4_t)v536.val[2], (int32x4_t)v536.val[2])), (int32x4_t)v536.val[0]), v500), (int32x4_t)0), (int32x4_t)v564.val[2]);
          v531.val[3].i64[0] = 0xFF000000FFLL;
          v531.val[3].i64[1] = 0xFF000000FFLL;
          v555.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v496), vaddq_s32((int32x4_t)v559.val[2], (int32x4_t)v559.val[2])), v438), v500), (int32x4_t)0), (int32x4_t)v531.val[3]);
          v550.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v550.val[1], v500), (int32x4_t)0), (int32x4_t)v531.val[3]);
          v519.val[2] = vqtbl4q_s8(v555, (int8x16_t)xmmword_1004047C0);
          int32x4_t v259 = v506;
          v550.val[0].i64[0] = 0xFF000000FFLL;
          v550.val[0].i64[1] = 0xFF000000FFLL;
          v550.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v454), vaddq_s32(v450, v450)), v490), v500), (int32x4_t)0), (int32x4_t)v550.val[0]);
          v531.val[1].i64[0] = 0xFF000000FFLL;
          v531.val[1].i64[1] = 0xFF000000FFLL;
          v550.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v463), vaddq_s32(v467, v467)), (int32x4_t)v536.val[1]), v500), (int32x4_t)0), (int32x4_t)v531.val[1]);
          v531.val[2].i64[0] = 0xFF000000FFLL;
          v531.val[2].i64[1] = 0xFF000000FFLL;
          v550.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v506, v497), vaddq_s32((int32x4_t)v559.val[3], (int32x4_t)v559.val[3])), v439), v500), (int32x4_t)0), (int32x4_t)v531.val[2]);
          v257.i64[0] = 0xFF000000FFLL;
          v257.i64[1] = 0xFF000000FFLL;
          v550.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32((int32x4_t)v531.val[0], v500), (int32x4_t)0), v257);
          v519.val[3] = vqtbl4q_s8(v550, (int8x16_t)xmmword_1004047C0);
          uint64_t v296 = (char *)(v254 + v264);
          vst4q_s8(v296, v519);
          v264 += 64;
          v279 += 64;
          v280 += 64;
          v281 += 64;
          v282 -= 16;
        }
        while (v282);
        int32x2_t v253 = v424;
        if (v278 != (v278 & 0x7FFFFFFFFFFFFFF0)) {
          goto LABEL_231;
        }
LABEL_233:
        a6 = v432;
        if ((int)result < v432)
        {
          uint64_t v308 = (int)result;
          unint64_t v309 = v19 - (int)result;
          if (v309 < 8)
          {
            uint64_t v310 = (int)result;
            goto LABEL_268;
          }
          unint64_t v311 = v256 + v19;
          unint64_t v312 = v254 + (int)result;
          uint64_t v313 = 4 * (int)result;
          uint64_t result = v260 + v313;
          BOOL v315 = v254 + v308 < (unint64_t)(v261 + v428) && v261 + 4 * v308 < v311;
          BOOL v317 = v312 < v262 + v428 && v262 + 4 * v308 < v311;
          if (result < v311 && v312 < v260 + v428)
          {
            uint64_t v310 = v308;
            goto LABEL_268;
          }
          if (v315)
          {
            uint64_t v310 = v308;
            do
            {
LABEL_268:
              int v335 = (int)(v16
                         + *(_DWORD *)(v260 + 4 * v310)
                         - 2 * *(_DWORD *)(v261 + 4 * v310)
                         + *(_DWORD *)(v262 + 4 * v310)) >> v13;
              int v336 = v335 & ~(v335 >> 31);
              if (v336 >= 255) {
                LOBYTE(v336) = -1;
              }
              *(unsigned char *)(v254 + v310++) = v336;
            }
            while (v19 != v310);
            goto LABEL_204;
          }
          if (v317)
          {
            uint64_t v310 = v308;
            goto LABEL_268;
          }
          if (v309 >= 0x10)
          {
            unint64_t v319 = v309 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v320 = (int32x4_t *)(v260 + v313);
            uint64_t v321 = (int32x4_t *)(v261 + v313);
            unint64_t v322 = (int32x4_t *)(v262 + v313);
            uint64_t v323 = v308;
            uint64_t result = v309 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v532.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v320[1]), vaddq_s32(v321[1], v321[1])), v322[1]), v500), v258), v257);
              v532.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, *v320), vaddq_s32(*v321, *v321)), *v322), v500), v258), v257);
              v532.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v320[2]), vaddq_s32(v321[2], v321[2])), v322[2]), v500), v258), v257);
              v532.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v320[3]), vaddq_s32(v321[3], v321[3])), v322[3]), v500), v258), v257);
              *(int8x16_t *)(v254 + v323) = vqtbl4q_s8(v532, (int8x16_t)xmmword_1004047C0);
              v320 += 4;
              v321 += 4;
              v322 += 4;
              v323 += 16;
              result -= 16;
            }
            while (result);
            if (v309 == v319) {
              goto LABEL_204;
            }
            if ((v309 & 8) == 0)
            {
              uint64_t v310 = v319 + v308;
              goto LABEL_268;
            }
          }
          else
          {
            unint64_t v319 = 0;
          }
          uint64_t v310 = (v309 & 0xFFFFFFFFFFFFFFF8) + v308;
          unint64_t v324 = v319 - (v309 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v325 = v319 + v308;
          unint64_t v326 = (int32x4_t *)(v260 + 4 * v325);
          unint64_t v327 = (int32x4_t *)(v261 + 4 * v325);
          uint64_t result = v262 + 4 * v325;
          do
          {
            int32x4_t v329 = *v326;
            int32x4_t v328 = v326[1];
            v326 += 2;
            int32x4_t v331 = *v327;
            int32x4_t v330 = v327[1];
            v327 += 2;
            int32x4_t v333 = *(int32x4_t *)result;
            int32x4_t v332 = *(int32x4_t *)(result + 16);
            result += 32;
            int32x4_t v334 = vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v329), vaddq_s32(v331, v331)), v333), v500), v258);
            v511.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(vsubq_s32(vaddq_s32(v259, v328), vaddq_s32(v330, v330)), v332), v500), v258), v257);
            v511.val[0] = (int8x16_t)vminq_s32(v334, v257);
            *(void *)(v254 + v325) = vqtbl2q_s8(v511, (int8x16_t)xmmword_1004047D0).u64[0];
            v325 += 8;
            v324 += 8;
          }
          while (v324);
          if (v309 != (v309 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_268;
          }
        }
LABEL_204:
        uint64_t v17 = v430;
        v254 += v430;
        int v15 = v255 - 1;
        ++v252;
        if (!v255) {
          return result;
        }
      }
      uint64_t result = (int)result;
LABEL_231:
      uint64_t v297 = (int32x2_t *)(v261 + 4 * result + 8);
      unsigned long long v298 = (int32x2_t *)(v262 + 4 * result + 8);
      int16x8_t v299 = (int32x2_t *)(v260 + 4 * result + 8);
      do
      {
        int32x2_t v300 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vsub_s32(vadd_s32(*(int32x2_t *)v259.i8, v299[-1]), vadd_s32(v297[-1], v297[-1])), v298[-1]), v253), 0), (int32x2_t)0xFF000000FFLL);
        int16x8_t v301 = (unsigned char *)(v254 + result);
        v301[1] = v300.i8[4];
        *int16x8_t v301 = v300.i8[0];
        int32x2_t v302 = *v299;
        v299 += 2;
        int32x2_t v303 = v302;
        int32x2_t v304 = *v297;
        v297 += 2;
        int32x2_t v305 = v304;
        int32x2_t v306 = *v298;
        v298 += 2;
        int32x2_t v307 = vmin_s32(vmax_s32(vshl_s32(vadd_s32(vsub_s32(vadd_s32(*(int32x2_t *)v259.i8, v303), vadd_s32(v305, v305)), v306), v253), 0), (int32x2_t)0xFF000000FFLL);
        v301[3] = v307.i8[4];
        result += 4;
        v301[2] = v307.i8[0];
      }
      while (result <= v18);
      goto LABEL_233;
    }
    uint64_t v337 = 0;
    int32x2_t v338 = vneg_s32(*(int32x2_t *)v92.i8);
    uint64_t v339 = a3;
    int32x4_t v423 = vdupq_n_s32(v7);
    int32x4_t v425 = vdupq_n_s32(v10);
    int32x4_t v427 = vnegq_s32(v92);
    int32x2_t v422 = v338;
    while (1)
    {
      int v434 = v15;
      uint64_t v429 = a3 + v337 * v17;
      uint64_t result = sub_100347DDC(v431, v14, v339, a6);
      int32x4_t v340 = 0uLL;
      uint64_t v341 = *(v14 - 1);
      uint64_t v342 = *v14;
      uint64_t v344 = v14[1];
      ++v14;
      uint64_t v343 = v344;
      if ((int)result > (int)v18) {
        goto LABEL_302;
      }
      uint64_t v345 = (int)result;
      unint64_t v346 = v18 - (int)result;
      if (v346 < 0x3C) {
        break;
      }
      unint64_t v347 = v346 >> 2;
      unint64_t v348 = v339 + (int)result;
      unint64_t v349 = v429 + 4 + (v346 & 0xFFFFFFFFFFFFFFFCLL) + (int)result;
      uint64_t v350 = 4 * (int)result;
      unint64_t v351 = v350 + 16 * (v346 >> 2);
      unint64_t v352 = v341 + v351 + 16;
      unint64_t v353 = v342 + v351 + 16;
      BOOL v354 = v348 >= v343 + v351 + 16 || v343 + 4 * (int)result >= v349;
      BOOL v355 = !v354;
      BOOL v356 = v348 >= v353 || v342 + 4 * (int)result >= v349;
      BOOL v357 = !v356;
      BOOL v358 = v341 + v350 >= v349 || v348 >= v352;
      if (!v358 || v355 || v357) {
        break;
      }
      unint64_t v359 = v347 + 1;
      uint64_t result = (int)result + 4 * (v359 & 0x7FFFFFFFFFFFFFF0);
      BOOL v360 = (const float *)(v341 + v350);
      BOOL v361 = (const float *)(v343 + v350);
      BOOL v362 = (const float *)(v342 + v350);
      uint64_t v363 = v359 & 0x7FFFFFFFFFFFFFF0;
      do
      {
        unsigned long long v364 = v360;
        float32x4x4_t v520 = vld4q_f32(v364);
        v364 += 16;
        float32x4x4_t v501 = v520;
        uint64_t v365 = v360 + 32;
        unsigned long long v366 = v360 + 48;
        int8x16x4_t v551 = (int8x16x4_t)vld4q_f32(v365);
        float32x4x4_t v521 = vld4q_f32(v366);
        float32x4x4_t v477 = v521;
        float32x4x4_t v522 = vld4q_f32(v364);
        float32x4x4_t v494 = v522;
        BOOL v367 = v361;
        float32x4x4_t v560 = vld4q_f32(v367);
        v367 += 16;
        v368 = v361 + 32;
        unsigned long long v369 = v361 + 48;
        float32x4x4_t v523 = vld4q_f32(v368);
        float32x4x4_t v533 = vld4q_f32(v369);
        float32x4x4_t v541 = vld4q_f32(v367);
        v370 = v362;
        float32x4x4_t v556 = vld4q_f32(v370);
        v370 += 16;
        int32x4_t v483 = (int32x4_t)v556.val[0];
        int32x4_t v486 = (int32x4_t)v556.val[1];
        int32x4_t v491 = (int32x4_t)v556.val[3];
        v556.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v523.val[0], (int32x4_t)v551.val[0]);
        v556.val[3] = (float32x4_t)vaddq_s32((int32x4_t)v523.val[1], (int32x4_t)v551.val[1]);
        int32x4_t v465 = vaddq_s32((int32x4_t)v523.val[2], (int32x4_t)v551.val[2]);
        int32x4_t v470 = vaddq_s32((int32x4_t)v523.val[3], (int32x4_t)v551.val[3]);
        v556.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v533.val[0], (int32x4_t)v477.val[0]);
        int32x4_t v371 = vaddq_s32((int32x4_t)v533.val[1], (int32x4_t)v477.val[1]);
        int32x4_t v459 = vaddq_s32((int32x4_t)v533.val[2], (int32x4_t)v477.val[2]);
        v477.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v533.val[3], (int32x4_t)v477.val[3]);
        uint64_t v372 = v362 + 32;
        v533.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v560.val[1], (int32x4_t)v501.val[1]);
        *(float32x4x4_t *)((char *)&v523 + 16) = vld4q_f32(v372);
        v533.val[3] = (float32x4_t)vaddq_s32((int32x4_t)v541.val[0], (int32x4_t)v494.val[0]);
        int32x4_t v373 = vaddq_s32((int32x4_t)v541.val[1], (int32x4_t)v494.val[1]);
        v533.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v541.val[2], (int32x4_t)v494.val[2]);
        v494.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v541.val[3], (int32x4_t)v494.val[3]);
        float32x4x4_t v542 = vld4q_f32(v370);
        float32x2_t v374 = v362 + 48;
        v551.val[1] = (int8x16_t)vmlaq_s32(v506, (int32x4_t)v523.val[1], v423);
        v560.val[1] = v523.val[2];
        int32x4_t v448 = (int32x4_t)v523.val[3];
        int32x4_t v451 = (int32x4_t)v533.val[0];
        int8x16x4_t v524 = (int8x16x4_t)vld4q_f32(v374);
        int32x4_t v440 = (int32x4_t)v524.val[1];
        int32x4_t v442 = (int32x4_t)v524.val[2];
        int32x4_t v444 = (int32x4_t)v524.val[3];
        v533.val[0] = (float32x4_t)vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v524.val[0], v423), (int32x4_t)v556.val[1], v425), v427), (int32x4_t)0);
        v375.i64[0] = 0xFF000000FFLL;
        v375.i64[1] = 0xFF000000FFLL;
        v524.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v483, v423), vaddq_s32((int32x4_t)v560.val[0], (int32x4_t)v501.val[0]), v425), v427), (int32x4_t)0), v375);
        v524.val[3] = (int8x16_t)vminq_s32((int32x4_t)v533.val[0], v375);
        v524.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32((int32x4_t)v551.val[1], (int32x4_t)v556.val[0], v425), v427), (int32x4_t)0), v375);
        v524.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v542.val[0], v423), (int32x4_t)v533.val[3], v425), v427), (int32x4_t)0), v375);
        v551.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v486, v423), (int32x4_t)v533.val[1], v425), v427), (int32x4_t)0), v375);
        v551.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v440, v423), v371, v425), v427), (int32x4_t)0), v375);
        v551.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v560.val[1], v423), (int32x4_t)v556.val[3], v425), v427), (int32x4_t)0), v375);
        v551.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v542.val[1], v423), v373, v425), v427), (int32x4_t)0), v375);
        v524.val[0] = vqtbl4q_s8(v524, (int8x16_t)xmmword_1004047C0);
        v524.val[1] = vqtbl4q_s8(v551, (int8x16_t)xmmword_1004047C0);
        v556.val[1] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v556.val[2], v423), vaddq_s32((int32x4_t)v560.val[2], (int32x4_t)v501.val[2]), v425), v427), (int32x4_t)0), v375);
        int32x4_t v376 = vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v442, v423), v459, v425), v427), (int32x4_t)0), v375);
        v556.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v448, v423), v465, v425), v427), (int32x4_t)0), v375);
        v556.val[2] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v542.val[2], v423), (int32x4_t)v533.val[2], v425), v427), (int32x4_t)0), v375);
        v524.val[2] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v556 + 16), (int8x16_t)xmmword_1004047C0);
        v556.val[1] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v491, v423), vaddq_s32((int32x4_t)v560.val[3], (int32x4_t)v501.val[3]), v425), v427), (int32x4_t)0), v375);
        int32x4_t v377 = vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v444, v423), (int32x4_t)v477.val[0], v425), v427), (int32x4_t)0), v375);
        v556.val[3] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v451, v423), v470, v425), v427), (int32x4_t)0), v375);
        v556.val[2] = (float32x4_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, (int32x4_t)v542.val[3], v423), (int32x4_t)v494.val[0], v425), v427), (int32x4_t)0), v375);
        v524.val[3] = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v556 + 16), (int8x16_t)xmmword_1004047C0);
        uint32x4_t v378 = (char *)(v339 + v345);
        vst4q_s8(v378, v524);
        v345 += 64;
        v360 += 64;
        v361 += 64;
        v362 += 64;
        v363 -= 16;
      }
      while (v363);
      int32x4_t v340 = 0uLL;
      int32x2_t v338 = v422;
      if (v359 != (v359 & 0x7FFFFFFFFFFFFFF0)) {
        goto LABEL_300;
      }
LABEL_302:
      a6 = v432;
      v390.i64[0] = 0xFF000000FFLL;
      v390.i64[1] = 0xFF000000FFLL;
      if ((int)result < v432)
      {
        uint64_t v391 = (int)result;
        unint64_t v392 = v19 - (int)result;
        if (v392 < 8)
        {
          uint64_t v393 = (int)result;
          goto LABEL_337;
        }
        unint64_t v394 = v429 + v19;
        unint64_t v395 = v339 + (int)result;
        uint64_t v396 = 4 * (int)result;
        uint64_t result = v341 + v396;
        BOOL v398 = v339 + v391 < (unint64_t)(v343 + v428) && v343 + 4 * v391 < v394;
        BOOL v400 = v395 < v342 + v428 && v342 + 4 * v391 < v394;
        if (result < v394 && v395 < v341 + v428)
        {
          uint64_t v393 = v391;
          goto LABEL_337;
        }
        if (v398)
        {
          uint64_t v393 = v391;
          do
          {
LABEL_337:
            int v420 = (int)(v16
                       + *(_DWORD *)(v342 + 4 * v393) * v7
                       + (*(_DWORD *)(v343 + 4 * v393) + *(_DWORD *)(v341 + 4 * v393)) * v10) >> v13;
            int v421 = v420 & ~(v420 >> 31);
            if (v421 >= 255) {
              LOBYTE(v421) = -1;
            }
            *(unsigned char *)(v339 + v393++) = v421;
          }
          while (v19 != v393);
          goto LABEL_273;
        }
        if (v400)
        {
          uint64_t v393 = v391;
          goto LABEL_337;
        }
        if (v392 >= 0x10)
        {
          unint64_t v402 = v392 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v403 = (int32x4_t *)(v341 + v396);
          uint64_t v404 = (int32x4_t *)(v343 + v396);
          uint64_t v405 = (int32x4_t *)(v342 + v396);
          uint64_t v406 = v391;
          uint64_t result = v392 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v534.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v405[1], v423), vaddq_s32(v404[1], v403[1]), v425), v427), v340), v390);
            v534.val[0] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, *v405, v423), vaddq_s32(*v404, *v403), v425), v427), v340), v390);
            v534.val[2] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v405[2], v423), vaddq_s32(v404[2], v403[2]), v425), v427), v340), v390);
            v534.val[3] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v405[3], v423), vaddq_s32(v404[3], v403[3]), v425), v427), v340), v390);
            *(int8x16_t *)(v339 + v406) = vqtbl4q_s8(v534, (int8x16_t)xmmword_1004047C0);
            v403 += 4;
            v404 += 4;
            v405 += 4;
            v406 += 16;
            result -= 16;
          }
          while (result);
          if (v392 == v402) {
            goto LABEL_273;
          }
          if ((v392 & 8) == 0)
          {
            uint64_t v393 = v402 + v391;
            goto LABEL_337;
          }
        }
        else
        {
          unint64_t v402 = 0;
        }
        uint64_t v393 = (v392 & 0xFFFFFFFFFFFFFFF8) + v391;
        unint64_t v407 = v402 - (v392 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v408 = v402 + v391;
        unint64_t v409 = (int32x4_t *)(v341 + 4 * v408);
        unint64_t v410 = (int32x4_t *)(v343 + 4 * v408);
        uint64_t result = v342 + 4 * v408;
        do
        {
          int32x4_t v412 = *v409;
          int32x4_t v411 = v409[1];
          v409 += 2;
          int32x4_t v414 = *v410;
          int32x4_t v413 = v410[1];
          v410 += 2;
          int32x4_t v415 = vaddq_s32(v414, v412);
          int32x4_t v416 = vaddq_s32(v413, v411);
          int32x4_t v418 = *(int32x4_t *)result;
          int32x4_t v417 = *(int32x4_t *)(result + 16);
          result += 32;
          int32x4_t v419 = vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v418, v423), v415, v425), v427), v340);
          v512.val[1] = (int8x16_t)vminq_s32(vmaxq_s32(vshlq_s32(vmlaq_s32(vmlaq_s32(v506, v417, v423), v416, v425), v427), v340), v390);
          v512.val[0] = (int8x16_t)vminq_s32(v419, v390);
          *(void *)(v339 + v408) = vqtbl2q_s8(v512, (int8x16_t)xmmword_1004047D0).u64[0];
          v408 += 8;
          v407 += 8;
        }
        while (v407);
        if (v392 != (v392 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_337;
        }
      }
LABEL_273:
      uint64_t v17 = v430;
      v339 += v430;
      int v15 = v434 - 1;
      ++v337;
      if (!v434) {
        return result;
      }
    }
    uint64_t result = (int)result;
LABEL_300:
    uint64_t v379 = (int32x2_t *)(v343 + 4 * result + 8);
    float32x2_t v380 = (int32x2_t *)(v342 + 4 * result + 8);
    float32x2_t v381 = (int32x2_t *)(v341 + 4 * result + 8);
    do
    {
      int32x2_t v382 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(*(int32x2_t *)v506.i8, v380[-1], *(int32x2_t *)v423.i8), vadd_s32(v379[-1], v381[-1]), *(int32x2_t *)v425.i8), v338), 0), (int32x2_t)0xFF000000FFLL);
      unint64_t v383 = (unsigned char *)(v339 + result);
      v383[1] = v382.i8[4];
      *unint64_t v383 = v382.i8[0];
      int32x2_t v384 = *v381;
      v381 += 2;
      int32x2_t v385 = v384;
      int32x2_t v386 = *v379;
      v379 += 2;
      int32x2_t v387 = vadd_s32(v386, v385);
      int32x2_t v388 = *v380;
      v380 += 2;
      int32x2_t v389 = vmin_s32(vmax_s32(vshl_s32(vmla_s32(vmla_s32(*(int32x2_t *)v506.i8, v388, *(int32x2_t *)v423.i8), v387, *(int32x2_t *)v425.i8), v338), 0), (int32x2_t)0xFF000000FFLL);
      v383[3] = v389.i8[4];
      result += 4;
      v383[2] = v389.i8[0];
    }
    while (result <= v18);
    goto LABEL_302;
  }
  if (v7)
  {
    if (v7 == 2)
    {
      BOOL v8 = 0;
      BOOL v9 = 0;
      signed int v10 = v6[1];
      BOOL v11 = v10 == 1;
      if (!a5) {
        return result;
      }
    }
    else
    {
      BOOL v8 = 0;
      BOOL v11 = 0;
      BOOL v9 = 0;
      signed int v10 = v6[1];
      if (!a5) {
        return result;
      }
    }
    goto LABEL_17;
  }
  BOOL v8 = 0;
  BOOL v11 = 0;
  signed int v10 = v6[1];
  BOOL v9 = v10 == 1 || v10 == -1;
  if (a5) {
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_100346FF0(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, double a6)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v12 = (_DWORD *)(a1 + 16);
  *(void *)a1 = off_10049A7A0;
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v13 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  unint64_t v35 = (_DWORD *)(a1 + 24);
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(_DWORD *)(a1 + 128) = 1124007936;
  uint64_t v14 = (_DWORD *)(a1 + 128);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  int v15 = (int *)(a1 + 132);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = a1 + 136;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  uint64_t v16 = a1 + 120;
  if ((*(unsigned char *)(a2 + 1) & 0x40) == 0)
  {
    LODWORD(v36) = 33619968;
    uint64_t v37 = a1 + 16;
    uint64_t v38 = 0;
    sub_10025401C(a2, (uint64_t)&v36);
    goto LABEL_17;
  }
  if (v12 != (_DWORD *)a2)
  {
    uint64_t v17 = *(void *)(a2 + 56);
    if (v17)
    {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
      uint64_t v18 = *(void *)(a1 + 72);
      if (v18)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v12 = *(_DWORD *)a2;
      int v22 = *(_DWORD *)(a2 + 4);
      if (v22 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v22;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v23 = *(void **)(a2 + 72);
        int v24 = *(void **)(a1 + 88);
        void *v24 = *v23;
        v24[1] = v23[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v20 + 4 * v19++) = 0;
        uint64_t v21 = *v13;
      }
      while (v19 < v21);
      *uint64_t v12 = *(_DWORD *)a2;
      if ((int)v21 <= 2)
      {
        int v22 = *(_DWORD *)(a2 + 4);
        if (v22 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v12, a2);
    goto LABEL_16;
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 224) = (uint64_t)rint(a6);
  *(void *)(a1 + 112) = *a4;
  int32x4_t v25 = (_DWORD *)(a5 + 8);
  *(void *)(a1 + 120) = *(void *)a5;
  if (v16 != a5)
  {
    uint64_t v26 = *(void *)(a5 + 64);
    if (v26) {
      atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
    }
    uint64_t v27 = *(void *)(a1 + 184);
    if (v27 && atomic_fetch_add((atomic_uint *volatile)(v27 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v14);
    }
    *(void *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    if (*(int *)(a1 + 132) <= 0)
    {
      _DWORD *v14 = *v25;
      int v31 = *(_DWORD *)(a5 + 12);
      if (v31 <= 2)
      {
LABEL_28:
        *(_DWORD *)(a1 + 132) = v31;
        *(void *)(a1 + 136) = *(void *)(a5 + 16);
        unint64_t v32 = *(void **)(a5 + 80);
        unint64_t v33 = *(void **)(a1 + 200);
        *unint64_t v33 = *v32;
        v33[1] = v32[1];
LABEL_31:
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a5 + 24);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a5 + 40);
        *(_OWORD *)(a1 + 176) = *(_OWORD *)(a5 + 56);
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = *(void *)(a1 + 192);
      do
      {
        *(_DWORD *)(v29 + 4 * v28++) = 0;
        uint64_t v30 = *v15;
      }
      while (v28 < v30);
      _DWORD *v14 = *v25;
      if ((int)v30 <= 2)
      {
        int v31 = *(_DWORD *)(a5 + 12);
        if (v31 <= 2) {
          goto LABEL_28;
        }
      }
    }
    sub_1002931A8((uint64_t)v14, a5 + 8);
    goto LABEL_31;
  }
LABEL_32:
  if ((*v12 & 0xFFF) != 4 || *v35 != 1 && *(_DWORD *)(a1 + 28) != 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&v36, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v36, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1003473A8(_Unwind_Exception *a1)
{
  sub_1003328A0(v2);
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003473E4(uint64_t a1)
{
  *(void *)a1 = off_10049A7A0;
  uint64_t v2 = *(void *)(a1 + 184);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 128);
  }
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (*(int *)(a1 + 132) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 192);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 132));
  }
  uint64_t v5 = *(void **)(a1 + 200);
  if (v5 != (void *)(a1 + 208)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  BOOL v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96)) {
    j__free(v9);
  }
  return a1;
}

void sub_100347508(uint64_t a1)
{
  sub_1003473E4(a1);

  operator delete();
}

int64_t sub_100347540(int64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, double a7, int16x8_t a8)
{
  int v8 = a5;
  int v10 = *(_DWORD *)(result + 8);
  int v88 = v10;
  if (v10 >= 0) {
    int v11 = *(_DWORD *)(result + 8);
  }
  else {
    int v11 = v10 + 1;
  }
  int v12 = v11 >> 1;
  uint64_t v13 = *(void *)(result + 32);
  uint64_t v14 = (uint64_t)v11 >> 1;
  int v15 = (const float *)(v13 + 4 * v12);
  unsigned int v16 = *(_DWORD *)(result + 224);
  unsigned int v17 = *(_DWORD *)(result + 112);
  unsigned int v18 = *(_DWORD *)(result + 116);
  uint64_t v19 = (void *)(a2 + 8 * v12);
  uint64_t v87 = a6;
  unsigned int v89 = v18;
  char v90 = v17;
  if (*(unsigned char *)(result + 228))
  {
    if (!a5) {
      return result;
    }
    uint64_t v94 = result + 120;
    uint64_t v86 = a4;
    uint64_t v47 = (v14 + 1);
    int64_t v48 = (int)a6 - 4;
    uint64_t v49 = (int)a6;
    unint64_t v50 = v47 - 1;
    uint64_t v51 = a2 + 8 * v14;
    int32x4_t v52 = (uint64_t *)(v51 - 8);
    uint64_t v95 = v13 + 4 * v14 + 8;
    int v96 = (void *)(v51 + 16);
    int32x4_t __ca = vdupq_n_s32(v18);
    int32x4_t v83 = vdupq_n_s32(v16);
    int32x4_t v78 = vnegq_s32(vdupq_n_s32(v17));
    while (1)
    {
      int v92 = v8;
      uint64_t v53 = a6;
      uint64_t result = sub_100347DDC(v94, v19, a3, a6);
      v54.i64[0] = 0xFF000000FFLL;
      v54.i64[1] = 0xFF000000FFLL;
      if ((int)result <= (int)v48)
      {
        uint64_t result = (int)result;
        do
        {
          int32x4_t v56 = (int32x4_t)vld1q_dup_f32(v15);
          int32x4_t v57 = vmlaq_s32(v83, *(int32x4_t *)(*v19 + 4 * result), v56);
          if (v88 >= 2)
          {
            int32x2_t v58 = v52;
            uint64_t v59 = 1;
            do
            {
              uint64_t v60 = *v58--;
              int32x2_t v61 = &v15[v59];
              int32x4_t v62 = (int32x4_t)vld1q_dup_f32(v61);
              int32x4_t v57 = vmlaq_s32(v57, vaddq_s32(*(int32x4_t *)(v60 + 4 * result), *(int32x4_t *)(v19[v59++] + 4 * result)), v62);
            }
            while (v47 != v59);
          }
          int16x8_t v55 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v57, __ca), v78), (int32x4_t)0), v54);
          *(int16x4_t *)v55.i8 = vmovn_s32((int32x4_t)v55);
          *(_DWORD *)(a3 + result) = vmovn_s16(v55).u32[0];
          result += 4;
        }
        while (result <= v48);
        uint64_t v53 = v87;
      }
      a6 = v53;
      if ((int)result >= (int)v53) {
        goto LABEL_35;
      }
      uint64_t v63 = (int)result;
      if (v88 >= 2) {
        break;
      }
      do
      {
        int v64 = (int)(v16 + *(_DWORD *)(*v19 + 4 * v63) * *(_DWORD *)v15 + v89) >> v90;
        int v65 = v64 & ~(v64 >> 31);
        if (v65 >= 255) {
          LOBYTE(v65) = -1;
        }
        *(unsigned char *)(a3 + v63++) = v65;
      }
      while (v49 != v63);
LABEL_35:
      a3 += v86;
      ++v19;
      ++v52;
      ++v96;
      int v8 = v92 - 1;
      if (v92 == 1) {
        return result;
      }
    }
    while (1)
    {
      unsigned int v67 = v16 + *(_DWORD *)(*v19 + 4 * v63) * *(_DWORD *)v15;
      if (v50 >= 2)
      {
        int v69 = 0;
        BOOL v71 = (_DWORD *)v95;
        uint64_t v70 = v96;
        unint64_t v72 = (v47 - 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v73 = v52;
        do
        {
          uint64_t result = (*(_DWORD *)(*v73 + 4 * v63) + *(_DWORD *)(*(v70 - 1) + 4 * v63));
          v67 += result * *(v71 - 1);
          v69 += (*(_DWORD *)(*(v73 - 1) + 4 * v63) + *(_DWORD *)(*v70 + 4 * v63)) * *v71;
          v73 -= 2;
          v71 += 2;
          v70 += 2;
          v72 -= 2;
        }
        while (v72);
        v67 += v69;
        uint64_t v68 = (v47 - 1) | 1;
        if (v50 == ((v47 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v68 = 1;
      }
      uint64_t v74 = -1 * v68;
      do
      {
        v67 += (*(_DWORD *)(v19[v74] + 4 * v63) + *(_DWORD *)(v19[v68] + 4 * v63)) * LODWORD(v15[v68]);
        ++v68;
        --v74;
      }
      while (v47 != v68);
LABEL_50:
      int v66 = ((int)(v67 + v89) >> v90) & ~((int)(v67 + v89) >> v90 >> 31);
      if (v66 >= 255) {
        LOBYTE(v66) = -1;
      }
      *(unsigned char *)(a3 + v63++) = v66;
      if (v63 == v49) {
        goto LABEL_35;
      }
    }
  }
  if (a5)
  {
    uint64_t v85 = result + 120;
    signed int v20 = ((int)(v16 + v18) >> v17) & ~((int)(v16 + v18) >> v17 >> 31);
    if (v20 >= 255) {
      signed int v20 = 255;
    }
    uint64_t v84 = a4;
    uint64_t v21 = (v14 + 1);
    int64_t v22 = (int)a6 - 4;
    unint64_t v23 = v21 - 1;
    int __c = v20;
    *(int16x4_t *)a8.i8 = vdup_n_s16(v20);
    uint64_t v24 = a2 + 8 * v14;
    int32x4_t v25 = (uint64_t *)(v24 - 8);
    uint64_t v93 = v13 + 4 * v14 + 8;
    uint64_t v26 = (void *)(v24 + 16);
    uint64_t v82 = (int)a6;
    int32x4_t v77 = vdupq_n_s32(v16);
    int32x4_t v79 = vdupq_n_s32(v18);
    int32x4_t v75 = vnegq_s32(vdupq_n_s32(v17));
    unsigned __int32 v76 = vmovn_s16(a8).u32[0];
    while (1)
    {
      int v91 = v8;
      uint64_t v27 = a6;
      uint64_t result = sub_100347DDC(v85, v19, a3, a6);
      if ((int)result <= (int)v22)
      {
        uint64_t result = (int)result;
        if (v88 >= 2)
        {
          v28.i64[0] = 0xFF000000FFLL;
          v28.i64[1] = 0xFF000000FFLL;
          do
          {
            uint64_t v29 = v25;
            uint64_t v30 = 1;
            int32x4_t v31 = v77;
            do
            {
              uint64_t v32 = *v29--;
              unint64_t v33 = &v15[v30];
              int32x4_t v34 = (int32x4_t)vld1q_dup_f32(v33);
              int32x4_t v31 = vmlaq_s32(v31, vsubq_s32(*(int32x4_t *)(v19[v30++] + 4 * result), *(int32x4_t *)(v32 + 4 * result)), v34);
            }
            while (v21 != v30);
            int16x8_t v35 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v31, v79), v75), (int32x4_t)0), v28);
            *(int16x4_t *)v35.i8 = vmovn_s32((int32x4_t)v35);
            *(_DWORD *)(a3 + result) = vmovn_s16(v35).u32[0];
            result += 4;
          }
          while (result <= v22);
        }
        else
        {
          do
          {
            *(_DWORD *)(a3 + result) = v76;
            result += 4;
          }
          while (result <= v22);
        }
        uint64_t v27 = v87;
      }
      a6 = v27;
      if ((int)result >= (int)v27) {
        goto LABEL_9;
      }
      uint64_t v36 = (int)result;
      if (v88 >= 2) {
        break;
      }
      uint64_t result = (int64_t)memset((void *)(a3 + (int)result), __c, (~result + v27) + 1);
      a6 = v87;
LABEL_9:
      a3 += v84;
      ++v19;
      ++v25;
      ++v26;
      int v8 = v91 - 1;
      if (v91 == 1) {
        return result;
      }
    }
    while (v23 >= 2)
    {
      int v40 = 0;
      unint64_t v41 = v26;
      uint64_t v42 = (_DWORD *)v93;
      unint64_t v43 = (v21 - 1) & 0xFFFFFFFFFFFFFFFELL;
      float64x2_t v44 = v25;
      unsigned int v45 = v16;
      do
      {
        uint64_t result = (*(_DWORD *)(*(v41 - 1) + 4 * v36) - *(_DWORD *)(*v44 + 4 * v36));
        v45 += result * *(v42 - 1);
        v40 += (*(_DWORD *)(*v41 + 4 * v36) - *(_DWORD *)(*(v44 - 1) + 4 * v36)) * *v42;
        v44 -= 2;
        v42 += 2;
        v41 += 2;
        v43 -= 2;
      }
      while (v43);
      unsigned int v39 = v40 + v45;
      uint64_t v38 = (v21 - 1) | 1;
      if (v23 != ((v21 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_30;
      }
LABEL_22:
      int v37 = ((int)(v39 + v89) >> v90) & ~((int)(v39 + v89) >> v90 >> 31);
      if (v37 >= 255) {
        LOBYTE(v37) = -1;
      }
      *(unsigned char *)(a3 + v36++) = v37;
      if (v36 == v82) {
        goto LABEL_9;
      }
    }
    uint64_t v38 = 1;
    unsigned int v39 = v16;
LABEL_30:
    uint64_t v46 = -1 * v38;
    do
    {
      v39 += (*(_DWORD *)(v19[v38] + 4 * v36) - *(_DWORD *)(v19[v46] + 4 * v36)) * LODWORD(v15[v38]);
      ++v38;
      --v46;
    }
    while (v21 != v38);
    goto LABEL_22;
  }
  return result;
}

void sub_100347B0C(uint64_t a1)
{
  sub_1003473E4(a1);

  operator delete();
}

int64_t sub_100347B44(int64_t result, void *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v7 = a2;
    int v8 = *(const float **)(result + 32);
    unsigned int v9 = *(_DWORD *)(result + 224);
    unsigned int v10 = *(_DWORD *)(result + 112);
    unsigned int v11 = *(_DWORD *)(result + 116);
    uint64_t v12 = *(unsigned int *)(result + 8);
    uint64_t v37 = a4;
    uint64_t v38 = result + 120;
    int64_t v13 = (int)a6 - 4;
    uint64_t v14 = (int)a6;
    int v15 = a2 + 2;
    int32x4_t v35 = vdupq_n_s32(v11);
    int32x4_t v36 = vdupq_n_s32(v9);
    int32x4_t v34 = vnegq_s32(vdupq_n_s32(v10));
    while (1)
    {
      unsigned int v39 = v15;
      int v40 = a5;
      uint64_t v16 = a6;
      uint64_t result = sub_100347DDC(v38, v7, a3, a6);
      v17.i64[0] = 0xFF000000FFLL;
      v17.i64[1] = 0xFF000000FFLL;
      if ((int)result <= (int)v13)
      {
        uint64_t result = (int)result;
        do
        {
          int32x4_t v19 = (int32x4_t)vld1q_dup_f32(v8);
          int32x4_t v20 = vmlaq_s32(v36, *(int32x4_t *)(*v7 + 4 * result), v19);
          if ((int)v12 >= 2)
          {
            for (uint64_t i = 1; i != v12; ++i)
            {
              int64_t v22 = &v8[i];
              int32x4_t v23 = (int32x4_t)vld1q_dup_f32(v22);
              int32x4_t v20 = vmlaq_s32(v20, *(int32x4_t *)(v7[i] + 4 * result), v23);
            }
          }
          int16x8_t v18 = (int16x8_t)vminq_s32(vmaxq_s32(vshlq_s32(vaddq_s32(v20, v35), v34), (int32x4_t)0), v17);
          *(int16x4_t *)v18.i8 = vmovn_s32((int32x4_t)v18);
          *(_DWORD *)(a3 + result) = vmovn_s16(v18).u32[0];
          result += 4;
        }
        while (result <= v13);
      }
      a6 = v16;
      if ((int)result >= (int)v16) {
        goto LABEL_3;
      }
      uint64_t v24 = (int)result;
      if ((int)v12 > 1) {
        break;
      }
      do
      {
        int v25 = (int)(v9 + *(_DWORD *)(*v7 + 4 * v24) * *(_DWORD *)v8 + v11) >> v10;
        int v26 = v25 & ~(v25 >> 31);
        if (v26 >= 255) {
          LOBYTE(v26) = -1;
        }
        *(unsigned char *)(a3 + v24++) = v26;
      }
      while (v14 != v24);
LABEL_3:
      a3 += v37;
      ++v7;
      int v15 = v39 + 1;
      a5 = v40 - 1;
      if (v40 == 1) {
        return result;
      }
    }
    while (1)
    {
      unsigned int v28 = v9 + *(_DWORD *)(*v7 + 4 * v24) * *(_DWORD *)v8;
      if (v12 >= 3)
      {
        int v30 = 0;
        int32x4_t v31 = v39;
        uint64_t v32 = v8 + 2;
        unint64_t v33 = (v12 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v28 += *(_DWORD *)(*(v31 - 1) + 4 * v24) * *(v32 - 1);
          v30 += *(_DWORD *)(*v31 + 4 * v24) * *v32;
          v32 += 2;
          v31 += 2;
          v33 -= 2;
        }
        while (v33);
        v28 += v30;
        uint64_t v29 = (v12 - 1) | 1;
        if (v12 - 1 == ((v12 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v29 = 1;
      }
      do
      {
        v28 += *(_DWORD *)(v7[v29] + 4 * v24) * LODWORD(v8[v29]);
        ++v29;
      }
      while (v12 != v29);
LABEL_17:
      int v27 = ((int)(v28 + v11) >> v10) & ~((int)(v28 + v11) >> v10 >> 31);
      if (v27 >= 255) {
        LOBYTE(v27) = -1;
      }
      *(unsigned char *)(a3 + v24++) = v27;
      if (v24 == v14) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

unint64_t sub_100347DDC(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  unint64_t result = sub_1002D21FC(100);
  if (result)
  {
    int v9 = *(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 20);
    int v10 = v9 - 1;
    if (v9 - 1 >= 0) {
      --v9;
    }
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = (uint64_t)v9 >> 1;
    int64_t v13 = (const float *)(v11 + 4 * (v9 >> 1));
    uint64_t v14 = (const float *)(a1 + 4);
    float32x4_t v15 = vld1q_dup_f32(v14);
    if (*(unsigned char *)a1)
    {
      if (v10 == 1)
      {
        return 0;
      }
      else
      {
        unint64_t v20 = (a4 - 8);
        if (a4 >= 8)
        {
          float32x4_t v39 = vld1q_dup_f32(v13);
          uint64_t v38 = v13 + 1;
          float32x4_t v40 = vld1q_dup_f32(v38);
          if (v10 >= 4)
          {
            unint64_t result = 0;
            if ((int)v12 <= 2) {
              uint64_t v42 = 2;
            }
            else {
              uint64_t v42 = v12;
            }
            uint64_t v43 = v11 + 4 * v12 + 8;
            uint64_t v44 = v42 - 1;
            do
            {
              uint64_t v45 = 4 * result;
              uint64_t v46 = (int32x4_t *)(*a2 + 4 * result);
              float32x4_t v47 = vcvtq_f32_s32(*v46);
              float32x4_t v48 = vcvtq_f32_s32(v46[1]);
              uint64_t v49 = (int32x4_t *)(a2[1] + 4 * result);
              unint64_t v50 = (int32x4_t *)(*(a2 - 1) + 4 * result);
              float32x4_t v51 = vmlaq_f32(vmlaq_f32(v15, v39, v47), v40, vaddq_f32(vcvtq_f32_s32(*v49), vcvtq_f32_s32(*v50)));
              float32x4_t v52 = vmlaq_f32(vmlaq_f32(v15, v39, v48), v40, vaddq_f32(vcvtq_f32_s32(v49[1]), vcvtq_f32_s32(v50[1])));
              uint64_t v53 = v44;
              int32x4_t v54 = a2 + 2;
              int16x8_t v55 = (const float *)v43;
              int32x4_t v56 = a2 - 2;
              do
              {
                uint64_t v58 = *v54++;
                uint64_t v57 = v58;
                uint64_t v59 = *v56--;
                uint64_t v60 = (int32x4_t *)(v57 + v45);
                float32x4_t v61 = vld1q_dup_f32(v55++);
                float32x4_t v51 = vmlaq_f32(v51, v61, vaddq_f32(vcvtq_f32_s32(*v60), vcvtq_f32_s32(*(int32x4_t *)(v59 + 4 * result))));
                float32x4_t v52 = vmlaq_f32(v52, v61, vaddq_f32(vcvtq_f32_s32(v60[1]), vcvtq_f32_s32(*(int32x4_t *)(v59 + v45 + 16))));
                --v53;
              }
              while (v53);
              *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(v51)), vcvtq_s32_f32(v52)));
              result += 8;
            }
            while (result <= v20);
          }
          else
          {
            uint64_t v41 = 0;
            for (unint64_t result = 0; result <= v20; result += 8)
            {
              *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(vmlaq_f32(v15, v39, vcvtq_f32_s32(*(int32x4_t *)(*a2 + v41))), v40, vaddq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2[1] + v41)), vcvtq_f32_s32(*(int32x4_t *)(*(a2 - 1) + v41)))))), vcvtq_s32_f32(vmlaq_f32(vmlaq_f32(v15, v39, vcvtq_f32_s32(*(int32x4_t *)(*a2 + v41 + 16))), v40, vaddq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2[1] + v41 + 16)), vcvtq_f32_s32(*(int32x4_t *)(*(a2 - 1) + v41 + 16)))))));
              v41 += 32;
            }
          }
        }
        else
        {
          return 0;
        }
      }
    }
    else
    {
      unint64_t v16 = (a4 - 8);
      if (a4 >= 8)
      {
        int32x4_t v17 = v13 + 1;
        float32x4_t v18 = vld1q_dup_f32(v17);
        if (v10 >= 4)
        {
          unint64_t result = 0;
          if ((int)v12 <= 2) {
            uint64_t v21 = 2;
          }
          else {
            uint64_t v21 = v12;
          }
          uint64_t v22 = v11 + 4 * v12 + 8;
          uint64_t v23 = v21 - 1;
          do
          {
            uint64_t v24 = 4 * result;
            int v25 = (int32x4_t *)(a2[1] + 4 * result);
            int v26 = (int32x4_t *)(*(a2 - 1) + 4 * result);
            float32x4_t v27 = vmlaq_f32(v15, v18, vsubq_f32(vcvtq_f32_s32(*v25), vcvtq_f32_s32(*v26)));
            float32x4_t v28 = vmlaq_f32(v15, v18, vsubq_f32(vcvtq_f32_s32(v25[1]), vcvtq_f32_s32(v26[1])));
            uint64_t v29 = v23;
            int v30 = a2 + 2;
            int32x4_t v31 = (const float *)v22;
            uint64_t v32 = a2 - 2;
            do
            {
              uint64_t v34 = *v30++;
              uint64_t v33 = v34;
              uint64_t v35 = *v32--;
              int32x4_t v36 = (int32x4_t *)(v33 + v24);
              float32x4_t v37 = vld1q_dup_f32(v31++);
              float32x4_t v27 = vmlaq_f32(v27, v37, vsubq_f32(vcvtq_f32_s32(*v36), vcvtq_f32_s32(*(int32x4_t *)(v35 + 4 * result))));
              float32x4_t v28 = vmlaq_f32(v28, v37, vsubq_f32(vcvtq_f32_s32(v36[1]), vcvtq_f32_s32(*(int32x4_t *)(v35 + v24 + 16))));
              --v29;
            }
            while (v29);
            *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(v27)), vcvtq_s32_f32(v28)));
            result += 8;
          }
          while (result <= v16);
        }
        else
        {
          uint64_t v19 = 0;
          for (unint64_t result = 0; result <= v16; result += 8)
          {
            *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v15, v18, vsubq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2[1] + v19)), vcvtq_f32_s32(*(int32x4_t *)(*(a2 - 1) + v19)))))), vcvtq_s32_f32(vmlaq_f32(v15, v18, vsubq_f32(vcvtq_f32_s32(*(int32x4_t *)(a2[1] + v19 + 16)), vcvtq_f32_s32(*(int32x4_t *)(*(a2 - 1) + v19 + 16)))))));
            v19 += 32;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_1003481A4()
{
}

uint64_t sub_1003481B8(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100348238(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v8 = sub_100348304(a1, a2, a3, a4, a5, a6, a7);
  *(void *)uint64_t v8 = off_10049A810;
  if (*(_DWORD *)(v8 + 8) != 3)
  {
    v10[0] = 0;
    v10[1] = 0;
    *(_OWORD *)sub_1002D19D8(v10, 16) = *(_OWORD *)"this->ksize == 3";
    sub_1002D2278(-215, v10, "SymmColumnSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3420);
  }
  return a1;
}

void sub_1003482DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100349574(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100348304(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9 = sub_100349194(a1, a2, a3, a7, a5, a6);
  *(void *)uint64_t v9 = off_10049A888;
  *(_DWORD *)(v9 + 228) = a4;
  if ((a4 & 3) == 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v11, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v11, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_1003483BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100349574(v9);
  _Unwind_Resume(a1);
}

void sub_1003483E8(uint64_t a1)
{
  sub_100349574(a1);

  operator delete();
}

int64_t sub_100348420(int64_t result, uint64_t a2, int16x4_t *a3, int a4, int a5, int a6)
{
  uint64_t v8 = (unsigned int *)(*(void *)(result + 32) + 4 * (*(_DWORD *)(result + 8) / 2));
  unsigned int v9 = *v8;
  if (*v8 == -2)
  {
    BOOL v13 = 0;
    BOOL v11 = 0;
    signed int v12 = v8[1];
    BOOL v10 = v12 == 1;
    if (!a5) {
      return result;
    }
  }
  else if (v9)
  {
    if (v9 == 2)
    {
      BOOL v10 = 0;
      BOOL v11 = 0;
      signed int v12 = v8[1];
      BOOL v13 = v12 == 1;
      if (!a5) {
        return result;
      }
    }
    else
    {
      BOOL v10 = 0;
      BOOL v13 = 0;
      BOOL v11 = 0;
      signed int v12 = v8[1];
      if (!a5) {
        return result;
      }
    }
  }
  else
  {
    BOOL v10 = 0;
    BOOL v13 = 0;
    signed int v12 = v8[1];
    BOOL v11 = v12 == 1 || v12 == -1;
    if (!a5) {
      return result;
    }
  }
  unsigned int v15 = *(_DWORD *)(result + 224);
  int v16 = a5 - 1;
  uint64_t v227 = result + 120;
  uint64_t v228 = a4;
  int64_t v17 = a6 - 4;
  uint64_t v18 = a2 + 8 * ((uint64_t)(*(_DWORD *)(result + 8) + (*(int *)(result + 8) < 0)) >> 1);
  if (*(_DWORD *)(result + 228))
  {
    if (v13)
    {
      int32x4_t v224 = vdupq_n_s32(v15);
      do
      {
        int v55 = v16;
        unint64_t result = sub_100349FE8(v227, (int32x4_t **)v18, a3, a6);
        uint64_t v56 = *(void *)(v18 - 8);
        uint64_t v57 = *(int32x4_t **)v18;
        uint64_t v59 = *(void *)(v18 + 8);
        v18 += 8;
        uint64_t v58 = v59;
        if ((int)result <= (int)v17)
        {
          uint64_t v60 = (int)result;
          unint64_t v61 = v17 - (int)result;
          unint64_t result = (int)result;
          if (v61 < 0x1C) {
            goto LABEL_52;
          }
          uint64_t v62 = (v61 >> 2) + 1;
          unint64_t result = (int)result + 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v63 = 2 * v60;
          uint64_t v64 = v60;
          int v65 = (const float *)(v56 + 4 * v60);
          int v66 = (const float *)&v57->i32[v64];
          unsigned int v67 = (const float *)(v58 + v64 * 4);
          uint64_t v68 = v62 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            int v69 = v65;
            float32x4x4_t v230 = vld4q_f32(v69);
            v69 += 16;
            float32x4x4_t v235 = vld4q_f32(v69);
            uint64_t v70 = v66;
            int16x8x4_t v241 = (int16x8x4_t)vld4q_f32(v70);
            v70 += 16;
            float32x4x4_t v246 = vld4q_f32(v70);
            BOOL v71 = v67;
            float32x4x4_t v250 = vld4q_f32(v71);
            v71 += 16;
            int32x4_t v72 = vaddq_s32((int32x4_t)v246.val[2], (int32x4_t)v246.val[2]);
            v246.val[2] = (float32x4_t)vaddq_s32(vaddq_s32((int32x4_t)v235.val[1], v224), vaddq_s32((int32x4_t)v246.val[1], (int32x4_t)v246.val[1]));
            v235.val[1] = (float32x4_t)vaddq_s32(vaddq_s32((int32x4_t)v235.val[2], v224), v72);
            float32x4x4_t v254 = vld4q_f32(v71);
            v241.val[0] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v230.val[0], v224), vaddq_s32((int32x4_t)v241.val[0], (int32x4_t)v241.val[0])), (int32x4_t)v250.val[0])), vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v235.val[0], v224), vaddq_s32((int32x4_t)v246.val[0], (int32x4_t)v246.val[0])), (int32x4_t)v254.val[0]));
            v241.val[1] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v230.val[1], v224), vaddq_s32((int32x4_t)v241.val[1], (int32x4_t)v241.val[1])), (int32x4_t)v250.val[1])), vaddq_s32((int32x4_t)v246.val[2], (int32x4_t)v254.val[1]));
            v241.val[2] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v230.val[2], v224), vaddq_s32((int32x4_t)v241.val[2], (int32x4_t)v241.val[2])), (int32x4_t)v250.val[2])), vaddq_s32((int32x4_t)v235.val[1], (int32x4_t)v254.val[2]));
            v241.val[3] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v230.val[3], v224), vaddq_s32((int32x4_t)v241.val[3], (int32x4_t)v241.val[3])), (int32x4_t)v250.val[3])), vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)v235.val[3], v224), vaddq_s32((int32x4_t)v246.val[3], (int32x4_t)v246.val[3])), (int32x4_t)v254.val[3]));
            unint64_t v73 = (__int16 *)((char *)a3 + v63);
            vst4q_s16(v73, v241);
            v63 += 64;
            v65 += 32;
            v66 += 32;
            v67 += 32;
            v68 -= 8;
          }
          while (v68);
          if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_52:
            uint64_t v74 = (int32x4_t *)(v56 + 4 * result);
            int32x4_t v75 = (int32x4_t *)((char *)v57 + 4 * result);
            unsigned __int32 v76 = (int32x4_t *)(v58 + 4 * result);
            uint64_t v77 = 2 * result;
            do
            {
              int32x4_t v78 = *v74++;
              int32x4_t v79 = v78;
              int32x4_t v80 = *v75++;
              int32x4_t v81 = vaddq_s32(v80, v80);
              int32x4_t v82 = *v76++;
              *(int16x4_t *)((char *)a3 + v77) = vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32(v79, v224), v81), v82));
              result += 4;
              v77 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          unint64_t v83 = a6 - (uint64_t)(int)result;
          unint64_t v84 = (int)result;
          if (v83 < 8) {
            goto LABEL_128;
          }
          unint64_t v84 = (v83 & 0xFFFFFFFFFFFFFFF8) + (int)result;
          uint64_t v85 = (int32x4_t *)(v56 + 4 * (int)result);
          uint64_t v86 = (int32x4_t *)((char *)v57 + 4 * (int)result);
          uint64_t v87 = (int32x4_t *)(v58 + 4 * (int)result);
          uint64_t v88 = 2 * (int)result;
          unint64_t result = v83 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v89 = *v85;
            int32x4_t v90 = v85[1];
            v85 += 2;
            int32x4_t v91 = *v86;
            int32x4_t v92 = v86[1];
            v86 += 2;
            int32x4_t v93 = *v87;
            int32x4_t v94 = v87[1];
            v87 += 2;
            *(int16x8_t *)&a3->i8[v88] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32(v89, v224), vaddq_s32(v91, v91)), v93)), vaddq_s32(vaddq_s32(vaddq_s32(v90, v224), vaddq_s32(v92, v92)), v94));
            v88 += 16;
            result -= 8;
          }
          while (result);
          if (v83 != (v83 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_128:
            do
            {
              int v95 = *(_DWORD *)(v56 + 4 * v84) + v15 + 2 * v57->i32[v84] + *(_DWORD *)(v58 + 4 * v84);
              if (v95 <= -32768) {
                int v95 = -32768;
              }
              if (v95 >= 0x7FFF) {
                LOWORD(v95) = 0x7FFF;
              }
              a3->i16[v84++] = v95;
            }
            while (a6 != v84);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        int v16 = v55 - 1;
      }
      while (v55);
    }
    else if (v10)
    {
      int32x4_t v225 = vdupq_n_s32(v15);
      do
      {
        int v132 = v16;
        unint64_t result = sub_100349FE8(v227, (int32x4_t **)v18, a3, a6);
        uint64_t v133 = *(void *)(v18 - 8);
        uint64_t v134 = *(int32x4_t **)v18;
        uint64_t v136 = *(void *)(v18 + 8);
        v18 += 8;
        uint64_t v135 = v136;
        if ((int)result <= (int)v17)
        {
          uint64_t v137 = (int)result;
          unint64_t v138 = v17 - (int)result;
          unint64_t result = (int)result;
          if (v138 < 0x1C) {
            goto LABEL_93;
          }
          uint64_t v139 = (v138 >> 2) + 1;
          unint64_t result = (int)result + 4 * (v139 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v140 = 2 * v137;
          uint64_t v141 = v137;
          int32x4_t v142 = (const float *)(v133 + 4 * v137);
          float32x4_t v143 = (const float *)&v134->i32[v141];
          int32x4_t v144 = (const float *)(v135 + v141 * 4);
          uint64_t v145 = v139 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            int v146 = v142;
            float32x4x4_t v232 = vld4q_f32(v146);
            v146 += 16;
            float32x4x4_t v243 = vld4q_f32(v146);
            int32x2_t v147 = v143;
            int16x8x4_t v237 = (int16x8x4_t)vld4q_f32(v147);
            v147 += 16;
            float32x4x4_t v248 = vld4q_f32(v147);
            uint64_t v148 = v144;
            float32x4x4_t v251 = vld4q_f32(v148);
            v148 += 16;
            int32x4_t v149 = vaddq_s32((int32x4_t)v243.val[0], v225);
            int32x4_t v150 = vaddq_s32((int32x4_t)v243.val[1], v225);
            int32x4_t v151 = vaddq_s32((int32x4_t)v243.val[2], v225);
            v243.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v243.val[3], v225);
            v243.val[1] = (float32x4_t)vsubq_s32(v149, vaddq_s32((int32x4_t)v248.val[0], (int32x4_t)v248.val[0]));
            v243.val[2] = (float32x4_t)vsubq_s32(v150, vaddq_s32((int32x4_t)v248.val[1], (int32x4_t)v248.val[1]));
            v243.val[3] = (float32x4_t)vsubq_s32(v151, vaddq_s32((int32x4_t)v248.val[2], (int32x4_t)v248.val[2]));
            float32x4x4_t v255 = vld4q_f32(v148);
            v237.val[0] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32((int32x4_t)v232.val[0], v225), vaddq_s32((int32x4_t)v237.val[0], (int32x4_t)v237.val[0])), (int32x4_t)v251.val[0])), vaddq_s32((int32x4_t)v243.val[1], (int32x4_t)v255.val[0]));
            v237.val[1] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32((int32x4_t)v232.val[1], v225), vaddq_s32((int32x4_t)v237.val[1], (int32x4_t)v237.val[1])), (int32x4_t)v251.val[1])), vaddq_s32((int32x4_t)v243.val[2], (int32x4_t)v255.val[1]));
            v237.val[2] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32((int32x4_t)v232.val[2], v225), vaddq_s32((int32x4_t)v237.val[2], (int32x4_t)v237.val[2])), (int32x4_t)v251.val[2])), vaddq_s32((int32x4_t)v243.val[3], (int32x4_t)v255.val[2]));
            v237.val[3] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32((int32x4_t)v232.val[3], v225), vaddq_s32((int32x4_t)v237.val[3], (int32x4_t)v237.val[3])), (int32x4_t)v251.val[3])), vaddq_s32(vsubq_s32((int32x4_t)v243.val[0], vaddq_s32((int32x4_t)v248.val[3], (int32x4_t)v248.val[3])), (int32x4_t)v255.val[3]));
            int32x2_t v152 = (__int16 *)((char *)a3 + v140);
            vst4q_s16(v152, v237);
            v140 += 64;
            v142 += 32;
            v143 += 32;
            v144 += 32;
            v145 -= 8;
          }
          while (v145);
          if (v139 != (v139 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_93:
            int32x2_t v153 = (int32x4_t *)(v133 + 4 * result);
            int32x2_t v154 = (int32x4_t *)((char *)v134 + 4 * result);
            uint64_t v155 = (int32x4_t *)(v135 + 4 * result);
            uint64_t v156 = 2 * result;
            do
            {
              int32x4_t v157 = *v153++;
              int32x4_t v158 = v157;
              int32x4_t v159 = *v154++;
              int32x4_t v160 = v159;
              int32x4_t v161 = *v155++;
              *(int16x4_t *)((char *)a3 + v156) = vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32(v158, v225), vaddq_s32(v160, v160)), v161));
              result += 4;
              v156 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          unint64_t v162 = a6 - (uint64_t)(int)result;
          unint64_t v163 = (int)result;
          if (v162 < 8) {
            goto LABEL_129;
          }
          unint64_t v163 = (v162 & 0xFFFFFFFFFFFFFFF8) + (int)result;
          BOOL v164 = (int32x4_t *)(v133 + 4 * (int)result);
          unint64_t v165 = (int32x4_t *)((char *)v134 + 4 * (int)result);
          unint64_t v166 = (int32x4_t *)(v135 + 4 * (int)result);
          uint64_t v167 = 2 * (int)result;
          unint64_t result = v162 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v168 = *v164;
            int32x4_t v169 = v164[1];
            v164 += 2;
            int32x4_t v170 = *v165;
            int32x4_t v171 = v165[1];
            v165 += 2;
            int32x4_t v172 = *v166;
            int32x4_t v173 = v166[1];
            v166 += 2;
            *(int16x8_t *)&a3->i8[v167] = vqmovn_high_s32(vqmovn_s32(vaddq_s32(vsubq_s32(vaddq_s32(v168, v225), vaddq_s32(v170, v170)), v172)), vaddq_s32(vsubq_s32(vaddq_s32(v169, v225), vaddq_s32(v171, v171)), v173));
            v167 += 16;
            result -= 8;
          }
          while (result);
          if (v162 != (v162 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_129:
            do
            {
              int v174 = *(_DWORD *)(v133 + 4 * v163) + v15 - 2 * v134->i32[v163] + *(_DWORD *)(v135 + 4 * v163);
              if (v174 <= -32768) {
                int v174 = -32768;
              }
              if (v174 >= 0x7FFF) {
                LOWORD(v174) = 0x7FFF;
              }
              a3->i16[v163++] = v174;
            }
            while (a6 != v163);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        int v16 = v132 - 1;
      }
      while (v132);
    }
    else
    {
      int32x4_t v220 = vdupq_n_s32(v9);
      int32x4_t v222 = vdupq_n_s32(v12);
      int32x4_t v219 = vdupq_n_s32(v15);
      do
      {
        int v226 = v16;
        unint64_t result = sub_100349FE8(v227, (int32x4_t **)v18, a3, a6);
        uint64_t v175 = *(void *)(v18 - 8);
        int32x4_t v176 = *(int32x4_t **)v18;
        uint64_t v178 = *(void *)(v18 + 8);
        v18 += 8;
        uint64_t v177 = v178;
        if ((int)result <= (int)v17)
        {
          uint64_t v179 = (int)result;
          unint64_t v180 = v17 - (int)result;
          unint64_t result = (int)result;
          if (v180 < 0x1C) {
            goto LABEL_113;
          }
          uint64_t v181 = (v180 >> 2) + 1;
          unint64_t result = (int)result + 4 * (v181 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v182 = 2 * v179;
          uint64_t v183 = v179;
          int32x4_t v184 = (const float *)(v175 + 4 * v179);
          int32x2_t v185 = (const float *)(v177 + v183 * 4);
          uint64_t v186 = (const float *)&v176->i32[v183];
          uint64_t v187 = v181 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v188 = v184;
            float32x4x4_t v233 = vld4q_f32(v188);
            v188 += 16;
            float32x4x4_t v238 = vld4q_f32(v188);
            int32x4_t v189 = v185;
            float32x4x4_t v244 = vld4q_f32(v189);
            v189 += 16;
            float32x4x4_t v249 = vld4q_f32(v189);
            int32x4_t v190 = v186;
            float32x4x4_t v252 = vld4q_f32(v190);
            v190 += 16;
            float32x4x4_t v256 = vld4q_f32(v190);
            int32x4_t v191 = vaddq_s32((int32x4_t)v249.val[0], (int32x4_t)v238.val[0]);
            int32x4_t v192 = vaddq_s32((int32x4_t)v249.val[1], (int32x4_t)v238.val[1]);
            int32x4_t v193 = vaddq_s32((int32x4_t)v249.val[2], (int32x4_t)v238.val[2]);
            v238.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v249.val[3], (int32x4_t)v238.val[3]);
            v249.val[1] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v252.val[0], v220), vaddq_s32((int32x4_t)v244.val[0], (int32x4_t)v233.val[0]), v222)), vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v256.val[0], v220), v191, v222));
            v249.val[2] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v252.val[1], v220), vaddq_s32((int32x4_t)v244.val[1], (int32x4_t)v233.val[1]), v222)), vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v256.val[1], v220), v192, v222));
            v249.val[3] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v252.val[2], v220), vaddq_s32((int32x4_t)v244.val[2], (int32x4_t)v233.val[2]), v222)), vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v256.val[2], v220), v193, v222));
            v252.val[0] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v252.val[3], v220), vaddq_s32((int32x4_t)v244.val[3], (int32x4_t)v233.val[3]), v222)), vmlaq_s32(vmlaq_s32(v219, (int32x4_t)v256.val[3], v220), (int32x4_t)v238.val[0], v222));
            uint64_t v194 = (__int16 *)((char *)a3 + v182);
            vst4q_s16(v194, *(int16x8x4_t *)((char *)&v249 + 16));
            v182 += 64;
            v184 += 32;
            v185 += 32;
            v186 += 32;
            v187 -= 8;
          }
          while (v187);
          if (v181 != (v181 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_113:
            unint64_t v195 = (int32x4_t *)(v175 + 4 * result);
            unint64_t v196 = (int32x4_t *)(v177 + 4 * result);
            unint64_t v197 = (int32x4_t *)((char *)v176 + 4 * result);
            uint64_t v198 = 2 * result;
            do
            {
              int32x4_t v199 = *v195++;
              int32x4_t v200 = v199;
              int32x4_t v201 = *v196++;
              int32x4_t v202 = vaddq_s32(v201, v200);
              int32x4_t v203 = *v197++;
              *(int16x4_t *)((char *)a3 + v198) = vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, v203, v220), v202, v222));
              result += 4;
              v198 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          unint64_t v204 = a6 - (uint64_t)(int)result;
          unint64_t v205 = (int)result;
          if (v204 < 8) {
            goto LABEL_130;
          }
          unint64_t v205 = (v204 & 0xFFFFFFFFFFFFFFF8) + (int)result;
          unint64_t v206 = (int32x4_t *)(v175 + 4 * (int)result);
          uint64_t v207 = (int32x4_t *)(v177 + 4 * (int)result);
          int32x4_t v208 = (int32x4_t *)((char *)v176 + 4 * (int)result);
          uint64_t v209 = 2 * (int)result;
          unint64_t result = v204 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v210 = *v206;
            int32x4_t v211 = v206[1];
            v206 += 2;
            int32x4_t v212 = *v207;
            int32x4_t v213 = v207[1];
            v207 += 2;
            int32x4_t v214 = vaddq_s32(v213, v211);
            int32x4_t v215 = vaddq_s32(v212, v210);
            int32x4_t v216 = *v208;
            int32x4_t v217 = v208[1];
            v208 += 2;
            *(int16x8_t *)&a3->i8[v209] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(vmlaq_s32(v219, v216, v220), v215, v222)), vmlaq_s32(vmlaq_s32(v219, v217, v220), v214, v222));
            v209 += 16;
            result -= 8;
          }
          while (result);
          if (v204 != (v204 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_130:
            do
            {
              int v218 = v15 + v176->i32[v205] * v9 + (*(_DWORD *)(v177 + 4 * v205) + *(_DWORD *)(v175 + 4 * v205)) * v12;
              if (v218 <= -32768) {
                int v218 = -32768;
              }
              if (v218 >= 0x7FFF) {
                LOWORD(v218) = 0x7FFF;
              }
              a3->i16[v205++] = v218;
            }
            while (a6 != v205);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        int v16 = v226 - 1;
      }
      while (v226);
    }
  }
  else
  {
    int32x4_t v223 = vdupq_n_s32(v15);
    if (v11)
    {
      do
      {
        int v19 = v16;
        unint64_t result = sub_100349FE8(v227, (int32x4_t **)v18, a3, a6);
        uint64_t v21 = *(void *)(v18 + 8);
        v18 += 8;
        uint64_t v20 = v21;
        if (v12 >= 0) {
          uint64_t v22 = *(void *)(v18 - 16);
        }
        else {
          uint64_t v22 = v20;
        }
        if (v12 < 0) {
          uint64_t v20 = *(void *)(v18 - 16);
        }
        if ((int)result <= (int)v17)
        {
          uint64_t v23 = (int)result;
          unint64_t v24 = v17 - (int)result;
          unint64_t result = (int)result;
          if (v24 < 0x1C) {
            goto LABEL_31;
          }
          uint64_t v25 = (v24 >> 2) + 1;
          unint64_t result = (int)result + 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v26 = 2 * v23;
          uint64_t v27 = 4 * v23;
          float32x4_t v28 = (const float *)(v20 + 4 * v23);
          uint64_t v29 = (const float *)(v22 + v27);
          uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            int32x4_t v31 = v28;
            float32x4x4_t v229 = vld4q_f32(v31);
            v31 += 16;
            float32x4x4_t v234 = vld4q_f32(v31);
            uint64_t v32 = v29;
            float32x4x4_t v240 = vld4q_f32(v32);
            v32 += 16;
            float32x4x4_t v245 = vld4q_f32(v32);
            v253.val[0] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32((int32x4_t)v229.val[0], v223), (int32x4_t)v240.val[0])), vsubq_s32(vaddq_s32((int32x4_t)v234.val[0], v223), (int32x4_t)v245.val[0]));
            v253.val[1] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32((int32x4_t)v229.val[1], v223), (int32x4_t)v240.val[1])), vsubq_s32(vaddq_s32((int32x4_t)v234.val[1], v223), (int32x4_t)v245.val[1]));
            v253.val[2] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32((int32x4_t)v229.val[2], v223), (int32x4_t)v240.val[2])), vsubq_s32(vaddq_s32((int32x4_t)v234.val[2], v223), (int32x4_t)v245.val[2]));
            v253.val[3] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32((int32x4_t)v229.val[3], v223), (int32x4_t)v240.val[3])), vsubq_s32(vaddq_s32((int32x4_t)v234.val[3], v223), (int32x4_t)v245.val[3]));
            uint64_t v33 = (__int16 *)((char *)a3 + v26);
            vst4q_s16(v33, v253);
            v26 += 64;
            v28 += 32;
            v29 += 32;
            v30 -= 8;
          }
          while (v30);
          if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_31:
            uint64_t v34 = (int32x4_t *)(v20 + 4 * result);
            uint64_t v35 = (int32x4_t *)(v22 + 4 * result);
            uint64_t v36 = 2 * result;
            do
            {
              int32x4_t v37 = *v34++;
              int32x4_t v38 = v37;
              int32x4_t v39 = *v35++;
              *(int16x4_t *)((char *)a3 + v36) = vqmovn_s32(vsubq_s32(vaddq_s32(v38, v223), v39));
              result += 4;
              v36 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          unint64_t v40 = a6 - (uint64_t)(int)result;
          unint64_t v41 = (int)result;
          if (v40 < 0x10) {
            goto LABEL_131;
          }
          unint64_t v41 = (v40 & 0xFFFFFFFFFFFFFFF0) + (int)result;
          uint64_t v42 = (int16x8_t *)((char *)a3 + 2 * (int)result);
          uint64_t v43 = (int32x4_t *)(v20 + 4 * (int)result + 32);
          uint64_t v44 = (int32x4_t *)(v22 + 4 * (int)result + 32);
          unint64_t v45 = v40 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int32x4_t v47 = v43[-2];
            int32x4_t v46 = v43[-1];
            int32x4_t v49 = *v43;
            int32x4_t v48 = v43[1];
            v43 += 4;
            int32x4_t v50 = v44[-2];
            int32x4_t v51 = v44[-1];
            int32x4_t v52 = *v44;
            int32x4_t v53 = v44[1];
            v44 += 4;
            *uint64_t v42 = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32(v47, v223), v50)), vsubq_s32(vaddq_s32(v46, v223), v51));
            v42[1] = vqmovn_high_s32(vqmovn_s32(vsubq_s32(vaddq_s32(v49, v223), v52)), vsubq_s32(vaddq_s32(v48, v223), v53));
            v42 += 2;
            v45 -= 16;
          }
          while (v45);
          if (v40 != (v40 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_131:
            do
            {
              int v54 = *(_DWORD *)(v20 + 4 * v41) + v15 - *(_DWORD *)(v22 + 4 * v41);
              if (v54 <= -32768) {
                int v54 = -32768;
              }
              if (v54 >= 0x7FFF) {
                LOWORD(v54) = 0x7FFF;
              }
              a3->i16[v41++] = v54;
            }
            while (a6 != v41);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        int v16 = v19 - 1;
      }
      while (v19);
    }
    else
    {
      int32x4_t v221 = vdupq_n_s32(v12);
      do
      {
        int v96 = v16;
        unint64_t result = sub_100349FE8(v227, (int32x4_t **)v18, a3, a6);
        uint64_t v98 = *(void *)(v18 + 8);
        v18 += 8;
        uint64_t v97 = v98;
        uint64_t v99 = *(void *)(v18 - 16);
        if ((int)result <= (int)v17)
        {
          uint64_t v100 = (int)result;
          unint64_t v101 = v17 - (int)result;
          unint64_t result = (int)result;
          if (v101 < 0x1C) {
            goto LABEL_72;
          }
          uint64_t v102 = (v101 >> 2) + 1;
          unint64_t result = (int)result + 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v103 = 2 * v100;
          uint64_t v104 = 4 * v100;
          uint64_t v105 = (const float *)(v97 + 4 * v100);
          unint64_t v106 = (const float *)(v99 + v104);
          uint64_t v107 = v102 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            unint64_t v108 = v105;
            float32x4x4_t v231 = vld4q_f32(v108);
            v108 += 16;
            float32x4x4_t v236 = vld4q_f32(v108);
            unint64_t v109 = v106;
            float32x4x4_t v242 = vld4q_f32(v109);
            v109 += 16;
            float32x4x4_t v247 = vld4q_f32(v109);
            v239.val[0] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32((int32x4_t)v231.val[0], (int32x4_t)v242.val[0]), v221)), vmlaq_s32(v223, vsubq_s32((int32x4_t)v236.val[0], (int32x4_t)v247.val[0]), v221));
            v239.val[1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32((int32x4_t)v231.val[1], (int32x4_t)v242.val[1]), v221)), vmlaq_s32(v223, vsubq_s32((int32x4_t)v236.val[1], (int32x4_t)v247.val[1]), v221));
            v239.val[2] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32((int32x4_t)v231.val[2], (int32x4_t)v242.val[2]), v221)), vmlaq_s32(v223, vsubq_s32((int32x4_t)v236.val[2], (int32x4_t)v247.val[2]), v221));
            v239.val[3] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32((int32x4_t)v231.val[3], (int32x4_t)v242.val[3]), v221)), vmlaq_s32(v223, vsubq_s32((int32x4_t)v236.val[3], (int32x4_t)v247.val[3]), v221));
            uint64_t v110 = (__int16 *)((char *)a3 + v103);
            vst4q_s16(v110, v239);
            v103 += 64;
            v105 += 32;
            v106 += 32;
            v107 -= 8;
          }
          while (v107);
          if (v102 != (v102 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_72:
            unint64_t v111 = (int32x4_t *)(v97 + 4 * result);
            unint64_t v112 = (int32x4_t *)(v99 + 4 * result);
            uint64_t v113 = 2 * result;
            do
            {
              int32x4_t v114 = *v111++;
              int32x4_t v115 = v114;
              int32x4_t v116 = *v112++;
              *(int16x4_t *)((char *)a3 + v113) = vqmovn_s32(vmlaq_s32(v223, vsubq_s32(v115, v116), v221));
              result += 4;
              v113 += 8;
            }
            while (result <= v17);
          }
        }
        if ((int)result < a6)
        {
          unint64_t v117 = a6 - (uint64_t)(int)result;
          unint64_t v118 = (int)result;
          if (v117 < 0x10) {
            goto LABEL_132;
          }
          unint64_t v118 = (v117 & 0xFFFFFFFFFFFFFFF0) + (int)result;
          unint64_t v119 = (int16x8_t *)((char *)a3 + 2 * (int)result);
          uint64x2_t v120 = (int32x4_t *)(v97 + 4 * (int)result + 32);
          int8x8_t v121 = (int32x4_t *)(v99 + 4 * (int)result + 32);
          unint64_t v122 = v117 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int32x4_t v123 = v120[-2];
            int32x4_t v124 = v120[-1];
            int32x4_t v125 = *v120;
            int32x4_t v126 = v120[1];
            v120 += 4;
            int32x4_t v127 = v121[-2];
            int32x4_t v128 = v121[-1];
            int32x4_t v129 = *v121;
            int32x4_t v130 = v121[1];
            v121 += 4;
            *unint64_t v119 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32(v123, v127), v221)), vmlaq_s32(v223, vsubq_s32(v124, v128), v221));
            v119[1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v223, vsubq_s32(v125, v129), v221)), vmlaq_s32(v223, vsubq_s32(v126, v130), v221));
            v119 += 2;
            v122 -= 16;
          }
          while (v122);
          if (v117 != (v117 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_132:
            do
            {
              int v131 = v15 + (*(_DWORD *)(v97 + 4 * v118) - *(_DWORD *)(v99 + 4 * v118)) * v12;
              if (v131 <= -32768) {
                int v131 = -32768;
              }
              if (v131 >= 0x7FFF) {
                LOWORD(v131) = 0x7FFF;
              }
              a3->i16[v118++] = v131;
            }
            while (a6 != v118);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v228);
        int v16 = v96 - 1;
      }
      while (v96);
    }
  }
  return result;
}

uint64_t sub_100349194(uint64_t a1, uint64_t a2, int a3, double a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 8) = -1;
  *(void *)a1 = off_10049A8B8;
  *(_DWORD *)(a1 + 16) = 1124007936;
  BOOL v11 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  signed int v12 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  BOOL v13 = (_DWORD *)(a1 + 24);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(_DWORD *)(a1 + 128) = 1124007936;
  uint64_t v14 = (_DWORD *)(a1 + 128);
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  unsigned int v15 = (int *)(a1 + 132);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = a1 + 136;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  uint64_t v16 = a1 + 120;
  if ((*(unsigned char *)(a2 + 1) & 0x40) == 0)
  {
    LODWORD(v35) = 33619968;
    uint64_t v36 = a1 + 16;
    uint64_t v37 = 0;
    sub_10025401C(a2, (uint64_t)&v35);
    goto LABEL_17;
  }
  if (v11 != (_DWORD *)a2)
  {
    uint64_t v17 = *(void *)(a2 + 56);
    if (v17)
    {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
      uint64_t v18 = *(void *)(a1 + 72);
      if (v18)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      _DWORD *v11 = *(_DWORD *)a2;
      int v22 = *(_DWORD *)(a2 + 4);
      if (v22 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v22;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v23 = *(void **)(a2 + 72);
        unint64_t v24 = *(void **)(a1 + 88);
        void *v24 = *v23;
        v24[1] = v23[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v20 + 4 * v19++) = 0;
        uint64_t v21 = *v12;
      }
      while (v19 < v21);
      _DWORD *v11 = *(_DWORD *)a2;
      if ((int)v21 <= 2)
      {
        int v22 = *(_DWORD *)(a2 + 4);
        if (v22 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v11, a2);
    goto LABEL_16;
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 224) = (uint64_t)rint(a4);
  uint64_t v25 = (_DWORD *)(a6 + 8);
  *(void *)(a1 + 120) = *(void *)a6;
  if (v16 != a6)
  {
    uint64_t v26 = *(void *)(a6 + 64);
    if (v26) {
      atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
    }
    uint64_t v27 = *(void *)(a1 + 184);
    if (v27 && atomic_fetch_add((atomic_uint *volatile)(v27 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v14);
    }
    *(void *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    if (*(int *)(a1 + 132) <= 0)
    {
      _DWORD *v14 = *v25;
      int v31 = *(_DWORD *)(a6 + 12);
      if (v31 <= 2)
      {
LABEL_28:
        *(_DWORD *)(a1 + 132) = v31;
        *(void *)(a1 + 136) = *(void *)(a6 + 16);
        uint64_t v32 = *(void **)(a6 + 80);
        uint64_t v33 = *(void **)(a1 + 200);
        *uint64_t v33 = *v32;
        v33[1] = v32[1];
LABEL_31:
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a6 + 24);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a6 + 40);
        *(_OWORD *)(a1 + 176) = *(_OWORD *)(a6 + 56);
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = *(void *)(a1 + 192);
      do
      {
        *(_DWORD *)(v29 + 4 * v28++) = 0;
        uint64_t v30 = *v15;
      }
      while (v28 < v30);
      _DWORD *v14 = *v25;
      if ((int)v30 <= 2)
      {
        int v31 = *(_DWORD *)(a6 + 12);
        if (v31 <= 2) {
          goto LABEL_28;
        }
      }
    }
    sub_1002931A8((uint64_t)v14, a6 + 8);
    goto LABEL_31;
  }
LABEL_32:
  if ((*v11 & 0xFFF) != 4 || *v13 != 1 && *(_DWORD *)(a1 + 28) != 1)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    qmemcpy((void *)sub_1002D19D8(&v35, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v35, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_100349538(_Unwind_Exception *a1)
{
  sub_100332938(v2);
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100349574(uint64_t a1)
{
  *(void *)a1 = off_10049A8B8;
  uint64_t v2 = *(void *)(a1 + 184);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 128);
  }
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (*(int *)(a1 + 132) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 192);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 132));
  }
  uint64_t v5 = *(void **)(a1 + 200);
  if (v5 != (void *)(a1 + 208)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  unsigned int v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96)) {
    j__free(v9);
  }
  return a1;
}

void sub_100349698(uint64_t a1)
{
  sub_100349574(a1);

  operator delete();
}

int64_t sub_1003496D0(int64_t result, uint64_t a2, int16x4_t *a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6 = a6;
  int v8 = *(_DWORD *)(result + 8);
  int v94 = v8;
  if (v8 >= 0) {
    int v9 = *(_DWORD *)(result + 8);
  }
  else {
    int v9 = v8 + 1;
  }
  int v10 = v9 >> 1;
  uint64_t v11 = *(void *)(result + 32);
  uint64_t v12 = (uint64_t)v9 >> 1;
  BOOL v13 = (const float *)(v11 + 4 * v10);
  signed int v14 = *(_DWORD *)(result + 224);
  unsigned int v15 = (int32x4_t **)(a2 + 8 * v10);
  signed int v93 = v14;
  if (*(unsigned char *)(result + 228))
  {
    if (!a5) {
      return result;
    }
    uint64_t v92 = result + 120;
    uint64_t v89 = a4;
    uint64_t v48 = (v12 + 1);
    int64_t v49 = (int)a6 - 4;
    uint64_t v50 = (int)a6;
    unint64_t v51 = v48 - 1;
    uint64_t v52 = a2 + 8 * v12;
    int32x4_t v53 = (uint64_t *)(v52 - 8);
    uint64_t v98 = v11 + 4 * v12 + 8;
    uint64_t v99 = (void *)(v52 + 16);
    int32x4_t v87 = vdupq_n_s32(v14);
    while (1)
    {
      int v96 = a5;
      uint64_t v54 = v6;
      unint64_t result = sub_100349FE8(v92, v15, a3, v6);
      if ((int)result <= (int)v49)
      {
        int v55 = *v15;
        unint64_t result = (int)result;
        int32x4_t v56 = (int32x4_t)vld1q_dup_f32(v13);
        do
        {
          int32x4_t v57 = vmlaq_s32(v87, *(int32x4_t *)((char *)v55 + 4 * result), v56);
          if (v94 >= 2)
          {
            uint64_t v58 = v53;
            uint64_t v59 = 1;
            do
            {
              uint64_t v60 = *v58--;
              unint64_t v61 = &v13[v59];
              int32x4_t v62 = (int32x4_t)vld1q_dup_f32(v61);
              int32x4_t v57 = vmlaq_s32(v57, vaddq_s32(*(int32x4_t *)(v60 + 4 * result), *(int32x4_t *)((char *)v15[v59++] + 4 * result)), v62);
            }
            while (v48 != v59);
          }
          *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32(v57);
          result += 4;
        }
        while (result <= v49);
        uint64_t v54 = a6;
      }
      uint64_t v6 = v54;
      if ((int)result >= (int)v54) {
        goto LABEL_47;
      }
      float v63 = *v13;
      uint64_t v64 = *v15;
      unint64_t v65 = (int)result;
      if (v94 >= 2) {
        break;
      }
      unint64_t v66 = v50 - (int)result;
      if (v66 < 0x10) {
        goto LABEL_83;
      }
      int32x4_t v67 = vdupq_n_s32(LODWORD(v63));
      uint64_t v68 = (int32x4_t *)((char *)v64 + 4 * (int)result + 32);
      uint64_t v69 = 2 * (int)result;
      unint64_t v70 = v66 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int32x4_t v72 = v68[-2];
        int32x4_t v71 = v68[-1];
        int32x4_t v74 = *v68;
        int32x4_t v73 = v68[1];
        v68 += 4;
        int32x4_t v75 = (int16x8_t *)((char *)a3 + v69);
        *int32x4_t v75 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v87, v72, v67)), vmlaq_s32(v87, v71, v67));
        v75[1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v87, v74, v67)), vmlaq_s32(v87, v73, v67));
        v69 += 32;
        v70 -= 16;
      }
      while (v70);
      unint64_t v65 = (v66 & 0xFFFFFFFFFFFFFFF0) + (int)result;
      if (v66 != (v66 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_83:
        do
        {
          int v76 = v93 + v64->i32[v65] * LODWORD(v63);
          if (v76 <= -32768) {
            int v76 = -32768;
          }
          if (v76 >= 0x7FFF) {
            LOWORD(v76) = 0x7FFF;
          }
          a3->i16[v65++] = v76;
        }
        while (v50 != v65);
      }
LABEL_47:
      a3 = (int16x4_t *)((char *)a3 + v89);
      ++v15;
      ++v53;
      ++v99;
      a5 = v96 - 1;
      if (v96 == 1) {
        return result;
      }
    }
    while (1)
    {
      int v77 = v93 + v64->i32[v65] * LODWORD(v63);
      if (v51 >= 2)
      {
        int v79 = 0;
        int32x4_t v80 = v99;
        int32x4_t v81 = (_DWORD *)v98;
        unint64_t v82 = (v48 - 1) & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v83 = v53;
        do
        {
          unint64_t result = *(v81 - 1);
          v77 += (*(_DWORD *)(*v83 + 4 * v65) + *(_DWORD *)(*(v80 - 1) + 4 * v65)) * result;
          v79 += (*(_DWORD *)(*(v83 - 1) + 4 * v65) + *(_DWORD *)(*v80 + 4 * v65)) * *v81;
          v83 -= 2;
          v81 += 2;
          v80 += 2;
          v82 -= 2;
        }
        while (v82);
        v77 += v79;
        uint64_t v78 = (v48 - 1) | 1;
        if (v51 == ((v48 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v78 = 1;
      }
      uint64_t v84 = -1 * v78;
      do
      {
        v77 += (v15[v84]->i32[v65] + v15[v78]->i32[v65]) * LODWORD(v13[v78]);
        ++v78;
        --v84;
      }
      while (v48 != v78);
LABEL_68:
      if (v77 <= -32768) {
        int v77 = -32768;
      }
      if (v77 >= 0x7FFF) {
        LOWORD(v77) = 0x7FFF;
      }
      a3->i16[v65++] = v77;
      if (v65 == v50) {
        goto LABEL_47;
      }
    }
  }
  if (a5)
  {
    uint64_t v88 = result + 120;
    if (v14 <= -32768) {
      int v16 = -32768;
    }
    else {
      int v16 = *(_DWORD *)(result + 224);
    }
    if (v16 >= 0x7FFF) {
      unsigned int v17 = 0x7FFF;
    }
    else {
      unsigned int v17 = v16;
    }
    uint64_t v86 = a4;
    uint64_t v18 = (v12 + 1);
    int64_t v19 = (int)a6 - 4;
    uint64_t v20 = (int)a6;
    unint64_t v21 = v18 - 1;
    uint64_t v22 = a2 + 8 * v12;
    uint64_t v23 = (uint64_t *)(v22 - 8);
    uint64_t v97 = v11 + 4 * v12 + 8;
    unint64_t v24 = (void *)(v22 + 16);
    int16x8_t v91 = vdupq_n_s16(v17);
    int32x4_t v85 = vdupq_n_s32(v14);
    while (1)
    {
      int v95 = a5;
      uint64_t v25 = v6;
      unint64_t result = sub_100349FE8(v88, v15, a3, v6);
      if ((int)result <= (int)v19)
      {
        unint64_t result = (int)result;
        if (v94 >= 2)
        {
          do
          {
            uint64_t v27 = v23;
            uint64_t v28 = 1;
            int32x4_t v29 = v85;
            do
            {
              uint64_t v30 = *v27--;
              int v31 = &v13[v28];
              int32x4_t v32 = (int32x4_t)vld1q_dup_f32(v31);
              int32x4_t v29 = vmlaq_s32(v29, vsubq_s32(*(int32x4_t *)((char *)v15[v28++] + 4 * result), *(int32x4_t *)(v30 + 4 * result)), v32);
            }
            while (v18 != v28);
            *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32(v29);
            result += 4;
          }
          while (result <= v19);
        }
        else
        {
          uint64_t v26 = 2 * (int)result;
          do
          {
            *(int16x4_t *)((char *)a3 + v26) = *(int16x4_t *)v91.i8;
            result += 4;
            v26 += 8;
          }
          while (result <= v19);
        }
        uint64_t v25 = a6;
      }
      uint64_t v6 = v25;
      if ((int)result >= (int)v25) {
        goto LABEL_13;
      }
      unint64_t v33 = (int)result;
      if (v94 >= 2) {
        break;
      }
      unint64_t v34 = v20 - (int)result;
      if (v34 < 0x10) {
        goto LABEL_84;
      }
      uint64_t v35 = 2 * (int)result;
      unint64_t v36 = v34 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint64_t v37 = (int16x8_t *)((char *)a3 + v35);
        *uint64_t v37 = v91;
        v37[1] = v91;
        v35 += 32;
        v36 -= 16;
      }
      while (v36);
      unint64_t v33 = (v34 & 0xFFFFFFFFFFFFFFF0) + (int)result;
      if (v34 != (v34 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_84:
        do
          a3->i16[v33++] = v17;
        while (v20 != v33);
      }
LABEL_13:
      a3 = (int16x4_t *)((char *)a3 + v86);
      ++v15;
      ++v23;
      ++v24;
      a5 = v95 - 1;
      if (v95 == 1) {
        return result;
      }
    }
    while (v21 >= 2)
    {
      int v41 = 0;
      uint64_t v42 = v24;
      uint64_t v43 = (_DWORD *)v97;
      unint64_t v44 = (v18 - 1) & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v45 = v23;
      signed int v46 = v93;
      do
      {
        unint64_t result = (*(_DWORD *)(*(v42 - 1) + 4 * v33) - *(_DWORD *)(*v45 + 4 * v33));
        v46 += result * *(v43 - 1);
        v41 += (*(_DWORD *)(*v42 + 4 * v33) - *(_DWORD *)(*(v45 - 1) + 4 * v33)) * *v43;
        v45 -= 2;
        v43 += 2;
        v42 += 2;
        v44 -= 2;
      }
      while (v44);
      int v40 = v41 + v46;
      uint64_t v39 = (v18 - 1) | 1;
      if (v21 != ((v18 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_42;
      }
LABEL_31:
      if (v40 <= -32768) {
        int v38 = -32768;
      }
      else {
        int v38 = v40;
      }
      if (v38 >= 0x7FFF) {
        LOWORD(v38) = 0x7FFF;
      }
      a3->i16[v33++] = v38;
      if (v33 == v20) {
        goto LABEL_13;
      }
    }
    uint64_t v39 = 1;
    int v40 = v93;
LABEL_42:
    uint64_t v47 = -1 * v39;
    do
    {
      v40 += (v15[v39]->i32[v33] - v15[v47]->i32[v33]) * LODWORD(v13[v39]);
      ++v39;
      --v47;
    }
    while (v18 != v39);
    goto LABEL_31;
  }
  return result;
}

void sub_100349CDC(uint64_t a1)
{
  sub_100349574(a1);

  operator delete();
}

int64_t sub_100349D14(int64_t result, int32x4_t **a2, int16x4_t *a3, int a4, int a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v7 = a2;
    int v8 = *(const float **)(result + 32);
    unsigned int v9 = *(_DWORD *)(result + 224);
    uint64_t v10 = *(unsigned int *)(result + 8);
    uint64_t v42 = a4;
    uint64_t v43 = result + 120;
    int64_t v11 = (int)a6 - 4;
    uint64_t v12 = (int)a6;
    BOOL v13 = a2 + 2;
    int32x4_t v41 = vdupq_n_s32(v9);
    while (1)
    {
      int v44 = a5;
      uint64_t v14 = a6;
      unint64_t result = sub_100349FE8(v43, v7, a3, a6);
      if ((int)result <= (int)v11)
      {
        unsigned int v15 = *v7;
        unint64_t result = (int)result;
        int32x4_t v16 = (int32x4_t)vld1q_dup_f32(v8);
        do
        {
          int32x4_t v17 = vmlaq_s32(v41, *(int32x4_t *)((char *)v15 + 4 * result), v16);
          if ((int)v10 >= 2)
          {
            for (uint64_t i = 1; i != v10; ++i)
            {
              int64_t v19 = &v8[i];
              int32x4_t v20 = (int32x4_t)vld1q_dup_f32(v19);
              int32x4_t v17 = vmlaq_s32(v17, *(int32x4_t *)((char *)v7[i] + 4 * result), v20);
            }
          }
          *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32(v17);
          result += 4;
        }
        while (result <= v11);
      }
      a6 = v14;
      if ((int)result >= (int)v14) {
        goto LABEL_3;
      }
      float v21 = *v8;
      uint64_t v22 = *v7;
      unint64_t v23 = (int)result;
      if ((int)v10 >= 2) {
        break;
      }
      unint64_t v24 = v12 - (int)result;
      if (v24 < 0x10) {
        goto LABEL_37;
      }
      int32x4_t v25 = vdupq_n_s32(LODWORD(v21));
      uint64_t v26 = (int32x4_t *)((char *)v22 + 4 * (int)result + 32);
      uint64_t v27 = 2 * (int)result;
      unint64_t v28 = v24 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int32x4_t v30 = v26[-2];
        int32x4_t v29 = v26[-1];
        int32x4_t v32 = *v26;
        int32x4_t v31 = v26[1];
        v26 += 4;
        unint64_t v33 = (int16x8_t *)((char *)a3 + v27);
        *unint64_t v33 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v41, v30, v25)), vmlaq_s32(v41, v29, v25));
        v33[1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v41, v32, v25)), vmlaq_s32(v41, v31, v25));
        v27 += 32;
        v28 -= 16;
      }
      while (v28);
      unint64_t v23 = (v24 & 0xFFFFFFFFFFFFFFF0) + (int)result;
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_37:
        do
        {
          int v34 = v9 + v22->i32[v23] * LODWORD(v21);
          if (v34 <= -32768) {
            int v34 = -32768;
          }
          if (v34 >= 0x7FFF) {
            LOWORD(v34) = 0x7FFF;
          }
          a3->i16[v23++] = v34;
        }
        while (v12 != v23);
      }
LABEL_3:
      a3 = (int16x4_t *)((char *)a3 + v42);
      ++v7;
      ++v13;
      a5 = v44 - 1;
      if (v44 == 1) {
        return result;
      }
    }
    while (1)
    {
      int v35 = v9 + v22->i32[v23] * LODWORD(v21);
      if (v10 >= 3)
      {
        int v37 = 0;
        int v38 = v13;
        uint64_t v39 = v8 + 2;
        unint64_t v40 = (v10 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          unint64_t result = *(unsigned int *)(*v38 + 4 * v23);
          v35 += *(_DWORD *)(*(v38 - 1) + 4 * v23) * *(v39 - 1);
          v37 += result * *v39;
          v39 += 2;
          v38 += 2;
          v40 -= 2;
        }
        while (v40);
        v35 += v37;
        uint64_t v36 = (v10 - 1) | 1;
        if (v10 - 1 == ((v10 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v36 = 1;
      }
      do
      {
        v35 += v7[v36]->i32[v23] * LODWORD(v8[v36]);
        ++v36;
      }
      while (v10 != v36);
LABEL_23:
      if (v35 <= -32768) {
        int v35 = -32768;
      }
      if (v35 >= 0x7FFF) {
        LOWORD(v35) = 0x7FFF;
      }
      a3->i16[v23++] = v35;
      if (v23 == v12) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

unint64_t sub_100349FE8(uint64_t a1, int32x4_t **a2, int16x4_t *a3, int a4)
{
  unint64_t result = sub_1002D21FC(100);
  if (result)
  {
    int v10 = *(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 20);
    if (v10 - 1 >= 0) {
      --v10;
    }
    uint64_t v11 = *(void *)(a1 + 24) + 4 * (v10 >> 1);
    uint64_t v12 = *(a2 - 1);
    BOOL v13 = a2[1];
    uint64_t v14 = (const float *)(a1 + 4);
    float32x4_t v15 = vld1q_dup_f32(v14);
    int32x4_t v16 = vcvtq_s32_f32(v15);
    if (*(unsigned char *)a1)
    {
      uint64_t v18 = *a2;
      v9.i32[0] = *(_DWORD *)v11;
      if (*(float *)v11 == 2.0 && *(float *)(v11 + 4) == 1.0)
      {
        if (a4 >= 4)
        {
          unint64_t result = 0;
          do
          {
            int32x4_t v26 = *v12++;
            int32x4_t v27 = v26;
            int32x4_t v28 = *v18++;
            int32x4_t v29 = v28;
            int32x4_t v30 = *v13++;
            *a3++ = vqmovn_s32(vaddq_s32(vaddq_s32(vaddq_s32(v27, v16), v30), vqshlq_n_s32(v29, 1uLL)));
            result += 4;
          }
          while (result <= (a4 - 4));
        }
        else
        {
          return 0;
        }
      }
      else if (*(float *)v9.i32 == -2.0 && *(float *)(v11 + 4) == 1.0)
      {
        if (a4 >= 4)
        {
          unint64_t result = 0;
          do
          {
            int32x4_t v31 = *v12++;
            int32x4_t v32 = v31;
            int32x4_t v33 = *v18++;
            int32x4_t v34 = v33;
            int32x4_t v35 = *v13++;
            *a3++ = vqmovn_s32(vsubq_s32(vaddq_s32(vaddq_s32(v32, v16), v35), vqshlq_n_s32(v34, 1uLL)));
            result += 4;
          }
          while (result <= (a4 - 4));
        }
        else
        {
          return 0;
        }
      }
      else if (*(float *)v9.i32 == 10.0 && *(float *)(v11 + 4) == 3.0)
      {
        if (a4 >= 4)
        {
          unint64_t result = 0;
          v44.i64[0] = 0xA0000000ALL;
          v44.i64[1] = 0xA0000000ALL;
          v45.i64[0] = 0x300000003;
          v45.i64[1] = 0x300000003;
          do
          {
            int32x4_t v46 = *v12++;
            int32x4_t v47 = v46;
            int32x4_t v48 = *v18++;
            int32x4_t v49 = v48;
            int32x4_t v50 = *v13++;
            *a3++ = vqmovn_s32(vmlaq_s32(vmlaq_s32(v16, v49, v44), vaddq_s32(v50, v47), v45));
            result += 4;
          }
          while (result <= (a4 - 4));
        }
        else
        {
          return 0;
        }
      }
      else if (a4 >= 4)
      {
        unint64_t result = 0;
        uint64_t v36 = (const float *)(v11 + 4);
        float32x4_t v37 = (float32x4_t)vdupq_lane_s32(v9, 0);
        float32x4_t v38 = vld1q_dup_f32(v36);
        do
        {
          int32x4_t v39 = *v12++;
          int32x4_t v40 = v39;
          int32x4_t v41 = *v18++;
          int32x4_t v42 = v41;
          int32x4_t v43 = *v13++;
          *a3++ = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(vmlaq_f32(v15, v37, vcvtq_f32_s32(v42)), v38, vcvtq_f32_s32(vaddq_s32(v43, v40)))));
          result += 4;
        }
        while (result <= (a4 - 4));
      }
      else
      {
        return 0;
      }
    }
    else
    {
      v9.i32[0] = *(_DWORD *)(v11 + 4);
      if (fabsf(*(float *)v9.i32) == 1.0 && *(float *)v9.i32 == (float)-*(float *)(v11 - 4))
      {
        if (*(float *)v9.i32 >= 0.0) {
          int32x4_t v17 = *(a2 - 1);
        }
        else {
          int32x4_t v17 = a2[1];
        }
        if (*(float *)v9.i32 >= 0.0) {
          uint64_t v12 = a2[1];
        }
        if (a4 >= 4)
        {
          unint64_t result = 0;
          do
          {
            int32x4_t v23 = *v17++;
            int32x4_t v24 = v23;
            int32x4_t v25 = *v12++;
            *a3++ = vqmovn_s32(vqaddq_s32(vsubq_s32(v25, v24), v16));
            result += 4;
          }
          while (result <= (a4 - 4));
        }
        else
        {
          return 0;
        }
      }
      else if (a4 >= 4)
      {
        unint64_t result = 0;
        float32x4_t v19 = (float32x4_t)vdupq_lane_s32(v9, 0);
        do
        {
          int32x4_t v20 = *v12++;
          int32x4_t v21 = v20;
          int32x4_t v22 = *v13++;
          *a3++ = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v15, v19, vcvtq_f32_s32(vsubq_s32(v22, v21)))));
          result += 4;
        }
        while (result <= (a4 - 4));
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_10034A300()
{
}

uint64_t sub_10034A314(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10034A394(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v6 = sub_10034A460(a1, a2, a3, a4, a5);
  *(void *)uint64_t v6 = off_10049A928;
  if (*(_DWORD *)(v6 + 8) != 3)
  {
    v8[0] = 0;
    v8[1] = 0;
    *(_OWORD *)sub_1002D19D8(v8, 16) = *(_OWORD *)"this->ksize == 3";
    sub_1002D2278(-215, v8, "SymmColumnSmallFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3420);
  }
  return a1;
}

void sub_10034A438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_10034A540(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034A460(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_10034B590(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049A9A0;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10034A518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_10034B814(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034A540(uint64_t a1)
{
  *(void *)a1 = off_10049A9D0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

uint64_t sub_10034A5F0(uint64_t a1)
{
  *(void *)a1 = off_10049A9D0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034A6A0(uint64_t a1)
{
  *(void *)a1 = off_10049A9D0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_10034A770(unint64_t result, uint64_t a2, unint64_t a3, int a4, int a5, int a6, double a7, double a8, double a9)
{
  unint64_t v9 = a3;
  int v10 = *(_DWORD *)(result + 8);
  if (v10 >= 0) {
    int v11 = *(_DWORD *)(result + 8);
  }
  else {
    int v11 = v10 + 1;
  }
  uint64_t v12 = (float *)(*(void *)(result + 32) + 4 * (v11 >> 1));
  float v13 = *v12;
  if (*v12 == 2.0)
  {
    BOOL v14 = v12[1] == 1.0;
    if (v13 == -2.0) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v14 = 0;
    if (v13 == -2.0)
    {
LABEL_6:
      BOOL v181 = v12[1] == 1.0;
      *(float *)&a8 = v12[1];
      if (v13 == 0.0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  BOOL v181 = 0;
  *(float *)&a8 = v12[1];
  if (v13 == 0.0)
  {
LABEL_7:
    if (*(float *)&a8 == 1.0)
    {
      BOOL v15 = 1;
      LODWORD(a8) = 1.0;
      if (!a5) {
        return result;
      }
    }
    else
    {
      BOOL v15 = *(float *)&a8 == -1.0;
      if (!a5) {
        return result;
      }
    }
    goto LABEL_15;
  }
LABEL_12:
  BOOL v15 = 0;
  if (a5)
  {
LABEL_15:
    uint64_t v16 = 0;
    uint64_t v17 = (uint64_t)v11 >> 1;
    int v18 = *(_DWORD *)(result + 120);
    LODWORD(a9) = *(_DWORD *)(result + 116);
    float32x4_t v19 = (unint64_t *)(a2 + 8 * v17);
    uint64_t v20 = a4;
    uint64_t v21 = a6 - 4;
    unint64_t v22 = *v19;
    unint64_t result = 3;
    if (v21 > 3) {
      unint64_t result = a6 - 4;
    }
    uint64_t v23 = ((4 * result) & 0x1FFFFFFF0) + 16;
    uint64_t v176 = (16 * ((result >> 2) & 0x1FFFFFFF)) | 4;
    uint64_t v177 = (result >> 2) + 1;
    uint64_t v175 = (16 * ((result >> 2) & 0x1FFFFFFF)) | 8;
    uint64_t v180 = v177 & 0x3FFFFFFC;
    uint64_t v174 = (4 * result) | 0xC;
    float32x4_t v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
    v26.i64[0] = 0x4000000040000000;
    v26.i64[1] = 0x4000000040000000;
    BOOL v178 = v14;
    BOOL v179 = v15;
    while (1)
    {
      unint64_t v27 = v22;
      unint64_t v28 = v9 + v16 * v20;
      unint64_t v29 = v28 + v23;
      unint64_t v30 = v19[1];
      ++v19;
      unint64_t v22 = v30;
      unint64_t v31 = *(v19 - 2);
      if (v18)
      {
        if (!v14)
        {
          if (!v181)
          {
            if (a6 < 4)
            {
              uint64_t v68 = 0;
              if (a6 > 0) {
                goto LABEL_181;
              }
              goto LABEL_18;
            }
            if (result < 0x1C)
            {
              uint64_t v68 = 0;
              goto LABEL_178;
            }
            uint64_t v68 = 0;
            BOOL v158 = a3 < v22 + v23 && v22 < v29;
            BOOL v160 = a3 < v27 + v176 && v27 < v29;
            BOOL v162 = a3 < v27 + v175 && v27 + 4 < v29;
            BOOL v164 = a3 < v27 + v174 && v27 + 8 < v29;
            BOOL v166 = a3 < v27 + v23 && v27 + 12 < v29;
            if (v31 < v29 && a3 < v31 + v23)
            {
              BOOL v14 = v178;
              BOOL v15 = v179;
              goto LABEL_178;
            }
            BOOL v14 = v178;
            BOOL v15 = v179;
            if (v158) {
              goto LABEL_178;
            }
            if (v160) {
              goto LABEL_178;
            }
            if (v162) {
              goto LABEL_178;
            }
            if (v164) {
              goto LABEL_178;
            }
            if (v166) {
              goto LABEL_178;
            }
            uint64_t v168 = 0;
            uint64_t v169 = v177 & 0x3FFFFFFC;
            do
            {
              int32x4_t v170 = (const float *)(v31 + v168);
              float32x4x4_t v186 = vld4q_f32(v170);
              int32x4_t v171 = (const float *)(v22 + v168);
              float32x4x4_t v191 = vld4q_f32(v171);
              int32x4_t v172 = (const float *)(v27 + v168);
              float32x4x4_t v195 = vld4q_f32(v172);
              v199.val[0] = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(v195.val[0], v13), v24, vaddq_f32(v186.val[0], v191.val[0])));
              v199.val[1] = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(v195.val[1], v13), v24, vaddq_f32(v186.val[1], v191.val[1])));
              v199.val[2] = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(v195.val[2], v13), v24, vaddq_f32(v186.val[2], v191.val[2])));
              v199.val[3] = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(v195.val[3], v13), v24, vaddq_f32(v186.val[3], v191.val[3])));
              int32x4_t v173 = (float *)(a3 + v168);
              vst4q_f32(v173, v199);
              v168 += 64;
              v169 -= 4;
            }
            while (v169);
            uint64_t v68 = 4 * (v177 & 0x3FFFFFFC);
            if (v177 != v180)
            {
LABEL_178:
              uint64_t v126 = 4 * v68;
              unint64_t v127 = v22 + 8;
              unint64_t v128 = v27 + 8;
              unint64_t v129 = v31;
              unint64_t v130 = a3;
              do
              {
                float v131 = *(float *)&a9
                     + (float)((float)(v13 * *(float *)(v128 + v126 - 4))
                             + (float)((float)(*(float *)(v129 + v126 + 4) + *(float *)(v127 + v126 - 4)) * *(float *)&a8));
                int v132 = (float *)(v130 + v126);
                *(float *)(v130 + v126) = *(float *)&a9
                                        + (float)((float)(v13 * *(float *)(v128 + v126 - 8))
                                                + (float)((float)(*(float *)(v129 + v126) + *(float *)(v127 + v126 - 8))
                                                        * *(float *)&a8));
                v132[1] = v131;
                float v133 = *(float *)&a9
                     + (float)((float)(v13 * *(float *)(v128 + v126 + 4))
                             + (float)((float)(*(float *)(v129 + v126 + 12) + *(float *)(v127 + v126 + 4))
                                     * *(float *)&a8));
                v68 += 4;
                v130 += 16;
                v132[2] = *(float *)&a9
                        + (float)((float)(v13 * *(float *)(v128 + v126))
                                + (float)((float)(*(float *)(v129 + v126 + 8) + *(float *)(v127 + v126)) * *(float *)&a8));
                v132[3] = v133;
                v127 += 16;
                v129 += 16;
                v128 += 16;
              }
              while (v68 <= v21);
            }
            uint64_t v68 = v68;
            if ((int)v68 < a6)
            {
LABEL_181:
              unint64_t v134 = a6 - v68;
              if (v134 < 0xC) {
                goto LABEL_280;
              }
              uint64_t v135 = 4 * v68;
              unint64_t v136 = v28 + 4 * v68;
              if (v136 - (4 * v68 + v31) < 0x20) {
                goto LABEL_280;
              }
              if (v136 - (v135 + v22) < 0x20) {
                goto LABEL_280;
              }
              if (v136 - (v135 + v27) < 0x20) {
                goto LABEL_280;
              }
              v68 += v134 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v137 = v134 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                float32x4_t v138 = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v27 + v135 + 16), v13), v24, vaddq_f32(*(float32x4_t *)(v31 + 16 + v135), *(float32x4_t *)(v22 + 16 + v135))));
                uint64_t v139 = (float32x4_t *)(a3 + v135);
                *uint64_t v139 = vaddq_f32(v25, vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v27 + v135), v13), v24, vaddq_f32(*(float32x4_t *)(v31 + v135), *(float32x4_t *)(v22 + v135))));
                v139[1] = v138;
                v135 += 32;
                v137 -= 8;
              }
              while (v137);
              if (v134 != (v134 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_280:
                do
                {
                  *(float *)(a3 + 4 * v68) = *(float *)&a9
                                           + (float)((float)(v13 * *(float *)(v27 + 4 * v68))
                                                   + (float)((float)(*(float *)(v31 + 4 * v68)
                                                                   + *(float *)(v22 + 4 * v68))
                                                           * *(float *)&a8));
                  ++v68;
                }
                while (a6 != v68);
              }
              goto LABEL_18;
            }
            goto LABEL_18;
          }
          if (a6 < 4)
          {
            uint64_t v37 = 0;
            if (a6 > 0) {
              goto LABEL_79;
            }
            goto LABEL_18;
          }
          if (result < 0x1C)
          {
            uint64_t v37 = 0;
            goto LABEL_76;
          }
          uint64_t v37 = 0;
          BOOL v141 = a3 < v27 + v176 && v27 < v29;
          BOOL v143 = a3 < v22 + v23 && v22 < v29;
          BOOL v145 = a3 < v27 + v175 && v27 + 4 < v29;
          BOOL v147 = a3 < v27 + v174 && v27 + 8 < v29;
          BOOL v149 = a3 < v27 + v23 && v27 + 12 < v29;
          if (v31 < v29 && a3 < v31 + v23)
          {
            BOOL v14 = v178;
            BOOL v15 = v179;
            goto LABEL_76;
          }
          BOOL v14 = v178;
          BOOL v15 = v179;
          if (v141) {
            goto LABEL_76;
          }
          if (v143) {
            goto LABEL_76;
          }
          if (v145) {
            goto LABEL_76;
          }
          if (v147) {
            goto LABEL_76;
          }
          if (v149) {
            goto LABEL_76;
          }
          uint64_t v151 = 0;
          uint64_t v152 = v177 & 0x3FFFFFFC;
          do
          {
            int32x2_t v153 = (const float *)(v31 + v151);
            float32x4x4_t v185 = vld4q_f32(v153);
            int32x2_t v154 = (const float *)(v27 + v151);
            float32x4x4_t v190 = vld4q_f32(v154);
            uint64_t v155 = (const float *)(v22 + v151);
            float32x4x4_t v194 = vld4q_f32(v155);
            v198.val[0] = vaddq_f32(v25, vaddq_f32(vmlsq_f32(v185.val[0], v26, v190.val[0]), v194.val[0]));
            v198.val[1] = vaddq_f32(v25, vaddq_f32(vmlsq_f32(v185.val[1], v26, v190.val[1]), v194.val[1]));
            v198.val[2] = vaddq_f32(v25, vaddq_f32(vmlsq_f32(v185.val[2], v26, v190.val[2]), v194.val[2]));
            v198.val[3] = vaddq_f32(v25, vaddq_f32(vmlsq_f32(v185.val[3], v26, v190.val[3]), v194.val[3]));
            uint64_t v156 = (float *)(a3 + v151);
            vst4q_f32(v156, v198);
            v151 += 64;
            v152 -= 4;
          }
          while (v152);
          uint64_t v37 = 4 * (v177 & 0x3FFFFFFC);
          if (v177 != v180)
          {
LABEL_76:
            uint64_t v69 = 4 * v37;
            unint64_t v70 = v27 + 8;
            unint64_t v71 = v22 + 8;
            unint64_t v72 = v31;
            unint64_t v73 = a3;
            do
            {
              float v74 = *(float *)&a9
                  + (float)((float)(*(float *)(v72 + v69 + 4) - (float)(*(float *)(v70 + v69 - 4) * 2.0))
                          + *(float *)(v71 + v69 - 4));
              *(float *)(v73 + v69) = *(float *)&a9
                                    + (float)((float)(*(float *)(v72 + v69) - (float)(*(float *)(v70 + v69 - 8) * 2.0))
                                            + *(float *)(v71 + v69 - 8));
              int32x4_t v75 = (float *)(v73 + v69);
              v75[1] = v74;
              float v76 = *(float *)&a9
                  + (float)((float)(*(float *)(v72 + v69 + 12) - (float)(*(float *)(v70 + v69 + 4) * 2.0))
                          + *(float *)(v71 + v69 + 4));
              v37 += 4;
              v73 += 16;
              v75[2] = *(float *)&a9
                     + (float)((float)(*(float *)(v72 + v69 + 8) - (float)(*(float *)(v70 + v69) * 2.0))
                             + *(float *)(v71 + v69));
              v75[3] = v76;
              v70 += 16;
              v72 += 16;
              v71 += 16;
            }
            while (v37 <= v21);
          }
          uint64_t v37 = v37;
          if ((int)v37 < a6)
          {
LABEL_79:
            unint64_t v77 = a6 - v37;
            if (v77 < 0xC) {
              goto LABEL_281;
            }
            uint64_t v78 = 4 * v37;
            unint64_t v79 = v28 + 4 * v37;
            if (v79 - (4 * v37 + v31) < 0x20) {
              goto LABEL_281;
            }
            if (v79 - (v78 + v27) < 0x20) {
              goto LABEL_281;
            }
            if (v79 - (v78 + v22) < 0x20) {
              goto LABEL_281;
            }
            v37 += v77 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v80 = v77 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v81 = vaddq_f32(v25, vaddq_f32(vmlsq_f32(*(float32x4_t *)(v31 + 16 + v78), v26, *(float32x4_t *)(v27 + 16 + v78)), *(float32x4_t *)(v22 + v78 + 16)));
              unint64_t v82 = (float32x4_t *)(a3 + v78);
              *unint64_t v82 = vaddq_f32(v25, vaddq_f32(vmlsq_f32(*(float32x4_t *)(v31 + v78), v26, *(float32x4_t *)(v27 + v78)), *(float32x4_t *)(v22 + v78)));
              v82[1] = v81;
              v78 += 32;
              v80 -= 8;
            }
            while (v80);
            if (v77 != (v77 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_281:
              do
              {
                *(float *)(a3 + 4 * v37) = *(float *)&a9
                                         + (float)((float)(*(float *)(v31 + 4 * v37)
                                                         + (float)(*(float *)(v27 + 4 * v37) * -2.0))
                                                 + *(float *)(v22 + 4 * v37));
                ++v37;
              }
              while (a6 != v37);
            }
            goto LABEL_18;
          }
          goto LABEL_18;
        }
        if (a6 < 4)
        {
          uint64_t v35 = 0;
          if (a6 > 0) {
            goto LABEL_54;
          }
          goto LABEL_18;
        }
        if (result < 0x1C)
        {
          uint64_t v35 = 0;
          goto LABEL_51;
        }
        uint64_t v35 = 0;
        BOOL v97 = a3 < v27 + v176 && v27 < v29;
        BOOL v99 = a3 < v22 + v23 && v22 < v29;
        BOOL v101 = a3 < v27 + v175 && v27 + 4 < v29;
        BOOL v103 = a3 < v27 + v174 && v27 + 8 < v29;
        BOOL v105 = a3 < v27 + v23 && v27 + 12 < v29;
        if (v31 < v29 && a3 < v31 + v23)
        {
          BOOL v14 = v178;
          goto LABEL_51;
        }
        BOOL v14 = v178;
        if (v97) {
          goto LABEL_51;
        }
        if (v99) {
          goto LABEL_51;
        }
        if (v101) {
          goto LABEL_51;
        }
        if (v103) {
          goto LABEL_51;
        }
        if (v105) {
          goto LABEL_51;
        }
        uint64_t v107 = 0;
        uint64_t v108 = v177 & 0x3FFFFFFC;
        do
        {
          unint64_t v109 = (const float *)(v31 + v107);
          uint64_t v110 = (const float *)(v27 + v107);
          float32x4x4_t v183 = vld4q_f32(v109);
          float32x4x4_t v188 = vld4q_f32(v110);
          unint64_t v111 = (const float *)(v22 + v107);
          float32x4x4_t v193 = vld4q_f32(v111);
          v197.val[0] = vaddq_f32(v25, vaddq_f32(vmlaq_f32(v183.val[0], v26, v188.val[0]), v193.val[0]));
          v197.val[1] = vaddq_f32(v25, vaddq_f32(vmlaq_f32(v183.val[1], v26, v188.val[1]), v193.val[1]));
          v197.val[2] = vaddq_f32(v25, vaddq_f32(vmlaq_f32(v183.val[2], v26, v188.val[2]), v193.val[2]));
          v197.val[3] = vaddq_f32(v25, vaddq_f32(vmlaq_f32(v183.val[3], v26, v188.val[3]), v193.val[3]));
          unint64_t v112 = (float *)(a3 + v107);
          vst4q_f32(v112, v197);
          v107 += 64;
          v108 -= 4;
        }
        while (v108);
        uint64_t v35 = 4 * (v177 & 0x3FFFFFFC);
        if (v177 != v180)
        {
LABEL_51:
          uint64_t v46 = 4 * v35;
          unint64_t v47 = v27 + 8;
          unint64_t v48 = v22 + 8;
          unint64_t v49 = v31;
          unint64_t v50 = a3;
          do
          {
            float v51 = *(float *)&a9
                + (float)((float)(*(float *)(v49 + v46 + 4) + (float)(*(float *)(v47 + v46 - 4) * 2.0))
                        + *(float *)(v48 + v46 - 4));
            *(float *)(v50 + v46) = *(float *)&a9
                                  + (float)((float)(*(float *)(v49 + v46) + (float)(*(float *)(v47 + v46 - 8) * 2.0))
                                          + *(float *)(v48 + v46 - 8));
            uint64_t v52 = (float *)(v50 + v46);
            v52[1] = v51;
            float v53 = *(float *)&a9
                + (float)((float)(*(float *)(v49 + v46 + 12) + (float)(*(float *)(v47 + v46 + 4) * 2.0))
                        + *(float *)(v48 + v46 + 4));
            v35 += 4;
            v50 += 16;
            void v52[2] = *(float *)&a9
                   + (float)((float)(*(float *)(v49 + v46 + 8) + (float)(*(float *)(v47 + v46) * 2.0))
                           + *(float *)(v48 + v46));
            v52[3] = v53;
            v47 += 16;
            v49 += 16;
            v48 += 16;
          }
          while (v35 <= v21);
        }
        uint64_t v35 = v35;
        BOOL v15 = v179;
        if ((int)v35 < a6)
        {
LABEL_54:
          unint64_t v54 = a6 - v35;
          if (v54 < 0xC) {
            goto LABEL_282;
          }
          uint64_t v55 = 4 * v35;
          unint64_t v56 = v28 + 4 * v35;
          if (v56 - (4 * v35 + v31) < 0x20) {
            goto LABEL_282;
          }
          if (v56 - (v55 + v27) < 0x20) {
            goto LABEL_282;
          }
          if (v56 - (v55 + v22) < 0x20) {
            goto LABEL_282;
          }
          v35 += v54 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v57 = v54 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v58 = vaddq_f32(v25, vaddq_f32(vmlaq_f32(*(float32x4_t *)(v31 + 16 + v55), v26, *(float32x4_t *)(v27 + 16 + v55)), *(float32x4_t *)(v22 + v55 + 16)));
            uint64_t v59 = (float32x4_t *)(a3 + v55);
            *uint64_t v59 = vaddq_f32(v25, vaddq_f32(vmlaq_f32(*(float32x4_t *)(v31 + v55), v26, *(float32x4_t *)(v27 + v55)), *(float32x4_t *)(v22 + v55)));
            v59[1] = v58;
            v55 += 32;
            v57 -= 8;
          }
          while (v57);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_282:
            do
            {
              *(float *)(a3 + 4 * v35) = *(float *)&a9
                                       + (float)((float)(*(float *)(v31 + 4 * v35)
                                                       + (float)(*(float *)(v27 + 4 * v35) * 2.0))
                                               + *(float *)(v22 + 4 * v35));
              ++v35;
            }
            while (a6 != v35);
          }
          goto LABEL_18;
        }
        goto LABEL_18;
      }
      if (!v15)
      {
        if (a6 < 4)
        {
          uint64_t v36 = 0;
          if (a6 > 0) {
            goto LABEL_68;
          }
          goto LABEL_18;
        }
        if (result < 0xC)
        {
          uint64_t v36 = 0;
          goto LABEL_65;
        }
        uint64_t v36 = 0;
        BOOL v114 = a3 < v31 + v23 && v31 < v29;
        if (v22 < v29 && a3 < v22 + v23) {
          goto LABEL_65;
        }
        if (v114) {
          goto LABEL_65;
        }
        uint64_t v116 = 0;
        uint64_t v117 = v177 & 0x3FFFFFFC;
        do
        {
          unint64_t v118 = (const float *)(v22 + v116);
          float32x4x4_t v184 = vld4q_f32(v118);
          unint64_t v119 = (const float *)(v31 + v116);
          float32x4x4_t v189 = vld4q_f32(v119);
          v196.val[0] = vmlaq_f32(v25, v24, vsubq_f32(v184.val[0], v189.val[0]));
          v196.val[1] = vmlaq_f32(v25, v24, vsubq_f32(v184.val[1], v189.val[1]));
          v196.val[2] = vmlaq_f32(v25, v24, vsubq_f32(v184.val[2], v189.val[2]));
          v196.val[3] = vmlaq_f32(v25, v24, vsubq_f32(v184.val[3], v189.val[3]));
          uint64x2_t v120 = (float *)(a3 + v116);
          vst4q_f32(v120, v196);
          v116 += 64;
          v117 -= 4;
        }
        while (v117);
        uint64_t v36 = 4 * (v177 & 0x3FFFFFFC);
        if (v177 != v180)
        {
LABEL_65:
          uint64_t v60 = 4 * v36;
          unint64_t v61 = v22 + 8;
          unint64_t v62 = v31 + 8;
          unint64_t v63 = a3;
          do
          {
            float v64 = *(float *)&a9
                + (float)((float)(*(float *)(v61 + v60 - 4) - *(float *)(v62 + v60 - 4)) * *(float *)&a8);
            unint64_t v65 = (float *)(v63 + v60);
            *(float *)(v63 + v60) = *(float *)&a9
                                  + (float)((float)(*(float *)(v61 + v60 - 8) - *(float *)(v62 + v60 - 8))
                                          * *(float *)&a8);
            v65[1] = v64;
            float v66 = *(float *)&a9
                + (float)((float)(*(float *)(v61 + v60 + 4) - *(float *)(v62 + v60 + 4)) * *(float *)&a8);
            v36 += 4;
            v65[2] = *(float *)&a9 + (float)((float)(*(float *)(v61 + v60) - *(float *)(v62 + v60)) * *(float *)&a8);
            void v65[3] = v66;
            v63 += 16;
            v61 += 16;
            v62 += 16;
          }
          while (v36 <= v21);
        }
        uint64_t v36 = v36;
        if ((int)v36 < a6)
        {
LABEL_68:
          unint64_t v67 = a6 - v36;
          if (v67 < 0xC) {
            goto LABEL_283;
          }
          uint64_t v121 = 4 * v36;
          unint64_t v122 = v28 + 4 * v36;
          if (v122 - (4 * v36 + v22) < 0x20) {
            goto LABEL_283;
          }
          if (v122 - (v121 + v31) < 0x20) {
            goto LABEL_283;
          }
          v36 += v67 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v123 = v67 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v124 = vmlaq_f32(v25, v24, vsubq_f32(*(float32x4_t *)(v22 + 16 + v121), *(float32x4_t *)(v31 + 16 + v121)));
            int32x4_t v125 = (float32x4_t *)(a3 + v121);
            float32x4_t *v125 = vmlaq_f32(v25, v24, vsubq_f32(*(float32x4_t *)(v22 + v121), *(float32x4_t *)(v31 + v121)));
            v125[1] = v124;
            v121 += 32;
            v123 -= 8;
          }
          while (v123);
          if (v67 != (v67 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_283:
            do
            {
              *(float *)(a3 + 4 * v36) = *(float *)&a9
                                       + (float)((float)(*(float *)(v22 + 4 * v36) - *(float *)(v31 + 4 * v36))
                                               * *(float *)&a8);
              ++v36;
            }
            while (a6 != v36);
          }
          goto LABEL_18;
        }
        goto LABEL_18;
      }
      if (*(float *)&a8 >= 0.0) {
        unint64_t v32 = *(v19 - 2);
      }
      else {
        unint64_t v32 = v22;
      }
      if (*(float *)&a8 >= 0.0) {
        unint64_t v33 = v22;
      }
      else {
        unint64_t v33 = *(v19 - 2);
      }
      if (a6 < 4)
      {
        uint64_t v34 = 0;
        if (a6 > 0) {
          goto LABEL_46;
        }
        goto LABEL_18;
      }
      if (result < 0xC) {
        break;
      }
      uint64_t v34 = 0;
      BOOL v84 = a3 < v33 + v23 && v33 < v29;
      if (v32 < v29 && a3 < v32 + v23) {
        goto LABEL_43;
      }
      if (v84) {
        goto LABEL_43;
      }
      uint64_t v86 = 0;
      uint64_t v87 = v177 & 0x3FFFFFFC;
      do
      {
        uint64_t v88 = (const float *)(v33 + v86);
        float32x4x4_t v182 = vld4q_f32(v88);
        uint64_t v89 = (const float *)(v32 + v86);
        float32x4x4_t v187 = vld4q_f32(v89);
        v192.val[0] = vaddq_f32(v25, vsubq_f32(v182.val[0], v187.val[0]));
        v192.val[1] = vaddq_f32(v25, vsubq_f32(v182.val[1], v187.val[1]));
        v192.val[2] = vaddq_f32(v25, vsubq_f32(v182.val[2], v187.val[2]));
        v192.val[3] = vaddq_f32(v25, vsubq_f32(v182.val[3], v187.val[3]));
        int32x4_t v90 = (float *)(a3 + v86);
        vst4q_f32(v90, v192);
        v86 += 64;
        v87 -= 4;
      }
      while (v87);
      uint64_t v34 = 4 * (v177 & 0x3FFFFFFC);
      if (v177 != v180) {
        goto LABEL_43;
      }
LABEL_45:
      uint64_t v34 = v34;
      if ((int)v34 < a6)
      {
LABEL_46:
        unint64_t v45 = a6 - v34;
        if (v45 < 0xC) {
          goto LABEL_284;
        }
        uint64_t v91 = 4 * v34;
        unint64_t v92 = v28 + 4 * v34;
        if (v92 - (4 * v34 + v32) < 0x20) {
          goto LABEL_284;
        }
        if (v92 - (v91 + v33) < 0x20) {
          goto LABEL_284;
        }
        v34 += v45 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v93 = v45 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float32x4_t v94 = vaddq_f32(v25, vsubq_f32(*(float32x4_t *)(v33 + 16 + v91), *(float32x4_t *)(v32 + 16 + v91)));
          int v95 = (float32x4_t *)(a3 + v91);
          float32x4_t *v95 = vaddq_f32(v25, vsubq_f32(*(float32x4_t *)(v33 + v91), *(float32x4_t *)(v32 + v91)));
          v95[1] = v94;
          v91 += 32;
          v93 -= 8;
        }
        while (v93);
        if (v45 != (v45 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_284:
          do
          {
            *(float *)(a3 + 4 * v34) = *(float *)&a9 + (float)(*(float *)(v33 + 4 * v34) - *(float *)(v32 + 4 * v34));
            ++v34;
          }
          while (a6 != v34);
        }
      }
LABEL_18:
      a3 += v20;
      ++v16;
      if (!--a5) {
        return result;
      }
    }
    uint64_t v34 = 0;
LABEL_43:
    uint64_t v38 = 4 * v34;
    unint64_t v39 = v33 + 8;
    unint64_t v40 = v32 + 8;
    unint64_t v41 = a3;
    do
    {
      float v42 = *(float *)&a9 + (float)(*(float *)(v39 + v38 - 4) - *(float *)(v40 + v38 - 4));
      int32x4_t v43 = (float *)(v41 + v38);
      *(float *)(v41 + v38) = *(float *)&a9 + (float)(*(float *)(v39 + v38 - 8) - *(float *)(v40 + v38 - 8));
      v43[1] = v42;
      float v44 = *(float *)&a9 + (float)(*(float *)(v39 + v38 + 4) - *(float *)(v40 + v38 + 4));
      v34 += 4;
      uint64_t v43[2] = *(float *)&a9 + (float)(*(float *)(v39 + v38) - *(float *)(v40 + v38));
      v43[3] = v44;
      v41 += 16;
      v39 += 16;
      v40 += 16;
    }
    while (v34 <= v21);
    goto LABEL_45;
  }
  return result;
}

uint64_t sub_10034B590(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  int v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  unint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049A9D0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v16 = *(void **)(a2 + 72);
        uint64_t v17 = *(void **)(a1 + 88);
        *uint64_t v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *int v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v22) = 33619968;
  uint64_t v23 = a1 + 16;
  uint64_t v24 = 0;
  sub_10025401C(a2, (uint64_t)&v22);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v20 = a4;
  *(float *)(a1 + 116) = v20;
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 5 || v19 != 1 && v18 != 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    qmemcpy((void *)sub_1002D19D8(&v22, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v22, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_10034B7E0(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10034B814(uint64_t a1)
{
  *(void *)a1 = off_10049A9D0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

uint64_t sub_10034B8C4(uint64_t a1)
{
  *(void *)a1 = off_10049A9D0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034B974(uint64_t a1)
{
  *(void *)a1 = off_10049A9D0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_10034BA44(unint64_t result, uint64_t a2, float *a3, int a4, int a5, int a6, double a7)
{
  int v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0) {
    int v8 = *(_DWORD *)(result + 8);
  }
  else {
    int v8 = v7 + 1;
  }
  int v9 = v8 >> 1;
  uint64_t v10 = *(void *)(result + 32);
  uint64_t v11 = (uint64_t)v8 >> 1;
  uint64_t v12 = (float *)(v10 + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  uint64_t v13 = (float **)(a2 + 8 * v9);
  if (*(unsigned char *)(result + 120))
  {
    if (!a5) {
      return result;
    }
    int v39 = a5 - 1;
    uint64_t v40 = a4;
    if (a6 <= 3)
    {
      if (a6 >= 1)
      {
        if (v7 >= 2)
        {
          uint64_t v104 = (v11 + 1);
          uint64_t v105 = a2 + 8 * v11 - 8;
          do
          {
            int v106 = v39;
            uint64_t v107 = *v13;
            float v108 = *(float *)&a7 + (float)(*v12 * **v13);
            unint64_t v109 = (float **)v105;
            uint64_t v110 = 1;
            do
            {
              unint64_t v111 = *v109--;
              unint64_t result = (unint64_t)v111;
              float v108 = v108 + (float)(v12[v110] * (float)(*v13[v110] + *v111));
              ++v110;
            }
            while (v104 != v110);
            *a3 = v108;
            if (a6 != 1)
            {
              float v112 = *(float *)&a7 + (float)(*v12 * v107[1]);
              uint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
              uint64_t v114 = 1;
              do
              {
                float v112 = v112 + (float)(v12[v114] * (float)(v13[v114][1] + v13[v113][1]));
                ++v114;
                --v113;
              }
              while (v104 != v114);
              a3[1] = v112;
              if (a6 != 2)
              {
                float v115 = *(float *)&a7 + (float)(*v12 * v107[2]);
                uint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
                uint64_t v117 = 1;
                do
                {
                  float v115 = v115 + (float)(v12[v117] * (float)(v13[v117][2] + v13[v116][2]));
                  ++v117;
                  --v116;
                }
                while (v104 != v117);
                a3[2] = v115;
              }
            }
            a3 = (float *)((char *)a3 + a4);
            ++v13;
            --v39;
            v105 += 8;
          }
          while (v106);
        }
        else
        {
          unint64_t v41 = a3 + 2;
          do
          {
            float v42 = *v13;
            *(v41 - 2) = *(float *)&a7 + (float)(*v12 * **v13);
            if (a6 != 1)
            {
              *(v41 - 1) = *(float *)&a7 + (float)(*v12 * v42[1]);
              if (a6 != 2) {
                *unint64_t v41 = *(float *)&a7 + (float)(*v12 * v42[2]);
              }
            }
            ++v13;
            unint64_t v41 = (float *)((char *)v41 + a4);
            --a5;
          }
          while (a5);
        }
      }
      return result;
    }
    unint64_t v43 = (a6 - 4);
    if (v7 >= 2)
    {
      uint64_t v90 = (v11 + 1);
      float32x4_t v91 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v92 = a2 + 8 * v11 - 8;
      do
      {
        unint64_t result = 0;
        int v93 = v39;
        float32x4_t v94 = *v13;
        uint64_t v95 = 4;
        do
        {
          unint64_t v96 = v95;
          float32x4_t v97 = vmlaq_n_f32(v91, *(float32x4_t *)&v94[result], *v12);
          uint64_t v98 = (uint64_t *)v92;
          uint64_t v99 = 1;
          do
          {
            uint64_t v100 = *v98--;
            float32x4_t v97 = vmlaq_n_f32(v97, vaddq_f32(*(float32x4_t *)&v13[v99][result], *(float32x4_t *)(v100 + 4 * result)), v12[v99]);
            ++v99;
          }
          while (v90 != v99);
          *(float32x4_t *)&a3[result] = v97;
          result += 4;
          v95 += 4;
        }
        while (result <= v43);
        if ((int)result < a6)
        {
          do
          {
            float v101 = *(float *)&a7 + (float)(*v12 * v94[v96]);
            unint64_t result = v92;
            uint64_t v102 = 1;
            do
            {
              uint64_t v103 = *(void *)result;
              result -= 8;
              float v101 = v101 + (float)(v12[v102] * (float)(v13[v102][v96] + *(float *)(v103 + 4 * v96)));
              ++v102;
            }
            while (v90 != v102);
            a3[v96++] = v101;
          }
          while (v96 < a6);
        }
        a3 = (float *)((char *)a3 + v40);
        ++v13;
        --v39;
        v92 += 8;
      }
      while (v93);
      return result;
    }
    uint64_t v44 = 0;
    if ((unint64_t)(v43 & 0xFFFFFFFC) + 5 <= a6) {
      uint64_t v45 = a6;
    }
    else {
      uint64_t v45 = (v43 & 0xFFFFFFFC) + 5;
    }
    uint64_t v46 = (4 * (a6 - 4)) & 0x3FFFFFFF0;
    uint64_t v47 = 4 * v45 - v46;
    unint64_t v48 = v10 + 4 * v11 + 4;
    unint64_t v49 = v45 - (v43 & 0xFFFFFFFC) - 4;
    uint64_t v50 = v46 + 16;
    unint64_t result = (v43 >> 2) + 1;
    float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    unint64_t v52 = v49 & 0xFFFFFFFFFFFFFFF8;
    float v53 = a3;
    while (1)
    {
      int v54 = v39;
      uint64_t v55 = v44 * a4;
      unint64_t v56 = *v13;
      if (v43 < 0xC) {
        break;
      }
      unint64_t v57 = 0;
      uint64_t v60 = (float *)((char *)a3 + v50 + v55);
      BOOL v61 = v53 >= (float *)((char *)v56 + v50) || v56 >= v60;
      char v62 = !v61;
      BOOL v61 = v12 >= v60;
      uint64_t v59 = 4;
      unint64_t v58 = 0;
      if (!v61 && (unint64_t)v53 < v48) {
        goto LABEL_71;
      }
      if (v62) {
        goto LABEL_71;
      }
      uint64_t v64 = 0;
      unint64_t v65 = result & 0x7FFFFFFC;
      do
      {
        float v66 = &v56[v64];
        float32x4x4_t v118 = vld4q_f32(v66);
        v119.val[0] = vmlaq_n_f32(v51, v118.val[0], *v12);
        v119.val[1] = vmlaq_n_f32(v51, v118.val[1], *v12);
        v119.val[2] = vmlaq_n_f32(v51, v118.val[2], *v12);
        v119.val[3] = vmlaq_n_f32(v51, v118.val[3], *v12);
        unint64_t v67 = &v53[v64];
        vst4q_f32(v67, v119);
        v64 += 16;
        v65 -= 4;
      }
      while (v65);
      unint64_t v57 = result & 0x7FFFFFFC;
      uint64_t v59 = (16 * ((v57 >> 2) & 0x1FFFFFFF)) | 4;
      unint64_t v58 = 4 * v57;
      unint64_t v68 = v57 - 1;
      uint64_t v69 = v58;
      if (result != v57) {
        goto LABEL_71;
      }
LABEL_73:
      if ((int)v58 < a6)
      {
        if (v49 >= 0x10)
        {
          uint64_t v77 = 4 * v68;
          uint64_t v78 = (char *)a3 + v55 + v77 * 4 + 16;
          unint64_t v79 = (float *)((char *)a3 + v47 + v55 + v77 * 4);
          unint64_t v80 = &v56[v77];
          unint64_t v81 = (unint64_t)&v56[v77 + 4];
          BOOL v83 = v78 < (char *)v80 + v47 && v81 < (unint64_t)v79;
          if (v12 >= v79 || (unint64_t)v78 >= v48)
          {
            if (v83)
            {
              unint64_t v76 = v69;
            }
            else
            {
              unint64_t v76 = v69 + v52;
              float32x4_t v85 = vld1q_dup_f32(v12);
              uint64_t v86 = v69;
              unint64_t v87 = v49 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                float32x4_t v88 = vmlaq_f32(v51, *(float32x4_t *)&v56[v86 + 4], v85);
                uint64_t v89 = (float32x4_t *)&v53[v86];
                *uint64_t v89 = vmlaq_f32(v51, *(float32x4_t *)&v56[v86], v85);
                v89[1] = v88;
                v86 += 8;
                v87 -= 8;
              }
              while (v87);
              if (v49 == v52) {
                goto LABEL_53;
              }
            }
          }
          else
          {
            unint64_t v76 = v69;
          }
        }
        else
        {
          unint64_t v76 = v69;
        }
        do
        {
          v53[v76] = *(float *)&a7 + (float)(*v12 * v56[v76]);
          ++v76;
        }
        while (v76 < a6);
      }
LABEL_53:
      float v53 = (float *)((char *)v53 + a4);
      ++v13;
      int v39 = v54 - 1;
      ++v44;
      if (!v54) {
        return result;
      }
    }
    unint64_t v57 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 4;
LABEL_71:
    unint64_t v68 = v57 - 1;
    uint64_t v69 = v59 - 4;
    uint64_t v70 = v58;
    unint64_t v71 = v56 + 3;
    do
    {
      float v72 = *(float *)&a7 + (float)(*v12 * v71[v70 - 2]);
      float v73 = *(float *)&a7 + (float)(*v12 * v71[v70 - 1]);
      float v74 = *(float *)&a7 + (float)(*v12 * v71[v70]);
      int32x4_t v75 = &v53[v70];
      *int32x4_t v75 = *(float *)&a7 + (float)(*v12 * v56[v70]);
      v75[1] = v72;
      v58 += 4;
      v75[2] = v73;
      v75[3] = v74;
      ++v68;
      v69 += 4;
      v70 += 4;
    }
    while (v58 <= v43);
    goto LABEL_73;
  }
  if (a5)
  {
    uint64_t v14 = a4;
    uint64_t v15 = (v11 + 1);
    uint64_t v16 = a6 - 4;
    unint64_t v17 = 3;
    if (v16 > 3) {
      unint64_t v17 = a6 - 4;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    unint64_t result = 4 * (v18 & 0x3FFFFFF8);
    int32x4_t v19 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    uint64_t v20 = a2 + 8 * v11 - 8;
    uint64_t v21 = a3 + 16;
    do
    {
      if (a6 < 4)
      {
        uint64_t v22 = 0;
        if (a6 <= 0) {
          goto LABEL_9;
        }
        goto LABEL_27;
      }
      if (v7 >= 2)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t v23 = (uint64_t *)v20;
          uint64_t v24 = 1;
          float32x4_t v25 = (float32x4_t)v19;
          do
          {
            uint64_t v26 = *v23--;
            float32x4_t v25 = vmlaq_n_f32(v25, vsubq_f32(*(float32x4_t *)&v13[v24][v22], *(float32x4_t *)(v26 + 4 * v22)), v12[v24]);
            ++v24;
          }
          while (v15 != v24);
          *(float32x4_t *)&a3[v22] = v25;
          v22 += 4;
        }
        while (v22 <= v16);
      }
      else
      {
        if (v17 < 0x1C)
        {
          uint64_t v22 = 0;
LABEL_24:
          unint64_t v29 = &a3[v22];
          do
          {
            *unint64_t v29 = *(float *)&a7;
            v29[1] = *(float *)&a7;
            int v29[2] = *(float *)&a7;
            v29[3] = *(float *)&a7;
            v22 += 4;
            v29 += 4;
          }
          while (v22 <= v16);
          goto LABEL_26;
        }
        uint64_t v27 = v18 & 0x3FFFFFF8;
        unint64_t v28 = (int32x4_t *)v21;
        do
        {
          v28[-4] = v19;
          v28[-3] = v19;
          v28[-2] = v19;
          v28[-1] = v19;
          int32x4_t *v28 = v19;
          v28[1] = v19;
          uint64_t v28[2] = v19;
          v28[3] = v19;
          v28 += 8;
          v27 -= 8;
        }
        while (v27);
        uint64_t v22 = 4 * (v18 & 0x3FFFFFF8);
        if (v18 != (v18 & 0x3FFFFFF8)) {
          goto LABEL_24;
        }
      }
LABEL_26:
      uint64_t v22 = v22;
      if ((int)v22 >= a6) {
        goto LABEL_9;
      }
LABEL_27:
      if (v7 >= 2)
      {
        do
        {
          unint64_t v32 = (uint64_t *)v20;
          uint64_t v33 = 1;
          float v34 = *(float *)&a7;
          do
          {
            uint64_t v35 = *v32--;
            float v34 = v34 + (float)(v12[v33] * (float)(v13[v33][v22] - *(float *)(v35 + 4 * v22)));
            ++v33;
          }
          while (v15 != v33);
          a3[v22++] = v34;
        }
        while (v22 != a6);
        goto LABEL_9;
      }
      unint64_t v30 = a6 - v22;
      if (v30 >= 8)
      {
        uint64_t v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + v22;
        uint64_t v36 = v22;
        unint64_t v37 = v30 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          uint64_t v38 = (int32x4_t *)&a3[v36];
          *uint64_t v38 = v19;
          v38[1] = v19;
          v36 += 8;
          v37 -= 8;
        }
        while (v37);
        if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v31 = v22;
      }
      do
        a3[v31++] = *(float *)&a7;
      while (a6 != v31);
LABEL_9:
      a3 = (float *)((char *)a3 + v14);
      ++v13;
      v20 += 8;
      uint64_t v21 = (float *)((char *)v21 + v14);
      --a5;
    }
    while (a5);
  }
  return result;
}

uint64_t sub_10034C170(uint64_t a1)
{
  *(void *)a1 = off_10049A9D0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034C220(uint64_t a1)
{
  *(void *)a1 = off_10049A9D0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_10034C2F0(uint64_t result, float **a2, float *a3, int a4, int a5, int a6, double a7)
{
  if (!a5) {
    return result;
  }
  int v7 = *(float **)(result + 32);
  LODWORD(a7) = *(_DWORD *)(result + 116);
  int v8 = a5 - 1;
  uint64_t v9 = a4;
  uint64_t v10 = *(unsigned int *)(result + 8);
  if (a6 <= 3)
  {
    if (a6 >= 1)
    {
      if ((int)v10 > 1)
      {
        do
        {
          int v12 = v8;
          uint64_t v13 = *a2;
          float v14 = *(float *)&a7 + (float)(*v7 * **a2);
          for (uint64_t i = 1; i != v10; ++i)
            float v14 = v14 + (float)(v7[i] * *a2[i]);
          *a3 = v14;
          if (a6 != 1)
          {
            float v16 = *(float *)&a7 + (float)(*v7 * v13[1]);
            for (uint64_t j = 1; j != v10; ++j)
              float v16 = v16 + (float)(v7[j] * a2[j][1]);
            a3[1] = v16;
            if (a6 != 2)
            {
              float v18 = *(float *)&a7 + (float)(*v7 * v13[2]);
              for (uint64_t k = 1; k != v10; ++k)
                float v18 = v18 + (float)(v7[k] * a2[k][2]);
              a3[2] = v18;
            }
          }
          a3 = (float *)((char *)a3 + a4);
          ++a2;
          --v8;
        }
        while (v12);
      }
      else
      {
        uint64_t v11 = a3 + 2;
        do
        {
          uint64_t v20 = *a2;
          *(v11 - 2) = *(float *)&a7 + (float)(*v7 * **a2);
          if (a6 != 1)
          {
            *(v11 - 1) = *(float *)&a7 + (float)(*v7 * v20[1]);
            if (a6 != 2) {
              float *v11 = *(float *)&a7 + (float)(*v7 * v20[2]);
            }
          }
          ++a2;
          uint64_t v11 = (float *)((char *)v11 + a4);
          --a5;
        }
        while (a5);
      }
    }
    return result;
  }
  unint64_t v21 = (a6 - 4);
  if ((int)v10 <= 1)
  {
    uint64_t v31 = 0;
    if ((unint64_t)(v21 & 0xFFFFFFFC) + 5 <= a6) {
      uint64_t v32 = a6;
    }
    else {
      uint64_t v32 = (v21 & 0xFFFFFFFC) + 5;
    }
    uint64_t v33 = (4 * v21) & 0x3FFFFFFF0;
    uint64_t v34 = 4 * v32 - v33;
    uint64_t v35 = v7 + 1;
    unint64_t v36 = v32 - (v21 & 0xFFFFFFFC) - 4;
    uint64_t v37 = v33 + 16;
    uint64_t v80 = (v21 >> 2) + 1;
    unint64_t result = v80 & 0x7FFFFFFC;
    float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = a3;
    while (1)
    {
      int v41 = v8;
      uint64_t v42 = v31 * v9;
      unint64_t v43 = *a2;
      if (v21 < 0xC) {
        break;
      }
      unint64_t v44 = 0;
      uint64_t v47 = (float *)((char *)a3 + v37 + v42);
      BOOL v49 = v40 < (float *)((char *)v43 + v37) && v43 < v47;
      uint64_t v46 = 4;
      uint64_t v45 = 0;
      if (v7 < v47 && v40 < v35) {
        goto LABEL_54;
      }
      if (v49) {
        goto LABEL_54;
      }
      uint64_t v51 = 0;
      uint64_t v52 = v80 & 0x7FFFFFFC;
      do
      {
        float v53 = &v43[v51];
        float32x4x4_t v81 = vld4q_f32(v53);
        v82.val[0] = vmlaq_n_f32(v38, v81.val[0], *v7);
        v82.val[1] = vmlaq_n_f32(v38, v81.val[1], *v7);
        v82.val[2] = vmlaq_n_f32(v38, v81.val[2], *v7);
        v82.val[3] = vmlaq_n_f32(v38, v81.val[3], *v7);
        int v54 = &v40[v51];
        vst4q_f32(v54, v82);
        v51 += 16;
        v52 -= 4;
      }
      while (v52);
      unint64_t v44 = v80 & 0x7FFFFFFC;
      uint64_t v46 = (16 * ((v44 >> 2) & 0x1FFFFFFF)) | 4;
      uint64_t v45 = 4 * v44;
      unint64_t v55 = v44 - 1;
      uint64_t v56 = v45;
      int v57 = 4 * (v80 & 0x7FFFFFFC);
      if (v80 != result) {
        goto LABEL_54;
      }
LABEL_57:
      if (v57 < a6)
      {
        if (v36 >= 0x10)
        {
          uint64_t v67 = 4 * v55;
          unint64_t v68 = (char *)&a3[v67 + 4] + v42;
          uint64_t v69 = (float *)((char *)a3 + v34 + v42 + v67 * 4);
          uint64_t v70 = &v43[v67];
          unint64_t v71 = (unint64_t)&v43[v67 + 4];
          BOOL v73 = v68 < (char *)v70 + v34 && v71 < (unint64_t)v69;
          if (v7 >= v69 || v68 >= (char *)v35)
          {
            if (v73)
            {
              unint64_t v66 = v56;
            }
            else
            {
              unint64_t v66 = v56 + v39;
              float32x4_t v75 = vld1q_dup_f32(v7);
              uint64_t v76 = v56;
              unint64_t v77 = v36 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                float32x4_t v78 = vmlaq_f32(v38, *(float32x4_t *)&v43[v76 + 4], v75);
                unint64_t v79 = (float32x4_t *)&v40[v76];
                *unint64_t v79 = vmlaq_f32(v38, *(float32x4_t *)&v43[v76], v75);
                v79[1] = v78;
                v76 += 8;
                v77 -= 8;
              }
              while (v77);
              if (v36 == v39) {
                goto LABEL_36;
              }
            }
          }
          else
          {
            unint64_t v66 = v56;
          }
        }
        else
        {
          unint64_t v66 = v56;
        }
        do
        {
          v40[v66] = *(float *)&a7 + (float)(*v7 * v43[v66]);
          ++v66;
        }
        while (v66 < a6);
      }
LABEL_36:
      uint64_t v40 = (float *)((char *)v40 + v9);
      ++a2;
      int v8 = v41 - 1;
      ++v31;
      if (!v41) {
        return result;
      }
    }
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 4;
LABEL_54:
    uint64_t v58 = 0;
    unint64_t v55 = v44 - 1;
    uint64_t v59 = v45;
    uint64_t v60 = v43 + 2;
    do
    {
      float v61 = *(float *)&a7 + (float)(*v7 * v60[v59 - 1]);
      float v62 = *(float *)&a7 + (float)(*v7 * v60[v59]);
      float v63 = *(float *)&a7 + (float)(*v7 * v60[v59 + 1]);
      uint64_t v64 = &v40[v59];
      *uint64_t v64 = *(float *)&a7 + (float)(*v7 * v43[v59]);
      uint64_t v65 = (uint64_t)&v40[v45 + v58];
      *(float *)(v65 + 4) = v61;
      *(float *)(v65 + 8) = v62;
      v64[3] = v63;
      ++v55;
      v58 += 4;
      int v57 = v45 + v58;
      v59 += 4;
    }
    while (v45 + v58 <= v21);
    uint64_t v56 = v46 + v58 - 4;
    goto LABEL_57;
  }
  float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  do
  {
    unint64_t v23 = 0;
    int v24 = v8;
    float32x4_t v25 = *a2;
    uint64_t v26 = 4;
    do
    {
      unint64_t v27 = v26;
      float32x4_t v28 = vmlaq_n_f32(v22, *(float32x4_t *)&v25[v23], *v7);
      for (unint64_t result = 1; result != v10; ++result)
        float32x4_t v28 = vmlaq_n_f32(v28, *(float32x4_t *)&a2[result][v23], v7[result]);
      *(float32x4_t *)&a3[v23] = v28;
      v23 += 4;
      v26 += 4;
    }
    while (v23 <= v21);
    if ((int)v23 < a6)
    {
      do
      {
        float v29 = *(float *)&a7 + (float)(*v7 * v25[v27]);
        for (uint64_t m = 1; m != v10; ++m)
          float v29 = v29 + (float)(v7[m] * a2[m][v27]);
        a3[v27++] = v29;
      }
      while (v27 < a6);
    }
    a3 = (float *)((char *)a3 + a4);
    ++a2;
    --v8;
  }
  while (v24);
  return result;
}

void sub_10034C7D0()
{
}

uint64_t sub_10034C7E4(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_10034C868()
{
}

uint64_t sub_10034C87C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10034C8FC(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_1003400C8(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049AA80;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10034C9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100340854(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034C9DC(uint64_t a1)
{
  *(void *)a1 = off_10049A2B8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034CA8C(uint64_t a1)
{
  *(void *)a1 = off_10049A2B8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_10034CB5C(uint64_t result, uint64_t a2, unsigned char *__b, int a4, int a5, size_t __len, int32x4_t a7)
{
  int v8 = a5;
  int v10 = *(_DWORD *)(result + 8);
  if (v10 >= 0) {
    int v11 = *(_DWORD *)(result + 8);
  }
  else {
    int v11 = v10 + 1;
  }
  uint64_t v12 = (uint64_t)v11 >> 1;
  uint64_t v13 = (float *)(*(void *)(result + 32) + 4 * (v11 >> 1));
  v7.i32[0] = *(_DWORD *)(result + 116);
  float v14 = (void *)(a2 + 8 * (v11 >> 1));
  if (*(unsigned char *)(result + 120))
  {
    if (!a5) {
      return result;
    }
    uint64_t v21 = (v12 + 1);
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32(v7, 0);
    uint64_t v23 = a2 + 8 * v12 - 8;
    v24.i64[0] = 0xFF000000FFLL;
    v24.i64[1] = 0xFF000000FFLL;
    while ((int)__len < 4)
    {
      uint64_t v25 = 0;
      if ((int)__len > 0) {
        goto LABEL_28;
      }
LABEL_17:
      __b += a4;
      ++v14;
      v23 += 8;
      if (!--v8) {
        return result;
      }
    }
    uint64_t v25 = 0;
    do
    {
      float32x4_t v27 = vmlaq_n_f32(v22, *(float32x4_t *)(*v14 + 4 * v25), *v13);
      if (v10 >= 2)
      {
        float32x4_t v28 = (uint64_t *)v23;
        uint64_t v29 = 1;
        do
        {
          uint64_t v30 = *v28--;
          float32x4_t v27 = vmlaq_n_f32(v27, vaddq_f32(*(float32x4_t *)(v14[v29] + 4 * v25), *(float32x4_t *)(v30 + 4 * v25)), v13[v29]);
          ++v29;
        }
        while (v21 != v29);
      }
      unint64_t result = (uint64_t)rintf(v27.f32[3]);
      v27.i32[0] = (uint64_t)rintf(v27.f32[0]);
      v27.i32[1] = (uint64_t)rintf(v27.f32[1]);
      v27.i32[2] = (uint64_t)rintf(v27.f32[2]);
      v27.i32[3] = result;
      int16x8_t v26 = (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v27, (int32x4_t)0), v24);
      *(int16x4_t *)v26.i8 = vmovn_s32((int32x4_t)v26);
      *(_DWORD *)&__b[v25] = vmovn_s16(v26).u32[0];
      v25 += 4;
    }
    while (v25 <= (int)__len - 4);
    uint64_t v25 = v25;
    if ((int)v25 >= (int)__len) {
      goto LABEL_17;
    }
LABEL_28:
    if (v10 >= 2)
    {
      do
      {
        float v33 = *(float *)v7.i32 + (float)(*v13 * *(float *)(*v14 + 4 * v25));
        uint64_t v34 = (uint64_t *)v23;
        uint64_t v35 = 1;
        do
        {
          unint64_t result = 4 * v25;
          uint64_t v36 = *v34--;
          float v33 = v33 + (float)(v13[v35] * (float)(*(float *)(v14[v35] + 4 * v25) + *(float *)(v36 + 4 * v25)));
          ++v35;
        }
        while (v21 != v35);
        float v37 = rintf(v33);
        int v38 = (uint64_t)v37 & ~((int)(uint64_t)v37 >> 31);
        if (v38 >= 255) {
          LOBYTE(v38) = -1;
        }
        __b[v25++] = v38;
      }
      while (v25 != __len);
    }
    else
    {
      do
      {
        float v31 = rintf(*(float *)v7.i32 + (float)(*v13 * *(float *)(*v14 + 4 * v25)));
        int v32 = (uint64_t)v31 & ~((int)(uint64_t)v31 >> 31);
        if (v32 >= 255) {
          LOBYTE(v32) = -1;
        }
        __b[v25++] = v32;
      }
      while (__len != v25);
    }
    goto LABEL_17;
  }
  if (a5)
  {
    int v15 = a5 - 1;
    float v16 = rintf(*(float *)v7.i32);
    unint64_t result = 255;
    if ((int)((uint64_t)v16 & ~((int)(uint64_t)v16 >> 31)) >= 255) {
      int v17 = 255;
    }
    else {
      int v17 = (uint64_t)v16 & ~((int)(uint64_t)v16 >> 31);
    }
    uint64_t v18 = a4;
    unint64_t v19 = (__len - 4);
    uint64_t v96 = a4;
    int v95 = v17;
    if ((int)__len >= 4)
    {
      uint64_t v39 = 0;
      uint64_t v40 = (v12 + 1);
      unint64_t v41 = __len;
      int v42 = (v19 & 0xFFFFFFFC) + 5;
      if ((int)__len > v42) {
        int v42 = __len;
      }
      int16x4_t v43 = vdup_n_s16(v17);
      uint64_t v44 = a2 + 8 * v12 - 8;
      int32x4_t v45 = 0uLL;
      v46.i64[0] = 0xFF000000FFLL;
      v46.i64[1] = 0xFF000000FFLL;
      uint64_t v47 = __b;
      int v93 = __len;
      __int32 v92 = v7.i32[0];
      uint64_t __lena = v42 - (v19 & 0xFFFFFFFC) - 5 + 1;
      do
      {
        uint64_t v49 = 0;
        unint64_t v50 = 0;
        int v48 = v15;
        uint64_t v51 = 4;
        do
        {
          unint64_t v52 = v51;
          uint64_t v53 = v49;
          *(int16x4_t *)a7.i8 = v43;
          if (v10 >= 2)
          {
            int v54 = (uint64_t *)v44;
            uint64_t v55 = 1;
            float v56 = *(float *)v7.i32;
            float v57 = *(float *)v7.i32;
            float v58 = *(float *)v7.i32;
            float v59 = *(float *)v7.i32;
            do
            {
              uint64_t v60 = (float *)(v14[v55] + 4 * v50);
              uint64_t v61 = *v54--;
              float v62 = (float *)(v61 + 4 * v50);
              float v63 = v13[v55];
              float v59 = v59 + (float)(v63 * (float)(*v60 - *v62));
              float v58 = v58 + (float)(v63 * (float)(v60[1] - v62[1]));
              float v57 = v57 + (float)(v63 * (float)(v60[2] - v62[2]));
              float v56 = v56 + (float)(v63 * (float)(v60[3] - v62[3]));
              ++v55;
            }
            while (v40 != v55);
            uint64_t v64 = (uint64_t)rintf(v56);
            v65.i32[0] = (uint64_t)rintf(v59);
            v65.i32[1] = (uint64_t)rintf(v58);
            v65.i32[2] = (uint64_t)rintf(v57);
            v65.i32[3] = v64;
            a7 = vminq_s32(vmaxq_s32(v65, v45), v46);
            *(int16x4_t *)a7.i8 = vmovn_s32(a7);
          }
          *(_DWORD *)&v47[v50] = vmovn_s16((int16x8_t)a7).u32[0];
          v50 += 4;
          uint64_t v51 = v52 + 4;
          uint64_t v49 = v53 + 1;
        }
        while (v50 <= v19);
        if ((int)v50 < (int)__len)
        {
          if (v10 < 2)
          {
            int v94 = v48;
            memset(&__b[4 * v53 + 4 + v39 * v18], v17, __lena);
            int v48 = v94;
            int v17 = v95;
            v46.i64[0] = 0xFF000000FFLL;
            v46.i64[1] = 0xFF000000FFLL;
            int32x4_t v45 = 0uLL;
            unint64_t result = 255;
            uint64_t v18 = v96;
            v7.i32[0] = v92;
            LODWORD(__len) = v93;
          }
          else
          {
            do
            {
              unint64_t v66 = (uint64_t *)v44;
              uint64_t v67 = 1;
              float v68 = *(float *)v7.i32;
              do
              {
                uint64_t v69 = *v66--;
                float v68 = v68 + (float)(v13[v67] * (float)(*(float *)(v14[v67] + 4 * v52) - *(float *)(v69 + 4 * v52)));
                ++v67;
              }
              while (v40 != v67);
              float v70 = rintf(v68);
              int v71 = (uint64_t)v70 & ~((int)(uint64_t)v70 >> 31);
              if (v71 >= 255) {
                LOBYTE(v71) = -1;
              }
              v47[v52++] = v71;
            }
            while (v52 < v41);
          }
        }
        v47 += v18;
        ++v14;
        int v15 = v48 - 1;
        ++v39;
        v44 += 8;
      }
      while (v48);
    }
    else if ((int)__len >= 1)
    {
      if (v10 >= 2)
      {
        uint64_t v72 = (v12 + 1);
        uint64_t v73 = a2 + 8 * v12 - 8;
        do
        {
          int v74 = v15;
          float32x4_t v75 = (float **)v73;
          uint64_t v76 = 1;
          float v77 = *(float *)v7.i32;
          do
          {
            float32x4_t v78 = *v75--;
            float v77 = v77 + (float)(v13[v76] * (float)(*(float *)v14[v76] - *v78));
            ++v76;
          }
          while (v72 != v76);
          float v79 = rintf(v77);
          int v80 = (uint64_t)v79 & ~((int)(uint64_t)v79 >> 31);
          if (v80 >= 255) {
            LOBYTE(v80) = -1;
          }
          *__b = v80;
          if (__len != 1)
          {
            uint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
            uint64_t v82 = 1;
            float v83 = *(float *)v7.i32;
            do
            {
              float v83 = v83 + (float)(v13[v82] * (float)(*(float *)(v14[v82] + 4) - *(float *)(v14[v81] + 4)));
              ++v82;
              --v81;
            }
            while (v72 != v82);
            float v84 = rintf(v83);
            int v85 = (uint64_t)v84 & ~((int)(uint64_t)v84 >> 31);
            if (v85 >= 255) {
              LOBYTE(v85) = -1;
            }
            __b[1] = v85;
            if (__len != 2)
            {
              uint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
              uint64_t v87 = 1;
              float v88 = *(float *)v7.i32;
              do
              {
                float v88 = v88 + (float)(v13[v87] * (float)(*(float *)(v14[v87] + 8) - *(float *)(v14[v86] + 8)));
                ++v87;
                --v86;
              }
              while (v72 != v87);
              float v89 = rintf(v88);
              int v90 = (uint64_t)v89 & ~((int)(uint64_t)v89 >> 31);
              if (v90 >= 255) {
                LOBYTE(v90) = -1;
              }
              __b[2] = v90;
            }
          }
          __b += a4;
          ++v14;
          int v15 = v74 - 1;
          v73 += 8;
        }
        while (v74);
      }
      else
      {
        size_t v20 = __len;
        do
        {
          unint64_t result = (uint64_t)memset(__b, v17, v20);
          int v17 = v95;
          __b += v96;
          --v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

void sub_10034D154()
{
}

uint64_t sub_10034D168(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10034D1E8(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_10034099C(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049AB08;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10034D2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100341134(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034D2C8(uint64_t a1)
{
  *(void *)a1 = off_10049A340;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034D378(uint64_t a1)
{
  *(void *)a1 = off_10049A340;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_10034D448(uint64_t result, uint64_t a2, unsigned char *__b, int a4, int a5, size_t __len, int32x4_t a7)
{
  int v7 = a5;
  int v9 = *(_DWORD *)(result + 8);
  if (v9 >= 0) {
    int v10 = *(_DWORD *)(result + 8);
  }
  else {
    int v10 = v9 + 1;
  }
  uint64_t v11 = (uint64_t)v10 >> 1;
  uint64_t v12 = 8 * (v10 >> 1);
  uint64_t v13 = (double *)(*(void *)(result + 32) + v12);
  double v14 = *(double *)(result + 120);
  int v15 = (void *)(a2 + v12);
  if (*(unsigned char *)(result + 128))
  {
    if (!a5) {
      return result;
    }
    unsigned int v22 = v11 + 1;
    uint64_t v23 = a2 + 8 * v11 - 8;
    uint64_t v24 = 8 * v22;
    v25.i64[0] = 0xFF000000FFLL;
    v25.i64[1] = 0xFF000000FFLL;
    while ((int)__len < 4)
    {
      uint64_t v26 = 0;
      if ((int)__len > 0) {
        goto LABEL_28;
      }
LABEL_17:
      __b += a4;
      ++v15;
      v23 += 8;
      if (!--v7) {
        return result;
      }
    }
    uint64_t v26 = 0;
    do
    {
      uint64_t v30 = (double *)(*v15 + 8 * v26);
      double v31 = v14 + *v13 * *v30;
      double v32 = v14 + *v13 * v30[1];
      double v33 = v14 + *v13 * v30[2];
      double v34 = v14 + *v13 * v30[3];
      if (v9 >= 2)
      {
        uint64_t v35 = 8;
        uint64_t v36 = (uint64_t *)v23;
        do
        {
          float v37 = (double *)(v15[(unint64_t)v35 / 8] + 8 * v26);
          uint64_t v38 = *v36--;
          uint64_t v39 = (double *)(v38 + 8 * v26);
          double v40 = v13[(unint64_t)v35 / 8];
          double v31 = v31 + v40 * (*v37 + *v39);
          double v32 = v32 + v40 * (v37[1] + v39[1]);
          double v33 = v33 + v40 * (v37[2] + v39[2]);
          double v34 = v34 + v40 * (v37[3] + v39[3]);
          v35 += 8;
        }
        while (v24 != v35);
      }
      uint64_t v27 = (uint64_t)rint(v32);
      unint64_t result = (uint64_t)rint(v34);
      v28.i32[0] = (uint64_t)rint(v31);
      v28.i32[1] = v27;
      v28.i64[1] = __PAIR64__(result, (uint64_t)rint(v33));
      int16x8_t v29 = (int16x8_t)vminq_s32(vmaxq_s32(v28, (int32x4_t)0), v25);
      *(int16x4_t *)v29.i8 = vmovn_s32((int32x4_t)v29);
      *(_DWORD *)&__b[v26] = vmovn_s16(v29).u32[0];
      v26 += 4;
    }
    while (v26 <= (int)__len - 4);
    uint64_t v26 = v26;
    if ((int)v26 >= (int)__len) {
      goto LABEL_17;
    }
LABEL_28:
    if (v9 >= 2)
    {
      do
      {
        double v43 = v14 + *v13 * *(double *)(*v15 + 8 * v26);
        uint64_t v44 = 8;
        int32x4_t v45 = (uint64_t *)v23;
        do
        {
          unint64_t result = 8 * v26;
          uint64_t v46 = *v45--;
          double v43 = v43
              + v13[(unint64_t)v44 / 8]
              * (*(double *)(v15[(unint64_t)v44 / 8] + 8 * v26) + *(double *)(v46 + 8 * v26));
          v44 += 8;
        }
        while (v24 != v44);
        double v47 = rint(v43);
        int v48 = (uint64_t)v47 & ~((int)(uint64_t)v47 >> 31);
        if (v48 >= 255) {
          LOBYTE(v48) = -1;
        }
        __b[v26++] = v48;
      }
      while (v26 != __len);
    }
    else
    {
      do
      {
        double v41 = rint(v14 + *v13 * *(double *)(*v15 + 8 * v26));
        int v42 = (uint64_t)v41 & ~((int)(uint64_t)v41 >> 31);
        if (v42 >= 255) {
          LOBYTE(v42) = -1;
        }
        __b[v26++] = v42;
      }
      while (__len != v26);
    }
    goto LABEL_17;
  }
  if (a5)
  {
    int v16 = a5 - 1;
    double v17 = rint(v14);
    unint64_t result = 255;
    if ((int)((uint64_t)v17 & ~((int)(uint64_t)v17 >> 31)) >= 255) {
      int v18 = 255;
    }
    else {
      int v18 = (uint64_t)v17 & ~((int)(uint64_t)v17 >> 31);
    }
    uint64_t v19 = a4;
    unint64_t v20 = (__len - 4);
    uint64_t v105 = a4;
    int v104 = v18;
    if ((int)__len >= 4)
    {
      uint64_t v49 = 0;
      unint64_t v50 = __len;
      int v51 = (v20 & 0xFFFFFFFC) + 5;
      if ((int)__len > v51) {
        int v51 = __len;
      }
      int16x4_t v52 = vdup_n_s16(v18);
      uint64_t v53 = a2 + 8 * v11 - 8;
      uint64_t v54 = 8 * (v11 + 1);
      int32x4_t v55 = 0uLL;
      v56.i64[0] = 0xFF000000FFLL;
      v56.i64[1] = 0xFF000000FFLL;
      float v57 = __b;
      int v102 = __len;
      uint64_t __lena = v51 - (v20 & 0xFFFFFFFC) - 5 + 1;
      do
      {
        uint64_t v59 = 0;
        unint64_t v60 = 0;
        int v58 = v16;
        uint64_t v61 = 4;
        do
        {
          unint64_t v62 = v61;
          uint64_t v63 = v59;
          *(int16x4_t *)a7.i8 = v52;
          if (v9 >= 2)
          {
            uint64_t v64 = 8;
            int32x4_t v65 = (uint64_t *)v53;
            double v66 = v14;
            double v67 = v14;
            double v68 = v14;
            double v69 = v14;
            do
            {
              float v70 = (double *)(v15[(unint64_t)v64 / 8] + 8 * v60);
              uint64_t v71 = *v65--;
              uint64_t v72 = (double *)(v71 + 8 * v60);
              double v73 = v13[(unint64_t)v64 / 8];
              double v69 = v69 + v73 * (*v70 - *v72);
              double v68 = v68 + v73 * (v70[1] - v72[1]);
              double v67 = v67 + v73 * (v70[2] - v72[2]);
              double v66 = v66 + v73 * (v70[3] - v72[3]);
              v64 += 8;
            }
            while (v54 != v64);
            uint64_t v74 = (uint64_t)rint(v66);
            v75.i32[0] = (uint64_t)rint(v69);
            v75.i32[1] = (uint64_t)rint(v68);
            v75.i32[2] = (uint64_t)rint(v67);
            v75.i32[3] = v74;
            a7 = vminq_s32(vmaxq_s32(v75, v55), v56);
            *(int16x4_t *)a7.i8 = vmovn_s32(a7);
          }
          *(_DWORD *)&v57[v60] = vmovn_s16((int16x8_t)a7).u32[0];
          v60 += 4;
          uint64_t v61 = v62 + 4;
          uint64_t v59 = v63 + 1;
        }
        while (v60 <= v20);
        if ((int)v60 < (int)__len)
        {
          if (v9 < 2)
          {
            int v103 = v58;
            memset(&__b[4 * v63 + 4 + v49 * v19], v18, __lena);
            int v58 = v103;
            int v18 = v104;
            v56.i64[0] = 0xFF000000FFLL;
            v56.i64[1] = 0xFF000000FFLL;
            int32x4_t v55 = 0uLL;
            unint64_t result = 255;
            uint64_t v19 = v105;
            LODWORD(__len) = v102;
          }
          else
          {
            do
            {
              uint64_t v76 = 8;
              float v77 = (uint64_t *)v53;
              double v78 = v14;
              do
              {
                uint64_t v79 = *v77--;
                double v78 = v78
                    + v13[(unint64_t)v76 / 8]
                    * (*(double *)(v15[(unint64_t)v76 / 8] + 8 * v62) - *(double *)(v79 + 8 * v62));
                v76 += 8;
              }
              while (v54 != v76);
              double v80 = rint(v78);
              int v81 = (uint64_t)v80 & ~((int)(uint64_t)v80 >> 31);
              if (v81 >= 255) {
                LOBYTE(v81) = -1;
              }
              v57[v62++] = v81;
            }
            while (v62 < v50);
          }
        }
        v57 += v19;
        ++v15;
        int v16 = v58 - 1;
        ++v49;
        v53 += 8;
      }
      while (v58);
    }
    else if ((int)__len >= 1)
    {
      if (v9 >= 2)
      {
        uint64_t v82 = a2 + 8 * v11 - 8;
        uint64_t v83 = 8 * (v11 + 1);
        do
        {
          int v84 = v16;
          uint64_t v85 = 8;
          uint64_t v86 = (double **)v82;
          double v87 = v14;
          do
          {
            float v88 = *v86--;
            double v87 = v87 + v13[(unint64_t)v85 / 8] * (*(double *)v15[(unint64_t)v85 / 8] - *v88);
            v85 += 8;
          }
          while (v83 != v85);
          double v89 = rint(v87);
          int v90 = (uint64_t)v89 & ~((int)(uint64_t)v89 >> 31);
          if (v90 >= 255) {
            LOBYTE(v90) = -1;
          }
          *__b = v90;
          if (__len != 1)
          {
            uint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
            uint64_t v92 = 8;
            double v93 = v14;
            do
            {
              double v93 = v93
                  + v13[(unint64_t)v92 / 8]
                  * (*(double *)(v15[(unint64_t)v92 / 8] + 8) - *(double *)(v15[v91] + 8));
              v92 += 8;
              --v91;
            }
            while (v83 != v92);
            double v94 = rint(v93);
            int v95 = (uint64_t)v94 & ~((int)(uint64_t)v94 >> 31);
            if (v95 >= 255) {
              LOBYTE(v95) = -1;
            }
            __b[1] = v95;
            if (__len != 2)
            {
              uint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              uint64_t v97 = 8;
              double v98 = v14;
              do
              {
                double v98 = v98
                    + v13[(unint64_t)v97 / 8]
                    * (*(double *)(v15[(unint64_t)v97 / 8] + 16) - *(double *)(v15[v96] + 16));
                v97 += 8;
                --v96;
              }
              while (v83 != v97);
              double v99 = rint(v98);
              int v100 = (uint64_t)v99 & ~((int)(uint64_t)v99 >> 31);
              if (v100 >= 255) {
                LOBYTE(v100) = -1;
              }
              __b[2] = v100;
            }
          }
          __b += a4;
          ++v15;
          int v16 = v84 - 1;
          v82 += 8;
        }
        while (v84);
      }
      else
      {
        size_t v21 = __len;
        do
        {
          unint64_t result = (uint64_t)memset(__b, v18, v21);
          int v18 = v104;
          __b += v105;
          --v7;
        }
        while (v7);
      }
    }
  }
  return result;
}

void sub_10034DA70()
{
}

uint64_t sub_10034DA84(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10034DB04(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_10034127C(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049AB90;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10034DBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1003419E0(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034DBE4(uint64_t a1)
{
  *(void *)a1 = off_10049A3C8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034DC94(uint64_t a1)
{
  *(void *)a1 = off_10049A3C8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

float *sub_10034DD64(float *result, uint64_t a2, _WORD *a3, int a4, int a5, int a6, double a7, double a8)
{
  int v8 = *((_DWORD *)result + 2);
  if (v8 >= 0) {
    int v9 = *((_DWORD *)result + 2);
  }
  else {
    int v9 = v8 + 1;
  }
  uint64_t v10 = (uint64_t)v9 >> 1;
  uint64_t v11 = (_DWORD *)(*((void *)result + 4) + 4 * (v9 >> 1));
  *(float *)&a7 = result[29];
  uint64_t v12 = (float **)(a2 + 8 * (v9 >> 1));
  if ((_BYTE)result[30])
  {
    if (a5)
    {
      uint64_t v44 = (float *)(a5 - 1);
      uint64_t v45 = a4;
      if (a6 > 3)
      {
        LODWORD(a8) = *v11;
        uint64_t v55 = (v10 + 1);
        float32x4_t v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
        float32x4_t v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
        uint64_t v58 = a2 + 8 * v10 - 8;
        uint64_t v59 = a3 + 4;
        v60.i64[0] = 0xFFFF0000FFFFLL;
        v60.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          unint64_t v61 = 0;
          unint64_t result = v44;
          unint64_t v62 = *v12;
          uint64_t v63 = v59;
          uint64_t v64 = 4;
          do
          {
            unint64_t v65 = v64;
            double v66 = v63;
            float32x4_t v67 = vmlaq_f32(v57, *(float32x4_t *)&v62[v61], v56);
            if (v8 >= 2)
            {
              double v68 = (uint64_t *)v58;
              uint64_t v69 = 1;
              do
              {
                uint64_t v70 = *v68--;
                float32x4_t v67 = vmlaq_n_f32(v67, vaddq_f32(*(float32x4_t *)&v12[v69][v61], *(float32x4_t *)(v70 + 4 * v61)), *(float *)&v11[v69]);
                ++v69;
              }
              while (v55 != v69);
            }
            v67.i32[0] = (uint64_t)rintf(v67.f32[0]);
            v67.i32[1] = (uint64_t)rintf(v67.f32[1]);
            v67.i32[2] = (uint64_t)rintf(v67.f32[2]);
            v67.i32[3] = (uint64_t)rintf(v67.f32[3]);
            *(int16x4_t *)&a3[v61] = vmovn_s32(vminq_s32(vmaxq_s32((int32x4_t)v67, (int32x4_t)0), v60));
            v61 += 4;
            uint64_t v64 = v65 + 4;
            v63 += 4;
          }
          while (v61 <= (a6 - 4));
          if ((int)v61 < a6)
          {
            if (v8 >= 2)
            {
              do
              {
                float v73 = *(float *)&a7 + (float)(*(float *)&a8 * v62[v65]);
                uint64_t v74 = (uint64_t *)v58;
                uint64_t v75 = 1;
                do
                {
                  uint64_t v76 = *v74--;
                  float v73 = v73 + (float)(*(float *)&v11[v75] * (float)(v12[v75][v65] + *(float *)(v76 + 4 * v65)));
                  ++v75;
                }
                while (v55 != v75);
                float v77 = rintf(v73);
                int v78 = (uint64_t)v77 & ~((int)(uint64_t)v77 >> 31);
                if (v78 >= 0xFFFF) {
                  LOWORD(v78) = -1;
                }
                a3[v65++] = v78;
              }
              while (v65 < a6);
            }
            else
            {
              do
              {
                float v71 = rintf(*(float *)&a7 + (float)(*(float *)&a8 * v62[v65]));
                int v72 = (uint64_t)v71 & ~((int)(uint64_t)v71 >> 31);
                if (v72 >= 0xFFFF) {
                  LOWORD(v72) = -1;
                }
                *v66++ = v72;
                ++v65;
              }
              while (v65 < a6);
            }
          }
          a3 = (_WORD *)((char *)a3 + v45);
          ++v12;
          uint64_t v44 = (float *)(result - 1);
          v58 += 8;
          uint64_t v59 = (_WORD *)((char *)v59 + v45);
        }
        while (result);
      }
      else if (a6 >= 1)
      {
        float v46 = *(float *)v11;
        if (v8 >= 2)
        {
          uint64_t v79 = (v10 + 1);
          uint64_t v80 = a2 + 8 * v10 - 8;
          do
          {
            int v81 = (int)v44;
            uint64_t v82 = *v12;
            float v83 = *(float *)&a7 + (float)(v46 * **v12);
            int v84 = (float **)v80;
            uint64_t v85 = 1;
            do
            {
              unint64_t result = v12[v85];
              uint64_t v86 = *v84--;
              float v83 = v83 + (float)(*(float *)&v11[v85++] * (float)(*result + *v86));
            }
            while (v79 != v85);
            float v87 = rintf(v83);
            int v88 = (uint64_t)v87 & ~((int)(uint64_t)v87 >> 31);
            if (v88 >= 0xFFFF) {
              LOWORD(v88) = -1;
            }
            *a3 = v88;
            if (a6 != 1)
            {
              float v89 = *(float *)&a7 + (float)(v46 * v82[1]);
              uint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
              uint64_t v91 = 1;
              do
              {
                unint64_t result = v12[v90];
                float v89 = v89 + (float)(*(float *)&v11[v91] * (float)(v12[v91][1] + result[1]));
                ++v91;
                --v90;
              }
              while (v79 != v91);
              float v92 = rintf(v89);
              int v93 = (uint64_t)v92 & ~((int)(uint64_t)v92 >> 31);
              if (v93 >= 0xFFFF) {
                LOWORD(v93) = -1;
              }
              a3[1] = v93;
              if (a6 != 2)
              {
                float v94 = *(float *)&a7 + (float)(v46 * v82[2]);
                uint64_t v95 = 0x1FFFFFFFFFFFFFFFLL;
                uint64_t v96 = 1;
                do
                {
                  float v94 = v94 + (float)(*(float *)&v11[v96] * (float)(v12[v96][2] + v12[v95][2]));
                  ++v96;
                  --v95;
                }
                while (v79 != v96);
                float v97 = rintf(v94);
                int v98 = (uint64_t)v97 & ~((int)(uint64_t)v97 >> 31);
                if (v98 >= 0xFFFF) {
                  LOWORD(v98) = -1;
                }
                a3[2] = v98;
              }
            }
            a3 = (_WORD *)((char *)a3 + a4);
            ++v12;
            LODWORD(v44) = v44 - 1;
            v80 += 8;
          }
          while (v81);
        }
        else
        {
          double v47 = a3 + 2;
          do
          {
            int v48 = *v12;
            float v49 = rintf(*(float *)&a7 + (float)(v46 * **v12));
            int v50 = (uint64_t)v49 & ~((int)(uint64_t)v49 >> 31);
            if (v50 >= 0xFFFF) {
              LOWORD(v50) = -1;
            }
            *(v47 - 2) = v50;
            if (a6 != 1)
            {
              float v51 = rintf(*(float *)&a7 + (float)(v46 * v48[1]));
              int v52 = (uint64_t)v51 & ~((int)(uint64_t)v51 >> 31);
              if (v52 >= 0xFFFF) {
                LOWORD(v52) = -1;
              }
              *(v47 - 1) = v52;
              if (a6 != 2)
              {
                float v53 = rintf(*(float *)&a7 + (float)(v46 * v48[2]));
                int v54 = (uint64_t)v53 & ~((int)(uint64_t)v53 >> 31);
                if (v54 >= 0xFFFF) {
                  LOWORD(v54) = -1;
                }
                *double v47 = v54;
              }
            }
            ++v12;
            double v47 = (_WORD *)((char *)v47 + a4);
            --a5;
          }
          while (a5);
        }
      }
    }
  }
  else if (a5)
  {
    int v13 = a6 - 4;
    float v14 = rintf(*(float *)&a7);
    signed int v15 = (uint64_t)v14 & ~((int)(uint64_t)v14 >> 31);
    if (v15 >= 0xFFFF) {
      signed int v15 = 0xFFFF;
    }
    uint64_t v16 = a4;
    uint64_t v17 = (v10 + 1);
    int16x8_t v18 = vdupq_n_s16(v15);
    uint64_t v19 = a2 + 8 * v10 - 8;
    v20.i64[0] = 0xFFFF0000FFFFLL;
    v20.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        if (v8 >= 2)
        {
          unint64_t result = 0;
          do
          {
            unsigned int v22 = (uint64_t *)v19;
            uint64_t v23 = 1;
            float v24 = *(float *)&a7;
            float v25 = *(float *)&a7;
            float v26 = *(float *)&a7;
            float v27 = *(float *)&a7;
            do
            {
              int32x4_t v28 = &v12[v23][(void)result];
              uint64_t v29 = *v22--;
              uint64_t v30 = (float *)(v29 + 4 * (void)result);
              float v31 = *(float *)&v11[v23];
              float v27 = v27 + (float)(v31 * (float)(*v28 - *v30));
              float v26 = v26 + (float)(v31 * (float)(v28[1] - v30[1]));
              float v25 = v25 + (float)(v31 * (float)(v28[2] - v30[2]));
              float v24 = v24 + (float)(v31 * (float)(v28[3] - v30[3]));
              ++v23;
            }
            while (v17 != v23);
            uint64_t v32 = (uint64_t)rintf(v24);
            v33.i32[0] = (uint64_t)rintf(v27);
            v33.i32[1] = (uint64_t)rintf(v26);
            v33.i32[2] = (uint64_t)rintf(v25);
            v33.i32[3] = v32;
            *(int16x4_t *)&a3[(void)result++] = vmovn_s32(vminq_s32(vmaxq_s32(v33, (int32x4_t)0), v20));
          }
          while ((uint64_t)result <= v13);
        }
        else
        {
          unint64_t result = 0;
          size_t v21 = a3;
          do
          {
            *v21++ = v18.i64[0];
            ++result;
          }
          while ((uint64_t)result <= v13);
        }
        unint64_t result = (float *)result;
        if ((int)result >= a6) {
          goto LABEL_9;
        }
      }
      else
      {
        unint64_t result = 0;
        if (a6 <= 0) {
          goto LABEL_9;
        }
      }
      if (v8 >= 2)
      {
        do
        {
          uint64_t v36 = (uint64_t *)v19;
          uint64_t v37 = 1;
          float v38 = *(float *)&a7;
          do
          {
            uint64_t v39 = *v36--;
            float v38 = v38
                + (float)(*(float *)&v11[v37]
                        * (float)(v12[v37][(void)result] - *(float *)(v39 + 4 * (void)result)));
            ++v37;
          }
          while (v17 != v37);
          float v40 = rintf(v38);
          int v41 = (uint64_t)v40 & ~((int)(uint64_t)v40 >> 31);
          if (v41 >= 0xFFFF) {
            LOWORD(v41) = -1;
          }
          a3[(void)result] = v41;
          unint64_t result = (float *)((char *)result + 1);
        }
        while (result != (float *)a6);
        goto LABEL_9;
      }
      unint64_t v34 = a6 - (void)result;
      if (v34 >= 0x10)
      {
        uint64_t v35 = (float *)((char *)result + (v34 & 0xFFFFFFFFFFFFFFF0));
        unint64_t result = (float *)(2 * (void)result);
        unint64_t v42 = v34 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          double v43 = (int16x8_t *)((char *)result + (void)a3);
          *double v43 = v18;
          v43[1] = v18;
          result += 8;
          v42 -= 16;
        }
        while (v42);
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v35 = result;
      }
      do
      {
        a3[(void)v35] = v15;
        uint64_t v35 = (float *)((char *)v35 + 1);
      }
      while ((float *)a6 != v35);
LABEL_9:
      a3 = (_WORD *)((char *)a3 + v16);
      ++v12;
      v19 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_10034E380()
{
}

uint64_t sub_10034E394(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10034E414(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_100341B28(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049AC18;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10034E4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100342290(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034E4F4(uint64_t a1)
{
  *(void *)a1 = off_10049A450;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034E5A4(uint64_t a1)
{
  *(void *)a1 = off_10049A450;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

double *sub_10034E674(double *result, uint64_t a2, _WORD *a3, int a4, int a5, int a6)
{
  int v6 = *((_DWORD *)result + 2);
  if (v6 >= 0) {
    int v7 = *((_DWORD *)result + 2);
  }
  else {
    int v7 = v6 + 1;
  }
  uint64_t v8 = (uint64_t)v7 >> 1;
  uint64_t v9 = 8 * (v7 >> 1);
  uint64_t v10 = (double *)(*((void *)result + 4) + v9);
  double v11 = result[15];
  uint64_t v12 = (double **)(a2 + v9);
  if ((_BYTE)result[16])
  {
    if (a5)
    {
      uint64_t v45 = (double *)(a5 - 1);
      uint64_t v46 = a4;
      if (a6 > 3)
      {
        double v56 = *v10;
        uint64_t v57 = a2 + 8 * v8 - 8;
        uint64_t v58 = 8 * (v8 + 1);
        uint64_t v59 = a3 + 4;
        v60.i64[0] = 0xFFFF0000FFFFLL;
        v60.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          unint64_t v61 = 0;
          unint64_t result = v45;
          unint64_t v62 = *v12;
          uint64_t v63 = v59;
          uint64_t v64 = 4;
          do
          {
            unint64_t v67 = v64;
            double v68 = v63;
            uint64_t v69 = &v62[v61];
            double v70 = v11 + v56 * *v69;
            double v71 = v11 + v56 * v69[1];
            double v72 = v11 + v56 * v69[2];
            double v73 = v11 + v56 * v69[3];
            if (v6 >= 2)
            {
              uint64_t v74 = 8;
              uint64_t v75 = (uint64_t *)v57;
              do
              {
                uint64_t v76 = &v12[(unint64_t)v74 / 8][v61];
                uint64_t v77 = *v75--;
                int v78 = (double *)(v77 + 8 * v61);
                double v79 = v10[(unint64_t)v74 / 8];
                double v70 = v70 + v79 * (*v76 + *v78);
                double v71 = v71 + v79 * (v76[1] + v78[1]);
                double v72 = v72 + v79 * (v76[2] + v78[2]);
                double v73 = v73 + v79 * (v76[3] + v78[3]);
                v74 += 8;
              }
              while (v58 != v74);
            }
            uint64_t v65 = (uint64_t)rint(v71);
            v66.i32[0] = (uint64_t)rint(v70);
            v66.i32[1] = v65;
            v66.i64[1] = __PAIR64__((uint64_t)rint(v73), (uint64_t)rint(v72));
            *(int16x4_t *)&a3[v61] = vmovn_s32(vminq_s32(vmaxq_s32(v66, (int32x4_t)0), v60));
            v61 += 4;
            uint64_t v64 = v67 + 4;
            uint64_t v63 = v68 + 4;
          }
          while (v61 <= (a6 - 4));
          if ((int)v61 < a6)
          {
            if (v6 >= 2)
            {
              do
              {
                double v82 = v11 + v56 * v62[v67];
                uint64_t v83 = 8;
                int v84 = (uint64_t *)v57;
                do
                {
                  uint64_t v85 = *v84--;
                  double v82 = v82
                      + v10[(unint64_t)v83 / 8]
                      * (v12[(unint64_t)v83 / 8][v67] + *(double *)(v85 + 8 * v67));
                  v83 += 8;
                }
                while (v58 != v83);
                double v86 = rint(v82);
                int v87 = (uint64_t)v86 & ~((int)(uint64_t)v86 >> 31);
                if (v87 >= 0xFFFF) {
                  LOWORD(v87) = -1;
                }
                a3[v67++] = v87;
              }
              while (v67 < a6);
            }
            else
            {
              do
              {
                double v80 = rint(v11 + v56 * v62[v67]);
                int v81 = (uint64_t)v80 & ~((int)(uint64_t)v80 >> 31);
                if (v81 >= 0xFFFF) {
                  LOWORD(v81) = -1;
                }
                *v68++ = v81;
                ++v67;
              }
              while (v67 < a6);
            }
          }
          a3 = (_WORD *)((char *)a3 + v46);
          ++v12;
          uint64_t v45 = (double *)(result - 1);
          v57 += 8;
          uint64_t v59 = (_WORD *)((char *)v59 + v46);
        }
        while (result);
      }
      else if (a6 >= 1)
      {
        double v47 = *v10;
        if (v6 >= 2)
        {
          uint64_t v88 = a2 + 8 * v8 - 8;
          uint64_t v89 = 8 * (v8 + 1);
          do
          {
            int v90 = (int)v45;
            uint64_t v91 = *v12;
            double v92 = v11 + v47 * **v12;
            uint64_t v93 = 8;
            float v94 = (double **)v88;
            do
            {
              unint64_t result = v12[(unint64_t)v93 / 8];
              uint64_t v95 = *v94--;
              double v92 = v92 + v10[(unint64_t)v93 / 8] * (*result + *v95);
              v93 += 8;
            }
            while (v89 != v93);
            double v96 = rint(v92);
            int v97 = (uint64_t)v96 & ~((int)(uint64_t)v96 >> 31);
            if (v97 >= 0xFFFF) {
              LOWORD(v97) = -1;
            }
            *a3 = v97;
            if (a6 != 1)
            {
              double v98 = v11 + v47 * v91[1];
              uint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
              uint64_t v100 = 8;
              do
              {
                unint64_t result = v12[v99];
                double v98 = v98 + v10[(unint64_t)v100 / 8] * (v12[(unint64_t)v100 / 8][1] + result[1]);
                v100 += 8;
                --v99;
              }
              while (v89 != v100);
              double v101 = rint(v98);
              int v102 = (uint64_t)v101 & ~((int)(uint64_t)v101 >> 31);
              if (v102 >= 0xFFFF) {
                LOWORD(v102) = -1;
              }
              a3[1] = v102;
              if (a6 != 2)
              {
                double v103 = v11 + v47 * v91[2];
                uint64_t v104 = 0x1FFFFFFFFFFFFFFFLL;
                uint64_t v105 = 8;
                do
                {
                  double v103 = v103 + v10[(unint64_t)v105 / 8] * (v12[(unint64_t)v105 / 8][2] + v12[v104][2]);
                  v105 += 8;
                  --v104;
                }
                while (v89 != v105);
                double v106 = rint(v103);
                int v107 = (uint64_t)v106 & ~((int)(uint64_t)v106 >> 31);
                if (v107 >= 0xFFFF) {
                  LOWORD(v107) = -1;
                }
                a3[2] = v107;
              }
            }
            a3 = (_WORD *)((char *)a3 + a4);
            ++v12;
            LODWORD(v45) = v45 - 1;
            v88 += 8;
          }
          while (v90);
        }
        else
        {
          int v48 = a3 + 2;
          do
          {
            float v49 = *v12;
            double v50 = rint(v11 + v47 * **v12);
            int v51 = (uint64_t)v50 & ~((int)(uint64_t)v50 >> 31);
            if (v51 >= 0xFFFF) {
              LOWORD(v51) = -1;
            }
            *(v48 - 2) = v51;
            if (a6 != 1)
            {
              double v52 = rint(v11 + v47 * v49[1]);
              int v53 = (uint64_t)v52 & ~((int)(uint64_t)v52 >> 31);
              if (v53 >= 0xFFFF) {
                LOWORD(v53) = -1;
              }
              *(v48 - 1) = v53;
              if (a6 != 2)
              {
                double v54 = rint(v11 + v47 * v49[2]);
                int v55 = (uint64_t)v54 & ~((int)(uint64_t)v54 >> 31);
                if (v55 >= 0xFFFF) {
                  LOWORD(v55) = -1;
                }
                _WORD *v48 = v55;
              }
            }
            ++v12;
            int v48 = (_WORD *)((char *)v48 + a4);
            --a5;
          }
          while (a5);
        }
      }
    }
  }
  else if (a5)
  {
    int v13 = a6 - 4;
    double v14 = rint(v11);
    signed int v15 = (uint64_t)v14 & ~((int)(uint64_t)v14 >> 31);
    if (v15 >= 0xFFFF) {
      signed int v15 = 0xFFFF;
    }
    uint64_t v16 = a4;
    unsigned int v17 = v8 + 1;
    int16x8_t v18 = vdupq_n_s16(v15);
    uint64_t v19 = a2 + 8 * v8 - 8;
    uint64_t v20 = 8 * v17;
    v21.i64[0] = 0xFFFF0000FFFFLL;
    v21.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if (a6 >= 4)
      {
        if (v6 >= 2)
        {
          unint64_t result = 0;
          do
          {
            uint64_t v23 = 8;
            float v24 = (uint64_t *)v19;
            double v25 = v11;
            double v26 = v11;
            double v27 = v11;
            double v28 = v11;
            do
            {
              uint64_t v29 = &v12[(unint64_t)v23 / 8][(void)result];
              uint64_t v30 = *v24--;
              float v31 = (double *)(v30 + 8 * (void)result);
              double v32 = v10[(unint64_t)v23 / 8];
              double v28 = v28 + v32 * (*v29 - *v31);
              double v27 = v27 + v32 * (v29[1] - v31[1]);
              double v26 = v26 + v32 * (v29[2] - v31[2]);
              double v25 = v25 + v32 * (v29[3] - v31[3]);
              v23 += 8;
            }
            while (v20 != v23);
            uint64_t v33 = (uint64_t)rint(v25);
            v34.i32[0] = (uint64_t)rint(v28);
            v34.i32[1] = (uint64_t)rint(v27);
            v34.i32[2] = (uint64_t)rint(v26);
            v34.i32[3] = v33;
            *(int16x4_t *)&a3[(void)result] = vmovn_s32(vminq_s32(vmaxq_s32(v34, (int32x4_t)0), v21));
            unint64_t result = (double *)((char *)result + 4);
          }
          while ((uint64_t)result <= v13);
        }
        else
        {
          unint64_t result = 0;
          unsigned int v22 = a3;
          do
          {
            *v22++ = v18.i64[0];
            unint64_t result = (double *)((char *)result + 4);
          }
          while ((uint64_t)result <= v13);
        }
        unint64_t result = (double *)result;
        if ((int)result >= a6) {
          goto LABEL_9;
        }
      }
      else
      {
        unint64_t result = 0;
        if (a6 <= 0) {
          goto LABEL_9;
        }
      }
      if (v6 >= 2)
      {
        do
        {
          uint64_t v37 = 8;
          float v38 = (uint64_t *)v19;
          double v39 = v11;
          do
          {
            uint64_t v40 = *v38--;
            double v39 = v39
                + v10[(unint64_t)v37 / 8]
                * (v12[(unint64_t)v37 / 8][(void)result] - *(double *)(v40 + 8 * (void)result));
            v37 += 8;
          }
          while (v20 != v37);
          double v41 = rint(v39);
          int v42 = (uint64_t)v41 & ~((int)(uint64_t)v41 >> 31);
          if (v42 >= 0xFFFF) {
            LOWORD(v42) = -1;
          }
          a3[(void)result] = v42;
          unint64_t result = (double *)((char *)result + 1);
        }
        while (result != (double *)a6);
        goto LABEL_9;
      }
      unint64_t v35 = a6 - (void)result;
      if (v35 >= 0x10)
      {
        uint64_t v36 = (double *)((char *)result + (v35 & 0xFFFFFFFFFFFFFFF0));
        unint64_t result = (double *)(2 * (void)result);
        unint64_t v43 = v35 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          uint64_t v44 = (int16x8_t *)((char *)result + (void)a3);
          *uint64_t v44 = v18;
          v44[1] = v18;
          result += 4;
          v43 -= 16;
        }
        while (v43);
        if (v35 == (v35 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v36 = result;
      }
      do
      {
        a3[(void)v36] = v15;
        uint64_t v36 = (double *)((char *)v36 + 1);
      }
      while ((double *)a6 != v36);
LABEL_9:
      a3 = (_WORD *)((char *)a3 + v16);
      ++v12;
      v19 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_10034ECC4()
{
}

uint64_t sub_10034ECD8(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_10034ED58(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_10034EE38(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049ACA0;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_10034EE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_10034F0C0(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034EE38(uint64_t a1, uint64_t a2, int a3, double a4)
{
  *(void *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 1124007936;
  uint64_t v8 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v9 = (int *)(a1 + 20);
  *(void *)a1 = off_10049AD00;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v8 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v10 = *(void *)(a2 + 56);
    if (v10)
    {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
      uint64_t v11 = *(void *)(a1 + 72);
      if (v11)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *uint64_t v8 = *(_DWORD *)a2;
      int v15 = *(_DWORD *)(a2 + 4);
      if (v15 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v15;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v16 = *(void **)(a2 + 72);
        unsigned int v17 = *(void **)(a1 + 88);
        *unsigned int v17 = *v16;
        v17[1] = v16[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v13 + 4 * v12++) = 0;
        uint64_t v14 = *v9;
      }
      while (v12 < v14);
      *uint64_t v8 = *(_DWORD *)a2;
      if ((int)v14 <= 2)
      {
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v8, a2);
    goto LABEL_16;
  }
  LODWORD(v21) = 33619968;
  uint64_t v22 = a1 + 16;
  uint64_t v23 = 0;
  sub_10025401C(a2, (uint64_t)&v21);
LABEL_17:
  int v19 = *(_DWORD *)(a1 + 24);
  int v18 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 8) = v19 + v18 - 1;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 116) = (uint64_t)rint(a4);
  if ((*(_DWORD *)(a1 + 16) & 0xFFF) != 4 || v19 != 1 && v18 != 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    qmemcpy((void *)sub_1002D19D8(&v21, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v21, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_10034F08C(_Unwind_Exception *a1)
{
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10034F0C0(uint64_t a1)
{
  *(void *)a1 = off_10049AD00;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

uint64_t sub_10034F170(uint64_t a1)
{
  *(void *)a1 = off_10049AD00;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034F220(uint64_t a1)
{
  *(void *)a1 = off_10049AD00;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_10034F2F0(unint64_t result, uint64_t a2, _WORD *a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  uint64_t v8 = *(void *)(result + 32);
  uint64_t v9 = (uint64_t)v7 >> 1;
  uint64_t v10 = (int *)(v8 + 4 * (v7 >> 1));
  signed int v11 = *(_DWORD *)(result + 116);
  uint64_t v12 = (void *)(a2 + 8 * (v7 >> 1));
  signed int v144 = v11;
  if (*(unsigned char *)(result + 120))
  {
    if (!a5) {
      return result;
    }
    int v46 = a5 - 1;
    uint64_t v141 = a4;
    if (a6 <= 3)
    {
      if (a6 >= 1)
      {
        int v47 = *v10;
        if (v6 >= 2)
        {
          uint64_t v96 = (v9 + 1);
          uint64_t v97 = v96 - 1;
          if ((unint64_t)(v96 - 1) >= 2)
          {
            unint64_t v106 = v97 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v107 = a2 + 8 * v9;
            float v108 = (_DWORD **)(v107 - 8);
            unint64_t result = v8 + 4 * v9 + 8;
            unint64_t v109 = (_DWORD **)(v107 + 16);
            do
            {
              int v111 = 0;
              int v112 = v46;
              uint64_t v113 = (_DWORD *)*v12;
              int v114 = v11 + *(_DWORD *)*v12 * v47;
              float v115 = v109;
              uint64_t v116 = (_DWORD *)result;
              unint64_t v117 = v97 & 0xFFFFFFFFFFFFFFFELL;
              float32x4x4_t v118 = v108;
              do
              {
                v114 += (**v118 + **(v115 - 1)) * *(v116 - 1);
                v111 += (**(v118 - 1) + **v115) * *v116;
                v118 -= 2;
                v116 += 2;
                v115 += 2;
                v117 -= 2;
              }
              while (v117);
              int v119 = v111 + v114;
              if (v97 == v106)
              {
                signed int v11 = v144;
              }
              else
              {
                uint64_t v120 = -1 * (v97 | 1);
                uint64_t v121 = v97 | 1;
                signed int v11 = v144;
                do
                {
                  v119 += (*(_DWORD *)v12[v120] + *(_DWORD *)v12[v121]) * v10[v121];
                  ++v121;
                  --v120;
                }
                while (v96 != v121);
              }
              if (v119 <= -32768) {
                int v119 = -32768;
              }
              if (v119 >= 0x7FFF) {
                LOWORD(v119) = 0x7FFF;
              }
              *a3 = v119;
              if (a6 != 1)
              {
                int v122 = 0;
                int v123 = v144 + v113[1] * v47;
                float32x4_t v124 = (_DWORD *)result;
                int32x4_t v125 = v109;
                unint64_t v126 = v97 & 0xFFFFFFFFFFFFFFFELL;
                unint64_t v127 = v108;
                do
                {
                  v123 += ((*v127)[1] + (*(v125 - 1))[1]) * *(v124 - 1);
                  v122 += ((*(v127 - 1))[1] + (*v125)[1]) * *v124;
                  v127 -= 2;
                  v125 += 2;
                  v124 += 2;
                  v126 -= 2;
                }
                while (v126);
                int v128 = v122 + v123;
                if (v97 == v106)
                {
                  signed int v11 = v144;
                }
                else
                {
                  uint64_t v129 = -1 * (v97 | 1);
                  uint64_t v130 = v97 | 1;
                  signed int v11 = v144;
                  do
                  {
                    v128 += (*(_DWORD *)(v12[v129] + 4) + *(_DWORD *)(v12[v130] + 4)) * v10[v130];
                    ++v130;
                    --v129;
                  }
                  while (v96 != v130);
                }
                if (v128 <= -32768) {
                  int v128 = -32768;
                }
                if (v128 >= 0x7FFF) {
                  LOWORD(v128) = 0x7FFF;
                }
                a3[1] = v128;
                if (a6 != 2)
                {
                  int v131 = 0;
                  int v132 = v144 + v113[2] * v47;
                  float v133 = (_DWORD *)result;
                  unint64_t v134 = v109;
                  unint64_t v135 = v97 & 0xFFFFFFFFFFFFFFFELL;
                  unint64_t v136 = v108;
                  do
                  {
                    v132 += ((*v136)[2] + (*(v134 - 1))[2]) * *(v133 - 1);
                    v131 += ((*(v136 - 1))[2] + (*v134)[2]) * *v133;
                    v136 -= 2;
                    v134 += 2;
                    v133 += 2;
                    v135 -= 2;
                  }
                  while (v135);
                  int v110 = v131 + v132;
                  if (v97 != v106)
                  {
                    uint64_t v137 = -1 * (v97 | 1);
                    uint64_t v138 = v97 | 1;
                    do
                    {
                      v110 += (*(_DWORD *)(v12[v137] + 8) + *(_DWORD *)(v12[v138] + 8)) * v10[v138];
                      ++v138;
                      --v137;
                    }
                    while (v96 != v138);
                  }
                  if (v110 <= -32768) {
                    int v110 = -32768;
                  }
                  if (v110 >= 0x7FFF) {
                    LOWORD(v110) = 0x7FFF;
                  }
                  a3[2] = v110;
                }
              }
              a3 = (_WORD *)((char *)a3 + a4);
              ++v12;
              int v46 = v112 - 1;
              ++v108;
              ++v109;
            }
            while (v112);
          }
          else
          {
            do
            {
              int v98 = v46;
              uint64_t v99 = (_DWORD *)*v12;
              int v100 = v11 + *(_DWORD *)*v12 * v47;
              unint64_t result = -8;
              uint64_t v101 = 1;
              do
              {
                v100 += (**(_DWORD **)((char *)v12 + result) + *(_DWORD *)v12[v101]) * v10[v101];
                ++v101;
                result -= 8;
              }
              while (v96 != v101);
              if (v100 <= -32768) {
                int v100 = -32768;
              }
              if (v100 >= 0x7FFF) {
                LOWORD(v100) = 0x7FFF;
              }
              *a3 = v100;
              if (a6 != 1)
              {
                int v102 = v11 + v99[1] * v47;
                unint64_t result = -8;
                uint64_t v103 = 1;
                do
                {
                  v102 += (*(_DWORD *)(*(void *)((char *)v12 + result) + 4) + *(_DWORD *)(v12[v103] + 4))
                        * v10[v103];
                  ++v103;
                  result -= 8;
                }
                while (v96 != v103);
                if (v102 <= -32768) {
                  int v102 = -32768;
                }
                if (v102 >= 0x7FFF) {
                  LOWORD(v102) = 0x7FFF;
                }
                a3[1] = v102;
                if (a6 != 2)
                {
                  int v104 = v11 + v99[2] * v47;
                  uint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
                  unint64_t result = 1;
                  do
                  {
                    v104 += (*(_DWORD *)(v12[v105] + 8) + *(_DWORD *)(v12[result] + 8)) * v10[result];
                    ++result;
                    --v105;
                  }
                  while (v96 != result);
                  if (v104 <= -32768) {
                    int v104 = -32768;
                  }
                  if (v104 >= 0x7FFF) {
                    LOWORD(v104) = 0x7FFF;
                  }
                  a3[2] = v104;
                }
              }
              a3 = (_WORD *)((char *)a3 + a4);
              ++v12;
              --v46;
            }
            while (v98);
          }
        }
        else
        {
          int v48 = a3 + 2;
          do
          {
            float v49 = (_DWORD *)*v12;
            int v50 = v11 + *(_DWORD *)*v12 * v47;
            if (v50 <= -32768) {
              int v50 = -32768;
            }
            if (v50 >= 0x7FFF) {
              LOWORD(v50) = 0x7FFF;
            }
            *(v48 - 2) = v50;
            if (a6 != 1)
            {
              int v51 = v11 + v49[1] * v47;
              if (v51 <= -32768) {
                int v51 = -32768;
              }
              if (v51 >= 0x7FFF) {
                LOWORD(v51) = 0x7FFF;
              }
              *(v48 - 1) = v51;
              if (a6 != 2)
              {
                int v52 = v11 + v49[2] * v47;
                if (v52 <= -32768) {
                  int v52 = -32768;
                }
                if (v52 >= 0x7FFF) {
                  LOWORD(v52) = 0x7FFF;
                }
                _WORD *v48 = v52;
              }
            }
            ++v12;
            int v48 = (_WORD *)((char *)v48 + a4);
            --a5;
          }
          while (a5);
        }
      }
      return result;
    }
    unint64_t v53 = (a6 - 4);
    double v54 = (unsigned int *)(v8 + 4 * v9);
    unsigned int v57 = *v54;
    int v55 = v54 + 2;
    unsigned int v56 = v57;
    uint64_t v58 = (v9 + 1);
    unint64_t v59 = (v53 & 0xFFFFFFFC) + 5;
    if (v59 <= a6) {
      unint64_t v59 = a6;
    }
    unint64_t v60 = v58 - 1;
    unint64_t result = (v58 - 1) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v140 = v59 - (v53 & 0xFFFFFFFC) - 4;
    unint64_t v139 = v140 & 0xFFFFFFFFFFFFFFF0;
    int32x4_t v61 = vdupq_n_s32(v56);
    int32x4_t v62 = vdupq_n_s32(v11);
    uint64_t v63 = a2 + 8 * v9;
    uint64_t v64 = (uint64_t *)(v63 - 8);
    uint64_t v65 = (void *)(v63 + 16);
    int32x4_t v66 = (int16x8_t *)(a3 + 12);
    while (1)
    {
      unint64_t v67 = 0;
      int v142 = v46;
      double v68 = (_DWORD *)*v12;
      uint64_t v69 = *v12 + 48;
      double v70 = v66;
      uint64_t v71 = 4;
      do
      {
        unint64_t v72 = v71;
        double v73 = (int32x4_t *)v69;
        uint64_t v74 = v70;
        int32x4_t v75 = vmlaq_s32(v62, *(int32x4_t *)&v68[v67], v61);
        if (v6 >= 2)
        {
          uint64_t v76 = v64;
          uint64_t v77 = 1;
          do
          {
            uint64_t v78 = *v76--;
            double v79 = (const float *)&v10[v77];
            int32x4_t v80 = (int32x4_t)vld1q_dup_f32(v79);
            int32x4_t v75 = vmlaq_s32(v75, vaddq_s32(*(int32x4_t *)(v78 + 4 * v67), *(int32x4_t *)(v12[v77++] + 4 * v67)), v80);
          }
          while (v58 != v77);
        }
        *(int16x4_t *)&a3[v67] = vqmovn_s32(v75);
        v67 += 4;
        uint64_t v71 = v72 + 4;
        v69 += 16;
        double v70 = (int16x8_t *)&v74->u64[1];
      }
      while (v67 <= v53);
      if ((int)v67 >= a6) {
        goto LABEL_71;
      }
      if (v6 >= 2) {
        break;
      }
      if (v140 < 0x10) {
        goto LABEL_165;
      }
      unint64_t v81 = v140 & 0xFFFFFFFFFFFFFFF0;
      v72 += v139;
      do
      {
        int32x4_t v83 = v73[-2];
        int32x4_t v82 = v73[-1];
        int32x4_t v85 = *v73;
        int32x4_t v84 = v73[1];
        v73 += 4;
        v74[-1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v62, v83, v61)), vmlaq_s32(v62, v82, v61));
        *uint64_t v74 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v62, v85, v61)), vmlaq_s32(v62, v84, v61));
        v74 += 2;
        v81 -= 16;
      }
      while (v81);
      if (v140 != v139)
      {
LABEL_165:
        do
        {
          int v86 = v144 + v68[v72] * v56;
          if (v86 <= -32768) {
            int v86 = -32768;
          }
          if (v86 >= 0x7FFF) {
            LOWORD(v86) = 0x7FFF;
          }
          a3[v72++] = v86;
        }
        while (v72 < a6);
      }
LABEL_71:
      a3 = (_WORD *)((char *)a3 + v141);
      ++v12;
      int v46 = v142 - 1;
      ++v64;
      ++v65;
      int32x4_t v66 = (int16x8_t *)((char *)v66 + v141);
      if (!v142) {
        return result;
      }
    }
    while (1)
    {
      int v88 = v144 + v68[v72] * v56;
      if (v60 < 2) {
        break;
      }
      int v90 = 0;
      uint64_t v91 = v65;
      double v92 = v55;
      unint64_t v93 = (v58 - 1) & 0xFFFFFFFFFFFFFFFELL;
      float v94 = v64;
      do
      {
        v88 += (*(_DWORD *)(*v94 + 4 * v72) + *(_DWORD *)(*(v91 - 1) + 4 * v72)) * *(v92 - 1);
        v90 += (*(_DWORD *)(*(v94 - 1) + 4 * v72) + *(_DWORD *)(*v91 + 4 * v72)) * *v92;
        v94 -= 2;
        v92 += 2;
        v91 += 2;
        v93 -= 2;
      }
      while (v93);
      v88 += v90;
      uint64_t v89 = (v58 - 1) | 1;
      if (v60 != result) {
        goto LABEL_101;
      }
LABEL_90:
      if (v88 <= -32768) {
        int v87 = -32768;
      }
      else {
        int v87 = v88;
      }
      if (v87 >= 0x7FFF) {
        LOWORD(v87) = 0x7FFF;
      }
      a3[v72++] = v87;
      if (v72 >= a6) {
        goto LABEL_71;
      }
    }
    uint64_t v89 = 1;
LABEL_101:
    uint64_t v95 = -1 * v89;
    do
    {
      v88 += (*(_DWORD *)(v12[v95] + 4 * v72) + *(_DWORD *)(v12[v89] + 4 * v72)) * v10[v89];
      ++v89;
      --v95;
    }
    while (v58 != v89);
    goto LABEL_90;
  }
  int v13 = a6;
  if (a5)
  {
    int v14 = a6 - 4;
    if (v11 <= -32768) {
      signed int v15 = -32768;
    }
    else {
      signed int v15 = *(_DWORD *)(result + 116);
    }
    if (v15 >= 0x7FFF) {
      signed int v15 = 0x7FFF;
    }
    uint64_t v16 = (v9 + 1);
    unint64_t result = v16 - 1;
    int16x8_t v17 = vdupq_n_s16(v15);
    int32x4_t v18 = vdupq_n_s32(v11);
    uint64_t v19 = a2 + 8 * v9;
    uint64_t v20 = (uint64_t *)(v19 - 8);
    uint64_t v21 = v8 + 4 * v9 + 8;
    uint64_t v22 = (void *)(v19 + 16);
    while (1)
    {
      if (v13 >= 4)
      {
        if (v6 >= 2)
        {
          uint64_t v23 = 0;
          do
          {
            double v25 = v20;
            uint64_t v26 = 1;
            int32x4_t v27 = v18;
            do
            {
              uint64_t v28 = *v25--;
              uint64_t v29 = (const float *)&v10[v26];
              int32x4_t v30 = (int32x4_t)vld1q_dup_f32(v29);
              int32x4_t v27 = vmlaq_s32(v27, vsubq_s32(*(int32x4_t *)(v12[v26++] + 4 * v23), *(int32x4_t *)(v28 + 4 * v23)), v30);
            }
            while (v16 != v26);
            *(int16x4_t *)&a3[v23] = vqmovn_s32(v27);
            v23 += 4;
          }
          while (v23 <= v14);
        }
        else
        {
          uint64_t v23 = 0;
          float v24 = a3;
          do
          {
            *v24++ = v17.i64[0];
            v23 += 4;
          }
          while (v23 <= v14);
        }
        uint64_t v23 = v23;
        if ((int)v23 >= v13) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v23 = 0;
        if (v13 <= 0) {
          goto LABEL_12;
        }
      }
      if (v6 >= 2) {
        break;
      }
      unint64_t v31 = a6 - v23;
      if (v31 >= 0x10)
      {
        uint64_t v32 = (v31 & 0xFFFFFFFFFFFFFFF0) + v23;
        uint64_t v43 = v23;
        unint64_t v44 = v31 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          uint64_t v45 = (int16x8_t *)&a3[v43];
          *uint64_t v45 = v17;
          v45[1] = v17;
          v43 += 16;
          v44 -= 16;
        }
        while (v44);
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v32 = v23;
      }
      do
        a3[v32++] = v15;
      while (a6 != v32);
LABEL_12:
      a3 = (_WORD *)((char *)a3 + a4);
      ++v12;
      ++v20;
      ++v22;
      --a5;
      int v13 = a6;
      if (!a5) {
        return result;
      }
    }
    while (result >= 2)
    {
      int v36 = 0;
      uint64_t v37 = v22;
      float v38 = (_DWORD *)v21;
      unint64_t v39 = (v16 - 1) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v40 = v20;
      signed int v41 = v11;
      do
      {
        v41 += (*(_DWORD *)(*(v37 - 1) + 4 * v23) - *(_DWORD *)(*v40 + 4 * v23)) * *(v38 - 1);
        v36 += (*(_DWORD *)(*v37 + 4 * v23) - *(_DWORD *)(*(v40 - 1) + 4 * v23)) * *v38;
        v40 -= 2;
        v38 += 2;
        v37 += 2;
        v39 -= 2;
      }
      while (v39);
      int v35 = v36 + v41;
      uint64_t v34 = (v16 - 1) | 1;
      signed int v11 = v144;
      if (result != ((v16 - 1) & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_39;
      }
LABEL_28:
      if (v35 <= -32768) {
        int v33 = -32768;
      }
      else {
        int v33 = v35;
      }
      if (v33 >= 0x7FFF) {
        LOWORD(v33) = 0x7FFF;
      }
      a3[v23++] = v33;
      if (v23 == a6) {
        goto LABEL_12;
      }
    }
    uint64_t v34 = 1;
    int v35 = v11;
LABEL_39:
    uint64_t v42 = -1 * v34;
    do
    {
      v35 += (*(_DWORD *)(v12[v34] + 4 * v23) - *(_DWORD *)(v12[v42] + 4 * v23)) * v10[v34];
      ++v34;
      --v42;
    }
    while (v16 != v34);
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_10034FD18(uint64_t a1)
{
  *(void *)a1 = off_10049AD00;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10034FDC8(uint64_t a1)
{
  *(void *)a1 = off_10049AD00;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_10034FE98(unint64_t result, void *a2, _WORD *a3, int a4, int a5, int a6)
{
  if (!a5) {
    return result;
  }
  int v6 = *(unsigned int **)(result + 32);
  unsigned int v7 = *(_DWORD *)(result + 116);
  int v8 = a5 - 1;
  uint64_t v9 = *(unsigned int *)(result + 8);
  if (a6 > 3)
  {
    unint64_t v16 = (a6 - 4);
    unsigned int v17 = *v6;
    uint64_t v18 = v9 - 1;
    unint64_t result = (v16 & 0xFFFFFFFC) + 5;
    if (result <= a6) {
      unint64_t result = a6;
    }
    unint64_t v83 = result - (v16 & 0xFFFFFFFC) - 4;
    unint64_t v82 = v83 & 0xFFFFFFFFFFFFFFF0;
    int32x4_t v19 = vdupq_n_s32(v17);
    int32x4_t v20 = vdupq_n_s32(v7);
    uint64_t v21 = (int16x8_t *)(a3 + 12);
    for (uint64_t i = a2 + 2; ; ++i)
    {
      unint64_t v23 = 0;
      int v24 = v8;
      double v25 = (_DWORD *)*a2;
      uint64_t v26 = *a2 + 48;
      int32x4_t v27 = v21;
      uint64_t v28 = 4;
      do
      {
        unint64_t v29 = v28;
        int32x4_t v30 = (int32x4_t *)v26;
        unint64_t v31 = v27;
        int32x4_t v32 = vmlaq_s32(v20, *(int32x4_t *)&v25[v23], v19);
        if ((int)v9 >= 2)
        {
          for (uint64_t j = 1; j != v9; ++j)
          {
            uint64_t v34 = (const float *)&v6[j];
            int32x4_t v35 = (int32x4_t)vld1q_dup_f32(v34);
            int32x4_t v32 = vmlaq_s32(v32, *(int32x4_t *)(a2[j] + 4 * v23), v35);
          }
        }
        *(int16x4_t *)&a3[v23] = vqmovn_s32(v32);
        v23 += 4;
        v28 += 4;
        v26 += 16;
        int32x4_t v27 = (int16x8_t *)&v31->u64[1];
      }
      while (v23 <= v16);
      if ((int)v23 >= a6) {
        goto LABEL_28;
      }
      if ((int)v9 >= 2) {
        break;
      }
      if (v83 < 0x10) {
        goto LABEL_114;
      }
      unint64_t v36 = v83 & 0xFFFFFFFFFFFFFFF0;
      v29 += v82;
      do
      {
        int32x4_t v38 = v30[-2];
        int32x4_t v37 = v30[-1];
        int32x4_t v40 = *v30;
        int32x4_t v39 = v30[1];
        v30 += 4;
        v31[-1] = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v20, v38, v19)), vmlaq_s32(v20, v37, v19));
        *unint64_t v31 = vqmovn_high_s32(vqmovn_s32(vmlaq_s32(v20, v40, v19)), vmlaq_s32(v20, v39, v19));
        v31 += 2;
        v36 -= 16;
      }
      while (v36);
      if (v83 != v82)
      {
LABEL_114:
        do
        {
          int v41 = v7 + v25[v29] * v17;
          if (v41 <= -32768) {
            int v41 = -32768;
          }
          if (v41 >= 0x7FFF) {
            LOWORD(v41) = 0x7FFF;
          }
          a3[v29++] = v41;
        }
        while (v29 < a6);
      }
LABEL_28:
      a3 = (_WORD *)((char *)a3 + a4);
      ++a2;
      int v8 = v24 - 1;
      uint64_t v21 = (int16x8_t *)((char *)v21 + a4);
      if (!v24) {
        return result;
      }
    }
    while (1)
    {
      int v43 = v7 + v25[v29] * v17;
      if (v9 < 3) {
        break;
      }
      int v45 = 0;
      int v46 = i;
      int v47 = v6 + 2;
      unint64_t v48 = v18 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        unint64_t result = *(unsigned int *)(*(v46 - 1) + 4 * v29);
        v43 += result * *(v47 - 1);
        v45 += *(_DWORD *)(*v46 + 4 * v29) * *v47;
        v47 += 2;
        v46 += 2;
        v48 -= 2;
      }
      while (v48);
      v43 += v45;
      uint64_t k = v18 | 1;
      if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_58;
      }
LABEL_47:
      if (v43 <= -32768) {
        int v42 = -32768;
      }
      else {
        int v42 = v43;
      }
      if (v42 >= 0x7FFF) {
        LOWORD(v42) = 0x7FFF;
      }
      a3[v29++] = v42;
      if (v29 >= a6) {
        goto LABEL_28;
      }
    }
    for (uint64_t k = 1; k != v9; ++k)
LABEL_58:
      v43 += *(_DWORD *)(a2[k] + 4 * v29) * v6[k];
    goto LABEL_47;
  }
  if (a6 >= 1)
  {
    unsigned int v10 = *v6;
    if ((int)v9 <= 1)
    {
      float v49 = a3 + 2;
      do
      {
        int v50 = (_DWORD *)*a2;
        int v51 = v7 + *(_DWORD *)*a2 * v10;
        if (v51 <= -32768) {
          int v51 = -32768;
        }
        if (v51 >= 0x7FFF) {
          LOWORD(v51) = 0x7FFF;
        }
        *(v49 - 2) = v51;
        if (a6 != 1)
        {
          int v52 = v7 + v50[1] * v10;
          if (v52 <= -32768) {
            int v52 = -32768;
          }
          if (v52 >= 0x7FFF) {
            LOWORD(v52) = 0x7FFF;
          }
          *(v49 - 1) = v52;
          if (a6 != 2)
          {
            int v53 = v7 + v50[2] * v10;
            if (v53 <= -32768) {
              int v53 = -32768;
            }
            if (v53 >= 0x7FFF) {
              LOWORD(v53) = 0x7FFF;
            }
            *float v49 = v53;
          }
        }
        ++a2;
        float v49 = (_WORD *)((char *)v49 + a4);
        --a5;
      }
      while (a5);
    }
    else if (v9 == 2)
    {
      unsigned int v11 = v6[1];
      uint64_t v12 = a2 + 1;
      int v13 = a3 + 2;
      do
      {
        int v14 = (_DWORD *)*(v12 - 1);
        LODWORD(result) = v7 + *v14 * v10 + *(_DWORD *)*v12 * v11;
        if ((int)result <= -32768) {
          LODWORD(result) = -32768;
        }
        if ((int)result >= 0x7FFF) {
          unint64_t result = 0x7FFFLL;
        }
        else {
          unint64_t result = result;
        }
        *(v13 - 2) = result;
        if (a6 != 1)
        {
          LODWORD(result) = v7 + v14[1] * v10 + *(_DWORD *)(*v12 + 4) * v6[1];
          if ((int)result <= -32768) {
            LODWORD(result) = -32768;
          }
          if ((int)result >= 0x7FFF) {
            unint64_t result = 0x7FFFLL;
          }
          else {
            unint64_t result = result;
          }
          *(v13 - 1) = result;
          if (a6 != 2)
          {
            unint64_t result = v6[1];
            int v15 = v7 + v14[2] * v10 + *(_DWORD *)(*v12 + 8) * result;
            if (v15 <= -32768) {
              int v15 = -32768;
            }
            if (v15 >= 0x7FFF) {
              LOWORD(v15) = 0x7FFF;
            }
            _WORD *v13 = v15;
          }
        }
        ++v12;
        int v13 = (_WORD *)((char *)v13 + a4);
        --a5;
      }
      while (a5);
    }
    else
    {
      uint64_t v54 = v9 - 1;
      unint64_t v55 = (v9 - 1) & 0xFFFFFFFFFFFFFFFELL;
      unsigned int v56 = (_DWORD **)(a2 + 2);
      unint64_t result = 4294934528;
      do
      {
        int v58 = 0;
        int v59 = v8;
        unint64_t v60 = (_DWORD *)*a2;
        unsigned int v61 = v7 + *(_DWORD *)*a2 * v10;
        int32x4_t v62 = v56;
        uint64_t v63 = v6 + 2;
        unint64_t v64 = (v9 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v61 += **(v62 - 1) * *(v63 - 1);
          v58 += **v62 * *v63;
          v63 += 2;
          v62 += 2;
          v64 -= 2;
        }
        while (v64);
        int v65 = v58 + v61;
        if (v54 == v55)
        {
          int v66 = a6;
        }
        else
        {
          uint64_t v67 = (v9 - 1) | 1;
          int v66 = a6;
          do
          {
            v65 += *(_DWORD *)a2[v67] * v6[v67];
            ++v67;
          }
          while (v9 != v67);
        }
        if (v65 <= -32768) {
          int v65 = -32768;
        }
        if (v65 >= 0x7FFF) {
          LOWORD(v65) = 0x7FFF;
        }
        *a3 = v65;
        if (v66 != 1)
        {
          int v68 = 0;
          unsigned int v69 = v7 + v60[1] * v10;
          double v70 = v6 + 2;
          uint64_t v71 = v56;
          unint64_t v72 = (v9 - 1) & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v69 += (*(v71 - 1))[1] * *(v70 - 1);
            v68 += (*v71)[1] * *v70;
            v71 += 2;
            v70 += 2;
            v72 -= 2;
          }
          while (v72);
          int v73 = v68 + v69;
          if (v54 == v55)
          {
            int v74 = a6;
          }
          else
          {
            uint64_t v75 = (v9 - 1) | 1;
            int v74 = a6;
            do
            {
              v73 += *(_DWORD *)(a2[v75] + 4) * v6[v75];
              ++v75;
            }
            while (v9 != v75);
          }
          if (v73 <= -32768) {
            int v73 = -32768;
          }
          if (v73 >= 0x7FFF) {
            LOWORD(v73) = 0x7FFF;
          }
          a3[1] = v73;
          if (v74 != 2)
          {
            int v76 = 0;
            unsigned int v77 = v7 + v60[2] * v10;
            uint64_t v78 = v6 + 2;
            double v79 = v56;
            unint64_t v80 = (v9 - 1) & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v77 += (*(v79 - 1))[2] * *(v78 - 1);
              v76 += (*v79)[2] * *v78;
              v79 += 2;
              v78 += 2;
              v80 -= 2;
            }
            while (v80);
            int v57 = v76 + v77;
            if (v54 != v55)
            {
              uint64_t v81 = (v9 - 1) | 1;
              do
              {
                v57 += *(_DWORD *)(a2[v81] + 8) * v6[v81];
                ++v81;
              }
              while (v9 != v81);
            }
            if (v57 <= -32768) {
              int v57 = -32768;
            }
            if (v57 >= 0x7FFF) {
              LOWORD(v57) = 0x7FFF;
            }
            a3[2] = v57;
          }
        }
        a3 = (_WORD *)((char *)a3 + a4);
        ++a2;
        int v8 = v59 - 1;
        ++v56;
      }
      while (v59);
    }
  }
  return result;
}

void sub_1003504A4()
{
}

uint64_t sub_1003504B8(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100350538(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9 = sub_100350618(a1, a2, a3, a7, a5, a6);
  *(void *)uint64_t v9 = off_10049AD70;
  *(_DWORD *)(v9 + 236) = a4;
  if ((a4 & 3) == 0)
  {
    v11[0] = 0;
    v11[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v11, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v11, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_1003505F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_1003508F4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100350618(uint64_t a1, uint64_t a2, int a3, double a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a1 + 8) = -1;
  *(void *)a1 = off_10049ADD0;
  *(_DWORD *)(a1 + 16) = 1124007936;
  unsigned int v11 = (_DWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 20) = 0u;
  uint64_t v12 = (int *)(a1 + 20);
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  int v13 = (_DWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = a1 + 24;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 128) = 1124007936;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = a1 + 136;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  uint64_t v14 = a1 + 120;
  if ((*(unsigned char *)(a2 + 1) & 0x40) != 0)
  {
    if (v11 == (_DWORD *)a2) {
      goto LABEL_17;
    }
    uint64_t v15 = *(void *)(a2 + 56);
    if (v15)
    {
      atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
      uint64_t v16 = *(void *)(a1 + 72);
      if (v16)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a1 + 16);
        }
      }
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      _DWORD *v11 = *(_DWORD *)a2;
      int v20 = *(_DWORD *)(a2 + 4);
      if (v20 <= 2)
      {
LABEL_13:
        *(_DWORD *)(a1 + 20) = v20;
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v21 = *(void **)(a2 + 72);
        uint64_t v22 = *(void **)(a1 + 88);
        *uint64_t v22 = *v21;
        v22[1] = v21[1];
LABEL_16:
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 48);
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v18 + 4 * v17++) = 0;
        uint64_t v19 = *v12;
      }
      while (v17 < v19);
      _DWORD *v11 = *(_DWORD *)a2;
      if ((int)v19 <= 2)
      {
        int v20 = *(_DWORD *)(a2 + 4);
        if (v20 <= 2) {
          goto LABEL_13;
        }
      }
    }
    sub_1002931A8((uint64_t)v11, a2);
    goto LABEL_16;
  }
  LODWORD(v25) = 33619968;
  uint64_t v26 = a1 + 16;
  uint64_t v27 = 0;
  sub_10025401C(a2, (uint64_t)&v25);
LABEL_17:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) - 1;
  *(_DWORD *)(a1 + 12) = a3;
  float v23 = a4;
  *(float *)(a1 + 232) = v23;
  sub_100350F28(v14, a6);
  if ((*v11 & 0xFFF) != 5 || *v13 != 1 && *(_DWORD *)(a1 + 28) != 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    qmemcpy((void *)sub_1002D19D8(&v25, 77), "kernel.type() == DataType<ST>::type && (kernel.rows == 1 || kernel.cols == 1)", 77);
    sub_1002D2278(-215, &v25, "ColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3251);
  }
  return a1;
}

void sub_1003508B8(_Unwind_Exception *a1)
{
  sub_100332DD4(v2);
  sub_1000094F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003508F4(uint64_t a1)
{
  *(void *)a1 = off_10049ADD0;
  uint64_t v2 = *(void *)(a1 + 184);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 128);
  }
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  if (*(int *)(a1 + 132) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 192);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 132));
  }
  uint64_t v5 = *(void **)(a1 + 200);
  if (v5 != (void *)(a1 + 208)) {
    j__free(v5);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v8 + 4 * v7++) = 0;
    while (v7 < *(int *)(a1 + 20));
  }
  uint64_t v9 = *(void **)(a1 + 88);
  if (v9 != (void *)(a1 + 96)) {
    j__free(v9);
  }
  return a1;
}

void sub_100350A18(uint64_t a1)
{
  sub_1003508F4(a1);

  operator delete();
}

int64_t sub_100350A50(int64_t result, uint64_t a2, int16x4_t *a3, int a4, int a5, uint64_t a6, double a7)
{
  int v7 = a5;
  int v72 = *(_DWORD *)(result + 8);
  uint64_t v9 = (uint64_t)(v72 + (v72 < 0)) >> 1;
  unsigned int v10 = (const float *)(*(void *)(result + 32) + 4 * (v72 / 2));
  LODWORD(a7) = *(_DWORD *)(result + 232);
  unsigned int v11 = (uint64_t *)(a2 + 8 * (v72 / 2));
  uint64_t v68 = a6;
  float v71 = *(float *)&a7;
  if (*(unsigned char *)(result + 236))
  {
    if (a5)
    {
      uint64_t v65 = a4;
      uint64_t v67 = result + 120;
      uint64_t v42 = (*(_DWORD *)(result + 8) / 2 + 1);
      int64_t v43 = (int)a6 - 4;
      uint64_t v44 = (int)a6;
      float32x4_t v63 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v45 = a2 + 8 * v9 - 8;
      do
      {
        int v70 = v7;
        uint64_t v46 = a6;
        unint64_t result = sub_1003512BC(v67, v11, a3, a6);
        if ((int)result <= (int)v43)
        {
          uint64_t v47 = *v11;
          unint64_t result = (int)result;
          float32x4_t v48 = vld1q_dup_f32(v10);
          do
          {
            float32x4_t v49 = vmlaq_f32(v63, *(float32x4_t *)(v47 + 4 * result), v48);
            if (v72 >= 2)
            {
              int v50 = (uint64_t *)v45;
              uint64_t v51 = 1;
              do
              {
                uint64_t v52 = *v50--;
                float32x4_t v49 = vmlaq_n_f32(v49, vaddq_f32(*(float32x4_t *)(v11[v51] + 4 * result), *(float32x4_t *)(v52 + 4 * result)), v10[v51]);
                ++v51;
              }
              while (v42 != v51);
            }
            v49.i32[0] = (uint64_t)rintf(v49.f32[0]);
            v49.i32[1] = (uint64_t)rintf(v49.f32[1]);
            v49.i32[2] = (uint64_t)rintf(v49.f32[2]);
            v49.i32[3] = (uint64_t)rintf(v49.f32[3]);
            *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32((int32x4_t)v49);
            result += 4;
          }
          while (result <= v43);
          uint64_t v46 = v68;
        }
        a6 = v46;
        if ((int)result < (int)v46)
        {
          float v53 = *v10;
          uint64_t v54 = *v11;
          uint64_t v55 = (int)result;
          if (v72 >= 2)
          {
            do
            {
              float v57 = v71 + (float)(v53 * *(float *)(v54 + 4 * v55));
              int v58 = (uint64_t *)v45;
              uint64_t v59 = 1;
              do
              {
                uint64_t v60 = *v58--;
                float v57 = v57 + (float)(v10[v59] * (float)(*(float *)(v11[v59] + 4 * v55) + *(float *)(v60 + 4 * v55)));
                ++v59;
              }
              while (v42 != v59);
              uint64_t v61 = (uint64_t)rintf(v57);
              if ((int)v61 <= -32768) {
                LODWORD(v61) = -32768;
              }
              if ((int)v61 >= 0x7FFF) {
                LOWORD(v61) = 0x7FFF;
              }
              a3->i16[v55++] = v61;
            }
            while (v55 != v44);
          }
          else
          {
            do
            {
              uint64_t v56 = (uint64_t)rintf(v71 + (float)(v53 * *(float *)(v54 + 4 * v55)));
              if ((int)v56 <= -32768) {
                LODWORD(v56) = -32768;
              }
              if ((int)v56 >= 0x7FFF) {
                LOWORD(v56) = 0x7FFF;
              }
              a3->i16[v55++] = v56;
            }
            while (v44 != v55);
          }
        }
        a3 = (int16x4_t *)((char *)a3 + v65);
        ++v11;
        v45 += 8;
        int v7 = v70 - 1;
      }
      while (v70 != 1);
    }
  }
  else if (a5)
  {
    uint64_t v66 = result + 120;
    uint64_t v12 = (uint64_t)rintf(*(float *)&a7);
    if ((int)v12 <= -32768) {
      LODWORD(v12) = -32768;
    }
    if ((int)v12 >= 0x7FFF) {
      unsigned int v13 = 0x7FFF;
    }
    else {
      unsigned int v13 = v12;
    }
    uint64_t v62 = a4;
    uint64_t v14 = (*(_DWORD *)(result + 8) / 2 + 1);
    int64_t v15 = (int)a6 - 4;
    uint64_t v16 = (int)a6;
    uint64_t v17 = a2 + 8 * v9 - 8;
    __int16 v64 = v13;
    int16x8_t v69 = vdupq_n_s16(v13);
    do
    {
      uint64_t v18 = a6;
      unint64_t result = sub_1003512BC(v66, v11, a3, a6);
      if ((int)result <= (int)v15)
      {
        unint64_t result = (int)result;
        if (v72 >= 2)
        {
          do
          {
            int v20 = (uint64_t *)v17;
            uint64_t v21 = 1;
            float v22 = v71;
            float v23 = v71;
            float v24 = v71;
            float v25 = v71;
            do
            {
              uint64_t v26 = (float *)(v11[v21] + 4 * result);
              uint64_t v27 = *v20--;
              uint64_t v28 = (float *)(v27 + 4 * result);
              float v29 = v10[v21];
              float v25 = v25 + (float)(v29 * (float)(*v26 - *v28));
              float v24 = v24 + (float)(v29 * (float)(v26[1] - v28[1]));
              float v23 = v23 + (float)(v29 * (float)(v26[2] - v28[2]));
              float v22 = v22 + (float)(v29 * (float)(v26[3] - v28[3]));
              ++v21;
            }
            while (v14 != v21);
            uint64_t v30 = (uint64_t)rintf(v22);
            v31.i32[0] = (uint64_t)rintf(v25);
            v31.i32[1] = (uint64_t)rintf(v24);
            v31.i32[2] = (uint64_t)rintf(v23);
            v31.i32[3] = v30;
            *(int16x4_t *)((char *)a3 + 2 * result) = vqmovn_s32(v31);
            result += 4;
          }
          while (result <= v15);
        }
        else
        {
          uint64_t v19 = 2 * (int)result;
          do
          {
            *(int16x4_t *)((char *)a3 + v19) = *(int16x4_t *)v69.i8;
            result += 4;
            v19 += 8;
          }
          while (result <= v15);
        }
        uint64_t v18 = v68;
      }
      a6 = v18;
      if ((int)result < (int)v18)
      {
        unint64_t v32 = (int)result;
        if (v72 >= 2)
        {
          do
          {
            int32x4_t v37 = (uint64_t *)v17;
            uint64_t v38 = 1;
            float v39 = v71;
            do
            {
              uint64_t v40 = *v37--;
              float v39 = v39 + (float)(v10[v38] * (float)(*(float *)(v11[v38] + 4 * v32) - *(float *)(v40 + 4 * v32)));
              ++v38;
            }
            while (v14 != v38);
            uint64_t v41 = (uint64_t)rintf(v39);
            if ((int)v41 <= -32768) {
              LODWORD(v41) = -32768;
            }
            if ((int)v41 >= 0x7FFF) {
              LOWORD(v41) = 0x7FFF;
            }
            a3->i16[v32++] = v41;
          }
          while (v32 != v16);
        }
        else
        {
          unint64_t v33 = v16 - (int)result;
          if (v33 < 0x10) {
            goto LABEL_64;
          }
          uint64_t v34 = 2 * (int)result;
          unint64_t v35 = v33 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            unint64_t v36 = (int16x8_t *)((char *)a3 + v34);
            *unint64_t v36 = v69;
            v36[1] = v69;
            v34 += 32;
            v35 -= 16;
          }
          while (v35);
          unint64_t v32 = (v33 & 0xFFFFFFFFFFFFFFF0) + (int)result;
          if (v33 != (v33 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_64:
            do
              a3->i16[v32++] = v64;
            while (v16 != v32);
          }
        }
      }
      a3 = (int16x4_t *)((char *)a3 + v62);
      ++v11;
      v17 += 8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_100350F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (_DWORD *)(a1 + 8);
  if (a1 != a2)
  {
    uint64_t v6 = *(void *)(a2 + 64);
    if (v6) {
      atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 1u);
    }
    uint64_t v7 = *(void *)(a1 + 64);
    if (v7 && atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 8);
    }
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    if (*(int *)(a1 + 12) <= 0)
    {
      *uint64_t v5 = *v4;
      int v11 = *(_DWORD *)(a2 + 12);
      if (v11 <= 2)
      {
LABEL_12:
        *(_DWORD *)(a1 + 12) = v11;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v12 = *(void **)(a2 + 80);
        unsigned int v13 = *(void **)(a1 + 80);
        void *v13 = *v12;
        v13[1] = v12[1];
LABEL_15:
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(a1 + 72);
      do
      {
        *(_DWORD *)(v9 + 4 * v8++) = 0;
        uint64_t v10 = *(int *)(a1 + 12);
      }
      while (v8 < v10);
      *uint64_t v5 = *v4;
      if ((int)v10 <= 2)
      {
        int v11 = *(_DWORD *)(a2 + 12);
        if (v11 <= 2) {
          goto LABEL_12;
        }
      }
    }
    sub_1002931A8((uint64_t)v5, (uint64_t)v4);
    goto LABEL_15;
  }
LABEL_16:
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

void sub_100351068(uint64_t a1)
{
  sub_1003508F4(a1);

  operator delete();
}

int64_t sub_1003510A0(int64_t result, uint64_t *a2, int16x4_t *a3, int a4, int a5, int a6)
{
  if (a5)
  {
    int v7 = a5;
    uint64_t v8 = a3;
    uint64_t v9 = a2;
    uint64_t v10 = *(float **)(result + 32);
    float v11 = *(float *)(result + 232);
    uint64_t v34 = a4;
    uint64_t v35 = result + 120;
    uint64_t v12 = *(unsigned int *)(result + 8);
    int64_t v13 = a6 - 4;
    uint64_t v14 = a6;
    for (unint64_t result = sub_1003512BC(result + 120, a2, a3, a6); ; unint64_t result = sub_1003512BC(v35, v9, v8, a6))
    {
      if ((int)result <= (int)v13)
      {
        float v15 = *v10;
        uint64_t v16 = *v9;
        unint64_t result = (int)result;
        do
        {
          uint64_t v19 = (float *)(v16 + 4 * result);
          float v20 = v11 + (float)(v15 * *v19);
          float v21 = v11 + (float)(v15 * v19[1]);
          float v22 = v11 + (float)(v15 * v19[2]);
          float v23 = v11 + (float)(v15 * v19[3]);
          if ((int)v12 >= 2)
          {
            for (uint64_t i = 1; i != v12; ++i)
            {
              float v25 = (float *)(v9[i] + 4 * result);
              float v26 = v10[i];
              float v20 = v20 + (float)(v26 * *v25);
              float v21 = v21 + (float)(v26 * v25[1]);
              float v22 = v22 + (float)(v26 * v25[2]);
              float v23 = v23 + (float)(v26 * v25[3]);
            }
          }
          uint64_t v17 = (uint64_t)rintf(v21);
          v18.i32[0] = (uint64_t)rintf(v20);
          v18.i32[1] = v17;
          v18.i64[1] = __PAIR64__((uint64_t)rintf(v23), (uint64_t)rintf(v22));
          *(int16x4_t *)((char *)v8 + 2 * result) = vqmovn_s32(v18);
          result += 4;
        }
        while (result <= v13);
      }
      if ((int)result < a6)
      {
        float v27 = *v10;
        uint64_t v28 = *v9;
        uint64_t v29 = (int)result;
        if ((int)v12 <= 1)
        {
          do
          {
            uint64_t v33 = (uint64_t)rintf(v11 + (float)(v27 * *(float *)(v28 + 4 * v29)));
            if ((int)v33 <= -32768) {
              LODWORD(v33) = -32768;
            }
            if ((int)v33 >= 0x7FFF) {
              LOWORD(v33) = 0x7FFF;
            }
            v8->i16[v29++] = v33;
          }
          while (v14 != v29);
        }
        else
        {
          do
          {
            float v30 = v11 + (float)(v27 * *(float *)(v28 + 4 * v29));
            for (uint64_t j = 1; j != v12; ++j)
              float v30 = v30 + (float)(v10[j] * *(float *)(v9[j] + 4 * v29));
            uint64_t v32 = (uint64_t)rintf(v30);
            if ((int)v32 <= -32768) {
              LODWORD(v32) = -32768;
            }
            if ((int)v32 >= 0x7FFF) {
              LOWORD(v32) = 0x7FFF;
            }
            v8->i16[v29++] = v32;
          }
          while (v29 != v14);
        }
      }
      uint64_t v8 = (int16x4_t *)((char *)v8 + v34);
      ++v9;
      if (!--v7) {
        break;
      }
    }
  }
  return result;
}

unint64_t sub_1003512BC(uint64_t a1, void *a2, int16x4_t *a3, int a4)
{
  if (!*(unsigned char *)(a1 + 104)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 16) + *(_DWORD *)(a1 + 20);
  int v5 = v4 - 1;
  if (v4 - 1 >= 0) {
    --v4;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (uint64_t)v4 >> 1;
  uint64_t v8 = (const float *)(v6 + 4 * (v4 >> 1));
  uint64_t v9 = (const float *)(a1 + 4);
  float32x4_t v10 = vld1q_dup_f32(v9);
  if (*(unsigned char *)a1)
  {
    if (v5 == 1)
    {
      return 0;
    }
    else
    {
      unint64_t v20 = (a4 - 8);
      if (a4 >= 8)
      {
        float32x4_t v39 = vld1q_dup_f32(v8);
        uint64_t v38 = v8 + 1;
        float32x4_t v40 = vld1q_dup_f32(v38);
        if (v5 >= 4)
        {
          unint64_t result = 0;
          if ((int)v7 <= 2) {
            uint64_t v50 = 2;
          }
          else {
            uint64_t v50 = v7;
          }
          uint64_t v51 = v6 + 4 * v7 + 8;
          uint64_t v52 = v50 - 1;
          do
          {
            uint64_t v53 = 4 * result;
            uint64_t v54 = (float32x4_t *)(*a2 + 4 * result);
            float32x4_t v55 = *v54;
            float32x4_t v56 = v54[1];
            float v57 = (float32x4_t *)(a2[1] + 4 * result);
            int v58 = (float32x4_t *)(*(a2 - 1) + 4 * result);
            float32x4_t v59 = vmlaq_f32(vmlaq_f32(v10, v39, v55), v40, vaddq_f32(*v57, *v58));
            float32x4_t v60 = vmlaq_f32(vmlaq_f32(v10, v39, v56), v40, vaddq_f32(v57[1], v58[1]));
            uint64_t v61 = v52;
            uint64_t v62 = a2 + 2;
            float32x4_t v63 = (const float *)v51;
            __int16 v64 = a2 - 2;
            do
            {
              uint64_t v65 = *v62++;
              uint64_t v66 = (float32x4_t *)(v65 + v53);
              uint64_t v67 = *v64--;
              float32x4_t v68 = vld1q_dup_f32(v63++);
              float32x4_t v59 = vmlaq_f32(v59, v68, vaddq_f32(*v66, *(float32x4_t *)(v67 + 4 * result)));
              float32x4_t v60 = vmlaq_f32(v60, v68, vaddq_f32(v66[1], *(float32x4_t *)(v67 + v53 + 16)));
              --v61;
            }
            while (v61);
            int16x8_t v69 = &a3[result / 4];
            *int16x8_t v69 = vqmovn_s32(vcvtq_s32_f32(v59));
            v69[1] = vqmovn_s32(vcvtq_s32_f32(v60));
            result += 8;
          }
          while (result <= v20);
        }
        else
        {
          uint64_t v41 = 0;
          unint64_t result = 0;
          uint64_t v42 = a3 + 1;
          do
          {
            int64_t v43 = (float32x4_t *)(*a2 + v41);
            float32x4_t v44 = *v43;
            float32x4_t v45 = v43[1];
            uint64_t v46 = (float32x4_t *)(a2[1] + v41);
            uint64_t v47 = (float32x4_t *)(*(a2 - 1) + v41);
            float32x4_t v48 = vmlaq_f32(v10, v39, v44);
            float32x4_t v49 = vmlaq_f32(vmlaq_f32(v10, v39, v45), v40, vaddq_f32(v46[1], v47[1]));
            v42[-1] = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v48, v40, vaddq_f32(*v46, *v47))));
            *uint64_t v42 = vqmovn_s32(vcvtq_s32_f32(v49));
            result += 8;
            v41 += 32;
            v42 += 2;
          }
          while (result <= v20);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v11 = (a4 - 8);
    if (a4 < 8) {
      return 0;
    }
    int64_t v13 = v8 + 1;
    float32x4_t v14 = vld1q_dup_f32(v13);
    if (v5 >= 4)
    {
      unint64_t result = 0;
      if ((int)v7 <= 2) {
        uint64_t v21 = 2;
      }
      else {
        uint64_t v21 = v7;
      }
      uint64_t v22 = v6 + 4 * v7 + 8;
      uint64_t v23 = v21 - 1;
      do
      {
        uint64_t v24 = 4 * result;
        float v25 = (float32x4_t *)(a2[1] + 4 * result);
        float v26 = (float32x4_t *)(*(a2 - 1) + 4 * result);
        float32x4_t v27 = vmlaq_f32(v10, v14, vsubq_f32(*v25, *v26));
        float32x4_t v28 = vmlaq_f32(v10, v14, vsubq_f32(v25[1], v26[1]));
        uint64_t v29 = v23;
        float v30 = a2 + 2;
        int32x4_t v31 = (const float *)v22;
        uint64_t v32 = a2 - 2;
        do
        {
          uint64_t v33 = *v30++;
          uint64_t v34 = (float32x4_t *)(v33 + v24);
          uint64_t v35 = *v32--;
          float32x4_t v36 = vld1q_dup_f32(v31++);
          float32x4_t v27 = vmlaq_f32(v27, v36, vsubq_f32(*v34, *(float32x4_t *)(v35 + 4 * result)));
          float32x4_t v28 = vmlaq_f32(v28, v36, vsubq_f32(v34[1], *(float32x4_t *)(v35 + v24 + 16)));
          --v29;
        }
        while (v29);
        int32x4_t v37 = &a3[result / 4];
        *int32x4_t v37 = vqmovn_s32(vcvtq_s32_f32(v27));
        v37[1] = vqmovn_s32(vcvtq_s32_f32(v28));
        result += 8;
      }
      while (result <= v11);
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t result = 0;
      uint64_t v16 = a3 + 1;
      do
      {
        uint64_t v17 = (float32x4_t *)(a2[1] + v15);
        int32x4_t v18 = (float32x4_t *)(*(a2 - 1) + v15);
        int16x4_t v19 = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v10, v14, vsubq_f32(v17[1], v18[1]))));
        v16[-1] = vqmovn_s32(vcvtq_s32_f32(vmlaq_f32(v10, v14, vsubq_f32(*v17, *v18))));
        int16x4_t *v16 = v19;
        result += 8;
        v15 += 32;
        v16 += 2;
      }
      while (result <= v11);
    }
  }
  return result;
}

void sub_1003515C4()
{
}

uint64_t sub_1003515D8(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100351658(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_100342BF0(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049AE40;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_100351710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_10034337C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100351738(uint64_t a1)
{
  *(void *)a1 = off_10049A560;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  int v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_1003517E8(uint64_t a1)
{
  *(void *)a1 = off_10049A560;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  int v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

uint64_t sub_1003518B8(uint64_t result, uint64_t a2, _WORD *a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  uint64_t v8 = (uint64_t)v7 >> 1;
  uint64_t v9 = 8 * (v7 >> 1);
  float32x4_t v10 = (double *)(*(void *)(result + 32) + v9);
  double v11 = *(double *)(result + 120);
  uint64_t v12 = (double **)(a2 + v9);
  if (*(unsigned char *)(result + 128))
  {
    if (a5)
    {
      int v44 = a5 - 1;
      uint64_t v45 = a4;
      if (a6 > 3)
      {
        uint64_t v52 = a2 + 8 * v8 - 8;
        double v53 = *v10;
        uint64_t v54 = 8 * (v8 + 1);
        float32x4_t v55 = a3 + 4;
        unint64_t result = 0x7FFFLL;
        do
        {
          unint64_t v56 = 0;
          int v57 = v44;
          int v58 = *v12;
          float32x4_t v59 = v55;
          uint64_t v60 = 4;
          do
          {
            unint64_t v63 = v60;
            __int16 v64 = v59;
            uint64_t v65 = &v58[v56];
            double v66 = v11 + v53 * *v65;
            double v67 = v11 + v53 * v65[1];
            double v68 = v11 + v53 * v65[2];
            double v69 = v11 + v53 * v65[3];
            if (v6 >= 2)
            {
              uint64_t v70 = 8;
              float v71 = (uint64_t *)v52;
              do
              {
                int v72 = &v12[(unint64_t)v70 / 8][v56];
                uint64_t v73 = *v71--;
                int v74 = (double *)(v73 + 8 * v56);
                double v75 = v10[(unint64_t)v70 / 8];
                double v66 = v66 + v75 * (*v72 + *v74);
                double v67 = v67 + v75 * (v72[1] + v74[1]);
                double v68 = v68 + v75 * (v72[2] + v74[2]);
                double v69 = v69 + v75 * (v72[3] + v74[3]);
                v70 += 8;
              }
              while (v54 != v70);
            }
            uint64_t v61 = (uint64_t)rint(v67);
            v62.i32[0] = (uint64_t)rint(v66);
            v62.i32[1] = v61;
            v62.i64[1] = __PAIR64__((uint64_t)rint(v69), (uint64_t)rint(v68));
            *(int16x4_t *)&a3[v56] = vqmovn_s32(v62);
            v56 += 4;
            uint64_t v60 = v63 + 4;
            float32x4_t v59 = v64 + 4;
          }
          while (v56 <= (a6 - 4));
          if ((int)v56 < a6)
          {
            if (v6 >= 2)
            {
              do
              {
                double v77 = v11 + v53 * v58[v63];
                uint64_t v78 = 8;
                double v79 = (uint64_t *)v52;
                do
                {
                  uint64_t v80 = *v79--;
                  double v77 = v77
                      + v10[(unint64_t)v78 / 8]
                      * (v12[(unint64_t)v78 / 8][v63] + *(double *)(v80 + 8 * v63));
                  v78 += 8;
                }
                while (v54 != v78);
                uint64_t v81 = (uint64_t)rint(v77);
                if ((int)v81 <= -32768) {
                  LODWORD(v81) = -32768;
                }
                if ((int)v81 >= 0x7FFF) {
                  LOWORD(v81) = 0x7FFF;
                }
                a3[v63++] = v81;
              }
              while (v63 < a6);
            }
            else
            {
              do
              {
                uint64_t v76 = (uint64_t)rint(v11 + v53 * v58[v63]);
                if ((int)v76 <= -32768) {
                  LODWORD(v76) = -32768;
                }
                if ((int)v76 >= 0x7FFF) {
                  LOWORD(v76) = 0x7FFF;
                }
                *v64++ = v76;
                ++v63;
              }
              while (v63 < a6);
            }
          }
          a3 = (_WORD *)((char *)a3 + v45);
          ++v12;
          int v44 = v57 - 1;
          v52 += 8;
          float32x4_t v55 = (_WORD *)((char *)v55 + v45);
        }
        while (v57);
      }
      else if (a6 >= 1)
      {
        double v46 = *v10;
        if (v6 >= 2)
        {
          uint64_t v82 = a2 + 8 * v8 - 8;
          uint64_t v83 = 8 * (v8 + 1);
          do
          {
            int v84 = v44;
            int32x4_t v85 = *v12;
            double v86 = v11 + v46 * **v12;
            uint64_t v87 = 8;
            unint64_t result = v82;
            do
            {
              int v88 = *(double **)result;
              result -= 8;
              double v86 = v86 + v10[(unint64_t)v87 / 8] * (*v12[(unint64_t)v87 / 8] + *v88);
              v87 += 8;
            }
            while (v83 != v87);
            uint64_t v89 = (uint64_t)rint(v86);
            if ((int)v89 <= -32768) {
              LODWORD(v89) = -32768;
            }
            if ((int)v89 >= 0x7FFF) {
              LOWORD(v89) = 0x7FFF;
            }
            *a3 = v89;
            if (a6 != 1)
            {
              double v90 = v11 + v46 * v85[1];
              uint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
              unint64_t result = 8;
              do
              {
                double v90 = v90 + *(double *)((char *)v10 + result) * ((*(double **)((char *)v12 + result))[1] + v12[v91][1]);
                result += 8;
                --v91;
              }
              while (v83 != result);
              uint64_t v92 = (uint64_t)rint(v90);
              if ((int)v92 <= -32768) {
                LODWORD(v92) = -32768;
              }
              if ((int)v92 >= 0x7FFF) {
                LOWORD(v92) = 0x7FFF;
              }
              a3[1] = v92;
              if (a6 != 2)
              {
                double v93 = v11 + v46 * v85[2];
                uint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
                uint64_t v95 = 8;
                do
                {
                  unint64_t result = (uint64_t)v12[v94];
                  double v93 = v93
                      + v10[(unint64_t)v95 / 8] * (v12[(unint64_t)v95 / 8][2] + *(double *)(result + 16));
                  v95 += 8;
                  --v94;
                }
                while (v83 != v95);
                uint64_t v96 = (uint64_t)rint(v93);
                if ((int)v96 <= -32768) {
                  LODWORD(v96) = -32768;
                }
                if ((int)v96 >= 0x7FFF) {
                  LOWORD(v96) = 0x7FFF;
                }
                a3[2] = v96;
              }
            }
            a3 = (_WORD *)((char *)a3 + a4);
            ++v12;
            --v44;
            v82 += 8;
          }
          while (v84);
        }
        else
        {
          uint64_t v47 = a3 + 2;
          do
          {
            float32x4_t v48 = *v12;
            uint64_t v49 = (uint64_t)rint(v11 + v46 * **v12);
            if ((int)v49 <= -32768) {
              LODWORD(v49) = -32768;
            }
            if ((int)v49 >= 0x7FFF) {
              LOWORD(v49) = 0x7FFF;
            }
            *(v47 - 2) = v49;
            if (a6 != 1)
            {
              uint64_t v50 = (uint64_t)rint(v11 + v46 * v48[1]);
              if ((int)v50 <= -32768) {
                LODWORD(v50) = -32768;
              }
              if ((int)v50 >= 0x7FFF) {
                LOWORD(v50) = 0x7FFF;
              }
              *(v47 - 1) = v50;
              if (a6 != 2)
              {
                uint64_t v51 = (uint64_t)rint(v11 + v46 * v48[2]);
                if ((int)v51 <= -32768) {
                  LODWORD(v51) = -32768;
                }
                if ((int)v51 >= 0x7FFF) {
                  LOWORD(v51) = 0x7FFF;
                }
                *uint64_t v47 = v51;
              }
            }
            ++v12;
            uint64_t v47 = (_WORD *)((char *)v47 + a4);
            --a5;
          }
          while (a5);
        }
      }
    }
  }
  else if (a5)
  {
    int v13 = a6 - 4;
    uint64_t v14 = (uint64_t)rint(v11);
    if ((int)v14 <= -32768) {
      signed int v15 = -32768;
    }
    else {
      signed int v15 = v14;
    }
    if (v15 >= 0x7FFF) {
      signed int v15 = 0x7FFF;
    }
    uint64_t v16 = a4;
    unsigned int v17 = v8 + 1;
    int16x8_t v18 = vdupq_n_s16(v15);
    uint64_t v19 = a2 + 8 * v8 - 8;
    unint64_t result = 8 * v17;
    do
    {
      if (a6 >= 4)
      {
        if (v6 >= 2)
        {
          uint64_t v20 = 0;
          do
          {
            uint64_t v22 = 8;
            uint64_t v23 = (uint64_t *)v19;
            double v24 = v11;
            double v25 = v11;
            double v26 = v11;
            double v27 = v11;
            do
            {
              float32x4_t v28 = &v12[(unint64_t)v22 / 8][v20];
              uint64_t v29 = *v23--;
              float v30 = (double *)(v29 + 8 * v20);
              double v31 = v10[(unint64_t)v22 / 8];
              double v27 = v27 + v31 * (*v28 - *v30);
              double v26 = v26 + v31 * (v28[1] - v30[1]);
              double v25 = v25 + v31 * (v28[2] - v30[2]);
              double v24 = v24 + v31 * (v28[3] - v30[3]);
              v22 += 8;
            }
            while (result != v22);
            uint64_t v32 = (uint64_t)rint(v24);
            v33.i32[0] = (uint64_t)rint(v27);
            v33.i32[1] = (uint64_t)rint(v26);
            v33.i32[2] = (uint64_t)rint(v25);
            v33.i32[3] = v32;
            *(int16x4_t *)&a3[v20] = vqmovn_s32(v33);
            v20 += 4;
          }
          while (v20 <= v13);
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v21 = a3;
          do
          {
            *v21++ = v18.i64[0];
            v20 += 4;
          }
          while (v20 <= v13);
        }
        uint64_t v20 = v20;
        if ((int)v20 >= a6) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v20 = 0;
        if (a6 <= 0) {
          goto LABEL_12;
        }
      }
      if (v6 >= 2)
      {
        do
        {
          uint64_t v36 = 8;
          int32x4_t v37 = (uint64_t *)v19;
          double v38 = v11;
          do
          {
            uint64_t v39 = *v37--;
            double v38 = v38
                + v10[(unint64_t)v36 / 8] * (v12[(unint64_t)v36 / 8][v20] - *(double *)(v39 + 8 * v20));
            v36 += 8;
          }
          while (result != v36);
          uint64_t v40 = (uint64_t)rint(v38);
          if ((int)v40 <= -32768) {
            LODWORD(v40) = -32768;
          }
          if ((int)v40 >= 0x7FFF) {
            LOWORD(v40) = 0x7FFF;
          }
          a3[v20++] = v40;
        }
        while (v20 != a6);
        goto LABEL_12;
      }
      unint64_t v34 = a6 - v20;
      if (v34 >= 0x10)
      {
        uint64_t v35 = (v34 & 0xFFFFFFFFFFFFFFF0) + v20;
        uint64_t v41 = v20;
        unint64_t v42 = v34 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int64_t v43 = (int16x8_t *)&a3[v41];
          *int64_t v43 = v18;
          v43[1] = v18;
          v41 += 16;
          v42 -= 16;
        }
        while (v42);
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v35 = v20;
      }
      do
        a3[v35++] = v15;
      while (a6 != v35);
LABEL_12:
      a3 = (_WORD *)((char *)a3 + v16);
      ++v12;
      v19 += 8;
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_100351F28()
{
}

uint64_t sub_100351F3C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_100351FBC(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_1003434C4(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049AEC8;
  *(_DWORD *)(v7 + 120) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_100352074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100343DA4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10035209C(uint64_t a1)
{
  *(void *)a1 = off_10049A5E8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  int v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_10035214C(uint64_t a1)
{
  *(void *)a1 = off_10049A5E8;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  int v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_10035221C(unint64_t result, uint64_t a2, float *a3, int a4, int a5, int a6, double a7)
{
  int v7 = *(_DWORD *)(result + 8);
  if (v7 >= 0) {
    int v8 = *(_DWORD *)(result + 8);
  }
  else {
    int v8 = v7 + 1;
  }
  int v9 = v8 >> 1;
  uint64_t v10 = *(void *)(result + 32);
  uint64_t v11 = (uint64_t)v8 >> 1;
  uint64_t v12 = (float *)(v10 + 4 * (v8 >> 1));
  LODWORD(a7) = *(_DWORD *)(result + 116);
  int v13 = (float **)(a2 + 8 * v9);
  if (*(unsigned char *)(result + 120))
  {
    if (!a5) {
      return result;
    }
    int v39 = a5 - 1;
    uint64_t v40 = a4;
    if (a6 <= 3)
    {
      if (a6 >= 1)
      {
        if (v7 >= 2)
        {
          uint64_t v104 = (v11 + 1);
          uint64_t v105 = a2 + 8 * v11 - 8;
          do
          {
            int v106 = v39;
            uint64_t v107 = *v13;
            float v108 = *(float *)&a7 + (float)(*v12 * **v13);
            unint64_t v109 = (float **)v105;
            uint64_t v110 = 1;
            do
            {
              int v111 = *v109--;
              unint64_t result = (unint64_t)v111;
              float v108 = v108 + (float)(v12[v110] * (float)(*v13[v110] + *v111));
              ++v110;
            }
            while (v104 != v110);
            *a3 = v108;
            if (a6 != 1)
            {
              float v112 = *(float *)&a7 + (float)(*v12 * v107[1]);
              uint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
              uint64_t v114 = 1;
              do
              {
                float v112 = v112 + (float)(v12[v114] * (float)(v13[v114][1] + v13[v113][1]));
                ++v114;
                --v113;
              }
              while (v104 != v114);
              a3[1] = v112;
              if (a6 != 2)
              {
                float v115 = *(float *)&a7 + (float)(*v12 * v107[2]);
                uint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
                uint64_t v117 = 1;
                do
                {
                  float v115 = v115 + (float)(v12[v117] * (float)(v13[v117][2] + v13[v116][2]));
                  ++v117;
                  --v116;
                }
                while (v104 != v117);
                a3[2] = v115;
              }
            }
            a3 = (float *)((char *)a3 + a4);
            ++v13;
            --v39;
            v105 += 8;
          }
          while (v106);
        }
        else
        {
          uint64_t v41 = a3 + 2;
          do
          {
            unint64_t v42 = *v13;
            *(v41 - 2) = *(float *)&a7 + (float)(*v12 * **v13);
            if (a6 != 1)
            {
              *(v41 - 1) = *(float *)&a7 + (float)(*v12 * v42[1]);
              if (a6 != 2) {
                *uint64_t v41 = *(float *)&a7 + (float)(*v12 * v42[2]);
              }
            }
            ++v13;
            uint64_t v41 = (float *)((char *)v41 + a4);
            --a5;
          }
          while (a5);
        }
      }
      return result;
    }
    unint64_t v43 = (a6 - 4);
    if (v7 >= 2)
    {
      uint64_t v90 = (v11 + 1);
      float32x4_t v91 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
      uint64_t v92 = a2 + 8 * v11 - 8;
      do
      {
        unint64_t result = 0;
        int v93 = v39;
        uint64_t v94 = *v13;
        uint64_t v95 = 4;
        do
        {
          unint64_t v96 = v95;
          float32x4_t v97 = vmlaq_n_f32(v91, *(float32x4_t *)&v94[result], *v12);
          int v98 = (uint64_t *)v92;
          uint64_t v99 = 1;
          do
          {
            uint64_t v100 = *v98--;
            float32x4_t v97 = vmlaq_n_f32(v97, vaddq_f32(*(float32x4_t *)&v13[v99][result], *(float32x4_t *)(v100 + 4 * result)), v12[v99]);
            ++v99;
          }
          while (v90 != v99);
          *(float32x4_t *)&a3[result] = v97;
          result += 4;
          v95 += 4;
        }
        while (result <= v43);
        if ((int)result < a6)
        {
          do
          {
            float v101 = *(float *)&a7 + (float)(*v12 * v94[v96]);
            unint64_t result = v92;
            uint64_t v102 = 1;
            do
            {
              uint64_t v103 = *(void *)result;
              result -= 8;
              float v101 = v101 + (float)(v12[v102] * (float)(v13[v102][v96] + *(float *)(v103 + 4 * v96)));
              ++v102;
            }
            while (v90 != v102);
            a3[v96++] = v101;
          }
          while (v96 < a6);
        }
        a3 = (float *)((char *)a3 + v40);
        ++v13;
        --v39;
        v92 += 8;
      }
      while (v93);
      return result;
    }
    uint64_t v44 = 0;
    if ((unint64_t)(v43 & 0xFFFFFFFC) + 5 <= a6) {
      uint64_t v45 = a6;
    }
    else {
      uint64_t v45 = (v43 & 0xFFFFFFFC) + 5;
    }
    uint64_t v46 = (4 * (a6 - 4)) & 0x3FFFFFFF0;
    uint64_t v47 = 4 * v45 - v46;
    unint64_t v48 = v10 + 4 * v11 + 4;
    unint64_t v49 = v45 - (v43 & 0xFFFFFFFC) - 4;
    uint64_t v50 = v46 + 16;
    unint64_t result = (v43 >> 2) + 1;
    float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    unint64_t v52 = v49 & 0xFFFFFFFFFFFFFFF8;
    double v53 = a3;
    while (1)
    {
      int v54 = v39;
      uint64_t v55 = v44 * a4;
      unint64_t v56 = *v13;
      if (v43 < 0xC) {
        break;
      }
      unint64_t v57 = 0;
      uint64_t v60 = (float *)((char *)a3 + v50 + v55);
      BOOL v61 = v53 >= (float *)((char *)v56 + v50) || v56 >= v60;
      char v62 = !v61;
      BOOL v61 = v12 >= v60;
      uint64_t v59 = 4;
      unint64_t v58 = 0;
      if (!v61 && (unint64_t)v53 < v48) {
        goto LABEL_71;
      }
      if (v62) {
        goto LABEL_71;
      }
      uint64_t v64 = 0;
      unint64_t v65 = result & 0x7FFFFFFC;
      do
      {
        double v66 = &v56[v64];
        float32x4x4_t v118 = vld4q_f32(v66);
        v119.val[0] = vmlaq_n_f32(v51, v118.val[0], *v12);
        v119.val[1] = vmlaq_n_f32(v51, v118.val[1], *v12);
        v119.val[2] = vmlaq_n_f32(v51, v118.val[2], *v12);
        v119.val[3] = vmlaq_n_f32(v51, v118.val[3], *v12);
        double v67 = &v53[v64];
        vst4q_f32(v67, v119);
        v64 += 16;
        v65 -= 4;
      }
      while (v65);
      unint64_t v57 = result & 0x7FFFFFFC;
      uint64_t v59 = (16 * ((v57 >> 2) & 0x1FFFFFFF)) | 4;
      unint64_t v58 = 4 * v57;
      unint64_t v68 = v57 - 1;
      uint64_t v69 = v58;
      if (result != v57) {
        goto LABEL_71;
      }
LABEL_73:
      if ((int)v58 < a6)
      {
        if (v49 >= 0x10)
        {
          uint64_t v77 = 4 * v68;
          uint64_t v78 = (char *)a3 + v55 + v77 * 4 + 16;
          double v79 = (float *)((char *)a3 + v47 + v55 + v77 * 4);
          uint64_t v80 = &v56[v77];
          unint64_t v81 = (unint64_t)&v56[v77 + 4];
          BOOL v83 = v78 < (char *)v80 + v47 && v81 < (unint64_t)v79;
          if (v12 >= v79 || (unint64_t)v78 >= v48)
          {
            if (v83)
            {
              unint64_t v76 = v69;
            }
            else
            {
              unint64_t v76 = v69 + v52;
              float32x4_t v85 = vld1q_dup_f32(v12);
              uint64_t v86 = v69;
              unint64_t v87 = v49 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                float32x4_t v88 = vmlaq_f32(v51, *(float32x4_t *)&v56[v86 + 4], v85);
                uint64_t v89 = (float32x4_t *)&v53[v86];
                *uint64_t v89 = vmlaq_f32(v51, *(float32x4_t *)&v56[v86], v85);
                v89[1] = v88;
                v86 += 8;
                v87 -= 8;
              }
              while (v87);
              if (v49 == v52) {
                goto LABEL_53;
              }
            }
          }
          else
          {
            unint64_t v76 = v69;
          }
        }
        else
        {
          unint64_t v76 = v69;
        }
        do
        {
          v53[v76] = *(float *)&a7 + (float)(*v12 * v56[v76]);
          ++v76;
        }
        while (v76 < a6);
      }
LABEL_53:
      double v53 = (float *)((char *)v53 + a4);
      ++v13;
      int v39 = v54 - 1;
      ++v44;
      if (!v54) {
        return result;
      }
    }
    unint64_t v57 = 0;
    unint64_t v58 = 0;
    uint64_t v59 = 4;
LABEL_71:
    unint64_t v68 = v57 - 1;
    uint64_t v69 = v59 - 4;
    uint64_t v70 = v58;
    float v71 = v56 + 3;
    do
    {
      float v72 = *(float *)&a7 + (float)(*v12 * v71[v70 - 2]);
      float v73 = *(float *)&a7 + (float)(*v12 * v71[v70 - 1]);
      float v74 = *(float *)&a7 + (float)(*v12 * v71[v70]);
      double v75 = &v53[v70];
      *double v75 = *(float *)&a7 + (float)(*v12 * v56[v70]);
      v75[1] = v72;
      v58 += 4;
      v75[2] = v73;
      v75[3] = v74;
      ++v68;
      v69 += 4;
      v70 += 4;
    }
    while (v58 <= v43);
    goto LABEL_73;
  }
  if (a5)
  {
    uint64_t v14 = a4;
    uint64_t v15 = (v11 + 1);
    uint64_t v16 = a6 - 4;
    unint64_t v17 = 3;
    if (v16 > 3) {
      unint64_t v17 = a6 - 4;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    unint64_t result = 4 * (v18 & 0x3FFFFFF8);
    int32x4_t v19 = vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    uint64_t v20 = a2 + 8 * v11 - 8;
    uint64_t v21 = a3 + 16;
    do
    {
      if (a6 < 4)
      {
        uint64_t v22 = 0;
        if (a6 <= 0) {
          goto LABEL_9;
        }
        goto LABEL_27;
      }
      if (v7 >= 2)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t v23 = (uint64_t *)v20;
          uint64_t v24 = 1;
          float32x4_t v25 = (float32x4_t)v19;
          do
          {
            uint64_t v26 = *v23--;
            float32x4_t v25 = vmlaq_n_f32(v25, vsubq_f32(*(float32x4_t *)&v13[v24][v22], *(float32x4_t *)(v26 + 4 * v22)), v12[v24]);
            ++v24;
          }
          while (v15 != v24);
          *(float32x4_t *)&a3[v22] = v25;
          v22 += 4;
        }
        while (v22 <= v16);
      }
      else
      {
        if (v17 < 0x1C)
        {
          uint64_t v22 = 0;
LABEL_24:
          uint64_t v29 = &a3[v22];
          do
          {
            *uint64_t v29 = *(float *)&a7;
            v29[1] = *(float *)&a7;
            int v29[2] = *(float *)&a7;
            v29[3] = *(float *)&a7;
            v22 += 4;
            v29 += 4;
          }
          while (v22 <= v16);
          goto LABEL_26;
        }
        uint64_t v27 = v18 & 0x3FFFFFF8;
        float32x4_t v28 = (int32x4_t *)v21;
        do
        {
          v28[-4] = v19;
          v28[-3] = v19;
          v28[-2] = v19;
          v28[-1] = v19;
          int32x4_t *v28 = v19;
          v28[1] = v19;
          uint64_t v28[2] = v19;
          v28[3] = v19;
          v28 += 8;
          v27 -= 8;
        }
        while (v27);
        uint64_t v22 = 4 * (v18 & 0x3FFFFFF8);
        if (v18 != (v18 & 0x3FFFFFF8)) {
          goto LABEL_24;
        }
      }
LABEL_26:
      uint64_t v22 = v22;
      if ((int)v22 >= a6) {
        goto LABEL_9;
      }
LABEL_27:
      if (v7 >= 2)
      {
        do
        {
          uint64_t v32 = (uint64_t *)v20;
          uint64_t v33 = 1;
          float v34 = *(float *)&a7;
          do
          {
            uint64_t v35 = *v32--;
            float v34 = v34 + (float)(v12[v33] * (float)(v13[v33][v22] - *(float *)(v35 + 4 * v22)));
            ++v33;
          }
          while (v15 != v33);
          a3[v22++] = v34;
        }
        while (v22 != a6);
        goto LABEL_9;
      }
      unint64_t v30 = a6 - v22;
      if (v30 >= 8)
      {
        uint64_t v31 = (v30 & 0xFFFFFFFFFFFFFFF8) + v22;
        uint64_t v36 = v22;
        unint64_t v37 = v30 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          double v38 = (int32x4_t *)&a3[v36];
          *double v38 = v19;
          v38[1] = v19;
          v36 += 8;
          v37 -= 8;
        }
        while (v37);
        if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v31 = v22;
      }
      do
        a3[v31++] = *(float *)&a7;
      while (a6 != v31);
LABEL_9:
      a3 = (float *)((char *)a3 + v14);
      ++v13;
      v20 += 8;
      uint64_t v21 = (float *)((char *)v21 + v14);
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_10035294C()
{
}

uint64_t sub_100352960(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

uint64_t sub_1003529E0(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  uint64_t v7 = sub_100343EEC(a1, a2, a3, a5);
  *(void *)uint64_t v7 = off_10049AF50;
  *(_DWORD *)(v7 + 128) = a4;
  if ((a4 & 3) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 64), "(symmetryType & (KERNEL_SYMMETRICAL | KERNEL_ASYMMETRICAL)) != 0", 64);
    sub_1002D2278(-215, v9, "SymmColumnFilter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/filter.cpp", 3314);
  }
  return a1;
}

void sub_100352A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100344808(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100352AC0(uint64_t a1)
{
  *(void *)a1 = off_10049A670;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  int v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }
  return a1;
}

void sub_100352B70(uint64_t a1)
{
  *(void *)a1 = off_10049A670;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 16);
  }
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*(int *)(a1 + 20) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 80);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 20));
  }
  int v5 = *(void **)(a1 + 88);
  if (v5 != (void *)(a1 + 96)) {
    j__free(v5);
  }

  operator delete();
}

unint64_t sub_100352C40(unint64_t result, uint64_t a2, double *a3, int a4, int a5, int a6)
{
  int v6 = *(_DWORD *)(result + 8);
  if (v6 >= 0) {
    int v7 = *(_DWORD *)(result + 8);
  }
  else {
    int v7 = v6 + 1;
  }
  uint64_t v8 = *(void *)(result + 32);
  uint64_t v9 = (uint64_t)v7 >> 1;
  uint64_t v10 = 8 * (v7 >> 1);
  uint64_t v11 = (double *)(v8 + v10);
  double v12 = *(double *)(result + 120);
  int v13 = (double **)(a2 + v10);
  if (*(unsigned char *)(result + 128))
  {
    if (!a5) {
      return result;
    }
    int v42 = a5 - 1;
    uint64_t v43 = a4;
    if (a6 <= 3)
    {
      if (a6 >= 1)
      {
        if (v6 >= 2)
        {
          uint64_t v112 = a2 + 8 * v9 - 8;
          uint64_t v113 = 8 * (v9 + 1);
          do
          {
            int v114 = v42;
            float v115 = *v13;
            double v116 = v12 + *v11 * **v13;
            uint64_t v117 = 8;
            float32x4x4_t v118 = (double **)v112;
            do
            {
              float32x4x4_t v119 = *v118--;
              unint64_t result = (unint64_t)v119;
              double v116 = v116 + v11[(unint64_t)v117 / 8] * (*v13[(unint64_t)v117 / 8] + *v119);
              v117 += 8;
            }
            while (v113 != v117);
            *a3 = v116;
            if (a6 != 1)
            {
              double v120 = v12 + *v11 * v115[1];
              uint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
              uint64_t v122 = 8;
              do
              {
                double v120 = v120 + v11[(unint64_t)v122 / 8] * (v13[(unint64_t)v122 / 8][1] + v13[v121][1]);
                v122 += 8;
                --v121;
              }
              while (v113 != v122);
              a3[1] = v120;
              if (a6 != 2)
              {
                double v123 = v12 + *v11 * v115[2];
                uint64_t v124 = 0x1FFFFFFFFFFFFFFFLL;
                uint64_t v125 = 8;
                do
                {
                  double v123 = v123 + v11[(unint64_t)v125 / 8] * (v13[(unint64_t)v125 / 8][2] + v13[v124][2]);
                  v125 += 8;
                  --v124;
                }
                while (v113 != v125);
                a3[2] = v123;
              }
            }
            a3 = (double *)((char *)a3 + a4);
            ++v13;
            --v42;
            v112 += 8;
          }
          while (v114);
        }
        else
        {
          uint64_t v44 = a3 + 2;
          do
          {
            uint64_t v45 = *v13;
            *(v44 - 2) = v12 + *v11 * **v13;
            if (a6 != 1)
            {
              *(v44 - 1) = v12 + *v11 * v45[1];
              if (a6 != 2) {
                *uint64_t v44 = v12 + *v11 * v45[2];
              }
            }
            ++v13;
            uint64_t v44 = (double *)((char *)v44 + a4);
            --a5;
          }
          while (a5);
        }
      }
      return result;
    }
    unint64_t v46 = (a6 - 4);
    if (v6 >= 2)
    {
      float64x2_t v93 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0);
      uint64_t v94 = a2 + 8 * v9 - 8;
      uint64_t v95 = 8 * (v9 + 1);
      do
      {
        unint64_t result = 0;
        int v96 = v42;
        float32x4_t v97 = *v13;
        uint64_t v98 = 4;
        do
        {
          unint64_t v99 = v98;
          uint64_t v100 = (float64x2_t *)&v97[result];
          float64x2_t v101 = vmlaq_n_f64(v93, *v100, *v11);
          float64x2_t v102 = vmlaq_n_f64(v93, v100[1], *v11);
          uint64_t v103 = 8;
          uint64_t v104 = (uint64_t *)v94;
          do
          {
            uint64_t v105 = (float64x2_t *)&v13[(unint64_t)v103 / 8][result];
            uint64_t v106 = *v104--;
            uint64_t v107 = (float64x2_t *)(v106 + 8 * result);
            double v108 = v11[(unint64_t)v103 / 8];
            float64x2_t v101 = vmlaq_n_f64(v101, vaddq_f64(*v105, *v107), v108);
            float64x2_t v102 = vmlaq_n_f64(v102, vaddq_f64(v105[1], v107[1]), v108);
            v103 += 8;
          }
          while (v95 != v103);
          *(float64x2_t *)&a3[result] = v101;
          *(float64x2_t *)((char *)a3 + ((8 * result) | 0x10)) = v102;
          result += 4;
          uint64_t v98 = v99 + 4;
        }
        while (result <= v46);
        if ((int)result < a6)
        {
          do
          {
            double v109 = v12 + *v11 * v97[v99];
            unint64_t result = 8;
            uint64_t v110 = (uint64_t *)v94;
            do
            {
              uint64_t v111 = *v110--;
              double v109 = v109
                   + *(double *)((char *)v11 + result)
                   * ((*(double **)((char *)v13 + result))[v99] + *(double *)(v111 + 8 * v99));
              result += 8;
            }
            while (v95 != result);
            a3[v99++] = v109;
          }
          while (v99 < a6);
        }
        a3 = (double *)((char *)a3 + v43);
        ++v13;
        --v42;
        v94 += 8;
      }
      while (v96);
      return result;
    }
    uint64_t v47 = 0;
    if ((unint64_t)(v46 & 0xFFFFFFFC) + 5 <= a6) {
      uint64_t v48 = a6;
    }
    else {
      uint64_t v48 = (v46 & 0xFFFFFFFC) + 5;
    }
    uint64_t v49 = (8 * (a6 - 4)) & 0x7FFFFFFE0;
    uint64_t v50 = 8 * v48 - v49;
    unint64_t v51 = v8 + 8 * v9 + 8;
    unint64_t v52 = v48 - (v46 & 0xFFFFFFFC) - 4;
    uint64_t v53 = v49 + 32;
    unint64_t result = (v46 >> 2) + 1;
    float64x2_t v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0);
    uint64_t v55 = v48 & 3;
    unint64_t v56 = a3;
    while (1)
    {
      int v57 = v42;
      uint64_t v58 = v47 * a4;
      uint64_t v59 = *v13;
      if (v46 < 0xC) {
        break;
      }
      unint64_t v60 = 0;
      unint64_t v63 = (double *)((char *)a3 + v53 + v58);
      BOOL v64 = v56 >= (double *)((char *)v59 + v53) || v59 >= v63;
      char v65 = !v64;
      BOOL v64 = v11 >= v63;
      uint64_t v62 = 4;
      unint64_t v61 = 0;
      if (!v64 && (unint64_t)v56 < v51) {
        goto LABEL_71;
      }
      if (v65) {
        goto LABEL_71;
      }
      uint64_t v67 = 0;
      unint64_t v68 = result & 0x7FFFFFFE;
      do
      {
        uint64_t v69 = &v59[v67];
        float64x2x4_t v126 = vld4q_f64(v69);
        v127.val[0] = vmlaq_n_f64(v54, v126.val[0], *v11);
        v127.val[1] = vmlaq_n_f64(v54, v126.val[1], *v11);
        v127.val[2] = vmlaq_n_f64(v54, v126.val[2], *v11);
        v127.val[3] = vmlaq_n_f64(v54, v126.val[3], *v11);
        uint64_t v70 = &v56[v67];
        vst4q_f64(v70, v127);
        v67 += 8;
        v68 -= 2;
      }
      while (v68);
      unint64_t v60 = result & 0x7FFFFFFE;
      uint64_t v62 = (4 * result) | 4;
      unint64_t v61 = 4 * v60;
      unint64_t v71 = v60 - 1;
      uint64_t v72 = v61;
      if (result != v60) {
        goto LABEL_71;
      }
LABEL_73:
      if ((int)v61 < a6)
      {
        if (v52 >= 0xE)
        {
          uint64_t v80 = 4 * v71;
          unint64_t v81 = (char *)a3 + v58 + v80 * 8 + 32;
          uint64_t v82 = (double *)((char *)a3 + v50 + v58 + v80 * 8);
          BOOL v83 = &v59[v80];
          unint64_t v84 = (unint64_t)&v59[v80 + 4];
          BOOL v86 = v81 < (char *)v83 + v50 && v84 < (unint64_t)v82;
          if (v11 >= v82 || (unint64_t)v81 >= v51)
          {
            if (v86)
            {
              unint64_t v79 = v72;
            }
            else
            {
              unint64_t v79 = v72 + v52 - v55;
              float64x2_t v88 = vld1q_dup_f64(v11);
              uint64_t v89 = v72;
              unint64_t v90 = v52 - v55;
              do
              {
                float64x2_t v91 = vmlaq_f64(v54, *(float64x2_t *)&v59[v89 + 2], v88);
                uint64_t v92 = (float64x2_t *)&v56[v89];
                *uint64_t v92 = vmlaq_f64(v54, *(float64x2_t *)&v59[v89], v88);
                v92[1] = v91;
                v89 += 4;
                v90 -= 4;
              }
              while (v90);
              if (!v55) {
                goto LABEL_53;
              }
            }
          }
          else
          {
            unint64_t v79 = v72;
          }
        }
        else
        {
          unint64_t v79 = v72;
        }
        do
        {
          v56[v79] = v12 + *v11 * v59[v79];
          ++v79;
        }
        while (v79 < a6);
      }
LABEL_53:
      unint64_t v56 = (double *)((char *)v56 + a4);
      ++v13;
      int v42 = v57 - 1;
      ++v47;
      if (!v57) {
        return result;
      }
    }
    unint64_t v60 = 0;
    unint64_t v61 = 0;
    uint64_t v62 = 4;
LABEL_71:
    unint64_t v71 = v60 - 1;
    uint64_t v72 = v62 - 4;
    uint64_t v73 = v61;
    float v74 = v59 + 3;
    do
    {
      double v75 = v12 + *v11 * v74[v73 - 2];
      double v76 = v12 + *v11 * v74[v73 - 1];
      double v77 = v12 + *v11 * v74[v73];
      uint64_t v78 = &v56[v73];
      *uint64_t v78 = v12 + *v11 * v59[v73];
      v78[1] = v75;
      v61 += 4;
      v78[2] = v76;
      v78[3] = v77;
      ++v71;
      v72 += 4;
      v73 += 4;
    }
    while (v61 <= v46);
    goto LABEL_73;
  }
  if (a5)
  {
    uint64_t v14 = a4;
    uint64_t v15 = a6 - 4;
    unint64_t v16 = 3;
    if (v15 > 3) {
      unint64_t v16 = a6 - 4;
    }
    uint64_t v17 = (v16 >> 2) + 1;
    int64x2_t v18 = vdupq_lane_s64(*(uint64_t *)&v12, 0);
    unint64_t result = a2 + 8 * v9 - 8;
    uint64_t v19 = 8 * (v9 + 1);
    uint64_t v20 = a3 + 8;
    do
    {
      if (a6 < 4)
      {
        uint64_t v21 = 0;
        if (a6 <= 0) {
          goto LABEL_9;
        }
        goto LABEL_27;
      }
      if (v6 >= 2)
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t v22 = 8;
          uint64_t v23 = (uint64_t *)result;
          float64x2_t v24 = (float64x2_t)v18;
          float64x2_t v25 = (float64x2_t)v18;
          do
          {
            uint64_t v26 = (float64x2_t *)&v13[(unint64_t)v22 / 8][v21];
            uint64_t v27 = *v23--;
            float32x4_t v28 = (float64x2_t *)(v27 + 8 * v21);
            double v29 = v11[(unint64_t)v22 / 8];
            float64x2_t v24 = vmlaq_n_f64(v24, vsubq_f64(*v26, *v28), v29);
            float64x2_t v25 = vmlaq_n_f64(v25, vsubq_f64(v26[1], v28[1]), v29);
            v22 += 8;
          }
          while (v19 != v22);
          *(float64x2_t *)&a3[v21] = v24;
          *(float64x2_t *)((char *)a3 + ((8 * v21) | 0x10)) = v25;
          v21 += 4;
        }
        while (v21 <= v15);
      }
      else
      {
        if (v16 < 0xC)
        {
          uint64_t v21 = 0;
LABEL_24:
          uint64_t v32 = &a3[v21];
          do
          {
            *uint64_t v32 = v12;
            v32[1] = v12;
            v32[2] = v12;
            v32[3] = v12;
            v21 += 4;
            v32 += 4;
          }
          while (v21 <= v15);
          goto LABEL_26;
        }
        uint64_t v30 = v17 & 0x3FFFFFFC;
        uint64_t v31 = (int64x2_t *)v20;
        do
        {
          v31[-4] = v18;
          v31[-3] = v18;
          v31[-2] = v18;
          v31[-1] = v18;
          *uint64_t v31 = v18;
          v31[1] = v18;
          int v31[2] = v18;
          v31[3] = v18;
          v31 += 8;
          v30 -= 4;
        }
        while (v30);
        uint64_t v21 = 4 * (v17 & 0x3FFFFFFC);
        if (v17 != (v17 & 0x3FFFFFFC)) {
          goto LABEL_24;
        }
      }
LABEL_26:
      uint64_t v21 = v21;
      if ((int)v21 >= a6) {
        goto LABEL_9;
      }
LABEL_27:
      if (v6 >= 2)
      {
        do
        {
          uint64_t v35 = 8;
          uint64_t v36 = (uint64_t *)result;
          double v37 = v12;
          do
          {
            uint64_t v38 = *v36--;
            double v37 = v37
                + v11[(unint64_t)v35 / 8] * (v13[(unint64_t)v35 / 8][v21] - *(double *)(v38 + 8 * v21));
            v35 += 8;
          }
          while (v19 != v35);
          a3[v21++] = v37;
        }
        while (v21 != a6);
        goto LABEL_9;
      }
      unint64_t v33 = a6 - v21;
      if (v33 >= 4)
      {
        uint64_t v34 = (v33 & 0xFFFFFFFFFFFFFFFCLL) + v21;
        uint64_t v39 = v21;
        unint64_t v40 = v33 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v41 = (int64x2_t *)&a3[v39];
          *uint64_t v41 = v18;
          v41[1] = v18;
          v39 += 4;
          v40 -= 4;
        }
        while (v40);
        if (v33 == (v33 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v34 = v21;
      }
      do
        a3[v34++] = v12;
      while (a6 != v34);
LABEL_9:
      a3 = (double *)((char *)a3 + v14);
      ++v13;
      result += 8;
      uint64_t v20 = (double *)((char *)v20 + v14);
      --a5;
    }
    while (a5);
  }
  return result;
}

void sub_1003533C8()
{
}

uint64_t sub_1003533DC(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_100353460()
{
}

uint64_t sub_100353474(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

double sub_1003534F4(uint64_t a1, float *a2, int a3)
{
  sub_1002D6AE8(v74, &off_10049B008);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v66 = *(_OWORD *)v6;
    long long v67 = v7;
    long long v68 = *(_OWORD *)(v6 + 32);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v69 = *(void *)(v6 + 48);
    uint64_t v70 = v8;
    unint64_t v71 = (char *)&v66 + 8;
    uint64_t v72 = v73;
    v73[0] = 0;
    v73[1] = 0;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v66) = 0;
      sub_1002931A8((uint64_t)&v66, v6);
    }
    else
    {
      uint64_t v9 = *(void **)(v6 + 72);
      uint64_t v10 = v72;
      *(void *)uint64_t v72 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v66);
  }
  int v11 = sub_100298CD4((unsigned int *)&v66, 2, -1, 1);
  if (v11 < 0 || (v66 & 6) != 4)
  {
    v65[0] = 0;
    v65[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v65, 40), "total >= 0 && (depth == 4 || depth == 5)", 40);
    sub_1002D2278(-215, v65, "pointPolygonTest", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/geometry.cpp", 103);
  }
  if (!v11)
  {
    if (a3) {
      double v25 = -1.79769313e308;
    }
    else {
      double v25 = -1.0;
    }
    uint64_t v29 = v70;
    if (v70) {
      goto LABEL_124;
    }
    goto LABEL_126;
  }
  int v12 = v66 & 7;
  float v13 = *a2;
  float v14 = a2[1];
  uint64_t v15 = (int32x2_t *)v67;
  if (v12 != 5 && !a3)
  {
    uint64_t v16 = (uint64_t)rintf(v13);
    uint64_t v17 = (uint64_t)rintf(v14);
    if (v13 == (float)(int)v16 && v14 == (float)(int)v17)
    {
      char v19 = 0;
      if (v11 >= 1)
      {
        uint64_t v20 = (int *)(v67 + 8 * (v11 - 1));
        int v21 = *v20;
        int v22 = v20[1];
        uint64_t v23 = v11;
        float64x2_t v24 = (int *)(v67 + 4);
        double v25 = 0.0;
        do
        {
          int v26 = *(v24 - 1);
          int v27 = *v24;
          if ((int)v17 >= v22 != *v24 > (int)v17 || (int)v16 > v21 && v26 < (int)v16)
          {
            if (v27 == v17
              && (v26 == v16
               || v17 == v22 && ((int)v16 >= v21 && v26 >= (int)v16 || v26 <= (int)v16 && (int)v16 <= v21)))
            {
              goto LABEL_123;
            }
          }
          else
          {
            uint64_t v28 = (v26 - v21) * (uint64_t)((int)v17 - v22) - (v27 - v22) * (uint64_t)((int)v16 - v21);
            if (!v28)
            {
LABEL_134:
              double v25 = 0.0;
              uint64_t v29 = v70;
              if (v70) {
                goto LABEL_124;
              }
              goto LABEL_126;
            }
            if (v27 < v22) {
              uint64_t v28 = -v28;
            }
            if (v28 > 0) {
              ++v19;
            }
          }
          v24 += 2;
          int v22 = v27;
          int v21 = v26;
          --v23;
        }
        while (v23);
      }
      BOOL v43 = (v19 & 1) == 0;
      goto LABEL_112;
    }
  }
  uint64_t v30 = v11 - 1;
  if (v12 == 5)
  {
    float32x2_t v31 = *(float32x2_t *)(v67 + 8 * v30);
    BOOL v32 = v11 < 1;
    char v33 = 0;
    if ((a3 & 1) == 0)
    {
LABEL_46:
      if (!v32)
      {
        uint64_t v34 = v11;
        double v25 = 0.0;
        do
        {
          float32x2_t v36 = v31;
          if (v12 == 5)
          {
            float32x2_t v31 = (float32x2_t)*v15;
            float v37 = v36.f32[1];
            LODWORD(v38) = HIDWORD(*(unint64_t *)v15);
            if (v36.f32[1] <= v14 && v38 <= v14) {
              goto LABEL_72;
            }
          }
          else
          {
            float32x2_t v31 = vcvt_f32_s32(*v15);
            float v37 = v36.f32[1];
            float v38 = v31.f32[1];
            if (v36.f32[1] <= v14 && v31.f32[1] <= v14) {
              goto LABEL_72;
            }
          }
          BOOL v41 = v37 <= v14 || v38 <= v14;
          if (v41 && (v36.f32[0] >= v13 || v31.f32[0] >= v13))
          {
            double v42 = (float)(v14 - v37) * vsub_f32(v31, v36).f32[0] - (float)(v13 - v36.f32[0]) * (float)(v38 - v37);
            if (v42 == 0.0) {
              goto LABEL_134;
            }
            if (v38 < v37) {
              double v42 = -v42;
            }
            if (v42 > 0.0) {
              ++v33;
            }
            goto LABEL_53;
          }
LABEL_72:
          if (v14 == v38)
          {
            if (v13 == v31.f32[0]) {
              goto LABEL_123;
            }
            if (v14 == v37)
            {
              if (v36.f32[0] <= v13 && v13 <= v31.f32[0]) {
                goto LABEL_123;
              }
              if (v31.f32[0] <= v13 && v13 <= v36.f32[0]) {
                goto LABEL_123;
              }
            }
          }
LABEL_53:
          ++v15;
          --v34;
        }
        while (v34);
      }
      BOOL v43 = (v33 & 1) == 0;
LABEL_112:
      if (v43) {
        int v59 = -1;
      }
      else {
        int v59 = 1;
      }
      double v25 = (double)v59;
      uint64_t v29 = v70;
      if (v70) {
        goto LABEL_124;
      }
      goto LABEL_126;
    }
  }
  else
  {
    float32x2_t v31 = vcvt_f32_s32(*(int32x2_t *)(v67 + 8 * v30));
    BOOL v32 = v11 < 1;
    char v33 = 0;
    if ((a3 & 1) == 0) {
      goto LABEL_46;
    }
  }
  if (v32)
  {
    double v60 = 3.40282347e38;
    goto LABEL_120;
  }
  uint64_t v44 = v11;
  double v45 = 1.0;
  double v46 = 3.40282347e38;
  while (1)
  {
    float32x2_t v49 = v31;
    if (v12 == 5) {
      float32x2_t v31 = (float32x2_t)*v15;
    }
    else {
      float32x2_t v31 = vcvt_f32_s32(*v15);
    }
    double v50 = vsub_f32(v31, v49).f32[0];
    float v51 = v31.f32[1] - v49.f32[1];
    double v52 = (float)(v31.f32[1] - v49.f32[1]);
    double v53 = (float)(v13 - v49.f32[0]);
    double v54 = (float)(v14 - v49.f32[1]);
    if (v54 * v52 + v53 * v50 <= 0.0)
    {
      double v57 = v54 * v54 + v53 * v53;
      double v58 = 1.0;
      if (v45 * v57 >= v46 * 1.0) {
        goto LABEL_104;
      }
      goto LABEL_103;
    }
    double v55 = (float)(v13 - v31.f32[0]);
    double v56 = (float)(v14 - v31.f32[1]);
    if (v56 * v52 + v55 * v50 < 0.0) {
      break;
    }
    double v57 = v56 * v56 + v55 * v55;
    double v58 = 1.0;
    if (v45 * v57 < v46 * 1.0) {
      goto LABEL_103;
    }
LABEL_104:
    if ((v49.f32[1] > v14 || v31.f32[1] > v14)
      && (v49.f32[1] <= v14 || v31.f32[1] <= v14)
      && (v49.f32[0] >= v13 || v31.f32[0] >= v13))
    {
      double v47 = v54 * v50 - v53 * v52;
      double v48 = -v47;
      if (v51 >= 0.0) {
        double v48 = v47;
      }
      if (v48 > 0.0) {
        ++v33;
      }
    }
    ++v15;
    if (!--v44) {
      goto LABEL_119;
    }
  }
  double v57 = (v54 * v50 - v53 * v52) * (v54 * v50 - v53 * v52);
  double v58 = v52 * v52 + v50 * v50;
  if (v45 * v57 >= v46 * v58) {
    goto LABEL_104;
  }
LABEL_103:
  double v46 = v57;
  double v45 = v58;
  if (v57 != 0.0) {
    goto LABEL_104;
  }
  double v46 = v57;
  double v45 = v58;
LABEL_119:
  double v60 = v46 / v45;
LABEL_120:
  double v61 = sqrt(v60);
  if (v33) {
    double v25 = v61;
  }
  else {
    double v25 = -v61;
  }
LABEL_123:
  uint64_t v29 = v70;
  if (v70)
  {
LABEL_124:
    if (atomic_fetch_add((atomic_uint *volatile)(v29 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v66);
    }
  }
LABEL_126:
  uint64_t v70 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  if (SDWORD1(v66) >= 1)
  {
    uint64_t v62 = 0;
    unint64_t v63 = v71;
    do
      *(_DWORD *)&v63[4 * v62++] = 0;
    while (v62 < SDWORD1(v66));
  }
  if (v72 != v73) {
    j__free(v72);
  }
  if (v75) {
    sub_1002D6888(v74);
  }
  return v25;
}

void sub_100353AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1002D1A1C(&a9);
  sub_1000094F4((uint64_t)&a11);
  sub_10020FA00(v11 - 64);
  _Unwind_Resume(a1);
}

void sub_100353B38(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_100353B4C(int32x2_t **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t *a7, float **a8, unsigned __int8 a9, char a10)
{
  sub_1002D6AE8(v617, &off_10049B028);
  if (sub_10029A230((_DWORD *)a4) == 0x10000)
  {
    uint64_t v18 = *(void *)(a4 + 8);
    long long v19 = *(_OWORD *)(v18 + 16);
    long long v609 = *(_OWORD *)v18;
    long long v610 = v19;
    long long v611 = *(_OWORD *)(v18 + 32);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v612 = *(void *)(v18 + 48);
    uint64_t v613 = v20;
    int8x16x2_t v614 = (char *)&v609 + 8;
    float32x4x2_t v615 = v616;
    v616[0] = 0;
    v616[1] = 0;
    if (v20) {
      atomic_fetch_add((atomic_uint *volatile)(v20 + 20), 1u);
    }
    if (*(int *)(v18 + 4) > 2)
    {
      DWORD1(v609) = 0;
      sub_1002931A8((uint64_t)&v609, v18);
    }
    else
    {
      int v21 = *(void **)(v18 + 72);
      int v22 = v615;
      *(void *)float32x4x2_t v615 = *v21;
      v22[1] = v21[1];
    }
  }
  else
  {
    sub_100299554(a4, -1, (uint64_t)&v609);
  }
  if ((int)a6 < 1 || !a7)
  {
    long long v619 = 0uLL;
    uint64_t v23 = sub_1002D19D8(&v619, 20);
    *(_DWORD *)(v23 + 16) = 1702521171;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)"dims > 0 && histSize";
    sub_1002D2278(-215, (uint64_t *)&v619, "calcHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 1457);
  }
  if (sub_10029A230((_DWORD *)a5) == 0x10000)
  {
    uint64_t v24 = *(void *)(a5 + 8);
    long long v25 = *(_OWORD *)(v24 + 16);
    long long v619 = *(_OWORD *)v24;
    long long v620 = v25;
    long long v621 = *(_OWORD *)(v24 + 32);
    uint64_t v26 = *(void *)(v24 + 56);
    uint64_t v622 = *(void *)(v24 + 48);
    uint64_t v623 = v26;
    uint64_t v624 = (char *)&v619 + 8;
    uint64_t v625 = v626;
    v626[1] = 0;
    v626[0] = 0;
    if (v26) {
      atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
    }
    if (*(int *)(v24 + 4) > 2)
    {
      DWORD1(v619) = 0;
      sub_1002931A8((uint64_t)&v619, v24);
    }
    else
    {
      int v27 = *(void **)(v24 + 72);
      uint64_t v28 = v625;
      *(void *)uint64_t v625 = *v27;
      v28[1] = v27[1];
    }
  }
  else
  {
    sub_100299554(a5, -1, (uint64_t)&v619);
  }
  uint64_t v29 = v620;
  if (v623 && atomic_fetch_add((atomic_uint *volatile)(v623 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v619);
  }
  uint64_t v623 = 0;
  long long v620 = 0u;
  long long v621 = 0u;
  if (SDWORD1(v619) >= 1)
  {
    uint64_t v30 = 0;
    float32x2_t v31 = v624;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < SDWORD1(v619));
  }
  if (v625 != v626) {
    j__free(v625);
  }
  sub_100295520((int *)a5, a6, a7, 5u, 0xFFFFFFFF, 0, 0);
  if (sub_10029A230((_DWORD *)a5) == 0x10000)
  {
    uint64_t v32 = *(void *)(a5 + 8);
    long long v33 = *(_OWORD *)(v32 + 16);
    long long v601 = *(_OWORD *)v32;
    long long v602 = v33;
    long long v603 = *(_OWORD *)(v32 + 32);
    uint64_t v34 = *(void *)(v32 + 56);
    uint64_t v604 = *(void *)(v32 + 48);
    uint64_t v605 = v34;
    float32x4x2_t v606 = (int *)&v601 + 2;
    float32x4x2_t v607 = v608;
    v608[0] = 0;
    v608[1] = 0;
    if (v34) {
      atomic_fetch_add((atomic_uint *volatile)(v34 + 20), 1u);
    }
    if (*(int *)(v32 + 4) > 2)
    {
      DWORD1(v601) = 0;
      sub_1002931A8((uint64_t)&v601, v32);
    }
    else
    {
      uint64_t v35 = *(void **)(v32 + 72);
      float32x2_t v36 = v607;
      *(void *)float32x4x2_t v607 = *v35;
      v36[1] = v35[1];
    }
  }
  else
  {
    sub_100299554(a5, -1, (uint64_t)&v601);
  }
  long long v593 = v601;
  long long v594 = v602;
  if (v29 == (void)v602) {
    char v37 = a10;
  }
  else {
    char v37 = 0;
  }
  long long v595 = v603;
  uint64_t v596 = v604;
  uint64_t v597 = v605;
  float32x4x2_t v598 = (char *)&v593 + 8;
  int8x16x2_t v599 = v600;
  v600[0] = 0;
  v600[1] = 0;
  if (v605)
  {
    atomic_fetch_add((atomic_uint *volatile)(v605 + 20), 1u);
    if (SDWORD1(v601) <= 2)
    {
LABEL_38:
      float v38 = v607;
      uint64_t v39 = v599;
      *(void *)int8x16x2_t v599 = *(void *)v607;
      v39[1] = v38[1];
      goto LABEL_41;
    }
  }
  else if (SDWORD1(v601) <= 2)
  {
    goto LABEL_38;
  }
  DWORD1(v593) = 0;
  sub_1002931A8((uint64_t)&v593, (uint64_t)&v601);
LABEL_41:
  LODWORD(v593) = v593 & 0xFFFFF000 | 4;
  if (v37)
  {
    LODWORD(v619) = 33619968;
    *((void *)&v619 + 1) = &v593;
    *(void *)&long long v620 = 0;
    sub_10024011C((unsigned int *)&v601, (uint64_t)&v619, 4, 1.0, 0.0);
  }
  else
  {
    long long v619 = 0u;
    long long v620 = 0u;
    sub_100255390((uint64_t)&v601, (uint64_t)&v619);
  }
  float32x4x2_t v590 = 0;
  float32x4x2_t v591 = 0;
  uint64_t v592 = 0;
  float32x4x2_t v587 = 0;
  float32x4x2_t v588 = 0;
  uint64_t v589 = 0;
  int8x16x2_t v584 = 0;
  int8x16x2_t v585 = 0;
  uint64_t v586 = 0;
  uint64_t v583 = 0;
  if ((void)v610)
  {
    if (SDWORD1(v609) >= 3)
    {
      BOOL v41 = (int *)(v614 + 4);
      uint64_t v42 = 1;
      uint64_t v43 = DWORD1(v609) & 0xFFFFFFFE;
      uint64_t v44 = 1;
      do
      {
        v42 *= *(v41 - 1);
        v44 *= *v41;
        v41 += 2;
        v43 -= 2;
      }
      while (v43);
      uint64_t v40 = v44 * v42;
      unint64_t v45 = DWORD1(v609) - (unint64_t)(DWORD1(v609) & 0xFFFFFFFE);
      if (v45)
      {
        double v46 = &v614[(4 * DWORD1(v609)) & 0x3FFFFFFF8];
        do
        {
          uint64_t v47 = *(int *)v46;
          v46 += 4;
          v40 *= v47;
          --v45;
        }
        while (v45);
      }
    }
    else
    {
      uint64_t v40 = SHIDWORD(v609) * (uint64_t)SDWORD2(v609);
    }
    if (DWORD1(v609) && v40 && (v609 & 0xFFF) != 0)
    {
      long long v619 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&v619, 72), "mask.empty() || mask.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 72);
      sub_1002D2278(-215, (uint64_t *)&v619, "calcHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 1484);
    }
  }
  sub_100356588(a1, a2, a3, (int *)&v609, a6, v606, a8, a9, &v590, (uint64_t *)&v587, (uint64_t)&v583, (uint64_t *)&v584);
  double v48 = (double *)v584;
  if (a9) {
    float32x2_t v49 = (char *)v584;
  }
  else {
    float32x2_t v49 = 0;
  }
  int v50 = *(_DWORD *)a1 & 7;
  if (v50 == 5)
  {
    int8x16x2_t v576 = v49;
    float32x4x2_t v578 = a8;
    int v73 = HIDWORD(v583);
    float v74 = (char *)v590;
    int v75 = (int *)v587;
    double v76 = (_DWORD *)v594;
    uint64_t v77 = 8 * (int)a6;
    uint64_t v78 = *(void *)((char *)v590 + v77);
    uint64_t v581 = *(int *)((char *)v587 + v77 + 4);
    __src = v599;
    int v79 = v583;
    memcpy(&__dst, v598, 4 * a6);
    memcpy(&v619, __src, 8 * a6);
    if (a9)
    {
      switch(a6)
      {
        case 1u:
          if (v73)
          {
            double v355 = *v48;
            double v356 = v48[1];
            unsigned int v357 = __dst;
            BOOL v358 = *(float **)v74;
            uint64_t v359 = v75[1];
            uint64_t v360 = 4 * *v75;
            do
            {
              if (v78)
              {
                if (v79 >= 1)
                {
                  for (uint64_t i = 0; i != v79; ++i)
                  {
                    if (*(unsigned char *)(v78 + i))
                    {
                      int v362 = (int)(v356 + *v358 * v355) - (v356 + *v358 * v355 < (double)(int)(v356 + *v358 * v355));
                      if (v362 < v357) {
                        ++v76[v362];
                      }
                    }
                    BOOL v358 = (float *)((char *)v358 + v360);
                  }
                }
              }
              else if (v79 >= 1)
              {
                int v363 = v79;
                do
                {
                  int v364 = (int)(v356 + *v358 * v355) - (v356 + *v358 * v355 < (double)(int)(v356 + *v358 * v355));
                  if (v364 < v357) {
                    ++v76[v364];
                  }
                  BOOL v358 = (float *)((char *)v358 + v360);
                  --v363;
                }
                while (v363);
              }
              v358 += v359;
              v78 += v581;
              --v73;
            }
            while (v73);
          }
          break;
        case 2u:
          if (v73)
          {
            double v365 = *v48;
            double v366 = v48[1];
            double v367 = v48[2];
            double v368 = v48[3];
            unsigned int v369 = __dst;
            unsigned int v370 = v644;
            uint64_t v371 = v619;
            uint64_t v372 = v75[3];
            uint64_t v373 = v75[1];
            uint64_t v374 = 4 * v75[2];
            uint64_t v375 = 4 * *v75;
            int32x4_t v377 = *(float **)v74;
            int32x4_t v376 = (float *)*((void *)v74 + 1);
            do
            {
              if (v78)
              {
                if (v79 >= 1)
                {
                  for (uint64_t j = 0; j != v79; ++j)
                  {
                    if (*(unsigned char *)(v78 + j))
                    {
                      int v379 = (int)(v366 + *v377 * v365) - (v366 + *v377 * v365 < (double)(int)(v366 + *v377 * v365));
                      int v380 = (int)(v368 + *v376 * v367) - (v368 + *v376 * v367 < (double)(int)(v368 + *v376 * v367));
                      if (v379 < v369 && v380 < v370) {
                        ++*(_DWORD *)((char *)&v76[v380] + v371 * v379);
                      }
                    }
                    int32x4_t v376 = (float *)((char *)v376 + v374);
                    int32x4_t v377 = (float *)((char *)v377 + v375);
                  }
                }
              }
              else if (v79 >= 1)
              {
                int v382 = v79;
                do
                {
                  int v383 = (int)(v366 + *v377 * v365) - (v366 + *v377 * v365 < (double)(int)(v366 + *v377 * v365));
                  int v384 = (int)(v368 + *v376 * v367) - (v368 + *v376 * v367 < (double)(int)(v368 + *v376 * v367));
                  if (v383 < v369 && v384 < v370) {
                    ++*(_DWORD *)((char *)&v76[v384] + v371 * v383);
                  }
                  int32x4_t v376 = (float *)((char *)v376 + v374);
                  int32x4_t v377 = (float *)((char *)v377 + v375);
                  --v382;
                }
                while (v382);
              }
              v377 += v373;
              v78 += v581;
              v376 += v372;
              --v73;
            }
            while (v73);
          }
          break;
        case 3u:
          if (v73)
          {
            double v80 = *v48;
            double v81 = v48[1];
            double v82 = v48[2];
            double v83 = v48[3];
            double v84 = v48[4];
            double v85 = v48[5];
            unsigned int v86 = __dst;
            unsigned int v87 = v644;
            unsigned int v88 = v645;
            long long v89 = v619;
            unint64_t v90 = (float *)*((void *)v74 + 1);
            float64x2_t v91 = (float *)*((void *)v74 + 2);
            uint64_t v92 = v75[5];
            uint64_t v93 = v75[3];
            uint64_t v94 = v75[1];
            uint64_t v95 = 4 * v75[4];
            uint64_t v96 = 4 * v75[2];
            uint64_t v97 = 4 * *v75;
            uint64_t v98 = *(float **)v74;
            do
            {
              if (v78)
              {
                if (v79 >= 1)
                {
                  uint64_t v99 = 0;
                  do
                  {
                    if (*(unsigned char *)(v78 + v99))
                    {
                      int v100 = (int)(v81 + *v98 * v80) - (v81 + *v98 * v80 < (double)(int)(v81 + *v98 * v80));
                      int v101 = (int)(v83 + *v90 * v82) - (v83 + *v90 * v82 < (double)(int)(v83 + *v90 * v82));
                      int v102 = (int)(v85 + *v91 * v84) - (v85 + *v91 * v84 < (double)(int)(v85 + *v91 * v84));
                      BOOL v103 = v100 >= v86 || v101 >= v87;
                      if (!v103 && v102 < v88)
                      {
                        uint64_t v105 = (char *)v76 + v89 * v100 + *((void *)&v89 + 1) * v101;
                        ++*(_DWORD *)&v105[4 * v102];
                      }
                    }
                    ++v99;
                    float64x2_t v91 = (float *)((char *)v91 + v95);
                    unint64_t v90 = (float *)((char *)v90 + v96);
                    uint64_t v98 = (float *)((char *)v98 + v97);
                  }
                  while (v79 != v99);
                }
              }
              else if (v79 >= 1)
              {
                int v106 = v79;
                do
                {
                  int v107 = (int)(v81 + *v98 * v80) - (v81 + *v98 * v80 < (double)(int)(v81 + *v98 * v80));
                  int v108 = (int)(v83 + *v90 * v82) - (v83 + *v90 * v82 < (double)(int)(v83 + *v90 * v82));
                  int v109 = (int)(v85 + *v91 * v84) - (v85 + *v91 * v84 < (double)(int)(v85 + *v91 * v84));
                  if (v107 < v86 && v108 < v87 && v109 < v88)
                  {
                    uint64_t v112 = (char *)v76 + v89 * v107 + *((void *)&v89 + 1) * v108;
                    ++*(_DWORD *)&v112[4 * v109];
                  }
                  float64x2_t v91 = (float *)((char *)v91 + v95);
                  unint64_t v90 = (float *)((char *)v90 + v96);
                  uint64_t v98 = (float *)((char *)v98 + v97);
                  --v106;
                }
                while (v106);
              }
              v98 += v94;
              v90 += v93;
              v78 += v581;
              v91 += v92;
              --v73;
            }
            while (v73);
          }
          break;
        default:
          if (v73)
          {
            uint64_t v386 = a6 & 7;
            if (!v386) {
              uint64_t v386 = 8;
            }
            uint64_t v387 = a6 - v386;
            int32x2_t v388 = v74 + 32;
            do
            {
              if (v78)
              {
                if (v79 >= 1)
                {
                  for (uint64_t k = 0; k != v79; ++k)
                  {
                    LODWORD(v390) = 0;
                    uint64_t v391 = v76;
                    if (*(unsigned char *)(v78 + k))
                    {
                      uint64_t v390 = 0;
                      unint64_t v392 = (double *)(v576 + 8);
                      uint64_t v393 = v75;
                      uint64_t v391 = v76;
                      while (1)
                      {
                        unint64_t v394 = *(float **)&v74[8 * v390];
                        double v395 = *v392 + *v394 * *(v392 - 1);
                        int v396 = (int)v395 - (v395 < (double)(int)v395);
                        if (v396 >= *(&__dst + v390)) {
                          break;
                        }
                        uint64_t v397 = *v393;
                        v393 += 2;
                        *(void *)&v74[8 * v390] = &v394[v397];
                        uint64_t v391 = (_DWORD *)((char *)v391 + *((void *)&v619 + v390++) * v396);
                        v392 += 2;
                        if (a6 == v390) {
                          goto LABEL_388;
                        }
                      }
                    }
                    if (v390 == a6)
                    {
LABEL_388:
                      ++*v391;
                    }
                    else if ((int)v390 < (int)a6)
                    {
                      unint64_t v398 = v390;
                      unint64_t v399 = a6 - (unint64_t)v390;
                      if (v399 > 8)
                      {
                        unint64_t v400 = ~(unint64_t)v390 + a6;
                        if ((~v390 & 0x7FFFFFFFu) >= (v400 & 0x7FFFFFFF) && !(v400 >> 31))
                        {
                          if ((v399 & 7) != 0) {
                            uint64_t v401 = v399 & 7;
                          }
                          else {
                            uint64_t v401 = 8;
                          }
                          unint64_t v402 = v399 - v401 + v390;
                          uint64_t v403 = v398 - a6 + v401;
                          uint64_t v404 = 2 * v398;
                          uint64_t v405 = (int64x2_t *)&v388[8 * v398];
                          do
                          {
                            uint64_t v406 = (const float *)&v75[v404 & 0xFFFFFFFE];
                            unsigned long long v407 = (unsigned __int128)vld2q_f32(v406);
                            uint64_t v408 = (const float *)&v75[(v404 + 8) & 0xFFFFFFFE];
                            unsigned long long v409 = (unsigned __int128)vld2q_f32(v408);
                            int64x2_t v410 = vaddq_s64(v405[-2], vshll_n_s32(*(int32x2_t *)&v407, 2uLL));
                            int64x2_t v411 = vaddq_s64(v405[-1], vshll_high_n_s32((int32x4_t)v407, 2uLL));
                            int64x2_t v412 = vaddq_s64(*v405, vshll_n_s32(*(int32x2_t *)&v409, 2uLL));
                            int64x2_t v413 = vaddq_s64(v405[1], vshll_high_n_s32((int32x4_t)v409, 2uLL));
                            v405[-2] = v410;
                            v405[-1] = v411;
                            *uint64_t v405 = v412;
                            v405[1] = v413;
                            v405 += 4;
                            v404 += 16;
                            v403 += 8;
                          }
                          while (v403);
                          unint64_t v398 = v402;
                        }
                      }
                      unint64_t v414 = a6 - v398;
                      uint64_t v415 = 2 * v398;
                      int32x4_t v416 = &v74[8 * v398];
                      do
                      {
                        *(void *)v416 += 4 * v75[v415 & 0xFFFFFFFE];
                        v416 += 8;
                        v415 += 2;
                        --v414;
                      }
                      while (v414);
                    }
                  }
                }
              }
              else if (v79 >= 1)
              {
                for (int m = 0; m != v79; ++m)
                {
                  uint64_t v418 = 0;
                  int32x4_t v419 = (double *)(v576 + 8);
                  int v420 = v75;
                  int v421 = v76;
                  while (1)
                  {
                    int32x2_t v422 = *(float **)&v74[8 * v418];
                    double v423 = *v419 + *v422 * *(v419 - 1);
                    int v424 = (int)v423 - (v423 < (double)(int)v423);
                    if (v424 >= *(&__dst + v418)) {
                      break;
                    }
                    uint64_t v425 = *v420;
                    v420 += 2;
                    *(void *)&v74[8 * v418] = &v422[v425];
                    int v421 = (_DWORD *)((char *)v421 + *((void *)&v619 + v418++) * v424);
                    v419 += 2;
                    if (a6 == v418) {
                      goto LABEL_411;
                    }
                  }
                  if (v418 == a6)
                  {
LABEL_411:
                    ++*v421;
                    continue;
                  }
                  if ((int)v418 < (int)a6)
                  {
                    unint64_t v426 = v418;
                    unint64_t v427 = a6 - (unint64_t)v418;
                    if (v427 > 8)
                    {
                      unint64_t v428 = ~(unint64_t)v418 + a6;
                      if ((~v418 & 0x7FFFFFFFu) >= (v428 & 0x7FFFFFFF) && !(v428 >> 31))
                      {
                        if ((v427 & 7) != 0) {
                          uint64_t v429 = v427 & 7;
                        }
                        else {
                          uint64_t v429 = 8;
                        }
                        unint64_t v430 = v427 - v429 + v418;
                        uint64_t v431 = v426 - a6 + v429;
                        uint64_t v432 = 2 * v426;
                        float v433 = (int64x2_t *)&v388[8 * v426];
                        do
                        {
                          int v434 = (const float *)&v75[v432 & 0xFFFFFFFE];
                          unsigned long long v435 = (unsigned __int128)vld2q_f32(v434);
                          int32x4_t v436 = (const float *)&v75[(v432 + 8) & 0xFFFFFFFE];
                          unsigned long long v437 = (unsigned __int128)vld2q_f32(v436);
                          int64x2_t v438 = vaddq_s64(v433[-2], vshll_n_s32(*(int32x2_t *)&v435, 2uLL));
                          int64x2_t v439 = vaddq_s64(v433[-1], vshll_high_n_s32((int32x4_t)v435, 2uLL));
                          int64x2_t v440 = vaddq_s64(*v433, vshll_n_s32(*(int32x2_t *)&v437, 2uLL));
                          int64x2_t v441 = vaddq_s64(v433[1], vshll_high_n_s32((int32x4_t)v437, 2uLL));
                          v433[-2] = v438;
                          v433[-1] = v439;
                          *float v433 = v440;
                          v433[1] = v441;
                          v433 += 4;
                          v432 += 16;
                          v431 += 8;
                        }
                        while (v431);
                        unint64_t v426 = v430;
                      }
                    }
                    unint64_t v442 = a6 - v426;
                    uint64_t v443 = 2 * v426;
                    int32x4_t v444 = &v74[8 * v426];
                    do
                    {
                      *(void *)v444 += 4 * v75[v443 & 0xFFFFFFFE];
                      v444 += 8;
                      v443 += 2;
                      --v442;
                    }
                    while (v442);
                  }
                }
              }
              if (a6 >= 9)
              {
                uint64_t v446 = v387;
                int32x4_t v447 = (int64x2_t *)(v74 + 32);
                int32x4_t v448 = (const float *)(v75 + 9);
                do
                {
                  int32x4_t v449 = v448 - 8;
                  unsigned long long v450 = (unsigned __int128)vld2q_f32(v449);
                  unsigned long long v451 = (unsigned __int128)vld2q_f32(v448);
                  int64x2_t v452 = vaddq_s64(v447[-2], vshll_n_s32(*(int32x2_t *)&v450, 2uLL));
                  int64x2_t v453 = vaddq_s64(v447[-1], vshll_high_n_s32((int32x4_t)v450, 2uLL));
                  int64x2_t v454 = vaddq_s64(*v447, vshll_n_s32(*(int32x2_t *)&v451, 2uLL));
                  int64x2_t v455 = vaddq_s64(v447[1], vshll_high_n_s32((int32x4_t)v451, 2uLL));
                  v447[-2] = v452;
                  v447[-1] = v453;
                  *int32x4_t v447 = v454;
                  v447[1] = v455;
                  v447 += 4;
                  v448 += 16;
                  v446 -= 8;
                }
                while (v446);
                uint64_t v445 = v387;
              }
              else
              {
                uint64_t v445 = 0;
              }
              uint64_t v456 = a6 - v445;
              uint64_t v457 = 2 * v445;
              int32x4_t v458 = &v74[8 * v445];
              int32x4_t v459 = &v75[v457 + 1];
              do
              {
                uint64_t v460 = *v459;
                v459 += 2;
                *(void *)v458 += 4 * v460;
                v458 += 8;
                --v456;
              }
              while (v456);
              v78 += v581;
              --v73;
            }
            while (v73);
          }
          break;
      }
      goto LABEL_534;
    }
    if (!v578)
    {
      __p[1] = 0;
      __p[0] = 0;
      qmemcpy((void *)sub_1002D19D8(__p, 55), "Either ranges, either uniform ranges should be provided", 55);
      sub_1002D2278(-5, (uint64_t *)__p, "calcHist_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 989);
    }
    long long v642 = 0u;
    long long v641 = 0u;
    long long v640 = 0u;
    long long v639 = 0u;
    long long v638 = 0u;
    long long v637 = 0u;
    long long v636 = 0u;
    long long v635 = 0u;
    long long v634 = 0u;
    long long v633 = 0u;
    long long v632 = 0u;
    long long v631 = 0u;
    long long v630 = 0u;
    long long v629 = 0u;
    long long v628 = 0u;
    *(_OWORD *)__p = 0u;
    memcpy(__p, v578, 8 * a6);
    if (!v73) {
      goto LABEL_534;
    }
    if ((int)a6 <= 1) {
      uint64_t v161 = 1;
    }
    else {
      uint64_t v161 = a6;
    }
    uint64_t v162 = a6 & 7;
    if (!v162) {
      uint64_t v162 = 8;
    }
    uint64_t v163 = a6 - v162;
    while (v79 < 1)
    {
LABEL_183:
      uint64_t v192 = v163;
      float32x4x4_t v193 = (int64x2_t *)(v74 + 32);
      float32x4x4_t v194 = (const float *)(v75 + 9);
      if (a6 >= 9)
      {
        do
        {
          float32x4x4_t v196 = v194 - 8;
          unsigned long long v197 = (unsigned __int128)vld2q_f32(v196);
          unsigned long long v198 = (unsigned __int128)vld2q_f32(v194);
          int64x2_t v199 = vaddq_s64(v193[-2], vshll_n_s32(*(int32x2_t *)&v197, 2uLL));
          int64x2_t v200 = vaddq_s64(v193[-1], vshll_high_n_s32((int32x4_t)v197, 2uLL));
          int64x2_t v201 = vaddq_s64(*v193, vshll_n_s32(*(int32x2_t *)&v198, 2uLL));
          int64x2_t v202 = vaddq_s64(v193[1], vshll_high_n_s32((int32x4_t)v198, 2uLL));
          v193[-2] = v199;
          v193[-1] = v200;
          int64x2_t *v193 = v201;
          v193[1] = v202;
          v193 += 4;
          v194 += 16;
          v192 -= 8;
        }
        while (v192);
        uint64_t v195 = v163;
      }
      else
      {
        uint64_t v195 = 0;
      }
      uint64_t v203 = a6 - v195;
      uint64_t v204 = 2 * v195;
      unint64_t v205 = &v74[8 * v195];
      unint64_t v206 = &v75[v204 + 1];
      do
      {
        uint64_t v207 = *v206;
        v206 += 2;
        *(void *)v205 += 4 * v207;
        v205 += 8;
        --v203;
      }
      while (v203);
      v78 += v581;
      if (!--v73) {
        goto LABEL_534;
      }
    }
    uint64_t v164 = 0;
    while (1)
    {
      if (v78 && (LODWORD(v165) = 0, BOOL v166 = v76, !*(unsigned char *)(v78 + v164)))
      {
LABEL_168:
        BOOL v172 = (int)v165 < (int)a6;
        if (v165 != a6) {
          goto LABEL_169;
        }
      }
      else
      {
        uint64_t v165 = 0;
        BOOL v166 = v76;
        do
        {
          uint64_t v167 = *(float **)&v74[8 * v165];
          uint64_t v168 = (float *)__p[v165];
          int v169 = *(&__dst + v165);
          uint64_t v170 = v169 & ~(v169 >> 31);
          uint64_t v171 = -1;
          while (*v167 >= *v168)
          {
            ++v171;
            ++v168;
            if (v170 == v171)
            {
              if (v170 >= v169) {
                goto LABEL_168;
              }
              goto LABEL_165;
            }
          }
          LODWORD(v170) = v171;
          if (v171 >= v169) {
            goto LABEL_168;
          }
LABEL_165:
          *(void *)&v74[8 * v165] = &v167[v75[2 * v165]];
          BOOL v166 = (_DWORD *)((char *)v166 + *((void *)&v619 + v165++) * (int)v170);
        }
        while (v165 != v161);
        LODWORD(v165) = v161;
        BOOL v172 = (int)v161 < (int)a6;
        if (v161 != a6)
        {
LABEL_169:
          if (v172)
          {
            unint64_t v173 = v165;
            unint64_t v174 = a6 - (unint64_t)v165;
            if (v174 > 8)
            {
              unint64_t v175 = ~(unint64_t)v165 + a6;
              if ((~v165 & 0x7FFFFFFFu) >= (v175 & 0x7FFFFFFF) && !(v175 >> 31))
              {
                if ((v174 & 7) != 0) {
                  uint64_t v176 = v174 & 7;
                }
                else {
                  uint64_t v176 = 8;
                }
                unint64_t v177 = v174 - v176 + v165;
                uint64_t v178 = v173 - a6 + v176;
                uint64_t v179 = 2 * v173;
                uint64_t v180 = (int64x2_t *)&v74[8 * v173 + 32];
                do
                {
                  BOOL v181 = (const float *)&v75[v179 & 0xFFFFFFFE];
                  unsigned long long v182 = (unsigned __int128)vld2q_f32(v181);
                  float32x4x4_t v183 = (const float *)&v75[(v179 + 8) & 0xFFFFFFFE];
                  unsigned long long v184 = (unsigned __int128)vld2q_f32(v183);
                  int64x2_t v185 = vaddq_s64(v180[-2], vshll_n_s32(*(int32x2_t *)&v182, 2uLL));
                  int64x2_t v186 = vaddq_s64(v180[-1], vshll_high_n_s32((int32x4_t)v182, 2uLL));
                  int64x2_t v187 = vaddq_s64(*v180, vshll_n_s32(*(int32x2_t *)&v184, 2uLL));
                  int64x2_t v188 = vaddq_s64(v180[1], vshll_high_n_s32((int32x4_t)v184, 2uLL));
                  v180[-2] = v185;
                  v180[-1] = v186;
                  *uint64_t v180 = v187;
                  v180[1] = v188;
                  v180 += 4;
                  v179 += 16;
                  v178 += 8;
                }
                while (v178);
                unint64_t v173 = v177;
              }
            }
            unint64_t v189 = a6 - v173;
            uint64_t v190 = 2 * v173;
            float32x4x4_t v191 = &v74[8 * v173];
            do
            {
              *(void *)v191 += 4 * v75[v190 & 0xFFFFFFFE];
              v191 += 8;
              v190 += 2;
              --v189;
            }
            while (v189);
          }
          goto LABEL_155;
        }
      }
      ++*v166;
LABEL_155:
      if (++v164 == v79) {
        goto LABEL_183;
      }
    }
  }
  if (v50 == 2)
  {
    int8x16x2_t v577 = v49;
    int8x16x2_t v579 = a8;
    int v113 = HIDWORD(v583);
    int v114 = (int64x2_t *)v590;
    float v115 = (int *)v587;
    double v116 = (_DWORD *)v594;
    uint64_t v117 = 8 * (int)a6;
    uint64_t v118 = *(void *)((char *)v590 + v117);
    uint64_t v582 = *(int *)((char *)v587 + v117 + 4);
    __srca = v599;
    int v119 = v583;
    memcpy(&__dst, v598, 4 * a6);
    memcpy(&v619, __srca, 8 * a6);
    if (a9)
    {
      switch(a6)
      {
        case 1u:
          if (v113)
          {
            double v461 = *v48;
            double v462 = v48[1];
            unsigned int v463 = __dst;
            int32x4_t v464 = (_WORD *)v114->i64[0];
            uint64_t v465 = v115[1];
            uint64_t v466 = 2 * *v115;
            do
            {
              if (v118)
              {
                if (v119 >= 1)
                {
                  for (uint64_t n = 0; n != v119; ++n)
                  {
                    if (*(unsigned char *)(v118 + n))
                    {
                      LOWORD(v121) = *v464;
                      double v121 = v462 + (double)*(unint64_t *)&v121 * v461;
                      int v468 = (int)v121 - (v121 < (double)(int)v121);
                      if (v468 < v463) {
                        ++v116[v468];
                      }
                    }
                    int32x4_t v464 = (_WORD *)((char *)v464 + v466);
                  }
                }
              }
              else if (v119 >= 1)
              {
                int v469 = v119;
                do
                {
                  LOWORD(v121) = *v464;
                  double v121 = v462 + (double)*(unint64_t *)&v121 * v461;
                  int v470 = (int)v121 - (v121 < (double)(int)v121);
                  if (v470 < v463) {
                    ++v116[v470];
                  }
                  int32x4_t v464 = (_WORD *)((char *)v464 + v466);
                  --v469;
                }
                while (v469);
              }
              v464 += v465;
              v118 += v582;
              --v113;
            }
            while (v113);
          }
          break;
        case 2u:
          if (v113)
          {
            double v471 = *v48;
            double v472 = v48[1];
            double v473 = v48[2];
            double v474 = v48[3];
            unsigned int v475 = __dst;
            unsigned int v476 = v644;
            uint64_t v477 = v619;
            uint64_t v478 = v115[3];
            uint64_t v479 = v115[1];
            uint64_t v480 = 2 * v115[2];
            uint64_t v481 = 2 * *v115;
            int32x4_t v483 = (_WORD *)v114->i64[0];
            int32x4_t v482 = (_WORD *)v114->i64[1];
            do
            {
              if (v118)
              {
                if (v119 >= 1)
                {
                  for (iuint64_t i = 0; ii != v119; ++ii)
                  {
                    if (*(unsigned char *)(v118 + ii))
                    {
                      LOWORD(v122) = *v483;
                      double v485 = v472 + (double)*(unint64_t *)&v122 * v471;
                      int v486 = (int)v485;
                      BOOL v487 = v485 < (double)(int)v485;
                      LOWORD(v485) = *v482;
                      double v122 = v474 + (double)*(unint64_t *)&v485 * v473;
                      int v488 = v486 - v487;
                      int v489 = (int)v122 - (v122 < (double)(int)v122);
                      if (v488 < v475 && v489 < v476) {
                        ++*(_DWORD *)((char *)&v116[v489] + v477 * v488);
                      }
                    }
                    int32x4_t v482 = (_WORD *)((char *)v482 + v480);
                    int32x4_t v483 = (_WORD *)((char *)v483 + v481);
                  }
                }
              }
              else if (v119 >= 1)
              {
                int v491 = v119;
                do
                {
                  LOWORD(v122) = *v483;
                  double v492 = v472 + (double)*(unint64_t *)&v122 * v471;
                  int v493 = (int)v492;
                  BOOL v494 = v492 < (double)(int)v492;
                  LOWORD(v492) = *v482;
                  double v122 = v474 + (double)*(unint64_t *)&v492 * v473;
                  int v495 = v493 - v494;
                  int v496 = (int)v122 - (v122 < (double)(int)v122);
                  if (v495 < v475 && v496 < v476) {
                    ++*(_DWORD *)((char *)&v116[v496] + v477 * v495);
                  }
                  int32x4_t v482 = (_WORD *)((char *)v482 + v480);
                  int32x4_t v483 = (_WORD *)((char *)v483 + v481);
                  --v491;
                }
                while (v491);
              }
              v483 += v479;
              v118 += v582;
              v482 += v478;
              --v113;
            }
            while (v113);
          }
          break;
        case 3u:
          if (v113)
          {
            double v124 = *v48;
            double v125 = v48[1];
            double v126 = v48[2];
            double v127 = v48[3];
            double v128 = v48[4];
            double v129 = v48[5];
            unsigned int v130 = __dst;
            unsigned int v131 = v644;
            unsigned int v132 = v645;
            long long v133 = v619;
            unint64_t v134 = (_WORD *)v114->i64[1];
            unint64_t v135 = (_WORD *)v114[1].i64[0];
            uint64_t v136 = v115[5];
            uint64_t v137 = v115[3];
            uint64_t v138 = v115[1];
            uint64_t v139 = 2 * v115[4];
            uint64_t v140 = 2 * v115[2];
            uint64_t v141 = 2 * *v115;
            int v142 = (_WORD *)v114->i64[0];
            do
            {
              if (v118)
              {
                if (v119 >= 1)
                {
                  uint64_t v143 = 0;
                  do
                  {
                    if (*(unsigned char *)(v118 + v143))
                    {
                      LOWORD(v123) = *v142;
                      double v144 = v125 + (double)*(unint64_t *)&v123 * v124;
                      int v145 = (int)v144 - (v144 < (double)(int)v144);
                      LOWORD(v144) = *v134;
                      double v146 = v127 + (double)*(unint64_t *)&v144 * v126;
                      int v147 = (int)v146 - (v146 < (double)(int)v146);
                      LOWORD(v146) = *v135;
                      double v123 = v129 + (double)*(unint64_t *)&v146 * v128;
                      int v148 = (int)v123 - (v123 < (double)(int)v123);
                      BOOL v149 = v145 >= v130 || v147 >= v131;
                      if (!v149 && v148 < v132)
                      {
                        uint64_t v151 = (char *)v116 + v133 * v145 + *((void *)&v133 + 1) * v147;
                        ++*(_DWORD *)&v151[4 * v148];
                      }
                    }
                    ++v143;
                    unint64_t v135 = (_WORD *)((char *)v135 + v139);
                    unint64_t v134 = (_WORD *)((char *)v134 + v140);
                    int v142 = (_WORD *)((char *)v142 + v141);
                  }
                  while (v119 != v143);
                }
              }
              else if (v119 >= 1)
              {
                int v152 = v119;
                do
                {
                  LOWORD(v123) = *v142;
                  double v153 = v125 + (double)*(unint64_t *)&v123 * v124;
                  int v154 = (int)v153 - (v153 < (double)(int)v153);
                  LOWORD(v153) = *v134;
                  double v155 = v127 + (double)*(unint64_t *)&v153 * v126;
                  int v156 = (int)v155 - (v155 < (double)(int)v155);
                  LOWORD(v155) = *v135;
                  double v123 = v129 + (double)*(unint64_t *)&v155 * v128;
                  int v157 = (int)v123 - (v123 < (double)(int)v123);
                  if (v154 < v130 && v156 < v131 && v157 < v132)
                  {
                    BOOL v160 = (char *)v116 + v133 * v154 + *((void *)&v133 + 1) * v156;
                    ++*(_DWORD *)&v160[4 * v157];
                  }
                  unint64_t v135 = (_WORD *)((char *)v135 + v139);
                  unint64_t v134 = (_WORD *)((char *)v134 + v140);
                  int v142 = (_WORD *)((char *)v142 + v141);
                  --v152;
                }
                while (v152);
              }
              v142 += v138;
              v134 += v137;
              v118 += v582;
              v135 += v136;
              --v113;
            }
            while (v113);
          }
          break;
        default:
          if (v113)
          {
            uint64_t v498 = a6 & 7;
            if (!v498) {
              uint64_t v498 = 8;
            }
            uint64_t v499 = a6 - v498;
            int32x4_t v500 = v114 + 2;
            do
            {
              if (v118)
              {
                if (v119 >= 1)
                {
                  for (juint64_t j = 0; jj != v119; ++jj)
                  {
                    LODWORD(v502) = 0;
                    int32x4_t v503 = v116;
                    if (*(unsigned char *)(v118 + jj))
                    {
                      uint64_t v502 = 0;
                      int32x4_t v504 = (double *)(v577 + 8);
                      int32x4_t v505 = v115;
                      int32x4_t v503 = v116;
                      while (1)
                      {
                        int32x4_t v506 = (__int16 *)v114->i64[v502];
                        v120.i16[0] = *v506;
                        *(double *)v120.i64 = *v504 + (double)v120.u64[0] * *(v504 - 1);
                        int v507 = (int)*(double *)v120.i64 - (*(double *)v120.i64 < (double)(int)*(double *)v120.i64);
                        if (v507 >= *(&__dst + v502)) {
                          break;
                        }
                        uint64_t v508 = *v505;
                        v505 += 2;
                        v114->i64[v502] = (uint64_t)&v506[v508];
                        int32x4_t v503 = (_DWORD *)((char *)v503 + *((void *)&v619 + v502++) * v507);
                        v504 += 2;
                        if (a6 == v502) {
                          goto LABEL_483;
                        }
                      }
                    }
                    if (v502 == a6)
                    {
LABEL_483:
                      ++*v503;
                    }
                    else if ((int)v502 < (int)a6)
                    {
                      unint64_t v509 = v502;
                      unint64_t v510 = a6 - (unint64_t)v502;
                      if (v510 > 8)
                      {
                        unint64_t v511 = ~(unint64_t)v502 + a6;
                        if ((~v502 & 0x7FFFFFFFu) >= (v511 & 0x7FFFFFFF) && !(v511 >> 31))
                        {
                          if ((v510 & 7) != 0) {
                            uint64_t v512 = v510 & 7;
                          }
                          else {
                            uint64_t v512 = 8;
                          }
                          unint64_t v513 = v510 - v512 + v502;
                          uint64_t v514 = v509 - a6 + v512;
                          uint64_t v515 = 2 * v509;
                          int8x16x4_t v516 = (int64x2_t *)((char *)v500 + 8 * v509);
                          do
                          {
                            float32x4x4_t v517 = (const float *)&v115[v515 & 0xFFFFFFFE];
                            unsigned long long v518 = (unsigned __int128)vld2q_f32(v517);
                            int8x16x4_t v519 = (const float *)&v115[(v515 + 8) & 0xFFFFFFFE];
                            unsigned long long v520 = (unsigned __int128)vld2q_f32(v519);
                            int64x2_t v521 = vaddq_s64(v516[-2], vshll_n_s32(*(int32x2_t *)&v518, 1uLL));
                            int64x2_t v120 = vaddq_s64(v516[-1], vshll_high_n_s32((int32x4_t)v518, 1uLL));
                            int64x2_t v522 = vaddq_s64(*v516, vshll_n_s32(*(int32x2_t *)&v520, 1uLL));
                            int64x2_t v523 = vaddq_s64(v516[1], vshll_high_n_s32((int32x4_t)v520, 1uLL));
                            v516[-2] = v521;
                            v516[-1] = v120;
                            *int8x16x4_t v516 = v522;
                            v516[1] = v523;
                            v516 += 4;
                            v515 += 16;
                            v514 += 8;
                          }
                          while (v514);
                          unint64_t v509 = v513;
                        }
                      }
                      unint64_t v524 = a6 - v509;
                      uint64_t v525 = 2 * v509;
                      int8x16x4_t v526 = &v114->i64[v509];
                      do
                      {
                        *v526++ += 2 * v115[v525 & 0xFFFFFFFE];
                        v525 += 2;
                        --v524;
                      }
                      while (v524);
                    }
                  }
                }
              }
              else if (v119 >= 1)
              {
                for (kuint64_t k = 0; kk != v119; ++kk)
                {
                  uint64_t v528 = 0;
                  int8x16x4_t v529 = (double *)(v577 + 8);
                  float32x4x4_t v530 = v115;
                  float32x4x4_t v531 = v116;
                  while (1)
                  {
                    int8x16x4_t v532 = (__int16 *)v114->i64[v528];
                    v120.i16[0] = *v532;
                    *(double *)v120.i64 = *v529 + (double)v120.u64[0] * *(v529 - 1);
                    int v533 = (int)*(double *)v120.i64 - (*(double *)v120.i64 < (double)(int)*(double *)v120.i64);
                    if (v533 >= *(&__dst + v528)) {
                      break;
                    }
                    uint64_t v534 = *v530;
                    v530 += 2;
                    v114->i64[v528] = (uint64_t)&v532[v534];
                    float32x4x4_t v531 = (_DWORD *)((char *)v531 + *((void *)&v619 + v528++) * v533);
                    v529 += 2;
                    if (a6 == v528) {
                      goto LABEL_506;
                    }
                  }
                  if (v528 == a6)
                  {
LABEL_506:
                    ++*v531;
                    continue;
                  }
                  if ((int)v528 < (int)a6)
                  {
                    unint64_t v535 = v528;
                    unint64_t v536 = a6 - (unint64_t)v528;
                    if (v536 > 8)
                    {
                      unint64_t v537 = ~(unint64_t)v528 + a6;
                      if ((~v528 & 0x7FFFFFFFu) >= (v537 & 0x7FFFFFFF) && !(v537 >> 31))
                      {
                        if ((v536 & 7) != 0) {
                          uint64_t v538 = v536 & 7;
                        }
                        else {
                          uint64_t v538 = 8;
                        }
                        unint64_t v539 = v536 - v538 + v528;
                        uint64_t v540 = v535 - a6 + v538;
                        uint64_t v541 = 2 * v535;
                        float32x4x4_t v542 = (int64x2_t *)((char *)v500 + 8 * v535);
                        do
                        {
                          float32x4x4_t v543 = (const float *)&v115[v541 & 0xFFFFFFFE];
                          unsigned long long v544 = (unsigned __int128)vld2q_f32(v543);
                          int8x16x4_t v545 = (const float *)&v115[(v541 + 8) & 0xFFFFFFFE];
                          unsigned long long v546 = (unsigned __int128)vld2q_f32(v545);
                          int64x2_t v547 = vaddq_s64(v542[-2], vshll_n_s32(*(int32x2_t *)&v544, 1uLL));
                          int64x2_t v120 = vaddq_s64(v542[-1], vshll_high_n_s32((int32x4_t)v544, 1uLL));
                          int64x2_t v548 = vaddq_s64(*v542, vshll_n_s32(*(int32x2_t *)&v546, 1uLL));
                          int64x2_t v549 = vaddq_s64(v542[1], vshll_high_n_s32((int32x4_t)v546, 1uLL));
                          v542[-2] = v547;
                          v542[-1] = v120;
                          *float32x4x4_t v542 = v548;
                          v542[1] = v549;
                          v542 += 4;
                          v541 += 16;
                          v540 += 8;
                        }
                        while (v540);
                        unint64_t v535 = v539;
                      }
                    }
                    unint64_t v550 = a6 - v535;
                    uint64_t v551 = 2 * v535;
                    int8x16x4_t v552 = &v114->i64[v535];
                    do
                    {
                      *v552++ += 2 * v115[v551 & 0xFFFFFFFE];
                      v551 += 2;
                      --v550;
                    }
                    while (v550);
                  }
                }
              }
              if (a6 >= 9)
              {
                uint64_t v554 = v499;
                int8x16x4_t v555 = v114 + 2;
                float32x4x4_t v556 = (const float *)(v115 + 9);
                do
                {
                  float32x4x4_t v557 = v556 - 8;
                  unsigned long long v558 = (unsigned __int128)vld2q_f32(v557);
                  unsigned long long v559 = (unsigned __int128)vld2q_f32(v556);
                  int64x2_t v560 = vaddq_s64(v555[-2], vshll_n_s32(*(int32x2_t *)&v558, 1uLL));
                  int64x2_t v120 = vaddq_s64(v555[-1], vshll_high_n_s32((int32x4_t)v558, 1uLL));
                  int64x2_t v561 = vaddq_s64(*v555, vshll_n_s32(*(int32x2_t *)&v559, 1uLL));
                  int64x2_t v562 = vaddq_s64(v555[1], vshll_high_n_s32((int32x4_t)v559, 1uLL));
                  v555[-2] = v560;
                  v555[-1] = v120;
                  *int8x16x4_t v555 = v561;
                  v555[1] = v562;
                  v555 += 4;
                  v556 += 16;
                  v554 -= 8;
                }
                while (v554);
                uint64_t v553 = v499;
              }
              else
              {
                uint64_t v553 = 0;
              }
              uint64_t v563 = a6 - v553;
              uint64_t v564 = 2 * v553;
              unint64_t v565 = &v114->i64[v553];
              unint64_t v566 = &v115[v564 + 1];
              do
              {
                uint64_t v567 = *v566;
                v566 += 2;
                *v565++ += 2 * v567;
                --v563;
              }
              while (v563);
              v118 += v582;
              --v113;
            }
            while (v113);
          }
          break;
      }
      goto LABEL_534;
    }
    if (!v579)
    {
      __p[1] = 0;
      __p[0] = 0;
      qmemcpy((void *)sub_1002D19D8(__p, 55), "Either ranges, either uniform ranges should be provided", 55);
      sub_1002D2278(-5, (uint64_t *)__p, "calcHist_", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 989);
    }
    long long v642 = 0u;
    long long v641 = 0u;
    long long v640 = 0u;
    long long v639 = 0u;
    long long v638 = 0u;
    long long v637 = 0u;
    long long v636 = 0u;
    long long v635 = 0u;
    long long v634 = 0u;
    long long v633 = 0u;
    long long v632 = 0u;
    long long v631 = 0u;
    long long v630 = 0u;
    long long v629 = 0u;
    long long v628 = 0u;
    *(_OWORD *)__p = 0u;
    memcpy(__p, v579, 8 * a6);
    if (!v113) {
      goto LABEL_534;
    }
    if ((int)a6 <= 1) {
      uint64_t v209 = 1;
    }
    else {
      uint64_t v209 = a6;
    }
    uint64_t v210 = a6 & 7;
    if (!v210) {
      uint64_t v210 = 8;
    }
    uint64_t v211 = a6 - v210;
    while (v119 < 1)
    {
LABEL_230:
      uint64_t v239 = v211;
      float32x4x4_t v240 = v114 + 2;
      int16x8x4_t v241 = (const float *)(v115 + 9);
      if (a6 >= 9)
      {
        do
        {
          float32x4x4_t v243 = v241 - 8;
          unsigned long long v244 = (unsigned __int128)vld2q_f32(v243);
          unsigned long long v245 = (unsigned __int128)vld2q_f32(v241);
          int64x2_t v246 = vaddq_s64(v240[-2], vshll_n_s32(*(int32x2_t *)&v244, 1uLL));
          int64x2_t v208 = vaddq_s64(v240[-1], vshll_high_n_s32((int32x4_t)v244, 1uLL));
          int64x2_t v247 = vaddq_s64(*v240, vshll_n_s32(*(int32x2_t *)&v245, 1uLL));
          int64x2_t v248 = vaddq_s64(v240[1], vshll_high_n_s32((int32x4_t)v245, 1uLL));
          v240[-2] = v246;
          v240[-1] = v208;
          *float32x4x4_t v240 = v247;
          v240[1] = v248;
          v240 += 4;
          v241 += 16;
          v239 -= 8;
        }
        while (v239);
        uint64_t v242 = v211;
      }
      else
      {
        uint64_t v242 = 0;
      }
      uint64_t v249 = a6 - v242;
      uint64_t v250 = 2 * v242;
      float32x4x4_t v251 = &v114->i64[v242];
      float32x4x4_t v252 = &v115[v250 + 1];
      do
      {
        uint64_t v253 = *v252;
        v252 += 2;
        *v251++ += 2 * v253;
        --v249;
      }
      while (v249);
      v118 += v582;
      if (!--v113) {
        goto LABEL_534;
      }
    }
    uint64_t v212 = 0;
    while (1)
    {
      if (v118 && (LODWORD(v213) = 0, int32x4_t v214 = v116, !*(unsigned char *)(v118 + v212)))
      {
LABEL_215:
        BOOL v220 = (int)v213 < (int)a6;
        if (v213 != a6) {
          goto LABEL_216;
        }
      }
      else
      {
        uint64_t v213 = 0;
        int32x4_t v214 = v116;
        do
        {
          int32x4_t v215 = (__int16 *)v114->i64[v213];
          v208.i16[0] = *v215;
          *(float *)v208.i32 = (float)v208.u32[0];
          int32x4_t v216 = (float *)__p[v213];
          int v217 = *(&__dst + v213);
          uint64_t v218 = v217 & ~(v217 >> 31);
          uint64_t v219 = -1;
          while (*v216 <= *(float *)v208.i32)
          {
            ++v219;
            ++v216;
            if (v218 == v219)
            {
              if (v218 >= v217) {
                goto LABEL_215;
              }
              goto LABEL_212;
            }
          }
          LODWORD(v218) = v219;
          if (v219 >= v217) {
            goto LABEL_215;
          }
LABEL_212:
          v114->i64[v213] = (uint64_t)&v215[v115[2 * v213]];
          int32x4_t v214 = (_DWORD *)((char *)v214 + *((void *)&v619 + v213++) * (int)v218);
        }
        while (v213 != v209);
        LODWORD(v213) = v209;
        BOOL v220 = (int)v209 < (int)a6;
        if (v209 != a6)
        {
LABEL_216:
          if (v220)
          {
            unint64_t v221 = v213;
            unint64_t v222 = a6 - (unint64_t)v213;
            if (v222 > 8)
            {
              unint64_t v223 = ~(unint64_t)v213 + a6;
              if ((~v213 & 0x7FFFFFFFu) >= (v223 & 0x7FFFFFFF) && !(v223 >> 31))
              {
                if ((v222 & 7) != 0) {
                  uint64_t v224 = v222 & 7;
                }
                else {
                  uint64_t v224 = 8;
                }
                unint64_t v225 = v222 - v224 + v213;
                uint64_t v226 = v221 - a6 + v224;
                uint64_t v227 = 2 * v221;
                uint64_t v228 = (int64x2_t *)((char *)v114 + 8 * v221 + 32);
                do
                {
                  float32x4x4_t v229 = (const float *)&v115[v227 & 0xFFFFFFFE];
                  unsigned long long v230 = (unsigned __int128)vld2q_f32(v229);
                  float32x4x4_t v231 = (const float *)&v115[(v227 + 8) & 0xFFFFFFFE];
                  unsigned long long v232 = (unsigned __int128)vld2q_f32(v231);
                  int64x2_t v233 = vaddq_s64(v228[-2], vshll_n_s32(*(int32x2_t *)&v230, 1uLL));
                  int64x2_t v208 = vaddq_s64(v228[-1], vshll_high_n_s32((int32x4_t)v230, 1uLL));
                  int64x2_t v234 = vaddq_s64(*v228, vshll_n_s32(*(int32x2_t *)&v232, 1uLL));
                  int64x2_t v235 = vaddq_s64(v228[1], vshll_high_n_s32((int32x4_t)v232, 1uLL));
                  v228[-2] = v233;
                  v228[-1] = v208;
                  *uint64_t v228 = v234;
                  v228[1] = v235;
                  v228 += 4;
                  v227 += 16;
                  v226 += 8;
                }
                while (v226);
                unint64_t v221 = v225;
              }
            }
            unint64_t v236 = a6 - v221;
            uint64_t v237 = 2 * v221;
            float32x4x4_t v238 = &v114->i64[v221];
            do
            {
              *v238++ += 2 * v115[v237 & 0xFFFFFFFE];
              v237 += 2;
              --v236;
            }
            while (v236);
          }
          goto LABEL_202;
        }
      }
      ++*v214;
LABEL_202:
      if (++v212 == v119) {
        goto LABEL_230;
      }
    }
  }
  if (v50)
  {
    long long v619 = 0uLL;
    sub_1002D2278(-210, (uint64_t *)&v619, "calcHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 1498);
  }
  uint64_t v51 = v583;
  int v52 = HIDWORD(v583);
  double v53 = (int64x2_t *)v590;
  double v54 = a8;
  double v55 = (int *)v587;
  double v56 = (_DWORD *)v594;
  uint64_t v57 = 8 * (int)a6;
  uint64_t v58 = *(void *)((char *)v590 + v57);
  uint64_t v580 = *(int *)((char *)v587 + v57 + 4);
  __p[1] = 0;
  __p[0] = 0;
  *(void *)&long long v628 = 0;
  LODWORD(v619) = 1123876864;
  *((void *)&v619 + 1) = 0;
  sub_1003584C8((uint64_t)&v593, (uint64_t)&v619, a6, v54, (uint64_t)v49, a9, 0, (uint64_t *)__p);
  int v59 = __p[0];
  switch(a6)
  {
    case 1u:
      uint64_t v254 = *v55;
      uint64_t v255 = v55[1];
      bzero(&v619, 0x400uLL);
      if (!v52)
      {
LABEL_338:
        for (mint m = 0; mm != 256; ++mm)
        {
          unint64_t v354 = v59[mm];
          if (!(v354 >> 62)) {
            *(_DWORD *)((char *)v56 + v354) += *((_DWORD *)&v619 + mm);
          }
        }
LABEL_337:
        __p[1] = v59;
        operator delete(v59);
        goto LABEL_534;
      }
      float32x4x4_t v256 = (unsigned __int8 *)v53->i64[0];
      uint64_t v257 = 2 * v254;
      unint64_t v258 = (v51 - 4);
      int v259 = (v258 & 0xFFFFFFFC) + 4;
      while (1)
      {
        if (v58)
        {
          if ((int)v51 >= 1)
          {
            for (nuint64_t n = 0; nn != v51; ++nn)
            {
              if (*(unsigned char *)(v58 + nn)) {
                ++*((_DWORD *)&v619 + *v256);
              }
              v256 += v254;
            }
          }
          goto LABEL_239;
        }
        if (v254 == 1)
        {
          if ((int)v51 >= 4)
          {
            for (unint64_t i1 = 0; i1 <= v258; i1 += 4)
            {
              uint64_t v263 = v256[i1 + 1];
              ++*((_DWORD *)&v619 + v256[i1]);
              ++*((_DWORD *)&v619 + v263);
              uint64_t v264 = 4 * v256[i1 + 2];
              uint64_t v265 = v256[i1 + 3];
              ++*(_DWORD *)((char *)&v619 + v264);
              ++*((_DWORD *)&v619 + v265);
            }
            v256 += i1;
            BOOL v266 = __OFSUB__(v51, i1);
            int v261 = v51 - i1;
            if ((v261 < 0) ^ v266 | (v261 == 0)) {
              goto LABEL_239;
            }
            goto LABEL_261;
          }
          int v261 = v51;
          if ((int)v51 > 0) {
            goto LABEL_261;
          }
        }
        else
        {
          if ((int)v51 >= 4)
          {
            int v267 = 0;
            do
            {
              uint64_t v268 = v256[v254];
              ++*((_DWORD *)&v619 + *v256);
              ++*((_DWORD *)&v619 + v268);
              uint64_t v269 = &v256[v257];
              uint64_t v270 = v256[2 * v254];
              uint64_t v271 = v256[3 * v254];
              ++*((_DWORD *)&v619 + v270);
              ++*((_DWORD *)&v619 + v271);
              float32x4x4_t v256 = &v269[v257];
              v267 += 4;
            }
            while (v267 <= (int)v258);
            int v261 = v51 - v259;
            if ((int)v51 <= v259) {
              goto LABEL_239;
            }
            do
            {
LABEL_261:
              ++*((_DWORD *)&v619 + *v256);
              v256 += v254;
              --v261;
            }
            while (v261);
            goto LABEL_239;
          }
          int v261 = v51;
          if ((int)v51 > 0) {
            goto LABEL_261;
          }
        }
LABEL_239:
        v256 += v255;
        v58 += v580;
        if (!--v52) {
          goto LABEL_338;
        }
      }
    case 2u:
      if (v52)
      {
        BOOL v273 = (unsigned __int8 *)v53->i64[0];
        unint64_t v272 = (unsigned __int8 *)v53->i64[1];
        uint64_t v275 = v55[2];
        uint64_t v274 = v55[3];
        uint64_t v277 = *v55;
        uint64_t v276 = v55[1];
        do
        {
          if (v58)
          {
            if ((int)v51 >= 1)
            {
              uint64_t v278 = 0;
              do
              {
                if (*(unsigned char *)(v58 + v278))
                {
                  unint64_t v279 = v59[*v272 + 256] + v59[*v273];
                  if (!(v279 >> 62)) {
                    ++*(_DWORD *)((char *)v56 + v279);
                  }
                }
                ++v278;
                v273 += v277;
                v272 += v275;
              }
              while ((int)v51 != v278);
            }
          }
          else if ((int)v51 >= 1)
          {
            int v280 = v51;
            do
            {
              unint64_t v281 = v59[*v272 + 256] + v59[*v273];
              if (!(v281 >> 62)) {
                ++*(_DWORD *)((char *)v56 + v281);
              }
              v273 += v277;
              v272 += v275;
              --v280;
            }
            while (v280);
          }
          v273 += v276;
          v272 += v274;
          v58 += v580;
          --v52;
        }
        while (v52);
      }
      break;
    case 3u:
      if (v52)
      {
        double v61 = (unsigned __int8 *)v53->i64[1];
        double v60 = (unsigned __int8 *)v53[1].i64[0];
        uint64_t v62 = (unsigned __int8 *)v53->i64[0];
        uint64_t v64 = v55[4];
        uint64_t v63 = v55[5];
        uint64_t v66 = v55[2];
        uint64_t v65 = v55[3];
        uint64_t v68 = *v55;
        uint64_t v67 = v55[1];
        do
        {
          if (v58)
          {
            if ((int)v51 >= 1)
            {
              uint64_t v69 = 0;
              do
              {
                if (*(unsigned char *)(v58 + v69))
                {
                  unint64_t v70 = v59[*v61 + 256] + v59[*v62] + v59[*v60 + 512];
                  if (!(v70 >> 62)) {
                    ++*(_DWORD *)((char *)v56 + v70);
                  }
                }
                ++v69;
                v62 += v68;
                v61 += v66;
                v60 += v64;
              }
              while ((int)v51 != v69);
            }
          }
          else if ((int)v51 >= 1)
          {
            int v71 = v51;
            do
            {
              unint64_t v72 = v59[*v61 + 256] + v59[*v62] + v59[*v60 + 512];
              if (!(v72 >> 62)) {
                ++*(_DWORD *)((char *)v56 + v72);
              }
              v62 += v68;
              v61 += v66;
              v60 += v64;
              --v71;
            }
            while (v71);
          }
          v62 += v67;
          v61 += v65;
          v60 += v63;
          v58 += v580;
          --v52;
        }
        while (v52);
      }
      break;
    default:
      if (v52)
      {
        uint64_t v282 = a6 & 7;
        if (!v282) {
          uint64_t v282 = 8;
        }
        uint64_t v283 = a6 - v282;
        unint64_t v284 = v53 + 2;
        do
        {
          if (v58)
          {
            if ((int)v51 >= 1)
            {
              uint64_t v285 = 0;
              do
              {
                LODWORD(v286) = 0;
                BOOL v287 = v56;
                if (*(unsigned char *)(v58 + v285))
                {
                  int v288 = 0;
                  uint64_t v286 = 0;
                  BOOL v289 = v55;
                  BOOL v287 = v56;
                  while (1)
                  {
                    BOOL v290 = (unsigned __int8 *)v53->i64[v286];
                    unint64_t v291 = v59[v288 & 0xFFFFFF00 | (unint64_t)*v290];
                    if (v291 >> 62) {
                      break;
                    }
                    BOOL v287 = (_DWORD *)((char *)v287 + v291);
                    uint64_t v292 = *v289;
                    v289 += 2;
                    v53->i64[v286++] = (uint64_t)&v290[v292];
                    v288 += 256;
                    if (a6 == v286) {
                      goto LABEL_286;
                    }
                  }
                }
                if (v286 == a6)
                {
LABEL_286:
                  ++*v287;
                }
                else if ((int)v286 < (int)a6)
                {
                  unint64_t v293 = v286;
                  unint64_t v294 = a6 - (unint64_t)v286;
                  if (v294 > 8)
                  {
                    unint64_t v295 = ~(unint64_t)v286 + a6;
                    if ((~v286 & 0x7FFFFFFFu) >= (v295 & 0x7FFFFFFF) && !(v295 >> 31))
                    {
                      if ((v294 & 7) != 0) {
                        uint64_t v296 = v294 & 7;
                      }
                      else {
                        uint64_t v296 = 8;
                      }
                      unint64_t v297 = v294 - v296 + v286;
                      uint64_t v298 = v293 - a6 + v296;
                      uint64_t v299 = 2 * v293;
                      int32x2_t v300 = (int64x2_t *)((char *)v284 + 8 * v293);
                      do
                      {
                        int16x8_t v301 = (const float *)&v55[v299 & 0xFFFFFFFE];
                        unsigned long long v302 = (unsigned __int128)vld2q_f32(v301);
                        int32x2_t v303 = (const float *)&v55[(v299 + 8) & 0xFFFFFFFE];
                        unsigned long long v304 = (unsigned __int128)vld2q_f32(v303);
                        int64x2_t v305 = vaddw_high_s32(v300[-1], (int32x4_t)v302);
                        int64x2_t v306 = vaddw_s32(*v300, *(int32x2_t *)&v304);
                        int64x2_t v307 = vaddw_high_s32(v300[1], (int32x4_t)v304);
                        v300[-2] = vaddw_s32(v300[-2], *(int32x2_t *)&v302);
                        v300[-1] = v305;
                        *int32x2_t v300 = v306;
                        v300[1] = v307;
                        v300 += 4;
                        v299 += 16;
                        v298 += 8;
                      }
                      while (v298);
                      unint64_t v293 = v297;
                    }
                  }
                  unint64_t v308 = a6 - v293;
                  uint64_t v309 = 2 * v293;
                  uint64_t v310 = &v53->i64[v293];
                  do
                  {
                    *v310++ += v55[v309 & 0xFFFFFFFE];
                    v309 += 2;
                    --v308;
                  }
                  while (v308);
                }
                ++v285;
              }
              while (v285 != (int)v51);
            }
          }
          else if ((int)v51 >= 1)
          {
            int v311 = 0;
            do
            {
              int v312 = 0;
              uint64_t v313 = 0;
              uint64_t v314 = v55;
              BOOL v315 = v56;
              while (1)
              {
                unint64_t v316 = (unsigned __int8 *)v53->i64[v313];
                unint64_t v317 = v59[v312 & 0xFFFFFF00 | (unint64_t)*v316];
                if (v317 >> 62) {
                  break;
                }
                BOOL v315 = (_DWORD *)((char *)v315 + v317);
                uint64_t v318 = *v314;
                v314 += 2;
                v53->i64[v313++] = (uint64_t)&v316[v318];
                v312 += 256;
                if (a6 == v313) {
                  goto LABEL_309;
                }
              }
              if (v313 == a6)
              {
LABEL_309:
                ++*v315;
                goto LABEL_310;
              }
              if ((int)v313 < (int)a6)
              {
                unint64_t v319 = v313;
                unint64_t v320 = a6 - (unint64_t)v313;
                if (v320 > 8)
                {
                  unint64_t v321 = ~(unint64_t)v313 + a6;
                  if ((~v313 & 0x7FFFFFFFu) >= (v321 & 0x7FFFFFFF) && !(v321 >> 31))
                  {
                    if ((v320 & 7) != 0) {
                      uint64_t v322 = v320 & 7;
                    }
                    else {
                      uint64_t v322 = 8;
                    }
                    unint64_t v323 = v320 - v322 + v313;
                    uint64_t v324 = v319 - a6 + v322;
                    uint64_t v325 = 2 * v319;
                    unint64_t v326 = (int64x2_t *)((char *)v284 + 8 * v319);
                    do
                    {
                      unint64_t v327 = (const float *)&v55[v325 & 0xFFFFFFFE];
                      unsigned long long v328 = (unsigned __int128)vld2q_f32(v327);
                      int32x4_t v329 = (const float *)&v55[(v325 + 8) & 0xFFFFFFFE];
                      unsigned long long v330 = (unsigned __int128)vld2q_f32(v329);
                      int64x2_t v331 = vaddw_high_s32(v326[-1], (int32x4_t)v328);
                      int64x2_t v332 = vaddw_s32(*v326, *(int32x2_t *)&v330);
                      int64x2_t v333 = vaddw_high_s32(v326[1], (int32x4_t)v330);
                      v326[-2] = vaddw_s32(v326[-2], *(int32x2_t *)&v328);
                      v326[-1] = v331;
                      *unint64_t v326 = v332;
                      v326[1] = v333;
                      v326 += 4;
                      v325 += 16;
                      v324 += 8;
                    }
                    while (v324);
                    unint64_t v319 = v323;
                  }
                }
                unint64_t v334 = a6 - v319;
                uint64_t v335 = 2 * v319;
                int v336 = &v53->i64[v319];
                do
                {
                  *v336++ += v55[v335 & 0xFFFFFFFE];
                  v335 += 2;
                  --v334;
                }
                while (v334);
              }
LABEL_310:
              ++v311;
            }
            while (v311 != v51);
          }
          uint64_t v337 = v283;
          int32x2_t v338 = v53 + 2;
          uint64_t v339 = (const float *)(v55 + 9);
          if (a6 >= 9)
          {
            do
            {
              uint64_t v341 = v339 - 8;
              unsigned long long v342 = (unsigned __int128)vld2q_f32(v341);
              unsigned long long v343 = (unsigned __int128)vld2q_f32(v339);
              int64x2_t v344 = vaddw_s32(v338[-2], *(int32x2_t *)&v342);
              int64x2_t v345 = vaddw_high_s32(v338[-1], (int32x4_t)v342);
              int64x2_t v346 = vaddw_s32(*v338, *(int32x2_t *)&v343);
              int64x2_t v347 = vaddw_high_s32(v338[1], (int32x4_t)v343);
              v338[-2] = v344;
              v338[-1] = v345;
              *int32x2_t v338 = v346;
              v338[1] = v347;
              v338 += 4;
              v339 += 16;
              v337 -= 8;
            }
            while (v337);
            uint64_t v340 = v283;
          }
          else
          {
            uint64_t v340 = 0;
          }
          uint64_t v348 = a6 - v340;
          uint64_t v349 = 2 * v340;
          uint64_t v350 = &v53->i64[v340];
          unint64_t v351 = &v55[v349 + 1];
          do
          {
            uint64_t v352 = *v351;
            v351 += 2;
            *v350++ += v352;
            --v348;
          }
          while (v348);
          v58 += v580;
          --v52;
        }
        while (v52);
      }
      break;
  }
  if (v59) {
    goto LABEL_337;
  }
LABEL_534:
  LODWORD(v619) = 33619968;
  *((void *)&v619 + 1) = &v601;
  *(void *)&long long v620 = 0;
  sub_10024011C((unsigned int *)&v593, (uint64_t)&v619, 5, 1.0, 0.0);
  if (v584)
  {
    int8x16x2_t v585 = v584;
    operator delete(v584);
  }
  if (v587)
  {
    float32x4x2_t v588 = v587;
    operator delete(v587);
  }
  if (v590)
  {
    float32x4x2_t v591 = v590;
    operator delete(v590);
  }
  if (v597 && atomic_fetch_add((atomic_uint *volatile)(v597 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v593);
  }
  uint64_t v597 = 0;
  long long v594 = 0u;
  long long v595 = 0u;
  if (SDWORD1(v593) >= 1)
  {
    uint64_t v568 = 0;
    unint64_t v569 = v598;
    do
      v569[v568++] = 0;
    while (v568 < SDWORD1(v593));
  }
  if (v599 != v600) {
    j__free(v599);
  }
  if (v605 && atomic_fetch_add((atomic_uint *volatile)(v605 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v601);
  }
  uint64_t v605 = 0;
  long long v602 = 0u;
  long long v603 = 0u;
  if (SDWORD1(v601) >= 1)
  {
    uint64_t v570 = 0;
    int v571 = v606;
    do
      v571[v570++] = 0;
    while (v570 < SDWORD1(v601));
  }
  if (v607 != v608) {
    j__free(v607);
  }
  if (v613 && atomic_fetch_add((atomic_uint *volatile)(v613 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v609);
  }
  uint64_t v613 = 0;
  long long v610 = 0u;
  long long v611 = 0u;
  if (SDWORD1(v609) >= 1)
  {
    uint64_t v572 = 0;
    float32x4x2_t v573 = v614;
    do
      *(_DWORD *)&v573[4 * v572++] = 0;
    while (v572 < SDWORD1(v609));
  }
  if (v615 != v616) {
    j__free(v615);
  }
  if (v618) {
    sub_1002D6888(v617);
  }
}

void sub_1003563DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000B6A8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100356574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_10020FA00((uint64_t)&a65);
  _Unwind_Resume(a1);
}

float64_t sub_100356588(int32x2_t **a1, int a2, uint64_t a3, int *a4, int a5, int *a6, float **a7, char a8, void *a9, uint64_t *a10, uint64_t a11, uint64_t *a12)
{
  if (!a3 && a2 != a5)
  {
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    qmemcpy((void *)sub_1002D19D8(&v102, 32), "channels != 0 || nimages == dims", 32);
    sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 128);
  }
  uint64_t v16 = a10;
  uint64_t v17 = a9;
  *(int32x2_t *)&v18.f64[0] = vrev64_s32(*a1[8]);
  *(float64_t *)a11 = v18.f64[0];
  int v19 = *(_DWORD *)a1;
  uint64_t v94 = a5;
  unint64_t v20 = a5 + 1;
  unint64_t v21 = (uint64_t)(v17[1] - *v17) >> 3;
  if (v20 <= v21)
  {
    if (v20 < v21) {
      a9[1] = *a9 + 8 * v20;
    }
  }
  else
  {
    sub_100335528((void **)a9, v20 - v21);
  }
  unint64_t v22 = 2 * (int)v20;
  unint64_t v23 = (a10[1] - *a10) >> 2;
  uint64_t v96 = a6;
  if (v22 <= v23)
  {
    if (v22 < v23) {
      a10[1] = *a10 + 4 * v22;
    }
  }
  else
  {
    sub_10025FCA8((uint64_t)a10, v22 - v23);
  }
  int v98 = v19 & 7;
  int v95 = a5;
  if (a5 < 1)
  {
    BOOL v41 = a4;
    uint64_t v42 = *((void *)a4 + 2);
    if (!v42) {
      goto LABEL_56;
    }
    int v26 = 1;
    uint64_t v43 = a4[1];
    if ((int)v43 < 3)
    {
LABEL_36:
      uint64_t v44 = v41[3] * (uint64_t)v41[2];
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v100 = a5;
    unint64_t v25 = (0x88442211uLL >> (4 * (v19 & 7u))) & 0xF;
    LOBYTE(v26) = 1;
    do
    {
      if (a3)
      {
        int v31 = *(_DWORD *)(a3 + 4 * v24);
        if (v31 < 0)
        {
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v32 = sub_1002D19D8(&v102, 6);
          *(_DWORD *)uint64_t v32 = 1027481699;
          *(_WORD *)(v32 + 4) = 12320;
          sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 148);
        }
        if (a2 < 1)
        {
LABEL_26:
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v37 = sub_1002D19D8(&v102, 11);
          *(_DWORD *)(v37 + 7) = 1936025441;
          *(void *)uint64_t v37 = *(void *)"j < nimages";
          sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 152);
        }
        uint64_t v33 = 0;
        uint64_t v34 = (unsigned int *)a1;
        while (1)
        {
          unsigned int v35 = *v34;
          v34 += 24;
          int v36 = (v35 >> 3) & 0x1FF;
          if (v31 <= v36) {
            break;
          }
          v31 += ~v36;
          if (a2 == ++v33) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        if (((uint64_t)a1[12 * v24] & 0xFF8) != 0)
        {
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          qmemcpy((void *)sub_1002D19D8(&v102, 25), "images[j].channels() == 1", 25);
          sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 143);
        }
        int v31 = 0;
        LODWORD(v33) = v24;
      }
      float v38 = (int *)&a1[12 * v33];
      BOOL v39 = *(_DWORD *)(*((void *)v38 + 8) + 4) == *(_DWORD *)a11 && **((_DWORD **)v38 + 8) == *(_DWORD *)(a11 + 4);
      if (!v39 || (unsigned int v40 = *v38, (*v38 & 7) != v98))
      {
        uint64_t v102 = 0;
        uint64_t v103 = 0;
        qmemcpy((void *)sub_1002D19D8(&v102, 56), "images[j].size() == imsize && images[j].depth() == depth", 56);
        sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 155);
      }
      v26 &= (*v38 & 0x4000u) >> 14;
      int v27 = (int *)&a1[12 * v33];
      uint64_t v28 = *((void *)v27 + 2) + v31 * (int)v25;
      uint64_t v17 = a9;
      uint64_t v16 = a10;
      *(void *)(*a9 + 8 * v24) = v28;
      int v29 = ((v40 >> 3) & 0x1FF) + 1;
      uint64_t v30 = (int *)(*a10 + 8 * v24);
      *uint64_t v30 = v29;
      v30[1] = *((void *)v27 + 10) / v25 - *(_DWORD *)a11 * v29;
      ++v24;
    }
    while (v24 != v100);
    BOOL v41 = a4;
    uint64_t v42 = *((void *)a4 + 2);
    if (!v42)
    {
      if ((v26 & 1) == 0) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    uint64_t v43 = a4[1];
    if ((int)v43 < 3) {
      goto LABEL_36;
    }
  }
  uint64_t v45 = *((void *)v41 + 8);
  double v46 = (int *)(v45 + 4);
  uint64_t v47 = 1;
  uint64_t v48 = v43 & 0xFFFFFFFE;
  uint64_t v49 = 1;
  do
  {
    v47 *= *(v46 - 1);
    v49 *= *v46;
    v46 += 2;
    v48 -= 2;
  }
  while (v48);
  uint64_t v44 = v49 * v47;
  uint64_t v50 = v43 - (v43 & 0xFFFFFFFE);
  if (v50)
  {
    uint64_t v51 = (int *)(v45 + ((4 * v43) & 0x3FFFFFFF8));
    do
    {
      uint64_t v52 = *v51++;
      v44 *= v52;
      --v50;
    }
    while (v50);
  }
LABEL_44:
  if (!v43 || !v44)
  {
    if (!v26) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  BOOL v53 = *(_DWORD *)(*((void *)v41 + 8) + 4) == *(_DWORD *)a11 && **((_DWORD **)v41 + 8) == *(_DWORD *)(a11 + 4);
  if (!v53 || (int v54 = *v41, (*v41 & 0xFF8) != 0))
  {
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    qmemcpy((void *)sub_1002D19D8(&v102, 45), "mask.size() == imsize && mask.channels() == 1", 45);
    sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 165);
  }
  uint64_t v55 = 8 * v94;
  *(void *)(*v17 + v55) = v42;
  uint64_t v56 = *v16;
  *(_DWORD *)(v56 + v55) = 1;
  *(_DWORD *)(v56 + 4 * (int)((2 * v94) | 1)) = *((void *)v41 + 10) / ((0x88442211uLL >> (4 * (*v41 & 7u))) & 0xF);
  if (v26 & ((unsigned __int16)(v54 & 0x4000) >> 14))
  {
LABEL_56:
    *(_DWORD *)a11 *= *(_DWORD *)(a11 + 4);
    *(_DWORD *)(a11 + 4) = 1;
  }
LABEL_57:
  if (a7)
  {
    uint64_t v57 = v96;
    if (a8)
    {
      unint64_t v58 = (a12[1] - *a12) >> 3;
      if (2 * v94 <= v58)
      {
        if (2 * v94 < v58) {
          a12[1] = *a12 + 16 * v94;
        }
      }
      else
      {
        sub_100358318((uint64_t)a12, 2 * v94 - v58);
      }
      if (v95 >= 1)
      {
        uint64_t v67 = 0;
        do
        {
          unint64_t v72 = *a7;
          if (!*a7 || (float v73 = v72[1], *v72 >= v73))
          {
            uint64_t v102 = 0;
            uint64_t v103 = 0;
            qmemcpy((void *)sub_1002D19D8(&v102, 40), "ranges[i] && ranges[i][0] < ranges[i][1]", 40);
            sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 196);
          }
          double v68 = *v72;
          int v69 = *v57++;
          double v70 = (double)v69 / (v73 - v68);
          int v71 = (double *)(*a12 + v67);
          v18.f64[0] = -(v70 * v68);
          *int v71 = v70;
          v71[1] = v18.f64[0];
          ++a7;
          v67 += 16;
        }
        while (16 * v95 != v67);
      }
    }
    else if (v95 >= 1)
    {
      for (uint64_t i = 0; i != v95; ++i)
      {
        uint64_t v62 = v96[i];
        if (v62)
        {
          for (uint64_t j = 0; j != v62; ++j)
          {
            uint64_t v64 = (uint64_t)&a7[i][j];
            LODWORD(v18.f64[0]) = *(_DWORD *)v64;
            if (*(float *)v64 >= *(float *)(v64 + 4))
            {
              uint64_t v102 = 0;
              uint64_t v103 = 0;
              qmemcpy((void *)sub_1002D19D8(&v102, 29), "ranges[i][k] < ranges[i][k+1]", 29);
              sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 209);
            }
          }
        }
      }
    }
  }
  else
  {
    if (v98)
    {
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      uint64_t v59 = sub_1002D19D8(&v102, 10);
      *(_WORD *)(v59 + 8) = 12320;
      *(void *)uint64_t v59 = *(void *)"depth == 0";
      sub_1002D2278(-215, &v102, "histPrepareImages", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 182);
    }
    unint64_t v60 = (a12[1] - *a12) >> 3;
    if (2 * v94 <= v60)
    {
      if (2 * v94 < v60) {
        a12[1] = *a12 + 16 * v94;
      }
    }
    else
    {
      sub_100358318((uint64_t)a12, 2 * v94 - v60);
    }
    if (v95 >= 1)
    {
      uint64_t v65 = *a12;
      if (v95 >= 8)
      {
        uint64_t v66 = v95 & 0xFFFFFFF8;
        float v74 = v96 + 4;
        int v75 = (double *)(v65 + 64);
        float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x3F70000000000000uLL);
        long long v76 = 0uLL;
        uint64_t v77 = v66;
        do
        {
          long long v78 = *((_OWORD *)v74 - 1);
          v79.i64[0] = (int)v78;
          v79.i64[1] = SDWORD1(v78);
          float64x2_t v80 = vcvtq_f64_s64(v79);
          v79.i64[0] = SDWORD2(v78);
          v79.i64[1] = SHIDWORD(v78);
          float64x2_t v81 = vcvtq_f64_s64(v79);
          v79.i64[0] = (int)*(_OWORD *)v74;
          v79.i64[1] = (int)HIDWORD(*(void *)v74);
          float64x2_t v82 = vcvtq_f64_s64(v79);
          v79.i64[0] = (int)*((void *)v74 + 1);
          v79.i64[1] = (int)HIDWORD(*(_OWORD *)v74);
          float64x2_t v83 = vmulq_f64(v81, v18);
          v106.val[0] = vmulq_f64(v80, v18);
          v106.val[1] = 0uLL;
          v105.val[0] = vmulq_f64(v82, v18);
          double v84 = v75 - 8;
          vst2q_f64(v84, v106);
          v105.val[1] = 0uLL;
          double v85 = v75 - 4;
          vst2q_f64(v85, *(float64x2x2_t *)(&v76 - 1));
          unsigned int v86 = v75 + 16;
          vst2q_f64(v75, v105);
          unsigned int v87 = v75 + 4;
          v104.val[0] = vmulq_f64(vcvtq_f64_s64(v79), v18);
          v104.val[1] = 0uLL;
          vst2q_f64(v87, v104);
          v74 += 8;
          int v75 = v86;
          v77 -= 8;
        }
        while (v77);
        if (v66 == v95) {
          return v18.f64[0];
        }
      }
      else
      {
        uint64_t v66 = 0;
      }
      unsigned int v88 = &v96[v66];
      long long v89 = (void *)(v65 + 16 * v66 + 8);
      uint64_t v90 = v95 - v66;
      do
      {
        int v91 = *v88++;
        v18.f64[0] = (double)v91 * 0.00390625;
        *(v89 - 1) = *(void *)&v18.f64[0];
        *long long v89 = 0;
        v89 += 2;
        --v90;
      }
      while (v90);
    }
  }
  return v18.f64[0];
}

void sub_100356E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100356F2C(unsigned int a1, int *a2, int a3, _DWORD **a4, int a5)
{
  if (a1 >= 0x21)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    qmemcpy((void *)sub_1002D19D8(&v16, 36), "Number of dimensions is out of range", 36);
    sub_1002D2278(-19, &v16, "cvCreateHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2844);
  }
  if (!a2)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v10 = sub_1002D19D8(&v16, 20);
    *(_DWORD *)(v10 + 16) = 1919251566;
    *(_OWORD *)uint64_t v10 = *(_OWORD *)"Null <sizes> pointer";
    sub_1002D2278(-9, &v16, "cvCreateHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2847);
  }
  uint64_t v11 = sub_10020FEBC(0x238uLL);
  uint64_t v12 = v11;
  if (a5) {
    int v13 = 1111819264;
  }
  else {
    int v13 = 1111818240;
  }
  *(_DWORD *)uint64_t v11 = v13 & 0xFFFFFFFE | a3 & 1;
  *(void *)(v11 + 272) = 0;
  *(void *)(v11 + 8) = 0;
  if (a3 == 1)
  {
    *(void *)(v11 + 8) = sub_100231354(a1, a2, 5u);
  }
  else
  {
    if (a3)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      qmemcpy((void *)sub_1002D19D8(&v16, 22), "Invalid histogram type", 22);
      sub_1002D2278(-5, &v16, "cvCreateHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2863);
    }
    uint64_t v14 = sub_10022FE08(v11 + 280, a1, (uint64_t)a2, 5u, 0);
    *(void *)(v12 + 8) = v14;
    sub_10022F4E8(v14);
  }
  if (a4) {
    sub_100357154(v12, a4, a5);
  }
  return v12;
}

void sub_10035710C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100357154(uint64_t a1, _DWORD **a2, int a3)
{
  uint64_t v4 = a2;
  if (!a2)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v6 = sub_1002D19D8(&v32, 19);
    *(_DWORD *)(v6 + 15) = 1919251566;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)"NULL ranges pointer";
    sub_1002D2278(-27, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3363);
  }
  if (!a1 || *(_WORD *)(a1 + 2) != 16965 || (uint64_t v7 = *(void *)(a1 + 8)) == 0)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    qmemcpy((void *)sub_1002D19D8(&v32, 24), "Invalid histogram header", 24);
    sub_1002D2278(-5, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3366);
  }
  uint64_t result = sub_10023218C(v7, __dst);
  int v9 = result;
  if ((int)result >= 1)
  {
    uint64_t v10 = result;
    if (result >= 8)
    {
      uint64_t v11 = result & 0x7FFFFFF8;
      uint64_t v14 = (int32x4_t *)&v35;
      int32x4_t v15 = 0uLL;
      uint64_t v16 = result & 0xFFFFFFF8;
      int32x4_t v17 = 0uLL;
      do
      {
        int32x4_t v15 = vsubq_s32(v14[-1], (int32x4_t)vmvnq_s8((int8x16_t)v15));
        int32x4_t v17 = vsubq_s32(*v14, (int32x4_t)vmvnq_s8((int8x16_t)v17));
        v14 += 2;
        v16 -= 8;
      }
      while (v16);
      int v12 = vaddvq_s32(vaddq_s32(v17, v15));
      if (v11 == result)
      {
LABEL_17:
        if (a3)
        {
          unint64_t v21 = (_DWORD *)(a1 + 20);
          do
          {
            unint64_t v22 = *v4;
            if (!*v4)
            {
              uint64_t v32 = 0;
              uint64_t v33 = 0;
              qmemcpy((void *)sub_1002D19D8(&v32, 32), "One of <ranges> elements is NULL", 32);
              sub_1002D2278(-27, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3377);
            }
            *(v21 - 1) = *v22;
            *unint64_t v21 = v22[1];
            v21 += 2;
            ++v4;
            --v10;
          }
          while (v10);
          goto LABEL_11;
        }
        uint64_t v23 = 4 * v12;
        uint64_t result = *(void *)(a1 + 272);
        uint64_t v24 = v9;
        if (result)
        {
LABEL_23:
          if (v9 < 1) {
            goto LABEL_37;
          }
          goto LABEL_27;
        }
LABEL_26:
        uint64_t result = sub_10020FEBC(v23 + 8 * v24);
        *(void *)(a1 + 272) = result;
        if (v9 < 1)
        {
LABEL_37:
          unsigned int v13 = *(_DWORD *)a1 & 0xFFFFF3FF | 0x800;
          goto LABEL_38;
        }
LABEL_27:
        uint64_t v25 = 0;
        uint64_t v26 = result + 8 * v24;
        do
        {
          if (!v4[v25])
          {
            uint64_t v32 = 0;
            uint64_t v33 = 0;
            qmemcpy((void *)sub_1002D19D8(&v32, 32), "One of <ranges> elements is NULL", 32);
            sub_1002D2278(-27, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3401);
          }
          int v27 = __dst[v25];
          if ((v27 & 0x80000000) == 0)
          {
            uint64_t v28 = 0;
            float v29 = -3.4028e38;
            do
            {
              float v31 = v29;
              float v29 = *(float *)&v4[v25][v28];
              if (v29 <= v31)
              {
                uint64_t v32 = 0;
                uint64_t v33 = 0;
                qmemcpy((void *)sub_1002D19D8(&v32, 39), "Bin ranges should go in ascenting order", 39);
                sub_1002D2278(-211, &v32, "cvSetHistBinRanges", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3407);
              }
              *(float *)(v26 + 4 * v28) = v29;
            }
            while (v28++ < v27);
          }
          *(void *)(*(void *)(a1 + 272) + 8 * v25) = v26;
          v26 += 4 * (v27 + 1);
          ++v25;
        }
        while (v25 != v9);
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v11 = 0;
      int v12 = 0;
    }
    float64x2_t v18 = &__dst[v11];
    uint64_t v19 = result - v11;
    do
    {
      int v20 = *v18++;
      v12 += v20 + 1;
      --v19;
    }
    while (v19);
    goto LABEL_17;
  }
  if (!a3)
  {
    uint64_t v23 = 0;
    uint64_t result = *(void *)(a1 + 272);
    uint64_t v24 = v9;
    if (result) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
LABEL_11:
  unsigned int v13 = *(_DWORD *)a1 | 0xC00;
LABEL_38:
  *(_DWORD *)a1 = v13;
  return result;
}

void sub_100357534(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003575C4(uint64_t *a1)
{
  if (!a1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    sub_1002D2278(-27, &v4, "cvReleaseHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2903);
  }
  uint64_t v1 = *a1;
  if (*a1)
  {
    if (*(_WORD *)(v1 + 2) != 16965 || !*(void *)(v1 + 8))
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      qmemcpy((void *)sub_1002D19D8(&v4, 24), "Invalid histogram header", 24);
      sub_1002D2278(-5, &v4, "cvReleaseHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 2910);
    }
    *a1 = 0;
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2 && *(_WORD *)(v2 + 2) == 16964)
    {
      sub_100231664((uint64_t *)(v1 + 8));
      uint64_t v3 = *(void **)(v1 + 272);
      if (!v3) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1002319B4(v2);
      *(void *)(v1 + 8) = 0;
      uint64_t v3 = *(void **)(v1 + 272);
      if (!v3)
      {
LABEL_13:
        j__free((void *)v1);
        return;
      }
    }
    j__free(v3);
    *(void *)(v1 + 272) = 0;
    goto LABEL_13;
  }
}

void sub_1003576E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100357714(unint64_t a1, uint64_t *a2)
{
  if (!a2)
  {
    v22[0] = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v22, 34), "Destination double pointer is NULL", 34);
    sub_1002D2278(-27, (uint64_t *)v22, "cvCopyHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3293);
  }
  uint64_t v4 = *a2;
  if (!a1
    || *(_WORD *)(a1 + 2) != 16965
    || (uint64_t v5 = *(void *)(a1 + 8)) == 0
    || v4 && (*(_WORD *)(v4 + 2) != 16965 || !*(void *)(v4 + 8)))
  {
    v22[0] = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v22, 27), "Invalid histogram header[s]", 27);
    sub_1002D2278(-5, (uint64_t *)v22, "cvCopyHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 3298);
  }
  BOOL v6 = *(unsigned __int16 *)(v5 + 2) == 16964;
  signed int v7 = sub_10023218C(v5, __dst);
  if (!v4) {
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)(v4 + 8);
  if (v8)
  {
    if (v6 != (*(_WORD *)(v8 + 2) == 16964)) {
      goto LABEL_23;
    }
  }
  else if (v6)
  {
LABEL_23:
    sub_1003575C4(a2);
    uint64_t v4 = sub_100356F2C(v7, __dst, v6, 0, 0);
    *a2 = v4;
    goto LABEL_24;
  }
  if (v7 != sub_10023218C(v8, (int *)v22)) {
    goto LABEL_23;
  }
  if (v7 < 1)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = 0;
    while (__dst[v9] == *((_DWORD *)v22 + v9))
    {
      if (v7 == ++v9) {
        goto LABEL_24;
      }
    }
  }
  if (v9 != v7) {
    goto LABEL_23;
  }
LABEL_24:
  unsigned int v10 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x800) != 0)
  {
    memset(v22, 0, sizeof(v22));
    if ((v10 & 0x400) == 0)
    {
      uint64_t v11 = *(_DWORD ***)(a1 + 272);
LABEL_36:
      sub_100357154(v4, v11, (v10 >> 10) & 1);
      goto LABEL_37;
    }
    if (v7 >= 1)
    {
      if (v7 < 4)
      {
        uint64_t v12 = 0;
LABEL_34:
        uint64_t v21 = a1 + 8 * v12 + 16;
        do
        {
          uint64_t v11 = (_DWORD **)v22;
          *((void *)v22 + v12++) = v21;
          v21 += 8;
        }
        while (v7 != v12);
        goto LABEL_36;
      }
      unint64_t v13 = 0;
      uint64_t v12 = v7 & 0xFFFFFFFC;
      int64x2_t v14 = (int64x2_t)xmmword_1004027B0;
      int64x2_t v15 = vdupq_n_s64(a1);
      int64x2_t v16 = vdupq_n_s64(0x10uLL);
      int64x2_t v17 = vdupq_n_s64(0x20uLL);
      int64x2_t v18 = vdupq_n_s64(4uLL);
      do
      {
        int64x2_t v19 = vaddq_s64(v15, vshlq_n_s64(v14, 3uLL));
        int v20 = (int64x2_t *)&v22[v13 / 0x10];
        *int v20 = vaddq_s64(v19, v16);
        v20[1] = vaddq_s64(v19, v17);
        int64x2_t v14 = vaddq_s64(v14, v18);
        v13 += 32;
      }
      while (((8 * v7) & 0x7FFFFFFE0) != v13);
      if (v12 != v7) {
        goto LABEL_34;
      }
    }
    uint64_t v11 = (_DWORD **)v22;
    goto LABEL_36;
  }
LABEL_37:
  sub_10025930C(*(void *)(a1 + 8), *(void *)(v4 + 8), 0);
}

void sub_100357A38(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100357A80(BOOL result)
{
  if (result) {
    return *(_WORD *)(result + 2) == 16965 && *(void *)(result + 8) != 0;
  }
  return result;
}

uint64_t sub_100357AAC(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_10020FEBC(0x238uLL);
  uint64_t v5 = sub_1002ACF04((uint64_t)a1, a2, "type");
  if (v5)
  {
    if ((*(_DWORD *)v5 & 7) == 2)
    {
      uint64_t v6 = (uint64_t)rint(*(double *)(v5 + 16));
      uint64_t v7 = sub_1002ACF04((uint64_t)a1, a2, "is_uniform");
      if (!v7) {
        goto LABEL_14;
      }
    }
    else if ((*(_DWORD *)v5 & 7) == 1)
    {
      LODWORD(v6) = *(_DWORD *)(v5 + 16);
      uint64_t v7 = sub_1002ACF04((uint64_t)a1, a2, "is_uniform");
      if (!v7) {
        goto LABEL_14;
      }
    }
    else
    {
      LODWORD(v6) = 0x7FFFFFFF;
      uint64_t v7 = sub_1002ACF04((uint64_t)a1, a2, "is_uniform");
      if (!v7) {
        goto LABEL_14;
      }
    }
LABEL_9:
    if ((*(_DWORD *)v7 & 7) == 2)
    {
      uint64_t v8 = (uint64_t)rint(*(double *)(v7 + 16));
      uint64_t v9 = sub_1002ACF04((uint64_t)a1, a2, "have_ranges");
      if (v9) {
        goto LABEL_17;
      }
    }
    else if ((*(_DWORD *)v7 & 7) == 1)
    {
      LODWORD(v8) = *(_DWORD *)(v7 + 16);
      uint64_t v9 = sub_1002ACF04((uint64_t)a1, a2, "have_ranges");
      if (v9) {
        goto LABEL_17;
      }
    }
    else
    {
      LODWORD(v8) = 0x7FFFFFFF;
      uint64_t v9 = sub_1002ACF04((uint64_t)a1, a2, "have_ranges");
      if (v9) {
        goto LABEL_17;
      }
    }
LABEL_21:
    LODWORD(v10) = 0;
    goto LABEL_24;
  }
  LODWORD(v6) = 0;
  uint64_t v7 = sub_1002ACF04((uint64_t)a1, a2, "is_uniform");
  if (v7) {
    goto LABEL_9;
  }
LABEL_14:
  LODWORD(v8) = 0;
  uint64_t v9 = sub_1002ACF04((uint64_t)a1, a2, "have_ranges");
  if (!v9) {
    goto LABEL_21;
  }
LABEL_17:
  if ((*(_DWORD *)v9 & 7) == 2)
  {
    uint64_t v10 = (uint64_t)rint(*(double *)(v9 + 16));
  }
  else if ((*(_DWORD *)v9 & 7) == 1)
  {
    LODWORD(v10) = *(_DWORD *)(v9 + 16);
  }
  else
  {
    LODWORD(v10) = 0x7FFFFFFF;
  }
LABEL_24:
  *(_DWORD *)uint64_t v4 = ((v10 != 0) << 11) | ((v8 != 0) << 10) | v6 | 0x42450000;
  if (!v6)
  {
    uint64_t v13 = sub_1002ACF04((uint64_t)a1, a2, "mat");
    int64x2_t v14 = (_DWORD *)sub_1002BA714(a1, v13, 0);
    int64x2_t v15 = v14;
    v42[0] = v14;
    if (!v14 || *((_WORD *)v14 + 1) != 16963 || !*((void *)v14 + 3))
    {
      v43[0] = 0;
      v43[1] = 0;
      *(_OWORD *)sub_1002D19D8(v43, 16) = *(_OWORD *)"Expected CvMatND";
      sub_1002D2278(-2, v43, "icvReadHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 4008);
    }
    LODWORD(v16) = v14[1];
    if ((int)v16 >= 1)
    {
      uint64_t v17 = 0;
      int64x2_t v18 = v14 + 8;
      do
      {
        int v19 = *v18;
        v18 += 2;
        *((_DWORD *)__dst + v17++) = v19;
        uint64_t v16 = (int)v14[1];
      }
      while (v17 < v16);
    }
    sub_10022FE08(v4 + 280, v16, (uint64_t)__dst, *v14, *((void *)v14 + 3));
    *(void *)(v4 + 8) = v4 + 280;
    int v20 = (_DWORD *)*((void *)v15 + 1);
    *(void *)(v4 + 288) = v20;
    int v21 = *((unsigned __int16 *)v15 + 1) << 16;
    if (v21 == 1111687168)
    {
      if (!*((void *)v15 + 3)) {
        goto LABEL_45;
      }
      int v20 = (_DWORD *)*((void *)v15 + 1);
      if (!v20) {
        goto LABEL_45;
      }
    }
    else if (v21 != 1111621632 || (int)v15[9] < 1 || (int)v15[8] < 1 || !*((void *)v15 + 3) || !v20)
    {
      goto LABEL_45;
    }
    ++*v20;
LABEL_45:
    sub_10022FBB4(v42);
    goto LABEL_46;
  }
  uint64_t v11 = sub_1002ACF04((uint64_t)a1, a2, "bins");
  uint64_t v12 = sub_1002BA714(a1, v11, 0);
  *(void *)(v4 + 8) = v12;
  if (!v12 || *(_WORD *)(v12 + 2) != 16964)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    qmemcpy((void *)sub_1002D19D8(__dst, 22), "Unknown Histogram type", 22);
    sub_1002D2278(-2, __dst, "icvReadHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 4029);
  }
LABEL_46:
  if (!v10) {
    return v4;
  }
  unsigned int v22 = sub_10023218C(*(void *)(v4 + 8), (int *)__dst);
  int v23 = v22;
  uint64_t v24 = v22;
  if ((int)v22 >= 1)
  {
    if (v22 >= 8)
    {
      uint64_t v25 = v22 & 0xFFFFFFF8;
      uint64_t v28 = (int32x4_t *)&v45;
      int32x4_t v29 = 0uLL;
      uint64_t v30 = v25;
      int32x4_t v31 = 0uLL;
      do
      {
        int32x4_t v29 = vsubq_s32(v28[-1], (int32x4_t)vmvnq_s8((int8x16_t)v29));
        int32x4_t v31 = vsubq_s32(*v28, (int32x4_t)vmvnq_s8((int8x16_t)v31));
        v28 += 2;
        v30 -= 8;
      }
      while (v30);
      int v26 = vaddvq_s32(vaddq_s32(v31, v29));
      if (v25 == v22) {
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v25 = 0;
      int v26 = 0;
    }
    uint64_t v32 = (int *)__dst + v25;
    uint64_t v33 = v22 - v25;
    do
    {
      int v34 = *v32++;
      v26 += v34 + 1;
      --v33;
    }
    while (v33);
LABEL_56:
    uint64_t v27 = 4 * v26;
    goto LABEL_57;
  }
  uint64_t v27 = 0;
LABEL_57:
  uint64_t v35 = sub_1002ACF04((uint64_t)a1, a2, "thresh");
  if (!v35)
  {
    v42[0] = 0;
    v42[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v42, 24), "'thresh' node is missing", 24);
    sub_1002D2278(-2, (uint64_t *)v42, "icvReadHist", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 4046);
  }
  sub_1002B4F10(a1, v35, (uint64_t)v43);
  if (v8)
  {
    if (v23 >= 1)
    {
      uint64_t v36 = v4 + 16;
      do
      {
        sub_1002B512C(a1, v43, 2, v36, "f");
        v36 += 8;
        --v24;
      }
      while (v24);
    }
    *(void *)(v4 + 272) = 0;
  }
  else
  {
    uint64_t v37 = sub_10020FEBC(v27 + 8 * v23);
    *(void *)(v4 + 272) = v37;
    if (v23 > 0)
    {
      uint64_t v38 = 0;
      uint64_t v39 = v37 + 8 * v23;
      do
      {
        *(void *)(*(void *)(v4 + 272) + 8 * v38) = v39;
        unsigned int v40 = (int *)__dst + v38;
        sub_1002B512C(a1, v43, *v40 + 1, v39, "f");
        v39 += 4 * *v40 + 4;
        ++v38;
      }
      while (v24 != v38);
    }
  }
  return v4;
}

void sub_1003580A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100358108(_DWORD *a1, const char *a2, int *a3)
{
  sub_1002B2180((uint64_t)a1, a2, 6, (uint64_t)"opencv-hist");
  unsigned int v5 = *a3;
  int v6 = *a3 & 0x800;
  sub_1002B2CDC((uint64_t)a1, (uint64_t)"type", *a3 & 1);
  sub_1002B2CDC((uint64_t)a1, (uint64_t)"is_uniform", (v5 >> 10) & 1);
  sub_1002B2CDC((uint64_t)a1, (uint64_t)"have_ranges", (v5 >> 11) & 1);
  uint64_t v7 = *((void *)a3 + 1);
  if (v7 && *(_WORD *)(v7 + 2) == 16964)
  {
    sub_1002BA894(a1, (uint64_t)"bins", v7, 0, 0);
    if (!v6) {
      return sub_1002B2B88((uint64_t)a1);
    }
  }
  else
  {
    sub_1002BA894(a1, (uint64_t)"mat", (uint64_t)(a3 + 70), 0, 0);
    if (!v6) {
      return sub_1002B2B88((uint64_t)a1);
    }
  }
  int v8 = sub_10023218C(*((void *)a3 + 1), __dst);
  sub_1002B2180((uint64_t)a1, "thresh", 13, 0);
  if ((v5 & 0x400) != 0)
  {
    if (v8 >= 1)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (uint64_t)(a3 + 4);
      do
      {
        sub_1002B2F84((uint64_t)a1, v11, 2, "f");
        v11 += 8;
        --v10;
      }
      while (v10);
    }
  }
  else if (v8 >= 1)
  {
    for (uint64_t i = 0; i != v8; ++i)
      sub_1002B2F84((uint64_t)a1, *(void *)(*((void *)a3 + 34) + 8 * i), __dst[i] + 1, "f");
  }
  sub_1002B2B88((uint64_t)a1);
  return sub_1002B2B88((uint64_t)a1);
}

uint64_t sub_1003582EC(unint64_t a1)
{
  uint64_t v2 = 0;
  sub_100357714(a1, &v2);
  return v2;
}

void sub_100358318(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      int v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_10000B98C();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_10000BA6C();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int64x2_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      int v6 = &v5[-v20];
      v14 -= v20;
      int v21 = &v13[8 * v9 - 16];
      unsigned int v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *int v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_1003584C8(uint64_t a1, uint64_t a2, int a3, float **a4, uint64_t a5, int a6, int a7, uint64_t *a8)
{
  unint64_t v16 = a3 << 8;
  uint64_t v17 = *a8;
  unint64_t v18 = (a8[1] - *a8) >> 3;
  if (v16 <= v18)
  {
    if (v16 < v18) {
      a8[1] = v17 + 8 * v16;
    }
  }
  else
  {
    sub_1002A79BC((uint64_t)a8, v16 - v18);
    uint64_t v17 = *a8;
  }
  if (a6)
  {
    if (a3 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(a1 + 64);
      uint64_t v21 = *(void *)(a1 + 72);
      uint64_t v22 = *(void *)(a2 + 8);
      __asm { FMOV            V1.2D, #2.0 }
      do
      {
        if (a7)
        {
          if (v22) {
            unsigned int v28 = *(_DWORD *)(v22 + 4 * v19 + 88);
          }
          else {
            unsigned int v28 = 0;
          }
          unint64_t v29 = 1;
        }
        else
        {
          unsigned int v28 = *(_DWORD *)(v20 + 4 * v19);
          unint64_t v29 = *(void *)(v21 + 8 * v19);
        }
        uint64_t v30 = 0;
        int32x4_t v31 = (uint64_t *)(a5 + 16 * v19);
        float64x2_t v32 = (float64x2_t)vdupq_lane_s64(*v31, 0);
        float64x2_t v33 = (float64x2_t)vdupq_lane_s64(v31[1], 0);
        uint32x2_t v34 = (uint32x2_t)vdup_n_s32(v28);
        int64x2_t v35 = vdupq_n_s64(v29);
        uint64_t v36 = &_mh_execute_header;
        do
        {
          v37.i64[0] = (int)v36;
          v37.i64[1] = SHIDWORD(v36);
          float64x2_t v38 = vmlaq_f64(v33, v32, vcvtq_f64_s64(v37));
          int32x2_t v39 = vmovn_s64(vcvtq_s64_f64(v38));
          v37.i64[0] = v39.i32[0];
          v37.i64[1] = v39.i32[1];
          uint32x2_t v40 = (uint32x2_t)vadd_s32(vmovn_s64(vcgtq_f64(vcvtq_f64_s64(v37), v38)), v39);
          v37.i64[0] = v40.i32[0];
          v37.i64[1] = v40.i32[1];
          uint32x2_t v41 = vcgt_u32(v34, v40);
          *(void *)&v38.f64[0] = v35.i64[0] * v37.i64[0];
          *(void *)&v38.f64[1] = v35.i64[1] * v37.i64[1];
          v37.i64[0] = v41.i32[0];
          v37.i64[1] = v41.i32[1];
          *(int8x16_t *)(v17 + ((v19 & 0xFFFFFF) << 11) + v30) = vbslq_s8((int8x16_t)v37, (int8x16_t)v38, _Q1);
          uint64_t v36 = (const mach_header_64 *)vadd_s32((int32x2_t)v36, (int32x2_t)0x200000002);
          v30 += 16;
        }
        while (v30 != 2048);
        ++v19;
      }
      while (v19 != a3);
    }
    return;
  }
  if (!a4)
  {
    v88[0] = 0;
    v88[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v88, 55), "Either ranges, either uniform ranges should be provided", 55);
    sub_1002D2278(-5, v88, "calcHistLookupTables_8u", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/histogram.cpp", 116);
  }
  if (a3 >= 1)
  {
    if (a7)
    {
      uint64_t v42 = *(void *)(a2 + 8);
      if (v42)
      {
        int v43 = 0;
        uint64_t v44 = 0;
        do
        {
          int v45 = 0;
          int v46 = v43;
          uint64_t v47 = a4[v44];
          int v48 = (int)*v47;
          if (*v47 > (float)v48) {
            ++v48;
          }
          if (v48 >= 256) {
            int v49 = 256;
          }
          else {
            int v49 = v48;
          }
          uint64_t v50 = *(_DWORD *)(v42 + 4 * v44 + 88) - 1;
          unint64_t v51 = 0x4000000000000000;
          uint64_t v52 = -1;
          if (v49 > 0)
          {
LABEL_37:
            unint64_t v55 = v49 - (uint64_t)v45;
            unint64_t v56 = v45;
            if (v55 < 4) {
              goto LABEL_41;
            }
            unint64_t v56 = (v55 & 0xFFFFFFFFFFFFFFFCLL) + v45;
            int64x2_t v57 = vdupq_n_s64(v51);
            unint64_t v58 = (int64x2_t *)(v17 + 16 + 8 * (v43 + (uint64_t)v45));
            unint64_t v59 = v55 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v58[-1] = v57;
              *unint64_t v58 = v57;
              v58 += 2;
              v59 -= 4;
            }
            while (v59);
            if (v55 != (v55 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_41:
              unint64_t v60 = (unint64_t *)(v17 + 8 * (v43 + v56));
              unint64_t v61 = v49 - v56;
              do
              {
                *v60++ = v51;
                --v61;
              }
              while (v61);
            }
            int v45 = v49;
          }
          while (v52 != v50)
          {
            unint64_t v51 = v52 + 1;
            float v53 = v47[v52 + 2];
            int v54 = (int)v53;
            if (v53 > (float)(int)v53) {
              ++v54;
            }
            if (v54 >= 256) {
              int v49 = 256;
            }
            else {
              int v49 = v54;
            }
            uint64_t v52 = v51;
            if (v45 < v49) {
              goto LABEL_37;
            }
          }
          if (v45 <= 255) {
            memset_pattern16((void *)(v17 + 8 * ((v44 << 8) + v45)), &unk_10040A740, 8 * (255 - v45) + 8);
          }
          ++v44;
          int v43 = v46 + 256;
        }
        while (v44 != a3);
        return;
      }
      unint64_t v84 = (unint64_t)a3 << 8;
      while (1)
      {
        float v86 = **a4;
        int v87 = (int)v86;
        if (v86 > (float)(int)v86) {
          ++v87;
        }
        if (v87 < 1)
        {
          unsigned int v85 = 0;
        }
        else
        {
          if (v87 >= 256) {
            unsigned int v85 = 256;
          }
          else {
            unsigned int v85 = v87;
          }
          memset_pattern16((void *)(v17 + 8 * v42), &unk_10040A740, 8 * v85);
          if (v85 >= 0x100) {
            goto LABEL_76;
          }
        }
        memset_pattern16((void *)(v17 + 8 * (int)(v42 + v85)), &unk_10040A740, ((8 * v85) ^ 0x7F8) + 8);
LABEL_76:
        v42 += 256;
        ++a4;
        if (v84 == v42) {
          return;
        }
      }
    }
    int v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = *(void *)(a1 + 64);
    uint64_t v65 = *(void *)(a1 + 72);
    do
    {
      int v66 = 0;
      int v67 = v62;
      double v68 = a4[v63];
      int v69 = (int)*v68;
      if (*v68 > (float)v69) {
        ++v69;
      }
      if (v69 >= 256) {
        int v70 = 256;
      }
      else {
        int v70 = v69;
      }
      uint64_t v71 = *(void *)(v65 + 8 * v63);
      uint64_t v72 = *(_DWORD *)(v64 + 4 * v63) - 1;
      unint64_t v73 = 0x4000000000000000;
      uint64_t v74 = -1;
      if (v70 > 0)
      {
LABEL_63:
        unint64_t v77 = v70 - (uint64_t)v66;
        unint64_t v78 = v66;
        if (v77 < 4) {
          goto LABEL_67;
        }
        unint64_t v78 = (v77 & 0xFFFFFFFFFFFFFFFCLL) + v66;
        int64x2_t v79 = vdupq_n_s64(v73);
        float64x2_t v80 = (int64x2_t *)(v17 + 16 + 8 * (v62 + (uint64_t)v66));
        unint64_t v81 = v77 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v80[-1] = v79;
          *float64x2_t v80 = v79;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 != (v77 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_67:
          float64x2_t v82 = (unint64_t *)(v17 + 8 * (v62 + v78));
          unint64_t v83 = v70 - v78;
          do
          {
            *v82++ = v73;
            --v83;
          }
          while (v83);
        }
        int v66 = v70;
      }
      while (v74 != v72)
      {
        int v75 = &v68[v74++];
        float v76 = v75[2];
        int v70 = (int)v76;
        if (v76 > (float)(int)v76) {
          ++v70;
        }
        if (v70 >= 256) {
          int v70 = 256;
        }
        unint64_t v73 = v71 * v74;
        if (v66 < v70) {
          goto LABEL_63;
        }
      }
      if (v66 <= 255) {
        memset_pattern16((void *)(v17 + 8 * ((v63 << 8) + v66)), &unk_10040A740, 8 * (255 - v66) + 8);
      }
      ++v63;
      int v62 = v67 + 256;
    }
    while (v63 != a3);
  }
}

void sub_100358A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100358A20()
{
  sub_1002B5E74(&qword_1004F8D40, (uint64_t)"opencv-hist", (uint64_t)sub_100357A80, (uint64_t)sub_1003575C4, (uint64_t)sub_100357AAC, (uint64_t)sub_100358108, (uint64_t)sub_1003582EC);

  return __cxa_atexit((void (*)(void *))sub_1002B5ED0, &qword_1004F8D40, (void *)&_mh_execute_header);
}

void sub_100358AD0(uint64_t a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7)
{
  sub_1002D6AE8(v45, &off_10049B048);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    long long v15 = *(_OWORD *)(v14 + 16);
    long long v37 = *(_OWORD *)v14;
    long long v16 = *(_OWORD *)(v14 + 32);
    long long v38 = v15;
    long long v39 = v16;
    uint64_t v17 = *(void *)(v14 + 56);
    uint64_t v40 = *(void *)(v14 + 48);
    uint64_t v41 = v17;
    uint64_t v42 = (char *)&v37 + 8;
    int v43 = v44;
    v44[0] = 0;
    v44[1] = 0;
    if (v17) {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v37) = 0;
      sub_1002931A8((uint64_t)&v37, v14);
    }
    else
    {
      unint64_t v18 = *(void **)(v14 + 72);
      uint64_t v19 = v43;
      *(void *)int v43 = *v18;
      v19[1] = v18[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v37);
  }
  __p = 0;
  int64x2_t v35 = 0;
  uint64_t v36 = 0;
  float v20 = a4;
  float v21 = a5;
  sub_100358DDC((uint64_t)&v37, a3, (uint64_t)rint(a6), (uint64_t)rint(a7), &__p, 0x7FFFFFFF, v20, v21);
  uint64_t v26 = 0x242FF401CLL;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  int32x4_t v31 = v27;
  float64x2_t v32 = &v33;
  int64x2_t v33 = 0uLL;
  v27[0] = (unint64_t)(v35 - (unsigned char *)__p) >> 4;
  v27[1] = 1;
  if (v35 != __p)
  {
    int64x2_t v33 = vdupq_n_s64(0x10uLL);
    *(void *)&long long v28 = __p;
    *((void *)&v28 + 1) = __p;
    *(void *)&long long v29 = (char *)__p + 16 * (int)((v35 - (unsigned char *)__p) >> 4);
    *((void *)&v29 + 1) = v29;
  }
  sub_10025401C((uint64_t)&v26, a2);
  if (*((void *)&v30 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v30 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v26);
  }
  *((void *)&v30 + 1) = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  if (SHIDWORD(v26) >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = v31;
    do
      v23[v22++] = 0;
    while (v22 < SHIDWORD(v26));
  }
  if (v32 != &v33) {
    j__free(v32);
  }
  if (__p)
  {
    int64x2_t v35 = __p;
    operator delete(__p);
  }
  if (v41 && atomic_fetch_add((atomic_uint *volatile)(v41 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v37);
  }
  uint64_t v41 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  if (SDWORD1(v37) >= 1)
  {
    uint64_t v24 = 0;
    uint64_t v25 = v42;
    do
      *(_DWORD *)&v25[4 * v24++] = 0;
    while (v24 < SDWORD1(v37));
  }
  if (v43 != v44) {
    j__free(v43);
  }
  if (v46) {
    sub_1002D6888(v45);
  }
}

void sub_100358D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  sub_1000094F4((uint64_t)&a10);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1000094F4((uint64_t)&a25);
  sub_10020FA00(v25 - 96);
  _Unwind_Resume(a1);
}

void sub_100358DC8(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_100358DDC(uint64_t a1, int a2, int a3, int a4, void *a5, int a6, float a7, float a8)
{
  if ((*(_WORD *)a1 & 0xFFF) != 0)
  {
    *(void *)uint64_t v190 = 0;
    *(void *)&v190[8] = 0;
    qmemcpy((void *)sub_1002D19D8(v190, 57), "image.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 57);
    sub_1002D2278(-215, (uint64_t *)v190, "HoughLinesProbabilistic", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/hough.cpp", 425);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 12);
  double v178 = a8;
  uint64_t v13 = (uint64_t)rint(3.14159265 / a8);
  uint64_t v183 = *(unsigned int *)(a1 + 8);
  uint64_t v14 = (uint64_t)rintf((float)(int)((2 * (v183 + v12)) | 1) / a7);
  sub_10028FF44(v13, v14, 4u, (uint64_t)v190);
  LODWORD(v194[0]) = 1124007936;
  memset((char *)v194 + 4, 0, 32);
  memset((char *)&v194[4] + 4, 0, 28);
  uint64_t v195 = &v194[1];
  float32x4x4_t v196 = v197;
  v197[0] = 0;
  v197[1] = 0;
  (*(void (**)(void, unsigned char *, void *, uint64_t))(**(void **)v190 + 24))(*(void *)v190, v190, v194, 0xFFFFFFFFLL);
  sub_10000B6BC((uint64_t)v190);
  *(_DWORD *)uint64_t v190 = 1124007936;
  memset(&v190[4], 0, 60);
  float32x4x4_t v191 = &v190[8];
  uint64_t v192 = v193;
  v193[0] = 0;
  v193[1] = 0;
  __src = (void *)__PAIR64__(v12, v183);
  sub_100292534(v190, 2, (uint64_t *)&__src, 0);
  __src = 0;
  int64x2_t v199 = 0;
  int64x2_t v200 = 0;
  int v170 = a2;
  uint64_t v168 = a5;
  if (!v13)
  {
    long long v16 = 0;
    goto LABEL_13;
  }
  if ((v13 & 0x80000000) != 0) {
    sub_10000B98C();
  }
  size_t v15 = 8 * v13;
  long long v16 = (char *)operator new(v15);
  __src = v16;
  int64x2_t v200 = &v16[v15];
  bzero(v16, v15);
  int64x2_t v199 = &v16[v15];
  double v176 = (float)(1.0 / a7);
  uint64_t v17 = v13;
  if (v13 < 4uLL)
  {
    uint64_t v18 = 0;
LABEL_11:
    uint32x2_t v34 = (float *)&v16[8 * v18 + 4];
    do
    {
      __double2 v35 = __sincos_stret(v178 * (double)(int)v18);
      float v36 = v35.__cosval * v176;
      float v37 = v35.__sinval * v176;
      *(v34 - 1) = v36;
      *uint32x2_t v34 = v37;
      ++v18;
      v34 += 2;
    }
    while (v17 != v18);
    goto LABEL_13;
  }
  int v19 = v13;
  uint64_t v20 = v13 & 3;
  uint64_t v18 = v13 - v20;
  int32x4_t v21 = (int32x4_t)xmmword_100404900;
  uint64_t v22 = v18;
  uint64_t v23 = v16;
  do
  {
    int32x4_t v184 = v21;
    v24.i64[0] = v21.i32[0];
    v24.i64[1] = v21.i32[1];
    float64x2_t v25 = vcvtq_f64_s64(v24);
    v24.i64[0] = v184.i32[2];
    v24.i64[1] = v184.i32[3];
    float64x2_t v181 = vmulq_n_f64(vcvtq_f64_s64(v24), v178);
    float64x2_t v174 = vmulq_n_f64(v25, v178);
    __double2 v26 = __sincos_stret(v174.f64[1]);
    __double2 v28 = __sincos_stret(v174.f64[0]);
    v27.f64[0] = v28.__cosval;
    v27.f64[1] = v26.__cosval;
    float64x2_t v173 = v27;
    __double2 v29 = __sincos_stret(v181.f64[1]);
    __double2 v32 = __sincos_stret(v181.f64[0]);
    v31.f64[0] = v32.__cosval;
    v30.f64[0] = v32.__sinval;
    v31.f64[1] = v29.__cosval;
    v33.f64[0] = v28.__sinval;
    v33.f64[1] = v26.__sinval;
    v202.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v173, v176)), vmulq_n_f64(v31, v176));
    v30.f64[1] = v29.__sinval;
    v202.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v33, v176)), vmulq_n_f64(v30, v176));
    vst2q_f32((float *)v16, v202);
    v16 += 32;
    *(void *)&v31.f64[0] = 0x400000004;
    *(void *)&v31.f64[1] = 0x400000004;
    int32x4_t v21 = vaddq_s32(v184, (int32x4_t)v31);
    v22 -= 4;
  }
  while (v22);
  LODWORD(v13) = v19;
  long long v16 = v23;
  if (v20) {
    goto LABEL_11;
  }
LABEL_13:
  unsigned long long v182 = v16;
  uint64_t v38 = *(void *)&v190[16];
  int64x2_t v187 = 0;
  int64x2_t v188 = 0;
  unint64_t v189 = 0;
  uint64_t v185 = *(void *)&v190[16];
  unsigned int v175 = v13;
  if ((int)v183 < 1 || (int)v12 < 1)
  {
    int v70 = 0;
    goto LABEL_203;
  }
  int v177 = v14;
  int v179 = a4;
  long long v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  while (2)
  {
    uint64_t v43 = 0;
    uint64_t v44 = *(void *)(a1 + 16) + **(void **)(a1 + 72) * v42;
    uint64_t v45 = *(void *)&v190[16] + *(void *)v192 * v42;
    do
    {
      while (1)
      {
        while (!*(unsigned char *)(v44 + v43))
        {
          *(unsigned char *)(v45 + v43++) = 0;
          if (v43 == v12) {
            goto LABEL_16;
          }
        }
        *(unsigned char *)(v45 + v43) = 1;
        if (v41 >= v40) {
          break;
        }
        *(_DWORD *)uint64_t v41 = v43;
        *((_DWORD *)v41 + 1) = v42;
        v41 += 8;
        int64x2_t v188 = v41;
        if (++v43 == v12) {
          goto LABEL_16;
        }
      }
      int64_t v46 = v41 - v39;
      uint64_t v47 = (v41 - v39) >> 3;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61) {
        sub_10000B98C();
      }
      if ((v40 - v39) >> 2 > v48) {
        unint64_t v48 = (v40 - v39) >> 2;
      }
      if ((unint64_t)(v40 - v39) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49 >> 61) {
        sub_10000BA6C();
      }
      uint64_t v50 = (char *)operator new(8 * v49);
      unint64_t v51 = &v50[8 * v47];
      *(_DWORD *)unint64_t v51 = v43;
      *((_DWORD *)v51 + 1) = v42;
      if (v41 != v39)
      {
        unint64_t v52 = v41 - v39 - 8;
        if (v52 < 0x198) {
          goto LABEL_32;
        }
        unint64_t v56 = v52 & 0xFFFFFFFFFFFFFFF8;
        if (&v50[v46 - 8 - (v52 & 0xFFFFFFFFFFFFFFF8)] > &v50[v46 - 8]) {
          goto LABEL_32;
        }
        if (&v41[-v56 - 8] > v41 - 8) {
          goto LABEL_32;
        }
        unint64_t v57 = (unint64_t)&v50[v46 - 4];
        if (v57 - v56 > v57) {
          goto LABEL_32;
        }
        unint64_t v58 = v41 - 4;
        if (&v41[-v56 - 4] > v41 - 4) {
          goto LABEL_32;
        }
        unint64_t v59 = v52 >> 3;
        unint64_t v60 = v46 - v56;
        unint64_t v61 = &v50[v60 - 8];
        BOOL v62 = &v50[v60 - 4] >= v41 || &v58[-8 * v59] >= v51;
        BOOL v63 = !v62;
        BOOL v64 = (unint64_t)&v41[-8 * v59 - 8] >= v57 || v61 >= v58;
        if (!v64 || v63)
        {
LABEL_32:
          float v53 = v41;
          int v54 = &v50[8 * v47];
        }
        else
        {
          unint64_t v65 = v59 + 1;
          uint64_t v66 = (v59 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          float v53 = &v41[-8 * v66];
          int v54 = &v51[-8 * v66];
          int v67 = (const float *)(v41 - 32);
          double v68 = (float *)(v51 - 32);
          uint64_t v69 = v66;
          do
          {
            float32x4x2_t v201 = vld2q_f32(v67);
            v67 -= 8;
            vst2q_f32(v68, v201);
            v68 -= 8;
            v69 -= 4;
          }
          while (v69);
          if (v65 == v66)
          {
LABEL_34:
            uint64_t v40 = &v50[8 * v49];
            uint64_t v41 = v51 + 8;
            int64x2_t v187 = v54;
            int64x2_t v188 = v51 + 8;
            unint64_t v189 = v40;
            if (!v39) {
              goto LABEL_36;
            }
LABEL_35:
            operator delete(v39);
            goto LABEL_36;
          }
        }
        do
        {
          uint64_t v55 = *((void *)v53 - 1);
          v53 -= 8;
          *((void *)v54 - 1) = v55;
          v54 -= 8;
        }
        while (v53 != v39);
        goto LABEL_34;
      }
      int v54 = &v50[8 * v47];
      uint64_t v40 = &v50[8 * v49];
      uint64_t v41 = v51 + 8;
      int64x2_t v187 = v54;
      int64x2_t v188 = v51 + 8;
      unint64_t v189 = v40;
      if (v39) {
        goto LABEL_35;
      }
LABEL_36:
      uint64_t v38 = v185;
      int64x2_t v188 = v41;
      long long v39 = v54;
      ++v43;
    }
    while (v43 != v12);
LABEL_16:
    if (++v42 != v183) {
      continue;
    }
    break;
  }
  int v70 = v187;
  int v71 = v179;
  int v72 = v170;
  unint64_t v73 = v41 - v187;
  if ((int)((unint64_t)(v41 - v187) >> 3) >= 1)
  {
    int v74 = v170 - 1;
    int v75 = v177 - 1;
    if (v177 < 1) {
      int v75 = v177;
    }
    int v76 = v75 >> 1;
    uint64_t v77 = (v73 >> 3);
    uint64_t v78 = 4 * v177;
    unint64_t v79 = -1;
    uint64_t v180 = v187;
    while (1)
    {
      uint64_t v80 = v77;
      unint64_t v79 = HIDWORD(v79) + 4164903690 * v79;
      unint64_t v81 = (int *)&v70[8 * (v79 % v77)];
      int v82 = *v81;
      int v83 = v81[1];
      uint64_t v84 = v194[2];
      *(void *)unint64_t v81 = *(void *)&v70[8 * --v77];
      if (*(unsigned char *)(v38 + v82 + v83 * (int)v12)) {
        BOOL v85 = v175 == 0;
      }
      else {
        BOOL v85 = 1;
      }
      if (v85) {
        goto LABEL_65;
      }
      uint64_t v86 = 0;
      int v87 = 0;
      unsigned int v88 = (float *)(v182 + 4);
      int v89 = v74;
      do
      {
        uint64_t v90 = 4 * (int)(v76 + (uint64_t)rintf((float)(*v88 * (float)v83) + (float)((float)v82 * *(v88 - 1))));
        int v91 = *(_DWORD *)(v84 + v90);
        *(_DWORD *)(v84 + v90) = v91 + 1;
        if (v89 <= v91)
        {
          int v89 = v91 + 1;
          int v87 = v86;
        }
        ++v86;
        v88 += 2;
        v84 += v78;
      }
      while (v175 != v86);
      if (v89 < v72) {
        goto LABEL_65;
      }
      float v92 = *(float *)&v182[8 * v87];
      float v93 = *(float *)&v182[8 * v87 + 4];
      float v94 = fabsf(v93);
      float v95 = fabsf(v92);
      if (v92 > 0.0) {
        int v96 = 1;
      }
      else {
        int v96 = -1;
      }
      uint64_t v97 = (uint64_t)rintf((float)(v93 * -65536.0) / v95);
      if (v93 < 0.0) {
        int v98 = 1;
      }
      else {
        int v98 = -1;
      }
      uint64_t v99 = (uint64_t)rintf((float)(v92 * 65536.0) / v94);
      if (v94 > v95) {
        int v100 = v82;
      }
      else {
        int v100 = (v82 << 16) | 0x8000;
      }
      if (v94 > v95) {
        int v101 = (v83 << 16) | 0x8000;
      }
      else {
        int v101 = v83;
      }
      if (v94 > v95) {
        int v102 = v98;
      }
      else {
        int v102 = v97;
      }
      if (v94 > v95) {
        int v103 = v99;
      }
      else {
        int v103 = v96;
      }
      int v104 = v100 >> 16;
      if (v94 > v95) {
        int v105 = v100;
      }
      else {
        int v105 = v100 >> 16;
      }
      if (v105 < 0)
      {
        int v107 = 0;
        int v108 = 0;
        int v115 = 0;
        int v116 = 0;
      }
      else
      {
        int v106 = v101 >> 16;
        int v107 = 0;
        int v108 = 0;
        int v109 = 0;
        if (v94 > v95)
        {
          int v144 = v103 + v101;
          int v145 = v100;
          int v146 = v101 >> 16;
          while (v145 < (int)v12 && (v146 & 0x80000000) == 0 && v146 < (int)v183)
          {
            if (*(unsigned char *)(v38 + v146 * (int)v12 + v145))
            {
              int v109 = 0;
              int v107 = v145;
              int v108 = v146;
              int v146 = v144 >> 16;
              v144 += v103;
              v145 += v102;
              if (v145 < 0) {
                break;
              }
            }
            else
            {
              if (v109 >= v71) {
                break;
              }
              ++v109;
              int v146 = v144 >> 16;
              v144 += v103;
              v145 += v102;
              if (v145 < 0) {
                break;
              }
            }
          }
        }
        else
        {
          int v110 = v12 * v101;
          int v111 = v100 >> 16;
          int v112 = v101;
          int v113 = v100;
          int v114 = v12 * v103;
          while (v111 < (int)v12 && (v112 & 0x80000000) == 0 && v112 < (int)v183)
          {
            if (*(unsigned char *)(v38 + v110 + v111))
            {
              int v109 = 0;
              int v108 = v112;
              int v107 = v111;
              v112 += v103;
              v110 += v114;
              v113 += v102;
              int v111 = HIWORD(v113);
              if (v113 < 0) {
                break;
              }
            }
            else
            {
              if (v109 >= v71) {
                break;
              }
              ++v109;
              v112 += v103;
              v110 += v114;
              v113 += v102;
              int v111 = HIWORD(v113);
              if (v113 < 0) {
                break;
              }
            }
          }
        }
        int v115 = 0;
        int v116 = 0;
        if (v94 > v95)
        {
          int v151 = 0;
          int v152 = v101 - v103;
          int v153 = v100;
          while (v153 < (int)v12 && (v106 & 0x80000000) == 0 && v106 < (int)v183)
          {
            if (*(unsigned char *)(v38 + v106 * (int)v12 + v153))
            {
              int v151 = 0;
              int v115 = v153;
              int v116 = v106;
              v153 -= v102;
              int v106 = v152 >> 16;
              v152 -= v103;
              if (v153 < 0) {
                break;
              }
            }
            else
            {
              if (v151 >= v71) {
                break;
              }
              ++v151;
              v153 -= v102;
              int v106 = v152 >> 16;
              v152 -= v103;
              if (v153 < 0) {
                break;
              }
            }
          }
        }
        else
        {
          int v147 = 0;
          int v148 = v12 * v101;
          int v149 = v101;
          int v150 = v100;
          while (v104 < (int)v12 && (v149 & 0x80000000) == 0 && v149 < (int)v183)
          {
            if (*(unsigned char *)(v38 + v148 + v104))
            {
              int v147 = 0;
              int v115 = v104;
              int v116 = v149;
            }
            else
            {
              if (v147 >= v71) {
                break;
              }
              ++v147;
            }
            v149 -= v103;
            int v104 = (v150 - v102) >> 16;
            v148 -= v12 * v103;
            v150 -= v102;
            if (v150 < 0) {
              break;
            }
          }
        }
      }
      if (v115 - v107 >= 0) {
        int v117 = v115 - v107;
      }
      else {
        int v117 = v107 - v115;
      }
      int v118 = v100;
      int v119 = v101;
      if (v117 >= a3
        || (v116 - v108 >= 0 ? (v120 = v116 - v108) : (v120 = v108 - v116), int v118 = v100, v119 = v101, v120 >= a3))
      {
        while (1)
        {
          int v126 = v119 >> 16;
          int v127 = v118 >> 16;
          if (v94 > v95) {
            int v127 = v118;
          }
          else {
            int v126 = v119;
          }
          uint64_t v128 = v38 + v126 * (int)v12;
          if (*(unsigned char *)(v128 + v127))
          {
            uint64_t v129 = v194[2];
            uint64_t v130 = v175;
            unsigned int v131 = (float *)(v182 + 4);
            do
            {
              uint64_t v132 = 4
                   * (int)(v76 + (uint64_t)rintf((float)(*v131 * (float)v126) + (float)((float)v127 * *(v131 - 1))));
              --*(_DWORD *)(v129 + v132);
              v131 += 2;
              v129 += v78;
              --v130;
            }
            while (v130);
            *(unsigned char *)(v128 + v127) = 0;
          }
          if (v126 == v108 && v127 == v107) {
            break;
          }
          v118 += v102;
          v119 += v103;
        }
        while (1)
        {
          int v135 = v101 >> 16;
          int v136 = v100 >> 16;
          if (v94 > v95) {
            int v136 = v100;
          }
          else {
            int v135 = v101;
          }
          uint64_t v137 = v38 + v135 * (int)v12;
          if (*(unsigned char *)(v137 + v136))
          {
            uint64_t v138 = v194[2];
            uint64_t v139 = (float *)(v182 + 4);
            uint64_t v140 = v175;
            do
            {
              uint64_t v141 = 4
                   * (int)(v76 + (uint64_t)rintf((float)(*v139 * (float)v135) + (float)((float)v136 * *(v139 - 1))));
              --*(_DWORD *)(v138 + v141);
              v139 += 2;
              v138 += v78;
              --v140;
            }
            while (v140);
            *(unsigned char *)(v137 + v136) = 0;
          }
          if (v135 == v116 && v136 == v115) {
            break;
          }
          v100 -= v102;
          v101 -= v103;
        }
        v186[0] = v107;
        v186[1] = v108;
        v186[2] = v115;
        v186[3] = v116;
        sub_100359CD4((uint64_t)v168, v186);
        BOOL v143 = (int)((v168[1] - *v168) >> 4) >= a6 || v80 <= 1;
        int v72 = v170;
        uint64_t v38 = v185;
        int v70 = v180;
        int v74 = v170 - 1;
        if (v143) {
          break;
        }
      }
      else
      {
        uint64_t v121 = v100;
        int v122 = v101;
        if (v94 > v95)
        {
          int v154 = v100 - v107;
          uint64_t v155 = v38 + v100;
          int v156 = v101;
          while (1)
          {
            uint64_t v157 = (v156 >> 16) * (int)v12;
            if (*(unsigned char *)(v155 + v157)) {
              *(unsigned char *)(v155 + v157) = 0;
            }
            if (v156 >> 16 == v108 && !v154) {
              break;
            }
            v156 += v103;
            v154 += v102;
            v155 += v102;
          }
        }
        else
        {
          uint64_t v123 = v38 + (int)v12 * (uint64_t)v101;
          int v124 = v100;
          uint64_t v125 = v101 - (uint64_t)v108;
          while (1)
          {
            uint64_t v142 = (uint64_t)v124 >> 16;
            if (*(unsigned char *)(v123 + v142)) {
              *(unsigned char *)(v123 + v142) = 0;
            }
            if (!v125 && v142 == v107) {
              break;
            }
            v124 += v102;
            v125 += v103;
            v123 += (int)v12 * (uint64_t)v103;
          }
        }
        if (v94 > v95)
        {
          int v161 = v115 - v100;
          uint64_t v162 = v38 + v121;
          int v70 = v180;
          int v74 = v170 - 1;
          while (1)
          {
            uint64_t v163 = (v101 >> 16) * (int)v12;
            if (*(unsigned char *)(v162 + v163)) {
              *(unsigned char *)(v162 + v163) = 0;
            }
            if (v101 >> 16 == v116 && !v161) {
              break;
            }
            v101 -= v103;
            v161 += v102;
            v162 -= v102;
          }
        }
        else
        {
          uint64_t v158 = v116 - (uint64_t)v101;
          uint64_t v159 = v38 + (int)v12 * (uint64_t)v122;
          int v70 = v180;
          int v74 = v170 - 1;
          while (1)
          {
            uint64_t v160 = (uint64_t)v100 >> 16;
            if (*(unsigned char *)(v159 + v160)) {
              *(unsigned char *)(v159 + v160) = 0;
            }
            if (!v158 && v160 == v115) {
              break;
            }
            v100 -= v102;
            v158 += v103;
            v159 += -(uint64_t)(int)v12 * v103;
          }
        }
LABEL_65:
        if (v80 <= 1) {
          break;
        }
      }
    }
  }
LABEL_203:
  if (v70) {
    operator delete(v70);
  }
  if (__src) {
    operator delete(__src);
  }
  if (*(void *)&v190[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v190[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v190);
  }
  *(void *)&v190[56] = 0;
  memset(&v190[16], 0, 32);
  if (*(int *)&v190[4] >= 1)
  {
    uint64_t v164 = 0;
    uint64_t v165 = v191;
    do
      *(_DWORD *)&v165[4 * v164++] = 0;
    while (v164 < *(int *)&v190[4]);
  }
  if (v192 != v193) {
    j__free(v192);
  }
  if (v194[7] && atomic_fetch_add((atomic_uint *volatile)(v194[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v194);
  }
  v194[7] = 0;
  memset(&v194[2], 0, 32);
  if (SHIDWORD(v194[0]) >= 1)
  {
    uint64_t v166 = 0;
    uint64_t v167 = v195;
    do
      *((_DWORD *)v167 + v166++) = 0;
    while (v166 < SHIDWORD(v194[0]));
  }
  if (v196 != v197) {
    j__free(v196);
  }
}

void sub_100359C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100359C94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(void *)(v40 - 136)) {
    JUMPOUT(0x100359CB8);
  }
  JUMPOUT(0x100359CBCLL);
}

void sub_100359CD4(uint64_t a1, _DWORD *a2)
{
  unsigned int v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  int v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)unsigned int v5 = *a2;
    *((_DWORD *)v5 + 1) = a2[1];
    *((_DWORD *)v5 + 2) = a2[2];
    *((_DWORD *)v5 + 3) = a2[3];
    uint64_t v7 = v5 + 16;
    goto LABEL_24;
  }
  uint64_t v8 = *(char **)a1;
  uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
  unint64_t v10 = (v9 >> 4) + 1;
  if (v10 >> 60) {
    sub_10000B98C();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 60) {
      sub_10000BA6C();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[16 * (v9 >> 4)];
  size_t v15 = &v13[16 * v12];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
  uint64_t v7 = v14 + 16;
  if (v5 == v8)
  {
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (!v8) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  unint64_t v16 = v5 - v8 - 16;
  if (v16 < 0x70 || &v13[v9 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v5 && &v5[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v14) {
    goto LABEL_20;
  }
  uint64_t v17 = (v16 >> 4) + 1;
  uint64_t v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
  int v6 = &v5[-v18];
  int v19 = &v14[-v18];
  uint64_t v20 = (const float *)(v5 - 64);
  int32x4_t v21 = (float *)(v14 - 64);
  uint64_t v22 = v17 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    float32x4x4_t v24 = vld4q_f32(v20);
    vst4q_f32(v21, v24);
    v21 -= 16;
    v20 -= 16;
    v22 -= 4;
  }
  while (v22);
  uint64_t v14 = v19;
  if (v17 != (v17 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_20:
    int v19 = v14;
    do
    {
      int v23 = *((_DWORD *)v6 - 4);
      v6 -= 16;
      *((_DWORD *)v19 - 4) = v23;
      v19 -= 16;
      *((_DWORD *)v19 + 1) = *((_DWORD *)v6 + 1);
      *((_DWORD *)v19 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v19 + 3) = *((_DWORD *)v6 + 3);
    }
    while (v6 != v8);
  }
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v15;
  if (v8) {
LABEL_23:
  }
    operator delete(v8);
LABEL_24:
  *(void *)(a1 + 8) = v7;
}

void sub_100359E98()
{
}

void sub_100359FBC()
{
}

void *sub_100359FE0(void *a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v18 = sub_10020F994(a1);
  *((_DWORD *)v18 + 2) = 1124007936;
  void *v18 = off_10049B078;
  *(_OWORD *)((char *)v18 + 12) = 0u;
  *(_OWORD *)((char *)v18 + 28) = 0u;
  *(_OWORD *)((char *)v18 + 44) = 0u;
  *(_OWORD *)(v18 + 7) = 0u;
  *(_OWORD *)(v18 + 11) = 0u;
  v18[9] = v18 + 2;
  v18[10] = v18 + 11;
  *((_DWORD *)v18 + 26) = 1124007936;
  *(_OWORD *)((char *)v18 + 108) = 0u;
  *(_OWORD *)((char *)v18 + 124) = 0u;
  *(_OWORD *)((char *)v18 + 140) = 0u;
  *(_OWORD *)(v18 + 19) = 0u;
  *(_OWORD *)(v18 + 23) = 0u;
  v18[21] = v18 + 14;
  v18[22] = v18 + 23;
  *(_OWORD *)((char *)v18 + 204) = 0u;
  *(_OWORD *)((char *)v18 + 220) = 0u;
  *(_OWORD *)((char *)v18 + 236) = 0u;
  *(_OWORD *)(v18 + 31) = 0u;
  *((_DWORD *)v18 + 50) = 1124007942;
  *(_OWORD *)(v18 + 35) = 0u;
  v18[33] = v18 + 26;
  v18[34] = v18 + 35;
  *(_OWORD *)(v18 + 43) = 0u;
  *(_OWORD *)((char *)v18 + 332) = 0u;
  *(_OWORD *)((char *)v18 + 316) = 0u;
  *(_OWORD *)((char *)v18 + 300) = 0u;
  *(_OWORD *)(v18 + 47) = 0u;
  v18[45] = v18 + 38;
  v18[46] = v18 + 47;
  *((_DWORD *)v18 + 74) = 1124007942;
  *(_OWORD *)(v18 + 55) = 0u;
  *(_OWORD *)((char *)v18 + 428) = 0u;
  *(_OWORD *)((char *)v18 + 412) = 0u;
  *(_OWORD *)((char *)v18 + 396) = 0u;
  *(_OWORD *)(v18 + 59) = 0u;
  v18[57] = v18 + 50;
  v18[58] = v18 + 59;
  *((_DWORD *)v18 + 98) = 1124007936;
  *(_DWORD *)((char *)v18 + 503) = 0;
  *(_OWORD *)(v18 + 61) = 0u;
  *((double *)v18 + 64) = a4;
  *((_DWORD *)v18 + 130) = a2;
  *((double *)v18 + 66) = a5;
  *((double *)v18 + 67) = a6;
  *((double *)v18 + 68) = a7;
  *((double *)v18 + 69) = a8;
  *((double *)v18 + 70) = a9;
  *((_DWORD *)v18 + 142) = a3;
  v18[74] = 0;
  *((_OWORD *)v18 + 36) = 0u;
  if (a3 < 1 || a9 >= 1.0 || a7 >= 180.0 || a4 <= 0.0 || a5 <= 0.0 || a6 < 0.0 || a7 <= 0.0 || a9 < 0.0)
  {
    v20[0] = 0;
    v20[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v20, 131), "_scale > 0 && _sigma_scale > 0 && _quant >= 0 && _ang_th > 0 && _ang_th < 180 && _density_th >= 0 && _density_th < 1 && _n_bins > 0", 131);
    sub_1002D2278(-215, v20, "LineSegmentDetectorImpl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 407);
  }
  return a1;
}

void sub_10035A244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  uint64_t v17 = *v15;
  if (*v15)
  {
    v9[73] = v17;
    operator delete(v17);
  }
  sub_10035A2A4(v14);
  sub_10026A98C(v13);
  sub_10026A98C(v12);
  sub_1000094F4(v11);
  sub_1000094F4(v10);
  sub_10020FA38(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10035A2A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1);
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 64);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 4));
  }
  unsigned int v5 = *(void **)(a1 + 72);
  if (v5 != (void *)(a1 + 80)) {
    j__free(v5);
  }
  return a1;
}

void sub_10035A338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1002D6AE8(v61, &off_10049B0D0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    long long v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)unint64_t v57 = *(_OWORD *)v12;
    *(_OWORD *)&v57[16] = v13;
    *(_OWORD *)&v57[32] = *(_OWORD *)(v12 + 32);
    uint64_t v14 = *(void *)(v12 + 56);
    *(void *)&v57[48] = *(void *)(v12 + 48);
    *(void *)&v57[56] = v14;
    unint64_t v58 = &v57[8];
    unint64_t v59 = &v60;
    int64x2_t v60 = 0uLL;
    if (v14) {
      atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
    }
    if (*(int *)(v12 + 4) > 2)
    {
      *(_DWORD *)&v57[4] = 0;
      sub_1002931A8((uint64_t)v57, v12);
    }
    else
    {
      size_t v15 = *(void **)(v12 + 72);
      unint64_t v16 = v59;
      *(void *)unint64_t v59 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)v57);
  }
  if ((unsigned char *)(a1 + 8) != v57)
  {
    uint64_t v17 = *(void *)(a1 + 64);
    if (v17 && atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 8);
    }
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    if (*(int *)(a1 + 12) >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a1 + 72);
      do
        *(_DWORD *)(v19 + 4 * v18++) = 0;
      while (v18 < *(int *)(a1 + 12));
    }
    int v20 = *(_DWORD *)&v57[4];
    long long v21 = *(_OWORD *)&v57[16];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v57;
    *(_OWORD *)(a1 + 24) = v21;
    long long v22 = *(_OWORD *)&v57[48];
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&v57[32];
    *(_OWORD *)(a1 + 56) = v22;
    int v23 = *(void **)(a1 + 80);
    if (v23 == (void *)(a1 + 88))
    {
      float32x4x4_t v24 = v59;
      if (v20 <= 2) {
        goto LABEL_17;
      }
    }
    else
    {
      j__free(v23);
      *(void *)(a1 + 72) = a1 + 16;
      *(void *)(a1 + 80) = a1 + 88;
      int v23 = (void *)(a1 + 88);
      float32x4x4_t v24 = v59;
      if (*(int *)&v57[4] <= 2)
      {
LABEL_17:
        *int v23 = *v24;
        v23[1] = v24[1];
LABEL_23:
        *(_DWORD *)unint64_t v57 = 1124007936;
        memset(&v57[4], 0, 60);
        goto LABEL_24;
      }
    }
    *(void *)(a1 + 72) = v58;
    *(void *)(a1 + 80) = v24;
    unint64_t v58 = &v57[8];
    unint64_t v59 = &v60;
    goto LABEL_23;
  }
  if (*(void *)&v57[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v57[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v57);
  }
LABEL_24:
  *(void *)&v57[56] = 0;
  memset(&v57[16], 0, 32);
  if (*(int *)&v57[4] >= 1)
  {
    uint64_t v25 = 0;
    __double2 v26 = v58;
    do
      *(_DWORD *)&v26[4 * v25++] = 0;
    while (v25 < *(int *)&v57[4]);
  }
  if (v59 != &v60) {
    j__free(v59);
  }
  if (!*(void *)(a1 + 24)) {
    goto LABEL_40;
  }
  uint64_t v27 = *(unsigned int *)(a1 + 12);
  if ((int)v27 >= 3)
  {
    uint64_t v29 = *(void *)(a1 + 72);
    float64x2_t v30 = (int *)(v29 + 4);
    uint64_t v31 = 1;
    uint64_t v32 = v27 & 0xFFFFFFFE;
    uint64_t v33 = 1;
    do
    {
      v31 *= *(v30 - 1);
      v33 *= *v30;
      v30 += 2;
      v32 -= 2;
    }
    while (v32);
    uint64_t v28 = v33 * v31;
    uint64_t v34 = v27 - (v27 & 0xFFFFFFFE);
    if (v34)
    {
      __double2 v35 = (int *)(v29 + ((4 * v27) & 0x3FFFFFFF8));
      do
      {
        uint64_t v36 = *v35++;
        v28 *= v36;
        --v34;
      }
      while (v34);
    }
  }
  else
  {
    uint64_t v28 = *(int *)(a1 + 20) * (uint64_t)*(int *)(a1 + 16);
  }
  if (!v27 || !v28 || (*(_WORD *)(a1 + 8) & 0xFFF) != 0)
  {
LABEL_40:
    *(_OWORD *)unint64_t v57 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v57, 75), "!image.empty() && image.type() == (((0) & ((1 << 3) - 1)) + (((1)-1) << 3))", 75);
    sub_1002D2278(-215, (uint64_t *)v57, "detect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 416);
  }
  int v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v53 = 0;
  unint64_t v48 = 0;
  unint64_t v49 = 0;
  uint64_t v50 = 0;
  __p = 0;
  int64_t v46 = 0;
  uint64_t v47 = 0;
  *(unsigned char *)(a1 + 504) = sub_10029FDC8(a4);
  *(unsigned char *)(a1 + 505) = sub_10029FDC8(a5);
  *(unsigned char *)(a1 + 506) = *(int *)(a1 + 520) > 1 && sub_10029FDC8(a6);
  sub_10035ABEC(a1, (uint64_t)&v54, (uint64_t)&v51, (uint64_t)&v48, (uint64_t)&__p);
  *(void *)unint64_t v57 = 0x242FF401DLL;
  memset(&v57[16], 0, 48);
  unint64_t v58 = &v57[8];
  unint64_t v59 = &v60;
  int64x2_t v60 = 0uLL;
  *(_DWORD *)&v57[8] = (unint64_t)(v55 - (unsigned char *)v54) >> 4;
  *(_DWORD *)&v57[12] = 1;
  if (v55 != v54)
  {
    int64x2_t v60 = vdupq_n_s64(0x10uLL);
    *(void *)&v57[16] = v54;
    *(void *)&v57[24] = v54;
    *(void *)&v57[32] = (char *)v54 + 16 * (int)((v55 - (unsigned char *)v54) >> 4);
    *(void *)&v57[40] = *(void *)&v57[32];
  }
  sub_10025401C((uint64_t)v57, a3);
  if (*(void *)&v57[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v57[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v57);
  }
  *(void *)&v57[56] = 0;
  memset(&v57[16], 0, 32);
  if (*(int *)&v57[4] >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = v58;
    do
      *(_DWORD *)&v38[4 * v37++] = 0;
    while (v37 < *(int *)&v57[4]);
  }
  if (v59 != &v60) {
    j__free(v59);
  }
  if (*(unsigned char *)(a1 + 504))
  {
    *(void *)unint64_t v57 = 0x242FF4006;
    memset(&v57[16], 0, 48);
    unint64_t v58 = &v57[8];
    unint64_t v59 = &v60;
    int64x2_t v60 = 0uLL;
    *(_DWORD *)&v57[8] = (unint64_t)(v52 - (unsigned char *)v51) >> 3;
    *(_DWORD *)&v57[12] = 1;
    if (v52 != v51)
    {
      int64x2_t v60 = vdupq_n_s64(8uLL);
      *(void *)&v57[16] = v51;
      *(void *)&v57[24] = v51;
      *(void *)&v57[32] = (char *)v51 + 8 * (int)((v52 - (unsigned char *)v51) >> 3);
      *(void *)&v57[40] = *(void *)&v57[32];
    }
    sub_10025401C((uint64_t)v57, a4);
    if (*(void *)&v57[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v57[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v57);
    }
    *(void *)&v57[56] = 0;
    memset(&v57[16], 0, 32);
    if (*(int *)&v57[4] >= 1)
    {
      uint64_t v39 = 0;
      uint64_t v40 = v58;
      do
        *(_DWORD *)&v40[4 * v39++] = 0;
      while (v39 < *(int *)&v57[4]);
    }
    if (v59 != &v60) {
      j__free(v59);
    }
  }
  if (*(unsigned char *)(a1 + 505))
  {
    *(void *)unint64_t v57 = 0x242FF4006;
    memset(&v57[16], 0, 48);
    unint64_t v58 = &v57[8];
    unint64_t v59 = &v60;
    int64x2_t v60 = 0uLL;
    *(_DWORD *)&v57[8] = (unint64_t)(v49 - (unsigned char *)v48) >> 3;
    *(_DWORD *)&v57[12] = 1;
    if (v49 != v48)
    {
      int64x2_t v60 = vdupq_n_s64(8uLL);
      *(void *)&v57[16] = v48;
      *(void *)&v57[24] = v48;
      *(void *)&v57[32] = (char *)v48 + 8 * (int)((v49 - (unsigned char *)v48) >> 3);
      *(void *)&v57[40] = *(void *)&v57[32];
    }
    sub_10025401C((uint64_t)v57, a5);
    if (*(void *)&v57[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v57[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v57);
    }
    *(void *)&v57[56] = 0;
    memset(&v57[16], 0, 32);
    if (*(int *)&v57[4] >= 1)
    {
      uint64_t v41 = 0;
      uint64_t v42 = v58;
      do
        *(_DWORD *)&v42[4 * v41++] = 0;
      while (v41 < *(int *)&v57[4]);
    }
    if (v59 != &v60) {
      j__free(v59);
    }
  }
  if (*(unsigned char *)(a1 + 506))
  {
    *(void *)unint64_t v57 = 0x242FF4006;
    memset(&v57[16], 0, 48);
    unint64_t v58 = &v57[8];
    unint64_t v59 = &v60;
    int64x2_t v60 = 0uLL;
    *(_DWORD *)&v57[8] = (unint64_t)(v46 - (unsigned char *)__p) >> 3;
    *(_DWORD *)&v57[12] = 1;
    if (v46 != __p)
    {
      int64x2_t v60 = vdupq_n_s64(8uLL);
      *(void *)&v57[16] = __p;
      *(void *)&v57[24] = __p;
      *(void *)&v57[32] = (char *)__p + 8 * (int)((v46 - (unsigned char *)__p) >> 3);
      *(void *)&v57[40] = *(void *)&v57[32];
    }
    sub_10025401C((uint64_t)v57, a6);
    if (*(void *)&v57[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v57[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v57);
    }
    *(void *)&v57[56] = 0;
    memset(&v57[16], 0, 32);
    if (*(int *)&v57[4] >= 1)
    {
      uint64_t v43 = 0;
      uint64_t v44 = v58;
      do
        *(_DWORD *)&v44[4 * v43++] = 0;
      while (v43 < *(int *)&v57[4]);
    }
    if (v59 != &v60) {
      j__free(v59);
    }
  }
  *(void *)(a1 + 584) = *(void *)(a1 + 576);
  if (__p)
  {
    int64_t v46 = __p;
    operator delete(__p);
  }
  if (v48)
  {
    unint64_t v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    unint64_t v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  if (v62) {
    sub_1002D6888(v61);
  }
}

void sub_10035AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v13 - 80);
  _Unwind_Resume(a1);
}

void sub_10035AB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a21);
  if (a9)
  {
    operator delete(a9);
    int v23 = a12;
    if (!a12)
    {
LABEL_3:
      float32x4x4_t v24 = a15;
      if (!a15) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int v23 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  float32x4x4_t v24 = a15;
  if (!a15)
  {
LABEL_4:
    uint64_t v25 = __p;
    if (!__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v24);
  uint64_t v25 = __p;
  if (!__p)
  {
LABEL_6:
    sub_10020FA00(v21 - 80);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v25);
  goto LABEL_6;
}

void sub_10035ABEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v9 = *(double *)(a1 + 544);
  v129[0] = v9 * 3.14159265 / 180.0;
  double v10 = *(double *)(a1 + 536);
  double v128 = v10 / sin(v129[0]);
  double v11 = *(double *)(a1 + 512);
  if (v11 != 1.0)
  {
    *(_DWORD *)int v115 = 1124007936;
    memset(&v115[4], 0, 60);
    int v116 = &v115[8];
    int v117 = &v118;
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    double v12 = *(double *)(a1 + 528) / fmin(v11, 1.0);
    int v126 = (char *)(a1 + 8);
    uint64_t v127 = 0;
    LODWORD(v125) = 16842752;
    unsigned int v122 = (2 * vcvtpd_u64_f64(v12 * 3.71692219)) | 1;
    v123.i32[0] = 33619968;
    v123.i64[1] = (uint64_t)v115;
    uint64_t v124 = 0;
    unsigned int v121 = v122;
    sub_10038B048((uint64_t)&v125, (uint64_t)&v123, (int *)&v121, 4, v12, 0.0);
    uint64_t v127 = 0;
    LODWORD(v125) = 16842752;
    int v126 = v115;
    v123.i32[0] = 33619968;
    v123.i64[1] = a1 + 104;
    uint64_t v124 = 0;
    uint64_t v120 = 0;
    sub_1003661B4((uint64_t)&v125, (uint64_t)&v123, (int *)&v120, 5, *(double *)(a1 + 512), *(double *)(a1 + 512));
    LODWORD(v125) = *(_DWORD *)(a1 + 568);
    sub_10035B5F8(a1, &v128, &v125);
    if (*(void *)&v115[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v115[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v115);
    }
    *(void *)&v115[56] = 0;
    memset(&v115[16], 0, 32);
    if (*(int *)&v115[4] >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v116;
      do
        *(_DWORD *)&v14[4 * v13++] = 0;
      while (v13 < *(int *)&v115[4]);
    }
    if (v117 != &v118) {
      j__free(v117);
    }
    goto LABEL_24;
  }
  uint64_t v15 = *(void *)(a1 + 64);
  if (v15) {
    atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
  }
  unint64_t v16 = (_DWORD *)(a1 + 104);
  uint64_t v17 = *(void *)(a1 + 160);
  if (v17 && atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  uint64_t v18 = (_DWORD *)(a1 + 8);
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) > 0)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(a1 + 168);
    do
    {
      *(_DWORD *)(v20 + 4 * v19++) = 0;
      uint64_t v21 = *(int *)(a1 + 108);
    }
    while (v19 < v21);
    _DWORD *v16 = *v18;
    if ((int)v21 <= 2)
    {
      int v22 = *(_DWORD *)(a1 + 12);
      if (v22 <= 2) {
        goto LABEL_20;
      }
    }
LABEL_22:
    sub_1002931A8(a1 + 104, (uint64_t)v18);
    goto LABEL_23;
  }
  _DWORD *v16 = *v18;
  int v22 = *(_DWORD *)(a1 + 12);
  if (v22 > 2) {
    goto LABEL_22;
  }
LABEL_20:
  *(_DWORD *)(a1 + 108) = v22;
  *(void *)(a1 + 112) = *(void *)(a1 + 16);
  int v23 = *(void **)(a1 + 80);
  float32x4x4_t v24 = *(void **)(a1 + 176);
  void *v24 = *v23;
  v24[1] = v23[1];
LABEL_23:
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 56);
  *(_DWORD *)int v115 = *(_DWORD *)(a1 + 568);
  sub_10035B5F8(a1, &v128, v115);
LABEL_24:
  double v25 = v9 / 180.0;
  double v26 = log10((double)*(int *)(a1 + 488));
  double v27 = (v26 + log10((double)*(int *)(a1 + 492))) * 5.0 * 0.5 + 1.04139269;
  *(double *)(a1 + 496) = v27;
  double v28 = log10(v25);
  uint64_t v125 = (char *)vrev64_s32(**(int32x2_t **)(a1 + 168));
  sub_100290470((uint64_t *)&v125, 0, (uint64_t)v115);
  (*(void (**)(void, unsigned char *, uint64_t, void))(**(void **)v115 + 24))(*(void *)v115, v115, a1 + 392, 0);
  sub_10000B6BC((uint64_t)v115);
  uint64_t v125 = 0;
  int v126 = 0;
  uint64_t v127 = 0;
  uint64_t v29 = *(void *)(a1 + 584) - *(void *)(a1 + 576);
  if (!v29) {
    return;
  }
  uint64_t v112 = a4;
  uint64_t v113 = a3;
  uint64_t v109 = a5;
  uint64_t v30 = 0;
  unint64_t v31 = (unint64_t)(-v27 / v28);
  unint64_t v32 = v29 >> 4;
  if (v32 <= 1) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = v32;
  }
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v110 = _Q0;
  do
  {
    uint64_t v40 = (int *)(*(void *)(a1 + 576) + 16 * v30);
    uint64_t v41 = *v40;
    uint64_t v42 = v40[1];
    if (*(unsigned char *)(*(void *)(a1 + 408) + **(void **)(a1 + 464) * v42 + v41)) {
      goto LABEL_31;
    }
    if (*(double *)(*(void *)(a1 + 216) + **(void **)(a1 + 272) * v42 + 8 * v41) == -1024.0) {
      goto LABEL_31;
    }
    double v114 = 0.0;
    sub_10035BF08(a1, v40, &v125, &v114, v129);
    if (v31 > (v126 - v125) >> 5) {
      goto LABEL_31;
    }
    double v43 = v114;
    double v44 = v129[0];
    sub_10035C358(a1, (uint64_t)&v125, (double *)v115, v114, v129[0], v25);
    double v45 = -1.0;
    if (*(int *)(a1 + 520) >= 1)
    {
      if ((sub_10035C614(a1, (uint64_t)&v125, (double *)v115, (double *)(a1 + 560), v43, v44, v25) & 1) == 0) {
        goto LABEL_31;
      }
      if (*(int *)(a1 + 520) >= 2)
      {
        double v45 = sub_10035C89C(a1, (long long *)v115);
        if (v45 <= *(double *)(a1 + 552)) {
          goto LABEL_31;
        }
      }
    }
    float64x2_t v46 = vaddq_f64(*(float64x2_t *)&v115[16], v110);
    float64x2_t v47 = vaddq_f64(*(float64x2_t *)v115, v110);
    uint64_t v48 = *(uint64_t *)(a1 + 512);
    if (*(double *)&v48 != 1.0)
    {
      float64x2_t v49 = (float64x2_t)vdupq_lane_s64(v48, 0);
      float64x2_t v46 = vdivq_f64(v46, v49);
      float64x2_t v47 = vdivq_f64(v47, v49);
      *(float64x2_t *)int v115 = v47;
      *(float64x2_t *)&v115[16] = v46;
      *(double *)&v115[32] = *(double *)&v115[32] / *(double *)&v48;
    }
    float32x4_t v123 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v47), v46);
    sub_10035D278(a2, &v123);
    if (*(unsigned char *)(a1 + 504))
    {
      unint64_t v51 = *(char **)(v113 + 8);
      unint64_t v50 = *(void *)(v113 + 16);
      if ((unint64_t)v51 < v50)
      {
        *(void *)unint64_t v51 = *(void *)&v115[32];
        uint64_t v52 = (uint64_t)(v51 + 8);
LABEL_63:
        *(void *)(v113 + 8) = v52;
        goto LABEL_64;
      }
      uint64_t v53 = *(char **)v113;
      uint64_t v54 = (uint64_t)&v51[-*(void *)v113];
      uint64_t v55 = v54 >> 3;
      unint64_t v56 = (v54 >> 3) + 1;
      if (v56 >> 61) {
        goto LABEL_113;
      }
      uint64_t v57 = v50 - (void)v53;
      if (v57 >> 2 > v56) {
        unint64_t v56 = v57 >> 2;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      if (v58)
      {
        if (v58 >> 61) {
          goto LABEL_112;
        }
        unint64_t v59 = operator new(8 * v58);
        int64x2_t v60 = &v59[8 * v55];
        *int64x2_t v60 = *(void *)&v115[32];
        uint64_t v52 = (uint64_t)(v60 + 1);
        if (v51 == v53) {
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v59 = 0;
        int64x2_t v60 = (void *)(8 * v55);
        *(void *)(8 * v55) = *(void *)&v115[32];
        uint64_t v52 = 8 * v55 + 8;
        if (v51 == v53)
        {
LABEL_61:
          *(void *)uint64_t v113 = v60;
          *(void *)(v113 + 8) = v52;
          *(void *)(v113 + 16) = &v59[8 * v58];
          if (v53) {
            operator delete(v53);
          }
          goto LABEL_63;
        }
      }
      unint64_t v61 = v51 - 8 - v53;
      if (v61 < 0x58) {
        goto LABEL_116;
      }
      if ((unint64_t)(v51 - &v59[v54]) < 0x20) {
        goto LABEL_116;
      }
      uint64_t v62 = (v61 >> 3) + 1;
      uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
      BOOL v64 = &v51[-v63];
      int64x2_t v60 = (void *)((char *)v60 - v63);
      unint64_t v65 = &v59[8 * v55 - 16];
      uint64_t v66 = v51 - 16;
      uint64_t v67 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v68 = *(_OWORD *)v66;
        *(v65 - 1) = *((_OWORD *)v66 - 1);
        *unint64_t v65 = v68;
        v65 -= 2;
        v66 -= 32;
        v67 -= 4;
      }
      while (v67);
      unint64_t v51 = v64;
      if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_116:
        do
        {
          uint64_t v69 = *((void *)v51 - 1);
          v51 -= 8;
          *--int64x2_t v60 = v69;
        }
        while (v51 != v53);
      }
      goto LABEL_61;
    }
LABEL_64:
    if (*(unsigned char *)(a1 + 505))
    {
      int v71 = *(char **)(v112 + 8);
      unint64_t v70 = *(void *)(v112 + 16);
      if ((unint64_t)v71 < v70)
      {
        *(void *)int v71 = v119;
        uint64_t v72 = (uint64_t)(v71 + 8);
LABEL_86:
        *(void *)(v112 + 8) = v72;
        goto LABEL_87;
      }
      unint64_t v73 = *(char **)v112;
      uint64_t v74 = (uint64_t)&v71[-*(void *)v112];
      uint64_t v75 = v74 >> 3;
      unint64_t v76 = (v74 >> 3) + 1;
      if (v76 >> 61) {
        goto LABEL_113;
      }
      uint64_t v77 = v70 - (void)v73;
      if (v77 >> 2 > v76) {
        unint64_t v76 = v77 >> 2;
      }
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v76;
      }
      if (v78)
      {
        if (v78 >> 61) {
          goto LABEL_112;
        }
        unint64_t v79 = operator new(8 * v78);
        uint64_t v80 = &v79[8 * v75];
        *uint64_t v80 = v119;
        uint64_t v72 = (uint64_t)(v80 + 1);
        if (v71 == v73) {
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v79 = 0;
        uint64_t v80 = (void *)(8 * v75);
        *(void *)(8 * v75) = v119;
        uint64_t v72 = 8 * v75 + 8;
        if (v71 == v73)
        {
LABEL_84:
          *(void *)uint64_t v112 = v80;
          *(void *)(v112 + 8) = v72;
          *(void *)(v112 + 16) = &v79[8 * v78];
          if (v73) {
            operator delete(v73);
          }
          goto LABEL_86;
        }
      }
      unint64_t v81 = v71 - 8 - v73;
      if (v81 < 0x58) {
        goto LABEL_117;
      }
      if ((unint64_t)(v71 - &v79[v74]) < 0x20) {
        goto LABEL_117;
      }
      uint64_t v82 = (v81 >> 3) + 1;
      uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v84 = &v71[-v83];
      uint64_t v80 = (void *)((char *)v80 - v83);
      BOOL v85 = &v79[8 * v75 - 16];
      uint64_t v86 = v71 - 16;
      uint64_t v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v88 = *(_OWORD *)v86;
        *(v85 - 1) = *((_OWORD *)v86 - 1);
        *BOOL v85 = v88;
        v85 -= 2;
        v86 -= 32;
        v87 -= 4;
      }
      while (v87);
      int v71 = v84;
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_117:
        do
        {
          uint64_t v89 = *((void *)v71 - 1);
          v71 -= 8;
          *--uint64_t v80 = v89;
        }
        while (v71 != v73);
      }
      goto LABEL_84;
    }
LABEL_87:
    if (*(unsigned char *)(a1 + 506) && *(int *)(a1 + 520) >= 2)
    {
      int v91 = *(double **)(v109 + 8);
      unint64_t v90 = *(void *)(v109 + 16);
      if ((unint64_t)v91 >= v90)
      {
        float v92 = *(double **)v109;
        uint64_t v93 = (uint64_t)v91 - *(void *)v109;
        uint64_t v94 = v93 >> 3;
        unint64_t v95 = (v93 >> 3) + 1;
        if (v95 >> 61) {
LABEL_113:
        }
          sub_10000B98C();
        uint64_t v96 = v90 - (void)v92;
        if (v96 >> 2 > v95) {
          unint64_t v95 = v96 >> 2;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          if (v97 >> 61) {
LABEL_112:
          }
            sub_10000BA6C();
          int v98 = operator new(8 * v97);
          uint64_t v99 = (double *)&v98[8 * v94];
          *uint64_t v99 = v45;
          uint64_t v39 = (uint64_t)(v99 + 1);
          if (v91 == v92)
          {
LABEL_107:
            *(void *)uint64_t v109 = v99;
            *(void *)(v109 + 8) = v39;
            *(void *)(v109 + 16) = &v98[8 * v97];
            if (v92) {
              operator delete(v92);
            }
            goto LABEL_30;
          }
        }
        else
        {
          int v98 = 0;
          uint64_t v99 = (double *)(8 * v94);
          *(double *)(8 * v94) = v45;
          uint64_t v39 = 8 * v94 + 8;
          if (v91 == v92) {
            goto LABEL_107;
          }
        }
        unint64_t v100 = (char *)(v91 - 1) - (char *)v92;
        if (v100 < 0x58) {
          goto LABEL_118;
        }
        if ((unint64_t)((char *)v91 - &v98[v93]) < 0x20) {
          goto LABEL_118;
        }
        uint64_t v101 = (v100 >> 3) + 1;
        uint64_t v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
        int v103 = &v91[v102 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v99 = (double *)((char *)v99 - v102);
        int v104 = &v98[8 * v94 - 16];
        int v105 = v91 - 2;
        uint64_t v106 = v101 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v107 = *(_OWORD *)v105;
          *(v104 - 1) = *((_OWORD *)v105 - 1);
          _OWORD *v104 = v107;
          v104 -= 2;
          v105 -= 4;
          v106 -= 4;
        }
        while (v106);
        int v91 = v103;
        if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_118:
          do
          {
            uint64_t v108 = *((void *)v91-- - 1);
            *((void *)v99-- - 1) = v108;
          }
          while (v91 != v92);
        }
        goto LABEL_107;
      }
      double *v91 = v45;
      uint64_t v39 = (uint64_t)(v91 + 1);
LABEL_30:
      *(void *)(v109 + 8) = v39;
    }
LABEL_31:
    ++v30;
  }
  while (v30 != v33);
  if (v125)
  {
    int v126 = v125;
    operator delete(v125);
  }
}

void sub_10035B57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10035B590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10035B5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10035B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10000B6BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10035B5CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 176);
  if (v3)
  {
    *(void *)(v1 - 168) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035B5F8(uint64_t a1, double *a2, _DWORD *a3)
{
  uint64_t v5 = **(void **)(a1 + 168);
  *(_DWORD *)uint64_t v83 = 1124007936;
  memset(&v83[4], 0, 60);
  uint64_t v84 = &v83[8];
  BOOL v85 = &v86;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t __src = v5;
  sub_100292534(v83, 2, &__src, 6);
  if ((unsigned char *)(a1 + 200) != v83)
  {
    uint64_t v6 = *(void *)(a1 + 256);
    if (v6 && atomic_fetch_add((atomic_uint *volatile)(v6 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 200);
    }
    *(void *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    if (*(int *)(a1 + 204) >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(a1 + 264);
      do
        *(_DWORD *)(v8 + 4 * v7++) = 0;
      while (v7 < *(int *)(a1 + 204));
    }
    int v9 = *(_DWORD *)&v83[4];
    long long v10 = *(_OWORD *)&v83[16];
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v83;
    *(_OWORD *)(a1 + 216) = v10;
    long long v11 = *(_OWORD *)&v83[48];
    *(_OWORD *)(a1 + 232) = *(_OWORD *)&v83[32];
    *(_OWORD *)(a1 + 248) = v11;
    double v12 = *(void **)(a1 + 272);
    if (v12 == (void *)(a1 + 280))
    {
      uint64_t v13 = v85;
      if (v9 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v12);
      *(void *)(a1 + 264) = a1 + 208;
      *(void *)(a1 + 272) = a1 + 280;
      double v12 = (void *)(a1 + 280);
      uint64_t v13 = v85;
      if (*(int *)&v83[4] <= 2)
      {
LABEL_10:
        *double v12 = *v13;
        v12[1] = v13[1];
        goto LABEL_21;
      }
    }
    *(void *)(a1 + 264) = v84;
    *(void *)(a1 + 272) = v13;
    uint64_t v84 = &v83[8];
    BOOL v85 = &v86;
LABEL_21:
    *(_DWORD *)uint64_t v83 = 1124007936;
    memset(&v83[4], 0, 60);
    unint64_t v16 = v85;
    if (v85 == &v86) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (*(void *)&v83[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v83[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v83);
  }
  *(void *)&v83[56] = 0;
  memset(&v83[16], 0, 32);
  if (*(int *)&v83[4] >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v84;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < *(int *)&v83[4]);
  }
  unint64_t v16 = v85;
  if (v85 != &v86) {
LABEL_22:
  }
    j__free(v16);
LABEL_23:
  uint64_t v17 = **(void **)(a1 + 168);
  *(_DWORD *)uint64_t v83 = 1124007936;
  memset(&v83[4], 0, 60);
  uint64_t v84 = &v83[8];
  BOOL v85 = &v86;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t __src = v17;
  sub_100292534(v83, 2, &__src, 6);
  if ((unsigned char *)(a1 + 296) == v83)
  {
    if (*(void *)&v83[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v83[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v83);
    }
    *(void *)&v83[56] = 0;
    memset(&v83[16], 0, 32);
    if (*(int *)&v83[4] >= 1)
    {
      uint64_t v26 = 0;
      double v27 = v84;
      do
        *(_DWORD *)&v27[4 * v26++] = 0;
      while (v26 < *(int *)&v83[4]);
    }
    double v28 = v85;
    if (v85 != &v86) {
      goto LABEL_44;
    }
    goto LABEL_45;
  }
  uint64_t v18 = *(void *)(a1 + 352);
  if (v18 && atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 296);
  }
  *(void *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  if (*(int *)(a1 + 300) >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(a1 + 360);
    do
      *(_DWORD *)(v20 + 4 * v19++) = 0;
    while (v19 < *(int *)(a1 + 300));
  }
  int v21 = *(_DWORD *)&v83[4];
  long long v22 = *(_OWORD *)&v83[16];
  *(_OWORD *)(a1 + 296) = *(_OWORD *)v83;
  *(_OWORD *)(a1 + 312) = v22;
  long long v23 = *(_OWORD *)&v83[48];
  *(_OWORD *)(a1 + 328) = *(_OWORD *)&v83[32];
  *(_OWORD *)(a1 + 344) = v23;
  float32x4x4_t v24 = *(void **)(a1 + 368);
  if (v24 == (void *)(a1 + 376))
  {
    double v25 = v85;
    if (v21 <= 2) {
      goto LABEL_32;
    }
  }
  else
  {
    j__free(v24);
    *(void *)(a1 + 360) = a1 + 304;
    *(void *)(a1 + 368) = a1 + 376;
    float32x4x4_t v24 = (void *)(a1 + 376);
    double v25 = v85;
    if (*(int *)&v83[4] <= 2)
    {
LABEL_32:
      void *v24 = *v25;
      v24[1] = v25[1];
      goto LABEL_43;
    }
  }
  *(void *)(a1 + 360) = v84;
  *(void *)(a1 + 368) = v25;
  uint64_t v84 = &v83[8];
  BOOL v85 = &v86;
LABEL_43:
  *(_DWORD *)uint64_t v83 = 1124007936;
  memset(&v83[4], 0, 60);
  double v28 = v85;
  if (v85 != &v86) {
LABEL_44:
  }
    j__free(v28);
LABEL_45:
  int32x2_t v29 = *(int32x2_t *)(a1 + 112);
  *(int32x2_t *)(a1 + 488) = vrev64_s32(v29);
  HIDWORD(__src) = v29.i32[0];
  LODWORD(__src) = v29.i32[0] - 1;
  uint64_t v88 = 0x7FFFFFFF80000000;
  sub_100293374((uint64_t)v83, (_DWORD *)(a1 + 200), (int *)&__src, &v88);
  uint64_t v88 = 0xC090000000000000;
  LODWORD(__src) = -1056833530;
  unint64_t v90 = &v88;
  uint64_t v91 = 0x100000001;
  uint64_t v30 = sub_1002A02C4();
  sub_100255630((uint64_t)v83, (uint64_t)&__src, (uint64_t)v30);
  if (*(void *)&v83[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v83[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v83);
  }
  *(void *)&v83[56] = 0;
  memset(&v83[16], 0, 32);
  if (*(int *)&v83[4] >= 1)
  {
    uint64_t v31 = 0;
    unint64_t v32 = v84;
    do
      *(_DWORD *)&v32[4 * v31++] = 0;
    while (v31 < *(int *)&v83[4]);
  }
  if (v85 != &v86) {
    j__free(v85);
  }
  int v33 = *(_DWORD *)(a1 + 488);
  uint64_t __src = 0x7FFFFFFF80000000;
  LODWORD(v88) = v33 - 1;
  HIDWORD(v88) = v33;
  sub_100293374((uint64_t)v83, (_DWORD *)(a1 + 200), (int *)&__src, &v88);
  uint64_t v88 = 0xC090000000000000;
  LODWORD(__src) = -1056833530;
  unint64_t v90 = &v88;
  uint64_t v91 = 0x100000001;
  uint64_t v34 = sub_1002A02C4();
  sub_100255630((uint64_t)v83, (uint64_t)&__src, (uint64_t)v34);
  if (*(void *)&v83[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v83[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v83);
  }
  *(void *)&v83[56] = 0;
  memset(&v83[16], 0, 32);
  if (*(int *)&v83[4] >= 1)
  {
    uint64_t v35 = 0;
    uint64_t v36 = v84;
    do
      *(_DWORD *)&v36[4 * v35++] = 0;
    while (v35 < *(int *)&v83[4]);
  }
  if (v85 != &v86) {
    j__free(v85);
  }
  int v37 = *(_DWORD *)(a1 + 492);
  LODWORD(v38) = *(_DWORD *)(a1 + 488);
  double v39 = -1.0;
  if (v37 >= 2)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 1;
    do
    {
      if ((int)v38 >= 2)
      {
        uint64_t v42 = 0;
        uint64_t v43 = **(void **)(a1 + 176);
        uint64_t v44 = *(void *)(a1 + 216) + **(void **)(a1 + 272) * v40;
        uint64_t v45 = *(void *)(a1 + 312) + **(void **)(a1 + 368) * v40;
        uint64_t v46 = *(void *)(a1 + 120) + 1;
        uint64_t v47 = v46 + v43 * v41;
        uint64_t v48 = v46 + v43 * v40;
        do
        {
          int v49 = *(unsigned __int8 *)(v47 + v42) - *(unsigned __int8 *)(v48 + v42 - 1);
          int v50 = *(unsigned __int8 *)(v48 + v42) - *(unsigned __int8 *)(v47 + v42 - 1);
          int v51 = v50 + v49;
          int v52 = v49 - v50;
          double v53 = sqrt((double)(v52 * v52 + v51 * v51) * 0.25);
          *(double *)(v45 + 8 * v42) = v53;
          if (v53 <= *a2)
          {
            *(void *)(v44 + 8 * v42) = 0xC090000000000000;
          }
          else
          {
            *(double *)(v44 + 8 * v42) = sub_10026BF14((float)v51, (float)-v52) * 0.0174532925;
            if (v53 > v39) {
              double v39 = v53;
            }
          }
          ++v42;
          uint64_t v38 = *(int *)(a1 + 488);
        }
        while (v42 < v38 - 1);
        int v37 = *(_DWORD *)(a1 + 492);
      }
      ++v40;
      ++v41;
    }
    while (v40 < v37 - 1);
  }
  unint64_t v54 = (int)v38 * v37;
  uint64_t v55 = *(void *)(a1 + 576);
  unint64_t v56 = (*(void *)(a1 + 584) - v55) >> 4;
  if (v54 <= v56)
  {
    if (v54 < v56) {
      *(void *)(a1 + 584) = v55 + 16 * v54;
    }
  }
  else
  {
    sub_10035FE9C(a1 + 576, v54 - v56);
  }
  uint64_t v57 = *a3;
  if (v57)
  {
    unint64_t v58 = (char *)operator new(8 * v57);
    bzero(v58, 8 * v57);
    unint64_t v59 = (char *)operator new(8 * v57);
    bzero(v59, 8 * v57);
    double v60 = 0.0;
    if (v39 <= 0.0) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  unint64_t v58 = 0;
  unint64_t v59 = 0;
  double v60 = 0.0;
  if (v39 > 0.0) {
LABEL_78:
  }
    double v60 = (double)(v57 - 1) / v39;
LABEL_79:
  int v61 = *(_DWORD *)(a1 + 492);
  if (v61 >= 2)
  {
    int v62 = *(_DWORD *)(a1 + 488);
    if (v62 >= 2)
    {
      uint64_t v63 = 0;
      int v64 = 0;
      uint64_t v65 = (v61 - 1);
      uint64_t v66 = *(void *)(a1 + 312);
      uint64_t v67 = **(void **)(a1 + 368);
      uint64_t v68 = (v62 - 1);
      do
      {
        uint64_t v69 = 0;
        do
        {
          double v70 = v60 * *(double *)(v66 + 8 * v69);
          uint64_t v71 = 8 * (int)v70;
          uint64_t v72 = *(void *)&v59[v71];
          uint64_t v73 = *(void *)(a1 + 576) + 16 * (v64 + v69);
          if (v72) {
            uint64_t v74 = (uint64_t *)(v72 + 8);
          }
          else {
            uint64_t v74 = (uint64_t *)&v58[v71];
          }
          *uint64_t v74 = v73;
          *(void *)&v59[8 * (int)v70] = v73;
          *(_DWORD *)uint64_t v73 = v69;
          *(_DWORD *)(v73 + 4) = v63;
          *(void *)(v73 + 8) = 0;
          ++v69;
        }
        while (v68 != v69);
        ++v63;
        v66 += v67;
        v64 += v69;
      }
      while (v63 != v65);
      LODWORD(v57) = *a3;
    }
  }
  int v75 = v57 - 1;
  while (1)
  {
    unsigned int v76 = v75;
    BOOL v77 = __OFSUB__(v75--, 1);
    if (v75 < 0 != v77) {
      break;
    }
    uint64_t v57 = (v57 - 1);
    if (*(void *)&v58[8 * v76])
    {
      uint64_t v78 = *(void *)&v59[8 * v76];
      unint64_t v79 = v57 + 1;
      do
      {
        uint64_t v80 = (v79 - 2);
        uint64_t v81 = *(void *)&v58[8 * v80];
        if (v81)
        {
          *(void *)(v78 + 8) = v81;
          uint64_t v78 = *(void *)&v59[8 * v80];
        }
        --v79;
      }
      while (v79 > 1);
      break;
    }
  }
  if (v59) {
    operator delete(v59);
  }
  if (v58) {
    operator delete(v58);
  }
}

void sub_10035BE7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10035BE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10026A98C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10035BEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10026A98C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10035BEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10035BF08(uint64_t a1, int *a2, char **a3, double *a4, double *a5)
{
  uint64_t v6 = a3;
  uint64_t v8 = *a3;
  a3[1] = *a3;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  long long v11 = (unsigned char *)(*(void *)(a1 + 408) + **(void **)(a1 + 464) * v10 + v9);
  uint64_t v12 = *(void *)(*(void *)(a1 + 216) + **(void **)(a1 + 272) * v10 + 8 * v9);
  *(void *)a4 = v12;
  uint64_t v13 = *(void *)(*(void *)(a1 + 312) + **(void **)(a1 + 368) * v10 + 8 * v9);
  unint64_t v14 = (unint64_t)a3[2];
  if ((unint64_t)v8 >= v14)
  {
    uint64_t v16 = v14 - (void)v8;
    uint64_t v17 = v16 >> 4;
    if ((unint64_t)(v16 >> 4) <= 1) {
      uint64_t v17 = 1;
    }
    BOOL v18 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    if (!v18) {
      unint64_t v19 = v17;
    }
    if (v19 >> 59) {
LABEL_51:
    }
      sub_10000BA6C();
    uint64_t v20 = 8 * v19;
    int v21 = operator new(32 * v19);
    *int v21 = v9;
    v21[1] = v10;
    *((void *)v21 + 1) = v11;
    *((void *)v21 + 2) = v12;
    *((void *)v21 + 3) = v13;
    uint64_t v15 = (char *)(v21 + 8);
    *uint64_t v6 = (char *)v21;
    v6[1] = (char *)(v21 + 8);
    v6[2] = (char *)&v21[v20];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v8 = v9;
    *((_DWORD *)v8 + 1) = v10;
    *((void *)v8 + 1) = v11;
    uint64_t v15 = v8 + 32;
    *((void *)v8 + 2) = v12;
    *((void *)v8 + 3) = v13;
  }
  v6[1] = v15;
  long long v22 = a4;
  double v23 = *a4;
  unsigned char *v11 = 1;
  double v25 = *v6;
  float32x4x4_t v24 = v6[1];
  if (v24 != *v6)
  {
    __double2 v26 = __sincos_stret(v23);
    uint64_t v27 = 0;
    float sinval = v26.__sinval;
    float cosval = v26.__cosval;
    double v60 = v6;
    while (1)
    {
      int32x2_t v30 = *(int32x2_t *)&v25[32 * v27];
      int32x2_t v31 = vmax_s32(v30, (int32x2_t)0x100000001);
      int32x2_t v32 = vmin_s32(vadd_s32(*(int32x2_t *)(a1 + 488), (int32x2_t)-1), vadd_s32(v30, (int32x2_t)0x100000001));
      int32x2_t v33 = vcgt_s32(vadd_s32(v31, (int32x2_t)-1), v32);
      if (((v33.i32[1] | v33.i32[0]) & 1) == 0) {
        break;
      }
LABEL_13:
      if (++v27 >= (unint64_t)((v24 - v25) >> 5)) {
        return;
      }
    }
    uint64_t v59 = v27;
    uint64_t v34 = (v32.i32[0] + 1);
    uint64_t v35 = v31.u32[1] - 1;
    uint64_t v63 = (v32.i32[1] + 1);
    uint64_t v64 = v31.u32[0] - 1;
LABEL_17:
    uint64_t v36 = *(void *)(a1 + 408) + **(void **)(a1 + 464) * v35;
    uint64_t v37 = *(void *)(a1 + 216) + **(void **)(a1 + 272) * v35;
    uint64_t v38 = *(void *)(a1 + 312) + **(void **)(a1 + 368) * v35;
    uint64_t v39 = v64;
    while (1)
    {
      if (((v39 | v35) & 0x80000000) != 0) {
        goto LABEL_20;
      }
      uint64_t v43 = (unsigned char *)(v36 + v39);
      if (*(unsigned char *)(v36 + v39) == 1) {
        goto LABEL_20;
      }
      if (v39 >= *(int *)(a1 + 212)) {
        goto LABEL_20;
      }
      if (v35 >= *(int *)(a1 + 208)) {
        goto LABEL_20;
      }
      double v44 = *(double *)(*(void *)(a1 + 216) + **(void **)(a1 + 272) * v35 + 8 * v39);
      if (v44 == -1024.0) {
        goto LABEL_20;
      }
      double v45 = *v22 - v44;
      if (v45 < 0.0) {
        double v45 = -v45;
      }
      if (v45 > 4.71238898)
      {
        double v45 = v45 + -6.28318531;
        if (v45 < 0.0) {
          double v45 = -v45;
        }
      }
      if (v45 > *a5) {
        goto LABEL_20;
      }
      *uint64_t v43 = 1;
      uint64_t v46 = *(void *)(v38 + 8 * v39);
      uint64_t v65 = v38;
      uint64_t v66 = v37;
      uint64_t v47 = *(void *)(v37 + 8 * v39);
      int v49 = v6[1];
      unint64_t v48 = (unint64_t)v6[2];
      if ((unint64_t)v49 < v48)
      {
        *(_DWORD *)int v49 = v39;
        *((_DWORD *)v49 + 1) = v35;
        *((void *)v49 + 1) = v43;
        uint64_t v40 = v49 + 32;
        *((void *)v49 + 2) = v47;
        *((void *)v49 + 3) = v46;
      }
      else
      {
        int v50 = a5;
        int v51 = *v6;
        uint64_t v52 = (v49 - v51) >> 5;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 59) {
          sub_10000B98C();
        }
        uint64_t v54 = v48 - (void)v51;
        if (v54 >> 4 > v53) {
          unint64_t v53 = v54 >> 4;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
        }
        unint64_t v61 = v53;
        if (v53)
        {
          if (v53 >> 59) {
            goto LABEL_51;
          }
          uint64_t v55 = (char *)operator new(32 * v53);
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = &v55[32 * v52];
        *(_DWORD *)unint64_t v56 = v39;
        *((_DWORD *)v56 + 1) = v35;
        *((void *)v56 + 1) = v43;
        *((void *)v56 + 2) = v47;
        *((void *)v56 + 3) = v46;
        uint64_t v57 = v56;
        if (v49 != v51)
        {
          a5 = v50;
          do
          {
            long long v58 = *((_OWORD *)v49 - 1);
            *((_OWORD *)v57 - 2) = *((_OWORD *)v49 - 2);
            *((_OWORD *)v57 - 1) = v58;
            v57 -= 32;
            v49 -= 32;
          }
          while (v49 != v51);
          uint64_t v6 = v60;
          int v49 = *v60;
          uint64_t v40 = v56 + 32;
          *double v60 = v57;
          v60[1] = v56 + 32;
          v60[2] = &v55[32 * v61];
          if (!v49) {
            goto LABEL_19;
          }
LABEL_48:
          operator delete(v49);
          goto LABEL_19;
        }
        uint64_t v6 = v60;
        a5 = v50;
        uint64_t v40 = v56 + 32;
        *double v60 = v56;
        v60[1] = v56 + 32;
        v60[2] = &v55[32 * v61];
        if (v49) {
          goto LABEL_48;
        }
      }
LABEL_19:
      v6[1] = v40;
      uint64_t v37 = v66;
      float v41 = *(double *)(v66 + 8 * v39);
      __float2 v42 = __sincosf_stret(v41);
      float cosval = cosval + v42.__cosval;
      float sinval = sinval + v42.__sinval;
      long long v22 = a4;
      *a4 = sub_10026BF14(sinval, cosval) * 0.0174532925;
      uint64_t v38 = v65;
LABEL_20:
      if (++v39 == v34)
      {
        if (++v35 == v63)
        {
          double v25 = *v6;
          float32x4x4_t v24 = v6[1];
          uint64_t v27 = v59;
          goto LABEL_13;
        }
        goto LABEL_17;
      }
    }
  }
}

void sub_10035C358(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, double a6)
{
  v49[1] = a5;
  double v50 = a4;
  uint64_t v10 = *(double **)a2;
  uint64_t v11 = *(void *)(a2 + 8) - *(void *)a2;
  if (!v11)
  {
    double v48 = 0.0;
    v49[0] = 0.0;
    goto LABEL_13;
  }
  unint64_t v12 = v11 >> 5;
  if (v12 <= 1) {
    unint64_t v12 = 1;
  }
  if (v12 < 2)
  {
    unint64_t v13 = 0;
    float64x2_t v14 = 0uLL;
    double v15 = 0.0;
LABEL_10:
    unint64_t v23 = v12 - v13;
    float32x4x4_t v24 = &v10[4 * v13];
    do
    {
      double v25 = v24[3];
      uint64_t v26 = *(void *)v24;
      v24 += 4;
      v27.i64[0] = (int)v26;
      v27.i64[1] = SHIDWORD(v26);
      float64x2_t v14 = vmlaq_n_f64(v14, vcvtq_f64_s64(v27), v25);
      double v15 = v15 + v25;
      --v23;
    }
    while (v23);
    goto LABEL_12;
  }
  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v16 = v10 + 4;
  float64x2_t v14 = 0uLL;
  double v15 = 0.0;
  unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    double v18 = *(v16 - 1);
    double v19 = v16[3];
    double v15 = v15 + v18 + v19;
    uint64_t v20 = *((void *)v16 - 4);
    v21.i64[0] = (int)v20;
    v21.i64[1] = SHIDWORD(v20);
    float64x2_t v22 = vcvtq_f64_s64(v21);
    v21.i64[0] = (int)*(void *)v16;
    v21.i64[1] = (int)HIDWORD(*(void *)v16);
    float64x2_t v14 = vaddq_f64(vaddq_f64(v14, vmulq_n_f64(v22, v18)), vmulq_n_f64(vcvtq_f64_s64(v21), v19));
    v16 += 8;
    v17 -= 2;
  }
  while (v17);
  if (v12 != v13) {
    goto LABEL_10;
  }
LABEL_12:
  double v48 = v14.f64[1];
  v49[0] = v14.f64[0];
  if (v15 <= 0.0)
  {
LABEL_13:
    v47[0] = 0;
    v47[1] = 0;
    double v28 = (_DWORD *)sub_1002D19D8(v47, 7);
    _DWORD *v28 = 544044403;
    *(_DWORD *)((char *)v28 + 3) = 807419424;
    sub_1002D2278(-215, v47, "region2rect", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 691);
  }
  double v29 = v14.f64[0] / v15;
  double v30 = v14.f64[1] / v15;
  double v48 = v14.f64[1] / v15;
  v49[0] = v14.f64[0] / v15;
  sub_10035D43C(a1, (double **)a2, v49, &v48, &v50);
  double v32 = v31;
  __double2 v33 = __sincos_stret(v31);
  uint64_t v34 = *(void *)(a2 + 8) - *(void *)a2;
  if (v34)
  {
    unint64_t v35 = v34 >> 5;
    if (v35 <= 1) {
      unint64_t v35 = 1;
    }
    uint64_t v36 = (int *)(*(void *)a2 + 4);
    double v37 = 0.0;
    double v38 = 0.0;
    double v39 = 0.0;
    double v40 = 0.0;
    do
    {
      double v41 = (double)*(v36 - 1) - v29;
      double v42 = (double)*v36 - v30;
      double v43 = v33.__sinval * v42 + v41 * v33.__cosval;
      double v44 = v33.__cosval * v42 - v41 * v33.__sinval;
      if (v43 < v40) {
        double v45 = v43;
      }
      else {
        double v45 = v40;
      }
      if (v43 > v39) {
        double v39 = v43;
      }
      else {
        double v40 = v45;
      }
      if (v44 > v37)
      {
        double v37 = v44;
      }
      else if (v44 < v38)
      {
        double v38 = v44;
      }
      v36 += 8;
      --v35;
    }
    while (v35);
    double v46 = v37 - v38;
  }
  else
  {
    double v40 = 0.0;
    double v39 = 0.0;
    double v46 = 0.0;
  }
  *a3 = v29 + v40 * v33.__cosval;
  a3[1] = v30 + v40 * v33.__sinval;
  a3[2] = v29 + v39 * v33.__cosval;
  a3[3] = v30 + v39 * v33.__sinval;
  a3[4] = v46;
  a3[5] = v29;
  a3[6] = v30;
  a3[7] = v32;
  a3[8] = v33.__cosval;
  a3[9] = v33.__sinval;
  a3[10] = a5;
  a3[11] = a6;
  if (v46 < 1.0) {
    a3[4] = 1.0;
  }
}

void sub_10035C5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10035C614(uint64_t a1, uint64_t a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v29 = a5;
  uint64_t v9 = *(char **)a2;
  uint64_t v10 = *(char **)(a2 + 8);
  if ((double)(unint64_t)((uint64_t)&v10[-*(void *)a2] >> 5)
     / (a3[4]
      * sqrt((a3[3] - a3[1]) * (a3[3] - a3[1]) + (a3[2] - *a3) * (a3[2] - *a3))) >= *a4)
    return 1;
  if (v10 == v9)
  {
    int v16 = 0;
    double v20 = 0.0;
    double v19 = 0.0;
  }
  else
  {
    unint64_t v15 = 0;
    int v16 = 0;
    double v17 = (double)*(int *)v9;
    double v18 = (double)*((int *)v9 + 1);
    double v19 = 0.0;
    uint64_t v10 = *(char **)a2;
    double v20 = 0.0;
    do
    {
      **(unsigned char **)&v10[32 * v15 + 8] = 0;
      uint64_t v10 = *(char **)a2;
      int64x2_t v21 = (int *)(*(void *)a2 + 32 * v15);
      if (sqrt(((double)v21[1] - v18) * ((double)v21[1] - v18) + ((double)*v21 - v17) * ((double)*v21 - v17)) < a3[4])
      {
        for (double i = *(double *)&v10[32 * v15 + 16] - *((double *)v9 + 2); i <= -3.14159265; double i = i + 6.28318531)
          ;
        while (i > 3.14159265)
          double i = i + -6.28318531;
        double v20 = v20 + i;
        double v19 = v19 + i * i;
        ++v16;
      }
      ++v15;
    }
    while (v15 < (uint64_t)(*(void *)(a2 + 8) - (void)v10) >> 5);
  }
  double v23 = sqrt((v19 + v20 / (double)v16 * -2.0 * v20) / (double)v16 + v20 / (double)v16 * (v20 / (double)v16));
  uint64_t v27 = *(void *)v10;
  double v28 = v23 + v23;
  sub_10035BF08(a1, (int *)&v27, (char **)a2, &v29, &v28);
  if (*(void *)(a2 + 8) - *(void *)a2 < 0x40uLL) {
    return 0;
  }
  double v25 = v29;
  sub_10035C358(a1, a2, a3, v29, a6, a7);
  double v26 = (double)(unint64_t)((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5)
      / (a3[4]
       * sqrt((a3[3] - a3[1]) * (a3[3] - a3[1]) + (a3[2] - *a3) * (a3[2] - *a3)));
  if (v26 >= *a4) {
    return 1;
  }
  else {
    return sub_10035D6D8(a1, (int **)a2, a3, a4, v25, a6, a7, v26);
  }
}

double sub_10035C89C(uint64_t a1, long long *a2)
{
  sub_10035D89C(a1, (uint64_t)a2);
  double v5 = v4;
  if (v4 <= *(double *)(a1 + 552))
  {
    long long v6 = a2[3];
    long long v164 = a2[2];
    long long v165 = v6;
    long long v7 = a2[5];
    long long v166 = a2[4];
    long long v167 = v7;
    long long v8 = a2[1];
    long long v162 = *a2;
    long long v163 = v8;
    double v9 = *((double *)&v7 + 1) * 0.5;
    *(double *)&long long v167 = *((double *)&v7 + 1) * 0.5 * 3.14159265;
    *((double *)&v167 + 1) = *((double *)&v7 + 1) * 0.5;
    sub_10035D89C(a1, (uint64_t)&v162);
    if (v10 > v5)
    {
      long long v11 = v165;
      a2[2] = v164;
      a2[3] = v11;
      long long v12 = v167;
      a2[4] = v166;
      a2[5] = v12;
      long long v13 = v163;
      double v5 = v10;
      *a2 = v162;
      a2[1] = v13;
    }
    *(double *)&long long v167 = v9 * 0.5 * 3.14159265;
    *((double *)&v167 + 1) = v9 * 0.5;
    sub_10035D89C(a1, (uint64_t)&v162);
    if (v14 > v5)
    {
      long long v15 = v165;
      a2[2] = v164;
      a2[3] = v15;
      long long v16 = v167;
      a2[4] = v166;
      a2[5] = v16;
      long long v17 = v163;
      double v5 = v14;
      *a2 = v162;
      a2[1] = v17;
    }
    double v18 = v9 * 0.5 * 0.5;
    *(double *)&long long v167 = v18 * 3.14159265;
    *((double *)&v167 + 1) = v18;
    sub_10035D89C(a1, (uint64_t)&v162);
    if (v19 > v5)
    {
      long long v20 = v165;
      a2[2] = v164;
      a2[3] = v20;
      long long v21 = v167;
      a2[4] = v166;
      a2[5] = v21;
      long long v22 = v163;
      double v5 = v19;
      *a2 = v162;
      a2[1] = v22;
    }
    double v23 = v18 * 0.5;
    *(double *)&long long v167 = v23 * 3.14159265;
    *((double *)&v167 + 1) = v23;
    sub_10035D89C(a1, (uint64_t)&v162);
    if (v24 > v5)
    {
      long long v25 = v165;
      a2[2] = v164;
      a2[3] = v25;
      long long v26 = v167;
      a2[4] = v166;
      a2[5] = v26;
      long long v27 = v163;
      double v5 = v24;
      *a2 = v162;
      a2[1] = v27;
    }
    *(double *)&long long v167 = v23 * 0.5 * 3.14159265;
    *((double *)&v167 + 1) = v23 * 0.5;
    sub_10035D89C(a1, (uint64_t)&v162);
    if (v28 > v5)
    {
      long long v29 = v165;
      a2[2] = v164;
      a2[3] = v29;
      long long v30 = v167;
      a2[4] = v166;
      a2[5] = v30;
      long long v31 = v163;
      double v5 = v28;
      *a2 = v162;
      a2[1] = v31;
    }
    if (v5 <= *(double *)(a1 + 552))
    {
      long long v32 = a2[3];
      long long v164 = a2[2];
      long long v165 = v32;
      long long v33 = a2[5];
      long long v166 = a2[4];
      long long v167 = v33;
      long long v34 = a2[1];
      long long v162 = *a2;
      long long v163 = v34;
      double v35 = *(double *)&v164 + -0.5;
      if (*(double *)&v164 + -0.5 >= 0.5)
      {
        *(double *)&long long v164 = *(double *)&v164 + -0.5;
        sub_10035D89C(a1, (uint64_t)&v162);
        if (v36 > v5)
        {
          long long v37 = v165;
          a2[2] = v164;
          a2[3] = v37;
          long long v38 = v167;
          a2[4] = v166;
          a2[5] = v38;
          long long v39 = v163;
          double v5 = v36;
          *a2 = v162;
          a2[1] = v39;
        }
      }
      else
      {
        double v35 = *(double *)&v164;
      }
      double v40 = v35 + -0.5;
      if (v35 + -0.5 >= 0.5)
      {
        *(double *)&long long v164 = v35 + -0.5;
        sub_10035D89C(a1, (uint64_t)&v162);
        if (v41 > v5)
        {
          long long v42 = v165;
          a2[2] = v164;
          a2[3] = v42;
          long long v43 = v167;
          a2[4] = v166;
          a2[5] = v43;
          long long v44 = v163;
          double v5 = v41;
          *a2 = v162;
          a2[1] = v44;
        }
      }
      else
      {
        double v40 = v35;
      }
      double v45 = v40 + -0.5;
      if (v40 + -0.5 >= 0.5)
      {
        *(double *)&long long v164 = v40 + -0.5;
        sub_10035D89C(a1, (uint64_t)&v162);
        if (v46 > v5)
        {
          long long v47 = v165;
          a2[2] = v164;
          a2[3] = v47;
          long long v48 = v167;
          a2[4] = v166;
          a2[5] = v48;
          long long v49 = v163;
          double v5 = v46;
          *a2 = v162;
          a2[1] = v49;
        }
      }
      else
      {
        double v45 = v40;
      }
      double v50 = v45 + -0.5;
      if (v45 + -0.5 >= 0.5)
      {
        *(double *)&long long v164 = v45 + -0.5;
        sub_10035D89C(a1, (uint64_t)&v162);
        if (v51 > v5)
        {
          long long v52 = v165;
          a2[2] = v164;
          a2[3] = v52;
          long long v53 = v167;
          a2[4] = v166;
          a2[5] = v53;
          long long v54 = v163;
          double v5 = v51;
          *a2 = v162;
          a2[1] = v54;
        }
      }
      else
      {
        double v50 = v45;
      }
      if (v50 + -0.5 >= 0.5)
      {
        *(double *)&long long v164 = v50 + -0.5;
        sub_10035D89C(a1, (uint64_t)&v162);
        if (v55 > v5)
        {
          long long v56 = v165;
          a2[2] = v164;
          a2[3] = v56;
          long long v57 = v167;
          a2[4] = v166;
          a2[5] = v57;
          long long v58 = v163;
          double v5 = v55;
          *a2 = v162;
          a2[1] = v58;
        }
      }
      if (v5 <= *(double *)(a1 + 552))
      {
        long long v59 = a2[1];
        long long v162 = *a2;
        long long v163 = v59;
        long long v60 = a2[3];
        long long v164 = a2[2];
        long long v165 = v60;
        long long v61 = a2[5];
        long long v166 = a2[4];
        long long v167 = v61;
        double v62 = *(double *)&v166;
        double v63 = -*((double *)&v166 + 1);
        double v64 = *((double *)&v163 + 1);
        double v65 = *((double *)&v162 + 1);
        double v66 = *(double *)&v162;
        double v67 = *(double *)&v163;
        double v68 = *(double *)&v164 + -0.5;
        double v158 = -*((double *)&v166 + 1);
        double v160 = *(double *)&v166;
        if (*(double *)&v164 + -0.5 >= 0.5)
        {
          double v66 = *(double *)&v162 + v63 * 0.25;
          double v65 = *((double *)&v162 + 1) + *(double *)&v166 * 0.25;
          *(double *)&long long v162 = v66;
          *((double *)&v162 + 1) = v65;
          double v67 = *(double *)&v163 + v63 * 0.25;
          double v64 = *((double *)&v163 + 1) + *(double *)&v166 * 0.25;
          *(double *)&long long v163 = v67;
          *((double *)&v163 + 1) = v64;
          *(double *)&long long v164 = *(double *)&v164 + -0.5;
          sub_10035D89C(a1, (uint64_t)&v162);
          if (v86 > v5)
          {
            long long v87 = v165;
            a2[2] = v164;
            a2[3] = v87;
            long long v88 = v167;
            a2[4] = v166;
            a2[5] = v88;
            long long v89 = v163;
            double v5 = v86;
            *a2 = v162;
            a2[1] = v89;
          }
          double v63 = v158;
          double v62 = v160;
          double v90 = v68 + -0.5;
          if (v68 + -0.5 >= 0.5)
          {
            double v66 = v66 + v158 * 0.25;
            double v65 = v65 + v160 * 0.25;
            *(double *)&long long v162 = v66;
            *((double *)&v162 + 1) = v65;
            double v67 = v67 + v158 * 0.25;
            double v64 = v64 + v160 * 0.25;
            *(double *)&long long v163 = v67;
            *((double *)&v163 + 1) = v64;
            *(double *)&long long v164 = v68 + -0.5;
            sub_10035D89C(a1, (uint64_t)&v162);
            if (v69 > v5)
            {
              long long v70 = v165;
              a2[2] = v164;
              a2[3] = v70;
              long long v71 = v167;
              a2[4] = v166;
              a2[5] = v71;
              long long v72 = v163;
              double v5 = v69;
              *a2 = v162;
              a2[1] = v72;
            }
            double v63 = v158;
            double v62 = v160;
            double v73 = -0.5;
            double v74 = v90 + -0.5;
            double v75 = 0.5;
            if (v90 + -0.5 < 0.5)
            {
LABEL_49:
              double v74 = v90;
              double v80 = v90 + v73;
              if (v80 < v75) {
                goto LABEL_50;
              }
              goto LABEL_41;
            }
LABEL_38:
            double v66 = v66 + v63 * 0.25;
            double v65 = v65 + v62 * 0.25;
            *(double *)&long long v162 = v66;
            *((double *)&v162 + 1) = v65;
            double v67 = v67 + v63 * 0.25;
            double v64 = v64 + v62 * 0.25;
            *(double *)&long long v163 = v67;
            *((double *)&v163 + 1) = v64;
            *(double *)&long long v164 = v74;
            sub_10035D89C(a1, (uint64_t)&v162);
            if (v76 > v5)
            {
              long long v77 = v165;
              a2[2] = v164;
              a2[3] = v77;
              long long v78 = v167;
              a2[4] = v166;
              a2[5] = v78;
              long long v79 = v163;
              double v5 = v76;
              *a2 = v162;
              a2[1] = v79;
            }
            double v63 = v158;
            double v62 = v160;
            double v80 = v74 + -0.5;
            if (v74 + -0.5 < 0.5)
            {
LABEL_50:
              double v85 = v74 + -0.5;
              if (v74 + -0.5 < 0.5) {
                goto LABEL_53;
              }
              goto LABEL_51;
            }
LABEL_41:
            double v66 = v66 + v63 * 0.25;
            double v65 = v65 + v62 * 0.25;
            *(double *)&long long v162 = v66;
            *((double *)&v162 + 1) = v65;
            double v67 = v67 + v63 * 0.25;
            double v64 = v64 + v62 * 0.25;
            *(double *)&long long v163 = v67;
            *((double *)&v163 + 1) = v64;
            *(double *)&long long v164 = v80;
            sub_10035D89C(a1, (uint64_t)&v162);
            if (v81 > v5)
            {
              long long v82 = v165;
              a2[2] = v164;
              a2[3] = v82;
              long long v83 = v167;
              a2[4] = v166;
              a2[5] = v83;
              long long v84 = v163;
              double v5 = v81;
              *a2 = v162;
              a2[1] = v84;
            }
            double v63 = v158;
            double v62 = v160;
            double v85 = v80 + -0.5;
            if (v80 + -0.5 < 0.5)
            {
LABEL_53:
              if (v5 > *(double *)(a1 + 552)) {
                return v5;
              }
              long long v95 = a2[1];
              long long v162 = *a2;
              long long v163 = v95;
              long long v96 = a2[3];
              long long v164 = a2[2];
              long long v165 = v96;
              long long v97 = a2[5];
              long long v166 = a2[4];
              long long v167 = v97;
              double v98 = *((double *)&v166 + 1);
              double v99 = *((double *)&v163 + 1);
              double v100 = -*(double *)&v166;
              double v101 = *((double *)&v162 + 1);
              double v102 = *(double *)&v162;
              double v103 = *(double *)&v163;
              double v104 = *(double *)&v164 + -0.5;
              double v159 = -*(double *)&v166;
              double v161 = *((double *)&v166 + 1);
              if (*(double *)&v164 + -0.5 >= 0.5)
              {
                double v102 = *(double *)&v162 + *((double *)&v166 + 1) * 0.25;
                double v101 = *((double *)&v162 + 1) + v100 * 0.25;
                *(double *)&long long v162 = v102;
                *((double *)&v162 + 1) = v101;
                double v103 = *(double *)&v163 + *((double *)&v166 + 1) * 0.25;
                double v99 = *((double *)&v163 + 1) + v100 * 0.25;
                *(double *)&long long v163 = v103;
                *((double *)&v163 + 1) = v99;
                *(double *)&long long v164 = *(double *)&v164 + -0.5;
                sub_10035D89C(a1, (uint64_t)&v162);
                if (v121 > v5)
                {
                  long long v122 = v165;
                  a2[2] = v164;
                  a2[3] = v122;
                  long long v123 = v167;
                  a2[4] = v166;
                  a2[5] = v123;
                  long long v124 = v163;
                  double v5 = v121;
                  *a2 = v162;
                  a2[1] = v124;
                }
                double v100 = v159;
                double v98 = v161;
                double v125 = v104 + -0.5;
                if (v104 + -0.5 >= 0.5)
                {
                  double v102 = v102 + v161 * 0.25;
                  double v101 = v101 + v159 * 0.25;
                  *(double *)&long long v162 = v102;
                  *((double *)&v162 + 1) = v101;
                  double v103 = v103 + v161 * 0.25;
                  double v99 = v99 + v159 * 0.25;
                  *(double *)&long long v163 = v103;
                  *((double *)&v163 + 1) = v99;
                  *(double *)&long long v164 = v104 + -0.5;
                  sub_10035D89C(a1, (uint64_t)&v162);
                  if (v105 > v5)
                  {
                    long long v106 = v165;
                    a2[2] = v164;
                    a2[3] = v106;
                    long long v107 = v167;
                    a2[4] = v166;
                    a2[5] = v107;
                    long long v108 = v163;
                    double v5 = v105;
                    *a2 = v162;
                    a2[1] = v108;
                  }
                  double v100 = v159;
                  double v98 = v161;
                  double v109 = -0.5;
                  double v110 = v125 + -0.5;
                  double v111 = 0.5;
                  if (v125 + -0.5 < 0.5)
                  {
LABEL_69:
                    double v110 = v125;
                    double v116 = v125 + v109;
                    if (v116 < v111)
                    {
LABEL_70:
                      double v116 = v110;
LABEL_71:
                      if (v116 + -0.5 >= 0.5)
                      {
                        *(double *)&long long v162 = v102 + v98 * 0.25;
                        *((double *)&v162 + 1) = v101 + v100 * 0.25;
                        *(double *)&long long v163 = v103 + v98 * 0.25;
                        *((double *)&v163 + 1) = v99 + v100 * 0.25;
                        *(double *)&long long v164 = v116 + -0.5;
                        sub_10035D89C(a1, (uint64_t)&v162);
                        if (v126 > v5)
                        {
                          long long v127 = v165;
                          a2[2] = v164;
                          a2[3] = v127;
                          long long v128 = v167;
                          a2[4] = v166;
                          a2[5] = v128;
                          long long v129 = v163;
                          double v5 = v126;
                          *a2 = v162;
                          a2[1] = v129;
                        }
                      }
                      if (v5 <= *(double *)(a1 + 552))
                      {
                        long long v130 = a2[3];
                        long long v164 = a2[2];
                        long long v165 = v130;
                        long long v131 = a2[5];
                        long long v166 = a2[4];
                        long long v167 = v131;
                        long long v132 = a2[1];
                        long long v162 = *a2;
                        long long v163 = v132;
                        if (*(double *)&v164 + -0.5 >= 0.5)
                        {
                          double v133 = *((double *)&v167 + 1) * 0.5;
                          *(double *)&long long v167 = *((double *)&v167 + 1) * 0.5 * 3.14159265;
                          *((double *)&v167 + 1) = *((double *)&v167 + 1) * 0.5;
                          sub_10035D89C(a1, (uint64_t)&v162);
                          if (v134 > v5)
                          {
                            long long v135 = v165;
                            a2[2] = v164;
                            a2[3] = v135;
                            long long v136 = v167;
                            a2[4] = v166;
                            a2[5] = v136;
                            long long v137 = v163;
                            double v5 = v134;
                            *a2 = v162;
                            a2[1] = v137;
                          }
                          double v138 = v133 * 0.5;
                          *(double *)&long long v167 = v138 * 3.14159265;
                          *((double *)&v167 + 1) = v138;
                          sub_10035D89C(a1, (uint64_t)&v162);
                          if (v139 > v5)
                          {
                            long long v140 = v165;
                            a2[2] = v164;
                            a2[3] = v140;
                            long long v141 = v167;
                            a2[4] = v166;
                            a2[5] = v141;
                            long long v142 = v163;
                            double v5 = v139;
                            *a2 = v162;
                            a2[1] = v142;
                          }
                          double v143 = v138 * 0.5;
                          *(double *)&long long v167 = v143 * 3.14159265;
                          *((double *)&v167 + 1) = v143;
                          sub_10035D89C(a1, (uint64_t)&v162);
                          if (v144 > v5)
                          {
                            long long v145 = v165;
                            a2[2] = v164;
                            a2[3] = v145;
                            long long v146 = v167;
                            a2[4] = v166;
                            a2[5] = v146;
                            long long v147 = v163;
                            double v5 = v144;
                            *a2 = v162;
                            a2[1] = v147;
                          }
                          double v148 = v143 * 0.5;
                          *(double *)&long long v167 = v148 * 3.14159265;
                          *((double *)&v167 + 1) = v148;
                          sub_10035D89C(a1, (uint64_t)&v162);
                          if (v149 > v5)
                          {
                            long long v150 = v165;
                            a2[2] = v164;
                            a2[3] = v150;
                            long long v151 = v167;
                            a2[4] = v166;
                            a2[5] = v151;
                            long long v152 = v163;
                            double v5 = v149;
                            *a2 = v162;
                            a2[1] = v152;
                          }
                          *(double *)&long long v167 = v148 * 0.5 * 3.14159265;
                          *((double *)&v167 + 1) = v148 * 0.5;
                          sub_10035D89C(a1, (uint64_t)&v162);
                          if (v153 > v5)
                          {
                            long long v154 = v165;
                            a2[2] = v164;
                            a2[3] = v154;
                            long long v155 = v167;
                            a2[4] = v166;
                            a2[5] = v155;
                            long long v156 = v163;
                            double v5 = v153;
                            *a2 = v162;
                            a2[1] = v156;
                          }
                        }
                      }
                      return v5;
                    }
LABEL_62:
                    double v102 = v102 + v98 * 0.25;
                    double v101 = v101 + v100 * 0.25;
                    *(double *)&long long v162 = v102;
                    *((double *)&v162 + 1) = v101;
                    double v103 = v103 + v98 * 0.25;
                    double v99 = v99 + v100 * 0.25;
                    *(double *)&long long v163 = v103;
                    *((double *)&v163 + 1) = v99;
                    *(double *)&long long v164 = v116;
                    sub_10035D89C(a1, (uint64_t)&v162);
                    if (v117 > v5)
                    {
                      long long v118 = v165;
                      a2[2] = v164;
                      a2[3] = v118;
                      long long v119 = v167;
                      a2[4] = v166;
                      a2[5] = v119;
                      long long v120 = v163;
                      double v5 = v117;
                      *a2 = v162;
                      a2[1] = v120;
                    }
                    double v100 = v159;
                    double v98 = v161;
                    goto LABEL_71;
                  }
LABEL_59:
                  double v102 = v102 + v98 * 0.25;
                  double v101 = v101 + v100 * 0.25;
                  *(double *)&long long v162 = v102;
                  *((double *)&v162 + 1) = v101;
                  double v103 = v103 + v98 * 0.25;
                  double v99 = v99 + v100 * 0.25;
                  *(double *)&long long v163 = v103;
                  *((double *)&v163 + 1) = v99;
                  *(double *)&long long v164 = v110;
                  sub_10035D89C(a1, (uint64_t)&v162);
                  if (v112 > v5)
                  {
                    long long v113 = v165;
                    a2[2] = v164;
                    a2[3] = v113;
                    long long v114 = v167;
                    a2[4] = v166;
                    a2[5] = v114;
                    long long v115 = v163;
                    double v5 = v112;
                    *a2 = v162;
                    a2[1] = v115;
                  }
                  double v100 = v159;
                  double v98 = v161;
                  double v116 = v110 + -0.5;
                  if (v110 + -0.5 < 0.5) {
                    goto LABEL_70;
                  }
                  goto LABEL_62;
                }
              }
              else
              {
                double v104 = *(double *)&v164;
              }
              double v125 = v104;
              double v109 = -0.5;
              double v110 = v104 + -0.5;
              double v111 = 0.5;
              if (v110 < 0.5) {
                goto LABEL_69;
              }
              goto LABEL_59;
            }
LABEL_51:
            *(double *)&long long v162 = v66 + v63 * 0.25;
            *((double *)&v162 + 1) = v65 + v62 * 0.25;
            *(double *)&long long v163 = v67 + v63 * 0.25;
            *((double *)&v163 + 1) = v64 + v62 * 0.25;
            *(double *)&long long v164 = v85;
            sub_10035D89C(a1, (uint64_t)&v162);
            if (v91 > v5)
            {
              long long v92 = v165;
              a2[2] = v164;
              a2[3] = v92;
              long long v93 = v167;
              a2[4] = v166;
              a2[5] = v93;
              long long v94 = v163;
              double v5 = v91;
              *a2 = v162;
              a2[1] = v94;
            }
            goto LABEL_53;
          }
        }
        else
        {
          double v68 = *(double *)&v164;
        }
        double v90 = v68;
        double v73 = -0.5;
        double v74 = v68 + -0.5;
        double v75 = 0.5;
        if (v74 < 0.5) {
          goto LABEL_49;
        }
        goto LABEL_38;
      }
    }
  }
  return v5;
}

void sub_10035D278(uint64_t a1, _DWORD *a2)
{
  double v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  long long v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_DWORD *)double v5 = *a2;
    *((_DWORD *)v5 + 1) = a2[1];
    *((_DWORD *)v5 + 2) = a2[2];
    *((_DWORD *)v5 + 3) = a2[3];
    long long v7 = v5 + 16;
    goto LABEL_24;
  }
  long long v8 = *(char **)a1;
  uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
  unint64_t v10 = (v9 >> 4) + 1;
  if (v10 >> 60) {
    sub_10000B98C();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 60) {
      sub_10000BA6C();
    }
    long long v13 = (char *)operator new(16 * v12);
  }
  else
  {
    long long v13 = 0;
  }
  double v14 = &v13[16 * (v9 >> 4)];
  long long v15 = &v13[16 * v12];
  *(_OWORD *)double v14 = *(_OWORD *)a2;
  long long v7 = v14 + 16;
  if (v5 == v8)
  {
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (!v8) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  unint64_t v16 = v5 - v8 - 16;
  if (v16 < 0x70 || &v13[v9 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v5 && &v5[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v14) {
    goto LABEL_20;
  }
  uint64_t v17 = (v16 >> 4) + 1;
  uint64_t v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
  long long v6 = &v5[-v18];
  double v19 = &v14[-v18];
  long long v20 = (const float *)(v5 - 64);
  long long v21 = (float *)(v14 - 64);
  uint64_t v22 = v17 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    float32x4x4_t v24 = vld4q_f32(v20);
    vst4q_f32(v21, v24);
    v21 -= 16;
    v20 -= 16;
    v22 -= 4;
  }
  while (v22);
  double v14 = v19;
  if (v17 != (v17 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_20:
    double v19 = v14;
    do
    {
      int v23 = *((_DWORD *)v6 - 4);
      v6 -= 16;
      *((_DWORD *)v19 - 4) = v23;
      v19 -= 16;
      *((_DWORD *)v19 + 1) = *((_DWORD *)v6 + 1);
      *((_DWORD *)v19 + 2) = *((_DWORD *)v6 + 2);
      *((_DWORD *)v19 + 3) = *((_DWORD *)v6 + 3);
    }
    while (v6 != v8);
  }
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v15;
  if (v8) {
LABEL_23:
  }
    operator delete(v8);
LABEL_24:
  *(void *)(a1 + 8) = v7;
}

void sub_10035D43C(uint64_t a1, double **a2, double *a3, double *a4, double *a5)
{
  double v5 = *a2;
  uint64_t v6 = (char *)a2[1] - (char *)*a2;
  if (!v6) {
    goto LABEL_18;
  }
  unint64_t v7 = v6 >> 5;
  if (v7 <= 1) {
    unint64_t v7 = 1;
  }
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
  do
  {
    double v11 = (double)*(int *)v5 - *a3;
    double v12 = (double)*((int *)v5 + 1) - *a4;
    double v13 = v5[3];
    double v8 = v8 + v12 * v12 * v13;
    double v9 = v9 + v11 * v11 * v13;
    double v10 = v10 + -(v11 * v12) * v13;
    v5 += 4;
    --v7;
  }
  while (v7);
  if (v8 == 0.0) {
    goto LABEL_17;
  }
  double v14 = fabs(v8);
  double v15 = fmax(v14, 0.0);
  if (v15 < 2.22507386e-308) {
    double v15 = 2.22507386e-308;
  }
  if (v14 / v15 <= 2.22044605e-14)
  {
LABEL_17:
    if (v9 == 0.0) {
      goto LABEL_31;
    }
    double v16 = fabs(v9);
    double v17 = fmax(v16, 0.0);
    if (v17 < 2.22507386e-308) {
      double v17 = 2.22507386e-308;
    }
    if (v16 / v17 <= 2.22044605e-14)
    {
LABEL_31:
      if (v10 == 0.0) {
        goto LABEL_18;
      }
      double v18 = fabs(v10);
      double v19 = fmax(v18, 0.0);
      if (v19 < 2.22507386e-308) {
        double v19 = 2.22507386e-308;
      }
      if (v18 / v19 <= 2.22044605e-14)
      {
LABEL_18:
        v30[0] = 0;
        v30[1] = 0;
        qmemcpy((void *)sub_1002D19D8(v30, 71), "!(double_equal(Ixx, 0) && double_equal(Iyy, 0) && double_equal(Ixy, 0))", 71);
        sub_1002D2278(-215, v30, "get_theta", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 756);
      }
    }
  }
  double v20 = (v9 + v8 - sqrt(v10 * (v10 * 4.0) + (v8 - v9) * (v8 - v9))) * 0.5;
  double v21 = fabs(v8);
  double v22 = fabs(v9);
  double v23 = v20 - v9;
  double v24 = v20 - v8;
  BOOL v25 = v21 <= v22;
  if (v21 <= v22) {
    double v26 = v23;
  }
  else {
    double v26 = v10;
  }
  if (v25) {
    double v24 = v10;
  }
  float v27 = v24;
  float v28 = v26;
  for (double i = sub_10026BF14(v27, v28) * 0.0174532925 - *a5; i <= -3.14159265; double i = i + 6.28318531)
    ;
  for (; i > 3.14159265; double i = i + -6.28318531)
    ;
}

void sub_10035D6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10035D6D8(uint64_t a1, int **a2, double *a3, double *a4, double a5, double a6, double a7, double a8)
{
  if (*a4 <= a8) {
    return 1;
  }
  uint64_t v15 = (uint64_t)*a2;
  uint64_t v16 = (uint64_t)a2[1];
  double v17 = (double)**a2;
  double v18 = (double)(*a2)[1];
  double v19 = (a3[3] - v18) * (a3[3] - v18);
  if ((a3[1] - v18) * (a3[1] - v18) + (*a3 - v17) * (*a3 - v17) <= v19 + (a3[2] - v17) * (a3[2] - v17)) {
    double v20 = v19 + (a3[2] - v17) * (a3[2] - v17);
  }
  else {
    double v20 = (a3[1] - v18) * (a3[1] - v18) + (*a3 - v17) * (*a3 - v17);
  }
  while (v16 != v15)
  {
    unint64_t v21 = 0;
    double v20 = v20 * 0.5625;
    do
    {
      if (((double)*(int *)(v15 + 32 * v21 + 4) - v18) * ((double)*(int *)(v15 + 32 * v21 + 4) - v18)
         + ((double)*(int *)(v15 + 32 * v21) - v17) * ((double)*(int *)(v15 + 32 * v21) - v17) > v20)
      {
        **(unsigned char **)(v15 + 32 * v21 + 8) = 0;
        double v22 = a2[1];
        double v23 = &(*a2)[8 * v21];
        long long v25 = *(_OWORD *)v23;
        long long v24 = *((_OWORD *)v23 + 1);
        long long v26 = *((_OWORD *)v22 - 1);
        *(_OWORD *)double v23 = *((_OWORD *)v22 - 2);
        *((_OWORD *)v23 + 1) = v26;
        *((_OWORD *)v22 - 2) = v25;
        *((_OWORD *)v22 - 1) = v24;
        uint64_t v15 = (uint64_t)*a2;
        uint64_t v16 = (uint64_t)(a2[1] - 8);
        a2[1] = (int *)v16;
        --v21;
      }
      ++v21;
    }
    while (v21 < (v16 - v15) >> 5);
    if ((unint64_t)(v16 - v15) <= 0x3F) {
      break;
    }
    sub_10035C358(a1, (uint64_t)a2, a3, a5, a6, a7);
    uint64_t v15 = (uint64_t)*a2;
    uint64_t v16 = (uint64_t)a2[1];
    if ((double)(unint64_t)((v16 - (uint64_t)*a2) >> 5)
       / (a3[4]
        * sqrt((a3[3] - a3[1]) * (a3[3] - a3[1]) + (a3[2] - *a3) * (a3[2] - *a3))) >= *a4)
      return 1;
  }
  return 0;
}

void sub_10035D89C(uint64_t a1, uint64_t a2)
{
  unint64_t v57 = 0;
  double v4 = *(double *)(a2 + 32) * 0.5;
  double v5 = *(double *)(a2 + 72) * v4;
  double v6 = v4 * *(double *)(a2 + 64);
  double v7 = *(double *)a2;
  double v8 = *(double *)(a2 + 8);
  int v58 = (int)(*(double *)a2 - v5);
  int v59 = (int)(v6 + v8);
  char v60 = 0;
  double v9 = *(double *)(a2 + 16);
  double v10 = *(double *)(a2 + 24);
  int v61 = (int)(v9 - v5);
  int v62 = (int)(v6 + v10);
  unsigned __int8 v63 = 0;
  int v64 = (int)(v5 + v9);
  int v65 = (int)(v10 - v6);
  char v66 = 0;
  int v67 = (int)(v5 + v7);
  int v68 = (int)(v8 - v6);
  char v69 = 0;
  double v55 = (uint64_t (*)(uint64_t *, int *))sub_10035E05C;
  sub_10035FFD4((uint64_t)&v58, &v70, &v55, 4, 1);
  double v11 = &v64;
  double v12 = &v67;
  int v13 = v59;
  int v14 = v62;
  uint64_t v15 = 12;
  if (v59 <= v62) {
    uint64_t v15 = 0;
  }
  if (v59 >= v62) {
    int v16 = v62;
  }
  else {
    int v16 = v59;
  }
  uint64_t v17 = 4;
  if (v59 < v62) {
    uint64_t v18 = 4;
  }
  else {
    uint64_t v18 = 16;
  }
  int v19 = v65;
  if (v59 < v62) {
    int v20 = v62;
  }
  else {
    int v20 = v59;
  }
  if (v59 < v62) {
    uint64_t v17 = 16;
  }
  uint64_t v21 = 8;
  if (v59 >= v62) {
    uint64_t v21 = 20;
  }
  uint64_t v22 = 28;
  if (v20 < v65) {
    uint64_t v17 = 28;
  }
  if (v16 <= v65) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v15 = 24;
  }
  int v23 = *(int *)((char *)&v58 + v22);
  int v24 = v68;
  if (v16 > v65) {
    uint64_t v21 = 32;
  }
  if (v23 > v68) {
    uint64_t v15 = 36;
  }
  uint64_t v54 = v15;
  int v52 = *(int *)((char *)&v58 + v17);
  int v53 = v68;
  uint64_t v25 = 44;
  if (v23 <= v68) {
    uint64_t v25 = v21;
  }
  *((unsigned char *)&v58 + v25) = 1;
  if (v60)
  {
    long long v26 = &v61;
    if (v63)
    {
      long long v26 = &v64;
      if (v66)
      {
        long long v26 = &v67;
        if (v69)
        {
          double v55 = 0;
          uint64_t v56 = 0;
          uint64_t v27 = sub_1002D19D8(&v55, 18);
          *(_WORD *)(v27 + 16) = 27756;
          *(_OWORD *)uint64_t v27 = *(_OWORD *)"leftmost != __null";
          sub_1002D2278(-215, (uint64_t *)&v55, "rect_nfa", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1006);
        }
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_33:
    if (v66) {
      goto LABEL_34;
    }
    goto LABEL_43;
  }
  long long v26 = &v58;
  if (v63) {
    goto LABEL_33;
  }
  if (v58 > v61) {
    long long v26 = &v61;
  }
  if (v66)
  {
LABEL_34:
    if (v69) {
      goto LABEL_35;
    }
    goto LABEL_46;
  }
LABEL_43:
  if (*v26 > v64) {
    long long v26 = &v64;
  }
  if (v69)
  {
LABEL_35:
    *((unsigned char *)v26 + 8) = 1;
    int v28 = v63;
    if (v60) {
      goto LABEL_36;
    }
    goto LABEL_49;
  }
LABEL_46:
  if (*v26 > v67) {
    long long v26 = &v67;
  }
  *((unsigned char *)v26 + 8) = 1;
  int v28 = v63;
  if (v60)
  {
LABEL_36:
    long long v29 = &v61;
    if (v28)
    {
      long long v29 = &v64;
      if (v66)
      {
        long long v29 = &v67;
        if (v69)
        {
          double v55 = 0;
          uint64_t v56 = 0;
          uint64_t v30 = sub_1002D19D8(&v55, 19);
          *(_DWORD *)(v30 + 15) = 1819047278;
          *(_OWORD *)uint64_t v30 = *(_OWORD *)"rightmost != __null";
          sub_1002D2278(-215, (uint64_t *)&v55, "rect_nfa", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1025);
        }
        goto LABEL_52;
      }
      goto LABEL_51;
    }
LABEL_50:
    if (v66) {
      goto LABEL_51;
    }
    goto LABEL_60;
  }
LABEL_49:
  long long v29 = &v58;
  if (v28) {
    goto LABEL_50;
  }
  if (v58 < v61) {
    long long v29 = &v61;
  }
  if (v66)
  {
LABEL_51:
    if (v69) {
      goto LABEL_52;
    }
    goto LABEL_63;
  }
LABEL_60:
  if (*v29 < v64) {
    long long v29 = &v64;
  }
  if (v69)
  {
LABEL_52:
    *((unsigned char *)v29 + 8) = 1;
    int v31 = v63;
    if (v60) {
      goto LABEL_53;
    }
LABEL_66:
    long long v32 = &v58;
    if (!v31)
    {
      if (v58 > v61) {
        long long v32 = &v61;
      }
      if (v66) {
        goto LABEL_68;
      }
      goto LABEL_74;
    }
LABEL_67:
    if (v66)
    {
LABEL_68:
      double v11 = v32;
      goto LABEL_69;
    }
LABEL_74:
    if (*v32 <= v64) {
      double v11 = v32;
    }
    if (v69) {
      goto LABEL_70;
    }
    goto LABEL_77;
  }
LABEL_63:
  if (*v29 < v67) {
    long long v29 = &v67;
  }
  *((unsigned char *)v29 + 8) = 1;
  int v31 = v63;
  if (!v60) {
    goto LABEL_66;
  }
LABEL_53:
  long long v32 = &v61;
  if (!v31) {
    goto LABEL_67;
  }
  if (v66)
  {
    if (v69)
    {
      double v55 = 0;
      uint64_t v56 = 0;
      qmemcpy((void *)sub_1002D19D8(&v55, 15), "tailp != __null", 15);
      sub_1002D2278(-215, (uint64_t *)&v55, "rect_nfa", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1044);
    }
    goto LABEL_79;
  }
LABEL_69:
  if (v69)
  {
LABEL_70:
    double v12 = v11;
    goto LABEL_79;
  }
LABEL_77:
  if (*v11 <= v67) {
    double v12 = v11;
  }
LABEL_79:
  *((unsigned char *)v12 + 8) = 1;
  uint64_t v33 = 4;
  if (v13 > v14) {
    uint64_t v33 = 16;
  }
  if (v16 > v19) {
    uint64_t v33 = 28;
  }
  if (v23 > v24) {
    uint64_t v33 = 40;
  }
  uint64_t v34 = *(int *)((char *)&v58 + v33);
  uint64_t v35 = v26[1];
  double v36 = 0.0;
  double v37 = 0.0;
  if (v34 == v35)
  {
    int v38 = *v12;
    if (v35 == *v12) {
      goto LABEL_87;
    }
  }
  else
  {
    double v37 = (double)((*(int *)((char *)&v58 + v54) - *v26) / ((int)v34 - (int)v35));
    int v38 = *v12;
    if (v35 == *v12)
    {
LABEL_87:
      uint64_t v39 = v29[1];
      double v40 = 0.0;
      double v41 = 0.0;
      if (v34 == v39) {
        goto LABEL_88;
      }
      goto LABEL_100;
    }
  }
  double v36 = (double)((*v26 - v38) / ((int)v35 - v38));
  uint64_t v39 = v29[1];
  double v40 = 0.0;
  double v41 = 0.0;
  if (v34 == v39)
  {
LABEL_88:
    if (v39 == v38) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
LABEL_100:
  double v41 = (double)((*(int *)((char *)&v58 + v54) - *v29) / ((int)v34 - (int)v39));
  if (v39 != v38) {
LABEL_89:
  }
    double v40 = (double)((*v29 - v38) / ((int)v39 - v38));
LABEL_90:
  uint64_t v42 = 4;
  if (v13 < v14) {
    uint64_t v42 = 16;
  }
  if (v20 < v19) {
    uint64_t v42 = 28;
  }
  if (v52 < v53) {
    uint64_t v42 = 40;
  }
  int v43 = *(int *)((char *)&v58 + v42);
  unsigned int v45 = v57;
  unsigned int v44 = HIDWORD(v57);
  if ((int)v34 <= v43)
  {
    double v46 = (double)*(int *)((char *)&v58 + v54);
    int v47 = v43 + 1;
    double v48 = v46;
    do
    {
      if ((v34 & 0x8000000000000000) == 0 && v34 < *(int *)(a1 + 492))
      {
        int v49 = (int)v48;
        if ((int)v48 <= (int)v46)
        {
          do
          {
            if ((v49 & 0x80000000) == 0 && v49 < *(_DWORD *)(a1 + 488))
            {
              ++v44;
              if (((v49 | v34) & 0x80000000) == 0
                && *(_DWORD *)(a1 + 212) > v49
                && v34 < *(int *)(a1 + 208))
              {
                double v50 = *(double *)(*(void *)(a1 + 216) + **(void **)(a1 + 272) * v34 + 8 * v49);
                if (v50 != -1024.0)
                {
                  double v51 = *(double *)(a2 + 56) - v50;
                  if (v51 < 0.0) {
                    double v51 = -v51;
                  }
                  if (v51 > 4.71238898)
                  {
                    double v51 = v51 + -6.28318531;
                    if (v51 < 0.0) {
                      double v51 = -v51;
                    }
                  }
                  if (v51 <= *(double *)(a2 + 80)) {
                    ++v45;
                  }
                }
              }
            }
            ++v49;
          }
          while ((int)v46 + 1 != v49);
        }
        if (v34 >= v35) {
          double v37 = v36;
        }
        if (v34 >= v39) {
          double v41 = v40;
        }
        double v48 = v48 + v37;
        double v46 = v46 + v41;
      }
      ++v34;
    }
    while (v47 != v34);
  }
  unint64_t v57 = __PAIR64__(v44, v45);
  sub_10035E07C(a1, (int *)&v57 + 1, (int *)&v57, (long double *)(a2 + 88));
}

void sub_10035DFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10035E05C(_DWORD *a1, _DWORD *a2)
{
  if (*a1 == *a2) {
    return a1[1] < a2[1];
  }
  else {
    return *a1 < *a2;
  }
}

void sub_10035E07C(uint64_t a1, int *a2, int *a3, long double *a4)
{
  int v5 = *a2;
  if (*a2)
  {
    int v6 = *a3;
    if (*a3)
    {
      int v7 = v5 - v6;
      if (v5 == v6)
      {
        log10(*a4);
      }
      else
      {
        long double v8 = *a4;
        double v9 = (double)v6 + 1.0;
        if (v9 <= 15.0)
        {
          long double v14 = -(v9 + 5.5 - (v9 + 0.5) * log(v9 + 5.5));
          long double v15 = v14 - log((double)v6 + 1.0);
          double v16 = *(double *)&qword_1004D3DF8 + 0.0;
          long double v17 = v15 - log(v9 + 1.0);
          double v18 = v16 + *(double *)&qword_1004D3E00 * v9;
          long double v19 = v17 - log(v9 + 2.0);
          double v20 = v18 + *(double *)&qword_1004D3E08 * (v9 * v9);
          long double v21 = v19 - log(v9 + 3.0);
          double v22 = *(double *)&qword_1004D3E10;
          long double v23 = v20 + v22 * pow((double)v6 + 1.0, 3.0);
          long double v24 = v21 - log(v9 + 4.0);
          double v25 = *(double *)&qword_1004D3E18;
          long double v26 = v23 + v25 * pow((double)v6 + 1.0, 4.0);
          long double v27 = v24 - log(v9 + 5.0);
          double v28 = *(double *)&qword_1004D3E20;
          long double v29 = v26 + v28 * pow((double)v6 + 1.0, 5.0);
          long double v30 = v27 - log(v9 + 6.0);
          double v31 = *(double *)&qword_1004D3E28;
          long double v32 = pow((double)v6 + 1.0, 6.0);
          double v13 = v30 + log(v29 + v31 * v32);
        }
        else
        {
          long double v10 = (v9 + -0.5) * log((double)v6 + 1.0) + 0.918938533 - v9;
          double v11 = sinh(1.0 / v9);
          long double v12 = pow((double)v6 + 1.0, 6.0);
          double v13 = v10 + v9 * 0.5 * log(1.0 / (v12 * 810.0) + v9 * v11);
        }
        double v33 = 1.0 - v8;
        double v71 = (double)v5 + 1.0 - v13;
        double v34 = (double)v7;
        double v35 = (double)v7 + 1.0;
        if (v35 <= 15.0)
        {
          long double v40 = -(v35 + 5.5 - (v35 + 0.5) * log(v35 + 5.5));
          long double v41 = v40 - log((double)v7 + 1.0);
          double v42 = *(double *)&qword_1004D3DF8 + 0.0;
          long double v43 = v41 - log(v35 + 1.0);
          double v44 = v42 + *(double *)&qword_1004D3E00 * v35;
          long double v45 = v43 - log(v35 + 2.0);
          double v46 = v44 + *(double *)&qword_1004D3E08 * (v35 * v35);
          long double v47 = v45 - log(v35 + 3.0);
          double v48 = *(double *)&qword_1004D3E10;
          long double v49 = v46 + v48 * pow(v35, 3.0);
          long double v50 = v47 - log(v35 + 4.0);
          double v51 = *(double *)&qword_1004D3E18;
          long double v52 = v49 + v51 * pow(v35, 4.0);
          long double v53 = v50 - log(v35 + 5.0);
          double v54 = *(double *)&qword_1004D3E20;
          long double v55 = v52 + v54 * pow(v35, 5.0);
          long double v56 = v53 - log(v35 + 6.0);
          double v57 = *(double *)&qword_1004D3E28;
          long double v58 = pow(v35, 6.0);
          double v39 = v56 + log(v55 + v57 * v58);
        }
        else
        {
          long double v36 = (v35 + -0.5) * log((double)v7 + 1.0) + 0.918938533 - v35;
          double v37 = sinh(1.0 / v35);
          long double v38 = pow((double)v7 + 1.0, 6.0);
          double v39 = v36 + v35 * 0.5 * log(1.0 / (v38 * 810.0) + v35 * v37);
          double v33 = 1.0 - v8;
          double v34 = (double)v7;
        }
        long double v59 = v71 - v39 + (double)v6 * log(v8);
        long double v60 = v59 + v34 * log(v33);
        double v61 = exp(v60);
        if (v61 != 0.0)
        {
          double v62 = v61;
          double v63 = fmax(v61, 0.0);
          if (v63 < 2.22507386e-308) {
            double v63 = 2.22507386e-308;
          }
          if (v62 / v63 > 2.22044605e-14)
          {
            int v64 = v5 - v6;
            if (v5 > v6)
            {
              int v65 = v6 + 1;
              double v66 = v62;
              double v67 = v8 / v33;
              while (1)
              {
                double v68 = (double)v64 / (double)v65;
                double v66 = v66 * (v67 * v68);
                double v62 = v62 + v66;
                if (v68 >= 1.0)
                {
                  if (v65 >= v5) {
                    break;
                  }
                }
                else
                {
                  double v69 = v66 * ((1.0 - pow(v67 * v68, (double)v64)) / (1.0 - v67 * v68) + -1.0);
                  if (v69 < v62 * (vabdd_f64(-log10(v62), *(double *)(a1 + 496)) * 0.1) || v65 >= v5) {
                    break;
                  }
                }
                --v64;
                ++v65;
              }
            }
            log10(v62);
          }
        }
      }
    }
  }
}

void sub_10035E57C(uint64_t a1, int *a2, uint64_t a3)
{
  sub_1002D6AE8(v33, &off_10049B0F0);
  if (sub_10029D69C((uint64_t)a2)
    || sub_10029D67C(a2, -1) != 1 && sub_10029D67C(a2, -1) != 3)
  {
    *(_OWORD *)double v28 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v28, 69), "!_image.empty() && (_image.channels() == 1 || _image.channels() == 3)", 69);
    sub_1002D2278(-215, (uint64_t *)v28, "drawSegments", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1150);
  }
  if (sub_10029D67C(a2, -1) == 1) {
    sub_1002FBDC4((uint64_t)a2, (uint64_t)a2, 8u, 0);
  }
  *(_DWORD *)double v28 = 1124007936;
  memset(&v28[4], 0, 60);
  long double v29 = &v28[8];
  long double v30 = &v31;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v5 = *(void *)(a3 + 8);
    long long v6 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)long double v24 = *(_OWORD *)v5;
    *(_OWORD *)&v24[16] = v6;
    *(_OWORD *)&v24[32] = *(_OWORD *)(v5 + 32);
    uint64_t v7 = *(void *)(v5 + 56);
    *(void *)&v24[48] = *(void *)(v5 + 48);
    *(void *)&v24[56] = v7;
    double v25 = &v24[8];
    long double v26 = v27;
    v27[0] = 0;
    v27[1] = 0;
    if (v7) {
      atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 1u);
    }
    if (*(int *)(v5 + 4) > 2)
    {
      *(_DWORD *)&v24[4] = 0;
      sub_1002931A8((uint64_t)v24, v5);
    }
    else
    {
      long double v8 = *(void **)(v5 + 72);
      double v9 = v26;
      *long double v26 = *v8;
      v9[1] = v8[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)v24);
  }
  if (*(void *)&v28[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v28[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v28);
  }
  if (*(int *)&v28[4] >= 1)
  {
    uint64_t v10 = 0;
    double v11 = v29;
    do
      v11[v10++] = 0;
    while (v10 < *(int *)&v28[4]);
  }
  *(_OWORD *)double v28 = *(_OWORD *)v24;
  *(_OWORD *)&v28[16] = *(_OWORD *)&v24[16];
  *(_OWORD *)&v28[32] = *(_OWORD *)&v24[32];
  *(_OWORD *)&v28[48] = *(_OWORD *)&v24[48];
  if (v30 == &v31)
  {
    long double v12 = v26;
    if (*(int *)&v24[4] <= 2) {
      goto LABEL_22;
    }
  }
  else
  {
    j__free(v30);
    long double v29 = &v28[8];
    long double v30 = &v31;
    long double v12 = v26;
    if (*(int *)&v24[4] <= 2)
    {
LABEL_22:
      uint64_t v31 = *v12;
      uint64_t v32 = v12[1];
      goto LABEL_25;
    }
  }
  long double v29 = v25;
  long double v30 = v12;
  long double v12 = v27;
  double v25 = &v24[8];
  long double v26 = v27;
LABEL_25:
  *(_DWORD *)long double v24 = 1124007936;
  memset(&v24[4], 0, 60);
  if (v12 != v27) {
    j__free(v12);
  }
  int v13 = sub_100298CD4((unsigned int *)v28, 4, -1, 1);
  if (v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v13;
    do
    {
      if ((v28[1] & 0x40) != 0 || *v29 == 1)
      {
        uint64_t v16 = *(void *)&v28[16] + 16 * v14;
      }
      else if (v29[1] == 1)
      {
        uint64_t v16 = *(void *)&v28[16] + *(void *)v30 * v14;
      }
      else
      {
        uint64_t v16 = *(void *)&v28[16]
            + *(void *)v30 * ((int)v14 / *(_DWORD *)&v28[12])
            + 16 * ((int)v14 % *(_DWORD *)&v28[12]);
      }
      float v17 = *(float *)(v16 + 4);
      float v18 = *(float *)(v16 + 8);
      float v19 = *(float *)(v16 + 12);
      LODWORD(v23) = (uint64_t)rintf(*(float *)v16);
      HIDWORD(v23) = (uint64_t)rintf(v17);
      LODWORD(v22) = (uint64_t)rintf(v18);
      HIDWORD(v22) = (uint64_t)rintf(v19);
      *(_OWORD *)long double v24 = 0uLL;
      *(_OWORD *)&v24[16] = xmmword_10040A780;
      sub_10032700C((uint64_t)a2, &v23, &v22, (double *)v24, 1u, 8, 0);
      ++v14;
    }
    while (v14 != v15);
  }
  if (*(void *)&v28[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v28[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v28);
  }
  *(void *)&v28[56] = 0;
  memset(&v28[16], 0, 32);
  if (*(int *)&v28[4] >= 1)
  {
    uint64_t v20 = 0;
    long double v21 = v29;
    do
      v21[v20++] = 0;
    while (v20 < *(int *)&v28[4]);
  }
  if (v30 != &v31) {
    j__free(v30);
  }
  if (v34) {
    sub_1002D6888(v33);
  }
}

void sub_10035E9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1002D1A1C((uint64_t *)va);
  sub_10020FA00(v17 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_10035EA44(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  sub_1002D6AE8(v135, &off_10049B110);
  unsigned int v9 = *a2;
  unsigned int v10 = a2[1];
  if (sub_10029FDC8((uint64_t)a5)
    && (sub_10029A23C((uint64_t)a5, 0xFFFFFFFF, (uint64_t)v120), *(void *)v120 != *(void *)a2))
  {
    sub_10029A23C((uint64_t)a5, 0xFFFFFFFF, (uint64_t)v120);
    unsigned int v9 = *(_DWORD *)v120;
    unsigned int v10 = *(_DWORD *)&v120[4];
    if (!(*(_DWORD *)&v120[4] * *(_DWORD *)v120))
    {
LABEL_4:
      *(_OWORD *)long long v120 = 0uLL;
      uint64_t v11 = sub_1002D19D8(v120, 9);
      *(unsigned char *)(v11 + 8) = 41;
      *(void *)uint64_t v11 = *(void *)"sz.area()";
      sub_1002D2278(-215, (uint64_t *)v120, "compareSegments", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1178);
    }
  }
  else if (!(v10 * v9))
  {
    goto LABEL_4;
  }
  v113[0] = __PAIR64__(v10, v9);
  sub_100290470(v113, 0, (uint64_t)v120);
  sub_100361078((uint64_t)v125, v120);
  sub_10000B6BC((uint64_t)v120);
  *(_DWORD *)long long v108 = v9;
  *(_DWORD *)&v108[4] = v10;
  sub_100290470((uint64_t *)v108, 0, (uint64_t)v120);
  sub_100361078((uint64_t)v113, v120);
  sub_10000B6BC((uint64_t)v120);
  *(_DWORD *)long long v120 = 1124007936;
  memset(&v120[4], 0, 60);
  double v121 = &v120[8];
  long long v122 = &v123;
  uint64_t v124 = 0;
  uint64_t v123 = 0;
  *(_DWORD *)long long v108 = 1124007936;
  memset(&v108[4], 0, 60);
  double v109 = &v108[8];
  double v110 = &v111;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v12 = *(void *)(a3 + 8);
    long long v13 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)double v103 = *(_OWORD *)v12;
    *(_OWORD *)&v103[16] = v13;
    *(_OWORD *)&v103[32] = *(_OWORD *)(v12 + 32);
    uint64_t v14 = *(void *)(v12 + 56);
    *(void *)&v103[48] = *(void *)(v12 + 48);
    *(void *)&v103[56] = v14;
    double v104 = &v103[8];
    double v105 = &v106;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    if (v14) {
      atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
    }
    if (*(int *)(v12 + 4) > 2)
    {
      *(_DWORD *)&v103[4] = 0;
      sub_1002931A8((uint64_t)v103, v12);
    }
    else
    {
      uint64_t v15 = *(void **)(v12 + 72);
      uint64_t v16 = v105;
      *(void *)double v105 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)v103);
  }
  if (*(void *)&v120[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v120[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v120);
  }
  if (*(int *)&v120[4] >= 1)
  {
    uint64_t v17 = 0;
    float v18 = v121;
    do
      v18[v17++] = 0;
    while (v17 < *(int *)&v120[4]);
  }
  *(_OWORD *)long long v120 = *(_OWORD *)v103;
  *(_OWORD *)&v120[16] = *(_OWORD *)&v103[16];
  *(_OWORD *)&v120[32] = *(_OWORD *)&v103[32];
  *(_OWORD *)&v120[48] = *(_OWORD *)&v103[48];
  if (v122 == &v123)
  {
    float v19 = (uint64_t *)v105;
    if (*(int *)&v103[4] <= 2) {
      goto LABEL_21;
    }
  }
  else
  {
    j__free(v122);
    long long v122 = &v123;
    double v121 = &v120[8];
    float v19 = (uint64_t *)v105;
    if (*(int *)&v103[4] <= 2)
    {
LABEL_21:
      uint64_t v123 = *v19;
      uint64_t v124 = v19[1];
      goto LABEL_24;
    }
  }
  long long v122 = v19;
  double v121 = v104;
  float v19 = &v106;
  double v104 = &v103[8];
  double v105 = &v106;
LABEL_24:
  *(_DWORD *)double v103 = 1124007936;
  memset(&v103[4], 0, 60);
  if (v19 != &v106) {
    j__free(v19);
  }
  if (sub_10029A230((_DWORD *)a4) == 0x10000)
  {
    uint64_t v20 = *(void *)(a4 + 8);
    long long v21 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)double v103 = *(_OWORD *)v20;
    *(_OWORD *)&v103[16] = v21;
    *(_OWORD *)&v103[32] = *(_OWORD *)(v20 + 32);
    uint64_t v22 = *(void *)(v20 + 56);
    *(void *)&v103[48] = *(void *)(v20 + 48);
    *(void *)&v103[56] = v22;
    double v104 = &v103[8];
    double v105 = &v106;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    if (v22) {
      atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 1u);
    }
    if (*(int *)(v20 + 4) > 2)
    {
      *(_DWORD *)&v103[4] = 0;
      sub_1002931A8((uint64_t)v103, v20);
    }
    else
    {
      uint64_t v23 = *(void **)(v20 + 72);
      long double v24 = v105;
      *(void *)double v105 = *v23;
      v24[1] = v23[1];
    }
  }
  else
  {
    sub_100299554(a4, -1, (uint64_t)v103);
  }
  if (*(void *)&v108[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v108[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v108);
  }
  if (*(int *)&v108[4] >= 1)
  {
    uint64_t v25 = 0;
    long double v26 = v109;
    do
      v26[v25++] = 0;
    while (v25 < *(int *)&v108[4]);
  }
  *(_OWORD *)long long v108 = *(_OWORD *)v103;
  *(_OWORD *)&v108[16] = *(_OWORD *)&v103[16];
  *(_OWORD *)&v108[32] = *(_OWORD *)&v103[32];
  *(_OWORD *)&v108[48] = *(_OWORD *)&v103[48];
  if (v110 == &v111)
  {
    long double v27 = (uint64_t *)v105;
    if (*(int *)&v103[4] <= 2) {
      goto LABEL_41;
    }
  }
  else
  {
    j__free(v110);
    double v109 = &v108[8];
    double v110 = &v111;
    long double v27 = (uint64_t *)v105;
    if (*(int *)&v103[4] <= 2)
    {
LABEL_41:
      uint64_t v111 = *v27;
      uint64_t v112 = v27[1];
      goto LABEL_44;
    }
  }
  double v109 = v104;
  double v110 = v27;
  long double v27 = &v106;
  double v104 = &v103[8];
  double v105 = &v106;
LABEL_44:
  *(_DWORD *)double v103 = 1124007936;
  memset(&v103[4], 0, 60);
  if (v27 != &v106) {
    j__free(v27);
  }
  int v28 = sub_100298CD4((unsigned int *)v120, 4, -1, 1);
  int v29 = sub_100298CD4((unsigned int *)v108, 4, -1, 1);
  if (v28 >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 4;
    int64x2_t v83 = vdupq_n_s64(0x406FE00000000000uLL);
    do
    {
      if ((v120[1] & 0x40) != 0 || *v121 == 1)
      {
        float v33 = *(float *)(*(void *)&v120[16] + v31);
        float v32 = *(float *)(*(void *)&v120[16] + v31 + 4);
        int v34 = (float *)(*(void *)&v120[16] + v31 - 4);
        float v35 = *v34;
      }
      else
      {
        if (v121[1] == 1)
        {
          uint64_t v37 = *(void *)&v120[16];
          long double v38 = (float *)(*(void *)&v120[16] + *(void *)v122 * v30);
          double v39 = (float *)(*(void *)&v120[16] + *(void *)v122 * v30);
          if (v121[1] == 1)
          {
            float v35 = *v38;
            float v33 = v39[1];
            float v32 = *(float *)(*(void *)&v120[16] + *(void *)v122 * v30 + 8);
LABEL_60:
            int v34 = (float *)(v37 + *(void *)v122 * v30);
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v37 = *(void *)&v120[16];
          long double v38 = (float *)(*(void *)&v120[16]
                        + v31
                        + *(void *)v122 * ((int)v30 / *(_DWORD *)&v120[12])
                        - 16 * (int)v30 / *(_DWORD *)&v120[12] * *(_DWORD *)&v120[12]
                        - 4);
          double v39 = v38;
        }
        float v35 = *v38;
        float v33 = v39[1];
        float v32 = *(float *)(v37
                       + v31
                       + *(void *)v122 * ((int)v30 / *(_DWORD *)&v120[12])
                       - 16 * (int)v30 / *(_DWORD *)&v120[12] * *(_DWORD *)&v120[12]
                       + 4);
        if (v121[1] == 1) {
          goto LABEL_60;
        }
        int v34 = (float *)(v37
                      + *(void *)v122 * ((int)v30 / *(_DWORD *)&v120[12])
                      + 16 * ((int)v30 % *(_DWORD *)&v120[12]));
      }
LABEL_51:
      float v36 = v34[3];
      LODWORD(v85) = -2097086464;
      *((void *)&v85 + 1) = v125;
      *(void *)&long long v86 = 0;
      LODWORD(v102) = (uint64_t)rintf(v35);
      HIDWORD(v102) = (uint64_t)rintf(v33);
      LODWORD(v101) = (uint64_t)rintf(v32);
      HIDWORD(v101) = (uint64_t)rintf(v36);
      *(int64x2_t *)double v103 = v83;
      *(int64x2_t *)&v103[16] = v83;
      sub_10032700C((uint64_t)&v85, &v102, &v101, (double *)v103, 1u, 8, 0);
      ++v30;
      v31 += 16;
    }
    while (v28 != v30);
  }
  if (v29 >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 4;
    int64x2_t v84 = vdupq_n_s64(0x406FE00000000000uLL);
    do
    {
      if ((v108[1] & 0x40) != 0 || *v109 == 1)
      {
        float v43 = *(float *)(*(void *)&v108[16] + v41);
        float v42 = *(float *)(*(void *)&v108[16] + v41 + 4);
        double v44 = (float *)(*(void *)&v108[16] + v41 - 4);
        float v45 = *v44;
      }
      else
      {
        if (v109[1] == 1)
        {
          uint64_t v47 = *(void *)&v108[16];
          double v48 = (float *)(*(void *)&v108[16] + *(void *)v110 * v40);
          long double v49 = (float *)(*(void *)&v108[16] + *(void *)v110 * v40);
          if (v109[1] == 1)
          {
            float v45 = *v48;
            float v43 = v49[1];
            float v42 = *(float *)(*(void *)&v108[16] + *(void *)v110 * v40 + 8);
LABEL_75:
            double v44 = (float *)(v47 + *(void *)v110 * v40);
            goto LABEL_66;
          }
        }
        else
        {
          uint64_t v47 = *(void *)&v108[16];
          double v48 = (float *)(*(void *)&v108[16]
                        + v41
                        + *(void *)v110 * ((int)v40 / *(_DWORD *)&v108[12])
                        - 16 * (int)v40 / *(_DWORD *)&v108[12] * *(_DWORD *)&v108[12]
                        - 4);
          long double v49 = v48;
        }
        float v45 = *v48;
        float v43 = v49[1];
        float v42 = *(float *)(v47
                       + v41
                       + *(void *)v110 * ((int)v40 / *(_DWORD *)&v108[12])
                       - 16 * (int)v40 / *(_DWORD *)&v108[12] * *(_DWORD *)&v108[12]
                       + 4);
        if (v109[1] == 1) {
          goto LABEL_75;
        }
        double v44 = (float *)(v47
                      + *(void *)v110 * ((int)v40 / *(_DWORD *)&v108[12])
                      + 16 * ((int)v40 % *(_DWORD *)&v108[12]));
      }
LABEL_66:
      float v46 = v44[3];
      LODWORD(v85) = -2097086464;
      *((void *)&v85 + 1) = v113;
      *(void *)&long long v86 = 0;
      LODWORD(v100) = (uint64_t)rintf(v45);
      HIDWORD(v100) = (uint64_t)rintf(v43);
      LODWORD(v99) = (uint64_t)rintf(v42);
      HIDWORD(v99) = (uint64_t)rintf(v46);
      *(int64x2_t *)double v103 = v84;
      *(int64x2_t *)&v103[16] = v84;
      sub_10032700C((uint64_t)&v85, &v100, &v99, (double *)v103, 1u, 8, 0);
      ++v40;
      v41 += 16;
    }
    while (v29 != v40);
  }
  *(_DWORD *)double v103 = 1124007936;
  memset(&v103[4], 0, 60);
  double v104 = &v103[8];
  double v105 = &v106;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  *(void *)&long long v86 = 0;
  LODWORD(v85) = -2130640896;
  *((void *)&v85 + 1) = v125;
  uint64_t v98 = 0;
  LODWORD(v96) = -2130640896;
  long long v97 = v113;
  int v93 = 33619968;
  long long v94 = v103;
  uint64_t v95 = 0;
  long double v50 = sub_1002A02C4();
  sub_1002118E8((uint64_t)&v85, (uint64_t)&v96, (uint64_t)&v93, (uint64_t)v50);
  LODWORD(v85) = 16842752;
  *((void *)&v85 + 1) = v103;
  *(void *)&long long v86 = 0;
  uint64_t v51 = sub_1002CA988((uint64_t)&v85);
  if (sub_10029FDC8((uint64_t)a5))
  {
    if (sub_10029D67C(a5, -1) != 3)
    {
      long long v85 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&v85, 22), "_image.channels() == 3", 22);
      sub_1002D2278(-215, (uint64_t *)&v85, "compareSegments", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1211);
    }
    uint64_t v52 = sub_10029E454((uint64_t)a5, -1);
    long long v53 = *(_OWORD *)(v52 + 16);
    long long v85 = *(_OWORD *)v52;
    long long v86 = v53;
    long long v87 = *(_OWORD *)(v52 + 32);
    uint64_t v54 = *(void *)(v52 + 56);
    uint64_t v88 = *(void *)(v52 + 48);
    uint64_t v89 = v54;
    double v90 = (char *)&v85 + 8;
    double v91 = v92;
    v92[0] = 0;
    v92[1] = 0;
    if (v54) {
      atomic_fetch_add((atomic_uint *volatile)(v54 + 20), 1u);
    }
    if (*(int *)(v52 + 4) > 2)
    {
      DWORD1(v85) = 0;
      sub_1002931A8((uint64_t)&v85, v52);
    }
    else
    {
      long double v55 = *(void **)(v52 + 72);
      long double v56 = v91;
      *(void *)double v91 = *v55;
      v56[1] = v55[1];
    }
    if ((BYTE1(v85) & 0x40) == 0 || (v125[1] & 0x40) == 0 || (v113[0] & 0x4000) == 0)
    {
      uint64_t v96 = 0;
      long long v97 = 0;
      qmemcpy((void *)sub_1002D19D8(&v96, 60), "img.isContinuous() && I1.isContinuous() && I2.isContinuous()", 60);
      sub_1002D2278(-215, &v96, "compareSegments", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/lsd.cpp", 1213);
    }
    for (unsigned int i = 0; ; ++i)
    {
      if (v126 >= 3)
      {
        long double v59 = (int *)(v132 + 4);
        uint64_t v60 = v126 & 0xFFFFFFFE;
        uint64_t v61 = 1;
        uint64_t v62 = 1;
        do
        {
          v61 *= *(v59 - 1);
          v62 *= *v59;
          v59 += 2;
          v60 -= 2;
        }
        while (v60);
        unint64_t v58 = v62 * v61;
        unint64_t v63 = v126 - (unint64_t)(v126 & 0xFFFFFFFE);
        if (v63)
        {
          int v64 = (int *)(v132 + ((4 * v126) & 0x3FFFFFFF8));
          do
          {
            uint64_t v65 = *v64++;
            v58 *= v65;
            --v63;
          }
          while (v63);
        }
      }
      else
      {
        unint64_t v58 = v128 * (uint64_t)v127;
      }
      if (v58 <= i) {
        break;
      }
      int v66 = *(unsigned __int8 *)(v114 + i);
      if (*(unsigned __int8 *)(v129 + i) | v66)
      {
        unsigned int v67 = 3 * i;
        if (*(unsigned char *)(v129 + i)) {
          char v68 = -1;
        }
        else {
          char v68 = 0;
        }
        *(unsigned char *)(v86 + v67) = v68;
        *(unsigned char *)(v86 + v67 + 1) = 0;
        if (v66) {
          char v69 = -1;
        }
        else {
          char v69 = 0;
        }
        *(unsigned char *)(v86 + v67 + 2) = v69;
      }
    }
    if (v89 && atomic_fetch_add((atomic_uint *volatile)(v89 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v85);
    }
    uint64_t v89 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    if (SDWORD1(v85) >= 1)
    {
      uint64_t v70 = 0;
      double v71 = v90;
      do
        *(_DWORD *)&v71[4 * v70++] = 0;
      while (v70 < SDWORD1(v85));
    }
    if (v91 != v92) {
      j__free(v91);
    }
  }
  if (*(void *)&v103[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v103[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v103);
  }
  *(void *)&v103[56] = 0;
  memset(&v103[16], 0, 32);
  if (*(int *)&v103[4] >= 1)
  {
    uint64_t v72 = 0;
    double v73 = v104;
    do
      *(_DWORD *)&v73[4 * v72++] = 0;
    while (v72 < *(int *)&v103[4]);
  }
  if (v105 != &v106) {
    j__free(v105);
  }
  if (*(void *)&v108[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v108[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v108);
  }
  *(void *)&v108[56] = 0;
  memset(&v108[16], 0, 32);
  if (*(int *)&v108[4] >= 1)
  {
    uint64_t v74 = 0;
    double v75 = v109;
    do
      v75[v74++] = 0;
    while (v74 < *(int *)&v108[4]);
  }
  if (v110 != &v111) {
    j__free(v110);
  }
  if (*(void *)&v120[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v120[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v120);
  }
  *(void *)&v120[56] = 0;
  memset(&v120[16], 0, 32);
  if (*(int *)&v120[4] >= 1)
  {
    uint64_t v76 = 0;
    long long v77 = v121;
    do
      v77[v76++] = 0;
    while (v76 < *(int *)&v120[4]);
  }
  if (v122 != &v123) {
    j__free(v122);
  }
  if (v116 && atomic_fetch_add((atomic_uint *volatile)(v116 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v113);
  }
  uint64_t v116 = 0;
  long long v114 = 0u;
  long long v115 = 0u;
  if (SHIDWORD(v113[0]) >= 1)
  {
    uint64_t v78 = 0;
    uint64_t v79 = v117;
    do
      *(_DWORD *)(v79 + 4 * v78++) = 0;
    while (v78 < SHIDWORD(v113[0]));
  }
  if (v118 != &v119) {
    j__free(v118);
  }
  if (v131 && atomic_fetch_add((atomic_uint *volatile)(v131 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v125);
  }
  uint64_t v131 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  if (v126 >= 1)
  {
    uint64_t v80 = 0;
    uint64_t v81 = v132;
    do
      *(_DWORD *)(v81 + 4 * v80++) = 0;
    while (v80 < v126);
  }
  if (v133 != &v134) {
    j__free(v133);
  }
  if (v136) {
    sub_1002D6888(v135);
  }
  return v51;
}

void sub_10035F910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1002D1A1C(&a11);
  sub_1000094F4((uint64_t)&a33);
  sub_1000094F4((uint64_t)&a45);
  sub_1000094F4((uint64_t)&a69);
  sub_10035A2A4((uint64_t)&a57);
  sub_10035A2A4(v69 - 208);
  sub_10020FA00(v69 - 112);
  _Unwind_Resume(a1);
}

void sub_10035FA94(uint64_t a1)
{
  sub_10035FB60(a1);

  operator delete();
}

uint64_t sub_10035FACC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1);
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 64);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 4));
  }
  uint64_t v5 = *(void **)(a1 + 72);
  if (v5 != (void *)(a1 + 80)) {
    j__free(v5);
  }
  return a1;
}

void *sub_10035FB60(uint64_t a1)
{
  *(void *)a1 = off_10049B078;
  uint64_t v2 = *(void **)(a1 + 576);
  if (v2)
  {
    *(void *)(a1 + 584) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 448);
  if (v3 && atomic_fetch_add((atomic_uint *volatile)(v3 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 392);
  }
  *(void *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  if (*(int *)(a1 + 396) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 456);
    do
      *(_DWORD *)(v5 + 4 * v4++) = 0;
    while (v4 < *(int *)(a1 + 396));
  }
  long long v6 = *(void **)(a1 + 464);
  if (v6 != (void *)(a1 + 472)) {
    j__free(v6);
  }
  uint64_t v7 = *(void *)(a1 + 352);
  if (v7 && atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 296);
  }
  *(void *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  if (*(int *)(a1 + 300) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a1 + 360);
    do
      *(_DWORD *)(v9 + 4 * v8++) = 0;
    while (v8 < *(int *)(a1 + 300));
  }
  unsigned int v10 = *(void **)(a1 + 368);
  if (v10 != (void *)(a1 + 376)) {
    j__free(v10);
  }
  uint64_t v11 = *(void *)(a1 + 256);
  if (v11 && atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 200);
  }
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  if (*(int *)(a1 + 204) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1 + 264);
    do
      *(_DWORD *)(v13 + 4 * v12++) = 0;
    while (v12 < *(int *)(a1 + 204));
  }
  uint64_t v14 = *(void **)(a1 + 272);
  if (v14 != (void *)(a1 + 280)) {
    j__free(v14);
  }
  uint64_t v15 = *(void *)(a1 + 160);
  if (v15 && atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 104);
  }
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if (*(int *)(a1 + 108) >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(a1 + 168);
    do
      *(_DWORD *)(v17 + 4 * v16++) = 0;
    while (v16 < *(int *)(a1 + 108));
  }
  float v18 = *(void **)(a1 + 176);
  if (v18 != (void *)(a1 + 184)) {
    j__free(v18);
  }
  uint64_t v19 = *(void *)(a1 + 64);
  if (v19 && atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1 + 8);
  }
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(int *)(a1 + 12) >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *(void *)(a1 + 72);
    do
      *(_DWORD *)(v21 + 4 * v20++) = 0;
    while (v20 < *(int *)(a1 + 12));
  }
  uint64_t v22 = *(void **)(a1 + 80);
  if (v22 != (void *)(a1 + 88)) {
    j__free(v22);
  }

  return sub_10020FA38((void *)a1);
}

void sub_10035FE08()
{
}

uint64_t sub_10035FE1C(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*a1 + 8);

  return v3(a1);
}

void sub_10035FE9C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      uint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    long long v6 = *(void **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      sub_10000B98C();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_10000BA6C();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    uint64_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        uint64_t v17 = *(v5 - 2);
        v5 -= 2;
        *((void *)v13 - 2) = v17;
        v13 -= 16;
        *((void *)v13 + 1) = v5[1];
      }
      while (v5 != v6);
      uint64_t v5 = *(void **)a1;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_10035FFD4(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, int *), uint64_t a4, char a5)
{
uint64_t sub_10036050C(int *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, int *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, (int *)a2);
  if (v8)
  {
    int v11 = *a1;
    int v10 = a1[1];
    char v12 = *((unsigned char *)a1 + 8);
    if (result)
    {
      *(void *)a1 = *a3;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a3 + 8);
      *(_DWORD *)a3 = v11;
      *((_DWORD *)a3 + 1) = v10;
      *((unsigned char *)a3 + 8) = v12;
      return 1;
    }
    *(void *)a1 = *a2;
    *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
    *(_DWORD *)a2 = v11;
    *((_DWORD *)a2 + 1) = v10;
    *((unsigned char *)a2 + 8) = v12;
    if ((*a4)(a3, (int *)a2))
    {
      char v19 = *((unsigned char *)a2 + 8);
      uint64_t v20 = *a3;
      *((unsigned char *)a2 + 8) = *((unsigned char *)a3 + 8);
      uint64_t v21 = *a2;
      *a2 = v20;
      *a3 = v21;
      *((unsigned char *)a3 + 8) = v19;
      return 2;
    }
    return 1;
  }
  if (result)
  {
    char v13 = *((unsigned char *)a2 + 8);
    uint64_t v14 = *a3;
    *((unsigned char *)a2 + 8) = *((unsigned char *)a3 + 8);
    uint64_t v15 = *a2;
    *a2 = v14;
    *a3 = v15;
    *((unsigned char *)a3 + 8) = v13;
    if ((*a4)(a2, a1))
    {
      char v16 = *((unsigned char *)a1 + 8);
      uint64_t v17 = *a2;
      *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
      uint64_t v18 = *(void *)a1;
      *(void *)a1 = v17;
      *a2 = v18;
      *((unsigned char *)a2 + 8) = v16;
      return 2;
    }
    return 1;
  }
  return result;
}

uint64_t *sub_100360688(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v4 = a2;
  uint64_t v13 = *a1;
  char v14 = *((unsigned char *)a1 + 8);
  if ((*a3)(&v13, (uint64_t *)((char *)a2 - 12)))
  {
    char v6 = a1;
    do
      char v6 = (uint64_t *)((char *)v6 + 12);
    while (((*a3)(&v13, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (uint64_t *)((char *)a1 + 12);
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v13, v7);
      uint64_t v7 = (uint64_t *)((char *)v6 + 12);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      uint64_t v4 = (uint64_t *)((char *)v4 - 12);
    while (((*a3)(&v13, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    char v9 = *((unsigned char *)v6 + 8);
    uint64_t v10 = *v4;
    *((unsigned char *)v6 + 8) = *((unsigned char *)v4 + 8);
    uint64_t v11 = *v6;
    *char v6 = v10;
    *uint64_t v4 = v11;
    *((unsigned char *)v4 + 8) = v9;
    do
      char v6 = (uint64_t *)((char *)v6 + 12);
    while (!(*a3)(&v13, v6));
    do
      uint64_t v4 = (uint64_t *)((char *)v4 - 12);
    while (((*a3)(&v13, v4) & 1) != 0);
  }
  if ((uint64_t *)((char *)v6 - 12) != a1)
  {
    *a1 = *(uint64_t *)((char *)v6 - 12);
    *((unsigned char *)a1 + 8) = *((unsigned char *)v6 - 4);
  }
  *(uint64_t *)((char *)v6 - 12) = v13;
  *((unsigned char *)v6 - 4) = v14;
  return v6;
}

double sub_1003607D8(uint64_t a1, uint64_t *a2, uint64_t (**a3)(uint64_t, double *))
{
  uint64_t v6 = 0;
  double v14 = *(double *)a1;
  char v15 = *(unsigned char *)(a1 + 8);
  do
    v6 += 12;
  while (((*a3)(v6 + a1, &v14) & 1) != 0);
  unint64_t v7 = a1 + v6;
  if (v6 == 12)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 = (uint64_t *)((char *)a2 - 12);
    }
    while (((*a3)((uint64_t)a2, &v14) & 1) == 0);
  }
  else
  {
    do
      a2 = (uint64_t *)((char *)a2 - 12);
    while (!(*a3)((uint64_t)a2, &v14));
  }
  int v8 = (uint64_t *)(a1 + v6);
  if (v7 < (unint64_t)a2)
  {
    char v9 = a2;
    do
    {
      char v10 = *((unsigned char *)v8 + 8);
      uint64_t v11 = *v9;
      *((unsigned char *)v8 + 8) = *((unsigned char *)v9 + 8);
      uint64_t v12 = *v8;
      *int v8 = v11;
      *char v9 = v12;
      *((unsigned char *)v9 + 8) = v10;
      do
        int v8 = (uint64_t *)((char *)v8 + 12);
      while (((*a3)((uint64_t)v8, &v14) & 1) != 0);
      do
        char v9 = (uint64_t *)((char *)v9 - 12);
      while (!(*a3)((uint64_t)v9, &v14));
    }
    while (v8 < v9);
  }
  if ((uint64_t *)((char *)v8 - 12) != (uint64_t *)a1)
  {
    *(void *)a1 = *(uint64_t *)((char *)v8 - 12);
    *(unsigned char *)(a1 + 8) = *((unsigned char *)v8 - 4);
  }
  double result = v14;
  *(double *)((char *)v8 - 12) = v14;
  *((unsigned char *)v8 - 4) = v15;
  return result;
}

BOOL sub_100360928(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t *, int *))
{
  uint64_t v6 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((*a3)((uint64_t *)(a2 - 12), (int *)a1))
      {
        char v8 = *(unsigned char *)(a1 + 8);
        uint64_t v9 = *(void *)(a2 - 12);
        *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 - 4);
        uint64_t v10 = *(void *)a1;
        *(void *)a1 = v9;
        *(void *)(a2 - 12) = v10;
        *(unsigned char *)(a2 - 4) = v8;
      }
      return 1;
    case 3uLL:
      sub_10036050C((int *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a2 - 12), a3);
      return 1;
    case 4uLL:
      sub_100360B34((int *)a1, a1 + 12, a1 + 24, a2 - 12, a3);
      return 1;
    case 5uLL:
      sub_100360C18((int *)a1, a1 + 12, a1 + 24, a1 + 36, (uint64_t *)(a2 - 12), a3);
      return 1;
    default:
      uint64_t v11 = (int *)(a1 + 24);
      sub_10036050C((int *)a1, (uint64_t *)(a1 + 12), (uint64_t *)(a1 + 24), a3);
      uint64_t v12 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((uint64_t *)v12, v11))
    {
      uint64_t v18 = *(void *)v12;
      char v19 = *(unsigned char *)(v12 + 8);
      uint64_t v16 = v13;
      do
      {
        uint64_t v17 = a1 + v16;
        *(void *)(v17 + 36) = *(void *)(a1 + v16 + 24);
        *(unsigned char *)(v17 + 44) = *(unsigned char *)(a1 + v16 + 32);
        if (v16 == -24)
        {
          uint64_t v15 = a1;
          goto LABEL_7;
        }
        v16 -= 12;
      }
      while (((*a3)(&v18, (int *)(v17 + 12)) & 1) != 0);
      uint64_t v15 = a1 + v16 + 36;
LABEL_7:
      *(void *)uint64_t v15 = v18;
      *(unsigned char *)(v15 + 8) = v19;
      if (++v14 == 8) {
        return v12 + 12 == a2;
      }
    }
    uint64_t v11 = (int *)v12;
    v13 += 12;
    v12 += 12;
    if (v12 == a2) {
      return 1;
    }
  }
}

double sub_100360B34(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t *, int *))
{
  sub_10036050C(a1, (uint64_t *)a2, (uint64_t *)a3, a5);
  if ((*a5)((uint64_t *)a4, (int *)a3))
  {
    char v11 = *(unsigned char *)(a3 + 8);
    uint64_t v12 = *(void *)a4;
    *(unsigned char *)(a3 + 8) = *(unsigned char *)(a4 + 8);
    uint64_t v13 = *(void *)a3;
    *(void *)a3 = v12;
    *(void *)a4 = v13;
    *(unsigned char *)(a4 + 8) = v11;
    if ((*a5)((uint64_t *)a3, (int *)a2))
    {
      char v14 = *(unsigned char *)(a2 + 8);
      uint64_t v15 = *(void *)a3;
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 8);
      uint64_t v16 = *(void *)a2;
      *(void *)a2 = v15;
      *(void *)a3 = v16;
      *(unsigned char *)(a3 + 8) = v14;
      if ((*a5)((uint64_t *)a2, a1))
      {
        char v17 = *((unsigned char *)a1 + 8);
        double result = *(double *)a2;
        *((unsigned char *)a1 + 8) = *(unsigned char *)(a2 + 8);
        uint64_t v18 = *(void *)a1;
        *(double *)a1 = result;
        *(void *)a2 = v18;
        *(unsigned char *)(a2 + 8) = v17;
      }
    }
  }
  return result;
}

double sub_100360C18(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, int *))
{
  double v12 = sub_100360B34(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t *, uint64_t, double))*a6)(a5, a4, v12))
  {
    char v14 = *(unsigned char *)(a4 + 8);
    uint64_t v15 = *a5;
    *(unsigned char *)(a4 + 8) = *((unsigned char *)a5 + 8);
    uint64_t v16 = *(void *)a4;
    *(void *)a4 = v15;
    *a5 = v16;
    *((unsigned char *)a5 + 8) = v14;
    if ((*a6)((uint64_t *)a4, (int *)a3))
    {
      char v17 = *(unsigned char *)(a3 + 8);
      uint64_t v18 = *(void *)a4;
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(a4 + 8);
      uint64_t v19 = *(void *)a3;
      *(void *)a3 = v18;
      *(void *)a4 = v19;
      *(unsigned char *)(a4 + 8) = v17;
      if ((*a6)((uint64_t *)a3, (int *)a2))
      {
        char v20 = *(unsigned char *)(a2 + 8);
        uint64_t v21 = *(void *)a3;
        *(unsigned char *)(a2 + 8) = *(unsigned char *)(a3 + 8);
        double v22 = *(double *)a2;
        *(void *)a2 = v21;
        *(double *)a3 = v22;
        *(unsigned char *)(a3 + 8) = v20;
        if ((*a6)((uint64_t *)a2, a1))
        {
          char v23 = *((unsigned char *)a1 + 8);
          double result = *(double *)a2;
          *((unsigned char *)a1 + 8) = *(unsigned char *)(a2 + 8);
          uint64_t v24 = *(void *)a1;
          *(double *)a1 = result;
          *(void *)a2 = v24;
          *(unsigned char *)(a2 + 8) = v23;
        }
      }
    }
  }
  return result;
}

double sub_100360D34(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 2)))
    {
      uint64_t v12 = (0x5555555555555556 * ((a4 - a1) >> 2)) | 1;
      uint64_t v13 = a1 + 12 * v12;
      uint64_t v14 = 0x5555555555555556 * ((a4 - a1) >> 2) + 2;
      if (v14 < a3 && (*a2)(a1 + 12 * v12, v13 + 12))
      {
        v13 += 12;
        uint64_t v12 = v14;
      }
      if ((((uint64_t (*)(uint64_t, uint64_t))*a2)(v13, v7) & 1) == 0)
      {
        double v19 = *(double *)v7;
        char v20 = *(unsigned char *)(v7 + 8);
        do
        {
          uint64_t v16 = v13;
          *(void *)uint64_t v7 = *(void *)v13;
          *(unsigned char *)(v7 + 8) = *(unsigned char *)(v13 + 8);
          if (v9 < v12) {
            break;
          }
          uint64_t v17 = (2 * v12) | 1;
          uint64_t v13 = a1 + 12 * v17;
          uint64_t v18 = 2 * v12 + 2;
          if (v18 < a3)
          {
            if ((*a2)(a1 + 12 * v17, v13 + 12))
            {
              v13 += 12;
              uint64_t v17 = v18;
            }
          }
          uint64_t v7 = v16;
          uint64_t v12 = v17;
        }
        while (!(*a2)(v13, (uint64_t)&v19));
        double result = v19;
        *(double *)uint64_t v16 = v19;
        *(unsigned char *)(v16 + 8) = v20;
      }
    }
  }
  return result;
}

uint64_t sub_100360EA8(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v25 = v4;
    uint64_t v26 = v5;
    uint64_t v9 = 0;
    int v21 = *(_DWORD *)(result + 4);
    int v22 = *(_DWORD *)result;
    int64_t v10 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v11 = result;
    uint64_t v19 = result;
    char v20 = *(unsigned char *)(result + 8);
    do
    {
      uint64_t v12 = v11 + 12 * v9 + 12;
      uint64_t v13 = (2 * v9) | 1;
      uint64_t v14 = 2 * v9 + 2;
      if (v14 < a4)
      {
        double result = (*a3)(v11 + 12 * v9 + 12, v11 + 12 * v9 + 24);
        if (result)
        {
          v12 += 12;
          uint64_t v13 = v14;
        }
      }
      *(void *)uint64_t v11 = *(void *)v12;
      *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
      uint64_t v11 = v12;
      uint64_t v9 = v13;
    }
    while (v13 <= v10);
    if (v12 == a2 - 12)
    {
      *(_DWORD *)uint64_t v12 = v22;
      *(_DWORD *)(v12 + 4) = v21;
      *(unsigned char *)(v12 + 8) = v20;
    }
    else
    {
      *(void *)uint64_t v12 = *(void *)(a2 - 12);
      *(unsigned char *)(v12 + 8) = *(unsigned char *)(a2 - 4);
      *(_DWORD *)(a2 - 12) = v22;
      *(_DWORD *)(a2 - 8) = v21;
      *(unsigned char *)(a2 - 4) = v20;
      uint64_t v15 = v12 - v19 + 12;
      if (v15 >= 13)
      {
        unint64_t v16 = (v15 / 0xCuLL - 2) >> 1;
        uint64_t v17 = v19 + 12 * v16;
        double result = (*a3)(v17, v12);
        if (result)
        {
          uint64_t v23 = *(void *)v12;
          char v24 = *(unsigned char *)(v12 + 8);
          do
          {
            uint64_t v18 = v17;
            *(void *)uint64_t v12 = *(void *)v17;
            *(unsigned char *)(v12 + 8) = *(unsigned char *)(v17 + 8);
            if (!v16) {
              break;
            }
            unint64_t v16 = (v16 - 1) >> 1;
            uint64_t v17 = v19 + 12 * v16;
            double result = (*a3)(v17, (uint64_t)&v23);
            uint64_t v12 = v18;
          }
          while ((result & 1) != 0);
          *(void *)uint64_t v18 = v23;
          *(unsigned char *)(v18 + 8) = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_100361078(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = a1 + 8;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)a1 = 1124007936;
  LODWORD(v6[0]) = 1124007936;
  memset((char *)v6 + 4, 0, 32);
  memset((char *)&v6[4] + 4, 0, 28);
  uint64_t v7 = &v6[1];
  char v8 = v9;
  v9[0] = 0;
  v9[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v6, 0xFFFFFFFFLL);
  sub_1003611C4(a1, (uint64_t)v6);
  if (v6[7] && atomic_fetch_add((atomic_uint *volatile)(v6[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v6);
  }
  v6[7] = 0;
  memset(&v6[2], 0, 32);
  if (SHIDWORD(v6[0]) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v7;
    do
      *((_DWORD *)v4 + v3++) = 0;
    while (v3 < SHIDWORD(v6[0]));
  }
  if (v8 != v9) {
    j__free(v8);
  }
  return a1;
}

void sub_1003611A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000094F4((uint64_t)&a9);
  sub_10035FACC(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003611C4(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a2 & 0xFFF) != 0)
  {
    if ((*(_DWORD *)a2 & 7) != 0)
    {
      *(_DWORD *)uint64_t v14 = -2113863680;
      *(void *)&unsigned char v14[8] = a1;
      *(void *)&v14[16] = 0;
      sub_10024011C((unsigned int *)a2, (uint64_t)v14, 0, 1.0, 0.0);
      return a1;
    }
    sub_100297ED4((unsigned int *)a2, 1, *(_DWORD *)(a2 + 4), 0, (uint64_t)v14);
    uint64_t v4 = *(void *)(a1 + 56);
    if (v14 == (unsigned char *)a1)
    {
      if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)v14);
      }
      goto LABEL_22;
    }
    if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1);
    }
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(a1 + 64);
      do
        *(_DWORD *)(v6 + 4 * v5++) = 0;
      while (v5 < *(int *)(a1 + 4));
    }
    int v7 = *(_DWORD *)&v14[4];
    long long v8 = *(_OWORD *)&v14[16];
    *(_OWORD *)a1 = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *(_OWORD *)&v14[48];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v14[32];
    *(_OWORD *)(a1 + 48) = v9;
    int64_t v10 = *(void **)(a1 + 72);
    if (v10 == (void *)(a1 + 80))
    {
      uint64_t v11 = v16;
      if (v7 <= 2) {
        goto LABEL_15;
      }
    }
    else
    {
      j__free(v10);
      *(void *)(a1 + 64) = a1 + 8;
      *(void *)(a1 + 72) = a1 + 80;
      int64_t v10 = (void *)(a1 + 80);
      uint64_t v11 = v16;
      if (*(int *)&v14[4] <= 2)
      {
LABEL_15:
        void *v10 = *v11;
        v10[1] = v11[1];
LABEL_21:
        *(_DWORD *)uint64_t v14 = 1124007936;
        memset(&v14[4], 0, 60);
LABEL_22:
        *(void *)&v14[56] = 0;
        memset(&v14[16], 0, 32);
        if (*(int *)&v14[4] >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = v15;
          do
            *(_DWORD *)&v13[4 * v12++] = 0;
          while (v12 < *(int *)&v14[4]);
        }
        if (v16 != v17) {
          j__free(v16);
        }
        return a1;
      }
    }
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v11;
    uint64_t v15 = &v14[8];
    unint64_t v16 = v17;
    goto LABEL_21;
  }
  sub_100287094(a1, a2);
  return a1;
}

void sub_1003613E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003613F8(unint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, double a9, double a10, int a11, int a12)
{
  sub_1002D6AE8(v278, &off_10049B1A0);
  if (a11 * (int)a8 <= 0 && (a9 <= 0.0 || a10 <= 0.0))
  {
    unint64_t v284 = 0;
    uint64_t v283 = 0;
    qmemcpy((void *)sub_1002D19D8(&v283, 68), "(dst_width * dst_height > 0) || (inv_scale_x > 0 && inv_scale_y > 0)", 68);
    sub_1002D2278(-215, (uint64_t *)&v283, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3675);
  }
  if (a9 < 2.22044605e-16 || a10 < 2.22044605e-16)
  {
    a9 = (double)(int)a8 / (double)a4;
    double v19 = (double)(int)a5;
    a10 = (double)a11 / (double)(int)a5;
  }
  else
  {
    double v19 = (double)(int)a5;
  }
  uint64_t v20 = (uint64_t)rint(a9 * (double)a4);
  uint64_t v21 = (uint64_t)rint(a10 * v19);
  if ((int)v21 * (int)v20 <= 0)
  {
    unint64_t v284 = 0;
    uint64_t v283 = 0;
    *(_OWORD *)sub_1002D19D8(&v283, 16) = *(_OWORD *)"dsize.area() > 0";
    sub_1002D2278(-215, (uint64_t *)&v283, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3687);
  }
  uint64_t v22 = (uint64_t)rint(1.0 / a9);
  double v23 = 1.0 / a10;
  uint64_t v24 = (uint64_t)rint(1.0 / a10);
  double v249 = 1.0 / a9;
  BOOL v25 = vabdd_f64(1.0 / a9, (double)(int)v22) < 2.22044605e-16;
  BOOL v26 = vabdd_f64(1.0 / a10, (double)(int)v24) < 2.22044605e-16 && v25;
  v269[0] = a4;
  v269[1] = a5;
  sub_10026BD1C((uint64_t)&v270, v269, a1, a2, a3);
  unint64_t v245 = a3;
  uint64_t v250 = v20;
  v258[0] = v20;
  v258[1] = v21;
  sub_10026BD1C((uint64_t)v259, v258, a1, a6, a7);
  int v27 = a12;
  if (!a12)
  {
    int v33 = *(_DWORD *)(v275 + 4);
    int v34 = *v266;
    unint64_t v35 = (int)v266[1];
    uint64_t v36 = v266[1];
    uint64_t v283 = v285;
    unint64_t v284 = v35;
    if (v35 >= 0x109) {
      operator new[]();
    }
    if (v271 < 1)
    {
      LODWORD(v37) = 0;
      LODWORD(v38) = 0;
      if ((int)v36 < 1) {
        goto LABEL_116;
      }
    }
    else
    {
      uint64_t v37 = *((void *)v276 + (v271 - 1));
      unint64_t v38 = (unint64_t)(int)v37 >> 2;
      if ((int)v36 < 1) {
        goto LABEL_116;
      }
    }
    signed int v82 = v33 - 1;
    if (v35 >= 4)
    {
      uint64_t v83 = v36 & 0xFFFFFFFC;
      int32x4_t v85 = vdupq_n_s32(v82);
      int32x4_t v86 = (int32x4_t)xmmword_100404900;
      int32x4_t v87 = vdupq_n_s32(v37);
      v88.i64[0] = 0x400000004;
      v88.i64[1] = 0x400000004;
      uint64_t v89 = v83;
      double v90 = (int32x4_t *)v285;
      double v84 = 1.0 / a9;
      do
      {
        v91.i64[0] = v86.i32[2];
        v91.i64[1] = v86.i32[3];
        float64x2_t v92 = vcvtq_f64_s64(v91);
        v91.i64[0] = v86.i32[0];
        v91.i64[1] = v86.i32[1];
        float64x2_t v93 = vmulq_n_f64(vcvtq_f64_s64(v91), v249);
        float64x2_t v94 = vmulq_n_f64(v92, v249);
        int32x4_t v95 = (int32x4_t)vcvtq_s64_f64(v94);
        int32x4_t v96 = (int32x4_t)vcvtq_s64_f64(v93);
        int32x4_t v97 = vuzp1q_s32(v96, v95);
        *(int32x2_t *)v95.i8 = vmovn_s64((int64x2_t)v95);
        *(int32x2_t *)v96.i8 = vmovn_s64((int64x2_t)v96);
        v91.i64[0] = v96.i32[0];
        v91.i64[1] = v96.i32[1];
        float64x2_t v98 = vcvtq_f64_s64(v91);
        v91.i64[0] = v95.i32[0];
        v91.i64[1] = v95.i32[1];
        *v90++ = vmulq_s32(vminq_s32(v85, vaddq_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v98, v93), (int32x4_t)vcgtq_f64(vcvtq_f64_s64(v91), v94)), v97)), v87);
        int32x4_t v86 = vaddq_s32(v86, v88);
        v89 -= 4;
      }
      while (v89);
      if (v83 == v36) {
        goto LABEL_116;
      }
    }
    else
    {
      uint64_t v83 = 0;
      double v84 = 1.0 / a9;
    }
    do
    {
      int v99 = (int)(v84 * (double)(int)v83) - (v84 * (double)(int)v83 < (double)(int)(v84 * (double)(int)v83));
      if (v82 < v99) {
        int v99 = v33 - 1;
      }
      *(_DWORD *)&v285[4 * v83++] = v99 * v37;
    }
    while (v36 != v83);
LABEL_116:
    v280[0] = 0;
    v280[1] = v34;
    sub_1003667C8((uint64_t)&__src, (uint64_t)&v270, (uint64_t)v259, (uint64_t)v285, v38, 1.0 / a10);
    if (v260 >= 3)
    {
      uint64_t v101 = v266 + 1;
      uint64_t v102 = 1;
      uint64_t v103 = v260 & 0xFFFFFFFE;
      uint64_t v104 = 1;
      do
      {
        v102 *= *(v101 - 1);
        v104 *= *v101;
        v101 += 2;
        v103 -= 2;
      }
      while (v103);
      uint64_t v100 = v104 * v102;
      unint64_t v105 = v260 - (unint64_t)(v260 & 0xFFFFFFFE);
      if (v105)
      {
        uint64_t v106 = (_DWORD *)((char *)v266 + ((4 * v260) & 0x3FFFFFFF8));
        do
        {
          uint64_t v107 = *v106++;
          v100 *= v107;
          --v105;
        }
        while (v105);
      }
    }
    else
    {
      uint64_t v100 = v262 * (uint64_t)v261;
    }
    sub_1002ABC90(v280, (uint64_t)&__src, (double)(unint64_t)v100 * 0.0000152587891);
    sub_100366CCC((uint64_t)&__src);
    if (v283 != v285 && v283 != 0) {
      goto LABEL_310;
    }
    goto LABEL_311;
  }
  unsigned int v252 = (a1 >> 3) & 0x1FF;
  uint64_t v28 = v252 + 1;
  if (a12 == 1)
  {
    BOOL v40 = v22 == 2 && v24 == 2;
    if (v40 && v26) {
      int v27 = 3;
    }
    else {
      int v27 = 1;
    }
LABEL_47:
    if (v249 < 1.0 || v23 < 1.0 || v27 != 3) {
      goto LABEL_54;
    }
    goto LABEL_70;
  }
  if (a12 != 5) {
    goto LABEL_47;
  }
  BOOL v30 = v22 == 2 && v24 == 2 && v26;
  if (!v30 || v28 == 2)
  {
    if ((a1 & 7) - 5 <= 2)
    {
      unint64_t v284 = 0;
      uint64_t v283 = 0;
      uint64_t v32 = sub_1002D19D8(&v283, 9);
      *(unsigned char *)(v32 + 8) = 48;
      *(void *)uint64_t v32 = *(void *)"func != 0";
      sub_1002D2278(-215, (uint64_t *)&v283, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3827);
    }
    ((void (*)(uint64_t, unint64_t, void, uint64_t, uint64_t, unint64_t, uint64_t, void, double, double, _DWORD))off_10049B300[a1 & 7])(a2, v245, a4, a5, a6, a7, a8, a11, a9, a10, v28);
    goto LABEL_311;
  }
  int v27 = 3;
  if (v249 >= 1.0 && v23 >= 1.0)
  {
LABEL_70:
    if (!v26)
    {
      uint64_t v72 = v21;
      double v73 = (void (*)(int *, unsigned char *, unsigned char *, uint64_t, unsigned char *, uint64_t))*(&off_10049B2C0 + (a1 & 7));
      if (v252 > 3 || ((0x6DuLL >> (a1 & 7)) & 1) == 0)
      {
        unint64_t v284 = 0;
        uint64_t v283 = 0;
        uint64_t v74 = sub_1002D19D8(&v283, 20);
        *(_DWORD *)(v74 + 16) = 874528060;
        *(_OWORD *)uint64_t v74 = *(_OWORD *)"func != 0 && cn <= 4";
        sub_1002D2278(-215, (uint64_t *)&v283, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3881);
      }
      signed int v75 = 2 * (a5 + a4);
      uint64_t v283 = v285;
      unint64_t v284 = v75;
      if (v75 >= 0x5E)
      {
        is_mul_ok(v75, 0xCuLL);
        operator new[]();
      }
      int v76 = 2 * a4;
      uint64_t v77 = sub_100365DD8(a4, v250, v28, (uint64_t)v285, v249);
      uint64_t v78 = sub_100365DD8(a5, v72, 1u, (uint64_t)&v285[24 * a4], 1.0 / a10);
      uint64_t v79 = (uint64_t)&_mh_execute_header + (v72 << 32);
      __src.i64[0] = (uint64_t)v282;
      __src.i64[1] = v79 >> 32;
      if ((unint64_t)v79 >= 0x10800000001) {
        operator new[]();
      }
      if ((int)v78 < 1)
      {
        int v80 = 0;
      }
      else
      {
        v282[0] = 0.0;
        if (v78 == 1)
        {
          int v80 = 1;
        }
        else
        {
          double v125 = &v285[12 * v76 + 16];
          uint64_t v126 = 1;
          int v80 = 1;
          do
          {
            if (*v125 != *(v125 - 3)) {
              LODWORD(v282[v80++]) = v126;
            }
            v125 += 3;
            ++v126;
          }
          while (v78 != v126);
        }
      }
      LODWORD(v282[v80]) = v78;
      v73(&v270, v259, v285, v77, &v285[12 * v76], v78);
      if ((float *)__src.i64[0] != v282 && __src.i64[0] != 0) {
        operator delete[]();
      }
      if (v283 != v285 && v283) {
        goto LABEL_310;
      }
      goto LABEL_311;
    }
    int v48 = v24 * v22;
    unsigned int v49 = v24 * v22 + v28 * v250;
    uint64_t v283 = v285;
    unint64_t v284 = (int)v49;
    if (v49 >= 0x109) {
      operator new[]();
    }
    long double v50 = (void (*)(int *, unsigned char *, unsigned char *, unsigned char *, uint64_t, uint64_t))*(&off_10049B280 + (a1 & 7));
    if ((0x92uLL >> (a1 & 7)))
    {
      float32x4_t __src = 0uLL;
      uint64_t v51 = sub_1002D19D8(&__src, 9);
      *(unsigned char *)(v51 + 8) = 48;
      *(void *)uint64_t v51 = *(void *)"func != 0";
      sub_1002D2278(-215, (uint64_t *)&__src, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3862);
    }
    if ((int)v24 >= 1 && (int)v22 >= 1)
    {
      int v109 = 0;
      LODWORD(v110) = 0;
      int32x4_t v111 = vdupq_n_s32(v28);
      unint64_t v112 = v245 / ((0x88442211uLL >> (4 * (v270 & 7u))) & 0xF);
      v113.i64[0] = 0x400000004;
      v113.i64[1] = 0x400000004;
      v114.i64[0] = 0x800000008;
      v114.i64[1] = 0x800000008;
      do
      {
        unsigned int v115 = v109 * v112;
        uint64_t v116 = (int)v110;
        if (v22 >= 8uLL)
        {
          unint64_t v110 = (int)v110 + v22 - (unint64_t)(v22 & 7);
          int32x4_t v118 = vdupq_n_s32(v115);
          unint64_t v119 = v22 - (unint64_t)(v22 & 7);
          int32x4_t v120 = (int32x4_t)xmmword_100404900;
          double v121 = (int32x4_t *)&v285[4 * v116 + 16];
          do
          {
            v121[-1] = vmlaq_s32(v118, v120, v111);
            *double v121 = vmlaq_s32(v118, vaddq_s32(v120, v113), v111);
            int32x4_t v120 = vaddq_s32(v120, v114);
            v121 += 2;
            v119 -= 8;
          }
          while (v119);
          int v117 = v22 - (v22 & 7);
          if ((v22 & 7) == 0) {
            goto LABEL_128;
          }
        }
        else
        {
          int v117 = 0;
          unint64_t v110 = (int)v110;
        }
        int v122 = v22 - v117;
        unint64_t v123 = v110;
        do
        {
          LODWORD(v110) = v123 + 1;
          *(_DWORD *)&v285[4 * v123] = v115 + v117 * v28;
          ++v117;
          ++v123;
          --v122;
        }
        while (v122);
LABEL_128:
        ++v109;
      }
      while (v109 != v24);
    }
    if ((int)v250 < 1)
    {
LABEL_101:
      v50(&v270, v259, v285, &v285[4 * v48], v22, v24);
      if (v283 != v285 && v283 != 0) {
        goto LABEL_310;
      }
      goto LABEL_311;
    }
    int v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    long double v56 = (int32x4_t *)&v285[4 * v48];
    double v57 = v56 + 1;
    uint64_t v58 = (a1 >> 3) & 0x1FF;
    uint64_t v59 = 4 * v58 + 4;
    uint64_t v60 = v58 + 1;
    v61.i64[0] = 0x800000008;
    v61.i64[1] = 0x800000008;
    while (1)
    {
      if (v252 >= 7)
      {
        unsigned int v63 = v55 * v28 * v22;
        int32x4_t v64 = vdupq_n_s32(v63);
        int32x4_t v65 = vdupq_n_s32(v63 + 4);
        uint64_t v66 = ((_WORD)v252 + 1) & 0x3F8;
        unsigned int v67 = v57;
        int32x4_t v68 = (int32x4_t)xmmword_100404900;
        do
        {
          v67[-1] = vaddq_s32(v64, v68);
          *unsigned int v67 = vaddq_s32(v65, v68);
          int32x4_t v68 = vaddq_s32(v68, v61);
          v67 += 2;
          v66 -= 8;
        }
        while (v66);
        uint64_t v62 = ((_WORD)v252 + 1) & 0x3F8;
        if (v62 == v252 + 1) {
          goto LABEL_82;
        }
      }
      else
      {
        uint64_t v62 = 0;
      }
      uint64_t v69 = &v56->i32[v62 + v54];
      int v70 = v53 + v62;
      uint64_t v71 = v60 - v62;
      do
      {
        *v69++ = v70++;
        --v71;
      }
      while (v71);
LABEL_82:
      ++v55;
      double v57 = (int32x4_t *)((char *)v57 + v59);
      v54 += v28;
      v53 += v28 * v22;
      if (v55 == v250) {
        goto LABEL_101;
      }
    }
  }
LABEL_54:
  if (v27 != 2)
  {
    int v44 = a1 & 7;
    if (v27 != 1)
    {
      if (v27 == 4)
      {
        unsigned int v43 = 8;
        uint64_t v45 = (void (*)(int *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, void, uint64_t, unsigned int))*(&off_10049B240 + (a1 & 7));
        int v246 = 4;
        if (v45) {
          goto LABEL_154;
        }
LABEL_153:
        unint64_t v284 = 0;
        uint64_t v283 = 0;
        uint64_t v127 = sub_1002D19D8(&v283, 9);
        *(unsigned char *)(v127 + 8) = 48;
        *(void *)uint64_t v127 = *(void *)"func != 0";
        sub_1002D2278(-215, (uint64_t *)&v283, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3922);
      }
      if (v27 != 3)
      {
        sub_10022F344(&v283, "Unknown interpolation method");
        sub_1002D2278(-5, (uint64_t *)&v283, "resize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/imgproc/src/resize.cpp", 3919);
      }
    }
    unsigned int v43 = 2;
    uint64_t v45 = (void (*)(int *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, void, uint64_t, unsigned int))*(&off_10049B1C0 + (a1 & 7));
    int v246 = 1;
    if (v45) {
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  unsigned int v43 = 4;
  int v44 = a1 & 7;
  uint64_t v45 = (void (*)(int *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, void, uint64_t, unsigned int))*(&off_10049B200 + (a1 & 7));
  int v246 = 2;
  if (!v45) {
    goto LABEL_153;
  }
LABEL_154:
  int v128 = v28 * v250;
  uint64_t v283 = v285;
  unint64_t v284 = (int)((4 * v43) | 4) * (uint64_t)((int)v28 * (int)v250 + (int)v21);
  if (v284 >= 0x409) {
    operator new[]();
  }
  uint64_t v226 = v45;
  int v227 = v21;
  int v255 = v44;
  unsigned int v257 = v43;
  uint64_t v129 = v128;
  int64x2_t v248 = &v285[4 * v128];
  unint64_t v236 = &v248[4 * (int)v21];
  v130.i64[1] = 0;
  int v225 = v43 * v128;
  float32x4_t __src = 0u;
  memset(v282, 0, 48);
  if ((int)v250 >= 1)
  {
    int v131 = 0;
    unsigned int v132 = 0;
    uint64_t v133 = 0;
    unsigned int v237 = 0;
    int v238 = a4 - 1;
    uint64_t v134 = v43 * v28;
    float32x4x4_t v243 = &v285[4 * v129 + 4 * (int)v21];
    unint64_t v135 = v43;
    __uint64_t n = 4 * v43;
    uint64_t v244 = v250;
    unint64_t v136 = v134 - v43;
    unint64_t v232 = v136 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v242 = v136;
    unint64_t v229 = (v136 & 0xFFFFFFFFFFFFFFF8) + v43;
    unint64_t v230 = v136 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v228 = v136 & 0xFFFFFFFFFFFFFFF0 | v43;
    uint64_t v241 = ((a1 >> 3) & 0x1FF) + 1;
    uint64_t v137 = 4 * v129 + 4 * (int)v21;
    v130.i64[1] = 0x300000002;
    float32x4x4_t v231 = &v285[v137 + 16];
    int64x2_t v234 = &v285[v137];
    v138.i64[0] = 0x800000008;
    v138.i64[1] = 0x800000008;
    uint64_t v233 = -(uint64_t)v43;
    unint64_t v239 = v43;
    uint64_t v240 = v129;
    while (1)
    {
      double v139 = (double)(int)v133;
      if (v27 == 3)
      {
        int v140 = (int)(v249 * v139) - (v249 * v139 < (double)(int)(v249 * v139));
        float v141 = (double)((int)v133 + 1) - (double)(v140 + 1) * a9;
        v130.i64[0] = 0;
        if (v141 > 0.0) {
          v130.f32[0] = v141
        }
                      - (float)(int)((__PAIR64__((int)v141, LODWORD(v141)) - COERCE_UNSIGNED_INT((float)(int)v141)) >> 32);
      }
      else
      {
        *(double *)v130.i64 = (v139 + 0.5) * v249 + -0.5;
        v130.f32[0] = *(double *)v130.i64;
        int v140 = (__PAIR64__((int)v130.f32[0], v130.u32[0]) - COERCE_UNSIGNED_INT((float)(int)v130.f32[0])) >> 32;
        v130.f32[0] = v130.f32[0] - (float)v140;
      }
      if (v140 < v246 - 1)
      {
        unsigned int v237 = v133 + 1;
        if (v140 < 0 && v27 != 2 && v27 != 4)
        {
          int v140 = 0;
          v130.i64[0] = 0;
        }
      }
      if (v140 + v246 < a4
        || ((int)v133 >= (int)v250 ? (uint64_t v142 = v250) : (uint64_t v142 = v133),
            (v250 = v142, v140 >= v238) ? (BOOL v143 = v27 == 2) : (BOOL v143 = 1),
            !v143 ? (BOOL v144 = v27 == 4) : (BOOL v144 = 1),
            v144))
      {
        uint64_t v145 = v132;
        unsigned int v146 = v140 * v28;
        if (v252 < 7) {
          goto LABEL_178;
        }
      }
      else
      {
        v130.i64[0] = 0;
        uint64_t v145 = v132;
        unsigned int v146 = v238 * v28;
        if (v252 < 7)
        {
LABEL_178:
          uint64_t v147 = 0;
LABEL_186:
          double v153 = &v285[4 * v147 + 4 * v145];
          int v154 = v146 + v147;
          uint64_t v155 = v241 - v147;
          do
          {
            *v153++ = v154++;
            --v155;
          }
          while (v155);
          goto LABEL_188;
        }
      }
      int32x4_t v148 = vdupq_n_s32(v146);
      double v149 = (int32x4_t *)&v285[4 * v132 + 16];
      int32x4_t v150 = vdupq_n_s32(v146 + 4);
      uint64_t v151 = ((_WORD)v252 + 1) & 0x3F8;
      int32x4_t v152 = (int32x4_t)xmmword_100404900;
      do
      {
        v149[-1] = vaddq_s32(v148, v152);
        *double v149 = vaddq_s32(v150, v152);
        int32x4_t v152 = vaddq_s32(v152, v138);
        v149 += 2;
        v151 -= 8;
      }
      while (v151);
      uint64_t v147 = ((_WORD)v252 + 1) & 0x3F8;
      if (v147 != v252 + 1) {
        goto LABEL_186;
      }
LABEL_188:
      if (v27 == 2)
      {
        __src.f32[0] = (float)((float)((float)((float)((float)((float)(v130.f32[0] + 1.0) * -0.75) + 3.75)
                                             * (float)(v130.f32[0] + 1.0))
                                     + -6.0)
                             * (float)(v130.f32[0] + 1.0))
                     + 3.0;
        __src.f32[1] = (float)((float)(v130.f32[0] * (float)((float)(v130.f32[0] * 1.25) + -2.25)) * v130.f32[0]) + 1.0;
        __src.f32[2] = (float)((float)((float)(1.0 - v130.f32[0])
                                     * (float)((float)((float)(1.0 - v130.f32[0]) * 1.25) + -2.25))
                             * (float)(1.0 - v130.f32[0]))
                     + 1.0;
        __src.f32[3] = (float)((float)(1.0 - __src.f32[0]) - __src.f32[1]) - __src.f32[2];
      }
      else if (v27 == 4)
      {
        float32x4_t v130 = sub_100365FD4(&__src, v130);
        v138.i64[0] = 0x800000008;
        v138.i64[1] = 0x800000008;
        unint64_t v135 = v239;
        uint64_t v129 = v240;
      }
      else
      {
        __src.f32[0] = 1.0 - v130.f32[0];
        __src.i32[1] = v130.i32[0];
      }
      uint64_t v156 = v135 + v131;
      int v157 = v134 * v133;
      unint64_t v158 = v135 + (int)v134 * (int)v133;
      if (v255)
      {
        double v159 = &v243[4 * v157];
        memcpy(v159, &__src, __n);
        v138.i64[0] = 0x800000008;
        v138.i64[1] = 0x800000008;
        unint64_t v135 = v239;
        uint64_t v129 = v240;
        if (v257 < v134)
        {
          unint64_t v160 = v239;
          if (v242 < 8) {
            goto LABEL_200;
          }
          unint64_t v160 = v239;
          if ((unint64_t)(&v243[4 * v158] - v159) < 0x20) {
            goto LABEL_200;
          }
          unint64_t v161 = v232;
          long long v162 = (float32x4_t *)&v231[4 * v131];
          long long v163 = (float32x4_t *)&v231[4 * v156];
          do
          {
            float32x4_t v130 = v162[-1];
            float32x4_t v164 = *v162;
            v163[-1] = v130;
            float32x4_t *v163 = v164;
            v162 += 2;
            v163 += 2;
            v161 -= 8;
          }
          while (v161);
          unint64_t v160 = v229;
          if (v242 != v232)
          {
LABEL_200:
            long long v165 = &v234[4 * v160 + 4 * v131];
            long long v166 = (int *)&v234[4 * v160 + 4 * v131 + 4 * v233];
            uint64_t v167 = v134 - v160;
            do
            {
              int v168 = *v166++;
              *v165++ = v168;
              --v167;
            }
            while (v167);
          }
        }
      }
      else
      {
        float v169 = __src.f32[1];
        uint64_t v170 = (uint64_t)rintf(__src.f32[0] * 2048.0);
        if ((int)v170 <= -32768) {
          LODWORD(v170) = -32768;
        }
        if ((int)v170 >= 0x7FFF) {
          __int16 v171 = 0x7FFF;
        }
        else {
          __int16 v171 = v170;
        }
        BOOL v172 = (__int16 *)&v236[2 * v157];
        *BOOL v172 = v171;
        uint64_t v173 = (uint64_t)rintf(v169 * 2048.0);
        if ((int)v173 <= -32768) {
          LODWORD(v173) = -32768;
        }
        if ((int)v173 >= 0x7FFF) {
          LOWORD(v173) = 0x7FFF;
        }
        v172[1] = v173;
        if (v257 != 2)
        {
          float v174 = __src.f32[3];
          uint64_t v175 = (uint64_t)rintf(__src.f32[2] * 2048.0);
          if ((int)v175 <= -32768) {
            LODWORD(v175) = -32768;
          }
          if ((int)v175 >= 0x7FFF) {
            LOWORD(v175) = 0x7FFF;
          }
          v172[2] = v175;
          uint64_t v176 = (uint64_t)rintf(v174 * 2048.0);
          if ((int)v176 <= -32768) {
            LODWORD(v176) = -32768;
          }
          if ((int)v176 >= 0x7FFF) {
            LOWORD(v176) = 0x7FFF;
          }
          v172[3] = v176;
          if (v257 != 4)
          {
            uint64_t v177 = (uint64_t)rintf(v282[0] * 2048.0);
            uint64_t v178 = (uint64_t)rintf(v282[1] * 2048.0);
            float v179 = v282[3];
            uint64_t v180 = (uint64_t)rintf(v282[2] * 2048.0);
            if ((int)v177 <= -32768) {
              LODWORD(v177) = -32768;
            }
            if ((int)v177 >= 0x7FFF) {
              LOWORD(v177) = 0x7FFF;
            }
            float64x2_t v181 = &v236[2 * v157];
            v181[4] = v177;
            if ((int)v178 <= -32768) {
              int v182 = -32768;
            }
            else {
              int v182 = v178;
            }
            if (v182 >= 0x7FFF) {
              LOWORD(v182) = 0x7FFF;
            }
            v181[5] = v182;
            if ((int)v180 <= -32768) {
              int v183 = -32768;
            }
            else {
              int v183 = v180;
            }
            if (v183 >= 0x7FFF) {
              LOWORD(v183) = 0x7FFF;
            }
            uint64_t v184 = (uint64_t)rintf(v179 * 2048.0);
            v181[6] = v183;
            if ((int)v184 <= -32768) {
              int v185 = -32768;
            }
            else {
              int v185 = v184;
            }
            if (v185 >= 0x7FFF) {
              LOWORD(v185) = 0x7FFF;
            }
            v181[7] = v185;
          }
        }
        if (v257 < v134)
        {
          unint64_t v186 = v135;
          if (v242 < 0x10) {
            goto LABEL_248;
          }
          unint64_t v186 = v135;
          if (2 * v158 - 2 * v157 < 0x20) {
            goto LABEL_248;
          }
          unint64_t v187 = v230;
          int64x2_t v188 = (float32x4_t *)&v231[2 * v131];
          unint64_t v189 = (float32x4_t *)&v231[2 * v156];
          do
          {
            float32x4_t v130 = v188[-1];
            float32x4_t v190 = *v188;
            v189[-1] = v130;
            *unint64_t v189 = v190;
            v188 += 2;
            v189 += 2;
            v187 -= 16;
          }
          while (v187);
          unint64_t v186 = v228;
          if (v242 != v230)
          {
LABEL_248:
            float32x4x4_t v191 = &v234[2 * v186 + 2 * v131];
            uint64_t v192 = (__int16 *)&v234[2 * v186 + 2 * v131 + 2 * v233];
            uint64_t v193 = v134 - v186;
            do
            {
              __int16 v194 = *v192++;
              *v191++ = v194;
              --v193;
            }
            while (v193);
          }
        }
      }
      ++v133;
      unsigned int v132 = v145 + v28;
      v131 += v134;
      if (v133 == v244) {
        goto LABEL_252;
      }
    }
  }
  unsigned int v237 = 0;
LABEL_252:
  uint64_t v253 = &v236[2 * v225];
  if ((int)v21 >= 1)
  {
    unsigned int v195 = 0;
    uint64_t v196 = 0;
    unsigned long long v197 = &v285[4 * v225 + 4 * v129 + 4 * (int)v21];
    while (1)
    {
      *(double *)v130.i64 = (double)(int)v196;
      if (v27 == 3) {
        break;
      }
      *(double *)v130.i64 = (*(double *)v130.i64 + 0.5) * v23 + -0.5;
      v130.f32[0] = *(double *)v130.i64;
      int v202 = (__PAIR64__((int)v130.f32[0], v130.u32[0]) - COERCE_UNSIGNED_INT((float)(int)v130.f32[0])) >> 32;
      v130.f32[0] = v130.f32[0] - (float)v202;
      *(_DWORD *)&v248[4 * v196] = v202;
      if (v27 == 2)
      {
        __src.f32[0] = (float)((float)((float)((float)((float)((float)(v130.f32[0] + 1.0) * -0.75) + 3.75)
                                             * (float)(v130.f32[0] + 1.0))
                                     + -6.0)
                             * (float)(v130.f32[0] + 1.0))
                     + 3.0;
        __src.f32[1] = (float)((float)(v130.f32[0] * (float)((float)(v130.f32[0] * 1.25) + -2.25)) * v130.f32[0]) + 1.0;
        __src.f32[2] = (float)((float)((float)(1.0 - v130.f32[0])
                                     * (float)((float)((float)(1.0 - v130.f32[0]) * 1.25) + -2.25))
                             * (float)(1.0 - v130.f32[0]))
                     + 1.0;
        __src.f32[3] = (float)((float)(1.0 - __src.f32[0]) - __src.f32[1]) - __src.f32[2];
        uint64_t v200 = v195;
        if (!v255) {
          goto LABEL_263;
        }
      }
      else
      {
        if (v27 != 4) {
          goto LABEL_259;
        }
        float32x4_t v130 = sub_100365FD4(&__src, v130);
        uint64_t v200 = v195;
        if (!v255)
        {
LABEL_263:
          unsigned int v201 = v257;
          float v203 = __src.f32[1];
          uint64_t v204 = (uint64_t)rintf(__src.f32[0] * 2048.0);
          if ((int)v204 <= -32768) {
            LODWORD(v204) = -32768;
          }
          if ((int)v204 >= 0x7FFF) {
            __int16 v205 = 0x7FFF;
          }
          else {
            __int16 v205 = v204;
          }
          unint64_t v206 = (__int16 *)&v253[2 * v200];
          *unint64_t v206 = v205;
          uint64_t v207 = (uint64_t)rintf(v203 * 2048.0);
          if ((int)v207 <= -32768) {
            LODWORD(v207) = -32768;
          }
          if ((int)v207 >= 0x7FFF) {
            LOWORD(v207) = 0x7FFF;
          }
          v206[1] = v207;
          if (v257 != 2)
          {
            float v208 = __src.f32[3];
            uint64_t v209 = (uint64_t)rintf(__src.f32[2] * 2048.0);
            if ((int)v209 <= -32768) {
              LODWORD(v209) = -32768;
            }
            if ((int)v209 >= 0x7FFF) {
              LOWORD(v209) = 0x7FFF;
            }
            v206[2] = v209;
            uint64_t v210 = (uint64_t)rintf(v208 * 2048.0);
            if ((int)v210 <= -32768) {
              LODWORD(v210) = -32768;
            }
            if ((int)v210 >= 0x7FFF) {
              LOWORD(v210) = 0x7FFF;
            }
            v206[3] = v210;
            if (v257 != 4)
            {
              uint64_t v211 = (uint64_t)rintf(v282[0] * 2048.0);
              uint64_t v212 = (uint64_t)rintf(v282[1] * 2048.0);
              float v213 = v282[3];
              uint64_t v214 = (uint64_t)rintf(v282[2] * 2048.0);
              if ((int)v211 <= -32768) {
                LODWORD(v211) = -32768;
              }
              if ((int)v211 >= 0x7FFF) {
                LOWORD(v211) = 0x7FFF;
              }
              int32x4_t v215 = &v253[2 * v200];
              v215[4] = v211;
              if ((int)v212 <= -32768) {
                int v216 = -32768;
              }
              else {
                int v216 = v212;
              }
              if (v216 >= 0x7FFF) {
                LOWORD(v216) = 0x7FFF;
              }
              v215[5] = v216;
              if ((int)v214 <= -32768) {
                int v217 = -32768;
              }
              else {
                int v217 = v214;
              }
              if (v217 >= 0x7FFF) {
                LOWORD(v217) = 0x7FFF;
              }
              uint64_t v218 = (uint64_t)rintf(v213 * 2048.0);
              v215[6] = v217;
              if ((int)v218 <= -32768) {
                int v219 = -32768;
              }
              else {
                int v219 = v218;
              }
              if (v219 >= 0x7FFF) {
                LOWORD(v219) = 0x7FFF;
              }
              v215[7] = v219;
            }
          }
          goto LABEL_254;
        }
      }
LABEL_260:
      unsigned int v201 = v257;
      memcpy(&v197[4 * v195], &__src, 4 * v257);
LABEL_254:
      ++v196;
      unsigned int v195 = v200 + v201;
      if (v227 == v196) {
        goto LABEL_305;
      }
    }
    int v198 = (int)(v23 * *(double *)v130.i64) - (v23 * *(double *)v130.i64 < (double)(int)(v23 * *(double *)v130.i64));
    float v199 = (double)((int)v196 + 1) - (double)(v198 + 1) * a10;
    v130.i32[0] = 0;
    if (v199 > 0.0) {
      v130.f32[0] = v199
    }
                  - (float)(int)((__PAIR64__((int)v199, LODWORD(v199)) - COERCE_UNSIGNED_INT((float)(int)v199)) >> 32);
    *(_DWORD *)&v248[4 * v196] = v198;
LABEL_259:
    __src.f32[0] = 1.0 - v130.f32[0];
    __src.i32[1] = v130.i32[0];
    uint64_t v200 = v195;
    if (!v255) {
      goto LABEL_263;
    }
    goto LABEL_260;
  }
LABEL_305:
  if (v255) {
    BOOL v220 = &v236[4 * v225];
  }
  else {
    BOOL v220 = &v236[2 * v225];
  }
  v226(&v270, v259, v285, v236, v248, v220, v237, v250, v257);
  if (v283 != v285 && v283) {
LABEL_310:
  }
    operator delete[]();
LABEL_311:
  if (v265 && atomic_fetch_add((atomic_uint *volatile)(v265 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v259);
  }
  uint64_t v265 = 0;
  long long v263 = 0u;
  long long v264 = 0u;
  if (v260 >= 1)
  {
    uint64_t v221 = 0;
    unint64_t v222 = v266;
    do
      v222[v221++] = 0;
    while (v221 < v260);
  }
  if (v267 != &v268) {
    j__free(v267);
  }
  if (v274 && atomic_fetch_add((atomic_uint *volatile)(v274 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v270);
  }
  uint64_t v274 = 0;
  long long v272 = 0u;
  long long v273 = 0u;
  if (v271 >= 1)
  {
    uint64_t v223 = 0;
    uint64_t v224 = v275;
    do
      *(_DWORD *)(v224 + 4 * v223++) = 0;
    while (v223 < v271);
  }
  if (v276 != &v277) {
    j__free(v276);
  }
  if (v279) {
    sub_1002D6888(v278);
  }
}

void sub_100362B74(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000B6A8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100362D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100366E08((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    unint64_t v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      uint64_t v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100367EF4((uint64_t)v24);
}

void sub_100362ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100367EF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100362EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100368030((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    unint64_t v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      uint64_t v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100368DA8((uint64_t)v24);
}

void sub_100363010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100368DA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100368EE4((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    unint64_t v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      uint64_t v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_100369E80((uint64_t)v24);
}

void sub_100363154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100369E80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100363168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_100369FBC((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    unint64_t v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      uint64_t v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10036AAE8((uint64_t)v24);
}

void sub_100363298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10036AAE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003632AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int a9)
{
  int v10 = *(_DWORD *)(*(void *)(a1 + 64) + 4);
  HIDWORD(v27) = **(_DWORD **)(a1 + 64);
  int v11 = *(_DWORD *)(*(void *)(a2 + 64) + 4);
  int v12 = ((*(_DWORD *)a1 >> 3) & 0x1FF) + 1;
  HIDWORD(v26) = **(_DWORD **)(a2 + 64);
  LODWORD(v27) = v12 * v10;
  v25[1] = HIDWORD(v26);
  LODWORD(v26) = v12 * v11;
  v25[0] = 0;
  sub_10036AC24((uint64_t)v24, a1, a2, a3, a5, a4, a6, &v27, &v26, a9, v12 * a7, v12 * a8);
  uint64_t v13 = *(unsigned int *)(a2 + 4);
  if ((int)v13 >= 3)
  {
    uint64_t v15 = *(void *)(a2 + 64);
    unint64_t v16 = (int *)(v15 + 4);
    uint64_t v17 = 1;
    uint64_t v18 = v13 & 0xFFFFFFFE;
    uint64_t v19 = 1;
    do
    {
      v17 *= *(v16 - 1);
      v19 *= *v16;
      v16 += 2;
      v18 -= 2;
    }
    while (v18);
    uint64_t v14 = v19 * v17;
    uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
    if (v20)
    {
      uint64_t v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
      do
      {
        uint64_t v22 = *v21++;
        v14 *= v22;
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    uint64_t v14 = *(int *)(a2 + 12) * (uint64_t)*(int *)(a2 + 8);
  }
  sub_1002ABC90(v25, (uint64_t)v24, (double)(unint64_t)v14 * 0.0000152587891);
  return sub_10036B6F8((uint64_t)v24);
}