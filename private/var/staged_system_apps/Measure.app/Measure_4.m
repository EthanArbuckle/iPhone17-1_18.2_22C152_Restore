int32x4_t *sub_100239688(int32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t *v16;
  int16x8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int16x8_t *v30;
  int32x4_t *v31;
  unint64_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int v37;
  float32x4x4_t v38;
  float32x4x4_t v39;
  int16x8x4_t v40;

  v7 = a7[1];
  if (v7)
  {
    v8 = *a7;
    v9 = v8 - 4;
    v10 = 2 * (a6 >> 1);
    v11 = result + 1;
    v12 = 4 * (a2 >> 2);
    v13 = result + 2;
    v14.i64[0] = 0xFFFF0000FFFFLL;
    v14.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      if ((int)v8 >= 8)
      {
        v15 = 0;
        v16 = v11;
        v17 = a5;
        do
        {
          *v17++ = vqmovun_high_s32(vqmovun_s32(v16[-1]), *v16);
          v15 += 8;
          v16 += 2;
        }
        while (v15 <= (unint64_t)(v8 - 8));
        if ((int)v15 <= (int)v9)
        {
LABEL_10:
          v18 = (int)v15;
          v19 = v9 - (int)v15;
          v15 = (int)v15;
          if (v19 < 0x1C) {
            goto LABEL_14;
          }
          v20 = (v19 >> 2) + 1;
          v15 = (int)v15 + 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          v21 = v18;
          v22 = v18;
          v23 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v24 = (const float *)&result->i32[v22];
            v38 = vld4q_f32(v24);
            v24 += 16;
            v39 = vld4q_f32(v24);
            v40.val[0] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v38.val[0], (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v39.val[0], (int32x4_t)0), v14));
            v40.val[1] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v38.val[1], (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v39.val[1], (int32x4_t)0), v14));
            v40.val[2] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v38.val[2], (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v39.val[2], (int32x4_t)0), v14));
            v40.val[3] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v38.val[3], (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32((int32x4_t)v39.val[3], (int32x4_t)0), v14));
            v25 = &a5->i16[v21];
            vst4q_s16(v25, v40);
            v21 += 32;
            v22 += 32;
            v23 -= 8;
          }
          while (v23);
          if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_14:
            v26 = 2 * v15;
            v27 = 4 * v15;
            do
            {
              *(int16x4_t *)&a5->i8[v26] = vmovn_s32(vminq_s32(vmaxq_s32(*(int32x4_t *)((char *)result + v27), (int32x4_t)0), v14));
              v15 += 4;
              v26 += 8;
              v27 += 16;
            }
            while (v15 <= v9);
          }
        }
      }
      else
      {
        LODWORD(v15) = 0;
        if ((int)v9 >= 0) {
          goto LABEL_10;
        }
      }
      if ((int)v15 < (int)v8)
      {
        v28 = (int)v15;
        v29 = v8 - (int)v15;
        v15 = (int)v15;
        if (v29 < 0x10) {
          goto LABEL_27;
        }
        v15 = (v29 & 0xFFFFFFFFFFFFFFF0) + (int)v15;
        v30 = (int16x8_t *)((char *)a5 + 2 * v28);
        v31 = (int32x4_t *)((char *)v13 + 4 * v28);
        v32 = v29 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v34 = v31[-2];
          v33 = v31[-1];
          v36 = *v31;
          v35 = v31[1];
          v31 += 4;
          *v30 = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32(v34, (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32(v33, (int32x4_t)0), v14));
          v30[1] = vuzp1q_s16((int16x8_t)vminq_s32(vmaxq_s32(v36, (int32x4_t)0), v14), (int16x8_t)vminq_s32(vmaxq_s32(v35, (int32x4_t)0), v14));
          v30 += 2;
          v32 -= 16;
        }
        while (v32);
        if (v29 != (v29 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_27:
          do
          {
            v37 = result->i32[v15] & ~(result->i32[v15] >> 31);
            if (v37 >= 0xFFFF) {
              LOWORD(v37) = -1;
            }
            a5->i16[v15++] = v37;
          }
          while (v8 != v15);
        }
      }
      a5 = (int16x8_t *)((char *)a5 + v10);
      v11 = (int32x4_t *)((char *)v11 + v12);
      result = (int32x4_t *)((char *)result + v12);
      v13 = (int32x4_t *)((char *)v13 + v12);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1002398A0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    v9 = (int8x16_t *)result;
    uint64_t v10 = *a7;
    uint64_t v11 = v10 - 4;
    uint64_t v12 = 4 * (a2 >> 2);
    uint64_t v13 = 2 * (a6 >> 1);
    do
    {
      result = sub_100241F2C((uint64_t)&v22, v9, a5, v10);
      if ((int)result <= (int)v11)
      {
        uint64_t v14 = (int)result;
        uint64_t v15 = 4 * (int)result + 8;
        uint64_t v16 = 2 * (int)result;
        v17.i64[0] = 0xFFFF0000FFFFLL;
        v17.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v18.i32[0] = (uint64_t)rintf(*(float *)((char *)&v9->i32[-2] + v15));
          v18.i32[1] = (uint64_t)rintf(*(float *)&v9->i32[v14 + 1]);
          v18.i64[1] = __PAIR64__((uint64_t)rintf(*(float *)((char *)&v9->i32[1] + v15)), (uint64_t)rintf(*(float *)((char *)v9->i32 + v15)));
          *(int16x4_t *)&a5->i8[v16] = vmovn_s32(vminq_s32(vmaxq_s32(v18, (int32x4_t)0), v17));
          v14 += 4;
          v15 += 16;
          v16 += 8;
        }
        while (v14 <= v11);
        result = v14;
      }
      if ((int)result < (int)v10)
      {
        uint64_t v19 = (int)result;
        do
        {
          float v20 = rintf(*(float *)&v9->i32[v19]);
          int v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 0xFFFF) {
            LOWORD(v21) = -1;
          }
          a5->i16[v19++] = v21;
        }
        while (v10 != v19);
      }
      v9 = (int8x16_t *)((char *)v9 + v12);
      a5 = (int16x8_t *)((char *)a5 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1002399F4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    v9 = (float64x2_t *)result;
    uint64_t v10 = *a7;
    uint64_t v11 = v10 - 4;
    uint64_t v12 = 8 * (a2 >> 3);
    uint64_t v13 = 2 * (a6 >> 1);
    do
    {
      result = sub_10024226C((uint64_t)&v22, v9, a5, v10);
      if ((int)result <= (int)v11)
      {
        uint64_t v14 = (int)result;
        uint64_t v15 = 8 * (int)result + 16;
        uint64_t v16 = 2 * (int)result;
        v17.i64[0] = 0xFFFF0000FFFFLL;
        v17.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v18.i32[0] = (uint64_t)rint(*(double *)((char *)v9[-1].f64 + v15));
          v18.i32[1] = (uint64_t)rint(v9->f64[v14 + 1]);
          v18.i64[1] = __PAIR64__((uint64_t)rint(*(double *)((char *)&v9->f64[1] + v15)), (uint64_t)rint(*(double *)((char *)v9->f64 + v15)));
          *(int16x4_t *)&a5->i8[v16] = vmovn_s32(vminq_s32(vmaxq_s32(v18, (int32x4_t)0), v17));
          v14 += 4;
          v15 += 32;
          v16 += 8;
        }
        while (v14 <= v11);
        result = v14;
      }
      if ((int)result < (int)v10)
      {
        uint64_t v19 = (int)result;
        do
        {
          double v20 = rint(v9->f64[v19]);
          int v21 = (uint64_t)v20 & ~((int)(uint64_t)v20 >> 31);
          if (v21 >= 0xFFFF) {
            LOWORD(v21) = -1;
          }
          a5->i16[v19++] = v21;
        }
        while (v10 != v19);
      }
      v9 = (float64x2_t *)((char *)v9 + v12);
      a5 = (int16x8_t *)((char *)a5 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_100239B48(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint16x8_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (!v7) {
    return result;
  }
  unint64_t v10 = result;
  unint64_t v11 = *a7;
  unint64_t v12 = a6 >> 1;
  unsigned int v13 = v7 - 1;
  if ((int)v11 >= 8)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (v11 - 4);
    unint64_t v18 = a6 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v19 = 2 * v12;
    uint64_t v20 = (uint64_t)a5->i64 + 6;
    unint64_t v21 = result + 16;
    char v22 = a5;
    unint64_t v23 = result;
    while (1)
    {
      result = 0;
      unint64_t v24 = 0;
      unsigned int v25 = v13;
      v26 = v22;
      do
      {
        *v26++ = vmovl_u8(*(uint8x8_t *)(v23 + v24));
        v24 += 8;
        result += 0x800000000;
      }
      while (v24 <= (v11 - 8));
      if ((int)v17 >= (int)v24) {
        break;
      }
      if ((int)v24 < (int)v11) {
        goto LABEL_20;
      }
LABEL_11:
      v23 += a2;
      char v22 = (uint16x8_t *)((char *)v22 + v19);
      unsigned int v13 = v25 - 1;
      ++v16;
      v20 += v19;
      v21 += a2;
      if (!v25) {
        return result;
      }
    }
    result = 0;
    uint64_t v27 = 2 * (int)v24;
    v28 = (_WORD *)(v20 + v27);
    unint64_t v29 = v23 + (int)v24;
    v30 = &v22->i8[v27];
    do
    {
      __int16 v31 = *(unsigned __int8 *)(v29 + result + 1);
      *(v28 - 3) = *(unsigned __int8 *)(v29 + result);
      v32 = &v30[2 * result];
      *((_WORD *)v32 + 1) = v31;
      __int16 v33 = *(unsigned __int8 *)(v29 + result + 3);
      *((_WORD *)v32 + 2) = *(unsigned __int8 *)(v29 + result + 2);
      _WORD *v28 = v33;
      v28 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v24 + result) <= v17);
    LODWORD(v24) = v24 + result;
    if ((int)v24 >= (int)v11) {
      goto LABEL_11;
    }
LABEL_20:
    unint64_t v24 = (int)v24;
    unint64_t v34 = v11 - (int)v24;
    if (v34 >= 8
      && ((unint64_t)v22 + 2 * (int)v24 >= v10 + v11 + v16 * a2
       || v23 + (int)v24 >= (unint64_t)a5 + 2 * v11 + v18 * v16))
    {
      if (v34 < 0x20)
      {
        unint64_t v35 = 0;
        goto LABEL_29;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      result = (unint64_t)v22 + 2 * (int)v24;
      v36 = (uint8x8_t *)(v21 + (int)v24);
      unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v38 = *(uint8x16_t *)v36[-2].i8;
        uint16x8_t v39 = vmovl_u8(*v36);
        uint16x8_t v40 = vmovl_high_u8(*(uint8x16_t *)v36->i8);
        *(uint16x8_t *)result = vmovl_u8(*(uint8x8_t *)v38.i8);
        *(uint16x8_t *)(result + 16) = vmovl_high_u8(v38);
        *(uint16x8_t *)(result + 32) = v39;
        *(uint16x8_t *)(result + 48) = v40;
        result += 64;
        v36 += 4;
        v37 -= 32;
      }
      while (v37);
      if (v34 == v35) {
        goto LABEL_11;
      }
      if ((v34 & 0x18) != 0)
      {
LABEL_29:
        result = v34 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v41 = (v34 & 0xFFFFFFFFFFFFFFF8) + (int)v24;
        unint64_t v42 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v43 = v35 + (int)v24;
        uint64_t v44 = 2 * v43;
        do
        {
          *(uint16x8_t *)((char *)v22 + v44) = vmovl_u8(*(uint8x8_t *)(v23 + v43));
          v43 += 8;
          v44 += 16;
          v42 += 8;
        }
        while (v42);
        unint64_t v24 = v41;
        if (v34 == result) {
          goto LABEL_11;
        }
        goto LABEL_34;
      }
      unint64_t v24 = v35 + (int)v24;
    }
    do
    {
LABEL_34:
      result = *(unsigned __int8 *)(v23 + v24);
      v22->i16[v24++] = result;
    }
    while (v11 != v24);
    goto LABEL_11;
  }
  if ((int)v11 >= 4)
  {
    uint64_t v45 = 0;
    unint64_t v46 = (v11 - 4);
    uint64_t v47 = v46 & 0xFFFFFFFC;
    uint64_t v48 = v47 + 4;
    unint64_t v49 = a6 & 0xFFFFFFFFFFFFFFFELL;
    if (v47 + 5 <= v11) {
      uint64_t v50 = *a7;
    }
    else {
      uint64_t v50 = (v46 & 0xFFFFFFFC) + 5;
    }
    unint64_t v51 = v50 - v47 - 4;
    uint64_t v52 = v46 >> 2;
    uint64_t v53 = v52 * 8 + 8;
    uint64_t v54 = (v46 >> 2) + 1;
    uint64_t v55 = 2 * v12;
    uint64_t v56 = (uint64_t)&a5[2].i64[v52 + 1];
    uint64_t v57 = v47 + result + 20;
    uint64_t v58 = result + v48;
    v59 = &a5->i64[v52 + 1];
    uint64_t v84 = (uint64_t)a5->i64 + 2 * v50;
    unint64_t v60 = result + v50;
    uint64_t v61 = result + v48;
    v62 = (__int16 *)a5;
    while (1)
    {
      unsigned int v63 = v13;
      unint64_t v64 = v49 * v45;
      unint64_t v65 = v58 + v45 * a2;
      if (v46 < 0x3C) {
        break;
      }
      if ((unint64_t)v62 < v65 && v10 < (unint64_t)a5->u64 + v53 + v64) {
        break;
      }
      uint64_t v67 = v54 & 0x7FFFFFF0;
      v68 = v62;
      result = v10;
      do
      {
        int8x16x4_t v85 = vld4q_s8((const char *)result);
        result += 64;
        v86.val[0] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[0]);
        v86.val[1] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[1]);
        v86.val[2] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[2]);
        v86.val[3] = (int16x8_t)vmovl_high_u8((uint8x16_t)v85.val[3]);
        v87.val[0] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[0].i8);
        v87.val[1] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[1].i8);
        v87.val[2] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[2].i8);
        v87.val[3] = (int16x8_t)vmovl_u8(*(uint8x8_t *)v85.val[3].i8);
        v69 = v68 + 64;
        vst4q_s16(v68, v87);
        v70 = v68 + 32;
        vst4q_s16(v70, v86);
        v68 = v69;
        v67 -= 16;
      }
      while (v67);
      unint64_t v71 = 4 * (v54 & 0x7FFFFFF0);
      if (v54 != (v54 & 0x7FFFFFF0)) {
        goto LABEL_52;
      }
LABEL_54:
      if ((int)v11 > (int)v71)
      {
        unint64_t v74 = (v46 & 0xFFFFFFFC) + 4;
        if (v51 >= 8)
        {
          if ((unint64_t)&a5->u64[1] + ((2 * (v11 - 4)) & 0x1FFFFFFF8) + v64 >= v60 + v45 * a2
            || (unint64_t v74 = (v46 & 0xFFFFFFFC) + 4, v65 >= v84 + v64))
          {
            if (v51 >= 0x20)
            {
              v76 = (uint8x8_t *)v57;
              result = v56;
              unint64_t v77 = v51 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                uint8x16_t v78 = *(uint8x16_t *)v76[-2].i8;
                uint16x8_t v79 = vmovl_u8(*v76);
                uint16x8_t v80 = vmovl_high_u8(*(uint8x16_t *)v76->i8);
                *(uint16x8_t *)(result - 32) = vmovl_u8(*(uint8x8_t *)v78.i8);
                *(uint16x8_t *)(result - 16) = vmovl_high_u8(v78);
                *(uint16x8_t *)result = v79;
                *(uint16x8_t *)(result + 16) = v80;
                result += 64;
                v76 += 4;
                v77 -= 32;
              }
              while (v77);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_40;
              }
              unint64_t v75 = v51 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFE0);
              if ((v51 & 0x18) != 0) {
                goto LABEL_64;
              }
            }
            else
            {
              unint64_t v75 = 0;
LABEL_64:
              unint64_t v81 = v75 - (v51 & 0xFFFFFFFFFFFFFFF8);
              result = v61 + v75;
              v82 = (uint16x8_t *)((char *)v59 + 2 * v75);
              do
              {
                uint8x8_t v83 = *(uint8x8_t *)result;
                result += 8;
                *v82++ = vmovl_u8(v83);
                v81 += 8;
              }
              while (v81);
              unint64_t v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFF8);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_40;
              }
            }
          }
        }
        do
        {
          v62[v74] = *(unsigned __int8 *)(v10 + v74);
          ++v74;
        }
        while (v74 < v11);
      }
LABEL_40:
      v10 += a2;
      v62 = (__int16 *)((char *)v62 + v55);
      unsigned int v13 = v63 - 1;
      ++v45;
      v56 += v55;
      v57 += a2;
      v61 += a2;
      v59 = (uint64_t *)((char *)v59 + v55);
      if (!v63) {
        return result;
      }
    }
    unint64_t v71 = 0;
LABEL_52:
    result = (unint64_t)&v62[v71];
    do
    {
      __int16 v72 = *(unsigned __int8 *)(v10 + v71 + 1);
      *(_WORD *)result = *(unsigned __int8 *)(v10 + v71);
      *(_WORD *)(result + 2) = v72;
      __int16 v73 = *(unsigned __int8 *)(v10 + v71 + 3);
      *(_WORD *)(result + 4) = *(unsigned __int8 *)(v10 + v71 + 2);
      *(_WORD *)(result + 6) = v73;
      v71 += 4;
      result += 8;
    }
    while (v71 <= v46);
    goto LABEL_54;
  }
  if ((int)v11 >= 1)
  {
    uint64_t v14 = (unsigned __int8 *)(result + 2);
    uint64_t v15 = &a5->i16[2];
    do
    {
      *(v15 - 2) = *(v14 - 2);
      if (v11 != 1)
      {
        *(v15 - 1) = *(v14 - 1);
        if (v11 != 2) {
          *uint64_t v15 = *v14;
        }
      }
      v14 += a2;
      v15 += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_10023A064(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (!v7) {
    return result;
  }
  unint64_t v10 = result;
  unint64_t v11 = *a7;
  unint64_t v12 = a6 >> 1;
  unsigned int v13 = v7 - 1;
  if ((int)v11 >= 8)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (v11 - 4);
    unint64_t v18 = a6 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v19 = 2 * v12;
    uint64_t v20 = (uint64_t)a5->i64 + 6;
    unint64_t v21 = result + 16;
    char v22 = a5;
    unint64_t v23 = result;
    while (1)
    {
      result = 0;
      unint64_t v24 = 0;
      unsigned int v25 = v13;
      v26 = v22;
      do
      {
        *v26++ = vmovl_s8(*(int8x8_t *)(v23 + v24));
        v24 += 8;
        result += 0x800000000;
      }
      while (v24 <= (v11 - 8));
      if ((int)v17 >= (int)v24) {
        break;
      }
      if ((int)v24 < (int)v11) {
        goto LABEL_20;
      }
LABEL_11:
      v23 += a2;
      char v22 = (int16x8_t *)((char *)v22 + v19);
      unsigned int v13 = v25 - 1;
      ++v16;
      v20 += v19;
      v21 += a2;
      if (!v25) {
        return result;
      }
    }
    result = 0;
    uint64_t v27 = 2 * (int)v24;
    v28 = (_WORD *)(v20 + v27);
    unint64_t v29 = v23 + (int)v24;
    v30 = &v22->i8[v27];
    do
    {
      __int16 v31 = *(char *)(v29 + result + 1);
      *(v28 - 3) = *(char *)(v29 + result);
      v32 = &v30[2 * result];
      *((_WORD *)v32 + 1) = v31;
      __int16 v33 = *(char *)(v29 + result + 3);
      *((_WORD *)v32 + 2) = *(char *)(v29 + result + 2);
      _WORD *v28 = v33;
      v28 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v24 + result) <= v17);
    LODWORD(v24) = v24 + result;
    if ((int)v24 >= (int)v11) {
      goto LABEL_11;
    }
LABEL_20:
    unint64_t v24 = (int)v24;
    unint64_t v34 = v11 - (int)v24;
    if (v34 >= 8
      && ((unint64_t)v22 + 2 * (int)v24 >= v10 + v11 + v16 * a2
       || v23 + (int)v24 >= (unint64_t)a5 + 2 * v11 + v18 * v16))
    {
      if (v34 < 0x20)
      {
        unint64_t v35 = 0;
        goto LABEL_29;
      }
      unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFE0;
      result = (unint64_t)v22 + 2 * (int)v24;
      v36 = (int8x8_t *)(v21 + (int)v24);
      unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v38 = *(int8x16_t *)v36[-2].i8;
        int16x8_t v39 = vmovl_s8(*v36);
        int16x8_t v40 = vmovl_high_s8(*(int8x16_t *)v36->i8);
        *(int16x8_t *)result = vmovl_s8(*(int8x8_t *)v38.i8);
        *(int16x8_t *)(result + 16) = vmovl_high_s8(v38);
        *(int16x8_t *)(result + 32) = v39;
        *(int16x8_t *)(result + 48) = v40;
        result += 64;
        v36 += 4;
        v37 -= 32;
      }
      while (v37);
      if (v34 == v35) {
        goto LABEL_11;
      }
      if ((v34 & 0x18) != 0)
      {
LABEL_29:
        result = v34 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v41 = (v34 & 0xFFFFFFFFFFFFFFF8) + (int)v24;
        unint64_t v42 = v35 - (v34 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v43 = v35 + (int)v24;
        uint64_t v44 = 2 * v43;
        do
        {
          *(int16x8_t *)((char *)v22 + v44) = vmovl_s8(*(int8x8_t *)(v23 + v43));
          v43 += 8;
          v44 += 16;
          v42 += 8;
        }
        while (v42);
        unint64_t v24 = v41;
        if (v34 == result) {
          goto LABEL_11;
        }
        goto LABEL_34;
      }
      unint64_t v24 = v35 + (int)v24;
    }
    do
    {
LABEL_34:
      result = *(char *)(v23 + v24);
      v22->i16[v24] = *(char *)(v23 + v24);
      ++v24;
    }
    while (v11 != v24);
    goto LABEL_11;
  }
  if ((int)v11 >= 4)
  {
    uint64_t v45 = 0;
    unint64_t v46 = (v11 - 4);
    uint64_t v47 = v46 & 0xFFFFFFFC;
    uint64_t v48 = v47 + 4;
    unint64_t v49 = a6 & 0xFFFFFFFFFFFFFFFELL;
    if (v47 + 5 <= v11) {
      uint64_t v50 = *a7;
    }
    else {
      uint64_t v50 = (v46 & 0xFFFFFFFC) + 5;
    }
    unint64_t v51 = v50 - v47 - 4;
    uint64_t v52 = v46 >> 2;
    uint64_t v53 = v52 * 8 + 8;
    uint64_t v54 = (v46 >> 2) + 1;
    uint64_t v55 = 2 * v12;
    uint64_t v56 = (uint64_t)&a5[2].i64[v52 + 1];
    uint64_t v57 = v47 + result + 20;
    uint64_t v58 = result + v48;
    v59 = &a5->i64[v52 + 1];
    uint64_t v84 = (uint64_t)a5->i64 + 2 * v50;
    unint64_t v60 = result + v50;
    uint64_t v61 = result + v48;
    v62 = (__int16 *)a5;
    while (1)
    {
      unsigned int v63 = v13;
      unint64_t v64 = v49 * v45;
      unint64_t v65 = v58 + v45 * a2;
      if (v46 < 0x3C) {
        break;
      }
      if ((unint64_t)v62 < v65 && v10 < (unint64_t)a5->u64 + v53 + v64) {
        break;
      }
      uint64_t v67 = v54 & 0x7FFFFFF0;
      v68 = v62;
      result = v10;
      do
      {
        int8x16x4_t v85 = vld4q_s8((const char *)result);
        result += 64;
        v86.val[0] = vmovl_high_s8(v85.val[0]);
        v86.val[1] = vmovl_high_s8(v85.val[1]);
        v86.val[2] = vmovl_high_s8(v85.val[2]);
        v86.val[3] = vmovl_high_s8(v85.val[3]);
        v87.val[0] = vmovl_s8(*(int8x8_t *)v85.val[0].i8);
        v87.val[1] = vmovl_s8(*(int8x8_t *)v85.val[1].i8);
        v87.val[2] = vmovl_s8(*(int8x8_t *)v85.val[2].i8);
        v87.val[3] = vmovl_s8(*(int8x8_t *)v85.val[3].i8);
        v69 = v68 + 64;
        vst4q_s16(v68, v87);
        v70 = v68 + 32;
        vst4q_s16(v70, v86);
        v68 = v69;
        v67 -= 16;
      }
      while (v67);
      unint64_t v71 = 4 * (v54 & 0x7FFFFFF0);
      if (v54 != (v54 & 0x7FFFFFF0)) {
        goto LABEL_52;
      }
LABEL_54:
      if ((int)v11 > (int)v71)
      {
        unint64_t v74 = (v46 & 0xFFFFFFFC) + 4;
        if (v51 >= 8)
        {
          if ((unint64_t)&a5->u64[1] + ((2 * (v11 - 4)) & 0x1FFFFFFF8) + v64 >= v60 + v45 * a2
            || (unint64_t v74 = (v46 & 0xFFFFFFFC) + 4, v65 >= v84 + v64))
          {
            if (v51 >= 0x20)
            {
              v76 = (int8x8_t *)v57;
              result = v56;
              unint64_t v77 = v51 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                int8x16_t v78 = *(int8x16_t *)v76[-2].i8;
                int16x8_t v79 = vmovl_s8(*v76);
                int16x8_t v80 = vmovl_high_s8(*(int8x16_t *)v76->i8);
                *(int16x8_t *)(result - 32) = vmovl_s8(*(int8x8_t *)v78.i8);
                *(int16x8_t *)(result - 16) = vmovl_high_s8(v78);
                *(int16x8_t *)result = v79;
                *(int16x8_t *)(result + 16) = v80;
                result += 64;
                v76 += 4;
                v77 -= 32;
              }
              while (v77);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_40;
              }
              unint64_t v75 = v51 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFE0);
              if ((v51 & 0x18) != 0) {
                goto LABEL_64;
              }
            }
            else
            {
              unint64_t v75 = 0;
LABEL_64:
              unint64_t v81 = v75 - (v51 & 0xFFFFFFFFFFFFFFF8);
              result = v61 + v75;
              v82 = (int16x8_t *)((char *)v59 + 2 * v75);
              do
              {
                int8x8_t v83 = *(int8x8_t *)result;
                result += 8;
                *v82++ = vmovl_s8(v83);
                v81 += 8;
              }
              while (v81);
              unint64_t v74 = v48 + (v51 & 0xFFFFFFFFFFFFFFF8);
              if (v51 == (v51 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_40;
              }
            }
          }
        }
        do
        {
          v62[v74] = *(char *)(v10 + v74);
          ++v74;
        }
        while (v74 < v11);
      }
LABEL_40:
      v10 += a2;
      v62 = (__int16 *)((char *)v62 + v55);
      unsigned int v13 = v63 - 1;
      ++v45;
      v56 += v55;
      v57 += a2;
      v61 += a2;
      v59 = (uint64_t *)((char *)v59 + v55);
      if (!v63) {
        return result;
      }
    }
    unint64_t v71 = 0;
LABEL_52:
    result = (unint64_t)&v62[v71];
    do
    {
      __int16 v72 = *(char *)(v10 + v71 + 1);
      *(_WORD *)result = *(char *)(v10 + v71);
      *(_WORD *)(result + 2) = v72;
      __int16 v73 = *(char *)(v10 + v71 + 3);
      *(_WORD *)(result + 4) = *(char *)(v10 + v71 + 2);
      *(_WORD *)(result + 6) = v73;
      v71 += 4;
      result += 8;
    }
    while (v71 <= v46);
    goto LABEL_54;
  }
  if ((int)v11 >= 1)
  {
    uint64_t v14 = (char *)(result + 2);
    uint64_t v15 = &a5->i16[2];
    do
    {
      *(v15 - 2) = *(v14 - 2);
      if (v11 != 1)
      {
        *(v15 - 1) = *(v14 - 1);
        if (v11 != 2) {
          *uint64_t v15 = *v14;
        }
      }
      v14 += a2;
      v15 += v12;
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_10023A580(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (!v7) {
    return result;
  }
  unint64_t v8 = *a7;
  unint64_t v9 = a2 >> 1;
  unint64_t v10 = a6 >> 1;
  unsigned int v11 = v7 - 1;
  if ((int)v8 >= 8)
  {
    uint64_t v17 = 0;
    uint64_t v18 = (v8 - 4);
    unint64_t v19 = a6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v20 = a2 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v21 = 2 * v10;
    uint64_t v22 = 2 * v9;
    v23.i64[0] = 0x8000800080008000;
    v23.i64[1] = 0x8000800080008000;
    unint64_t v24 = result;
    unint64_t v25 = a5;
    while (1)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v29 = v11;
      do
      {
        *(int16x8_t *)(v25 + v26) = vqmovn_high_s32(vqmovn_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)(v24 + v26))), (int32x4_t)vmovl_high_u16(*(uint16x8_t *)(v24 + v26)));
        v28 += 8;
        v27 += 0x800000000;
        v26 += 16;
      }
      while (v28 <= (v8 - 8));
      if ((int)v18 >= (int)v28) {
        break;
      }
      if ((int)v28 < (int)v8) {
        goto LABEL_34;
      }
LABEL_17:
      unsigned int v11 = v29 - 1;
      ++v17;
      v25 += v21;
      v24 += v22;
      if (!v29) {
        return result;
      }
    }
    uint64_t v30 = 0;
    uint64_t v31 = 2 * (int)v28;
    unint64_t v32 = v24;
    unint64_t v33 = v25;
    do
    {
      unint64_t v34 = (unsigned __int16 *)(v32 + v31);
      unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * (int)v28);
      if (v35 >= 0x7FFF) {
        LOWORD(v35) = 0x7FFF;
      }
      unsigned int v36 = v34[1];
      if (v36 >= 0x7FFF) {
        LOWORD(v36) = 0x7FFF;
      }
      unint64_t v37 = v33 + v31;
      *(_WORD *)(v33 + 2 * (int)v28) = v35;
      *(_WORD *)(v33 + v31 + 2) = v36;
      unsigned int v38 = v34[2];
      if (v38 >= 0x7FFF) {
        LOWORD(v38) = 0x7FFF;
      }
      unsigned int v39 = v34[3];
      if (v39 >= 0x7FFF) {
        LOWORD(v39) = 0x7FFF;
      }
      *(_WORD *)(v37 + 4) = v38;
      *(_WORD *)(v37 + 6) = v39;
      v30 += 4;
      v33 += 8;
      v32 += 8;
    }
    while ((int)v28 + v30 <= v18);
    LODWORD(v28) = v28 + v30;
    if ((int)v28 >= (int)v8) {
      goto LABEL_17;
    }
LABEL_34:
    unint64_t v28 = (int)v28;
    unint64_t v40 = v8 - (int)v28;
    if (v40 < 0x10) {
      goto LABEL_81;
    }
    uint64_t v41 = 2 * (int)v28;
    if (a5 + v19 * v17 - (result + v20 * v17) < 0x20) {
      goto LABEL_81;
    }
    unint64_t v28 = (v40 & 0xFFFFFFFFFFFFFFF0) + (int)v28;
    unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      uint16x8_t v43 = vminq_u16(*(uint16x8_t *)(v24 + v41 + 16), v23);
      uint64_t v44 = (uint16x8_t *)(v25 + v41);
      *uint64_t v44 = vminq_u16(*(uint16x8_t *)(v24 + v41), v23);
      v44[1] = v43;
      v41 += 32;
      v42 -= 16;
    }
    while (v42);
    if (v40 != (v40 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_81:
      do
      {
        unsigned int v45 = *(unsigned __int16 *)(v24 + 2 * v28);
        if (v45 >= 0x7FFF) {
          LOWORD(v45) = 0x7FFF;
        }
        *(_WORD *)(v25 + 2 * v28++) = v45;
      }
      while (v8 != v28);
    }
    goto LABEL_17;
  }
  if ((int)v8 >= 4)
  {
    uint64_t v46 = 0;
    unint64_t v47 = (v8 - 4);
    uint64_t v48 = (2 * v47) & 0x1FFFFFFF8;
    uint64_t v87 = v48 + result + 8;
    uint64_t v88 = v48 + a5 + 8;
    unint64_t v49 = a2 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v50 = (v47 & 0xFFFFFFFC) + 5;
    if (v50 <= v8) {
      unint64_t v50 = *a7;
    }
    unint64_t v51 = v50 - (v47 & 0xFFFFFFFC) - 4;
    uint64_t v52 = 8 * (v47 >> 2) + 8;
    uint64_t v86 = (v47 >> 2) + 1;
    uint64_t v53 = 2 * v9;
    uint64_t v54 = 2 * v10;
    unint64_t v55 = a5 + 4;
    uint64_t v85 = v48 + 24;
    v56.i64[0] = 0x8000800080008000;
    v56.i64[1] = 0x8000800080008000;
    unint64_t v57 = a5;
    unint64_t v58 = result;
    unint64_t v59 = result;
    while (1)
    {
      unsigned int v60 = v11;
      unint64_t v61 = (a6 & 0xFFFFFFFFFFFFFFFELL) * v46;
      unint64_t v62 = v49 * v46;
      if (v47 < 0x1C) {
        break;
      }
      if (v57 < result + v52 + v62 && v58 < a5 + v52 + v61) {
        break;
      }
      uint64_t v64 = 0;
      uint64_t v65 = v86 & 0x7FFFFFF8;
      do
      {
        v66 = (const __int16 *)(v58 + v64);
        int16x8x4_t v89 = vld4q_s16(v66);
        v90.val[0] = (int16x8_t)vminq_u16((uint16x8_t)v89.val[0], v56);
        v90.val[1] = (int16x8_t)vminq_u16((uint16x8_t)v89.val[1], v56);
        v90.val[2] = (int16x8_t)vminq_u16((uint16x8_t)v89.val[2], v56);
        v90.val[3] = (int16x8_t)vminq_u16((uint16x8_t)v89.val[3], v56);
        uint64_t v67 = (__int16 *)(v57 + v64);
        vst4q_s16(v67, v90);
        v64 += 64;
        v65 -= 8;
      }
      while (v65);
      unint64_t v68 = 4 * (v86 & 0x7FFFFFF8);
      if (v86 != (v86 & 0x7FFFFFF8)) {
        goto LABEL_58;
      }
LABEL_69:
      result = v59;
      if ((int)v8 > (int)v68)
      {
        unint64_t v79 = (v47 & 0xFFFFFFFC) + 4;
        if (v51 < 0x10) {
          goto LABEL_82;
        }
        unint64_t v79 = (v47 & 0xFFFFFFFC) + 4;
        if (v88 + v61 - (v87 + v62) < 0x20) {
          goto LABEL_82;
        }
        uint64_t v80 = v85;
        unint64_t v81 = v51 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          uint16x8_t v82 = vminq_u16(*(uint16x8_t *)(v58 + v80), v56);
          int8x8_t v83 = (uint16x8_t *)(v57 + v80);
          v83[-1] = vminq_u16(*(uint16x8_t *)(v58 + v80 - 16), v56);
          *int8x8_t v83 = v82;
          v80 += 32;
          v81 -= 16;
        }
        while (v81);
        unint64_t v79 = (v47 & 0xFFFFFFFC) + 4 + (v51 & 0xFFFFFFFFFFFFFFF0);
        if (v51 != (v51 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_82:
          do
          {
            unsigned int v84 = *(unsigned __int16 *)(v58 + 2 * v79);
            if (v84 >= 0x7FFF) {
              LOWORD(v84) = 0x7FFF;
            }
            *(_WORD *)(v57 + 2 * v79++) = v84;
          }
          while (v79 < v8);
        }
      }
      v58 += v53;
      v57 += v54;
      unsigned int v11 = v60 - 1;
      ++v46;
      v55 += v54;
      if (!v60) {
        return result;
      }
    }
    unint64_t v68 = 0;
LABEL_58:
    uint64_t v69 = 2 * v68;
    unint64_t v70 = v55;
    unint64_t v71 = v58;
    do
    {
      unsigned int v72 = *(unsigned __int16 *)(v71 + v69);
      if (v72 >= 0x7FFF) {
        LOWORD(v72) = 0x7FFF;
      }
      unint64_t v73 = v71 + v69;
      unsigned int v74 = *(unsigned __int16 *)(v71 + v69 + 2);
      if (v74 >= 0x7FFF) {
        LOWORD(v74) = 0x7FFF;
      }
      unint64_t v75 = v70 + v69;
      *(_WORD *)(v75 - 4) = v72;
      *(_WORD *)(v75 - 2) = v74;
      unsigned int v76 = *(unsigned __int16 *)(v73 + 4);
      if (v76 >= 0x7FFF) {
        LOWORD(v76) = 0x7FFF;
      }
      unsigned int v77 = *(unsigned __int16 *)(v73 + 6);
      *(_WORD *)(v70 + v69) = v76;
      if (v77 >= 0x7FFF) {
        __int16 v78 = 0x7FFF;
      }
      else {
        __int16 v78 = v77;
      }
      *(_WORD *)(v75 + 2) = v78;
      v68 += 4;
      v71 += 8;
      v70 += 8;
    }
    while (v68 <= v47);
    goto LABEL_69;
  }
  if ((int)v8 >= 1)
  {
    unint64_t v12 = (unsigned __int16 *)(result + 4);
    unsigned int v13 = (_WORD *)(a5 + 4);
    do
    {
      unsigned int v14 = *(v12 - 2);
      if (v14 >= 0x7FFF) {
        LOWORD(v14) = 0x7FFF;
      }
      *(v13 - 2) = v14;
      if (v8 != 1)
      {
        unsigned int v15 = *(v12 - 1);
        if (v15 >= 0x7FFF) {
          LOWORD(v15) = 0x7FFF;
        }
        *(v13 - 1) = v15;
        if (v8 != 2)
        {
          unsigned int v16 = *v12;
          if (v16 >= 0x7FFF) {
            LOWORD(v16) = 0x7FFF;
          }
          *unsigned int v13 = v16;
        }
      }
      v12 += v9;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x4_t *sub_10023AA2C(int32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    uint64_t v9 = v8 - 4;
    uint64_t v10 = 2 * (a6 >> 1);
    unsigned int v11 = result + 1;
    uint64_t v12 = 4 * (a2 >> 2);
    unsigned int v13 = result + 2;
    do
    {
      if ((int)v8 >= 8)
      {
        uint64_t v14 = 0;
        unsigned int v15 = v11;
        unsigned int v16 = a5;
        do
        {
          *v16++ = vqmovn_high_s32(vqmovn_s32(v15[-1]), *v15);
          v14 += 8;
          v15 += 2;
        }
        while (v14 <= (unint64_t)(v8 - 8));
        if ((int)v14 <= (int)v9)
        {
LABEL_10:
          uint64_t v17 = (int)v14;
          unint64_t v18 = v9 - (int)v14;
          uint64_t v14 = (int)v14;
          if (v18 < 0x1C) {
            goto LABEL_14;
          }
          uint64_t v19 = (v18 >> 2) + 1;
          uint64_t v14 = (int)v14 + 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v20 = v17;
          uint64_t v21 = v17;
          uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            uint16x8_t v23 = (const float *)&result->i32[v21];
            float32x4x4_t v37 = vld4q_f32(v23);
            v23 += 16;
            float32x4x4_t v38 = vld4q_f32(v23);
            v39.val[0] = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[0]), (int32x4_t)v38.val[0]);
            v39.val[1] = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[1]), (int32x4_t)v38.val[1]);
            v39.val[2] = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[2]), (int32x4_t)v38.val[2]);
            v39.val[3] = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[3]), (int32x4_t)v38.val[3]);
            unint64_t v24 = &a5->i16[v20];
            vst4q_s16(v24, v39);
            v20 += 32;
            v21 += 32;
            v22 -= 8;
          }
          while (v22);
          if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_14:
            uint64_t v25 = 2 * v14;
            uint64_t v26 = 4 * v14;
            do
            {
              *(int16x4_t *)&a5->i8[v25] = vqmovn_s32(*(int32x4_t *)((char *)result + v26));
              v14 += 4;
              v25 += 8;
              v26 += 16;
            }
            while (v14 <= v9);
          }
        }
      }
      else
      {
        LODWORD(v14) = 0;
        if ((int)v9 >= 0) {
          goto LABEL_10;
        }
      }
      if ((int)v14 < (int)v8)
      {
        uint64_t v27 = (int)v14;
        unint64_t v28 = v8 - (int)v14;
        uint64_t v14 = (int)v14;
        if (v28 < 0x10) {
          goto LABEL_29;
        }
        uint64_t v14 = (v28 & 0xFFFFFFFFFFFFFFF0) + (int)v14;
        unsigned int v29 = (int16x8_t *)((char *)a5 + 2 * v27);
        uint64_t v30 = (int32x4_t *)((char *)v13 + 4 * v27);
        unint64_t v31 = v28 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int32x4_t v33 = v30[-2];
          int32x4_t v32 = v30[-1];
          int32x4_t v35 = *v30;
          int32x4_t v34 = v30[1];
          v30 += 4;
          *unsigned int v29 = vqmovn_high_s32(vqmovn_s32(v33), v32);
          v29[1] = vqmovn_high_s32(vqmovn_s32(v35), v34);
          v29 += 2;
          v31 -= 16;
        }
        while (v31);
        if (v28 != (v28 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_29:
          do
          {
            int v36 = result->i32[v14];
            if (v36 <= -32768) {
              int v36 = -32768;
            }
            if (v36 >= 0x7FFF) {
              LOWORD(v36) = 0x7FFF;
            }
            a5->i16[v14++] = v36;
          }
          while (v8 != v14);
        }
      }
      a5 = (int16x8_t *)((char *)a5 + v10);
      unsigned int v11 = (int32x4_t *)((char *)v11 + v12);
      result = (int32x4_t *)((char *)result + v12);
      unsigned int v13 = (int32x4_t *)((char *)v13 + v12);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_10023ABFC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v9 = (int8x16_t *)result;
    uint64_t v10 = *a7;
    uint64_t v11 = v10 - 4;
    uint64_t v12 = 4 * (a2 >> 2);
    uint64_t v13 = 2 * (a6 >> 1);
    do
    {
      result = sub_10024261C((uint64_t)&v20, v9, a5, v10);
      if ((int)result <= (int)v11)
      {
        uint64_t v14 = (int)result;
        uint64_t v15 = 4 * (int)result + 8;
        uint64_t v16 = 2 * (int)result;
        do
        {
          v17.i32[0] = (uint64_t)rintf(*(float *)((char *)&v9->i32[-2] + v15));
          v17.i32[1] = (uint64_t)rintf(*(float *)&v9->i32[v14 + 1]);
          v17.i32[2] = (uint64_t)rintf(*(float *)((char *)v9->i32 + v15));
          v17.i32[3] = (uint64_t)rintf(*(float *)((char *)&v9->i32[1] + v15));
          *(int16x4_t *)&a5->i8[v16] = vqmovn_s32(v17);
          v14 += 4;
          v15 += 16;
          v16 += 8;
        }
        while (v14 <= v11);
        result = v14;
      }
      if ((int)result < (int)v10)
      {
        uint64_t v18 = (int)result;
        do
        {
          uint64_t v19 = (uint64_t)rintf(*(float *)&v9->i32[v18]);
          if ((int)v19 <= -32768) {
            LODWORD(v19) = -32768;
          }
          if ((int)v19 >= 0x7FFF) {
            LOWORD(v19) = 0x7FFF;
          }
          a5->i16[v18++] = v19;
        }
        while (v10 != v18);
      }
      uint64_t v9 = (int8x16_t *)((char *)v9 + v12);
      a5 = (int16x8_t *)((char *)a5 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_10023AD50(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v9 = (float64x2_t *)result;
    uint64_t v10 = *a7;
    uint64_t v11 = v10 - 4;
    uint64_t v12 = 8 * (a2 >> 3);
    uint64_t v13 = 2 * (a6 >> 1);
    do
    {
      result = sub_10024295C((uint64_t)&v20, v9, a5, v10);
      if ((int)result <= (int)v11)
      {
        uint64_t v14 = (int)result;
        uint64_t v15 = 8 * (int)result + 16;
        uint64_t v16 = 2 * (int)result;
        do
        {
          v17.i32[0] = (uint64_t)rint(*(double *)((char *)v9[-1].f64 + v15));
          v17.i32[1] = (uint64_t)rint(v9->f64[v14 + 1]);
          v17.i32[2] = (uint64_t)rint(*(double *)((char *)v9->f64 + v15));
          v17.i32[3] = (uint64_t)rint(*(double *)((char *)&v9->f64[1] + v15));
          *(int16x4_t *)&a5->i8[v16] = vqmovn_s32(v17);
          v14 += 4;
          v15 += 32;
          v16 += 8;
        }
        while (v14 <= v11);
        result = v14;
      }
      if ((int)result < (int)v10)
      {
        uint64_t v18 = (int)result;
        do
        {
          uint64_t v19 = (uint64_t)rint(v9->f64[v18]);
          if ((int)v19 <= -32768) {
            LODWORD(v19) = -32768;
          }
          if ((int)v19 >= 0x7FFF) {
            LOWORD(v19) = 0x7FFF;
          }
          a5->i16[v18++] = v19;
        }
        while (v10 != v18);
      }
      uint64_t v9 = (float64x2_t *)((char *)v9 + v12);
      a5 = (int16x8_t *)((char *)a5 + v13);
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_10023AEA4(unint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, int8x16_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, int *a12)
{
  int v12 = a12[1];
  if (!v12) {
    return result;
  }
  unint64_t v13 = result;
  uint64_t v14 = *a12;
  unint64_t v15 = a11 >> 2;
  uint64_t v16 = v14 - 4;
  if ((int)v14 >= 8)
  {
    uint64_t v19 = 0;
    unint64_t v20 = a11 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v21 = (int8x16_t *)(a10 + 16);
    uint64_t v22 = 4 * v15;
    uint64_t v23 = a10 + 12;
    unint64_t v24 = result + 16;
    uint64_t v25 = a10;
    unint64_t v26 = result;
    while (1)
    {
      result = 0;
      unint64_t v27 = 0;
      unint64_t v28 = v21;
      do
      {
        uint16x8_t v29 = vmovl_u8(*(uint8x8_t *)(v26 + v27));
        uint32x4_t v30 = vmovl_u16(*(uint16x4_t *)v29.i8);
        int8x16_t v31 = (int8x16_t)vmovl_high_u16(v29);
        v28[-1] = (int8x16_t)v30;
        int8x16_t *v28 = v31;
        v27 += 8;
        result += 0x800000000;
        v28 += 2;
      }
      while (v27 <= (v14 - 8));
      if ((int)v16 >= (int)v27) {
        break;
      }
      if ((int)v27 < (int)v14) {
        goto LABEL_20;
      }
LABEL_11:
      v26 += a2;
      v25 += v22;
      ++v19;
      uint64_t v21 = (int8x16_t *)((char *)v21 + v22);
      v23 += v22;
      v24 += a2;
      if (!--v12) {
        return result;
      }
    }
    result = 0;
    uint64_t v32 = 4 * (int)v27;
    int32x4_t v33 = (_DWORD *)(v23 + v32);
    unint64_t v34 = v26 + (int)v27;
    uint64_t v35 = v25 + v32;
    do
    {
      int v36 = *(unsigned __int8 *)(v34 + result + 1);
      *(v33 - 3) = *(unsigned __int8 *)(v34 + result);
      uint64_t v37 = v35 + 4 * result;
      *(_DWORD *)(v37 + 4) = v36;
      int v38 = *(unsigned __int8 *)(v34 + result + 3);
      *(_DWORD *)(v37 + 8) = *(unsigned __int8 *)(v34 + result + 2);
      *int32x4_t v33 = v38;
      v33 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v27 + result) <= v16);
    LODWORD(v27) = v27 + result;
    if ((int)v27 >= (int)v14) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v39 = (int)v27;
    unint64_t v40 = v14 - (int)v27;
    if (v40 >= 8 && (v25 + 4 * v39 >= v13 + v14 + v19 * a2 || v26 + v39 >= a10 + 4 * v14 + v20 * v19))
    {
      if (v40 < 0x20)
      {
        unint64_t v41 = 0;
        goto LABEL_29;
      }
      unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFE0;
      result = v25 + 4 * v39;
      unint64_t v42 = (int8x16_t *)(v24 + v39);
      unint64_t v43 = v40 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v44 = v42[-1];
        int8x16_t v45 = *v42;
        int8x16_t v46 = vqtbl1q_s8(v44, (int8x16_t)xmmword_100404890);
        int8x16_t v47 = vqtbl1q_s8(v44, (int8x16_t)xmmword_1004048A0);
        int8x16_t v48 = vqtbl1q_s8(*v42, (int8x16_t)xmmword_100404890);
        int8x16_t v49 = vqtbl1q_s8(*v42, (int8x16_t)xmmword_1004048A0);
        *(int8x16_t *)(result + 32) = vqtbl1q_s8(v44, (int8x16_t)xmmword_1004048B0);
        *(int8x16_t *)(result + 48) = vqtbl1q_s8(v44, (int8x16_t)xmmword_1004048C0);
        int8x16_t v31 = vqtbl1q_s8(v45, (int8x16_t)xmmword_1004048B0);
        *(int8x16_t *)result = v46;
        *(int8x16_t *)(result + 16) = v47;
        *(int8x16_t *)(result + 96) = v31;
        *(int8x16_t *)(result + 112) = vqtbl1q_s8(v45, (int8x16_t)xmmword_1004048C0);
        *(int8x16_t *)(result + 64) = v48;
        *(int8x16_t *)(result + 80) = v49;
        result += 128;
        v42 += 2;
        v43 -= 32;
      }
      while (v43);
      if (v40 == v41) {
        goto LABEL_11;
      }
      if ((v40 & 0x18) != 0)
      {
LABEL_29:
        result = v40 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v50 = (v40 & 0xFFFFFFFFFFFFFFF8) + v39;
        unint64_t v51 = v41 - (v40 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v52 = v41 + v39;
        uint64_t v53 = 4 * (v41 + v39);
        do
        {
          v31.i64[0] = *(void *)(v26 + v52);
          int8x16_t v54 = vqtbl1q_s8(v31, (int8x16_t)xmmword_100404890);
          int8x16_t v31 = vqtbl1q_s8(v31, (int8x16_t)xmmword_1004048A0);
          unint64_t v55 = (int8x16_t *)(v25 + v53);
          *unint64_t v55 = v54;
          v55[1] = v31;
          v52 += 8;
          v53 += 32;
          v51 += 8;
        }
        while (v51);
        uint64_t v39 = v50;
        if (v40 == result) {
          goto LABEL_11;
        }
        goto LABEL_34;
      }
      v39 += v41;
    }
    do
    {
LABEL_34:
      result = *(unsigned __int8 *)(v26 + v39);
      *(_DWORD *)(v25 + 4 * v39++) = result;
    }
    while (v14 != v39);
    goto LABEL_11;
  }
  if ((int)v14 >= 4)
  {
    uint64_t v56 = 0;
    unint64_t v57 = 3;
    if (v16 > 3) {
      unint64_t v57 = v14 - 4;
    }
    unint64_t v58 = ((v57 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    uint64_t v59 = HIDWORD(v58) | 1;
    if (v59 <= v14) {
      uint64_t v59 = *a12;
    }
    unint64_t v60 = v59 - HIDWORD(v58);
    uint64_t v61 = (v57 >> 2) + 1;
    unint64_t v101 = v60 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v102 = v58 >> 30;
    unint64_t v62 = v60 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v63 = 4 * v15;
    uint64_t v64 = a10 + 12;
    unint64_t v65 = v13 + 16;
    v66 = (float *)a10;
    result = v13;
    uint64_t v67 = a10;
    while (1)
    {
      unint64_t v68 = (a11 & 0xFFFFFFFFFFFFFFFCLL) * v56;
      uint64_t v69 = v56 * a2;
      if (v57 < 0x3C) {
        break;
      }
      if ((unint64_t)v66 < v13 + (v57 & 0xFFFFFFFC) + 4 + v69
        && result < a10 + ((4 * v57) & 0x3FFFFFFF0) + 16 + v68)
      {
        break;
      }
      uint64_t v71 = v61 & 0x7FFFFFF0;
      unsigned int v72 = v66;
      unint64_t v73 = (const char *)result;
      do
      {
        *(int8x16x4_t *)a7.i8 = vld4q_s8(v73);
        v73 += 64;
        v103.val[0] = (float32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1004048A0);
        v104.val[0] = (float32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_100404890);
        v103.val[1] = (float32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1004048A0);
        v104.val[1] = (float32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_100404890);
        v103.val[2] = (float32x4_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_1004048A0);
        v104.val[2] = (float32x4_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_100404890);
        v103.val[3] = (float32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1004048A0);
        v104.val[3] = (float32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_100404890);
        unsigned int v77 = v72;
        vst4q_f32(v77, v104);
        v77 += 16;
        vst4q_f32(v77, v103);
        v103.val[0] = (float32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1004048B0);
        v103.val[1] = (float32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1004048B0);
        v103.val[2] = (float32x4_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_1004048B0);
        v103.val[3] = (float32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1004048B0);
        __int16 v78 = v72 + 32;
        vst4q_f32(v78, v103);
        v103.val[0] = (float32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_1004048C0);
        v103.val[1] = (float32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1004048C0);
        v103.val[2] = (float32x4_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_1004048C0);
        v103.val[3] = (float32x4_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_1004048C0);
        unint64_t v79 = v72 + 48;
        vst4q_f32(v79, v103);
        v72 += 64;
        v71 -= 16;
      }
      while (v71);
      uint64_t v80 = 4 * (v61 & 0x7FFFFFF0);
      if (v61 != (v61 & 0x7FFFFFF0)) {
        goto LABEL_53;
      }
LABEL_55:
      if ((int)v14 > (int)v80)
      {
        uint64_t v85 = (int)v80;
        if (v60 >= 8
          && ((unint64_t)&v66[(int)v80] >= v13 + v60 + v69 + (int)v80
           || result + (int)v80 >= v67 + v68 - v102 + 4 * (v59 + (int)v80)))
        {
          if (v60 >= 0x20)
          {
            uint64_t v87 = (int8x16_t *)&v66[(int)v80];
            uint64_t v88 = (int8x16_t *)(v65 + v85);
            unint64_t v89 = v60 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v90 = v88[-1];
              int8x16_t v91 = *v88;
              int8x16_t v92 = vqtbl1q_s8(v90, (int8x16_t)xmmword_100404890);
              int8x16_t v93 = vqtbl1q_s8(v90, (int8x16_t)xmmword_1004048A0);
              int8x16_t v94 = vqtbl1q_s8(*v88, (int8x16_t)xmmword_100404890);
              int8x16_t v95 = vqtbl1q_s8(*v88, (int8x16_t)xmmword_1004048A0);
              v87[2] = vqtbl1q_s8(v90, (int8x16_t)xmmword_1004048B0);
              v87[3] = vqtbl1q_s8(v90, (int8x16_t)xmmword_1004048C0);
              a7 = vqtbl1q_s8(v91, (int8x16_t)xmmword_1004048B0);
              *uint64_t v87 = v92;
              v87[1] = v93;
              v87[6] = a7;
              v87[7] = vqtbl1q_s8(v91, (int8x16_t)xmmword_1004048C0);
              v87[4] = v94;
              v87[5] = v95;
              v87 += 8;
              v88 += 2;
              v89 -= 32;
            }
            while (v89);
            if (v60 == v101) {
              goto LABEL_41;
            }
            unint64_t v86 = v60 & 0xFFFFFFFFFFFFFFE0;
            if ((v60 & 0x18) != 0) {
              goto LABEL_65;
            }
            v85 += v101;
          }
          else
          {
            unint64_t v86 = 0;
LABEL_65:
            unint64_t v96 = v86 - (v60 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v97 = v86 + v85;
            uint64_t v98 = v97;
            do
            {
              a7.i64[0] = *(void *)(result + v97);
              int8x16_t v99 = vqtbl1q_s8(a7, (int8x16_t)xmmword_100404890);
              a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_1004048A0);
              v100 = (int8x16_t *)&v66[v98];
              int8x16_t *v100 = v99;
              v100[1] = a7;
              v97 += 8;
              v98 += 8;
              v96 += 8;
            }
            while (v96);
            v85 += v62;
            if (v60 == v62) {
              goto LABEL_41;
            }
          }
        }
        do
        {
          LODWORD(v66[v85]) = *(unsigned __int8 *)(result + v85);
          ++v85;
        }
        while (v85 < v14);
      }
LABEL_41:
      result += a2;
      v66 = (float *)((char *)v66 + v63);
      ++v56;
      v64 += v63;
      v65 += a2;
      --v12;
      a10 = v67;
      if (!v12) {
        return result;
      }
    }
    uint64_t v80 = 0;
LABEL_53:
    unint64_t v81 = (_DWORD *)(v64 + 4 * v80);
    do
    {
      int v82 = *(unsigned __int8 *)(result + v80 + 1);
      *(v81 - 3) = *(unsigned __int8 *)(result + v80);
      int8x8_t v83 = &v66[v80];
      *((_DWORD *)v83 + 1) = v82;
      int v84 = *(unsigned __int8 *)(result + v80 + 3);
      *((_DWORD *)v83 + 2) = *(unsigned __int8 *)(result + v80 + 2);
      *unint64_t v81 = v84;
      v81 += 4;
      v80 += 4;
    }
    while (v80 <= v16);
    goto LABEL_55;
  }
  if ((int)v14 >= 1)
  {
    int32x4_t v17 = (unsigned __int8 *)(result + 2);
    uint64_t v18 = (_DWORD *)(a10 + 8);
    do
    {
      *(v18 - 2) = *(v17 - 2);
      if (v14 != 1)
      {
        *(v18 - 1) = *(v17 - 1);
        if (v14 != 2) {
          *uint64_t v18 = *v17;
        }
      }
      v17 += a2;
      v18 += v15;
      --v12;
    }
    while (v12);
  }
  return result;
}

const char *sub_10023B478(const char *result, uint64_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (!v7) {
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = *a7;
  result = (const char *)(a6 >> 2);
  uint64_t v10 = v9 - 4;
  if ((int)v9 >= 8)
  {
    uint64_t v13 = 0;
    unint64_t v14 = a6 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v15 = a5 + 1;
    uint64_t v16 = 4 * (void)result;
    uint64_t v17 = (uint64_t)&a5->i64[1] + 4;
    uint64_t v18 = v8 + 16;
    uint64_t v19 = a5;
    unint64_t v20 = v8;
    while (1)
    {
      result = 0;
      unint64_t v21 = 0;
      uint64_t v22 = v15;
      do
      {
        int16x8_t v23 = vmovl_s8(*(int8x8_t *)&v20[v21]);
        v22[-1] = vmovl_s16(*(int16x4_t *)v23.i8);
        *uint64_t v22 = vmovl_high_s16(v23);
        v21 += 8;
        result += 0x800000000;
        v22 += 2;
      }
      while (v21 <= (v9 - 8));
      if ((int)v10 >= (int)v21) {
        break;
      }
      if ((int)v21 < (int)v9) {
        goto LABEL_20;
      }
LABEL_11:
      v20 += a2;
      uint64_t v19 = (int32x4_t *)((char *)v19 + v16);
      ++v13;
      unint64_t v15 = (int32x4_t *)((char *)v15 + v16);
      v17 += v16;
      v18 += a2;
      if (!--v7) {
        return result;
      }
    }
    result = 0;
    uint64_t v24 = 4 * (int)v21;
    uint64_t v25 = (_DWORD *)(v17 + v24);
    unint64_t v26 = &v20[(int)v21];
    uint64_t v27 = (uint64_t)v19->i64 + v24;
    do
    {
      int v28 = result[(void)v26 + 1];
      *(v25 - 3) = result[(void)v26];
      uint64_t v29 = v27 + 4 * (void)result;
      *(_DWORD *)(v29 + 4) = v28;
      int v30 = result[(void)v26 + 3];
      *(_DWORD *)(v29 + 8) = result[(void)v26 + 2];
      *uint64_t v25 = v30;
      v25 += 4;
      result += 4;
    }
    while ((uint64_t)&result[(int)v21] <= v10);
    LODWORD(v21) = v21 + result;
    if ((int)v21 >= (int)v9) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v31 = (int)v21;
    unint64_t v32 = v9 - (int)v21;
    if (v32 >= 8 && ((char *)v19 + 4 * v31 >= &v8[v9 + v13 * a2] || &v20[v31] >= &a5->i8[4 * v9 + v14 * v13]))
    {
      if (v32 < 0x20)
      {
        result = 0;
        goto LABEL_29;
      }
      result = (const char *)(v32 & 0xFFFFFFFFFFFFFFE0);
      int32x4_t v33 = (int32x4_t *)((char *)v19 + 4 * v31);
      unint64_t v34 = (int8x8_t *)&v18[v31];
      unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v36 = *(int8x16_t *)v34[-2].i8;
        int8x16_t v37 = *(int8x16_t *)v34->i8;
        int16x8_t v38 = vmovl_s8(*(int8x8_t *)v36.i8);
        int16x8_t v39 = vmovl_high_s8(v36);
        int16x8_t v40 = vmovl_s8(*v34);
        v33[2] = vmovl_s16(*(int16x4_t *)v39.i8);
        v33[3] = vmovl_high_s16(v39);
        int16x8_t v41 = vmovl_high_s8(v37);
        *int32x4_t v33 = vmovl_s16(*(int16x4_t *)v38.i8);
        v33[1] = vmovl_high_s16(v38);
        v33[6] = vmovl_s16(*(int16x4_t *)v41.i8);
        v33[7] = vmovl_high_s16(v41);
        v33[4] = vmovl_s16(*(int16x4_t *)v40.i8);
        v33[5] = vmovl_high_s16(v40);
        v33 += 8;
        v34 += 4;
        v35 -= 32;
      }
      while (v35);
      if ((const char *)v32 == result) {
        goto LABEL_11;
      }
      if ((v32 & 0x18) != 0)
      {
LABEL_29:
        uint64_t v42 = (v32 & 0xFFFFFFFFFFFFFFF8) + v31;
        unint64_t v43 = &result[-(v32 & 0xFFFFFFFFFFFFFFF8)];
        result += v31;
        uint64_t v44 = 4 * (void)result;
        do
        {
          int16x8_t v45 = vmovl_s8(*(int8x8_t *)&result[(void)v20]);
          int8x16_t v46 = (int32x4_t *)((char *)v19 + v44);
          *int8x16_t v46 = vmovl_s16(*(int16x4_t *)v45.i8);
          v46[1] = vmovl_high_s16(v45);
          result += 8;
          v44 += 32;
          v43 += 8;
        }
        while (v43);
        uint64_t v31 = v42;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_11;
        }
        goto LABEL_34;
      }
      v31 += (uint64_t)result;
    }
    do
    {
LABEL_34:
      result = (const char *)v20[v31];
      v19->i32[v31++] = (int)result;
    }
    while (v9 != v31);
    goto LABEL_11;
  }
  if ((int)v9 >= 4)
  {
    uint64_t v47 = 0;
    unint64_t v48 = 3;
    if (v10 > 3) {
      unint64_t v48 = v9 - 4;
    }
    unint64_t v49 = ((v48 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    uint64_t v50 = HIDWORD(v49) | 1;
    if (v50 <= v9) {
      uint64_t v50 = *a7;
    }
    unint64_t v51 = v50 - HIDWORD(v49);
    uint64_t v52 = (v48 >> 2) + 1;
    unint64_t v97 = v51 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v98 = v49 >> 30;
    unint64_t v53 = v51 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = 4 * (void)result;
    uint64_t v55 = (uint64_t)&a5->i64[1] + 4;
    uint64_t v56 = v8 + 16;
    unint64_t v57 = (float *)a5;
    result = v8;
    unint64_t v58 = a5;
    while (1)
    {
      unint64_t v59 = (a6 & 0xFFFFFFFFFFFFFFFCLL) * v47;
      uint64_t v60 = v47 * a2;
      if (v48 < 0x3C) {
        break;
      }
      if (v57 < (float *)&v8[(v48 & 0xFFFFFFFC) + 4 + v60]
        && result < &a5[1].i8[((4 * v48) & 0x3FFFFFFF0) + v59])
      {
        break;
      }
      uint64_t v62 = v52 & 0x7FFFFFF0;
      uint64_t v63 = v57;
      uint64_t v64 = result;
      do
      {
        int8x16x4_t v99 = vld4q_s8(v64);
        v64 += 64;
        int16x8_t v65 = vmovl_high_s8(v99.val[0]);
        int16x8_t v66 = vmovl_high_s8(v99.val[1]);
        int16x8_t v67 = vmovl_high_s8(v99.val[2]);
        int16x8_t v68 = vmovl_s8(*(int8x8_t *)v99.val[0].i8);
        v100.val[0] = (float32x4_t)vmovl_high_s16(v68);
        int16x8_t v69 = vmovl_s8(*(int8x8_t *)v99.val[1].i8);
        v100.val[1] = (float32x4_t)vmovl_high_s16(v69);
        int16x8_t v70 = vmovl_s8(*(int8x8_t *)v99.val[2].i8);
        v100.val[2] = (float32x4_t)vmovl_high_s16(v70);
        int16x8_t v71 = vmovl_s8(*(int8x8_t *)v99.val[3].i8);
        v100.val[3] = (float32x4_t)vmovl_high_s16(v71);
        v101.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v68.i8);
        v101.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v69.i8);
        v101.val[2] = (float32x4_t)vmovl_s16(*(int16x4_t *)v70.i8);
        v101.val[3] = (float32x4_t)vmovl_s16(*(int16x4_t *)v71.i8);
        unsigned int v72 = v63;
        vst4q_f32(v72, v101);
        v72 += 16;
        vst4q_f32(v72, v100);
        v99.val[0] = (int8x16_t)vmovl_high_s8(v99.val[3]);
        v100.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v65.i8);
        v100.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v66.i8);
        v100.val[2] = (float32x4_t)vmovl_s16(*(int16x4_t *)v67.i8);
        v100.val[3] = (float32x4_t)vmovl_s16(*(int16x4_t *)v99.val[0].i8);
        unint64_t v73 = v63 + 32;
        vst4q_f32(v73, v100);
        v99.val[1] = (int8x16_t)vmovl_high_s16(v65);
        v99.val[2] = (int8x16_t)vmovl_high_s16(v66);
        v99.val[3] = (int8x16_t)vmovl_high_s16(v67);
        int32x4_t v74 = vmovl_high_s16((int16x8_t)v99.val[0]);
        int8x16_t v75 = v63 + 48;
        vst4q_f32(v75, *(float32x4x4_t *)((char *)&v99 + 16));
        v63 += 64;
        v62 -= 16;
      }
      while (v62);
      uint64_t v76 = 4 * (v52 & 0x7FFFFFF0);
      if (v52 != (v52 & 0x7FFFFFF0)) {
        goto LABEL_53;
      }
LABEL_55:
      if ((int)v9 > (int)v76)
      {
        uint64_t v81 = (int)v76;
        if (v51 >= 8
          && (&v57[(int)v76] >= (float *)&v8[v51 + v60 + (int)v76]
           || &result[(int)v76] >= &v58->i8[4 * v50 + 4 * (int)v76 + v59 - v98]))
        {
          if (v51 >= 0x20)
          {
            int8x8_t v83 = (int32x4_t *)&v57[(int)v76];
            int v84 = (int8x8_t *)&v56[v81];
            unint64_t v85 = v51 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              int8x16_t v86 = *(int8x16_t *)v84[-2].i8;
              int8x16_t v87 = *(int8x16_t *)v84->i8;
              int16x8_t v88 = vmovl_s8(*(int8x8_t *)v86.i8);
              int16x8_t v89 = vmovl_high_s8(v86);
              int16x8_t v90 = vmovl_s8(*v84);
              v83[2] = vmovl_s16(*(int16x4_t *)v89.i8);
              v83[3] = vmovl_high_s16(v89);
              int16x8_t v91 = vmovl_high_s8(v87);
              *int8x8_t v83 = vmovl_s16(*(int16x4_t *)v88.i8);
              v83[1] = vmovl_high_s16(v88);
              v83[6] = vmovl_s16(*(int16x4_t *)v91.i8);
              v83[7] = vmovl_high_s16(v91);
              v83[4] = vmovl_s16(*(int16x4_t *)v90.i8);
              v83[5] = vmovl_high_s16(v90);
              v83 += 8;
              v84 += 4;
              v85 -= 32;
            }
            while (v85);
            if (v51 == v97) {
              goto LABEL_41;
            }
            unint64_t v82 = v51 & 0xFFFFFFFFFFFFFFE0;
            if ((v51 & 0x18) != 0) {
              goto LABEL_65;
            }
            v81 += v97;
          }
          else
          {
            unint64_t v82 = 0;
LABEL_65:
            unint64_t v92 = v82 - (v51 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v93 = v82 + v81;
            uint64_t v94 = v93;
            do
            {
              int16x8_t v95 = vmovl_s8(*(int8x8_t *)&result[v93]);
              unint64_t v96 = (int32x4_t *)&v57[v94];
              *unint64_t v96 = vmovl_s16(*(int16x4_t *)v95.i8);
              v96[1] = vmovl_high_s16(v95);
              v93 += 8;
              v94 += 8;
              v92 += 8;
            }
            while (v92);
            v81 += v53;
            if (v51 == v53) {
              goto LABEL_41;
            }
          }
        }
        do
        {
          LODWORD(v57[v81]) = result[v81];
          ++v81;
        }
        while (v81 < v9);
      }
LABEL_41:
      result += a2;
      unint64_t v57 = (float *)((char *)v57 + v54);
      ++v47;
      v55 += v54;
      v56 += a2;
      --v7;
      a5 = v58;
      if (!v7) {
        return result;
      }
    }
    uint64_t v76 = 0;
LABEL_53:
    unsigned int v77 = (_DWORD *)(v55 + 4 * v76);
    do
    {
      int v78 = result[v76 + 1];
      *(v77 - 3) = result[v76];
      unint64_t v79 = &v57[v76];
      *((_DWORD *)v79 + 1) = v78;
      int v80 = result[v76 + 3];
      *((_DWORD *)v79 + 2) = result[v76 + 2];
      *unsigned int v77 = v80;
      v77 += 4;
      v76 += 4;
    }
    while (v76 <= v10);
    goto LABEL_55;
  }
  if ((int)v9 >= 1)
  {
    uint64_t v11 = (char *)(v8 + 2);
    int v12 = &a5->i32[2];
    do
    {
      *(v12 - 2) = *(v11 - 2);
      if (v9 != 1)
      {
        *(v12 - 1) = *(v11 - 1);
        if (v9 != 2) {
          *int v12 = *v11;
        }
      }
      v11 += a2;
      v12 += (uint64_t)result;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint16x8_t *sub_10023BA54(uint16x8_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (!v7) {
    return result;
  }
  uint64_t v8 = *a7;
  unint64_t v9 = a2 >> 1;
  unint64_t v10 = a6 >> 2;
  uint64_t v11 = v8 - 4;
  if ((int)v8 >= 8)
  {
    unint64_t v14 = (uint32x4_t *)(a5 + 16);
    uint64_t v15 = 4 * v10;
    uint64_t v16 = 2 * v9;
    uint64_t v17 = result + 1;
    while (1)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unint64_t v20 = result;
      unint64_t v21 = v14;
      do
      {
        uint16x8_t v22 = *v20++;
        v21[-1] = vmovl_u16(*(uint16x4_t *)v22.i8);
        *unint64_t v21 = vmovl_high_u16(v22);
        v19 += 8;
        v18 += 0x800000000;
        v21 += 2;
      }
      while (v19 <= (v8 - 8));
      if ((int)v11 >= (int)v19)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 4 * (int)v19;
        uint64_t v25 = 2 * (int)v19;
        do
        {
          *(uint32x4_t *)(a5 + v24) = vmovl_u16(*(uint16x4_t *)&result->i8[v25]);
          v23 += 4;
          v24 += 16;
          v25 += 8;
        }
        while ((int)v19 + v23 <= v11);
        LODWORD(v19) = v19 + v23;
        if ((int)v19 < (int)v8)
        {
LABEL_20:
          uint64_t v26 = (int)v19;
          unint64_t v27 = v8 - (int)v19;
          unint64_t v19 = (int)v19;
          if (v27 < 0x10) {
            goto LABEL_59;
          }
          unint64_t v19 = (v27 & 0xFFFFFFFFFFFFFFF0) + (int)v19;
          int v28 = (uint32x4_t *)(a5 + 4 * v26);
          uint64_t v29 = (uint16x4_t *)((char *)v17 + 2 * v26);
          unint64_t v30 = v27 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            uint16x8_t v31 = *(uint16x8_t *)v29[-2].i8;
            uint32x4_t v32 = vmovl_u16(*v29);
            uint32x4_t v33 = vmovl_high_u16(*(uint16x8_t *)v29->i8);
            uint32x4_t *v28 = vmovl_u16(*(uint16x4_t *)v31.i8);
            v28[1] = vmovl_high_u16(v31);
            v28[2] = v32;
            v28[3] = v33;
            v28 += 4;
            v29 += 4;
            v30 -= 16;
          }
          while (v30);
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_59:
            do
            {
              *(_DWORD *)(a5 + 4 * v19) = result->u16[v19];
              ++v19;
            }
            while (v8 != v19);
          }
        }
      }
      else if ((int)v19 < (int)v8)
      {
        goto LABEL_20;
      }
      unint64_t v14 = (uint32x4_t *)((char *)v14 + v15);
      result = (uint16x8_t *)((char *)result + v16);
      a5 += v15;
      uint64_t v17 = (uint16x8_t *)((char *)v17 + v16);
      if (!--v7) {
        return result;
      }
    }
  }
  if ((int)v8 >= 4)
  {
    if (v11 <= 3) {
      unint64_t v34 = 3;
    }
    else {
      unint64_t v34 = v8 - 4;
    }
    unint64_t v35 = (((v34 << 32) & 0x7FFFFFFC00000000) + 0x400000000) >> 32;
    uint64_t v36 = v35 | 1;
    if ((uint64_t)(v35 | 1) <= v8) {
      uint64_t v36 = *a7;
    }
    unint64_t v37 = v36 - v35;
    unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF0;
    if (v34 >= 0x1C)
    {
      unint64_t v53 = (v34 >> 2) + 1;
      uint64_t v54 = 2 * v9;
      uint64_t v55 = 4 * v10;
      uint64_t v56 = (uint32x4_t *)(a5 + (v53 >> 3 << 7));
      unint64_t v57 = result + 1;
      unint64_t v58 = (uint16x4_t *)&result[4 * (v53 >> 3)];
      do
      {
        unint64_t v59 = v53 & 0x7FFFFFF8;
        uint64_t v60 = (float *)a5;
        uint64_t v61 = (const __int16 *)result;
        do
        {
          int16x8x4_t v75 = vld4q_s16(v61);
          v61 += 32;
          v76.val[0] = (float32x4_t)vmovl_high_u16((uint16x8_t)v75.val[0]);
          v76.val[1] = (float32x4_t)vmovl_high_u16((uint16x8_t)v75.val[1]);
          v76.val[2] = (float32x4_t)vmovl_high_u16((uint16x8_t)v75.val[2]);
          v76.val[3] = (float32x4_t)vmovl_high_u16((uint16x8_t)v75.val[3]);
          v77.val[0] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v75.val[0].i8);
          v77.val[1] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v75.val[1].i8);
          v77.val[2] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v75.val[2].i8);
          v77.val[3] = (float32x4_t)vmovl_u16(*(uint16x4_t *)v75.val[3].i8);
          uint64_t v62 = v60 + 32;
          vst4q_f32(v60, v77);
          uint64_t v63 = v60 + 16;
          vst4q_f32(v63, v76);
          uint64_t v60 = v62;
          v59 -= 8;
        }
        while (v59);
        LODWORD(v64) = 4 * (v53 & 0x7FFFFFF8);
        if (v53 != (v53 & 0x7FFFFFF8))
        {
          int16x8_t v65 = v58;
          int16x8_t v66 = v56;
          uint64_t v64 = 4 * (v53 & 0x7FFFFFF8);
          do
          {
            uint16x4_t v67 = *v65++;
            *v66++ = vmovl_u16(v67);
            v64 += 4;
          }
          while (v64 <= v11);
        }
        if ((int)v8 > (int)v64)
        {
          uint64_t v68 = (int)v64;
          uint64_t v64 = (int)v64;
          if (v37 < 0x10) {
            goto LABEL_60;
          }
          uint64_t v64 = (int)v64 + v38;
          int16x8_t v69 = (uint32x4_t *)(a5 + 4 * v68);
          unint64_t v70 = v37 & 0xFFFFFFFFFFFFFFF0;
          int16x8_t v71 = (uint16x4_t *)((char *)v57 + 2 * v68);
          do
          {
            uint16x8_t v72 = *(uint16x8_t *)v71[-2].i8;
            uint32x4_t v73 = vmovl_u16(*v71);
            uint32x4_t v74 = vmovl_high_u16(*(uint16x8_t *)v71->i8);
            uint32x4_t *v69 = vmovl_u16(*(uint16x4_t *)v72.i8);
            v69[1] = vmovl_high_u16(v72);
            v69[2] = v73;
            v69[3] = v74;
            v69 += 4;
            v71 += 4;
            v70 -= 16;
          }
          while (v70);
          if (v37 != v38)
          {
LABEL_60:
            do
            {
              *(_DWORD *)(a5 + 4 * v64) = result->u16[v64];
              ++v64;
            }
            while (v64 < v8);
          }
        }
        result = (uint16x8_t *)((char *)result + v54);
        a5 += v55;
        uint64_t v56 = (uint32x4_t *)((char *)v56 + v55);
        unint64_t v58 = (uint16x4_t *)((char *)v58 + v54);
        unint64_t v57 = (uint16x8_t *)((char *)v57 + v54);
        --v7;
      }
      while (v7);
    }
    else
    {
      uint64_t v39 = 4 * v10;
      uint64_t v40 = 2 * v9;
      do
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        unint64_t v43 = (uint16x4_t *)result;
        uint64_t v44 = (uint32x4_t *)a5;
        do
        {
          uint16x4_t v45 = *v43++;
          *v44++ = vmovl_u16(v45);
          v42 += 4;
          v41 += 0x400000000;
        }
        while (v42 <= v11);
        if ((int)v8 > (int)v42)
        {
          uint64_t v46 = v41 >> 32;
          uint64_t v47 = v41 >> 32;
          if (v37 < 0x10) {
            goto LABEL_61;
          }
          uint64_t v48 = 0;
          uint64_t v47 = v46 + v38;
          do
          {
            unint64_t v49 = (uint16x8_t *)((char *)result + 2 * v46 + 2 * v48);
            uint16x8_t v50 = v49[1];
            uint32x4_t v51 = vmovl_high_u16(*v49);
            uint64_t v52 = (uint32x4_t *)(a5 + 4 * (v46 + v48));
            *uint64_t v52 = vmovl_u16(*(uint16x4_t *)v49->i8);
            v52[1] = v51;
            v52[2] = vmovl_u16(*(uint16x4_t *)v50.i8);
            v52[3] = vmovl_high_u16(v50);
            v48 += 16;
          }
          while (v38 != v48);
          if (v37 != v38)
          {
LABEL_61:
            do
            {
              *(_DWORD *)(a5 + 4 * v47) = result->u16[v47];
              ++v47;
            }
            while (v47 < v8);
          }
        }
        result = (uint16x8_t *)((char *)result + v40);
        a5 += v39;
        --v7;
      }
      while (v7);
    }
  }
  else if ((int)v8 >= 1)
  {
    int v12 = &result->u16[2];
    uint64_t v13 = (_DWORD *)(a5 + 8);
    do
    {
      *(v13 - 2) = *(v12 - 2);
      if (v8 != 1)
      {
        *(v13 - 1) = *(v12 - 1);
        if (v8 != 2) {
          *uint64_t v13 = *v12;
        }
      }
      v12 += v9;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

int16x8_t *sub_10023BE3C(int16x8_t *result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (!v7) {
    return result;
  }
  uint64_t v8 = *a7;
  unint64_t v9 = a2 >> 1;
  unint64_t v10 = a6 >> 2;
  uint64_t v11 = v8 - 4;
  if ((int)v8 >= 8)
  {
    unint64_t v14 = (int32x4_t *)(a5 + 16);
    uint64_t v15 = 4 * v10;
    uint64_t v16 = 2 * v9;
    uint64_t v17 = result + 1;
    while (1)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      unint64_t v20 = result;
      unint64_t v21 = v14;
      do
      {
        int16x8_t v22 = *v20++;
        v21[-1] = vmovl_s16(*(int16x4_t *)v22.i8);
        *unint64_t v21 = vmovl_high_s16(v22);
        v19 += 8;
        v18 += 0x800000000;
        v21 += 2;
      }
      while (v19 <= (v8 - 8));
      if ((int)v11 >= (int)v19)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 4 * (int)v19;
        uint64_t v25 = 2 * (int)v19;
        do
        {
          *(int32x4_t *)(a5 + v24) = vmovl_s16(*(int16x4_t *)&result->i8[v25]);
          v23 += 4;
          v24 += 16;
          v25 += 8;
        }
        while ((int)v19 + v23 <= v11);
        LODWORD(v19) = v19 + v23;
        if ((int)v19 < (int)v8)
        {
LABEL_20:
          uint64_t v26 = (int)v19;
          unint64_t v27 = v8 - (int)v19;
          unint64_t v19 = (int)v19;
          if (v27 < 0x10) {
            goto LABEL_59;
          }
          unint64_t v19 = (v27 & 0xFFFFFFFFFFFFFFF0) + (int)v19;
          int v28 = (int32x4_t *)(a5 + 4 * v26);
          uint64_t v29 = (int16x4_t *)((char *)v17 + 2 * v26);
          unint64_t v30 = v27 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v31 = *(int16x8_t *)v29[-2].i8;
            int32x4_t v32 = vmovl_s16(*v29);
            int32x4_t v33 = vmovl_high_s16(*(int16x8_t *)v29->i8);
            int32x4_t *v28 = vmovl_s16(*(int16x4_t *)v31.i8);
            v28[1] = vmovl_high_s16(v31);
            v28[2] = v32;
            v28[3] = v33;
            v28 += 4;
            v29 += 4;
            v30 -= 16;
          }
          while (v30);
          if (v27 != (v27 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_59:
            do
            {
              *(_DWORD *)(a5 + 4 * v19) = result->i16[v19];
              ++v19;
            }
            while (v8 != v19);
          }
        }
      }
      else if ((int)v19 < (int)v8)
      {
        goto LABEL_20;
      }
      unint64_t v14 = (int32x4_t *)((char *)v14 + v15);
      result = (int16x8_t *)((char *)result + v16);
      a5 += v15;
      uint64_t v17 = (int16x8_t *)((char *)v17 + v16);
      if (!--v7) {
        return result;
      }
    }
  }
  if ((int)v8 >= 4)
  {
    if (v11 <= 3) {
      unint64_t v34 = 3;
    }
    else {
      unint64_t v34 = v8 - 4;
    }
    unint64_t v35 = (((v34 << 32) & 0x7FFFFFFC00000000) + 0x400000000) >> 32;
    uint64_t v36 = v35 | 1;
    if ((uint64_t)(v35 | 1) <= v8) {
      uint64_t v36 = *a7;
    }
    unint64_t v37 = v36 - v35;
    unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF0;
    if (v34 >= 0x1C)
    {
      unint64_t v53 = (v34 >> 2) + 1;
      uint64_t v54 = 2 * v9;
      uint64_t v55 = 4 * v10;
      uint64_t v56 = (int32x4_t *)(a5 + (v53 >> 3 << 7));
      unint64_t v57 = result + 1;
      unint64_t v58 = (int16x4_t *)&result[4 * (v53 >> 3)];
      do
      {
        unint64_t v59 = v53 & 0x7FFFFFF8;
        uint64_t v60 = (float *)a5;
        uint64_t v61 = (const __int16 *)result;
        do
        {
          int16x8x4_t v75 = vld4q_s16(v61);
          v61 += 32;
          v76.val[0] = (float32x4_t)vmovl_high_s16(v75.val[0]);
          v76.val[1] = (float32x4_t)vmovl_high_s16(v75.val[1]);
          v76.val[2] = (float32x4_t)vmovl_high_s16(v75.val[2]);
          v76.val[3] = (float32x4_t)vmovl_high_s16(v75.val[3]);
          v77.val[0] = (float32x4_t)vmovl_s16(*(int16x4_t *)v75.val[0].i8);
          v77.val[1] = (float32x4_t)vmovl_s16(*(int16x4_t *)v75.val[1].i8);
          v77.val[2] = (float32x4_t)vmovl_s16(*(int16x4_t *)v75.val[2].i8);
          v77.val[3] = (float32x4_t)vmovl_s16(*(int16x4_t *)v75.val[3].i8);
          uint64_t v62 = v60 + 32;
          vst4q_f32(v60, v77);
          uint64_t v63 = v60 + 16;
          vst4q_f32(v63, v76);
          uint64_t v60 = v62;
          v59 -= 8;
        }
        while (v59);
        LODWORD(v64) = 4 * (v53 & 0x7FFFFFF8);
        if (v53 != (v53 & 0x7FFFFFF8))
        {
          int16x8_t v65 = v58;
          int16x8_t v66 = v56;
          uint64_t v64 = 4 * (v53 & 0x7FFFFFF8);
          do
          {
            int16x4_t v67 = *v65++;
            *v66++ = vmovl_s16(v67);
            v64 += 4;
          }
          while (v64 <= v11);
        }
        if ((int)v8 > (int)v64)
        {
          uint64_t v68 = (int)v64;
          uint64_t v64 = (int)v64;
          if (v37 < 0x10) {
            goto LABEL_60;
          }
          uint64_t v64 = (int)v64 + v38;
          int16x8_t v69 = (int32x4_t *)(a5 + 4 * v68);
          unint64_t v70 = v37 & 0xFFFFFFFFFFFFFFF0;
          int16x8_t v71 = (int16x4_t *)((char *)v57 + 2 * v68);
          do
          {
            int16x8_t v72 = *(int16x8_t *)v71[-2].i8;
            int32x4_t v73 = vmovl_s16(*v71);
            int32x4_t v74 = vmovl_high_s16(*(int16x8_t *)v71->i8);
            int32x4_t *v69 = vmovl_s16(*(int16x4_t *)v72.i8);
            v69[1] = vmovl_high_s16(v72);
            v69[2] = v73;
            v69[3] = v74;
            v69 += 4;
            v71 += 4;
            v70 -= 16;
          }
          while (v70);
          if (v37 != v38)
          {
LABEL_60:
            do
            {
              *(_DWORD *)(a5 + 4 * v64) = result->i16[v64];
              ++v64;
            }
            while (v64 < v8);
          }
        }
        result = (int16x8_t *)((char *)result + v54);
        a5 += v55;
        uint64_t v56 = (int32x4_t *)((char *)v56 + v55);
        unint64_t v58 = (int16x4_t *)((char *)v58 + v54);
        unint64_t v57 = (int16x8_t *)((char *)v57 + v54);
        --v7;
      }
      while (v7);
    }
    else
    {
      uint64_t v39 = 4 * v10;
      uint64_t v40 = 2 * v9;
      do
      {
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        unint64_t v43 = (int16x4_t *)result;
        uint64_t v44 = (int32x4_t *)a5;
        do
        {
          int16x4_t v45 = *v43++;
          *v44++ = vmovl_s16(v45);
          v42 += 4;
          v41 += 0x400000000;
        }
        while (v42 <= v11);
        if ((int)v8 > (int)v42)
        {
          uint64_t v46 = v41 >> 32;
          uint64_t v47 = v41 >> 32;
          if (v37 < 0x10) {
            goto LABEL_61;
          }
          uint64_t v48 = 0;
          uint64_t v47 = v46 + v38;
          do
          {
            unint64_t v49 = (int16x8_t *)((char *)result + 2 * v46 + 2 * v48);
            int16x8_t v50 = v49[1];
            int32x4_t v51 = vmovl_high_s16(*v49);
            uint64_t v52 = (int32x4_t *)(a5 + 4 * (v46 + v48));
            *uint64_t v52 = vmovl_s16(*(int16x4_t *)v49->i8);
            v52[1] = v51;
            v52[2] = vmovl_s16(*(int16x4_t *)v50.i8);
            v52[3] = vmovl_high_s16(v50);
            v48 += 16;
          }
          while (v38 != v48);
          if (v37 != v38)
          {
LABEL_61:
            do
            {
              *(_DWORD *)(a5 + 4 * v47) = result->i16[v47];
              ++v47;
            }
            while (v47 < v8);
          }
        }
        result = (int16x8_t *)((char *)result + v40);
        a5 += v39;
        --v7;
      }
      while (v7);
    }
  }
  else if ((int)v8 >= 1)
  {
    int v12 = &result->i16[2];
    uint64_t v13 = (_DWORD *)(a5 + 8);
    do
    {
      *(v13 - 2) = *(v12 - 2);
      if (v8 != 1)
      {
        *(v13 - 1) = *(v12 - 1);
        if (v8 != 2) {
          *uint64_t v13 = *v12;
        }
      }
      v12 += v9;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

char *sub_10023C224(char *__src, unint64_t a2, int a3, int a4, char *__dst, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    unint64_t v9 = __src;
    size_t v10 = 4 * *a7;
    uint64_t v11 = 4 * (a2 >> 2);
    uint64_t v12 = 4 * (a6 >> 2);
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v9, v10);
      v9 += v11;
      __dst += v12;
    }
    while (v7);
  }
  return __src;
}

void sub_10023C298(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = a5;
    uint64_t v9 = a1;
    uint64_t v10 = *a7;
    unint64_t v11 = a2 >> 2;
    unint64_t v12 = a6 >> 2;
    int v13 = v10 - 4;
    if ((int)v10 >= 4)
    {
      uint64_t v18 = 4 * v11;
      uint64_t v19 = 4 * v12;
      unint64_t v20 = (int8x16_t *)&unk_1004D2000;
      do
      {
        uint64_t v21 = 0;
        int v22 = 0;
        uint64_t v23 = 0;
        do
        {
          int8x16_t v24 = *(int8x16_t *)(v9 + v21);
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            int v38 = v7;
            uint64_t v34 = v18;
            uint64_t v36 = v10;
            uint64_t v32 = v19;
            int8x16_t v30 = v24;
            int v25 = __cxa_guard_acquire(qword_1004D2D60);
            int8x16_t v24 = v30;
            *(void *)&long long v26 = 0x8000000080000000;
            *((void *)&v26 + 1) = 0x8000000080000000;
            unint64_t v20 = (int8x16_t *)&unk_1004D2000;
            uint64_t v19 = v32;
            uint64_t v18 = v34;
            uint64_t v10 = v36;
            int v7 = v38;
            if (v25)
            {
              xmmword_1004D2D50 = v26;
              __cxa_guard_release(qword_1004D2D60);
              int8x16_t v24 = v30;
              unint64_t v20 = (int8x16_t *)&unk_1004D2000;
              uint64_t v19 = v32;
              uint64_t v18 = v34;
              uint64_t v10 = v36;
              int v7 = v38;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            int v39 = v7;
            uint64_t v35 = v18;
            uint64_t v37 = v10;
            uint64_t v33 = v19;
            int8x16_t v31 = v24;
            int v27 = __cxa_guard_acquire(qword_1004D2D80);
            int8x16_t v24 = v31;
            *(void *)&long long v28 = 0x3F0000003F000000;
            *((void *)&v28 + 1) = 0x3F0000003F000000;
            unint64_t v20 = (int8x16_t *)&unk_1004D2000;
            uint64_t v19 = v33;
            uint64_t v18 = v35;
            uint64_t v10 = v37;
            int v7 = v39;
            if (v27)
            {
              xmmword_1004D2D70 = v28;
              __cxa_guard_release(qword_1004D2D80);
              int8x16_t v24 = v31;
              unint64_t v20 = (int8x16_t *)&unk_1004D2000;
              uint64_t v19 = v33;
              uint64_t v18 = v35;
              uint64_t v10 = v37;
              int v7 = v39;
            }
          }
          *(int32x4_t *)(v8 + v21) = vcvtq_s32_f32(vaddq_f32((float32x4_t)v24, (float32x4_t)vorrq_s8(vandq_s8(v20[213], v24), (int8x16_t)xmmword_1004D2D70)));
          v23 += 0x400000000;
          v22 += 4;
          v21 += 16;
        }
        while (v13 >= v22);
        if ((int)v10 > v22)
        {
          uint64_t v29 = v23 >> 32;
          do
          {
            *(_DWORD *)(v8 + 4 * v29) = (uint64_t)rintf(*(float *)(v9 + 4 * v29));
            ++v29;
          }
          while (v10 != v29);
        }
        v9 += v18;
        v8 += v19;
        --v7;
      }
      while (v7);
    }
    else if ((int)v10 >= 1)
    {
      unint64_t v14 = (float *)(a1 + 8);
      uint64_t v15 = 4 * v11;
      uint64_t v16 = (_DWORD *)(a5 + 8);
      uint64_t v17 = 4 * v12;
      do
      {
        *(v16 - 2) = (uint64_t)rintf(*(v14 - 2));
        if (v10 != 1)
        {
          *(v16 - 1) = (uint64_t)rintf(*(v14 - 1));
          if (v10 != 2) {
            *uint64_t v16 = (uint64_t)rintf(*v14);
          }
        }
        unint64_t v14 = (float *)((char *)v14 + v15);
        uint64_t v16 = (_DWORD *)((char *)v16 + v17);
        --v7;
      }
      while (v7);
    }
  }
}

void sub_10023C4DC(float64x2_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = a5;
    uint64_t v9 = a1;
    uint64_t v10 = *a7;
    unint64_t v11 = a2 >> 3;
    unint64_t v12 = a6 >> 2;
    int v13 = v10 - 4;
    if ((int)v10 >= 4)
    {
      uint64_t v18 = 4 * v12;
      uint64_t v19 = a1 + 1;
      uint64_t v20 = 8 * v11;
      uint64_t v21 = (int8x16_t *)&unk_1004D2000;
      do
      {
        int v22 = 0;
        uint64_t v23 = 0;
        int8x16_t v24 = v19;
        int v25 = v8;
        do
        {
          float64x2_t v27 = v24[-1];
          float64x2_t v26 = *v24;
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            int v46 = v7;
            uint64_t v42 = v18;
            uint64_t v44 = v10;
            uint64_t v38 = v20;
            uint64_t v40 = v19;
            float64x2_t v34 = v27;
            float64x2_t v36 = v26;
            int v29 = __cxa_guard_acquire(qword_1004D2D60);
            float64x2_t v27 = v34;
            float64x2_t v26 = v36;
            *(void *)&long long v30 = 0x8000000080000000;
            *((void *)&v30 + 1) = 0x8000000080000000;
            uint64_t v21 = (int8x16_t *)&unk_1004D2000;
            uint64_t v20 = v38;
            uint64_t v19 = v40;
            uint64_t v18 = v42;
            uint64_t v10 = v44;
            int v7 = v46;
            if (v29)
            {
              xmmword_1004D2D50 = v30;
              __cxa_guard_release(qword_1004D2D60);
              float64x2_t v27 = v34;
              float64x2_t v26 = v36;
              uint64_t v21 = (int8x16_t *)&unk_1004D2000;
              uint64_t v20 = v38;
              uint64_t v19 = v40;
              uint64_t v18 = v42;
              uint64_t v10 = v44;
              int v7 = v46;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            int v47 = v7;
            uint64_t v43 = v18;
            uint64_t v45 = v10;
            uint64_t v39 = v20;
            uint64_t v41 = v19;
            float64x2_t v35 = v27;
            float64x2_t v37 = v26;
            int v31 = __cxa_guard_acquire(qword_1004D2D80);
            float64x2_t v27 = v35;
            float64x2_t v26 = v37;
            *(void *)&long long v32 = 0x3F0000003F000000;
            *((void *)&v32 + 1) = 0x3F0000003F000000;
            uint64_t v21 = (int8x16_t *)&unk_1004D2000;
            uint64_t v20 = v39;
            uint64_t v19 = v41;
            uint64_t v18 = v43;
            uint64_t v10 = v45;
            int v7 = v47;
            if (v31)
            {
              xmmword_1004D2D70 = v32;
              __cxa_guard_release(qword_1004D2D80);
              float64x2_t v27 = v35;
              float64x2_t v26 = v37;
              uint64_t v21 = (int8x16_t *)&unk_1004D2000;
              uint64_t v20 = v39;
              uint64_t v19 = v41;
              uint64_t v18 = v43;
              uint64_t v10 = v45;
              int v7 = v47;
            }
          }
          int8x16_t v28 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27), v26);
          *v25++ = vcvtq_s32_f32(vaddq_f32((float32x4_t)v28, (float32x4_t)vorrq_s8(vandq_s8(v21[213], v28), (int8x16_t)xmmword_1004D2D70)));
          v23 += 0x400000000;
          v22 += 4;
          v24 += 2;
        }
        while (v13 >= v22);
        if ((int)v10 > v22)
        {
          uint64_t v33 = v23 >> 32;
          do
          {
            v8->i32[v33] = (uint64_t)rint(v9->f64[v33]);
            ++v33;
          }
          while (v10 != v33);
        }
        uint64_t v8 = (int32x4_t *)((char *)v8 + v18);
        uint64_t v19 = (float64x2_t *)((char *)v19 + v20);
        uint64_t v9 = (float64x2_t *)((char *)v9 + v20);
        --v7;
      }
      while (v7);
    }
    else if ((int)v10 >= 1)
    {
      f64 = a1[1].f64;
      uint64_t v15 = 8 * v11;
      uint64_t v16 = &a5->i32[2];
      uint64_t v17 = 4 * v12;
      do
      {
        *(v16 - 2) = (uint64_t)rint(*(f64 - 2));
        if (v10 != 1)
        {
          *(v16 - 1) = (uint64_t)rint(*(f64 - 1));
          if (v10 != 2) {
            *uint64_t v16 = (uint64_t)rint(*f64);
          }
        }
        f64 = (double *)((char *)f64 + v15);
        uint64_t v16 = (__int32 *)((char *)v16 + v17);
        --v7;
      }
      while (v7);
    }
  }
}

unint64_t sub_10023C750(unint64_t result, uint64_t a2, float a3, double a4, double a5, double a6, __n128 a7, int8x16_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unsigned int *a13)
{
  unsigned int v13 = a13[1];
  if (!v13) {
    return result;
  }
  unint64_t v14 = result;
  unint64_t v15 = *a13;
  unint64_t v16 = a12 >> 2;
  unsigned int v17 = v13 - 1;
  if ((int)v15 >= 8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = (v15 - 4);
    unint64_t v22 = a12 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v23 = (int8x16_t *)(a11 + 16);
    uint64_t v24 = 4 * v16;
    uint64_t v25 = a11 + 12;
    uint64_t v26 = a11;
    unint64_t v27 = result;
    while (1)
    {
      result = 0;
      unint64_t v28 = 0;
      unsigned int v29 = v17;
      long long v30 = v23;
      do
      {
        uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)(v27 + v28));
        float32x4_t v32 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v31.i8));
        int8x16_t v33 = (int8x16_t)vcvtq_f32_u32(vmovl_high_u16(v31));
        v30[-1] = (int8x16_t)v32;
        int8x16_t *v30 = v33;
        v28 += 8;
        result += 0x800000000;
        v30 += 2;
      }
      while (v28 <= (v15 - 8));
      if ((int)v21 >= (int)v28) {
        break;
      }
      if ((int)v28 < (int)v15) {
        goto LABEL_20;
      }
LABEL_11:
      v27 += a2;
      v26 += v24;
      --v17;
      ++v20;
      uint64_t v23 = (int8x16_t *)((char *)v23 + v24);
      v25 += v24;
      if (!v29) {
        return result;
      }
    }
    result = 0;
    uint64_t v34 = 4 * (int)v28;
    float64x2_t v35 = (float *)(v25 + v34);
    unint64_t v36 = v27 + (int)v28;
    do
    {
      v33.i8[0] = *(unsigned char *)(v36 + result);
      float v37 = (float)v33.u32[0];
      v32.i8[0] = *(unsigned char *)(v36 + result + 1);
      float v38 = (float)v32.u32[0];
      *(v35 - 3) = v37;
      uint64_t v39 = v26 + v34 + 4 * result;
      *(float *)(v39 + 4) = v38;
      LOBYTE(v37) = *(unsigned char *)(v36 + result + 2);
      *(float *)v33.i32 = (float)LODWORD(v37);
      LOBYTE(v38) = *(unsigned char *)(v36 + result + 3);
      v32.f32[0] = (float)LODWORD(v38);
      *(_DWORD *)(v39 + 8) = v33.i32[0];
      *float64x2_t v35 = v32.f32[0];
      v35 += 4;
      result += 4;
    }
    while ((uint64_t)((int)v28 + result) <= v21);
    LODWORD(v28) = v28 + result;
    if ((int)v28 >= (int)v15) {
      goto LABEL_11;
    }
LABEL_20:
    unint64_t v40 = (int)v28;
    unint64_t v41 = v15 - (int)v28;
    if (v41 < 8)
    {
      result = v40;
      goto LABEL_36;
    }
    if (v26 + 4 * v40 < v14 + v15 + v20 * a2 && v27 + v40 < a11 + 4 * v15 + v22 * v20)
    {
      result = v40;
      goto LABEL_36;
    }
    if (v41 >= 0x10)
    {
      unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF0;
      result = 4 * v40;
      unint64_t v48 = v40;
      unint64_t v49 = v41 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v50 = *(int8x16_t *)(v27 + v48);
        uint32x4_t v51 = (uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_1004048C0);
        uint32x4_t v52 = (uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_1004048B0);
        uint32x4_t v53 = (uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_1004048A0);
        int8x16_t v33 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_100404890));
        uint64_t v54 = v26 + result;
        *(float32x4_t *)(v54 + 32) = vcvtq_f32_u32(v52);
        *(float32x4_t *)(v54 + 48) = vcvtq_f32_u32(v51);
        *(int8x16_t *)uint64_t v54 = v33;
        *(float32x4_t *)(v54 + 16) = vcvtq_f32_u32(v53);
        v48 += 16;
        result += 64;
        v49 -= 16;
      }
      while (v49);
      if (v41 == v42) {
        goto LABEL_11;
      }
      if ((v41 & 8) == 0)
      {
        result = v42 + v40;
        do
        {
LABEL_36:
          v33.i8[0] = *(unsigned char *)(v27 + result);
          *(float *)v33.i32 = (float)v33.u32[0];
          *(_DWORD *)(v26 + 4 * result++) = v33.i32[0];
        }
        while (v15 != result);
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v42 = 0;
    }
    result = (v41 & 0xFFFFFFFFFFFFFFF8) + v40;
    unint64_t v43 = v42 - (v41 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v44 = v42 + v40;
    uint64_t v45 = 4 * v44;
    do
    {
      v33.i64[0] = *(void *)(v27 + v44);
      uint32x4_t v46 = (uint32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_1004048A0);
      int8x16_t v33 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_100404890));
      uint64_t v47 = v26 + v45;
      *(int8x16_t *)uint64_t v47 = v33;
      *(float32x4_t *)(v47 + 16) = vcvtq_f32_u32(v46);
      v44 += 8;
      v45 += 32;
      v43 += 8;
    }
    while (v43);
    if (v41 == (v41 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
  if ((int)v15 >= 4)
  {
    uint64_t v55 = 0;
    unint64_t v56 = (v15 - 4);
    uint64_t v57 = (v56 & 0xFFFFFFFC) + 4;
    unint64_t v58 = a12 & 0xFFFFFFFFFFFFFFFCLL;
    if ((unint64_t)(v56 & 0xFFFFFFFC) + 5 <= v15) {
      uint64_t v59 = *a13;
    }
    else {
      uint64_t v59 = (v56 & 0xFFFFFFFC) + 5;
    }
    unint64_t v60 = v59 - (v56 & 0xFFFFFFFC) - 4;
    uint64_t v61 = 16 * (v56 >> 2) + 16;
    uint64_t v62 = (v56 >> 2) + 1;
    uint64_t v63 = 4 * v16;
    unint64_t v64 = result + v57;
    uint64_t v65 = a11 + v61;
    uint64_t v66 = a11 + ((4 * (v15 - 4)) & 0x3FFFFFFF0) + 16;
    uint64_t v67 = a11 + 4 * v59;
    unint64_t v68 = result + v59;
    unint64_t v69 = result + v57;
    unint64_t v70 = (float *)a11;
    while (1)
    {
      unsigned int v71 = v17;
      unint64_t v72 = v58 * v55;
      unint64_t v73 = v64 + v55 * a2;
      if (v56 < 0x3C) {
        break;
      }
      if ((unint64_t)v70 < v73 && v14 < a11 + v61 + v72) {
        break;
      }
      uint64_t v75 = a11;
      uint64_t v76 = v62 & 0x7FFFFFF0;
      float32x4x4_t v77 = v70;
      result = v14;
      do
      {
        *(int8x16x4_t *)(&a8 - 1) = vld4q_s8((const char *)result);
        result += 64;
        v101.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_100404890));
        v101.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_100404890));
        v101.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_100404890));
        v101.val[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_100404890));
        uint64_t v81 = v77;
        vst4q_f32(v81, v101);
        v81 += 16;
        v101.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_1004048C0));
        v102.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_1004048B0));
        v103.val[0] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_1004048A0));
        v103.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1004048A0));
        v103.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_1004048A0));
        v103.val[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_1004048A0));
        vst4q_f32(v81, v103);
        v102.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1004048B0));
        v102.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_1004048B0));
        v102.val[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v80, (int8x16_t)xmmword_1004048B0));
        unint64_t v82 = v77 + 32;
        vst4q_f32(v82, v102);
        v101.val[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1004048C0));
        v101.val[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_1004048C0));
        a7 = (__n128)vqtbl1q_s8(v80, (int8x16_t)xmmword_1004048C0);
        v101.val[3] = vcvtq_f32_u32((uint32x4_t)a7);
        int8x8_t v83 = v77 + 48;
        vst4q_f32(v83, v101);
        v77 += 64;
        v76 -= 16;
      }
      while (v76);
      unint64_t v84 = 4 * (v62 & 0x7FFFFFF0);
      a11 = v75;
      if (v62 != (v62 & 0x7FFFFFF0)) {
        goto LABEL_54;
      }
LABEL_56:
      if ((int)v15 > (int)v84)
      {
        unint64_t v87 = (v56 & 0xFFFFFFFC) + 4;
        if (v60 >= 8)
        {
          if (v66 + v72 >= v68 + v55 * a2
            || (result = v67 + v72, unint64_t v87 = (v56 & 0xFFFFFFFC) + 4, v73 >= v67 + v72))
          {
            if (v60 >= 0x10)
            {
              uint64_t v94 = 16 * (v56 >> 2) + 16;
              result = (v56 & 0xFFFFFFFC) + 4;
              unint64_t v95 = v60 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int8x16_t v96 = *(int8x16_t *)(v14 + result);
                uint32x4_t v97 = (uint32x4_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_1004048C0);
                uint32x4_t v98 = (uint32x4_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_1004048B0);
                uint32x4_t v99 = (uint32x4_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_1004048A0);
                a7 = (__n128)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_100404890));
                uint64_t v100 = (uint64_t)v70 + v94;
                *(float32x4_t *)(v100 + 32) = vcvtq_f32_u32(v98);
                *(float32x4_t *)(v100 + 48) = vcvtq_f32_u32(v97);
                a8 = (int8x16_t)vcvtq_f32_u32(v99);
                *(__n128 *)uint64_t v100 = a7;
                *(int8x16_t *)(v100 + 16) = a8;
                result += 16;
                v94 += 64;
                v95 -= 16;
              }
              while (v95);
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFF0)) {
                goto LABEL_42;
              }
              unint64_t v88 = v60 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v87 = v57 + (v60 & 0xFFFFFFFFFFFFFFF0);
              if ((v60 & 8) != 0) {
                goto LABEL_62;
              }
            }
            else
            {
              unint64_t v88 = 0;
LABEL_62:
              unint64_t v89 = v88 - (v60 & 0xFFFFFFFFFFFFFFF8);
              int16x8_t v90 = (unint64_t *)(v69 + v88);
              int16x8_t v91 = (__n128 *)(v65 + 4 * v88);
              do
              {
                unint64_t v92 = *v90++;
                a7.n128_u64[0] = v92;
                uint32x4_t v93 = (uint32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_1004048A0);
                a7 = (__n128)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a7, (int8x16_t)xmmword_100404890));
                a8 = (int8x16_t)vcvtq_f32_u32(v93);
                *int16x8_t v91 = a7;
                v91[1] = (__n128)a8;
                v91 += 2;
                v89 += 8;
              }
              while (v89);
              unint64_t v87 = v57 + (v60 & 0xFFFFFFFFFFFFFFF8);
              result = v60 & 0xFFFFFFFFFFFFFFF8;
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_42;
              }
            }
          }
        }
        do
        {
          a7.n128_u8[0] = *(unsigned char *)(v14 + v87);
          a7.n128_f32[0] = (float)a7.n128_u32[0];
          v70[v87++] = a7.n128_f32[0];
        }
        while (v87 < v15);
      }
LABEL_42:
      v14 += a2;
      unint64_t v70 = (float *)((char *)v70 + v63);
      unsigned int v17 = v71 - 1;
      ++v55;
      v69 += a2;
      v65 += v63;
      if (!v71) {
        return result;
      }
    }
    unint64_t v84 = 0;
LABEL_54:
    result = (unint64_t)&v70[v84];
    do
    {
      a7.n128_u8[0] = *(unsigned char *)(v14 + v84);
      float v85 = (float)a7.n128_u32[0];
      a8.i8[0] = *(unsigned char *)(v14 + v84 + 1);
      float v86 = (float)a8.u32[0];
      *(float *)result = v85;
      *(float *)(result + 4) = v86;
      LOBYTE(v85) = *(unsigned char *)(v14 + v84 + 2);
      a7.n128_f32[0] = (float)LODWORD(v85);
      LOBYTE(v86) = *(unsigned char *)(v14 + v84 + 3);
      *(float *)a8.i32 = (float)LODWORD(v86);
      *(_DWORD *)(result + 8) = a7.n128_u32[0];
      *(_DWORD *)(result + 12) = a8.i32[0];
      v84 += 4;
      result += 16;
    }
    while (v84 <= v56);
    goto LABEL_56;
  }
  if ((int)v15 >= 1)
  {
    uint64_t v18 = (unsigned char *)(result + 2);
    uint64_t v19 = (float *)(a11 + 8);
    do
    {
      LOBYTE(a3) = *(v18 - 2);
      a3 = (float)LODWORD(a3);
      *(v19 - 2) = a3;
      if (v15 != 1)
      {
        LOBYTE(a3) = *(v18 - 1);
        a3 = (float)LODWORD(a3);
        *(v19 - 1) = a3;
        if (v15 != 2)
        {
          LOBYTE(a3) = *v18;
          a3 = (float)LODWORD(a3);
          *uint64_t v19 = a3;
        }
      }
      v18 += a2;
      v19 += v16;
      --v13;
    }
    while (v13);
  }
  return result;
}

unint64_t sub_10023CD74(unint64_t result, uint64_t a2, __n128 a3, int32x4_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7, unint64_t a8, unsigned int *a9)
{
  unsigned int v9 = a9[1];
  if (!v9) {
    return result;
  }
  uint64_t v10 = (float *)a7;
  unint64_t v11 = result;
  unint64_t v12 = *a9;
  unint64_t v13 = a8 >> 2;
  result = v9 - 1;
  if ((int)v12 >= 8)
  {
    uint64_t v16 = 0;
    uint64_t v17 = (v12 - 4);
    unint64_t v18 = a8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v19 = a7 + 1;
    uint64_t v20 = 4 * v13;
    uint64_t v21 = (uint64_t)&a7->i64[1] + 4;
    unint64_t v22 = a7;
    unint64_t v23 = v11;
    while (1)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      int v26 = result;
      unint64_t v27 = v19;
      do
      {
        int16x8_t v28 = vmovl_s8(*(int8x8_t *)(v23 + v25));
        float32x4_t v29 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v28.i8));
        float32x4_t v30 = vcvtq_f32_s32(vmovl_high_s16(v28));
        v27[-1] = v29;
        *unint64_t v27 = v30;
        v25 += 8;
        v24 += 0x800000000;
        v27 += 2;
      }
      while (v25 <= (v12 - 8));
      if ((int)v17 >= (int)v25) {
        break;
      }
      if ((int)v25 < (int)v12) {
        goto LABEL_20;
      }
LABEL_11:
      v23 += a2;
      unint64_t v22 = (float32x4_t *)((char *)v22 + v20);
      result = (v26 - 1);
      ++v16;
      uint64_t v19 = (float32x4_t *)((char *)v19 + v20);
      v21 += v20;
      if (!v26) {
        return result;
      }
    }
    unint64_t v31 = 0;
    uint64_t v32 = 4 * (int)v25;
    int8x16_t v33 = (_DWORD *)(v21 + v32);
    unint64_t v34 = v23 + (int)v25;
    do
    {
      v30.i8[0] = *(unsigned char *)(v34 + v31);
      int8x8_t v35 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v30.f32)).u64[0];
      *(float *)v35.i32 = (float)v35.i32[0];
      v29.i8[0] = *(unsigned char *)(v34 + v31 + 1);
      int8x8_t v36 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v29.f32)).u64[0];
      *(float *)v36.i32 = (float)v36.i32[0];
      *(v33 - 3) = v35.i32[0];
      uint64_t v37 = (uint64_t)&v22[v31 / 4] + v32;
      *(_DWORD *)(v37 + 4) = v36.i32[0];
      v35.i8[0] = *(unsigned char *)(v34 + v31 + 2);
      v30.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v35)).u64[0];
      v30.f32[0] = (float)v30.i32[0];
      v36.i8[0] = *(unsigned char *)(v34 + v31 + 3);
      v29.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v36)).u64[0];
      v29.f32[0] = (float)v29.i32[0];
      *(_DWORD *)(v37 + 8) = v30.i32[0];
      *int8x16_t v33 = v29.i32[0];
      v33 += 4;
      v31 += 4;
    }
    while ((uint64_t)((int)v25 + v31) <= v17);
    LODWORD(v25) = v25 + v31;
    if ((int)v25 >= (int)v12) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v38 = (int)v25;
    unint64_t v39 = v12 - (int)v25;
    if (v39 < 8)
    {
      uint64_t v40 = v38;
      goto LABEL_36;
    }
    if ((unint64_t)v22->u64 + 4 * v38 < v11 + v12 + v16 * a2
      && v23 + v38 < (unint64_t)&v10[v12] + v18 * v16)
    {
      uint64_t v40 = v38;
      goto LABEL_36;
    }
    if (v39 >= 0x10)
    {
      unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v48 = 4 * v38;
      uint64_t v49 = v38;
      unint64_t v50 = v39 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v51 = *(int8x16_t *)(v23 + v49);
        int8x8_t v52 = (int8x8_t)vextq_s8(v51, v51, 8uLL).u64[0];
        float32x4_t v53 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v52, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
        uint64_t v54 = (float32x4_t *)((char *)v22 + v48);
        *uint64_t v54 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
        v54[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
        float32x4_t v30 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v52, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
        v54[2] = v53;
        v54[3] = v30;
        v49 += 16;
        v48 += 64;
        v50 -= 16;
      }
      while (v50);
      if (v39 == v41) {
        goto LABEL_11;
      }
      if ((v39 & 8) == 0)
      {
        uint64_t v40 = v41 + v38;
        do
        {
LABEL_36:
          v30.i8[0] = *(unsigned char *)(v23 + v40);
          v30.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v30.f32)).u64[0];
          v30.f32[0] = (float)v30.i32[0];
          v22->i32[v40++] = v30.i32[0];
        }
        while (v12 != v40);
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v41 = 0;
    }
    uint64_t v40 = (v39 & 0xFFFFFFFFFFFFFFF8) + v38;
    unint64_t v42 = v41 - (v39 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v43 = v41 + v38;
    uint64_t v44 = 4 * v43;
    do
    {
      int8x8_t v45 = *(int8x8_t *)(v23 + v43);
      float32x4_t v46 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v45, v45), 8uLL), 8uLL)));
      float32x4_t v30 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v45, v45), 8uLL), 8uLL)));
      uint64_t v47 = (float32x4_t *)((char *)v22 + v44);
      *uint64_t v47 = v46;
      v47[1] = v30;
      v43 += 8;
      v44 += 32;
      v42 += 8;
    }
    while (v42);
    if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
  if ((int)v12 >= 4)
  {
    uint64_t v55 = 0;
    unint64_t v56 = (v12 - 4);
    uint64_t v57 = (v56 & 0xFFFFFFFC) + 4;
    unint64_t v58 = a8 & 0xFFFFFFFFFFFFFFFCLL;
    if ((unint64_t)(v56 & 0xFFFFFFFC) + 5 <= v12) {
      uint64_t v59 = *a9;
    }
    else {
      uint64_t v59 = (v56 & 0xFFFFFFFC) + 5;
    }
    unint64_t v60 = v59 - (v56 & 0xFFFFFFFC) - 4;
    uint64_t v61 = 16 * (v56 >> 2) + 16;
    uint64_t v62 = (v56 >> 2) + 1;
    uint64_t v63 = 4 * v13;
    unint64_t v64 = v11 + v57;
    uint64_t v65 = (uint64_t)v10 + v61;
    uint64_t v66 = (uint64_t)v10 + ((4 * (v12 - 4)) & 0x3FFFFFFF0) + 16;
    uint64_t v67 = &v10[v59];
    unint64_t v68 = v11 + v59;
    unint64_t v69 = v11 + v57;
    unint64_t v70 = v10;
    while (1)
    {
      int v71 = result;
      unint64_t v72 = v58 * v55;
      unint64_t v73 = v64 + v55 * a2;
      if (v56 < 0x3C) {
        break;
      }
      if ((unint64_t)v70 < v73 && v11 < (unint64_t)v10 + v61 + v72) {
        break;
      }
      uint64_t v75 = v10;
      uint64_t v76 = v62 & 0x7FFFFFF0;
      float32x4x4_t v77 = v70;
      int8x16_t v78 = (const char *)v11;
      do
      {
        int8x16x4_t v106 = vld4q_s8(v78);
        v78 += 64;
        int8x8_t v79 = (int8x8_t)vextq_s8(v106.val[0], v106.val[0], 8uLL).u64[0];
        a3 = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v79, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        int8x8_t v80 = (int8x8_t)vextq_s8(v106.val[1], v106.val[1], 8uLL).u64[0];
        a4 = (int32x4_t)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v80, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        int8x8_t v81 = (int8x8_t)vextq_s8(v106.val[2], v106.val[2], 8uLL).u64[0];
        float32x4_t v82 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v81, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v107.val[0] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v79, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v107.val[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v80, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v107.val[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v81, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v108.val[0] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v106.val[0].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v108.val[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v106.val[1].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v108.val[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v106.val[2].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v108.val[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v106.val[3].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v109.val[0] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v106.val[0].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v109.val[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v106.val[1].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        v109.val[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v106.val[2].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        int8x8_t v83 = (int8x8_t)vextq_s8(v106.val[3], v106.val[3], 8uLL).u64[0];
        v109.val[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v106.val[3].i8, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        unint64_t v84 = v77;
        vst4q_f32(v84, v109);
        v84 += 16;
        vst4q_f32(v84, v108);
        v107.val[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v83, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        float v85 = v77 + 32;
        vst4q_f32(v85, v107);
        float32x4_t v86 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v83, (int8x8_t)a3.n128_u64[0]), 8uLL), 8uLL)));
        unint64_t v87 = v77 + 48;
        vst4q_f32(v87, *(float32x4x4_t *)a3.n128_u64);
        v77 += 64;
        v76 -= 16;
      }
      while (v76);
      unint64_t v88 = 4 * (v62 & 0x7FFFFFF0);
      uint64_t v10 = v75;
      if (v62 != (v62 & 0x7FFFFFF0)) {
        goto LABEL_54;
      }
LABEL_56:
      if ((int)v12 > (int)v88)
      {
        unint64_t v92 = (v56 & 0xFFFFFFFC) + 4;
        if (v60 >= 8)
        {
          if (v66 + v72 >= v68 + v55 * a2
            || (unint64_t v92 = (v56 & 0xFFFFFFFC) + 4, v73 >= (unint64_t)v67 + v72))
          {
            if (v60 >= 0x10)
            {
              uint64_t v99 = 16 * (v56 >> 2) + 16;
              uint64_t v100 = (v56 & 0xFFFFFFFC) + 4;
              unint64_t v101 = v60 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int8x16_t v102 = *(int8x16_t *)(v11 + v100);
                int8x8_t v103 = (int8x8_t)vextq_s8(v102, v102, 8uLL).u64[0];
                float32x4_t v104 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v103, *(int8x8_t *)v102.i8), 8uLL), 8uLL)));
                a4 = vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v103, *(int8x8_t *)v102.i8), 8uLL), 8uLL));
                uint64_t v105 = (uint64_t)v70 + v99;
                *(float32x4_t *)uint64_t v105 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v102.i8, *(int8x8_t *)v102.i8), 8uLL), 8uLL)));
                *(float32x4_t *)(v105 + 16) = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v102.i8, *(int8x8_t *)v102.i8), 8uLL), 8uLL)));
                a3 = (__n128)vcvtq_f32_s32(a4);
                *(float32x4_t *)(v105 + 32) = v104;
                *(__n128 *)(v105 + 48) = a3;
                v100 += 16;
                v99 += 64;
                v101 -= 16;
              }
              while (v101);
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFF0)) {
                goto LABEL_42;
              }
              unint64_t v93 = v60 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v92 = v57 + (v60 & 0xFFFFFFFFFFFFFFF0);
              if ((v60 & 8) != 0) {
                goto LABEL_62;
              }
            }
            else
            {
              unint64_t v93 = 0;
LABEL_62:
              unint64_t v94 = v93 - (v60 & 0xFFFFFFFFFFFFFFF8);
              unint64_t v95 = (int8x8_t *)(v69 + v93);
              int8x16_t v96 = (__n128 *)(v65 + 4 * v93);
              do
              {
                int8x8_t v97 = *v95++;
                int8x8_t v98 = v97;
                a4 = (int32x4_t)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v98, v98), 8uLL), 8uLL)));
                a3 = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v98, v98), 8uLL), 8uLL)));
                *int8x16_t v96 = (__n128)a4;
                v96[1] = a3;
                v96 += 2;
                v94 += 8;
              }
              while (v94);
              unint64_t v92 = v57 + (v60 & 0xFFFFFFFFFFFFFFF8);
              if (v60 == (v60 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_42;
              }
            }
          }
        }
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v11 + v92);
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = (float)a3.n128_i32[0];
          v70[v92++] = a3.n128_f32[0];
        }
        while (v92 < v12);
      }
LABEL_42:
      v11 += a2;
      unint64_t v70 = (float *)((char *)v70 + v63);
      result = (v71 - 1);
      ++v55;
      v69 += a2;
      v65 += v63;
      if (!v71) {
        return result;
      }
    }
    unint64_t v88 = 0;
LABEL_54:
    unint64_t v89 = &v70[v88];
    do
    {
      a3.n128_u8[0] = *(unsigned char *)(v11 + v88);
      int8x8_t v90 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
      *(float *)v90.i32 = (float)v90.i32[0];
      a4.i8[0] = *(unsigned char *)(v11 + v88 + 1);
      int8x8_t v91 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a4.i8)).u64[0];
      *(float *)v91.i32 = (float)v91.i32[0];
      *unint64_t v89 = *(float *)v90.i32;
      v89[1] = *(float *)v91.i32;
      v90.i8[0] = *(unsigned char *)(v11 + v88 + 2);
      a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v90)).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0];
      v91.i8[0] = *(unsigned char *)(v11 + v88 + 3);
      a4.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v91)).u64[0];
      *(float *)a4.i32 = (float)a4.i32[0];
      v89[2] = a3.n128_f32[0];
      v89[3] = *(float *)a4.i32;
      v88 += 4;
      v89 += 4;
    }
    while (v88 <= v56);
    goto LABEL_56;
  }
  if ((int)v12 >= 1)
  {
    unint64_t v14 = (unsigned __int8 *)(v11 + 2);
    unint64_t v15 = &a7->i32[2];
    do
    {
      a3.n128_u8[0] = *(v14 - 2);
      a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
      a3.n128_f32[0] = (float)a3.n128_i32[0];
      *(v15 - 2) = a3.n128_u32[0];
      if (v12 != 1)
      {
        a3.n128_u8[0] = *(v14 - 1);
        a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
        a3.n128_f32[0] = (float)a3.n128_i32[0];
        *(v15 - 1) = a3.n128_u32[0];
        if (v12 != 2)
        {
          a3.n128_u8[0] = *v14;
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = (float)a3.n128_i32[0];
          *unint64_t v15 = a3.n128_u32[0];
        }
      }
      v14 += a2;
      v15 += v13;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint16x8_t *sub_10023D52C(uint16x8_t *result, unint64_t a2, uint32x4_t a3, uint32x4_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7, unint64_t a8, unsigned int *a9)
{
  unsigned int v9 = a9[1];
  if (!v9) {
    return result;
  }
  unint64_t v10 = *a9;
  unint64_t v11 = a2 >> 1;
  unint64_t v12 = a8 >> 2;
  unsigned int v13 = v9 - 1;
  if ((int)v10 >= 8)
  {
    uint64_t v16 = (v10 - 4);
    uint64_t v17 = a7 + 1;
    uint64_t v18 = 4 * v12;
    uint64_t v19 = 2 * v11;
    uint64_t v20 = result + 1;
    while (1)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      unsigned int v23 = v13;
      uint64_t v24 = result;
      unint64_t v25 = v17;
      do
      {
        uint16x8_t v26 = *v24++;
        float32x4_t v27 = vcvtq_f32_u32(vmovl_high_u16(v26));
        v25[-1] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v26.i8));
        *unint64_t v25 = v27;
        v22 += 8;
        v21 += 0x800000000;
        v25 += 2;
      }
      while (v22 <= (v10 - 8));
      if ((int)v16 >= (int)v22)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 4 * (int)v22;
        uint64_t v30 = 2 * (int)v22;
        do
        {
          float32x4_t v27 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&result->i8[v30]));
          *(float32x4_t *)((char *)a7 + v29) = v27;
          v28 += 4;
          v29 += 16;
          v30 += 8;
        }
        while ((int)v22 + v28 <= v16);
        LODWORD(v22) = v22 + v28;
        if ((int)v22 < (int)v10)
        {
LABEL_20:
          uint64_t v31 = (int)v22;
          unint64_t v32 = v10 - (int)v22;
          unint64_t v22 = (int)v22;
          if (v32 < 0x10) {
            goto LABEL_47;
          }
          unint64_t v22 = (v32 & 0xFFFFFFFFFFFFFFF0) + (int)v22;
          int8x16_t v33 = (float32x4_t *)((char *)a7 + 4 * v31);
          unint64_t v34 = (uint16x4_t *)((char *)v20 + 2 * v31);
          unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            uint16x8_t v36 = *(uint16x8_t *)v34[-2].i8;
            float32x4_t v37 = vcvtq_f32_u32(vmovl_u16(*v34));
            uint32x4_t v38 = vmovl_high_u16(*(uint16x8_t *)v34->i8);
            *int8x16_t v33 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v36.i8));
            v33[1] = vcvtq_f32_u32(vmovl_high_u16(v36));
            float32x4_t v27 = vcvtq_f32_u32(v38);
            v33[2] = v37;
            v33[3] = v27;
            v33 += 4;
            v34 += 4;
            v35 -= 16;
          }
          while (v35);
          if (v32 != (v32 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_47:
            do
            {
              v27.i16[0] = result->i16[v22];
              v27.f32[0] = (float)v27.u32[0];
              a7->i32[v22++] = v27.i32[0];
            }
            while (v10 != v22);
          }
        }
      }
      else if ((int)v22 < (int)v10)
      {
        goto LABEL_20;
      }
      unsigned int v13 = v23 - 1;
      uint64_t v17 = (float32x4_t *)((char *)v17 + v18);
      result = (uint16x8_t *)((char *)result + v19);
      a7 = (float32x4_t *)((char *)a7 + v18);
      uint64_t v20 = (uint16x8_t *)((char *)v20 + v19);
      if (!v23) {
        return result;
      }
    }
  }
  if ((int)v10 >= 4)
  {
    unint64_t v39 = (v10 - 4);
    if ((unint64_t)(v39 & 0xFFFFFFFC) + 5 <= v10) {
      uint64_t v40 = v10;
    }
    else {
      uint64_t v40 = (v39 & 0xFFFFFFFC) + 5;
    }
    uint64_t v41 = (v39 >> 2) + 1;
    unint64_t v42 = v40 - (v39 & 0xFFFFFFFC) - 4;
    uint64_t v43 = 2 * v11;
    uint64_t v44 = 4 * v12;
    uint64_t v45 = (uint64_t)&a7[(v39 >> 2) + 3];
    uint64_t v46 = (uint64_t)&result[1].i64[(v39 >> 2) + 1];
    while (1)
    {
      unsigned int v47 = v13;
      if (v39 >= 0x1C)
      {
        uint64_t v49 = v41 & 0x7FFFFFF8;
        unint64_t v50 = (float *)a7;
        int8x16_t v51 = (const __int16 *)result;
        do
        {
          *(int16x8x4_t *)(&a4 - 1) = vld4q_s16(v51);
          v51 += 32;
          v68.val[0] = vcvtq_f32_u32(vmovl_high_u16(v52));
          v68.val[1] = vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)a4));
          v68.val[2] = vcvtq_f32_u32(vmovl_high_u16(v53));
          v68.val[3] = vcvtq_f32_u32(vmovl_high_u16(v54));
          v69.val[0] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v52.i8));
          v69.val[1] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a4.i8));
          v69.val[2] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v53.i8));
          a3 = vmovl_u16(*(uint16x4_t *)v54.i8);
          v69.val[3] = vcvtq_f32_u32(a3);
          uint64_t v55 = v50 + 32;
          vst4q_f32(v50, v69);
          unint64_t v56 = v50 + 16;
          vst4q_f32(v56, v68);
          unint64_t v50 = v55;
          v49 -= 8;
        }
        while (v49);
        unint64_t v48 = 4 * (v41 & 0x7FFFFFF8);
        if (v41 == (v41 & 0x7FFFFFF8)) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v48 = 0;
      }
      uint64_t v57 = 2 * v48 + 6;
      unint64_t v58 = &a7[v48 / 4];
      do
      {
        a3.i16[0] = *(__int16 *)((char *)&result->i16[-3] + v57);
        float v59 = (float)a3.u32[0];
        unint64_t v60 = &result->i64[v48 / 4];
        a4.i16[0] = *((_WORD *)v60 + 1);
        float v61 = (float)a4.u32[0];
        v58->f32[0] = v59;
        v58->f32[1] = v61;
        LOWORD(v59) = *((_WORD *)v60 + 2);
        *(float *)a3.i32 = (float)LODWORD(v59);
        LOWORD(v61) = *(__int16 *)((char *)result->i16 + v57);
        *(float *)a4.i32 = (float)LODWORD(v61);
        v58->i32[2] = a3.i32[0];
        v58->i32[3] = a4.i32[0];
        v48 += 4;
        v57 += 8;
        ++v58;
      }
      while (v48 <= v39);
LABEL_38:
      if ((int)v10 > (int)v48)
      {
        unint64_t v62 = (v39 & 0xFFFFFFFC) + 4;
        if (v42 < 0x10) {
          goto LABEL_48;
        }
        uint64_t v63 = (uint16x4_t *)v46;
        uint64_t v64 = v45;
        unint64_t v65 = v42 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          uint16x8_t v66 = *(uint16x8_t *)v63[-2].i8;
          float32x4_t v67 = vcvtq_f32_u32(vmovl_u16(*v63));
          a4 = vmovl_high_u16(*(uint16x8_t *)v63->i8);
          *(float32x4_t *)(v64 - 32) = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v66.i8));
          *(float32x4_t *)(v64 - 16) = vcvtq_f32_u32(vmovl_high_u16(v66));
          a3 = (uint32x4_t)vcvtq_f32_u32(a4);
          *(float32x4_t *)uint64_t v64 = v67;
          *(uint32x4_t *)(v64 + 16) = a3;
          v64 += 64;
          v63 += 4;
          v65 -= 16;
        }
        while (v65);
        unint64_t v62 = (v39 & 0xFFFFFFFC) + 4 + (v42 & 0xFFFFFFFFFFFFFFF0);
        if (v42 != (v42 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_48:
          do
          {
            a3.i16[0] = result->i16[v62];
            *(float *)a3.i32 = (float)a3.u32[0];
            a7->i32[v62++] = a3.i32[0];
          }
          while (v62 < v10);
        }
      }
      unsigned int v13 = v47 - 1;
      result = (uint16x8_t *)((char *)result + v43);
      a7 = (float32x4_t *)((char *)a7 + v44);
      v45 += v44;
      v46 += v43;
      if (!v47) {
        return result;
      }
    }
  }
  if ((int)v10 >= 1)
  {
    unint64_t v14 = &result->u16[2];
    unint64_t v15 = &a7->i32[2];
    do
    {
      a3.i16[0] = *(v14 - 2);
      *(float *)a3.i32 = (float)a3.u32[0];
      *(v15 - 2) = a3.i32[0];
      if (v10 != 1)
      {
        a3.i16[0] = *(v14 - 1);
        *(float *)a3.i32 = (float)a3.u32[0];
        *(v15 - 1) = a3.i32[0];
        if (v10 != 2)
        {
          a3.i16[0] = *v14;
          *(float *)a3.i32 = (float)a3.u32[0];
          *unint64_t v15 = a3.i32[0];
        }
      }
      v14 += v11;
      v15 += v12;
      --v9;
    }
    while (v9);
  }
  return result;
}

int16x8_t *sub_10023D8E8(int16x8_t *result, unint64_t a2, int32x4_t a3, int32x4_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7, unint64_t a8, unsigned int *a9)
{
  unsigned int v9 = a9[1];
  if (!v9) {
    return result;
  }
  unint64_t v10 = *a9;
  unint64_t v11 = a2 >> 1;
  unint64_t v12 = a8 >> 2;
  unsigned int v13 = v9 - 1;
  if ((int)v10 >= 8)
  {
    uint64_t v16 = (v10 - 4);
    uint64_t v17 = a7 + 1;
    uint64_t v18 = 4 * v12;
    uint64_t v19 = 2 * v11;
    uint64_t v20 = result + 1;
    while (1)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      unsigned int v23 = v13;
      uint64_t v24 = result;
      unint64_t v25 = v17;
      do
      {
        int16x8_t v26 = *v24++;
        float32x4_t v27 = vcvtq_f32_s32(vmovl_high_s16(v26));
        v25[-1] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v26.i8));
        *unint64_t v25 = v27;
        v22 += 8;
        v21 += 0x800000000;
        v25 += 2;
      }
      while (v22 <= (v10 - 8));
      if ((int)v16 >= (int)v22)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 4 * (int)v22;
        uint64_t v30 = 2 * (int)v22;
        do
        {
          float32x4_t v27 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&result->i8[v30]));
          *(float32x4_t *)((char *)a7 + v29) = v27;
          v28 += 4;
          v29 += 16;
          v30 += 8;
        }
        while ((int)v22 + v28 <= v16);
        LODWORD(v22) = v22 + v28;
        if ((int)v22 < (int)v10)
        {
LABEL_20:
          uint64_t v31 = (int)v22;
          unint64_t v32 = v10 - (int)v22;
          unint64_t v22 = (int)v22;
          if (v32 < 0x10) {
            goto LABEL_47;
          }
          unint64_t v22 = (v32 & 0xFFFFFFFFFFFFFFF0) + (int)v22;
          int8x16_t v33 = (float32x4_t *)((char *)a7 + 4 * v31);
          unint64_t v34 = (int16x4_t *)((char *)v20 + 2 * v31);
          unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v36 = *(int16x8_t *)v34[-2].i8;
            float32x4_t v37 = vcvtq_f32_s32(vmovl_s16(*v34));
            int32x4_t v38 = vmovl_high_s16(*(int16x8_t *)v34->i8);
            *int8x16_t v33 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v36.i8));
            v33[1] = vcvtq_f32_s32(vmovl_high_s16(v36));
            float32x4_t v27 = vcvtq_f32_s32(v38);
            v33[2] = v37;
            v33[3] = v27;
            v33 += 4;
            v34 += 4;
            v35 -= 16;
          }
          while (v35);
          if (v32 != (v32 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_47:
            do
            {
              v27.i16[0] = result->i16[v22];
              v27.i64[0] = vmovl_s16(*(int16x4_t *)v27.f32).u64[0];
              v27.f32[0] = (float)v27.i32[0];
              a7->i32[v22++] = v27.i32[0];
            }
            while (v10 != v22);
          }
        }
      }
      else if ((int)v22 < (int)v10)
      {
        goto LABEL_20;
      }
      unsigned int v13 = v23 - 1;
      uint64_t v17 = (float32x4_t *)((char *)v17 + v18);
      result = (int16x8_t *)((char *)result + v19);
      a7 = (float32x4_t *)((char *)a7 + v18);
      uint64_t v20 = (int16x8_t *)((char *)v20 + v19);
      if (!v23) {
        return result;
      }
    }
  }
  if ((int)v10 >= 4)
  {
    unint64_t v39 = (v10 - 4);
    if ((unint64_t)(v39 & 0xFFFFFFFC) + 5 <= v10) {
      uint64_t v40 = v10;
    }
    else {
      uint64_t v40 = (v39 & 0xFFFFFFFC) + 5;
    }
    uint64_t v41 = (v39 >> 2) + 1;
    unint64_t v42 = v40 - (v39 & 0xFFFFFFFC) - 4;
    uint64_t v43 = 2 * v11;
    uint64_t v44 = 4 * v12;
    uint64_t v45 = (uint64_t)&a7[(v39 >> 2) + 3];
    uint64_t v46 = (uint64_t)&result[1].i64[(v39 >> 2) + 1];
    while (1)
    {
      unsigned int v47 = v13;
      if (v39 >= 0x1C)
      {
        uint64_t v49 = v41 & 0x7FFFFFF8;
        unint64_t v50 = (float *)a7;
        int8x16_t v51 = (const __int16 *)result;
        do
        {
          *(int16x8x4_t *)(&a4 - 1) = vld4q_s16(v51);
          v51 += 32;
          v68.val[0] = vcvtq_f32_s32(vmovl_high_s16(v52));
          v68.val[1] = vcvtq_f32_s32(vmovl_high_s16((int16x8_t)a4));
          v68.val[2] = vcvtq_f32_s32(vmovl_high_s16(v53));
          v68.val[3] = vcvtq_f32_s32(vmovl_high_s16(v54));
          v69.val[0] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v52.i8));
          v69.val[1] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a4.i8));
          v69.val[2] = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v53.i8));
          a3 = vmovl_s16(*(int16x4_t *)v54.i8);
          v69.val[3] = vcvtq_f32_s32(a3);
          uint64_t v55 = v50 + 32;
          vst4q_f32(v50, v69);
          unint64_t v56 = v50 + 16;
          vst4q_f32(v56, v68);
          unint64_t v50 = v55;
          v49 -= 8;
        }
        while (v49);
        unint64_t v48 = 4 * (v41 & 0x7FFFFFF8);
        if (v41 == (v41 & 0x7FFFFFF8)) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v48 = 0;
      }
      uint64_t v57 = 2 * v48 + 6;
      unint64_t v58 = &a7[v48 / 4];
      do
      {
        a3.i16[0] = *(__int16 *)((char *)&result->i16[-3] + v57);
        int16x4_t v59 = (int16x4_t)vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
        *(float *)v59.i32 = (float)v59.i32[0];
        unint64_t v60 = &result->i64[v48 / 4];
        a4.i16[0] = *((_WORD *)v60 + 1);
        int16x4_t v61 = (int16x4_t)vmovl_s16(*(int16x4_t *)a4.i8).u64[0];
        *(float *)v61.i32 = (float)v61.i32[0];
        v58->i32[0] = v59.i32[0];
        v58->i32[1] = v61.i32[0];
        v59.i16[0] = *((_WORD *)v60 + 2);
        a3.i64[0] = vmovl_s16(v59).u64[0];
        *(float *)a3.i32 = (float)a3.i32[0];
        v61.i16[0] = *(__int16 *)((char *)result->i16 + v57);
        a4.i64[0] = vmovl_s16(v61).u64[0];
        *(float *)a4.i32 = (float)a4.i32[0];
        v58->i32[2] = a3.i32[0];
        v58->i32[3] = a4.i32[0];
        v48 += 4;
        v57 += 8;
        ++v58;
      }
      while (v48 <= v39);
LABEL_38:
      if ((int)v10 > (int)v48)
      {
        unint64_t v62 = (v39 & 0xFFFFFFFC) + 4;
        if (v42 < 0x10) {
          goto LABEL_48;
        }
        uint64_t v63 = (int16x4_t *)v46;
        uint64_t v64 = v45;
        unint64_t v65 = v42 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v66 = *(int16x8_t *)v63[-2].i8;
          float32x4_t v67 = vcvtq_f32_s32(vmovl_s16(*v63));
          a4 = vmovl_high_s16(*(int16x8_t *)v63->i8);
          *(float32x4_t *)(v64 - 32) = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v66.i8));
          *(float32x4_t *)(v64 - 16) = vcvtq_f32_s32(vmovl_high_s16(v66));
          a3 = (int32x4_t)vcvtq_f32_s32(a4);
          *(float32x4_t *)uint64_t v64 = v67;
          *(int32x4_t *)(v64 + 16) = a3;
          v64 += 64;
          v63 += 4;
          v65 -= 16;
        }
        while (v65);
        unint64_t v62 = (v39 & 0xFFFFFFFC) + 4 + (v42 & 0xFFFFFFFFFFFFFFF0);
        if (v42 != (v42 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_48:
          do
          {
            a3.i16[0] = result->i16[v62];
            a3.i64[0] = vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
            *(float *)a3.i32 = (float)a3.i32[0];
            a7->i32[v62++] = a3.i32[0];
          }
          while (v62 < v10);
        }
      }
      unsigned int v13 = v47 - 1;
      result = (int16x8_t *)((char *)result + v43);
      a7 = (float32x4_t *)((char *)a7 + v44);
      v45 += v44;
      v46 += v43;
      if (!v47) {
        return result;
      }
    }
  }
  if ((int)v10 >= 1)
  {
    unint64_t v14 = &result->u16[2];
    unint64_t v15 = &a7->i32[2];
    do
    {
      a3.i16[0] = *(v14 - 2);
      a3.i64[0] = vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
      *(float *)a3.i32 = (float)a3.i32[0];
      *(v15 - 2) = a3.i32[0];
      if (v10 != 1)
      {
        a3.i16[0] = *(v14 - 1);
        a3.i64[0] = vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
        *(float *)a3.i32 = (float)a3.i32[0];
        *(v15 - 1) = a3.i32[0];
        if (v10 != 2)
        {
          a3.i16[0] = *v14;
          a3.i64[0] = vmovl_s16(*(int16x4_t *)a3.i8).u64[0];
          *(float *)a3.i32 = (float)a3.i32[0];
          *unint64_t v15 = a3.i32[0];
        }
      }
      v14 += v11;
      v15 += v12;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_10023DCD0(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (!v7) {
    return result;
  }
  uint64_t v8 = *a7;
  unint64_t v9 = a2 >> 2;
  unint64_t v10 = a6 >> 2;
  if ((int)v8 >= 4)
  {
    unsigned int v15 = v7 - 1;
    uint64_t v16 = (v8 - 4);
    uint64_t v17 = 4 * v9;
    uint64_t v18 = 4 * v10;
    while (1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unint64_t v21 = 0;
      unsigned int v22 = v15;
      do
      {
        *(float32x4_t *)(a5 + v19) = vcvtq_f32_s32(*(int32x4_t *)(result + v19));
        v21 += 4;
        v20 += 0x400000000;
        v19 += 16;
      }
      while (v21 <= v16);
      if ((int)v16 >= (int)v21)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 4 * (int)v21;
        do
        {
          *(float32x4_t *)(a5 + v24) = vcvtq_f32_s32(*(int32x4_t *)(result + v24));
          v23 += 4;
          v24 += 16;
        }
        while ((int)v21 + v23 <= v16);
        LODWORD(v21) = v21 + v23;
        if ((int)v21 < (int)v8)
        {
LABEL_19:
          uint64_t v25 = (int)v21;
          unint64_t v26 = v8 - (int)v21;
          unint64_t v21 = (int)v21;
          if (v26 < 8) {
            goto LABEL_27;
          }
          unint64_t v21 = (v26 & 0xFFFFFFFFFFFFFFF8) + (int)v21;
          uint64_t v27 = 4 * v25;
          unint64_t v28 = v26 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v29 = vcvtq_f32_s32(*(int32x4_t *)(result + v27 + 16));
            uint64_t v30 = (float32x4_t *)(a5 + v27);
            float32x4_t *v30 = vcvtq_f32_s32(*(int32x4_t *)(result + v27));
            v30[1] = v29;
            v27 += 32;
            v28 -= 8;
          }
          while (v28);
          if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              *(float *)(a5 + 4 * v21) = (float)*(int *)(result + 4 * v21);
              ++v21;
            }
            while (v8 != v21);
          }
        }
      }
      else if ((int)v21 < (int)v8)
      {
        goto LABEL_19;
      }
      unsigned int v15 = v22 - 1;
      result += v17;
      a5 += v18;
      if (!v22) {
        return result;
      }
    }
  }
  if ((int)v8 >= 1)
  {
    unint64_t v11 = (int *)(result + 8);
    uint64_t v12 = 4 * v9;
    unsigned int v13 = (float *)(a5 + 8);
    uint64_t v14 = 4 * v10;
    do
    {
      *(v13 - 2) = (float)*(v11 - 2);
      if (v8 != 1)
      {
        *(v13 - 1) = (float)*(v11 - 1);
        if (v8 != 2) {
          *unsigned int v13 = (float)*v11;
        }
      }
      unint64_t v11 = (int *)((char *)v11 + v12);
      unsigned int v13 = (float *)((char *)v13 + v14);
      --v7;
    }
    while (v7);
  }
  return result;
}

float64x2_t *sub_10023DE68(float64x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (!v7) {
    return result;
  }
  uint64_t v8 = *a7;
  unint64_t v9 = a2 >> 3;
  unint64_t v10 = a6 >> 2;
  if ((int)v8 >= 4)
  {
    unsigned int v18 = v7 - 1;
    uint64_t v19 = (v8 - 4);
    uint64_t v20 = 4 * v10;
    unint64_t v21 = result + 1;
    uint64_t v22 = 8 * v9;
    uint64_t v23 = result + 2;
    while (1)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      unsigned int v26 = v18;
      uint64_t v27 = v21;
      unint64_t v28 = a5;
      do
      {
        *v28++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27[-1]), *v27);
        v25 += 4;
        v24 += 0x400000000;
        v27 += 2;
      }
      while (v25 <= v19);
      if ((int)v19 >= (int)v25)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 4 * (int)v25;
        uint64_t v31 = 8 * (int)v25;
        do
        {
          *(float32x4_t *)((char *)a5 + v30) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)result + v31)), *(float64x2_t *)((char *)result + v31 + 16));
          v29 += 4;
          v30 += 16;
          v31 += 32;
        }
        while ((int)v25 + v29 <= v19);
        LODWORD(v25) = v25 + v29;
        if ((int)v25 < (int)v8)
        {
LABEL_19:
          uint64_t v32 = (int)v25;
          unint64_t v33 = v8 - (int)v25;
          unint64_t v25 = (int)v25;
          if (v33 < 8) {
            goto LABEL_27;
          }
          unint64_t v25 = (v33 & 0xFFFFFFFFFFFFFFF8) + (int)v25;
          unint64_t v34 = (float32x4_t *)((char *)a5 + 4 * v32);
          unint64_t v35 = (float64x2_t *)((char *)v23 + 8 * v32);
          unint64_t v36 = v33 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float64x2_t v38 = v35[-2];
            float64x2_t v37 = v35[-1];
            float64x2_t v40 = *v35;
            float64x2_t v39 = v35[1];
            v35 += 4;
            *unint64_t v34 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v38), v37);
            v34[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40), v39);
            v34 += 2;
            v36 -= 8;
          }
          while (v36);
          if (v33 != (v33 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              float32_t v41 = result->f64[v25];
              a5->f32[v25++] = v41;
            }
            while (v8 != v25);
          }
        }
      }
      else if ((int)v25 < (int)v8)
      {
        goto LABEL_19;
      }
      unsigned int v18 = v26 - 1;
      a5 = (float32x4_t *)((char *)a5 + v20);
      unint64_t v21 = (float64x2_t *)((char *)v21 + v22);
      result = (float64x2_t *)((char *)result + v22);
      uint64_t v23 = (float64x2_t *)((char *)v23 + v22);
      if (!v26) {
        return result;
      }
    }
  }
  if ((int)v8 >= 1)
  {
    f64 = result[1].f64;
    uint64_t v12 = 8 * v9;
    unsigned int v13 = &a5->f32[2];
    uint64_t v14 = 4 * v10;
    do
    {
      float v15 = *(f64 - 2);
      *(v13 - 2) = v15;
      if (v8 != 1)
      {
        float v16 = *(f64 - 1);
        *(v13 - 1) = v16;
        if (v8 != 2)
        {
          float v17 = *f64;
          *unsigned int v13 = v17;
        }
      }
      f64 = (double *)((char *)f64 + v12);
      unsigned int v13 = (float *)((char *)v13 + v14);
      --v7;
    }
    while (v7);
  }
  return result;
}

unint64_t sub_10023E028(unint64_t result, uint64_t a2, double a3, int8x16_t a4, uint64x2_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, unsigned int *a10)
{
  unsigned int v10 = a10[1];
  if (!v10) {
    return result;
  }
  unint64_t v11 = a8;
  unint64_t v12 = result;
  unint64_t v13 = *a10;
  unint64_t v14 = a9 >> 3;
  unsigned int v15 = v10 - 1;
  if ((int)v13 >= 8)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (v13 - 4);
    unint64_t v20 = a9 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (float64x2_t *)(a8 + 32);
    uint64_t v22 = 8 * v14;
    unint64_t v23 = a8 + 24;
    result = a8;
    unint64_t v24 = v12;
    while (1)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      unsigned int v27 = v15;
      unint64_t v28 = v21;
      do
      {
        uint16x8_t v29 = vmovl_u8(*(uint8x8_t *)(v24 + v26));
        uint32x4_t v30 = vmovl_u16(*(uint16x4_t *)v29.i8);
        uint32x4_t v31 = vmovl_high_u16(v29);
        v32.i64[0] = v30.u32[0];
        v32.i64[1] = v30.u32[1];
        float64x2_t v33 = vcvtq_f64_s64(v32);
        v32.i64[0] = v30.u32[2];
        v32.i64[1] = v30.u32[3];
        v28[-2] = v33;
        v28[-1] = vcvtq_f64_s64(v32);
        v32.i64[0] = v31.u32[0];
        v32.i64[1] = v31.u32[1];
        float64x2_t v34 = vcvtq_f64_s64(v32);
        v32.i64[0] = v31.u32[2];
        v32.i64[1] = v31.u32[3];
        float64x2_t v35 = vcvtq_f64_s64(v32);
        float64x2_t *v28 = v34;
        v28[1] = v35;
        v28 += 4;
        v26 += 8;
        v25 += 0x800000000;
      }
      while (v26 <= (v13 - 8));
      if ((int)v19 >= (int)v26) {
        break;
      }
      if ((int)v26 < (int)v13) {
        goto LABEL_20;
      }
LABEL_11:
      v24 += a2;
      result += v22;
      unsigned int v15 = v27 - 1;
      ++v18;
      unint64_t v21 = (float64x2_t *)((char *)v21 + v22);
      v23 += v22;
      if (!v27) {
        return result;
      }
    }
    uint64_t v36 = 0;
    uint64_t v37 = 8 * (int)v26;
    float64x2_t v38 = (double *)(v23 + v37);
    unint64_t v39 = v24 + (int)v26;
    unint64_t v40 = result + v37;
    do
    {
      LOBYTE(v35.f64[0]) = *(unsigned char *)(v39 + v36);
      double v41 = (double)*(unint64_t *)&v35.f64[0];
      LOBYTE(v34.f64[0]) = *(unsigned char *)(v39 + v36 + 1);
      double v42 = (double)*(unint64_t *)&v34.f64[0];
      *(v38 - 3) = v41;
      unint64_t v43 = v40 + 8 * v36;
      *(double *)(v43 + 8) = v42;
      LOBYTE(v41) = *(unsigned char *)(v39 + v36 + 2);
      v35.f64[0] = (double)*(unint64_t *)&v41;
      LOBYTE(v42) = *(unsigned char *)(v39 + v36 + 3);
      v34.f64[0] = (double)*(unint64_t *)&v42;
      *(float64_t *)(v43 + 16) = v35.f64[0];
      *float64x2_t v38 = v34.f64[0];
      v38 += 4;
      v36 += 4;
    }
    while ((int)v26 + v36 <= v19);
    LODWORD(v26) = v26 + v36;
    if ((int)v26 >= (int)v13) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v44 = (int)v26;
    unint64_t v45 = v13 - (int)v26;
    if (v45 < 8)
    {
      uint64_t v46 = v44;
      goto LABEL_36;
    }
    if (result + 8 * v44 < v12 + v13 + v18 * a2 && v24 + v44 < v11 + 8 * v13 + v20 * v18)
    {
      uint64_t v46 = v44;
      goto LABEL_36;
    }
    if (v45 >= 0x10)
    {
      unint64_t v47 = v45 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v65 = 8 * v44;
      uint64_t v66 = v44;
      unint64_t v67 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v68 = *(int8x16_t *)(v24 + v66);
        unint64_t v69 = vextq_s8(v68, v68, 8uLL).u64[0];
        v70.i32[0] = v69;
        v70.i32[1] = BYTE1(v69);
        int8x8_t v71 = vand_s8(v70, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v71.u32[0];
        v72.i64[1] = v71.u32[1];
        v73.i32[0] = BYTE2(v69);
        float64x2_t v74 = vcvtq_f64_u64(v72);
        v73.i32[1] = BYTE3(v69);
        int8x8_t v75 = vand_s8(v73, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v75.u32[0];
        v72.i64[1] = v75.u32[1];
        v76.i32[0] = BYTE4(v69);
        v76.i32[1] = BYTE5(v69);
        float64x2_t v77 = vcvtq_f64_u64(v72);
        int8x8_t v78 = vand_s8(v76, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v78.u32[0];
        v72.i64[1] = v78.u32[1];
        float64x2_t v79 = vcvtq_f64_u64(v72);
        v80.i32[0] = BYTE6(v69);
        v80.i32[1] = HIBYTE(v69);
        int8x8_t v81 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v81.u32[0];
        v72.i64[1] = v81.u32[1];
        uint64x2_t v82 = v72;
        v80.i32[0] = v68.u8[0];
        v80.i32[1] = v68.u8[1];
        int8x8_t v83 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v83.u32[0];
        v72.i64[1] = v83.u32[1];
        float64x2_t v84 = vcvtq_f64_u64(v72);
        v85.i32[0] = v68.u8[2];
        v85.i32[1] = v68.u8[3];
        int8x8_t v86 = vand_s8(v85, (int8x8_t)0xFF000000FFLL);
        v87.i32[0] = v68.u8[4];
        v87.i32[1] = v68.u8[5];
        int8x8_t v88 = vand_s8(v87, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v88.u32[0];
        v72.i64[1] = v88.u32[1];
        float64x2_t v89 = vcvtq_f64_u64(v72);
        v90.i32[0] = v68.u8[6];
        v90.i32[1] = v68.u8[7];
        *(int8x8_t *)v68.i8 = vand_s8(v90, (int8x8_t)0xFF000000FFLL);
        v72.i64[0] = v68.u32[0];
        v72.i64[1] = v68.u32[1];
        int8x8_t v91 = (float64x2_t *)(result + v65);
        v91[2] = v89;
        v91[3] = vcvtq_f64_u64(v72);
        v72.i64[0] = v86.u32[0];
        v72.i64[1] = v86.u32[1];
        *int8x8_t v91 = v84;
        v91[1] = vcvtq_f64_u64(v72);
        float64x2_t v35 = vcvtq_f64_u64(v82);
        v91[6] = v79;
        v91[7] = v35;
        v91[4] = v74;
        v91[5] = v77;
        v66 += 16;
        v65 += 128;
        v67 -= 16;
      }
      while (v67);
      if (v45 == v47) {
        goto LABEL_11;
      }
      if ((v45 & 8) == 0)
      {
        uint64_t v46 = v47 + v44;
        do
        {
LABEL_36:
          LOBYTE(v35.f64[0]) = *(unsigned char *)(v24 + v46);
          v35.f64[0] = (double)*(unint64_t *)&v35.f64[0];
          *(float64_t *)(result + 8 * v46++) = v35.f64[0];
        }
        while (v13 != v46);
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v47 = 0;
    }
    uint64_t v46 = (v45 & 0xFFFFFFFFFFFFFFF8) + v44;
    unint64_t v48 = v47 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v49 = v47 + v44;
    uint64_t v50 = 8 * v49;
    do
    {
      uint64_t v51 = *(void *)(v24 + v49);
      v52.i32[0] = v51;
      v52.i32[1] = BYTE1(v51);
      int8x8_t v53 = vand_s8(v52, (int8x8_t)0xFF000000FFLL);
      v54.i64[0] = v53.u32[0];
      v54.i64[1] = v53.u32[1];
      float64x2_t v55 = vcvtq_f64_u64(v54);
      v56.i32[0] = BYTE2(v51);
      v56.i32[1] = BYTE3(v51);
      int8x8_t v57 = vand_s8(v56, (int8x8_t)0xFF000000FFLL);
      v54.i64[0] = v57.u32[0];
      v54.i64[1] = v57.u32[1];
      uint64x2_t v58 = v54;
      v59.i32[0] = BYTE4(v51);
      v59.i32[1] = BYTE5(v51);
      int8x8_t v60 = vand_s8(v59, (int8x8_t)0xFF000000FFLL);
      v54.i64[0] = v60.u32[0];
      v54.i64[1] = v60.u32[1];
      float64x2_t v61 = vcvtq_f64_u64(v54);
      v62.i32[0] = BYTE6(v51);
      v62.i32[1] = HIBYTE(v51);
      int8x8_t v63 = vand_s8(v62, (int8x8_t)0xFF000000FFLL);
      v54.i64[0] = v63.u32[0];
      v54.i64[1] = v63.u32[1];
      uint64_t v64 = (float64x2_t *)(result + v50);
      v64[2] = v61;
      v64[3] = vcvtq_f64_u64(v54);
      float64x2_t v35 = vcvtq_f64_u64(v58);
      *uint64_t v64 = v55;
      v64[1] = v35;
      v49 += 8;
      v50 += 64;
      v48 += 8;
    }
    while (v48);
    if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
  if ((int)v13 >= 4)
  {
    uint64_t v92 = 0;
    unint64_t v93 = (v13 - 4);
    uint64_t v94 = (v93 & 0xFFFFFFFC) + 4;
    unint64_t v95 = a9 & 0xFFFFFFFFFFFFFFF8;
    if ((unint64_t)(v93 & 0xFFFFFFFC) + 5 <= v13) {
      uint64_t v96 = *a10;
    }
    else {
      uint64_t v96 = (v93 & 0xFFFFFFFC) + 5;
    }
    unint64_t v97 = v96 - (v93 & 0xFFFFFFFC) - 4;
    uint64_t v98 = 32 * (v93 >> 2) + 32;
    uint64_t v99 = (v93 >> 2) + 1;
    uint64_t v100 = 8 * v14;
    unint64_t v101 = result + v94;
    unint64_t v102 = a8 + v98;
    unint64_t v103 = a8 + ((8 * (v13 - 4)) & 0x7FFFFFFE0) + 32;
    unint64_t v190 = a8 + 8 * v96;
    unint64_t v104 = result + v96;
    unint64_t v105 = result + v94;
    while (1)
    {
      unsigned int v106 = v15;
      unint64_t v107 = v95 * v92;
      unint64_t v108 = v101 + v92 * a2;
      if (v93 < 0x3C) {
        break;
      }
      if (a8 < v108 && v12 < v11 + v98 + v107) {
        break;
      }
      uint64_t v110 = v99 & 0x7FFFFFF0;
      v111 = (double *)a8;
      result = v12;
      do
      {
        *(int8x16x4_t *)a4.i8 = vld4q_s8((const char *)result);
        result += 64;
        v112.i32[0] = a4.u8[6];
        v112.i32[1] = a4.u8[7];
        unint64_t v113 = vextq_s8(a4, a4, 8uLL).u64[0];
        v114.i32[0] = a4.u8[0];
        v114.i32[1] = a4.u8[1];
        int8x8_t v115 = vand_s8(v114, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v115.u32[0];
        v116.i64[1] = v115.u32[1];
        v192.val[0] = vcvtq_f64_u64(v116);
        v115.i32[0] = v117.u8[0];
        v115.i32[1] = v117.u8[1];
        int8x8_t v118 = vand_s8(v115, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v118.u32[0];
        v116.i64[1] = v118.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v118.i32[0] = v119.u8[0];
        v118.i32[1] = v119.u8[1];
        int8x8_t v120 = vand_s8(v118, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v120.u32[0];
        v116.i64[1] = v120.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v120.i32[0] = v121.u8[0];
        v120.i32[1] = v121.u8[1];
        int8x8_t v122 = vand_s8(v120, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v122.u32[0];
        v116.i64[1] = v122.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        v122.i32[0] = a4.u8[2];
        v122.i32[1] = a4.u8[3];
        v123 = v111;
        vst4q_f64(v123, v192);
        v123 += 8;
        int8x8_t v124 = vand_s8(v122, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v124.u32[0];
        v116.i64[1] = v124.u32[1];
        v192.val[0] = vcvtq_f64_u64(v116);
        v124.i32[0] = v117.u8[2];
        v124.i32[1] = v117.u8[3];
        int8x8_t v125 = vand_s8(v124, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v125.u32[0];
        v116.i64[1] = v125.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v125.i32[0] = v119.u8[2];
        v125.i32[1] = v119.u8[3];
        int8x8_t v126 = vand_s8(v125, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v126.u32[0];
        v116.i64[1] = v126.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v126.i32[0] = v121.u8[2];
        v126.i32[1] = v121.u8[3];
        int8x8_t v127 = vand_s8(v112, (int8x8_t)0xFF000000FFLL);
        int8x8_t v128 = vand_s8(v126, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v128.u32[0];
        v116.i64[1] = v128.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        vst4q_f64(v123, v192);
        v116.i64[0] = v127.u32[0];
        v116.i64[1] = v127.u32[1];
        uint64x2_t v129 = v116;
        v128.i32[0] = a4.u8[4];
        v128.i32[1] = a4.u8[5];
        int8x8_t v130 = vand_s8(v128, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v130.u32[0];
        v116.i64[1] = v130.u32[1];
        v192.val[0] = vcvtq_f64_u64(v116);
        v130.i32[0] = v117.u8[4];
        v130.i32[1] = v117.u8[5];
        int8x8_t v131 = vand_s8(v130, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v131.u32[0];
        v116.i64[1] = v131.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v131.i32[0] = v119.u8[4];
        v131.i32[1] = v119.u8[5];
        int8x8_t v132 = vand_s8(v131, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v132.u32[0];
        v116.i64[1] = v132.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v132.i32[0] = v121.u8[4];
        v132.i32[1] = v121.u8[5];
        int8x8_t v133 = vand_s8(v132, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v133.u32[0];
        v116.i64[1] = v133.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        v134 = v111 + 16;
        vst4q_f64(v134, v192);
        v192.val[0] = vcvtq_f64_u64(v129);
        v129.i32[0] = v117.u8[6];
        v129.i32[1] = v117.u8[7];
        *(int8x8_t *)v129.i8 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v129.u32[0];
        v116.i64[1] = v129.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v129.i32[0] = v119.u8[6];
        v129.i32[1] = v119.u8[7];
        unint64_t v135 = vextq_s8(v117, v117, 8uLL).u64[0];
        *(int8x8_t *)v129.i8 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v129.u32[0];
        v116.i64[1] = v129.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v129.i32[0] = v121.u8[6];
        v129.i32[1] = v121.u8[7];
        *(int8x8_t *)v129.i8 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v129.u32[0];
        v116.i64[1] = v129.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        v129.i32[0] = BYTE4(v113);
        v136 = v111 + 24;
        vst4q_f64(v136, v192);
        v129.i32[1] = BYTE5(v113);
        *(void *)&v192.val[0].f64[0] = vextq_s8(v119, v119, 8uLL).u64[0];
        LODWORD(v192.val[1].f64[0]) = v113;
        HIDWORD(v192.val[1].f64[0]) = BYTE1(v113);
        a4.i64[0] = vextq_s8(v121, v121, 8uLL).u64[0];
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)&v192.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v192.val[1] = vcvtq_f64_u64(v116);
        v117.i32[0] = v135;
        v117.i32[1] = BYTE1(v135);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v119.i32[0] = LOBYTE(v192.val[0].f64[0]);
        v192.val[2] = vcvtq_f64_u64(v116);
        v119.i32[1] = BYTE1(v192.val[0].f64[0]);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v119.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v119.i32[0] = a4.u8[0];
        v119.i32[1] = a4.u8[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v119.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        float64x2_t v137 = vcvtq_f64_u64(v116);
        v117.i32[0] = BYTE2(v113);
        v117.i32[1] = BYTE3(v113);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v138 = v111 + 32;
        vst4q_f64(v138, *(float64x2x4_t *)((char *)&v192 + 16));
        v192.val[1] = vcvtq_f64_u64(v116);
        v117.i32[0] = BYTE2(v135);
        v117.i32[1] = BYTE3(v135);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v192.val[2] = vcvtq_f64_u64(v116);
        v117.i32[0] = BYTE2(v192.val[0].f64[0]);
        v117.i32[1] = BYTE3(v192.val[0].f64[0]);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v192.val[3] = vcvtq_f64_u64(v116);
        v117.i32[0] = a4.u8[2];
        v117.i32[1] = a4.u8[3];
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v117.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        float64x2_t v139 = vcvtq_f64_u64(v116);
        *(int8x8_t *)v117.i8 = vand_s8(*(int8x8_t *)v129.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = v117.u32[0];
        v116.i64[1] = v117.u32[1];
        v140 = v111 + 40;
        vst4q_f64(v140, *(float64x2x4_t *)((char *)&v192 + 16));
        a5 = (uint64x2_t)vcvtq_f64_u64(v116);
        LODWORD(v192.val[1].f64[0]) = BYTE4(v135);
        HIDWORD(v192.val[1].f64[0]) = BYTE5(v135);
        *(int8x8_t *)&v192.val[1].f64[0] = vand_s8(*(int8x8_t *)&v192.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = LODWORD(v192.val[1].f64[0]);
        v116.i64[1] = HIDWORD(v192.val[1].f64[0]);
        float64x2_t v141 = vcvtq_f64_u64(v116);
        LODWORD(v192.val[1].f64[0]) = BYTE4(v192.val[0].f64[0]);
        HIDWORD(v192.val[1].f64[0]) = BYTE5(v192.val[0].f64[0]);
        *(int8x8_t *)&v192.val[1].f64[0] = vand_s8(*(int8x8_t *)&v192.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = LODWORD(v192.val[1].f64[0]);
        v116.i64[1] = HIDWORD(v192.val[1].f64[0]);
        float64x2_t v142 = vcvtq_f64_u64(v116);
        LODWORD(v192.val[1].f64[0]) = a4.u8[4];
        HIDWORD(v192.val[1].f64[0]) = a4.u8[5];
        *(int8x8_t *)&v192.val[1].f64[0] = vand_s8(*(int8x8_t *)&v192.val[1].f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = LODWORD(v192.val[1].f64[0]);
        v116.i64[1] = HIDWORD(v192.val[1].f64[0]);
        float64x2_t v143 = vcvtq_f64_u64(v116);
        v144 = v111 + 48;
        vst4q_f64(v144, *(float64x2x4_t *)a5.i8);
        a5.i32[0] = BYTE6(v113);
        a5.i32[1] = HIBYTE(v113);
        *(int8x8_t *)a5.i8 = vand_s8(*(int8x8_t *)a5.i8, (int8x8_t)0xFF000000FFLL);
        LODWORD(v141.f64[0]) = BYTE6(v135);
        HIDWORD(v141.f64[0]) = HIBYTE(v135);
        v116.i64[0] = a5.u32[0];
        v116.i64[1] = a5.u32[1];
        v191.val[0] = vcvtq_f64_u64(v116);
        *(int8x8_t *)a5.i8 = vand_s8(*(int8x8_t *)&v141.f64[0], (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = a5.u32[0];
        v116.i64[1] = a5.u32[1];
        v191.val[1] = vcvtq_f64_u64(v116);
        a5.i32[0] = BYTE6(v192.val[0].f64[0]);
        a5.i32[1] = HIBYTE(v192.val[0].f64[0]);
        *(int8x8_t *)a5.i8 = vand_s8(*(int8x8_t *)a5.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = a5.u32[0];
        v116.i64[1] = a5.u32[1];
        a5.i64[0] = a5.u32[0];
        v191.val[2] = vcvtq_f64_u64(v116);
        a4.i32[0] = a4.u8[6];
        a4.i32[1] = a4.u8[7];
        *(int8x8_t *)a4.i8 = vand_s8(*(int8x8_t *)a4.i8, (int8x8_t)0xFF000000FFLL);
        v116.i64[0] = a4.u32[0];
        v116.i64[1] = a4.u32[1];
        a4.i64[0] = a4.u32[0];
        v191.val[3] = vcvtq_f64_u64(v116);
        v145 = v111 + 56;
        vst4q_f64(v145, v191);
        v111 += 64;
        v110 -= 16;
      }
      while (v110);
      unint64_t v146 = 4 * (v99 & 0x7FFFFFF0);
      if (v99 != (v99 & 0x7FFFFFF0)) {
        goto LABEL_54;
      }
LABEL_56:
      if ((int)v13 > (int)v146)
      {
        unint64_t v149 = (v93 & 0xFFFFFFFC) + 4;
        if (v97 >= 8)
        {
          if (v103 + v107 >= v104 + v92 * a2
            || (result = v190 + v107, unint64_t v149 = (v93 & 0xFFFFFFFC) + 4, v108 >= v190 + v107))
          {
            if (v97 >= 0x10)
            {
              uint64_t v165 = 32 * (v93 >> 2) + 32;
              result = (v93 & 0xFFFFFFFC) + 4;
              unint64_t v166 = v97 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int8x16_t v167 = *(int8x16_t *)(v12 + result);
                unint64_t v168 = vextq_s8(v167, v167, 8uLL).u64[0];
                v169.i32[0] = v168;
                v169.i32[1] = BYTE1(v168);
                int8x8_t v170 = vand_s8(v169, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v170.u32[0];
                v171.i64[1] = v170.u32[1];
                v172.i32[0] = BYTE2(v168);
                float64x2_t v173 = vcvtq_f64_u64(v171);
                v172.i32[1] = BYTE3(v168);
                int8x8_t v174 = vand_s8(v172, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v174.u32[0];
                v171.i64[1] = v174.u32[1];
                v175.i32[0] = BYTE4(v168);
                v175.i32[1] = BYTE5(v168);
                float64x2_t v176 = vcvtq_f64_u64(v171);
                int8x8_t v177 = vand_s8(v175, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v177.u32[0];
                v171.i64[1] = v177.u32[1];
                float64x2_t v178 = vcvtq_f64_u64(v171);
                v179.i32[0] = BYTE6(v168);
                v179.i32[1] = HIBYTE(v168);
                int8x8_t v180 = vand_s8(v179, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v180.u32[0];
                v171.i64[1] = v180.u32[1];
                a5 = v171;
                v179.i32[0] = v167.u8[0];
                v179.i32[1] = v167.u8[1];
                int8x8_t v181 = vand_s8(v179, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v181.u32[0];
                v171.i64[1] = v181.u32[1];
                float64x2_t v182 = vcvtq_f64_u64(v171);
                v183.i32[0] = v167.u8[2];
                v183.i32[1] = v167.u8[3];
                int8x8_t v184 = vand_s8(v183, (int8x8_t)0xFF000000FFLL);
                v185.i32[0] = v167.u8[4];
                v185.i32[1] = v167.u8[5];
                int8x8_t v186 = vand_s8(v185, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v186.u32[0];
                v171.i64[1] = v186.u32[1];
                float64x2_t v187 = vcvtq_f64_u64(v171);
                v188.i32[0] = v167.u8[6];
                v188.i32[1] = v167.u8[7];
                *(int8x8_t *)v167.i8 = vand_s8(v188, (int8x8_t)0xFF000000FFLL);
                v171.i64[0] = v167.u32[0];
                v171.i64[1] = v167.u32[1];
                unint64_t v189 = a8 + v165;
                *(float64x2_t *)(v189 + 32) = v187;
                *(float64x2_t *)(v189 + 48) = vcvtq_f64_u64(v171);
                v171.i64[0] = v184.u32[0];
                v171.i64[1] = v184.u32[1];
                *(float64x2_t *)unint64_t v189 = v182;
                *(float64x2_t *)(v189 + 16) = vcvtq_f64_u64(v171);
                a4 = (int8x16_t)vcvtq_f64_u64(a5);
                *(float64x2_t *)(v189 + 96) = v178;
                *(int8x16_t *)(v189 + 112) = a4;
                *(float64x2_t *)(v189 + 64) = v173;
                *(float64x2_t *)(v189 + 80) = v176;
                result += 16;
                v165 += 128;
                v166 -= 16;
              }
              while (v166);
              if (v97 == (v97 & 0xFFFFFFFFFFFFFFF0)) {
                goto LABEL_42;
              }
              unint64_t v150 = v97 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v149 = v94 + (v97 & 0xFFFFFFFFFFFFFFF0);
              if ((v97 & 8) != 0) {
                goto LABEL_62;
              }
            }
            else
            {
              unint64_t v150 = 0;
LABEL_62:
              unint64_t v151 = v150 - (v97 & 0xFFFFFFFFFFFFFFF8);
              v152 = (uint64_t *)(v105 + v150);
              unint64_t v153 = v102 + 8 * v150;
              do
              {
                uint64_t v154 = *v152++;
                v155.i32[0] = v154;
                v155.i32[1] = BYTE1(v154);
                int8x8_t v156 = vand_s8(v155, (int8x8_t)0xFF000000FFLL);
                v157.i64[0] = v156.u32[0];
                v157.i64[1] = v156.u32[1];
                v158.i32[0] = BYTE2(v154);
                v158.i32[1] = BYTE3(v154);
                a5 = (uint64x2_t)vcvtq_f64_u64(v157);
                int8x8_t v159 = vand_s8(v158, (int8x8_t)0xFF000000FFLL);
                v157.i64[0] = v159.u32[0];
                v157.i64[1] = v159.u32[1];
                float64x2_t v160 = vcvtq_f64_u64(v157);
                v161.i32[0] = BYTE4(v154);
                v161.i32[1] = BYTE5(v154);
                int8x8_t v162 = vand_s8(v161, (int8x8_t)0xFF000000FFLL);
                v157.i64[0] = v162.u32[0];
                v157.i64[1] = v162.u32[1];
                v163.i32[0] = BYTE6(v154);
                a4 = (int8x16_t)vcvtq_f64_u64(v157);
                v163.i32[1] = HIBYTE(v154);
                int8x8_t v164 = vand_s8(v163, (int8x8_t)0xFF000000FFLL);
                v157.i64[0] = v164.u32[0];
                v157.i64[1] = v164.u32[1];
                *(int8x16_t *)(v153 + 32) = a4;
                *(float64x2_t *)(v153 + 48) = vcvtq_f64_u64(v157);
                *(uint64x2_t *)unint64_t v153 = a5;
                *(float64x2_t *)(v153 + 16) = v160;
                v153 += 64;
                v151 += 8;
              }
              while (v151);
              unint64_t v149 = v94 + (v97 & 0xFFFFFFFFFFFFFFF8);
              result = v97 & 0xFFFFFFFFFFFFFFF8;
              if (v97 == (v97 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_42;
              }
            }
          }
        }
        do
        {
          a4.i8[0] = *(unsigned char *)(v12 + v149);
          *(double *)a4.i64 = (double)a4.u64[0];
          *(void *)(a8 + 8 * v149++) = a4.i64[0];
        }
        while (v149 < v13);
      }
LABEL_42:
      v12 += a2;
      a8 += v100;
      unsigned int v15 = v106 - 1;
      ++v92;
      v105 += a2;
      v102 += v100;
      if (!v106) {
        return result;
      }
    }
    unint64_t v146 = 0;
LABEL_54:
    result = a8 + 8 * v146;
    do
    {
      a4.i8[0] = *(unsigned char *)(v12 + v146);
      double v147 = (double)a4.u64[0];
      a5.i8[0] = *(unsigned char *)(v12 + v146 + 1);
      double v148 = (double)a5.u64[0];
      *(double *)result = v147;
      *(double *)(result + 8) = v148;
      LOBYTE(v147) = *(unsigned char *)(v12 + v146 + 2);
      *(double *)a4.i64 = (double)*(unint64_t *)&v147;
      LOBYTE(v148) = *(unsigned char *)(v12 + v146 + 3);
      *(double *)a5.i64 = (double)*(unint64_t *)&v148;
      *(void *)(result + 16) = a4.i64[0];
      *(void *)(result + 24) = a5.i64[0];
      v146 += 4;
      result += 32;
    }
    while (v146 <= v93);
    goto LABEL_56;
  }
  if ((int)v13 >= 1)
  {
    float v16 = (unsigned char *)(result + 2);
    float v17 = (double *)(a8 + 16);
    do
    {
      LOBYTE(a3) = *(v16 - 2);
      a3 = (double)*(unint64_t *)&a3;
      *(v17 - 2) = a3;
      if (v13 != 1)
      {
        LOBYTE(a3) = *(v16 - 1);
        a3 = (double)*(unint64_t *)&a3;
        *(v17 - 1) = a3;
        if (v13 != 2)
        {
          LOBYTE(a3) = *v16;
          a3 = (double)*(unint64_t *)&a3;
          *float v17 = a3;
        }
      }
      v16 += a2;
      v17 += v14;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_10023EBC0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (!v7) {
    return result;
  }
  unint64_t v8 = result;
  unint64_t v9 = *a7;
  unint64_t v10 = a6 >> 3;
  unsigned int v11 = v7 - 1;
  if ((int)v9 >= 8)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (v9 - 4);
    unint64_t v16 = a6 & 0xFFFFFFFFFFFFFFF8;
    result = a5;
    float v17 = (float64x2_t *)(a5 + 32);
    uint64_t v18 = 8 * v10;
    uint64_t v19 = a5 + 24;
    unint64_t v20 = v8;
    while (1)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      unsigned int v23 = v11;
      unint64_t v24 = v17;
      do
      {
        int16x8_t v25 = vmovl_s8(*(int8x8_t *)(v20 + v22));
        int8x16_t v26 = (int8x16_t)vmovl_s16(*(int16x4_t *)v25.i8);
        int8x16_t v27 = (int8x16_t)vmovl_high_s16(v25);
        v24[-2] = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v26.i8));
        v24[-1] = vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
        *unint64_t v24 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v27.i8));
        v24[1] = vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)));
        v24 += 4;
        v22 += 8;
        v21 += 0x800000000;
      }
      while (v22 <= (v9 - 8));
      if ((int)v15 >= (int)v22) {
        break;
      }
      if ((int)v22 < (int)v9) {
        goto LABEL_20;
      }
LABEL_11:
      v20 += a2;
      result += v18;
      --v11;
      ++v14;
      float v17 = (float64x2_t *)((char *)v17 + v18);
      v19 += v18;
      if (!v23) {
        return result;
      }
    }
    uint64_t v28 = 0;
    uint64_t v29 = 8 * (int)v22;
    uint32x4_t v30 = (double *)(v19 + v29);
    unint64_t v31 = v20 + (int)v22;
    do
    {
      double v32 = (double)*(char *)(v31 + v28 + 1);
      *(v30 - 3) = (double)*(char *)(v31 + v28);
      uint64_t v33 = result + v29 + 8 * v28;
      *(double *)(v33 + 8) = v32;
      double v34 = (double)*(char *)(v31 + v28 + 3);
      *(double *)(v33 + 16) = (double)*(char *)(v31 + v28 + 2);
      double *v30 = v34;
      v30 += 4;
      v28 += 4;
    }
    while ((int)v22 + v28 <= v15);
    LODWORD(v22) = v22 + v28;
    if ((int)v22 >= (int)v9) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v35 = (int)v22;
    unint64_t v36 = v9 - (int)v22;
    if (v36 < 8)
    {
      uint64_t v37 = v35;
      goto LABEL_36;
    }
    if (result + 8 * v35 < v8 + v9 + v14 * a2 && v20 + v35 < a5 + 8 * v9 + v16 * v14)
    {
      uint64_t v37 = v35;
      goto LABEL_36;
    }
    if (v36 >= 0x10)
    {
      unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v56 = 8 * v35;
      uint64_t v57 = v35;
      unint64_t v58 = v36 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v59 = *(int8x16_t *)(v20 + v57);
        unint64_t v60 = vextq_s8(v59, v59, 8uLL).u64[0];
        v61.i32[0] = v60;
        v61.i32[1] = BYTE1(v60);
        int32x2_t v62 = vshr_n_s32(vshl_n_s32(v61, 0x18uLL), 0x18uLL);
        v63.i64[0] = v62.i32[0];
        v63.i64[1] = v62.i32[1];
        float64x2_t v64 = vcvtq_f64_s64(v63);
        v65.i32[0] = BYTE2(v60);
        v65.i32[1] = BYTE3(v60);
        int32x2_t v66 = vshr_n_s32(vshl_n_s32(v65, 0x18uLL), 0x18uLL);
        v63.i64[0] = v66.i32[0];
        v63.i64[1] = v66.i32[1];
        int64x2_t v67 = v63;
        v68.i32[0] = BYTE4(v60);
        v68.i32[1] = BYTE5(v60);
        int32x2_t v69 = vshr_n_s32(vshl_n_s32(v68, 0x18uLL), 0x18uLL);
        v63.i64[0] = v69.i32[0];
        v63.i64[1] = v69.i32[1];
        float64x2_t v70 = vcvtq_f64_s64(v63);
        v71.i32[0] = BYTE6(v60);
        v71.i32[1] = HIBYTE(v60);
        int32x2_t v72 = vshr_n_s32(vshl_n_s32(v71, 0x18uLL), 0x18uLL);
        v63.i64[0] = v72.i32[0];
        v63.i64[1] = v72.i32[1];
        float64x2_t v73 = vcvtq_f64_s64(v63);
        v71.i32[0] = v59.u8[0];
        v71.i32[1] = v59.u8[1];
        int32x2_t v74 = vshr_n_s32(vshl_n_s32(v71, 0x18uLL), 0x18uLL);
        v63.i64[0] = v74.i32[0];
        v63.i64[1] = v74.i32[1];
        v75.i32[0] = v59.u8[2];
        float64x2_t v76 = vcvtq_f64_s64(v63);
        v75.i32[1] = v59.u8[3];
        int32x2_t v77 = vshr_n_s32(vshl_n_s32(v75, 0x18uLL), 0x18uLL);
        v78.i32[0] = v59.u8[4];
        v78.i32[1] = v59.u8[5];
        int32x2_t v79 = vshr_n_s32(vshl_n_s32(v78, 0x18uLL), 0x18uLL);
        v63.i64[0] = v79.i32[0];
        v63.i64[1] = v79.i32[1];
        float64x2_t v80 = vcvtq_f64_s64(v63);
        v81.i32[0] = v59.u8[6];
        v81.i32[1] = v59.u8[7];
        *(int32x2_t *)v59.i8 = vshr_n_s32(vshl_n_s32(v81, 0x18uLL), 0x18uLL);
        v63.i64[0] = v59.i32[0];
        v63.i64[1] = v59.i32[1];
        uint64x2_t v82 = (float64x2_t *)(result + v56);
        v82[2] = v80;
        v82[3] = vcvtq_f64_s64(v63);
        v63.i64[0] = v77.i32[0];
        v63.i64[1] = v77.i32[1];
        float64x2_t *v82 = v76;
        v82[1] = vcvtq_f64_s64(v63);
        v82[6] = v70;
        v82[7] = v73;
        v82[4] = v64;
        v82[5] = vcvtq_f64_s64(v67);
        v57 += 16;
        v56 += 128;
        v58 -= 16;
      }
      while (v58);
      if (v36 == v38) {
        goto LABEL_11;
      }
      if ((v36 & 8) == 0)
      {
        uint64_t v37 = v38 + v35;
        do
        {
LABEL_36:
          *(double *)(result + 8 * v37) = (double)*(char *)(v20 + v37);
          ++v37;
        }
        while (v9 != v37);
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v38 = 0;
    }
    uint64_t v37 = (v36 & 0xFFFFFFFFFFFFFFF8) + v35;
    unint64_t v39 = v38 - (v36 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v40 = v38 + v35;
    uint64_t v41 = 8 * v40;
    do
    {
      uint64_t v42 = *(void *)(v20 + v40);
      v43.i32[0] = v42;
      v43.i32[1] = BYTE1(v42);
      int32x2_t v44 = vshr_n_s32(vshl_n_s32(v43, 0x18uLL), 0x18uLL);
      v45.i64[0] = v44.i32[0];
      v45.i64[1] = v44.i32[1];
      float64x2_t v46 = vcvtq_f64_s64(v45);
      v47.i32[0] = BYTE2(v42);
      v47.i32[1] = BYTE3(v42);
      int32x2_t v48 = vshr_n_s32(vshl_n_s32(v47, 0x18uLL), 0x18uLL);
      v45.i64[0] = v48.i32[0];
      v45.i64[1] = v48.i32[1];
      int64x2_t v49 = v45;
      v50.i32[0] = BYTE4(v42);
      v50.i32[1] = BYTE5(v42);
      int32x2_t v51 = vshr_n_s32(vshl_n_s32(v50, 0x18uLL), 0x18uLL);
      v45.i64[0] = v51.i32[0];
      v45.i64[1] = v51.i32[1];
      float64x2_t v52 = vcvtq_f64_s64(v45);
      v53.i32[0] = BYTE6(v42);
      v53.i32[1] = HIBYTE(v42);
      int32x2_t v54 = vshr_n_s32(vshl_n_s32(v53, 0x18uLL), 0x18uLL);
      v45.i64[0] = v54.i32[0];
      v45.i64[1] = v54.i32[1];
      float64x2_t v55 = (float64x2_t *)(result + v41);
      v55[2] = v52;
      v55[3] = vcvtq_f64_s64(v45);
      *float64x2_t v55 = v46;
      v55[1] = vcvtq_f64_s64(v49);
      v40 += 8;
      v41 += 64;
      v39 += 8;
    }
    while (v39);
    if (v36 == (v36 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
  if ((int)v9 >= 4)
  {
    uint64_t v83 = 0;
    unint64_t v84 = (v9 - 4);
    uint64_t v85 = (v84 & 0xFFFFFFFC) + 4;
    unint64_t v86 = a6 & 0xFFFFFFFFFFFFFFF8;
    if ((unint64_t)(v84 & 0xFFFFFFFC) + 5 <= v9) {
      uint64_t v87 = *a7;
    }
    else {
      uint64_t v87 = (v84 & 0xFFFFFFFC) + 5;
    }
    unint64_t v88 = v87 - (v84 & 0xFFFFFFFC) - 4;
    uint64_t v89 = 32 * (v84 >> 2) + 32;
    uint64_t v90 = (v84 >> 2) + 1;
    uint64_t v91 = 8 * v10;
    uint64_t v92 = result + v85;
    unint64_t v93 = (double *)a5;
    uint64_t v94 = a5 + v89;
    uint64_t v95 = a5 + ((8 * (v9 - 4)) & 0x7FFFFFFE0) + 32;
    uint64_t v183 = a5 + 8 * v87;
    uint64_t v96 = result + v87;
    uint64_t v97 = result + v85;
    while (1)
    {
      unsigned int v98 = v11;
      unint64_t v99 = v86 * v83;
      unint64_t v100 = v92 + v83 * a2;
      if (v84 < 0x3C) {
        break;
      }
      if ((unint64_t)v93 < v100 && v8 < a5 + v89 + v99) {
        break;
      }
      uint64_t v102 = v90 & 0x7FFFFFF0;
      unint64_t v103 = v93;
      result = v8;
      do
      {
        int8x16x4_t v185 = vld4q_s8((const char *)result);
        result += 64;
        unint64_t v104 = vextq_s8(v185.val[0], v185.val[0], 8uLL).u64[0];
        v105.i32[0] = BYTE4(v104);
        v105.i32[1] = BYTE5(v104);
        v106.i32[0] = v185.val[0].u8[4];
        v106.i32[1] = v185.val[0].u8[5];
        v107.i32[0] = v185.val[0].u8[0];
        v107.i32[1] = v185.val[0].u8[1];
        int32x2_t v108 = vshr_n_s32(vshl_n_s32(v107, 0x18uLL), 0x18uLL);
        v109.i64[0] = v108.i32[0];
        v109.i64[1] = v108.i32[1];
        v110.i32[0] = v185.val[1].u8[0];
        v110.i32[1] = v185.val[1].u8[1];
        v186.val[0] = vcvtq_f64_s64(v109);
        int32x2_t v111 = vshr_n_s32(vshl_n_s32(v110, 0x18uLL), 0x18uLL);
        v109.i64[0] = v111.i32[0];
        v109.i64[1] = v111.i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v111.i32[0] = v185.val[2].u8[0];
        v111.i32[1] = v185.val[2].u8[1];
        int32x2_t v112 = vshr_n_s32(vshl_n_s32(v111, 0x18uLL), 0x18uLL);
        v109.i64[0] = v112.i32[0];
        v109.i64[1] = v112.i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        v112.i32[0] = v185.val[3].u8[0];
        v112.i32[1] = v185.val[3].u8[1];
        int32x2_t v113 = vshr_n_s32(vshl_n_s32(v106, 0x18uLL), 0x18uLL);
        int32x2_t v114 = vshr_n_s32(vshl_n_s32(v112, 0x18uLL), 0x18uLL);
        v109.i64[0] = v114.i32[0];
        v109.i64[1] = v114.i32[1];
        v186.val[3] = vcvtq_f64_s64(v109);
        v114.i32[0] = v185.val[0].u8[2];
        v114.i32[1] = v185.val[0].u8[3];
        int32x2_t v115 = vshr_n_s32(vshl_n_s32(v114, 0x18uLL), 0x18uLL);
        uint64x2_t v116 = v103;
        vst4q_f64(v116, v186);
        v116 += 8;
        v109.i64[0] = v115.i32[0];
        v109.i64[1] = v115.i32[1];
        v110.i32[0] = v185.val[1].u8[2];
        v110.i32[1] = v185.val[1].u8[3];
        v186.val[0] = vcvtq_f64_s64(v109);
        int32x2_t v117 = vshr_n_s32(vshl_n_s32(v110, 0x18uLL), 0x18uLL);
        v109.i64[0] = v117.i32[0];
        v109.i64[1] = v117.i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v117.i32[0] = v185.val[2].u8[2];
        v117.i32[1] = v185.val[2].u8[3];
        v109.i64[0] = v113.i32[0];
        v109.i64[1] = v113.i32[1];
        int64x2_t v118 = v109;
        int32x2_t v119 = vshr_n_s32(vshl_n_s32(v117, 0x18uLL), 0x18uLL);
        v109.i64[0] = v119.i32[0];
        v109.i64[1] = v119.i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        v119.i32[0] = v185.val[3].u8[2];
        v119.i32[1] = v185.val[3].u8[3];
        int32x2_t v120 = vshr_n_s32(vshl_n_s32(v119, 0x18uLL), 0x18uLL);
        v109.i64[0] = v120.i32[0];
        v109.i64[1] = v120.i32[1];
        v186.val[3] = vcvtq_f64_s64(v109);
        vst4q_f64(v116, v186);
        float64x2_t v121 = vcvtq_f64_s64(v118);
        v118.i32[0] = v185.val[1].u8[4];
        v118.i32[1] = v185.val[1].u8[5];
        *(int32x2_t *)v118.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v118.i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v118.i32[0];
        v109.i64[1] = v118.i32[1];
        v120.i32[0] = v185.val[2].u8[4];
        v120.i32[1] = v185.val[2].u8[5];
        v186.val[0] = vcvtq_f64_s64(v109);
        *(int32x2_t *)v118.i8 = vshr_n_s32(vshl_n_s32(v120, 0x18uLL), 0x18uLL);
        v109.i64[0] = v118.i32[0];
        v109.i64[1] = v118.i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v118.i32[0] = v185.val[3].u8[4];
        v118.i32[1] = v185.val[3].u8[5];
        *(int32x2_t *)v118.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v118.i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v118.i32[0];
        v109.i64[1] = v118.i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        LODWORD(v186.val[3].f64[0]) = BYTE2(v104);
        HIDWORD(v186.val[3].f64[0]) = BYTE3(v104);
        int8x8_t v122 = v103 + 16;
        vst4q_f64(v122, v186);
        LODWORD(v121.f64[0]) = v185.val[0].u8[6];
        HIDWORD(v121.f64[0]) = v185.val[0].u8[7];
        unint64_t v123 = vextq_s8(v185.val[1], v185.val[1], 8uLL).u64[0];
        LODWORD(v186.val[0].f64[0]) = v185.val[1].u8[6];
        HIDWORD(v186.val[0].f64[0]) = v185.val[1].u8[7];
        v118.i64[0] = vextq_s8(v185.val[2], v185.val[2], 8uLL).u64[0];
        v185.val[0].i64[0] = vextq_s8(v185.val[3], v185.val[3], 8uLL).u64[0];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v121.f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v187.val[0] = vcvtq_f64_s64(v109);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v186.val[0].f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v187.val[1] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v185.val[2].u8[6];
        v185.val[1].i32[1] = v185.val[2].u8[7];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v187.val[2] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v185.val[3].u8[6];
        v185.val[1].i32[1] = v185.val[3].u8[7];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v187.val[3] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v104;
        v185.val[1].i32[1] = BYTE1(v104);
        int8x8_t v124 = v103 + 24;
        vst4q_f64(v124, v187);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        float64x2_t v125 = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v123;
        v185.val[1].i32[1] = BYTE1(v123);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[0] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v118.u8[0];
        v185.val[1].i32[1] = v118.u8[1];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v185.val[0].u8[0];
        v185.val[1].i32[1] = v185.val[0].u8[1];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v186.val[3].f64[0], 0x18uLL), 0x18uLL);
        int8x8_t v126 = v103 + 32;
        vst4q_f64(v126, v186);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v185.val[2].i32[0] = BYTE2(v123);
        v185.val[2].i32[1] = BYTE3(v123);
        float64x2_t v127 = vcvtq_f64_s64(v109);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[2].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[0] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v118.u8[2];
        v185.val[1].i32[1] = v118.u8[3];
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[1] = vcvtq_f64_s64(v109);
        v185.val[1].i32[0] = v185.val[0].u8[2];
        v185.val[1].i32[1] = v185.val[0].u8[3];
        *(int32x2_t *)v185.val[2].i8 = vshr_n_s32(vshl_n_s32(v105, 0x18uLL), 0x18uLL);
        *(int32x2_t *)v185.val[1].i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v185.val[1].i32[0];
        v109.i64[1] = v185.val[1].i32[1];
        v186.val[2] = vcvtq_f64_s64(v109);
        int8x8_t v128 = v103 + 40;
        vst4q_f64(v128, v186);
        v109.i64[0] = v185.val[2].i32[0];
        v109.i64[1] = v185.val[2].i32[1];
        v185.val[1] = (int8x16_t)vcvtq_f64_s64(v109);
        LODWORD(v127.f64[0]) = BYTE4(v123);
        HIDWORD(v127.f64[0]) = BYTE5(v123);
        *(int32x2_t *)&v127.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v127.f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = SLODWORD(v127.f64[0]);
        v109.i64[1] = SHIDWORD(v127.f64[0]);
        v185.val[2] = (int8x16_t)vcvtq_f64_s64(v109);
        LODWORD(v127.f64[0]) = v118.u8[4];
        HIDWORD(v127.f64[0]) = v118.u8[5];
        *(int32x2_t *)&v127.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v127.f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = SLODWORD(v127.f64[0]);
        v109.i64[1] = SHIDWORD(v127.f64[0]);
        LODWORD(v186.val[0].f64[0]) = v185.val[0].u8[4];
        HIDWORD(v186.val[0].f64[0]) = v185.val[0].u8[5];
        v185.val[3] = (int8x16_t)vcvtq_f64_s64(v109);
        *(int32x2_t *)&v127.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v186.val[0].f64[0], 0x18uLL), 0x18uLL);
        v109.i64[0] = SLODWORD(v127.f64[0]);
        v109.i64[1] = SHIDWORD(v127.f64[0]);
        float64x2_t v129 = vcvtq_f64_s64(v109);
        int8x8_t v130 = v103 + 48;
        vst4q_f64(v130, *(float64x2x4_t *)((char *)&v185 + 16));
        v185.val[1].i32[0] = BYTE6(v104);
        v185.val[1].i32[1] = HIBYTE(v104);
        int32x2_t v131 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[1].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v131.i32[0];
        v109.i64[1] = v131.i32[1];
        v185.val[1] = (int8x16_t)vcvtq_f64_s64(v109);
        v131.i32[0] = BYTE6(v123);
        v131.i32[1] = HIBYTE(v123);
        int32x2_t v132 = vshr_n_s32(vshl_n_s32(v131, 0x18uLL), 0x18uLL);
        v109.i64[0] = v132.i32[0];
        v109.i64[1] = v132.i32[1];
        v185.val[2] = (int8x16_t)vcvtq_f64_s64(v109);
        v132.i32[0] = v118.u8[6];
        v132.i32[1] = v118.u8[7];
        v185.val[0].i32[0] = v185.val[0].u8[6];
        int32x2_t v133 = vshr_n_s32(vshl_n_s32(v132, 0x18uLL), 0x18uLL);
        v109.i64[0] = v133.i32[0];
        v109.i64[1] = v133.i32[1];
        v185.val[0].i32[1] = v185.val[0].u8[7];
        v185.val[3] = (int8x16_t)vcvtq_f64_s64(v109);
        int32x2_t v134 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v185.val[0].i8, 0x18uLL), 0x18uLL);
        v109.i64[0] = v134.i32[0];
        v109.i64[1] = v134.i32[1];
        float64x2_t v135 = vcvtq_f64_s64(v109);
        v136 = v103 + 56;
        vst4q_f64(v136, *(float64x2x4_t *)((char *)&v185 + 16));
        v103 += 64;
        v102 -= 16;
      }
      while (v102);
      unint64_t v137 = 4 * (v90 & 0x7FFFFFF0);
      if (v90 != (v90 & 0x7FFFFFF0)) {
        goto LABEL_54;
      }
LABEL_56:
      if ((int)v9 > (int)v137)
      {
        unint64_t v140 = (v84 & 0xFFFFFFFC) + 4;
        if (v88 >= 8)
        {
          if (v95 + v99 >= v96 + v83 * a2 || (unint64_t v140 = (v84 & 0xFFFFFFFC) + 4, v100 >= v183 + v99))
          {
            if (v88 >= 0x10)
            {
              uint64_t v157 = 32 * (v84 >> 2) + 32;
              result = (v84 & 0xFFFFFFFC) + 4;
              unint64_t v158 = v88 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                int8x16_t v159 = *(int8x16_t *)(v8 + result);
                unint64_t v160 = vextq_s8(v159, v159, 8uLL).u64[0];
                v161.i32[0] = v160;
                v161.i32[1] = BYTE1(v160);
                int32x2_t v162 = vshr_n_s32(vshl_n_s32(v161, 0x18uLL), 0x18uLL);
                v163.i64[0] = v162.i32[0];
                v163.i64[1] = v162.i32[1];
                float64x2_t v164 = vcvtq_f64_s64(v163);
                v165.i32[0] = BYTE2(v160);
                v165.i32[1] = BYTE3(v160);
                int32x2_t v166 = vshr_n_s32(vshl_n_s32(v165, 0x18uLL), 0x18uLL);
                v163.i64[0] = v166.i32[0];
                v163.i64[1] = v166.i32[1];
                int64x2_t v167 = v163;
                v168.i32[0] = BYTE4(v160);
                v168.i32[1] = BYTE5(v160);
                int32x2_t v169 = vshr_n_s32(vshl_n_s32(v168, 0x18uLL), 0x18uLL);
                v163.i64[0] = v169.i32[0];
                v163.i64[1] = v169.i32[1];
                float64x2_t v170 = vcvtq_f64_s64(v163);
                v171.i32[0] = BYTE6(v160);
                v171.i32[1] = HIBYTE(v160);
                int32x2_t v172 = vshr_n_s32(vshl_n_s32(v171, 0x18uLL), 0x18uLL);
                v163.i64[0] = v172.i32[0];
                v163.i64[1] = v172.i32[1];
                float64x2_t v173 = vcvtq_f64_s64(v163);
                v171.i32[0] = v159.u8[0];
                v171.i32[1] = v159.u8[1];
                int32x2_t v174 = vshr_n_s32(vshl_n_s32(v171, 0x18uLL), 0x18uLL);
                v163.i64[0] = v174.i32[0];
                v163.i64[1] = v174.i32[1];
                v175.i32[0] = v159.u8[2];
                float64x2_t v176 = vcvtq_f64_s64(v163);
                v175.i32[1] = v159.u8[3];
                int32x2_t v177 = vshr_n_s32(vshl_n_s32(v175, 0x18uLL), 0x18uLL);
                v178.i32[0] = v159.u8[4];
                v178.i32[1] = v159.u8[5];
                int32x2_t v179 = vshr_n_s32(vshl_n_s32(v178, 0x18uLL), 0x18uLL);
                v163.i64[0] = v179.i32[0];
                v163.i64[1] = v179.i32[1];
                float64x2_t v180 = vcvtq_f64_s64(v163);
                v181.i32[0] = v159.u8[6];
                v181.i32[1] = v159.u8[7];
                *(int32x2_t *)v159.i8 = vshr_n_s32(vshl_n_s32(v181, 0x18uLL), 0x18uLL);
                v163.i64[0] = v159.i32[0];
                v163.i64[1] = v159.i32[1];
                float64x2_t v182 = (float64x2_t *)((char *)v93 + v157);
                v182[2] = v180;
                v182[3] = vcvtq_f64_s64(v163);
                v163.i64[0] = v177.i32[0];
                v163.i64[1] = v177.i32[1];
                *float64x2_t v182 = v176;
                v182[1] = vcvtq_f64_s64(v163);
                v182[6] = v170;
                v182[7] = v173;
                v182[4] = v164;
                v182[5] = vcvtq_f64_s64(v167);
                result += 16;
                v157 += 128;
                v158 -= 16;
              }
              while (v158);
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFF0)) {
                goto LABEL_42;
              }
              unint64_t v141 = v88 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v140 = v85 + (v88 & 0xFFFFFFFFFFFFFFF0);
              if ((v88 & 8) != 0) {
                goto LABEL_62;
              }
            }
            else
            {
              unint64_t v141 = 0;
LABEL_62:
              unint64_t v142 = v141 - (v88 & 0xFFFFFFFFFFFFFFF8);
              result = v97 + v141;
              float64x2_t v143 = (float64x2_t *)(v94 + 8 * v141);
              do
              {
                uint64_t v144 = *(void *)result;
                result += 8;
                v145.i32[0] = v144;
                v145.i32[1] = BYTE1(v144);
                int32x2_t v146 = vshr_n_s32(vshl_n_s32(v145, 0x18uLL), 0x18uLL);
                v147.i64[0] = v146.i32[0];
                v147.i64[1] = v146.i32[1];
                float64x2_t v148 = vcvtq_f64_s64(v147);
                v149.i32[0] = BYTE2(v144);
                v149.i32[1] = BYTE3(v144);
                int32x2_t v150 = vshr_n_s32(vshl_n_s32(v149, 0x18uLL), 0x18uLL);
                v147.i64[0] = v150.i32[0];
                v147.i64[1] = v150.i32[1];
                int64x2_t v151 = v147;
                v152.i32[0] = BYTE4(v144);
                v152.i32[1] = BYTE5(v144);
                int32x2_t v153 = vshr_n_s32(vshl_n_s32(v152, 0x18uLL), 0x18uLL);
                v147.i64[0] = v153.i32[0];
                v147.i64[1] = v153.i32[1];
                v154.i32[0] = BYTE6(v144);
                v154.i32[1] = HIBYTE(v144);
                float64x2_t v155 = vcvtq_f64_s64(v147);
                int32x2_t v156 = vshr_n_s32(vshl_n_s32(v154, 0x18uLL), 0x18uLL);
                v147.i64[0] = v156.i32[0];
                v147.i64[1] = v156.i32[1];
                v143[2] = v155;
                v143[3] = vcvtq_f64_s64(v147);
                *float64x2_t v143 = v148;
                v143[1] = vcvtq_f64_s64(v151);
                v143 += 4;
                v142 += 8;
              }
              while (v142);
              unint64_t v140 = v85 + (v88 & 0xFFFFFFFFFFFFFFF8);
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_42;
              }
            }
          }
        }
        do
        {
          v93[v140] = (double)*(char *)(v8 + v140);
          ++v140;
        }
        while (v140 < v9);
      }
LABEL_42:
      v8 += a2;
      unint64_t v93 = (double *)((char *)v93 + v91);
      unsigned int v11 = v98 - 1;
      ++v83;
      v97 += a2;
      v94 += v91;
      if (!v98) {
        return result;
      }
    }
    unint64_t v137 = 0;
LABEL_54:
    result = (uint64_t)&v93[v137];
    do
    {
      double v138 = (double)*(char *)(v8 + v137 + 1);
      *(double *)result = (double)*(char *)(v8 + v137);
      *(double *)(result + 8) = v138;
      double v139 = (double)*(char *)(v8 + v137 + 3);
      *(double *)(result + 16) = (double)*(char *)(v8 + v137 + 2);
      *(double *)(result + 24) = v139;
      v137 += 4;
      result += 32;
    }
    while (v137 <= v84);
    goto LABEL_56;
  }
  if ((int)v9 >= 1)
  {
    unint64_t v12 = (char *)(result + 2);
    unint64_t v13 = (double *)(a5 + 16);
    do
    {
      *(v13 - 2) = (double)*(v12 - 2);
      if (v9 != 1)
      {
        *(v13 - 1) = (double)*(v12 - 1);
        if (v9 != 2) {
          *unint64_t v13 = (double)*v12;
        }
      }
      v12 += a2;
      v13 += v10;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint16x4_t *sub_10023F848(uint16x4_t *result, unint64_t a2, double a3, double a4, __n128 a5, uint64_t a6, uint64_t a7, float64x2_t *a8, unint64_t a9, unsigned int *a10)
{
  unsigned int v10 = a10[1];
  if (!v10) {
    return result;
  }
  uint64_t v11 = *a10;
  unint64_t v12 = a2 >> 1;
  unint64_t v13 = a9 >> 3;
  if ((int)v11 >= 4)
  {
    unsigned int v18 = v10 - 1;
    uint64_t v19 = (v11 - 4);
    unint64_t v20 = a8 + 1;
    uint64_t v21 = 8 * v13;
    uint64_t v22 = 2 * v12;
    unsigned int v23 = (float64x2_t *)((char *)a8 + 24);
    uint64_t v24 = (uint64_t)result + 4;
    while (1)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      unsigned int v27 = v18;
      uint64_t v28 = result;
      uint64_t v29 = v20;
      do
      {
        uint16x4_t v30 = *v28++;
        uint32x4_t v31 = vmovl_u16(v30);
        v32.i64[0] = v31.u32[0];
        v32.i64[1] = v31.u32[1];
        float64x2_t v33 = vcvtq_f64_s64(v32);
        v32.i64[0] = v31.u32[2];
        v32.i64[1] = v31.u32[3];
        float64x2_t v34 = vcvtq_f64_s64(v32);
        v29[-1] = v33;
        *uint64_t v29 = v34;
        v26 += 4;
        v25 += 0x400000000;
        v29 += 2;
      }
      while (v26 <= v19);
      if ((int)v19 >= (int)v26)
      {
        uint64_t v35 = 0;
        uint64_t v36 = (int)v26;
        uint64_t v37 = &v23->f64[v36];
        uint64_t v38 = 2 * (int)v26;
        unint64_t v39 = (_WORD *)(v24 + v38);
        uint64_t v40 = (uint64_t)a8 + v36 * 8;
        uint64_t v41 = (uint64_t)result + v38;
        do
        {
          LOWORD(v34.f64[0]) = *(v39 - 2);
          double v42 = (double)*(unint64_t *)&v34.f64[0];
          LOWORD(v33.f64[0]) = *(_WORD *)(v41 + 2 * v35 + 2);
          v33.f64[0] = (double)*(unint64_t *)&v33.f64[0];
          *(v37 - 3) = v42;
          uint64_t v43 = v40 + 8 * v35;
          LOWORD(v42) = *v39;
          v34.f64[0] = (double)*(unint64_t *)&v42;
          a5.n128_u16[0] = v39[1];
          a5.n128_f64[0] = (double)a5.n128_u64[0];
          *(float64_t *)(v43 + 8) = v33.f64[0];
          *(float64_t *)(v43 + 16) = v34.f64[0];
          *uint64_t v37 = a5.n128_f64[0];
          v37 += 4;
          v35 += 4;
          v39 += 4;
        }
        while ((int)v26 + v35 <= v19);
        LODWORD(v26) = v26 + v35;
        if ((int)v26 < (int)v11)
        {
LABEL_19:
          uint64_t v44 = (int)v26;
          unint64_t v45 = v11 - (int)v26;
          unint64_t v26 = (int)v26;
          if (v45 < 8) {
            goto LABEL_27;
          }
          unint64_t v26 = (v45 & 0xFFFFFFFFFFFFFFF8) + (int)v26;
          uint64_t v46 = 2 * v44;
          uint64_t v47 = 8 * v44;
          unint64_t v48 = v45 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            uint16x8_t v49 = *(uint16x8_t *)&result->i8[v46];
            uint32x4_t v50 = vmovl_u16(*(uint16x4_t *)v49.i8);
            v51.i64[0] = v50.u32[0];
            v51.i64[1] = v50.u32[1];
            a5 = (__n128)vcvtq_f64_u64(v51);
            v51.i64[0] = v50.u32[2];
            v51.i64[1] = v50.u32[3];
            uint64x2_t v52 = v51;
            uint32x4_t v53 = vmovl_high_u16(v49);
            v51.i64[0] = v53.u32[0];
            v51.i64[1] = v53.u32[1];
            float64x2_t v54 = vcvtq_f64_u64(v51);
            v51.i64[0] = v53.u32[2];
            v51.i64[1] = v53.u32[3];
            uint64_t v55 = (uint64_t)a8 + v47;
            *(float64x2_t *)(v55 + 32) = v54;
            *(float64x2_t *)(v55 + 48) = vcvtq_f64_u64(v51);
            float64x2_t v34 = vcvtq_f64_u64(v52);
            *(__n128 *)uint64_t v55 = a5;
            *(float64x2_t *)(v55 + 16) = v34;
            v46 += 16;
            v47 += 64;
            v48 -= 8;
          }
          while (v48);
          if (v45 != (v45 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              LOWORD(v34.f64[0]) = result->i16[v26];
              v34.f64[0] = (double)*(unint64_t *)&v34.f64[0];
              a8->f64[v26++] = v34.f64[0];
            }
            while (v11 != v26);
          }
        }
      }
      else if ((int)v26 < (int)v11)
      {
        goto LABEL_19;
      }
      unsigned int v18 = v27 - 1;
      unint64_t v20 = (float64x2_t *)((char *)v20 + v21);
      result = (uint16x4_t *)((char *)result + v22);
      unsigned int v23 = (float64x2_t *)((char *)v23 + v21);
      v24 += v22;
      a8 = (float64x2_t *)((char *)a8 + v21);
      if (!v27) {
        return result;
      }
    }
  }
  if ((int)v11 >= 1)
  {
    uint64_t v14 = (_WORD *)result + 2;
    uint64_t v15 = 2 * v12;
    f64 = a8[1].f64;
    uint64_t v17 = 8 * v13;
    do
    {
      LOWORD(a3) = *(v14 - 2);
      a3 = (double)*(unint64_t *)&a3;
      *(f64 - 2) = a3;
      if (v11 != 1)
      {
        LOWORD(a3) = *(v14 - 1);
        a3 = (double)*(unint64_t *)&a3;
        *(f64 - 1) = a3;
        if (v11 != 2)
        {
          LOWORD(a3) = *v14;
          a3 = (double)*(unint64_t *)&a3;
          double *f64 = a3;
        }
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v15);
      f64 = (double *)((char *)f64 + v17);
      --v10;
    }
    while (v10);
  }
  return result;
}

int16x4_t *sub_10023FA74(int16x4_t *result, unint64_t a2, double a3, double a4, __n128 a5, uint64_t a6, uint64_t a7, float64x2_t *a8, unint64_t a9, unsigned int *a10)
{
  unsigned int v10 = a10[1];
  if (!v10) {
    return result;
  }
  uint64_t v11 = *a10;
  unint64_t v12 = a2 >> 1;
  unint64_t v13 = a9 >> 3;
  if ((int)v11 >= 4)
  {
    unsigned int v18 = v10 - 1;
    uint64_t v19 = (v11 - 4);
    unint64_t v20 = a8 + 1;
    uint64_t v21 = 8 * v13;
    uint64_t v22 = 2 * v12;
    unsigned int v23 = (float64x2_t *)((char *)a8 + 24);
    uint64_t v24 = (uint64_t)result + 4;
    while (1)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      unsigned int v27 = v18;
      uint64_t v28 = result;
      uint64_t v29 = v20;
      do
      {
        int16x4_t v30 = *v28++;
        int8x16_t v31 = (int8x16_t)vmovl_s16(v30);
        float64x2_t v32 = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v31.i8));
        float64x2_t v33 = vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)));
        v29[-1] = v32;
        *uint64_t v29 = v33;
        v26 += 4;
        v25 += 0x400000000;
        v29 += 2;
      }
      while (v26 <= v19);
      if ((int)v19 >= (int)v26)
      {
        uint64_t v34 = 0;
        uint64_t v35 = (int)v26;
        uint64_t v36 = &v23->f64[v35];
        uint64_t v37 = 2 * (int)v26;
        uint64_t v38 = (_WORD *)(v24 + v37);
        uint64_t v39 = (uint64_t)a8 + v35 * 8;
        uint64_t v40 = (uint64_t)result + v37;
        do
        {
          LOWORD(v33.f64[0]) = *(v38 - 2);
          double v41 = (double)vmovl_s16(*(int16x4_t *)&v33.f64[0]).i32[0];
          LOWORD(v32.f64[0]) = *(_WORD *)(v40 + 2 * v34 + 2);
          v32.f64[0] = (double)vmovl_s16(*(int16x4_t *)&v32.f64[0]).i32[0];
          *(v36 - 3) = v41;
          uint64_t v42 = v39 + 8 * v34;
          LOWORD(v41) = *v38;
          v33.f64[0] = (double)vmovl_s16(*(int16x4_t *)&v41).i32[0];
          a5.n128_u16[0] = v38[1];
          a5.n128_f64[0] = (double)vmovl_s16((int16x4_t)a5.n128_u64[0]).i32[0];
          *(float64_t *)(v42 + 8) = v32.f64[0];
          *(float64_t *)(v42 + 16) = v33.f64[0];
          double *v36 = a5.n128_f64[0];
          v36 += 4;
          v34 += 4;
          v38 += 4;
        }
        while ((int)v26 + v34 <= v19);
        LODWORD(v26) = v26 + v34;
        if ((int)v26 < (int)v11)
        {
LABEL_19:
          uint64_t v43 = (int)v26;
          unint64_t v44 = v11 - (int)v26;
          unint64_t v26 = (int)v26;
          if (v44 < 8) {
            goto LABEL_27;
          }
          unint64_t v26 = (v44 & 0xFFFFFFFFFFFFFFF8) + (int)v26;
          uint64_t v45 = 2 * v43;
          uint64_t v46 = 8 * v43;
          unint64_t v47 = v44 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int16x8_t v48 = *(int16x8_t *)&result->i8[v45];
            int32x4_t v49 = vmovl_s16(*(int16x4_t *)v48.i8);
            v50.i64[0] = v49.i32[0];
            v50.i64[1] = v49.i32[1];
            a5 = (__n128)vcvtq_f64_s64(v50);
            v50.i64[0] = v49.i32[2];
            v50.i64[1] = v49.i32[3];
            int64x2_t v51 = v50;
            int32x4_t v52 = vmovl_high_s16(v48);
            v50.i64[0] = v52.i32[0];
            v50.i64[1] = v52.i32[1];
            float64x2_t v53 = vcvtq_f64_s64(v50);
            v50.i64[0] = v52.i32[2];
            v50.i64[1] = v52.i32[3];
            uint64_t v54 = (uint64_t)a8 + v46;
            *(float64x2_t *)(v54 + 32) = v53;
            *(float64x2_t *)(v54 + 48) = vcvtq_f64_s64(v50);
            float64x2_t v33 = vcvtq_f64_s64(v51);
            *(__n128 *)uint64_t v54 = a5;
            *(float64x2_t *)(v54 + 16) = v33;
            v45 += 16;
            v46 += 64;
            v47 -= 8;
          }
          while (v47);
          if (v44 != (v44 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              LOWORD(v33.f64[0]) = result->i16[v26];
              v33.f64[0] = (double)vmovl_s16(*(int16x4_t *)&v33.f64[0]).i32[0];
              a8->f64[v26++] = v33.f64[0];
            }
            while (v11 != v26);
          }
        }
      }
      else if ((int)v26 < (int)v11)
      {
        goto LABEL_19;
      }
      unsigned int v18 = v27 - 1;
      unint64_t v20 = (float64x2_t *)((char *)v20 + v21);
      result = (int16x4_t *)((char *)result + v22);
      unsigned int v23 = (float64x2_t *)((char *)v23 + v21);
      v24 += v22;
      a8 = (float64x2_t *)((char *)a8 + v21);
      if (!v27) {
        return result;
      }
    }
  }
  if ((int)v11 >= 1)
  {
    uint64_t v14 = (_WORD *)result + 2;
    uint64_t v15 = 2 * v12;
    f64 = a8[1].f64;
    uint64_t v17 = 8 * v13;
    do
    {
      LOWORD(a3) = *(v14 - 2);
      a3 = (double)vmovl_s16(*(int16x4_t *)&a3).i32[0];
      *(f64 - 2) = a3;
      if (v11 != 1)
      {
        LOWORD(a3) = *(v14 - 1);
        a3 = (double)vmovl_s16(*(int16x4_t *)&a3).i32[0];
        *(f64 - 1) = a3;
        if (v11 != 2)
        {
          LOWORD(a3) = *v14;
          a3 = (double)vmovl_s16(*(int16x4_t *)&a3).i32[0];
          double *f64 = a3;
        }
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v15);
      f64 = (double *)((char *)f64 + v17);
      --v10;
    }
    while (v10);
  }
  return result;
}

int8x16_t *sub_10023FCE4(int8x16_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (!v7) {
    return result;
  }
  uint64_t v8 = *a7;
  unint64_t v9 = a2 >> 2;
  unint64_t v10 = a6 >> 3;
  if ((int)v8 >= 4)
  {
    unsigned int v15 = v7 - 1;
    unint64_t v16 = (v8 - 4);
    uint64_t v17 = a5 + 1;
    uint64_t v18 = 8 * v10;
    uint64_t v19 = 4 * v9;
    unint64_t v20 = result + 1;
    while (1)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      unsigned int v23 = v15;
      int v24 = 4;
      uint64_t v25 = result;
      unint64_t v26 = v17;
      do
      {
        int v27 = v24;
        int8x16_t v28 = *v25++;
        v22 += 4;
        v26[-1] = vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v28.i8));
        float64x2_t *v26 = vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)));
        v21 += 0x400000000;
        v26 += 2;
        v24 += 4;
      }
      while (v22 <= v16);
      if ((int)v16 >= (int)v22)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v27;
        int8x16_t v31 = (uint64_t *)((char *)result->i64 + 4 * v27);
        float64x2_t v32 = (float64x2_t *)((char *)a5 + 8 * v27);
        do
        {
          uint64_t v33 = *v31;
          uint64_t v34 = v31[1];
          v31 += 2;
          v35.i64[0] = (int)v33;
          v35.i64[1] = SHIDWORD(v33);
          float64x2_t v36 = vcvtq_f64_s64(v35);
          v35.i64[0] = (int)v34;
          v35.i64[1] = SHIDWORD(v34);
          float64x2_t *v32 = v36;
          v32[1] = vcvtq_f64_s64(v35);
          v32 += 2;
          v29 += 4;
        }
        while (v30 + v29 <= (uint64_t)v16);
        LODWORD(v22) = v22 + v29;
        if ((int)v22 < (int)v8)
        {
LABEL_19:
          uint64_t v37 = (int)v22;
          unint64_t v38 = v8 - (int)v22;
          unint64_t v22 = (int)v22;
          if (v38 < 8) {
            goto LABEL_27;
          }
          unint64_t v22 = (v38 & 0xFFFFFFFFFFFFFFF8) + (int)v22;
          uint64_t v39 = (float64x2_t *)((char *)a5 + 8 * v37);
          uint64_t v40 = (uint64_t)v20->i64 + 4 * v37;
          unint64_t v41 = v38 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v42 = *(_OWORD *)(v40 - 16);
            v43.i64[0] = (int)v42;
            v43.i64[1] = SDWORD1(v42);
            float64x2_t v44 = vcvtq_f64_s64(v43);
            v43.i64[0] = SDWORD2(v42);
            v43.i64[1] = SHIDWORD(v42);
            float64x2_t v45 = vcvtq_f64_s64(v43);
            v43.i64[0] = (int)*(_OWORD *)v40;
            v43.i64[1] = (int)HIDWORD(*(void *)v40);
            float64x2_t v46 = vcvtq_f64_s64(v43);
            v43.i64[0] = (int)*(void *)(v40 + 8);
            v43.i64[1] = (int)HIDWORD(*(_OWORD *)v40);
            *uint64_t v39 = v44;
            v39[1] = v45;
            v39[2] = v46;
            v39[3] = vcvtq_f64_s64(v43);
            v39 += 4;
            v40 += 32;
            v41 -= 8;
          }
          while (v41);
          if (v38 != (v38 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              a5->f64[v22] = (double)result->i32[v22];
              ++v22;
            }
            while (v8 != v22);
          }
        }
      }
      else if ((int)v22 < (int)v8)
      {
        goto LABEL_19;
      }
      unsigned int v15 = v23 - 1;
      uint64_t v17 = (float64x2_t *)((char *)v17 + v18);
      result = (int8x16_t *)((char *)result + v19);
      a5 = (float64x2_t *)((char *)a5 + v18);
      unint64_t v20 = (int8x16_t *)((char *)v20 + v19);
      if (!v23) {
        return result;
      }
    }
  }
  if ((int)v8 >= 1)
  {
    uint64_t v11 = &result->i32[2];
    uint64_t v12 = 4 * v9;
    f64 = a5[1].f64;
    uint64_t v14 = 8 * v10;
    do
    {
      *(f64 - 2) = (double)*(v11 - 2);
      if (v8 != 1)
      {
        *(f64 - 1) = (double)*(v11 - 1);
        if (v8 != 2) {
          double *f64 = (double)*v11;
        }
      }
      uint64_t v11 = (int *)((char *)v11 + v12);
      f64 = (double *)((char *)f64 + v14);
      --v7;
    }
    while (v7);
  }
  return result;
}

float32x4_t *sub_10023FEE0(float32x4_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, unsigned int *a7)
{
  unsigned int v7 = a7[1];
  if (!v7) {
    return result;
  }
  uint64_t v8 = *a7;
  unint64_t v9 = a2 >> 2;
  unint64_t v10 = a6 >> 3;
  if ((int)v8 >= 4)
  {
    unsigned int v15 = v7 - 1;
    unint64_t v16 = (v8 - 4);
    uint64_t v17 = a5 + 1;
    uint64_t v18 = 8 * v10;
    uint64_t v19 = 4 * v9;
    unint64_t v20 = result + 1;
    while (1)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      unsigned int v23 = v15;
      int v24 = 4;
      uint64_t v25 = result;
      unint64_t v26 = v17;
      do
      {
        int v27 = v24;
        float32x4_t v28 = *v25++;
        v22 += 4;
        v26[-1] = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
        float64x2_t *v26 = vcvt_hight_f64_f32(v28);
        v21 += 0x400000000;
        v26 += 2;
        v24 += 4;
      }
      while (v22 <= v16);
      if ((int)v16 >= (int)v22)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v27;
        int8x16_t v31 = (float32x2_t *)&result->f32[v27];
        float64x2_t v32 = (float64x2_t *)((char *)a5 + 8 * v27);
        do
        {
          float32x2_t v33 = *v31;
          float32x2_t v34 = v31[1];
          v31 += 2;
          float64x2_t *v32 = vcvtq_f64_f32(v33);
          v32[1] = vcvtq_f64_f32(v34);
          v32 += 2;
          v29 += 4;
        }
        while (v30 + v29 <= (uint64_t)v16);
        LODWORD(v22) = v22 + v29;
        if ((int)v22 < (int)v8)
        {
LABEL_19:
          uint64_t v35 = (int)v22;
          unint64_t v36 = v8 - (int)v22;
          unint64_t v22 = (int)v22;
          if (v36 < 8) {
            goto LABEL_27;
          }
          unint64_t v22 = (v36 & 0xFFFFFFFFFFFFFFF8) + (int)v22;
          uint64_t v37 = (float64x2_t *)((char *)a5 + 8 * v35);
          unint64_t v38 = (float32x2_t *)&v20->f32[v35];
          unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v40 = *(float32x4_t *)v38[-2].f32;
            float64x2_t v41 = vcvtq_f64_f32(*v38);
            float64x2_t v42 = vcvt_hight_f64_f32(*(float32x4_t *)v38->f32);
            *uint64_t v37 = vcvtq_f64_f32(*(float32x2_t *)v40.f32);
            v37[1] = vcvt_hight_f64_f32(v40);
            v37[2] = v41;
            v37[3] = v42;
            v37 += 4;
            v38 += 4;
            v39 -= 8;
          }
          while (v39);
          if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              a5->f64[v22] = result->f32[v22];
              ++v22;
            }
            while (v8 != v22);
          }
        }
      }
      else if ((int)v22 < (int)v8)
      {
        goto LABEL_19;
      }
      unsigned int v15 = v23 - 1;
      uint64_t v17 = (float64x2_t *)((char *)v17 + v18);
      result = (float32x4_t *)((char *)result + v19);
      a5 = (float64x2_t *)((char *)a5 + v18);
      unint64_t v20 = (float32x4_t *)((char *)v20 + v19);
      if (!v23) {
        return result;
      }
    }
  }
  if ((int)v8 >= 1)
  {
    uint64_t v11 = &result->f32[2];
    uint64_t v12 = 4 * v9;
    f64 = a5[1].f64;
    uint64_t v14 = 8 * v10;
    do
    {
      *(f64 - 2) = *(v11 - 2);
      if (v8 != 1)
      {
        *(f64 - 1) = *(v11 - 1);
        if (v8 != 2) {
          double *f64 = *v11;
        }
      }
      uint64_t v11 = (float *)((char *)v11 + v12);
      f64 = (double *)((char *)f64 + v14);
      --v7;
    }
    while (v7);
  }
  return result;
}

char *sub_1002400A8(char *__src, unint64_t a2, int a3, int a4, char *__dst, unint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    unint64_t v9 = __src;
    size_t v10 = 8 * *a7;
    uint64_t v11 = 8 * (a2 >> 3);
    uint64_t v12 = 8 * (a6 >> 3);
    do
    {
      --v7;
      __src = (char *)memcpy(__dst, v9, v10);
      v9 += v11;
      __dst += v12;
    }
    while (v7);
  }
  return __src;
}

void sub_10024011C(unsigned int *a1, uint64_t a2, int a3, double a4, double a5)
{
  sub_1002D6AE8(v64, &off_100494AE0);
  BOOL v10 = fabs(a4 + -1.0) >= 2.22044605e-16;
  int v11 = fabs(a5) >= 2.22044605e-16 || v10;
  if ((a3 & 0x80000000) == 0)
  {
    int v12 = *a1;
    int v13 = *a1 & 0xFF8 | a3 & 7;
    unsigned int v14 = *a1 & 7;
    uint64_t v15 = a3 & 7;
    if (v14 == v15) {
      char v16 = v11;
    }
    else {
      char v16 = 1;
    }
    if (v16) {
      goto LABEL_9;
    }
LABEL_22:
    sub_10025401C(a1, a2);
    goto LABEL_60;
  }
  if (!sub_10029E6C8((_DWORD *)a2))
  {
    int v12 = *a1;
    int v13 = *a1 & 0xFFF;
    unsigned int v14 = *a1 & 7;
    uint64_t v15 = v14;
    if (v11) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
  int v13 = sub_10029AB74((int *)a2, -1);
  int v12 = *a1;
  unsigned int v14 = *a1 & 7;
  uint64_t v15 = v13 & 7;
  if (v14 == v15) {
    char v22 = v11;
  }
  else {
    char v22 = 1;
  }
  if ((v22 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_9:
  int v54 = v12;
  uint64_t v17 = *(void *)(a1 + 1);
  uint64_t v55 = v17;
  signed int v56 = a1[3];
  long long v18 = *((_OWORD *)a1 + 2);
  long long v57 = *((_OWORD *)a1 + 1);
  long long v58 = v18;
  uint64_t v19 = *((void *)a1 + 7);
  uint64_t v59 = *((void *)a1 + 6);
  uint64_t v60 = v19;
  int32x2_t v61 = (char *)&v55 + 4;
  int32x2_t v62 = v63;
  v63[0] = 0;
  v63[1] = 0;
  if (v19)
  {
    atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
    if ((int)a1[1] <= 2)
    {
LABEL_11:
      unint64_t v20 = (void *)*((void *)a1 + 9);
      uint64_t v21 = v62;
      *(void *)int32x2_t v62 = *v20;
      v21[1] = v20[1];
      goto LABEL_20;
    }
  }
  else if ((int)v17 <= 2)
  {
    goto LABEL_11;
  }
  LODWORD(v55) = 0;
  sub_1002931A8((uint64_t)&v54, (uint64_t)a1);
  int v23 = a1[1];
  if (v23 > 2)
  {
    sub_100295520((int *)a2, v23, *((uint64_t **)a1 + 8), v13, 0xFFFFFFFF, 0, 0);
    goto LABEL_24;
  }
LABEL_20:
  int32x2_t v53 = vrev64_s32(**((int32x2_t **)a1 + 8));
  sub_10029E6D4(a2, &v53, v13, -1, 0, 0);
LABEL_24:
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v24 = *(void *)(a2 + 8);
    long long v25 = *(_OWORD *)(v24 + 16);
    long long v45 = *(_OWORD *)v24;
    long long v46 = v25;
    long long v47 = *(_OWORD *)(v24 + 32);
    uint64_t v26 = *(void *)(v24 + 56);
    uint64_t v48 = *(void *)(v24 + 48);
    uint64_t v49 = v26;
    int64x2_t v50 = (char *)&v45 + 8;
    int64x2_t v51 = v52;
    v52[0] = 0;
    v52[1] = 0;
    if (v26) {
      atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
    }
    if (*(int *)(v24 + 4) > 2)
    {
      DWORD1(v45) = 0;
      sub_1002931A8((uint64_t)&v45, v24);
    }
    else
    {
      int v27 = *(void **)(v24 + 72);
      float32x4_t v28 = v51;
      *(void *)int64x2_t v51 = *v27;
      v28[1] = v27[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v45);
  }
  uint64_t v29 = (uint64_t (**)())&off_1004948E0;
  if (v11) {
    uint64_t v29 = off_100494BA0;
  }
  uint64_t v30 = (void (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, _DWORD *, void *))*(&v29[8 * v15] + v14);
  *(double *)int32x2_t v69 = a4;
  *(double *)&v69[1] = a5;
  if (!v30)
  {
    v42[0] = 0;
    v42[1] = 0;
    uint64_t v31 = sub_1002D19D8(v42, 9);
    *(unsigned char *)(v31 + 8) = 48;
    *(void *)uint64_t v31 = *(void *)"func != 0";
    sub_1002D2278(-215, v42, "convertTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 4175);
  }
  unint64_t v32 = (((unint64_t)*a1 >> 3) & 0x1FF) + 1;
  if ((int)a1[1] > 2)
  {
    v68[0] = (uint64_t)&v54;
    v68[1] = (uint64_t)&v45;
    v68[2] = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    sub_10029127C((uint64_t)v42, v68, (uint64_t)&v66, -1);
    int v35 = v32 * v43;
    uint64_t v36 = -1;
    while ((unint64_t)++v36 < v42[4])
    {
      v41[0] = v35;
      v41[1] = 1;
      v30(v66, 1, 0, 0, v67, 1, v41, v69);
      sub_1002912C8((uint64_t)v42);
    }
  }
  else
  {
    int v33 = HIDWORD(v55);
    if ((v54 & v45 & 0x4000) != 0 && (uint64_t v34 = v56 * (uint64_t)(int)v32 * SHIDWORD(v55), v34 == (int)v34)) {
      int v33 = 1;
    }
    else {
      LODWORD(v34) = v56 * v32;
    }
    v44[0] = v34;
    v44[1] = v33;
    v30(v57, v63[0], 0, 0, v46, v52[0], v44, v69);
  }
  if (v49 && atomic_fetch_add((atomic_uint *volatile)(v49 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v45);
  }
  uint64_t v49 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  if (SDWORD1(v45) >= 1)
  {
    uint64_t v37 = 0;
    unint64_t v38 = v50;
    do
      *(_DWORD *)&v38[4 * v37++] = 0;
    while (v37 < SDWORD1(v45));
  }
  if (v51 != v52) {
    j__free(v51);
  }
  if (v60 && atomic_fetch_add((atomic_uint *volatile)(v60 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v54);
  }
  uint64_t v60 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  if ((int)v55 >= 1)
  {
    uint64_t v39 = 0;
    float32x4_t v40 = v61;
    do
      *(_DWORD *)&v40[4 * v39++] = 0;
    while (v39 < (int)v55);
  }
  if (v62 != v63) {
    j__free(v62);
  }
LABEL_60:
  if (v65) {
    sub_1002D6888(v64);
  }
}

void sub_100240638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100240700(uint64_t a1, int *a2, int a3, int a4, uint64_t a5, double a6, double a7)
{
  sub_1002D6AE8(v49, &off_100494B00);
  if ((a3 - 1) < 2 || a3 == 4)
  {
    double v20 = sub_1002CB50C(a1, a3, a5);
    double v21 = a6 / v20;
    double v19 = 0.0;
    if (v20 <= 2.22044605e-16) {
      double v18 = 0.0;
    }
    else {
      double v18 = v21;
    }
  }
  else
  {
    if (a3 != 32)
    {
      long long v41 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&v41, 29), "Unknown/unsupported norm type", 29);
      sub_1002D2278(-5, (uint64_t *)&v41, "normalize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/convert.cpp", 4717);
    }
    *(void *)&long long v41 = 0;
    *(void *)uint64_t v37 = 0;
    sub_1002CACF0(a1, (double *)&v41, (unint64_t *)v37, 0, 0, a5);
    if (a6 <= a7) {
      double v14 = a6;
    }
    else {
      double v14 = a7;
    }
    if (a6 >= a7) {
      double v15 = a6;
    }
    else {
      double v15 = a7;
    }
    double v16 = v15 - v14;
    double v17 = 0.0;
    if (*(double *)v37 - *(double *)&v41 > 2.22044605e-16) {
      double v17 = 1.0 / (*(double *)v37 - *(double *)&v41);
    }
    double v18 = v16 * v17;
    double v19 = v14 - *(double *)&v41 * (v16 * v17);
  }
  char v22 = sub_10029AB74((int *)a1, -1);
  if (a4 < 0)
  {
    char v23 = v22;
    if (sub_10029E6C8(a2)) {
      a4 = sub_10029D660(a2, -1);
    }
    else {
      a4 = v23 & 7;
    }
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v24 = *(void *)(a1 + 8);
    long long v25 = *(_OWORD *)(v24 + 16);
    long long v41 = *(_OWORD *)v24;
    long long v26 = *(_OWORD *)(v24 + 32);
    long long v42 = v25;
    long long v43 = v26;
    uint64_t v27 = *(void *)(v24 + 56);
    uint64_t v44 = *(void *)(v24 + 48);
    uint64_t v45 = v27;
    long long v46 = (char *)&v41 + 8;
    long long v47 = v48;
    v48[0] = 0;
    v48[1] = 0;
    if (v27) {
      atomic_fetch_add((atomic_uint *volatile)(v27 + 20), 1u);
    }
    if (*(int *)(v24 + 4) > 2)
    {
      DWORD1(v41) = 0;
      sub_1002931A8((uint64_t)&v41, v24);
    }
    else
    {
      float32x4_t v28 = *(void **)(v24 + 72);
      uint64_t v29 = v47;
      *(void *)long long v47 = *v28;
      v29[1] = v28[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v41);
  }
  if (sub_10029D69C(a5))
  {
    sub_10024011C((unsigned int *)&v41, (uint64_t)a2, a4, v18, v19);
  }
  else
  {
    *(_DWORD *)uint64_t v37 = 1124007936;
    memset(&v37[4], 0, 60);
    unint64_t v38 = &v37[8];
    uint64_t v39 = v40;
    v40[0] = 0;
    v40[1] = 0;
    int v34 = 33619968;
    int v35 = v37;
    uint64_t v36 = 0;
    sub_10024011C((unsigned int *)&v41, (uint64_t)&v34, a4, v18, v19);
    sub_100254AF8((uint64_t)v37, (uint64_t)a2, a5);
    if (*(void *)&v37[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v37[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v37);
    }
    *(void *)&v37[56] = 0;
    memset(&v37[16], 0, 32);
    if (*(int *)&v37[4] >= 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = v38;
      do
        *(_DWORD *)&v31[4 * v30++] = 0;
      while (v30 < *(int *)&v37[4]);
    }
    if (v39 != v40) {
      j__free(v39);
    }
  }
  if (v45 && atomic_fetch_add((atomic_uint *volatile)(v45 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v41);
  }
  uint64_t v45 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  if (SDWORD1(v41) >= 1)
  {
    uint64_t v32 = 0;
    int v33 = v46;
    do
      *(_DWORD *)&v33[4 * v32++] = 0;
    while (v32 < SDWORD1(v41));
  }
  if (v47 != v48) {
    j__free(v47);
  }
  if (v50) {
    sub_1002D6888(v49);
  }
}

void sub_100240ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1002D1A1C((uint64_t *)va);
  sub_10020FA00(v17 - 80);
  _Unwind_Resume(a1);
}

unsigned char **sub_100240B84(unsigned char **result, uint64_t a2, unsigned char **a3, uint64_t a4, signed int a5, int a6)
{
  if (a6 >= 1)
  {
    if (a5 > 1)
    {
      int v9 = a5 - 2;
      uint64_t v10 = a6;
      if (((a5 - 2) & 0xFFFFFFFE) + 2 >= a5)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          double v19 = result[i];
          double v20 = a3[i];
          uint64_t v21 = *(int *)(a4 + 4 * i);
          if (v19)
          {
            int v22 = 0;
            uint64_t v23 = *(int *)(a2 + 4 * i);
            do
            {
              char v24 = v19[v23];
              *double v20 = *v19;
              v20[v21] = v24;
              v22 += 2;
              v19 += 2 * v23;
              v20 += 2 * v21;
            }
            while (v22 <= v9);
          }
          else
          {
            do
            {
              v20[v21] = 0;
              *double v20 = 0;
              LODWORD(v19) = v19 + 2;
              v20 += 2 * (int)v21;
            }
            while ((int)v19 <= v9);
          }
        }
      }
      else
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          int v12 = result[j];
          int v13 = a3[j];
          uint64_t v14 = *(int *)(a4 + 4 * j);
          if (v12)
          {
            int v15 = 0;
            uint64_t v16 = *(int *)(a2 + 4 * j);
            do
            {
              char v17 = v12[v16];
              *int v13 = *v12;
              v13[v14] = v17;
              v15 += 2;
              v12 += 2 * v16;
              v13 += 2 * v14;
            }
            while (v15 <= v9);
            *int v13 = *v12;
          }
          else
          {
            do
            {
              v13[v14] = 0;
              *int v13 = 0;
              LODWORD(v12) = v12 + 2;
              v13 += 2 * (int)v14;
            }
            while ((int)v12 <= v9);
            *int v13 = 0;
          }
        }
      }
    }
    else if (a5 == 1)
    {
      uint64_t v6 = a6;
      do
      {
        uint64_t v8 = *result;
        if (*result) {
          LOBYTE(v8) = *v8;
        }
        int v7 = *a3++;
        *int v7 = (_BYTE)v8;
        ++result;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

_WORD **sub_100240CF4(_WORD **result, uint64_t a2, _WORD **a3, uint64_t a4, signed int a5, int a6)
{
  if (a6 >= 1)
  {
    if (a5 > 1)
    {
      int v9 = a5 - 2;
      uint64_t v10 = a6;
      if (((a5 - 2) & 0xFFFFFFFE) + 2 >= a5)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          double v19 = result[i];
          double v20 = a3[i];
          uint64_t v21 = *(int *)(a4 + 4 * i);
          if (v19)
          {
            int v22 = 0;
            uint64_t v23 = *(int *)(a2 + 4 * i);
            do
            {
              __int16 v24 = v19[v23];
              *double v20 = *v19;
              v20[v21] = v24;
              v22 += 2;
              v20 += 2 * v21;
              v19 += 2 * v23;
            }
            while (v22 <= v9);
          }
          else
          {
            do
            {
              v20[v21] = 0;
              *double v20 = 0;
              LODWORD(v19) = v19 + 2;
              v20 += 2 * (int)v21;
            }
            while ((int)v19 <= v9);
          }
        }
      }
      else
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          int v12 = result[j];
          int v13 = a3[j];
          uint64_t v14 = *(int *)(a4 + 4 * j);
          if (v12)
          {
            int v15 = 0;
            uint64_t v16 = *(int *)(a2 + 4 * j);
            do
            {
              __int16 v17 = v12[v16];
              *int v13 = *v12;
              v13[v14] = v17;
              v15 += 2;
              v13 += 2 * v14;
              v12 += 2 * v16;
            }
            while (v15 <= v9);
            *int v13 = *v12;
          }
          else
          {
            do
            {
              v13[v14] = 0;
              *int v13 = 0;
              LODWORD(v12) = v12 + 2;
              v13 += 2 * (int)v14;
            }
            while ((int)v12 <= v9);
            *int v13 = 0;
          }
        }
      }
    }
    else if (a5 == 1)
    {
      uint64_t v6 = a6;
      do
      {
        uint64_t v8 = *result;
        if (*result) {
          LOWORD(v8) = *v8;
        }
        int v7 = *a3++;
        *int v7 = (_WORD)v8;
        ++result;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

_DWORD **sub_100240E64(_DWORD **result, uint64_t a2, _DWORD **a3, uint64_t a4, signed int a5, int a6)
{
  if (a6 >= 1)
  {
    if (a5 > 1)
    {
      int v9 = a5 - 2;
      uint64_t v10 = a6;
      if (((a5 - 2) & 0xFFFFFFFE) + 2 >= a5)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          double v19 = result[i];
          double v20 = a3[i];
          uint64_t v21 = *(int *)(a4 + 4 * i);
          if (v19)
          {
            int v22 = 0;
            uint64_t v23 = *(int *)(a2 + 4 * i);
            do
            {
              int v24 = v19[v23];
              *double v20 = *v19;
              v20[v21] = v24;
              v22 += 2;
              v20 += 2 * v21;
              v19 += 2 * v23;
            }
            while (v22 <= v9);
          }
          else
          {
            do
            {
              v20[v21] = 0;
              *double v20 = 0;
              LODWORD(v19) = v19 + 2;
              v20 += 2 * (int)v21;
            }
            while ((int)v19 <= v9);
          }
        }
      }
      else
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          int v12 = result[j];
          int v13 = a3[j];
          uint64_t v14 = *(int *)(a4 + 4 * j);
          if (v12)
          {
            int v15 = 0;
            uint64_t v16 = *(int *)(a2 + 4 * j);
            do
            {
              int v17 = v12[v16];
              *int v13 = *v12;
              v13[v14] = v17;
              v15 += 2;
              v13 += 2 * v14;
              v12 += 2 * v16;
            }
            while (v15 <= v9);
            *int v13 = *v12;
          }
          else
          {
            do
            {
              v13[v14] = 0;
              *int v13 = 0;
              LODWORD(v12) = v12 + 2;
              v13 += 2 * (int)v14;
            }
            while ((int)v12 <= v9);
            *int v13 = 0;
          }
        }
      }
    }
    else if (a5 == 1)
    {
      uint64_t v6 = a6;
      do
      {
        uint64_t v8 = *result;
        if (*result) {
          LODWORD(v8) = *v8;
        }
        int v7 = *a3++;
        *int v7 = v8;
        ++result;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

void **sub_100240FD4(void **result, uint64_t a2, void **a3, uint64_t a4, signed int a5, int a6)
{
  if (a6 >= 1)
  {
    if (a5 > 1)
    {
      int v9 = a5 - 2;
      uint64_t v10 = a6;
      if (((a5 - 2) & 0xFFFFFFFE) + 2 >= a5)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          double v19 = result[i];
          double v20 = a3[i];
          uint64_t v21 = *(int *)(a4 + 4 * i);
          if (v19)
          {
            int v22 = 0;
            uint64_t v23 = *(int *)(a2 + 4 * i);
            do
            {
              uint64_t v24 = v19[v23];
              *double v20 = *v19;
              v20[v21] = v24;
              v22 += 2;
              v20 += 2 * v21;
              v19 += 2 * v23;
            }
            while (v22 <= v9);
          }
          else
          {
            do
            {
              v20[v21] = 0;
              *double v20 = 0;
              LODWORD(v19) = v19 + 2;
              v20 += 2 * (int)v21;
            }
            while ((int)v19 <= v9);
          }
        }
      }
      else
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          int v12 = result[j];
          int v13 = a3[j];
          uint64_t v14 = *(int *)(a4 + 4 * j);
          if (v12)
          {
            int v15 = 0;
            uint64_t v16 = *(int *)(a2 + 4 * j);
            do
            {
              uint64_t v17 = v12[v16];
              *int v13 = *v12;
              v13[v14] = v17;
              v15 += 2;
              v13 += 2 * v14;
              v12 += 2 * v16;
            }
            while (v15 <= v9);
            *int v13 = *v12;
          }
          else
          {
            do
            {
              v13[v14] = 0;
              *int v13 = 0;
              LODWORD(v12) = v12 + 2;
              v13 += 2 * (int)v14;
            }
            while ((int)v12 <= v9);
            *int v13 = 0;
          }
        }
      }
    }
    else if (a5 == 1)
    {
      uint64_t v6 = a6;
      do
      {
        uint64_t v8 = *result;
        if (*result) {
          uint64_t v8 = (void *)*v8;
        }
        int v7 = *a3++;
        *int v7 = v8;
        ++result;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_100241144(uint64_t a1, int8x16_t *a2, uint64_t a3, int a4)
{
  int v4 = a4 - 16;
  if (a4 < 16) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v8 = a2 + 2;
  do
  {
    int8x16_t v9 = v8[-2];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v71 = v9;
      int v19 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v9 = v71;
      *(void *)&long long v20 = 0x8000000080000000;
      *((void *)&v20 + 1) = 0x8000000080000000;
      if (v19)
      {
        xmmword_1004D2D50 = v20;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v9 = v71;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v72 = v9;
      int v21 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v9 = v72;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      if (v21)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v9 = v72;
      }
    }
    int8x16_t v10 = (int8x16_t)xmmword_1004D2D70;
    int8x16_t v11 = (int8x16_t)xmmword_1004D2D50;
    int8x16_t v12 = v8[-1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v65 = v12;
      int8x16_t v73 = v9;
      int8x16_t v53 = v11;
      int8x16_t v59 = v10;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v11 = v53;
      int8x16_t v10 = v59;
      int8x16_t v12 = v65;
      int8x16_t v9 = v73;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      if (v23)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v11 = v53;
        int8x16_t v10 = v59;
        int8x16_t v12 = v65;
        int8x16_t v9 = v73;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v66 = v12;
      int8x16_t v74 = v9;
      int8x16_t v54 = v11;
      int8x16_t v60 = v10;
      int v25 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v11 = v54;
      int8x16_t v10 = v60;
      int8x16_t v12 = v66;
      int8x16_t v9 = v74;
      *(void *)&long long v26 = 0x3F0000003F000000;
      *((void *)&v26 + 1) = 0x3F0000003F000000;
      if (v25)
      {
        xmmword_1004D2D70 = v26;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v11 = v54;
        int8x16_t v10 = v60;
        int8x16_t v12 = v66;
        int8x16_t v9 = v74;
      }
    }
    int8x16_t v13 = (int8x16_t)xmmword_1004D2D70;
    int8x16_t v14 = (int8x16_t)xmmword_1004D2D50;
    int8x16_t v15 = *v8;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v67 = v12;
      int8x16_t v75 = v9;
      int8x16_t v55 = v11;
      int8x16_t v61 = v10;
      int8x16_t v45 = v13;
      int8x16_t v49 = v15;
      int8x16_t v41 = v14;
      int v27 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v14 = v41;
      int8x16_t v13 = v45;
      int8x16_t v15 = v49;
      int8x16_t v11 = v55;
      int8x16_t v10 = v61;
      int8x16_t v12 = v67;
      int8x16_t v9 = v75;
      *(void *)&long long v28 = 0x8000000080000000;
      *((void *)&v28 + 1) = 0x8000000080000000;
      if (v27)
      {
        xmmword_1004D2D50 = v28;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v14 = v41;
        int8x16_t v13 = v45;
        int8x16_t v15 = v49;
        int8x16_t v11 = v55;
        int8x16_t v10 = v61;
        int8x16_t v12 = v67;
        int8x16_t v9 = v75;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v68 = v12;
      int8x16_t v76 = v9;
      int8x16_t v56 = v11;
      int8x16_t v62 = v10;
      int8x16_t v46 = v13;
      int8x16_t v50 = v15;
      int8x16_t v42 = v14;
      int v29 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v14 = v42;
      int8x16_t v13 = v46;
      int8x16_t v15 = v50;
      int8x16_t v11 = v56;
      int8x16_t v10 = v62;
      int8x16_t v12 = v68;
      int8x16_t v9 = v76;
      *(void *)&long long v30 = 0x3F0000003F000000;
      *((void *)&v30 + 1) = 0x3F0000003F000000;
      if (v29)
      {
        xmmword_1004D2D70 = v30;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v14 = v42;
        int8x16_t v13 = v46;
        int8x16_t v15 = v50;
        int8x16_t v11 = v56;
        int8x16_t v10 = v62;
        int8x16_t v12 = v68;
        int8x16_t v9 = v76;
      }
    }
    int8x16_t v16 = (int8x16_t)xmmword_1004D2D70;
    int8x16_t v17 = (int8x16_t)xmmword_1004D2D50;
    int8x16_t v18 = v8[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v69 = v12;
      int8x16_t v77 = v9;
      int8x16_t v57 = v11;
      int8x16_t v63 = v10;
      int8x16_t v47 = v13;
      int8x16_t v51 = v15;
      int8x16_t v39 = v18;
      int8x16_t v43 = v14;
      int8x16_t v35 = v17;
      int8x16_t v37 = v16;
      int v31 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v17 = v35;
      int8x16_t v16 = v37;
      int8x16_t v18 = v39;
      int8x16_t v14 = v43;
      int8x16_t v13 = v47;
      int8x16_t v15 = v51;
      int8x16_t v11 = v57;
      int8x16_t v10 = v63;
      int8x16_t v12 = v69;
      int8x16_t v9 = v77;
      *(void *)&long long v32 = 0x8000000080000000;
      *((void *)&v32 + 1) = 0x8000000080000000;
      if (v31)
      {
        xmmword_1004D2D50 = v32;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v17 = v35;
        int8x16_t v16 = v37;
        int8x16_t v18 = v39;
        int8x16_t v14 = v43;
        int8x16_t v13 = v47;
        int8x16_t v15 = v51;
        int8x16_t v11 = v57;
        int8x16_t v10 = v63;
        int8x16_t v12 = v69;
        int8x16_t v9 = v77;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v70 = v12;
      int8x16_t v78 = v9;
      int8x16_t v58 = v11;
      int8x16_t v64 = v10;
      int8x16_t v48 = v13;
      int8x16_t v52 = v15;
      int8x16_t v40 = v18;
      int8x16_t v44 = v14;
      int8x16_t v36 = v17;
      int8x16_t v38 = v16;
      int v33 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v17 = v36;
      int8x16_t v16 = v38;
      int8x16_t v18 = v40;
      int8x16_t v14 = v44;
      int8x16_t v13 = v48;
      int8x16_t v15 = v52;
      int8x16_t v11 = v58;
      int8x16_t v10 = v64;
      int8x16_t v12 = v70;
      int8x16_t v9 = v78;
      *(void *)&long long v34 = 0x3F0000003F000000;
      *((void *)&v34 + 1) = 0x3F0000003F000000;
      if (v33)
      {
        xmmword_1004D2D70 = v34;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v17 = v36;
        int8x16_t v16 = v38;
        int8x16_t v18 = v40;
        int8x16_t v14 = v44;
        int8x16_t v13 = v48;
        int8x16_t v15 = v52;
        int8x16_t v11 = v58;
        int8x16_t v10 = v64;
        int8x16_t v12 = v70;
        int8x16_t v9 = v78;
      }
    }
    *(uint8x16_t *)(a3 + v5) = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v9, (float32x4_t)vorrq_s8(vandq_s8(v11, v9), v10)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v12, (float32x4_t)vorrq_s8(vandq_s8(v14, v12), v13))))), (uint16x8_t)vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v17, v15), v16)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v18,
                                                   (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_1004D2D50, v18), (int8x16_t)xmmword_1004D2D70)))));
    v5 += 16;
    v8 += 4;
  }
  while (v4 >= (int)v5);
  return v5;
}

uint64_t sub_1002414B4(uint64_t a1, float64x2_t *a2, uint64_t a3, int a4)
{
  int v4 = a4 - 8;
  if (a4 < 8) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = a2 + 2;
  int v7 = (int8x16_t *)&unk_1004D2000;
  uint64_t v8 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float64x2_t v9 = v6[-2];
    float64x2_t v10 = v6[-1];
    float64x2_t v12 = *v6;
    float64x2_t v11 = v6[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v57 = result;
      int8x16_t v61 = v6;
      uint64_t v49 = a3;
      int v53 = v4;
      float64x2_t v45 = v10;
      float64x2_t v37 = v9;
      float64x2_t v41 = v11;
      float64x2_t v33 = v12;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float64x2_t v12 = v33;
      float64x2_t v9 = v37;
      float64x2_t v11 = v41;
      float64x2_t v10 = v45;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      int v4 = v53;
      a3 = v49;
      int v19 = v17;
      uint64_t result = v57;
      uint64_t v6 = v61;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float64x2_t v12 = v33;
        float64x2_t v9 = v37;
        float64x2_t v11 = v41;
        float64x2_t v10 = v45;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v57;
        uint64_t v6 = v61;
        int v4 = v53;
        a3 = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v58 = result;
      int8x16_t v62 = v6;
      uint64_t v50 = a3;
      int v54 = v4;
      float64x2_t v46 = v10;
      float64x2_t v38 = v9;
      float64x2_t v42 = v11;
      float64x2_t v34 = v12;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float64x2_t v12 = v34;
      float64x2_t v9 = v38;
      float64x2_t v11 = v42;
      float64x2_t v10 = v46;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      int v4 = v54;
      a3 = v50;
      int v22 = v20;
      uint64_t result = v58;
      uint64_t v6 = v62;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float64x2_t v12 = v34;
        float64x2_t v9 = v38;
        float64x2_t v11 = v42;
        float64x2_t v10 = v46;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v58;
        uint64_t v6 = v62;
        int v4 = v54;
        a3 = v50;
      }
    }
    int8x16_t v13 = v8[215];
    int8x16_t v14 = v7[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v59 = result;
      int8x16_t v63 = v6;
      uint64_t v51 = a3;
      int v55 = v4;
      float64x2_t v47 = v10;
      float64x2_t v39 = v9;
      float64x2_t v43 = v11;
      int8x16_t v31 = v13;
      float64x2_t v35 = v12;
      int8x16_t v29 = v14;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v14 = v29;
      int8x16_t v13 = v31;
      float64x2_t v12 = v35;
      float64x2_t v9 = v39;
      float64x2_t v11 = v43;
      float64x2_t v10 = v47;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      int v4 = v55;
      a3 = v51;
      int v25 = v23;
      uint64_t result = v59;
      uint64_t v6 = v63;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v14 = v29;
        int8x16_t v13 = v31;
        float64x2_t v12 = v35;
        float64x2_t v9 = v39;
        float64x2_t v11 = v43;
        float64x2_t v10 = v47;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v59;
        uint64_t v6 = v63;
        int v4 = v55;
        a3 = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v60 = result;
      int8x16_t v64 = v6;
      uint64_t v52 = a3;
      int v56 = v4;
      float64x2_t v48 = v10;
      float64x2_t v40 = v9;
      float64x2_t v44 = v11;
      int8x16_t v32 = v13;
      float64x2_t v36 = v12;
      int8x16_t v30 = v14;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v14 = v30;
      int8x16_t v13 = v32;
      float64x2_t v12 = v36;
      float64x2_t v9 = v40;
      float64x2_t v11 = v44;
      float64x2_t v10 = v48;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      int v4 = v56;
      a3 = v52;
      int v28 = v26;
      uint64_t result = v60;
      uint64_t v6 = v64;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v14 = v30;
        int8x16_t v13 = v32;
        float64x2_t v12 = v36;
        float64x2_t v9 = v40;
        float64x2_t v11 = v44;
        float64x2_t v10 = v48;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v60;
        uint64_t v6 = v64;
        int v4 = v56;
        a3 = v52;
      }
    }
    int8x16_t v15 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
    int8x16_t v16 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
    *(int8x8_t *)(a3 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v14, v15), v13)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v7[213], v16), v8[215])))));
    result += 8;
    v6 += 4;
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_100241838(uint64_t a1, int8x16_t *a2, uint64_t a3, int a4)
{
  int v4 = a4 - 16;
  if (a4 < 16) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v8 = a2 + 2;
  do
  {
    int8x16_t v9 = v8[-2];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v71 = v9;
      int v19 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v9 = v71;
      *(void *)&long long v20 = 0x8000000080000000;
      *((void *)&v20 + 1) = 0x8000000080000000;
      if (v19)
      {
        xmmword_1004D2D50 = v20;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v9 = v71;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v72 = v9;
      int v21 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v9 = v72;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      if (v21)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v9 = v72;
      }
    }
    int8x16_t v10 = (int8x16_t)xmmword_1004D2D70;
    int8x16_t v11 = (int8x16_t)xmmword_1004D2D50;
    int8x16_t v12 = v8[-1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v65 = v12;
      int8x16_t v73 = v9;
      int8x16_t v53 = v11;
      int8x16_t v59 = v10;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v11 = v53;
      int8x16_t v10 = v59;
      int8x16_t v12 = v65;
      int8x16_t v9 = v73;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      if (v23)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v11 = v53;
        int8x16_t v10 = v59;
        int8x16_t v12 = v65;
        int8x16_t v9 = v73;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v66 = v12;
      int8x16_t v74 = v9;
      int8x16_t v54 = v11;
      int8x16_t v60 = v10;
      int v25 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v11 = v54;
      int8x16_t v10 = v60;
      int8x16_t v12 = v66;
      int8x16_t v9 = v74;
      *(void *)&long long v26 = 0x3F0000003F000000;
      *((void *)&v26 + 1) = 0x3F0000003F000000;
      if (v25)
      {
        xmmword_1004D2D70 = v26;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v11 = v54;
        int8x16_t v10 = v60;
        int8x16_t v12 = v66;
        int8x16_t v9 = v74;
      }
    }
    int8x16_t v13 = (int8x16_t)xmmword_1004D2D70;
    int8x16_t v14 = (int8x16_t)xmmword_1004D2D50;
    int8x16_t v15 = *v8;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v67 = v12;
      int8x16_t v75 = v9;
      int8x16_t v55 = v11;
      int8x16_t v61 = v10;
      int8x16_t v45 = v13;
      int8x16_t v49 = v15;
      int8x16_t v41 = v14;
      int v27 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v14 = v41;
      int8x16_t v13 = v45;
      int8x16_t v15 = v49;
      int8x16_t v11 = v55;
      int8x16_t v10 = v61;
      int8x16_t v12 = v67;
      int8x16_t v9 = v75;
      *(void *)&long long v28 = 0x8000000080000000;
      *((void *)&v28 + 1) = 0x8000000080000000;
      if (v27)
      {
        xmmword_1004D2D50 = v28;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v14 = v41;
        int8x16_t v13 = v45;
        int8x16_t v15 = v49;
        int8x16_t v11 = v55;
        int8x16_t v10 = v61;
        int8x16_t v12 = v67;
        int8x16_t v9 = v75;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v68 = v12;
      int8x16_t v76 = v9;
      int8x16_t v56 = v11;
      int8x16_t v62 = v10;
      int8x16_t v46 = v13;
      int8x16_t v50 = v15;
      int8x16_t v42 = v14;
      int v29 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v14 = v42;
      int8x16_t v13 = v46;
      int8x16_t v15 = v50;
      int8x16_t v11 = v56;
      int8x16_t v10 = v62;
      int8x16_t v12 = v68;
      int8x16_t v9 = v76;
      *(void *)&long long v30 = 0x3F0000003F000000;
      *((void *)&v30 + 1) = 0x3F0000003F000000;
      if (v29)
      {
        xmmword_1004D2D70 = v30;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v14 = v42;
        int8x16_t v13 = v46;
        int8x16_t v15 = v50;
        int8x16_t v11 = v56;
        int8x16_t v10 = v62;
        int8x16_t v12 = v68;
        int8x16_t v9 = v76;
      }
    }
    int8x16_t v16 = (int8x16_t)xmmword_1004D2D70;
    int8x16_t v17 = (int8x16_t)xmmword_1004D2D50;
    int8x16_t v18 = v8[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v69 = v12;
      int8x16_t v77 = v9;
      int8x16_t v57 = v11;
      int8x16_t v63 = v10;
      int8x16_t v47 = v13;
      int8x16_t v51 = v15;
      int8x16_t v39 = v18;
      int8x16_t v43 = v14;
      int8x16_t v35 = v17;
      int8x16_t v37 = v16;
      int v31 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v17 = v35;
      int8x16_t v16 = v37;
      int8x16_t v18 = v39;
      int8x16_t v14 = v43;
      int8x16_t v13 = v47;
      int8x16_t v15 = v51;
      int8x16_t v11 = v57;
      int8x16_t v10 = v63;
      int8x16_t v12 = v69;
      int8x16_t v9 = v77;
      *(void *)&long long v32 = 0x8000000080000000;
      *((void *)&v32 + 1) = 0x8000000080000000;
      if (v31)
      {
        xmmword_1004D2D50 = v32;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v17 = v35;
        int8x16_t v16 = v37;
        int8x16_t v18 = v39;
        int8x16_t v14 = v43;
        int8x16_t v13 = v47;
        int8x16_t v15 = v51;
        int8x16_t v11 = v57;
        int8x16_t v10 = v63;
        int8x16_t v12 = v69;
        int8x16_t v9 = v77;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int8x16_t v70 = v12;
      int8x16_t v78 = v9;
      int8x16_t v58 = v11;
      int8x16_t v64 = v10;
      int8x16_t v48 = v13;
      int8x16_t v52 = v15;
      int8x16_t v40 = v18;
      int8x16_t v44 = v14;
      int8x16_t v36 = v17;
      int8x16_t v38 = v16;
      int v33 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v17 = v36;
      int8x16_t v16 = v38;
      int8x16_t v18 = v40;
      int8x16_t v14 = v44;
      int8x16_t v13 = v48;
      int8x16_t v15 = v52;
      int8x16_t v11 = v58;
      int8x16_t v10 = v64;
      int8x16_t v12 = v70;
      int8x16_t v9 = v78;
      *(void *)&long long v34 = 0x3F0000003F000000;
      *((void *)&v34 + 1) = 0x3F0000003F000000;
      if (v33)
      {
        xmmword_1004D2D70 = v34;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v17 = v36;
        int8x16_t v16 = v38;
        int8x16_t v18 = v40;
        int8x16_t v14 = v44;
        int8x16_t v13 = v48;
        int8x16_t v15 = v52;
        int8x16_t v11 = v58;
        int8x16_t v10 = v64;
        int8x16_t v12 = v70;
        int8x16_t v9 = v78;
      }
    }
    *(int8x16_t *)(a3 + v5) = vqmovn_high_s16(vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v9, (float32x4_t)vorrq_s8(vandq_s8(v11, v9), v10)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v12, (float32x4_t)vorrq_s8(vandq_s8(v14, v12), v13))))), vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v17, v15), v16)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v18, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_1004D2D50, v18), (int8x16_t)xmmword_1004D2D70)))));
    v5 += 16;
    v8 += 4;
  }
  while (v4 >= (int)v5);
  return v5;
}

uint64_t sub_100241BA8(uint64_t a1, float64x2_t *a2, uint64_t a3, int a4)
{
  int v4 = a4 - 8;
  if (a4 < 8) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = a2 + 2;
  int v7 = (int8x16_t *)&unk_1004D2000;
  uint64_t v8 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float64x2_t v9 = v6[-2];
    float64x2_t v10 = v6[-1];
    float64x2_t v12 = *v6;
    float64x2_t v11 = v6[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v57 = result;
      int8x16_t v61 = v6;
      uint64_t v49 = a3;
      int v53 = v4;
      float64x2_t v45 = v10;
      float64x2_t v37 = v9;
      float64x2_t v41 = v11;
      float64x2_t v33 = v12;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float64x2_t v12 = v33;
      float64x2_t v9 = v37;
      float64x2_t v11 = v41;
      float64x2_t v10 = v45;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      int v4 = v53;
      a3 = v49;
      int v19 = v17;
      uint64_t result = v57;
      uint64_t v6 = v61;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float64x2_t v12 = v33;
        float64x2_t v9 = v37;
        float64x2_t v11 = v41;
        float64x2_t v10 = v45;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v57;
        uint64_t v6 = v61;
        int v4 = v53;
        a3 = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v58 = result;
      int8x16_t v62 = v6;
      uint64_t v50 = a3;
      int v54 = v4;
      float64x2_t v46 = v10;
      float64x2_t v38 = v9;
      float64x2_t v42 = v11;
      float64x2_t v34 = v12;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float64x2_t v12 = v34;
      float64x2_t v9 = v38;
      float64x2_t v11 = v42;
      float64x2_t v10 = v46;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      int v4 = v54;
      a3 = v50;
      int v22 = v20;
      uint64_t result = v58;
      uint64_t v6 = v62;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float64x2_t v12 = v34;
        float64x2_t v9 = v38;
        float64x2_t v11 = v42;
        float64x2_t v10 = v46;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v58;
        uint64_t v6 = v62;
        int v4 = v54;
        a3 = v50;
      }
    }
    int8x16_t v13 = v8[215];
    int8x16_t v14 = v7[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v59 = result;
      int8x16_t v63 = v6;
      uint64_t v51 = a3;
      int v55 = v4;
      float64x2_t v47 = v10;
      float64x2_t v39 = v9;
      float64x2_t v43 = v11;
      int8x16_t v31 = v13;
      float64x2_t v35 = v12;
      int8x16_t v29 = v14;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v14 = v29;
      int8x16_t v13 = v31;
      float64x2_t v12 = v35;
      float64x2_t v9 = v39;
      float64x2_t v11 = v43;
      float64x2_t v10 = v47;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      int v4 = v55;
      a3 = v51;
      int v25 = v23;
      uint64_t result = v59;
      uint64_t v6 = v63;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v14 = v29;
        int8x16_t v13 = v31;
        float64x2_t v12 = v35;
        float64x2_t v9 = v39;
        float64x2_t v11 = v43;
        float64x2_t v10 = v47;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v59;
        uint64_t v6 = v63;
        int v4 = v55;
        a3 = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v60 = result;
      int8x16_t v64 = v6;
      uint64_t v52 = a3;
      int v56 = v4;
      float64x2_t v48 = v10;
      float64x2_t v40 = v9;
      float64x2_t v44 = v11;
      int8x16_t v32 = v13;
      float64x2_t v36 = v12;
      int8x16_t v30 = v14;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v14 = v30;
      int8x16_t v13 = v32;
      float64x2_t v12 = v36;
      float64x2_t v9 = v40;
      float64x2_t v11 = v44;
      float64x2_t v10 = v48;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      int v4 = v56;
      a3 = v52;
      int v28 = v26;
      uint64_t result = v60;
      uint64_t v6 = v64;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v14 = v30;
        int8x16_t v13 = v32;
        float64x2_t v12 = v36;
        float64x2_t v9 = v40;
        float64x2_t v11 = v44;
        float64x2_t v10 = v48;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v60;
        uint64_t v6 = v64;
        int v4 = v56;
        a3 = v52;
      }
    }
    int8x16_t v15 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
    int8x16_t v16 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
    *(int8x8_t *)(a3 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v14, v15), v13)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v7[213], v16), v8[215])))));
    result += 8;
    v6 += 4;
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_100241F2C(uint64_t a1, int8x16_t *a2, int16x8_t *a3, int a4)
{
  int v4 = a4 - 8;
  if (a4 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v6 = a2 + 1;
  int v7 = (int8x16_t *)&unk_1004D2000;
  uint64_t v8 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int8x16_t v9 = v6[-1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v39 = result;
      float64x2_t v35 = a3;
      int v31 = v4;
      float64x2_t v43 = v6;
      int8x16_t v27 = v9;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v9 = v27;
      *(void *)&long long v13 = 0x8000000080000000;
      *((void *)&v13 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v43;
      int v4 = v31;
      a3 = v35;
      int v14 = result;
      LODWORD(result) = v39;
      if (v14)
      {
        xmmword_1004D2D50 = v13;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v9 = v27;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v43;
        int v4 = v31;
        LODWORD(result) = v39;
        a3 = v35;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v40 = result;
      float64x2_t v36 = a3;
      int v32 = v4;
      float64x2_t v44 = v6;
      int8x16_t v28 = v9;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v9 = v28;
      *(void *)&long long v15 = 0x3F0000003F000000;
      *((void *)&v15 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v44;
      int v4 = v32;
      a3 = v36;
      int v16 = result;
      LODWORD(result) = v40;
      if (v16)
      {
        xmmword_1004D2D70 = v15;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v9 = v28;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v44;
        int v4 = v32;
        LODWORD(result) = v40;
        a3 = v36;
      }
    }
    int8x16_t v10 = v8[215];
    int8x16_t v11 = v7[213];
    int8x16_t v12 = *v6;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v41 = result;
      float64x2_t v37 = a3;
      int v33 = v4;
      float64x2_t v45 = v6;
      int8x16_t v25 = v12;
      int8x16_t v29 = v9;
      int8x16_t v21 = v11;
      int8x16_t v23 = v10;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v11 = v21;
      int8x16_t v10 = v23;
      int8x16_t v12 = v25;
      int8x16_t v9 = v29;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v45;
      int v4 = v33;
      a3 = v37;
      int v18 = result;
      LODWORD(result) = v41;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v11 = v21;
        int8x16_t v10 = v23;
        int8x16_t v12 = v25;
        int8x16_t v9 = v29;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v45;
        int v4 = v33;
        LODWORD(result) = v41;
        a3 = v37;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v42 = result;
      float64x2_t v38 = a3;
      int v34 = v4;
      float64x2_t v46 = v6;
      int8x16_t v26 = v12;
      int8x16_t v30 = v9;
      int8x16_t v22 = v11;
      int8x16_t v24 = v10;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v11 = v22;
      int8x16_t v10 = v24;
      int8x16_t v12 = v26;
      int8x16_t v9 = v30;
      *(void *)&long long v19 = 0x3F0000003F000000;
      *((void *)&v19 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v46;
      int v4 = v34;
      a3 = v38;
      int v20 = result;
      LODWORD(result) = v42;
      if (v20)
      {
        xmmword_1004D2D70 = v19;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v11 = v22;
        int8x16_t v10 = v24;
        int8x16_t v12 = v26;
        int8x16_t v9 = v30;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v46;
        int v4 = v34;
        LODWORD(result) = v42;
        a3 = v38;
      }
    }
    *a3++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v9, (float32x4_t)vorrq_s8(vandq_s8(v11, v9), v10)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v12, (float32x4_t)vorrq_s8(vandq_s8(v7[213], v12), v8[215]))));
    v6 += 2;
    uint64_t result = (result + 8);
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_10024226C(uint64_t a1, float64x2_t *a2, int16x8_t *a3, int a4)
{
  int v4 = a4 - 8;
  if (a4 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v6 = a2 + 2;
  int v7 = (int8x16_t *)&unk_1004D2000;
  uint64_t v8 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float64x2_t v9 = v6[-2];
    float64x2_t v10 = v6[-1];
    float64x2_t v12 = *v6;
    float64x2_t v11 = v6[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v53 = result;
      uint64_t v49 = a3;
      int v45 = v4;
      uint64_t v57 = v6;
      float64x2_t v41 = v10;
      float64x2_t v33 = v9;
      float64x2_t v37 = v11;
      float64x2_t v29 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      float64x2_t v12 = v29;
      float64x2_t v9 = v33;
      float64x2_t v11 = v37;
      float64x2_t v10 = v41;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v57;
      int v4 = v45;
      a3 = v49;
      int v18 = result;
      LODWORD(result) = v53;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        float64x2_t v12 = v29;
        float64x2_t v9 = v33;
        float64x2_t v11 = v37;
        float64x2_t v10 = v41;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v57;
        int v4 = v45;
        LODWORD(result) = v53;
        a3 = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v54 = result;
      uint64_t v50 = a3;
      int v46 = v4;
      uint64_t v58 = v6;
      float64x2_t v42 = v10;
      float64x2_t v34 = v9;
      float64x2_t v38 = v11;
      float64x2_t v30 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      float64x2_t v12 = v30;
      float64x2_t v9 = v34;
      float64x2_t v11 = v38;
      float64x2_t v10 = v42;
      *(void *)&long long v19 = 0x3F0000003F000000;
      *((void *)&v19 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v58;
      int v4 = v46;
      a3 = v50;
      int v20 = result;
      LODWORD(result) = v54;
      if (v20)
      {
        xmmword_1004D2D70 = v19;
        __cxa_guard_release(qword_1004D2D80);
        float64x2_t v12 = v30;
        float64x2_t v9 = v34;
        float64x2_t v11 = v38;
        float64x2_t v10 = v42;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v58;
        int v4 = v46;
        LODWORD(result) = v54;
        a3 = v50;
      }
    }
    int8x16_t v13 = v8[215];
    int8x16_t v14 = v7[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v55 = result;
      uint64_t v51 = a3;
      int v47 = v4;
      uint64_t v59 = v6;
      float64x2_t v43 = v10;
      float64x2_t v35 = v9;
      float64x2_t v39 = v11;
      int8x16_t v27 = v13;
      float64x2_t v31 = v12;
      int8x16_t v25 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v14 = v25;
      int8x16_t v13 = v27;
      float64x2_t v12 = v31;
      float64x2_t v9 = v35;
      float64x2_t v11 = v39;
      float64x2_t v10 = v43;
      *(void *)&long long v21 = 0x8000000080000000;
      *((void *)&v21 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v59;
      int v4 = v47;
      a3 = v51;
      int v22 = result;
      LODWORD(result) = v55;
      if (v22)
      {
        xmmword_1004D2D50 = v21;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v14 = v25;
        int8x16_t v13 = v27;
        float64x2_t v12 = v31;
        float64x2_t v9 = v35;
        float64x2_t v11 = v39;
        float64x2_t v10 = v43;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v59;
        int v4 = v47;
        LODWORD(result) = v55;
        a3 = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v56 = result;
      uint64_t v52 = a3;
      int v48 = v4;
      uint64_t v60 = v6;
      float64x2_t v44 = v10;
      float64x2_t v36 = v9;
      float64x2_t v40 = v11;
      int8x16_t v28 = v13;
      float64x2_t v32 = v12;
      int8x16_t v26 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v14 = v26;
      int8x16_t v13 = v28;
      float64x2_t v12 = v32;
      float64x2_t v9 = v36;
      float64x2_t v11 = v40;
      float64x2_t v10 = v44;
      *(void *)&long long v23 = 0x3F0000003F000000;
      *((void *)&v23 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v60;
      int v4 = v48;
      a3 = v52;
      int v24 = result;
      LODWORD(result) = v56;
      if (v24)
      {
        xmmword_1004D2D70 = v23;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v14 = v26;
        int8x16_t v13 = v28;
        float64x2_t v12 = v32;
        float64x2_t v9 = v36;
        float64x2_t v11 = v40;
        float64x2_t v10 = v44;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v60;
        int v4 = v48;
        LODWORD(result) = v56;
        a3 = v52;
      }
    }
    int8x16_t v15 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
    int8x16_t v16 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
    *a3++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v14, v15), v13)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v7[213], v16), v8[215]))));
    v6 += 4;
    uint64_t result = (result + 8);
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_10024261C(uint64_t a1, int8x16_t *a2, int16x8_t *a3, int a4)
{
  int v4 = a4 - 8;
  if (a4 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v6 = a2 + 1;
  int v7 = (int8x16_t *)&unk_1004D2000;
  uint64_t v8 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int8x16_t v9 = v6[-1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v39 = result;
      float64x2_t v35 = a3;
      int v31 = v4;
      float64x2_t v43 = v6;
      int8x16_t v27 = v9;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v9 = v27;
      *(void *)&long long v13 = 0x8000000080000000;
      *((void *)&v13 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v43;
      int v4 = v31;
      a3 = v35;
      int v14 = result;
      LODWORD(result) = v39;
      if (v14)
      {
        xmmword_1004D2D50 = v13;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v9 = v27;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v43;
        int v4 = v31;
        LODWORD(result) = v39;
        a3 = v35;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v40 = result;
      float64x2_t v36 = a3;
      int v32 = v4;
      float64x2_t v44 = v6;
      int8x16_t v28 = v9;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v9 = v28;
      *(void *)&long long v15 = 0x3F0000003F000000;
      *((void *)&v15 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v44;
      int v4 = v32;
      a3 = v36;
      int v16 = result;
      LODWORD(result) = v40;
      if (v16)
      {
        xmmword_1004D2D70 = v15;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v9 = v28;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v44;
        int v4 = v32;
        LODWORD(result) = v40;
        a3 = v36;
      }
    }
    int8x16_t v10 = v8[215];
    int8x16_t v11 = v7[213];
    int8x16_t v12 = *v6;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v41 = result;
      float64x2_t v37 = a3;
      int v33 = v4;
      int v45 = v6;
      int8x16_t v25 = v12;
      int8x16_t v29 = v9;
      int8x16_t v21 = v11;
      int8x16_t v23 = v10;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v11 = v21;
      int8x16_t v10 = v23;
      int8x16_t v12 = v25;
      int8x16_t v9 = v29;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v45;
      int v4 = v33;
      a3 = v37;
      int v18 = result;
      LODWORD(result) = v41;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v11 = v21;
        int8x16_t v10 = v23;
        int8x16_t v12 = v25;
        int8x16_t v9 = v29;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v45;
        int v4 = v33;
        LODWORD(result) = v41;
        a3 = v37;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v42 = result;
      float64x2_t v38 = a3;
      int v34 = v4;
      int v46 = v6;
      int8x16_t v26 = v12;
      int8x16_t v30 = v9;
      int8x16_t v22 = v11;
      int8x16_t v24 = v10;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v11 = v22;
      int8x16_t v10 = v24;
      int8x16_t v12 = v26;
      int8x16_t v9 = v30;
      *(void *)&long long v19 = 0x3F0000003F000000;
      *((void *)&v19 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v46;
      int v4 = v34;
      a3 = v38;
      int v20 = result;
      LODWORD(result) = v42;
      if (v20)
      {
        xmmword_1004D2D70 = v19;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v11 = v22;
        int8x16_t v10 = v24;
        int8x16_t v12 = v26;
        int8x16_t v9 = v30;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v46;
        int v4 = v34;
        LODWORD(result) = v42;
        a3 = v38;
      }
    }
    *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v9, (float32x4_t)vorrq_s8(vandq_s8(v11, v9), v10)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v12, (float32x4_t)vorrq_s8(vandq_s8(v7[213], v12), v8[215]))));
    v6 += 2;
    uint64_t result = (result + 8);
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_10024295C(uint64_t a1, float64x2_t *a2, int16x8_t *a3, int a4)
{
  int v4 = a4 - 8;
  if (a4 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  uint64_t v6 = a2 + 2;
  int v7 = (int8x16_t *)&unk_1004D2000;
  uint64_t v8 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float64x2_t v9 = v6[-2];
    float64x2_t v10 = v6[-1];
    float64x2_t v12 = *v6;
    float64x2_t v11 = v6[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v53 = result;
      uint64_t v49 = a3;
      int v45 = v4;
      uint64_t v57 = v6;
      float64x2_t v41 = v10;
      float64x2_t v33 = v9;
      float64x2_t v37 = v11;
      float64x2_t v29 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      float64x2_t v12 = v29;
      float64x2_t v9 = v33;
      float64x2_t v11 = v37;
      float64x2_t v10 = v41;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v57;
      int v4 = v45;
      a3 = v49;
      int v18 = result;
      LODWORD(result) = v53;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        float64x2_t v12 = v29;
        float64x2_t v9 = v33;
        float64x2_t v11 = v37;
        float64x2_t v10 = v41;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v57;
        int v4 = v45;
        LODWORD(result) = v53;
        a3 = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v54 = result;
      uint64_t v50 = a3;
      int v46 = v4;
      uint64_t v58 = v6;
      float64x2_t v42 = v10;
      float64x2_t v34 = v9;
      float64x2_t v38 = v11;
      float64x2_t v30 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      float64x2_t v12 = v30;
      float64x2_t v9 = v34;
      float64x2_t v11 = v38;
      float64x2_t v10 = v42;
      *(void *)&long long v19 = 0x3F0000003F000000;
      *((void *)&v19 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v58;
      int v4 = v46;
      a3 = v50;
      int v20 = result;
      LODWORD(result) = v54;
      if (v20)
      {
        xmmword_1004D2D70 = v19;
        __cxa_guard_release(qword_1004D2D80);
        float64x2_t v12 = v30;
        float64x2_t v9 = v34;
        float64x2_t v11 = v38;
        float64x2_t v10 = v42;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v58;
        int v4 = v46;
        LODWORD(result) = v54;
        a3 = v50;
      }
    }
    int8x16_t v13 = v8[215];
    int8x16_t v14 = v7[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v55 = result;
      uint64_t v51 = a3;
      int v47 = v4;
      uint64_t v59 = v6;
      float64x2_t v43 = v10;
      float64x2_t v35 = v9;
      float64x2_t v39 = v11;
      int8x16_t v27 = v13;
      float64x2_t v31 = v12;
      int8x16_t v25 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v14 = v25;
      int8x16_t v13 = v27;
      float64x2_t v12 = v31;
      float64x2_t v9 = v35;
      float64x2_t v11 = v39;
      float64x2_t v10 = v43;
      *(void *)&long long v21 = 0x8000000080000000;
      *((void *)&v21 + 1) = 0x8000000080000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v59;
      int v4 = v47;
      a3 = v51;
      int v22 = result;
      LODWORD(result) = v55;
      if (v22)
      {
        xmmword_1004D2D50 = v21;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v14 = v25;
        int8x16_t v13 = v27;
        float64x2_t v12 = v31;
        float64x2_t v9 = v35;
        float64x2_t v11 = v39;
        float64x2_t v10 = v43;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v59;
        int v4 = v47;
        LODWORD(result) = v55;
        a3 = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v56 = result;
      uint64_t v52 = a3;
      int v48 = v4;
      uint64_t v60 = v6;
      float64x2_t v44 = v10;
      float64x2_t v36 = v9;
      float64x2_t v40 = v11;
      int8x16_t v28 = v13;
      float64x2_t v32 = v12;
      int8x16_t v26 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v14 = v26;
      int8x16_t v13 = v28;
      float64x2_t v12 = v32;
      float64x2_t v9 = v36;
      float64x2_t v11 = v40;
      float64x2_t v10 = v44;
      *(void *)&long long v23 = 0x3F0000003F000000;
      *((void *)&v23 + 1) = 0x3F0000003F000000;
      uint64_t v8 = (int8x16_t *)&unk_1004D2000;
      int v7 = (int8x16_t *)&unk_1004D2000;
      uint64_t v6 = v60;
      int v4 = v48;
      a3 = v52;
      int v24 = result;
      LODWORD(result) = v56;
      if (v24)
      {
        xmmword_1004D2D70 = v23;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v14 = v26;
        int8x16_t v13 = v28;
        float64x2_t v12 = v32;
        float64x2_t v9 = v36;
        float64x2_t v11 = v40;
        float64x2_t v10 = v44;
        uint64_t v8 = (int8x16_t *)&unk_1004D2000;
        int v7 = (int8x16_t *)&unk_1004D2000;
        uint64_t v6 = v60;
        int v4 = v48;
        LODWORD(result) = v56;
        a3 = v52;
      }
    }
    int8x16_t v15 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v9), v10);
    int8x16_t v16 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
    *a3++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v14, v15), v13)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v7[213], v16), v8[215]))));
    v6 += 4;
    uint64_t result = (result + 8);
  }
  while (v4 >= (int)result);
  return result;
}

uint64_t sub_100242D0C(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    uint64_t v13 = result;
    uint64_t v14 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v15 = *(double *)(a9 + 8);
    float v16 = *(double *)a9;
    float v17 = v15;
    uint64_t v18 = v14 - 4;
    do
    {
      a3.n128_f32[0] = v16;
      *(float *)&double v15 = v17;
      uint64_t result = sub_10024C098(a3, *(int32x2_t *)&v15, (uint64_t)&v25, v13, a6, v14);
      if ((int)result <= (int)v18)
      {
        uint64_t result = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v13 + result);
          *(float *)&unsigned int v19 = rintf(v17 + (float)((float)a3.n128_u32[0] * v16));
          uint64_t v20 = (uint64_t)*(float *)&v19;
          LOBYTE(v19) = *(unsigned char *)(v13 + result + 1);
          int32x2_t v21 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)v19 * v16)), v20), 0), (int32x2_t)0xFF000000FFLL);
          int v22 = (unsigned char *)(a6 + result);
          v22[1] = v21.i8[4];
          *int v22 = v21.i8[0];
          v21.i8[0] = *(unsigned char *)(v13 + result + 2);
          LOBYTE(v15) = *(unsigned char *)(v13 + result + 3);
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)LODWORD(v15) * v16)), (uint64_t)rintf(v17 + (float)((float)v21.u32[0] * v16))), 0), (int32x2_t)0xFF000000FFLL);
          v22[3] = a3.n128_u8[4];
          v22[2] = a3.n128_u8[0];
          result += 4;
        }
        while (result <= v18);
      }
      if ((int)result < (int)v14)
      {
        uint64_t v23 = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v13 + v23);
          a3.n128_f32[0] = rintf(v17 + (float)((float)a3.n128_u32[0] * v16));
          int v24 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          *(unsigned char *)(a6 + v23++) = v24;
        }
        while (v14 != v23);
      }
      v13 += a2;
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100242EB0(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    uint64_t v13 = result;
    uint64_t v14 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    int32x2_t v15 = *(int32x2_t *)(a9 + 8);
    float v16 = *(double *)a9;
    float v17 = *(double *)v15.i32;
    uint64_t v18 = v14 - 4;
    do
    {
      a3.n128_f32[0] = v16;
      *(float *)v15.i32 = v17;
      uint64_t result = sub_10024C3F8(a3, v15, (uint64_t)&v25, v13, a6, v14);
      if ((int)result <= (int)v18)
      {
        uint64_t result = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v13 + result);
          v15.i8[0] = *(unsigned char *)(v13 + result + 1);
          int8x8_t v19 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v15)).u64[0];
          *(float *)v19.i32 = rintf(v17 + (float)((float)v19.i32[0] * v16));
          v20.i32[0] = (uint64_t)rintf(v17+ (float)((float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).i32[0]* v16));
          v20.i32[1] = (uint64_t)*(float *)v19.i32;
          int32x2_t v21 = (unsigned char *)(a6 + result);
          int8x8_t v22 = (int8x8_t)vmin_s32(vmax_s32(v20, 0), (int32x2_t)0xFF000000FFLL);
          v21[1] = v22.i8[4];
          *int32x2_t v21 = v22.i8[0];
          v22.i8[0] = *(unsigned char *)(v13 + result + 2);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22));
          v19.i8[0] = *(unsigned char *)(v13 + result + 3);
          int32x2_t v15 = (int32x2_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v19)).u64[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)v15.i32[0] * v16)), (uint64_t)rintf(v17 + (float)((float)a3.n128_i32[0] * v16))), 0), (int32x2_t)0xFF000000FFLL);
          v21[3] = a3.n128_u8[4];
          v21[2] = a3.n128_u8[0];
          result += 4;
        }
        while (result <= v18);
      }
      if ((int)result < (int)v14)
      {
        uint64_t v23 = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v13 + v23);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v17 + (float)((float)a3.n128_i32[0] * v16));
          int v24 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v24 >= 255) {
            LOBYTE(v24) = -1;
          }
          *(unsigned char *)(a6 + v23++) = v24;
        }
        while (v14 != v23);
      }
      v13 += a2;
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_10024307C(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v12 = (uint16x8_t *)result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 2 * (a2 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10024C758(a3, *(int32x2_t *)&v14, (uint64_t)&v27, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 2 * (int)result + 4;
        do
        {
          a3.n128_u16[0] = *(unsigned __int16 *)((char *)&v12->u16[-2] + v20);
          *(float *)&unsigned int v21 = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          uint64_t v22 = (uint64_t)*(float *)&v21;
          LOWORD(v21) = v12->i16[v19 + 1];
          int32x2_t v23 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v21 * v15)), v22), 0), (int32x2_t)0xFF000000FFLL);
          int v24 = (unsigned char *)(a6 + v19);
          v24[1] = v23.i8[4];
          *int v24 = v23.i8[0];
          v23.i16[0] = *(__int16 *)((char *)v12->i16 + v20);
          LOWORD(v14) = *(__int16 *)((char *)&v12->i16[1] + v20);
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)LODWORD(v14) * v15)), (uint64_t)rintf(v16 + (float)((float)v23.u32[0] * v15))), 0), (int32x2_t)0xFF000000FFLL);
          v24[3] = a3.n128_u8[4];
          v24[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 8;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v25 = (int)result;
        do
        {
          a3.n128_u16[0] = v12->u16[v25];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          int v26 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v26 >= 255) {
            LOBYTE(v26) = -1;
          }
          *(unsigned char *)(a6 + v25++) = v26;
        }
        while (v13 != v25);
      }
      float64x2_t v12 = (uint16x8_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100243238(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v12 = (int16x8_t *)result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    int16x4_t v14 = *(int16x4_t *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = *(double *)v14.i32;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 2 * (a2 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)v14.i32 = v16;
      uint64_t result = sub_10024CAB8(a3, (int32x2_t)v14, (uint64_t)&v26, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 2 * (int)result + 4;
        do
        {
          a3.n128_u16[0] = *(unsigned __int16 *)((char *)&v12->u16[-2] + v20);
          v14.i16[0] = v12->i16[v19 + 1];
          int16x4_t v21 = (int16x4_t)vmovl_s16(v14).u64[0];
          *(float *)v21.i32 = v16 + (float)((float)v21.i32[0] * v15);
          int16x4_t v22 = (int16x4_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(*(float *)v21.i32), (uint64_t)rintf(v16+ (float)((float)vmovl_s16((int16x4_t)a3.n128_u64[0]).i32[0] * v15))), 0), (int32x2_t)0xFF000000FFLL);
          int32x2_t v23 = (unsigned char *)(a6 + v19);
          v23[1] = v22.i8[4];
          *int32x2_t v23 = v22.i8[0];
          v22.i16[0] = *(__int16 *)((char *)v12->i16 + v20);
          a3 = (__n128)vmovl_s16(v22);
          v21.i16[0] = *(__int16 *)((char *)&v12->i16[1] + v20);
          int16x4_t v14 = (int16x4_t)vmovl_s16(v21).u64[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v14.i32[0] * v15)), (uint64_t)rintf(v16 + (float)((float)a3.n128_i32[0] * v15))), 0), (int32x2_t)0xFF000000FFLL);
          v23[3] = a3.n128_u8[4];
          v23[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 8;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v24 = (int)result;
        do
        {
          a3.n128_u16[0] = v12->u16[v24];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          int v25 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          *(unsigned char *)(a6 + v24++) = v25;
        }
        while (v13 != v24);
      }
      float64x2_t v12 = (int16x8_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100243408(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v12 = (int32x4_t *)result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 4 * (a2 >> 2);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10024CE18(a3, *(int32x2_t *)&v14, (uint64_t)&v26, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 4 * (int)result + 8;
        do
        {
          int32x2_t v21 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v12->i32[v19 + 1] * v15)), (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)&v12->i32[-2] + v20) * v15))), 0), (int32x2_t)0xFF000000FFLL);
          int16x4_t v22 = (unsigned char *)(a6 + v19);
          v22[1] = v21.i8[4];
          *int16x4_t v22 = v21.i8[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16+ (float)((float)*(int *)((char *)&v12->i32[1]+ v20)* v15)), (uint64_t)rintf(v16+ (float)((float)*(int *)((char *)v12->i32 + v20)* v15))), 0), (int32x2_t)0xFF000000FFLL);
          v22[3] = a3.n128_u8[4];
          v22[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 16;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v23 = (int)result;
        do
        {
          float v24 = rintf(v16 + (float)((float)v12->i32[v23] * v15));
          int v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          *(unsigned char *)(a6 + v23++) = v25;
        }
        while (v13 != v23);
      }
      float64x2_t v12 = (int32x4_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002435C0(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v12 = (float32x4_t *)result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 4 * (a2 >> 2);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10024D1A4(a3, *(int32x2_t *)&v14, (uint64_t)&v26, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 4 * (int)result + 8;
        do
        {
          int32x2_t v21 = (unsigned char *)(a6 + v19);
          int32x2_t v22 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)(v12->f32[v19 + 1] * v15)), (uint64_t)rintf(v16 + (float)(*(float *)((char *)&v12->f32[-2] + v20) * v15))), 0), (int32x2_t)0xFF000000FFLL);
          *int32x2_t v21 = v22.i8[0];
          v21[1] = v22.i8[4];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16+ (float)(*(float *)((char *)&v12->f32[1] + v20)* v15)), (uint64_t)rintf(v16+ (float)(*(float *)((char *)v12->f32 + v20) * v15))), 0), (int32x2_t)0xFF000000FFLL);
          v21[3] = a3.n128_u8[4];
          v21[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 16;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v23 = (int)result;
        do
        {
          float v24 = rintf(v16 + (float)(v12->f32[v23] * v15));
          int v25 = (uint64_t)v24 & ~((int)(uint64_t)v24 >> 31);
          if (v25 >= 255) {
            LOBYTE(v25) = -1;
          }
          *(unsigned char *)(a6 + v23++) = v25;
        }
        while (v13 != v23);
      }
      float64x2_t v12 = (float32x4_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100243764(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, double *a14)
{
  int v14 = a13[1];
  if (v14)
  {
    uint64_t v17 = (float64x2_t *)result;
    uint64_t v18 = *a13;
    float v19 = *a14;
    float v20 = a14[1];
    double v21 = v19;
    double v22 = v20;
    uint64_t v23 = v18 - 4;
    uint64_t v24 = 8 * (a2 >> 3);
    do
    {
      uint64_t result = sub_10024D528(v19, v20, a5, a6, a7, a8, (uint64_t)&v33, v17, a11, v18);
      if ((int)result <= (int)v23)
      {
        uint64_t v25 = (int)result;
        uint64_t v26 = 8 * (int)result + 16;
        a5 = 0.0;
        do
        {
          char v27 = (unsigned char *)(a11 + v25);
          int32x2_t v28 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v22 + v17->f64[v25 + 1] * v21), (uint64_t)rint(v22 + *(double *)((char *)v17[-1].f64 + v26) * v21)), 0), (int32x2_t)0xFF000000FFLL);
          *char v27 = v28.i8[0];
          v27[1] = v28.i8[4];
          int32x2_t v29 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v22 + *(double *)((char *)&v17->f64[1] + v26) * v21), (uint64_t)rint(v22 + *(double *)((char *)v17->f64 + v26) * v21)), 0), (int32x2_t)0xFF000000FFLL);
          v27[3] = v29.i8[4];
          v27[2] = v29.i8[0];
          v25 += 4;
          v26 += 32;
        }
        while (v25 <= v23);
        uint64_t result = v25;
      }
      if ((int)result < (int)v18)
      {
        uint64_t v30 = (int)result;
        do
        {
          double v31 = rint(v22 + v17->f64[v30] * v21);
          int v32 = (uint64_t)v31 & ~((int)(uint64_t)v31 >> 31);
          if (v32 >= 255) {
            LOBYTE(v32) = -1;
          }
          *(unsigned char *)(a11 + v30++) = v32;
        }
        while (v18 != v30);
      }
      uint64_t v17 = (float64x2_t *)((char *)v17 + v24);
      a11 += a12;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_100243918(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    uint64_t v13 = result;
    uint64_t v14 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v15 = *(double *)(a9 + 8);
    float v16 = *(double *)a9;
    float v17 = v15;
    uint64_t v18 = v14 - 4;
    do
    {
      a3.n128_f32[0] = v16;
      *(float *)&double v15 = v17;
      uint64_t result = sub_10024D8D8(a3, *(int32x2_t *)&v15, (uint64_t)&v25, v13, a6, v14);
      if ((int)result <= (int)v18)
      {
        uint64_t result = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v13 + result);
          *(float *)&unsigned int v19 = rintf(v17 + (float)((float)a3.n128_u32[0] * v16));
          uint64_t v20 = (uint64_t)*(float *)&v19;
          LOBYTE(v19) = *(unsigned char *)(v13 + result + 1);
          int32x2_t v21 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)v19 * v16)), v20), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          double v22 = (unsigned char *)(a6 + result);
          v22[1] = v21.i8[4];
          *double v22 = v21.i8[0];
          v21.i8[0] = *(unsigned char *)(v13 + result + 2);
          LOBYTE(v15) = *(unsigned char *)(v13 + result + 3);
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)LODWORD(v15) * v16)), (uint64_t)rintf(v17 + (float)((float)v21.u32[0] * v16))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v22[3] = a3.n128_u8[4];
          v22[2] = a3.n128_u8[0];
          result += 4;
        }
        while (result <= v18);
      }
      if ((int)result < (int)v14)
      {
        uint64_t v23 = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v13 + v23);
          a3.n128_f32[0] = rintf(v17 + (float)((float)a3.n128_u32[0] * v16));
          uint64_t v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -128) {
            LODWORD(v24) = -128;
          }
          if ((int)v24 >= 127) {
            LOBYTE(v24) = 127;
          }
          *(unsigned char *)(a6 + v23++) = v24;
        }
        while (v14 != v23);
      }
      v13 += a2;
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100243ACC(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    uint64_t v13 = result;
    uint64_t v14 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    int32x2_t v15 = *(int32x2_t *)(a9 + 8);
    float v16 = *(double *)a9;
    float v17 = *(double *)v15.i32;
    uint64_t v18 = v14 - 4;
    do
    {
      a3.n128_f32[0] = v16;
      *(float *)v15.i32 = v17;
      uint64_t result = sub_10024DC38(a3, v15, (uint64_t)&v25, v13, a6, v14);
      if ((int)result <= (int)v18)
      {
        uint64_t result = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v13 + result);
          v15.i8[0] = *(unsigned char *)(v13 + result + 1);
          int8x8_t v19 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v15)).u64[0];
          *(float *)v19.i32 = rintf(v17 + (float)((float)v19.i32[0] * v16));
          v20.i32[0] = (uint64_t)rintf(v17+ (float)((float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).i32[0]* v16));
          v20.i32[1] = (uint64_t)*(float *)v19.i32;
          int32x2_t v21 = (unsigned char *)(a6 + result);
          int8x8_t v22 = (int8x8_t)vmin_s32(vmax_s32(v20, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v21[1] = v22.i8[4];
          *int32x2_t v21 = v22.i8[0];
          v22.i8[0] = *(unsigned char *)(v13 + result + 2);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22));
          v19.i8[0] = *(unsigned char *)(v13 + result + 3);
          int32x2_t v15 = (int32x2_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v19)).u64[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v17 + (float)((float)v15.i32[0] * v16)), (uint64_t)rintf(v17 + (float)((float)a3.n128_i32[0] * v16))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v21[3] = a3.n128_u8[4];
          v21[2] = a3.n128_u8[0];
          result += 4;
        }
        while (result <= v18);
      }
      if ((int)result < (int)v14)
      {
        uint64_t v23 = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v13 + v23);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v17 + (float)((float)a3.n128_i32[0] * v16));
          uint64_t v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -128) {
            LODWORD(v24) = -128;
          }
          if ((int)v24 >= 127) {
            LOBYTE(v24) = 127;
          }
          *(unsigned char *)(a6 + v23++) = v24;
        }
        while (v14 != v23);
      }
      v13 += a2;
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100243CA8(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v12 = (uint16x8_t *)result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 2 * (a2 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10024DF98(a3, *(int32x2_t *)&v14, (uint64_t)&v27, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 2 * (int)result + 4;
        do
        {
          a3.n128_u16[0] = *(unsigned __int16 *)((char *)&v12->u16[-2] + v20);
          *(float *)&unsigned int v21 = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          uint64_t v22 = (uint64_t)*(float *)&v21;
          LOWORD(v21) = v12->i16[v19 + 1];
          int32x2_t v23 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v21 * v15)), v22), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          uint64_t v24 = (unsigned char *)(a6 + v19);
          v24[1] = v23.i8[4];
          *uint64_t v24 = v23.i8[0];
          v23.i16[0] = *(__int16 *)((char *)v12->i16 + v20);
          LOWORD(v14) = *(__int16 *)((char *)&v12->i16[1] + v20);
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)LODWORD(v14) * v15)), (uint64_t)rintf(v16 + (float)((float)v23.u32[0] * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v24[3] = a3.n128_u8[4];
          v24[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 8;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v25 = (int)result;
        do
        {
          a3.n128_u16[0] = v12->u16[v25];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          uint64_t v26 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -128) {
            LODWORD(v26) = -128;
          }
          if ((int)v26 >= 127) {
            LOBYTE(v26) = 127;
          }
          *(unsigned char *)(a6 + v25++) = v26;
        }
        while (v13 != v25);
      }
      float64x2_t v12 = (uint16x8_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100243E74(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v12 = (int16x8_t *)result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    int16x4_t v14 = *(int16x4_t *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = *(double *)v14.i32;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 2 * (a2 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)v14.i32 = v16;
      uint64_t result = sub_10024E2F8(a3, (int32x2_t)v14, (uint64_t)&v26, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 2 * (int)result + 4;
        do
        {
          a3.n128_u16[0] = *(unsigned __int16 *)((char *)&v12->u16[-2] + v20);
          v14.i16[0] = v12->i16[v19 + 1];
          int16x4_t v21 = (int16x4_t)vmovl_s16(v14).u64[0];
          *(float *)v21.i32 = v16 + (float)((float)v21.i32[0] * v15);
          int16x4_t v22 = (int16x4_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(*(float *)v21.i32), (uint64_t)rintf(v16+ (float)((float)vmovl_s16((int16x4_t)a3.n128_u64[0]).i32[0] * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          int32x2_t v23 = (unsigned char *)(a6 + v19);
          v23[1] = v22.i8[4];
          *int32x2_t v23 = v22.i8[0];
          v22.i16[0] = *(__int16 *)((char *)v12->i16 + v20);
          a3 = (__n128)vmovl_s16(v22);
          v21.i16[0] = *(__int16 *)((char *)&v12->i16[1] + v20);
          int16x4_t v14 = (int16x4_t)vmovl_s16(v21).u64[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v14.i32[0] * v15)), (uint64_t)rintf(v16 + (float)((float)a3.n128_i32[0] * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v23[3] = a3.n128_u8[4];
          v23[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 8;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v24 = (int)result;
        do
        {
          a3.n128_u16[0] = v12->u16[v24];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          uint64_t v25 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -128) {
            LODWORD(v25) = -128;
          }
          if ((int)v25 >= 127) {
            LOBYTE(v25) = 127;
          }
          *(unsigned char *)(a6 + v24++) = v25;
        }
        while (v13 != v24);
      }
      float64x2_t v12 = (int16x8_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100244054(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v12 = (int32x4_t *)result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 4 * (a2 >> 2);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10024E658(a3, *(int32x2_t *)&v14, (uint64_t)&v25, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 4 * (int)result + 8;
        do
        {
          int32x2_t v21 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)((float)v12->i32[v19 + 1] * v15)), (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)&v12->i32[-2] + v20) * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          int16x4_t v22 = (unsigned char *)(a6 + v19);
          v22[1] = v21.i8[4];
          *int16x4_t v22 = v21.i8[0];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16+ (float)((float)*(int *)((char *)&v12->i32[1]+ v20)* v15)), (uint64_t)rintf(v16+ (float)((float)*(int *)((char *)v12->i32 + v20)* v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v22[3] = a3.n128_u8[4];
          v22[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 16;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v23 = (int)result;
        do
        {
          uint64_t v24 = (uint64_t)rintf(v16 + (float)((float)v12->i32[v23] * v15));
          if ((int)v24 <= -128) {
            LODWORD(v24) = -128;
          }
          if ((int)v24 >= 127) {
            LOBYTE(v24) = 127;
          }
          *(unsigned char *)(a6 + v23++) = v24;
        }
        while (v13 != v23);
      }
      float64x2_t v12 = (int32x4_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_10024421C(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v12 = (float32x4_t *)result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 4 * (a2 >> 2);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10024E9E4(a3, *(int32x2_t *)&v14, (uint64_t)&v25, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 4 * (int)result + 8;
        do
        {
          int32x2_t v21 = (unsigned char *)(a6 + v19);
          int32x2_t v22 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16 + (float)(v12->f32[v19 + 1] * v15)), (uint64_t)rintf(v16 + (float)(*(float *)((char *)&v12->f32[-2] + v20) * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          *int32x2_t v21 = v22.i8[0];
          v21[1] = v22.i8[4];
          a3.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rintf(v16+ (float)(*(float *)((char *)&v12->f32[1] + v20)* v15)), (uint64_t)rintf(v16+ (float)(*(float *)((char *)v12->f32 + v20) * v15))), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v21[3] = a3.n128_u8[4];
          v21[2] = a3.n128_u8[0];
          v19 += 4;
          v20 += 16;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v23 = (int)result;
        do
        {
          uint64_t v24 = (uint64_t)rintf(v16 + (float)(v12->f32[v23] * v15));
          if ((int)v24 <= -128) {
            LODWORD(v24) = -128;
          }
          if ((int)v24 >= 127) {
            LOBYTE(v24) = 127;
          }
          *(unsigned char *)(a6 + v23++) = v24;
        }
        while (v13 != v23);
      }
      float64x2_t v12 = (float32x4_t *)((char *)v12 + v18);
      a6 += a7;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002443D0(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, double *a14)
{
  int v14 = a13[1];
  if (v14)
  {
    uint64_t v17 = (float64x2_t *)result;
    uint64_t v18 = *a13;
    float v19 = *a14;
    float v20 = a14[1];
    double v21 = v19;
    double v22 = v20;
    uint64_t v23 = v18 - 4;
    uint64_t v24 = 8 * (a2 >> 3);
    do
    {
      uint64_t result = sub_10024ED68(v19, v20, a5, a6, a7, a8, (uint64_t)&v32, v17, a11, v18);
      if ((int)result <= (int)v23)
      {
        uint64_t v25 = (int)result;
        uint64_t v26 = 8 * (int)result + 16;
        do
        {
          char v27 = (unsigned char *)(a11 + v25);
          int32x2_t v28 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v22 + v17->f64[v25 + 1] * v21), (uint64_t)rint(v22 + *(double *)((char *)v17[-1].f64 + v26) * v21)), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          *char v27 = v28.i8[0];
          v27[1] = v28.i8[4];
          int32x2_t v29 = vmin_s32(vmax_s32((int32x2_t)__PAIR64__((uint64_t)rint(v22 + *(double *)((char *)&v17->f64[1] + v26) * v21), (uint64_t)rint(v22 + *(double *)((char *)v17->f64 + v26) * v21)), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v27[3] = v29.i8[4];
          v27[2] = v29.i8[0];
          v25 += 4;
          v26 += 32;
        }
        while (v25 <= v23);
        uint64_t result = v25;
      }
      if ((int)result < (int)v18)
      {
        uint64_t v30 = (int)result;
        do
        {
          uint64_t v31 = (uint64_t)rint(v22 + v17->f64[v30] * v21);
          if ((int)v31 <= -128) {
            LODWORD(v31) = -128;
          }
          if ((int)v31 >= 127) {
            LOBYTE(v31) = 127;
          }
          *(unsigned char *)(a11 + v30++) = v31;
        }
        while (v18 != v30);
      }
      uint64_t v17 = (float64x2_t *)((char *)v17 + v24);
      a11 += a12;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_100244594(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    uint64_t v12 = result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10024F118(a3, *(int32x2_t *)&v14, (uint64_t)&v29, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        float v20 = &a6->i16[(int)result];
        do
        {
          uint64_t v21 = v12 + v19;
          a3.n128_u8[0] = *(unsigned char *)(v12 + v19);
          *(float *)&unsigned int v22 = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          int v23 = (uint64_t)*(float *)&v22 & ~((int)(uint64_t)*(float *)&v22 >> 31);
          LOBYTE(v22) = *(unsigned char *)(v12 + v19 + 1);
          a3.n128_f32[0] = rintf(v16 + (float)((float)v22 * v15));
          if (v23 >= 0xFFFF) {
            LOWORD(v23) = -1;
          }
          int v24 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v24 >= 0xFFFF) {
            LOWORD(v24) = -1;
          }
          *float v20 = v23;
          v20[1] = v24;
          a3.n128_u8[0] = *(unsigned char *)(v21 + 2);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          int v25 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v25 >= 0xFFFF) {
            LOWORD(v25) = -1;
          }
          a3.n128_u8[0] = *(unsigned char *)(v21 + 3);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          int v26 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v26 >= 0xFFFF) {
            LOWORD(v26) = -1;
          }
          v20[2] = v25;
          v20[3] = v26;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v27 = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v12 + v27);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          int v28 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v28 >= 0xFFFF) {
            LOWORD(v28) = -1;
          }
          a6->i16[v27++] = v28;
        }
        while (v13 != v27);
      }
      v12 += a2;
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100244734(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    uint64_t v12 = result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10024F474(a3, *(int32x2_t *)&v14, (uint64_t)&v28, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        float v20 = &a6->i16[(int)result];
        do
        {
          uint64_t v21 = (unsigned char *)(v12 + v19);
          a3.n128_u8[0] = *(unsigned char *)(v12 + v19);
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          int v22 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v22 >= 0xFFFF) {
            LOWORD(v22) = -1;
          }
          a3.n128_u8[0] = v21[1];
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          int v23 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v23 >= 0xFFFF) {
            LOWORD(v23) = -1;
          }
          *float v20 = v22;
          v20[1] = v23;
          a3.n128_u8[0] = v21[2];
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          int v24 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v24 >= 0xFFFF) {
            LOWORD(v24) = -1;
          }
          a3.n128_u8[0] = v21[3];
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          int v25 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v25 >= 0xFFFF) {
            LOWORD(v25) = -1;
          }
          v20[2] = v24;
          v20[3] = v25;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v26 = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v12 + v26);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          int v27 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v27 >= 0xFFFF) {
            LOWORD(v27) = -1;
          }
          a6->i16[v26++] = v27;
        }
        while (v13 != v26);
      }
      v12 += a2;
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002448FC(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v11 = (uint16x8_t *)result;
    uint64_t v12 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v13 = *(double *)(a9 + 8);
    float v14 = *(double *)a9;
    float v15 = v13;
    uint64_t v16 = v12 - 4;
    uint64_t v17 = 2 * (a2 >> 1);
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)&double v13 = v15;
      uint64_t result = sub_10024F7D0(a3, *(int32x2_t *)&v13, (uint64_t)&v35, v11, a6, v12);
      if ((int)result <= (int)v16)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 2 * (int)result;
        int v22 = &v11->i8[v21];
        int v23 = &a6->i8[v21];
        do
        {
          a3.n128_u16[0] = *(_WORD *)&v22[v19];
          *(float *)&unsigned int v24 = rintf(v15 + (float)((float)a3.n128_u32[0] * v14));
          int v25 = (uint64_t)*(float *)&v24 & ~((int)(uint64_t)*(float *)&v24 >> 31);
          uint64_t v26 = &v22[2 * v20];
          LOWORD(v24) = *((_WORD *)v26 + 1);
          a3.n128_f32[0] = rintf(v15 + (float)((float)v24 * v14));
          if (v25 >= 0xFFFF) {
            LOWORD(v25) = -1;
          }
          int v27 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v27 >= 0xFFFF) {
            LOWORD(v27) = -1;
          }
          char v28 = &v23[v19];
          *(_WORD *)char v28 = v25;
          *((_WORD *)v28 + 1) = v27;
          a3.n128_u16[0] = *((_WORD *)v26 + 2);
          *(float *)&unsigned int v29 = rintf(v15 + (float)((float)a3.n128_u32[0] * v14));
          int v30 = (uint64_t)*(float *)&v29 & ~((int)(uint64_t)*(float *)&v29 >> 31);
          LOWORD(v29) = *(_WORD *)&v22[v19 + 6];
          a3.n128_f32[0] = v15 + (float)((float)v29 * v14);
          if (v30 >= 0xFFFF) {
            __int16 v31 = -1;
          }
          else {
            __int16 v31 = v30;
          }
          a3.n128_f32[0] = rintf(a3.n128_f32[0]);
          int v32 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v32 >= 0xFFFF) {
            LOWORD(v32) = -1;
          }
          *((_WORD *)v28 + 2) = v31;
          *((_WORD *)v28 + 3) = v32;
          v20 += 4;
          v19 += 8;
        }
        while ((int)result + v20 <= v16);
        uint64_t result = (result + v20);
      }
      if ((int)result < (int)v12)
      {
        uint64_t v33 = (int)result;
        do
        {
          a3.n128_u16[0] = v11->u16[v33];
          a3.n128_f32[0] = rintf(v15 + (float)((float)a3.n128_u32[0] * v14));
          int v34 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v34 >= 0xFFFF) {
            LOWORD(v34) = -1;
          }
          a6->i16[v33++] = v34;
        }
        while (v12 != v33);
      }
      float64x2_t v11 = (uint16x8_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100244AC0(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v11 = (int16x8_t *)result;
    uint64_t v12 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v13 = *(double *)(a9 + 8);
    float v14 = *(double *)a9;
    float v15 = v13;
    uint64_t v16 = v12 - 4;
    uint64_t v17 = 2 * (a2 >> 1);
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)&double v13 = v15;
      uint64_t result = sub_10024FAFC(a3, *(int32x2_t *)&v13, (uint64_t)&v35, v11, a6, v12);
      if ((int)result <= (int)v16)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 2 * (int)result;
        int v22 = &v11->i8[v21];
        int v23 = &a6->i8[v21];
        do
        {
          a3.n128_u16[0] = *(_WORD *)&v22[v19];
          int16x4_t v24 = (int16x4_t)vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
          *(float *)v24.i32 = rintf(v15 + (float)((float)v24.i32[0] * v14));
          int v25 = (uint64_t)*(float *)v24.i32 & ~((int)(uint64_t)*(float *)v24.i32 >> 31);
          uint64_t v26 = &v22[2 * v20];
          v24.i16[0] = *((_WORD *)v26 + 1);
          a3.n128_u64[0] = vmovl_s16(v24).u64[0];
          a3.n128_f32[0] = (float)a3.n128_i32[0];
          if (v25 >= 0xFFFF) {
            LOWORD(v25) = -1;
          }
          a3.n128_f32[0] = rintf(v15 + (float)(a3.n128_f32[0] * v14));
          int v27 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v27 >= 0xFFFF) {
            LOWORD(v27) = -1;
          }
          char v28 = &v23[v19];
          *(_WORD *)char v28 = v25;
          *((_WORD *)v28 + 1) = v27;
          a3.n128_u16[0] = *((_WORD *)v26 + 2);
          int16x4_t v29 = (int16x4_t)vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
          *(float *)v29.i32 = rintf(v15 + (float)((float)v29.i32[0] * v14));
          int v30 = (uint64_t)*(float *)v29.i32 & ~((int)(uint64_t)*(float *)v29.i32 >> 31);
          v29.i16[0] = *(_WORD *)&v22[v19 + 6];
          a3 = (__n128)vmovl_s16(v29);
          a3.n128_f32[0] = v15 + (float)((float)a3.n128_i32[0] * v14);
          if (v30 >= 0xFFFF) {
            __int16 v31 = -1;
          }
          else {
            __int16 v31 = v30;
          }
          a3.n128_f32[0] = rintf(a3.n128_f32[0]);
          int v32 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v32 >= 0xFFFF) {
            LOWORD(v32) = -1;
          }
          *((_WORD *)v28 + 2) = v31;
          *((_WORD *)v28 + 3) = v32;
          v20 += 4;
          v19 += 8;
        }
        while ((int)result + v20 <= v16);
        uint64_t result = (result + v20);
      }
      if ((int)result < (int)v12)
      {
        uint64_t v33 = (int)result;
        do
        {
          a3.n128_u16[0] = v11->u16[v33];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v15 + (float)((float)a3.n128_i32[0] * v14));
          int v34 = (uint64_t)a3.n128_f32[0] & ~((int)(uint64_t)a3.n128_f32[0] >> 31);
          if (v34 >= 0xFFFF) {
            LOWORD(v34) = -1;
          }
          a6->i16[v33++] = v34;
        }
        while (v12 != v33);
      }
      float64x2_t v11 = (int16x8_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100244C98(uint64_t result, unint64_t a2, int32x4_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v11 = (int32x4_t *)result;
    uint64_t v12 = *a8;
    a3.i64[0] = *(void *)a9;
    double v13 = *(double *)(a9 + 8);
    float v14 = *(double *)a9;
    float v15 = v13;
    uint64_t v16 = v12 - 4;
    uint64_t v17 = 4 * (a2 >> 2);
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      *(float *)a3.i32 = v14;
      *(float *)&double v13 = v15;
      uint64_t result = sub_10024FE28((__n128)a3, *(int32x2_t *)&v13, (uint64_t)&v27, v11, a6, v12);
      if ((int)result <= (int)v16)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 4 * (int)result + 8;
        uint64_t v21 = 2 * (int)result;
        v22.i64[0] = 0xFFFF0000FFFFLL;
        v22.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v23.i32[0] = (uint64_t)rintf(v15 + (float)((float)*(int *)((char *)&v11->i32[-2] + v20) * v14));
          v23.i32[1] = (uint64_t)rintf(v15 + (float)((float)v11->i32[v19 + 1] * v14));
          v23.i32[2] = (uint64_t)rintf(v15 + (float)((float)*(int *)((char *)v11->i32 + v20) * v14));
          v23.i32[3] = (uint64_t)rintf(v15 + (float)((float)*(int *)((char *)&v11->i32[1] + v20) * v14));
          a3 = vminq_s32(vmaxq_s32(v23, (int32x4_t)0), v22);
          *(int16x4_t *)a3.i8 = vmovn_s32(a3);
          *(uint64_t *)((char *)a6->i64 + v21) = a3.i64[0];
          v19 += 4;
          v20 += 16;
          v21 += 8;
        }
        while (v19 <= v16);
        uint64_t result = v19;
      }
      if ((int)result < (int)v12)
      {
        uint64_t v24 = (int)result;
        do
        {
          float v25 = rintf(v15 + (float)((float)v11->i32[v24] * v14));
          int v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
          if (v26 >= 0xFFFF) {
            LOWORD(v26) = -1;
          }
          a6->i16[v24++] = v26;
        }
        while (v12 != v24);
      }
      float64x2_t v11 = (int32x4_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100244E30(uint64_t result, unint64_t a2, int32x4_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v11 = (float32x4_t *)result;
    uint64_t v12 = *a8;
    a3.i64[0] = *(void *)a9;
    double v13 = *(double *)(a9 + 8);
    float v14 = *(double *)a9;
    float v15 = v13;
    uint64_t v16 = v12 - 4;
    uint64_t v17 = 4 * (a2 >> 2);
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      *(float *)a3.i32 = v14;
      *(float *)&double v13 = v15;
      uint64_t result = sub_1002501E0((__n128)a3, *(int32x2_t *)&v13, (uint64_t)&v27, v11, a6, v12);
      if ((int)result <= (int)v16)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 4 * (int)result + 8;
        uint64_t v21 = 2 * (int)result;
        v22.i64[0] = 0xFFFF0000FFFFLL;
        v22.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v23.i32[0] = (uint64_t)rintf(v15 + (float)(*(float *)((char *)&v11->f32[-2] + v20) * v14));
          v23.i32[1] = (uint64_t)rintf(v15 + (float)(v11->f32[v19 + 1] * v14));
          v23.i64[1] = __PAIR64__((uint64_t)rintf(v15 + (float)(*(float *)((char *)&v11->f32[1] + v20) * v14)), (uint64_t)rintf(v15 + (float)(*(float *)((char *)v11->f32 + v20) * v14)));
          a3 = vminq_s32(vmaxq_s32(v23, (int32x4_t)0), v22);
          *(int16x4_t *)a3.i8 = vmovn_s32(a3);
          *(uint64_t *)((char *)a6->i64 + v21) = a3.i64[0];
          v19 += 4;
          v20 += 16;
          v21 += 8;
        }
        while (v19 <= v16);
        uint64_t result = v19;
      }
      if ((int)result < (int)v12)
      {
        uint64_t v24 = (int)result;
        do
        {
          float v25 = rintf(v15 + (float)(v11->f32[v24] * v14));
          int v26 = (uint64_t)v25 & ~((int)(uint64_t)v25 >> 31);
          if (v26 >= 0xFFFF) {
            LOWORD(v26) = -1;
          }
          a6->i16[v24++] = v26;
        }
        while (v12 != v24);
      }
      float64x2_t v11 = (float32x4_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100244FB4(uint64_t result, unint64_t a2, double a3, double a4, __n128 a5, int32x4_t a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, int16x8_t *a11, unint64_t a12, int *a13, double *a14)
{
  int v14 = a13[1];
  if (v14)
  {
    uint64_t v16 = (float64x2_t *)result;
    uint64_t v17 = *a13;
    float v18 = *a14;
    float v19 = a14[1];
    double v20 = v18;
    double v21 = v19;
    uint64_t v22 = v17 - 4;
    uint64_t v23 = 8 * (a2 >> 3);
    uint64_t v24 = 2 * (a12 >> 1);
    do
    {
      uint64_t result = sub_100250590(v18, v19, a5.n128_f64[0], *(double *)a6.i64, a7, a8, (uint64_t)&v32, v16, a11, v17);
      if ((int)result <= (int)v22)
      {
        uint64_t v25 = (int)result;
        uint64_t v26 = 8 * (int)result + 16;
        uint64_t v27 = 2 * (int)result;
        a5 = 0uLL;
        a6.i64[0] = 0xFFFF0000FFFFLL;
        a6.i64[1] = 0xFFFF0000FFFFLL;
        do
        {
          v28.i32[0] = (uint64_t)rint(v21 + *(double *)((char *)v16[-1].f64 + v26) * v20);
          v28.i32[1] = (uint64_t)rint(v21 + v16->f64[v25 + 1] * v20);
          v28.i64[1] = __PAIR64__((uint64_t)rint(v21 + *(double *)((char *)&v16->f64[1] + v26) * v20), (uint64_t)rint(v21 + *(double *)((char *)v16->f64 + v26) * v20));
          *(int16x4_t *)&a11->i8[v27] = vmovn_s32(vminq_s32(vmaxq_s32(v28, (int32x4_t)0), a6));
          v25 += 4;
          v26 += 32;
          v27 += 8;
        }
        while (v25 <= v22);
        uint64_t result = v25;
      }
      if ((int)result < (int)v17)
      {
        uint64_t v29 = (int)result;
        do
        {
          double v30 = rint(v21 + v16->f64[v29] * v20);
          int v31 = (uint64_t)v30 & ~((int)(uint64_t)v30 >> 31);
          if (v31 >= 0xFFFF) {
            LOWORD(v31) = -1;
          }
          a11->i16[v29++] = v31;
        }
        while (v17 != v29);
      }
      uint64_t v16 = (float64x2_t *)((char *)v16 + v23);
      a11 = (int16x8_t *)((char *)a11 + v24);
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_100245148(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    uint64_t v12 = result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_10025096C(a3, *(int32x2_t *)&v14, (uint64_t)&v28, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        double v20 = &a6->i16[(int)result];
        do
        {
          double v21 = (unsigned char *)(v12 + v19);
          a3.n128_u8[0] = *(unsigned char *)(v12 + v19);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          uint64_t v22 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v22) = -32768;
          }
          if ((int)v22 >= 0x7FFF) {
            LOWORD(v22) = 0x7FFF;
          }
          a3.n128_u8[0] = v21[1];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          uint64_t v23 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v23) = -32768;
          }
          if ((int)v23 >= 0x7FFF) {
            LOWORD(v23) = 0x7FFF;
          }
          *double v20 = v22;
          v20[1] = v23;
          a3.n128_u8[0] = v21[2];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          uint64_t v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v24) = -32768;
          }
          if ((int)v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          a3.n128_u8[0] = v21[3];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          uint64_t v25 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v25) = -32768;
          }
          if ((int)v25 >= 0x7FFF) {
            LOWORD(v25) = 0x7FFF;
          }
          v20[2] = v24;
          v20[3] = v25;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v26 = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v12 + v26);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v15));
          uint64_t v27 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v27) = -32768;
          }
          if ((int)v27 >= 0x7FFF) {
            LOWORD(v27) = 0x7FFF;
          }
          a6->i16[v26++] = v27;
        }
        while (v13 != v26);
      }
      v12 += a2;
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100245308(uint64_t result, uint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    uint64_t v12 = result;
    uint64_t v13 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v14 = *(double *)(a9 + 8);
    float v15 = *(double *)a9;
    float v16 = v14;
    uint64_t v17 = v13 - 4;
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v15;
      *(float *)&double v14 = v16;
      uint64_t result = sub_100250CC8(a3, *(int32x2_t *)&v14, (uint64_t)&v28, v12, a6, v13);
      if ((int)result <= (int)v17)
      {
        uint64_t v19 = (int)result;
        double v20 = &a6->i16[(int)result];
        do
        {
          double v21 = (unsigned char *)(v12 + v19);
          a3.n128_u8[0] = *(unsigned char *)(v12 + v19);
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          uint64_t v22 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v22) = -32768;
          }
          a3.n128_u8[0] = v21[1];
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          uint64_t v23 = (uint64_t)a3.n128_f32[0];
          if ((int)v22 >= 0x7FFF) {
            LOWORD(v22) = 0x7FFF;
          }
          if ((int)v23 <= -32768) {
            LODWORD(v23) = -32768;
          }
          if ((int)v23 >= 0x7FFF) {
            LOWORD(v23) = 0x7FFF;
          }
          *double v20 = v22;
          v20[1] = v23;
          a3.n128_u8[0] = v21[2];
          a3.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0])).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          uint64_t v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v24) = -32768;
          }
          if ((int)v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          a3.n128_u8[0] = v21[3];
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          uint64_t v25 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v25) = -32768;
          }
          if ((int)v25 >= 0x7FFF) {
            LOWORD(v25) = 0x7FFF;
          }
          v20[2] = v24;
          v20[3] = v25;
          v19 += 4;
          v20 += 4;
        }
        while (v19 <= v17);
        uint64_t result = v19;
      }
      if ((int)result < (int)v13)
      {
        uint64_t v26 = (int)result;
        do
        {
          a3.n128_u8[0] = *(unsigned char *)(v12 + v26);
          a3 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a3.n128_u64[0]));
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v15));
          uint64_t v27 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v27) = -32768;
          }
          if ((int)v27 >= 0x7FFF) {
            LOWORD(v27) = 0x7FFF;
          }
          a6->i16[v26++] = v27;
        }
        while (v13 != v26);
      }
      v12 += a2;
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002454F0(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v11 = (uint16x8_t *)result;
    uint64_t v12 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v13 = *(double *)(a9 + 8);
    float v14 = *(double *)a9;
    uint64_t v15 = v12 - 4;
    float v16 = v13;
    uint64_t v17 = 2 * (a2 >> 1);
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)&double v13 = v16;
      uint64_t result = sub_100251024(a3, *(int32x2_t *)&v13, (uint64_t)&v35, v11, a6, v12);
      if ((int)result <= (int)v15)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 2 * (int)result;
        uint64_t v22 = &v11->i8[v21];
        uint64_t v23 = &a6->i8[v21];
        do
        {
          a3.n128_u16[0] = *(_WORD *)&v22[v19];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v14));
          uint64_t v24 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v24) = -32768;
          }
          uint64_t v25 = &v22[2 * v20];
          a3.n128_u16[0] = *((_WORD *)v25 + 1);
          a3.n128_f32[0] = v16 + (float)((float)a3.n128_u32[0] * v14);
          if ((int)v24 >= 0x7FFF) {
            LOWORD(v24) = 0x7FFF;
          }
          float v26 = rintf(a3.n128_f32[0]);
          uint64_t v27 = (uint64_t)v26;
          if ((int)(uint64_t)v26 <= -32768) {
            LODWORD(v27) = -32768;
          }
          if ((int)v27 >= 0x7FFF) {
            LOWORD(v27) = 0x7FFF;
          }
          char v28 = &v23[v19];
          *(_WORD *)char v28 = v24;
          *((_WORD *)v28 + 1) = v27;
          LOWORD(v26) = *((_WORD *)v25 + 2);
          float v29 = rintf(v16 + (float)((float)LODWORD(v26) * v14));
          uint64_t v30 = (uint64_t)v29;
          if ((int)(uint64_t)v29 <= -32768) {
            LODWORD(v30) = -32768;
          }
          LOWORD(v29) = *(_WORD *)&v22[v19 + 6];
          a3.n128_f32[0] = rintf(v16 + (float)((float)LODWORD(v29) * v14));
          if ((int)v30 >= 0x7FFF) {
            __int16 v31 = 0x7FFF;
          }
          else {
            __int16 v31 = v30;
          }
          uint64_t v32 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v32) = -32768;
          }
          if ((int)v32 >= 0x7FFF) {
            LOWORD(v32) = 0x7FFF;
          }
          *((_WORD *)v28 + 2) = v31;
          *((_WORD *)v28 + 3) = v32;
          v20 += 4;
          v19 += 8;
        }
        while ((int)result + v20 <= v15);
        uint64_t result = (result + v20);
      }
      if ((int)result < (int)v12)
      {
        uint64_t v33 = (int)result;
        do
        {
          a3.n128_u16[0] = v11->u16[v33];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_u32[0] * v14));
          uint64_t v34 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v34) = -32768;
          }
          if ((int)v34 >= 0x7FFF) {
            LOWORD(v34) = 0x7FFF;
          }
          a6->i16[v33++] = v34;
        }
        while (v12 != v33);
      }
      float64x2_t v11 = (uint16x8_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002456D4(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, uint64_t a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v11 = (int16x8_t *)result;
    uint64_t v12 = *a8;
    a3.n128_u64[0] = *(void *)a9;
    double v13 = *(double *)(a9 + 8);
    float v14 = *(double *)a9;
    uint64_t v15 = v12 - 4;
    float v16 = v13;
    uint64_t v17 = 2 * (a2 >> 1);
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)&double v13 = v16;
      uint64_t result = sub_100251350(a3, *(int32x2_t *)&v13, (uint64_t)&v35, v11, a6, v12);
      if ((int)result <= (int)v15)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 2 * (int)result;
        uint64_t v22 = &v11->i8[v21];
        uint64_t v23 = &a6->i8[v21];
        do
        {
          a3.n128_u16[0] = *(_WORD *)&v22[v19];
          int16x4_t v24 = (int16x4_t)vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
          *(float *)v24.i32 = rintf(v16 + (float)((float)v24.i32[0] * v14));
          uint64_t v25 = (uint64_t)*(float *)v24.i32;
          BOOL v26 = (int)(uint64_t)*(float *)v24.i32 <= -32768;
          uint64_t v27 = &v22[2 * v20];
          v24.i16[0] = *((_WORD *)v27 + 1);
          a3.n128_u64[0] = vmovl_s16(v24).u64[0];
          if (v26) {
            LODWORD(v25) = -32768;
          }
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v14));
          uint64_t v28 = (uint64_t)a3.n128_f32[0];
          if ((int)v25 >= 0x7FFF) {
            LOWORD(v25) = 0x7FFF;
          }
          if ((int)v28 <= -32768) {
            LODWORD(v28) = -32768;
          }
          float v29 = &v23[v19];
          if ((int)v28 >= 0x7FFF) {
            LOWORD(v28) = 0x7FFF;
          }
          *(_WORD *)float v29 = v25;
          *((_WORD *)v29 + 1) = v28;
          a3.n128_u16[0] = *((_WORD *)v27 + 2);
          a3.n128_u64[0] = vmovl_s16((int16x4_t)a3.n128_u64[0]).u64[0];
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v14));
          uint64_t v30 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v30) = -32768;
          }
          a3.n128_u16[0] = *(_WORD *)&v22[v19 + 6];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v14));
          if ((int)v30 >= 0x7FFF) {
            __int16 v31 = 0x7FFF;
          }
          else {
            __int16 v31 = v30;
          }
          uint64_t v32 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v32) = -32768;
          }
          if ((int)v32 >= 0x7FFF) {
            LOWORD(v32) = 0x7FFF;
          }
          *((_WORD *)v29 + 2) = v31;
          *((_WORD *)v29 + 3) = v32;
          v20 += 4;
          v19 += 8;
        }
        while ((int)result + v20 <= v15);
        uint64_t result = (result + v20);
      }
      if ((int)result < (int)v12)
      {
        uint64_t v33 = (int)result;
        do
        {
          a3.n128_u16[0] = v11->u16[v33];
          a3 = (__n128)vmovl_s16((int16x4_t)a3.n128_u64[0]);
          a3.n128_f32[0] = rintf(v16 + (float)((float)a3.n128_i32[0] * v14));
          uint64_t v34 = (uint64_t)a3.n128_f32[0];
          if ((int)(uint64_t)a3.n128_f32[0] <= -32768) {
            LODWORD(v34) = -32768;
          }
          if ((int)v34 >= 0x7FFF) {
            LOWORD(v34) = 0x7FFF;
          }
          a6->i16[v33++] = v34;
        }
        while (v12 != v33);
      }
      float64x2_t v11 = (int16x8_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_1002458CC(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, unint64_t *a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v11 = (int32x4_t *)result;
    uint64_t v12 = *a8;
    a3.n128_u64[0] = *a9;
    v13.i64[0] = a9[1];
    float v14 = *(double *)a9;
    uint64_t v15 = v12 - 4;
    float v16 = *(double *)v13.i64;
    uint64_t v17 = 4 * (a2 >> 2);
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)v13.i32 = v16;
      uint64_t result = sub_10025167C(a3, *(int32x2_t *)v13.i8, (uint64_t)&v24, v11, a6, v12);
      if ((int)result <= (int)v15)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 4 * (int)result + 8;
        uint64_t v21 = 2 * (int)result;
        do
        {
          v13.i32[0] = (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)&v11->i32[-2] + v20) * v14));
          v13.i32[1] = (uint64_t)rintf(v16 + (float)((float)v11->i32[v19 + 1] * v14));
          v13.i32[2] = (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)v11->i32 + v20) * v14));
          v13.i32[3] = (uint64_t)rintf(v16 + (float)((float)*(int *)((char *)&v11->i32[1] + v20) * v14));
          a3.n128_u64[0] = (unint64_t)vqmovn_s32(v13);
          *(uint64_t *)((char *)a6->i64 + v21) = a3.n128_u64[0];
          v19 += 4;
          v20 += 16;
          v21 += 8;
        }
        while (v19 <= v15);
        uint64_t result = v19;
      }
      if ((int)result < (int)v12)
      {
        uint64_t v22 = (int)result;
        do
        {
          uint64_t v23 = (uint64_t)rintf(v16 + (float)((float)v11->i32[v22] * v14));
          if ((int)v23 <= -32768) {
            LODWORD(v23) = -32768;
          }
          if ((int)v23 >= 0x7FFF) {
            LOWORD(v23) = 0x7FFF;
          }
          a6->i16[v22++] = v23;
        }
        while (v12 != v22);
      }
      float64x2_t v11 = (int32x4_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100245A64(uint64_t result, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, int16x8_t *a6, unint64_t a7, int *a8, unint64_t *a9)
{
  int v9 = a8[1];
  if (v9)
  {
    float64x2_t v11 = (float32x4_t *)result;
    uint64_t v12 = *a8;
    a3.n128_u64[0] = *a9;
    v13.i64[0] = a9[1];
    float v14 = *(double *)a9;
    uint64_t v15 = v12 - 4;
    float v16 = *(double *)v13.i64;
    uint64_t v17 = 4 * (a2 >> 2);
    uint64_t v18 = 2 * (a7 >> 1);
    do
    {
      a3.n128_f32[0] = v14;
      *(float *)v13.i32 = v16;
      uint64_t result = sub_100251A34(a3, *(int32x2_t *)v13.i8, (uint64_t)&v24, v11, a6, v12);
      if ((int)result <= (int)v15)
      {
        uint64_t v19 = (int)result;
        uint64_t v20 = 4 * (int)result + 8;
        uint64_t v21 = 2 * (int)result;
        do
        {
          v13.i32[0] = (uint64_t)rintf(v16 + (float)(*(float *)((char *)&v11->f32[-2] + v20) * v14));
          v13.i32[1] = (uint64_t)rintf(v16 + (float)(v11->f32[v19 + 1] * v14));
          v13.i32[2] = (uint64_t)rintf(v16 + (float)(*(float *)((char *)v11->f32 + v20) * v14));
          v13.i32[3] = (uint64_t)rintf(v16 + (float)(*(float *)((char *)&v11->f32[1] + v20) * v14));
          a3.n128_u64[0] = (unint64_t)vqmovn_s32(v13);
          *(uint64_t *)((char *)a6->i64 + v21) = a3.n128_u64[0];
          v19 += 4;
          v20 += 16;
          v21 += 8;
        }
        while (v19 <= v15);
        uint64_t result = v19;
      }
      if ((int)result < (int)v12)
      {
        uint64_t v22 = (int)result;
        do
        {
          uint64_t v23 = (uint64_t)rintf(v16 + (float)(v11->f32[v22] * v14));
          if ((int)v23 <= -32768) {
            LODWORD(v23) = -32768;
          }
          if ((int)v23 >= 0x7FFF) {
            LOWORD(v23) = 0x7FFF;
          }
          a6->i16[v22++] = v23;
        }
        while (v12 != v22);
      }
      float64x2_t v11 = (float32x4_t *)((char *)v11 + v17);
      a6 = (int16x8_t *)((char *)a6 + v18);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t sub_100245BE8(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7, __n128 a8, uint64_t a9, uint64_t a10, int16x8_t *a11, unint64_t a12, int *a13, double *a14)
{
  int v14 = a13[1];
  if (v14)
  {
    float v16 = (float64x2_t *)result;
    uint64_t v17 = *a13;
    float v18 = *a14;
    float v19 = a14[1];
    double v20 = v18;
    uint64_t v21 = v17 - 4;
    double v22 = v19;
    uint64_t v23 = 8 * (a2 >> 3);
    uint64_t v24 = 2 * (a12 >> 1);
    do
    {
      uint64_t result = sub_100251DE4(v18, v19, a5, a6, a7, a8, (uint64_t)&v31, v16, a11, v17);
      if ((int)result <= (int)v21)
      {
        uint64_t v25 = (int)result;
        uint64_t v26 = 8 * (int)result + 16;
        uint64_t v27 = 2 * (int)result;
        do
        {
          v28.i32[0] = (uint64_t)rint(v22 + *(double *)((char *)v16[-1].f64 + v26) * v20);
          v28.i32[1] = (uint64_t)rint(v22 + v16->f64[v25 + 1] * v20);
          v28.i32[2] = (uint64_t)rint(v22 + *(double *)((char *)v16->f64 + v26) * v20);
          v28.i32[3] = (uint64_t)rint(v22 + *(double *)((char *)&v16->f64[1] + v26) * v20);
          *(int16x4_t *)&a11->i8[v27] = vqmovn_s32(v28);
          v25 += 4;
          v26 += 32;
          v27 += 8;
        }
        while (v25 <= v21);
        uint64_t result = v25;
      }
      if ((int)result < (int)v17)
      {
        uint64_t v29 = (int)result;
        do
        {
          uint64_t v30 = (uint64_t)rint(v22 + v16->f64[v29] * v20);
          if ((int)v30 <= -32768) {
            LODWORD(v30) = -32768;
          }
          if ((int)v30 >= 0x7FFF) {
            LOWORD(v30) = 0x7FFF;
          }
          a11->i16[v29++] = v30;
        }
        while (v17 != v29);
      }
      float v16 = (float64x2_t *)((char *)v16 + v23);
      a11 = (int16x8_t *)((char *)a11 + v24);
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_100245D7C(uint64_t result, uint64_t a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, uint64_t a8, int32x4_t *a9, unint64_t a10, int *a11, double *a12)
{
  int v12 = a11[1];
  if (v12)
  {
    uint64_t v15 = result;
    uint64_t v16 = *a11;
    double v17 = a12[1];
    float v18 = *a12;
    float v19 = v17;
    uint64_t v20 = v16 - 4;
    uint64_t v21 = 4 * (a10 >> 2);
    do
    {
      *(float *)&double v17 = v19;
      uint64_t result = sub_1002521C0(v18, *(int32x2_t *)&v17, a5, a6, (uint64_t)&v31, v15, a9, v16);
      if ((int)result <= (int)v20)
      {
        uint64_t v23 = (int)result;
        uint64_t v24 = &a9->i32[(int)result];
        do
        {
          LOBYTE(v22) = *(unsigned char *)(v15 + v23);
          *(float *)&unsigned int v25 = rintf(v19 + (float)((float)LODWORD(v22) * v18));
          uint64_t v26 = (uint64_t)*(float *)&v25;
          LOBYTE(v25) = *(unsigned char *)(v15 + v23 + 1);
          *(float *)&unsigned int v27 = rintf(v19 + (float)((float)v25 * v18));
          *uint64_t v24 = v26;
          v24[1] = (uint64_t)*(float *)&v27;
          LOBYTE(v27) = *(unsigned char *)(v15 + v23 + 2);
          *(float *)&unsigned int v28 = rintf(v19 + (float)((float)v27 * v18));
          uint64_t v29 = (uint64_t)*(float *)&v28;
          LOBYTE(v28) = *(unsigned char *)(v15 + v23 + 3);
          float v22 = rintf(v19 + (float)((float)v28 * v18));
          v24[2] = v29;
          v24[3] = (uint64_t)v22;
          v23 += 4;
          v24 += 4;
        }
        while (v23 <= v20);
        uint64_t result = v23;
      }
      if ((int)result < (int)v16)
      {
        uint64_t v30 = (int)result;
        do
        {
          LOBYTE(v22) = *(unsigned char *)(v15 + v30);
          float v22 = rintf(v19 + (float)((float)LODWORD(v22) * v18));
          a9->i32[v30++] = (uint64_t)v22;
        }
        while (v16 != v30);
      }
      v15 += a2;
      a9 = (int32x4_t *)((char *)a9 + v21);
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_100245ED4(uint64_t result, uint64_t a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, uint64_t a8, int32x4_t *a9, unint64_t a10, int *a11, double *a12)
{
  int v12 = a11[1];
  if (v12)
  {
    uint64_t v15 = result;
    uint64_t v16 = *a11;
    double v17 = a12[1];
    float v18 = *a12;
    float v19 = v17;
    uint64_t v20 = v16 - 4;
    uint64_t v21 = 4 * (a10 >> 2);
    do
    {
      *(float *)&double v17 = v19;
      uint64_t result = sub_100252508(v18, *(int32x2_t *)&v17, a5, a6, (uint64_t)&v31, v15, a9, v16);
      if ((int)result <= (int)v20)
      {
        uint64_t v23 = (int)result;
        uint64_t v24 = &a9->i32[(int)result];
        do
        {
          v22.i8[0] = *(unsigned char *)(v15 + v23);
          int8x8_t v25 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22)).u64[0];
          *(float *)v25.i32 = rintf(v19 + (float)((float)v25.i32[0] * v18));
          uint64_t v26 = (uint64_t)*(float *)v25.i32;
          v25.i8[0] = *(unsigned char *)(v15 + v23 + 1);
          int8x8_t v27 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v25)).u64[0];
          *(float *)v27.i32 = rintf(v19 + (float)((float)v27.i32[0] * v18));
          *uint64_t v24 = v26;
          v24[1] = (uint64_t)*(float *)v27.i32;
          v27.i8[0] = *(unsigned char *)(v15 + v23 + 2);
          int8x8_t v28 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v27)).u64[0];
          *(float *)v28.i32 = rintf(v19 + (float)((float)v28.i32[0] * v18));
          uint64_t v29 = (uint64_t)*(float *)v28.i32;
          v28.i8[0] = *(unsigned char *)(v15 + v23 + 3);
          int8x8_t v22 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v28)).u64[0];
          *(float *)v22.i32 = rintf(v19 + (float)((float)v22.i32[0] * v18));
          v24[2] = v29;
          v24[3] = (uint64_t)*(float *)v22.i32;
          v23 += 4;
          v24 += 4;
        }
        while (v23 <= v20);
        uint64_t result = v23;
      }
      if ((int)result < (int)v16)
      {
        uint64_t v30 = (int)result;
        do
        {
          v22.i8[0] = *(unsigned char *)(v15 + v30);
          int8x8_t v22 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22)).u64[0];
          *(float *)v22.i32 = rintf(v19 + (float)((float)v22.i32[0] * v18));
          a9->i32[v30++] = (uint64_t)*(float *)v22.i32;
        }
        while (v16 != v30);
      }
      v15 += a2;
      a9 = (int32x4_t *)((char *)a9 + v21);
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_100246054(uint64_t result, unint64_t a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, uint64_t a8, int32x4_t *a9, unint64_t a10, int *a11, double *a12)
{
  int v12 = a11[1];
  if (v12)
  {
    int v14 = (uint16x8_t *)result;
    uint64_t v15 = *a11;
    double v16 = a12[1];
    float v17 = *a12;
    float v18 = v16;
    uint64_t v19 = v15 - 4;
    uint64_t v20 = 2 * (a2 >> 1);
    uint64_t v21 = 4 * (a10 >> 2);
    do
    {
      *(float *)&double v16 = v18;
      uint64_t result = sub_100252850(v17, *(int32x2_t *)&v16, a5, a6, (uint64_t)&v34, v14, a9, v15);
      if ((int)result <= (int)v19)
      {
        uint64_t v23 = 0;
        uint64_t v24 = &v14->i8[2 * (int)result];
        uint64_t v25 = 6;
        uint64_t v26 = &a9->i32[(int)result];
        do
        {
          LOWORD(v22) = *(_WORD *)&v24[v25 - 6];
          *(float *)&unsigned int v27 = rintf(v18 + (float)((float)LODWORD(v22) * v17));
          uint64_t v28 = (uint64_t)*(float *)&v27;
          uint64_t v29 = &v24[2 * v23];
          LOWORD(v27) = *((_WORD *)v29 + 1);
          *(float *)&unsigned int v30 = rintf(v18 + (float)((float)v27 * v17));
          __int32 *v26 = v28;
          v26[1] = (uint64_t)*(float *)&v30;
          LOWORD(v30) = *((_WORD *)v29 + 2);
          *(float *)&unsigned int v31 = rintf(v18 + (float)((float)v30 * v17));
          uint64_t v32 = (uint64_t)*(float *)&v31;
          LOWORD(v31) = *(_WORD *)&v24[v25];
          float v22 = rintf(v18 + (float)((float)v31 * v17));
          v26[2] = v32;
          v26[3] = (uint64_t)v22;
          v23 += 4;
          v25 += 8;
          v26 += 4;
        }
        while ((int)result + v23 <= v19);
        uint64_t result = (result + v23);
      }
      if ((int)result < (int)v15)
      {
        uint64_t v33 = (int)result;
        do
        {
          LOWORD(v22) = v14->i16[v33];
          float v22 = rintf(v18 + (float)((float)LODWORD(v22) * v17));
          a9->i32[v33++] = (uint64_t)v22;
        }
        while (v15 != v33);
      }
      int v14 = (uint16x8_t *)((char *)v14 + v20);
      a9 = (int32x4_t *)((char *)a9 + v21);
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_1002461C8(int16x8_t *a1, unint64_t a2, double a3, double a4, double a5, __n128 a6, __n128 a7, uint64_t a8, uint64_t a9, int32x4_t *a10, unint64_t a11, int *a12, uint64_t a13)
{
  int v13 = a12[1];
  if (v13)
  {
    int v14 = a1;
    uint64_t v15 = *a12;
    int16x4_t v16 = *(int16x4_t *)a13;
    a6.n128_f32[0] = *(double *)a13;
    a7.n128_f32[0] = *(double *)(a13 + 8);
    unint64_t v17 = a2 >> 1;
    unint64_t v18 = a11 >> 2;
    if ((int)v15 >= 8)
    {
      uint64_t v23 = a10 + 1;
      uint64_t v24 = 4 * v18;
      float32x4_t v25 = (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 0);
      uint64_t v26 = 2 * v17;
      unsigned int v27 = a10 + 2;
      do
      {
        uint64_t v28 = 0;
        uint64_t v29 = v27;
        unsigned int v30 = v14;
        unsigned int v31 = v23;
        do
        {
          uint64_t v32 = v29;
          int16x8_t v33 = *v30;
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            int v82 = v13;
            __n128 v74 = a7;
            __n128 v78 = a6;
            int8x16_t v66 = v23;
            int8x16_t v70 = v14;
            uint64_t v62 = v24;
            float32x4_t v58 = v25;
            uint64_t v50 = v27;
            uint64_t v54 = v26;
            int16x8_t v46 = v33;
            int v37 = __cxa_guard_acquire(qword_1004D2D60);
            int16x8_t v33 = v46;
            *(void *)&long long v38 = 0x8000000080000000;
            *((void *)&v38 + 1) = 0x8000000080000000;
            unsigned int v27 = v50;
            uint64_t v26 = v54;
            float32x4_t v25 = v58;
            uint64_t v24 = v62;
            uint64_t v23 = v66;
            int v14 = v70;
            a7 = v74;
            a6 = v78;
            int v13 = v82;
            if (v37)
            {
              xmmword_1004D2D50 = v38;
              __cxa_guard_release(qword_1004D2D60);
              int16x8_t v33 = v46;
              unsigned int v27 = v50;
              uint64_t v26 = v54;
              float32x4_t v25 = v58;
              uint64_t v24 = v62;
              uint64_t v23 = v66;
              int v14 = v70;
              a7 = v74;
              a6 = v78;
              int v13 = v82;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            int v83 = v13;
            __n128 v75 = a7;
            __n128 v79 = a6;
            int8x16_t v67 = v23;
            int8x16_t v71 = v14;
            uint64_t v63 = v24;
            float32x4_t v59 = v25;
            uint64_t v51 = v27;
            uint64_t v55 = v26;
            int16x8_t v47 = v33;
            int v39 = __cxa_guard_acquire(qword_1004D2D80);
            int16x8_t v33 = v47;
            *(void *)&long long v40 = 0x3F0000003F000000;
            *((void *)&v40 + 1) = 0x3F0000003F000000;
            unsigned int v27 = v51;
            uint64_t v26 = v55;
            float32x4_t v25 = v59;
            uint64_t v24 = v63;
            uint64_t v23 = v67;
            int v14 = v71;
            a7 = v75;
            a6 = v79;
            int v13 = v83;
            if (v39)
            {
              xmmword_1004D2D70 = v40;
              __cxa_guard_release(qword_1004D2D80);
              int16x8_t v33 = v47;
              unsigned int v27 = v51;
              uint64_t v26 = v55;
              float32x4_t v25 = v59;
              uint64_t v24 = v63;
              uint64_t v23 = v67;
              int v14 = v71;
              a7 = v75;
              a6 = v79;
              int v13 = v83;
            }
          }
          int8x16_t v34 = (int8x16_t)vaddq_f32(v25, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v33.i8)), a6.n128_f32[0]));
          v31[-1] = vcvtq_s32_f32(vaddq_f32((float32x4_t)v34, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_1004D2D50, v34), (int8x16_t)xmmword_1004D2D70)));
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            int v84 = v13;
            __n128 v76 = a7;
            __n128 v80 = a6;
            int8x16_t v68 = v23;
            int8x16_t v72 = v14;
            uint64_t v64 = v24;
            float32x4_t v60 = v25;
            uint64_t v52 = v27;
            uint64_t v56 = v26;
            int16x8_t v48 = v33;
            int v41 = __cxa_guard_acquire(qword_1004D2D60);
            int16x8_t v33 = v48;
            *(void *)&long long v42 = 0x8000000080000000;
            *((void *)&v42 + 1) = 0x8000000080000000;
            unsigned int v27 = v52;
            uint64_t v26 = v56;
            float32x4_t v25 = v60;
            uint64_t v24 = v64;
            uint64_t v23 = v68;
            int v14 = v72;
            a7 = v76;
            a6 = v80;
            int v13 = v84;
            if (v41)
            {
              xmmword_1004D2D50 = v42;
              __cxa_guard_release(qword_1004D2D60);
              int16x8_t v33 = v48;
              unsigned int v27 = v52;
              uint64_t v26 = v56;
              float32x4_t v25 = v60;
              uint64_t v24 = v64;
              uint64_t v23 = v68;
              int v14 = v72;
              a7 = v76;
              a6 = v80;
              int v13 = v84;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            int v85 = v13;
            __n128 v77 = a7;
            __n128 v81 = a6;
            int8x16_t v69 = v23;
            int8x16_t v73 = v14;
            uint64_t v65 = v24;
            float32x4_t v61 = v25;
            int v53 = v27;
            uint64_t v57 = v26;
            int16x8_t v49 = v33;
            int v43 = __cxa_guard_acquire(qword_1004D2D80);
            int16x8_t v33 = v49;
            *(void *)&long long v44 = 0x3F0000003F000000;
            *((void *)&v44 + 1) = 0x3F0000003F000000;
            unsigned int v27 = v53;
            uint64_t v26 = v57;
            float32x4_t v25 = v61;
            uint64_t v24 = v65;
            uint64_t v23 = v69;
            int v14 = v73;
            a7 = v77;
            a6 = v81;
            int v13 = v85;
            if (v43)
            {
              xmmword_1004D2D70 = v44;
              __cxa_guard_release(qword_1004D2D80);
              int16x8_t v33 = v49;
              unsigned int v27 = v53;
              uint64_t v26 = v57;
              float32x4_t v25 = v61;
              uint64_t v24 = v65;
              uint64_t v23 = v69;
              int v14 = v73;
              a7 = v77;
              a6 = v81;
              int v13 = v85;
            }
          }
          int8x16_t v35 = (int8x16_t)vaddq_f32(v25, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v33)), a6.n128_f32[0]));
          int32x4_t v36 = vcvtq_s32_f32(vaddq_f32((float32x4_t)v35, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)xmmword_1004D2D50, v35), (int8x16_t)xmmword_1004D2D70)));
          *unsigned int v31 = v36;
          v31 += 2;
          v28 += 8;
          ++v30;
          uint64_t v29 = v32 + 2;
        }
        while (v28 <= v15 - 8);
        if ((int)v15 > (int)v28)
        {
          uint64_t v45 = 0;
          do
          {
            v36.i16[0] = v30->i16[v45];
            v36.i64[0] = vmovl_s16(*(int16x4_t *)v36.i8).u64[0];
            *(float *)v36.i32 = rintf(a7.n128_f32[0] + (float)((float)v36.i32[0] * a6.n128_f32[0]));
            v32->i32[0] = (uint64_t)*(float *)v36.i32;
            uint64_t v32 = (int32x4_t *)((char *)v32 + 4);
            ++v45;
          }
          while (v28 + v45 < v15);
        }
        uint64_t v23 = (int32x4_t *)((char *)v23 + v24);
        int v14 = (int16x8_t *)((char *)v14 + v26);
        unsigned int v27 = (int32x4_t *)((char *)v27 + v24);
        --v13;
      }
      while (v13);
    }
    else if ((int)v15 >= 1)
    {
      uint64_t v19 = &a10->i32[3];
      uint64_t v20 = 4 * v18;
      uint64_t v21 = &a1->i16[3];
      uint64_t v22 = 2 * v17;
      do
      {
        v16.i16[0] = *(v21 - 3);
        int16x4_t v16 = (int16x4_t)vmovl_s16(v16).u64[0];
        *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
        *(v19 - 3) = (uint64_t)*(float *)v16.i32;
        if (v15 != 1)
        {
          v16.i16[0] = *(v21 - 2);
          int16x4_t v16 = (int16x4_t)vmovl_s16(v16).u64[0];
          *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
          *(v19 - 2) = (uint64_t)*(float *)v16.i32;
          if (v15 != 2)
          {
            v16.i16[0] = *(v21 - 1);
            int16x4_t v16 = (int16x4_t)vmovl_s16(v16).u64[0];
            *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
            *(v19 - 1) = (uint64_t)*(float *)v16.i32;
            if (v15 != 3)
            {
              v16.i16[0] = *v21;
              int16x4_t v16 = (int16x4_t)vmovl_s16(v16).u64[0];
              *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
              *uint64_t v19 = (uint64_t)*(float *)v16.i32;
              if (v15 != 4)
              {
                v16.i16[0] = v21[1];
                int16x4_t v16 = (int16x4_t)vmovl_s16(v16).u64[0];
                *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
                v19[1] = (uint64_t)*(float *)v16.i32;
                if (v15 != 5)
                {
                  v16.i16[0] = v21[2];
                  int16x4_t v16 = (int16x4_t)vmovl_s16(v16).u64[0];
                  *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
                  v19[2] = (uint64_t)*(float *)v16.i32;
                  if (v15 != 6)
                  {
                    v16.i16[0] = v21[3];
                    int16x4_t v16 = (int16x4_t)vmovl_s16(v16).u64[0];
                    *(float *)v16.i32 = rintf(a7.n128_f32[0] + (float)((float)v16.i32[0] * a6.n128_f32[0]));
                    v19[3] = (uint64_t)*(float *)v16.i32;
                  }
                }
              }
            }
          }
        }
        uint64_t v19 = (__int32 *)((char *)v19 + v20);
        uint64_t v21 = (__int16 *)((char *)v21 + v22);
        --v13;
      }
      while (v13);
    }
  }
}

void sub_100246658(uint64_t a1, unint64_t a2, double a3, double a4, __n128 a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, int *a11, unint64_t *a12)
{
  int v12 = a11[1];
  if (v12)
  {
    uint64_t v13 = a9;
    uint64_t v14 = a1;
    uint64_t v15 = *a11;
    a5.n128_u64[0] = *a12;
    a6.n128_u64[0] = a12[1];
    unint64_t v16 = a2 >> 2;
    unint64_t v17 = a10 >> 2;
    if ((int)v15 >= 4)
    {
      float64x2_t v22 = (float64x2_t)vdupq_lane_s64(a6.n128_i64[0], 0);
      uint64_t v23 = 4 * v17;
      uint64_t v24 = 4 * v16;
      do
      {
        uint64_t v25 = 0;
        int v26 = 0;
        uint64_t v27 = 0;
        do
        {
          uint64_t v29 = *(void *)(v14 + v25);
          uint64_t v28 = *(void *)(v14 + v25 + 8);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2E70, memory_order_acquire) & 1) == 0)
          {
            __n128 v41 = a6;
            __n128 v43 = a5;
            float64x2_t v39 = v22;
            uint64_t v35 = v24;
            uint64_t v37 = v23;
            int v32 = __cxa_guard_acquire(&qword_1004D2E70);
            uint64_t v24 = v35;
            uint64_t v23 = v37;
            float64x2_t v22 = v39;
            a6 = v41;
            a5 = v43;
            if (v32)
            {
              qword_1004D2E68 = 0;
              __cxa_guard_release(&qword_1004D2E70);
              uint64_t v24 = v35;
              uint64_t v23 = v37;
              float64x2_t v22 = v39;
              a6 = v41;
              a5 = v43;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2E70, memory_order_acquire) & 1) == 0)
          {
            __n128 v42 = a6;
            __n128 v44 = a5;
            float64x2_t v40 = v22;
            uint64_t v36 = v24;
            uint64_t v38 = v23;
            int v33 = __cxa_guard_acquire(&qword_1004D2E70);
            uint64_t v24 = v36;
            uint64_t v23 = v38;
            float64x2_t v22 = v40;
            a6 = v42;
            a5 = v44;
            if (v33)
            {
              qword_1004D2E68 = 0;
              __cxa_guard_release(&qword_1004D2E70);
              uint64_t v24 = v36;
              uint64_t v23 = v38;
              float64x2_t v22 = v40;
              a6 = v42;
              a5 = v44;
            }
          }
          v30.i64[0] = (int)v29;
          v30.i64[1] = SHIDWORD(v29);
          float64x2_t v31 = vcvtq_f64_s64(v30);
          v30.i64[0] = (int)v28;
          v30.i64[1] = SHIDWORD(v28);
          *(int32x4_t *)(v13 + v25) = vmovn_hight_s64(vmovn_s64(vcvtaq_s64_f64(vaddq_f64(v22, vmulq_n_f64(v31, a5.n128_f64[0])))), vcvtaq_s64_f64(vaddq_f64(v22, vmulq_n_f64(vcvtq_f64_s64(v30), a5.n128_f64[0]))));
          v27 += 0x400000000;
          v26 += 4;
          v25 += 16;
        }
        while ((int)v15 - 4 >= v26);
        if ((int)v15 > v26)
        {
          uint64_t v34 = v27 >> 32;
          do
          {
            *(_DWORD *)(v13 + 4 * v34) = (uint64_t)rint(a6.n128_f64[0] + (double)*(int *)(v14 + 4 * v34) * a5.n128_f64[0]);
            ++v34;
          }
          while (v15 != v34);
        }
        v13 += v23;
        v14 += v24;
        --v12;
      }
      while (v12);
    }
    else if ((int)v15 >= 1)
    {
      unint64_t v18 = (int *)(a1 + 8);
      uint64_t v19 = 4 * v16;
      uint64_t v20 = (_DWORD *)(a9 + 8);
      uint64_t v21 = 4 * v17;
      do
      {
        *(v20 - 2) = (uint64_t)rint(a6.n128_f64[0] + (double)*(v18 - 2) * a5.n128_f64[0]);
        if (v15 != 1)
        {
          *(v20 - 1) = (uint64_t)rint(a6.n128_f64[0] + (double)*(v18 - 1) * a5.n128_f64[0]);
          if (v15 != 2) {
            *uint64_t v20 = (uint64_t)rint(a6.n128_f64[0] + (double)*v18 * a5.n128_f64[0]);
          }
        }
        unint64_t v18 = (int *)((char *)v18 + v19);
        uint64_t v20 = (_DWORD *)((char *)v20 + v21);
        --v12;
      }
      while (v12);
    }
  }
}

void sub_1002468C8(uint64_t a1, unint64_t a2, double a3, double a4, double a5, __n128 a6, __n128 a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, int *a12, double *a13)
{
  int v13 = a12[1];
  if (v13)
  {
    uint64_t v14 = a10;
    uint64_t v15 = a1;
    uint64_t v16 = *a12;
    a6.n128_f32[0] = *a13;
    a7.n128_f32[0] = a13[1];
    unint64_t v17 = a2 >> 2;
    unint64_t v18 = a11 >> 2;
    int v19 = v16 - 4;
    if ((int)v16 >= 4)
    {
      uint64_t v24 = 4 * v17;
      float32x4_t v25 = (float32x4_t)vdupq_lane_s32((int32x2_t)a7.n128_u64[0], 0);
      uint64_t v26 = 4 * v18;
      uint64_t v27 = (int8x16_t *)&unk_1004D2000;
      do
      {
        uint64_t v28 = 0;
        int v29 = 0;
        uint64_t v30 = 0;
        do
        {
          float32x4_t v31 = *(float32x4_t *)(v15 + v28);
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
          {
            int v52 = v13;
            uint64_t v50 = v16;
            __n128 v46 = a7;
            __n128 v48 = a6;
            uint64_t v44 = v24;
            float32x4_t v42 = v25;
            uint64_t v40 = v26;
            float32x4_t v38 = v31;
            int v33 = __cxa_guard_acquire(qword_1004D2D60);
            float32x4_t v31 = v38;
            *(void *)&long long v34 = 0x8000000080000000;
            *((void *)&v34 + 1) = 0x8000000080000000;
            uint64_t v27 = (int8x16_t *)&unk_1004D2000;
            uint64_t v26 = v40;
            float32x4_t v25 = v42;
            uint64_t v24 = v44;
            a7 = v46;
            a6 = v48;
            uint64_t v16 = v50;
            int v13 = v52;
            if (v33)
            {
              xmmword_1004D2D50 = v34;
              __cxa_guard_release(qword_1004D2D60);
              float32x4_t v31 = v38;
              uint64_t v27 = (int8x16_t *)&unk_1004D2000;
              uint64_t v26 = v40;
              float32x4_t v25 = v42;
              uint64_t v24 = v44;
              a7 = v46;
              a6 = v48;
              uint64_t v16 = v50;
              int v13 = v52;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
          {
            int v53 = v13;
            uint64_t v51 = v16;
            __n128 v47 = a7;
            __n128 v49 = a6;
            uint64_t v45 = v24;
            float32x4_t v43 = v25;
            uint64_t v41 = v26;
            float32x4_t v39 = v31;
            int v35 = __cxa_guard_acquire(qword_1004D2D80);
            float32x4_t v31 = v39;
            *(void *)&long long v36 = 0x3F0000003F000000;
            *((void *)&v36 + 1) = 0x3F0000003F000000;
            uint64_t v27 = (int8x16_t *)&unk_1004D2000;
            uint64_t v26 = v41;
            float32x4_t v25 = v43;
            uint64_t v24 = v45;
            a7 = v47;
            a6 = v49;
            uint64_t v16 = v51;
            int v13 = v53;
            if (v35)
            {
              xmmword_1004D2D70 = v36;
              __cxa_guard_release(qword_1004D2D80);
              float32x4_t v31 = v39;
              uint64_t v27 = (int8x16_t *)&unk_1004D2000;
              uint64_t v26 = v41;
              float32x4_t v25 = v43;
              uint64_t v24 = v45;
              a7 = v47;
              a6 = v49;
              uint64_t v16 = v51;
              int v13 = v53;
            }
          }
          int8x16_t v32 = (int8x16_t)vaddq_f32(v25, vmulq_n_f32(v31, a6.n128_f32[0]));
          *(int32x4_t *)(v14 + v28) = vcvtq_s32_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vorrq_s8(vandq_s8(v27[213], v32), (int8x16_t)xmmword_1004D2D70)));
          v30 += 0x400000000;
          v29 += 4;
          v28 += 16;
        }
        while (v19 >= v29);
        if ((int)v16 > v29)
        {
          uint64_t v37 = v30 >> 32;
          do
          {
            *(_DWORD *)(v14 + 4 * v37) = (uint64_t)rintf(a7.n128_f32[0] + (float)(*(float *)(v15 + 4 * v37)
                                                                               * a6.n128_f32[0]));
            ++v37;
          }
          while (v16 != v37);
        }
        v15 += v24;
        v14 += v26;
        --v13;
      }
      while (v13);
    }
    else if ((int)v16 >= 1)
    {
      uint64_t v20 = (float *)(a1 + 8);
      uint64_t v21 = 4 * v17;
      float64x2_t v22 = (_DWORD *)(a10 + 8);
      uint64_t v23 = 4 * v18;
      do
      {
        *(v22 - 2) = (uint64_t)rintf(a7.n128_f32[0] + (float)(*(v20 - 2) * a6.n128_f32[0]));
        if (v16 != 1)
        {
          *(v22 - 1) = (uint64_t)rintf(a7.n128_f32[0] + (float)(*(v20 - 1) * a6.n128_f32[0]));
          if (v16 != 2) {
            *float64x2_t v22 = (uint64_t)rintf(a7.n128_f32[0] + (float)(*v20 * a6.n128_f32[0]));
          }
        }
        uint64_t v20 = (float *)((char *)v20 + v21);
        float64x2_t v22 = (_DWORD *)((char *)v22 + v23);
        --v13;
      }
      while (v13);
    }
  }
}

void sub_100246B7C(float64x2_t *a1, unint64_t a2, double a3, double a4, __n128 a5, __n128 a6, uint64_t a7, uint64_t a8, int32x4_t *a9, unint64_t a10, int *a11, unint64_t *a12)
{
  int v12 = a11[1];
  if (v12)
  {
    int v13 = a9;
    uint64_t v14 = a1;
    uint64_t v15 = *a11;
    a5.n128_u64[0] = *a12;
    a6.n128_u64[0] = a12[1];
    unint64_t v16 = a2 >> 3;
    unint64_t v17 = a10 >> 2;
    if ((int)v15 >= 4)
    {
      float64x2_t v22 = (float64x2_t)vdupq_lane_s64(a6.n128_i64[0], 0);
      uint64_t v23 = 4 * v17;
      uint64_t v24 = a1 + 1;
      uint64_t v25 = 8 * v16;
      do
      {
        int v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = v24;
        int v29 = v13;
        do
        {
          float64x2_t v30 = v28[-1];
          float64x2_t v31 = *v28;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2E70, memory_order_acquire) & 1) == 0)
          {
            int v51 = v12;
            __n128 v47 = a6;
            __n128 v49 = a5;
            float64x2_t v45 = v22;
            uint64_t v41 = v24;
            uint64_t v43 = v23;
            uint64_t v39 = v25;
            float64x2_t v35 = v30;
            float64x2_t v37 = v31;
            int v32 = __cxa_guard_acquire(&qword_1004D2E70);
            float64x2_t v30 = v35;
            float64x2_t v31 = v37;
            uint64_t v25 = v39;
            uint64_t v24 = v41;
            uint64_t v23 = v43;
            float64x2_t v22 = v45;
            a6 = v47;
            a5 = v49;
            int v12 = v51;
            if (v32)
            {
              qword_1004D2E68 = 0;
              __cxa_guard_release(&qword_1004D2E70);
              float64x2_t v30 = v35;
              float64x2_t v31 = v37;
              uint64_t v25 = v39;
              uint64_t v24 = v41;
              uint64_t v23 = v43;
              float64x2_t v22 = v45;
              a6 = v47;
              a5 = v49;
              int v12 = v51;
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004D2E70, memory_order_acquire) & 1) == 0)
          {
            int v52 = v12;
            __n128 v48 = a6;
            __n128 v50 = a5;
            float64x2_t v46 = v22;
            float32x4_t v42 = v24;
            uint64_t v44 = v23;
            uint64_t v40 = v25;
            float64x2_t v36 = v30;
            float64x2_t v38 = v31;
            int v33 = __cxa_guard_acquire(&qword_1004D2E70);
            float64x2_t v30 = v36;
            float64x2_t v31 = v38;
            uint64_t v25 = v40;
            uint64_t v24 = v42;
            uint64_t v23 = v44;
            float64x2_t v22 = v46;
            a6 = v48;
            a5 = v50;
            int v12 = v52;
            if (v33)
            {
              qword_1004D2E68 = 0;
              __cxa_guard_release(&qword_1004D2E70);
              float64x2_t v30 = v36;
              float64x2_t v31 = v38;
              uint64_t v25 = v40;
              uint64_t v24 = v42;
              uint64_t v23 = v44;
              float64x2_t v22 = v46;
              a6 = v48;
              a5 = v50;
              int v12 = v52;
            }
          }
          *v29++ = vmovn_hight_s64(vmovn_s64(vcvtaq_s64_f64(vaddq_f64(v22, vmulq_n_f64(v30, a5.n128_f64[0])))), vcvtaq_s64_f64(vaddq_f64(v22, vmulq_n_f64(v31, a5.n128_f64[0]))));
          v27 += 0x400000000;
          v26 += 4;
          v28 += 2;
        }
        while ((int)v15 - 4 >= v26);
        if ((int)v15 > v26)
        {
          uint64_t v34 = v27 >> 32;
          do
          {
            v13->i32[v34] = (uint64_t)rint(a6.n128_f64[0] + v14->f64[v34] * a5.n128_f64[0]);
            ++v34;
          }
          while (v15 != v34);
        }
        int v13 = (int32x4_t *)((char *)v13 + v23);
        uint64_t v24 = (float64x2_t *)((char *)v24 + v25);
        uint64_t v14 = (float64x2_t *)((char *)v14 + v25);
        --v12;
      }
      while (v12);
    }
    else if ((int)v15 >= 1)
    {
      f64 = a1[1].f64;
      uint64_t v19 = 8 * v16;
      uint64_t v20 = &a9->i32[2];
      uint64_t v21 = 4 * v17;
      do
      {
        *(v20 - 2) = (uint64_t)rint(a6.n128_f64[0] + *(f64 - 2) * a5.n128_f64[0]);
        if (v15 != 1)
        {
          *(v20 - 1) = (uint64_t)rint(a6.n128_f64[0] + *(f64 - 1) * a5.n128_f64[0]);
          if (v15 != 2) {
            *uint64_t v20 = (uint64_t)rint(a6.n128_f64[0] + *f64 * a5.n128_f64[0]);
          }
        }
        f64 = (double *)((char *)f64 + v19);
        uint64_t v20 = (__int32 *)((char *)v20 + v21);
        --v12;
      }
      while (v12);
    }
  }
}

uint64_t sub_100246E00(uint64_t result, uint64_t a2, double a3, double a4, float a5, uint64_t a6, uint64_t a7, float32x4_t *a8, unint64_t a9, int *a10, uint64_t a11)
{
  int v13 = a10[1];
  if (!v13) {
    return result;
  }
  uint64_t v14 = *a10;
  int32x2_t v15 = *(int32x2_t *)a11;
  double v16 = *(double *)(a11 + 8);
  *(float *)v15.i32 = *(double *)a11;
  *(float *)&double v16 = v16;
  unint64_t v17 = a9 >> 2;
  uint64_t v18 = v14 - 4;
  if ((int)v14 >= 8)
  {
    uint64_t v21 = 0;
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v16, 0);
    unint64_t v23 = a9 & 0xFFFFFFFFFFFFFFFCLL;
    float32x4_t v24 = (float32x4_t)vdupq_lane_s32(v15, 0);
    uint64_t v25 = a8 + 1;
    uint64_t v26 = 4 * v17;
    uint64_t v27 = (uint64_t)&a8->i64[1] + 4;
    uint64_t v28 = result + 4;
    int v29 = a8;
    uint64_t v30 = result;
    while (1)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      int v33 = v25;
      do
      {
        uint16x8_t v34 = vmovl_u8(*(uint8x8_t *)(v30 + v32));
        float32x4_t v35 = vaddq_f32(v22, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v34.i8)), *(float *)v15.i32));
        float32x4_t v36 = vaddq_f32(v22, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v34)), *(float *)v15.i32));
        v33[-1] = v35;
        *int v33 = v36;
        v32 += 8;
        v31 += 0x800000000;
        v33 += 2;
      }
      while (v32 <= (v14 - 8));
      if ((int)v18 >= (int)v32)
      {
        uint64_t v37 = 0;
        uint64_t v38 = 4 * (int)v32;
        uint64_t v39 = (float *)(v27 + v38);
        uint64_t v40 = v30 + (int)v32;
        uint64_t v41 = (uint64_t)v29 + v38;
        do
        {
          v36.i8[0] = *(unsigned char *)(v40 + v37);
          *(float *)&unsigned int v42 = *(float *)&v16 + (float)((float)v36.u32[0] * *(float *)v15.i32);
          v35.i8[0] = *(unsigned char *)(v40 + v37 + 1);
          *(float *)&unsigned int v43 = *(float *)&v16 + (float)((float)v35.u32[0] * *(float *)v15.i32);
          *(v39 - 3) = *(float *)&v42;
          uint64_t v44 = v41 + 4 * v37;
          *(float *)(v44 + 4) = *(float *)&v43;
          LOBYTE(v42) = *(unsigned char *)(v40 + v37 + 2);
          v36.f32[0] = *(float *)&v16 + (float)((float)v42 * *(float *)v15.i32);
          LOBYTE(v43) = *(unsigned char *)(v40 + v37 + 3);
          v35.f32[0] = *(float *)&v16 + (float)((float)v43 * *(float *)v15.i32);
          *(_DWORD *)(v44 + 8) = v36.i32[0];
          *uint64_t v39 = v35.f32[0];
          v39 += 4;
          v37 += 4;
        }
        while ((int)v32 + v37 <= v18);
        LODWORD(v32) = v32 + v37;
        if ((int)v32 < (int)v14)
        {
LABEL_20:
          uint64_t v45 = (int)v32;
          unint64_t v46 = v14 - (int)v32;
          if (v46 < 8) {
            goto LABEL_56;
          }
          __n128 v47 = (float32x4_t *)((char *)v29 + 4 * v45);
          if ((unint64_t)v47 < result + v14 + v21 * a2
            && v30 + v45 < (unint64_t)a8->u64 + 4 * v14 + v23 * v21)
          {
            goto LABEL_56;
          }
          uint64_t v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + v45;
          __n128 v49 = (__int32 *)(v28 + v45);
          unint64_t v50 = v46 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v36.i32[0] = *(v49 - 1);
            v35.i32[0] = *v49;
            float32x4_t v35 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v35.f32)));
            float32x4_t v51 = vmlaq_f32(v22, v24, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v36.f32))));
            float32x4_t v36 = vmlaq_f32(v22, v24, v35);
            *__n128 v47 = v51;
            v47[1] = v36;
            v47 += 2;
            v49 += 2;
            v50 -= 8;
          }
          while (v50);
          uint64_t v45 = v48;
          if (v46 != (v46 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_56:
            do
            {
              v36.i8[0] = *(unsigned char *)(v30 + v45);
              v36.f32[0] = *(float *)&v16 + (float)((float)v36.u32[0] * *(float *)v15.i32);
              v29->i32[v45++] = v36.i32[0];
            }
            while (v14 != v45);
          }
        }
      }
      else if ((int)v32 < (int)v14)
      {
        goto LABEL_20;
      }
      v30 += a2;
      int v29 = (float32x4_t *)((char *)v29 + v26);
      ++v21;
      uint64_t v25 = (float32x4_t *)((char *)v25 + v26);
      v27 += v26;
      v28 += a2;
      if (!--v13) {
        return result;
      }
    }
  }
  if ((int)v14 >= 4)
  {
    uint64_t v52 = 0;
    unint64_t v53 = 3;
    if (v18 > 3) {
      unint64_t v53 = v14 - 4;
    }
    unint64_t v54 = ((v53 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    unint64_t v55 = v14 - HIDWORD(v54);
    uint64_t v56 = (v53 >> 2) + 1;
    unint64_t v57 = v54 >> 30;
    float32x4_t v58 = (float32x4_t)vdupq_lane_s32(v15, 0);
    float32x4_t v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v16, 0);
    unint64_t v60 = v55 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v61 = 4 * v17;
    uint64_t v62 = (uint64_t)&a8->i64[1] + 4;
    uint64_t v63 = result + 4;
    uint64_t v64 = (float *)a8;
    uint64_t v65 = (const char *)result;
    while (1)
    {
      unint64_t v66 = (a9 & 0xFFFFFFFFFFFFFFFCLL) * v52;
      uint64_t v67 = v52 * a2;
      if (v53 < 0x3C) {
        break;
      }
      if ((unint64_t)v64 < result + (unint64_t)(v53 & 0xFFFFFFFC) + 4 + v67
        && v65 < (const char *)&a8[1] + ((4 * v53) & 0x3FFFFFFF0) + v66)
      {
        break;
      }
      uint64_t v69 = v56 & 0x7FFFFFF0;
      int8x16_t v70 = v64;
      int8x16_t v71 = v65;
      do
      {
        *(int8x16x4_t *)(&v12 - 1) = vld4q_s8(v71);
        v71 += 64;
        v90.val[0] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1004048C0)));
        v90.val[1] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1004048C0)));
        v91.val[0] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1004048B0)));
        v89.val[0] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_100404890)));
        v89.val[1] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_100404890)));
        v89.val[2] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_100404890)));
        v89.val[3] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_100404890)));
        __n128 v75 = v70;
        vst4q_f32(v75, v89);
        v75 += 16;
        v91.val[1] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1004048B0)));
        v89.val[0] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_1004048A0)));
        v89.val[1] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v12, (int8x16_t)xmmword_1004048A0)));
        v89.val[2] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_1004048A0)));
        v89.val[3] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1004048A0)));
        vst4q_f32(v75, v89);
        v91.val[2] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_1004048B0)));
        v91.val[3] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1004048B0)));
        __n128 v76 = v70 + 32;
        vst4q_f32(v76, v91);
        v90.val[2] = vmlaq_f32(v59, v58, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v73, (int8x16_t)xmmword_1004048C0)));
        float32x4_t v11 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_1004048C0));
        v90.val[3] = vmlaq_f32(v59, v58, v11);
        __n128 v77 = v70 + 48;
        vst4q_f32(v77, v90);
        v70 += 64;
        v69 -= 16;
      }
      while (v69);
      uint64_t v78 = 4 * (v56 & 0x7FFFFFF0);
      if (v56 != (v56 & 0x7FFFFFF0)) {
        goto LABEL_43;
      }
LABEL_45:
      if ((int)v14 > (int)v78)
      {
        unint64_t v83 = (int)v78;
        if (v55 < 8
          || (unint64_t)&v64[(int)v78] < result + v55 + v67 + (int)v78
          && &v65[(int)v78] < &a8->i8[4 * (int)v78 + 4 * v14 + v66 - v57])
        {
          goto LABEL_57;
        }
        unint64_t v84 = (int)v78 + v60;
        int v85 = (__int32 *)(v63 + (int)v78);
        unint64_t v86 = v55 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v87 = (float32x4_t *)&v64[v83];
        do
        {
          v11.i32[0] = *(v85 - 1);
          v12.i32[0] = *v85;
          float32x4_t v12 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.f32)));
          float32x4_t v88 = vmlaq_f32(v59, v58, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v11.f32))));
          float32x4_t v11 = vmlaq_f32(v59, v58, v12);
          *uint64_t v87 = v88;
          v87[1] = v11;
          v87 += 2;
          v85 += 2;
          v86 -= 8;
        }
        while (v86);
        unint64_t v83 = v84;
        if (v55 != v60)
        {
LABEL_57:
          do
          {
            v11.i8[0] = v65[v83];
            v11.f32[0] = *(float *)&v16 + (float)((float)v11.u32[0] * *(float *)v15.i32);
            v64[v83++] = v11.f32[0];
          }
          while (v14 != v83);
        }
      }
      v65 += a2;
      uint64_t v64 = (float *)((char *)v64 + v61);
      ++v52;
      v62 += v61;
      v63 += a2;
      if (!--v13) {
        return result;
      }
    }
    uint64_t v78 = 0;
LABEL_43:
    __n128 v79 = (float *)(v62 + 4 * v78);
    do
    {
      v11.i8[0] = v65[v78];
      *(float *)&unsigned int v80 = *(float *)&v16 + (float)((float)v11.u32[0] * *(float *)v15.i32);
      v12.i8[0] = v65[v78 + 1];
      *(float *)&unsigned int v81 = *(float *)&v16 + (float)((float)v12.u32[0] * *(float *)v15.i32);
      *(v79 - 3) = *(float *)&v80;
      int v82 = &v64[v78];
      v82[1] = *(float *)&v81;
      LOBYTE(v80) = v65[v78 + 2];
      v11.f32[0] = *(float *)&v16 + (float)((float)v80 * *(float *)v15.i32);
      LOBYTE(v81) = v65[v78 + 3];
      v12.f32[0] = *(float *)&v16 + (float)((float)v81 * *(float *)v15.i32);
      v82[2] = v11.f32[0];
      *__n128 v79 = v12.f32[0];
      v79 += 4;
      v78 += 4;
    }
    while (v78 <= v18);
    goto LABEL_45;
  }
  if ((int)v14 >= 1)
  {
    uint64_t v19 = (unsigned char *)(result + 2);
    uint64_t v20 = &a8->f32[2];
    do
    {
      LOBYTE(a5) = *(v19 - 2);
      a5 = *(float *)&v16 + (float)((float)LODWORD(a5) * *(float *)v15.i32);
      *(v20 - 2) = a5;
      if (v14 != 1)
      {
        LOBYTE(a5) = *(v19 - 1);
        a5 = *(float *)&v16 + (float)((float)LODWORD(a5) * *(float *)v15.i32);
        *(v20 - 1) = a5;
        if (v14 != 2)
        {
          LOBYTE(a5) = *v19;
          a5 = *(float *)&v16 + (float)((float)LODWORD(a5) * *(float *)v15.i32);
          *uint64_t v20 = a5;
        }
      }
      v19 += a2;
      v20 += v17;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_100247404(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, float32x4_t a7, float32x4_t a8, uint64_t a9, uint64_t a10, float32x4_t *a11, unint64_t a12, int *a13, uint64_t a14)
{
  int v14 = a13[1];
  if (!v14) {
    return result;
  }
  uint64_t v15 = *a13;
  int32x2_t v16 = *(int32x2_t *)a14;
  double v17 = *(double *)(a14 + 8);
  *(float *)v16.i32 = *(double *)a14;
  *(float *)&double v17 = v17;
  unint64_t v18 = a12 >> 2;
  uint64_t v19 = v15 - 4;
  if ((int)v15 >= 8)
  {
    uint64_t v22 = 0;
    float32x4_t v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    unint64_t v24 = a12 & 0xFFFFFFFFFFFFFFFCLL;
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(v16, 0);
    uint64_t v26 = a11 + 1;
    uint64_t v27 = 4 * v18;
    uint64_t v28 = (uint64_t)&a11->i64[1] + 4;
    int v29 = a11;
    uint64_t v30 = result;
    while (1)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      int v33 = v26;
      do
      {
        int16x8_t v34 = vmovl_s8(*(int8x8_t *)(v30 + v32));
        float32x4_t v35 = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v34.i8)), *(float *)v16.i32));
        float32x4_t v36 = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v34)), *(float *)v16.i32));
        v33[-1] = v35;
        *int v33 = v36;
        v32 += 8;
        v31 += 0x800000000;
        v33 += 2;
      }
      while (v32 <= (v15 - 8));
      if ((int)v19 >= (int)v32) {
        break;
      }
      if ((int)v32 < (int)v15) {
        goto LABEL_20;
      }
LABEL_11:
      v30 += a2;
      int v29 = (float32x4_t *)((char *)v29 + v27);
      ++v22;
      uint64_t v26 = (float32x4_t *)((char *)v26 + v27);
      v28 += v27;
      if (!--v14) {
        return result;
      }
    }
    uint64_t v37 = 0;
    uint64_t v38 = 4 * (int)v32;
    uint64_t v39 = (_DWORD *)(v28 + v38);
    uint64_t v40 = v30 + (int)v32;
    uint64_t v41 = (uint64_t)v29 + v38;
    do
    {
      v36.i8[0] = *(unsigned char *)(v40 + v37);
      int8x8_t v42 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v36.f32)).u64[0];
      *(float *)v42.i32 = *(float *)&v17 + (float)((float)v42.i32[0] * *(float *)v16.i32);
      v35.i8[0] = *(unsigned char *)(v40 + v37 + 1);
      int8x8_t v43 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v35.f32)).u64[0];
      *(float *)v43.i32 = *(float *)&v17 + (float)((float)v43.i32[0] * *(float *)v16.i32);
      *(v39 - 3) = v42.i32[0];
      uint64_t v44 = v41 + 4 * v37;
      *(_DWORD *)(v44 + 4) = v43.i32[0];
      v42.i8[0] = *(unsigned char *)(v40 + v37 + 2);
      v36.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v42)).u64[0];
      v36.f32[0] = *(float *)&v17 + (float)((float)v36.i32[0] * *(float *)v16.i32);
      v43.i8[0] = *(unsigned char *)(v40 + v37 + 3);
      v35.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v43)).u64[0];
      v35.f32[0] = *(float *)&v17 + (float)((float)v35.i32[0] * *(float *)v16.i32);
      *(_DWORD *)(v44 + 8) = v36.i32[0];
      *uint64_t v39 = v35.i32[0];
      v39 += 4;
      v37 += 4;
    }
    while ((int)v32 + v37 <= v19);
    LODWORD(v32) = v32 + v37;
    if ((int)v32 >= (int)v15) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v45 = (int)v32;
    unint64_t v46 = v15 - (int)v32;
    if (v46 < 8)
    {
      uint64_t v47 = v45;
      goto LABEL_36;
    }
    if ((unint64_t)v29->u64 + 4 * v45 < result + v15 + v22 * a2
      && v30 + v45 < (unint64_t)a11->u64 + 4 * v15 + v24 * v22)
    {
      uint64_t v47 = v45;
      goto LABEL_36;
    }
    if (v46 >= 0x10)
    {
      unint64_t v48 = v46 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v55 = 4 * v45;
      uint64_t v56 = v45;
      unint64_t v57 = v46 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v58 = *(int8x16_t *)(v30 + v56);
        float32x4_t v59 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v58.i8, (int8x8_t)v16), 8uLL), 8uLL)));
        float32x4_t v60 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v58.i8, (int8x8_t)v16), 8uLL), 8uLL)));
        v58.i64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
        float32x4_t v61 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v58.i8, (int8x8_t)v16), 8uLL), 8uLL)));
        float32x4_t v62 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v58.i8, (int8x8_t)v16), 8uLL), 8uLL))));
        float32x4_t v36 = vmlaq_f32(v23, v25, v60);
        uint64_t v63 = (float32x4_t *)((char *)v29 + v55);
        *uint64_t v63 = v36;
        v63[1] = vmlaq_f32(v23, v25, v59);
        void v63[2] = v62;
        v63[3] = vmlaq_f32(v23, v25, v61);
        v56 += 16;
        v55 += 64;
        v57 -= 16;
      }
      while (v57);
      if (v46 == v48) {
        goto LABEL_11;
      }
      if ((v46 & 8) == 0)
      {
        uint64_t v47 = v48 + v45;
        do
        {
LABEL_36:
          v36.i8[0] = *(unsigned char *)(v30 + v47);
          v36.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v36.f32)).u64[0];
          v36.f32[0] = *(float *)&v17 + (float)((float)v36.i32[0] * *(float *)v16.i32);
          v29->i32[v47++] = v36.i32[0];
        }
        while (v15 != v47);
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v48 = 0;
    }
    uint64_t v47 = (v46 & 0xFFFFFFFFFFFFFFF8) + v45;
    unint64_t v49 = v48 - (v46 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v50 = v48 + v45;
    uint64_t v51 = 4 * v50;
    do
    {
      int8x8_t v52 = *(int8x8_t *)(v30 + v50);
      float32x4_t v53 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v52, (int8x8_t)v16), 8uLL), 8uLL))));
      float32x4_t v36 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v52, (int8x8_t)v16), 8uLL), 8uLL))));
      unint64_t v54 = (float32x4_t *)((char *)v29 + v51);
      *unint64_t v54 = v53;
      v54[1] = v36;
      v50 += 8;
      v51 += 32;
      v49 += 8;
    }
    while (v49);
    if (v46 == (v46 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
  if ((int)v15 >= 4)
  {
    uint64_t v64 = 0;
    unint64_t v65 = 3;
    if (v19 > 3) {
      unint64_t v65 = v15 - 4;
    }
    unint64_t v66 = ((v65 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    unint64_t v67 = v15 - HIDWORD(v66);
    uint64_t v68 = (v65 >> 2) + 1;
    unint64_t v69 = v66 >> 30;
    float32x4_t v70 = (float32x4_t)vdupq_lane_s32(v16, 0);
    float32x4_t v71 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    unint64_t v72 = v67 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v73 = v67 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v74 = 4 * v18;
    uint64_t v75 = (uint64_t)&a11->i64[1] + 4;
    __n128 v76 = (float *)a11;
    __n128 v77 = (const char *)result;
    while (1)
    {
      unint64_t v78 = (a12 & 0xFFFFFFFFFFFFFFFCLL) * v64;
      uint64_t v79 = v64 * a2;
      if (v65 < 0x3C) {
        break;
      }
      if ((unint64_t)v76 < result + (unint64_t)(v65 & 0xFFFFFFFC) + 4 + v79
        && v77 < (const char *)&a11[1] + ((4 * v65) & 0x3FFFFFFF0) + v78)
      {
        break;
      }
      uint64_t v81 = v68 & 0x7FFFFFF0;
      int v82 = v76;
      unint64_t v83 = v77;
      do
      {
        int8x16x4_t v119 = vld4q_s8(v83);
        v83 += 64;
        float32x4_t v84 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v119.val[0].i8, (int8x8_t)v16), 8uLL), 8uLL)));
        int8x8_t v85 = (int8x8_t)vextq_s8(v119.val[0], v119.val[0], 8uLL).u64[0];
        float32x4_t v86 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v85, (int8x8_t)v16), 8uLL), 8uLL)));
        v120.val[0] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v85, (int8x8_t)v16), 8uLL), 8uLL))));
        int8x8_t v87 = (int8x8_t)vextq_s8(v119.val[1], v119.val[1], 8uLL).u64[0];
        v120.val[1] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v87, (int8x8_t)v16), 8uLL), 8uLL))));
        int8x8_t v88 = (int8x8_t)vextq_s8(v119.val[2], v119.val[2], 8uLL).u64[0];
        v120.val[2] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v88, (int8x8_t)v16), 8uLL), 8uLL))));
        int8x8_t v89 = (int8x8_t)vextq_s8(v119.val[3], v119.val[3], 8uLL).u64[0];
        v121.val[0] = vmlaq_f32(v71, v70, v86);
        v121.val[1] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v87, (int8x8_t)v16), 8uLL), 8uLL))));
        v121.val[2] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v88, (int8x8_t)v16), 8uLL), 8uLL))));
        v122.val[0] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v119.val[0].i8, (int8x8_t)v16), 8uLL), 8uLL))));
        v122.val[1] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v119.val[1].i8, (int8x8_t)v16), 8uLL), 8uLL))));
        v122.val[2] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v119.val[2].i8, (int8x8_t)v16), 8uLL), 8uLL))));
        v122.val[3] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v119.val[3].i8, (int8x8_t)v16), 8uLL), 8uLL))));
        int16x4_t v90 = (int16x4_t)vzip1_s8(*(int8x8_t *)v119.val[1].i8, (int8x8_t)v16);
        int16x4_t v91 = (int16x4_t)vzip1_s8(*(int8x8_t *)v119.val[2].i8, (int8x8_t)v16);
        *(int8x8_t *)v119.val[0].i8 = vzip1_s8(*(int8x8_t *)v119.val[3].i8, (int8x8_t)v16);
        a8 = vmlaq_f32(v71, v70, v84);
        v119.val[2] = (int8x16_t)vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(v90, 8uLL), 8uLL))));
        v119.val[3] = (int8x16_t)vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(v91, 8uLL), 8uLL))));
        float32x4_t v92 = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16(*(int16x4_t *)v119.val[0].i8, 8uLL), 8uLL))));
        unint64_t v93 = v82;
        vst4q_f32(v93, *(float32x4x4_t *)a8.f32);
        v93 += 16;
        vst4q_f32(v93, v122);
        v121.val[3] = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v89, (int8x8_t)v16), 8uLL), 8uLL))));
        uint64_t v94 = v82 + 32;
        vst4q_f32(v94, v121);
        a7 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v89, (int8x8_t)v16), 8uLL), 8uLL)));
        v120.val[3] = vmlaq_f32(v71, v70, a7);
        uint64_t v95 = v82 + 48;
        vst4q_f32(v95, v120);
        v82 += 64;
        v81 -= 16;
      }
      while (v81);
      uint64_t v96 = 4 * (v68 & 0x7FFFFFF0);
      if (v68 != (v68 & 0x7FFFFFF0)) {
        goto LABEL_53;
      }
LABEL_55:
      if ((int)v15 > (int)v96)
      {
        uint64_t v101 = (int)v96;
        if (v67 < 8)
        {
          uint64_t v102 = (int)v96;
          goto LABEL_71;
        }
        if ((unint64_t)&v76[(int)v96] < result + v67 + v79 + (int)v96
          && &v77[(int)v96] < &a11->i8[4 * (int)v96 + 4 * v15 + v78 - v69])
        {
          uint64_t v102 = (int)v96;
          goto LABEL_71;
        }
        if (v67 >= 0x10)
        {
          uint64_t v104 = (int)v96;
          uint64_t v105 = (int)v96;
          unint64_t v106 = v67 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int8x16_t v107 = *(int8x16_t *)&v77[v105];
            float32x4_t v108 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v107.i8, (int8x8_t)v16), 8uLL), 8uLL)));
            float32x4_t v109 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v107.i8, (int8x8_t)v16), 8uLL), 8uLL)));
            v107.i64[0] = vextq_s8(v107, v107, 8uLL).u64[0];
            float32x4_t v110 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v107.i8, (int8x8_t)v16), 8uLL), 8uLL)));
            float32x4_t v111 = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v107.i8, (int8x8_t)v16), 8uLL), 8uLL))));
            a7 = vmlaq_f32(v71, v70, v109);
            int32x2_t v112 = (float32x4_t *)&v76[v104];
            *int32x2_t v112 = a7;
            v112[1] = vmlaq_f32(v71, v70, v108);
            a8 = vmlaq_f32(v71, v70, v110);
            v112[2] = v111;
            v112[3] = a8;
            v105 += 16;
            v104 += 16;
            v106 -= 16;
          }
          while (v106);
          if (v67 == v72) {
            goto LABEL_41;
          }
          unint64_t v103 = v67 & 0xFFFFFFFFFFFFFFF0;
          if ((v67 & 8) == 0)
          {
            uint64_t v102 = v101 + v72;
            do
            {
LABEL_71:
              a7.i8[0] = v77[v102];
              a7.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a7.f32)).u64[0];
              a7.f32[0] = *(float *)&v17 + (float)((float)a7.i32[0] * *(float *)v16.i32);
              v76[v102++] = a7.f32[0];
            }
            while (v15 != v102);
            goto LABEL_41;
          }
        }
        else
        {
          unint64_t v103 = 0;
        }
        uint64_t v102 = v101 + v73;
        unint64_t v113 = v103 - (v67 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v114 = v103 + v101;
        uint64_t v115 = v114;
        do
        {
          int8x8_t v116 = *(int8x8_t *)&v77[v114];
          a8 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v116, (int8x8_t)v16), 8uLL), 8uLL)));
          float32x4_t v117 = vmlaq_f32(v71, v70, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v116, (int8x8_t)v16), 8uLL), 8uLL))));
          a7 = vmlaq_f32(v71, v70, a8);
          int64x2_t v118 = (float32x4_t *)&v76[v115];
          *int64x2_t v118 = v117;
          v118[1] = a7;
          v114 += 8;
          v115 += 8;
          v113 += 8;
        }
        while (v113);
        if (v67 == v73) {
          goto LABEL_41;
        }
        goto LABEL_71;
      }
LABEL_41:
      v77 += a2;
      __n128 v76 = (float *)((char *)v76 + v74);
      ++v64;
      v75 += v74;
      if (!--v14) {
        return result;
      }
    }
    uint64_t v96 = 0;
LABEL_53:
    uint64_t v97 = (_DWORD *)(v75 + 4 * v96);
    do
    {
      a7.i8[0] = v77[v96];
      int8x8_t v98 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a7.f32)).u64[0];
      *(float *)v98.i32 = *(float *)&v17 + (float)((float)v98.i32[0] * *(float *)v16.i32);
      a8.i8[0] = v77[v96 + 1];
      int8x8_t v99 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a8.f32)).u64[0];
      *(float *)v99.i32 = *(float *)&v17 + (float)((float)v99.i32[0] * *(float *)v16.i32);
      *(v97 - 3) = v98.i32[0];
      unint64_t v100 = &v76[v96];
      v100[1] = *(float *)v99.i32;
      v98.i8[0] = v77[v96 + 2];
      a7.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v98)).u64[0];
      a7.f32[0] = *(float *)&v17 + (float)((float)a7.i32[0] * *(float *)v16.i32);
      v99.i8[0] = v77[v96 + 3];
      a8.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v99)).u64[0];
      a8.f32[0] = *(float *)&v17 + (float)((float)a8.i32[0] * *(float *)v16.i32);
      v100[2] = a7.f32[0];
      *uint64_t v97 = a8.i32[0];
      v97 += 4;
      v96 += 4;
    }
    while (v96 <= v19);
    goto LABEL_55;
  }
  if ((int)v15 >= 1)
  {
    uint64_t v20 = (unsigned char *)(result + 2);
    uint64_t v21 = &a11->i32[2];
    do
    {
      LOBYTE(a5) = *(v20 - 2);
      *(void *)&a5 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a5)).u64[0];
      *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
      *(v21 - 2) = LODWORD(a5);
      if (v15 != 1)
      {
        LOBYTE(a5) = *(v20 - 1);
        *(void *)&a5 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a5)).u64[0];
        *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
        *(v21 - 1) = LODWORD(a5);
        if (v15 != 2)
        {
          LOBYTE(a5) = *v20;
          *(void *)&a5 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a5)).u64[0];
          *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
          *uint64_t v21 = LODWORD(a5);
        }
      }
      v20 += a2;
      v21 += v18;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint16x8_t *sub_100247CF4(uint16x8_t *result, unint64_t a2, double a3, double a4, float a5, double a6, float32x4_t a7, uint16x8_t a8, uint64_t a9, uint64_t a10, float *a11, unint64_t a12, unsigned int *a13, uint64_t a14)
{
  unsigned int v14 = a13[1];
  if (!v14) {
    return result;
  }
  unint64_t v15 = *a13;
  int32x2_t v16 = *(int32x2_t *)a14;
  double v17 = *(double *)(a14 + 8);
  *(float *)v16.i32 = *(double *)a14;
  *(float *)&double v17 = v17;
  unint64_t v18 = a2 >> 1;
  unint64_t v19 = a12 >> 2;
  unsigned int v20 = v14 - 1;
  if ((int)v15 >= 8)
  {
    float32x4_t v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    uint64_t v24 = (v15 - 4);
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(v16, 0);
    uint64_t v26 = (float32x4_t *)(a11 + 4);
    uint64_t v27 = 4 * v19;
    uint64_t v28 = 2 * v18;
    int v29 = result + 1;
    while (1)
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      unsigned int v32 = v20;
      int v33 = result;
      int16x8_t v34 = v26;
      do
      {
        uint16x8_t v35 = *v33++;
        float32x4_t v36 = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v35)), *(float *)v16.i32));
        v34[-1] = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v35.i8)), *(float *)v16.i32));
        *int16x8_t v34 = v36;
        v31 += 8;
        v30 += 0x800000000;
        v34 += 2;
      }
      while (v31 <= (v15 - 8));
      if ((int)v24 >= (int)v31)
      {
        uint64_t v37 = 0;
        uint64_t v38 = (int)v31;
        uint64_t v39 = 2 * (int)v31;
        do
        {
          float32x4_t v36 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)&result->i8[v39]));
          *(float32x4_t *)&a11[v38] = vmlaq_f32(v23, v25, v36);
          v37 += 4;
          v38 += 4;
          v39 += 8;
        }
        while ((int)v31 + v37 <= v24);
        LODWORD(v31) = v31 + v37;
        if ((int)v31 < (int)v15)
        {
LABEL_20:
          uint64_t v40 = (int)v31;
          unint64_t v41 = v15 - (int)v31;
          unint64_t v31 = (int)v31;
          if (v41 < 0x10) {
            goto LABEL_46;
          }
          unint64_t v31 = (v41 & 0xFFFFFFFFFFFFFFF0) + (int)v31;
          int8x8_t v42 = (float32x4_t *)&a11[v40];
          int8x8_t v43 = (uint16x8_t *)((char *)v29 + 2 * v40);
          unint64_t v44 = v41 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            uint16x8_t v45 = v43[-1];
            float32x4_t v46 = vcvtq_f32_u32(vmovl_high_u16(*v43));
            float32x4_t v47 = vmlaq_f32(v23, v25, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8)));
            float32x4_t v36 = vmlaq_f32(v23, v25, vcvtq_f32_u32(vmovl_high_u16(v45)));
            float32x4_t v48 = vmlaq_f32(v23, v25, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v43->i8)));
            *int8x8_t v42 = v47;
            v42[1] = v36;
            v42[2] = v48;
            v42[3] = vmlaq_f32(v23, v25, v46);
            v42 += 4;
            v43 += 2;
            v44 -= 16;
          }
          while (v44);
          if (v41 != (v41 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_46:
            do
            {
              v36.i16[0] = result->i16[v31];
              v36.f32[0] = *(float *)&v17 + (float)((float)v36.u32[0] * *(float *)v16.i32);
              a11[v31++] = v36.f32[0];
            }
            while (v15 != v31);
          }
        }
      }
      else if ((int)v31 < (int)v15)
      {
        goto LABEL_20;
      }
      unsigned int v20 = v32 - 1;
      uint64_t v26 = (float32x4_t *)((char *)v26 + v27);
      uint64_t result = (uint16x8_t *)((char *)result + v28);
      a11 = (float *)((char *)a11 + v27);
      int v29 = (uint16x8_t *)((char *)v29 + v28);
      if (!v32) {
        return result;
      }
    }
  }
  if ((int)v15 >= 4)
  {
    unint64_t v49 = (v15 - 4);
    unint64_t v50 = (v49 & 0xFFFFFFFC) + 5;
    if (v50 <= v15) {
      unint64_t v50 = v15;
    }
    unint64_t v51 = v50 - (v49 & 0xFFFFFFFC) - 4;
    uint64_t v52 = (v49 >> 2) + 1;
    float32x4_t v53 = (float32x4_t)vdupq_lane_s32(v16, 0);
    float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    uint64_t v55 = 2 * v18;
    uint64_t v56 = 4 * v19;
    uint64_t v57 = (uint64_t)&a11[4 * (v49 >> 2) + 12];
    uint64_t v58 = (uint64_t)&result[1].i64[(v49 >> 2) + 1];
    while (1)
    {
      unsigned int v59 = v20;
      if (v49 >= 0x1C)
      {
        uint64_t v61 = v52 & 0x7FFFFFF8;
        float32x4_t v62 = a11;
        uint64_t v63 = (const __int16 *)result;
        do
        {
          *(int16x8x4_t *)(&a8 - 1) = vld4q_s16(v63);
          v63 += 32;
          v82.val[0] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(v64)));
          v82.val[1] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(a8)));
          v82.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(v65)));
          v82.val[3] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(v66)));
          v83.val[0] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v64.i8)));
          v83.val[1] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a8.i8)));
          v83.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65.i8)));
          a7 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v66.i8));
          v83.val[3] = vmlaq_f32(v54, v53, a7);
          unint64_t v67 = v62 + 32;
          vst4q_f32(v62, v83);
          uint64_t v68 = v62 + 16;
          vst4q_f32(v68, v82);
          float32x4_t v62 = v67;
          v61 -= 8;
        }
        while (v61);
        unint64_t v60 = 4 * (v52 & 0x7FFFFFF8);
        if (v52 == (v52 & 0x7FFFFFF8)) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v60 = 0;
      }
      uint64_t v69 = 2 * v60 + 6;
      float32x4_t v70 = &a11[v60];
      do
      {
        a7.i16[0] = *(__int16 *)((char *)&result->i16[-3] + v69);
        *(float *)&unsigned int v71 = *(float *)&v17 + (float)((float)a7.u32[0] * *(float *)v16.i32);
        unint64_t v72 = &result->i64[v60 / 4];
        a8.i16[0] = *((_WORD *)v72 + 1);
        *(float *)&unsigned int v73 = *(float *)&v17 + (float)((float)a8.u32[0] * *(float *)v16.i32);
        float *v70 = *(float *)&v71;
        v70[1] = *(float *)&v73;
        LOWORD(v71) = *((_WORD *)v72 + 2);
        a7.f32[0] = *(float *)&v17 + (float)((float)v71 * *(float *)v16.i32);
        LOWORD(v73) = *(__int16 *)((char *)result->i16 + v69);
        *(float *)a8.i32 = *(float *)&v17 + (float)((float)v73 * *(float *)v16.i32);
        v70[2] = a7.f32[0];
        v70[3] = *(float *)a8.i32;
        v60 += 4;
        v69 += 8;
        v70 += 4;
      }
      while (v60 <= v49);
LABEL_37:
      if ((int)v15 > (int)v60)
      {
        unint64_t v74 = (v49 & 0xFFFFFFFC) + 4;
        if (v51 < 0x10) {
          goto LABEL_47;
        }
        uint64_t v75 = (uint16x8_t *)v58;
        uint64_t v76 = v57;
        unint64_t v77 = v51 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          uint16x8_t v78 = v75[-1];
          float32x4_t v79 = vcvtq_f32_u32(vmovl_high_u16(*v75));
          float32x4_t v80 = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v78.i8)));
          a7 = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_high_u16(v78)));
          float32x4_t v81 = vmlaq_f32(v54, v53, vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v75->i8)));
          *(float32x4_t *)(v76 - 32) = v80;
          *(float32x4_t *)(v76 - 16) = a7;
          a8 = (uint16x8_t)vmlaq_f32(v54, v53, v79);
          *(float32x4_t *)uint64_t v76 = v81;
          *(uint16x8_t *)(v76 + 16) = a8;
          v76 += 64;
          v75 += 2;
          v77 -= 16;
        }
        while (v77);
        unint64_t v74 = (v49 & 0xFFFFFFFC) + 4 + (v51 & 0xFFFFFFFFFFFFFFF0);
        if (v51 != (v51 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_47:
          do
          {
            a7.i16[0] = result->i16[v74];
            a7.f32[0] = *(float *)&v17 + (float)((float)a7.u32[0] * *(float *)v16.i32);
            a11[v74++] = a7.f32[0];
          }
          while (v74 < v15);
        }
      }
      unsigned int v20 = v59 - 1;
      uint64_t result = (uint16x8_t *)((char *)result + v55);
      a11 = (float *)((char *)a11 + v56);
      v57 += v56;
      v58 += v55;
      if (!v59) {
        return result;
      }
    }
  }
  if ((int)v15 >= 1)
  {
    uint64_t v21 = &result->i16[2];
    uint64_t v22 = a11 + 2;
    do
    {
      LOWORD(a5) = *(v21 - 2);
      a5 = *(float *)&v17 + (float)((float)LODWORD(a5) * *(float *)v16.i32);
      *(v22 - 2) = a5;
      if (v15 != 1)
      {
        LOWORD(a5) = *(v21 - 1);
        a5 = *(float *)&v17 + (float)((float)LODWORD(a5) * *(float *)v16.i32);
        *(v22 - 1) = a5;
        if (v15 != 2)
        {
          LOWORD(a5) = *v21;
          a5 = *(float *)&v17 + (float)((float)LODWORD(a5) * *(float *)v16.i32);
          *uint64_t v22 = a5;
        }
      }
      v21 += v18;
      v22 += v19;
      --v14;
    }
    while (v14);
  }
  return result;
}

int16x8_t *sub_10024818C(int16x8_t *result, unint64_t a2, double a3, double a4, double a5, double a6, float32x4_t a7, int16x8_t a8, uint64_t a9, uint64_t a10, float32x4_t *a11, unint64_t a12, unsigned int *a13, uint64_t a14)
{
  unsigned int v14 = a13[1];
  if (!v14) {
    return result;
  }
  unint64_t v15 = *a13;
  int32x2_t v16 = *(int32x2_t *)a14;
  double v17 = *(double *)(a14 + 8);
  *(float *)v16.i32 = *(double *)a14;
  *(float *)&double v17 = v17;
  unint64_t v18 = a2 >> 1;
  unint64_t v19 = a12 >> 2;
  unsigned int v20 = v14 - 1;
  if ((int)v15 >= 8)
  {
    float32x4_t v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    uint64_t v24 = (v15 - 4);
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(v16, 0);
    uint64_t v26 = a11 + 1;
    uint64_t v27 = 4 * v19;
    uint64_t v28 = 2 * v18;
    int v29 = result + 1;
    while (1)
    {
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      unsigned int v32 = v20;
      int v33 = result;
      int16x8_t v34 = v26;
      do
      {
        int16x8_t v35 = *v33++;
        float32x4_t v36 = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v35)), *(float *)v16.i32));
        v34[-1] = vaddq_f32(v23, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v35.i8)), *(float *)v16.i32));
        *int16x8_t v34 = v36;
        v31 += 8;
        v30 += 0x800000000;
        v34 += 2;
      }
      while (v31 <= (v15 - 8));
      if ((int)v24 >= (int)v31)
      {
        uint64_t v37 = 0;
        uint64_t v38 = 4 * (int)v31;
        uint64_t v39 = 2 * (int)v31;
        do
        {
          float32x4_t v36 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&result->i8[v39]));
          *(float32x4_t *)((char *)a11 + v38) = vmlaq_f32(v23, v25, v36);
          v37 += 4;
          v38 += 16;
          v39 += 8;
        }
        while ((int)v31 + v37 <= v24);
        LODWORD(v31) = v31 + v37;
        if ((int)v31 < (int)v15)
        {
LABEL_20:
          uint64_t v40 = (int)v31;
          unint64_t v41 = v15 - (int)v31;
          unint64_t v31 = (int)v31;
          if (v41 < 0x10) {
            goto LABEL_46;
          }
          unint64_t v31 = (v41 & 0xFFFFFFFFFFFFFFF0) + (int)v31;
          int8x8_t v42 = (float32x4_t *)((char *)a11 + 4 * v40);
          int8x8_t v43 = (int16x8_t *)((char *)v29 + 2 * v40);
          unint64_t v44 = v41 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int16x8_t v45 = v43[-1];
            float32x4_t v46 = vcvtq_f32_s32(vmovl_high_s16(*v43));
            float32x4_t v47 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v45.i8)));
            float32x4_t v36 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_high_s16(v45)));
            float32x4_t v48 = vmlaq_f32(v23, v25, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v43->i8)));
            *int8x8_t v42 = v47;
            v42[1] = v36;
            v42[2] = v48;
            v42[3] = vmlaq_f32(v23, v25, v46);
            v42 += 4;
            v43 += 2;
            v44 -= 16;
          }
          while (v44);
          if (v41 != (v41 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_46:
            do
            {
              v36.i16[0] = result->i16[v31];
              v36.i64[0] = vmovl_s16(*(int16x4_t *)v36.f32).u64[0];
              v36.f32[0] = *(float *)&v17 + (float)((float)v36.i32[0] * *(float *)v16.i32);
              a11->i32[v31++] = v36.i32[0];
            }
            while (v15 != v31);
          }
        }
      }
      else if ((int)v31 < (int)v15)
      {
        goto LABEL_20;
      }
      unsigned int v20 = v32 - 1;
      uint64_t v26 = (float32x4_t *)((char *)v26 + v27);
      uint64_t result = (int16x8_t *)((char *)result + v28);
      a11 = (float32x4_t *)((char *)a11 + v27);
      int v29 = (int16x8_t *)((char *)v29 + v28);
      if (!v32) {
        return result;
      }
    }
  }
  if ((int)v15 >= 4)
  {
    unint64_t v49 = (v15 - 4);
    unint64_t v50 = (v49 & 0xFFFFFFFC) + 5;
    if (v50 <= v15) {
      unint64_t v50 = v15;
    }
    unint64_t v51 = v50 - (v49 & 0xFFFFFFFC) - 4;
    uint64_t v52 = (v49 >> 2) + 1;
    float32x4_t v53 = (float32x4_t)vdupq_lane_s32(v16, 0);
    float32x4_t v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0);
    uint64_t v55 = 2 * v18;
    uint64_t v56 = 4 * v19;
    uint64_t v57 = (uint64_t)&a11[(v49 >> 2) + 3];
    uint64_t v58 = (uint64_t)&result[1].i64[(v49 >> 2) + 1];
    while (1)
    {
      unsigned int v59 = v20;
      if (v49 >= 0x1C)
      {
        uint64_t v61 = v52 & 0x7FFFFFF8;
        float32x4_t v62 = (float *)a11;
        uint64_t v63 = (const __int16 *)result;
        do
        {
          *(int16x8x4_t *)(&a8 - 1) = vld4q_s16(v63);
          v63 += 32;
          v82.val[0] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(v64)));
          v82.val[1] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(a8)));
          v82.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(v65)));
          v82.val[3] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(v66)));
          v83.val[0] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v64.i8)));
          v83.val[1] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)a8.i8)));
          v83.val[2] = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v65.i8)));
          a7 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v66.i8));
          v83.val[3] = vmlaq_f32(v54, v53, a7);
          unint64_t v67 = v62 + 32;
          vst4q_f32(v62, v83);
          uint64_t v68 = v62 + 16;
          vst4q_f32(v68, v82);
          float32x4_t v62 = v67;
          v61 -= 8;
        }
        while (v61);
        unint64_t v60 = 4 * (v52 & 0x7FFFFFF8);
        if (v52 == (v52 & 0x7FFFFFF8)) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v60 = 0;
      }
      uint64_t v69 = 2 * v60 + 6;
      float32x4_t v70 = &a11[v60 / 4];
      do
      {
        a7.i16[0] = *(__int16 *)((char *)&result->i16[-3] + v69);
        int16x4_t v71 = (int16x4_t)vmovl_s16(*(int16x4_t *)a7.f32).u64[0];
        *(float *)v71.i32 = *(float *)&v17 + (float)((float)v71.i32[0] * *(float *)v16.i32);
        unint64_t v72 = &result->i64[v60 / 4];
        a8.i16[0] = *((_WORD *)v72 + 1);
        int16x4_t v73 = (int16x4_t)vmovl_s16(*(int16x4_t *)a8.i8).u64[0];
        *(float *)v73.i32 = *(float *)&v17 + (float)((float)v73.i32[0] * *(float *)v16.i32);
        v70->i32[0] = v71.i32[0];
        v70->i32[1] = v73.i32[0];
        v71.i16[0] = *((_WORD *)v72 + 2);
        a7.i64[0] = vmovl_s16(v71).u64[0];
        a7.f32[0] = *(float *)&v17 + (float)((float)a7.i32[0] * *(float *)v16.i32);
        v73.i16[0] = *(__int16 *)((char *)result->i16 + v69);
        a8.i64[0] = vmovl_s16(v73).u64[0];
        *(float *)a8.i32 = *(float *)&v17 + (float)((float)a8.i32[0] * *(float *)v16.i32);
        v70->i32[2] = a7.i32[0];
        v70->i32[3] = a8.i32[0];
        v60 += 4;
        v69 += 8;
        ++v70;
      }
      while (v60 <= v49);
LABEL_37:
      if ((int)v15 > (int)v60)
      {
        unint64_t v74 = (v49 & 0xFFFFFFFC) + 4;
        if (v51 < 0x10) {
          goto LABEL_47;
        }
        uint64_t v75 = (int16x8_t *)v58;
        uint64_t v76 = v57;
        unint64_t v77 = v51 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          int16x8_t v78 = v75[-1];
          float32x4_t v79 = vcvtq_f32_s32(vmovl_high_s16(*v75));
          float32x4_t v80 = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v78.i8)));
          a7 = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_high_s16(v78)));
          float32x4_t v81 = vmlaq_f32(v54, v53, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v75->i8)));
          *(float32x4_t *)(v76 - 32) = v80;
          *(float32x4_t *)(v76 - 16) = a7;
          a8 = (int16x8_t)vmlaq_f32(v54, v53, v79);
          *(float32x4_t *)uint64_t v76 = v81;
          *(int16x8_t *)(v76 + 16) = a8;
          v76 += 64;
          v75 += 2;
          v77 -= 16;
        }
        while (v77);
        unint64_t v74 = (v49 & 0xFFFFFFFC) + 4 + (v51 & 0xFFFFFFFFFFFFFFF0);
        if (v51 != (v51 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_47:
          do
          {
            a7.i16[0] = result->i16[v74];
            a7.i64[0] = vmovl_s16(*(int16x4_t *)a7.f32).u64[0];
            a7.f32[0] = *(float *)&v17 + (float)((float)a7.i32[0] * *(float *)v16.i32);
            a11->i32[v74++] = a7.i32[0];
          }
          while (v74 < v15);
        }
      }
      unsigned int v20 = v59 - 1;
      uint64_t result = (int16x8_t *)((char *)result + v55);
      a11 = (float32x4_t *)((char *)a11 + v56);
      v57 += v56;
      v58 += v55;
      if (!v59) {
        return result;
      }
    }
  }
  if ((int)v15 >= 1)
  {
    uint64_t v21 = &result->i16[2];
    uint64_t v22 = &a11->i32[2];
    do
    {
      LOWORD(a5) = *(v21 - 2);
      *(void *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
      *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
      *(v22 - 2) = LODWORD(a5);
      if (v15 != 1)
      {
        LOWORD(a5) = *(v21 - 1);
        *(void *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
        *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
        *(v22 - 1) = LODWORD(a5);
        if (v15 != 2)
        {
          LOWORD(a5) = *v21;
          *(void *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
          *(float *)&a5 = *(float *)&v17 + (float)((float)SLODWORD(a5) * *(float *)v16.i32);
          *uint64_t v22 = LODWORD(a5);
        }
      }
      v21 += v18;
      v22 += v19;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_100248650(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = *a7;
  uint64_t v10 = *(uint64_t *)a8;
  uint64_t v11 = *((uint64_t *)a8 + 1);
  unint64_t v12 = a2 >> 2;
  unint64_t v13 = a6 >> 2;
  if ((int)v9 >= 4)
  {
    float64x2_t v20 = (float64x2_t)vdupq_lane_s64(v11, 0);
    float64x2_t v21 = (float64x2_t)vdupq_lane_s64(v10, 0);
    unint64_t v22 = (v9 - 4);
    while (1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      for (unint64_t i = 0; i <= v22; i += 4)
      {
        uint64_t v26 = *(void *)(result + v23);
        uint64_t v27 = *(void *)(result + v23 + 8);
        v28.i64[0] = (int)v26;
        v28.i64[1] = SHIDWORD(v26);
        float64x2_t v29 = vcvtq_f64_s64(v28);
        v28.i64[0] = (int)v27;
        v28.i64[1] = SHIDWORD(v27);
        *(float32x4_t *)(a5 + v23) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v20, vmulq_n_f64(v29, *(double *)&v10))), vaddq_f64(v20, vmulq_n_f64(vcvtq_f64_s64(v28), *(double *)&v10)));
        v24 += 0x400000000;
        v23 += 16;
      }
      if ((int)v22 >= (int)i)
      {
        uint64_t v30 = 0;
        uint64_t v31 = 4 * (int)i;
        do
        {
          long long v32 = *(_OWORD *)(result + v31);
          v33.i64[0] = (int)v32;
          v33.i64[1] = SDWORD1(v32);
          float64x2_t v34 = vcvtq_f64_s64(v33);
          v33.i64[0] = SDWORD2(v32);
          v33.i64[1] = SHIDWORD(v32);
          *(float32x4_t *)(a5 + v31) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v20, v21, v34)), vmlaq_f64(v20, v21, vcvtq_f64_s64(v33)));
          v30 += 4;
          v31 += 16;
        }
        while ((int)i + v30 <= v9 - 4);
        LODWORD(i) = i + v30;
        if ((int)i < (int)v9)
        {
LABEL_19:
          uint64_t v35 = (int)i;
          unint64_t v36 = v9 - (int)i;
          unint64_t i = (int)i;
          if (v36 < 8) {
            goto LABEL_27;
          }
          unint64_t i = (v36 & 0xFFFFFFFFFFFFFFF8) + (int)i;
          uint64_t v37 = 4 * v35;
          unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v39 = *(_OWORD *)(result + v37);
            long long v40 = *(_OWORD *)(result + v37 + 16);
            v41.i64[0] = (int)v39;
            v41.i64[1] = SDWORD1(v39);
            float64x2_t v42 = vcvtq_f64_s64(v41);
            v41.i64[0] = SDWORD2(v39);
            v41.i64[1] = SHIDWORD(v39);
            float64x2_t v43 = vcvtq_f64_s64(v41);
            v41.i64[0] = (int)v40;
            v41.i64[1] = SDWORD1(v40);
            float64x2_t v44 = vcvtq_f64_s64(v41);
            v41.i64[0] = SDWORD2(v40);
            v41.i64[1] = SHIDWORD(v40);
            int16x8_t v45 = (float32x4_t *)(a5 + v37);
            *int16x8_t v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v20, v21, v42)), vmlaq_f64(v20, v21, v43));
            v45[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v20, v21, v44)), vmlaq_f64(v20, v21, vcvtq_f64_s64(v41)));
            v37 += 32;
            v38 -= 8;
          }
          while (v38);
          if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_27:
            do
            {
              float v46 = *(double *)&v11 + (double)*(int *)(result + 4 * i) * *(double *)&v10;
              *(float *)(a5 + 4 * i++) = v46;
            }
            while (v9 != i);
          }
        }
      }
      else if ((int)i < (int)v9)
      {
        goto LABEL_19;
      }
      a5 += 4 * v13;
      result += 4 * v12;
      if (!--v8) {
        return result;
      }
    }
  }
  if ((int)v9 >= 1)
  {
    unsigned int v14 = (int *)(result + 8);
    unint64_t v15 = (float *)(a5 + 8);
    uint64_t v16 = 4 * v13;
    do
    {
      float v17 = *(double *)&v11 + (double)*(v14 - 2) * *(double *)&v10;
      *(v15 - 2) = v17;
      if (v9 != 1)
      {
        float v18 = *(double *)&v11 + (double)*(v14 - 1) * *(double *)&v10;
        *(v15 - 1) = v18;
        if (v9 != 2)
        {
          float v19 = *(double *)&v11 + (double)*v14 * *(double *)&v10;
          *unint64_t v15 = v19;
        }
      }
      v14 += v12;
      unint64_t v15 = (float *)((char *)v15 + v16);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1002488B8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, uint64_t a8)
{
  unsigned int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = *a7;
  int32x2_t v10 = *(int32x2_t *)a8;
  double v11 = *(double *)(a8 + 8);
  *(float *)v10.i32 = *(double *)a8;
  *(float *)&double v11 = v11;
  unint64_t v12 = a2 >> 2;
  unint64_t v13 = a6 >> 2;
  if ((int)v9 >= 4)
  {
    uint64_t v16 = 0;
    unsigned int v17 = v8 - 1;
    float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v11, 0);
    unint64_t v19 = (v9 - 4);
    unint64_t v20 = a6 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v21 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    float32x4_t v22 = (float32x4_t)vdupq_lane_s32(v10, 0);
    uint64_t v23 = 4 * v12;
    uint64_t v24 = 4 * v13;
    uint64_t v25 = a5;
    uint64_t v26 = result;
    while (1)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      unsigned int v30 = v17;
      int v31 = 4;
      do
      {
        *(float32x4_t *)(v25 + v27) = vaddq_f32(v18, vmulq_n_f32(*(float32x4_t *)(v26 + v27), *(float *)v10.i32));
        int v32 = v31;
        v29 += 4;
        v28 += 0x400000000;
        v27 += 16;
        v31 += 4;
      }
      while (v29 <= v19);
      if ((int)v19 >= (int)v29)
      {
        uint64_t v33 = 0;
        uint64_t v34 = v32;
        uint64_t v35 = 4 * v32;
        do
        {
          unint64_t v36 = (float32x2_t *)(v25 + v35);
          float32x2_t *v36 = vmla_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v22.f32, *(float32x2_t *)(v26 + v35));
          v36[1] = vmla_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v22.f32, *(float32x2_t *)(v26 + v35 + 8));
          v35 += 16;
          v33 += 4;
        }
        while (v34 + v33 <= (uint64_t)v19);
        LODWORD(v29) = v29 + v33;
        if ((int)v29 < (int)v9)
        {
LABEL_19:
          unint64_t v29 = (int)v29;
          unint64_t v37 = v9 - (int)v29;
          if (v37 < 8) {
            goto LABEL_28;
          }
          uint64_t v38 = 4 * (int)v29;
          if (a5 + v20 * v16 - (result + v21 * v16) < 0x20) {
            goto LABEL_28;
          }
          unint64_t v29 = (v37 & 0xFFFFFFFFFFFFFFF8) + (int)v29;
          unint64_t v39 = v37 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v40 = vmlaq_f32(v18, v22, *(float32x4_t *)(v26 + v38 + 16));
            int64x2_t v41 = (float32x4_t *)(v25 + v38);
            *int64x2_t v41 = vmlaq_f32(v18, v22, *(float32x4_t *)(v26 + v38));
            v41[1] = v40;
            v38 += 32;
            v39 -= 8;
          }
          while (v39);
          if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_28:
            do
            {
              *(float *)(v25 + 4 * v29) = *(float *)&v11 + (float)(*(float *)(v26 + 4 * v29) * *(float *)v10.i32);
              ++v29;
            }
            while (v9 != v29);
          }
        }
      }
      else if ((int)v29 < (int)v9)
      {
        goto LABEL_19;
      }
      --v17;
      ++v16;
      v26 += v23;
      v25 += v24;
      if (!v30) {
        return result;
      }
    }
  }
  if ((int)v9 >= 1)
  {
    unsigned int v14 = (float *)(result + 8);
    unint64_t v15 = (float *)(a5 + 8);
    do
    {
      *(v15 - 2) = *(float *)&v11 + (float)(*(v14 - 2) * *(float *)v10.i32);
      if (v9 != 1)
      {
        *(v15 - 1) = *(float *)&v11 + (float)(*(v14 - 1) * *(float *)v10.i32);
        if (v9 != 2) {
          *unint64_t v15 = *(float *)&v11 + (float)(*v14 * *(float *)v10.i32);
        }
      }
      v14 += v12;
      v15 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

float64x2_t *sub_100248ADC(float64x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = *a7;
  uint64_t v10 = *(uint64_t *)a8;
  uint64_t v11 = *((uint64_t *)a8 + 1);
  unint64_t v12 = a2 >> 3;
  unint64_t v13 = a6 >> 2;
  if ((int)v9 >= 4)
  {
    unsigned int v21 = v8 - 1;
    float64x2_t v22 = (float64x2_t)vdupq_lane_s64(v11, 0);
    uint64_t v23 = (v9 - 4);
    float64x2_t v24 = (float64x2_t)vdupq_lane_s64(v10, 0);
    uint64_t v25 = result + 1;
    uint64_t v26 = 8 * v12;
    while (1)
    {
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      unsigned int v29 = v21;
      unsigned int v30 = v25;
      int v31 = a5;
      do
      {
        *v31++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v22, vmulq_n_f64(v30[-1], *(double *)&v10))), vaddq_f64(v22, vmulq_n_f64(*v30, *(double *)&v10)));
        v28 += 4;
        v27 += 0x400000000;
        v30 += 2;
      }
      while (v28 <= v23);
      if ((int)v23 >= (int)v28)
      {
        uint64_t v32 = 0;
        uint64_t v33 = 4 * (int)v28;
        uint64_t v34 = 8 * (int)v28;
        do
        {
          *(float32x4_t *)((char *)a5 + v33) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v22, v24, *(float64x2_t *)((char *)result + v34))), vmlaq_f64(v22, v24, *(float64x2_t *)((char *)result + v34 + 16)));
          v32 += 4;
          v33 += 16;
          v34 += 32;
        }
        while ((int)v28 + v32 <= v23);
        LODWORD(v28) = v28 + v32;
        if ((int)v28 < (int)v9)
        {
LABEL_19:
          uint64_t v35 = (int)v28;
          unint64_t v36 = v9 - (int)v28;
          unint64_t v28 = (int)v28;
          if (v36 < 4) {
            goto LABEL_27;
          }
          unint64_t v28 = (v36 & 0xFFFFFFFFFFFFFFFCLL) + (int)v28;
          unint64_t v37 = (float32x2_t *)&a5->f32[v35];
          uint64_t v38 = (float64x2_t *)((char *)v25 + 8 * v35);
          unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float32x2_t v40 = vcvt_f32_f64(vmlaq_f64(v22, v24, *v38));
            *unint64_t v37 = vcvt_f32_f64(vmlaq_f64(v22, v24, v38[-1]));
            v37[1] = v40;
            v37 += 2;
            v38 += 2;
            v39 -= 4;
          }
          while (v39);
          if (v36 != (v36 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_27:
            do
            {
              float32_t v41 = *(double *)&v11 + result->f64[v28] * *(double *)&v10;
              a5->f32[v28++] = v41;
            }
            while (v9 != v28);
          }
        }
      }
      else if ((int)v28 < (int)v9)
      {
        goto LABEL_19;
      }
      unsigned int v21 = v29 - 1;
      a5 = (float32x4_t *)((char *)a5 + 4 * v13);
      uint64_t v25 = (float64x2_t *)((char *)v25 + v26);
      uint64_t result = (float64x2_t *)((char *)result + v26);
      if (!v29) {
        return result;
      }
    }
  }
  if ((int)v9 >= 1)
  {
    f64 = result[1].f64;
    uint64_t v15 = 8 * v12;
    uint64_t v16 = &a5->f32[2];
    uint64_t v17 = 4 * v13;
    do
    {
      float v18 = *(double *)&v11 + *(f64 - 2) * *(double *)&v10;
      *(v16 - 2) = v18;
      if (v9 != 1)
      {
        float v19 = *(double *)&v11 + *(f64 - 1) * *(double *)&v10;
        *(v16 - 1) = v19;
        if (v9 != 2)
        {
          float v20 = *(double *)&v11 + *f64 * *(double *)&v10;
          *uint64_t v16 = v20;
        }
      }
      f64 = (double *)((char *)f64 + v15);
      uint64_t v16 = (float *)((char *)v16 + v17);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_100248CDC(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, float64x2_t a8, float64x2_t a9, uint64_t a10, uint64_t a11, float64x2_t *a12, unint64_t a13, int *a14, double *a15)
{
  int v15 = a14[1];
  if (!v15) {
    return result;
  }
  uint64_t v16 = *a14;
  uint64_t v17 = *(uint64_t *)a15;
  uint64_t v18 = *((uint64_t *)a15 + 1);
  unint64_t v19 = a13 >> 3;
  uint64_t v20 = v16 - 4;
  if ((int)v16 >= 8)
  {
    uint64_t v23 = 0;
    float64x2_t v24 = (float64x2_t)vdupq_lane_s64(v18, 0);
    unint64_t v25 = a13 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v17, 0);
    uint64_t v27 = a12 + 2;
    uint64_t v28 = 8 * v19;
    unsigned int v29 = (float64x2_t *)((char *)a12 + 24);
    unsigned int v30 = a12;
    uint64_t v31 = result;
    while (1)
    {
      uint64_t v32 = 0;
      unint64_t v33 = 0;
      uint64_t v34 = v27;
      do
      {
        uint16x8_t v35 = vmovl_u8(*(uint8x8_t *)(v31 + v33));
        uint32x4_t v36 = vmovl_u16(*(uint16x4_t *)v35.i8);
        uint32x4_t v37 = vmovl_high_u16(v35);
        v38.i64[0] = v36.u32[0];
        v38.i64[1] = v36.u32[1];
        float64x2_t v39 = vaddq_f64(v24, vmulq_n_f64(vcvtq_f64_s64(v38), *(double *)&v17));
        v38.i64[0] = v36.u32[2];
        v38.i64[1] = v36.u32[3];
        float64x2_t v40 = vaddq_f64(v24, vmulq_n_f64(vcvtq_f64_s64(v38), *(double *)&v17));
        v38.i64[0] = v37.u32[0];
        v38.i64[1] = v37.u32[1];
        float64x2_t v41 = vaddq_f64(v24, vmulq_n_f64(vcvtq_f64_s64(v38), *(double *)&v17));
        v38.i64[0] = v37.u32[2];
        v38.i64[1] = v37.u32[3];
        float64x2_t v42 = vaddq_f64(v24, vmulq_n_f64(vcvtq_f64_s64(v38), *(double *)&v17));
        v34[-2] = v39;
        v34[-1] = v40;
        *uint64_t v34 = v41;
        v34[1] = v42;
        v34 += 4;
        v33 += 8;
        v32 += 0x800000000;
      }
      while (v33 <= (v16 - 8));
      if ((int)v20 >= (int)v33) {
        break;
      }
      if ((int)v33 < (int)v16) {
        goto LABEL_20;
      }
LABEL_11:
      v31 += a2;
      unsigned int v30 = (float64x2_t *)((char *)v30 + v28);
      ++v23;
      uint64_t v27 = (float64x2_t *)((char *)v27 + v28);
      unsigned int v29 = (float64x2_t *)((char *)v29 + v28);
      if (!--v15) {
        return result;
      }
    }
    uint64_t v43 = 0;
    uint64_t v44 = (int)v33;
    int16x8_t v45 = &v29->f64[v44];
    uint64_t v46 = v31 + (int)v33;
    uint64_t v47 = (uint64_t)v30 + v44 * 8;
    do
    {
      LOBYTE(v42.f64[0]) = *(unsigned char *)(v46 + v43);
      double v48 = *(double *)&v18 + (double)*(unint64_t *)&v42.f64[0] * *(double *)&v17;
      LOBYTE(v40.f64[0]) = *(unsigned char *)(v46 + v43 + 1);
      double v49 = *(double *)&v18 + (double)*(unint64_t *)&v40.f64[0] * *(double *)&v17;
      *(v45 - 3) = v48;
      uint64_t v50 = v47 + 8 * v43;
      *(double *)(v50 + 8) = v49;
      LOBYTE(v48) = *(unsigned char *)(v46 + v43 + 2);
      v42.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v48 * *(double *)&v17;
      LOBYTE(v49) = *(unsigned char *)(v46 + v43 + 3);
      v40.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v49 * *(double *)&v17;
      *(float64_t *)(v50 + 16) = v42.f64[0];
      *int16x8_t v45 = v40.f64[0];
      v45 += 4;
      v43 += 4;
    }
    while ((int)v33 + v43 <= v20);
    LODWORD(v33) = v33 + v43;
    if ((int)v33 >= (int)v16) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v51 = (int)v33;
    unint64_t v52 = v16 - (int)v33;
    if (v52 < 8)
    {
      uint64_t v53 = v51;
      goto LABEL_36;
    }
    if ((unint64_t)&v30->f64[v51] < result + v16 + v23 * a2
      && v31 + v51 < (unint64_t)&a12->f64[v16] + v25 * v23)
    {
      uint64_t v53 = v51;
      goto LABEL_36;
    }
    if (v52 >= 0x10)
    {
      unint64_t v54 = v52 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v72 = 8 * v51;
      uint64_t v73 = v51;
      unint64_t v74 = v52 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v75 = *(int8x16_t *)(v31 + v73);
        v76.i32[0] = v75.u8[6];
        v76.i32[1] = v75.u8[7];
        v77.i32[0] = v75.u8[4];
        int8x8_t v78 = vand_s8(v76, (int8x8_t)0xFF000000FFLL);
        v77.i32[1] = v75.u8[5];
        int8x8_t v79 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v78.u32[0];
        v80.i64[1] = v78.u32[1];
        uint64x2_t v81 = v80;
        v82.i32[0] = v75.u8[2];
        v82.i32[1] = v75.u8[3];
        v80.i64[0] = v79.u32[0];
        v80.i64[1] = v79.u32[1];
        uint64x2_t v83 = v80;
        int8x8_t v84 = vand_s8(v82, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v84.u32[0];
        v80.i64[1] = v84.u32[1];
        uint64x2_t v85 = v80;
        v86.i32[0] = v75.u8[0];
        v86.i32[1] = v75.u8[1];
        int8x8_t v87 = vand_s8(v86, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v87.u32[0];
        v80.i64[1] = v87.u32[1];
        v75.i64[0] = vextq_s8(v75, v75, 8uLL).u64[0];
        v88.i32[0] = v75.u8[6];
        v88.i32[1] = v75.u8[7];
        int8x8_t v89 = vand_s8(v88, (int8x8_t)0xFF000000FFLL);
        float64x2_t v90 = vcvtq_f64_u64(v80);
        v91.i32[0] = v75.u8[4];
        v80.i64[0] = v89.u32[0];
        v80.i64[1] = v89.u32[1];
        uint64x2_t v92 = v80;
        v91.i32[1] = v75.u8[5];
        int8x8_t v93 = vand_s8(v91, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v93.u32[0];
        v80.i64[1] = v93.u32[1];
        uint64x2_t v94 = v80;
        v95.i32[0] = v75.u8[2];
        v95.i32[1] = v75.u8[3];
        int8x8_t v96 = vand_s8(v95, (int8x8_t)0xFF000000FFLL);
        v80.i64[0] = v96.u32[0];
        v80.i64[1] = v96.u32[1];
        v97.i32[0] = v75.u8[0];
        v97.i32[1] = v75.u8[1];
        *(int8x8_t *)v75.i8 = vand_s8(v97, (int8x8_t)0xFF000000FFLL);
        float64x2_t v98 = vcvtq_f64_u64(v80);
        v80.i64[0] = v75.u32[0];
        v80.i64[1] = v75.u32[1];
        float64x2_t v99 = vmlaq_f64(v24, v26, v90);
        float64x2_t v100 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v85));
        float64x2_t v101 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v83));
        float64x2_t v102 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v81));
        unint64_t v103 = (float64x2_t *)((char *)v30 + v72);
        float64x2_t v42 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v92));
        v103[2] = v101;
        v103[3] = v102;
        *unint64_t v103 = v99;
        v103[1] = v100;
        v103[6] = vmlaq_f64(v24, v26, vcvtq_f64_u64(v94));
        v103[7] = v42;
        v103[4] = vmlaq_f64(v24, v26, vcvtq_f64_u64(v80));
        v103[5] = vmlaq_f64(v24, v26, v98);
        v73 += 16;
        v72 += 128;
        v74 -= 16;
      }
      while (v74);
      if (v52 == v54) {
        goto LABEL_11;
      }
      if ((v52 & 8) == 0)
      {
        uint64_t v53 = v54 + v51;
        do
        {
LABEL_36:
          LOBYTE(v42.f64[0]) = *(unsigned char *)(v31 + v53);
          v42.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v42.f64[0] * *(double *)&v17;
          v30->f64[v53++] = v42.f64[0];
        }
        while (v16 != v53);
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v54 = 0;
    }
    uint64_t v53 = (v52 & 0xFFFFFFFFFFFFFFF8) + v51;
    unint64_t v55 = v54 - (v52 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v56 = v54 + v51;
    uint64_t v57 = 8 * v56;
    do
    {
      uint64_t v58 = *(void *)(v31 + v56);
      v59.i32[0] = BYTE6(v58);
      v59.i32[1] = HIBYTE(v58);
      int8x8_t v60 = vand_s8(v59, (int8x8_t)0xFF000000FFLL);
      v61.i32[0] = BYTE4(v58);
      v62.i64[0] = v60.u32[0];
      v62.i64[1] = v60.u32[1];
      uint64x2_t v63 = v62;
      v61.i32[1] = BYTE5(v58);
      int8x8_t v64 = vand_s8(v61, (int8x8_t)0xFF000000FFLL);
      v62.i64[0] = v64.u32[0];
      v62.i64[1] = v64.u32[1];
      uint64x2_t v65 = v62;
      v66.i32[0] = BYTE2(v58);
      v66.i32[1] = BYTE3(v58);
      int8x8_t v67 = vand_s8(v66, (int8x8_t)0xFF000000FFLL);
      v62.i64[0] = v67.u32[0];
      v62.i64[1] = v67.u32[1];
      v68.i32[0] = v58;
      v68.i32[1] = BYTE1(v58);
      int8x8_t v69 = vand_s8(v68, (int8x8_t)0xFF000000FFLL);
      float64x2_t v70 = vcvtq_f64_u64(v62);
      v62.i64[0] = v69.u32[0];
      v62.i64[1] = v69.u32[1];
      float64x2_t v42 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v65));
      int16x4_t v71 = (float64x2_t *)((char *)v30 + v57);
      v71[2] = v42;
      v71[3] = vmlaq_f64(v24, v26, vcvtq_f64_u64(v63));
      *int16x4_t v71 = vmlaq_f64(v24, v26, vcvtq_f64_u64(v62));
      v71[1] = vmlaq_f64(v24, v26, v70);
      v56 += 8;
      v57 += 64;
      v55 += 8;
    }
    while (v55);
    if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
  if ((int)v16 >= 4)
  {
    uint64_t v104 = 0;
    unint64_t v105 = 3;
    if (v20 > 3) {
      unint64_t v105 = v16 - 4;
    }
    unint64_t v106 = ((v105 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    unint64_t v107 = v16 - HIDWORD(v106);
    uint64_t v108 = (v105 >> 2) + 1;
    float64x2_t v109 = (float64x2_t)vdupq_lane_s64(v17, 0);
    float64x2_t v110 = (float64x2_t)vdupq_lane_s64(v18, 0);
    unint64_t v219 = v107 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v111 = 8 * v19;
    int32x2_t v112 = (float64x2_t *)((char *)a12 + 24);
    unint64_t v218 = v107 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v113 = (double *)a12;
    uint64_t v114 = (const char *)result;
    while (1)
    {
      unint64_t v115 = (a13 & 0xFFFFFFFFFFFFFFF8) * v104;
      uint64_t v116 = v104 * a2;
      if (v105 < 0x3C) {
        break;
      }
      if ((unint64_t)v113 < result + (unint64_t)(v105 & 0xFFFFFFFC) + 4 + v116
        && v114 < (const char *)&a12[2] + ((8 * v105) & 0x7FFFFFFE0) + v115)
      {
        break;
      }
      uint64_t v118 = v108 & 0x7FFFFFF0;
      int8x16x4_t v119 = v113;
      float32x4x4_t v120 = v114;
      do
      {
        float64x2x4_t v220 = (float64x2x4_t)vld4q_s8(v120);
        v120 += 64;
        v121.i32[0] = LOBYTE(v220.val[0].f64[0]);
        v121.i32[1] = BYTE1(v220.val[0].f64[0]);
        int8x8_t v122 = vand_s8(v121, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v122.u32[0];
        v123.i64[1] = v122.u32[1];
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v122.i32[0] = LOBYTE(v220.val[1].f64[0]);
        v122.i32[1] = BYTE1(v220.val[1].f64[0]);
        int8x8_t v124 = vand_s8(v122, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v124.u32[0];
        v123.i64[1] = v124.u32[1];
        v221.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v124.i32[0] = LOBYTE(v220.val[2].f64[0]);
        v124.i32[1] = BYTE1(v220.val[2].f64[0]);
        int8x8_t v125 = vand_s8(v124, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v125.u32[0];
        v123.i64[1] = v125.u32[1];
        v221.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v125.i32[0] = LOBYTE(v220.val[3].f64[0]);
        v125.i32[1] = BYTE1(v220.val[3].f64[0]);
        int8x8_t v126 = vand_s8(v125, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v126.u32[0];
        v123.i64[1] = v126.u32[1];
        v221.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v126.i32[0] = BYTE4(v220.val[0].f64[0]);
        v126.i32[1] = BYTE5(v220.val[0].f64[0]);
        int8x8_t v127 = vand_s8(v126, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v127.u32[0];
        v123.i64[1] = v127.u32[1];
        int8x8_t v128 = v119;
        vst4q_f64(v128, v221);
        v128 += 8;
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v127.i32[0] = BYTE4(v220.val[1].f64[0]);
        v127.i32[1] = BYTE5(v220.val[1].f64[0]);
        int8x8_t v129 = vand_s8(v127, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v129.u32[0];
        v123.i64[1] = v129.u32[1];
        v221.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v129.i32[0] = BYTE4(v220.val[2].f64[0]);
        v129.i32[1] = BYTE5(v220.val[2].f64[0]);
        int8x8_t v130 = vand_s8(v129, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v130.u32[0];
        v123.i64[1] = v130.u32[1];
        v221.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v130.i32[0] = BYTE4(v220.val[3].f64[0]);
        v130.i32[1] = BYTE5(v220.val[3].f64[0]);
        int8x8_t v131 = vand_s8(v130, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v131.u32[0];
        v123.i64[1] = v131.u32[1];
        v221.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v131.i32[0] = BYTE6(v220.val[0].f64[0]);
        v131.i32[1] = HIBYTE(v220.val[0].f64[0]);
        int32x2_t v132 = v119 + 16;
        int8x8_t v133 = vand_s8(v131, (int8x8_t)0xFF000000FFLL);
        vst4q_f64(v132, v221);
        v123.i64[0] = v133.u32[0];
        v123.i64[1] = v133.u32[1];
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v133.i32[0] = BYTE6(v220.val[1].f64[0]);
        v133.i32[1] = HIBYTE(v220.val[1].f64[0]);
        int8x8_t v134 = vand_s8(v133, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v134.u32[0];
        v123.i64[1] = v134.u32[1];
        v221.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v134.i32[0] = BYTE6(v220.val[2].f64[0]);
        v134.i32[1] = HIBYTE(v220.val[2].f64[0]);
        int8x8_t v135 = vand_s8(v134, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v135.u32[0];
        v123.i64[1] = v135.u32[1];
        v221.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v135.i32[0] = BYTE6(v220.val[3].f64[0]);
        v135.i32[1] = HIBYTE(v220.val[3].f64[0]);
        int8x8_t v136 = vand_s8(v135, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v136.u32[0];
        v123.i64[1] = v136.u32[1];
        v221.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        unint64_t v137 = v119 + 24;
        v136.i32[0] = BYTE2(v220.val[0].f64[0]);
        vst4q_f64(v137, v221);
        v136.i32[1] = BYTE3(v220.val[0].f64[0]);
        int8x8_t v138 = vand_s8(v136, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v138.u32[0];
        v123.i64[1] = v138.u32[1];
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v138.i32[0] = BYTE2(v220.val[1].f64[0]);
        v138.i32[1] = BYTE3(v220.val[1].f64[0]);
        int8x8_t v139 = vand_s8(v138, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v139.u32[0];
        v123.i64[1] = v139.u32[1];
        v221.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v139.i32[0] = BYTE2(v220.val[2].f64[0]);
        v139.i32[1] = BYTE3(v220.val[2].f64[0]);
        int8x8_t v140 = vand_s8(v139, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v140.u32[0];
        v123.i64[1] = v140.u32[1];
        v221.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v140.i32[0] = BYTE2(v220.val[3].f64[0]);
        v140.i32[1] = BYTE3(v220.val[3].f64[0]);
        int8x8_t v141 = vand_s8(v140, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v141.u32[0];
        v123.i64[1] = v141.u32[1];
        v221.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        int8x8_t v142 = (int8x8_t)vextq_s8((int8x16_t)v220.val[0], (int8x16_t)v220.val[0], 8uLL).u64[0];
        vst4q_f64(v128, v221);
        v141.i32[0] = v142.u8[0];
        v141.i32[1] = v142.u8[1];
        int8x8_t v143 = vand_s8(v141, (int8x8_t)0xFF000000FFLL);
        unint64_t v144 = vextq_s8((int8x16_t)v220.val[1], (int8x16_t)v220.val[1], 8uLL).u64[0];
        v123.i64[0] = v143.u32[0];
        v123.i64[1] = v143.u32[1];
        *(void *)&v221.val[1].f64[0] = vextq_s8((int8x16_t)v220.val[2], (int8x16_t)v220.val[2], 8uLL).u64[0];
        int8x8_t v145 = (int8x8_t)vextq_s8((int8x16_t)v220.val[3], (int8x16_t)v220.val[3], 8uLL).u64[0];
        v220.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        LODWORD(v221.val[0].f64[0]) = v144;
        HIDWORD(v221.val[0].f64[0]) = BYTE1(v144);
        *(int8x8_t *)&v221.val[0].f64[0] = vand_s8(*(int8x8_t *)&v221.val[0].f64[0], (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = LODWORD(v221.val[0].f64[0]);
        v123.i64[1] = HIDWORD(v221.val[0].f64[0]);
        v220.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        LODWORD(v221.val[0].f64[0]) = LOBYTE(v221.val[1].f64[0]);
        HIDWORD(v221.val[0].f64[0]) = BYTE1(v221.val[1].f64[0]);
        *(int8x8_t *)&v221.val[0].f64[0] = vand_s8(*(int8x8_t *)&v221.val[0].f64[0], (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = LODWORD(v221.val[0].f64[0]);
        v123.i64[1] = HIDWORD(v221.val[0].f64[0]);
        v220.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        LODWORD(v221.val[0].f64[0]) = v145.u8[0];
        HIDWORD(v221.val[0].f64[0]) = v145.u8[1];
        *(int8x8_t *)&v221.val[0].f64[0] = vand_s8(*(int8x8_t *)&v221.val[0].f64[0], (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = LODWORD(v221.val[0].f64[0]);
        v123.i64[1] = HIDWORD(v221.val[0].f64[0]);
        v220.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        int32x2_t v146 = v119 + 32;
        vst4q_f64(v146, v220);
        LODWORD(v220.val[0].f64[0]) = v142.u8[2];
        LODWORD(v137) = v142.u8[4];
        HIDWORD(v220.val[0].f64[0]) = v142.u8[3];
        *(int8x8_t *)&v220.val[0].f64[0] = vand_s8(*(int8x8_t *)&v220.val[0].f64[0], (int8x8_t)0xFF000000FFLL);
        LODWORD(v146) = v142.u8[5];
        unsigned int v147 = v142.u8[6];
        v123.i64[0] = LODWORD(v220.val[0].f64[0]);
        v123.i64[1] = HIDWORD(v220.val[0].f64[0]);
        unsigned int v148 = v142.u8[7];
        v220.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v142.i32[0] = BYTE2(v144);
        v142.i32[1] = BYTE3(v144);
        int8x8_t v149 = vand_s8(v142, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v149.u32[0];
        v123.i64[1] = v149.u32[1];
        v220.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v149.i32[0] = BYTE2(v221.val[1].f64[0]);
        v149.i32[1] = BYTE3(v221.val[1].f64[0]);
        int8x8_t v150 = vand_s8(v149, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v150.u32[0];
        v123.i64[1] = v150.u32[1];
        v220.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v150.i32[0] = v145.u8[2];
        v150.i32[1] = v145.u8[3];
        int8x8_t v151 = vand_s8(v150, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v151.u32[0];
        v123.i64[1] = v151.u32[1];
        v221.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        int8x8_t v152 = vand_s8((int8x8_t)__PAIR64__(v146, v137), (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v152.u32[0];
        v123.i64[1] = v152.u32[1];
        int32x2_t v153 = v119 + 40;
        vst4q_f64(v153, *(float64x2x4_t *)((char *)&v220 + 16));
        v220.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v152.i32[0] = BYTE4(v144);
        v152.i32[1] = BYTE5(v144);
        int8x8_t v154 = vand_s8(v152, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v154.u32[0];
        v123.i64[1] = v154.u32[1];
        v220.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v154.i32[0] = BYTE4(v221.val[1].f64[0]);
        v154.i32[1] = BYTE5(v221.val[1].f64[0]);
        int8x8_t v155 = vand_s8(v154, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v155.u32[0];
        v123.i64[1] = v155.u32[1];
        v220.val[2] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v155.i32[0] = v145.u8[4];
        v155.i32[1] = v145.u8[5];
        int8x8_t v156 = vand_s8(v155, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v156.u32[0];
        v123.i64[1] = v156.u32[1];
        v220.val[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        uint64_t v157 = v119 + 48;
        vst4q_f64(v157, v220);
        int8x8_t v158 = vand_s8((int8x8_t)__PAIR64__(v148, v147), (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v158.u32[0];
        v123.i64[1] = v158.u32[1];
        v220.val[0] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v158.i32[0] = BYTE6(v144);
        v158.i32[1] = HIBYTE(v144);
        int8x8_t v159 = vand_s8(v158, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v159.u32[0];
        v123.i64[1] = v159.u32[1];
        v220.val[1] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v123));
        v159.i32[0] = BYTE6(v221.val[1].f64[0]);
        v159.i32[1] = HIBYTE(v221.val[1].f64[0]);
        int8x8_t v160 = vand_s8(v159, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v160.u32[0];
        v123.i64[1] = v160.u32[1];
        a9 = vcvtq_f64_u64(v123);
        v220.val[2] = vmlaq_f64(v110, v109, a9);
        v145.i32[0] = v145.u8[6];
        v145.i32[1] = v145.u8[7];
        int8x8_t v161 = vand_s8(v145, (int8x8_t)0xFF000000FFLL);
        v123.i64[0] = v161.u32[0];
        v123.i64[1] = v161.u32[1];
        a8 = vcvtq_f64_u64(v123);
        v220.val[3] = vmlaq_f64(v110, v109, a8);
        int32x2_t v162 = v119 + 56;
        vst4q_f64(v162, v220);
        v119 += 64;
        v118 -= 16;
      }
      while (v118);
      uint64_t v163 = 4 * (v108 & 0x7FFFFFF0);
      if (v108 != (v108 & 0x7FFFFFF0)) {
        goto LABEL_53;
      }
LABEL_55:
      if ((int)v16 > (int)v163)
      {
        uint64_t v168 = (int)v163;
        if (v107 < 8)
        {
          uint64_t v163 = (int)v163;
          goto LABEL_71;
        }
        if ((unint64_t)&v113[(int)v163] < result + v107 + v116 + (int)v163
          && &v114[(int)v163] < (const char *)&a12->f64[(int)v163 + v16] + v115 - (v106 >> 29))
        {
          uint64_t v163 = (int)v163;
          goto LABEL_71;
        }
        if (v107 >= 0x10)
        {
          uint64_t v170 = (int)v163;
          uint64_t v171 = v168;
          unint64_t v172 = v107 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int8x16_t v173 = *(int8x16_t *)&v114[v171];
            v174.i32[0] = v173.u8[6];
            v174.i32[1] = v173.u8[7];
            v175.i32[0] = v173.u8[4];
            int8x8_t v176 = vand_s8(v174, (int8x8_t)0xFF000000FFLL);
            v175.i32[1] = v173.u8[5];
            int8x8_t v177 = vand_s8(v175, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v176.u32[0];
            v178.i64[1] = v176.u32[1];
            uint64x2_t v179 = v178;
            v180.i32[0] = v173.u8[2];
            v180.i32[1] = v173.u8[3];
            v178.i64[0] = v177.u32[0];
            v178.i64[1] = v177.u32[1];
            uint64x2_t v181 = v178;
            int8x8_t v182 = vand_s8(v180, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v182.u32[0];
            v178.i64[1] = v182.u32[1];
            uint64x2_t v183 = v178;
            v184.i32[0] = v173.u8[0];
            v184.i32[1] = v173.u8[1];
            int8x8_t v185 = vand_s8(v184, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v185.u32[0];
            v178.i64[1] = v185.u32[1];
            v173.i64[0] = vextq_s8(v173, v173, 8uLL).u64[0];
            v186.i32[0] = v173.u8[6];
            v186.i32[1] = v173.u8[7];
            int8x8_t v187 = vand_s8(v186, (int8x8_t)0xFF000000FFLL);
            float64x2_t v188 = vcvtq_f64_u64(v178);
            v189.i32[0] = v173.u8[4];
            v178.i64[0] = v187.u32[0];
            v178.i64[1] = v187.u32[1];
            uint64x2_t v190 = v178;
            v189.i32[1] = v173.u8[5];
            int8x8_t v191 = vand_s8(v189, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v191.u32[0];
            v178.i64[1] = v191.u32[1];
            uint64x2_t v192 = v178;
            v193.i32[0] = v173.u8[2];
            v193.i32[1] = v173.u8[3];
            int8x8_t v194 = vand_s8(v193, (int8x8_t)0xFF000000FFLL);
            v178.i64[0] = v194.u32[0];
            v178.i64[1] = v194.u32[1];
            v195.i32[0] = v173.u8[0];
            v195.i32[1] = v173.u8[1];
            *(int8x8_t *)v173.i8 = vand_s8(v195, (int8x8_t)0xFF000000FFLL);
            float64x2_t v196 = vcvtq_f64_u64(v178);
            v178.i64[0] = v173.u32[0];
            v178.i64[1] = v173.u32[1];
            a8 = vmlaq_f64(v110, v109, v188);
            float64x2_t v197 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v183));
            float64x2_t v198 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v181));
            float64x2_t v199 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v179));
            v200 = (float64x2_t *)&v113[v170];
            a9 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v190));
            v200[2] = v198;
            v200[3] = v199;
            float64x2_t *v200 = a8;
            v200[1] = v197;
            v200[6] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v192));
            v200[7] = a9;
            v200[4] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v178));
            v200[5] = vmlaq_f64(v110, v109, v196);
            v171 += 16;
            v170 += 16;
            v172 -= 16;
          }
          while (v172);
          if (v107 == v219) {
            goto LABEL_41;
          }
          unint64_t v169 = v107 & 0xFFFFFFFFFFFFFFF0;
          if ((((_BYTE)v16 - BYTE4(v106)) & 8) == 0)
          {
            uint64_t v163 = v168 + v219;
            do
            {
LABEL_71:
              LOBYTE(a8.f64[0]) = v114[v163];
              a8.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&a8.f64[0] * *(double *)&v17;
              v113[v163++] = a8.f64[0];
            }
            while (v16 != v163);
            goto LABEL_41;
          }
        }
        else
        {
          unint64_t v169 = 0;
        }
        uint64_t v163 = v168 + v218;
        unint64_t v201 = v169 - (v107 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v202 = v169 + v168;
        uint64_t v203 = v202;
        do
        {
          uint64_t v204 = *(void *)&v114[v202];
          v205.i32[0] = BYTE6(v204);
          v205.i32[1] = HIBYTE(v204);
          int8x8_t v206 = vand_s8(v205, (int8x8_t)0xFF000000FFLL);
          v207.i32[0] = BYTE4(v204);
          v208.i64[0] = v206.u32[0];
          v208.i64[1] = v206.u32[1];
          uint64x2_t v209 = v208;
          v207.i32[1] = BYTE5(v204);
          int8x8_t v210 = vand_s8(v207, (int8x8_t)0xFF000000FFLL);
          v208.i64[0] = v210.u32[0];
          v208.i64[1] = v210.u32[1];
          uint64x2_t v211 = v208;
          v212.i32[0] = BYTE2(v204);
          v212.i32[1] = BYTE3(v204);
          int8x8_t v213 = vand_s8(v212, (int8x8_t)0xFF000000FFLL);
          v208.i64[0] = v213.u32[0];
          v208.i64[1] = v213.u32[1];
          v214.i32[0] = v204;
          v214.i32[1] = BYTE1(v204);
          int8x8_t v215 = vand_s8(v214, (int8x8_t)0xFF000000FFLL);
          float64x2_t v216 = vcvtq_f64_u64(v208);
          v208.i64[0] = v215.u32[0];
          v208.i64[1] = v215.u32[1];
          a8 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v211));
          v217 = (float64x2_t *)&v113[v203];
          v217[2] = a8;
          v217[3] = vmlaq_f64(v110, v109, vcvtq_f64_u64(v209));
          a9 = vmlaq_f64(v110, v109, v216);
          float64x2_t *v217 = vmlaq_f64(v110, v109, vcvtq_f64_u64(v208));
          v217[1] = a9;
          v202 += 8;
          v203 += 8;
          v201 += 8;
        }
        while (v201);
        if (v107 == v218) {
          goto LABEL_41;
        }
        goto LABEL_71;
      }
LABEL_41:
      v114 += a2;
      unint64_t v113 = (double *)((char *)v113 + v111);
      ++v104;
      int32x2_t v112 = (float64x2_t *)((char *)v112 + v111);
      if (!--v15) {
        return result;
      }
    }
    uint64_t v163 = 0;
LABEL_53:
    float64x2_t v164 = &v112->f64[v163];
    do
    {
      LOBYTE(a8.f64[0]) = v114[v163];
      double v165 = *(double *)&v18 + (double)*(unint64_t *)&a8.f64[0] * *(double *)&v17;
      LOBYTE(a9.f64[0]) = v114[v163 + 1];
      double v166 = *(double *)&v18 + (double)*(unint64_t *)&a9.f64[0] * *(double *)&v17;
      *(v164 - 3) = v165;
      int64x2_t v167 = &v113[v163];
      v167[1] = v166;
      LOBYTE(v165) = v114[v163 + 2];
      a8.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v165 * *(double *)&v17;
      LOBYTE(v166) = v114[v163 + 3];
      a9.f64[0] = *(double *)&v18 + (double)*(unint64_t *)&v166 * *(double *)&v17;
      v167[2] = a8.f64[0];
      *float64x2_t v164 = a9.f64[0];
      v164 += 4;
      v163 += 4;
    }
    while (v163 <= v20);
    goto LABEL_55;
  }
  if ((int)v16 >= 1)
  {
    unsigned int v21 = (unsigned char *)(result + 2);
    f64 = a12[1].f64;
    do
    {
      LOBYTE(a5) = *(v21 - 2);
      a5 = *(double *)&v18 + (double)*(unint64_t *)&a5 * *(double *)&v17;
      *(f64 - 2) = a5;
      if (v16 != 1)
      {
        LOBYTE(a5) = *(v21 - 1);
        a5 = *(double *)&v18 + (double)*(unint64_t *)&a5 * *(double *)&v17;
        *(f64 - 1) = a5;
        if (v16 != 2)
        {
          LOBYTE(a5) = *v21;
          a5 = *(double *)&v18 + (double)*(unint64_t *)&a5 * *(double *)&v17;
          double *f64 = a5;
        }
      }
      v21 += a2;
      f64 += v19;
      --v15;
    }
    while (v15);
  }
  return result;
}

uint64_t sub_100249AB0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, unint64_t a6, int *a7, double *a8)
{
  int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = *a7;
  uint64_t v10 = *(uint64_t *)a8;
  uint64_t v11 = *((uint64_t *)a8 + 1);
  unint64_t v12 = a6 >> 3;
  uint64_t v13 = v9 - 4;
  if ((int)v9 >= 8)
  {
    uint64_t v16 = 0;
    float64x2_t v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
    unint64_t v18 = a6 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v19 = (float64x2_t)vdupq_lane_s64(v10, 0);
    uint64_t v20 = a5 + 2;
    uint64_t v21 = 8 * v12;
    float64x2_t v22 = (float64x2_t *)((char *)a5 + 24);
    uint64_t v23 = a5;
    uint64_t v24 = result;
    while (1)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      uint64_t v27 = v20;
      do
      {
        int16x8_t v28 = vmovl_s8(*(int8x8_t *)(v24 + v26));
        int8x16_t v29 = (int8x16_t)vmovl_s16(*(int16x4_t *)v28.i8);
        int8x16_t v30 = (int8x16_t)vmovl_high_s16(v28);
        v27[-2] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v29.i8)), *(double *)&v10));
        v27[-1] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL))), *(double *)&v10));
        *uint64_t v27 = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v30.i8)), *(double *)&v10));
        v27[1] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))), *(double *)&v10));
        v27 += 4;
        v26 += 8;
        v25 += 0x800000000;
      }
      while (v26 <= (v9 - 8));
      if ((int)v13 >= (int)v26) {
        break;
      }
      if ((int)v26 < (int)v9) {
        goto LABEL_20;
      }
LABEL_11:
      v24 += a2;
      uint64_t v23 = (float64x2_t *)((char *)v23 + v21);
      ++v16;
      uint64_t v20 = (float64x2_t *)((char *)v20 + v21);
      float64x2_t v22 = (float64x2_t *)((char *)v22 + v21);
      if (!--v8) {
        return result;
      }
    }
    uint64_t v31 = 0;
    uint64_t v32 = (int)v26;
    unint64_t v33 = &v22->f64[v32];
    uint64_t v34 = v24 + (int)v26;
    uint64_t v35 = (uint64_t)v23 + v32 * 8;
    do
    {
      double v36 = *(double *)&v11 + (double)*(char *)(v34 + v31 + 1) * *(double *)&v10;
      *(v33 - 3) = *(double *)&v11 + (double)*(char *)(v34 + v31) * *(double *)&v10;
      uint64_t v37 = v35 + 8 * v31;
      *(double *)(v37 + 8) = v36;
      double v38 = *(double *)&v11 + (double)*(char *)(v34 + v31 + 3) * *(double *)&v10;
      *(double *)(v37 + 16) = *(double *)&v11 + (double)*(char *)(v34 + v31 + 2) * *(double *)&v10;
      *unint64_t v33 = v38;
      v33 += 4;
      v31 += 4;
    }
    while ((int)v26 + v31 <= v13);
    LODWORD(v26) = v26 + v31;
    if ((int)v26 >= (int)v9) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v39 = (int)v26;
    unint64_t v40 = v9 - (int)v26;
    if (v40 < 8)
    {
      uint64_t v41 = v39;
      goto LABEL_36;
    }
    if ((unint64_t)&v23->f64[v39] < result + v9 + v16 * a2
      && v24 + v39 < (unint64_t)&a5->f64[v9] + v18 * v16)
    {
      uint64_t v41 = v39;
      goto LABEL_36;
    }
    if (v40 >= 0x10)
    {
      unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v61 = 8 * v39;
      uint64_t v62 = v39;
      unint64_t v63 = v40 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v64 = *(int8x16_t *)(v24 + v62);
        v65.i32[0] = v64.u8[6];
        v65.i32[1] = v64.u8[7];
        v66.i32[0] = v64.u8[4];
        v66.i32[1] = v64.u8[5];
        int32x2_t v67 = vshr_n_s32(vshl_n_s32(v65, 0x18uLL), 0x18uLL);
        v68.i32[0] = v64.u8[2];
        int32x2_t v69 = vshr_n_s32(vshl_n_s32(v66, 0x18uLL), 0x18uLL);
        v68.i32[1] = v64.u8[3];
        v70.i64[0] = v67.i32[0];
        v70.i64[1] = v67.i32[1];
        int64x2_t v71 = v70;
        v72.i32[0] = v64.u8[0];
        v70.i64[0] = v69.i32[0];
        v70.i64[1] = v69.i32[1];
        int64x2_t v73 = v70;
        int32x2_t v74 = vshr_n_s32(vshl_n_s32(v68, 0x18uLL), 0x18uLL);
        v72.i32[1] = v64.u8[1];
        int32x2_t v75 = vshr_n_s32(vshl_n_s32(v72, 0x18uLL), 0x18uLL);
        v70.i64[0] = v74.i32[0];
        v70.i64[1] = v74.i32[1];
        int64x2_t v76 = v70;
        v70.i64[0] = v75.i32[0];
        v70.i64[1] = v75.i32[1];
        v64.i64[0] = vextq_s8(v64, v64, 8uLL).u64[0];
        v77.i32[0] = v64.u8[6];
        v77.i32[1] = v64.u8[7];
        v78.i32[0] = v64.u8[4];
        int32x2_t v79 = vshr_n_s32(vshl_n_s32(v77, 0x18uLL), 0x18uLL);
        v78.i32[1] = v64.u8[5];
        int32x2_t v80 = vshr_n_s32(vshl_n_s32(v78, 0x18uLL), 0x18uLL);
        float64x2_t v81 = vcvtq_f64_s64(v70);
        v82.i32[0] = v64.u8[2];
        v70.i64[0] = v79.i32[0];
        v70.i64[1] = v79.i32[1];
        int64x2_t v83 = v70;
        v70.i64[0] = v80.i32[0];
        v70.i64[1] = v80.i32[1];
        v82.i32[1] = v64.u8[3];
        int32x2_t v84 = vshr_n_s32(vshl_n_s32(v82, 0x18uLL), 0x18uLL);
        v85.i32[0] = v64.u8[0];
        __int32 v86 = v64.u8[1];
        float64x2_t v87 = vcvtq_f64_s64(v70);
        v70.i64[0] = v84.i32[0];
        v70.i64[1] = v84.i32[1];
        v85.i32[1] = v86;
        int32x2_t v88 = vshr_n_s32(vshl_n_s32(v85, 0x18uLL), 0x18uLL);
        float64x2_t v89 = vcvtq_f64_s64(v70);
        v70.i64[0] = v88.i32[0];
        v70.i64[1] = v88.i32[1];
        float64x2_t v90 = (float64x2_t *)((char *)v23 + v61);
        v90[2] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v73));
        v90[3] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v71));
        *float64x2_t v90 = vmlaq_f64(v17, v19, v81);
        v90[1] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v76));
        v90[6] = vmlaq_f64(v17, v19, v87);
        v90[7] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v83));
        v90[4] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v70));
        v90[5] = vmlaq_f64(v17, v19, v89);
        v62 += 16;
        v61 += 128;
        v63 -= 16;
      }
      while (v63);
      if (v40 == v42) {
        goto LABEL_11;
      }
      if ((v40 & 8) == 0)
      {
        uint64_t v41 = v42 + v39;
        do
        {
LABEL_36:
          v23->f64[v41] = *(double *)&v11 + (double)*(char *)(v24 + v41) * *(double *)&v10;
          ++v41;
        }
        while (v9 != v41);
        goto LABEL_11;
      }
    }
    else
    {
      unint64_t v42 = 0;
    }
    uint64_t v41 = (v40 & 0xFFFFFFFFFFFFFFF8) + v39;
    unint64_t v43 = v42 - (v40 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v44 = v42 + v39;
    uint64_t v45 = 8 * v44;
    do
    {
      uint64_t v46 = *(void *)(v24 + v44);
      v47.i32[0] = BYTE6(v46);
      v47.i32[1] = HIBYTE(v46);
      v48.i32[0] = BYTE4(v46);
      int32x2_t v49 = vshr_n_s32(vshl_n_s32(v47, 0x18uLL), 0x18uLL);
      v48.i32[1] = BYTE5(v46);
      int32x2_t v50 = vshr_n_s32(vshl_n_s32(v48, 0x18uLL), 0x18uLL);
      v51.i32[0] = BYTE2(v46);
      v52.i64[0] = v49.i32[0];
      v52.i64[1] = v49.i32[1];
      int64x2_t v53 = v52;
      v52.i64[0] = v50.i32[0];
      v52.i64[1] = v50.i32[1];
      v51.i32[1] = BYTE3(v46);
      int32x2_t v54 = vshr_n_s32(vshl_n_s32(v51, 0x18uLL), 0x18uLL);
      v55.i32[0] = v46;
      __int32 v56 = BYTE1(v46);
      float64x2_t v57 = vcvtq_f64_s64(v52);
      v52.i64[0] = v54.i32[0];
      v52.i64[1] = v54.i32[1];
      v55.i32[1] = v56;
      int32x2_t v58 = vshr_n_s32(vshl_n_s32(v55, 0x18uLL), 0x18uLL);
      float64x2_t v59 = vcvtq_f64_s64(v52);
      v52.i64[0] = v58.i32[0];
      v52.i64[1] = v58.i32[1];
      int8x8_t v60 = (float64x2_t *)((char *)v23 + v45);
      v60[2] = vmlaq_f64(v17, v19, v57);
      v60[3] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v53));
      *int8x8_t v60 = vmlaq_f64(v17, v19, vcvtq_f64_s64(v52));
      v60[1] = vmlaq_f64(v17, v19, v59);
      v44 += 8;
      v45 += 64;
      v43 += 8;
    }
    while (v43);
    if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
  if ((int)v9 >= 4)
  {
    uint64_t v91 = 0;
    unint64_t v92 = 3;
    if (v13 > 3) {
      unint64_t v92 = v9 - 4;
    }
    unint64_t v93 = ((v92 << 32) & 0x7FFFFFFC00000000) + 0x400000000;
    unint64_t v94 = v9 - HIDWORD(v93);
    uint64_t v95 = (v92 >> 2) + 1;
    unint64_t v96 = v93 >> 29;
    float64x2_t v97 = (float64x2_t)vdupq_lane_s64(v10, 0);
    float64x2_t v98 = (float64x2_t)vdupq_lane_s64(v11, 0);
    unint64_t v201 = v94 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v99 = v94 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v100 = 8 * v12;
    float64x2_t v101 = (float64x2_t *)((char *)a5 + 24);
    float64x2_t v102 = (double *)a5;
    unint64_t v103 = (const char *)result;
    while (1)
    {
      unint64_t v104 = (a6 & 0xFFFFFFFFFFFFFFF8) * v91;
      uint64_t v105 = v91 * a2;
      if (v92 < 0x3C) {
        break;
      }
      if ((unint64_t)v102 < result + (unint64_t)(v92 & 0xFFFFFFFC) + 4 + v105
        && v103 < (const char *)&a5[2] + ((8 * v92) & 0x7FFFFFFE0) + v104)
      {
        break;
      }
      uint64_t v107 = v95 & 0x7FFFFFF0;
      uint64_t v108 = v102;
      float64x2_t v109 = v103;
      do
      {
        float64x2x4_t v202 = (float64x2x4_t)vld4q_s8(v109);
        v109 += 64;
        int32x2_t v110 = (int32x2_t)vextq_s8((int8x16_t)v202.val[0], (int8x16_t)v202.val[0], 8uLL).u64[0];
        v111.i32[0] = LOBYTE(v202.val[0].f64[0]);
        v111.i32[1] = BYTE1(v202.val[0].f64[0]);
        int32x2_t v112 = vshr_n_s32(vshl_n_s32(v111, 0x18uLL), 0x18uLL);
        v113.i64[0] = v112.i32[0];
        v113.i64[1] = v112.i32[1];
        v114.i32[0] = LOBYTE(v202.val[1].f64[0]);
        v114.i32[1] = BYTE1(v202.val[1].f64[0]);
        int32x2_t v115 = vshr_n_s32(vshl_n_s32(v114, 0x18uLL), 0x18uLL);
        v203.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v113.i64[0] = v115.i32[0];
        v113.i64[1] = v115.i32[1];
        v115.i32[0] = LOBYTE(v202.val[2].f64[0]);
        v115.i32[1] = BYTE1(v202.val[2].f64[0]);
        v203.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        int32x2_t v116 = vshr_n_s32(vshl_n_s32(v115, 0x18uLL), 0x18uLL);
        v113.i64[0] = v116.i32[0];
        v113.i64[1] = v116.i32[1];
        v115.i32[0] = LOBYTE(v202.val[3].f64[0]);
        v115.i32[1] = BYTE1(v202.val[3].f64[0]);
        v203.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v116.i32[0] = BYTE2(v202.val[0].f64[0]);
        int32x2_t v117 = vshr_n_s32(vshl_n_s32(v115, 0x18uLL), 0x18uLL);
        v113.i64[0] = v117.i32[0];
        v113.i64[1] = v117.i32[1];
        v203.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v117.i32[0] = BYTE4(v202.val[0].f64[0]);
        v117.i32[1] = BYTE5(v202.val[0].f64[0]);
        int32x2_t v118 = vshr_n_s32(vshl_n_s32(v117, 0x18uLL), 0x18uLL);
        v113.i64[0] = v118.i32[0];
        v113.i64[1] = v118.i32[1];
        int8x16x4_t v119 = v108;
        vst4q_f64(v119, v203);
        v119 += 8;
        v203.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v118.i32[0] = BYTE4(v202.val[1].f64[0]);
        v118.i32[1] = BYTE5(v202.val[1].f64[0]);
        int32x2_t v120 = vshr_n_s32(vshl_n_s32(v118, 0x18uLL), 0x18uLL);
        v113.i64[0] = v120.i32[0];
        v113.i64[1] = v120.i32[1];
        v203.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v120.i32[0] = BYTE4(v202.val[2].f64[0]);
        v120.i32[1] = BYTE5(v202.val[2].f64[0]);
        int32x2_t v121 = vshr_n_s32(vshl_n_s32(v120, 0x18uLL), 0x18uLL);
        v113.i64[0] = v121.i32[0];
        v113.i64[1] = v121.i32[1];
        v203.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v121.i32[0] = BYTE4(v202.val[3].f64[0]);
        v121.i32[1] = BYTE5(v202.val[3].f64[0]);
        int32x2_t v122 = vshr_n_s32(vshl_n_s32(v121, 0x18uLL), 0x18uLL);
        v113.i64[0] = v122.i32[0];
        v113.i64[1] = v122.i32[1];
        v203.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v122.i32[0] = BYTE6(v202.val[0].f64[0]);
        v116.i32[1] = BYTE3(v202.val[0].f64[0]);
        v122.i32[1] = HIBYTE(v202.val[0].f64[0]);
        uint64x2_t v123 = v108 + 16;
        vst4q_f64(v123, v203);
        int32x2_t v124 = vshr_n_s32(vshl_n_s32(v122, 0x18uLL), 0x18uLL);
        v113.i64[0] = v124.i32[0];
        v113.i64[1] = v124.i32[1];
        v203.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v124.i32[0] = BYTE6(v202.val[1].f64[0]);
        v124.i32[1] = HIBYTE(v202.val[1].f64[0]);
        int32x2_t v125 = vshr_n_s32(vshl_n_s32(v124, 0x18uLL), 0x18uLL);
        v113.i64[0] = v125.i32[0];
        v113.i64[1] = v125.i32[1];
        v203.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v125.i32[0] = BYTE6(v202.val[2].f64[0]);
        v125.i32[1] = HIBYTE(v202.val[2].f64[0]);
        int32x2_t v126 = vshr_n_s32(vshl_n_s32(v125, 0x18uLL), 0x18uLL);
        v113.i64[0] = v126.i32[0];
        v113.i64[1] = v126.i32[1];
        v203.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v126.i32[0] = BYTE6(v202.val[3].f64[0]);
        int32x2_t v127 = vshr_n_s32(vshl_n_s32(v116, 0x18uLL), 0x18uLL);
        v126.i32[1] = HIBYTE(v202.val[3].f64[0]);
        v113.i64[0] = v127.i32[0];
        v113.i64[1] = v127.i32[1];
        int64x2_t v128 = v113;
        int32x2_t v129 = vshr_n_s32(vshl_n_s32(v126, 0x18uLL), 0x18uLL);
        v113.i64[0] = v129.i32[0];
        v113.i64[1] = v129.i32[1];
        v203.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v129.i32[0] = BYTE2(v202.val[1].f64[0]);
        int8x8_t v130 = v108 + 24;
        vst4q_f64(v130, v203);
        v129.i32[1] = BYTE3(v202.val[1].f64[0]);
        v203.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v128));
        v128.i32[0] = BYTE2(v202.val[2].f64[0]);
        v128.i32[1] = BYTE3(v202.val[2].f64[0]);
        int32x2_t v131 = vshr_n_s32(vshl_n_s32(v129, 0x18uLL), 0x18uLL);
        v113.i64[0] = v131.i32[0];
        v113.i64[1] = v131.i32[1];
        v203.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v131.i32[0] = v110.u8[0];
        v131.i32[1] = v110.u8[1];
        *(int32x2_t *)v128.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v128.i8, 0x18uLL), 0x18uLL);
        v113.i64[0] = v128.i32[0];
        v113.i64[1] = v128.i32[1];
        v203.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v128.i32[0] = BYTE2(v202.val[3].f64[0]);
        v128.i32[1] = BYTE3(v202.val[3].f64[0]);
        *(int32x2_t *)v128.i8 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)v128.i8, 0x18uLL), 0x18uLL);
        v113.i64[0] = v128.i32[0];
        v113.i64[1] = v128.i32[1];
        v203.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v132.i32[0] = v110.u8[2];
        *(int32x2_t *)v128.i8 = vshr_n_s32(vshl_n_s32(v131, 0x18uLL), 0x18uLL);
        vst4q_f64(v119, v203);
        v132.i32[1] = v110.u8[3];
        unint64_t v133 = vextq_s8((int8x16_t)v202.val[1], (int8x16_t)v202.val[1], 8uLL).u64[0];
        v113.i64[0] = v128.i32[0];
        v113.i64[1] = v128.i32[1];
        *(void *)&v203.val[1].f64[0] = vextq_s8((int8x16_t)v202.val[2], (int8x16_t)v202.val[2], 8uLL).u64[0];
        v128.i64[0] = vextq_s8((int8x16_t)v202.val[3], (int8x16_t)v202.val[3], 8uLL).u64[0];
        LODWORD(v203.val[2].f64[0]) = v133;
        HIDWORD(v203.val[2].f64[0]) = BYTE1(v133);
        v202.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v203.val[0].f64[0]) = v110.u8[4];
        *(int32x2_t *)&v203.val[2].f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v203.val[2].f64[0]);
        v113.i64[1] = SHIDWORD(v203.val[2].f64[0]);
        v202.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v203.val[2].f64[0]) = LOBYTE(v203.val[1].f64[0]);
        HIDWORD(v203.val[0].f64[0]) = v110.u8[5];
        HIDWORD(v203.val[2].f64[0]) = BYTE1(v203.val[1].f64[0]);
        *(int32x2_t *)&v203.val[2].f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v203.val[2].f64[0]);
        v113.i64[1] = SHIDWORD(v203.val[2].f64[0]);
        v202.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v203.val[2].f64[0]) = v128.u8[0];
        HIDWORD(v203.val[2].f64[0]) = v128.u8[1];
        int32x2_t v134 = vshr_n_s32(vshl_n_s32(v132, 0x18uLL), 0x18uLL);
        *(int32x2_t *)&v203.val[2].f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v203.val[2].f64[0]);
        v113.i64[1] = SHIDWORD(v203.val[2].f64[0]);
        int8x8_t v135 = v108 + 32;
        v202.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        vst4q_f64(v135, v202);
        v113.i64[0] = v134.i32[0];
        v113.i64[1] = v134.i32[1];
        LODWORD(v203.val[2].f64[0]) = BYTE2(v133);
        HIDWORD(v203.val[2].f64[0]) = BYTE3(v133);
        v202.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        int32x2_t v136 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = v136.i32[0];
        v113.i64[1] = v136.i32[1];
        LODWORD(v203.val[2].f64[0]) = BYTE2(v203.val[1].f64[0]);
        float64x2_t v137 = vcvtq_f64_s64(v113);
        HIDWORD(v203.val[2].f64[0]) = BYTE3(v203.val[1].f64[0]);
        *(int32x2_t *)&v203.val[2].f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[2].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v203.val[2].f64[0]);
        v113.i64[1] = SHIDWORD(v203.val[2].f64[0]);
        v202.val[1] = vmlaq_f64(v98, v97, v137);
        LODWORD(v137.f64[0]) = v128.u8[2];
        HIDWORD(v137.f64[0]) = v128.u8[3];
        v202.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v202.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v203.val[0].f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        int8x8_t v138 = v108 + 40;
        vst4q_f64(v138, v202);
        v202.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v137.f64[0]) = BYTE4(v133);
        HIDWORD(v137.f64[0]) = BYTE5(v133);
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v202.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v137.f64[0]) = BYTE4(v203.val[1].f64[0]);
        HIDWORD(v137.f64[0]) = BYTE5(v203.val[1].f64[0]);
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v202.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        LODWORD(v137.f64[0]) = v128.u8[4];
        HIDWORD(v137.f64[0]) = v128.u8[5];
        *(int32x2_t *)&v137.f64[0] = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = SLODWORD(v137.f64[0]);
        v113.i64[1] = SHIDWORD(v137.f64[0]);
        v202.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        int8x8_t v139 = v108 + 48;
        vst4q_f64(v139, v202);
        v110.i32[0] = v110.u8[6];
        v110.i32[1] = v110.u8[7];
        int32x2_t v140 = vshr_n_s32(vshl_n_s32(v110, 0x18uLL), 0x18uLL);
        LODWORD(v137.f64[0]) = BYTE6(v133);
        HIDWORD(v137.f64[0]) = HIBYTE(v133);
        v113.i64[0] = v140.i32[0];
        v113.i64[1] = v140.i32[1];
        v202.val[0] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        int32x2_t v141 = vshr_n_s32(vshl_n_s32(*(int32x2_t *)&v137.f64[0], 0x18uLL), 0x18uLL);
        v113.i64[0] = v141.i32[0];
        v113.i64[1] = v141.i32[1];
        v202.val[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v141.i32[0] = BYTE6(v203.val[1].f64[0]);
        v141.i32[1] = HIBYTE(v203.val[1].f64[0]);
        int32x2_t v142 = vshr_n_s32(vshl_n_s32(v141, 0x18uLL), 0x18uLL);
        v113.i64[0] = v142.i32[0];
        v113.i64[1] = v142.i32[1];
        v202.val[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        v142.i32[0] = v128.u8[6];
        v142.i32[1] = v128.u8[7];
        int32x2_t v143 = vshr_n_s32(vshl_n_s32(v142, 0x18uLL), 0x18uLL);
        v113.i64[0] = v143.i32[0];
        v113.i64[1] = v143.i32[1];
        v202.val[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v113));
        unint64_t v144 = v108 + 56;
        vst4q_f64(v144, v202);
        v108 += 64;
        v107 -= 16;
      }
      while (v107);
      uint64_t v145 = 4 * (v95 & 0x7FFFFFF0);
      if (v95 != (v95 & 0x7FFFFFF0)) {
        goto LABEL_53;
      }
LABEL_55:
      if ((int)v9 > (int)v145)
      {
        uint64_t v150 = (int)v145;
        if (v94 < 8)
        {
          uint64_t v151 = (int)v145;
          goto LABEL_71;
        }
        if ((unint64_t)&v102[(int)v145] < result + v94 + v105 + (int)v145
          && &v103[(int)v145] < (const char *)&a5->f64[(int)v145 + v9] + v104 - v96)
        {
          uint64_t v151 = (int)v145;
          goto LABEL_71;
        }
        if (v94 >= 0x10)
        {
          uint64_t v153 = (int)v145;
          uint64_t v154 = (int)v145;
          unint64_t v155 = v94 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            int8x16_t v156 = *(int8x16_t *)&v103[v154];
            v157.i32[0] = v156.u8[6];
            v157.i32[1] = v156.u8[7];
            v158.i32[0] = v156.u8[4];
            v158.i32[1] = v156.u8[5];
            int32x2_t v159 = vshr_n_s32(vshl_n_s32(v157, 0x18uLL), 0x18uLL);
            v160.i32[0] = v156.u8[2];
            int32x2_t v161 = vshr_n_s32(vshl_n_s32(v158, 0x18uLL), 0x18uLL);
            v160.i32[1] = v156.u8[3];
            v162.i64[0] = v159.i32[0];
            v162.i64[1] = v159.i32[1];
            int64x2_t v163 = v162;
            v164.i32[0] = v156.u8[0];
            v162.i64[0] = v161.i32[0];
            v162.i64[1] = v161.i32[1];
            int64x2_t v165 = v162;
            int32x2_t v166 = vshr_n_s32(vshl_n_s32(v160, 0x18uLL), 0x18uLL);
            v164.i32[1] = v156.u8[1];
            int32x2_t v167 = vshr_n_s32(vshl_n_s32(v164, 0x18uLL), 0x18uLL);
            v162.i64[0] = v166.i32[0];
            v162.i64[1] = v166.i32[1];
            int64x2_t v168 = v162;
            v162.i64[0] = v167.i32[0];
            v162.i64[1] = v167.i32[1];
            v156.i64[0] = vextq_s8(v156, v156, 8uLL).u64[0];
            v169.i32[0] = v156.u8[6];
            v169.i32[1] = v156.u8[7];
            v170.i32[0] = v156.u8[4];
            int32x2_t v171 = vshr_n_s32(vshl_n_s32(v169, 0x18uLL), 0x18uLL);
            v170.i32[1] = v156.u8[5];
            int32x2_t v172 = vshr_n_s32(vshl_n_s32(v170, 0x18uLL), 0x18uLL);
            float64x2_t v173 = vcvtq_f64_s64(v162);
            v174.i32[0] = v156.u8[2];
            v162.i64[0] = v171.i32[0];
            v162.i64[1] = v171.i32[1];
            int64x2_t v175 = v162;
            v162.i64[0] = v172.i32[0];
            v162.i64[1] = v172.i32[1];
            v174.i32[1] = v156.u8[3];
            int32x2_t v176 = vshr_n_s32(vshl_n_s32(v174, 0x18uLL), 0x18uLL);
            v177.i32[0] = v156.u8[0];
            __int32 v178 = v156.u8[1];
            float64x2_t v179 = vcvtq_f64_s64(v162);
            v162.i64[0] = v176.i32[0];
            v162.i64[1] = v176.i32[1];
            v177.i32[1] = v178;
            int32x2_t v180 = vshr_n_s32(vshl_n_s32(v177, 0x18uLL), 0x18uLL);
            float64x2_t v181 = vcvtq_f64_s64(v162);
            v162.i64[0] = v180.i32[0];
            v162.i64[1] = v180.i32[1];
            int8x8_t v182 = (float64x2_t *)&v102[v153];
            v182[2] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v165));
            v182[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v163));
            *int8x8_t v182 = vmlaq_f64(v98, v97, v173);
            v182[1] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v168));
            v182[6] = vmlaq_f64(v98, v97, v179);
            v182[7] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v175));
            v182[4] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v162));
            v182[5] = vmlaq_f64(v98, v97, v181);
            v154 += 16;
            v153 += 16;
            v155 -= 16;
          }
          while (v155);
          if (v94 == v201) {
            goto LABEL_41;
          }
          unint64_t v152 = v94 & 0xFFFFFFFFFFFFFFF0;
          if ((v94 & 8) == 0)
          {
            uint64_t v151 = v150 + v201;
            do
            {
LABEL_71:
              v102[v151] = *(double *)&v11 + (double)v103[v151] * *(double *)&v10;
              ++v151;
            }
            while (v9 != v151);
            goto LABEL_41;
          }
        }
        else
        {
          unint64_t v152 = 0;
        }
        uint64_t v151 = v150 + v99;
        unint64_t v183 = v152 - (v94 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v184 = v152 + v150;
        uint64_t v185 = v184;
        do
        {
          uint64_t v186 = *(void *)&v103[v184];
          v187.i32[0] = BYTE6(v186);
          v187.i32[1] = HIBYTE(v186);
          v188.i32[0] = BYTE4(v186);
          int32x2_t v189 = vshr_n_s32(vshl_n_s32(v187, 0x18uLL), 0x18uLL);
          v188.i32[1] = BYTE5(v186);
          int32x2_t v190 = vshr_n_s32(vshl_n_s32(v188, 0x18uLL), 0x18uLL);
          v191.i32[0] = BYTE2(v186);
          v192.i64[0] = v189.i32[0];
          v192.i64[1] = v189.i32[1];
          int64x2_t v193 = v192;
          v192.i64[0] = v190.i32[0];
          v192.i64[1] = v190.i32[1];
          v191.i32[1] = BYTE3(v186);
          int32x2_t v194 = vshr_n_s32(vshl_n_s32(v191, 0x18uLL), 0x18uLL);
          v195.i32[0] = v186;
          __int32 v196 = BYTE1(v186);
          float64x2_t v197 = vcvtq_f64_s64(v192);
          v192.i64[0] = v194.i32[0];
          v192.i64[1] = v194.i32[1];
          v195.i32[1] = v196;
          int32x2_t v198 = vshr_n_s32(vshl_n_s32(v195, 0x18uLL), 0x18uLL);
          float64x2_t v199 = vcvtq_f64_s64(v192);
          v192.i64[0] = v198.i32[0];
          v192.i64[1] = v198.i32[1];
          v200 = (float64x2_t *)&v102[v185];
          v200[2] = vmlaq_f64(v98, v97, v197);
          v200[3] = vmlaq_f64(v98, v97, vcvtq_f64_s64(v193));
          float64x2_t *v200 = vmlaq_f64(v98, v97, vcvtq_f64_s64(v192));
          v200[1] = vmlaq_f64(v98, v97, v199);
          v184 += 8;
          v185 += 8;
          v183 += 8;
        }
        while (v183);
        if (v94 == v99) {
          goto LABEL_41;
        }
        goto LABEL_71;
      }
LABEL_41:
      v103 += a2;
      float64x2_t v102 = (double *)((char *)v102 + v100);
      ++v91;
      float64x2_t v101 = (float64x2_t *)((char *)v101 + v100);
      if (!--v8) {
        return result;
      }
    }
    uint64_t v145 = 0;
LABEL_53:
    f64 = v101[(unint64_t)v145 / 2].f64;
    do
    {
      double v147 = *(double *)&v11 + (double)v103[v145 + 1] * *(double *)&v10;
      *(f64 - 3) = *(double *)&v11 + (double)v103[v145] * *(double *)&v10;
      unsigned int v148 = &v102[v145];
      v148[1] = v147;
      double v149 = *(double *)&v11 + (double)v103[v145 + 3] * *(double *)&v10;
      v148[2] = *(double *)&v11 + (double)v103[v145 + 2] * *(double *)&v10;
      double *f64 = v149;
      f64 += 4;
      v145 += 4;
    }
    while (v145 <= v13);
    goto LABEL_55;
  }
  if ((int)v9 >= 1)
  {
    unsigned int v14 = (char *)(result + 2);
    int v15 = a5[1].f64;
    do
    {
      *(v15 - 2) = *(double *)&v11 + (double)*(v14 - 2) * *(double *)&v10;
      if (v9 != 1)
      {
        *(v15 - 1) = *(double *)&v11 + (double)*(v14 - 1) * *(double *)&v10;
        if (v9 != 2) {
          *int v15 = *(double *)&v11 + (double)*v14 * *(double *)&v10;
        }
      }
      v14 += a2;
      v15 += v12;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint16x8_t *sub_10024A95C(uint16x8_t *result, unint64_t a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, float64x2_t *a11, unint64_t a12, unsigned int *a13, double *a14)
{
  unsigned int v14 = a13[1];
  if (!v14) {
    return result;
  }
  unint64_t v15 = *a13;
  uint64_t v16 = *(uint64_t *)a14;
  uint64_t v17 = *((uint64_t *)a14 + 1);
  unint64_t v18 = a2 >> 1;
  unint64_t v19 = a12 >> 3;
  unsigned int v20 = v14 - 1;
  if ((int)v15 >= 8)
  {
    float64x2_t v23 = (float64x2_t)vdupq_lane_s64(v17, 0);
    uint64_t v24 = (v15 - 4);
    float64x2_t v25 = (float64x2_t)vdupq_lane_s64(v16, 0);
    unint64_t v26 = a11 + 2;
    uint64_t v27 = 8 * v19;
    uint64_t v28 = 2 * v18;
    int8x16_t v29 = (float64x2_t *)((char *)a11 + 24);
    uint64_t v30 = (uint64_t)result->i64 + 4;
    while (1)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      unsigned int v33 = v20;
      uint64_t v34 = result;
      uint64_t v35 = v26;
      do
      {
        uint16x8_t v36 = *v34++;
        uint32x4_t v37 = vmovl_u16(*(uint16x4_t *)v36.i8);
        uint32x4_t v38 = vmovl_high_u16(v36);
        v39.i64[0] = v37.u32[0];
        v39.i64[1] = v37.u32[1];
        float64x2_t v40 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_s64(v39), *(double *)&v16));
        v39.i64[0] = v37.u32[2];
        v39.i64[1] = v37.u32[3];
        float64x2_t v41 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_s64(v39), *(double *)&v16));
        v39.i64[0] = v38.u32[0];
        v39.i64[1] = v38.u32[1];
        float64x2_t v42 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_s64(v39), *(double *)&v16));
        v39.i64[0] = v38.u32[2];
        v39.i64[1] = v38.u32[3];
        float64x2_t v43 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_s64(v39), *(double *)&v16));
        v35[-2] = v40;
        v35[-1] = v41;
        *uint64_t v35 = v42;
        v35[1] = v43;
        v35 += 4;
        v32 += 8;
        v31 += 0x800000000;
      }
      while (v32 <= (v15 - 8));
      if ((int)v24 >= (int)v32)
      {
        uint64_t v44 = 0;
        uint64_t v45 = (int)v32;
        uint64_t v46 = &v29->f64[v45];
        uint64_t v47 = 2 * (int)v32;
        int32x2_t v48 = (_WORD *)(v30 + v47);
        uint64_t v49 = (uint64_t)a11 + v45 * 8;
        uint64_t v50 = (uint64_t)result->i64 + v47;
        do
        {
          LOWORD(v43.f64[0]) = *(v48 - 2);
          double v51 = *(double *)&v17 + (double)*(unint64_t *)&v43.f64[0] * *(double *)&v16;
          LOWORD(v41.f64[0]) = *(_WORD *)(v50 + 2 * v44 + 2);
          v41.f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v41.f64[0] * *(double *)&v16;
          *(v46 - 3) = v51;
          uint64_t v52 = v49 + 8 * v44;
          LOWORD(v51) = *v48;
          v43.f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v51 * *(double *)&v16;
          LOWORD(v40.f64[0]) = v48[1];
          v40.f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v40.f64[0] * *(double *)&v16;
          *(float64_t *)(v52 + 8) = v41.f64[0];
          *(float64_t *)(v52 + 16) = v43.f64[0];
          *uint64_t v46 = v40.f64[0];
          v46 += 4;
          v44 += 4;
          v48 += 4;
        }
        while ((int)v32 + v44 <= v24);
        LODWORD(v32) = v32 + v44;
        if ((int)v32 < (int)v15)
        {
LABEL_20:
          uint64_t v53 = (int)v32;
          unint64_t v54 = v15 - (int)v32;
          unint64_t v32 = (int)v32;
          if (v54 < 8) {
            goto LABEL_46;
          }
          unint64_t v32 = (v54 & 0xFFFFFFFFFFFFFFF8) + (int)v32;
          uint64_t v55 = 2 * v53;
          uint64_t v56 = 8 * v53;
          unint64_t v57 = v54 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            uint16x8_t v58 = *(uint16x8_t *)((char *)result + v55);
            uint32x4_t v59 = vmovl_high_u16(v58);
            v60.i64[0] = v59.u32[2];
            v60.i64[1] = v59.u32[3];
            float64x2_t v61 = vcvtq_f64_u64(v60);
            v60.i64[0] = v59.u32[0];
            v60.i64[1] = v59.u32[1];
            float64x2_t v62 = vcvtq_f64_u64(v60);
            uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)v58.i8);
            v60.i64[0] = v63.u32[2];
            v60.i64[1] = v63.u32[3];
            float64x2_t v64 = vcvtq_f64_u64(v60);
            v60.i64[0] = v63.u32[0];
            v60.i64[1] = v63.u32[1];
            float64x2_t v43 = vmlaq_f64(v23, v25, v62);
            int32x2_t v65 = (float64x2_t *)((char *)a11 + v56);
            v65[2] = v43;
            v65[3] = vmlaq_f64(v23, v25, v61);
            *int32x2_t v65 = vmlaq_f64(v23, v25, vcvtq_f64_u64(v60));
            v65[1] = vmlaq_f64(v23, v25, v64);
            v55 += 16;
            v56 += 64;
            v57 -= 8;
          }
          while (v57);
          if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_46:
            do
            {
              LOWORD(v43.f64[0]) = result->i16[v32];
              v43.f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v43.f64[0] * *(double *)&v16;
              a11->f64[v32++] = v43.f64[0];
            }
            while (v15 != v32);
          }
        }
      }
      else if ((int)v32 < (int)v15)
      {
        goto LABEL_20;
      }
      unsigned int v20 = v33 - 1;
      unint64_t v26 = (float64x2_t *)((char *)v26 + v27);
      uint64_t result = (uint16x8_t *)((char *)result + v28);
      int8x16_t v29 = (float64x2_t *)((char *)v29 + v27);
      v30 += v28;
      a11 = (float64x2_t *)((char *)a11 + v27);
      if (!v33) {
        return result;
      }
    }
  }
  if ((int)v15 >= 4)
  {
    unint64_t v66 = (v15 - 4);
    unint64_t v67 = (v66 & 0xFFFFFFFC) + 5;
    if (v67 <= v15) {
      unint64_t v67 = v15;
    }
    unint64_t v68 = v67 - (v66 & 0xFFFFFFFC) - 4;
    uint64_t v69 = (v66 >> 2) + 1;
    float64x2_t v70 = (float64x2_t)vdupq_lane_s64(v16, 0);
    float64x2_t v71 = (float64x2_t)vdupq_lane_s64(v17, 0);
    uint64_t v72 = 2 * v18;
    uint64_t v73 = 8 * v19;
    while (1)
    {
      unsigned int v74 = v20;
      if (v66 >= 0x1C)
      {
        uint64_t v76 = v69 & 0x7FFFFFF8;
        int32x2_t v77 = (double *)a11;
        int32x2_t v78 = (const __int16 *)result;
        do
        {
          int16x8x4_t v114 = vld4q_s16(v78);
          v78 += 32;
          uint32x4_t v79 = vmovl_u16(*(uint16x4_t *)v114.val[0].i8);
          v80.i64[0] = v79.u32[0];
          v80.i64[1] = v79.u32[1];
          float64x2_t v81 = vcvtq_f64_u64(v80);
          v80.i64[0] = v79.u32[2];
          v80.i64[1] = v79.u32[3];
          float64x2_t v82 = vcvtq_f64_u64(v80);
          uint32x4_t v83 = vmovl_high_u16((uint16x8_t)v114.val[0]);
          v80.i64[0] = v83.u32[0];
          v80.i64[1] = v83.u32[1];
          float64x2_t v84 = vcvtq_f64_u64(v80);
          v80.i64[0] = v83.u32[2];
          v80.i64[1] = v83.u32[3];
          a7 = (__n128)vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          uint32x4_t v85 = vmovl_high_u16((uint16x8_t)v114.val[1]);
          v80.i64[0] = v85.u32[2];
          v80.i64[1] = v85.u32[3];
          a8 = (__n128)vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          uint32x4_t v86 = vmovl_high_u16((uint16x8_t)v114.val[2]);
          uint32x4_t v87 = vmovl_high_u16((uint16x8_t)v114.val[3]);
          v115.val[0] = vmlaq_f64(v71, v70, v84);
          v80.i64[0] = v85.u32[0];
          v80.i64[1] = v85.u32[1];
          v115.val[1] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v116.val[0] = vmlaq_f64(v71, v70, v82);
          uint32x4_t v88 = vmovl_u16(*(uint16x4_t *)v114.val[1].i8);
          v80.i64[0] = v88.u32[2];
          v80.i64[1] = v88.u32[3];
          v116.val[1] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v114.val[2].i8);
          v80.i64[0] = v89.u32[2];
          v80.i64[1] = v89.u32[3];
          v116.val[2] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v114.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v114.val[3].i8);
          v80.i64[0] = v114.val[0].u32[2];
          v80.i64[1] = v114.val[0].u32[3];
          v116.val[3] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v113.val[0] = vmlaq_f64(v71, v70, v81);
          v80.i64[0] = v88.u32[0];
          v80.i64[1] = v88.u32[1];
          v113.val[1] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v80.i64[0] = v89.u32[0];
          v80.i64[1] = v89.u32[1];
          v113.val[2] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          v80.i64[0] = v86.u32[2];
          v80.i64[1] = v86.u32[3];
          float64x2_t v90 = vcvtq_f64_u64(v80);
          v80.i64[0] = v86.u32[0];
          v80.i64[1] = v86.u32[1];
          v114.val[1] = (int16x8_t)vcvtq_f64_u64(v80);
          v80.i64[0] = v114.val[0].u32[0];
          v80.i64[1] = v114.val[0].u32[1];
          v113.val[3] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          uint64_t v91 = v77;
          vst4q_f64(v91, v113);
          v91 += 8;
          vst4q_f64(v91, v116);
          v115.val[2] = vmlaq_f64(v71, v70, (float64x2_t)v114.val[1]);
          v80.i64[0] = v87.u32[0];
          v80.i64[1] = v87.u32[1];
          v115.val[3] = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          unint64_t v92 = v77 + 16;
          vst4q_f64(v92, v115);
          float64x2_t v93 = vmlaq_f64(v71, v70, v90);
          v80.i64[0] = v87.u32[2];
          v80.i64[1] = v87.u32[3];
          float64x2_t v94 = vmlaq_f64(v71, v70, vcvtq_f64_u64(v80));
          uint64_t v95 = v77 + 24;
          vst4q_f64(v95, *(float64x2x4_t *)a7.n128_u64);
          v77 += 32;
          v76 -= 8;
        }
        while (v76);
        unint64_t v75 = 4 * (v69 & 0x7FFFFFF8);
        if (v69 == (v69 & 0x7FFFFFF8)) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v75 = 0;
      }
      uint64_t v96 = 2 * v75 + 6;
      float64x2_t v97 = &a11[v75 / 2];
      do
      {
        a7.n128_u16[0] = *(unsigned __int16 *)((char *)&result->u16[-3] + v96);
        double v98 = *(double *)&v17 + (double)a7.n128_u64[0] * *(double *)&v16;
        unint64_t v99 = &result->i64[v75 / 4];
        a8.n128_u16[0] = *((_WORD *)v99 + 1);
        double v100 = *(double *)&v17 + (double)a8.n128_u64[0] * *(double *)&v16;
        v97->f64[0] = v98;
        v97->f64[1] = v100;
        LOWORD(v98) = *((_WORD *)v99 + 2);
        a7.n128_f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v98 * *(double *)&v16;
        LOWORD(v100) = *(__int16 *)((char *)result->i16 + v96);
        a8.n128_f64[0] = *(double *)&v17 + (double)*(unint64_t *)&v100 * *(double *)&v16;
        *(void *)&v97[1].f64[0] = a7.n128_u64[0];
        *(void *)&v97[1].f64[1] = a8.n128_u64[0];
        v75 += 4;
        v96 += 8;
        v97 += 2;
      }
      while (v75 <= v66);
LABEL_37:
      if ((int)v15 > (int)v75)
      {
        unint64_t v101 = (v66 & 0xFFFFFFFC) + 4;
        if (v68 < 8) {
          goto LABEL_47;
        }
        uint64_t v102 = 32 * (v66 >> 2) + 32;
        uint64_t v103 = 8 * (v66 >> 2) + 8;
        unint64_t v104 = v68 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          uint16x8_t v105 = *(uint16x8_t *)((char *)result + v103);
          uint32x4_t v106 = vmovl_high_u16(v105);
          v107.i64[0] = v106.u32[2];
          v107.i64[1] = v106.u32[3];
          float64x2_t v108 = vcvtq_f64_u64(v107);
          v107.i64[0] = v106.u32[0];
          v107.i64[1] = v106.u32[1];
          float64x2_t v109 = vcvtq_f64_u64(v107);
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v107.i64[0] = v110.u32[2];
          v107.i64[1] = v110.u32[3];
          float64x2_t v111 = vcvtq_f64_u64(v107);
          v107.i64[0] = v110.u32[0];
          v107.i64[1] = v110.u32[1];
          a7 = (__n128)vmlaq_f64(v71, v70, v109);
          a8 = (__n128)vmlaq_f64(v71, v70, v108);
          uint64_t v112 = (uint64_t)a11 + v102;
          *(__n128 *)(v112 + 32) = a7;
          *(__n128 *)(v112 + 48) = a8;
          *(float64x2_t *)uint64_t v112 = vmlaq_f64(v71, v70, vcvtq_f64_u64(v107));
          *(float64x2_t *)(v112 + 16) = vmlaq_f64(v71, v70, v111);
          v103 += 16;
          v102 += 64;
          v104 -= 8;
        }
        while (v104);
        unint64_t v101 = (v66 & 0xFFFFFFFC) + 4 + (v68 & 0xFFFFFFFFFFFFFFF8);
        if (v68 != (v68 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_47:
          do
          {
            a7.n128_u16[0] = result->u16[v101];
            a7.n128_f64[0] = *(double *)&v17 + (double)a7.n128_u64[0] * *(double *)&v16;
            *(void *)&a11->f64[v101++] = a7.n128_u64[0];
          }
          while (v101 < v15);
        }
      }
      unsigned int v20 = v74 - 1;
      uint64_t result = (uint16x8_t *)((char *)result + v72);
      a11 = (float64x2_t *)((char *)a11 + v73);
      if (!v74) {
        return result;
      }
    }
  }
  if ((int)v15 >= 1)
  {
    uint64_t v21 = &result->i16[2];
    f64 = a11[1].f64;
    do
    {
      LOWORD(a5) = *(v21 - 2);
      a5 = *(double *)&v17 + (double)*(unint64_t *)&a5 * *(double *)&v16;
      *(f64 - 2) = a5;
      if (v15 != 1)
      {
        LOWORD(a5) = *(v21 - 1);
        a5 = *(double *)&v17 + (double)*(unint64_t *)&a5 * *(double *)&v16;
        *(f64 - 1) = a5;
        if (v15 != 2)
        {
          LOWORD(a5) = *v21;
          a5 = *(double *)&v17 + (double)*(unint64_t *)&a5 * *(double *)&v16;
          double *f64 = a5;
        }
      }
      v21 += v18;
      f64 += v19;
      --v14;
    }
    while (v14);
  }
  return result;
}

int16x8_t *sub_10024AF30(int16x8_t *result, unint64_t a2, double a3, double a4, double a5, double a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, float64x2_t *a11, unint64_t a12, unsigned int *a13, double *a14)
{
  unsigned int v14 = a13[1];
  if (!v14) {
    return result;
  }
  unint64_t v15 = *a13;
  uint64_t v16 = *(uint64_t *)a14;
  uint64_t v17 = *((uint64_t *)a14 + 1);
  unint64_t v18 = a2 >> 1;
  unint64_t v19 = a12 >> 3;
  unsigned int v20 = v14 - 1;
  if ((int)v15 >= 8)
  {
    float64x2_t v23 = (float64x2_t)vdupq_lane_s64(v17, 0);
    uint64_t v24 = (v15 - 4);
    float64x2_t v25 = (float64x2_t)vdupq_lane_s64(v16, 0);
    unint64_t v26 = a11 + 2;
    uint64_t v27 = 8 * v19;
    uint64_t v28 = 2 * v18;
    int8x16_t v29 = (float64x2_t *)((char *)a11 + 24);
    uint64_t v30 = (uint64_t)result->i64 + 4;
    while (1)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      unsigned int v33 = v20;
      uint64_t v34 = result;
      uint64_t v35 = v26;
      do
      {
        int16x8_t v36 = *v34++;
        int8x16_t v37 = (int8x16_t)vmovl_s16(*(int16x4_t *)v36.i8);
        int8x16_t v38 = (int8x16_t)vmovl_high_s16(v36);
        float64x2_t v39 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v37.i8)), *(double *)&v16));
        float64x2_t v40 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL))), *(double *)&v16));
        float64x2_t v41 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v38.i8)), *(double *)&v16));
        float64x2_t v42 = vaddq_f64(v23, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL))), *(double *)&v16));
        v35[-2] = v39;
        v35[-1] = v40;
        *uint64_t v35 = v41;
        v35[1] = v42;
        v35 += 4;
        v32 += 8;
        v31 += 0x800000000;
      }
      while (v32 <= (v15 - 8));
      if ((int)v24 >= (int)v32)
      {
        uint64_t v43 = 0;
        uint64_t v44 = (int)v32;
        uint64_t v45 = &v29->f64[v44];
        uint64_t v46 = 2 * (int)v32;
        uint64_t v47 = (_WORD *)(v30 + v46);
        uint64_t v48 = (uint64_t)a11 + v44 * 8;
        uint64_t v49 = (uint64_t)result->i64 + v46;
        do
        {
          LOWORD(v42.f64[0]) = *(v47 - 2);
          double v50 = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v42.f64[0]).i32[0] * *(double *)&v16;
          LOWORD(v40.f64[0]) = *(_WORD *)(v49 + 2 * v43 + 2);
          v40.f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v40.f64[0]).i32[0] * *(double *)&v16;
          *(v45 - 3) = v50;
          uint64_t v51 = v48 + 8 * v43;
          LOWORD(v50) = *v47;
          v42.f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v50).i32[0] * *(double *)&v16;
          LOWORD(v39.f64[0]) = v47[1];
          v39.f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v39.f64[0]).i32[0] * *(double *)&v16;
          *(float64_t *)(v51 + 8) = v40.f64[0];
          *(float64_t *)(v51 + 16) = v42.f64[0];
          *uint64_t v45 = v39.f64[0];
          v45 += 4;
          v43 += 4;
          v47 += 4;
        }
        while ((int)v32 + v43 <= v24);
        LODWORD(v32) = v32 + v43;
        if ((int)v32 < (int)v15)
        {
LABEL_20:
          uint64_t v52 = (int)v32;
          unint64_t v53 = v15 - (int)v32;
          unint64_t v32 = (int)v32;
          if (v53 < 8) {
            goto LABEL_46;
          }
          unint64_t v32 = (v53 & 0xFFFFFFFFFFFFFFF8) + (int)v32;
          uint64_t v54 = 2 * v52;
          uint64_t v55 = 8 * v52;
          unint64_t v56 = v53 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            int16x8_t v57 = *(int16x8_t *)((char *)result + v54);
            int32x4_t v58 = vmovl_high_s16(v57);
            v59.i64[0] = v58.i32[2];
            v59.i64[1] = v58.i32[3];
            float64x2_t v60 = vcvtq_f64_s64(v59);
            v59.i64[0] = v58.i32[0];
            v59.i64[1] = v58.i32[1];
            float64x2_t v61 = vcvtq_f64_s64(v59);
            int32x4_t v62 = vmovl_s16(*(int16x4_t *)v57.i8);
            v59.i64[0] = v62.i32[2];
            v59.i64[1] = v62.i32[3];
            float64x2_t v63 = vcvtq_f64_s64(v59);
            v59.i64[0] = v62.i32[0];
            v59.i64[1] = v62.i32[1];
            float64x2_t v42 = vmlaq_f64(v23, v25, v61);
            float64x2_t v64 = (float64x2_t *)((char *)a11 + v55);
            v64[2] = v42;
            v64[3] = vmlaq_f64(v23, v25, v60);
            *float64x2_t v64 = vmlaq_f64(v23, v25, vcvtq_f64_s64(v59));
            v64[1] = vmlaq_f64(v23, v25, v63);
            v54 += 16;
            v55 += 64;
            v56 -= 8;
          }
          while (v56);
          if (v53 != (v53 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_46:
            do
            {
              LOWORD(v42.f64[0]) = result->i16[v32];
              v42.f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v42.f64[0]).i32[0] * *(double *)&v16;
              a11->f64[v32++] = v42.f64[0];
            }
            while (v15 != v32);
          }
        }
      }
      else if ((int)v32 < (int)v15)
      {
        goto LABEL_20;
      }
      unsigned int v20 = v33 - 1;
      unint64_t v26 = (float64x2_t *)((char *)v26 + v27);
      uint64_t result = (int16x8_t *)((char *)result + v28);
      int8x16_t v29 = (float64x2_t *)((char *)v29 + v27);
      v30 += v28;
      a11 = (float64x2_t *)((char *)a11 + v27);
      if (!v33) {
        return result;
      }
    }
  }
  if ((int)v15 >= 4)
  {
    unint64_t v65 = (v15 - 4);
    unint64_t v66 = (v65 & 0xFFFFFFFC) + 5;
    if (v66 <= v15) {
      unint64_t v66 = v15;
    }
    unint64_t v67 = v66 - (v65 & 0xFFFFFFFC) - 4;
    uint64_t v68 = (v65 >> 2) + 1;
    float64x2_t v69 = (float64x2_t)vdupq_lane_s64(v16, 0);
    float64x2_t v70 = (float64x2_t)vdupq_lane_s64(v17, 0);
    uint64_t v71 = 2 * v18;
    uint64_t v72 = 8 * v19;
    while (1)
    {
      unsigned int v73 = v20;
      if (v65 >= 0x1C)
      {
        uint64_t v75 = v68 & 0x7FFFFFF8;
        uint64_t v76 = (double *)a11;
        int32x2_t v77 = (const __int16 *)result;
        do
        {
          int16x8x4_t v113 = vld4q_s16(v77);
          v77 += 32;
          int32x4_t v78 = vmovl_s16(*(int16x4_t *)v113.val[0].i8);
          v79.i64[0] = v78.i32[0];
          v79.i64[1] = v78.i32[1];
          float64x2_t v80 = vcvtq_f64_s64(v79);
          v79.i64[0] = v78.i32[2];
          v79.i64[1] = v78.i32[3];
          float64x2_t v81 = vcvtq_f64_s64(v79);
          int32x4_t v82 = vmovl_high_s16(v113.val[0]);
          v79.i64[0] = v82.i32[0];
          v79.i64[1] = v82.i32[1];
          float64x2_t v83 = vcvtq_f64_s64(v79);
          v79.i64[0] = v82.i32[2];
          v79.i64[1] = v82.i32[3];
          a7 = (__n128)vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          int32x4_t v84 = vmovl_high_s16(v113.val[1]);
          v79.i64[0] = v84.i32[2];
          v79.i64[1] = v84.i32[3];
          a8 = (__n128)vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          int32x4_t v85 = vmovl_high_s16(v113.val[2]);
          int32x4_t v86 = vmovl_high_s16(v113.val[3]);
          v114.val[0] = vmlaq_f64(v70, v69, v83);
          v79.i64[0] = v84.i32[0];
          v79.i64[1] = v84.i32[1];
          v114.val[1] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v115.val[0] = vmlaq_f64(v70, v69, v81);
          int32x4_t v87 = vmovl_s16(*(int16x4_t *)v113.val[1].i8);
          v79.i64[0] = v87.i32[2];
          v79.i64[1] = v87.i32[3];
          v115.val[1] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          int32x4_t v88 = vmovl_s16(*(int16x4_t *)v113.val[2].i8);
          v79.i64[0] = v88.i32[2];
          v79.i64[1] = v88.i32[3];
          v115.val[2] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v113.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v113.val[3].i8);
          v79.i64[0] = v113.val[0].i32[2];
          v79.i64[1] = v113.val[0].i32[3];
          v115.val[3] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v112.val[0] = vmlaq_f64(v70, v69, v80);
          v79.i64[0] = v87.i32[0];
          v79.i64[1] = v87.i32[1];
          v112.val[1] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v79.i64[0] = v88.i32[0];
          v79.i64[1] = v88.i32[1];
          v112.val[2] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          v79.i64[0] = v85.i32[2];
          v79.i64[1] = v85.i32[3];
          float64x2_t v89 = vcvtq_f64_s64(v79);
          v79.i64[0] = v85.i32[0];
          v79.i64[1] = v85.i32[1];
          v113.val[1] = (int16x8_t)vcvtq_f64_s64(v79);
          v79.i64[0] = v113.val[0].i32[0];
          v79.i64[1] = v113.val[0].i32[1];
          v112.val[3] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          float64x2_t v90 = v76;
          vst4q_f64(v90, v112);
          v90 += 8;
          vst4q_f64(v90, v115);
          v114.val[2] = vmlaq_f64(v70, v69, (float64x2_t)v113.val[1]);
          v79.i64[0] = v86.i32[0];
          v79.i64[1] = v86.i32[1];
          v114.val[3] = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          uint64_t v91 = v76 + 16;
          vst4q_f64(v91, v114);
          float64x2_t v92 = vmlaq_f64(v70, v69, v89);
          v79.i64[0] = v86.i32[2];
          v79.i64[1] = v86.i32[3];
          float64x2_t v93 = vmlaq_f64(v70, v69, vcvtq_f64_s64(v79));
          float64x2_t v94 = v76 + 24;
          vst4q_f64(v94, *(float64x2x4_t *)a7.n128_u64);
          v76 += 32;
          v75 -= 8;
        }
        while (v75);
        unint64_t v74 = 4 * (v68 & 0x7FFFFFF8);
        if (v68 == (v68 & 0x7FFFFFF8)) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v74 = 0;
      }
      uint64_t v95 = 2 * v74 + 6;
      uint64_t v96 = &a11[v74 / 2];
      do
      {
        a7.n128_u16[0] = *(unsigned __int16 *)((char *)&result->u16[-3] + v95);
        double v97 = *(double *)&v17 + (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] * *(double *)&v16;
        double v98 = &result->i64[v74 / 4];
        a8.n128_u16[0] = *((_WORD *)v98 + 1);
        double v99 = *(double *)&v17 + (double)vmovl_s16((int16x4_t)a8.n128_u64[0]).i32[0] * *(double *)&v16;
        v96->f64[0] = v97;
        v96->f64[1] = v99;
        LOWORD(v97) = *((_WORD *)v98 + 2);
        a7.n128_f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v97).i32[0] * *(double *)&v16;
        LOWORD(v99) = *(__int16 *)((char *)result->i16 + v95);
        a8.n128_f64[0] = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&v99).i32[0] * *(double *)&v16;
        *(void *)&v96[1].f64[0] = a7.n128_u64[0];
        *(void *)&v96[1].f64[1] = a8.n128_u64[0];
        v74 += 4;
        v95 += 8;
        v96 += 2;
      }
      while (v74 <= v65);
LABEL_37:
      if ((int)v15 > (int)v74)
      {
        unint64_t v100 = (v65 & 0xFFFFFFFC) + 4;
        if (v67 < 8) {
          goto LABEL_47;
        }
        uint64_t v101 = 32 * (v65 >> 2) + 32;
        uint64_t v102 = 8 * (v65 >> 2) + 8;
        unint64_t v103 = v67 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          int16x8_t v104 = *(int16x8_t *)((char *)result + v102);
          int32x4_t v105 = vmovl_high_s16(v104);
          v106.i64[0] = v105.i32[2];
          v106.i64[1] = v105.i32[3];
          float64x2_t v107 = vcvtq_f64_s64(v106);
          v106.i64[0] = v105.i32[0];
          v106.i64[1] = v105.i32[1];
          float64x2_t v108 = vcvtq_f64_s64(v106);
          int32x4_t v109 = vmovl_s16(*(int16x4_t *)v104.i8);
          v106.i64[0] = v109.i32[2];
          v106.i64[1] = v109.i32[3];
          float64x2_t v110 = vcvtq_f64_s64(v106);
          v106.i64[0] = v109.i32[0];
          v106.i64[1] = v109.i32[1];
          a7 = (__n128)vmlaq_f64(v70, v69, v108);
          a8 = (__n128)vmlaq_f64(v70, v69, v107);
          uint64_t v111 = (uint64_t)a11 + v101;
          *(__n128 *)(v111 + 32) = a7;
          *(__n128 *)(v111 + 48) = a8;
          *(float64x2_t *)uint64_t v111 = vmlaq_f64(v70, v69, vcvtq_f64_s64(v106));
          *(float64x2_t *)(v111 + 16) = vmlaq_f64(v70, v69, v110);
          v102 += 16;
          v101 += 64;
          v103 -= 8;
        }
        while (v103);
        unint64_t v100 = (v65 & 0xFFFFFFFC) + 4 + (v67 & 0xFFFFFFFFFFFFFFF8);
        if (v67 != (v67 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_47:
          do
          {
            a7.n128_u16[0] = result->u16[v100];
            a7.n128_f64[0] = *(double *)&v17 + (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] * *(double *)&v16;
            *(void *)&a11->f64[v100++] = a7.n128_u64[0];
          }
          while (v100 < v15);
        }
      }
      unsigned int v20 = v73 - 1;
      uint64_t result = (int16x8_t *)((char *)result + v71);
      a11 = (float64x2_t *)((char *)a11 + v72);
      if (!v73) {
        return result;
      }
    }
  }
  if ((int)v15 >= 1)
  {
    uint64_t v21 = &result->i16[2];
    f64 = a11[1].f64;
    do
    {
      LOWORD(a5) = *(v21 - 2);
      a5 = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&a5).i32[0] * *(double *)&v16;
      *(f64 - 2) = a5;
      if (v15 != 1)
      {
        LOWORD(a5) = *(v21 - 1);
        a5 = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&a5).i32[0] * *(double *)&v16;
        *(f64 - 1) = a5;
        if (v15 != 2)
        {
          LOWORD(a5) = *v21;
          a5 = *(double *)&v17 + (double)vmovl_s16(*(int16x4_t *)&a5).i32[0] * *(double *)&v16;
          double *f64 = a5;
        }
      }
      v21 += v18;
      f64 += v19;
      --v14;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_10024B574(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, double *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8 = a7[1];
  if (!v8) {
    return result;
  }
  unint64_t v9 = *a7;
  uint64_t v10 = *(uint64_t *)a8;
  uint64_t v11 = *((uint64_t *)a8 + 1);
  unint64_t v12 = a2 >> 2;
  unint64_t v13 = a6 >> 3;
  unsigned int v14 = v8 - 1;
  if ((int)v9 >= 8)
  {
    float64x2_t v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
    uint64_t v18 = (v9 - 4);
    float64x2_t v19 = (float64x2_t)vdupq_lane_s64(v10, 0);
    unsigned int v20 = (int32x2_t *)(result + 16);
    uint64_t v21 = 4 * v12;
    float64x2_t v22 = (float64x2_t *)(a5 + 4);
    uint64_t v23 = 8 * v13;
    while (1)
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      unsigned int v26 = v14;
      int v27 = 8;
      uint64_t v28 = v22;
      int8x16_t v29 = v20;
      do
      {
        int v30 = v27;
        int8x16_t v31 = *(int8x16_t *)v29[-2].i8;
        float64x2_t v32 = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*v29)), *(double *)&v10));
        float64x2_t v33 = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v29->i8, *(int8x16_t *)v29->i8, 8uLL))), *(double *)&v10));
        v28[-2] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32(*(int32x2_t *)v31.i8)), *(double *)&v10));
        v28[-1] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(vcvt_f32_s32((int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL))), *(double *)&v10));
        v25 += 8;
        v24 += 0x800000000;
        float64x2_t *v28 = v32;
        v28[1] = v33;
        v28 += 4;
        v29 += 4;
        v27 += 8;
      }
      while (v25 <= (v9 - 8));
      if ((int)v18 >= (int)v25)
      {
        uint64_t v34 = 0;
        uint64_t v35 = v30;
        int16x8_t v36 = (uint64_t *)(result + 4 * v30);
        int8x16_t v37 = (float64x2_t *)&a5[v30];
        do
        {
          uint64_t v38 = *v36;
          uint64_t v39 = v36[1];
          v36 += 2;
          v40.i64[0] = (int)v38;
          v40.i64[1] = SHIDWORD(v38);
          float64x2_t v41 = vmlaq_f64(v17, v19, vcvtq_f64_s64(v40));
          v40.i64[0] = (int)v39;
          v40.i64[1] = SHIDWORD(v39);
          *int8x16_t v37 = v41;
          v37[1] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v40));
          v37 += 2;
          v34 += 4;
        }
        while (v35 + v34 <= v18);
        LODWORD(v25) = v25 + v34;
        if ((int)v25 < (int)v9)
        {
LABEL_20:
          uint64_t v42 = (int)v25;
          unint64_t v43 = v9 - (int)v25;
          unint64_t v25 = (int)v25;
          if (v43 < 8) {
            goto LABEL_46;
          }
          unint64_t v25 = (v43 & 0xFFFFFFFFFFFFFFF8) + (int)v25;
          uint64_t v44 = (float64x2_t *)&a5[v42];
          uint64_t v45 = (char *)v20 + 4 * v42;
          unint64_t v46 = v43 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v47 = *((_OWORD *)v45 - 1);
            v48.i64[0] = SDWORD2(v47);
            v48.i64[1] = SHIDWORD(v47);
            float64x2_t v49 = vcvtq_f64_s64(v48);
            v48.i64[0] = (int)v47;
            v48.i64[1] = SDWORD1(v47);
            float64x2_t v50 = vcvtq_f64_s64(v48);
            v48.i64[0] = (int)*((void *)v45 + 1);
            v48.i64[1] = (int)HIDWORD(*(_OWORD *)v45);
            float64x2_t v51 = vcvtq_f64_s64(v48);
            v48.i64[0] = (int)*(_OWORD *)v45;
            v48.i64[1] = (int)HIDWORD(*(void *)v45);
            *uint64_t v44 = vmlaq_f64(v17, v19, v50);
            v44[1] = vmlaq_f64(v17, v19, v49);
            _DWORD v44[2] = vmlaq_f64(v17, v19, vcvtq_f64_s64(v48));
            v44[3] = vmlaq_f64(v17, v19, v51);
            v44 += 4;
            v45 += 32;
            v46 -= 8;
          }
          while (v46);
          if (v43 != (v43 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_46:
            do
            {
              a5[v25] = *(double *)&v11 + (double)*(int *)(result + 4 * v25) * *(double *)&v10;
              ++v25;
            }
            while (v9 != v25);
          }
        }
      }
      else if ((int)v25 < (int)v9)
      {
        goto LABEL_20;
      }
      unsigned int v14 = v26 - 1;
      unsigned int v20 = (int32x2_t *)((char *)v20 + v21);
      float64x2_t v22 = (float64x2_t *)((char *)v22 + v23);
      result += v21;
      a5 = (double *)((char *)a5 + v23);
      if (!v26) {
        return result;
      }
    }
  }
  if ((int)v9 >= 4)
  {
    unint64_t v52 = (v9 - 4);
    unint64_t v53 = (v52 & 0xFFFFFFFC) + 5;
    if (v53 <= v9) {
      unint64_t v53 = v9;
    }
    unint64_t v54 = v53 - (v52 & 0xFFFFFFFC) - 4;
    uint64_t v55 = (v52 >> 2) + 1;
    float64x2_t v56 = (float64x2_t)vdupq_lane_s64(v10, 0);
    float64x2_t v57 = (float64x2_t)vdupq_lane_s64(v11, 0);
    uint64_t v58 = 4 * v12;
    uint64_t v59 = 8 * v13;
    uint64_t v60 = (uint64_t)&a5[4 * (v52 >> 2) + 8];
    uint64_t v61 = result + 16 * (v52 >> 2) + 32;
    while (1)
    {
      unsigned int v62 = v14;
      if (v52 >= 0xC)
      {
        uint64_t v64 = v55 & 0x7FFFFFFC;
        unint64_t v65 = a5;
        unint64_t v66 = (const float *)result;
        do
        {
          float32x4x4_t v86 = vld4q_f32(v66);
          v66 += 16;
          v67.i64[0] = v86.val[0].i32[0];
          v67.i64[1] = v86.val[0].i32[1];
          float64x2_t v68 = vcvtq_f64_s64(v67);
          v67.i64[0] = v86.val[0].i32[2];
          v67.i64[1] = v86.val[0].i32[3];
          v87.val[0] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[1].i32[2];
          v67.i64[1] = v86.val[1].i32[3];
          v87.val[1] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[2].i32[2];
          v67.i64[1] = v86.val[2].i32[3];
          v87.val[2] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[3].i32[2];
          v67.i64[1] = v86.val[3].i32[3];
          v87.val[3] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v88.val[0] = vmlaq_f64(v57, v56, v68);
          v67.i64[0] = v86.val[1].i32[0];
          v67.i64[1] = v86.val[1].i32[1];
          v88.val[1] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[2].i32[0];
          v67.i64[1] = v86.val[2].i32[1];
          v88.val[2] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          v67.i64[0] = v86.val[3].i32[0];
          v67.i64[1] = v86.val[3].i32[1];
          v88.val[3] = vmlaq_f64(v57, v56, vcvtq_f64_s64(v67));
          float64x2_t v69 = v65 + 16;
          vst4q_f64(v65, v88);
          float64x2_t v70 = v65 + 8;
          vst4q_f64(v70, v87);
          unint64_t v65 = v69;
          v64 -= 4;
        }
        while (v64);
        unint64_t v63 = 4 * (v55 & 0x7FFFFFFC);
        if (v55 == (v55 & 0x7FFFFFFC)) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v63 = 0;
      }
      uint64_t v71 = 4 * v63 + 12;
      uint64_t v72 = &a5[v63];
      do
      {
        uint64_t v73 = result + 4 * v63;
        *uint64_t v72 = *(double *)&v11 + (double)*(int *)(result + v71 - 12) * *(double *)&v10;
        int v74 = *(_DWORD *)(v73 + 8);
        v72[1] = *(double *)&v11 + (double)*(int *)(v73 + 4) * *(double *)&v10;
        double v75 = *(double *)&v11 + (double)v74 * *(double *)&v10;
        double v76 = *(double *)&v11 + (double)*(int *)(result + v71) * *(double *)&v10;
        v72[2] = v75;
        v72[3] = v76;
        v63 += 4;
        v71 += 16;
        v72 += 4;
      }
      while (v63 <= v52);
LABEL_37:
      if ((int)v9 > (int)v63)
      {
        unint64_t v77 = (v52 & 0xFFFFFFFC) + 4;
        if (v54 < 8) {
          goto LABEL_47;
        }
        uint64_t v78 = v61;
        int64x2_t v79 = (float64x2_t *)v60;
        unint64_t v80 = v54 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v81 = *(_OWORD *)(v78 - 16);
          v82.i64[0] = SDWORD2(v81);
          v82.i64[1] = SHIDWORD(v81);
          float64x2_t v83 = vcvtq_f64_s64(v82);
          v82.i64[0] = (int)v81;
          v82.i64[1] = SDWORD1(v81);
          float64x2_t v84 = vcvtq_f64_s64(v82);
          v82.i64[0] = (int)*(void *)(v78 + 8);
          v82.i64[1] = (int)HIDWORD(*(_OWORD *)v78);
          float64x2_t v85 = vcvtq_f64_s64(v82);
          v82.i64[0] = (int)*(_OWORD *)v78;
          v82.i64[1] = (int)HIDWORD(*(void *)v78);
          v79[-2] = vmlaq_f64(v57, v56, v84);
          v79[-1] = vmlaq_f64(v57, v56, v83);
          *int64x2_t v79 = vmlaq_f64(v57, v56, vcvtq_f64_s64(v82));
          v79[1] = vmlaq_f64(v57, v56, v85);
          v79 += 4;
          v78 += 32;
          v80 -= 8;
        }
        while (v80);
        unint64_t v77 = (v52 & 0xFFFFFFFC) + 4 + (v54 & 0xFFFFFFFFFFFFFFF8);
        if (v54 != (v54 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_47:
          do
          {
            a5[v77] = *(double *)&v11 + (double)*(int *)(result + 4 * v77) * *(double *)&v10;
            ++v77;
          }
          while (v77 < v9);
        }
      }
      unsigned int v14 = v62 - 1;
      result += v58;
      a5 = (double *)((char *)a5 + v59);
      v60 += v59;
      v61 += v58;
      if (!v62) {
        return result;
      }
    }
  }
  if ((int)v9 >= 1)
  {
    unint64_t v15 = (int *)(result + 8);
    uint64_t v16 = a5 + 2;
    do
    {
      *(v16 - 2) = *(double *)&v11 + (double)*(v15 - 2) * *(double *)&v10;
      if (v9 != 1)
      {
        *(v16 - 1) = *(double *)&v11 + (double)*(v15 - 1) * *(double *)&v10;
        if (v9 != 2) {
          *uint64_t v16 = *(double *)&v11 + (double)*v15 * *(double *)&v10;
        }
      }
      v15 += v12;
      v16 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

float32x2_t *sub_10024BA6C(float32x2_t *result, unint64_t a2, uint64_t a3, uint64_t a4, double *a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8 = a7[1];
  if (!v8) {
    return result;
  }
  unint64_t v9 = *a7;
  uint64_t v10 = *(uint64_t *)a8;
  uint64_t v11 = *((uint64_t *)a8 + 1);
  unint64_t v12 = a2 >> 2;
  unint64_t v13 = a6 >> 3;
  unsigned int v14 = v8 - 1;
  if ((int)v9 >= 8)
  {
    float64x2_t v17 = (float64x2_t)vdupq_lane_s64(v11, 0);
    uint64_t v18 = (v9 - 4);
    float64x2_t v19 = (float64x2_t)vdupq_lane_s64(v10, 0);
    unsigned int v20 = result + 2;
    uint64_t v21 = 4 * v12;
    float64x2_t v22 = (float64x2_t *)(a5 + 4);
    uint64_t v23 = 8 * v13;
    uint64_t v24 = result + 1;
    while (1)
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      unsigned int v27 = v14;
      int v28 = 8;
      int8x16_t v29 = v22;
      int v30 = v20;
      do
      {
        int v31 = v28;
        float32x4_t v32 = *(float32x4_t *)v30[-2].f32;
        float64x2_t v33 = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(*v30), *(double *)&v10));
        float64x2_t v34 = vaddq_f64(v17, vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v30->f32), *(double *)&v10));
        v29[-2] = vaddq_f64(v17, vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v32.f32), *(double *)&v10));
        v29[-1] = vaddq_f64(v17, vmulq_n_f64(vcvt_hight_f64_f32(v32), *(double *)&v10));
        v26 += 8;
        v25 += 0x800000000;
        *int8x16_t v29 = v33;
        v29[1] = v34;
        v29 += 4;
        v30 += 4;
        v28 += 8;
      }
      while (v26 <= (v9 - 8));
      if ((int)v18 >= (int)v26)
      {
        uint64_t v35 = 0;
        uint64_t v36 = v31;
        int8x16_t v37 = (float32x2_t *)((char *)result + 4 * v31);
        uint64_t v38 = (float64x2_t *)&a5[v31];
        do
        {
          float32x2_t v39 = *v37;
          float32x2_t v40 = v37[1];
          v37 += 2;
          *uint64_t v38 = vmlaq_f64(v17, v19, vcvtq_f64_f32(v39));
          v38[1] = vmlaq_f64(v17, v19, vcvtq_f64_f32(v40));
          v38 += 2;
          v35 += 4;
        }
        while (v36 + v35 <= v18);
        LODWORD(v26) = v26 + v35;
        if ((int)v26 < (int)v9)
        {
LABEL_20:
          uint64_t v41 = (int)v26;
          unint64_t v42 = v9 - (int)v26;
          unint64_t v26 = (int)v26;
          if (v42 < 4) {
            goto LABEL_47;
          }
          unint64_t v26 = (v42 & 0xFFFFFFFFFFFFFFFCLL) + (int)v26;
          unint64_t v43 = (float64x2_t *)&a5[v41];
          uint64_t v44 = (float32x2_t *)((char *)v24 + 4 * v41);
          unint64_t v45 = v42 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v46 = vmlaq_f64(v17, v19, vcvtq_f64_f32(*v44));
            *unint64_t v43 = vmlaq_f64(v17, v19, vcvtq_f64_f32(v44[-1]));
            v43[1] = v46;
            v43 += 2;
            v44 += 2;
            v45 -= 4;
          }
          while (v45);
          if (v42 != (v42 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_47:
            do
            {
              a5[v26] = *(double *)&v11 + result->f32[v26] * *(double *)&v10;
              ++v26;
            }
            while (v9 != v26);
          }
        }
      }
      else if ((int)v26 < (int)v9)
      {
        goto LABEL_20;
      }
      unsigned int v14 = v27 - 1;
      unsigned int v20 = (float32x2_t *)((char *)v20 + v21);
      float64x2_t v22 = (float64x2_t *)((char *)v22 + v23);
      uint64_t result = (float32x2_t *)((char *)result + v21);
      a5 = (double *)((char *)a5 + v23);
      uint64_t v24 = (float32x2_t *)((char *)v24 + v21);
      if (!v27) {
        return result;
      }
    }
  }
  if ((int)v9 >= 4)
  {
    unint64_t v47 = (v9 - 4);
    if ((unint64_t)(v47 & 0xFFFFFFFC) + 5 <= v9) {
      uint64_t v48 = *a7;
    }
    else {
      uint64_t v48 = (v47 & 0xFFFFFFFC) + 5;
    }
    unint64_t v49 = v48 - (v47 & 0xFFFFFFFC) - 4;
    uint64_t v50 = (v47 >> 2) + 1;
    float64x2_t v51 = (float64x2_t)vdupq_lane_s64(v10, 0);
    float64x2_t v52 = (float64x2_t)vdupq_lane_s64(v11, 0);
    uint64_t v53 = v48 & 3;
    uint64_t v54 = 4 * v12;
    uint64_t v55 = 8 * v13;
    uint64_t v56 = (uint64_t)&a5[4 * (v47 >> 2) + 6];
    uint64_t v57 = (uint64_t)&result[2 * (v47 >> 2) + 3];
    while (1)
    {
      unsigned int v58 = v14;
      if (v47 >= 4)
      {
        uint64_t v60 = v50 & 0x7FFFFFFE;
        uint64_t v61 = a5;
        unsigned int v62 = (const float *)result;
        do
        {
          float32x2x4_t v74 = vld4_f32(v62);
          v62 += 8;
          v75.val[0] = vmlaq_f64(v52, v51, vcvtq_f64_f32(v74.val[0]));
          v75.val[1] = vmlaq_f64(v52, v51, vcvtq_f64_f32(v74.val[1]));
          v75.val[2] = vmlaq_f64(v52, v51, vcvtq_f64_f32(v74.val[2]));
          v75.val[3] = vmlaq_f64(v52, v51, vcvtq_f64_f32(v74.val[3]));
          vst4q_f64(v61, v75);
          v61 += 8;
          v60 -= 2;
        }
        while (v60);
        unint64_t v59 = 4 * (v50 & 0x7FFFFFFE);
        if (v50 == (v50 & 0x7FFFFFFE)) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v59 = 0;
      }
      uint64_t v63 = 4 * v59 + 12;
      uint64_t v64 = &a5[v59];
      do
      {
        unint64_t v65 = &result[v59 / 2];
        float v66 = v65[1].f32[0];
        double v67 = *(double *)&v11 + v65->f32[1] * *(double *)&v10;
        *uint64_t v64 = *(double *)&v11 + *(float *)((char *)&result[-1] + v63 - 4) * *(double *)&v10;
        v64[1] = v67;
        double v68 = *(double *)&v11 + *(float *)((char *)result->f32 + v63) * *(double *)&v10;
        v64[2] = *(double *)&v11 + v66 * *(double *)&v10;
        v64[3] = v68;
        v59 += 4;
        v63 += 16;
        v64 += 4;
      }
      while (v59 <= v47);
LABEL_38:
      if ((int)v9 > (int)v59)
      {
        unint64_t v69 = (v47 & 0xFFFFFFFC) + 4;
        if (v49 < 4) {
          goto LABEL_48;
        }
        float64x2_t v70 = (float32x2_t *)v57;
        uint64_t v71 = (_OWORD *)v56;
        unint64_t v72 = v49 - v53;
        do
        {
          float64x2_t v73 = vmlaq_f64(v52, v51, vcvtq_f64_f32(*v70));
          *(v71 - 1) = vmlaq_f64(v52, v51, vcvtq_f64_f32(v70[-1]));
          *uint64_t v71 = v73;
          v71 += 2;
          v70 += 2;
          v72 -= 4;
        }
        while (v72);
        unint64_t v69 = (v47 & 0xFFFFFFFC) + 4 + v49 - v53;
        if (v53)
        {
LABEL_48:
          do
          {
            a5[v69] = *(double *)&v11 + result->f32[v69] * *(double *)&v10;
            ++v69;
          }
          while (v69 < v9);
        }
      }
      unsigned int v14 = v58 - 1;
      uint64_t result = (float32x2_t *)((char *)result + v54);
      a5 = (double *)((char *)a5 + v55);
      v56 += v55;
      v57 += v54;
      if (!v58) {
        return result;
      }
    }
  }
  if ((int)v9 >= 1)
  {
    unint64_t v15 = (float *)&result[1];
    uint64_t v16 = a5 + 2;
    do
    {
      *(v16 - 2) = *(double *)&v11 + *(v15 - 2) * *(double *)&v10;
      if (v9 != 1)
      {
        *(v16 - 1) = *(double *)&v11 + *(v15 - 1) * *(double *)&v10;
        if (v9 != 2) {
          *uint64_t v16 = *(double *)&v11 + *v15 * *(double *)&v10;
        }
      }
      v15 += v12;
      v16 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_10024BE6C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, double *a8)
{
  unsigned int v8 = a7[1];
  if (!v8) {
    return result;
  }
  uint64_t v9 = *a7;
  uint64_t v10 = *(uint64_t *)a8;
  uint64_t v11 = *((uint64_t *)a8 + 1);
  unint64_t v12 = a2 >> 3;
  unint64_t v13 = a6 >> 3;
  if ((int)v9 >= 4)
  {
    uint64_t v17 = 0;
    unsigned int v18 = v8 - 1;
    float64x2_t v19 = (float64x2_t)vdupq_lane_s64(v11, 0);
    unint64_t v20 = (v9 - 4);
    unint64_t v21 = a6 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = a2 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v23 = (float64x2_t)vdupq_lane_s64(v10, 0);
    uint64_t v24 = 8 * v13;
    uint64_t v25 = 8 * v12;
    uint64_t v26 = result;
    uint64_t v27 = a5;
    while (1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      unsigned int v31 = v18;
      int v32 = 4;
      do
      {
        int v33 = v32;
        float64x2_t v34 = vaddq_f64(v19, vmulq_n_f64(*(float64x2_t *)(v26 + v28 + 16), *(double *)&v10));
        uint64_t v35 = (float64x2_t *)(v27 + v28);
        v30 += 4;
        *uint64_t v35 = vaddq_f64(v19, vmulq_n_f64(*(float64x2_t *)(v26 + v28), *(double *)&v10));
        v35[1] = v34;
        v29 += 0x400000000;
        v28 += 32;
        int v32 = v33 + 4;
      }
      while (v30 <= v20);
      if ((int)v20 >= (int)v30)
      {
        uint64_t v36 = 0;
        uint64_t v37 = v33;
        uint64_t v38 = 8 * v33;
        do
        {
          float32x2_t v39 = (float64x2_t *)(v27 + v38);
          *float32x2_t v39 = vmlaq_f64(v19, v23, *(float64x2_t *)(v26 + v38));
          v39[1] = vmlaq_f64(v19, v23, *(float64x2_t *)(v26 + v38 + 16));
          v38 += 32;
          v36 += 4;
        }
        while (v37 + v36 <= (uint64_t)v20);
        LODWORD(v30) = v30 + v36;
        if ((int)v30 < (int)v9)
        {
LABEL_19:
          unint64_t v30 = (int)v30;
          unint64_t v40 = v9 - (int)v30;
          if (v40 < 8) {
            goto LABEL_28;
          }
          uint64_t v41 = 8 * (int)v30;
          if (a5 + v21 * v17 - (result + v22 * v17) < 0x20) {
            goto LABEL_28;
          }
          unint64_t v30 = (v40 & 0xFFFFFFFFFFFFFFFCLL) + (int)v30;
          unint64_t v42 = v40 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v43 = vmlaq_f64(v19, v23, *(float64x2_t *)(v26 + v41 + 16));
            uint64_t v44 = (float64x2_t *)(v27 + v41);
            *uint64_t v44 = vmlaq_f64(v19, v23, *(float64x2_t *)(v26 + v41));
            v44[1] = v43;
            v41 += 32;
            v42 -= 4;
          }
          while (v42);
          if (v40 != (v40 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_28:
            do
            {
              *(double *)(v27 + 8 * v30) = *(double *)&v11 + *(double *)(v26 + 8 * v30) * *(double *)&v10;
              ++v30;
            }
            while (v9 != v30);
          }
        }
      }
      else if ((int)v30 < (int)v9)
      {
        goto LABEL_19;
      }
      --v18;
      ++v17;
      v27 += v24;
      v26 += v25;
      if (!v31) {
        return result;
      }
    }
  }
  if ((int)v9 >= 1)
  {
    unsigned int v14 = (double *)(result + 16);
    unint64_t v15 = (double *)(a5 + 16);
    uint64_t v16 = 8 * v13;
    do
    {
      *(v15 - 2) = *(double *)&v11 + *(v14 - 2) * *(double *)&v10;
      if (v9 != 1)
      {
        *(v15 - 1) = *(double *)&v11 + *(v14 - 1) * *(double *)&v10;
        if (v9 != 2) {
          *unint64_t v15 = *(double *)&v11 + *v14 * *(double *)&v10;
        }
      }
      v14 += v12;
      unint64_t v15 = (double *)((char *)v15 + v16);
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_10024C098(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  uint64_t v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint8x8_t v11 = *(uint8x8_t *)(a4 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v45 = a5;
      uint64_t v49 = result;
      uint64_t v41 = a4;
      int v53 = v6;
      uint8x8_t v57 = v11;
      float32x4_t v33 = v8;
      __n128 v37 = a1;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v8 = v33;
      a1 = v37;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      uint8x8_t v11 = v57;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v53;
      a4 = v41;
      a5 = v45;
      int v19 = v17;
      uint64_t result = v49;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v8 = v33;
        a1 = v37;
        uint8x8_t v11 = v57;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
        uint64_t result = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v46 = a5;
      uint64_t v50 = result;
      uint64_t v42 = a4;
      int v54 = v6;
      uint8x8_t v58 = v11;
      float32x4_t v34 = v8;
      __n128 v38 = a1;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v8 = v34;
      a1 = v38;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      uint8x8_t v11 = v58;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a4 = v42;
      a5 = v46;
      int v22 = v20;
      uint64_t result = v50;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v8 = v34;
        a1 = v38;
        uint8x8_t v11 = v58;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
        uint64_t result = v50;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v47 = a5;
      uint64_t v51 = result;
      uint64_t v43 = a4;
      int v55 = v6;
      uint8x8_t v59 = v11;
      float32x4_t v35 = v8;
      __n128 v39 = a1;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      float32x4_t v8 = v35;
      a1 = v39;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      uint8x8_t v11 = v59;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a4 = v43;
      a5 = v47;
      int v25 = v23;
      uint64_t result = v51;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        uint8x8_t v11 = v59;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
        uint64_t result = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      uint8x8_t v60 = v11;
      float32x4_t v36 = v8;
      __n128 v40 = a1;
      int8x16_t v30 = v13;
      int8x16_t v32 = v12;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v30;
      int8x16_t v12 = v32;
      float32x4_t v8 = v36;
      a1 = v40;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      uint8x8_t v11 = v60;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v28 = v26;
      uint64_t result = v52;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v30;
        int8x16_t v12 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        uint8x8_t v11 = v60;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    uint16x8_t v14 = vmovl_u8(v11);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v14.i8)), a1.n128_f32[0]));
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v14)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v13, v15), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v16), v10[215])))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024C3F8(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  uint64_t v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int8x8_t v11 = *(int8x8_t *)(a4 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v45 = a5;
      uint64_t v49 = result;
      uint64_t v41 = a4;
      int v53 = v6;
      int8x8_t v57 = v11;
      float32x4_t v33 = v8;
      __n128 v37 = a1;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v8 = v33;
      a1 = v37;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      int8x8_t v11 = v57;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v53;
      a4 = v41;
      a5 = v45;
      int v19 = v17;
      uint64_t result = v49;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v8 = v33;
        a1 = v37;
        int8x8_t v11 = v57;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
        uint64_t result = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v46 = a5;
      uint64_t v50 = result;
      uint64_t v42 = a4;
      int v54 = v6;
      int8x8_t v58 = v11;
      float32x4_t v34 = v8;
      __n128 v38 = a1;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v8 = v34;
      a1 = v38;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      int8x8_t v11 = v58;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a4 = v42;
      a5 = v46;
      int v22 = v20;
      uint64_t result = v50;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v8 = v34;
        a1 = v38;
        int8x8_t v11 = v58;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
        uint64_t result = v50;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v47 = a5;
      uint64_t v51 = result;
      uint64_t v43 = a4;
      int v55 = v6;
      int8x8_t v59 = v11;
      float32x4_t v35 = v8;
      __n128 v39 = a1;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      float32x4_t v8 = v35;
      a1 = v39;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      int8x8_t v11 = v59;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a4 = v43;
      a5 = v47;
      int v25 = v23;
      uint64_t result = v51;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        int8x8_t v11 = v59;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
        uint64_t result = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      int8x8_t v60 = v11;
      float32x4_t v36 = v8;
      __n128 v40 = a1;
      int8x16_t v30 = v13;
      int8x16_t v32 = v12;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v30;
      int8x16_t v12 = v32;
      float32x4_t v8 = v36;
      a1 = v40;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      int8x8_t v11 = v60;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v28 = v26;
      uint64_t result = v52;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v30;
        int8x16_t v12 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        int8x8_t v11 = v60;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    int16x8_t v14 = vmovl_s8(v11);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v14.i8)), a1.n128_f32[0]));
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v14)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v13, v15), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v16), v10[215])))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024C758(__n128 a1, int32x2_t a2, uint64_t a3, uint16x8_t *a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  uint64_t v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint16x8_t v11 = *a4;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      __n128 v40 = a1;
      uint16x8_t v32 = v11;
      float32x4_t v36 = v8;
      int v16 = __cxa_guard_acquire(qword_1004D2D60);
      uint16x8_t v11 = v32;
      float32x4_t v8 = v36;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      a1 = v40;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v18 = v16;
      uint64_t result = v52;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        uint16x8_t v11 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v49 = a5;
      uint64_t v53 = result;
      uint64_t v45 = a4;
      int v57 = v6;
      __n128 v41 = a1;
      uint16x8_t v33 = v11;
      float32x4_t v37 = v8;
      int v19 = __cxa_guard_acquire(qword_1004D2D80);
      uint16x8_t v11 = v33;
      float32x4_t v8 = v37;
      *(void *)&long long v20 = 0x3F0000003F000000;
      *((void *)&v20 + 1) = 0x3F0000003F000000;
      a1 = v41;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v57;
      a4 = v45;
      a5 = v49;
      int v21 = v19;
      uint64_t result = v53;
      if (v21)
      {
        xmmword_1004D2D70 = v20;
        __cxa_guard_release(qword_1004D2D80);
        uint16x8_t v11 = v33;
        float32x4_t v8 = v37;
        a1 = v41;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v57;
        a4 = v45;
        a5 = v49;
        uint64_t result = v53;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v50 = a5;
      uint64_t v54 = result;
      uint64_t v46 = a4;
      int v58 = v6;
      __n128 v42 = a1;
      uint16x8_t v34 = v11;
      float32x4_t v38 = v8;
      int8x16_t v28 = v13;
      int8x16_t v30 = v12;
      int v22 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v28;
      int8x16_t v12 = v30;
      uint16x8_t v11 = v34;
      float32x4_t v8 = v38;
      *(void *)&long long v23 = 0x8000000080000000;
      *((void *)&v23 + 1) = 0x8000000080000000;
      a1 = v42;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v58;
      a4 = v46;
      a5 = v50;
      int v24 = v22;
      uint64_t result = v54;
      if (v24)
      {
        xmmword_1004D2D50 = v23;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v28;
        int8x16_t v12 = v30;
        uint16x8_t v11 = v34;
        float32x4_t v8 = v38;
        a1 = v42;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v58;
        a4 = v46;
        a5 = v50;
        uint64_t result = v54;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v51 = a5;
      uint64_t v55 = result;
      uint64_t v47 = a4;
      int v59 = v6;
      __n128 v43 = a1;
      uint16x8_t v35 = v11;
      float32x4_t v39 = v8;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v25 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      uint16x8_t v11 = v35;
      float32x4_t v8 = v39;
      *(void *)&long long v26 = 0x3F0000003F000000;
      *((void *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v43;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v59;
      a4 = v47;
      a5 = v51;
      int v27 = v25;
      uint64_t result = v55;
      if (v27)
      {
        xmmword_1004D2D70 = v26;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        uint16x8_t v11 = v35;
        float32x4_t v8 = v39;
        a1 = v43;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v59;
        a4 = v47;
        a5 = v51;
        uint64_t result = v55;
      }
    }
    int8x16_t v14 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11.i8)), a1.n128_f32[0]));
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v11)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vorrq_s8(vandq_s8(v13, v14), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v15), v10[215])))));
    result += 8;
    ++a4;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024CAB8(__n128 a1, int32x2_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  uint64_t v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int16x8_t v11 = *a4;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      __n128 v40 = a1;
      int16x8_t v32 = v11;
      float32x4_t v36 = v8;
      int v16 = __cxa_guard_acquire(qword_1004D2D60);
      int16x8_t v11 = v32;
      float32x4_t v8 = v36;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      a1 = v40;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v18 = v16;
      uint64_t result = v52;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        int16x8_t v11 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v49 = a5;
      uint64_t v53 = result;
      uint64_t v45 = a4;
      int v57 = v6;
      __n128 v41 = a1;
      int16x8_t v33 = v11;
      float32x4_t v37 = v8;
      int v19 = __cxa_guard_acquire(qword_1004D2D80);
      int16x8_t v11 = v33;
      float32x4_t v8 = v37;
      *(void *)&long long v20 = 0x3F0000003F000000;
      *((void *)&v20 + 1) = 0x3F0000003F000000;
      a1 = v41;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v57;
      a4 = v45;
      a5 = v49;
      int v21 = v19;
      uint64_t result = v53;
      if (v21)
      {
        xmmword_1004D2D70 = v20;
        __cxa_guard_release(qword_1004D2D80);
        int16x8_t v11 = v33;
        float32x4_t v8 = v37;
        a1 = v41;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v57;
        a4 = v45;
        a5 = v49;
        uint64_t result = v53;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v50 = a5;
      uint64_t v54 = result;
      uint64_t v46 = a4;
      int v58 = v6;
      __n128 v42 = a1;
      int16x8_t v34 = v11;
      float32x4_t v38 = v8;
      int8x16_t v28 = v13;
      int8x16_t v30 = v12;
      int v22 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v28;
      int8x16_t v12 = v30;
      int16x8_t v11 = v34;
      float32x4_t v8 = v38;
      *(void *)&long long v23 = 0x8000000080000000;
      *((void *)&v23 + 1) = 0x8000000080000000;
      a1 = v42;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v58;
      a4 = v46;
      a5 = v50;
      int v24 = v22;
      uint64_t result = v54;
      if (v24)
      {
        xmmword_1004D2D50 = v23;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v28;
        int8x16_t v12 = v30;
        int16x8_t v11 = v34;
        float32x4_t v8 = v38;
        a1 = v42;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v58;
        a4 = v46;
        a5 = v50;
        uint64_t result = v54;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v51 = a5;
      uint64_t v55 = result;
      uint64_t v47 = a4;
      int v59 = v6;
      __n128 v43 = a1;
      int16x8_t v35 = v11;
      float32x4_t v39 = v8;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v25 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      int16x8_t v11 = v35;
      float32x4_t v8 = v39;
      *(void *)&long long v26 = 0x3F0000003F000000;
      *((void *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v43;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v59;
      a4 = v47;
      a5 = v51;
      int v27 = v25;
      uint64_t result = v55;
      if (v27)
      {
        xmmword_1004D2D70 = v26;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        int16x8_t v11 = v35;
        float32x4_t v8 = v39;
        a1 = v43;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v59;
        a4 = v47;
        a5 = v51;
        uint64_t result = v55;
      }
    }
    int8x16_t v14 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)), a1.n128_f32[0]));
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v11)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vorrq_s8(vandq_s8(v13, v14), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v15), v10[215])))));
    result += 8;
    ++a4;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024CE18(__n128 a1, int32x2_t a2, uint64_t a3, int32x4_t *a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = a4 + 1;
  uint64_t v10 = (int8x16_t *)&unk_1004D2000;
  int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int32x4_t v13 = v9[-1];
    int32x4_t v12 = *v9;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v58 = result;
      unsigned int v62 = v9;
      uint64_t v50 = a5;
      int v54 = v6;
      __n128 v46 = a1;
      int32x4_t v38 = v12;
      float32x4_t v42 = v8;
      int32x4_t v34 = v13;
      int v18 = __cxa_guard_acquire(qword_1004D2D60);
      int32x4_t v13 = v34;
      int32x4_t v12 = v38;
      *(void *)&long long v19 = 0x8000000080000000;
      *((void *)&v19 + 1) = 0x8000000080000000;
      float32x4_t v8 = v42;
      a1 = v46;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a5 = v50;
      int v20 = v18;
      uint64_t result = v58;
      uint64_t v9 = v62;
      if (v20)
      {
        xmmword_1004D2D50 = v19;
        __cxa_guard_release(qword_1004D2D60);
        int32x4_t v13 = v34;
        int32x4_t v12 = v38;
        float32x4_t v8 = v42;
        a1 = v46;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v58;
        uint64_t v9 = v62;
        int v6 = v54;
        a5 = v50;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v59 = result;
      uint64_t v63 = v9;
      uint64_t v51 = a5;
      int v55 = v6;
      __n128 v47 = a1;
      int32x4_t v39 = v12;
      float32x4_t v43 = v8;
      int32x4_t v35 = v13;
      int v21 = __cxa_guard_acquire(qword_1004D2D80);
      int32x4_t v13 = v35;
      int32x4_t v12 = v39;
      float32x4_t v8 = v43;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v47;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a5 = v51;
      int v23 = v21;
      uint64_t result = v59;
      uint64_t v9 = v63;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        int32x4_t v13 = v35;
        int32x4_t v12 = v39;
        float32x4_t v8 = v43;
        a1 = v47;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v59;
        uint64_t v9 = v63;
        int v6 = v55;
        a5 = v51;
      }
    }
    int8x16_t v14 = v11[215];
    int8x16_t v15 = v10[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v60 = result;
      uint64_t v64 = v9;
      uint64_t v52 = a5;
      int v56 = v6;
      __n128 v48 = a1;
      int32x4_t v40 = v12;
      float32x4_t v44 = v8;
      int8x16_t v32 = v14;
      int32x4_t v36 = v13;
      int8x16_t v30 = v15;
      int v24 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v15 = v30;
      int8x16_t v14 = v32;
      int32x4_t v13 = v36;
      int32x4_t v12 = v40;
      *(void *)&long long v25 = 0x8000000080000000;
      *((void *)&v25 + 1) = 0x8000000080000000;
      float32x4_t v8 = v44;
      a1 = v48;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a5 = v52;
      int v26 = v24;
      uint64_t result = v60;
      uint64_t v9 = v64;
      if (v26)
      {
        xmmword_1004D2D50 = v25;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v15 = v30;
        int8x16_t v14 = v32;
        int32x4_t v13 = v36;
        int32x4_t v12 = v40;
        float32x4_t v8 = v44;
        a1 = v48;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v60;
        uint64_t v9 = v64;
        int v6 = v56;
        a5 = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v61 = result;
      unint64_t v65 = v9;
      uint64_t v53 = a5;
      int v57 = v6;
      __n128 v49 = a1;
      int32x4_t v41 = v12;
      float32x4_t v45 = v8;
      int8x16_t v33 = v14;
      int32x4_t v37 = v13;
      int8x16_t v31 = v15;
      int v27 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v15 = v31;
      int8x16_t v14 = v33;
      int32x4_t v13 = v37;
      int32x4_t v12 = v41;
      float32x4_t v8 = v45;
      *(void *)&long long v28 = 0x3F0000003F000000;
      *((void *)&v28 + 1) = 0x3F0000003F000000;
      a1 = v49;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v57;
      a5 = v53;
      int v29 = v27;
      uint64_t result = v61;
      uint64_t v9 = v65;
      if (v29)
      {
        xmmword_1004D2D70 = v28;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v15 = v31;
        int8x16_t v14 = v33;
        int32x4_t v13 = v37;
        int32x4_t v12 = v41;
        float32x4_t v8 = v45;
        a1 = v49;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v61;
        uint64_t v9 = v65;
        int v6 = v57;
        a5 = v53;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v13), a1.n128_f32[0]));
    int8x16_t v17 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v12), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v15, v16), v14)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v10[213], v17), v11[215])))));
    result += 8;
    v9 += 2;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024D1A4(__n128 a1, int32x2_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = a4 + 1;
  uint64_t v10 = (int8x16_t *)&unk_1004D2000;
  int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float32x4_t v12 = v9[-1];
    float32x4_t v13 = *v9;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v58 = result;
      unsigned int v62 = v9;
      uint64_t v50 = a5;
      int v54 = v6;
      __n128 v46 = a1;
      float32x4_t v38 = v12;
      float32x4_t v42 = v8;
      float32x4_t v34 = v13;
      int v18 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v13 = v34;
      float32x4_t v12 = v38;
      *(void *)&long long v19 = 0x8000000080000000;
      *((void *)&v19 + 1) = 0x8000000080000000;
      float32x4_t v8 = v42;
      a1 = v46;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a5 = v50;
      int v20 = v18;
      uint64_t result = v58;
      uint64_t v9 = v62;
      if (v20)
      {
        xmmword_1004D2D50 = v19;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v13 = v34;
        float32x4_t v12 = v38;
        float32x4_t v8 = v42;
        a1 = v46;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v58;
        uint64_t v9 = v62;
        int v6 = v54;
        a5 = v50;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v59 = result;
      uint64_t v63 = v9;
      uint64_t v51 = a5;
      int v55 = v6;
      __n128 v47 = a1;
      float32x4_t v39 = v12;
      float32x4_t v43 = v8;
      float32x4_t v35 = v13;
      int v21 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v13 = v35;
      float32x4_t v12 = v39;
      float32x4_t v8 = v43;
      a1 = v47;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a5 = v51;
      int v23 = v21;
      uint64_t result = v59;
      uint64_t v9 = v63;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v13 = v35;
        float32x4_t v12 = v39;
        float32x4_t v8 = v43;
        a1 = v47;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v59;
        uint64_t v9 = v63;
        int v6 = v55;
        a5 = v51;
      }
    }
    int8x16_t v14 = v11[215];
    int8x16_t v15 = v10[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v60 = result;
      uint64_t v64 = v9;
      uint64_t v52 = a5;
      int v56 = v6;
      __n128 v48 = a1;
      float32x4_t v40 = v12;
      float32x4_t v44 = v8;
      int8x16_t v32 = v14;
      float32x4_t v36 = v13;
      int8x16_t v30 = v15;
      int v24 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v15 = v30;
      int8x16_t v14 = v32;
      float32x4_t v13 = v36;
      float32x4_t v12 = v40;
      *(void *)&long long v25 = 0x8000000080000000;
      *((void *)&v25 + 1) = 0x8000000080000000;
      float32x4_t v8 = v44;
      a1 = v48;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a5 = v52;
      int v26 = v24;
      uint64_t result = v60;
      uint64_t v9 = v64;
      if (v26)
      {
        xmmword_1004D2D50 = v25;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v15 = v30;
        int8x16_t v14 = v32;
        float32x4_t v13 = v36;
        float32x4_t v12 = v40;
        float32x4_t v8 = v44;
        a1 = v48;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v60;
        uint64_t v9 = v64;
        int v6 = v56;
        a5 = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v61 = result;
      unint64_t v65 = v9;
      uint64_t v53 = a5;
      int v57 = v6;
      __n128 v49 = a1;
      float32x4_t v41 = v12;
      float32x4_t v45 = v8;
      int8x16_t v33 = v14;
      float32x4_t v37 = v13;
      int8x16_t v31 = v15;
      int v27 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v15 = v31;
      int8x16_t v14 = v33;
      float32x4_t v13 = v37;
      float32x4_t v12 = v41;
      float32x4_t v8 = v45;
      a1 = v49;
      *(void *)&long long v28 = 0x3F0000003F000000;
      *((void *)&v28 + 1) = 0x3F0000003F000000;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      uint64_t v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v57;
      a5 = v53;
      int v29 = v27;
      uint64_t result = v61;
      uint64_t v9 = v65;
      if (v29)
      {
        xmmword_1004D2D70 = v28;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v15 = v31;
        int8x16_t v14 = v33;
        float32x4_t v13 = v37;
        float32x4_t v12 = v41;
        float32x4_t v8 = v45;
        a1 = v49;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        uint64_t v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v61;
        uint64_t v9 = v65;
        int v6 = v57;
        a5 = v53;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(v12, a1.n128_f32[0]));
    int8x16_t v17 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(v13, a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v15, v16), v14)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v10[213], v17), v11[215])))));
    result += 8;
    v9 += 2;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024D528(float a1, float a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, float64x2_t *a8, uint64_t a9, int a10)
{
  int v10 = a10 - 8;
  if (a10 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float64x2_t v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2), 0);
  a6.n128_f64[0] = a1;
  float32x4_t v13 = a8 + 2;
  int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
  int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float64x2_t v16 = v13[-2];
    float64x2_t v17 = v13[-1];
    float64x2_t v18 = *v13;
    float64x2_t v19 = v13[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v72 = result;
      double v76 = v13;
      uint64_t v64 = a9;
      int v68 = v10;
      __n128 v56 = a6;
      float64x2_t v60 = v12;
      float64x2_t v48 = v17;
      float64x2_t v52 = v16;
      float64x2_t v40 = v19;
      float64x2_t v44 = v18;
      int v24 = __cxa_guard_acquire(qword_1004D2D60);
      float64x2_t v19 = v40;
      float64x2_t v18 = v44;
      float64x2_t v17 = v48;
      float64x2_t v16 = v52;
      *(void *)&long long v25 = 0x8000000080000000;
      *((void *)&v25 + 1) = 0x8000000080000000;
      a6 = v56;
      float64x2_t v12 = v60;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      int v10 = v68;
      a9 = v64;
      int v26 = v24;
      uint64_t result = v72;
      float32x4_t v13 = v76;
      if (v26)
      {
        xmmword_1004D2D50 = v25;
        __cxa_guard_release(qword_1004D2D60);
        float64x2_t v19 = v40;
        float64x2_t v18 = v44;
        float64x2_t v17 = v48;
        float64x2_t v16 = v52;
        a6 = v56;
        float64x2_t v12 = v60;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v72;
        float32x4_t v13 = v76;
        int v10 = v68;
        a9 = v64;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v73 = result;
      unint64_t v77 = v13;
      uint64_t v65 = a9;
      int v69 = v10;
      __n128 v57 = a6;
      float64x2_t v61 = v12;
      float64x2_t v49 = v17;
      float64x2_t v53 = v16;
      float64x2_t v41 = v19;
      float64x2_t v45 = v18;
      int v27 = __cxa_guard_acquire(qword_1004D2D80);
      float64x2_t v19 = v41;
      float64x2_t v18 = v45;
      float64x2_t v17 = v49;
      float64x2_t v16 = v53;
      a6 = v57;
      float64x2_t v12 = v61;
      *(void *)&long long v28 = 0x3F0000003F000000;
      *((void *)&v28 + 1) = 0x3F0000003F000000;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      int v10 = v69;
      a9 = v65;
      int v29 = v27;
      uint64_t result = v73;
      float32x4_t v13 = v77;
      if (v29)
      {
        xmmword_1004D2D70 = v28;
        __cxa_guard_release(qword_1004D2D80);
        float64x2_t v19 = v41;
        float64x2_t v18 = v45;
        float64x2_t v17 = v49;
        float64x2_t v16 = v53;
        a6 = v57;
        float64x2_t v12 = v61;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v73;
        float32x4_t v13 = v77;
        int v10 = v69;
        a9 = v65;
      }
    }
    int8x16_t v20 = v15[215];
    int8x16_t v21 = v14[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v74 = result;
      uint64_t v78 = v13;
      uint64_t v66 = a9;
      int v70 = v10;
      __n128 v58 = a6;
      float64x2_t v62 = v12;
      float64x2_t v50 = v17;
      float64x2_t v54 = v16;
      float64x2_t v42 = v19;
      float64x2_t v46 = v18;
      int8x16_t v36 = v21;
      int8x16_t v38 = v20;
      int v30 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v21 = v36;
      int8x16_t v20 = v38;
      float64x2_t v19 = v42;
      float64x2_t v18 = v46;
      float64x2_t v17 = v50;
      float64x2_t v16 = v54;
      *(void *)&long long v31 = 0x8000000080000000;
      *((void *)&v31 + 1) = 0x8000000080000000;
      a6 = v58;
      float64x2_t v12 = v62;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      int v10 = v70;
      a9 = v66;
      int v32 = v30;
      uint64_t result = v74;
      float32x4_t v13 = v78;
      if (v32)
      {
        xmmword_1004D2D50 = v31;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v21 = v36;
        int8x16_t v20 = v38;
        float64x2_t v19 = v42;
        float64x2_t v18 = v46;
        float64x2_t v17 = v50;
        float64x2_t v16 = v54;
        a6 = v58;
        float64x2_t v12 = v62;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v74;
        float32x4_t v13 = v78;
        int v10 = v70;
        a9 = v66;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v75 = result;
      int64x2_t v79 = v13;
      uint64_t v67 = a9;
      int v71 = v10;
      __n128 v59 = a6;
      float64x2_t v63 = v12;
      float64x2_t v51 = v17;
      float64x2_t v55 = v16;
      float64x2_t v43 = v19;
      float64x2_t v47 = v18;
      int8x16_t v37 = v21;
      int8x16_t v39 = v20;
      int v33 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v21 = v37;
      int8x16_t v20 = v39;
      float64x2_t v19 = v43;
      float64x2_t v18 = v47;
      float64x2_t v17 = v51;
      float64x2_t v16 = v55;
      a6 = v59;
      float64x2_t v12 = v63;
      *(void *)&long long v34 = 0x3F0000003F000000;
      *((void *)&v34 + 1) = 0x3F0000003F000000;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      int v10 = v71;
      a9 = v67;
      int v35 = v33;
      uint64_t result = v75;
      float32x4_t v13 = v79;
      if (v35)
      {
        xmmword_1004D2D70 = v34;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v21 = v37;
        int8x16_t v20 = v39;
        float64x2_t v19 = v43;
        float64x2_t v18 = v47;
        float64x2_t v17 = v51;
        float64x2_t v16 = v55;
        a6 = v59;
        float64x2_t v12 = v63;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v75;
        float32x4_t v13 = v79;
        int v10 = v71;
        a9 = v67;
      }
    }
    int8x16_t v22 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v16, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v17, a6.n128_f64[0])));
    int8x16_t v23 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v18, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v19, a6.n128_f64[0])));
    *(int8x8_t *)(a9 + result) = vqmovun_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v20)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v23, (float32x4_t)vorrq_s8(vandq_s8(v14[213], v23), v15[215])))));
    result += 8;
    v13 += 4;
  }
  while (v10 >= (int)result);
  return result;
}

uint64_t sub_10024D8D8(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint8x8_t v11 = *(uint8x8_t *)(a4 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v45 = a5;
      uint64_t v49 = result;
      uint64_t v41 = a4;
      int v53 = v6;
      uint8x8_t v57 = v11;
      float32x4_t v33 = v8;
      __n128 v37 = a1;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v8 = v33;
      a1 = v37;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      uint8x8_t v11 = v57;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v53;
      a4 = v41;
      a5 = v45;
      int v19 = v17;
      uint64_t result = v49;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v8 = v33;
        a1 = v37;
        uint8x8_t v11 = v57;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
        uint64_t result = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v46 = a5;
      uint64_t v50 = result;
      uint64_t v42 = a4;
      int v54 = v6;
      uint8x8_t v58 = v11;
      float32x4_t v34 = v8;
      __n128 v38 = a1;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v8 = v34;
      a1 = v38;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      uint8x8_t v11 = v58;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a4 = v42;
      a5 = v46;
      int v22 = v20;
      uint64_t result = v50;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v8 = v34;
        a1 = v38;
        uint8x8_t v11 = v58;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
        uint64_t result = v50;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v47 = a5;
      uint64_t v51 = result;
      uint64_t v43 = a4;
      int v55 = v6;
      uint8x8_t v59 = v11;
      float32x4_t v35 = v8;
      __n128 v39 = a1;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      float32x4_t v8 = v35;
      a1 = v39;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      uint8x8_t v11 = v59;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a4 = v43;
      a5 = v47;
      int v25 = v23;
      uint64_t result = v51;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        uint8x8_t v11 = v59;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
        uint64_t result = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      uint8x8_t v60 = v11;
      float32x4_t v36 = v8;
      __n128 v40 = a1;
      int8x16_t v30 = v13;
      int8x16_t v32 = v12;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v30;
      int8x16_t v12 = v32;
      float32x4_t v8 = v36;
      a1 = v40;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      uint8x8_t v11 = v60;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v28 = v26;
      uint64_t result = v52;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v30;
        int8x16_t v12 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        uint8x8_t v11 = v60;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    uint16x8_t v14 = vmovl_u8(v11);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v14.i8)), a1.n128_f32[0]));
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v14)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v13, v15), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v16), v10[215])))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024DC38(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int8x8_t v11 = *(int8x8_t *)(a4 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v45 = a5;
      uint64_t v49 = result;
      uint64_t v41 = a4;
      int v53 = v6;
      int8x8_t v57 = v11;
      float32x4_t v33 = v8;
      __n128 v37 = a1;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v8 = v33;
      a1 = v37;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      int8x8_t v11 = v57;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v53;
      a4 = v41;
      a5 = v45;
      int v19 = v17;
      uint64_t result = v49;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v8 = v33;
        a1 = v37;
        int8x8_t v11 = v57;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
        uint64_t result = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v46 = a5;
      uint64_t v50 = result;
      uint64_t v42 = a4;
      int v54 = v6;
      int8x8_t v58 = v11;
      float32x4_t v34 = v8;
      __n128 v38 = a1;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v8 = v34;
      a1 = v38;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      int8x8_t v11 = v58;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a4 = v42;
      a5 = v46;
      int v22 = v20;
      uint64_t result = v50;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v8 = v34;
        a1 = v38;
        int8x8_t v11 = v58;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
        uint64_t result = v50;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v47 = a5;
      uint64_t v51 = result;
      uint64_t v43 = a4;
      int v55 = v6;
      int8x8_t v59 = v11;
      float32x4_t v35 = v8;
      __n128 v39 = a1;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      float32x4_t v8 = v35;
      a1 = v39;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      int8x8_t v11 = v59;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a4 = v43;
      a5 = v47;
      int v25 = v23;
      uint64_t result = v51;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        int8x8_t v11 = v59;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
        uint64_t result = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      int8x8_t v60 = v11;
      float32x4_t v36 = v8;
      __n128 v40 = a1;
      int8x16_t v30 = v13;
      int8x16_t v32 = v12;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v30;
      int8x16_t v12 = v32;
      float32x4_t v8 = v36;
      a1 = v40;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      int8x8_t v11 = v60;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v28 = v26;
      uint64_t result = v52;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v30;
        int8x16_t v12 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        int8x8_t v11 = v60;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    int16x8_t v14 = vmovl_s8(v11);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v14.i8)), a1.n128_f32[0]));
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v14)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v13, v15), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v16), v10[215])))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024DF98(__n128 a1, int32x2_t a2, uint64_t a3, uint16x8_t *a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint16x8_t v11 = *a4;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      __n128 v40 = a1;
      uint16x8_t v32 = v11;
      float32x4_t v36 = v8;
      int v16 = __cxa_guard_acquire(qword_1004D2D60);
      uint16x8_t v11 = v32;
      float32x4_t v8 = v36;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      a1 = v40;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v18 = v16;
      uint64_t result = v52;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        uint16x8_t v11 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v49 = a5;
      uint64_t v53 = result;
      uint64_t v45 = a4;
      int v57 = v6;
      __n128 v41 = a1;
      uint16x8_t v33 = v11;
      float32x4_t v37 = v8;
      int v19 = __cxa_guard_acquire(qword_1004D2D80);
      uint16x8_t v11 = v33;
      float32x4_t v8 = v37;
      *(void *)&long long v20 = 0x3F0000003F000000;
      *((void *)&v20 + 1) = 0x3F0000003F000000;
      a1 = v41;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v57;
      a4 = v45;
      a5 = v49;
      int v21 = v19;
      uint64_t result = v53;
      if (v21)
      {
        xmmword_1004D2D70 = v20;
        __cxa_guard_release(qword_1004D2D80);
        uint16x8_t v11 = v33;
        float32x4_t v8 = v37;
        a1 = v41;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v57;
        a4 = v45;
        a5 = v49;
        uint64_t result = v53;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v50 = a5;
      uint64_t v54 = result;
      uint64_t v46 = a4;
      int v58 = v6;
      __n128 v42 = a1;
      uint16x8_t v34 = v11;
      float32x4_t v38 = v8;
      int8x16_t v28 = v13;
      int8x16_t v30 = v12;
      int v22 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v28;
      int8x16_t v12 = v30;
      uint16x8_t v11 = v34;
      float32x4_t v8 = v38;
      *(void *)&long long v23 = 0x8000000080000000;
      *((void *)&v23 + 1) = 0x8000000080000000;
      a1 = v42;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v58;
      a4 = v46;
      a5 = v50;
      int v24 = v22;
      uint64_t result = v54;
      if (v24)
      {
        xmmword_1004D2D50 = v23;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v28;
        int8x16_t v12 = v30;
        uint16x8_t v11 = v34;
        float32x4_t v8 = v38;
        a1 = v42;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v58;
        a4 = v46;
        a5 = v50;
        uint64_t result = v54;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v51 = a5;
      uint64_t v55 = result;
      uint64_t v47 = a4;
      int v59 = v6;
      __n128 v43 = a1;
      uint16x8_t v35 = v11;
      float32x4_t v39 = v8;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v25 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      uint16x8_t v11 = v35;
      float32x4_t v8 = v39;
      *(void *)&long long v26 = 0x3F0000003F000000;
      *((void *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v43;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v59;
      a4 = v47;
      a5 = v51;
      int v27 = v25;
      uint64_t result = v55;
      if (v27)
      {
        xmmword_1004D2D70 = v26;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        uint16x8_t v11 = v35;
        float32x4_t v8 = v39;
        a1 = v43;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v59;
        a4 = v47;
        a5 = v51;
        uint64_t result = v55;
      }
    }
    int8x16_t v14 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11.i8)), a1.n128_f32[0]));
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v11)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vorrq_s8(vandq_s8(v13, v14), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v15), v10[215])))));
    result += 8;
    ++a4;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024E2F8(__n128 a1, int32x2_t a2, uint64_t a3, int16x8_t *a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int16x8_t v11 = *a4;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      __n128 v40 = a1;
      int16x8_t v32 = v11;
      float32x4_t v36 = v8;
      int v16 = __cxa_guard_acquire(qword_1004D2D60);
      int16x8_t v11 = v32;
      float32x4_t v8 = v36;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      a1 = v40;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v18 = v16;
      uint64_t result = v52;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        int16x8_t v11 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v49 = a5;
      uint64_t v53 = result;
      uint64_t v45 = a4;
      int v57 = v6;
      __n128 v41 = a1;
      int16x8_t v33 = v11;
      float32x4_t v37 = v8;
      int v19 = __cxa_guard_acquire(qword_1004D2D80);
      int16x8_t v11 = v33;
      float32x4_t v8 = v37;
      *(void *)&long long v20 = 0x3F0000003F000000;
      *((void *)&v20 + 1) = 0x3F0000003F000000;
      a1 = v41;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v57;
      a4 = v45;
      a5 = v49;
      int v21 = v19;
      uint64_t result = v53;
      if (v21)
      {
        xmmword_1004D2D70 = v20;
        __cxa_guard_release(qword_1004D2D80);
        int16x8_t v11 = v33;
        float32x4_t v8 = v37;
        a1 = v41;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v57;
        a4 = v45;
        a5 = v49;
        uint64_t result = v53;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v50 = a5;
      uint64_t v54 = result;
      uint64_t v46 = a4;
      int v58 = v6;
      __n128 v42 = a1;
      int16x8_t v34 = v11;
      float32x4_t v38 = v8;
      int8x16_t v28 = v13;
      int8x16_t v30 = v12;
      int v22 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v28;
      int8x16_t v12 = v30;
      int16x8_t v11 = v34;
      float32x4_t v8 = v38;
      *(void *)&long long v23 = 0x8000000080000000;
      *((void *)&v23 + 1) = 0x8000000080000000;
      a1 = v42;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v58;
      a4 = v46;
      a5 = v50;
      int v24 = v22;
      uint64_t result = v54;
      if (v24)
      {
        xmmword_1004D2D50 = v23;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v28;
        int8x16_t v12 = v30;
        int16x8_t v11 = v34;
        float32x4_t v8 = v38;
        a1 = v42;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v58;
        a4 = v46;
        a5 = v50;
        uint64_t result = v54;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v51 = a5;
      uint64_t v55 = result;
      uint64_t v47 = a4;
      int v59 = v6;
      __n128 v43 = a1;
      int16x8_t v35 = v11;
      float32x4_t v39 = v8;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v25 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      int16x8_t v11 = v35;
      float32x4_t v8 = v39;
      *(void *)&long long v26 = 0x3F0000003F000000;
      *((void *)&v26 + 1) = 0x3F0000003F000000;
      a1 = v43;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v59;
      a4 = v47;
      a5 = v51;
      int v27 = v25;
      uint64_t result = v55;
      if (v27)
      {
        xmmword_1004D2D70 = v26;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        int16x8_t v11 = v35;
        float32x4_t v8 = v39;
        a1 = v43;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v59;
        a4 = v47;
        a5 = v51;
        uint64_t result = v55;
      }
    }
    int8x16_t v14 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)), a1.n128_f32[0]));
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v11)), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vorrq_s8(vandq_s8(v13, v14), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v15), v10[215])))));
    result += 8;
    ++a4;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024E658(__n128 a1, int32x2_t a2, uint64_t a3, int32x4_t *a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = a4 + 1;
  int v10 = (int8x16_t *)&unk_1004D2000;
  int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int32x4_t v13 = v9[-1];
    int32x4_t v12 = *v9;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v58 = result;
      float64x2_t v62 = v9;
      uint64_t v50 = a5;
      int v54 = v6;
      __n128 v46 = a1;
      int32x4_t v38 = v12;
      float32x4_t v42 = v8;
      int32x4_t v34 = v13;
      int v18 = __cxa_guard_acquire(qword_1004D2D60);
      int32x4_t v13 = v34;
      int32x4_t v12 = v38;
      *(void *)&long long v19 = 0x8000000080000000;
      *((void *)&v19 + 1) = 0x8000000080000000;
      float32x4_t v8 = v42;
      a1 = v46;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a5 = v50;
      int v20 = v18;
      uint64_t result = v58;
      uint64_t v9 = v62;
      if (v20)
      {
        xmmword_1004D2D50 = v19;
        __cxa_guard_release(qword_1004D2D60);
        int32x4_t v13 = v34;
        int32x4_t v12 = v38;
        float32x4_t v8 = v42;
        a1 = v46;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v58;
        uint64_t v9 = v62;
        int v6 = v54;
        a5 = v50;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v59 = result;
      float64x2_t v63 = v9;
      uint64_t v51 = a5;
      int v55 = v6;
      __n128 v47 = a1;
      int32x4_t v39 = v12;
      float32x4_t v43 = v8;
      int32x4_t v35 = v13;
      int v21 = __cxa_guard_acquire(qword_1004D2D80);
      int32x4_t v13 = v35;
      int32x4_t v12 = v39;
      float32x4_t v8 = v43;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v47;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a5 = v51;
      int v23 = v21;
      uint64_t result = v59;
      uint64_t v9 = v63;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        int32x4_t v13 = v35;
        int32x4_t v12 = v39;
        float32x4_t v8 = v43;
        a1 = v47;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v59;
        uint64_t v9 = v63;
        int v6 = v55;
        a5 = v51;
      }
    }
    int8x16_t v14 = v11[215];
    int8x16_t v15 = v10[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v60 = result;
      uint64_t v64 = v9;
      uint64_t v52 = a5;
      int v56 = v6;
      __n128 v48 = a1;
      int32x4_t v40 = v12;
      float32x4_t v44 = v8;
      int8x16_t v32 = v14;
      int32x4_t v36 = v13;
      int8x16_t v30 = v15;
      int v24 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v15 = v30;
      int8x16_t v14 = v32;
      int32x4_t v13 = v36;
      int32x4_t v12 = v40;
      *(void *)&long long v25 = 0x8000000080000000;
      *((void *)&v25 + 1) = 0x8000000080000000;
      float32x4_t v8 = v44;
      a1 = v48;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a5 = v52;
      int v26 = v24;
      uint64_t result = v60;
      uint64_t v9 = v64;
      if (v26)
      {
        xmmword_1004D2D50 = v25;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v15 = v30;
        int8x16_t v14 = v32;
        int32x4_t v13 = v36;
        int32x4_t v12 = v40;
        float32x4_t v8 = v44;
        a1 = v48;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v60;
        uint64_t v9 = v64;
        int v6 = v56;
        a5 = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v61 = result;
      uint64_t v65 = v9;
      uint64_t v53 = a5;
      int v57 = v6;
      __n128 v49 = a1;
      int32x4_t v41 = v12;
      float32x4_t v45 = v8;
      int8x16_t v33 = v14;
      int32x4_t v37 = v13;
      int8x16_t v31 = v15;
      int v27 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v15 = v31;
      int8x16_t v14 = v33;
      int32x4_t v13 = v37;
      int32x4_t v12 = v41;
      float32x4_t v8 = v45;
      *(void *)&long long v28 = 0x3F0000003F000000;
      *((void *)&v28 + 1) = 0x3F0000003F000000;
      a1 = v49;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v57;
      a5 = v53;
      int v29 = v27;
      uint64_t result = v61;
      uint64_t v9 = v65;
      if (v29)
      {
        xmmword_1004D2D70 = v28;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v15 = v31;
        int8x16_t v14 = v33;
        int32x4_t v13 = v37;
        int32x4_t v12 = v41;
        float32x4_t v8 = v45;
        a1 = v49;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v61;
        uint64_t v9 = v65;
        int v6 = v57;
        a5 = v53;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v13), a1.n128_f32[0]));
    int8x16_t v17 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v12), a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v15, v16), v14)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v10[213], v17), v11[215])))));
    result += 8;
    v9 += 2;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024E9E4(__n128 a1, int32x2_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = a4 + 1;
  int v10 = (int8x16_t *)&unk_1004D2000;
  int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float32x4_t v12 = v9[-1];
    float32x4_t v13 = *v9;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v58 = result;
      float64x2_t v62 = v9;
      uint64_t v50 = a5;
      int v54 = v6;
      __n128 v46 = a1;
      float32x4_t v38 = v12;
      float32x4_t v42 = v8;
      float32x4_t v34 = v13;
      int v18 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v13 = v34;
      float32x4_t v12 = v38;
      *(void *)&long long v19 = 0x8000000080000000;
      *((void *)&v19 + 1) = 0x8000000080000000;
      float32x4_t v8 = v42;
      a1 = v46;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a5 = v50;
      int v20 = v18;
      uint64_t result = v58;
      uint64_t v9 = v62;
      if (v20)
      {
        xmmword_1004D2D50 = v19;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v13 = v34;
        float32x4_t v12 = v38;
        float32x4_t v8 = v42;
        a1 = v46;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v58;
        uint64_t v9 = v62;
        int v6 = v54;
        a5 = v50;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v59 = result;
      float64x2_t v63 = v9;
      uint64_t v51 = a5;
      int v55 = v6;
      __n128 v47 = a1;
      float32x4_t v39 = v12;
      float32x4_t v43 = v8;
      float32x4_t v35 = v13;
      int v21 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v13 = v35;
      float32x4_t v12 = v39;
      float32x4_t v8 = v43;
      a1 = v47;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a5 = v51;
      int v23 = v21;
      uint64_t result = v59;
      uint64_t v9 = v63;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v13 = v35;
        float32x4_t v12 = v39;
        float32x4_t v8 = v43;
        a1 = v47;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v59;
        uint64_t v9 = v63;
        int v6 = v55;
        a5 = v51;
      }
    }
    int8x16_t v14 = v11[215];
    int8x16_t v15 = v10[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v60 = result;
      uint64_t v64 = v9;
      uint64_t v52 = a5;
      int v56 = v6;
      __n128 v48 = a1;
      float32x4_t v40 = v12;
      float32x4_t v44 = v8;
      int8x16_t v32 = v14;
      float32x4_t v36 = v13;
      int8x16_t v30 = v15;
      int v24 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v15 = v30;
      int8x16_t v14 = v32;
      float32x4_t v13 = v36;
      float32x4_t v12 = v40;
      *(void *)&long long v25 = 0x8000000080000000;
      *((void *)&v25 + 1) = 0x8000000080000000;
      float32x4_t v8 = v44;
      a1 = v48;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a5 = v52;
      int v26 = v24;
      uint64_t result = v60;
      uint64_t v9 = v64;
      if (v26)
      {
        xmmword_1004D2D50 = v25;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v15 = v30;
        int8x16_t v14 = v32;
        float32x4_t v13 = v36;
        float32x4_t v12 = v40;
        float32x4_t v8 = v44;
        a1 = v48;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v60;
        uint64_t v9 = v64;
        int v6 = v56;
        a5 = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v61 = result;
      uint64_t v65 = v9;
      uint64_t v53 = a5;
      int v57 = v6;
      __n128 v49 = a1;
      float32x4_t v41 = v12;
      float32x4_t v45 = v8;
      int8x16_t v33 = v14;
      float32x4_t v37 = v13;
      int8x16_t v31 = v15;
      int v27 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v15 = v31;
      int8x16_t v14 = v33;
      float32x4_t v13 = v37;
      float32x4_t v12 = v41;
      float32x4_t v8 = v45;
      a1 = v49;
      *(void *)&long long v28 = 0x3F0000003F000000;
      *((void *)&v28 + 1) = 0x3F0000003F000000;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      int v6 = v57;
      a5 = v53;
      int v29 = v27;
      uint64_t result = v61;
      uint64_t v9 = v65;
      if (v29)
      {
        xmmword_1004D2D70 = v28;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v15 = v31;
        int8x16_t v14 = v33;
        float32x4_t v13 = v37;
        float32x4_t v12 = v41;
        float32x4_t v8 = v45;
        a1 = v49;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v61;
        uint64_t v9 = v65;
        int v6 = v57;
        a5 = v53;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(v12, a1.n128_f32[0]));
    int8x16_t v17 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(v13, a1.n128_f32[0]));
    *(int8x8_t *)(a5 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v15, v16), v14)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v10[213], v17), v11[215])))));
    result += 8;
    v9 += 2;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024ED68(float a1, float a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, float64x2_t *a8, uint64_t a9, int a10)
{
  int v10 = a10 - 8;
  if (a10 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float64x2_t v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2), 0);
  a6.n128_f64[0] = a1;
  float32x4_t v13 = a8 + 2;
  int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
  int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float64x2_t v16 = v13[-2];
    float64x2_t v17 = v13[-1];
    float64x2_t v18 = *v13;
    float64x2_t v19 = v13[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v72 = result;
      double v76 = v13;
      uint64_t v64 = a9;
      int v68 = v10;
      __n128 v56 = a6;
      float64x2_t v60 = v12;
      float64x2_t v48 = v17;
      float64x2_t v52 = v16;
      float64x2_t v40 = v19;
      float64x2_t v44 = v18;
      int v24 = __cxa_guard_acquire(qword_1004D2D60);
      float64x2_t v19 = v40;
      float64x2_t v18 = v44;
      float64x2_t v17 = v48;
      float64x2_t v16 = v52;
      *(void *)&long long v25 = 0x8000000080000000;
      *((void *)&v25 + 1) = 0x8000000080000000;
      a6 = v56;
      float64x2_t v12 = v60;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      int v10 = v68;
      a9 = v64;
      int v26 = v24;
      uint64_t result = v72;
      float32x4_t v13 = v76;
      if (v26)
      {
        xmmword_1004D2D50 = v25;
        __cxa_guard_release(qword_1004D2D60);
        float64x2_t v19 = v40;
        float64x2_t v18 = v44;
        float64x2_t v17 = v48;
        float64x2_t v16 = v52;
        a6 = v56;
        float64x2_t v12 = v60;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v72;
        float32x4_t v13 = v76;
        int v10 = v68;
        a9 = v64;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v73 = result;
      unint64_t v77 = v13;
      uint64_t v65 = a9;
      int v69 = v10;
      __n128 v57 = a6;
      float64x2_t v61 = v12;
      float64x2_t v49 = v17;
      float64x2_t v53 = v16;
      float64x2_t v41 = v19;
      float64x2_t v45 = v18;
      int v27 = __cxa_guard_acquire(qword_1004D2D80);
      float64x2_t v19 = v41;
      float64x2_t v18 = v45;
      float64x2_t v17 = v49;
      float64x2_t v16 = v53;
      a6 = v57;
      float64x2_t v12 = v61;
      *(void *)&long long v28 = 0x3F0000003F000000;
      *((void *)&v28 + 1) = 0x3F0000003F000000;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      int v10 = v69;
      a9 = v65;
      int v29 = v27;
      uint64_t result = v73;
      float32x4_t v13 = v77;
      if (v29)
      {
        xmmword_1004D2D70 = v28;
        __cxa_guard_release(qword_1004D2D80);
        float64x2_t v19 = v41;
        float64x2_t v18 = v45;
        float64x2_t v17 = v49;
        float64x2_t v16 = v53;
        a6 = v57;
        float64x2_t v12 = v61;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v73;
        float32x4_t v13 = v77;
        int v10 = v69;
        a9 = v65;
      }
    }
    int8x16_t v20 = v15[215];
    int8x16_t v21 = v14[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v74 = result;
      uint64_t v78 = v13;
      uint64_t v66 = a9;
      int v70 = v10;
      __n128 v58 = a6;
      float64x2_t v62 = v12;
      float64x2_t v50 = v17;
      float64x2_t v54 = v16;
      float64x2_t v42 = v19;
      float64x2_t v46 = v18;
      int8x16_t v36 = v21;
      int8x16_t v38 = v20;
      int v30 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v21 = v36;
      int8x16_t v20 = v38;
      float64x2_t v19 = v42;
      float64x2_t v18 = v46;
      float64x2_t v17 = v50;
      float64x2_t v16 = v54;
      *(void *)&long long v31 = 0x8000000080000000;
      *((void *)&v31 + 1) = 0x8000000080000000;
      a6 = v58;
      float64x2_t v12 = v62;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      int v10 = v70;
      a9 = v66;
      int v32 = v30;
      uint64_t result = v74;
      float32x4_t v13 = v78;
      if (v32)
      {
        xmmword_1004D2D50 = v31;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v21 = v36;
        int8x16_t v20 = v38;
        float64x2_t v19 = v42;
        float64x2_t v18 = v46;
        float64x2_t v17 = v50;
        float64x2_t v16 = v54;
        a6 = v58;
        float64x2_t v12 = v62;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v74;
        float32x4_t v13 = v78;
        int v10 = v70;
        a9 = v66;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v75 = result;
      int64x2_t v79 = v13;
      uint64_t v67 = a9;
      int v71 = v10;
      __n128 v59 = a6;
      float64x2_t v63 = v12;
      float64x2_t v51 = v17;
      float64x2_t v55 = v16;
      float64x2_t v43 = v19;
      float64x2_t v47 = v18;
      int8x16_t v37 = v21;
      int8x16_t v39 = v20;
      int v33 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v21 = v37;
      int8x16_t v20 = v39;
      float64x2_t v19 = v43;
      float64x2_t v18 = v47;
      float64x2_t v17 = v51;
      float64x2_t v16 = v55;
      a6 = v59;
      float64x2_t v12 = v63;
      *(void *)&long long v34 = 0x3F0000003F000000;
      *((void *)&v34 + 1) = 0x3F0000003F000000;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      int v10 = v71;
      a9 = v67;
      int v35 = v33;
      uint64_t result = v75;
      float32x4_t v13 = v79;
      if (v35)
      {
        xmmword_1004D2D70 = v34;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v21 = v37;
        int8x16_t v20 = v39;
        float64x2_t v19 = v43;
        float64x2_t v18 = v47;
        float64x2_t v17 = v51;
        float64x2_t v16 = v55;
        a6 = v59;
        float64x2_t v12 = v63;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v75;
        float32x4_t v13 = v79;
        int v10 = v71;
        a9 = v67;
      }
    }
    int8x16_t v22 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v16, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v17, a6.n128_f64[0])));
    int8x16_t v23 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v18, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v19, a6.n128_f64[0])));
    *(int8x8_t *)(a9 + result) = vqmovn_s16(vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v20)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v23, (float32x4_t)vorrq_s8(vandq_s8(v14[213], v23), v15[215])))));
    result += 8;
    v13 += 4;
  }
  while (v10 >= (int)result);
  return result;
}

uint64_t sub_10024F118(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint8x8_t v11 = *(uint8x8_t *)(a4 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v45 = a5;
      uint64_t v49 = result;
      uint64_t v41 = a4;
      int v53 = v6;
      uint8x8_t v57 = v11;
      float32x4_t v33 = v8;
      __n128 v37 = a1;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v8 = v33;
      a1 = v37;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      uint8x8_t v11 = v57;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v53;
      a4 = v41;
      a5 = v45;
      int v19 = v17;
      uint64_t result = v49;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v8 = v33;
        a1 = v37;
        uint8x8_t v11 = v57;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
        uint64_t result = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v46 = a5;
      uint64_t v50 = result;
      uint64_t v42 = a4;
      int v54 = v6;
      uint8x8_t v58 = v11;
      float32x4_t v34 = v8;
      __n128 v38 = a1;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v8 = v34;
      a1 = v38;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      uint8x8_t v11 = v58;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a4 = v42;
      a5 = v46;
      int v22 = v20;
      uint64_t result = v50;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v8 = v34;
        a1 = v38;
        uint8x8_t v11 = v58;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
        uint64_t result = v50;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v47 = a5;
      uint64_t v51 = result;
      uint64_t v43 = a4;
      int v55 = v6;
      uint8x8_t v59 = v11;
      float32x4_t v35 = v8;
      __n128 v39 = a1;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      float32x4_t v8 = v35;
      a1 = v39;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      uint8x8_t v11 = v59;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a4 = v43;
      a5 = v47;
      int v25 = v23;
      uint64_t result = v51;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        uint8x8_t v11 = v59;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
        uint64_t result = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      uint8x8_t v60 = v11;
      float32x4_t v36 = v8;
      __n128 v40 = a1;
      int8x16_t v30 = v13;
      int8x16_t v32 = v12;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v30;
      int8x16_t v12 = v32;
      float32x4_t v8 = v36;
      a1 = v40;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      uint8x8_t v11 = v60;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v28 = v26;
      uint64_t result = v52;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v30;
        int8x16_t v12 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        uint8x8_t v11 = v60;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    uint16x8_t v14 = vmovl_u8(v11);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v14.i8)), a1.n128_f32[0]));
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v14)), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v13, v15), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v16), v10[215]))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024F474(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int8x8_t v11 = *(int8x8_t *)(a4 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v45 = a5;
      uint64_t v49 = result;
      uint64_t v41 = a4;
      int v53 = v6;
      int8x8_t v57 = v11;
      float32x4_t v33 = v8;
      __n128 v37 = a1;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v8 = v33;
      a1 = v37;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      int8x8_t v11 = v57;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v53;
      a4 = v41;
      a5 = v45;
      int v19 = v17;
      uint64_t result = v49;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v8 = v33;
        a1 = v37;
        int8x8_t v11 = v57;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
        uint64_t result = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v46 = a5;
      uint64_t v50 = result;
      uint64_t v42 = a4;
      int v54 = v6;
      int8x8_t v58 = v11;
      float32x4_t v34 = v8;
      __n128 v38 = a1;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v8 = v34;
      a1 = v38;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      int8x8_t v11 = v58;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a4 = v42;
      a5 = v46;
      int v22 = v20;
      uint64_t result = v50;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v8 = v34;
        a1 = v38;
        int8x8_t v11 = v58;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
        uint64_t result = v50;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v47 = a5;
      uint64_t v51 = result;
      uint64_t v43 = a4;
      int v55 = v6;
      int8x8_t v59 = v11;
      float32x4_t v35 = v8;
      __n128 v39 = a1;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      float32x4_t v8 = v35;
      a1 = v39;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      int8x8_t v11 = v59;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a4 = v43;
      a5 = v47;
      int v25 = v23;
      uint64_t result = v51;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        int8x8_t v11 = v59;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
        uint64_t result = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      int8x8_t v60 = v11;
      float32x4_t v36 = v8;
      __n128 v40 = a1;
      int8x16_t v30 = v13;
      int8x16_t v32 = v12;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v30;
      int8x16_t v12 = v32;
      float32x4_t v8 = v36;
      a1 = v40;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      int8x8_t v11 = v60;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v28 = v26;
      uint64_t result = v52;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v30;
        int8x16_t v12 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        int8x8_t v11 = v60;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    int16x8_t v14 = vmovl_s8(v11);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v14.i8)), a1.n128_f32[0]));
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v14)), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v13, v15), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v16), v10[215]))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024F7D0(__n128 a1, int32x2_t a2, uint64_t a3, uint16x8_t *a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint16x8_t v11 = *a4;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v48 = result;
      int v52 = v6;
      __n128 v40 = a4;
      uint64_t v44 = a5;
      __n128 v36 = a1;
      uint16x8_t v28 = v11;
      float32x4_t v32 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      uint16x8_t v11 = v28;
      float32x4_t v8 = v32;
      *(void *)&long long v16 = 0x8000000080000000;
      *((void *)&v16 + 1) = 0x8000000080000000;
      a1 = v36;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v40;
      a5 = v44;
      int v17 = result;
      LODWORD(result) = v48;
      int v6 = v52;
      if (v17)
      {
        xmmword_1004D2D50 = v16;
        __cxa_guard_release(qword_1004D2D60);
        uint16x8_t v11 = v28;
        float32x4_t v8 = v32;
        a1 = v36;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v48;
        int v6 = v52;
        a4 = v40;
        a5 = v44;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v49 = result;
      int v53 = v6;
      uint64_t v41 = a4;
      float64x2_t v45 = a5;
      __n128 v37 = a1;
      uint16x8_t v29 = v11;
      float32x4_t v33 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      uint16x8_t v11 = v29;
      float32x4_t v8 = v33;
      *(void *)&long long v18 = 0x3F0000003F000000;
      *((void *)&v18 + 1) = 0x3F0000003F000000;
      a1 = v37;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v41;
      a5 = v45;
      int v19 = result;
      LODWORD(result) = v49;
      int v6 = v53;
      if (v19)
      {
        xmmword_1004D2D70 = v18;
        __cxa_guard_release(qword_1004D2D80);
        uint16x8_t v11 = v29;
        float32x4_t v8 = v33;
        a1 = v37;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v49;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v50 = result;
      int v54 = v6;
      uint64_t v42 = a4;
      float64x2_t v46 = a5;
      __n128 v38 = a1;
      uint16x8_t v30 = v11;
      float32x4_t v34 = v8;
      int8x16_t v24 = v13;
      int8x16_t v26 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v24;
      int8x16_t v12 = v26;
      uint16x8_t v11 = v30;
      float32x4_t v8 = v34;
      *(void *)&long long v20 = 0x8000000080000000;
      *((void *)&v20 + 1) = 0x8000000080000000;
      a1 = v38;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v42;
      a5 = v46;
      int v21 = result;
      LODWORD(result) = v50;
      int v6 = v54;
      if (v21)
      {
        xmmword_1004D2D50 = v20;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v24;
        int8x16_t v12 = v26;
        uint16x8_t v11 = v30;
        float32x4_t v8 = v34;
        a1 = v38;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v50;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v51 = result;
      int v55 = v6;
      uint64_t v43 = a4;
      float64x2_t v47 = a5;
      __n128 v39 = a1;
      uint16x8_t v31 = v11;
      float32x4_t v35 = v8;
      int8x16_t v25 = v13;
      int8x16_t v27 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v25;
      int8x16_t v12 = v27;
      uint16x8_t v11 = v31;
      float32x4_t v8 = v35;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v39;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v43;
      a5 = v47;
      int v23 = result;
      LODWORD(result) = v51;
      int v6 = v55;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v25;
        int8x16_t v12 = v27;
        uint16x8_t v11 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v51;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
      }
    }
    int8x16_t v14 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11.i8)), a1.n128_f32[0]));
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v11)), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vorrq_s8(vandq_s8(v13, v14), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v15), v10[215]))));
    ++a4;
    uint64_t result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024FAFC(__n128 a1, int32x2_t a2, uint64_t a3, int16x8_t *a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int16x8_t v11 = *a4;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v48 = result;
      int v52 = v6;
      __n128 v40 = a4;
      uint64_t v44 = a5;
      __n128 v36 = a1;
      int16x8_t v28 = v11;
      float32x4_t v32 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int16x8_t v11 = v28;
      float32x4_t v8 = v32;
      *(void *)&long long v16 = 0x8000000080000000;
      *((void *)&v16 + 1) = 0x8000000080000000;
      a1 = v36;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v40;
      a5 = v44;
      int v17 = result;
      LODWORD(result) = v48;
      int v6 = v52;
      if (v17)
      {
        xmmword_1004D2D50 = v16;
        __cxa_guard_release(qword_1004D2D60);
        int16x8_t v11 = v28;
        float32x4_t v8 = v32;
        a1 = v36;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v48;
        int v6 = v52;
        a4 = v40;
        a5 = v44;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v49 = result;
      int v53 = v6;
      uint64_t v41 = a4;
      float64x2_t v45 = a5;
      __n128 v37 = a1;
      int16x8_t v29 = v11;
      float32x4_t v33 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int16x8_t v11 = v29;
      float32x4_t v8 = v33;
      *(void *)&long long v18 = 0x3F0000003F000000;
      *((void *)&v18 + 1) = 0x3F0000003F000000;
      a1 = v37;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v41;
      a5 = v45;
      int v19 = result;
      LODWORD(result) = v49;
      int v6 = v53;
      if (v19)
      {
        xmmword_1004D2D70 = v18;
        __cxa_guard_release(qword_1004D2D80);
        int16x8_t v11 = v29;
        float32x4_t v8 = v33;
        a1 = v37;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v49;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v50 = result;
      int v54 = v6;
      uint64_t v42 = a4;
      float64x2_t v46 = a5;
      __n128 v38 = a1;
      int16x8_t v30 = v11;
      float32x4_t v34 = v8;
      int8x16_t v24 = v13;
      int8x16_t v26 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v24;
      int8x16_t v12 = v26;
      int16x8_t v11 = v30;
      float32x4_t v8 = v34;
      *(void *)&long long v20 = 0x8000000080000000;
      *((void *)&v20 + 1) = 0x8000000080000000;
      a1 = v38;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v42;
      a5 = v46;
      int v21 = result;
      LODWORD(result) = v50;
      int v6 = v54;
      if (v21)
      {
        xmmword_1004D2D50 = v20;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v24;
        int8x16_t v12 = v26;
        int16x8_t v11 = v30;
        float32x4_t v8 = v34;
        a1 = v38;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v50;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v51 = result;
      int v55 = v6;
      uint64_t v43 = a4;
      float64x2_t v47 = a5;
      __n128 v39 = a1;
      int16x8_t v31 = v11;
      float32x4_t v35 = v8;
      int8x16_t v25 = v13;
      int8x16_t v27 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v25;
      int8x16_t v12 = v27;
      int16x8_t v11 = v31;
      float32x4_t v8 = v35;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v39;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v43;
      a5 = v47;
      int v23 = result;
      LODWORD(result) = v51;
      int v6 = v55;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v25;
        int8x16_t v12 = v27;
        int16x8_t v11 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v51;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
      }
    }
    int8x16_t v14 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)), a1.n128_f32[0]));
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v11)), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vorrq_s8(vandq_s8(v13, v14), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v15), v10[215]))));
    ++a4;
    uint64_t result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10024FE28(__n128 a1, int32x2_t a2, uint64_t a3, int32x4_t *a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = a4 + 1;
  int v10 = (int8x16_t *)&unk_1004D2000;
  int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int32x4_t v13 = v9[-1];
    int32x4_t v12 = *v9;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v54 = result;
      int v50 = a5;
      int v46 = v6;
      int8x8_t v58 = v9;
      __n128 v42 = a1;
      int32x4_t v34 = v12;
      float32x4_t v38 = v8;
      int32x4_t v30 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int32x4_t v13 = v30;
      int32x4_t v12 = v34;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      float32x4_t v8 = v38;
      a1 = v42;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v58;
      int v6 = v46;
      a5 = v50;
      int v19 = result;
      LODWORD(result) = v54;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        int32x4_t v13 = v30;
        int32x4_t v12 = v34;
        float32x4_t v8 = v38;
        a1 = v42;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v58;
        int v6 = v46;
        LODWORD(result) = v54;
        a5 = v50;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v55 = result;
      int v51 = a5;
      int v47 = v6;
      int8x8_t v59 = v9;
      __n128 v43 = a1;
      int32x4_t v35 = v12;
      float32x4_t v39 = v8;
      int32x4_t v31 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int32x4_t v13 = v31;
      int32x4_t v12 = v35;
      float32x4_t v8 = v39;
      *(void *)&long long v20 = 0x3F0000003F000000;
      *((void *)&v20 + 1) = 0x3F0000003F000000;
      a1 = v43;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v59;
      int v6 = v47;
      a5 = v51;
      int v21 = result;
      LODWORD(result) = v55;
      if (v21)
      {
        xmmword_1004D2D70 = v20;
        __cxa_guard_release(qword_1004D2D80);
        int32x4_t v13 = v31;
        int32x4_t v12 = v35;
        float32x4_t v8 = v39;
        a1 = v43;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v59;
        int v6 = v47;
        LODWORD(result) = v55;
        a5 = v51;
      }
    }
    int8x16_t v14 = v11[215];
    int8x16_t v15 = v10[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v56 = result;
      int v52 = a5;
      int v48 = v6;
      int8x8_t v60 = v9;
      __n128 v44 = a1;
      int32x4_t v36 = v12;
      float32x4_t v40 = v8;
      int8x16_t v28 = v14;
      int32x4_t v32 = v13;
      int8x16_t v26 = v15;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v15 = v26;
      int8x16_t v14 = v28;
      int32x4_t v13 = v32;
      int32x4_t v12 = v36;
      *(void *)&long long v22 = 0x8000000080000000;
      *((void *)&v22 + 1) = 0x8000000080000000;
      float32x4_t v8 = v40;
      a1 = v44;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v60;
      int v6 = v48;
      a5 = v52;
      int v23 = result;
      LODWORD(result) = v56;
      if (v23)
      {
        xmmword_1004D2D50 = v22;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v15 = v26;
        int8x16_t v14 = v28;
        int32x4_t v13 = v32;
        int32x4_t v12 = v36;
        float32x4_t v8 = v40;
        a1 = v44;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v60;
        int v6 = v48;
        LODWORD(result) = v56;
        a5 = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v57 = result;
      int v53 = a5;
      int v49 = v6;
      float64x2_t v61 = v9;
      __n128 v45 = a1;
      int32x4_t v37 = v12;
      float32x4_t v41 = v8;
      int8x16_t v29 = v14;
      int32x4_t v33 = v13;
      int8x16_t v27 = v15;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v15 = v27;
      int8x16_t v14 = v29;
      int32x4_t v13 = v33;
      int32x4_t v12 = v37;
      float32x4_t v8 = v41;
      *(void *)&long long v24 = 0x3F0000003F000000;
      *((void *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v45;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v61;
      int v6 = v49;
      a5 = v53;
      int v25 = result;
      LODWORD(result) = v57;
      if (v25)
      {
        xmmword_1004D2D70 = v24;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v15 = v27;
        int8x16_t v14 = v29;
        int32x4_t v13 = v33;
        int32x4_t v12 = v37;
        float32x4_t v8 = v41;
        a1 = v45;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v61;
        int v6 = v49;
        LODWORD(result) = v57;
        a5 = v53;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v13), a1.n128_f32[0]));
    int8x16_t v17 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v12), a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v15, v16), v14)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v10[213], v17), v11[215]))));
    v9 += 2;
    uint64_t result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_1002501E0(__n128 a1, int32x2_t a2, uint64_t a3, float32x4_t *a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = a4 + 1;
  int v10 = (int8x16_t *)&unk_1004D2000;
  int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float32x4_t v12 = v9[-1];
    float32x4_t v13 = *v9;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v54 = result;
      int v50 = a5;
      int v46 = v6;
      int8x8_t v58 = v9;
      __n128 v42 = a1;
      float32x4_t v34 = v12;
      float32x4_t v38 = v8;
      float32x4_t v30 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v13 = v30;
      float32x4_t v12 = v34;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      float32x4_t v8 = v38;
      a1 = v42;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v58;
      int v6 = v46;
      a5 = v50;
      int v19 = result;
      LODWORD(result) = v54;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v13 = v30;
        float32x4_t v12 = v34;
        float32x4_t v8 = v38;
        a1 = v42;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v58;
        int v6 = v46;
        LODWORD(result) = v54;
        a5 = v50;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v55 = result;
      int v51 = a5;
      int v47 = v6;
      int8x8_t v59 = v9;
      __n128 v43 = a1;
      float32x4_t v35 = v12;
      float32x4_t v39 = v8;
      float32x4_t v31 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v13 = v31;
      float32x4_t v12 = v35;
      float32x4_t v8 = v39;
      *(void *)&long long v20 = 0x3F0000003F000000;
      *((void *)&v20 + 1) = 0x3F0000003F000000;
      a1 = v43;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v59;
      int v6 = v47;
      a5 = v51;
      int v21 = result;
      LODWORD(result) = v55;
      if (v21)
      {
        xmmword_1004D2D70 = v20;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v13 = v31;
        float32x4_t v12 = v35;
        float32x4_t v8 = v39;
        a1 = v43;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v59;
        int v6 = v47;
        LODWORD(result) = v55;
        a5 = v51;
      }
    }
    int8x16_t v14 = v11[215];
    int8x16_t v15 = v10[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v56 = result;
      int v52 = a5;
      int v48 = v6;
      int8x8_t v60 = v9;
      __n128 v44 = a1;
      float32x4_t v36 = v12;
      float32x4_t v40 = v8;
      int8x16_t v28 = v14;
      float32x4_t v32 = v13;
      int8x16_t v26 = v15;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v15 = v26;
      int8x16_t v14 = v28;
      float32x4_t v13 = v32;
      float32x4_t v12 = v36;
      *(void *)&long long v22 = 0x8000000080000000;
      *((void *)&v22 + 1) = 0x8000000080000000;
      float32x4_t v8 = v40;
      a1 = v44;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v60;
      int v6 = v48;
      a5 = v52;
      int v23 = result;
      LODWORD(result) = v56;
      if (v23)
      {
        xmmword_1004D2D50 = v22;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v15 = v26;
        int8x16_t v14 = v28;
        float32x4_t v13 = v32;
        float32x4_t v12 = v36;
        float32x4_t v8 = v40;
        a1 = v44;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v60;
        int v6 = v48;
        LODWORD(result) = v56;
        a5 = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v57 = result;
      int v53 = a5;
      int v49 = v6;
      float64x2_t v61 = v9;
      __n128 v45 = a1;
      float32x4_t v37 = v12;
      float32x4_t v41 = v8;
      int8x16_t v29 = v14;
      float32x4_t v33 = v13;
      int8x16_t v27 = v15;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v15 = v27;
      int8x16_t v14 = v29;
      float32x4_t v13 = v33;
      float32x4_t v12 = v37;
      float32x4_t v8 = v41;
      *(void *)&long long v24 = 0x3F0000003F000000;
      *((void *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v45;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v61;
      int v6 = v49;
      a5 = v53;
      int v25 = result;
      LODWORD(result) = v57;
      if (v25)
      {
        xmmword_1004D2D70 = v24;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v15 = v27;
        int8x16_t v14 = v29;
        float32x4_t v13 = v33;
        float32x4_t v12 = v37;
        float32x4_t v8 = v41;
        a1 = v45;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v61;
        int v6 = v49;
        LODWORD(result) = v57;
        a5 = v53;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(v12, a1.n128_f32[0]));
    int8x16_t v17 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(v13, a1.n128_f32[0]));
    *a5++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v15, v16), v14)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v10[213], v17), v11[215]))));
    v9 += 2;
    uint64_t result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100250590(float a1, float a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, float64x2_t *a8, int16x8_t *a9, int a10)
{
  int v10 = a10 - 8;
  if (a10 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float64x2_t v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2), 0);
  a6.n128_f64[0] = a1;
  float32x4_t v13 = a8 + 2;
  int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
  int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float64x2_t v16 = v13[-2];
    float64x2_t v17 = v13[-1];
    float64x2_t v18 = *v13;
    float64x2_t v19 = v13[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v68 = result;
      uint64_t v64 = a9;
      int v60 = v10;
      uint64_t v72 = v13;
      __n128 v52 = a6;
      float64x2_t v56 = v12;
      float64x2_t v44 = v17;
      float64x2_t v48 = v16;
      float64x2_t v36 = v19;
      float64x2_t v40 = v18;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      float64x2_t v19 = v36;
      float64x2_t v18 = v40;
      float64x2_t v17 = v44;
      float64x2_t v16 = v48;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      a6 = v52;
      float64x2_t v12 = v56;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      float32x4_t v13 = v72;
      int v10 = v60;
      a9 = v64;
      int v25 = result;
      LODWORD(result) = v68;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        float64x2_t v19 = v36;
        float64x2_t v18 = v40;
        float64x2_t v17 = v44;
        float64x2_t v16 = v48;
        a6 = v52;
        float64x2_t v12 = v56;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        float32x4_t v13 = v72;
        int v10 = v60;
        LODWORD(result) = v68;
        a9 = v64;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v69 = result;
      uint64_t v65 = a9;
      int v61 = v10;
      uint64_t v73 = v13;
      __n128 v53 = a6;
      float64x2_t v57 = v12;
      float64x2_t v45 = v17;
      float64x2_t v49 = v16;
      float64x2_t v37 = v19;
      float64x2_t v41 = v18;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      float64x2_t v19 = v37;
      float64x2_t v18 = v41;
      float64x2_t v17 = v45;
      float64x2_t v16 = v49;
      a6 = v53;
      float64x2_t v12 = v57;
      *(void *)&long long v26 = 0x3F0000003F000000;
      *((void *)&v26 + 1) = 0x3F0000003F000000;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      float32x4_t v13 = v73;
      int v10 = v61;
      a9 = v65;
      int v27 = result;
      LODWORD(result) = v69;
      if (v27)
      {
        xmmword_1004D2D70 = v26;
        __cxa_guard_release(qword_1004D2D80);
        float64x2_t v19 = v37;
        float64x2_t v18 = v41;
        float64x2_t v17 = v45;
        float64x2_t v16 = v49;
        a6 = v53;
        float64x2_t v12 = v57;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        float32x4_t v13 = v73;
        int v10 = v61;
        LODWORD(result) = v69;
        a9 = v65;
      }
    }
    int8x16_t v20 = v15[215];
    int8x16_t v21 = v14[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v70 = result;
      uint64_t v66 = a9;
      int v62 = v10;
      uint64_t v74 = v13;
      __n128 v54 = a6;
      float64x2_t v58 = v12;
      float64x2_t v46 = v17;
      float64x2_t v50 = v16;
      float64x2_t v38 = v19;
      float64x2_t v42 = v18;
      int8x16_t v32 = v21;
      int8x16_t v34 = v20;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v21 = v32;
      int8x16_t v20 = v34;
      float64x2_t v19 = v38;
      float64x2_t v18 = v42;
      float64x2_t v17 = v46;
      float64x2_t v16 = v50;
      *(void *)&long long v28 = 0x8000000080000000;
      *((void *)&v28 + 1) = 0x8000000080000000;
      a6 = v54;
      float64x2_t v12 = v58;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      float32x4_t v13 = v74;
      int v10 = v62;
      a9 = v66;
      int v29 = result;
      LODWORD(result) = v70;
      if (v29)
      {
        xmmword_1004D2D50 = v28;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v21 = v32;
        int8x16_t v20 = v34;
        float64x2_t v19 = v38;
        float64x2_t v18 = v42;
        float64x2_t v17 = v46;
        float64x2_t v16 = v50;
        a6 = v54;
        float64x2_t v12 = v58;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        float32x4_t v13 = v74;
        int v10 = v62;
        LODWORD(result) = v70;
        a9 = v66;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v71 = result;
      uint64_t v67 = a9;
      int v63 = v10;
      uint64_t v75 = v13;
      __n128 v55 = a6;
      float64x2_t v59 = v12;
      float64x2_t v47 = v17;
      float64x2_t v51 = v16;
      float64x2_t v39 = v19;
      float64x2_t v43 = v18;
      int8x16_t v33 = v21;
      int8x16_t v35 = v20;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v21 = v33;
      int8x16_t v20 = v35;
      float64x2_t v19 = v39;
      float64x2_t v18 = v43;
      float64x2_t v17 = v47;
      float64x2_t v16 = v51;
      a6 = v55;
      float64x2_t v12 = v59;
      *(void *)&long long v30 = 0x3F0000003F000000;
      *((void *)&v30 + 1) = 0x3F0000003F000000;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      float32x4_t v13 = v75;
      int v10 = v63;
      a9 = v67;
      int v31 = result;
      LODWORD(result) = v71;
      if (v31)
      {
        xmmword_1004D2D70 = v30;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v21 = v33;
        int8x16_t v20 = v35;
        float64x2_t v19 = v39;
        float64x2_t v18 = v43;
        float64x2_t v17 = v47;
        float64x2_t v16 = v51;
        a6 = v55;
        float64x2_t v12 = v59;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        float32x4_t v13 = v75;
        int v10 = v63;
        LODWORD(result) = v71;
        a9 = v67;
      }
    }
    int8x16_t v22 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v16, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v17, a6.n128_f64[0])));
    int8x16_t v23 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v18, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v19, a6.n128_f64[0])));
    *a9++ = vqmovun_high_s32(vqmovun_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v20)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v23, (float32x4_t)vorrq_s8(vandq_s8(v14[213], v23), v15[215]))));
    v13 += 4;
    uint64_t result = (result + 8);
  }
  while (v10 >= (int)result);
  return result;
}

uint64_t sub_10025096C(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint8x8_t v11 = *(uint8x8_t *)(a4 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v45 = a5;
      uint64_t v49 = result;
      uint64_t v41 = a4;
      int v53 = v6;
      uint8x8_t v57 = v11;
      float32x4_t v33 = v8;
      __n128 v37 = a1;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v8 = v33;
      a1 = v37;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      uint8x8_t v11 = v57;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v53;
      a4 = v41;
      a5 = v45;
      int v19 = v17;
      uint64_t result = v49;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v8 = v33;
        a1 = v37;
        uint8x8_t v11 = v57;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
        uint64_t result = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v46 = a5;
      uint64_t v50 = result;
      uint64_t v42 = a4;
      int v54 = v6;
      uint8x8_t v58 = v11;
      float32x4_t v34 = v8;
      __n128 v38 = a1;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v8 = v34;
      a1 = v38;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      uint8x8_t v11 = v58;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a4 = v42;
      a5 = v46;
      int v22 = v20;
      uint64_t result = v50;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v8 = v34;
        a1 = v38;
        uint8x8_t v11 = v58;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
        uint64_t result = v50;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v47 = a5;
      uint64_t v51 = result;
      uint64_t v43 = a4;
      int v55 = v6;
      uint8x8_t v59 = v11;
      float32x4_t v35 = v8;
      __n128 v39 = a1;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      float32x4_t v8 = v35;
      a1 = v39;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      uint8x8_t v11 = v59;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a4 = v43;
      a5 = v47;
      int v25 = v23;
      uint64_t result = v51;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        uint8x8_t v11 = v59;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
        uint64_t result = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      uint8x8_t v60 = v11;
      float32x4_t v36 = v8;
      __n128 v40 = a1;
      int8x16_t v30 = v13;
      int8x16_t v32 = v12;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v30;
      int8x16_t v12 = v32;
      float32x4_t v8 = v36;
      a1 = v40;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      uint8x8_t v11 = v60;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v28 = v26;
      uint64_t result = v52;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v30;
        int8x16_t v12 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        uint8x8_t v11 = v60;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    uint16x8_t v14 = vmovl_u8(v11);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v14.i8)), a1.n128_f32[0]));
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v14)), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v13, v15), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v16), v10[215]))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100250CC8(__n128 a1, int32x2_t a2, uint64_t a3, uint64_t a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  uint64_t result = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int8x8_t v11 = *(int8x8_t *)(a4 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v45 = a5;
      uint64_t v49 = result;
      uint64_t v41 = a4;
      int v53 = v6;
      int8x8_t v57 = v11;
      float32x4_t v33 = v8;
      __n128 v37 = a1;
      int v17 = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v8 = v33;
      a1 = v37;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      int8x8_t v11 = v57;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v53;
      a4 = v41;
      a5 = v45;
      int v19 = v17;
      uint64_t result = v49;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v8 = v33;
        a1 = v37;
        int8x8_t v11 = v57;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
        uint64_t result = v49;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v46 = a5;
      uint64_t v50 = result;
      uint64_t v42 = a4;
      int v54 = v6;
      int8x8_t v58 = v11;
      float32x4_t v34 = v8;
      __n128 v38 = a1;
      int v20 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v8 = v34;
      a1 = v38;
      *(void *)&long long v21 = 0x3F0000003F000000;
      *((void *)&v21 + 1) = 0x3F0000003F000000;
      int8x8_t v11 = v58;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v54;
      a4 = v42;
      a5 = v46;
      int v22 = v20;
      uint64_t result = v50;
      if (v22)
      {
        xmmword_1004D2D70 = v21;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v8 = v34;
        a1 = v38;
        int8x8_t v11 = v58;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
        uint64_t result = v50;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v47 = a5;
      uint64_t v51 = result;
      uint64_t v43 = a4;
      int v55 = v6;
      int8x8_t v59 = v11;
      float32x4_t v35 = v8;
      __n128 v39 = a1;
      int8x16_t v29 = v13;
      int8x16_t v31 = v12;
      int v23 = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v29;
      int8x16_t v12 = v31;
      float32x4_t v8 = v35;
      a1 = v39;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      int8x8_t v11 = v59;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v55;
      a4 = v43;
      a5 = v47;
      int v25 = v23;
      uint64_t result = v51;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v29;
        int8x16_t v12 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        int8x8_t v11 = v59;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
        uint64_t result = v51;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      float64x2_t v48 = a5;
      uint64_t v52 = result;
      uint64_t v44 = a4;
      int v56 = v6;
      int8x8_t v60 = v11;
      float32x4_t v36 = v8;
      __n128 v40 = a1;
      int8x16_t v30 = v13;
      int8x16_t v32 = v12;
      int v26 = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v30;
      int8x16_t v12 = v32;
      float32x4_t v8 = v36;
      a1 = v40;
      *(void *)&long long v27 = 0x3F0000003F000000;
      *((void *)&v27 + 1) = 0x3F0000003F000000;
      int8x8_t v11 = v60;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      int v6 = v56;
      a4 = v44;
      a5 = v48;
      int v28 = v26;
      uint64_t result = v52;
      if (v28)
      {
        xmmword_1004D2D70 = v27;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v30;
        int8x16_t v12 = v32;
        float32x4_t v8 = v36;
        a1 = v40;
        int8x8_t v11 = v60;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        int v6 = v56;
        a4 = v44;
        a5 = v48;
        uint64_t result = v52;
      }
    }
    int16x8_t v14 = vmovl_s8(v11);
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v14.i8)), a1.n128_f32[0]));
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v14)), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v13, v15), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v16), v10[215]))));
    result += 8;
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100251024(__n128 a1, int32x2_t a2, uint64_t a3, uint16x8_t *a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint16x8_t v11 = *a4;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v48 = result;
      int v52 = v6;
      __n128 v40 = a4;
      uint64_t v44 = a5;
      __n128 v36 = a1;
      uint16x8_t v28 = v11;
      float32x4_t v32 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      uint16x8_t v11 = v28;
      float32x4_t v8 = v32;
      *(void *)&long long v16 = 0x8000000080000000;
      *((void *)&v16 + 1) = 0x8000000080000000;
      a1 = v36;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v40;
      a5 = v44;
      int v17 = result;
      LODWORD(result) = v48;
      int v6 = v52;
      if (v17)
      {
        xmmword_1004D2D50 = v16;
        __cxa_guard_release(qword_1004D2D60);
        uint16x8_t v11 = v28;
        float32x4_t v8 = v32;
        a1 = v36;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v48;
        int v6 = v52;
        a4 = v40;
        a5 = v44;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v49 = result;
      int v53 = v6;
      uint64_t v41 = a4;
      float64x2_t v45 = a5;
      __n128 v37 = a1;
      uint16x8_t v29 = v11;
      float32x4_t v33 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      uint16x8_t v11 = v29;
      float32x4_t v8 = v33;
      *(void *)&long long v18 = 0x3F0000003F000000;
      *((void *)&v18 + 1) = 0x3F0000003F000000;
      a1 = v37;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v41;
      a5 = v45;
      int v19 = result;
      LODWORD(result) = v49;
      int v6 = v53;
      if (v19)
      {
        xmmword_1004D2D70 = v18;
        __cxa_guard_release(qword_1004D2D80);
        uint16x8_t v11 = v29;
        float32x4_t v8 = v33;
        a1 = v37;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v49;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v50 = result;
      int v54 = v6;
      uint64_t v42 = a4;
      float64x2_t v46 = a5;
      __n128 v38 = a1;
      uint16x8_t v30 = v11;
      float32x4_t v34 = v8;
      int8x16_t v24 = v13;
      int8x16_t v26 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v24;
      int8x16_t v12 = v26;
      uint16x8_t v11 = v30;
      float32x4_t v8 = v34;
      *(void *)&long long v20 = 0x8000000080000000;
      *((void *)&v20 + 1) = 0x8000000080000000;
      a1 = v38;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v42;
      a5 = v46;
      int v21 = result;
      LODWORD(result) = v50;
      int v6 = v54;
      if (v21)
      {
        xmmword_1004D2D50 = v20;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v24;
        int8x16_t v12 = v26;
        uint16x8_t v11 = v30;
        float32x4_t v8 = v34;
        a1 = v38;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v50;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v51 = result;
      int v55 = v6;
      uint64_t v43 = a4;
      float64x2_t v47 = a5;
      __n128 v39 = a1;
      uint16x8_t v31 = v11;
      float32x4_t v35 = v8;
      int8x16_t v25 = v13;
      int8x16_t v27 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v25;
      int8x16_t v12 = v27;
      uint16x8_t v11 = v31;
      float32x4_t v8 = v35;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v39;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v43;
      a5 = v47;
      int v23 = result;
      LODWORD(result) = v51;
      int v6 = v55;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v25;
        int8x16_t v12 = v27;
        uint16x8_t v11 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v51;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
      }
    }
    int8x16_t v14 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v11.i8)), a1.n128_f32[0]));
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v11)), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vorrq_s8(vandq_s8(v13, v14), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v15), v10[215]))));
    ++a4;
    uint64_t result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100251350(__n128 a1, int32x2_t a2, uint64_t a3, int16x8_t *a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = (int8x16_t *)&unk_1004D2000;
  int v10 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int16x8_t v11 = *a4;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v48 = result;
      int v52 = v6;
      __n128 v40 = a4;
      uint64_t v44 = a5;
      __n128 v36 = a1;
      int16x8_t v28 = v11;
      float32x4_t v32 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int16x8_t v11 = v28;
      float32x4_t v8 = v32;
      *(void *)&long long v16 = 0x8000000080000000;
      *((void *)&v16 + 1) = 0x8000000080000000;
      a1 = v36;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v40;
      a5 = v44;
      int v17 = result;
      LODWORD(result) = v48;
      int v6 = v52;
      if (v17)
      {
        xmmword_1004D2D50 = v16;
        __cxa_guard_release(qword_1004D2D60);
        int16x8_t v11 = v28;
        float32x4_t v8 = v32;
        a1 = v36;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v48;
        int v6 = v52;
        a4 = v40;
        a5 = v44;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v49 = result;
      int v53 = v6;
      uint64_t v41 = a4;
      float64x2_t v45 = a5;
      __n128 v37 = a1;
      int16x8_t v29 = v11;
      float32x4_t v33 = v8;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int16x8_t v11 = v29;
      float32x4_t v8 = v33;
      *(void *)&long long v18 = 0x3F0000003F000000;
      *((void *)&v18 + 1) = 0x3F0000003F000000;
      a1 = v37;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v41;
      a5 = v45;
      int v19 = result;
      LODWORD(result) = v49;
      int v6 = v53;
      if (v19)
      {
        xmmword_1004D2D70 = v18;
        __cxa_guard_release(qword_1004D2D80);
        int16x8_t v11 = v29;
        float32x4_t v8 = v33;
        a1 = v37;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v49;
        int v6 = v53;
        a4 = v41;
        a5 = v45;
      }
    }
    int8x16_t v12 = v10[215];
    int8x16_t v13 = v9[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v50 = result;
      int v54 = v6;
      uint64_t v42 = a4;
      float64x2_t v46 = a5;
      __n128 v38 = a1;
      int16x8_t v30 = v11;
      float32x4_t v34 = v8;
      int8x16_t v24 = v13;
      int8x16_t v26 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v13 = v24;
      int8x16_t v12 = v26;
      int16x8_t v11 = v30;
      float32x4_t v8 = v34;
      *(void *)&long long v20 = 0x8000000080000000;
      *((void *)&v20 + 1) = 0x8000000080000000;
      a1 = v38;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v42;
      a5 = v46;
      int v21 = result;
      LODWORD(result) = v50;
      int v6 = v54;
      if (v21)
      {
        xmmword_1004D2D50 = v20;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v13 = v24;
        int8x16_t v12 = v26;
        int16x8_t v11 = v30;
        float32x4_t v8 = v34;
        a1 = v38;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v50;
        int v6 = v54;
        a4 = v42;
        a5 = v46;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v51 = result;
      int v55 = v6;
      uint64_t v43 = a4;
      float64x2_t v47 = a5;
      __n128 v39 = a1;
      int16x8_t v31 = v11;
      float32x4_t v35 = v8;
      int8x16_t v25 = v13;
      int8x16_t v27 = v12;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v13 = v25;
      int8x16_t v12 = v27;
      int16x8_t v11 = v31;
      float32x4_t v8 = v35;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      a1 = v39;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = (int8x16_t *)&unk_1004D2000;
      a4 = v43;
      a5 = v47;
      int v23 = result;
      LODWORD(result) = v51;
      int v6 = v55;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v13 = v25;
        int8x16_t v12 = v27;
        int16x8_t v11 = v31;
        float32x4_t v8 = v35;
        a1 = v39;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = (int8x16_t *)&unk_1004D2000;
        LODWORD(result) = v51;
        int v6 = v55;
        a4 = v43;
        a5 = v47;
      }
    }
    int8x16_t v14 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v11.i8)), a1.n128_f32[0]));
    int8x16_t v15 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v11)), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vorrq_s8(vandq_s8(v13, v14), v12)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v9[213], v15), v10[215]))));
    ++a4;
    uint64_t result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_10025167C(__n128 a1, int32x2_t a2, uint64_t a3, int32x4_t *a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = a4 + 1;
  int v10 = (int8x16_t *)&unk_1004D2000;
  int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int32x4_t v13 = v9[-1];
    int32x4_t v12 = *v9;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v54 = result;
      int v50 = a5;
      int v46 = v6;
      int8x8_t v58 = v9;
      __n128 v42 = a1;
      int32x4_t v34 = v12;
      float32x4_t v38 = v8;
      int32x4_t v30 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int32x4_t v13 = v30;
      int32x4_t v12 = v34;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      float32x4_t v8 = v38;
      a1 = v42;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v58;
      int v6 = v46;
      a5 = v50;
      int v19 = result;
      LODWORD(result) = v54;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        int32x4_t v13 = v30;
        int32x4_t v12 = v34;
        float32x4_t v8 = v38;
        a1 = v42;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v58;
        int v6 = v46;
        LODWORD(result) = v54;
        a5 = v50;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v55 = result;
      int v51 = a5;
      int v47 = v6;
      int8x8_t v59 = v9;
      __n128 v43 = a1;
      int32x4_t v35 = v12;
      float32x4_t v39 = v8;
      int32x4_t v31 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int32x4_t v13 = v31;
      int32x4_t v12 = v35;
      float32x4_t v8 = v39;
      *(void *)&long long v20 = 0x3F0000003F000000;
      *((void *)&v20 + 1) = 0x3F0000003F000000;
      a1 = v43;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v59;
      int v6 = v47;
      a5 = v51;
      int v21 = result;
      LODWORD(result) = v55;
      if (v21)
      {
        xmmword_1004D2D70 = v20;
        __cxa_guard_release(qword_1004D2D80);
        int32x4_t v13 = v31;
        int32x4_t v12 = v35;
        float32x4_t v8 = v39;
        a1 = v43;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v59;
        int v6 = v47;
        LODWORD(result) = v55;
        a5 = v51;
      }
    }
    int8x16_t v14 = v11[215];
    int8x16_t v15 = v10[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v56 = result;
      int v52 = a5;
      int v48 = v6;
      int8x8_t v60 = v9;
      __n128 v44 = a1;
      int32x4_t v36 = v12;
      float32x4_t v40 = v8;
      int8x16_t v28 = v14;
      int32x4_t v32 = v13;
      int8x16_t v26 = v15;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v15 = v26;
      int8x16_t v14 = v28;
      int32x4_t v13 = v32;
      int32x4_t v12 = v36;
      *(void *)&long long v22 = 0x8000000080000000;
      *((void *)&v22 + 1) = 0x8000000080000000;
      float32x4_t v8 = v40;
      a1 = v44;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v60;
      int v6 = v48;
      a5 = v52;
      int v23 = result;
      LODWORD(result) = v56;
      if (v23)
      {
        xmmword_1004D2D50 = v22;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v15 = v26;
        int8x16_t v14 = v28;
        int32x4_t v13 = v32;
        int32x4_t v12 = v36;
        float32x4_t v8 = v40;
        a1 = v44;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v60;
        int v6 = v48;
        LODWORD(result) = v56;
        a5 = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v57 = result;
      int v53 = a5;
      int v49 = v6;
      int v61 = v9;
      __n128 v45 = a1;
      int32x4_t v37 = v12;
      float32x4_t v41 = v8;
      int8x16_t v29 = v14;
      int32x4_t v33 = v13;
      int8x16_t v27 = v15;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v15 = v27;
      int8x16_t v14 = v29;
      int32x4_t v13 = v33;
      int32x4_t v12 = v37;
      float32x4_t v8 = v41;
      *(void *)&long long v24 = 0x3F0000003F000000;
      *((void *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v45;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v61;
      int v6 = v49;
      a5 = v53;
      int v25 = result;
      LODWORD(result) = v57;
      if (v25)
      {
        xmmword_1004D2D70 = v24;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v15 = v27;
        int8x16_t v14 = v29;
        int32x4_t v13 = v33;
        int32x4_t v12 = v37;
        float32x4_t v8 = v41;
        a1 = v45;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v61;
        int v6 = v49;
        LODWORD(result) = v57;
        a5 = v53;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v13), a1.n128_f32[0]));
    int8x16_t v17 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(vcvtq_f32_s32(v12), a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v15, v16), v14)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v10[213], v17), v11[215]))));
    v9 += 2;
    uint64_t result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100251A34(__n128 a1, int32x2_t a2, uint64_t a3, float32x4_t *a4, int16x8_t *a5, int a6)
{
  int v6 = a6 - 8;
  if (a6 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float32x4_t v8 = (float32x4_t)vdupq_lane_s32(a2, 0);
  uint64_t v9 = a4 + 1;
  int v10 = (int8x16_t *)&unk_1004D2000;
  int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float32x4_t v12 = v9[-1];
    float32x4_t v13 = *v9;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v54 = result;
      int v50 = a5;
      int v46 = v6;
      int8x8_t v58 = v9;
      __n128 v42 = a1;
      float32x4_t v34 = v12;
      float32x4_t v38 = v8;
      float32x4_t v30 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      float32x4_t v13 = v30;
      float32x4_t v12 = v34;
      *(void *)&long long v18 = 0x8000000080000000;
      *((void *)&v18 + 1) = 0x8000000080000000;
      float32x4_t v8 = v38;
      a1 = v42;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v58;
      int v6 = v46;
      a5 = v50;
      int v19 = result;
      LODWORD(result) = v54;
      if (v19)
      {
        xmmword_1004D2D50 = v18;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v13 = v30;
        float32x4_t v12 = v34;
        float32x4_t v8 = v38;
        a1 = v42;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v58;
        int v6 = v46;
        LODWORD(result) = v54;
        a5 = v50;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v55 = result;
      int v51 = a5;
      int v47 = v6;
      int8x8_t v59 = v9;
      __n128 v43 = a1;
      float32x4_t v35 = v12;
      float32x4_t v39 = v8;
      float32x4_t v31 = v13;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v13 = v31;
      float32x4_t v12 = v35;
      float32x4_t v8 = v39;
      *(void *)&long long v20 = 0x3F0000003F000000;
      *((void *)&v20 + 1) = 0x3F0000003F000000;
      a1 = v43;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v59;
      int v6 = v47;
      a5 = v51;
      int v21 = result;
      LODWORD(result) = v55;
      if (v21)
      {
        xmmword_1004D2D70 = v20;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v13 = v31;
        float32x4_t v12 = v35;
        float32x4_t v8 = v39;
        a1 = v43;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v59;
        int v6 = v47;
        LODWORD(result) = v55;
        a5 = v51;
      }
    }
    int8x16_t v14 = v11[215];
    int8x16_t v15 = v10[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v56 = result;
      int v52 = a5;
      int v48 = v6;
      int8x8_t v60 = v9;
      __n128 v44 = a1;
      float32x4_t v36 = v12;
      float32x4_t v40 = v8;
      int8x16_t v28 = v14;
      float32x4_t v32 = v13;
      int8x16_t v26 = v15;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v15 = v26;
      int8x16_t v14 = v28;
      float32x4_t v13 = v32;
      float32x4_t v12 = v36;
      *(void *)&long long v22 = 0x8000000080000000;
      *((void *)&v22 + 1) = 0x8000000080000000;
      float32x4_t v8 = v40;
      a1 = v44;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v60;
      int v6 = v48;
      a5 = v52;
      int v23 = result;
      LODWORD(result) = v56;
      if (v23)
      {
        xmmword_1004D2D50 = v22;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v15 = v26;
        int8x16_t v14 = v28;
        float32x4_t v13 = v32;
        float32x4_t v12 = v36;
        float32x4_t v8 = v40;
        a1 = v44;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v60;
        int v6 = v48;
        LODWORD(result) = v56;
        a5 = v52;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v57 = result;
      int v53 = a5;
      int v49 = v6;
      int v61 = v9;
      __n128 v45 = a1;
      float32x4_t v37 = v12;
      float32x4_t v41 = v8;
      int8x16_t v29 = v14;
      float32x4_t v33 = v13;
      int8x16_t v27 = v15;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v15 = v27;
      int8x16_t v14 = v29;
      float32x4_t v13 = v33;
      float32x4_t v12 = v37;
      float32x4_t v8 = v41;
      *(void *)&long long v24 = 0x3F0000003F000000;
      *((void *)&v24 + 1) = 0x3F0000003F000000;
      a1 = v45;
      int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
      int v10 = (int8x16_t *)&unk_1004D2000;
      uint64_t v9 = v61;
      int v6 = v49;
      a5 = v53;
      int v25 = result;
      LODWORD(result) = v57;
      if (v25)
      {
        xmmword_1004D2D70 = v24;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v15 = v27;
        int8x16_t v14 = v29;
        float32x4_t v13 = v33;
        float32x4_t v12 = v37;
        float32x4_t v8 = v41;
        a1 = v45;
        int16x8_t v11 = (int8x16_t *)&unk_1004D2000;
        int v10 = (int8x16_t *)&unk_1004D2000;
        uint64_t v9 = v61;
        int v6 = v49;
        LODWORD(result) = v57;
        a5 = v53;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(v12, a1.n128_f32[0]));
    int8x16_t v17 = (int8x16_t)vaddq_f32(v8, vmulq_n_f32(v13, a1.n128_f32[0]));
    *a5++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v15, v16), v14)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v10[213], v17), v11[215]))));
    v9 += 2;
    uint64_t result = (result + 8);
  }
  while (v6 >= (int)result);
  return result;
}

uint64_t sub_100251DE4(float a1, float a2, double a3, double a4, double a5, __n128 a6, uint64_t a7, float64x2_t *a8, int16x8_t *a9, int a10)
{
  int v10 = a10 - 8;
  if (a10 < 8) {
    return 0;
  }
  LODWORD(result) = 0;
  float64x2_t v12 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2), 0);
  a6.n128_f64[0] = a1;
  float32x4_t v13 = a8 + 2;
  int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
  int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
  do
  {
    float64x2_t v16 = v13[-2];
    float64x2_t v17 = v13[-1];
    float64x2_t v18 = *v13;
    float64x2_t v19 = v13[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v68 = result;
      uint64_t v64 = a9;
      int v60 = v10;
      uint64_t v72 = v13;
      __n128 v52 = a6;
      float64x2_t v56 = v12;
      float64x2_t v44 = v17;
      float64x2_t v48 = v16;
      float64x2_t v36 = v19;
      float64x2_t v40 = v18;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      float64x2_t v19 = v36;
      float64x2_t v18 = v40;
      float64x2_t v17 = v44;
      float64x2_t v16 = v48;
      *(void *)&long long v24 = 0x8000000080000000;
      *((void *)&v24 + 1) = 0x8000000080000000;
      a6 = v52;
      float64x2_t v12 = v56;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      float32x4_t v13 = v72;
      int v10 = v60;
      a9 = v64;
      int v25 = result;
      LODWORD(result) = v68;
      if (v25)
      {
        xmmword_1004D2D50 = v24;
        __cxa_guard_release(qword_1004D2D60);
        float64x2_t v19 = v36;
        float64x2_t v18 = v40;
        float64x2_t v17 = v44;
        float64x2_t v16 = v48;
        a6 = v52;
        float64x2_t v12 = v56;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        float32x4_t v13 = v72;
        int v10 = v60;
        LODWORD(result) = v68;
        a9 = v64;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v69 = result;
      uint64_t v65 = a9;
      int v61 = v10;
      uint64_t v73 = v13;
      __n128 v53 = a6;
      float64x2_t v57 = v12;
      float64x2_t v45 = v17;
      float64x2_t v49 = v16;
      float64x2_t v37 = v19;
      float64x2_t v41 = v18;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      float64x2_t v19 = v37;
      float64x2_t v18 = v41;
      float64x2_t v17 = v45;
      float64x2_t v16 = v49;
      a6 = v53;
      float64x2_t v12 = v57;
      *(void *)&long long v26 = 0x3F0000003F000000;
      *((void *)&v26 + 1) = 0x3F0000003F000000;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      float32x4_t v13 = v73;
      int v10 = v61;
      a9 = v65;
      int v27 = result;
      LODWORD(result) = v69;
      if (v27)
      {
        xmmword_1004D2D70 = v26;
        __cxa_guard_release(qword_1004D2D80);
        float64x2_t v19 = v37;
        float64x2_t v18 = v41;
        float64x2_t v17 = v45;
        float64x2_t v16 = v49;
        a6 = v53;
        float64x2_t v12 = v57;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        float32x4_t v13 = v73;
        int v10 = v61;
        LODWORD(result) = v69;
        a9 = v65;
      }
    }
    int8x16_t v20 = v15[215];
    int8x16_t v21 = v14[213];
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v70 = result;
      uint64_t v66 = a9;
      int v62 = v10;
      uint64_t v74 = v13;
      __n128 v54 = a6;
      float64x2_t v58 = v12;
      float64x2_t v46 = v17;
      float64x2_t v50 = v16;
      float64x2_t v38 = v19;
      float64x2_t v42 = v18;
      int8x16_t v32 = v21;
      int8x16_t v34 = v20;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      int8x16_t v21 = v32;
      int8x16_t v20 = v34;
      float64x2_t v19 = v38;
      float64x2_t v18 = v42;
      float64x2_t v17 = v46;
      float64x2_t v16 = v50;
      *(void *)&long long v28 = 0x8000000080000000;
      *((void *)&v28 + 1) = 0x8000000080000000;
      a6 = v54;
      float64x2_t v12 = v58;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      float32x4_t v13 = v74;
      int v10 = v62;
      a9 = v66;
      int v29 = result;
      LODWORD(result) = v70;
      if (v29)
      {
        xmmword_1004D2D50 = v28;
        __cxa_guard_release(qword_1004D2D60);
        int8x16_t v21 = v32;
        int8x16_t v20 = v34;
        float64x2_t v19 = v38;
        float64x2_t v18 = v42;
        float64x2_t v17 = v46;
        float64x2_t v16 = v50;
        a6 = v54;
        float64x2_t v12 = v58;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        float32x4_t v13 = v74;
        int v10 = v62;
        LODWORD(result) = v70;
        a9 = v66;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v71 = result;
      uint64_t v67 = a9;
      int v63 = v10;
      uint64_t v75 = v13;
      __n128 v55 = a6;
      float64x2_t v59 = v12;
      float64x2_t v47 = v17;
      float64x2_t v51 = v16;
      float64x2_t v39 = v19;
      float64x2_t v43 = v18;
      int8x16_t v33 = v21;
      int8x16_t v35 = v20;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      int8x16_t v21 = v33;
      int8x16_t v20 = v35;
      float64x2_t v19 = v39;
      float64x2_t v18 = v43;
      float64x2_t v17 = v47;
      float64x2_t v16 = v51;
      a6 = v55;
      float64x2_t v12 = v59;
      *(void *)&long long v30 = 0x3F0000003F000000;
      *((void *)&v30 + 1) = 0x3F0000003F000000;
      int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
      int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
      float32x4_t v13 = v75;
      int v10 = v63;
      a9 = v67;
      int v31 = result;
      LODWORD(result) = v71;
      if (v31)
      {
        xmmword_1004D2D70 = v30;
        __cxa_guard_release(qword_1004D2D80);
        int8x16_t v21 = v33;
        int8x16_t v20 = v35;
        float64x2_t v19 = v39;
        float64x2_t v18 = v43;
        float64x2_t v17 = v47;
        float64x2_t v16 = v51;
        a6 = v55;
        float64x2_t v12 = v59;
        int8x16_t v15 = (int8x16_t *)&unk_1004D2000;
        int8x16_t v14 = (int8x16_t *)&unk_1004D2000;
        float32x4_t v13 = v75;
        int v10 = v63;
        LODWORD(result) = v71;
        a9 = v67;
      }
    }
    int8x16_t v22 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v16, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v17, a6.n128_f64[0])));
    int8x16_t v23 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v12, vmulq_n_f64(v18, a6.n128_f64[0]))), vaddq_f64(v12, vmulq_n_f64(v19, a6.n128_f64[0])));
    *a9++ = vqmovn_high_s32(vqmovn_s32(vcvtq_s32_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)vorrq_s8(vandq_s8(v21, v22), v20)))), vcvtq_s32_f32(vaddq_f32((float32x4_t)v23, (float32x4_t)vorrq_s8(vandq_s8(v14[213], v23), v15[215]))));
    v13 += 4;
    uint64_t result = (result + 8);
  }
  while (v10 >= (int)result);
  return result;
}

uint64_t sub_1002521C0(float a1, int32x2_t a2, double a3, __n128 a4, uint64_t a5, uint64_t a6, int32x4_t *a7, int a8)
{
  int v8 = a8 - 8;
  if (a8 < 8) {
    return 0;
  }
  a4.n128_f32[0] = a1;
  uint64_t result = 0;
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(a2, 0);
  int16x8_t v11 = a7 + 1;
  float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
  float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint8x8_t v14 = *(uint8x8_t *)(a6 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v50 = result;
      __n128 v54 = v11;
      uint64_t v42 = a6;
      int v46 = v8;
      uint8x8_t v30 = v14;
      float32x4_t v34 = v10;
      __n128 v38 = a4;
      int v18 = __cxa_guard_acquire(qword_1004D2D60);
      *(void *)&long long v19 = 0x8000000080000000;
      *((void *)&v19 + 1) = 0x8000000080000000;
      float32x4_t v10 = v34;
      a4 = v38;
      uint8x8_t v14 = v30;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int v8 = v46;
      a6 = v42;
      int v20 = v18;
      uint64_t result = v50;
      int16x8_t v11 = v54;
      if (v20)
      {
        xmmword_1004D2D50 = v19;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v10 = v34;
        a4 = v38;
        uint8x8_t v14 = v30;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v50;
        int16x8_t v11 = v54;
        int v8 = v46;
        a6 = v42;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v51 = result;
      __n128 v55 = v11;
      uint64_t v43 = a6;
      int v47 = v8;
      uint8x8_t v31 = v14;
      float32x4_t v35 = v10;
      __n128 v39 = a4;
      int v21 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v10 = v35;
      a4 = v39;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      uint8x8_t v14 = v31;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int v8 = v47;
      a6 = v43;
      int v23 = v21;
      uint64_t result = v51;
      int16x8_t v11 = v55;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v10 = v35;
        a4 = v39;
        uint8x8_t v14 = v31;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v51;
        int16x8_t v11 = v55;
        int v8 = v47;
        a6 = v43;
      }
    }
    uint16x8_t v15 = vmovl_u8(v14);
    int8x16_t v16 = (int8x16_t)vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v15.i8)), a4.n128_f32[0]));
    v11[-1] = vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v12[213], v16), v13[215])));
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v52 = result;
      float64x2_t v56 = v11;
      uint64_t v44 = a6;
      int v48 = v8;
      float32x4_t v36 = v10;
      __n128 v40 = a4;
      uint16x8_t v32 = v15;
      int v24 = __cxa_guard_acquire(qword_1004D2D60);
      uint16x8_t v15 = v32;
      float32x4_t v10 = v36;
      *(void *)&long long v25 = 0x8000000080000000;
      *((void *)&v25 + 1) = 0x8000000080000000;
      a4 = v40;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int v8 = v48;
      a6 = v44;
      int v26 = v24;
      uint64_t result = v52;
      int16x8_t v11 = v56;
      if (v26)
      {
        xmmword_1004D2D50 = v25;
        __cxa_guard_release(qword_1004D2D60);
        uint16x8_t v15 = v32;
        float32x4_t v10 = v36;
        a4 = v40;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v52;
        int16x8_t v11 = v56;
        int v8 = v48;
        a6 = v44;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v53 = result;
      float64x2_t v57 = v11;
      uint64_t v45 = a6;
      int v49 = v8;
      float32x4_t v37 = v10;
      __n128 v41 = a4;
      uint16x8_t v33 = v15;
      int v27 = __cxa_guard_acquire(qword_1004D2D80);
      uint16x8_t v15 = v33;
      float32x4_t v10 = v37;
      *(void *)&long long v28 = 0x3F0000003F000000;
      *((void *)&v28 + 1) = 0x3F0000003F000000;
      a4 = v41;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int v8 = v49;
      a6 = v45;
      int v29 = v27;
      uint64_t result = v53;
      int16x8_t v11 = v57;
      if (v29)
      {
        xmmword_1004D2D70 = v28;
        __cxa_guard_release(qword_1004D2D80);
        uint16x8_t v15 = v33;
        float32x4_t v10 = v37;
        a4 = v41;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v53;
        int16x8_t v11 = v57;
        int v8 = v49;
        a6 = v45;
      }
    }
    int8x16_t v17 = (int8x16_t)vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v15)), a4.n128_f32[0]));
    *int16x8_t v11 = vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v12[213], v17), v13[215])));
    v11 += 2;
    result += 8;
  }
  while (v8 >= (int)result);
  return result;
}

uint64_t sub_100252508(float a1, int32x2_t a2, double a3, __n128 a4, uint64_t a5, uint64_t a6, int32x4_t *a7, int a8)
{
  int v8 = a8 - 8;
  if (a8 < 8) {
    return 0;
  }
  a4.n128_f32[0] = a1;
  uint64_t result = 0;
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(a2, 0);
  int16x8_t v11 = a7 + 1;
  float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
  float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
  do
  {
    int8x8_t v14 = *(int8x8_t *)(a6 + result);
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v50 = result;
      __n128 v54 = v11;
      uint64_t v42 = a6;
      int v46 = v8;
      int8x8_t v30 = v14;
      float32x4_t v34 = v10;
      __n128 v38 = a4;
      int v18 = __cxa_guard_acquire(qword_1004D2D60);
      *(void *)&long long v19 = 0x8000000080000000;
      *((void *)&v19 + 1) = 0x8000000080000000;
      float32x4_t v10 = v34;
      a4 = v38;
      int8x8_t v14 = v30;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int v8 = v46;
      a6 = v42;
      int v20 = v18;
      uint64_t result = v50;
      int16x8_t v11 = v54;
      if (v20)
      {
        xmmword_1004D2D50 = v19;
        __cxa_guard_release(qword_1004D2D60);
        float32x4_t v10 = v34;
        a4 = v38;
        int8x8_t v14 = v30;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v50;
        int16x8_t v11 = v54;
        int v8 = v46;
        a6 = v42;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v51 = result;
      __n128 v55 = v11;
      uint64_t v43 = a6;
      int v47 = v8;
      int8x8_t v31 = v14;
      float32x4_t v35 = v10;
      __n128 v39 = a4;
      int v21 = __cxa_guard_acquire(qword_1004D2D80);
      float32x4_t v10 = v35;
      a4 = v39;
      *(void *)&long long v22 = 0x3F0000003F000000;
      *((void *)&v22 + 1) = 0x3F0000003F000000;
      int8x8_t v14 = v31;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int v8 = v47;
      a6 = v43;
      int v23 = v21;
      uint64_t result = v51;
      int16x8_t v11 = v55;
      if (v23)
      {
        xmmword_1004D2D70 = v22;
        __cxa_guard_release(qword_1004D2D80);
        float32x4_t v10 = v35;
        a4 = v39;
        int8x8_t v14 = v31;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v51;
        int16x8_t v11 = v55;
        int v8 = v47;
        a6 = v43;
      }
    }
    int16x8_t v15 = vmovl_s8(v14);
    int8x16_t v16 = (int8x16_t)vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v15.i8)), a4.n128_f32[0]));
    v11[-1] = vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v12[213], v16), v13[215])));
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      uint64_t v52 = result;
      float64x2_t v56 = v11;
      uint64_t v44 = a6;
      int v48 = v8;
      float32x4_t v36 = v10;
      __n128 v40 = a4;
      int16x8_t v32 = v15;
      int v24 = __cxa_guard_acquire(qword_1004D2D60);
      int16x8_t v15 = v32;
      float32x4_t v10 = v36;
      *(void *)&long long v25 = 0x8000000080000000;
      *((void *)&v25 + 1) = 0x8000000080000000;
      a4 = v40;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int v8 = v48;
      a6 = v44;
      int v26 = v24;
      uint64_t result = v52;
      int16x8_t v11 = v56;
      if (v26)
      {
        xmmword_1004D2D50 = v25;
        __cxa_guard_release(qword_1004D2D60);
        int16x8_t v15 = v32;
        float32x4_t v10 = v36;
        a4 = v40;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v52;
        int16x8_t v11 = v56;
        int v8 = v48;
        a6 = v44;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      uint64_t v53 = result;
      float64x2_t v57 = v11;
      uint64_t v45 = a6;
      int v49 = v8;
      float32x4_t v37 = v10;
      __n128 v41 = a4;
      int16x8_t v33 = v15;
      int v27 = __cxa_guard_acquire(qword_1004D2D80);
      int16x8_t v15 = v33;
      float32x4_t v10 = v37;
      *(void *)&long long v28 = 0x3F0000003F000000;
      *((void *)&v28 + 1) = 0x3F0000003F000000;
      a4 = v41;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int v8 = v49;
      a6 = v45;
      int v29 = v27;
      uint64_t result = v53;
      int16x8_t v11 = v57;
      if (v29)
      {
        xmmword_1004D2D70 = v28;
        __cxa_guard_release(qword_1004D2D80);
        int16x8_t v15 = v33;
        float32x4_t v10 = v37;
        a4 = v41;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        uint64_t result = v53;
        int16x8_t v11 = v57;
        int v8 = v49;
        a6 = v45;
      }
    }
    int8x16_t v17 = (int8x16_t)vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_s32(vmovl_high_s16(v15)), a4.n128_f32[0]));
    *int16x8_t v11 = vcvtq_s32_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vorrq_s8(vandq_s8(v12[213], v17), v13[215])));
    v11 += 2;
    result += 8;
  }
  while (v8 >= (int)result);
  return result;
}

uint64_t sub_100252850(float a1, int32x2_t a2, double a3, __n128 a4, uint64_t a5, uint16x8_t *a6, int32x4_t *a7, int a8)
{
  int v8 = a8 - 8;
  if (a8 < 8) {
    return 0;
  }
  a4.n128_f32[0] = a1;
  LODWORD(result) = 0;
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(a2, 0);
  int16x8_t v11 = a7 + 1;
  float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
  float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
  do
  {
    uint16x8_t v14 = *a6;
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v41 = v8;
      int v45 = result;
      float32x4_t v37 = a6;
      int v49 = v11;
      float32x4_t v29 = v10;
      __n128 v33 = a4;
      uint16x8_t v25 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      uint16x8_t v14 = v25;
      float32x4_t v10 = v29;
      *(void *)&long long v17 = 0x8000000080000000;
      *((void *)&v17 + 1) = 0x8000000080000000;
      a4 = v33;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int16x8_t v11 = v49;
      a6 = v37;
      int v18 = result;
      int v8 = v41;
      LODWORD(result) = v45;
      if (v18)
      {
        xmmword_1004D2D50 = v17;
        __cxa_guard_release(qword_1004D2D60);
        uint16x8_t v14 = v25;
        float32x4_t v10 = v29;
        a4 = v33;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        int16x8_t v11 = v49;
        int v8 = v41;
        LODWORD(result) = v45;
        a6 = v37;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v42 = v8;
      int v46 = result;
      __n128 v38 = a6;
      uint64_t v50 = v11;
      float32x4_t v30 = v10;
      __n128 v34 = a4;
      uint16x8_t v26 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      uint16x8_t v14 = v26;
      float32x4_t v10 = v30;
      *(void *)&long long v19 = 0x3F0000003F000000;
      *((void *)&v19 + 1) = 0x3F0000003F000000;
      a4 = v34;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int16x8_t v11 = v50;
      a6 = v38;
      int v20 = result;
      int v8 = v42;
      LODWORD(result) = v46;
      if (v20)
      {
        xmmword_1004D2D70 = v19;
        __cxa_guard_release(qword_1004D2D80);
        uint16x8_t v14 = v26;
        float32x4_t v10 = v30;
        a4 = v34;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        int16x8_t v11 = v50;
        int v8 = v42;
        LODWORD(result) = v46;
        a6 = v38;
      }
    }
    int8x16_t v15 = (int8x16_t)vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v14.i8)), a4.n128_f32[0]));
    v11[-1] = vcvtq_s32_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)vorrq_s8(vandq_s8(v12[213], v15), v13[215])));
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D60, memory_order_acquire) & 1) == 0)
    {
      int v43 = v8;
      int v47 = result;
      __n128 v39 = a6;
      uint64_t v51 = v11;
      float32x4_t v31 = v10;
      __n128 v35 = a4;
      uint16x8_t v27 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D60);
      uint16x8_t v14 = v27;
      float32x4_t v10 = v31;
      *(void *)&long long v21 = 0x8000000080000000;
      *((void *)&v21 + 1) = 0x8000000080000000;
      a4 = v35;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int16x8_t v11 = v51;
      a6 = v39;
      int v22 = result;
      int v8 = v43;
      LODWORD(result) = v47;
      if (v22)
      {
        xmmword_1004D2D50 = v21;
        __cxa_guard_release(qword_1004D2D60);
        uint16x8_t v14 = v27;
        float32x4_t v10 = v31;
        a4 = v35;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        int16x8_t v11 = v51;
        int v8 = v43;
        LODWORD(result) = v47;
        a6 = v39;
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)qword_1004D2D80, memory_order_acquire) & 1) == 0)
    {
      int v44 = v8;
      int v48 = result;
      __n128 v40 = a6;
      uint64_t v52 = v11;
      float32x4_t v32 = v10;
      __n128 v36 = a4;
      uint16x8_t v28 = v14;
      LODWORD(result) = __cxa_guard_acquire(qword_1004D2D80);
      uint16x8_t v14 = v28;
      float32x4_t v10 = v32;
      *(void *)&long long v23 = 0x3F0000003F000000;
      *((void *)&v23 + 1) = 0x3F0000003F000000;
      a4 = v36;
      float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
      float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
      int16x8_t v11 = v52;
      a6 = v40;
      int v24 = result;
      int v8 = v44;
      LODWORD(result) = v48;
      if (v24)
      {
        xmmword_1004D2D70 = v23;
        __cxa_guard_release(qword_1004D2D80);
        uint16x8_t v14 = v28;
        float32x4_t v10 = v32;
        a4 = v36;
        float32x4_t v13 = (int8x16_t *)&unk_1004D2000;
        float64x2_t v12 = (int8x16_t *)&unk_1004D2000;
        int16x8_t v11 = v52;
        int v8 = v44;
        LODWORD(result) = v48;
        a6 = v40;
      }
    }
    int8x16_t v16 = (int8x16_t)vaddq_f32(v10, vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v14)), a4.n128_f32[0]));
    *int16x8_t v11 = vcvtq_s32_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vorrq_s8(vandq_s8(v12[213], v16), v13[215])));
    v11 += 2;
    ++a6;
    uint64_t result = (result + 8);
  }
  while (v8 >= (int)result);
  return result;
}

void sub_100252B98(void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 96;
        uint64_t v7 = *((void *)v4 - 5);
        if (v7 && atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)(v4 - 96));
        }
        *((void *)v4 - 5) = 0;
        *((_OWORD *)v4 - 5) = 0u;
        *((_OWORD *)v4 - 4) = 0u;
        if (*((int *)v4 - 23) >= 1)
        {
          uint64_t v8 = 0;
          uint64_t v9 = *((void *)v4 - 4);
          do
            *(_DWORD *)(v9 + 4 * v8++) = 0;
          while (v8 < *((int *)v4 - 23));
        }
        float32x4_t v10 = (char *)*((void *)v4 - 3);
        if (v10 != v4 - 16) {
          j__free(v10);
        }
        v4 -= 96;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100252C9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 16)
    {
      float32x4_t v10 = (unsigned char *)(a5 + 16);
      int16x8_t v11 = (unsigned char *)(result + 16);
      float64x2_t v12 = (unsigned __int8 *)(a3 + 16);
      do
      {
        uint64_t v13 = 0;
        uint16x8_t v14 = v12;
        int8x16_t v15 = v11;
        int8x16_t v16 = v10;
        do
        {
          long long v17 = v16;
          int v18 = v15;
          *(int8x16_t *)(a5 + v13) = vbslq_s8(vceqzq_s8(*(int8x16_t *)(a3 + v13)), *(int8x16_t *)(a5 + v13), *(int8x16_t *)(result + v13));
          long long v19 = v14;
          v13 += 16;
          v16 += 16;
          v15 += 16;
          v14 += 16;
        }
        while (v13 <= v8 - 16);
        if ((int)v8 > (int)v13)
        {
          do
          {
            if (*v19++) {
              *long long v17 = *v18;
            }
            ++v13;
            ++v17;
            ++v18;
          }
          while (v13 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v10 += a6;
        v11 += a2;
        v12 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(unsigned char *)(a3 + i)) {
            *(unsigned char *)(a5 + i) = *(unsigned char *)(result + i);
          }
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100252DB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, int8x16_t a8)
{
  unsigned int v8 = a7[1];
  if (v8)
  {
    uint64_t v9 = *a7;
    if ((int)v9 >= 8)
    {
      unsigned int v13 = v8 - 1;
      do
      {
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        unsigned int v16 = v13;
        do
        {
          *(int8x8_t *)a8.i8 = vtst_s8(*(int8x8_t *)(a3 + v15), *(int8x8_t *)(a3 + v15));
          a8 = vbslq_s8(vzip1q_s8(a8, a8), *(int8x16_t *)(result + v14), *(int8x16_t *)(a5 + v14));
          *(int8x16_t *)(a5 + v14) = a8;
          v15 += 8;
          v14 += 16;
        }
        while (v15 <= (v9 - 8));
        if ((int)v9 > (int)v15)
        {
          uint64_t v17 = v15 & 0xFFFFFFF8;
          do
          {
            if (*(unsigned char *)(a3 + v17)) {
              *(_WORD *)(a5 + 2 * v17) = *(_WORD *)(result + 2 * v17);
            }
            ++v17;
          }
          while (v17 != v9);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        --v13;
      }
      while (v16);
    }
    else if ((int)v9 >= 1)
    {
      float32x4_t v10 = (_WORD *)(a5 + 6);
      int16x8_t v11 = (unsigned char *)(a3 + 3);
      float64x2_t v12 = (_WORD *)(result + 6);
      do
      {
        if (*(v11 - 3)) {
          *(v10 - 3) = *(v12 - 3);
        }
        if (v9 != 1)
        {
          if (*(v11 - 2)) {
            *(v10 - 2) = *(v12 - 2);
          }
          if (v9 != 2)
          {
            if (*(v11 - 1)) {
              *(v10 - 1) = *(v12 - 1);
            }
            if (v9 != 3)
            {
              if (*v11) {
                *float32x4_t v10 = *v12;
              }
              if (v9 != 4)
              {
                if (v11[1]) {
                  v10[1] = v12[1];
                }
                if (v9 != 5)
                {
                  if (v11[2]) {
                    v10[2] = v12[2];
                  }
                  if (v9 != 6)
                  {
                    if (v11[3]) {
                      v10[3] = v12[3];
                    }
                  }
                }
              }
            }
          }
        }
        float32x4_t v10 = (_WORD *)((char *)v10 + a6);
        v11 += a4;
        float64x2_t v12 = (_WORD *)((char *)v12 + a2);
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_100252F28(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 4)
    {
      uint64_t v16 = a5 + 12;
      uint64_t v17 = (__int16 *)(result + 12);
      int v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        uint64_t v19 = 0;
        int v20 = v18;
        long long v21 = v17;
        uint64_t v22 = v16;
        uint64_t v23 = 6;
        do
        {
          uint64_t v24 = v22;
          uint16x8_t v25 = v21;
          uint16x8_t v26 = v20;
          if (*(unsigned char *)(a3 + v19))
          {
            uint64_t v27 = a5 + v23;
            __int16 v28 = *(_WORD *)(result + v23 - 6);
            *(unsigned char *)(v27 - 4) = *(unsigned char *)(result + v23 - 4);
            *(_WORD *)(v27 - 6) = v28;
          }
          if (*(unsigned char *)(a3 + v19 + 1))
          {
            uint64_t v29 = a5 + v23;
            __int16 v30 = *(_WORD *)(result + v23 - 3);
            *(unsigned char *)(v29 - 1) = *(unsigned char *)(result + v23 - 1);
            *(_WORD *)(v29 - 3) = v30;
          }
          if (*(unsigned char *)(a3 + v19 + 2))
          {
            uint64_t v31 = a5 + v23;
            __int16 v32 = *(_WORD *)(result + v23);
            *(unsigned char *)(v31 + 2) = *(unsigned char *)(result + v23 + 2);
            *(_WORD *)uint64_t v31 = v32;
          }
          if (*(unsigned char *)(a3 + v19 + 3))
          {
            uint64_t v33 = a5 + v23;
            __int16 v34 = *(_WORD *)(result + v23 + 3);
            *(unsigned char *)(v33 + 5) = *(unsigned char *)(result + v23 + 5);
            *(_WORD *)(v33 + 3) = v34;
          }
          v19 += 4;
          v23 += 12;
          uint64_t v22 = v24 + 12;
          long long v21 = v25 + 6;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              __int16 v36 = *v25;
              *(unsigned char *)(v24 + 2) = *((unsigned char *)v25 + 2);
              *(_WORD *)uint64_t v24 = v36;
            }
            ++v19;
            v24 += 3;
            uint16x8_t v25 = (__int16 *)((char *)v25 + 3);
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 += a6;
        uint64_t v17 = (__int16 *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      uint64_t v9 = a5 + 3;
      float32x4_t v10 = (unsigned char *)(a3 + 2);
      int16x8_t v11 = (__int16 *)(result + 3);
      do
      {
        if (*(v10 - 2))
        {
          uint64_t v12 = v9 - 3;
          __int16 v13 = *(__int16 *)((char *)v11 - 3);
          *(unsigned char *)(v12 + 2) = *((unsigned char *)v11 - 1);
          *(_WORD *)uint64_t v12 = v13;
        }
        if (v8 != 1)
        {
          if (*(v10 - 1))
          {
            __int16 v14 = *v11;
            *(unsigned char *)(v9 + 2) = *((unsigned char *)v11 + 2);
            *(_WORD *)uint64_t v9 = v14;
          }
          if (v8 != 2)
          {
            if (*v10)
            {
              __int16 v15 = *(__int16 *)((char *)v11 + 3);
              *(unsigned char *)(v9 + 5) = *((unsigned char *)v11 + 5);
              *(_WORD *)(v9 + 3) = v15;
            }
          }
        }
        v9 += a6;
        v10 += a4;
        int16x8_t v11 = (__int16 *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_10025311C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 4)
    {
      uint64_t v12 = (_DWORD *)(a5 + 16);
      __int16 v13 = (_DWORD *)(result + 16);
      __int16 v14 = (unsigned __int8 *)(a3 + 4);
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = v14;
        uint64_t v17 = v13;
        int v18 = v12;
        uint64_t v19 = 8;
        do
        {
          int v20 = v18;
          long long v21 = v17;
          uint64_t v22 = v16;
          if (*(unsigned char *)(a3 + v15)) {
            *(_DWORD *)(a5 + v19 - 8) = *(_DWORD *)(result + v19 - 8);
          }
          if (*(unsigned char *)(a3 + v15 + 1)) {
            *(_DWORD *)(a5 + v19 - 4) = *(_DWORD *)(result + v19 - 4);
          }
          if (*(unsigned char *)(a3 + v15 + 2)) {
            *(_DWORD *)(a5 + v19) = *(_DWORD *)(result + v19);
          }
          if (*(unsigned char *)(a3 + v15 + 3)) {
            *(_DWORD *)(a5 + v19 + 4) = *(_DWORD *)(result + v19 + 4);
          }
          v15 += 4;
          v19 += 16;
          v18 += 4;
          v17 += 4;
          v16 += 4;
        }
        while (v15 <= v8 - 4);
        if ((int)v8 > (int)v15)
        {
          do
          {
            if (*v22++) {
              *int v20 = *v21;
            }
            ++v15;
            ++v20;
            ++v21;
          }
          while (v15 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        uint64_t v12 = (_DWORD *)((char *)v12 + a6);
        __int16 v13 = (_DWORD *)((char *)v13 + a2);
        v14 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      uint64_t v9 = (_DWORD *)(a5 + 8);
      float32x4_t v10 = (unsigned char *)(a3 + 2);
      int16x8_t v11 = (_DWORD *)(result + 4);
      do
      {
        if (*(v10 - 2)) {
          *(v9 - 2) = *(v11 - 1);
        }
        if (v8 != 1)
        {
          if (*(v10 - 1)) {
            *(v9 - 1) = *v11;
          }
          if (v8 != 2)
          {
            if (*v10) {
              _DWORD *v9 = v11[1];
            }
          }
        }
        uint64_t v9 = (_DWORD *)((char *)v9 + a6);
        v10 += a4;
        int16x8_t v11 = (_DWORD *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1002532B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 4)
    {
      uint64_t v16 = a5 + 24;
      uint64_t v17 = (int *)(result + 24);
      int v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        uint64_t v19 = 0;
        int v20 = v18;
        long long v21 = v17;
        uint64_t v22 = v16;
        uint64_t v23 = 12;
        do
        {
          uint64_t v24 = v22;
          uint16x8_t v25 = v21;
          uint16x8_t v26 = v20;
          if (*(unsigned char *)(a3 + v19))
          {
            uint64_t v27 = a5 + v23;
            int v28 = *(_DWORD *)(result + v23 - 12);
            *(_WORD *)(v27 - 8) = *(_WORD *)(result + v23 - 8);
            *(_DWORD *)(v27 - 12) = v28;
          }
          if (*(unsigned char *)(a3 + v19 + 1))
          {
            uint64_t v29 = a5 + v23;
            int v30 = *(_DWORD *)(result + v23 - 6);
            *(_WORD *)(v29 - 2) = *(_WORD *)(result + v23 - 2);
            *(_DWORD *)(v29 - 6) = v30;
          }
          if (*(unsigned char *)(a3 + v19 + 2))
          {
            uint64_t v31 = a5 + v23;
            int v32 = *(_DWORD *)(result + v23);
            *(_WORD *)(v31 + 4) = *(_WORD *)(result + v23 + 4);
            *(_DWORD *)uint64_t v31 = v32;
          }
          if (*(unsigned char *)(a3 + v19 + 3))
          {
            uint64_t v33 = a5 + v23;
            int v34 = *(_DWORD *)(result + v23 + 6);
            *(_WORD *)(v33 + 10) = *(_WORD *)(result + v23 + 10);
            *(_DWORD *)(v33 + 6) = v34;
          }
          v19 += 4;
          v23 += 24;
          uint64_t v22 = v24 + 24;
          long long v21 = v25 + 6;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              int v36 = *v25;
              *(_WORD *)(v24 + 4) = *((_WORD *)v25 + 2);
              *(_DWORD *)uint64_t v24 = v36;
            }
            ++v19;
            v24 += 6;
            uint16x8_t v25 = (int *)((char *)v25 + 6);
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 += a6;
        uint64_t v17 = (int *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      uint64_t v9 = a5 + 6;
      float32x4_t v10 = (unsigned char *)(a3 + 2);
      int16x8_t v11 = (int *)(result + 6);
      do
      {
        if (*(v10 - 2))
        {
          uint64_t v12 = v9 - 6;
          int v13 = *(int *)((char *)v11 - 6);
          *(_WORD *)(v12 + 4) = *((_WORD *)v11 - 1);
          *(_DWORD *)uint64_t v12 = v13;
        }
        if (v8 != 1)
        {
          if (*(v10 - 1))
          {
            int v14 = *v11;
            *(_WORD *)(v9 + 4) = *((_WORD *)v11 + 2);
            *(_DWORD *)uint64_t v9 = v14;
          }
          if (v8 != 2)
          {
            if (*v10)
            {
              int v15 = *(int *)((char *)v11 + 6);
              *(_WORD *)(v9 + 10) = *((_WORD *)v11 + 5);
              *(_DWORD *)(v9 + 6) = v15;
            }
          }
        }
        v9 += a6;
        v10 += a4;
        int16x8_t v11 = (int *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1002534AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 4)
    {
      uint64_t v12 = (void *)(a5 + 32);
      int v13 = (void *)(result + 32);
      int v14 = (unsigned __int8 *)(a3 + 4);
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = v14;
        uint64_t v17 = v13;
        int v18 = v12;
        uint64_t v19 = 16;
        do
        {
          int v20 = v18;
          long long v21 = v17;
          uint64_t v22 = v16;
          if (*(unsigned char *)(a3 + v15)) {
            *(void *)(a5 + v19 - 16) = *(void *)(result + v19 - 16);
          }
          if (*(unsigned char *)(a3 + v15 + 1)) {
            *(void *)(a5 + v19 - 8) = *(void *)(result + v19 - 8);
          }
          if (*(unsigned char *)(a3 + v15 + 2)) {
            *(void *)(a5 + v19) = *(void *)(result + v19);
          }
          if (*(unsigned char *)(a3 + v15 + 3)) {
            *(void *)(a5 + v19 + 8) = *(void *)(result + v19 + 8);
          }
          v15 += 4;
          v19 += 32;
          v18 += 4;
          v17 += 4;
          v16 += 4;
        }
        while (v15 <= v8 - 4);
        if ((int)v8 > (int)v15)
        {
          do
          {
            if (*v22++) {
              *int v20 = *v21;
            }
            ++v15;
            ++v20;
            ++v21;
          }
          while (v15 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        uint64_t v12 = (void *)((char *)v12 + a6);
        int v13 = (void *)((char *)v13 + a2);
        v14 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      uint64_t v9 = (void *)(a5 + 16);
      float32x4_t v10 = (unsigned char *)(a3 + 2);
      int16x8_t v11 = (void *)(result + 8);
      do
      {
        if (*(v10 - 2)) {
          *(v9 - 2) = *(v11 - 1);
        }
        if (v8 != 1)
        {
          if (*(v10 - 1)) {
            *(v9 - 1) = *v11;
          }
          if (v8 != 2)
          {
            if (*v10) {
              void *v9 = v11[1];
            }
          }
        }
        uint64_t v9 = (void *)((char *)v9 + a6);
        v10 += a4;
        int16x8_t v11 = (void *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100253648(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 4)
    {
      uint64_t v16 = a5 + 48;
      uint64_t v17 = (uint64_t *)(result + 48);
      int v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        uint64_t v19 = 0;
        int v20 = v18;
        long long v21 = v17;
        uint64_t v22 = v16;
        uint64_t v23 = 24;
        do
        {
          uint64_t v24 = v22;
          uint16x8_t v25 = v21;
          uint16x8_t v26 = v20;
          if (*(unsigned char *)(a3 + v19))
          {
            uint64_t v27 = a5 + v23;
            uint64_t v28 = *(void *)(result + v23 - 24);
            *(_DWORD *)(v27 - 16) = *(_DWORD *)(result + v23 - 16);
            *(void *)(v27 - 24) = v28;
          }
          if (*(unsigned char *)(a3 + v19 + 1))
          {
            uint64_t v29 = a5 + v23;
            uint64_t v30 = *(void *)(result + v23 - 12);
            *(_DWORD *)(v29 - 4) = *(_DWORD *)(result + v23 - 4);
            *(void *)(v29 - 12) = v30;
          }
          if (*(unsigned char *)(a3 + v19 + 2))
          {
            uint64_t v31 = a5 + v23;
            uint64_t v32 = *(void *)(result + v23);
            *(_DWORD *)(v31 + 8) = *(_DWORD *)(result + v23 + 8);
            *(void *)uint64_t v31 = v32;
          }
          if (*(unsigned char *)(a3 + v19 + 3))
          {
            uint64_t v33 = a5 + v23;
            uint64_t v34 = *(void *)(result + v23 + 12);
            *(_DWORD *)(v33 + 20) = *(_DWORD *)(result + v23 + 20);
            *(void *)(v33 + 12) = v34;
          }
          v19 += 4;
          v23 += 48;
          uint64_t v22 = v24 + 48;
          long long v21 = v25 + 6;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              uint64_t v36 = *v25;
              *(_DWORD *)(v24 + 8) = *((_DWORD *)v25 + 2);
              *(void *)uint64_t v24 = v36;
            }
            ++v19;
            v24 += 12;
            uint16x8_t v25 = (uint64_t *)((char *)v25 + 12);
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 += a6;
        uint64_t v17 = (uint64_t *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      uint64_t v9 = a5 + 12;
      float32x4_t v10 = (unsigned char *)(a3 + 2);
      int16x8_t v11 = (uint64_t *)(result + 12);
      do
      {
        if (*(v10 - 2))
        {
          uint64_t v12 = v9 - 12;
          uint64_t v13 = *(uint64_t *)((char *)v11 - 12);
          *(_DWORD *)(v12 + 8) = *((_DWORD *)v11 - 1);
          *(void *)uint64_t v12 = v13;
        }
        if (v8 != 1)
        {
          if (*(v10 - 1))
          {
            uint64_t v14 = *v11;
            *(_DWORD *)(v9 + 8) = *((_DWORD *)v11 + 2);
            *(void *)uint64_t v9 = v14;
          }
          if (v8 != 2)
          {
            if (*v10)
            {
              uint64_t v15 = *(uint64_t *)((char *)v11 + 12);
              *(_DWORD *)(v9 + 20) = *((_DWORD *)v11 + 5);
              *(void *)(v9 + 12) = v15;
            }
          }
        }
        v9 += a6;
        v10 += a4;
        int16x8_t v11 = (uint64_t *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_10025383C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 4)
    {
      uint64_t v12 = (_OWORD *)(a5 + 64);
      uint64_t v13 = (_OWORD *)(result + 64);
      uint64_t v14 = (unsigned __int8 *)(a3 + 4);
      do
      {
        uint64_t v15 = 0;
        uint64_t v16 = v14;
        uint64_t v17 = v13;
        int v18 = v12;
        uint64_t v19 = 32;
        do
        {
          int v20 = v18;
          long long v21 = v17;
          uint64_t v22 = v16;
          if (*(unsigned char *)(a3 + v15)) {
            *(_OWORD *)(a5 + v19 - 32) = *(_OWORD *)(result + v19 - 32);
          }
          if (*(unsigned char *)(a3 + v15 + 1)) {
            *(_OWORD *)(a5 + v19 - 16) = *(_OWORD *)(result + v19 - 16);
          }
          if (*(unsigned char *)(a3 + v15 + 2)) {
            *(_OWORD *)(a5 + v19) = *(_OWORD *)(result + v19);
          }
          if (*(unsigned char *)(a3 + v15 + 3)) {
            *(_OWORD *)(a5 + v19 + 16) = *(_OWORD *)(result + v19 + 16);
          }
          v15 += 4;
          v19 += 64;
          v18 += 4;
          v17 += 4;
          v16 += 4;
        }
        while (v15 <= v8 - 4);
        if ((int)v8 > (int)v15)
        {
          do
          {
            if (*v22++) {
              *int v20 = *v21;
            }
            ++v15;
            ++v20;
            ++v21;
          }
          while (v15 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        uint64_t v12 = (_OWORD *)((char *)v12 + a6);
        uint64_t v13 = (_OWORD *)((char *)v13 + a2);
        v14 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      uint64_t v9 = (_OWORD *)(a5 + 32);
      float32x4_t v10 = (unsigned char *)(a3 + 2);
      int16x8_t v11 = (_OWORD *)(result + 16);
      do
      {
        if (*(v10 - 2)) {
          *(v9 - 2) = *(v11 - 1);
        }
        if (v8 != 1)
        {
          if (*(v10 - 1)) {
            *(v9 - 1) = *v11;
          }
          if (v8 != 2)
          {
            if (*v10) {
              _OWORD *v9 = v11[1];
            }
          }
        }
        uint64_t v9 = (_OWORD *)((char *)v9 + a6);
        v10 += a4;
        int16x8_t v11 = (_OWORD *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1002539E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 4)
    {
      uint64_t v16 = a5 + 96;
      uint64_t v17 = (long long *)(result + 96);
      int v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        uint64_t v19 = 0;
        int v20 = v18;
        long long v21 = v17;
        uint64_t v22 = v16;
        uint64_t v23 = 48;
        do
        {
          uint64_t v24 = v22;
          uint16x8_t v25 = v21;
          uint16x8_t v26 = v20;
          if (*(unsigned char *)(a3 + v19))
          {
            uint64_t v27 = a5 + v23;
            long long v28 = *(_OWORD *)(result + v23 - 48);
            *(void *)(v27 - 32) = *(void *)(result + v23 - 32);
            *(_OWORD *)(v27 - 48) = v28;
          }
          if (*(unsigned char *)(a3 + v19 + 1))
          {
            uint64_t v29 = a5 + v23;
            long long v30 = *(_OWORD *)(result + v23 - 24);
            *(void *)(v29 - 8) = *(void *)(result + v23 - 8);
            *(_OWORD *)(v29 - 24) = v30;
          }
          if (*(unsigned char *)(a3 + v19 + 2))
          {
            uint64_t v31 = a5 + v23;
            long long v32 = *(_OWORD *)(result + v23);
            *(void *)(v31 + 16) = *(void *)(result + v23 + 16);
            *(_OWORD *)uint64_t v31 = v32;
          }
          if (*(unsigned char *)(a3 + v19 + 3))
          {
            uint64_t v33 = a5 + v23;
            long long v34 = *(_OWORD *)(result + v23 + 24);
            *(void *)(v33 + 40) = *(void *)(result + v23 + 40);
            *(_OWORD *)(v33 + 24) = v34;
          }
          v19 += 4;
          v23 += 96;
          uint64_t v22 = v24 + 96;
          long long v21 = v25 + 6;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              long long v36 = *v25;
              *(void *)(v24 + 16) = *((void *)v25 + 2);
              *(_OWORD *)uint64_t v24 = v36;
            }
            ++v19;
            v24 += 24;
            uint16x8_t v25 = (long long *)((char *)v25 + 24);
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        v16 += a6;
        uint64_t v17 = (long long *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      uint64_t v9 = a5 + 24;
      float32x4_t v10 = (unsigned char *)(a3 + 2);
      int16x8_t v11 = (long long *)(result + 24);
      do
      {
        if (*(v10 - 2))
        {
          uint64_t v12 = v9 - 24;
          long long v13 = *(long long *)((char *)v11 - 24);
          *(void *)(v12 + 16) = *((void *)v11 - 1);
          *(_OWORD *)uint64_t v12 = v13;
        }
        if (v8 != 1)
        {
          if (*(v10 - 1))
          {
            long long v14 = *v11;
            *(void *)(v9 + 16) = *((void *)v11 + 2);
            *(_OWORD *)uint64_t v9 = v14;
          }
          if (v8 != 2)
          {
            if (*v10)
            {
              long long v15 = *(long long *)((char *)v11 + 24);
              *(void *)(v9 + 40) = *((void *)v11 + 5);
              *(_OWORD *)(v9 + 24) = v15;
            }
          }
        }
        v9 += a6;
        v10 += a4;
        int16x8_t v11 = (long long *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_100253BCC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  int v7 = a7[1];
  if (v7)
  {
    uint64_t v8 = *a7;
    if ((int)v8 >= 4)
    {
      uint64_t v16 = (_OWORD *)(a5 + 128);
      uint64_t v17 = (_OWORD *)(result + 128);
      int v18 = (unsigned __int8 *)(a3 + 4);
      do
      {
        uint64_t v19 = 0;
        int v20 = v18;
        long long v21 = v17;
        uint64_t v22 = v16;
        uint64_t v23 = 64;
        do
        {
          uint64_t v24 = v22;
          uint16x8_t v25 = v21;
          uint16x8_t v26 = v20;
          if (*(unsigned char *)(a3 + v19))
          {
            uint64_t v27 = a5 + v23;
            long long v28 = *(_OWORD *)(result + v23 - 48);
            *(_OWORD *)(v27 - 64) = *(_OWORD *)(result + v23 - 64);
            *(_OWORD *)(v27 - 48) = v28;
          }
          if (*(unsigned char *)(a3 + v19 + 1))
          {
            uint64_t v29 = a5 + v23;
            long long v30 = *(_OWORD *)(result + v23 - 16);
            *(_OWORD *)(v29 - 32) = *(_OWORD *)(result + v23 - 32);
            *(_OWORD *)(v29 - 16) = v30;
          }
          if (*(unsigned char *)(a3 + v19 + 2))
          {
            uint64_t v31 = (_OWORD *)(a5 + v23);
            long long v32 = *(_OWORD *)(result + v23 + 16);
            *uint64_t v31 = *(_OWORD *)(result + v23);
            v31[1] = v32;
          }
          if (*(unsigned char *)(a3 + v19 + 3))
          {
            uint64_t v33 = a5 + v23;
            long long v34 = *(_OWORD *)(result + v23 + 48);
            *(_OWORD *)(v33 + 32) = *(_OWORD *)(result + v23 + 32);
            *(_OWORD *)(v33 + 48) = v34;
          }
          v19 += 4;
          v23 += 128;
          uint64_t v22 = v24 + 8;
          long long v21 = v25 + 8;
          v20 += 4;
        }
        while (v19 <= v8 - 4);
        if ((int)v8 > (int)v19)
        {
          do
          {
            if (*v26++)
            {
              long long v36 = v25[1];
              *uint64_t v24 = *v25;
              v24[1] = v36;
            }
            ++v19;
            v24 += 2;
            v25 += 2;
          }
          while (v19 < v8);
        }
        a3 += a4;
        result += a2;
        a5 += a6;
        uint64_t v16 = (_OWORD *)((char *)v16 + a6);
        uint64_t v17 = (_OWORD *)((char *)v17 + a2);
        v18 += a4;
        --v7;
      }
      while (v7);
    }
    else if ((int)v8 >= 1)
    {
      uint64_t v9 = (_OWORD *)(a5 + 64);
      float32x4_t v10 = (unsigned char *)(a3 + 2);
      int16x8_t v11 = (_OWORD *)(result + 32);
      do
      {
        if (*(v10 - 2))
        {
          uint64_t v12 = v9 - 4;
          long long v13 = *(v11 - 1);
          *uint64_t v12 = *(v11 - 2);
          v12[1] = v13;
        }
        if (v8 != 1)
        {
          if (*(v10 - 1))
          {
            long long v14 = v11[1];
            *(v9 - 2) = *v11;
            *(v9 - 1) = v14;
          }
          if (v8 != 2)
          {
            if (*v10)
            {
              long long v15 = v11[3];
              _OWORD *v9 = v11[2];
              v9[1] = v15;
            }
          }
        }
        uint64_t v9 = (_OWORD *)((char *)v9 + a6);
        v10 += a4;
        int16x8_t v11 = (_OWORD *)((char *)v11 + a2);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t (*sub_100253D78(unint64_t a1))(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8)
{
  if (a1 > 0x20) {
    return sub_100253DBC;
  }
  if (qword_1004D2E78[a1]) {
    return (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *))qword_1004D2E78[a1];
  }
  return sub_100253DBC;
}

uint64_t sub_100253DBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, unint64_t *a8)
{
  unint64_t v8 = *a8;
  int v9 = a7[1];
  int v10 = v9 - 1;
  a7[1] = v9 - 1;
  if (v9)
  {
    int v11 = *a7;
    if (*a7 < 1)
    {
      a7[1] = -1;
    }
    else if (v8)
    {
      if (v8 >= 8)
      {
        uint64_t v12 = 0;
        unint64_t v13 = v8 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v14 = v8 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v15 = result;
        uint64_t v16 = a5;
        while (v11 < 1)
        {
LABEL_21:
          int v20 = v10;
          a3 += a4;
          v15 += a2;
          v16 += a6;
          a7[1] = --v10;
          ++v12;
          if (!v20) {
            return result;
          }
        }
        uint64_t v21 = 0;
        uint64_t v22 = v16;
        uint64_t v23 = v15;
        while (1)
        {
          if (!*(unsigned char *)(a3 + v21)) {
            goto LABEL_25;
          }
          if (a5 + v12 * a6 + v8 * v21 - (result + v12 * a2 + v8 * v21) >= 0x20)
          {
            if (v8 < 0x20)
            {
              unint64_t v25 = 0;
              do
              {
LABEL_35:
                *(void *)(v22 + v25) = *(void *)(v23 + v25);
                v25 += 8;
              }
              while (v14 != v25);
              unint64_t v24 = v8 & 0xFFFFFFFFFFFFFFF8;
              if (v8 == v14) {
                goto LABEL_24;
              }
              goto LABEL_37;
            }
            uint64_t v26 = 0;
            do
            {
              long long v27 = *(_OWORD *)(v23 + v26 + 16);
              long long v28 = (_OWORD *)(v22 + v26);
              _OWORD *v28 = *(_OWORD *)(v23 + v26);
              v28[1] = v27;
              v26 += 32;
            }
            while (v13 != v26);
            if (v8 == v13) {
              goto LABEL_24;
            }
            unint64_t v25 = v8 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v24 = v8 & 0xFFFFFFFFFFFFFFE0;
            if ((v8 & 0x18) != 0) {
              goto LABEL_35;
            }
          }
          else
          {
            unint64_t v24 = 0;
          }
          do
          {
LABEL_37:
            *(unsigned char *)(v22 + v24) = *(unsigned char *)(v23 + v24);
            ++v24;
          }
          while (v8 != v24);
LABEL_24:
          int v11 = *a7;
LABEL_25:
          ++v21;
          v23 += v8;
          v22 += v8;
          if (v21 >= v11)
          {
            int v10 = a7[1];
            goto LABEL_21;
          }
        }
      }
      do
      {
        if (v11 >= 1)
        {
          uint64_t v18 = 0;
          for (uint64_t i = 0; i < v11; ++i)
          {
            if (*(unsigned char *)(a3 + i))
            {
              *(unsigned char *)(a5 + v18) = *(unsigned char *)(result + v18);
              if (v8 != 1)
              {
                *(unsigned char *)(a5 + v18 + 1) = *(unsigned char *)(result + v18 + 1);
                if (v8 != 2)
                {
                  *(unsigned char *)(a5 + v18 + 2) = *(unsigned char *)(result + v18 + 2);
                  if (v8 != 3)
                  {
                    *(unsigned char *)(a5 + v18 + 3) = *(unsigned char *)(result + v18 + 3);
                    if (v8 != 4)
                    {
                      *(unsigned char *)(a5 + v18 + 4) = *(unsigned char *)(result + v18 + 4);
                      if (v8 != 5)
                      {
                        *(unsigned char *)(a5 + v18 + 5) = *(unsigned char *)(result + v18 + 5);
                        if (v8 != 6) {
                          *(unsigned char *)(a5 + v18 + 6) = *(unsigned char *)(result + v18 + 6);
                        }
                      }
                    }
                  }
                }
              }
              int v11 = *a7;
            }
            v18 += v8;
          }
          int v10 = a7[1];
        }
        int v17 = v10;
        a3 += a4;
        result += a2;
        a5 += a6;
        a7[1] = --v10;
      }
      while (v17);
    }
    else
    {
      int v29 = 1 - v9;
      do
        ++v29;
      while (v29 != 1);
      a7[1] = -1;
    }
  }
  return result;
}

void sub_10025401C(uint64_t a1, uint64_t a2)
{
  sub_1002D6AE8(v85, &off_100494DB0);
  int v4 = sub_10029AB74((int *)a2, -1);
  if (sub_10029E6C8((_DWORD *)a2) && v4 != (*(_DWORD *)a1 & 0xFFF))
  {
    if ((((unsigned __int16)*(_DWORD *)a1 ^ (unsigned __int16)v4) & 0xFF8) != 0)
    {
      long long v93 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&v93, 55), "channels() == ((((dtype) & ((512 - 1) << 3)) >> 3) + 1)", 55);
      sub_1002D2278(-215, (uint64_t *)&v93, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 260);
    }
    sub_10024011C((unsigned int *)a1, a2, v4, 1.0, 0.0);
    goto LABEL_117;
  }
  if (sub_10029A230((_DWORD *)a2) == 655360)
  {
    if (!*(void *)(a1 + 16)) {
      goto LABEL_33;
    }
    uint64_t v5 = *(unsigned int *)(a1 + 4);
    if ((int)v5 >= 3)
    {
      uint64_t v18 = *(void *)(a1 + 64);
      uint64_t v19 = (int *)(v18 + 4);
      uint64_t v20 = 1;
      uint64_t v21 = v5 & 0xFFFFFFFE;
      uint64_t v22 = 1;
      do
      {
        v20 *= *(v19 - 1);
        v22 *= *v19;
        v19 += 2;
        v21 -= 2;
      }
      while (v21);
      uint64_t v6 = v22 * v20;
      uint64_t v23 = v5 - (v5 & 0xFFFFFFFE);
      if (v23)
      {
        unint64_t v24 = (int *)(v18 + ((4 * v5) & 0x3FFFFFFF8));
        do
        {
          uint64_t v25 = *v24++;
          v6 *= v25;
          --v23;
        }
        while (v23);
      }
    }
    else
    {
      uint64_t v6 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
    }
    if (!v5 || !v6)
    {
LABEL_33:
      sub_10029E05C(a2);
      goto LABEL_117;
    }
    sub_100295520((int *)a2, v5, *(uint64_t **)(a1 + 64), *(_DWORD *)a1 & 0xFFF, 0xFFFFFFFF, 0, 0);
    sub_10029B0D0(a2, -1, (uint64_t)v99);
    if (!v100)
    {
      long long v93 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&v93, 15), "dst.u != __null", 15);
      sub_1002D2278(-215, (uint64_t *)&v93, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 274);
    }
    *(_OWORD *)double v97 = 0u;
    memset(v98, 0, sizeof(v98));
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    *(_OWORD *)__dst = 0u;
    int v26 = *(_DWORD *)(a1 + 4);
    if (v26 < 1)
    {
      uint64_t v27 = 0;
      if (v26 < 0x20) {
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(*(void *)(a1 + 72) + 8 * (v26 - 1));
      if (v26 < 0x20)
      {
LABEL_59:
        uint64_t v43 = v26;
        if (v26)
        {
          uint64_t v44 = *(void *)(a1 + 64);
          if (v43 >= 8)
          {
            uint64_t v45 = v43 & 0x18;
            uint64_t v46 = v44 + 16;
            int v47 = &v95;
            unint64_t v48 = v43 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v49 = *(_OWORD *)(v46 - 16);
              *(void *)&long long v50 = (int)v49;
              *((void *)&v50 + 1) = SDWORD1(v49);
              long long v51 = v50;
              *(void *)&long long v50 = SDWORD2(v49);
              *((void *)&v50 + 1) = SHIDWORD(v49);
              long long v52 = v50;
              *(void *)&long long v50 = (int)*(_OWORD *)v46;
              *((void *)&v50 + 1) = (int)HIDWORD(*(void *)v46);
              long long v53 = v50;
              *(void *)&long long v50 = (int)*(void *)(v46 + 8);
              *((void *)&v50 + 1) = (int)HIDWORD(*(_OWORD *)v46);
              *(v47 - 2) = v51;
              *(v47 - 1) = v52;
              *int v47 = v53;
              v47[1] = v50;
              v47 += 4;
              v46 += 32;
              v48 -= 8;
            }
            while (v48);
            if (v45 == v43) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v45 = 0;
          }
          uint64_t v54 = v43 - v45;
          __n128 v55 = &__dst[v45 - 2];
          float64x2_t v56 = (int *)(v44 + 4 * v45);
          do
          {
            float64x2_t v57 = (void *)*v56++;
            *v55++ = v57;
            --v54;
          }
          while (v54);
        }
LABEL_67:
        __dst[v43 - 3] = (void *)((uint64_t)__dst[v43 - 3] * v27);
        sub_1002DBC58((uint64_t)v99, (unint64_t *)v89);
        *((void *)v89 + *(_DWORD *)(a1 + 4) - 1) *= v27;
        (*(void (**)(void, uint64_t, void))(**(void **)(v100 + 8) + 64))(*(void *)(v100 + 8), v100, *(void *)(a1 + 16));
        sub_1002D9C04((uint64_t)v99);
        goto LABEL_117;
      }
    }
    float64x2x4_t v87 = 0;
    float64x2x4_t v88 = 0;
    qmemcpy((void *)sub_1002D19D8(&v87, 22), "dims >= 0 && dims < 32", 22);
    sub_1002D2278(-215, (uint64_t *)&v87, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 276);
  }
  int v7 = *(_DWORD *)(a1 + 4);
  if (v7 > 2)
  {
    sub_100295520((int *)a2, v7, *(uint64_t **)(a1 + 64), *(_DWORD *)a1 & 0xFFF, 0xFFFFFFFF, 0, 0);
    if (sub_10029A230((_DWORD *)a2) == 0x10000)
    {
      uint64_t v13 = *(void *)(a2 + 8);
      long long v14 = *(_OWORD *)(v13 + 16);
      long long v93 = *(_OWORD *)v13;
      *(_OWORD *)__dst = v14;
      long long v95 = *(_OWORD *)(v13 + 32);
      uint64_t v15 = *(void *)(v13 + 56);
      *(void *)&long long v96 = *(void *)(v13 + 48);
      *((void *)&v96 + 1) = v15;
      v97[0] = (char *)&v93 + 8;
      v97[1] = v98;
      v98[0] = 0uLL;
      if (v15) {
        atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
      }
      if (*(int *)(v13 + 4) > 2)
      {
        DWORD1(v93) = 0;
        sub_1002931A8((uint64_t)&v93, v13);
      }
      else
      {
        uint64_t v16 = *(void **)(v13 + 72);
        int v17 = v97[1];
        *(void *)v97[1] = *v16;
        v17[1] = v16[1];
      }
    }
    else
    {
      sub_100299554(a2, -1, (uint64_t)&v93);
    }
    if (*(void **)(a1 + 16) != __dst[0])
    {
      uint64_t v29 = *(unsigned int *)(a1 + 4);
      if ((int)v29 >= 3)
      {
        uint64_t v31 = *(void *)(a1 + 64);
        long long v32 = (int *)(v31 + 4);
        uint64_t v33 = 1;
        uint64_t v34 = v29 & 0xFFFFFFFE;
        uint64_t v35 = 1;
        do
        {
          v33 *= *(v32 - 1);
          v35 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        uint64_t v30 = v35 * v33;
        uint64_t v36 = v29 - (v29 & 0xFFFFFFFE);
        if (v36)
        {
          float32x4_t v37 = (int *)(v31 + ((4 * v29) & 0x3FFFFFFF8));
          do
          {
            uint64_t v38 = *v37++;
            v30 *= v38;
            --v36;
          }
          while (v36);
        }
      }
      else
      {
        uint64_t v30 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
      }
      if (v30)
      {
        v99[0] = a1;
        v99[1] = (uint64_t)&v93;
        float64x2x4_t v87 = 0;
        float64x2x4_t v88 = 0;
        sub_10029127C((uint64_t)v89, v99, (uint64_t)&v87, 2);
        int v39 = *(_DWORD *)(a1 + 4);
        BOOL v40 = __OFSUB__(v39, 1);
        int v41 = v39 - 1;
        if (v41 < 0 != v40) {
          uint64_t v42 = 0;
        }
        else {
          uint64_t v42 = *(void *)(*(void *)(a1 + 72) + 8 * v41);
        }
        size_t v58 = v42 * *((void *)&v89[2] + 1);
        uint64_t v59 = -1;
        while ((unint64_t)++v59 < *(void *)&v89[2])
        {
          memcpy(v88, v87, v58);
          sub_1002912C8((uint64_t)v89);
        }
      }
    }
    if (*((void *)&v96 + 1)
      && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v96 + 1) + 20), 0xFFFFFFFF) == 1)
    {
      sub_1002932F4((uint64_t)&v93);
    }
    *((void *)&v96 + 1) = 0;
    *(_OWORD *)__dst = 0u;
    long long v95 = 0u;
    if (SDWORD1(v93) >= 1)
    {
      uint64_t v60 = 0;
      int v61 = v97[0];
      do
        v61[v60++] = 0;
      while (v60 < SDWORD1(v93));
    }
    int v62 = v97[1];
    if (v97[1] != v98) {
      goto LABEL_116;
    }
    goto LABEL_117;
  }
  sub_10029EDE8(a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), *(_DWORD *)a1 & 0xFFF, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    long long v9 = *(_OWORD *)(v8 + 16);
    long long v93 = *(_OWORD *)v8;
    *(_OWORD *)__dst = v9;
    long long v95 = *(_OWORD *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 56);
    *(void *)&long long v96 = *(void *)(v8 + 48);
    *((void *)&v96 + 1) = v10;
    v97[0] = (char *)&v93 + 8;
    v97[1] = v98;
    v98[0] = 0uLL;
    if (v10) {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
    }
    if (*(int *)(v8 + 4) > 2)
    {
      DWORD1(v93) = 0;
      sub_1002931A8((uint64_t)&v93, v8);
    }
    else
    {
      int v11 = *(void **)(v8 + 72);
      uint64_t v12 = v97[1];
      *(void *)v97[1] = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v93);
  }
  if (*(void **)(a1 + 16) != __dst[0] && *(int *)(a1 + 8) >= 1 && *(int *)(a1 + 12) >= 1)
  {
    if (sub_10029A230((_DWORD *)a2) != 196608
      && sub_10029A230((_DWORD *)a2) != 786432
      && sub_10029A230((_DWORD *)a2) != 917504)
    {
LABEL_100:
      int v76 = *(_DWORD *)(a1 + 8);
      int v75 = *(_DWORD *)(a1 + 12);
      if ((*(_DWORD *)a1 & v93 & 0x4000) != 0 && v76 * v75 == v76 * (uint64_t)v75)
      {
        v75 *= v76;
        int v76 = 1;
      }
      int v77 = *(_DWORD *)(a1 + 4);
      BOOL v40 = __OFSUB__(v77, 1);
      int v78 = v77 - 1;
      if (v78 < 0 != v40) {
        uint64_t v79 = 0;
      }
      else {
        uint64_t v79 = *(void *)(*(void *)(a1 + 72) + 8 * v78);
      }
      if (v76)
      {
        unint64_t v80 = *(char **)(a1 + 16);
        long long v81 = (char *)__dst[0];
        size_t v82 = v79 * v75;
        do
        {
          --v76;
          memcpy(v81, v80, v82);
          v80 += *(void *)(a1 + 80);
          v81 += *(void *)&v98[0];
        }
        while (v76);
      }
      goto LABEL_109;
    }
    if (SDWORD1(v93) < 3)
    {
      int v28 = HIDWORD(v93) * DWORD2(v93);
      goto LABEL_87;
    }
    if (DWORD1(v93) >= 8)
    {
      uint64_t v63 = DWORD1(v93) & 0xFFFFFFF8;
      uint64_t v64 = (int32x4_t *)((char *)v97[0] + 16);
      v65.i64[0] = 0x100000001;
      v65.i64[1] = 0x100000001;
      uint64_t v66 = v63;
      v67.i64[0] = 0x100000001;
      v67.i64[1] = 0x100000001;
      do
      {
        int32x4_t v65 = vmulq_s32(v64[-1], v65);
        int32x4_t v67 = vmulq_s32(*v64, v67);
        v64 += 2;
        v66 -= 8;
      }
      while (v66);
      int8x16_t v68 = (int8x16_t)vmulq_s32(v67, v65);
      *(int32x2_t *)v68.i8 = vmul_s32(*(int32x2_t *)v68.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL));
      int v28 = v68.i32[0] * v68.i32[1];
      if (v63 == DWORD1(v93))
      {
LABEL_87:
        sub_1002977F4((uint64_t)&v93, 0, v28, (uint64_t)v89);
        if (*((void *)&v96 + 1)
          && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v96 + 1) + 20), 0xFFFFFFFF) == 1)
        {
          sub_1002932F4((uint64_t)&v93);
        }
        if (SDWORD1(v93) >= 1)
        {
          uint64_t v72 = 0;
          uint64_t v73 = v97[0];
          do
            v73[v72++] = 0;
          while (v72 < SDWORD1(v93));
        }
        long long v93 = v89[0];
        *(_OWORD *)__dst = v89[1];
        long long v95 = v89[2];
        long long v96 = v89[3];
        if (v97[1] == v98)
        {
          uint64_t v74 = v91;
          if (SDWORD1(v89[0]) <= 2) {
            goto LABEL_95;
          }
        }
        else
        {
          j__free(v97[1]);
          v97[0] = (char *)&v93 + 8;
          v97[1] = v98;
          uint64_t v74 = v91;
          if (SDWORD1(v89[0]) <= 2)
          {
LABEL_95:
            v98[0] = *v74;
            goto LABEL_98;
          }
        }
        v97[0] = v90;
        v97[1] = v74;
        uint64_t v74 = v92;
        float64x2_t v90 = (char *)v89 + 8;
        uint64_t v91 = v92;
LABEL_98:
        LODWORD(v89[0]) = 1124007936;
        memset((char *)v89 + 4, 0, 60);
        if (v74 != (_OWORD *)v92) {
          j__free(v74);
        }
        goto LABEL_100;
      }
    }
    else
    {
      uint64_t v63 = 0;
      int v28 = 1;
    }
    uint64_t v69 = DWORD1(v93) - v63;
    int v70 = (int *)((char *)v97[0] + 4 * v63);
    do
    {
      int v71 = *v70++;
      v28 *= v71;
      --v69;
    }
    while (v69);
    goto LABEL_87;
  }
LABEL_109:
  if (*((void *)&v96 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v96 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v93);
  }
  *((void *)&v96 + 1) = 0;
  *(_OWORD *)__dst = 0u;
  long long v95 = 0u;
  if (SDWORD1(v93) >= 1)
  {
    uint64_t v83 = 0;
    float64x2_t v84 = v97[0];
    do
      v84[v83++] = 0;
    while (v83 < SDWORD1(v93));
  }
  int v62 = v97[1];
  if (v97[1] != v98) {
LABEL_116:
  }
    j__free(v62);
LABEL_117:
  if (v86) {
    sub_1002D6888(v85);
  }
}

void sub_100254A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100254AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002D6AE8(v68, &off_100494DD0);
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v6 = *(void *)(a3 + 8);
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v60 = *(_OWORD *)v6;
    long long v61 = v7;
    long long v62 = *(_OWORD *)(v6 + 32);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v63 = *(void *)(v6 + 48);
    uint64_t v64 = v8;
    int32x4_t v65 = (_DWORD *)&v60 + 2;
    uint64_t v66 = v67;
    v67[0] = 0;
    v67[1] = 0;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v60) = 0;
      sub_1002931A8((uint64_t)&v60, v6);
    }
    else
    {
      long long v9 = *(void **)(v6 + 72);
      uint64_t v10 = v66;
      *(void *)uint64_t v66 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)&v60);
  }
  if (!(void)v61)
  {
    sub_10025401C(a1, a2);
    goto LABEL_81;
  }
  unint64_t v11 = ((unint64_t)v60 >> 3) & 0x1FF;
  if ((v60 & 7) != 0 || v11 && v11 != ((*(_DWORD *)a1 >> 3) & 0x1FF))
  {
    *(_OWORD *)__n128 v55 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v55, 44), "mask.depth() == 0 && (mcn == 1 || mcn == cn)", 44);
    sub_1002D2278(-215, (uint64_t *)v55, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 381);
  }
  if (*(int *)(a1 + 4) <= 2)
  {
    uint64_t v12 = *(_DWORD **)(a1 + 64);
    if (v12[1] != v65[1] || *v12 != *v65)
    {
      *(_OWORD *)__n128 v55 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(v55, 21), "size() == mask.size()", 21);
      sub_1002D2278(-215, (uint64_t *)v55, "copyTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 385);
    }
  }
  *(_DWORD *)__n128 v55 = 1124007936;
  memset(&v55[4], 0, 60);
  float64x2_t v56 = &v55[8];
  float64x2_t v57 = &v58;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    long long v14 = *(_OWORD *)(v13 + 16);
    long long v47 = *(_OWORD *)v13;
    long long v48 = v14;
    long long v49 = *(_OWORD *)(v13 + 32);
    uint64_t v15 = *(void *)(v13 + 56);
    uint64_t v50 = *(void *)(v13 + 48);
    uint64_t v51 = v15;
    long long v52 = (char *)&v47 + 8;
    long long v53 = v54;
    v54[0] = 0;
    v54[1] = 0;
    if (v15) {
      atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
    }
    if (*(int *)(v13 + 4) > 2)
    {
      DWORD1(v47) = 0;
      sub_1002931A8((uint64_t)&v47, v13);
    }
    else
    {
      uint64_t v16 = *(void **)(v13 + 72);
      int v17 = v53;
      *(void *)long long v53 = *v16;
      v17[1] = v16[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v47);
  }
  sub_100295520((int *)a2, *(_DWORD *)(a1 + 4), *(uint64_t **)(a1 + 64), *(_DWORD *)a1 & 0xFFF, 0xFFFFFFFF, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v18 = *(void *)(a2 + 8);
    long long v19 = *(_OWORD *)(v18 + 16);
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v18;
    *(_OWORD *)&v73[16] = v19;
    *(_OWORD *)&v73[32] = *(_OWORD *)(v18 + 32);
    uint64_t v20 = *(void *)(v18 + 56);
    *(void *)&v73[48] = *(void *)(v18 + 48);
    *(void *)&v73[56] = v20;
    uint64_t v74 = &v73[8];
    int v75 = v76;
    v76[0] = 0;
    v76[1] = 0;
    if (v20) {
      atomic_fetch_add((atomic_uint *volatile)(v20 + 20), 1u);
    }
    if (*(int *)(v18 + 4) > 2)
    {
      *(_DWORD *)&v73[4] = 0;
      sub_1002931A8((uint64_t)v73, v18);
    }
    else
    {
      uint64_t v21 = *(void **)(v18 + 72);
      uint64_t v22 = v75;
      *int v75 = *v21;
      v22[1] = v21[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)v73);
  }
  if (*(void *)&v55[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v55[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v55);
  }
  if (*(int *)&v55[4] >= 1)
  {
    uint64_t v23 = 0;
    unint64_t v24 = v56;
    do
      *(_DWORD *)&v24[4 * v23++] = 0;
    while (v23 < *(int *)&v55[4]);
  }
  *(_OWORD *)__n128 v55 = *(_OWORD *)v73;
  *(_OWORD *)&v55[16] = *(_OWORD *)&v73[16];
  *(_OWORD *)&v55[32] = *(_OWORD *)&v73[32];
  *(_OWORD *)&v55[48] = *(_OWORD *)&v73[48];
  if (v57 == &v58)
  {
    uint64_t v25 = v75;
    if (*(int *)&v73[4] <= 2) {
      goto LABEL_40;
    }
  }
  else
  {
    j__free(v57);
    float64x2_t v56 = &v55[8];
    float64x2_t v57 = &v58;
    uint64_t v25 = v75;
    if (*(int *)&v73[4] <= 2)
    {
LABEL_40:
      uint64_t v58 = *v25;
      uint64_t v59 = v25[1];
      goto LABEL_43;
    }
  }
  float64x2_t v56 = v74;
  float64x2_t v57 = v25;
  uint64_t v25 = v76;
  uint64_t v74 = &v73[8];
  int v75 = v76;
LABEL_43:
  *(_DWORD *)uint64_t v73 = 1124007936;
  memset(&v73[4], 0, 60);
  if (v25 != v76) {
    j__free(v25);
  }
  if (*(void *)&v55[16] != (void)v48)
  {
    memset(v73, 0, 32);
    sub_100255390((uint64_t)v55, (uint64_t)v73);
  }
  if (v51 && atomic_fetch_add((atomic_uint *volatile)(v51 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v47);
  }
  uint64_t v51 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  if (SDWORD1(v47) >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v52;
    do
      *(_DWORD *)&v27[4 * v26++] = 0;
    while (v26 < SDWORD1(v47));
  }
  if (v53 != v54) {
    j__free(v53);
  }
  int v28 = v11 + 1;
  unint64_t v46 = 0;
  if (v11)
  {
    int v29 = *(_DWORD *)(a1 + 4);
    unint64_t v30 = (0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF;
LABEL_57:
    unint64_t v46 = v30;
    goto LABEL_58;
  }
  int v29 = *(_DWORD *)(a1 + 4);
  if (v29 <= 0)
  {
    unint64_t v30 = 0;
    goto LABEL_57;
  }
  unint64_t v30 = *(void *)(*(void *)(a1 + 72) + 8 * (v29 - 1));
  unint64_t v46 = v30;
  if (v30 > 0x20)
  {
    long long v32 = sub_100253DBC;
    if (v29 <= 2) {
      goto LABEL_62;
    }
    goto LABEL_68;
  }
LABEL_58:
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *))qword_1004D2E78[v30];
  if (v31) {
    long long v32 = v31;
  }
  else {
    long long v32 = sub_100253DBC;
  }
  if (v29 <= 2)
  {
LABEL_62:
    int v33 = *(_DWORD *)(a1 + 8);
    int v34 = *(_DWORD *)(a1 + 12);
    if ((*(_DWORD *)a1 & *(_DWORD *)v55 & v60 & 0x4000) != 0
      && (uint64_t v35 = v34 * (uint64_t)v28 * v33, v35 == (int)v35))
    {
      int v33 = 1;
    }
    else
    {
      LODWORD(v35) = v34 * v28;
    }
    uint64_t v38 = *(void *)(a1 + 16);
    uint64_t v39 = *(void *)(a1 + 80);
    v45[0] = v35;
    v45[1] = v33;
    v32(v38, v39, v61, v67[0], *(void *)&v55[16], v58, v45, &v46);
    goto LABEL_73;
  }
LABEL_68:
  *(void *)uint64_t v73 = a1;
  *(void *)&v73[8] = v55;
  *(void *)&v73[16] = &v60;
  *(void *)&v73[24] = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  sub_10029127C((uint64_t)&v47, (uint64_t *)v73, (uint64_t)&v70, -1);
  int v36 = v28 * DWORD2(v49);
  uint64_t v37 = -1;
  while (++v37 < (unint64_t)v49)
  {
    v44[0] = v36;
    v44[1] = 1;
    v32(v70, 0, v72, 0, v71, 0, v44, &v46);
    sub_1002912C8((uint64_t)&v47);
  }
LABEL_73:
  if (*(void *)&v55[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v55[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v55);
  }
  *(void *)&v55[56] = 0;
  memset(&v55[16], 0, 32);
  if (*(int *)&v55[4] >= 1)
  {
    uint64_t v40 = 0;
    int v41 = v56;
    do
      *(_DWORD *)&v41[4 * v40++] = 0;
    while (v40 < *(int *)&v55[4]);
  }
  if (v57 != &v58) {
    j__free(v57);
  }
LABEL_81:
  if (v64 && atomic_fetch_add((atomic_uint *volatile)(v64 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v60);
  }
  uint64_t v64 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  if (SDWORD1(v60) >= 1)
  {
    uint64_t v42 = 0;
    uint64_t v43 = v65;
    do
      v43[v42++] = 0;
    while (v42 < SDWORD1(v60));
  }
  if (v66 != v67) {
    j__free(v66);
  }
  if (v69) {
    sub_1002D6888(v68);
  }
}

void sub_1002552A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100255358(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_10025536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_1000094F4((uint64_t)&a25);
  sub_1000094F4((uint64_t)&a37);
  sub_10020FA00(v37 - 216);
  _Unwind_Resume(a1);
}

uint64_t sub_100255390(uint64_t a1, uint64_t a2)
{
  sub_1002D6AE8(v22, &off_100494DF0);
  uint64_t v25 = a1;
  __dst = 0;
  sub_10029127C((uint64_t)v18, &v25, (uint64_t)&__dst, 1);
  int v4 = *(_DWORD *)(a1 + 4);
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8 * v6);
  }
  size_t v8 = v7 * v20;
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)a2), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a2 + 16)))))))
  {
    if (v19)
    {
      sub_100298DD4((double *)a2, (uint64_t)__src, *(_DWORD *)a1 & 0xFFF, 0xCu);
      if (v8)
      {
        size_t v9 = 0;
        unint64_t v10 = 12 * ((0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF);
        unint64_t v11 = v8;
        do
        {
          if (v10 >= v11) {
            size_t v12 = v11;
          }
          else {
            size_t v12 = v10;
          }
          if (v12 >= 0x61)
          {
            v17[0] = 0;
            v17[1] = 0;
            uint64_t v13 = sub_1002D19D8(v17, 20);
            *(_DWORD *)(v13 + 16) = 695361900;
            *(_OWORD *)uint64_t v13 = *(_OWORD *)"sz <= sizeof(scalar)";
            sub_1002D2278(-215, v17, "operator=", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 451);
          }
          memcpy((char *)__dst + v9, __src, v12);
          v9 += v10;
          v11 -= v10;
        }
        while (v9 < v8);
      }
      if (v19 >= 2)
      {
        for (unint64_t i = 1; i < v19; ++i)
        {
          sub_1002912C8((uint64_t)v18);
          memcpy(__dst, *(const void **)(a1 + 16), v8);
        }
      }
    }
  }
  else
  {
    uint64_t v16 = -1;
    while (++v16 < v19)
    {
      bzero(__dst, v8);
      sub_1002912C8((uint64_t)v18);
    }
  }
  if (v23) {
    sub_1002D6888(v22);
  }
  return a1;
}

void sub_1002555D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100255630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002D6AE8(v99, &off_100494E10);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_132;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  if ((int)v6 >= 3)
  {
    uint64_t v8 = *(void *)(a1 + 64);
    size_t v9 = (int *)(v8 + 4);
    uint64_t v10 = 1;
    uint64_t v11 = v6 & 0xFFFFFFFE;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    uint64_t v7 = v12 * v10;
    uint64_t v13 = v6 - (v6 & 0xFFFFFFFE);
    if (v13)
    {
      long long v14 = (int *)(v8 + ((4 * v6) & 0x3FFFFFFF8));
      do
      {
        uint64_t v15 = *v14++;
        v7 *= v15;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    uint64_t v7 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8);
  }
  if (!v6 || !v7) {
    goto LABEL_132;
  }
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v16 = *(void *)(a2 + 8);
    long long v17 = *(_OWORD *)(v16 + 16);
    long long v91 = *(_OWORD *)v16;
    long long v92 = v17;
    long long v93 = *(_OWORD *)(v16 + 32);
    uint64_t v18 = *(void *)(v16 + 56);
    uint64_t v94 = *(void *)(v16 + 48);
    uint64_t v95 = v18;
    long long v96 = (_DWORD *)&v91 + 2;
    double v97 = v98;
    v98[0] = 0;
    v98[1] = 0;
    if (v18) {
      atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
    }
    if (*(int *)(v16 + 4) > 2)
    {
      DWORD1(v91) = 0;
      sub_1002931A8((uint64_t)&v91, v16);
    }
    else
    {
      unint64_t v19 = *(void **)(v16 + 72);
      uint64_t v20 = v97;
      *(void *)double v97 = *v19;
      v20[1] = v19[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v91);
  }
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v21 = *(void *)(a3 + 8);
    long long v22 = *(_OWORD *)(v21 + 16);
    long long v83 = *(_OWORD *)v21;
    long long v84 = v22;
    long long v85 = *(_OWORD *)(v21 + 32);
    uint64_t v23 = *(void *)(v21 + 56);
    uint64_t v86 = *(void *)(v21 + 48);
    uint64_t v87 = v23;
    float64x2x4_t v88 = (_DWORD *)&v83 + 2;
    float64x2_t v89 = v90;
    v90[0] = 0;
    v90[1] = 0;
    if (v23) {
      atomic_fetch_add((atomic_uint *volatile)(v23 + 20), 1u);
    }
    if (*(int *)(v21 + 4) > 2)
    {
      DWORD1(v83) = 0;
      sub_1002931A8((uint64_t)&v83, v21);
    }
    else
    {
      unint64_t v24 = *(void **)(v21 + 72);
      uint64_t v25 = v89;
      *(void *)float64x2_t v89 = *v24;
      v25[1] = v24[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)&v83);
  }
  unsigned int v26 = *(_DWORD *)a1;
  sub_10029A230((_DWORD *)a2);
  if (SDWORD1(v91) > 2) {
    goto LABEL_29;
  }
  if ((v91 & 0x4000) == 0) {
    goto LABEL_29;
  }
  int v27 = *v96;
  int v28 = v96[1];
  if (v28 != 1 && v27 != 1) {
    goto LABEL_29;
  }
  unsigned int v40 = (v26 >> 3) & 0x1FF;
  BOOL v41 = v28 == v40 + 1;
  if (v27 != 1) {
    BOOL v41 = 0;
  }
  BOOL v42 = v27 == v40 + 1 || v27 == 1;
  if (v28 != 1) {
    BOOL v42 = 0;
  }
  if (!v42 && !v41 && (v28 != 1 || v27 != 4 || v40 > 3 || (v91 & 0xFFF) != 6))
  {
LABEL_29:
    uint64_t v101 = 0;
    unint64_t v102 = 0;
    qmemcpy((void *)sub_1002D19D8(&v101, 60), "checkScalar(value, type(), _value.kind(), _InputArray::MAT)", 60);
    sub_1002D2278(-215, (uint64_t *)&v101, "setTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 523);
  }
  unsigned int v29 = (v83 >> 3) & 0x1FF;
  if ((void)v84)
  {
    if (SDWORD1(v83) >= 3)
    {
      uint64_t v31 = v88 + 1;
      uint64_t v32 = 1;
      uint64_t v33 = DWORD1(v83) & 0xFFFFFFFE;
      uint64_t v34 = 1;
      do
      {
        v32 *= *(v31 - 1);
        v34 *= *v31;
        v31 += 2;
        v33 -= 2;
      }
      while (v33);
      uint64_t v30 = v34 * v32;
      unint64_t v35 = DWORD1(v83) - (unint64_t)(DWORD1(v83) & 0xFFFFFFFE);
      if (v35)
      {
        int v36 = (_DWORD *)((char *)v88 + ((4 * DWORD1(v83)) & 0x3FFFFFFF8));
        do
        {
          uint64_t v37 = *v36++;
          v30 *= v37;
          --v35;
        }
        while (v35);
      }
    }
    else
    {
      uint64_t v30 = SHIDWORD(v83) * (uint64_t)SDWORD2(v83);
    }
    if (DWORD1(v83) && v30)
    {
      if ((v83 & 7) != 0 || v29 && v29 != ((*(_DWORD *)a1 >> 3) & 0x1FF)) {
        goto LABEL_68;
      }
      uint64_t v38 = *(_DWORD **)(a1 + 64);
      unint64_t v39 = *(v38 - 1);
      if (v39 != *(v88 - 1)) {
        goto LABEL_68;
      }
      if (v39 == 2)
      {
        if (*v38 == *v88 && v38[1] == v88[1]) {
          goto LABEL_69;
        }
LABEL_68:
        uint64_t v101 = 0;
        unint64_t v102 = 0;
        qmemcpy((void *)sub_1002D19D8(&v101, 83), "mask.empty() || (mask.depth() == 0 && (mcn == 1 || mcn == cn) && size == mask.size)", 83);
        sub_1002D2278(-215, (uint64_t *)&v101, "setTo", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 525);
      }
      if ((int)v39 >= 1)
      {
        if (*v38 != *v88) {
          goto LABEL_68;
        }
        uint64_t v43 = 1;
        do
        {
          unint64_t v44 = v43;
          if (v39 == v43) {
            break;
          }
          int v45 = v38[v43];
          int v46 = v88[v43++];
        }
        while (v45 == v46);
        if (v44 < v39) {
          goto LABEL_68;
        }
      }
    }
  }
LABEL_69:
  unint64_t v82 = 0;
  if (v29)
  {
    unint64_t v47 = (0x88442211uLL >> (4 * (*(_DWORD *)a1 & 7u))) & 0xF;
LABEL_71:
    unint64_t v82 = v47;
    goto LABEL_72;
  }
  int v51 = *(_DWORD *)(a1 + 4);
  if (v51 <= 0)
  {
    unint64_t v47 = 0;
    goto LABEL_71;
  }
  unint64_t v47 = *(void *)(*(void *)(a1 + 72) + 8 * (v51 - 1));
  unint64_t v82 = v47;
  if (v47 > 0x20)
  {
    long long v49 = sub_100253DBC;
    float64x2_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v106 = a1;
    if ((void)v84) {
      goto LABEL_76;
    }
LABEL_92:
    long long v60 = 0;
    goto LABEL_93;
  }
LABEL_72:
  long long v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, unint64_t *))qword_1004D2E78[v47];
  if (v48) {
    long long v49 = v48;
  }
  else {
    long long v49 = sub_100253DBC;
  }
  float64x2_t v107 = 0;
  uint64_t v108 = 0;
  uint64_t v106 = a1;
  if (!(void)v84) {
    goto LABEL_92;
  }
LABEL_76:
  if (SDWORD1(v83) >= 3)
  {
    long long v52 = v88 + 1;
    uint64_t v53 = 1;
    uint64_t v54 = DWORD1(v83) & 0xFFFFFFFE;
    uint64_t v55 = 1;
    do
    {
      v53 *= *(v52 - 1);
      v55 *= *v52;
      v52 += 2;
      v54 -= 2;
    }
    while (v54);
    uint64_t v50 = v55 * v53;
    unint64_t v56 = DWORD1(v83) - (unint64_t)(DWORD1(v83) & 0xFFFFFFFE);
    if (v56)
    {
      float64x2_t v57 = (_DWORD *)((char *)v88 + ((4 * DWORD1(v83)) & 0x3FFFFFFF8));
      do
      {
        uint64_t v58 = *v57++;
        v50 *= v58;
        --v56;
      }
      while (v56);
    }
  }
  else
  {
    uint64_t v50 = SHIDWORD(v83) * (uint64_t)SDWORD2(v83);
  }
  if (v50) {
    BOOL v59 = DWORD1(v83) == 0;
  }
  else {
    BOOL v59 = 1;
  }
  if (v59) {
    goto LABEL_92;
  }
  long long v60 = &v83;
LABEL_93:
  float64x2_t v107 = v60;
  uint64_t v108 = 0;
  int16x8_t v104 = 0;
  uint64_t v105 = 0;
  sub_10029127C((uint64_t)v79, &v106, (uint64_t)&v104, -1);
  signed int v61 = v29 + 1;
  int v62 = (v29 + 1) * v81;
  unint64_t v63 = (v82 + 1023) / v82;
  if (v62 < (int)v63) {
    LODWORD(v63) = (v29 + 1) * v81;
  }
  int v64 = (int)v63 / v61 * v61;
  uint64_t v101 = v103;
  unint64_t v102 = v82 * v64 + 32;
  if (v102 >= 0x409) {
    operator new[]();
  }
  sub_10020FEC0((uint64_t)&v91, *(_DWORD *)a1 & 0xFFF, v103, (int)v63 / v61);
  uint64_t v77 = a1;
  if (v62 <= 0)
  {
    uint64_t v70 = -1;
    while (++v70 < v80)
      sub_1002912C8((uint64_t)v79);
  }
  else
  {
    for (unint64_t i = 0; i < v80; ++i)
    {
      for (int j = 0; j < v62; j += v64)
      {
        while (1)
        {
          int v67 = v62 - j;
          if (v62 - j >= v64) {
            int v67 = v64;
          }
          uint64_t v68 = v67;
          unint64_t v69 = v82 * v67;
          if (v105) {
            break;
          }
          memcpy(v104, v103, v82 * v67);
          v104 += v69;
          j += v64;
          if (j >= v62) {
            goto LABEL_99;
          }
        }
        v78[0] = v67;
        v78[1] = 1;
        v49((uint64_t)v103, 0, v105, 0, (uint64_t)v104, 0, v78, &v82);
        v105 += v68;
        v104 += v69;
      }
LABEL_99:
      sub_1002912C8((uint64_t)v79);
    }
  }
  if (v101 != v103 && v101 != 0) {
    operator delete[]();
  }
  a1 = v77;
  if (v87 && atomic_fetch_add((atomic_uint *volatile)(v87 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v83);
  }
  uint64_t v87 = 0;
  long long v84 = 0u;
  long long v85 = 0u;
  if (SDWORD1(v83) >= 1)
  {
    uint64_t v72 = 0;
    uint64_t v73 = v88;
    do
      v73[v72++] = 0;
    while (v72 < SDWORD1(v83));
  }
  if (v89 != v90) {
    j__free(v89);
  }
  if (v95 && atomic_fetch_add((atomic_uint *volatile)(v95 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v91);
  }
  uint64_t v95 = 0;
  long long v92 = 0u;
  long long v93 = 0u;
  if (SDWORD1(v91) >= 1)
  {
    uint64_t v74 = 0;
    int v75 = v96;
    do
      v75[v74++] = 0;
    while (v74 < SDWORD1(v91));
  }
  if (v97 != v98) {
    j__free(v97);
  }
LABEL_132:
  if (v100) {
    sub_1002D6888(v99);
  }
  return a1;
}

void sub_100255ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100255F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47)
{
  if (a47 != v47 && a47 != 0) {
    operator delete[]();
  }
  sub_1000094F4((uint64_t)&a21);
  sub_1000094F4((uint64_t)&a33);
  sub_10020FA00((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_100255FCC(uint64_t a1, uint64_t a2, int a3)
{
  sub_1002D6AE8(v429, &off_100494E30);
  if ((int)sub_10029C9C4(a1, -1) >= 3)
  {
    long long v420 = 0uLL;
    *(_OWORD *)sub_1002D19D8(&v420, 16) = *(_OWORD *)"_src.dims() <= 2";
    sub_1002D2278(-215, (uint64_t *)&v420, "flip", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 742);
  }
  sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)&v428);
  if (a3 < 0)
  {
    if (v428.i32[0] == 1) {
      int v6 = 0;
    }
    else {
      int v6 = a3;
    }
    if (v428.i32[1] == 1) {
      a3 = 1;
    }
    else {
      a3 = v6;
    }
    if (a3 < 1) {
      goto LABEL_14;
    }
  }
  else if (a3 < 1)
  {
    goto LABEL_14;
  }
  if (v428.i32[0] == 1)
  {
LABEL_18:
    sub_10029DC34(a1, (_DWORD *)a2);
    goto LABEL_19;
  }
LABEL_14:
  if (!a3 && v428.i32[1] == 1 || a3 < 0 && *(void *)&v428 == 0x100000001) {
    goto LABEL_18;
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    long long v8 = *(_OWORD *)(v7 + 16);
    long long v420 = *(_OWORD *)v7;
    long long v421 = v8;
    long long v422 = *(_OWORD *)(v7 + 32);
    uint64_t v9 = *(void *)(v7 + 56);
    uint64_t v423 = *(void *)(v7 + 48);
    uint64_t v424 = v9;
    v425 = (int *)&v420 + 2;
    v426 = v427;
    v427[1] = 0;
    v427[0] = 0;
    if (v9) {
      atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 1u);
    }
    if (*(int *)(v7 + 4) > 2)
    {
      DWORD1(v420) = 0;
      sub_1002931A8((uint64_t)&v420, v7);
    }
    else
    {
      uint64_t v10 = *(void **)(v7 + 72);
      uint64_t v11 = v426;
      *(void *)v426 = *v10;
      v11[1] = v10[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v420);
  }
  unsigned int v12 = v420 & 0xFFF;
  int32x2_t v419 = v428;
  sub_10029E6D4(a2, &v419, v12, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    long long v14 = *(_OWORD *)(v13 + 16);
    long long v411 = *(_OWORD *)v13;
    long long v412 = v14;
    long long v413 = *(_OWORD *)(v13 + 32);
    uint64_t v15 = *(void *)(v13 + 56);
    uint64_t v414 = *(void *)(v13 + 48);
    uint64_t v415 = v15;
    v416 = (int *)&v411 + 2;
    v417 = v418;
    v418[1] = 0;
    v418[0] = 0;
    if (v15) {
      atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
    }
    if (*(int *)(v13 + 4) > 2)
    {
      DWORD1(v411) = 0;
      sub_1002931A8((uint64_t)&v411, v13);
    }
    else
    {
      uint64_t v16 = *(void **)(v13 + 72);
      long long v17 = v417;
      *(void *)v417 = *v16;
      v17[1] = v16[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v411);
  }
  unint64_t v18 = ((v12 >> 3) + 1) << ((0xFA50u >> (2 * (v12 & 7))) & 3);
  if (a3 > 0)
  {
    uint64_t v19 = v427[0];
    uint64_t v20 = v412;
    uint64_t v21 = v418[0];
    uint64_t v22 = v421;
    int v23 = *v425;
    int v410 = v425[1];
    unint64_t v24 = &v410;
LABEL_38:
    v24[1] = v23;
    sub_10025787C(v22, v19, v20, v21, v24, v18);
    goto LABEL_366;
  }
  int v330 = a3;
  unint64_t v331 = ((v12 >> 3) + 1) << ((0xFA50u >> (2 * (v12 & 7))) & 3);
  uint64_t v25 = (*v425 - 1);
  if (*v425 >= 1)
  {
    int v26 = v425[1] * v331;
    uint64_t v27 = v418[0];
    uint64_t v28 = v412;
    uint64_t v29 = v427[0];
    uint64_t v30 = v421;
    uint64_t v31 = v418[0] * v25;
    unint64_t v32 = v412 + v418[0] * v25;
    uint64_t v33 = v427[0] * v25;
    unint64_t v34 = v421 + v33;
    uint64_t v35 = -v427[0];
    uint64_t v408 = -v418[0];
    unsigned int v36 = (*v425 + 1) >> 1;
    uint64_t v37 = v26 - 4;
    uint64_t v38 = v26;
    int v39 = v26 - 16;
    unsigned int v403 = v36;
    uint64_t v405 = v412;
    uint64_t v404 = v421;
    if (v26 < 16)
    {
      if (v26 < 4)
      {
        if (v26 >= 1)
        {
          unsigned int v40 = (unsigned char *)(v31 + v412 + 2);
          BOOL v41 = (char *)(v421 + 1);
          BOOL v42 = (unsigned char *)(v33 + v421 + 2);
          uint64_t v43 = (unsigned char *)(v412 + 1);
          do
          {
            char v44 = *(v41 - 1);
            *(v43 - 1) = *(v42 - 2);
            *(v40 - 2) = v44;
            if (v26 != 1)
            {
              char v45 = *v41;
              *uint64_t v43 = *(v42 - 1);
              *(v40 - 1) = v45;
              if (v26 != 2)
              {
                char v46 = v41[1];
                v43[1] = *v42;
                *unsigned int v40 = v46;
              }
            }
            v40 += v408;
            v41 += v29;
            v42 += v35;
            v43 += v27;
            --v36;
          }
          while (v36);
        }
        goto LABEL_365;
      }
      uint64_t v278 = 0;
      uint64_t v279 = v31 + v412;
      uint64_t v280 = v33 + v421;
      unint64_t v281 = 3;
      if (v37 > 3) {
        unint64_t v281 = v26 - 4;
      }
      uint64_t v282 = (v281 >> 2) + 1;
      uint64_t v283 = v421;
      uint64_t v284 = v412;
      while (1)
      {
        uint64_t v285 = v279 - v27 * v278;
        uint64_t v286 = v280 - v29 * v278;
        uint64_t v287 = v29 * v278 + v30;
        uint64_t v288 = v27 * v278 + v28;
        if ((((v284 | v283) | (v34 | v32)) & 3) != 0)
        {
          uint64_t v289 = 0;
LABEL_329:
          if (v289 + 1 > v26) {
            uint64_t v291 = v289 + 1;
          }
          else {
            uint64_t v291 = v26;
          }
          unint64_t v292 = v291 - v289;
          if (v292 < 8)
          {
            uint64_t v293 = v289;
            goto LABEL_334;
          }
          uint64_t v295 = v285 + v289;
          uint64_t v296 = v286 + v289;
          if ((unint64_t)(v295 - v296) < 0x20 || (uint64_t v297 = v287 + v289, (unint64_t)(v295 - v297) < 0x20))
          {
            uint64_t v293 = v289;
            unsigned int v36 = v403;
          }
          else
          {
            uint64_t v298 = v288 + v289;
            unsigned int v36 = v403;
            if ((unint64_t)(v298 - v296) < 0x20)
            {
              uint64_t v293 = v289;
            }
            else if ((unint64_t)(v298 - v297) < 0x20)
            {
              uint64_t v293 = v289;
            }
            else if ((unint64_t)(v295 - v298) < 0x20)
            {
              uint64_t v293 = v289;
            }
            else
            {
              if (v292 < 0x20)
              {
                unint64_t v299 = 0;
                goto LABEL_357;
              }
              unint64_t v299 = v292 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v307 = v289;
              unint64_t v308 = v292 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v309 = *(_OWORD *)(v283 + v307);
                long long v310 = *(_OWORD *)(v283 + v307 + 16);
                long long v311 = *(_OWORD *)(v34 + v307 + 16);
                v312 = (_OWORD *)(v284 + v307);
                _OWORD *v312 = *(_OWORD *)(v34 + v307);
                v312[1] = v311;
                v313 = (_OWORD *)(v32 + v307);
                _OWORD *v313 = v309;
                v313[1] = v310;
                v307 += 32;
                v308 -= 32;
              }
              while (v308);
              if (v292 == v299) {
                goto LABEL_322;
              }
              if ((v292 & 0x18) != 0)
              {
LABEL_357:
                unint64_t v314 = v292 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v293 = (v292 & 0xFFFFFFFFFFFFFFF8) + v289;
                uint64_t v315 = v283 + v289;
                unint64_t v316 = v34 + v289;
                uint64_t v317 = v284 + v289;
                unint64_t v318 = v32 + v289;
                do
                {
                  uint64_t v319 = *(void *)(v315 + v299);
                  *(void *)(v317 + v299) = *(void *)(v316 + v299);
                  *(void *)(v318 + v299) = v319;
                  v299 += 8;
                }
                while (v314 != v299);
                unsigned int v36 = v403;
                if (v292 == v314) {
                  goto LABEL_322;
                }
                goto LABEL_334;
              }
              uint64_t v293 = v299 + v289;
            }
          }
          do
          {
LABEL_334:
            char v294 = *(unsigned char *)(v283 + v293);
            *(unsigned char *)(v284 + v293) = *(unsigned char *)(v34 + v293);
            *(unsigned char *)(v32 + v293++) = v294;
          }
          while (v293 < v26);
          goto LABEL_322;
        }
        if (v281 < 0x6C) {
          break;
        }
        uint64_t v289 = 0;
        if ((unint64_t)(v285 - v286) < 0x20) {
          goto LABEL_327;
        }
        if ((unint64_t)(v285 - v287) < 0x20) {
          goto LABEL_327;
        }
        if ((unint64_t)(v288 - v286) < 0x20) {
          goto LABEL_327;
        }
        if ((unint64_t)(v288 - v287) < 0x20) {
          goto LABEL_327;
        }
        if ((unint64_t)(v285 - v288) < 0x20) {
          goto LABEL_327;
        }
        uint64_t v300 = 0;
        uint64_t v301 = v282 & 0x3FFFFFF8;
        do
        {
          long long v302 = *(_OWORD *)(v283 + v300);
          long long v303 = *(_OWORD *)(v283 + v300 + 16);
          long long v304 = *(_OWORD *)(v34 + v300 + 16);
          v305 = (_OWORD *)(v284 + v300);
          _OWORD *v305 = *(_OWORD *)(v34 + v300);
          v305[1] = v304;
          v306 = (_OWORD *)(v32 + v300);
          _OWORD *v306 = v302;
          v306[1] = v303;
          v300 += 32;
          v301 -= 8;
        }
        while (v301);
        uint64_t v289 = 4 * (v282 & 0x3FFFFFF8);
        if (v282 != (v282 & 0x3FFFFFF8)) {
          goto LABEL_327;
        }
LABEL_328:
        uint64_t v289 = v289;
        unsigned int v36 = v403;
        if ((int)v289 < v26) {
          goto LABEL_329;
        }
LABEL_322:
        ++v278;
        v283 += v29;
        v34 += v35;
        v284 += v27;
        v32 += v408;
        uint64_t v28 = v405;
        uint64_t v30 = v404;
        if (v278 == v36) {
          goto LABEL_365;
        }
      }
      uint64_t v289 = 0;
      do
      {
LABEL_327:
        int v290 = *(_DWORD *)(v283 + v289);
        *(_DWORD *)(v284 + v289) = *(_DWORD *)(v34 + v289);
        *(_DWORD *)(v32 + v289) = v290;
        v289 += 4;
      }
      while (v289 <= v37);
      goto LABEL_328;
    }
    uint64_t v47 = 0;
    uint64_t v48 = v39;
    uint64_t v356 = v33 + v421;
    uint64_t v357 = v31 + v412;
    uint64_t v329 = v31 + v412 + 16;
    uint64_t v328 = v33 + v421 + 16;
    uint64_t v324 = v412 + 16;
    uint64_t v325 = v421 + 16;
    if (v39 <= 15) {
      unint64_t v49 = 15;
    }
    else {
      unint64_t v49 = v39;
    }
    unint64_t v50 = v49 & 0x7FFFFFF0;
    uint64_t v51 = v50 + 20;
    if ((uint64_t)(v50 + 20) <= v37 + 1) {
      uint64_t v51 = v37 + 1;
    }
    unint64_t v354 = v51 - v50 - 17;
    uint64_t v358 = v31 + 12;
    unint64_t v359 = v49 & 0x7FFFFFF0;
    uint64_t v353 = v50 | 4;
    uint64_t v351 = v50 | 8;
    uint64_t v352 = v31 + v50 + 4;
    uint64_t v349 = v31 + v50 + 8;
    uint64_t v350 = v31 + 4;
    uint64_t v347 = v31 + 8;
    uint64_t v348 = v50 | 0xC;
    uint64_t v346 = v31 + v50 + 12;
    unint64_t v345 = v50 + 16;
    uint64_t v343 = v33 + 4;
    uint64_t v344 = v33 + v50 + 4;
    uint64_t v341 = v33 + 8;
    uint64_t v342 = v33 + v50 + 8;
    uint64_t v339 = v33 + 12;
    uint64_t v340 = v33 + v50 + 12;
    uint64_t v337 = v31 + v50 + 16;
    uint64_t v338 = v33 + v50 + 16;
    uint64_t v327 = (v49 >> 4) + 1;
    int v336 = v425[1] * v331;
    uint64_t v326 = ((v354 >> 2) + 1) & 0x7FFFFFFFFFFFFFF8;
    unint64_t v52 = v421;
    unint64_t v53 = v412;
    uint64_t v334 = v427[0];
    uint64_t v335 = v418[0];
    uint64_t v332 = v26 - 4;
    uint64_t v333 = -v427[0];
    unint64_t v355 = v49;
    while (1)
    {
      uint64_t v54 = v27 * v47;
      uint64_t v55 = v27 * v47 + v28;
      uint64_t v56 = v29 * v47;
      uint64_t v57 = v29 * v47 + v30;
      if ((((v53 | v52) | (v34 | v32)) & 3) != 0)
      {
        uint64_t v58 = 0;
LABEL_275:
        if (v58 + 1 > v38) {
          uint64_t v249 = v58 + 1;
        }
        else {
          uint64_t v249 = v38;
        }
        unint64_t v250 = v249 - v58;
        if (v250 < 8)
        {
          uint64_t v251 = v58;
          goto LABEL_313;
        }
        if ((unint64_t)(v357 - v54 - (v356 - v56)) < 0x20)
        {
          uint64_t v251 = v58;
        }
        else if ((unint64_t)(v357 - v54 - v57) < 0x20)
        {
          uint64_t v251 = v58;
        }
        else if ((unint64_t)(v55 - (v356 - v56)) < 0x20)
        {
          uint64_t v251 = v58;
        }
        else if ((unint64_t)(v55 - v57) < 0x20)
        {
          uint64_t v251 = v58;
        }
        else if ((unint64_t)(v357 - v54 - v55) < 0x20)
        {
          uint64_t v251 = v58;
        }
        else
        {
          if (v250 < 0x20)
          {
            unint64_t v252 = 0;
            goto LABEL_301;
          }
          unint64_t v252 = v250 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v264 = v58;
          unint64_t v265 = v250 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v266 = *(_OWORD *)(v52 + v264);
            long long v267 = *(_OWORD *)(v52 + v264 + 16);
            long long v268 = *(_OWORD *)(v34 + v264 + 16);
            v269 = (_OWORD *)(v53 + v264);
            _OWORD *v269 = *(_OWORD *)(v34 + v264);
            v269[1] = v268;
            v270 = (_OWORD *)(v32 + v264);
            _OWORD *v270 = v266;
            v270[1] = v267;
            v264 += 32;
            v265 -= 32;
          }
          while (v265);
          if (v250 == v252) {
            goto LABEL_54;
          }
          if ((v250 & 0x18) != 0)
          {
LABEL_301:
            unint64_t v271 = v250 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v251 = (v250 & 0xFFFFFFFFFFFFFFF8) + v58;
            unint64_t v272 = v52 + v58;
            unint64_t v273 = v34 + v58;
            unint64_t v274 = v53 + v58;
            unint64_t v275 = v32 + v58;
            do
            {
              uint64_t v276 = *(void *)(v272 + v252);
              *(void *)(v274 + v252) = *(void *)(v273 + v252);
              *(void *)(v275 + v252) = v276;
              v252 += 8;
            }
            while (v271 != v252);
            if (v250 == v271) {
              goto LABEL_54;
            }
            goto LABEL_313;
          }
          uint64_t v251 = v252 + v58;
        }
        do
        {
LABEL_313:
          char v277 = *(unsigned char *)(v52 + v251);
          *(unsigned char *)(v53 + v251) = *(unsigned char *)(v34 + v251);
          *(unsigned char *)(v32 + v251++) = v277;
        }
        while (v251 < v38);
        goto LABEL_54;
      }
      uint64_t v407 = v29 * v47 + v30;
      uint64_t v406 = v27 * v47 + v28;
      uint64_t v59 = 0;
      if (v49 < 0x6B0)
      {
LABEL_260:
        uint64_t v58 = 0;
        goto LABEL_266;
      }
      uint64_t v58 = 0;
      if (v28 + v358 - v54 + v359 < v28 + v358 - v54) {
        goto LABEL_266;
      }
      v400.i64[1] = v28 + v350 - v54;
      unint64_t v397 = v406 + 12;
      unint64_t v60 = v30 + v344 - v56;
      unint64_t v401 = v407 + v351;
      unint64_t v61 = v30 + v343 - v56;
      unint64_t v398 = v30 + v342 - v56;
      v400.i64[0] = v30 + v341 - v56;
      unint64_t v402 = v30 + v340 - v56;
      unint64_t v399 = v30 + v339 - v56;
      uint64_t v390 = v56;
      unint64_t v380 = v30 + v338 - v56;
      unint64_t v62 = v28 + v337 - v54;
      v63.i64[0] = v406 + 8;
      uint64_t v64 = v406 + 8;
      uint64_t v65 = v406 + 8;
      v66.i64[0] = v406 + 8;
      uint64_t v67 = v406 + 8;
      v68.i64[0] = v53;
      v69.i64[0] = v53;
      v69.i64[1] = v34;
      v68.i64[1] = v32;
      uint64x2_t v70 = (uint64x2_t)vdupq_n_s64(v53);
      unint64_t v396 = v28 + v349 - v54;
      v71.i64[0] = v396;
      v72.i64[0] = v396;
      v72.i64[1] = v407 + v353;
      unint64_t v383 = v407 + v353;
      unint64_t v385 = v28 + v346 - v54;
      v73.i64[0] = v396;
      v73.i64[1] = v385;
      v74.i64[0] = v385;
      v75.i64[0] = v396;
      v76.i64[0] = v396;
      v77.i64[0] = v60;
      v77.i64[1] = v407 + v351;
      v78.i64[0] = v407 + v351;
      v79.i64[0] = v396;
      v79.i64[1] = v407 + v348;
      v80.i64[0] = v407 + v348;
      unint64_t v386 = v407 + v348;
      v81.i64[0] = v407 + v348;
      v82.i64[0] = v406 + v351;
      v83.i64[0] = v406 + v351;
      v83.i64[1] = v407 + v345;
      v84.i64[0] = v407 + v345;
      unint64_t v382 = v407 + v345;
      v85.i64[0] = v407 + v345;
      v86.i64[0] = v406 + v351;
      v87.i64[0] = v406 + v351;
      v88.i64[0] = v406 + v351;
      v82.i64[1] = v62;
      v89.i64[0] = v62;
      v71.i64[1] = v406 + v348;
      v90.i64[0] = v62;
      v89.i64[1] = v406 + v351;
      uint64x2_t v391 = v89;
      int32x4_t v91 = (int32x4_t)vcgtq_u64(v89, v68);
      uint64x2_t v92 = (uint64x2_t)vdupq_n_s64(v32);
      v84.i64[1] = v380;
      v80.i64[1] = v402;
      uint64x2_t v393 = v84;
      uint64x2_t v394 = v80;
      int16x8_t v93 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v80, v70), (int32x4_t)vcgtq_u64(v84, v70));
      v84.i64[0] = v407 + v351;
      int8x16_t v94 = (int8x16_t)vuzp1q_s16(v93, (int16x8_t)vuzp1q_s32(v91, (int32x4_t)vcgtq_u64(v71, v92)));
      v91.i64[0] = v407 + v353;
      v91.i64[1] = v406 + v353;
      v78.i64[1] = v398;
      uint64x2_t v392 = v78;
      int16x8_t v95 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v91, v69), (int32x4_t)vcgtq_u64(v78, v70));
      v91.i64[0] = v385;
      v74.i64[1] = v406 + v345;
      v80.i64[0] = v406 + 8;
      int8x16_t v129 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v71, v70), (int32x4_t)vcgtq_u64(v74, v70)), v95);
      v70.i64[0] = v406 + 12;
      int8x16_t v395 = vuzp1q_s8(v129, v94);
      v71.i64[0] = v406 + 12;
      v70.i64[1] = v400.i64[1];
      int32x4_t v96 = (int32x4_t)vcgtq_u64(v72, v70);
      v72.i64[0] = v406 + 8;
      v63.i64[1] = v400.i64[1];
      int32x4_t v97 = (int32x4_t)vcgtq_u64(v73, v63);
      v73.i64[0] = v61;
      int16x8_t v98 = (int16x8_t)vuzp1q_s32(v97, v96);
      v96.i64[0] = v61;
      v73.i64[1] = v400.i64[1];
      int16x8_t v99 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v77, (uint64x2_t)vdupq_n_s64(v400.u64[1])), (int32x4_t)vcgtq_u64(v79, v73));
      v79.i64[0] = v399;
      int8x16_t v100 = (int8x16_t)vuzp1q_s16(v98, v99);
      v94.i64[0] = v399;
      v79.i64[1] = v406 + 4;
      int32x4_t v101 = (int32x4_t)vcgtq_u64(v82, v79);
      v79.i64[0] = v400.i64[0];
      v79.i64[1] = v406 + 4;
      v88.i64[1] = v407 + v348;
      unint64_t v102 = v28 + v352 - v54;
      v96.i64[1] = v406 + 4;
      int16x8_t v103 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v83, v79), v101);
      v83.i64[0] = v102;
      int32x4_t v107 = (int32x4_t)vcgtq_u64(v88, (uint64x2_t)v96);
      v88.i64[0] = v102;
      v88.i64[1] = v60;
      v83.i64[1] = v396;
      v86.i64[1] = v385;
      v87.i64[1] = v407 + v353;
      unint64_t v104 = v407 + 12;
      v79.i64[0] = v407 + 12;
      v79.i64[1] = v399;
      v72.i64[1] = v406 + 4;
      v71.i64[1] = v406 + 4;
      unint64_t v105 = v407 + 8;
      int8x16_t v388 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v77, (uint64x2_t)vdupq_n_s64(v406 + 4)), v107), v103), v100);
      int16x8_t v106 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v86, v72), (int32x4_t)vcgtq_u64(v87, v71));
      v107.i64[0] = v28 + v358 - v54;
      v71.i64[0] = v107.i64[0];
      v71.i64[1] = v406 + 4;
      uint64x2_t v108 = (uint64x2_t)vdupq_n_s64(v102);
      int16x8_t v109 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v108, v79), (int32x4_t)vcgtq_u64(v83, v71));
      v83.i64[0] = v407 + 8;
      v83.i64[1] = v400.i64[0];
      int8x16_t v111 = (int8x16_t)vuzp1q_s16(v109, v106);
      unint64_t v112 = v407 + 4;
      v109.i64[0] = v407 + 4;
      unint64_t v381 = v61;
      v109.i64[1] = v61;
      v82.i64[0] = v52;
      v87.i64[0] = v52;
      v87.i64[1] = v32;
      int8x16_t v387 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v74, v92), (int32x4_t)vcgtq_u64(v88, v87)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v108, (uint64x2_t)v109), (int32x4_t)vcgtq_u64(v108, v83))), v111);
      v123.i64[1] = v406 + 12;
      v119.i64[1] = v61;
      v66.i64[1] = v400.i64[0];
      uint64_t v389 = v27 * v47;
      unint64_t v114 = v28 + v347 - v54;
      v80.i64[1] = v114;
      v90.i64[1] = v406 + v345;
      unint64_t v115 = v406 + v345;
      v124.i64[1] = v399;
      v85.i64[1] = v406 + v348;
      int16x8_t v116 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v85, v124), (int32x4_t)vcgtq_u64(v90, v80));
      v111.i64[0] = v407 + v353;
      v111.i64[1] = v60;
      v75.i64[1] = v407 + v345;
      v76.i64[1] = v62;
      v84.i64[1] = v406 + v348;
      v81.i64[1] = v406 + v348;
      int32x4_t v117 = (int32x4_t)vcgtq_u64(v81, v66);
      v81.i64[0] = v400.i64[1];
      v85.i64[0] = v400.i64[1];
      v85.i64[1] = v407 + 8;
      int8x16_t v118 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v84, v119), v117), v116);
      v120.i64[0] = v114;
      v119.i64[0] = v114;
      v120.i64[1] = v406 + 12;
      v94.i64[1] = v400.i64[1];
      v91.i64[1] = v406 + v348;
      int16x8_t v121 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v75, v400), (int32x4_t)vcgtq_u64(v76, (uint64x2_t)v94));
      int32x4_t v122 = (int32x4_t)vcgtq_u64((uint64x2_t)v91, v123);
      v123.i64[0] = v400.i64[1];
      v124.i64[0] = v400.i64[1];
      v117.i64[0] = v400.i64[1];
      v94.i64[0] = v400.i64[1];
      v81.i64[1] = v406 + 8;
      int16x8_t v137 = (int16x8_t)vuzp1q_s32(v122, (int32x4_t)vcgtq_u64((uint64x2_t)v111, (uint64x2_t)vdupq_n_s64(v406 + 8)));
      v80.i64[0] = v406 + v345;
      v122.i64[0] = v406 + v345;
      v80.i64[1] = v396;
      int8x16_t v125 = vuzp1q_s8((int8x16_t)vuzp1q_s16(v121, v137), v118);
      v118.i64[0] = v406 + v353;
      v121.i64[0] = v406 + v353;
      v121.i64[1] = v60;
      unint64_t v379 = v102;
      v118.i64[1] = v102;
      int32x4_t v126 = (int32x4_t)vcgtq_u64((uint64x2_t)v118, v71);
      uint64x2_t v127 = (uint64x2_t)vdupq_n_s64(v406 + v353);
      unint64_t v128 = v406 + v353;
      v94.i64[1] = v52;
      v129.i64[0] = v52;
      v82.i64[1] = v53;
      uint64_t v130 = v406 + v348;
      int8x16_t v132 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v127, v81), (int32x4_t)vcgtq_u64(v127, v120)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v121, v82), (int32x4_t)vcgtq_u64(v127, (uint64x2_t)v109))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v127, v83), (int32x4_t)vcgtq_u64(v127, v79)), (int16x8_t)vuzp1q_s32(v126, (int32x4_t)vcgtq_u64(v108, v81))));
      v135.i64[1] = v396;
      v117.i64[1] = v114;
      v121.i64[0] = v398;
      int16x8_t v133 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v135, (uint64x2_t)v117), (int32x4_t)vcgtq_u64(v80, (uint64x2_t)v94));
      v80.i64[0] = v398;
      v121.i64[1] = v396;
      v117.i64[0] = v34;
      v117.i64[1] = v407 + 4;
      int8x16_t v134 = (int8x16_t)vuzp1q_s16(v133, (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v396), (uint64x2_t)v117), (int32x4_t)vcgtq_u64((uint64x2_t)v121, v85)));
      v121.i64[0] = v406 + 4;
      v127.i64[0] = v406 + 4;
      v82.i64[0] = v406 + 4;
      v94.i64[0] = v406 + 4;
      v121.i64[1] = v107.i64[0];
      v85.i64[0] = v380;
      v135.i64[0] = v380;
      v85.i64[1] = v406 + v351;
      int32x4_t v136 = (int32x4_t)vcgtq_u64(v85, (uint64x2_t)v121);
      v94.i64[1] = v407 + 12;
      v85.i64[0] = v402;
      v137.i64[0] = v402;
      v85.i64[1] = v406 + v351;
      v82.i64[1] = v407 + 8;
      v80.i64[1] = v406 + v351;
      int8x16_t v138 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v406 + v351), (uint64x2_t)v117), (int32x4_t)vcgtq_u64(v80, v82)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v85, (uint64x2_t)v94), v136)), v134);
      v127.i64[1] = v52;
      v122.i64[1] = v406 + v351;
      int32x4_t v139 = (int32x4_t)vcgtq_u64((uint64x2_t)v122, v127);
      BOOL v141 = v53 < v102 && v32 < v128;
      BOOL v377 = v141;
      BOOL v143 = v53 < v406 + v351 && v406 + 4 < v128;
      BOOL v378 = v143;
      BOOL v145 = v114 < v383 && v52 < v385;
      BOOL v376 = v145;
      BOOL v147 = v114 < v60 && v34 < v385;
      BOOL v375 = v147;
      BOOL v149 = v114 < v401 && v112 < v385;
      BOOL v374 = v149;
      BOOL v151 = v114 < v398 && v61 < v385;
      BOOL v373 = v151;
      BOOL v153 = v114 < v386 && v105 < v385;
      BOOL v372 = v153;
      BOOL v155 = v114 < v402 && v400.i64[0] < v385;
      BOOL v371 = v155;
      BOOL v157 = v114 < v382 && v104 < v385;
      BOOL v370 = v157;
      BOOL v159 = v114 < v380 && v399 < v385;
      BOOL v369 = v159;
      BOOL v161 = v114 < v62 && v28 + v358 - v54 < v385;
      BOOL v368 = v161;
      unint64_t v162 = v406 + v345;
      BOOL v164 = v397 < v383 && v52 < v115;
      BOOL v367 = v164;
      BOOL v166 = v397 < v60 && v34 < v115;
      BOOL v366 = v166;
      BOOL v168 = v397 < v401 && v112 < v115;
      BOOL v365 = v168;
      BOOL v170 = v397 < v398 && v61 < v115;
      BOOL v364 = v170;
      BOOL v172 = v397 < v386 && v105 < v162;
      BOOL v363 = v172;
      BOOL v174 = v397 < v402 && v400.i64[0] < v162;
      BOOL v362 = v174;
      BOOL v176 = v397 < v382 && v104 < v162;
      BOOL v361 = v176;
      BOOL v178 = v397 < v380 && v399 < v162;
      BOOL v360 = v178;
      unint64_t v179 = v28 + v337 - v54;
      unint64_t v180 = v28 + v358 - v54;
      BOOL v182 = v397 < v62 && v28 + v358 - v54 < v162;
      BOOL v184 = v52 < v62 && v180 < v383;
      BOOL v186 = v34 < v62 && v180 < v60;
      BOOL v384 = v186;
      BOOL v188 = v407 + 4 < v179 && v180 < v401;
      BOOL v190 = v381 < v179 && v180 < v398;
      BOOL v192 = v105 < v179 && v180 < v386;
      BOOL v193 = v400.i64[0] >= v179 || v180 >= v402;
      unint64_t v194 = v180;
      char v195 = !v193;
      unint64_t v196 = v179;
      v137.i64[1] = v396;
      v135.i64[1] = v396;
      v198.i64[1] = v385;
      v199.i64[1] = v114;
      v200.i64[1] = v406 + v351;
      v203.i64[0] = v32;
      v200.i64[0] = v406 + v348;
      v199.i64[0] = v406 + 4;
      int16x8_t v201 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v200, v199), v139);
      v202.i64[0] = v32;
      v203.i64[1] = v400.i64[1];
      v204.i64[1] = v398;
      BOOL v205 = v104 >= v179 || v194 >= v382;
      v206.i64[1] = v402;
      v207.i64[1] = v379;
      char v208 = !v205;
      v202.i64[1] = v34;
      v209.i64[1] = v380;
      v110.i64[0] = v407 + 8;
      v113.i64[0] = v407 + 4;
      v124.i64[1] = v194;
      v129.i64[1] = v34;
      v206.i64[0] = v406 + v348;
      v209.i64[0] = v406 + v348;
      v198.i64[0] = v406 + v348;
      v123.i64[1] = v407 + 12;
      v131.i64[0] = v406 + v348;
      v204.i64[0] = v406 + v348;
      v110.i64[1] = v406 + 8;
      v113.i64[1] = v406 + 8;
      v119.i64[1] = v406 + 8;
      v197.i64[1] = v406 + 8;
      v197.i64[0] = v407 + 12;
      v107.i64[1] = v406 + 12;
      v131.i64[1] = v406 + v345;
      int8x16_t v210 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v125, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v137, v123), (int32x4_t)vcgtq_u64(v135, v124)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v131, v119), (int32x4_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v406 + v348), (uint64x2_t)v129))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v204, v113), (int32x4_t)vcgtq_u64(v206, v110)), (int16x8_t)vuzp1q_s32(
                                                 (int32x4_t)vcgtq_u64(v209, v197),
                                                 (int32x4_t)vcgtq_u64(v198, (uint64x2_t)v107))))),
                   7uLL)),
               (int8x16_t)xmmword_1004048E0);
      int8x8_t v211 = (int8x8_t)vextq_s8(v210, v210, 8uLL).u64[0];
      v211.i8[0] = vaddv_s8(v211);
      __int16 v212 = v211.i16[0];
      v207.i64[0] = v407 + v353;
      int8x16_t v213 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v387, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v108, v120), (int32x4_t)vcgtq_u64(v207, v202)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v392, v92), (int32x4_t)vcgtq_u64(v394, v92))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v393, v92), (int32x4_t)vcgtq_u64(v391, v203)), v201))), 7uLL)), (int8x16_t)xmmword_1004048E0);
      int8x8_t v214 = (int8x8_t)vextq_s8(v213, v213, 8uLL).u64[0];
      v214.i8[0] = vaddv_s8(v214);
      BOOL v215 = v399 >= v196 || v194 >= v380;
      v213.i8[0] = vaddv_s8(*(int8x8_t *)v213.i8);
      __int16 v216 = v213.i16[0];
      v213.i8[0] = vaddv_s8(*(int8x8_t *)v210.i8);
      __int16 v217 = v213.i16[0];
      __int16 v218 = v216 | ((v214.i16[0] | (unsigned __int16)v212) << 8);
      int8x16_t v219 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v388, v138), 7uLL)), (int8x16_t)xmmword_1004048E0);
      int8x8_t v220 = (int8x8_t)vextq_s8(v219, v219, 8uLL).u64[0];
      v220.i8[0] = vaddv_s8(v220);
      __int16 v221 = v220.i16[0];
      int8x16_t v222 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v395, v132), 7uLL)), (int8x16_t)xmmword_1004048E0);
      int8x8_t v223 = (int8x8_t)vextq_s8(v222, v222, 8uLL).u64[0];
      v223.i8[0] = vaddv_s8(v223);
      v222.i8[0] = vaddv_s8(*(int8x8_t *)v222.i8);
      v219.i8[0] = vaddv_s8(*(int8x8_t *)v219.i8);
      __int16 v224 = v222.i16[0] | ((v223.i16[0] | (unsigned __int16)v221) << 8) | v219.i16[0] | v218 | v217;
      char v225 = !v215;
      if (v224)
      {
        uint64_t v59 = 0;
        uint64_t v58 = 0;
        uint64_t v27 = v335;
        int v26 = v336;
        uint64_t v35 = v333;
        uint64_t v29 = v334;
        unsigned int v36 = v403;
        uint64_t v28 = v405;
        uint64_t v30 = v404;
        unint64_t v49 = v355;
        uint64_t v56 = v390;
        uint64_t v54 = v389;
        goto LABEL_265;
      }
      BOOL v226 = v184;
      uint64_t v28 = v405;
      uint64_t v30 = v404;
      unint64_t v49 = v355;
      uint64_t v56 = v390;
      uint64_t v54 = v389;
      if (v378
        || v377
        || v376
        || v375
        || v374
        || v373
        || v372
        || v371
        || v370
        || v369
        || v368
        || v367
        || v366
        || v365
        || v364)
      {
        uint64_t v59 = 0;
        uint64_t v58 = 0;
        uint64_t v27 = v335;
        int v26 = v336;
        goto LABEL_262;
      }
      BOOL v227 = v192;
      uint64_t v27 = v335;
      int v26 = v336;
      if (v363)
      {
        uint64_t v59 = 0;
        uint64_t v58 = 0;
LABEL_262:
        uint64_t v35 = v333;
        uint64_t v29 = v334;
LABEL_264:
        unsigned int v36 = v403;
        goto LABEL_265;
      }
      uint64_t v35 = v333;
      uint64_t v29 = v334;
      if (v362 || v361 || v360 || v182 || v226 || v384 || v188)
      {
        uint64_t v59 = 0;
        uint64_t v58 = 0;
        goto LABEL_264;
      }
      unsigned int v36 = v403;
      if (v190) {
        break;
      }
      uint64_t v37 = v332;
      if (v227 || (v195 & 1) != 0)
      {
        uint64_t v59 = 0;
        uint64_t v58 = 0;
        goto LABEL_266;
      }
      uint64_t v59 = 0;
      if (v208) {
        goto LABEL_260;
      }
      uint64_t v58 = 0;
      if (v225) {
        goto LABEL_266;
      }
      uint64_t v228 = 0;
      uint64_t v229 = v327 & 0xFFFFFFC;
      do
      {
        long long v231 = *(_OWORD *)(v52 + v228);
        long long v230 = *(_OWORD *)(v52 + v228 + 16);
        long long v233 = *(_OWORD *)(v52 + v228 + 32);
        long long v232 = *(_OWORD *)(v52 + v228 + 48);
        long long v234 = *(_OWORD *)(v34 + v228 + 16);
        long long v235 = *(_OWORD *)(v34 + v228 + 32);
        long long v236 = *(_OWORD *)(v34 + v228 + 48);
        v237 = (_OWORD *)(v53 + v228);
        v238 = (_OWORD *)(v32 + v228);
        _OWORD *v237 = *(_OWORD *)(v34 + v228);
        v237[1] = v234;
        v237[2] = v235;
        v237[3] = v236;
        v238[2] = v233;
        v238[3] = v232;
        v228 += 64;
        _OWORD *v238 = v231;
        v238[1] = v230;
        v229 -= 4;
      }
      while (v229);
      uint64_t v59 = v327 & 0xFFFFFFC;
      uint64_t v239 = v59 - 1;
      uint64_t v58 = 16 * v59;
      if (v327 != v59) {
        goto LABEL_266;
      }
LABEL_268:
      if ((int)v37 < (int)v58)
      {
        uint64_t v58 = v58;
        uint64_t v55 = v406;
        uint64_t v57 = v407;
        if ((int)v58 < v26) {
          goto LABEL_275;
        }
        goto LABEL_54;
      }
      uint64_t v246 = v58 & 0xFFFFFFF0;
      if (v354 < 0x7C)
      {
        uint64_t v247 = v246;
        uint64_t v55 = v406;
        uint64_t v57 = v407;
        goto LABEL_273;
      }
      uint64_t v253 = 16 * v239;
      uint64_t v254 = 16 * v239 + v329 - v54;
      uint64_t v255 = v253 + v328 - v56;
      uint64_t v55 = v406;
      if ((unint64_t)(v254 - v255) < 0x20
        || (uint64_t v256 = v253 + v325 + v56, (unint64_t)(v254 - v256) < 0x20)
        || (uint64_t v257 = v253 + v324 + v54, (unint64_t)(v257 - v255) < 0x20))
      {
        uint64_t v247 = v246;
        uint64_t v57 = v407;
        goto LABEL_273;
      }
      uint64_t v57 = v407;
      if ((unint64_t)(v257 - v256) < 0x20)
      {
        uint64_t v247 = v246;
        do
        {
LABEL_273:
          int v248 = *(_DWORD *)(v52 + v247);
          *(_DWORD *)(v53 + v247) = *(_DWORD *)(v34 + v247);
          *(_DWORD *)(v32 + v247) = v248;
          v247 += 4;
        }
        while (v247 <= v37);
        goto LABEL_274;
      }
      if ((unint64_t)(v254 - v257) < 0x20)
      {
        uint64_t v247 = v246;
        goto LABEL_273;
      }
      uint64_t v247 = v246 + 4 * v326;
      uint64_t v258 = ((v354 >> 2) + 1) & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v259 = *(_OWORD *)(v52 + v246);
        long long v260 = *(_OWORD *)(v52 + v246 + 16);
        long long v261 = *(_OWORD *)(v34 + v246 + 16);
        v262 = (_OWORD *)(v53 + v246);
        _OWORD *v262 = *(_OWORD *)(v34 + v246);
        v262[1] = v261;
        v263 = (_OWORD *)(v32 + v246);
        _OWORD *v263 = v259;
        v263[1] = v260;
        v246 += 32;
        v258 -= 8;
      }
      while (v258);
      if ((v354 >> 2) + 1 != v326) {
        goto LABEL_273;
      }
LABEL_274:
      uint64_t v58 = v247;
      if ((int)v247 < v26) {
        goto LABEL_275;
      }
LABEL_54:
      ++v47;
      v52 += v29;
      v34 += v35;
      v53 += v27;
      v32 += v408;
      if (v47 == v36) {
        goto LABEL_365;
      }
    }
    uint64_t v59 = 0;
    uint64_t v58 = 0;
LABEL_265:
    uint64_t v37 = v332;
LABEL_266:
    uint64_t v239 = v59 - 1;
    do
    {
      int v240 = *(_DWORD *)(v52 + v58);
      v241 = (_DWORD *)(v53 + v58);
      _DWORD *v241 = *(_DWORD *)(v34 + v58);
      v242 = (_DWORD *)(v32 + v58);
      _DWORD *v242 = v240;
      int v243 = *(_DWORD *)(v52 + v58 + 4);
      v241[1] = *(_DWORD *)(v34 + v58 + 4);
      v242[1] = v243;
      int v244 = *(_DWORD *)(v52 + v58 + 8);
      v241[2] = *(_DWORD *)(v34 + v58 + 8);
      v242[2] = v244;
      int v245 = *(_DWORD *)(v52 + v58 + 12);
      v241[3] = *(_DWORD *)(v34 + v58 + 12);
      v242[3] = v245;
      v58 += 16;
      ++v239;
    }
    while (v58 <= v48);
    goto LABEL_268;
  }
LABEL_365:
  if (v330 < 0)
  {
    uint64_t v19 = v418[0];
    uint64_t v22 = v412;
    int v23 = *v416;
    int v409 = v416[1];
    unint64_t v24 = &v409;
    uint64_t v20 = v412;
    uint64_t v21 = v418[0];
    unint64_t v18 = v331;
    goto LABEL_38;
  }
LABEL_366:
  if (v415 && atomic_fetch_add((atomic_uint *volatile)(v415 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v411);
  }
  uint64_t v415 = 0;
  long long v412 = 0u;
  long long v413 = 0u;
  if (SDWORD1(v411) >= 1)
  {
    uint64_t v320 = 0;
    v321 = v416;
    do
      v321[v320++] = 0;
    while (v320 < SDWORD1(v411));
  }
  if (v417 != v418) {
    j__free(v417);
  }
  if (v424 && atomic_fetch_add((atomic_uint *volatile)(v424 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v420);
  }
  uint64_t v424 = 0;
  long long v421 = 0u;
  long long v422 = 0u;
  if (SDWORD1(v420) >= 1)
  {
    uint64_t v322 = 0;
    v323 = v425;
    do
      v323[v322++] = 0;
    while (v322 < SDWORD1(v420));
  }
  if (v426 != v427) {
    j__free(v426);
  }
LABEL_19:
  if (v430) {
    sub_1002D6888(v429);
  }
}

void sub_1002577C4(_Unwind_Exception *a1)
{
  sub_1000094F4((uint64_t)&STACK[0x330]);
  sub_1000094F4((uint64_t)&STACK[0x3A0]);
  sub_10020FA00(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1002577F0(_Unwind_Exception *a1)
{
  sub_1000094F4((uint64_t)&STACK[0x3A0]);
  sub_10020FA00(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_100257810(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_100257828(_Unwind_Exception *a1)
{
  sub_1002D1A1C((uint64_t *)&STACK[0x3A0]);
  sub_10020FA00(v1 - 176);
  _Unwind_Resume(a1);
}

_DWORD *sub_10025787C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, unint64_t a6)
{
  uint64_t v9 = *a5;
  if ((int)v9 >= -1) {
    int v10 = v9 + 1;
  }
  else {
    int v10 = v9 + 2;
  }
  uint64_t result = v48;
  if (v9 * a6 >= 0x109) {
    operator new[]();
  }
  if ((int)v9 >= 1 && a6 != 0)
  {
    uint64_t v13 = v9;
    if (a6 > 7)
    {
      unint64_t v16 = a6 - (a6 & 0xFFFFFFFFFFFFFFF8);
      if (a6 == (a6 & 0xFFFFFFFFFFFFFFF8))
      {
        long long v17 = (int32x4_t *)v50;
        int64x2_t v18 = vdupq_n_s64(8uLL);
        do
        {
          unint64_t v19 = (v9 + ~v16) * a6;
          int64x2_t v20 = vdupq_n_s64(v19);
          int64x2_t v21 = vdupq_n_s64(v19 + 4);
          uint64_t v22 = v17;
          unint64_t v23 = a6 & 0xFFFFFFFFFFFFFFF8;
          int64x2_t v24 = (int64x2_t)xmmword_1004027B0;
          int64x2_t v25 = (int64x2_t)xmmword_1004048F0;
          do
          {
            v22[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v20, v24), (int32x4_t)vaddq_s64(v20, v25));
            *uint64_t v22 = vuzp1q_s32((int32x4_t)vaddq_s64(v21, v24), (int32x4_t)vaddq_s64(v21, v25));
            int64x2_t v25 = vaddq_s64(v25, v18);
            int64x2_t v24 = vaddq_s64(v24, v18);
            v22 += 2;
            v23 -= 8;
          }
          while (v23);
          ++v16;
          long long v17 = (int32x4_t *)((char *)v17 + 4 * a6);
        }
        while (v16 != v9);
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (int32x4_t *)v50;
        uint64_t v28 = 4 * a6;
        uint64_t v29 = &v48[8 * (a6 >> 3)];
        int v30 = (v9 - 1) * a6 + 8 * (a6 >> 3);
        int64x2_t v31 = vdupq_n_s64(8uLL);
        do
        {
          unint64_t v32 = (v9 + ~v26) * a6;
          int64x2_t v33 = vdupq_n_s64(v32);
          int64x2_t v34 = vdupq_n_s64(v32 + 4);
          unint64_t v35 = a6 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v36 = v27;
          int64x2_t v37 = (int64x2_t)xmmword_1004027B0;
          int64x2_t v38 = (int64x2_t)xmmword_1004048F0;
          do
          {
            v36[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v33, v37), (int32x4_t)vaddq_s64(v33, v38));
            int32x4_t *v36 = vuzp1q_s32((int32x4_t)vaddq_s64(v34, v37), (int32x4_t)vaddq_s64(v34, v38));
            int64x2_t v38 = vaddq_s64(v38, v31);
            int64x2_t v37 = vaddq_s64(v37, v31);
            v36 += 2;
            v35 -= 8;
          }
          while (v35);
          int v39 = v30;
          unsigned int v40 = v29;
          unint64_t v41 = a6 - (a6 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v40++ = v39++;
            --v41;
          }
          while (v41);
          ++v26;
          uint64_t v27 = (int32x4_t *)((char *)v27 + v28);
          uint64_t v29 = (_DWORD *)((char *)v29 + v28);
          v30 -= a6;
        }
        while (v26 != v9);
      }
    }
    else
    {
      long long v14 = &v49;
      do
      {
        int v15 = (v13 - 1) * a6;
        *(v14 - 3) = v15;
        if (a6 != 1)
        {
          *(v14 - 2) = v15 + 1;
          if (a6 != 2)
          {
            *(v14 - 1) = v15 + 2;
            if (a6 != 3)
            {
              *long long v14 = v15 + 3;
              if (a6 != 4)
              {
                v14[1] = v15 + 4;
                if (a6 != 5)
                {
                  v14[2] = v15 + 5;
                  if (a6 != 6) {
                    v14[3] = v15 + 6;
                  }
                }
              }
            }
          }
        }
        v14 += a6;
        --v13;
      }
      while (v13);
    }
  }
  int v42 = a5[1];
  a5[1] = v42 - 1;
  if (v42)
  {
    uint64_t v43 = ((v10 >> 1) * a6);
    if ((int)v43 < 1)
    {
      a5[1] = -1;
    }
    else
    {
      do
      {
        for (uint64_t i = 0; i != v43; ++i)
        {
          uint64_t v45 = (int)v48[i];
          char v46 = *(unsigned char *)(a1 + i);
          *(unsigned char *)(a3 + i) = *(unsigned char *)(a1 + v45);
          *(unsigned char *)(a3 + v45) = v46;
        }
        a1 += a2;
        a3 += a4;
        int v47 = a5[1];
        a5[1] = v47 - 1;
      }
      while (v47);
    }
  }
  return result;
}

void sub_100257BB4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  sub_1002D6AE8(v50, &off_100494E50);
  if (*(void *)(a1 + 8) == *(void *)(a4 + 8))
  {
    long long v40 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v40, 30), "_src.getObj() != _dst.getObj()", 30);
    sub_1002D2278(-215, (uint64_t *)&v40, "repeat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 862);
  }
  if ((int)sub_10029C9C4(a1, -1) >= 3)
  {
    long long v40 = 0uLL;
    *(_OWORD *)sub_1002D19D8(&v40, 16) = *(_OWORD *)"_src.dims() <= 2";
    sub_1002D2278(-215, (uint64_t *)&v40, "repeat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 863);
  }
  if (a2 < 1 || a3 <= 0)
  {
    long long v40 = 0uLL;
    *(_OWORD *)sub_1002D19D8(&v40, 16) = *(_OWORD *)"ny > 0 && nx > 0";
    sub_1002D2278(-215, (uint64_t *)&v40, "repeat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 864);
  }
  sub_10029A23C(a1, 0xFFFFFFFF, (uint64_t)&v48);
  int v9 = v48;
  int v8 = v49;
  int v10 = sub_10029AB74((int *)a1, -1);
  sub_10029EDE8(a4, v8 * a2, v9 * a3, v10, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    long long v12 = *(_OWORD *)(v11 + 16);
    long long v40 = *(_OWORD *)v11;
    long long v41 = v12;
    long long v42 = *(_OWORD *)(v11 + 32);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v43 = *(void *)(v11 + 48);
    uint64_t v44 = v13;
    uint64_t v45 = (char *)&v40 + 8;
    char v46 = v47;
    v47[0] = 0;
    v47[1] = 0;
    if (v13) {
      atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 1u);
    }
    if (*(int *)(v11 + 4) > 2)
    {
      DWORD1(v40) = 0;
      sub_1002931A8((uint64_t)&v40, v11);
    }
    else
    {
      long long v14 = *(void **)(v11 + 72);
      int v15 = v46;
      *(void *)char v46 = *v14;
      v15[1] = v14[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v40);
  }
  if (sub_10029A230((_DWORD *)a4) == 0x10000)
  {
    uint64_t v16 = *(void *)(a4 + 8);
    long long v17 = *(_OWORD *)(v16 + 16);
    long long v32 = *(_OWORD *)v16;
    long long v33 = v17;
    long long v34 = *(_OWORD *)(v16 + 32);
    uint64_t v18 = *(void *)(v16 + 56);
    uint64_t v35 = *(void *)(v16 + 48);
    uint64_t v36 = v18;
    int64x2_t v37 = (unsigned int *)&v32 + 2;
    int64x2_t v38 = v39;
    v39[0] = 0;
    v39[1] = 0;
    if (v18) {
      atomic_fetch_add((atomic_uint *volatile)(v18 + 20), 1u);
    }
    if (*(int *)(v16 + 4) > 2)
    {
      DWORD1(v32) = 0;
      sub_1002931A8((uint64_t)&v32, v16);
    }
    else
    {
      unint64_t v19 = *(void **)(v16 + 72);
      int64x2_t v20 = v38;
      *(void *)int64x2_t v38 = *v19;
      v20[1] = v19[1];
    }
  }
  else
  {
    sub_100299554(a4, -1, (uint64_t)&v32);
  }
  uint64_t v21 = *v37;
  signed int v22 = v37[1];
  if (SDWORD1(v40) >= 1)
  {
    uint64_t v23 = *((void *)v46 + (DWORD1(v40) - 1));
    LODWORD(i) = v49;
    int v25 = v48 * v23;
    v48 *= v23;
    size_t v26 = v22 * (uint64_t)(int)v23;
    if (v49 >= 1) {
      goto LABEL_24;
    }
LABEL_32:
    LODWORD(i) = 0;
    if ((int)v21 <= 0) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  LODWORD(i) = v49;
  int v25 = 0;
  int v48 = 0;
  size_t v26 = 0;
  if (v49 < 1) {
    goto LABEL_32;
  }
LABEL_24:
  if ((int)v26 >= 1)
  {
    for (uint64_t i = 0; i < v49; ++i)
    {
      int v27 = 0;
      do
      {
        memcpy((void *)(v33 + *(void *)v38 * i + v27), (const void *)(v41 + *(void *)v46 * i), v25);
        int v25 = v48;
        v27 += v48;
      }
      while (v27 < (int)v26);
    }
  }
  if ((int)i < (int)v21)
  {
LABEL_33:
    uint64_t i = i;
    do
    {
      memcpy((void *)(v33 + *(void *)v38 * i), (const void *)(v33 + *(void *)v38 * ((int)i - v49)), v26);
      ++i;
    }
    while (v21 != i);
  }
LABEL_35:
  if (v36 && atomic_fetch_add((atomic_uint *volatile)(v36 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v32);
  }
  uint64_t v36 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  if (SDWORD1(v32) >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v37;
    do
      v29[v28++] = 0;
    while (v28 < SDWORD1(v32));
  }
  if (v38 != v39) {
    j__free(v38);
  }
  if (v44 && atomic_fetch_add((atomic_uint *volatile)(v44 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v40);
  }
  uint64_t v44 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  if (SDWORD1(v40) >= 1)
  {
    uint64_t v30 = 0;
    int64x2_t v31 = v45;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < SDWORD1(v40));
  }
  if (v46 != v47) {
    j__free(v46);
  }
  if (v51) {
    sub_1002D6888(v50);
  }
}

void sub_100258088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1002D1A1C((uint64_t *)va);
  sub_10020FA00(v13 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_10025811C(uint64_t result, int a2, int a3)
{
  uint64_t v3 = result;
  int v4 = result - a2;
  if (result >= a2)
  {
    uint64_t result = 0xFFFFFFFFLL;
    switch(a3)
    {
      case 0:
        return result;
      case 1:
        if ((int)v3 >= 0) {
          return (a2 - 1);
        }
        else {
          return 0;
        }
      case 2:
      case 4:
        if (a2 == 1) {
          return 0;
        }
        LODWORD(result) = v3;
        do
        {
          if ((int)result >= 0) {
            int v5 = ~(result + (a3 == 4));
          }
          else {
            int v5 = a3 == 4;
          }
          if ((int)result < 0) {
            int v6 = ~result;
          }
          else {
            int v6 = 2 * a2;
          }
          uint64_t result = (v6 + v5);
        }
        while (result >= a2);
        return result;
      case 3:
        if (a2 <= 0)
        {
          sub_10022F344(v7, "len > 0");
          sub_1002D2278(-215, v7, "borderInterpolate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 936);
        }
        if ((v3 & 0x80000000) != 0)
        {
          uint64_t v3 = (~v4 + v3 + (v4 + 1) % a2);
          if ((int)v3 < a2) {
            return v3;
          }
        }
        else if ((int)v3 < a2)
        {
          return v3;
        }
        uint64_t result = ((int)v3 % a2);
        break;
      default:
        v7[0] = 0;
        v7[1] = 0;
        qmemcpy((void *)sub_1002D19D8(v7, 31), "Unknown/unsupported border type", 31);
        sub_1002D2278(-5, v7, "borderInterpolate", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 945);
    }
  }
  return result;
}

void sub_100258308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10025834C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, double *a8)
{
  sub_1002D6AE8(v196, &off_100494E70);
  int v16 = a5;
  if ((a4 | a3 | a5 | a6) < 0)
  {
    BOOL v176 = 0;
    unint64_t v177 = 0;
    qmemcpy((void *)sub_1002D19D8(&v176, 50), "top >= 0 && bottom >= 0 && left >= 0 && right >= 0", 50);
    sub_1002D2278(-215, (uint64_t *)&v176, "copyMakeBorder", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1181);
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v188 = *(_OWORD *)v17;
    *(_OWORD *)__src = v18;
    long long v190 = *(_OWORD *)(v17 + 32);
    uint64_t v19 = *(void *)(v17 + 56);
    uint64_t v191 = *(void *)(v17 + 48);
    uint64_t v192 = v19;
    BOOL v193 = (int *)&v188 + 2;
    unint64_t v194 = v195;
    v195[1] = 0;
    v195[0] = 0;
    if (v19) {
      atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
    }
    if (*(int *)(v17 + 4) > 2)
    {
      DWORD1(v188) = 0;
      sub_1002931A8((uint64_t)&v188, v17);
    }
    else
    {
      int64x2_t v20 = *(void **)(v17 + 72);
      uint64_t v21 = v194;
      *(void *)unint64_t v194 = *v20;
      v21[1] = v20[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v188);
  }
  __int16 v22 = v188;
  if ((a7 & 0x10) == 0 && (v188 & 0x8000) != 0)
  {
    int v171 = a7;
    float64x2_t v173 = a8;
    BOOL v176 = 0;
    uint64x2_t v198 = 0;
    sub_1002951DC((uint64_t)&v188, &v176, &v198);
    if (SHIDWORD(v198) >= a3) {
      unsigned int v23 = a3;
    }
    else {
      unsigned int v23 = HIDWORD(v198);
    }
    if (HIDWORD(v176) - (HIDWORD(v198) + DWORD2(v188)) >= a4) {
      unsigned int v24 = a4;
    }
    else {
      unsigned int v24 = HIDWORD(v176) - (HIDWORD(v198) + DWORD2(v188));
    }
    if ((int)v198 >= v16) {
      unsigned int v25 = v16;
    }
    else {
      unsigned int v25 = v198;
    }
    if ((int)v176 - ((int)v198 + HIDWORD(v188)) >= a6) {
      unsigned int v26 = a6;
    }
    else {
      unsigned int v26 = v176 - (v198 + HIDWORD(v188));
    }
    sub_100295350((uint64_t)&v188, v23, v24, v25, v26);
    a3 -= v23;
    v16 -= v25;
    a4 -= v24;
    a6 -= v26;
    a8 = v173;
    a7 = v171;
  }
  sub_10029EDE8(a2, a3 + a4 + DWORD2(v188), v16 + a6 + HIDWORD(v188), v22 & 0xFFF, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v27 = *(void *)(a2 + 8);
    long long v28 = *(_OWORD *)(v27 + 16);
    long long v180 = *(_OWORD *)v27;
    long long v181 = v28;
    long long v182 = *(_OWORD *)(v27 + 32);
    uint64_t v29 = *(void *)(v27 + 56);
    uint64_t v183 = *(void *)(v27 + 48);
    uint64_t v184 = v29;
    uint64_t v185 = (_DWORD *)&v180 + 2;
    BOOL v186 = v187;
    v187[1] = 0;
    v187[0] = 0;
    if (v29) {
      atomic_fetch_add((atomic_uint *volatile)(v29 + 20), 1u);
    }
    if (*(int *)(v27 + 4) > 2)
    {
      DWORD1(v180) = 0;
      sub_1002931A8((uint64_t)&v180, v27);
    }
    else
    {
      uint64_t v30 = *(void **)(v27 + 72);
      int64x2_t v31 = v186;
      *(void *)BOOL v186 = *v30;
      v31[1] = v30[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v180);
  }
  if (!(v16 | a6 | a4 | a3))
  {
    if (__src[0] != (void *)v181 || v195[0] != v187[0])
    {
      LODWORD(v176) = 33619968;
      unint64_t v177 = (unint64_t)&v180;
      v178[0] = 0;
      sub_10025401C((uint64_t)&v188, (uint64_t)&v176);
    }
    goto LABEL_158;
  }
  unsigned int v174 = a7 & 0xFFFFFFEF;
  int v164 = a3;
  if ((a7 & 0xFFFFFFEF) == 0)
  {
    unint64_t v36 = ((unint64_t)v188 >> 3) & 0x1FF;
    BOOL v176 = v178;
    unint64_t v177 = v36 + 1;
    if (v36 >= 0x88) {
      operator new[]();
    }
    int v56 = v36 + 1;
    if (v36 >= 4)
    {
      double v57 = *a8;
      if (*a8 != a8[1] || v57 != a8[2] || v57 != a8[3])
      {
        size_t v199 = 0;
        uint64x2_t v198 = 0;
        qmemcpy((void *)sub_1002D19D8(&v198, 68), "value[0] == value[1] && value[0] == value[2] && value[0] == value[3]", 68);
        sub_1002D2278(-215, (uint64_t *)&v198, "copyMakeBorder", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1229);
      }
      int v56 = 1;
    }
    sub_100298DD4(a8, (uint64_t)v178, (v188 & 7 | (8 * v56)) - 8, v36 + 1);
    uint64_t v118 = v185[1];
    if (SDWORD1(v188) < 1) {
      unint64_t v119 = 0;
    }
    else {
      unint64_t v119 = *((unsigned int *)v194 + 2 * (DWORD1(v188) - 1));
    }
    uint64x2_t v120 = (char *)__src[0];
    int v172 = *v193;
    uint64_t v175 = v195[0];
    int v159 = v193[1];
    __dsta = (char *)v181;
    uint64_t v121 = v187[0];
    int v166 = *v185;
    uint64_t v122 = (uint64_t)v176;
    size_t v123 = (int)v118 * (int)v119;
    uint64x2_t v198 = v200;
    size_t v199 = v123;
    if ((v118 * v119) >= 0x409) {
      operator new[]();
    }
    if ((int)v118 < 1 || (int)v119 < 1)
    {
LABEL_137:
      int v162 = v172 + a3;
      uint64_t v168 = a3;
      if (v172 >= 1)
      {
        int v137 = v118 - (v159 + v16);
        int8x16_t v138 = &__dsta[v121 * a3];
        size_t v139 = v16 * (int)v119;
        int v140 = v159 * v119;
        size_t v141 = v137 * (int)v119;
        size_t v142 = v140;
        size_t v143 = v139 + v140;
        int v144 = v172;
        do
        {
          if (v120 != &v138[v139]) {
            memcpy(&v138[v139], v120, v142);
          }
          memcpy(v138, v200, v139);
          memcpy(&v138[v143], v200, v141);
          v120 += v175;
          v138 += v121;
          --v144;
        }
        while (v144);
      }
      uint64_t v145 = (v166 - v162);
      if (v164 >= 1)
      {
        uint64_t v146 = v164;
        BOOL v147 = __dsta;
        do
        {
          memcpy(v147, v200, v123);
          v147 += v121;
          --v146;
        }
        while (v146);
      }
      if ((int)v145 >= 1)
      {
        unsigned int v148 = &__dsta[v121 * (v168 + v172)];
        do
        {
          memcpy(v148, v200, v123);
          v148 += v121;
          --v145;
        }
        while (v145);
      }
      if (v198 != v200 && v198 != 0) {
        operator delete[]();
      }
      if (v176 != v178 && v176 != 0) {
        goto LABEL_157;
      }
      goto LABEL_158;
    }
    uint64_t v124 = 0;
    int8x16_t v125 = &v201;
    int32x4_t v126 = v200;
    while (1)
    {
      if (v119 >= 8)
      {
        if ((unint64_t)&v200[v124 * v119 - v122] >= 0x20)
        {
          if (v119 < 0x20)
          {
            unint64_t v128 = 0;
LABEL_132:
            int16x8_t v133 = (uint64_t *)(v122 + v128);
            int8x16_t v134 = &v126[v128];
            unint64_t v135 = (v119 & 7) - v119 + v128;
            do
            {
              uint64_t v136 = *v133++;
              *v134++ = v136;
              v135 += 8;
            }
            while (v135);
            uint64_t v127 = v119 & 0xFFFFFFF8;
            if ((v119 & 7) == 0) {
              goto LABEL_121;
            }
            goto LABEL_135;
          }
          unint64_t v129 = v119 & 0x7FFFFFE0;
          uint64_t v130 = v125;
          uint64x2_t v131 = (long long *)(v122 + 16);
          do
          {
            long long v132 = *v131;
            *((_OWORD *)v130 - 1) = *(v131 - 1);
            *(_OWORD *)uint64_t v130 = v132;
            v131 += 2;
            v130 += 4;
            v129 -= 32;
          }
          while (v129);
          if ((v119 & 0x1F) == 0) {
            goto LABEL_121;
          }
          unint64_t v128 = v119 & 0x7FFFFFE0;
          uint64_t v127 = v119 & 0xFFFFFFE0;
          if ((v119 & 0x1F) >= 8) {
            goto LABEL_132;
          }
        }
        else
        {
          uint64_t v127 = 0;
        }
      }
      else
      {
        uint64_t v127 = 0;
      }
      do
      {
LABEL_135:
        v126[v127] = *(unsigned char *)(v122 + v127);
        ++v127;
      }
      while (v119 != v127);
LABEL_121:
      ++v124;
      int8x16_t v125 = (uint64_t *)((char *)v125 + v119);
      v126 += v119;
      if (v124 == v118) {
        goto LABEL_137;
      }
    }
  }
  __dst = (char *)v195[0];
  long long v32 = (char *)__src[0];
  uint64_t v33 = v193[1];
  uint64_t v34 = v187[0];
  int64x2_t v163 = (char *)v181;
  int v160 = v185[1];
  if (SDWORD1(v188) < 1) {
    LODWORD(v35) = 0;
  }
  else {
    uint64_t v35 = *((void *)v194 + (DWORD1(v188) - 1));
  }
  int v37 = v16;
  int v38 = *v193;
  int v39 = *v185;
  uint64_t v157 = ((LOBYTE(__src[0]) | v181 | LOBYTE(v195[0]) | LOBYTE(v187[0])) | v35) & 3;
  if ((((LOBYTE(__src[0]) | v181 | LOBYTE(v195[0]) | LOBYTE(v187[0])) | v35) & 3) != 0) {
    uint64_t v40 = v35;
  }
  else {
    uint64_t v40 = ((int)v35 / 4);
  }
  unsigned int v41 = v40 * (v160 - v33);
  BOOL v176 = v178;
  unint64_t v177 = (int)v41;
  if (v41 >= 0x109) {
    operator new[]();
  }
  int v156 = v39;
  if (v37 >= 1)
  {
    if ((int)v40 > 0)
    {
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      uint64_t v44 = (int32x4_t *)&v179;
      while (1)
      {
        unsigned int v45 = sub_10025811C((v43 - v37), v33, v174) * v40;
        if (v40 >= 8)
        {
          int32x4_t v47 = vdupq_n_s32(v45);
          int32x4_t v48 = vdupq_n_s32(v45 + 4);
          uint64_t v49 = v40 & 0xFFFFFFF8;
          unint64_t v50 = v44;
          int32x4_t v51 = (int32x4_t)xmmword_100404900;
          v52.i64[0] = 0x800000008;
          v52.i64[1] = 0x800000008;
          do
          {
            v50[-1] = vaddq_s32(v47, v51);
            *unint64_t v50 = vaddq_s32(v48, v51);
            int32x4_t v51 = vaddq_s32(v51, v52);
            v50 += 2;
            v49 -= 8;
          }
          while (v49);
          uint64_t v46 = v40 & 0xFFFFFFF8;
          if (v46 == v40) {
            goto LABEL_50;
          }
        }
        else
        {
          uint64_t v46 = 0;
        }
        uint64_t v53 = v40 - v46;
        int v54 = v45 + v46;
        uint64_t v55 = (_DWORD *)v178 + v46 + v42;
        do
        {
          *v55++ = v54++;
          --v53;
        }
        while (v53);
LABEL_50:
        ++v43;
        uint64_t v44 = (int32x4_t *)((char *)v44 + 4 * v40);
        v42 += v40;
        if (v43 == v37) {
          goto LABEL_67;
        }
      }
    }
    uint64_t v58 = -v37;
    do
    {
      sub_10025811C(v58, v33, v174);
      BOOL v59 = __CFADD__(v58, 1);
      uint64_t v58 = (v58 + 1);
    }
    while (!v59);
  }
LABEL_67:
  int v158 = v37;
  uint64_t v60 = (v160 - (v33 + v37));
  if ((int)v60 >= 1)
  {
    if ((int)v40 > 0)
    {
      uint64_t v61 = 0;
      uint64_t v62 = v158 * v40;
      uint64x2_t v63 = (int32x4_t *)((char *)&v178[2] + 4 * v62);
      while (1)
      {
        unsigned int v64 = sub_10025811C((v33 + v61), v33, v174) * v40;
        if (v40 >= 8)
        {
          int32x4_t v66 = vdupq_n_s32(v64);
          int32x4_t v67 = vdupq_n_s32(v64 + 4);
          uint64_t v68 = v40 & 0xFFFFFFF8;
          uint64x2_t v69 = v63;
          int32x4_t v70 = (int32x4_t)xmmword_100404900;
          v71.i64[0] = 0x800000008;
          v71.i64[1] = 0x800000008;
          do
          {
            v69[-1] = vaddq_s32(v66, v70);
            int32x4_t *v69 = vaddq_s32(v67, v70);
            int32x4_t v70 = vaddq_s32(v70, v71);
            v69 += 2;
            v68 -= 8;
          }
          while (v68);
          uint64_t v65 = v40 & 0xFFFFFFF8;
          if (v65 == v40) {
            goto LABEL_70;
          }
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v72 = v40 - v65;
        int v73 = v64 + v65;
        uint64x2_t v74 = (_DWORD *)v178 + v65 + v62;
        do
        {
          *v74++ = v73++;
          --v72;
        }
        while (v72);
LABEL_70:
        ++v61;
        uint64x2_t v63 = (int32x4_t *)((char *)v63 + 4 * v40);
        v62 += v40;
        if (v61 == v60) {
          goto LABEL_81;
        }
      }
    }
    uint64_t v75 = v33;
    do
    {
      sub_10025811C(v75, v33, v174);
      uint64_t v75 = (v75 + 1);
    }
    while (v160 - v158 != v75);
  }
LABEL_81:
  int v155 = v40 * v160;
  uint64_t v76 = v34 * v164;
  BOOL v161 = &v163[v76];
  char v165 = 2 * (v157 == 0);
  if (v38 >= 1)
  {
    int v77 = v40 * v33;
    uint64_t v78 = (v40 * v158);
    uint64_t v79 = (int)(v78 << v165);
    uint64_t v80 = (v40 * v60);
    uint64x2_t v81 = &v161[v79];
    uint64_t v82 = (int)v78;
    size_t v83 = v77;
    int v84 = 0;
    if (v157)
    {
      uint64_t v85 = v76 + v79;
      uint64x2_t v86 = &v163[v85 - (int)v78];
      uint64x2_t v87 = &v163[v77 + v85];
      do
      {
        if (v81 != v32) {
          memcpy(v81, v32, v83);
        }
        uint64x2_t v88 = (int *)v178;
        uint64x2_t v89 = v86;
        uint64_t v90 = v78;
        if ((int)v78 >= 1)
        {
          do
          {
            uint64_t v91 = *v88++;
            *v89++ = v32[v91];
            --v90;
          }
          while (v90);
        }
        uint64x2_t v92 = (int *)v178 + (int)v78;
        int16x8_t v93 = v87;
        uint64_t v94 = v80;
        if ((int)v80 >= 1)
        {
          do
          {
            uint64_t v95 = *v92++;
            *v93++ = v32[v95];
            --v94;
          }
          while (v94);
        }
        ++v84;
        v81 += v34;
        long long v32 = &__dst[(void)v32];
        v86 += v34;
        v87 += v34;
      }
      while (v84 != v38);
    }
    else
    {
      size_t __n = 4 * v77;
      uint64_t v96 = v76 + v79;
      int32x4_t v97 = &v163[v96 - 4 * (int)v78];
      int16x8_t v98 = &v163[4 * v77 + v96];
      do
      {
        if (v81 != v32)
        {
          uint64_t v99 = v82;
          memcpy(v81, v32, __n);
          uint64_t v82 = v99;
        }
        int8x16_t v100 = (int *)v178;
        int32x4_t v101 = v97;
        uint64_t v102 = v78;
        if ((int)v82 >= 1)
        {
          do
          {
            uint64_t v103 = *v100++;
            *(_DWORD *)int32x4_t v101 = *(_DWORD *)&v32[4 * v103];
            v101 += 4;
            --v102;
          }
          while (v102);
        }
        unint64_t v104 = (int *)v178 + (int)v78;
        unint64_t v105 = v98;
        uint64_t v106 = v80;
        if ((int)v80 >= 1)
        {
          do
          {
            uint64_t v107 = *v104++;
            *(_DWORD *)unint64_t v105 = *(_DWORD *)&v32[4 * v107];
            v105 += 4;
            --v106;
          }
          while (v106);
        }
        ++v84;
        v81 += v34;
        long long v32 = &__dst[(void)v32];
        v97 += v34;
        v98 += v34;
      }
      while (v84 != v38);
    }
  }
  int v108 = v155 << v165;
  if (v164 >= 1)
  {
    int16x8_t v109 = v163;
    uint64_t v110 = -v164;
    uint64_t v111 = v164;
    do
    {
      int v112 = sub_10025811C(v110, v38, v174);
      memcpy(v109, &v161[v34 * v112], v108);
      v109 += v34;
      uint64_t v110 = (v110 + 1);
      --v111;
    }
    while (v111);
  }
  uint64_t v113 = (v156 - (v38 + v164));
  if ((int)v113 >= 1)
  {
    uint64_t v114 = 0;
    unint64_t v115 = &v163[v34 * (v164 + (uint64_t)v38)];
    do
    {
      int v116 = sub_10025811C((v38 + v114), v38, v174);
      memcpy(v115, &v161[v34 * v116], v108);
      ++v114;
      v115 += v34;
    }
    while (v113 != v114);
  }
  if (v176 != v178 && v176 != 0) {
LABEL_157:
  }
    operator delete[]();
LABEL_158:
  if (v184 && atomic_fetch_add((atomic_uint *volatile)(v184 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v180);
  }
  uint64_t v184 = 0;
  long long v181 = 0u;
  long long v182 = 0u;
  if (SDWORD1(v180) >= 1)
  {
    uint64_t v151 = 0;
    unint64_t v152 = v185;
    do
      v152[v151++] = 0;
    while (v151 < SDWORD1(v180));
  }
  if (v186 != v187) {
    j__free(v186);
  }
  if (v192 && atomic_fetch_add((atomic_uint *volatile)(v192 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v188);
  }
  uint64_t v192 = 0;
  *(_OWORD *)__src = 0u;
  long long v190 = 0u;
  if (SDWORD1(v188) >= 1)
  {
    uint64_t v153 = 0;
    uint64_t v154 = v193;
    do
      v154[v153++] = 0;
    while (v153 < SDWORD1(v188));
  }
  if (v194 != v195) {
    j__free(v194);
  }
  if (v197) {
    sub_1002D6888(v196);
  }
}

void sub_1002591DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000B6A8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100259290()
{
}

void sub_100259298(_Unwind_Exception *a1)
{
}

void sub_1002592AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25 != a12 && a25 != 0) {
    JUMPOUT(0x1002592E0);
  }
  JUMPOUT(0x1002592ECLL);
}

void sub_10025930C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if (!a1 || !a2 || *(unsigned __int16 *)(a1 + 2) << 16 != 1111752704 || *(_WORD *)(a2 + 2) != 16964)
  {
    sub_1002943B4(a1, 0, 1, 0, (uint64_t)&v43);
    sub_1002943B4(v4, 0, 1, 0, (uint64_t)v36);
    if (((LOBYTE(v36[0]) ^ v43) & 7) == 0)
    {
      unint64_t v11 = *(v48 - 1);
      if (v11 == *(v40 - 1))
      {
        if (v11 == 2)
        {
          if (*v48 == *v40 && v48[1] == v40[1]) {
            goto LABEL_35;
          }
        }
        else
        {
          if ((int)v11 < 1) {
            goto LABEL_35;
          }
          if (*v48 == *v40)
          {
            uint64_t v20 = 1;
            do
            {
              unint64_t v21 = v20;
              if (v11 == v20) {
                break;
              }
              int v22 = v48[v20];
              int v23 = v40[v20++];
            }
            while (v22 == v23);
            if (v21 >= v11)
            {
LABEL_35:
              if (v5)
              {
                if (*(_DWORD *)v5 == 144)
                {
                  if (*(void *)(v5 + 88))
                  {
                    LODWORD(v5) = sub_100233F40(v5);
                    if (!v4) {
                      goto LABEL_39;
                    }
LABEL_46:
                    if (*(_DWORD *)v4 == 144 && *(void *)(v4 + 88))
                    {
                      LODWORD(v4) = sub_100233F40(v4);
                      if (v5 | v4) {
                        goto LABEL_40;
                      }
                    }
                    else
                    {
                      LODWORD(v4) = 0;
                      if (v5) {
                        goto LABEL_40;
                      }
                    }
                    goto LABEL_51;
                  }
                  LODWORD(v5) = 0;
                  if (v4) {
                    goto LABEL_46;
                  }
LABEL_39:
                  if (v5 | v4)
                  {
LABEL_40:
                    if (!v5 && (v43 & 0xFF8) != 0 || !v4 && (v36[0] & 0xFF8) != 0)
                    {
                      int32x2_t v51 = 0;
                      int32x4_t v52 = 0;
                      qmemcpy((void *)sub_1002D19D8(&v51, 72), "(coi1 != 0 || src.channels() == 1) && (coi2 != 0 || dst.channels() == 1)", 72);
                      sub_1002D2278(-215, (uint64_t *)&v51, "cvCopy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1290);
                    }
                    int32x2_t v51 = vadd_s32(vmax_s32((int32x2_t)__PAIR64__(v4, v5), (int32x2_t)0x100000001), (int32x2_t)-1);
                    sub_100234DCC((unint64_t)&v43, 1uLL, v36, 1uLL, (uint64_t)&v51, 1uLL);
LABEL_66:
                    if (v39 && atomic_fetch_add((atomic_uint *volatile)(v39 + 20), 0xFFFFFFFF) == 1) {
                      sub_1002932F4((uint64_t)v36);
                    }
                    uint64_t v39 = 0;
                    long long v37 = 0u;
                    long long v38 = 0u;
                    if ((int)v36[1] >= 1)
                    {
                      uint64_t v26 = 0;
                      uint64_t v27 = v40;
                      do
                        v27[v26++] = 0;
                      while (v26 < (int)v36[1]);
                    }
                    if (v41 != &v42) {
                      j__free(v41);
                    }
                    if (v47 && atomic_fetch_add((atomic_uint *volatile)(v47 + 20), 0xFFFFFFFF) == 1) {
                      sub_1002932F4((uint64_t)&v43);
                    }
                    uint64_t v47 = 0;
                    long long v45 = 0u;
                    long long v46 = 0u;
                    if (SHIDWORD(v43) >= 1)
                    {
                      uint64_t v28 = 0;
                      uint64_t v29 = v48;
                      do
                        v29[v28++] = 0;
                      while (v28 < SHIDWORD(v43));
                    }
                    if (v49 != &v50) {
                      j__free(v49);
                    }
                    return;
                  }
LABEL_51:
                  if (((LOWORD(v36[0]) ^ (unsigned __int16)v43) & 0xFF8) != 0)
                  {
                    int32x2_t v51 = 0;
                    int32x4_t v52 = 0;
                    qmemcpy((void *)sub_1002D19D8(&v51, 32), "src.channels() == dst.channels()", 32);
                    sub_1002D2278(-215, (uint64_t *)&v51, "cvCopy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1297);
                  }
                  if (a3)
                  {
                    int v33 = 33619968;
                    uint64_t v34 = v36;
                    uint64_t v35 = 0;
                    sub_1002943B4(a3, 0, 0, 0, (uint64_t)&v51);
                    int64x2_t v31 = &v51;
                    uint64_t v32 = 0;
                    int v30 = 16842752;
                    sub_100254AF8((uint64_t)&v43, (uint64_t)&v33, (uint64_t)&v30);
                    if (v55 && atomic_fetch_add((atomic_uint *volatile)(v55 + 20), 0xFFFFFFFF) == 1) {
                      sub_1002932F4((uint64_t)&v51);
                    }
                    uint64_t v55 = 0;
                    long long v53 = 0u;
                    long long v54 = 0u;
                    if (v51.i32[1] >= 1)
                    {
                      uint64_t v24 = 0;
                      uint64_t v25 = v56;
                      do
                        *(_DWORD *)(v25 + 4 * v24++) = 0;
                      while (v24 < v51.i32[1]);
                    }
                    if (v57 != &v58) {
                      j__free(v57);
                    }
                  }
                  else
                  {
                    v51.i32[0] = 33619968;
                    int32x4_t v52 = v36;
                    *(void *)&long long v53 = 0;
                    sub_10025401C((uint64_t)&v43, (uint64_t)&v51);
                  }
                  goto LABEL_66;
                }
                LODWORD(v5) = 0;
              }
              if (v4) {
                goto LABEL_46;
              }
              goto LABEL_39;
            }
          }
        }
      }
    }
    int32x2_t v51 = 0;
    int32x4_t v52 = 0;
    qmemcpy((void *)sub_1002D19D8(&v51, 50), "src.depth() == dst.depth() && src.size == dst.size", 50);
    sub_1002D2278(-215, (uint64_t *)&v51, "cvCopy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1279);
  }
  if (a3)
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v6 = sub_1002D19D8(&v43, 12);
    *(_DWORD *)(v6 + 8) = 807419197;
    *(void *)uint64_t v6 = *(void *)"maskarr == 0";
    sub_1002D2278(-215, &v43, "cvCopy", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/copy.cpp", 1245);
  }
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  memcpy((void *)(a2 + 52), (const void *)(a1 + 52), 4 * *(int *)(a1 + 4));
  *(void *)(v4 + 44) = *(void *)(v5 + 44);
  sub_10025ED68(*(void *)(v4 + 24));
  int v7 = *(_DWORD *)(v4 + 40);
  int v8 = *(void **)(v4 + 32);
  if (*(_DWORD *)(*(void *)(v5 + 24) + 104) >= 3 * v7)
  {
    j__free(v8);
    uint64_t v9 = *(int *)(v5 + 40);
    *(_DWORD *)(v4 + 40) = v9;
    *(void *)(v4 + 32) = 0;
    int v8 = (void *)sub_10020FEBC(8 * v9);
    *(void *)(v4 + 32) = v8;
    int v7 = *(_DWORD *)(v4 + 40);
  }
  bzero(v8, 8 * v7);
  int v10 = (_DWORD *)sub_100231830(v5, (uint64_t)&v43);
  if (v10)
  {
    while (1)
    {
      uint64_t v12 = *(void *)(v4 + 24);
      uint64_t v13 = *(void **)(v12 + 96);
      *(void *)unint64_t v36 = v13;
      if (v13)
      {
        *(void *)(v12 + 96) = v13[1];
        *(_DWORD *)v13 &= 0x3FFFFFFu;
        ++*(_DWORD *)(v12 + 104);
      }
      else
      {
        sub_10025EC10(v12, 0, v36);
        uint64_t v13 = *(void **)v36;
        uint64_t v12 = *(void *)(v4 + 24);
      }
      int v14 = (*(_DWORD *)(v4 + 40) - 1) & *v10;
      memcpy(v13, v10, *(int *)(v12 + 44));
      uint64_t v15 = *(void *)(v4 + 32);
      uint64_t v16 = 8 * v14;
      v13[1] = *(void *)(v15 + v16);
      *(void *)(v15 + v16) = v13;
      int v10 = (_DWORD *)*((void *)v44 + 1);
      if (!v10)
      {
        int v17 = v45 + 1;
        int v18 = *(_DWORD *)(v43 + 40);
        if ((int)v45 + 1 >= v18) {
          return;
        }
        for (uint64_t i = (_DWORD **)(*(void *)(v43 + 32) + 8 * (int)v45 + 8); ; ++i)
        {
          int v10 = *i;
          if (*i) {
            break;
          }
          if (v18 == ++v17) {
            return;
          }
        }
        LODWORD(v45) = v17;
      }
      uint64_t v44 = v10;
    }
  }
}

void sub_1002599E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100259AD4()
{
  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_1002D19D8(v0, 44), "The library is compiled without CUDA support", 44);
  sub_1002D2278(-216, v0, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

void sub_100259B30()
{
  sub_1002D1A1C(&v0);
}

void sub_100259B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100259B64()
{
  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_1002D19D8(v0, 44), "The library is compiled without CUDA support", 44);
  sub_1002D2278(-216, v0, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

uint64_t sub_100259BC4()
{
  sub_1002D1A1C(&v2);
  return v0;
}

void sub_100259BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100259BFC()
{
  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_1002D19D8(v0, 44), "The library is compiled without CUDA support", 44);
  sub_1002D2278(-216, v0, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

void sub_100259C58()
{
  sub_1002D1A1C(&v0);
}

void sub_100259C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100259C8C(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  v1[0] = 0;
  v1[1] = 0;
  qmemcpy((void *)sub_1002D19D8(v1, 44), "The library is compiled without CUDA support", 44);
  sub_1002D2278(-216, v1, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

uint64_t sub_100259CF0()
{
  sub_1002D1A1C(&v2);
  return v0;
}

void sub_100259D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002D1A1C(&a9);
  sub_100259D38(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100259D38(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100259DA4()
{
  v0[0] = 0;
  v0[1] = 0;
  qmemcpy((void *)sub_1002D19D8(v0, 44), "The library is compiled without CUDA support", 44);
  sub_1002D2278(-216, v0, "throw_no_cuda", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/private.cuda.hpp", 107);
}

void *sub_100259E00()
{
  sub_1002D1A1C(&v1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1004E0840))
  {
    sub_100259C8C(qword_1004E0848);
  }
  return qword_1004E0848;
}

void *sub_100259E50()
{
  __cxa_atexit((void (*)(void *))sub_100259EC4, v0 + 1, (void *)&_mh_execute_header);
  __cxa_guard_release(v0);
  return qword_1004E0848;
}

void sub_100259E90(_Unwind_Exception *a1)
{
}

void sub_100259EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100259EC4(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)a1;
  if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  return a1;
}

double sub_100259F30(int a1)
{
  uint64_t v2 = sub_10020FEBC(0x28uLL);
  if (!v2)
  {
    v5[0] = 0;
    v5[1] = 0;
    sub_1002D2278(-27, v5, "icvInitMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 92);
  }
  unsigned int v3 = (a1 + 7) & 0xFFFFFFF8;
  if (a1 < 1) {
    unsigned int v3 = 65408;
  }
  *(void *)(v2 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)uint64_t v2 = 1116274688;
  *(_DWORD *)(v2 + 32) = v3;
  return result;
}

void sub_100259FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100259FE0(uint64_t a1)
{
  if (!a1)
  {
    v3[0] = 0;
    v3[1] = 0;
    sub_1002D2278(-27, v3, "cvCreateChildMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 121);
  }
  sub_100259F30(*(_DWORD *)(a1 + 32));
  *(void *)(v2 + 24) = a1;
}

void sub_10025A048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10025A060(void **a1)
{
  if (!a1)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_1002D2278(-27, v2, "cvReleaseMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 183);
  }
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    sub_10025A0F0(v1);
    j__free(v1);
  }
}

void sub_10025A0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10025A0F0(void *result)
{
  uint64_t v1 = result;
  if (!result)
  {
    v10[0] = 0;
    v10[1] = 0;
    sub_1002D2278(-27, v10, "icvDestroyMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 140);
  }
  uint64_t v2 = result[3];
  unsigned int v3 = (void *)result[1];
  if (v2)
  {
    if (v3)
    {
      uint64_t v4 = *(void **)(v2 + 16);
      do
      {
        while (1)
        {
          uint64_t v5 = v3;
          unsigned int v3 = (void *)v3[1];
          if (v4) {
            break;
          }
          *(void *)(v2 + 8) = v5;
          *(void *)(v2 + 16) = v5;
          *uint64_t v5 = 0;
          v5[1] = 0;
          *((_DWORD *)result + 9) = *((_DWORD *)result + 8) - 16;
          uint64_t v4 = v5;
          if (!v3) {
            goto LABEL_22;
          }
        }
        *uint64_t v5 = v4;
        uint64_t v6 = (void *)v4[1];
        v5[1] = v6;
        if (v6) {
          *uint64_t v6 = v5;
        }
        v4[1] = v5;
        uint64_t v4 = v5;
      }
      while (v3);
    }
  }
  else if (v3)
  {
    int v7 = 0;
    do
    {
      double result = v3;
      unsigned int v3 = (void *)v3[1];
      uint64_t v8 = v1[3];
      if (v8)
      {
        if (v7)
        {
          *double result = v7;
          uint64_t v9 = (void *)v7[1];
          result[1] = v9;
          if (v9) {
            void *v9 = result;
          }
          v7[1] = result;
        }
        else
        {
          *(void *)(v8 + 8) = result;
          *(void *)(v8 + 16) = result;
          *double result = 0;
          result[1] = 0;
          *((_DWORD *)v1 + 9) = *((_DWORD *)v1 + 8) - 16;
        }
      }
      else
      {
        j__free(result);
        double result = v7;
      }
      int v7 = result;
    }
    while (v3);
  }
LABEL_22:
  v1[1] = 0;
  uint64_t v1[2] = 0;
  *((_DWORD *)v1 + 9) = 0;
  return result;
}

void sub_10025A224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10025A23C(void *result)
{
  if (!result)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_1002D2278(-27, v2, "cvClearMemStorage", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 200);
  }
  if (result[3]) {
    return sub_10025A0F0(result);
  }
  uint64_t v1 = result[1];
  result[2] = v1;
  if (v1) {
    LODWORD(v1) = *((_DWORD *)result + 8) - 16;
  }
  *((_DWORD *)result + 9) = v1;
  return result;
}

void sub_10025A2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025A2E8(uint64_t result, uint64_t a2)
{
  if (!result || !a2)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_1002D2278(-27, v2, "cvSaveMemStoragePos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 276);
  }
  *(void *)a2 = *(void *)(result + 16);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 36);
  return result;
}

void sub_10025A35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025A374(uint64_t result, uint64_t *a2)
{
  if (!result || !a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1002D2278(-27, &v5, "cvRestoreMemStoragePos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 288);
  }
  int v2 = *((_DWORD *)a2 + 2);
  if (v2 > *(_DWORD *)(result + 32))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1002D2278(-201, &v5, "cvRestoreMemStoragePos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 290);
  }
  uint64_t v3 = *a2;
  *(void *)(result + 16) = *a2;
  *(_DWORD *)(result + 36) = v2;
  if (!v3)
  {
    uint64_t v4 = *(void *)(result + 8);
    *(void *)(result + 16) = v4;
    if (v4) {
      LODWORD(v4) = *(_DWORD *)(result + 32) - 16;
    }
    *(_DWORD *)(result + 36) = v4;
  }
  return result;
}

void sub_10025A450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025A480(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  if (!a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v4 = sub_1002D19D8(&v8, 20);
    *(_DWORD *)(v4 + 16) = 1919251566;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"NULL storage pointer";
    sub_1002D2278(-27, &v8, "cvMemStorageAlloc", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 327);
  }
  if (a2 >> 31)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    qmemcpy((void *)sub_1002D19D8(&v8, 35), "Too large memory block is requested", 35);
    sub_1002D2278(-211, &v8, "cvMemStorageAlloc", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 330);
  }
  int v5 = *(_DWORD *)(a1 + 36);
  uint64_t v6 = v5;
  if (v5 < a2)
  {
    if ((int)((*(_DWORD *)(a1 + 32) & 0xFFFFFFF8) - 16) < a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      qmemcpy((void *)sub_1002D19D8(&v8, 37), "requested size is negative or too big", 37);
      sub_1002D2278(-211, &v8, "cvMemStorageAlloc", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 338);
    }
    sub_10025A654(a1);
    int v5 = *(_DWORD *)(a1 + 36);
    uint64_t v6 = v5;
  }
  uint64_t result = *(void *)(a1 + 16) + *(int *)(a1 + 32) - v6;
  *(_DWORD *)(a1 + 36) = (v5 - v2) & 0xFFFFFFF8;
  return result;
}

void sub_10025A60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025A654(uint64_t result)
{
  uint64_t v1 = result;
  if (!result)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    sub_1002D2278(-27, &v8, "icvGoNextMemBlock", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 218);
  }
  uint64_t v2 = *(void *)(result + 16);
  if (!v2 || (uint64_t v3 = *(void **)(v2 + 8)) == 0)
  {
    uint64_t v4 = *(void *)(result + 24);
    if (v4)
    {
      uint64_t v8 = *(void *)(v4 + 16);
      LODWORD(v9) = *(_DWORD *)(v4 + 36);
      sub_10025A654(v4);
      uint64_t v3 = *(void **)(v4 + 16);
      uint64_t result = sub_10025A374(v4, &v8);
      int v5 = *(void **)(v4 + 16);
      if (v3 == v5)
      {
        *(_DWORD *)(v4 + 36) = 0;
        *(void *)(v4 + 8) = 0;
        *(void *)(v4 + 16) = 0;
      }
      else
      {
        v5[1] = v3[1];
        uint64_t v6 = (void *)v3[1];
        if (v6) {
          *uint64_t v6 = v5;
        }
      }
    }
    else
    {
      uint64_t result = sub_10020FEBC(*(int *)(result + 32));
      uint64_t v3 = (void *)result;
    }
    v3[1] = 0;
    uint64_t v7 = *(void *)(v1 + 16);
    *uint64_t v3 = v7;
    if (!v7) {
      uint64_t v7 = v1;
    }
    *(void *)(v7 + 8) = v3;
  }
  *(void *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 36) = *(_DWORD *)(v1 + 32) - 16;
  return result;
}

void sub_10025A75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025A774(uint64_t a1, char *__s, unsigned int a3)
{
  unsigned int v3 = a3;
  if ((a3 & 0x80000000) != 0) {
    unsigned int v3 = strlen(__s);
  }
  uint64_t v6 = (void *)sub_10025A480(a1, (int)(v3 + 1));
  memcpy(v6, __s, (int)v3);
  *((unsigned char *)v6 + (int)v3) = 0;
  return v3;
}

_DWORD *sub_10025A7E4(unsigned int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    sub_1002D2278(-27, &v10, "cvCreateSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 377);
  }
  if (a2 < 0x60 || !a3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    sub_1002D2278(-201, &v10, "cvCreateSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 379);
  }
  uint64_t v8 = (_DWORD *)sub_10025A480(a4, a2);
  bzero(v8, a2);
  *uint64_t v8 = (unsigned __int16)a1 | 0x42990000;
  v8[1] = a2;
  if ((a1 & 0xFFF) != 0
    && (a1 & 0xFFF) != 7
    && (((a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a1 & 7))) & 3) != a3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    qmemcpy((void *)sub_1002D19D8(&v10, 110), "Specified element size doesn't match to the size of the specified element type (try to use 0 for element type)", 110);
    sub_1002D2278(-201, &v10, "cvCreateSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 395);
  }
  v8[11] = a3;
  *((void *)v8 + 9) = a4;
  sub_10025A9B0((uint64_t)v8, 0x400 / a3);
  return v8;
}

void sub_10025A968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025A9B0(uint64_t result, int a2)
{
  int v2 = a2;
  if (!result || !*(void *)(result + 72))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1002D2278(-27, &v5, "cvSetSeqBlockSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 415);
  }
  if (a2 < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1002D2278(-211, &v5, "cvSetSeqBlockSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 417);
  }
  int v3 = *(_DWORD *)(result + 44);
  if (!a2)
  {
    if (1024 / v3 <= 1) {
      int v2 = 1;
    }
    else {
      int v2 = 1024 / v3;
    }
  }
  signed int v4 = (*(_DWORD *)(*(void *)(result + 72) + 32) & 0xFFFFFFF8) - 48;
  if (v2 * v3 > v4)
  {
    int v2 = v4 / v3;
    if (!(v4 / v3))
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      qmemcpy((void *)sub_1002D19D8(&v5, 60), "Storage block size is too small to fit the sequence elements", 60);
      sub_1002D2278(-211, &v5, "cvSetSeqBlockSize", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 433);
    }
  }
  *(_DWORD *)(result + 64) = v2;
  return result;
}

void sub_10025AAF4()
{
  sub_1002D1A1C(&v1);
  *(_DWORD *)(v0 + 64) = 0;
}

void sub_10025AB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025AB60(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    int v3 = (v2 & (a2 >> 31)) + a2;
    int v4 = v3 >= v2 ? *(_DWORD *)(a1 + 40) : 0;
    a2 = v3 - v4;
    if (v3 - v4 >= v2) {
      return 0;
    }
  }
  uint64_t v5 = *(uint64_t **)(a1 + 88);
  if (v2 >= 2 * a2)
  {
    while (1)
    {
      int v7 = *((_DWORD *)v5 + 5);
      if (a2 < v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      a2 -= v7;
    }
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)*v5;
      v2 -= *((_DWORD *)v5 + 5);
    }
    while (a2 < v2);
    a2 -= v2;
  }
  return v5[3] + *(int *)(a1 + 44) * (uint64_t)a2;
}

char *sub_10025ABDC(uint64_t a1, char *a2, uint64_t a3)
{
  int v3 = a3;
  int v4 = a2;
  if (!a1 || !a2)
  {
    v20[0] = 0;
    v20[1] = 0;
    sub_1002D2278(-27, v20, "cvCvtSeqToArray", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 551);
  }
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  int v6 = *(_DWORD *)(a1 + 44);
  if (SHIDWORD(a3) <= 0) {
    int v7 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v7 = 0;
  }
  if (HIDWORD(a3) == a3) {
    int v8 = 0;
  }
  else {
    int v8 = v7 + HIDWORD(a3) - ((v5 & ((int)a3 >> 31)) + a3);
  }
  if (v5 <= 1) {
    unsigned int v9 = 1;
  }
  else {
    unsigned int v9 = *(_DWORD *)(a1 + 40);
  }
  signed int v10 = v8 + (((v8 & ~(v8 >> 31)) - v8 + (v8 >> 31)) / v9 + (v8 >> 31)) * v5;
  if (v10 >= (int)v5) {
    signed int v10 = *(_DWORD *)(a1 + 40);
  }
  int v11 = v10 * v6;
  if (!(v10 * v6)) {
    return 0;
  }
  sub_10025AD4C(a1, (uint64_t)v21, 0);
  sub_10025AE70(v21, v3, 0);
  int v12 = (int)v24;
  uint64_t v13 = v4;
  uint64_t v15 = v22;
  int v14 = v23;
  do
  {
    int v16 = v12 - v14;
    if (v11 >= v16) {
      int v17 = v16;
    }
    else {
      int v17 = v11;
    }
    memcpy(v13, v14, v17);
    v13 += v17;
    uint64_t v15 = *(void *)(v15 + 8);
    int v14 = *(char **)(v15 + 24);
    uint64_t v22 = v15;
    int v23 = v14;
    int v12 = v14 + *(_DWORD *)(v15 + 20) * v6;
    uint64_t v24 = &v14[*(int *)(v15 + 20) * (uint64_t)v6];
    BOOL v18 = __OFSUB__(v11, v17);
    v11 -= v17;
  }
  while (!((v11 < 0) ^ v18 | (v11 == 0)));
  return v4;
}

void sub_10025AD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10025AD4C(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2 || (*(void *)(a2 + 40) = 0, double result = 0.0, *(_OWORD *)(a2 + 24) = 0u, *(_OWORD *)(a2 + 8) = 0u, !a1))
  {
    v10[0] = 0;
    v10[1] = 0;
    sub_1002D2278(-27, v10, "cvStartReadSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 945);
  }
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 8) = a1;
  int v4 = *(uint64_t **)(a1 + 88);
  if (v4)
  {
    unsigned int v5 = (uint64_t *)*v4;
    uint64_t v6 = v4[3];
    *(void *)(a2 + 24) = v6;
    uint64_t v7 = *(int *)(a1 + 44);
    uint64_t v8 = v5[3] + (*((int *)v5 + 5) - 1) * v7;
    *(void *)(a2 + 56) = v8;
    *(_DWORD *)(a2 + 48) = *((_DWORD *)v4 + 4);
    if (a3)
    {
      *(void *)(a2 + 24) = v8;
      *(void *)(a2 + 56) = v6;
      int v4 = v5;
    }
    *(void *)(a2 + 16) = v4;
    uint64_t v9 = v4[3];
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 40) = v9 + *((int *)v4 + 5) * (uint64_t)(int)v7;
  }
  else
  {
    *(void *)(a2 + 56) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_DWORD *)(a2 + 48) = 0;
  }
  return result;
}

void sub_10025AE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10025AE70(void *result, int a2, int a3)
{
  int v3 = a2;
  if (!result || (uint64_t v4 = result[1]) == 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_1002D2278(-27, &v17, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
  }
  int v5 = *(_DWORD *)(v4 + 44);
  if (a3)
  {
    int v6 = v5 * a2;
    uint64_t v7 = (uint64_t **)result[2];
    unint64_t v8 = result[3];
    if (v5 * a2 <= 0)
    {
      unint64_t v15 = result[4];
      unint64_t v10 = v8 + v6;
      if (v10 < v15)
      {
        do
        {
          v6 += v8 - v15;
          uint64_t v7 = (uint64_t **)*v7;
          unint64_t v15 = (unint64_t)v7[3];
          unint64_t v8 = v15 + *((int *)v7 + 5) * (uint64_t)v5;
          unint64_t v10 = v8 + v6;
        }
        while (v10 < v15);
        result[2] = v7;
        result[4] = v15;
        result[5] = v8;
      }
    }
    else
    {
      unint64_t v9 = result[5];
      unint64_t v10 = v8 + v6;
      if (v10 >= v9)
      {
        do
        {
          v6 += v8 - v9;
          uint64_t v7 = (uint64_t **)v7[1];
          unint64_t v8 = (unint64_t)v7[3];
          uint64_t v11 = *((int *)v7 + 5) * (uint64_t)v5;
          unint64_t v9 = v8 + v11;
        }
        while (v6 >= (int)v11);
        result[2] = v7;
        unint64_t v10 = v8 + v6;
        result[4] = v8;
        result[5] = v9;
      }
    }
    result[3] = v10;
    return result;
  }
  int v12 = *(_DWORD *)(v4 + 40);
  if (a2 < 0)
  {
    if (-v12 > a2)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      sub_1002D2278(-211, &v17, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1055);
    }
    int v3 = v12 + a2;
    uint64_t v13 = *(uint64_t **)(result[1] + 88);
    int v14 = *((_DWORD *)v13 + 5);
    if (v12 + a2 < v14) {
      goto LABEL_28;
    }
  }
  else
  {
    if (a2 >= v12)
    {
      if (a2 - v12 >= v12)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        sub_1002D2278(-211, &v17, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1062);
      }
      int v3 = a2 - v12;
    }
    uint64_t v13 = *(uint64_t **)(result[1] + 88);
    int v14 = *((_DWORD *)v13 + 5);
    if (v3 < v14) {
      goto LABEL_28;
    }
  }
  if (v12 >= 2 * v3)
  {
    do
    {
      uint64_t v13 = (uint64_t *)v13[1];
      v3 -= v14;
      int v14 = *((_DWORD *)v13 + 5);
    }
    while (v3 >= v14);
  }
  else
  {
    do
    {
      uint64_t v13 = (uint64_t *)*v13;
      int v14 = *((_DWORD *)v13 + 5);
      v12 -= v14;
    }
    while (v3 < v12);
    v3 -= v12;
  }
LABEL_28:
  uint64_t v16 = v13[3];
  result[3] = v16 + v3 * v5;
  if ((uint64_t *)result[2] != v13)
  {
    result[2] = v13;
    result[4] = v16;
    result[5] = v16 + v14 * v5;
  }
  return result;
}

void sub_10025B0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *sub_10025B108(unsigned int a1, int a2, int a3, uint64_t a4, int a5, int *a6, uint64_t a7)
{
  if (a2 < 96 || a3 < 1 || a5 < 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    sub_1002D2278(-201, &v18, "cvMakeSeqHeaderForArray", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 590);
  }
  if (!a6 || (a4 ? (BOOL v14 = a7 == 0) : (BOOL v14 = 1), !v14 ? (v15 = 0) : (v15 = 1), a5 >= 1 && v15))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    sub_1002D2278(-27, &v18, "cvMakeSeqHeaderForArray", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 593);
  }
  bzero(a6, a2);
  *a6 = (unsigned __int16)a1 | 0x42990000;
  a6[1] = a2;
  if ((a1 & 0xFFF) != 0 && (((a1 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a1 & 7))) & 3) != a3)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    qmemcpy((void *)sub_1002D19D8(&v18, 106), "Element size doesn't match to the size of predefined element type (try to use 0 for sequence element type)", 106);
    sub_1002D2278(-201, &v18, "cvMakeSeqHeaderForArray", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 607);
  }
  a6[10] = a5;
  a6[11] = a3;
  uint64_t v16 = a4 + a5 * a3;
  *((void *)a6 + 6) = v16;
  *((void *)a6 + 7) = v16;
  if (a5 >= 1)
  {
    *((void *)a6 + 11) = a7;
    *(void *)a7 = a7;
    *(void *)(a7 + 8) = a7;
    *(_DWORD *)(a7 + 16) = 0;
    *(_DWORD *)(a7 + 20) = a5;
    *(void *)(a7 + 24) = a4;
  }
  return a6;
}

void sub_10025B2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10025B304(void *result, uint64_t a2)
{
  if (!result || !a2)
  {
    v3[0] = 0;
    v3[1] = 0;
    sub_1002D2278(-27, v3, "cvStartAppendToSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 820);
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 8) = result;
  int v2 = (void *)result[11];
  if (v2) {
    int v2 = (void *)*v2;
  }
  *(void *)(a2 + 16) = v2;
  *(void *)(a2 + 24) = result[7];
  *(void *)(a2 + 40) = result[6];
  return result;
}

void sub_10025B3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10025B3B8(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (!a4 || !a5)
  {
    v8[0] = 0;
    v8[1] = 0;
    sub_1002D2278(-27, v8, "cvStartWriteSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 838);
  }
  int v6 = sub_10025A7E4(a1, a2, a3, a4);
  return sub_10025B304(v6, a5);
}

void sub_10025B454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10025B46C(void *result)
{
  if (!result)
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_1002D2278(-27, v7, "cvFlushSeqWriter", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 850);
  }
  uint64_t v1 = result[1];
  uint64_t v2 = result[3];
  *(void *)(v1 + 56) = v2;
  uint64_t v3 = result[2];
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = *(void *)(v1 + 88);
    *(_DWORD *)(v3 + 20) = (v2 - *(void *)(v3 + 24)) / *(int *)(v1 + 44);
    uint64_t v6 = v5;
    do
    {
      v4 += *(_DWORD *)(v6 + 20);
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != v5);
    *(_DWORD *)(v1 + 40) = v4;
  }
  return result;
}

void sub_10025B514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025B52C(void *a1)
{
  if (!a1)
  {
    v11[0] = 0;
    v11[1] = 0;
    sub_1002D2278(-27, v11, "cvEndWriteSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 881);
  }
  uint64_t result = a1[1];
  uint64_t v3 = a1[3];
  *(void *)(result + 56) = v3;
  uint64_t v4 = a1[2];
  if (!v4) {
    goto LABEL_9;
  }
  int v5 = 0;
  uint64_t v6 = *(void *)(result + 88);
  *(_DWORD *)(v4 + 20) = (v3 - *(void *)(v4 + 24)) / *(int *)(result + 44);
  uint64_t v7 = v6;
  do
  {
    v5 += *(_DWORD *)(v7 + 20);
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7 != v6);
  *(_DWORD *)(result + 40) = v5;
  uint64_t v8 = *(void *)(result + 72);
  if (v8
    && (uint64_t v9 = *(void *)(v8 + 16) + *(int *)(v8 + 32),
        ((v9 - *(_DWORD *)(v8 + 36) - *(_DWORD *)(result + 48)) & 0xFFFFFFF8) == 0))
  {
    uint64_t v10 = *(void *)(result + 56);
    *(_DWORD *)(v8 + 36) = (v9 - v10) & 0xFFFFFFF8;
    *(void *)(result + 48) = v10;
    a1[3] = 0;
  }
  else
  {
LABEL_9:
    a1[3] = 0;
  }
  return result;
}

void sub_10025B64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025B664(void *a1)
{
  if (!a1 || (uint64_t v2 = a1[1]) == 0)
  {
    v9[0] = 0;
    v9[1] = 0;
    sub_1002D2278(-27, v9, "cvCreateSeqBlock", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 912);
  }
  uint64_t v3 = a1[3];
  *(void *)(v2 + 56) = v3;
  uint64_t v4 = a1[2];
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = *(void *)(v2 + 88);
    *(_DWORD *)(v4 + 20) = (v3 - *(void *)(v4 + 24)) / *(int *)(v2 + 44);
    uint64_t v7 = v6;
    do
    {
      v5 += *(_DWORD *)(v7 + 20);
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v6);
    *(_DWORD *)(v2 + 40) = v5;
  }
  uint64_t result = sub_10025B760(v2, 0);
  a1[2] = **(void **)(v2 + 88);
  a1[3] = *(void *)(v2 + 56);
  a1[5] = *(void *)(v2 + 48);
  return result;
}

void sub_10025B748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025B760(uint64_t a1, int a2)
{
  if (!a1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    sub_1002D2278(-27, &v21, "icvGrowSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 637);
  }
  uint64_t result = *(void *)(a1 + 80);
  if (result)
  {
    *(void *)(a1 + 80) = *(void *)(result + 8);
    int v5 = *(void **)(a1 + 88);
    if (v5) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
  int v10 = *(_DWORD *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  int v12 = *(_DWORD *)(a1 + 44);
  if (*(_DWORD *)(a1 + 40) >= 4 * v10) {
    uint64_t result = sub_10025A9B0(a1, 2 * v10);
  }
  if (!v11)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    qmemcpy((void *)sub_1002D19D8(&v21, 37), "The sequence has NULL storage pointer", 37);
    sub_1002D2278(-27, &v21, "icvGrowSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 650);
  }
  int v13 = *(_DWORD *)(v11 + 36);
  uint64_t v14 = *(void *)(v11 + 16) + *(int *)(v11 + 32);
  uint64_t v15 = *(void *)(a1 + 48);
  if ((unint64_t)(v14 - v13 - v15) > 7 || a2 || v13 < *(_DWORD *)(a1 + 44))
  {
    int v18 = v10 * v12 + 32;
    if (v13 < v18)
    {
      int v19 = v10 / 3;
      if (v10 <= 5) {
        int v19 = 1;
      }
      if (v13 >= v19 * v12 + 40) {
        int v18 = (v13 - 32) / *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 44) + 32;
      }
      else {
        sub_10025A654(v11);
      }
    }
    uint64_t result = sub_10025A480(v11, v18);
    *(void *)(result + 24) = (result + 39) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)(result + 20) = v18 - 32;
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    int v5 = *(void **)(a1 + 88);
    if (v5)
    {
LABEL_5:
      *(void *)uint64_t result = *v5;
      *(void *)(result + 8) = v5;
      *int v5 = result;
      uint64_t v6 = *(void *)result;
      *(void *)(*(void *)result + 8) = result;
      if (a2)
      {
LABEL_6:
        uint64_t v7 = *(int *)(result + 20);
        int v8 = *(_DWORD *)(a1 + 44);
        uint64_t v9 = *(void *)(result + 24) + v7;
        *(void *)(result + 24) = v9;
        if (result == v6)
        {
          *(void *)(a1 + 48) = v9;
          *(void *)(a1 + 56) = v9;
        }
        else
        {
          *(void *)(a1 + 88) = result;
          int v5 = (void *)result;
        }
        *(_DWORD *)(result + 16) = 0;
        do
        {
          *(_DWORD *)(result + 16) += (int)v7 / v8;
          uint64_t result = *(void *)(result + 8);
        }
        while ((void *)result != v5);
        uint64_t result = (uint64_t)v5;
        goto LABEL_33;
      }
LABEL_30:
      uint64_t v20 = *(void *)(result + 24);
      *(void *)(a1 + 56) = v20;
      *(void *)(a1 + 48) = v20 + *(int *)(result + 20);
      if (result == v6) {
        *(_DWORD *)(result + 16) = 0;
      }
      else {
        *(_DWORD *)(result + 16) = *(_DWORD *)(v6 + 20) + *(_DWORD *)(v6 + 16);
      }
LABEL_33:
      *(_DWORD *)(result + 20) = 0;
      return result;
    }
LABEL_29:
    *(void *)(a1 + 88) = result;
    *(void *)(result + 8) = result;
    int v5 = (void *)result;
    uint64_t v6 = result;
    *(void *)uint64_t result = result;
    if (a2) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
  int v16 = v13 / v12;
  if (v16 >= v10) {
    int v16 = v10;
  }
  uint64_t v17 = v15 + v16 * v12;
  *(void *)(a1 + 48) = v17;
  *(_DWORD *)(v11 + 36) = (v14 - v17) & 0xFFFFFFF8;
  return result;
}

void sub_10025BA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10025BA48(void *result, int a2)
{
  if (!result)
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_1002D2278(-27, v7, "cvChangeSeqBlock", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 995);
  }
  uint64_t v2 = (uint64_t *)result[2];
  if (a2 < 1)
  {
    uint64_t v3 = *v2;
    result[2] = v3;
    uint64_t v5 = result[1];
    uint64_t v4 = *(void *)(v3 + 24) + *(int *)(v5 + 44) * (*(int *)(v3 + 20) - 1);
  }
  else
  {
    uint64_t v3 = v2[1];
    result[2] = v3;
    uint64_t v4 = *(void *)(v3 + 24);
    uint64_t v5 = result[1];
  }
  result[3] = v4;
  uint64_t v6 = *(void *)(v3 + 24);
  result[4] = v6;
  result[5] = v6 + *(int *)(v5 + 44) * (uint64_t)*(int *)(v3 + 20);
  return result;
}

void sub_10025BB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_10025BB1C(uint64_t a1, void *__src)
{
  if (!a1)
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_1002D2278(-27, v7, "cvSeqPush", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1138);
  }
  size_t v4 = *(int *)(a1 + 44);
  uint64_t v5 = *(char **)(a1 + 56);
  if ((unint64_t)v5 >= *(void *)(a1 + 48))
  {
    sub_10025B760(a1, 0);
    uint64_t v5 = *(char **)(a1 + 56);
  }
  if (__src) {
    memcpy(v5, __src, v4);
  }
  ++*(_DWORD *)(**(void **)(a1 + 88) + 20);
  ++*(_DWORD *)(a1 + 40);
  *(void *)(a1 + 56) = &v5[v4];
  return v5;
}

void sub_10025BBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int *sub_10025BBFC(int *result, void *__dst)
{
  uint64_t v2 = result;
  if (!result)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    sub_1002D2278(-27, &v13, "cvSeqPop", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1169);
  }
  if (result[10] <= 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    sub_1002D2278(-201, &v13, "cvSeqPop", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1171);
  }
  size_t v3 = result[11];
  uint64_t v4 = *((void *)result + 7);
  size_t v5 = v4 - v3;
  *((void *)result + 7) = v4 - v3;
  if (__dst) {
    uint64_t result = (int *)memcpy(__dst, (const void *)(v4 - v3), v3);
  }
  *((void *)v2 + 7) = v5;
  --v2[10];
  uint64_t v6 = (_DWORD *)*((void *)v2 + 11);
  uint64_t v7 = *(_DWORD **)v6;
  int v8 = *(_DWORD *)(*(void *)v6 + 20) - 1;
  *(_DWORD *)(*(void *)v6 + 20) = v8;
  if (!v8)
  {
    uint64_t v9 = *((void *)v2 + 6);
    if (v6 == v7)
    {
      int v12 = v9 - v6[6] + v2[11] * v6[4];
      v6[5] = v12;
      *((void *)v6 + 3) = v9 - v12;
      *((void *)v2 + 11) = 0;
      v2[10] = 0;
      *((void *)v2 + 6) = 0;
      *((void *)v2 + 7) = 0;
    }
    else
    {
      v7[5] = v9 - v5;
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)(*(void *)v7 + 24) + v2[11] * (uint64_t)*(int *)(*(void *)v7 + 20);
      *((void *)v2 + 6) = v11;
      *((void *)v2 + 7) = v11;
      *(void *)(v10 + 8) = *((void *)v7 + 1);
      **((void **)v7 + 1) = v10;
      uint64_t v6 = v7;
    }
    *((void *)v6 + 1) = *((void *)v2 + 10);
    *((void *)v2 + 10) = v6;
  }
  return result;
}

void sub_10025BD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025BDA8(uint64_t result, char *__src, int a3, int a4)
{
  int v4 = a3;
  size_t v5 = __src;
  uint64_t v6 = result;
  if (!result)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 21), "NULL sequence pointer", 21);
    sub_1002D2278(-27, &v19, "cvSeqPushMulti", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1459);
  }
  if (a3 < 0)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    qmemcpy((void *)sub_1002D19D8(&v19, 38), "number of removed elements is negative", 38);
    sub_1002D2278(-201, &v19, "cvSeqPushMulti", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1461);
  }
  uint64_t v7 = *(int *)(result + 44);
  if (a4)
  {
    if (a3 >= 1)
    {
      uint64_t v8 = *(void *)(result + 88);
      if (__src)
      {
        do
        {
          if (!v8 || (int v9 = *(_DWORD *)(v8 + 16)) == 0)
          {
            sub_10025B760(v6, 1);
            uint64_t v8 = *(void *)(v6 + 88);
            int v9 = *(_DWORD *)(v8 + 16);
          }
          if (v9 >= v4) {
            int v10 = v4;
          }
          else {
            int v10 = v9;
          }
          v4 -= v10;
          int v11 = *(_DWORD *)(v8 + 20) + v10;
          *(_DWORD *)(v8 + 16) = v9 - v10;
          *(_DWORD *)(v8 + 20) = v11;
          *(_DWORD *)(v6 + 40) += v10;
          int v12 = (void *)(*(void *)(v8 + 24) - v10 * (int)v7);
          *(void *)(v8 + 24) = v12;
          uint64_t result = (uint64_t)memcpy(v12, &v5[v4 * (int)v7], v10 * (int)v7);
        }
        while (v4 > 0);
      }
      else
      {
        do
        {
          if (!v8 || (int v13 = *(_DWORD *)(v8 + 16)) == 0)
          {
            uint64_t result = sub_10025B760(v6, 1);
            uint64_t v8 = *(void *)(v6 + 88);
            int v13 = *(_DWORD *)(v8 + 16);
          }
          if (v13 >= v4) {
            int v14 = v4;
          }
          else {
            int v14 = v13;
          }
          int v15 = *(_DWORD *)(v8 + 20) + v14;
          *(_DWORD *)(v8 + 16) = v13 - v14;
          *(_DWORD *)(v8 + 20) = v15;
          *(_DWORD *)(v6 + 40) += v14;
          *(void *)(v8 + 24) -= v14 * (int)v7;
          BOOL v16 = __OFSUB__(v4, v14);
          v4 -= v14;
        }
        while (!((v4 < 0) ^ v16 | (v4 == 0)));
      }
    }
  }
  else if (a3 >= 1)
  {
    while (1)
    {
      uint64_t result = *(void *)(v6 + 56);
      int v17 = v4 >= (int)((*(void *)(v6 + 48) - result) / v7) ? (*(void *)(v6 + 48) - result) / v7 : v4;
      if (v17 >= 1)
      {
        *(_DWORD *)(**(void **)(v6 + 88) + 20) += v17;
        *(_DWORD *)(v6 + 40) += v17;
        uint64_t v18 = (int)v7 * (uint64_t)v17;
        if (v5)
        {
          memcpy((void *)result, v5, (int)v7 * (uint64_t)v17);
          v5 += v18;
          uint64_t result = *(void *)(v6 + 56);
        }
        v4 -= v17;
        *(void *)(v6 + 56) = result + v18;
        if (v4 < 1) {
          break;
        }
      }
      sub_10025B760(v6, 0);
    }
  }
  return result;
}

void sub_10025C008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_10025C038(char *result, char *__dst, int a3, int a4)
{
  int v4 = __dst;
  size_t v5 = (int *)result;
  if (!result)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    qmemcpy((void *)sub_1002D19D8(&v34, 21), "NULL sequence pointer", 21);
    sub_1002D2278(-27, &v34, "cvSeqPopMulti", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1528);
  }
  if (a3 < 0)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    qmemcpy((void *)sub_1002D19D8(&v34, 38), "number of removed elements is negative", 38);
    sub_1002D2278(-201, &v34, "cvSeqPopMulti", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1530);
  }
  if (*((_DWORD *)result + 10) >= a3) {
    int v6 = a3;
  }
  else {
    int v6 = *((_DWORD *)result + 10);
  }
  if (a4)
  {
    if (v6 >= 1)
    {
      uint64_t v7 = result + 48;
      uint64_t v8 = (uint64_t *)*((void *)result + 11);
      do
      {
        int v13 = *((_DWORD *)v8 + 5);
        if (v13 >= v6) {
          int v14 = v6;
        }
        else {
          int v14 = *((_DWORD *)v8 + 5);
        }
        int v15 = v13 - v14;
        *((_DWORD *)v8 + 5) = v15;
        v5[10] -= v14;
        *((_DWORD *)v8 + 4) += v14;
        uint64_t v16 = v5[11] * (uint64_t)v14;
        if (v4)
        {
          uint64_t v16 = (int)v16;
          uint64_t result = (char *)memcpy(v4, (const void *)v8[3], (int)v16);
          v4 += (int)v16;
          uint64_t v8 = (uint64_t *)*((void *)v5 + 11);
          int v15 = *((_DWORD *)v8 + 5);
        }
        uint64_t v17 = v8[3] + v16;
        v8[3] = v17;
        if (!v15)
        {
          uint64_t v18 = *v8;
          if (v8 == (uint64_t *)*v8)
          {
            int v9 = 0;
            uint64_t v10 = *((void *)v5 + 6);
            int v11 = v10 - v17 + v5[11] * *((_DWORD *)v8 + 4);
            *((_DWORD *)v8 + 5) = v11;
            v8[3] = v10 - v11;
            *((void *)v5 + 11) = 0;
            v5[10] = 0;
            *uint64_t v7 = 0;
            *((void *)v5 + 7) = 0;
          }
          else
          {
            int v19 = *((_DWORD *)v8 + 4);
            uint64_t v20 = v5[11] * (uint64_t)v19;
            *((_DWORD *)v8 + 5) = v20;
            v8[3] = v17 - v20;
            uint64_t v21 = v8;
            do
            {
              *((_DWORD *)v21 + 4) -= v19;
              uint64_t v21 = (uint64_t *)v21[1];
            }
            while (v21 != v8);
            int v9 = (uint64_t *)v8[1];
            *((void *)v5 + 11) = v9;
            *(void *)(v18 + 8) = v9;
            *(void *)v8[1] = v18;
          }
          v8[1] = *((void *)v5 + 10);
          *((void *)v5 + 10) = v8;
          uint64_t v8 = v9;
        }
        BOOL v12 = __OFSUB__(v6, v14);
        v6 -= v14;
      }
      while (!((v6 < 0) ^ v12 | (v6 == 0)));
    }
  }
  else
  {
    if (__dst) {
      int v4 = &__dst[*((int *)result + 11) * (uint64_t)v6];
    }
    if (v6 >= 1)
    {
      uint64_t v22 = (uint64_t *)(result + 48);
      int v23 = (_DWORD *)*((void *)result + 11);
      do
      {
        uint64_t v26 = *(_DWORD **)v23;
        int v27 = *(_DWORD *)(*(void *)v23 + 20);
        if (v27 >= v6) {
          int v28 = v6;
        }
        else {
          int v28 = *(_DWORD *)(*(void *)v23 + 20);
        }
        int v29 = v27 - v28;
        v26[5] = v29;
        int v30 = v5[11];
        v5[10] -= v28;
        int64x2_t v31 = (const void *)(*((void *)v5 + 7) - v30 * (uint64_t)v28);
        *((void *)v5 + 7) = v31;
        if (v4)
        {
          v4 -= v30 * (uint64_t)v28;
          uint64_t result = (char *)memcpy(v4, v31, v30 * (uint64_t)v28);
          int v23 = (_DWORD *)*((void *)v5 + 11);
          uint64_t v26 = *(_DWORD **)v23;
          int v29 = *(_DWORD *)(*(void *)v23 + 20);
        }
        if (!v29)
        {
          uint64_t v32 = *v22;
          if (v23 == v26)
          {
            int v23 = 0;
            int v33 = v32 - v26[6] + v5[11] * v26[4];
            v26[5] = v33;
            *((void *)v26 + 3) = v32 - v33;
            *((void *)v5 + 11) = 0;
            v5[10] = 0;
            *uint64_t v22 = 0;
            *((void *)v5 + 7) = 0;
          }
          else
          {
            v26[5] = v32 - v5[14];
            uint64_t v24 = *(void *)v26;
            uint64_t v25 = *(void *)(*(void *)v26 + 24) + v5[11] * (uint64_t)*(int *)(*(void *)v26 + 20);
            *((void *)v5 + 6) = v25;
            *((void *)v5 + 7) = v25;
            *(void *)(v24 + 8) = *((void *)v26 + 1);
            **((void **)v26 + 1) = v24;
          }
          *((void *)v26 + 1) = *((void *)v5 + 10);
          *((void *)v5 + 10) = v26;
        }
        BOOL v12 = __OFSUB__(v6, v28);
        v6 -= v28;
      }
      while (!((v6 < 0) ^ v12 | (v6 == 0)));
    }
  }
  return result;
}

void sub_10025C358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_10025C388(uint64_t a1)
{
  if (!a1)
  {
    v3[0] = 0;
    v3[1] = 0;
    sub_1002D2278(-27, v3, "cvClearSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1596);
  }
  int v1 = *(_DWORD *)(a1 + 40);

  return sub_10025C038((char *)a1, 0, v1, 0);
}

char *sub_10025C3F0()
{
  sub_1002D1A1C(&v1);
  return sub_10025C038(0, 0, MEMORY[0x28], 0);
}

void sub_10025C424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_10025C43C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = a3;
  if (!a1 || *(_WORD *)(a1 + 2) != 17049)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    qmemcpy((void *)sub_1002D19D8(&v35, 23), "Invalid sequence header", 23);
    sub_1002D2278(-5, &v35, "cvSeqSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1610);
  }
  if (!a3)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    if (!v5)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v7 = sub_1002D19D8(&v35, 20);
      *(_DWORD *)(v7 + 16) = 1919251566;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)"NULL storage pointer";
      sub_1002D2278(-27, &v35, "cvSeqSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1616);
    }
  }
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = *(int *)(a1 + 44);
  if (SHIDWORD(a2) <= 0) {
    int v10 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v10 = 0;
  }
  if (HIDWORD(a2) == a2) {
    int v11 = 0;
  }
  else {
    int v11 = v10 + HIDWORD(a2) - ((v8 & ((int)a2 >> 31)) + a2);
  }
  if (v8 <= 1) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = *(_DWORD *)(a1 + 40);
  }
  int v13 = v11 + (((v11 & ~(v11 >> 31)) - v11 + (v11 >> 31)) / v12 + (v11 >> 31)) * v8;
  if (v13 >= (int)v8) {
    int v14 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v14 = v13;
  }
  if ((int)v8 <= (int)a2) {
    int v15 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v15 = 0;
  }
  if ((int)a2 >= 0) {
    int v16 = -v15;
  }
  else {
    int v16 = *(_DWORD *)(a1 + 40);
  }
  unsigned int v17 = v16 + a2;
  if (v14 > v8 || v17 >= v8 && v14)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v18 = sub_1002D19D8(&v35, 18);
    *(_WORD *)(v18 + 16) = 25955;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)"Bad sequence slice";
    sub_1002D2278(-211, &v35, "cvSeqSlice", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1627);
  }
  int v19 = sub_10025A7E4(*(_DWORD *)a1, *(int *)(a1 + 4), *(int *)(a1 + 44), v5);
  if (v14 >= 1)
  {
    *(_OWORD *)__src = 0u;
    long long v39 = 0u;
    LODWORD(v37[0]) = 64;
    v37[1] = (void *)a1;
    uint64_t v20 = *(int **)(a1 + 88);
    if (v20)
    {
      uint64_t v21 = *(void *)v20;
      __src[1] = *((void **)v20 + 3);
      uint64_t v22 = *(int *)(a1 + 44);
      uint64_t v23 = *(void *)(v21 + 24) + (*(int *)(v21 + 20) - 1) * v22;
      int v40 = v20[4];
      __src[0] = v20;
      *(void **)&long long v39 = __src[1];
      *((void *)&v39 + 1) = (char *)__src[1] + v20[5] * (uint64_t)(int)v22;
    }
    else
    {
      uint64_t v23 = 0;
      int v40 = 0;
      *(_OWORD *)__src = 0uLL;
      long long v39 = 0uLL;
    }
    uint64_t v41 = v23;
    sub_10025AE70(v37, v17, 0);
    uint64_t v24 = (char *)__src[1];
    int64_t v25 = (int64_t)(*((void *)&v39 + 1) - (unint64_t)__src[1]) / v9;
    if (a4)
    {
      do
      {
        if ((int)v25 >= v14) {
          int v26 = v14;
        }
        else {
          int v26 = v25;
        }
        sub_10025BDA8((uint64_t)v19, v24, v26, 0);
        int64_t v25 = *((void *)__src[0] + 1);
        uint64_t v24 = *(char **)(v25 + 24);
        __src[0] = (void *)v25;
        __src[1] = v24;
        LODWORD(v25) = *(_DWORD *)(v25 + 20);
        BOOL v27 = __OFSUB__(v14, v26);
        v14 -= v26;
      }
      while (!((v14 < 0) ^ v27 | (v14 == 0)));
    }
    else
    {
      int v29 = 0;
      uint64_t v30 = 0;
      do
      {
        if ((int)v25 >= v14) {
          int v33 = v14;
        }
        else {
          int v33 = v25;
        }
        uint64_t v34 = sub_10025A480(v5, 0x20uLL);
        if (v29)
        {
          *(void *)uint64_t v34 = v30;
          *(void *)(v34 + 8) = v29;
          *int v29 = v34;
          *(void *)(v30 + 8) = v34;
          int v31 = *(_DWORD *)(v30 + 20) + *(_DWORD *)(v30 + 16);
        }
        else
        {
          int v31 = 0;
          *(void *)uint64_t v34 = v34;
          *(void *)(v34 + 8) = v34;
          int v29 = (void *)v34;
          *((void *)v19 + 11) = v34;
        }
        *(_DWORD *)(v34 + 16) = v31;
        *(void **)(v34 + 24) = __src[1];
        *(_DWORD *)(v34 + 20) = v33;
        v19[10] += v33;
        int64_t v25 = *((void *)__src[0] + 1);
        uint64_t v32 = *(void **)(v25 + 24);
        __src[0] = (void *)v25;
        __src[1] = v32;
        LODWORD(v25) = *(_DWORD *)(v25 + 20);
        uint64_t v30 = v34;
        BOOL v27 = __OFSUB__(v14, v33);
        v14 -= v33;
      }
      while (!((v14 < 0) ^ v27 | (v14 == 0)));
    }
  }
  return v19;
}

void sub_10025C79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10025C7E4(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (!a1)
  {
    int v3 = -27;
LABEL_5:
    long long v281 = 0uLL;
    uint64_t v4 = sub_1002D19D8(&v281, 18);
    *(_WORD *)(v4 + 16) = 25955;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"Bad input sequence";
    sub_1002D2278(v3, (uint64_t *)&v281, "cvSeqSort", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1921);
  }
  if (*(_WORD *)(a1 + 2) != 17049)
  {
    int v3 = -5;
    goto LABEL_5;
  }
  if (!a2)
  {
    long long v281 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v281, 21), "Null compare function", 21);
    sub_1002D2278(-27, (uint64_t *)&v281, "cvSeqSort", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1924);
  }
  if (*(int *)(a1 + 40) >= 2)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 44);
    sub_10025AD4C(a1, (uint64_t)&v289, 0);
    long long v285 = v289;
    long long v286 = v290;
    long long v287 = v291;
    long long v288 = v292;
    v295[0] = v290;
    v295[1] = v291;
    uint64_t v6 = (int)v5;
    uint64_t v7 = v290;
    unint64_t v8 = *((void *)&v290 + 1) - (int)v5;
    uint64_t v9 = v291;
    if (v8 >= (unint64_t)v291)
    {
      uint64_t v11 = *((void *)&v287 + 1);
    }
    else
    {
      uint64_t v7 = *(void *)v290;
      uint64_t v10 = *(int *)(*((void *)&v285 + 1) + 44);
      unint64_t v8 = *(void *)(v7 + 24) + v10 * (*(int *)(v7 + 20) - 1);
      *((void *)&v286 + 1) = v8;
      uint64_t v9 = *(void *)(v7 + 24);
      uint64_t v11 = v9 + *(int *)(v7 + 20) * (uint64_t)(int)v10;
    }
    unsigned int v12 = 0;
    int v253 = 7 * v5;
    uint64_t v274 = -(uint64_t)(int)v5;
    uint64_t v296 = v7;
    unint64_t v297 = v8;
    uint64_t v298 = v9;
    uint64_t v299 = v11;
    uint64_t v13 = v5;
    uint64_t v267 = v5 & 0xFFFFFFE0;
    uint64_t v258 = v5 & 0x18;
    uint64_t v264 = v5 & 0xFFFFFFF8;
    do
    {
      int v14 = &v295[4 * (unint64_t)v12];
      long long v15 = v14[1];
      long long v290 = *v14;
      long long v291 = v15;
      long long v16 = v14[3];
      long long v286 = v14[2];
      long long v287 = v16;
      unsigned int v252 = v12 - 1;
      unsigned int v17 = (uint64_t *)v290;
      uint64_t v18 = *((void *)&v286 + 1);
      if ((void)v290 == (void)v286)
      {
LABEL_35:
        unint64_t v27 = *((void *)&v290 + 1);
        unint64_t v28 = v291;
        uint64_t v25 = *((void *)&v289 + 1);
        int v30 = v6 + v18 - DWORD2(v290);
        unint64_t v31 = *((void *)&v291 + 1);
        uint64_t v271 = *((void *)&v289 + 1);
        if (v30 <= v253) {
          goto LABEL_369;
        }
        goto LABEL_36;
      }
LABEL_19:
      if (!v18)
      {
        long long v281 = 0uLL;
        sub_1002D2278(-27, (uint64_t *)&v281, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
      }
      uint64_t v19 = *(int *)(*((void *)&v285 + 1) + 44);
      if ((int)v19 >= 33)
      {
        uint64_t v20 = *((void *)&v286 + 1);
        uint64_t v21 = v287;
      }
      else
      {
        uint64_t v20 = *((void *)&v286 + 1);
        uint64_t v21 = v287;
        if ((0x8000808BuLL >> (v19 - 1)))
        {
          uint64_t v22 = (uint64_t)(*((void *)&v286 + 1) - v287) >> byte_100404910[v19 - 1];
          int v23 = *(_DWORD *)(v286 + 16);
          int v24 = v288;
          if (!*((void *)&v290 + 1)) {
            goto LABEL_27;
          }
          goto LABEL_28;
        }
      }
      uint64_t v22 = (v20 - v21) / v19;
      int v23 = *(_DWORD *)(v286 + 16);
      int v24 = v288;
      if (!*((void *)&v290 + 1))
      {
LABEL_27:
        long long v281 = 0uLL;
        sub_1002D2278(-27, (uint64_t *)&v281, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
      }
LABEL_28:
      uint64_t v25 = *((void *)&v289 + 1);
      uint64_t v26 = *(int *)(*((void *)&v289 + 1) + 44);
      if ((int)v26 >= 33)
      {
        unint64_t v27 = *((void *)&v290 + 1);
        unint64_t v28 = v291;
      }
      else
      {
        unint64_t v27 = *((void *)&v290 + 1);
        unint64_t v28 = v291;
        if ((0x8000808BuLL >> (v26 - 1)))
        {
          uint64_t v29 = (uint64_t)(*((void *)&v290 + 1) - v291) >> byte_100404910[v26 - 1];
          goto LABEL_33;
        }
      }
      uint64_t v29 = (uint64_t)(v27 - v28) / v26;
LABEL_33:
      unsigned int v17 = (uint64_t *)v290;
      int v30 = v6 + v6 * (v22 + v23 - (v24 + *(_DWORD *)(v290 + 16) + v29) + v292);
      unint64_t v31 = *((void *)&v291 + 1);
      uint64_t v271 = *((void *)&v289 + 1);
      if (v30 <= v253) {
        goto LABEL_369;
      }
LABEL_36:
      *(void *)&long long v281 = v289;
      *((void *)&v281 + 1) = v25;
      *(void *)&long long v282 = v17;
      *((void *)&v282 + 1) = v27;
      unint64_t v261 = v27;
      *(void *)&long long v283 = v28;
      *((void *)&v283 + 1) = v31;
      long long v284 = v292;
      long long v280 = v288;
      long long v277 = v285;
      uint64_t v263 = *((void *)&v285 + 1);
      long long v278 = v286;
      unint64_t v268 = *((void *)&v286 + 1);
      unint64_t v257 = v287;
      long long v279 = v287;
      int v32 = v30 / (int)v6;
      unint64_t v265 = (_DWORD *)v286;
      int v256 = v288;
      if (v30 / (int)v6 >= 41)
      {
        if (!v25)
        {
          uint64_t v293 = 0;
          uint64_t v294 = 0;
          sub_1002D2278(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
        }
        int v33 = *(_DWORD *)(v25 + 44);
        signed int v259 = v32 >> 3;
        uint64_t v34 = (v32 >> 3) * (uint64_t)v33;
        unsigned int v255 = v32;
        if ((int)v34 <= 0)
        {
          LODWORD(v36) = v27;
          unint64_t v35 = v27 + v34;
          int v48 = v259 * v33;
          if (v27 + v34 < v28)
          {
            do
            {
              v48 += v36 - v28;
              unsigned int v17 = (uint64_t *)*v17;
              unint64_t v28 = v17[3];
              unint64_t v36 = v28 + *((int *)v17 + 5) * (uint64_t)v33;
              unint64_t v35 = v36 + v48;
            }
            while (v35 < v28);
            goto LABEL_59;
          }
          unint64_t v36 = v31;
          unint64_t v49 = v35 + (int)v34;
          LODWORD(v54) = v27 + v34;
          if (v49 >= v28) {
            goto LABEL_79;
          }
        }
        else
        {
          unint64_t v35 = v27 + v34;
          if (v35 < v31)
          {
            unint64_t v36 = v31;
LABEL_60:
            unint64_t v49 = v35 + v34;
            if (v49 >= v36)
            {
              LODWORD(v28) = v35;
              do
              {
                LODWORD(v34) = v34 + v28 - v36;
                unsigned int v17 = (uint64_t *)v17[1];
                unint64_t v28 = v17[3];
                uint64_t v50 = *((int *)v17 + 5) * (uint64_t)v33;
                unint64_t v36 = v28 + v50;
              }
              while ((int)v34 >= (int)v50);
              unint64_t v49 = v28 + (int)v34;
            }
            goto LABEL_79;
          }
          int v52 = v259 * v33;
          LODWORD(v28) = v27;
          do
          {
            v52 += v28 - v31;
            unsigned int v17 = (uint64_t *)v17[1];
            unint64_t v28 = v17[3];
            uint64_t v53 = *((int *)v17 + 5) * (uint64_t)v33;
            LODWORD(v31) = v28 + v53;
          }
          while (v52 >= (int)v53);
          unint64_t v35 = v28 + v52;
          unint64_t v36 = v28 + v53;
LABEL_59:
          if ((int)v34 > 0) {
            goto LABEL_60;
          }
          unint64_t v49 = v35 + (int)v34;
          LODWORD(v54) = v35;
          if (v49 >= v28)
          {
LABEL_79:
            unint64_t v54 = v36;
            goto LABEL_80;
          }
        }
        do
        {
          LODWORD(v34) = v34 + v54 - v28;
          unsigned int v17 = (uint64_t *)*v17;
          unint64_t v28 = v17[3];
          unint64_t v54 = v28 + *((int *)v17 + 5) * (uint64_t)v33;
          unint64_t v49 = v54 + (int)v34;
        }
        while (v49 < v28);
LABEL_80:
        int v55 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v27, v35, a3);
        int v56 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v35, v49, a3);
        if (v55 < 0)
        {
          if ((v56 & 0x80000000) == 0)
          {
            if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v261, v49, a3) >= 0) {
              unint64_t v35 = v261;
            }
            else {
              unint64_t v35 = v49;
            }
          }
        }
        else if (v56 <= 0)
        {
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v261, v49, a3) >= 0) {
            unint64_t v35 = v49;
          }
          else {
            unint64_t v35 = v261;
          }
        }
        if (!v271)
        {
          uint64_t v293 = 0;
          uint64_t v294 = 0;
          sub_1002D2278(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
        }
        int v57 = *(_DWORD *)(v271 + 44);
        int v58 = v57 * ((v255 >> 1) - 3 * v259);
        if (v58 <= 0)
        {
          unint64_t v59 = v49 + v58;
          if (v59 < v28)
          {
            do
            {
              v58 += v49 - v28;
              unsigned int v17 = (uint64_t *)*v17;
              unint64_t v28 = v17[3];
              unint64_t v49 = v28 + *((int *)v17 + 5) * (uint64_t)v57;
              unint64_t v59 = v49 + v58;
            }
            while (v59 < v28);
            unint64_t v54 = v28 + *((int *)v17 + 5) * (uint64_t)v57;
          }
        }
        else
        {
          unint64_t v59 = v49 + v58;
          if (v59 >= v54)
          {
            do
            {
              v58 += v49 - v54;
              unsigned int v17 = (uint64_t *)v17[1];
              unint64_t v49 = v17[3];
              uint64_t v60 = *((int *)v17 + 5) * (uint64_t)v57;
              unint64_t v54 = v49 + v60;
            }
            while (v58 >= (int)v60);
            unint64_t v59 = v49 + v58;
            unint64_t v28 = v17[3];
          }
        }
        uint64_t v61 = v259 * (uint64_t)v57;
        if ((int)v61 <= 0)
        {
          unint64_t v41 = v59 + v61;
          int v63 = v259 * v57;
          LODWORD(v62) = v59;
          if (v59 + v61 < v28)
          {
            do
            {
              v63 += v62 - v28;
              unsigned int v17 = (uint64_t *)*v17;
              unint64_t v28 = v17[3];
              unint64_t v62 = v28 + *((int *)v17 + 5) * (uint64_t)v57;
              unint64_t v41 = v62 + v63;
            }
            while (v41 < v28);
            goto LABEL_103;
          }
          unint64_t v62 = v54;
          unint64_t v64 = v41 + (int)v61;
          LODWORD(v68) = v59 + v61;
          if (v64 >= v28) {
            goto LABEL_116;
          }
        }
        else
        {
          unint64_t v41 = v59 + v61;
          if (v41 < v54)
          {
            unint64_t v62 = v54;
LABEL_104:
            unint64_t v64 = v41 + v61;
            if (v64 >= v62)
            {
              LODWORD(v28) = v41;
              do
              {
                LODWORD(v61) = v61 + v28 - v62;
                unsigned int v17 = (uint64_t *)v17[1];
                unint64_t v28 = v17[3];
                uint64_t v65 = *((int *)v17 + 5) * (uint64_t)v57;
                unint64_t v62 = v28 + v65;
              }
              while ((int)v61 >= (int)v65);
              unint64_t v64 = v28 + (int)v61;
            }
            goto LABEL_116;
          }
          int v66 = v259 * v57;
          LODWORD(v28) = v59;
          do
          {
            v66 += v28 - v54;
            unsigned int v17 = (uint64_t *)v17[1];
            unint64_t v28 = v17[3];
            uint64_t v67 = *((int *)v17 + 5) * (uint64_t)v57;
            LODWORD(v54) = v28 + v67;
          }
          while (v66 >= (int)v67);
          unint64_t v41 = v28 + v66;
          unint64_t v62 = v28 + v67;
LABEL_103:
          if ((int)v61 > 0) {
            goto LABEL_104;
          }
          unint64_t v64 = v41 + (int)v61;
          LODWORD(v68) = v41;
          if (v64 >= v28)
          {
LABEL_116:
            unint64_t v68 = v62;
            goto LABEL_117;
          }
        }
        do
        {
          LODWORD(v61) = v61 + v68 - v28;
          unsigned int v17 = (uint64_t *)*v17;
          unint64_t v28 = v17[3];
          unint64_t v68 = v28 + *((int *)v17 + 5) * (uint64_t)v57;
          unint64_t v64 = v68 + (int)v61;
        }
        while (v64 < v28);
LABEL_117:
        int v69 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v59, v41, a3);
        int v70 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v41, v64, a3);
        if (v69 < 0)
        {
          if ((v70 & 0x80000000) == 0)
          {
            if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v59, v64, a3) >= 0) {
              unint64_t v41 = v59;
            }
            else {
              unint64_t v41 = v64;
            }
          }
        }
        else if (v70 <= 0)
        {
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v59, v64, a3) >= 0) {
            unint64_t v41 = v64;
          }
          else {
            unint64_t v41 = v59;
          }
        }
        int v71 = *(_DWORD *)(v271 + 44);
        int v72 = v71 * (v255 - (v255 >> 1) + ~(3 * v259));
        if (v72 <= 0)
        {
          unint64_t v73 = v64 + v72;
          if (v73 < v28)
          {
            do
            {
              v72 += v64 - v28;
              unsigned int v17 = (uint64_t *)*v17;
              unint64_t v28 = v17[3];
              unint64_t v64 = v28 + *((int *)v17 + 5) * (uint64_t)v71;
              unint64_t v73 = v64 + v72;
            }
            while (v73 < v28);
            unint64_t v68 = v28 + *((int *)v17 + 5) * (uint64_t)v71;
          }
        }
        else
        {
          unint64_t v73 = v64 + v72;
          if (v73 >= v68)
          {
            do
            {
              v72 += v64 - v68;
              unsigned int v17 = (uint64_t *)v17[1];
              unint64_t v64 = v17[3];
              uint64_t v74 = *((int *)v17 + 5) * (uint64_t)v71;
              unint64_t v68 = v64 + v74;
            }
            while (v72 >= (int)v74);
            unint64_t v73 = v64 + v72;
            unint64_t v28 = v17[3];
          }
        }
        uint64_t v75 = v259 * (uint64_t)v71;
        if ((int)v75 > 0)
        {
          unint64_t v45 = v73 + v75;
          if (v45 >= v68)
          {
            int v76 = v259 * v71;
            LODWORD(v28) = v73;
            do
            {
              v76 += v28 - v68;
              unsigned int v17 = (uint64_t *)v17[1];
              unint64_t v28 = v17[3];
              uint64_t v77 = *((int *)v17 + 5) * (uint64_t)v71;
              unint64_t v68 = v28 + v77;
            }
            while (v76 >= (int)v77);
            unint64_t v45 = v28 + v76;
            goto LABEL_140;
          }
          goto LABEL_141;
        }
        unint64_t v45 = v73 + v75;
        int v78 = v259 * v71;
        LODWORD(v68) = v73;
        if (v73 + v75 >= v28) {
          goto LABEL_145;
        }
        do
        {
          v78 += v68 - v28;
          unsigned int v17 = (uint64_t *)*v17;
          unint64_t v28 = v17[3];
          unint64_t v68 = v28 + *((int *)v17 + 5) * (uint64_t)v71;
          unint64_t v45 = v68 + v78;
        }
        while (v45 < v28);
LABEL_140:
        if ((int)v75 <= 0)
        {
LABEL_145:
          unint64_t v79 = v45 + (int)v75;
          for (LODWORD(v82) = v45; v79 < v28; unint64_t v79 = v82 + (int)v75)
          {
            LODWORD(v75) = v75 + v82 - v28;
            unsigned int v17 = (uint64_t *)*v17;
            unint64_t v28 = v17[3];
            unint64_t v82 = v28 + *((int *)v17 + 5) * (uint64_t)v71;
          }
        }
        else
        {
LABEL_141:
          unint64_t v79 = v45 + v75;
          if (v79 >= v68)
          {
            LODWORD(v80) = v45;
            do
            {
              LODWORD(v75) = v75 + v80 - v68;
              unsigned int v17 = (uint64_t *)v17[1];
              uint64_t v80 = v17[3];
              int v81 = *((_DWORD *)v17 + 5) * v71;
              LODWORD(v68) = v80 + v81;
            }
            while ((int)v75 >= v81);
            unint64_t v79 = v80 + (int)v75;
          }
        }
        int v83 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v73, v45, a3);
        int v84 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v45, v79, a3);
        if (v83 < 0)
        {
          if ((v84 & 0x80000000) == 0)
          {
            if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v73, v79, a3) >= 0) {
              unint64_t v45 = v73;
            }
            else {
              unint64_t v45 = v79;
            }
          }
        }
        else if (v84 <= 0)
        {
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v73, v79, a3) >= 0) {
            unint64_t v45 = v79;
          }
          else {
            unint64_t v45 = v73;
          }
        }
        goto LABEL_156;
      }
      if (v32 >= 0) {
        int v37 = v30 / (int)v6;
      }
      else {
        int v37 = v32 + 1;
      }
      if (!v25)
      {
        uint64_t v293 = 0;
        uint64_t v294 = 0;
        sub_1002D2278(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
      }
      int v38 = v37 >> 1;
      int v39 = *(_DWORD *)(v25 + 44);
      int v40 = v39 * (v37 >> 1);
      if (v40 <= 0)
      {
        LODWORD(v43) = v27;
        unint64_t v41 = v27 + v40;
        if (v41 < v28)
        {
          do
          {
            v40 += v43 - v28;
            unsigned int v17 = (uint64_t *)*v17;
            unint64_t v28 = v17[3];
            unint64_t v43 = v28 + *((int *)v17 + 5) * (uint64_t)v39;
            unint64_t v41 = v43 + v40;
          }
          while (v41 < v28);
LABEL_52:
          int v44 = v39 * (v32 + ~v38);
          if (v44 <= 0) {
            goto LABEL_68;
          }
          goto LABEL_53;
        }
      }
      else
      {
        unint64_t v41 = v27 + v40;
        if (v41 >= v31)
        {
          LODWORD(v28) = v27;
          do
          {
            v40 += v28 - v31;
            unsigned int v17 = (uint64_t *)v17[1];
            unint64_t v28 = v17[3];
            uint64_t v42 = *((int *)v17 + 5) * (uint64_t)v39;
            LODWORD(v31) = v28 + v42;
          }
          while (v40 >= (int)v42);
          unint64_t v41 = v28 + v40;
          unint64_t v43 = v28 + v42;
          goto LABEL_52;
        }
      }
      unint64_t v43 = v31;
      int v44 = v39 * (v32 + ~v38);
      if (v44 <= 0)
      {
LABEL_68:
        unint64_t v45 = v41 + v44;
        for (LODWORD(v51) = v41; v45 < v28; unint64_t v45 = v51 + v44)
        {
          v44 += v51 - v28;
          unsigned int v17 = (uint64_t *)*v17;
          unint64_t v28 = v17[3];
          unint64_t v51 = v28 + *((int *)v17 + 5) * (uint64_t)v39;
        }
        goto LABEL_70;
      }
LABEL_53:
      unint64_t v45 = v41 + v44;
      if (v45 >= v43)
      {
        LODWORD(v46) = v41;
        do
        {
          v44 += v46 - v43;
          unsigned int v17 = (uint64_t *)v17[1];
          uint64_t v46 = v17[3];
          int v47 = *((_DWORD *)v17 + 5) * v39;
          LODWORD(v43) = v46 + v47;
        }
        while (v44 >= v47);
        unint64_t v45 = v46 + v44;
      }
LABEL_70:
      unint64_t v35 = v261;
LABEL_156:
      int v85 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v35, v41, a3);
      int v86 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))a2)(v41, v45, a3);
      if (v85 < 0)
      {
        if ((v86 & 0x80000000) == 0)
        {
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v35, v45, a3) >= 0) {
            unint64_t v41 = v35;
          }
          else {
            unint64_t v41 = v45;
          }
        }
      }
      else if (v86 <= 0)
      {
        if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v35, v45, a3) >= 0) {
          unint64_t v41 = v45;
        }
        else {
          unint64_t v41 = v35;
        }
      }
      long long v289 = v281;
      long long v290 = v282;
      long long v291 = v283;
      long long v292 = v284;
      uint64_t v87 = *((void *)&v282 + 1);
      if (v41 != *((void *)&v282 + 1) && (int)v6 >= 1)
      {
        uint64_t v88 = 0;
        do
        {
          char v89 = *(unsigned char *)(v41 + v88);
          *(unsigned char *)(v41 + v88) = *(unsigned char *)(*((void *)&v290 + 1) + v88);
          *(unsigned char *)(*((void *)&v290 + 1) + v88++) = v89;
        }
        while (v13 != v88);
        uint64_t v87 = *((void *)&v290 + 1);
      }
      unint64_t v90 = v87 + v6;
      *((void *)&v290 + 1) = v87 + v6;
      unint64_t v91 = *((void *)&v291 + 1);
      uint64_t v93 = *((void *)&v289 + 1);
      uint64_t v92 = v290;
      if ((unint64_t)(v87 + v6) >= *((void *)&v291 + 1))
      {
        uint64_t v92 = *(void *)(v290 + 8);
        unint64_t v90 = *(void *)(v92 + 24);
        *(void *)&long long v290 = v92;
        *((void *)&v290 + 1) = v90;
        unint64_t v94 = *(void *)(v92 + 24);
        *(void *)&long long v291 = v94;
        unint64_t v91 = v94 + *(int *)(*((void *)&v289 + 1) + 44) * (uint64_t)*(int *)(v92 + 20);
        *((void *)&v291 + 1) = v91;
      }
      else
      {
        unint64_t v94 = v291;
      }
      int v95 = 0;
      int v272 = v292;
      unint64_t v96 = *((void *)&v286 + 1);
      unint64_t v97 = v257;
      unint64_t v98 = v90;
      while (v90 != v96)
      {
        while (1)
        {
          int v99 = a2();
          if (v99 > 0) {
            break;
          }
          if (!v99)
          {
            if (v98 != *((void *)&v290 + 1) && (int)v6 >= 1)
            {
              uint64_t v103 = 0;
              do
              {
                char v104 = *(unsigned char *)(v98 + v103);
                *(unsigned char *)(v98 + v103) = *(unsigned char *)(*((void *)&v290 + 1) + v103);
                *(unsigned char *)(*((void *)&v290 + 1) + v103++) = v104;
              }
              while (v13 != v103);
            }
            v98 += v6;
            if (v98 >= v91)
            {
              uint64_t v92 = *(void *)(v92 + 8);
              unint64_t v94 = *(void *)(v92 + 24);
              unint64_t v91 = v94 + *(int *)(v93 + 44) * (uint64_t)*(int *)(v92 + 20);
              int v95 = 1;
              unint64_t v98 = v94;
              unint64_t v100 = *((void *)&v290 + 1) + v6;
              *((void *)&v290 + 1) = v100;
              if (v100 < *((void *)&v291 + 1)) {
                goto LABEL_176;
              }
            }
            else
            {
              int v95 = 1;
              unint64_t v100 = *((void *)&v290 + 1) + v6;
              *((void *)&v290 + 1) = v100;
              if (v100 < *((void *)&v291 + 1)) {
                goto LABEL_176;
              }
            }
LABEL_180:
            uint64_t v101 = *(void *)(v290 + 8);
            unint64_t v100 = *(void *)(v101 + 24);
            *(void *)&long long v290 = v101;
            *((void *)&v290 + 1) = v100;
            *(void *)&long long v291 = *(void *)(v101 + 24);
            *((void *)&v291 + 1) = v291 + *(int *)(*((void *)&v289 + 1) + 44) * (uint64_t)*(int *)(v101 + 20);
            goto LABEL_176;
          }
          unint64_t v100 = *((void *)&v290 + 1) + v6;
          *((void *)&v290 + 1) = v100;
          if (v100 >= *((void *)&v291 + 1)) {
            goto LABEL_180;
          }
LABEL_176:
          if (v100 == *((void *)&v286 + 1))
          {
            unint64_t v96 = v100;
            goto LABEL_224;
          }
        }
        uint64_t v105 = *((void *)&v290 + 1);
        unint64_t v96 = *((void *)&v286 + 1);
        while (1)
        {
          if (v105 == v96) {
            goto LABEL_224;
          }
          int v106 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))a2)(v96, v87, a3);
          if (v106 < 0) {
            break;
          }
          if (v106)
          {
            unint64_t v96 = *((void *)&v286 + 1) + v274;
            *((void *)&v286 + 1) = v96;
            if (v96 >= (unint64_t)v287) {
              goto LABEL_193;
            }
LABEL_209:
            *(void *)&long long v286 = *(void *)v286;
            uint64_t v110 = *(int *)(*((void *)&v285 + 1) + 44);
            unint64_t v96 = *(void *)(v286 + 24) + v110 * (*(int *)(v286 + 20) - 1);
            *((void *)&v286 + 1) = v96;
            *(void *)&long long v287 = *(void *)(v286 + 24);
            *((void *)&v287 + 1) = v287 + *(int *)(v286 + 20) * (uint64_t)(int)v110;
            goto LABEL_193;
          }
          if (v268 != *((void *)&v286 + 1) && (int)v6 >= 1)
          {
            uint64_t v108 = 0;
            do
            {
              char v109 = *(unsigned char *)(v268 + v108);
              *(unsigned char *)(v268 + v108) = *(unsigned char *)(*((void *)&v286 + 1) + v108);
              *(unsigned char *)(*((void *)&v286 + 1) + v108++) = v109;
            }
            while (v13 != v108);
          }
          if (v268 + v274 >= v97)
          {
            v268 += v274;
          }
          else
          {
            unint64_t v97 = *(void *)(*(void *)v265 + 24);
            unint64_t v265 = *(_DWORD **)v265;
            unint64_t v268 = v97 + *(int *)(v263 + 44) * ((int)v265[5] - 1);
          }
          int v95 = 1;
          unint64_t v96 = *((void *)&v286 + 1) + v274;
          *((void *)&v286 + 1) = v96;
          if (v96 < (unint64_t)v287) {
            goto LABEL_209;
          }
LABEL_193:
          uint64_t v105 = *((void *)&v290 + 1);
        }
        uint64_t v111 = *((void *)&v290 + 1);
        unint64_t v96 = *((void *)&v286 + 1);
        if (*((void *)&v290 + 1) == *((void *)&v286 + 1)) {
          break;
        }
        if ((int)v6 >= 1)
        {
          uint64_t v112 = 0;
          do
          {
            char v113 = *(unsigned char *)(*((void *)&v290 + 1) + v112);
            *(unsigned char *)(*((void *)&v290 + 1) + v112) = *(unsigned char *)(*((void *)&v286 + 1) + v112);
            *(unsigned char *)(*((void *)&v286 + 1) + v112++) = v113;
          }
          while (v13 != v112);
          uint64_t v111 = *((void *)&v290 + 1);
        }
        unint64_t v90 = v111 + v6;
        *((void *)&v290 + 1) = v111 + v6;
        if ((unint64_t)(v111 + v6) >= *((void *)&v291 + 1))
        {
          uint64_t v116 = *(void *)(v290 + 8);
          unint64_t v90 = *(void *)(v116 + 24);
          *(void *)&long long v290 = v116;
          *((void *)&v290 + 1) = v90;
          *(void *)&long long v291 = *(void *)(v116 + 24);
          *((void *)&v291 + 1) = v291 + *(int *)(*((void *)&v289 + 1) + 44) * (uint64_t)*(int *)(v116 + 20);
          uint64_t v114 = *((void *)&v286 + 1);
          unint64_t v96 = *((void *)&v286 + 1) + v274;
          *((void *)&v286 + 1) = v96;
          if (v96 >= (unint64_t)v287) {
            goto LABEL_220;
          }
LABEL_217:
          *(void *)&long long v286 = *(void *)v286;
          uint64_t v115 = *(int *)(*((void *)&v285 + 1) + 44);
          unint64_t v96 = *(void *)(v286 + 24) + v115 * (*(int *)(v286 + 20) - 1);
          *((void *)&v286 + 1) = v96;
          *(void *)&long long v287 = *(void *)(v286 + 24);
          *((void *)&v287 + 1) = v287 + *(int *)(v286 + 20) * (uint64_t)(int)v115;
          int v95 = 1;
          if (v90 == v114)
          {
LABEL_221:
            uint64_t v117 = a1;
            if (!v90)
            {
LABEL_242:
              uint64_t v293 = 0;
              uint64_t v294 = 0;
              sub_1002D2278(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_243:
            uint64_t v127 = *(int *)(*((void *)&v289 + 1) + 44);
            unint64_t v262 = v97;
            if ((int)v127 >= 33)
            {
              uint64_t v128 = *((void *)&v290 + 1);
              uint64_t v129 = v291;
            }
            else
            {
              uint64_t v128 = *((void *)&v290 + 1);
              uint64_t v129 = v291;
              if ((0x8000808BuLL >> (v127 - 1)))
              {
                int v130 = *(_DWORD *)(v290 + 16) + ((uint64_t)(*((void *)&v290 + 1) - v291) >> byte_100404910[v127 - 1]);
                int v131 = v130 - v292;
                if (v130 == v292) {
                  goto LABEL_246;
                }
LABEL_250:
                if (!*((void *)&v282 + 1)) {
                  goto LABEL_251;
                }
                goto LABEL_252;
              }
            }
            int v132 = *(_DWORD *)(v290 + 16) + (v128 - v129) / v127;
            int v131 = v132 - v292;
            if (v132 != v292) {
              goto LABEL_250;
            }
LABEL_246:
            int v131 = *(_DWORD *)(v117 + 40);
            if (!*((void *)&v282 + 1))
            {
LABEL_251:
              uint64_t v293 = 0;
              uint64_t v294 = 0;
              sub_1002D2278(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_252:
            uint64_t v133 = *(int *)(*((void *)&v281 + 1) + 44);
            if ((int)v133 >= 33)
            {
              uint64_t v134 = *((void *)&v282 + 1);
LABEL_257:
              uint64_t v135 = (v134 - (uint64_t)v283) / v133;
              int v136 = *(_DWORD *)(v282 + 16);
              int v137 = v284;
              if (!v98) {
                goto LABEL_258;
              }
              goto LABEL_259;
            }
            uint64_t v134 = *((void *)&v282 + 1);
            if (((0x8000808BuLL >> (v133 - 1)) & 1) == 0) {
              goto LABEL_257;
            }
            uint64_t v135 = (uint64_t)(*((void *)&v282 + 1) - v283) >> byte_100404910[v133 - 1];
            int v136 = *(_DWORD *)(v282 + 16);
            int v137 = v284;
            if (!v98)
            {
LABEL_258:
              uint64_t v293 = 0;
              uint64_t v294 = 0;
              sub_1002D2278(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_259:
            uint64_t v138 = *(int *)(v93 + 44);
            if (int)v138 <= 32 && ((0x8000808BuLL >> (v138 - 1)))
            {
              int v139 = ((uint64_t)(v98 - v94) >> byte_100404910[v138 - 1]) - v272 + *(_DWORD *)(v92 + 16);
              if (!v139) {
LABEL_262:
              }
                int v139 = *(_DWORD *)(a1 + 40);
            }
            else
            {
              int v139 = (uint64_t)(v98 - v94) / v138 - v272 + *(_DWORD *)(v92 + 16);
              if (!v139) {
                goto LABEL_262;
              }
            }
            int v140 = v131 - v139;
            int v141 = v137 - v136 - v135 + v139;
            int v273 = v140;
            if (v140 >= v141) {
              int v142 = v141;
            }
            else {
              int v142 = v140;
            }
            if (v142 >= 1)
            {
              uint64_t v143 = v282;
              uint64_t v260 = *((void *)&v281 + 1);
              unint64_t v144 = *((void *)&v282 + 1);
              unint64_t v145 = *((void *)&v283 + 1);
              LODWORD(v146) = DWORD2(v290);
              BOOL v147 = (uint64_t **)v290;
              unint64_t v148 = *((void *)&v291 + 1);
              LODWORD(v149) = v291;
              if (!*((void *)&v289 + 1))
              {
                uint64_t v293 = 0;
                uint64_t v294 = 0;
                sub_1002D2278(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
              }
              uint64_t v150 = *((void *)&v289 + 1);
              int v151 = *(_DWORD *)(*((void *)&v289 + 1) + 44);
              int v152 = -(v142 * v151);
              if (v152 < 0 || v142 * v151 == 0)
              {
                unint64_t v153 = *((void *)&v290 + 1) + v152;
                if (v153 < (unint64_t)v291)
                {
                  do
                  {
                    v152 += v146 - v149;
                    BOOL v147 = (uint64_t **)*v147;
                    unint64_t v149 = (unint64_t)v147[3];
                    unint64_t v146 = v149 + *((int *)v147 + 5) * (uint64_t)v151;
                    unint64_t v153 = v146 + v152;
                  }
                  while (v153 < v149);
                  unint64_t v148 = v149 + *((int *)v147 + 5) * (uint64_t)v151;
                }
              }
              else
              {
                unint64_t v153 = *((void *)&v290 + 1) + v152;
                if (v153 >= *((void *)&v291 + 1))
                {
                  do
                  {
                    v152 += v146 - v148;
                    BOOL v147 = (uint64_t **)v147[1];
                    unint64_t v146 = (unint64_t)v147[3];
                    uint64_t v154 = *((int *)v147 + 5) * (uint64_t)v151;
                    unint64_t v148 = v146 + v154;
                  }
                  while (v152 >= (int)v154);
                  unint64_t v153 = v146 + v152;
                }
              }
              for (int i = 0; i != v142; ++i)
              {
                if ((int)v6 < 1) {
                  goto LABEL_287;
                }
                if (v6 < 8 || v144 < v153 + v13 && v153 < v144 + v13)
                {
                  uint64_t v156 = 0;
LABEL_285:
                  uint64_t v157 = (char *)(v153 + v156);
                  int v158 = (char *)(v144 + v156);
                  uint64_t v159 = v13 - v156;
                  do
                  {
                    char v160 = *v158;
                    *v158++ = *v157;
                    *v157++ = v160;
                    --v159;
                  }
                  while (v159);
                  goto LABEL_287;
                }
                if (v6 >= 0x20)
                {
                  int v162 = (long long *)(v144 + 16);
                  int64x2_t v163 = (long long *)(v153 + 16);
                  uint64_t v164 = v267;
                  do
                  {
                    long long v165 = *(v162 - 1);
                    long long v166 = *v162;
                    long long v167 = *v163;
                    *(v162 - 1) = *(v163 - 1);
                    *int v162 = v167;
                    *(v163 - 1) = v165;
                    *int64x2_t v163 = v166;
                    v162 += 2;
                    v163 += 2;
                    v164 -= 32;
                  }
                  while (v164);
                  if (v267 == v13) {
                    goto LABEL_287;
                  }
                  uint64_t v156 = v267;
                  uint64_t v161 = v267;
                  if (!v258) {
                    goto LABEL_285;
                  }
                }
                else
                {
                  uint64_t v161 = 0;
                }
                uint64_t v168 = (uint64_t *)(v144 + v161);
                int32x2_t v169 = (uint64_t *)(v153 + v161);
                uint64_t v170 = v161 - v264;
                do
                {
                  uint64_t v171 = *v168;
                  *v168++ = *v169;
                  *v169++ = v171;
                  v170 += 8;
                }
                while (v170);
                uint64_t v156 = v264;
                if (v264 != v13) {
                  goto LABEL_285;
                }
LABEL_287:
                v144 += v6;
                if (v144 >= v145)
                {
                  uint64_t v143 = *(void *)(v143 + 8);
                  unint64_t v144 = *(void *)(v143 + 24);
                  unint64_t v145 = v144 + *(int *)(v260 + 44) * (uint64_t)*(int *)(v143 + 20);
                  v153 += v6;
                  if (v153 >= v148)
                  {
LABEL_291:
                    BOOL v147 = (uint64_t **)v147[1];
                    unint64_t v153 = (unint64_t)v147[3];
                    unint64_t v148 = v153 + *(int *)(v150 + 44) * (uint64_t)*((int *)v147 + 5);
                  }
                }
                else
                {
                  v153 += v6;
                  if (v153 >= v148) {
                    goto LABEL_291;
                  }
                }
              }
            }
            if (!*((void *)&v286 + 1))
            {
              uint64_t v293 = 0;
              uint64_t v294 = 0;
              sub_1002D2278(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
            uint64_t v172 = *(int *)(*((void *)&v285 + 1) + 44);
            if ((int)v172 >= 33)
            {
              uint64_t v173 = *((void *)&v286 + 1);
              uint64_t v174 = v287;
            }
            else
            {
              uint64_t v173 = *((void *)&v286 + 1);
              uint64_t v174 = v287;
              if ((0x8000808BuLL >> (v172 - 1)))
              {
                uint64_t v175 = (uint64_t)(*((void *)&v286 + 1) - v287) >> byte_100404910[v172 - 1];
                int v176 = *(_DWORD *)(v286 + 16);
                int v177 = v288;
                if (!*((void *)&v278 + 1)) {
                  goto LABEL_310;
                }
                goto LABEL_311;
              }
            }
            uint64_t v175 = (v173 - v174) / v172;
            int v176 = *(_DWORD *)(v286 + 16);
            int v177 = v288;
            if (!*((void *)&v278 + 1))
            {
LABEL_310:
              uint64_t v293 = 0;
              uint64_t v294 = 0;
              sub_1002D2278(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_311:
            uint64_t v178 = *(int *)(*((void *)&v277 + 1) + 44);
            if ((int)v178 >= 33)
            {
              uint64_t v179 = *((void *)&v278 + 1);
            }
            else
            {
              uint64_t v179 = *((void *)&v278 + 1);
              if ((0x8000808BuLL >> (v178 - 1)))
              {
                uint64_t v180 = (uint64_t)(*((void *)&v278 + 1) - v279) >> byte_100404910[v178 - 1];
                int v181 = *(_DWORD *)(v278 + 16);
                int v182 = v280;
                if (!v268) {
                  goto LABEL_317;
                }
                goto LABEL_318;
              }
            }
            uint64_t v180 = (v179 - (uint64_t)v279) / v178;
            int v181 = *(_DWORD *)(v278 + 16);
            int v182 = v280;
            if (!v268)
            {
LABEL_317:
              uint64_t v293 = 0;
              uint64_t v294 = 0;
              sub_1002D2278(-27, &v293, "cvGetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1020);
            }
LABEL_318:
            uint64_t v183 = *(int *)(v263 + 44);
            if (int)v183 <= 32 && ((0x8000808BuLL >> (v183 - 1))) {
              uint64_t v184 = (uint64_t)(v268 - v262) >> byte_100404910[v183 - 1];
            }
            else {
              uint64_t v184 = (uint64_t)(v268 - v262) / v183;
            }
            int v185 = v184 - v256 + v265[4];
            int v186 = v181 + v180 - (v182 + v185);
            int v187 = v177 - v176 - v175 + v185;
            if (v186 >= v187) {
              int v188 = v177 - v176 - v175 + v185;
            }
            else {
              int v188 = v186;
            }
            if (v188 >= 1)
            {
              int v269 = v187;
              uint64_t v189 = v290;
              uint64_t v266 = *((void *)&v289 + 1);
              unint64_t v190 = *((void *)&v290 + 1);
              unint64_t v191 = *((void *)&v291 + 1);
              LODWORD(v192) = DWORD2(v278);
              BOOL v193 = (uint64_t **)v278;
              unint64_t v194 = *((void *)&v279 + 1);
              LODWORD(v195) = v279;
              if (!*((void *)&v277 + 1))
              {
                uint64_t v293 = 0;
                uint64_t v294 = 0;
                sub_1002D2278(-27, &v293, "cvSetSeqReaderPos", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 1045);
              }
              uint64_t v196 = 1 - v188;
              uint64_t v197 = *((void *)&v277 + 1);
              uint64_t v198 = *(int *)(*((void *)&v277 + 1) + 44);
              uint64_t v199 = v198 * v196;
              if ((int)v198 * (int)v196 <= 0)
              {
                unint64_t v200 = *((void *)&v278 + 1) + v199;
                if (*((void *)&v278 + 1) + v199 < (unint64_t)v279)
                {
                  do
                  {
                    LODWORD(v199) = v199 + v192 - v195;
                    BOOL v193 = (uint64_t **)*v193;
                    unint64_t v195 = (unint64_t)v193[3];
                    unint64_t v192 = v195 + *((int *)v193 + 5) * (uint64_t)(int)v198;
                    unint64_t v200 = v192 + (int)v199;
                  }
                  while (v200 < v195);
                  unint64_t v194 = v195 + *((int *)v193 + 5) * (uint64_t)(int)v198;
                }
              }
              else
              {
                unint64_t v200 = *((void *)&v278 + 1) + v199;
                if (v200 >= *((void *)&v279 + 1))
                {
                  do
                  {
                    LODWORD(v199) = v199 + v192 - v194;
                    BOOL v193 = (uint64_t **)v193[1];
                    unint64_t v192 = (unint64_t)v193[3];
                    uint64_t v201 = *((int *)v193 + 5) * (uint64_t)(int)v198;
                    unint64_t v194 = v192 + v201;
                  }
                  while ((int)v199 >= (int)v201);
                  unint64_t v200 = v192 + (int)v199;
                }
              }
              int v202 = 0;
              int v187 = v269;
              do
              {
                if ((int)v6 < 1) {
                  goto LABEL_344;
                }
                if (v6 < 8 || v190 < v200 + v13 && v200 < v190 + v13)
                {
                  uint64_t v203 = 0;
LABEL_342:
                  uint64x2_t v204 = (char *)(v200 + v203);
                  BOOL v205 = (char *)(v190 + v203);
                  uint64_t v206 = v13 - v203;
                  do
                  {
                    char v207 = *v205;
                    *v205++ = *v204;
                    *v204++ = v207;
                    --v206;
                  }
                  while (v206);
                  goto LABEL_344;
                }
                if (v6 >= 0x20)
                {
                  uint64x2_t v209 = (long long *)(v190 + 16);
                  int8x16_t v210 = (long long *)(v200 + 16);
                  uint64_t v211 = v267;
                  do
                  {
                    long long v212 = *(v209 - 1);
                    long long v213 = *v209;
                    long long v214 = *v210;
                    *(v209 - 1) = *(v210 - 1);
                    *uint64x2_t v209 = v214;
                    *(v210 - 1) = v212;
                    *int8x16_t v210 = v213;
                    v209 += 2;
                    v210 += 2;
                    v211 -= 32;
                  }
                  while (v211);
                  if (v267 == v13) {
                    goto LABEL_344;
                  }
                  uint64_t v203 = v267;
                  uint64_t v208 = v267;
                  if (!v258) {
                    goto LABEL_342;
                  }
                }
                else
                {
                  uint64_t v208 = 0;
                }
                BOOL v215 = (uint64_t *)(v190 + v208);
                __int16 v216 = (uint64_t *)(v200 + v208);
                uint64_t v217 = v208 - v264;
                do
                {
                  uint64_t v218 = *v215;
                  *v215++ = *v216;
                  *v216++ = v218;
                  v217 += 8;
                }
                while (v217);
                uint64_t v203 = v264;
                if (v264 != v13) {
                  goto LABEL_342;
                }
LABEL_344:
                v190 += v6;
                if (v190 >= v191)
                {
                  uint64_t v189 = *(void *)(v189 + 8);
                  unint64_t v190 = *(void *)(v189 + 24);
                  unint64_t v191 = v190 + *(int *)(v266 + 44) * (uint64_t)*(int *)(v189 + 20);
                  v200 += v6;
                  if (v200 >= v194)
                  {
LABEL_348:
                    BOOL v193 = (uint64_t **)v193[1];
                    unint64_t v200 = (unint64_t)v193[3];
                    unint64_t v194 = v200 + *(int *)(v197 + 44) * (uint64_t)*((int *)v193 + 5);
                  }
                }
                else
                {
                  v200 += v6;
                  if (v200 >= v194) {
                    goto LABEL_348;
                  }
                }
                ++v202;
              }
              while (v202 != v188);
            }
            int v219 = v273 - 1;
            if (v273 <= 1)
            {
              if (v187 <= 1) {
                goto LABEL_14;
              }
              long long v285 = v277;
              long long v286 = v278;
              long long v287 = v279;
              long long v288 = v280;
              long long v289 = v277;
              long long v290 = v278;
              long long v291 = v279;
              long long v292 = v280;
              sub_10025AE70(&v289, 1 - v187, 1);
            }
            else
            {
              if (v187 >= 2)
              {
                uint64_t v220 = (int)v252 + 1;
                __int16 v221 = &v295[4 * v220];
                if (v273 <= v187)
                {
                  long long v225 = v279;
                  v221[2] = v278;
                  v221[3] = v225;
                  sub_10025AE70(&v277, 1 - v187, 1);
                  long long v226 = v279;
                  *__int16 v221 = v278;
                  v221[1] = v226;
                  long long v285 = v281;
                  long long v286 = v282;
                  long long v287 = v283;
                  long long v288 = v284;
                  long long v291 = v283;
                  long long v292 = v284;
                  long long v289 = v281;
                  long long v290 = v282;
                  sub_10025AE70(&v285, v219, 1);
                }
                else
                {
                  long long v222 = v283;
                  *__int16 v221 = v282;
                  v221[1] = v222;
                  sub_10025AE70(&v281, v219, 1);
                  long long v223 = v283;
                  __int16 v224 = &v295[4 * v220];
                  v224[2] = v282;
                  v224[3] = v223;
                  long long v285 = v277;
                  long long v286 = v278;
                  long long v287 = v279;
                  long long v288 = v280;
                  long long v291 = v279;
                  long long v292 = v280;
                  long long v289 = v277;
                  long long v290 = v278;
                  sub_10025AE70(&v289, 1 - v187, 1);
                }
                ++v252;
                unsigned int v17 = (uint64_t *)v290;
                uint64_t v18 = *((void *)&v286 + 1);
                if ((void)v290 == (void)v286) {
                  goto LABEL_35;
                }
                goto LABEL_19;
              }
              long long v285 = v281;
              long long v286 = v282;
              long long v287 = v283;
              long long v288 = v284;
              long long v289 = v281;
              long long v290 = v282;
              long long v291 = v283;
              long long v292 = v284;
              sub_10025AE70(&v285, v273 - 1, 1);
            }
            unsigned int v17 = (uint64_t *)v290;
            uint64_t v18 = *((void *)&v286 + 1);
            if ((void)v290 == (void)v286) {
              goto LABEL_35;
            }
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v114 = *((void *)&v286 + 1);
          unint64_t v96 = *((void *)&v286 + 1) + v274;
          *((void *)&v286 + 1) = v96;
          if (v96 < (unint64_t)v287) {
            goto LABEL_217;
          }
LABEL_220:
          int v95 = 1;
          if (v90 == v114) {
            goto LABEL_221;
          }
        }
      }
LABEL_224:
      int v118 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))a2)(v96, v87, a3);
      if (v118)
      {
        if (v118 > 0)
        {
          *((void *)&v286 + 1) += v274;
          if (*((void *)&v286 + 1) < (unint64_t)v287)
          {
            *(void *)&long long v286 = *(void *)v286;
            unint64_t v119 = (int *)(v286 + 20);
            uint64_t v120 = *(int *)(*((void *)&v285 + 1) + 44);
            *((void *)&v286 + 1) = *(void *)(v286 + 24) + v120 * (*(int *)(v286 + 20) - 1);
            uint64_t v121 = *(void *)(v286 + 24);
            *(void *)&long long v287 = v121;
            uint64_t v122 = (char *)&v287 + 8;
LABEL_239:
            *(void *)uint64_t v122 = v121 + *v119 * (uint64_t)(int)v120;
            goto LABEL_240;
          }
          goto LABEL_240;
        }
      }
      else
      {
        if (v98 != *((void *)&v290 + 1) && (int)v6 >= 1)
        {
          uint64_t v124 = 0;
          do
          {
            char v125 = *(unsigned char *)(v98 + v124);
            *(unsigned char *)(v98 + v124) = *(unsigned char *)(*((void *)&v290 + 1) + v124);
            *(unsigned char *)(*((void *)&v290 + 1) + v124++) = v125;
          }
          while (v13 != v124);
        }
        v98 += v6;
        if (v98 >= v91)
        {
          uint64_t v92 = *(void *)(v92 + 8);
          unint64_t v94 = *(void *)(v92 + 24);
          int v95 = 1;
          unint64_t v98 = v94;
        }
        else
        {
          int v95 = 1;
        }
      }
      *((void *)&v290 + 1) += v6;
      if (*((void *)&v290 + 1) >= *((void *)&v291 + 1))
      {
        uint64_t v120 = *(void *)(v290 + 8);
        uint64_t v126 = *(void *)(v120 + 24);
        *(void *)&long long v290 = v120;
        *((void *)&v290 + 1) = v126;
        uint64_t v121 = *(void *)(v120 + 24);
        *(void *)&long long v291 = v121;
        LODWORD(v120) = *(_DWORD *)(v120 + 20);
        unint64_t v119 = (int *)(*((void *)&v289 + 1) + 44);
        uint64_t v122 = (char *)&v291 + 8;
        goto LABEL_239;
      }
LABEL_240:
      if (v95)
      {
        uint64_t v117 = a1;
        if (!*((void *)&v290 + 1)) {
          goto LABEL_242;
        }
        goto LABEL_243;
      }
      long long v289 = v281;
      long long v290 = v282;
      long long v291 = v283;
      long long v292 = v284;
      long long v285 = v277;
      long long v286 = v278;
      long long v287 = v279;
      long long v288 = v280;
      unsigned int v17 = (uint64_t *)v282;
      uint64_t v271 = *((void *)&v281 + 1);
      unint64_t v27 = *((void *)&v282 + 1);
      unint64_t v31 = *((void *)&v283 + 1);
      unint64_t v28 = v283;
LABEL_369:
      unint64_t v227 = v27 + v6;
      uint64_t v228 = v17;
      unint64_t v270 = v28;
      if (v27 + v6 < v31)
      {
        unint64_t v229 = *((void *)&v286 + 1) + v6;
        *((void *)&v286 + 1) = v229;
        if (v229 >= *((void *)&v287 + 1)) {
          goto LABEL_374;
        }
        goto LABEL_371;
      }
      uint64_t v228 = (uint64_t *)v17[1];
      unint64_t v227 = v228[3];
      unint64_t v31 = v227 + *(int *)(v271 + 44) * (uint64_t)*((int *)v228 + 5);
      unint64_t v270 = v227;
      unint64_t v229 = *((void *)&v286 + 1) + v6;
      *((void *)&v286 + 1) = v229;
      if (v229 >= *((void *)&v287 + 1))
      {
LABEL_374:
        uint64_t v230 = *(void *)(v286 + 8);
        uint64_t v231 = *(void *)(v230 + 24);
        *(void *)&long long v286 = v230;
        *((void *)&v286 + 1) = v231;
        *(void *)&long long v287 = *(void *)(v230 + 24);
        *((void *)&v287 + 1) = v287 + *(int *)(*((void *)&v285 + 1) + 44) * (uint64_t)*(int *)(v230 + 20);
        if (v227 == v231) {
          goto LABEL_14;
        }
LABEL_375:
        if ((int)v6 < 1)
        {
          while (2)
          {
            if (v17 != v228) {
              unint64_t v28 = v270;
            }
            if (v227 == *((void *)&v290 + 1))
            {
              unsigned int v17 = v228;
              v227 += v6;
              if (v227 >= v31) {
                goto LABEL_418;
              }
            }
            else
            {
              unint64_t v250 = v227;
              unsigned int v17 = v228;
              do
              {
                unint64_t v251 = v250 + v274;
                if (v250 + v274 < v28)
                {
                  unsigned int v17 = (uint64_t *)*v17;
                  unint64_t v28 = v17[3];
                  unint64_t v251 = v28 + *(int *)(v271 + 44) * (*((int *)v17 + 5) - 1);
                }
                if (((int (*)(unint64_t))a2)(v251) < 1) {
                  break;
                }
                unint64_t v250 = v251;
              }
              while (v251 != *((void *)&v290 + 1));
              v227 += v6;
              if (v227 >= v31)
              {
LABEL_418:
                uint64_t v228 = (uint64_t *)v228[1];
                unint64_t v227 = v228[3];
                unint64_t v31 = v227 + *(int *)(v271 + 44) * (uint64_t)*((int *)v228 + 5);
                unint64_t v270 = v227;
              }
            }
            if (v227 == *((void *)&v286 + 1)) {
              goto LABEL_14;
            }
            continue;
          }
        }
        while (1)
        {
          if (v17 != v228) {
            unint64_t v28 = v270;
          }
          if (v227 != *((void *)&v290 + 1)) {
            break;
          }
          unsigned int v17 = v228;
LABEL_404:
          v227 += v6;
          if (v227 >= v31)
          {
            uint64_t v228 = (uint64_t *)v228[1];
            unint64_t v227 = v228[3];
            unint64_t v31 = v227 + *(int *)(v271 + 44) * (uint64_t)*((int *)v228 + 5);
            unint64_t v270 = v227;
          }
          if (v227 == *((void *)&v286 + 1)) {
            goto LABEL_14;
          }
        }
        unint64_t v232 = v227;
        unsigned int v17 = v228;
        while (2)
        {
          unint64_t v233 = v232;
          v232 += v274;
          if (v232 < v28)
          {
            unsigned int v17 = (uint64_t *)*v17;
            unint64_t v28 = v17[3];
            unint64_t v232 = v28 + *(int *)(v271 + 44) * (*((int *)v17 + 5) - 1);
          }
          if (((int (*)(unint64_t, unint64_t, uint64_t))a2)(v232, v233, a3) < 1) {
            goto LABEL_404;
          }
          if (v6 < 8 || v232 < v233 + v13 && v233 < v232 + v13)
          {
            uint64_t v234 = 0;
            goto LABEL_390;
          }
          if (v6 >= 0x20)
          {
            int v240 = (long long *)(v232 + 16);
            v241 = (long long *)(v233 + 16);
            uint64_t v242 = v267;
            do
            {
              long long v243 = *(v240 - 1);
              long long v244 = *v240;
              long long v245 = *v241;
              *(v240 - 1) = *(v241 - 1);
              *int v240 = v245;
              *(v241 - 1) = v243;
              long long *v241 = v244;
              v240 += 2;
              v241 += 2;
              v242 -= 32;
            }
            while (v242);
            if (v267 != v13)
            {
              uint64_t v234 = v267;
              uint64_t v239 = v267;
              if (!v258) {
                goto LABEL_390;
              }
              goto LABEL_399;
            }
          }
          else
          {
            uint64_t v239 = 0;
LABEL_399:
            uint64_t v246 = (uint64_t *)(v232 + v239);
            uint64_t v247 = (uint64_t *)(v233 + v239);
            uint64_t v248 = v239 - v264;
            do
            {
              uint64_t v249 = *v246;
              *v246++ = *v247;
              *v247++ = v249;
              v248 += 8;
            }
            while (v248);
            uint64_t v234 = v264;
            if (v264 != v13)
            {
LABEL_390:
              long long v235 = (char *)(v232 + v234);
              long long v236 = (char *)(v233 + v234);
              uint64_t v237 = v13 - v234;
              do
              {
                char v238 = *v235;
                *v235++ = *v236;
                *v236++ = v238;
                --v237;
              }
              while (v237);
            }
          }
          if (v232 == *((void *)&v290 + 1)) {
            goto LABEL_404;
          }
          continue;
        }
      }
LABEL_371:
      if (v227 != v229) {
        goto LABEL_375;
      }
LABEL_14:
      unsigned int v12 = v252;
    }
    while ((v252 & 0x80000000) == 0);
  }
}

void sub_10025E8E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000B6A8(a1);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_10025EB10(unsigned int a1, int a2, int a3, uint64_t a4)
{
  if (!a4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1002D2278(-27, &v5, "cvCreateSet", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2486);
  }
  if (a2 < 112 || a3 < 16 || (a3 & 7) != 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_1002D2278(-201, &v5, "cvCreateSet", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2490);
  }
  uint64_t result = sub_10025A7E4(a1, a2, a3, a4);
  *((_WORD *)result + 1) = 17048;
  return result;
}

void sub_10025EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025EC10(uint64_t a1, void *__src, void *a3)
{
  if (!a1)
  {
    v15[0] = 0;
    v15[1] = 0;
    sub_1002D2278(-27, v15, "cvSetAdd", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2507);
  }
  uint64_t v6 = *(void **)(a1 + 96);
  if (!v6)
  {
    int v7 = *(_DWORD *)(a1 + 40);
    uint64_t v8 = *(int *)(a1 + 44);
    sub_10025B760(a1, 0);
    unint64_t v9 = *(void *)(a1 + 48);
    uint64_t v6 = *(void **)(a1 + 56);
    *(void *)(a1 + 96) = v6;
    if ((unint64_t)v6 + v8 <= v9)
    {
      uint64_t v11 = v6;
      do
      {
        uint64_t v10 = (void *)((char *)v11 + v8);
        *(_DWORD *)uint64_t v11 = v7 | 0x80000000;
        v11[1] = (char *)v11 + v8;
        ++v7;
        unsigned int v12 = (char *)v11 + v8 + v8;
        uint64_t v11 = (void *)((char *)v11 + v8);
      }
      while ((unint64_t)v12 <= v9);
    }
    else
    {
      uint64_t v10 = v6;
    }
    *(void *)((char *)v10 - v8 + 8) = 0;
    *(_DWORD *)(**(void **)(a1 + 88) + 20) += v7 - *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v7;
    *(void *)(a1 + 56) = v9;
  }
  *(void *)(a1 + 96) = v6[1];
  uint64_t v13 = *(_DWORD *)v6 & 0x3FFFFFF;
  if (__src) {
    memcpy(v6, __src, *(int *)(a1 + 44));
  }
  *(_DWORD *)uint64_t v6 = v13;
  ++*(_DWORD *)(a1 + 104);
  if (a3) {
    *a3 = v6;
  }
  return v13;
}

void sub_10025ED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_10025ED68(uint64_t a1)
{
  uint64_t result = sub_10025C388(a1);
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

_DWORD *sub_10025ED94(unsigned int a1, int a2, int a3, int a4, uint64_t a5)
{
  if (a3 < 16 || a2 < 120 || a4 <= 39)
  {
    v9[0] = 0;
    v9[1] = 0;
    sub_1002D2278(-201, v9, "cvCreateGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2586);
  }
  int v7 = sub_10025EB10(a1, a2, a3, a5);
  *((void *)v7 + 14) = sub_10025EB10(0, 112, a4, a5);
  return v7;
}

void sub_10025EE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025EE70(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1)
  {
    v14[0] = 0;
    v14[1] = 0;
    sub_1002D2278(-27, v14, "cvGraphAddVtx", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2620);
  }
  uint64_t v6 = *(unsigned int **)(a1 + 96);
  if (!v6)
  {
    int v7 = *(_DWORD *)(a1 + 40);
    uint64_t v8 = *(int *)(a1 + 44);
    sub_10025B760(a1, 0);
    unint64_t v9 = *(void *)(a1 + 48);
    uint64_t v6 = *(unsigned int **)(a1 + 56);
    *(void *)(a1 + 96) = v6;
    if ((unint64_t)v6 + v8 <= v9)
    {
      uint64_t v11 = v6;
      do
      {
        uint64_t v10 = (unsigned int *)((char *)v11 + v8);
        *uint64_t v11 = v7 | 0x80000000;
        *((void *)v11 + 1) = (char *)v11 + v8;
        ++v7;
        unsigned int v12 = (char *)v11 + v8 + v8;
        uint64_t v11 = (unsigned int *)((char *)v11 + v8);
      }
      while ((unint64_t)v12 <= v9);
    }
    else
    {
      uint64_t v10 = v6;
    }
    *(void *)((char *)v10 - v8 + 8) = 0;
    *(_DWORD *)(**(void **)(a1 + 88) + 20) += v7 - *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v7;
    *(void *)(a1 + 56) = v9;
  }
  *(void *)(a1 + 96) = *((void *)v6 + 1);
  *v6 &= 0x3FFFFFFu;
  ++*(_DWORD *)(a1 + 104);
  if (a2) {
    memcpy(v6 + 4, (const void *)(a2 + 16), *(int *)(a1 + 44) - 16);
  }
  *((void *)v6 + 1) = 0;
  uint64_t result = *v6;
  if (a3) {
    *a3 = v6;
  }
  return result;
}

void sub_10025F014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025F02C(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3 = a3;
  uint64_t v4 = a2;
  if (!a1 || !a2 || !a3)
  {
    v11[0] = 0;
    v11[1] = 0;
    sub_1002D2278(-27, v11, "cvFindGraphEdgeByPtr", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2705);
  }
  if (a2 == a3) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 1) & 0x40) == 0)
  {
    unsigned int v5 = *a2 & 0x3FFFFFF;
    unsigned int v6 = *a3 & 0x3FFFFFF;
    BOOL v7 = v5 > v6;
    if (v5 <= v6) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = a2;
    }
    if (v7) {
      uint64_t v4 = a3;
    }
    int v3 = v8;
  }
  for (uint64_t result = *((void *)v4 + 1); result; uint64_t result = *(void *)(result + 8 * (v4 == v10) + 8))
  {
    uint64_t v10 = *(_DWORD **)(result + 32);
    if (v10 == v3) {
      break;
    }
  }
  return result;
}

void sub_10025F110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025F128(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, uint64_t *a5)
{
  BOOL v7 = a3;
  uint64_t v8 = a2;
  if (!a1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    qmemcpy((void *)sub_1002D19D8(&v28, 21), "graph pointer is NULL", 21);
    sub_1002D2278(-27, &v28, "cvGraphAddEdgeByPtr", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2762);
  }
  if ((*(unsigned char *)(a1 + 1) & 0x40) == 0)
  {
    unsigned int v10 = *a2 & 0x3FFFFFF;
    unsigned int v11 = *a3 & 0x3FFFFFF;
    BOOL v12 = v10 > v11;
    if (v10 <= v11) {
      uint64_t v13 = a3;
    }
    else {
      uint64_t v13 = a2;
    }
    if (v12) {
      uint64_t v8 = a3;
    }
    BOOL v7 = v13;
  }
  uint64_t v14 = sub_10025F02C(a1, v8, v7);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t result = 0;
    if (!a5) {
      return result;
    }
    goto LABEL_12;
  }
  if (v8 == v7)
  {
    if (v7) {
      int v17 = -5;
    }
    else {
      int v17 = -27;
    }
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    qmemcpy((void *)sub_1002D19D8(&v28, 41), "vertex pointers coinside (or set to NULL)", 41);
    sub_1002D2278(v17, &v28, "cvGraphAddEdgeByPtr", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 2782);
  }
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v15 = *(void *)(v18 + 96);
  if (!v15)
  {
    int v19 = *(_DWORD *)(v18 + 40);
    uint64_t v20 = *(int *)(v18 + 44);
    sub_10025B760(*(void *)(a1 + 112), 0);
    unint64_t v21 = *(void *)(v18 + 48);
    uint64_t v15 = *(void *)(v18 + 56);
    *(void *)(v18 + 96) = v15;
    if (v15 + v20 <= v21)
    {
      uint64_t v23 = v15;
      do
      {
        uint64_t v22 = v23 + v20;
        *(_DWORD *)uint64_t v23 = v19 | 0x80000000;
        *(void *)(v23 + 8) = v23 + v20;
        ++v19;
        unint64_t v24 = v23 + v20 + v20;
        v23 += v20;
      }
      while (v24 <= v21);
    }
    else
    {
      uint64_t v22 = v15;
    }
    *(void *)(v22 - v20 + 8) = 0;
    *(_DWORD *)(**(void **)(v18 + 88) + 20) += v19 - *(_DWORD *)(v18 + 40);
    *(_DWORD *)(v18 + 40) = v19;
    *(void *)(v18 + 56) = v21;
  }
  *(void *)(v18 + 96) = *(void *)(v15 + 8);
  *(_DWORD *)v15 &= 0x3FFFFFFu;
  ++*(_DWORD *)(v18 + 104);
  *(void *)(v15 + 24) = v8;
  *(void *)(v15 + 32) = v7;
  *(void *)(v15 + 8) = *((void *)v8 + 1);
  *(void *)(v15 + 16) = *((void *)v7 + 1);
  *((void *)v7 + 1) = v15;
  *((void *)v8 + 1) = v15;
  int v25 = *(_DWORD *)(*(void *)(a1 + 112) + 44);
  size_t v26 = (v25 - 40);
  if (a4)
  {
    if ((int)v26 >= 1) {
      memcpy((void *)(v15 + 40), (const void *)(a4 + 40), v26);
    }
    float v27 = *(float *)(a4 + 4);
  }
  else
  {
    float v27 = 1.0;
    if ((int)v26 >= 1) {
      bzero((void *)(v15 + 40), (v25 - 40));
    }
  }
  *(float *)(v15 + 4) = v27;
  uint64_t result = 1;
  if (a5) {
LABEL_12:
  }
    *a5 = v15;
  return result;
}

void sub_10025F3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_10025F3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a1 || (*(_DWORD *)a1 & 0xFFFF3000) != 0x42981000)
  {
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    qmemcpy((void *)sub_1002D19D8(&v36, 21), "Invalid graph pointer", 21);
    sub_1002D2278(-5, (uint64_t *)&v36, "cvCloneGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3262);
  }
  if (!a2)
  {
    uint64_t v2 = *(void *)(a1 + 72);
    if (!v2)
    {
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v4 = sub_1002D19D8(&v36, 20);
      *(_DWORD *)(v4 + 16) = 1919251566;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)"NULL storage pointer";
      sub_1002D2278(-27, (uint64_t *)&v36, "cvCloneGraph", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3268);
    }
  }
  int v5 = *(_DWORD *)(*(void *)(a1 + 112) + 44);
  LODWORD(v6) = *(_DWORD *)(a1 + 44);
  BOOL v7 = (_DWORD *)sub_10020FEBC(4 * *(int *)(a1 + 40));
  uint64_t v8 = (void *)sub_10020FEBC(8 * *(int *)(a1 + 40));
  unint64_t v9 = sub_10025ED94(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), v6, v5, v2);
  memcpy(v9 + 3600, (const void *)(a1 + 14400), *(int *)(a1 + 4) - 120);
  long long v40 = 0u;
  long long v41 = 0u;
  int v38 = 64;
  uint64_t v39 = a1;
  unsigned int v10 = *(uint64_t **)(a1 + 88);
  int v35 = v5;
  if (v10)
  {
    uint64_t v11 = *v10;
    BOOL v12 = (char *)v10[3];
    *((void *)&v40 + 1) = v12;
    uint64_t v13 = *(int *)(a1 + 44);
    uint64_t v14 = *(void *)(v11 + 24) + (*(int *)(v11 + 20) - 1) * v13;
    int v42 = *((_DWORD *)v10 + 4);
    *(void *)&long long v40 = v10;
    *(void *)&long long v41 = v12;
    uint64_t v15 = &v12[*((int *)v10 + 5) * (uint64_t)(int)v13];
    *((void *)&v41 + 1) = v15;
    uint64_t v6 = (int)v6;
    uint64_t v43 = v14;
    if (*(int *)(a1 + 40) < 1) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v15 = 0;
    BOOL v12 = 0;
    int v42 = 0;
    long long v40 = 0uLL;
    long long v41 = 0uLL;
    uint64_t v6 = (int)v6;
    uint64_t v43 = 0;
    if (*(int *)(a1 + 40) < 1) {
      goto LABEL_17;
    }
  }
  int v16 = 0;
  int v17 = 0;
  do
  {
    if ((*(_DWORD *)v12 & 0x80000000) == 0)
    {
      unint64_t v36 = 0;
      sub_10025EE70((uint64_t)v9, (uint64_t)v12, &v36);
      int v18 = *(_DWORD *)v12;
      int v19 = v36;
      _DWORD *v36 = *(_DWORD *)v12;
      v7[v17] = v18;
      *(_DWORD *)BOOL v12 = v17;
      v8[v17++] = v19;
    }
    v12 += v6;
    *((void *)&v40 + 1) = v12;
    if (v12 >= v15)
    {
      unsigned int v10 = (uint64_t *)v10[1];
      BOOL v12 = (char *)v10[3];
      *(void *)&long long v40 = v10;
      *((void *)&v40 + 1) = v12;
      *(void *)&long long v41 = v12;
      uint64_t v15 = &v12[*(int *)(a1 + 44) * (uint64_t)*((int *)v10 + 5)];
      *((void *)&v41 + 1) = v15;
    }
    ++v16;
  }
  while (v16 < *(_DWORD *)(a1 + 40));
LABEL_17:
  sub_10025AD4C(*(void *)(a1 + 112), (uint64_t)&v38, 0);
  uint64_t v20 = *(void *)(a1 + 112);
  if (*(int *)(v20 + 40) >= 1)
  {
    int v21 = 0;
    unint64_t v22 = *((void *)&v40 + 1);
    do
    {
      if ((*(_DWORD *)v22 & 0x80000000) == 0)
      {
        unint64_t v36 = 0;
        sub_10025F128((uint64_t)v9, (_DWORD *)v8[**(int **)(v22 + 24)], (_DWORD *)v8[**(int **)(v22 + 32)], v22, (uint64_t *)&v36);
        _DWORD *v36 = *(_DWORD *)v22;
        unint64_t v22 = *((void *)&v40 + 1);
      }
      v22 += v35;
      *((void *)&v40 + 1) = v22;
      if (v22 >= *((void *)&v41 + 1))
      {
        uint64_t v23 = *(void *)(v40 + 8);
        unint64_t v22 = *(void *)(v23 + 24);
        *(void *)&long long v40 = v23;
        *((void *)&v40 + 1) = v22;
        *(void *)&long long v41 = *(void *)(v23 + 24);
        *((void *)&v41 + 1) = v41 + *(int *)(v39 + 44) * (uint64_t)*(int *)(v23 + 20);
      }
      ++v21;
      uint64_t v20 = *(void *)(a1 + 112);
    }
    while (v21 < *(_DWORD *)(v20 + 40));
  }
  long long v40 = 0u;
  long long v41 = 0u;
  int v38 = 64;
  uint64_t v39 = a1;
  unint64_t v24 = *(uint64_t **)(a1 + 88);
  if (v24)
  {
    uint64_t v25 = *v24;
    size_t v26 = (char *)v24[3];
    *((void *)&v40 + 1) = v26;
    uint64_t v27 = *(int *)(a1 + 44);
    uint64_t v28 = *(void *)(v25 + 24) + (*(int *)(v25 + 20) - 1) * v27;
    int v42 = *((_DWORD *)v24 + 4);
    *(void *)&long long v40 = v24;
    *(void *)&long long v41 = v26;
    uint64_t v29 = &v26[*((int *)v24 + 5) * (uint64_t)(int)v27];
    *((void *)&v41 + 1) = v29;
    uint64_t v43 = v28;
    int v30 = *(_DWORD *)(v20 + 40);
    if (v30 < 1) {
      goto LABEL_34;
    }
  }
  else
  {
    size_t v26 = 0;
    uint64_t v29 = 0;
    int v42 = 0;
    long long v40 = 0uLL;
    long long v41 = 0uLL;
    uint64_t v43 = 0;
    int v30 = *(_DWORD *)(v20 + 40);
    if (v30 < 1) {
      goto LABEL_34;
    }
  }
  int v31 = 0;
  int v32 = 0;
  do
  {
    if ((*(_DWORD *)v26 & 0x80000000) == 0)
    {
      int v33 = v7[v32++];
      *(_DWORD *)size_t v26 = v33;
    }
    v26 += v6;
    *((void *)&v40 + 1) = v26;
    if (v26 >= v29)
    {
      unint64_t v24 = (uint64_t *)v24[1];
      size_t v26 = (char *)v24[3];
      *(void *)&long long v40 = v24;
      *((void *)&v40 + 1) = v26;
      *(void *)&long long v41 = v24[3];
      uint64_t v29 = (char *)(v41 + *(int *)(a1 + 44) * (uint64_t)*((int *)v24 + 5));
      *((void *)&v41 + 1) = v29;
    }
    ++v31;
  }
  while (v31 < v30);
LABEL_34:
  j__free(v7);
  j__free(v8);
  if ((int)variable initialization expression of PointTrail.isStarted() >= 0) {
    return v9;
  }
  else {
    return 0;
  }
}

void sub_10025F86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_10025F89C(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3)
  {
    v13[0] = 0;
    v13[1] = 0;
    uint64_t v5 = sub_1002D19D8(v13, 20);
    *(_DWORD *)(v5 + 16) = 1919251566;
    *(_OWORD *)uint64_t v5 = *(_OWORD *)"NULL storage pointer";
    sub_1002D2278(-27, v13, "cvTreeToNodeSeq", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3346);
  }
  uint64_t v4 = sub_10025A7E4(0, a2, 8uLL, a3);
  if (a1)
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = v6 + 1;
      if (v7) {
        BOOL v9 = v8 == 0x7FFFFFFF;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        int v8 = (v6 & (v6 >> 31)) - 1;
        uint64_t v10 = a1;
        while (1)
        {
          uint64_t v7 = *(void *)(v10 + 16);
          if (v7) {
            break;
          }
          uint64_t v10 = *(void *)(v10 + 24);
          if (v6-- <= 0)
          {
            uint64_t v7 = 0;
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_6:
        int v6 = v8;
      }
      v13[0] = a1;
      sub_10025BB1C((uint64_t)v4, v13);
      v13[0] = 0;
      a1 = v7;
    }
    while (v7);
  }
  return v4;
}

void sub_10025F9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025F9FC(uint64_t result, uint64_t a2, int a3)
{
  if (!result || !a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    sub_1002D2278(-27, &v3, "cvInitTreeNodeIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3443);
  }
  if (a3 < 0)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    sub_1002D2278(-211, &v3, "cvInitTreeNodeIterator", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3446);
  }
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

void sub_10025FAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025FAD4(uint64_t *a1)
{
  if (!a1)
  {
    v9[0] = 0;
    v9[1] = 0;
    qmemcpy((void *)sub_1002D19D8(v9, 21), "NULL iterator pointer", 21);
    sub_1002D2278(-27, v9, "cvNextTreeNode", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3462);
  }
  uint64_t result = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  if (*a1)
  {
    uint64_t v4 = *(void *)(result + 32);
    if (v4 && (int v5 = v3 + 1, v3 + 1 < *((_DWORD *)a1 + 3)))
    {
LABEL_11:
      *a1 = v4;
      *((_DWORD *)a1 + 2) = v5;
    }
    else
    {
      int v5 = (v3 & (v3 >> 31)) - 1;
      uint64_t v6 = *a1;
      while (!*(void *)(v6 + 16))
      {
        uint64_t v6 = *(void *)(v6 + 24);
        BOOL v7 = __OFSUB__(v3--, 1);
        if (v3 < 0 != v7)
        {
          uint64_t v4 = 0;
          goto LABEL_11;
        }
      }
      if (*((_DWORD *)a1 + 3)) {
        uint64_t v8 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v8 = 0;
      }
      *a1 = v8;
      *((_DWORD *)a1 + 2) = v3;
    }
  }
  else
  {
    *a1 = 0;
    *((_DWORD *)a1 + 2) = v3;
  }
  return result;
}

void sub_10025FBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10025FC00(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || !a2)
  {
    v5[0] = 0;
    v5[1] = 0;
    sub_1002D2278(-27, v5, "cvInsertNodeIntoTree", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/datastructs.cpp", 3392);
  }
  if (a2 == a3) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = a2;
  }
  *(void *)(result + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(result + 16) = v4;
  if (v4) {
    *(void *)(v4 + 8) = result;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_10025FC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10025FCA8(uint64_t a1, unint64_t a2)
{
  int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      uint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    BOOL v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_10000B98C();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_10000BA6C();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    int v16 = &v13[4 * v12];
    bzero(v14, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      int v21 = &v13[4 * v9 - 16];
      unint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *int v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_10025FE58(float32x2_t *a1, unint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, float32x4_t *a6, unint64_t a7, signed int a8, unsigned int a9, int a10)
{
  uint64_t v11 = a3;
  uint64_t v13 = a1;
  if (a6)
  {
    if (a10 >= 0) {
      int v14 = a10;
    }
    else {
      int v14 = a9;
    }
    sub_10026082C(a1, a2, a3, a6, a7, a8, a9, v14, 1.17549435e-38, 0.00000023842);
    return;
  }
  if (a9 >= 0x89) {
    operator new[]();
  }
  if (a8 <= 30) {
    int v15 = 30;
  }
  else {
    int v15 = a8;
  }
  unsigned int v179 = v15;
  unsigned int v16 = a9 - 1;
  if ((int)a9 >= 1)
  {
    unint64_t v17 = a2 >> 2;
    if (a8 < 1)
    {
      bzero(v183, 8 * a9);
      if (a9 < 2) {
        goto LABEL_106;
      }
      int v176 = v11;
      unint64_t v18 = a8;
    }
    else
    {
      unint64_t v18 = a8;
      if (a8 >= 8)
      {
        uint64_t v23 = 0;
        long long v24 = a1 + 2;
        uint64_t v25 = 4 * v17;
        size_t v26 = (float *)((char *)a1 + ((4 * a8) & 0x3FFFFFFE0));
        do
        {
          double v27 = 0.0;
          uint64_t v28 = a8 & 0xFFFFFFF8;
          uint64_t v29 = v24;
          do
          {
            float32x4_t v30 = *(float32x4_t *)v29[-2].f32;
            float64x2_t v31 = vcvtq_f64_f32(*(float32x2_t *)v30.f32);
            float64x2_t v32 = vcvt_hight_f64_f32(v30);
            float64x2_t v33 = vcvtq_f64_f32(*v29);
            float64x2_t v34 = vcvt_hight_f64_f32(*(float32x4_t *)v29->f32);
            float64x2_t v35 = vmulq_f64(v32, v32);
            float64x2_t v36 = vmulq_f64(v31, v31);
            float64x2_t v37 = vmulq_f64(v34, v34);
            float64x2_t v38 = vmulq_f64(v33, v33);
            double v27 = v27
                + v36.f64[0]
                + v36.f64[1]
                + v35.f64[0]
                + v35.f64[1]
                + v38.f64[0]
                + v38.f64[1]
                + v37.f64[0]
                + v37.f64[1];
            v29 += 4;
            v28 -= 8;
          }
          while (v28);
          if (a8 != (unint64_t)(a8 & 0xFFFFFFF8))
          {
            uint64_t v39 = v26;
            unint64_t v40 = a8 - (unint64_t)(a8 & 0xFFFFFFF8);
            do
            {
              float v41 = *v39++;
              double v27 = v27 + v41 * v41;
              --v40;
            }
            while (v40);
          }
          *(double *)&v183[8 * v23++] = v27;
          long long v24 = (float32x2_t *)((char *)v24 + v25);
          size_t v26 = (float *)((char *)v26 + v25);
        }
        while (v23 != a9);
      }
      else
      {
        uint64_t v19 = (float *)&a1[1] + 1;
        uint64_t v20 = (double *)v183;
        uint64_t v21 = a9;
        do
        {
          double v22 = *(v19 - 3) * *(v19 - 3) + 0.0;
          if (a8 != 1)
          {
            double v22 = v22 + *(v19 - 2) * *(v19 - 2);
            if (a8 != 2)
            {
              double v22 = v22 + *(v19 - 1) * *(v19 - 1);
              if (a8 != 3)
              {
                double v22 = v22 + *v19 * *v19;
                if (a8 != 4)
                {
                  double v22 = v22 + v19[1] * v19[1];
                  if (a8 != 5)
                  {
                    double v22 = v22 + v19[2] * v19[2];
                    if (a8 != 6) {
                      double v22 = v22 + v19[3] * v19[3];
                    }
                  }
                }
              }
            }
          }
          *v20++ = v22;
          v19 += v17;
          --v21;
        }
        while (v21);
      }
      unsigned int v16 = a9 - 1;
      if ((int)a9 <= 1)
      {
        int v128 = 0;
        if (a8 >= 8uLL)
        {
LABEL_79:
          uint64_t v129 = 0;
          int v130 = v13 + 2;
          uint64_t v131 = 4 * v17;
          int v132 = (float *)((char *)v13 + ((4 * v18) & 0x3FFFFFFE0));
          do
          {
            double v133 = 0.0;
            uint64_t v134 = v18 & 0xFFFFFFF8;
            uint64_t v135 = v130;
            do
            {
              float32x4_t v136 = *(float32x4_t *)v135[-2].f32;
              float64x2_t v137 = vcvtq_f64_f32(*(float32x2_t *)v136.f32);
              float64x2_t v138 = vcvt_hight_f64_f32(v136);
              float64x2_t v139 = vcvtq_f64_f32(*v135);
              float64x2_t v140 = vcvt_hight_f64_f32(*(float32x4_t *)v135->f32);
              float64x2_t v141 = vmulq_f64(v138, v138);
              float64x2_t v142 = vmulq_f64(v137, v137);
              float64x2_t v143 = vmulq_f64(v140, v140);
              float64x2_t v144 = vmulq_f64(v139, v139);
              double v133 = v133
                   + v142.f64[0]
                   + v142.f64[1]
                   + v141.f64[0]
                   + v141.f64[1]
                   + v144.f64[0]
                   + v144.f64[1]
                   + v143.f64[0]
                   + v143.f64[1];
              v135 += 4;
              v134 -= 8;
            }
            while (v134);
            if (v18 != (v18 & 0xFFFFFFF8))
            {
              unint64_t v145 = v132;
              unint64_t v146 = v18 - (v18 & 0xFFFFFFF8);
              do
              {
                float v147 = *v145++;
                double v133 = v133 + v147 * v147;
                --v146;
              }
              while (v146);
            }
            *(double *)&v183[8 * v129++] = sqrt(v133);
            int v130 = (float32x2_t *)((char *)v130 + v131);
            int v132 = (float *)((char *)v132 + v131);
          }
          while (v129 != a9);
LABEL_92:
          if (v128)
          {
            uint64_t v182 = v16;
LABEL_95:
            uint64_t v153 = 0;
            uint64_t v154 = 1;
            while (1)
            {
              uint64_t v155 = v153 + 1;
              if (v153 + 1 < (int)a9) {
                break;
              }
              int v157 = v153;
              if (v153 != v153) {
                goto LABEL_105;
              }
LABEL_96:
              ++v154;
              uint64_t v153 = v155;
              if (v155 == v182) {
                goto LABEL_106;
              }
            }
            uint64_t v156 = v154;
            int v157 = v153;
            do
            {
              if (*(double *)&v183[8 * v157] < *(double *)&v183[8 * v156]) {
                int v157 = v156;
              }
              ++v156;
            }
            while (a9 != v156);
            if (v153 == v157) {
              goto LABEL_96;
            }
LABEL_105:
            uint64_t v158 = 8 * v153;
            uint64_t v159 = 8 * v157;
            uint64_t v160 = *(void *)&v183[v158];
            *(void *)&v183[v158] = *(void *)&v183[v159];
            *(void *)&v183[v159] = v160;
            goto LABEL_96;
          }
LABEL_106:
          if (a9 >= 8)
          {
            uint64_t v161 = a9 & 0xF8;
            int v162 = (float64x2_t *)&v184;
            int64x2_t v163 = v11 + 1;
            uint64_t v164 = a9 & 0xFFFFFFF8;
            do
            {
              float64x2_t v166 = v162[-2];
              float64x2_t v165 = v162[-1];
              float64x2_t v168 = *v162;
              float64x2_t v167 = v162[1];
              v162 += 4;
              v163[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v166), v165);
              *int64x2_t v163 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v168), v167);
              v163 += 2;
              v164 -= 8;
            }
            while (v164);
            if (v161 == a9) {
              return;
            }
          }
          else
          {
            uint64_t v161 = 0;
          }
          uint64_t v169 = a9 - v161;
          uint64_t v170 = &v11->f32[v161];
          uint64_t v171 = (double *)&v183[8 * v161];
          do
          {
            double v172 = *v171++;
            float v173 = v172;
            *v170++ = v173;
            --v169;
          }
          while (v169);
          return;
        }
LABEL_88:
        uint64_t v148 = 0;
        do
        {
          double v149 = 0.0;
          uint64_t v150 = (float *)v13;
          unint64_t v151 = v18;
          do
          {
            float v152 = *v150++;
            double v149 = v149 + v152 * v152;
            --v151;
          }
          while (v151);
          *(double *)&v183[8 * v148++] = sqrt(v149);
          uint64_t v13 = (float32x2_t *)((char *)v13 + 4 * v17);
        }
        while (v148 != a9);
        goto LABEL_92;
      }
      int v176 = a3;
    }
    int v42 = 0;
    unint64_t v43 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v181 = 4 * v18 + (a2 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v44 = v18 & 0xFFFFFFF8;
    unint64_t v175 = v17;
    uint64_t v45 = 4 * v17;
    uint64_t v178 = (uint64_t)&v13[2] + 4 * v17;
    int v177 = (char *)v13 + 4 * v17;
    unsigned int v174 = v16;
    uint64_t v182 = v16;
    do
    {
      int v180 = v42;
      uint64_t v46 = 0;
      char v47 = 0;
      int v48 = v13;
      unint64_t v49 = v177;
      uint64_t v50 = v178;
      unint64_t v51 = (float32x4_t *)&v13[2];
      uint64_t v52 = 1;
      do
      {
        uint64_t v53 = v46 + 1;
        if (v46 + 1 < (int)a9)
        {
          uint64_t v54 = 0;
          int v55 = v49;
          int v56 = (float32x4_t *)v50;
          uint64_t v57 = v52;
          while (1)
          {
            if (a8 < 1)
            {
              double v61 = 0.0;
              goto LABEL_55;
            }
            if (v18 < 8) {
              break;
            }
            double v61 = 0.0;
            unint64_t v62 = v56;
            int v63 = v51;
            uint64_t v64 = v18 & 0xFFFFFFF8;
            do
            {
              float32x4_t v65 = v63[-1];
              float64x2_t v66 = vcvtq_f64_f32(*(float32x2_t *)v65.f32);
              float32x4_t v67 = v62[-1];
              float64x2_t v68 = vmulq_f64(vcvt_hight_f64_f32(v65), vcvt_hight_f64_f32(v67));
              float64x2_t v69 = vmulq_f64(v66, vcvtq_f64_f32(*(float32x2_t *)v67.f32));
              float64x2_t v70 = vmulq_f64(vcvt_hight_f64_f32(*v63), vcvt_hight_f64_f32(*v62));
              float64x2_t v71 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v63->f32), vcvtq_f64_f32(*(float32x2_t *)v62->f32));
              double v61 = v61
                  + v69.f64[0]
                  + v69.f64[1]
                  + v68.f64[0]
                  + v68.f64[1]
                  + v71.f64[0]
                  + v71.f64[1]
                  + v70.f64[0]
                  + v70.f64[1];
              v63 += 2;
              v62 += 2;
              v64 -= 8;
            }
            while (v64);
            uint64_t v60 = v18 & 0xFFFFFFF8;
            if (v18 != v44) {
              goto LABEL_53;
            }
LABEL_55:
            double v79 = *(double *)&v183[8 * v46];
            double v80 = *(double *)&v183[8 * v57];
            if (fabs(v61) <= sqrt(v79 * v80) * 0.000000238418579) {
              goto LABEL_45;
            }
            double v81 = v61 + v61;
            double v82 = v79 - v80;
            double v83 = fabs(v81);
            double v84 = vabdd_f64(v79, v80);
            if (v83 <= v84)
            {
              double v85 = 0.0;
              if (v82 != 0.0) {
                double v85 = v84 * sqrt(v83 / v84 * (v83 / v84) + 1.0);
              }
            }
            else
            {
              double v85 = v83 * sqrt(v84 / v83 * (v84 / v83) + 1.0);
            }
            BOOL v86 = v82 < 0.0;
            float v87 = sqrt((v85 - v82) * 0.5 / v85);
            float v88 = v81 / (v85 * v87 + v85 * v87);
            float v89 = sqrt((v82 + v85) / (v85 + v85));
            double v91 = v85 * v89 + v85 * v89;
            double v90 = v81 / v91;
            *(float *)&double v91 = v90;
            if (v86) {
              *(float *)&double v90 = v88;
            }
            else {
              *(float *)&double v90 = v89;
            }
            if (v86) {
              float v92 = v87;
            }
            else {
              float v92 = *(float *)&v91;
            }
            if (a8 <= 0)
            {
              double v58 = 0.0;
              double v59 = 0.0;
            }
            else
            {
              *(float *)&double v91 = -v92;
              double v59 = 0.0;
              if (v18 >= 8
                && ((char *)v13 + v43 * v46 >= (char *)v13 + v181 + v43 * v46 + v43 * v54
                 || (char *)v13 + v43 + v43 * v46 + v43 * v54 >= (char *)&v13->f32[v18] + v43 * v46))
              {
                unint64_t v99 = 0;
                float32x4_t v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v90, 0);
                float32x4_t v101 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v91, 0);
                double v58 = 0.0;
                do
                {
                  uint64_t v102 = &v51[v99 / 0x10];
                  float32x4_t v103 = v51[v99 / 0x10 - 1];
                  float32x4_t v104 = v51[v99 / 0x10];
                  uint64_t v105 = &v56[v99 / 0x10];
                  float32x4_t v106 = v56[v99 / 0x10 - 1];
                  float32x4_t v107 = v56[v99 / 0x10];
                  float32x4_t v108 = vmlaq_f32(vmulq_n_f32(v106, v92), v103, v100);
                  float32x4_t v109 = vmlaq_f32(vmulq_n_f32(v107, v92), v104, v100);
                  float32x4_t v110 = vmlaq_f32(vmulq_n_f32(v106, *(float *)&v90), v103, v101);
                  float32x4_t v111 = vmlaq_f32(vmulq_n_f32(v107, *(float *)&v90), v104, v101);
                  v102[-1] = v108;
                  *uint64_t v102 = v109;
                  v105[-1] = v110;
                  *uint64_t v105 = v111;
                  float64x2_t v112 = vcvtq_f64_f32(*(float32x2_t *)v108.f32);
                  float64x2_t v113 = vcvt_hight_f64_f32(v108);
                  float64x2_t v114 = vcvtq_f64_f32(*(float32x2_t *)v109.f32);
                  float64x2_t v115 = vcvt_hight_f64_f32(v109);
                  float64x2_t v116 = vmulq_f64(v113, v113);
                  float64x2_t v117 = vmulq_f64(v112, v112);
                  float64x2_t v118 = vmulq_f64(v115, v115);
                  float64x2_t v119 = vmulq_f64(v114, v114);
                  float64x2_t v120 = vcvtq_f64_f32(*(float32x2_t *)v110.f32);
                  float64x2_t v121 = vcvt_hight_f64_f32(v110);
                  float64x2_t v122 = vcvtq_f64_f32(*(float32x2_t *)v111.f32);
                  float64x2_t v123 = vcvt_hight_f64_f32(v111);
                  float64x2_t v124 = vmulq_f64(v121, v121);
                  float64x2_t v125 = vmulq_f64(v120, v120);
                  float64x2_t v126 = vmulq_f64(v123, v123);
                  float64x2_t v127 = vmulq_f64(v122, v122);
                  double v59 = v59
                      + v125.f64[0]
                      + v125.f64[1]
                      + v124.f64[0]
                      + v124.f64[1]
                      + v127.f64[0]
                      + v127.f64[1]
                      + v126.f64[0]
                      + v126.f64[1];
                  double v58 = v58
                      + v117.f64[0]
                      + v117.f64[1]
                      + v116.f64[0]
                      + v116.f64[1]
                      + v119.f64[0]
                      + v119.f64[1]
                      + v118.f64[0]
                      + v118.f64[1];
                  v99 += 32;
                }
                while (((4 * v18) & 0x3FFFFFFE0) != v99);
                uint64_t v93 = v18 & 0xFFFFFFF8;
                if (v18 == v44) {
                  goto LABEL_44;
                }
              }
              else
              {
                uint64_t v93 = 0;
                double v58 = 0.0;
              }
              do
              {
                uint64_t v94 = v93;
                float v95 = v48->f32[v93];
                float v96 = *(float *)&v55[4 * v93];
                float32_t v97 = (float)(v92 * v96) + (float)(*(float *)&v90 * v95);
                float v98 = (float)(*(float *)&v90 * v96) + (float)(*(float *)&v91 * v95);
                v48->f32[v94] = v97;
                *(float *)&v55[v94 * 4] = v98;
                double v58 = v58 + v97 * v97;
                double v59 = v59 + v98 * v98;
                ++v93;
              }
              while (v18 != v93);
            }
LABEL_44:
            *(double *)&v183[8 * v46] = v58;
            *(double *)&v183[8 * v57] = v59;
            char v47 = 1;
LABEL_45:
            ++v57;
            ++v54;
            int v56 = (float32x4_t *)((char *)v56 + v45);
            v55 += v45;
            if (v57 == a9) {
              goto LABEL_40;
            }
          }
          uint64_t v60 = 0;
          double v61 = 0.0;
LABEL_53:
          uint64_t v72 = v18 - v60;
          uint64_t v73 = 4 * v60;
          uint64_t v74 = (float *)&v55[4 * v60];
          uint64_t v75 = (float *)((char *)v48 + v73);
          do
          {
            float v76 = *v75++;
            double v77 = v76;
            float v78 = *v74++;
            double v61 = v61 + v77 * v78;
            --v72;
          }
          while (v72);
          goto LABEL_55;
        }
LABEL_40:
        ++v52;
        unint64_t v51 = (float32x4_t *)((char *)v51 + v45);
        v50 += v45;
        v49 += v45;
        int v48 = (float32x2_t *)((char *)v48 + v45);
        ++v46;
      }
      while (v53 != v182);
      int v42 = v180 + 1;
    }
    while ((v47 & (v180 + 1 < v179)) != 0);
    if (a8 <= 0)
    {
      bzero(v183, 8 * a9);
      uint64_t v11 = v176;
      goto LABEL_95;
    }
    int v128 = 1;
    uint64_t v11 = v176;
    unint64_t v17 = v175;
    unsigned int v16 = v174;
    if (v18 >= 8) {
      goto LABEL_79;
    }
    goto LABEL_88;
  }
}

void sub_10026082C(float32x2_t *a1, unint64_t a2, float32x4_t *a3, float32x4_t *a4, unint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, float a10)
{
  int v370 = a7;
  uint64_t v13 = a1;
  uint64_t v14 = (int)a7;
  if (a7 >= 0x89) {
    operator new[]();
  }
  unint64_t v15 = a2 >> 2;
  if ((int)a6 <= 30) {
    int v16 = 30;
  }
  else {
    int v16 = a6;
  }
  unsigned int v346 = v16;
  unint64_t v340 = a5 >> 2;
  unint64_t v341 = a2 >> 2;
  uint64_t v17 = 4 * v15;
  uint64_t v350 = a7 - 1;
  unint64_t v18 = a4;
  if ((int)a7 < 1) {
    goto LABEL_32;
  }
  if (!a4)
  {
    if ((int)a6 <= 0)
    {
      bzero(v371, 8 * a7);
      uint64_t v62 = v370;
      uint64_t v357 = v13;
      if (v370 > 1) {
        goto LABEL_33;
      }
      goto LABEL_89;
    }
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = a1 + 2;
    while (1)
    {
      if (a6 >= 8)
      {
        double v44 = 0.0;
        uint64_t v45 = a6 & 0xFFFFFFF8;
        uint64_t v46 = v42;
        do
        {
          float32x4_t v47 = *(float32x4_t *)v46[-2].f32;
          float64x2_t v48 = vcvtq_f64_f32(*(float32x2_t *)v47.f32);
          float64x2_t v49 = vcvt_hight_f64_f32(v47);
          float64x2_t v50 = vcvtq_f64_f32(*v46);
          float64x2_t v51 = vcvt_hight_f64_f32(*(float32x4_t *)v46->f32);
          float64x2_t v52 = vmulq_f64(v49, v49);
          float64x2_t v53 = vmulq_f64(v48, v48);
          float64x2_t v54 = vmulq_f64(v51, v51);
          float64x2_t v55 = vmulq_f64(v50, v50);
          double v44 = v44
              + v53.f64[0]
              + v53.f64[1]
              + v52.f64[0]
              + v52.f64[1]
              + v55.f64[0]
              + v55.f64[1]
              + v54.f64[0]
              + v54.f64[1];
          v46 += 4;
          v45 -= 8;
        }
        while (v45);
        uint64_t v43 = a6 & 0xFFFFFFF8;
        if (v43 == a6) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v43 = 0;
        double v44 = 0.0;
      }
      int v56 = (float *)a1 + v43 + v40;
      uint64_t v57 = a6 - v43;
      do
      {
        float v58 = *v56++;
        double v44 = v44 + v58 * v58;
        --v57;
      }
      while (v57);
LABEL_21:
      *(double *)&v371[8 * v41++] = v44;
      int v42 = (float32x2_t *)((char *)v42 + v17);
      v40 += v15;
      if (v41 == a7) {
        goto LABEL_32;
      }
    }
  }
  unint64_t v19 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v367 = a5 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v363 = 4 * a7;
  uint64_t v365 = a7;
  if ((int)a6 >= 1)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v360 = a6 & 0xFFFFFFF8;
    double v22 = a1 + 2;
    while (1)
    {
      if (a6 >= 8)
      {
        double v24 = 0.0;
        uint64_t v26 = v360;
        double v27 = v22;
        do
        {
          float32x4_t v28 = *(float32x4_t *)v27[-2].f32;
          float64x2_t v29 = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
          float64x2_t v30 = vcvt_hight_f64_f32(v28);
          float64x2_t v31 = vcvtq_f64_f32(*v27);
          float64x2_t v32 = vcvt_hight_f64_f32(*(float32x4_t *)v27->f32);
          float64x2_t v33 = vmulq_f64(v30, v30);
          float64x2_t v34 = vmulq_f64(v29, v29);
          float64x2_t v35 = vmulq_f64(v32, v32);
          float64x2_t v36 = vmulq_f64(v31, v31);
          double v24 = v24
              + v34.f64[0]
              + v34.f64[1]
              + v33.f64[0]
              + v33.f64[1]
              + v36.f64[0]
              + v36.f64[1]
              + v35.f64[0]
              + v35.f64[1];
          v27 += 4;
          v26 -= 8;
        }
        while (v26);
        uint64_t v23 = v360;
        size_t v25 = v363;
        if (v360 == a6) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v23 = 0;
        double v24 = 0.0;
        size_t v25 = v363;
      }
      float64x2_t v37 = (float *)v13 + v23 + v20;
      uint64_t v38 = a6 - v23;
      do
      {
        float v39 = *v37++;
        double v24 = v24 + v39 * v39;
        --v38;
      }
      while (v38);
LABEL_10:
      *(double *)&v371[8 * v21] = v24;
      bzero((char *)a4 + v19 * v21, v25);
      a4->i32[(v340 + 1) * v21++] = 1065353216;
      double v22 = (float32x2_t *)((char *)v22 + v17);
      v20 += v341;
      unint64_t v19 = v367;
      a7 = v370;
      if (v21 == v365) {
        goto LABEL_32;
      }
    }
  }
  bzero(v371, 8 * a7);
  uint64_t v59 = v365;
  uint64_t v60 = a4;
  double v61 = a4;
  do
  {
    bzero(v60, v363);
    a7 = v370;
    v61->i32[0] = 1065353216;
    double v61 = (float32x4_t *)((char *)v61 + v367 + 4);
    uint64_t v60 = (float32x4_t *)((char *)v60 + v367);
    --v59;
  }
  while (v59);
LABEL_32:
  uint64_t v62 = a7;
  uint64_t v357 = v13;
  if ((int)a7 > 1)
  {
LABEL_33:
    int v63 = 0;
    unint64_t v356 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v64 = 4 * a6;
    unint64_t v368 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v65 = a6 & 0xFFFFFFF8;
    unint64_t v345 = (float32x4_t *)&v13[2];
    uint64_t v344 = (uint64_t)&v13[2] + v17;
    uint64_t v343 = (uint64_t)v13 + v17;
    uint64_t v66 = 4 * v340;
    uint64_t v342 = (float32x4_t *)((char *)v18 + 4 * v340);
    uint64_t v348 = &v18->i32[v14];
    uint64_t v349 = (uint64_t)v13 + v64;
    do
    {
      int v347 = v63;
      uint64_t v67 = 0;
      char v68 = 0;
      float64x2_t v69 = v18;
      uint64_t v70 = v343;
      BOOL v362 = v342;
      float64x2_t v71 = v13;
      uint64_t v73 = (float32x4_t *)v344;
      uint64_t v72 = v345;
      uint64_t v74 = 1;
      do
      {
        uint64_t v358 = v67 + 1;
        if (v67 + 1 < v14)
        {
          uint64_t v75 = 0;
          size_t v366 = (size_t)v13 + v368 * v67;
          unint64_t v359 = v368 + v368 * v67;
          unint64_t v361 = v349 + v368 * v67;
          size_t v364 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + v64 + v368 * v67;
          uint64_t v355 = (uint64_t)v18 + v356 * v67;
          unint64_t v351 = v356 + v356 * v67;
          uint64_t v352 = v67;
          unint64_t v353 = (unint64_t)v348 + v356 * v67;
          unint64_t v354 = (a5 & 0xFFFFFFFFFFFFFFFCLL) + 4 * v14 + v356 * v67;
          float v76 = v362;
          uint64_t v77 = v70;
          float v78 = v73;
          uint64_t v79 = v74;
          while (1)
          {
            if ((int)a6 < 1)
            {
              double v81 = 0.0;
              goto LABEL_50;
            }
            if (a6 < 8) {
              break;
            }
            double v81 = 0.0;
            double v82 = v78;
            double v83 = v72;
            uint64_t v84 = a6 & 0xFFFFFFF8;
            do
            {
              float32x4_t v85 = v83[-1];
              float64x2_t v86 = vcvtq_f64_f32(*(float32x2_t *)v85.f32);
              float32x4_t v87 = v82[-1];
              float64x2_t v88 = vmulq_f64(vcvt_hight_f64_f32(v85), vcvt_hight_f64_f32(v87));
              float64x2_t v89 = vmulq_f64(v86, vcvtq_f64_f32(*(float32x2_t *)v87.f32));
              float64x2_t v90 = vmulq_f64(vcvt_hight_f64_f32(*v83), vcvt_hight_f64_f32(*v82));
              float64x2_t v91 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v83->f32), vcvtq_f64_f32(*(float32x2_t *)v82->f32));
              double v81 = v81
                  + v89.f64[0]
                  + v89.f64[1]
                  + v88.f64[0]
                  + v88.f64[1]
                  + v91.f64[0]
                  + v91.f64[1]
                  + v90.f64[0]
                  + v90.f64[1];
              v83 += 2;
              v82 += 2;
              v84 -= 8;
            }
            while (v84);
            uint64_t v80 = a6 & 0xFFFFFFF8;
            if (v65 != a6) {
              goto LABEL_48;
            }
LABEL_50:
            double v98 = *(double *)&v371[8 * v67];
            double v99 = *(double *)&v371[8 * v79];
            if (fabs(v81) <= sqrt(v98 * v99) * a10) {
              goto LABEL_40;
            }
            double v100 = v81 + v81;
            double v101 = v98 - v99;
            double v102 = fabs(v100);
            double v103 = vabdd_f64(v98, v99);
            if (v102 <= v103)
            {
              double v104 = 0.0;
              int v105 = v370;
              if (v101 != 0.0) {
                double v104 = v103 * sqrt(v102 / v103 * (v102 / v103) + 1.0);
              }
            }
            else
            {
              double v104 = v102 * sqrt(v103 / v102 * (v103 / v102) + 1.0);
              int v105 = v370;
            }
            BOOL v106 = v101 < 0.0;
            float v107 = sqrt((v104 - v101) * 0.5 / v104);
            float v108 = v100 / (v104 * v107 + v104 * v107);
            float v109 = sqrt((v101 + v104) / (v104 + v104));
            *(double *)v111.i64 = v104 * v109 + v104 * v109;
            double v110 = v100 / *(double *)v111.i64;
            v111.f32[0] = v110;
            if (v106) {
              *(float *)&double v110 = v108;
            }
            else {
              *(float *)&double v110 = v109;
            }
            if (v106) {
              float v112 = v107;
            }
            else {
              float v112 = v111.f32[0];
            }
            if ((int)a6 <= 0)
            {
              *(void *)&v371[8 * v67] = 0;
              *(void *)&v371[8 * v79] = 0;
              if (!v18) {
                goto LABEL_39;
              }
              goto LABEL_70;
            }
            v111.f32[0] = -v112;
            double v113 = 0.0;
            if (a6 < 8
              || v366 < (unint64_t)v13 + v364 + v368 * v75 && (unint64_t)v13 + v359 + v368 * v75 < v361)
            {
              uint64_t v114 = 0;
              double v115 = 0.0;
              do
              {
LABEL_66:
                uint64_t v116 = v114;
                float v117 = v71->f32[v114];
                float v118 = *(float *)(v77 + 4 * v114);
                float32_t v119 = (float)(v112 * v118) + (float)(*(float *)&v110 * v117);
                float v120 = (float)(*(float *)&v110 * v118) + (float)(v111.f32[0] * v117);
                v71->f32[v116] = v119;
                *(float *)(v77 + v116 * 4) = v120;
                double v115 = v115 + v119 * v119;
                double v113 = v113 + v120 * v120;
                ++v114;
              }
              while (a6 != v114);
              goto LABEL_67;
            }
            unint64_t v135 = 0;
            float32x4_t v136 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v110, 0);
            float32x4_t v137 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 0);
            double v115 = 0.0;
            do
            {
              float64x2_t v138 = &v72[v135 / 0x10];
              float32x4_t v139 = v72[v135 / 0x10 - 1];
              float32x4_t v140 = v72[v135 / 0x10];
              float64x2_t v141 = &v78[v135 / 0x10];
              float32x4_t v142 = v78[v135 / 0x10 - 1];
              float32x4_t v143 = v78[v135 / 0x10];
              float32x4_t v144 = vmlaq_f32(vmulq_n_f32(v142, v112), v139, v136);
              float32x4_t v145 = vmlaq_f32(vmulq_n_f32(v143, v112), v140, v136);
              float32x4_t v146 = vmlaq_f32(vmulq_n_f32(v142, *(float *)&v110), v139, v137);
              float32x4_t v147 = vmlaq_f32(vmulq_n_f32(v143, *(float *)&v110), v140, v137);
              v138[-1] = v144;
              float32x4_t *v138 = v145;
              v141[-1] = v146;
              *float64x2_t v141 = v147;
              float64x2_t v148 = vcvtq_f64_f32(*(float32x2_t *)v144.f32);
              float64x2_t v149 = vcvt_hight_f64_f32(v144);
              float64x2_t v150 = vcvtq_f64_f32(*(float32x2_t *)v145.f32);
              float64x2_t v151 = vcvt_hight_f64_f32(v145);
              float64x2_t v152 = vmulq_f64(v149, v149);
              float64x2_t v153 = vmulq_f64(v148, v148);
              float64x2_t v154 = vmulq_f64(v151, v151);
              float64x2_t v155 = vmulq_f64(v150, v150);
              float64x2_t v156 = vcvtq_f64_f32(*(float32x2_t *)v146.f32);
              float64x2_t v157 = vcvt_hight_f64_f32(v146);
              float64x2_t v158 = vcvtq_f64_f32(*(float32x2_t *)v147.f32);
              float64x2_t v159 = vcvt_hight_f64_f32(v147);
              float64x2_t v160 = vmulq_f64(v157, v157);
              float64x2_t v161 = vmulq_f64(v156, v156);
              float64x2_t v162 = vmulq_f64(v159, v159);
              float64x2_t v163 = vmulq_f64(v158, v158);
              double v113 = v113
                   + v161.f64[0]
                   + v161.f64[1]
                   + v160.f64[0]
                   + v160.f64[1]
                   + v163.f64[0]
                   + v163.f64[1]
                   + v162.f64[0]
                   + v162.f64[1];
              double v115 = v115
                   + v153.f64[0]
                   + v153.f64[1]
                   + v152.f64[0]
                   + v152.f64[1]
                   + v155.f64[0]
                   + v155.f64[1]
                   + v154.f64[0]
                   + v154.f64[1];
              v135 += 32;
            }
            while ((v64 & 0x3FFFFFFE0) != v135);
            uint64_t v114 = a6 & 0xFFFFFFF8;
            int v105 = v370;
            if (v65 != a6) {
              goto LABEL_66;
            }
LABEL_67:
            *(double *)&v371[8 * v67] = v115;
            *(double *)&v371[8 * v79] = v113;
            if (!v18) {
              goto LABEL_39;
            }
LABEL_70:
            if (v105 >= 4)
            {
              unint64_t v121 = 0;
              float64x2_t v122 = v69;
              float64x2_t v123 = v76;
              do
              {
                float32x4_t v111 = vsubq_f32(vmulq_n_f32(*v123, *(float *)&v110), vmulq_n_f32(*v122, v112));
                *float64x2_t v122 = vaddq_f32(vmulq_n_f32(*v122, *(float *)&v110), vmulq_n_f32(*v123, v112));
                ++v122;
                *v123++ = v111;
                v121 += 4;
              }
              while (v121 <= (v370 - 4));
              if ((int)v121 < v105)
              {
LABEL_76:
                v111.f32[0] = -v112;
                uint64_t v124 = (int)v121;
                unint64_t v125 = v14 - (int)v121;
                if (v125 < 4) {
                  goto LABEL_236;
                }
                uint64_t v126 = 4 * (int)v121;
                BOOL v215 = v355 + 4 * v124 >= (unint64_t)v18 + v354 + v356 * v75;
                unint64_t v18 = a4;
                uint64_t v13 = v357;
                if (!v215)
                {
                  unint64_t v18 = a4;
                  uint64_t v67 = v352;
                  if ((unint64_t)a4 + v351 + v356 * v75 + v126 < v353) {
                    goto LABEL_236;
                  }
                }
                v124 += v125 & 0xFFFFFFFFFFFFFFFCLL;
                float32x4_t v127 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v110, 0);
                float32x4_t v128 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 0);
                unint64_t v129 = v125 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  float32x4_t v130 = *(float32x4_t *)((char *)v69 + v126);
                  float32x4_t v131 = *(float32x4_t *)((char *)v76 + v126);
                  *(float32x4_t *)((char *)v69 + v126) = vmlaq_f32(vmulq_n_f32(v131, v112), v130, v127);
                  *(float32x4_t *)((char *)v76 + v126) = vmlaq_f32(vmulq_n_f32(v131, *(float *)&v110), v130, v128);
                  v126 += 16;
                  v129 -= 4;
                }
                while (v129);
                uint64_t v13 = v357;
                if (v125 != (v125 & 0xFFFFFFFFFFFFFFFCLL))
                {
LABEL_236:
                  do
                  {
                    uint64_t v132 = v124;
                    float v133 = v69->f32[v124];
                    float v134 = v76->f32[v124];
                    v69->f32[v132] = (float)(v112 * v134) + (float)(*(float *)&v110 * v133);
                    v76->f32[v132] = (float)(*(float *)&v110 * v134) + (float)(v111.f32[0] * v133);
                    ++v124;
                  }
                  while (v14 != v124);
                }
              }
            }
            else
            {
              LODWORD(v121) = 0;
              if (v105 > 0) {
                goto LABEL_76;
              }
            }
LABEL_39:
            char v68 = 1;
LABEL_40:
            ++v79;
            ++v75;
            float v78 = (float32x4_t *)((char *)v78 + v17);
            v77 += v17;
            float v76 = (float32x4_t *)((char *)v76 + v66);
            if (v79 == v62) {
              goto LABEL_36;
            }
          }
          uint64_t v80 = 0;
          double v81 = 0.0;
LABEL_48:
          float v92 = (float *)v71 + v80;
          uint64_t v93 = (float *)(v77 + 4 * v80);
          uint64_t v94 = a6 - v80;
          do
          {
            float v95 = *v92++;
            double v96 = v95;
            float v97 = *v93++;
            double v81 = v81 + v96 * v97;
            --v94;
          }
          while (v94);
          goto LABEL_50;
        }
LABEL_36:
        ++v74;
        uint64_t v72 = (float32x4_t *)((char *)v72 + v17);
        uint64_t v73 = (float32x4_t *)((char *)v73 + v17);
        float64x2_t v71 = (float32x2_t *)((char *)v71 + v17);
        v70 += v17;
        BOOL v362 = (float32x4_t *)((char *)v362 + v66);
        float64x2_t v69 = (float32x4_t *)((char *)v69 + v66);
        uint64_t v67 = v358;
      }
      while (v358 != v350);
      int v63 = v347 + 1;
    }
    while ((v68 & (v347 + 1 < v346)) != 0);
  }
LABEL_89:
  int v164 = v370;
  if (v370 < 1) {
    goto LABEL_147;
  }
  unint64_t v165 = v341;
  if ((int)a6 > 0)
  {
    uint64_t v166 = 0;
    uint64_t v167 = 0;
    float64x2_t v168 = v13 + 2;
    unint64_t v169 = v340;
    while (1)
    {
      if (a6 >= 8)
      {
        double v171 = 0.0;
        uint64_t v172 = a6 & 0xFFFFFFF8;
        float v173 = v168;
        do
        {
          float32x4_t v174 = *(float32x4_t *)v173[-2].f32;
          float64x2_t v175 = vcvtq_f64_f32(*(float32x2_t *)v174.f32);
          float64x2_t v176 = vcvt_hight_f64_f32(v174);
          float64x2_t v177 = vcvtq_f64_f32(*v173);
          float64x2_t v178 = vcvt_hight_f64_f32(*(float32x4_t *)v173->f32);
          float64x2_t v179 = vmulq_f64(v176, v176);
          float64x2_t v180 = vmulq_f64(v175, v175);
          float64x2_t v181 = vmulq_f64(v178, v178);
          float64x2_t v182 = vmulq_f64(v177, v177);
          double v171 = v171
               + v180.f64[0]
               + v180.f64[1]
               + v179.f64[0]
               + v179.f64[1]
               + v182.f64[0]
               + v182.f64[1]
               + v181.f64[0]
               + v181.f64[1];
          v173 += 4;
          v172 -= 8;
        }
        while (v172);
        uint64_t v170 = a6 & 0xFFFFFFF8;
        if (v170 == a6) {
          goto LABEL_92;
        }
      }
      else
      {
        uint64_t v170 = 0;
        double v171 = 0.0;
      }
      uint64_t v183 = (float *)v13 + v170 + v166;
      uint64_t v184 = a6 - v170;
      do
      {
        float v185 = *v183++;
        double v171 = v171 + v185 * v185;
        --v184;
      }
      while (v184);
LABEL_92:
      *(double *)&v371[8 * v167++] = sqrt(v171);
      float64x2_t v168 = (float32x2_t *)((char *)v168 + v17);
      v166 += v341;
      if (v167 == v62) {
        goto LABEL_102;
      }
    }
  }
  bzero(v371, 8 * v62);
  unint64_t v169 = v340;
  unint64_t v165 = v341;
  int v164 = v370;
LABEL_102:
  if (v164 >= 2)
  {
    uint64_t v186 = 0;
    uint64_t v187 = 0;
    uint64_t v188 = 0;
    unint64_t v189 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v190 = &v18->i32[v62];
    unint64_t v191 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v192 = (uint64_t)v13 + 4 * a6;
    BOOL v193 = v13 + 2;
    unint64_t v194 = v18 + 1;
    uint64_t v195 = 4 * v169;
    uint64_t v196 = 1;
    uint64_t v197 = (long long *)&v18[1];
    uint64_t v198 = v13 + 2;
    do
    {
      uint64_t v199 = v188 + 1;
      if (v188 + 1 >= v14)
      {
        int v201 = v188;
        if (v188 == v188) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v200 = v196;
        int v201 = v188;
        do
        {
          if (*(double *)&v371[8 * v201] < *(double *)&v371[8 * v200]) {
            int v201 = v200;
          }
          ++v200;
        }
        while (v62 != v200);
        if (v188 == v201) {
          goto LABEL_104;
        }
      }
      uint64_t v202 = 8 * v201;
      uint64_t v203 = *(void *)&v371[8 * v188];
      *(void *)&v371[8 * v188] = *(void *)&v371[v202];
      unint64_t v18 = a4;
      *(void *)&v371[v202] = v203;
      if (a4)
      {
        if ((int)a6 >= 1)
        {
          if (a6 < 8
            || (unint64_t)v357 + v191 * v188 < v192 + v191 * v201
            && (unint64_t)v357 + v191 * v201 < v192 + v191 * v188)
          {
            uint64_t v204 = 0;
            goto LABEL_119;
          }
          long long v226 = (long long *)((char *)v193 + v17 * v201);
          uint64_t v227 = a6 & 0xFFFFFFF8;
          uint64_t v228 = v198;
          do
          {
            long long v229 = *(_OWORD *)v228[-2].f32;
            long long v230 = *(_OWORD *)v228->f32;
            long long v231 = *v226;
            *(_OWORD *)v228[-2].f32 = *(v226 - 1);
            *(_OWORD *)v228->f32 = v231;
            *(v226 - 1) = v229;
            *long long v226 = v230;
            v228 += 4;
            v226 += 2;
            v227 -= 8;
          }
          while (v227);
          uint64_t v204 = a6 & 0xFFFFFFF8;
          unint64_t v18 = a4;
          if (v204 != a6)
          {
LABEL_119:
            BOOL v205 = (int *)v357 + v204 + v165 * v201;
            uint64_t v206 = (int *)v357 + v204 + v187;
            unint64_t v18 = a4;
            uint64_t v207 = a6 - v204;
            do
            {
              int v208 = *v206;
              *v206++ = *v205;
              *v205++ = v208;
              --v207;
            }
            while (v207);
          }
        }
        if (v370 < 8)
        {
          uint64_t v209 = 0;
          uint64_t v13 = v357;
          goto LABEL_132;
        }
        unint64_t v210 = v189 * v188;
        uint64_t v211 = v18;
        unint64_t v212 = (unint64_t)v18 + v210;
        unint64_t v213 = (unint64_t)v190 + v210;
        unint64_t v214 = (unint64_t)v211 + v189 * v201;
        BOOL v215 = v212 >= (unint64_t)v190 + v189 * v201 || v214 >= v213;
        if (v215)
        {
          __int16 v216 = (long long *)((char *)v194 + v195 * v201);
          uint64_t v217 = v62 & 0xFFFFFFF8;
          uint64_t v218 = v197;
          uint64_t v13 = v357;
          do
          {
            long long v219 = *(v218 - 1);
            long long v220 = *v218;
            long long v221 = *v216;
            *(v218 - 1) = *(v216 - 1);
            *uint64_t v218 = v221;
            *(v216 - 1) = v219;
            *__int16 v216 = v220;
            v218 += 2;
            v216 += 2;
            v217 -= 8;
          }
          while (v217);
          uint64_t v209 = v62 & 0xFFFFFFF8;
          unint64_t v18 = a4;
          unint64_t v169 = v340;
          if (v209 == v62) {
            goto LABEL_104;
          }
        }
        else
        {
          uint64_t v209 = 0;
          uint64_t v13 = v357;
          unint64_t v18 = a4;
LABEL_132:
          unint64_t v169 = v340;
        }
        long long v222 = &v18->i32[v209 + v169 * v201];
        long long v223 = &v18->i32[v209 + v186];
        uint64_t v224 = v62 - v209;
        do
        {
          int v225 = *v223;
          *v223++ = *v222;
          *v222++ = v225;
          --v224;
        }
        while (v224);
      }
LABEL_104:
      ++v196;
      uint64_t v198 = (float32x2_t *)((char *)v198 + v17);
      v187 += v165;
      uint64_t v197 = (long long *)((char *)v197 + v195);
      v186 += v169;
      uint64_t v188 = v199;
    }
    while (v199 != v350);
  }
  if (v370 < 8)
  {
    uint64_t v232 = 0;
LABEL_145:
    int v240 = &a3->f32[v232];
    uint64_t v241 = v62 - v232;
    uint64_t v242 = (double *)&v371[8 * v232];
    do
    {
      double v243 = *v242++;
      float v244 = v243;
      *v240++ = v244;
      --v241;
    }
    while (v241);
    goto LABEL_147;
  }
  uint64_t v232 = v62 & 0xFFFFFFF8;
  unint64_t v233 = (float64x2_t *)&v372;
  uint64_t v234 = a3 + 1;
  uint64_t v235 = v232;
  do
  {
    float64x2_t v237 = v233[-2];
    float64x2_t v236 = v233[-1];
    float64x2_t v239 = *v233;
    float64x2_t v238 = v233[1];
    v233 += 4;
    v234[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v237), v236);
    *uint64_t v234 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v239), v238);
    v234 += 2;
    v235 -= 8;
  }
  while (v235);
  if (v232 != v62) {
    goto LABEL_145;
  }
LABEL_147:
  if (v18 && a8 >= 1)
  {
    uint64_t v245 = 0;
    unint64_t v247 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    float v248 = a10 * 100.0;
    uint64_t v249 = 4 * a6;
    uint64_t v250 = a6 & 0xFFFFFFF8;
    uint64_t v251 = a6 & 0xFFFFFFFC;
    uint64_t v252 = v249 & 0x3FFFFFFE0;
    uint64_t v253 = v249 & 0x3FFFFFFF0;
    unint64_t v254 = 305419896;
    unsigned int v255 = (float *)v13;
    do
    {
      double v256 = 0.0;
      if (v245 < v14) {
        double v256 = *(double *)&v371[8 * v245];
      }
      if (v256 > a9)
      {
LABEL_222:
        if (v256 <= a9) {
          double v330 = 0.0;
        }
        else {
          double v330 = 1.0 / v256;
        }
        if ((int)a6 < 1) {
          goto LABEL_150;
        }
        float v331 = v330;
        if (a6 >= 8)
        {
          unint64_t v333 = 0;
          do
          {
            uint64_t v334 = (float32x4_t *)&v255[v333 / 4];
            float32x4_t v335 = vmulq_n_f32(*(float32x4_t *)&v255[v333 / 4 + 4], v331);
            *uint64_t v334 = vmulq_n_f32(*(float32x4_t *)&v255[v333 / 4], v331);
            v334[1] = v335;
            v333 += 32;
          }
          while (v252 != v333);
          uint64_t v332 = a6 & 0xFFFFFFF8;
          if (v250 == a6) {
            goto LABEL_150;
          }
        }
        else
        {
          uint64_t v332 = 0;
        }
        do
        {
          v255[v332] = v255[v332] * v331;
          ++v332;
        }
        while (a6 != v332);
      }
      else if ((int)a6 >= 1)
      {
        unsigned int v257 = 0;
        unint64_t v258 = (unint64_t)v13 + v247 * v245;
        unint64_t v259 = (unint64_t)v13 + v249 + v247 * v245;
        while (1)
        {
          uint64_t v260 = v255;
          uint64_t v261 = a6;
          do
          {
            unint64_t v254 = HIDWORD(v254) + 4164903690 * v254;
            if ((v254 & 0x100) != 0)
            {
              float v262 = 1.0 / (double)(int)a6;
            }
            else
            {
              float v246 = 1.0 / (double)(int)a6;
              float v262 = -v246;
            }
            *v260++ = v262;
            --v261;
          }
          while (v261);
          if (v245)
          {
            uint64_t v263 = 0;
            uint64_t v264 = v13;
            while (a6 >= 8)
            {
              unint64_t v267 = 0;
              double v266 = 0.0;
              do
              {
                float32x4_t v268 = vmulq_f32(*(float32x4_t *)&v255[v267 / 4], *(float32x4_t *)v264[v267 / 8].f32);
                float32x4_t v269 = vmulq_f32(*(float32x4_t *)&v255[v267 / 4 + 4], *(float32x4_t *)v264[v267 / 8 + 2].f32);
                float64x2_t v270 = vcvt_hight_f64_f32(v268);
                float64x2_t v271 = vcvtq_f64_f32(*(float32x2_t *)v268.f32);
                float64x2_t v272 = vcvt_hight_f64_f32(v269);
                float64x2_t v273 = vcvtq_f64_f32(*(float32x2_t *)v269.f32);
                double v266 = v266
                     + v271.f64[0]
                     + v271.f64[1]
                     + v270.f64[0]
                     + v270.f64[1]
                     + v273.f64[0]
                     + v273.f64[1]
                     + v272.f64[0]
                     + v272.f64[1];
                v267 += 32;
              }
              while (v252 != v267);
              uint64_t v265 = a6 & 0xFFFFFFF8;
              if (v250 != a6) {
                goto LABEL_169;
              }
LABEL_170:
              double v274 = -v266;
              float v275 = 0.0;
              if (a6 <= 3
                || v258 < (unint64_t)v13 + v249 + v247 * v263 && (unint64_t)v13 + v247 * v263 < v259)
              {
                uint64_t v276 = 0;
                do
                {
LABEL_174:
                  float v277 = v255[v276] + v274 * v264->f32[v276];
                  v255[v276] = v277;
                  float v275 = v275 + fabsf(v277);
                  ++v276;
                }
                while (a6 != v276);
                goto LABEL_175;
              }
              unint64_t v283 = 0;
              float64x2_t v284 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v274, 0);
              do
              {
                long long v285 = (float32x2_t *)&v255[v283 / 4];
                float32x2_t v286 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)&v255[v283 / 4]), vcvtq_f64_f32(v264[v283 / 8]), v284));
                float32x2_t v287 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)&v255[v283 / 4 + 2]), vcvtq_f64_f32(v264[v283 / 8 + 1]), v284));
                *long long v285 = v286;
                v285[1] = v287;
                float32x2_t v288 = vabs_f32(v286);
                float32x2_t v289 = vabs_f32(v287);
                float v275 = (float)((float)((float)(v275 + v288.f32[0]) + v288.f32[1]) + v289.f32[0]) + v289.f32[1];
                v283 += 16;
              }
              while (v253 != v283);
              uint64_t v276 = a6 & 0xFFFFFFFC;
              if (v251 != a6) {
                goto LABEL_174;
              }
LABEL_175:
              float v278 = 1.0 / v275;
              if (v275 <= v248) {
                float v278 = 0.0;
              }
              if (a6 > 7)
              {
                unint64_t v280 = 0;
                do
                {
                  long long v281 = (float32x4_t *)&v255[v280 / 4];
                  float32x4_t v282 = vmulq_n_f32(*(float32x4_t *)&v255[v280 / 4 + 4], v278);
                  *long long v281 = vmulq_n_f32(*(float32x4_t *)&v255[v280 / 4], v278);
                  v281[1] = v282;
                  v280 += 32;
                }
                while (v252 != v280);
                uint64_t v279 = a6 & 0xFFFFFFF8;
                if (v250 == a6) {
                  goto LABEL_163;
                }
              }
              else
              {
                uint64_t v279 = 0;
              }
              do
              {
                v255[v279] = v278 * v255[v279];
                ++v279;
              }
              while (a6 != v279);
LABEL_163:
              ++v263;
              uint64_t v264 = (float32x2_t *)((char *)v264 + v247);
              if (v263 == v245)
              {
                uint64_t v290 = 0;
                long long v291 = v13;
                while (a6 >= 8)
                {
                  unint64_t v294 = 0;
                  double v293 = 0.0;
                  do
                  {
                    float32x4_t v295 = vmulq_f32(*(float32x4_t *)&v255[v294 / 4], *(float32x4_t *)v291[v294 / 8].f32);
                    float32x4_t v296 = vmulq_f32(*(float32x4_t *)&v255[v294 / 4 + 4], *(float32x4_t *)v291[v294 / 8 + 2].f32);
                    float64x2_t v297 = vcvt_hight_f64_f32(v295);
                    float64x2_t v298 = vcvtq_f64_f32(*(float32x2_t *)v295.f32);
                    float64x2_t v299 = vcvt_hight_f64_f32(v296);
                    float64x2_t v300 = vcvtq_f64_f32(*(float32x2_t *)v296.f32);
                    double v293 = v293
                         + v298.f64[0]
                         + v298.f64[1]
                         + v297.f64[0]
                         + v297.f64[1]
                         + v300.f64[0]
                         + v300.f64[1]
                         + v299.f64[0]
                         + v299.f64[1];
                    v294 += 32;
                  }
                  while (v252 != v294);
                  uint64_t v292 = a6 & 0xFFFFFFF8;
                  if (v250 != a6) {
                    goto LABEL_195;
                  }
LABEL_196:
                  double v301 = -v293;
                  float v302 = 0.0;
                  if (a6 <= 3
                    || v258 < (unint64_t)v13 + v249 + v247 * v290 && (unint64_t)v13 + v247 * v290 < v259)
                  {
                    uint64_t v303 = 0;
                    do
                    {
LABEL_200:
                      float v304 = v255[v303] + v301 * v291->f32[v303];
                      v255[v303] = v304;
                      float v302 = v302 + fabsf(v304);
                      ++v303;
                    }
                    while (a6 != v303);
                    goto LABEL_201;
                  }
                  unint64_t v310 = 0;
                  float64x2_t v311 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v301, 0);
                  do
                  {
                    v312 = (float32x2_t *)&v255[v310 / 4];
                    float32x2_t v313 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)&v255[v310 / 4]), vcvtq_f64_f32(v291[v310 / 8]), v311));
                    float32x2_t v314 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)&v255[v310 / 4 + 2]), vcvtq_f64_f32(v291[v310 / 8 + 1]), v311));
                    float32x2_t *v312 = v313;
                    v312[1] = v314;
                    float32x2_t v315 = vabs_f32(v313);
                    float32x2_t v316 = vabs_f32(v314);
                    float v302 = (float)((float)((float)(v302 + v315.f32[0]) + v315.f32[1]) + v316.f32[0]) + v316.f32[1];
                    v310 += 16;
                  }
                  while (v253 != v310);
                  uint64_t v303 = a6 & 0xFFFFFFFC;
                  if (v251 != a6) {
                    goto LABEL_200;
                  }
LABEL_201:
                  float v305 = 1.0 / v302;
                  if (v302 <= v248) {
                    float v305 = 0.0;
                  }
                  if (a6 > 7)
                  {
                    unint64_t v307 = 0;
                    do
                    {
                      unint64_t v308 = (float32x4_t *)&v255[v307 / 4];
                      float32x4_t v309 = vmulq_n_f32(*(float32x4_t *)&v255[v307 / 4 + 4], v305);
                      *unint64_t v308 = vmulq_n_f32(*(float32x4_t *)&v255[v307 / 4], v305);
                      v308[1] = v309;
                      v307 += 32;
                    }
                    while (v252 != v307);
                    uint64_t v306 = a6 & 0xFFFFFFF8;
                    if (v250 == a6) {
                      goto LABEL_189;
                    }
                  }
                  else
                  {
                    uint64_t v306 = 0;
                  }
                  do
                  {
                    v255[v306] = v305 * v255[v306];
                    ++v306;
                  }
                  while (a6 != v306);
LABEL_189:
                  ++v290;
                  long long v291 = (float32x2_t *)((char *)v291 + v247);
                  if (v290 == v245) {
                    goto LABEL_214;
                  }
                }
                uint64_t v292 = 0;
                double v293 = 0.0;
                do
                {
LABEL_195:
                  double v293 = v293 + (float)(v255[v292] * v291->f32[v292]);
                  ++v292;
                }
                while (a6 != v292);
                goto LABEL_196;
              }
            }
            uint64_t v265 = 0;
            double v266 = 0.0;
            do
            {
LABEL_169:
              double v266 = v266 + (float)(v255[v265] * v264->f32[v265]);
              ++v265;
            }
            while (a6 != v265);
            goto LABEL_170;
          }
LABEL_214:
          if (a6 >= 8)
          {
            unint64_t v319 = 0;
            double v318 = 0.0;
            do
            {
              float32x4_t v320 = *(float32x4_t *)&v255[v319 / 4];
              float32x4_t v321 = *(float32x4_t *)&v255[v319 / 4 + 4];
              float64x2_t v322 = vcvtq_f64_f32(*(float32x2_t *)v320.f32);
              float64x2_t v323 = vcvt_hight_f64_f32(v320);
              float64x2_t v324 = vcvtq_f64_f32(*(float32x2_t *)v321.f32);
              float64x2_t v325 = vcvt_hight_f64_f32(v321);
              float64x2_t v326 = vmulq_f64(v323, v323);
              float64x2_t v327 = vmulq_f64(v322, v322);
              float64x2_t v328 = vmulq_f64(v325, v325);
              float64x2_t v329 = vmulq_f64(v324, v324);
              double v318 = v318
                   + v327.f64[0]
                   + v327.f64[1]
                   + v326.f64[0]
                   + v326.f64[1]
                   + v329.f64[0]
                   + v329.f64[1]
                   + v328.f64[0]
                   + v328.f64[1];
              v319 += 32;
            }
            while (v252 != v319);
            uint64_t v317 = a6 & 0xFFFFFFF8;
            if (v250 == a6) {
              goto LABEL_220;
            }
          }
          else
          {
            uint64_t v317 = 0;
            double v318 = 0.0;
          }
          do
          {
            double v318 = v318 + v255[v317] * v255[v317];
            ++v317;
          }
          while (a6 != v317);
LABEL_220:
          double v256 = sqrt(v318);
          if (v257 <= 0x62)
          {
            ++v257;
            if (v256 <= a9) {
              continue;
            }
          }
          goto LABEL_222;
        }
      }
LABEL_150:
      ++v245;
      unsigned int v255 = (float *)((char *)v255 + v247);
    }
    while (v245 != a8);
  }
}

double *sub_100261D2C(double *result, unint64_t a2, void *a3, int a4, int a5, char *a6, unint64_t a7, int a8, unsigned int a9, int a10)
{
  uint64_t v11 = a3;
  uint64_t v13 = result;
  if (a6)
  {
    if (a10 >= 0) {
      int v14 = a10;
    }
    else {
      int v14 = a9;
    }
    return (double *)sub_1002623A0((unint64_t)result, a2, a3, a6, a7, a8, a9, v14, 2.22507386e-308, 2.22044605e-15);
  }
  if (a9 >= 0x89) {
    operator new[]();
  }
  if (a8 <= 30) {
    int v15 = 30;
  }
  else {
    int v15 = a8;
  }
  unsigned int v112 = v15;
  unsigned int v16 = a9 - 1;
  if ((int)a9 >= 1)
  {
    size_t v17 = 8 * a9;
    uint64_t v18 = 8 * (a2 >> 3);
    if (a8 < 1)
    {
      bzero(v116, 8 * a9);
      if (a9 < 2) {
        return (double *)memcpy(v11, v116, v17);
      }
      uint64_t v110 = 8 * a9;
      float32x4_t v111 = v11;
      unint64_t v20 = a8;
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = a8;
      uint64_t v21 = result;
      do
      {
        double v22 = 0.0;
        uint64_t v23 = v21;
        uint64_t v24 = a8;
        do
        {
          double v25 = *v23++;
          double v22 = v22 + v25 * v25;
          --v24;
        }
        while (v24);
        *(double *)&v116[8 * v19++] = v22;
        uint64_t v21 = (double *)((char *)v21 + v18);
      }
      while (v19 != a9);
      unsigned int v16 = a9 - 1;
      if ((int)a9 <= 1)
      {
        int v95 = 0;
LABEL_66:
        uint64_t v96 = 0;
        do
        {
          double v97 = 0.0;
          double v98 = v13;
          unint64_t v99 = v20;
          do
          {
            double v100 = *v98++;
            double v97 = v97 + v100 * v100;
            --v99;
          }
          while (v99);
          *(double *)&v116[8 * v96++] = sqrt(v97);
          uint64_t v13 = (double *)((char *)v13 + v18);
        }
        while (v96 != a9);
        if (v95)
        {
          uint64_t v115 = v16;
LABEL_73:
          uint64_t v101 = 0;
          for (uint64_t i = 1; ; ++i)
          {
            uint64_t v103 = v101 + 1;
            if (v101 + 1 < (int)a9) {
              break;
            }
            int v105 = v101;
            if (v101 != v101) {
              goto LABEL_83;
            }
LABEL_74:
            uint64_t v101 = v103;
            if (v103 == v115) {
              return (double *)memcpy(v11, v116, v17);
            }
          }
          uint64_t v104 = i;
          int v105 = v101;
          do
          {
            if (*(double *)&v116[8 * v105] < *(double *)&v116[8 * v104]) {
              int v105 = v104;
            }
            ++v104;
          }
          while (a9 != v104);
          if (v101 == v105) {
            goto LABEL_74;
          }
LABEL_83:
          uint64_t v106 = 8 * v101;
          uint64_t v107 = 8 * v105;
          uint64_t v108 = *(void *)&v116[v106];
          *(void *)&v116[v106] = *(void *)&v116[v107];
          *(void *)&v116[v107] = v108;
          goto LABEL_74;
        }
        return (double *)memcpy(v11, v116, v17);
      }
      uint64_t v110 = 8 * a9;
      float32x4_t v111 = a3;
    }
    int v26 = 0;
    unint64_t v27 = a2 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v114 = 8 * v20 + (a2 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = v20 & 0xFFFFFFFC;
    unsigned int v109 = v16;
    uint64_t v115 = v16;
    do
    {
      int v113 = v26;
      uint64_t v29 = 0;
      char v30 = 0;
      float64x2_t v31 = v13;
      float64x2_t v32 = &v13[(unint64_t)v18 / 8];
      float64x2_t v33 = (float64x2_t *)&v13[(unint64_t)v18 / 8 + 2];
      float64x2_t v34 = (float64x2_t *)(v13 + 2);
      uint64_t v35 = 1;
      do
      {
        uint64_t v36 = v29 + 1;
        if (v29 + 1 < (int)a9)
        {
          uint64_t v37 = 0;
          uint64_t v38 = v32;
          float v39 = v33;
          uint64_t v40 = v35;
          while (1)
          {
            if (a8 < 1)
            {
              double v44 = 0.0;
              goto LABEL_41;
            }
            if (v20 < 4) {
              break;
            }
            double v44 = 0.0;
            uint64_t v45 = v39;
            uint64_t v46 = v34;
            uint64_t v47 = v20 & 0xFFFFFFFC;
            do
            {
              float64x2_t v48 = vmulq_f64(v46[-1], v45[-1]);
              float64x2_t v49 = vmulq_f64(*v46, *v45);
              double v44 = v44 + v48.f64[0] + v48.f64[1] + v49.f64[0] + v49.f64[1];
              v46 += 2;
              v45 += 2;
              v47 -= 4;
            }
            while (v47);
            uint64_t v43 = v20 & 0xFFFFFFFC;
            if (v20 != v28) {
              goto LABEL_39;
            }
LABEL_41:
            double v57 = *(double *)&v116[8 * v29];
            double v58 = *(double *)&v116[8 * v40];
            if (fabs(v44) <= sqrt(v57 * v58) * 2.22044605e-15) {
              goto LABEL_31;
            }
            double v59 = v44 + v44;
            double v60 = v57 - v58;
            double v61 = fabs(v59);
            double v62 = vabdd_f64(v57, v58);
            if (v61 <= v62)
            {
              double v63 = 0.0;
              if (v60 != 0.0) {
                double v63 = v62 * sqrt(v61 / v62 * (v61 / v62) + 1.0);
              }
            }
            else
            {
              double v63 = v61 * sqrt(v62 / v61 * (v62 / v61) + 1.0);
            }
            BOOL v64 = v60 < 0.0;
            double v65 = sqrt((v63 - v60) * 0.5 / v63);
            double v66 = v59 / (v63 * v65 + v63 * v65);
            double v67 = sqrt((v60 + v63) / (v63 + v63));
            double v68 = v59 / (v63 * v67 + v63 * v67);
            if (v64) {
              *(double *)&uint64_t v69 = v66;
            }
            else {
              *(double *)&uint64_t v69 = v67;
            }
            if (v64) {
              double v70 = v65;
            }
            else {
              double v70 = v68;
            }
            if (a8 <= 0)
            {
              double v41 = 0.0;
              double v42 = 0.0;
            }
            else
            {
              double v71 = -v70;
              double v42 = 0.0;
              if (v20 >= 4
                && ((char *)v13 + v27 * v29 >= (char *)v13 + v114 + v27 * v29 + v27 * v37
                 || (char *)v13 + v27 + v27 * v29 + v27 * v37 >= (char *)&v13[v20] + v27 * v29))
              {
                unint64_t v78 = 0;
                float64x2_t v79 = (float64x2_t)vdupq_lane_s64(v69, 0);
                float64x2_t v80 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71, 0);
                double v41 = 0.0;
                do
                {
                  double v81 = &v34[v78 / 0x10];
                  float64x2_t v82 = v34[v78 / 0x10 - 1];
                  float64x2_t v83 = v34[v78 / 0x10];
                  uint64_t v84 = &v39[v78 / 0x10];
                  float64x2_t v85 = v39[v78 / 0x10 - 1];
                  float64x2_t v86 = v39[v78 / 0x10];
                  float64x2_t v87 = vmlaq_f64(vmulq_n_f64(v85, v70), v82, v79);
                  float64x2_t v88 = vmlaq_f64(vmulq_n_f64(v86, v70), v83, v79);
                  float64x2_t v89 = vmlaq_f64(vmulq_n_f64(v85, *(double *)&v69), v82, v80);
                  float64x2_t v90 = vmlaq_f64(vmulq_n_f64(v86, *(double *)&v69), v83, v80);
                  v81[-1] = v87;
                  *double v81 = v88;
                  v84[-1] = v89;
                  *uint64_t v84 = v90;
                  float64x2_t v91 = vmulq_f64(v87, v87);
                  float64x2_t v92 = vmulq_f64(v88, v88);
                  float64x2_t v93 = vmulq_f64(v89, v89);
                  float64x2_t v94 = vmulq_f64(v90, v90);
                  double v42 = v42 + v93.f64[0] + v93.f64[1] + v94.f64[0] + v94.f64[1];
                  double v41 = v41 + v91.f64[0] + v91.f64[1] + v92.f64[0] + v92.f64[1];
                  v78 += 32;
                }
                while (((8 * v20) & 0x7FFFFFFE0) != v78);
                uint64_t v72 = v20 & 0xFFFFFFFC;
                if (v20 == v28) {
                  goto LABEL_30;
                }
              }
              else
              {
                uint64_t v72 = 0;
                double v41 = 0.0;
              }
              do
              {
                uint64_t v73 = v72;
                double v74 = v31[v72];
                double v75 = v38[v72];
                double v76 = v70 * v75 + *(double *)&v69 * v74;
                double v77 = *(double *)&v69 * v75 + v71 * v74;
                v31[v73] = v76;
                v38[v73] = v77;
                double v41 = v41 + v76 * v76;
                double v42 = v42 + v77 * v77;
                ++v72;
              }
              while (v20 != v72);
            }
LABEL_30:
            *(double *)&v116[8 * v29] = v41;
            *(double *)&v116[8 * v40] = v42;
            char v30 = 1;
LABEL_31:
            ++v40;
            ++v37;
            float v39 = (float64x2_t *)((char *)v39 + v18);
            uint64_t v38 = (double *)((char *)v38 + v18);
            if (v40 == a9) {
              goto LABEL_26;
            }
          }
          uint64_t v43 = 0;
          double v44 = 0.0;
LABEL_39:
          unint64_t v50 = v20 - v43;
          uint64_t v51 = v43;
          float64x2_t v52 = &v38[v43];
          float64x2_t v53 = &v31[v51];
          do
          {
            double v54 = *v53++;
            double v55 = v54;
            double v56 = *v52++;
            double v44 = v44 + v55 * v56;
            --v50;
          }
          while (v50);
          goto LABEL_41;
        }
LABEL_26:
        ++v35;
        float64x2_t v34 = (float64x2_t *)((char *)v34 + v18);
        float64x2_t v33 = (float64x2_t *)((char *)v33 + v18);
        float64x2_t v32 = (double *)((char *)v32 + v18);
        float64x2_t v31 = (double *)((char *)v31 + v18);
        ++v29;
      }
      while (v36 != v115);
      int v26 = v113 + 1;
    }
    while ((v30 & (v113 + 1 < v112)) != 0);
    if (a8 <= 0)
    {
      size_t v17 = v110;
      bzero(v116, v110);
      uint64_t v11 = v111;
      goto LABEL_73;
    }
    int v95 = 1;
    uint64_t v11 = v111;
    size_t v17 = v110;
    unsigned int v16 = v109;
    goto LABEL_66;
  }
  return result;
}

unint64_t sub_1002623A0(unint64_t result, unint64_t a2, void *a3, char *a4, unint64_t a5, int a6, uint64_t a7, int a8, double a9, double a10)
{
  int v10 = a8;
  unint64_t v16 = a2;
  size_t v17 = (double *)result;
  uint64_t v18 = (int)a7;
  unint64_t v267 = result;
  if (a7 >= 0x89) {
    operator new[]();
  }
  if (a6 <= 30) {
    int v19 = 30;
  }
  else {
    int v19 = a6;
  }
  unsigned int v253 = v19;
  uint64_t v260 = (a7 - 1);
  if ((int)a7 >= 1)
  {
    unint64_t v249 = a2 >> 3;
    unint64_t v254 = a5 >> 3;
    uint64_t v20 = 8 * (a2 >> 3);
    if (a4)
    {
      unint64_t v21 = a5 & 0xFFFFFFFFFFFFFFF8;
      size_t v22 = 8 * a7;
      size_t __n = a5 & 0xFFFFFFFFFFFFFFF8;
      if (a6 < 1)
      {
        bzero(v271, 8 * a7);
        uint64_t v34 = a7;
        uint64_t v35 = a4;
        uint64_t v36 = a4;
        do
        {
          bzero(v35, v22);
          void *v36 = 0x3FF0000000000000;
          uint64_t v36 = (void *)((char *)v36 + __n + 8);
          v35 += __n;
          --v34;
        }
        while (v34);
      }
      else
      {
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = &a4[v21 * v23];
          double v25 = 0.0;
          uint64_t v26 = a6;
          unint64_t v27 = v17;
          do
          {
            double v28 = *v27++;
            double v25 = v25 + v28 * v28;
            --v26;
          }
          while (v26);
          *(double *)&v271[8 * v23] = v25;
          bzero(v24, v22);
          *(void *)&a4[8 * (v254 + 1) * v23++] = 0x3FF0000000000000;
          size_t v17 = (double *)((char *)v17 + v20);
          unint64_t v21 = __n;
        }
        while (v23 != a7);
      }
    }
    else
    {
      if (a6 <= 0)
      {
        bzero(v271, 8 * a7);
        uint64_t v37 = 8 * v254;
        unint64_t v38 = v267;
        unint64_t v39 = (a7 - 2);
        if ((int)a7 < 2) {
          goto LABEL_78;
        }
LABEL_23:
        int v40 = 0;
        uint64_t v41 = (v39 & 0xFFFFFFFE) + 2;
        uint64_t v42 = v41 | 1;
        if ((v41 | 1) <= v18) {
          uint64_t v42 = v18;
        }
        size_t __na = a5 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v43 = v42 - v41;
        uint64_t v44 = 8 * a6;
        unint64_t v266 = a2 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v45 = a6 & 0xFFFFFFFC;
        uint64_t v261 = v42;
        unint64_t v265 = v43;
        uint64_t v259 = v42 & 1;
        unint64_t v258 = v43 - v259;
        uint64_t v252 = (float64x2_t *)(v38 + 16);
        uint64_t v251 = v38 + 16 + v20;
        unint64_t v250 = v38 + v20;
        uint64_t v46 = v44 & 0x7FFFFFFE0;
        unint64_t v256 = v38 + v44;
        unint64_t v257 = (a2 & 0xFFFFFFFFFFFFFFF8) + v44;
LABEL_27:
        int v255 = v40;
        uint64_t v47 = 0;
        char v48 = 0;
        float64x2_t v49 = (float64x2_t *)a4;
        uint64_t v51 = (float64x2_t *)&a4[v37];
        unint64_t v50 = v250;
        unint64_t v52 = v38;
        double v54 = (float64x2_t *)v251;
        float64x2_t v53 = v252;
        uint64_t v55 = 1;
        while (1)
        {
          unint64_t v263 = v50;
          uint64_t v264 = v51;
          uint64_t v262 = v47 + 1;
          if (v47 + 1 < v18) {
            break;
          }
LABEL_28:
          ++v55;
          float64x2_t v53 = (float64x2_t *)((char *)v53 + v20);
          double v54 = (float64x2_t *)((char *)v54 + v20);
          v52 += v20;
          unint64_t v50 = v263 + v20;
          uint64_t v51 = (float64x2_t *)((char *)v264 + v37);
          float64x2_t v49 = (float64x2_t *)((char *)v49 + v37);
          ++v47;
          if (v262 == v260)
          {
            int v40 = v255 + 1;
            unint64_t v38 = v267;
            if ((v48 & (v255 + 1 < v253)) != 0) {
              goto LABEL_27;
            }
LABEL_78:
            uint64_t __nb = 8 * a7;
            if (a6 <= 0)
            {
              bzero(v271, 8 * a7);
              unint64_t v38 = v267;
              unint64_t v133 = v249;
              if ((int)a7 <= 1) {
                goto LABEL_122;
              }
            }
            else
            {
              uint64_t v131 = 0;
              uint64_t v132 = (double *)v38;
              unint64_t v133 = v249;
              do
              {
                double v134 = 0.0;
                uint64_t v135 = a6;
                float32x4_t v136 = v132;
                do
                {
                  double v137 = *v136++;
                  double v134 = v134 + v137 * v137;
                  --v135;
                }
                while (v135);
                *(double *)&v271[8 * v131++] = sqrt(v134);
                uint64_t v132 = (double *)((char *)v132 + v20);
              }
              while (v131 != a7);
              if ((int)a7 < 2)
              {
LABEL_122:
                uint64_t result = (unint64_t)memcpy(a3, v271, __nb);
                size_t v17 = (double *)v267;
                unint64_t v16 = a2;
                int v10 = a8;
                goto LABEL_123;
              }
            }
            uint64_t v138 = 0;
            uint64_t v139 = 0;
            uint64_t v140 = 0;
            unint64_t v141 = a5 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v142 = &a4[__nb];
            unint64_t v143 = a2 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v144 = v38 + 8 * a6;
            uint64_t v145 = 1;
            float32x4_t v146 = (long long *)(a4 + 16);
            float32x4_t v147 = (long long *)(v38 + 16);
            while (2)
            {
              uint64_t v148 = v140 + 1;
              if (v140 + 1 >= v18)
              {
                int v150 = v140;
                if (v140 != v140) {
                  goto LABEL_96;
                }
              }
              else
              {
                uint64_t v149 = v145;
                int v150 = v140;
                do
                {
                  if (*(double *)&v271[8 * v150] < *(double *)&v271[8 * v149]) {
                    int v150 = v149;
                  }
                  ++v149;
                }
                while (a7 != v149);
                if (v140 != v150)
                {
LABEL_96:
                  uint64_t v151 = 8 * v150;
                  uint64_t v152 = *(void *)&v271[8 * v140];
                  *(void *)&v271[8 * v140] = *(void *)&v271[v151];
                  *(void *)&v271[v151] = v152;
                  if (a4)
                  {
                    if (a6 >= 1)
                    {
                      if (a6 < 4
                        || v38 + v143 * v140 < v144 + v143 * v150 && v38 + v143 * v150 < v144 + v143 * v140)
                      {
                        uint64_t v153 = 0;
                        goto LABEL_102;
                      }
                      float v173 = (long long *)(v38 + 16 + v20 * v150);
                      uint64_t v174 = a6 & 0xFFFFFFFC;
                      float64x2_t v175 = v147;
                      do
                      {
                        long long v176 = *(v175 - 1);
                        long long v177 = *v175;
                        long long v178 = *v173;
                        *(v175 - 1) = *(v173 - 1);
                        *float64x2_t v175 = v178;
                        *(v173 - 1) = v176;
                        *float v173 = v177;
                        v175 += 2;
                        v173 += 2;
                        v174 -= 4;
                      }
                      while (v174);
                      uint64_t v153 = a6 & 0xFFFFFFFC;
                      if (v153 != a6)
                      {
LABEL_102:
                        float64x2_t v154 = (uint64_t *)(v38 + 8 * (v153 + v249 * v150));
                        float64x2_t v155 = (uint64_t *)(v38 + 8 * (v153 + v139));
                        uint64_t v156 = a6 - v153;
                        do
                        {
                          uint64_t v157 = *v155;
                          *v155++ = *v154;
                          *v154++ = v157;
                          --v156;
                        }
                        while (v156);
                      }
                    }
                    if (a7 < 4
                      || ((unint64_t v158 = v141 * v140,
                           unint64_t v159 = (unint64_t)&a4[v158],
                           unint64_t v160 = (unint64_t)&v142[v158],
                           v159 < (unint64_t)&v142[v141 * v150])
                        ? (BOOL v161 = (unint64_t)&a4[v141 * v150] >= v160)
                        : (BOOL v161 = 1),
                          !v161))
                    {
                      uint64_t v168 = 0;
                      unint64_t v133 = v249;
                      goto LABEL_115;
                    }
                    float64x2_t v162 = &a4[v37 * v150 + 16];
                    uint64_t v163 = a7 & 0xFFFFFFFC;
                    int v164 = v146;
                    unint64_t v133 = v249;
                    do
                    {
                      long long v165 = *(v164 - 1);
                      long long v166 = *v164;
                      long long v167 = *(_OWORD *)v162;
                      *(v164 - 1) = *((_OWORD *)v162 - 1);
                      *int v164 = v167;
                      *((_OWORD *)v162 - 1) = v165;
                      *(_OWORD *)float64x2_t v162 = v166;
                      v164 += 2;
                      v162 += 32;
                      v163 -= 4;
                    }
                    while (v163);
                    uint64_t v168 = a7 & 0xFFFFFFFC;
                    if (v168 != a7)
                    {
LABEL_115:
                      unint64_t v169 = &a4[8 * v168 + 8 * v254 * v150];
                      uint64_t v170 = &a4[8 * v168 + 8 * v138];
                      uint64_t v171 = a7 - v168;
                      do
                      {
                        uint64_t v172 = *(void *)v170;
                        *(void *)uint64_t v170 = *(void *)v169;
                        v170 += 8;
                        *(void *)unint64_t v169 = v172;
                        v169 += 8;
                        --v171;
                      }
                      while (v171);
                    }
                  }
                }
              }
              ++v145;
              float32x4_t v147 = (long long *)((char *)v147 + v20);
              v139 += v133;
              float32x4_t v146 = (long long *)((char *)v146 + v37);
              v138 += v254;
              uint64_t v140 = v148;
              if (v148 == v260) {
                goto LABEL_122;
              }
              continue;
            }
          }
        }
        uint64_t v56 = 0;
        double v57 = v51;
        double v58 = v54;
        uint64_t v59 = v55;
        while (1)
        {
          if (a6 < 1)
          {
            double v61 = 0.0;
            goto LABEL_42;
          }
          if (a6 < 4) {
            break;
          }
          double v61 = 0.0;
          double v62 = v58;
          double v63 = v53;
          uint64_t v64 = a6 & 0xFFFFFFFC;
          do
          {
            float64x2_t v65 = vmulq_f64(v63[-1], v62[-1]);
            float64x2_t v66 = vmulq_f64(*v63, *v62);
            double v61 = v61 + v65.f64[0] + v65.f64[1] + v66.f64[0] + v66.f64[1];
            v63 += 2;
            v62 += 2;
            v64 -= 4;
          }
          while (v64);
          uint64_t v60 = a6 & 0xFFFFFFFC;
          if (v45 != a6) {
            goto LABEL_40;
          }
LABEL_42:
          double v73 = *(double *)&v271[8 * v47];
          double v74 = *(double *)&v271[8 * v59];
          if (fabs(v61) <= sqrt(v73 * v74) * a10) {
            goto LABEL_32;
          }
          double v75 = v61 + v61;
          double v76 = v73 - v74;
          double v77 = fabs(v75);
          double v78 = vabdd_f64(v73, v74);
          if (v77 <= v78)
          {
            double v79 = 0.0;
            if (v76 != 0.0) {
              double v79 = v78 * sqrt(v77 / v78 * (v77 / v78) + 1.0);
            }
          }
          else
          {
            double v79 = v77 * sqrt(v78 / v77 * (v78 / v77) + 1.0);
          }
          BOOL v80 = v76 < 0.0;
          double v81 = sqrt((v79 - v76) * 0.5 / v79);
          double v82 = v75 / (v79 * v81 + v79 * v81);
          double v83 = sqrt((v76 + v79) / (v79 + v79));
          double v84 = v75 / (v79 * v83 + v79 * v83);
          if (v80) {
            *(double *)&uint64_t v85 = v82;
          }
          else {
            *(double *)&uint64_t v85 = v83;
          }
          if (v80) {
            double v86 = v81;
          }
          else {
            double v86 = v84;
          }
          if (a6 > 0)
          {
            double v87 = -v86;
            double v88 = 0.0;
            if (a6 < 4
              || v267 + v266 * v47 < v267 + v257 + v266 * v47 + v266 * v56
              && v267 + v266 + v266 * v47 + v266 * v56 < v256 + v266 * v47)
            {
              uint64_t v89 = 0;
              double v90 = 0.0;
              goto LABEL_58;
            }
            unint64_t v114 = 0;
            float64x2_t v115 = (float64x2_t)vdupq_lane_s64(v85, 0);
            float64x2_t v116 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v87, 0);
            double v90 = 0.0;
            do
            {
              float v117 = &v53[v114 / 0x10];
              float64x2_t v118 = v53[v114 / 0x10 - 1];
              float64x2_t v119 = v53[v114 / 0x10];
              float v120 = &v58[v114 / 0x10];
              float64x2_t v121 = v58[v114 / 0x10 - 1];
              float64x2_t v122 = v58[v114 / 0x10];
              float64x2_t v123 = vmlaq_f64(vmulq_n_f64(v121, v86), v118, v115);
              float64x2_t v124 = vmlaq_f64(vmulq_n_f64(v122, v86), v119, v115);
              float64x2_t v125 = vmlaq_f64(vmulq_n_f64(v121, *(double *)&v85), v118, v116);
              float64x2_t v126 = vmlaq_f64(vmulq_n_f64(v122, *(double *)&v85), v119, v116);
              v117[-1] = v123;
              *float v117 = v124;
              v120[-1] = v125;
              *float v120 = v126;
              float64x2_t v127 = vmulq_f64(v123, v123);
              float64x2_t v128 = vmulq_f64(v124, v124);
              float64x2_t v129 = vmulq_f64(v125, v125);
              float64x2_t v130 = vmulq_f64(v126, v126);
              double v88 = v88 + v129.f64[0] + v129.f64[1] + v130.f64[0] + v130.f64[1];
              double v90 = v90 + v127.f64[0] + v127.f64[1] + v128.f64[0] + v128.f64[1];
              v114 += 32;
            }
            while (v46 != v114);
            uint64_t v89 = a6 & 0xFFFFFFFC;
            if (v45 != a6)
            {
              do
              {
LABEL_58:
                uint64_t v91 = 8 * v89;
                double v92 = *(double *)(v52 + 8 * v89);
                double v93 = *(double *)(v50 + 8 * v89);
                double v94 = v86 * v93 + *(double *)&v85 * v92;
                double v95 = *(double *)&v85 * v93 + v87 * v92;
                *(double *)(v52 + v91) = v94;
                *(double *)(v50 + v91) = v95;
                double v90 = v90 + v94 * v94;
                double v88 = v88 + v95 * v95;
                ++v89;
              }
              while (a6 != v89);
            }
            *(double *)&v271[8 * v47] = v90;
            *(double *)&v271[8 * v59] = v88;
            if (a4) {
              goto LABEL_62;
            }
            goto LABEL_31;
          }
          *(void *)&v271[8 * v47] = 0;
          *(void *)&v271[8 * v59] = 0;
          if (a4)
          {
LABEL_62:
            uint64_t v96 = 0;
            int v97 = 2;
            double v98 = v49;
            unint64_t v99 = v57;
            do
            {
              int v100 = v97;
              float64x2_t v101 = vmulq_n_f64(*v99, *(double *)&v85);
              float64x2_t v102 = vmulq_n_f64(*v98, v86);
              *double v98 = vaddq_f64(vmulq_n_f64(*v98, *(double *)&v85), vmulq_n_f64(*v99, v86));
              ++v98;
              *v99++ = vsubq_f64(v101, v102);
              v96 += 2;
              v97 += 2;
            }
            while (v96 <= v39);
            if ((int)v96 < (int)a7)
            {
              double v103 = -v86;
              uint64_t v96 = (int)v96;
              if (v265 < 4) {
                goto LABEL_208;
              }
              uint64_t v104 = 8 * (v261 + (int)v96);
              if (&a4[8 * (int)v96 + __na * v47] < &a4[(a5 & 0xFFFFFFFFFFFFFFF8)
                                                      - 8 * ((v39 & 0xFFFFFFFE) + 2)
                                                      + __na * v47
                                                      + __na * v56
                                                      + v104]
                && &a4[8 * (int)v96 + __na + __na * v47 + __na * v56] < &a4[__na * v47
                                                                          - 8 * ((v39 & 0xFFFFFFFE) + 2)
                                                                          + v104])
              {
                goto LABEL_208;
              }
              uint64_t v96 = v258 + (int)v96;
              float64x2_t v105 = (float64x2_t)vdupq_lane_s64(v85, 0);
              float64x2_t v106 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v103, 0);
              uint64_t v107 = 8 * v100;
              unint64_t v108 = v258;
              do
              {
                float64x2_t v109 = *(float64x2_t *)((char *)v49 + v107);
                float64x2_t v110 = *(float64x2_t *)((char *)v57 + v107);
                *(float64x2_t *)((char *)v49 + v107) = vmlaq_f64(vmulq_n_f64(v110, v86), v109, v105);
                *(float64x2_t *)((char *)v57 + v107) = vmlaq_f64(vmulq_n_f64(v110, *(double *)&v85), v109, v106);
                v107 += 16;
                v108 -= 2;
              }
              while (v108);
              if (v259)
              {
LABEL_208:
                do
                {
                  uint64_t v111 = v96;
                  double v112 = v49->f64[v96];
                  double v113 = v57->f64[v96];
                  v49->f64[v111] = v86 * v113 + *(double *)&v85 * v112;
                  v57->f64[v111] = *(double *)&v85 * v113 + v103 * v112;
                  ++v96;
                }
                while (v96 < v18);
              }
            }
          }
LABEL_31:
          char v48 = 1;
LABEL_32:
          ++v59;
          ++v56;
          double v58 = (float64x2_t *)((char *)v58 + v20);
          v50 += v20;
          double v57 = (float64x2_t *)((char *)v57 + v37);
          if (v59 == a7) {
            goto LABEL_28;
          }
        }
        uint64_t v60 = 0;
        double v61 = 0.0;
LABEL_40:
        double v67 = (double *)(v52 + 8 * v60);
        double v68 = (double *)(v50 + 8 * v60);
        uint64_t v69 = a6 - v60;
        do
        {
          double v70 = *v67++;
          double v71 = v70;
          double v72 = *v68++;
          double v61 = v61 + v71 * v72;
          --v69;
        }
        while (v69);
        goto LABEL_42;
      }
      uint64_t v29 = 0;
      do
      {
        double v30 = 0.0;
        uint64_t v31 = a6;
        float64x2_t v32 = v17;
        do
        {
          double v33 = *v32++;
          double v30 = v30 + v33 * v33;
          --v31;
        }
        while (v31);
        *(double *)&v271[8 * v29++] = v30;
        size_t v17 = (double *)((char *)v17 + v20);
      }
      while (v29 != a7);
    }
    uint64_t v37 = 8 * v254;
    unint64_t v38 = v267;
    unint64_t v39 = (a7 - 2);
    if ((int)a7 < 2) {
      goto LABEL_78;
    }
    goto LABEL_23;
  }
LABEL_123:
  if (a4 && v10 >= 1)
  {
    uint64_t v179 = 0;
    double v180 = a10 * 100.0;
    unint64_t v181 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v182 = 8 * a6;
    uint64_t v183 = a6 & 0xFFFFFFFC;
    uint64_t v184 = v182 & 0x7FFFFFFE0;
    unint64_t v185 = 305419896;
    uint64_t v186 = v17;
    do
    {
      double v187 = 0.0;
      if (v179 < v18) {
        double v187 = *(double *)&v271[8 * v179];
      }
      if (v187 > a9)
      {
LABEL_194:
        if (v187 <= a9) {
          double v241 = 0.0;
        }
        else {
          double v241 = 1.0 / v187;
        }
        if (a6 < 1) {
          goto LABEL_126;
        }
        if (a6 >= 4)
        {
          unint64_t v242 = 0;
          do
          {
            double v243 = (float64x2_t *)&v186[v242 / 8];
            float64x2_t v244 = vmulq_n_f64(*(float64x2_t *)&v186[v242 / 8 + 2], v241);
            *double v243 = vmulq_n_f64(*(float64x2_t *)&v186[v242 / 8], v241);
            v243[1] = v244;
            v242 += 32;
          }
          while (v184 != v242);
          uint64_t result = a6 & 0xFFFFFFFC;
          if (v183 == a6) {
            goto LABEL_126;
          }
        }
        else
        {
          uint64_t result = 0;
        }
        do
        {
          v186[result] = v241 * v186[result];
          ++result;
        }
        while (a6 != result);
      }
      else if (a6 >= 1)
      {
        uint64_t result = 0;
        unint64_t v188 = (unint64_t)v17 + v181 * v179;
        unint64_t v189 = (unint64_t)&v17[(unint64_t)v182 / 8] + v181 * v179;
        while (1)
        {
          unint64_t v190 = v186;
          uint64_t v191 = a6;
          do
          {
            unint64_t v185 = HIDWORD(v185) + 4164903690 * v185;
            if ((v185 & 0x100) != 0) {
              double v192 = 1.0 / (double)a6;
            }
            else {
              double v192 = -(1.0 / (double)a6);
            }
            *v190++ = v192;
            --v191;
          }
          while (v191);
          if (v179) {
            break;
          }
LABEL_190:
          unint64_t v239 = 0;
          double v240 = 0.0;
          do
          {
            double v240 = v240 + v186[v239 / 8] * v186[v239 / 8];
            v239 += 8;
          }
          while (v182 != v239);
          double v187 = sqrt(v240);
          if (result <= 0x62)
          {
            uint64_t result = (result + 1);
            if (v187 <= a9) {
              continue;
            }
          }
          goto LABEL_194;
        }
        uint64_t v193 = 0;
        unint64_t v194 = v17;
        while (2)
        {
          if (a6 < 4)
          {
            uint64_t v195 = 0;
            double v196 = 0.0;
            goto LABEL_145;
          }
          unint64_t v197 = 0;
          double v196 = 0.0;
          do
          {
            float64x2_t v198 = vmulq_f64(*(float64x2_t *)&v186[v197 / 8], *(float64x2_t *)&v194[v197 / 8]);
            float64x2_t v199 = vmulq_f64(*(float64x2_t *)&v186[v197 / 8 + 2], *(float64x2_t *)&v194[v197 / 8 + 2]);
            double v196 = v196 + v198.f64[0] + v198.f64[1] + v199.f64[0] + v199.f64[1];
            v197 += 32;
          }
          while (v184 != v197);
          uint64_t v195 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_145:
              double v196 = v196 + v186[v195] * v194[v195];
              ++v195;
            }
            while (a6 != v195);
          }
          double v200 = -v196;
          double v201 = 0.0;
          if (a6 < 4)
          {
            uint64_t v202 = 0;
            goto LABEL_154;
          }
          if (v188 < (unint64_t)&v17[(unint64_t)v182 / 8] + v181 * v193
            && (unint64_t)v17 + v181 * v193 < v189)
          {
            uint64_t v202 = 0;
            goto LABEL_154;
          }
          unint64_t v203 = 0;
          float64x2_t v204 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v200, 0);
          do
          {
            BOOL v205 = (float64x2_t *)&v186[v203 / 8];
            float64x2_t v206 = vmlaq_f64(*(float64x2_t *)&v186[v203 / 8], *(float64x2_t *)&v194[v203 / 8], v204);
            float64x2_t v207 = vmlaq_f64(*(float64x2_t *)&v186[v203 / 8 + 2], *(float64x2_t *)&v194[v203 / 8 + 2], v204);
            *BOOL v205 = v206;
            v205[1] = v207;
            float64x2_t v208 = vabsq_f64(v206);
            float64x2_t v209 = vabsq_f64(v207);
            double v201 = v201 + v208.f64[0] + v208.f64[1] + v209.f64[0] + v209.f64[1];
            v203 += 32;
          }
          while (v184 != v203);
          uint64_t v202 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_154:
              double v210 = v186[v202] + v200 * v194[v202];
              v186[v202] = v210;
              double v201 = v201 + fabs(v210);
              ++v202;
            }
            while (a6 != v202);
          }
          double v211 = 1.0 / v201;
          if (v201 <= v180) {
            double v211 = 0.0;
          }
          if (a6 < 4)
          {
            uint64_t v212 = 0;
            goto LABEL_162;
          }
          unint64_t v213 = 0;
          do
          {
            unint64_t v214 = (float64x2_t *)&v186[v213 / 8];
            float64x2_t v215 = vmulq_n_f64(*(float64x2_t *)&v186[v213 / 8 + 2], v211);
            *unint64_t v214 = vmulq_n_f64(*(float64x2_t *)&v186[v213 / 8], v211);
            v214[1] = v215;
            v213 += 32;
          }
          while (v184 != v213);
          uint64_t v212 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_162:
              v186[v212] = v211 * v186[v212];
              ++v212;
            }
            while (a6 != v212);
          }
          ++v193;
          unint64_t v194 = (double *)((char *)v194 + v181);
          if (v193 != v179) {
            continue;
          }
          break;
        }
        uint64_t v216 = 0;
        uint64_t v217 = v17;
        while (2)
        {
          if (a6 < 4)
          {
            uint64_t v218 = 0;
            double v219 = 0.0;
            goto LABEL_171;
          }
          unint64_t v220 = 0;
          double v219 = 0.0;
          do
          {
            float64x2_t v221 = vmulq_f64(*(float64x2_t *)&v186[v220 / 8], *(float64x2_t *)&v217[v220 / 8]);
            float64x2_t v222 = vmulq_f64(*(float64x2_t *)&v186[v220 / 8 + 2], *(float64x2_t *)&v217[v220 / 8 + 2]);
            double v219 = v219 + v221.f64[0] + v221.f64[1] + v222.f64[0] + v222.f64[1];
            v220 += 32;
          }
          while (v184 != v220);
          uint64_t v218 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_171:
              double v219 = v219 + v186[v218] * v217[v218];
              ++v218;
            }
            while (a6 != v218);
          }
          double v223 = -v219;
          double v224 = 0.0;
          if (a6 < 4)
          {
            uint64_t v225 = 0;
            goto LABEL_180;
          }
          if (v188 < (unint64_t)&v17[(unint64_t)v182 / 8] + v181 * v216
            && (unint64_t)v17 + v181 * v216 < v189)
          {
            uint64_t v225 = 0;
            goto LABEL_180;
          }
          unint64_t v226 = 0;
          float64x2_t v227 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v223, 0);
          do
          {
            uint64_t v228 = (float64x2_t *)&v186[v226 / 8];
            float64x2_t v229 = vmlaq_f64(*(float64x2_t *)&v186[v226 / 8], *(float64x2_t *)&v217[v226 / 8], v227);
            float64x2_t v230 = vmlaq_f64(*(float64x2_t *)&v186[v226 / 8 + 2], *(float64x2_t *)&v217[v226 / 8 + 2], v227);
            *uint64_t v228 = v229;
            v228[1] = v230;
            float64x2_t v231 = vabsq_f64(v229);
            float64x2_t v232 = vabsq_f64(v230);
            double v224 = v224 + v231.f64[0] + v231.f64[1] + v232.f64[0] + v232.f64[1];
            v226 += 32;
          }
          while (v184 != v226);
          uint64_t v225 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_180:
              double v233 = v186[v225] + v223 * v217[v225];
              v186[v225] = v233;
              double v224 = v224 + fabs(v233);
              ++v225;
            }
            while (a6 != v225);
          }
          double v234 = 1.0 / v224;
          if (v224 <= v180) {
            double v234 = 0.0;
          }
          if (a6 < 4)
          {
            uint64_t v235 = 0;
            goto LABEL_188;
          }
          unint64_t v236 = 0;
          do
          {
            float64x2_t v237 = (float64x2_t *)&v186[v236 / 8];
            float64x2_t v238 = vmulq_n_f64(*(float64x2_t *)&v186[v236 / 8 + 2], v234);
            float64x2_t *v237 = vmulq_n_f64(*(float64x2_t *)&v186[v236 / 8], v234);
            v237[1] = v238;
            v236 += 32;
          }
          while (v184 != v236);
          uint64_t v235 = a6 & 0xFFFFFFFC;
          if (v183 != a6)
          {
            do
            {
LABEL_188:
              v186[v235] = v234 * v186[v235];
              ++v235;
            }
            while (a6 != v235);
          }
          ++v216;
          uint64_t v217 = (double *)((char *)v217 + v181);
          if (v216 == v179) {
            goto LABEL_190;
          }
          continue;
        }
      }
LABEL_126:
      ++v179;
      uint64_t v186 = (double *)((char *)v186 + v181);
    }
    while (v179 != v10);
  }
  return result;
}

double sub_1002633C0(uint64_t a1, uint64_t a2, int a3)
{
  sub_1002D6AE8(v171, &off_100494E90);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v163 = *(_OWORD *)v6;
    long long v164 = v7;
    long long v165 = *(_OWORD *)(v6 + 32);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v166 = *(void *)(v6 + 48);
    uint64_t v167 = v8;
    uint64_t v168 = (char *)&v163 + 8;
    unint64_t v169 = v170;
    v170[1] = 0;
    v170[0] = 0;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v163) = 0;
      sub_1002931A8((uint64_t)&v163, v6);
    }
    else
    {
      uint64_t v9 = *(void **)(v6 + 72);
      int v10 = v169;
      *(void *)unint64_t v169 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v163);
  }
  unsigned int v11 = v163 & 0xFFF;
  if (v11 - 5 >= 2)
  {
    long long v173 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v173, 22), "type == 5 || type == 6", 22);
    sub_1002D2278(-215, (uint64_t *)&v173, "invert", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 839);
  }
  uint64_t v12 = (((unsigned __int16)(v163 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v163 & 7))) & 3);
  int v13 = DWORD2(v163);
  int v14 = HIDWORD(v163);
  if (a3 == 1)
  {
    if (SHIDWORD(v163) >= SDWORD2(v163)) {
      int v15 = DWORD2(v163);
    }
    else {
      int v15 = HIDWORD(v163);
    }
    *(void *)&long long v173 = v174;
    *((void *)&v173 + 1) = (int)v12 * (uint64_t)(v15 + v15 * (DWORD2(v163) + HIDWORD(v163))) + 8;
    if (*((void *)&v173 + 1) >= 0x409uLL) {
      operator new[]();
    }
    sub_10000CE64((uint64_t)&v155, SDWORD2(v163), v15, v11, ((unint64_t)v174 + v12 - 1) & -(int)v12, 0);
    sub_10000CE64((uint64_t)v147, v15, 1, v11, v156 + (int)v12 * (uint64_t)(v15 * v13), 0);
    sub_10000CE64((uint64_t)&v140, v15, v14, v11, v149 + (int)v12 * (uint64_t)v15, 0);
    int v122 = 16842752;
    *(void *)&v123[4] = &v163;
    *(void *)&v123[12] = 0;
    int v137 = 33619968;
    uint64_t v138 = (long long *)v147;
    uint64_t v139 = 0;
    int v134 = 33619968;
    uint64_t v135 = &v155;
    uint64_t v136 = 0;
    int v131 = 33619968;
    uint64_t v132 = &v140;
    uint64_t v133 = 0;
    sub_1002D6AE8(&v128, &off_100494EF0);
    sub_100268DC4((uint64_t)&v122, (uint64_t)&v137, (uint64_t)&v134, (uint64_t)&v131, 0);
    if (v129) {
      sub_1002D6888(&v128);
    }
    uint64_t v139 = 0;
    int v137 = 16842752;
    uint64_t v138 = (long long *)v147;
    uint64_t v136 = 0;
    int v134 = 16842752;
    uint64_t v135 = &v155;
    uint64_t v133 = 0;
    int v131 = 16842752;
    uint64_t v132 = &v140;
    int v122 = 1124007936;
    memset(v123, 0, sizeof(v123));
    float64x2_t v124 = &v123[4];
    float64x2_t v125 = &v126;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    uint64_t v130 = 0;
    int v128 = 16842752;
    float64x2_t v129 = &v122;
    sub_100264794((uint64_t)&v137, (uint64_t)&v134, (uint64_t)&v131, (uint64_t)&v128, a2);
    if (*(void *)&v123[52] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v123[52] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v122);
    }
    *(void *)&v123[52] = 0;
    memset(&v123[12], 0, 32);
    if (*(int *)v123 >= 1)
    {
      uint64_t v16 = 0;
      size_t v17 = v124;
      do
        *(_DWORD *)&v17[4 * v16++] = 0;
      while (v16 < *(int *)v123);
    }
    if (v125 != &v126) {
      j__free(v125);
    }
    if (v11 == 5)
    {
      double v18 = 0.0;
      if (*(float *)v149 >= 0.00000011921) {
        double v18 = (float)(*(float *)(v149 + 4 * (v14 - 1)) / *(float *)v149);
      }
    }
    else
    {
      double v18 = 0.0;
      if (*(double *)v149 >= 2.22044605e-16) {
        double v18 = *(double *)(v149 + 8 * (v14 - 1)) / *(double *)v149;
      }
    }
    if (v143 && atomic_fetch_add((atomic_uint *volatile)(v143 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v140);
    }
    uint64_t v143 = 0;
    long long v141 = 0u;
    long long v142 = 0u;
    if (SDWORD1(v140) >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v144;
      do
        *(_DWORD *)(v29 + 4 * v28++) = 0;
      while (v28 < SDWORD1(v140));
    }
    if (v145 != v146) {
      j__free(v145);
    }
    if (v151 && atomic_fetch_add((atomic_uint *volatile)(v151 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v147);
    }
    uint64_t v151 = 0;
    long long v149 = 0u;
    long long v150 = 0u;
    if (v148 >= 1)
    {
      uint64_t v30 = 0;
      uint64_t v31 = v152;
      do
        *(_DWORD *)(v31 + 4 * v30++) = 0;
      while (v30 < v148);
    }
    if (v153 != v154) {
      j__free(v153);
    }
    if (v159 && atomic_fetch_add((atomic_uint *volatile)(v159 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v155);
    }
    uint64_t v159 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    if (SDWORD1(v155) >= 1)
    {
      uint64_t v32 = 0;
      double v33 = v160;
      do
        *(_DWORD *)&v33[4 * v32++] = 0;
      while (v32 < SDWORD1(v155));
    }
    if (v161 != v162) {
      j__free(v161);
    }
    if ((_OWORD *)v173 != v174 && (void)v173 != 0) {
      goto LABEL_83;
    }
    goto LABEL_84;
  }
  if (DWORD2(v163) != HIDWORD(v163))
  {
    long long v173 = 0uLL;
    uint64_t v19 = sub_1002D19D8(&v173, 6);
    *(_WORD *)(v19 + 4) = 28192;
    *(_DWORD *)uint64_t v19 = 1027416173;
    sub_1002D2278(-215, (uint64_t *)&v173, "invert", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 863);
  }
  if (a3 == 2)
  {
    unsigned int v20 = HIDWORD(v163) * HIDWORD(v163);
    *(void *)&long long v173 = v174;
    *((void *)&v173 + 1) = (int)v12 * (uint64_t)(HIDWORD(v163) + 2 * HIDWORD(v163) * HIDWORD(v163)) + 8;
    if (*((void *)&v173 + 1) >= 0x409uLL) {
      operator new[]();
    }
    sub_10000CE64((uint64_t)&v155, SHIDWORD(v163), SHIDWORD(v163), v11, ((unint64_t)v174 + v12 - 1) & -(int)v12, 0);
    sub_10000CE64((uint64_t)v147, v14, 1, v11, v156 + v12 * (unint64_t)v20, 0);
    sub_10000CE64((uint64_t)&v140, v14, v14, v11, v149 + v14 * (uint64_t)(int)v12, 0);
    int v122 = 16842752;
    *(void *)&v123[4] = &v163;
    *(void *)&v123[12] = 0;
    int v137 = 33619968;
    uint64_t v138 = (long long *)v147;
    uint64_t v139 = 0;
    int v134 = 33619968;
    uint64_t v135 = &v140;
    uint64_t v136 = 0;
    sub_100265220((uint64_t)&v122, (uint64_t)&v137, (uint64_t)&v134);
    int v122 = 16842752;
    *(void *)&v123[4] = &v140;
    *(void *)&v123[12] = 0;
    int v137 = 33619968;
    uint64_t v138 = &v155;
    uint64_t v139 = 0;
    sub_100298524((uint64_t)&v122, (uint64_t)&v137);
    uint64_t v139 = 0;
    int v137 = 16842752;
    uint64_t v138 = (long long *)v147;
    uint64_t v136 = 0;
    int v134 = 16842752;
    uint64_t v135 = &v155;
    uint64_t v133 = 0;
    int v131 = 16842752;
    uint64_t v132 = &v140;
    int v122 = 1124007936;
    memset(v123, 0, sizeof(v123));
    float64x2_t v124 = &v123[4];
    float64x2_t v125 = &v126;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    uint64_t v130 = 0;
    int v128 = 16842752;
    float64x2_t v129 = &v122;
    sub_100264794((uint64_t)&v137, (uint64_t)&v134, (uint64_t)&v131, (uint64_t)&v128, a2);
    if (*(void *)&v123[52] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v123[52] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v122);
    }
    *(void *)&v123[52] = 0;
    memset(&v123[12], 0, 32);
    if (*(int *)v123 >= 1)
    {
      uint64_t v21 = 0;
      size_t v22 = v124;
      do
        *(_DWORD *)&v22[4 * v21++] = 0;
      while (v21 < *(int *)v123);
    }
    if (v125 != &v126) {
      j__free(v125);
    }
    if (v11 == 5)
    {
      double v18 = 0.0;
      if (*(float *)v149 >= 0.00000011921) {
        double v18 = (float)(*(float *)(v149 + 4 * (v14 - 1)) / *(float *)v149);
      }
    }
    else
    {
      double v18 = 0.0;
      if (*(double *)v149 >= 2.22044605e-16) {
        double v18 = *(double *)(v149 + 8 * (v14 - 1)) / *(double *)v149;
      }
    }
    if (v143 && atomic_fetch_add((atomic_uint *volatile)(v143 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v140);
    }
    uint64_t v143 = 0;
    long long v141 = 0u;
    long long v142 = 0u;
    if (SDWORD1(v140) >= 1)
    {
      uint64_t v36 = 0;
      uint64_t v37 = v144;
      do
        *(_DWORD *)(v37 + 4 * v36++) = 0;
      while (v36 < SDWORD1(v140));
    }
    if (v145 != v146) {
      j__free(v145);
    }
    if (v151 && atomic_fetch_add((atomic_uint *volatile)(v151 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v147);
    }
    uint64_t v151 = 0;
    long long v149 = 0u;
    long long v150 = 0u;
    if (v148 >= 1)
    {
      uint64_t v38 = 0;
      uint64_t v39 = v152;
      do
        *(_DWORD *)(v39 + 4 * v38++) = 0;
      while (v38 < v148);
    }
    if (v153 != v154) {
      j__free(v153);
    }
    if (v159 && atomic_fetch_add((atomic_uint *volatile)(v159 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v155);
    }
    uint64_t v159 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    if (SDWORD1(v155) >= 1)
    {
      uint64_t v40 = 0;
      uint64_t v41 = v160;
      do
        *(_DWORD *)&v41[4 * v40++] = 0;
      while (v40 < SDWORD1(v155));
    }
    if (v161 != v162) {
      j__free(v161);
    }
    if ((_OWORD *)v173 != v174 && (void)v173 != 0) {
LABEL_83:
    }
      operator delete[]();
LABEL_84:
    uint64_t v35 = v167;
    if (!v167) {
      goto LABEL_179;
    }
    goto LABEL_177;
  }
  if (a3 && a3 != 3)
  {
    long long v173 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v173, 48), "method == DECOMP_LU || method == DECOMP_CHOLESKY", 48);
    sub_1002D2278(-215, (uint64_t *)&v173, "invert", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 883);
  }
  sub_10029EDE8(a2, HIDWORD(v163), HIDWORD(v163), v163 & 0xFFF, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v23 = *(void *)(a2 + 8);
    long long v24 = *(_OWORD *)(v23 + 16);
    long long v155 = *(_OWORD *)v23;
    long long v156 = v24;
    long long v157 = *(_OWORD *)(v23 + 32);
    uint64_t v25 = *(void *)(v23 + 56);
    uint64_t v158 = *(void *)(v23 + 48);
    uint64_t v159 = v25;
    unint64_t v160 = (char *)&v155 + 8;
    BOOL v161 = v162;
    v162[0] = 0;
    v162[1] = 0;
    if (v25) {
      atomic_fetch_add((atomic_uint *volatile)(v25 + 20), 1u);
    }
    if (*(int *)(v23 + 4) > 2)
    {
      DWORD1(v155) = 0;
      sub_1002931A8((uint64_t)&v155, v23);
    }
    else
    {
      uint64_t v26 = *(void **)(v23 + 72);
      unint64_t v27 = v161;
      *(void *)BOOL v161 = *v26;
      v27[1] = v26[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v155);
  }
  if (v14 <= 3)
  {
    uint64_t v43 = v164;
    uint64_t v44 = v156;
    unint64_t v45 = v162[0];
    if (v14 == 3)
    {
      if (v11 == 5)
      {
        double v60 = *(float *)v164;
        double v61 = *(float *)(v164 + v170[0] + 4);
        double v62 = (float *)(v164 + 2 * v170[0]);
        double v63 = v62[2];
        double v64 = *(float *)(v164 + v170[0] + 8);
        double v65 = v62[1];
        double v66 = v61 * v63 - v64 * v65;
        double v67 = *(float *)(v164 + 4);
        double v68 = *(float *)(v164 + v170[0]);
        double v69 = *v62;
        double v70 = *(float *)(v164 + 8);
        double v71 = v68 * v65 - v61 * v69;
        double v72 = v60 * v66 - (v68 * v63 - v64 * v69) * v67 + v70 * v71;
        if (v72 != 0.0)
        {
          double v73 = 1.0 / v72;
          double v74 = (v70 * v65 - v67 * v63) * v73;
          double v75 = (v67 * v64 - v70 * v61) * v73;
          double v76 = (v64 * v69 - v68 * v63) * v73;
          double v77 = (v60 * v63 - v70 * v69) * v73;
          double v78 = (v70 * v68 - v60 * v64) * v73;
          double v79 = (v67 * v69 - v60 * v65) * v73;
          double v80 = (v60 * v61 - v67 * v68) * v73;
          float v81 = v66 * v73;
          float v82 = v74;
          *(float *)long long v156 = v81;
          *(float *)(v44 + 4) = v82;
          float v83 = v75;
          *(float *)(v44 + 8) = v83;
          float v84 = v76;
          uint64_t v85 = (float *)(v44 + v45);
          float v86 = v77;
          *uint64_t v85 = v84;
          v85[1] = v86;
          float v87 = v78;
          v85[2] = v87;
          float v88 = v71 * v73;
          uint64_t v89 = v44 + 2 * v45;
          float v90 = v79;
          *(float *)uint64_t v89 = v88;
          *(float *)(v89 + 4) = v90;
          *(float *)&double v80 = v80;
          *(_DWORD *)(v89 + 8) = LODWORD(v80);
          goto LABEL_151;
        }
      }
      else
      {
        double v98 = (double *)(v164 + 2 * v170[0]);
        double v99 = v98[1];
        double v100 = v98[2];
        double v101 = *(double *)(v164 + v170[0] + 8);
        double v102 = *(double *)(v164 + v170[0] + 16);
        double v103 = *v98;
        double v104 = *(double *)(v164 + v170[0]);
        double v105 = v101 * v100 - v102 * v99;
        double v106 = *(double *)v164;
        double v107 = *(double *)(v164 + 8);
        double v108 = *(double *)(v164 + 16);
        double v109 = v104 * v99 - v101 * *v98;
        double v110 = *(double *)v164 * v105 - v107 * (v104 * v100 - v102 * *v98) + v108 * v109;
        if (v110 != 0.0)
        {
          double v111 = 1.0 / v110;
          *(double *)long long v156 = v105 * v111;
          *(double *)(v44 + 8) = (v100 * -v107 + v108 * v99) * v111;
          *(double *)(v44 + 16) = (v107 * v102 - v108 * v101) * v111;
          double v112 = (double *)(v44 + v45);
          *double v112 = (v102 * v103 - v104 * v100) * v111;
          v112[1] = (v106 * v100 - v108 * v103) * v111;
          v112[2] = (v108 * v104 - v106 * v102) * v111;
          double v113 = (double *)(v44 + 2 * v45);
          *double v113 = v109 * v111;
          v113[1] = (v107 * v103 - v106 * v99) * v111;
          v113[2] = (v104 * -v107 + v106 * v101) * v111;
          goto LABEL_151;
        }
      }
    }
    else if (v14 == 2)
    {
      if (v11 == 5)
      {
        double v46 = *(float *)v164;
        uint64_t v47 = (float *)(v164 + v170[0]);
        double v48 = *(float *)(v164 + v170[0] + 4);
        double v49 = v46 * v48 - *(float *)(v164 + 4) * *(float *)(v164 + v170[0]);
        if (v49 != 0.0)
        {
          double v50 = 1.0 / v49;
          float v51 = v50 * v46;
          unint64_t v52 = (float *)(v156 + v162[0]);
          v52[1] = v51;
          float v53 = v50 * v48;
          *(float *)uint64_t v44 = v53;
          double v54 = v50 * (float)-*v47;
          float v55 = v50 * (float)-*(float *)(v43 + 4);
          *(float *)(v44 + 4) = v55;
          float v56 = v54;
          *unint64_t v52 = v56;
LABEL_151:
          unsigned int v58 = 1;
          goto LABEL_168;
        }
      }
      else
      {
        double v92 = (double *)(v164 + v170[0]);
        double v93 = *(double *)(v164 + v170[0] + 8);
        double v94 = *(double *)v164 * v93 - *(double *)(v164 + 8) * *(double *)(v164 + v170[0]);
        if (v94 != 0.0)
        {
          double v95 = 1.0 / v94;
          uint64_t v96 = (double *)(v156 + v162[0]);
          v96[1] = *(double *)v164 * v95;
          *(double *)uint64_t v44 = v93 * v95;
          double v97 = -(*v92 * v95);
          *(double *)(v44 + 8) = -(*(double *)(v43 + 8) * v95);
          *uint64_t v96 = v97;
          goto LABEL_151;
        }
      }
    }
    else if (v11 == 5)
    {
      if (*(float *)v164 != 0.0)
      {
        *(float *)long long v156 = 1.0 / *(float *)v164;
        goto LABEL_151;
      }
    }
    else if (*(double *)v164 != 0.0)
    {
      *(double *)long long v156 = 1.0 / *(double *)v164;
      goto LABEL_151;
    }
    long long v173 = 0u;
    v174[0] = 0u;
    sub_100255390((uint64_t)&v155, (uint64_t)&v173);
    unsigned int v58 = 0;
    goto LABEL_168;
  }
  *(void *)&long long v173 = v174;
  *((void *)&v173 + 1) = (v14 * v14 * v12);
  if (DWORD2(v173) >= 0x409) {
    operator new[]();
  }
  sub_10000CE64((uint64_t)v147, v14, v14, v11, (uint64_t)v174, 0);
  LODWORD(v140) = 33619968;
  *((void *)&v140 + 1) = v147;
  *(void *)&long long v141 = 0;
  sub_10025401C((uint64_t)&v163, (uint64_t)&v140);
  int v122 = 50397184;
  *(void *)&v123[4] = &v155;
  *(void *)&v123[12] = 0;
  long long v140 = 0x3FF0000000000000uLL;
  long long v141 = 0uLL;
  sub_1002A02D0((uint64_t)&v122, (double *)&v140);
  if (!a3 && v11 == 5)
  {
    int v57 = sub_1002A7E34(v149, v154[0], v14, (__n128 *)v156, v162[0], v14);
    goto LABEL_133;
  }
  if (!a3 && v11 == 6)
  {
    int v57 = sub_1002A8660(v149, v154[0], v14, v156, v162[0], v14);
LABEL_133:
    if (v57) {
      goto LABEL_134;
    }
    goto LABEL_155;
  }
  if (a3 == 3 && v11 == 5) {
    BOOL v91 = sub_1002A8E8C((float *)v149, v154[0], v14, v156, v162[0], v14);
  }
  else {
    BOOL v91 = sub_1002A9454((double *)v149, v154[0], v14, v156, v162[0], v14);
  }
  if (v91)
  {
LABEL_134:
    unsigned int v58 = 1;
    uint64_t v59 = v151;
    if (!v151) {
      goto LABEL_158;
    }
LABEL_156:
    if (atomic_fetch_add((atomic_uint *volatile)(v59 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v147);
    }
    goto LABEL_158;
  }
LABEL_155:
  long long v140 = 0u;
  long long v141 = 0u;
  sub_100255390((uint64_t)&v155, (uint64_t)&v140);
  unsigned int v58 = 0;
  uint64_t v59 = v151;
  if (v151) {
    goto LABEL_156;
  }
LABEL_158:
  uint64_t v151 = 0;
  long long v149 = 0u;
  long long v150 = 0u;
  if (v148 >= 1)
  {
    uint64_t v114 = 0;
    uint64_t v115 = v152;
    do
      *(_DWORD *)(v115 + 4 * v114++) = 0;
    while (v114 < v148);
  }
  if (v153 != v154) {
    j__free(v153);
  }
  if ((_OWORD *)v173 != v174 && (void)v173 != 0) {
    operator delete[]();
  }
LABEL_168:
  if (v159 && atomic_fetch_add((atomic_uint *volatile)(v159 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v155);
  }
  uint64_t v159 = 0;
  long long v156 = 0u;
  long long v157 = 0u;
  if (SDWORD1(v155) >= 1)
  {
    uint64_t v117 = 0;
    float64x2_t v118 = v160;
    do
      *(_DWORD *)&v118[4 * v117++] = 0;
    while (v117 < SDWORD1(v155));
  }
  if (v161 != v162) {
    j__free(v161);
  }
  double v18 = (double)v58;
  uint64_t v35 = v167;
  if (v167)
  {
LABEL_177:
    if (atomic_fetch_add((atomic_uint *volatile)(v35 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)&v163);
    }
  }
LABEL_179:
  uint64_t v167 = 0;
  long long v164 = 0u;
  long long v165 = 0u;
  if (SDWORD1(v163) >= 1)
  {
    uint64_t v119 = 0;
    float v120 = v168;
    do
      *(_DWORD *)&v120[4 * v119++] = 0;
    while (v119 < SDWORD1(v163));
  }
  if (v169 != v170) {
    j__free(v169);
  }
  if (v172) {
    sub_1002D6888(v171);
  }
  return v18;
}

void sub_100264520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000094F4((uint64_t)&a57);
  sub_1000094F4((uint64_t)&a69);
  sub_10020FA00((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_1002645C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a33);
  sub_1000094F4((uint64_t)&a45);
  sub_1000094F4((uint64_t)&a57);
  if (STACK[0x250] != v57)
  {
    if (STACK[0x250]) {
      operator delete[]();
    }
  }
  JUMPOUT(0x100264748);
}

void sub_100264730()
{
}

void sub_100264744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000094F4((uint64_t)&a69);
  sub_10020FA00((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_100264764(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100264780(_Unwind_Exception *a1)
{
}

void sub_100264794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v90 = *(_OWORD *)v10;
    long long v91 = v11;
    long long v92 = *(_OWORD *)(v10 + 32);
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t v93 = *(void *)(v10 + 48);
    uint64_t v94 = v12;
    double v95 = (_DWORD *)&v90 + 2;
    uint64_t v96 = v97;
    v97[1] = 0;
    v97[0] = 0;
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v90) = 0;
      sub_1002931A8((uint64_t)&v90, v10);
    }
    else
    {
      int v13 = *(void **)(v10 + 72);
      int v14 = v96;
      *(void *)uint64_t v96 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v90);
  }
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    long long v16 = *(_OWORD *)(v15 + 16);
    long long v82 = *(_OWORD *)v15;
    long long v83 = v16;
    long long v84 = *(_OWORD *)(v15 + 32);
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v85 = *(void *)(v15 + 48);
    uint64_t v86 = v17;
    float v87 = (char *)&v82 + 8;
    float v88 = v89;
    v89[0] = 0;
    v89[1] = 0;
    if (v17) {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
    }
    if (*(int *)(v15 + 4) > 2)
    {
      DWORD1(v82) = 0;
      sub_1002931A8((uint64_t)&v82, v15);
    }
    else
    {
      double v18 = *(void **)(v15 + 72);
      uint64_t v19 = v88;
      *(void *)float v88 = *v18;
      v19[1] = v18[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v82);
  }
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v20 = *(void *)(a3 + 8);
    long long v21 = *(_OWORD *)(v20 + 16);
    long long v74 = *(_OWORD *)v20;
    long long v75 = v21;
    long long v76 = *(_OWORD *)(v20 + 32);
    uint64_t v22 = *(void *)(v20 + 56);
    uint64_t v77 = *(void *)(v20 + 48);
    uint64_t v78 = v22;
    double v79 = (char *)&v74 + 8;
    double v80 = v81;
    v81[0] = 0;
    v81[1] = 0;
    if (v22) {
      atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 1u);
    }
    if (*(int *)(v20 + 4) > 2)
    {
      DWORD1(v74) = 0;
      sub_1002931A8((uint64_t)&v74, v20);
    }
    else
    {
      uint64_t v23 = *(void **)(v20 + 72);
      long long v24 = v80;
      *(void *)double v80 = *v23;
      v24[1] = v23[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)&v74);
  }
  if (sub_10029A230((_DWORD *)a4) == 0x10000)
  {
    uint64_t v25 = *(void *)(a4 + 8);
    long long v26 = *(_OWORD *)(v25 + 16);
    long long v66 = *(_OWORD *)v25;
    long long v67 = v26;
    long long v68 = *(_OWORD *)(v25 + 32);
    uint64_t v27 = *(void *)(v25 + 56);
    uint64_t v69 = *(void *)(v25 + 48);
    uint64_t v70 = v27;
    double v71 = (char *)&v66 + 8;
    double v72 = v73;
    v73[0] = 0;
    v73[1] = 0;
    if (v27) {
      atomic_fetch_add((atomic_uint *volatile)(v27 + 20), 1u);
    }
    if (*(int *)(v25 + 4) > 2)
    {
      DWORD1(v66) = 0;
      sub_1002931A8((uint64_t)&v66, v25);
    }
    else
    {
      uint64_t v28 = *(void **)(v25 + 72);
      uint64_t v29 = v72;
      *(void *)double v72 = *v28;
      v29[1] = v28[1];
    }
  }
  else
  {
    sub_100299554(a4, -1, (uint64_t)&v66);
  }
  if (SDWORD1(v90) < 1) {
    LODWORD(v30) = 0;
  }
  else {
    uint64_t v30 = *((void *)v96 + (DWORD1(v90) - 1));
  }
  int v31 = v90 & 0xFFF;
  unsigned int v32 = DWORD2(v82);
  int v33 = HIDWORD(v74);
  if ((void)v67) {
    signed int v34 = HIDWORD(v66);
  }
  else {
    signed int v34 = DWORD2(v82);
  }
  if (SHIDWORD(v74) >= SDWORD2(v82)) {
    int v35 = DWORD2(v82);
  }
  else {
    int v35 = HIDWORD(v74);
  }
  if (DWORD2(v90) == 1)
  {
    uint64_t v36 = (int)v30;
  }
  else
  {
    uint64_t v36 = v97[0];
    if (HIDWORD(v90) != 1) {
      uint64_t v36 = v97[0] + (int)v30;
    }
  }
  double v98 = v100;
  unint64_t v99 = 8 * v34 + 16;
  if (v99 >= 0x409) {
    operator new[]();
  }
  if (v31 != (v82 & 0xFFF) || v31 != (v74 & 0xFFF) || !(void)v83 || !(void)v75 || !(void)v91)
  {
    long long v58 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v58, 76), "w.type() == u.type() && u.type() == vt.type() && u.data && vt.data && w.data", 76);
    sub_1002D2278(-215, (uint64_t *)&v58, "backSubst", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1561);
  }
  if (SHIDWORD(v82) < v35
    || SDWORD2(v74) < v35
    || ((int v44 = *v95, v45 = v95[1], v45 != v35) || v44 != 1)
    && (v45 != 1 || v44 != v35)
    && (v45 != DWORD2(v74) || v44 != HIDWORD(v82)))
  {
    long long v58 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v58, 122), "u.cols >= nm && vt.rows >= nm && (w.size() == Size(nm, 1) || w.size() == Size(1, nm) || w.size() == Size(vt.rows, u.cols))", 122);
    sub_1002D2278(-215, (uint64_t *)&v58, "backSubst", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1563);
  }
  if ((void)v67 && ((v66 & 0xFFF) != v31 || DWORD2(v66) != DWORD2(v82)))
  {
    long long v58 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v58, 54), "rhs.data == 0 || (rhs.type() == type && rhs.rows == m)", 54);
    sub_1002D2278(-215, (uint64_t *)&v58, "backSubst", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1564);
  }
  sub_10029EDE8(a5, HIDWORD(v74), v34, v31, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a5) == 0x10000)
  {
    uint64_t v38 = *(void *)(a5 + 8);
    long long v39 = *(_OWORD *)(v38 + 16);
    long long v58 = *(_OWORD *)v38;
    long long v59 = v39;
    long long v40 = *(_OWORD *)(v38 + 32);
    long long v60 = v40;
    uint64_t v41 = *(void *)(v38 + 56);
    uint64_t v61 = *(void *)(v38 + 48);
    uint64_t v62 = v41;
    double v63 = (char *)&v58 + 8;
    double v64 = v65;
    v65[0] = 0;
    v65[1] = 0;
    if (v41) {
      atomic_fetch_add((atomic_uint *volatile)(v41 + 20), 1u);
    }
    if (*(int *)(v38 + 4) > 2)
    {
      DWORD1(v58) = 0;
      sub_1002931A8((uint64_t)&v58, v38);
    }
    else
    {
      uint64_t v42 = *(void **)(v38 + 72);
      uint64_t v43 = v64;
      *(void *)double v64 = *v42;
      v43[1] = v42[1];
    }
  }
  else
  {
    sub_100299554(a5, -1, (uint64_t)&v58);
  }
  if (v31 == 6)
  {
    sub_1002683B4(v32, v33, v91, v36, (double *)v83, v89[0], 0, v75, *(double *)&v40, *(double *)&v39, v37, v81[0], v67, v73[0], v34, (double *)v59, v65[0], (uint64_t)v98);
  }
  else
  {
    if (v31 != 5)
    {
      v57[0] = 0;
      v57[1] = 0;
      sub_1002D2278(-210, v57, "backSubst", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1577);
    }
    sub_100267938(v32, v33, (float32x4_t *)v91, v36, (float *)v83, v89[0], 0, v75, v81[0], v67, v73[0], v34, (float *)v59, v65[0], (uint64_t)v98);
  }
  if (v62 && atomic_fetch_add((atomic_uint *volatile)(v62 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v58);
  }
  uint64_t v62 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  if (SDWORD1(v58) >= 1)
  {
    uint64_t v46 = 0;
    uint64_t v47 = v63;
    do
      *(_DWORD *)&v47[4 * v46++] = 0;
    while (v46 < SDWORD1(v58));
  }
  if (v64 != v65) {
    j__free(v64);
  }
  if (v98 != v100 && v98 != 0) {
    operator delete[]();
  }
  if (v70 && atomic_fetch_add((atomic_uint *volatile)(v70 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v66);
  }
  uint64_t v70 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  if (SDWORD1(v66) >= 1)
  {
    uint64_t v49 = 0;
    double v50 = v71;
    do
      *(_DWORD *)&v50[4 * v49++] = 0;
    while (v49 < SDWORD1(v66));
  }
  if (v72 != v73) {
    j__free(v72);
  }
  if (v78 && atomic_fetch_add((atomic_uint *volatile)(v78 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v74);
  }
  uint64_t v78 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  if (SDWORD1(v74) >= 1)
  {
    uint64_t v51 = 0;
    unint64_t v52 = v79;
    do
      *(_DWORD *)&v52[4 * v51++] = 0;
    while (v51 < SDWORD1(v74));
  }
  if (v80 != v81) {
    j__free(v80);
  }
  if (v86 && atomic_fetch_add((atomic_uint *volatile)(v86 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v82);
  }
  uint64_t v86 = 0;
  long long v83 = 0u;
  long long v84 = 0u;
  if (SDWORD1(v82) >= 1)
  {
    uint64_t v53 = 0;
    double v54 = v87;
    do
      *(_DWORD *)&v54[4 * v53++] = 0;
    while (v53 < SDWORD1(v82));
  }
  if (v88 != v89) {
    j__free(v88);
  }
  if (v94 && atomic_fetch_add((atomic_uint *volatile)(v94 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v90);
  }
  uint64_t v94 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  if (SDWORD1(v90) >= 1)
  {
    uint64_t v55 = 0;
    float v56 = v95;
    do
      v56[v55++] = 0;
    while (v55 < SDWORD1(v90));
  }
  if (v96 != v97) {
    j__free(v96);
  }
}

void sub_1002650EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000B6A8(a1);
}

void sub_100265194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  unint64_t v32 = STACK[0x230];
  if (STACK[0x230] != v31 && v32) {
    operator delete[](v32, 0x1000C8077774924);
  }
  sub_1000094F4(&a31);
  JUMPOUT(0x1002651D0);
}

void sub_1002651F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000094F4((uint64_t)&a55);
  sub_1000094F4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_10026520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000094F4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_100265220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002D6AE8(v76, &off_100494ED0);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v68 = *(_OWORD *)v6;
    long long v69 = v7;
    long long v70 = *(_OWORD *)(v6 + 32);
    uint64_t v8 = *(void *)(v6 + 56);
    uint64_t v71 = *(void *)(v6 + 48);
    uint64_t v72 = v8;
    double v73 = (char *)&v68 + 8;
    long long v74 = v75;
    v75[0] = 0;
    v75[1] = 0;
    if (v8) {
      atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
    }
    if (*(int *)(v6 + 4) > 2)
    {
      DWORD1(v68) = 0;
      sub_1002931A8((uint64_t)&v68, v6);
    }
    else
    {
      uint64_t v9 = *(void **)(v6 + 72);
      uint64_t v10 = v74;
      *(void *)long long v74 = *v9;
      v10[1] = v9[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v68);
  }
  uint64_t v11 = SDWORD2(v68);
  if (DWORD2(v68) != HIDWORD(v68))
  {
    v78[0] = 0uLL;
    uint64_t v12 = sub_1002D19D8(v78, 20);
    *(_DWORD *)(v12 + 16) = 1936486243;
    *(_OWORD *)uint64_t v12 = *(_OWORD *)"src.rows == src.cols";
    sub_1002D2278(-215, (uint64_t *)v78, "eigen", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1395);
  }
  unsigned int v13 = v68 & 0xFFF;
  if (v13 - 5 >= 2)
  {
    v78[0] = 0uLL;
    qmemcpy((void *)sub_1002D19D8(v78, 22), "type == 5 || type == 6", 22);
    sub_1002D2278(-215, (uint64_t *)v78, "eigen", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1396);
  }
  *(_DWORD *)double v63 = 1124007936;
  memset(&v63[4], 0, 60);
  double v64 = &v63[8];
  double v65 = &v66;
  unint64_t v66 = 0;
  unint64_t v67 = 0;
  if (sub_10029FDC8(a3))
  {
    sub_10029EDE8(a3, v11, v11, v13, -1, 0, 0);
    if (sub_10029A230((_DWORD *)a3) == 0x10000)
    {
      uint64_t v14 = *(void *)(a3 + 8);
      long long v15 = *(_OWORD *)(v14 + 16);
      v78[0] = *(_OWORD *)v14;
      v78[1] = v15;
      _DWORD v78[2] = *(_OWORD *)(v14 + 32);
      uint64_t v16 = *(void *)(v14 + 56);
      *(void *)&v78[3] = *(void *)(v14 + 48);
      *((void *)&v78[3] + 1) = v16;
      double v79 = (char *)v78 + 8;
      double v80 = v81;
      v81[1] = 0;
      v81[0] = 0;
      if (v16) {
        atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
      }
      if (*(int *)(v14 + 4) > 2)
      {
        DWORD1(v78[0]) = 0;
        sub_1002931A8((uint64_t)v78, v14);
      }
      else
      {
        uint64_t v17 = *(unint64_t **)(v14 + 72);
        double v18 = v80;
        *double v80 = *v17;
        v18[1] = v17[1];
      }
    }
    else
    {
      sub_100299554(a3, -1, (uint64_t)v78);
    }
    if (*(void *)&v63[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v63[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v63);
    }
    if (*(int *)&v63[4] >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = v64;
      do
        *(_DWORD *)&v20[4 * v19++] = 0;
      while (v19 < *(int *)&v63[4]);
    }
    *(_OWORD *)double v63 = v78[0];
    *(_OWORD *)&v63[16] = v78[1];
    *(_OWORD *)&v63[32] = v78[2];
    *(_OWORD *)&v63[48] = v78[3];
    if (v65 == &v66)
    {
      long long v21 = v80;
      if (SDWORD1(v78[0]) <= 2) {
        goto LABEL_28;
      }
    }
    else
    {
      j__free(v65);
      double v64 = &v63[8];
      double v65 = &v66;
      long long v21 = v80;
      if (SDWORD1(v78[0]) <= 2)
      {
LABEL_28:
        unint64_t v66 = *v21;
        unint64_t v67 = v21[1];
        goto LABEL_31;
      }
    }
    double v64 = v79;
    double v65 = v21;
    long long v21 = v81;
    double v79 = (char *)v78 + 8;
    double v80 = v81;
LABEL_31:
    LODWORD(v78[0]) = 1124007936;
    memset((char *)v78 + 4, 0, 60);
    if (v21 != v81) {
      j__free(v21);
    }
  }
  if (SDWORD1(v68) < 1) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)v74 + (DWORD1(v68) - 1));
  }
  uint64_t v23 = v22 * v11;
  unint64_t v24 = (v22 * v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v25 = v24 * v11;
  *(void *)&v78[0] = &v78[1];
  *((void *)&v78[0] + 1) = 5 * v11 * v22 + v24 * v11 + 32;
  if (*((void *)&v78[0] + 1) >= 0x409uLL) {
    operator new[]();
  }
  sub_10000CE64((uint64_t)v55, v11, v11, v13, (uint64_t)&v78[1], v24);
  sub_10000CE64((uint64_t)v47, v11, 1, v13, (uint64_t)&v78[1] + v25, 0);
  int v44 = 33619968;
  int v45 = v55;
  uint64_t v46 = 0;
  sub_10025401C((uint64_t)&v68, (uint64_t)&v44);
  uint64_t v31 = (char *)&v78[1] + v25 + v23;
  if (v13 == 5) {
    uint64_t v32 = sub_100269714(v57, *(unint64_t *)v62, v49, *(char **)&v63[16], v66, v11, (uint64_t)v31, v26, v27, v28, v29, v30);
  }
  else {
    uint64_t v32 = sub_10026A048(v57, *(unint64_t *)v62, v49, *(char **)&v63[16], v66, v11, (uint64_t)v31);
  }
  uint64_t v33 = v32;
  sub_10025401C((uint64_t)v47, a2);
  if (v51 && atomic_fetch_add((atomic_uint *volatile)(v51 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v47);
  }
  uint64_t v51 = 0;
  long long v49 = 0u;
  long long v50 = 0u;
  if (v48 >= 1)
  {
    uint64_t v34 = 0;
    uint64_t v35 = v52;
    do
      *(_DWORD *)(v35 + 4 * v34++) = 0;
    while (v34 < v48);
  }
  if (v53 != &v54) {
    j__free(v53);
  }
  if (v59 && atomic_fetch_add((atomic_uint *volatile)(v59 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v55);
  }
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  if (v56 >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = v60;
    do
      *(_DWORD *)(v37 + 4 * v36++) = 0;
    while (v36 < v56);
  }
  if (v61 != v62) {
    j__free(v61);
  }
  if (*(_OWORD **)&v78[0] != &v78[1] && *(void *)&v78[0] != 0) {
    operator delete[]();
  }
  if (*(void *)&v63[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v63[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v63);
  }
  *(void *)&v63[56] = 0;
  memset(&v63[16], 0, 32);
  if (*(int *)&v63[4] >= 1)
  {
    uint64_t v39 = 0;
    long long v40 = v64;
    do
      *(_DWORD *)&v40[4 * v39++] = 0;
    while (v39 < *(int *)&v63[4]);
  }
  if (v65 != &v66) {
    j__free(v65);
  }
  if (v72 && atomic_fetch_add((atomic_uint *volatile)(v72 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v68);
  }
  uint64_t v72 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  if (SDWORD1(v68) >= 1)
  {
    uint64_t v41 = 0;
    uint64_t v42 = v73;
    do
      *(_DWORD *)&v42[4 * v41++] = 0;
    while (v41 < SDWORD1(v68));
  }
  if (v74 != v75) {
    j__free(v74);
  }
  if (v77) {
    sub_1002D6888(v76);
  }
  return v33;
}

void sub_10026590C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002659C0()
{
}

void sub_1002659C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t sub_100265A34(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  sub_1002D6AE8(v249, &off_100494EB0);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    long long v9 = *(_OWORD *)(v8 + 16);
    long long v241 = *(_OWORD *)v8;
    long long v242 = v9;
    long long v243 = *(_OWORD *)(v8 + 32);
    uint64_t v10 = *(void *)(v8 + 56);
    uint64_t v244 = *(void *)(v8 + 48);
    uint64_t v245 = v10;
    float v246 = (char *)&v241 + 8;
    unint64_t v247 = v248;
    v248[1] = 0;
    v248[0] = 0;
    if (v10) {
      atomic_fetch_add((atomic_uint *volatile)(v10 + 20), 1u);
    }
    if (*(int *)(v8 + 4) > 2)
    {
      DWORD1(v241) = 0;
      sub_1002931A8((uint64_t)&v241, v8);
    }
    else
    {
      uint64_t v11 = *(void **)(v8 + 72);
      uint64_t v12 = v247;
      *(void *)unint64_t v247 = *v11;
      v12[1] = v11[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v241);
  }
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v13 = *(void *)(a2 + 8);
    long long v14 = *(_OWORD *)(v13 + 16);
    long long v233 = *(_OWORD *)v13;
    long long v234 = v14;
    long long v235 = *(_OWORD *)(v13 + 32);
    uint64_t v15 = *(void *)(v13 + 56);
    uint64_t v236 = *(void *)(v13 + 48);
    uint64_t v237 = v15;
    float64x2_t v238 = (char *)&v233 + 8;
    unint64_t v239 = v240;
    v240[1] = 0;
    v240[0] = 0;
    if (v15) {
      atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
    }
    if (*(int *)(v13 + 4) > 2)
    {
      DWORD1(v233) = 0;
      sub_1002931A8((uint64_t)&v233, v13);
    }
    else
    {
      uint64_t v16 = *(void **)(v13 + 72);
      uint64_t v17 = v239;
      *(void *)unint64_t v239 = *v16;
      v17[1] = v16[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v233);
  }
  unsigned int v18 = v241 & 0xFFF;
  if (v18 != (v233 & 0xFFF) || v18 - 5 >= 2)
  {
    long long v255 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v255, 48), "type == _src2.type() && (type == 5 || type == 6)", 48);
    sub_1002D2278(-215, (uint64_t *)&v255, "solve", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1100);
  }
  if (a4 <= 0x13 && ((1 << a4) & 0x90009) != 0)
  {
    if ((a4 & 0x10) == 0 && DWORD2(v241) != HIDWORD(v241))
    {
      long long v255 = 0uLL;
      qmemcpy((void *)sub_1002D19D8(&v255, 87), "(method != DECOMP_LU && method != DECOMP_CHOLESKY) || is_normal || src.rows == src.cols", 87);
      sub_1002D2278(-215, (uint64_t *)&v255, "solve", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1104);
    }
    if (((1 << a4) & 0x90009) != 0
      && (a4 & 0x10) == 0
      && SDWORD2(v241) <= 3
      && DWORD2(v241) == HIDWORD(v241)
      && HIDWORD(v233) == 1)
    {
      sub_10029EDE8(a3, DWORD2(v241), 1u, v241 & 0xFFF, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a3) == 0x10000)
      {
        uint64_t v19 = *(void *)(a3 + 8);
        long long v20 = *(_OWORD *)(v19 + 16);
        long long v255 = *(_OWORD *)v19;
        long long v256 = v20;
        long long v257 = *(_OWORD *)(v19 + 32);
        uint64_t v21 = *(void *)(v19 + 56);
        uint64_t v258 = *(void *)(v19 + 48);
        uint64_t v259 = v21;
        uint64_t v260 = (char *)&v255 + 8;
        uint64_t v261 = v262;
        v262[1] = 0;
        v262[0] = 0;
        if (v21) {
          atomic_fetch_add((atomic_uint *volatile)(v21 + 20), 1u);
        }
        if (*(int *)(v19 + 4) > 2)
        {
          DWORD1(v255) = 0;
          sub_1002931A8((uint64_t)&v255, v19);
        }
        else
        {
          uint64_t v22 = *(void **)(v19 + 72);
          uint64_t v23 = v261;
          *(void *)uint64_t v261 = *v22;
          v23[1] = v22[1];
        }
      }
      else
      {
        sub_100299554(a3, -1, (uint64_t)&v255);
      }
      long long v91 = (float *)v256;
      uint64_t v92 = v262[0];
      if (DWORD2(v241) == 3)
      {
        if (v18 == 5)
        {
          double v105 = *(float *)v242;
          double v106 = *(float *)(v242 + v248[0] + 4);
          double v107 = (float *)(v242 + 2 * v248[0]);
          float v108 = v107[2];
          double v109 = v108;
          double v110 = *(float *)(v242 + v248[0] + 8);
          double v111 = v107[1];
          double v112 = v106 * v108 - v110 * v111;
          double v113 = *(float *)(v242 + 4);
          double v114 = *(float *)(v242 + v248[0]);
          double v115 = *v107;
          double v116 = -(v110 * v115);
          double v117 = *(float *)(v242 + 8);
          double v118 = v114 * v111 - v106 * v115;
          double v119 = v105 * v112 - (v114 * v108 - v110 * v115) * v113 + v117 * v118;
          if (v119 != 0.0)
          {
            double v120 = -v110;
            double v121 = -(v116 + v114 * v109);
            double v122 = 1.0 / v119;
            double v123 = *(float *)v234;
            float v124 = *(float *)(v234 + v240[0]);
            double v125 = *(float *)(v234 + 2 * v240[0]);
            float v126 = v122 * (v123 * v112 - (v120 * v125 + v124 * v109) * v113 + v117 * (-v106 * v125 + v124 * v111));
            double v127 = v114 * v125 - v124 * v115;
            float v128 = v122 * (v121 * v123 + v105 * ((float)(v108 * v124) + v120 * v125) + v117 * v127);
            float v129 = v122 * (v105 * (v106 * v125 - v124 * v111) - v127 * v113 + v123 * v118);
            *(float *)long long v256 = v126;
            *(float *)((char *)v91 + v92) = v128;
            *(float *)((char *)v91 + 2 * v92) = v129;
            uint64_t v103 = 1;
            uint64_t v104 = v259;
            if (!v259) {
              goto LABEL_341;
            }
            goto LABEL_339;
          }
        }
        else
        {
          long long v165 = (double *)(v242 + 2 * v248[0]);
          double v166 = v165[1];
          double v167 = v165[2];
          double v168 = *(double *)(v242 + v248[0] + 8);
          double v169 = *(double *)(v242 + v248[0] + 16);
          double v170 = *v165;
          double v171 = *(double *)(v242 + v248[0]);
          double v172 = v168 * v167 - v169 * v166;
          double v173 = *(double *)v242;
          double v174 = *(double *)(v242 + 8);
          double v175 = *(double *)(v242 + 16);
          double v176 = v171 * v166 - v168 * *v165;
          double v177 = *(double *)v242 * v172 - v174 * (v171 * v167 - v169 * *v165) + v175 * v176;
          if (v177 != 0.0)
          {
            double v178 = 1.0 / v177;
            double v179 = *(double *)(v234 + v240[0]);
            double v180 = *(double *)(v234 + 2 * v240[0]);
            double v181 = v178
                 * ((v167 * -v174 + v175 * v166) * v179 + v172 * *(double *)v234 + (v174 * v169 - v175 * v168) * v180);
            double v182 = v178
                 * ((v173 * v167 - v175 * v170) * v179
                  + (v169 * v170 - v171 * v167) * *(double *)v234
                  + (v175 * v171 - v173 * v169) * v180);
            double v183 = v178
                 * ((v174 * v170 - v173 * v166) * v179 + v176 * *(double *)v234 + (v171 * -v174 + v173 * v168) * v180);
            *(double *)long long v256 = v181;
            *(double *)((char *)v91 + v92) = v182;
            *(double *)((char *)v91 + 2 * v92) = v183;
            uint64_t v103 = 1;
            uint64_t v104 = v259;
            if (!v259) {
              goto LABEL_341;
            }
            goto LABEL_339;
          }
        }
      }
      else if (DWORD2(v241) == 2)
      {
        if (v18 == 5)
        {
          double v93 = *(float *)v242;
          double v94 = *(float *)(v242 + v248[0] + 4);
          double v95 = *(float *)(v242 + 4);
          double v96 = *(float *)(v242 + v248[0]);
          double v97 = v93 * v94 - v95 * v96;
          if (v97 != 0.0)
          {
            double v98 = 1.0 / v97;
            double v99 = *(float *)v234;
            double v100 = *(float *)(v234 + v240[0]);
            float v101 = v98 * (v99 * v94 - v100 * v95);
            float v102 = v98 * (v100 * v93 - v99 * v96);
            *(float *)(v256 + v262[0]) = v102;
            *long long v91 = v101;
            uint64_t v103 = 1;
            uint64_t v104 = v259;
            if (!v259) {
              goto LABEL_341;
            }
            goto LABEL_339;
          }
        }
        else
        {
          double v159 = *(double *)(v242 + 8);
          double v160 = *(double *)(v242 + v248[0] + 8);
          double v161 = *(double *)v242 * v160 - v159 * *(double *)(v242 + v248[0]);
          if (v161 != 0.0)
          {
            double v162 = 1.0 / v161;
            double v163 = *(double *)(v234 + v240[0]);
            double v164 = v162 * (*(double *)v234 * v160 - v163 * v159);
            *(double *)(v256 + v262[0]) = v162
                                        * (v163 * *(double *)v242 - *(double *)v234 * *(double *)(v242 + v248[0]));
            *(double *)long long v91 = v164;
            uint64_t v103 = 1;
            uint64_t v104 = v259;
            if (!v259) {
              goto LABEL_341;
            }
            goto LABEL_339;
          }
        }
      }
      else if (v18 == 5)
      {
        if (*(float *)v242 != 0.0)
        {
          *(float *)long long v256 = *(float *)v234 / *(float *)v242;
          uint64_t v103 = 1;
          uint64_t v104 = v259;
          if (!v259) {
            goto LABEL_341;
          }
          goto LABEL_339;
        }
      }
      else if (*(double *)v242 != 0.0)
      {
        *(double *)long long v256 = *(double *)v234 / *(double *)v242;
        uint64_t v103 = 1;
        uint64_t v104 = v259;
        if (!v259) {
          goto LABEL_341;
        }
        goto LABEL_339;
      }
      uint64_t v103 = 0;
      uint64_t v104 = v259;
      if (!v259)
      {
LABEL_341:
        uint64_t v259 = 0;
        long long v256 = 0u;
        long long v257 = 0u;
        if (SDWORD1(v255) >= 1)
        {
          uint64_t v184 = 0;
          unint64_t v185 = v260;
          do
            *(_DWORD *)&v185[4 * v184++] = 0;
          while (v184 < SDWORD1(v255));
        }
        if (v261 != v262) {
          j__free(v261);
        }
        goto LABEL_310;
      }
LABEL_339:
      if (atomic_fetch_add((atomic_uint *volatile)(v104 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v255);
      }
      goto LABEL_341;
    }
  }
  signed int v24 = DWORD2(v241);
  signed int v25 = HIDWORD(v241);
  *(void *)&long long v255 = &v256;
  *((void *)&v255 + 1) = 1032;
  int v26 = (((unsigned __int16)(v241 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v241 & 7))) & 3);
  signed int v27 = HIDWORD(v233);
  uint64_t v190 = v26;
  *(void *)uint64_t v225 = *(void *)((char *)&v233 + 4);
  unint64_t v187 = (v26 * (uint64_t)SHIDWORD(v241) + 15) & 0xFFFFFFFFFFFFFFF0;
  if (a4 == 1) {
    unint64_t v28 = (SDWORD2(v241) * (uint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  else {
    unint64_t v28 = (v26 * (uint64_t)SHIDWORD(v241) + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  int v224 = v233;
  *(_DWORD *)&v225[8] = HIDWORD(v233);
  long long v226 = v234;
  long long v227 = v235;
  uint64_t v228 = v236;
  uint64_t v229 = v237;
  float64x2_t v230 = &v225[4];
  float64x2_t v231 = v232;
  v232[1] = 0;
  v232[0] = 0;
  if (v237)
  {
    atomic_fetch_add((atomic_uint *volatile)(v237 + 20), 1u);
    if (SDWORD1(v233) <= 2)
    {
LABEL_38:
      double v29 = v239;
      double v30 = v231;
      *(void *)float64x2_t v231 = *(void *)v239;
      v30[1] = v29[1];
      goto LABEL_41;
    }
  }
  else if (SDWORD1(v233) <= 2)
  {
    goto LABEL_38;
  }
  *(_DWORD *)uint64_t v225 = 0;
  sub_1002931A8((uint64_t)&v224, (uint64_t)&v233);
LABEL_41:
  sub_10029EDE8(a3, HIDWORD(v241), *(unsigned int *)&v225[8], v241 & 0xFFF, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v31 = *(void *)(a3 + 8);
    long long v32 = *(_OWORD *)(v31 + 16);
    long long v217 = *(_OWORD *)v31;
    long long v218 = v32;
    long long v219 = *(_OWORD *)(v31 + 32);
    uint64_t v33 = *(void *)(v31 + 56);
    *(void *)&long long v220 = *(void *)(v31 + 48);
    *((void *)&v220 + 1) = v33;
    float64x2_t v221 = (char *)&v217 + 8;
    float64x2_t v222 = v223;
    v223[1] = 0;
    v223[0] = 0;
    if (v33) {
      atomic_fetch_add((atomic_uint *volatile)(v33 + 20), 1u);
    }
    if (*(int *)(v31 + 4) > 2)
    {
      DWORD1(v217) = 0;
      sub_1002931A8((uint64_t)&v217, v31);
    }
    else
    {
      uint64_t v34 = *(void **)(v31 + 72);
      uint64_t v35 = v222;
      *(void *)float64x2_t v222 = *v34;
      v35[1] = v34[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)&v217);
  }
  if (v24 < v25)
  {
    long long v210 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v210, 58), "The function can not solve under-determined linear systems", 58);
    sub_1002D2278(-5, (uint64_t *)&v210, "solve", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1250);
  }
  unsigned int v36 = a4 & 0xFFFFFFEF;
  if (v24 == v25)
  {
    int v37 = 0;
LABEL_54:
    int v189 = v24;
    goto LABEL_58;
  }
  if ((a4 & 0x10) == 0)
  {
    int v37 = (a4 >> 4) & 1;
    goto LABEL_54;
  }
  if (v36 == 1) {
    unsigned int v36 = 2;
  }
  int v37 = 1;
  int v189 = v25;
LABEL_58:
  if (v36 == 1) {
    int v38 = 1;
  }
  else {
    int v38 = v37;
  }
  if (v38) {
    signed int v39 = v25;
  }
  else {
    signed int v39 = v24;
  }
  unint64_t v40 = v28 * v39;
  uint64_t v186 = (int)v190 * (uint64_t)(v27 * v25);
  uint64_t v41 = v186 + 32;
  if (!v37) {
    uint64_t v41 = 32;
  }
  unint64_t v42 = v41 + v40;
  if (v36 - 1 <= 1) {
    v42 += 5 * v25 * (uint64_t)(int)v190 + 8 * v27 + v187 * v25 + 32;
  }
  unsigned int v188 = v27;
  if (*((void *)&v255 + 1) >= v42)
  {
    *((void *)&v255 + 1) = v42;
    uint64_t v43 = (long long *)v255;
  }
  else
  {
    uint64_t v43 = &v256;
    if ((long long *)v255 != &v256)
    {
      if ((void)v255) {
        operator delete[]();
      }
      *(void *)&long long v255 = &v256;
    }
    *((void *)&v255 + 1) = v42;
    if (v42 >= 0x409) {
      operator new[]();
    }
  }
  unint64_t v44 = ((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF0;
  sub_10000CE64((uint64_t)&v210, v189, v25, v18, v44, v28);
  if (!v37)
  {
    if (v36 != 1)
    {
      *(_DWORD *)BOOL v205 = 33619968;
      *(void *)&v205[8] = &v210;
      *(void *)&v205[16] = 0;
      sub_10025401C((uint64_t)&v241, (uint64_t)v205);
LABEL_123:
      uint64_t v46 = v44 + v40;
      if (v36 == 3 || !v36)
      {
        *(_DWORD *)BOOL v205 = 33619968;
        *(void *)&v205[8] = &v217;
        *(void *)&v205[16] = 0;
        sub_10025401C((uint64_t)&v224, (uint64_t)v205);
      }
LABEL_126:
      if (v36 != 4) {
        goto LABEL_127;
      }
LABEL_155:
      *(_DWORD *)BOOL v205 = 1124007936;
      memset(&v205[4], 0, 60);
      float64x2_t v206 = &v205[8];
      float64x2_t v207 = v208;
      char v72 = v37 ^ 1;
      if (v24 == v25) {
        char v72 = 0;
      }
      *(void *)float64x2_t v208 = 0;
      uint64_t v209 = 0;
      if ((v72 & 1) == 0)
      {
        *(_DWORD *)unint64_t v194 = 33619968;
        *(void *)&v194[8] = &v217;
        *(void *)&v194[16] = 0;
        sub_10025401C((uint64_t)&v224, (uint64_t)v194);
        if (*((void *)&v220 + 1)) {
          atomic_fetch_add((atomic_uint *volatile)(*((void *)&v220 + 1) + 20), 1u);
        }
        if (*(void *)&v205[56]
          && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v205[56] + 20), 0xFFFFFFFF) == 1)
        {
          sub_1002932F4((uint64_t)v205);
        }
        *(void *)&v205[56] = 0;
        memset(&v205[16], 0, 32);
        if (*(int *)&v205[4] <= 0)
        {
          *(_DWORD *)BOOL v205 = v217;
          int v75 = DWORD1(v217);
          if (SDWORD1(v217) <= 2)
          {
LABEL_168:
            *(_DWORD *)&v205[4] = v75;
            *(void *)&v205[8] = *((void *)&v217 + 1);
            long long v76 = v222;
            int v77 = v207;
            *(void *)float64x2_t v207 = *(void *)v222;
            v77[1] = v76[1];
LABEL_219:
            *(_OWORD *)&v205[16] = v218;
            *(_OWORD *)&v205[32] = v219;
            *(_OWORD *)&v205[48] = v220;
            goto LABEL_225;
          }
        }
        else
        {
          uint64_t v73 = 0;
          long long v74 = v206;
          do
            *(_DWORD *)&v74[4 * v73++] = 0;
          while (v73 < *(int *)&v205[4]);
          *(_DWORD *)BOOL v205 = v217;
          if (*(int *)&v205[4] <= 2)
          {
            int v75 = DWORD1(v217);
            if (SDWORD1(v217) <= 2) {
              goto LABEL_168;
            }
          }
        }
        sub_1002931A8((uint64_t)v205, (uint64_t)&v217);
        goto LABEL_219;
      }
      *(_DWORD *)unint64_t v194 = 1124007936;
      memset(&v194[4], 0, 60);
      uint64_t v195 = &v194[8];
      double v196 = &v197;
      uint64_t v197 = 0;
      uint64_t v198 = 0;
      *(void *)__src = __PAIR64__(v188, v24);
      sub_100292534(v194, 2, (uint64_t *)__src, v18);
      if (*(void *)&v205[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v205[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v205);
      }
      if (*(int *)&v205[4] >= 1)
      {
        uint64_t v78 = 0;
        double v79 = v206;
        do
          *(_DWORD *)&v79[4 * v78++] = 0;
        while (v78 < *(int *)&v205[4]);
      }
      *(_OWORD *)BOOL v205 = *(_OWORD *)v194;
      *(_OWORD *)&v205[16] = *(_OWORD *)&v194[16];
      *(_OWORD *)&v205[32] = *(_OWORD *)&v194[32];
      *(_OWORD *)&v205[48] = *(_OWORD *)&v194[48];
      if (v207 == v208)
      {
        double v80 = (uint64_t *)v196;
        if (*(int *)&v194[4] <= 2) {
          goto LABEL_177;
        }
      }
      else
      {
        j__free(v207);
        float64x2_t v206 = &v205[8];
        float64x2_t v207 = v208;
        double v80 = (uint64_t *)v196;
        if (*(int *)&v194[4] <= 2)
        {
LABEL_177:
          *(void *)float64x2_t v208 = *v80;
          uint64_t v209 = v80[1];
LABEL_222:
          *(_DWORD *)unint64_t v194 = 1124007936;
          memset(&v194[4], 0, 60);
          if (v80 != &v197) {
            j__free(v80);
          }
          *(_DWORD *)unint64_t v194 = 33619968;
          *(void *)&v194[8] = v205;
          *(void *)&v194[16] = 0;
          sub_10025401C((uint64_t)&v224, (uint64_t)v194);
LABEL_225:
          if (v18 == 5) {
            int v130 = sub_1002A99BC((float *)v211, *(unint64_t *)v216, DWORD2(v210), SHIDWORD(v210), *(unsigned int *)&v205[12], *(float **)&v205[16], *(unint64_t *)v208, 0);
          }
          else {
            int v130 = sub_1002AA258((double *)v211, *(unint64_t *)v216, DWORD2(v210), SHIDWORD(v210), *(unsigned int *)&v205[12], *(double **)&v205[16], *(unint64_t *)v208, 0);
          }
          int v131 = v130;
          if (*(_DWORD *)&v205[8] != DWORD2(v217))
          {
            *(_DWORD *)__src = 0;
            *(_DWORD *)&__src[4] = DWORD2(v217);
            uint64_t v202 = 0x7FFFFFFF80000000;
            sub_100293AD0((uint64_t)v194, v205, (int *)__src, &v202);
            *(_DWORD *)__src = 33619968;
            *(void *)&__src[16] = 0;
            *(void *)&__src[8] = &v217;
            sub_10025401C((uint64_t)v194, (uint64_t)__src);
            if (*(void *)&v194[56]
              && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v194[56] + 20), 0xFFFFFFFF) == 1)
            {
              sub_1002932F4((uint64_t)v194);
            }
            *(void *)&v194[56] = 0;
            memset(&v194[16], 0, 32);
            if (*(int *)&v194[4] >= 1)
            {
              uint64_t v132 = 0;
              uint64_t v133 = v195;
              do
                *(_DWORD *)&v133[4 * v132++] = 0;
              while (v132 < *(int *)&v194[4]);
            }
            if (v196 != &v197) {
              j__free(v196);
            }
          }
          if (*(void *)&v205[56]
            && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v205[56] + 20), 0xFFFFFFFF) == 1)
          {
            sub_1002932F4((uint64_t)v205);
          }
          *(void *)&v205[56] = 0;
          memset(&v205[16], 0, 32);
          if (*(int *)&v205[4] >= 1)
          {
            uint64_t v134 = 0;
            uint64_t v135 = v206;
            do
              *(_DWORD *)&v135[4 * v134++] = 0;
            while (v134 < *(int *)&v205[4]);
          }
          if (v207 != v208) {
            j__free(v207);
          }
          if (v131) {
            goto LABEL_281;
          }
LABEL_246:
          memset(v205, 0, 32);
          sub_100255390((uint64_t)&v217, (uint64_t)v205);
          uint64_t v103 = 0;
          uint64_t v136 = *((void *)&v213 + 1);
          if (!*((void *)&v213 + 1)) {
            goto LABEL_284;
          }
LABEL_282:
          if (atomic_fetch_add((atomic_uint *volatile)(v136 + 20), 0xFFFFFFFF) == 1) {
            sub_1002932F4((uint64_t)&v210);
          }
          goto LABEL_284;
        }
      }
      float64x2_t v206 = v195;
      float64x2_t v207 = v80;
      uint64_t v195 = &v194[8];
      double v196 = &v197;
      double v80 = &v197;
      goto LABEL_222;
    }
    sub_10000CE64((uint64_t)v205, v25, v189, v18, v44, v28);
    if (*((void *)&v213 + 1)
      && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v213 + 1) + 20), 0xFFFFFFFF) == 1)
    {
      sub_1002932F4((uint64_t)&v210);
    }
    if (SDWORD1(v210) >= 1)
    {
      uint64_t v49 = 0;
      long long v50 = v214;
      do
        *(_DWORD *)&v50[4 * v49++] = 0;
      while (v49 < SDWORD1(v210));
    }
    long long v210 = *(_OWORD *)v205;
    long long v211 = *(_OWORD *)&v205[16];
    long long v212 = *(_OWORD *)&v205[32];
    long long v213 = *(_OWORD *)&v205[48];
    uint64_t v51 = v215;
    if (v215 == v216)
    {
      uint64_t v52 = v207;
      if (*(int *)&v205[4] <= 2) {
        goto LABEL_96;
      }
    }
    else
    {
      j__free(v215);
      unint64_t v214 = (char *)&v210 + 8;
      float64x2_t v215 = v216;
      uint64_t v51 = v216;
      uint64_t v52 = v207;
      if (*(int *)&v205[4] <= 2)
      {
LABEL_96:
        *uint64_t v51 = *v52;
        v51[1] = v52[1];
LABEL_120:
        *(_DWORD *)BOOL v205 = 1124007936;
        memset(&v205[4], 0, 60);
        if (v207 != v208) {
          j__free(v207);
        }
        *(_DWORD *)BOOL v205 = 16842752;
        *(void *)&v205[8] = &v241;
        *(void *)&v205[16] = 0;
        *(_DWORD *)unint64_t v194 = 33619968;
        *(void *)&v194[8] = &v210;
        *(void *)&v194[16] = 0;
        sub_100298524((uint64_t)v205, (uint64_t)v194);
        goto LABEL_123;
      }
    }
    unint64_t v214 = v206;
    float64x2_t v215 = v52;
    float64x2_t v206 = &v205[8];
    float64x2_t v207 = v208;
    goto LABEL_120;
  }
  *(_DWORD *)BOOL v205 = 16842752;
  *(void *)&v205[8] = &v241;
  *(void *)&v205[16] = 0;
  *(_DWORD *)unint64_t v194 = 33619968;
  *(void *)&v194[8] = &v210;
  *(void *)&v194[16] = 0;
  int v45 = sub_1002A02C4();
  sub_10026EF54((uint64_t)v205, (uint64_t)v194, 1, (uint64_t)v45, -1, 1.0);
  uint64_t v46 = v44 + v40;
  if (v36 == 3 || !v36)
  {
    *(void *)&v194[16] = 0;
    *(_DWORD *)unint64_t v194 = 16842752;
    *(void *)&v194[8] = &v241;
    *(void *)&__src[16] = 0;
    *(_DWORD *)__src = 16842752;
    *(void *)&__src[8] = &v224;
    *(_DWORD *)BOOL v205 = 1124007936;
    memset(&v205[4], 0, 60);
    float64x2_t v206 = &v205[8];
    float64x2_t v207 = v208;
    *(void *)float64x2_t v208 = 0;
    uint64_t v209 = 0;
    uint64_t v204 = 0;
    LODWORD(v202) = 16842752;
    unint64_t v203 = (int *)v205;
    int v199 = 33619968;
    double v200 = &v217;
    uint64_t v201 = 0;
    sub_10026D688((uint64_t)v194, (uint64_t)__src, (uint64_t)&v202, (uint64_t)&v199, 1, 1.0, 0.0);
    if (*(void *)&v205[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v205[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v205);
    }
    *(void *)&v205[56] = 0;
    memset(&v205[16], 0, 32);
    if (*(int *)&v205[4] >= 1)
    {
      uint64_t v47 = 0;
      int v48 = v206;
      do
        *(_DWORD *)&v48[4 * v47++] = 0;
      while (v47 < *(int *)&v205[4]);
    }
    if (v207 != v208) {
      j__free(v207);
    }
    goto LABEL_126;
  }
  sub_10000CE64((uint64_t)v205, v25, v188, v18, v46, 0);
  *(void *)&__src[16] = 0;
  *(_DWORD *)__src = 16842752;
  *(void *)&__src[8] = &v241;
  uint64_t v204 = 0;
  LODWORD(v202) = 16842752;
  unint64_t v203 = &v224;
  *(_DWORD *)unint64_t v194 = 1124007936;
  memset(&v194[4], 0, 60);
  uint64_t v195 = &v194[8];
  double v196 = &v197;
  uint64_t v197 = 0;
  uint64_t v198 = 0;
  uint64_t v201 = 0;
  int v199 = 16842752;
  double v200 = (long long *)v194;
  int v191 = 33619968;
  double v192 = v205;
  uint64_t v193 = 0;
  sub_10026D688((uint64_t)__src, (uint64_t)&v202, (uint64_t)&v199, (uint64_t)&v191, 1, 1.0, 0.0);
  if (*(void *)&v194[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v194[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v194);
  }
  *(void *)&v194[56] = 0;
  memset(&v194[16], 0, 32);
  if (*(int *)&v194[4] >= 1)
  {
    uint64_t v53 = 0;
    uint64_t v54 = v195;
    do
      *(_DWORD *)&v54[4 * v53++] = 0;
    while (v53 < *(int *)&v194[4]);
  }
  if (v196 != &v197) {
    j__free(v196);
  }
  if (*(void *)&v205[56]) {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&v205[56] + 20), 1u);
  }
  if (v229 && atomic_fetch_add((atomic_uint *volatile)(v229 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v224);
  }
  uint64_t v229 = 0;
  long long v226 = 0u;
  long long v227 = 0u;
  if (*(int *)v225 > 0)
  {
    uint64_t v55 = 0;
    int v56 = v230;
    do
      *(_DWORD *)&v56[4 * v55++] = 0;
    while (v55 < *(int *)v225);
    int v224 = *(_DWORD *)v205;
    if (*(int *)v225 <= 2)
    {
      int v57 = *(_DWORD *)&v205[4];
      if (*(int *)&v205[4] <= 2) {
        goto LABEL_116;
      }
    }
LABEL_145:
    sub_1002931A8((uint64_t)&v224, (uint64_t)v205);
    goto LABEL_146;
  }
  int v224 = *(_DWORD *)v205;
  int v57 = *(_DWORD *)&v205[4];
  if (*(int *)&v205[4] > 2) {
    goto LABEL_145;
  }
LABEL_116:
  *(_DWORD *)uint64_t v225 = v57;
  *(void *)&v225[4] = *(void *)&v205[8];
  long long v58 = v207;
  uint64_t v59 = v231;
  *(void *)float64x2_t v231 = *(void *)v207;
  v59[1] = v58[1];
LABEL_146:
  long long v226 = *(_OWORD *)&v205[16];
  long long v227 = *(_OWORD *)&v205[32];
  uint64_t v228 = *(void *)&v205[48];
  uint64_t v229 = *(void *)&v205[56];
  if (*(void *)&v205[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v205[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v205);
  }
  *(void *)&v205[56] = 0;
  memset(&v205[16], 0, 32);
  if (*(int *)&v205[4] >= 1)
  {
    uint64_t v70 = 0;
    uint64_t v71 = v206;
    do
      *(_DWORD *)&v71[4 * v70++] = 0;
    while (v70 < *(int *)&v205[4]);
  }
  if (v207 != v208) {
    j__free(v207);
  }
  v46 += v186;
  if (v36 == 4) {
    goto LABEL_155;
  }
LABEL_127:
  if (v36 == 3)
  {
    if (v18 == 5) {
      BOOL v61 = sub_1002A8E8C((float *)v211, *(unint64_t *)v216, v25, v218, v223[0], v188);
    }
    else {
      BOOL v61 = sub_1002A9454((double *)v211, *(unint64_t *)v216, v25, v218, v223[0], v188);
    }
    if (v61) {
      goto LABEL_281;
    }
    goto LABEL_246;
  }
  if (v36)
  {
    unint64_t v62 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
    sub_10000CE64((uint64_t)v205, v25, v25, v18, v62, v187);
    sub_10000CE64((uint64_t)v194, v25, 1, v18, v62 + v187 * v25, 0);
    *(_DWORD *)__src = 1124007936;
    memset(&__src[4], 0, 60);
    uint64_t v252 = &__src[8];
    unsigned int v253 = v254;
    v254[1] = 0;
    v254[0] = 0;
    uint64_t v67 = v62 + (v187 + v190) * v25;
    if (v36 == 2)
    {
      if (v18 == 5) {
        sub_100269714(v211, *(unint64_t *)v216, *(uint64_t *)&v194[16], *(char **)&v205[16], *(unint64_t *)v208, v25, v67, 0.0, v63, v64, v65, v66);
      }
      else {
        sub_10026A048(v211, *(unint64_t *)v216, *(uint64_t *)&v194[16], *(char **)&v205[16], *(unint64_t *)v208, v25, v67);
      }
      if (*(void *)&v205[56]) {
        atomic_fetch_add((atomic_uint *volatile)(*(void *)&v205[56] + 20), 1u);
      }
      if (*(void *)&__src[56]
        && atomic_fetch_add((atomic_uint *volatile)(*(void *)&__src[56] + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)__src);
      }
      *(void *)&__src[56] = 0;
      memset(&__src[16], 0, 32);
      if (*(uint64_t *)__src <= 0)
      {
        *(_DWORD *)__src = *(_DWORD *)v205;
        int v83 = *(_DWORD *)&v205[4];
        if (*(int *)&v205[4] <= 2)
        {
LABEL_189:
          *(_DWORD *)&__src[4] = v83;
          *(void *)&__src[8] = *(void *)&v205[8];
          long long v84 = v207;
          uint64_t v85 = v253;
          *(void *)unsigned int v253 = *(void *)v207;
          v85[1] = v84[1];
LABEL_250:
          int v137 = *(float **)&v205[16];
          *(void *)&__src[16] = *(void *)&v205[16];
          uint64_t v138 = (long long *)v205;
          goto LABEL_254;
        }
      }
      else
      {
        uint64_t v81 = 0;
        long long v82 = v252;
        do
          *(_DWORD *)&v82[4 * v81++] = 0;
        while (v81 < *(int *)&__src[4]);
        *(_DWORD *)__src = *(_DWORD *)v205;
        if (*(int *)&__src[4] <= 2)
        {
          int v83 = *(_DWORD *)&v205[4];
          if (*(int *)&v205[4] <= 2) {
            goto LABEL_189;
          }
        }
      }
      sub_1002931A8((uint64_t)__src, (uint64_t)v205);
      goto LABEL_250;
    }
    if (v18 == 5) {
      sub_10025FE58((float32x2_t *)v211, *(unint64_t *)v216, *(float32x4_t **)&v194[16], *(uint64_t *)&v205[16], *(uint64_t *)v208, *(float32x4_t **)&v205[16], *(unint64_t *)v208, v189, v25, -1);
    }
    else {
      sub_100261D2C((double *)v211, *(unint64_t *)v216, *(void **)&v194[16], *(int *)&v205[16], v208[0], *(char **)&v205[16], *(unint64_t *)v208, v189, v25, -1);
    }
    if (*((void *)&v213 + 1)) {
      atomic_fetch_add((atomic_uint *volatile)(*((void *)&v213 + 1) + 20), 1u);
    }
    if (*(void *)&__src[56]
      && atomic_fetch_add((atomic_uint *volatile)(*(void *)&__src[56] + 20), 0xFFFFFFFF) == 1)
    {
      sub_1002932F4((uint64_t)__src);
    }
    *(void *)&__src[56] = 0;
    memset(&__src[16], 0, 32);
    if (*(uint64_t *)__src <= 0)
    {
      *(_DWORD *)__src = v210;
      int v88 = DWORD1(v210);
      if (SDWORD1(v210) <= 2)
      {
LABEL_201:
        *(_DWORD *)&__src[4] = v88;
        *(void *)&__src[8] = *((void *)&v210 + 1);
        uint64_t v89 = v215;
        long long v90 = v253;
        *(void *)unsigned int v253 = *(void *)v215;
        v90[1] = v89[1];
LABEL_253:
        int v137 = (float *)v211;
        *(void *)&__src[16] = v211;
        uint64_t v138 = &v210;
LABEL_254:
        *(_OWORD *)&__src[24] = *(long long *)((char *)v138 + 24);
        long long v139 = *(long long *)((char *)v138 + 40);
        *(_OWORD *)&__src[40] = v139;
        *(void *)&__src[56] = *((void *)v138 + 7);
        if (v18 == 5)
        {
          sub_100267938(v189, v25, *(float32x4_t **)&v194[16], 0, v137, v254[0], 1, *(uint64_t *)&v205[16], *(uint64_t *)v208, v226, v232[0], v188, (float *)v218, v223[0], v67);
          uint64_t v140 = *(void *)&__src[56];
          if (!*(void *)&__src[56]) {
            goto LABEL_260;
          }
        }
        else
        {
          sub_1002683B4(v189, v25, *(uint64_t *)&v194[16], 0, (double *)v137, v254[0], 1, *(uint64_t *)&v205[16], *(double *)&v139, v68, v69, *(uint64_t *)v208, v226, v232[0], v188, (double *)v218, v223[0], v67);
          uint64_t v140 = *(void *)&__src[56];
          if (!*(void *)&__src[56])
          {
LABEL_260:
            *(void *)&__src[56] = 0;
            memset(&__src[16], 0, 32);
            if (*(int *)&__src[4] >= 1)
            {
              uint64_t v141 = 0;
              long long v142 = v252;
              do
                *(_DWORD *)&v142[4 * v141++] = 0;
              while (v141 < *(int *)&__src[4]);
            }
            if (v253 != v254) {
              j__free(v253);
            }
            if (*(void *)&v194[56]
              && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v194[56] + 20), 0xFFFFFFFF) == 1)
            {
              sub_1002932F4((uint64_t)v194);
            }
            *(void *)&v194[56] = 0;
            memset(&v194[16], 0, 32);
            if (*(int *)&v194[4] >= 1)
            {
              uint64_t v143 = 0;
              uint64_t v144 = v195;
              do
                *(_DWORD *)&v144[4 * v143++] = 0;
              while (v143 < *(int *)&v194[4]);
            }
            if (v196 != &v197) {
              j__free(v196);
            }
            if (*(void *)&v205[56]
              && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v205[56] + 20), 0xFFFFFFFF) == 1)
            {
              sub_1002932F4((uint64_t)v205);
            }
            *(void *)&v205[56] = 0;
            memset(&v205[16], 0, 32);
            if (*(int *)&v205[4] >= 1)
            {
              uint64_t v145 = 0;
              float32x4_t v146 = v206;
              do
                *(_DWORD *)&v146[4 * v145++] = 0;
              while (v145 < *(int *)&v205[4]);
            }
            if (v207 != v208) {
              j__free(v207);
            }
            goto LABEL_281;
          }
        }
        if (atomic_fetch_add((atomic_uint *volatile)(v140 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)__src);
        }
        goto LABEL_260;
      }
    }
    else
    {
      uint64_t v86 = 0;
      float v87 = v252;
      do
        *(_DWORD *)&v87[4 * v86++] = 0;
      while (v86 < *(int *)&__src[4]);
      *(_DWORD *)__src = v210;
      if (*(int *)&__src[4] <= 2)
      {
        int v88 = DWORD1(v210);
        if (SDWORD1(v210) <= 2) {
          goto LABEL_201;
        }
      }
    }
    sub_1002931A8((uint64_t)__src, (uint64_t)&v210);
    goto LABEL_253;
  }
  if (v18 == 5) {
    int v60 = sub_1002A7E34(v211, *(unint64_t *)v216, v25, (__n128 *)v218, v223[0], v188);
  }
  else {
    int v60 = sub_1002A8660(v211, *(unint64_t *)v216, v25, v218, v223[0], v188);
  }
  if (!v60) {
    goto LABEL_246;
  }
LABEL_281:
  uint64_t v103 = 1;
  uint64_t v136 = *((void *)&v213 + 1);
  if (*((void *)&v213 + 1)) {
    goto LABEL_282;
  }
LABEL_284:
  *((void *)&v213 + 1) = 0;
  long long v211 = 0u;
  long long v212 = 0u;
  if (SDWORD1(v210) >= 1)
  {
    uint64_t v147 = 0;
    int v148 = v214;
    do
      *(_DWORD *)&v148[4 * v147++] = 0;
    while (v147 < SDWORD1(v210));
  }
  if (v215 != v216) {
    j__free(v215);
  }
  if (*((void *)&v220 + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v220 + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)&v217);
  }
  *((void *)&v220 + 1) = 0;
  long long v218 = 0u;
  long long v219 = 0u;
  if (SDWORD1(v217) >= 1)
  {
    uint64_t v149 = 0;
    long long v150 = v221;
    do
      *(_DWORD *)&v150[4 * v149++] = 0;
    while (v149 < SDWORD1(v217));
  }
  if (v222 != v223) {
    j__free(v222);
  }
  if (v229 && atomic_fetch_add((atomic_uint *volatile)(v229 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v224);
  }
  uint64_t v229 = 0;
  long long v226 = 0u;
  long long v227 = 0u;
  if (*(int *)v225 >= 1)
  {
    uint64_t v151 = 0;
    uint64_t v152 = v230;
    do
      *(_DWORD *)&v152[4 * v151++] = 0;
    while (v151 < *(int *)v225);
  }
  if (v231 != v232) {
    j__free(v231);
  }
  if ((long long *)v255 != &v256 && (void)v255 != 0) {
    operator delete[]();
  }
LABEL_310:
  if (v237 && atomic_fetch_add((atomic_uint *volatile)(v237 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v233);
  }
  uint64_t v237 = 0;
  long long v234 = 0u;
  long long v235 = 0u;
  if (SDWORD1(v233) >= 1)
  {
    uint64_t v154 = 0;
    long long v155 = v238;
    do
      *(_DWORD *)&v155[4 * v154++] = 0;
    while (v154 < SDWORD1(v233));
  }
  if (v239 != v240) {
    j__free(v239);
  }
  if (v245 && atomic_fetch_add((atomic_uint *volatile)(v245 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v241);
  }
  uint64_t v245 = 0;
  long long v242 = 0u;
  long long v243 = 0u;
  if (SDWORD1(v241) >= 1)
  {
    uint64_t v156 = 0;
    long long v157 = v246;
    do
      *(_DWORD *)&v157[4 * v156++] = 0;
    while (v156 < SDWORD1(v241));
  }
  if (v247 != v248) {
    j__free(v247);
  }
  if (v250) {
    sub_1002D6888(v249);
  }
  return v103;
}

void sub_10026774C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10000B6A8(a1);
  }
  _Unwind_Resume(a1);
}

float *sub_100267938(unsigned int a1, int a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, float *a13, unint64_t a14, uint64_t a15)
{
  unint64_t v192 = a14 >> 2;
  if (a2 >= (int)a1) {
    uint64_t v20 = a1;
  }
  else {
    uint64_t v20 = a2;
  }
  uint64_t v177 = v20;
  if (a10) {
    unint64_t v21 = a12;
  }
  else {
    unint64_t v21 = a1;
  }
  if (a2 >= 1 && (int)v21 >= 1)
  {
    uint64_t v22 = a13;
    uint64_t v23 = a2;
    do
    {
      bzero(v22, 4 * v21);
      v22 += (int)v192;
      --v23;
    }
    while (v23);
  }
  uint64_t v24 = v177;
  uint64_t v25 = a10;
  signed int v27 = a3;
  uint64_t result = a13;
  if ((int)v177 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = (int)(a6 >> 2);
    if (a4) {
      uint64_t v30 = (int)(a4 >> 2);
    }
    else {
      uint64_t v30 = 1;
    }
    double v31 = 0.0;
    if (v177 < 8) {
      goto LABEL_20;
    }
    if (v30 != 1) {
      goto LABEL_20;
    }
    uint64_t v28 = v177 & 0xFFFFFFF8;
    long long v32 = a3 + 1;
    uint64_t v33 = v28;
    do
    {
      float32x4_t v34 = v32[-1];
      float64x2_t v35 = vcvt_hight_f64_f32(v34);
      float64x2_t v36 = vcvtq_f64_f32(*(float32x2_t *)v34.f32);
      float64x2_t v37 = vcvt_hight_f64_f32(*v32);
      float64x2_t v38 = vcvtq_f64_f32(*(float32x2_t *)v32->f32);
      double v31 = v31 + v36.f64[0] + v36.f64[1] + v35.f64[0] + v35.f64[1] + v38.f64[0] + v38.f64[1] + v37.f64[0] + v37.f64[1];
      v32 += 2;
      v33 -= 8;
    }
    while (v33);
    if (v28 != v177)
    {
LABEL_20:
      uint64_t v39 = v177 - v28;
      unint64_t v40 = &a3->f32[v30 * v28];
      do
      {
        double v31 = v31 + *v40;
        v40 += v30;
        --v39;
      }
      while (v39);
    }
    uint64_t v41 = (int)(a11 >> 2);
    double v42 = v31 * 4.4408921e-16;
    unsigned int v43 = a1;
    if (a7) {
      uint64_t v44 = 1;
    }
    else {
      uint64_t v44 = (int)(a6 >> 2);
    }
    if (!a7) {
      uint64_t v29 = 1;
    }
    uint64_t v45 = 4 * v29;
    uint64_t v46 = 4 * v41;
    uint64_t v47 = 4 * v44;
    uint64_t v48 = 4 * (int)(a9 >> 2);
    uint64_t v49 = 4 * (int)v192;
    uint64_t v50 = a2;
    if (v21 == 1)
    {
      uint64_t v51 = 0;
      BOOL v54 = v44 != 1 || v41 != 1 || a1 < 8;
      while (1)
      {
        double v55 = a3->f32[v51 * v30];
        if (fabs(v55) > v42) {
          break;
        }
LABEL_37:
        ++v51;
        a5 = (float *)((char *)a5 + v45);
        a8 += v48;
        if (v51 == v177) {
          return result;
        }
      }
      if (a10)
      {
        if (v54)
        {
          uint64_t v56 = 0;
          double v57 = 0.0;
        }
        else
        {
          unint64_t v58 = 0;
          double v57 = 0.0;
          do
          {
            float32x4_t v59 = vmulq_f32(*(float32x4_t *)&a5[v58 / 4], *(float32x4_t *)(a10 + v58));
            float32x4_t v60 = vmulq_f32(*(float32x4_t *)&a5[v58 / 4 + 4], *(float32x4_t *)(a10 + v58 + 16));
            float64x2_t v61 = vcvt_hight_f64_f32(v59);
            float64x2_t v62 = vcvtq_f64_f32(*(float32x2_t *)v59.f32);
            float64x2_t v63 = vcvt_hight_f64_f32(v60);
            float64x2_t v64 = vcvtq_f64_f32(*(float32x2_t *)v60.f32);
            double v57 = v57
                + v62.f64[0]
                + v62.f64[1]
                + v61.f64[0]
                + v61.f64[1]
                + v64.f64[0]
                + v64.f64[1]
                + v63.f64[0]
                + v63.f64[1];
            v58 += 32;
          }
          while (((4 * a1) & 0x3FFFFFFE0) != v58);
          uint64_t v56 = a1 & 0xFFFFFFF8;
          if (v56 == a1) {
            goto LABEL_48;
          }
        }
        uint64_t v65 = a1 - v56;
        double v66 = (float *)(a10 + v46 * v56);
        uint64_t v67 = v47 * v56;
        do
        {
          double v57 = v57 + (float)(*(float *)((char *)a5 + v67) * *v66);
          double v66 = (float *)((char *)v66 + v46);
          v67 += v47;
          --v65;
        }
        while (v65);
      }
      else
      {
        double v57 = *a5;
      }
LABEL_48:
      uint64_t v68 = 0;
      double v69 = 1.0 / v55 * v57;
      uint64_t v70 = a13;
      do
      {
        float v71 = *v70 + v69 * *(float *)(a8 + 4 * v68);
        float *v70 = v71;
        ++v68;
        uint64_t v70 = (float *)((char *)v70 + v49);
      }
      while (a2 != v68);
      goto LABEL_37;
    }
    uint64_t v72 = 0;
    uint64_t v73 = (double *)((a15 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v74 = (v21 - 4);
    uint64_t v75 = (v74 & 0xFFFFFFFC) + 4;
    unint64_t v76 = (v74 & 0xFFFFFFFC) + 5;
    if (v76 <= v21) {
      unint64_t v76 = v21;
    }
    unint64_t v77 = v76 - (v74 & 0xFFFFFFFC) - 4;
    unint64_t v78 = v74 >> 2;
    uint64_t v79 = (v74 >> 2) + 1;
    uint64_t v187 = v79 & 0x7FFFFFFC;
    unint64_t v185 = v77 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v180 = v75 + (v77 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v184 = v76 & 3;
    uint64_t v189 = v79;
    uint64_t v191 = v79 & 0x7FFFFFFE;
    unint64_t v183 = v77 - v184;
    unint64_t v182 = v75 + v77 - v184;
    BOOL v81 = v43 < 8 || v44 != 1;
    BOOL v170 = v81;
    uint64_t v193 = v73 + 2;
    uint64_t v82 = 4 * v78;
    uint64_t v83 = 16 * v78 + a10 + 32;
    long long v84 = &v73[4 * v78];
    double v179 = (float64x2_t *)(v84 + 8);
    uint64_t v168 = v83;
    uint64_t v186 = (float32x4_t *)(a5 + 4);
    double v181 = (float64x2_t *)(v84 + 6);
    uint64_t v171 = (uint64_t)&a13[v82 + 6];
    uint64_t v174 = v43;
    uint64_t v175 = v30;
    uint64_t v173 = v45;
    uint64_t v169 = v44;
    unint64_t v172 = v77;
    do
    {
      double v85 = v27->f32[v72 * v30];
      if (fabs(v85) > v42)
      {
        double v86 = 1.0 / v85;
        if (v25)
        {
          if ((int)v21 > 0)
          {
            double v176 = 1.0 / v85;
            bzero(v73, 8 * v21);
            if ((int)v21 < 4)
            {
              double v87 = *v73;
              int v88 = (float *)(a10 + 8);
              uint64_t v89 = a5;
              uint64_t v90 = v174;
              uint64_t v30 = v175;
              signed int v27 = a3;
              uint64_t result = a13;
              uint64_t v24 = v177;
              uint64_t v48 = 4 * (int)(a9 >> 2);
              uint64_t v45 = v173;
              unint64_t v77 = v172;
              uint64_t v75 = (v74 & 0xFFFFFFFC) + 4;
              double v91 = v176;
              do
              {
                float v92 = *v89;
                float v93 = *(v88 - 2);
                v73[1] = v73[1] + (float)(*v89 * *(v88 - 1));
                if (v21 != 2) {
                  uint64_t v73[2] = v73[2] + (float)(v92 * *v88);
                }
                double v87 = v87 + (float)(v92 * v93);
                uint64_t v89 = (float *)((char *)v89 + v47);
                int v88 = (float *)((char *)v88 + v46);
                --v90;
              }
              while (v90);
              *uint64_t v73 = v87;
              uint64_t v25 = a10;
LABEL_89:
              if (v21 >= 4)
              {
                uint64_t v122 = v21 & 0xFFFFFFFC;
                double v123 = (float64x2_t *)(v73 + 2);
                do
                {
                  float64x2_t v124 = vmulq_n_f64(*v123, v91);
                  v123[-1] = vmulq_n_f64(v123[-1], v91);
                  float64x2_t *v123 = v124;
                  v123 += 2;
                  v122 -= 4;
                }
                while (v122);
                uint64_t v121 = v21 & 0xFFFFFFFC;
                if (v121 == v21) {
                  goto LABEL_102;
                }
              }
              else
              {
                uint64_t v121 = 0;
              }
              uint64_t v125 = v21 - v121;
              float v126 = &v73[v121];
              do
              {
                *float v126 = v91 * *v126;
                ++v126;
                --v125;
              }
              while (v125);
              goto LABEL_102;
            }
            uint64_t v95 = 0;
            double v96 = (float32x4_t *)v168;
            uint64_t v25 = a10;
            signed int v27 = a3;
            double v97 = (const float *)a10;
            uint64_t result = a13;
            uint64_t v24 = v177;
            uint64_t v30 = v175;
            uint64_t v48 = 4 * (int)(a9 >> 2);
            uint64_t v45 = v173;
            unint64_t v77 = v172;
            uint64_t v75 = (v74 & 0xFFFFFFFC) + 4;
            double v91 = v176;
            while (2)
            {
              float v98 = a5[v95 * v169];
              if (v74 < 0xC)
              {
                unint64_t v99 = 0;
                goto LABEL_79;
              }
              uint64_t v100 = v187;
              float v101 = v97;
              float v102 = (double *)((a15 + 7) & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v103 = v102;
                float64x2x4_t v196 = vld4q_f64(v103);
                v103 += 8;
                float64x2x4_t v197 = vld4q_f64(v103);
                float32x4x4_t v199 = vld4q_f32(v101);
                v101 += 16;
                float32x4_t v104 = vmulq_n_f32(v199.val[0], v98);
                float64x2_t v105 = vcvtq_f64_f32(*(float32x2_t *)v104.f32);
                v200.val[0] = vaddq_f64(v197.val[0], vcvt_hight_f64_f32(v104));
                float32x4_t v106 = vmulq_n_f32(v199.val[1], v98);
                v200.val[1] = vaddq_f64(v197.val[1], vcvt_hight_f64_f32(v106));
                float32x4_t v107 = vmulq_n_f32(v199.val[2], v98);
                v200.val[2] = vaddq_f64(v197.val[2], vcvt_hight_f64_f32(v107));
                v199.val[0] = vmulq_n_f32(v199.val[3], v98);
                v200.val[3] = vaddq_f64(v197.val[3], vcvt_hight_f64_f32(v199.val[0]));
                v197.val[0] = vaddq_f64(v196.val[0], v105);
                v197.val[1] = vaddq_f64(v196.val[1], vcvtq_f64_f32(*(float32x2_t *)v106.f32));
                v197.val[2] = vaddq_f64(v196.val[2], vcvtq_f64_f32(*(float32x2_t *)v107.f32));
                v197.val[3] = vaddq_f64(v196.val[3], vcvtq_f64_f32(*(float32x2_t *)v199.val[0].f32));
                vst4q_f64(v102, v197);
                vst4q_f64(v103, v200);
                v102 += 16;
                v100 -= 4;
              }
              while (v100);
              unint64_t v99 = 4 * v187;
              if (v189 != v187)
              {
LABEL_79:
                float v108 = &v193[v99];
                uint64_t v109 = 4 * v99 + 8;
                do
                {
                  double v110 = *(v108 - 1) + (float)(v98 * v97[v99 + 1]);
                  *(v108 - 2) = *(v108 - 2) + (float)(v98 * *(const float *)((char *)v97 + v109 - 8));
                  *(v108 - 1) = v110;
                  double v111 = v108[1] + (float)(v98 * *(const float *)((char *)v97 + v109 + 4));
                  *float v108 = *v108 + (float)(v98 * *(const float *)((char *)v97 + v109));
                  v108[1] = v111;
                  v108 += 4;
                  v99 += 4;
                  v109 += 16;
                }
                while (v99 <= v74);
              }
              if ((int)v21 > (int)v99)
              {
                unint64_t v112 = (v74 & 0xFFFFFFFC) + 4;
                if (v172 < 8) {
                  goto LABEL_125;
                }
                double v113 = v179;
                double v114 = v96;
                unint64_t v115 = v185;
                do
                {
                  float32x4_t v116 = vmulq_n_f32(v114[-1], v98);
                  float32x4_t v117 = vmulq_n_f32(*v114, v98);
                  float64x2_t v118 = vaddq_f64(v113[-1], vcvt_hight_f64_f32(v116));
                  float64x2_t v119 = vaddq_f64(*v113, vcvtq_f64_f32(*(float32x2_t *)v117.f32));
                  float64x2_t v120 = vaddq_f64(v113[1], vcvt_hight_f64_f32(v117));
                  v113[-2] = vaddq_f64(v113[-2], vcvtq_f64_f32(*(float32x2_t *)v116.f32));
                  v113[-1] = v118;
                  *double v113 = v119;
                  v113[1] = v120;
                  v113 += 4;
                  v114 += 2;
                  v115 -= 8;
                }
                while (v115);
                unint64_t v112 = v180;
                if (v172 != v185)
                {
LABEL_125:
                  do
                  {
                    v73[v112] = v73[v112] + (float)(v98 * v97[v112]);
                    ++v112;
                  }
                  while (v112 < v21);
                }
              }
              ++v95;
              double v97 = (const float *)((char *)v97 + v46);
              double v96 = (float32x4_t *)((char *)v96 + v46);
              if (v95 == v174) {
                goto LABEL_89;
              }
              continue;
            }
          }
        }
        else if ((int)v21 >= 1)
        {
          if (v170)
          {
            uint64_t v94 = 0;
            goto LABEL_100;
          }
          uint64_t v127 = v21 & 0xFFFFFFF8;
          float v128 = (float64x2_t *)(v73 + 4);
          float v129 = v186;
          do
          {
            float32x4_t v130 = v129[-1];
            float64x2_t v131 = vcvt_hight_f64_f32(*v129);
            float64x2_t v132 = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v129->f32), v86);
            v128[-2] = vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v130.f32), v86);
            v128[-1] = vmulq_n_f64(vcvt_hight_f64_f32(v130), v86);
            *float v128 = v132;
            v128[1] = vmulq_n_f64(v131, v86);
            v128 += 4;
            v129 += 2;
            v127 -= 8;
          }
          while (v127);
          uint64_t v94 = v21 & 0xFFFFFFF8;
          if (v94 != v21)
          {
LABEL_100:
            uint64_t v133 = v21 - v94;
            uint64_t v134 = &v73[v94];
            uint64_t v135 = v47 * v94;
            do
            {
              *v134++ = v86 * *(float *)((char *)a5 + v135);
              v135 += v47;
              --v133;
            }
            while (v133);
          }
LABEL_102:
          if ((int)v21 < 4)
          {
            uint64_t v136 = 0;
            double v137 = *v73;
            uint64_t v138 = a13 + 2;
            do
            {
              double v139 = *(float *)(a8 + 4 * v136);
              float v140 = *(v138 - 2) + v139 * v137;
              float v141 = *(v138 - 1) + v139 * v73[1];
              *(v138 - 2) = v140;
              *(v138 - 1) = v141;
              if (v21 != 2)
              {
                float v142 = *v138 + v139 * v73[2];
                float *v138 = v142;
              }
              ++v136;
              uint64_t v138 = (float *)((char *)v138 + v49);
            }
            while (v50 != v136);
            goto LABEL_60;
          }
          uint64_t v143 = 0;
          uint64_t v144 = (float32x2_t *)v171;
          uint64_t v145 = result;
          while (2)
          {
            *(double *)&uint64_t v146 = *(float *)(a8 + 4 * v143);
            if (v74 < 4)
            {
              unint64_t v147 = 0;
              goto LABEL_114;
            }
            float64x2_t v148 = (float64x2_t)vdupq_lane_s64(v146, 0);
            uint64_t v149 = v191;
            long long v150 = (const double *)((a15 + 7) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v151 = v145;
            do
            {
              float32x2x4_t v194 = vld4_f32(v151);
              float64x2x4_t v198 = vld4q_f64(v150);
              v150 += 8;
              v195.val[0] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v194.val[0]), v198.val[0], v148));
              v195.val[1] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v194.val[1]), v198.val[1], v148));
              v195.val[2] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v194.val[2]), v198.val[2], v148));
              v195.val[3] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v194.val[3]), v198.val[3], v148));
              vst4_f32(v151, v195);
              v151 += 8;
              v149 -= 2;
            }
            while (v149);
            unint64_t v147 = 4 * v191;
            if (v189 != v191)
            {
LABEL_114:
              uint64_t v152 = 4 * v147 + 12;
              uint64_t v153 = &v193[v147];
              do
              {
                uint64_t v154 = (float *)((char *)v145 + v152);
                float v155 = *(float *)((char *)v145 + v152 - 12) + *(double *)&v146 * *(v153 - 2);
                uint64_t v156 = &v145[v147];
                float v157 = v156[1] + *(double *)&v146 * *(v153 - 1);
                *(v154 - 3) = v155;
                v156[1] = v157;
                double v158 = *v153;
                double v159 = v153[1];
                v153 += 4;
                float v160 = v156[2] + *(double *)&v146 * v158;
                *(float *)&double v158 = *(float *)((char *)v145 + v152) + *(double *)&v146 * v159;
                v156[2] = v160;
                *uint64_t v154 = *(float *)&v158;
                v147 += 4;
                v152 += 16;
              }
              while (v147 <= v74);
            }
            if ((int)v21 > (int)v147)
            {
              unint64_t v161 = v75;
              if (v77 < 4) {
                goto LABEL_126;
              }
              float64x2_t v162 = (float64x2_t)vdupq_lane_s64(v146, 0);
              double v163 = v144;
              double v164 = v181;
              unint64_t v165 = v183;
              do
              {
                float32x2_t v166 = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*v163), *v164, v162));
                v163[-1] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(v163[-1]), v164[-1], v162));
                *double v163 = v166;
                v164 += 2;
                v163 += 2;
                v165 -= 4;
              }
              while (v165);
              unint64_t v161 = v182;
              if (v184)
              {
LABEL_126:
                do
                {
                  float v167 = v145[v161] + *(double *)&v146 * v73[v161];
                  v145[v161++] = v167;
                }
                while (v161 < v21);
              }
            }
            ++v143;
            uint64_t v145 = (float *)((char *)v145 + v49);
            uint64_t v144 = (float32x2_t *)((char *)v144 + v49);
            if (v143 == v50) {
              break;
            }
            continue;
          }
        }
      }
LABEL_60:
      ++v72;
      a5 = (float *)((char *)a5 + v45);
      a8 += v48;
      uint64_t v186 = (float32x4_t *)((char *)v186 + v45);
    }
    while (v72 != v24);
  }
  return result;
}

void sub_1002683B4(unsigned int a1, int a2, uint64_t a3, uint64_t a4, double *a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, __n128 a11, uint64_t a12, unint64_t a13, uint64_t a14, unsigned int a15, double *a16, unint64_t a17, uint64_t a18)
{
  unint64_t v22 = a17 >> 3;
  if (a2 >= (int)a1) {
    uint64_t v23 = a1;
  }
  else {
    uint64_t v23 = a2;
  }
  uint64_t v160 = v23;
  if (a13) {
    unint64_t v24 = a15;
  }
  else {
    unint64_t v24 = a1;
  }
  if (a2 >= 1 && (int)v24 >= 1)
  {
    uint64_t v25 = a16;
    uint64_t v26 = a2;
    do
    {
      bzero(v25, 8 * v24);
      v25 += (int)v22;
      --v26;
    }
    while (v26);
  }
  uint64_t v28 = v160;
  uint64_t v27 = a3;
  uint64_t v29 = a16;
  unint64_t v30 = a13;
  if ((int)v160 < 1) {
    return;
  }
  uint64_t v31 = 0;
  uint64_t v32 = (int)(a6 >> 3);
  if (a4) {
    uint64_t v33 = (int)(a4 >> 3);
  }
  else {
    uint64_t v33 = 1;
  }
  double v34 = 0.0;
  if (v160 == 1)
  {
    unsigned int v35 = a1;
    int v36 = a7;
  }
  else
  {
    unsigned int v35 = a1;
    int v36 = a7;
    if (v33 == 1)
    {
      uint64_t v31 = v160 & 0xFFFFFFFE;
      float64x2_t v37 = (double *)(a3 + 8);
      uint64_t v38 = v31;
      do
      {
        double v34 = v34 + *(v37 - 1) + *v37;
        v37 += 2;
        v38 -= 2;
      }
      while (v38);
      if (v31 == v160) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v39 = v160 - v31;
  unint64_t v40 = (double *)(a3 + 8 * v33 * v31);
  do
  {
    double v34 = v34 + *v40;
    v40 += v33;
    --v39;
  }
  while (v39);
LABEL_24:
  uint64_t v41 = (int)(a14 >> 3);
  double v42 = v34 * 4.4408921e-16;
  uint64_t v43 = v35;
  if (v36) {
    uint64_t v44 = 1;
  }
  else {
    uint64_t v44 = (int)(a6 >> 3);
  }
  if (!v36) {
    uint64_t v32 = 1;
  }
  uint64_t v45 = (int)(a12 >> 3);
  uint64_t v46 = a2;
  if (v24 != 1)
  {
    uint64_t v68 = 0;
    double v69 = (double *)((a18 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v70 = (v24 - 4);
    uint64_t v71 = (v70 & 0xFFFFFFFC) + 4;
    uint64_t v72 = ((8 * v70) & 0x7FFFFFFE0) + 32;
    uint64_t v175 = 8 * (int)v22;
    unint64_t v73 = (v70 & 0xFFFFFFFC) + 5;
    if (v73 <= v24) {
      unint64_t v73 = v24;
    }
    float v167 = (char *)v69 + v72;
    uint64_t v168 = v73;
    uint64_t v169 = &v69[v73];
    uint64_t v171 = 32 * (v70 >> 2) + 32;
    unint64_t v172 = (char *)v69 + v171;
    uint64_t v165 = 8 * v32;
    uint64_t v74 = 8 * v41;
    uint64_t v170 = (v70 >> 2) + 1;
    uint64_t v166 = v170 & 0x7FFFFFFE;
    unint64_t v173 = v73 - (v70 & 0xFFFFFFFC) - 4;
    unint64_t v164 = v73 & 3;
    unint64_t v163 = v71 + v173 - v164;
    uint64_t v157 = v24 & 0xFFFFFFFC;
    BOOL v76 = v35 < 4 || v44 != 1;
    char v154 = v76;
    unint64_t v77 = v69 + 6;
    uint64_t v177 = 8 * v44;
    uint64_t v179 = 8 * (int)v22;
    unint64_t v78 = v69 + 4;
    uint64_t v162 = 8 * v45;
    uint64_t v79 = a5;
    uint64_t v155 = v35;
    uint64_t v156 = v33;
    uint64_t v153 = v44;
    while (1)
    {
      double v80 = *(double *)(v27 + 8 * v68 * v33);
      if (fabs(v80) > v42)
      {
        a11.n128_f64[0] = 1.0 / v80;
        if (v30)
        {
          if ((int)v24 > 0)
          {
            __n128 v158 = a11;
            uint64_t v159 = v68;
            bzero(v69, 8 * v24);
            if ((int)v24 < 4)
            {
              double v81 = *v69;
              uint64_t v82 = (double *)(a13 + 16);
              uint64_t v83 = v79;
              uint64_t v84 = v155;
              uint64_t v33 = v156;
              uint64_t v27 = a3;
              uint64_t v29 = a16;
              unint64_t v30 = a13;
              uint64_t v28 = v160;
              uint64_t v68 = v159;
              uint64_t v72 = ((8 * v70) & 0x7FFFFFFE0) + 32;
              uint64_t v71 = (v70 & 0xFFFFFFFC) + 4;
              do
              {
                double v85 = *v83;
                double v81 = v81 + *v83 * *(v82 - 2);
                double *v69 = v81;
                v69[1] = v69[1] + v85 * *(v82 - 1);
                if (v24 != 2) {
                  void v69[2] = v69[2] + v85 * *v82;
                }
                uint64_t v83 = (double *)((char *)v83 + v177);
                uint64_t v82 = (double *)((char *)v82 + v74);
                --v84;
              }
              while (v84);
LABEL_100:
              if (v24 >= 4)
              {
                uint64_t v110 = v24 & 0xFFFFFFFC;
                double v111 = (float64x2_t *)(v69 + 2);
                a11 = v158;
                do
                {
                  float64x2_t v112 = vmulq_n_f64(*v111, v158.n128_f64[0]);
                  v111[-1] = vmulq_n_f64(v111[-1], v158.n128_f64[0]);
                  float64x2_t *v111 = v112;
                  v111 += 2;
                  v110 -= 4;
                }
                while (v110);
                uint64_t v109 = v24 & 0xFFFFFFFC;
                if (v157 == v24) {
                  goto LABEL_113;
                }
              }
              else
              {
                uint64_t v109 = 0;
                a11 = v158;
              }
              uint64_t v113 = v24 - v109;
              double v114 = &v69[v109];
              do
              {
                *double v114 = a11.n128_f64[0] * *v114;
                ++v114;
                --v113;
              }
              while (v113);
              goto LABEL_113;
            }
            uint64_t v88 = 0;
            unint64_t v30 = a13;
            uint64_t v28 = v160;
            unint64_t v89 = a13;
            uint64_t v27 = a3;
            uint64_t v29 = a16;
            uint64_t v33 = v156;
            uint64_t v68 = v159;
            uint64_t v72 = ((8 * v70) & 0x7FFFFFFE0) + 32;
            uint64_t v71 = (v70 & 0xFFFFFFFC) + 4;
            while (2)
            {
              uint64_t v90 = v74 * v88;
              uint64_t v91 = *(uint64_t *)&v79[v88 * v153];
              if (v70 < 4
                || (a13 + v171 + v90 > (unint64_t)v69 ? (BOOL v92 = v89 >= (unint64_t)v172) : (BOOL v92 = 1), !v92))
              {
                unint64_t v98 = 0;
                goto LABEL_89;
              }
              uint64_t v93 = 0;
              float64x2_t v94 = (float64x2_t)vdupq_lane_s64(v91, 0);
              uint64_t v95 = v170 & 0x7FFFFFFE;
              do
              {
                double v96 = &v69[v93];
                float64x2x4_t v180 = vld4q_f64(v96);
                double v97 = (const double *)(v89 + v93 * 8);
                float64x2x4_t v182 = vld4q_f64(v97);
                v180.val[0] = vmlaq_f64(v180.val[0], v182.val[0], v94);
                v180.val[1] = vmlaq_f64(v180.val[1], v182.val[1], v94);
                v180.val[2] = vmlaq_f64(v180.val[2], v182.val[2], v94);
                v180.val[3] = vmlaq_f64(v180.val[3], v182.val[3], v94);
                vst4q_f64(v96, v180);
                v93 += 8;
                v95 -= 2;
              }
              while (v95);
              unint64_t v98 = 4 * (v170 & 0x7FFFFFFE);
              if (v170 != v166)
              {
LABEL_89:
                uint64_t v99 = 8 * v98 + 16;
                do
                {
                  uint64_t v100 = (double *)((char *)v69 + v99);
                  double v101 = *(double *)((char *)v69 + v99 - 8) + *(double *)&v91 * *(double *)(v89 + 8 * v98 + 8);
                  *(v100 - 2) = *(double *)((char *)v69 + v99 - 16) + *(double *)&v91 * *(double *)(v89 + v99 - 16);
                  *(v100 - 1) = v101;
                  double v102 = *(double *)((char *)v69 + v99 + 8) + *(double *)&v91 * *(double *)(v89 + v99 + 8);
                  double *v100 = *(double *)((char *)v69 + v99) + *(double *)&v91 * *(double *)(v89 + v99);
                  v100[1] = v102;
                  v98 += 4;
                  v99 += 32;
                }
                while (v98 <= v70);
              }
              if ((int)v24 > (int)v98)
              {
                unint64_t v103 = (v70 & 0xFFFFFFFC) + 4;
                if (v173 < 4) {
                  goto LABEL_147;
                }
                if ((unint64_t)v167 < a13 + v168 * 8 + v90)
                {
                  unint64_t v103 = (v70 & 0xFFFFFFFC) + 4;
                  if (a13 + ((8 * v70) & 0x7FFFFFFE0) + 32 + v90 < (unint64_t)v169) {
                    goto LABEL_147;
                  }
                }
                float64x2_t v104 = (float64x2_t)vdupq_lane_s64(v91, 0);
                uint64_t v105 = 4 * (v70 >> 2);
                unint64_t v106 = v173 - v164;
                do
                {
                  float32x4_t v107 = (float64x2_t *)&v77[v105];
                  float64x2_t v108 = vmlaq_f64(*(float64x2_t *)&v77[v105], *(float64x2_t *)(v89 + v105 * 8 + 48), v104);
                  v107[-1] = vmlaq_f64(*(float64x2_t *)&v77[v105 - 2], *(float64x2_t *)(v89 + v105 * 8 + 32), v104);
                  *float32x4_t v107 = v108;
                  v105 += 4;
                  v106 -= 4;
                }
                while (v106);
                unint64_t v103 = v163;
                if (v164)
                {
LABEL_147:
                  do
                  {
                    v69[v103] = v69[v103] + *(double *)&v91 * *(double *)(v89 + 8 * v103);
                    ++v103;
                  }
                  while (v103 < v24);
                }
              }
              ++v88;
              v89 += v74;
              if (v88 == v155) {
                goto LABEL_100;
              }
              continue;
            }
          }
        }
        else if ((int)v24 >= 1)
        {
          char v86 = v154;
          if ((unint64_t)((char *)v69 - ((char *)a5 + v165 * v68)) < 0x20) {
            char v86 = 1;
          }
          if (v86)
          {
            uint64_t v87 = 0;
            goto LABEL_111;
          }
          uint64_t v115 = 0;
          uint64_t v116 = v24 & 0xFFFFFFFC;
          do
          {
            float64x2_t v117 = vmulq_n_f64(*(float64x2_t *)&v79[v115 + 2], a11.n128_f64[0]);
            float64x2_t v118 = (float64x2_t *)&v69[v115];
            *float64x2_t v118 = vmulq_n_f64(*(float64x2_t *)&v79[v115], a11.n128_f64[0]);
            v118[1] = v117;
            v115 += 4;
            v116 -= 4;
          }
          while (v116);
          uint64_t v87 = v24 & 0xFFFFFFFC;
          if (v157 != v24)
          {
LABEL_111:
            uint64_t v119 = v24 - v87;
            float64x2_t v120 = &v69[v87];
            uint64_t v121 = v177 * v87;
            do
            {
              *v120++ = a11.n128_f64[0] * *(double *)((char *)v79 + v121);
              v121 += v177;
              --v119;
            }
            while (v119);
          }
LABEL_113:
          if ((int)v24 < 4)
          {
            uint64_t v122 = 0;
            double v123 = a16 + 2;
            do
            {
              double v124 = *(double *)(a8 + 8 * v122);
              double v125 = *(v123 - 1);
              *(v123 - 2) = *(v123 - 2) + v124 * *v69;
              *(v123 - 1) = v125 + v124 * v69[1];
              if (v24 != 2) {
                double *v123 = *v123 + v124 * v69[2];
              }
              ++v122;
              double v123 = (double *)((char *)v123 + v179);
            }
            while (v46 != v122);
            goto LABEL_62;
          }
          uint64_t v126 = 0;
          unint64_t v127 = (unint64_t)v29;
          while (2)
          {
            uint64_t v128 = v175 * v126;
            uint64_t v129 = *(uint64_t *)(a8 + 8 * v126);
            if (v70 < 4 || v127 < (unint64_t)v172 && (double *)((char *)v29 + v171 + v128) > v69)
            {
              unint64_t v130 = 0;
              goto LABEL_124;
            }
            uint64_t v144 = 0;
            float64x2_t v145 = (float64x2_t)vdupq_lane_s64(v129, 0);
            uint64_t v146 = v170 & 0x7FFFFFFE;
            do
            {
              unint64_t v147 = (double *)(v127 + v144 * 8);
              float64x2x4_t v181 = vld4q_f64(v147);
              float64x2_t v148 = &v69[v144];
              float64x2x4_t v183 = vld4q_f64(v148);
              a11 = (__n128)vmlaq_f64(v181.val[0], v183.val[0], v145);
              v181.val[1] = vmlaq_f64(v181.val[1], v183.val[1], v145);
              v181.val[2] = vmlaq_f64(v181.val[2], v183.val[2], v145);
              v181.val[3] = vmlaq_f64(v181.val[3], v183.val[3], v145);
              vst4q_f64(v147, *(float64x2x4_t *)a11.n128_u64);
              v144 += 8;
              v146 -= 2;
            }
            while (v146);
            unint64_t v130 = 4 * (v170 & 0x7FFFFFFE);
            if (v170 != v166)
            {
LABEL_124:
              uint64_t v131 = 8 * v130;
              float64x2_t v132 = v69 + 2;
              unint64_t v133 = v127;
              do
              {
                uint64_t v134 = (double *)(v133 + v131);
                double v135 = *(double *)(v133 + v131 + 16);
                double v136 = *(double *)(v133 + v131 + 8) + *(double *)&v129 * v132[(unint64_t)v131 / 8 - 1];
                *(double *)(v133 + v131) = *(double *)(v133 + v131)
                                         + *(double *)&v129 * v132[(unint64_t)v131 / 8 - 2];
                v134[1] = v136;
                double v137 = *(double *)(v133 + v131 + 24) + *(double *)&v129 * v132[(unint64_t)v131 / 8 + 1];
                v134[2] = v135 + *(double *)&v129 * v132[(unint64_t)v131 / 8];
                v134[3] = v137;
                v130 += 4;
                v133 += 32;
                v132 += 4;
              }
              while (v130 <= v70);
            }
            if ((int)v24 > (int)v130)
            {
              unint64_t v138 = v71;
              if (v173 < 4) {
                goto LABEL_148;
              }
              if ((double *)((char *)v29 + v72 + v128) < v169)
              {
                unint64_t v138 = v71;
                if (v167 < (char *)&v29[v168] + v128) {
                  goto LABEL_148;
                }
              }
              float64x2_t v139 = (float64x2_t)vdupq_lane_s64(v129, 0);
              uint64_t v140 = 4 * (v70 >> 2);
              unint64_t v141 = v173 - v164;
              do
              {
                unint64_t v142 = v127 + v140 * 8;
                a11 = (__n128)vmlaq_f64(*(float64x2_t *)(v127 + v140 * 8 + 32), *(float64x2_t *)&v78[v140], v139);
                float64x2_t v143 = vmlaq_f64(*(float64x2_t *)(v127 + v140 * 8 + 48), *(float64x2_t *)&v78[v140 + 2], v139);
                *(__n128 *)(v142 + 32) = a11;
                *(float64x2_t *)(v142 + 48) = v143;
                v140 += 4;
                v141 -= 4;
              }
              while (v141);
              unint64_t v138 = v163;
              if (v164)
              {
LABEL_148:
                do
                {
                  *(double *)(v127 + 8 * v138) = *(double *)(v127 + 8 * v138) + *(double *)&v129 * v69[v138];
                  ++v138;
                }
                while (v138 < v24);
              }
            }
            ++v126;
            v127 += v179;
            if (v126 == v46) {
              break;
            }
            continue;
          }
        }
      }
LABEL_62:
      ++v68;
      uint64_t v79 = (double *)((char *)v79 + v165);
      a8 += v162;
      if (v68 == v28) {
        return;
      }
    }
  }
  uint64_t v47 = 0;
  if (a13)
  {
    uint64_t v48 = 8 * v32;
    BOOL v51 = v44 != 1 || v41 != 1 || v35 < 6;
    uint64_t v52 = (8 * v35) & 0x7FFFFFFE0;
    uint64_t v53 = 8 * v41;
    uint64_t v54 = 8 * v44;
    uint64_t v55 = 8 * v45;
    while (1)
    {
      double v56 = *(double *)(a3 + 8 * v47 * v33);
      if (fabs(v56) > v42) {
        break;
      }
LABEL_41:
      ++v47;
      a5 = (double *)((char *)a5 + v48);
      a8 += v55;
      if (v47 == v160) {
        return;
      }
    }
    if (v51)
    {
      uint64_t v57 = 0;
      double v58 = 0.0;
    }
    else
    {
      unint64_t v59 = 0;
      double v58 = 0.0;
      do
      {
        float64x2_t v60 = vmulq_f64(*(float64x2_t *)&a5[v59 / 8], *(float64x2_t *)(a13 + v59));
        float64x2_t v61 = vmulq_f64(*(float64x2_t *)&a5[v59 / 8 + 2], *(float64x2_t *)(a13 + v59 + 16));
        double v58 = v58 + v60.f64[0] + v60.f64[1] + v61.f64[0] + v61.f64[1];
        v59 += 32;
      }
      while (v52 != v59);
      uint64_t v57 = v43 & 0xFFFFFFFC;
      if (v57 == v43) {
        goto LABEL_50;
      }
    }
    uint64_t v62 = v43 - v57;
    float64x2_t v63 = (double *)(a13 + v53 * v57);
    uint64_t v64 = v54 * v57;
    do
    {
      double v58 = v58 + *(double *)((char *)a5 + v64) * *v63;
      float64x2_t v63 = (double *)((char *)v63 + v53);
      v64 += v54;
      --v62;
    }
    while (v62);
LABEL_50:
    uint64_t v65 = 0;
    double v66 = 1.0 / v56 * v58;
    uint64_t v67 = a16;
    do
    {
      *uint64_t v67 = *v67 + v66 * *(double *)(a8 + 8 * v65++);
      v67 += (int)v22;
    }
    while (a2 != v65);
    goto LABEL_41;
  }
  do
  {
    double v149 = *(double *)(a3 + 8 * v47 * v33);
    if (fabs(v149) > v42)
    {
      uint64_t v150 = 0;
      double v151 = 1.0 / v149 * *a5;
      uint64_t v152 = a16;
      do
      {
        double *v152 = *v152 + v151 * *(double *)(a8 + 8 * v150++);
        v152 += (int)v22;
      }
      while (a2 != v150);
    }
    ++v47;
    a5 += v32;
    a8 += 8 * v45;
  }
  while (v47 != v160);
}

void sub_100268DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v87 = *(_OWORD *)v10;
    long long v88 = v11;
    long long v89 = *(_OWORD *)(v10 + 32);
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t v90 = *(void *)(v10 + 48);
    uint64_t v91 = v12;
    BOOL v92 = (char *)&v87 + 8;
    uint64_t v93 = v94;
    v94[1] = 0;
    v94[0] = 0;
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v87) = 0;
      sub_1002931A8((uint64_t)&v87, v10);
    }
    else
    {
      uint64_t v13 = *(void **)(v10 + 72);
      long long v14 = v93;
      *(void *)uint64_t v93 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v87);
  }
  int v15 = HIDWORD(v87);
  int v16 = DWORD2(v87);
  __int16 v17 = v87;
  BOOL v50 = sub_10029FDC8(a3) || sub_10029FDC8(a4);
  unsigned int v18 = v17 & 0xFFF;
  if (v18 - 5 >= 2)
  {
    unint64_t v96 = 0;
    uint64_t v95 = 0;
    qmemcpy((void *)sub_1002D19D8(&v95, 22), "type == 5 || type == 6", 22);
    sub_1002D2278(-215, (uint64_t *)&v95, "_SVDcompute", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/lapack.cpp", 1473);
  }
  if ((a5 & 2) != 0)
  {
    sub_10029E05C(a3);
    sub_10029E05C(a4);
    int v49 = v15;
    BOOL v50 = 0;
    if (v16 <= v15) {
      int v19 = v15;
    }
    else {
      int v19 = v16;
    }
    if (v16 >= v15) {
      signed int v20 = v15;
    }
    else {
      signed int v20 = v16;
    }
    int v21 = v20;
    unsigned int v22 = DWORD1(v87) - 1;
    uint64_t v47 = a3;
    uint64_t v48 = a4;
    uint64_t v46 = a2;
    if (SDWORD1(v87) >= 1) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v16 <= v15) {
      int v19 = v15;
    }
    else {
      int v19 = v16;
    }
    if (v16 >= v15) {
      signed int v20 = v15;
    }
    else {
      signed int v20 = v16;
    }
    if ((a5 & 4) != 0) {
      int v21 = v19;
    }
    else {
      int v21 = v20;
    }
    unsigned int v22 = DWORD1(v87) - 1;
    uint64_t v47 = a3;
    uint64_t v48 = a4;
    uint64_t v46 = a2;
    int v49 = v15;
    if (SDWORD1(v87) >= 1)
    {
LABEL_24:
      uint64_t v23 = *((void *)v93 + v22);
      goto LABEL_33;
    }
  }
  uint64_t v23 = 0;
LABEL_33:
  unint64_t v24 = (v23 * v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = v23 * v20;
  unint64_t v26 = v24 * v21;
  uint64_t v95 = v97;
  unint64_t v96 = v25 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF0) * v20 + v26 + 32;
  if (v96 >= 0x409) {
    operator new[]();
  }
  sub_10000CE64((uint64_t)v79, v20, v19, v18, (uint64_t)v97, v24);
  uint64_t v27 = &v97[v26];
  sub_10000CE64((uint64_t)v71, v20, 1, v18, (uint64_t)v27, 0);
  sub_10000CE64((uint64_t)v63, v21, v19, v18, (uint64_t)v97, v24);
  *(_DWORD *)double v58 = 1124007936;
  memset(&v58[4], 0, 60);
  unint64_t v59 = &v58[8];
  float64x2_t v60 = v61;
  *(void *)float64x2_t v61 = 0;
  uint64_t v62 = 0;
  if (v50)
  {
    sub_10000CE64((uint64_t)v54, v20, v20, v18, (unint64_t)&v27[v25 + 15] & 0xFFFFFFFFFFFFFFF0, (v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (*(void *)&v58[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v58[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v58);
    }
    if (*(int *)&v58[4] >= 1)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v59;
      do
        *(_DWORD *)&v29[4 * v28++] = 0;
      while (v28 < *(int *)&v58[4]);
    }
    *(_OWORD *)double v58 = *(_OWORD *)v54;
    *(_OWORD *)&v58[16] = *(_OWORD *)&v54[16];
    *(_OWORD *)&v58[32] = *(_OWORD *)&v54[32];
    *(_OWORD *)&v58[48] = *(_OWORD *)&v54[48];
    if (v60 == v61)
    {
      unint64_t v30 = v56;
      if (*(int *)&v54[4] <= 2) {
        goto LABEL_44;
      }
    }
    else
    {
      j__free(v60);
      unint64_t v59 = &v58[8];
      float64x2_t v60 = v61;
      unint64_t v30 = v56;
      if (*(int *)&v54[4] <= 2)
      {
LABEL_44:
        *(void *)float64x2_t v61 = *v30;
        uint64_t v62 = v30[1];
        goto LABEL_47;
      }
    }
    unint64_t v59 = v55;
    float64x2_t v60 = v30;
    unint64_t v30 = v57;
    uint64_t v55 = &v54[8];
    double v56 = v57;
LABEL_47:
    *(_DWORD *)uint64_t v54 = 1124007936;
    memset(&v54[4], 0, 60);
    if (v30 != (void *)v57) {
      j__free(v30);
    }
  }
  if (v21 > v20)
  {
    memset(v54, 0, 32);
    sub_100255390((uint64_t)v63, (uint64_t)v54);
  }
  if (v16 >= v49)
  {
    *(_DWORD *)uint64_t v54 = 16842752;
    *(void *)&v54[8] = &v87;
    *(void *)&v54[16] = 0;
    int v51 = 33619968;
    uint64_t v52 = v79;
    uint64_t v53 = 0;
    sub_100298524((uint64_t)v54, (uint64_t)&v51);
  }
  else
  {
    *(_DWORD *)uint64_t v54 = 33619968;
    *(void *)&v54[8] = v79;
    *(void *)&v54[16] = 0;
    sub_10025401C((uint64_t)&v87, (uint64_t)v54);
  }
  if (v50) {
    int v33 = v21;
  }
  else {
    int v33 = 0;
  }
  if (v18 == 5) {
    sub_10025FE58((float32x2_t *)v81, *(unint64_t *)v70, (float32x4_t *)v73, v31, v32, *(float32x4_t **)&v58[16], *(unint64_t *)v61, v19, v20, v33);
  }
  else {
    sub_100261D2C((double *)v81, *(unint64_t *)v70, (void *)v73, v31, v32, *(char **)&v58[16], *(unint64_t *)v61, v19, v20, v33);
  }
  sub_10025401C((uint64_t)v71, v46);
  if (v50)
  {
    if (v16 >= v49)
    {
      if (sub_10029FDC8(v47))
      {
        *(_DWORD *)uint64_t v54 = 16842752;
        *(void *)&v54[8] = v63;
        *(void *)&v54[16] = 0;
        sub_100298524((uint64_t)v54, v47);
      }
      if (sub_10029FDC8(v48))
      {
        double v34 = v58;
        goto LABEL_70;
      }
    }
    else
    {
      if (sub_10029FDC8(v47))
      {
        *(_DWORD *)uint64_t v54 = 16842752;
        *(void *)&v54[8] = v58;
        *(void *)&v54[16] = 0;
        sub_100298524((uint64_t)v54, v47);
      }
      if (sub_10029FDC8(v48))
      {
        double v34 = v63;
LABEL_70:
        sub_10025401C((uint64_t)v34, v48);
      }
    }
  }
  if (*(void *)&v58[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v58[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v58);
  }
  *(void *)&v58[56] = 0;
  memset(&v58[16], 0, 32);
  if (*(int *)&v58[4] >= 1)
  {
    uint64_t v35 = 0;
    int v36 = v59;
    do
      *(_DWORD *)&v36[4 * v35++] = 0;
    while (v35 < *(int *)&v58[4]);
  }
  if (v60 != v61) {
    j__free(v60);
  }
  if (v67 && atomic_fetch_add((atomic_uint *volatile)(v67 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v63);
  }
  uint64_t v67 = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  if (v64 >= 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = v68;
    do
      *(_DWORD *)(v38 + 4 * v37++) = 0;
    while (v37 < v64);
  }
  if (v69 != v70) {
    j__free(v69);
  }
  if (v75 && atomic_fetch_add((atomic_uint *volatile)(v75 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v71);
  }
  uint64_t v75 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  if (v72 >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = v76;
    do
      *(_DWORD *)(v40 + 4 * v39++) = 0;
    while (v39 < v72);
  }
  if (v77 != &v78) {
    j__free(v77);
  }
  if (v83 && atomic_fetch_add((atomic_uint *volatile)(v83 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v79);
  }
  uint64_t v83 = 0;
  long long v81 = 0u;
  long long v82 = 0u;
  if (v80 >= 1)
  {
    uint64_t v41 = 0;
    uint64_t v42 = v84;
    do
      *(_DWORD *)(v42 + 4 * v41++) = 0;
    while (v41 < v80);
  }
  if (v85 != &v86) {
    j__free(v85);
  }
  if (v95 != v97 && v95 != 0) {
    operator delete[]();
  }
  if (v91 && atomic_fetch_add((atomic_uint *volatile)(v91 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v87);
  }
  uint64_t v91 = 0;
  long long v88 = 0u;
  long long v89 = 0u;
  if (SDWORD1(v87) >= 1)
  {
    uint64_t v44 = 0;
    uint64_t v45 = v92;
    do
      *(_DWORD *)&v45[4 * v44++] = 0;
    while (v44 < SDWORD1(v87));
  }
  if (v93 != v94) {
    j__free(v93);
  }
}

void sub_1002695E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000094F4((uint64_t)&a31);
  sub_1000094F4((uint64_t)&a43);
  sub_1000094F4((uint64_t)&a55);
  sub_1000094F4((uint64_t)&a67);
  if (STACK[0x290] != a14)
  {
    if (STACK[0x290]) {
      operator delete[]();
    }
  }
  sub_1000094F4((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

uint64_t sub_100269714(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, unint64_t a5, int a6, uint64_t a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v166 = a4;
  if (a4)
  {
    if (a6 < 1) {
      return 1;
    }
    unint64_t v167 = a2;
    uint64_t v168 = a7;
    unint64_t v165 = a5 >> 2;
    unint64_t v15 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v16 = (a5 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    __int16 v17 = a4;
    unsigned int v18 = a4;
    uint64_t v19 = a6;
    do
    {
      bzero(v17, 4 * a6);
      *unsigned int v18 = 1065353216;
      unsigned int v18 = (_DWORD *)((char *)v18 + v16);
      v17 += v15;
      --v19;
    }
    while (v19);
    a5 = v165;
    a4 = v166;
    a2 = v167;
    a7 = v168;
  }
  unint64_t v20 = (a6 - 1);
  if (a6 >= 1)
  {
    unint64_t v21 = 0;
    unint64_t v22 = a2 >> 2;
    int v23 = 30 * a6 * a6;
    unint64_t v24 = (int *)((a7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v25 = a6;
    unint64_t v26 = &v24[a6];
    uint64_t v27 = 4 * (a2 >> 2);
    uint64_t v28 = (float *)(a1 + v27);
    uint64_t v29 = a1;
    do
    {
      *(_DWORD *)(a3 + 4 * v21) = *(_DWORD *)(a1 + 4 * ((a2 >> 2) + 1) * v21);
      if (v21 < v20)
      {
        unint64_t v31 = v21 + 1;
        if ((int)v21 + 2 < a6)
        {
          float v32 = fabsf(*(float *)(a1 + 4 * (v22 * v21 + v31)));
          uint64_t v33 = 2;
          do
          {
            float v34 = fabsf(*(float *)(v29 + 4 * v33));
            if (v32 < v34)
            {
              LODWORD(v31) = v21 + v33;
              float v32 = v34;
            }
            ++v33;
          }
          while (v21 - a6 + v33);
        }
        v24[v21] = v31;
      }
      if (v21)
      {
        if (v21 == 1)
        {
          int v30 = 0;
        }
        else
        {
          int v30 = 0;
          float v35 = fabsf(*(float *)(a1 + 4 * v21));
          int v36 = v28;
          for (uint64_t i = 1; i != v21; ++i)
          {
            float v38 = fabsf(*v36);
            if (v35 < v38)
            {
              int v30 = i;
              float v35 = v38;
            }
            int v36 = (float *)((char *)v36 + v27);
          }
        }
        v26[v21] = v30;
      }
      ++v21;
      v29 += v27 + 4;
      ++v28;
    }
    while (v21 != a6);
    if (a6 >= 2 && v23)
    {
      int v39 = 0;
      uint64_t v40 = 4 * a5;
      uint64_t v163 = a1 + 4;
      unint64_t v164 = &a4[4 * a6];
      unint64_t v169 = a5;
      while (1)
      {
        uint64_t v42 = *v24;
        float v43 = fabsf(*(float *)(a1 + 4 * v42));
        if (a6 < 3)
        {
          LODWORD(v44) = 0;
        }
        else
        {
          LODWORD(v44) = 0;
          unint64_t v45 = v22;
          uint64_t v46 = 1;
          do
          {
            float v47 = fabsf(*(float *)(a1 + 4 * (v45 + v24[v46])));
            if (v43 < v47)
            {
              LODWORD(v44) = v46;
              float v43 = v47;
            }
            ++v46;
            v45 += v22;
          }
          while (v20 != v46);
          LODWORD(v42) = v24[(int)v44];
        }
        uint64_t v48 = 1;
        do
        {
          uint64_t v49 = v26[v48];
          float v50 = fabsf(*(float *)(a1 + 4 * (v48 + v22 * v49)));
          if (v43 >= v50) {
            uint64_t v44 = v44;
          }
          else {
            uint64_t v44 = v49;
          }
          if (v43 >= v50)
          {
            uint64_t v42 = v42;
          }
          else
          {
            float v43 = v50;
            uint64_t v42 = v48;
          }
          ++v48;
        }
        while (a6 != v48);
        uint64_t v51 = v22 * (int)v44;
        uint64_t v52 = v51 + (int)v42;
        float v53 = *(float *)(a1 + 4 * v52);
        float v54 = fabsf(v53);
        if (v54 <= 0.00000011921) {
          goto LABEL_123;
        }
        float v55 = (float)(*(float *)(a3 + 4 * (int)v42) - *(float *)(a3 + 4 * (int)v44)) * 0.5;
        float v56 = fabsf(v55);
        if (v54 <= v56)
        {
          float v57 = 0.0;
          if (v55 != 0.0) {
            float v57 = v56 * sqrtf((float)((float)(v54 / v56) * (float)(v54 / v56)) + 1.0);
          }
        }
        else
        {
          float v57 = v54 * sqrtf((float)((float)(v56 / v54) * (float)(v56 / v54)) + 1.0);
        }
        float v58 = v56 + v57;
        float v59 = fabsf(v58);
        if (v54 <= v59)
        {
          float v60 = 0.0;
          if (v58 != 0.0) {
            float v60 = v59 * sqrtf((float)((float)(v54 / v59) * (float)(v54 / v59)) + 1.0);
          }
        }
        else
        {
          float v60 = v54 * sqrtf((float)((float)(v59 / v54) * (float)(v59 / v54)) + 1.0);
        }
        *(float *)&a11 = v58 / v60;
        BOOL v61 = v55 < 0.0;
        if (v55 >= 0.0) {
          float v62 = v53 * (float)(v53 / v58);
        }
        else {
          float v62 = -(float)(v53 * (float)(v53 / v58));
        }
        if (v61) {
          *(float *)&a12 = -(float)(v53 / v60);
        }
        else {
          *(float *)&a12 = v53 / v60;
        }
        *(_DWORD *)(a1 + 4 * v52) = 0;
        *(float *)(a3 + 4 * (int)v44) = *(float *)(a3 + 4 * (int)v44) - v62;
        *(float *)(a3 + 4 * (int)v42) = v62 + *(float *)(a3 + 4 * (int)v42);
        if ((int)v44 >= 1)
        {
          uint64_t v63 = v44;
          uint64_t v64 = a1;
          do
          {
            float v65 = *(float *)(v64 + 4 * (int)v44);
            float v66 = *(float *)(v64 + 4 * (int)v42);
            *(float *)(v64 + 4 * (int)v44) = (float)(v65 * *(float *)&a11) - (float)(v66 * *(float *)&a12);
            *(float *)(v64 + 4 * (int)v42) = (float)(*(float *)&a11 * v66) + (float)(v65 * *(float *)&a12);
            v64 += v27;
            --v63;
          }
          while (v63);
        }
        int v67 = v44 + 1;
        if ((int)v44 + 1 < (int)v42)
        {
          uint64_t v68 = (float *)(a1 + 4 * (v51 + v67));
          double v69 = (float *)(a1 + 4 * ((int)v42 + v22 * v67));
          int v70 = ~v44 + v42;
          do
          {
            float v71 = *v68;
            float v72 = *v69;
            float *v68 = (float)(*v68 * *(float *)&a11) - (float)(*v69 * *(float *)&a12);
            ++v68;
            float *v69 = (float)(*(float *)&a11 * v72) + (float)(v71 * *(float *)&a12);
            double v69 = (float *)((char *)v69 + v27);
            --v70;
          }
          while (v70);
        }
        int v73 = v42 + 1;
        if ((int)v42 + 1 < a6)
        {
          uint64_t v74 = v22 * (int)v42;
          uint64_t v75 = v73;
          uint64_t v76 = (a6 - 2 - v42);
          if (v76 < 7) {
            goto LABEL_77;
          }
          uint64_t v77 = 4 * (v51 + v73);
          unint64_t v78 = a1 + v77;
          unint64_t v79 = v163 + v77 + 4 * v76;
          uint64_t v80 = v74 + v73;
          uint64_t v74 = v22 * (int)v42;
          BOOL v81 = v78 >= v163 + 4 * v76 + 4 * v80 || a1 + 4 * v80 >= v79;
          int v23 = 30 * a6 * a6;
          a4 = v166;
          if (!v81) {
            goto LABEL_77;
          }
          uint64_t v82 = v76 + 1;
          uint64_t v83 = (v76 + 1) & 0x1FFFFFFFCLL;
          float32x4_t v84 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a12, 0);
          uint64_t v75 = v83 + v73;
          float32x4_t v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
          uint64_t v86 = (float32x4_t *)(a1 + 4 * (v51 + v73));
          long long v87 = (float32x4_t *)(a1 + 4 * v80);
          uint64_t v88 = v83;
          do
          {
            float32x4_t v89 = *v86;
            float32x4_t v90 = *v87;
            *uint64_t v86 = vmlaq_f32(vmulq_n_f32(vnegq_f32(*v87), *(float *)&a12), v85, *v86);
            ++v86;
            *v87++ = vmlaq_f32(vmulq_n_f32(v90, *(float *)&a11), v84, v89);
            v88 -= 4;
          }
          while (v88);
          BOOL v91 = v82 == v83;
          a4 = v166;
          int v23 = 30 * a6 * a6;
          if (!v91)
          {
LABEL_77:
            BOOL v92 = (float *)(a1 + 4 * (v75 + v51));
            uint64_t v93 = (float *)(a1 + 4 * (v75 + v74));
            int v94 = a6 - v75;
            do
            {
              float v95 = *v92;
              float v96 = *v93;
              *BOOL v92 = (float)(*v92 * *(float *)&a11) - (float)(*v93 * *(float *)&a12);
              ++v92;
              *v93++ = (float)(*(float *)&a11 * v96) + (float)(v95 * *(float *)&a12);
              --v94;
            }
            while (v94);
          }
        }
        uint64_t v25 = a6;
        a5 = v169;
        if (a4)
        {
          if (a6 >= 4
            && (&a4[v40 * (int)v44] < &v164[v40 * (int)v42]
              ? (BOOL v97 = &a4[v40 * (int)v42] >= &v164[v40 * (int)v44])
              : (BOOL v97 = 1),
                v97))
          {
            float32x4_t v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a12, 0);
            float32x4_t v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
            uint64_t v100 = (float32x4_t *)&a4[v40 * (int)v44];
            uint64_t v101 = a6 & 0xFFFFFFFC;
            double v102 = (float32x4_t *)&a4[v40 * (int)v42];
            do
            {
              float32x4_t v103 = *v100;
              float32x4_t v104 = *v102;
              float32x4_t *v100 = vmlaq_f32(vmulq_n_f32(vnegq_f32(*v102), *(float *)&a12), v99, *v100);
              ++v100;
              *v102++ = vmlaq_f32(vmulq_n_f32(v104, *(float *)&a11), v98, v103);
              v101 -= 4;
            }
            while (v101);
            uint64_t v105 = a6 & 0xFFFFFFFC;
            if (v105 == a6) {
              goto LABEL_93;
            }
          }
          else
          {
            uint64_t v105 = 0;
          }
          unint64_t v106 = (float *)&a4[4 * v105 + 4 * v169 * (int)v42];
          float32x4_t v107 = (float *)&a4[4 * v105 + 4 * v169 * (int)v44];
          uint64_t v108 = a6 - v105;
          do
          {
            float v109 = *v107;
            float v110 = *v106;
            *float32x4_t v107 = (float)(*v107 * *(float *)&a11) - (float)(*v106 * *(float *)&a12);
            ++v107;
            *v106++ = (float)(*(float *)&a11 * v110) + (float)(v109 * *(float *)&a12);
            --v108;
          }
          while (v108);
        }
LABEL_93:
        if ((int)v44 < (int)v20)
        {
          int v111 = v44 + 2;
          if ((int)v44 + 2 < a6)
          {
            float v112 = fabsf(*(float *)(a1 + 4 * (v51 + v67)));
            uint64_t v113 = (float *)(a1 + 4 * (v51 + v111));
            do
            {
              float v114 = *v113++;
              float v115 = fabsf(v114);
              if (v112 < v115)
              {
                int v67 = v111;
                float v112 = v115;
              }
              ++v111;
            }
            while (a6 != v111);
          }
          v24[(int)v44] = v67;
        }
        if ((int)v44 >= 1)
        {
          if (v44 == 1)
          {
            int v116 = 0;
          }
          else
          {
            int v116 = 0;
            float v117 = fabsf(*(float *)(a1 + 4 * v44));
            float64x2_t v118 = (float *)(a1 + 4 * (v22 + v44));
            for (uint64_t j = 1; j != v44; ++j)
            {
              float v120 = fabsf(*v118);
              if (v117 < v120)
              {
                int v116 = j;
                float v117 = v120;
              }
              float64x2_t v118 = (float *)((char *)v118 + v27);
            }
          }
          v26[v44] = v116;
        }
        if ((int)v42 < (int)v20)
        {
          int v121 = v42 + 2;
          if ((int)v42 + 2 < a6)
          {
            float v122 = fabsf(*(float *)(a1 + 4 * (v22 * (int)v42 + v73)));
            double v123 = (float *)(a1 + 4 * (v22 * (int)v42 + v121));
            do
            {
              float v124 = *v123++;
              float v125 = fabsf(v124);
              if (v122 < v125)
              {
                int v73 = v121;
                float v122 = v125;
              }
              ++v121;
            }
            while (a6 != v121);
          }
          v24[(int)v42] = v73;
        }
        if ((int)v42 >= 1)
        {
          if (v42 == 1)
          {
            int v41 = 0;
          }
          else
          {
            int v41 = 0;
            float v126 = fabsf(*(float *)(a1 + 4 * v42));
            unint64_t v127 = (float *)(a1 + 4 * (v22 + v42));
            for (uint64_t k = 1; k != v42; ++k)
            {
              float v129 = fabsf(*v127);
              if (v126 < v129)
              {
                int v41 = k;
                float v126 = v129;
              }
              unint64_t v127 = (float *)((char *)v127 + v27);
            }
          }
          v26[v42] = v41;
        }
        if (++v39 == v23) {
          goto LABEL_123;
        }
      }
    }
    if (a6 > 1)
    {
LABEL_123:
      if (a4)
      {
        uint64_t v130 = 0;
        uint64_t v131 = 0;
        uint64_t v132 = 4 * a5;
        unint64_t v133 = &a4[4 * a6];
        uint64_t v134 = 1;
        double v135 = a4 + 16;
        while (1)
        {
          uint64_t v136 = v131 + 1;
          if (v131 + 1 >= v25)
          {
            int v138 = v131;
            if (v131 == v131) {
              goto LABEL_125;
            }
          }
          else
          {
            uint64_t v137 = v134;
            int v138 = v131;
            do
            {
              if (*(float *)(a3 + 4 * v138) < *(float *)(a3 + 4 * v137)) {
                int v138 = v137;
              }
              ++v137;
            }
            while (a6 != v137);
            if (v131 == v138) {
              goto LABEL_125;
            }
          }
          uint64_t v139 = 4 * v138;
          int v140 = *(_DWORD *)(a3 + v139);
          *(_DWORD *)(a3 + v139) = *(_DWORD *)(a3 + 4 * v131);
          *(_DWORD *)(a3 + 4 * v131) = v140;
          if (a6 >= 8
            && ((uint64_t v141 = v132 * v131, &a4[v132 * v138] < &v133[v141])
              ? (BOOL v142 = &a4[v141] >= &v133[v132 * v138])
              : (BOOL v142 = 1),
                v142))
          {
            float64x2_t v143 = &a4[v132 * v138 + 16];
            uint64_t v144 = a6 & 0xFFFFFFF8;
            float64x2_t v145 = (long long *)v135;
            do
            {
              long long v146 = *((_OWORD *)v143 - 1);
              long long v147 = *(_OWORD *)v143;
              long long v148 = *v145;
              *((_OWORD *)v143 - 1) = *(v145 - 1);
              *(_OWORD *)float64x2_t v143 = v148;
              *(v145 - 1) = v146;
              long long *v145 = v147;
              v143 += 32;
              v145 += 2;
              v144 -= 8;
            }
            while (v144);
            uint64_t v149 = a6 & 0xFFFFFFF8;
            if (v149 == a6) {
              goto LABEL_125;
            }
          }
          else
          {
            uint64_t v149 = 0;
          }
          uint64_t v150 = &a4[4 * v149 + 4 * v130];
          double v151 = &a4[4 * v149 + 4 * a5 * v138];
          uint64_t v152 = a6 - v149;
          do
          {
            int v153 = *(_DWORD *)v151;
            *(_DWORD *)double v151 = *(_DWORD *)v150;
            v151 += 4;
            *(_DWORD *)uint64_t v150 = v153;
            v150 += 4;
            --v152;
          }
          while (v152);
LABEL_125:
          ++v134;
          v135 += v132;
          v130 += a5;
          uint64_t v131 = v136;
          if (v136 == v20) {
            return 1;
          }
        }
      }
      uint64_t v154 = 0;
      uint64_t v155 = 1;
      do
      {
        uint64_t v156 = v154 + 1;
        int v157 = v154;
        uint64_t v158 = v155;
        if (v154 + 1 < v25)
        {
          do
          {
            if (*(float *)(a3 + 4 * v157) < *(float *)(a3 + 4 * v158)) {
              int v157 = v158;
            }
            ++v158;
          }
          while (a6 != v158);
        }
        if (v154 != v157)
        {
          uint64_t v159 = 4 * v157;
          uint64_t v160 = 4 * v154;
          int v161 = *(_DWORD *)(a3 + v159);
          *(_DWORD *)(a3 + v159) = *(_DWORD *)(a3 + v160);
          *(_DWORD *)(a3 + v160) = v161;
        }
        ++v155;
        uint64_t v154 = v156;
      }
      while (v156 != v20);
    }
  }
  return 1;
}

uint64_t sub_10026A048(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, unint64_t a5, int a6, uint64_t a7)
{
  unint64_t v173 = a4;
  if (a4)
  {
    if (a6 < 1) {
      return 1;
    }
    unint64_t v170 = a2;
    uint64_t v171 = a7;
    unint64_t v168 = a5 >> 3;
    unint64_t v10 = a5 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v12 = a4;
    uint64_t v13 = a4;
    uint64_t v14 = a6;
    do
    {
      bzero(v12, 8 * a6);
      *uint64_t v13 = 0x3FF0000000000000;
      uint64_t v13 = (void *)((char *)v13 + v11);
      v12 += v10;
      --v14;
    }
    while (v14);
    a5 = v168;
    a2 = v170;
    a7 = v171;
    a4 = v173;
  }
  unint64_t v15 = (a6 - 1);
  if (a6 >= 1)
  {
    unint64_t v16 = 0;
    unint64_t v17 = a2 >> 3;
    unsigned int v18 = (int *)((a7 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = a6;
    unint64_t v20 = &v18[a6];
    uint64_t v21 = 8 * (a2 >> 3);
    unint64_t v22 = (double *)(a1 + v21);
    uint64_t v23 = a1;
    do
    {
      *(void *)(a3 + 8 * v16) = *(void *)(a1 + 8 * ((a2 >> 3) + 1) * v16);
      if (v16 < v15)
      {
        unint64_t v25 = v16 + 1;
        if ((int)v16 + 2 < a6)
        {
          double v26 = fabs(*(double *)(a1 + 8 * (v17 * v16 + v25)));
          uint64_t v27 = 2;
          do
          {
            double v28 = fabs(*(double *)(v23 + 8 * v27));
            if (v26 < v28)
            {
              LODWORD(v25) = v16 + v27;
              double v26 = v28;
            }
            ++v27;
          }
          while (v16 - a6 + v27);
        }
        v18[v16] = v25;
      }
      if (v16)
      {
        if (v16 == 1)
        {
          int v24 = 0;
        }
        else
        {
          int v24 = 0;
          double v29 = fabs(*(double *)(a1 + 8 * v16));
          int v30 = v22;
          for (uint64_t i = 1; i != v16; ++i)
          {
            double v32 = fabs(*v30);
            if (v29 < v32)
            {
              int v24 = i;
              double v29 = v32;
            }
            int v30 = (double *)((char *)v30 + v21);
          }
        }
        v20[v16] = v24;
      }
      ++v16;
      v23 += v21 + 8;
      ++v22;
    }
    while (v16 != a6);
    uint64_t v33 = (a6 - 2);
    int v34 = 30 * a6 * a6;
    if (a6 >= 2 && 30 * a6 * a6)
    {
      int v35 = 0;
      uint64_t v36 = 8 * a5;
      uint64_t v166 = a1 + 8;
      unint64_t v169 = &a4[8 * a6];
      unint64_t v172 = a5;
      while (1)
      {
        uint64_t v38 = *v18;
        double v39 = fabs(*(double *)(a1 + 8 * v38));
        if (a6 < 3)
        {
          LODWORD(v40) = 0;
        }
        else
        {
          LODWORD(v40) = 0;
          unint64_t v41 = v17;
          uint64_t v42 = 1;
          do
          {
            double v43 = fabs(*(double *)(a1 + 8 * (v41 + v18[v42])));
            if (v39 < v43)
            {
              LODWORD(v40) = v42;
              double v39 = v43;
            }
            ++v42;
            v41 += v17;
          }
          while (v15 != v42);
          LODWORD(v38) = v18[(int)v40];
        }
        uint64_t v44 = 1;
        do
        {
          uint64_t v45 = v20[v44];
          double v46 = fabs(*(double *)(a1 + 8 * (v44 + v17 * v45)));
          if (v39 >= v46) {
            uint64_t v40 = v40;
          }
          else {
            uint64_t v40 = v45;
          }
          if (v39 >= v46)
          {
            uint64_t v38 = v38;
          }
          else
          {
            double v39 = v46;
            uint64_t v38 = v44;
          }
          ++v44;
        }
        while (a6 != v44);
        uint64_t v47 = v17 * (int)v40;
        uint64_t v48 = v47 + (int)v38;
        double v49 = *(double *)(a1 + 8 * v48);
        double v50 = fabs(v49);
        if (v50 <= 2.22044605e-16) {
          goto LABEL_123;
        }
        double v51 = (*(double *)(a3 + 8 * (int)v38) - *(double *)(a3 + 8 * (int)v40)) * 0.5;
        double v52 = fabs(v51);
        if (v50 <= v52)
        {
          double v53 = 0.0;
          if (v51 != 0.0) {
            double v53 = v52 * sqrt(v50 / v52 * (v50 / v52) + 1.0);
          }
        }
        else
        {
          double v53 = v50 * sqrt(v52 / v50 * (v52 / v50) + 1.0);
        }
        double v54 = v52 + v53;
        double v55 = fabs(v54);
        if (v50 <= v55)
        {
          double v56 = 0.0;
          if (v54 != 0.0) {
            double v56 = v55 * sqrt(v50 / v55 * (v50 / v55) + 1.0);
          }
        }
        else
        {
          double v56 = v50 * sqrt(v55 / v50 * (v55 / v50) + 1.0);
        }
        double v57 = v54 / v56;
        BOOL v58 = v51 < 0.0;
        if (v51 >= 0.0) {
          double v59 = v49 * (v49 / v54);
        }
        else {
          double v59 = -(v49 * (v49 / v54));
        }
        if (v58) {
          double v60 = -(v49 / v56);
        }
        else {
          double v60 = v49 / v56;
        }
        *(void *)(a1 + 8 * v48) = 0;
        *(double *)(a3 + 8 * (int)v40) = *(double *)(a3 + 8 * (int)v40) - v59;
        *(double *)(a3 + 8 * (int)v38) = v59 + *(double *)(a3 + 8 * (int)v38);
        if ((int)v40 >= 1)
        {
          uint64_t v61 = v40;
          uint64_t v62 = a1;
          do
          {
            double v63 = *(double *)(v62 + 8 * (int)v40);
            double v64 = *(double *)(v62 + 8 * (int)v38);
            *(double *)(v62 + 8 * (int)v40) = v63 * v57 - v64 * v60;
            *(double *)(v62 + 8 * (int)v38) = v57 * v64 + v63 * v60;
            v62 += v21;
            --v61;
          }
          while (v61);
        }
        int v65 = v40 + 1;
        if ((int)v40 + 1 < (int)v38)
        {
          float v66 = (double *)(a1 + 8 * (v47 + v65));
          int v67 = (double *)(a1 + 8 * ((int)v38 + v17 * v65));
          int v68 = ~v40 + v38;
          do
          {
            double v69 = *v66;
            double v70 = *v67;
            double *v66 = *v66 * v57 - *v67 * v60;
            ++v66;
            *int v67 = v57 * v70 + v69 * v60;
            int v67 = (double *)((char *)v67 + v21);
            --v68;
          }
          while (v68);
        }
        int v71 = v38 + 1;
        if ((int)v38 + 1 < a6)
        {
          uint64_t v72 = v17 * (int)v38;
          uint64_t v73 = v71;
          uint64_t v74 = (v33 - v38);
          if (v74 < 5) {
            goto LABEL_77;
          }
          uint64_t v75 = 8 * (v47 + v71);
          uint64_t v76 = v72 + v71;
          uint64_t v77 = v36;
          int v78 = v35;
          uint64_t v79 = v19;
          uint64_t v80 = v33;
          uint64_t v167 = v76;
          uint64_t v81 = 8 * v76;
          unint64_t v82 = a1 + 8 * v76;
          unint64_t v83 = v166 + 8 * v74 + v81;
          uint64_t v33 = v80;
          uint64_t v19 = v79;
          int v35 = v78;
          uint64_t v36 = v77;
          uint64_t v72 = v17 * (int)v38;
          BOOL v84 = a1 + v75 >= v83 || v82 >= v166 + v75 + 8 * v74;
          int v34 = 30 * a6 * a6;
          if (!v84) {
            goto LABEL_77;
          }
          uint64_t v85 = v74 + 1;
          uint64_t v86 = (v74 + 1) & 0x1FFFFFFFELL;
          float64x2_t v87 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60, 0);
          uint64_t v73 = v86 + v71;
          float64x2_t v88 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0);
          float32x4_t v89 = (float64x2_t *)(a1 + 8 * (v47 + v71));
          float32x4_t v90 = (float64x2_t *)(a1 + 8 * v167);
          uint64_t v91 = v86;
          do
          {
            float64x2_t v92 = *v89;
            float64x2_t v93 = *v90;
            *float32x4_t v89 = vmlaq_f64(vmulq_n_f64(vnegq_f64(*v90), v60), v88, *v89);
            ++v89;
            *v90++ = vmlaq_f64(vmulq_n_f64(v93, v57), v87, v92);
            v91 -= 2;
          }
          while (v91);
          BOOL v94 = v85 == v86;
          int v34 = 30 * a6 * a6;
          if (!v94)
          {
LABEL_77:
            float v95 = (double *)(a1 + 8 * (v73 + v47));
            float v96 = (double *)(a1 + 8 * (v73 + v72));
            int v97 = a6 - v73;
            do
            {
              double v98 = *v95;
              double v99 = *v96;
              *float v95 = *v95 * v57 - *v96 * v60;
              ++v95;
              *v96++ = v57 * v99 + v98 * v60;
              --v97;
            }
            while (v97);
          }
        }
        a5 = v172;
        a4 = v173;
        if (v173)
        {
          if (a6 >= 4
            && (&v173[v36 * (int)v40] < &v169[v36 * (int)v38]
              ? (BOOL v100 = &v173[v36 * (int)v38] >= &v169[v36 * (int)v40])
              : (BOOL v100 = 1),
                v100))
          {
            float64x2_t v101 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v60, 0);
            float64x2_t v102 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0);
            float32x4_t v103 = (float64x2_t *)&v173[v36 * (int)v40];
            uint64_t v104 = a6 & 0xFFFFFFFE;
            uint64_t v105 = (float64x2_t *)&v173[v36 * (int)v38];
            do
            {
              float64x2_t v106 = *v103;
              float64x2_t v107 = *v105;
              *float32x4_t v103 = vmlaq_f64(vmulq_n_f64(vnegq_f64(*v105), v60), v102, *v103);
              ++v103;
              *v105++ = vmlaq_f64(vmulq_n_f64(v107, v57), v101, v106);
              v104 -= 2;
            }
            while (v104);
            uint64_t v108 = a6 & 0xFFFFFFFE;
            if (v108 == a6) {
              goto LABEL_93;
            }
          }
          else
          {
            uint64_t v108 = 0;
          }
          float v109 = (double *)&v173[8 * v108 + 8 * v172 * (int)v38];
          float v110 = (double *)&v173[8 * v108 + 8 * v172 * (int)v40];
          uint64_t v111 = a6 - v108;
          do
          {
            double v112 = *v110;
            double v113 = *v109;
            *float v110 = *v110 * v57 - *v109 * v60;
            ++v110;
            *v109++ = v57 * v113 + v112 * v60;
            --v111;
          }
          while (v111);
        }
LABEL_93:
        if ((int)v40 < (int)v15)
        {
          int v114 = v40 + 2;
          if ((int)v40 + 2 < a6)
          {
            double v115 = fabs(*(double *)(a1 + 8 * (v47 + v65)));
            int v116 = (double *)(a1 + 8 * (v47 + v114));
            do
            {
              double v117 = *v116++;
              double v118 = fabs(v117);
              if (v115 < v118)
              {
                int v65 = v114;
                double v115 = v118;
              }
              ++v114;
            }
            while (a6 != v114);
          }
          v18[(int)v40] = v65;
        }
        if ((int)v40 >= 1)
        {
          if (v40 == 1)
          {
            int v119 = 0;
          }
          else
          {
            int v119 = 0;
            double v120 = fabs(*(double *)(a1 + 8 * v40));
            int v121 = (double *)(a1 + 8 * (v17 + v40));
            for (uint64_t j = 1; j != v40; ++j)
            {
              double v123 = fabs(*v121);
              if (v120 < v123)
              {
                int v119 = j;
                double v120 = v123;
              }
              int v121 = (double *)((char *)v121 + v21);
            }
          }
          v20[v40] = v119;
        }
        if ((int)v38 < (int)v15)
        {
          int v124 = v38 + 2;
          if ((int)v38 + 2 < a6)
          {
            double v125 = fabs(*(double *)(a1 + 8 * (v17 * (int)v38 + v71)));
            float v126 = (double *)(a1 + 8 * (v17 * (int)v38 + v124));
            do
            {
              double v127 = *v126++;
              double v128 = fabs(v127);
              if (v125 < v128)
              {
                int v71 = v124;
                double v125 = v128;
              }
              ++v124;
            }
            while (a6 != v124);
          }
          v18[(int)v38] = v71;
        }
        if ((int)v38 >= 1)
        {
          if (v38 == 1)
          {
            int v37 = 0;
          }
          else
          {
            int v37 = 0;
            double v129 = fabs(*(double *)(a1 + 8 * v38));
            uint64_t v130 = (double *)(a1 + 8 * (v17 + v38));
            for (uint64_t k = 1; k != v38; ++k)
            {
              double v132 = fabs(*v130);
              if (v129 < v132)
              {
                int v37 = k;
                double v129 = v132;
              }
              uint64_t v130 = (double *)((char *)v130 + v21);
            }
          }
          v20[v38] = v37;
        }
        if (++v35 == v34) {
          goto LABEL_123;
        }
      }
    }
    if (a6 > 1)
    {
LABEL_123:
      if (a4)
      {
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        uint64_t v135 = 8 * a5;
        uint64_t v136 = &a4[8 * a6];
        uint64_t v137 = 1;
        int v138 = a4 + 16;
        while (1)
        {
          uint64_t v139 = v134 + 1;
          if (v134 + 1 >= v19)
          {
            int v141 = v134;
            if (v134 == v134) {
              goto LABEL_125;
            }
          }
          else
          {
            uint64_t v140 = v137;
            int v141 = v134;
            do
            {
              if (*(double *)(a3 + 8 * v141) < *(double *)(a3 + 8 * v140)) {
                int v141 = v140;
              }
              ++v140;
            }
            while (a6 != v140);
            if (v134 == v141) {
              goto LABEL_125;
            }
          }
          uint64_t v142 = 8 * v141;
          uint64_t v143 = *(void *)(a3 + v142);
          *(void *)(a3 + v142) = *(void *)(a3 + 8 * v134);
          *(void *)(a3 + 8 * v134) = v143;
          if (a6 >= 4
            && ((uint64_t v144 = v135 * v134, &a4[v135 * v141] < &v136[v144])
              ? (BOOL v145 = &a4[v144] >= &v136[v135 * v141])
              : (BOOL v145 = 1),
                v145))
          {
            long long v146 = &a4[v135 * v141 + 16];
            uint64_t v147 = a6 & 0xFFFFFFFC;
            long long v148 = (long long *)v138;
            do
            {
              long long v149 = *((_OWORD *)v146 - 1);
              long long v150 = *(_OWORD *)v146;
              long long v151 = *v148;
              *((_OWORD *)v146 - 1) = *(v148 - 1);
              *(_OWORD *)long long v146 = v151;
              *(v148 - 1) = v149;
              *long long v148 = v150;
              v146 += 32;
              v148 += 2;
              v147 -= 4;
            }
            while (v147);
            uint64_t v152 = a6 & 0xFFFFFFFC;
            if (v152 == a6) {
              goto LABEL_125;
            }
          }
          else
          {
            uint64_t v152 = 0;
          }
          int v153 = &a4[8 * v152 + 8 * v133];
          uint64_t v154 = &a4[8 * v152 + 8 * a5 * v141];
          uint64_t v155 = a6 - v152;
          do
          {
            uint64_t v156 = *(void *)v154;
            *(void *)uint64_t v154 = *(void *)v153;
            v154 += 8;
            *(void *)int v153 = v156;
            v153 += 8;
            --v155;
          }
          while (v155);
LABEL_125:
          ++v137;
          v138 += v135;
          v133 += a5;
          uint64_t v134 = v139;
          if (v139 == v15) {
            return 1;
          }
        }
      }
      uint64_t v157 = 0;
      uint64_t v158 = 1;
      do
      {
        uint64_t v159 = v157 + 1;
        int v160 = v157;
        uint64_t v161 = v158;
        if (v157 + 1 < v19)
        {
          do
          {
            if (*(double *)(a3 + 8 * v160) < *(double *)(a3 + 8 * v161)) {
              int v160 = v161;
            }
            ++v161;
          }
          while (a6 != v161);
        }
        if (v157 != v160)
        {
          uint64_t v162 = 8 * v160;
          uint64_t v163 = 8 * v157;
          uint64_t v164 = *(void *)(a3 + v162);
          *(void *)(a3 + v162) = *(void *)(a3 + v163);
          *(void *)(a3 + v163) = v164;
        }
        ++v158;
        uint64_t v157 = v159;
      }
      while (v159 != v15);
    }
  }
  return 1;
}

uint64_t sub_10026A98C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2 && atomic_fetch_add((atomic_uint *volatile)(v2 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4(a1);
  }
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a1 + 64);
    do
      *(_DWORD *)(v4 + 4 * v3++) = 0;
    while (v3 < *(int *)(a1 + 4));
  }
  int v5 = *(void **)(a1 + 72);
  if (v5 != (void *)(a1 + 80)) {
    j__free(v5);
  }
  return a1;
}

void *sub_10026AA20(void *a1, uint64_t a2, uint64_t a3)
{
  std::ostream::sentry::sentry();
  if (v13)
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_10026ABC4(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  std::ostream::sentry::~sentry();
  return a1;
}

void sub_10026AB5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry();
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x10026AB3CLL);
}

void sub_10026ABB0(_Unwind_Exception *a1)
{
}

uint64_t sub_10026ABC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        sub_10026ADB4();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        char v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        char v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        unint64_t v16 = __b;
      }
      else {
        unint64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_10026AD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10026ADB4()
{
}

uint64_t sub_10026ADCC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0880, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_1004E0880))
  {
    return dword_1004E0878;
  }
  dword_1004E0878 = sub_10026B6B0();
  __cxa_guard_release(&qword_1004E0880);
  return dword_1004E0878;
}

void sub_10026AE3C(_Unwind_Exception *a1)
{
}

uint64_t sub_10026AE54(int a1, const char *a2)
{
  sub_1002D4154();
  if (a1 >= 4) {
    uint64_t v4 = &std::cout;
  }
  else {
    uint64_t v4 = &std::cerr;
  }
  sub_10026B1DC((uint64_t)v17);
  int v5 = "[FATAL:";
  switch(a1)
  {
    case 1:
      goto LABEL_9;
    case 2:
      int v5 = "[ERROR:";
      goto LABEL_9;
    case 3:
      int v5 = "[ WARN:";
      goto LABEL_9;
    case 4:
      int v5 = "[ INFO:";
      goto LABEL_9;
    case 5:
      int v5 = "[DEBUG:";
LABEL_9:
      sub_10026AA20(v18, (uint64_t)v5, 7);
      uint64_t v6 = (void *)std::ostream::operator<<();
      uint64_t v7 = sub_10026AA20(v6, (uint64_t)"] ", 2);
      goto LABEL_10;
    case 6:
      uint64_t v7 = v18;
LABEL_10:
      size_t v8 = strlen(a2);
      int v9 = sub_10026AA20(v7, (uint64_t)a2, v8);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
      unint64_t v10 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      std::stringbuf::str();
      if ((v16 & 0x80u) == 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      if ((v16 & 0x80u) == 0) {
        uint64_t v12 = v16;
      }
      else {
        uint64_t v12 = (uint64_t)__p[1];
      }
      sub_10026AA20(v4, (uint64_t)v11, v12);
      if ((char)v16 < 0)
      {
        operator delete(__p[0]);
        if (a1 > 3) {
          goto LABEL_21;
        }
      }
      else if (a1 > 3)
      {
        goto LABEL_21;
      }
      std::ostream::flush();
LABEL_21:
      *(void *)((char *)v17
      v18[0] = v13;
      if (v19 < 0) {
        operator delete((void *)v18[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return std::ios::~ios();
    default:
      goto LABEL_21;
  }
}

void sub_10026B15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_10026B578((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_10026B578((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B1DC(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  int v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10026B48C(_Unwind_Exception *a1)
{
}

void sub_10026B4AC(_Unwind_Exception *a1)
{
}

void *sub_10026B4C0(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_10026B564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10026B578(uint64_t a1)
{
  *(void *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_10026B6B0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1004E0888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1004E0888))
  {
    sub_1002D47E8("OPENCV_LOG_LEVEL", "INFO", &qword_1004E0890);
    __cxa_atexit((void (*)(void *))sub_10026BB58, &qword_1004E0890, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1004E0888);
  }
  uint64_t v0 = (char *)qword_1004E0890;
  if ((char *)qword_1004E0890 == "DISABLED") {
    return 0;
  }
  if (qword_1004E0890) {
    uint64_t v1 = (const char *)qword_1004E0890;
  }
  else {
    uint64_t v1 = "";
  }
  int v2 = strcmp(v1, "DISABLED");
  if (v0 == "disabled" || v2 == 0) {
    return 0;
  }
  int v5 = strcmp(v1, "disabled");
  uint64_t result = 0;
  if (v0 != "0")
  {
    if (v5)
    {
      int v6 = strcmp(v1, "0");
      uint64_t result = 0;
      if (v0 != "OFF")
      {
        if (v6)
        {
          int v7 = strcmp(v1, "OFF");
          uint64_t result = 0;
          if (v0 != "off")
          {
            if (v7)
            {
              uint64_t result = strcmp(v1, "off");
              if (result)
              {
                if (v0 == "FATAL") {
                  return 1;
                }
                int v8 = strcmp(v1, "FATAL");
                uint64_t result = 1;
                if (v0 == "fatal" || !v8) {
                  return result;
                }
                if (!strcmp(v1, "fatal")) {
                  return 1;
                }
                if (v0 == "ERROR") {
                  return 2;
                }
                int v9 = strcmp(v1, "ERROR");
                uint64_t result = 2;
                if (v0 == "error" || !v9) {
                  return result;
                }
                if (!strcmp(v1, "error")) {
                  return 2;
                }
                if (v0 == "WARNING") {
                  return 3;
                }
                int v10 = strcmp(v1, "WARNING");
                uint64_t result = 3;
                if (v0 == "warning") {
                  return result;
                }
                if (!v10) {
                  return result;
                }
                int v11 = strcmp(v1, "warning");
                uint64_t result = 3;
                if (v0 == "WARNINGS") {
                  return result;
                }
                if (!v11) {
                  return result;
                }
                int v12 = strcmp(v1, "WARNINGS");
                uint64_t result = 3;
                if (v0 == "warnings") {
                  return result;
                }
                if (!v12) {
                  return result;
                }
                int v13 = strcmp(v1, "warnings");
                uint64_t result = 3;
                if (v0 == "WARN") {
                  return result;
                }
                if (!v13) {
                  return result;
                }
                int v14 = strcmp(v1, "WARN");
                uint64_t result = 3;
                if (v0 == "warn" || !v14) {
                  return result;
                }
                if (!strcmp(v1, "warn")) {
                  return 3;
                }
                if (v0 == "INFO") {
                  return 4;
                }
                int v15 = strcmp(v1, "INFO");
                uint64_t result = 4;
                if (v0 == "info" || !v15) {
                  return result;
                }
                if (!strcmp(v1, "info")) {
                  return 4;
                }
                if (v0 == "DEBUG") {
                  return 5;
                }
                int v16 = strcmp(v1, "DEBUG");
                uint64_t result = 5;
                if (v0 == "debug" || !v16) {
                  return result;
                }
                if (!strcmp(v1, "debug")) {
                  return 5;
                }
                if (v0 == "VERBOSE") {
                  return 6;
                }
                int v17 = strcmp(v1, "VERBOSE");
                uint64_t result = 6;
                if (v0 != "verbose" && v17)
                {
                  if (strcmp(v1, "verbose"))
                  {
                    uint64_t v18 = sub_10026AA20(&std::cerr, (uint64_t)"ERROR: Unexpected logging level value: ", 39);
                    char v19 = sub_10026BB84(v18);
                    sub_10026B4C0(v19);
                    return 4;
                  }
                  return 6;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10026BB40(_Unwind_Exception *a1)
{
}

uint64_t *sub_10026BB58(uint64_t *a1)
{
  return a1;
}

void *sub_10026BB84(void *a1)
{
  if (qword_1004E0890) {
    int v2 = (const char *)qword_1004E0890;
  }
  else {
    int v2 = "";
  }
  size_t v3 = strlen(v2);

  return sub_10026AA20(a1, (uint64_t)v2, v3);
}

float sub_10026BBE0(float a1)
{
  sub_1002D6AE8(v8, &off_100494F10);
  if (v9) {
    sub_1002D6888(v8);
  }
  int v2 = (__int16)((LODWORD(a1) >> 23) - 127) % 3;
  if (v2 >= 0) {
    __int16 v3 = -3;
  }
  else {
    __int16 v3 = 0;
  }
  unsigned __int16 v4 = v3 + v2;
  double v5 = COERCE_FLOAT((LODWORD(a1) & 0x7FFFFF | (v4 << 23)) + 1065353216);
  *(float *)&double v5 = ((((v5 * 45.254834 + 192.279837) * v5 + 119.165482) * v5 + 13.4325014) * v5 + 0.163616123)
                / ((((v5 * 14.8088409 + 151.971405) * v5 + 168.525441) * v5 + 33.9905941) * v5 + 1.0);
  LODWORD(v6) = (LODWORD(a1) & 0x80000000)
              + ((((21846 * (__int16)((LODWORD(a1) >> 23) - 127 - v4)) >> 16)
                + ((21846 * (__int16)((LODWORD(a1) >> 23) - 127 - v4)) >> 31)) << 23)
              + LODWORD(v5);
  if (a1 == 0.0) {
    return 0.0;
  }
  return v6;
}

uint64_t sub_10026BD1C(uint64_t result, int *a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5 = a5;
  *(_DWORD *)uint64_t result = a3 & 0xFFF | 0x42FF0000;
  *(_DWORD *)(result + 4) = 2;
  int v6 = a2[1];
  *(_DWORD *)(result + 8) = v6;
  int v7 = *a2;
  *(_DWORD *)(result + 12) = *a2;
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = a4;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 80) = 0;
  *(void *)(result + 64) = result + 8;
  *(void *)(result + 72) = result + 80;
  *(void *)(result + 88) = 0;
  if (!a4 && v7 * (uint64_t)v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    qmemcpy((void *)sub_1002D19D8(&v12, 30), "total() == 0 || data != __null", 30);
    sub_1002D2278(-215, &v12, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/mat.inl.hpp", 533);
  }
  uint64_t v8 = (((a3 >> 3) & 0x1FF) + 1) << ((0xFA50u >> (2 * (a3 & 7))) & 3);
  uint64_t v9 = v7 * (uint64_t)(int)v8;
  if (!a5)
  {
    uint64_t v5 = v7 * (uint64_t)(int)v8;
LABEL_11:
    *(_DWORD *)result |= 0x4000u;
    goto LABEL_12;
  }
  if (a5 % ((0x88442211uLL >> (4 * (a3 & 7))) & 0xF))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    qmemcpy((void *)sub_1002D19D8(&v12, 31), "Step must be a multiple of esz1", 31);
    sub_1002D2278(-13, &v12, "Mat", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/include/opencv2/core/mat.inl.hpp", 548);
  }
  if (v9 == a5 || *(_DWORD *)(result + 8) == 1) {
    goto LABEL_11;
  }
LABEL_12:
  int v10 = *(uint64_t **)(result + 72);
  *int v10 = v5;
  v10[1] = v8;
  uint64_t v11 = *(void *)(result + 24) + v5 * *(int *)(result + 8);
  *(void *)(result + 32) = v11 - v5 + v9;
  *(void *)(result + 40) = v11;
  return result;
}

void sub_10026BEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float sub_10026BF14(float a1, float a2)
{
  float v2 = fabsf(a2);
  float v3 = fabsf(a1);
  BOOL v4 = v2 < v3;
  float v5 = v2 / (float)(v3 + 2.2204e-16);
  float v6 = 90.0
     - (float)((float)((float)((float)((float)((float)((float)((float)(v5 * v5) * -2.5397) + 8.914) * (float)(v5 * v5))
                                     + -18.667)
                             * (float)(v5 * v5))
                     + 57.284)
             * v5);
  float v7 = v3 / (float)(v2 + 2.2204e-16);
  float v8 = v7
     * (float)((float)((float)((float)((float)((float)((float)(v7 * v7) * -2.5397) + 8.914) * (float)(v7 * v7)) + -18.667)
                     * (float)(v7 * v7))
             + 57.284);
  if (v4) {
    float v8 = v6;
  }
  if (a2 >= 0.0) {
    float v9 = v8;
  }
  else {
    float v9 = 180.0 - v8;
  }
  if (a1 >= 0.0) {
    return v9;
  }
  else {
    return 360.0 - v9;
  }
}

void sub_10026C000(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, float a9, float a10, int a11, int a12, int a13, int a14, unsigned int a15)
{
  *(_DWORD *)float64x2_t v106 = 1124007936;
  *(_OWORD *)&v106[4] = 0u;
  if (a14) {
    int v20 = a11;
  }
  else {
    int v20 = a12;
  }
  *(_OWORD *)&v106[20] = 0uLL;
  if (a14) {
    int v21 = a12;
  }
  else {
    int v21 = a11;
  }
  *(_OWORD *)&v106[36] = 0uLL;
  if ((a14 & 2) != 0) {
    int v22 = a13;
  }
  else {
    int v22 = v20;
  }
  if ((a14 & 2) != 0) {
    int v23 = v20;
  }
  else {
    int v23 = a13;
  }
  *(_OWORD *)&v106[48] = 0uLL;
  float64x2_t v107 = &v106[8];
  uint64_t v108 = &v109;
  if ((a14 & 4) != 0) {
    int v24 = a13;
  }
  else {
    int v24 = v21;
  }
  if ((a14 & 4) != 0) {
    int v25 = v21;
  }
  else {
    int v25 = a13;
  }
  int v59 = v24;
  int v60 = v25;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  *(_DWORD *)float64x2_t v101 = 1124007936;
  memset(&v101[4], 0, 60);
  float64x2_t v102 = &v101[8];
  float32x4_t v103 = &v104;
  uint64_t v105 = 0;
  uint64_t v104 = 0;
  *(_DWORD *)float v96 = 1124007936;
  memset(&v96[4], 0, 60);
  int v97 = &v96[8];
  double v98 = &v99;
  uint64_t v100 = 0;
  uint64_t v99 = 0;
  if (!a1) {
    goto LABEL_33;
  }
  sub_10000CE64((uint64_t)v92, a11, a12, a15, a1, a2);
  if (*(void *)&v106[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v106[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v106);
  }
  if (*(int *)&v106[4] >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v107;
    do
      *(_DWORD *)&v27[4 * v26++] = 0;
    while (v26 < *(int *)&v106[4]);
  }
  *(_OWORD *)float64x2_t v106 = *(_OWORD *)v92;
  *(_OWORD *)&v106[16] = *(_OWORD *)&v92[16];
  *(_OWORD *)&v106[32] = *(_OWORD *)&v92[32];
  *(_OWORD *)&v106[48] = *(_OWORD *)&v92[48];
  if (v108 == &v109)
  {
    double v28 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2) {
      goto LABEL_28;
    }
  }
  else
  {
    j__free(v108);
    float64x2_t v107 = &v106[8];
    uint64_t v108 = &v109;
    double v28 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2)
    {
LABEL_28:
      uint64_t v109 = *v28;
      uint64_t v110 = v28[1];
      goto LABEL_31;
    }
  }
  float64x2_t v107 = v93;
  uint64_t v108 = v28;
  double v28 = (uint64_t *)v95;
  BOOL v94 = v95;
  float64x2_t v93 = &v92[8];
LABEL_31:
  *(_DWORD *)float64x2_t v92 = 1124007936;
  memset(&v92[4], 0, 60);
  if (v28 != (uint64_t *)v95) {
    j__free(v28);
  }
LABEL_33:
  if (!a3) {
    goto LABEL_47;
  }
  sub_10000CE64((uint64_t)v92, v22, v23, a15, a3, a4);
  if (*(void *)&v101[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v101[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v101);
  }
  if (*(int *)&v101[4] >= 1)
  {
    uint64_t v29 = 0;
    int v30 = v102;
    do
      *(_DWORD *)&v30[4 * v29++] = 0;
    while (v29 < *(int *)&v101[4]);
  }
  *(_OWORD *)float64x2_t v101 = *(_OWORD *)v92;
  *(_OWORD *)&v101[16] = *(_OWORD *)&v92[16];
  *(_OWORD *)&v101[32] = *(_OWORD *)&v92[32];
  *(_OWORD *)&v101[48] = *(_OWORD *)&v92[48];
  if (v103 == &v104)
  {
    unint64_t v31 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2) {
      goto LABEL_42;
    }
  }
  else
  {
    j__free(v103);
    float32x4_t v103 = &v104;
    float64x2_t v102 = &v101[8];
    unint64_t v31 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2)
    {
LABEL_42:
      uint64_t v104 = *v31;
      uint64_t v105 = v31[1];
      goto LABEL_45;
    }
  }
  float32x4_t v103 = v31;
  float64x2_t v102 = v93;
  unint64_t v31 = (uint64_t *)v95;
  BOOL v94 = v95;
  float64x2_t v93 = &v92[8];
LABEL_45:
  *(_DWORD *)float64x2_t v92 = 1124007936;
  memset(&v92[4], 0, 60);
  if (v31 != (uint64_t *)v95) {
    j__free(v31);
  }
LABEL_47:
  if (!a5 || a10 == 0.0) {
    goto LABEL_62;
  }
  sub_10000CE64((uint64_t)v92, v59, v60, a15, a5, a6);
  if (*(void *)&v96[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v96);
  }
  if (*(int *)&v96[4] >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = v97;
    do
      *(_DWORD *)&v33[4 * v32++] = 0;
    while (v32 < *(int *)&v96[4]);
  }
  *(_OWORD *)float v96 = *(_OWORD *)v92;
  *(_OWORD *)&v96[16] = *(_OWORD *)&v92[16];
  *(_OWORD *)&v96[32] = *(_OWORD *)&v92[32];
  *(_OWORD *)&v96[48] = *(_OWORD *)&v92[48];
  if (v98 == &v99)
  {
    int v34 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2) {
      goto LABEL_57;
    }
  }
  else
  {
    j__free(v98);
    double v98 = &v99;
    int v97 = &v96[8];
    int v34 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2)
    {
LABEL_57:
      uint64_t v99 = *v34;
      uint64_t v100 = v34[1];
      goto LABEL_60;
    }
  }
  double v98 = v34;
  int v97 = v93;
  int v34 = (uint64_t *)v95;
  BOOL v94 = v95;
  float64x2_t v93 = &v92[8];
LABEL_60:
  *(_DWORD *)float64x2_t v92 = 1124007936;
  memset(&v92[4], 0, 60);
  if (v34 != (uint64_t *)v95) {
    j__free(v34);
  }
LABEL_62:
  sub_10000CE64((uint64_t)v92, v21, a13, a15, a7, a8);
  long long v85 = *(_OWORD *)v106;
  long long v86 = *(_OWORD *)&v106[16];
  long long v87 = *(_OWORD *)&v106[32];
  long long v88 = *(_OWORD *)&v106[48];
  float32x4_t v89 = (char *)&v85 + 8;
  float32x4_t v90 = v91;
  v91[0] = 0;
  v91[1] = 0;
  if (*(void *)&v106[56])
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&v106[56] + 20), 1u);
    if (*(int *)&v106[4] <= 2)
    {
LABEL_64:
      int v35 = v108;
      uint64_t v36 = v90;
      *(void *)float32x4_t v90 = *v108;
      v36[1] = v35[1];
      goto LABEL_67;
    }
  }
  else if (*(int *)&v106[4] <= 2)
  {
    goto LABEL_64;
  }
  DWORD1(v85) = 0;
  sub_1002931A8((uint64_t)&v85, (uint64_t)v106);
LABEL_67:
  long long v78 = *(_OWORD *)v101;
  long long v79 = *(_OWORD *)&v101[16];
  long long v80 = *(_OWORD *)&v101[32];
  long long v81 = *(_OWORD *)&v101[48];
  unint64_t v82 = (char *)&v78 + 8;
  unint64_t v83 = v84;
  v84[0] = 0;
  v84[1] = 0;
  if (*(void *)&v101[56])
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&v101[56] + 20), 1u);
    if (*(int *)&v101[4] <= 2)
    {
LABEL_69:
      int v37 = v103;
      uint64_t v38 = v83;
      *(void *)unint64_t v83 = *(void *)v103;
      v38[1] = v37[1];
      goto LABEL_72;
    }
  }
  else if (*(int *)&v101[4] <= 2)
  {
    goto LABEL_69;
  }
  DWORD1(v78) = 0;
  sub_1002931A8((uint64_t)&v78, (uint64_t)v101);
LABEL_72:
  long long v71 = *(_OWORD *)v96;
  long long v72 = *(_OWORD *)&v96[16];
  long long v73 = *(_OWORD *)&v96[32];
  long long v74 = *(_OWORD *)&v96[48];
  uint64_t v75 = (char *)&v71 + 8;
  uint64_t v76 = v77;
  v77[0] = 0;
  v77[1] = 0;
  if (*(void *)&v96[56])
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 1u);
    if (*(int *)&v96[4] <= 2)
    {
LABEL_74:
      double v39 = v98;
      uint64_t v40 = v76;
      *(void *)uint64_t v76 = *(void *)v98;
      v40[1] = v39[1];
      goto LABEL_77;
    }
  }
  else if (*(int *)&v96[4] <= 2)
  {
    goto LABEL_74;
  }
  DWORD1(v71) = 0;
  sub_1002931A8((uint64_t)&v71, (uint64_t)v96);
LABEL_77:
  long long v64 = *(_OWORD *)v92;
  long long v65 = *(_OWORD *)&v92[16];
  long long v66 = *(_OWORD *)&v92[32];
  long long v67 = *(_OWORD *)&v92[48];
  int v68 = (char *)&v64 + 8;
  double v69 = v70;
  v70[0] = 0;
  v70[1] = 0;
  if (!*(void *)&v92[56])
  {
    if (*(int *)&v92[4] <= 2) {
      goto LABEL_79;
    }
LABEL_81:
    DWORD1(v64) = 0;
    sub_1002931A8((uint64_t)&v64, (uint64_t)v92);
    goto LABEL_82;
  }
  atomic_fetch_add((atomic_uint *volatile)(*(void *)&v92[56] + 20), 1u);
  if (*(int *)&v92[4] > 2) {
    goto LABEL_81;
  }
LABEL_79:
  unint64_t v41 = v94;
  uint64_t v42 = v69;
  *(void *)double v69 = *(void *)v94;
  v42[1] = v41[1];
LABEL_82:
  sub_10027CAF8((int *)&v85, (uint64_t)&v78, (uint64_t)&v71, (uint64_t)&v64, a14, a9, a10);
  if (*((void *)&v67 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v67 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v64);
  }
  *((void *)&v67 + 1) = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  if (SDWORD1(v64) >= 1)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v68;
    do
      *(_DWORD *)&v44[4 * v43++] = 0;
    while (v43 < SDWORD1(v64));
  }
  if (v69 != v70) {
    j__free(v69);
  }
  if (*((void *)&v74 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v74 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v71);
  }
  *((void *)&v74 + 1) = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  if (SDWORD1(v71) >= 1)
  {
    uint64_t v45 = 0;
    double v46 = v75;
    do
      *(_DWORD *)&v46[4 * v45++] = 0;
    while (v45 < SDWORD1(v71));
  }
  if (v76 != v77) {
    j__free(v76);
  }
  if (*((void *)&v81 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v81 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v78);
  }
  *((void *)&v81 + 1) = 0;
  long long v79 = 0u;
  long long v80 = 0u;
  if (SDWORD1(v78) >= 1)
  {
    uint64_t v47 = 0;
    uint64_t v48 = v82;
    do
      *(_DWORD *)&v48[4 * v47++] = 0;
    while (v47 < SDWORD1(v78));
  }
  if (v83 != v84) {
    j__free(v83);
  }
  if (*((void *)&v88 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v88 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v85);
  }
  *((void *)&v88 + 1) = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  if (SDWORD1(v85) >= 1)
  {
    uint64_t v49 = 0;
    double v50 = v89;
    do
      *(_DWORD *)&v50[4 * v49++] = 0;
    while (v49 < SDWORD1(v85));
  }
  if (v90 != v91) {
    j__free(v90);
  }
  if (*(void *)&v92[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v92[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v92);
  }
  *(void *)&v92[56] = 0;
  memset(&v92[16], 0, 32);
  if (*(int *)&v92[4] >= 1)
  {
    uint64_t v51 = 0;
    double v52 = v93;
    do
      *(_DWORD *)&v52[4 * v51++] = 0;
    while (v51 < *(int *)&v92[4]);
  }
  if (v94 != v95) {
    j__free(v94);
  }
  if (*(void *)&v96[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v96);
  }
  *(void *)&v96[56] = 0;
  memset(&v96[16], 0, 32);
  if (*(int *)&v96[4] >= 1)
  {
    uint64_t v53 = 0;
    double v54 = v97;
    do
      *(_DWORD *)&v54[4 * v53++] = 0;
    while (v53 < *(int *)&v96[4]);
  }
  if (v98 != &v99) {
    j__free(v98);
  }
  if (*(void *)&v101[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v101[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v101);
  }
  *(void *)&v101[56] = 0;
  memset(&v101[16], 0, 32);
  if (*(int *)&v101[4] >= 1)
  {
    uint64_t v55 = 0;
    double v56 = v102;
    do
      *(_DWORD *)&v56[4 * v55++] = 0;
    while (v55 < *(int *)&v101[4]);
  }
  if (v103 != &v104) {
    j__free(v103);
  }
  if (*(void *)&v106[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v106[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v106);
  }
  *(void *)&v106[56] = 0;
  memset(&v106[16], 0, 32);
  if (*(int *)&v106[4] >= 1)
  {
    uint64_t v57 = 0;
    BOOL v58 = v107;
    do
      *(_DWORD *)&v58[4 * v57++] = 0;
    while (v57 < *(int *)&v106[4]);
  }
  if (v108 != &v109) {
    j__free(v108);
  }
}

void sub_10026CA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000094F4((uint64_t)&a31);
  sub_1000094F4((uint64_t)&a43);
  sub_1000094F4((uint64_t)&a55);
  sub_1000094F4((uint64_t)&a67);
  sub_1000094F4((uint64_t)&STACK[0x230]);
  sub_1000094F4((uint64_t)&STACK[0x290]);
  sub_1000094F4(v67 - 208);
  _Unwind_Resume(a1);
}

void sub_10026CB3C()
{
}

void sub_10026CB44(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int a11, int a12, int a13, int a14, unsigned int a15)
{
  *(_DWORD *)float64x2_t v106 = 1124007936;
  *(_OWORD *)&v106[4] = 0u;
  if (a14) {
    int v20 = a11;
  }
  else {
    int v20 = a12;
  }
  *(_OWORD *)&v106[20] = 0uLL;
  if (a14) {
    int v21 = a12;
  }
  else {
    int v21 = a11;
  }
  *(_OWORD *)&v106[36] = 0uLL;
  if ((a14 & 2) != 0) {
    int v22 = a13;
  }
  else {
    int v22 = v20;
  }
  if ((a14 & 2) != 0) {
    int v23 = v20;
  }
  else {
    int v23 = a13;
  }
  *(_OWORD *)&v106[48] = 0uLL;
  float64x2_t v107 = &v106[8];
  uint64_t v108 = &v109;
  if ((a14 & 4) != 0) {
    int v24 = a13;
  }
  else {
    int v24 = v21;
  }
  if ((a14 & 4) != 0) {
    int v25 = v21;
  }
  else {
    int v25 = a13;
  }
  int v59 = v24;
  int v60 = v25;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  *(_DWORD *)float64x2_t v101 = 1124007936;
  memset(&v101[4], 0, 60);
  float64x2_t v102 = &v101[8];
  float32x4_t v103 = &v104;
  uint64_t v105 = 0;
  uint64_t v104 = 0;
  *(_DWORD *)float v96 = 1124007936;
  memset(&v96[4], 0, 60);
  int v97 = &v96[8];
  double v98 = &v99;
  uint64_t v100 = 0;
  uint64_t v99 = 0;
  if (!a1) {
    goto LABEL_33;
  }
  sub_10000CE64((uint64_t)v92, a11, a12, a15, a1, a2);
  if (*(void *)&v106[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v106[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v106);
  }
  if (*(int *)&v106[4] >= 1)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v107;
    do
      *(_DWORD *)&v27[4 * v26++] = 0;
    while (v26 < *(int *)&v106[4]);
  }
  *(_OWORD *)float64x2_t v106 = *(_OWORD *)v92;
  *(_OWORD *)&v106[16] = *(_OWORD *)&v92[16];
  *(_OWORD *)&v106[32] = *(_OWORD *)&v92[32];
  *(_OWORD *)&v106[48] = *(_OWORD *)&v92[48];
  if (v108 == &v109)
  {
    double v28 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2) {
      goto LABEL_28;
    }
  }
  else
  {
    j__free(v108);
    float64x2_t v107 = &v106[8];
    uint64_t v108 = &v109;
    double v28 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2)
    {
LABEL_28:
      uint64_t v109 = *v28;
      uint64_t v110 = v28[1];
      goto LABEL_31;
    }
  }
  float64x2_t v107 = v93;
  uint64_t v108 = v28;
  double v28 = (uint64_t *)v95;
  BOOL v94 = v95;
  float64x2_t v93 = &v92[8];
LABEL_31:
  *(_DWORD *)float64x2_t v92 = 1124007936;
  memset(&v92[4], 0, 60);
  if (v28 != (uint64_t *)v95) {
    j__free(v28);
  }
LABEL_33:
  if (!a3) {
    goto LABEL_47;
  }
  sub_10000CE64((uint64_t)v92, v22, v23, a15, a3, a4);
  if (*(void *)&v101[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v101[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v101);
  }
  if (*(int *)&v101[4] >= 1)
  {
    uint64_t v29 = 0;
    int v30 = v102;
    do
      *(_DWORD *)&v30[4 * v29++] = 0;
    while (v29 < *(int *)&v101[4]);
  }
  *(_OWORD *)float64x2_t v101 = *(_OWORD *)v92;
  *(_OWORD *)&v101[16] = *(_OWORD *)&v92[16];
  *(_OWORD *)&v101[32] = *(_OWORD *)&v92[32];
  *(_OWORD *)&v101[48] = *(_OWORD *)&v92[48];
  if (v103 == &v104)
  {
    unint64_t v31 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2) {
      goto LABEL_42;
    }
  }
  else
  {
    j__free(v103);
    float32x4_t v103 = &v104;
    float64x2_t v102 = &v101[8];
    unint64_t v31 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2)
    {
LABEL_42:
      uint64_t v104 = *v31;
      uint64_t v105 = v31[1];
      goto LABEL_45;
    }
  }
  float32x4_t v103 = v31;
  float64x2_t v102 = v93;
  unint64_t v31 = (uint64_t *)v95;
  BOOL v94 = v95;
  float64x2_t v93 = &v92[8];
LABEL_45:
  *(_DWORD *)float64x2_t v92 = 1124007936;
  memset(&v92[4], 0, 60);
  if (v31 != (uint64_t *)v95) {
    j__free(v31);
  }
LABEL_47:
  if (!a5 || a10 == 0.0) {
    goto LABEL_62;
  }
  sub_10000CE64((uint64_t)v92, v59, v60, a15, a5, a6);
  if (*(void *)&v96[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v96);
  }
  if (*(int *)&v96[4] >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = v97;
    do
      *(_DWORD *)&v33[4 * v32++] = 0;
    while (v32 < *(int *)&v96[4]);
  }
  *(_OWORD *)float v96 = *(_OWORD *)v92;
  *(_OWORD *)&v96[16] = *(_OWORD *)&v92[16];
  *(_OWORD *)&v96[32] = *(_OWORD *)&v92[32];
  *(_OWORD *)&v96[48] = *(_OWORD *)&v92[48];
  if (v98 == &v99)
  {
    int v34 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2) {
      goto LABEL_57;
    }
  }
  else
  {
    j__free(v98);
    double v98 = &v99;
    int v97 = &v96[8];
    int v34 = (uint64_t *)v94;
    if (*(int *)&v92[4] <= 2)
    {
LABEL_57:
      uint64_t v99 = *v34;
      uint64_t v100 = v34[1];
      goto LABEL_60;
    }
  }
  double v98 = v34;
  int v97 = v93;
  int v34 = (uint64_t *)v95;
  BOOL v94 = v95;
  float64x2_t v93 = &v92[8];
LABEL_60:
  *(_DWORD *)float64x2_t v92 = 1124007936;
  memset(&v92[4], 0, 60);
  if (v34 != (uint64_t *)v95) {
    j__free(v34);
  }
LABEL_62:
  sub_10000CE64((uint64_t)v92, v21, a13, a15, a7, a8);
  long long v85 = *(_OWORD *)v106;
  long long v86 = *(_OWORD *)&v106[16];
  long long v87 = *(_OWORD *)&v106[32];
  long long v88 = *(_OWORD *)&v106[48];
  float32x4_t v89 = (char *)&v85 + 8;
  float32x4_t v90 = v91;
  v91[0] = 0;
  v91[1] = 0;
  if (*(void *)&v106[56])
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&v106[56] + 20), 1u);
    if (*(int *)&v106[4] <= 2)
    {
LABEL_64:
      int v35 = v108;
      uint64_t v36 = v90;
      *(void *)float32x4_t v90 = *v108;
      v36[1] = v35[1];
      goto LABEL_67;
    }
  }
  else if (*(int *)&v106[4] <= 2)
  {
    goto LABEL_64;
  }
  DWORD1(v85) = 0;
  sub_1002931A8((uint64_t)&v85, (uint64_t)v106);
LABEL_67:
  long long v78 = *(_OWORD *)v101;
  long long v79 = *(_OWORD *)&v101[16];
  long long v80 = *(_OWORD *)&v101[32];
  long long v81 = *(_OWORD *)&v101[48];
  unint64_t v82 = (char *)&v78 + 8;
  unint64_t v83 = v84;
  v84[0] = 0;
  v84[1] = 0;
  if (*(void *)&v101[56])
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&v101[56] + 20), 1u);
    if (*(int *)&v101[4] <= 2)
    {
LABEL_69:
      int v37 = v103;
      uint64_t v38 = v83;
      *(void *)unint64_t v83 = *(void *)v103;
      v38[1] = v37[1];
      goto LABEL_72;
    }
  }
  else if (*(int *)&v101[4] <= 2)
  {
    goto LABEL_69;
  }
  DWORD1(v78) = 0;
  sub_1002931A8((uint64_t)&v78, (uint64_t)v101);
LABEL_72:
  long long v71 = *(_OWORD *)v96;
  long long v72 = *(_OWORD *)&v96[16];
  long long v73 = *(_OWORD *)&v96[32];
  long long v74 = *(_OWORD *)&v96[48];
  uint64_t v75 = (char *)&v71 + 8;
  uint64_t v76 = v77;
  v77[0] = 0;
  v77[1] = 0;
  if (*(void *)&v96[56])
  {
    atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 1u);
    if (*(int *)&v96[4] <= 2)
    {
LABEL_74:
      double v39 = v98;
      uint64_t v40 = v76;
      *(void *)uint64_t v76 = *(void *)v98;
      v40[1] = v39[1];
      goto LABEL_77;
    }
  }
  else if (*(int *)&v96[4] <= 2)
  {
    goto LABEL_74;
  }
  DWORD1(v71) = 0;
  sub_1002931A8((uint64_t)&v71, (uint64_t)v96);
LABEL_77:
  long long v64 = *(_OWORD *)v92;
  long long v65 = *(_OWORD *)&v92[16];
  long long v66 = *(_OWORD *)&v92[32];
  long long v67 = *(_OWORD *)&v92[48];
  int v68 = (char *)&v64 + 8;
  double v69 = v70;
  v70[0] = 0;
  v70[1] = 0;
  if (!*(void *)&v92[56])
  {
    if (*(int *)&v92[4] <= 2) {
      goto LABEL_79;
    }
LABEL_81:
    DWORD1(v64) = 0;
    sub_1002931A8((uint64_t)&v64, (uint64_t)v92);
    goto LABEL_82;
  }
  atomic_fetch_add((atomic_uint *volatile)(*(void *)&v92[56] + 20), 1u);
  if (*(int *)&v92[4] > 2) {
    goto LABEL_81;
  }
LABEL_79:
  unint64_t v41 = v94;
  uint64_t v42 = v69;
  *(void *)double v69 = *(void *)v94;
  v42[1] = v41[1];
LABEL_82:
  sub_10027CAF8((int *)&v85, (uint64_t)&v78, (uint64_t)&v71, (uint64_t)&v64, a14, a9, a10);
  if (*((void *)&v67 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v67 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v64);
  }
  *((void *)&v67 + 1) = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  if (SDWORD1(v64) >= 1)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v68;
    do
      *(_DWORD *)&v44[4 * v43++] = 0;
    while (v43 < SDWORD1(v64));
  }
  if (v69 != v70) {
    j__free(v69);
  }
  if (*((void *)&v74 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v74 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v71);
  }
  *((void *)&v74 + 1) = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  if (SDWORD1(v71) >= 1)
  {
    uint64_t v45 = 0;
    double v46 = v75;
    do
      *(_DWORD *)&v46[4 * v45++] = 0;
    while (v45 < SDWORD1(v71));
  }
  if (v76 != v77) {
    j__free(v76);
  }
  if (*((void *)&v81 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v81 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v78);
  }
  *((void *)&v81 + 1) = 0;
  long long v79 = 0u;
  long long v80 = 0u;
  if (SDWORD1(v78) >= 1)
  {
    uint64_t v47 = 0;
    uint64_t v48 = v82;
    do
      *(_DWORD *)&v48[4 * v47++] = 0;
    while (v47 < SDWORD1(v78));
  }
  if (v83 != v84) {
    j__free(v83);
  }
  if (*((void *)&v88 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v88 + 1) + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v85);
  }
  *((void *)&v88 + 1) = 0;
  long long v86 = 0u;
  long long v87 = 0u;
  if (SDWORD1(v85) >= 1)
  {
    uint64_t v49 = 0;
    double v50 = v89;
    do
      *(_DWORD *)&v50[4 * v49++] = 0;
    while (v49 < SDWORD1(v85));
  }
  if (v90 != v91) {
    j__free(v90);
  }
  if (*(void *)&v92[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v92[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v92);
  }
  *(void *)&v92[56] = 0;
  memset(&v92[16], 0, 32);
  if (*(int *)&v92[4] >= 1)
  {
    uint64_t v51 = 0;
    double v52 = v93;
    do
      *(_DWORD *)&v52[4 * v51++] = 0;
    while (v51 < *(int *)&v92[4]);
  }
  if (v94 != v95) {
    j__free(v94);
  }
  if (*(void *)&v96[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v96);
  }
  *(void *)&v96[56] = 0;
  memset(&v96[16], 0, 32);
  if (*(int *)&v96[4] >= 1)
  {
    uint64_t v53 = 0;
    double v54 = v97;
    do
      *(_DWORD *)&v54[4 * v53++] = 0;
    while (v53 < *(int *)&v96[4]);
  }
  if (v98 != &v99) {
    j__free(v98);
  }
  if (*(void *)&v101[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v101[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v101);
  }
  *(void *)&v101[56] = 0;
  memset(&v101[16], 0, 32);
  if (*(int *)&v101[4] >= 1)
  {
    uint64_t v55 = 0;
    double v56 = v102;
    do
      *(_DWORD *)&v56[4 * v55++] = 0;
    while (v55 < *(int *)&v101[4]);
  }
  if (v103 != &v104) {
    j__free(v103);
  }
  if (*(void *)&v106[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v106[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v106);
  }
  *(void *)&v106[56] = 0;
  memset(&v106[16], 0, 32);
  if (*(int *)&v106[4] >= 1)
  {
    uint64_t v57 = 0;
    BOOL v58 = v107;
    do
      *(_DWORD *)&v58[4 * v57++] = 0;
    while (v57 < *(int *)&v106[4]);
  }
  if (v108 != &v109) {
    j__free(v108);
  }
}

void sub_10026D5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000094F4((uint64_t)&a31);
  sub_1000094F4((uint64_t)&a43);
  sub_1000094F4((uint64_t)&a55);
  sub_1000094F4((uint64_t)&a67);
  sub_1000094F4((uint64_t)&STACK[0x230]);
  sub_1000094F4((uint64_t)&STACK[0x290]);
  sub_1000094F4(v67 - 208);
  _Unwind_Resume(a1);
}

void sub_10026D680()
{
}

void sub_10026D688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6, double a7)
{
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    long long v15 = *(_OWORD *)(v14 + 16);
    long long v103 = *(_OWORD *)v14;
    long long v104 = v15;
    long long v105 = *(_OWORD *)(v14 + 32);
    uint64_t v16 = *(void *)(v14 + 56);
    uint64_t v106 = *(void *)(v14 + 48);
    uint64_t v107 = v16;
    uint64_t v108 = (int *)&v103 + 2;
    uint64_t v109 = v110;
    v110[0] = 0;
    v110[1] = 0;
    if (v16) {
      atomic_fetch_add((atomic_uint *volatile)(v16 + 20), 1u);
    }
    if (*(int *)(v14 + 4) > 2)
    {
      DWORD1(v103) = 0;
      sub_1002931A8((uint64_t)&v103, v14);
    }
    else
    {
      int v17 = *(unint64_t **)(v14 + 72);
      uint64_t v18 = v109;
      *uint64_t v109 = *v17;
      v18[1] = v17[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v103);
  }
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v19 = *(void *)(a2 + 8);
    long long v20 = *(_OWORD *)(v19 + 16);
    long long v95 = *(_OWORD *)v19;
    long long v96 = v20;
    long long v97 = *(_OWORD *)(v19 + 32);
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v98 = *(void *)(v19 + 48);
    uint64_t v99 = v21;
    uint64_t v100 = (char *)&v95 + 8;
    float64x2_t v101 = v102;
    v102[0] = 0;
    v102[1] = 0;
    if (v21) {
      atomic_fetch_add((atomic_uint *volatile)(v21 + 20), 1u);
    }
    if (*(int *)(v19 + 4) > 2)
    {
      DWORD1(v95) = 0;
      sub_1002931A8((uint64_t)&v95, v19);
    }
    else
    {
      int v22 = *(void **)(v19 + 72);
      int v23 = v101;
      *(void *)float64x2_t v101 = *v22;
      v23[1] = v22[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v95);
  }
  if (a7 == 0.0)
  {
    *(_DWORD *)float32x4_t v90 = 1124007936;
    memset(&v90[4], 0, 60);
    uint64_t v91 = &v90[8];
    float64x2_t v92 = &v93;
    unint64_t v93 = 0;
    uint64_t v94 = 0;
  }
  else if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v24 = *(void *)(a3 + 8);
    long long v25 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)float32x4_t v90 = *(_OWORD *)v24;
    *(_OWORD *)&v90[16] = v25;
    *(_OWORD *)&v90[32] = *(_OWORD *)(v24 + 32);
    uint64_t v26 = *(void *)(v24 + 56);
    *(void *)&v90[48] = *(void *)(v24 + 48);
    *(void *)&v90[56] = v26;
    uint64_t v91 = &v90[8];
    float64x2_t v92 = &v93;
    unint64_t v93 = 0;
    uint64_t v94 = 0;
    if (v26) {
      atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
    }
    if (*(int *)(v24 + 4) > 2)
    {
      *(_DWORD *)&v90[4] = 0;
      sub_1002931A8((uint64_t)v90, v24);
    }
    else
    {
      uint64_t v27 = *(void **)(v24 + 72);
      double v28 = v92;
      *(void *)float64x2_t v92 = *v27;
      v28[1] = v27[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)v90);
  }
  int v29 = *v108;
  int v30 = v108[1];
  unsigned int v31 = v103 & 0xFFF;
  if (v31 != (v95 & 0xFFF))
  {
    long long v82 = 0uLL;
    *(_OWORD *)sub_1002D19D8(&v82, 16) = *(_OWORD *)"type == B.type()";
    sub_1002D2278(-215, (uint64_t *)&v82, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1558);
  }
  if ((v103 & 0xFF7) - 5 >= 2)
  {
    long long v82 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v82, 210), "(type == (((5) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((1)-1) << 3)) || type == (((5) & ((1 << 3) - 1)) + (((2)-1) << 3)) || type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3)))", 210);
    sub_1002D2278(-215, (uint64_t *)&v82, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1558);
  }
  switch(a5 & 3)
  {
    case 1:
      unsigned int v32 = HIDWORD(v95);
      if (v29 != DWORD2(v95))
      {
        long long v82 = 0uLL;
        uint64_t v34 = sub_1002D19D8(&v82, 20);
        *(_DWORD *)(v34 + 16) = 1852140576;
        *(_OWORD *)uint64_t v34 = *(_OWORD *)"a_size.height == len";
        sub_1002D2278(-215, (uint64_t *)&v82, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1570);
      }
      goto LABEL_39;
    case 2:
      unsigned int v32 = DWORD2(v95);
      if (v30 != HIDWORD(v95))
      {
        long long v82 = 0uLL;
        uint64_t v35 = sub_1002D19D8(&v82, 19);
        *(_DWORD *)(v35 + 15) = 1852140576;
        *(_OWORD *)uint64_t v35 = *(_OWORD *)"a_size.width == len";
        sub_1002D2278(-215, (uint64_t *)&v82, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1575);
      }
      goto LABEL_35;
    case 3:
      unsigned int v32 = DWORD2(v95);
      if (v29 != HIDWORD(v95))
      {
        long long v82 = 0uLL;
        uint64_t v37 = sub_1002D19D8(&v82, 20);
        *(_DWORD *)(v37 + 16) = 1852140576;
        *(_OWORD *)uint64_t v37 = *(_OWORD *)"a_size.height == len";
        sub_1002D2278(-215, (uint64_t *)&v82, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1580);
      }
LABEL_39:
      unsigned int v36 = v108[1];
      if (*(void *)&v90[16]) {
        goto LABEL_40;
      }
      goto LABEL_56;
    default:
      unsigned int v32 = HIDWORD(v95);
      if (v30 != DWORD2(v95))
      {
        long long v82 = 0uLL;
        uint64_t v33 = sub_1002D19D8(&v82, 19);
        *(_DWORD *)(v33 + 15) = 1852140576;
        *(_OWORD *)uint64_t v33 = *(_OWORD *)"a_size.width == len";
        sub_1002D2278(-215, (uint64_t *)&v82, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1565);
      }
LABEL_35:
      unsigned int v36 = *v108;
      if (!*(void *)&v90[16]) {
        goto LABEL_56;
      }
LABEL_40:
      if (*(int *)&v90[4] >= 3)
      {
        double v39 = (int *)(v91 + 4);
        uint64_t v40 = 1;
        uint64_t v41 = *(_DWORD *)&v90[4] & 0xFFFFFFFE;
        uint64_t v42 = 1;
        do
        {
          v40 *= *(v39 - 1);
          v42 *= *v39;
          v39 += 2;
          v41 -= 2;
        }
        while (v41);
        uint64_t v38 = v42 * v40;
        unint64_t v43 = *(unsigned int *)&v90[4] - (unint64_t)(*(_DWORD *)&v90[4] & 0xFFFFFFFE);
        if (v43)
        {
          uint64_t v44 = (int *)&v91[(4 * *(unsigned int *)&v90[4]) & 0x3FFFFFFF8];
          do
          {
            uint64_t v45 = *v44++;
            v38 *= v45;
            --v43;
          }
          while (v43);
        }
      }
      else
      {
        uint64_t v38 = *(int *)&v90[12] * (uint64_t)*(int *)&v90[8];
      }
      if (!*(_DWORD *)&v90[4] || !v38) {
        goto LABEL_56;
      }
      if ((*(_WORD *)v90 & 0xFFF) != v31)
      {
        long long v82 = 0uLL;
        *(_OWORD *)sub_1002D19D8(&v82, 16) = *(_OWORD *)"C.type() == type";
        sub_1002D2278(-215, (uint64_t *)&v82, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1588);
      }
      if ((a5 & 4) != 0)
      {
        if (*(void *)&v90[8] == __PAIR64__(v36, v32)) {
          goto LABEL_56;
        }
LABEL_55:
        long long v82 = 0uLL;
        qmemcpy((void *)sub_1002D19D8(&v82, 158), "(((flags&GEMM_3_T) == 0 && C.rows == d_size.height && C.cols == d_size.width) || ((flags&GEMM_3_T) != 0 && C.rows == d_size.width && C.cols == d_size.height))", 158);
        sub_1002D2278(-215, (uint64_t *)&v82, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1588);
      }
      if (*(void *)&v90[8] != __PAIR64__(v32, v36)) {
        goto LABEL_55;
      }
LABEL_56:
      sub_10029EDE8(a4, v36, v32, v31, -1, 0, 0);
      if (sub_10029A230((_DWORD *)a4) == 0x10000)
      {
        uint64_t v46 = *(void *)(a4 + 8);
        long long v47 = *(_OWORD *)(v46 + 16);
        long long v82 = *(_OWORD *)v46;
        long long v83 = v47;
        long long v84 = *(_OWORD *)(v46 + 32);
        uint64_t v48 = *(void *)(v46 + 56);
        uint64_t v85 = *(void *)(v46 + 48);
        uint64_t v86 = v48;
        long long v87 = (char *)&v82 + 8;
        long long v88 = v89;
        v89[0] = 0;
        v89[1] = 0;
        if (v48) {
          atomic_fetch_add((atomic_uint *volatile)(v48 + 20), 1u);
        }
        if (*(int *)(v46 + 4) > 2)
        {
          DWORD1(v82) = 0;
          sub_1002931A8((uint64_t)&v82, v46);
        }
        else
        {
          uint64_t v49 = *(void **)(v46 + 72);
          double v50 = v88;
          *(void *)long long v88 = *v49;
          v50[1] = v49[1];
        }
      }
      else
      {
        sub_100299554(a4, -1, (uint64_t)&v82);
      }
      if ((a5 & 4) != 0 && *(void *)&v90[16] == (void)v83)
      {
        *(_DWORD *)uint64_t v77 = 16842752;
        *(void *)&v77[8] = v90;
        *(void *)&v77[16] = 0;
        *(_DWORD *)long long v73 = 33619968;
        *(void *)&v73[8] = v90;
        *(void *)&v73[16] = 0;
        sub_100298524((uint64_t)v77, (uint64_t)v73);
        a5 &= ~4u;
      }
      *(_DWORD *)uint64_t v77 = 1124007936;
      memset(&v77[4], 0, 60);
      long long v78 = &v77[8];
      long long v79 = &v80;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      if ((void)v83 == (void)v104 || (uint64_t v51 = &v82, (void)v83 == (void)v96))
      {
        *(_DWORD *)long long v73 = 1124007936;
        memset(&v73[4], 0, 60);
        long long v74 = &v73[8];
        uint64_t v75 = v76;
        v76[0] = 0;
        v76[1] = 0;
        unint64_t __src = __PAIR64__(v32, v36);
        sub_100292534(v73, 2, (uint64_t *)&__src, v82 & 0xFFF);
        if (*(void *)&v77[56]
          && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v77[56] + 20), 0xFFFFFFFF) == 1)
        {
          sub_1002932F4((uint64_t)v77);
        }
        if (*(int *)&v77[4] >= 1)
        {
          uint64_t v52 = 0;
          uint64_t v53 = v78;
          do
            *(_DWORD *)&v53[4 * v52++] = 0;
          while (v52 < *(int *)&v77[4]);
        }
        *(_OWORD *)uint64_t v77 = *(_OWORD *)v73;
        *(_OWORD *)&v77[16] = *(_OWORD *)&v73[16];
        *(_OWORD *)&v77[32] = *(_OWORD *)&v73[32];
        *(_OWORD *)&v77[48] = *(_OWORD *)&v73[48];
        if (v79 == &v80)
        {
          double v54 = v75;
          if (*(int *)&v73[4] <= 2) {
            goto LABEL_76;
          }
        }
        else
        {
          j__free(v79);
          long long v78 = &v77[8];
          long long v79 = &v80;
          double v54 = v75;
          if (*(int *)&v73[4] <= 2)
          {
LABEL_76:
            uint64_t v80 = *v54;
            uint64_t v81 = v54[1];
LABEL_79:
            *(_DWORD *)long long v73 = 1124007936;
            memset(&v73[4], 0, 60);
            if (v54 != v76) {
              j__free(v54);
            }
            uint64_t v51 = (long long *)v77;
            goto LABEL_82;
          }
        }
        long long v78 = v74;
        long long v79 = v54;
        long long v74 = &v73[8];
        uint64_t v75 = v76;
        double v54 = v76;
        goto LABEL_79;
      }
LABEL_82:
      switch(v31)
      {
        case 5u:
        case 0xDu:
          float v55 = a6;
          float v56 = a7;
          sub_10026C000(v104, v110[0], v96, v102[0], *(uint64_t *)&v90[16], v93, *((void *)v51 + 2), *((void *)v51 + 10), v55, v56, v29, v30, *((_DWORD *)v51 + 3), a5, v31);
          goto LABEL_88;
        case 6u:
          uint64_t v57 = v104;
          unint64_t v58 = v110[0];
          uint64_t v59 = v96;
          unint64_t v60 = v102[0];
          unsigned int v61 = 6;
          uint64_t v62 = v51;
          goto LABEL_87;
        case 0xEu:
          uint64_t v57 = v104;
          unint64_t v58 = v110[0];
          uint64_t v59 = v96;
          unint64_t v60 = v102[0];
          unsigned int v61 = 14;
          uint64_t v62 = &v82;
LABEL_87:
          sub_10026CB44(v57, v58, v59, v60, *(uint64_t *)&v90[16], v93, *((void *)v62 + 2), *((void *)v62 + 10), a6, a7, v29, v30, *((_DWORD *)v51 + 3), a5, v61);
LABEL_88:
          if (v51 != &v82)
          {
            *(_DWORD *)long long v73 = 33619968;
            *(void *)&v73[8] = &v82;
            *(void *)&v73[16] = 0;
            sub_10025401C((uint64_t)v51, (uint64_t)v73);
          }
          if (*(void *)&v77[56]
            && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v77[56] + 20), 0xFFFFFFFF) == 1)
          {
            sub_1002932F4((uint64_t)v77);
          }
          *(void *)&v77[56] = 0;
          memset(&v77[16], 0, 32);
          if (*(int *)&v77[4] >= 1)
          {
            uint64_t v63 = 0;
            long long v64 = v78;
            do
              *(_DWORD *)&v64[4 * v63++] = 0;
            while (v63 < *(int *)&v77[4]);
          }
          if (v79 != &v80) {
            j__free(v79);
          }
          if (v86 && atomic_fetch_add((atomic_uint *volatile)(v86 + 20), 0xFFFFFFFF) == 1) {
            sub_1002932F4((uint64_t)&v82);
          }
          uint64_t v86 = 0;
          long long v83 = 0u;
          long long v84 = 0u;
          if (SDWORD1(v82) >= 1)
          {
            uint64_t v65 = 0;
            long long v66 = v87;
            do
              *(_DWORD *)&v66[4 * v65++] = 0;
            while (v65 < SDWORD1(v82));
          }
          if (v88 != v89) {
            j__free(v88);
          }
          if (*(void *)&v90[56]
            && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v90[56] + 20), 0xFFFFFFFF) == 1)
          {
            sub_1002932F4((uint64_t)v90);
          }
          *(void *)&v90[56] = 0;
          memset(&v90[16], 0, 32);
          if (*(int *)&v90[4] >= 1)
          {
            uint64_t v67 = 0;
            int v68 = v91;
            do
              *(_DWORD *)&v68[4 * v67++] = 0;
            while (v67 < *(int *)&v90[4]);
          }
          if (v92 != &v93) {
            j__free(v92);
          }
          if (v99 && atomic_fetch_add((atomic_uint *volatile)(v99 + 20), 0xFFFFFFFF) == 1) {
            sub_1002932F4((uint64_t)&v95);
          }
          uint64_t v99 = 0;
          long long v96 = 0u;
          long long v97 = 0u;
          if (SDWORD1(v95) >= 1)
          {
            uint64_t v69 = 0;
            double v70 = v100;
            do
              *(_DWORD *)&v70[4 * v69++] = 0;
            while (v69 < SDWORD1(v95));
          }
          if (v101 != v102) {
            j__free(v101);
          }
          if (v107 && atomic_fetch_add((atomic_uint *volatile)(v107 + 20), 0xFFFFFFFF) == 1) {
            sub_1002932F4((uint64_t)&v103);
          }
          uint64_t v107 = 0;
          long long v104 = 0u;
          long long v105 = 0u;
          if (SDWORD1(v103) >= 1)
          {
            uint64_t v71 = 0;
            long long v72 = v108;
            do
              v72[v71++] = 0;
            while (v71 < SDWORD1(v103));
          }
          if (v109 != v110) {
            j__free(v109);
          }
          return;
        default:
          *(_OWORD *)long long v73 = 0uLL;
          qmemcpy((void *)sub_1002D19D8(v73, 49), "type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", 49);
          sub_1002D2278(-215, (uint64_t *)v73, "gemm", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1623);
      }
  }
}

void sub_10026E37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a2) {
    sub_10000B6A8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10026E568(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v82 = a4;
  sub_1002D6AE8(v80, &off_100494F30);
  unsigned int v7 = sub_10029AB74((int *)a1, -1);
  if (v7 != sub_10029AB74((int *)a2, -1))
  {
    long long v72 = 0uLL;
    uint64_t v8 = sub_1002D19D8(&v72, 20);
    *(_DWORD *)(v8 + 16) = 690513264;
    *(_OWORD *)uint64_t v8 = *(_OWORD *)"type == _src2.type()";
    sub_1002D2278(-215, (uint64_t *)&v72, "scaleAdd", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2415);
  }
  unsigned int v9 = v7 & 7;
  if (v9 <= 4)
  {
    sub_1002141AC(a1, a2, a3, v7 & 7, v82, 1.0, 0.0);
    goto LABEL_84;
  }
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v72 = *(_OWORD *)v10;
    long long v73 = v11;
    long long v74 = *(_OWORD *)(v10 + 32);
    uint64_t v12 = *(void *)(v10 + 56);
    uint64_t v75 = *(void *)(v10 + 48);
    uint64_t v76 = v12;
    uint64_t v77 = (int32x4_t *)((char *)&v72 + 8);
    long long v78 = v79;
    v79[0] = 0;
    v79[1] = 0;
    if (v12) {
      atomic_fetch_add((atomic_uint *volatile)(v12 + 20), 1u);
    }
    if (*(int *)(v10 + 4) > 2)
    {
      DWORD1(v72) = 0;
      sub_1002931A8((uint64_t)&v72, v10);
    }
    else
    {
      uint64_t v13 = *(void **)(v10 + 72);
      uint64_t v14 = v78;
      *long long v78 = *v13;
      v14[1] = v13[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v72);
  }
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    long long v16 = *(_OWORD *)(v15 + 16);
    long long v64 = *(_OWORD *)v15;
    long long v65 = v16;
    long long v66 = *(_OWORD *)(v15 + 32);
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v67 = *(void *)(v15 + 48);
    uint64_t v68 = v17;
    uint64_t v69 = (_DWORD *)&v64 + 2;
    double v70 = v71;
    v71[0] = 0;
    v71[1] = 0;
    if (v17) {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
    }
    if (*(int *)(v15 + 4) > 2)
    {
      DWORD1(v64) = 0;
      sub_1002931A8((uint64_t)&v64, v15);
    }
    else
    {
      uint64_t v18 = *(void **)(v15 + 72);
      uint64_t v19 = v70;
      *(void *)double v70 = *v18;
      v19[1] = v18[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v64);
  }
  unint64_t v20 = v77[-1].u32[3];
  if (v20 != *(v69 - 1)) {
    goto LABEL_30;
  }
  if (v20 == 2)
  {
    if (v77->i32[0] == *v69 && v77->i32[1] == v69[1]) {
      goto LABEL_31;
    }
LABEL_30:
    long long v56 = 0uLL;
    qmemcpy((void *)sub_1002D19D8(&v56, 22), "src1.size == src2.size", 22);
    sub_1002D2278(-215, (uint64_t *)&v56, "scaleAdd", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2427);
  }
  if ((int)v20 >= 1)
  {
    if (v77->i32[0] != *v69) {
      goto LABEL_30;
    }
    uint64_t v21 = 1;
    do
    {
      unint64_t v22 = v21;
      if (v20 == v21) {
        break;
      }
      __int32 v23 = v77->i32[v21];
      int v24 = v69[v21++];
    }
    while (v23 == v24);
    if (v22 < v20) {
      goto LABEL_30;
    }
  }
LABEL_31:
  sub_100295520((int *)a3, SDWORD1(v72), v77->i64, v7, 0xFFFFFFFF, 0, 0);
  if (sub_10029A230((_DWORD *)a3) == 0x10000)
  {
    uint64_t v25 = *(void *)(a3 + 8);
    long long v26 = *(_OWORD *)(v25 + 16);
    long long v56 = *(_OWORD *)v25;
    long long v57 = v26;
    long long v58 = *(_OWORD *)(v25 + 32);
    uint64_t v27 = *(void *)(v25 + 56);
    uint64_t v59 = *(void *)(v25 + 48);
    uint64_t v60 = v27;
    unsigned int v61 = (char *)&v56 + 8;
    uint64_t v62 = v63;
    v63[0] = 0;
    v63[1] = 0;
    if (v27) {
      atomic_fetch_add((atomic_uint *volatile)(v27 + 20), 1u);
    }
    if (*(int *)(v25 + 4) > 2)
    {
      DWORD1(v56) = 0;
      sub_1002931A8((uint64_t)&v56, v25);
    }
    else
    {
      double v28 = *(void **)(v25 + 72);
      int v29 = v62;
      *(void *)uint64_t v62 = *v28;
      v29[1] = v28[1];
    }
  }
  else
  {
    sub_100299554(a3, -1, (uint64_t)&v56);
  }
  int v30 = ((v7 >> 3) & 0x1FF) + 1;
  float v31 = v82;
  float v55 = v31;
  if (v9 == 5) {
    unsigned int v32 = (double *)&v55;
  }
  else {
    unsigned int v32 = &v82;
  }
  if (v9 == 5) {
    uint64_t v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double *))sub_10026ED30;
  }
  else {
    uint64_t v33 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, double *))sub_10026EE38;
  }
  if ((BYTE1(v72) & 0x40) == 0 || (BYTE1(v64) & 0x40) == 0 || (BYTE1(v56) & 0x40) == 0)
  {
    v86[0] = (uint64_t)&v72;
    v86[1] = (uint64_t)&v64;
    v86[2] = (uint64_t)&v56;
    v86[3] = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    sub_10029127C((uint64_t)v52, v86, (uint64_t)&v83, -1);
    uint64_t v34 = (v30 * v54);
    uint64_t v35 = -1;
    while (++v35 < v53)
    {
      v33(v83, v84, v85, v34, v32);
      sub_1002912C8((uint64_t)v52);
    }
    goto LABEL_60;
  }
  if (SDWORD1(v72) >= 3)
  {
    if (DWORD1(v72) >= 8)
    {
      uint64_t v37 = DWORD1(v72) & 0xFFFFFFF8;
      uint64_t v38 = v77 + 1;
      v39.i64[0] = 0x100000001;
      v39.i64[1] = 0x100000001;
      uint64_t v40 = v37;
      v41.i64[0] = 0x100000001;
      v41.i64[1] = 0x100000001;
      do
      {
        int32x4_t v39 = vmulq_s32(v38[-1], v39);
        int32x4_t v41 = vmulq_s32(*v38, v41);
        v38 += 2;
        v40 -= 8;
      }
      while (v40);
      int8x16_t v42 = (int8x16_t)vmulq_s32(v41, v39);
      *(int32x2_t *)v42.i8 = vmul_s32(*(int32x2_t *)v42.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
      int v36 = v42.i32[0] * v42.i32[1];
      if (v37 == DWORD1(v72)) {
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v37 = 0;
      int v36 = 1;
    }
    uint64_t v43 = DWORD1(v72) - v37;
    uint64_t v44 = &v77->i32[v37];
    do
    {
      int v45 = *v44++;
      v36 *= v45;
      --v43;
    }
    while (v43);
  }
  else
  {
    int v36 = HIDWORD(v72) * DWORD2(v72);
  }
LABEL_59:
  v33(v73, v65, v57, (v36 * v30), v32);
LABEL_60:
  if (v60 && atomic_fetch_add((atomic_uint *volatile)(v60 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v56);
  }
  uint64_t v60 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  if (SDWORD1(v56) >= 1)
  {
    uint64_t v46 = 0;
    long long v47 = v61;
    do
      *(_DWORD *)&v47[4 * v46++] = 0;
    while (v46 < SDWORD1(v56));
  }
  if (v62 != v63) {
    j__free(v62);
  }
  if (v68 && atomic_fetch_add((atomic_uint *volatile)(v68 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v64);
  }
  uint64_t v68 = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  if (SDWORD1(v64) >= 1)
  {
    uint64_t v48 = 0;
    uint64_t v49 = v69;
    do
      v49[v48++] = 0;
    while (v48 < SDWORD1(v64));
  }
  if (v70 != v71) {
    j__free(v70);
  }
  if (v76 && atomic_fetch_add((atomic_uint *volatile)(v76 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v72);
  }
  uint64_t v76 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  if (SDWORD1(v72) >= 1)
  {
    uint64_t v50 = 0;
    uint64_t v51 = (uint64_t *)v77;
    do
      *((_DWORD *)v51 + v50++) = 0;
    while (v50 < SDWORD1(v72));
  }
  if (v78 != v79) {
    j__free(v78);
  }
LABEL_84:
  if (v81) {
    sub_1002D6888(v80);
  }
}

void sub_10026EC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_1000094F4((uint64_t)&a19);
  sub_1000094F4((uint64_t)&a31);
  sub_1000094F4(v31 - 256);
  sub_10020FA00(v31 - 152);
  _Unwind_Resume(a1);
}

float32x4_t *sub_10026ED30(float32x4_t *result, float32x4_t *a2, float32x4_t *a3, int a4, _DWORD *a5, double a6)
{
  LODWORD(a6) = *a5;
  if (a4 >= 4)
  {
    unint64_t v6 = 0;
    unsigned int v7 = result;
    uint64_t v8 = a2;
    unsigned int v9 = a3;
    do
    {
      float32x4_t v10 = *v7++;
      float32x4_t v11 = v10;
      float32x4_t v12 = *v8++;
      *v9++ = vaddq_f32(vmulq_n_f32(v11, *(float *)&a6), v12);
      v6 += 4;
    }
    while (v6 <= (a4 - 4));
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((int)v6 < a4)
  {
    unint64_t v6 = v6;
    unint64_t v13 = a4 - (unint64_t)v6;
    if (v13 < 0xC) {
      goto LABEL_12;
    }
    uint64_t v14 = 4 * v6;
    if ((unint64_t)((char *)a3 - (char *)result) < 0x20) {
      goto LABEL_12;
    }
    if ((unint64_t)((char *)a3 - (char *)a2) < 0x20) {
      goto LABEL_12;
    }
    unint64_t v6 = (v13 & 0xFFFFFFFFFFFFFFF8) + v6;
    uint64_t v15 = v14 + 16;
    float32x4_t v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
    uint64_t v17 = (float32x4_t *)((char *)a3 + v14 + 16);
    uint64_t v18 = (float32x4_t *)((char *)result + v15);
    uint64_t v19 = (float32x4_t *)((char *)a2 + v15);
    unint64_t v20 = v13 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v21 = vmlaq_f32(*v19, v16, *v18);
      v17[-1] = vmlaq_f32(v19[-1], v16, v18[-1]);
      *uint64_t v17 = v21;
      v17 += 2;
      v18 += 2;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_12:
      unint64_t v22 = &a3->f32[v6];
      __int32 v23 = &a2->f32[v6];
      int v24 = &result->f32[v6];
      unint64_t v25 = a4 - v6;
      do
      {
        float v26 = *v24++;
        float v27 = v26;
        float v28 = *v23++;
        *v22++ = v28 + (float)(v27 * *(float *)&a6);
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

float64x2_t *sub_10026EE38(float64x2_t *result, float64x2_t *a2, float64x2_t *a3, int a4, double *a5)
{
  uint64_t v5 = *(uint64_t *)a5;
  if (a4 >= 4)
  {
    unint64_t v6 = 0;
    unsigned int v7 = a3 + 1;
    uint64_t v8 = a2 + 1;
    unsigned int v9 = result + 1;
    do
    {
      float64x2_t v10 = vaddq_f64(vmulq_n_f64(*v9, *(double *)&v5), *v8);
      v6 += 4;
      v7[-1] = vaddq_f64(vmulq_n_f64(v9[-1], *(double *)&v5), v8[-1]);
      *unsigned int v7 = v10;
      v7 += 2;
      v8 += 2;
      v9 += 2;
    }
    while (v6 <= (a4 - 4));
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((int)v6 < a4)
  {
    unint64_t v6 = v6;
    unint64_t v11 = a4 - (unint64_t)v6;
    if (v11 < 0xA) {
      goto LABEL_12;
    }
    uint64_t v12 = 8 * v6;
    if ((unint64_t)((char *)a3 - (char *)result) < 0x20) {
      goto LABEL_12;
    }
    if ((unint64_t)((char *)a3 - (char *)a2) < 0x20) {
      goto LABEL_12;
    }
    unint64_t v6 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + v6;
    uint64_t v13 = v12 + 16;
    float64x2_t v14 = (float64x2_t)vdupq_lane_s64(v5, 0);
    uint64_t v15 = (float64x2_t *)((char *)a3 + v12 + 16);
    float32x4_t v16 = (float64x2_t *)((char *)result + v13);
    uint64_t v17 = (float64x2_t *)((char *)a2 + v13);
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v19 = vmlaq_f64(*v17, v14, *v16);
      v15[-1] = vmlaq_f64(v17[-1], v14, v16[-1]);
      *uint64_t v15 = v19;
      v15 += 2;
      v16 += 2;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_12:
      unint64_t v20 = &a3->f64[v6];
      float32x4_t v21 = &a2->f64[v6];
      unint64_t v22 = &result->f64[v6];
      unint64_t v23 = a4 - v6;
      do
      {
        double v24 = *v22++;
        double v25 = v24;
        double v26 = *v21++;
        *v20++ = v26 + v25 * *(double *)&v5;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

void sub_10026EF54(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, double a6)
{
  sub_1002D6AE8(v114, &off_100494F50);
  if (sub_10029A230((_DWORD *)a1) == 0x10000)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    long long v13 = *(_OWORD *)(v12 + 16);
    long long v106 = *(_OWORD *)v12;
    long long v107 = v13;
    long long v108 = *(_OWORD *)(v12 + 32);
    uint64_t v14 = *(void *)(v12 + 56);
    uint64_t v109 = *(void *)(v12 + 48);
    uint64_t v110 = v14;
    uint64_t v111 = (_DWORD *)&v106 + 2;
    double v112 = v113;
    v113[0] = 0;
    v113[1] = 0;
    if (v14) {
      atomic_fetch_add((atomic_uint *volatile)(v14 + 20), 1u);
    }
    if (*(int *)(v12 + 4) > 2)
    {
      DWORD1(v106) = 0;
      sub_1002931A8((uint64_t)&v106, v12);
    }
    else
    {
      uint64_t v15 = *(void **)(v12 + 72);
      float32x4_t v16 = v112;
      *double v112 = *v15;
      v16[1] = v15[1];
    }
  }
  else
  {
    sub_100299554(a1, -1, (uint64_t)&v106);
  }
  if (sub_10029A230((_DWORD *)a4) == 0x10000)
  {
    uint64_t v17 = *(void *)(a4 + 8);
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v98 = *(_OWORD *)v17;
    long long v99 = v18;
    long long v100 = *(_OWORD *)(v17 + 32);
    uint64_t v19 = *(void *)(v17 + 56);
    uint64_t v101 = *(void *)(v17 + 48);
    uint64_t v102 = v19;
    long long v103 = (_DWORD *)&v98 + 2;
    long long v104 = v105;
    v105[0] = 0;
    v105[1] = 0;
    if (v19) {
      atomic_fetch_add((atomic_uint *volatile)(v19 + 20), 1u);
    }
    if (*(int *)(v17 + 4) > 2)
    {
      DWORD1(v98) = 0;
      sub_1002931A8((uint64_t)&v98, v17);
    }
    else
    {
      unint64_t v20 = *(void **)(v17 + 72);
      float32x4_t v21 = v104;
      *(void *)long long v104 = *v20;
      v21[1] = v20[1];
    }
  }
  else
  {
    sub_100299554(a4, -1, (uint64_t)&v98);
  }
  __int16 v22 = v106;
  if (a5 >= 0) {
    char v23 = a5;
  }
  else {
    char v23 = v106;
  }
  unsigned int v24 = v23 & 7;
  if (v24 <= (v98 & 7u)) {
    unsigned int v25 = v98 & 7;
  }
  else {
    unsigned int v25 = v24;
  }
  if (v25 <= 5) {
    int v26 = 5;
  }
  else {
    int v26 = v25;
  }
  if ((v106 & 0xFF8) != 0)
  {
    long long v90 = 0uLL;
    uint64_t v27 = sub_1002D19D8(&v90, 19);
    *(_DWORD *)(v27 + 15) = 824196413;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)"src.channels() == 1";
    sub_1002D2278(-215, (uint64_t *)&v90, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2888);
  }
  if ((void)v99)
  {
    if (SDWORD1(v98) >= 3)
    {
      int v29 = v103 + 1;
      uint64_t v30 = 1;
      uint64_t v31 = DWORD1(v98) & 0xFFFFFFFE;
      uint64_t v32 = 1;
      do
      {
        v30 *= *(v29 - 1);
        v32 *= *v29;
        v29 += 2;
        v31 -= 2;
      }
      while (v31);
      uint64_t v28 = v32 * v30;
      unint64_t v33 = DWORD1(v98) - (unint64_t)(DWORD1(v98) & 0xFFFFFFFE);
      if (v33)
      {
        uint64_t v34 = (_DWORD *)((char *)v103 + ((4 * DWORD1(v98)) & 0x3FFFFFFF8));
        do
        {
          uint64_t v35 = *v34++;
          v28 *= v35;
          --v33;
        }
        while (v33);
      }
    }
    else
    {
      uint64_t v28 = SHIDWORD(v98) * (uint64_t)SDWORD2(v98);
    }
    if (DWORD1(v98) && v28)
    {
      if ((v98 & 0xFF8) != 0)
      {
        long long v90 = 0uLL;
        qmemcpy((void *)sub_1002D19D8(&v90, 21), "delta.channels() == 1", 21);
        sub_1002D2278(-215, (uint64_t *)&v90, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2894);
      }
      if (DWORD2(v98) != 1 && DWORD2(v98) != DWORD2(v106))
      {
        long long v90 = 0uLL;
        qmemcpy((void *)sub_1002D19D8(&v90, 43), "(delta.rows == src.rows || delta.rows == 1)", 43);
        sub_1002D2278(-215, (uint64_t *)&v90, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2894);
      }
      if (HIDWORD(v98) != 1 && HIDWORD(v98) != HIDWORD(v106))
      {
        long long v90 = 0uLL;
        qmemcpy((void *)sub_1002D19D8(&v90, 43), "(delta.cols == src.cols || delta.cols == 1)", 43);
        sub_1002D2278(-215, (uint64_t *)&v90, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2894);
      }
      if ((v98 & 0xFFF) != v26)
      {
        LODWORD(v90) = 33619968;
        *((void *)&v90 + 1) = &v98;
        *(void *)&long long v91 = 0;
        sub_10024011C((unsigned int *)&v98, (uint64_t)&v90, v26, 1.0, 0.0);
      }
    }
  }
  uint64_t v36 = 8;
  if (a3) {
    uint64_t v36 = 12;
  }
  sub_10029EDE8(a2, *(_DWORD *)((unint64_t)&v106 | v36), *(_DWORD *)((unint64_t)&v106 | v36), v26, -1, 0, 0);
  if (sub_10029A230((_DWORD *)a2) == 0x10000)
  {
    uint64_t v37 = *(void *)(a2 + 8);
    long long v38 = *(_OWORD *)(v37 + 16);
    long long v90 = *(_OWORD *)v37;
    long long v91 = v38;
    long long v92 = *(_OWORD *)(v37 + 32);
    uint64_t v39 = *(void *)(v37 + 56);
    uint64_t v93 = *(void *)(v37 + 48);
    uint64_t v94 = v39;
    long long v95 = (char *)&v90 + 8;
    long long v96 = v97;
    v97[0] = 0;
    v97[1] = 0;
    if (v39) {
      atomic_fetch_add((atomic_uint *volatile)(v39 + 20), 1u);
    }
    if (*(int *)(v37 + 4) > 2)
    {
      DWORD1(v90) = 0;
      sub_1002931A8((uint64_t)&v90, v37);
    }
    else
    {
      uint64_t v40 = *(void **)(v37 + 72);
      int32x4_t v41 = v96;
      *(void *)long long v96 = *v40;
      v41[1] = v40[1];
    }
  }
  else
  {
    sub_100299554(a2, -1, (uint64_t)&v90);
  }
  if ((void)v107 != (void)v91)
  {
    v42.i64[0] = *((void *)&v90 + 1);
    v42.i64[1] = *((void *)&v106 + 1);
    int v43 = v22 & 0xFFF;
    v44.i64[0] = 0x6400000064;
    v44.i64[1] = 0x6400000064;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v44, v42))) & 1) != 0 || v43 != v26)
    {
      if ((v22 & 0xFFF) != 0 || v25 > 5)
      {
        if ((v22 & 0xFFF) != 0 || v26 != 6)
        {
          if (v43 == 2 && v25 <= 5)
          {
            BOOL v46 = a3 == 0;
            long long v47 = (void (*)(long long *, long long *, long long *, double))sub_10027532C;
            uint64_t v48 = (void (*)(long long *, long long *, long long *, double))sub_100274C48;
          }
          else if (v43 == 2 && v26 == 6)
          {
            BOOL v46 = a3 == 0;
            long long v47 = (void (*)(long long *, long long *, long long *, double))sub_100276744;
            uint64_t v48 = (void (*)(long long *, long long *, long long *, double))sub_100275F40;
          }
          else if (v43 == 3 && v25 <= 5)
          {
            BOOL v46 = a3 == 0;
            long long v47 = (void (*)(long long *, long long *, long long *, double))sub_100277984;
            uint64_t v48 = (void (*)(long long *, long long *, long long *, double))sub_100277280;
          }
          else if (v43 == 3 && v26 == 6)
          {
            BOOL v46 = a3 == 0;
            long long v47 = (void (*)(long long *, long long *, long long *, double))sub_100278F2C;
            uint64_t v48 = (void (*)(long long *, long long *, long long *, double))sub_1002786B0;
          }
          else if (v43 == 5 && v25 <= 5)
          {
            BOOL v46 = a3 == 0;
            long long v47 = (void (*)(long long *, long long *, long long *, double))sub_10027A208;
            uint64_t v48 = (void (*)(long long *, long long *, long long *, double))sub_100279BA0;
          }
          else
          {
            if (v43 != 5 || v26 != 6)
            {
              long long v47 = (void (*)(long long *, long long *, long long *, double))sub_10027C310;
              if (a3) {
                long long v47 = (void (*)(long long *, long long *, long long *, double))sub_10027BBE4;
              }
              if (v43 != 6 || v26 != 6)
              {
                *(void *)uint64_t v86 = 0;
                *(void *)&v86[8] = 0;
                sub_1002D2278(-210, (uint64_t *)v86, "mulTransposed", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 2989);
              }
              goto LABEL_121;
            }
            BOOL v46 = a3 == 0;
            long long v47 = (void (*)(long long *, long long *, long long *, double))sub_10027B2DC;
            uint64_t v48 = (void (*)(long long *, long long *, long long *, double))sub_10027AB34;
          }
        }
        else
        {
          BOOL v46 = a3 == 0;
          long long v47 = (void (*)(long long *, long long *, long long *, double))sub_100272EA8;
          uint64_t v48 = (void (*)(long long *, long long *, long long *, double))sub_100272034;
        }
      }
      else
      {
        BOOL v46 = a3 == 0;
        long long v47 = (void (*)(long long *, long long *, long long *, double))sub_100270618;
        uint64_t v48 = (void (*)(long long *, long long *, long long *, double))sub_10026FC6C;
      }
      if (!v46) {
        long long v47 = v48;
      }
LABEL_121:
      v47(&v106, &v90, &v98, a6);
      *(_DWORD *)uint64_t v86 = 50397184;
      *(void *)&v86[8] = &v90;
      *(void *)&v86[16] = 0;
      sub_1002A08E0((uint64_t)v86, 0);
      goto LABEL_122;
    }
  }
  *(_DWORD *)uint64_t v86 = 1124007936;
  memset(&v86[4], 0, 60);
  long long v87 = &v86[8];
  long long v88 = v89;
  v89[0] = 0;
  v89[1] = 0;
  if ((void)v99)
  {
    if (SDWORD1(v98) >= 3)
    {
      uint64_t v50 = v103 + 1;
      uint64_t v51 = 1;
      uint64_t v52 = DWORD1(v98) & 0xFFFFFFFE;
      uint64_t v53 = 1;
      do
      {
        v51 *= *(v50 - 1);
        v53 *= *v50;
        v50 += 2;
        v52 -= 2;
      }
      while (v52);
      uint64_t v45 = v53 * v51;
      unint64_t v54 = DWORD1(v98) - (unint64_t)(DWORD1(v98) & 0xFFFFFFFE);
      if (v54)
      {
        float v55 = (_DWORD *)((char *)v103 + ((4 * DWORD1(v98)) & 0x3FFFFFFF8));
        do
        {
          uint64_t v56 = *v55++;
          v45 *= v56;
          --v54;
        }
        while (v54);
      }
    }
    else
    {
      uint64_t v45 = SHIDWORD(v98) * (uint64_t)SDWORD2(v98);
    }
    uint64_t v49 = &v106;
    if (DWORD1(v98) && v45)
    {
      if (v103[1] == v111[1] && *v103 == *v111)
      {
        *(void *)&v73[1] = 0;
        LODWORD(v73[0]) = 16842752;
        *((void *)&v73[0] + 1) = &v106;
        uint64_t v85 = 0;
        int v83 = 16842752;
        uint64_t v84 = &v98;
        int v80 = 33619968;
        int v81 = (long long *)v86;
        uint64_t v82 = 0;
        long long v58 = sub_1002A02C4();
      }
      else
      {
        LODWORD(v73[0]) = 16842752;
        *(_OWORD *)((char *)v73 + 8) = (unint64_t)&v98;
        int v83 = 33619968;
        uint64_t v84 = (long long *)v86;
        uint64_t v85 = 0;
        sub_100257BB4((uint64_t)v73, SDWORD2(v106) / SDWORD2(v98), SHIDWORD(v106) / SHIDWORD(v98), (uint64_t)&v83);
        *(void *)&v73[1] = 0;
        LODWORD(v73[0]) = 16842752;
        *((void *)&v73[0] + 1) = &v106;
        uint64_t v85 = 0;
        int v83 = 16842752;
        uint64_t v84 = (long long *)v86;
        int v80 = 33619968;
        int v81 = (long long *)v86;
        uint64_t v82 = 0;
        long long v58 = sub_1002A02C4();
      }
      sub_100213E80((uint64_t)v73, (uint64_t)&v83, (uint64_t)&v80, (uint64_t)v58, -1);
      uint64_t v49 = (long long *)v86;
    }
  }
  else
  {
    uint64_t v49 = &v106;
  }
  uint64_t v85 = 0;
  int v83 = 16842752;
  uint64_t v84 = v49;
  uint64_t v82 = 0;
  int v80 = 16842752;
  int v81 = v49;
  LODWORD(v73[0]) = 1124007936;
  memset((char *)v73 + 4, 0, 48);
  v73[3] = 0u;
  long long v74 = (char *)v73 + 8;
  uint64_t v75 = v76;
  v76[0] = 0;
  v76[1] = 0;
  uint64_t v79 = 0;
  int v77 = 16842752;
  long long v78 = v73;
  int v70 = 33619968;
  if (a3) {
    int v59 = 1;
  }
  else {
    int v59 = 2;
  }
  uint64_t v71 = &v90;
  uint64_t v72 = 0;
  sub_10026D688((uint64_t)&v83, (uint64_t)&v80, (uint64_t)&v77, (uint64_t)&v70, v59, a6, 0.0);
  if (*((void *)&v73[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v73[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v73);
  }
  *((void *)&v73[3] + 1) = 0;
  memset(&v73[1], 0, 32);
  if (SDWORD1(v73[0]) >= 1)
  {
    uint64_t v60 = 0;
    unsigned int v61 = v74;
    do
      *(_DWORD *)&v61[4 * v60++] = 0;
    while (v60 < SDWORD1(v73[0]));
  }
  if (v75 != v76) {
    j__free(v75);
  }
  if (*(void *)&v86[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v86[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v86);
  }
  *(void *)&v86[56] = 0;
  memset(&v86[16], 0, 32);
  if (*(int *)&v86[4] >= 1)
  {
    uint64_t v62 = 0;
    uint64_t v63 = v87;
    do
      *(_DWORD *)&v63[4 * v62++] = 0;
    while (v62 < *(int *)&v86[4]);
  }
  if (v88 != v89) {
    j__free(v88);
  }
LABEL_122:
  if (v94 && atomic_fetch_add((atomic_uint *volatile)(v94 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v90);
  }
  uint64_t v94 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  if (SDWORD1(v90) >= 1)
  {
    uint64_t v64 = 0;
    long long v65 = v95;
    do
      *(_DWORD *)&v65[4 * v64++] = 0;
    while (v64 < SDWORD1(v90));
  }
  if (v96 != v97) {
    j__free(v96);
  }
  if (v102 && atomic_fetch_add((atomic_uint *volatile)(v102 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v98);
  }
  uint64_t v102 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  if (SDWORD1(v98) >= 1)
  {
    uint64_t v66 = 0;
    uint64_t v67 = v103;
    do
      v67[v66++] = 0;
    while (v66 < SDWORD1(v98));
  }
  if (v104 != v105) {
    j__free(v104);
  }
  if (v110 && atomic_fetch_add((atomic_uint *volatile)(v110 + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v106);
  }
  uint64_t v110 = 0;
  long long v107 = 0u;
  long long v108 = 0u;
  if (SDWORD1(v106) >= 1)
  {
    uint64_t v68 = 0;
    uint64_t v69 = v111;
    do
      v69[v68++] = 0;
    while (v68 < SDWORD1(v106));
  }
  if (v112 != v113) {
    j__free(v112);
  }
  if (v115) {
    sub_1002D6888(v114);
  }
}

void sub_10026FB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
}

void sub_10026FB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_1002D1A1C(&a33);
  sub_1000094F4((uint64_t)&a45);
  sub_1000094F4((uint64_t)&a57);
  sub_1000094F4(v57 - 192);
  sub_10020FA00(v57 - 96);
  _Unwind_Resume(a1);
}

void sub_10026FC3C(_Unwind_Exception *a1)
{
  sub_1000094F4(v1 - 192);
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_10026FC58(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

unsigned char *sub_10026FC6C(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  uint64_t v14 = (_OWORD *)a1[2];
  uint64_t v15 = *(void *)(a2 + 16);
  float32x4_t v16 = *(unsigned char **)(a3 + 16);
  uint64_t v17 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = *(void *)(a3 + 80) >> 2;
  }
  uint64_t v19 = (int *)a1[8];
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  if (v16) {
    BOOL v22 = *(_DWORD *)(a3 + 12) < (int)v20;
  }
  else {
    BOOL v22 = 0;
  }
  char v23 = !v22;
  unsigned int v24 = 20 * v21;
  if (!v22) {
    unsigned int v24 = 4 * v21;
  }
  uint64_t result = v176;
  if (v24 >= 0x409) {
    operator new[]();
  }
  uint64_t v26 = *(void *)(a2 + 80) >> 2;
  uint64_t v27 = v19[1];
  if ((v23 & 1) == 0)
  {
    uint64_t v28 = (float32x4_t *)&v176[4 * v21];
    if ((int)v21 < 1) {
      goto LABEL_36;
    }
    BOOL v29 = v21 >= 8 && v18 == 1;
    if (v29
      && (v28 < (float32x4_t *)&v16[4 * v21]
        ? (BOOL v30 = v16 >= &v176[16 * v21 + 4 * v21])
        : (BOOL v30 = 1),
          v30))
    {
      uint64_t v31 = v21 & 0x7FFFFFF8;
      uint64_t v32 = (__n128 *)(v16 + 16);
      unint64_t v33 = (float *)&v176[4 * v21 + 64];
      uint64_t v34 = v21 & 0xFFFFFFF8;
      do
      {
        v177.val[0] = (float32x4_t)v32[-1];
        __n128 v35 = *v32;
        v177.val[1] = v177.val[0];
        v177.val[2] = v177.val[0];
        v177.val[3] = v177.val[0];
        __n128 v36 = *v32;
        a10 = *(int8x16_t *)v32;
        __n128 v37 = *v32;
        long long v38 = v33 - 16;
        vst4q_f32(v38, v177);
        vst4q_f32(v33, *(float32x4x4_t *)(&a10 - 2));
        v32 += 2;
        v33 += 32;
        v34 -= 8;
      }
      while (v34);
      if (v31 == v21)
      {
LABEL_36:
        uint64_t v18 = 4 * (v18 != 0);
        float32x4_t v16 = &v176[4 * v21];
        if ((int)v20 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    uint64_t v39 = (const float *)&v16[4 * v18 * v31];
    int32x4_t v41 = (float32x4_t *)&v176[16 * v31 + 4 * v21];
    uint64_t v42 = v21 - v31;
    do
    {
      float32x4_t v43 = vld1q_dup_f32(v39);
      uint64_t v40 = 4 * v18;
      uint64_t v39 = (const float *)((char *)v39 + v40);
      *v41++ = v43;
      --v42;
    }
    while (v42);
    goto LABEL_36;
  }
  if (!v16)
  {
    if ((int)v20 < 1) {
      return result;
    }
    uint64_t v129 = 0;
    uint64_t v130 = v20 - 4;
    double v131 = a4 * 0.0;
    *(float *)&double v131 = a4 * 0.0;
    uint64_t v132 = v21 & 0xFFFFFFF8;
    int32x4_t v133 = vdupq_lane_s32(*(int32x2_t *)&v131, 0);
    BOOL v135 = v21 < 8 || v17 != 1;
    uint64_t v136 = 4 * v26;
    for (uint64_t i = v14; ; uint64_t i = (_OWORD *)((char *)i + 1))
    {
      if ((int)v21 < 1) {
        goto LABEL_144;
      }
      if (v135 || v176 < (unsigned char *)v14 + v129 + v21 && (char *)v14 + v129 < &v176[4 * v21])
      {
        uint64_t v138 = 0;
LABEL_142:
        uint64_t v139 = &v176[4 * v138];
        uint64_t v140 = v17 * v138;
        uint64_t v141 = v21 - v138;
        do
        {
          a11.i8[0] = *((unsigned char *)i + v140);
          *(float *)a11.i32 = (float)a11.u32[0];
          *v139++ = a11.i32[0];
          v140 += v17;
          --v141;
        }
        while (v141);
        goto LABEL_144;
      }
      if (v21 >= 0x10)
      {
        uint64_t v171 = v21 & 0x7FFFFFF0;
        unint64_t v172 = (float32x4_t *)v176;
        unint64_t v173 = (int8x16_t *)i;
        do
        {
          int8x16_t v174 = *v173++;
          float64x2_t v13 = (float64x2_t)vqtbl1q_s8(v174, (int8x16_t)xmmword_1004048A0);
          a11 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v174, (int8x16_t)xmmword_100404890));
          float32x4_t v12 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v174, (int8x16_t)xmmword_1004048B0));
          v172[2] = v12;
          v172[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v174, (int8x16_t)xmmword_1004048C0));
          *unint64_t v172 = (float32x4_t)a11;
          v172[1] = vcvtq_f32_u32((uint32x4_t)v13);
          v172 += 4;
          v171 -= 16;
        }
        while (v171);
        if ((v21 & 0xFFFFFFF0) == v21) {
          goto LABEL_144;
        }
        uint64_t v162 = v21 & 0x7FFFFFF0;
        uint64_t v138 = v21 & 0xFFFFFFF0;
        if ((v21 & 8) == 0) {
          goto LABEL_142;
        }
      }
      else
      {
        uint64_t v162 = 0;
      }
      uint64_t v163 = (float32x4_t *)&v176[4 * v162];
      do
      {
        a11.i64[0] = *(void *)((char *)i + v162);
        uint32x4_t v164 = (uint32x4_t)vqtbl1q_s8(a11, (int8x16_t)xmmword_1004048A0);
        a11 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a11, (int8x16_t)xmmword_100404890));
        *uint64_t v163 = (float32x4_t)a11;
        v163[1] = vcvtq_f32_u32(v164);
        v163 += 2;
        v162 += 8;
      }
      while (v132 != v162);
      uint64_t v138 = v21 & 0xFFFFFFF8;
      if (v132 != v21) {
        goto LABEL_142;
      }
LABEL_144:
      LODWORD(v142) = v129;
      uint64_t v143 = v129;
      if (v129 <= v130)
      {
        do
        {
          a11 = (int8x16_t)v133;
          if ((int)v21 >= 1)
          {
            long long v150 = (_DWORD *)((char *)v14 + v143);
            float64x2_t v151 = 0uLL;
            uint64_t v152 = v21;
            int v153 = (float *)v176;
            float64x2_t v154 = 0uLL;
            do
            {
              float v155 = *v153++;
              LODWORD(v13.f64[0]) = *v150;
              int8x16_t v156 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)&v13.f64[0]));
              int8x8_t v157 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), (int8x8_t)0xFF000000FFLL);
              v158.i64[0] = v157.u32[0];
              v158.i64[1] = v157.u32[1];
              float64x2_t v159 = vcvtq_f64_u64(v158);
              *(int8x8_t *)v156.i8 = vand_s8(*(int8x8_t *)v156.i8, (int8x8_t)0xFF000000FFLL);
              v158.i64[0] = v156.u32[0];
              v158.i64[1] = v156.u32[1];
              float64x2_t v13 = vcvtq_f64_u64(v158);
              float64x2_t v151 = vmlaq_n_f64(v151, v13, v155);
              float64x2_t v154 = vmlaq_n_f64(v154, v159, v155);
              long long v150 = (_DWORD *)((char *)v150 + v17);
              --v152;
            }
            while (v152);
            *(double *)v12.i64 = a4;
            a11 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v151, a4)), vmulq_n_f64(v154, a4));
          }
          *(int8x16_t *)(v15 + 4 * v143) = a11;
          uint64_t v142 = v143 + 4;
          uint64_t v143 = v142;
        }
        while ((int)v130 >= (int)v142);
      }
      if ((int)v142 >= (int)v20) {
        goto LABEL_136;
      }
      uint64_t v144 = v142;
      if ((int)v21 >= 1)
      {
        do
        {
          double v145 = 0.0;
          long long v146 = v14;
          uint64_t v147 = v21;
          long long v148 = (float *)v176;
          do
          {
            float v149 = *v148++;
            v12.i8[0] = *((unsigned char *)v146 + v144);
            *(double *)v12.i64 = (double)v12.u64[0];
            double v145 = v145 + v149 * *(double *)v12.i64;
            long long v146 = (_OWORD *)((char *)v146 + v17);
            --v147;
          }
          while (v147);
          *(float *)a11.i32 = v145 * a4;
          *(_DWORD *)(v15 + 4 * v144++) = a11.i32[0];
        }
        while ((int)v20 > (int)v144);
        goto LABEL_136;
      }
      uint64_t v160 = (v20 + ~v142);
      if (v160 >= 7)
      {
        uint64_t v165 = v160 + 1;
        uint64_t v166 = (v160 + 1) & 0x1FFFFFFF8;
        uint64_t v161 = v166 + v144;
        uint64_t v167 = 4 * v144;
        uint64_t v168 = v166;
        do
        {
          unint64_t v169 = (int32x4_t *)(v15 + v167);
          *unint64_t v169 = v133;
          v169[1] = v133;
          v167 += 32;
          v168 -= 8;
        }
        while (v168);
        if (v165 == v166) {
          goto LABEL_136;
        }
      }
      else
      {
        uint64_t v161 = v144;
      }
      uint64_t v170 = 4 * v161;
      do
      {
        *(_DWORD *)(v15 + v170) = LODWORD(v131);
        v170 += 4;
        LODWORD(v161) = v161 + 1;
      }
      while ((int)v20 > (int)v161);
LABEL_136:
      ++v129;
      v15 += v136;
      if (v129 == v20) {
        return result;
      }
    }
  }
  uint64_t v28 = 0;
  if ((int)v20 >= 1)
  {
LABEL_37:
    uint64_t v44 = 0;
    uint64_t v45 = v20 - 4;
    double v46 = a4 * 0.0;
    *(float *)&double v46 = a4 * 0.0;
    long long v47 = (float32x4_t *)&v176[4 * v21];
    BOOL v49 = v176 < &v28->i8[4 * v21] && v28 < v47;
    BOOL v50 = v17 == 1 && v18 == 1;
    uint64_t v51 = v21 & 0xFFFFFFF0;
    uint64_t v52 = v21 & 0xFFFFFFF8;
    int32x4_t v53 = vdupq_lane_s32(*(int32x2_t *)&v46, 0);
    char v55 = !v50 || v21 < 8;
    uint64_t v56 = 4 * v18;
    uint64_t v57 = 4 * v26;
    long long v58 = v16;
    int v59 = v14;
    do
    {
      unint64_t v60 = (unint64_t)v14 + v44;
      unint64_t v61 = (unint64_t)v14 + v44 + v21;
      if (v28)
      {
        if ((int)v21 < 1) {
          goto LABEL_104;
        }
        if ((v55 & 1) != 0
          || ((unint64_t)v176 < v61 ? (BOOL v62 = v60 >= (unint64_t)v47) : (BOOL v62 = 1),
              !v62 ? (char v63 = 1) : (char v63 = v49),
              (v63 & 1) != 0))
        {
          uint64_t v64 = 0;
LABEL_65:
          long long v65 = &v176[4 * v64];
          uint64_t v66 = (float *)((char *)v28->f32 + v56 * v64);
          uint64_t v67 = v21 - v64;
          uint64_t v68 = v17 * v64;
          do
          {
            a10.i8[0] = *((unsigned char *)v59 + v68);
            *(float *)a10.i32 = (float)a10.u32[0] - *v66;
            *v65++ = a10.i32[0];
            uint64_t v66 = (float *)((char *)v66 + v56);
            v68 += v17;
            --v67;
          }
          while (v67);
          goto LABEL_104;
        }
        if (v21 >= 0x10)
        {
          uint64_t v78 = v21 & 0x7FFFFFF0;
          uint64_t v79 = (float32x4_t *)v176;
          int v80 = (int8x16_t *)v59;
          int v81 = v28;
          do
          {
            int8x16_t v82 = *v80++;
            float32x4_t v11 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_1004048A0));
            float32x4_t v84 = v81[2];
            float32x4_t v83 = v81[3];
            float32x4_t v86 = *v81;
            float32x4_t v85 = v81[1];
            v81 += 4;
            float32x4_t v12 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_1004048B0)), v84);
            v79[2] = v12;
            void v79[3] = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_1004048C0)), v83);
            a10 = (int8x16_t)vsubq_f32(v11, v85);
            *uint64_t v79 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_100404890)), v86);
            v79[1] = (float32x4_t)a10;
            v79 += 4;
            v78 -= 16;
          }
          while (v78);
          if (v51 == v21) {
            goto LABEL_104;
          }
          uint64_t v74 = v21 & 0x7FFFFFF0;
          uint64_t v64 = v21 & 0xFFFFFFF0;
          if ((v21 & 8) == 0) {
            goto LABEL_65;
          }
        }
        else
        {
          uint64_t v74 = 0;
        }
        uint64_t v75 = (float32x4_t *)((char *)v28 + 4 * v74);
        uint64_t v76 = (int8x16_t *)&v176[4 * v74];
        do
        {
          a10.i64[0] = *(void *)((char *)v59 + v74);
          uint32x4_t v77 = (uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_100404890);
          float32x4_t v12 = *v75;
          float32x4_t v11 = v75[1];
          v75 += 2;
          a10 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1004048A0)), v11);
          *(float32x4_t *)uint64_t v76 = vsubq_f32(vcvtq_f32_u32(v77), v12);
          v76[1] = a10;
          v76 += 2;
          v74 += 8;
        }
        while (v52 != v74);
        uint64_t v64 = v21 & 0xFFFFFFF8;
        if (v52 != v21) {
          goto LABEL_65;
        }
      }
      else
      {
        if ((int)v21 < 1) {
          goto LABEL_104;
        }
        uint64_t v69 = 0;
        if ((v55 & 1) != 0
          || (v176 < &v16[4 * v21 + 4 * v44] ? (BOOL v70 = &v16[4 * v44] >= (unsigned char *)v47) : (BOOL v70 = 1),
              v70 ? (char v71 = 0) : (char v71 = 1),
              v60 < (unint64_t)v47 ? (BOOL v72 = (unint64_t)v176 >= v61) : (BOOL v72 = 1),
              !v72 || (v71 & 1) != 0))
        {
LABEL_102:
          long long v99 = &v176[4 * v69];
          uint64_t v100 = v56 * v69;
          uint64_t v101 = v21 - v69;
          uint64_t v102 = v17 * v69;
          do
          {
            a10.i8[0] = *((unsigned char *)v59 + v102);
            *(float *)a10.i32 = (float)a10.u32[0] - *(float *)((char *)v58 + v100);
            *v99++ = a10.i32[0];
            v100 += v56;
            v102 += v17;
            --v101;
          }
          while (v101);
          goto LABEL_104;
        }
        if (v21 >= 0x10)
        {
          unint64_t v87 = 0;
          long long v88 = (float32x4_t *)v176;
          float32x4_t v89 = (float32x4_t *)v58;
          do
          {
            int8x16_t v90 = (int8x16_t)v59[v87 / 0x10];
            uint32x4_t v91 = (uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_100404890);
            float32x4_t v93 = v89[2];
            float32x4_t v92 = v89[3];
            float32x4_t v95 = *v89;
            float32x4_t v94 = v89[1];
            v89 += 4;
            float32x4_t v11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_1004048A0)), v94);
            float32x4_t v12 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_1004048B0)), v93);
            a10 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_1004048C0)), v92);
            v88[2] = v12;
            v88[3] = (float32x4_t)a10;
            *long long v88 = vsubq_f32(vcvtq_f32_u32(v91), v95);
            v88[1] = v11;
            v88 += 4;
            v87 += 16;
          }
          while (v51 != v87);
          if (v51 == v21) {
            goto LABEL_104;
          }
          uint64_t v73 = v21 & 0x7FFFFFF0;
          uint64_t v69 = v21 & 0xFFFFFFF0;
          if ((v21 & 8) == 0) {
            goto LABEL_102;
          }
        }
        else
        {
          uint64_t v73 = 0;
        }
        uint64_t v96 = 4 * v73;
        do
        {
          a10.i64[0] = *(void *)((char *)v59 + v73);
          uint32x4_t v97 = (uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_100404890);
          float32x4_t v12 = *(float32x4_t *)((char *)v58 + v96);
          float32x4_t v11 = *(float32x4_t *)((char *)v58 + v96 + 16);
          a10 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1004048A0)), v11);
          long long v98 = (int8x16_t *)&v176[v96];
          *(float32x4_t *)long long v98 = vsubq_f32(vcvtq_f32_u32(v97), v12);
          v98[1] = a10;
          v73 += 8;
          v96 += 32;
        }
        while (v52 != v73);
        uint64_t v69 = v21 & 0xFFFFFFF8;
        if (v52 != v21) {
          goto LABEL_102;
        }
      }
LABEL_104:
      LODWORD(v103) = v44;
      uint64_t v104 = v44;
      if (v44 <= v45)
      {
        do
        {
          a10 = (int8x16_t)v53;
          if ((int)v21 >= 1)
          {
            double v112 = (float32x4_t *)&v16[4 * v104];
            if (v28) {
              double v112 = v28;
            }
            double v113 = (__int32 *)((char *)v14 + v104);
            float64x2_t v114 = 0uLL;
            uint64_t v115 = v21;
            int v116 = (float *)v176;
            float64x2_t v117 = 0uLL;
            do
            {
              float v118 = *v116++;
              v12.i32[0] = *v113;
              float32x4_t v119 = vsubq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v12.f32))), *v112);
              float64x2_t v120 = vcvtq_f64_f32(*(float32x2_t *)v119.f32);
              float32x4_t v12 = (float32x4_t)vcvt_hight_f64_f32(v119);
              float64x2_t v117 = vmlaq_n_f64(v117, (float64x2_t)v12, v118);
              float64x2_t v114 = vmlaq_n_f64(v114, v120, v118);
              double v113 = (__int32 *)((char *)v113 + v17);
              double v112 = (float32x4_t *)((char *)v112 + v56);
              --v115;
            }
            while (v115);
            v11.i32[0] = LODWORD(a4);
            a10 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v114, a4)), vmulq_n_f64(v117, a4));
          }
          *(int8x16_t *)(v15 + 4 * v104) = a10;
          uint64_t v103 = v104 + 4;
          uint64_t v104 = v103;
        }
        while ((int)v45 >= (int)v103);
      }
      if ((int)v103 >= (int)v20) {
        goto LABEL_53;
      }
      uint64_t v105 = v103;
      if ((int)v21 >= 1)
      {
        do
        {
          long long v106 = (float *)&v16[4 * v105];
          if (v28) {
            long long v106 = (float *)v28;
          }
          double v107 = 0.0;
          long long v108 = v14;
          uint64_t v109 = v21;
          uint64_t v110 = (float *)v176;
          do
          {
            float v111 = *v110++;
            v11.i8[0] = *((unsigned char *)v108 + v105);
            *(double *)v11.i64 = (float)((float)v11.u32[0] - *v106);
            double v107 = v107 + v111 * *(double *)v11.i64;
            long long v106 = (float *)((char *)v106 + v56);
            long long v108 = (_OWORD *)((char *)v108 + v17);
            --v109;
          }
          while (v109);
          *(float *)a10.i32 = v107 * a4;
          *(_DWORD *)(v15 + 4 * v105++) = a10.i32[0];
        }
        while ((int)v20 > (int)v105);
        goto LABEL_53;
      }
      uint64_t v121 = (v20 + ~v103);
      if (v121 >= 7)
      {
        uint64_t v123 = v121 + 1;
        uint64_t v124 = (v121 + 1) & 0x1FFFFFFF8;
        uint64_t v122 = v124 + v105;
        uint64_t v125 = 4 * v105;
        uint64_t v126 = v124;
        do
        {
          double v127 = (int32x4_t *)(v15 + v125);
          *double v127 = v53;
          v127[1] = v53;
          v125 += 32;
          v126 -= 8;
        }
        while (v126);
        if (v123 == v124) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v122 = v105;
      }
      uint64_t v128 = 4 * v122;
      do
      {
        *(_DWORD *)(v15 + v128) = LODWORD(v46);
        v128 += 4;
        LODWORD(v122) = v122 + 1;
      }
      while ((int)v20 > (int)v122);
LABEL_53:
      ++v44;
      v15 += v57;
      int v59 = (_OWORD *)((char *)v59 + 1);
      long long v58 = (_OWORD *)((char *)v58 + 4);
    }
    while (v44 != v27);
  }
  return result;
}

void sub_1002705E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != v12)
  {
    if (a12) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100270618(unsigned char *result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, int8x16_t a8, float32x4_t a9, int8x16_t a10, float32x4_t a11)
{
  float64x2_t v13 = (const char *)*((void *)result + 2);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *((void *)result + 10);
  uint64_t v382 = *(void *)(a2 + 80) >> 2;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *(void *)(a3 + 80) >> 2;
  }
  uint64_t v18 = (unsigned int *)*((void *)result + 8);
  unint64_t v19 = *v18;
  uint64_t v20 = (int)v18[1];
  uint64_t v21 = v18[1];
  uint64_t v395 = *((void *)result + 10);
  unint64_t v396 = v19;
  unsigned int v394 = v18[1];
  uint64_t v397 = v21;
  if (!v15)
  {
    if ((int)v19 < 1) {
      return result;
    }
    if ((int)v20 < 4)
    {
      if ((int)v21 <= 0)
      {
        uint64_t v358 = 0;
        unint64_t v359 = 0;
        double v360 = a4 * 0.0;
        *(float *)&double v360 = a4 * 0.0;
        int32x4_t v361 = vdupq_lane_s32(*(int32x2_t *)&v360, 0);
        BOOL v362 = (unsigned char *)(v14 + 16);
        unint64_t v363 = 1;
        do
        {
          if (v363 <= v19) {
            unint64_t v364 = v19;
          }
          else {
            unint64_t v364 = v363;
          }
          unint64_t v365 = v359 + 1;
          if (v359 + 1 > v19) {
            unint64_t v366 = v359 + 1;
          }
          else {
            unint64_t v366 = v19;
          }
          unint64_t v367 = v366 - v359;
          if (v367 < 8) {
            goto LABEL_145;
          }
          unint64_t v368 = (v364 + v358) & 0xFFFFFFFFFFFFFFF8;
          v359 += v367 & 0xFFFFFFFFFFFFFFF8;
          uint64_t result = v362;
          do
          {
            *((int32x4_t *)result - 1) = v361;
            *(int32x4_t *)uint64_t result = v361;
            result += 32;
            v368 -= 8;
          }
          while (v368);
          if (v367 != (v367 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_145:
            do
              *(_DWORD *)(v14 + 4 * v359++) = LODWORD(v360);
            while (v359 < v19);
          }
          ++v363;
          --v358;
          v362 += 4 * v382 + 4;
          v14 += 4 * v382;
          unint64_t v359 = v365;
        }
        while (v365 != v19);
      }
      else
      {
        uint64_t v116 = 0;
        float64x2_t v117 = v13 + 2;
        do
        {
          uint64_t v118 = 0;
          float32x4_t v119 = &v13[v16 * v116];
          float64x2_t v120 = v117;
          do
          {
            LOBYTE(a5) = *v119;
            LOBYTE(a6) = *(v120 - 2);
            a6 = (double)*(unint64_t *)&a6;
            double v121 = (double)*(unint64_t *)&a5 * a6 + 0.0;
            if (v21 != 1)
            {
              LOBYTE(a6) = v119[1];
              a6 = (double)*(unint64_t *)&a6;
              LOBYTE(a7) = *(v120 - 1);
              a7 = (double)*(unint64_t *)&a7;
              double v121 = v121 + a6 * a7;
              if (v20 != 2)
              {
                LOBYTE(a6) = v119[2];
                a6 = (double)*(unint64_t *)&a6;
                LOBYTE(a7) = *v120;
                a7 = (double)*(unint64_t *)&a7;
                double v121 = v121 + a6 * a7;
              }
            }
            a5 = v121 * a4;
            *(float *)&a5 = a5;
            *(_DWORD *)(v14 + 4 * v118) = LODWORD(a5);
            v120 += v16;
            ++v118;
          }
          while (v116 + v118 < v19);
          ++v116;
          v117 += v16;
          v14 += 4 * v382 + 4;
        }
        while (v116 != v19);
      }
      return result;
    }
    unint64_t v122 = (v21 - 4);
    uint64_t v123 = (v122 & 0xFFFFFFFC) + 4;
    if (v122 < 0x1C)
    {
      if (v123 >= v21)
      {
        for (unint64_t i = 0; i != v19; ++i)
        {
          int v370 = v13;
          unint64_t v371 = i;
          do
          {
            unint64_t v372 = 0;
            double v373 = 0.0;
            do
            {
              LOBYTE(a5) = v13[v372];
              LOBYTE(a6) = v370[v372];
              LOBYTE(a7) = v13[v372 + 1];
              *(double *)&unint64_t v374 = (double)*(unint64_t *)&a6;
              a8.i8[0] = v370[v372 + 1];
              *(double *)a8.i64 = (double)a8.u64[0];
              *(double *)&unint64_t v375 = (double)*(unint64_t *)&a7 * *(double *)a8.i64;
              double v376 = *(double *)&v375 + (double)*(unint64_t *)&a5 * *(double *)&v374;
              LOBYTE(v374) = v13[v372 + 2];
              *(double *)&unint64_t v377 = (double)v374;
              LOBYTE(v375) = v370[v372 + 2];
              *(double *)&unint64_t v378 = (double)v375;
              double v379 = v376 + *(double *)&v377 * *(double *)&v378;
              LOBYTE(v377) = v13[v372 + 3];
              a6 = (double)v377;
              LOBYTE(v378) = v370[v372 + 3];
              a7 = (double)v378;
              a5 = v379 + a6 * a7;
              double v373 = v373 + a5;
              v372 += 4;
            }
            while (v372 <= v122);
            float v380 = v373 * a4;
            *(float *)(v14 + 4 * v371++) = v380;
            v370 += v16;
          }
          while (v371 < v19);
          v14 += 4 * v382;
          v13 += v16;
        }
      }
      else
      {
        for (unint64_t j = 0; j != v19; ++j)
        {
          uint64_t v125 = v13;
          unint64_t v126 = j;
          do
          {
            unint64_t v127 = 0;
            double v128 = 0.0;
            do
            {
              LOBYTE(a5) = v13[v127];
              LOBYTE(a6) = v125[v127];
              LOBYTE(a7) = v13[v127 + 1];
              *(double *)&unint64_t v129 = (double)*(unint64_t *)&a6;
              a8.i8[0] = v125[v127 + 1];
              *(double *)a8.i64 = (double)a8.u64[0];
              *(double *)&unint64_t v130 = (double)*(unint64_t *)&a7 * *(double *)a8.i64;
              double v131 = *(double *)&v130 + (double)*(unint64_t *)&a5 * *(double *)&v129;
              LOBYTE(v129) = v13[v127 + 2];
              *(double *)&unint64_t v132 = (double)v129;
              LOBYTE(v130) = v125[v127 + 2];
              *(double *)&unint64_t v133 = (double)v130;
              double v134 = v131 + *(double *)&v132 * *(double *)&v133;
              LOBYTE(v132) = v13[v127 + 3];
              a6 = (double)v132;
              LOBYTE(v133) = v125[v127 + 3];
              a7 = (double)v133;
              a5 = v134 + a6 * a7;
              double v128 = v128 + a5;
              v127 += 4;
            }
            while (v127 <= v122);
            uint64_t v135 = 0;
            do
            {
              LOBYTE(a5) = v13[v123 + v135];
              LOBYTE(a6) = v125[v123 + v135];
              a5 = (double)*(unint64_t *)&a5;
              a6 = (double)*(unint64_t *)&a6;
              double v128 = v128 + a5 * a6;
              ++v135;
            }
            while ((int)v20 > (int)v123 + (int)v135);
            float v136 = v128 * a4;
            *(float *)(v14 + 4 * v126++) = v136;
            v125 += v16;
          }
          while (v126 < v19);
          v14 += 4 * v382;
          v13 += v16;
        }
      }
      return result;
    }
    unint64_t v137 = 0;
    uint64_t v138 = (v122 >> 2) + 1;
    uint64_t v139 = v138 & 0x7FFFFFF0;
    uint64_t v390 = v138 & 0x7FFFFFF8;
    uint64_t v385 = (v122 & 0xFFFFFFFC) + 4;
    unint64_t v386 = (v21 - 4);
    uint64_t v383 = v139;
    uint64_t v384 = v138;
LABEL_105:
    uint64_t v140 = &v13[v123];
    uint64_t v141 = v13;
    unint64_t v381 = v137;
    unint64_t v142 = v137;
    int8x16_t v388 = v13;
    uint64_t v389 = v14;
    int8x16_t v387 = &v13[v123];
    while (v122 >= 0x3C)
    {
      unint64_t v391 = v142;
      uint64x2_t v392 = v141;
      double v145 = 0.0;
      long long v146 = v141;
      do
      {
        double v428 = v145;
        uint64_t v426 = v139;
        int8x16x4_t v435 = vld4q_s8(v13);
        uint64_t v147 = v13 + 64;
        uint64_t v424 = v147;
        int8x16x4_t v436 = vld4q_s8(v146);
        v146 += 64;
        unint64_t v148 = vextq_s8(v435.val[0], v435.val[0], 8uLL).u64[0];
        unint64_t v149 = vextq_s8(v436.val[0], v436.val[0], 8uLL).u64[0];
        unint64_t v150 = vextq_s8(v435.val[1], v435.val[1], 8uLL).u64[0];
        __int32 v423 = v435.val[1].u8[7];
        __int32 v422 = v435.val[1].u8[5];
        __int32 v421 = v435.val[1].u8[3];
        __int32 v420 = v435.val[1].u8[1];
        unsigned int v419 = v435.val[2].u8[6];
        v151.i32[0] = BYTE2(v148);
        unsigned int v412 = v436.val[0].u8[0];
        unsigned int v418 = v435.val[2].u8[7];
        unsigned int v417 = v435.val[2].u8[4];
        v152.i32[0] = BYTE4(v148);
        unsigned int v411 = v436.val[0].u8[2];
        unsigned int v416 = v435.val[2].u8[5];
        unsigned int v415 = v435.val[2].u8[2];
        v153.i32[0] = BYTE6(v148);
        unsigned int v414 = v435.val[2].u8[3];
        unsigned int v413 = v435.val[2].u8[1];
        unsigned int v409 = v435.val[3].u8[0];
        unsigned int v410 = v435.val[2].u8[0];
        v154.i32[0] = BYTE2(v149);
        v155.i32[0] = v435.val[1].u8[6];
        unsigned int v407 = v435.val[3].u8[2];
        unsigned int v408 = v435.val[3].u8[1];
        v156.i32[0] = BYTE4(v149);
        unint64_t v157 = vextq_s8(v436.val[1], v436.val[1], 8uLL).u64[0];
        unsigned int v405 = v435.val[3].u8[4];
        unsigned int v406 = v435.val[3].u8[3];
        v158.i32[0] = BYTE6(v149);
        unint64_t v159 = vextq_s8(v435.val[2], v435.val[2], 8uLL).u64[0];
        unsigned int v404 = v435.val[3].u8[5];
        v160.i32[0] = BYTE6(v150);
        unsigned int v400 = v435.val[3].u8[7];
        unsigned int v401 = v435.val[3].u8[6];
        unint64_t v399 = vextq_s8(v435.val[3], v435.val[3], 8uLL).u64[0];
        v435.val[3].i32[0] = BYTE4(v150);
        unint64_t v161 = vextq_s8(v436.val[2], v436.val[2], 8uLL).u64[0];
        unsigned int v162 = v436.val[0].u8[1];
        v163.i32[0] = BYTE2(v150);
        unsigned int v164 = v436.val[0].u8[3];
        int v165 = v436.val[1].u8[7];
        __int32 v166 = v436.val[1].u8[5];
        unsigned int v167 = v436.val[1].u8[2];
        unsigned int v168 = v436.val[1].u8[3];
        unsigned int v169 = v436.val[1].u8[0];
        uint64_t result = (unsigned char *)v436.val[1].u8[1];
        unsigned int v170 = v436.val[2].u8[6];
        unsigned int v171 = v436.val[2].u8[7];
        unsigned int v172 = v436.val[2].u8[4];
        unsigned int v173 = v436.val[2].u8[5];
        LODWORD(v147) = v436.val[2].u8[2];
        unsigned int v174 = v436.val[2].u8[3];
        unsigned int v175 = v436.val[2].u8[0];
        unsigned int v176 = v436.val[2].u8[1];
        unsigned int v403 = v436.val[3].u8[0];
        unsigned int v402 = v436.val[3].u8[1];
        unsigned int v398 = v436.val[3].u8[2];
        unsigned int v177 = v436.val[3].u8[3];
        unsigned int v178 = v436.val[3].u8[4];
        unsigned int v179 = v436.val[3].u8[5];
        unsigned int v180 = v436.val[3].u8[6];
        unsigned int v181 = v436.val[3].u8[7];
        unint64_t v182 = vextq_s8(v436.val[3], v436.val[3], 8uLL).u64[0];
        v436.val[1].i32[0] = v435.val[1].u8[4];
        v183.i32[0] = v435.val[1].u8[2];
        v435.val[2].i32[0] = BYTE6(v157);
        v160.i32[1] = HIBYTE(v150);
        v435.val[2].i32[1] = HIBYTE(v157);
        *(int8x8_t *)v436.val[2].i8 = vand_s8(v160, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v436.val[2].u32[0];
        v184.i64[1] = v436.val[2].u32[1];
        *(int8x8_t *)v435.val[2].i8 = vand_s8(*(int8x8_t *)v435.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v436.val[2] = (int8x16_t)vcvtq_f64_u64(v184);
        v184.i64[0] = v435.val[2].u32[0];
        v184.i64[1] = v435.val[2].u32[1];
        float64x2_t v185 = vmulq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184));
        v436.val[2].i32[0] = v150;
        v153.i32[1] = HIBYTE(v148);
        v158.i32[1] = HIBYTE(v149);
        int8x8_t v186 = vand_s8(v153, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v186.u32[0];
        v184.i64[1] = v186.u32[1];
        int8x8_t v187 = vand_s8(v158, (int8x8_t)0xFF000000FFLL);
        float64x2_t v188 = vcvtq_f64_u64(v184);
        v184.i64[0] = v187.u32[0];
        v184.i64[1] = v187.u32[1];
        float64x2_t v189 = vmlaq_f64(v185, vcvtq_f64_u64(v184), v188);
        v190.i32[0] = v435.val[1].u8[0];
        v152.i32[1] = BYTE5(v148);
        v156.i32[1] = BYTE5(v149);
        v435.val[3].i32[1] = BYTE5(v150);
        LODWORD(v188.f64[0]) = BYTE4(v157);
        HIDWORD(v188.f64[0]) = BYTE5(v157);
        *(int8x8_t *)v435.val[3].i8 = vand_s8(*(int8x8_t *)v435.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[3].u32[0];
        v184.i64[1] = v435.val[3].u32[1];
        v435.val[3] = (int8x16_t)vcvtq_f64_u64(v184);
        *(int8x8_t *)&v188.f64[0] = vand_s8(*(int8x8_t *)&v188.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v188.f64[0]);
        v184.i64[1] = HIDWORD(v188.f64[0]);
        float64x2_t v191 = vmulq_f64((float64x2_t)v435.val[3], vcvtq_f64_u64(v184));
        LODWORD(v188.f64[0]) = v436.val[1].u8[6];
        int8x8_t v192 = vand_s8(v152, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v192.u32[0];
        v184.i64[1] = v192.u32[1];
        uint64x2_t v193 = v184;
        int8x8_t v194 = vand_s8(v156, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v194.u32[0];
        v184.i64[1] = v194.u32[1];
        float64x2_t v195 = vmlaq_f64(v191, vcvtq_f64_u64(v184), vcvtq_f64_u64(v193));
        v193.i32[0] = v436.val[1].u8[4];
        v194.i32[0] = BYTE2(v157);
        v436.val[0].i32[0] = v157;
        v436.val[3].i32[0] = v148;
        v436.val[3].i32[1] = BYTE1(v148);
        v196.i32[0] = v435.val[0].u8[0];
        v196.i32[1] = v435.val[0].u8[1];
        v197.i32[0] = v435.val[0].u8[2];
        v197.i32[1] = v435.val[0].u8[3];
        v151.i32[1] = BYTE3(v148);
        v435.val[2].i32[0] = v435.val[0].u8[4];
        v435.val[2].i32[1] = v435.val[0].u8[5];
        v435.val[0].i32[0] = v435.val[0].u8[6];
        v435.val[0].i32[1] = v435.val[0].u8[7];
        v435.val[3].i32[0] = v149;
        v435.val[3].i32[1] = BYTE1(v149);
        v435.val[1].i32[0] = v436.val[0].u8[4];
        v154.i32[1] = BYTE3(v149);
        v435.val[1].i32[1] = v436.val[0].u8[5];
        v198.i32[0] = v436.val[0].u8[6];
        v198.i32[1] = v436.val[0].u8[7];
        v163.i32[1] = BYTE3(v150);
        v155.i32[1] = v423;
        v436.val[1].i32[1] = v422;
        v436.val[2].i32[1] = BYTE1(v150);
        v183.i32[1] = v421;
        v190.i32[1] = v420;
        v194.i32[1] = BYTE3(v157);
        HIDWORD(v188.f64[0]) = v165;
        v193.i32[1] = v166;
        v436.val[0].i32[1] = BYTE1(v157);
        int8x8_t v199 = vand_s8(v163, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v199.u32[0];
        v184.i64[1] = v199.u32[1];
        float64x2_t v200 = vcvtq_f64_u64(v184);
        int8x8_t v201 = vand_s8(v194, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v201.u32[0];
        v184.i64[1] = v201.u32[1];
        float64x2_t v202 = vmulq_f64(v200, vcvtq_f64_u64(v184));
        int8x8_t v203 = vand_s8(v151, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v203.u32[0];
        v184.i64[1] = v203.u32[1];
        float64x2_t v204 = vcvtq_f64_u64(v184);
        int8x8_t v205 = vand_s8(v154, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v205.u32[0];
        v184.i64[1] = v205.u32[1];
        float64x2_t v206 = vmlaq_f64(v202, vcvtq_f64_u64(v184), v204);
        *(int8x8_t *)&v204.f64[0] = vand_s8(v155, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v204.f64[0]);
        v184.i64[1] = HIDWORD(v204.f64[0]);
        float64x2_t v207 = vcvtq_f64_u64(v184);
        int8x8_t v208 = vand_s8(*(int8x8_t *)&v188.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v208.u32[0];
        v184.i64[1] = v208.u32[1];
        float64x2_t v209 = vmulq_f64(v207, vcvtq_f64_u64(v184));
        int8x8_t v210 = vand_s8(*(int8x8_t *)v435.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v210.u32[0];
        v184.i64[1] = v210.u32[1];
        uint64x2_t v211 = v184;
        int8x8_t v212 = vand_s8(v198, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v212.u32[0];
        v184.i64[1] = v212.u32[1];
        float64x2_t v213 = vmlaq_f64(v209, vcvtq_f64_u64(v184), vcvtq_f64_u64(v211));
        *(int8x8_t *)v436.val[1].i8 = vand_s8(*(int8x8_t *)v436.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v436.val[1].u32[0];
        v184.i64[1] = v436.val[1].u32[1];
        *(int8x8_t *)v193.i8 = vand_s8(*(int8x8_t *)v193.i8, (int8x8_t)0xFF000000FFLL);
        v436.val[1] = (int8x16_t)vcvtq_f64_u64(v184);
        v184.i64[0] = v193.u32[0];
        v184.i64[1] = v193.u32[1];
        v436.val[1] = (int8x16_t)vmulq_f64((float64x2_t)v436.val[1], vcvtq_f64_u64(v184));
        *(int8x8_t *)v193.i8 = vand_s8(*(int8x8_t *)v435.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v193.u32[0];
        v184.i64[1] = v193.u32[1];
        float64x2_t v214 = vcvtq_f64_u64(v184);
        int8x8_t v215 = vand_s8(*(int8x8_t *)v435.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v215.u32[0];
        v184.i64[1] = v215.u32[1];
        v436.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[1], vcvtq_f64_u64(v184), v214);
        *(int8x8_t *)v436.val[2].i8 = vand_s8(*(int8x8_t *)v436.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v436.val[2].u32[0];
        v184.i64[1] = v436.val[2].u32[1];
        v436.val[2] = (int8x16_t)vcvtq_f64_u64(v184);
        int8x8_t v216 = vand_s8(*(int8x8_t *)v436.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v216.u32[0];
        v184.i64[1] = v216.u32[1];
        v436.val[2] = (int8x16_t)vmulq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184));
        int8x8_t v217 = vand_s8(*(int8x8_t *)v436.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v217.u32[0];
        v184.i64[1] = v217.u32[1];
        float64x2_t v218 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v214.f64[0] = vand_s8(*(int8x8_t *)v435.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        v436.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184), v218);
        *(int8x8_t *)&v218.f64[0] = vand_s8(v183, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v218.f64[0]);
        v184.i64[1] = HIDWORD(v218.f64[0]);
        float64x2_t v219 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v436.val[3].i8 = vand_s8((int8x8_t)__PAIR64__(v168, v167), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v436.val[3].u32[0];
        v184.i64[1] = v436.val[3].u32[1];
        v436.val[3] = (int8x16_t)vmulq_f64(v219, vcvtq_f64_u64(v184));
        *(int8x8_t *)&v219.f64[0] = vand_s8(v197, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v219.f64[0]);
        v184.i64[1] = HIDWORD(v219.f64[0]);
        uint64x2_t v220 = v184;
        *(int8x8_t *)&v214.f64[0] = vand_s8((int8x8_t)__PAIR64__(v164, v411), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        v436.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[3], vcvtq_f64_u64(v184), vcvtq_f64_u64(v220));
        *(int8x8_t *)v220.i8 = vand_s8(v190, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v220.u32[0];
        v184.i64[1] = v220.u32[1];
        int8x8_t v221 = vand_s8((int8x8_t)__PAIR64__(result, v169), (int8x8_t)0xFF000000FFLL);
        float64x2_t v222 = vcvtq_f64_u64(v184);
        v184.i64[0] = v221.u32[0];
        v184.i64[1] = v221.u32[1];
        float64x2_t v223 = vmulq_f64(v222, vcvtq_f64_u64(v184));
        *(int8x8_t *)&v222.f64[0] = vand_s8(v196, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v222.f64[0]);
        v184.i64[1] = HIDWORD(v222.f64[0]);
        float64x2_t v224 = vcvtq_f64_u64(v184);
        int8x8_t v225 = vand_s8((int8x8_t)__PAIR64__(v162, v412), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v225.u32[0];
        v184.i64[1] = v225.u32[1];
        float64x2_t v226 = vmlaq_f64(v223, vcvtq_f64_u64(v184), v224);
        int8x8_t v227 = vand_s8((int8x8_t)__PAIR64__(v413, v410), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v227.u32[0];
        v184.i64[1] = v227.u32[1];
        float64x2_t v228 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v224.f64[0] = vand_s8((int8x8_t)__PAIR64__(v176, v175), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v224.f64[0]);
        v184.i64[1] = HIDWORD(v224.f64[0]);
        float64x2_t v229 = vmlaq_f64(v226, vcvtq_f64_u64(v184), v228);
        *(int8x8_t *)&v224.f64[0] = vand_s8((int8x8_t)__PAIR64__(v414, v415), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v224.f64[0]);
        v184.i64[1] = HIDWORD(v224.f64[0]);
        float64x2_t v230 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v228.f64[0] = vand_s8((int8x8_t)__PAIR64__(v174, v147), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        v436.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[3], vcvtq_f64_u64(v184), v230);
        LODWORD(v230.f64[0]) = v159;
        HIDWORD(v230.f64[0]) = BYTE1(v159);
        LODWORD(v228.f64[0]) = v161;
        HIDWORD(v228.f64[0]) = BYTE1(v161);
        *(int8x8_t *)&v230.f64[0] = vand_s8(*(int8x8_t *)&v230.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v230.f64[0]);
        v184.i64[1] = HIDWORD(v230.f64[0]);
        float64x2_t v231 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v228.f64[0] = vand_s8(*(int8x8_t *)&v228.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        v436.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184), v231);
        *(int8x8_t *)&v231.f64[0] = vand_s8((int8x8_t)__PAIR64__(v416, v417), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v231.f64[0]);
        v184.i64[1] = HIDWORD(v231.f64[0]);
        float64x2_t v232 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v228.f64[0] = vand_s8((int8x8_t)__PAIR64__(v173, v172), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        v436.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[1], vcvtq_f64_u64(v184), v232);
        LODWORD(v232.f64[0]) = BYTE2(v159);
        HIDWORD(v232.f64[0]) = BYTE3(v159);
        LODWORD(v228.f64[0]) = BYTE2(v161);
        HIDWORD(v228.f64[0]) = BYTE3(v161);
        *(int8x8_t *)&v232.f64[0] = vand_s8(*(int8x8_t *)&v232.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v232.f64[0]);
        v184.i64[1] = HIDWORD(v232.f64[0]);
        float64x2_t v233 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v228.f64[0] = vand_s8(*(int8x8_t *)&v228.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        float64x2_t v234 = vmlaq_f64(v206, vcvtq_f64_u64(v184), v233);
        LODWORD(v233.f64[0]) = BYTE4(v159);
        HIDWORD(v233.f64[0]) = BYTE5(v159);
        *(int8x8_t *)&v233.f64[0] = vand_s8(*(int8x8_t *)&v233.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v233.f64[0]);
        v184.i64[1] = HIDWORD(v233.f64[0]);
        LODWORD(v214.f64[0]) = BYTE4(v161);
        HIDWORD(v214.f64[0]) = BYTE5(v161);
        float64x2_t v235 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v214.f64[0] = vand_s8(*(int8x8_t *)&v214.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        float64x2_t v236 = vmlaq_f64(v195, vcvtq_f64_u64(v184), v235);
        LODWORD(v235.f64[0]) = BYTE6(v159);
        LODWORD(v214.f64[0]) = BYTE6(v161);
        HIDWORD(v235.f64[0]) = HIBYTE(v159);
        HIDWORD(v214.f64[0]) = HIBYTE(v161);
        *(int8x8_t *)&v235.f64[0] = vand_s8(*(int8x8_t *)&v235.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v235.f64[0]);
        v184.i64[1] = HIDWORD(v235.f64[0]);
        float64x2_t v237 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v214.f64[0] = vand_s8(*(int8x8_t *)&v214.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        float64x2_t v238 = vmlaq_f64(v189, vcvtq_f64_u64(v184), v237);
        LODWORD(v237.f64[0]) = BYTE4(v399);
        LODWORD(v214.f64[0]) = BYTE6(v399);
        *(int8x8_t *)&v228.f64[0] = vand_s8((int8x8_t)__PAIR64__(v418, v419), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v228.f64[0]);
        v184.i64[1] = HIDWORD(v228.f64[0]);
        float64x2_t v239 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v435.val[1].i8 = vand_s8((int8x8_t)__PAIR64__(v171, v170), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[1].u32[0];
        v184.i64[1] = v435.val[1].u32[1];
        float64x2_t v240 = vmlaq_f64(v213, vcvtq_f64_u64(v184), v239);
        HIDWORD(v214.f64[0]) = HIBYTE(v399);
        *(int8x8_t *)v435.val[1].i8 = vand_s8(*(int8x8_t *)&v214.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[1].u32[0];
        v184.i64[1] = v435.val[1].u32[1];
        LODWORD(v214.f64[0]) = BYTE6(v182);
        HIDWORD(v214.f64[0]) = HIBYTE(v182);
        v435.val[1] = (int8x16_t)vcvtq_f64_u64(v184);
        *(int8x8_t *)&v214.f64[0] = vand_s8(*(int8x8_t *)&v214.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v214.f64[0]);
        v184.i64[1] = HIDWORD(v214.f64[0]);
        float64x2_t v241 = vmlaq_f64(v238, vcvtq_f64_u64(v184), (float64x2_t)v435.val[1]);
        v435.val[1].i32[0] = BYTE4(v182);
        HIDWORD(v237.f64[0]) = BYTE5(v399);
        v435.val[1].i32[1] = BYTE5(v182);
        *(int8x8_t *)&v237.f64[0] = vand_s8(*(int8x8_t *)&v237.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v237.f64[0]);
        v184.i64[1] = HIDWORD(v237.f64[0]);
        float64x2_t v242 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v435.val[1].i8 = vand_s8(*(int8x8_t *)v435.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[1].u32[0];
        v184.i64[1] = v435.val[1].u32[1];
        float64x2_t v243 = vmlaq_f64(v236, vcvtq_f64_u64(v184), v242);
        *(int8x8_t *)&v242.f64[0] = vand_s8((int8x8_t)__PAIR64__(v400, v401), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v242.f64[0]);
        v184.i64[1] = HIDWORD(v242.f64[0]);
        uint64x2_t v244 = v184;
        *(int8x8_t *)&v239.f64[0] = vand_s8((int8x8_t)__PAIR64__(v181, v180), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v239.f64[0]);
        v184.i64[1] = HIDWORD(v239.f64[0]);
        float64x2_t v245 = vmlaq_f64(v240, vcvtq_f64_u64(v184), vcvtq_f64_u64(v244));
        *(int8x8_t *)v244.i8 = vand_s8((int8x8_t)__PAIR64__(v404, v405), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v244.u32[0];
        v184.i64[1] = v244.u32[1];
        float64x2_t v246 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v239.f64[0] = vand_s8((int8x8_t)__PAIR64__(v179, v178), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v239.f64[0]);
        v184.i64[1] = HIDWORD(v239.f64[0]);
        v436.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[1], vcvtq_f64_u64(v184), v246);
        LODWORD(v246.f64[0]) = BYTE2(v399);
        HIDWORD(v246.f64[0]) = BYTE3(v399);
        *(int8x8_t *)&v246.f64[0] = vand_s8(*(int8x8_t *)&v246.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v246.f64[0]);
        v184.i64[1] = HIDWORD(v246.f64[0]);
        LODWORD(v239.f64[0]) = BYTE2(v182);
        float64x2_t v247 = vcvtq_f64_u64(v184);
        HIDWORD(v239.f64[0]) = BYTE3(v182);
        *(int8x8_t *)&v239.f64[0] = vand_s8(*(int8x8_t *)&v239.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v239.f64[0]);
        v184.i64[1] = HIDWORD(v239.f64[0]);
        float64x2_t v248 = vmlaq_f64(v234, vcvtq_f64_u64(v184), v247);
        LODWORD(v239.f64[0]) = v399;
        HIDWORD(v239.f64[0]) = BYTE1(v399);
        v435.val[0].i32[0] = v182;
        v435.val[0].i32[1] = BYTE1(v182);
        float64x2_t v13 = v424;
        *(int8x8_t *)&v239.f64[0] = vand_s8(*(int8x8_t *)&v239.f64[0], (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v239.f64[0]);
        v184.i64[1] = HIDWORD(v239.f64[0]);
        float64x2_t v249 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v435.val[0].i8 = vand_s8(*(int8x8_t *)v435.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[0].u32[0];
        v184.i64[1] = v435.val[0].u32[1];
        v436.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[2], vcvtq_f64_u64(v184), v249);
        *(int8x8_t *)&v249.f64[0] = vand_s8((int8x8_t)__PAIR64__(v406, v407), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v249.f64[0]);
        v184.i64[1] = HIDWORD(v249.f64[0]);
        float64x2_t v250 = vcvtq_f64_u64(v184);
        *(int8x8_t *)v435.val[0].i8 = vand_s8((int8x8_t)__PAIR64__(v177, v398), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = v435.val[0].u32[0];
        v184.i64[1] = v435.val[0].u32[1];
        v436.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v436.val[3], vcvtq_f64_u64(v184), v250);
        *(int8x8_t *)&v247.f64[0] = vand_s8((int8x8_t)__PAIR64__(v408, v409), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v247.f64[0]);
        v184.i64[1] = HIDWORD(v247.f64[0]);
        float64x2_t v251 = vcvtq_f64_u64(v184);
        *(int8x8_t *)&v250.f64[0] = vand_s8((int8x8_t)__PAIR64__(v402, v403), (int8x8_t)0xFF000000FFLL);
        v184.i64[0] = LODWORD(v250.f64[0]);
        v184.i64[1] = HIDWORD(v250.f64[0]);
        float64x2_t v252 = vmlaq_f64(v229, vcvtq_f64_u64(v184), v251);
        v251.f64[0] = v428
                    + v252.f64[0]
                    + v252.f64[1]
                    + *(double *)v436.val[3].i64
                    + *(double *)&v436.val[3].i64[1]
                    + *(double *)v436.val[1].i64
                    + *(double *)&v436.val[1].i64[1]
                    + v245.f64[0]
                    + v245.f64[1]
                    + *(double *)v436.val[2].i64
                    + *(double *)&v436.val[2].i64[1]
                    + v248.f64[0]
                    + v248.f64[1];
        double v253 = v241.f64[1];
        double v254 = v243.f64[1];
        double v255 = v251.f64[0] + v243.f64[0] + v243.f64[1] + v241.f64[0];
        double v145 = v255 + v241.f64[1];
        uint64_t v139 = v426 - 16;
      }
      while (v426 != 16);
      uint64_t v139 = v383;
      uint64_t v138 = v384;
      if (v384 != v383)
      {
        uint64_t v144 = v383;
        uint64_t v257 = v383;
        float64x2_t v13 = v388;
        uint64_t v14 = v389;
        uint64_t v16 = v395;
        unint64_t v19 = v396;
        double v256 = a4;
        LODWORD(v20) = v394;
        LODWORD(v21) = v397;
        uint64_t v123 = v385;
        unint64_t v122 = v386;
        uint64_t v140 = v387;
        unint64_t v142 = v391;
        uint64_t v141 = v392;
        if ((v384 & 8) != 0)
        {
LABEL_114:
          uint64_t v258 = 4 * v144;
          uint64_t v259 = v144 - v390;
          do
          {
            double v429 = v145;
            uint64_t v260 = &v13[v258];
            uint64_t v261 = &v141[v258];
            int8x8x4_t v434 = vld4_s8(v260);
            int8x8x4_t v433 = vld4_s8(v261);
            v262.i32[0] = v434.val[0].u8[0];
            v263.i32[0] = v434.val[0].u8[2];
            v264.i32[0] = v434.val[0].u8[4];
            v265.i32[0] = v434.val[0].u8[6];
            v266.i32[0] = v433.val[0].u8[0];
            v267.i32[0] = v433.val[0].u8[2];
            v268.i32[0] = v433.val[0].u8[4];
            v269.i32[0] = v433.val[0].u8[6];
            v270.i32[0] = v434.val[1].u8[6];
            v271.i32[0] = v434.val[1].u8[4];
            v262.i32[1] = v434.val[0].u8[1];
            v272.i32[0] = v434.val[1].u8[2];
            v273.i32[0] = v434.val[1].u8[0];
            v263.i32[1] = v434.val[0].u8[3];
            v264.i32[1] = v434.val[0].u8[5];
            v265.i32[1] = v434.val[0].u8[7];
            v274.i32[0] = v433.val[1].u8[6];
            v275.i32[0] = v433.val[1].u8[4];
            v266.i32[1] = v433.val[0].u8[1];
            v267.i32[1] = v433.val[0].u8[3];
            v276.i32[0] = v433.val[1].u8[2];
            v277.i32[0] = v433.val[1].u8[0];
            v273.i32[1] = v434.val[1].u8[1];
            v277.i32[1] = v433.val[1].u8[1];
            v268.i32[1] = v433.val[0].u8[5];
            v269.i32[1] = v433.val[0].u8[7];
            v278.i32[0] = v434.val[2].u8[6];
            v279.i32[0] = v434.val[2].u8[4];
            v270.i32[1] = v434.val[1].u8[7];
            v271.i32[1] = v434.val[1].u8[5];
            v272.i32[1] = v434.val[1].u8[3];
            v280.i32[0] = v434.val[2].u8[2];
            v281.i32[0] = v434.val[2].u8[0];
            v274.i32[1] = v433.val[1].u8[7];
            v275.i32[1] = v433.val[1].u8[5];
            v282.i32[0] = v433.val[2].u8[6];
            v283.i32[0] = v433.val[2].u8[4];
            v276.i32[1] = v433.val[1].u8[3];
            v278.i32[1] = v434.val[2].u8[7];
            v279.i32[1] = v434.val[2].u8[5];
            uint64_t result = (unsigned char *)v434.val[3].u8[1];
            v280.i32[1] = v434.val[2].u8[3];
            unsigned int v284 = v434.val[3].u8[2];
            unsigned int v285 = v434.val[3].u8[3];
            v281.i32[1] = v434.val[2].u8[1];
            LODWORD(v261) = v434.val[3].u8[4];
            unsigned int v286 = v434.val[3].u8[5];
            v282.i32[1] = v433.val[2].u8[7];
            unsigned int v287 = v434.val[3].u8[6];
            unsigned int v288 = v434.val[3].u8[7];
            v283.i32[1] = v433.val[2].u8[5];
            v434.val[1].i32[0] = v433.val[2].u8[2];
            v434.val[2].i32[0] = v433.val[2].u8[0];
            v434.val[1].i32[1] = v433.val[2].u8[3];
            v434.val[2].i32[1] = v433.val[2].u8[1];
            v434.val[3].i32[0] = v434.val[3].u8[0];
            v434.val[3].i32[1] = (int)result;
            v434.val[0] = vand_s8(v273, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v434.val[0].u32[0];
            v289.i64[1] = v434.val[0].u32[1];
            *(float64x2_t *)v434.val[0].i8 = vcvtq_f64_u64(v289);
            int8x8_t v290 = vand_s8(v277, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v290.u32[0];
            v289.i64[1] = v290.u32[1];
            float64x2_t v291 = vcvtq_f64_u64(v289);
            int8x8_t v292 = vand_s8(v262, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v292.u32[0];
            v289.i64[1] = v292.u32[1];
            uint64x2_t v293 = v289;
            int8x8_t v294 = vand_s8(v263, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v294.u32[0];
            v289.i64[1] = v294.u32[1];
            float64x2_t v295 = vcvtq_f64_u64(v289);
            int8x8_t v296 = vand_s8(v264, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v296.u32[0];
            v289.i64[1] = v296.u32[1];
            uint64x2_t v297 = v289;
            int8x8_t v298 = vand_s8(v265, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v298.u32[0];
            v289.i64[1] = v298.u32[1];
            float64x2_t v299 = vcvtq_f64_u64(v289);
            int8x8_t v300 = vand_s8(v266, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v300.u32[0];
            v289.i64[1] = v300.u32[1];
            uint64x2_t v301 = v289;
            int8x8_t v302 = vand_s8(v267, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v302.u32[0];
            v289.i64[1] = v302.u32[1];
            float64x2_t v303 = vcvtq_f64_u64(v289);
            int8x8_t v304 = vand_s8(v268, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v304.u32[0];
            v289.i64[1] = v304.u32[1];
            uint64x2_t v305 = v289;
            int8x8_t v306 = vand_s8(v269, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v306.u32[0];
            v289.i64[1] = v306.u32[1];
            float64x2_t v307 = vcvtq_f64_u64(v289);
            int8x8_t v308 = vand_s8(v270, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v308.u32[0];
            v289.i64[1] = v308.u32[1];
            uint64x2_t v309 = v289;
            int8x8_t v310 = vand_s8(v271, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v310.u32[0];
            v289.i64[1] = v310.u32[1];
            float64x2_t v311 = vcvtq_f64_u64(v289);
            int8x8_t v312 = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v312.u32[0];
            v289.i64[1] = v312.u32[1];
            uint64x2_t v313 = v289;
            int8x8_t v314 = vand_s8(v274, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v314.u32[0];
            v289.i64[1] = v314.u32[1];
            float64x2_t v315 = vcvtq_f64_u64(v289);
            int8x8_t v316 = vand_s8(v275, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v316.u32[0];
            v289.i64[1] = v316.u32[1];
            uint64x2_t v317 = v289;
            int8x8_t v318 = vand_s8(v276, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v318.u32[0];
            v289.i64[1] = v318.u32[1];
            float64x2_t v319 = vcvtq_f64_u64(v289);
            int8x8_t v320 = vand_s8(v278, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v320.u32[0];
            v289.i64[1] = v320.u32[1];
            uint64x2_t v321 = v289;
            int8x8_t v322 = vand_s8(v279, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v322.u32[0];
            v289.i64[1] = v322.u32[1];
            float64x2_t v323 = vcvtq_f64_u64(v289);
            int8x8_t v324 = vand_s8(v280, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v324.u32[0];
            v289.i64[1] = v324.u32[1];
            uint64x2_t v325 = v289;
            int8x8_t v326 = vand_s8(v281, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v326.u32[0];
            v289.i64[1] = v326.u32[1];
            float64x2_t v327 = vcvtq_f64_u64(v289);
            int8x8_t v328 = vand_s8(v282, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v328.u32[0];
            v289.i64[1] = v328.u32[1];
            uint64x2_t v329 = v289;
            int8x8_t v330 = vand_s8(v283, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v330.u32[0];
            v289.i64[1] = v330.u32[1];
            float64x2_t v331 = vcvtq_f64_u64(v289);
            v434.val[1] = vand_s8(v434.val[1], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v434.val[1].u32[0];
            v289.i64[1] = v434.val[1].u32[1];
            *(uint64x2_t *)v434.val[1].i8 = v289;
            v434.val[2] = vand_s8(v434.val[2], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v434.val[2].u32[0];
            v289.i64[1] = v434.val[2].u32[1];
            *(float64x2_t *)v434.val[2].i8 = vcvtq_f64_u64(v289);
            v434.val[3] = vand_s8(v434.val[3], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v434.val[3].u32[0];
            v289.i64[1] = v434.val[3].u32[1];
            *(float64x2_t *)v434.val[3].i8 = vcvtq_f64_u64(v289);
            int8x8_t v332 = vand_s8((int8x8_t)__PAIR64__(v285, v284), (int8x8_t)0xFF000000FFLL);
            float64x2_t v333 = vmulq_f64(vcvtq_f64_u64(v313), v319);
            v289.i64[0] = v332.u32[0];
            v289.i64[1] = v332.u32[1];
            float64x2_t v334 = vcvtq_f64_u64(v289);
            int8x8_t v335 = vand_s8((int8x8_t)__PAIR64__(v286, v261), (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v335.u32[0];
            v289.i64[1] = v335.u32[1];
            float64x2_t v336 = vcvtq_f64_u64(v289);
            float64x2_t v337 = vmulq_f64(v311, vcvtq_f64_u64(v317));
            *(int8x8_t *)v317.i8 = vand_s8((int8x8_t)__PAIR64__(v288, v287), (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v317.u32[0];
            v289.i64[1] = v317.u32[1];
            float64x2_t v338 = vcvtq_f64_u64(v289);
            float64x2_t v339 = vmulq_f64(vcvtq_f64_u64(v309), v315);
            LODWORD(v315.f64[0]) = v433.val[3].u8[0];
            *(float64x2_t *)v434.val[0].i8 = vmlaq_f64(vmulq_f64(*(float64x2_t *)v434.val[0].i8, v291), vcvtq_f64_u64(v301), vcvtq_f64_u64(v293));
            HIDWORD(v315.f64[0]) = v433.val[3].u8[1];
            *(int8x8_t *)v301.i8 = vand_s8(*(int8x8_t *)&v315.f64[0], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v301.u32[0];
            v289.i64[1] = v301.u32[1];
            float64x2_t v340 = vcvtq_f64_u64(v289);
            *(float64x2_t *)v434.val[0].i8 = vmlaq_f64(*(float64x2_t *)v434.val[0].i8, *(float64x2_t *)v434.val[2].i8, v327);
            v434.val[2].i32[0] = v433.val[3].u8[2];
            float64x2_t v341 = vmlaq_f64(v339, v307, v299);
            v434.val[2].i32[1] = v433.val[3].u8[3];
            *(int8x8_t *)&v299.f64[0] = vand_s8(v434.val[2], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = LODWORD(v299.f64[0]);
            v289.i64[1] = HIDWORD(v299.f64[0]);
            float64x2_t v342 = vcvtq_f64_u64(v289);
            float64x2_t v343 = vmlaq_f64(v337, vcvtq_f64_u64(v305), vcvtq_f64_u64(v297));
            v297.i32[0] = v433.val[3].u8[4];
            v297.i32[1] = v433.val[3].u8[5];
            *(int8x8_t *)v297.i8 = vand_s8(*(int8x8_t *)v297.i8, (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v297.u32[0];
            v289.i64[1] = v297.u32[1];
            float64x2_t v344 = vcvtq_f64_u64(v289);
            float64x2_t v345 = vmlaq_f64(vmlaq_f64(v333, v303, v295), vcvtq_f64_u64(*(uint64x2_t *)v434.val[1].i8), vcvtq_f64_u64(v325));
            v434.val[1].i32[0] = v433.val[3].u8[6];
            v434.val[1].i32[1] = v433.val[3].u8[7];
            v433.val[0] = vand_s8(v434.val[1], (int8x8_t)0xFF000000FFLL);
            v289.i64[0] = v433.val[0].u32[0];
            v289.i64[1] = v433.val[0].u32[1];
            float64x2_t v346 = vmlaq_f64(vmlaq_f64(v341, vcvtq_f64_u64(v329), vcvtq_f64_u64(v321)), vcvtq_f64_u64(v289), v338);
            double v253 = v346.f64[1];
            float64x2_t v347 = vmlaq_f64(vmlaq_f64(v343, v331, v323), v344, v336);
            float64x2_t v348 = vmlaq_f64(v345, v342, v334);
            *(float64x2_t *)v434.val[0].i8 = vmlaq_f64(*(float64x2_t *)v434.val[0].i8, v340, *(float64x2_t *)v434.val[3].i8);
            v245.f64[0] = v429 + *(double *)v434.val;
            double v254 = v347.f64[1];
            double v255 = v429
                 + *(double *)v434.val
                 + v349
                 + v348.f64[0]
                 + v348.f64[1]
                 + v347.f64[0]
                 + v347.f64[1]
                 + v346.f64[0];
            double v145 = v255 + v346.f64[1];
            v258 += 32;
            v259 += 8;
          }
          while (v259);
          uint64_t v257 = v390;
          double v256 = a4;
          if (v138 == v390) {
            goto LABEL_119;
          }
        }
        unint64_t v350 = 4 * v257;
        do
        {
          LOBYTE(v255) = v13[v350];
          LOBYTE(v253) = v141[v350];
          LOBYTE(v254) = v13[v350 + 1];
          *(double *)&unint64_t v351 = (double)*(unint64_t *)&v253;
          LOBYTE(v245.f64[0]) = v141[v350 + 1];
          v245.f64[0] = (double)*(unint64_t *)&v245.f64[0];
          *(double *)&unint64_t v352 = (double)*(unint64_t *)&v254 * v245.f64[0];
          double v353 = *(double *)&v352 + (double)*(unint64_t *)&v255 * *(double *)&v351;
          LOBYTE(v351) = v13[v350 + 2];
          *(double *)&unint64_t v354 = (double)v351;
          LOBYTE(v352) = v141[v350 + 2];
          *(double *)&unint64_t v355 = (double)v352;
          double v356 = v353 + *(double *)&v354 * *(double *)&v355;
          LOBYTE(v354) = v13[v350 + 3];
          double v253 = (double)v354;
          LOBYTE(v355) = v141[v350 + 3];
          double v254 = (double)v355;
          double v255 = v356 + v253 * v254;
          double v145 = v145 + v255;
          v350 += 4;
        }
        while (v350 <= v122);
        goto LABEL_119;
      }
      float64x2_t v13 = v388;
      uint64_t v14 = v389;
      uint64_t v16 = v395;
      unint64_t v19 = v396;
      double v256 = a4;
      LODWORD(v20) = v394;
      LODWORD(v21) = v397;
      uint64_t v123 = v385;
      unint64_t v122 = v386;
      uint64_t v140 = v387;
      unint64_t v142 = v391;
      uint64_t v141 = v392;
LABEL_119:
      if (v123 < v20)
      {
        uint64_t v357 = 0;
        do
        {
          LOBYTE(v255) = v140[v357];
          LOBYTE(v253) = v141[v123 + v357];
          double v255 = (double)*(unint64_t *)&v255;
          double v253 = (double)*(unint64_t *)&v253;
          double v145 = v145 + v255 * v253;
          ++v357;
        }
        while ((int)v21 > (int)v123 + (int)v357);
      }
      float v143 = v145 * v256;
      *(float *)(v14 + 4 * v142++) = v143;
      v141 += v16;
      if (v142 >= v19)
      {
        unint64_t v137 = v381 + 1;
        v14 += 4 * v382;
        v13 += v16;
        if (v381 + 1 == v19) {
          return result;
        }
        goto LABEL_105;
      }
    }
    uint64_t v144 = 0;
    double v145 = 0.0;
    goto LABEL_114;
  }
  int v22 = *(_DWORD *)(a3 + 12);
  uint64_t result = v430;
  if ((unint64_t)(4 * v20) >= 0x409) {
    operator new[]();
  }
  if ((int)v19 >= 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = (int)v21 - 4;
    int v25 = ((v21 - 4) & 0xFFFFFFFC) + 4;
    v427 = &v430[4 * v21];
    uint64_t v26 = 4 * v17;
    uint64_t v27 = v21 & 0xFFFFFFF0;
    uint64_t v28 = v21 & 0xFFFFFFF8;
    uint64_t v29 = 16 * (v22 == v20);
    BOOL v30 = v13 + 3;
    uint64_t v425 = v15 + 4 * v21;
    uint64_t v31 = *(_OWORD **)(a3 + 16);
    uint64_t v32 = v13;
    do
    {
      unint64_t v33 = &v13[v16 * v23];
      uint64_t v34 = v13;
      __n128 v35 = &v13[v21 + v16 * v23];
      if (v22 >= (int)v21)
      {
        if ((int)v21 >= 1)
        {
          if (v21 >= 8)
          {
            uint64_t v37 = 0;
            BOOL v41 = (unint64_t)v430 < v425 + v26 * v23 && v15 + v26 * v23 < (unint64_t)v427;
            BOOL v42 = v33 >= v427 || v430 >= v35;
            if (v42 && !v41)
            {
              if (v21 >= 0x10)
              {
                uint64_t v49 = v27;
                BOOL v50 = (float32x4_t *)v430;
                uint64_t v51 = v31;
                uint64_t v52 = (int8x16_t *)v32;
                do
                {
                  int8x16_t v53 = *v52++;
                  a10 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1004048A0));
                  int8x16_t v11 = *((int8x16_t *)v51 + 2);
                  float32x4_t v54 = *((float32x4_t *)v51 + 3);
                  float32x4_t v56 = *(float32x4_t *)v51;
                  float32x4_t v55 = *((float32x4_t *)v51 + 1);
                  v51 += 4;
                  a9 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_100404890)), v56);
                  a11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1004048B0)), (float32x4_t)v11);
                  v50[2] = a11;
                  v50[3] = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v53, (int8x16_t)xmmword_1004048C0)), v54);
                  a8 = (int8x16_t)vsubq_f32((float32x4_t)a10, v55);
                  *BOOL v50 = a9;
                  v50[1] = (float32x4_t)a8;
                  v50 += 4;
                  v49 -= 16;
                }
                while (v49);
                if (v27 == v21) {
                  goto LABEL_55;
                }
                uint64_t v43 = v27;
                uint64_t v37 = v27;
                if ((v21 & 8) == 0) {
                  goto LABEL_54;
                }
              }
              else
              {
                uint64_t v43 = 0;
              }
              uint64_t v57 = 4 * v43;
              do
              {
                a8.i64[0] = *(void *)&v32[v43];
                a11 = *(float32x4_t *)((char *)v31 + v57);
                a10 = *(int8x16_t *)((char *)v31 + v57 + 16);
                a9 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_100404890)), a11);
                a8 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a8, (int8x16_t)xmmword_1004048A0)), (float32x4_t)a10);
                long long v58 = (__n128 *)&v430[v57];
                *long long v58 = (__n128)a9;
                v58[1] = (__n128)a8;
                v43 += 8;
                v57 += 32;
              }
              while (v28 != v43);
              uint64_t v37 = v28;
              if (v28 == v21) {
                goto LABEL_55;
              }
              goto LABEL_54;
            }
          }
          else
          {
            uint64_t v37 = 0;
          }
          do
          {
LABEL_54:
            a8.i8[0] = v32[v37];
            a9.i32[0] = *((_DWORD *)v31 + v37);
            *(float *)a8.i32 = (float)a8.u32[0] - a9.f32[0];
            *(_DWORD *)&v430[4 * v37++] = a8.i32[0];
          }
          while (v21 != v37);
        }
      }
      else if ((int)v20 >= 1)
      {
        a8.i32[0] = *(_DWORD *)(v15 + 4 * v17 * v23);
        if (v20 >= 8)
        {
          if (v430 >= v35 || v33 >= v427)
          {
            if (v20 >= 0x10)
            {
              uint64_t v44 = 0;
              a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
              uint64_t v45 = (int8x16_t *)v430;
              do
              {
                int8x16_t v46 = *(int8x16_t *)&v32[v44];
                uint32x4_t v47 = (uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1004048A0);
                a11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_100404890)), a9);
                int8x16_t v11 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1004048B0)), a9);
                a10 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v46, (int8x16_t)xmmword_1004048C0)), a9);
                _DWORD v45[2] = v11;
                v45[3] = a10;
                *uint64_t v45 = (int8x16_t)a11;
                v45[1] = (int8x16_t)vsubq_f32(vcvtq_f32_u32(v47), a9);
                v45 += 4;
                v44 += 16;
              }
              while (v27 != v44);
              if (v27 == v21) {
                goto LABEL_55;
              }
              uint64_t v39 = v27;
              uint64_t v36 = v27;
              if ((v21 & 8) == 0) {
                goto LABEL_45;
              }
            }
            else
            {
              uint64_t v39 = 0;
            }
            a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.i8, 0);
            uint64_t v48 = (__n128 *)&v430[4 * v39];
            do
            {
              a10.i64[0] = *(void *)&v32[v39];
              a11 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_100404890)), a9);
              a10 = (int8x16_t)vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_1004048A0)), a9);
              *uint64_t v48 = (__n128)a11;
              v48[1] = (__n128)a10;
              v48 += 2;
              v39 += 8;
            }
            while (v28 != v39);
            uint64_t v36 = v28;
            if (v28 == v21) {
              goto LABEL_55;
            }
            goto LABEL_45;
          }
          uint64_t v36 = 0;
        }
        else
        {
          uint64_t v36 = 0;
        }
        do
        {
LABEL_45:
          a9.i8[0] = v32[v36];
          a9.f32[0] = (float)a9.u32[0] - *(float *)a8.i32;
          *(_DWORD *)&v430[4 * v36++] = a9.i32[0];
        }
        while (v21 != v36);
      }
LABEL_55:
      int v59 = v32;
      unint64_t v60 = v30;
      uint64_t v61 = v23;
      do
      {
        BOOL v62 = (int8x16_t *)(v15 + 4 * v17 * v61);
        if (v22 < (int)v20)
        {
          a8 = (int8x16_t)vld1q_dup_f32((const float *)v62->i32);
          int8x16_t v432 = a8;
          BOOL v62 = &v432;
        }
        if ((int)v21 >= 4)
        {
          uint64_t v65 = 0;
          double v64 = 0.0;
          uint64_t v66 = (float *)&v431;
          do
          {
            a11.i8[0] = v60[v65 - 3];
            float v67 = *(float *)v62->i32;
            LOBYTE(v67) = v60[v65 - 2];
            double v68 = *(v66 - 1) * (float)((float)LODWORD(v67) - *(float *)&v62->i32[1]);
            double v69 = v68 + *(v66 - 2) * (float)((float)a11.u32[0] - *(float *)v62->i32);
            LOBYTE(v68) = v60[v65 - 1];
            float v70 = *v66;
            float v71 = v66[1];
            v66 += 4;
            double v72 = v70;
            double v73 = v69 + v72 * (float)((float)LODWORD(v68) - *(float *)&v62->i32[2]);
            *(double *)a10.i64 = v71;
            LOBYTE(v72) = v60[v65];
            *(double *)a11.i64 = (float)((float)LODWORD(v72) - *(float *)&v62->i32[3]);
            *(double *)a9.i64 = v73 + v71 * *(double *)a11.i64;
            double v64 = v64 + *(double *)a9.i64;
            v65 += 4;
            BOOL v62 = (int8x16_t *)((char *)v62 + v29);
          }
          while (v65 <= v24);
          unsigned int v63 = v25;
          if (v25 >= (int)v20) {
            goto LABEL_57;
          }
        }
        else
        {
          unsigned int v63 = 0;
          double v64 = 0.0;
          if ((int)v20 <= 0) {
            goto LABEL_57;
          }
        }
        uint64_t v74 = v63;
        uint64_t v75 = v21 + ~v63;
        if (v75 < 7)
        {
          uint64_t v76 = v63;
          uint32x4_t v77 = v62;
          goto LABEL_78;
        }
        uint64_t v78 = v75 + 1;
        if (v75 >= 0xF)
        {
          uint64_t v79 = v78 & 0x1FFFFFFF0;
          int v80 = (float32x4_t *)&v430[4 * v74];
          int v81 = (int8x16_t *)&v59[v74];
          uint64_t v82 = v78 & 0x1FFFFFFF0;
          float32x4_t v83 = (float32x4_t *)v62;
          do
          {
            float32x4_t v85 = v80[2];
            float32x4_t v84 = v80[3];
            float32x4_t v87 = *v80;
            float32x4_t v86 = v80[1];
            v80 += 4;
            float64x2_t v88 = vcvtq_f64_f32(*(float32x2_t *)v87.f32);
            float64x2_t v89 = vcvtq_f64_f32(*(float32x2_t *)v86.f32);
            float64x2_t v90 = vcvtq_f64_f32(*(float32x2_t *)v85.f32);
            float64x2_t v91 = vcvtq_f64_f32(*(float32x2_t *)v84.f32);
            int8x16_t v92 = *v81++;
            float32x4_t v93 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_1004048C0)), v83[3]);
            float32x4_t v94 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_1004048B0)), v83[2]);
            float32x4_t v95 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_1004048A0)), v83[1]);
            float32x4_t v96 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v92, (int8x16_t)xmmword_100404890)), *v83);
            a9 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v84), vcvt_hight_f64_f32(v93));
            float64x2_t v97 = vmulq_f64(v91, vcvtq_f64_f32(*(float32x2_t *)v93.f32));
            a10 = (int8x16_t)vmulq_f64(vcvt_hight_f64_f32(v85), vcvt_hight_f64_f32(v94));
            float64x2_t v98 = vmulq_f64(v90, vcvtq_f64_f32(*(float32x2_t *)v94.f32));
            a11 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v86), vcvt_hight_f64_f32(v95));
            float64x2_t v99 = vmulq_f64(v89, vcvtq_f64_f32(*(float32x2_t *)v95.f32));
            float64x2_t v100 = vmulq_f64(vcvt_hight_f64_f32(v87), vcvt_hight_f64_f32(v96));
            int8x16_t v11 = (int8x16_t)vmulq_f64(v88, vcvtq_f64_f32(*(float32x2_t *)v96.f32));
            double v64 = v64
                + *(double *)v11.i64
                + *(double *)&v11.i64[1]
                + v100.f64[0]
                + v100.f64[1]
                + v99.f64[0]
                + v99.f64[1]
                + *(double *)a11.i64
                + *(double *)&a11.i64[1]
                + v98.f64[0]
                + v98.f64[1]
                + *(double *)a10.i64
                + *(double *)&a10.i64[1]
                + v97.f64[0]
                + v97.f64[1]
                + *(double *)a9.i64
                + *(double *)&a9.i64[1];
            v83 += 4;
            v82 -= 16;
          }
          while (v82);
          if (v78 == v79)
          {
            uint64_t v16 = v395;
            unint64_t v19 = v396;
            LODWORD(v20) = v394;
            goto LABEL_57;
          }
          uint64_t v16 = v395;
          unint64_t v19 = v396;
          if ((v78 & 8) == 0)
          {
            uint32x4_t v77 = (int8x16_t *)((char *)v62 + 4 * v79);
            uint64_t v76 = v79 + v74;
            LODWORD(v20) = v394;
LABEL_78:
            uint64_t v115 = 0;
            do
            {
              *(double *)a9.i64 = *(float *)&v430[4 * v76 + 4 * v115];
              a10.i8[0] = v59[v76 + v115];
              a11.i32[0] = v77->i32[v115];
              *(double *)a10.i64 = (float)((float)a10.u32[0] - a11.f32[0]);
              double v64 = v64 + *(double *)a9.i64 * *(double *)a10.i64;
              ++v115;
            }
            while ((int)v20 > (int)v76 + (int)v115);
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v79 = 0;
        }
        uint64_t v76 = (v78 & 0x1FFFFFFF8) + v74;
        uint32x4_t v77 = (int8x16_t *)((char *)v62 + 4 * (v78 & 0x1FFFFFFF8));
        uint64_t v101 = (float32x4_t *)((char *)v62 + 4 * v79);
        uint64_t v102 = v79 - (v78 & 0x1FFFFFFF8);
        uint64_t v103 = v79 + v74;
        uint64_t v104 = (float32x4_t *)&v430[4 * v103];
        do
        {
          float32x4_t v106 = *v104;
          float32x4_t v105 = v104[1];
          v104 += 2;
          float64x2_t v107 = vcvtq_f64_f32(*(float32x2_t *)v106.f32);
          float64x2_t v108 = vcvtq_f64_f32(*(float32x2_t *)v105.f32);
          v11.i64[0] = *(void *)&v59[v103];
          float32x4_t v109 = *v101;
          float32x4_t v110 = v101[1];
          v101 += 2;
          float32x4_t v111 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_1004048A0)), v110);
          float32x4_t v112 = vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_100404890)), v109);
          float64x2_t v113 = vcvtq_f64_f32(*(float32x2_t *)v112.f32);
          int8x16_t v11 = (int8x16_t)vcvt_hight_f64_f32(v112);
          a9 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v105), vcvt_hight_f64_f32(v111));
          float64x2_t v114 = vmulq_f64(v108, vcvtq_f64_f32(*(float32x2_t *)v111.f32));
          a10 = (int8x16_t)vmulq_f64(vcvt_hight_f64_f32(v106), (float64x2_t)v11);
          a11 = (float32x4_t)vmulq_f64(v107, v113);
          double v64 = v64
              + *(double *)a11.i64
              + *(double *)&a11.i64[1]
              + *(double *)a10.i64
              + *(double *)&a10.i64[1]
              + v114.f64[0]
              + v114.f64[1]
              + *(double *)a9.i64
              + *(double *)&a9.i64[1];
          v103 += 8;
          v102 += 8;
        }
        while (v102);
        uint64_t v16 = v395;
        unint64_t v19 = v396;
        LODWORD(v20) = v394;
        if (v78 != (v78 & 0x1FFFFFFF8)) {
          goto LABEL_78;
        }
LABEL_57:
        *(double *)a8.i64 = v64 * a4;
        *(float *)a8.i32 = *(double *)a8.i64;
        *(_DWORD *)(v14 + 4 * v61++) = a8.i32[0];
        v60 += v16;
        v59 += v16;
        uint64_t v21 = v397;
      }
      while (v61 != v19);
      v14 += 4 * v382;
      ++v23;
      v32 += v16;
      uint64_t v31 = (_OWORD *)((char *)v31 + v26);
      v30 += v16;
      float64x2_t v13 = v34;
    }
    while (v23 != v19);
  }
  return result;
}

unsigned char *sub_100272034(void *a1, uint64_t a2, uint64_t a3, double a4, float64x2_t a5, double a6, float64x2_t a7, double a8, __n128 a9, float64x2_t a10)
{
  uint64_t v12 = (_OWORD *)a1[2];
  float64x2_t v13 = *(int64x2_t **)(a2 + 16);
  uint64_t v14 = *(unsigned char **)(a3 + 16);
  uint64_t v15 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v17 = (unsigned int *)a1[8];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  if (v14) {
    BOOL v20 = *(_DWORD *)(a3 + 12) < (int)v18;
  }
  else {
    BOOL v20 = 0;
  }
  char v21 = !v20;
  unsigned int v22 = 40 * v19;
  if (!v20) {
    unsigned int v22 = 8 * v19;
  }
  uint64_t result = v310;
  if (v22 >= 0x409) {
    operator new[]();
  }
  uint64_t v24 = *(void *)(a2 + 80) >> 3;
  if ((v21 & 1) == 0)
  {
    int v25 = (float64x2_t *)&v310[8 * (int)v19];
    if ((int)v19 < 1) {
      goto LABEL_36;
    }
    BOOL v26 = v19 >= 6 && v16 == 1;
    if (v26 && (v25 < (float64x2_t *)&v14[8 * v19] ? (BOOL v27 = v14 >= &v310[32 * v19 + 8 * (int)v19]) : (BOOL v27 = 1), v27))
    {
      uint64_t v28 = v19 & 0x7FFFFFFC;
      uint64_t v29 = (__n128 *)(v14 + 16);
      BOOL v30 = (double *)&v310[8 * (int)v19 + 64];
      uint64_t v31 = v19 & 0xFFFFFFFC;
      do
      {
        __n128 v32 = v29[-1];
        __n128 v33 = *v29;
        __n128 v34 = v32;
        __n128 v35 = v32;
        a7 = (float64x2_t)v32;
        a9 = *v29;
        __n128 v36 = *v29;
        __n128 v37 = *v29;
        long long v38 = v30 - 8;
        vst4q_f64(v38, *(float64x2x4_t *)(&a7 - 3));
        vst4q_f64(v30, *(float64x2x4_t *)(&a9 - 1));
        v29 += 2;
        v30 += 16;
        v31 -= 4;
      }
      while (v31);
      if (v28 == v19)
      {
LABEL_36:
        uint64_t v16 = 4 * (v16 != 0);
        uint64_t v14 = &v310[8 * (int)v19];
        if ((int)v18 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v39 = (uint64_t *)&v14[8 * v16 * v28];
    uint64_t v40 = v19 - v28;
    BOOL v41 = (uint64_t *)&v310[32 * v28 + 16 + 8 * (int)v19];
    do
    {
      uint64_t v42 = *v39;
      *BOOL v41 = *v39;
      v41[1] = v42;
      *(v41 - 2) = v42;
      *(v41 - 1) = v42;
      v39 += v16;
      v41 += 4;
      --v40;
    }
    while (v40);
    goto LABEL_36;
  }
  if (!v14)
  {
    if ((int)v18 < 1) {
      return result;
    }
    uint64_t v214 = (int)v18 - 4;
    if ((int)v19 > 0)
    {
      uint64_t v215 = 0;
      uint64_t v216 = v19 & 0xFFFFFFF8;
      BOOL v218 = v19 < 8 || v15 != 1;
      float64x2_t v219 = (char *)v12 + 1;
      for (unint64_t i = v12; ; unint64_t i = (_OWORD *)((char *)i + 1))
      {
        if (v218
          || (v310 < (unsigned char *)v12 + v215 + v19
            ? (BOOL v221 = (char *)v12 + v215 >= &v310[8 * v19])
            : (BOOL v221 = 1),
              !v221))
        {
          uint64_t v236 = 0;
LABEL_151:
          uint64_t v237 = v15 * v236;
          float64x2_t v238 = &v310[8 * v236];
          uint64_t v239 = v19 - v236;
          do
          {
            LOBYTE(a5.f64[0]) = *((unsigned char *)i + v237);
            a5.f64[0] = (double)*(unint64_t *)&a5.f64[0];
            *v238++ = *(void *)&a5.f64[0];
            v237 += v15;
            --v239;
          }
          while (v239);
          goto LABEL_153;
        }
        if (v19 >= 0x10)
        {
          uint64_t v259 = v19 & 0x7FFFFFF0;
          uint64_t v260 = (float64x2_t *)v310;
          uint64_t v261 = (int8x16_t *)i;
          do
          {
            int8x16_t v262 = *v261++;
            unint64_t v263 = vextq_s8(v262, v262, 8uLL).u64[0];
            v264.i32[0] = v263;
            v264.i32[1] = BYTE1(v263);
            int8x8_t v265 = vand_s8(v264, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v265.u32[0];
            v266.i64[1] = v265.u32[1];
            a5 = vcvtq_f64_u64(v266);
            v267.i32[0] = BYTE2(v263);
            v267.i32[1] = BYTE3(v263);
            int8x8_t v268 = vand_s8(v267, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v268.u32[0];
            v266.i64[1] = v268.u32[1];
            v269.i32[0] = BYTE4(v263);
            float64x2_t v270 = vcvtq_f64_u64(v266);
            v269.i32[1] = BYTE5(v263);
            int8x8_t v271 = vand_s8(v269, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v271.u32[0];
            v266.i64[1] = v271.u32[1];
            v272.i32[0] = BYTE6(v263);
            v272.i32[1] = HIBYTE(v263);
            a7 = vcvtq_f64_u64(v266);
            int8x8_t v273 = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v273.u32[0];
            v266.i64[1] = v273.u32[1];
            uint64x2_t v274 = v266;
            v272.i32[0] = v262.u8[0];
            v272.i32[1] = v262.u8[1];
            int8x8_t v275 = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v275.u32[0];
            v266.i64[1] = v275.u32[1];
            a10 = vcvtq_f64_u64(v266);
            v276.i32[0] = v262.u8[2];
            v276.i32[1] = v262.u8[3];
            int8x8_t v277 = vand_s8(v276, (int8x8_t)0xFF000000FFLL);
            v278.i32[0] = v262.u8[4];
            v278.i32[1] = v262.u8[5];
            int8x8_t v279 = vand_s8(v278, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v279.u32[0];
            v266.i64[1] = v279.u32[1];
            float64x2_t v280 = vcvtq_f64_u64(v266);
            v281.i32[0] = v262.u8[6];
            v281.i32[1] = v262.u8[7];
            int8x8_t v282 = vand_s8(v281, (int8x8_t)0xFF000000FFLL);
            v266.i64[0] = v282.u32[0];
            v266.i64[1] = v282.u32[1];
            v260[2] = v280;
            v260[3] = vcvtq_f64_u64(v266);
            v266.i64[0] = v277.u32[0];
            v266.i64[1] = v277.u32[1];
            *uint64_t v260 = a10;
            v260[1] = vcvtq_f64_u64(v266);
            v260[6] = a7;
            v260[7] = vcvtq_f64_u64(v274);
            v260[4] = a5;
            v260[5] = v270;
            v260 += 8;
            v259 -= 16;
          }
          while (v259);
          if ((v19 & 0xFFFFFFF0) == v19) {
            goto LABEL_153;
          }
          uint64_t v222 = v19 & 0x7FFFFFF0;
          uint64_t v236 = v19 & 0xFFFFFFF0;
          if ((v19 & 8) == 0) {
            goto LABEL_151;
          }
        }
        else
        {
          uint64_t v222 = 0;
        }
        float64x2_t v223 = (float64x2_t *)&v310[8 * v222];
        do
        {
          uint64_t v224 = *(void *)((char *)i + v222);
          v225.i32[0] = v224;
          v225.i32[1] = BYTE1(v224);
          int8x8_t v226 = vand_s8(v225, (int8x8_t)0xFF000000FFLL);
          v227.i64[0] = v226.u32[0];
          v227.i64[1] = v226.u32[1];
          float64x2_t v228 = vcvtq_f64_u64(v227);
          v229.i32[0] = BYTE2(v224);
          v229.i32[1] = BYTE3(v224);
          int8x8_t v230 = vand_s8(v229, (int8x8_t)0xFF000000FFLL);
          v227.i64[0] = v230.u32[0];
          v227.i64[1] = v230.u32[1];
          a7 = vcvtq_f64_u64(v227);
          v231.i32[0] = BYTE4(v224);
          v231.i32[1] = BYTE5(v224);
          int8x8_t v232 = vand_s8(v231, (int8x8_t)0xFF000000FFLL);
          v227.i64[0] = v232.u32[0];
          v227.i64[1] = v232.u32[1];
          float64x2_t v233 = vcvtq_f64_u64(v227);
          v234.i32[0] = BYTE6(v224);
          v234.i32[1] = HIBYTE(v224);
          int8x8_t v235 = vand_s8(v234, (int8x8_t)0xFF000000FFLL);
          v227.i64[0] = v235.u32[0];
          v227.i64[1] = v235.u32[1];
          a5 = vcvtq_f64_u64(v227);
          unint64_t v223[2] = v233;
          v223[3] = a5;
          *float64x2_t v223 = v228;
          v223[1] = a7;
          v223 += 4;
          v222 += 8;
        }
        while (v216 != v222);
        uint64_t v236 = v19 & 0x7FFFFFF8;
        if (v216 != v19) {
          goto LABEL_151;
        }
LABEL_153:
        float64x2_t v240 = v219;
        uint64_t v241 = v215;
        if (v215 <= v214)
        {
          do
          {
            double v242 = 0.0;
            float64x2_t v243 = v240;
            uint64_t v244 = v19;
            float64x2_t v245 = (double *)v310;
            double v246 = 0.0;
            double v247 = 0.0;
            double v248 = 0.0;
            do
            {
              double v249 = *v245++;
              LOBYTE(a10.f64[0]) = *(v243 - 1);
              *(double *)&unint64_t v250 = (double)*(unint64_t *)&a10.f64[0];
              double v248 = v248 + v249 * *(double *)&v250;
              LOBYTE(v250) = *v243;
              *(double *)&unint64_t v251 = (double)v250;
              double v247 = v247 + v249 * *(double *)&v251;
              LOBYTE(v251) = v243[1];
              *(double *)&unint64_t v252 = (double)v251;
              double v246 = v246 + v249 * *(double *)&v252;
              LOBYTE(v252) = v243[2];
              a10.f64[0] = (double)v252;
              double v242 = v242 + v249 * a10.f64[0];
              v243 += v15;
              --v244;
            }
            while (v244);
            double v253 = (double *)&v13->i64[v241];
            a7.f64[0] = v247 * a4;
            *double v253 = v248 * a4;
            v253[1] = a7.f64[0];
            a5.f64[0] = v242 * a4;
            v253[2] = v246 * a4;
            v253[3] = a5.f64[0];
            v241 += 4;
            v240 += 4;
          }
          while ((int)v214 >= (int)v241);
          uint64_t v241 = v241;
          if ((int)v241 >= (int)v18) {
            goto LABEL_137;
          }
          do
          {
LABEL_160:
            double v254 = 0.0;
            double v255 = v12;
            uint64_t v256 = v19;
            uint64_t v257 = (double *)v310;
            do
            {
              double v258 = *v257++;
              LOBYTE(a7.f64[0]) = *((unsigned char *)v255 + v241);
              a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
              double v254 = v254 + v258 * a7.f64[0];
              double v255 = (_OWORD *)((char *)v255 + v15);
              --v256;
            }
            while (v256);
            a5.f64[0] = v254 * a4;
            v13->i64[v241++] = *(void *)&a5.f64[0];
          }
          while ((int)v18 > (int)v241);
          goto LABEL_137;
        }
        uint64_t v241 = v215;
        if ((int)v215 < (int)v18) {
          goto LABEL_160;
        }
LABEL_137:
        ++v215;
        float64x2_t v13 = (int64x2_t *)((char *)v13 + 8 * v24);
        ++v219;
        if (v215 == v18) {
          return result;
        }
      }
    }
    uint64_t v283 = 0;
    double v284 = a4 * 0.0;
    int64x2_t v285 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    int v286 = v18 - 3;
    unsigned int v287 = v13 + 4;
    uint64_t v288 = 8 * v24;
    uint64_t v289 = 8 * v24 + 8;
    int v290 = 4;
    for (int j = -1; ; --j)
    {
      if (v290 <= v286) {
        int v292 = v18 - 3;
      }
      else {
        int v292 = v290;
      }
      int v293 = v283 + 4;
      if ((int)v283 + 4 <= v286) {
        int v293 = v18 - 3;
      }
      if (v283 <= v214)
      {
        unsigned int v295 = v293 + ~v283;
        uint64_t v296 = v283;
        if (v295 < 0xC) {
          goto LABEL_182;
        }
        uint64_t v297 = (((v292 + j) >> 2) + 1) & 0x7FFFFFFC;
        uint64_t v298 = (v295 >> 2) + 1;
        uint64_t v296 = v283 + 4 * (v298 & 0x7FFFFFFC);
        int v294 = v283;
        float64x2_t v299 = v287;
        do
        {
          v299[-4] = v285;
          v299[-3] = v285;
          v299[-2] = v285;
          v299[-1] = v285;
          *float64x2_t v299 = v285;
          v299[1] = v285;
          v299[2] = v285;
          v299[3] = v285;
          v299 += 8;
          v294 += 16;
          v297 -= 4;
        }
        while (v297);
        if ((v298 & 0x7FFFFFFC) != v298)
        {
LABEL_182:
          int8x8_t v300 = (double *)&v13->i64[v296];
          int v294 = v296;
          do
          {
            *int8x8_t v300 = v284;
            v300[1] = v284;
            v300[2] = v284;
            v300[3] = v284;
            v294 += 4;
            v300 += 4;
          }
          while ((int)v214 >= v294);
        }
      }
      else
      {
        int v294 = v283;
      }
      if (v294 >= (int)v18) {
        goto LABEL_170;
      }
      uint64_t v301 = v294;
      uint64_t v302 = (v18 + ~v294);
      if (v302 >= 3)
      {
        uint64_t v304 = v302 + 1;
        uint64_t v305 = (v302 + 1) & 0x1FFFFFFFCLL;
        uint64_t v303 = v305 + v301;
        uint64_t v306 = 8 * v301;
        uint64_t v307 = v305;
        do
        {
          int8x8_t v308 = (int64x2_t *)((char *)v13 + v306);
          *int8x8_t v308 = v285;
          v308[1] = v285;
          v306 += 32;
          v307 -= 4;
        }
        while (v307);
        if (v304 == v305) {
          goto LABEL_170;
        }
      }
      else
      {
        uint64_t v303 = v301;
      }
      uint64_t v309 = v303;
      do
      {
        *(double *)&v13->i64[v309++] = v284;
        LODWORD(v303) = v303 + 1;
      }
      while ((int)v18 > (int)v303);
LABEL_170:
      ++v283;
      unsigned int v287 = (int64x2_t *)((char *)v287 + v289);
      ++v290;
      float64x2_t v13 = (int64x2_t *)((char *)v13 + v288);
      if (v283 == v18) {
        return result;
      }
    }
  }
  int v25 = 0;
  if ((int)v18 >= 1)
  {
LABEL_37:
    uint64_t v43 = 0;
    uint64_t v44 = (int)v18 - 4;
    double v45 = a4 * 0.0;
    uint64_t v46 = 8 * v19;
    uint32x4_t v47 = (float64x2_t *)&v310[v46];
    BOOL v49 = v310 < (unsigned char *)v25 + v46 && v25 < v47;
    BOOL v50 = v15 == 1 && v16 == 1;
    uint64_t v51 = v19 & 0xFFFFFFF0;
    uint64_t v52 = v19 & 0xFFFFFFF8;
    int64x2_t v53 = vdupq_lane_s64(*(uint64_t *)&v45, 0);
    char v55 = !v50 || v19 < 8;
    uint64_t v56 = 8 * v16;
    uint64_t v57 = (char *)v12 + 1;
    uint64_t v58 = 8 * v24;
    int v59 = &v14[v46];
    unint64_t v60 = (float64x2_t *)v14;
    uint64_t v61 = v12;
    do
    {
      unint64_t v62 = (unint64_t)v12 + v43;
      unint64_t v63 = (unint64_t)v12 + v43 + v19;
      if (v25)
      {
        if ((int)v19 < 1) {
          goto LABEL_104;
        }
        if ((v55 & 1) != 0
          || ((unint64_t)v310 < v63 ? (BOOL v64 = v62 >= (unint64_t)v47) : (BOOL v64 = 1),
              !v64 ? (char v65 = 1) : (char v65 = v49),
              (v65 & 1) != 0))
        {
          uint64_t v66 = 0;
LABEL_65:
          float v67 = &v310[8 * v66];
          double v68 = (double *)((char *)v25->f64 + v56 * v66);
          uint64_t v69 = v19 - v66;
          uint64_t v70 = v15 * v66;
          do
          {
            LOBYTE(a7.f64[0]) = *((unsigned char *)v61 + v70);
            a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - *v68;
            *v67++ = *(void *)&a7.f64[0];
            double v68 = (double *)((char *)v68 + v56);
            v70 += v15;
            --v69;
          }
          while (v69);
          goto LABEL_104;
        }
        if (v19 >= 0x10)
        {
          uint64_t v95 = v19 & 0x7FFFFFF0;
          float32x4_t v96 = (float64x2_t *)v310;
          float64x2_t v97 = (int8x16_t *)v61;
          float64x2_t v98 = v25;
          do
          {
            int8x16_t v99 = *v97++;
            unint64_t v100 = vextq_s8(v99, v99, 8uLL).u64[0];
            v101.i32[0] = BYTE6(v100);
            v101.i32[1] = HIBYTE(v100);
            int8x8_t v102 = vand_s8(v101, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v102.u32[0];
            v103.i64[1] = v102.u32[1];
            float64x2_t v104 = vcvtq_f64_u64(v103);
            v105.i32[0] = BYTE4(v100);
            v105.i32[1] = BYTE5(v100);
            int8x8_t v106 = vand_s8(v105, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v106.u32[0];
            v103.i64[1] = v106.u32[1];
            float64x2_t v107 = vcvtq_f64_u64(v103);
            v108.i32[0] = BYTE2(v100);
            v108.i32[1] = BYTE3(v100);
            int8x8_t v109 = vand_s8(v108, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v109.u32[0];
            v103.i64[1] = v109.u32[1];
            float64x2_t v110 = vcvtq_f64_u64(v103);
            v111.i32[0] = v100;
            v111.i32[1] = BYTE1(v100);
            int8x8_t v112 = vand_s8(v111, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v112.u32[0];
            v103.i64[1] = v112.u32[1];
            float64x2_t v113 = vcvtq_f64_u64(v103);
            v111.i32[0] = v99.u8[6];
            v111.i32[1] = v99.u8[7];
            int8x8_t v114 = vand_s8(v111, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v114.u32[0];
            v103.i64[1] = v114.u32[1];
            float64x2_t v115 = vcvtq_f64_u64(v103);
            v116.i32[0] = v99.u8[4];
            v116.i32[1] = v99.u8[5];
            int8x8_t v117 = vand_s8(v116, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v117.u32[0];
            v103.i64[1] = v117.u32[1];
            float64x2_t v118 = vcvtq_f64_u64(v103);
            v119.i32[0] = v99.u8[2];
            v119.i32[1] = v99.u8[3];
            int8x8_t v120 = vand_s8(v119, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v120.u32[0];
            v103.i64[1] = v120.u32[1];
            float64x2_t v121 = vcvtq_f64_u64(v103);
            v122.i32[0] = v99.u8[0];
            v122.i32[1] = v99.u8[1];
            int8x8_t v123 = vand_s8(v122, (int8x8_t)0xFF000000FFLL);
            v103.i64[0] = v123.u32[0];
            v103.i64[1] = v123.u32[1];
            float64x2_t v124 = vsubq_f64(v113, v98[4]);
            float64x2_t v125 = vsubq_f64(v110, v98[5]);
            a9 = (__n128)vsubq_f64(v107, v98[6]);
            a7 = vsubq_f64(v104, v98[7]);
            float64x2_t v126 = vsubq_f64(vcvtq_f64_u64(v103), *v98);
            float64x2_t v127 = vsubq_f64(v121, v98[1]);
            float64x2_t v10 = vsubq_f64(v115, v98[3]);
            v96[2] = vsubq_f64(v118, v98[2]);
            v96[3] = v10;
            *float32x4_t v96 = v126;
            v96[1] = v127;
            v96[6] = (float64x2_t)a9;
            v96[7] = a7;
            v96[4] = v124;
            v96[5] = v125;
            v98 += 8;
            v96 += 8;
            v95 -= 16;
          }
          while (v95);
          if (v51 == v19) {
            goto LABEL_104;
          }
          uint64_t v76 = v19 & 0x7FFFFFF0;
          uint64_t v66 = v19 & 0xFFFFFFF0;
          if ((v19 & 8) == 0) {
            goto LABEL_65;
          }
        }
        else
        {
          uint64_t v76 = 0;
        }
        uint32x4_t v77 = (float64x2_t *)((char *)v25 + 8 * v76);
        uint64_t v78 = (__n128 *)&v310[8 * v76];
        do
        {
          uint64_t v79 = *(void *)((char *)v61 + v76);
          v80.i32[0] = BYTE6(v79);
          v80.i32[1] = HIBYTE(v79);
          int8x8_t v81 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
          v82.i64[0] = v81.u32[0];
          v82.i64[1] = v81.u32[1];
          v83.i32[0] = BYTE4(v79);
          float64x2_t v84 = vcvtq_f64_u64(v82);
          v83.i32[1] = BYTE5(v79);
          int8x8_t v85 = vand_s8(v83, (int8x8_t)0xFF000000FFLL);
          v82.i64[0] = v85.u32[0];
          v82.i64[1] = v85.u32[1];
          v86.i32[0] = BYTE2(v79);
          v86.i32[1] = BYTE3(v79);
          float64x2_t v87 = vcvtq_f64_u64(v82);
          int8x8_t v88 = vand_s8(v86, (int8x8_t)0xFF000000FFLL);
          v82.i64[0] = v88.u32[0];
          v82.i64[1] = v88.u32[1];
          float64x2_t v89 = vcvtq_f64_u64(v82);
          v90.i32[0] = v79;
          v90.i32[1] = BYTE1(v79);
          int8x8_t v91 = vand_s8(v90, (int8x8_t)0xFF000000FFLL);
          v82.i64[0] = v91.u32[0];
          v82.i64[1] = v91.u32[1];
          float64x2_t v10 = v77[2];
          float64x2_t v92 = v77[3];
          float64x2_t v94 = *v77;
          float64x2_t v93 = v77[1];
          v77 += 4;
          a7 = vsubq_f64(vcvtq_f64_u64(v82), v94);
          a9 = (__n128)vsubq_f64(v87, v10);
          _DWORD v78[2] = a9;
          v78[3] = (__n128)vsubq_f64(v84, v92);
          *uint64_t v78 = (__n128)a7;
          v78[1] = (__n128)vsubq_f64(v89, v93);
          v78 += 4;
          v76 += 8;
        }
        while (v52 != v76);
        uint64_t v66 = v19 & 0x7FFFFFF8;
        if (v52 != v19) {
          goto LABEL_65;
        }
      }
      else
      {
        if ((int)v19 < 1) {
          goto LABEL_104;
        }
        uint64_t v71 = 0;
        if ((v55 & 1) != 0
          || (v310 < &v59[8 * v43] ? (BOOL v72 = &v14[8 * v43] >= (unsigned char *)v47) : (BOOL v72 = 1),
              v72 ? (char v73 = 0) : (char v73 = 1),
              v62 < (unint64_t)v47 ? (BOOL v74 = (unint64_t)v310 >= v63) : (BOOL v74 = 1),
              !v74 || (v73 & 1) != 0))
        {
LABEL_102:
          unsigned int v176 = &v310[8 * v71];
          uint64_t v177 = v56 * v71;
          uint64_t v178 = v19 - v71;
          uint64_t v179 = v15 * v71;
          do
          {
            LOBYTE(a7.f64[0]) = *((unsigned char *)v61 + v179);
            a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - *(double *)((char *)v60->f64 + v177);
            *v176++ = *(void *)&a7.f64[0];
            v177 += v56;
            v179 += v15;
            --v178;
          }
          while (v178);
          goto LABEL_104;
        }
        if (v19 >= 0x10)
        {
          unint64_t v128 = 0;
          unint64_t v129 = (float64x2_t *)v310;
          unint64_t v130 = v60;
          do
          {
            int8x16_t v131 = (int8x16_t)v61[v128 / 0x10];
            v132.i32[0] = v131.u8[6];
            v132.i32[1] = v131.u8[7];
            int8x8_t v133 = vand_s8(v132, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v133.u32[0];
            v134.i64[1] = v133.u32[1];
            float64x2_t v135 = vcvtq_f64_u64(v134);
            v136.i32[0] = v131.u8[4];
            v136.i32[1] = v131.u8[5];
            int8x8_t v137 = vand_s8(v136, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v137.u32[0];
            v134.i64[1] = v137.u32[1];
            float64x2_t v138 = vcvtq_f64_u64(v134);
            v139.i32[0] = v131.u8[2];
            v139.i32[1] = v131.u8[3];
            int8x8_t v140 = vand_s8(v139, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v140.u32[0];
            v134.i64[1] = v140.u32[1];
            float64x2_t v141 = vcvtq_f64_u64(v134);
            v142.i32[0] = v131.u8[0];
            v142.i32[1] = v131.u8[1];
            int8x8_t v143 = vand_s8(v142, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v143.u32[0];
            v134.i64[1] = v143.u32[1];
            float64x2_t v144 = vcvtq_f64_u64(v134);
            v131.i64[0] = vextq_s8(v131, v131, 8uLL).u64[0];
            v145.i32[0] = v131.u8[6];
            v145.i32[1] = v131.u8[7];
            int8x8_t v146 = vand_s8(v145, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v146.u32[0];
            v134.i64[1] = v146.u32[1];
            v147.i32[0] = v131.u8[4];
            float64x2_t v148 = vcvtq_f64_u64(v134);
            v147.i32[1] = v131.u8[5];
            int8x8_t v149 = vand_s8(v147, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v149.u32[0];
            v134.i64[1] = v149.u32[1];
            v150.i32[0] = v131.u8[2];
            v150.i32[1] = v131.u8[3];
            float64x2_t v151 = vcvtq_f64_u64(v134);
            int8x8_t v152 = vand_s8(v150, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v152.u32[0];
            v134.i64[1] = v152.u32[1];
            float64x2_t v153 = vcvtq_f64_u64(v134);
            v154.i32[0] = v131.u8[0];
            v154.i32[1] = v131.u8[1];
            *(int8x8_t *)v131.i8 = vand_s8(v154, (int8x8_t)0xFF000000FFLL);
            v134.i64[0] = v131.u32[0];
            v134.i64[1] = v131.u32[1];
            float64x2_t v155 = vsubq_f64(vcvtq_f64_u64(v134), v130[4]);
            float64x2_t v156 = vsubq_f64(v153, v130[5]);
            float64x2_t v157 = vsubq_f64(v151, v130[6]);
            float64x2_t v10 = vsubq_f64(v148, v130[7]);
            float64x2_t v158 = vsubq_f64(v144, *v130);
            a9 = (__n128)vsubq_f64(v141, v130[1]);
            a7 = vsubq_f64(v135, v130[3]);
            v129[2] = vsubq_f64(v138, v130[2]);
            v129[3] = a7;
            *unint64_t v129 = v158;
            v129[1] = (float64x2_t)a9;
            v129[6] = v157;
            v129[7] = v10;
            v129[4] = v155;
            v129[5] = v156;
            v128 += 16;
            v130 += 8;
            v129 += 8;
          }
          while (v51 != v128);
          if (v51 == v19) {
            goto LABEL_104;
          }
          uint64_t v75 = v19 & 0x7FFFFFF0;
          uint64_t v71 = v19 & 0xFFFFFFF0;
          if ((v19 & 8) == 0) {
            goto LABEL_102;
          }
        }
        else
        {
          uint64_t v75 = 0;
        }
        uint64_t v159 = 8 * v75;
        do
        {
          uint64_t v160 = *(void *)((char *)v61 + v75);
          v161.i32[0] = BYTE6(v160);
          v161.i32[1] = HIBYTE(v160);
          int8x8_t v162 = vand_s8(v161, (int8x8_t)0xFF000000FFLL);
          v163.i64[0] = v162.u32[0];
          v163.i64[1] = v162.u32[1];
          float64x2_t v164 = vcvtq_f64_u64(v163);
          v165.i32[0] = BYTE4(v160);
          v165.i32[1] = BYTE5(v160);
          int8x8_t v166 = vand_s8(v165, (int8x8_t)0xFF000000FFLL);
          v163.i64[0] = v166.u32[0];
          v163.i64[1] = v166.u32[1];
          float64x2_t v167 = vcvtq_f64_u64(v163);
          v168.i32[0] = BYTE2(v160);
          v168.i32[1] = BYTE3(v160);
          int8x8_t v169 = vand_s8(v168, (int8x8_t)0xFF000000FFLL);
          v163.i64[0] = v169.u32[0];
          v163.i64[1] = v169.u32[1];
          float64x2_t v170 = vcvtq_f64_u64(v163);
          v171.i32[0] = v160;
          v171.i32[1] = BYTE1(v160);
          int8x8_t v172 = vand_s8(v171, (int8x8_t)0xFF000000FFLL);
          v163.i64[0] = v172.u32[0];
          v163.i64[1] = v172.u32[1];
          float64x2_t v10 = *(float64x2_t *)((char *)v60 + v159 + 32);
          a7 = vsubq_f64(vcvtq_f64_u64(v163), *(float64x2_t *)((char *)v60 + v159));
          float64x2_t v173 = vsubq_f64(v170, *(float64x2_t *)((char *)v60 + v159 + 16));
          a9 = (__n128)vsubq_f64(v167, v10);
          float64x2_t v174 = vsubq_f64(v164, *(float64x2_t *)((char *)v60 + v159 + 48));
          unsigned int v175 = (__n128 *)&v310[v159];
          v175[2] = a9;
          v175[3] = (__n128)v174;
          *unsigned int v175 = (__n128)a7;
          v175[1] = (__n128)v173;
          v75 += 8;
          v159 += 64;
        }
        while (v52 != v75);
        uint64_t v71 = v19 & 0x7FFFFFF8;
        if (v52 != v19) {
          goto LABEL_102;
        }
      }
LABEL_104:
      LODWORD(v180) = v43;
      unsigned int v181 = v57;
      uint64_t v182 = v43;
      if (v43 <= v44)
      {
        do
        {
          a7.f64[0] = a4 * 0.0;
          double v191 = a4 * 0.0;
          a9.n128_f64[0] = a4 * 0.0;
          double v192 = a4 * 0.0;
          if ((int)v19 >= 1)
          {
            uint64x2_t v193 = (float64x2_t *)&v14[8 * v182];
            if (v25) {
              uint64x2_t v193 = v25;
            }
            f64 = v193[1].f64;
            double v195 = 0.0;
            int8x8_t v196 = v181;
            uint64_t v197 = v19;
            int8x8_t v198 = (double *)v310;
            double v199 = 0.0;
            double v200 = 0.0;
            double v201 = 0.0;
            do
            {
              double v202 = *v198++;
              LOBYTE(v10.f64[0]) = *(v196 - 1);
              *(double *)&unint64_t v203 = (double)*(unint64_t *)&v10.f64[0] - *(f64 - 2);
              double v201 = v201 + v202 * *(double *)&v203;
              LOBYTE(v203) = *v196;
              *(double *)&unint64_t v204 = (double)v203 - *(f64 - 1);
              double v200 = v200 + v202 * *(double *)&v204;
              LOBYTE(v204) = v196[1];
              *(double *)&unint64_t v205 = (double)v204 - *f64;
              double v199 = v199 + v202 * *(double *)&v205;
              LOBYTE(v205) = v196[2];
              v10.f64[0] = (double)v205 - f64[1];
              double v195 = v195 + v202 * v10.f64[0];
              v196 += v15;
              f64 = (double *)((char *)f64 + v56);
              --v197;
            }
            while (v197);
            double v192 = v201 * a4;
            a9.n128_f64[0] = v200 * a4;
            double v191 = v199 * a4;
            a7.f64[0] = v195 * a4;
          }
          int8x8_t v190 = &v13->i64[v182];
          *(double *)int8x8_t v190 = v192;
          v190[1] = a9.n128_u64[0];
          *((double *)v190 + 2) = v191;
          v190[3] = *(void *)&a7.f64[0];
          uint64_t v180 = v182 + 4;
          v181 += 4;
          uint64_t v182 = v180;
        }
        while ((int)v44 >= (int)v180);
      }
      if ((int)v180 >= (int)v18) {
        goto LABEL_53;
      }
      uint64_t v183 = v180;
      if ((int)v19 >= 1)
      {
        do
        {
          uint64x2_t v184 = (double *)&v14[8 * v183];
          if (v25) {
            uint64x2_t v184 = (double *)v25;
          }
          double v185 = 0.0;
          int8x8_t v186 = v12;
          uint64_t v187 = v19;
          float64x2_t v188 = (double *)v310;
          do
          {
            double v189 = *v188++;
            a9.n128_u8[0] = *((unsigned char *)v186 + v183);
            a9.n128_f64[0] = (double)a9.n128_u64[0] - *v184;
            double v185 = v185 + v189 * a9.n128_f64[0];
            uint64x2_t v184 = (double *)((char *)v184 + v56);
            int8x8_t v186 = (_OWORD *)((char *)v186 + v15);
            --v187;
          }
          while (v187);
          a7.f64[0] = v185 * a4;
          v13->i64[v183++] = *(void *)&a7.f64[0];
        }
        while ((int)v18 > (int)v183);
        goto LABEL_53;
      }
      uint64_t v206 = (v18 + ~v180);
      if (v206 >= 3)
      {
        uint64_t v208 = v206 + 1;
        uint64_t v209 = (v206 + 1) & 0x1FFFFFFFCLL;
        uint64_t v207 = v209 + v183;
        uint64_t v210 = 8 * v183;
        uint64_t v211 = v209;
        do
        {
          int8x8_t v212 = (int64x2_t *)((char *)v13 + v210);
          *int8x8_t v212 = v53;
          v212[1] = v53;
          v210 += 32;
          v211 -= 4;
        }
        while (v211);
        if (v208 == v209) {
          goto LABEL_53;
        }
      }
      else
      {
        uint64_t v207 = v180;
      }
      uint64_t v213 = v207;
      do
      {
        *(double *)&v13->i64[v213++] = v45;
        LODWORD(v207) = v207 + 1;
      }
      while ((int)v18 > (int)v207);
LABEL_53:
      ++v43;
      float64x2_t v13 = (int64x2_t *)((char *)v13 + v58);
      uint64_t v61 = (_OWORD *)((char *)v61 + 1);
      unint64_t v60 = (float64x2_t *)((char *)v60 + 8);
      ++v57;
    }
    while (v43 != v18);
  }
  return result;
}

void sub_100272E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10 != v10)
  {
    if (a10) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100272EA8(unsigned char *result, uint64_t a2, uint64_t a3, double a4, __n128 a5, float64x2_t a6, float64x2_t a7, double a8, double a9, float64x2_t a10)
{
  int8x16_t v11 = (const char *)*((void *)result + 2);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *((void *)result + 10);
  uint64_t v472 = *(void *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v16 = (unsigned int *)*((void *)result + 8);
  unint64_t v17 = *v16;
  uint64_t v18 = (int)v16[1];
  uint64_t v484 = *((void *)result + 10);
  uint64_t v485 = v16[1];
  unint64_t v482 = v17;
  unsigned int v483 = v16[1];
  if (!v13)
  {
    if ((int)v17 < 1) {
      return result;
    }
    if ((int)v18 < 4)
    {
      if ((int)v485 <= 0)
      {
        uint64_t v449 = 0;
        unint64_t v450 = 0;
        double v451 = a4 * 0.0;
        int64x2_t v452 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
        v453 = (unsigned char *)(v12 + 16);
        unint64_t v454 = 1;
        do
        {
          if (v454 <= v17) {
            unint64_t v455 = v17;
          }
          else {
            unint64_t v455 = v454;
          }
          unint64_t v456 = v450 + 1;
          if (v450 + 1 > v17) {
            unint64_t v457 = v450 + 1;
          }
          else {
            unint64_t v457 = v17;
          }
          unint64_t v458 = v457 - v450;
          if (v458 < 4) {
            goto LABEL_145;
          }
          unint64_t v459 = (v455 + v449) & 0xFFFFFFFFFFFFFFFCLL;
          v450 += v458 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t result = v453;
          do
          {
            *((int64x2_t *)result - 1) = v452;
            *(int64x2_t *)uint64_t result = v452;
            result += 32;
            v459 -= 4;
          }
          while (v459);
          if (v458 != (v458 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_145:
            do
              *(double *)(v12 + 8 * v450++) = v451;
            while (v450 < v17);
          }
          ++v454;
          --v449;
          v453 += 8 * v472 + 8;
          v12 += 8 * v472;
          unint64_t v450 = v456;
        }
        while (v456 != v17);
      }
      else
      {
        uint64_t v208 = 0;
        uint64_t v209 = (unsigned __int8 *)(v11 + 2);
        do
        {
          uint64_t v210 = 0;
          uint64_t v211 = (unsigned __int8 *)&v11[v14 * v208];
          int8x8_t v212 = v209;
          do
          {
            a5.n128_u8[0] = *v211;
            LOBYTE(a6.f64[0]) = *(v212 - 2);
            a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
            a5.n128_f64[0] = (double)a5.n128_u64[0] * a6.f64[0] + 0.0;
            if (v485 != 1)
            {
              LOBYTE(a6.f64[0]) = v211[1];
              a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
              LOBYTE(a7.f64[0]) = *(v212 - 1);
              a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
              a5.n128_f64[0] = a5.n128_f64[0] + a6.f64[0] * a7.f64[0];
              if (v18 != 2)
              {
                LOBYTE(a6.f64[0]) = v211[2];
                a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
                LOBYTE(a7.f64[0]) = *v212;
                a7.f64[0] = (double)*(unint64_t *)&a7.f64[0];
                a5.n128_f64[0] = a5.n128_f64[0] + a6.f64[0] * a7.f64[0];
              }
            }
            a5.n128_f64[0] = a5.n128_f64[0] * a4;
            *(void *)(v12 + 8 * v210) = a5.n128_u64[0];
            v212 += v14;
            ++v210;
          }
          while (v208 + v210 < v17);
          ++v208;
          v209 += v14;
          v12 += 8 * v472 + 8;
        }
        while (v208 != v17);
      }
      return result;
    }
    unint64_t v213 = (v485 - 4);
    uint64_t v214 = (v213 & 0xFFFFFFFC) + 4;
    if (v213 < 0x1C)
    {
      if (v214 >= v485)
      {
        for (unint64_t i = 0; i != v17; ++i)
        {
          v461 = v11;
          unint64_t v462 = i;
          do
          {
            unint64_t v463 = 0;
            double v464 = 0.0;
            do
            {
              a5.n128_u8[0] = v11[v463];
              LOBYTE(a6.f64[0]) = v461[v463];
              LOBYTE(a7.f64[0]) = v11[v463 + 1];
              *(double *)&unint64_t v465 = (double)*(unint64_t *)&a6.f64[0];
              LOBYTE(a8) = v461[v463 + 1];
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&unint64_t v466 = (double)*(unint64_t *)&a7.f64[0] * a8;
              double v467 = *(double *)&v466 + (double)a5.n128_u64[0] * *(double *)&v465;
              LOBYTE(v465) = v11[v463 + 2];
              *(double *)&unint64_t v468 = (double)v465;
              LOBYTE(v466) = v461[v463 + 2];
              *(double *)&unint64_t v469 = (double)v466;
              double v470 = v467 + *(double *)&v468 * *(double *)&v469;
              LOBYTE(v468) = v11[v463 + 3];
              a6.f64[0] = (double)v468;
              LOBYTE(v469) = v461[v463 + 3];
              a7.f64[0] = (double)v469;
              a5.n128_f64[0] = v470 + a6.f64[0] * a7.f64[0];
              double v464 = v464 + a5.n128_f64[0];
              v463 += 4;
            }
            while (v463 <= v213);
            *(double *)(v12 + 8 * v462++) = v464 * a4;
            v461 += v14;
          }
          while (v462 < v17);
          v12 += 8 * v472;
          v11 += v14;
        }
      }
      else
      {
        for (unint64_t j = 0; j != v17; ++j)
        {
          uint64_t v216 = v11;
          unint64_t v217 = j;
          do
          {
            unint64_t v218 = 0;
            double v219 = 0.0;
            do
            {
              a5.n128_u8[0] = v11[v218];
              LOBYTE(a6.f64[0]) = v216[v218];
              LOBYTE(a7.f64[0]) = v11[v218 + 1];
              *(double *)&unint64_t v220 = (double)*(unint64_t *)&a6.f64[0];
              LOBYTE(a8) = v216[v218 + 1];
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&unint64_t v221 = (double)*(unint64_t *)&a7.f64[0] * a8;
              double v222 = *(double *)&v221 + (double)a5.n128_u64[0] * *(double *)&v220;
              LOBYTE(v220) = v11[v218 + 2];
              *(double *)&unint64_t v223 = (double)v220;
              LOBYTE(v221) = v216[v218 + 2];
              *(double *)&unint64_t v224 = (double)v221;
              double v225 = v222 + *(double *)&v223 * *(double *)&v224;
              LOBYTE(v223) = v11[v218 + 3];
              a6.f64[0] = (double)v223;
              LOBYTE(v224) = v216[v218 + 3];
              a7.f64[0] = (double)v224;
              a5.n128_f64[0] = v225 + a6.f64[0] * a7.f64[0];
              double v219 = v219 + a5.n128_f64[0];
              v218 += 4;
            }
            while (v218 <= v213);
            uint64_t v226 = 0;
            do
            {
              a5.n128_u8[0] = v11[v214 + v226];
              LOBYTE(a6.f64[0]) = v216[v214 + v226];
              a5.n128_f64[0] = (double)a5.n128_u64[0];
              a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
              double v219 = v219 + a5.n128_f64[0] * a6.f64[0];
              ++v226;
            }
            while ((int)v18 > (int)v214 + (int)v226);
            *(double *)(v12 + 8 * v217++) = v219 * a4;
            v216 += v14;
          }
          while (v217 < v17);
          v12 += 8 * v472;
          v11 += v14;
        }
      }
      return result;
    }
    unint64_t v227 = 0;
    uint64_t v228 = (v213 >> 2) + 1;
    uint64_t v229 = v228 & 0x7FFFFFF0;
    uint64_t v479 = v228 & 0x7FFFFFF8;
    uint64_t v475 = (v213 & 0xFFFFFFFC) + 4;
    uint64_t v473 = v229;
    uint64_t v474 = v228;
LABEL_105:
    int8x8_t v230 = &v11[v214];
    int8x8_t v231 = v11;
    unint64_t v471 = v227;
    unint64_t v232 = v227;
    v477 = v11;
    uint64_t v478 = v12;
    v476 = &v11[v214];
    while (v213 >= 0x3C)
    {
      v480 = v231;
      double v234 = 0.0;
      int8x8_t v235 = v231;
      do
      {
        double v516 = v234;
        uint64_t v514 = v229;
        int8x16x4_t v525 = vld4q_s8(v11);
        uint64_t v236 = v11 + 64;
        v512 = v236;
        int8x16x4_t v526 = vld4q_s8(v235);
        v235 += 64;
        unint64_t v237 = vextq_s8(v525.val[0], v525.val[0], 8uLL).u64[0];
        unint64_t v238 = vextq_s8(v526.val[0], v526.val[0], 8uLL).u64[0];
        unint64_t v239 = vextq_s8(v525.val[1], v525.val[1], 8uLL).u64[0];
        __int32 v511 = v525.val[1].u8[7];
        __int32 v510 = v525.val[1].u8[5];
        __int32 v509 = v525.val[1].u8[3];
        __int32 v508 = v525.val[1].u8[1];
        unsigned int v507 = v525.val[2].u8[6];
        v240.i32[0] = BYTE2(v237);
        unsigned int v500 = v526.val[0].u8[0];
        unsigned int v506 = v525.val[2].u8[7];
        unsigned int v505 = v525.val[2].u8[4];
        v241.i32[0] = BYTE4(v237);
        unsigned int v499 = v526.val[0].u8[2];
        unsigned int v504 = v525.val[2].u8[5];
        unsigned int v503 = v525.val[2].u8[2];
        v242.i32[0] = BYTE6(v237);
        unsigned int v502 = v525.val[2].u8[3];
        unsigned int v501 = v525.val[2].u8[1];
        unsigned int v497 = v525.val[3].u8[0];
        unsigned int v498 = v525.val[2].u8[0];
        v243.i32[0] = BYTE2(v238);
        v244.i32[0] = v525.val[1].u8[6];
        unsigned int v495 = v525.val[3].u8[2];
        unsigned int v496 = v525.val[3].u8[1];
        v245.i32[0] = BYTE4(v238);
        unint64_t v246 = vextq_s8(v526.val[1], v526.val[1], 8uLL).u64[0];
        unsigned int v493 = v525.val[3].u8[4];
        unsigned int v494 = v525.val[3].u8[3];
        v247.i32[0] = BYTE6(v238);
        unint64_t v248 = vextq_s8(v525.val[2], v525.val[2], 8uLL).u64[0];
        unsigned int v492 = v525.val[3].u8[5];
        v249.i32[0] = BYTE6(v239);
        unsigned int v488 = v525.val[3].u8[7];
        unsigned int v489 = v525.val[3].u8[6];
        unint64_t v487 = vextq_s8(v525.val[3], v525.val[3], 8uLL).u64[0];
        v525.val[3].i32[0] = BYTE4(v239);
        unint64_t v250 = vextq_s8(v526.val[2], v526.val[2], 8uLL).u64[0];
        unsigned int v251 = v526.val[0].u8[1];
        v252.i32[0] = BYTE2(v239);
        unsigned int v253 = v526.val[0].u8[3];
        int v254 = v526.val[1].u8[7];
        __int32 v255 = v526.val[1].u8[5];
        unsigned int v256 = v526.val[1].u8[2];
        unsigned int v257 = v526.val[1].u8[3];
        unsigned int v258 = v526.val[1].u8[0];
        uint64_t result = (unsigned char *)v526.val[1].u8[1];
        unsigned int v259 = v526.val[2].u8[6];
        unsigned int v260 = v526.val[2].u8[7];
        unsigned int v261 = v526.val[2].u8[4];
        unsigned int v262 = v526.val[2].u8[5];
        LODWORD(v236) = v526.val[2].u8[2];
        unsigned int v263 = v526.val[2].u8[3];
        unsigned int v264 = v526.val[2].u8[0];
        unsigned int v265 = v526.val[2].u8[1];
        unsigned int v491 = v526.val[3].u8[0];
        unsigned int v490 = v526.val[3].u8[1];
        unsigned int v486 = v526.val[3].u8[2];
        unsigned int v266 = v526.val[3].u8[3];
        unsigned int v267 = v526.val[3].u8[4];
        unsigned int v268 = v526.val[3].u8[5];
        unsigned int v269 = v526.val[3].u8[6];
        unsigned int v270 = v526.val[3].u8[7];
        unint64_t v271 = vextq_s8(v526.val[3], v526.val[3], 8uLL).u64[0];
        v526.val[1].i32[0] = v525.val[1].u8[4];
        v272.i32[0] = v525.val[1].u8[2];
        v525.val[2].i32[0] = BYTE6(v246);
        v249.i32[1] = HIBYTE(v239);
        v525.val[2].i32[1] = HIBYTE(v246);
        *(int8x8_t *)v526.val[2].i8 = vand_s8(v249, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v526.val[2].u32[0];
        v273.i64[1] = v526.val[2].u32[1];
        *(int8x8_t *)v525.val[2].i8 = vand_s8(*(int8x8_t *)v525.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v526.val[2] = (int8x16_t)vcvtq_f64_u64(v273);
        v273.i64[0] = v525.val[2].u32[0];
        v273.i64[1] = v525.val[2].u32[1];
        float64x2_t v274 = vmulq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273));
        v526.val[2].i32[0] = v239;
        v242.i32[1] = HIBYTE(v237);
        v247.i32[1] = HIBYTE(v238);
        int8x8_t v275 = vand_s8(v242, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v275.u32[0];
        v273.i64[1] = v275.u32[1];
        int8x8_t v276 = vand_s8(v247, (int8x8_t)0xFF000000FFLL);
        float64x2_t v277 = vcvtq_f64_u64(v273);
        v273.i64[0] = v276.u32[0];
        v273.i64[1] = v276.u32[1];
        float64x2_t v278 = vmlaq_f64(v274, vcvtq_f64_u64(v273), v277);
        v279.i32[0] = v525.val[1].u8[0];
        v241.i32[1] = BYTE5(v237);
        v245.i32[1] = BYTE5(v238);
        v525.val[3].i32[1] = BYTE5(v239);
        LODWORD(v277.f64[0]) = BYTE4(v246);
        HIDWORD(v277.f64[0]) = BYTE5(v246);
        *(int8x8_t *)v525.val[3].i8 = vand_s8(*(int8x8_t *)v525.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[3].u32[0];
        v273.i64[1] = v525.val[3].u32[1];
        v525.val[3] = (int8x16_t)vcvtq_f64_u64(v273);
        *(int8x8_t *)&v277.f64[0] = vand_s8(*(int8x8_t *)&v277.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v277.f64[0]);
        v273.i64[1] = HIDWORD(v277.f64[0]);
        float64x2_t v280 = vmulq_f64((float64x2_t)v525.val[3], vcvtq_f64_u64(v273));
        LODWORD(v277.f64[0]) = v526.val[1].u8[6];
        int8x8_t v281 = vand_s8(v241, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v281.u32[0];
        v273.i64[1] = v281.u32[1];
        uint64x2_t v282 = v273;
        int8x8_t v283 = vand_s8(v245, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v283.u32[0];
        v273.i64[1] = v283.u32[1];
        float64x2_t v284 = vmlaq_f64(v280, vcvtq_f64_u64(v273), vcvtq_f64_u64(v282));
        v282.i32[0] = v526.val[1].u8[4];
        v283.i32[0] = BYTE2(v246);
        v526.val[0].i32[0] = v246;
        v526.val[3].i32[0] = v237;
        v526.val[3].i32[1] = BYTE1(v237);
        v285.i32[0] = v525.val[0].u8[0];
        v285.i32[1] = v525.val[0].u8[1];
        v286.i32[0] = v525.val[0].u8[2];
        v286.i32[1] = v525.val[0].u8[3];
        v240.i32[1] = BYTE3(v237);
        v525.val[2].i32[0] = v525.val[0].u8[4];
        v525.val[2].i32[1] = v525.val[0].u8[5];
        v525.val[0].i32[0] = v525.val[0].u8[6];
        v525.val[0].i32[1] = v525.val[0].u8[7];
        v525.val[3].i32[0] = v238;
        v525.val[3].i32[1] = BYTE1(v238);
        v525.val[1].i32[0] = v526.val[0].u8[4];
        v243.i32[1] = BYTE3(v238);
        v525.val[1].i32[1] = v526.val[0].u8[5];
        v287.i32[0] = v526.val[0].u8[6];
        v287.i32[1] = v526.val[0].u8[7];
        v252.i32[1] = BYTE3(v239);
        v244.i32[1] = v511;
        v526.val[1].i32[1] = v510;
        v526.val[2].i32[1] = BYTE1(v239);
        v272.i32[1] = v509;
        v279.i32[1] = v508;
        v283.i32[1] = BYTE3(v246);
        HIDWORD(v277.f64[0]) = v254;
        v282.i32[1] = v255;
        v526.val[0].i32[1] = BYTE1(v246);
        int8x8_t v288 = vand_s8(v252, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v288.u32[0];
        v273.i64[1] = v288.u32[1];
        float64x2_t v289 = vcvtq_f64_u64(v273);
        int8x8_t v290 = vand_s8(v283, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v290.u32[0];
        v273.i64[1] = v290.u32[1];
        float64x2_t v291 = vmulq_f64(v289, vcvtq_f64_u64(v273));
        int8x8_t v292 = vand_s8(v240, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v292.u32[0];
        v273.i64[1] = v292.u32[1];
        float64x2_t v293 = vcvtq_f64_u64(v273);
        int8x8_t v294 = vand_s8(v243, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v294.u32[0];
        v273.i64[1] = v294.u32[1];
        float64x2_t v295 = vmlaq_f64(v291, vcvtq_f64_u64(v273), v293);
        *(int8x8_t *)&v293.f64[0] = vand_s8(v244, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v293.f64[0]);
        v273.i64[1] = HIDWORD(v293.f64[0]);
        float64x2_t v296 = vcvtq_f64_u64(v273);
        int8x8_t v297 = vand_s8(*(int8x8_t *)&v277.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v297.u32[0];
        v273.i64[1] = v297.u32[1];
        float64x2_t v298 = vmulq_f64(v296, vcvtq_f64_u64(v273));
        int8x8_t v299 = vand_s8(*(int8x8_t *)v525.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v299.u32[0];
        v273.i64[1] = v299.u32[1];
        uint64x2_t v300 = v273;
        int8x8_t v301 = vand_s8(v287, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v301.u32[0];
        v273.i64[1] = v301.u32[1];
        float64x2_t v302 = vmlaq_f64(v298, vcvtq_f64_u64(v273), vcvtq_f64_u64(v300));
        *(int8x8_t *)v526.val[1].i8 = vand_s8(*(int8x8_t *)v526.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v526.val[1].u32[0];
        v273.i64[1] = v526.val[1].u32[1];
        *(int8x8_t *)v282.i8 = vand_s8(*(int8x8_t *)v282.i8, (int8x8_t)0xFF000000FFLL);
        v526.val[1] = (int8x16_t)vcvtq_f64_u64(v273);
        v273.i64[0] = v282.u32[0];
        v273.i64[1] = v282.u32[1];
        v526.val[1] = (int8x16_t)vmulq_f64((float64x2_t)v526.val[1], vcvtq_f64_u64(v273));
        *(int8x8_t *)v282.i8 = vand_s8(*(int8x8_t *)v525.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v282.u32[0];
        v273.i64[1] = v282.u32[1];
        float64x2_t v303 = vcvtq_f64_u64(v273);
        int8x8_t v304 = vand_s8(*(int8x8_t *)v525.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v304.u32[0];
        v273.i64[1] = v304.u32[1];
        v526.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[1], vcvtq_f64_u64(v273), v303);
        *(int8x8_t *)v526.val[2].i8 = vand_s8(*(int8x8_t *)v526.val[2].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v526.val[2].u32[0];
        v273.i64[1] = v526.val[2].u32[1];
        v526.val[2] = (int8x16_t)vcvtq_f64_u64(v273);
        int8x8_t v305 = vand_s8(*(int8x8_t *)v526.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v305.u32[0];
        v273.i64[1] = v305.u32[1];
        v526.val[2] = (int8x16_t)vmulq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273));
        int8x8_t v306 = vand_s8(*(int8x8_t *)v526.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v306.u32[0];
        v273.i64[1] = v306.u32[1];
        float64x2_t v307 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v303.f64[0] = vand_s8(*(int8x8_t *)v525.val[3].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        v526.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273), v307);
        *(int8x8_t *)&v307.f64[0] = vand_s8(v272, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v307.f64[0]);
        v273.i64[1] = HIDWORD(v307.f64[0]);
        float64x2_t v308 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v526.val[3].i8 = vand_s8((int8x8_t)__PAIR64__(v257, v256), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v526.val[3].u32[0];
        v273.i64[1] = v526.val[3].u32[1];
        v526.val[3] = (int8x16_t)vmulq_f64(v308, vcvtq_f64_u64(v273));
        *(int8x8_t *)&v308.f64[0] = vand_s8(v286, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v308.f64[0]);
        v273.i64[1] = HIDWORD(v308.f64[0]);
        uint64x2_t v309 = v273;
        *(int8x8_t *)&v303.f64[0] = vand_s8((int8x8_t)__PAIR64__(v253, v499), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        v526.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[3], vcvtq_f64_u64(v273), vcvtq_f64_u64(v309));
        *(int8x8_t *)v309.i8 = vand_s8(v279, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v309.u32[0];
        v273.i64[1] = v309.u32[1];
        int8x8_t v310 = vand_s8((int8x8_t)__PAIR64__(result, v258), (int8x8_t)0xFF000000FFLL);
        float64x2_t v311 = vcvtq_f64_u64(v273);
        v273.i64[0] = v310.u32[0];
        v273.i64[1] = v310.u32[1];
        float64x2_t v312 = vmulq_f64(v311, vcvtq_f64_u64(v273));
        *(int8x8_t *)&v311.f64[0] = vand_s8(v285, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v311.f64[0]);
        v273.i64[1] = HIDWORD(v311.f64[0]);
        float64x2_t v313 = vcvtq_f64_u64(v273);
        int8x8_t v314 = vand_s8((int8x8_t)__PAIR64__(v251, v500), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v314.u32[0];
        v273.i64[1] = v314.u32[1];
        float64x2_t v315 = vmlaq_f64(v312, vcvtq_f64_u64(v273), v313);
        int8x8_t v316 = vand_s8((int8x8_t)__PAIR64__(v501, v498), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v316.u32[0];
        v273.i64[1] = v316.u32[1];
        float64x2_t v317 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v313.f64[0] = vand_s8((int8x8_t)__PAIR64__(v265, v264), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v313.f64[0]);
        v273.i64[1] = HIDWORD(v313.f64[0]);
        float64x2_t v318 = vmlaq_f64(v315, vcvtq_f64_u64(v273), v317);
        *(int8x8_t *)&v313.f64[0] = vand_s8((int8x8_t)__PAIR64__(v502, v503), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v313.f64[0]);
        v273.i64[1] = HIDWORD(v313.f64[0]);
        float64x2_t v319 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v317.f64[0] = vand_s8((int8x8_t)__PAIR64__(v263, v236), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        v526.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[3], vcvtq_f64_u64(v273), v319);
        LODWORD(v319.f64[0]) = v248;
        HIDWORD(v319.f64[0]) = BYTE1(v248);
        LODWORD(v317.f64[0]) = v250;
        HIDWORD(v317.f64[0]) = BYTE1(v250);
        *(int8x8_t *)&v319.f64[0] = vand_s8(*(int8x8_t *)&v319.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v319.f64[0]);
        v273.i64[1] = HIDWORD(v319.f64[0]);
        float64x2_t v320 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v317.f64[0] = vand_s8(*(int8x8_t *)&v317.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        v526.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273), v320);
        *(int8x8_t *)&v320.f64[0] = vand_s8((int8x8_t)__PAIR64__(v504, v505), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v320.f64[0]);
        v273.i64[1] = HIDWORD(v320.f64[0]);
        float64x2_t v321 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v317.f64[0] = vand_s8((int8x8_t)__PAIR64__(v262, v261), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        v526.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[1], vcvtq_f64_u64(v273), v321);
        LODWORD(v321.f64[0]) = BYTE2(v248);
        HIDWORD(v321.f64[0]) = BYTE3(v248);
        LODWORD(v317.f64[0]) = BYTE2(v250);
        HIDWORD(v317.f64[0]) = BYTE3(v250);
        *(int8x8_t *)&v321.f64[0] = vand_s8(*(int8x8_t *)&v321.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v321.f64[0]);
        v273.i64[1] = HIDWORD(v321.f64[0]);
        float64x2_t v322 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v317.f64[0] = vand_s8(*(int8x8_t *)&v317.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        float64x2_t v323 = vmlaq_f64(v295, vcvtq_f64_u64(v273), v322);
        LODWORD(v322.f64[0]) = BYTE4(v248);
        HIDWORD(v322.f64[0]) = BYTE5(v248);
        *(int8x8_t *)&v322.f64[0] = vand_s8(*(int8x8_t *)&v322.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v322.f64[0]);
        v273.i64[1] = HIDWORD(v322.f64[0]);
        LODWORD(v303.f64[0]) = BYTE4(v250);
        HIDWORD(v303.f64[0]) = BYTE5(v250);
        float64x2_t v324 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v303.f64[0] = vand_s8(*(int8x8_t *)&v303.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        float64x2_t v325 = vmlaq_f64(v284, vcvtq_f64_u64(v273), v324);
        LODWORD(v324.f64[0]) = BYTE6(v248);
        LODWORD(v303.f64[0]) = BYTE6(v250);
        HIDWORD(v324.f64[0]) = HIBYTE(v248);
        HIDWORD(v303.f64[0]) = HIBYTE(v250);
        *(int8x8_t *)&v324.f64[0] = vand_s8(*(int8x8_t *)&v324.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v324.f64[0]);
        v273.i64[1] = HIDWORD(v324.f64[0]);
        float64x2_t v326 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v303.f64[0] = vand_s8(*(int8x8_t *)&v303.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        float64x2_t v327 = vmlaq_f64(v278, vcvtq_f64_u64(v273), v326);
        LODWORD(v326.f64[0]) = BYTE4(v487);
        LODWORD(v303.f64[0]) = BYTE6(v487);
        *(int8x8_t *)&v317.f64[0] = vand_s8((int8x8_t)__PAIR64__(v506, v507), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v317.f64[0]);
        v273.i64[1] = HIDWORD(v317.f64[0]);
        float64x2_t v328 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v525.val[1].i8 = vand_s8((int8x8_t)__PAIR64__(v260, v259), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[1].u32[0];
        v273.i64[1] = v525.val[1].u32[1];
        float64x2_t v329 = vmlaq_f64(v302, vcvtq_f64_u64(v273), v328);
        HIDWORD(v303.f64[0]) = HIBYTE(v487);
        *(int8x8_t *)v525.val[1].i8 = vand_s8(*(int8x8_t *)&v303.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[1].u32[0];
        v273.i64[1] = v525.val[1].u32[1];
        LODWORD(v303.f64[0]) = BYTE6(v271);
        HIDWORD(v303.f64[0]) = HIBYTE(v271);
        v525.val[1] = (int8x16_t)vcvtq_f64_u64(v273);
        *(int8x8_t *)&v303.f64[0] = vand_s8(*(int8x8_t *)&v303.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v303.f64[0]);
        v273.i64[1] = HIDWORD(v303.f64[0]);
        float64x2_t v330 = vmlaq_f64(v327, vcvtq_f64_u64(v273), (float64x2_t)v525.val[1]);
        v525.val[1].i32[0] = BYTE4(v271);
        HIDWORD(v326.f64[0]) = BYTE5(v487);
        v525.val[1].i32[1] = BYTE5(v271);
        *(int8x8_t *)&v326.f64[0] = vand_s8(*(int8x8_t *)&v326.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v326.f64[0]);
        v273.i64[1] = HIDWORD(v326.f64[0]);
        float64x2_t v331 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v525.val[1].i8 = vand_s8(*(int8x8_t *)v525.val[1].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[1].u32[0];
        v273.i64[1] = v525.val[1].u32[1];
        float64x2_t v332 = vmlaq_f64(v325, vcvtq_f64_u64(v273), v331);
        *(int8x8_t *)&v331.f64[0] = vand_s8((int8x8_t)__PAIR64__(v488, v489), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v331.f64[0]);
        v273.i64[1] = HIDWORD(v331.f64[0]);
        uint64x2_t v333 = v273;
        *(int8x8_t *)&v328.f64[0] = vand_s8((int8x8_t)__PAIR64__(v270, v269), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v328.f64[0]);
        v273.i64[1] = HIDWORD(v328.f64[0]);
        float64x2_t v334 = vmlaq_f64(v329, vcvtq_f64_u64(v273), vcvtq_f64_u64(v333));
        *(int8x8_t *)v333.i8 = vand_s8((int8x8_t)__PAIR64__(v492, v493), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v333.u32[0];
        v273.i64[1] = v333.u32[1];
        float64x2_t v335 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v328.f64[0] = vand_s8((int8x8_t)__PAIR64__(v268, v267), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v328.f64[0]);
        v273.i64[1] = HIDWORD(v328.f64[0]);
        v526.val[1] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[1], vcvtq_f64_u64(v273), v335);
        LODWORD(v335.f64[0]) = BYTE2(v487);
        HIDWORD(v335.f64[0]) = BYTE3(v487);
        *(int8x8_t *)&v335.f64[0] = vand_s8(*(int8x8_t *)&v335.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v335.f64[0]);
        v273.i64[1] = HIDWORD(v335.f64[0]);
        LODWORD(v328.f64[0]) = BYTE2(v271);
        float64x2_t v336 = vcvtq_f64_u64(v273);
        HIDWORD(v328.f64[0]) = BYTE3(v271);
        *(int8x8_t *)&v328.f64[0] = vand_s8(*(int8x8_t *)&v328.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v328.f64[0]);
        v273.i64[1] = HIDWORD(v328.f64[0]);
        float64x2_t v337 = vmlaq_f64(v323, vcvtq_f64_u64(v273), v336);
        LODWORD(v328.f64[0]) = v487;
        HIDWORD(v328.f64[0]) = BYTE1(v487);
        v525.val[0].i32[0] = v271;
        v525.val[0].i32[1] = BYTE1(v271);
        int8x16_t v11 = v512;
        *(int8x8_t *)&v328.f64[0] = vand_s8(*(int8x8_t *)&v328.f64[0], (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v328.f64[0]);
        v273.i64[1] = HIDWORD(v328.f64[0]);
        float64x2_t v338 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v525.val[0].i8 = vand_s8(*(int8x8_t *)v525.val[0].i8, (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[0].u32[0];
        v273.i64[1] = v525.val[0].u32[1];
        v526.val[2] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[2], vcvtq_f64_u64(v273), v338);
        *(int8x8_t *)&v338.f64[0] = vand_s8((int8x8_t)__PAIR64__(v494, v495), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v338.f64[0]);
        v273.i64[1] = HIDWORD(v338.f64[0]);
        float64x2_t v339 = vcvtq_f64_u64(v273);
        *(int8x8_t *)v525.val[0].i8 = vand_s8((int8x8_t)__PAIR64__(v266, v486), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = v525.val[0].u32[0];
        v273.i64[1] = v525.val[0].u32[1];
        v526.val[3] = (int8x16_t)vmlaq_f64((float64x2_t)v526.val[3], vcvtq_f64_u64(v273), v339);
        *(int8x8_t *)&v336.f64[0] = vand_s8((int8x8_t)__PAIR64__(v496, v497), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v336.f64[0]);
        v273.i64[1] = HIDWORD(v336.f64[0]);
        float64x2_t v340 = vcvtq_f64_u64(v273);
        *(int8x8_t *)&v339.f64[0] = vand_s8((int8x8_t)__PAIR64__(v490, v491), (int8x8_t)0xFF000000FFLL);
        v273.i64[0] = LODWORD(v339.f64[0]);
        v273.i64[1] = HIDWORD(v339.f64[0]);
        float64x2_t v341 = vmlaq_f64(v318, vcvtq_f64_u64(v273), v340);
        v340.f64[0] = v516
                    + v341.f64[0]
                    + v341.f64[1]
                    + *(double *)v526.val[3].i64
                    + *(double *)&v526.val[3].i64[1]
                    + *(double *)v526.val[1].i64
                    + *(double *)&v526.val[1].i64[1]
                    + v334.f64[0]
                    + v334.f64[1]
                    + *(double *)v526.val[2].i64
                    + *(double *)&v526.val[2].i64[1]
                    + v337.f64[0]
                    + v337.f64[1];
        double v342 = v330.f64[1];
        double v343 = v332.f64[1];
        double v344 = v340.f64[0] + v332.f64[0] + v332.f64[1] + v330.f64[0];
        double v234 = v344 + v330.f64[1];
        uint64_t v229 = v514 - 16;
      }
      while (v514 != 16);
      uint64_t v229 = v473;
      uint64_t v228 = v474;
      if (v474 != v473)
      {
        uint64_t v233 = v473;
        uint64_t v348 = v473;
        int8x16_t v11 = v477;
        uint64_t v12 = v478;
        unint64_t v345 = v482;
        LODWORD(v18) = v483;
        double v346 = a4;
        uint64_t v14 = v484;
        int v347 = v485;
        uint64_t v214 = v475;
        unint64_t v213 = (v485 - 4);
        int8x8_t v230 = v476;
        int8x8_t v231 = v480;
        if ((v474 & 8) != 0)
        {
LABEL_114:
          uint64_t v349 = 4 * v233;
          uint64_t v350 = v233 - v479;
          do
          {
            double v517 = v234;
            unint64_t v351 = &v11[v349];
            unint64_t v352 = &v231[v349];
            int8x8x4_t v524 = vld4_s8(v351);
            int8x8x4_t v523 = vld4_s8(v352);
            v353.i32[0] = v524.val[0].u8[0];
            v354.i32[0] = v524.val[0].u8[2];
            v355.i32[0] = v524.val[0].u8[4];
            v356.i32[0] = v524.val[0].u8[6];
            v357.i32[0] = v523.val[0].u8[0];
            v358.i32[0] = v523.val[0].u8[2];
            v359.i32[0] = v523.val[0].u8[4];
            v360.i32[0] = v523.val[0].u8[6];
            v361.i32[0] = v524.val[1].u8[6];
            v362.i32[0] = v524.val[1].u8[4];
            v353.i32[1] = v524.val[0].u8[1];
            v363.i32[0] = v524.val[1].u8[2];
            v364.i32[0] = v524.val[1].u8[0];
            v354.i32[1] = v524.val[0].u8[3];
            v355.i32[1] = v524.val[0].u8[5];
            v356.i32[1] = v524.val[0].u8[7];
            v365.i32[0] = v523.val[1].u8[6];
            v366.i32[0] = v523.val[1].u8[4];
            v357.i32[1] = v523.val[0].u8[1];
            v358.i32[1] = v523.val[0].u8[3];
            v367.i32[0] = v523.val[1].u8[2];
            v368.i32[0] = v523.val[1].u8[0];
            v364.i32[1] = v524.val[1].u8[1];
            v368.i32[1] = v523.val[1].u8[1];
            v359.i32[1] = v523.val[0].u8[5];
            v360.i32[1] = v523.val[0].u8[7];
            v369.i32[0] = v524.val[2].u8[6];
            v370.i32[0] = v524.val[2].u8[4];
            v361.i32[1] = v524.val[1].u8[7];
            v362.i32[1] = v524.val[1].u8[5];
            v363.i32[1] = v524.val[1].u8[3];
            v371.i32[0] = v524.val[2].u8[2];
            v372.i32[0] = v524.val[2].u8[0];
            v365.i32[1] = v523.val[1].u8[7];
            v366.i32[1] = v523.val[1].u8[5];
            v373.i32[0] = v523.val[2].u8[6];
            v374.i32[0] = v523.val[2].u8[4];
            v367.i32[1] = v523.val[1].u8[3];
            v369.i32[1] = v524.val[2].u8[7];
            v370.i32[1] = v524.val[2].u8[5];
            uint64_t result = (unsigned char *)v524.val[3].u8[1];
            v371.i32[1] = v524.val[2].u8[3];
            unsigned int v375 = v524.val[3].u8[2];
            unsigned int v376 = v524.val[3].u8[3];
            v372.i32[1] = v524.val[2].u8[1];
            LODWORD(v352) = v524.val[3].u8[4];
            unsigned int v377 = v524.val[3].u8[5];
            v373.i32[1] = v523.val[2].u8[7];
            unsigned int v378 = v524.val[3].u8[6];
            unsigned int v379 = v524.val[3].u8[7];
            v374.i32[1] = v523.val[2].u8[5];
            v524.val[1].i32[0] = v523.val[2].u8[2];
            v524.val[2].i32[0] = v523.val[2].u8[0];
            v524.val[1].i32[1] = v523.val[2].u8[3];
            v524.val[2].i32[1] = v523.val[2].u8[1];
            v524.val[3].i32[0] = v524.val[3].u8[0];
            v524.val[3].i32[1] = (int)result;
            v524.val[0] = vand_s8(v364, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v524.val[0].u32[0];
            v380.i64[1] = v524.val[0].u32[1];
            *(float64x2_t *)v524.val[0].i8 = vcvtq_f64_u64(v380);
            int8x8_t v381 = vand_s8(v368, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v381.u32[0];
            v380.i64[1] = v381.u32[1];
            float64x2_t v382 = vcvtq_f64_u64(v380);
            int8x8_t v383 = vand_s8(v353, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v383.u32[0];
            v380.i64[1] = v383.u32[1];
            uint64x2_t v384 = v380;
            int8x8_t v385 = vand_s8(v354, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v385.u32[0];
            v380.i64[1] = v385.u32[1];
            float64x2_t v386 = vcvtq_f64_u64(v380);
            int8x8_t v387 = vand_s8(v355, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v387.u32[0];
            v380.i64[1] = v387.u32[1];
            uint64x2_t v388 = v380;
            int8x8_t v389 = vand_s8(v356, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v389.u32[0];
            v380.i64[1] = v389.u32[1];
            float64x2_t v390 = vcvtq_f64_u64(v380);
            int8x8_t v391 = vand_s8(v357, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v391.u32[0];
            v380.i64[1] = v391.u32[1];
            uint64x2_t v392 = v380;
            int8x8_t v393 = vand_s8(v358, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v393.u32[0];
            v380.i64[1] = v393.u32[1];
            float64x2_t v394 = vcvtq_f64_u64(v380);
            int8x8_t v395 = vand_s8(v359, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v395.u32[0];
            v380.i64[1] = v395.u32[1];
            uint64x2_t v396 = v380;
            int8x8_t v397 = vand_s8(v360, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v397.u32[0];
            v380.i64[1] = v397.u32[1];
            float64x2_t v398 = vcvtq_f64_u64(v380);
            int8x8_t v399 = vand_s8(v361, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v399.u32[0];
            v380.i64[1] = v399.u32[1];
            uint64x2_t v400 = v380;
            int8x8_t v401 = vand_s8(v362, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v401.u32[0];
            v380.i64[1] = v401.u32[1];
            float64x2_t v402 = vcvtq_f64_u64(v380);
            int8x8_t v403 = vand_s8(v363, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v403.u32[0];
            v380.i64[1] = v403.u32[1];
            uint64x2_t v404 = v380;
            int8x8_t v405 = vand_s8(v365, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v405.u32[0];
            v380.i64[1] = v405.u32[1];
            float64x2_t v406 = vcvtq_f64_u64(v380);
            int8x8_t v407 = vand_s8(v366, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v407.u32[0];
            v380.i64[1] = v407.u32[1];
            uint64x2_t v408 = v380;
            int8x8_t v409 = vand_s8(v367, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v409.u32[0];
            v380.i64[1] = v409.u32[1];
            float64x2_t v410 = vcvtq_f64_u64(v380);
            int8x8_t v411 = vand_s8(v369, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v411.u32[0];
            v380.i64[1] = v411.u32[1];
            uint64x2_t v412 = v380;
            int8x8_t v413 = vand_s8(v370, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v413.u32[0];
            v380.i64[1] = v413.u32[1];
            float64x2_t v414 = vcvtq_f64_u64(v380);
            int8x8_t v415 = vand_s8(v371, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v415.u32[0];
            v380.i64[1] = v415.u32[1];
            uint64x2_t v416 = v380;
            int8x8_t v417 = vand_s8(v372, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v417.u32[0];
            v380.i64[1] = v417.u32[1];
            float64x2_t v418 = vcvtq_f64_u64(v380);
            int8x8_t v419 = vand_s8(v373, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v419.u32[0];
            v380.i64[1] = v419.u32[1];
            uint64x2_t v420 = v380;
            int8x8_t v421 = vand_s8(v374, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v421.u32[0];
            v380.i64[1] = v421.u32[1];
            float64x2_t v422 = vcvtq_f64_u64(v380);
            v524.val[1] = vand_s8(v524.val[1], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v524.val[1].u32[0];
            v380.i64[1] = v524.val[1].u32[1];
            *(uint64x2_t *)v524.val[1].i8 = v380;
            v524.val[2] = vand_s8(v524.val[2], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v524.val[2].u32[0];
            v380.i64[1] = v524.val[2].u32[1];
            *(float64x2_t *)v524.val[2].i8 = vcvtq_f64_u64(v380);
            v524.val[3] = vand_s8(v524.val[3], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v524.val[3].u32[0];
            v380.i64[1] = v524.val[3].u32[1];
            *(float64x2_t *)v524.val[3].i8 = vcvtq_f64_u64(v380);
            int8x8_t v423 = vand_s8((int8x8_t)__PAIR64__(v376, v375), (int8x8_t)0xFF000000FFLL);
            float64x2_t v424 = vmulq_f64(vcvtq_f64_u64(v404), v410);
            v380.i64[0] = v423.u32[0];
            v380.i64[1] = v423.u32[1];
            float64x2_t v425 = vcvtq_f64_u64(v380);
            int8x8_t v426 = vand_s8((int8x8_t)__PAIR64__(v377, v352), (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v426.u32[0];
            v380.i64[1] = v426.u32[1];
            float64x2_t v427 = vcvtq_f64_u64(v380);
            float64x2_t v428 = vmulq_f64(v402, vcvtq_f64_u64(v408));
            *(int8x8_t *)v408.i8 = vand_s8((int8x8_t)__PAIR64__(v379, v378), (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v408.u32[0];
            v380.i64[1] = v408.u32[1];
            float64x2_t v429 = vcvtq_f64_u64(v380);
            float64x2_t v430 = vmulq_f64(vcvtq_f64_u64(v400), v406);
            LODWORD(v406.f64[0]) = v523.val[3].u8[0];
            *(float64x2_t *)v524.val[0].i8 = vmlaq_f64(vmulq_f64(*(float64x2_t *)v524.val[0].i8, v382), vcvtq_f64_u64(v392), vcvtq_f64_u64(v384));
            HIDWORD(v406.f64[0]) = v523.val[3].u8[1];
            *(int8x8_t *)v392.i8 = vand_s8(*(int8x8_t *)&v406.f64[0], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v392.u32[0];
            v380.i64[1] = v392.u32[1];
            float64x2_t v431 = vcvtq_f64_u64(v380);
            *(float64x2_t *)v524.val[0].i8 = vmlaq_f64(*(float64x2_t *)v524.val[0].i8, *(float64x2_t *)v524.val[2].i8, v418);
            v524.val[2].i32[0] = v523.val[3].u8[2];
            float64x2_t v432 = vmlaq_f64(v430, v398, v390);
            v524.val[2].i32[1] = v523.val[3].u8[3];
            *(int8x8_t *)&v390.f64[0] = vand_s8(v524.val[2], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = LODWORD(v390.f64[0]);
            v380.i64[1] = HIDWORD(v390.f64[0]);
            float64x2_t v433 = vcvtq_f64_u64(v380);
            float64x2_t v434 = vmlaq_f64(v428, vcvtq_f64_u64(v396), vcvtq_f64_u64(v388));
            v388.i32[0] = v523.val[3].u8[4];
            v388.i32[1] = v523.val[3].u8[5];
            *(int8x8_t *)v388.i8 = vand_s8(*(int8x8_t *)v388.i8, (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v388.u32[0];
            v380.i64[1] = v388.u32[1];
            float64x2_t v435 = vcvtq_f64_u64(v380);
            float64x2_t v436 = vmlaq_f64(vmlaq_f64(v424, v394, v386), vcvtq_f64_u64(*(uint64x2_t *)v524.val[1].i8), vcvtq_f64_u64(v416));
            v524.val[1].i32[0] = v523.val[3].u8[6];
            v524.val[1].i32[1] = v523.val[3].u8[7];
            v523.val[0] = vand_s8(v524.val[1], (int8x8_t)0xFF000000FFLL);
            v380.i64[0] = v523.val[0].u32[0];
            v380.i64[1] = v523.val[0].u32[1];
            float64x2_t v437 = vmlaq_f64(vmlaq_f64(v432, vcvtq_f64_u64(v420), vcvtq_f64_u64(v412)), vcvtq_f64_u64(v380), v429);
            double v342 = v437.f64[1];
            float64x2_t v438 = vmlaq_f64(vmlaq_f64(v434, v422, v414), v435, v427);
            float64x2_t v439 = vmlaq_f64(v436, v433, v425);
            *(float64x2_t *)v524.val[0].i8 = vmlaq_f64(*(float64x2_t *)v524.val[0].i8, v431, *(float64x2_t *)v524.val[3].i8);
            v334.f64[0] = v517 + *(double *)v524.val;
            double v343 = v438.f64[1];
            double v344 = v517
                 + *(double *)v524.val
                 + v440
                 + v439.f64[0]
                 + v439.f64[1]
                 + v438.f64[0]
                 + v438.f64[1]
                 + v437.f64[0];
            double v234 = v344 + v437.f64[1];
            v349 += 32;
            v350 += 8;
          }
          while (v350);
          uint64_t v348 = v479;
          unint64_t v345 = v482;
          double v346 = a4;
          int v347 = v485;
          if (v228 == v479) {
            goto LABEL_119;
          }
        }
        unint64_t v441 = 4 * v348;
        do
        {
          LOBYTE(v344) = v11[v441];
          LOBYTE(v342) = v231[v441];
          LOBYTE(v343) = v11[v441 + 1];
          *(double *)&unint64_t v442 = (double)*(unint64_t *)&v342;
          LOBYTE(v334.f64[0]) = v231[v441 + 1];
          v334.f64[0] = (double)*(unint64_t *)&v334.f64[0];
          *(double *)&unint64_t v443 = (double)*(unint64_t *)&v343 * v334.f64[0];
          double v444 = *(double *)&v443 + (double)*(unint64_t *)&v344 * *(double *)&v442;
          LOBYTE(v442) = v11[v441 + 2];
          *(double *)&unint64_t v445 = (double)v442;
          LOBYTE(v443) = v231[v441 + 2];
          *(double *)&unint64_t v446 = (double)v443;
          double v447 = v444 + *(double *)&v445 * *(double *)&v446;
          LOBYTE(v445) = v11[v441 + 3];
          double v342 = (double)v445;
          LOBYTE(v446) = v231[v441 + 3];
          double v343 = (double)v446;
          double v344 = v447 + v342 * v343;
          double v234 = v234 + v344;
          v441 += 4;
        }
        while (v441 <= v213);
        goto LABEL_119;
      }
      int8x16_t v11 = v477;
      uint64_t v12 = v478;
      unint64_t v345 = v482;
      LODWORD(v18) = v483;
      double v346 = a4;
      uint64_t v14 = v484;
      int v347 = v485;
      uint64_t v214 = v475;
      unint64_t v213 = (v485 - 4);
      int8x8_t v230 = v476;
      int8x8_t v231 = v480;
LABEL_119:
      if (v214 < v18)
      {
        uint64_t v448 = 0;
        do
        {
          LOBYTE(v344) = v230[v448];
          LOBYTE(v342) = v231[v214 + v448];
          double v344 = (double)*(unint64_t *)&v344;
          double v342 = (double)*(unint64_t *)&v342;
          double v234 = v234 + v344 * v342;
          ++v448;
        }
        while (v347 > (int)v214 + (int)v448);
      }
      *(double *)(v12 + 8 * v232++) = v234 * v346;
      v231 += v14;
      if (v232 >= v345)
      {
        unint64_t v227 = v471 + 1;
        v12 += 8 * v472;
        v11 += v14;
        if (v471 + 1 == v345) {
          return result;
        }
        goto LABEL_105;
      }
    }
    uint64_t v233 = 0;
    double v234 = 0.0;
    goto LABEL_114;
  }
  int v19 = *(_DWORD *)(a3 + 12);
  uint64_t result = v518;
  if ((unint64_t)(8 * v18) >= 0x409) {
    operator new[]();
  }
  if ((int)v17 >= 1)
  {
    uint64_t v20 = 0;
    v513 = &v518[8 * v485];
    uint64_t v515 = 8 * v15;
    uint64_t v21 = v485 & 0xFFFFFFF0;
    uint64_t v22 = v485 & 0xFFFFFFF8;
    uint64_t v23 = 32 * (v19 == v18);
    uint64_t v24 = v11 + 3;
    uint64_t v25 = v485;
    unint64_t v26 = v482;
    BOOL v27 = *(float64x2_t **)(a3 + 16);
    uint64_t v28 = v11;
    do
    {
      uint64_t v29 = &v11[v14 * v20];
      BOOL v30 = v11;
      uint64_t v31 = &v11[v25 + v14 * v20];
      if (v19 >= (int)v25)
      {
        if ((int)v25 >= 1)
        {
          if (v25 >= 8)
          {
            uint64_t v34 = 0;
            BOOL v38 = (unint64_t)v518 < v13 + 8 * v485 + v515 * v20 && v13 + v515 * v20 < (unint64_t)v513;
            if (v29 >= v513 || v518 >= v31)
            {
              uint64_t v40 = v485 & 0xFFFFFFF0;
              if (!v38)
              {
                if (v25 >= 0x10)
                {
                  uint64x2_t v82 = (float64x2_t *)v518;
                  int8x8_t v83 = v27;
                  float64x2_t v84 = (int8x16_t *)v28;
                  do
                  {
                    int8x16_t v85 = *v84++;
                    unint64_t v86 = vextq_s8(v85, v85, 8uLL).u64[0];
                    v87.i32[0] = BYTE6(v86);
                    v87.i32[1] = HIBYTE(v86);
                    int8x8_t v88 = vand_s8(v87, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v88.u32[0];
                    v89.i64[1] = v88.u32[1];
                    float64x2_t v90 = vcvtq_f64_u64(v89);
                    v91.i32[0] = BYTE4(v86);
                    v91.i32[1] = BYTE5(v86);
                    int8x8_t v92 = vand_s8(v91, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v92.u32[0];
                    v89.i64[1] = v92.u32[1];
                    float64x2_t v93 = vcvtq_f64_u64(v89);
                    v94.i32[0] = BYTE2(v86);
                    v94.i32[1] = BYTE3(v86);
                    int8x8_t v95 = vand_s8(v94, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v95.u32[0];
                    v89.i64[1] = v95.u32[1];
                    float64x2_t v96 = vcvtq_f64_u64(v89);
                    v97.i32[0] = v86;
                    v97.i32[1] = BYTE1(v86);
                    int8x8_t v98 = vand_s8(v97, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v98.u32[0];
                    v89.i64[1] = v98.u32[1];
                    float64x2_t v99 = vcvtq_f64_u64(v89);
                    v97.i32[0] = v85.u8[6];
                    v97.i32[1] = v85.u8[7];
                    int8x8_t v100 = vand_s8(v97, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v100.u32[0];
                    v89.i64[1] = v100.u32[1];
                    float64x2_t v101 = vcvtq_f64_u64(v89);
                    v102.i32[0] = v85.u8[4];
                    v102.i32[1] = v85.u8[5];
                    int8x8_t v103 = vand_s8(v102, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v103.u32[0];
                    v89.i64[1] = v103.u32[1];
                    float64x2_t v104 = vcvtq_f64_u64(v89);
                    v105.i32[0] = v85.u8[2];
                    v105.i32[1] = v85.u8[3];
                    int8x8_t v106 = vand_s8(v105, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v106.u32[0];
                    v89.i64[1] = v106.u32[1];
                    float64x2_t v107 = vcvtq_f64_u64(v89);
                    v108.i32[0] = v85.u8[0];
                    v108.i32[1] = v85.u8[1];
                    int8x8_t v109 = vand_s8(v108, (int8x8_t)0xFF000000FFLL);
                    v89.i64[0] = v109.u32[0];
                    v89.i64[1] = v109.u32[1];
                    float64x2_t v110 = vsubq_f64(v99, v83[4]);
                    float64x2_t v111 = vsubq_f64(v96, v83[5]);
                    a7 = vsubq_f64(v93, v83[6]);
                    a5 = (__n128)vsubq_f64(v90, v83[7]);
                    a6 = vsubq_f64(vcvtq_f64_u64(v89), *v83);
                    float64x2_t v112 = vsubq_f64(v107, v83[1]);
                    a10 = vsubq_f64(v101, v83[3]);
                    v82[2] = vsubq_f64(v104, v83[2]);
                    v82[3] = a10;
                    float64x2_t *v82 = a6;
                    v82[1] = v112;
                    v82[6] = a7;
                    v82[7] = (float64x2_t)a5;
                    v82[4] = v110;
                    v82[5] = v111;
                    v83 += 8;
                    v82 += 8;
                    v40 -= 16;
                  }
                  while (v40);
                  uint64_t v34 = v485 & 0xFFFFFFF0;
                  if (v34 == v25) {
                    goto LABEL_55;
                  }
                  uint64_t v41 = v485 & 0xFFFFFFF0;
                  if ((v25 & 8) == 0) {
                    goto LABEL_54;
                  }
                }
                else
                {
                  uint64_t v41 = 0;
                }
                uint64_t v113 = 8 * v41;
                do
                {
                  uint64_t v114 = *(void *)&v28[v41];
                  v115.i32[0] = BYTE6(v114);
                  v115.i32[1] = HIBYTE(v114);
                  int8x8_t v116 = vand_s8(v115, (int8x8_t)0xFF000000FFLL);
                  v117.i64[0] = v116.u32[0];
                  v117.i64[1] = v116.u32[1];
                  float64x2_t v118 = vcvtq_f64_u64(v117);
                  v119.i32[0] = BYTE4(v114);
                  v119.i32[1] = BYTE5(v114);
                  int8x8_t v120 = vand_s8(v119, (int8x8_t)0xFF000000FFLL);
                  v117.i64[0] = v120.u32[0];
                  v117.i64[1] = v120.u32[1];
                  float64x2_t v121 = vcvtq_f64_u64(v117);
                  v122.i32[0] = BYTE2(v114);
                  v122.i32[1] = BYTE3(v114);
                  int8x8_t v123 = vand_s8(v122, (int8x8_t)0xFF000000FFLL);
                  v117.i64[0] = v123.u32[0];
                  v117.i64[1] = v123.u32[1];
                  float64x2_t v124 = vcvtq_f64_u64(v117);
                  v125.i32[0] = v114;
                  v125.i32[1] = BYTE1(v114);
                  int8x8_t v126 = vand_s8(v125, (int8x8_t)0xFF000000FFLL);
                  v117.i64[0] = v126.u32[0];
                  v117.i64[1] = v126.u32[1];
                  a10 = *(float64x2_t *)((char *)v27 + v113 + 32);
                  a5 = (__n128)vsubq_f64(vcvtq_f64_u64(v117), *(float64x2_t *)((char *)v27 + v113));
                  float64x2_t v127 = vsubq_f64(v124, *(float64x2_t *)((char *)v27 + v113 + 16));
                  a7 = vsubq_f64(v121, a10);
                  a6 = vsubq_f64(v118, *(float64x2_t *)((char *)v27 + v113 + 48));
                  unint64_t v128 = (__n128 *)&v518[v113];
                  v128[2] = (__n128)a7;
                  v128[3] = (__n128)a6;
                  *unint64_t v128 = a5;
                  v128[1] = (__n128)v127;
                  v41 += 8;
                  v113 += 64;
                }
                while (v22 != v41);
                uint64_t v34 = v485 & 0xFFFFFFF8;
                if (v22 == v25) {
                  goto LABEL_55;
                }
                goto LABEL_54;
              }
            }
          }
          else
          {
            uint64_t v34 = 0;
          }
          do
          {
LABEL_54:
            a5.n128_u8[0] = v28[v34];
            a6.f64[0] = v27->f64[v34];
            a5.n128_f64[0] = (double)a5.n128_u64[0] - a6.f64[0];
            *(void *)&v518[8 * v34++] = a5.n128_u64[0];
          }
          while (v25 != v34);
        }
      }
      else if ((int)v18 >= 1)
      {
        uint64_t v32 = *(uint64_t *)(v13 + 8 * v15 * v20);
        if (v18 >= 8)
        {
          if (v518 >= v31 || v29 >= v513)
          {
            if (v18 >= 0x10)
            {
              uint64_t v42 = 0;
              a6 = (float64x2_t)vdupq_lane_s64(v32, 0);
              uint64_t v43 = (float64x2_t *)v518;
              do
              {
                int8x16_t v44 = *(int8x16_t *)&v28[v42];
                v45.i32[0] = v44.u8[6];
                v45.i32[1] = v44.u8[7];
                int8x8_t v46 = vand_s8(v45, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v46.u32[0];
                v47.i64[1] = v46.u32[1];
                v48.i32[0] = v44.u8[4];
                v48.i32[1] = v44.u8[5];
                float64x2_t v49 = vcvtq_f64_u64(v47);
                int8x8_t v50 = vand_s8(v48, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v50.u32[0];
                v47.i64[1] = v50.u32[1];
                float64x2_t v51 = vcvtq_f64_u64(v47);
                v52.i32[0] = v44.u8[2];
                v52.i32[1] = v44.u8[3];
                int8x8_t v53 = vand_s8(v52, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v53.u32[0];
                v47.i64[1] = v53.u32[1];
                v54.i32[0] = v44.u8[0];
                float64x2_t v55 = vcvtq_f64_u64(v47);
                v54.i32[1] = v44.u8[1];
                int8x8_t v56 = vand_s8(v54, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v56.u32[0];
                v47.i64[1] = v56.u32[1];
                float64x2_t v57 = vcvtq_f64_u64(v47);
                v44.i64[0] = vextq_s8(v44, v44, 8uLL).u64[0];
                v58.i32[0] = v44.u8[6];
                v58.i32[1] = v44.u8[7];
                int8x8_t v59 = vand_s8(v58, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v59.u32[0];
                v47.i64[1] = v59.u32[1];
                float64x2_t v60 = vcvtq_f64_u64(v47);
                v61.i32[0] = v44.u8[4];
                v61.i32[1] = v44.u8[5];
                int8x8_t v62 = vand_s8(v61, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v62.u32[0];
                v47.i64[1] = v62.u32[1];
                float64x2_t v63 = vcvtq_f64_u64(v47);
                v64.i32[0] = v44.u8[2];
                v64.i32[1] = v44.u8[3];
                int8x8_t v65 = vand_s8(v64, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v65.u32[0];
                v47.i64[1] = v65.u32[1];
                float64x2_t v66 = vcvtq_f64_u64(v47);
                v67.i32[0] = v44.u8[0];
                v67.i32[1] = v44.u8[1];
                *(int8x8_t *)v44.i8 = vand_s8(v67, (int8x8_t)0xFF000000FFLL);
                v47.i64[0] = v44.u32[0];
                v47.i64[1] = v44.u32[1];
                a10 = vsubq_f64(v55, a6);
                v43[2] = vsubq_f64(v51, a6);
                v43[3] = vsubq_f64(v49, a6);
                *uint64_t v43 = vsubq_f64(v57, a6);
                v43[1] = a10;
                a7 = vsubq_f64(v60, a6);
                v43[6] = vsubq_f64(v63, a6);
                v43[7] = a7;
                v43[4] = vsubq_f64(vcvtq_f64_u64(v47), a6);
                v43[5] = vsubq_f64(v66, a6);
                v42 += 16;
                v43 += 8;
              }
              while (v21 != v42);
              if (v21 == v25) {
                goto LABEL_55;
              }
              uint64_t v36 = v21;
              uint64_t v33 = v21;
              if ((v25 & 8) == 0) {
                goto LABEL_45;
              }
            }
            else
            {
              uint64_t v36 = 0;
            }
            a6 = (float64x2_t)vdupq_lane_s64(v32, 0);
            double v68 = (float64x2_t *)&v518[8 * v36];
            do
            {
              uint64_t v69 = *(void *)&v28[v36];
              v70.i32[0] = BYTE6(v69);
              v70.i32[1] = HIBYTE(v69);
              int8x8_t v71 = vand_s8(v70, (int8x8_t)0xFF000000FFLL);
              v72.i64[0] = v71.u32[0];
              v72.i64[1] = v71.u32[1];
              float64x2_t v73 = vcvtq_f64_u64(v72);
              v74.i32[0] = BYTE4(v69);
              v74.i32[1] = BYTE5(v69);
              int8x8_t v75 = vand_s8(v74, (int8x8_t)0xFF000000FFLL);
              v72.i64[0] = v75.u32[0];
              v72.i64[1] = v75.u32[1];
              float64x2_t v76 = vcvtq_f64_u64(v72);
              v77.i32[0] = BYTE2(v69);
              v77.i32[1] = BYTE3(v69);
              int8x8_t v78 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
              v72.i64[0] = v78.u32[0];
              v72.i64[1] = v78.u32[1];
              float64x2_t v79 = vcvtq_f64_u64(v72);
              v80.i32[0] = v69;
              v80.i32[1] = BYTE1(v69);
              int8x8_t v81 = vand_s8(v80, (int8x8_t)0xFF000000FFLL);
              v72.i64[0] = v81.u32[0];
              v72.i64[1] = v81.u32[1];
              a7 = vsubq_f64(vcvtq_f64_u64(v72), a6);
              a10 = vsubq_f64(v79, a6);
              v68[2] = vsubq_f64(v76, a6);
              uint64_t v68[3] = vsubq_f64(v73, a6);
              float64x2_t *v68 = a7;
              v68[1] = a10;
              v68 += 4;
              v36 += 8;
            }
            while (v22 != v36);
            uint64_t v33 = v485 & 0xFFFFFFF8;
            if (v22 == v25) {
              goto LABEL_55;
            }
            goto LABEL_45;
          }
          uint64_t v33 = 0;
        }
        else
        {
          uint64_t v33 = 0;
        }
        do
        {
LABEL_45:
          LOBYTE(a6.f64[0]) = v28[v33];
          a6.f64[0] = (double)*(unint64_t *)&a6.f64[0] - *(double *)&v32;
          *(float64_t *)&v518[8 * v33++] = a6.f64[0];
        }
        while (v25 != v33);
      }
LABEL_55:
      unint64_t v129 = v28;
      unint64_t v130 = v24;
      uint64_t v131 = v20;
      do
      {
        int8x8_t v132 = (float64x2_t *)(v13 + 8 * v15 * v131);
        if (v19 < (int)v18)
        {
          double v521 = v132->f64[0];
          double v522 = v521;
          *(double *)v520 = v521;
          *(double *)&v520[1] = v521;
          int8x8_t v132 = (float64x2_t *)v520;
        }
        if ((int)v25 >= 4)
        {
          uint64_t v135 = 0;
          double v134 = 0.0;
          int8x8_t v136 = (double *)&v519;
          do
          {
            LOBYTE(a6.f64[0]) = v130[v135 - 3];
            double v137 = *(v136 - 2);
            LOBYTE(a10.f64[0]) = v130[v135 - 2];
            double v138 = *(v136 - 1) * ((double)*(unint64_t *)&a10.f64[0] - v132->f64[1])
                 + v137 * ((double)*(unint64_t *)&a6.f64[0] - v132->f64[0]);
            LOBYTE(v137) = v130[v135 - 1];
            *(double *)&unint64_t v139 = (double)*(unint64_t *)&v137 - v132[1].f64[0];
            double v140 = *v136;
            a10.f64[0] = v136[1];
            v136 += 4;
            double v141 = v138 + v140 * *(double *)&v139;
            LOBYTE(v139) = v130[v135];
            a7.f64[0] = (double)v139 - v132[1].f64[1];
            a6.f64[0] = v141 + a10.f64[0] * a7.f64[0];
            double v134 = v134 + a6.f64[0];
            v135 += 4;
            int8x8_t v132 = (float64x2_t *)((char *)v132 + v23);
          }
          while (v135 <= (int)v485 - 4);
          unsigned int v133 = ((v485 - 4) & 0xFFFFFFFC) + 4;
          if ((int)v133 >= (int)v18) {
            goto LABEL_57;
          }
        }
        else
        {
          unsigned int v133 = 0;
          double v134 = 0.0;
          if ((int)v18 <= 0) {
            goto LABEL_57;
          }
        }
        uint64_t v142 = v133;
        uint64_t v143 = v25 + ~v133;
        if (v143 < 7)
        {
          uint64_t v144 = v133;
          f64 = (void *)v132->f64;
          goto LABEL_78;
        }
        uint64_t v146 = v143 + 1;
        if (v143 >= 0xF)
        {
          uint64_t v147 = v146 & 0x1FFFFFFF0;
          float64x2_t v148 = (float64x2_t *)&v518[8 * v142];
          int8x8_t v149 = (int8x16_t *)&v129[v142];
          uint64_t v150 = v146 & 0x1FFFFFFF0;
          float64x2_t v151 = v132;
          do
          {
            int8x16_t v152 = *v149++;
            unint64_t v153 = vextq_s8(v152, v152, 8uLL).u64[0];
            v154.i32[0] = BYTE6(v153);
            v155.i32[0] = BYTE4(v153);
            v154.i32[1] = HIBYTE(v153);
            v155.i32[1] = BYTE5(v153);
            int8x8_t v156 = vand_s8(v154, (int8x8_t)0xFF000000FFLL);
            v157.i32[0] = BYTE2(v153);
            v157.i32[1] = BYTE3(v153);
            int8x8_t v158 = vand_s8(v155, (int8x8_t)0xFF000000FFLL);
            v159.i32[0] = v153;
            __int32 v160 = BYTE1(v153);
            v161.i64[0] = v156.u32[0];
            v161.i64[1] = v156.u32[1];
            uint64x2_t v162 = v161;
            int8x8_t v163 = vand_s8(v157, (int8x8_t)0xFF000000FFLL);
            v159.i32[1] = v160;
            v161.i64[0] = v158.u32[0];
            v161.i64[1] = v158.u32[1];
            uint64x2_t v164 = v161;
            v157.i32[0] = v152.u8[6];
            v157.i32[1] = v152.u8[7];
            v161.i64[0] = v163.u32[0];
            v161.i64[1] = v163.u32[1];
            uint64x2_t v165 = v161;
            int8x8_t v166 = vand_s8(v159, (int8x8_t)0xFF000000FFLL);
            int8x8_t v167 = vand_s8(v157, (int8x8_t)0xFF000000FFLL);
            v161.i64[0] = v167.u32[0];
            v161.i64[1] = v167.u32[1];
            uint64x2_t v168 = v161;
            v161.i64[0] = v166.u32[0];
            v161.i64[1] = v166.u32[1];
            uint64x2_t v169 = v161;
            v170.i32[0] = v152.u8[4];
            v170.i32[1] = v152.u8[5];
            int8x8_t v171 = vand_s8(v170, (int8x8_t)0xFF000000FFLL);
            v161.i64[0] = v171.u32[0];
            v161.i64[1] = v171.u32[1];
            v172.i32[0] = v152.u8[2];
            float64x2_t v173 = vcvtq_f64_u64(v161);
            v172.i32[1] = v152.u8[3];
            int8x8_t v174 = vand_s8(v172, (int8x8_t)0xFF000000FFLL);
            v161.i64[0] = v174.u32[0];
            v161.i64[1] = v174.u32[1];
            float64x2_t v175 = vcvtq_f64_u64(v161);
            v176.i32[0] = v152.u8[0];
            v176.i32[1] = v152.u8[1];
            int8x8_t v177 = vand_s8(v176, (int8x8_t)0xFF000000FFLL);
            v161.i64[0] = v177.u32[0];
            v161.i64[1] = v177.u32[1];
            float64x2_t v178 = vmulq_f64(v148[7], vsubq_f64(vcvtq_f64_u64(v162), v151[7]));
            float64x2_t v179 = vmulq_f64(v148[6], vsubq_f64(vcvtq_f64_u64(v164), v151[6]));
            float64x2_t v180 = vmulq_f64(v148[5], vsubq_f64(vcvtq_f64_u64(v165), v151[5]));
            float64x2_t v181 = vmulq_f64(v148[3], vsubq_f64(vcvtq_f64_u64(v168), v151[3]));
            a10 = vmulq_f64(v148[4], vsubq_f64(vcvtq_f64_u64(v169), v151[4]));
            float64x2_t v182 = vmulq_f64(v148[2], vsubq_f64(v173, v151[2]));
            a7 = vmulq_f64(v148[1], vsubq_f64(v175, v151[1]));
            a6 = vmulq_f64(*v148, vsubq_f64(vcvtq_f64_u64(v161), *v151));
            double v183 = v134 + a6.f64[0] + a6.f64[1] + a7.f64[0];
            a7.f64[0] = a10.f64[1];
            a6.f64[0] = v178.f64[1];
            double v134 = v183
                 + a7.f64[1]
                 + v182.f64[0]
                 + v182.f64[1]
                 + v181.f64[0]
                 + v181.f64[1]
                 + a10.f64[0]
                 + a10.f64[1]
                 + v180.f64[0]
                 + v180.f64[1]
                 + v179.f64[0]
                 + v179.f64[1]
                 + v178.f64[0]
                 + v178.f64[1];
            v151 += 8;
            v148 += 8;
            v150 -= 16;
          }
          while (v150);
          if (v146 == v147)
          {
            unint64_t v26 = v482;
            LODWORD(v18) = v483;
            uint64_t v14 = v484;
            uint64_t v25 = v485;
            goto LABEL_57;
          }
          unint64_t v26 = v482;
          LODWORD(v18) = v483;
          uint64_t v14 = v484;
          uint64_t v25 = v485;
          if ((v146 & 8) == 0)
          {
            f64 = (void *)&v132->f64[v147];
            uint64_t v144 = v147 + v142;
LABEL_78:
            uint64_t v207 = 0;
            do
            {
              a6.f64[0] = *(float64_t *)&v518[8 * v144 + 8 * v207];
              LOBYTE(a7.f64[0]) = v129[v144 + v207];
              a7.f64[0] = (double)*(unint64_t *)&a7.f64[0] - *(double *)&f64[v207];
              double v134 = v134 + a6.f64[0] * a7.f64[0];
              ++v207;
            }
            while ((int)v18 > (int)v144 + (int)v207);
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v147 = 0;
        }
        uint64_t v144 = (v146 & 0x1FFFFFFF8) + v142;
        f64 = (void *)&v132->f64[v146 & 0x1FFFFFFF8];
        uint64x2_t v184 = (float64x2_t *)((char *)v132 + 8 * v147);
        uint64_t v185 = v147 - (v146 & 0x1FFFFFFF8);
        uint64_t v186 = v147 + v142;
        uint64_t v187 = (float64x2_t *)&v518[8 * v186];
        do
        {
          uint64_t v188 = *(void *)&v129[v186];
          v189.i32[0] = BYTE6(v188);
          v189.i32[1] = HIBYTE(v188);
          int8x8_t v190 = vand_s8(v189, (int8x8_t)0xFF000000FFLL);
          v191.i64[0] = v190.u32[0];
          v191.i64[1] = v190.u32[1];
          v192.i32[0] = BYTE4(v188);
          float64x2_t v193 = vcvtq_f64_u64(v191);
          v192.i32[1] = BYTE5(v188);
          int8x8_t v194 = vand_s8(v192, (int8x8_t)0xFF000000FFLL);
          v191.i64[0] = v194.u32[0];
          v191.i64[1] = v194.u32[1];
          v195.i32[0] = BYTE2(v188);
          v195.i32[1] = BYTE3(v188);
          float64x2_t v196 = vcvtq_f64_u64(v191);
          int8x8_t v197 = vand_s8(v195, (int8x8_t)0xFF000000FFLL);
          v191.i64[0] = v197.u32[0];
          v191.i64[1] = v197.u32[1];
          float64x2_t v198 = vcvtq_f64_u64(v191);
          v199.i32[0] = v188;
          v199.i32[1] = BYTE1(v188);
          int8x8_t v200 = vand_s8(v199, (int8x8_t)0xFF000000FFLL);
          v191.i64[0] = v200.u32[0];
          v191.i64[1] = v200.u32[1];
          float64x2_t v202 = v184[2];
          float64x2_t v201 = v184[3];
          float64x2_t v204 = *v184;
          float64x2_t v203 = v184[1];
          v184 += 4;
          float64x2_t v205 = vmulq_f64(v187[3], vsubq_f64(v193, v201));
          float64x2_t v206 = vmulq_f64(v187[2], vsubq_f64(v196, v202));
          a7 = vmulq_f64(v187[1], vsubq_f64(v198, v203));
          a6 = vmulq_f64(*v187, vsubq_f64(vcvtq_f64_u64(v191), v204));
          a10.f64[0] = a6.f64[1];
          double v134 = v134
               + a6.f64[0]
               + a6.f64[1]
               + a7.f64[0]
               + a7.f64[1]
               + v206.f64[0]
               + v206.f64[1]
               + v205.f64[0]
               + v205.f64[1];
          v187 += 4;
          v186 += 8;
          v185 += 8;
        }
        while (v185);
        LODWORD(v18) = v483;
        uint64_t v14 = v484;
        if (v146 != (v146 & 0x1FFFFFFF8)) {
          goto LABEL_78;
        }
LABEL_57:
        a5.n128_f64[0] = v134 * a4;
        *(void *)(v12 + 8 * v131++) = a5.n128_u64[0];
        v130 += v14;
        v129 += v14;
      }
      while (v131 != v26);
      v12 += 8 * v472;
      ++v20;
      v28 += v14;
      BOOL v27 = (float64x2_t *)((char *)v27 + v515);
      v24 += v14;
      int8x16_t v11 = v30;
      uint64_t v21 = v485 & 0xFFFFFFF0;
    }
    while (v20 != v26);
  }
  return result;
}

unsigned char *sub_100274C48(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, float64x2_t a7, __n128 a8)
{
  uint64_t v8 = (unsigned __int16 *)a1[2];
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(__n128 **)(a3 + 16);
  unint64_t v11 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(a3 + 80) >> 2;
  }
  uint64_t v13 = (int *)a1[8];
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  if (v10) {
    BOOL v16 = *(_DWORD *)(a3 + 12) < (int)v14;
  }
  else {
    BOOL v16 = 0;
  }
  char v17 = !v16;
  unsigned int v18 = 20 * v15;
  if (!v16) {
    unsigned int v18 = 4 * v15;
  }
  uint64_t result = v129;
  if (v18 >= 0x409) {
    operator new[]();
  }
  unint64_t v20 = v11 >> 1;
  uint64_t v21 = *(void *)(a2 + 80) >> 2;
  uint64_t v22 = v13[1];
  uint64_t v23 = v15;
  if ((v17 & 1) == 0)
  {
    uint64_t v24 = (float32x4_t *)&v129[4 * v15];
    if ((int)v15 < 1) {
      goto LABEL_36;
    }
    BOOL v25 = v15 >= 8 && v12 == 1;
    if (v25
      && (v24 < (float32x4_t *)((char *)v10 + 4 * v15)
        ? (BOOL v26 = v10 >= (__n128 *)&v129[16 * v15 + 4 * v15])
        : (BOOL v26 = 1),
          v26))
    {
      uint64_t v27 = v15 & 0x7FFFFFF8;
      uint64_t v28 = v10 + 1;
      uint64_t v29 = (float *)&v130[4 * v15 + 60];
      uint64_t v30 = v15 & 0xFFFFFFF8;
      do
      {
        __n128 v31 = v28[-1];
        a8 = *v28;
        __n128 v32 = v31;
        a6 = v31;
        __n128 v33 = v31;
        __n128 v34 = *v28;
        __n128 v35 = *v28;
        __n128 v36 = *v28;
        __n128 v37 = v29 - 16;
        vst4q_f32(v37, *(float32x4x4_t *)(&a6 - 2));
        vst4q_f32(v29, *(float32x4x4_t *)a8.n128_u64);
        v28 += 2;
        v29 += 32;
        v30 -= 8;
      }
      while (v30);
      if (v27 == v15)
      {
LABEL_36:
        uint64_t v12 = 4 * (v12 != 0);
        uint64_t v10 = (__n128 *)&v129[4 * v15];
        if ((int)v14 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    BOOL v38 = (const float *)v10 + v12 * v27;
    uint64_t v40 = (float32x4_t *)&v129[16 * v27 + 4 * v15];
    uint64_t v41 = v15 - v27;
    do
    {
      float32x4_t v42 = vld1q_dup_f32(v38);
      uint64_t v39 = 4 * v12;
      BOOL v38 = (const float *)((char *)v38 + v39);
      *v40++ = v42;
      --v41;
    }
    while (v41);
    goto LABEL_36;
  }
  if (!v10)
  {
    if ((int)v14 < 1) {
      return result;
    }
    uint64_t v87 = 0;
    uint64_t v88 = v14 - 4;
    double v89 = a4 * 0.0;
    *(float *)&double v89 = a4 * 0.0;
    int32x4_t v90 = vdupq_lane_s32(*(int32x2_t *)&v89, 0);
    uint64_t v91 = 2 * v20;
    uint64_t v92 = 4 * v21;
    for (unint64_t i = v8; ; ++i)
    {
      if ((int)v23 < 1) {
        goto LABEL_82;
      }
      if (v23 == 1) {
        break;
      }
      uint64_t v95 = v23 & 0xFFFFFFFE;
      float64x2_t v96 = v130;
      int8x8_t v97 = i;
      do
      {
        a6.n128_u16[0] = *v97;
        a6.n128_f32[0] = (float)a6.n128_u32[0];
        LOWORD(a7.f64[0]) = v97[v20];
        *(float *)a7.f64 = (float)LODWORD(a7.f64[0]);
        *(v96 - 1) = a6.n128_u32[0];
        *float64x2_t v96 = LODWORD(a7.f64[0]);
        v97 += 2 * v20;
        v96 += 2;
        v95 -= 2;
      }
      while (v95);
      uint64_t v94 = v23 & 0xFFFFFFFE;
      if (v94 != v23) {
        goto LABEL_80;
      }
LABEL_82:
      LODWORD(v101) = v87;
      int8x8_t v102 = (uint16x4_t *)i;
      uint64_t v103 = v87;
      if (v87 <= v88)
      {
        do
        {
          a6 = (__n128)v90;
          if ((int)v23 >= 1)
          {
            float64x2_t v111 = 0uLL;
            float64x2_t v112 = v102;
            uint64_t v113 = v23;
            uint64_t v114 = (float *)v129;
            float64x2_t v115 = 0uLL;
            do
            {
              float v116 = *v114++;
              uint32x4_t v117 = vmovl_u16(*v112);
              v118.i64[0] = v117.u32[0];
              v118.i64[1] = v117.u32[1];
              float64x2_t v119 = vcvtq_f64_u64(v118);
              v118.i64[0] = v117.u32[2];
              v118.i64[1] = v117.u32[3];
              float64x2_t v115 = vmlaq_n_f64(v115, vcvtq_f64_u64(v118), v116);
              float64x2_t v111 = vmlaq_n_f64(v111, v119, v116);
              float64x2_t v112 = (uint16x4_t *)((char *)v112 + v91);
              --v113;
            }
            while (v113);
            a8.n128_f64[0] = a4;
            a7 = vmulq_n_f64(v115, a4);
            a6 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v111, a4)), a7);
          }
          *(__n128 *)(v9 + 4 * v103) = a6;
          uint64_t v101 = v103 + 4;
          ++v102;
          uint64_t v103 = v101;
        }
        while ((int)v88 >= (int)v101);
      }
      if ((int)v101 >= (int)v14) {
        goto LABEL_73;
      }
      uint64_t v104 = v101;
      if ((int)v23 >= 1)
      {
        int8x8_t v105 = &v8[v101];
        do
        {
          double v106 = 0.0;
          float64x2_t v107 = v105;
          uint64_t v108 = v23;
          int8x8_t v109 = (float *)v129;
          do
          {
            float v110 = *v109++;
            a8.n128_u16[0] = *v107;
            a8.n128_f64[0] = (double)a8.n128_u64[0];
            double v106 = v106 + v110 * a8.n128_f64[0];
            float64x2_t v107 = (unsigned __int16 *)((char *)v107 + v91);
            --v108;
          }
          while (v108);
          WORD1(a7.f64[0]) = WORD1(a4);
          a6.n128_f32[0] = v106 * a4;
          *(_DWORD *)(v9 + 4 * v104++) = a6.n128_u32[0];
          ++v105;
        }
        while ((int)v14 > (int)v104);
        goto LABEL_73;
      }
      uint64_t v120 = (v14 + ~v101);
      if (v120 >= 7)
      {
        uint64_t v122 = v120 + 1;
        uint64_t v123 = (v120 + 1) & 0x1FFFFFFF8;
        uint64_t v121 = v123 + v104;
        uint64_t v124 = 4 * v104;
        uint64_t v125 = v123;
        do
        {
          int8x8_t v126 = (int32x4_t *)(v9 + v124);
          *int8x8_t v126 = v90;
          v126[1] = v90;
          v124 += 32;
          v125 -= 8;
        }
        while (v125);
        if (v122 == v123) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v121 = v101;
      }
      uint64_t v127 = 4 * v121;
      do
      {
        *(_DWORD *)(v9 + v127) = LODWORD(v89);
        v127 += 4;
        LODWORD(v121) = v121 + 1;
      }
      while ((int)v14 > (int)v121);
LABEL_73:
      ++v87;
      v9 += v92;
      if (v87 == v14) {
        return result;
      }
    }
    uint64_t v94 = 0;
LABEL_80:
    int8x8_t v98 = &v129[4 * v94];
    uint64_t v99 = v91 * v94;
    uint64_t v100 = v23 - v94;
    do
    {
      a6.n128_u16[0] = *(unsigned __int16 *)((char *)i + v99);
      a6.n128_f32[0] = (float)a6.n128_u32[0];
      *v98++ = a6.n128_u32[0];
      v99 += v91;
      --v100;
    }
    while (v100);
    goto LABEL_82;
  }
  uint64_t v24 = 0;
  if ((int)v14 >= 1)
  {
LABEL_37:
    uint64_t v43 = 0;
    uint64_t v44 = v14 - 4;
    double v45 = a4 * 0.0;
    *(float *)&double v45 = a4 * 0.0;
    uint64_t v46 = 4 * v12;
    int32x4_t v47 = vdupq_lane_s32(*(int32x2_t *)&v45, 0);
    uint64_t v48 = 2 * v20;
    uint64_t v49 = 4 * v21;
    int8x8_t v50 = (float *)v10;
    float64x2_t v51 = v8;
    do
    {
      if (v24)
      {
        uint64_t v52 = v15;
        int8x8_t v53 = v51;
        int8x8_t v54 = (float *)v24;
        float64x2_t v55 = v129;
        if ((int)v15 >= 1)
        {
          do
          {
            a6.n128_u16[0] = *v53;
            a6.n128_f32[0] = (float)a6.n128_u32[0] - *v54;
            *v55++ = a6.n128_u32[0];
            int8x8_t v54 = (float *)((char *)v54 + v46);
            int8x8_t v53 = (unsigned __int16 *)((char *)v53 + v48);
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v15 >= 1)
      {
        uint64_t v56 = v15;
        float64x2_t v57 = v51;
        int8x8_t v58 = v50;
        int8x8_t v59 = v129;
        do
        {
          a6.n128_u16[0] = *v57;
          a6.n128_f32[0] = (float)a6.n128_u32[0] - *v58;
          *v59++ = a6.n128_u32[0];
          int8x8_t v58 = (float *)((char *)v58 + v46);
          float64x2_t v57 = (unsigned __int16 *)((char *)v57 + v48);
          --v56;
        }
        while (v56);
      }
      LODWORD(v60) = v43;
      int8x8_t v61 = (uint16x4_t *)v51;
      uint64_t v62 = v43;
      if (v43 <= v44)
      {
        do
        {
          a6 = (__n128)v47;
          if ((int)v15 >= 1)
          {
            int8x8_t v71 = (float32x4_t *)((char *)v10 + 4 * v62);
            if (v24) {
              int8x8_t v71 = v24;
            }
            float64x2_t v72 = 0uLL;
            float64x2_t v73 = v61;
            uint64_t v74 = v15;
            int8x8_t v75 = (float *)v129;
            float64x2_t v76 = 0uLL;
            do
            {
              float v77 = *v75++;
              float32x4_t v78 = vsubq_f32(vcvtq_f32_u32(vmovl_u16(*v73)), *v71);
              float64x2_t v76 = vmlaq_n_f64(v76, vcvt_hight_f64_f32(v78), v77);
              float64x2_t v72 = vmlaq_n_f64(v72, vcvtq_f64_f32(*(float32x2_t *)v78.f32), v77);
              int8x8_t v71 = (float32x4_t *)((char *)v71 + v46);
              float64x2_t v73 = (uint16x4_t *)((char *)v73 + v48);
              --v74;
            }
            while (v74);
            a8.n128_u16[1] = WORD1(a4);
            a6 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v72, a4)), vmulq_n_f64(v76, a4));
          }
          *(__n128 *)(v9 + 4 * v62) = a6;
          uint64_t v60 = v62 + 4;
          ++v61;
          uint64_t v62 = v60;
        }
        while ((int)v44 >= (int)v60);
      }
      if ((int)v60 >= (int)v14) {
        goto LABEL_38;
      }
      uint64_t v63 = v60;
      if ((int)v15 >= 1)
      {
        int8x8_t v64 = &v8[v60];
        do
        {
          int8x8_t v65 = (float *)v10 + v63;
          if (v24) {
            int8x8_t v65 = (float *)v24;
          }
          double v66 = 0.0;
          int8x8_t v67 = v64;
          uint64_t v68 = v15;
          uint64_t v69 = (float *)v129;
          do
          {
            float v70 = *v69++;
            a8.n128_u16[0] = *v67;
            a8.n128_f64[0] = (float)((float)a8.n128_u32[0] - *v65);
            double v66 = v66 + v70 * a8.n128_f64[0];
            int8x8_t v65 = (float *)((char *)v65 + v46);
            int8x8_t v67 = (unsigned __int16 *)((char *)v67 + v48);
            --v68;
          }
          while (v68);
          a6.n128_f32[0] = v66 * a4;
          *(_DWORD *)(v9 + 4 * v63++) = a6.n128_u32[0];
          ++v64;
        }
        while ((int)v14 > (int)v63);
        goto LABEL_38;
      }
      uint64_t v79 = (v14 + ~v60);
      if (v79 >= 7)
      {
        uint64_t v81 = v79 + 1;
        uint64_t v82 = (v79 + 1) & 0x1FFFFFFF8;
        uint64_t v80 = v82 + v63;
        uint64_t v83 = 4 * v63;
        uint64_t v84 = v82;
        do
        {
          int8x16_t v85 = (int32x4_t *)(v9 + v83);
          *int8x16_t v85 = v47;
          v85[1] = v47;
          v83 += 32;
          v84 -= 8;
        }
        while (v84);
        if (v81 == v82) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v80 = v60;
      }
      uint64_t v86 = 4 * v80;
      do
      {
        *(_DWORD *)(v9 + v86) = LODWORD(v45);
        v86 += 4;
        LODWORD(v80) = v80 + 1;
      }
      while ((int)v14 > (int)v80);
LABEL_38:
      ++v43;
      v9 += v49;
      ++v51;
      ++v50;
    }
    while (v43 != v22);
  }
  return result;
}

void sub_1002752FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != v12)
  {
    if (a12) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10027532C(unint64_t result, uint64_t a2, uint64_t a3, double a4, float32x4_t a5, float32x4_t a6, __n128 a7, double a8)
{
  double v8 = a4;
  uint64_t v9 = *(const __int16 **)(result + 16);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(float32x4_t **)(a3 + 16);
  uint64_t v12 = *(void *)(result + 80) >> 1;
  uint64_t v239 = *(void *)(a2 + 80) >> 2;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(a3 + 80) >> 2;
  }
  uint64_t v14 = *(unsigned int **)(result + 64);
  unint64_t v15 = *v14;
  uint64_t v16 = (int)v14[1];
  uint64_t v17 = v14[1];
  if (v11)
  {
    int v18 = *(_DWORD *)(a3 + 12);
    uint64_t result = (unint64_t)v242;
    if ((unint64_t)(4 * v16) >= 0x409) {
      operator new[]();
    }
    if ((int)v15 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v237 = v17 & 0xFFFFFFF0;
      unint64_t v20 = (uint16x4_t *)(v9 + 8);
      uint64_t v21 = 2 * v12;
      uint64_t v22 = v11 + 2;
      uint64_t v23 = (2 * v17) & 0x1FFFFFFE0;
      uint64_t v24 = v9 + 2;
      uint64_t v25 = *(void *)(a3 + 16);
      uint64_t v238 = 4 * v13;
      do
      {
        if (v18 >= (int)v17)
        {
          if ((int)v17 >= 1)
          {
            uint64_t v27 = 0;
            if (v17 < 0x10) {
              goto LABEL_20;
            }
            if ((unint64_t)((char *)v242 - ((char *)v11 + v238 * v19)) < 0x40) {
              goto LABEL_20;
            }
            uint64_t v28 = v22;
            uint64_t v29 = (__n128 *)v244;
            uint64_t v30 = v20;
            uint64_t v31 = v17 & 0xFFFFFFF0;
            do
            {
              uint16x8_t v32 = *(uint16x8_t *)v30[-2].i8;
              float32x4_t v34 = v28[-2];
              float32x4_t v33 = v28[-1];
              float32x4_t v36 = *v28;
              float32x4_t v35 = v28[1];
              v28 += 4;
              a6 = vsubq_f32(vcvtq_f32_u32(vmovl_high_u16(v32)), v33);
              a5 = vsubq_f32(vcvtq_f32_u32(vmovl_u16(*v30)), v36);
              a7 = (__n128)vsubq_f32(vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v30->i8)), v35);
              v29[-2] = (__n128)vsubq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v32.i8)), v34);
              v29[-1] = (__n128)a6;
              *uint64_t v29 = (__n128)a5;
              v29[1] = a7;
              v29 += 4;
              v30 += 4;
              v31 -= 16;
            }
            while (v31);
            uint64_t v27 = v17 & 0xFFFFFFF0;
            if (v237 != v17)
            {
LABEL_20:
              __n128 v37 = (float *)&v242[v27];
              BOOL v38 = (float *)(v25 + 4 * v27);
              uint64_t v39 = &v9[v27];
              uint64_t v40 = v17 - v27;
              do
              {
                unsigned int v41 = *(unsigned __int16 *)v39++;
                float v42 = (float)v41;
                float v43 = *v38++;
                a5.i16[1] = HIWORD(v43);
                *v37++ = v42 - v43;
                --v40;
              }
              while (v40);
            }
          }
          goto LABEL_27;
        }
        if ((int)v16 >= 1)
        {
          LODWORD(a4) = v11->i32[v13 * v19];
          if (v16 >= 0x10)
          {
            unint64_t v44 = 0;
            a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
            double v45 = (__n128 *)v244;
            do
            {
              uint16x8_t v46 = *(uint16x8_t *)&v9[v44 / 2];
              uint16x8_t v47 = *(uint16x8_t *)&v9[v44 / 2 + 8];
              float32x4_t v48 = vcvtq_f32_u32(vmovl_high_u16(v46));
              float32x4_t v49 = vcvtq_f32_u32(vmovl_high_u16(v47));
              a6 = vsubq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v46.i8)), a5);
              a7 = (__n128)vsubq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8)), a5);
              v45[-2] = (__n128)a6;
              v45[-1] = (__n128)vsubq_f32(v48, a5);
              *double v45 = a7;
              v45[1] = (__n128)vsubq_f32(v49, a5);
              v45 += 4;
              v44 += 32;
            }
            while (v23 != v44);
            uint64_t v26 = v17 & 0xFFFFFFF0;
            if (v237 == v17) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v26 = 0;
          }
          do
          {
            a5.i16[0] = v9[v26];
            a5.f32[0] = (float)a5.u32[0] - *(float *)&a4;
            v242[v26++] = a5.i32[0];
          }
          while (v17 != v26);
        }
LABEL_27:
        int8x8_t v240 = v22;
        int8x8_t v241 = v20;
        int8x8_t v50 = v9;
        float64x2_t v51 = v24;
        uint64_t v52 = v19;
        do
        {
          int8x8_t v53 = (float32x4_t *)((char *)v11 + 4 * v13 * v52);
          if (v18 < (int)v16)
          {
            float32x4_t v54 = vld1q_dup_f32(v53->f32);
            float32x4_t v245 = v54;
            int8x8_t v53 = &v245;
          }
          if ((int)v17 >= 4)
          {
            uint64_t v57 = 0;
            double v56 = 0.0;
            int8x8_t v58 = v51;
            int8x8_t v59 = (float *)&v243;
            do
            {
              a7.n128_u16[0] = *(v58 - 2);
              float v60 = v53->f32[0];
              LOWORD(v60) = *(v58 - 1);
              double v61 = *(v59 - 1) * (float)((float)LODWORD(v60) - v53->f32[1]);
              double v62 = v61 + *(v59 - 2) * (float)((float)a7.n128_u32[0] - v53->f32[0]);
              LOWORD(v61) = *v58;
              float v63 = *v59;
              float v64 = v59[1];
              v59 += 4;
              double v65 = v63;
              double v66 = v62 + v65 * (float)((float)LODWORD(v61) - v53->f32[2]);
              *(double *)a6.i64 = v64;
              LOWORD(v65) = v58[1];
              a7.n128_f64[0] = (float)((float)LODWORD(v65) - v53->f32[3]);
              *(double *)a5.i64 = v66 + v64 * a7.n128_f64[0];
              v57 += 4;
              double v56 = v56 + *(double *)a5.i64;
              v53 += v18 == v16;
              v58 += 4;
            }
            while (v57 <= (int)v17 - 4);
            int v55 = ((v17 - 4) & 0xFFFFFFFC) + 4;
            if (v55 >= (int)v16) {
              goto LABEL_28;
            }
          }
          else
          {
            int v55 = 0;
            double v56 = 0.0;
            if ((int)v16 <= 0) {
              goto LABEL_28;
            }
          }
          uint64_t v67 = v55;
          uint64_t v68 = (v17 + ~v55);
          if (v68 < 0xF)
          {
            uint64_t v69 = v67;
            float v70 = (float *)v53;
            do
            {
LABEL_42:
              *(double *)a5.i64 = *(float *)&v242[v69];
              a6.i16[0] = v50[v69];
              float v102 = *v70++;
              a7.n128_u16[1] = HIWORD(v102);
              *(double *)a6.i64 = (float)((float)a6.u32[0] - v102);
              double v56 = v56 + *(double *)a5.i64 * *(double *)a6.i64;
              ++v69;
            }
            while ((int)v16 > (int)v69);
            goto LABEL_28;
          }
          uint64_t v71 = v68 + 1;
          uint64_t v72 = (v68 + 1) & 0x1FFFFFFF0;
          float v70 = &v53->f32[v72];
          uint64_t v69 = v72 + v67;
          float64x2_t v73 = (uint16x8_t *)&v50[v67];
          uint64_t v74 = v53 + 2;
          int8x8_t v75 = (float32x4_t *)&v244[v67];
          uint64_t v76 = v72;
          do
          {
            float32x4_t v78 = v75[-2];
            float32x4_t v77 = v75[-1];
            float32x4_t v80 = *v75;
            float32x4_t v79 = v75[1];
            v75 += 4;
            float64x2_t v81 = vcvtq_f64_f32(*(float32x2_t *)v78.f32);
            float64x2_t v82 = vcvtq_f64_f32(*(float32x2_t *)v77.f32);
            float64x2_t v83 = vcvtq_f64_f32(*(float32x2_t *)v80.f32);
            float64x2_t v84 = vcvtq_f64_f32(*(float32x2_t *)v79.f32);
            uint16x8_t v85 = *v73;
            uint16x8_t v86 = v73[1];
            v73 += 2;
            float32x4_t v87 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v85.i8));
            float32x4_t v88 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v86.i8));
            float32x4_t v89 = v74[-2];
            float32x4_t v90 = v74[-1];
            float32x4_t v91 = *v74;
            float32x4_t v92 = v74[1];
            v74 += 4;
            float32x4_t v93 = vsubq_f32(vcvtq_f32_u32(vmovl_high_u16(v85)), v90);
            float32x4_t v94 = vsubq_f32(v87, v89);
            float32x4_t v95 = vsubq_f32(vcvtq_f32_u32(vmovl_high_u16(v86)), v92);
            float32x4_t v96 = vsubq_f32(v88, v91);
            a5 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v77), vcvt_hight_f64_f32(v93));
            float64x2_t v97 = vmulq_f64(v82, vcvtq_f64_f32(*(float32x2_t *)v93.f32));
            a6 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v78), vcvt_hight_f64_f32(v94));
            float64x2_t v98 = vmulq_f64(v81, vcvtq_f64_f32(*(float32x2_t *)v94.f32));
            a7 = (__n128)vmulq_f64(vcvt_hight_f64_f32(v79), vcvt_hight_f64_f32(v95));
            float64x2_t v99 = vmulq_f64(v84, vcvtq_f64_f32(*(float32x2_t *)v95.f32));
            float64x2_t v100 = vmulq_f64(vcvt_hight_f64_f32(v80), vcvt_hight_f64_f32(v96));
            float64x2_t v101 = vmulq_f64(v83, vcvtq_f64_f32(*(float32x2_t *)v96.f32));
            double v56 = v56
                + v98.f64[0]
                + v98.f64[1]
                + *(double *)a6.i64
                + *(double *)&a6.i64[1]
                + v97.f64[0]
                + v97.f64[1]
                + *(double *)a5.i64
                + *(double *)&a5.i64[1]
                + v101.f64[0]
                + v101.f64[1]
                + v100.f64[0]
                + v100.f64[1]
                + v99.f64[0]
                + v99.f64[1]
                + a7.n128_f64[0]
                + a7.n128_f64[1];
            v76 -= 16;
          }
          while (v76);
          if (v71 != v72) {
            goto LABEL_42;
          }
LABEL_28:
          a4 = v56 * v8;
          *(float *)&a4 = a4;
          *(_DWORD *)(v10 + 4 * v52++) = LODWORD(a4);
          float64x2_t v51 = (const __int16 *)((char *)v51 + v21);
          int8x8_t v50 = (const __int16 *)((char *)v50 + v21);
        }
        while (v52 != v15);
        ++v19;
        v10 += 4 * v239;
        unint64_t v20 = (uint16x4_t *)((char *)v241 + v21);
        uint64_t v23 = (2 * v17) & 0x1FFFFFFE0;
        uint64_t v22 = (float32x4_t *)((char *)v240 + v238);
        v25 += v238;
        uint64_t v9 = (const __int16 *)((char *)v9 + v21);
        uint64_t v24 = (const __int16 *)((char *)v24 + v21);
      }
      while (v19 != v15);
    }
  }
  else if ((int)v15 >= 1)
  {
    if ((int)v16 >= 4)
    {
      unint64_t v109 = (v17 - 4);
      uint64_t v110 = (v109 & 0xFFFFFFFC) + 4;
      if (v109 >= 0x1C)
      {
        unsigned int v133 = 0;
        unint64_t v134 = (v109 >> 2) + 1;
        uint64_t v135 = 2 * v12;
        do
        {
          int8x8_t v136 = v9;
          uint64_t result = (unint64_t)v133;
          do
          {
            double v138 = 0.0;
            unint64_t v139 = v134 & 0x7FFFFFF8;
            double v140 = v136;
            double v141 = v9;
            do
            {
              int16x8x4_t v246 = vld4q_s16(v141);
              v141 += 32;
              uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v246.val[0].i8);
              int16x8x4_t v247 = vld4q_s16(v140);
              v140 += 32;
              v143.i64[0] = v142.u32[0];
              v143.i64[1] = v142.u32[1];
              float64x2_t v144 = vcvtq_f64_u64(v143);
              v143.i64[0] = v142.u32[2];
              v143.i64[1] = v142.u32[3];
              uint64x2_t v145 = v143;
              uint32x4_t v146 = vmovl_high_u16((uint16x8_t)v246.val[0]);
              v143.i64[0] = v146.u32[0];
              v143.i64[1] = v146.u32[1];
              float64x2_t v147 = vcvtq_f64_u64(v145);
              float64x2_t v148 = vcvtq_f64_u64(v143);
              v143.i64[0] = v146.u32[2];
              v143.i64[1] = v146.u32[3];
              float64x2_t v149 = vcvtq_f64_u64(v143);
              uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v247.val[0].i8);
              v143.i64[0] = v150.u32[0];
              v143.i64[1] = v150.u32[1];
              float64x2_t v151 = vcvtq_f64_u64(v143);
              v143.i64[0] = v150.u32[2];
              v143.i64[1] = v150.u32[3];
              float64x2_t v152 = vcvtq_f64_u64(v143);
              uint32x4_t v153 = vmovl_high_u16((uint16x8_t)v247.val[0]);
              v143.i64[0] = v153.u32[0];
              v143.i64[1] = v153.u32[1];
              uint64x2_t v154 = v143;
              v143.i64[0] = v153.u32[2];
              v143.i64[1] = v153.u32[3];
              float64x2_t v155 = vcvtq_f64_u64(v154);
              float64x2_t v156 = vcvtq_f64_u64(v143);
              uint32x4_t v157 = vmovl_high_u16((uint16x8_t)v246.val[1]);
              v143.i64[0] = v157.u32[2];
              v143.i64[1] = v157.u32[3];
              float64x2_t v158 = vcvtq_f64_u64(v143);
              v143.i64[0] = v157.u32[0];
              v143.i64[1] = v157.u32[1];
              float64x2_t v159 = vcvtq_f64_u64(v143);
              uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v246.val[1].i8);
              v143.i64[0] = v160.u32[2];
              v143.i64[1] = v160.u32[3];
              float64x2_t v161 = vcvtq_f64_u64(v143);
              v143.i64[0] = v160.u32[0];
              v143.i64[1] = v160.u32[1];
              uint32x4_t v162 = vmovl_high_u16((uint16x8_t)v247.val[1]);
              float64x2_t v163 = vcvtq_f64_u64(v143);
              v143.i64[0] = v162.u32[2];
              v143.i64[1] = v162.u32[3];
              float64x2_t v164 = vcvtq_f64_u64(v143);
              v143.i64[0] = v162.u32[0];
              v143.i64[1] = v162.u32[1];
              uint64x2_t v165 = v143;
              uint32x4_t v166 = vmovl_u16(*(uint16x4_t *)v247.val[1].i8);
              v143.i64[0] = v166.u32[2];
              v143.i64[1] = v166.u32[3];
              float64x2_t v167 = vcvtq_f64_u64(v165);
              float64x2_t v168 = vcvtq_f64_u64(v143);
              v143.i64[0] = v166.u32[0];
              v143.i64[1] = v166.u32[1];
              float64x2_t v169 = vmulq_f64(v163, vcvtq_f64_u64(v143));
              float64x2_t v170 = vmulq_f64(v159, v167);
              float64x2_t v171 = vmulq_f64(v158, v164);
              uint32x4_t v172 = vmovl_high_u16((uint16x8_t)v246.val[2]);
              v143.i64[0] = v172.u32[2];
              v143.i64[1] = v172.u32[3];
              float64x2_t v173 = vcvtq_f64_u64(v143);
              v143.i64[0] = v172.u32[0];
              v143.i64[1] = v172.u32[1];
              float64x2_t v174 = vmlaq_f64(v171, v156, v149);
              float64x2_t v175 = vcvtq_f64_u64(v143);
              uint32x4_t v176 = vmovl_u16(*(uint16x4_t *)v246.val[2].i8);
              v143.i64[0] = v176.u32[2];
              v143.i64[1] = v176.u32[3];
              float64x2_t v177 = vcvtq_f64_u64(v143);
              v143.i64[0] = v176.u32[0];
              v143.i64[1] = v176.u32[1];
              float64x2_t v178 = vmlaq_f64(v170, v155, v148);
              float64x2_t v179 = vcvtq_f64_u64(v143);
              uint32x4_t v180 = vmovl_high_u16((uint16x8_t)v247.val[2]);
              v143.i64[0] = v180.u32[2];
              v143.i64[1] = v180.u32[3];
              float64x2_t v181 = vcvtq_f64_u64(v143);
              v143.i64[0] = v180.u32[0];
              v143.i64[1] = v180.u32[1];
              float64x2_t v182 = vmlaq_f64(v169, v151, v144);
              float64x2_t v183 = vcvtq_f64_u64(v143);
              uint32x4_t v184 = vmovl_u16(*(uint16x4_t *)v247.val[2].i8);
              v143.i64[0] = v184.u32[2];
              v143.i64[1] = v184.u32[3];
              float64x2_t v185 = vcvtq_f64_u64(v143);
              v143.i64[0] = v184.u32[0];
              v143.i64[1] = v184.u32[1];
              float64x2_t v186 = vmlaq_f64(vmulq_f64(v161, v168), v152, v147);
              float64x2_t v187 = vcvtq_f64_u64(v143);
              uint32x4_t v188 = vmovl_u16(*(uint16x4_t *)v246.val[3].i8);
              v143.i64[0] = v188.u32[0];
              v143.i64[1] = v188.u32[1];
              float64x2_t v189 = vcvtq_f64_u64(v143);
              v143.i64[0] = v188.u32[2];
              v143.i64[1] = v188.u32[3];
              float64x2_t v190 = vmlaq_f64(v182, v187, v179);
              float64x2_t v191 = vcvtq_f64_u64(v143);
              v246.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v246.val[3]);
              v143.i64[0] = v246.val[0].u32[0];
              v143.i64[1] = v246.val[0].u32[1];
              v246.val[1] = (int16x8_t)vcvtq_f64_u64(v143);
              v143.i64[0] = v246.val[0].u32[2];
              v143.i64[1] = v246.val[0].u32[3];
              v246.val[0] = (int16x8_t)vcvtq_f64_u64(v143);
              v246.val[2] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v247.val[3].i8);
              v143.i64[0] = v246.val[2].u32[0];
              v143.i64[1] = v246.val[2].u32[1];
              float64x2_t v192 = vcvtq_f64_u64(v143);
              v143.i64[0] = v246.val[2].u32[2];
              v143.i64[1] = v246.val[2].u32[3];
              v246.val[2] = (int16x8_t)vcvtq_f64_u64(v143);
              v247.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v247.val[3]);
              v143.i64[0] = v247.val[0].u32[0];
              v143.i64[1] = v247.val[0].u32[1];
              v247.val[1] = (int16x8_t)vcvtq_f64_u64(v143);
              v143.i64[0] = v247.val[0].u32[2];
              v143.i64[1] = v247.val[0].u32[3];
              float64x2_t v193 = vmlaq_f64(vmlaq_f64(v174, v181, v173), vcvtq_f64_u64(v143), (float64x2_t)v246.val[0]);
              double v194 = v193.f64[1];
              float64x2_t v195 = vmlaq_f64(vmlaq_f64(v178, v183, v175), (float64x2_t)v247.val[1], (float64x2_t)v246.val[1]);
              float64x2_t v196 = vmlaq_f64(vmlaq_f64(v186, v185, v177), (float64x2_t)v246.val[2], v191);
              double v197 = v196.f64[1];
              float64x2_t v198 = vmlaq_f64(v190, v192, v189);
              double v199 = v195.f64[1];
              double v138 = v138
                   + v198.f64[0]
                   + v198.f64[1]
                   + v196.f64[0]
                   + v196.f64[1]
                   + v195.f64[0]
                   + v195.f64[1]
                   + v193.f64[0]
                   + v193.f64[1];
              v139 -= 8;
            }
            while (v139);
            uint64_t v200 = (((v134 >> 3) & 0xFFFFFFF) << 6) | 4;
            unint64_t v201 = 4 * (v134 & 0x7FFFFFF8);
            if (v134 != (v134 & 0x7FFFFFF8))
            {
              do
              {
                LOWORD(v194) = *(const __int16 *)((char *)v9 + v200 - 4);
                LOWORD(v197) = *(const __int16 *)((char *)v136 + v200 - 4);
                *(double *)&unint64_t v202 = (double)*(unint64_t *)&v197;
                LOWORD(v199) = *(const __int16 *)((char *)v9 + v200 - 2);
                LOWORD(v192.f64[0]) = *(const __int16 *)((char *)v136 + v200 - 2);
                v192.f64[0] = (double)*(unint64_t *)&v192.f64[0];
                *(double *)&unint64_t v203 = (double)*(unint64_t *)&v199 * v192.f64[0];
                double v204 = *(double *)&v203 + (double)*(unint64_t *)&v194 * *(double *)&v202;
                LOWORD(v202) = *(const __int16 *)((char *)v9 + v200);
                *(double *)&unint64_t v205 = (double)v202;
                LOWORD(v203) = *(const __int16 *)((char *)v136 + v200);
                *(double *)&unint64_t v206 = (double)v203;
                double v207 = v204 + *(double *)&v205 * *(double *)&v206;
                LOWORD(v205) = *(const __int16 *)((char *)v9 + v200 + 2);
                LOWORD(v206) = *(const __int16 *)((char *)v136 + v200 + 2);
                double v197 = (double)v205;
                double v199 = (double)v206;
                double v194 = v207 + v197 * v199;
                double v138 = v138 + v194;
                v201 += 4;
                v200 += 8;
              }
              while (v201 <= v109);
            }
            int v208 = (v109 & 0xFFFFFFFC) + 4;
            uint64_t v209 = v110;
            if (v110 < v16)
            {
              do
              {
                LOWORD(v194) = v9[v209];
                LOWORD(v197) = v136[v209];
                double v194 = (double)*(unint64_t *)&v194;
                double v197 = (double)*(unint64_t *)&v197;
                double v138 = v138 + v194 * v197;
                ++v209;
                ++v208;
              }
              while ((int)v17 > v208);
            }
            float v137 = v138 * v8;
            *(float *)(v10 + 4 * result++) = v137;
            int8x8_t v136 = (const __int16 *)((char *)v136 + v135);
          }
          while (result < v15);
          unsigned int v133 = (unsigned __int16 *)((char *)v133 + 1);
          v10 += 4 * v239;
          uint64_t v9 = (const __int16 *)((char *)v9 + v135);
        }
        while (v133 != (unsigned __int16 *)v15);
      }
      else if (v110 >= v17)
      {
        unint64_t v221 = 0;
        double v222 = v9 + 2;
        uint64_t v223 = 2 * v12;
        do
        {
          unint64_t v224 = v222;
          unint64_t v225 = v221;
          do
          {
            unint64_t v226 = 0;
            double v227 = 0.0;
            uint64_t v228 = v222;
            uint64_t v229 = v224;
            do
            {
              a5.i16[0] = *(v228 - 2);
              a6.i16[0] = *(v229 - 2);
              *(double *)&unint64_t v230 = (double)a6.u64[0];
              a7.n128_u16[0] = *(v228 - 1);
              LOWORD(a8) = *(v229 - 1);
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&unint64_t v231 = (double)a7.n128_u64[0] * a8;
              double v232 = *(double *)&v231 + (double)a5.u64[0] * *(double *)&v230;
              LOWORD(v230) = *v228;
              LOWORD(v231) = *v229;
              *(double *)&unint64_t v233 = (double)v230;
              *(double *)&unint64_t v234 = (double)v231;
              double v235 = v232 + *(double *)&v233 * *(double *)&v234;
              LOWORD(v233) = v228[1];
              *(double *)a6.i64 = (double)v233;
              LOWORD(v234) = v229[1];
              a7.n128_f64[0] = (double)v234;
              *(double *)a5.i64 = v235 + *(double *)a6.i64 * a7.n128_f64[0];
              double v227 = v227 + *(double *)a5.i64;
              v226 += 4;
              v229 += 4;
              v228 += 4;
            }
            while (v226 <= v109);
            float v236 = v227 * v8;
            *(float *)(v10 + 4 * v225++) = v236;
            unint64_t v224 = (_WORD *)((char *)v224 + v223);
          }
          while (v225 < v15);
          ++v221;
          v10 += 4 * v239;
          double v222 = (_WORD *)((char *)v222 + v223);
        }
        while (v221 != v15);
      }
      else
      {
        unint64_t v111 = 0;
        float64x2_t v112 = v9 + 2;
        uint64_t v113 = 2 * v12;
        uint64_t v114 = &v9[v110];
        do
        {
          float64x2_t v115 = (unsigned __int16 *)v114;
          float v116 = v112;
          unint64_t v117 = v111;
          do
          {
            unint64_t v118 = 0;
            double v119 = 0.0;
            uint64_t v120 = v112;
            uint64_t v121 = v116;
            do
            {
              a5.i16[0] = *(v120 - 2);
              a6.i16[0] = *(v121 - 2);
              *(double *)&unint64_t v122 = (double)a6.u64[0];
              a7.n128_u16[0] = *(v120 - 1);
              LOWORD(a8) = *(v121 - 1);
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&unint64_t v123 = (double)a7.n128_u64[0] * a8;
              double v124 = *(double *)&v123 + (double)a5.u64[0] * *(double *)&v122;
              LOWORD(v122) = *v120;
              LOWORD(v123) = *v121;
              *(double *)&unint64_t v125 = (double)v122;
              *(double *)&unint64_t v126 = (double)v123;
              double v127 = v124 + *(double *)&v125 * *(double *)&v126;
              LOWORD(v125) = v120[1];
              *(double *)a6.i64 = (double)v125;
              LOWORD(v126) = v121[1];
              a7.n128_f64[0] = (double)v126;
              *(double *)a5.i64 = v127 + *(double *)a6.i64 * a7.n128_f64[0];
              double v119 = v119 + *(double *)a5.i64;
              v118 += 4;
              v121 += 4;
              v120 += 4;
            }
            while (v118 <= v109);
            unint64_t v128 = (unsigned __int16 *)v114;
            uint64_t result = (unint64_t)v115;
            int v129 = (v109 & 0xFFFFFFFC) + 4;
            do
            {
              unsigned int v130 = *v128++;
              *(double *)a5.i64 = (double)v130;
              unsigned int v131 = *(unsigned __int16 *)result;
              result += 2;
              *(double *)a6.i64 = (double)v131;
              double v119 = v119 + *(double *)a5.i64 * (double)v131;
              ++v129;
            }
            while ((int)v16 > v129);
            float v132 = v119 * v8;
            *(float *)(v10 + 4 * v117++) = v132;
            float v116 = (_WORD *)((char *)v116 + v113);
            float64x2_t v115 = (unsigned __int16 *)((char *)v115 + v113);
          }
          while (v117 < v15);
          ++v111;
          v10 += 4 * v239;
          float64x2_t v112 = (_WORD *)((char *)v112 + v113);
          uint64_t v114 = (const __int16 *)((char *)v114 + v113);
        }
        while (v111 != v15);
      }
    }
    else if ((int)v17 <= 0)
    {
      uint64_t v210 = 0;
      unint64_t v211 = 0;
      double v212 = a4 * 0.0;
      *(float *)&double v212 = v8 * 0.0;
      int32x4_t v213 = vdupq_lane_s32(*(int32x2_t *)&v212, 0);
      uint64_t v214 = (unsigned __int16 *)(v10 + 16);
      unint64_t v215 = 1;
      do
      {
        if (v215 <= v15) {
          unint64_t v216 = v15;
        }
        else {
          unint64_t v216 = v215;
        }
        unint64_t v217 = v211 + 1;
        if (v211 + 1 > v15) {
          unint64_t v218 = v211 + 1;
        }
        else {
          unint64_t v218 = v15;
        }
        unint64_t v219 = v218 - v211;
        if (v219 < 8) {
          goto LABEL_99;
        }
        unint64_t v220 = (v216 + v210) & 0xFFFFFFFFFFFFFFF8;
        v211 += v219 & 0xFFFFFFFFFFFFFFF8;
        uint64_t result = (unint64_t)v214;
        do
        {
          *(int32x4_t *)(result - 16) = v213;
          *(int32x4_t *)uint64_t result = v213;
          result += 32;
          v220 -= 8;
        }
        while (v220);
        if (v219 != (v219 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_99:
          do
            *(_DWORD *)(v10 + 4 * v211++) = LODWORD(v212);
          while (v211 < v15);
        }
        ++v215;
        --v210;
        v214 += 2 * v239 + 2;
        v10 += 4 * v239;
        unint64_t v211 = v217;
      }
      while (v217 != v15);
    }
    else
    {
      uint64_t v103 = 0;
      uint64_t v104 = v9 + 2;
      uint64_t v105 = 2 * v12;
      do
      {
        uint64_t v106 = 0;
        float64x2_t v107 = (unsigned __int16 *)&v9[v12 * v103];
        a5.i16[0] = *v107;
        *(double *)a5.i64 = (double)a5.u64[0];
        uint64_t v108 = v104;
        do
        {
          a6.i16[0] = *(v108 - 2);
          *(double *)a6.i64 = *(double *)a5.i64 * (double)a6.u64[0] + 0.0;
          if (v17 != 1)
          {
            a7.n128_u16[0] = v107[1];
            a7.n128_f64[0] = (double)a7.n128_u64[0];
            LOWORD(a8) = *(v108 - 1);
            a8 = (double)*(unint64_t *)&a8;
            *(double *)a6.i64 = *(double *)a6.i64 + a7.n128_f64[0] * a8;
            if (v16 != 2)
            {
              a7.n128_u16[0] = v107[2];
              a7.n128_f64[0] = (double)a7.n128_u64[0];
              LOWORD(a8) = *v108;
              a8 = (double)*(unint64_t *)&a8;
              *(double *)a6.i64 = *(double *)a6.i64 + a7.n128_f64[0] * a8;
            }
          }
          *(double *)a6.i64 = *(double *)a6.i64 * a4;
          a6.f32[0] = *(double *)a6.i64;
          *(_DWORD *)(v10 + 4 * v106) = a6.i32[0];
          uint64_t v108 = (_WORD *)((char *)v108 + v105);
          ++v106;
        }
        while (v103 + v106 < v15);
        ++v103;
        uint64_t v104 = (_WORD *)((char *)v104 + v105);
        v10 += 4 * v239 + 4;
      }
      while (v103 != v15);
    }
  }
  return result;
}

unsigned char *sub_100275F40(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, double a7, __n128 a8, double a9, double a10, __n128 a11)
{
  double v11 = a4;
  uint64_t v12 = (_WORD *)a1[2];
  uint64_t v13 = *(int64x2_t **)(a2 + 16);
  uint64_t v14 = *(__n128 **)(a3 + 16);
  unint64_t v15 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v17 = (unsigned int *)a1[8];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  if (v14) {
    BOOL v20 = *(_DWORD *)(a3 + 12) < (int)v18;
  }
  else {
    BOOL v20 = 0;
  }
  char v21 = !v20;
  unsigned int v22 = 40 * v19;
  if (!v20) {
    unsigned int v22 = 8 * v19;
  }
  uint64_t result = v153;
  if (v22 >= 0x409) {
    operator new[]();
  }
  unint64_t v24 = v15 >> 1;
  uint64_t v25 = *(void *)(a2 + 80) >> 3;
  if ((v21 & 1) == 0)
  {
    uint64_t v26 = (double *)&v153[8 * (int)v19];
    if ((int)v19 < 1) {
      goto LABEL_36;
    }
    BOOL v27 = v19 >= 6 && v16 == 1;
    if (v27 && (v26 < &v14->n128_f64[v19] ? (BOOL v28 = v14 >= (__n128 *)&v153[32 * v19 + 8 * (int)v19]) : (BOOL v28 = 1), v28))
    {
      uint64_t v29 = v19 & 0x7FFFFFFC;
      uint64_t v30 = v14 + 1;
      uint64_t v31 = (double *)&v154[8 * (int)v19 + 56];
      uint64_t v32 = v19 & 0xFFFFFFFC;
      do
      {
        __n128 v33 = v30[-1];
        a8 = *v30;
        __n128 v34 = v33;
        a6 = v33;
        __n128 v35 = v33;
        __n128 v36 = *v30;
        __n128 v37 = *v30;
        a11 = *v30;
        BOOL v38 = v31 - 8;
        vst4q_f64(v38, *(float64x2x4_t *)(&a6 - 2));
        vst4q_f64(v31, *(float64x2x4_t *)a8.n128_u64);
        v30 += 2;
        v31 += 16;
        v32 -= 4;
      }
      while (v32);
      if (v29 == v19)
      {
LABEL_36:
        uint64_t v16 = 4 * (v16 != 0);
        uint64_t v14 = (__n128 *)&v153[8 * (int)v19];
        if ((int)v18 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v39 = &v14->n128_u64[v16 * v29];
    uint64_t v40 = v19 - v29;
    unsigned int v41 = (unint64_t *)&v153[32 * v29 + 16 + 8 * (int)v19];
    do
    {
      unint64_t v42 = *v39;
      *unsigned int v41 = *v39;
      v41[1] = v42;
      *(v41 - 2) = v42;
      *(v41 - 1) = v42;
      v39 += v16;
      v41 += 4;
      --v40;
    }
    while (v40);
    goto LABEL_36;
  }
  if (!v14)
  {
    if ((int)v18 < 1) {
      return result;
    }
    uint64_t v95 = (int)v18 - 4;
    if ((int)v19 > 0)
    {
      uint64_t v96 = 0;
      uint64_t v97 = 2 * v24;
      float64x2_t v98 = v12 + 2;
      float64x2_t v99 = v12;
      while (v19 != 1)
      {
        uint64_t v101 = v19 & 0xFFFFFFFE;
        float v102 = (double *)v154;
        uint64_t v103 = v99;
        do
        {
          LOWORD(a4) = *v103;
          a4 = (double)*(unint64_t *)&a4;
          LOWORD(a5) = v103[v24];
          a5 = (double)*(unint64_t *)&a5;
          *(v102 - 1) = a4;
          *float v102 = a5;
          v103 += 2 * v24;
          v102 += 2;
          v101 -= 2;
        }
        while (v101);
        uint64_t v100 = v19 & 0xFFFFFFFE;
        if (v100 != v19) {
          goto LABEL_80;
        }
LABEL_82:
        float64x2_t v107 = v98;
        uint64_t v108 = v96;
        if (v96 <= v95)
        {
          do
          {
            double v109 = 0.0;
            uint64_t v110 = v107;
            uint64_t v111 = v19;
            float64x2_t v112 = (double *)v153;
            double v113 = 0.0;
            double v114 = 0.0;
            double v115 = 0.0;
            do
            {
              double v116 = *v112++;
              LOWORD(a9) = *(v110 - 2);
              *(double *)&unint64_t v117 = (double)*(unint64_t *)&a9;
              double v115 = v115 + v116 * *(double *)&v117;
              LOWORD(v117) = *(v110 - 1);
              *(double *)&unint64_t v118 = (double)v117;
              double v114 = v114 + v116 * *(double *)&v118;
              LOWORD(v118) = *v110;
              *(double *)&unint64_t v119 = (double)v118;
              double v113 = v113 + v116 * *(double *)&v119;
              LOWORD(v119) = v110[1];
              a9 = (double)v119;
              double v109 = v109 + v116 * a9;
              uint64_t v110 = (_WORD *)((char *)v110 + v97);
              --v111;
            }
            while (v111);
            uint64_t v120 = &v13->i64[v108];
            a6.n128_f64[0] = v114 * v11;
            *(double *)uint64_t v120 = v115 * v11;
            v120[1] = a6.n128_u64[0];
            a5 = v113 * v11;
            a4 = v109 * v11;
            *((double *)v120 + 2) = a5;
            *((double *)v120 + 3) = a4;
            v108 += 4;
            v107 += 4;
          }
          while ((int)v95 >= (int)v108);
          uint64_t v108 = v108;
          if ((int)v108 >= (int)v18) {
            goto LABEL_74;
          }
LABEL_89:
          uint64_t v121 = &v12[v108];
          do
          {
            double v122 = 0.0;
            unint64_t v123 = v121;
            uint64_t v124 = v19;
            unint64_t v125 = (double *)v153;
            do
            {
              double v126 = *v125++;
              a5 = v126;
              a6.n128_u16[0] = *v123;
              a6.n128_f64[0] = (double)a6.n128_u64[0];
              double v122 = v122 + v126 * a6.n128_f64[0];
              unint64_t v123 = (unsigned __int16 *)((char *)v123 + v97);
              --v124;
            }
            while (v124);
            a4 = v122 * v11;
            *(double *)&v13->i64[v108++] = a4;
            ++v121;
          }
          while ((int)v18 > (int)v108);
          goto LABEL_74;
        }
        uint64_t v108 = v96;
        if ((int)v96 < (int)v18) {
          goto LABEL_89;
        }
LABEL_74:
        ++v96;
        uint64_t v13 = (int64x2_t *)((char *)v13 + 8 * v25);
        ++v99;
        ++v98;
        if (v96 == v18) {
          return result;
        }
      }
      uint64_t v100 = 0;
LABEL_80:
      uint64_t v104 = v97 * v100;
      uint64_t v105 = (double *)&v153[8 * v100];
      uint64_t v106 = v19 - v100;
      do
      {
        LOWORD(a4) = *(_WORD *)((char *)v99 + v104);
        a4 = (double)*(unint64_t *)&a4;
        *v105++ = a4;
        v104 += v97;
        --v106;
      }
      while (v106);
      goto LABEL_82;
    }
    uint64_t v127 = 0;
    double v128 = a4 * 0.0;
    int64x2_t v129 = vdupq_lane_s64(COERCE__INT64(v11 * 0.0), 0);
    int v130 = v18 - 3;
    unsigned int v131 = v13 + 4;
    uint64_t v132 = 8 * v25;
    int v133 = 4;
    for (int i = -1; ; --i)
    {
      if (v133 <= v130) {
        int v135 = v18 - 3;
      }
      else {
        int v135 = v133;
      }
      int v136 = v127 + 4;
      if ((int)v127 + 4 <= v130) {
        int v136 = v18 - 3;
      }
      if (v127 <= v95)
      {
        unsigned int v138 = v136 + ~v127;
        uint64_t v139 = v127;
        if (v138 < 0xC) {
          goto LABEL_107;
        }
        uint64_t v140 = (((v135 + i) >> 2) + 1) & 0x7FFFFFFC;
        uint64_t v141 = (v138 >> 2) + 1;
        uint64_t v139 = v127 + 4 * (v141 & 0x7FFFFFFC);
        int v137 = v127;
        uint32x4_t v142 = v131;
        do
        {
          v142[-4] = v129;
          v142[-3] = v129;
          v142[-2] = v129;
          v142[-1] = v129;
          *uint32x4_t v142 = v129;
          v142[1] = v129;
          v142[2] = v129;
          v142[3] = v129;
          v142 += 8;
          v137 += 16;
          v140 -= 4;
        }
        while (v140);
        if ((v141 & 0x7FFFFFFC) != v141)
        {
LABEL_107:
          uint64x2_t v143 = (double *)&v13->i64[v139];
          int v137 = v139;
          do
          {
            *uint64x2_t v143 = v128;
            v143[1] = v128;
            v143[2] = v128;
            v143[3] = v128;
            v137 += 4;
            v143 += 4;
          }
          while ((int)v95 >= v137);
        }
      }
      else
      {
        int v137 = v127;
      }
      if (v137 >= (int)v18) {
        goto LABEL_95;
      }
      uint64_t v144 = v137;
      uint64_t v145 = (v18 + ~v137);
      if (v145 >= 3)
      {
        uint64_t v147 = v145 + 1;
        uint64_t v148 = (v145 + 1) & 0x1FFFFFFFCLL;
        uint64_t v146 = v148 + v144;
        uint64_t v149 = 8 * v144;
        uint64_t v150 = v148;
        do
        {
          float64x2_t v151 = (int64x2_t *)((char *)v13 + v149);
          *float64x2_t v151 = v129;
          v151[1] = v129;
          v149 += 32;
          v150 -= 4;
        }
        while (v150);
        if (v147 == v148) {
          goto LABEL_95;
        }
      }
      else
      {
        uint64_t v146 = v144;
      }
      uint64_t v152 = v146;
      do
      {
        *(double *)&v13->i64[v152++] = v128;
        LODWORD(v146) = v146 + 1;
      }
      while ((int)v18 > (int)v146);
LABEL_95:
      ++v127;
      unsigned int v131 = (int64x2_t *)((char *)v131 + v132 + 8);
      ++v133;
      uint64_t v13 = (int64x2_t *)((char *)v13 + v132);
      if (v127 == v18) {
        return result;
      }
    }
  }
  uint64_t v26 = 0;
  if ((int)v18 >= 1)
  {
LABEL_37:
    uint64_t v43 = 0;
    uint64_t v44 = (int)v18 - 4;
    uint64_t v45 = 8 * v16;
    uint64_t v46 = 2 * v24;
    int64x2_t v47 = vdupq_lane_s64(COERCE__INT64(v11 * 0.0), 0);
    float32x4_t v48 = v12 + 2;
    uint64_t v49 = 8 * v25;
    int8x8_t v50 = (double *)v14;
    float64x2_t v51 = v12;
    do
    {
      if (v26)
      {
        uint64_t v52 = v19;
        int8x8_t v53 = v51;
        float32x4_t v54 = v26;
        int v55 = v153;
        if ((int)v19 >= 1)
        {
          do
          {
            a6.n128_u16[0] = *v53;
            a6.n128_f64[0] = (double)a6.n128_u64[0] - *v54;
            *v55++ = a6.n128_u64[0];
            float32x4_t v54 = (double *)((char *)v54 + v45);
            int8x8_t v53 = (unsigned __int16 *)((char *)v53 + v46);
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v19 >= 1)
      {
        uint64_t v56 = v19;
        uint64_t v57 = v51;
        int8x8_t v58 = v50;
        int8x8_t v59 = v153;
        do
        {
          a6.n128_u16[0] = *v57;
          a6.n128_f64[0] = (double)a6.n128_u64[0] - *v58;
          *v59++ = a6.n128_u64[0];
          int8x8_t v58 = (double *)((char *)v58 + v45);
          uint64_t v57 = (unsigned __int16 *)((char *)v57 + v46);
          --v56;
        }
        while (v56);
      }
      LODWORD(v60) = v43;
      double v61 = v48;
      uint64_t v62 = v43;
      if (v43 <= v44)
      {
        do
        {
          a6.n128_f64[0] = v11 * 0.0;
          double v72 = v11 * 0.0;
          a8.n128_f64[0] = v11 * 0.0;
          double v73 = v11 * 0.0;
          if ((int)v19 >= 1)
          {
            uint64_t v74 = &v14->n128_f64[v62];
            if (v26) {
              uint64_t v74 = v26;
            }
            int8x8_t v75 = v74 + 2;
            double v76 = 0.0;
            float32x4_t v77 = v61;
            uint64_t v78 = v19;
            float32x4_t v79 = (double *)v153;
            double v80 = 0.0;
            double v81 = 0.0;
            double v82 = 0.0;
            do
            {
              double v83 = *v79++;
              a11.n128_u16[0] = *(v77 - 2);
              *(double *)&unint64_t v84 = (double)a11.n128_u64[0] - *(v75 - 2);
              double v82 = v82 + v83 * *(double *)&v84;
              LOWORD(v84) = *(v77 - 1);
              *(double *)&unint64_t v85 = (double)v84 - *(v75 - 1);
              double v81 = v81 + v83 * *(double *)&v85;
              LOWORD(v85) = *v77;
              *(double *)&unint64_t v86 = (double)v85 - *v75;
              double v80 = v80 + v83 * *(double *)&v86;
              LOWORD(v86) = v77[1];
              a11.n128_f64[0] = (double)v86 - v75[1];
              double v76 = v76 + v83 * a11.n128_f64[0];
              float32x4_t v77 = (_WORD *)((char *)v77 + v46);
              int8x8_t v75 = (double *)((char *)v75 + v45);
              --v78;
            }
            while (v78);
            double v73 = v82 * v11;
            a8.n128_f64[0] = v81 * v11;
            double v72 = v80 * v11;
            a6.n128_f64[0] = v76 * v11;
          }
          uint64_t v71 = &v13->i64[v62];
          *(double *)uint64_t v71 = v73;
          v71[1] = a8.n128_u64[0];
          *((double *)v71 + 2) = v72;
          v71[3] = a6.n128_u64[0];
          uint64_t v60 = v62 + 4;
          v61 += 4;
          uint64_t v62 = v60;
        }
        while ((int)v44 >= (int)v60);
      }
      if ((int)v60 >= (int)v18) {
        goto LABEL_38;
      }
      uint64_t v63 = v60;
      if ((int)v19 >= 1)
      {
        float v64 = &v12[v60];
        do
        {
          double v65 = &v14->n128_f64[v63];
          if (v26) {
            double v65 = v26;
          }
          double v66 = 0.0;
          uint64_t v67 = v64;
          uint64_t v68 = v19;
          uint64_t v69 = (double *)v153;
          do
          {
            double v70 = *v69++;
            a8.n128_u16[0] = *v67;
            a8.n128_f64[0] = (double)a8.n128_u64[0] - *v65;
            double v66 = v66 + v70 * a8.n128_f64[0];
            double v65 = (double *)((char *)v65 + v45);
            uint64_t v67 = (unsigned __int16 *)((char *)v67 + v46);
            --v68;
          }
          while (v68);
          a6.n128_f64[0] = v66 * v11;
          v13->i64[v63++] = a6.n128_u64[0];
          ++v64;
        }
        while ((int)v18 > (int)v63);
        goto LABEL_38;
      }
      uint64_t v87 = (v18 + ~v60);
      if (v87 >= 3)
      {
        uint64_t v89 = v87 + 1;
        uint64_t v90 = (v87 + 1) & 0x1FFFFFFFCLL;
        uint64_t v88 = v90 + v63;
        uint64_t v91 = 8 * v63;
        uint64_t v92 = v90;
        do
        {
          float32x4_t v93 = (int64x2_t *)((char *)v13 + v91);
          *float32x4_t v93 = v47;
          v93[1] = v47;
          v91 += 32;
          v92 -= 4;
        }
        while (v92);
        if (v89 == v90) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v88 = v60;
      }
      uint64_t v94 = v88;
      do
      {
        *(double *)&v13->i64[v94++] = v11 * 0.0;
        LODWORD(v88) = v88 + 1;
      }
      while ((int)v18 > (int)v88);
LABEL_38:
      ++v43;
      uint64_t v13 = (int64x2_t *)((char *)v13 + v49);
      ++v51;
      ++v50;
      ++v48;
    }
    while (v43 != v18);
  }
  return result;
}

void sub_100276714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10 != v10)
  {
    if (a10) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100276744(unint64_t result, uint64_t a2, uint64_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, double a8, float64x2_t a9)
{
  double v9 = a4.f64[0];
  uint64_t v10 = *(uint16x8_t **)(result + 16);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(result + 80) >> 1;
  uint64_t v219 = *(void *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *(void *)(a3 + 80) >> 3;
  }
  unint64_t v15 = *(unsigned int **)(result + 64);
  unint64_t v16 = *v15;
  uint64_t v17 = (int)v15[1];
  uint64_t v18 = v15[1];
  if (v12)
  {
    int v19 = *(_DWORD *)(a3 + 12);
    uint64_t result = (unint64_t)v220;
    if ((unint64_t)(8 * v17) >= 0x409) {
      operator new[]();
    }
    if ((int)v16 >= 1)
    {
      uint64_t v20 = 0;
      uint64_t v217 = v18 & 0xFFFFFFF8;
      uint64_t v218 = 8 * v14;
      uint64_t v21 = 2 * v13;
      unsigned int v22 = &v10->i16[2];
      uint64_t v23 = *(float64x2_t **)(a3 + 16);
      do
      {
        if (v19 >= (int)v18)
        {
          if ((int)v18 >= 1)
          {
            uint64_t v26 = 0;
            if (v18 < 8) {
              goto LABEL_98;
            }
            if ((unint64_t)v220 - v12 - v218 * v20 < 0x40) {
              goto LABEL_98;
            }
            uint64_t v27 = v18 & 0xFFFFFFF8;
            BOOL v28 = (float64x2_t *)v220;
            uint64_t v29 = v23;
            uint64_t v30 = v10;
            do
            {
              uint16x8_t v31 = *v30++;
              uint32x4_t v32 = vmovl_high_u16(v31);
              v33.i64[0] = v32.u32[2];
              v33.i64[1] = v32.u32[3];
              float64x2_t v34 = vcvtq_f64_u64(v33);
              v33.i64[0] = v32.u32[0];
              v33.i64[1] = v32.u32[1];
              float64x2_t v35 = vcvtq_f64_u64(v33);
              uint32x4_t v36 = vmovl_u16(*(uint16x4_t *)v31.i8);
              v33.i64[0] = v36.u32[2];
              v33.i64[1] = v36.u32[3];
              float64x2_t v37 = vcvtq_f64_u64(v33);
              v33.i64[0] = v36.u32[0];
              v33.i64[1] = v36.u32[1];
              a9 = v29[2];
              float64x2_t v38 = v29[3];
              float64x2_t v40 = *v29;
              float64x2_t v39 = v29[1];
              v29 += 4;
              a4 = vsubq_f64(vcvtq_f64_u64(v33), v40);
              a6 = vsubq_f64(v34, v38);
              v28[2] = vsubq_f64(v35, a9);
              v28[3] = a6;
              a5 = vsubq_f64(v37, v39);
              float64x2_t *v28 = a4;
              v28[1] = a5;
              v28 += 4;
              v27 -= 8;
            }
            while (v27);
            uint64_t v26 = v18 & 0xFFFFFFF8;
            if (v217 != v18)
            {
LABEL_98:
              do
              {
                LOWORD(a4.f64[0]) = v10->i16[v26];
                a5.f64[0] = v23->f64[v26];
                a4.f64[0] = (double)*(unint64_t *)&a4.f64[0] - a5.f64[0];
                v220[v26++] = *(void *)&a4.f64[0];
              }
              while (v18 != v26);
            }
          }
          goto LABEL_26;
        }
        if ((int)v17 >= 1)
        {
          uint64_t v24 = *(uint64_t *)(v12 + 8 * v14 * v20);
          if (v17 >= 8)
          {
            unint64_t v41 = 0;
            a5 = (float64x2_t)vdupq_lane_s64(v24, 0);
            unint64_t v42 = (float64x2_t *)v220;
            do
            {
              uint16x8_t v43 = v10[v41 / 0x10];
              uint32x4_t v44 = vmovl_high_u16(v43);
              v45.i64[0] = v44.u32[2];
              v45.i64[1] = v44.u32[3];
              float64x2_t v46 = vcvtq_f64_u64(v45);
              v45.i64[0] = v44.u32[0];
              v45.i64[1] = v44.u32[1];
              float64x2_t v47 = vcvtq_f64_u64(v45);
              uint32x4_t v48 = vmovl_u16(*(uint16x4_t *)v43.i8);
              v45.i64[0] = v48.u32[2];
              v45.i64[1] = v48.u32[3];
              float64x2_t v49 = vcvtq_f64_u64(v45);
              v45.i64[0] = v48.u32[0];
              v45.i64[1] = v48.u32[1];
              a6 = vsubq_f64(vcvtq_f64_u64(v45), a5);
              a9 = vsubq_f64(v49, a5);
              v42[2] = vsubq_f64(v47, a5);
              v42[3] = vsubq_f64(v46, a5);
              *unint64_t v42 = a6;
              v42[1] = a9;
              v42 += 4;
              v41 += 16;
            }
            while (((2 * v18) & 0x1FFFFFFF0) != v41);
            uint64_t v25 = v18 & 0xFFFFFFF8;
            if (v217 == v18) {
              goto LABEL_26;
            }
          }
          else
          {
            uint64_t v25 = 0;
          }
          do
          {
            LOWORD(a5.f64[0]) = v10->i16[v25];
            a5.f64[0] = (double)*(unint64_t *)&a5.f64[0] - *(double *)&v24;
            v220[v25++] = *(void *)&a5.f64[0];
          }
          while (v18 != v25);
        }
LABEL_26:
        int8x8_t v50 = v10;
        float64x2_t v51 = v22;
        uint64_t v52 = v20;
        do
        {
          int8x8_t v53 = (float64x2_t *)(v12 + 8 * v14 * v52);
          if (v19 < (int)v17)
          {
            double v223 = v53->f64[0];
            double v224 = v223;
            *(double *)double v222 = v223;
            *(double *)&v222[1] = v223;
            int8x8_t v53 = (float64x2_t *)v222;
          }
          if ((int)v18 >= 4)
          {
            uint64_t v56 = 0;
            double v55 = 0.0;
            uint64_t v57 = v51;
            int8x8_t v58 = (double *)&v221;
            do
            {
              LOWORD(a5.f64[0]) = *(v57 - 2);
              LOWORD(a9.f64[0]) = *(v57 - 1);
              *(double *)&unint64_t v59 = *(v58 - 1) * ((double)*(unint64_t *)&a9.f64[0] - v53->f64[1]);
              double v60 = *(double *)&v59 + *(v58 - 2) * ((double)*(unint64_t *)&a5.f64[0] - v53->f64[0]);
              LOWORD(v59) = *v57;
              *(double *)&unint64_t v61 = (double)v59 - v53[1].f64[0];
              double v62 = *v58;
              a9.f64[0] = v58[1];
              v58 += 4;
              double v63 = v60 + v62 * *(double *)&v61;
              LOWORD(v61) = v57[1];
              a6.f64[0] = (double)v61 - v53[1].f64[1];
              a5.f64[0] = v63 + a9.f64[0] * a6.f64[0];
              v56 += 4;
              double v55 = v55 + a5.f64[0];
              v53 += 2 * (v19 == v17);
              v57 += 4;
            }
            while (v56 <= (int)v18 - 4);
            int v54 = ((v18 - 4) & 0xFFFFFFFC) + 4;
            if (v54 >= (int)v17) {
              goto LABEL_27;
            }
          }
          else
          {
            int v54 = 0;
            double v55 = 0.0;
            if ((int)v17 <= 0) {
              goto LABEL_27;
            }
          }
          uint64_t v64 = v54;
          uint64_t v65 = (v18 + ~v54);
          if (v65 < 7)
          {
            uint64_t v66 = v64;
            uint64_t v67 = (double *)v53;
            do
            {
LABEL_41:
              *(void *)&a5.f64[0] = v220[v66];
              LOWORD(a6.f64[0]) = v50->i16[v66];
              double v85 = *v67++;
              a6.f64[0] = (double)*(unint64_t *)&a6.f64[0] - v85;
              double v55 = v55 + a5.f64[0] * a6.f64[0];
              ++v66;
            }
            while ((int)v17 > (int)v66);
            goto LABEL_27;
          }
          uint64_t v68 = v65 + 1;
          uint64_t v69 = (v65 + 1) & 0x1FFFFFFF8;
          uint64_t v67 = &v53->f64[v69];
          uint64_t v66 = v69 + v64;
          double v70 = (float64x2_t *)&v220[v64];
          uint64_t v71 = (uint16x8_t *)((char *)v50 + 2 * v64);
          uint64_t v72 = v69;
          do
          {
            uint16x8_t v73 = *v71++;
            uint32x4_t v74 = vmovl_high_u16(v73);
            v75.i64[0] = v74.u32[2];
            v75.i64[1] = v74.u32[3];
            float64x2_t v76 = vcvtq_f64_u64(v75);
            v75.i64[0] = v74.u32[0];
            v75.i64[1] = v74.u32[1];
            float64x2_t v77 = vcvtq_f64_u64(v75);
            a9 = (float64x2_t)vmovl_u16(*(uint16x4_t *)v73.i8);
            v75.i64[0] = LODWORD(a9.f64[1]);
            v75.i64[1] = HIDWORD(a9.f64[1]);
            float64x2_t v78 = vcvtq_f64_u64(v75);
            v75.i64[0] = LODWORD(a9.f64[0]);
            v75.i64[1] = HIDWORD(a9.f64[0]);
            float64x2_t v80 = v53[2];
            float64x2_t v79 = v53[3];
            float64x2_t v82 = *v53;
            float64x2_t v81 = v53[1];
            v53 += 4;
            float64x2_t v83 = vmulq_f64(v70[3], vsubq_f64(v76, v79));
            float64x2_t v84 = vmulq_f64(v70[2], vsubq_f64(v77, v80));
            a6 = vmulq_f64(v70[1], vsubq_f64(v78, v81));
            a5 = vmulq_f64(*v70, vsubq_f64(vcvtq_f64_u64(v75), v82));
            a9.f64[0] = a5.f64[1];
            double v55 = v55
                + a5.f64[0]
                + a5.f64[1]
                + a6.f64[0]
                + a6.f64[1]
                + v84.f64[0]
                + v84.f64[1]
                + v83.f64[0]
                + v83.f64[1];
            v70 += 4;
            v72 -= 8;
          }
          while (v72);
          if (v68 != v69) {
            goto LABEL_41;
          }
LABEL_27:
          a4.f64[0] = v55 * v9;
          *(float64_t *)(v11 + 8 * v52++) = a4.f64[0];
          float64x2_t v51 = (__int16 *)((char *)v51 + v21);
          int8x8_t v50 = (uint16x8_t *)((char *)v50 + v21);
        }
        while (v52 != v16);
        v11 += 8 * v219;
        ++v20;
        uint64_t v10 = (uint16x8_t *)((char *)v10 + v21);
        uint64_t v23 = (float64x2_t *)((char *)v23 + v218);
        unsigned int v22 = (__int16 *)((char *)v22 + v21);
      }
      while (v20 != v16);
    }
  }
  else if ((int)v16 >= 1)
  {
    if ((int)v17 >= 4)
    {
      unint64_t v92 = (v18 - 4);
      uint64_t v93 = (v92 & 0xFFFFFFFC) + 4;
      if (v92 >= 0x1C)
      {
        double v115 = 0;
        unint64_t v116 = (v92 >> 2) + 1;
        uint64_t v117 = 2 * v13;
        do
        {
          unint64_t v118 = (const __int16 *)v10;
          uint64_t result = (unint64_t)v115;
          do
          {
            double v119 = 0.0;
            unint64_t v120 = v116 & 0x7FFFFFF8;
            uint64_t v121 = v118;
            double v122 = (const __int16 *)v10;
            do
            {
              int16x8x4_t v225 = vld4q_s16(v122);
              v122 += 32;
              uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v225.val[0].i8);
              int16x8x4_t v226 = vld4q_s16(v121);
              v121 += 32;
              v124.i64[0] = v123.u32[0];
              v124.i64[1] = v123.u32[1];
              float64x2_t v125 = vcvtq_f64_u64(v124);
              v124.i64[0] = v123.u32[2];
              v124.i64[1] = v123.u32[3];
              uint64x2_t v126 = v124;
              uint32x4_t v127 = vmovl_high_u16((uint16x8_t)v225.val[0]);
              v124.i64[0] = v127.u32[0];
              v124.i64[1] = v127.u32[1];
              float64x2_t v128 = vcvtq_f64_u64(v126);
              float64x2_t v129 = vcvtq_f64_u64(v124);
              v124.i64[0] = v127.u32[2];
              v124.i64[1] = v127.u32[3];
              float64x2_t v130 = vcvtq_f64_u64(v124);
              uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v226.val[0].i8);
              v124.i64[0] = v131.u32[0];
              v124.i64[1] = v131.u32[1];
              float64x2_t v132 = vcvtq_f64_u64(v124);
              v124.i64[0] = v131.u32[2];
              v124.i64[1] = v131.u32[3];
              float64x2_t v133 = vcvtq_f64_u64(v124);
              uint32x4_t v134 = vmovl_high_u16((uint16x8_t)v226.val[0]);
              v124.i64[0] = v134.u32[0];
              v124.i64[1] = v134.u32[1];
              uint64x2_t v135 = v124;
              v124.i64[0] = v134.u32[2];
              v124.i64[1] = v134.u32[3];
              float64x2_t v136 = vcvtq_f64_u64(v135);
              float64x2_t v137 = vcvtq_f64_u64(v124);
              uint32x4_t v138 = vmovl_high_u16((uint16x8_t)v225.val[1]);
              v124.i64[0] = v138.u32[2];
              v124.i64[1] = v138.u32[3];
              float64x2_t v139 = vcvtq_f64_u64(v124);
              v124.i64[0] = v138.u32[0];
              v124.i64[1] = v138.u32[1];
              float64x2_t v140 = vcvtq_f64_u64(v124);
              uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v225.val[1].i8);
              v124.i64[0] = v141.u32[2];
              v124.i64[1] = v141.u32[3];
              float64x2_t v142 = vcvtq_f64_u64(v124);
              v124.i64[0] = v141.u32[0];
              v124.i64[1] = v141.u32[1];
              uint32x4_t v143 = vmovl_high_u16((uint16x8_t)v226.val[1]);
              float64x2_t v144 = vcvtq_f64_u64(v124);
              v124.i64[0] = v143.u32[2];
              v124.i64[1] = v143.u32[3];
              float64x2_t v145 = vcvtq_f64_u64(v124);
              v124.i64[0] = v143.u32[0];
              v124.i64[1] = v143.u32[1];
              uint64x2_t v146 = v124;
              uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v226.val[1].i8);
              v124.i64[0] = v147.u32[2];
              v124.i64[1] = v147.u32[3];
              float64x2_t v148 = vcvtq_f64_u64(v146);
              float64x2_t v149 = vcvtq_f64_u64(v124);
              v124.i64[0] = v147.u32[0];
              v124.i64[1] = v147.u32[1];
              float64x2_t v150 = vmulq_f64(v144, vcvtq_f64_u64(v124));
              float64x2_t v151 = vmulq_f64(v140, v148);
              float64x2_t v152 = vmulq_f64(v139, v145);
              uint32x4_t v153 = vmovl_high_u16((uint16x8_t)v225.val[2]);
              v124.i64[0] = v153.u32[2];
              v124.i64[1] = v153.u32[3];
              float64x2_t v154 = vcvtq_f64_u64(v124);
              v124.i64[0] = v153.u32[0];
              v124.i64[1] = v153.u32[1];
              float64x2_t v155 = vmlaq_f64(v152, v137, v130);
              float64x2_t v156 = vcvtq_f64_u64(v124);
              uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v225.val[2].i8);
              v124.i64[0] = v157.u32[2];
              v124.i64[1] = v157.u32[3];
              float64x2_t v158 = vcvtq_f64_u64(v124);
              v124.i64[0] = v157.u32[0];
              v124.i64[1] = v157.u32[1];
              float64x2_t v159 = vmlaq_f64(v151, v136, v129);
              float64x2_t v160 = vcvtq_f64_u64(v124);
              uint32x4_t v161 = vmovl_high_u16((uint16x8_t)v226.val[2]);
              v124.i64[0] = v161.u32[2];
              v124.i64[1] = v161.u32[3];
              float64x2_t v162 = vcvtq_f64_u64(v124);
              v124.i64[0] = v161.u32[0];
              v124.i64[1] = v161.u32[1];
              float64x2_t v163 = vmlaq_f64(v150, v132, v125);
              float64x2_t v164 = vcvtq_f64_u64(v124);
              uint32x4_t v165 = vmovl_u16(*(uint16x4_t *)v226.val[2].i8);
              v124.i64[0] = v165.u32[2];
              v124.i64[1] = v165.u32[3];
              float64x2_t v166 = vcvtq_f64_u64(v124);
              v124.i64[0] = v165.u32[0];
              v124.i64[1] = v165.u32[1];
              float64x2_t v167 = vmlaq_f64(vmulq_f64(v142, v149), v133, v128);
              float64x2_t v168 = vcvtq_f64_u64(v124);
              uint32x4_t v169 = vmovl_u16(*(uint16x4_t *)v225.val[3].i8);
              v124.i64[0] = v169.u32[0];
              v124.i64[1] = v169.u32[1];
              float64x2_t v170 = vcvtq_f64_u64(v124);
              v124.i64[0] = v169.u32[2];
              v124.i64[1] = v169.u32[3];
              float64x2_t v171 = vmlaq_f64(v163, v168, v160);
              float64x2_t v172 = vcvtq_f64_u64(v124);
              v225.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v225.val[3]);
              v124.i64[0] = v225.val[0].u32[0];
              v124.i64[1] = v225.val[0].u32[1];
              v225.val[1] = (int16x8_t)vcvtq_f64_u64(v124);
              v124.i64[0] = v225.val[0].u32[2];
              v124.i64[1] = v225.val[0].u32[3];
              v225.val[0] = (int16x8_t)vcvtq_f64_u64(v124);
              v225.val[2] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v226.val[3].i8);
              v124.i64[0] = v225.val[2].u32[0];
              v124.i64[1] = v225.val[2].u32[1];
              float64x2_t v173 = vcvtq_f64_u64(v124);
              v124.i64[0] = v225.val[2].u32[2];
              v124.i64[1] = v225.val[2].u32[3];
              v225.val[2] = (int16x8_t)vcvtq_f64_u64(v124);
              v226.val[0] = (int16x8_t)vmovl_high_u16((uint16x8_t)v226.val[3]);
              v124.i64[0] = v226.val[0].u32[0];
              v124.i64[1] = v226.val[0].u32[1];
              v226.val[1] = (int16x8_t)vcvtq_f64_u64(v124);
              v124.i64[0] = v226.val[0].u32[2];
              v124.i64[1] = v226.val[0].u32[3];
              float64x2_t v174 = vmlaq_f64(vmlaq_f64(v155, v162, v154), vcvtq_f64_u64(v124), (float64x2_t)v225.val[0]);
              double v175 = v174.f64[1];
              float64x2_t v176 = vmlaq_f64(vmlaq_f64(v159, v164, v156), (float64x2_t)v226.val[1], (float64x2_t)v225.val[1]);
              float64x2_t v177 = vmlaq_f64(vmlaq_f64(v167, v166, v158), (float64x2_t)v225.val[2], v172);
              double v178 = v177.f64[1];
              float64x2_t v179 = vmlaq_f64(v171, v173, v170);
              double v180 = v176.f64[1];
              double v119 = v119
                   + v179.f64[0]
                   + v179.f64[1]
                   + v177.f64[0]
                   + v177.f64[1]
                   + v176.f64[0]
                   + v176.f64[1]
                   + v174.f64[0]
                   + v174.f64[1];
              v120 -= 8;
            }
            while (v120);
            uint64_t v181 = (((v116 >> 3) & 0xFFFFFFF) << 6) | 4;
            unint64_t v182 = 4 * (v116 & 0x7FFFFFF8);
            if (v116 != (v116 & 0x7FFFFFF8))
            {
              do
              {
                LOWORD(v175) = *(__int16 *)((char *)&v10->i16[-2] + v181);
                LOWORD(v178) = *(const __int16 *)((char *)v118 + v181 - 4);
                *(double *)&unint64_t v183 = (double)*(unint64_t *)&v178;
                LOWORD(v180) = *(__int16 *)((char *)&v10->i16[-1] + v181);
                LOWORD(v173.f64[0]) = *(const __int16 *)((char *)v118 + v181 - 2);
                v173.f64[0] = (double)*(unint64_t *)&v173.f64[0];
                *(double *)&unint64_t v184 = (double)*(unint64_t *)&v180 * v173.f64[0];
                double v185 = *(double *)&v184 + (double)*(unint64_t *)&v175 * *(double *)&v183;
                LOWORD(v183) = *(__int16 *)((char *)v10->i16 + v181);
                *(double *)&unint64_t v186 = (double)v183;
                LOWORD(v184) = *(const __int16 *)((char *)v118 + v181);
                *(double *)&unint64_t v187 = (double)v184;
                double v188 = v185 + *(double *)&v186 * *(double *)&v187;
                LOWORD(v186) = *(__int16 *)((char *)&v10->i16[1] + v181);
                LOWORD(v187) = *(const __int16 *)((char *)v118 + v181 + 2);
                double v178 = (double)v186;
                double v180 = (double)v187;
                double v175 = v188 + v178 * v180;
                double v119 = v119 + v175;
                v182 += 4;
                v181 += 8;
              }
              while (v182 <= v92);
            }
            int v189 = (v92 & 0xFFFFFFFC) + 4;
            uint64_t v190 = v93;
            if (v93 < v17)
            {
              do
              {
                LOWORD(v175) = v10->i16[v190];
                LOWORD(v178) = v118[v190];
                double v175 = (double)*(unint64_t *)&v175;
                double v178 = (double)*(unint64_t *)&v178;
                double v119 = v119 + v175 * v178;
                ++v190;
                ++v189;
              }
              while ((int)v18 > v189);
            }
            *(double *)(v11 + 8 * result++) = v119 * v9;
            unint64_t v118 = (const __int16 *)((char *)v118 + v117);
          }
          while (result < v16);
          double v115 = (unsigned __int16 *)((char *)v115 + 1);
          v11 += 8 * v219;
          uint64_t v10 = (uint16x8_t *)((char *)v10 + v117);
        }
        while (v115 != (unsigned __int16 *)v16);
      }
      else if (v93 >= v18)
      {
        unint64_t v202 = 0;
        unint64_t v203 = &v10->i16[2];
        uint64_t v204 = 2 * v13;
        do
        {
          unint64_t v205 = v203;
          unint64_t v206 = v202;
          do
          {
            unint64_t v207 = 0;
            double v208 = 0.0;
            uint64_t v209 = v203;
            uint64_t v210 = v205;
            do
            {
              LOWORD(a5.f64[0]) = *(v209 - 2);
              LOWORD(a6.f64[0]) = *(v210 - 2);
              *(double *)&unint64_t v211 = (double)*(unint64_t *)&a6.f64[0];
              LOWORD(a7) = *(v209 - 1);
              LOWORD(a8) = *(v210 - 1);
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&unint64_t v212 = (double)*(unint64_t *)&a7 * a8;
              double v213 = *(double *)&v212 + (double)*(unint64_t *)&a5.f64[0] * *(double *)&v211;
              LOWORD(v211) = *v209;
              LOWORD(v212) = *v210;
              *(double *)&unint64_t v214 = (double)v211;
              *(double *)&unint64_t v215 = (double)v212;
              double v216 = v213 + *(double *)&v214 * *(double *)&v215;
              LOWORD(v214) = v209[1];
              a6.f64[0] = (double)v214;
              LOWORD(v215) = v210[1];
              a7 = (double)v215;
              a5.f64[0] = v216 + a6.f64[0] * a7;
              double v208 = v208 + a5.f64[0];
              v207 += 4;
              v210 += 4;
              v209 += 4;
            }
            while (v207 <= v92);
            *(double *)(v11 + 8 * v206++) = v208 * v9;
            unint64_t v205 = (__int16 *)((char *)v205 + v204);
          }
          while (v206 < v16);
          ++v202;
          v11 += 8 * v219;
          unint64_t v203 = (__int16 *)((char *)v203 + v204);
        }
        while (v202 != v16);
      }
      else
      {
        unint64_t v94 = 0;
        uint64_t v95 = &v10->i16[2];
        uint64_t v96 = 2 * v13;
        uint64_t v97 = (unsigned __int16 *)v10 + v93;
        do
        {
          float64x2_t v98 = v97;
          float64x2_t v99 = v95;
          unint64_t v100 = v94;
          do
          {
            unint64_t v101 = 0;
            double v102 = 0.0;
            uint64_t v103 = v95;
            uint64_t v104 = v99;
            do
            {
              LOWORD(a5.f64[0]) = *(v103 - 2);
              LOWORD(a6.f64[0]) = *(v104 - 2);
              *(double *)&unint64_t v105 = (double)*(unint64_t *)&a6.f64[0];
              LOWORD(a7) = *(v103 - 1);
              LOWORD(a8) = *(v104 - 1);
              a8 = (double)*(unint64_t *)&a8;
              *(double *)&unint64_t v106 = (double)*(unint64_t *)&a7 * a8;
              double v107 = *(double *)&v106 + (double)*(unint64_t *)&a5.f64[0] * *(double *)&v105;
              LOWORD(v105) = *v103;
              LOWORD(v106) = *v104;
              *(double *)&unint64_t v108 = (double)v105;
              *(double *)&unint64_t v109 = (double)v106;
              double v110 = v107 + *(double *)&v108 * *(double *)&v109;
              LOWORD(v108) = v103[1];
              a6.f64[0] = (double)v108;
              LOWORD(v109) = v104[1];
              a7 = (double)v109;
              a5.f64[0] = v110 + a6.f64[0] * a7;
              double v102 = v102 + a5.f64[0];
              v101 += 4;
              v104 += 4;
              v103 += 4;
            }
            while (v101 <= v92);
            uint64_t v111 = v97;
            uint64_t result = (unint64_t)v98;
            int v112 = (v92 & 0xFFFFFFFC) + 4;
            do
            {
              unsigned int v113 = *v111++;
              a5.f64[0] = (double)v113;
              unsigned int v114 = *(unsigned __int16 *)result;
              result += 2;
              a6.f64[0] = (double)v114;
              double v102 = v102 + a5.f64[0] * (double)v114;
              ++v112;
            }
            while ((int)v17 > v112);
            *(double *)(v11 + 8 * v100++) = v102 * v9;
            float64x2_t v99 = (__int16 *)((char *)v99 + v96);
            float64x2_t v98 = (unsigned __int16 *)((char *)v98 + v96);
          }
          while (v100 < v16);
          ++v94;
          v11 += 8 * v219;
          uint64_t v95 = (__int16 *)((char *)v95 + v96);
          uint64_t v97 = (unsigned __int16 *)((char *)v97 + v96);
        }
        while (v94 != v16);
      }
    }
    else if ((int)v18 <= 0)
    {
      uint64_t v191 = 0;
      unint64_t v192 = 0;
      double v193 = a4.f64[0] * 0.0;
      int64x2_t v194 = vdupq_lane_s64(COERCE__INT64(v9 * 0.0), 0);
      float64x2_t v195 = (unsigned __int16 *)(v11 + 16);
      unint64_t v196 = 1;
      do
      {
        if (v196 <= v16) {
          unint64_t v197 = v16;
        }
        else {
          unint64_t v197 = v196;
        }
        unint64_t v198 = v192 + 1;
        if (v192 + 1 > v16) {
          unint64_t v199 = v192 + 1;
        }
        else {
          unint64_t v199 = v16;
        }
        unint64_t v200 = v199 - v192;
        if (v200 < 4) {
          goto LABEL_99;
        }
        unint64_t v201 = (v197 + v191) & 0xFFFFFFFFFFFFFFFCLL;
        v192 += v200 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t result = (unint64_t)v195;
        do
        {
          *(int64x2_t *)(result - 16) = v194;
          *(int64x2_t *)uint64_t result = v194;
          result += 32;
          v201 -= 4;
        }
        while (v201);
        if (v200 != (v200 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_99:
          do
            *(double *)(v11 + 8 * v192++) = v193;
          while (v192 < v16);
        }
        ++v196;
        --v191;
        v195 += 4 * v219 + 4;
        v11 += 8 * v219;
        unint64_t v192 = v198;
      }
      while (v198 != v16);
    }
    else
    {
      uint64_t v86 = 0;
      uint64_t v87 = &v10->i16[2];
      uint64_t v88 = 2 * v13;
      do
      {
        uint64_t v89 = 0;
        uint64_t v90 = (unsigned __int16 *)v10 + v13 * v86;
        LOWORD(a5.f64[0]) = *v90;
        a5.f64[0] = (double)*(unint64_t *)&a5.f64[0];
        uint64_t v91 = v87;
        do
        {
          LOWORD(a6.f64[0]) = *(v91 - 2);
          a6.f64[0] = a5.f64[0] * (double)*(unint64_t *)&a6.f64[0] + 0.0;
          if (v18 != 1)
          {
            LOWORD(a7) = v90[1];
            a7 = (double)*(unint64_t *)&a7;
            LOWORD(a8) = *(v91 - 1);
            a8 = (double)*(unint64_t *)&a8;
            a6.f64[0] = a6.f64[0] + a7 * a8;
            if (v17 != 2)
            {
              LOWORD(a7) = v90[2];
              a7 = (double)*(unint64_t *)&a7;
              LOWORD(a8) = *v91;
              a8 = (double)*(unint64_t *)&a8;
              a6.f64[0] = a6.f64[0] + a7 * a8;
            }
          }
          a6.f64[0] = a6.f64[0] * a4.f64[0];
          *(float64_t *)(v11 + 8 * v89) = a6.f64[0];
          uint64_t v91 = (__int16 *)((char *)v91 + v88);
          ++v89;
        }
        while (v86 + v89 < v16);
        ++v86;
        uint64_t v87 = (__int16 *)((char *)v87 + v88);
        v11 += 8 * v219 + 8;
      }
      while (v86 != v16);
    }
  }
  return result;
}

unsigned char *sub_100277280(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, float64x2_t a7, __n128 a8)
{
  double v8 = (unsigned __int16 *)a1[2];
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(__n128 **)(a3 + 16);
  unint64_t v11 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *(void *)(a3 + 80) >> 2;
  }
  uint64_t v13 = (int *)a1[8];
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  if (v10) {
    BOOL v16 = *(_DWORD *)(a3 + 12) < (int)v14;
  }
  else {
    BOOL v16 = 0;
  }
  char v17 = !v16;
  unsigned int v18 = 20 * v15;
  if (!v16) {
    unsigned int v18 = 4 * v15;
  }
  uint64_t result = v129;
  if (v18 >= 0x409) {
    operator new[]();
  }
  unint64_t v20 = v11 >> 1;
  uint64_t v21 = *(void *)(a2 + 80) >> 2;
  uint64_t v22 = v13[1];
  uint64_t v23 = v15;
  if ((v17 & 1) == 0)
  {
    uint64_t v24 = (float32x4_t *)&v129[4 * v15];
    if ((int)v15 < 1) {
      goto LABEL_36;
    }
    BOOL v25 = v15 >= 8 && v12 == 1;
    if (v25
      && (v24 < (float32x4_t *)((char *)v10 + 4 * v15)
        ? (BOOL v26 = v10 >= (__n128 *)&v129[16 * v15 + 4 * v15])
        : (BOOL v26 = 1),
          v26))
    {
      uint64_t v27 = v15 & 0x7FFFFFF8;
      BOOL v28 = v10 + 1;
      uint64_t v29 = (float *)&v130[4 * v15 + 60];
      uint64_t v30 = v15 & 0xFFFFFFF8;
      do
      {
        __n128 v31 = v28[-1];
        a8 = *v28;
        __n128 v32 = v31;
        a6 = v31;
        __n128 v33 = v31;
        __n128 v34 = *v28;
        __n128 v35 = *v28;
        __n128 v36 = *v28;
        float64x2_t v37 = v29 - 16;
        vst4q_f32(v37, *(float32x4x4_t *)(&a6 - 2));
        vst4q_f32(v29, *(float32x4x4_t *)a8.n128_u64);
        v28 += 2;
        v29 += 32;
        v30 -= 8;
      }
      while (v30);
      if (v27 == v15)
      {
LABEL_36:
        uint64_t v12 = 4 * (v12 != 0);
        uint64_t v10 = (__n128 *)&v129[4 * v15];
        if ((int)v14 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    float64x2_t v38 = (const float *)v10 + v12 * v27;
    float64x2_t v40 = (float32x4_t *)&v129[16 * v27 + 4 * v15];
    uint64_t v41 = v15 - v27;
    do
    {
      float32x4_t v42 = vld1q_dup_f32(v38);
      uint64_t v39 = 4 * v12;
      float64x2_t v38 = (const float *)((char *)v38 + v39);
      *v40++ = v42;
      --v41;
    }
    while (v41);
    goto LABEL_36;
  }
  if (!v10)
  {
    if ((int)v14 < 1) {
      return result;
    }
    uint64_t v87 = 0;
    uint64_t v88 = v14 - 4;
    double v89 = a4 * 0.0;
    *(float *)&double v89 = a4 * 0.0;
    int32x4_t v90 = vdupq_lane_s32(*(int32x2_t *)&v89, 0);
    uint64_t v91 = 2 * v20;
    uint64_t v92 = 4 * v21;
    for (int i = v8; ; ++i)
    {
      if ((int)v23 < 1) {
        goto LABEL_82;
      }
      if (v23 == 1) {
        break;
      }
      uint64_t v95 = v23 & 0xFFFFFFFE;
      uint64_t v96 = v130;
      uint64_t v97 = i;
      do
      {
        a6.n128_u16[0] = *v97;
        a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
        a6.n128_f32[0] = (float)a6.n128_i32[0];
        LOWORD(a7.f64[0]) = v97[v20];
        *(void *)&a7.f64[0] = vmovl_s16(*(int16x4_t *)&a7.f64[0]).u64[0];
        *(float *)a7.f64 = (float)SLODWORD(a7.f64[0]);
        *(v96 - 1) = a6.n128_u32[0];
        *uint64_t v96 = LODWORD(a7.f64[0]);
        v97 += 2 * v20;
        v96 += 2;
        v95 -= 2;
      }
      while (v95);
      uint64_t v94 = v23 & 0xFFFFFFFE;
      if (v94 != v23) {
        goto LABEL_80;
      }
LABEL_82:
      LODWORD(v101) = v87;
      double v102 = (int16x4_t *)i;
      uint64_t v103 = v87;
      if (v87 <= v88)
      {
        do
        {
          a6 = (__n128)v90;
          if ((int)v23 >= 1)
          {
            float64x2_t v111 = 0uLL;
            int v112 = v102;
            uint64_t v113 = v23;
            unsigned int v114 = (float *)v129;
            float64x2_t v115 = 0uLL;
            do
            {
              float v116 = *v114++;
              int32x4_t v117 = vmovl_s16(*v112);
              v118.i64[0] = v117.i32[0];
              v118.i64[1] = v117.i32[1];
              float64x2_t v119 = vcvtq_f64_s64(v118);
              v118.i64[0] = v117.i32[2];
              v118.i64[1] = v117.i32[3];
              float64x2_t v115 = vmlaq_n_f64(v115, vcvtq_f64_s64(v118), v116);
              float64x2_t v111 = vmlaq_n_f64(v111, v119, v116);
              int v112 = (int16x4_t *)((char *)v112 + v91);
              --v113;
            }
            while (v113);
            a8.n128_f64[0] = a4;
            a7 = vmulq_n_f64(v115, a4);
            a6 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v111, a4)), a7);
          }
          *(__n128 *)(v9 + 4 * v103) = a6;
          uint64_t v101 = v103 + 4;
          ++v102;
          uint64_t v103 = v101;
        }
        while ((int)v88 >= (int)v101);
      }
      if ((int)v101 >= (int)v14) {
        goto LABEL_73;
      }
      uint64_t v104 = v101;
      if ((int)v23 >= 1)
      {
        unint64_t v105 = &v8[v101];
        do
        {
          double v106 = 0.0;
          double v107 = v105;
          uint64_t v108 = v23;
          unint64_t v109 = (float *)v129;
          do
          {
            float v110 = *v109++;
            a8.n128_u16[0] = *v107;
            a8.n128_f64[0] = (double)vmovl_s16((int16x4_t)a8.n128_u64[0]).i32[0];
            double v106 = v106 + v110 * a8.n128_f64[0];
            double v107 = (unsigned __int16 *)((char *)v107 + v91);
            --v108;
          }
          while (v108);
          a7.f64[0] = a4;
          a6.n128_f64[0] = v106 * a4;
          a6.n128_f32[0] = a6.n128_f64[0];
          *(_DWORD *)(v9 + 4 * v104++) = a6.n128_u32[0];
          ++v105;
        }
        while ((int)v14 > (int)v104);
        goto LABEL_73;
      }
      uint64_t v120 = (v14 + ~v101);
      if (v120 >= 7)
      {
        uint64_t v122 = v120 + 1;
        uint64_t v123 = (v120 + 1) & 0x1FFFFFFF8;
        uint64_t v121 = v123 + v104;
        uint64_t v124 = 4 * v104;
        uint64_t v125 = v123;
        do
        {
          uint64x2_t v126 = (int32x4_t *)(v9 + v124);
          *uint64x2_t v126 = v90;
          v126[1] = v90;
          v124 += 32;
          v125 -= 8;
        }
        while (v125);
        if (v122 == v123) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v121 = v101;
      }
      uint64_t v127 = 4 * v121;
      do
      {
        *(_DWORD *)(v9 + v127) = LODWORD(v89);
        v127 += 4;
        LODWORD(v121) = v121 + 1;
      }
      while ((int)v14 > (int)v121);
LABEL_73:
      ++v87;
      v9 += v92;
      if (v87 == v14) {
        return result;
      }
    }
    uint64_t v94 = 0;
LABEL_80:
    float64x2_t v98 = &v129[4 * v94];
    uint64_t v99 = v91 * v94;
    uint64_t v100 = v23 - v94;
    do
    {
      a6.n128_u16[0] = *(unsigned __int16 *)((char *)i + v99);
      a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
      a6.n128_f32[0] = (float)a6.n128_i32[0];
      *v98++ = a6.n128_u32[0];
      v99 += v91;
      --v100;
    }
    while (v100);
    goto LABEL_82;
  }
  uint64_t v24 = 0;
  if ((int)v14 >= 1)
  {
LABEL_37:
    uint64_t v43 = 0;
    uint64_t v44 = v14 - 4;
    double v45 = a4 * 0.0;
    *(float *)&double v45 = a4 * 0.0;
    uint64_t v46 = 4 * v12;
    int32x4_t v47 = vdupq_lane_s32(*(int32x2_t *)&v45, 0);
    uint64_t v48 = 2 * v20;
    uint64_t v49 = 4 * v21;
    int8x8_t v50 = (float *)v10;
    float64x2_t v51 = v8;
    do
    {
      if (v24)
      {
        uint64_t v52 = v15;
        int8x8_t v53 = v51;
        int v54 = (float *)v24;
        double v55 = v129;
        if ((int)v15 >= 1)
        {
          do
          {
            a6.n128_u16[0] = *v53;
            a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
            a6.n128_f32[0] = (float)a6.n128_i32[0] - *v54;
            *v55++ = a6.n128_u32[0];
            int v54 = (float *)((char *)v54 + v46);
            int8x8_t v53 = (unsigned __int16 *)((char *)v53 + v48);
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v15 >= 1)
      {
        uint64_t v56 = v15;
        uint64_t v57 = v51;
        int8x8_t v58 = v50;
        unint64_t v59 = v129;
        do
        {
          a6.n128_u16[0] = *v57;
          a6.n128_u64[0] = vmovl_s16((int16x4_t)a6.n128_u64[0]).u64[0];
          a6.n128_f32[0] = (float)a6.n128_i32[0] - *v58;
          *v59++ = a6.n128_u32[0];
          int8x8_t v58 = (float *)((char *)v58 + v46);
          uint64_t v57 = (unsigned __int16 *)((char *)v57 + v48);
          --v56;
        }
        while (v56);
      }
      LODWORD(v60) = v43;
      unint64_t v61 = (int16x4_t *)v51;
      uint64_t v62 = v43;
      if (v43 <= v44)
      {
        do
        {
          a6 = (__n128)v47;
          if ((int)v15 >= 1)
          {
            uint64_t v71 = (float32x4_t *)((char *)v10 + 4 * v62);
            if (v24) {
              uint64_t v71 = v24;
            }
            float64x2_t v72 = 0uLL;
            uint16x8_t v73 = v61;
            uint64_t v74 = v15;
            uint64x2_t v75 = (float *)v129;
            float64x2_t v76 = 0uLL;
            do
            {
              float v77 = *v75++;
              float32x4_t v78 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(*v73)), *v71);
              float64x2_t v76 = vmlaq_n_f64(v76, vcvt_hight_f64_f32(v78), v77);
              float64x2_t v72 = vmlaq_n_f64(v72, vcvtq_f64_f32(*(float32x2_t *)v78.f32), v77);
              uint64_t v71 = (float32x4_t *)((char *)v71 + v46);
              uint16x8_t v73 = (int16x4_t *)((char *)v73 + v48);
              --v74;
            }
            while (v74);
            a8.n128_f64[0] = a4;
            a6 = (__n128)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v72, a4)), vmulq_n_f64(v76, a4));
          }
          *(__n128 *)(v9 + 4 * v62) = a6;
          uint64_t v60 = v62 + 4;
          ++v61;
          uint64_t v62 = v60;
        }
        while ((int)v44 >= (int)v60);
      }
      if ((int)v60 >= (int)v14) {
        goto LABEL_38;
      }
      uint64_t v63 = v60;
      if ((int)v15 >= 1)
      {
        uint64_t v64 = &v8[v60];
        do
        {
          uint64_t v65 = (float *)v10 + v63;
          if (v24) {
            uint64_t v65 = (float *)v24;
          }
          double v66 = 0.0;
          uint64_t v67 = v64;
          uint64_t v68 = v15;
          uint64_t v69 = (float *)v129;
          do
          {
            float v70 = *v69++;
            a8.n128_u16[0] = *v67;
            a8.n128_f64[0] = (float)((float)vmovl_s16((int16x4_t)a8.n128_u64[0]).i32[0] - *v65);
            double v66 = v66 + v70 * a8.n128_f64[0];
            uint64_t v65 = (float *)((char *)v65 + v46);
            uint64_t v67 = (unsigned __int16 *)((char *)v67 + v48);
            --v68;
          }
          while (v68);
          a6.n128_f64[0] = v66 * a4;
          a6.n128_f32[0] = a6.n128_f64[0];
          *(_DWORD *)(v9 + 4 * v63++) = a6.n128_u32[0];
          ++v64;
        }
        while ((int)v14 > (int)v63);
        goto LABEL_38;
      }
      uint64_t v79 = (v14 + ~v60);
      if (v79 >= 7)
      {
        uint64_t v81 = v79 + 1;
        uint64_t v82 = (v79 + 1) & 0x1FFFFFFF8;
        uint64_t v80 = v82 + v63;
        uint64_t v83 = 4 * v63;
        uint64_t v84 = v82;
        do
        {
          double v85 = (int32x4_t *)(v9 + v83);
          *double v85 = v47;
          v85[1] = v47;
          v83 += 32;
          v84 -= 8;
        }
        while (v84);
        if (v81 == v82) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v80 = v60;
      }
      uint64_t v86 = 4 * v80;
      do
      {
        *(_DWORD *)(v9 + v86) = LODWORD(v45);
        v86 += 4;
        LODWORD(v80) = v80 + 1;
      }
      while ((int)v14 > (int)v80);
LABEL_38:
      ++v43;
      v9 += v49;
      ++v51;
      ++v50;
    }
    while (v43 != v22);
  }
  return result;
}

void sub_100277954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != v12)
  {
    if (a12) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100277984(unint64_t result, uint64_t a2, uint64_t a3, double a4, float32x4_t a5, float32x4_t a6, __n128 a7, float32x4_t a8)
{
  double v8 = a4;
  uint64_t v9 = *(const __int16 **)(result + 16);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(float32x4_t **)(a3 + 16);
  uint64_t v12 = *(void *)(result + 80) >> 1;
  uint64_t v235 = *(void *)(a2 + 80) >> 2;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(a3 + 80) >> 2;
  }
  uint64_t v14 = *(unsigned int **)(result + 64);
  unint64_t v15 = *v14;
  uint64_t v16 = (int)v14[1];
  uint64_t v17 = v14[1];
  if (v11)
  {
    int v18 = *(_DWORD *)(a3 + 12);
    uint64_t result = (unint64_t)v238;
    if ((unint64_t)(4 * v16) >= 0x409) {
      operator new[]();
    }
    if ((int)v15 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v233 = v17 & 0xFFFFFFF0;
      unint64_t v20 = (int16x4_t *)(v9 + 8);
      uint64_t v21 = 2 * v12;
      uint64_t v22 = v11 + 2;
      uint64_t v23 = (2 * v17) & 0x1FFFFFFE0;
      uint64_t v24 = v9 + 2;
      uint64_t v25 = *(void *)(a3 + 16);
      uint64_t v234 = 4 * v13;
      do
      {
        if (v18 >= (int)v17)
        {
          if ((int)v17 >= 1)
          {
            uint64_t v27 = 0;
            if (v17 < 0x10) {
              goto LABEL_20;
            }
            if ((unint64_t)((char *)v238 - ((char *)v11 + v234 * v19)) < 0x40) {
              goto LABEL_20;
            }
            BOOL v28 = v22;
            uint64_t v29 = (__n128 *)v240;
            uint64_t v30 = v20;
            uint64_t v31 = v17 & 0xFFFFFFF0;
            do
            {
              int16x8_t v32 = *(int16x8_t *)v30[-2].i8;
              float32x4_t v33 = v28[-2];
              a8 = v28[-1];
              float32x4_t v35 = *v28;
              float32x4_t v34 = v28[1];
              v28 += 4;
              a6 = vsubq_f32(vcvtq_f32_s32(vmovl_high_s16(v32)), a8);
              a5 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(*v30)), v35);
              a7 = (__n128)vsubq_f32(vcvtq_f32_s32(vmovl_high_s16(*(int16x8_t *)v30->i8)), v34);
              v29[-2] = (__n128)vsubq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v32.i8)), v33);
              v29[-1] = (__n128)a6;
              *uint64_t v29 = (__n128)a5;
              v29[1] = a7;
              v29 += 4;
              v30 += 4;
              v31 -= 16;
            }
            while (v31);
            uint64_t v27 = v17 & 0xFFFFFFF0;
            if (v233 != v17)
            {
LABEL_20:
              __n128 v36 = (float *)&v238[v27];
              float64x2_t v37 = (float *)(v25 + 4 * v27);
              float64x2_t v38 = &v9[v27];
              uint64_t v39 = v17 - v27;
              do
              {
                int v40 = *v38++;
                float v41 = (float)v40;
                float v42 = *v37++;
                a5.i16[1] = HIWORD(v42);
                *v36++ = v41 - v42;
                --v39;
              }
              while (v39);
            }
          }
          goto LABEL_27;
        }
        if ((int)v16 >= 1)
        {
          LODWORD(a4) = v11->i32[v13 * v19];
          if (v16 >= 0x10)
          {
            unint64_t v43 = 0;
            a5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
            uint64_t v44 = (__n128 *)v240;
            do
            {
              int16x8_t v45 = *(int16x8_t *)&v9[v43 / 2];
              int16x8_t v46 = *(int16x8_t *)&v9[v43 / 2 + 8];
              float32x4_t v47 = vcvtq_f32_s32(vmovl_high_s16(v45));
              float32x4_t v48 = vcvtq_f32_s32(vmovl_high_s16(v46));
              a6 = vsubq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v45.i8)), a5);
              a8 = vsubq_f32(v47, a5);
              a7 = (__n128)vsubq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v46.i8)), a5);
              v44[-2] = (__n128)a6;
              v44[-1] = (__n128)a8;
              *uint64_t v44 = a7;
              v44[1] = (__n128)vsubq_f32(v48, a5);
              v44 += 4;
              v43 += 32;
            }
            while (v23 != v43);
            uint64_t v26 = v17 & 0xFFFFFFF0;
            if (v233 == v17) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v26 = 0;
          }
          do
          {
            a5.i16[0] = v9[v26];
            a5.i64[0] = vmovl_s16(*(int16x4_t *)a5.f32).u64[0];
            a5.f32[0] = (float)a5.i32[0] - *(float *)&a4;
            v238[v26++] = a5.i32[0];
          }
          while (v17 != v26);
        }
LABEL_27:
        float v236 = v22;
        uint64_t v237 = v20;
        uint64_t v49 = v9;
        int8x8_t v50 = (__int16 *)v24;
        uint64_t v51 = v19;
        do
        {
          uint64_t v52 = (float32x4_t *)((char *)v11 + 4 * v13 * v51);
          if (v18 < (int)v16)
          {
            float32x4_t v53 = vld1q_dup_f32(v52->f32);
            float32x4_t v241 = v53;
            uint64_t v52 = &v241;
          }
          if ((int)v17 >= 4)
          {
            uint64_t v56 = 0;
            double v55 = 0.0;
            uint64_t v57 = v50;
            int8x8_t v58 = (float *)&v239;
            do
            {
              a7.n128_u16[0] = *(v57 - 2);
              a8.i32[0] = v52->i32[0];
              a8.i16[0] = *(v57 - 1);
              *(double *)a8.i64 = (float)((float)vmovl_s16(*(int16x4_t *)a8.f32).i32[0] - v52->f32[1]);
              *(double *)&int16x4_t v59 = *(v58 - 1) * *(double *)a8.i64;
              double v60 = *(double *)&v59
                  + *(v58 - 2) * (float)((float)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] - v52->f32[0]);
              v59.i16[0] = *v57;
              float v61 = *v58;
              float v62 = v58[1];
              v58 += 4;
              a7.n128_f64[0] = v61;
              *(double *)&int16x4_t v63 = (float)((float)vmovl_s16(v59).i32[0] - v52->f32[2]);
              double v64 = v60 + a7.n128_f64[0] * *(double *)&v63;
              v63.i16[0] = v57[1];
              *(double *)a6.i64 = (float)((float)vmovl_s16(v63).i32[0] - v52->f32[3]);
              *(double *)a5.i64 = v64 + v62 * *(double *)a6.i64;
              v56 += 4;
              double v55 = v55 + *(double *)a5.i64;
              v52 += v18 == v16;
              v57 += 4;
            }
            while (v56 <= (int)v17 - 4);
            int v54 = ((v17 - 4) & 0xFFFFFFFC) + 4;
            if (v54 >= (int)v16) {
              goto LABEL_28;
            }
          }
          else
          {
            int v54 = 0;
            double v55 = 0.0;
            if ((int)v16 <= 0) {
              goto LABEL_28;
            }
          }
          uint64_t v65 = v54;
          uint64_t v66 = (v17 + ~v54);
          if (v66 < 0xF)
          {
            uint64_t v67 = v65;
            uint64_t v68 = (float *)v52;
            do
            {
LABEL_42:
              *(double *)a5.i64 = *(float *)&v238[v67];
              a6.i16[0] = v49[v67];
              float v99 = *v68++;
              a7.n128_u16[1] = HIWORD(v99);
              *(double *)a6.i64 = (float)((float)vmovl_s16(*(int16x4_t *)a6.f32).i32[0] - v99);
              double v55 = v55 + *(double *)a5.i64 * *(double *)a6.i64;
              ++v67;
            }
            while ((int)v16 > (int)v67);
            goto LABEL_28;
          }
          uint64_t v69 = v66 + 1;
          uint64_t v70 = (v66 + 1) & 0x1FFFFFFF0;
          uint64_t v68 = &v52->f32[v70];
          uint64_t v67 = v70 + v65;
          uint64_t v71 = (int16x8_t *)&v49[v65];
          float64x2_t v72 = v52 + 2;
          uint16x8_t v73 = (float32x4_t *)&v240[v65];
          uint64_t v74 = v70;
          do
          {
            float32x4_t v76 = v73[-2];
            float32x4_t v75 = v73[-1];
            float32x4_t v78 = *v73;
            float32x4_t v77 = v73[1];
            v73 += 4;
            float64x2_t v79 = vcvtq_f64_f32(*(float32x2_t *)v76.f32);
            float64x2_t v80 = vcvtq_f64_f32(*(float32x2_t *)v75.f32);
            float64x2_t v81 = vcvtq_f64_f32(*(float32x2_t *)v78.f32);
            float64x2_t v82 = vcvtq_f64_f32(*(float32x2_t *)v77.f32);
            int16x8_t v83 = *v71;
            int16x8_t v84 = v71[1];
            v71 += 2;
            float32x4_t v85 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v83.i8));
            float32x4_t v86 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v84.i8));
            float32x4_t v87 = v72[-2];
            float32x4_t v88 = v72[-1];
            float32x4_t v89 = *v72;
            float32x4_t v90 = v72[1];
            v72 += 4;
            float32x4_t v91 = vsubq_f32(vcvtq_f32_s32(vmovl_high_s16(v83)), v88);
            float32x4_t v92 = vsubq_f32(v85, v87);
            float32x4_t v93 = vsubq_f32(vcvtq_f32_s32(vmovl_high_s16(v84)), v90);
            float32x4_t v94 = vsubq_f32(v86, v89);
            a5 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v75), vcvt_hight_f64_f32(v91));
            float64x2_t v95 = vmulq_f64(v80, vcvtq_f64_f32(*(float32x2_t *)v91.f32));
            a6 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v76), vcvt_hight_f64_f32(v92));
            float64x2_t v96 = vmulq_f64(v79, vcvtq_f64_f32(*(float32x2_t *)v92.f32));
            a7 = (__n128)vmulq_f64(vcvt_hight_f64_f32(v77), vcvt_hight_f64_f32(v93));
            float64x2_t v97 = vmulq_f64(v82, vcvtq_f64_f32(*(float32x2_t *)v93.f32));
            a8 = (float32x4_t)vmulq_f64(vcvt_hight_f64_f32(v78), vcvt_hight_f64_f32(v94));
            float64x2_t v98 = vmulq_f64(v81, vcvtq_f64_f32(*(float32x2_t *)v94.f32));
            double v55 = v55
                + v96.f64[0]
                + v96.f64[1]
                + *(double *)a6.i64
                + *(double *)&a6.i64[1]
                + v95.f64[0]
                + v95.f64[1]
                + *(double *)a5.i64
                + *(double *)&a5.i64[1]
                + v98.f64[0]
                + v98.f64[1]
                + *(double *)a8.i64
                + *(double *)&a8.i64[1]
                + v97.f64[0]
                + v97.f64[1]
                + a7.n128_f64[0]
                + a7.n128_f64[1];
            v74 -= 16;
          }
          while (v74);
          if (v69 != v70) {
            goto LABEL_42;
          }
LABEL_28:
          a4 = v55 * v8;
          *(float *)&a4 = a4;
          *(_DWORD *)(v10 + 4 * v51++) = LODWORD(a4);
          int8x8_t v50 = (__int16 *)((char *)v50 + v21);
          uint64_t v49 = (const __int16 *)((char *)v49 + v21);
        }
        while (v51 != v15);
        ++v19;
        v10 += 4 * v235;
        unint64_t v20 = (int16x4_t *)((char *)v237 + v21);
        uint64_t v23 = (2 * v17) & 0x1FFFFFFE0;
        uint64_t v22 = (float32x4_t *)((char *)v236 + v234);
        v25 += v234;
        uint64_t v9 = (const __int16 *)((char *)v9 + v21);
        uint64_t v24 = (const __int16 *)((char *)v24 + v21);
      }
      while (v19 != v15);
    }
  }
  else if ((int)v15 >= 1)
  {
    if ((int)v16 >= 4)
    {
      unint64_t v106 = (v17 - 4);
      uint64_t v107 = (v106 & 0xFFFFFFFC) + 4;
      if (v106 >= 0x1C)
      {
        float64x2_t v130 = 0;
        unint64_t v131 = (v106 >> 2) + 1;
        uint64_t v132 = 2 * v12;
        do
        {
          float64x2_t v133 = v9;
          uint64_t result = (unint64_t)v130;
          do
          {
            double v135 = 0.0;
            unint64_t v136 = v131 & 0x7FFFFFF8;
            float64x2_t v137 = v133;
            uint32x4_t v138 = v9;
            do
            {
              int16x8x4_t v242 = vld4q_s16(v138);
              v138 += 32;
              int32x4_t v139 = vmovl_s16(*(int16x4_t *)v242.val[0].i8);
              int16x8x4_t v243 = vld4q_s16(v137);
              v137 += 32;
              v140.i64[0] = v139.i32[0];
              v140.i64[1] = v139.i32[1];
              float64x2_t v141 = vcvtq_f64_s64(v140);
              v140.i64[0] = v139.i32[2];
              v140.i64[1] = v139.i32[3];
              int64x2_t v142 = v140;
              int32x4_t v143 = vmovl_high_s16(v242.val[0]);
              v140.i64[0] = v143.i32[0];
              v140.i64[1] = v143.i32[1];
              float64x2_t v144 = vcvtq_f64_s64(v142);
              float64x2_t v145 = vcvtq_f64_s64(v140);
              v140.i64[0] = v143.i32[2];
              v140.i64[1] = v143.i32[3];
              float64x2_t v146 = vcvtq_f64_s64(v140);
              int32x4_t v147 = vmovl_s16(*(int16x4_t *)v243.val[0].i8);
              v140.i64[0] = v147.i32[0];
              v140.i64[1] = v147.i32[1];
              float64x2_t v148 = vcvtq_f64_s64(v140);
              v140.i64[0] = v147.i32[2];
              v140.i64[1] = v147.i32[3];
              float64x2_t v149 = vcvtq_f64_s64(v140);
              int32x4_t v150 = vmovl_high_s16(v243.val[0]);
              v140.i64[0] = v150.i32[0];
              v140.i64[1] = v150.i32[1];
              int64x2_t v151 = v140;
              v140.i64[0] = v150.i32[2];
              v140.i64[1] = v150.i32[3];
              float64x2_t v152 = vcvtq_f64_s64(v151);
              float64x2_t v153 = vcvtq_f64_s64(v140);
              int32x4_t v154 = vmovl_high_s16(v242.val[1]);
              v140.i64[0] = v154.i32[2];
              v140.i64[1] = v154.i32[3];
              float64x2_t v155 = vcvtq_f64_s64(v140);
              v140.i64[0] = v154.i32[0];
              v140.i64[1] = v154.i32[1];
              float64x2_t v156 = vcvtq_f64_s64(v140);
              int32x4_t v157 = vmovl_s16(*(int16x4_t *)v242.val[1].i8);
              v140.i64[0] = v157.i32[2];
              v140.i64[1] = v157.i32[3];
              float64x2_t v158 = vcvtq_f64_s64(v140);
              v140.i64[0] = v157.i32[0];
              v140.i64[1] = v157.i32[1];
              int32x4_t v159 = vmovl_high_s16(v243.val[1]);
              float64x2_t v160 = vcvtq_f64_s64(v140);
              v140.i64[0] = v159.i32[2];
              v140.i64[1] = v159.i32[3];
              float64x2_t v161 = vcvtq_f64_s64(v140);
              v140.i64[0] = v159.i32[0];
              v140.i64[1] = v159.i32[1];
              int64x2_t v162 = v140;
              int32x4_t v163 = vmovl_s16(*(int16x4_t *)v243.val[1].i8);
              v140.i64[0] = v163.i32[2];
              v140.i64[1] = v163.i32[3];
              float64x2_t v164 = vcvtq_f64_s64(v162);
              float64x2_t v165 = vcvtq_f64_s64(v140);
              v140.i64[0] = v163.i32[0];
              v140.i64[1] = v163.i32[1];
              float64x2_t v166 = vmulq_f64(v160, vcvtq_f64_s64(v140));
              float64x2_t v167 = vmulq_f64(v156, v164);
              float64x2_t v168 = vmulq_f64(v155, v161);
              int32x4_t v169 = vmovl_high_s16(v242.val[2]);
              v140.i64[0] = v169.i32[2];
              v140.i64[1] = v169.i32[3];
              float64x2_t v170 = vcvtq_f64_s64(v140);
              v140.i64[0] = v169.i32[0];
              v140.i64[1] = v169.i32[1];
              float64x2_t v171 = vmlaq_f64(v168, v153, v146);
              float64x2_t v172 = vcvtq_f64_s64(v140);
              int32x4_t v173 = vmovl_s16(*(int16x4_t *)v242.val[2].i8);
              v140.i64[0] = v173.i32[2];
              v140.i64[1] = v173.i32[3];
              float64x2_t v174 = vcvtq_f64_s64(v140);
              v140.i64[0] = v173.i32[0];
              v140.i64[1] = v173.i32[1];
              float64x2_t v175 = vmlaq_f64(v167, v152, v145);
              float64x2_t v176 = vcvtq_f64_s64(v140);
              int32x4_t v177 = vmovl_high_s16(v243.val[2]);
              v140.i64[0] = v177.i32[2];
              v140.i64[1] = v177.i32[3];
              float64x2_t v178 = vcvtq_f64_s64(v140);
              v140.i64[0] = v177.i32[0];
              v140.i64[1] = v177.i32[1];
              float64x2_t v179 = vmlaq_f64(v166, v148, v141);
              float64x2_t v180 = vcvtq_f64_s64(v140);
              int32x4_t v181 = vmovl_s16(*(int16x4_t *)v243.val[2].i8);
              v140.i64[0] = v181.i32[2];
              v140.i64[1] = v181.i32[3];
              float64x2_t v182 = vcvtq_f64_s64(v140);
              v140.i64[0] = v181.i32[0];
              v140.i64[1] = v181.i32[1];
              float64x2_t v183 = vmlaq_f64(vmulq_f64(v158, v165), v149, v144);
              float64x2_t v184 = vcvtq_f64_s64(v140);
              int32x4_t v185 = vmovl_s16(*(int16x4_t *)v242.val[3].i8);
              v140.i64[0] = v185.i32[0];
              v140.i64[1] = v185.i32[1];
              float64x2_t v186 = vcvtq_f64_s64(v140);
              v140.i64[0] = v185.i32[2];
              v140.i64[1] = v185.i32[3];
              float64x2_t v187 = vmlaq_f64(v179, v184, v176);
              float64x2_t v188 = vcvtq_f64_s64(v140);
              v242.val[0] = (int16x8_t)vmovl_high_s16(v242.val[3]);
              v140.i64[0] = v242.val[0].i32[0];
              v140.i64[1] = v242.val[0].i32[1];
              v242.val[1] = (int16x8_t)vcvtq_f64_s64(v140);
              v140.i64[0] = v242.val[0].i32[2];
              v140.i64[1] = v242.val[0].i32[3];
              v242.val[0] = (int16x8_t)vcvtq_f64_s64(v140);
              v242.val[2] = (int16x8_t)vmovl_s16(*(int16x4_t *)v243.val[3].i8);
              v140.i64[0] = v242.val[2].i32[0];
              v140.i64[1] = v242.val[2].i32[1];
              float64x2_t v189 = vcvtq_f64_s64(v140);
              v140.i64[0] = v242.val[2].i32[2];
              v140.i64[1] = v242.val[2].i32[3];
              v242.val[2] = (int16x8_t)vcvtq_f64_s64(v140);
              v243.val[0] = (int16x8_t)vmovl_high_s16(v243.val[3]);
              v140.i64[0] = v243.val[0].i32[0];
              v140.i64[1] = v243.val[0].i32[1];
              v243.val[1] = (int16x8_t)vcvtq_f64_s64(v140);
              v140.i64[0] = v243.val[0].i32[2];
              v140.i64[1] = v243.val[0].i32[3];
              float64x2_t v190 = vmlaq_f64(vmlaq_f64(v171, v178, v170), vcvtq_f64_s64(v140), (float64x2_t)v242.val[0]);
              double v191 = v190.f64[1];
              float64x2_t v192 = vmlaq_f64(vmlaq_f64(v175, v180, v172), (float64x2_t)v243.val[1], (float64x2_t)v242.val[1]);
              float64x2_t v193 = vmlaq_f64(vmlaq_f64(v183, v182, v174), (float64x2_t)v242.val[2], v188);
              double v194 = v193.f64[1];
              float64x2_t v195 = vmlaq_f64(v187, v189, v186);
              double v196 = v192.f64[1];
              double v135 = v135
                   + v195.f64[0]
                   + v195.f64[1]
                   + v193.f64[0]
                   + v193.f64[1]
                   + v192.f64[0]
                   + v192.f64[1]
                   + v190.f64[0]
                   + v190.f64[1];
              v136 -= 8;
            }
            while (v136);
            uint64_t v197 = (((v131 >> 3) & 0xFFFFFFF) << 6) | 4;
            unint64_t v198 = 4 * (v131 & 0x7FFFFFF8);
            if (v131 != (v131 & 0x7FFFFFF8))
            {
              do
              {
                LOWORD(v191) = *(const __int16 *)((char *)v9 + v197 - 4);
                LOWORD(v194) = *(const __int16 *)((char *)v133 + v197 - 4);
                LOWORD(v196) = *(const __int16 *)((char *)v9 + v197 - 2);
                LOWORD(v189.f64[0]) = *(const __int16 *)((char *)v133 + v197 - 2);
                *(double *)&int16x4_t v199 = (double)vmovl_s16(*(int16x4_t *)&v189.f64[0]).i32[0];
                *(double *)&int16x4_t v200 = (double)vmovl_s16(*(int16x4_t *)&v194).i32[0];
                *(double *)&int16x4_t v201 = (double)vmovl_s16(*(int16x4_t *)&v196).i32[0] * *(double *)&v199;
                v199.i16[0] = *(const __int16 *)((char *)v9 + v197);
                v189.f64[0] = (double)vmovl_s16(v199).i32[0];
                double v202 = *(double *)&v201 + (double)vmovl_s16(*(int16x4_t *)&v191).i32[0] * *(double *)&v200;
                v200.i16[0] = *(const __int16 *)((char *)v133 + v197);
                v201.i16[0] = *(const __int16 *)((char *)v9 + v197 + 2);
                double v203 = v202 + v189.f64[0] * (double)vmovl_s16(v200).i32[0];
                v200.i32[0] = vmovl_s16(v201).u32[0];
                v201.i16[0] = *(const __int16 *)((char *)v133 + v197 + 2);
                double v194 = (double)v200.i32[0];
                double v196 = (double)vmovl_s16(v201).i32[0];
                double v191 = v203 + v194 * v196;
                double v135 = v135 + v191;
                v198 += 4;
                v197 += 8;
              }
              while (v198 <= v106);
            }
            int v204 = (v106 & 0xFFFFFFFC) + 4;
            uint64_t v205 = v107;
            if (v107 < v16)
            {
              do
              {
                LOWORD(v191) = v9[v205];
                double v191 = (double)vmovl_s16(*(int16x4_t *)&v191).i32[0];
                LOWORD(v194) = v133[v205];
                double v194 = (double)vmovl_s16(*(int16x4_t *)&v194).i32[0];
                double v135 = v135 + v191 * v194;
                ++v205;
                ++v204;
              }
              while ((int)v17 > v204);
            }
            float v134 = v135 * v8;
            *(float *)(v10 + 4 * result++) = v134;
            float64x2_t v133 = (const __int16 *)((char *)v133 + v132);
          }
          while (result < v15);
          float64x2_t v130 = (__int16 *)((char *)v130 + 1);
          v10 += 4 * v235;
          uint64_t v9 = (const __int16 *)((char *)v9 + v132);
        }
        while (v130 != (__int16 *)v15);
      }
      else if (v107 >= v17)
      {
        unint64_t v217 = 0;
        uint64_t v218 = (__int16 *)(v9 + 2);
        uint64_t v219 = 2 * v12;
        do
        {
          unint64_t v220 = v218;
          unint64_t v221 = v217;
          do
          {
            unint64_t v222 = 0;
            double v223 = 0.0;
            double v224 = v218;
            int16x8x4_t v225 = v220;
            do
            {
              a5.i16[0] = *(v224 - 2);
              a6.i16[0] = *(v225 - 2);
              a7.n128_u16[0] = *(v224 - 1);
              a8.i16[0] = *(v225 - 1);
              *(double *)&int16x4_t v226 = (double)vmovl_s16(*(int16x4_t *)a8.f32).i32[0];
              *(double *)&int16x4_t v227 = (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] * *(double *)&v226;
              *(double *)&int16x4_t v228 = (double)vmovl_s16(*(int16x4_t *)a6.f32).i32[0];
              double v229 = *(double *)&v227 + (double)vmovl_s16(*(int16x4_t *)a5.f32).i32[0] * *(double *)&v228;
              v228.i16[0] = *v224;
              v227.i16[0] = *v225;
              *(double *)&int16x4_t v230 = (double)vmovl_s16(v227).i32[0];
              v226.i16[0] = v224[1];
              a8.i64[0] = vmovl_s16(v226).u64[0];
              double v231 = v229 + (double)vmovl_s16(v228).i32[0] * *(double *)&v230;
              *(double *)a6.i64 = (double)a8.i32[0];
              v230.i16[0] = v225[1];
              a7.n128_f64[0] = (double)vmovl_s16(v230).i32[0];
              *(double *)a5.i64 = v231 + *(double *)a6.i64 * a7.n128_f64[0];
              double v223 = v223 + *(double *)a5.i64;
              v222 += 4;
              v225 += 4;
              v224 += 4;
            }
            while (v222 <= v106);
            float v232 = v223 * v8;
            *(float *)(v10 + 4 * v221++) = v232;
            unint64_t v220 = (__int16 *)((char *)v220 + v219);
          }
          while (v221 < v15);
          ++v217;
          v10 += 4 * v235;
          uint64_t v218 = (__int16 *)((char *)v218 + v219);
        }
        while (v217 != v15);
      }
      else
      {
        unint64_t v108 = 0;
        unint64_t v109 = (__int16 *)(v9 + 2);
        uint64_t v110 = 2 * v12;
        float64x2_t v111 = &v9[v107];
        do
        {
          int v112 = (__int16 *)v111;
          uint64_t v113 = v109;
          unint64_t v114 = v108;
          do
          {
            unint64_t v115 = 0;
            double v116 = 0.0;
            int32x4_t v117 = v109;
            int64x2_t v118 = v113;
            do
            {
              a5.i16[0] = *(v117 - 2);
              a6.i16[0] = *(v118 - 2);
              a7.n128_u16[0] = *(v117 - 1);
              a8.i16[0] = *(v118 - 1);
              *(double *)&int16x4_t v119 = (double)vmovl_s16(*(int16x4_t *)a8.f32).i32[0];
              *(double *)&int16x4_t v120 = (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0] * *(double *)&v119;
              *(double *)&int16x4_t v121 = (double)vmovl_s16(*(int16x4_t *)a6.f32).i32[0];
              double v122 = *(double *)&v120 + (double)vmovl_s16(*(int16x4_t *)a5.f32).i32[0] * *(double *)&v121;
              v121.i16[0] = *v117;
              v120.i16[0] = *v118;
              *(double *)&int16x4_t v123 = (double)vmovl_s16(v120).i32[0];
              v119.i16[0] = v117[1];
              a8.i64[0] = vmovl_s16(v119).u64[0];
              double v124 = v122 + (double)vmovl_s16(v121).i32[0] * *(double *)&v123;
              *(double *)a6.i64 = (double)a8.i32[0];
              v123.i16[0] = v118[1];
              a7.n128_f64[0] = (double)vmovl_s16(v123).i32[0];
              *(double *)a5.i64 = v124 + *(double *)a6.i64 * a7.n128_f64[0];
              double v116 = v116 + *(double *)a5.i64;
              v115 += 4;
              v118 += 4;
              v117 += 4;
            }
            while (v115 <= v106);
            uint64_t v125 = (__int16 *)v111;
            uint64_t result = (unint64_t)v112;
            int v126 = (v106 & 0xFFFFFFFC) + 4;
            do
            {
              int v127 = *v125++;
              *(double *)a5.i64 = (double)v127;
              int v128 = *(__int16 *)result;
              result += 2;
              *(double *)a6.i64 = (double)v128;
              double v116 = v116 + *(double *)a5.i64 * (double)v128;
              ++v126;
            }
            while ((int)v16 > v126);
            float v129 = v116 * v8;
            *(float *)(v10 + 4 * v114++) = v129;
            uint64_t v113 = (__int16 *)((char *)v113 + v110);
            int v112 = (__int16 *)((char *)v112 + v110);
          }
          while (v114 < v15);
          ++v108;
          v10 += 4 * v235;
          unint64_t v109 = (__int16 *)((char *)v109 + v110);
          float64x2_t v111 = (const __int16 *)((char *)v111 + v110);
        }
        while (v108 != v15);
      }
    }
    else if ((int)v17 <= 0)
    {
      uint64_t v206 = 0;
      unint64_t v207 = 0;
      double v208 = a4 * 0.0;
      *(float *)&double v208 = v8 * 0.0;
      int32x4_t v209 = vdupq_lane_s32(*(int32x2_t *)&v208, 0);
      uint64_t v210 = (__int16 *)(v10 + 16);
      unint64_t v211 = 1;
      do
      {
        if (v211 <= v15) {
          unint64_t v212 = v15;
        }
        else {
          unint64_t v212 = v211;
        }
        unint64_t v213 = v207 + 1;
        if (v207 + 1 > v15) {
          unint64_t v214 = v207 + 1;
        }
        else {
          unint64_t v214 = v15;
        }
        unint64_t v215 = v214 - v207;
        if (v215 < 8) {
          goto LABEL_99;
        }
        unint64_t v216 = (v212 + v206) & 0xFFFFFFFFFFFFFFF8;
        v207 += v215 & 0xFFFFFFFFFFFFFFF8;
        uint64_t result = (unint64_t)v210;
        do
        {
          *(int32x4_t *)(result - 16) = v209;
          *(int32x4_t *)uint64_t result = v209;
          result += 32;
          v216 -= 8;
        }
        while (v216);
        if (v215 != (v215 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_99:
          do
            *(_DWORD *)(v10 + 4 * v207++) = LODWORD(v208);
          while (v207 < v15);
        }
        ++v211;
        --v206;
        v210 += 2 * v235 + 2;
        v10 += 4 * v235;
        unint64_t v207 = v213;
      }
      while (v213 != v15);
    }
    else
    {
      uint64_t v100 = 0;
      uint64_t v101 = (unsigned __int16 *)(v9 + 2);
      uint64_t v102 = 2 * v12;
      do
      {
        uint64_t v103 = 0;
        uint64_t v104 = (unsigned __int16 *)&v9[v12 * v100];
        a5.i16[0] = *v104;
        *(double *)a5.i64 = (double)vmovl_s16(*(int16x4_t *)a5.f32).i32[0];
        unint64_t v105 = v101;
        do
        {
          a6.i16[0] = *(v105 - 2);
          *(double *)a6.i64 = *(double *)a5.i64 * (double)vmovl_s16(*(int16x4_t *)a6.f32).i32[0] + 0.0;
          if (v17 != 1)
          {
            a7.n128_u16[0] = v104[1];
            a7.n128_f64[0] = (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0];
            a8.i16[0] = *(v105 - 1);
            *(double *)a8.i64 = (double)vmovl_s16(*(int16x4_t *)a8.f32).i32[0];
            *(double *)a6.i64 = *(double *)a6.i64 + a7.n128_f64[0] * *(double *)a8.i64;
            if (v16 != 2)
            {
              a7.n128_u16[0] = v104[2];
              a7.n128_f64[0] = (double)vmovl_s16((int16x4_t)a7.n128_u64[0]).i32[0];
              a8.i16[0] = *v105;
              *(double *)a8.i64 = (double)vmovl_s16(*(int16x4_t *)a8.f32).i32[0];
              *(double *)a6.i64 = *(double *)a6.i64 + a7.n128_f64[0] * *(double *)a8.i64;
            }
          }
          *(double *)a6.i64 = *(double *)a6.i64 * a4;
          a6.f32[0] = *(double *)a6.i64;
          *(_DWORD *)(v10 + 4 * v103) = a6.i32[0];
          unint64_t v105 = (unsigned __int16 *)((char *)v105 + v102);
          ++v103;
        }
        while (v100 + v103 < v15);
        ++v100;
        uint64_t v101 = (unsigned __int16 *)((char *)v101 + v102);
        v10 += 4 * v235 + 4;
      }
      while (v100 != v15);
    }
  }
  return result;
}

unsigned char *sub_1002786B0(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, __n128 a6, double a7, __n128 a8, int16x4_t a9, double a10, __n128 a11)
{
  double v11 = a4;
  uint64_t v12 = (_WORD *)a1[2];
  uint64_t v13 = *(int64x2_t **)(a2 + 16);
  uint64_t v14 = *(__n128 **)(a3 + 16);
  unint64_t v15 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v17 = (unsigned int *)a1[8];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  if (v14) {
    BOOL v20 = *(_DWORD *)(a3 + 12) < (int)v18;
  }
  else {
    BOOL v20 = 0;
  }
  char v21 = !v20;
  unsigned int v22 = 40 * v19;
  if (!v20) {
    unsigned int v22 = 8 * v19;
  }
  uint64_t result = v153;
  if (v22 >= 0x409) {
    operator new[]();
  }
  unint64_t v24 = v15 >> 1;
  uint64_t v25 = *(void *)(a2 + 80) >> 3;
  if ((v21 & 1) == 0)
  {
    uint64_t v26 = (double *)&v153[8 * (int)v19];
    if ((int)v19 < 1) {
      goto LABEL_36;
    }
    BOOL v27 = v19 >= 6 && v16 == 1;
    if (v27 && (v26 < &v14->n128_f64[v19] ? (BOOL v28 = v14 >= (__n128 *)&v153[32 * v19 + 8 * (int)v19]) : (BOOL v28 = 1), v28))
    {
      uint64_t v29 = v19 & 0x7FFFFFFC;
      uint64_t v30 = v14 + 1;
      uint64_t v31 = (double *)&v154[8 * (int)v19 + 56];
      uint64_t v32 = v19 & 0xFFFFFFFC;
      do
      {
        __n128 v33 = v30[-1];
        a8 = *v30;
        __n128 v34 = v33;
        a6 = v33;
        __n128 v35 = v33;
        __n128 v36 = *v30;
        __n128 v37 = *v30;
        a11 = *v30;
        float64x2_t v38 = v31 - 8;
        vst4q_f64(v38, *(float64x2x4_t *)(&a6 - 2));
        vst4q_f64(v31, *(float64x2x4_t *)a8.n128_u64);
        v30 += 2;
        v31 += 16;
        v32 -= 4;
      }
      while (v32);
      if (v29 == v19)
      {
LABEL_36:
        uint64_t v16 = 4 * (v16 != 0);
        uint64_t v14 = (__n128 *)&v153[8 * (int)v19];
        if ((int)v18 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    uint64_t v39 = &v14->n128_u64[v16 * v29];
    uint64_t v40 = v19 - v29;
    float v41 = (unint64_t *)&v153[32 * v29 + 16 + 8 * (int)v19];
    do
    {
      unint64_t v42 = *v39;
      *float v41 = *v39;
      v41[1] = v42;
      *(v41 - 2) = v42;
      *(v41 - 1) = v42;
      v39 += v16;
      v41 += 4;
      --v40;
    }
    while (v40);
    goto LABEL_36;
  }
  if (!v14)
  {
    if ((int)v18 < 1) {
      return result;
    }
    uint64_t v95 = (int)v18 - 4;
    if ((int)v19 > 0)
    {
      uint64_t v96 = 0;
      uint64_t v97 = 2 * v24;
      float64x2_t v98 = v12 + 2;
      float v99 = v12;
      while (v19 != 1)
      {
        uint64_t v101 = v19 & 0xFFFFFFFE;
        uint64_t v102 = (double *)v154;
        uint64_t v103 = v99;
        do
        {
          LOWORD(a4) = *v103;
          a4 = (double)vmovl_s16(*(int16x4_t *)&a4).i32[0];
          LOWORD(a5) = v103[v24];
          a5 = (double)vmovl_s16(*(int16x4_t *)&a5).i32[0];
          *(v102 - 1) = a4;
          *uint64_t v102 = a5;
          v103 += 2 * v24;
          v102 += 2;
          v101 -= 2;
        }
        while (v101);
        uint64_t v100 = v19 & 0xFFFFFFFE;
        if (v100 != v19) {
          goto LABEL_80;
        }
LABEL_82:
        uint64_t v107 = v98;
        uint64_t v108 = v96;
        if (v96 <= v95)
        {
          do
          {
            double v109 = 0.0;
            uint64_t v110 = v107;
            uint64_t v111 = v19;
            int v112 = (double *)v153;
            double v113 = 0.0;
            double v114 = 0.0;
            double v115 = 0.0;
            do
            {
              double v116 = *v112++;
              a9.i16[0] = *(v110 - 2);
              *(double *)&int16x4_t v117 = (double)vmovl_s16(a9).i32[0];
              double v115 = v115 + v116 * *(double *)&v117;
              v117.i16[0] = *(v110 - 1);
              *(double *)&int16x4_t v118 = (double)vmovl_s16(v117).i32[0];
              double v114 = v114 + v116 * *(double *)&v118;
              v118.i16[0] = *v110;
              *(double *)&int16x4_t v119 = (double)vmovl_s16(v118).i32[0];
              double v113 = v113 + v116 * *(double *)&v119;
              v119.i16[0] = v110[1];
              *(double *)&a9 = (double)vmovl_s16(v119).i32[0];
              double v109 = v109 + v116 * *(double *)&a9;
              uint64_t v110 = (__int16 *)((char *)v110 + v97);
              --v111;
            }
            while (v111);
            int16x4_t v120 = &v13->i64[v108];
            a6.n128_f64[0] = v114 * v11;
            *(double *)int16x4_t v120 = v115 * v11;
            v120[1] = a6.n128_u64[0];
            a5 = v113 * v11;
            a4 = v109 * v11;
            *((double *)v120 + 2) = a5;
            *((double *)v120 + 3) = a4;
            v108 += 4;
            v107 += 4;
          }
          while ((int)v95 >= (int)v108);
          uint64_t v108 = v108;
          if ((int)v108 >= (int)v18) {
            goto LABEL_74;
          }
LABEL_89:
          int16x4_t v121 = &v12[v108];
          do
          {
            double v122 = 0.0;
            int16x4_t v123 = v121;
            uint64_t v124 = v19;
            uint64_t v125 = (double *)v153;
            do
            {
              double v126 = *v125++;
              a5 = v126;
              a6.n128_u16[0] = *v123;
              a6.n128_f64[0] = (double)vmovl_s16((int16x4_t)a6.n128_u64[0]).i32[0];
              double v122 = v122 + v126 * a6.n128_f64[0];
              int16x4_t v123 = (unsigned __int16 *)((char *)v123 + v97);
              --v124;
            }
            while (v124);
            a4 = v122 * v11;
            *(double *)&v13->i64[v108++] = a4;
            ++v121;
          }
          while ((int)v18 > (int)v108);
          goto LABEL_74;
        }
        uint64_t v108 = v96;
        if ((int)v96 < (int)v18) {
          goto LABEL_89;
        }
LABEL_74:
        ++v96;
        uint64_t v13 = (int64x2_t *)((char *)v13 + 8 * v25);
        ++v99;
        ++v98;
        if (v96 == v18) {
          return result;
        }
      }
      uint64_t v100 = 0;
LABEL_80:
      uint64_t v104 = v97 * v100;
      unint64_t v105 = (double *)&v153[8 * v100];
      uint64_t v106 = v19 - v100;
      do
      {
        LOWORD(a4) = *(_WORD *)((char *)v99 + v104);
        a4 = (double)vmovl_s16(*(int16x4_t *)&a4).i32[0];
        *v105++ = a4;
        v104 += v97;
        --v106;
      }
      while (v106);
      goto LABEL_82;
    }
    uint64_t v127 = 0;
    double v128 = a4 * 0.0;
    int64x2_t v129 = vdupq_lane_s64(COERCE__INT64(v11 * 0.0), 0);
    int v130 = v18 - 3;
    unint64_t v131 = v13 + 4;
    uint64_t v132 = 8 * v25;
    int v133 = 4;
    for (int i = -1; ; --i)
    {
      if (v133 <= v130) {
        int v135 = v18 - 3;
      }
      else {
        int v135 = v133;
      }
      int v136 = v127 + 4;
      if ((int)v127 + 4 <= v130) {
        int v136 = v18 - 3;
      }
      if (v127 <= v95)
      {
        unsigned int v138 = v136 + ~v127;
        uint64_t v139 = v127;
        if (v138 < 0xC) {
          goto LABEL_107;
        }
        uint64_t v140 = (((v135 + i) >> 2) + 1) & 0x7FFFFFFC;
        uint64_t v141 = (v138 >> 2) + 1;
        uint64_t v139 = v127 + 4 * (v141 & 0x7FFFFFFC);
        int v137 = v127;
        int64x2_t v142 = v131;
        do
        {
          v142[-4] = v129;
          v142[-3] = v129;
          v142[-2] = v129;
          v142[-1] = v129;
          *int64x2_t v142 = v129;
          v142[1] = v129;
          v142[2] = v129;
          v142[3] = v129;
          v142 += 8;
          v137 += 16;
          v140 -= 4;
        }
        while (v140);
        if ((v141 & 0x7FFFFFFC) != v141)
        {
LABEL_107:
          int32x4_t v143 = (double *)&v13->i64[v139];
          int v137 = v139;
          do
          {
            *int32x4_t v143 = v128;
            v143[1] = v128;
            v143[2] = v128;
            v143[3] = v128;
            v137 += 4;
            v143 += 4;
          }
          while ((int)v95 >= v137);
        }
      }
      else
      {
        int v137 = v127;
      }
      if (v137 >= (int)v18) {
        goto LABEL_95;
      }
      uint64_t v144 = v137;
      uint64_t v145 = (v18 + ~v137);
      if (v145 >= 3)
      {
        uint64_t v147 = v145 + 1;
        uint64_t v148 = (v145 + 1) & 0x1FFFFFFFCLL;
        uint64_t v146 = v148 + v144;
        uint64_t v149 = 8 * v144;
        uint64_t v150 = v148;
        do
        {
          int64x2_t v151 = (int64x2_t *)((char *)v13 + v149);
          *int64x2_t v151 = v129;
          v151[1] = v129;
          v149 += 32;
          v150 -= 4;
        }
        while (v150);
        if (v147 == v148) {
          goto LABEL_95;
        }
      }
      else
      {
        uint64_t v146 = v144;
      }
      uint64_t v152 = v146;
      do
      {
        *(double *)&v13->i64[v152++] = v128;
        LODWORD(v146) = v146 + 1;
      }
      while ((int)v18 > (int)v146);
LABEL_95:
      ++v127;
      unint64_t v131 = (int64x2_t *)((char *)v131 + v132 + 8);
      ++v133;
      uint64_t v13 = (int64x2_t *)((char *)v13 + v132);
      if (v127 == v18) {
        return result;
      }
    }
  }
  uint64_t v26 = 0;
  if ((int)v18 >= 1)
  {
LABEL_37:
    uint64_t v43 = 0;
    uint64_t v44 = (int)v18 - 4;
    uint64_t v45 = 8 * v16;
    uint64_t v46 = 2 * v24;
    int64x2_t v47 = vdupq_lane_s64(COERCE__INT64(v11 * 0.0), 0);
    float32x4_t v48 = v12 + 2;
    uint64_t v49 = 8 * v25;
    int8x8_t v50 = (double *)v14;
    uint64_t v51 = v12;
    do
    {
      if (v26)
      {
        uint64_t v52 = v19;
        float32x4_t v53 = v51;
        int v54 = v26;
        double v55 = v153;
        if ((int)v19 >= 1)
        {
          do
          {
            a6.n128_u16[0] = *v53;
            a6.n128_f64[0] = (double)vmovl_s16((int16x4_t)a6.n128_u64[0]).i32[0] - *v54;
            *v55++ = a6.n128_u64[0];
            int v54 = (double *)((char *)v54 + v45);
            float32x4_t v53 = (unsigned __int16 *)((char *)v53 + v46);
            --v52;
          }
          while (v52);
        }
      }
      else if ((int)v19 >= 1)
      {
        uint64_t v56 = v19;
        uint64_t v57 = v51;
        int8x8_t v58 = v50;
        int16x4_t v59 = v153;
        do
        {
          a6.n128_u16[0] = *v57;
          a6.n128_f64[0] = (double)vmovl_s16((int16x4_t)a6.n128_u64[0]).i32[0] - *v58;
          *v59++ = a6.n128_u64[0];
          int8x8_t v58 = (double *)((char *)v58 + v45);
          uint64_t v57 = (unsigned __int16 *)((char *)v57 + v46);
          --v56;
        }
        while (v56);
      }
      LODWORD(v60) = v43;
      float v61 = v48;
      uint64_t v62 = v43;
      if (v43 <= v44)
      {
        do
        {
          a6.n128_f64[0] = v11 * 0.0;
          double v72 = v11 * 0.0;
          a8.n128_f64[0] = v11 * 0.0;
          double v73 = v11 * 0.0;
          if ((int)v19 >= 1)
          {
            uint64_t v74 = &v14->n128_f64[v62];
            if (v26) {
              uint64_t v74 = v26;
            }
            float32x4_t v75 = v74 + 2;
            double v76 = 0.0;
            float32x4_t v77 = v61;
            uint64_t v78 = v19;
            float64x2_t v79 = (double *)v153;
            double v80 = 0.0;
            double v81 = 0.0;
            double v82 = 0.0;
            do
            {
              double v83 = *v79++;
              a11.n128_u16[0] = *(v77 - 2);
              *(double *)&int16x4_t v84 = (double)vmovl_s16((int16x4_t)a11.n128_u64[0]).i32[0] - *(v75 - 2);
              double v82 = v82 + v83 * *(double *)&v84;
              v84.i16[0] = *(v77 - 1);
              *(double *)&int16x4_t v85 = (double)vmovl_s16(v84).i32[0] - *(v75 - 1);
              double v81 = v81 + v83 * *(double *)&v85;
              v85.i16[0] = *v77;
              *(double *)&int16x4_t v86 = (double)vmovl_s16(v85).i32[0] - *v75;
              double v80 = v80 + v83 * *(double *)&v86;
              v86.i16[0] = v77[1];
              a11.n128_f64[0] = (double)vmovl_s16(v86).i32[0] - v75[1];
              double v76 = v76 + v83 * a11.n128_f64[0];
              float32x4_t v77 = (__int16 *)((char *)v77 + v46);
              float32x4_t v75 = (double *)((char *)v75 + v45);
              --v78;
            }
            while (v78);
            double v73 = v82 * v11;
            a8.n128_f64[0] = v81 * v11;
            double v72 = v80 * v11;
            a6.n128_f64[0] = v76 * v11;
          }
          uint64_t v71 = &v13->i64[v62];
          *(double *)uint64_t v71 = v73;
          v71[1] = a8.n128_u64[0];
          *((double *)v71 + 2) = v72;
          v71[3] = a6.n128_u64[0];
          uint64_t v60 = v62 + 4;
          v61 += 4;
          uint64_t v62 = v60;
        }
        while ((int)v44 >= (int)v60);
      }
      if ((int)v60 >= (int)v18) {
        goto LABEL_38;
      }
      uint64_t v63 = v60;
      if ((int)v19 >= 1)
      {
        double v64 = &v12[v60];
        do
        {
          uint64_t v65 = &v14->n128_f64[v63];
          if (v26) {
            uint64_t v65 = v26;
          }
          double v66 = 0.0;
          uint64_t v67 = v64;
          uint64_t v68 = v19;
          uint64_t v69 = (double *)v153;
          do
          {
            double v70 = *v69++;
            a8.n128_u16[0] = *v67;
            a8.n128_f64[0] = (double)vmovl_s16((int16x4_t)a8.n128_u64[0]).i32[0] - *v65;
            double v66 = v66 + v70 * a8.n128_f64[0];
            uint64_t v65 = (double *)((char *)v65 + v45);
            uint64_t v67 = (unsigned __int16 *)((char *)v67 + v46);
            --v68;
          }
          while (v68);
          a6.n128_f64[0] = v66 * v11;
          v13->i64[v63++] = a6.n128_u64[0];
          ++v64;
        }
        while ((int)v18 > (int)v63);
        goto LABEL_38;
      }
      uint64_t v87 = (v18 + ~v60);
      if (v87 >= 3)
      {
        uint64_t v89 = v87 + 1;
        uint64_t v90 = (v87 + 1) & 0x1FFFFFFFCLL;
        uint64_t v88 = v90 + v63;
        uint64_t v91 = 8 * v63;
        uint64_t v92 = v90;
        do
        {
          float32x4_t v93 = (int64x2_t *)((char *)v13 + v91);
          *float32x4_t v93 = v47;
          v93[1] = v47;
          v91 += 32;
          v92 -= 4;
        }
        while (v92);
        if (v89 == v90) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v88 = v60;
      }
      uint64_t v94 = v88;
      do
      {
        *(double *)&v13->i64[v94++] = v11 * 0.0;
        LODWORD(v88) = v88 + 1;
      }
      while ((int)v18 > (int)v88);
LABEL_38:
      ++v43;
      uint64_t v13 = (int64x2_t *)((char *)v13 + v49);
      ++v51;
      ++v50;
      ++v48;
    }
    while (v43 != v18);
  }
  return result;
}

void sub_100278EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10 != v10)
  {
    if (a10) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100278F2C(unint64_t result, uint64_t a2, uint64_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, int16x4_t a8)
{
  double v8 = a4.f64[0];
  uint64_t v9 = *(int16x8_t **)(result + 16);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(result + 80) >> 1;
  uint64_t v220 = *(void *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v14 = *(unsigned int **)(result + 64);
  unint64_t v15 = *v14;
  uint64_t v16 = (int)v14[1];
  uint64_t v17 = v14[1];
  if (v11)
  {
    int v18 = *(_DWORD *)(a3 + 12);
    uint64_t result = (unint64_t)v221;
    if ((unint64_t)(8 * v16) >= 0x409) {
      operator new[]();
    }
    if ((int)v15 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v218 = v17 & 0xFFFFFFF8;
      uint64_t v219 = 8 * v13;
      uint64_t v20 = 2 * v12;
      char v21 = &v9->i16[2];
      unsigned int v22 = *(float64x2_t **)(a3 + 16);
      do
      {
        if (v18 >= (int)v17)
        {
          if ((int)v17 >= 1)
          {
            uint64_t v25 = 0;
            if (v17 < 8) {
              goto LABEL_98;
            }
            if ((unint64_t)v221 - v11 - v219 * v19 < 0x40) {
              goto LABEL_98;
            }
            uint64_t v26 = v17 & 0xFFFFFFF8;
            BOOL v27 = (float64x2_t *)v221;
            BOOL v28 = v22;
            uint64_t v29 = v9;
            do
            {
              int16x8_t v30 = *v29++;
              int32x4_t v31 = vmovl_high_s16(v30);
              v32.i64[0] = v31.i32[2];
              v32.i64[1] = v31.i32[3];
              float64x2_t v33 = vcvtq_f64_s64(v32);
              v32.i64[0] = v31.i32[0];
              v32.i64[1] = v31.i32[1];
              float64x2_t v34 = vcvtq_f64_s64(v32);
              int32x4_t v35 = vmovl_s16(*(int16x4_t *)v30.i8);
              v32.i64[0] = v35.i32[2];
              v32.i64[1] = v35.i32[3];
              float64x2_t v36 = vcvtq_f64_s64(v32);
              v32.i64[0] = v35.i32[0];
              v32.i64[1] = v35.i32[1];
              float64x2_t v38 = v28[2];
              float64x2_t v37 = v28[3];
              float64x2_t v40 = *v28;
              float64x2_t v39 = v28[1];
              v28 += 4;
              a4 = vsubq_f64(vcvtq_f64_s64(v32), v40);
              a6 = vsubq_f64(v33, v37);
              v27[2] = vsubq_f64(v34, v38);
              v27[3] = a6;
              a5 = vsubq_f64(v36, v39);
              *BOOL v27 = a4;
              v27[1] = a5;
              v27 += 4;
              v26 -= 8;
            }
            while (v26);
            uint64_t v25 = v17 & 0xFFFFFFF8;
            if (v218 != v17)
            {
LABEL_98:
              do
              {
                LOWORD(a4.f64[0]) = v9->i16[v25];
                a5.f64[0] = v22->f64[v25];
                a4.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a4.f64[0]).i32[0] - a5.f64[0];
                v221[v25++] = *(void *)&a4.f64[0];
              }
              while (v17 != v25);
            }
          }
          goto LABEL_26;
        }
        if ((int)v16 >= 1)
        {
          uint64_t v23 = *(uint64_t *)(v11 + 8 * v13 * v19);
          if (v16 >= 8)
          {
            unint64_t v41 = 0;
            a5 = (float64x2_t)vdupq_lane_s64(v23, 0);
            unint64_t v42 = (float64x2_t *)v221;
            do
            {
              int16x8_t v43 = v9[v41 / 0x10];
              int32x4_t v44 = vmovl_high_s16(v43);
              v45.i64[0] = v44.i32[2];
              v45.i64[1] = v44.i32[3];
              float64x2_t v46 = vcvtq_f64_s64(v45);
              v45.i64[0] = v44.i32[0];
              v45.i64[1] = v44.i32[1];
              float64x2_t v47 = vcvtq_f64_s64(v45);
              int32x4_t v48 = vmovl_s16(*(int16x4_t *)v43.i8);
              v45.i64[0] = v48.i32[2];
              v45.i64[1] = v48.i32[3];
              float64x2_t v49 = vcvtq_f64_s64(v45);
              v45.i64[0] = v48.i32[0];
              v45.i64[1] = v48.i32[1];
              a6 = vsubq_f64(vcvtq_f64_s64(v45), a5);
              v42[2] = vsubq_f64(v47, a5);
              v42[3] = vsubq_f64(v46, a5);
              *unint64_t v42 = a6;
              v42[1] = vsubq_f64(v49, a5);
              v42 += 4;
              v41 += 16;
            }
            while (((2 * v17) & 0x1FFFFFFF0) != v41);
            uint64_t v24 = v17 & 0xFFFFFFF8;
            if (v218 == v17) {
              goto LABEL_26;
            }
          }
          else
          {
            uint64_t v24 = 0;
          }
          do
          {
            LOWORD(a5.f64[0]) = v9->i16[v24];
            a5.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0] - *(double *)&v23;
            v221[v24++] = *(void *)&a5.f64[0];
          }
          while (v17 != v24);
        }
LABEL_26:
        int8x8_t v50 = v9;
        uint64_t v51 = v21;
        uint64_t v52 = v19;
        do
        {
          float32x4_t v53 = (float64x2_t *)(v11 + 8 * v13 * v52);
          if (v18 < (int)v16)
          {
            double v224 = v53->f64[0];
            double v225 = v224;
            *(double *)double v223 = v224;
            *(double *)&v223[1] = v224;
            float32x4_t v53 = (float64x2_t *)v223;
          }
          if ((int)v17 >= 4)
          {
            uint64_t v56 = 0;
            double v55 = 0.0;
            uint64_t v57 = v51;
            int8x8_t v58 = (double *)&v222;
            do
            {
              LOWORD(a5.f64[0]) = *(v57 - 2);
              LOWORD(a6.f64[0]) = *(v57 - 1);
              *(double *)&int16x4_t v59 = *(v58 - 1) * ((double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0] - v53->f64[1]);
              double v60 = *(double *)&v59 + *(v58 - 2) * ((double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0] - v53->f64[0]);
              v59.i16[0] = *v57;
              *(double *)&int16x4_t v61 = (double)vmovl_s16(v59).i32[0] - v53[1].f64[0];
              double v62 = *v58;
              double v63 = v58[1];
              v58 += 4;
              double v64 = v60 + v62 * *(double *)&v61;
              v61.i16[0] = v57[1];
              a6.f64[0] = (double)vmovl_s16(v61).i32[0] - v53[1].f64[1];
              a5.f64[0] = v64 + v63 * a6.f64[0];
              v56 += 4;
              double v55 = v55 + a5.f64[0];
              v53 += 2 * (v18 == v16);
              v57 += 4;
            }
            while (v56 <= (int)v17 - 4);
            int v54 = ((v17 - 4) & 0xFFFFFFFC) + 4;
            if (v54 >= (int)v16) {
              goto LABEL_27;
            }
          }
          else
          {
            int v54 = 0;
            double v55 = 0.0;
            if ((int)v16 <= 0) {
              goto LABEL_27;
            }
          }
          uint64_t v65 = v54;
          uint64_t v66 = (v17 + ~v54);
          if (v66 < 7)
          {
            uint64_t v67 = v65;
            uint64_t v68 = (double *)v53;
            do
            {
LABEL_41:
              *(void *)&a5.f64[0] = v221[v67];
              LOWORD(a6.f64[0]) = v50->i16[v67];
              double v87 = *v68++;
              a6.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0] - v87;
              double v55 = v55 + a5.f64[0] * a6.f64[0];
              ++v67;
            }
            while ((int)v16 > (int)v67);
            goto LABEL_27;
          }
          uint64_t v69 = v66 + 1;
          uint64_t v70 = (v66 + 1) & 0x1FFFFFFF8;
          uint64_t v68 = &v53->f64[v70];
          uint64_t v67 = v70 + v65;
          uint64_t v71 = (float64x2_t *)&v221[v65];
          double v72 = (int16x8_t *)((char *)v50 + 2 * v65);
          uint64_t v73 = v70;
          do
          {
            int16x8_t v74 = *v72++;
            int32x4_t v75 = vmovl_high_s16(v74);
            v76.i64[0] = v75.i32[2];
            v76.i64[1] = v75.i32[3];
            float64x2_t v77 = vcvtq_f64_s64(v76);
            v76.i64[0] = v75.i32[0];
            v76.i64[1] = v75.i32[1];
            float64x2_t v78 = vcvtq_f64_s64(v76);
            int32x4_t v79 = vmovl_s16(*(int16x4_t *)v74.i8);
            v76.i64[0] = v79.i32[2];
            v76.i64[1] = v79.i32[3];
            float64x2_t v80 = vcvtq_f64_s64(v76);
            v76.i64[0] = v79.i32[0];
            v76.i64[1] = v79.i32[1];
            float64x2_t v82 = v53[2];
            float64x2_t v81 = v53[3];
            float64x2_t v84 = *v53;
            float64x2_t v83 = v53[1];
            v53 += 4;
            float64x2_t v85 = vmulq_f64(v71[3], vsubq_f64(v77, v81));
            float64x2_t v86 = vmulq_f64(v71[2], vsubq_f64(v78, v82));
            a6 = vmulq_f64(v71[1], vsubq_f64(v80, v83));
            a5 = vmulq_f64(*v71, vsubq_f64(vcvtq_f64_s64(v76), v84));
            double v55 = v55
                + a5.f64[0]
                + a5.f64[1]
                + a6.f64[0]
                + a6.f64[1]
                + v86.f64[0]
                + v86.f64[1]
                + v85.f64[0]
                + v85.f64[1];
            v71 += 4;
            v73 -= 8;
          }
          while (v73);
          if (v69 != v70) {
            goto LABEL_41;
          }
LABEL_27:
          a4.f64[0] = v55 * v8;
          *(float64_t *)(v10 + 8 * v52++) = a4.f64[0];
          uint64_t v51 = (__int16 *)((char *)v51 + v20);
          int8x8_t v50 = (int16x8_t *)((char *)v50 + v20);
        }
        while (v52 != v15);
        v10 += 8 * v220;
        ++v19;
        uint64_t v9 = (int16x8_t *)((char *)v9 + v20);
        unsigned int v22 = (float64x2_t *)((char *)v22 + v219);
        char v21 = (__int16 *)((char *)v21 + v20);
      }
      while (v19 != v15);
    }
  }
  else if ((int)v15 >= 1)
  {
    if ((int)v16 >= 4)
    {
      unint64_t v94 = (v17 - 4);
      uint64_t v95 = (v94 & 0xFFFFFFFC) + 4;
      if (v94 >= 0x1C)
      {
        int16x4_t v117 = 0;
        unint64_t v118 = (v94 >> 2) + 1;
        uint64_t v119 = 2 * v12;
        do
        {
          int16x4_t v120 = (const __int16 *)v9;
          uint64_t result = (unint64_t)v117;
          do
          {
            double v121 = 0.0;
            unint64_t v122 = v118 & 0x7FFFFFF8;
            int16x4_t v123 = v120;
            uint64_t v124 = (const __int16 *)v9;
            do
            {
              int16x8x4_t v226 = vld4q_s16(v124);
              v124 += 32;
              int32x4_t v125 = vmovl_s16(*(int16x4_t *)v226.val[0].i8);
              int16x8x4_t v227 = vld4q_s16(v123);
              v123 += 32;
              v126.i64[0] = v125.i32[0];
              v126.i64[1] = v125.i32[1];
              float64x2_t v127 = vcvtq_f64_s64(v126);
              v126.i64[0] = v125.i32[2];
              v126.i64[1] = v125.i32[3];
              int64x2_t v128 = v126;
              int32x4_t v129 = vmovl_high_s16(v226.val[0]);
              v126.i64[0] = v129.i32[0];
              v126.i64[1] = v129.i32[1];
              float64x2_t v130 = vcvtq_f64_s64(v128);
              float64x2_t v131 = vcvtq_f64_s64(v126);
              v126.i64[0] = v129.i32[2];
              v126.i64[1] = v129.i32[3];
              float64x2_t v132 = vcvtq_f64_s64(v126);
              int32x4_t v133 = vmovl_s16(*(int16x4_t *)v227.val[0].i8);
              v126.i64[0] = v133.i32[0];
              v126.i64[1] = v133.i32[1];
              float64x2_t v134 = vcvtq_f64_s64(v126);
              v126.i64[0] = v133.i32[2];
              v126.i64[1] = v133.i32[3];
              float64x2_t v135 = vcvtq_f64_s64(v126);
              int32x4_t v136 = vmovl_high_s16(v227.val[0]);
              v126.i64[0] = v136.i32[0];
              v126.i64[1] = v136.i32[1];
              int64x2_t v137 = v126;
              v126.i64[0] = v136.i32[2];
              v126.i64[1] = v136.i32[3];
              float64x2_t v138 = vcvtq_f64_s64(v137);
              float64x2_t v139 = vcvtq_f64_s64(v126);
              int32x4_t v140 = vmovl_high_s16(v226.val[1]);
              v126.i64[0] = v140.i32[2];
              v126.i64[1] = v140.i32[3];
              float64x2_t v141 = vcvtq_f64_s64(v126);
              v126.i64[0] = v140.i32[0];
              v126.i64[1] = v140.i32[1];
              float64x2_t v142 = vcvtq_f64_s64(v126);
              int32x4_t v143 = vmovl_s16(*(int16x4_t *)v226.val[1].i8);
              v126.i64[0] = v143.i32[2];
              v126.i64[1] = v143.i32[3];
              float64x2_t v144 = vcvtq_f64_s64(v126);
              v126.i64[0] = v143.i32[0];
              v126.i64[1] = v143.i32[1];
              int32x4_t v145 = vmovl_high_s16(v227.val[1]);
              float64x2_t v146 = vcvtq_f64_s64(v126);
              v126.i64[0] = v145.i32[2];
              v126.i64[1] = v145.i32[3];
              float64x2_t v147 = vcvtq_f64_s64(v126);
              v126.i64[0] = v145.i32[0];
              v126.i64[1] = v145.i32[1];
              int64x2_t v148 = v126;
              int32x4_t v149 = vmovl_s16(*(int16x4_t *)v227.val[1].i8);
              v126.i64[0] = v149.i32[2];
              v126.i64[1] = v149.i32[3];
              float64x2_t v150 = vcvtq_f64_s64(v148);
              float64x2_t v151 = vcvtq_f64_s64(v126);
              v126.i64[0] = v149.i32[0];
              v126.i64[1] = v149.i32[1];
              float64x2_t v152 = vmulq_f64(v146, vcvtq_f64_s64(v126));
              float64x2_t v153 = vmulq_f64(v142, v150);
              float64x2_t v154 = vmulq_f64(v141, v147);
              int32x4_t v155 = vmovl_high_s16(v226.val[2]);
              v126.i64[0] = v155.i32[2];
              v126.i64[1] = v155.i32[3];
              float64x2_t v156 = vcvtq_f64_s64(v126);
              v126.i64[0] = v155.i32[0];
              v126.i64[1] = v155.i32[1];
              float64x2_t v157 = vmlaq_f64(v154, v139, v132);
              float64x2_t v158 = vcvtq_f64_s64(v126);
              int32x4_t v159 = vmovl_s16(*(int16x4_t *)v226.val[2].i8);
              v126.i64[0] = v159.i32[2];
              v126.i64[1] = v159.i32[3];
              float64x2_t v160 = vcvtq_f64_s64(v126);
              v126.i64[0] = v159.i32[0];
              v126.i64[1] = v159.i32[1];
              float64x2_t v161 = vmlaq_f64(v153, v138, v131);
              float64x2_t v162 = vcvtq_f64_s64(v126);
              int32x4_t v163 = vmovl_high_s16(v227.val[2]);
              v126.i64[0] = v163.i32[2];
              v126.i64[1] = v163.i32[3];
              float64x2_t v164 = vcvtq_f64_s64(v126);
              v126.i64[0] = v163.i32[0];
              v126.i64[1] = v163.i32[1];
              float64x2_t v165 = vmlaq_f64(v152, v134, v127);
              float64x2_t v166 = vcvtq_f64_s64(v126);
              int32x4_t v167 = vmovl_s16(*(int16x4_t *)v227.val[2].i8);
              v126.i64[0] = v167.i32[2];
              v126.i64[1] = v167.i32[3];
              float64x2_t v168 = vcvtq_f64_s64(v126);
              v126.i64[0] = v167.i32[0];
              v126.i64[1] = v167.i32[1];
              float64x2_t v169 = vmlaq_f64(vmulq_f64(v144, v151), v135, v130);
              float64x2_t v170 = vcvtq_f64_s64(v126);
              int32x4_t v171 = vmovl_s16(*(int16x4_t *)v226.val[3].i8);
              v126.i64[0] = v171.i32[0];
              v126.i64[1] = v171.i32[1];
              float64x2_t v172 = vcvtq_f64_s64(v126);
              v126.i64[0] = v171.i32[2];
              v126.i64[1] = v171.i32[3];
              float64x2_t v173 = vmlaq_f64(v165, v170, v162);
              float64x2_t v174 = vcvtq_f64_s64(v126);
              v226.val[0] = (int16x8_t)vmovl_high_s16(v226.val[3]);
              v126.i64[0] = v226.val[0].i32[0];
              v126.i64[1] = v226.val[0].i32[1];
              v226.val[1] = (int16x8_t)vcvtq_f64_s64(v126);
              v126.i64[0] = v226.val[0].i32[2];
              v126.i64[1] = v226.val[0].i32[3];
              v226.val[0] = (int16x8_t)vcvtq_f64_s64(v126);
              v226.val[2] = (int16x8_t)vmovl_s16(*(int16x4_t *)v227.val[3].i8);
              v126.i64[0] = v226.val[2].i32[0];
              v126.i64[1] = v226.val[2].i32[1];
              float64x2_t v175 = vcvtq_f64_s64(v126);
              v126.i64[0] = v226.val[2].i32[2];
              v126.i64[1] = v226.val[2].i32[3];
              v226.val[2] = (int16x8_t)vcvtq_f64_s64(v126);
              v227.val[0] = (int16x8_t)vmovl_high_s16(v227.val[3]);
              v126.i64[0] = v227.val[0].i32[0];
              v126.i64[1] = v227.val[0].i32[1];
              v227.val[1] = (int16x8_t)vcvtq_f64_s64(v126);
              v126.i64[0] = v227.val[0].i32[2];
              v126.i64[1] = v227.val[0].i32[3];
              float64x2_t v176 = vmlaq_f64(vmlaq_f64(v157, v164, v156), vcvtq_f64_s64(v126), (float64x2_t)v226.val[0]);
              double v177 = v176.f64[1];
              float64x2_t v178 = vmlaq_f64(vmlaq_f64(v161, v166, v158), (float64x2_t)v227.val[1], (float64x2_t)v226.val[1]);
              float64x2_t v179 = vmlaq_f64(vmlaq_f64(v169, v168, v160), (float64x2_t)v226.val[2], v174);
              double v180 = v179.f64[1];
              float64x2_t v181 = vmlaq_f64(v173, v175, v172);
              double v182 = v178.f64[1];
              double v121 = v121
                   + v181.f64[0]
                   + v181.f64[1]
                   + v179.f64[0]
                   + v179.f64[1]
                   + v178.f64[0]
                   + v178.f64[1]
                   + v176.f64[0]
                   + v176.f64[1];
              v122 -= 8;
            }
            while (v122);
            uint64_t v183 = (((v118 >> 3) & 0xFFFFFFF) << 6) | 4;
            unint64_t v184 = 4 * (v118 & 0x7FFFFFF8);
            if (v118 != (v118 & 0x7FFFFFF8))
            {
              do
              {
                LOWORD(v177) = *(__int16 *)((char *)&v9->i16[-2] + v183);
                LOWORD(v180) = *(const __int16 *)((char *)v120 + v183 - 4);
                LOWORD(v182) = *(__int16 *)((char *)&v9->i16[-1] + v183);
                LOWORD(v175.f64[0]) = *(const __int16 *)((char *)v120 + v183 - 2);
                *(double *)&int16x4_t v185 = (double)vmovl_s16(*(int16x4_t *)&v175.f64[0]).i32[0];
                *(double *)&int16x4_t v186 = (double)vmovl_s16(*(int16x4_t *)&v180).i32[0];
                *(double *)&int16x4_t v187 = (double)vmovl_s16(*(int16x4_t *)&v182).i32[0] * *(double *)&v185;
                v185.i16[0] = *(__int16 *)((char *)v9->i16 + v183);
                v175.f64[0] = (double)vmovl_s16(v185).i32[0];
                double v188 = *(double *)&v187 + (double)vmovl_s16(*(int16x4_t *)&v177).i32[0] * *(double *)&v186;
                v186.i16[0] = *(const __int16 *)((char *)v120 + v183);
                v187.i16[0] = *(__int16 *)((char *)&v9->i16[1] + v183);
                double v189 = v188 + v175.f64[0] * (double)vmovl_s16(v186).i32[0];
                v186.i32[0] = vmovl_s16(v187).u32[0];
                v187.i16[0] = *(const __int16 *)((char *)v120 + v183 + 2);
                double v180 = (double)v186.i32[0];
                double v182 = (double)vmovl_s16(v187).i32[0];
                double v177 = v189 + v180 * v182;
                double v121 = v121 + v177;
                v184 += 4;
                v183 += 8;
              }
              while (v184 <= v94);
            }
            int v190 = (v94 & 0xFFFFFFFC) + 4;
            uint64_t v191 = v95;
            if (v95 < v16)
            {
              do
              {
                LOWORD(v177) = v9->i16[v191];
                double v177 = (double)vmovl_s16(*(int16x4_t *)&v177).i32[0];
                LOWORD(v180) = v120[v191];
                double v180 = (double)vmovl_s16(*(int16x4_t *)&v180).i32[0];
                double v121 = v121 + v177 * v180;
                ++v191;
                ++v190;
              }
              while ((int)v17 > v190);
            }
            *(double *)(v10 + 8 * result++) = v121 * v8;
            int16x4_t v120 = (const __int16 *)((char *)v120 + v119);
          }
          while (result < v15);
          int16x4_t v117 = (__int16 *)((char *)v117 + 1);
          v10 += 8 * v220;
          uint64_t v9 = (int16x8_t *)((char *)v9 + v119);
        }
        while (v117 != (__int16 *)v15);
      }
      else if (v95 >= v17)
      {
        unint64_t v203 = 0;
        int v204 = &v9->i16[2];
        uint64_t v205 = 2 * v12;
        do
        {
          uint64_t v206 = v204;
          unint64_t v207 = v203;
          do
          {
            unint64_t v208 = 0;
            double v209 = 0.0;
            uint64_t v210 = v204;
            unint64_t v211 = v206;
            do
            {
              LOWORD(a5.f64[0]) = *(v210 - 2);
              LOWORD(a6.f64[0]) = *(v211 - 2);
              LOWORD(a7) = *(v210 - 1);
              a8.i16[0] = *(v211 - 1);
              *(double *)&int16x4_t v212 = (double)vmovl_s16(a8).i32[0];
              *(double *)&int16x4_t v213 = (double)vmovl_s16(*(int16x4_t *)&a7).i32[0] * *(double *)&v212;
              *(double *)&int16x4_t v214 = (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0];
              double v215 = *(double *)&v213 + (double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0] * *(double *)&v214;
              v214.i16[0] = *v210;
              v213.i16[0] = *v211;
              *(double *)&int16x4_t v216 = (double)vmovl_s16(v213).i32[0];
              v212.i16[0] = v210[1];
              a8 = (int16x4_t)vmovl_s16(v212).u64[0];
              double v217 = v215 + (double)vmovl_s16(v214).i32[0] * *(double *)&v216;
              a6.f64[0] = (double)a8.i32[0];
              v216.i16[0] = v211[1];
              a7 = (double)vmovl_s16(v216).i32[0];
              a5.f64[0] = v217 + a6.f64[0] * a7;
              double v209 = v209 + a5.f64[0];
              v208 += 4;
              v211 += 4;
              v210 += 4;
            }
            while (v208 <= v94);
            *(double *)(v10 + 8 * v207++) = v209 * v8;
            uint64_t v206 = (__int16 *)((char *)v206 + v205);
          }
          while (v207 < v15);
          ++v203;
          v10 += 8 * v220;
          int v204 = (__int16 *)((char *)v204 + v205);
        }
        while (v203 != v15);
      }
      else
      {
        unint64_t v96 = 0;
        uint64_t v97 = &v9->i16[2];
        uint64_t v98 = 2 * v12;
        float v99 = &v9->i16[v95];
        do
        {
          uint64_t v100 = v99;
          uint64_t v101 = v97;
          unint64_t v102 = v96;
          do
          {
            unint64_t v103 = 0;
            double v104 = 0.0;
            unint64_t v105 = v97;
            uint64_t v106 = v101;
            do
            {
              LOWORD(a5.f64[0]) = *(v105 - 2);
              LOWORD(a6.f64[0]) = *(v106 - 2);
              LOWORD(a7) = *(v105 - 1);
              a8.i16[0] = *(v106 - 1);
              *(double *)&int16x4_t v107 = (double)vmovl_s16(a8).i32[0];
              *(double *)&int16x4_t v108 = (double)vmovl_s16(*(int16x4_t *)&a7).i32[0] * *(double *)&v107;
              *(double *)&int16x4_t v109 = (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0];
              double v110 = *(double *)&v108 + (double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0] * *(double *)&v109;
              v109.i16[0] = *v105;
              v108.i16[0] = *v106;
              *(double *)&int16x4_t v111 = (double)vmovl_s16(v108).i32[0];
              v107.i16[0] = v105[1];
              a8 = (int16x4_t)vmovl_s16(v107).u64[0];
              double v112 = v110 + (double)vmovl_s16(v109).i32[0] * *(double *)&v111;
              a6.f64[0] = (double)a8.i32[0];
              v111.i16[0] = v106[1];
              a7 = (double)vmovl_s16(v111).i32[0];
              a5.f64[0] = v112 + a6.f64[0] * a7;
              double v104 = v104 + a5.f64[0];
              v103 += 4;
              v106 += 4;
              v105 += 4;
            }
            while (v103 <= v94);
            double v113 = v99;
            uint64_t result = (unint64_t)v100;
            int v114 = (v94 & 0xFFFFFFFC) + 4;
            do
            {
              int v115 = *v113++;
              a5.f64[0] = (double)v115;
              int v116 = *(__int16 *)result;
              result += 2;
              a6.f64[0] = (double)v116;
              double v104 = v104 + a5.f64[0] * (double)v116;
              ++v114;
            }
            while ((int)v16 > v114);
            *(double *)(v10 + 8 * v102++) = v104 * v8;
            uint64_t v101 = (__int16 *)((char *)v101 + v98);
            uint64_t v100 = (__int16 *)((char *)v100 + v98);
          }
          while (v102 < v15);
          ++v96;
          v10 += 8 * v220;
          uint64_t v97 = (__int16 *)((char *)v97 + v98);
          float v99 = (__int16 *)((char *)v99 + v98);
        }
        while (v96 != v15);
      }
    }
    else if ((int)v17 <= 0)
    {
      uint64_t v192 = 0;
      unint64_t v193 = 0;
      double v194 = a4.f64[0] * 0.0;
      int64x2_t v195 = vdupq_lane_s64(COERCE__INT64(v8 * 0.0), 0);
      double v196 = (__int16 *)(v10 + 16);
      unint64_t v197 = 1;
      do
      {
        if (v197 <= v15) {
          unint64_t v198 = v15;
        }
        else {
          unint64_t v198 = v197;
        }
        unint64_t v199 = v193 + 1;
        if (v193 + 1 > v15) {
          unint64_t v200 = v193 + 1;
        }
        else {
          unint64_t v200 = v15;
        }
        unint64_t v201 = v200 - v193;
        if (v201 < 4) {
          goto LABEL_99;
        }
        unint64_t v202 = (v198 + v192) & 0xFFFFFFFFFFFFFFFCLL;
        v193 += v201 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t result = (unint64_t)v196;
        do
        {
          *(int64x2_t *)(result - 16) = v195;
          *(int64x2_t *)uint64_t result = v195;
          result += 32;
          v202 -= 4;
        }
        while (v202);
        if (v201 != (v201 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_99:
          do
            *(double *)(v10 + 8 * v193++) = v194;
          while (v193 < v15);
        }
        ++v197;
        --v192;
        v196 += 4 * v220 + 4;
        v10 += 8 * v220;
        unint64_t v193 = v199;
      }
      while (v199 != v15);
    }
    else
    {
      uint64_t v88 = 0;
      uint64_t v89 = &v9->i16[2];
      uint64_t v90 = 2 * v12;
      do
      {
        uint64_t v91 = 0;
        uint64_t v92 = (unsigned __int16 *)v9 + v12 * v88;
        LOWORD(a5.f64[0]) = *v92;
        a5.f64[0] = (double)vmovl_s16(*(int16x4_t *)&a5.f64[0]).i32[0];
        float32x4_t v93 = v89;
        do
        {
          LOWORD(a6.f64[0]) = *(v93 - 2);
          a6.f64[0] = a5.f64[0] * (double)vmovl_s16(*(int16x4_t *)&a6.f64[0]).i32[0] + 0.0;
          if (v17 != 1)
          {
            LOWORD(a7) = v92[1];
            a7 = (double)vmovl_s16(*(int16x4_t *)&a7).i32[0];
            a8.i16[0] = *(v93 - 1);
            *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
            a6.f64[0] = a6.f64[0] + a7 * *(double *)&a8;
            if (v16 != 2)
            {
              LOWORD(a7) = v92[2];
              a7 = (double)vmovl_s16(*(int16x4_t *)&a7).i32[0];
              a8.i16[0] = *v93;
              *(double *)&a8 = (double)vmovl_s16(a8).i32[0];
              a6.f64[0] = a6.f64[0] + a7 * *(double *)&a8;
            }
          }
          a6.f64[0] = a6.f64[0] * a4.f64[0];
          *(float64_t *)(v10 + 8 * v91) = a6.f64[0];
          float32x4_t v93 = (__int16 *)((char *)v93 + v90);
          ++v91;
        }
        while (v88 + v91 < v15);
        ++v88;
        uint64_t v89 = (__int16 *)((char *)v89 + v90);
        v10 += 8 * v220 + 8;
      }
      while (v88 != v15);
    }
  }
  return result;
}

unsigned char *sub_100279BA0(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  BOOL v4 = (float32x4_t *)a1[2];
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(float32x4_t **)(a3 + 16);
  unint64_t v7 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(a3 + 80) >> 2;
  }
  uint64_t v9 = (int *)a1[8];
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (v6) {
    BOOL v12 = *(_DWORD *)(a3 + 12) < (int)v10;
  }
  else {
    BOOL v12 = 0;
  }
  char v13 = !v12;
  unsigned int v14 = 20 * v11;
  if (!v12) {
    unsigned int v14 = 4 * v11;
  }
  uint64_t result = v115;
  if (v14 >= 0x409) {
    operator new[]();
  }
  unint64_t v16 = v7 >> 2;
  uint64_t v17 = *(void *)(a2 + 80) >> 2;
  uint64_t v18 = v9[1];
  if ((v13 & 1) == 0)
  {
    uint64_t v19 = (float32x4_t *)&v115[4 * v11];
    if ((int)v11 < 1) {
      goto LABEL_36;
    }
    BOOL v20 = v11 >= 8 && v8 == 1;
    if (v20
      && (v19 < (float32x4_t *)&v6->f32[v11]
        ? (BOOL v21 = v6 >= (float32x4_t *)&v115[16 * v11 + 4 * v11])
        : (BOOL v21 = 1),
          v21))
    {
      uint64_t v22 = v11 & 0x7FFFFFF8;
      uint64_t v23 = v6 + 1;
      uint64_t v24 = (float *)&v115[4 * v11 + 64];
      uint64_t v25 = v11 & 0xFFFFFFF8;
      do
      {
        v116.val[0] = v23[-1];
        v117.val[0] = *v23;
        v116.val[1] = v116.val[0];
        v116.val[2] = v116.val[0];
        v116.val[3] = v116.val[0];
        v117.val[1] = *v23;
        v117.val[2] = *v23;
        v117.val[3] = *v23;
        uint64_t v26 = v24 - 16;
        vst4q_f32(v26, v116);
        vst4q_f32(v24, v117);
        v23 += 2;
        v24 += 32;
        v25 -= 8;
      }
      while (v25);
      if (v22 == v11)
      {
LABEL_36:
        uint64_t v8 = 4 * (v8 != 0);
        unint64_t v6 = (float32x4_t *)&v115[4 * v11];
        if ((int)v10 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    BOOL v27 = &v6->f32[v8 * v22];
    uint64_t v29 = (float32x4_t *)&v115[16 * v22 + 4 * v11];
    uint64_t v30 = v11 - v22;
    do
    {
      float32x4_t v31 = vld1q_dup_f32(v27);
      uint64_t v28 = 4 * v8;
      BOOL v27 = (const float *)((char *)v27 + v28);
      *v29++ = v31;
      --v30;
    }
    while (v30);
    goto LABEL_36;
  }
  if (!v6)
  {
    if ((int)v10 < 1) {
      return result;
    }
    uint64_t v78 = 0;
    uint64_t v79 = v10 - 4;
    double v80 = a4 * 0.0;
    *(float *)&double v80 = a4 * 0.0;
    int32x4_t v81 = vdupq_lane_s32(*(int32x2_t *)&v80, 0);
    uint64_t v82 = 4 * v16;
    uint64_t v83 = 4 * v17;
    for (int i = v4; ; int i = (float32x4_t *)((char *)i + 4))
    {
      uint64_t v85 = v11;
      float64x2_t v86 = i;
      double v87 = v115;
      if ((int)v11 >= 1)
      {
        do
        {
          *v87++ = v86->i32[0];
          float64x2_t v86 = (float32x4_t *)((char *)v86 + v82);
          --v85;
        }
        while (v85);
      }
      LODWORD(v88) = v78;
      uint64_t v89 = i;
      uint64_t v90 = v78;
      if (v78 <= v79)
      {
        do
        {
          float32x4_t v99 = (float32x4_t)v81;
          if ((int)v11 >= 1)
          {
            float64x2_t v100 = 0uLL;
            uint64_t v101 = v89;
            uint64_t v102 = v11;
            unint64_t v103 = (float *)v115;
            float64x2_t v104 = 0uLL;
            do
            {
              float v105 = *v103++;
              float64x2_t v104 = vmlaq_n_f64(v104, vcvt_hight_f64_f32(*v101), v105);
              float64x2_t v100 = vmlaq_n_f64(v100, vcvtq_f64_f32(*(float32x2_t *)v101->f32), v105);
              uint64_t v101 = (float32x4_t *)((char *)v101 + v82);
              --v102;
            }
            while (v102);
            float32x4_t v99 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v100, a4)), vmulq_n_f64(v104, a4));
          }
          *(float32x4_t *)(v5 + 4 * v90) = v99;
          uint64_t v88 = v90 + 4;
          ++v89;
          uint64_t v90 = v88;
        }
        while ((int)v79 >= (int)v88);
      }
      if ((int)v88 >= (int)v10) {
        goto LABEL_73;
      }
      uint64_t v91 = v88;
      if ((int)v11 >= 1)
      {
        uint64_t v92 = &v4->f32[v88];
        do
        {
          double v93 = 0.0;
          unint64_t v94 = v92;
          uint64_t v95 = v11;
          unint64_t v96 = (float *)v115;
          do
          {
            float v97 = *v96++;
            double v93 = v93 + v97 * *v94;
            unint64_t v94 = (float *)((char *)v94 + v82);
            --v95;
          }
          while (v95);
          float v98 = v93 * a4;
          *(float *)(v5 + 4 * v91++) = v98;
          ++v92;
        }
        while ((int)v10 > (int)v91);
        goto LABEL_73;
      }
      uint64_t v106 = (v10 + ~v88);
      if (v106 >= 7)
      {
        uint64_t v108 = v106 + 1;
        uint64_t v109 = (v106 + 1) & 0x1FFFFFFF8;
        uint64_t v107 = v109 + v91;
        uint64_t v110 = 4 * v91;
        uint64_t v111 = v109;
        do
        {
          double v112 = (int32x4_t *)(v5 + v110);
          *double v112 = v81;
          v112[1] = v81;
          v110 += 32;
          v111 -= 8;
        }
        while (v111);
        if (v108 == v109) {
          goto LABEL_73;
        }
      }
      else
      {
        uint64_t v107 = v88;
      }
      uint64_t v113 = 4 * v107;
      do
      {
        *(_DWORD *)(v5 + v113) = LODWORD(v80);
        v113 += 4;
        LODWORD(v107) = v107 + 1;
      }
      while ((int)v10 > (int)v107);
LABEL_73:
      ++v78;
      v5 += v83;
      if (v78 == v10) {
        return result;
      }
    }
  }
  uint64_t v19 = 0;
  if ((int)v10 >= 1)
  {
LABEL_37:
    uint64_t v32 = 0;
    uint64_t v33 = v10 - 4;
    double v34 = a4 * 0.0;
    *(float *)&double v34 = a4 * 0.0;
    uint64_t v35 = 4 * v8;
    int32x4_t v36 = vdupq_lane_s32(*(int32x2_t *)&v34, 0);
    uint64_t v37 = 4 * v16;
    uint64_t v38 = 4 * v17;
    float64x2_t v39 = (float *)v6;
    float64x2_t v40 = (float *)v4;
    do
    {
      if (v19)
      {
        uint64_t v41 = v11;
        unint64_t v42 = v40;
        int16x8_t v43 = (float *)v19;
        int32x4_t v44 = (float *)v115;
        if ((int)v11 >= 1)
        {
          do
          {
            *v44++ = *v42 - *v43;
            int16x8_t v43 = (float *)((char *)v43 + v35);
            unint64_t v42 = (float *)((char *)v42 + v37);
            --v41;
          }
          while (v41);
        }
      }
      else if ((int)v11 >= 1)
      {
        uint64_t v45 = v11;
        float64x2_t v46 = v40;
        float64x2_t v47 = v39;
        int32x4_t v48 = (float *)v115;
        do
        {
          *v48++ = *v46 - *v47;
          float64x2_t v47 = (float *)((char *)v47 + v35);
          float64x2_t v46 = (float *)((char *)v46 + v37);
          --v45;
        }
        while (v45);
      }
      LODWORD(v49) = v32;
      int8x8_t v50 = (float32x4_t *)v40;
      uint64_t v51 = v32;
      if (v32 <= v33)
      {
        do
        {
          float32x4_t v61 = (float32x4_t)v36;
          if ((int)v11 >= 1)
          {
            double v62 = (float32x4_t *)((char *)v6 + 4 * v51);
            if (v19) {
              double v62 = v19;
            }
            float64x2_t v63 = 0uLL;
            double v64 = v50;
            uint64_t v65 = v11;
            uint64_t v66 = (float *)v115;
            float64x2_t v67 = 0uLL;
            do
            {
              float v68 = *v66++;
              float32x4_t v69 = vsubq_f32(*v64, *v62);
              float64x2_t v67 = vmlaq_n_f64(v67, vcvt_hight_f64_f32(v69), v68);
              float64x2_t v63 = vmlaq_n_f64(v63, vcvtq_f64_f32(*(float32x2_t *)v69.f32), v68);
              double v62 = (float32x4_t *)((char *)v62 + v35);
              double v64 = (float32x4_t *)((char *)v64 + v37);
              --v65;
            }
            while (v65);
            float32x4_t v61 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v63, a4)), vmulq_n_f64(v67, a4));
          }
          *(float32x4_t *)(v5 + 4 * v51) = v61;
          uint64_t v49 = v51 + 4;
          ++v50;
          uint64_t v51 = v49;
        }
        while ((int)v33 >= (int)v49);
      }
      if ((int)v49 >= (int)v10) {
        goto LABEL_38;
      }
      uint64_t v52 = v49;
      if ((int)v11 >= 1)
      {
        float32x4_t v53 = &v4->f32[v49];
        do
        {
          int v54 = &v6->f32[v52];
          if (v19) {
            int v54 = (float *)v19;
          }
          double v55 = 0.0;
          uint64_t v56 = v53;
          uint64_t v57 = v11;
          int8x8_t v58 = (float *)v115;
          do
          {
            float v59 = *v58++;
            double v55 = v55 + v59 * (float)(*v56 - *v54);
            int v54 = (float *)((char *)v54 + v35);
            uint64_t v56 = (float *)((char *)v56 + v37);
            --v57;
          }
          while (v57);
          float v60 = v55 * a4;
          *(float *)(v5 + 4 * v52++) = v60;
          ++v53;
        }
        while ((int)v10 > (int)v52);
        goto LABEL_38;
      }
      uint64_t v70 = (v10 + ~v49);
      if (v70 >= 7)
      {
        uint64_t v72 = v70 + 1;
        uint64_t v73 = (v70 + 1) & 0x1FFFFFFF8;
        uint64_t v71 = v73 + v52;
        uint64_t v74 = 4 * v52;
        uint64_t v75 = v73;
        do
        {
          int64x2_t v76 = (int32x4_t *)(v5 + v74);
          int32x4_t *v76 = v36;
          v76[1] = v36;
          v74 += 32;
          v75 -= 8;
        }
        while (v75);
        if (v72 == v73) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v71 = v49;
      }
      uint64_t v77 = 4 * v71;
      do
      {
        *(_DWORD *)(v5 + v77) = LODWORD(v34);
        v77 += 4;
        LODWORD(v71) = v71 + 1;
      }
      while ((int)v10 > (int)v71);
LABEL_38:
      ++v32;
      v5 += v38;
      ++v40;
      ++v39;
    }
    while (v32 != v18);
  }
  return result;
}

void sub_10027A1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != v12)
  {
    if (a12) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

int32x4_t *sub_10027A208(int32x4_t *result, uint64_t a2, uint64_t a3, double a4)
{
  double v4 = a4;
  uint64_t v5 = result[1].i64[0];
  unint64_t v6 = *(int32x4_t **)(a2 + 16);
  unint64_t v7 = *(float32x4_t **)(a3 + 16);
  unint64_t v8 = result[5].u64[0];
  uint64_t v142 = *(void *)(a2 + 80) >> 2;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(a3 + 80) >> 2;
  }
  uint64_t v10 = (unsigned int *)result[4].i64[0];
  unint64_t v11 = *v10;
  uint64_t v12 = (int)v10[1];
  uint64_t v13 = v10[1];
  if (!v7)
  {
    if ((int)v11 < 1) {
      return result;
    }
    unint64_t v81 = v8 >> 2;
    if ((int)v13 < 4)
    {
      if ((int)v12 <= 0)
      {
        uint64_t v129 = 0;
        unint64_t v130 = 0;
        double v131 = a4 * 0.0;
        *(float *)&double v131 = v4 * 0.0;
        int32x4_t v132 = vdupq_lane_s32(*(int32x2_t *)&v131, 0);
        int32x4_t v133 = v6 + 1;
        unint64_t v134 = 1;
        do
        {
          if (v134 <= v11) {
            unint64_t v135 = v11;
          }
          else {
            unint64_t v135 = v134;
          }
          unint64_t v136 = v130 + 1;
          if (v130 + 1 > v11) {
            unint64_t v137 = v130 + 1;
          }
          else {
            unint64_t v137 = v11;
          }
          unint64_t v138 = v137 - v130;
          if (v138 < 8) {
            goto LABEL_94;
          }
          unint64_t v139 = (v135 + v129) & 0xFFFFFFFFFFFFFFF8;
          v130 += v138 & 0xFFFFFFFFFFFFFFF8;
          uint64_t result = v133;
          do
          {
            result[-1] = v132;
            *uint64_t result = v132;
            result += 2;
            v139 -= 8;
          }
          while (v139);
          if (v138 != (v138 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_94:
            do
              v6->i32[v130++] = LODWORD(v131);
            while (v130 < v11);
          }
          ++v134;
          --v129;
          int32x4_t v133 = (int32x4_t *)((char *)v133 + 4 * v142 + 4);
          unint64_t v6 = (int32x4_t *)((char *)v6 + 4 * v142);
          unint64_t v130 = v136;
        }
        while (v136 != v11);
      }
      else
      {
        uint64_t v82 = 0;
        uint64_t v83 = (float *)(v5 + 8);
        uint64_t v84 = 4 * v81;
        do
        {
          uint64_t v85 = 0;
          float64x2_t v86 = (float *)(v5 + 4 * v81 * v82);
          double v87 = v83;
          do
          {
            double v89 = *v86 * *(v87 - 2) + 0.0;
            if (v13 != 1)
            {
              double v89 = v89 + v86[1] * *(v87 - 1);
              if (v12 != 2) {
                double v89 = v89 + v86[2] * *v87;
              }
            }
            *(float *)&__int32 v88 = v89 * a4;
            v6->i32[v85] = v88;
            double v87 = (float *)((char *)v87 + v84);
            ++v85;
          }
          while (v82 + v85 < v11);
          ++v82;
          uint64_t v83 = (float *)((char *)v83 + v84);
          unint64_t v6 = (int32x4_t *)((char *)v6 + 4 * v142 + 4);
        }
        while (v82 != v11);
      }
      return result;
    }
    unint64_t v90 = 0;
    unint64_t v91 = (v12 - 4);
    uint64_t v92 = (v91 & 0xFFFFFFFC) + 4;
    unint64_t v93 = v12 - (v91 & 0xFFFFFFFC) - 5;
    uint64_t v94 = (v91 >> 2) + 1;
    uint64_t v95 = (v93 + 1) & 0x1FFFFFFF8;
    uint64_t result = (int32x4_t *)(v5 + 32);
    uint64_t v96 = 4 * v81;
    uint64_t v97 = v5 + 8;
LABEL_60:
    uint64_t v98 = v5;
    uint64_t v99 = v97;
    float64x2_t v100 = (const float *)result;
    unint64_t v101 = v90;
    while (v91 >= 0xC)
    {
      double v104 = 0.0;
      uint64_t v105 = v94 & 0x7FFFFFFC;
      uint64_t v106 = v100;
      uint64_t v107 = (const float *)result;
      do
      {
        uint64_t v108 = v107 - 8;
        float32x2x4_t v149 = vld4_f32(v108);
        float32x2x4_t v150 = vld4_f32(v107);
        uint64_t v109 = v106 - 8;
        float32x2x4_t v151 = vld4_f32(v109);
        float32x2x4_t v152 = vld4_f32(v106);
        float64x2_t v110 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v149.val[1]), vcvtq_f64_f32(v151.val[1])), vcvtq_f64_f32(v151.val[0]), vcvtq_f64_f32(v149.val[0])), vcvtq_f64_f32(v151.val[2]), vcvtq_f64_f32(v149.val[2])), vcvtq_f64_f32(v151.val[3]), vcvtq_f64_f32(v149.val[3]));
        float64x2_t v111 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v150.val[1]), vcvtq_f64_f32(v152.val[1])), vcvtq_f64_f32(v152.val[0]), vcvtq_f64_f32(v150.val[0])), vcvtq_f64_f32(v152.val[2]), vcvtq_f64_f32(v150.val[2])), vcvtq_f64_f32(v152.val[3]), vcvtq_f64_f32(v150.val[3]));
        double v104 = v104 + v110.f64[0] + v110.f64[1] + v111.f64[0] + v111.f64[1];
        v107 += 16;
        v106 += 16;
        v105 -= 4;
      }
      while (v105);
      unint64_t v103 = 4 * (v94 & 0x7FFFFFFC);
      if (v94 != (v94 & 0x7FFFFFFC)) {
        goto LABEL_67;
      }
LABEL_69:
      if (v92 < v12)
      {
        if (v93 >= 7)
        {
          uint64_t v116 = 4 * ((v91 & 0xFFFFFFFC) + 4);
          uint64_t v117 = (v93 + 1) & 0x1FFFFFFF8;
          do
          {
            float32x4_t v118 = *(float32x4_t *)(v5 + v116);
            float32x4_t v119 = *(float32x4_t *)(v5 + v116 + 16);
            float64x2_t v120 = vcvtq_f64_f32(*(float32x2_t *)v118.f32);
            float64x2_t v121 = vcvtq_f64_f32(*(float32x2_t *)v119.f32);
            float32x4_t v122 = *(float32x4_t *)(v98 + v116);
            float32x4_t v123 = *(float32x4_t *)(v98 + v116 + 16);
            float64x2_t v124 = vmulq_f64(vcvt_hight_f64_f32(v118), vcvt_hight_f64_f32(v122));
            float64x2_t v125 = vmulq_f64(v120, vcvtq_f64_f32(*(float32x2_t *)v122.f32));
            float64x2_t v126 = vmulq_f64(vcvt_hight_f64_f32(v119), vcvt_hight_f64_f32(v123));
            float64x2_t v127 = vmulq_f64(v121, vcvtq_f64_f32(*(float32x2_t *)v123.f32));
            double v104 = v104
                 + v125.f64[0]
                 + v125.f64[1]
                 + v124.f64[0]
                 + v124.f64[1]
                 + v127.f64[0]
                 + v127.f64[1]
                 + v126.f64[0]
                 + v126.f64[1];
            v116 += 32;
            v117 -= 8;
          }
          while (v117);
          uint64_t v115 = v95 + v92;
          if (v93 + 1 == v95) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v115 = (v91 & 0xFFFFFFFC) + 4;
        }
        uint64_t v128 = 4 * v115;
        do
        {
          double v104 = v104 + *(float *)(v5 + v128) * *(float *)(v98 + v128);
          v128 += 4;
          LODWORD(v115) = v115 + 1;
        }
        while ((int)v12 > (int)v115);
      }
LABEL_61:
      *(float *)&__int32 v102 = v104 * v4;
      v6->i32[v101++] = v102;
      float64x2_t v100 = (const float *)((char *)v100 + v96);
      v99 += v96;
      v98 += v96;
      if (v101 >= v11)
      {
        unint64_t v6 = (int32x4_t *)((char *)v6 + 4 * v142);
        ++v90;
        uint64_t result = (int32x4_t *)((char *)result + v96);
        v5 += v96;
        v97 += v96;
        if (v90 == v11) {
          return result;
        }
        goto LABEL_60;
      }
    }
    unint64_t v103 = 0;
    double v104 = 0.0;
LABEL_67:
    uint64_t v112 = 4 * v103;
    uint64_t v113 = v99;
    uint64_t v114 = v5;
    do
    {
      double v104 = v104
           + *(float *)(v114 + v112 + 4) * *(float *)(v113 + v112 - 4)
           + *(float *)(v114 + v112) * *(float *)(v113 + v112 - 8)
           + *(float *)(v114 + v112 + 8) * *(float *)(v113 + v112)
           + *(float *)(v114 + v112 + 12) * *(float *)(v113 + v112 + 4);
      v103 += 4;
      v114 += 16;
      v113 += 16;
    }
    while (v103 <= v91);
    goto LABEL_69;
  }
  int v14 = *(_DWORD *)(a3 + 12);
  uint64_t result = (int32x4_t *)v145;
  if ((unint64_t)(4 * v12) >= 0x409) {
    operator new[]();
  }
  if ((int)v11 >= 1)
  {
    uint64_t v15 = 0;
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v140 = v13 & 0xFFFFFFF8;
    uint64_t v17 = (float32x4_t *)(v5 + 16);
    uint64_t v18 = v7 + 1;
    uint64_t v19 = (4 * v13) & 0x3FFFFFFE0;
    BOOL v20 = (float *)(v5 + 8);
    uint64_t v21 = v5;
    uint64_t v22 = *(void *)(a3 + 16);
    uint64_t v141 = 4 * v9;
    do
    {
      unint64_t v23 = v5 + v16 * v15;
      if (v14 < (int)v13)
      {
        if ((int)v12 >= 1)
        {
          uint64_t v24 = 0;
          LODWORD(a4) = v7->i32[v9 * v15];
          if (v12 < 8) {
            goto LABEL_95;
          }
          if ((unint64_t)&v145[-v23] < 0x20) {
            goto LABEL_95;
          }
          uint64_t v25 = 0;
          float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          do
          {
            float32x4_t v27 = vsubq_f32(*(float32x4_t *)(v21 + v25 + 16), v26);
            uint64_t v28 = (float32x4_t *)&v145[v25];
            float32x4_t *v28 = vsubq_f32(*(float32x4_t *)(v21 + v25), v26);
            v28[1] = v27;
            v25 += 32;
          }
          while (v19 != v25);
          uint64_t v24 = v13 & 0xFFFFFFF8;
          if (v140 != v13)
          {
LABEL_95:
            do
            {
              *(float *)&v145[4 * v24] = *(float *)(v21 + 4 * v24) - *(float *)&a4;
              ++v24;
            }
            while (v13 != v24);
          }
        }
        goto LABEL_29;
      }
      if ((int)v13 >= 1)
      {
        if (v13 >= 8)
        {
          uint64_t v29 = 0;
          if ((unint64_t)&v145[-v23] >= 0x20 && (unint64_t)(v145 - ((char *)v7 + v141 * v15)) >= 0x20)
          {
            uint64_t v30 = v18;
            float32x4_t v31 = (float32x4_t *)v147;
            uint64_t v32 = v17;
            uint64_t v33 = v13 & 0xFFFFFFF8;
            do
            {
              float32x4_t v34 = vsubq_f32(*v32, *v30);
              v31[-1] = vsubq_f32(v32[-1], v30[-1]);
              *float32x4_t v31 = v34;
              v32 += 2;
              v31 += 2;
              v30 += 2;
              v33 -= 8;
            }
            while (v33);
            uint64_t v29 = v13 & 0xFFFFFFF8;
            if (v140 == v13) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          uint64_t v29 = 0;
        }
        uint64_t v35 = (float *)&v145[4 * v29];
        int32x4_t v36 = (float *)(v22 + 4 * v29);
        uint64_t v37 = (float *)(v21 + 4 * v29);
        uint64_t v38 = v13 - v29;
        do
        {
          float v39 = *v37++;
          float v40 = v39;
          float v41 = *v36++;
          *v35++ = v40 - v41;
          --v38;
        }
        while (v38);
      }
LABEL_29:
      uint64_t v143 = v22;
      float64x2_t v144 = v17;
      uint64_t v42 = v21;
      int16x8_t v43 = v20;
      uint64_t v44 = v15;
      do
      {
        uint64_t v45 = (float32x4_t *)((char *)v7 + 4 * v9 * v44);
        if (v14 < (int)v12)
        {
          float32x4_t v46 = vld1q_dup_f32(v45->f32);
          float32x4_t v148 = v46;
          uint64_t v45 = &v148;
        }
        if ((int)v13 >= 4)
        {
          uint64_t v49 = 0;
          double v48 = 0.0;
          int8x8_t v50 = v43;
          uint64_t v51 = (float *)&v146;
          do
          {
            double v52 = (float)(*(v50 - 2) - v45->f32[0]);
            double v53 = *(v51 - 1) * (float)(*(v50 - 1) - v45->f32[1]);
            float v54 = *v50;
            float v55 = v50[1];
            v50 += 4;
            double v56 = v53 + *(v51 - 2) * v52;
            *(float *)&double v53 = v54 - v45->f32[2];
            float v57 = *v51;
            float v58 = v51[1];
            v51 += 4;
            v49 += 4;
            double v48 = v48 + v56 + v57 * *(float *)&v53 + v58 * (float)(v55 - v45->f32[3]);
            v45 += v14 == v13;
          }
          while (v49 <= (int)v12 - 4);
          int v47 = ((v12 - 4) & 0xFFFFFFFC) + 4;
          if (v47 >= (int)v13) {
            goto LABEL_30;
          }
        }
        else
        {
          int v47 = 0;
          double v48 = 0.0;
          if ((int)v13 <= 0) {
            goto LABEL_30;
          }
        }
        uint64_t v59 = v47;
        uint64_t v60 = (v13 + ~v47);
        if (v60 < 7)
        {
          uint64_t v61 = v59;
          double v62 = (float *)v45;
LABEL_44:
          uint64_t v79 = 4 * v61;
          do
          {
            float v80 = *v62++;
            double v48 = v48 + *(float *)&v145[v79] * (float)(*(float *)(v42 + v79) - v80);
            v79 += 4;
            LODWORD(v61) = v61 + 1;
          }
          while ((int)v13 > (int)v61);
          goto LABEL_30;
        }
        uint64_t v63 = v60 + 1;
        uint64_t v61 = (v63 & 0x1FFFFFFF8) + v59;
        double v62 = &v45->f32[v63 & 0x1FFFFFFF8];
        uint64_t v64 = 4 * v59;
        uint64_t v65 = (float32x4_t *)(v42 + 4 * v59);
        uint64_t v66 = v45 + 1;
        float64x2_t v67 = (float32x4_t *)&v147[v64];
        uint64_t v68 = v63 & 0x1FFFFFFF8;
        do
        {
          float32x4_t v69 = v67[-1];
          float64x2_t v70 = vcvtq_f64_f32(*(float32x2_t *)v69.f32);
          float32x4_t v71 = *v65;
          float32x4_t v72 = v65[1];
          v65 += 2;
          float32x4_t v73 = vsubq_f32(v71, v66[-1]);
          float32x4_t v74 = vsubq_f32(v72, *v66);
          float64x2_t v75 = vmulq_f64(vcvt_hight_f64_f32(v69), vcvt_hight_f64_f32(v73));
          float64x2_t v76 = vmulq_f64(v70, vcvtq_f64_f32(*(float32x2_t *)v73.f32));
          float64x2_t v77 = vmulq_f64(vcvt_hight_f64_f32(*v67), vcvt_hight_f64_f32(v74));
          float64x2_t v78 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v67->f32), vcvtq_f64_f32(*(float32x2_t *)v74.f32));
          double v48 = v48
              + v76.f64[0]
              + v76.f64[1]
              + v75.f64[0]
              + v75.f64[1]
              + v78.f64[0]
              + v78.f64[1]
              + v77.f64[0]
              + v77.f64[1];
          v66 += 2;
          v67 += 2;
          v68 -= 8;
        }
        while (v68);
        if (v63 != (v63 & 0x1FFFFFFF8)) {
          goto LABEL_44;
        }
LABEL_30:
        a4 = v48 * v4;
        *(float *)&a4 = a4;
        v6->i32[v44++] = LODWORD(a4);
        int16x8_t v43 = (float *)((char *)v43 + v16);
        v42 += v16;
      }
      while (v44 != v11);
      ++v15;
      unint64_t v6 = (int32x4_t *)((char *)v6 + 4 * v142);
      uint64_t v17 = (float32x4_t *)((char *)v144 + v16);
      uint64_t v19 = (4 * v13) & 0x3FFFFFFE0;
      uint64_t v18 = (float32x4_t *)((char *)v18 + v141);
      uint64_t v22 = v143 + v141;
      v21 += v16;
      BOOL v20 = (float *)((char *)v20 + v16);
    }
    while (v15 != v11);
  }
  return result;
}

unsigned char *sub_10027AB34(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  double v4 = (float *)a1[2];
  uint64_t v5 = *(int64x2_t **)(a2 + 16);
  unint64_t v6 = *(float64x2_t **)(a3 + 16);
  unint64_t v7 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v9 = (unsigned int *)a1[8];
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (v6) {
    BOOL v12 = *(_DWORD *)(a3 + 12) < (int)v10;
  }
  else {
    BOOL v12 = 0;
  }
  char v13 = !v12;
  unsigned int v14 = 40 * v11;
  if (!v12) {
    unsigned int v14 = 8 * v11;
  }
  uint64_t result = v132;
  if (v14 >= 0x409) {
    operator new[]();
  }
  unint64_t v16 = v7 >> 2;
  uint64_t v17 = *(void *)(a2 + 80) >> 3;
  if ((v13 & 1) == 0)
  {
    uint64_t v18 = (double *)&v132[8 * (int)v11];
    if ((int)v11 < 1) {
      goto LABEL_36;
    }
    BOOL v19 = v11 >= 6 && v8 == 1;
    if (v19 && (v18 < &v6->f64[v11] ? (BOOL v20 = v6 >= (float64x2_t *)&v132[32 * v11 + 8 * (int)v11]) : (BOOL v20 = 1), v20))
    {
      uint64_t v21 = v11 & 0x7FFFFFFC;
      uint64_t v22 = v6 + 1;
      unint64_t v23 = (double *)&v133[8 * (int)v11 + 56];
      uint64_t v24 = v11 & 0xFFFFFFFC;
      do
      {
        v134.val[0] = v22[-1];
        v135.val[0] = *v22;
        v134.val[1] = v134.val[0];
        v134.val[2] = v134.val[0];
        v134.val[3] = v134.val[0];
        v135.val[1] = *v22;
        v135.val[2] = *v22;
        v135.val[3] = *v22;
        uint64_t v25 = v23 - 8;
        vst4q_f64(v25, v134);
        vst4q_f64(v23, v135);
        v22 += 2;
        v23 += 16;
        v24 -= 4;
      }
      while (v24);
      if (v21 == v11)
      {
LABEL_36:
        uint64_t v8 = 4 * (v8 != 0);
        unint64_t v6 = (float64x2_t *)&v132[8 * (int)v11];
        if ((int)v10 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    float32x4_t v26 = (uint64_t *)&v6->f64[v8 * v21];
    uint64_t v27 = v11 - v21;
    uint64_t v28 = (uint64_t *)&v132[32 * v21 + 16 + 8 * (int)v11];
    do
    {
      uint64_t v29 = *v26;
      uint64_t *v28 = *v26;
      v28[1] = v29;
      *(v28 - 2) = v29;
      *(v28 - 1) = v29;
      v26 += v8;
      v28 += 4;
      --v27;
    }
    while (v27);
    goto LABEL_36;
  }
  if (!v6)
  {
    if ((int)v10 < 1) {
      return result;
    }
    uint64_t v77 = (int)v10 - 4;
    if ((int)v11 > 0)
    {
      uint64_t v78 = 0;
      uint64_t v79 = 4 * v16;
      float v80 = (float32x2_t *)(v4 + 2);
      unint64_t v81 = v4;
      while (v11 != 1)
      {
        uint64_t v83 = v11 & 0xFFFFFFFE;
        uint64_t v84 = (double *)v133;
        uint64_t v85 = v81;
        do
        {
          double v86 = v85[v16];
          *(v84 - 1) = *v85;
          *uint64_t v84 = v86;
          v85 += 2 * v16;
          v84 += 2;
          v83 -= 2;
        }
        while (v83);
        uint64_t v82 = v11 & 0xFFFFFFFE;
        if (v82 != v11) {
          goto LABEL_80;
        }
LABEL_82:
        unint64_t v90 = v80;
        uint64_t v91 = v78;
        if (v78 <= v77)
        {
          do
          {
            float64x2_t v92 = 0uLL;
            unint64_t v93 = v90;
            uint64_t v94 = v11;
            uint64_t v95 = (const double *)v132;
            float64x2_t v96 = 0uLL;
            do
            {
              float64x2_t v97 = vld1q_dup_f64(v95++);
              float64x2_t v92 = vmlaq_f64(v92, vcvtq_f64_f32(v93[-1]), v97);
              float64x2_t v96 = vmlaq_f64(v96, vcvtq_f64_f32(*v93), v97);
              unint64_t v93 = (float32x2_t *)((char *)v93 + v79);
              --v94;
            }
            while (v94);
            uint64_t v98 = (float64x2_t *)((char *)v5 + 8 * v91);
            *uint64_t v98 = vmulq_n_f64(v92, a4);
            v98[1] = vmulq_n_f64(v96, a4);
            v91 += 4;
            v90 += 2;
          }
          while ((int)v77 >= (int)v91);
          uint64_t v91 = v91;
          if ((int)v91 >= (int)v10) {
            goto LABEL_74;
          }
LABEL_89:
          uint64_t v99 = &v4[v91];
          do
          {
            double v100 = 0.0;
            unint64_t v101 = v99;
            uint64_t v102 = v11;
            unint64_t v103 = (double *)v132;
            do
            {
              double v104 = *v103++;
              double v100 = v100 + v104 * *v101;
              unint64_t v101 = (float *)((char *)v101 + v79);
              --v102;
            }
            while (v102);
            *(double *)&v5->i64[v91++] = v100 * a4;
            ++v99;
          }
          while ((int)v10 > (int)v91);
          goto LABEL_74;
        }
        uint64_t v91 = v78;
        if ((int)v78 < (int)v10) {
          goto LABEL_89;
        }
LABEL_74:
        ++v78;
        uint64_t v5 = (int64x2_t *)((char *)v5 + 8 * v17);
        ++v81;
        float v80 = (float32x2_t *)((char *)v80 + 4);
        if (v78 == v10) {
          return result;
        }
      }
      uint64_t v82 = 0;
LABEL_80:
      uint64_t v87 = v79 * v82;
      __int32 v88 = (double *)&v132[8 * v82];
      uint64_t v89 = v11 - v82;
      do
      {
        *v88++ = *(float *)((char *)v81 + v87);
        v87 += v79;
        --v89;
      }
      while (v89);
      goto LABEL_82;
    }
    uint64_t v105 = 0;
    double v106 = a4 * 0.0;
    int64x2_t v107 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    int v108 = v10 - 3;
    uint64_t v109 = v5 + 4;
    uint64_t v110 = 8 * v17;
    int v111 = 4;
    for (int i = -1; ; --i)
    {
      if (v111 <= v108) {
        int v113 = v10 - 3;
      }
      else {
        int v113 = v111;
      }
      int v114 = v105 + 4;
      if ((int)v105 + 4 <= v108) {
        int v114 = v10 - 3;
      }
      if (v105 <= v77)
      {
        unsigned int v116 = v114 + ~v105;
        uint64_t v117 = v105;
        if (v116 < 0xC) {
          goto LABEL_107;
        }
        uint64_t v118 = (((v113 + i) >> 2) + 1) & 0x7FFFFFFC;
        uint64_t v119 = (v116 >> 2) + 1;
        uint64_t v117 = v105 + 4 * (v119 & 0x7FFFFFFC);
        int v115 = v105;
        float64x2_t v120 = v109;
        do
        {
          v120[-4] = v107;
          v120[-3] = v107;
          v120[-2] = v107;
          v120[-1] = v107;
          *float64x2_t v120 = v107;
          v120[1] = v107;
          v120[2] = v107;
          v120[3] = v107;
          v120 += 8;
          v115 += 16;
          v118 -= 4;
        }
        while (v118);
        if ((v119 & 0x7FFFFFFC) != v119)
        {
LABEL_107:
          float64x2_t v121 = (double *)&v5->i64[v117];
          int v115 = v117;
          do
          {
            *float64x2_t v121 = v106;
            v121[1] = v106;
            v121[2] = v106;
            v121[3] = v106;
            v115 += 4;
            v121 += 4;
          }
          while ((int)v77 >= v115);
        }
      }
      else
      {
        int v115 = v105;
      }
      if (v115 >= (int)v10) {
        goto LABEL_95;
      }
      uint64_t v122 = v115;
      uint64_t v123 = (v10 + ~v115);
      if (v123 >= 3)
      {
        uint64_t v125 = v123 + 1;
        uint64_t v126 = (v123 + 1) & 0x1FFFFFFFCLL;
        uint64_t v124 = v126 + v122;
        uint64_t v127 = 8 * v122;
        uint64_t v128 = v126;
        do
        {
          uint64_t v129 = (int64x2_t *)((char *)v5 + v127);
          *uint64_t v129 = v107;
          v129[1] = v107;
          v127 += 32;
          v128 -= 4;
        }
        while (v128);
        if (v125 == v126) {
          goto LABEL_95;
        }
      }
      else
      {
        uint64_t v124 = v122;
      }
      uint64_t v130 = v124;
      do
      {
        *(double *)&v5->i64[v130++] = v106;
        LODWORD(v124) = v124 + 1;
      }
      while ((int)v10 > (int)v124);
LABEL_95:
      ++v105;
      uint64_t v109 = (int64x2_t *)((char *)v109 + v110 + 8);
      ++v111;
      uint64_t v5 = (int64x2_t *)((char *)v5 + v110);
      if (v105 == v10) {
        return result;
      }
    }
  }
  uint64_t v18 = 0;
  if ((int)v10 >= 1)
  {
LABEL_37:
    uint64_t v30 = 0;
    uint64_t v31 = (int)v10 - 4;
    uint64_t v32 = 8 * v8;
    uint64_t v33 = 4 * v16;
    int64x2_t v34 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    uint64_t v35 = (float32x2_t *)(v4 + 2);
    uint64_t v36 = 8 * v17;
    uint64_t v37 = (double *)v6;
    uint64_t v38 = v4;
    do
    {
      if (v18)
      {
        uint64_t v39 = v11;
        float v40 = v38;
        float v41 = v18;
        uint64_t v42 = (double *)v132;
        if ((int)v11 >= 1)
        {
          do
          {
            *v42++ = *v40 - *v41;
            float v41 = (double *)((char *)v41 + v32);
            float v40 = (float *)((char *)v40 + v33);
            --v39;
          }
          while (v39);
        }
      }
      else if ((int)v11 >= 1)
      {
        uint64_t v43 = v11;
        uint64_t v44 = v38;
        uint64_t v45 = v37;
        float32x4_t v46 = (double *)v132;
        do
        {
          *v46++ = *v44 - *v45;
          uint64_t v45 = (double *)((char *)v45 + v32);
          uint64_t v44 = (float *)((char *)v44 + v33);
          --v43;
        }
        while (v43);
      }
      LODWORD(v47) = v30;
      double v48 = v35;
      uint64_t v49 = v30;
      if (v30 <= v31)
      {
        do
        {
          float64x2_t v59 = (float64x2_t)v34;
          float64x2_t v60 = (float64x2_t)v34;
          if ((int)v11 >= 1)
          {
            uint64_t v61 = (float64x2_t *)((char *)v6 + 8 * v49);
            if (v18) {
              uint64_t v61 = (float64x2_t *)v18;
            }
            double v62 = v61 + 1;
            float64x2_t v63 = 0uLL;
            uint64_t v64 = v48;
            uint64_t v65 = v11;
            uint64_t v66 = (const double *)v132;
            float64x2_t v67 = 0uLL;
            do
            {
              float64x2_t v68 = vld1q_dup_f64(v66++);
              float64x2_t v63 = vmlaq_f64(v63, vsubq_f64(vcvtq_f64_f32(v64[-1]), v62[-1]), v68);
              float64x2_t v67 = vmlaq_f64(v67, vsubq_f64(vcvtq_f64_f32(*v64), *v62), v68);
              double v62 = (float64x2_t *)((char *)v62 + v32);
              uint64_t v64 = (float32x2_t *)((char *)v64 + v33);
              --v65;
            }
            while (v65);
            float64x2_t v59 = vmulq_n_f64(v63, a4);
            float64x2_t v60 = vmulq_n_f64(v67, a4);
          }
          float v58 = (float64x2_t *)((char *)v5 + 8 * v49);
          *float v58 = v59;
          v58[1] = v60;
          uint64_t v47 = v49 + 4;
          v48 += 2;
          uint64_t v49 = v47;
        }
        while ((int)v31 >= (int)v47);
      }
      if ((int)v47 >= (int)v10) {
        goto LABEL_38;
      }
      uint64_t v50 = v47;
      if ((int)v11 >= 1)
      {
        uint64_t v51 = &v4[v47];
        do
        {
          double v52 = &v6->f64[v50];
          if (v18) {
            double v52 = v18;
          }
          double v53 = 0.0;
          float v54 = v51;
          uint64_t v55 = v11;
          double v56 = (double *)v132;
          do
          {
            double v57 = *v56++;
            double v53 = v53 + v57 * (*v54 - *v52);
            double v52 = (double *)((char *)v52 + v32);
            float v54 = (float *)((char *)v54 + v33);
            --v55;
          }
          while (v55);
          *(double *)&v5->i64[v50++] = v53 * a4;
          ++v51;
        }
        while ((int)v10 > (int)v50);
        goto LABEL_38;
      }
      uint64_t v69 = (v10 + ~v47);
      if (v69 >= 3)
      {
        uint64_t v71 = v69 + 1;
        uint64_t v72 = (v69 + 1) & 0x1FFFFFFFCLL;
        uint64_t v70 = v72 + v50;
        uint64_t v73 = 8 * v50;
        uint64_t v74 = v72;
        do
        {
          float64x2_t v75 = (int64x2_t *)((char *)v5 + v73);
          *float64x2_t v75 = v34;
          v75[1] = v34;
          v73 += 32;
          v74 -= 4;
        }
        while (v74);
        if (v71 == v72) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v70 = v47;
      }
      uint64_t v76 = v70;
      do
      {
        *(double *)&v5->i64[v76++] = a4 * 0.0;
        LODWORD(v70) = v70 + 1;
      }
      while ((int)v10 > (int)v70);
LABEL_38:
      ++v30;
      uint64_t v5 = (int64x2_t *)((char *)v5 + v36);
      ++v38;
      ++v37;
      uint64_t v35 = (float32x2_t *)((char *)v35 + 4);
    }
    while (v30 != v10);
  }
  return result;
}

void sub_10027B2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != v12)
  {
    if (a12) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

int64x2_t *sub_10027B2DC(int64x2_t *result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = result[1].i64[0];
  unint64_t v6 = *(int64x2_t **)(a2 + 16);
  unint64_t v7 = *(float64x2_t **)(a3 + 16);
  unint64_t v8 = (unint64_t)result[5].i64[0] >> 2;
  uint64_t v146 = *(void *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v10 = (unsigned int *)result[4].i64[0];
  unint64_t v11 = *v10;
  uint64_t v12 = (int)v10[1];
  uint64_t v13 = v10[1];
  if (!v7)
  {
    if ((int)v11 < 1) {
      return result;
    }
    if ((int)v13 < 4)
    {
      if ((int)v12 <= 0)
      {
        uint64_t v133 = 0;
        unint64_t v134 = 0;
        double v135 = a4 * 0.0;
        int64x2_t v136 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
        unint64_t v137 = v6 + 1;
        unint64_t v138 = 1;
        do
        {
          if (v138 <= v11) {
            unint64_t v139 = v11;
          }
          else {
            unint64_t v139 = v138;
          }
          unint64_t v140 = v134 + 1;
          if (v134 + 1 > v11) {
            unint64_t v141 = v134 + 1;
          }
          else {
            unint64_t v141 = v11;
          }
          unint64_t v142 = v141 - v134;
          if (v142 < 4) {
            goto LABEL_91;
          }
          unint64_t v143 = (v139 + v133) & 0xFFFFFFFFFFFFFFFCLL;
          v134 += v142 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t result = v137;
          do
          {
            result[-1] = v136;
            *uint64_t result = v136;
            result += 2;
            v143 -= 4;
          }
          while (v143);
          if (v142 != (v142 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_91:
            do
              *(double *)&v6->i64[v134++] = v135;
            while (v134 < v11);
          }
          ++v138;
          --v133;
          unint64_t v137 = (int64x2_t *)((char *)v137 + 8 * v146 + 8);
          unint64_t v6 = (int64x2_t *)((char *)v6 + 8 * v146);
          unint64_t v134 = v140;
        }
        while (v140 != v11);
      }
      else
      {
        uint64_t v87 = 0;
        __int32 v88 = (float *)(v5 + 8);
        uint64_t v89 = 4 * v8;
        do
        {
          uint64_t v90 = 0;
          uint64_t v91 = (float *)(v5 + 4 * v8 * v87);
          double v92 = *v91;
          unint64_t v93 = v88;
          do
          {
            double v94 = v92 * *(v93 - 2) + 0.0;
            if (v13 != 1)
            {
              double v94 = v94 + v91[1] * *(v93 - 1);
              if (v12 != 2) {
                double v94 = v94 + v91[2] * *v93;
              }
            }
            *(double *)&v6->i64[v90] = v94 * a4;
            unint64_t v93 = (float *)((char *)v93 + v89);
            ++v90;
          }
          while (v87 + v90 < v11);
          ++v87;
          __int32 v88 = (float *)((char *)v88 + v89);
          unint64_t v6 = (int64x2_t *)((char *)v6 + 8 * v146 + 8);
        }
        while (v87 != v11);
      }
      return result;
    }
    unint64_t v95 = 0;
    unint64_t v96 = (v12 - 4);
    uint64_t v97 = (v96 & 0xFFFFFFFC) + 4;
    unint64_t v98 = v12 - (v96 & 0xFFFFFFFC) - 5;
    uint64_t v99 = (v96 >> 2) + 1;
    uint64_t v100 = (v98 + 1) & 0x1FFFFFFF8;
    uint64_t result = (int64x2_t *)(v5 + 32);
    uint64_t v101 = 4 * v8;
    uint64_t v102 = v5 + 8;
LABEL_57:
    uint64_t v103 = v5;
    uint64_t v104 = v102;
    uint64_t v105 = (const float *)result;
    unint64_t v106 = v95;
    while (v96 >= 0xC)
    {
      double v108 = 0.0;
      uint64_t v109 = v99 & 0x7FFFFFFC;
      uint64_t v110 = v105;
      int v111 = (const float *)result;
      do
      {
        uint64_t v112 = v111 - 8;
        float32x2x4_t v155 = vld4_f32(v112);
        float32x2x4_t v156 = vld4_f32(v111);
        int v113 = v110 - 8;
        float32x2x4_t v157 = vld4_f32(v113);
        float32x2x4_t v158 = vld4_f32(v110);
        float64x2_t v114 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v155.val[1]), vcvtq_f64_f32(v157.val[1])), vcvtq_f64_f32(v157.val[0]), vcvtq_f64_f32(v155.val[0])), vcvtq_f64_f32(v157.val[2]), vcvtq_f64_f32(v155.val[2])), vcvtq_f64_f32(v157.val[3]), vcvtq_f64_f32(v155.val[3]));
        float64x2_t v115 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(v156.val[1]), vcvtq_f64_f32(v158.val[1])), vcvtq_f64_f32(v158.val[0]), vcvtq_f64_f32(v156.val[0])), vcvtq_f64_f32(v158.val[2]), vcvtq_f64_f32(v156.val[2])), vcvtq_f64_f32(v158.val[3]), vcvtq_f64_f32(v156.val[3]));
        double v108 = v108 + v114.f64[0] + v114.f64[1] + v115.f64[0] + v115.f64[1];
        v111 += 16;
        v110 += 16;
        v109 -= 4;
      }
      while (v109);
      unint64_t v107 = 4 * (v99 & 0x7FFFFFFC);
      if (v99 != (v99 & 0x7FFFFFFC)) {
        goto LABEL_64;
      }
LABEL_66:
      if (v97 < v12)
      {
        if (v98 >= 7)
        {
          uint64_t v120 = 4 * ((v96 & 0xFFFFFFFC) + 4);
          uint64_t v121 = (v98 + 1) & 0x1FFFFFFF8;
          do
          {
            float32x4_t v122 = *(float32x4_t *)(v5 + v120);
            float32x4_t v123 = *(float32x4_t *)(v5 + v120 + 16);
            float64x2_t v124 = vcvtq_f64_f32(*(float32x2_t *)v122.f32);
            float64x2_t v125 = vcvtq_f64_f32(*(float32x2_t *)v123.f32);
            float32x4_t v126 = *(float32x4_t *)(v103 + v120);
            float32x4_t v127 = *(float32x4_t *)(v103 + v120 + 16);
            float64x2_t v128 = vmulq_f64(vcvt_hight_f64_f32(v122), vcvt_hight_f64_f32(v126));
            float64x2_t v129 = vmulq_f64(v124, vcvtq_f64_f32(*(float32x2_t *)v126.f32));
            float64x2_t v130 = vmulq_f64(vcvt_hight_f64_f32(v123), vcvt_hight_f64_f32(v127));
            float64x2_t v131 = vmulq_f64(v125, vcvtq_f64_f32(*(float32x2_t *)v127.f32));
            double v108 = v108
                 + v129.f64[0]
                 + v129.f64[1]
                 + v128.f64[0]
                 + v128.f64[1]
                 + v131.f64[0]
                 + v131.f64[1]
                 + v130.f64[0]
                 + v130.f64[1];
            v120 += 32;
            v121 -= 8;
          }
          while (v121);
          uint64_t v119 = v100 + v97;
          if (v98 + 1 == v100) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v119 = (v96 & 0xFFFFFFFC) + 4;
        }
        uint64_t v132 = 4 * v119;
        do
        {
          double v108 = v108 + *(float *)(v5 + v132) * *(float *)(v103 + v132);
          v132 += 4;
          LODWORD(v119) = v119 + 1;
        }
        while ((int)v12 > (int)v119);
      }
LABEL_58:
      *(double *)&v6->i64[v106++] = v108 * a4;
      uint64_t v105 = (const float *)((char *)v105 + v101);
      v104 += v101;
      v103 += v101;
      if (v106 >= v11)
      {
        unint64_t v6 = (int64x2_t *)((char *)v6 + 8 * v146);
        ++v95;
        uint64_t result = (int64x2_t *)((char *)result + v101);
        v5 += v101;
        v102 += v101;
        if (v95 == v11) {
          return result;
        }
        goto LABEL_57;
      }
    }
    unint64_t v107 = 0;
    double v108 = 0.0;
LABEL_64:
    uint64_t v116 = 4 * v107;
    uint64_t v117 = v104;
    uint64_t v118 = v5;
    do
    {
      double v108 = v108
           + *(float *)(v118 + v116 + 4) * *(float *)(v117 + v116 - 4)
           + *(float *)(v118 + v116) * *(float *)(v117 + v116 - 8)
           + *(float *)(v118 + v116 + 8) * *(float *)(v117 + v116)
           + *(float *)(v118 + v116 + 12) * *(float *)(v117 + v116 + 4);
      v107 += 4;
      v118 += 16;
      v117 += 16;
    }
    while (v107 <= v96);
    goto LABEL_66;
  }
  int v14 = *(_DWORD *)(a3 + 12);
  uint64_t result = (int64x2_t *)v149;
  if ((unint64_t)(8 * v12) >= 0x409) {
    operator new[]();
  }
  if ((int)v11 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v144 = v13 & 0xFFFFFFF8;
    unint64_t v16 = (float32x2_t *)(v5 + 16);
    uint64_t v17 = 4 * v8;
    uint64_t v18 = v7 + 2;
    uint64_t v19 = (4 * v13) & 0x3FFFFFFE0;
    BOOL v20 = (float *)(v5 + 8);
    uint64_t v21 = *(void *)(a3 + 16);
    uint64_t v145 = 8 * v9;
    do
    {
      if (v14 >= (int)v13)
      {
        if ((int)v13 >= 1)
        {
          uint64_t v24 = 0;
          if (v13 < 8) {
            goto LABEL_20;
          }
          if ((unint64_t)((char *)v149 - ((char *)v7 + v145 * v15)) < 0x40) {
            goto LABEL_20;
          }
          uint64_t v25 = v18;
          float32x4_t v26 = (float64x2_t *)v151;
          uint64_t v27 = v16;
          uint64_t v28 = v13 & 0xFFFFFFF8;
          do
          {
            float32x4_t v29 = *(float32x4_t *)v27[-2].f32;
            float64x2_t v31 = v25[-2];
            float64x2_t v30 = v25[-1];
            float64x2_t v33 = *v25;
            float64x2_t v32 = v25[1];
            v25 += 4;
            float64x2_t v34 = vsubq_f64(vcvtq_f64_f32(*v27), v33);
            float64x2_t v35 = vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v27->f32), v32);
            v26[-2] = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v29.f32), v31);
            v26[-1] = vsubq_f64(vcvt_hight_f64_f32(v29), v30);
            float64x2_t *v26 = v34;
            v26[1] = v35;
            v26 += 4;
            v27 += 4;
            v28 -= 8;
          }
          while (v28);
          uint64_t v24 = v13 & 0xFFFFFFF8;
          if (v144 != v13)
          {
LABEL_20:
            uint64_t v36 = (double *)&v149[v24];
            uint64_t v37 = (double *)(v21 + 8 * v24);
            uint64_t v38 = (float *)(v5 + 4 * v24);
            uint64_t v39 = v13 - v24;
            do
            {
              float v40 = *v38++;
              double v41 = v40;
              double v42 = *v37++;
              *v36++ = v41 - v42;
              --v39;
            }
            while (v39);
          }
        }
        goto LABEL_27;
      }
      if ((int)v12 >= 1)
      {
        uint64_t v22 = *(uint64_t *)&v7->f64[v9 * v15];
        if (v12 >= 8)
        {
          uint64_t v43 = 0;
          float64x2_t v44 = (float64x2_t)vdupq_lane_s64(v22, 0);
          uint64_t v45 = (float64x2_t *)v151;
          do
          {
            float32x4_t v46 = *(float32x4_t *)(v5 + v43);
            float32x4_t v47 = *(float32x4_t *)(v5 + v43 + 16);
            v45[-2] = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v46.f32), v44);
            v45[-1] = vsubq_f64(vcvt_hight_f64_f32(v46), v44);
            *uint64_t v45 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v47.f32), v44);
            v45[1] = vsubq_f64(vcvt_hight_f64_f32(v47), v44);
            v45 += 4;
            v43 += 32;
          }
          while (v19 != v43);
          uint64_t v23 = v13 & 0xFFFFFFF8;
          if (v144 == v13) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v23 = 0;
        }
        do
        {
          *(double *)&v149[v23] = *(float *)(v5 + 4 * v23) - *(double *)&v22;
          ++v23;
        }
        while (v13 != v23);
      }
LABEL_27:
      float64x2_t v147 = v18;
      float32x4_t v148 = v16;
      uint64_t v48 = v5;
      uint64_t v49 = v20;
      uint64_t v50 = v15;
      do
      {
        uint64_t v51 = (float64x2_t *)((char *)v7 + 8 * v9 * v50);
        if (v14 < (int)v12)
        {
          double v153 = v51->f64[0];
          double v154 = v153;
          *(double *)float32x2x4_t v152 = v153;
          *(double *)&v152[1] = v153;
          uint64_t v51 = (float64x2_t *)v152;
        }
        if ((int)v13 >= 4)
        {
          uint64_t v54 = 0;
          double v53 = 0.0;
          uint64_t v55 = v49;
          double v56 = (double *)&v150;
          do
          {
            double v57 = *(v56 - 1) * (*(v55 - 1) - v51->f64[1]) + *(v56 - 2) * (*(v55 - 2) - v51->f64[0]);
            float v58 = *v55;
            float v59 = v55[1];
            v55 += 4;
            double v60 = *v56;
            double v61 = v56[1];
            v56 += 4;
            v54 += 4;
            double v53 = v53 + v57 + v60 * (v58 - v51[1].f64[0]) + v61 * (v59 - v51[1].f64[1]);
            v51 += 2 * (v14 == v13);
          }
          while (v54 <= (int)v12 - 4);
          int v52 = ((v12 - 4) & 0xFFFFFFFC) + 4;
          if (v52 >= (int)v13) {
            goto LABEL_28;
          }
        }
        else
        {
          int v52 = 0;
          double v53 = 0.0;
          if ((int)v13 <= 0) {
            goto LABEL_28;
          }
        }
        uint64_t v62 = v52;
        uint64_t v63 = (v13 + ~v52);
        if (v63 < 7)
        {
          uint64_t v64 = v62;
          uint64_t v65 = (double *)v51;
          do
          {
LABEL_42:
            double v86 = *v65++;
            double v53 = v53 + *(double *)&v149[v64] * (*(float *)(v48 + 4 * v64) - v86);
            ++v64;
          }
          while ((int)v13 > (int)v64);
          goto LABEL_28;
        }
        uint64_t v66 = v63 + 1;
        uint64_t v67 = (v63 + 1) & 0x1FFFFFFF8;
        uint64_t v65 = &v51->f64[v67];
        uint64_t v64 = v67 + v62;
        float64x2_t v68 = (float32x4_t *)(v48 + 4 * v62);
        uint64_t v69 = v51 + 2;
        uint64_t v70 = (float64x2_t *)&v151[v62];
        uint64_t v71 = v67;
        do
        {
          float64x2_t v72 = v70[-2];
          float64x2_t v73 = v70[-1];
          float64x2_t v74 = *v70;
          float64x2_t v75 = v70[1];
          v70 += 4;
          float32x4_t v76 = *v68;
          float32x4_t v77 = v68[1];
          v68 += 2;
          float64x2_t v79 = v69[-2];
          float64x2_t v78 = v69[-1];
          float64x2_t v81 = *v69;
          float64x2_t v80 = v69[1];
          v69 += 4;
          float64x2_t v82 = vmulq_f64(v73, vsubq_f64(vcvt_hight_f64_f32(v76), v78));
          float64x2_t v83 = vmulq_f64(v72, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v76.f32), v79));
          float64x2_t v84 = vmulq_f64(v75, vsubq_f64(vcvt_hight_f64_f32(v77), v80));
          float64x2_t v85 = vmulq_f64(v74, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v77.f32), v81));
          double v53 = v53
              + v83.f64[0]
              + v83.f64[1]
              + v82.f64[0]
              + v82.f64[1]
              + v85.f64[0]
              + v85.f64[1]
              + v84.f64[0]
              + v84.f64[1];
          v71 -= 8;
        }
        while (v71);
        if (v66 != v67) {
          goto LABEL_42;
        }
LABEL_28:
        *(double *)&v6->i64[v50++] = v53 * a4;
        uint64_t v49 = (float *)((char *)v49 + v17);
        v48 += v17;
      }
      while (v50 != v11);
      ++v15;
      unint64_t v6 = (int64x2_t *)((char *)v6 + 8 * v146);
      unint64_t v16 = (float32x2_t *)((char *)v148 + v17);
      uint64_t v19 = (4 * v13) & 0x3FFFFFFE0;
      uint64_t v18 = (float64x2_t *)((char *)v147 + v145);
      v21 += v145;
      v5 += v17;
      BOOL v20 = (float *)((char *)v20 + v17);
    }
    while (v15 != v11);
  }
  return result;
}

unsigned char *sub_10027BBE4(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  double v4 = (void *)a1[2];
  uint64_t v5 = *(int64x2_t **)(a2 + 16);
  unint64_t v6 = *(float64x2_t **)(a3 + 16);
  unint64_t v7 = a1[10];
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v9 = (unsigned int *)a1[8];
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  if (v6) {
    BOOL v12 = *(_DWORD *)(a3 + 12) < (int)v10;
  }
  else {
    BOOL v12 = 0;
  }
  char v13 = !v12;
  unsigned int v14 = 40 * v11;
  if (!v12) {
    unsigned int v14 = 8 * v11;
  }
  uint64_t result = v127;
  if (v14 >= 0x409) {
    operator new[]();
  }
  unint64_t v16 = v7 >> 3;
  uint64_t v17 = *(void *)(a2 + 80) >> 3;
  if ((v13 & 1) == 0)
  {
    uint64_t v18 = (double *)&v127[8 * (int)v11];
    if ((int)v11 < 1) {
      goto LABEL_36;
    }
    BOOL v19 = v11 >= 6 && v8 == 1;
    if (v19 && (v18 < &v6->f64[v11] ? (BOOL v20 = v6 >= (float64x2_t *)&v127[32 * v11 + 8 * (int)v11]) : (BOOL v20 = 1), v20))
    {
      uint64_t v21 = v11 & 0x7FFFFFFC;
      uint64_t v22 = v6 + 1;
      uint64_t v23 = (double *)&v127[8 * (int)v11 + 64];
      uint64_t v24 = v11 & 0xFFFFFFFC;
      do
      {
        v128.val[0] = v22[-1];
        v129.val[0] = *v22;
        v128.val[1] = v128.val[0];
        v128.val[2] = v128.val[0];
        v128.val[3] = v128.val[0];
        v129.val[1] = *v22;
        v129.val[2] = *v22;
        v129.val[3] = *v22;
        uint64_t v25 = v23 - 8;
        vst4q_f64(v25, v128);
        vst4q_f64(v23, v129);
        v22 += 2;
        v23 += 16;
        v24 -= 4;
      }
      while (v24);
      if (v21 == v11)
      {
LABEL_36:
        uint64_t v8 = 4 * (v8 != 0);
        unint64_t v6 = (float64x2_t *)&v127[8 * (int)v11];
        if ((int)v10 < 1) {
          return result;
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    float32x4_t v26 = (uint64_t *)&v6->f64[v8 * v21];
    uint64_t v27 = v11 - v21;
    uint64_t v28 = (uint64_t *)&v127[32 * v21 + 16 + 8 * (int)v11];
    do
    {
      uint64_t v29 = *v26;
      uint64_t *v28 = *v26;
      v28[1] = v29;
      *(v28 - 2) = v29;
      *(v28 - 1) = v29;
      v26 += v8;
      v28 += 4;
      --v27;
    }
    while (v27);
    goto LABEL_36;
  }
  if (!v6)
  {
    if ((int)v10 < 1) {
      return result;
    }
    uint64_t v77 = (int)v10 - 4;
    if ((int)v11 > 0)
    {
      uint64_t v78 = 0;
      uint64_t v79 = 8 * v16;
      float64x2_t v80 = (float64x2_t *)(v4 + 2);
      for (int i = v4; ; ++i)
      {
        uint64_t v82 = v11;
        float64x2_t v83 = v127;
        float64x2_t v84 = i;
        do
        {
          *v83++ = *v84;
          float64x2_t v84 = (void *)((char *)v84 + v79);
          --v82;
        }
        while (v82);
        float64x2_t v85 = v80;
        uint64_t v86 = v78;
        if (v78 <= v77) {
          break;
        }
        uint64_t v86 = v78;
        if ((int)v78 < (int)v10) {
          goto LABEL_84;
        }
LABEL_74:
        ++v78;
        uint64_t v5 = (int64x2_t *)((char *)v5 + 8 * v17);
        float64x2_t v80 = (float64x2_t *)((char *)v80 + 8);
        if (v78 == v10) {
          return result;
        }
      }
      do
      {
        float64x2_t v87 = 0uLL;
        __int32 v88 = v85;
        uint64_t v89 = v11;
        uint64_t v90 = (const double *)v127;
        float64x2_t v91 = 0uLL;
        do
        {
          float64x2_t v92 = vld1q_dup_f64(v90++);
          float64x2_t v87 = vmlaq_f64(v87, v88[-1], v92);
          float64x2_t v91 = vmlaq_f64(v91, *v88, v92);
          __int32 v88 = (float64x2_t *)((char *)v88 + v79);
          --v89;
        }
        while (v89);
        unint64_t v93 = (float64x2_t *)((char *)v5 + 8 * v86);
        *unint64_t v93 = vmulq_n_f64(v87, a4);
        v93[1] = vmulq_n_f64(v91, a4);
        v86 += 4;
        v85 += 2;
      }
      while ((int)v77 >= (int)v86);
      uint64_t v86 = v86;
      if ((int)v86 >= (int)v10) {
        goto LABEL_74;
      }
LABEL_84:
      double v94 = (double *)&v4[v86];
      do
      {
        double v95 = 0.0;
        unint64_t v96 = v94;
        uint64_t v97 = v11;
        unint64_t v98 = (double *)v127;
        do
        {
          double v99 = *v98++;
          double v95 = v95 + v99 * *v96;
          unint64_t v96 = (double *)((char *)v96 + v79);
          --v97;
        }
        while (v97);
        *(double *)&v5->i64[v86++] = v95 * a4;
        ++v94;
      }
      while ((int)v10 > (int)v86);
      goto LABEL_74;
    }
    uint64_t v100 = 0;
    double v101 = a4 * 0.0;
    int64x2_t v102 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    int v103 = v10 - 3;
    uint64_t v104 = v5 + 4;
    uint64_t v105 = 8 * v17;
    int v106 = 4;
    for (int j = -1; ; --j)
    {
      if (v106 <= v103) {
        int v108 = v10 - 3;
      }
      else {
        int v108 = v106;
      }
      int v109 = v100 + 4;
      if ((int)v100 + 4 <= v103) {
        int v109 = v10 - 3;
      }
      if (v100 <= v77)
      {
        unsigned int v111 = v109 + ~v100;
        uint64_t v112 = v100;
        if (v111 < 0xC) {
          goto LABEL_102;
        }
        uint64_t v113 = (((v108 + j) >> 2) + 1) & 0x7FFFFFFC;
        uint64_t v114 = (v111 >> 2) + 1;
        uint64_t v112 = v100 + 4 * (v114 & 0x7FFFFFFC);
        int v110 = v100;
        float64x2_t v115 = v104;
        do
        {
          v115[-4] = v102;
          v115[-3] = v102;
          v115[-2] = v102;
          v115[-1] = v102;
          *float64x2_t v115 = v102;
          v115[1] = v102;
          v115[2] = v102;
          v115[3] = v102;
          v115 += 8;
          v110 += 16;
          v113 -= 4;
        }
        while (v113);
        if ((v114 & 0x7FFFFFFC) != v114)
        {
LABEL_102:
          uint64_t v116 = (double *)&v5->i64[v112];
          int v110 = v112;
          do
          {
            *uint64_t v116 = v101;
            v116[1] = v101;
            v116[2] = v101;
            v116[3] = v101;
            v110 += 4;
            v116 += 4;
          }
          while ((int)v77 >= v110);
        }
      }
      else
      {
        int v110 = v100;
      }
      if (v110 >= (int)v10) {
        goto LABEL_90;
      }
      uint64_t v117 = v110;
      uint64_t v118 = (v10 + ~v110);
      if (v118 >= 3)
      {
        uint64_t v120 = v118 + 1;
        uint64_t v121 = (v118 + 1) & 0x1FFFFFFFCLL;
        uint64_t v119 = v121 + v117;
        uint64_t v122 = 8 * v117;
        uint64_t v123 = v121;
        do
        {
          float64x2_t v124 = (int64x2_t *)((char *)v5 + v122);
          *float64x2_t v124 = v102;
          v124[1] = v102;
          v122 += 32;
          v123 -= 4;
        }
        while (v123);
        if (v120 == v121) {
          goto LABEL_90;
        }
      }
      else
      {
        uint64_t v119 = v117;
      }
      uint64_t v125 = v119;
      do
      {
        *(double *)&v5->i64[v125++] = v101;
        LODWORD(v119) = v119 + 1;
      }
      while ((int)v10 > (int)v119);
LABEL_90:
      ++v100;
      uint64_t v104 = (int64x2_t *)((char *)v104 + v105 + 8);
      ++v106;
      uint64_t v5 = (int64x2_t *)((char *)v5 + v105);
      if (v100 == v10) {
        return result;
      }
    }
  }
  uint64_t v18 = 0;
  if ((int)v10 >= 1)
  {
LABEL_37:
    uint64_t v30 = 0;
    uint64_t v31 = (int)v10 - 4;
    uint64_t v32 = 8 * v8;
    uint64_t v33 = 8 * v16;
    int64x2_t v34 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
    float64x2_t v35 = (float64x2_t *)(v4 + 2);
    uint64_t v36 = 8 * v17;
    uint64_t v37 = (double *)v6;
    uint64_t v38 = (double *)v4;
    do
    {
      if (v18)
      {
        uint64_t v39 = v11;
        float v40 = v38;
        double v41 = v18;
        double v42 = (double *)v127;
        if ((int)v11 >= 1)
        {
          do
          {
            *v42++ = *v40 - *v41;
            double v41 = (double *)((char *)v41 + v32);
            float v40 = (double *)((char *)v40 + v33);
            --v39;
          }
          while (v39);
        }
      }
      else if ((int)v11 >= 1)
      {
        uint64_t v43 = v11;
        float64x2_t v44 = v38;
        uint64_t v45 = v37;
        float32x4_t v46 = (double *)v127;
        do
        {
          *v46++ = *v44 - *v45;
          uint64_t v45 = (double *)((char *)v45 + v32);
          float64x2_t v44 = (double *)((char *)v44 + v33);
          --v43;
        }
        while (v43);
      }
      LODWORD(v47) = v30;
      uint64_t v48 = v35;
      uint64_t v49 = v30;
      if (v30 <= v31)
      {
        do
        {
          float64x2_t v59 = (float64x2_t)v34;
          float64x2_t v60 = (float64x2_t)v34;
          if ((int)v11 >= 1)
          {
            double v61 = (float64x2_t *)((char *)v6 + 8 * v49);
            if (v18) {
              double v61 = (float64x2_t *)v18;
            }
            uint64_t v62 = v61 + 1;
            float64x2_t v63 = 0uLL;
            uint64_t v64 = v48;
            uint64_t v65 = v11;
            uint64_t v66 = (const double *)v127;
            float64x2_t v67 = 0uLL;
            do
            {
              float64x2_t v68 = vld1q_dup_f64(v66++);
              float64x2_t v63 = vmlaq_f64(v63, vsubq_f64(v64[-1], v62[-1]), v68);
              float64x2_t v67 = vmlaq_f64(v67, vsubq_f64(*v64, *v62), v68);
              uint64_t v62 = (float64x2_t *)((char *)v62 + v32);
              uint64_t v64 = (float64x2_t *)((char *)v64 + v33);
              --v65;
            }
            while (v65);
            float64x2_t v59 = vmulq_n_f64(v63, a4);
            float64x2_t v60 = vmulq_n_f64(v67, a4);
          }
          float v58 = (float64x2_t *)((char *)v5 + 8 * v49);
          *float v58 = v59;
          v58[1] = v60;
          uint64_t v47 = v49 + 4;
          v48 += 2;
          uint64_t v49 = v47;
        }
        while ((int)v31 >= (int)v47);
      }
      if ((int)v47 >= (int)v10) {
        goto LABEL_38;
      }
      uint64_t v50 = v47;
      if ((int)v11 >= 1)
      {
        uint64_t v51 = (double *)&v4[v47];
        do
        {
          int v52 = &v6->f64[v50];
          if (v18) {
            int v52 = v18;
          }
          double v53 = 0.0;
          uint64_t v54 = v51;
          uint64_t v55 = v11;
          double v56 = (double *)v127;
          do
          {
            double v57 = *v56++;
            double v53 = v53 + v57 * (*v54 - *v52);
            int v52 = (double *)((char *)v52 + v32);
            uint64_t v54 = (double *)((char *)v54 + v33);
            --v55;
          }
          while (v55);
          *(double *)&v5->i64[v50++] = v53 * a4;
          ++v51;
        }
        while ((int)v10 > (int)v50);
        goto LABEL_38;
      }
      uint64_t v69 = (v10 + ~v47);
      if (v69 >= 3)
      {
        uint64_t v71 = v69 + 1;
        uint64_t v72 = (v69 + 1) & 0x1FFFFFFFCLL;
        uint64_t v70 = v72 + v50;
        uint64_t v73 = 8 * v50;
        uint64_t v74 = v72;
        do
        {
          float64x2_t v75 = (int64x2_t *)((char *)v5 + v73);
          *float64x2_t v75 = v34;
          v75[1] = v34;
          v73 += 32;
          v74 -= 4;
        }
        while (v74);
        if (v71 == v72) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v70 = v47;
      }
      uint64_t v76 = v70;
      do
      {
        *(double *)&v5->i64[v76++] = a4 * 0.0;
        LODWORD(v70) = v70 + 1;
      }
      while ((int)v10 > (int)v70);
LABEL_38:
      ++v30;
      uint64_t v5 = (int64x2_t *)((char *)v5 + v36);
      ++v38;
      ++v37;
      float64x2_t v35 = (float64x2_t *)((char *)v35 + 8);
    }
    while (v30 != v10);
  }
  return result;
}

void sub_10027C2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12 != v12)
  {
    if (a12) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

int64x2_t *sub_10027C310(int64x2_t *result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = result[1].i64[0];
  unint64_t v6 = *(int64x2_t **)(a2 + 16);
  unint64_t v7 = *(float64x2_t **)(a3 + 16);
  unint64_t v8 = result[5].u64[0];
  uint64_t v124 = *(void *)(a2 + 80) >> 3;
  if (*(int *)(a3 + 8) <= 1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)(a3 + 80) >> 3;
  }
  uint64_t v10 = (unsigned int *)result[4].i64[0];
  unint64_t v11 = *v10;
  uint64_t v12 = (int)v10[1];
  uint64_t v13 = v10[1];
  if (!v7)
  {
    if ((int)v11 < 1) {
      return result;
    }
    unint64_t v73 = v8 >> 3;
    if ((int)v13 < 4)
    {
      if ((int)v12 <= 0)
      {
        uint64_t v111 = 0;
        unint64_t v112 = 0;
        double v113 = a4 * 0.0;
        int64x2_t v114 = vdupq_lane_s64(COERCE__INT64(a4 * 0.0), 0);
        float64x2_t v115 = v6 + 1;
        unint64_t v116 = 1;
        do
        {
          if (v116 <= v11) {
            unint64_t v117 = v11;
          }
          else {
            unint64_t v117 = v116;
          }
          unint64_t v118 = v112 + 1;
          if (v112 + 1 > v11) {
            unint64_t v119 = v112 + 1;
          }
          else {
            unint64_t v119 = v11;
          }
          unint64_t v120 = v119 - v112;
          if (v120 < 4) {
            goto LABEL_94;
          }
          unint64_t v121 = (v117 + v111) & 0xFFFFFFFFFFFFFFFCLL;
          v112 += v120 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t result = v115;
          do
          {
            result[-1] = v114;
            *uint64_t result = v114;
            result += 2;
            v121 -= 4;
          }
          while (v121);
          if (v120 != (v120 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_94:
            do
              *(double *)&v6->i64[v112++] = v113;
            while (v112 < v11);
          }
          ++v116;
          --v111;
          float64x2_t v115 = (int64x2_t *)((char *)v115 + 8 * v124 + 8);
          unint64_t v6 = (int64x2_t *)((char *)v6 + 8 * v124);
          unint64_t v112 = v118;
        }
        while (v118 != v11);
      }
      else
      {
        uint64_t v74 = 0;
        float64x2_t v75 = (double *)(v5 + 16);
        uint64_t v76 = 8 * v73;
        do
        {
          uint64_t v77 = 0;
          uint64_t v78 = (double *)(v5 + 8 * v73 * v74);
          uint64_t v79 = v75;
          do
          {
            double v80 = *v78 * *(v79 - 2) + 0.0;
            if (v13 != 1)
            {
              double v80 = v80 + v78[1] * *(v79 - 1);
              if (v12 != 2) {
                double v80 = v80 + v78[2] * *v79;
              }
            }
            *(double *)&v6->i64[v77] = v80 * a4;
            uint64_t v79 = (double *)((char *)v79 + v76);
            ++v77;
          }
          while (v74 + v77 < v11);
          ++v74;
          float64x2_t v75 = (double *)((char *)v75 + v76);
          unint64_t v6 = (int64x2_t *)((char *)v6 + 8 * v124 + 8);
        }
        while (v74 != v11);
      }
      return result;
    }
    unint64_t v81 = 0;
    unint64_t v82 = (v12 - 4);
    uint64_t v83 = (v82 & 0xFFFFFFFC) + 4;
    unint64_t v84 = v12 - (v82 & 0xFFFFFFFC) - 5;
    uint64_t v85 = (v82 >> 2) + 1;
    uint64_t v86 = (v84 + 1) & 0x1FFFFFFFCLL;
    uint64_t result = (int64x2_t *)(v5 + 64);
    uint64_t v87 = 8 * v73;
    uint64_t v88 = v5 + 16;
LABEL_60:
    uint64_t v89 = v5;
    uint64_t v90 = v88;
    float64x2_t v91 = (const double *)result;
    unint64_t v92 = v81;
    while (v82 >= 0xC)
    {
      double v94 = 0.0;
      uint64_t v95 = v85 & 0x7FFFFFFC;
      unint64_t v96 = v91;
      uint64_t v97 = (const double *)result;
      do
      {
        unint64_t v98 = v97 - 8;
        float64x2x4_t v131 = vld4q_f64(v98);
        float64x2x4_t v132 = vld4q_f64(v97);
        double v99 = v96 - 8;
        float64x2x4_t v133 = vld4q_f64(v99);
        float64x2x4_t v134 = vld4q_f64(v96);
        float64x2_t v100 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v131.val[1], v133.val[1]), v133.val[0], v131.val[0]), v133.val[2], v131.val[2]), v133.val[3], v131.val[3]);
        float64x2_t v101 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v132.val[1], v134.val[1]), v134.val[0], v132.val[0]), v134.val[2], v132.val[2]), v134.val[3], v132.val[3]);
        double v94 = v94 + v100.f64[0] + v100.f64[1] + v101.f64[0] + v101.f64[1];
        v97 += 16;
        v96 += 16;
        v95 -= 4;
      }
      while (v95);
      unint64_t v93 = 4 * (v85 & 0x7FFFFFFC);
      if (v85 != (v85 & 0x7FFFFFFC)) {
        goto LABEL_67;
      }
LABEL_69:
      if (v83 < v12)
      {
        if (v84 >= 3)
        {
          uint64_t v106 = 8 * ((v82 & 0xFFFFFFFC) + 4);
          uint64_t v107 = (v84 + 1) & 0x1FFFFFFFCLL;
          do
          {
            float64x2_t v108 = vmulq_f64(*(float64x2_t *)(v88 + v106 - 16), *(float64x2_t *)(v89 + v106));
            float64x2_t v109 = vmulq_f64(*(float64x2_t *)(v88 + v106), *(float64x2_t *)(v89 + v106 + 16));
            double v94 = v94 + v108.f64[0] + v108.f64[1] + v109.f64[0] + v109.f64[1];
            v106 += 32;
            v107 -= 4;
          }
          while (v107);
          uint64_t v105 = v86 + v83;
          if (v84 + 1 == v86) {
            goto LABEL_61;
          }
        }
        else
        {
          uint64_t v105 = (v82 & 0xFFFFFFFC) + 4;
        }
        uint64_t v110 = 8 * v105;
        do
        {
          double v94 = v94 + *(double *)(v5 + v110) * *(double *)(v89 + v110);
          v110 += 8;
          LODWORD(v105) = v105 + 1;
        }
        while ((int)v12 > (int)v105);
      }
LABEL_61:
      *(double *)&v6->i64[v92++] = v94 * a4;
      float64x2_t v91 = (const double *)((char *)v91 + v87);
      v90 += v87;
      v89 += v87;
      if (v92 >= v11)
      {
        unint64_t v6 = (int64x2_t *)((char *)v6 + 8 * v124);
        ++v81;
        uint64_t result = (int64x2_t *)((char *)result + v87);
        v5 += v87;
        v88 += v87;
        if (v81 == v11) {
          return result;
        }
        goto LABEL_60;
      }
    }
    unint64_t v93 = 0;
    double v94 = 0.0;
LABEL_67:
    uint64_t v102 = 8 * v93;
    uint64_t v103 = v90;
    uint64_t v104 = v5;
    do
    {
      double v94 = v94
          + *(double *)(v104 + v102 + 8) * *(double *)(v103 + v102 - 8)
          + *(double *)(v104 + v102) * *(double *)(v103 + v102 - 16)
          + *(double *)(v104 + v102 + 16) * *(double *)(v103 + v102)
          + *(double *)(v104 + v102 + 24) * *(double *)(v103 + v102 + 8);
      v93 += 4;
      v104 += 32;
      v103 += 32;
    }
    while (v93 <= v82);
    goto LABEL_69;
  }
  int v14 = *(_DWORD *)(a3 + 12);
  uint64_t result = (int64x2_t *)v126;
  if ((unint64_t)(8 * v12) >= 0x409) {
    operator new[]();
  }
  if ((int)v11 >= 1)
  {
    uint64_t v15 = 0;
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v123 = 8 * v9;
    uint64_t v122 = v13 & 0xFFFFFFFC;
    uint64_t v17 = (float64x2_t *)(v5 + 16);
    uint64_t v18 = v7 + 1;
    uint64_t v19 = (8 * v13) & 0x7FFFFFFE0;
    uint64_t v20 = v5;
    uint64_t v21 = v7;
    do
    {
      unint64_t v22 = v5 + v16 * v15;
      if (v14 < (int)v13)
      {
        if ((int)v12 >= 1)
        {
          uint64_t v23 = 0;
          uint64_t v24 = *(uint64_t *)&v7->f64[v9 * v15];
          if (v13 < 4) {
            goto LABEL_95;
          }
          if ((unint64_t)&v126[-v22] < 0x20) {
            goto LABEL_95;
          }
          uint64_t v25 = 0;
          float64x2_t v26 = (float64x2_t)vdupq_lane_s64(v24, 0);
          do
          {
            float64x2_t v27 = vsubq_f64(*(float64x2_t *)(v20 + v25 + 16), v26);
            uint64_t v28 = (float64x2_t *)&v126[v25];
            float64x2_t *v28 = vsubq_f64(*(float64x2_t *)(v20 + v25), v26);
            v28[1] = v27;
            v25 += 32;
          }
          while (v19 != v25);
          uint64_t v23 = v13 & 0xFFFFFFFC;
          if (v122 != v13)
          {
LABEL_95:
            do
            {
              *(double *)&v126[8 * v23] = *(double *)(v20 + 8 * v23) - *(double *)&v24;
              ++v23;
            }
            while (v13 != v23);
          }
        }
        goto LABEL_29;
      }
      if ((int)v13 >= 1)
      {
        if (v12 >= 6)
        {
          uint64_t v29 = 0;
          if ((unint64_t)&v126[-v22] >= 0x20 && (unint64_t)(v126 - ((char *)v7 + v123 * v15)) >= 0x20)
          {
            uint64_t v30 = v18;
            uint64_t v31 = (float64x2_t *)v127;
            uint64_t v32 = v17;
            uint64_t v33 = v13 & 0xFFFFFFFC;
            do
            {
              float64x2_t v34 = vsubq_f64(*v32, *v30);
              v31[-1] = vsubq_f64(v32[-1], v30[-1]);
              *uint64_t v31 = v34;
              v32 += 2;
              v31 += 2;
              v30 += 2;
              v33 -= 4;
            }
            while (v33);
            uint64_t v29 = v13 & 0xFFFFFFFC;
            if (v122 == v13) {
              goto LABEL_29;
            }
          }
        }
        else
        {
          uint64_t v29 = 0;
        }
        float64x2_t v35 = (double *)&v126[8 * v29];
        uint64_t v36 = &v21->f64[v29];
        uint64_t v37 = (double *)(v20 + 8 * v29);
        uint64_t v38 = v13 - v29;
        do
        {
          double v39 = *v37++;
          double v40 = v39;
          double v41 = *v36++;
          *v35++ = v40 - v41;
          --v38;
        }
        while (v38);
      }
LABEL_29:
      uint64_t v125 = v18;
      uint64_t v42 = v20;
      uint64_t v43 = (double *)v17;
      uint64_t v44 = v15;
      do
      {
        uint64_t v45 = (float64x2_t *)((char *)v7 + 8 * v9 * v44);
        if (v14 < (int)v12)
        {
          double v129 = v45->f64[0];
          double v130 = v129;
          *(double *)float64x2x4_t v128 = v129;
          *(double *)&v128[1] = v129;
          uint64_t v45 = (float64x2_t *)v128;
        }
        if ((int)v13 >= 4)
        {
          uint64_t v48 = 0;
          double v47 = 0.0;
          uint64_t v49 = v43;
          uint64_t v50 = (double *)v127;
          do
          {
            double v51 = *(v50 - 1) * (*(v49 - 1) - v45->f64[1]) + *(v50 - 2) * (*(v49 - 2) - v45->f64[0]);
            double v52 = *v49;
            double v53 = v49[1];
            v49 += 4;
            double v54 = *v50;
            double v55 = v50[1];
            v50 += 4;
            v48 += 4;
            double v47 = v47 + v51 + v54 * (v52 - v45[1].f64[0]) + v55 * (v53 - v45[1].f64[1]);
            v45 += 2 * (v14 == v13);
          }
          while (v48 <= (int)v12 - 4);
          int v46 = ((v12 - 4) & 0xFFFFFFFC) + 4;
          if (v46 >= (int)v13) {
            goto LABEL_30;
          }
        }
        else
        {
          int v46 = 0;
          double v47 = 0.0;
          if ((int)v13 <= 0) {
            goto LABEL_30;
          }
        }
        uint64_t v56 = v46;
        uint64_t v57 = (v13 + ~v46);
        if (v57 < 3)
        {
          uint64_t v58 = v56;
          float64x2_t v59 = (double *)v45;
LABEL_44:
          uint64_t v71 = 8 * v58;
          do
          {
            double v72 = *v59++;
            double v47 = v47 + *(double *)&v126[v71] * (*(double *)(v42 + v71) - v72);
            v71 += 8;
            LODWORD(v58) = v58 + 1;
          }
          while ((int)v13 > (int)v58);
          goto LABEL_30;
        }
        uint64_t v60 = v57 + 1;
        uint64_t v61 = (v57 + 1) & 0x1FFFFFFFCLL;
        uint64_t v58 = v61 + v56;
        float64x2_t v59 = &v45->f64[v61];
        uint64_t v62 = 8 * v56;
        float64x2_t v63 = (float64x2_t *)(v42 + v62);
        uint64_t v64 = v45 + 1;
        uint64_t v65 = (float64x2_t *)&v127[v62];
        uint64_t v66 = v61;
        do
        {
          float64x2_t v67 = *v63;
          float64x2_t v68 = v63[1];
          v63 += 2;
          float64x2_t v69 = vmulq_f64(v65[-1], vsubq_f64(v67, v64[-1]));
          float64x2_t v70 = vmulq_f64(*v65, vsubq_f64(v68, *v64));
          double v47 = v47 + v69.f64[0] + v69.f64[1] + v70.f64[0] + v70.f64[1];
          v64 += 2;
          v65 += 2;
          v66 -= 4;
        }
        while (v66);
        if (v60 != v61) {
          goto LABEL_44;
        }
LABEL_30:
        *(double *)&v6->i64[v44++] = v47 * a4;
        uint64_t v43 = (double *)((char *)v43 + v16);
        v42 += v16;
      }
      while (v44 != v11);
      unint64_t v6 = (int64x2_t *)((char *)v6 + 8 * v124);
      ++v15;
      uint64_t v17 = (float64x2_t *)((char *)v17 + v16);
      uint64_t v19 = (8 * v13) & 0x7FFFFFFE0;
      uint64_t v18 = (float64x2_t *)((char *)v125 + v123);
      uint64_t v21 = (float64x2_t *)((char *)v21 + v123);
      v20 += v16;
    }
    while (v15 != v11);
  }
  return result;
}

void sub_10027CAF8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6, double a7)
{
  sub_1002D6AE8(v364, &off_100494F70);
  uint64_t v13 = (int *)*((void *)a1 + 8);
  int v15 = *v13;
  int v14 = v13[1];
  float64x2_t v336 = a1;
  int v16 = *a1;
  unsigned int v17 = v16 & 0xFFF;
  switch(a5 & 3)
  {
    case 1:
      uint64_t v18 = (int *)(a2 + 12);
      uint64_t v19 = (int *)(a2 + 8);
      goto LABEL_6;
    case 2:
      uint64_t v18 = (int *)(a2 + 8);
      uint64_t v19 = (int *)(a2 + 12);
      int v20 = v15;
      break;
    case 3:
      uint64_t v18 = (int *)(a2 + 8);
      uint64_t v19 = (int *)(a2 + 12);
LABEL_6:
      int v20 = v14;
      break;
    default:
      uint64_t v18 = (int *)(a2 + 12);
      uint64_t v19 = (int *)(a2 + 8);
      int v20 = v15;
      break;
  }
  int v21 = *v18;
  int v22 = *v19;
  int v334 = v21;
  int v355 = *v19;
  if (a5) {
    goto LABEL_106;
  }
  BOOL v23 = v22 >= 2 && v22 <= 4;
  if (!v23 || v22 != v21 && v22 != v20) {
    goto LABEL_106;
  }
  if (v17 == 6)
  {
    uint64_t v45 = *(double **)(a4 + 16);
    int v46 = (double *)*((void *)v336 + 2);
    double v47 = *(double **)(a2 + 16);
    uint64_t v48 = *(uint64_t **)(a3 + 16);
    unint64_t v49 = *(void *)(a4 + 80);
    uint64_t v50 = *((void *)v336 + 10) >> 3;
    uint64_t v51 = *(void *)(a2 + 80) >> 3;
    if (v48)
    {
      uint64_t v52 = *(void *)(a3 + 80) >> 3;
      unint64_t v53 = v49 >> 3;
      int v54 = v355;
      if (v355 != 4) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v52 = 0;
      uint64_t v48 = &qword_1004049C0;
      unint64_t v53 = v49 >> 3;
      int v54 = v355;
      if (v355 != 4)
      {
LABEL_29:
        if (v54 == 3)
        {
          if (v21 != 3 || v47 == v45)
          {
            if (v46 == v45) {
              goto LABEL_106;
            }
            if (v48 == &qword_1004049C0) {
              uint64_t v52 = 1;
            }
            if (v21 >= 1)
            {
              uint64_t v181 = 0;
              double v182 = &v45[v53];
              uint64_t v183 = &v45[2 * v53];
              uint64_t v184 = 8 * (v48 != &qword_1004049C0);
              int16x4_t v185 = &v47[v51];
              int16x4_t v186 = &v47[2 * v51];
              do
              {
                uint64_t v187 = v181;
                double v188 = v47[v181];
                double v189 = v185[v181];
                double v190 = v186[v181];
                double v191 = v46[1] * v189 + *v46 * v188 + v46[2] * v190;
                double v192 = v189 * v46[v50 + 1] + v46[v50] * v188 + v46[v50 + 2] * v190;
                double v193 = v189 * v46[(2 * (v50 & 0x1FFFFFFFFFFFFFFFLL)) | 1]
                     + v46[2 * v50] * v188
                     + v46[2 * v50 + 2] * v190;
                v45[v187] = *(double *)v48 * a7 + v191 * a6;
                v182[v187] = *(double *)&v48[v52] * a7 + v192 * a6;
                v183[v187] = *(double *)&v48[2 * v52] * a7 + v193 * a6;
                ++v181;
                uint64_t v48 = (uint64_t *)((char *)v48 + v184);
              }
              while (v21 != v181);
            }
          }
          else if (v20 >= 1)
          {
            uint64_t v108 = 8 * v50;
            float64x2_t v109 = v46 + 1;
            uint64_t v110 = (double *)(v48 + 1);
            uint64_t v111 = 8 * v52;
            unint64_t v112 = v45 + 2;
            uint64_t v113 = 8 * v53;
            do
            {
              double v114 = *(v109 - 1);
              double v115 = v109[1];
              double v116 = *v109 * v47[v51] + v114 * *v47 + v115 * v47[2 * v51];
              double v117 = *v109 * v47[v51 + 1] + v114 * v47[1] + v115 * v47[(2 * (v51 & 0x1FFFFFFFFFFFFFFFLL)) | 1];
              double v118 = *v109 * v47[v51 + 2] + v114 * v47[2] + v115 * v47[2 * v51 + 2];
              *(v112 - 2) = *(v110 - 1) * a7 + v116 * a6;
              *(v112 - 1) = *v110 * a7 + v117 * a6;
              *unint64_t v112 = v110[1] * a7 + v118 * a6;
              float64x2_t v109 = (double *)((char *)v109 + v108);
              uint64_t v110 = (double *)((char *)v110 + v111);
              unint64_t v112 = (double *)((char *)v112 + v113);
              --v20;
            }
            while (v20);
          }
        }
        else
        {
          if (v54 != 2) {
            goto LABEL_106;
          }
          if (v21 != 2 || v47 == v45)
          {
            if (v46 == v45) {
              goto LABEL_106;
            }
            if (v48 == &qword_1004049C0) {
              uint64_t v52 = 1;
            }
            if (v21 >= 1)
            {
              uint64_t v124 = 8 * (v48 != &qword_1004049C0);
              do
              {
                double v125 = v47[v51];
                double v126 = v125 * v46[v50 + 1] + v46[v50] * *v47;
                *uint64_t v45 = *(double *)v48 * a7 + (v46[1] * v125 + *v46 * *v47) * a6;
                v45[v53] = *(double *)&v48[v52] * a7 + v126 * a6;
                ++v45;
                ++v47;
                uint64_t v48 = (uint64_t *)((char *)v48 + v124);
                --v21;
              }
              while (v21);
            }
          }
          else if (v20 >= 1)
          {
            uint64_t v55 = 8 * v53;
            uint64_t v56 = v45 + 1;
            uint64_t v57 = (double *)(v48 + 1);
            uint64_t v58 = 8 * v52;
            float64x2_t v59 = v46 + 1;
            uint64_t v60 = 8 * v50;
            do
            {
              double v61 = *(v59 - 1);
              double v62 = *v59 * v47[v51] + v61 * *v47;
              double v63 = *v59 * v47[v51 + 1] + v61 * v47[1];
              *(v56 - 1) = *(v57 - 1) * a7 + v62 * a6;
              *uint64_t v56 = *v57 * a7 + v63 * a6;
              uint64_t v56 = (double *)((char *)v56 + v55);
              uint64_t v57 = (double *)((char *)v57 + v58);
              float64x2_t v59 = (double *)((char *)v59 + v60);
              --v20;
            }
            while (v20);
          }
        }
        goto LABEL_140;
      }
    }
    if (v21 != 4 || v47 == v45)
    {
      if (v21 > 16 || v46 == v45) {
        goto LABEL_106;
      }
      if (v48 == &qword_1004049C0) {
        uint64_t v52 = 1;
      }
      if (v21 >= 1)
      {
        uint64_t v148 = 0;
        uint64_t v149 = 8 * (v48 != &qword_1004049C0);
        uint64_t v150 = &v45[3 * v53];
        float32x2x4_t v151 = &v45[v53];
        float32x2x4_t v152 = &v45[2 * v53];
        double v153 = &v47[3 * v51];
        double v154 = &v47[v51];
        float32x2x4_t v155 = &v47[2 * v51];
        do
        {
          uint64_t v156 = v148;
          double v157 = v47[v148];
          double v158 = v154[v148];
          double v159 = v155[v148];
          double v160 = v153[v148];
          double v161 = v46[1] * v158 + *v46 * v157 + v46[2] * v159 + v46[3] * v160;
          double v162 = v158 * v46[v50 + 1] + v46[v50] * v157 + v46[v50 + 2] * v159 + v46[v50 + 3] * v160;
          double v163 = v158 * v46[(2 * (v50 & 0x1FFFFFFFFFFFFFFFLL)) | 1]
               + v46[2 * v50] * v157
               + v46[2 * v50 + 2] * v159
               + v46[2 * v50 + 3] * v160;
          double v164 = v158 * v46[3 * v50 + 1] + v46[3 * v50] * v157 + v46[3 * v50 + 2] * v159 + v46[3 * v50 + 3] * v160;
          v45[v156] = *(double *)v48 * a7 + v161 * a6;
          v151[v156] = *(double *)&v48[v52] * a7 + v162 * a6;
          v152[v156] = *(double *)&v48[2 * v52] * a7 + v163 * a6;
          v150[v156] = *(double *)&v48[3 * v52] * a7 + v164 * a6;
          ++v148;
          uint64_t v48 = (uint64_t *)((char *)v48 + v149);
        }
        while (v334 != v148);
      }
    }
    else if (v20 >= 1)
    {
      uint64_t v81 = 8 * v50;
      unint64_t v82 = v46 + 2;
      uint64_t v83 = (double *)(v48 + 2);
      uint64_t v84 = 8 * v52;
      uint64_t v85 = v45 + 2;
      uint64_t v86 = 8 * v53;
      do
      {
        double v87 = *(v82 - 2);
        double v88 = *(v82 - 1);
        double v89 = v82[1];
        double v90 = v88 * v47[v51] + v87 * *v47 + *v82 * v47[2 * v51] + v89 * v47[3 * v51];
        double v91 = v88 * v47[v51 + 1]
            + v87 * v47[1]
            + *v82 * v47[(2 * (v51 & 0x1FFFFFFFFFFFFFFFLL)) | 1]
            + v89 * v47[3 * v51 + 1];
        double v92 = v88 * v47[v51 + 2] + v87 * v47[2] + *v82 * v47[2 * v51 + 2] + v89 * v47[3 * v51 + 2];
        double v93 = v88 * v47[v51 + 3] + v87 * v47[3] + *v82 * v47[2 * v51 + 3] + v89 * v47[3 * v51 + 3];
        *(v85 - 2) = *(v83 - 2) * a7 + v90 * a6;
        *(v85 - 1) = *(v83 - 1) * a7 + v91 * a6;
        *uint64_t v85 = *v83 * a7 + v92 * a6;
        v85[1] = v83[1] * a7 + v93 * a6;
        unint64_t v82 = (double *)((char *)v82 + v81);
        uint64_t v83 = (double *)((char *)v83 + v84);
        uint64_t v85 = (double *)((char *)v85 + v86);
        --v20;
      }
      while (v20);
    }
    goto LABEL_140;
  }
  if (v17 != 5) {
    goto LABEL_106;
  }
  uint64_t v24 = *(float **)(a4 + 16);
  uint64_t v25 = (float *)*((void *)v336 + 2);
  float64x2_t v26 = *(float **)(a2 + 16);
  float64x2_t v27 = *(int **)(a3 + 16);
  unint64_t v28 = *(void *)(a4 + 80);
  uint64_t v29 = *((void *)v336 + 10) >> 2;
  uint64_t v30 = *(void *)(a2 + 80) >> 2;
  if (v27)
  {
    uint64_t v31 = *(void *)(a3 + 80) >> 2;
    unint64_t v32 = v28 >> 2;
    int v33 = v355;
    if (v355 != 4) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v31 = 0;
    float64x2_t v27 = &dword_1004049E0;
    unint64_t v32 = v28 >> 2;
    int v33 = v355;
    if (v355 != 4)
    {
LABEL_19:
      if (v33 != 3)
      {
        if (v33 == 2)
        {
          if (v21 == 2 && v26 != v24)
          {
            if (v20 >= 1)
            {
              uint64_t v34 = 4 * v32;
              float64x2_t v35 = v24 + 1;
              uint64_t v36 = v25 + 1;
              uint64_t v37 = 4 * v29;
              uint64_t v38 = (float *)(v27 + 1);
              uint64_t v39 = 4 * v31;
              do
              {
                float v40 = *(v36 - 1);
                float v41 = (float)(*v36 * v26[v30]) + (float)(v40 * *v26);
                float v42 = (float)(*v36 * v26[v30 + 1]) + (float)(v40 * v26[1]);
                float v43 = *(v38 - 1) * a7 + v41 * a6;
                *(v35 - 1) = v43;
                float v44 = *v38 * a7 + v42 * a6;
                *float64x2_t v35 = v44;
                float64x2_t v35 = (float *)((char *)v35 + v34);
                uint64_t v36 = (float *)((char *)v36 + v37);
                uint64_t v38 = (float *)((char *)v38 + v39);
                --v20;
              }
              while (v20);
            }
            goto LABEL_140;
          }
          if (v25 != v24)
          {
            if (v27 == &dword_1004049E0) {
              uint64_t v31 = 1;
            }
            if (v21 >= 1)
            {
              uint64_t v119 = 4 * (v27 != &dword_1004049E0);
              do
              {
                float v120 = v26[v30];
                float v121 = (float)(v120 * v25[v29 + 1]) + (float)(v25[v29] * *v26);
                float v122 = *(float *)v27 * a7 + (float)((float)(v25[1] * v120) + (float)(*v25 * *v26)) * a6;
                *uint64_t v24 = v122;
                float v123 = *(float *)&v27[v31] * a7 + v121 * a6;
                v24[v32] = v123;
                ++v24;
                ++v26;
                float64x2_t v27 = (int *)((char *)v27 + v119);
                --v21;
              }
              while (v21);
            }
            goto LABEL_140;
          }
        }
        goto LABEL_106;
      }
      if (v21 == 3 && v26 != v24)
      {
        if (v20 >= 1)
        {
          uint64_t v94 = 4 * v31;
          uint64_t v95 = (float *)(v27 + 1);
          unint64_t v96 = v25 + 1;
          uint64_t v97 = 4 * v29;
          unint64_t v98 = v24 + 2;
          uint64_t v99 = 4 * v32;
          do
          {
            float v100 = *(v96 - 1);
            float v101 = v96[1];
            float v102 = (float)((float)(*v96 * v26[v30]) + (float)(v100 * *v26)) + (float)(v101 * v26[2 * v30]);
            float v103 = (float)((float)(*v96 * v26[v30 + 1]) + (float)(v100 * v26[1]))
                 + (float)(v101 * v26[(2 * (v30 & 0x3FFFFFFFFFFFFFFFLL)) | 1]);
            float v104 = (float)((float)(*v96 * v26[v30 + 2]) + (float)(v100 * v26[2])) + (float)(v101 * v26[2 * v30 + 2]);
            float v105 = *(v95 - 1) * a7 + v102 * a6;
            *(v98 - 2) = v105;
            float v106 = *v95 * a7 + v103 * a6;
            *(v98 - 1) = v106;
            float v107 = v95[1] * a7 + v104 * a6;
            *unint64_t v98 = v107;
            uint64_t v95 = (float *)((char *)v95 + v94);
            unint64_t v96 = (float *)((char *)v96 + v97);
            unint64_t v98 = (float *)((char *)v98 + v99);
            --v20;
          }
          while (v20);
        }
        goto LABEL_140;
      }
      if (v25 != v24)
      {
        if (v27 == &dword_1004049E0) {
          uint64_t v31 = 1;
        }
        if (v21 >= 1)
        {
          uint64_t v165 = 0;
          float64x2_t v166 = &v24[v32];
          int32x4_t v167 = &v24[2 * v32];
          float64x2_t v168 = &v26[v30];
          uint64_t v169 = 4 * (v27 != &dword_1004049E0);
          float64x2_t v170 = &v26[2 * v30];
          do
          {
            uint64_t v171 = v165;
            float v172 = v26[v165];
            float v173 = v168[v165];
            float v174 = v170[v165];
            float v175 = (float)((float)(v25[1] * v173) + (float)(*v25 * v172)) + (float)(v25[2] * v174);
            float v176 = (float)((float)(v173 * v25[v29 + 1]) + (float)(v25[v29] * v172)) + (float)(v25[v29 + 2] * v174);
            float v177 = (float)((float)(v173 * v25[(2 * (v29 & 0x3FFFFFFFFFFFFFFFLL)) | 1]) + (float)(v25[2 * v29] * v172))
                 + (float)(v25[2 * v29 + 2] * v174);
            float v178 = *(float *)v27 * a7 + v175 * a6;
            v24[v171] = v178;
            float v179 = *(float *)&v27[v31] * a7 + v176 * a6;
            v166[v171] = v179;
            float v180 = *(float *)&v27[2 * v31] * a7 + v177 * a6;
            v167[v171] = v180;
            ++v165;
            float64x2_t v27 = (int *)((char *)v27 + v169);
          }
          while (v21 != v165);
        }
        goto LABEL_140;
      }
LABEL_106:
      uint64_t v313 = *(void *)(a3 + 16);
      if (v313) {
        uint64_t v339 = *(void *)(a3 + 80);
      }
      else {
        uint64_t v339 = 0;
      }
      uint64_t v194 = *(void *)(a2 + 80);
      int8x8_t v366 = v368;
      unint64_t v367 = 1032;
      signed int v195 = v17 - 5;
      if (v17 - 5 >= 0xA || ((0x303u >> v195) & 1) == 0)
      {
        v363[0] = 0;
        v363[1] = 0;
        qmemcpy((void *)sub_1002D19D8(v363, 49), "type == (((6) & ((1 << 3) - 1)) + (((2)-1) << 3))", 49);
        sub_1002D2278(-215, v363, "gemmImpl", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matmul.cpp", 1218);
      }
      uint64_t v196 = v195;
      float64x2_t v337 = off_100494FE0[v196];
      float64x2_t v338 = off_100494F90[v196];
      float64x2_t v318 = off_100495030[v196];
      BOOL v198 = v21 == 1 || v355 == 1;
      if ((a5 & 2) == 0 && v198 && (*(unsigned char *)(a2 + 1) & 0x40) != 0)
      {
        if (v21 == 1) {
          uint64_t v194 = 0;
        }
        else {
          uint64_t v194 = (((unsigned __int16)(v16 & 0xFFF) >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
        }
        a5 |= 2u;
      }
      BOOL v200 = (v21 < 65 || v20 < 65) && v355 < 10001;
      if (v200 || v355 < 11 || v20 <= 128 && v21 <= 128 && v355 <= 0x80)
      {
        uint64_t v201 = *((void *)v336 + 2);
        uint64_t v202 = *((void *)v336 + 10);
        uint64_t v203 = *(void *)(a2 + 16);
        uint64_t v204 = *(void *)(a4 + 16);
        uint64_t v205 = *(void *)(a4 + 80);
        v362[0] = v14;
        v362[1] = v15;
        v361[0] = v21;
        v361[1] = v20;
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, _DWORD *, _DWORD *, int))v338)(v201, v202, v203, v194, v313, v339, v204, v205, a6, a7, v362, v361, a5);
LABEL_137:
        if (v366 != v368 && v366) {
          operator delete[]();
        }
        goto LABEL_140;
      }
      if (a5)
      {
        uint64_t v347 = *((void *)v336 + 10);
        uint64_t v312 = ((v17 >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
      }
      else
      {
        uint64_t v312 = *((void *)v336 + 10);
        uint64_t v347 = ((v17 >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
      }
      uint64_t v321 = ((v17 >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3) << ((v16 & 7) == 5);
      if ((a5 & 2) != 0) {
        uint64_t v206 = ((v17 >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
      }
      else {
        uint64_t v206 = v194;
      }
      uint64_t v346 = v206;
      uint64_t v350 = ((v17 >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
      if ((a5 & 2) != 0) {
        uint64_t v207 = v194;
      }
      else {
        uint64_t v207 = ((v17 >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
      }
      uint64_t v320 = v207;
      uint64_t v335 = a2;
      if (!*(void *)(a3 + 16)) {
        goto LABEL_168;
      }
      uint64_t v208 = *(unsigned int *)(a3 + 4);
      if ((int)v208 >= 3)
      {
        uint64_t v210 = *(void *)(a3 + 64);
        unint64_t v211 = (int *)(v210 + 4);
        uint64_t v212 = 1;
        uint64_t v213 = v208 & 0xFFFFFFFE;
        uint64_t v214 = 1;
        do
        {
          v212 *= *(v211 - 1);
          v214 *= *v211;
          v211 += 2;
          v213 -= 2;
        }
        while (v213);
        uint64_t v209 = v214 * v212;
        uint64_t v215 = v208 - (v208 & 0xFFFFFFFE);
        if (v215)
        {
          int16x4_t v216 = (int *)(v210 + ((4 * v208) & 0x3FFFFFFF8));
          do
          {
            uint64_t v217 = *v216++;
            v209 *= v217;
            --v215;
          }
          while (v215);
        }
      }
      else
      {
        uint64_t v209 = *(int *)(a3 + 12) * (uint64_t)*(int *)(a3 + 8);
      }
      if (v208 && v209)
      {
        uint64_t v218 = *(void *)(a3 + 80);
        if ((a5 & 4) != 0) {
          uint64_t v219 = ((v17 >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
        }
        else {
          uint64_t v219 = *(void *)(a3 + 80);
        }
        uint64_t v311 = v219;
        if ((a5 & 4) == 0) {
          uint64_t v218 = ((v17 >> 3) + 1) << ((0xFA50u >> (2 * (v16 & 7))) & 3);
        }
        uint64_t v319 = v218;
        char v220 = a5;
      }
      else
      {
LABEL_168:
        uint64_t v311 = 0;
        uint64_t v319 = 0;
        char v220 = a5 & 0xFB;
      }
      if (v20 >= 128) {
        int v221 = 128;
      }
      else {
        int v221 = v20;
      }
      if (v21 >= 128) {
        int v222 = 128;
      }
      else {
        int v222 = v21;
      }
      int v223 = 0x4000 / v222;
      if (0x4000 / v222 >= 0x4000 / v221) {
        int v223 = 0x4000 / v221;
      }
      int v345 = v223;
      if (v355 < v223) {
        int v223 = v355;
      }
      if (v223 * v221 > 0x4000) {
        int v224 = 0x4000 / v223;
      }
      else {
        int v224 = v221;
      }
      if (v223 * v222 > 0x4000) {
        int v225 = 0x4000 / v223;
      }
      else {
        int v225 = v222;
      }
      int v324 = v225;
      signed int v226 = ((v225 + v225 / 8) & 0xFFFFFFFE) + 2;
      int v353 = v223;
      int v227 = v223 + v223 / 8;
      int v228 = v227 + 1;
      uint64_t v229 = v226 * (uint64_t)(v227 + 1);
      uint64_t v230 = v229 * v350;
      uint64_t v231 = v229 * v321;
      int v315 = v224;
      uint64_t v232 = (int)v350 * (uint64_t)(int)((v227 & 0xFFFFFFFE) + 2) * (v224 + v224 / 8 + 1);
      if (a5) {
        v220 &= ~1u;
      }
      LOBYTE(v349) = v220;
      if (a5) {
        uint64_t v233 = v232;
      }
      else {
        uint64_t v233 = 0;
      }
      unint64_t v234 = v231 + v230 + v233;
      if (v367 >= v234)
      {
        unint64_t v367 = v231 + v230 + v233;
        uint64_t v235 = v366;
      }
      else
      {
        uint64_t v235 = v368;
        if (v366 != v368)
        {
          if (v366) {
            operator delete[]();
          }
          int8x8_t v366 = v368;
        }
        unint64_t v367 = v231 + v230 + v233;
        if (v234 >= 0x409) {
          operator new[]();
        }
      }
      int8x8_t v356 = v235;
      double v344 = &v235[v231];
      float v236 = &v235[v231 + v230];
      float64x2_t v330 = v236;
      if ((a5 & 1) == 0) {
        float v236 = 0;
      }
      float64x2_t v329 = v236;
      if (v20 < 1) {
        goto LABEL_137;
      }
      int v237 = 0;
      int v310 = 8 * v20;
      int v317 = 8 * v21;
      unsigned int v332 = v350 >> 2;
      char v333 = a5;
      int8x8_t v354 = &v235[v231];
      uint64_t v331 = v231 + 16;
      uint64_t v327 = (uint64_t)&v235[((int)v350 + (int)v321) * (uint64_t)v228 * v226 + 8];
      int v314 = v20;
      while (1)
      {
        if (v237 + v315 >= v20 || (int v238 = v315, v315 + 8 * (v237 + v315) > v310)) {
          int v238 = v20 - v237;
        }
        uint64_t v239 = v335;
        int8x8_t v240 = v336;
        int v241 = v355;
        int v316 = v237;
        if (v21 < 1) {
          goto LABEL_202;
        }
        int v242 = 0;
        uint64_t v322 = v313 + v311 * v237;
        uint64_t v326 = v237;
        uint64_t v348 = v312 * v237;
        while (2)
        {
          if (v242 + v324 >= v21 || (int v245 = v324, v324 + 8 * (v242 + v324) > v317)) {
            int v245 = v21 - v242;
          }
          int v246 = 0;
          uint64_t v323 = (int)v350 * (uint64_t)v242;
          uint64_t v341 = v322 + v319 * v242;
          int v247 = v349 & 0xF;
          uint64_t v340 = v245 * (int)v321;
          int v328 = v242;
          unsigned int v349 = v247 | 0x10;
          uint64_t v351 = v320 * v242;
          int v352 = v245;
LABEL_213:
          while (2)
          {
            if (v246 + v353 >= v241 || (int v248 = v353, v353 + 8 * (v246 + v353) > 8 * v355)) {
              int v248 = v355 - v246;
            }
            uint64_t v249 = *((void *)v240 + 2);
            uint64_t v250 = v347 * v246;
            size_t v251 = v249 + v348 + v250;
            uint64_t v252 = *((void *)v240 + 10);
            uint64_t v253 = *(void *)(v239 + 16);
            if (a5)
            {
              int v257 = v350;
              if (v356)
              {
                uint64_t v256 = (int)v350 * (uint64_t)v248;
                if (v238 < 1) {
                  goto LABEL_243;
                }
                switch(v350)
                {
                  case 4:
                    if (v248 > 0)
                    {
                      int v269 = 0;
                      unsigned int v270 = v330;
                      do
                      {
                        uint64_t v271 = 0;
                        uint64_t v272 = 0;
                        do
                        {
                          *(_DWORD *)&v270[v272] = *(_DWORD *)(v251 + v271);
                          v272 += 4;
                          v271 += v252;
                        }
                        while (4 * v248 != v272);
                        ++v269;
                        v270 += v256;
                        v251 += 4;
                      }
                      while (v269 < v238);
                      int v254 = v238;
                      int v255 = v248;
                      size_t v251 = (size_t)v329;
                      goto LABEL_244;
                    }
LABEL_243:
                    int v254 = v238;
                    int v255 = v248;
                    size_t v251 = (size_t)v330;
                    goto LABEL_244;
                  case 8:
                    int v264 = 0;
                    unsigned int v265 = v330;
                    do
                    {
                      if (v248 >= 1)
                      {
                        uint64_t v266 = 0;
                        uint64_t v267 = 0;
                        uint64_t v268 = 0;
                        do
                        {
                          *(void *)&v265[v267] = *(void *)(v251 + v266);
                          v268 += 2;
                          v267 += 8;
                          v266 += v252;
                        }
                        while (v268 < 2 * v248);
                      }
                      ++v264;
                      v265 += v256;
                      v251 += 8;
                    }
                    while (v264 < v238);
                    break;
                  case 0x10:
                    int v258 = 0;
                    uint64_t v259 = v249 + v348 + v250 + 8;
                    unsigned int v260 = (void *)v327;
                    do
                    {
                      if (v248 >= 1)
                      {
                        uint64_t v261 = 0;
                        unsigned int v262 = (void *)v259;
                        unsigned int v263 = v260;
                        do
                        {
                          *(v263 - 1) = *(v262 - 1);
                          void *v263 = *v262;
                          v263 += 2;
                          v261 += 4;
                          unsigned int v262 = (void *)((char *)v262 + v252);
                        }
                        while (v261 < 4 * v248);
                      }
                      ++v258;
                      unsigned int v260 = (void *)((char *)v260 + v256);
                      v259 += 16;
                    }
                    while (v258 < v238);
                    break;
                  default:
                    goto LABEL_243;
                }
                int v254 = v238;
                int v255 = v248;
                size_t v251 = (size_t)v329;
                int v257 = v350;
              }
              else
              {
                int v254 = v248;
                int v255 = v238;
                uint64_t v256 = *((void *)v240 + 10);
              }
            }
            else
            {
              int v254 = v238;
              int v255 = v248;
              uint64_t v256 = *((void *)v240 + 10);
              int v257 = v350;
            }
LABEL_244:
            uint64_t v273 = v346 * v246;
            float64x2_t v274 = (unsigned char *)(v253 + v351 + v273);
            if (v245 >= v21)
            {
              uint64_t v277 = v194;
              if (v355 <= v345) {
                goto LABEL_288;
              }
              goto LABEL_285;
            }
            if ((a5 & 2) != 0) {
              int v275 = v245;
            }
            else {
              int v275 = v248;
            }
            if ((a5 & 2) != 0) {
              int v276 = v248;
            }
            else {
              int v276 = v245;
            }
            uint64_t v277 = v257 * (uint64_t)v276;
            if (v275)
            {
              int v342 = v255;
              int v343 = v247;
              uint64_t v278 = 0;
              int v279 = v276 * v332;
              uint64_t v280 = (int)(v276 * v332 - 4);
              uint64_t v281 = v351 + v253 + v273;
              if (v280 <= 3) {
                unint64_t v282 = 3;
              }
              else {
                unint64_t v282 = v279 - 4;
              }
              uint64_t v283 = (4 * v282) & 0x1FFFFFFF0;
              uint64_t v284 = v331 + v283;
              uint64_t v285 = v351 + 16 + v273 + v283;
              uint64_t v286 = (v282 >> 2) + 1;
              int8x8_t v287 = v344;
              while (1)
              {
                uint64_t v288 = v278 * v277;
                uint64_t v289 = v194 * v278;
                if (v279 < 4)
                {
                  uint64_t v290 = 0;
                  if (v279 > 0) {
                    goto LABEL_274;
                  }
                  goto LABEL_256;
                }
                if (v282 < 0xC) {
                  break;
                }
                if ((unint64_t)v287 < v253 + v285 + v289 && v274 < &v356[v284 + v288]) {
                  break;
                }
                uint64_t v292 = 0;
                uint64_t v293 = v286 & 0x3FFFFFFC;
                do
                {
                  long long v295 = *(_OWORD *)&v274[v292];
                  long long v294 = *(_OWORD *)&v274[v292 + 16];
                  long long v296 = *(_OWORD *)&v274[v292 + 48];
                  int8x8_t v297 = &v287[v292];
                  v297[2] = *(_OWORD *)&v274[v292 + 32];
                  v297[3] = v296;
                  *int8x8_t v297 = v295;
                  v297[1] = v294;
                  v292 += 64;
                  v293 -= 4;
                }
                while (v293);
                uint64_t v290 = 4 * (v286 & 0x3FFFFFFC);
                if (v286 != (v286 & 0x3FFFFFFC)) {
                  goto LABEL_271;
                }
LABEL_273:
                uint64_t v290 = v290;
                if ((int)v290 < v279)
                {
LABEL_274:
                  if (v290 + 1 > v279) {
                    uint64_t v302 = v290 + 1;
                  }
                  else {
                    uint64_t v302 = v279;
                  }
                  uint64_t v303 = v302 - v290;
                  if ((unint64_t)(v302 - v290) < 0xC) {
                    goto LABEL_295;
                  }
                  uint64_t v304 = v281 + v289;
                  uint64_t v305 = 4 * v290;
                  if ((unint64_t)&v354[4 * v290 + v288 - v304 + -4 * v290] < 0x20) {
                    goto LABEL_295;
                  }
                  v290 += v303 & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v306 = v303 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    long long v307 = *(_OWORD *)&v274[v305 + 16];
                    float64x2_t v308 = &v287[v305];
                    *float64x2_t v308 = *(_OWORD *)&v274[v305];
                    v308[1] = v307;
                    v305 += 32;
                    v306 -= 8;
                  }
                  while (v306);
                  if (v303 != (v303 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_295:
                    do
                    {
                      *(_DWORD *)&v287[4 * v290] = *(_DWORD *)&v274[4 * v290];
                      ++v290;
                    }
                    while (v290 < v279);
                  }
                }
LABEL_256:
                v274 += v194;
                v287 += v277;
                ++v278;
                if (!--v275)
                {
                  float64x2_t v274 = v344;
                  int v21 = v334;
                  uint64_t v239 = v335;
                  LOBYTE(a5) = v333;
                  int8x8_t v240 = v336;
                  int v245 = v352;
                  int v247 = v343;
                  int v255 = v342;
                  if (v355 <= v345) {
                    goto LABEL_288;
                  }
LABEL_285:
                  v360[0] = v255;
                  v360[1] = v254;
                  v359[0] = v245;
                  v359[1] = v238;
                  LODWORD(v309) = v247;
                  v337(v251, v256, (int)v274, v277, v356, v340, (int)v360, (int)v359, (int)v309);
                  v246 += v248;
                  int v247 = v349;
                  int v241 = v355;
                  int v245 = v352;
                  if (v246 >= v355)
                  {
                    uint64_t v243 = *(void *)(a4 + 80);
                    uint64_t v244 = *(void *)(a4 + 16) + **(void **)(a4 + 72) * v326;
                    v357[0] = v352;
                    v357[1] = v238;
                    ((void (*)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t, _DWORD *, void, double, double))v318)(v341, v339, v356, v340, v244 + v323, v243, v357, v349, a6, a7);
                    int v245 = v352;
                    goto LABEL_208;
                  }
                  goto LABEL_213;
                }
              }
              uint64_t v290 = 0;
LABEL_271:
              uint64_t v298 = 4 * v290;
              do
              {
                int v299 = *(_DWORD *)&v274[v298 + 4];
                uint64x2_t v300 = &v287[v298];
                *uint64x2_t v300 = *(_DWORD *)&v274[v298];
                v300[1] = v299;
                int v301 = *(_DWORD *)&v274[v298 + 12];
                v300[2] = *(_DWORD *)&v274[v298 + 8];
                v300[3] = v301;
                v290 += 4;
                v298 += 16;
              }
              while (v290 <= v280);
              goto LABEL_273;
            }
            float64x2_t v274 = v344;
            if (v355 > v345) {
              goto LABEL_285;
            }
LABEL_288:
            v358[0] = v255;
            v358[1] = v254;
            v357[2] = v245;
            v357[3] = v238;
            uint64x2_t v309 = v358;
            ((void (*)(double, double))v338)(a6, a7);
            v246 += v248;
            int v247 = v349;
            int v241 = v355;
            int v245 = v352;
            if (v246 < v355) {
              continue;
            }
            break;
          }
LABEL_208:
          int v242 = v245 + v328;
          if (v245 + v328 < v21) {
            continue;
          }
          break;
        }
LABEL_202:
        int v237 = v238 + v316;
        int v20 = v314;
        if (v238 + v316 >= v314) {
          goto LABEL_137;
        }
      }
    }
  }
  if (v21 != 4 || v26 == v24)
  {
    if (v25 == v24) {
      goto LABEL_106;
    }
    if (v27 == &dword_1004049E0) {
      uint64_t v31 = 1;
    }
    if (v21 >= 1)
    {
      uint64_t v127 = 0;
      uint64_t v128 = 4 * (v27 != &dword_1004049E0);
      double v129 = &v24[3 * v32];
      double v130 = &v24[v32];
      float64x2x4_t v131 = &v24[2 * v32];
      float64x2x4_t v132 = &v26[3 * v30];
      float64x2x4_t v133 = &v26[v30];
      float64x2x4_t v134 = &v26[2 * v30];
      do
      {
        uint64_t v135 = v127;
        float v136 = v26[v127];
        float v137 = v133[v127];
        float v138 = v134[v127];
        float v139 = v132[v127];
        float v140 = (float)((float)((float)(v25[1] * v137) + (float)(*v25 * v136)) + (float)(v25[2] * v138))
             + (float)(v25[3] * v139);
        float v141 = (float)((float)((float)(v137 * v25[v29 + 1]) + (float)(v25[v29] * v136)) + (float)(v25[v29 + 2] * v138))
             + (float)(v25[v29 + 3] * v139);
        float v142 = (float)((float)((float)(v137 * v25[(2 * (v29 & 0x3FFFFFFFFFFFFFFFLL)) | 1]) + (float)(v25[2 * v29] * v136))
                     + (float)(v25[2 * v29 + 2] * v138))
             + (float)(v25[2 * v29 + 3] * v139);
        float v143 = (float)((float)((float)(v137 * v25[3 * v29 + 1]) + (float)(v25[3 * v29] * v136))
                     + (float)(v25[3 * v29 + 2] * v138))
             + (float)(v25[3 * v29 + 3] * v139);
        float v144 = *(float *)v27 * a7 + v140 * a6;
        v24[v135] = v144;
        float v145 = *(float *)&v27[v31] * a7 + v141 * a6;
        v130[v135] = v145;
        float v146 = *(float *)&v27[2 * v31] * a7 + v142 * a6;
        v131[v135] = v146;
        float v147 = *(float *)&v27[3 * v31] * a7 + v143 * a6;
        v129[v135] = v147;
        ++v127;
        float64x2_t v27 = (int *)((char *)v27 + v128);
      }
      while (v334 != v127);
    }
  }
  else if (v20 >= 1)
  {
    uint64_t v64 = 4 * v31;
    uint64_t v65 = (float *)(v27 + 2);
    uint64_t v66 = v25 + 2;
    uint64_t v67 = 4 * v29;
    float64x2_t v68 = v24 + 2;
    uint64_t v69 = 4 * v32;
    do
    {
      float v70 = *(v66 - 2);
      float v71 = *(v66 - 1);
      float v72 = v66[1];
      float v73 = (float)((float)((float)(v71 * v26[v30]) + (float)(v70 * *v26)) + (float)(*v66 * v26[2 * v30]))
          + (float)(v72 * v26[3 * v30]);
      float v74 = (float)((float)((float)(v71 * v26[v30 + 1]) + (float)(v70 * v26[1]))
                  + (float)(*v66 * v26[(2 * (v30 & 0x3FFFFFFFFFFFFFFFLL)) | 1]))
          + (float)(v72 * v26[3 * v30 + 1]);
      float v75 = (float)((float)((float)(v71 * v26[v30 + 2]) + (float)(v70 * v26[2])) + (float)(*v66 * v26[2 * v30 + 2]))
          + (float)(v72 * v26[3 * v30 + 2]);
      float v76 = (float)((float)((float)(v71 * v26[v30 + 3]) + (float)(v70 * v26[3])) + (float)(*v66 * v26[2 * v30 + 3]))
          + (float)(v72 * v26[3 * v30 + 3]);
      float v77 = *(v65 - 2) * a7 + v73 * a6;
      *(v68 - 2) = v77;
      float v78 = *(v65 - 1) * a7 + v74 * a6;
      *(v68 - 1) = v78;
      float v79 = *v65 * a7 + v75 * a6;
      float *v68 = v79;
      float v80 = v65[1] * a7 + v76 * a6;
      v68[1] = v80;
      uint64_t v65 = (float *)((char *)v65 + v64);
      uint64_t v66 = (float *)((char *)v66 + v67);
      float64x2_t v68 = (float *)((char *)v68 + v69);
      --v20;
    }
    while (v20);
  }
LABEL_140:
  if (v365) {
    sub_1002D6888(v364);
  }
}

void sub_10027E4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x208] != a13 && STACK[0x208]) {
    operator delete[]();
  }
  if (LODWORD(STACK[0x200])) {
    sub_1002D6888(&a72);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_10027E554(_DWORD *a1, unint64_t a2, _DWORD *a3, unint64_t a4, float *a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int *a11, int *a12, char a13)
{
  double v16 = a10;
  double v17 = a9;
  uint64_t v20 = *a12;
  uint64_t v19 = a12[1];
  int v21 = *a12;
  int v22 = *a11;
  uint64_t v23 = a11[1];
  uint64_t v24 = (float *)v266;
  int v264 = v266;
  uint64_t v265 = 264;
  unint64_t v25 = a2 >> 2;
  unint64_t v26 = a4 >> 2;
  uint64_t v27 = a6 >> 2;
  unint64_t v28 = a8 >> 2;
  uint64_t v29 = a5;
  if ((a13 & 4) != 0) {
    uint64_t v30 = 1;
  }
  else {
    uint64_t v30 = a6 >> 2;
  }
  if ((a13 & 4) == 0) {
    uint64_t v27 = 1;
  }
  if (!a5) {
    uint64_t v30 = 0;
  }
  unint64_t v241 = v28;
  uint64_t v242 = v30;
  if (a5) {
    uint64_t v31 = v27;
  }
  else {
    uint64_t v31 = 0;
  }
  int v245 = v19;
  if (a13)
  {
    uint64_t v33 = 1;
    if (a2 >= 8 && (int)v23 >= 2)
    {
      uint64_t v265 = v23;
      if (v23 >= 0x109) {
        operator new[]();
      }
      uint64_t v33 = 1;
      uint64_t v244 = (float *)v266;
      if ((a13 & 2) == 0) {
        goto LABEL_27;
      }
      goto LABEL_146;
    }
    int v22 = v23;
    uint64_t v32 = a2 >> 2;
    if (v23 == 1) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v32 = 1;
    uint64_t v33 = a2 >> 2;
    if (v22 == 1)
    {
LABEL_13:
      if (a2 < 8 || (int)v23 < 2) {
        goto LABEL_215;
      }
      uint64_t v265 = (int)v19;
      if (v19 >= 0x109) {
        operator new[]();
      }
      if ((int)v19 >= 1)
      {
        if (v19 == 1)
        {
          uint64_t v203 = 0;
        }
        else
        {
          uint64_t v202 = 0;
          uint64_t v203 = v19 & 0xFFFFFFFE;
          uint64_t v204 = a1;
          do
          {
            int v205 = v204[v25];
            uint64_t v206 = &v266[v202];
            *uint64_t v206 = *v204;
            v206[1] = v205;
            v202 += 2;
            v204 += 2 * v25;
          }
          while (v203 != v202);
          if (v203 == v19) {
            goto LABEL_214;
          }
        }
        uint64_t v207 = &a1[v203 * v25];
        do
        {
          v266[v203++] = *v207;
          v207 += v25;
        }
        while (v19 != v203);
      }
LABEL_214:
      a1 = v266;
LABEL_215:
      if (a4 >= 8)
      {
        if ((unint64_t)(int)v20 > 0x108 && v20 >= 0x109) {
          operator new[]();
        }
        if ((int)v20 >= 1)
        {
          uint64_t v208 = 0;
          do
          {
            *(_DWORD *)&v262[v208] = *a3;
            v208 += 4;
            a3 += v26;
          }
          while (4 * v20 != v208);
        }
        a3 = v262;
      }
      if ((int)v19 < 1) {
        goto LABEL_239;
      }
      uint64_t v209 = 0;
      while (1)
      {
        double v210 = *(float *)&a1[v209] * v17;
        if (v21 >= 2)
        {
          uint64_t v213 = 0;
          uint64_t v211 = 0;
          uint64_t v212 = v29;
          do
          {
            double v217 = v210 * *(float *)&a3[v213];
            double v215 = v210 * *(float *)&a3[v213 + 1];
            if (v212)
            {
              float v214 = v217 + *v212 * v16;
              *(float *)(a7 + v213 * 4) = v214;
              double v215 = v215 + v212[v31] * v16;
            }
            else
            {
              float v218 = v217;
              *(float *)(a7 + v213 * 4) = v218;
            }
            float v216 = v215;
            *(float *)(a7 + v213 * 4 + 4) = v216;
            v211 += 2;
            v212 += 2 * v31;
            v213 += 2;
          }
          while (v211 <= (int)v20 - 2);
          uint64_t v211 = v211;
          if ((int)v211 < (int)v20)
          {
            do
            {
LABEL_237:
              double v220 = v210 * *(float *)&a3[v211];
              if (v212) {
                double v220 = v220 + *v212 * v16;
              }
              float v219 = v220;
              *(float *)(a7 + 4 * v211++) = v219;
              v212 += v31;
            }
            while (v20 != v211);
          }
        }
        else
        {
          uint64_t v211 = 0;
          uint64_t v212 = v29;
          if ((int)v20 > 0) {
            goto LABEL_237;
          }
        }
        ++v209;
        v29 += v30;
        a7 += 4 * v241;
        if (v209 == v19) {
          goto LABEL_239;
        }
      }
    }
  }
  uint64_t v24 = 0;
  unint64_t v25 = v32;
  LODWORD(v23) = v22;
  uint64_t v244 = 0;
  if ((a13 & 2) == 0)
  {
LABEL_27:
    if ((unint64_t)(4 * (int)v20) <= 0x640)
    {
      if ((int)v19 < 1) {
        goto LABEL_239;
      }
      int v34 = 0;
      double v35 = a9 * 0.0;
      if (v24) {
        BOOL v36 = (int)v23 < 1;
      }
      else {
        BOOL v36 = 1;
      }
      char v37 = v36;
      uint64_t v38 = 4 * v33;
      uint64_t v39 = 4 * v25;
      BOOL v41 = v23 < 8 || v25 != 1;
      uint64_t v42 = 4 * v26;
LABEL_43:
      if (v24) {
        float v43 = v24;
      }
      else {
        float v43 = (float *)a1;
      }
      if ((v37 & 1) == 0)
      {
        uint64_t v44 = 0;
        if (v41) {
          goto LABEL_50;
        }
        do
        {
          long long v45 = *(_OWORD *)((char *)a1 + v44 + 16);
          int v46 = (_OWORD *)((char *)v24 + v44);
          *int v46 = *(_OWORD *)((char *)a1 + v44);
          v46[1] = v45;
          v44 += 32;
        }
        while (((4 * v23) & 0x3FFFFFFE0) != v44);
        uint64_t v44 = v23 & 0xFFFFFFF8;
        float v43 = v24;
        if (v44 != v23)
        {
LABEL_50:
          uint64_t v47 = v39 * v44;
          do
          {
            v24[v44++] = *(float *)((char *)a1 + v47);
            v47 += v39;
          }
          while (v23 != v44);
          float v43 = v24;
        }
      }
      if ((int)v20 < 4)
      {
        uint64_t v48 = 0;
        unint64_t v49 = v29;
        uint64_t v50 = v29;
        if ((int)v20 > 0) {
          goto LABEL_66;
        }
        goto LABEL_42;
      }
      uint64_t v48 = 0;
      uint64_t v50 = v29;
      uint64_t v51 = a3;
      unint64_t v49 = v50;
      while (1)
      {
        float64x2_t v59 = 0uLL;
        double v60 = 0.0;
        if ((int)v23 < 1)
        {
          double v52 = v17 * 0.0;
          uint64_t v53 = 4 * v48;
          if (!v50) {
            goto LABEL_64;
          }
        }
        else
        {
          double v61 = v51;
          double v62 = v43;
          uint64_t v63 = v23;
          double v64 = 0.0;
          do
          {
            float v65 = *v62++;
            double v64 = v64 + v65 * *(float *)v61;
            float64x2_t v59 = vmlaq_n_f64(v59, vcvtq_f64_f32(*(float32x2_t *)(v61 + 1)), v65);
            double v60 = v60 + v65 * *((float *)v61 + 3);
            double v61 = (_DWORD *)((char *)v61 + v42);
            --v63;
          }
          while (v63);
          double v52 = v64 * v17;
          uint64_t v53 = 4 * v48;
          if (!v50)
          {
LABEL_64:
            float v66 = v52;
            *(float *)(a7 + v53) = v66;
            *(float32x2_t *)(a7 + (v53 | 4)) = vcvt_f32_f64(vmulq_n_f64(v59, v17));
            double v57 = v60 * v17;
            goto LABEL_59;
          }
        }
        float v54 = v52 + *v50 * v16;
        *(float *)(a7 + v53) = v54;
        float v55 = v17 * v59.f64[0] + v50[v31] * v16;
        *(float *)(a7 + (v53 | 4)) = v55;
        float v56 = vmuld_lane_f64(v17, v59, 1) + v50[2 * v31] * v16;
        *(float *)(a7 + (v53 | 8)) = v56;
        double v57 = v60 * v17 + v50[3 * v31] * v16;
LABEL_59:
        float v58 = v57;
        *(float *)(a7 + (v53 | 0xC)) = v58;
        v48 += 4;
        v50 += 4 * v31;
        v51 += 4;
        if (v48 > v21 - 4)
        {
          uint64_t v48 = v48;
          if ((int)v48 < (int)v20)
          {
LABEL_66:
            if ((int)v23 <= 0)
            {
              do
              {
                double v76 = v17 * 0.0;
                if (v50) {
                  double v76 = v35 + *v50 * v16;
                }
                float v75 = v76;
                *(float *)(a7 + 4 * v48++) = v75;
                v50 += v31;
              }
              while (v20 != v48);
            }
            else
            {
              uint64_t v67 = (float *)&a3[v48];
              do
              {
                double v69 = 0.0;
                float v70 = v67;
                float v71 = v43;
                uint64_t v72 = v23;
                do
                {
                  float v73 = *v71++;
                  double v69 = v69 + v73 * *v70;
                  float v70 = (float *)((char *)v70 + v42);
                  --v72;
                }
                while (v72);
                double v74 = v69 * v17;
                if (v50) {
                  double v74 = v74 + *v50 * v16;
                }
                float v68 = v74;
                *(float *)(a7 + 4 * v48++) = v68;
                v50 += v31;
                ++v67;
              }
              while (v48 != v20);
            }
          }
LABEL_42:
          ++v34;
          a1 = (_DWORD *)((char *)a1 + v38);
          uint64_t v29 = &v49[v30];
          a7 += 4 * v28;
          uint64_t v24 = v244;
          if (v34 == v245) {
            goto LABEL_239;
          }
          goto LABEL_43;
        }
      }
    }
    unint64_t v254 = v25;
    if (v20 >= 0x89) {
      operator new[]();
    }
    if ((int)v19 < 1) {
      goto LABEL_239;
    }
    int v77 = 0;
    uint64_t v78 = (int)v20 - 4;
    if (v24) {
      BOOL v79 = (int)v23 < 1;
    }
    else {
      BOOL v79 = 1;
    }
    char v80 = v79;
    char v257 = v80;
    if (v78 <= 3) {
      unint64_t v81 = 3;
    }
    else {
      unint64_t v81 = (int)v20 - 4;
    }
    uint64_t v82 = (v81 >> 2) + 1;
    uint64_t v83 = v82 & 0x7FFFFFFE;
    uint64_t v84 = 4 * v83;
    uint64_t v252 = 4 * v33;
    BOOL v86 = v23 < 8 || v254 != 1;
    BOOL v233 = v86;
    uint64_t v232 = 4 * v254;
    uint64_t v87 = 4 * (a4 >> 2);
    unint64_t v234 = a3 + 2;
    uint64_t v249 = v242;
    int v255 = (const float *)a3;
    uint64_t v88 = 4 * v31;
    uint64_t v236 = v82 & 0x7FFFFFFE;
    unint64_t v238 = v81;
    uint64_t v235 = (v81 >> 2) + 1;
    uint64_t v243 = 4 * v31;
    while (1)
    {
      if (v24) {
        double v89 = v24;
      }
      else {
        double v89 = (float *)a1;
      }
      int v246 = v29;
      if ((v257 & 1) == 0)
      {
        if (v233)
        {
          uint64_t v90 = 0;
LABEL_105:
          uint64_t v94 = v232 * v90;
          do
          {
            v24[v90++] = *(float *)((char *)a1 + v94);
            v94 += v232;
          }
          while (v23 != v90);
          double v89 = v24;
          goto LABEL_108;
        }
        unint64_t v91 = 0;
        do
        {
          long long v92 = *(_OWORD *)&a1[v91 / 4 + 4];
          double v93 = &v24[v91 / 4];
          *(_OWORD *)double v93 = *(_OWORD *)&a1[v91 / 4];
          *((_OWORD *)v93 + 1) = v92;
          v91 += 32;
        }
        while (((4 * v23) & 0x3FFFFFFE0) != v91);
        uint64_t v90 = v23 & 0xFFFFFFF8;
        double v89 = v24;
        if (v90 != v23) {
          goto LABEL_105;
        }
      }
LABEL_108:
      if (v21 >= 1)
      {
        int v260 = v77;
        uint64_t v95 = v84;
        bzero(v262, 8 * v20);
        uint64_t v82 = v235;
        uint64_t v84 = v95;
        uint64_t v88 = v243;
        uint64_t v24 = v244;
        uint64_t v83 = v236;
        unint64_t v81 = v238;
        int v77 = v260;
        int v21 = v20;
        double v17 = a9;
        LODWORD(v19) = v245;
      }
      unint64_t v96 = v255;
      if ((int)v23 >= 1)
      {
        uint64_t v97 = 0;
        unint64_t v98 = v234;
        while (1)
        {
          *(double *)&uint64_t v99 = v89[v97];
          if ((int)v20 < 4)
          {
            uint64_t v100 = 0;
            if ((int)v20 <= 0) {
              goto LABEL_112;
            }
            goto LABEL_124;
          }
          if (v81 < 4) {
            break;
          }
          float64x2_t v102 = (float64x2_t)vdupq_lane_s64(v99, 0);
          uint64_t v103 = v83;
          float v104 = v96;
          float v105 = (double *)v262;
          do
          {
            float64x2x4_t v268 = vld4q_f64(v105);
            float32x2x4_t v267 = vld4_f32(v104);
            v104 += 8;
            v268.val[0] = vmlaq_f64(v268.val[0], v102, vcvtq_f64_f32(v267.val[0]));
            v268.val[1] = vmlaq_f64(v268.val[1], v102, vcvtq_f64_f32(v267.val[1]));
            v268.val[2] = vmlaq_f64(v268.val[2], v102, vcvtq_f64_f32(v267.val[2]));
            v268.val[3] = vmlaq_f64(v268.val[3], v102, vcvtq_f64_f32(v267.val[3]));
            vst4q_f64(v105, v268);
            v105 += 8;
            v103 -= 2;
          }
          while (v103);
          uint64_t v101 = v84;
          if (v82 != v83) {
            goto LABEL_121;
          }
LABEL_123:
          uint64_t v100 = v101;
          if ((int)v101 >= (int)v20) {
            goto LABEL_112;
          }
LABEL_124:
          uint64_t v110 = v20 - v100;
          if ((unint64_t)(v20 - v100) >= 4)
          {
            uint64_t v111 = (v110 & 0xFFFFFFFFFFFFFFFCLL) + v100;
            float64x2_t v112 = (float64x2_t)vdupq_lane_s64(v99, 0);
            uint64_t v113 = (float64x2_t *)&v262[8 * v100 + 16];
            double v114 = (float32x2_t *)&v98[v100];
            unint64_t v115 = v110 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              float64x2_t v116 = vmlaq_f64(*v113, v112, vcvtq_f64_f32(*v114));
              v113[-1] = vmlaq_f64(v113[-1], v112, vcvtq_f64_f32(v114[-1]));
              *uint64_t v113 = v116;
              v113 += 2;
              v114 += 2;
              v115 -= 4;
            }
            while (v115);
            if (v110 == (v110 & 0xFFFFFFFFFFFFFFFCLL)) {
              goto LABEL_112;
            }
          }
          else
          {
            uint64_t v111 = v100;
          }
          do
          {
            *(double *)&v262[8 * v111] = *(double *)&v262[8 * v111] + v96[v111] * *(double *)&v99;
            ++v111;
          }
          while (v20 != v111);
LABEL_112:
          ++v97;
          unint64_t v96 = (const float *)((char *)v96 + v87);
          unint64_t v98 = (_DWORD *)((char *)v98 + v87);
          if (v97 == v23) {
            goto LABEL_131;
          }
        }
        uint64_t v101 = 0;
LABEL_121:
        float v106 = (double *)&v262[8 * v101 + 16];
        uint64_t v107 = 4 * v101 + 8;
        do
        {
          double v108 = *(v106 - 1) + v96[v101 + 1] * *(double *)&v99;
          *(v106 - 2) = *(v106 - 2) + *(const float *)((char *)v96 + v107 - 8) * *(double *)&v99;
          *(v106 - 1) = v108;
          double v109 = v106[1] + *(const float *)((char *)v96 + v107 + 4) * *(double *)&v99;
          *float v106 = *v106 + *(const float *)((char *)v96 + v107) * *(double *)&v99;
          v106[1] = v109;
          v106 += 4;
          v101 += 4;
          v107 += 16;
        }
        while (v101 <= v78);
        goto LABEL_123;
      }
LABEL_131:
      if (v246)
      {
        if (v21 >= 1)
        {
          uint64_t v117 = 0;
          double v118 = v246;
          do
          {
            float v119 = *(double *)&v262[8 * v117] * v17 + *v118 * v16;
            *(float *)(a7 + 4 * v117++) = v119;
            double v118 = (float *)((char *)v118 + v88);
          }
          while (v20 != v117);
        }
        goto LABEL_95;
      }
      if ((int)v20 >= 1)
      {
        if (v21 >= 8)
        {
          uint64_t v121 = 0;
          float v122 = (float64x2_t *)&v263;
          do
          {
            float64x2_t v123 = v122[-2];
            float64x2_t v124 = v122[-1];
            float64x2_t v125 = *v122;
            float64x2_t v126 = v122[1];
            v122 += 4;
            uint64_t v127 = (float32x4_t *)(a7 + v121);
            *uint64_t v127 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v123, v17)), vmulq_n_f64(v124, v17));
            v127[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v125, v17)), vmulq_n_f64(v126, v17));
            v121 += 32;
          }
          while (((4 * v20) & 0x3FFFFFFE0) != v121);
          uint64_t v120 = v20 & 0xFFFFFFF8;
          if (v120 == v20) {
            goto LABEL_95;
          }
        }
        else
        {
          uint64_t v120 = 0;
        }
        do
        {
          float v128 = *(double *)&v262[8 * v120] * v17;
          *(float *)(a7 + 4 * v120++) = v128;
        }
        while (v20 != v120);
      }
LABEL_95:
      ++v77;
      a1 = (_DWORD *)((char *)a1 + v252);
      uint64_t v29 = &v246[v249];
      a7 += 4 * v241;
      if (v77 == v19) {
        goto LABEL_239;
      }
    }
  }
LABEL_146:
  if ((int)v19 < 1) {
    goto LABEL_239;
  }
  if (v21 < 1)
  {
    if (!v24 || (int)v23 < 1) {
      goto LABEL_239;
    }
    if (v23 < 8)
    {
      do
      {
        uint64_t v201 = (float *)a1;
        if (v23 != 1)
        {
          v24[1] = *(float *)&a1[v25];
          if (v23 != 2)
          {
            v24[2] = *(float *)&a1[2 * v25];
            if (v23 != 3)
            {
              v24[3] = *(float *)&a1[3 * v25];
              if (v23 != 4)
              {
                v24[4] = *(float *)&a1[4 * v25];
                if (v23 != 5)
                {
                  v24[5] = *(float *)&a1[5 * v25];
                  if (v23 != 6) {
                    v24[6] = *(float *)&a1[6 * v25];
                  }
                }
              }
            }
          }
        }
        a1 += v33;
        LODWORD(v19) = v19 - 1;
      }
      while (v19);
      *uint64_t v24 = *v201;
      goto LABEL_239;
    }
    int v223 = 0;
    uint64_t v224 = 4 * v25;
    while (1)
    {
      if (v25 == 1)
      {
        unint64_t v225 = 0;
        do
        {
          long long v226 = *(_OWORD *)&a1[v225 / 4 + 4];
          int v227 = &v24[v225 / 4];
          *(_OWORD *)int v227 = *(_OWORD *)&a1[v225 / 4];
          *((_OWORD *)v227 + 1) = v226;
          v225 += 32;
        }
        while (((4 * v23) & 0x3FFFFFFE0) != v225);
        uint64_t v228 = v23 & 0xFFFFFFF8;
        if (v228 == v23) {
          goto LABEL_246;
        }
      }
      else
      {
        uint64_t v228 = 0;
      }
      uint64_t v229 = v23 - v228;
      uint64_t v230 = &v24[v228];
      uint64_t v231 = v224 * v228;
      do
      {
        *v230++ = *(float *)((char *)a1 + v231);
        v231 += v224;
        --v229;
      }
      while (v229);
LABEL_246:
      ++v223;
      a1 += v33;
      if (v223 == v19) {
        goto LABEL_239;
      }
    }
  }
  int v129 = 0;
  uint64_t v130 = (int)v23 - 4;
  if (v24) {
    BOOL v131 = (int)v23 < 1;
  }
  else {
    BOOL v131 = 1;
  }
  char v132 = v131;
  char v240 = v132;
  unint64_t v133 = 3;
  if (v130 > 3) {
    unint64_t v133 = (int)v23 - 4;
  }
  uint64_t v134 = (v133 >> 2) + 1;
  uint64_t v239 = 4 * v33;
  BOOL v136 = v23 < 8 || v25 != 1;
  BOOL v237 = v136;
  uint64_t v137 = 4 * v25;
  uint64_t v138 = 4 * v26;
  while (2)
  {
    if (v24) {
      float v139 = v24;
    }
    else {
      float v139 = (float *)a1;
    }
    if (v240) {
      goto LABEL_176;
    }
    if (v237)
    {
      uint64_t v140 = 0;
    }
    else
    {
      unint64_t v141 = 0;
      do
      {
        long long v142 = *(_OWORD *)&a1[v141 / 4 + 4];
        float v143 = &v24[v141 / 4];
        *(_OWORD *)float v143 = *(_OWORD *)&a1[v141 / 4];
        *((_OWORD *)v143 + 1) = v142;
        v141 += 32;
      }
      while (((4 * v23) & 0x3FFFFFFE0) != v141);
      uint64_t v140 = v23 & 0xFFFFFFF8;
      float v139 = v24;
      if (v140 == v23) {
        goto LABEL_176;
      }
    }
    uint64_t v144 = v137 * v140;
    do
    {
      v24[v140++] = *(float *)((char *)a1 + v144);
      v144 += v137;
    }
    while (v23 != v140);
    float v139 = v24;
LABEL_176:
    uint64_t v145 = 0;
    float v146 = a3;
    float v147 = v29;
    do
    {
      if ((int)v23 < 4)
      {
        int v149 = 0;
        double v150 = 0.0;
        double v151 = 0.0;
        double v152 = 0.0;
        double v153 = 0.0;
        goto LABEL_188;
      }
      if (v133 < 0x1C)
      {
        uint64_t v154 = 0;
        double v153 = 0.0;
        double v152 = 0.0;
        double v151 = 0.0;
        double v150 = 0.0;
LABEL_185:
        uint64_t v181 = 4 * v154 + 8;
        do
        {
          double v150 = v150 + *(float *)((char *)v139 + v181 - 8) * *(float *)((char *)v146 + v181 - 8);
          double v151 = v151 + *(float *)((char *)v139 + v181 - 4) * *(float *)&v146[v154 + 1];
          double v152 = v152 + *(float *)((char *)v139 + v181) * *(float *)((char *)v146 + v181);
          double v153 = v153 + *(float *)((char *)v139 + v181 + 4) * *(float *)((char *)v146 + v181 + 4);
          v154 += 4;
          v181 += 16;
        }
        while (v154 <= v130);
        int v149 = ((v23 - 4) & 0xFFFFFFFC) + 4;
        goto LABEL_188;
      }
      uint64_t v155 = 0;
      double v153 = 0.0;
      uint64_t v156 = v134 & 0x3FFFFFF8;
      double v152 = 0.0;
      double v151 = 0.0;
      double v150 = 0.0;
      do
      {
        double v157 = &v139[v155];
        float32x4x4_t v269 = vld4q_f32(v157);
        v157 += 16;
        float32x4x4_t v270 = vld4q_f32(v157);
        double v158 = (const float *)&v146[v155];
        float32x4x4_t v272 = vld4q_f32(v158);
        v158 += 16;
        float64x2_t v259 = vcvtq_f64_f32(*(float32x2_t *)v269.val[0].f32);
        float64x2_t v258 = vcvt_hight_f64_f32(v269.val[0]);
        float64x2_t v261 = vcvtq_f64_f32(*(float32x2_t *)v270.val[0].f32);
        float64x2_t v256 = vcvtq_f64_f32(*(float32x2_t *)v272.val[0].f32);
        float64x2_t v253 = vcvt_hight_f64_f32(v272.val[0]);
        float64x2_t v251 = vcvtq_f64_f32(*(float32x2_t *)v269.val[1].f32);
        float64x2_t v250 = vcvt_hight_f64_f32(v269.val[1]);
        float64x2_t v159 = vcvt_hight_f64_f32(v270.val[0]);
        float64x2_t v160 = vcvtq_f64_f32(*(float32x2_t *)v270.val[1].f32);
        float64x2_t v161 = vcvtq_f64_f32(*(float32x2_t *)v272.val[1].f32);
        float64x2_t v162 = vcvt_hight_f64_f32(v272.val[1]);
        float64x2_t v163 = vcvtq_f64_f32(*(float32x2_t *)v269.val[2].f32);
        float64x2_t v164 = vcvt_hight_f64_f32(v269.val[2]);
        float64x2_t v165 = vcvt_hight_f64_f32(v270.val[1]);
        float64x2_t v166 = vcvtq_f64_f32(*(float32x2_t *)v270.val[2].f32);
        float64x2_t v167 = vcvtq_f64_f32(*(float32x2_t *)v269.val[3].f32);
        v269.val[0] = (float32x4_t)vcvt_hight_f64_f32(v269.val[3]);
        v269.val[1] = (float32x4_t)vcvt_hight_f64_f32(v270.val[2]);
        v269.val[2] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v270.val[3].f32);
        v269.val[3] = (float32x4_t)vcvt_hight_f64_f32(v270.val[3]);
        float32x4x4_t v271 = vld4q_f32(v158);
        float64x2_t v168 = vcvtq_f64_f32(*(float32x2_t *)v272.val[2].f32);
        float64x2_t v169 = vcvt_hight_f64_f32(v272.val[2]);
        float64x2_t v170 = vcvtq_f64_f32(*(float32x2_t *)v272.val[3].f32);
        v272.val[0] = (float32x4_t)vcvt_hight_f64_f32(v272.val[3]);
        v272.val[1] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v271.val[0].f32);
        v272.val[2] = (float32x4_t)vcvt_hight_f64_f32(v271.val[0]);
        v272.val[3] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v271.val[1].f32);
        float64x2_t v171 = vcvt_hight_f64_f32(v271.val[1]);
        float64x2_t v172 = vcvtq_f64_f32(*(float32x2_t *)v271.val[2].f32);
        float64x2_t v173 = vcvt_hight_f64_f32(v271.val[2]);
        float64x2_t v174 = vcvtq_f64_f32(*(float32x2_t *)v271.val[3].f32);
        v271.val[0] = (float32x4_t)vcvt_hight_f64_f32(v271.val[3]);
        v271.val[1] = (float32x4_t)vmulq_f64(v258, v253);
        v271.val[2] = (float32x4_t)vmulq_f64(v259, v256);
        v271.val[3] = (float32x4_t)vmulq_f64(v159, (float64x2_t)v272.val[2]);
        v272.val[2] = (float32x4_t)vmulq_f64(v250, v162);
        float64x2_t v175 = vmulq_f64(v251, v161);
        v272.val[1] = (float32x4_t)vmulq_f64(v261, (float64x2_t)v272.val[1]);
        float64x2_t v176 = vmulq_f64(v165, v171);
        v272.val[3] = (float32x4_t)vmulq_f64(v160, (float64x2_t)v272.val[3]);
        float64x2_t v177 = vmulq_f64(v164, v169);
        float64x2_t v178 = vmulq_f64(v163, v168);
        v269.val[1] = (float32x4_t)vmulq_f64((float64x2_t)v269.val[1], v173);
        float64x2_t v179 = vmulq_f64(v166, v172);
        v269.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v269.val[0], (float64x2_t)v272.val[0]);
        float64x2_t v180 = vmulq_f64(v167, v170);
        v269.val[3] = (float32x4_t)vmulq_f64((float64x2_t)v269.val[3], (float64x2_t)v271.val[0]);
        v269.val[2] = (float32x4_t)vmulq_f64((float64x2_t)v269.val[2], v174);
        double v153 = v153
             + v180.f64[0]
             + v180.f64[1]
             + *(double *)v269.val[0].i64
             + *(double *)&v269.val[0].i64[1]
             + *(double *)v269.val[2].i64
             + *(double *)&v269.val[2].i64[1]
             + *(double *)v269.val[3].i64
             + *(double *)&v269.val[3].i64[1];
        double v152 = v152
             + v178.f64[0]
             + v178.f64[1]
             + v177.f64[0]
             + v177.f64[1]
             + v179.f64[0]
             + v179.f64[1]
             + *(double *)v269.val[1].i64
             + *(double *)&v269.val[1].i64[1];
        double v151 = v151
             + v175.f64[0]
             + v175.f64[1]
             + *(double *)v272.val[2].i64
             + *(double *)&v272.val[2].i64[1]
             + *(double *)v272.val[3].i64
             + *(double *)&v272.val[3].i64[1]
             + v176.f64[0]
             + v176.f64[1];
        double v150 = v150
             + *(double *)v271.val[2].i64
             + *(double *)&v271.val[2].i64[1]
             + *(double *)v271.val[1].i64
             + *(double *)&v271.val[1].i64[1]
             + *(double *)v272.val[1].i64
             + *(double *)&v272.val[1].i64[1]
             + *(double *)v271.val[3].i64
             + *(double *)&v271.val[3].i64[1];
        v155 += 32;
        v156 -= 8;
      }
      while (v156);
      int v149 = ((v23 - 4) & 0xFFFFFFFC) + 4;
      uint64_t v154 = 4 * (v134 & 0x3FFFFFF8);
      double v16 = a10;
      double v17 = a9;
      if (v134 != (v134 & 0x3FFFFFF8)) {
        goto LABEL_185;
      }
LABEL_188:
      if (v149 >= (int)v23) {
        goto LABEL_196;
      }
      uint64_t v182 = v149;
      uint64_t v183 = (v23 + ~v149);
      if (v183 < 7)
      {
        uint64_t v184 = v182;
LABEL_194:
        uint64_t v199 = v184;
        do
        {
          double v150 = v150 + v139[v199] * *(float *)&v146[v199];
          LODWORD(v184) = v184 + 1;
          ++v199;
        }
        while ((int)v23 > (int)v184);
        goto LABEL_196;
      }
      uint64_t v185 = v183 + 1;
      uint64_t v186 = (v183 + 1) & 0x1FFFFFFF8;
      uint64_t v184 = v186 + v182;
      uint64_t v187 = v182;
      uint64_t v188 = v186;
      do
      {
        float32x4_t v189 = *(float32x4_t *)&v139[v187];
        float32x4_t v190 = *(float32x4_t *)&v139[v187 + 4];
        float64x2_t v191 = vcvtq_f64_f32(*(float32x2_t *)v189.f32);
        float64x2_t v192 = vcvtq_f64_f32(*(float32x2_t *)v190.f32);
        float32x4_t v193 = *(float32x4_t *)&v146[v187];
        float32x4_t v194 = *(float32x4_t *)&v146[v187 + 4];
        float64x2_t v195 = vmulq_f64(vcvt_hight_f64_f32(v189), vcvt_hight_f64_f32(v193));
        float64x2_t v196 = vmulq_f64(v191, vcvtq_f64_f32(*(float32x2_t *)v193.f32));
        float64x2_t v197 = vmulq_f64(vcvt_hight_f64_f32(v190), vcvt_hight_f64_f32(v194));
        float64x2_t v198 = vmulq_f64(v192, vcvtq_f64_f32(*(float32x2_t *)v194.f32));
        double v150 = v150
             + v196.f64[0]
             + v196.f64[1]
             + v195.f64[0]
             + v195.f64[1]
             + v198.f64[0]
             + v198.f64[1]
             + v197.f64[0]
             + v197.f64[1];
        v187 += 8;
        v188 -= 8;
      }
      while (v188);
      if (v185 != v186) {
        goto LABEL_194;
      }
LABEL_196:
      double v200 = (v153 + v152 + v151 + v150) * v17;
      if (v147) {
        double v200 = v200 + *v147 * v16;
      }
      float v148 = v200;
      *(float *)(a7 + 4 * v145++) = v148;
      v147 += v31;
      float v146 = (_DWORD *)((char *)v146 + v138);
    }
    while (v145 != v20);
    ++v129;
    a1 = (_DWORD *)((char *)a1 + v239);
    uint64_t v24 = v244;
    v29 += v30;
    a7 += 4 * v241;
    if (v129 != v19) {
      continue;
    }
    break;
  }
LABEL_239:
  uint64_t result = v264;
  if (v264 != v266 && v264 != 0) {
    operator delete[]();
  }
  return result;
}

void sub_10027F830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (STACK[0x578] != a16)
  {
    if (STACK[0x578]) {
      operator delete[]();
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_10027F894(float *a1, unint64_t a2, float *a3, unint64_t a4, double *a5, unint64_t a6, int *a7, unsigned int *a8, char a9)
{
  uint64_t v9 = a5;
  int v11 = a7[1];
  uint64_t v12 = (int)*a8;
  int v160 = a8[1];
  uint64_t v13 = a2 >> 2;
  if (a9)
  {
    if (v11 >= 0x109) {
      operator new[]();
    }
    uint64_t v15 = 1;
    int v14 = (float *)v162;
  }
  else
  {
    int v14 = 0;
    int v11 = *a7;
    uint64_t v15 = a2 >> 2;
    uint64_t v13 = 1;
  }
  uint64_t v16 = *a8;
  unint64_t v17 = a4 >> 2;
  unint64_t v159 = a6 >> 3;
  uint64_t v161 = v16;
  if ((a9 & 2) == 0)
  {
    if (v160 < 1) {
      return v162;
    }
    int v18 = 0;
    uint64_t v19 = v12 - 4;
    if (v14) {
      BOOL v20 = v11 < 1;
    }
    else {
      BOOL v20 = 1;
    }
    char v21 = v20;
    uint64_t v22 = v11 & 0xFFFFFFF8;
    BOOL v23 = v11 >= 8 && v13 == 1;
    uint64_t v24 = 4 * v15;
    char v25 = !v23;
    uint64_t v26 = 4 * v13;
    uint64_t v27 = (float32x2_t *)(a3 + 2);
    uint64_t v28 = 4 * v17;
    unsigned int v155 = *a8;
    char v154 = v21;
    uint64_t v153 = v24;
    char v152 = v25;
    while (1)
    {
      if (v14) {
        uint64_t v29 = v14;
      }
      else {
        uint64_t v29 = a1;
      }
      if (v21) {
        goto LABEL_34;
      }
      if (v25)
      {
        uint64_t v30 = 0;
      }
      else
      {
        unint64_t v31 = 0;
        do
        {
          long long v32 = *(_OWORD *)&a1[v31 / 4 + 4];
          uint64_t v33 = &v14[v31 / 4];
          *(_OWORD *)uint64_t v33 = *(_OWORD *)&a1[v31 / 4];
          *((_OWORD *)v33 + 1) = v32;
          v31 += 32;
        }
        while (((4 * v11) & 0x3FFFFFFE0) != v31);
        uint64_t v30 = v22;
        uint64_t v29 = v14;
        if (v22 == v11) {
          goto LABEL_34;
        }
      }
      uint64_t v34 = v26 * v30;
      do
      {
        v14[v30++] = *(float *)((char *)a1 + v34);
        v34 += v26;
      }
      while (v11 != v30);
      uint64_t v29 = v14;
LABEL_34:
      if ((int)v12 >= 4)
      {
        uint64_t v35 = 0;
        uint64_t v42 = v27;
        do
        {
          float64x2_t v43 = 0uLL;
          uint64_t v44 = 8 * v35;
          float64x2_t v45 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            float64x2_t v43 = *(float64x2_t *)&v9[v35];
            float64x2_t v45 = *(float64x2_t *)((char *)v9 + (v44 | 0x10));
          }
          if (v11 >= 1)
          {
            int v46 = v42;
            uint64_t v47 = v29;
            uint64_t v48 = v11;
            do
            {
              float v49 = *v47++;
              float64x2_t v43 = vmlaq_n_f64(v43, vcvtq_f64_f32(v46[-1]), v49);
              float64x2_t v45 = vmlaq_n_f64(v45, vcvtq_f64_f32(*v46), v49);
              int v46 = (float32x2_t *)((char *)v46 + v28);
              --v48;
            }
            while (v48);
          }
          *(float64x2_t *)&v9[v35] = v43;
          *(float64x2_t *)((char *)v9 + (v44 | 0x10)) = v45;
          v35 += 4;
          v42 += 2;
        }
        while (v35 <= v19);
      }
      else
      {
        LODWORD(v35) = 0;
      }
      if ((int)v35 < (int)v16)
      {
        if (v11 < 1)
        {
          if ((a9 & 0x10) == 0)
          {
            int v156 = v18;
            bzero(&v9[v35], 8 * (v12 + ~v35) + 8);
            uint64_t v27 = (float32x2_t *)(a3 + 2);
            char v25 = v152;
            uint64_t v24 = v153;
            uint64_t v22 = v11 & 0xFFFFFFF8;
            char v21 = v154;
            int v18 = v156;
            LODWORD(v12) = v155;
            uint64_t v16 = v161;
          }
        }
        else
        {
          uint64_t v35 = v35;
          if ((a9 & 0x10) != 0)
          {
            uint64_t v50 = &a3[v35];
            do
            {
              double v51 = v9[v35];
              double v52 = v50;
              uint64_t v53 = v29;
              uint64_t v54 = v11;
              do
              {
                float v55 = *v53++;
                double v51 = v51 + v55 * *v52;
                double v52 = (float *)((char *)v52 + v28);
                --v54;
              }
              while (v54);
              v9[v35++] = v51;
              ++v50;
            }
            while (v35 != v16);
          }
          else
          {
            BOOL v36 = &a3[v35];
            do
            {
              double v37 = 0.0;
              uint64_t v38 = v36;
              uint64_t v39 = v29;
              uint64_t v40 = v11;
              do
              {
                float v41 = *v39++;
                double v37 = v37 + v41 * *v38;
                uint64_t v38 = (float *)((char *)v38 + v28);
                --v40;
              }
              while (v40);
              v9[v35++] = v37;
              ++v36;
            }
            while (v35 != v16);
          }
        }
      }
      ++v18;
      a1 = (float *)((char *)a1 + v24);
      v9 += v159;
      if (v18 == v160) {
        return v162;
      }
    }
  }
  if (v160 < 1) {
    return v162;
  }
  if ((int)v12 < 1)
  {
    if (!v14 || v11 < 1) {
      return v162;
    }
    if (v11 < 8)
    {
      do
      {
        double v64 = a1;
        if (v11 != 1)
        {
          v14[1] = a1[v13];
          if (v11 != 2)
          {
            uint64_t v14[2] = a1[2 * v13];
            if (v11 != 3)
            {
              v14[3] = a1[3 * v13];
              if (v11 != 4)
              {
                v14[4] = a1[4 * v13];
                if (v11 != 5)
                {
                  v14[5] = a1[5 * v13];
                  if (v11 != 6) {
                    v14[6] = a1[6 * v13];
                  }
                }
              }
            }
          }
        }
        a1 += v15;
        --v160;
      }
      while (v160);
      *int v14 = *v64;
      return v162;
    }
    int v130 = 0;
    uint64_t v131 = 4 * v13;
    while (1)
    {
      if (v13 == 1)
      {
        unint64_t v132 = 0;
        do
        {
          long long v133 = *(_OWORD *)&a1[v132 / 4 + 4];
          uint64_t v134 = &v14[v132 / 4];
          *(_OWORD *)uint64_t v134 = *(_OWORD *)&a1[v132 / 4];
          *((_OWORD *)v134 + 1) = v133;
          v132 += 32;
        }
        while (((4 * v11) & 0x3FFFFFFE0) != v132);
        uint64_t v135 = v11 & 0xFFFFFFF8;
        if (v135 == v11) {
          goto LABEL_142;
        }
      }
      else
      {
        uint64_t v135 = 0;
      }
      uint64_t v136 = v11 - v135;
      uint64_t v137 = &v14[v135];
      uint64_t v138 = v131 * v135;
      do
      {
        *v137++ = *(float *)((char *)a1 + v138);
        v138 += v131;
        --v136;
      }
      while (v136);
LABEL_142:
      ++v130;
      a1 += v15;
      if (v130 == v160) {
        return v162;
      }
    }
  }
  if (v11 <= 1)
  {
    if (v11 >= 1)
    {
      int v56 = 0;
      uint64_t v57 = 8 * v16;
      uint64_t v58 = 4 * v17;
      do
      {
        float64x2_t v59 = a1;
        if (v14)
        {
          *int v14 = *a1;
          float64x2_t v59 = v14;
        }
        double v60 = *v59;
        unint64_t v61 = 0;
        if ((a9 & 0x10) != 0)
        {
          uint64_t v63 = a3;
          do
          {
            v9[v61 / 8] = v9[v61 / 8] + v60 * *v63 + 0.0;
            v61 += 8;
            uint64_t v63 = (float *)((char *)v63 + v58);
          }
          while (v57 != v61);
        }
        else
        {
          double v62 = a3;
          do
          {
            v9[v61 / 8] = v60 * *v62 + 0.0 + 0.0;
            v61 += 8;
            double v62 = (float *)((char *)v62 + v58);
          }
          while (v57 != v61);
        }
        ++v56;
        a1 += v15;
        v9 += v159;
      }
      while (v56 != v160);
      return v162;
    }
    if ((a9 & 0x10) == 0)
    {
      size_t v129 = 8 * v16;
      if (v14)
      {
        do
        {
          bzero(v9, v129);
          v9 += v159;
          --v160;
        }
        while (v160);
      }
      else
      {
        do
        {
          bzero(v9, v129);
          v9 += v159;
          --v160;
        }
        while (v160);
      }
      return v162;
    }
    uint64_t v140 = v12 & 0xFFFFFFFC;
    if (v14)
    {
      if (v12 >= 4)
      {
        for (int i = 0; i != v160; ++i)
        {
          unint64_t v148 = 0;
          do
          {
            int v149 = (float64x2_t *)&v9[v148 / 8];
            float64x2_t v150 = vaddq_f64(*(float64x2_t *)&v9[v148 / 8 + 2], (float64x2_t)0);
            *int v149 = vaddq_f64(*(float64x2_t *)&v9[v148 / 8], (float64x2_t)0);
            v149[1] = v150;
            v148 += 32;
          }
          while (((8 * v16) & 0x7FFFFFFE0) != v148);
          if (v140 != v16)
          {
            uint64_t v151 = v12 & 0xFFFFFFFC;
            do
            {
              v9[v151] = v9[v151] + 0.0;
              ++v151;
            }
            while (v16 != v151);
          }
          v9 += v159;
        }
      }
      else
      {
        unint64_t v141 = a5 + 2;
        do
        {
          *(v141 - 2) = *(v141 - 2) + 0.0;
          if (v12 != 1)
          {
            *(v141 - 1) = *(v141 - 1) + 0.0;
            if (v12 != 2) {
              *unint64_t v141 = *v141 + 0.0;
            }
          }
          v141 += v159;
          --v160;
        }
        while (v160);
      }
      return v162;
    }
    int v142 = 0;
    while (1)
    {
      if (v12 >= 4)
      {
        unint64_t v144 = 0;
        do
        {
          uint64_t v145 = (float64x2_t *)&v9[v144 / 8];
          float64x2_t v146 = vaddq_f64(*(float64x2_t *)&v9[v144 / 8 + 2], (float64x2_t)0);
          float64x2_t *v145 = vaddq_f64(*(float64x2_t *)&v9[v144 / 8], (float64x2_t)0);
          v145[1] = v146;
          v144 += 32;
        }
        while (((8 * v16) & 0x7FFFFFFE0) != v144);
        uint64_t v143 = v12 & 0xFFFFFFFC;
        if (v140 == v16) {
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v143 = 0;
      }
      do
      {
        v9[v143] = v9[v143] + 0.0;
        ++v143;
      }
      while (v16 != v143);
LABEL_164:
      ++v142;
      v9 += v159;
      if (v142 == v160) {
        return v162;
      }
    }
  }
  int v65 = 0;
  unint64_t v66 = (v11 - 2);
  uint64_t v67 = (v66 & 0xFFFFFFFE) + 2;
  int v68 = (v66 & 0xFFFFFFFE) + 3;
  if (v11 > v68) {
    int v68 = v11;
  }
  uint64_t v69 = v68 - (v66 & 0xFFFFFFFE) - 3;
  uint64_t v70 = (v66 >> 1) + 1;
  uint64_t v71 = v70 & 0xFFFFFFF8;
  uint64_t v72 = (v69 + 1) & 0x1FFFFFFF8;
  uint64_t v73 = 4 * v15;
  uint64_t v74 = 4 * v13;
  BOOL v76 = v11 < 8 || v13 != 1;
  BOOL v157 = v76;
  uint64_t v77 = 4 * v17;
  while (2)
  {
    uint64_t v78 = a1;
    if (!v14) {
      goto LABEL_105;
    }
    if (v157)
    {
      uint64_t v79 = 0;
    }
    else
    {
      unint64_t v80 = 0;
      do
      {
        long long v81 = *(_OWORD *)&a1[v80 / 4 + 4];
        uint64_t v82 = &v14[v80 / 4];
        *(_OWORD *)uint64_t v82 = *(_OWORD *)&a1[v80 / 4];
        *((_OWORD *)v82 + 1) = v81;
        v80 += 32;
      }
      while (((4 * v11) & 0x3FFFFFFE0) != v80);
      uint64_t v79 = v11 & 0xFFFFFFF8;
      uint64_t v78 = v14;
      if (v79 == v11) {
        goto LABEL_105;
      }
    }
    uint64_t v83 = v74 * v79;
    do
    {
      v14[v79++] = *(float *)((char *)a1 + v83);
      v83 += v74;
    }
    while (v11 != v79);
    uint64_t v78 = v14;
LABEL_105:
    if (v67 < v11)
    {
      uint64_t v84 = 0;
      uint64_t v85 = a3;
      while (1)
      {
        double v86 = 0.0;
        double v87 = 0.0;
        if ((a9 & 0x10) != 0) {
          double v87 = v9[v84];
        }
        if (v66 < 0xE) {
          break;
        }
        uint64_t v89 = 0;
        uint64_t v90 = v70 & 0xFFFFFFF8;
        do
        {
          unint64_t v91 = &v78[v89];
          float32x4x2_t v163 = vld2q_f32(v91);
          v91 += 8;
          float32x4x2_t v165 = vld2q_f32(v91);
          long long v92 = &v85[v89];
          float32x4x2_t v167 = vld2q_f32(v92);
          v92 += 8;
          float32x4x2_t v169 = vld2q_f32(v92);
          float64x2_t v93 = vmulq_f64(vcvt_hight_f64_f32(v163.val[0]), vcvt_hight_f64_f32(v167.val[0]));
          float64x2_t v94 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v163.val[0].f32), vcvtq_f64_f32(*(float32x2_t *)v167.val[0].f32));
          float64x2_t v95 = vmulq_f64(vcvt_hight_f64_f32(v165.val[0]), vcvt_hight_f64_f32(v169.val[0]));
          float64x2_t v96 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v165.val[0].f32), vcvtq_f64_f32(*(float32x2_t *)v169.val[0].f32));
          float64x2_t v97 = vcvtq_f64_f32(*(float32x2_t *)v163.val[1].f32);
          v163.val[0] = (float32x4_t)vcvt_hight_f64_f32(v163.val[1]);
          v163.val[1] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v165.val[1].f32);
          v165.val[0] = (float32x4_t)vcvt_hight_f64_f32(v165.val[1]);
          v163.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v163.val[0], vcvt_hight_f64_f32(v167.val[1]));
          v165.val[1] = (float32x4_t)vmulq_f64(v97, vcvtq_f64_f32(*(float32x2_t *)v167.val[1].f32));
          v165.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v165.val[0], vcvt_hight_f64_f32(v169.val[1]));
          v163.val[1] = (float32x4_t)vmulq_f64((float64x2_t)v163.val[1], vcvtq_f64_f32(*(float32x2_t *)v169.val[1].f32));
          double v86 = v86
              + *(double *)v165.val[1].i64
              + *(double *)&v165.val[1].i64[1]
              + *(double *)v163.val[0].i64
              + *(double *)&v163.val[0].i64[1]
              + *(double *)v163.val[1].i64
              + *(double *)&v163.val[1].i64[1]
              + *(double *)v165.val[0].i64
              + *(double *)&v165.val[0].i64[1];
          double v87 = v87
              + v94.f64[0]
              + v94.f64[1]
              + v93.f64[0]
              + v93.f64[1]
              + v96.f64[0]
              + v96.f64[1]
              + v95.f64[0]
              + v95.f64[1];
          v89 += 16;
          v90 -= 8;
        }
        while (v90);
        unint64_t v88 = 2 * (v70 & 0xFFFFFFF8);
        if (v70 != v71) {
          goto LABEL_115;
        }
LABEL_117:
        if (v69 >= 7)
        {
          uint64_t v101 = (v66 & 0xFFFFFFFE) + 2;
          uint64_t v102 = (v69 + 1) & 0x1FFFFFFF8;
          uint64_t v100 = v161;
          do
          {
            float32x4_t v103 = *(float32x4_t *)&v78[v101];
            float32x4_t v104 = *(float32x4_t *)&v78[v101 + 4];
            float64x2_t v105 = vcvtq_f64_f32(*(float32x2_t *)v103.f32);
            float64x2_t v106 = vcvtq_f64_f32(*(float32x2_t *)v104.f32);
            float32x4_t v107 = *(float32x4_t *)&v85[v101];
            float32x4_t v108 = *(float32x4_t *)&v85[v101 + 4];
            float64x2_t v109 = vmulq_f64(vcvt_hight_f64_f32(v103), vcvt_hight_f64_f32(v107));
            float64x2_t v110 = vmulq_f64(v105, vcvtq_f64_f32(*(float32x2_t *)v107.f32));
            float64x2_t v111 = vmulq_f64(vcvt_hight_f64_f32(v104), vcvt_hight_f64_f32(v108));
            float64x2_t v112 = vmulq_f64(v106, vcvtq_f64_f32(*(float32x2_t *)v108.f32));
            double v87 = v87
                + v110.f64[0]
                + v110.f64[1]
                + v109.f64[0]
                + v109.f64[1]
                + v112.f64[0]
                + v112.f64[1]
                + v111.f64[0]
                + v111.f64[1];
            v101 += 8;
            v102 -= 8;
          }
          while (v102);
          uint64_t v99 = v72 + v67;
          if (v69 + 1 == v72) {
            goto LABEL_107;
          }
        }
        else
        {
          uint64_t v99 = (v66 & 0xFFFFFFFE) + 2;
          uint64_t v100 = v161;
        }
        uint64_t v113 = v99;
        do
        {
          double v87 = v87 + v78[v113] * v85[v113];
          LODWORD(v99) = v99 + 1;
          ++v113;
        }
        while (v11 > (int)v99);
LABEL_107:
        v9[v84++] = v86 + v87;
        uint64_t v85 = (float *)((char *)v85 + v77);
        if (v84 == v100) {
          goto LABEL_95;
        }
      }
      unint64_t v88 = 0;
LABEL_115:
      uint64_t v98 = v88;
      do
      {
        double v87 = v87 + v78[v98] * v85[v98];
        double v86 = v86 + v78[v98 + 1] * v85[v98 + 1];
        v88 += 2;
        v98 += 2;
      }
      while (v88 <= v66);
      goto LABEL_117;
    }
    uint64_t v114 = 0;
    unint64_t v115 = a3;
    do
    {
      double v116 = 0.0;
      double v117 = 0.0;
      if ((a9 & 0x10) != 0) {
        double v117 = v9[v114];
      }
      if (v66 < 0xE)
      {
        unint64_t v118 = 0;
LABEL_134:
        uint64_t v128 = v118;
        do
        {
          double v117 = v117 + v78[v128] * v115[v128];
          double v116 = v116 + v78[v128 + 1] * v115[v128 + 1];
          v118 += 2;
          v128 += 2;
        }
        while (v118 <= v66);
        goto LABEL_126;
      }
      uint64_t v119 = 0;
      uint64_t v120 = v70 & 0xFFFFFFF8;
      do
      {
        uint64_t v121 = &v78[v119];
        float32x4x2_t v164 = vld2q_f32(v121);
        v121 += 8;
        float32x4x2_t v166 = vld2q_f32(v121);
        float v122 = &v115[v119];
        float32x4x2_t v168 = vld2q_f32(v122);
        v122 += 8;
        float32x4x2_t v170 = vld2q_f32(v122);
        float64x2_t v123 = vmulq_f64(vcvt_hight_f64_f32(v164.val[0]), vcvt_hight_f64_f32(v168.val[0]));
        float64x2_t v124 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v164.val[0].f32), vcvtq_f64_f32(*(float32x2_t *)v168.val[0].f32));
        float64x2_t v125 = vmulq_f64(vcvt_hight_f64_f32(v166.val[0]), vcvt_hight_f64_f32(v170.val[0]));
        float64x2_t v126 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v166.val[0].f32), vcvtq_f64_f32(*(float32x2_t *)v170.val[0].f32));
        float64x2_t v127 = vcvtq_f64_f32(*(float32x2_t *)v164.val[1].f32);
        v164.val[0] = (float32x4_t)vcvt_hight_f64_f32(v164.val[1]);
        v164.val[1] = (float32x4_t)vcvtq_f64_f32(*(float32x2_t *)v166.val[1].f32);
        v166.val[0] = (float32x4_t)vcvt_hight_f64_f32(v166.val[1]);
        v164.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v164.val[0], vcvt_hight_f64_f32(v168.val[1]));
        v166.val[1] = (float32x4_t)vmulq_f64(v127, vcvtq_f64_f32(*(float32x2_t *)v168.val[1].f32));
        v166.val[0] = (float32x4_t)vmulq_f64((float64x2_t)v166.val[0], vcvt_hight_f64_f32(v170.val[1]));
        v164.val[1] = (float32x4_t)vmulq_f64((float64x2_t)v164.val[1], vcvtq_f64_f32(*(float32x2_t *)v170.val[1].f32));
        double v116 = v116
             + *(double *)v166.val[1].i64
             + *(double *)&v166.val[1].i64[1]
             + *(double *)v164.val[0].i64
             + *(double *)&v164.val[0].i64[1]
             + *(double *)v164.val[1].i64
             + *(double *)&v164.val[1].i64[1]
             + *(double *)v166.val[0].i64
             + *(double *)&v166.val[0].i64[1];
        double v117 = v117
             + v124.f64[0]
             + v124.f64[1]
             + v123.f64[0]
             + v123.f64[1]
             + v126.f64[0]
             + v126.f64[1]
             + v125.f64[0]
             + v125.f64[1];
        v119 += 16;
        v120 -= 8;
      }
      while (v120);
      unint64_t v118 = 2 * (v70 & 0xFFFFFFF8);
      if (v70 != v71) {
        goto LABEL_134;
      }
LABEL_126:
      v9[v114++] = v116 + v117;
      unint64_t v115 = (float *)((char *)v115 + v77);
    }
    while (v114 != v161);
LABEL_95:
    ++v65;
    a1 = (float *)((char *)a1 + v73);
    v9 += v159;
    if (v65 != v160) {
      continue;
    }
    return v162;
  }
}

void sub_100280534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22 != v22)
  {
    if (a22) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

__int32 *sub_100280564(__int32 *result, unint64_t a2, float64x2_t *a3, unint64_t a4, float *a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10 = a7[1];
  uint64_t v11 = a2 >> 2;
  if ((a8 & 4) != 0) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = a2 >> 2;
  }
  if ((a8 & 4) == 0) {
    uint64_t v11 = 1;
  }
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (result) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v10)
  {
    uint64_t v15 = *a7;
    unint64_t v16 = a4 >> 3;
    uint64_t v17 = v14;
    unint64_t v18 = (v15 - 4);
    uint64_t v19 = (v18 >> 2) + 1;
    uint64_t v20 = 4 * v13;
    uint64_t v21 = 4 * v14;
    uint64_t v22 = (float32x2_t *)(a5 + 2);
    float64x2_t v23 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a10, 0);
    uint64_t v24 = 4 * (a6 >> 2);
    char v25 = a3 + 1;
    uint64_t v26 = 8 * v16;
    uint64_t v27 = a3 + 2;
    while (result)
    {
      unint64_t v28 = 0;
      if ((int)v15 >= 4)
      {
        unint64_t v31 = v25;
        long long v32 = v22;
        uint64_t v33 = result;
        do
        {
          uint64_t v34 = v33;
          v35.i32[0] = *v33;
          BOOL v36 = &v33[v17];
          v35.i32[1] = *v36;
          double v37 = &v36[v17];
          v32[-1] = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v31[-1], a9), vcvtq_f64_f32(v35), v23));
          v35.i32[0] = *v37;
          uint64_t v38 = &v37[v17];
          float64x2_t v39 = *v31;
          v31 += 2;
          v35.i32[1] = *v38;
          uint64_t v33 = &v38[v17];
          float32x2_t *v32 = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v39, a9), vcvtq_f64_f32(v35), v23));
          v32 += 2;
          v28 += 4;
        }
        while (v28 <= v18);
        uint64_t v29 = (float *)&v34[v21];
        unint64_t v28 = v28;
        if ((int)v28 >= (int)v15) {
          goto LABEL_14;
        }
        do
        {
LABEL_25:
          float v40 = a3->f64[v28] * a9 + *v29 * a10;
          a5[v28++] = v40;
          uint64_t v29 = (float *)((char *)v29 + v17 * 4);
        }
        while (v15 != v28);
        goto LABEL_14;
      }
      uint64_t v29 = (float *)result;
      if ((int)v15 > 0) {
        goto LABEL_25;
      }
LABEL_14:
      uint64_t result = (__int32 *)((char *)result + v20);
      uint64_t v22 = (float32x2_t *)((char *)v22 + v24);
      char v25 = (float64x2_t *)((char *)v25 + v26);
      a5 = (float *)((char *)a5 + v24);
      a3 = (float64x2_t *)((char *)a3 + v26);
      uint64_t v27 = (float64x2_t *)((char *)v27 + v26);
      if (!--v10) {
        return result;
      }
    }
    if ((int)v15 < 4)
    {
      uint64_t v30 = 0;
      if ((int)v15 <= 0) {
        goto LABEL_14;
      }
      goto LABEL_35;
    }
    if (v18 >= 0xC)
    {
      uint64_t v42 = v19 & 0x7FFFFFFC;
      float64x2_t v43 = a5;
      uint64_t v44 = (const double *)a3;
      do
      {
        float64x2_t v45 = v44;
        float64x2x4_t v64 = vld4q_f64(v45);
        v45 += 8;
        float64x2x4_t v65 = vld4q_f64(v45);
        v66.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v64.val[0], a9)), vmulq_n_f64(v65.val[0], a9));
        v66.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v64.val[1], a9)), vmulq_n_f64(v65.val[1], a9));
        v66.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v64.val[2], a9)), vmulq_n_f64(v65.val[2], a9));
        v66.val[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v64.val[3], a9)), vmulq_n_f64(v65.val[3], a9));
        vst4q_f32(v43, v66);
        v43 += 16;
        v44 += 16;
        v42 -= 4;
      }
      while (v42);
      unint64_t v41 = 4 * (v19 & 0x7FFFFFFC);
      if (v19 == (v19 & 0x7FFFFFFC))
      {
LABEL_34:
        uint64_t v30 = v41;
        if ((int)v41 >= (int)v15) {
          goto LABEL_14;
        }
LABEL_35:
        uint64_t v54 = v15 - v30;
        if ((unint64_t)(v15 - v30) >= 8)
        {
          uint64_t v55 = (v54 & 0xFFFFFFFFFFFFFFF8) + v30;
          int v56 = (float32x4_t *)&a5[v30];
          uint64_t v57 = (float64x2_t *)((char *)v27 + 8 * v30);
          unint64_t v58 = v54 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float64x2_t v59 = v57[-2];
            float64x2_t v60 = v57[-1];
            float64x2_t v61 = *v57;
            float64x2_t v62 = v57[1];
            v57 += 4;
            *int v56 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v59, a9)), vmulq_n_f64(v60, a9));
            v56[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v61, a9)), vmulq_n_f64(v62, a9));
            v56 += 2;
            v58 -= 8;
          }
          while (v58);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v55 = v30;
        }
        do
        {
          float v63 = a3->f64[v55] * a9;
          a5[v55++] = v63;
        }
        while (v15 != v55);
        goto LABEL_14;
      }
    }
    else
    {
      unint64_t v41 = 0;
    }
    uint64_t v46 = 8 * v41 + 24;
    uint64_t v47 = &a5[v41];
    do
    {
      uint64_t v48 = &a3[v41 / 2];
      double v49 = v48[1].f64[0];
      float v50 = *(double *)((char *)&a3[-1] + v46 - 8) * a9;
      float v51 = v48->f64[1] * a9;
      *uint64_t v47 = v50;
      v47[1] = v51;
      float v52 = v49 * a9;
      float v53 = *(double *)((char *)a3->f64 + v46) * a9;
      v47[2] = v52;
      void v47[3] = v53;
      v41 += 4;
      v46 += 32;
      v47 += 4;
    }
    while (v41 <= v18);
    goto LABEL_34;
  }
  return result;
}

void *sub_100280854(void *a1, unint64_t a2, void *a3, unint64_t a4, double *a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int *a11, int *a12, char a13)
{
  double v16 = a10;
  double v17 = a9;
  uint64_t v19 = *a12;
  uint64_t v18 = a12[1];
  int v20 = *a12;
  int v21 = *a11;
  uint64_t v22 = a11[1];
  float64x2_t v23 = (double *)v230;
  uint64_t v228 = v230;
  uint64_t v229 = 136;
  unint64_t v24 = a2 >> 3;
  unint64_t v25 = a4 >> 3;
  uint64_t v26 = a6 >> 3;
  unint64_t v216 = a8 >> 3;
  if ((a13 & 4) != 0) {
    uint64_t v27 = 1;
  }
  else {
    uint64_t v27 = a6 >> 3;
  }
  if ((a13 & 4) == 0) {
    uint64_t v26 = 1;
  }
  if (!a5) {
    uint64_t v27 = 0;
  }
  uint64_t v219 = v27;
  int v221 = v18;
  if (a5) {
    uint64_t v28 = v26;
  }
  else {
    uint64_t v28 = 0;
  }
  if (a13)
  {
    uint64_t v30 = 1;
    if (a2 >= 0x10 && (int)v22 >= 2)
    {
      uint64_t v229 = v22;
      if (v22 >= 0x89) {
        operator new[]();
      }
      uint64_t v30 = 1;
      unint64_t v225 = (double *)v230;
      if ((a13 & 2) == 0) {
        goto LABEL_27;
      }
      goto LABEL_149;
    }
    int v21 = v22;
    uint64_t v29 = a2 >> 3;
    if (v22 == 1) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v29 = 1;
    uint64_t v30 = a2 >> 3;
    if (v21 == 1)
    {
LABEL_13:
      if (a2 < 0x10 || (int)v22 < 2) {
        goto LABEL_229;
      }
      uint64_t v229 = (int)v18;
      if (v18 >= 0x89) {
        operator new[]();
      }
      if ((int)v18 >= 1)
      {
        if (v18 == 1)
        {
          uint64_t v177 = 0;
        }
        else
        {
          uint64_t v176 = 0;
          uint64_t v177 = v18 & 0xFFFFFFFE;
          float64x2_t v178 = a1;
          do
          {
            uint64_t v179 = v178[v24];
            float64x2_t v180 = &v230[v176];
            *float64x2_t v180 = *v178;
            v180[1] = v179;
            v176 += 2;
            v178 += 2 * v24;
          }
          while (v177 != v176);
          if (v177 == v18) {
            goto LABEL_228;
          }
        }
        uint64_t v181 = &a1[v177 * v24];
        do
        {
          v230[v177++] = *v181;
          v181 += v24;
        }
        while (v18 != v177);
      }
LABEL_228:
      a1 = v230;
LABEL_229:
      if (a4 >= 0x10)
      {
        if ((unint64_t)(int)v19 > 0x88 && v19 >= 0x89) {
          operator new[]();
        }
        if ((int)v19 >= 1)
        {
          uint64_t v182 = 0;
          do
          {
            *(void *)&v227[v182] = *a3;
            v182 += 8;
            a3 += v25;
          }
          while (8 * v19 != v182);
        }
        a3 = v227;
      }
      if ((int)v18 < 1) {
        goto LABEL_253;
      }
      uint64_t v183 = 0;
      while (1)
      {
        double v184 = *(double *)&a1[v183] * v17;
        if (v20 >= 2)
        {
          uint64_t v187 = 0;
          uint64_t v185 = 0;
          uint64_t v186 = a5;
          do
          {
            double v189 = v184 * *(double *)&a3[v187];
            double v188 = v184 * *(double *)&a3[v187 + 1];
            if (v186)
            {
              *(double *)(a7 + v187 * 8) = v189 + *v186 * v16;
              double v188 = v188 + v186[v28] * v16;
            }
            else
            {
              *(double *)(a7 + v187 * 8) = v189;
            }
            *(double *)(a7 + v187 * 8 + 8) = v188;
            v185 += 2;
            v186 += 2 * v28;
            v187 += 2;
          }
          while (v185 <= (int)v19 - 2);
          uint64_t v185 = v185;
          if ((int)v185 < (int)v19)
          {
            do
            {
LABEL_251:
              double v190 = v184 * *(double *)&a3[v185];
              if (v186) {
                double v190 = v190 + *v186 * v16;
              }
              *(double *)(a7 + 8 * v185++) = v190;
              v186 += v28;
            }
            while (v19 != v185);
          }
        }
        else
        {
          uint64_t v185 = 0;
          uint64_t v186 = a5;
          if ((int)v19 > 0) {
            goto LABEL_251;
          }
        }
        ++v183;
        a5 += v27;
        a7 += 8 * v216;
        if (v183 == v18) {
          goto LABEL_253;
        }
      }
    }
  }
  float64x2_t v23 = 0;
  unint64_t v24 = v29;
  LODWORD(v22) = v21;
  unint64_t v225 = 0;
  if ((a13 & 2) == 0)
  {
LABEL_27:
    if ((unint64_t)(8 * (int)v19) <= 0x640)
    {
      if ((int)v18 < 1) {
        goto LABEL_253;
      }
      int v31 = 0;
      double v32 = a9 * 0.0;
      if (v23) {
        BOOL v33 = (int)v22 < 1;
      }
      else {
        BOOL v33 = 1;
      }
      char v34 = v33;
      uint64_t v35 = 8 * v30;
      BOOL v36 = v22 >= 4 && v24 == 1;
      uint64_t v37 = 8 * v24;
      uint64_t v38 = 8 * v25;
      char v39 = !v36;
LABEL_43:
      if (v23) {
        float v40 = v23;
      }
      else {
        float v40 = (double *)a1;
      }
      if (v34) {
        goto LABEL_55;
      }
      if (v39)
      {
        uint64_t v41 = 0;
      }
      else
      {
        unint64_t v42 = 0;
        do
        {
          long long v43 = *(_OWORD *)&a1[v42 / 8 + 2];
          uint64_t v44 = &v23[v42 / 8];
          *(_OWORD *)uint64_t v44 = *(_OWORD *)&a1[v42 / 8];
          *((_OWORD *)v44 + 1) = v43;
          v42 += 32;
        }
        while (((8 * v22) & 0x7FFFFFFE0) != v42);
        uint64_t v41 = v22 & 0xFFFFFFFC;
        float v40 = v23;
        if (v41 == v22) {
          goto LABEL_55;
        }
      }
      uint64_t v45 = v37 * v41;
      do
      {
        v23[v41++] = *(double *)((char *)a1 + v45);
        v45 += v37;
      }
      while (v22 != v41);
      float v40 = v23;
LABEL_55:
      if ((int)v19 < 4)
      {
        uint64_t v46 = 0;
        uint64_t v47 = a5;
        if ((int)v19 > 0) {
          goto LABEL_69;
        }
        goto LABEL_42;
      }
      uint64_t v46 = 0;
      uint64_t v48 = (double *)(a3 + 2);
      uint64_t v47 = a5;
      while (1)
      {
        if ((int)v22 < 1)
        {
          double v58 = v17 * 0.0;
          double v54 = 0.0;
          double v50 = 0.0;
          uint64_t v59 = 8 * v46;
          double v60 = 0.0 * v17;
          if (v47) {
            goto LABEL_67;
          }
        }
        else
        {
          double v50 = 0.0;
          float v51 = v48;
          float v52 = v40;
          uint64_t v53 = v22;
          double v54 = 0.0;
          double v55 = 0.0;
          double v56 = 0.0;
          do
          {
            double v57 = *v52++;
            double v56 = v56 + v57 * *(v51 - 2);
            double v55 = v55 + v57 * *(v51 - 1);
            double v54 = v54 + v57 * *v51;
            double v50 = v50 + v57 * v51[1];
            float v51 = (double *)((char *)v51 + v38);
            --v53;
          }
          while (v53);
          double v58 = v56 * v17;
          float64x2_t v23 = v225;
          uint64_t v59 = 8 * v46;
          double v60 = v55 * v17;
          if (v47)
          {
LABEL_67:
            *(double *)(a7 + v59) = v58 + *v47 * v16;
            *(double *)(a7 + (v59 | 8)) = v60 + v47[v28] * v16;
            *(double *)(a7 + (v59 | 0x10)) = v54 * v17 + v47[2 * v28] * v16;
            double v49 = v50 * v17 + v47[3 * v28] * v16;
            goto LABEL_60;
          }
        }
        *(double *)(a7 + v59) = v58;
        *(double *)(a7 + (v59 | 8)) = v60;
        *(double *)(a7 + (v59 | 0x10)) = v54 * v17;
        double v49 = v50 * v17;
LABEL_60:
        *(double *)(a7 + (v59 | 0x18)) = v49;
        v46 += 4;
        v47 += 4 * v28;
        v48 += 4;
        if (v46 > v20 - 4)
        {
          uint64_t v46 = v46;
          if ((int)v46 < (int)v19)
          {
LABEL_69:
            if ((int)v22 <= 0)
            {
              do
              {
                double v68 = v17 * 0.0;
                if (v47) {
                  double v68 = v32 + *v47 * v16;
                }
                *(double *)(a7 + 8 * v46++) = v68;
                v47 += v28;
              }
              while (v19 != v46);
            }
            else
            {
              float64x2_t v61 = (double *)&a3[v46];
              do
              {
                double v62 = 0.0;
                float v63 = v61;
                float64x2x4_t v64 = v40;
                uint64_t v65 = v22;
                do
                {
                  double v66 = *v64++;
                  double v62 = v62 + v66 * *v63;
                  float v63 = (double *)((char *)v63 + v38);
                  --v65;
                }
                while (v65);
                double v67 = v62 * v17;
                if (v47) {
                  double v67 = v67 + *v47 * v16;
                }
                float64x2_t v23 = v225;
                *(double *)(a7 + 8 * v46++) = v67;
                v47 += v28;
                ++v61;
              }
              while (v46 != v19);
            }
          }
LABEL_42:
          ++v31;
          a1 = (void *)((char *)a1 + v35);
          a5 += v27;
          a7 += 8 * v216;
          if (v31 == v18) {
            goto LABEL_253;
          }
          goto LABEL_43;
        }
      }
    }
    if (v19 >= 0x89) {
      operator new[]();
    }
    if ((int)v18 < 1) {
      goto LABEL_253;
    }
    int v69 = 0;
    uint64_t v70 = (int)v19 - 4;
    uint64_t v71 = 8 * v19;
    if (v23) {
      BOOL v72 = (int)v22 < 1;
    }
    else {
      BOOL v72 = 1;
    }
    char v73 = v72;
    char v214 = v73;
    if (v70 <= 3) {
      unint64_t v74 = 3;
    }
    else {
      unint64_t v74 = (int)v19 - 4;
    }
    uint64_t v75 = (v74 >> 2) + 1;
    uint64_t v76 = v75 & 0x7FFFFFFE;
    uint64_t v77 = 4 * v76;
    uint64_t v78 = 8 * v30;
    uint64_t v203 = 8 * v24;
    BOOL v79 = v22 >= 4 && v24 == 1;
    uint64_t v80 = 8 * v25;
    uint64_t v217 = 8 * v216;
    char v81 = !v79;
    char v204 = v81;
    uint64_t v210 = v27;
    uint64_t v212 = v78;
    uint64_t v82 = 8 * v28;
    uint64_t v83 = v71 & 0x7FFFFFFE0;
    uint64_t v208 = (v74 >> 2) + 1;
    unint64_t v209 = v74;
    uint64_t v206 = 4 * (v75 & 0x7FFFFFFE);
    uint64_t v207 = v75 & 0x7FFFFFFE;
    uint64_t v205 = 8 * v28;
    while (1)
    {
      if (v23) {
        uint64_t v84 = v23;
      }
      else {
        uint64_t v84 = (double *)a1;
      }
      int v222 = a5;
      if ((v214 & 1) == 0)
      {
        if (v204)
        {
          uint64_t v85 = 0;
LABEL_108:
          uint64_t v89 = v203 * v85;
          do
          {
            v23[v85++] = *(double *)((char *)a1 + v89);
            v89 += v203;
          }
          while (v22 != v85);
          uint64_t v84 = v23;
          goto LABEL_111;
        }
        unint64_t v86 = 0;
        do
        {
          long long v87 = *(_OWORD *)&a1[v86 / 8 + 2];
          unint64_t v88 = &v23[v86 / 8];
          *(_OWORD *)unint64_t v88 = *(_OWORD *)&a1[v86 / 8];
          *((_OWORD *)v88 + 1) = v87;
          v86 += 32;
        }
        while (((8 * v22) & 0x7FFFFFFE0) != v86);
        uint64_t v85 = v22 & 0xFFFFFFFC;
        uint64_t v84 = v23;
        if (v85 != v22) {
          goto LABEL_108;
        }
      }
LABEL_111:
      if (v20 >= 1)
      {
        int v220 = v69;
        bzero(v227, 8 * v19);
        uint64_t v83 = v71 & 0x7FFFFFFE0;
        uint64_t v82 = v205;
        uint64_t v77 = v206;
        uint64_t v76 = v207;
        uint64_t v75 = v208;
        unint64_t v74 = v209;
        int v69 = v220;
        int v20 = v19;
        float64x2_t v23 = v225;
        double v17 = a9;
        LODWORD(v18) = v221;
      }
      if ((int)v22 >= 1)
      {
        uint64_t v90 = 0;
        unint64_t v91 = a3;
        while (1)
        {
          uint64_t v92 = *(uint64_t *)&v84[v90];
          if ((int)v19 < 4)
          {
            uint64_t v93 = 0;
            if ((int)v19 <= 0) {
              goto LABEL_115;
            }
            goto LABEL_127;
          }
          if (v74 < 4) {
            break;
          }
          uint64_t v95 = 0;
          float64x2_t v96 = (float64x2_t)vdupq_lane_s64(v92, 0);
          uint64_t v97 = v76;
          do
          {
            uint64_t v98 = (double *)&v227[v95 * 8];
            float64x2x4_t v231 = vld4q_f64(v98);
            uint64_t v99 = (const double *)&v91[v95];
            float64x2x4_t v233 = vld4q_f64(v99);
            v231.val[0] = vmlaq_f64(v231.val[0], v96, v233.val[0]);
            v231.val[1] = vmlaq_f64(v231.val[1], v96, v233.val[1]);
            v231.val[2] = vmlaq_f64(v231.val[2], v96, v233.val[2]);
            v231.val[3] = vmlaq_f64(v231.val[3], v96, v233.val[3]);
            vst4q_f64(v98, v231);
            v95 += 8;
            v97 -= 2;
          }
          while (v97);
          uint64_t v94 = v77;
          if (v75 != v76) {
            goto LABEL_124;
          }
LABEL_126:
          uint64_t v93 = v94;
          if ((int)v94 >= (int)v19) {
            goto LABEL_115;
          }
LABEL_127:
          uint64_t v104 = v19 - v93;
          if ((unint64_t)(v19 - v93) >= 4)
          {
            uint64_t v105 = (v104 & 0xFFFFFFFFFFFFFFFCLL) + v93;
            float64x2_t v106 = (float64x2_t)vdupq_lane_s64(v92, 0);
            uint64_t v107 = v93;
            unint64_t v108 = v104 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              float64x2_t v109 = (float64x2_t *)&v227[v107 * 8];
              float64x2_t v110 = vmlaq_f64(*(float64x2_t *)&v227[v107 * 8 + 16], v106, *(float64x2_t *)&v91[v107 + 2]);
              *float64x2_t v109 = vmlaq_f64(*(float64x2_t *)&v227[v107 * 8], v106, *(float64x2_t *)&v91[v107]);
              v109[1] = v110;
              v107 += 4;
              v108 -= 4;
            }
            while (v108);
            if (v104 == (v104 & 0xFFFFFFFFFFFFFFFCLL)) {
              goto LABEL_115;
            }
          }
          else
          {
            uint64_t v105 = v93;
          }
          do
          {
            *(double *)&v227[8 * v105] = *(double *)&v227[8 * v105] + *(double *)&v91[v105] * *(double *)&v92;
            ++v105;
          }
          while (v19 != v105);
LABEL_115:
          ++v90;
          unint64_t v91 = (void *)((char *)v91 + v80);
          if (v90 == v22) {
            goto LABEL_134;
          }
        }
        uint64_t v94 = 0;
LABEL_124:
        uint64_t v100 = 8 * v94 + 16;
        do
        {
          uint64_t v101 = (double *)&v227[v100];
          double v102 = *(double *)&v227[v100 - 8] + *(double *)&v91[v94 + 1] * *(double *)&v92;
          *(v101 - 2) = *(double *)&v227[v100 - 16] + *(double *)((char *)v91 + v100 - 16) * *(double *)&v92;
          *(v101 - 1) = v102;
          double v103 = *(double *)&v227[v100 + 8] + *(double *)((char *)v91 + v100 + 8) * *(double *)&v92;
          *uint64_t v101 = *(double *)&v227[v100] + *(double *)((char *)v91 + v100) * *(double *)&v92;
          v101[1] = v103;
          v94 += 4;
          v100 += 32;
        }
        while (v94 <= v70);
        goto LABEL_126;
      }
LABEL_134:
      if (v222)
      {
        if (v20 >= 1)
        {
          uint64_t v111 = 0;
          float64x2_t v112 = v222;
          do
          {
            *(double *)(a7 + v111) = *(double *)&v227[v111] * v17 + *v112 * v16;
            v111 += 8;
            float64x2_t v112 = (double *)((char *)v112 + v82);
          }
          while (v71 != v111);
        }
        goto LABEL_98;
      }
      if ((int)v19 >= 1)
      {
        if (v20 >= 4)
        {
          uint64_t v114 = 0;
          do
          {
            float64x2_t v115 = vmulq_n_f64(*(float64x2_t *)&v227[v114 + 16], v17);
            double v116 = (float64x2_t *)(a7 + v114);
            *double v116 = vmulq_n_f64(*(float64x2_t *)&v227[v114], v17);
            v116[1] = v115;
            v114 += 32;
          }
          while (v83 != v114);
          uint64_t v113 = v19 & 0xFFFFFFFC;
          if (v113 == v19) {
            goto LABEL_98;
          }
        }
        else
        {
          uint64_t v113 = 0;
        }
        do
        {
          *(double *)(a7 + 8 * v113) = *(double *)&v227[8 * v113] * v17;
          ++v113;
        }
        while (v19 != v113);
      }
LABEL_98:
      ++v69;
      a1 = (void *)((char *)a1 + v212);
      a5 = &v222[v210];
      a7 += v217;
      if (v69 == v18) {
        goto LABEL_253;
      }
    }
  }
LABEL_149:
  if ((int)v18 < 1) {
    goto LABEL_253;
  }
  if (v20 < 1)
  {
    if (!v23 || (int)v22 < 1) {
      goto LABEL_253;
    }
    if (v22 < 4)
    {
      int v133 = v18;
      do
      {
        uint64_t v134 = (double *)a1;
        if (v22 != 1)
        {
          v23[1] = *(double *)&a1[v24];
          if (v22 != 2) {
            v23[2] = *(double *)&a1[2 * v24];
          }
        }
        a1 += v30;
        --v133;
      }
      while (v133);
      *float64x2_t v23 = *v134;
      goto LABEL_253;
    }
    int v193 = 0;
    uint64_t v194 = 8 * v24;
    while (1)
    {
      if (v24 == 1)
      {
        unint64_t v195 = 0;
        int v196 = v18;
        do
        {
          long long v197 = *(_OWORD *)&a1[v195 / 8 + 2];
          float64x2_t v198 = &v23[v195 / 8];
          *(_OWORD *)float64x2_t v198 = *(_OWORD *)&a1[v195 / 8];
          *((_OWORD *)v198 + 1) = v197;
          v195 += 32;
        }
        while (((8 * v22) & 0x7FFFFFFE0) != v195);
        uint64_t v199 = v22 & 0xFFFFFFFC;
        if (v199 == v22) {
          goto LABEL_260;
        }
      }
      else
      {
        uint64_t v199 = 0;
        int v196 = v18;
      }
      uint64_t v200 = v22 - v199;
      uint64_t v201 = &v23[v199];
      uint64_t v202 = v194 * v199;
      do
      {
        *v201++ = *(double *)((char *)a1 + v202);
        v202 += v194;
        --v200;
      }
      while (v200);
LABEL_260:
      ++v193;
      a1 += v30;
      if (v193 == v196) {
        goto LABEL_253;
      }
    }
  }
  double v117 = a5;
  if (v23) {
    BOOL v118 = (int)v22 < 1;
  }
  else {
    BOOL v118 = 1;
  }
  char v119 = v118;
  if ((int)v22 <= 3)
  {
    int v120 = 0;
    uint64_t v121 = 8 * v19;
    uint64_t v122 = 8 * v28;
    do
    {
      if (v23) {
        float64x2_t v123 = v23;
      }
      else {
        float64x2_t v123 = (double *)a1;
      }
      if (v119)
      {
        int v124 = v221;
      }
      else
      {
        *float64x2_t v23 = *(double *)a1;
        float64x2_t v123 = v23;
        int v124 = v221;
        if (v22 != 1)
        {
          v23[1] = *(double *)&a1[v24];
          float64x2_t v123 = v23;
          if (v22 != 2)
          {
            v23[2] = *(double *)&a1[2 * v24];
            float64x2_t v123 = v23;
          }
        }
      }
      if ((int)v22 <= 0)
      {
        uint64_t v130 = 0;
        uint64_t v131 = v117;
        do
        {
          double v132 = a9 * 0.0;
          if (v131) {
            double v132 = a9 * 0.0 + *v131 * a10;
          }
          *(double *)(a7 + v130) = v132;
          v130 += 8;
          uint64_t v131 = (double *)((char *)v131 + v122);
        }
        while (v121 != v130);
      }
      else
      {
        uint64_t v125 = 0;
        float64x2_t v126 = (double *)(a3 + 1);
        float64x2_t v127 = v117;
        do
        {
          double v128 = *v123 * *(v126 - 1) + 0.0;
          if (v22 != 1)
          {
            double v128 = v128 + v123[1] * *v126;
            if (v22 != 2) {
              double v128 = v128 + v123[2] * v126[1];
            }
          }
          double v129 = (v128 + 0.0) * a9;
          if (v127) {
            double v129 = v129 + *v127 * a10;
          }
          *(double *)(a7 + v125) = v129;
          v125 += 8;
          float64x2_t v127 = (double *)((char *)v127 + v122);
          v126 += v25;
        }
        while (v121 != v125);
      }
      ++v120;
      a1 += v30;
      a7 += 8 * v216;
      v117 += v27;
    }
    while (v120 != v124);
    goto LABEL_253;
  }
  int v218 = 0;
  uint64_t v135 = (int)v22 - 4;
  int v136 = (v22 - 4) & 0xFFFFFFFC;
  uint64_t v137 = (v136 + 4);
  uint64_t v138 = (v22 - v136 - 5);
  unint64_t v139 = 3;
  if (v135 > 3) {
    unint64_t v139 = (int)v22 - 4;
  }
  uint64_t v140 = (v139 >> 2) + 1;
  unint64_t v211 = v24;
  uint64_t v213 = 8 * v30;
  uint64_t v141 = 8 * v24;
  uint64_t v142 = (v138 + 1) & 0x1FFFFFFFCLL;
  uint64_t v143 = 8 * v25;
  char v215 = v119;
  while (2)
  {
    if (v23) {
      unint64_t v144 = v23;
    }
    else {
      unint64_t v144 = (double *)a1;
    }
    if (v119) {
      goto LABEL_205;
    }
    if (v24 == 1)
    {
      unint64_t v145 = 0;
      do
      {
        long long v146 = *(_OWORD *)&a1[v145 / 8 + 2];
        float v147 = &v23[v145 / 8];
        *(_OWORD *)float v147 = *(_OWORD *)&a1[v145 / 8];
        *((_OWORD *)v147 + 1) = v146;
        v145 += 32;
      }
      while (((8 * v22) & 0x7FFFFFFE0) != v145);
      uint64_t v148 = v22 & 0xFFFFFFFC;
      unint64_t v144 = v23;
      if (v148 == v22) {
        goto LABEL_205;
      }
    }
    else
    {
      uint64_t v148 = 0;
    }
    uint64_t v149 = v141 * v148;
    do
    {
      v23[v148++] = *(double *)((char *)a1 + v149);
      v149 += v141;
    }
    while (v22 != v148);
    unint64_t v144 = v23;
LABEL_205:
    uint64_t v150 = 0;
    uint64_t v151 = a3;
    char v152 = v117;
    do
    {
      if (v139 < 0xC)
      {
        uint64_t v153 = 0;
        double v154 = 0.0;
        double v155 = 0.0;
        double v156 = 0.0;
        double v157 = 0.0;
LABEL_212:
        uint64_t v168 = 8 * v153 + 16;
        do
        {
          double v157 = v157 + *(double *)((char *)v144 + v168 - 16) * *(double *)((char *)v151 + v168 - 16);
          double v156 = v156 + *(double *)((char *)v144 + v168 - 8) * *(double *)&v151[v153 + 1];
          double v155 = v155 + *(double *)((char *)v144 + v168) * *(double *)((char *)v151 + v168);
          double v154 = v154 + *(double *)((char *)v144 + v168 + 8) * *(double *)((char *)v151 + v168 + 8);
          v153 += 4;
          v168 += 32;
        }
        while (v153 <= v135);
        goto LABEL_214;
      }
      uint64_t v158 = 0;
      double v154 = 0.0;
      uint64_t v159 = v140 & 0x3FFFFFFC;
      double v155 = 0.0;
      double v156 = 0.0;
      double v157 = 0.0;
      do
      {
        int v160 = &v144[v158];
        float64x2x4_t v232 = vld4q_f64(v160);
        v160 += 8;
        float64x2x4_t v234 = vld4q_f64(v160);
        uint64_t v161 = (const double *)&v151[v158];
        float64x2x4_t v235 = vld4q_f64(v161);
        v161 += 8;
        float64x2x4_t v236 = vld4q_f64(v161);
        float64x2_t v162 = vmulq_f64(v232.val[0], v235.val[0]);
        float64x2_t v163 = vmulq_f64(v234.val[0], v236.val[0]);
        float64x2_t v164 = vmulq_f64(v232.val[1], v235.val[1]);
        float64x2_t v165 = vmulq_f64(v234.val[1], v236.val[1]);
        float64x2_t v166 = vmulq_f64(v232.val[2], v235.val[2]);
        float64x2_t v167 = vmulq_f64(v234.val[2], v236.val[2]);
        v232.val[0] = vmulq_f64(v232.val[3], v235.val[3]);
        v232.val[2] = vmulq_f64(v234.val[3], v236.val[3]);
        double v154 = v154 + v232.val[0].f64[0] + v232.val[0].f64[1] + v232.val[2].f64[0] + v232.val[2].f64[1];
        double v155 = v155 + v166.f64[0] + v166.f64[1] + v167.f64[0] + v167.f64[1];
        double v156 = v156 + v164.f64[0] + v164.f64[1] + v165.f64[0] + v165.f64[1];
        double v157 = v157 + v162.f64[0] + v162.f64[1] + v163.f64[0] + v163.f64[1];
        v158 += 16;
        v159 -= 4;
      }
      while (v159);
      uint64_t v153 = 4 * (v140 & 0x3FFFFFFC);
      double v16 = a10;
      double v17 = a9;
      if (v140 != (v140 & 0x3FFFFFFC)) {
        goto LABEL_212;
      }
LABEL_214:
      if ((int)v137 >= (int)v22) {
        goto LABEL_222;
      }
      if (v138 < 3)
      {
        uint64_t v169 = v137;
LABEL_220:
        uint64_t v174 = v169;
        do
        {
          double v157 = v157 + v144[v174] * *(double *)&v151[v174];
          LODWORD(v169) = v169 + 1;
          ++v174;
        }
        while ((int)v22 > (int)v169);
        goto LABEL_222;
      }
      uint64_t v170 = v137;
      uint64_t v171 = (v138 + 1) & 0x1FFFFFFFCLL;
      do
      {
        float64x2_t v172 = vmulq_f64(*(float64x2_t *)&v144[v170], *(float64x2_t *)&v151[v170]);
        float64x2_t v173 = vmulq_f64(*(float64x2_t *)&v144[v170 + 2], *(float64x2_t *)&v151[v170 + 2]);
        double v157 = v157 + v172.f64[0] + v172.f64[1] + v173.f64[0] + v173.f64[1];
        v170 += 4;
        v171 -= 4;
      }
      while (v171);
      uint64_t v169 = v142 + v137;
      if (v138 + 1 != v142) {
        goto LABEL_220;
      }
LABEL_222:
      double v175 = (v154 + v155 + v156 + v157) * v17;
      if (v152) {
        double v175 = v175 + *v152 * v16;
      }
      *(double *)(a7 + 8 * v150++) = v175;
      v152 += v28;
      uint64_t v151 = (void *)((char *)v151 + v143);
    }
    while (v150 != v19);
    float64x2_t v23 = v225;
    unint64_t v24 = v211;
    a1 = (void *)((char *)a1 + v213);
    v117 += v219;
    a7 += 8 * v216;
    ++v218;
    char v119 = v215;
    if (v218 != v221) {
      continue;
    }
    break;
  }
LABEL_253:
  uint64_t result = v228;
  if (v228 != v230 && v228 != 0) {
    operator delete[]();
  }
  return result;
}

void sub_1002819F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (STACK[0x528] != a15)
  {
    if (STACK[0x528]) {
      operator delete[]();
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_100281A58(double *a1, unint64_t a2, double *a3, unint64_t a4, double *a5, unint64_t a6, int *a7, unsigned int *a8, char a9)
{
  uint64_t v9 = a5;
  int v11 = a7[1];
  uint64_t v12 = (int)*a8;
  int v146 = a8[1];
  uint64_t v13 = a2 >> 3;
  if (a9)
  {
    if (v11 >= 0x89) {
      operator new[]();
    }
    uint64_t v15 = 1;
    uint64_t v14 = (double *)v148;
  }
  else
  {
    uint64_t v14 = 0;
    int v11 = *a7;
    uint64_t v15 = a2 >> 3;
    uint64_t v13 = 1;
  }
  uint64_t v16 = *a8;
  unint64_t v17 = a4 >> 3;
  unint64_t v145 = a6 >> 3;
  uint64_t v147 = v16;
  if ((a9 & 2) == 0)
  {
    if (v146 < 1) {
      return v148;
    }
    int v18 = 0;
    uint64_t v19 = v12 - 4;
    if (v14) {
      BOOL v20 = v11 < 1;
    }
    else {
      BOOL v20 = 1;
    }
    char v21 = v20;
    uint64_t v22 = v11 & 0xFFFFFFFC;
    BOOL v23 = v11 >= 4 && v13 == 1;
    uint64_t v24 = 8 * v15;
    char v25 = !v23;
    uint64_t v26 = 8 * v13;
    uint64_t v27 = (float64x2_t *)(a3 + 2);
    uint64_t v28 = 8 * v17;
    unsigned int v141 = *a8;
    char v140 = v21;
    uint64_t v139 = v24;
    char v138 = v25;
    while (1)
    {
      if (v14) {
        uint64_t v29 = v14;
      }
      else {
        uint64_t v29 = a1;
      }
      if (v21) {
        goto LABEL_34;
      }
      if (v25)
      {
        uint64_t v30 = 0;
      }
      else
      {
        unint64_t v31 = 0;
        do
        {
          long long v32 = *(_OWORD *)&a1[v31 / 8 + 2];
          BOOL v33 = &v14[v31 / 8];
          *(_OWORD *)BOOL v33 = *(_OWORD *)&a1[v31 / 8];
          *((_OWORD *)v33 + 1) = v32;
          v31 += 32;
        }
        while (((8 * v11) & 0x7FFFFFFE0) != v31);
        uint64_t v30 = v22;
        uint64_t v29 = v14;
        if (v22 == v11) {
          goto LABEL_34;
        }
      }
      uint64_t v34 = v26 * v30;
      do
      {
        v14[v30++] = *(double *)((char *)a1 + v34);
        v34 += v26;
      }
      while (v11 != v30);
      uint64_t v29 = v14;
LABEL_34:
      if ((int)v12 >= 4)
      {
        uint64_t v35 = 0;
        unint64_t v42 = v27;
        do
        {
          float64x2_t v43 = 0uLL;
          uint64_t v44 = 8 * v35;
          float64x2_t v45 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            float64x2_t v43 = *(float64x2_t *)&v9[v35];
            float64x2_t v45 = *(float64x2_t *)((char *)v9 + (v44 | 0x10));
          }
          if (v11 >= 1)
          {
            uint64_t v46 = v42;
            uint64_t v47 = v29;
            uint64_t v48 = v11;
            do
            {
              float64x2_t v49 = vld1q_dup_f64(v47++);
              float64x2_t v43 = vmlaq_f64(v43, v46[-1], v49);
              float64x2_t v45 = vmlaq_f64(v45, *v46, v49);
              uint64_t v46 = (float64x2_t *)((char *)v46 + v28);
              --v48;
            }
            while (v48);
          }
          *(float64x2_t *)&v9[v35] = v43;
          *(float64x2_t *)((char *)v9 + (v44 | 0x10)) = v45;
          v35 += 4;
          v42 += 2;
        }
        while (v35 <= v19);
      }
      else
      {
        LODWORD(v35) = 0;
      }
      if ((int)v35 < (int)v16)
      {
        if (v11 < 1)
        {
          if ((a9 & 0x10) == 0)
          {
            int v142 = v18;
            bzero(&v9[v35], 8 * (v12 + ~v35) + 8);
            uint64_t v27 = (float64x2_t *)(a3 + 2);
            char v25 = v138;
            uint64_t v24 = v139;
            uint64_t v22 = v11 & 0xFFFFFFFC;
            char v21 = v140;
            int v18 = v142;
            LODWORD(v12) = v141;
            uint64_t v16 = v147;
          }
        }
        else
        {
          uint64_t v35 = v35;
          if ((a9 & 0x10) != 0)
          {
            double v50 = &a3[v35];
            do
            {
              double v51 = v9[v35];
              float v52 = v50;
              uint64_t v53 = v29;
              uint64_t v54 = v11;
              do
              {
                double v55 = *v53++;
                double v51 = v51 + v55 * *v52;
                float v52 = (double *)((char *)v52 + v28);
                --v54;
              }
              while (v54);
              v9[v35++] = v51;
              ++v50;
            }
            while (v35 != v16);
          }
          else
          {
            BOOL v36 = &a3[v35];
            do
            {
              double v37 = 0.0;
              uint64_t v38 = v36;
              char v39 = v29;
              uint64_t v40 = v11;
              do
              {
                double v41 = *v39++;
                double v37 = v37 + v41 * *v38;
                uint64_t v38 = (double *)((char *)v38 + v28);
                --v40;
              }
              while (v40);
              v9[v35++] = v37;
              ++v36;
            }
            while (v35 != v16);
          }
        }
      }
      ++v18;
      a1 = (double *)((char *)a1 + v24);
      v9 += v145;
      if (v18 == v146) {
        return v148;
      }
    }
  }
  if (v146 < 1) {
    return v148;
  }
  if ((int)v12 < 1)
  {
    if (!v14 || v11 < 1) {
      return v148;
    }
    if (v11 < 4)
    {
      do
      {
        float64x2_t v61 = a1;
        if (v11 != 1)
        {
          v14[1] = a1[v13];
          if (v11 != 2) {
            uint64_t v14[2] = a1[2 * v13];
          }
        }
        a1 += v15;
        --v146;
      }
      while (v146);
      *uint64_t v14 = *v61;
      return v148;
    }
    int v116 = 0;
    uint64_t v117 = 8 * v13;
    while (1)
    {
      if (v13 == 1)
      {
        unint64_t v118 = 0;
        do
        {
          long long v119 = *(_OWORD *)&a1[v118 / 8 + 2];
          int v120 = &v14[v118 / 8];
          *(_OWORD *)int v120 = *(_OWORD *)&a1[v118 / 8];
          *((_OWORD *)v120 + 1) = v119;
          v118 += 32;
        }
        while (((8 * v11) & 0x7FFFFFFE0) != v118);
        uint64_t v121 = v11 & 0xFFFFFFFC;
        if (v121 == v11) {
          goto LABEL_140;
        }
      }
      else
      {
        uint64_t v121 = 0;
      }
      uint64_t v122 = v11 - v121;
      float64x2_t v123 = &v14[v121];
      uint64_t v124 = v117 * v121;
      do
      {
        *v123++ = *(double *)((char *)a1 + v124);
        v124 += v117;
        --v122;
      }
      while (v122);
LABEL_140:
      ++v116;
      a1 += v15;
      if (v116 == v146) {
        return v148;
      }
    }
  }
  if (v11 <= 1)
  {
    if (v11 >= 1)
    {
      int v56 = 0;
      uint64_t v57 = 8 * v16;
      if ((a9 & 0x10) != 0)
      {
        do
        {
          uint64_t v113 = a1;
          if (v14)
          {
            *uint64_t v14 = *a1;
            uint64_t v113 = v14;
          }
          unint64_t v114 = 0;
          float64x2_t v115 = a3;
          do
          {
            v9[v114 / 8] = v9[v114 / 8] + *v113 * *v115 + 0.0;
            v114 += 8;
            v115 += v17;
          }
          while (v57 != v114);
          ++v56;
          a1 += v15;
          v9 += v145;
        }
        while (v56 != v146);
      }
      else
      {
        do
        {
          double v58 = a1;
          if (v14)
          {
            *uint64_t v14 = *a1;
            double v58 = v14;
          }
          unint64_t v59 = 0;
          double v60 = a3;
          do
          {
            v9[v59 / 8] = *v58 * *v60 + 0.0 + 0.0;
            v59 += 8;
            v60 += v17;
          }
          while (v57 != v59);
          ++v56;
          a1 += v15;
          v9 += v145;
        }
        while (v56 != v146);
      }
      return v148;
    }
    if ((a9 & 0x10) == 0)
    {
      size_t v112 = 8 * v16;
      if (v14)
      {
        do
        {
          bzero(v9, v112);
          v9 += v145;
          --v146;
        }
        while (v146);
      }
      else
      {
        do
        {
          bzero(v9, v112);
          v9 += v145;
          --v146;
        }
        while (v146);
      }
      return v148;
    }
    uint64_t v126 = v12 & 0xFFFFFFFC;
    if (v14)
    {
      if (v12 >= 4)
      {
        for (int i = 0; i != v146; ++i)
        {
          unint64_t v134 = 0;
          do
          {
            uint64_t v135 = (float64x2_t *)&v9[v134 / 8];
            float64x2_t v136 = vaddq_f64(*(float64x2_t *)&v9[v134 / 8 + 2], (float64x2_t)0);
            *uint64_t v135 = vaddq_f64(*(float64x2_t *)&v9[v134 / 8], (float64x2_t)0);
            v135[1] = v136;
            v134 += 32;
          }
          while (((8 * v16) & 0x7FFFFFFE0) != v134);
          if (v126 != v16)
          {
            uint64_t v137 = v12 & 0xFFFFFFFC;
            do
            {
              v9[v137] = v9[v137] + 0.0;
              ++v137;
            }
            while (v16 != v137);
          }
          v9 += v145;
        }
      }
      else
      {
        float64x2_t v127 = a5 + 2;
        do
        {
          *(v127 - 2) = *(v127 - 2) + 0.0;
          if (v12 != 1)
          {
            *(v127 - 1) = *(v127 - 1) + 0.0;
            if (v12 != 2) {
              *float64x2_t v127 = *v127 + 0.0;
            }
          }
          v127 += v145;
          --v146;
        }
        while (v146);
      }
      return v148;
    }
    int v128 = 0;
    while (1)
    {
      if (v12 >= 4)
      {
        unint64_t v130 = 0;
        do
        {
          uint64_t v131 = (float64x2_t *)&v9[v130 / 8];
          float64x2_t v132 = vaddq_f64(*(float64x2_t *)&v9[v130 / 8 + 2], (float64x2_t)0);
          *uint64_t v131 = vaddq_f64(*(float64x2_t *)&v9[v130 / 8], (float64x2_t)0);
          v131[1] = v132;
          v130 += 32;
        }
        while (((8 * v16) & 0x7FFFFFFE0) != v130);
        uint64_t v129 = v12 & 0xFFFFFFFC;
        if (v126 == v16) {
          goto LABEL_162;
        }
      }
      else
      {
        uint64_t v129 = 0;
      }
      do
      {
        v9[v129] = v9[v129] + 0.0;
        ++v129;
      }
      while (v16 != v129);
LABEL_162:
      ++v128;
      v9 += v145;
      if (v128 == v146) {
        return v148;
      }
    }
  }
  int v62 = 0;
  unint64_t v63 = (v11 - 2);
  uint64_t v64 = (v63 & 0xFFFFFFFE) + 2;
  int v65 = (v63 & 0xFFFFFFFE) + 3;
  if (v11 > v65) {
    int v65 = v11;
  }
  uint64_t v66 = v65 - (v63 & 0xFFFFFFFE) - 3;
  uint64_t v67 = (v63 >> 1) + 1;
  uint64_t v68 = v67 & 0xFFFFFFFC;
  uint64_t v69 = (v66 + 1) & 0x1FFFFFFFCLL;
  uint64_t v70 = 8 * v15;
  uint64_t v71 = 8 * v13;
  BOOL v73 = v11 < 4 || v13 != 1;
  BOOL v143 = v73;
  uint64_t v74 = 8 * v17;
  while (2)
  {
    uint64_t v75 = a1;
    if (!v14) {
      goto LABEL_97;
    }
    if (v143)
    {
      uint64_t v76 = 0;
    }
    else
    {
      unint64_t v77 = 0;
      do
      {
        long long v78 = *(_OWORD *)&a1[v77 / 8 + 2];
        BOOL v79 = &v14[v77 / 8];
        *(_OWORD *)BOOL v79 = *(_OWORD *)&a1[v77 / 8];
        *((_OWORD *)v79 + 1) = v78;
        v77 += 32;
      }
      while (((8 * v11) & 0x7FFFFFFE0) != v77);
      uint64_t v76 = v11 & 0xFFFFFFFC;
      uint64_t v75 = v14;
      if (v76 == v11) {
        goto LABEL_97;
      }
    }
    uint64_t v80 = v71 * v76;
    do
    {
      v14[v76++] = *(double *)((char *)a1 + v80);
      v80 += v71;
    }
    while (v11 != v76);
    uint64_t v75 = v14;
LABEL_97:
    if (v64 < v11)
    {
      uint64_t v81 = 0;
      uint64_t v82 = a3;
      while (1)
      {
        double v83 = 0.0;
        double v84 = 0.0;
        if ((a9 & 0x10) != 0) {
          double v84 = v9[v81];
        }
        if (v63 < 6) {
          break;
        }
        uint64_t v86 = 0;
        uint64_t v87 = v67 & 0xFFFFFFFC;
        do
        {
          unint64_t v88 = &v75[v86];
          float64x2x2_t v149 = vld2q_f64(v88);
          v88 += 4;
          float64x2x2_t v151 = vld2q_f64(v88);
          uint64_t v89 = &v82[v86];
          float64x2x2_t v153 = vld2q_f64(v89);
          v89 += 4;
          float64x2x2_t v155 = vld2q_f64(v89);
          float64x2_t v90 = vmulq_f64(v149.val[0], v153.val[0]);
          float64x2_t v91 = vmulq_f64(v151.val[0], v155.val[0]);
          v149.val[0] = vmulq_f64(v149.val[1], v153.val[1]);
          v151.val[0] = vmulq_f64(v151.val[1], v155.val[1]);
          double v83 = v83 + v149.val[0].f64[0] + v149.val[0].f64[1] + v151.val[0].f64[0] + v151.val[0].f64[1];
          double v84 = v84 + v90.f64[0] + v90.f64[1] + v91.f64[0] + v91.f64[1];
          v86 += 8;
          v87 -= 4;
        }
        while (v87);
        unint64_t v85 = 2 * (v67 & 0xFFFFFFFC);
        if (v67 != v68) {
          goto LABEL_107;
        }
LABEL_109:
        if (v66 >= 3)
        {
          uint64_t v95 = (v63 & 0xFFFFFFFE) + 2;
          uint64_t v96 = (v66 + 1) & 0x1FFFFFFFCLL;
          uint64_t v94 = v147;
          do
          {
            float64x2_t v97 = vmulq_f64(*(float64x2_t *)&v75[v95], *(float64x2_t *)&v82[v95]);
            float64x2_t v98 = vmulq_f64(*(float64x2_t *)&v75[v95 + 2], *(float64x2_t *)&v82[v95 + 2]);
            double v84 = v84 + v97.f64[0] + v97.f64[1] + v98.f64[0] + v98.f64[1];
            v95 += 4;
            v96 -= 4;
          }
          while (v96);
          uint64_t v93 = v69 + v64;
          if (v66 + 1 == v69) {
            goto LABEL_99;
          }
        }
        else
        {
          uint64_t v93 = (v63 & 0xFFFFFFFE) + 2;
          uint64_t v94 = v147;
        }
        uint64_t v99 = v93;
        do
        {
          double v84 = v84 + v75[v99] * v82[v99];
          LODWORD(v93) = v93 + 1;
          ++v99;
        }
        while (v11 > (int)v93);
LABEL_99:
        v9[v81++] = v83 + v84;
        uint64_t v82 = (double *)((char *)v82 + v74);
        if (v81 == v94) {
          goto LABEL_87;
        }
      }
      unint64_t v85 = 0;
LABEL_107:
      uint64_t v92 = v85;
      do
      {
        double v84 = v84 + v75[v92] * v82[v92];
        double v83 = v83 + v75[v92 + 1] * v82[v92 + 1];
        v85 += 2;
        v92 += 2;
      }
      while (v85 <= v63);
      goto LABEL_109;
    }
    uint64_t v100 = 0;
    uint64_t v101 = a3;
    do
    {
      double v102 = 0.0;
      double v103 = 0.0;
      if ((a9 & 0x10) != 0) {
        double v103 = v9[v100];
      }
      if (v63 < 6)
      {
        unint64_t v104 = 0;
LABEL_126:
        uint64_t v111 = v104;
        do
        {
          double v103 = v103 + v75[v111] * v101[v111];
          double v102 = v102 + v75[v111 + 1] * v101[v111 + 1];
          v104 += 2;
          v111 += 2;
        }
        while (v104 <= v63);
        goto LABEL_118;
      }
      uint64_t v105 = 0;
      uint64_t v106 = v67 & 0xFFFFFFFC;
      do
      {
        uint64_t v107 = &v75[v105];
        float64x2x2_t v150 = vld2q_f64(v107);
        v107 += 4;
        float64x2x2_t v152 = vld2q_f64(v107);
        unint64_t v108 = &v101[v105];
        float64x2x2_t v154 = vld2q_f64(v108);
        v108 += 4;
        float64x2x2_t v156 = vld2q_f64(v108);
        float64x2_t v109 = vmulq_f64(v150.val[0], v154.val[0]);
        float64x2_t v110 = vmulq_f64(v152.val[0], v156.val[0]);
        v150.val[0] = vmulq_f64(v150.val[1], v154.val[1]);
        v152.val[0] = vmulq_f64(v152.val[1], v156.val[1]);
        double v102 = v102 + v150.val[0].f64[0] + v150.val[0].f64[1] + v152.val[0].f64[0] + v152.val[0].f64[1];
        double v103 = v103 + v109.f64[0] + v109.f64[1] + v110.f64[0] + v110.f64[1];
        v105 += 8;
        v106 -= 4;
      }
      while (v106);
      unint64_t v104 = 2 * (v67 & 0xFFFFFFFC);
      if (v67 != v68) {
        goto LABEL_126;
      }
LABEL_118:
      v9[v100++] = v102 + v103;
      uint64_t v101 = (double *)((char *)v101 + v74);
    }
    while (v100 != v147);
LABEL_87:
    ++v62;
    a1 = (double *)((char *)a1 + v70);
    v9 += v145;
    if (v62 != v146) {
      continue;
    }
    return v148;
  }
}

void sub_100282550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22 != v22)
  {
    if (a22) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

double *sub_100282580(double *result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10 = a7[1];
  uint64_t v11 = a2 >> 3;
  if ((a8 & 4) != 0) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = a2 >> 3;
  }
  if ((a8 & 4) == 0) {
    uint64_t v11 = 1;
  }
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (result) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (!v10) {
    return result;
  }
  unint64_t v15 = a3;
  uint64_t v16 = *a7;
  unint64_t v17 = a4 >> 3;
  unint64_t v18 = a6 >> 3;
  unint64_t v19 = (v16 - 4);
  if ((int)v16 >= 4)
  {
    uint64_t v24 = 0;
    unint64_t v25 = a6 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = a4 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = ((8 * v19) & 0x7FFFFFFE0) + 32;
    uint64_t v70 = (v19 >> 2) + 1;
    unint64_t v71 = v16 - (v16 & 0xFFFFFFFC);
    uint64_t v28 = 8 * v13;
    uint64_t v29 = 4 * v14;
    uint64_t v30 = 8 * v18;
    uint64_t v31 = 8 * v17;
    uint64_t v32 = v14;
    BOOL v33 = &result[v29];
    unint64_t v34 = a5 + 16;
    unint64_t v35 = a5;
    while (result)
    {
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v38 = v33;
      char v39 = result;
      do
      {
        uint64_t v40 = v38;
        double v41 = *(double *)(a3 + v36) * a9 + a10 * *v39;
        unint64_t v42 = &v39[v32];
        double v43 = *(double *)(a3 + v36 + 8) * a9 + a10 * *v42;
        uint64_t v44 = (double *)(v35 + v36);
        *uint64_t v44 = v41;
        v44[1] = v43;
        float64x2_t v45 = &v42[v32];
        double v46 = *(double *)(a3 + v36 + 16) * a9 + a10 * *v45;
        uint64_t v47 = &v45[v32];
        double v48 = *(double *)(a3 + v36 + 24) * a9 + a10 * *v47;
        v37 += 4;
        _DWORD v44[2] = v46;
        v44[3] = v48;
        v36 += 32;
        char v39 = &v47[v32];
        uint64_t v38 = (double *)((char *)v38 + v29 * 8);
      }
      while (v37 <= v19);
      if ((int)v16 > (int)v37)
      {
        uint64_t v49 = v37 & 0xFFFFFFFC;
        do
        {
          *(double *)(v35 + 8 * v49) = *(double *)(a3 + 8 * v49) * a9 + *v40 * a10;
          ++v49;
          uint64_t v40 = (double *)((char *)v40 + v32 * 8);
        }
        while (v49 != v16);
      }
LABEL_26:
      uint64_t result = (double *)((char *)result + v28);
      a3 += v31;
      v35 += v30;
      ++v24;
      BOOL v33 = (double *)((char *)v33 + v28);
      v34 += v30;
      if (!--v10) {
        return result;
      }
    }
    unint64_t v50 = a5 + v25 * v24;
    unint64_t v51 = v15 + v26 * v24;
    if (v19 >= 4 && (v35 < v51 + v27 ? (BOOL v52 = a3 >= v50 + v27) : (BOOL v52 = 1), v52))
    {
      uint64_t v53 = 0;
      uint64_t v54 = v70 & 0x7FFFFFFE;
      do
      {
        double v55 = (const double *)(a3 + v53);
        float64x2x4_t v72 = vld4q_f64(v55);
        v73.val[0] = vmulq_n_f64(v72.val[0], a9);
        v73.val[1] = vmulq_n_f64(v72.val[1], a9);
        v73.val[2] = vmulq_n_f64(v72.val[2], a9);
        v73.val[3] = vmulq_n_f64(v72.val[3], a9);
        int v56 = (double *)(v35 + v53);
        vst4q_f64(v56, v73);
        v53 += 64;
        v54 -= 2;
      }
      while (v54);
      int v57 = v70 & 0x7FFFFFFE;
      unint64_t v58 = 4 * (v70 & 0x7FFFFFFE);
      if (v70 == (v70 & 0x7FFFFFFE))
      {
LABEL_47:
        if ((int)v16 > (int)v58)
        {
          uint64_t v65 = v58 & 0xFFFFFFFC;
          if (v71 < 8) {
            goto LABEL_57;
          }
          if (v50 - v51 < 0x20) {
            goto LABEL_57;
          }
          unint64_t v66 = v71 - (v16 & 3);
          v65 += v66;
          uint64_t v67 = 32 * (v58 >> 2);
          do
          {
            float64x2_t v68 = vmulq_n_f64(*(float64x2_t *)(a3 + v67 + 16), a9);
            uint64_t v69 = (float64x2_t *)(v35 + v67);
            float64x2_t *v69 = vmulq_n_f64(*(float64x2_t *)(a3 + v67), a9);
            v69[1] = v68;
            v67 += 32;
            v66 -= 4;
          }
          while (v66);
          if ((v16 & 3) != 0)
          {
LABEL_57:
            do
            {
              *(double *)(v35 + 8 * v65) = *(double *)(a3 + 8 * v65) * a9;
              ++v65;
            }
            while (v16 != v65);
          }
        }
        goto LABEL_26;
      }
    }
    else
    {
      int v57 = 0;
      unint64_t v58 = 0;
    }
    uint64_t v59 = 8 * v58;
    unint64_t v60 = v34;
    unint64_t v61 = a3;
    do
    {
      double v62 = *(double *)(v61 + v59 + 8) * a9;
      unint64_t v63 = v60 + v59;
      *(double *)(v63 - 16) = *(double *)(v61 + v59) * a9;
      *(double *)(v63 - 8) = v62;
      double v64 = *(double *)(v61 + v59 + 24);
      *(double *)(v60 + v59) = *(double *)(v61 + v59 + 16) * a9;
      v58 += 4;
      ++v57;
      *(double *)(v63 + 8) = v64 * a9;
      v61 += 32;
      v60 += 32;
    }
    while (v58 <= v19);
    goto LABEL_47;
  }
  if ((int)v16 >= 1)
  {
    BOOL v20 = (double *)(a3 + 16);
    char v21 = (double *)(a5 + 8);
    do
    {
      double v22 = *(v20 - 2) * a9;
      if (result)
      {
        *(v21 - 1) = v22 + *result * a10;
        if (v16 == 1) {
          goto LABEL_17;
        }
        *char v21 = *(v20 - 1) * a9 + result[v14] * a10;
        if (v16 == 2) {
          goto LABEL_17;
        }
        double v23 = *v20 * a9 + result[2 * v14] * a10;
      }
      else
      {
        *(v21 - 1) = v22;
        if (v16 == 1) {
          goto LABEL_17;
        }
        *char v21 = *(v20 - 1) * a9;
        if (v16 == 2) {
          goto LABEL_17;
        }
        double v23 = *v20 * a9;
      }
      v21[1] = v23;
LABEL_17:
      result += v13;
      v20 += v17;
      v21 += v18;
      --v10;
    }
    while (v10);
  }
  return result;
}

void *sub_100282970(void *a1, unint64_t a2, float32x2_t *a3, unint64_t a4, float32x2_t *a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int *a11, unsigned int *a12, char a13)
{
  uint64_t v19 = a11[1];
  int v257 = *a11;
  uint64_t v20 = *a12;
  uint64_t v255 = a12[1];
  unsigned int v261 = *a12;
  float64x2x4_t v268 = v273;
  bzero(v273, 0x440uLL);
  char v21 = a5;
  float32x4x4_t v271 = v273;
  uint64_t v272 = 136;
  unint64_t v22 = a2 >> 3;
  unint64_t v23 = a4;
  unint64_t v24 = a4 >> 3;
  uint64_t v25 = a6 >> 3;
  if ((a13 & 4) != 0) {
    uint64_t v26 = a6 >> 3;
  }
  else {
    uint64_t v26 = 1;
  }
  if ((a13 & 4) != 0) {
    uint64_t v25 = 1;
  }
  if (a5) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  if (!a5) {
    uint64_t v25 = 0;
  }
  uint64_t v262 = v25;
  unint64_t v265 = a8 >> 3;
  if ((a13 & 1) == 0)
  {
    uint64_t v28 = 1;
    uint64_t v29 = a2 >> 3;
    double v30 = a9;
    int v31 = v257;
    if (v257 == 1) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
  uint64_t v29 = 1;
  if (a2 < 0x10)
  {
    uint64_t v28 = a2 >> 3;
    int v31 = v19;
    double v30 = a9;
    if (v19 != 1) {
      goto LABEL_28;
    }
LABEL_13:
    unint64_t v252 = a4 >> 3;
    unint64_t v32 = a2 >> 3;
    float64x2_t v258 = v21;
    bzero(v269, 0x440uLL);
    if (a2 < 0x10)
    {
      uint64_t v33 = v255;
      uint64_t v36 = v258;
      unint64_t v35 = (int)v20;
      double v37 = a10;
      double v34 = a9;
      uint64_t v38 = a3;
      if (v23 < 0x10) {
        goto LABEL_206;
      }
    }
    else
    {
      uint64_t v33 = v255;
      double v34 = a9;
      unint64_t v35 = (int)v20;
      if ((int)v19 >= 2)
      {
        uint64_t v272 = (int)v255;
        if (v255 >= 0x89) {
          operator new[]();
        }
        uint64_t v36 = v258;
        double v37 = a10;
        uint64_t v38 = a3;
        if ((int)v255 >= 1)
        {
          if (v255 == 1)
          {
            uint64_t v213 = 0;
LABEL_197:
            uint64_t v217 = &a1[v213 * v32];
            do
            {
              v273[v213++] = *v217;
              v217 += v32;
            }
            while (v255 != v213);
            goto LABEL_199;
          }
          uint64_t v212 = 0;
          uint64_t v213 = v255 & 0xFFFFFFFE;
          char v214 = a1;
          do
          {
            char v215 = &v273[v212];
            uint64_t v216 = v214[v32];
            *char v215 = *v214;
            v215[1] = v216;
            v212 += 2;
            v214 += 2 * v32;
          }
          while (v213 != v212);
          if (v213 != v255) {
            goto LABEL_197;
          }
        }
LABEL_199:
        a1 = v273;
        if (v23 >= 0x10) {
          goto LABEL_200;
        }
LABEL_206:
        if ((int)v33 < 1) {
          goto LABEL_222;
        }
        uint64_t v219 = 0;
        while (1)
        {
          int v220 = (float *)&a1[v219];
          double v221 = *v220 * v34;
          double v222 = v220[1] * v34;
          v223.f64[0] = -v222;
          if ((int)v35 >= 2)
          {
            uint64_t v226 = 0;
            int64_t v224 = 0;
            float64x2_t v227 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v221, 0);
            v228.f64[0] = -v222;
            v228.f64[1] = v220[1] * v34;
            unint64_t v225 = v36;
            do
            {
              float64x2_t v230 = vcvtq_f64_f32(v38[v226]);
              float64x2_t v231 = vmlaq_f64(vmulq_f64(v228, (float64x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL)), v230, v227);
              float64x2_t v232 = vcvtq_f64_f32(v38[v226 + 1]);
              float64x2_t v229 = vmlaq_f64(vmulq_f64(v228, (float64x2_t)vextq_s8((int8x16_t)v232, (int8x16_t)v232, 8uLL)), v232, v227);
              if (v225)
              {
                *(float32x2_t *)(a7 + v226 * 8) = vcvt_f32_f64(vaddq_f64(v231, vmulq_n_f64(vcvtq_f64_f32(*v225), v37)));
                float64x2_t v229 = vaddq_f64(v229, vmulq_n_f64(vcvtq_f64_f32(v225[v27]), v37));
              }
              else
              {
                *(float32x2_t *)(a7 + v226 * 8) = vcvt_f32_f64(v231);
              }
              *(float32x2_t *)(a7 + v226 * 8 + 8) = vcvt_f32_f64(v229);
              v224 += 2;
              v225 += 2 * v27;
              v226 += 2;
            }
            while (v224 <= (uint64_t)(v35 - 2));
            int64_t v224 = v224;
            if ((int)v224 < (int)v20)
            {
LABEL_218:
              float64x2_t v233 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v221, 0);
              v223.f64[1] = v222;
              do
              {
                float64x2_t v234 = vcvtq_f64_f32(v38[v224]);
                float64x2_t v235 = vmlaq_f64(vmulq_f64(v223, (float64x2_t)vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL)), v234, v233);
                if (v225) {
                  float64x2_t v235 = vaddq_f64(v235, vmulq_n_f64(vcvtq_f64_f32(*v225), v37));
                }
                *(float32x2_t *)(a7 + 8 * v224++) = vcvt_f32_f64(v235);
                v225 += v27;
              }
              while (v20 != v224);
            }
          }
          else
          {
            int64_t v224 = 0;
            unint64_t v225 = v36;
            if ((int)v20 > 0) {
              goto LABEL_218;
            }
          }
          ++v219;
          v36 += v262;
          a7 += 8 * v265;
          if (v219 == v33) {
            goto LABEL_222;
          }
        }
      }
      uint64_t v36 = v258;
      double v37 = a10;
      uint64_t v38 = a3;
      if (v23 < 0x10) {
        goto LABEL_206;
      }
    }
LABEL_200:
    if (v35 > 0x88) {
      operator new[]();
    }
    if ((int)v35 >= 1)
    {
      for (uint64_t i = 0; i != v35; ++i)
      {
        v269[i] = *v38;
        v38 += v252;
      }
    }
    uint64_t v38 = (float32x2_t *)v269;
    goto LABEL_206;
  }
  double v30 = a9;
  char v39 = v273;
  if ((int)v19 >= 2)
  {
    uint64_t v272 = v19;
    if (v19 >= 0x89) {
      operator new[]();
    }
    uint64_t v29 = 1;
    int v40 = v255;
    double v41 = a10;
    if ((a13 & 2) == 0) {
      goto LABEL_29;
    }
    goto LABEL_139;
  }
  uint64_t v28 = a2 >> 3;
  int v31 = v19;
  if (v19 == 1) {
    goto LABEL_13;
  }
LABEL_28:
  char v39 = 0;
  LODWORD(v19) = v31;
  unint64_t v22 = v28;
  int v40 = v255;
  double v41 = a10;
  float64x2x4_t v268 = 0;
  if ((a13 & 2) == 0)
  {
LABEL_29:
    if ((unint64_t)(8 * (int)v20) <= 0x640)
    {
      if (v40 < 1) {
        goto LABEL_222;
      }
      int v42 = 0;
      if (v39) {
        BOOL v43 = (int)v19 < 1;
      }
      else {
        BOOL v43 = 1;
      }
      char v44 = v43;
      BOOL v45 = v19 >= 4 && v22 == 1;
      uint64_t v46 = 8 * v29;
      char v47 = !v45;
      uint64_t v48 = 8 * v22;
      uint64_t v49 = 8 * v24;
LABEL_45:
      unint64_t v50 = v21;
      if (v39) {
        unint64_t v51 = v39;
      }
      else {
        unint64_t v51 = a1;
      }
      if ((v44 & 1) == 0)
      {
        uint64_t v52 = 0;
        if (v47) {
          goto LABEL_52;
        }
        do
        {
          uint64_t v53 = (_OWORD *)((char *)v268 + v52);
          long long v54 = *(_OWORD *)((char *)a1 + v52 + 16);
          *uint64_t v53 = *(_OWORD *)((char *)a1 + v52);
          v53[1] = v54;
          unint64_t v51 = v268;
          v52 += 32;
        }
        while (((8 * v19) & 0x7FFFFFFE0) != v52);
        uint64_t v52 = v19 & 0xFFFFFFFC;
        if (v52 != v19)
        {
LABEL_52:
          uint64_t v55 = v48 * v52;
          do
          {
            v268[v52++] = *(void *)((char *)a1 + v55);
            v55 += v48;
          }
          while (v19 != v52);
          unint64_t v51 = v268;
        }
      }
      if ((int)v20 < 4)
      {
        uint64_t v56 = 0;
        int v57 = v50;
        if ((int)v20 > 0) {
          goto LABEL_69;
        }
        goto LABEL_44;
      }
      uint64_t v56 = 0;
      unint64_t v58 = a3 + 2;
      int v57 = v50;
      while (1)
      {
        float64x2_t v60 = 0uLL;
        if ((int)v19 < 1)
        {
          float64x2_t v66 = 0uLL;
          float64x2_t v76 = vmulq_n_f64((float64x2_t)0, v30);
          uint64_t v77 = 8 * v56;
          float64x2_t v78 = v76;
          if (v57) {
            goto LABEL_67;
          }
        }
        else
        {
          unint64_t v61 = (float *)v51 + 1;
          double v62 = v58;
          uint64_t v63 = v19;
          float64x2_t v64 = 0uLL;
          float64x2_t v65 = 0uLL;
          float64x2_t v66 = 0uLL;
          do
          {
            double v67 = *(v61 - 1);
            v68.f64[0] = -*v61;
            float64x2_t v69 = vcvtq_f64_f32(v62[-2]);
            v68.f64[1] = *v61;
            float64x2_t v70 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)), v69, v67);
            float64x2_t v71 = vcvtq_f64_f32(v62[-1]);
            float64x2_t v64 = vaddq_f64(v64, v70);
            float64x2_t v72 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL)), v71, v67);
            float64x2_t v73 = vcvtq_f64_f32(*v62);
            float64x2_t v65 = vaddq_f64(v65, v72);
            float64x2_t v74 = vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)), v73, v67);
            float64x2_t v75 = vcvtq_f64_f32(v62[1]);
            float64x2_t v66 = vaddq_f64(v66, v74);
            float64x2_t v60 = vaddq_f64(v60, vmlaq_n_f64(vmulq_f64(v68, (float64x2_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), v75, v67));
            double v62 = (float32x2_t *)((char *)v62 + v49);
            v61 += 2;
            --v63;
          }
          while (v63);
          float64x2_t v76 = vmulq_n_f64(v64, v30);
          uint64_t v77 = 8 * v56;
          float64x2_t v78 = vmulq_n_f64(v65, v30);
          if (v57)
          {
LABEL_67:
            *(float32x2_t *)(a7 + v77) = vcvt_f32_f64(vaddq_f64(v76, vmulq_n_f64(vcvtq_f64_f32(*v57), v41)));
            *(float32x2_t *)(a7 + (v77 | 8)) = vcvt_f32_f64(vaddq_f64(v78, vmulq_n_f64(vcvtq_f64_f32(v57[v27]), v41)));
            *(float32x2_t *)(a7 + (v77 | 0x10)) = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v66, v30), vmulq_n_f64(vcvtq_f64_f32(v57[2 * v27]), v41)));
            float64x2_t v59 = vaddq_f64(vmulq_n_f64(v60, v30), vmulq_n_f64(vcvtq_f64_f32(v57[3 * v27]), v41));
            goto LABEL_60;
          }
        }
        *(float32x2_t *)(a7 + v77) = vcvt_f32_f64(v76);
        *(float32x2_t *)(a7 + (v77 | 8)) = vcvt_f32_f64(v78);
        *(float32x2_t *)(a7 + (v77 | 0x10)) = vcvt_f32_f64(vmulq_n_f64(v66, v30));
        float64x2_t v59 = vmulq_n_f64(v60, v30);
LABEL_60:
        *(float32x2_t *)(a7 + (v77 | 0x18)) = vcvt_f32_f64(v59);
        v56 += 4;
        v57 += 4 * v27;
        v58 += 4;
        if (v56 > (int)v20 - 4)
        {
          uint64_t v56 = v56;
          if ((int)v56 < (int)v20)
          {
LABEL_69:
            BOOL v79 = (float *)v51 + 1;
            uint64_t v80 = &a3[v56];
            do
            {
              float64x2_t v81 = 0uLL;
              if ((int)v19 >= 1)
              {
                uint64_t v82 = v80;
                double v83 = v79;
                uint64_t v84 = v19;
                do
                {
                  v85.f64[0] = -*v83;
                  float64x2_t v86 = vcvtq_f64_f32(*v82);
                  v85.f64[1] = *v83;
                  float64x2_t v81 = vaddq_f64(v81, vmlaq_n_f64(vmulq_f64(v85, (float64x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL)), v86, *(v83 - 1)));
                  v83 += 2;
                  uint64_t v82 = (float32x2_t *)((char *)v82 + v49);
                  --v84;
                }
                while (v84);
              }
              float64x2_t v87 = vmulq_n_f64(v81, v30);
              if (v57) {
                float64x2_t v87 = vaddq_f64(v87, vmulq_n_f64(vcvtq_f64_f32(*v57), v41));
              }
              *(float32x2_t *)(a7 + 8 * v56++) = vcvt_f32_f64(v87);
              v57 += v27;
              ++v80;
            }
            while (v56 != v20);
          }
LABEL_44:
          ++v42;
          a1 = (void *)((char *)a1 + v46);
          char v21 = &v50[v262];
          a7 += 8 * v265;
          char v39 = v268;
          if (v42 == v40) {
            goto LABEL_222;
          }
          goto LABEL_45;
        }
      }
    }
    unint64_t v88 = a4 >> 3;
    unint64_t v259 = v22;
    uint64_t v89 = v21;
    bzero(v269, 0x480uLL);
    int v90 = v261;
    if (v261 >= 0x49) {
      operator new[]();
    }
    int v91 = v255;
    double v92 = a10;
    double v93 = a9;
    uint64_t v94 = v268;
    if ((int)v255 < 1) {
      goto LABEL_222;
    }
    uint64_t v95 = v89;
    int v96 = 0;
    if (v268) {
      BOOL v97 = (int)v19 < 1;
    }
    else {
      BOOL v97 = 1;
    }
    char v98 = v97;
    char v253 = v98;
    uint64_t v251 = 8 * v29;
    uint64_t v99 = 8 * v19;
    BOOL v100 = v19 >= 4 && v259 == 1;
    uint64_t v247 = 8 * v259;
    uint64_t v101 = 8 * v88;
    char v102 = !v100;
    char v248 = v102;
    uint64_t v103 = v99 & 0x7FFFFFFE0;
    uint64_t v250 = v99 & 0x7FFFFFFE0;
    uint64_t v263 = v262;
    uint64_t v266 = 8 * v265;
    uint64_t v104 = 8 * v27;
    uint64_t v105 = (8 * v20) & 0x7FFFFFFE0;
    uint64_t v249 = v104;
    while (1)
    {
      if (v94) {
        uint64_t v106 = v94;
      }
      else {
        uint64_t v106 = a1;
      }
      int v260 = v95;
      if ((v253 & 1) == 0)
      {
        if (v248)
        {
          uint64_t v107 = 0;
LABEL_102:
          uint64_t v111 = v247 * v107;
          do
          {
            v94[v107++] = *(void *)((char *)a1 + v111);
            v111 += v247;
          }
          while (v19 != v107);
          uint64_t v106 = v94;
          goto LABEL_105;
        }
        unint64_t v108 = 0;
        do
        {
          float64x2_t v109 = &v94[v108 / 8];
          long long v110 = *(_OWORD *)&a1[v108 / 8 + 2];
          *float64x2_t v109 = *(_OWORD *)&a1[v108 / 8];
          v109[1] = v110;
          v108 += 32;
        }
        while (v103 != v108);
        uint64_t v107 = v19 & 0xFFFFFFFC;
        uint64_t v106 = v94;
        if (v107 != v19) {
          goto LABEL_102;
        }
      }
LABEL_105:
      if (v90 >= 1)
      {
        int v112 = v96;
        bzero(v269, 16 * v20);
        uint64_t v104 = v249;
        uint64_t v103 = v250;
        int v96 = v112;
        uint64_t v105 = (8 * v20) & 0x7FFFFFFE0;
        int v90 = v20;
        uint64_t v94 = v268;
        double v93 = a9;
        double v92 = a10;
        int v91 = v255;
      }
      if ((int)v19 >= 1)
      {
        uint64_t v113 = 0;
        unint64_t v114 = a3;
        float64x2_t v115 = (float *)&a3[2];
        do
        {
          float64x2_t v116 = vcvtq_f64_f32((float32x2_t)v106[v113]);
          if ((int)v20 >= 4)
          {
            uint64_t v118 = 0;
            long long v119 = (float64x2_t *)&v270;
            int v120 = v115;
            do
            {
              v121.f64[0] = *(v120 - 3);
              v122.f64[0] = *(v120 - 1);
              v121.f64[1] = -v121.f64[0];
              int8x16_t v123 = (int8x16_t)vmulq_f64(v121, v116);
              v122.f64[1] = -v122.f64[0];
              int8x16_t v124 = (int8x16_t)vmulq_f64(v122, v116);
              v125.f64[0] = v120[1];
              v126.f64[0] = v120[3];
              v125.f64[1] = -v125.f64[0];
              int8x16_t v127 = (int8x16_t)vmulq_f64(v125, v116);
              float64x2_t v128 = vaddq_f64(v119[-1], vmlaq_n_f64((float64x2_t)vextq_s8(v124, v124, 8uLL), v116, *(v120 - 2)));
              v126.f64[1] = -v126.f64[0];
              float64x2_t v129 = vaddq_f64(*v119, vmlaq_n_f64((float64x2_t)vextq_s8(v127, v127, 8uLL), v116, *v120));
              int8x16_t v130 = (int8x16_t)vmulq_f64(v126, v116);
              float64x2_t v131 = vaddq_f64(v119[1], vmlaq_n_f64((float64x2_t)vextq_s8(v130, v130, 8uLL), v116, v120[2]));
              v119[-2] = vaddq_f64(v119[-2], vmlaq_n_f64((float64x2_t)vextq_s8(v123, v123, 8uLL), v116, *(v120 - 4)));
              v119[-1] = v128;
              *long long v119 = v129;
              v119[1] = v131;
              v119 += 4;
              v118 += 4;
              v120 += 8;
            }
            while (v118 <= (int)v20 - 4);
            uint64_t v117 = v118;
            if ((int)v118 >= v90) {
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v117 = 0;
            if (v90 <= 0) {
              goto LABEL_109;
            }
          }
          uint64_t v132 = v20 - v117;
          if ((unint64_t)(v20 - v117) >= 2)
          {
            float64x2_t v134 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v116, 1);
            uint64_t v133 = (v132 & 0xFFFFFFFFFFFFFFFELL) + v117;
            float64x2_t v135 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v116.f64[0], 0);
            uint64_t v136 = v117;
            uint64_t v137 = (double *)&v269[2 * v117];
            unint64_t v138 = v132 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              uint64_t v139 = (const float *)&v114[v136];
              float64x2_t v274 = (float64x2_t)vld2_f32(v139);
              float64x2_t v140 = vcvtq_f64_f32(*(float32x2_t *)&v274.f64[0]);
              float64x2_t v274 = vcvtq_f64_f32(*(float32x2_t *)&v274.f64[1]);
              *(float64x2_t *)((char *)&v274 + 8) = vmlaq_f64(vmulq_laneq_f64(vnegq_f64(v274), v116, 1), v135, v140);
              float64x2_t v274 = vmlaq_f64(vmulq_n_f64(v274, v116.f64[0]), v134, v140);
              float64x2x2_t v281 = vld2q_f64(v137);
              v283.val[0] = vaddq_f64(v281.val[0], *(float64x2_t *)((char *)&v274 + 8));
              v283.val[1] = vaddq_f64(v281.val[1], v274);
              vst2q_f64(v137, v283);
              v137 += 4;
              v136 += 2;
              v138 -= 2;
            }
            while (v138);
            if (v132 == (v132 & 0xFFFFFFFFFFFFFFFELL)) {
              goto LABEL_109;
            }
          }
          else
          {
            uint64_t v133 = v117;
          }
          float64x2_t v141 = (float64x2_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL);
          uint64_t v142 = v20 - v133;
          uint64_t v143 = v133;
          unint64_t v144 = (float64x2_t *)&v269[2 * v133];
          do
          {
            v145.f64[0] = -v114[v143].f32[1];
            v145.f64[1] = v114[v143].f32[1];
            float64x2_t *v144 = vaddq_f64(*v144, vmlaq_n_f64(vmulq_f64(v141, v145), v116, v114[v143].f32[0]));
            ++v144;
            ++v143;
            --v142;
          }
          while (v142);
LABEL_109:
          ++v113;
          float64x2_t v115 = (float *)((char *)v115 + v101);
          unint64_t v114 = (float32x2_t *)((char *)v114 + v101);
        }
        while (v113 != v19);
      }
      if (v260)
      {
        if (v90 >= 1)
        {
          uint64_t v146 = 0;
          uint64_t v147 = v260;
          do
          {
            *(float32x2_t *)(a7 + 8 * v146) = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v269[2 * v146], v93), vmulq_n_f64(vcvtq_f64_f32(*v147), v92)));
            ++v146;
            uint64_t v147 = (float32x2_t *)((char *)v147 + v104);
          }
          while (v20 != v146);
        }
        goto LABEL_92;
      }
      if ((int)v20 >= 1)
      {
        if (v90 >= 4)
        {
          uint64_t v149 = 0;
          float64x2x2_t v150 = (const double *)v269;
          do
          {
            float64x2x2_t v151 = v150;
            float64x2x2_t v279 = vld2q_f64(v151);
            v151 += 4;
            float64x2x2_t v280 = vld2q_f64(v151);
            v282.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v279.val[0], v93)), vmulq_n_f64(v280.val[0], v93));
            v282.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v279.val[1], v93)), vmulq_n_f64(v280.val[1], v93));
            float64x2x2_t v152 = (float *)(a7 + v149);
            vst2q_f32(v152, v282);
            v149 += 32;
            v150 += 8;
          }
          while (v105 != v149);
          uint64_t v148 = v20 & 0xFFFFFFFC;
          if (v148 == v20) {
            goto LABEL_92;
          }
        }
        else
        {
          uint64_t v148 = 0;
        }
        do
        {
          *(float32x2_t *)(a7 + 8 * v148) = vcvt_f32_f64(vmulq_n_f64(*(float64x2_t *)&v269[2 * v148], v93));
          ++v148;
        }
        while (v20 != v148);
      }
LABEL_92:
      ++v96;
      a1 = (void *)((char *)a1 + v251);
      uint64_t v95 = &v260[v263];
      a7 += v266;
      if (v96 == v91) {
        goto LABEL_222;
      }
    }
  }
LABEL_139:
  if (v40 < 1) {
    goto LABEL_222;
  }
  if (v39) {
    BOOL v153 = (int)v19 < 1;
  }
  else {
    BOOL v153 = 1;
  }
  char v154 = v153;
  if ((int)v20 < 1)
  {
    if (v154) {
      goto LABEL_222;
    }
    if (v19 < 4)
    {
      do
      {
        unint64_t v211 = a1;
        if (v19 != 1)
        {
          v39[1] = a1[v22];
          if (v19 != 2) {
            void v39[2] = a1[2 * v22];
          }
        }
        a1 += v29;
        --v40;
      }
      while (v40);
      *char v39 = *v211;
      goto LABEL_222;
    }
    int v238 = 0;
    uint64_t v239 = 8 * v22;
    while (1)
    {
      if (v22 == 1)
      {
        unint64_t v240 = 0;
        do
        {
          unint64_t v241 = &v39[v240 / 8];
          long long v242 = *(_OWORD *)&a1[v240 / 8 + 2];
          _OWORD *v241 = *(_OWORD *)&a1[v240 / 8];
          v241[1] = v242;
          v240 += 32;
        }
        while (((8 * v19) & 0x7FFFFFFE0) != v240);
        uint64_t v243 = v19 & 0xFFFFFFFC;
        if (v243 == v19) {
          goto LABEL_229;
        }
      }
      else
      {
        uint64_t v243 = 0;
      }
      uint64_t v244 = v19 - v243;
      int v245 = &v39[v243];
      uint64_t v246 = v239 * v243;
      do
      {
        *v245++ = *(void *)((char *)a1 + v246);
        v246 += v239;
        --v244;
      }
      while (v244);
LABEL_229:
      ++v238;
      a1 += v29;
      if (v238 == v40) {
        goto LABEL_222;
      }
    }
  }
  int v155 = 0;
  uint64_t v156 = 8 * v29;
  BOOL v158 = v19 < 4 || v22 != 1;
  uint64_t v159 = 8 * v22;
  uint64_t v160 = 8 * v24;
  while (2)
  {
    if (v39) {
      uint64_t v161 = v39;
    }
    else {
      uint64_t v161 = a1;
    }
    if (v154) {
      goto LABEL_167;
    }
    if (v158)
    {
      uint64_t v162 = 0;
    }
    else
    {
      unint64_t v163 = 0;
      do
      {
        float64x2_t v164 = &v39[v163 / 8];
        long long v165 = *(_OWORD *)&a1[v163 / 8 + 2];
        *float64x2_t v164 = *(_OWORD *)&a1[v163 / 8];
        v164[1] = v165;
        v163 += 32;
      }
      while (((8 * v19) & 0x7FFFFFFE0) != v163);
      uint64_t v162 = v19 & 0xFFFFFFFC;
      uint64_t v161 = v39;
      if (v162 == v19) {
        goto LABEL_167;
      }
    }
    uint64_t v166 = v159 * v162;
    do
    {
      v39[v162++] = *(void *)((char *)a1 + v166);
      v166 += v159;
    }
    while (v19 != v162);
    uint64_t v161 = v39;
LABEL_167:
    uint64_t v167 = 0;
    uint64_t v168 = (char *)v161 + 28;
    uint64_t v169 = a3;
    uint64_t v170 = v21;
    do
    {
      if ((int)v19 >= 4)
      {
        unint64_t v179 = 0;
        uint64_t v180 = 0;
        float64x2_t v175 = 0uLL;
        float64x2_t v176 = 0uLL;
        float64x2_t v177 = 0uLL;
        float64x2_t v178 = 0uLL;
        do
        {
          v181.f64[0] = -*(float *)&v168[v179 - 24];
          v182.f64[0] = -*(float *)&v168[v179 - 16];
          v183.f64[0] = -*(float *)&v168[v179 - 8];
          float64x2_t v184 = vcvtq_f64_f32(v169[v179 / 8]);
          v181.f64[1] = *(float *)&v168[v179 - 24];
          float64x2_t v185 = vmulq_f64(v181, (float64x2_t)vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL));
          v181.f64[0] = -*(float *)&v168[v179];
          float64x2_t v186 = vcvtq_f64_f32(v169[v179 / 8 + 1]);
          v182.f64[1] = *(float *)&v168[v179 - 16];
          float64x2_t v178 = vaddq_f64(v178, vmlaq_n_f64(v185, v184, *(float *)&v161[v179 / 8]));
          float64x2_t v187 = vcvtq_f64_f32(v169[v179 / 8 + 2]);
          v183.f64[1] = *(float *)&v168[v179 - 8];
          float64x2_t v177 = vaddq_f64(v177, vmlaq_n_f64(vmulq_f64(v182, (float64x2_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL)), v186, *(float *)&v168[v179 - 20]));
          float64x2_t v188 = vcvtq_f64_f32(v169[v179 / 8 + 3]);
          v181.f64[1] = *(float *)&v168[v179];
          float64x2_t v176 = vaddq_f64(v176, vmlaq_n_f64(vmulq_f64(v183, (float64x2_t)vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL)), v187, *(float *)&v168[v179 - 12]));
          float64x2_t v175 = vaddq_f64(v175, vmlaq_n_f64(vmulq_f64(v181, (float64x2_t)vextq_s8((int8x16_t)v188, (int8x16_t)v188, 8uLL)), v188, *(float *)&v168[v179 - 4]));
          v180 += 4;
          v179 += 32;
        }
        while (v180 <= (int)v19 - 4);
        int v174 = ((v19 - 4) & 0xFFFFFFFC) + 4;
        if (v174 >= (int)v19) {
          goto LABEL_182;
        }
      }
      else
      {
        int v174 = 0;
        float64x2_t v175 = 0uLL;
        float64x2_t v176 = 0uLL;
        float64x2_t v177 = 0uLL;
        float64x2_t v178 = 0uLL;
        if ((int)v19 <= 0) {
          goto LABEL_182;
        }
      }
      uint64_t v189 = v174;
      uint64_t v190 = (v19 + ~v174);
      if (v190 < 3)
      {
        uint64_t v191 = v189;
LABEL_180:
        uint64_t v207 = v191;
        do
        {
          v208.f64[0] = -*((float *)&v161[v207] + 1);
          float64x2_t v209 = vcvtq_f64_f32(v169[v207]);
          v208.f64[1] = *((float *)&v161[v207] + 1);
          float64x2_t v178 = vaddq_f64(v178, vmlaq_n_f64(vmulq_f64(v208, (float64x2_t)vextq_s8((int8x16_t)v209, (int8x16_t)v209, 8uLL)), v209, *(float *)&v161[v207]));
          LODWORD(v191) = v191 + 1;
          ++v207;
        }
        while ((int)v19 > (int)v191);
        goto LABEL_182;
      }
      uint64_t v192 = v190 + 1;
      uint64_t v193 = (v190 + 1) & 0x1FFFFFFFCLL;
      uint64_t v191 = v193 + v189;
      double v194 = v178.f64[1];
      uint64_t v195 = 8 * v189 + 16;
      uint64_t v196 = v193;
      do
      {
        long long v197 = (const float *)((char *)v161 + v195);
        float64x2_t v198 = (const float *)((char *)v161 + v195 - 16);
        float64x2_t v275 = (float64x2_t)vld2_f32(v198);
        float64x2_t v276 = (float64x2_t)vld2_f32(v197);
        float64x2_t v199 = vcvtq_f64_f32(*(float32x2_t *)&v275.f64[0]);
        float64x2_t v200 = vcvtq_f64_f32(*(float32x2_t *)&v276.f64[0]);
        uint64_t v201 = (const float *)((char *)v169 + v195);
        uint64_t v202 = (const float *)((char *)&v169[-2] + v195);
        float64x2_t v277 = (float64x2_t)vld2_f32(v202);
        float32x2x2_t v278 = vld2_f32(v201);
        float64x2_t v275 = vcvtq_f64_f32(*(float32x2_t *)&v275.f64[1]);
        *(float64x2_t *)((char *)&v275 + 8) = vcvtq_f64_f32(*(float32x2_t *)&v276.f64[1]);
        float64x2_t v276 = vcvtq_f64_f32(*(float32x2_t *)&v277.f64[0]);
        *(float64x2_t *)((char *)&v276 + 8) = vcvtq_f64_f32(v278.val[0]);
        float64x2_t v277 = vcvtq_f64_f32(*(float32x2_t *)&v277.f64[1]);
        *(float64x2_t *)((char *)&v277 + 8) = vcvtq_f64_f32(v278.val[1]);
        float32x2x2_t v278 = (float32x2x2_t)vmlaq_f64(vmulq_f64(vnegq_f64(v275), v277), v276, v199);
        *(float32x2x2_t *)((char *)&v278 + 8) = (float32x2x2_t)vmlaq_f64(vmulq_f64(vnegq_f64(*(float64x2_t *)((char *)&v275 + 8)), *(float64x2_t *)((char *)&v277 + 8)), *(float64x2_t *)((char *)&v276 + 8), v200);
        float64x2_t v275 = vmlaq_f64(vmulq_f64(v275, v276), v277, v199);
        *(float64x2_t *)((char *)&v275 + 8) = vmlaq_f64(vmulq_f64(*(float64x2_t *)((char *)&v275 + 8), *(float64x2_t *)((char *)&v276 + 8)), *(float64x2_t *)((char *)&v277 + 8), v200);
        double v194 = v194 + v275.f64[0] + v203 + v275.f64[1] + v204;
        v178.f64[0] = v178.f64[0] + *(double *)v278.val + v205 + *(double *)&v278.val[1] + v206;
        v195 += 32;
        v196 -= 4;
      }
      while (v196);
      v178.f64[1] = v194;
      if (v192 != v193) {
        goto LABEL_180;
      }
LABEL_182:
      float64x2_t v210 = vmulq_n_f64(vaddq_f64(v175, vaddq_f64(v176, vaddq_f64(v177, v178))), v30);
      if (v21) {
        float64x2_t v210 = vaddq_f64(v210, vmulq_n_f64(vcvtq_f64_f32(*v21), v41));
      }
      float v171 = v210.f64[0];
      float64x2_t v172 = (float *)(a7 + 8 * v167);
      float v173 = v210.f64[1];
      *float64x2_t v172 = v171;
      v172[1] = v173;
      ++v167;
      v21 += v27;
      uint64_t v169 = (float32x2_t *)((char *)v169 + v160);
    }
    while (v167 != v20);
    ++v155;
    a1 = (void *)((char *)a1 + v156);
    char v21 = &v170[v262];
    a7 += 8 * v265;
    char v39 = v268;
    if (v155 != v40) {
      continue;
    }
    break;
  }
LABEL_222:
  uint64_t result = v271;
  if (v271 != v273 && v271 != 0) {
    operator delete[]();
  }
  return result;
}

void sub_100283BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (STACK[0x568] != a14)
  {
    if (STACK[0x568]) {
      operator delete[]();
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_100283C5C(void *a1, unint64_t a2, float32x2_t *a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, int *a8, char a9)
{
  unsigned int v14 = *a7;
  unsigned int v15 = a7[1];
  uint64_t v175 = *a8;
  int v178 = a8[1];
  bzero(v180, 0x440uLL);
  uint64_t v16 = a2 >> 3;
  if (a9)
  {
    if (v15 >= 0x89) {
      operator new[]();
    }
    uint64_t v18 = 1;
    unint64_t v17 = v180;
  }
  else
  {
    unint64_t v17 = 0;
    unsigned int v15 = v14;
    uint64_t v18 = v16;
    uint64_t v16 = 1;
  }
  int v19 = v175;
  uint64_t v20 = v175;
  unint64_t v21 = a4 >> 3;
  unint64_t v22 = a6 >> 4;
  int v23 = v178;
  if ((a9 & 2) == 0)
  {
    if (v178 < 1) {
      return v180;
    }
    int v24 = 0;
    if (v17) {
      BOOL v25 = (int)v15 < 1;
    }
    else {
      BOOL v25 = 1;
    }
    char v26 = v25;
    uint64_t v27 = v15 & 0xFFFFFFFC;
    BOOL v28 = v15 >= 4 && v16 == 1;
    uint64_t v29 = 8 * v18;
    uint64_t v30 = 8 * v15;
    char v31 = !v28;
    uint64_t v32 = v30 & 0x7FFFFFFE0;
    uint64_t v33 = 8 * v16;
    double v34 = a3 + 2;
    uint64_t v35 = 8 * v21;
    char v172 = v26;
    uint64_t v171 = v29;
    char v170 = v31;
    uint64_t v169 = v30 & 0x7FFFFFFE0;
    while (1)
    {
      if (v17) {
        uint64_t v36 = v17;
      }
      else {
        uint64_t v36 = a1;
      }
      if (v26) {
        goto LABEL_34;
      }
      if (v31)
      {
        uint64_t v37 = 0;
      }
      else
      {
        unint64_t v38 = 0;
        do
        {
          char v39 = &v17[v38 / 8];
          long long v40 = *(_OWORD *)&a1[v38 / 8 + 2];
          *char v39 = *(_OWORD *)&a1[v38 / 8];
          v39[1] = v40;
          v38 += 32;
        }
        while (v32 != v38);
        uint64_t v37 = v27;
        uint64_t v36 = v17;
        if (v27 == v15) {
          goto LABEL_34;
        }
      }
      uint64_t v41 = v33 * v37;
      do
      {
        v17[v37++] = *(void *)((char *)a1 + v41);
        v41 += v33;
      }
      while (v15 != v37);
      uint64_t v36 = v17;
LABEL_34:
      if (v19 >= 4)
      {
        uint64_t v42 = 0;
        uint64_t v52 = v34;
        do
        {
          float64x2_t v53 = 0uLL;
          uint64_t v54 = 16 * v42;
          float64x2_t v55 = 0uLL;
          float64x2_t v56 = 0uLL;
          float64x2_t v57 = 0uLL;
          if ((a9 & 0x10) != 0)
          {
            float64x2_t v53 = *(float64x2_t *)(a5 + 16 * v42);
            float64x2_t v55 = *(float64x2_t *)(a5 + (v54 | 0x10));
            float64x2_t v56 = *(float64x2_t *)(a5 + (v54 | 0x20));
            float64x2_t v57 = *(float64x2_t *)(a5 + (v54 | 0x30));
          }
          if ((int)v15 >= 1)
          {
            unint64_t v58 = (float *)v36 + 1;
            float64x2_t v59 = v52;
            uint64_t v60 = v15;
            do
            {
              double v61 = *(v58 - 1);
              v62.f64[0] = -*v58;
              float64x2_t v63 = vcvtq_f64_f32(v59[-2]);
              v62.f64[1] = *v58;
              float64x2_t v64 = vmlaq_n_f64(vmulq_f64(v62, (float64x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL)), v63, v61);
              float64x2_t v65 = vcvtq_f64_f32(v59[-1]);
              float64x2_t v53 = vaddq_f64(v53, v64);
              float64x2_t v66 = vmlaq_n_f64(vmulq_f64(v62, (float64x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), v65, v61);
              float64x2_t v67 = vcvtq_f64_f32(*v59);
              float64x2_t v55 = vaddq_f64(v55, v66);
              float64x2_t v68 = vmlaq_n_f64(vmulq_f64(v62, (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL)), v67, v61);
              float64x2_t v69 = vcvtq_f64_f32(v59[1]);
              float64x2_t v56 = vaddq_f64(v56, v68);
              float64x2_t v57 = vaddq_f64(v57, vmlaq_n_f64(vmulq_f64(v62, (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL)), v69, v61));
              float64x2_t v59 = (float32x2_t *)((char *)v59 + v35);
              v58 += 2;
              --v60;
            }
            while (v60);
          }
          *(float64x2_t *)(a5 + 16 * v42) = v53;
          *(float64x2_t *)(a5 + (v54 | 0x10)) = v55;
          *(float64x2_t *)(a5 + (v54 | 0x20)) = v56;
          *(float64x2_t *)(a5 + (v54 | 0x30)) = v57;
          v42 += 4;
          v52 += 4;
        }
        while (v42 <= v175 - 4);
      }
      else
      {
        LODWORD(v42) = 0;
      }
      if ((int)v42 < (int)v175)
      {
        uint64_t v43 = v42;
        if ((int)v15 < 1)
        {
          if ((a9 & 0x10) == 0)
          {
            int v173 = v24;
            bzero((void *)(a5 + 16 * v42), 16 * (v175 + ~v42) + 16);
            double v34 = a3 + 2;
            uint64_t v32 = v169;
            char v31 = v170;
            uint64_t v29 = v171;
            uint64_t v27 = v15 & 0xFFFFFFFC;
            char v26 = v172;
            int v24 = v173;
            int v19 = v175;
            unint64_t v22 = a6 >> 4;
            int v23 = v178;
          }
        }
        else
        {
          char v44 = (float *)v36 + 1;
          BOOL v45 = &a3[v42];
          do
          {
            float64x2_t v46 = 0uLL;
            if ((a9 & 0x10) != 0) {
              float64x2_t v46 = *(float64x2_t *)(a5 + 16 * v43);
            }
            char v47 = v45;
            uint64_t v48 = v44;
            uint64_t v49 = v15;
            do
            {
              v50.f64[0] = -*v48;
              float64x2_t v51 = vcvtq_f64_f32(*v47);
              v50.f64[1] = *v48;
              float64x2_t v46 = vaddq_f64(v46, vmlaq_n_f64(vmulq_f64(v50, (float64x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), v51, *(v48 - 1)));
              v48 += 2;
              char v47 = (float32x2_t *)((char *)v47 + v35);
              --v49;
            }
            while (v49);
            *(float64x2_t *)(a5 + 16 * v43++) = v46;
            ++v45;
          }
          while (v43 != v175);
        }
      }
      ++v24;
      a1 = (void *)((char *)a1 + v29);
      a5 += 16 * v22;
      if (v24 == v23) {
        return v180;
      }
    }
  }
  if (v178 < 1) {
    return v180;
  }
  if (v17) {
    BOOL v70 = (int)v15 < 1;
  }
  else {
    BOOL v70 = 1;
  }
  uint64_t v71 = v70;
  if ((int)v175 < 1)
  {
    if ((v71 & 1) == 0)
    {
      if (v15 > 3)
      {
        if (v16 == 1)
        {
          unsigned int v152 = v15 - (v15 & 0xFFFFFFFC);
          if (v15 == (unint64_t)(v15 & 0xFFFFFFFC))
          {
            do
            {
              unint64_t v153 = 0;
              do
              {
                char v154 = &v17[v153 / 8];
                long long v155 = *(_OWORD *)&a1[v153 / 8 + 2];
                *char v154 = *(_OWORD *)&a1[v153 / 8];
                v154[1] = v155;
                v153 += 32;
              }
              while (((8 * v15) & 0x7FFFFFFE0) != v153);
              ++v152;
              a1 += v18;
            }
            while (v152 != v178);
          }
          else
          {
            int v160 = 0;
            unint64_t v161 = 32 * ((unint64_t)v15 >> 2);
            do
            {
              unint64_t v162 = 0;
              do
              {
                unint64_t v163 = &v17[v162 / 8];
                long long v164 = *(_OWORD *)&a1[v162 / 8 + 2];
                *unint64_t v163 = *(_OWORD *)&a1[v162 / 8];
                v163[1] = v164;
                v162 += 32;
              }
              while (v161 != v162);
              unint64_t v165 = 4 * ((unint64_t)v15 >> 2);
              uint64_t v166 = &v17[v161 / 8];
              unint64_t v167 = v15 - (unint64_t)(v15 & 0xFFFFFFFC);
              do
              {
                *v166++ = a1[v165++];
                --v167;
              }
              while (v167);
              ++v160;
              a1 += v18;
            }
            while (v160 != v178);
          }
        }
        else
        {
          for (int i = 0; i != v178; ++i)
          {
            double v157 = a1;
            BOOL v158 = v17;
            uint64_t v159 = v15;
            do
            {
              *v158++ = *v157;
              v157 += v16;
              --v159;
            }
            while (v159);
            a1 += v18;
          }
        }
      }
      else
      {
        do
        {
          float64x2x2_t v151 = a1;
          if (v15 != 1)
          {
            v17[1] = a1[v16];
            if (v15 != 2) {
              void v17[2] = a1[2 * v16];
            }
          }
          a1 += v18;
          --v23;
        }
        while (v23);
        *unint64_t v17 = *v151;
      }
    }
    return v180;
  }
  int v72 = 0;
  uint64_t v73 = (int)(v15 - 2);
  if (v73 <= 1) {
    unint64_t v74 = 1;
  }
  else {
    unint64_t v74 = (int)(v15 - 2);
  }
  uint64_t v75 = (v74 >> 1) + 1;
  uint64_t v176 = 8 * v18;
  unint64_t v177 = a6 >> 4;
  BOOL v77 = v15 < 4 || v16 != 1;
  BOOL v174 = v77;
  uint64_t v78 = 8 * v16;
  uint64_t v79 = 8 * v21;
  while (2)
  {
    if (v17) {
      uint64_t v80 = v17;
    }
    else {
      uint64_t v80 = a1;
    }
    if (v71) {
      goto LABEL_86;
    }
    if (v174)
    {
      uint64_t v81 = 0;
    }
    else
    {
      unint64_t v82 = 0;
      do
      {
        double v83 = &v17[v82 / 8];
        long long v84 = *(_OWORD *)&a1[v82 / 8 + 2];
        *double v83 = *(_OWORD *)&a1[v82 / 8];
        v83[1] = v84;
        v82 += 32;
      }
      while (((8 * v15) & 0x7FFFFFFE0) != v82);
      uint64_t v81 = v15 & 0xFFFFFFFC;
      uint64_t v80 = v17;
      if (v81 == v15) {
        goto LABEL_86;
      }
    }
    uint64_t v85 = v78 * v81;
    do
    {
      v17[v81++] = *(void *)((char *)a1 + v85);
      v85 += v78;
    }
    while (v15 != v81);
    uint64_t v80 = v17;
LABEL_86:
    uint64_t v86 = v71;
    uint64_t v87 = 0;
    unint64_t v88 = v80 + 1;
    uint64_t v89 = a3;
    do
    {
      double v91 = 0.0;
      double v92 = 0.0;
      double v93 = 0.0;
      if ((a9 & 0x10) != 0)
      {
        uint64_t v94 = (double *)(a5 + 16 * v87);
        double v92 = *v94;
        double v93 = v94[1];
      }
      if ((int)v15 < 2)
      {
        unsigned int v95 = 0;
        double v96 = 0.0;
        goto LABEL_100;
      }
      if (v74 < 6)
      {
        uint64_t v97 = 0;
        double v96 = 0.0;
LABEL_97:
        uint64_t v120 = v97;
        do
        {
          double v121 = *(float *)&v80[v120];
          double v122 = *((float *)&v88[v120 - 1] + 1);
          double v123 = v89[v120].f32[0];
          double v124 = v89[v120].f32[1];
          double v92 = v92 + v121 * v123 - v122 * v124;
          double v93 = v93 + v122 * v123 + v121 * v124;
          double v125 = *(float *)&v88[v120];
          double v126 = *((float *)&v88[v120] + 1);
          double v127 = v89[v120 + 1].f32[0];
          double v128 = v89[v120 + 1].f32[1];
          double v91 = v91 + v125 * v127 - v126 * v128;
          double v96 = v96 + v126 * v127 + v125 * v128;
          v97 += 2;
          v120 += 2;
        }
        while (v97 <= v73);
        unsigned int v95 = ((v15 - 2) & 0xFFFFFFFE) + 2;
        goto LABEL_100;
      }
      uint64_t v98 = 0;
      double v96 = 0.0;
      uint64_t v99 = v75 & 0x7FFFFFFC;
      do
      {
        BOOL v100 = (const float *)&v80[v98];
        float32x2x4_t v185 = vld4_f32(v100);
        v100 += 8;
        float32x2x4_t v186 = vld4_f32(v100);
        uint64_t v101 = (const float *)&v89[v98];
        float32x2x4_t v187 = vld4_f32(v101);
        v101 += 8;
        float64x2_t v102 = vcvtq_f64_f32(v185.val[0]);
        float64x2_t v103 = vcvtq_f64_f32(v186.val[0]);
        float32x2x4_t v188 = vld4_f32(v101);
        float64x2_t v104 = vcvtq_f64_f32(v185.val[1]);
        float64x2_t v105 = vcvtq_f64_f32(v186.val[1]);
        float64x2_t v106 = vcvtq_f64_f32(v187.val[0]);
        float64x2_t v107 = vcvtq_f64_f32(v188.val[0]);
        float64x2_t v108 = vcvtq_f64_f32(v187.val[1]);
        float64x2_t v109 = vcvtq_f64_f32(v188.val[1]);
        float64x2_t v110 = vmlaq_f64(vmulq_f64(vnegq_f64(v104), v108), v106, v102);
        float64x2_t v111 = vmlaq_f64(vmulq_f64(vnegq_f64(v105), v109), v107, v103);
        float64x2_t v112 = vmlaq_f64(vmulq_f64(v104, v106), v108, v102);
        float64x2_t v113 = vmlaq_f64(vmulq_f64(v105, v107), v109, v103);
        float64x2_t v114 = vcvtq_f64_f32(v185.val[2]);
        float64x2_t v115 = vcvtq_f64_f32(v186.val[2]);
        *(float64x2_t *)v185.val[0].f32 = vcvtq_f64_f32(v185.val[3]);
        *(float64x2_t *)v185.val[1].f32 = vcvtq_f64_f32(v186.val[3]);
        *(float64x2_t *)v185.val[2].f32 = vcvtq_f64_f32(v187.val[2]);
        *(float64x2_t *)v186.val[0].f32 = vcvtq_f64_f32(v188.val[2]);
        *(float64x2_t *)v186.val[1].f32 = vcvtq_f64_f32(v187.val[3]);
        *(float64x2_t *)v186.val[2].f32 = vcvtq_f64_f32(v188.val[3]);
        *(float64x2_t *)v186.val[3].f32 = vmlaq_f64(vmulq_f64(vnegq_f64(*(float64x2_t *)v185.val[0].f32), *(float64x2_t *)v186.val[1].f32), *(float64x2_t *)v185.val[2].f32, v114);
        *(float64x2_t *)v187.val[0].f32 = vmlaq_f64(vmulq_f64(vnegq_f64(*(float64x2_t *)v185.val[1].f32), *(float64x2_t *)v186.val[2].f32), *(float64x2_t *)v186.val[0].f32, v115);
        *(float64x2_t *)v185.val[0].f32 = vmlaq_f64(vmulq_f64(*(float64x2_t *)v185.val[0].f32, *(float64x2_t *)v185.val[2].f32), *(float64x2_t *)v186.val[1].f32, v114);
        *(float64x2_t *)v185.val[1].f32 = vmlaq_f64(vmulq_f64(*(float64x2_t *)v185.val[1].f32, *(float64x2_t *)v186.val[0].f32), *(float64x2_t *)v186.val[2].f32, v115);
        double v93 = v93 + v112.f64[0] + v112.f64[1] + v113.f64[0] + v113.f64[1];
        double v92 = v92 + v110.f64[0] + v110.f64[1] + v111.f64[0] + v111.f64[1];
        double v96 = v96 + *(double *)v185.val + v116 + *(double *)&v185.val[1] + v117;
        double v91 = v91 + *(double *)&v186.val[3] + v118 + *(double *)v187.val + v119;
        v98 += 8;
        v99 -= 4;
      }
      while (v99);
      uint64_t v97 = 2 * (v75 & 0x7FFFFFFC);
      unsigned int v95 = ((v15 - 2) & 0xFFFFFFFE) + 2;
      if (v75 != (v75 & 0x7FFFFFFC)) {
        goto LABEL_97;
      }
LABEL_100:
      if ((int)v95 >= (int)v15) {
        goto LABEL_87;
      }
      uint64_t v129 = v95;
      uint64_t v130 = v15 + ~v95;
      if (v130 < 3)
      {
        uint64_t v131 = v129;
LABEL_106:
        uint64_t v146 = v131;
        do
        {
          double v147 = *(float *)&v80[v146];
          double v148 = *((float *)&v80[v146] + 1);
          double v149 = v89[v146].f32[0];
          double v150 = v89[v146].f32[1];
          double v92 = v92 + v147 * v149 - v148 * v150;
          double v93 = v93 + v148 * v149 + v147 * v150;
          LODWORD(v131) = v131 + 1;
          ++v146;
        }
        while ((int)v15 > (int)v131);
        goto LABEL_87;
      }
      uint64_t v132 = v130 + 1;
      uint64_t v133 = (v130 + 1) & 0x1FFFFFFFCLL;
      uint64_t v131 = v133 + v129;
      uint64_t v134 = 8 * v129 + 16;
      uint64_t v135 = v133;
      do
      {
        uint64_t v136 = (const float *)((char *)v80 + v134);
        uint64_t v137 = (const float *)((char *)v80 + v134 - 16);
        float64x2_t v181 = (float64x2_t)vld2_f32(v137);
        float64x2_t v182 = (float64x2_t)vld2_f32(v136);
        float64x2_t v138 = vcvtq_f64_f32(*(float32x2_t *)&v181.f64[0]);
        float64x2_t v139 = vcvtq_f64_f32(*(float32x2_t *)&v182.f64[0]);
        float64x2_t v140 = (const float *)((char *)v89 + v134);
        float64x2_t v141 = (const float *)((char *)&v89[-2] + v134);
        float64x2_t v183 = (float64x2_t)vld2_f32(v141);
        float32x2x2_t v184 = vld2_f32(v140);
        float64x2_t v181 = vcvtq_f64_f32(*(float32x2_t *)&v181.f64[1]);
        *(float64x2_t *)((char *)&v181 + 8) = vcvtq_f64_f32(*(float32x2_t *)&v182.f64[1]);
        float64x2_t v182 = vcvtq_f64_f32(*(float32x2_t *)&v183.f64[0]);
        *(float64x2_t *)((char *)&v182 + 8) = vcvtq_f64_f32(v184.val[0]);
        float64x2_t v183 = vcvtq_f64_f32(*(float32x2_t *)&v183.f64[1]);
        *(float64x2_t *)((char *)&v183 + 8) = vcvtq_f64_f32(v184.val[1]);
        float32x2x2_t v184 = (float32x2x2_t)vmlaq_f64(vmulq_f64(vnegq_f64(v181), v183), v182, v138);
        *(float32x2x2_t *)((char *)&v184 + 8) = (float32x2x2_t)vmlaq_f64(vmulq_f64(vnegq_f64(*(float64x2_t *)((char *)&v181 + 8)), *(float64x2_t *)((char *)&v183 + 8)), *(float64x2_t *)((char *)&v182 + 8), v139);
        float64x2_t v181 = vmlaq_f64(vmulq_f64(v181, v182), v183, v138);
        *(float64x2_t *)((char *)&v181 + 8) = vmlaq_f64(vmulq_f64(*(float64x2_t *)((char *)&v181 + 8), *(float64x2_t *)((char *)&v182 + 8)), *(float64x2_t *)((char *)&v183 + 8), v139);
        double v93 = v93 + v181.f64[0] + v142 + v181.f64[1] + v143;
        double v92 = v92 + *(double *)v184.val + v144 + *(double *)&v184.val[1] + v145;
        v134 += 32;
        v135 -= 4;
      }
      while (v135);
      if (v132 != v133) {
        goto LABEL_106;
      }
LABEL_87:
      int v90 = (double *)(a5 + 16 * v87);
      *int v90 = v91 + v92;
      v90[1] = v96 + v93;
      ++v87;
      uint64_t v89 = (float32x2_t *)((char *)v89 + v79);
    }
    while (v87 != v20);
    ++v72;
    a1 = (void *)((char *)a1 + v176);
    a5 += 16 * v177;
    uint64_t v71 = v86;
    if (v72 != v178) {
      continue;
    }
    return v180;
  }
}

void sub_100284640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22 != a16)
  {
    if (a22) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

float32x2_t *sub_100284674(float32x2_t *result, unint64_t a2, float64x2_t *a3, unint64_t a4, float32x4_t *a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10 = a7[1];
  uint64_t v11 = a2 >> 3;
  if ((a8 & 4) != 0) {
    uint64_t v12 = a2 >> 3;
  }
  else {
    uint64_t v12 = 1;
  }
  if ((a8 & 4) != 0) {
    uint64_t v11 = 1;
  }
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (result) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v10)
  {
    uint64_t v15 = *a7;
    unint64_t v16 = (v15 - 4);
    uint64_t v17 = 8 * v14;
    uint64_t v18 = 4 * v13;
    int v19 = a5 + 1;
    uint64_t v20 = 8 * (a6 >> 3);
    unint64_t v21 = a3 + 2;
    uint64_t v22 = 16 * (a4 >> 4);
    uint64_t v23 = v13;
    do
    {
      if (result)
      {
        unint64_t v24 = 0;
        if ((int)v15 >= 4)
        {
          uint64_t v27 = v21;
          BOOL v28 = v19;
          uint64_t v29 = result;
          do
          {
            uint64_t v30 = v29;
            float32x2_t v31 = *v29;
            uint64_t v32 = &v29[v23];
            v28[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v27[-2], a9), vmulq_n_f64(vcvtq_f64_f32(v31), a10))), vaddq_f64(vmulq_n_f64(v27[-1], a9), vmulq_n_f64(vcvtq_f64_f32(*v32), a10)));
            uint64_t v33 = &v32[v23];
            float32x2_t v34 = *v33;
            uint64_t v35 = &v33[v23];
            float64x2_t v37 = *v27;
            float64x2_t v36 = v27[1];
            v27 += 4;
            v24 += 4;
            float32x4_t *v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(v37, a9), vmulq_n_f64(vcvtq_f64_f32(v34), a10))), vaddq_f64(vmulq_n_f64(v36, a9), vmulq_n_f64(vcvtq_f64_f32(*v35), a10)));
            v28 += 2;
            uint64_t v29 = &v35[v23];
          }
          while (v24 <= v16);
          BOOL v25 = &v30[v18];
          unint64_t v24 = v24;
          if ((int)v24 >= (int)v15) {
            goto LABEL_14;
          }
          do
          {
LABEL_26:
            *(float32x2_t *)&a5->f32[2 * v24] = vcvt_f32_f64(vaddq_f64(vmulq_n_f64(a3[v24], a9), vmulq_n_f64(vcvtq_f64_f32(*v25), a10)));
            ++v24;
            BOOL v25 = (float32x2_t *)((char *)v25 + v23 * 8);
          }
          while (v15 != v24);
          goto LABEL_14;
        }
        BOOL v25 = result;
        if ((int)v15 > 0) {
          goto LABEL_26;
        }
      }
      else
      {
        if ((int)v15 < 4)
        {
          uint64_t v26 = 0;
          if ((int)v15 <= 0) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v38 = 0;
          uint64_t v39 = 0;
          for (unint64_t i = 0; i <= v16; i += 4)
          {
            a5[v39] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(a3[v38], a9)), vmulq_n_f64(a3[v38 + 1], a9));
            v19[v39] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v21[v38], a9)), vmulq_n_f64(v21[v38 + 1], a9));
            v39 += 2;
            v38 += 4;
          }
          uint64_t v26 = i;
          if ((int)i >= (int)v15) {
            goto LABEL_14;
          }
        }
        uint64_t v41 = v15 - v26;
        if ((unint64_t)(v15 - v26) >= 4)
        {
          uint64_t v42 = (v41 & 0xFFFFFFFFFFFFFFFCLL) + v26;
          uint64_t v43 = 2 * v26;
          uint64_t v44 = v26;
          unint64_t v45 = v41 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            f64 = a3[v44].f64;
            float64x2x2_t v48 = vld2q_f64(f64);
            f64 += 4;
            float64x2x2_t v49 = vld2q_f64(f64);
            v50.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v48.val[0], a9)), vmulq_n_f64(v49.val[0], a9));
            v50.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v48.val[1], a9)), vmulq_n_f64(v49.val[1], a9));
            char v47 = &a5->f32[v43];
            vst2q_f32(v47, v50);
            v43 += 8;
            v44 += 4;
            v45 -= 4;
          }
          while (v45);
          if (v41 == (v41 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v42 = v26;
        }
        do
        {
          *(float32x2_t *)&a5->f32[2 * v42] = vcvt_f32_f64(vmulq_n_f64(a3[v42], a9));
          ++v42;
        }
        while (v15 != v42);
      }
LABEL_14:
      uint64_t result = (float32x2_t *)((char *)result + v17);
      int v19 = (float32x4_t *)((char *)v19 + v20);
      unint64_t v21 = (float64x2_t *)((char *)v21 + v22);
      a5 = (float32x4_t *)((char *)a5 + v20);
      a3 = (float64x2_t *)((char *)a3 + v22);
      --v10;
    }
    while (v10);
  }
  return result;
}

unsigned char *sub_1002848FC(_OWORD *a1, unint64_t a2, _OWORD *a3, unint64_t a4, float64x2_t *a5, unint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, int *a11, unsigned int *a12, char a13)
{
  uint64_t v19 = a11[1];
  int v257 = *a11;
  uint64_t v20 = *a12;
  uint64_t v262 = (int)a12[1];
  uint64_t v251 = a12[1];
  uint64_t v255 = v267;
  unsigned int v256 = *a12;
  bzero(v267, 0x480uLL);
  unint64_t v21 = a2;
  uint64_t v22 = a5;
  unint64_t v265 = v267;
  uint64_t v266 = 72;
  uint64_t v23 = a2 >> 4;
  unint64_t v24 = a4 >> 4;
  uint64_t v25 = a6 >> 4;
  unint64_t v26 = a8 >> 4;
  if ((a13 & 4) != 0) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = 1;
  }
  if ((a13 & 4) != 0) {
    uint64_t v25 = 1;
  }
  BOOL v28 = a5 == 0;
  if (a5) {
    uint64_t v29 = v27;
  }
  else {
    uint64_t v29 = 0;
  }
  if (v28) {
    uint64_t v25 = 0;
  }
  uint64_t v260 = v25;
  if ((a13 & 1) == 0)
  {
    uint64_t v30 = 1;
    uint64_t v31 = a2 >> 4;
    uint64_t v32 = a1;
    double v33 = a9;
    int v34 = v257;
    if (v257 == 1) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
  uint64_t v31 = 1;
  if (a2 < 0x20)
  {
    uint64_t v30 = a2 >> 4;
    int v34 = v19;
    uint64_t v32 = a1;
    double v33 = a9;
    if (v19 != 1) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v32 = a1;
    double v33 = a9;
    if ((int)v19 >= 2)
    {
      uint64_t v266 = v19;
      if (v19 >= 0x49) {
        operator new[]();
      }
      uint64_t v31 = 1;
      double v44 = a10;
      int v45 = v251;
      if ((a13 & 2) == 0) {
        goto LABEL_30;
      }
LABEL_118:
      if (v45 < 1) {
        goto LABEL_177;
      }
      if (v255) {
        BOOL v163 = (int)v19 < 1;
      }
      else {
        BOOL v163 = 1;
      }
      char v164 = v163;
      if ((int)v20 < 1)
      {
        if ((v164 & 1) == 0)
        {
          int v240 = 0;
          uint64_t v241 = 16 * v31;
          do
          {
            long long v242 = v32;
            uint64_t v243 = v255;
            uint64_t v244 = v19;
            do
            {
              *v243++ = *v242;
              v242 += v23;
              --v244;
            }
            while (v244);
            ++v240;
            uint64_t v32 = (_OWORD *)((char *)v32 + v241);
          }
          while (v240 != v45);
        }
        goto LABEL_177;
      }
      int v165 = 0;
      uint64_t v166 = 16 * v31;
      uint64_t v167 = 16 * v23;
      uint64_t v168 = 16 * v24;
LABEL_128:
      if (v255) {
        uint64_t v169 = v255;
      }
      else {
        uint64_t v169 = v32;
      }
      if ((v164 & 1) == 0)
      {
        uint64_t v170 = 0;
        uint64_t v171 = v32;
        do
        {
          *(_OWORD *)&v255[v170] = *v171;
          v170 += 16;
          uint64_t v171 = (_OWORD *)((char *)v171 + v167);
        }
        while (16 * v19 != v170);
        uint64_t v169 = v255;
      }
      uint64_t v172 = 0;
      int v173 = v169 + 56;
      BOOL v174 = a3;
      uint64_t v175 = v22;
      while (1)
      {
        if ((int)v19 >= 4)
        {
          unint64_t v181 = 0;
          uint64_t v182 = 0;
          float64x2_t v177 = 0uLL;
          float64x2_t v178 = 0uLL;
          float64x2_t v179 = 0uLL;
          float64x2_t v180 = 0uLL;
          do
          {
            v183.f64[0] = *(float64_t *)&v173[v181 - 48];
            v184.f64[0] = *(float64_t *)&v173[v181 - 32];
            v185.f64[0] = *(float64_t *)&v173[v181 - 16];
            v186.f64[0] = *(float64_t *)&v173[v181];
            v183.f64[1] = -v183.f64[0];
            float64x2_t v187 = (float64x2_t)v174[v181 / 0x10];
            float64x2_t v188 = (float64x2_t)v174[v181 / 0x10 + 1];
            int8x16_t v189 = (int8x16_t)vmulq_f64(v187, v183);
            v184.f64[1] = -v184.f64[0];
            int8x16_t v190 = (int8x16_t)vmulq_f64(v188, v184);
            float64x2_t v180 = vaddq_f64(v180, vmlaq_n_f64((float64x2_t)vextq_s8(v189, v189, 8uLL), v187, *(double *)&v169[v181]));
            v185.f64[1] = -v185.f64[0];
            float64x2_t v191 = (float64x2_t)v174[v181 / 0x10 + 2];
            float64x2_t v192 = (float64x2_t)v174[v181 / 0x10 + 3];
            int8x16_t v193 = (int8x16_t)vmulq_f64(v191, v185);
            float64x2_t v179 = vaddq_f64(v179, vmlaq_n_f64((float64x2_t)vextq_s8(v190, v190, 8uLL), v188, *(double *)&v173[v181 - 40]));
            float64x2_t v194 = vmlaq_n_f64((float64x2_t)vextq_s8(v193, v193, 8uLL), v191, *(double *)&v173[v181 - 24]);
            v186.f64[1] = -v186.f64[0];
            int8x16_t v195 = (int8x16_t)vmulq_f64(v192, v186);
            float64x2_t v178 = vaddq_f64(v178, v194);
            float64x2_t v177 = vaddq_f64(v177, vmlaq_n_f64((float64x2_t)vextq_s8(v195, v195, 8uLL), v192, *(double *)&v173[v181 - 8]));
            v182 += 4;
            v181 += 64;
          }
          while (v182 <= (int)v19 - 4);
          int v176 = ((v19 - 4) & 0xFFFFFFFC) + 4;
          if (v176 >= (int)v19) {
            goto LABEL_150;
          }
        }
        else
        {
          int v176 = 0;
          float64x2_t v177 = 0uLL;
          float64x2_t v178 = 0uLL;
          float64x2_t v179 = 0uLL;
          float64x2_t v180 = 0uLL;
          if ((int)v19 <= 0) {
            goto LABEL_150;
          }
        }
        uint64_t v196 = v176;
        uint64_t v197 = (v19 + ~v176);
        if (v197 >= 3)
        {
          uint64_t v199 = v197 + 1;
          uint64_t v200 = (v197 + 1) & 0x1FFFFFFFCLL;
          uint64_t v198 = v200 + v196;
          double v201 = v180.f64[1];
          uint64_t v202 = 16 * v196 + 32;
          uint64_t v203 = v200;
          do
          {
            double v204 = (const double *)&v169[v202];
            double v205 = (const double *)&v169[v202 - 32];
            float64x2x2_t v270 = vld2q_f64(v205);
            float64x2x2_t v272 = vld2q_f64(v204);
            double v206 = (const double *)((char *)v174 + v202);
            uint64_t v207 = (const double *)((char *)v174 + v202 - 32);
            float64x2x2_t v273 = vld2q_f64(v207);
            float64x2x2_t v274 = vld2q_f64(v206);
            float64x2_t v208 = vmlaq_f64(vmulq_f64(v273.val[1], vnegq_f64(v270.val[1])), v273.val[0], v270.val[0]);
            float64x2_t v209 = vmlaq_f64(vmulq_f64(v274.val[1], vnegq_f64(v272.val[1])), v274.val[0], v272.val[0]);
            float64x2_t v210 = vmlaq_f64(vmulq_f64(v270.val[1], v273.val[0]), v273.val[1], v270.val[0]);
            float64x2_t v211 = vmlaq_f64(vmulq_f64(v272.val[1], v274.val[0]), v274.val[1], v272.val[0]);
            double v201 = v201 + v210.f64[0] + v210.f64[1] + v211.f64[0] + v211.f64[1];
            v180.f64[0] = v180.f64[0] + v208.f64[0] + v208.f64[1] + v209.f64[0] + v209.f64[1];
            v202 += 64;
            v203 -= 4;
          }
          while (v203);
          v180.f64[1] = v201;
          if (v199 == v200) {
            goto LABEL_150;
          }
        }
        else
        {
          uint64_t v198 = v196;
        }
        uint64_t v212 = v198;
        do
        {
          v213.f64[0] = *(float64_t *)&v169[v212 * 16 + 8];
          float64x2_t v214 = (float64x2_t)v174[v212];
          v213.f64[1] = -v213.f64[0];
          int8x16_t v215 = (int8x16_t)vmulq_f64(v214, v213);
          float64x2_t v180 = vaddq_f64(v180, vmlaq_n_f64((float64x2_t)vextq_s8(v215, v215, 8uLL), v214, *(double *)&v169[v212 * 16]));
          LODWORD(v198) = v198 + 1;
          ++v212;
        }
        while ((int)v19 > (int)v198);
LABEL_150:
        float64x2_t v216 = vmulq_n_f64(vaddq_f64(v177, vaddq_f64(v178, vaddq_f64(v179, v180))), v33);
        if (v175) {
          float64x2_t v216 = vaddq_f64(v216, vmulq_n_f64(*v175, v44));
        }
        *(float64x2_t *)(a7 + 16 * v172++) = v216;
        v175 += v29;
        BOOL v174 = (_OWORD *)((char *)v174 + v168);
        if (v172 == v20)
        {
          ++v165;
          uint64_t v32 = (_OWORD *)((char *)v32 + v166);
          v22 += v260;
          a7 += 16 * v26;
          if (v165 == v262) {
            goto LABEL_177;
          }
          goto LABEL_128;
        }
      }
    }
    uint64_t v30 = v23;
    int v34 = v19;
    if (v19 != 1)
    {
LABEL_29:
      uint64_t v255 = 0;
      LODWORD(v19) = v34;
      uint64_t v23 = v30;
      double v44 = a10;
      int v45 = v251;
      if ((a13 & 2) == 0)
      {
LABEL_30:
        if ((unint64_t)(16 * (int)v20) <= 0x640)
        {
          if (v45 < 1) {
            goto LABEL_177;
          }
          int v46 = 0;
          if (v255) {
            BOOL v47 = (int)v19 < 1;
          }
          else {
            BOOL v47 = 1;
          }
          char v48 = v47;
          uint64_t v49 = 16 * v23;
          uint64_t v50 = 16 * v24;
LABEL_40:
          if (v255) {
            float64x2_t v51 = v255;
          }
          else {
            float64x2_t v51 = v32;
          }
          if ((v48 & 1) == 0)
          {
            uint64_t v52 = 0;
            float64x2_t v53 = v32;
            do
            {
              *(_OWORD *)&v255[v52] = *v53;
              v52 += 16;
              float64x2_t v53 = (_OWORD *)((char *)v53 + v49);
            }
            while (16 * v19 != v52);
            float64x2_t v51 = v255;
          }
          if ((int)v20 < 4)
          {
            uint64_t v54 = 0;
            float64x2_t v55 = v22;
            if ((int)v20 > 0) {
              goto LABEL_61;
            }
            goto LABEL_39;
          }
          uint64_t v54 = 0;
          float64x2_t v56 = (float64x2_t *)(a3 + 2);
          float64x2_t v55 = v22;
          while (1)
          {
            float64x2_t v60 = 0uLL;
            if ((int)v19 < 1)
            {
              float64x2_t v65 = 0uLL;
              float64x2_t v66 = 0uLL;
              float64x2_t v76 = vmulq_n_f64((float64x2_t)0, v33);
              uint64_t v77 = 16 * v54;
              if (v55) {
                goto LABEL_59;
              }
            }
            else
            {
              double v61 = (float64_t *)(v51 + 8);
              float64x2_t v62 = v56;
              uint64_t v63 = v19;
              float64x2_t v64 = 0uLL;
              float64x2_t v65 = 0uLL;
              float64x2_t v66 = 0uLL;
              do
              {
                v67.f64[0] = *v61;
                v67.f64[1] = -*v61;
                double v68 = *(v61 - 1);
                float64x2_t v69 = v62[-2];
                float64x2_t v70 = v62[-1];
                int8x16_t v71 = (int8x16_t)vmulq_f64(v69, v67);
                float64x2_t v64 = vaddq_f64(v64, vmlaq_n_f64((float64x2_t)vextq_s8(v71, v71, 8uLL), v69, v68));
                int8x16_t v72 = (int8x16_t)vmulq_f64(v70, v67);
                float64x2_t v65 = vaddq_f64(v65, vmlaq_n_f64((float64x2_t)vextq_s8(v72, v72, 8uLL), v70, v68));
                float64x2_t v73 = v62[1];
                int8x16_t v74 = (int8x16_t)vmulq_f64(*v62, v67);
                float64x2_t v66 = vaddq_f64(v66, vmlaq_n_f64((float64x2_t)vextq_s8(v74, v74, 8uLL), *v62, v68));
                int8x16_t v75 = (int8x16_t)vmulq_f64(v73, v67);
                float64x2_t v60 = vaddq_f64(v60, vmlaq_n_f64((float64x2_t)vextq_s8(v75, v75, 8uLL), v73, v68));
                float64x2_t v62 = (float64x2_t *)((char *)v62 + v50);
                v61 += 2;
                --v63;
              }
              while (v63);
              float64x2_t v76 = vmulq_n_f64(v64, v33);
              uint64_t v77 = 16 * v54;
              if (v55)
              {
LABEL_59:
                *(float64x2_t *)(a7 + v77) = vaddq_f64(v76, vmulq_n_f64(*v55, v44));
                *(float64x2_t *)(a7 + (v77 | 0x10)) = vaddq_f64(vmulq_n_f64(v65, v33), vmulq_n_f64(v55[v29], v44));
                *(float64x2_t *)(a7 + (v77 | 0x20)) = vaddq_f64(vmulq_n_f64(v66, v33), vmulq_n_f64(v55[2 * v29], v44));
                float64x2_t v59 = vaddq_f64(vmulq_n_f64(v60, v33), vmulq_n_f64(v55[3 * v29], v44));
                goto LABEL_52;
              }
            }
            *(float64x2_t *)(a7 + v77) = v76;
            float64x2_t v57 = (double *)(a7 + (v77 | 0x10));
            *float64x2_t v57 = v33 * v65.f64[0];
            v57[1] = vmuld_lane_f64(v33, v65, 1);
            unint64_t v58 = (double *)(a7 + (v77 | 0x20));
            *unint64_t v58 = v33 * v66.f64[0];
            v58[1] = vmuld_lane_f64(v33, v66, 1);
            float64x2_t v59 = vmulq_n_f64(v60, v33);
LABEL_52:
            *(float64x2_t *)(a7 + (v77 | 0x30)) = v59;
            v54 += 4;
            v55 += 4 * v29;
            v56 += 4;
            if (v54 > (int)v20 - 4)
            {
              uint64_t v54 = v54;
              if ((int)v54 < (int)v20)
              {
LABEL_61:
                uint64_t v78 = (float64_t *)(v51 + 8);
                uint64_t v79 = (float64x2_t *)&a3[v54];
                do
                {
                  float64x2_t v80 = 0uLL;
                  if ((int)v19 >= 1)
                  {
                    uint64_t v81 = v79;
                    unint64_t v82 = v78;
                    uint64_t v83 = v19;
                    do
                    {
                      v84.f64[0] = *v82;
                      v84.f64[1] = -*v82;
                      int8x16_t v85 = (int8x16_t)vmulq_f64(*v81, v84);
                      float64x2_t v80 = vaddq_f64(v80, vmlaq_n_f64((float64x2_t)vextq_s8(v85, v85, 8uLL), *v81, *(v82 - 1)));
                      v82 += 2;
                      uint64_t v81 = (float64x2_t *)((char *)v81 + v50);
                      --v83;
                    }
                    while (v83);
                  }
                  float64x2_t v86 = vmulq_n_f64(v80, v33);
                  if (v55) {
                    float64x2_t v86 = vaddq_f64(v86, vmulq_n_f64(*v55, v44));
                  }
                  *(float64x2_t *)(a7 + 16 * v54++) = v86;
                  v55 += v29;
                  ++v79;
                }
                while (v54 != v20);
              }
LABEL_39:
              ++v46;
              v32 += v31;
              v22 += v260;
              a7 += 16 * v26;
              if (v46 == v262) {
                goto LABEL_177;
              }
              goto LABEL_40;
            }
          }
        }
        uint64_t v87 = v23;
        unint64_t v247 = a4 >> 4;
        uint64_t v248 = v31;
        bzero(v264, 0x480uLL);
        unint64_t v88 = v255;
        int v89 = v256;
        if (v256 >= 0x49) {
          operator new[]();
        }
        int v90 = a1;
        double v91 = v22;
        double v92 = a10;
        double v93 = a9;
        int v94 = v251;
        if ((int)v262 < 1) {
          goto LABEL_177;
        }
        int v95 = 0;
        size_t v96 = 16 * v20;
        uint64_t v97 = 16 * v19;
        uint64_t v98 = 16 * v87;
        if (v255) {
          BOOL v99 = (int)v19 < 1;
        }
        else {
          BOOL v99 = 1;
        }
        uint64_t v249 = 16 * v248;
        char v100 = v99;
        char v246 = v100;
        uint64_t v261 = v260;
        uint64_t v101 = 16 * v29;
        uint64_t v102 = v96 & 0xFFFFFFFC0;
        uint64_t v245 = v96 & 0xFFFFFFFC0;
        while (1)
        {
          if (!v88) {
            unint64_t v88 = v90;
          }
          float64x2_t v258 = v91;
          if ((v246 & 1) == 0)
          {
            uint64_t v103 = 0;
            float64x2_t v104 = v90;
            unint64_t v88 = v255;
            do
            {
              *(_OWORD *)&v255[v103] = *v104;
              v103 += 16;
              float64x2_t v104 = (_OWORD *)((char *)v104 + v98);
            }
            while (v97 != v103);
          }
          if (v89 >= 1)
          {
            unint64_t v254 = v90;
            int v263 = v95;
            bzero(v264, v96);
            uint64_t v102 = v245;
            uint64_t v101 = 16 * v29;
            uint64_t v98 = 16 * v87;
            uint64_t v97 = 16 * v19;
            size_t v96 = 16 * v20;
            int v95 = v263;
            int v94 = v251;
            int v89 = v20;
            double v93 = a9;
            double v92 = a10;
            int v90 = v254;
          }
          if ((int)v19 >= 1)
          {
            uint64_t v105 = 0;
            float64x2_t v106 = a3;
            do
            {
              float64x2_t v107 = (double *)&v88[16 * v105];
              uint64_t v108 = *(uint64_t *)v107;
              uint64_t v109 = *((uint64_t *)v107 + 1);
              if ((int)v20 >= 4)
              {
                uint64_t v111 = 0;
                uint64_t v112 = 0;
                do
                {
                  float64x2_t v113 = (double *)&v264[v111 * 16 + 56];
                  double v114 = *(double *)&v106[v111];
                  double v115 = *((double *)&v106[v111] + 1);
                  double v116 = v114 * *(double *)&v108 - v115 * *(double *)&v109;
                  double v117 = *(double *)&v108 * v115 + v114 * *(double *)&v109;
                  double v118 = *(double *)&v264[v111 * 16] + v116;
                  double v119 = *(double *)&v264[v111 * 16 + 8] + v117;
                  double v120 = *(double *)&v106[v111 + 1];
                  double v121 = *((double *)&v106[v111 + 1] + 1);
                  double v122 = v120 * *(double *)&v108 - v121 * *(double *)&v109;
                  double v123 = *(double *)&v108 * v121 + v120 * *(double *)&v109;
                  double v124 = *(double *)&v264[v111 * 16 + 16] + v122;
                  double v125 = *(double *)&v264[v111 * 16 + 24] + v123;
                  *(v113 - 7) = v118;
                  *(v113 - 6) = v119;
                  *(v113 - 5) = v124;
                  *(v113 - 4) = v125;
                  double v126 = *(double *)&v106[v111 + 2];
                  double v127 = *((double *)&v106[v111 + 2] + 1);
                  double v128 = v126 * *(double *)&v108 - v127 * *(double *)&v109;
                  double v129 = *(double *)&v108 * v127 + v126 * *(double *)&v109;
                  double v130 = *(double *)&v264[v111 * 16 + 32] + v128;
                  double v131 = *(double *)&v264[v111 * 16 + 40] + v129;
                  double v132 = *(double *)&v106[v111 + 3];
                  double v133 = *((double *)&v106[v111 + 3] + 1);
                  double v134 = v132 * *(double *)&v108 - v133 * *(double *)&v109;
                  double v135 = *(double *)&v108 * v133 + v132 * *(double *)&v109;
                  double v136 = *(double *)&v264[v111 * 16 + 48] + v134;
                  double v137 = *(double *)&v264[v111 * 16 + 56] + v135;
                  *(v113 - 3) = v130;
                  *(v113 - 2) = v131;
                  *(v113 - 1) = v136;
                  *float64x2_t v113 = v137;
                  v112 += 4;
                  v111 += 4;
                }
                while (v112 <= (int)v20 - 4);
                uint64_t v110 = v112;
                if ((int)v112 >= v89) {
                  goto LABEL_88;
                }
              }
              else
              {
                uint64_t v110 = 0;
                if (v89 <= 0) {
                  goto LABEL_88;
                }
              }
              uint64_t v138 = v20 - v110;
              if ((unint64_t)(v20 - v110) >= 2)
              {
                uint64_t v139 = (v138 & 0xFFFFFFFFFFFFFFFELL) + v110;
                float64x2_t v140 = (float64x2_t)vdupq_lane_s64(v109, 0);
                float64x2_t v141 = (float64x2_t)vdupq_lane_s64(v108, 0);
                uint64_t v142 = v110;
                unint64_t v143 = v138 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  double v144 = (const double *)&v106[v142];
                  float64x2x2_t v268 = vld2q_f64(v144);
                  float64x2_t v145 = vmlaq_f64(vmulq_n_f64(vnegq_f64(v268.val[1]), *(double *)&v109), v141, v268.val[0]);
                  float64x2_t v146 = vmlaq_f64(vmulq_n_f64(v268.val[1], *(double *)&v108), v140, v268.val[0]);
                  double v147 = (double *)&v264[v142 * 16];
                  float64x2x2_t v269 = vld2q_f64(v147);
                  v271.val[0] = vaddq_f64(v269.val[0], v145);
                  v271.val[1] = vaddq_f64(v146, v269.val[1]);
                  vst2q_f64(v147, v271);
                  v142 += 2;
                  v143 -= 2;
                }
                while (v143);
                if (v138 == (v138 & 0xFFFFFFFFFFFFFFFELL)) {
                  goto LABEL_88;
                }
              }
              else
              {
                uint64_t v139 = v110;
              }
              uint64_t v148 = v20 - v139;
              uint64_t v149 = v139;
              do
              {
                double v150 = *(double *)&v106[v149];
                double v151 = *((double *)&v106[v149] + 1);
                double v152 = v150 * *(double *)&v108 - v151 * *(double *)&v109;
                unint64_t v153 = (double *)&v264[v149 * 16];
                double v154 = *(double *)&v108 * v151 + v150 * *(double *)&v109 + *(double *)&v264[v149 * 16 + 8];
                *unint64_t v153 = *(double *)&v264[v149 * 16] + v152;
                v153[1] = v154;
                ++v149;
                --v148;
              }
              while (v148);
LABEL_88:
              ++v105;
              v106 += v247;
            }
            while (v105 != v19);
          }
          if (v258)
          {
            unint64_t v88 = v255;
            if (v89 >= 1)
            {
              uint64_t v155 = 0;
              uint64_t v156 = v258;
              do
              {
                *(float64x2_t *)(a7 + v155) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)&v264[v155], v93), vmulq_n_f64(*v156, v92));
                v155 += 16;
                uint64_t v156 = (float64x2_t *)((char *)v156 + v101);
              }
              while (v96 != v155);
            }
            goto LABEL_78;
          }
          unint64_t v88 = v255;
          if ((int)v20 >= 1)
          {
            if (v89 >= 4)
            {
              uint64_t v158 = 0;
              do
              {
                float64x2_t v160 = *(float64x2_t *)&v264[v158 + 32];
                float64x2_t v159 = *(float64x2_t *)&v264[v158 + 48];
                unint64_t v161 = (float64x2_t *)(a7 + v158);
                float64x2_t v162 = vmulq_n_f64(*(float64x2_t *)&v264[v158 + 16], v93);
                *unint64_t v161 = vmulq_n_f64(*(float64x2_t *)&v264[v158], v93);
                v161[1] = v162;
                v161[2] = vmulq_n_f64(v160, v93);
                v161[3] = vmulq_n_f64(v159, v93);
                v158 += 64;
              }
              while (v102 != v158);
              uint64_t v157 = v20 & 0xFFFFFFFC;
              if (v157 == v20) {
                goto LABEL_78;
              }
            }
            else
            {
              uint64_t v157 = 0;
            }
            do
            {
              *(float64x2_t *)(a7 + 16 * v157) = vmulq_n_f64(*(float64x2_t *)&v264[16 * v157], v93);
              ++v157;
            }
            while (v20 != v157);
          }
LABEL_78:
          ++v95;
          int v90 = (_OWORD *)((char *)v90 + v249);
          double v91 = &v258[v261];
          a7 += 16 * v26;
          if (v95 == v94) {
            goto LABEL_177;
          }
        }
      }
      goto LABEL_118;
    }
  }
LABEL_13:
  uint64_t v35 = v23;
  unint64_t v36 = v21;
  bzero(v264, 0x480uLL);
  if (v36 < 0x20)
  {
    float64x2_t v37 = a1;
    unint64_t v39 = (int)v20;
    uint64_t v41 = v22;
    double v42 = a10;
    double v38 = a9;
    uint64_t v40 = v251;
    if (a4 < 0x20) {
      goto LABEL_161;
    }
    goto LABEL_155;
  }
  float64x2_t v37 = a1;
  double v38 = a9;
  unint64_t v39 = (int)v20;
  uint64_t v40 = v251;
  if ((int)v19 < 2)
  {
    uint64_t v41 = v22;
    double v42 = a10;
    if (a4 < 0x20) {
      goto LABEL_161;
    }
    goto LABEL_155;
  }
  uint64_t v266 = v262;
  if (v251 >= 0x49) {
    operator new[]();
  }
  uint64_t v41 = v22;
  double v42 = a10;
  if ((int)v251 >= 1)
  {
    uint64_t v43 = 0;
    do
    {
      *(_OWORD *)&v267[v43] = *v37;
      v43 += 16;
      v37 += v35;
    }
    while (16 * v251 != v43);
  }
  float64x2_t v37 = v267;
  if (a4 >= 0x20)
  {
LABEL_155:
    if (v39 > 0x48) {
      operator new[]();
    }
    if ((int)v39 >= 1)
    {
      uint64_t v217 = v264;
      unint64_t v218 = v39;
      do
      {
        *v217++ = *a3;
        a3 += a4 >> 4;
        --v218;
      }
      while (v218);
    }
    a3 = v264;
  }
LABEL_161:
  if ((int)v40 >= 1)
  {
    for (uint64_t i = 0; i != v40; ++i)
    {
      int v220 = (double *)&v37[i];
      double v221 = *v220 * v38;
      v222.f64[0] = v220[1] * v38;
      if ((int)v39 >= 2)
      {
        uint64_t v225 = 0;
        int64_t v223 = 0;
        float64x2_t v226 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v221, 0);
        v227.f64[0] = v220[1] * v38;
        v227.f64[1] = -v222.f64[0];
        int64_t v224 = v41;
        do
        {
          float64x2_t v229 = (float64x2_t)a3[v225];
          float64x2_t v230 = (float64x2_t)a3[v225 + 1];
          int8x16_t v231 = (int8x16_t)vmulq_f64(v229, v227);
          float64x2_t v232 = vmlaq_f64((float64x2_t)vextq_s8(v231, v231, 8uLL), v229, v226);
          int8x16_t v233 = (int8x16_t)vmulq_f64(v230, v227);
          float64x2_t v228 = vmlaq_f64((float64x2_t)vextq_s8(v233, v233, 8uLL), v230, v226);
          if (v224)
          {
            *(float64x2_t *)(a7 + v225 * 16) = vaddq_f64(v232, vmulq_n_f64(*v224, v42));
            float64x2_t v228 = vaddq_f64(v228, vmulq_n_f64(v224[v29], v42));
          }
          else
          {
            *(float64x2_t *)(a7 + v225 * 16) = v232;
          }
          *(float64x2_t *)(a7 + v225 * 16 + 16) = v228;
          v223 += 2;
          v225 += 2;
          v224 += 2 * v29;
        }
        while (v223 <= (uint64_t)(v39 - 2));
        int64_t v223 = v223;
        if ((int)v223 < (int)v20)
        {
LABEL_173:
          float64x2_t v234 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v221, 0);
          do
          {
            float64x2_t v235 = (float64x2_t)a3[v223];
            v222.f64[1] = -v222.f64[0];
            int8x16_t v236 = (int8x16_t)vmulq_f64(v235, v222);
            float64x2_t v237 = vmlaq_f64((float64x2_t)vextq_s8(v236, v236, 8uLL), v235, v234);
            if (v224) {
              float64x2_t v237 = vaddq_f64(v237, vmulq_n_f64(*v224, v42));
            }
            *(float64x2_t *)(a7 + 16 * v223++) = v237;
            v224 += v29;
          }
          while (v20 != v223);
        }
      }
      else
      {
        int64_t v223 = 0;
        int64_t v224 = v41;
        if ((int)v20 > 0) {
          goto LABEL_173;
        }
      }
      v41 += v260;
      a7 += 16 * v26;
    }
  }
LABEL_177:
  uint64_t result = v265;
  if (v265 != v267 && v265 != 0) {
    operator delete[]();
  }
  return result;
}

void sub_10028589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (STACK[0x558] != a12)
  {
    if (STACK[0x558]) {
      operator delete[]();
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_100285904(_OWORD *a1, unint64_t a2, float64x2_t *a3, unint64_t a4, uint64_t a5, unint64_t a6, int *a7, int *a8, char a9)
{
  int v14 = *a7;
  int v13 = a7[1];
  uint64_t v133 = *a8;
  int v135 = a8[1];
  bzero(v137, 0x480uLL);
  uint64_t v15 = a2 >> 4;
  if (a9)
  {
    if (v13 >= 0x49) {
      operator new[]();
    }
    uint64_t v17 = 1;
    unint64_t v16 = v137;
  }
  else
  {
    unint64_t v16 = 0;
    int v13 = v14;
    uint64_t v17 = v15;
    uint64_t v15 = 1;
  }
  uint64_t v18 = a1;
  int v19 = v135;
  int v20 = v133;
  uint64_t v21 = v133;
  unint64_t v22 = a4 >> 4;
  unint64_t v23 = a6 >> 4;
  if ((a9 & 2) == 0)
  {
    if (v135 >= 1)
    {
      int v24 = 0;
      uint64_t v25 = 16 * v17;
      if (v16) {
        BOOL v26 = v13 < 1;
      }
      else {
        BOOL v26 = 1;
      }
      char v27 = v26;
      uint64_t v28 = 16 * v15;
      uint64_t v29 = a3 + 2;
      uint64_t v30 = 16 * v22;
      uint64_t v130 = v25;
      char v129 = v27;
      do
      {
        if (v16) {
          uint64_t v31 = v16;
        }
        else {
          uint64_t v31 = v18;
        }
        if ((v27 & 1) == 0)
        {
          uint64_t v32 = 0;
          double v33 = v18;
          do
          {
            *(_OWORD *)&v16[v32] = *v33;
            v32 += 16;
            double v33 = (_OWORD *)((char *)v33 + v28);
          }
          while (16 * v13 != v32);
          uint64_t v31 = v16;
        }
        if (v20 >= 4)
        {
          uint64_t v34 = 0;
          double v44 = v29;
          do
          {
            float64x2_t v45 = 0uLL;
            uint64_t v46 = 16 * v34;
            float64x2_t v47 = 0uLL;
            float64x2_t v48 = 0uLL;
            float64x2_t v49 = 0uLL;
            if ((a9 & 0x10) != 0)
            {
              float64x2_t v45 = *(float64x2_t *)(a5 + 16 * v34);
              float64x2_t v47 = *(float64x2_t *)(a5 + (v46 | 0x10));
              float64x2_t v48 = *(float64x2_t *)(a5 + (v46 | 0x20));
              float64x2_t v49 = *(float64x2_t *)(a5 + (v46 | 0x30));
            }
            if (v13 >= 1)
            {
              uint64_t v50 = (float64_t *)(v31 + 8);
              float64x2_t v51 = v44;
              uint64_t v52 = v13;
              do
              {
                v53.f64[0] = *v50;
                v53.f64[1] = -*v50;
                double v54 = *(v50 - 1);
                float64x2_t v55 = v51[-2];
                float64x2_t v56 = v51[-1];
                int8x16_t v57 = (int8x16_t)vmulq_f64(v55, v53);
                float64x2_t v45 = vaddq_f64(v45, vmlaq_n_f64((float64x2_t)vextq_s8(v57, v57, 8uLL), v55, v54));
                int8x16_t v58 = (int8x16_t)vmulq_f64(v56, v53);
                float64x2_t v47 = vaddq_f64(v47, vmlaq_n_f64((float64x2_t)vextq_s8(v58, v58, 8uLL), v56, v54));
                float64x2_t v59 = v51[1];
                int8x16_t v60 = (int8x16_t)vmulq_f64(*v51, v53);
                float64x2_t v48 = vaddq_f64(v48, vmlaq_n_f64((float64x2_t)vextq_s8(v60, v60, 8uLL), *v51, v54));
                int8x16_t v61 = (int8x16_t)vmulq_f64(v59, v53);
                float64x2_t v49 = vaddq_f64(v49, vmlaq_n_f64((float64x2_t)vextq_s8(v61, v61, 8uLL), v59, v54));
                float64x2_t v51 = (float64x2_t *)((char *)v51 + v30);
                v50 += 2;
                --v52;
              }
              while (v52);
            }
            *(float64x2_t *)(a5 + 16 * v34) = v45;
            *(float64x2_t *)(a5 + (v46 | 0x10)) = v47;
            *(float64x2_t *)(a5 + (v46 | 0x20)) = v48;
            *(float64x2_t *)(a5 + (v46 | 0x30)) = v49;
            v34 += 4;
            v44 += 4;
          }
          while (v34 <= v133 - 4);
        }
        else
        {
          LODWORD(v34) = 0;
        }
        if ((int)v34 < (int)v133)
        {
          uint64_t v35 = v34;
          if (v13 < 1)
          {
            if ((a9 & 0x10) == 0)
            {
              int v131 = v24;
              bzero((void *)(a5 + 16 * v34), 16 * (v133 + ~v34) + 16);
              uint64_t v29 = a3 + 2;
              char v27 = v129;
              uint64_t v25 = v130;
              unint64_t v23 = a6 >> 4;
              int v24 = v131;
              int v20 = v133;
              int v19 = v135;
            }
          }
          else
          {
            unint64_t v36 = (float64_t *)(v31 + 8);
            float64x2_t v37 = &a3[v34];
            do
            {
              float64x2_t v38 = 0uLL;
              if ((a9 & 0x10) != 0) {
                float64x2_t v38 = *(float64x2_t *)(a5 + 16 * v35);
              }
              unint64_t v39 = v37;
              uint64_t v40 = v36;
              uint64_t v41 = v13;
              do
              {
                v42.f64[0] = *v40;
                v42.f64[1] = -*v40;
                int8x16_t v43 = (int8x16_t)vmulq_f64(*v39, v42);
                float64x2_t v38 = vaddq_f64(v38, vmlaq_n_f64((float64x2_t)vextq_s8(v43, v43, 8uLL), *v39, *(v40 - 1)));
                v40 += 2;
                unint64_t v39 = (float64x2_t *)((char *)v39 + v30);
                --v41;
              }
              while (v41);
              *(float64x2_t *)(a5 + 16 * v35++) = v38;
              ++v37;
            }
            while (v35 != v133);
          }
        }
        ++v24;
        uint64_t v18 = (_OWORD *)((char *)v18 + v25);
        a5 += 16 * v23;
      }
      while (v24 != v19);
    }
    return v137;
  }
  if (v135 < 1) {
    return v137;
  }
  if (v16) {
    BOOL v62 = v13 < 1;
  }
  else {
    BOOL v62 = 1;
  }
  char v63 = v62;
  if ((int)v133 < 1)
  {
    if ((v63 & 1) == 0)
    {
      for (int i = 0; i != v135; ++i)
      {
        double v125 = v18;
        double v126 = v16;
        uint64_t v127 = v13;
        do
        {
          *v126++ = *v125;
          v125 += v15;
          --v127;
        }
        while (v127);
        v18 += v17;
      }
    }
    return v137;
  }
  int v64 = 0;
  int v65 = v13 - 2;
  if (v13 - 2 <= 1) {
    unint64_t v66 = 1;
  }
  else {
    unint64_t v66 = v65;
  }
  uint64_t v67 = (v66 >> 1) + 1;
  uint64_t v134 = 16 * v17;
  unsigned int v68 = (v65 & 0xFFFFFFFE) + 2;
  uint64_t v69 = 16 * v15;
  uint64_t v70 = 16 * v22;
  char v71 = v63;
  while (2)
  {
    unint64_t v72 = v23;
    if (v16) {
      float64x2_t v73 = v16;
    }
    else {
      float64x2_t v73 = v18;
    }
    if ((v63 & 1) == 0)
    {
      uint64_t v74 = 0;
      int8x16_t v75 = v18;
      do
      {
        *(_OWORD *)&v16[v74] = *v75;
        v74 += 16;
        int8x16_t v75 = (_OWORD *)((char *)v75 + v69);
      }
      while (16 * v13 != v74);
      float64x2_t v73 = v16;
    }
    uint64_t v76 = 0;
    uint64_t v77 = v73 + 16;
    uint64_t v78 = a3;
    do
    {
      double v80 = 0.0;
      double v81 = 0.0;
      double v82 = 0.0;
      if ((a9 & 0x10) != 0)
      {
        uint64_t v83 = (double *)(a5 + 16 * v76);
        double v81 = *v83;
        double v82 = v83[1];
      }
      if (v13 < 2)
      {
        unsigned int v84 = 0;
        double v85 = 0.0;
        goto LABEL_78;
      }
      if (v66 < 6)
      {
        uint64_t v86 = 0;
        double v85 = 0.0;
LABEL_75:
        uint64_t v95 = v86;
        do
        {
          double v96 = *(double *)&v73[v95 * 16];
          double v97 = *(double *)&v77[v95 * 16 - 8];
          double v98 = v78[v95].f64[0];
          double v99 = v78[v95].f64[1];
          double v81 = v81 + v96 * v98 - v97 * v99;
          double v82 = v82 + v97 * v98 + v96 * v99;
          double v100 = *(double *)&v77[v95 * 16];
          double v101 = *(double *)&v77[v95 * 16 + 8];
          double v102 = v78[v95 + 1].f64[0];
          double v103 = v78[v95 + 1].f64[1];
          double v80 = v80 + v100 * v102 - v101 * v103;
          double v85 = v85 + v101 * v102 + v100 * v103;
          v86 += 2;
          v95 += 2;
        }
        while (v86 <= v13 - 2);
        unsigned int v84 = v68;
        goto LABEL_78;
      }
      uint64_t v87 = 0;
      double v85 = 0.0;
      uint64_t v88 = v67 & 0x7FFFFFFC;
      do
      {
        int v89 = (const double *)&v73[v87 * 16];
        float64x2x4_t v142 = vld4q_f64(v89);
        v89 += 8;
        float64x2x4_t v144 = vld4q_f64(v89);
        f64 = v78[v87].f64;
        float64x2x4_t v145 = vld4q_f64(f64);
        f64 += 8;
        float64x2_t v91 = vmlaq_f64(vmulq_f64(v145.val[1], vnegq_f64(v142.val[1])), v145.val[0], v142.val[0]);
        float64x2_t v92 = vmlaq_f64(vmulq_f64(v142.val[1], v145.val[0]), v145.val[1], v142.val[0]);
        float64x2_t v93 = vmlaq_f64(vmulq_f64(v145.val[3], vnegq_f64(v142.val[3])), v145.val[2], v142.val[2]);
        float64x2_t v94 = vmlaq_f64(vmulq_f64(v142.val[3], v145.val[2]), v145.val[3], v142.val[2]);
        float64x2x4_t v143 = vld4q_f64(f64);
        v145.val[0] = vmlaq_f64(vmulq_f64(v143.val[1], vnegq_f64(v144.val[1])), v143.val[0], v144.val[0]);
        v145.val[1] = vmlaq_f64(vmulq_f64(v144.val[1], v143.val[0]), v143.val[1], v144.val[0]);
        v145.val[2] = vmlaq_f64(vmulq_f64(v143.val[3], vnegq_f64(v144.val[3])), v143.val[2], v144.val[2]);
        v145.val[3] = vmlaq_f64(vmulq_f64(v144.val[3], v143.val[2]), v143.val[3], v144.val[2]);
        double v82 = v82 + v92.f64[0] + v92.f64[1] + v145.val[1].f64[0] + v145.val[1].f64[1];
        double v81 = v81 + v91.f64[0] + v91.f64[1] + v145.val[0].f64[0] + v145.val[0].f64[1];
        double v85 = v85 + v94.f64[0] + v94.f64[1] + v145.val[3].f64[0] + v145.val[3].f64[1];
        double v80 = v80 + v93.f64[0] + v93.f64[1] + v145.val[2].f64[0] + v145.val[2].f64[1];
        v87 += 8;
        v88 -= 4;
      }
      while (v88);
      uint64_t v86 = 2 * (v67 & 0x7FFFFFFC);
      unsigned int v84 = v68;
      if (v67 != (v67 & 0x7FFFFFFC)) {
        goto LABEL_75;
      }
LABEL_78:
      if ((int)v84 >= v13) {
        goto LABEL_65;
      }
      uint64_t v104 = v84;
      uint64_t v105 = v13 + ~v84;
      if (v105 < 3)
      {
        uint64_t v106 = v84;
LABEL_84:
        uint64_t v119 = v106;
        do
        {
          double v120 = *(double *)&v73[v119 * 16];
          double v121 = *(double *)&v73[v119 * 16 + 8];
          double v122 = v78[v119].f64[0];
          double v123 = v78[v119].f64[1];
          double v81 = v81 + v120 * v122 - v121 * v123;
          double v82 = v82 + v121 * v122 + v120 * v123;
          LODWORD(v106) = v106 + 1;
          ++v119;
        }
        while (v13 > (int)v106);
        goto LABEL_65;
      }
      uint64_t v107 = v105 + 1;
      uint64_t v108 = (v105 + 1) & 0x1FFFFFFFCLL;
      uint64_t v106 = v108 + v104;
      uint64_t v109 = 16 * v104 + 32;
      uint64_t v110 = v108;
      do
      {
        uint64_t v111 = (const double *)&v73[v109];
        uint64_t v112 = (const double *)&v73[v109 - 32];
        float64x2x2_t v138 = vld2q_f64(v112);
        float64x2x2_t v139 = vld2q_f64(v111);
        float64x2_t v113 = (const double *)((char *)v78->f64 + v109);
        double v114 = (const double *)((char *)v78[-2].f64 + v109);
        float64x2x2_t v140 = vld2q_f64(v114);
        float64x2x2_t v141 = vld2q_f64(v113);
        float64x2_t v115 = vmlaq_f64(vmulq_f64(v140.val[1], vnegq_f64(v138.val[1])), v140.val[0], v138.val[0]);
        float64x2_t v116 = vmlaq_f64(vmulq_f64(v141.val[1], vnegq_f64(v139.val[1])), v141.val[0], v139.val[0]);
        float64x2_t v117 = vmlaq_f64(vmulq_f64(v138.val[1], v140.val[0]), v140.val[1], v138.val[0]);
        float64x2_t v118 = vmlaq_f64(vmulq_f64(v139.val[1], v141.val[0]), v141.val[1], v139.val[0]);
        double v82 = v82 + v117.f64[0] + v117.f64[1] + v118.f64[0] + v118.f64[1];
        double v81 = v81 + v115.f64[0] + v115.f64[1] + v116.f64[0] + v116.f64[1];
        v109 += 64;
        v110 -= 4;
      }
      while (v110);
      if (v107 != v108) {
        goto LABEL_84;
      }
LABEL_65:
      uint64_t v79 = (double *)(a5 + 16 * v76);
      *uint64_t v79 = v80 + v81;
      v79[1] = v85 + v82;
      ++v76;
      uint64_t v78 = (float64x2_t *)((char *)v78 + v70);
    }
    while (v76 != v21);
    ++v64;
    uint64_t v18 = (_OWORD *)((char *)v18 + v134);
    unint64_t v23 = v72;
    a5 += 16 * v72;
    char v63 = v71;
    if (v64 != v135) {
      continue;
    }
    return v137;
  }
}

void sub_100286058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20 != v20)
  {
    if (a20) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

float64x2_t *sub_100286088(float64x2_t *result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned int *a7, char a8, double a9, double a10)
{
  unsigned int v10 = a7[1];
  uint64_t v11 = a2 >> 4;
  if ((a8 & 4) != 0) {
    uint64_t v12 = a2 >> 4;
  }
  else {
    uint64_t v12 = 1;
  }
  if ((a8 & 4) != 0) {
    uint64_t v11 = 1;
  }
  if (result) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (result) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v10)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a7;
    unint64_t v17 = (v16 - 4);
    uint64_t v18 = 16 * v16;
    unint64_t v19 = a6 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v20 = 16 * v14;
    unint64_t v21 = a4 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v22 = v13 << 6;
    uint64_t v23 = 16 * (a6 >> 4);
    uint64_t v24 = 16 * (a4 >> 4);
    uint64_t v25 = v13;
    uint64_t v26 = a3;
    uint64_t v27 = a5;
    do
    {
      if (result)
      {
        if ((int)v16 >= 4)
        {
          uint64_t v29 = 0;
          unint64_t v30 = 0;
          uint64_t v31 = result;
          do
          {
            uint64_t v32 = v31;
            double v33 = (float64x2_t *)(v27 + v29);
            float64x2_t v34 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + v29 + 16), a9), vmulq_n_f64(v31[v25], a10));
            *double v33 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + v29), a9), vmulq_n_f64(*v31, a10));
            v33[1] = v34;
            uint64_t v35 = &v31[v25 + v25];
            float64x2_t v36 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + v29 + 32), a9), vmulq_n_f64(*v35, a10));
            float64x2_t v37 = &v35[v25];
            float64x2_t v38 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + v29 + 48), a9), vmulq_n_f64(*v37, a10));
            v33[2] = v36;
            v33[3] = v38;
            v30 += 4;
            v29 += 64;
            uint64_t v31 = &v37[v25];
          }
          while (v30 <= v17);
          uint64_t v28 = (float64x2_t *)((char *)v32 + v22);
          unint64_t v30 = v30;
          if ((int)v30 >= (int)v16) {
            goto LABEL_14;
          }
          do
          {
LABEL_26:
            *(float64x2_t *)(v27 + 16 * v30) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v26 + 16 * v30), a9), vmulq_n_f64(*v28, a10));
            ++v30;
            uint64_t v28 = (float64x2_t *)((char *)v28 + v25 * 16);
          }
          while (v16 != v30);
          goto LABEL_14;
        }
        unint64_t v30 = 0;
        uint64_t v28 = result;
        if ((int)v16 > 0) {
          goto LABEL_26;
        }
      }
      else if ((int)v16 < 4)
      {
        unint64_t i = 0;
        if ((int)v16 > 0) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v39 = 0;
        for (unint64_t i = 0; i <= v17; i += 4)
        {
          uint64_t v41 = (float64x2_t *)(v27 + v39);
          float64x2_t v42 = vmulq_n_f64(*(float64x2_t *)(v26 + v39 + 16), a9);
          *uint64_t v41 = vmulq_n_f64(*(float64x2_t *)(v26 + v39), a9);
          v41[1] = v42;
          float64x2_t v43 = vmulq_n_f64(*(float64x2_t *)(v26 + v39 + 48), a9);
          _DWORD v41[2] = vmulq_n_f64(*(float64x2_t *)(v26 + v39 + 32), a9);
          v41[3] = v43;
          v39 += 64;
        }
        unint64_t i = i;
        if ((int)i < (int)v16)
        {
LABEL_30:
          uint64_t v44 = v16 - i;
          if (v16 - i < 4) {
            goto LABEL_43;
          }
          uint64_t v45 = 16 * i;
          if (v27 + 16 * i < a3 + v18 + v21 * v15 && v26 + 16 * i < a5 + v18 + v19 * v15) {
            goto LABEL_43;
          }
          i += v44 & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v47 = v44 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v48 = *(float64x2_t *)(v26 + v45 + 32);
            float64x2_t v49 = *(float64x2_t *)(v26 + v45 + 48);
            uint64_t v50 = (float64x2_t *)(v27 + v45);
            float64x2_t v51 = vmulq_n_f64(*(float64x2_t *)(v26 + v45 + 16), a9);
            *uint64_t v50 = vmulq_n_f64(*(float64x2_t *)(v26 + v45), a9);
            v50[1] = v51;
            v50[2] = vmulq_n_f64(v48, a9);
            v50[3] = vmulq_n_f64(v49, a9);
            v45 += 64;
            v47 -= 4;
          }
          while (v47);
          if (v44 != (v44 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_43:
            do
            {
              *(float64x2_t *)(v27 + 16 * i) = vmulq_n_f64(*(float64x2_t *)(v26 + 16 * i), a9);
              ++i;
            }
            while (v16 != i);
          }
        }
      }
LABEL_14:
      uint64_t result = (float64x2_t *)((char *)result + v20);
      v26 += v24;
      v27 += v23;
      ++v15;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_100286324(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v9 = *a2;
    int v10 = *((_DWORD *)a2 + 2);
    *(_DWORD *)float64x2_t v91 = 1124007936;
    memset(&v91[4], 0, 60);
    float64x2_t v92 = &v91[8];
    float64x2_t v93 = &v94;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    *(_DWORD *)uint64_t v87 = 1124007936;
    memset(&v87[4], 0, 60);
    uint64_t v88 = &v87[8];
    int v89 = v90;
    v90[0] = 0;
    v90[1] = 0;
    *(_DWORD *)double v82 = 1124007936;
    memset(&v82[4], 0, 60);
    uint64_t v83 = &v82[8];
    unsigned int v84 = &v85;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    sub_100290690((uint64_t)v96, v9, v10, (uint64_t)v91, (uint64_t)v87, (uint64_t)v82, a2 + 40, *((double *)a2 + 38), *((double *)a2 + 39));
    *(void *)a5 = *(void *)v96;
    *(_DWORD *)(a5 + 8) = *(_DWORD *)&v96[8];
    if (v96 == (unsigned char *)a5)
    {
LABEL_25:
      sub_100287094(a5 + 112, (uint64_t)v100);
      sub_100287094(a5 + 208, (uint64_t)v101);
      long long v28 = v103;
      *(_OWORD *)(a5 + 304) = v102;
      *(_OWORD *)(a5 + 320) = v28;
      *(_OWORD *)(a5 + 336) = v104;
      sub_10000B6BC((uint64_t)v96);
      if (*(void *)&v82[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v82[56] + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)v82);
      }
      *(void *)&v82[56] = 0;
      memset(&v82[16], 0, 32);
      if (*(int *)&v82[4] >= 1)
      {
        uint64_t v29 = 0;
        unint64_t v30 = v83;
        do
          *(_DWORD *)&v30[4 * v29++] = 0;
        while (v29 < *(int *)&v82[4]);
      }
      if (v84 != &v85) {
        j__free(v84);
      }
      if (*(void *)&v87[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v87[56] + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)v87);
      }
      *(void *)&v87[56] = 0;
      memset(&v87[16], 0, 32);
      if (*(int *)&v87[4] >= 1)
      {
        uint64_t v31 = 0;
        uint64_t v32 = v88;
        do
          *(_DWORD *)&v32[4 * v31++] = 0;
        while (v31 < *(int *)&v87[4]);
      }
      if (v89 != v90) {
        j__free(v89);
      }
      if (*(void *)&v91[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v91[56] + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)v91);
      }
      *(void *)&v91[56] = 0;
      memset(&v91[16], 0, 32);
      if (*(int *)&v91[4] >= 1)
      {
        uint64_t v33 = 0;
        float64x2_t v34 = v92;
        do
          *(_DWORD *)&v34[4 * v33++] = 0;
        while (v33 < *(int *)&v91[4]);
      }
      if (v93 != &v94) {
        j__free(v93);
      }
      if (!a2[4])
      {
LABEL_106:
        if (!a2[16]) {
          goto LABEL_128;
        }
        uint64_t v55 = *a4;
        *(void *)float64x2_t v91 = *a3;
        *(void *)uint64_t v87 = v55;
        sub_100293AD0((uint64_t)v96, (_DWORD *)a2 + 28, (int *)v91, (uint64_t *)v87);
        if ((unsigned char *)(a5 + 112) == v96)
        {
          if (*(void *)&v96[56]
            && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 0xFFFFFFFF) == 1)
          {
            sub_1002932F4((uint64_t)v96);
          }
          goto LABEL_123;
        }
        uint64_t v56 = *(void *)(a5 + 168);
        if (v56 && atomic_fetch_add((atomic_uint *volatile)(v56 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a5 + 112);
        }
        *(void *)(a5 + 168) = 0;
        *(_OWORD *)(a5 + 128) = 0u;
        *(_OWORD *)(a5 + 144) = 0u;
        if (*(int *)(a5 + 116) >= 1)
        {
          uint64_t v57 = 0;
          uint64_t v58 = *(void *)(a5 + 176);
          do
            *(_DWORD *)(v58 + 4 * v57++) = 0;
          while (v57 < *(int *)(a5 + 116));
        }
        int v59 = *(_DWORD *)&v96[4];
        long long v60 = *(_OWORD *)&v96[16];
        *(_OWORD *)(a5 + 112) = *(_OWORD *)v96;
        *(_OWORD *)(a5 + 128) = v60;
        long long v61 = *(_OWORD *)&v96[48];
        *(_OWORD *)(a5 + 144) = *(_OWORD *)&v96[32];
        *(_OWORD *)(a5 + 160) = v61;
        BOOL v62 = *(void **)(a5 + 184);
        if (v62 == (void *)(a5 + 192))
        {
          char v63 = *(void **)&v96[72];
          if (v59 <= 2) {
            goto LABEL_116;
          }
        }
        else
        {
          j__free(v62);
          *(void *)(a5 + 176) = a5 + 120;
          *(void *)(a5 + 184) = a5 + 192;
          BOOL v62 = (void *)(a5 + 192);
          char v63 = *(void **)&v96[72];
          if (*(int *)&v96[4] <= 2)
          {
LABEL_116:
            void *v62 = *v63;
            v62[1] = v63[1];
LABEL_122:
            *(_DWORD *)double v96 = 1124007936;
            memset(&v96[4], 0, 60);
LABEL_123:
            *(void *)&v96[56] = 0;
            memset(&v96[16], 0, 32);
            if (*(int *)&v96[4] >= 1)
            {
              uint64_t v64 = 0;
              uint64_t v65 = *(void *)&v96[64];
              do
                *(_DWORD *)(v65 + 4 * v64++) = 0;
              while (v64 < *(int *)&v96[4]);
            }
            if (*(unsigned char ***)&v96[72] != &v97) {
              j__free(*(void **)&v96[72]);
            }
LABEL_128:
            if (!a2[28]) {
              return;
            }
            uint64_t v66 = *a4;
            *(void *)float64x2_t v91 = *a3;
            *(void *)uint64_t v87 = v66;
            sub_100293AD0((uint64_t)v96, (_DWORD *)a2 + 52, (int *)v91, (uint64_t *)v87);
            if ((unsigned char *)(a5 + 208) == v96)
            {
              if (*(void *)&v96[56]
                && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 0xFFFFFFFF) == 1)
              {
                sub_1002932F4((uint64_t)v96);
              }
              goto LABEL_145;
            }
            uint64_t v67 = *(void *)(a5 + 264);
            if (v67 && atomic_fetch_add((atomic_uint *volatile)(v67 + 20), 0xFFFFFFFF) == 1) {
              sub_1002932F4(a5 + 208);
            }
            *(void *)(a5 + 264) = 0;
            *(_OWORD *)(a5 + 224) = 0u;
            *(_OWORD *)(a5 + 240) = 0u;
            if (*(int *)(a5 + 212) >= 1)
            {
              uint64_t v68 = 0;
              uint64_t v69 = *(void *)(a5 + 272);
              do
                *(_DWORD *)(v69 + 4 * v68++) = 0;
              while (v68 < *(int *)(a5 + 212));
            }
            int v70 = *(_DWORD *)&v96[4];
            long long v71 = *(_OWORD *)&v96[16];
            *(_OWORD *)(a5 + 208) = *(_OWORD *)v96;
            *(_OWORD *)(a5 + 224) = v71;
            long long v72 = *(_OWORD *)&v96[48];
            *(_OWORD *)(a5 + 240) = *(_OWORD *)&v96[32];
            *(_OWORD *)(a5 + 256) = v72;
            float64x2_t v73 = *(void **)(a5 + 280);
            if (v73 == (void *)(a5 + 288))
            {
              uint64_t v74 = *(void **)&v96[72];
              if (v70 <= 2) {
                goto LABEL_138;
              }
            }
            else
            {
              j__free(v73);
              *(void *)(a5 + 272) = a5 + 216;
              *(void *)(a5 + 280) = a5 + 288;
              float64x2_t v73 = (void *)(a5 + 288);
              uint64_t v74 = *(void **)&v96[72];
              if (*(int *)&v96[4] <= 2)
              {
LABEL_138:
                *float64x2_t v73 = *v74;
                v73[1] = v74[1];
LABEL_144:
                *(_DWORD *)double v96 = 1124007936;
                memset(&v96[4], 0, 60);
LABEL_145:
                *(void *)&v96[56] = 0;
                memset(&v96[16], 0, 32);
                if (*(int *)&v96[4] >= 1)
                {
                  uint64_t v75 = 0;
                  uint64_t v76 = *(void *)&v96[64];
                  do
                    *(_DWORD *)(v76 + 4 * v75++) = 0;
                  while (v75 < *(int *)&v96[4]);
                }
                if (*(unsigned char ***)&v96[72] != &v97) {
                  j__free(*(void **)&v96[72]);
                }
                return;
              }
            }
            *(void *)(a5 + 272) = *(void *)&v96[64];
            *(void *)(a5 + 280) = v74;
            *(void *)&unsigned char v96[64] = &v96[8];
            *(void *)&v96[72] = &v97;
            goto LABEL_144;
          }
        }
        *(void *)(a5 + 176) = *(void *)&v96[64];
        *(void *)(a5 + 184) = v63;
        *(void *)&unsigned char v96[64] = &v96[8];
        *(void *)&v96[72] = &v97;
        goto LABEL_122;
      }
      uint64_t v35 = *a4;
      *(void *)float64x2_t v91 = *a3;
      *(void *)uint64_t v87 = v35;
      sub_100293AD0((uint64_t)v96, (_DWORD *)a2 + 4, (int *)v91, (uint64_t *)v87);
      if ((unsigned char *)(a5 + 16) == v96)
      {
        if (*(void *)&v96[56]
          && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v96[56] + 20), 0xFFFFFFFF) == 1)
        {
          sub_1002932F4((uint64_t)v96);
        }
        goto LABEL_101;
      }
      uint64_t v36 = *(void *)(a5 + 72);
      if (v36 && atomic_fetch_add((atomic_uint *volatile)(v36 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4(a5 + 16);
      }
      *(void *)(a5 + 72) = 0;
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      if (*(int *)(a5 + 20) >= 1)
      {
        uint64_t v37 = 0;
        uint64_t v38 = *(void *)(a5 + 80);
        do
          *(_DWORD *)(v38 + 4 * v37++) = 0;
        while (v37 < *(int *)(a5 + 20));
      }
      int v39 = *(_DWORD *)&v96[4];
      long long v40 = *(_OWORD *)&v96[16];
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v96;
      *(_OWORD *)(a5 + 32) = v40;
      long long v41 = *(_OWORD *)&v96[48];
      *(_OWORD *)(a5 + 48) = *(_OWORD *)&v96[32];
      *(_OWORD *)(a5 + 64) = v41;
      float64x2_t v42 = *(void **)(a5 + 88);
      if (v42 == (void *)(a5 + 96))
      {
        float64x2_t v43 = *(void **)&v96[72];
        if (v39 <= 2) {
          goto LABEL_59;
        }
      }
      else
      {
        j__free(v42);
        *(void *)(a5 + 80) = a5 + 24;
        *(void *)(a5 + 88) = a5 + 96;
        float64x2_t v43 = *(void **)&v96[72];
        if (*(int *)&v96[4] <= 2)
        {
LABEL_59:
          *(void *)(a5 + 96) = *v43;
          *(void *)(a5 + 104) = v43[1];
LABEL_100:
          *(_DWORD *)double v96 = 1124007936;
          memset(&v96[4], 0, 60);
LABEL_101:
          *(void *)&v96[56] = 0;
          memset(&v96[16], 0, 32);
          if (*(int *)&v96[4] >= 1)
          {
            uint64_t v53 = 0;
            uint64_t v54 = *(void *)&v96[64];
            do
              *(_DWORD *)(v54 + 4 * v53++) = 0;
            while (v53 < *(int *)&v96[4]);
          }
          if (*(unsigned char ***)&v96[72] != &v97) {
            j__free(*(void **)&v96[72]);
          }
          goto LABEL_106;
        }
      }
      *(void *)(a5 + 80) = *(void *)&v96[64];
      *(void *)(a5 + 88) = v43;
      *(void *)&unsigned char v96[64] = &v96[8];
      *(void *)&v96[72] = &v97;
      goto LABEL_100;
    }
    uint64_t v11 = *(void *)(a5 + 72);
    if (v11 && atomic_fetch_add((atomic_uint *volatile)(v11 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a5 + 16);
    }
    *(void *)(a5 + 72) = 0;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    if (*(int *)(a5 + 20) >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(a5 + 80);
      do
        *(_DWORD *)(v13 + 4 * v12++) = 0;
      while (v12 < *(int *)(a5 + 20));
    }
    int v14 = *(_DWORD *)&v96[20];
    long long v15 = *(_OWORD *)&v96[32];
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&v96[16];
    *(_OWORD *)(a5 + 32) = v15;
    long long v16 = *(_OWORD *)&v96[64];
    *(_OWORD *)(a5 + 48) = *(_OWORD *)&v96[48];
    *(_OWORD *)(a5 + 64) = v16;
    unint64_t v17 = *(void **)(a5 + 88);
    if (v17 == (void *)(a5 + 96))
    {
      uint64_t v18 = v98;
      if (v14 <= 2) {
        goto LABEL_11;
      }
    }
    else
    {
      j__free(v17);
      *(void *)(a5 + 80) = a5 + 24;
      *(void *)(a5 + 88) = a5 + 96;
      uint64_t v18 = v98;
      if (*(int *)&v96[20] <= 2)
      {
LABEL_11:
        *(void *)(a5 + 96) = *v18;
        *(void *)(a5 + 104) = v18[1];
LABEL_24:
        *(_DWORD *)&v96[16] = 1124007936;
        memset(&v96[20], 0, 60);
        goto LABEL_25;
      }
    }
    *(void *)(a5 + 80) = v97;
    *(void *)(a5 + 88) = v18;
    double v98 = v99;
    double v97 = &v96[24];
    goto LABEL_24;
  }
  *(_DWORD *)float64x2_t v91 = 1124007936;
  memset(&v91[4], 0, 60);
  float64x2_t v92 = &v91[8];
  float64x2_t v93 = &v94;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  (*(void (**)(void, void *, unsigned char *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v91, 0xFFFFFFFFLL);
  uint64_t v19 = *a4;
  *(void *)double v82 = *a3;
  *(void *)uint64_t v78 = v19;
  sub_100293AD0((uint64_t)v87, v91, (int *)v82, (uint64_t *)v78);
  *(_DWORD *)double v82 = 1124007936;
  memset(&v82[4], 0, 60);
  uint64_t v83 = &v82[8];
  unsigned int v84 = &v85;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  *(_DWORD *)uint64_t v78 = 1124007936;
  memset(&v78[4], 0, 60);
  uint64_t v79 = &v78[8];
  double v80 = v81;
  v81[0] = 0;
  v81[1] = 0;
  memset(v77, 0, sizeof(v77));
  sub_100290690((uint64_t)v96, (uint64_t)&qword_1004E09B0, 0, (uint64_t)v87, (uint64_t)v82, (uint64_t)v78, v77, 1.0, 1.0);
  *(void *)a5 = *(void *)v96;
  *(_DWORD *)(a5 + 8) = *(_DWORD *)&v96[8];
  if (v96 != (unsigned char *)a5)
  {
    uint64_t v20 = *(void *)(a5 + 72);
    if (v20 && atomic_fetch_add((atomic_uint *volatile)(v20 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a5 + 16);
    }
    *(void *)(a5 + 72) = 0;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    if (*(int *)(a5 + 20) >= 1)
    {
      uint64_t v21 = 0;
      uint64_t v22 = *(void *)(a5 + 80);
      do
        *(_DWORD *)(v22 + 4 * v21++) = 0;
      while (v21 < *(int *)(a5 + 20));
    }
    int v23 = *(_DWORD *)&v96[20];
    long long v24 = *(_OWORD *)&v96[32];
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&v96[16];
    *(_OWORD *)(a5 + 32) = v24;
    long long v25 = *(_OWORD *)&v96[64];
    *(_OWORD *)(a5 + 48) = *(_OWORD *)&v96[48];
    *(_OWORD *)(a5 + 64) = v25;
    uint64_t v26 = *(void **)(a5 + 88);
    if (v26 == (void *)(a5 + 96))
    {
      uint64_t v27 = v98;
      if (v23 <= 2) {
        goto LABEL_21;
      }
    }
    else
    {
      j__free(v26);
      *(void *)(a5 + 80) = a5 + 24;
      *(void *)(a5 + 88) = a5 + 96;
      uint64_t v26 = (void *)(a5 + 96);
      uint64_t v27 = v98;
      if (*(int *)&v96[20] <= 2)
      {
LABEL_21:
        void *v26 = *v27;
        v26[1] = v27[1];
LABEL_62:
        *(_DWORD *)&v96[16] = 1124007936;
        memset(&v96[20], 0, 60);
        goto LABEL_63;
      }
    }
    *(void *)(a5 + 80) = v97;
    *(void *)(a5 + 88) = v27;
    double v98 = v99;
    double v97 = &v96[24];
    goto LABEL_62;
  }
LABEL_63:
  sub_100287094(a5 + 112, (uint64_t)v100);
  sub_100287094(a5 + 208, (uint64_t)v101);
  long long v44 = v103;
  *(_OWORD *)(a5 + 304) = v102;
  *(_OWORD *)(a5 + 320) = v44;
  *(_OWORD *)(a5 + 336) = v104;
  sub_10000B6BC((uint64_t)v96);
  if (*(void *)&v78[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v78[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v78);
  }
  *(void *)&v78[56] = 0;
  memset(&v78[16], 0, 32);
  if (*(int *)&v78[4] >= 1)
  {
    uint64_t v45 = 0;
    uint64_t v46 = v79;
    do
      *(_DWORD *)&v46[4 * v45++] = 0;
    while (v45 < *(int *)&v78[4]);
  }
  if (v80 != v81) {
    j__free(v80);
  }
  if (*(void *)&v82[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v82[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v82);
  }
  *(void *)&v82[56] = 0;
  memset(&v82[16], 0, 32);
  if (*(int *)&v82[4] >= 1)
  {
    uint64_t v47 = 0;
    float64x2_t v48 = v83;
    do
      *(_DWORD *)&v48[4 * v47++] = 0;
    while (v47 < *(int *)&v82[4]);
  }
  if (v84 != &v85) {
    j__free(v84);
  }
  if (*(void *)&v87[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v87[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v87);
  }
  *(void *)&v87[56] = 0;
  memset(&v87[16], 0, 32);
  if (*(int *)&v87[4] >= 1)
  {
    uint64_t v49 = 0;
    uint64_t v50 = v88;
    do
      *(_DWORD *)&v50[4 * v49++] = 0;
    while (v49 < *(int *)&v87[4]);
  }
  if (v89 != v90) {
    j__free(v89);
  }
  if (*(void *)&v91[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v91[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v91);
  }
  *(void *)&v91[56] = 0;
  memset(&v91[16], 0, 32);
  if (*(int *)&v91[4] >= 1)
  {
    uint64_t v51 = 0;
    uint64_t v52 = v92;
    do
      *(_DWORD *)&v52[4 * v51++] = 0;
    while (v51 < *(int *)&v91[4]);
  }
  if (v93 != &v94) {
    j__free(v93);
  }
}

void sub_100286FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void sub_100287018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t sub_100287094(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1);
    }
    *(void *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    if (*(int *)(a1 + 4) >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(a1 + 64);
      do
        *(_DWORD *)(v6 + 4 * v5++) = 0;
      while (v5 < *(int *)(a1 + 4));
    }
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    unint64_t v8 = *(void **)(a1 + 72);
    if (v8 != (void *)(a1 + 80))
    {
      j__free(v8);
      *(void *)(a1 + 64) = a1 + 8;
      *(void *)(a1 + 72) = a1 + 80;
      unint64_t v8 = (void *)(a1 + 80);
    }
    uint64_t v9 = *(void **)(a2 + 72);
    if (*(int *)(a2 + 4) > 2)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v9;
      *(void *)(a2 + 64) = a2 + 8;
      *(void *)(a2 + 72) = a2 + 80;
    }
    else
    {
      *unint64_t v8 = *v9;
      v8[1] = v9[1];
    }
    *(_DWORD *)a2 = 1124007936;
    *(_OWORD *)(a2 + 4) = 0u;
    *(_OWORD *)(a2 + 20) = 0u;
    *(_OWORD *)(a2 + 36) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
  }
  return a1;
}

void sub_1002871B0(uint64_t a1, void *a2, unsigned int a3, uint64_t a4)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v7 = *a2;
    int v8 = *((_DWORD *)a2 + 2);
    int v86 = 1124007936;
    memset(v87, 0, sizeof(v87));
    uint64_t v88 = &v87[1];
    int v89 = &v90;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    LODWORD(v82[0]) = 1124007936;
    memset((char *)v82 + 4, 0, 48);
    v82[3] = 0u;
    uint64_t v83 = (char *)v82 + 8;
    unsigned int v84 = v85;
    v85[0] = 0;
    v85[1] = 0;
    int v76 = 1124007936;
    memset(v77, 0, sizeof(v77));
    uint64_t v78 = &v77[1];
    uint64_t v79 = &v80;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    sub_100290690((uint64_t)v92, v7, v8, (uint64_t)&v86, (uint64_t)v82, (uint64_t)&v76, a2 + 40, *((double *)a2 + 38), *((double *)a2 + 39));
    *(void *)a4 = *(void *)v92;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)&v92[8];
    if (v92 == (unsigned char *)a4)
    {
LABEL_25:
      sub_100287094(a4 + 112, (uint64_t)v96);
      sub_100287094(a4 + 208, (uint64_t)v97);
      long long v25 = v99;
      *(_OWORD *)(a4 + 304) = v98;
      *(_OWORD *)(a4 + 320) = v25;
      *(_OWORD *)(a4 + 336) = v100;
      sub_10000B6BC((uint64_t)v92);
      if (*(void *)&v77[13] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v77[13] + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v76);
      }
      *(void *)&v77[13] = 0;
      memset(&v77[3], 0, 32);
      if (v77[0] >= 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v78;
        do
          v27[v26++] = 0;
        while (v26 < v77[0]);
      }
      if (v79 != &v80) {
        j__free(v79);
      }
      if (*((void *)&v82[3] + 1)
        && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v82[3] + 1) + 20), 0xFFFFFFFF) == 1)
      {
        sub_1002932F4((uint64_t)v82);
      }
      *((void *)&v82[3] + 1) = 0;
      memset(&v82[1], 0, 32);
      if (SDWORD1(v82[0]) >= 1)
      {
        uint64_t v28 = 0;
        uint64_t v29 = v83;
        do
          *(_DWORD *)&v29[4 * v28++] = 0;
        while (v28 < SDWORD1(v82[0]));
      }
      if (v84 != v85) {
        j__free(v84);
      }
      if (*(void *)&v87[13] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v87[13] + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)&v86);
      }
      *(void *)&v87[13] = 0;
      memset(&v87[3], 0, 32);
      if (v87[0] >= 1)
      {
        uint64_t v30 = 0;
        uint64_t v31 = v88;
        do
          v31[v30++] = 0;
        while (v30 < v87[0]);
      }
      if (v89 != &v90) {
        j__free(v89);
      }
      if (!a2[4])
      {
LABEL_106:
        if (!a2[16]) {
          goto LABEL_128;
        }
        sub_100293DB4((uint64_t)(a2 + 14), a3, (uint64_t)v92);
        if ((unsigned char *)(a4 + 112) == v92)
        {
          if (*(void *)&v92[56]
            && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v92[56] + 20), 0xFFFFFFFF) == 1)
          {
            sub_1002932F4((uint64_t)v92);
          }
          goto LABEL_123;
        }
        uint64_t v51 = *(void *)(a4 + 168);
        if (v51 && atomic_fetch_add((atomic_uint *volatile)(v51 + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4(a4 + 112);
        }
        *(void *)(a4 + 168) = 0;
        *(_OWORD *)(a4 + 128) = 0u;
        *(_OWORD *)(a4 + 144) = 0u;
        if (*(int *)(a4 + 116) >= 1)
        {
          uint64_t v52 = 0;
          uint64_t v53 = *(void *)(a4 + 176);
          do
            *(_DWORD *)(v53 + 4 * v52++) = 0;
          while (v52 < *(int *)(a4 + 116));
        }
        int v54 = *(_DWORD *)&v92[4];
        long long v55 = *(_OWORD *)&v92[16];
        *(_OWORD *)(a4 + 112) = *(_OWORD *)v92;
        *(_OWORD *)(a4 + 128) = v55;
        long long v56 = *(_OWORD *)&v92[48];
        *(_OWORD *)(a4 + 144) = *(_OWORD *)&v92[32];
        *(_OWORD *)(a4 + 160) = v56;
        uint64_t v57 = *(void **)(a4 + 184);
        if (v57 == (void *)(a4 + 192))
        {
          uint64_t v58 = *(void **)&v92[72];
          if (v54 <= 2) {
            goto LABEL_116;
          }
        }
        else
        {
          j__free(v57);
          *(void *)(a4 + 176) = a4 + 120;
          *(void *)(a4 + 184) = a4 + 192;
          uint64_t v57 = (void *)(a4 + 192);
          uint64_t v58 = *(void **)&v92[72];
          if (*(int *)&v92[4] <= 2)
          {
LABEL_116:
            *uint64_t v57 = *v58;
            v57[1] = v58[1];
LABEL_122:
            *(_DWORD *)float64x2_t v92 = 1124007936;
            memset(&v92[4], 0, 60);
LABEL_123:
            *(void *)&v92[56] = 0;
            memset(&v92[16], 0, 32);
            if (*(int *)&v92[4] >= 1)
            {
              uint64_t v59 = 0;
              uint64_t v60 = *(void *)&v92[64];
              do
                *(_DWORD *)(v60 + 4 * v59++) = 0;
              while (v59 < *(int *)&v92[4]);
            }
            if (*(unsigned char ***)&v92[72] != &v93) {
              j__free(*(void **)&v92[72]);
            }
LABEL_128:
            if (!a2[28]) {
              return;
            }
            sub_100293DB4((uint64_t)(a2 + 26), a3, (uint64_t)v92);
            if ((unsigned char *)(a4 + 208) == v92)
            {
              if (*(void *)&v92[56]
                && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v92[56] + 20), 0xFFFFFFFF) == 1)
              {
                sub_1002932F4((uint64_t)v92);
              }
              goto LABEL_145;
            }
            uint64_t v61 = *(void *)(a4 + 264);
            if (v61 && atomic_fetch_add((atomic_uint *volatile)(v61 + 20), 0xFFFFFFFF) == 1) {
              sub_1002932F4(a4 + 208);
            }
            *(void *)(a4 + 264) = 0;
            *(_OWORD *)(a4 + 224) = 0u;
            *(_OWORD *)(a4 + 240) = 0u;
            if (*(int *)(a4 + 212) >= 1)
            {
              uint64_t v62 = 0;
              uint64_t v63 = *(void *)(a4 + 272);
              do
                *(_DWORD *)(v63 + 4 * v62++) = 0;
              while (v62 < *(int *)(a4 + 212));
            }
            int v64 = *(_DWORD *)&v92[4];
            long long v65 = *(_OWORD *)&v92[16];
            *(_OWORD *)(a4 + 208) = *(_OWORD *)v92;
            *(_OWORD *)(a4 + 224) = v65;
            long long v66 = *(_OWORD *)&v92[48];
            *(_OWORD *)(a4 + 240) = *(_OWORD *)&v92[32];
            *(_OWORD *)(a4 + 256) = v66;
            uint64_t v67 = *(void **)(a4 + 280);
            if (v67 == (void *)(a4 + 288))
            {
              uint64_t v68 = *(void **)&v92[72];
              if (v64 <= 2) {
                goto LABEL_138;
              }
            }
            else
            {
              j__free(v67);
              *(void *)(a4 + 272) = a4 + 216;
              *(void *)(a4 + 280) = a4 + 288;
              uint64_t v67 = (void *)(a4 + 288);
              uint64_t v68 = *(void **)&v92[72];
              if (*(int *)&v92[4] <= 2)
              {
LABEL_138:
                *uint64_t v67 = *v68;
                v67[1] = v68[1];
LABEL_144:
                *(_DWORD *)float64x2_t v92 = 1124007936;
                memset(&v92[4], 0, 60);
LABEL_145:
                *(void *)&v92[56] = 0;
                memset(&v92[16], 0, 32);
                if (*(int *)&v92[4] >= 1)
                {
                  uint64_t v69 = 0;
                  uint64_t v70 = *(void *)&v92[64];
                  do
                    *(_DWORD *)(v70 + 4 * v69++) = 0;
                  while (v69 < *(int *)&v92[4]);
                }
                if (*(unsigned char ***)&v92[72] != &v93) {
                  j__free(*(void **)&v92[72]);
                }
                return;
              }
            }
            *(void *)(a4 + 272) = *(void *)&v92[64];
            *(void *)(a4 + 280) = v68;
            *(void *)&unsigned char v92[64] = &v92[8];
            *(void *)&v92[72] = &v93;
            goto LABEL_144;
          }
        }
        *(void *)(a4 + 176) = *(void *)&v92[64];
        *(void *)(a4 + 184) = v58;
        *(void *)&unsigned char v92[64] = &v92[8];
        *(void *)&v92[72] = &v93;
        goto LABEL_122;
      }
      sub_100293DB4((uint64_t)(a2 + 2), a3, (uint64_t)v92);
      if ((unsigned char *)(a4 + 16) == v92)
      {
        if (*(void *)&v92[56]
          && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v92[56] + 20), 0xFFFFFFFF) == 1)
        {
          sub_1002932F4((uint64_t)v92);
        }
        goto LABEL_101;
      }
      uint64_t v32 = *(void *)(a4 + 72);
      if (v32 && atomic_fetch_add((atomic_uint *volatile)(v32 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4(a4 + 16);
      }
      *(void *)(a4 + 72) = 0;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      if (*(int *)(a4 + 20) >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v34 = *(void *)(a4 + 80);
        do
          *(_DWORD *)(v34 + 4 * v33++) = 0;
        while (v33 < *(int *)(a4 + 20));
      }
      int v35 = *(_DWORD *)&v92[4];
      long long v36 = *(_OWORD *)&v92[16];
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v92;
      *(_OWORD *)(a4 + 32) = v36;
      long long v37 = *(_OWORD *)&v92[48];
      *(_OWORD *)(a4 + 48) = *(_OWORD *)&v92[32];
      *(_OWORD *)(a4 + 64) = v37;
      uint64_t v38 = *(void **)(a4 + 88);
      if (v38 == (void *)(a4 + 96))
      {
        int v39 = *(void **)&v92[72];
        if (v35 <= 2) {
          goto LABEL_59;
        }
      }
      else
      {
        j__free(v38);
        *(void *)(a4 + 80) = a4 + 24;
        *(void *)(a4 + 88) = a4 + 96;
        int v39 = *(void **)&v92[72];
        if (*(int *)&v92[4] <= 2)
        {
LABEL_59:
          *(void *)(a4 + 96) = *v39;
          *(void *)(a4 + 104) = v39[1];
LABEL_100:
          *(_DWORD *)float64x2_t v92 = 1124007936;
          memset(&v92[4], 0, 60);
LABEL_101:
          *(void *)&v92[56] = 0;
          memset(&v92[16], 0, 32);
          if (*(int *)&v92[4] >= 1)
          {
            uint64_t v49 = 0;
            uint64_t v50 = *(void *)&v92[64];
            do
              *(_DWORD *)(v50 + 4 * v49++) = 0;
            while (v49 < *(int *)&v92[4]);
          }
          if (*(unsigned char ***)&v92[72] != &v93) {
            j__free(*(void **)&v92[72]);
          }
          goto LABEL_106;
        }
      }
      *(void *)(a4 + 80) = *(void *)&v92[64];
      *(void *)(a4 + 88) = v39;
      *(void *)&unsigned char v92[64] = &v92[8];
      *(void *)&v92[72] = &v93;
      goto LABEL_100;
    }
    uint64_t v9 = *(void *)(a4 + 72);
    if (v9 && atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a4 + 16);
    }
    *(void *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    if (*(int *)(a4 + 20) >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void *)(a4 + 80);
      do
        *(_DWORD *)(v11 + 4 * v10++) = 0;
      while (v10 < *(int *)(a4 + 20));
    }
    int v12 = *(_DWORD *)&v92[20];
    long long v13 = *(_OWORD *)&v92[32];
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&v92[16];
    *(_OWORD *)(a4 + 32) = v13;
    long long v14 = *(_OWORD *)&v92[64];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v92[48];
    *(_OWORD *)(a4 + 64) = v14;
    long long v15 = *(void **)(a4 + 88);
    if (v15 == (void *)(a4 + 96))
    {
      long long v16 = v94;
      if (v12 <= 2) {
        goto LABEL_11;
      }
    }
    else
    {
      j__free(v15);
      *(void *)(a4 + 80) = a4 + 24;
      *(void *)(a4 + 88) = a4 + 96;
      long long v16 = v94;
      if (*(int *)&v92[20] <= 2)
      {
LABEL_11:
        *(void *)(a4 + 96) = *v16;
        *(void *)(a4 + 104) = v16[1];
LABEL_24:
        *(_DWORD *)&v92[16] = 1124007936;
        memset(&v92[20], 0, 60);
        goto LABEL_25;
      }
    }
    *(void *)(a4 + 80) = v93;
    *(void *)(a4 + 88) = v16;
    float64x2_t v93 = &v92[24];
    uint64_t v94 = v95;
    goto LABEL_24;
  }
  int v86 = 1124007936;
  memset(v87, 0, sizeof(v87));
  uint64_t v88 = &v87[1];
  int v89 = &v90;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  (*(void (**)(void, void *, int *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, &v86, 0xFFFFFFFFLL);
  sub_100293DB4((uint64_t)&v86, a3, (uint64_t)v82);
  int v76 = 1124007936;
  memset(v77, 0, sizeof(v77));
  uint64_t v78 = &v77[1];
  uint64_t v79 = &v80;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  LODWORD(v72[0]) = 1124007936;
  memset((char *)v72 + 4, 0, 48);
  v72[3] = 0u;
  float64x2_t v73 = (char *)v72 + 8;
  uint64_t v74 = v75;
  v75[0] = 0;
  v75[1] = 0;
  memset(v71, 0, sizeof(v71));
  sub_100290690((uint64_t)v92, (uint64_t)&qword_1004E09B0, 0, (uint64_t)v82, (uint64_t)&v76, (uint64_t)v72, v71, 1.0, 1.0);
  *(void *)a4 = *(void *)v92;
  *(_DWORD *)(a4 + 8) = *(_DWORD *)&v92[8];
  if (v92 != (unsigned char *)a4)
  {
    uint64_t v17 = *(void *)(a4 + 72);
    if (v17 && atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a4 + 16);
    }
    *(void *)(a4 + 72) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    if (*(int *)(a4 + 20) >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a4 + 80);
      do
        *(_DWORD *)(v19 + 4 * v18++) = 0;
      while (v18 < *(int *)(a4 + 20));
    }
    int v20 = *(_DWORD *)&v92[20];
    long long v21 = *(_OWORD *)&v92[32];
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&v92[16];
    *(_OWORD *)(a4 + 32) = v21;
    long long v22 = *(_OWORD *)&v92[64];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v92[48];
    *(_OWORD *)(a4 + 64) = v22;
    int v23 = *(void **)(a4 + 88);
    if (v23 == (void *)(a4 + 96))
    {
      long long v24 = v94;
      if (v20 <= 2) {
        goto LABEL_21;
      }
    }
    else
    {
      j__free(v23);
      *(void *)(a4 + 80) = a4 + 24;
      *(void *)(a4 + 88) = a4 + 96;
      int v23 = (void *)(a4 + 96);
      long long v24 = v94;
      if (*(int *)&v92[20] <= 2)
      {
LABEL_21:
        *int v23 = *v24;
        v23[1] = v24[1];
LABEL_62:
        *(_DWORD *)&v92[16] = 1124007936;
        memset(&v92[20], 0, 60);
        goto LABEL_63;
      }
    }
    *(void *)(a4 + 80) = v93;
    *(void *)(a4 + 88) = v24;
    float64x2_t v93 = &v92[24];
    uint64_t v94 = v95;
    goto LABEL_62;
  }
LABEL_63:
  sub_100287094(a4 + 112, (uint64_t)v96);
  sub_100287094(a4 + 208, (uint64_t)v97);
  long long v40 = v99;
  *(_OWORD *)(a4 + 304) = v98;
  *(_OWORD *)(a4 + 320) = v40;
  *(_OWORD *)(a4 + 336) = v100;
  sub_10000B6BC((uint64_t)v92);
  if (*((void *)&v72[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v72[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v72);
  }
  *((void *)&v72[3] + 1) = 0;
  memset(&v72[1], 0, 32);
  if (SDWORD1(v72[0]) >= 1)
  {
    uint64_t v41 = 0;
    float64x2_t v42 = v73;
    do
      *(_DWORD *)&v42[4 * v41++] = 0;
    while (v41 < SDWORD1(v72[0]));
  }
  if (v74 != v75) {
    j__free(v74);
  }
  if (*(void *)&v77[13] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v77[13] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v76);
  }
  *(void *)&v77[13] = 0;
  memset(&v77[3], 0, 32);
  if (v77[0] >= 1)
  {
    uint64_t v43 = 0;
    long long v44 = v78;
    do
      v44[v43++] = 0;
    while (v43 < v77[0]);
  }
  if (v79 != &v80) {
    j__free(v79);
  }
  if (*((void *)&v82[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v82[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v82);
  }
  *((void *)&v82[3] + 1) = 0;
  memset(&v82[1], 0, 32);
  if (SDWORD1(v82[0]) >= 1)
  {
    uint64_t v45 = 0;
    uint64_t v46 = v83;
    do
      *(_DWORD *)&v46[4 * v45++] = 0;
    while (v45 < SDWORD1(v82[0]));
  }
  if (v84 != v85) {
    j__free(v84);
  }
  if (*(void *)&v87[13] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v87[13] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)&v86);
  }
  *(void *)&v87[13] = 0;
  memset(&v87[3], 0, 32);
  if (v87[0] >= 1)
  {
    uint64_t v47 = 0;
    float64x2_t v48 = v88;
    do
      v48[v47++] = 0;
    while (v47 < v87[0]);
  }
  if (v89 != &v90) {
    j__free(v89);
  }
}

void sub_100287E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_100287E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_100287EC4(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v7[0]) = 1124007936;
  memset((char *)v7 + 4, 0, 32);
  memset((char *)&v7[4] + 4, 0, 28);
  int v8 = &v7[1];
  uint64_t v9 = v10;
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v7, 0xFFFFFFFFLL);
  uint64_t v19 = 0;
  int v17 = 16842752;
  uint64_t v18 = a3;
  uint64_t v16 = 0;
  int v14 = 16842752;
  long long v15 = v7;
  int v11 = 33619968;
  uint64_t v12 = a3;
  uint64_t v13 = 0;
  uint64_t v4 = sub_1002A02C4();
  sub_100211CEC((uint64_t)&v17, (uint64_t)&v14, (uint64_t)&v11, (uint64_t)v4, -1);
  if (v7[7] && atomic_fetch_add((atomic_uint *volatile)(v7[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v7);
  }
  v7[7] = 0;
  memset(&v7[2], 0, 32);
  if (SHIDWORD(v7[0]) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v8;
    do
      *((_DWORD *)v6 + v5++) = 0;
    while (v5 < SHIDWORD(v7[0]));
  }
  if (v9 != v10) {
    j__free(v9);
  }
}

void sub_10028800C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100288020(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v7[0]) = 1124007936;
  memset((char *)v7 + 4, 0, 32);
  memset((char *)&v7[4] + 4, 0, 28);
  int v8 = &v7[1];
  uint64_t v9 = v10;
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v7, 0xFFFFFFFFLL);
  uint64_t v19 = 0;
  int v17 = 16842752;
  uint64_t v18 = a3;
  uint64_t v16 = 0;
  int v14 = 16842752;
  long long v15 = v7;
  int v11 = 33619968;
  uint64_t v12 = a3;
  uint64_t v13 = 0;
  uint64_t v4 = sub_1002A02C4();
  sub_100213E80((uint64_t)&v17, (uint64_t)&v14, (uint64_t)&v11, (uint64_t)v4, -1);
  if (v7[7] && atomic_fetch_add((atomic_uint *volatile)(v7[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v7);
  }
  v7[7] = 0;
  memset(&v7[2], 0, 32);
  if (SHIDWORD(v7[0]) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v8;
    do
      *((_DWORD *)v6 + v5++) = 0;
    while (v5 < SHIDWORD(v7[0]));
  }
  if (v9 != v10) {
    j__free(v9);
  }
}

void sub_100288168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028817C(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v8[0]) = 1124007936;
  memset((char *)v8 + 4, 0, 32);
  memset((char *)&v8[4] + 4, 0, 28);
  uint64_t v9 = &v8[1];
  uint64_t v10 = v11;
  v11[0] = 0;
  v11[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v8, 0xFFFFFFFFLL);
  uint64_t v27 = 0;
  int v25 = 16842752;
  uint64_t v26 = a3;
  uint64_t v24 = 0;
  int v22 = 16842752;
  int v23 = v8;
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 48);
  v15[3] = 0u;
  uint64_t v16 = (char *)v15 + 8;
  int v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v21 = 0;
  int v19 = 16842752;
  int v20 = v15;
  int v12 = 33619968;
  uint64_t v13 = a3;
  uint64_t v14 = 0;
  sub_10026D688((uint64_t)&v25, (uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v12, 0, 1.0, 0.0);
  if (*((void *)&v15[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v15[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v15);
  }
  *((void *)&v15[3] + 1) = 0;
  memset(&v15[1], 0, 32);
  if (SDWORD1(v15[0]) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v16;
    do
      *(_DWORD *)&v5[4 * v4++] = 0;
    while (v4 < SDWORD1(v15[0]));
  }
  if (v17 != v18) {
    j__free(v17);
  }
  if (v8[7] && atomic_fetch_add((atomic_uint *volatile)(v8[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v8);
  }
  v8[7] = 0;
  memset(&v8[2], 0, 32);
  if (SHIDWORD(v8[0]) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v9;
    do
      *((_DWORD *)v7 + v6++) = 0;
    while (v6 < SHIDWORD(v8[0]));
  }
  if (v10 != v11) {
    j__free(v10);
  }
}

void sub_10028836C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_100288388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028839C(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v6[0]) = 1124007936;
  memset((char *)v6 + 4, 0, 32);
  memset((char *)&v6[4] + 4, 0, 28);
  uint64_t v7 = &v6[1];
  int v8 = v9;
  v9[0] = 0;
  v9[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v6, 0xFFFFFFFFLL);
  uint64_t v18 = 0;
  int v16 = 16842752;
  uint64_t v17 = a3;
  uint64_t v15 = 0;
  int v13 = 16842752;
  uint64_t v14 = v6;
  int v10 = 33619968;
  uint64_t v11 = a3;
  uint64_t v12 = 0;
  sub_100214068((uint64_t)&v16, (uint64_t)&v13, (uint64_t)&v10, -1, 1.0);
  if (v6[7] && atomic_fetch_add((atomic_uint *volatile)(v6[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v6);
  }
  v6[7] = 0;
  memset(&v6[2], 0, 32);
  if (SHIDWORD(v6[0]) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v7;
    do
      *((_DWORD *)v5 + v4++) = 0;
    while (v4 < SHIDWORD(v6[0]));
  }
  if (v8 != v9) {
    j__free(v8);
  }
}

void sub_1002884E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002884F4(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v7[0]) = 1124007936;
  memset((char *)v7 + 4, 0, 32);
  memset((char *)&v7[4] + 4, 0, 28);
  int v8 = &v7[1];
  uint64_t v9 = v10;
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v7, 0xFFFFFFFFLL);
  uint64_t v19 = 0;
  int v17 = 16842752;
  uint64_t v18 = a3;
  uint64_t v16 = 0;
  int v14 = 16842752;
  uint64_t v15 = v7;
  int v11 = 33619968;
  uint64_t v12 = a3;
  uint64_t v13 = 0;
  uint64_t v4 = sub_1002A02C4();
  sub_100210174((uint64_t)&v17, (uint64_t)&v14, (uint64_t)&v11, (uint64_t)v4);
  if (v7[7] && atomic_fetch_add((atomic_uint *volatile)(v7[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v7);
  }
  v7[7] = 0;
  memset(&v7[2], 0, 32);
  if (SHIDWORD(v7[0]) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v8;
    do
      *((_DWORD *)v6 + v5++) = 0;
    while (v5 < SHIDWORD(v7[0]));
  }
  if (v9 != v10) {
    j__free(v9);
  }
}

void sub_100288638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028864C(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v7[0]) = 1124007936;
  memset((char *)v7 + 4, 0, 32);
  memset((char *)&v7[4] + 4, 0, 28);
  int v8 = &v7[1];
  uint64_t v9 = v10;
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v7, 0xFFFFFFFFLL);
  uint64_t v19 = 0;
  int v17 = 16842752;
  uint64_t v18 = a3;
  uint64_t v16 = 0;
  int v14 = 16842752;
  uint64_t v15 = v7;
  int v11 = 33619968;
  uint64_t v12 = a3;
  uint64_t v13 = 0;
  uint64_t v4 = sub_1002A02C4();
  sub_100211840((uint64_t)&v17, (uint64_t)&v14, (uint64_t)&v11, (uint64_t)v4);
  if (v7[7] && atomic_fetch_add((atomic_uint *volatile)(v7[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v7);
  }
  v7[7] = 0;
  memset(&v7[2], 0, 32);
  if (SHIDWORD(v7[0]) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v8;
    do
      *((_DWORD *)v6 + v5++) = 0;
    while (v5 < SHIDWORD(v7[0]));
  }
  if (v9 != v10) {
    j__free(v9);
  }
}

void sub_100288790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002887A4(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v7[0]) = 1124007936;
  memset((char *)v7 + 4, 0, 32);
  memset((char *)&v7[4] + 4, 0, 28);
  int v8 = &v7[1];
  uint64_t v9 = v10;
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v7, 0xFFFFFFFFLL);
  uint64_t v19 = 0;
  int v17 = 16842752;
  uint64_t v18 = a3;
  uint64_t v16 = 0;
  int v14 = 16842752;
  uint64_t v15 = v7;
  int v11 = 33619968;
  uint64_t v12 = a3;
  uint64_t v13 = 0;
  uint64_t v4 = sub_1002A02C4();
  sub_1002118E8((uint64_t)&v17, (uint64_t)&v14, (uint64_t)&v11, (uint64_t)v4);
  if (v7[7] && atomic_fetch_add((atomic_uint *volatile)(v7[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v7);
  }
  v7[7] = 0;
  memset(&v7[2], 0, 32);
  if (SHIDWORD(v7[0]) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v8;
    do
      *((_DWORD *)v6 + v5++) = 0;
    while (v5 < SHIDWORD(v7[0]));
  }
  if (v9 != v10) {
    j__free(v9);
  }
}

void sub_1002888E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002888FC(uint64_t a1, void *a2, float64x2_t *a3, uint64_t a4)
{
  sub_1002D6AE8(v42, &off_100495080);
  if (*(void *)&a3->f64[0] != a1)
  {
    (*(void (**)(void, void *, float64x2_t *, uint64_t))(**(void **)&a3->f64[0] + 104))(*(void *)&a3->f64[0], a2, a3, a4);
    goto LABEL_59;
  }
  float64x2_t v40 = 0u;
  float64x2_t v41 = 0u;
  *(_DWORD *)long long v36 = 1124007936;
  memset(&v36[4], 0, 60);
  long long v37 = &v36[8];
  uint64_t v38 = v39;
  v39[0] = 0;
  v39[1] = 0;
  *(_DWORD *)uint64_t v32 = 1124007936;
  memset(&v32[4], 0, 60);
  uint64_t v33 = &v32[8];
  uint64_t v34 = v35;
  v35[0] = 0;
  v35[1] = 0;
  if ((uint64_t *)*a2 != &qword_1004E09B8 || a2[16] && *((double *)a2 + 39) != 0.0)
  {
    double v8 = 1.0;
    (*(void (**)(void, void *, unsigned char *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v36, 0xFFFFFFFFLL);
    float64_t v9 = a3->f64[0];
    if (*(uint64_t **)&a3->f64[0] != &qword_1004E09B8) {
      goto LABEL_42;
    }
    goto LABEL_7;
  }
  int v14 = a2 + 2;
  if (v36 != (unsigned char *)(a2 + 2))
  {
    uint64_t v15 = a2[9];
    if (v15)
    {
      atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
      if (*(void *)&v36[56])
      {
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v36[56] + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)v36);
        }
      }
    }
    *(void *)&v36[56] = 0;
    memset(&v36[16], 0, 32);
    if (*(uint64_t *)v36 <= 0)
    {
      *(_DWORD *)long long v36 = *v14;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = v37;
      do
        *(_DWORD *)&v17[4 * v16++] = 0;
      while (v16 < *(int *)&v36[4]);
      *(_DWORD *)long long v36 = *v14;
      if (*(int *)&v36[4] > 2) {
        goto LABEL_39;
      }
    }
    if (*((int *)a2 + 5) <= 2)
    {
      *(_DWORD *)&unsigned int v36[4] = *((_DWORD *)a2 + 5);
      *(void *)&v36[8] = a2[3];
      int v23 = (void *)a2[11];
      uint64_t v24 = v38;
      *(void *)uint64_t v38 = *v23;
      v24[1] = v23[1];
LABEL_40:
      long long v25 = *((_OWORD *)a2 + 3);
      *(_OWORD *)&v36[16] = *((_OWORD *)a2 + 2);
      *(_OWORD *)&v36[32] = v25;
      uint64_t v26 = a2[9];
      *(void *)&v36[48] = a2[8];
      *(void *)&v36[56] = v26;
      goto LABEL_41;
    }
LABEL_39:
    sub_1002931A8((uint64_t)v36, (uint64_t)(a2 + 2));
    goto LABEL_40;
  }
LABEL_41:
  double v8 = *((double *)a2 + 38);
  float64x2_t v27 = *((float64x2_t *)a2 + 21);
  float64x2_t v40 = *((float64x2_t *)a2 + 20);
  float64x2_t v41 = v27;
  float64_t v9 = a3->f64[0];
  if (*(uint64_t **)&a3->f64[0] != &qword_1004E09B8) {
    goto LABEL_42;
  }
LABEL_7:
  if (!*(void *)&a3[8].f64[0] || a3[19].f64[1] == 0.0)
  {
    int v10 = a3 + 1;
    if (v32 == (unsigned char *)&a3[1])
    {
LABEL_35:
      double v21 = a3[19].f64[0];
      float64x2_t v22 = vaddq_f64(a3[21], v41);
      float64x2_t v40 = vaddq_f64(a3[20], v40);
      float64x2_t v41 = v22;
      goto LABEL_43;
    }
    float64_t v11 = a3[4].f64[1];
    if (v11 != 0.0) {
      atomic_fetch_add((atomic_uint *volatile)(*(void *)&v11 + 20), 1u);
    }
    if (*(void *)&v32[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v32[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v32);
    }
    *(void *)&v32[56] = 0;
    memset(&v32[16], 0, 32);
    if (*(uint64_t *)v32 <= 0)
    {
      *(_DWORD *)uint64_t v32 = LODWORD(v10->f64[0]);
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = v33;
      do
        *(_DWORD *)&v13[4 * v12++] = 0;
      while (v12 < *(int *)&v32[4]);
      *(_DWORD *)uint64_t v32 = LODWORD(v10->f64[0]);
      if (*(int *)&v32[4] > 2) {
        goto LABEL_33;
      }
    }
    if (SHIDWORD(a3[1].f64[0]) <= 2)
    {
      *(_DWORD *)&v32[4] = HIDWORD(a3[1].f64[0]);
      *(float64_t *)&v32[8] = a3[1].f64[1];
      float64_t v18 = a3[5].f64[1];
      uint64_t v19 = v34;
      *(void *)uint64_t v34 = **(void **)&v18;
      v19[1] = *(void *)(*(void *)&v18 + 8);
LABEL_34:
      float64x2_t v20 = a3[3];
      *(float64x2_t *)&v32[16] = a3[2];
      *(float64x2_t *)&v32[32] = v20;
      *(float64x2_t *)&v32[48] = a3[4];
      goto LABEL_35;
    }
LABEL_33:
    sub_1002931A8((uint64_t)v32, (uint64_t)&a3[1]);
    goto LABEL_34;
  }
LABEL_42:
  double v21 = 1.0;
  (*(void (**)(float64_t, float64x2_t *, unsigned char *, uint64_t))(**(void **)&v9 + 24))(COERCE_FLOAT64_T(*(void *)&v9), a3, v32, 0xFFFFFFFFLL);
LABEL_43:
  sub_100288DF0(a4, (uint64_t)v36, (uint64_t)v32, &v40, v8, v21);
  if (*(void *)&v32[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v32[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v32);
  }
  *(void *)&v32[56] = 0;
  memset(&v32[16], 0, 32);
  if (*(int *)&v32[4] >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v33;
    do
      *(_DWORD *)&v29[4 * v28++] = 0;
    while (v28 < *(int *)&v32[4]);
  }
  if (v34 != v35) {
    j__free(v34);
  }
  if (*(void *)&v36[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v36[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v36);
  }
  *(void *)&v36[56] = 0;
  memset(&v36[16], 0, 32);
  if (*(int *)&v36[4] >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v37;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < *(int *)&v36[4]);
  }
  if (v38 != v39) {
    j__free(v38);
  }
LABEL_59:
  if (v43) {
    sub_1002D6888(v42);
  }
}

void sub_100288DB8(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_100288DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 96);
  _Unwind_Resume(a1);
}

void sub_100288DF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6)
{
  LODWORD(v18[0]) = 1124007936;
  memset((char *)v18 + 4, 0, 48);
  v18[3] = 0u;
  uint64_t v19 = (char *)v18 + 8;
  float64x2_t v20 = v21;
  v21[0] = 0;
  v21[1] = 0;
  sub_100290690((uint64_t)&v22, (uint64_t)&qword_1004E09B8, 0, a2, a3, (uint64_t)v18, a4, a5, a6);
  *(void *)a1 = v22;
  *(_DWORD *)(a1 + 8) = v23;
  if (&v22 != (uint64_t *)a1)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7 && atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v9 + 4 * v8++) = 0;
      while (v8 < *(int *)(a1 + 20));
    }
    int v10 = *(_DWORD *)&v24[4];
    long long v11 = *(_OWORD *)&v24[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v24;
    *(_OWORD *)(a1 + 32) = v11;
    long long v12 = *(_OWORD *)&v24[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v24[32];
    *(_OWORD *)(a1 + 64) = v12;
    uint64_t v13 = *(uint64_t **)(a1 + 88);
    if (v13 == (uint64_t *)(a1 + 96))
    {
      int v14 = v26;
      if (v10 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v13);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      uint64_t v13 = (uint64_t *)(a1 + 96);
      int v14 = v26;
      if (*(int *)&v24[4] <= 2)
      {
LABEL_10:
        *uint64_t v13 = *v14;
        v13[1] = v14[1];
LABEL_13:
        *(_DWORD *)uint64_t v24 = 1124007936;
        memset(&v24[4], 0, 60);
        goto LABEL_14;
      }
    }
    *(void *)(a1 + 80) = v25;
    *(void *)(a1 + 88) = v14;
    long long v25 = &v24[8];
    uint64_t v26 = &v27;
    goto LABEL_13;
  }
LABEL_14:
  sub_100287094(a1 + 112, (uint64_t)&v28);
  sub_100287094(a1 + 208, (uint64_t)v29);
  long long v15 = v29[7];
  *(_OWORD *)(a1 + 304) = v29[6];
  *(_OWORD *)(a1 + 320) = v15;
  *(_OWORD *)(a1 + 336) = v29[8];
  sub_10000B6BC((uint64_t)&v22);
  if (*((void *)&v18[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v18[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v18);
  }
  *((void *)&v18[3] + 1) = 0;
  memset(&v18[1], 0, 32);
  if (SDWORD1(v18[0]) >= 1)
  {
    uint64_t v16 = 0;
    int v17 = v19;
    do
      *(_DWORD *)&v17[4 * v16++] = 0;
    while (v16 < SDWORD1(v18[0]));
  }
  if (v20 != v21) {
    j__free(v20);
  }
}

void sub_10028902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100289040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_10028905C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  sub_1002D6AE8(v19, &off_1004950A0);
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 32);
  memset((char *)&v15[4] + 4, 0, 28);
  uint64_t v16 = &v15[1];
  int v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v15, 0xFFFFFFFFLL);
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  v11[3] = 0u;
  long long v12 = (char *)v11 + 8;
  uint64_t v13 = v14;
  v14[0] = 0;
  v14[1] = 0;
  sub_100288DF0(a4, (uint64_t)v15, (uint64_t)v11, a3, 1.0, 0.0);
  if (*((void *)&v11[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v11[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v11);
  }
  *((void *)&v11[3] + 1) = 0;
  memset(&v11[1], 0, 32);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v12;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v11[0]));
  }
  if (v13 != v14) {
    j__free(v13);
  }
  if (v15[7] && atomic_fetch_add((atomic_uint *volatile)(v15[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v15);
  }
  v15[7] = 0;
  memset(&v15[2], 0, 32);
  if (SHIDWORD(v15[0]) >= 1)
  {
    uint64_t v9 = 0;
    int v10 = v16;
    do
      *((_DWORD *)v10 + v9++) = 0;
    while (v9 < SHIDWORD(v15[0]));
  }
  if (v17 != v18) {
    j__free(v17);
  }
  if (v20) {
    sub_1002D6888(v19);
  }
}

void sub_100289244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_100289268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_100289284(uint64_t a1, void *a2, float64x2_t *a3, uint64_t a4)
{
  sub_1002D6AE8(v42, &off_1004950C0);
  if (*(void *)&a3->f64[0] != a1)
  {
    (*(void (**)(void, void *, float64x2_t *, uint64_t))(**(void **)&a3->f64[0] + 120))(*(void *)&a3->f64[0], a2, a3, a4);
    goto LABEL_59;
  }
  float64x2_t v40 = 0u;
  float64x2_t v41 = 0u;
  *(_DWORD *)long long v36 = 1124007936;
  memset(&v36[4], 0, 60);
  long long v37 = &v36[8];
  uint64_t v38 = v39;
  v39[0] = 0;
  v39[1] = 0;
  *(_DWORD *)uint64_t v32 = 1124007936;
  memset(&v32[4], 0, 60);
  uint64_t v33 = &v32[8];
  uint64_t v34 = v35;
  v35[0] = 0;
  v35[1] = 0;
  if ((uint64_t *)*a2 != &qword_1004E09B8 || a2[16] && *((double *)a2 + 39) != 0.0)
  {
    double v8 = 1.0;
    (*(void (**)(void, void *, unsigned char *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v36, 0xFFFFFFFFLL);
    float64_t v9 = a3->f64[0];
    if (*(uint64_t **)&a3->f64[0] != &qword_1004E09B8) {
      goto LABEL_42;
    }
    goto LABEL_7;
  }
  int v14 = a2 + 2;
  if (v36 != (unsigned char *)(a2 + 2))
  {
    uint64_t v15 = a2[9];
    if (v15)
    {
      atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
      if (*(void *)&v36[56])
      {
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v36[56] + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)v36);
        }
      }
    }
    *(void *)&v36[56] = 0;
    memset(&v36[16], 0, 32);
    if (*(uint64_t *)v36 <= 0)
    {
      *(_DWORD *)long long v36 = *v14;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = v37;
      do
        *(_DWORD *)&v17[4 * v16++] = 0;
      while (v16 < *(int *)&v36[4]);
      *(_DWORD *)long long v36 = *v14;
      if (*(int *)&v36[4] > 2) {
        goto LABEL_39;
      }
    }
    if (*((int *)a2 + 5) <= 2)
    {
      *(_DWORD *)&unsigned int v36[4] = *((_DWORD *)a2 + 5);
      *(void *)&v36[8] = a2[3];
      int v23 = (void *)a2[11];
      uint64_t v24 = v38;
      *(void *)uint64_t v38 = *v23;
      v24[1] = v23[1];
LABEL_40:
      long long v25 = *((_OWORD *)a2 + 3);
      *(_OWORD *)&v36[16] = *((_OWORD *)a2 + 2);
      *(_OWORD *)&v36[32] = v25;
      uint64_t v26 = a2[9];
      *(void *)&v36[48] = a2[8];
      *(void *)&v36[56] = v26;
      goto LABEL_41;
    }
LABEL_39:
    sub_1002931A8((uint64_t)v36, (uint64_t)(a2 + 2));
    goto LABEL_40;
  }
LABEL_41:
  double v8 = *((double *)a2 + 38);
  float64x2_t v27 = *((float64x2_t *)a2 + 21);
  float64x2_t v40 = *((float64x2_t *)a2 + 20);
  float64x2_t v41 = v27;
  float64_t v9 = a3->f64[0];
  if (*(uint64_t **)&a3->f64[0] != &qword_1004E09B8) {
    goto LABEL_42;
  }
LABEL_7:
  if (!*(void *)&a3[8].f64[0] || a3[19].f64[1] == 0.0)
  {
    int v10 = a3 + 1;
    if (v32 == (unsigned char *)&a3[1])
    {
LABEL_35:
      double v21 = -a3[19].f64[0];
      float64x2_t v22 = vsubq_f64(v41, a3[21]);
      float64x2_t v40 = vsubq_f64(v40, a3[20]);
      float64x2_t v41 = v22;
      goto LABEL_43;
    }
    float64_t v11 = a3[4].f64[1];
    if (v11 != 0.0) {
      atomic_fetch_add((atomic_uint *volatile)(*(void *)&v11 + 20), 1u);
    }
    if (*(void *)&v32[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v32[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v32);
    }
    *(void *)&v32[56] = 0;
    memset(&v32[16], 0, 32);
    if (*(uint64_t *)v32 <= 0)
    {
      *(_DWORD *)uint64_t v32 = LODWORD(v10->f64[0]);
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = v33;
      do
        *(_DWORD *)&v13[4 * v12++] = 0;
      while (v12 < *(int *)&v32[4]);
      *(_DWORD *)uint64_t v32 = LODWORD(v10->f64[0]);
      if (*(int *)&v32[4] > 2) {
        goto LABEL_33;
      }
    }
    if (SHIDWORD(a3[1].f64[0]) <= 2)
    {
      *(_DWORD *)&v32[4] = HIDWORD(a3[1].f64[0]);
      *(float64_t *)&v32[8] = a3[1].f64[1];
      float64_t v18 = a3[5].f64[1];
      uint64_t v19 = v34;
      *(void *)uint64_t v34 = **(void **)&v18;
      v19[1] = *(void *)(*(void *)&v18 + 8);
LABEL_34:
      float64x2_t v20 = a3[3];
      *(float64x2_t *)&v32[16] = a3[2];
      *(float64x2_t *)&v32[32] = v20;
      *(float64x2_t *)&v32[48] = a3[4];
      goto LABEL_35;
    }
LABEL_33:
    sub_1002931A8((uint64_t)v32, (uint64_t)&a3[1]);
    goto LABEL_34;
  }
LABEL_42:
  double v21 = -1.0;
  (*(void (**)(float64_t, float64x2_t *, unsigned char *, uint64_t))(**(void **)&v9 + 24))(COERCE_FLOAT64_T(*(void *)&v9), a3, v32, 0xFFFFFFFFLL);
LABEL_43:
  sub_100288DF0(a4, (uint64_t)v36, (uint64_t)v32, &v40, v8, v21);
  if (*(void *)&v32[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v32[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v32);
  }
  *(void *)&v32[56] = 0;
  memset(&v32[16], 0, 32);
  if (*(int *)&v32[4] >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v33;
    do
      *(_DWORD *)&v29[4 * v28++] = 0;
    while (v28 < *(int *)&v32[4]);
  }
  if (v34 != v35) {
    j__free(v34);
  }
  if (*(void *)&v36[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v36[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v36);
  }
  *(void *)&v36[56] = 0;
  memset(&v36[16], 0, 32);
  if (*(int *)&v36[4] >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v37;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < *(int *)&v36[4]);
  }
  if (v38 != v39) {
    j__free(v38);
  }
LABEL_59:
  if (v43) {
    sub_1002D6888(v42);
  }
}

void sub_100289744(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_100289758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 96);
  _Unwind_Resume(a1);
}

void sub_10028977C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  sub_1002D6AE8(v19, &off_1004950E0);
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 32);
  memset((char *)&v15[4] + 4, 0, 28);
  uint64_t v16 = &v15[1];
  int v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a3 + 24))(*a3, a3, v15, 0xFFFFFFFFLL);
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  v11[3] = 0u;
  uint64_t v12 = (char *)v11 + 8;
  uint64_t v13 = v14;
  v14[0] = 0;
  v14[1] = 0;
  sub_100288DF0(a4, (uint64_t)v15, (uint64_t)v11, a2, -1.0, 0.0);
  if (*((void *)&v11[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v11[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v11);
  }
  *((void *)&v11[3] + 1) = 0;
  memset(&v11[1], 0, 32);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v7 = 0;
    double v8 = v12;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v11[0]));
  }
  if (v13 != v14) {
    j__free(v13);
  }
  if (v15[7] && atomic_fetch_add((atomic_uint *volatile)(v15[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v15);
  }
  v15[7] = 0;
  memset(&v15[2], 0, 32);
  if (SHIDWORD(v15[0]) >= 1)
  {
    uint64_t v9 = 0;
    int v10 = v16;
    do
      *((_DWORD *)v10 + v9++) = 0;
    while (v9 < SHIDWORD(v15[0]));
  }
  if (v17 != v18) {
    j__free(v17);
  }
  if (v20) {
    sub_1002D6888(v19);
  }
}

void sub_100289964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_100289988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_1002899A4(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  sub_1002D6AE8(v55, &off_100495100);
  if ((uint64_t *)*a3 != a1)
  {
    (*(void (**)(void, uint64_t, void *, uint64_t, double))(*(void *)*a3 + 136))(*a3, a2, a3, a4, a5);
    goto LABEL_87;
  }
  *(_DWORD *)uint64_t v51 = 1124007936;
  memset(&v51[4], 0, 60);
  uint64_t v52 = &v51[8];
  uint64_t v53 = v54;
  v54[0] = 0;
  v54[1] = 0;
  *(_DWORD *)uint64_t v47 = 1124007936;
  memset(&v47[4], 0, 60);
  float64x2_t v48 = &v47[8];
  uint64_t v49 = v50;
  v50[0] = 0;
  v50[1] = 0;
  int v10 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 != &qword_1004E09C0 || *(_DWORD *)(a2 + 8) != 47)
  {
    if (v10 != &qword_1004E09B8
      || *(void *)(a2 + 128) && *(double *)(a2 + 312) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) != 0)
    {
      goto LABEL_17;
    }
    uint64_t v16 = (_DWORD *)(a2 + 16);
    if (v51 == (unsigned char *)(a2 + 16))
    {
LABEL_64:
      a5 = *(double *)(a2 + 304) * a5;
      float64_t v11 = (uint64_t *)*a3;
      if ((uint64_t *)*a3 != &qword_1004E09B8) {
        goto LABEL_18;
      }
LABEL_65:
      if (a3[16] && *((double *)a3 + 39) != 0.0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
      {
        goto LABEL_68;
      }
      long long v36 = a3 + 2;
      if (v47 == (unsigned char *)(a3 + 2))
      {
LABEL_106:
        a5 = a5 * *((double *)a3 + 38);
        goto LABEL_69;
      }
      uint64_t v37 = a3[9];
      if (v37) {
        atomic_fetch_add((atomic_uint *volatile)(v37 + 20), 1u);
      }
      if (*(void *)&v47[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v47[56] + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)v47);
      }
      *(void *)&v47[56] = 0;
      memset(&v47[16], 0, 32);
      if (*(uint64_t *)v47 <= 0)
      {
        *(_DWORD *)uint64_t v47 = *v36;
      }
      else
      {
        uint64_t v38 = 0;
        int v39 = v48;
        do
          *(_DWORD *)&v39[4 * v38++] = 0;
        while (v38 < *(int *)&v47[4]);
        *(_DWORD *)uint64_t v47 = *v36;
        if (*(int *)&v47[4] > 2) {
          goto LABEL_104;
        }
      }
      if (*((int *)a3 + 5) <= 2)
      {
        *(_DWORD *)&unsigned char v47[4] = *((_DWORD *)a3 + 5);
        *(void *)&v47[8] = a3[3];
        float64x2_t v40 = (void *)a3[11];
        float64x2_t v41 = v49;
        *(void *)uint64_t v49 = *v40;
        v41[1] = v40[1];
LABEL_105:
        long long v42 = *((_OWORD *)a3 + 3);
        *(_OWORD *)&v47[16] = *((_OWORD *)a3 + 2);
        *(_OWORD *)&v47[32] = v42;
        *(_OWORD *)&v47[48] = *((_OWORD *)a3 + 4);
        goto LABEL_106;
      }
LABEL_104:
      sub_1002931A8((uint64_t)v47, (uint64_t)(a3 + 2));
      goto LABEL_105;
    }
    uint64_t v17 = *(void *)(a2 + 72);
    if (v17)
    {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
      if (*(void *)&v51[56])
      {
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v51[56] + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)v51);
        }
      }
    }
    *(void *)&v51[56] = 0;
    memset(&v51[16], 0, 32);
    if (*(uint64_t *)v51 <= 0)
    {
      *(_DWORD *)uint64_t v51 = *v16;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = v52;
      do
        *(_DWORD *)&v19[4 * v18++] = 0;
      while (v18 < *(int *)&v51[4]);
      *(_DWORD *)uint64_t v51 = *v16;
      if (*(int *)&v51[4] > 2) {
        goto LABEL_62;
      }
    }
    if (*(int *)(a2 + 20) <= 2)
    {
      *(_DWORD *)&v51[4] = *(_DWORD *)(a2 + 20);
      *(void *)&v51[8] = *(void *)(a2 + 24);
      uint64_t v28 = *(void **)(a2 + 88);
      uint64_t v29 = v53;
      *(void *)uint64_t v53 = *v28;
      v29[1] = v28[1];
LABEL_63:
      long long v30 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v51[32] = v30;
      uint64_t v31 = *(void *)(a2 + 72);
      *(void *)&v51[48] = *(void *)(a2 + 64);
      *(void *)&v51[56] = v31;
      goto LABEL_64;
    }
LABEL_62:
    sub_1002931A8((uint64_t)v51, a2 + 16);
    goto LABEL_63;
  }
  if (!*(void *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
  {
    if (a1 != &qword_1004E09B8
      || a3[16] && *((double *)a3 + 39) != 0.0
      || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
    {
      (*(void (**)(uint64_t *, void *, unsigned char *, uint64_t))(*a1 + 24))(a1, a3, v47, 0xFFFFFFFFLL);
LABEL_12:
      sub_10028A1A8(a4, 47, (uint64_t)v47, a2 + 16, a5 / *(double *)(a2 + 304));
      goto LABEL_71;
    }
    a5 = *((double *)a3 + 38) * a5;
    uint64_t v24 = a3 + 2;
    if (v47 == (unsigned char *)(a3 + 2)) {
      goto LABEL_12;
    }
    uint64_t v25 = a3[9];
    if (v25)
    {
      atomic_fetch_add((atomic_uint *volatile)(v25 + 20), 1u);
      if (*(void *)&v47[56])
      {
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v47[56] + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)v47);
        }
      }
    }
    *(void *)&v47[56] = 0;
    memset(&v47[16], 0, 32);
    if (*(uint64_t *)v47 <= 0)
    {
      *(_DWORD *)uint64_t v47 = *v24;
    }
    else
    {
      uint64_t v26 = 0;
      float64x2_t v27 = v48;
      do
        *(_DWORD *)&v27[4 * v26++] = 0;
      while (v26 < *(int *)&v47[4]);
      *(_DWORD *)uint64_t v47 = *v24;
      if (*(int *)&v47[4] > 2) {
        goto LABEL_110;
      }
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&unsigned char v47[4] = *((_DWORD *)a3 + 5);
      *(void *)&v47[8] = a3[3];
      int v43 = (void *)a3[11];
      long long v44 = v49;
      *(void *)uint64_t v49 = *v43;
      v44[1] = v43[1];
LABEL_111:
      long long v45 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v47[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v47[32] = v45;
      uint64_t v46 = a3[9];
      *(void *)&v47[48] = a3[8];
      *(void *)&v47[56] = v46;
      goto LABEL_12;
    }
LABEL_110:
    sub_1002931A8((uint64_t)v47, (uint64_t)(a3 + 2));
    goto LABEL_111;
  }
LABEL_17:
  (*(void (**)(uint64_t *, uint64_t, unsigned char *, uint64_t))(*v10 + 24))(v10, a2, v51, 0xFFFFFFFFLL);
  float64_t v11 = (uint64_t *)*a3;
  if ((uint64_t *)*a3 == &qword_1004E09B8) {
    goto LABEL_65;
  }
LABEL_18:
  if (v11 != &qword_1004E09C0 || *((_DWORD *)a3 + 2) != 47 || a3[16] && *((double *)a3 + 39) != 0.0)
  {
LABEL_68:
    (*(void (**)(uint64_t *, void *, unsigned char *, uint64_t))(*v11 + 24))(v11, a3, v47, 0xFFFFFFFFLL);
LABEL_69:
    int v23 = 42;
    goto LABEL_70;
  }
  uint64_t v12 = a3 + 2;
  if (v47 != (unsigned char *)(a3 + 2))
  {
    uint64_t v13 = a3[9];
    if (v13) {
      atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 1u);
    }
    if (*(void *)&v47[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v47[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v47);
    }
    *(void *)&v47[56] = 0;
    memset(&v47[16], 0, 32);
    if (*(uint64_t *)v47 <= 0)
    {
      *(_DWORD *)uint64_t v47 = *v12;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = v48;
      do
        *(_DWORD *)&v15[4 * v14++] = 0;
      while (v14 < *(int *)&v47[4]);
      *(_DWORD *)uint64_t v47 = *v12;
      if (*(int *)&v47[4] > 2) {
        goto LABEL_46;
      }
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&unsigned char v47[4] = *((_DWORD *)a3 + 5);
      *(void *)&v47[8] = a3[3];
      int v20 = (void *)a3[11];
      uint64_t v21 = v49;
      *(void *)uint64_t v49 = *v20;
      v21[1] = v20[1];
LABEL_47:
      long long v22 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v47[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v47[32] = v22;
      *(_OWORD *)&v47[48] = *((_OWORD *)a3 + 4);
      goto LABEL_48;
    }
LABEL_46:
    sub_1002931A8((uint64_t)v47, (uint64_t)(a3 + 2));
    goto LABEL_47;
  }
LABEL_48:
  int v23 = 47;
  a5 = a5 / *((double *)a3 + 38);
LABEL_70:
  sub_10028A1A8(a4, v23, (uint64_t)v51, (uint64_t)v47, a5);
LABEL_71:
  if (*(void *)&v47[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v47[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v47);
  }
  *(void *)&v47[56] = 0;
  memset(&v47[16], 0, 32);
  if (*(int *)&v47[4] >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = v48;
    do
      *(_DWORD *)&v33[4 * v32++] = 0;
    while (v32 < *(int *)&v47[4]);
  }
  if (v49 != v50) {
    j__free(v49);
  }
  if (*(void *)&v51[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v51[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v51);
  }
  *(void *)&v51[56] = 0;
  memset(&v51[16], 0, 32);
  if (*(int *)&v51[4] >= 1)
  {
    uint64_t v34 = 0;
    int v35 = v52;
    do
      *(_DWORD *)&v35[4 * v34++] = 0;
    while (v34 < *(int *)&v51[4]);
  }
  if (v53 != v54) {
    j__free(v53);
  }
LABEL_87:
  if (v56) {
    sub_1002D6888(v55);
  }
}

void sub_10028A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 112);
  _Unwind_Resume(a1);
}

void sub_10028A1A8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, double a5)
{
  LODWORD(v20[0]) = 1124007936;
  memset((char *)v20 + 4, 0, 48);
  v20[3] = 0u;
  uint64_t v21 = (char *)v20 + 8;
  long long v22 = v23;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v6 = *(void *)(a4 + 16);
  memset(v19, 0, sizeof(v19));
  double v7 = 0.0;
  if (v6) {
    double v7 = 1.0;
  }
  sub_100290690((uint64_t)&v24, (uint64_t)&qword_1004E09C0, a2, a3, a4, (uint64_t)v20, v19, a5, v7);
  *(void *)a1 = v24;
  *(_DWORD *)(a1 + 8) = v25;
  if (&v24 != (uint64_t *)a1)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    if (v8 && atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v10 + 4 * v9++) = 0;
      while (v9 < *(int *)(a1 + 20));
    }
    int v11 = *(_DWORD *)&v26[4];
    long long v12 = *(_OWORD *)&v26[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v26;
    *(_OWORD *)(a1 + 32) = v12;
    long long v13 = *(_OWORD *)&v26[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v26[32];
    *(_OWORD *)(a1 + 64) = v13;
    uint64_t v14 = *(uint64_t **)(a1 + 88);
    if (v14 == (uint64_t *)(a1 + 96))
    {
      uint64_t v15 = v28;
      if (v11 <= 2) {
        goto LABEL_12;
      }
    }
    else
    {
      j__free(v14);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      uint64_t v14 = (uint64_t *)(a1 + 96);
      uint64_t v15 = v28;
      if (*(int *)&v26[4] <= 2)
      {
LABEL_12:
        *uint64_t v14 = *v15;
        v14[1] = v15[1];
LABEL_15:
        *(_DWORD *)uint64_t v26 = 1124007936;
        memset(&v26[4], 0, 60);
        goto LABEL_16;
      }
    }
    *(void *)(a1 + 80) = v27;
    *(void *)(a1 + 88) = v15;
    float64x2_t v27 = &v26[8];
    uint64_t v28 = &v29;
    goto LABEL_15;
  }
LABEL_16:
  sub_100287094(a1 + 112, (uint64_t)&v30);
  sub_100287094(a1 + 208, (uint64_t)v31);
  long long v16 = v31[7];
  *(_OWORD *)(a1 + 304) = v31[6];
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 336) = v31[8];
  sub_10000B6BC((uint64_t)&v24);
  if (*((void *)&v20[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v20[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v20);
  }
  *((void *)&v20[3] + 1) = 0;
  memset(&v20[1], 0, 32);
  if (SDWORD1(v20[0]) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = v21;
    do
      *(_DWORD *)&v18[4 * v17++] = 0;
    while (v17 < SDWORD1(v20[0]));
  }
  if (v22 != v23) {
    j__free(v22);
  }
}

void sub_10028A3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_10000B6BC((uint64_t)va1);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028A42C(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_1002D6AE8(v20, &off_100495120);
  LODWORD(v16[0]) = 1124007936;
  memset((char *)v16 + 4, 0, 32);
  memset((char *)&v16[4] + 4, 0, 28);
  uint64_t v17 = &v16[1];
  uint64_t v18 = v19;
  v19[0] = 0;
  v19[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a3 + 24))(*a3, a3, v16, 0xFFFFFFFFLL);
  LODWORD(v12[0]) = 1124007936;
  memset((char *)v12 + 4, 0, 48);
  v12[3] = 0u;
  uint64_t v13 = (char *)v12 + 8;
  uint64_t v14 = v15;
  v15[0] = 0;
  v15[1] = 0;
  memset(v11, 0, sizeof(v11));
  sub_100288DF0(a4, (uint64_t)v16, (uint64_t)v12, v11, a1, 0.0);
  if (*((void *)&v12[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v12[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v12);
  }
  *((void *)&v12[3] + 1) = 0;
  memset(&v12[1], 0, 32);
  if (SDWORD1(v12[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v13;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v12[0]));
  }
  if (v14 != v15) {
    j__free(v14);
  }
  if (v16[7] && atomic_fetch_add((atomic_uint *volatile)(v16[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v16);
  }
  v16[7] = 0;
  memset(&v16[2], 0, 32);
  if (SHIDWORD(v16[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v17;
    do
      *((_DWORD *)v10 + v9++) = 0;
    while (v9 < SHIDWORD(v16[0]));
  }
  if (v18 != v19) {
    j__free(v18);
  }
  if (v21) {
    sub_1002D6888(v20);
  }
}

void sub_10028A620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_1000094F4((uint64_t)va);
  sub_1000094F4((uint64_t)va1);
  sub_10020FA00(v5 - 80);
  _Unwind_Resume(a1);
}

void sub_10028A644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_10028A660(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  sub_1002D6AE8(v47, &off_100495140);
  if ((uint64_t *)*a3 != a1)
  {
    (*(void (**)(void, uint64_t, void *, uint64_t, double))(*(void *)*a3 + 152))(*a3, a2, a3, a4, a5);
    goto LABEL_74;
  }
  uint64_t v10 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 == &qword_1004E09C0
    && *(_DWORD *)(a2 + 8) == 47
    && (!*(void *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
    && a1 == &qword_1004E09C0
    && *((_DWORD *)a3 + 2) == 47
    && (!a3[16] || *((double *)a3 + 39) == 0.0))
  {
    sub_10028A1A8(a4, 47, (uint64_t)(a3 + 2), a2 + 16, *(double *)(a2 + 304) / *((double *)a3 + 38));
    goto LABEL_74;
  }
  *(_DWORD *)int v43 = 1124007936;
  memset(&v43[4], 0, 60);
  long long v44 = &v43[8];
  long long v45 = v46;
  v46[0] = 0;
  v46[1] = 0;
  *(_DWORD *)int v39 = 1124007936;
  memset(&v39[4], 0, 60);
  float64x2_t v40 = &v39[8];
  float64x2_t v41 = v42;
  v42[0] = 0;
  v42[1] = 0;
  if (v10 == &qword_1004E09B8
    && (!*(void *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) == 0)
  {
    uint64_t v16 = (_DWORD *)(a2 + 16);
    if (v43 == (unsigned char *)(a2 + 16)) {
      goto LABEL_53;
    }
    uint64_t v17 = *(void *)(a2 + 72);
    if (v17)
    {
      atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 1u);
      if (*(void *)&v43[56])
      {
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v43[56] + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)v43);
        }
      }
    }
    *(void *)&v43[56] = 0;
    memset(&v43[16], 0, 32);
    if (*(uint64_t *)v43 <= 0)
    {
      *(_DWORD *)int v43 = *v16;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v19 = v44;
      do
        *(_DWORD *)&v19[4 * v18++] = 0;
      while (v18 < *(int *)&v43[4]);
      *(_DWORD *)int v43 = *v16;
      if (*(int *)&v43[4] > 2) {
        goto LABEL_51;
      }
    }
    if (*(int *)(a2 + 20) <= 2)
    {
      *(_DWORD *)&v43[4] = *(_DWORD *)(a2 + 20);
      *(void *)&v43[8] = *(void *)(a2 + 24);
      uint64_t v24 = *(void **)(a2 + 88);
      int v25 = v45;
      *(void *)long long v45 = *v24;
      v25[1] = v24[1];
LABEL_52:
      long long v26 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v43[16] = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v43[32] = v26;
      uint64_t v27 = *(void *)(a2 + 72);
      *(void *)&v43[48] = *(void *)(a2 + 64);
      *(void *)&v43[56] = v27;
LABEL_53:
      a5 = *(double *)(a2 + 304) * a5;
      uint64_t v11 = (uint64_t *)*a3;
      if ((uint64_t *)*a3 != &qword_1004E09B8) {
        goto LABEL_12;
      }
      goto LABEL_54;
    }
LABEL_51:
    sub_1002931A8((uint64_t)v43, a2 + 16);
    goto LABEL_52;
  }
  (*(void (**)(uint64_t *, uint64_t, unsigned char *, uint64_t))(*v10 + 24))(v10, a2, v43, 0xFFFFFFFFLL);
  uint64_t v11 = (uint64_t *)*a3;
  if ((uint64_t *)*a3 != &qword_1004E09B8)
  {
LABEL_12:
    if (v11 == &qword_1004E09C0 && *((_DWORD *)a3 + 2) == 47 && (!a3[16] || *((double *)a3 + 39) == 0.0))
    {
      uint64_t v12 = a3 + 2;
      if (v39 == (unsigned char *)(a3 + 2))
      {
LABEL_47:
        int v23 = 42;
        a5 = a5 / *((double *)a3 + 38);
        goto LABEL_58;
      }
      uint64_t v13 = a3[9];
      if (v13) {
        atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 1u);
      }
      if (*(void *)&v39[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v39[56] + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)v39);
      }
      *(void *)&v39[56] = 0;
      memset(&v39[16], 0, 32);
      if (*(uint64_t *)v39 <= 0)
      {
        *(_DWORD *)int v39 = *v12;
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = v40;
        do
          *(_DWORD *)&v15[4 * v14++] = 0;
        while (v14 < *(int *)&v39[4]);
        *(_DWORD *)int v39 = *v12;
        if (*(int *)&v39[4] > 2) {
          goto LABEL_45;
        }
      }
      if (*((int *)a3 + 5) <= 2)
      {
        *(_DWORD *)&v39[4] = *((_DWORD *)a3 + 5);
        *(void *)&v39[8] = a3[3];
        int v20 = (void *)a3[11];
        int v21 = v41;
        *(void *)float64x2_t v41 = *v20;
        v21[1] = v20[1];
LABEL_46:
        long long v22 = *((_OWORD *)a3 + 3);
        *(_OWORD *)&v39[16] = *((_OWORD *)a3 + 2);
        *(_OWORD *)&v39[32] = v22;
        *(_OWORD *)&v39[48] = *((_OWORD *)a3 + 4);
        goto LABEL_47;
      }
LABEL_45:
      sub_1002931A8((uint64_t)v39, (uint64_t)(a3 + 2));
      goto LABEL_46;
    }
    goto LABEL_57;
  }
LABEL_54:
  if (a3[16] && *((double *)a3 + 39) != 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 20)), (int32x4_t)vceqzq_f64(*((float64x2_t *)a3 + 21)))))) & 1) != 0)
  {
LABEL_57:
    (*(void (**)(uint64_t *, void *, unsigned char *, uint64_t))(*v11 + 24))(v11, a3, v39, 0xFFFFFFFFLL);
    int v23 = 47;
    goto LABEL_58;
  }
  uint64_t v32 = a3 + 2;
  if (v39 != (unsigned char *)(a3 + 2))
  {
    uint64_t v33 = a3[9];
    if (v33) {
      atomic_fetch_add((atomic_uint *volatile)(v33 + 20), 1u);
    }
    if (*(void *)&v39[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v39[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v39);
    }
    *(void *)&v39[56] = 0;
    memset(&v39[16], 0, 32);
    if (*(uint64_t *)v39 <= 0)
    {
      *(_DWORD *)int v39 = *v32;
    }
    else
    {
      uint64_t v34 = 0;
      int v35 = v40;
      do
        *(_DWORD *)&v35[4 * v34++] = 0;
      while (v34 < *(int *)&v39[4]);
      *(_DWORD *)int v39 = *v32;
      if (*(int *)&v39[4] > 2) {
        goto LABEL_91;
      }
    }
    if (*((int *)a3 + 5) <= 2)
    {
      *(_DWORD *)&v39[4] = *((_DWORD *)a3 + 5);
      *(void *)&v39[8] = a3[3];
      long long v36 = (void *)a3[11];
      uint64_t v37 = v41;
      *(void *)float64x2_t v41 = *v36;
      v37[1] = v36[1];
LABEL_92:
      long long v38 = *((_OWORD *)a3 + 3);
      *(_OWORD *)&v39[16] = *((_OWORD *)a3 + 2);
      *(_OWORD *)&v39[32] = v38;
      *(_OWORD *)&v39[48] = *((_OWORD *)a3 + 4);
      goto LABEL_93;
    }
LABEL_91:
    sub_1002931A8((uint64_t)v39, (uint64_t)(a3 + 2));
    goto LABEL_92;
  }
LABEL_93:
  int v23 = 47;
  a5 = a5 / *((double *)a3 + 38);
LABEL_58:
  sub_10028A1A8(a4, v23, (uint64_t)v43, (uint64_t)v39, a5);
  if (*(void *)&v39[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v39[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v39);
  }
  *(void *)&v39[56] = 0;
  memset(&v39[16], 0, 32);
  if (*(int *)&v39[4] >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v40;
    do
      *(_DWORD *)&v29[4 * v28++] = 0;
    while (v28 < *(int *)&v39[4]);
  }
  if (v41 != v42) {
    j__free(v41);
  }
  if (*(void *)&v43[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v43[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v43);
  }
  *(void *)&v43[56] = 0;
  memset(&v43[16], 0, 32);
  if (*(int *)&v43[4] >= 1)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v44;
    do
      *(_DWORD *)&v31[4 * v30++] = 0;
    while (v30 < *(int *)&v43[4]);
  }
  if (v45 != v46) {
    j__free(v45);
  }
LABEL_74:
  if (v48) {
    sub_1002D6888(v47);
  }
}

void sub_10028ACF0(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_10028AD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 112);
  _Unwind_Resume(a1);
}

void sub_10028AD28(double a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_1002D6AE8(v19, &off_100495160);
  LODWORD(v15[0]) = 1124007936;
  memset((char *)v15 + 4, 0, 32);
  memset((char *)&v15[4] + 4, 0, 28);
  uint64_t v16 = &v15[1];
  uint64_t v17 = v18;
  v18[0] = 0;
  v18[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a3 + 24))(*a3, a3, v15, 0xFFFFFFFFLL);
  LODWORD(v11[0]) = 1124007936;
  memset((char *)v11 + 4, 0, 48);
  v11[3] = 0u;
  uint64_t v12 = (char *)v11 + 8;
  uint64_t v13 = v14;
  v14[0] = 0;
  v14[1] = 0;
  sub_10028A1A8(a4, 47, (uint64_t)v15, (uint64_t)v11, a1);
  if (*((void *)&v11[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v11[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v11);
  }
  *((void *)&v11[3] + 1) = 0;
  memset(&v11[1], 0, 32);
  if (SDWORD1(v11[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v12;
    do
      *(_DWORD *)&v8[4 * v7++] = 0;
    while (v7 < SDWORD1(v11[0]));
  }
  if (v13 != v14) {
    j__free(v13);
  }
  if (v15[7] && atomic_fetch_add((atomic_uint *volatile)(v15[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v15);
  }
  v15[7] = 0;
  memset(&v15[2], 0, 32);
  if (SHIDWORD(v15[0]) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v16;
    do
      *((_DWORD *)v10 + v9++) = 0;
    while (v9 < SHIDWORD(v15[0]));
  }
  if (v17 != v18) {
    j__free(v17);
  }
  if (v20) {
    sub_1002D6888(v19);
  }
}

void sub_10028AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 80);
  _Unwind_Resume(a1);
}

void sub_10028AF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v13 - 80);
  _Unwind_Resume(a1);
}

void sub_10028AF54(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1002D6AE8(v17, &off_100495180);
  LODWORD(v13[0]) = 1124007936;
  memset((char *)v13 + 4, 0, 32);
  memset((char *)&v13[4] + 4, 0, 28);
  uint64_t v14 = &v13[1];
  uint64_t v15 = v16;
  v16[0] = 0;
  v16[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v13, 0xFFFFFFFFLL);
  LODWORD(v9[0]) = 1124007936;
  memset((char *)v9 + 4, 0, 48);
  v9[3] = 0u;
  uint64_t v10 = (char *)v9 + 8;
  uint64_t v11 = v12;
  v12[0] = 0;
  v12[1] = 0;
  sub_10028A1A8(a3, 97, (uint64_t)v13, (uint64_t)v9, 1.0);
  if (*((void *)&v9[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v9[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v9);
  }
  *((void *)&v9[3] + 1) = 0;
  memset(&v9[1], 0, 32);
  if (SDWORD1(v9[0]) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v10;
    do
      *(_DWORD *)&v6[4 * v5++] = 0;
    while (v5 < SDWORD1(v9[0]));
  }
  if (v11 != v12) {
    j__free(v11);
  }
  if (v13[7] && atomic_fetch_add((atomic_uint *volatile)(v13[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v13);
  }
  v13[7] = 0;
  memset(&v13[2], 0, 32);
  if (SHIDWORD(v13[0]) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v14;
    do
      *((_DWORD *)v8 + v7++) = 0;
    while (v7 < SHIDWORD(v13[0]));
  }
  if (v15 != v16) {
    j__free(v15);
  }
  if (v18) {
    sub_1002D6888(v17);
  }
}

void sub_10028B134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_1000094F4((uint64_t)&a9);
  sub_1000094F4((uint64_t)&a21);
  sub_10020FA00(v21 - 64);
  _Unwind_Resume(a1);
}

void sub_10028B158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_10028B174(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1002D6AE8(v11, &off_1004951A0);
  LODWORD(v7[0]) = 1124007936;
  memset((char *)v7 + 4, 0, 32);
  memset((char *)&v7[4] + 4, 0, 28);
  uint64_t v8 = &v7[1];
  uint64_t v9 = v10;
  v10[0] = 0;
  v10[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v7, 0xFFFFFFFFLL);
  sub_10028B2C8(a3, (uint64_t)v7, 1.0);
  if (v7[7] && atomic_fetch_add((atomic_uint *volatile)(v7[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v7);
  }
  v7[7] = 0;
  memset(&v7[2], 0, 32);
  if (SHIDWORD(v7[0]) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v8;
    do
      *((_DWORD *)v6 + v5++) = 0;
    while (v5 < SHIDWORD(v7[0]));
  }
  if (v9 != v10) {
    j__free(v9);
  }
  if (v12) {
    sub_1002D6888(v11);
  }
}

void sub_10028B2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000094F4((uint64_t)&a9);
  sub_10020FA00(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_10028B2C8(uint64_t a1, uint64_t a2, double a3)
{
  LODWORD(v22[0]) = 1124007936;
  memset((char *)v22 + 4, 0, 48);
  v22[3] = 0u;
  int v23 = (char *)v22 + 8;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  LODWORD(v18[0]) = 1124007936;
  memset((char *)v18 + 4, 0, 48);
  v18[3] = 0u;
  uint64_t v19 = (char *)v18 + 8;
  int v20 = v21;
  v21[0] = 0;
  v21[1] = 0;
  memset(v17, 0, sizeof(v17));
  sub_100290690((uint64_t)&v26, (uint64_t)&qword_1004E09E0, 0, a2, (uint64_t)v22, (uint64_t)v18, v17, a3, 0.0);
  *(void *)a1 = v26;
  *(_DWORD *)(a1 + 8) = v27;
  if (&v26 != (uint64_t *)a1)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v6 + 4 * v5++) = 0;
      while (v5 < *(int *)(a1 + 20));
    }
    int v7 = *(_DWORD *)&v28[4];
    long long v8 = *(_OWORD *)&v28[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 32) = v8;
    long long v9 = *(_OWORD *)&v28[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v28[32];
    *(_OWORD *)(a1 + 64) = v9;
    uint64_t v10 = *(uint64_t **)(a1 + 88);
    if (v10 == (uint64_t *)(a1 + 96))
    {
      uint64_t v11 = v30;
      if (v7 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v10);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      uint64_t v10 = (uint64_t *)(a1 + 96);
      uint64_t v11 = v30;
      if (*(int *)&v28[4] <= 2)
      {
LABEL_10:
        *uint64_t v10 = *v11;
        v10[1] = v11[1];
LABEL_13:
        *(_DWORD *)uint64_t v28 = 1124007936;
        memset(&v28[4], 0, 60);
        goto LABEL_14;
      }
    }
    *(void *)(a1 + 80) = v29;
    *(void *)(a1 + 88) = v11;
    uint64_t v29 = &v28[8];
    uint64_t v30 = &v31;
    goto LABEL_13;
  }
LABEL_14:
  sub_100287094(a1 + 112, (uint64_t)&v32);
  sub_100287094(a1 + 208, (uint64_t)v33);
  long long v12 = v33[7];
  *(_OWORD *)(a1 + 304) = v33[6];
  *(_OWORD *)(a1 + 320) = v12;
  *(_OWORD *)(a1 + 336) = v33[8];
  sub_10000B6BC((uint64_t)&v26);
  if (*((void *)&v18[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v18[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v18);
  }
  *((void *)&v18[3] + 1) = 0;
  memset(&v18[1], 0, 32);
  if (SDWORD1(v18[0]) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v19;
    do
      *(_DWORD *)&v14[4 * v13++] = 0;
    while (v13 < SDWORD1(v18[0]));
  }
  if (v20 != v21) {
    j__free(v20);
  }
  if (*((void *)&v22[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v22[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v22);
  }
  *((void *)&v22[3] + 1) = 0;
  memset(&v22[1], 0, 32);
  if (SDWORD1(v22[0]) >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v23;
    do
      *(_DWORD *)&v16[4 * v15++] = 0;
    while (v15 < SDWORD1(v22[0]));
  }
  if (v24 != v25) {
    j__free(v24);
  }
}

void sub_10028B5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1000094F4((uint64_t)va);
  sub_1000094F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10028B5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_10028B5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a3 != a1)
  {
    int v7 = *(void (**)(void))(**(void **)a3 + 184);
    v7();
    return;
  }
  *(_DWORD *)uint64_t v50 = 1124007936;
  memset(&v50[4], 0, 60);
  uint64_t v51 = &v50[8];
  uint64_t v52 = v53;
  v53[0] = 0;
  v53[1] = 0;
  *(_DWORD *)uint64_t v46 = 1124007936;
  memset(&v46[4], 0, 60);
  uint64_t v47 = &v46[8];
  int v48 = v49;
  v49[0] = 0;
  v49[1] = 0;
  uint64_t v8 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 == &qword_1004E09E0)
  {
    double v10 = *(double *)(a2 + 304);
    uint64_t v12 = (_DWORD *)(a2 + 16);
    if (v50 == (unsigned char *)(a2 + 16))
    {
      int v9 = 1;
      uint64_t v11 = *(uint64_t **)a3;
      if (*(uint64_t **)a3 == &qword_1004E09E0) {
        goto LABEL_56;
      }
      goto LABEL_29;
    }
    uint64_t v13 = *(void *)(a2 + 72);
    if (v13)
    {
      atomic_fetch_add((atomic_uint *volatile)(v13 + 20), 1u);
      if (*(void *)&v50[56])
      {
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v50[56] + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)v50);
        }
      }
    }
    *(void *)&v50[56] = 0;
    memset(&v50[16], 0, 32);
    if (*(uint64_t *)v50 <= 0)
    {
      *(_DWORD *)uint64_t v50 = *v12;
      int v16 = *(_DWORD *)(a2 + 20);
      if (v16 <= 2)
      {
LABEL_22:
        *(_DWORD *)&v50[4] = v16;
        *(void *)&unsigned char v50[8] = *(void *)(a2 + 24);
        uint64_t v17 = *(void **)(a2 + 88);
        uint64_t v18 = v52;
        *(void *)uint64_t v52 = *v17;
        int v9 = 1;
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = v51;
      do
        *(_DWORD *)&v15[4 * v14++] = 0;
      while (v14 < *(int *)&v50[4]);
      *(_DWORD *)uint64_t v50 = *v12;
      if (*(int *)&v50[4] <= 2)
      {
        int v16 = *(_DWORD *)(a2 + 20);
        if (v16 <= 2) {
          goto LABEL_22;
        }
      }
    }
    sub_1002931A8((uint64_t)v50, a2 + 16);
    int v9 = 1;
    goto LABEL_28;
  }
  if (v8 == &qword_1004E09B8
    && (!*(void *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) == 0)
  {
    double v10 = *(double *)(a2 + 304);
    uint64_t v21 = (_DWORD *)(a2 + 16);
    if (v50 == (unsigned char *)(a2 + 16))
    {
      int v9 = 0;
      uint64_t v11 = *(uint64_t **)a3;
      if (*(uint64_t **)a3 != &qword_1004E09E0) {
        goto LABEL_29;
      }
LABEL_56:
      v9 |= 2u;
      double v10 = v10 * *(double *)(a3 + 304);
      uint64_t v29 = (_DWORD *)(a3 + 16);
      if (v46 == (unsigned char *)(a3 + 16)) {
        goto LABEL_72;
      }
      uint64_t v30 = *(void *)(a3 + 72);
      if (v30) {
        atomic_fetch_add((atomic_uint *volatile)(v30 + 20), 1u);
      }
      if (*(void *)&v46[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v46[56] + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4((uint64_t)v46);
      }
      *(void *)&v46[56] = 0;
      memset(&v46[16], 0, 32);
      if (*(uint64_t *)v46 > 0)
      {
        uint64_t v31 = 0;
        uint64_t v32 = v47;
        do
          *(_DWORD *)&v32[4 * v31++] = 0;
        while (v31 < *(int *)&v46[4]);
        *(_DWORD *)uint64_t v46 = *v29;
        if (*(int *)&v46[4] > 2) {
          goto LABEL_70;
        }
        int v33 = *(_DWORD *)(a3 + 20);
        if (v33 > 2) {
          goto LABEL_70;
        }
LABEL_69:
        *(_DWORD *)&v46[4] = v33;
        *(void *)&v46[8] = *(void *)(a3 + 24);
        uint64_t v34 = *(void **)(a3 + 88);
        int v35 = v48;
        *(void *)int v48 = *v34;
        v35[1] = v34[1];
LABEL_71:
        *(void *)&v46[16] = *(void *)(a3 + 32);
        *(_OWORD *)&v46[24] = *(_OWORD *)(a3 + 40);
        *(_OWORD *)&v46[40] = *(_OWORD *)(a3 + 56);
        *(void *)&v46[56] = *(void *)(a3 + 72);
        goto LABEL_72;
      }
      *(_DWORD *)uint64_t v46 = *v29;
      int v33 = *(_DWORD *)(a3 + 20);
      if (v33 <= 2) {
        goto LABEL_69;
      }
LABEL_70:
      sub_1002931A8((uint64_t)v46, a3 + 16);
      goto LABEL_71;
    }
    uint64_t v22 = *(void *)(a2 + 72);
    if (v22)
    {
      atomic_fetch_add((atomic_uint *volatile)(v22 + 20), 1u);
      if (*(void *)&v50[56])
      {
        if (atomic_fetch_add((atomic_uint *volatile)(*(void *)&v50[56] + 20), 0xFFFFFFFF) == 1) {
          sub_1002932F4((uint64_t)v50);
        }
      }
    }
    *(void *)&v50[56] = 0;
    memset(&v50[16], 0, 32);
    if (*(uint64_t *)v50 <= 0)
    {
      *(_DWORD *)uint64_t v50 = *v21;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = v51;
      do
        *(_DWORD *)&v24[4 * v23++] = 0;
      while (v23 < *(int *)&v50[4]);
      *(_DWORD *)uint64_t v50 = *v21;
      if (*(int *)&v50[4] > 2) {
        goto LABEL_100;
      }
    }
    if (*(int *)(a2 + 20) > 2)
    {
LABEL_100:
      sub_1002931A8((uint64_t)v50, a2 + 16);
      int v9 = 0;
LABEL_28:
      uint64_t v19 = *(void *)(a2 + 32);
      *(_OWORD *)&v50[24] = *(_OWORD *)(a2 + 40);
      *(_OWORD *)&v50[40] = *(_OWORD *)(a2 + 56);
      uint64_t v20 = *(void *)(a2 + 72);
      *(void *)&v50[16] = v19;
      *(void *)&v50[56] = v20;
      uint64_t v11 = *(uint64_t **)a3;
      if (*(uint64_t **)a3 != &qword_1004E09E0) {
        goto LABEL_29;
      }
      goto LABEL_56;
    }
    int v9 = 0;
    *(_DWORD *)&v50[4] = *(_DWORD *)(a2 + 20);
    *(void *)&unsigned char v50[8] = *(void *)(a2 + 24);
    uint64_t v17 = *(void **)(a2 + 88);
    uint64_t v18 = v52;
    *(void *)uint64_t v52 = *v17;
LABEL_23:
    v18[1] = v17[1];
    goto LABEL_28;
  }
  (*(void (**)(uint64_t *, uint64_t, unsigned char *, uint64_t))(*v8 + 24))(v8, a2, v50, 0xFFFFFFFFLL);
  int v9 = 0;
  double v10 = 1.0;
  uint64_t v11 = *(uint64_t **)a3;
  if (*(uint64_t **)a3 == &qword_1004E09E0) {
    goto LABEL_56;
  }
LABEL_29:
  if (v11 != &qword_1004E09B8
    || *(void *)(a3 + 128) && *(double *)(a3 + 312) != 0.0
    || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 336)))))) & 1) != 0)
  {
    (*(void (**)(uint64_t *, uint64_t, unsigned char *, uint64_t))(*v11 + 24))(v11, a3, v46, 0xFFFFFFFFLL);
    goto LABEL_72;
  }
  double v10 = v10 * *(double *)(a3 + 304);
  int v25 = (_DWORD *)(a3 + 16);
  if (v46 != (unsigned char *)(a3 + 16))
  {
    uint64_t v26 = *(void *)(a3 + 72);
    if (v26) {
      atomic_fetch_add((atomic_uint *volatile)(v26 + 20), 1u);
    }
    if (*(void *)&v46[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v46[56] + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4((uint64_t)v46);
    }
    *(void *)&v46[56] = 0;
    memset(&v46[16], 0, 32);
    if (*(uint64_t *)v46 <= 0)
    {
      *(_DWORD *)uint64_t v46 = *v25;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = v47;
      do
        *(_DWORD *)&v28[4 * v27++] = 0;
      while (v27 < *(int *)&v46[4]);
      *(_DWORD *)uint64_t v46 = *v25;
      if (*(int *)&v46[4] > 2) {
        goto LABEL_70;
      }
    }
    int v33 = *(_DWORD *)(a3 + 20);
    if (v33 <= 2) {
      goto LABEL_69;
    }
    goto LABEL_70;
  }
LABEL_72:
  LODWORD(v42[0]) = 1124007936;
  memset((char *)v42 + 4, 0, 48);
  v42[3] = 0u;
  int v43 = (char *)v42 + 8;
  long long v44 = v45;
  v45[0] = 0;
  v45[1] = 0;
  sub_10028BDD8(a4, v9, (uint64_t)v50, (uint64_t)v46, (uint64_t)v42, v10, 1.0);
  if (*((void *)&v42[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v42[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v42);
  }
  *((void *)&v42[3] + 1) = 0;
  memset(&v42[1], 0, 32);
  if (SDWORD1(v42[0]) >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = v43;
    do
      *(_DWORD *)&v37[4 * v36++] = 0;
    while (v36 < SDWORD1(v42[0]));
  }
  if (v44 != v45) {
    j__free(v44);
  }
  if (*(void *)&v46[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v46[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v46);
  }
  *(void *)&v46[56] = 0;
  memset(&v46[16], 0, 32);
  if (*(int *)&v46[4] >= 1)
  {
    uint64_t v38 = 0;
    int v39 = v47;
    do
      *(_DWORD *)&v39[4 * v38++] = 0;
    while (v38 < *(int *)&v46[4]);
  }
  if (v48 != v49) {
    j__free(v48);
  }
  if (*(void *)&v50[56] && atomic_fetch_add((atomic_uint *volatile)(*(void *)&v50[56] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v50);
  }
  *(void *)&v50[56] = 0;
  memset(&v50[16], 0, 32);
  if (*(int *)&v50[4] >= 1)
  {
    uint64_t v40 = 0;
    float64x2_t v41 = v51;
    do
      *(_DWORD *)&v41[4 * v40++] = 0;
    while (v40 < *(int *)&v50[4]);
  }
  if (v52 != v53) {
    j__free(v52);
  }
}

void sub_10028BD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_10028BDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_10028BDD8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  memset(v18, 0, sizeof(v18));
  sub_100290690((uint64_t)&v19, (uint64_t)&qword_1004E09D0, a2, a3, a4, a5, v18, a6, a7);
  *(void *)a1 = v19;
  *(_DWORD *)(a1 + 8) = v20;
  if (&v19 != (uint64_t *)a1)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    if (v8 && atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v10 + 4 * v9++) = 0;
      while (v9 < *(int *)(a1 + 20));
    }
    int v11 = *(_DWORD *)&v21[4];
    long long v12 = *(_OWORD *)&v21[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v21;
    *(_OWORD *)(a1 + 32) = v12;
    long long v13 = *(_OWORD *)&v21[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v21[32];
    *(_OWORD *)(a1 + 64) = v13;
    uint64_t v14 = *(uint64_t **)(a1 + 88);
    if (v14 == (uint64_t *)(a1 + 96))
    {
      uint64_t v15 = v23;
      if (v11 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v14);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      uint64_t v14 = (uint64_t *)(a1 + 96);
      uint64_t v15 = v23;
      if (*(int *)&v21[4] <= 2)
      {
LABEL_10:
        *uint64_t v14 = *v15;
        v14[1] = v15[1];
LABEL_13:
        *(_DWORD *)uint64_t v21 = 1124007936;
        memset(&v21[4], 0, 60);
        goto LABEL_14;
      }
    }
    *(void *)(a1 + 80) = v22;
    *(void *)(a1 + 88) = v15;
    uint64_t v22 = &v21[8];
    uint64_t v23 = &v24;
    goto LABEL_13;
  }
LABEL_14:
  sub_100287094(a1 + 112, (uint64_t)&v25);
  sub_100287094(a1 + 208, (uint64_t)v26);
  long long v16 = v26[7];
  *(_OWORD *)(a1 + 304) = v26[6];
  *(_OWORD *)(a1 + 320) = v16;
  *(_OWORD *)(a1 + 336) = v26[8];
  return sub_10000B6BC((uint64_t)&v19);
}

void sub_10028BF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10000B6BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028BF94(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  LODWORD(v8[0]) = 1124007936;
  memset((char *)v8 + 4, 0, 32);
  memset((char *)&v8[4] + 4, 0, 28);
  uint64_t v9 = &v8[1];
  uint64_t v10 = v11;
  v11[0] = 0;
  v11[1] = 0;
  (*(void (**)(void, void *, void *, uint64_t))(*(void *)*a2 + 24))(*a2, a2, v8, 0xFFFFFFFFLL);
  sub_10028C0B8(a4, a3, (uint64_t)v8);
  if (v8[7] && atomic_fetch_add((atomic_uint *volatile)(v8[7] + 20), 0xFFFFFFFF) == 1) {
    sub_1002932F4((uint64_t)v8);
  }
  v8[7] = 0;
  memset(&v8[2], 0, 32);
  if (SHIDWORD(v8[0]) >= 1)
  {
    uint64_t v6 = 0;
    int v7 = v9;
    do
      *((_DWORD *)v7 + v6++) = 0;
    while (v6 < SHIDWORD(v8[0]));
  }
  if (v10 != v11) {
    j__free(v10);
  }
}

void sub_10028C0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028C0B8(uint64_t a1, int a2, uint64_t a3)
{
  LODWORD(v22[0]) = 1124007936;
  memset((char *)v22 + 4, 0, 48);
  v22[3] = 0u;
  uint64_t v23 = (char *)v22 + 8;
  uint64_t v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  LODWORD(v18[0]) = 1124007936;
  memset((char *)v18 + 4, 0, 48);
  v18[3] = 0u;
  uint64_t v19 = (char *)v18 + 8;
  int v20 = v21;
  v21[0] = 0;
  v21[1] = 0;
  memset(v17, 0, sizeof(v17));
  sub_100290690((uint64_t)&v26, (uint64_t)&qword_1004E09D8, a2, a3, (uint64_t)v22, (uint64_t)v18, v17, 1.0, 0.0);
  *(void *)a1 = v26;
  *(_DWORD *)(a1 + 8) = v27;
  if (&v26 != (uint64_t *)a1)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    if (v4 && atomic_fetch_add((atomic_uint *volatile)(v4 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v6 + 4 * v5++) = 0;
      while (v5 < *(int *)(a1 + 20));
    }
    int v7 = *(_DWORD *)&v28[4];
    long long v8 = *(_OWORD *)&v28[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 32) = v8;
    long long v9 = *(_OWORD *)&v28[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v28[32];
    *(_OWORD *)(a1 + 64) = v9;
    uint64_t v10 = *(uint64_t **)(a1 + 88);
    if (v10 == (uint64_t *)(a1 + 96))
    {
      int v11 = v30;
      if (v7 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v10);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      uint64_t v10 = (uint64_t *)(a1 + 96);
      int v11 = v30;
      if (*(int *)&v28[4] <= 2)
      {
LABEL_10:
        *uint64_t v10 = *v11;
        v10[1] = v11[1];
LABEL_13:
        *(_DWORD *)uint64_t v28 = 1124007936;
        memset(&v28[4], 0, 60);
        goto LABEL_14;
      }
    }
    *(void *)(a1 + 80) = v29;
    *(void *)(a1 + 88) = v11;
    uint64_t v29 = &v28[8];
    uint64_t v30 = &v31;
    goto LABEL_13;
  }
LABEL_14:
  sub_100287094(a1 + 112, (uint64_t)&v32);
  sub_100287094(a1 + 208, (uint64_t)v33);
  long long v12 = v33[7];
  *(_OWORD *)(a1 + 304) = v33[6];
  *(_OWORD *)(a1 + 320) = v12;
  *(_OWORD *)(a1 + 336) = v33[8];
  sub_10000B6BC((uint64_t)&v26);
  if (*((void *)&v18[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v18[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v18);
  }
  *((void *)&v18[3] + 1) = 0;
  memset(&v18[1], 0, 32);
  if (SDWORD1(v18[0]) >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v19;
    do
      *(_DWORD *)&v14[4 * v13++] = 0;
    while (v13 < SDWORD1(v18[0]));
  }
  if (v20 != v21) {
    j__free(v20);
  }
  if (*((void *)&v22[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v22[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v22);
  }
  *((void *)&v22[3] + 1) = 0;
  memset(&v22[1], 0, 32);
  if (SDWORD1(v22[0]) >= 1)
  {
    uint64_t v15 = 0;
    long long v16 = v23;
    do
      *(_DWORD *)&v16[4 * v15++] = 0;
    while (v15 < SDWORD1(v22[0]));
  }
  if (v24 != v25) {
    j__free(v24);
  }
}

void sub_10028C39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1000094F4((uint64_t)va);
  sub_1000094F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10028C3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

int32x2_t sub_10028C3DC@<D0>(uint64_t a1@<X1>, int32x2_t *a2@<X8>)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_21;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  if ((int)v2 >= 3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = (int *)(v4 + 4);
    uint64_t v6 = 1;
    uint64_t v7 = v2 & 0xFFFFFFFE;
    uint64_t v8 = 1;
    do
    {
      v6 *= *(v5 - 1);
      v8 *= *v5;
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    uint64_t v3 = v8 * v6;
    uint64_t v9 = v2 - (v2 & 0xFFFFFFFE);
    if (v9)
    {
      uint64_t v10 = (int *)(v4 + ((4 * v2) & 0x3FFFFFFF8));
      do
      {
        uint64_t v11 = *v10++;
        v3 *= v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    uint64_t v3 = *(int *)(a1 + 28) * (uint64_t)*(int *)(a1 + 24);
  }
  if (v2 && v3)
  {
    int32x2_t result = vrev64_s32(**(int32x2_t **)(a1 + 80));
    *a2 = result;
  }
  else
  {
    if (!*(void *)(a1 + 128)) {
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v13 = *(unsigned int *)(a1 + 116);
    if ((int)v13 >= 3)
    {
      uint64_t v15 = *(void *)(a1 + 176);
      uint64_t v16 = (int *)(v15 + 4);
      uint64_t v17 = 1;
      uint64_t v18 = v13 & 0xFFFFFFFE;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v14 = v19 * v17;
      uint64_t v20 = v13 - (v13 & 0xFFFFFFFE);
      if (v20)
      {
        uint64_t v21 = (int *)(v15 + ((4 * v13) & 0x3FFFFFFF8));
        do
        {
          uint64_t v22 = *v21++;
          v14 *= v22;
          --v20;
        }
        while (v20);
      }
    }
    else
    {
      uint64_t v14 = *(int *)(a1 + 124) * (uint64_t)*(int *)(a1 + 120);
    }
    if (v13 && v14)
    {
      int32x2_t result = vrev64_s32(**(int32x2_t **)(a1 + 272));
      *a2 = result;
    }
    else
    {
LABEL_23:
      int32x2_t result = vrev64_s32(**(int32x2_t **)(a1 + 176));
      *a2 = result;
    }
  }
  return result;
}

uint64_t sub_10028C524(uint64_t a1, uint64_t a2)
{
  sub_1002D6AE8(v27, &off_1004951C0);
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  if ((int)v3 >= 3)
  {
    uint64_t v5 = *(void *)(a2 + 80);
    uint64_t v6 = (int *)(v5 + 4);
    uint64_t v7 = 1;
    uint64_t v8 = v3 & 0xFFFFFFFE;
    uint64_t v9 = 1;
    do
    {
      v7 *= *(v6 - 1);
      v9 *= *v6;
      v6 += 2;
      v8 -= 2;
    }
    while (v8);
    uint64_t v4 = v9 * v7;
    uint64_t v10 = v3 - (v3 & 0xFFFFFFFE);
    if (v10)
    {
      uint64_t v11 = (int *)(v5 + ((4 * v3) & 0x3FFFFFFF8));
      do
      {
        uint64_t v12 = *v11++;
        v4 *= v12;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    uint64_t v4 = *(int *)(a2 + 28) * (uint64_t)*(int *)(a2 + 24);
  }
  if (v3 && v4)
  {
    uint64_t v13 = (int *)(a2 + 16);
  }
  else
  {
LABEL_12:
    uint64_t v13 = (int *)(a2 + 112);
    if (*(void *)(a2 + 128))
    {
      uint64_t v14 = *(unsigned int *)(a2 + 116);
      if ((int)v14 >= 3)
      {
        uint64_t v16 = *(void *)(a2 + 176);
        uint64_t v17 = (int *)(v16 + 4);
        uint64_t v18 = 1;
        uint64_t v19 = v14 & 0xFFFFFFFE;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v15 = v20 * v18;
        uint64_t v21 = v14 - (v14 & 0xFFFFFFFE);
        if (v21)
        {
          uint64_t v22 = (int *)(v16 + ((4 * v14) & 0x3FFFFFFF8));
          do
          {
            uint64_t v23 = *v22++;
            v15 *= v23;
            --v21;
          }
          while (v21);
        }
      }
      else
      {
        uint64_t v15 = *(int *)(a2 + 124) * (uint64_t)*(int *)(a2 + 120);
      }
      if (v15) {
        BOOL v24 = v14 == 0;
      }
      else {
        BOOL v24 = 1;
      }
      if (!v24) {
        uint64_t v13 = (int *)(a2 + 208);
      }
    }
  }
  int v25 = *v13;
  if (v28) {
    sub_1002D6888(v27);
  }
  return v25 & 0xFFF;
}

void sub_10028C68C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  LODWORD(v22[0]) = 1124007936;
  memset((char *)v22 + 4, 0, 48);
  v22[3] = 0u;
  uint64_t v23 = (char *)v22 + 8;
  BOOL v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  LODWORD(v18[0]) = 1124007936;
  memset((char *)v18 + 4, 0, 48);
  v18[3] = 0u;
  uint64_t v19 = (char *)v18 + 8;
  uint64_t v20 = v21;
  v21[0] = 0;
  v21[1] = 0;
  sub_100290690((uint64_t)&v26, (uint64_t)&qword_1004E09C0, a2, a3, (uint64_t)v22, (uint64_t)v18, a4, 1.0, 0.0);
  *(void *)a1 = v26;
  *(_DWORD *)(a1 + 8) = v27;
  if (&v26 != (uint64_t *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    if (v5 && atomic_fetch_add((atomic_uint *volatile)(v5 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a1 + 80);
      do
        *(_DWORD *)(v7 + 4 * v6++) = 0;
      while (v6 < *(int *)(a1 + 20));
    }
    int v8 = *(_DWORD *)&v28[4];
    long long v9 = *(_OWORD *)&v28[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v28;
    *(_OWORD *)(a1 + 32) = v9;
    long long v10 = *(_OWORD *)&v28[48];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)&v28[32];
    *(_OWORD *)(a1 + 64) = v10;
    uint64_t v11 = *(uint64_t **)(a1 + 88);
    if (v11 == (uint64_t *)(a1 + 96))
    {
      uint64_t v12 = v30;
      if (v8 <= 2) {
        goto LABEL_10;
      }
    }
    else
    {
      j__free(v11);
      *(void *)(a1 + 80) = a1 + 24;
      *(void *)(a1 + 88) = a1 + 96;
      uint64_t v11 = (uint64_t *)(a1 + 96);
      uint64_t v12 = v30;
      if (*(int *)&v28[4] <= 2)
      {
LABEL_10:
        *uint64_t v11 = *v12;
        v11[1] = v12[1];
LABEL_13:
        *(_DWORD *)int v28 = 1124007936;
        memset(&v28[4], 0, 60);
        goto LABEL_14;
      }
    }
    *(void *)(a1 + 80) = v29;
    *(void *)(a1 + 88) = v12;
    uint64_t v29 = &v28[8];
    uint64_t v30 = &v31;
    goto LABEL_13;
  }
LABEL_14:
  sub_100287094(a1 + 112, (uint64_t)&v32);
  sub_100287094(a1 + 208, (uint64_t)v33);
  long long v13 = v33[7];
  *(_OWORD *)(a1 + 304) = v33[6];
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v33[8];
  sub_10000B6BC((uint64_t)&v26);
  if (*((void *)&v18[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v18[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v18);
  }
  *((void *)&v18[3] + 1) = 0;
  memset(&v18[1], 0, 32);
  if (SDWORD1(v18[0]) >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v19;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < SDWORD1(v18[0]));
  }
  if (v20 != v21) {
    j__free(v20);
  }
  if (*((void *)&v22[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v22[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v22);
  }
  *((void *)&v22[3] + 1) = 0;
  memset(&v22[1], 0, 32);
  if (SDWORD1(v22[0]) >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v23;
    do
      *(_DWORD *)&v17[4 * v16++] = 0;
    while (v16 < SDWORD1(v22[0]));
  }
  if (v24 != v25) {
    j__free(v24);
  }
}

void sub_10028C96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_10028C988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_10028C9AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  uint64_t v4 = *(uint64_t **)result;
  if (*(uint64_t **)result == &qword_1004E09E0 || v4 == &qword_1004E09D8)
  {
    *(void *)a2 = *(void *)(result + 24);
  }
  else if (v4 == &qword_1004E09D0)
  {
    int v7 = *(_DWORD *)(result + 24);
    *(_DWORD *)a2 = *(_DWORD *)(result + 124);
    *(_DWORD *)(a2 + 4) = v7;
  }
  else if (v4 == &qword_1004E09E8)
  {
    int v8 = *(_DWORD *)(result + 28);
    *(_DWORD *)a2 = *(_DWORD *)(result + 124);
    *(_DWORD *)(a2 + 4) = v8;
  }
  else
  {
    int32x2_t result = sub_1002908A0();
    if ((uint64_t *)result == v4)
    {
      *(int32x2_t *)a2 = vrev64_s32(**(int32x2_t **)(v2 + 80));
    }
    else
    {
      int32x2_t result = *(void *)v2;
      if (*(void *)v2)
      {
        uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 200);
        return v6();
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  return result;
}

uint64_t sub_10028CAE8(uint64_t a1)
{
  sub_1002D6AE8(v6, &off_1004951E0);
  uint64_t v2 = *(uint64_t **)a1;
  if ((uint64_t *)sub_1002908A0() == v2)
  {
    uint64_t v4 = *(_DWORD *)(a1 + 16) & 0xFFF;
    if (!v7) {
      return v4;
    }
    goto LABEL_11;
  }
  uint64_t v3 = *(uint64_t **)a1;
  if (*(uint64_t **)a1 == &qword_1004E09C8)
  {
    uint64_t v4 = 0;
    if (!v7) {
      return v4;
    }
    goto LABEL_11;
  }
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v3 + 208))(v3, a1);
    if (!v7) {
      return v4;
    }
    goto LABEL_11;
  }
  uint64_t v4 = 0xFFFFFFFFLL;
  if (v7) {
LABEL_11:
  }
    sub_1002D6888(v6);
  return v4;
}

void sub_10028CBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_10028CBD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == -1 || (int v6 = *(_DWORD *)(a2 + 16), (v6 & 0xFFF) == a4))
  {
    int v7 = (_DWORD *)(a2 + 16);
    if (a2 + 16 != a3)
    {
      uint64_t v8 = *(void *)(a2 + 72);
      if (v8) {
        atomic_fetch_add((atomic_uint *volatile)(v8 + 20), 1u);
      }
      uint64_t v9 = *(void *)(a3 + 56);
      if (v9 && atomic_fetch_add((atomic_uint *volatile)(v9 + 20), 0xFFFFFFFF) == 1) {
        sub_1002932F4(a3);
      }
      *(void *)(a3 + 56) = 0;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      if (*(int *)(a3 + 4) <= 0)
      {
        *(_DWORD *)a3 = *v7;
        int v13 = *(_DWORD *)(a2 + 20);
        if (v13 <= 2)
        {
LABEL_14:
          *(_DWORD *)(a3 + 4) = v13;
          *(void *)(a3 + 8) = *(void *)(a2 + 24);
          uint64_t v14 = *(void **)(a2 + 88);
          uint64_t v15 = *(void **)(a3 + 72);
          *uint64_t v15 = *v14;
          v15[1] = v14[1];
LABEL_21:
          *(_OWORD *)(a3 + 16) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 48);
          __n128 result = *(__n128 *)(a2 + 64);
          *(__n128 *)(a3 + 48) = result;
          return result;
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a3 + 64);
        do
        {
          *(_DWORD *)(v11 + 4 * v10++) = 0;
          uint64_t v12 = *(int *)(a3 + 4);
        }
        while (v10 < v12);
        *(_DWORD *)a3 = *v7;
        if ((int)v12 <= 2)
        {
          int v13 = *(_DWORD *)(a2 + 20);
          if (v13 <= 2) {
            goto LABEL_14;
          }
        }
      }
      sub_1002931A8(a3, a2 + 16);
      goto LABEL_21;
    }
  }
  else
  {
    if ((((unsigned __int16)v6 ^ (unsigned __int16)a4) & 0xFF8) != 0)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      qmemcpy((void *)sub_1002D19D8(&v17, 59), "((((_type) & ((512 - 1) << 3)) >> 3) + 1) == e.a.channels()", 59);
      sub_1002D2278(-215, &v17, "assign", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matop.cpp", 1238);
    }
    LODWORD(v17) = 33619968;
    uint64_t v18 = a3;
    uint64_t v19 = 0;
    sub_10024011C((unsigned int *)(a2 + 16), (uint64_t)&v17, a4, 1.0, 0.0);
  }
  return result;
}

void sub_10028CDBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D1A1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10028CDD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v38[0]) = 1124007936;
  memset((char *)v38 + 4, 0, 48);
  v38[3] = 0u;
  int v39 = (char *)v38 + 8;
  uint64_t v40 = v41;
  v41[0] = 0;
  v41[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4)
  {
    int v6 = (_OWORD *)a3;
    int v7 = (_OWORD *)(a2 + 320);
    if (*(void *)(a2 + 128)) {
      goto LABEL_4;
    }
  }
  else
  {
    int v6 = v38;
    int v7 = (_OWORD *)(a2 + 320);
    if (*(void *)(a2 + 128))
    {
LABEL_4:
      double v8 = *(double *)(a2 + 320);
      double v9 = *(double *)(a2 + 328);
      double v11 = *(double *)(a2 + 336);
      double v10 = *(double *)(a2 + 344);
      BOOL v14 = v10 == 0.0 && v11 == 0.0 && v9 == 0.0 && v8 == 0.0;
      if (!v14 && v9 == 0.0 && v11 == 0.0 && v10 == 0.0)
      {
        uint64_t v37 = 0;
        int v35 = 16842752;
        uint64_t v36 = (_OWORD *)(a2 + 16);
        uint64_t v34 = 0;
        int v32 = 16842752;
        int v33 = (_OWORD *)(a2 + 112);
        double v15 = *(double *)(a2 + 304);
        double v16 = *(double *)(a2 + 312);
        int v29 = 33619968;
        uint64_t v30 = v6;
        uint64_t v31 = 0;
        sub_1002141AC((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, -1, v15, v16, v8);
      }
      else
      {
        double v19 = *(double *)(a2 + 304);
        double v20 = *(double *)(a2 + 312);
        if (v19 == 1.0)
        {
          if (v20 == 1.0)
          {
            uint64_t v37 = 0;
            int v35 = 16842752;
            uint64_t v36 = (_OWORD *)(a2 + 16);
            uint64_t v34 = 0;
            int v32 = 16842752;
            int v33 = (_OWORD *)(a2 + 112);
            int v29 = 33619968;
            uint64_t v30 = v6;
            uint64_t v31 = 0;
            uint64_t v21 = sub_1002A02C4();
            sub_100211CEC((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, (uint64_t)v21, -1);
          }
          else
          {
            uint64_t v37 = 0;
            int v35 = 16842752;
            if (v20 == -1.0)
            {
              uint64_t v36 = (_OWORD *)(a2 + 16);
              uint64_t v34 = 0;
              int v32 = 16842752;
              int v33 = (_OWORD *)(a2 + 112);
              int v29 = 33619968;
              uint64_t v30 = v6;
              uint64_t v31 = 0;
              BOOL v24 = sub_1002A02C4();
              sub_100213E80((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, (uint64_t)v24, -1);
            }
            else
            {
              uint64_t v36 = (_OWORD *)(a2 + 112);
              uint64_t v34 = 0;
              int v32 = 16842752;
              int v33 = (_OWORD *)(a2 + 16);
              int v29 = 33619968;
              uint64_t v30 = v6;
              uint64_t v31 = 0;
              sub_10026E568((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, v20);
            }
          }
        }
        else if (v20 == 1.0)
        {
          uint64_t v37 = 0;
          int v35 = 16842752;
          if (v19 == -1.0)
          {
            uint64_t v36 = (_OWORD *)(a2 + 112);
            uint64_t v34 = 0;
            int v32 = 16842752;
            int v33 = (_OWORD *)(a2 + 16);
            int v29 = 33619968;
            uint64_t v30 = v6;
            uint64_t v31 = 0;
            uint64_t v23 = sub_1002A02C4();
            sub_100213E80((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, (uint64_t)v23, -1);
          }
          else
          {
            uint64_t v36 = (_OWORD *)(a2 + 16);
            uint64_t v34 = 0;
            int v32 = 16842752;
            int v33 = (_OWORD *)(a2 + 112);
            int v29 = 33619968;
            uint64_t v30 = v6;
            uint64_t v31 = 0;
            sub_10026E568((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, v19);
          }
        }
        else
        {
          uint64_t v37 = 0;
          int v35 = 16842752;
          uint64_t v36 = (_OWORD *)(a2 + 16);
          uint64_t v34 = 0;
          int v32 = 16842752;
          int v33 = (_OWORD *)(a2 + 112);
          int v29 = 33619968;
          uint64_t v30 = v6;
          uint64_t v31 = 0;
          sub_1002141AC((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, -1, v19, v20, 0.0);
        }
        if (*(double *)(a2 + 328) != 0.0 || *(double *)(a2 + 336) != 0.0 || *(double *)(a2 + 344) != 0.0)
        {
          uint64_t v36 = v6;
          uint64_t v37 = 0;
          int v35 = 16842752;
          int v32 = -1056833530;
          int v33 = v7;
          uint64_t v34 = 0x400000001;
          int v29 = 33619968;
          uint64_t v30 = v6;
          uint64_t v31 = 0;
          uint64_t v26 = sub_1002A02C4();
          sub_100211CEC((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, (uint64_t)v26, -1);
        }
      }
      goto LABEL_46;
    }
  }
  if (*(double *)(a2 + 328) == 0.0 && *(double *)(a2 + 336) == 0.0 && *(double *)(a2 + 344) == 0.0)
  {
    double v17 = *(double *)(a2 + 304);
    if (*((void *)v6 + 2) != *(void *)(a3 + 16) || fabs(v17) != 1.0)
    {
      int v35 = 33619968;
      uint64_t v36 = (_OWORD *)a3;
      uint64_t v37 = 0;
      sub_10024011C((unsigned int *)(a2 + 16), (uint64_t)&v35, a4, v17, *(double *)(a2 + 320));
      goto LABEL_48;
    }
    if (v17 == 1.0) {
      goto LABEL_25;
    }
  }
  else
  {
    double v17 = *(double *)(a2 + 304);
    if (v17 == 1.0)
    {
LABEL_25:
      uint64_t v36 = (_OWORD *)(a2 + 16);
      uint64_t v37 = 0;
      int v35 = 16842752;
      int v32 = -1056833530;
      int v33 = v7;
      uint64_t v34 = 0x400000001;
      int v29 = 33619968;
      uint64_t v30 = v6;
      uint64_t v31 = 0;
      uint64_t v18 = sub_1002A02C4();
      sub_100211CEC((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, (uint64_t)v18, -1);
      goto LABEL_46;
    }
  }
  if (v17 == -1.0)
  {
    int v35 = -1056833530;
    uint64_t v36 = v7;
    uint64_t v37 = 0x400000001;
    int v33 = (_OWORD *)(a2 + 16);
    uint64_t v34 = 0;
    int v32 = 16842752;
    int v29 = 33619968;
    uint64_t v30 = v6;
    uint64_t v31 = 0;
    uint64_t v22 = sub_1002A02C4();
    sub_100213E80((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, (uint64_t)v22, -1);
  }
  else
  {
    int v35 = 33619968;
    uint64_t v36 = v6;
    uint64_t v37 = 0;
    sub_10024011C((unsigned int *)(a2 + 16), (uint64_t)&v35, *(_DWORD *)(a2 + 16) & 0xFFF, v17, 0.0);
    uint64_t v36 = v6;
    uint64_t v37 = 0;
    int v35 = 16842752;
    int v32 = -1056833530;
    int v33 = v7;
    uint64_t v34 = 0x400000001;
    int v29 = 33619968;
    uint64_t v30 = v6;
    uint64_t v31 = 0;
    int v25 = sub_1002A02C4();
    sub_100211CEC((uint64_t)&v35, (uint64_t)&v32, (uint64_t)&v29, (uint64_t)v25, -1);
  }
LABEL_46:
  if (*((void *)v6 + 2) != *(void *)(a3 + 16))
  {
    int v35 = 33619968;
    uint64_t v36 = (_OWORD *)a3;
    uint64_t v37 = 0;
    sub_10024011C((unsigned int *)v6, (uint64_t)&v35, *(_DWORD *)a3 & 0xFFF, 1.0, 0.0);
  }
LABEL_48:
  if (*((void *)&v38[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v38[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v38);
  }
  *((void *)&v38[3] + 1) = 0;
  memset(&v38[1], 0, 32);
  if (SDWORD1(v38[0]) >= 1)
  {
    uint64_t v27 = 0;
    int v28 = v39;
    do
      *(_DWORD *)&v28[4 * v27++] = 0;
    while (v27 < SDWORD1(v38[0]));
  }
  if (v40 != v41) {
    j__free(v40);
  }
}

void sub_10028D3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D4E4(uint64_t a1, uint64_t *a2, double *a3, double *a4)
{
  sub_1002D6AE8(v9, &off_100495200);
  sub_10028D598((uint64_t)a4, a2);
  double v7 = a4[41];
  a4[40] = *a3 + a4[40];
  a4[41] = a3[1] + v7;
  double v8 = a4[43];
  a4[42] = a3[2] + a4[42];
  a4[43] = a3[3] + v8;
  if (v10) {
    sub_1002D6888(v9);
  }
}

void sub_10028D584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10028D598(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = a2[9];
    if (v5) {
      atomic_fetch_add((atomic_uint *volatile)(v5 + 20), 1u);
    }
    int v6 = (_DWORD *)(a1 + 16);
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7 && atomic_fetch_add((atomic_uint *volatile)(v7 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 16);
    }
    double v8 = a2 + 2;
    *(void *)(a1 + 72) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    if (*(int *)(a1 + 20) <= 0)
    {
      *int v6 = *v8;
      int v12 = *((_DWORD *)a2 + 5);
      if (v12 <= 2)
      {
LABEL_12:
        *(_DWORD *)(a1 + 20) = v12;
        *(void *)(a1 + 24) = a2[3];
        int v13 = (void *)a2[11];
        BOOL v14 = *(void **)(a1 + 88);
        *BOOL v14 = *v13;
        v14[1] = v13[1];
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(a1 + 80);
      do
      {
        *(_DWORD *)(v10 + 4 * v9++) = 0;
        uint64_t v11 = *(int *)(a1 + 20);
      }
      while (v9 < v11);
      *int v6 = *v8;
      if ((int)v11 <= 2)
      {
        int v12 = *((_DWORD *)a2 + 5);
        if (v12 <= 2) {
          goto LABEL_12;
        }
      }
    }
    sub_1002931A8(a1 + 16, (uint64_t)v8);
LABEL_15:
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    uint64_t v15 = a2[21];
    if (v15) {
      atomic_fetch_add((atomic_uint *volatile)(v15 + 20), 1u);
    }
    double v16 = (_DWORD *)(a1 + 112);
    uint64_t v17 = *(void *)(a1 + 168);
    if (v17 && atomic_fetch_add((atomic_uint *volatile)(v17 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 112);
    }
    uint64_t v18 = a2 + 14;
    *(void *)(a1 + 168) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    if (*(int *)(a1 + 116) <= 0)
    {
      *double v16 = *v18;
      int v22 = *((_DWORD *)a2 + 29);
      if (v22 <= 2)
      {
LABEL_25:
        *(_DWORD *)(a1 + 116) = v22;
        *(void *)(a1 + 120) = a2[15];
        uint64_t v23 = (void *)a2[23];
        BOOL v24 = *(void **)(a1 + 184);
        *BOOL v24 = *v23;
        v24[1] = v23[1];
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(a1 + 176);
      do
      {
        *(_DWORD *)(v20 + 4 * v19++) = 0;
        uint64_t v21 = *(int *)(a1 + 116);
      }
      while (v19 < v21);
      *double v16 = *v18;
      if ((int)v21 <= 2)
      {
        int v22 = *((_DWORD *)a2 + 29);
        if (v22 <= 2) {
          goto LABEL_25;
        }
      }
    }
    sub_1002931A8(a1 + 112, (uint64_t)v18);
LABEL_28:
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    uint64_t v25 = a2[33];
    if (v25) {
      atomic_fetch_add((atomic_uint *volatile)(v25 + 20), 1u);
    }
    uint64_t v26 = (_DWORD *)(a1 + 208);
    uint64_t v27 = *(void *)(a1 + 264);
    if (v27 && atomic_fetch_add((atomic_uint *volatile)(v27 + 20), 0xFFFFFFFF) == 1) {
      sub_1002932F4(a1 + 208);
    }
    int v28 = a2 + 26;
    *(void *)(a1 + 264) = 0;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    if (*(int *)(a1 + 212) <= 0)
    {
      _DWORD *v26 = *v28;
      int v32 = *((_DWORD *)a2 + 53);
      if (v32 <= 2)
      {
LABEL_38:
        *(_DWORD *)(a1 + 212) = v32;
        *(void *)(a1 + 216) = a2[27];
        int v33 = (void *)a2[35];
        uint64_t v34 = *(void **)(a1 + 280);
        *uint64_t v34 = *v33;
        v34[1] = v33[1];
LABEL_41:
        *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
        *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
        *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = *(void *)(a1 + 272);
      do
      {
        *(_DWORD *)(v30 + 4 * v29++) = 0;
        uint64_t v31 = *(int *)(a1 + 212);
      }
      while (v29 < v31);
      _DWORD *v26 = *v28;
      if ((int)v31 <= 2)
      {
        int v32 = *((_DWORD *)a2 + 53);
        if (v32 <= 2) {
          goto LABEL_38;
        }
      }
    }
    sub_1002931A8(a1 + 208, (uint64_t)v28);
    goto LABEL_41;
  }
LABEL_42:
  long long v35 = *((_OWORD *)a2 + 19);
  long long v36 = *((_OWORD *)a2 + 21);
  *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
  *(_OWORD *)(a1 + 336) = v36;
  *(_OWORD *)(a1 + 304) = v35;
  return a1;
}

void sub_10028D8B4(uint64_t a1, float64x2_t *a2, uint64_t *a3, uint64_t a4)
{
  sub_1002D6AE8(v10, &off_100495220);
  sub_10028D598(a4, a3);
  float64x2_t v7 = *(float64x2_t *)(a4 + 320);
  *(float64x2_t *)(a4 + 304) = vnegq_f64(*(float64x2_t *)(a4 + 304));
  float64x2_t v8 = vsubq_f64(*a2, v7);
  float64x2_t v9 = vsubq_f64(a2[1], *(float64x2_t *)(a4 + 336));
  *(float64x2_t *)(a4 + 320) = v8;
  *(float64x2_t *)(a4 + 336) = v9;
  if (v11) {
    sub_1002D6888(v10);
  }
}

void sub_10028D93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028D950(double a1, uint64_t a2, uint64_t *a3, float64x2_t *a4)
{
  sub_1002D6AE8(v8, &off_100495240);
  sub_10028D598((uint64_t)a4, a3);
  float64x2_t v6 = vmulq_n_f64(a4[20], a1);
  a4[19] = vmulq_n_f64(a4[19], a1);
  a4[20] = v6;
  a4[21] = vmulq_n_f64(a4[21], a1);
  if (v9) {
    sub_1002D6888(v8);
  }
}

void sub_10028D9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028D9E4(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1002D6AE8(v14, &off_100495260);
  if (*(uint64_t **)a3 == &qword_1004E09B8
    && (!*(void *)(a3 + 128) || *(double *)(a3 + 312) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a3 + 336)))))) & 1) == 0)
  {
    LODWORD(v10[0]) = 1124007936;
    memset((char *)v10 + 4, 0, 48);
    v10[3] = 0u;
    int v11 = (char *)v10 + 8;
    int v12 = v13;
    v13[0] = 0;
    v13[1] = 0;
    sub_10028A1A8(a4, 47, a3 + 16, (uint64_t)v10, a1 / *(double *)(a3 + 304));
    if (*((void *)&v10[3] + 1)
      && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v10[3] + 1) + 20), 0xFFFFFFFF) == 1)
    {
      sub_1002932F4((uint64_t)v10);
    }
    *((void *)&v10[3] + 1) = 0;
    memset(&v10[1], 0, 32);
    if (SDWORD1(v10[0]) >= 1)
    {
      uint64_t v8 = 0;
      int v9 = v11;
      do
        *(_DWORD *)&v9[4 * v8++] = 0;
      while (v8 < SDWORD1(v10[0]));
    }
    if (v12 != v13) {
      j__free(v12);
    }
  }
  else
  {
    sub_10028AD28(a1, v7, (void *)a3, a4);
  }
  if (v15) {
    sub_1002D6888(v14);
  }
}

void sub_10028DB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000094F4((uint64_t)&a9);
  sub_10020FA00(v9 - 64);
  _Unwind_Resume(a1);
}

void sub_10028DB7C(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_10028DB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1002D6AE8(v6, &off_100495280);
  if (*(uint64_t **)a2 == &qword_1004E09B8
    && (!*(void *)(a2 + 128) || *(double *)(a2 + 312) == 0.0)
    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 320)), (int32x4_t)vceqzq_f64(*(float64x2_t *)(a2 + 336)))))) & 1) == 0)
  {
    sub_10028B2C8(a3, a2 + 16, *(double *)(a2 + 304));
  }
  else
  {
    sub_10028B174(v5, (void *)a2, a3);
  }
  if (v7) {
    sub_1002D6888(v6);
  }
}

void sub_10028DC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028DC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1002D6AE8(v15, &off_1004952A0);
  uint64_t v6 = *(void *)(a2 + 128);
  double v7 = *(double *)(a2 + 304);
  double v8 = *(double *)(a2 + 312);
  if (!v6 || v8 == 0.0)
  {
    if (fabs(v7) == 1.0)
    {
      float64x2_t v12 = vmulq_n_f64(vnegq_f64(*(float64x2_t *)(a2 + 320)), v7);
      float64x2_t v13 = vmulq_n_f64(vnegq_f64(*(float64x2_t *)(a2 + 336)), v7);
      v14[0] = v12;
      v14[1] = v13;
      sub_10028C68C(a3, 97, a2 + 16, v14);
      goto LABEL_11;
    }
    if (!v6)
    {
LABEL_7:
      sub_10028AF54(v5, (void *)a2, a3);
      goto LABEL_11;
    }
  }
  double v9 = v8 + v7;
  double v10 = v8 * v7;
  if (v9 != 0.0 || v10 != -1.0) {
    goto LABEL_7;
  }
  sub_10028A1A8(a3, 97, a2 + 16, a2 + 112, 1.0);
LABEL_11:
  if (v16) {
    sub_1002D6888(v15);
  }
}

void sub_10028DD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028DD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10020FA00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028DD74(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v25[0]) = 1124007936;
  memset((char *)v25 + 4, 0, 48);
  v25[3] = 0u;
  uint64_t v26 = (char *)v25 + 8;
  uint64_t v27 = v28;
  v28[0] = 0;
  v28[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4)
  {
    uint64_t v6 = (unsigned int *)a3;
    int v7 = *(_DWORD *)(a2 + 8);
    if (v7 != 47) {
      goto LABEL_4;
    }
LABEL_13:
    if (*(void *)(a2 + 128))
    {
      uint64_t v24 = 0;
      LODWORD(v22) = 16842752;
      uint64_t v23 = a2 + 16;
      uint64_t v21 = 0;
      int v19 = 16842752;
      uint64_t v20 = (unsigned int *)(a2 + 112);
      int v16 = 33619968;
      uint64_t v17 = v6;
      uint64_t v18 = 0;
      sub_100214068((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16, -1, *(double *)(a2 + 304));
    }
    else
    {
      double v10 = *(double *)(a2 + 304);
      uint64_t v23 = a2 + 16;
      uint64_t v24 = 0;
      LODWORD(v22) = 16842752;
      int v19 = 33619968;
      uint64_t v20 = v6;
      uint64_t v21 = 0;
      sub_10021410C((uint64_t)&v22, (uint64_t)&v19, -1, v10);
    }
    goto LABEL_30;
  }
  uint64_t v6 = (unsigned int *)v25;
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 == 47) {
    goto LABEL_13;
  }
LABEL_4:
  if (v7 == 42)
  {
    uint64_t v24 = 0;
    LODWORD(v22) = 16842752;
    uint64_t v23 = a2 + 16;
    uint64_t v21 = 0;
    int v19 = 16842752;
    uint64_t v20 = (unsigned int *)(a2 + 112);
    int v16 = 33619968;
    uint64_t v17 = v6;
    uint64_t v18 = 0;
    sub_100213FC4((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16, -1, *(double *)(a2 + 304));
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 128);
    switch(v7)
    {
      case '|':
        if (v8)
        {
          uint64_t v24 = 0;
          LODWORD(v22) = 16842752;
          uint64_t v23 = a2 + 16;
          uint64_t v21 = 0;
          int v19 = 16842752;
          uint64_t v20 = (unsigned int *)(a2 + 112);
        }
        else
        {
          uint64_t v23 = a2 + 16;
          uint64_t v24 = 0;
          LODWORD(v22) = 16842752;
          int v19 = -1056833530;
          uint64_t v20 = (unsigned int *)(a2 + 320);
          uint64_t v21 = 0x400000001;
        }
        int v16 = 33619968;
        uint64_t v17 = v6;
        uint64_t v18 = 0;
        int v11 = sub_1002A02C4();
        sub_100211840((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)v11);
        break;
      case '^':
        if (v8)
        {
          uint64_t v24 = 0;
          LODWORD(v22) = 16842752;
          uint64_t v23 = a2 + 16;
          uint64_t v21 = 0;
          int v19 = 16842752;
          uint64_t v20 = (unsigned int *)(a2 + 112);
        }
        else
        {
          uint64_t v23 = a2 + 16;
          uint64_t v24 = 0;
          LODWORD(v22) = 16842752;
          int v19 = -1056833530;
          uint64_t v20 = (unsigned int *)(a2 + 320);
          uint64_t v21 = 0x400000001;
        }
        int v16 = 33619968;
        uint64_t v17 = v6;
        uint64_t v18 = 0;
        float64x2_t v12 = sub_1002A02C4();
        sub_1002118E8((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)v12);
        break;
      case '&':
        if (v8)
        {
          uint64_t v24 = 0;
          LODWORD(v22) = 16842752;
          uint64_t v23 = a2 + 16;
          uint64_t v21 = 0;
          int v19 = 16842752;
          uint64_t v20 = (unsigned int *)(a2 + 112);
        }
        else
        {
          uint64_t v23 = a2 + 16;
          uint64_t v24 = 0;
          LODWORD(v22) = 16842752;
          int v19 = -1056833530;
          uint64_t v20 = (unsigned int *)(a2 + 320);
          uint64_t v21 = 0x400000001;
        }
        int v16 = 33619968;
        uint64_t v17 = v6;
        uint64_t v18 = 0;
        double v9 = sub_1002A02C4();
        sub_100210174((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)v9);
        break;
      default:
        if (v7 != 126 || v8)
        {
          switch(v7)
          {
            case 'M':
              sub_100211B64(a2 + 16, a2 + 112, (uint64_t)v6);
              break;
            case 'N':
              uint64_t v23 = a2 + 16;
              uint64_t v24 = 0;
              LODWORD(v22) = 16842752;
              int v19 = -1056833530;
              uint64_t v20 = (unsigned int *)(a2 + 320);
              uint64_t v21 = 0x100000001;
              int v16 = 33619968;
              uint64_t v17 = v6;
              uint64_t v18 = 0;
              sub_100211A34((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16);
              break;
            case 'a':
              if (!v8) {
                goto LABEL_44;
              }
              uint64_t v24 = 0;
              LODWORD(v22) = 16842752;
              uint64_t v23 = a2 + 16;
              uint64_t v21 = 0;
              int v19 = 16842752;
              uint64_t v20 = (unsigned int *)(a2 + 112);
              int v16 = 33619968;
              uint64_t v17 = v6;
              uint64_t v18 = 0;
              sub_100213F28((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16);
              break;
            case 'm':
              sub_100211C28(a2 + 16, a2 + 112, (uint64_t)v6);
              break;
            case 'n':
              uint64_t v23 = a2 + 16;
              uint64_t v24 = 0;
              LODWORD(v22) = 16842752;
              int v19 = -1056833530;
              uint64_t v20 = (unsigned int *)(a2 + 320);
              uint64_t v21 = 0x100000001;
              int v16 = 33619968;
              uint64_t v17 = v6;
              uint64_t v18 = 0;
              sub_100211ACC((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16);
              break;
            default:
LABEL_44:
              if (v7 != 97 || v8)
              {
                sub_10022F344(&v22, "Unknown operation");
                sub_1002D2278(-2, &v22, "assign", "/Library/Caches/com.apple.xbs/Sources/Measure/externals/OpenCV/modules/core/src/matop.cpp", 1408);
              }
              uint64_t v23 = a2 + 16;
              uint64_t v24 = 0;
              LODWORD(v22) = 16842752;
              int v19 = -1056833530;
              uint64_t v20 = (unsigned int *)(a2 + 320);
              uint64_t v21 = 0x400000001;
              int v16 = 33619968;
              uint64_t v17 = v6;
              uint64_t v18 = 0;
              sub_100213F28((uint64_t)&v22, (uint64_t)&v19, (uint64_t)&v16);
              break;
          }
        }
        else
        {
          uint64_t v23 = a2 + 16;
          uint64_t v24 = 0;
          LODWORD(v22) = 16842752;
          int v19 = 33619968;
          uint64_t v20 = v6;
          uint64_t v21 = 0;
          float64x2_t v13 = sub_1002A02C4();
          sub_100211990((uint64_t)&v22, (uint64_t)&v19, (uint64_t)v13);
        }
        break;
    }
  }
LABEL_30:
  if (*((void *)v6 + 2) != *(void *)(a3 + 16))
  {
    LODWORD(v22) = 33619968;
    uint64_t v23 = a3;
    uint64_t v24 = 0;
    sub_10024011C(v6, (uint64_t)&v22, a4, 1.0, 0.0);
  }
  if (*((void *)&v25[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v25[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v25);
  }
  *((void *)&v25[3] + 1) = 0;
  memset(&v25[1], 0, 32);
  if (SDWORD1(v25[0]) >= 1)
  {
    uint64_t v14 = 0;
    int v15 = v26;
    do
      *(_DWORD *)&v15[4 * v14++] = 0;
    while (v14 < SDWORD1(v25[0]));
  }
  if (v27 != v28) {
    j__free(v27);
  }
}

void sub_10028E398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002D1A1C((uint64_t *)va);
  JUMPOUT(0x10028E168);
}

void sub_10028E3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028E49C(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1002D6AE8(v9, &off_1004952C0);
  int v8 = *(_DWORD *)(a3 + 8);
  if (v8 == 47 || v8 == 42)
  {
    sub_10028D598(a4, (uint64_t *)a3);
    *(double *)(a4 + 304) = *(double *)(a4 + 304) * a1;
  }
  else
  {
    sub_10028A42C(a1, v7, (void *)a3, a4);
  }
  if (v10) {
    sub_1002D6888(v9);
  }
}

void sub_10028E538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028E54C(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1002D6AE8(v16, &off_1004952E0);
  if (*(_DWORD *)(a3 + 8) == 47 && (!*(void *)(a3 + 128) || *(double *)(a3 + 312) == 0.0))
  {
    LODWORD(v12[0]) = 1124007936;
    memset((char *)v12 + 4, 0, 48);
    v12[3] = 0u;
    float64x2_t v13 = (char *)v12 + 8;
    uint64_t v14 = v15;
    v15[0] = 0;
    v15[1] = 0;
    double v8 = *(double *)(a3 + 304);
    memset(v11, 0, sizeof(v11));
    sub_100288DF0(a4, a3 + 16, (uint64_t)v12, v11, a1 / v8, 0.0);
    if (*((void *)&v12[3] + 1)
      && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v12[3] + 1) + 20), 0xFFFFFFFF) == 1)
    {
      sub_1002932F4((uint64_t)v12);
    }
    *((void *)&v12[3] + 1) = 0;
    memset(&v12[1], 0, 32);
    if (SDWORD1(v12[0]) >= 1)
    {
      uint64_t v9 = 0;
      int v10 = v13;
      do
        *(_DWORD *)&v10[4 * v9++] = 0;
      while (v9 < SDWORD1(v12[0]));
    }
    if (v14 != v15) {
      j__free(v14);
    }
  }
  else
  {
    sub_10028AD28(a1, v7, (void *)a3, a4);
  }
  if (v17) {
    sub_1002D6888(v16);
  }
}

void sub_10028E6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000094F4((uint64_t)va);
  sub_10020FA00(v5 - 64);
  _Unwind_Resume(a1);
}

void sub_10028E6C0(_Unwind_Exception *a1)
{
  sub_10020FA00(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_10028E6D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v19[0]) = 1124007936;
  memset((char *)v19 + 4, 0, 48);
  v19[3] = 0u;
  uint64_t v20 = (char *)v19 + 8;
  uint64_t v21 = v22;
  v22[0] = 0;
  v22[1] = 0;
  unsigned int v6 = a4 + 1;
  if ((a4 + 1) >= 2) {
    uint64_t v7 = (unsigned int *)v19;
  }
  else {
    uint64_t v7 = (unsigned int *)a3;
  }
  if (*(void *)(a2 + 128))
  {
    uint64_t v18 = 0;
    int v16 = 16842752;
    uint64_t v17 = a2 + 16;
    uint64_t v15 = 0;
    int v13 = 16842752;
    uint64_t v14 = a2 + 112;
  }
  else
  {
    uint64_t v17 = a2 + 16;
    uint64_t v18 = 0;
    int v16 = 16842752;
    int v13 = -1056833530;
    uint64_t v14 = a2 + 304;
    uint64_t v15 = 0x100000001;
  }
  int v10 = 33619968;
  int v11 = v7;
  uint64_t v12 = 0;
  sub_1002142B4((uint64_t)&v16, (uint64_t)&v13, (uint64_t)&v10, *(_DWORD *)(a2 + 8));
  if (v6 >= 2 && *(void *)&v19[1] != *(void *)(a3 + 16))
  {
    int v16 = 33619968;
    uint64_t v17 = a3;
    uint64_t v18 = 0;
    sub_10024011C(v7, (uint64_t)&v16, a4, 1.0, 0.0);
  }
  if (*((void *)&v19[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v19[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v19);
  }
  *((void *)&v19[3] + 1) = 0;
  memset(&v19[1], 0, 32);
  if (SDWORD1(v19[0]) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v20;
    do
      *(_DWORD *)&v9[4 * v8++] = 0;
    while (v8 < SDWORD1(v19[0]));
  }
  if (v21 != v22) {
    j__free(v21);
  }
}

void sub_10028E890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028E8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028E8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000094F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028E8D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v17[0]) = 1124007936;
  memset((char *)v17 + 4, 0, 48);
  v17[3] = 0u;
  uint64_t v18 = (char *)v17 + 8;
  int v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  if (a4 == -1 || (*(_DWORD *)(a2 + 16) & 0xFFF) == a4) {
    uint64_t v7 = (unsigned int *)a3;
  }
  else {
    uint64_t v7 = (unsigned int *)v17;
  }
  uint64_t v15 = a2 + 16;
  uint64_t v16 = 0;
  int v14 = 16842752;
  int v11 = 33619968;
  uint64_t v12 = v7;
  uint64_t v13 = 0;
  sub_100298524((uint64_t)&v14, (uint64_t)&v11);
  double v8 = *(double *)(a2 + 304);
  if (*((void *)v7 + 2) != *(void *)(a3 + 16) || v8 != 1.0)
  {
    int v14 = 33619968;
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    sub_10024011C(v7, (uint64_t)&v14, a4, v8, 0.0);
  }
  if (*((void *)&v17[3] + 1)
    && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v17[3] + 1) + 20), 0xFFFFFFFF) == 1)
  {
    sub_1002932F4((uint64_t)v17);
  }
  *((void *)&v17[3] + 1) = 0;
  memset(&v17[1], 0, 32);
  if (SDWORD1(v17[0]) >= 1)
  {
    uint64_t v9 = 0;
    int v10 = v18;
    do
      *(_DWORD *)&v10[4 * v9++] = 0;
    while (v9 < SDWORD1(v17[0]));
  }
  if (v19 != v20) {
    j__free(v19);
  }
}